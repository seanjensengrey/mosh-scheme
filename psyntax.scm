;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! t58d@library-file-path->cache-path (unspecified)) (set! t58f@read-annotated (unspecified)) (set! t591@annotation-stripped (unspecified)) (set! t593@annotation? (unspecified)) (set! t595@annotation-source (unspecified)) (set! t597@annotation-expression (unspecified)) (set! t599@scm->fasl (unspecified)) (set! t59b@fasl-save (unspecified)) (set! t59d@fasl-load (unspecified)) (set! t59f@verbose? (unspecified)) (set! t5a1@serialize-library (unspecified)) (set! t5a3@load-serialized-library (unspecified)) (set! t5a5@make-record-printer (unspecified)) (set! t5a7@compile-core (unspecified)) (set! t5a9@read-library-source-file (unspecified)) (set! t5ab@make-parameter (unspecified)) (set! t5ad@mosh-cache-dir (unspecified)) (set! t643@file-options-spec (unspecified)) (set! t58d@library-file-path->cache-path (lambda (t644@x) (call-with-values (lambda () (open-string-output-port)) (lambda (t64a@t647 t64b@t649) (let ((t64e@extract t64b@t649) (t64f@p t64a@t647)) (letrec* ((t653@display-hex (lambda (t65c@n) (if (<= '0 t65c@n '9) (display t65c@n t64f@p) (display (integer->char (+ (char->integer '#\a) (- t65c@n '10))) t64f@p))))) (begin (let t656@f ((t654@ls (string-split t644@x '#\/))) (if (not (null? t654@ls)) (begin (display '"_" t64f@p) (for-each (lambda (t658@c) (if (or (char<=? '#\a t658@c '#\z) (char<=? '#\A t658@c '#\Z) (char<=? '#\0 t658@c '#\9) (memv t658@c '(#\- #\. #\_ #\~))) (display t658@c t64f@p) (begin (display '"%" t64f@p) (let ((t65a@n (char->integer t658@c))) (begin (t653@display-hex (quotient t65a@n '16)) (t653@display-hex (remainder t65a@n '16))))))) (string->list (car t654@ls))) (t656@f (cdr t654@ls))) (void))) (t64e@extract)))))))) (set! t6be@t58d@library-file-path->cache-path t58d@library-file-path->cache-path) (set! t58f@read-annotated read) (set! t6bf@t58f@read-annotated t58f@read-annotated) (set! t591@annotation-stripped (lambda (t65e@x) (t597@annotation-expression t65e@x))) (set! t6c0@t591@annotation-stripped t591@annotation-stripped) (set! t593@annotation? (lambda (t660@x) (source-info t660@x))) (set! t6c1@t593@annotation? t593@annotation?) (set! t595@annotation-source (lambda (t662@x) (source-info t662@x))) (set! t6c2@t595@annotation-source t595@annotation-source) (set! t597@annotation-expression (lambda (t664@x) (if (annotated-pair? t664@x) (cons (car t664@x) (cdr t664@x)) (if (procedure? t664@x) (set-source-info! t664@x '#f) t664@x)))) (set! t6c3@t597@annotation-expression t597@annotation-expression) (set! t599@scm->fasl (lambda (t666@filename) (string-append (t5ad@mosh-cache-dir) '"/" (t58d@library-file-path->cache-path t666@filename) '".mosh-fasl"))) (set! t6c4@t599@scm->fasl t599@scm->fasl) (set! t59b@fasl-save (lambda (t668@filename t669@obj) (call-with-port (open-file-output-port t668@filename) (lambda (t66c@port) ((symbol-value 'fasl-write!) t669@obj t66c@port))))) (set! t6c5@t59b@fasl-save t59b@fasl-save) (set! t59d@fasl-load (lambda (t66e@filename) (call-with-port (open-file-input-port t66e@filename) (symbol-value 'fasl-read!)))) (set! t6c6@t59d@fasl-load t59d@fasl-load) (set! t59f@verbose? (symbol-value '%verbose)) (set! t6c7@t59f@verbose? t59f@verbose?) (set! t5a1@serialize-library (lambda (t670@filename t671@obj) (begin (if t59f@verbose? (format (current-error-port) '"serialize-library ~a\n..." t670@filename) (void)) (let ((t674@expanded2core (symbol-value 'expanded2core))) (let ((t676@compile (symbol-value 'compile-w/o-halt))) (let ((t678@code t671@obj)) (let ((t67a@pivot (cddddr (cddddr t678@code)))) (let ((t67c@visit (t676@compile (t674@expanded2core (car t67a@pivot))))) (begin (set-car! t67a@pivot t67c@visit) (let ((t67e@pivot (cdr t67a@pivot))) (let ((t680@invoke (t676@compile (t674@expanded2core (car t67e@pivot))))) (set-car! t67e@pivot t680@invoke))))))))) (let ((t682@fasl-file (t599@scm->fasl t670@filename))) (begin (if (file-exists? t682@fasl-file) (delete-file t682@fasl-file) (void)) ((call/cc (lambda (t686@t684) (lambda () (with-exception-handler (lambda (t688@c) ((call/cc (lambda (t68a@t685) (t686@t684 (lambda () (if '#t (begin (if t59f@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" t670@filename) (void)) (if (file-exists? t682@fasl-file) (delete-file t682@fasl-file) (void)) '#f) (t68a@t685 (lambda () (raise-continuable t688@c)))))))))) (lambda () (t59b@fasl-save t682@fasl-file t671@obj)))))))))))) (set! t6c8@t5a1@serialize-library t5a1@serialize-library) (set! t5a3@load-serialized-library (lambda (t68c@filename t68d@obj) (and (t5ad@mosh-cache-dir) (let ((t690@fasl-file (t599@scm->fasl t68c@filename))) (if (and (file-exists? t690@fasl-file) ((symbol-value 'file-newer?) t690@fasl-file t68c@filename)) (let ((t692@expanded2core (symbol-value 'expanded2core))) (let ((t694@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((t696@code (t59d@fasl-load t690@fasl-file))) (let ((t698@pivot (cddddr (cddddr t696@code)))) (let ((t69a@visit (car t698@pivot))) (let ((t69c@visit-proc (lambda () (t694@eval-compiled-core t69a@visit)))) (begin (set-car! t698@pivot t69c@visit-proc) (let ((t69e@pivot (cdr t698@pivot))) (let ((t6a0@invoke (car t69e@pivot))) (begin (set-car! t69e@pivot (lambda () (t694@eval-compiled-core t6a0@invoke))) (apply t68d@obj t696@code))))))))))) '#f))))) (set! t6c9@t5a3@load-serialized-library t5a3@load-serialized-library) (set! t5a5@make-record-printer (lambda (t6a2@name t6a3@printer) (lambda t6a6@x (begin (display '"record printer") (for-each display t6a6@x))))) (set! t6ca@t5a5@make-record-printer t5a5@make-record-printer) (set! t5a7@compile-core (lambda t6a8@x (apply error 'comile-core '"not implementated" t6a8@x))) (set! t6cb@t5a7@compile-core t5a7@compile-core) (set! t5a9@read-library-source-file (lambda (t6aa@file-name) (with-input-from-file t6aa@file-name t58f@read-annotated))) (set! t6cc@t5a9@read-library-source-file t5a9@read-library-source-file) (set! t5ab@make-parameter (lambda t6ba (let ((t6bb (length t6ba))) (if (= t6bb '1) (apply (lambda (t6ac@x) (t5ab@make-parameter t6ac@x (lambda (t6ae@x) t6ae@x))) t6ba) (if (= t6bb '2) (apply (lambda (t6b0@x t6b1@fender) (let ((t6b4@x (t6b1@fender t6b0@x))) (lambda t6b8 (let ((t6b9 (length t6b8))) (if (= t6b9 '0) (apply (lambda () t6b4@x) t6b8) (if (= t6b9 '1) (apply (lambda (t6b6@v) (set! t6b4@x (t6b1@fender t6b6@v))) t6b8) (error 'apply '"invalid arg count"))))))) t6ba) (error 'apply '"invalid arg count")))))) (set! t6cd@t5ab@make-parameter t5ab@make-parameter) (set! t5ad@mosh-cache-dir (t5ab@make-parameter '#f)) (set! t6ce@t5ad@mosh-cache-dir t5ad@mosh-cache-dir) (set! t643@file-options-spec (lambda (t6bc@x) t6bc@x)) (set! t6cf@t643@file-options-spec t643@file-options-spec) (void))
(begin (set! t6d5@current-primitive-locations (unspecified)) (set! t6d7@mutable? (unspecified)) (set! t6d9@rewriter (unspecified)) (set! t6db@expanded->core (unspecified)) (set! t6dd@compile-core-expr (unspecified)) (set! t6df@pretty-print (unspecified)) (set! t6e1@compile-core-expr-to-port (unspecified)) (set! t6d5@current-primitive-locations (t6cd@t5ab@make-parameter (lambda (t6e2@x) '#f) (lambda (t6e4@p) t6e4@p))) (set! t720@t6d5@current-primitive-locations t6d5@current-primitive-locations) (set! t6d7@mutable? (lambda (t6e6@x) (or (pair? t6e6@x) (vector? t6e6@x) (hashtable? t6e6@x)))) (set! t721@t6d7@mutable? t6d7@mutable?) (set! t6d9@rewriter (lambda (t6e8@quote-hack?) (letrec* ((t6eb@f (lambda (t6ec@x) (if (pair? t6ec@x) (let ((t6ee@t (car t6ec@x))) (if (memv t6ee@t '(quote)) (if (and t6e8@quote-hack? (t6d7@mutable? (cadr t6ec@x))) (let ((t6f0@g (gensym))) (begin (set-symbol-value! t6f0@g (cadr t6ec@x)) t6f0@g)) t6ec@x) (if (memv t6ee@t '(case-lambda)) (cons 'case-lambda (map (lambda (t6f2@x) (cons (car t6f2@x) (map t6eb@f (cdr t6f2@x)))) (cdr t6ec@x))) (if (memv t6ee@t '(lambda)) (cons* 'lambda (cadr t6ec@x) (map t6eb@f (cddr t6ec@x))) (if (memv t6ee@t '(letrec)) (let ((t6f4@bindings (cadr t6ec@x)) (t6f5@body* (cddr t6ec@x))) (let ((t6f8@lhs* (map car t6f4@bindings)) (t6f9@rhs* (map cadr t6f4@bindings))) (cons* 'letrec (map list t6f8@lhs* (map t6eb@f t6f9@rhs*)) (map t6eb@f t6f5@body*)))) (if (memv t6ee@t '(letrec*)) (let ((t6fc@bindings (cadr t6ec@x)) (t6fd@body* (cddr t6ec@x))) (let ((t700@lhs* (map car t6fc@bindings)) (t701@rhs* (map cadr t6fc@bindings))) (cons* 'letrec* (map list t700@lhs* (map t6eb@f t701@rhs*)) (map t6eb@f t6fd@body*)))) (if (memv t6ee@t '(library-letrec*)) (let ((t704@name (cadr t6ec@x)) (t705@x (cdr t6ec@x))) (let ((t708@bindings (cadr t705@x)) (t709@body* (cddr t705@x))) (let ((t70c@lhs* (map car t708@bindings)) (t70d@lhs** (map cadr t708@bindings)) (t70e@rhs* (map caddr t708@bindings))) (cons* 'library-letrec* t704@name (map list t70c@lhs* t70d@lhs** (map t6eb@f t70e@rhs*)) (map t6eb@f t709@body*))))) (if (memv t6ee@t '(begin)) (cons 'begin (map t6eb@f (cdr t6ec@x))) (if (memv t6ee@t '(set!)) (list 'set! (cadr t6ec@x) (t6eb@f (caddr t6ec@x))) (if (memv t6ee@t '(primitive)) (let ((t712@op (cadr t6ec@x))) (let ((t714@t ((t6d5@current-primitive-locations) t712@op))) (if t714@t ((lambda (t716@loc) t716@loc) t714@t) t712@op))) (if (memv t6ee@t '(define)) t6ec@x (if (list? t6ec@x) (map t6eb@f t6ec@x) (error 'rewrite '"invalid form ~s ~s" t6ec@x (list? t6ec@x)))))))))))))) t6ec@x)))) t6eb@f))) (set! t722@t6d9@rewriter t6d9@rewriter) (set! t6db@expanded->core (lambda (t718@x) ((t6d9@rewriter '#f) t718@x))) (set! t723@t6db@expanded->core t6db@expanded->core) (set! t6dd@compile-core-expr (lambda (t71a@x) ((t6d9@rewriter '#f) t71a@x))) (set! t724@t6dd@compile-core-expr t6dd@compile-core-expr) (set! t6df@pretty-print write) (set! t725@t6df@pretty-print t6df@pretty-print) (set! t6e1@compile-core-expr-to-port (lambda (t71c@x t71d@p) (t6df@pretty-print ((t6d9@rewriter '#f) t71c@x) t71d@p))) (set! t726@t6e1@compile-core-expr-to-port t6e1@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! t775@make-collection (unspecified)) (set! t777@current-library-collection (unspecified)) (set! t779@rp (unspecified)) (set! t783@library? (unspecified)) (set! t785@library-id (unspecified)) (set! t787@set-library-id! (unspecified)) (set! t789@library-name (unspecified)) (set! t78b@set-library-name! (unspecified)) (set! t78d@library-version (unspecified)) (set! t78f@set-library-version! (unspecified)) (set! t791@library-imp* (unspecified)) (set! t793@set-library-imp*! (unspecified)) (set! t795@library-vis* (unspecified)) (set! t797@set-library-vis*! (unspecified)) (set! t799@library-inv* (unspecified)) (set! t79b@set-library-inv*! (unspecified)) (set! t79d@library-subst (unspecified)) (set! t79f@set-library-subst! (unspecified)) (set! t7a1@library-env (unspecified)) (set! t7a3@set-library-env! (unspecified)) (set! t7a5@library-visit-state (unspecified)) (set! t7a7@set-library-visit-state! (unspecified)) (set! t7a9@library-invoke-state (unspecified)) (set! t7ab@set-library-invoke-state! (unspecified)) (set! t7ad@library-visit-code (unspecified)) (set! t7af@set-library-visit-code! (unspecified)) (set! t7b1@library-invoke-code (unspecified)) (set! t7b3@set-library-invoke-code! (unspecified)) (set! t7b5@library-visible? (unspecified)) (set! t7b7@set-library-visible?! (unspecified)) (set! t7b9@library-source-file-name (unspecified)) (set! t7bb@set-library-source-file-name! (unspecified)) (set! t7bd@dummy (unspecified)) (set! t7bf@find-dependencies (unspecified)) (set! t7c1@find-library-by (unspecified)) (set! t7c3@library-path (unspecified)) (set! t7c5@library-extensions (unspecified)) (set! t7c7@library-name->file-name (unspecified)) (set! t7c9@file-locator (unspecified)) (set! t7cb@serialize-all (unspecified)) (set! t7cd@current-precompiled-library-loader (unspecified)) (set! t7cf@try-load-from-file (unspecified)) (set! t7d1@library-loader (unspecified)) (set! t7d3@current-library-expander (unspecified)) (set! t7d5@external-pending-libraries (unspecified)) (set! t7d7@find-external-library (unspecified)) (set! t7d9@find-library-by-name (unspecified)) (set! t7db@library-exists? (unspecified)) (set! t7dd@find-library-by-spec/die (unspecified)) (set! t7df@label->binding-table (unspecified)) (set! t7e1@install-library-record (unspecified)) (set! t7e3@install-library (unspecified)) (set! t7e5@imported-label->binding (unspecified)) (set! t7e7@invoke-library (unspecified)) (set! t7e9@visit-library (unspecified)) (set! t7eb@invoke-library-by-spec (unspecified)) (set! t7ed@installed-libraries (unspecified)) (set! t7ef@library-spec (unspecified)) (set! t775@make-collection (lambda () (let ((t7f0@set '())) (letrec* ((t7f3@set-cons (lambda (t7f8@x t7f9@ls) (if (memq t7f8@x t7f9@ls) t7f9@ls (cons t7f8@x t7f9@ls))))) (lambda t7f6 (let ((t7f7 (length t7f6))) (if (= t7f7 '0) (apply (lambda () t7f0@set) t7f6) (if (= t7f7 '1) (apply (lambda (t7f4@x) (set! t7f0@set (t7f3@set-cons t7f4@x t7f0@set))) t7f6) (error 'apply '"invalid arg count"))))))))) (set! t964@t775@make-collection t775@make-collection) (set! t777@current-library-collection (t6cd@t5ab@make-parameter (t775@make-collection) (lambda (t7fc@x) (begin (if (not (procedure? t7fc@x)) (assertion-violation 'current-library-collection '"not a procedure" t7fc@x) (void)) t7fc@x)))) (set! t965@t777@current-library-collection t777@current-library-collection) (set! t779@rp (t6ca@t5a5@make-record-printer 'library (lambda (t7fe@x t7ff@p t800@wr) (begin (if (not (t783@library? t7fe@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (t78d@library-version t7fe@x)) (t789@library-name t7fe@x) (append (t789@library-name t7fe@x) (list (t78d@library-version t7fe@x))))) t7ff@p))))) (set! t966@t779@rp t779@rp) (set! t783@library? (lambda (t804@x) (and (simple-struct? t804@x) (eq? (simple-struct-name t804@x) 'library)))) (set! t967@t783@library? t783@library?) (set! t785@library-id (lambda (t806@x) (simple-struct-ref t806@x '0))) (set! t968@t785@library-id t785@library-id) (set! t787@set-library-id! (lambda (t808@x t809@val) (simple-struct-set! t808@x '0 t809@val))) (set! t969@t787@set-library-id! t787@set-library-id!) (set! t789@library-name (lambda (t80c@x) (simple-struct-ref t80c@x '1))) (set! t96a@t789@library-name t789@library-name) (set! t78b@set-library-name! (lambda (t80e@x t80f@val) (simple-struct-set! t80e@x '1 t80f@val))) (set! t96b@t78b@set-library-name! t78b@set-library-name!) (set! t78d@library-version (lambda (t812@x) (simple-struct-ref t812@x '2))) (set! t96c@t78d@library-version t78d@library-version) (set! t78f@set-library-version! (lambda (t814@x t815@val) (simple-struct-set! t814@x '2 t815@val))) (set! t96d@t78f@set-library-version! t78f@set-library-version!) (set! t791@library-imp* (lambda (t818@x) (simple-struct-ref t818@x '3))) (set! t96e@t791@library-imp* t791@library-imp*) (set! t793@set-library-imp*! (lambda (t81a@x t81b@val) (simple-struct-set! t81a@x '3 t81b@val))) (set! t96f@t793@set-library-imp*! t793@set-library-imp*!) (set! t795@library-vis* (lambda (t81e@x) (simple-struct-ref t81e@x '4))) (set! t970@t795@library-vis* t795@library-vis*) (set! t797@set-library-vis*! (lambda (t820@x t821@val) (simple-struct-set! t820@x '4 t821@val))) (set! t971@t797@set-library-vis*! t797@set-library-vis*!) (set! t799@library-inv* (lambda (t824@x) (simple-struct-ref t824@x '5))) (set! t972@t799@library-inv* t799@library-inv*) (set! t79b@set-library-inv*! (lambda (t826@x t827@val) (simple-struct-set! t826@x '5 t827@val))) (set! t973@t79b@set-library-inv*! t79b@set-library-inv*!) (set! t79d@library-subst (lambda (t82a@x) (simple-struct-ref t82a@x '6))) (set! t974@t79d@library-subst t79d@library-subst) (set! t79f@set-library-subst! (lambda (t82c@x t82d@val) (simple-struct-set! t82c@x '6 t82d@val))) (set! t975@t79f@set-library-subst! t79f@set-library-subst!) (set! t7a1@library-env (lambda (t830@x) (simple-struct-ref t830@x '7))) (set! t976@t7a1@library-env t7a1@library-env) (set! t7a3@set-library-env! (lambda (t832@x t833@val) (simple-struct-set! t832@x '7 t833@val))) (set! t977@t7a3@set-library-env! t7a3@set-library-env!) (set! t7a5@library-visit-state (lambda (t836@x) (simple-struct-ref t836@x '8))) (set! t978@t7a5@library-visit-state t7a5@library-visit-state) (set! t7a7@set-library-visit-state! (lambda (t838@x t839@val) (simple-struct-set! t838@x '8 t839@val))) (set! t979@t7a7@set-library-visit-state! t7a7@set-library-visit-state!) (set! t7a9@library-invoke-state (lambda (t83c@x) (simple-struct-ref t83c@x '9))) (set! t97a@t7a9@library-invoke-state t7a9@library-invoke-state) (set! t7ab@set-library-invoke-state! (lambda (t83e@x t83f@val) (simple-struct-set! t83e@x '9 t83f@val))) (set! t97b@t7ab@set-library-invoke-state! t7ab@set-library-invoke-state!) (set! t7ad@library-visit-code (lambda (t842@x) (simple-struct-ref t842@x '10))) (set! t97c@t7ad@library-visit-code t7ad@library-visit-code) (set! t7af@set-library-visit-code! (lambda (t844@x t845@val) (simple-struct-set! t844@x '10 t845@val))) (set! t97d@t7af@set-library-visit-code! t7af@set-library-visit-code!) (set! t7b1@library-invoke-code (lambda (t848@x) (simple-struct-ref t848@x '11))) (set! t97e@t7b1@library-invoke-code t7b1@library-invoke-code) (set! t7b3@set-library-invoke-code! (lambda (t84a@x t84b@val) (simple-struct-set! t84a@x '11 t84b@val))) (set! t97f@t7b3@set-library-invoke-code! t7b3@set-library-invoke-code!) (set! t7b5@library-visible? (lambda (t84e@x) (simple-struct-ref t84e@x '12))) (set! t980@t7b5@library-visible? t7b5@library-visible?) (set! t7b7@set-library-visible?! (lambda (t850@x t851@val) (simple-struct-set! t850@x '12 t851@val))) (set! t981@t7b7@set-library-visible?! t7b7@set-library-visible?!) (set! t7b9@library-source-file-name (lambda (t854@x) (simple-struct-ref t854@x '13))) (set! t982@t7b9@library-source-file-name t7b9@library-source-file-name) (set! t7bb@set-library-source-file-name! (lambda (t856@x t857@val) (simple-struct-set! t856@x '13 t857@val))) (set! t983@t7bb@set-library-source-file-name! t7bb@set-library-source-file-name!) (set! t7bd@dummy '3) (set! t984@t7bd@dummy t7bd@dummy) (set! t7bf@find-dependencies (lambda (t85a@ls) (if (null? t85a@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! t985@t7bf@find-dependencies t7bf@find-dependencies) (set! t7c1@find-library-by (lambda (t85c@pred) (let t860@f ((t85e@ls ((t777@current-library-collection)))) (if (null? t85e@ls) '#f (if (t85c@pred (car t85e@ls)) (car t85e@ls) (t860@f (cdr t85e@ls))))))) (set! t986@t7c1@find-library-by t7c1@find-library-by) (set! t7c3@library-path (t6cd@t5ab@make-parameter '(".") (lambda (t862@x) (if (and (list? t862@x) (for-all string? t862@x)) (map (lambda (t864@x) t864@x) t862@x) (assertion-violation 'library-path '"not a list of strings" t862@x))))) (set! t987@t7c3@library-path t7c3@library-path) (set! t7c5@library-extensions (t6cd@t5ab@make-parameter '(".sls" ".ss" ".scm") (lambda (t866@x) (if (and (list? t866@x) (for-all string? t866@x)) (map (lambda (t868@x) t868@x) t866@x) (assertion-violation 'library-extensions '"not a list of strings" t866@x))))) (set! t988@t7c5@library-extensions t7c5@library-extensions) (set! t7c7@library-name->file-name (lambda (t86a@x) (call-with-values (lambda () (open-string-output-port)) (lambda (t870@t86d t871@t86f) (let ((t874@extract t871@t86f) (t875@p t870@t86d)) (letrec* ((t879@display-hex (lambda (t882@n) (if (<= '0 t882@n '9) (display t882@n t875@p) (display (integer->char (+ (char->integer '#\a) (- t882@n '10))) t875@p))))) (begin (let t87c@f ((t87a@ls t86a@x)) (if (not (null? t87a@ls)) (begin (display '"/" t875@p) (for-each (lambda (t87e@c) (if (or (char<=? '#\a t87e@c '#\z) (char<=? '#\A t87e@c '#\Z) (char<=? '#\0 t87e@c '#\9) (memv t87e@c '(#\- #\. #\_ #\~))) (display t87e@c t875@p) (begin (display '"%" t875@p) (let ((t880@n (char->integer t87e@c))) (begin (t879@display-hex (quotient t880@n '16)) (t879@display-hex (remainder t880@n '16))))))) (string->list (symbol->string (car t87a@ls)))) (t87c@f (cdr t87a@ls))) (void))) (t874@extract)))))))) (set! t989@t7c7@library-name->file-name t7c7@library-name->file-name) (set! t7c9@file-locator (t6cd@t5ab@make-parameter (lambda (t884@x) (let ((t886@str (t7c7@library-name->file-name t884@x))) (let t88e@f ((t888@ls (t7c3@library-path)) (t889@exts (t7c5@library-extensions)) (t88a@failed-list '())) (if (null? t888@ls) (letrec* ((t898@t893 (make-record-type-descriptor '&library-resolution &condition-rtd 't896 '#f '#f '#((immutable library) (immutable files)))) (t89a@t895 '#f) (t89c@t894 (make-record-constructor-descriptor t898@t893 &condition-rcd t89a@t895)) (t89f@t892 (record-predicate t898@t893)) (t8a1@make-library-resolution-condition (record-constructor t89c@t894)) (t8a3@t890 (record-accessor t898@t893 '0)) (t8a5@t891 (record-accessor t898@t893 '1)) (t8a7@library-resolution-condition? (condition-predicate t898@t893)) (t8a9@condition-library (condition-accessor t898@t893 t8a3@t890)) (t8ab@condition-files (condition-accessor t898@t893 t8a5@t891))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (t8a1@make-library-resolution-condition t884@x (reverse t88a@failed-list))))) (if (null? t889@exts) (t88e@f (cdr t888@ls) (t7c5@library-extensions) t88a@failed-list) (let ((t8ac@name (string-append (car t888@ls) t886@str (car t889@exts)))) (if (file-exists? t8ac@name) t8ac@name (t88e@f t888@ls (cdr t889@exts) (cons t8ac@name t88a@failed-list))))))))) (lambda (t8ae@f) (if (procedure? t8ae@f) t8ae@f (assertion-violation 'file-locator '"not a procedure" t8ae@f))))) (set! t98a@t7c9@file-locator t7c9@file-locator) (set! t7cb@serialize-all (lambda (t8b0@serialize t8b1@compile) (letrec* ((t8b5@library-desc (lambda (t8b8@x) (list (t785@library-id t8b8@x) (t789@library-name t8b8@x))))) (for-each (lambda (t8b6@x) (if (t7b9@library-source-file-name t8b6@x) (t8b0@serialize (t7b9@library-source-file-name t8b6@x) (list (t785@library-id t8b6@x) (t789@library-name t8b6@x) (t78d@library-version t8b6@x) (map t8b5@library-desc (t791@library-imp* t8b6@x)) (map t8b5@library-desc (t795@library-vis* t8b6@x)) (map t8b5@library-desc (t799@library-inv* t8b6@x)) (t79d@library-subst t8b6@x) (t7a1@library-env t8b6@x) (t8b1@compile (t7ad@library-visit-code t8b6@x)) (t8b1@compile (t7b1@library-invoke-code t8b6@x)) (t7b5@library-visible? t8b6@x))) (void))) ((t777@current-library-collection)))))) (set! t98b@t7cb@serialize-all t7cb@serialize-all) (set! t7cd@current-precompiled-library-loader (t6cd@t5ab@make-parameter (lambda (t8ba@filename t8bb@sk) '#f))) (set! t98c@t7cd@current-precompiled-library-loader t7cd@current-precompiled-library-loader) (set! t7cf@try-load-from-file (lambda (t8be@filename) ((t7cd@current-precompiled-library-loader) t8be@filename (lambda t8e4 (let ((t8e5 (length t8e4))) (if (= t8e5 '11) (apply (lambda (t8c0@id t8c1@name t8c2@ver t8c3@imp* t8c4@vis* t8c5@inv* t8c6@exp-subst t8c7@exp-env t8c8@visit-proc t8c9@invoke-proc t8ca@visible?) (let t8d8@f ((t8d6@deps (append t8c3@imp* t8c4@vis* t8c5@inv*))) (if (null? t8d6@deps) (begin (t7e3@install-library t8c0@id t8c1@name t8c2@ver t8c3@imp* t8c4@vis* t8c5@inv* t8c6@exp-subst t8c7@exp-env t8c8@visit-proc t8c9@invoke-proc '#f '#f t8ca@visible? '#f) '#t) (let ((t8da@d (car t8d6@deps))) (let ((t8dc@label (car t8da@d)) (t8dd@dname (cadr t8da@d))) (let ((t8e0@l (t7d9@find-library-by-name t8dd@dname))) (if (and (t783@library? t8e0@l) (eq? t8dc@label (t785@library-id t8e0@l))) (t8d8@f (cdr t8d6@deps)) (begin (if t6c7@t59f@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" t8c1@name t8dd@dname t8be@filename) (void)) '#f)))))))) t8e4) (if (>= t8e5 '0) (apply (lambda t8e2@others '#f) t8e4) (error 'apply '"invalid arg count")))))))) (set! t98d@t7cf@try-load-from-file t7cf@try-load-from-file) (set! t7d1@library-loader (t6cd@t5ab@make-parameter (lambda (t8e6@x) (let ((t8e8@file-name ((t7c9@file-locator) t8e6@x))) (if (not t8e8@file-name) (assertion-violation '#f '"cannot file library" t8e6@x) (or (t7cf@try-load-from-file t8e8@file-name) ((t7d3@current-library-expander) (t6cc@t5a9@read-library-source-file t8e8@file-name) t8e8@file-name (lambda (t8ea@name) (if (not (fast-equal? t8ea@name t8e6@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (t8f0@t8ed t8f1@t8ef) (let ((t8f4@e t8f1@t8ef) (t8f5@p t8f0@t8ed)) (begin (display '"expected to find library " t8f5@p) (write t8e6@x t8f5@p) (display '" in file " t8f5@p) (display t8e8@file-name t8f5@p) (display '", found " t8f5@p) (write t8ea@name t8f5@p) (display '" instead" t8f5@p) (t8f4@e)))))) (void)))))))) (lambda (t8f8@f) (if (procedure? t8f8@f) t8f8@f (assertion-violation 'library-locator '"not a procedure" t8f8@f))))) (set! t98e@t7d1@library-loader t7d1@library-loader) (set! t7d3@current-library-expander (t6cd@t5ab@make-parameter (lambda (t8fa@x) (assertion-violation 'library-expander '"not initialized")) (lambda (t8fc@f) (if (procedure? t8fc@f) t8fc@f (assertion-violation 'library-expander '"not a procedure" t8fc@f))))) (set! t98f@t7d3@current-library-expander t7d3@current-library-expander) (set! t7d5@external-pending-libraries (t6cd@t5ab@make-parameter '())) (set! t990@t7d5@external-pending-libraries t7d5@external-pending-libraries) (set! t7d7@find-external-library (lambda (t8fe@name) (begin (if (member t8fe@name (t7d5@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" t8fe@name) (void)) (let ((t904@t901 t7d5@external-pending-libraries) (t905@t903 (cons t8fe@name (t7d5@external-pending-libraries)))) (let ((t908@swap (lambda () (let ((t90a@t (t904@t901))) (begin (t904@t901 t905@t903) (set! t905@t903 t90a@t)))))) (dynamic-wind t908@swap (lambda () (begin ((t7d1@library-loader) t8fe@name) (or (t7c1@find-library-by (lambda (t90c@x) (fast-equal? (t789@library-name t90c@x) t8fe@name))) (assertion-violation '#f '"handling external library did not yield the correct library" t8fe@name)))) t908@swap)))))) (set! t991@t7d7@find-external-library t7d7@find-external-library) (set! t7d9@find-library-by-name (lambda (t90e@name) (or (t7c1@find-library-by (lambda (t910@x) (fast-equal? (t789@library-name t910@x) t90e@name))) (t7d7@find-external-library t90e@name)))) (set! t992@t7d9@find-library-by-name t7d9@find-library-by-name) (set! t7db@library-exists? (lambda (t912@name) (and (t7c1@find-library-by (lambda (t914@x) (fast-equal? (t789@library-name t914@x) t912@name))) '#t))) (set! t993@t7db@library-exists? t7db@library-exists?) (set! t7dd@find-library-by-spec/die (lambda (t916@spec) (let ((t918@id (car t916@spec))) (or (t7c1@find-library-by (lambda (t91a@x) (eq? t918@id (t785@library-id t91a@x)))) (assertion-violation '#f '"cannot find library with required spec" t916@spec))))) (set! t994@t7dd@find-library-by-spec/die t7dd@find-library-by-spec/die) (set! t7df@label->binding-table (make-eq-hashtable)) (set! t995@t7df@label->binding-table t7df@label->binding-table) (set! t7e1@install-library-record (lambda (t91c@lib) (begin (let ((t91e@exp-env (t7a1@library-env t91c@lib))) (for-each (lambda (t920@x) (let ((t922@label (car t920@x)) (t923@binding (cdr t920@x))) (let ((t926@binding (let ((t928@t (car t923@binding))) (if (memv t928@t '(global)) (cons 'global (cons t91c@lib (cdr t923@binding))) (if (memv t928@t '(global-macro)) (cons 'global-macro (cons t91c@lib (cdr t923@binding))) (if (memv t928@t '(global-macro!)) (cons 'global-macro! (cons t91c@lib (cdr t923@binding))) t923@binding)))))) (begin (if (hashtable-ref t7df@label->binding-table t922@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" t922@label (hashtable-ref t7df@label->binding-table t922@label '#f) t926@binding) (exit)) (void)) (hashtable-set! t7df@label->binding-table t922@label t926@binding))))) t91e@exp-env)) ((t777@current-library-collection) t91c@lib)))) (set! t996@t7e1@install-library-record t7e1@install-library-record) (set! t7e3@install-library (lambda (t92a@id t92b@name t92c@ver t92d@imp* t92e@vis* t92f@inv* t930@exp-subst t931@exp-env t932@visit-proc t933@invoke-proc t934@visit-code t935@invoke-code t936@visible? t937@source-file-name) (let ((t946@imp-lib* (map t7dd@find-library-by-spec/die t92d@imp*)) (t947@vis-lib* (map t7dd@find-library-by-spec/die t92e@vis*)) (t948@inv-lib* (map t7dd@find-library-by-spec/die t92f@inv*))) (begin (if (not (and (symbol? t92a@id) (list? t92b@name) (list? t92c@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" t92a@id t92b@name t92c@ver) (void)) (if (t7db@library-exists? t92b@name) (assertion-violation 'install-library '"library is already installed" t92b@name) (void)) (let ((t94c@lib (make-simple-struct 'library '15 (list t92a@id t92b@name t92c@ver t946@imp-lib* t947@vis-lib* t948@inv-lib* t930@exp-subst t931@exp-env t932@visit-proc t933@invoke-proc t934@visit-code t935@invoke-code t936@visible? t937@source-file-name)))) (t7e1@install-library-record t94c@lib)))))) (set! t997@t7e3@install-library t7e3@install-library) (set! t7e5@imported-label->binding (lambda (t94e@lab) (hashtable-ref t7df@label->binding-table t94e@lab '#f))) (set! t998@t7e5@imported-label->binding t7e5@imported-label->binding) (set! t7e7@invoke-library (lambda (t950@lib) (let ((t952@invoke (t7a9@library-invoke-state t950@lib))) (if (procedure? t952@invoke) (begin (t7ab@set-library-invoke-state! t950@lib (lambda () (assertion-violation 'invoke '"circularity detected" t950@lib))) (for-each t7e7@invoke-library (t799@library-inv* t950@lib)) (t7ab@set-library-invoke-state! t950@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" t950@lib))) (t952@invoke) (t7ab@set-library-invoke-state! t950@lib '#t)) (void))))) (set! t999@t7e7@invoke-library t7e7@invoke-library) (set! t7e9@visit-library (lambda (t954@lib) (let ((t956@visit (t7a5@library-visit-state t954@lib))) (if (procedure? t956@visit) (begin (t7a7@set-library-visit-state! t954@lib (lambda () (assertion-violation 'visit '"circularity detected" t954@lib))) (for-each t7e7@invoke-library (t795@library-vis* t954@lib)) (t7a7@set-library-visit-state! t954@lib (lambda () (assertion-violation 'invoke '"first visit did not return" t954@lib))) (t956@visit) (t7a7@set-library-visit-state! t954@lib '#t)) (void))))) (set! t99a@t7e9@visit-library t7e9@visit-library) (set! t7eb@invoke-library-by-spec (lambda (t958@spec) (t7e7@invoke-library (t7dd@find-library-by-spec/die t958@spec)))) (set! t99b@t7eb@invoke-library-by-spec t7eb@invoke-library-by-spec) (set! t7ed@installed-libraries (lambda t960 (let ((t961 (length t960))) (if (= t961 '1) (apply (lambda (t95a@all?) (let t95e@f ((t95c@ls ((t777@current-library-collection)))) (if (null? t95c@ls) '() (if (or t95a@all? (t7b5@library-visible? (car t95c@ls))) (cons (car t95c@ls) (t95e@f (cdr t95c@ls))) (t95e@f (cdr t95c@ls)))))) t960) (if (= t961 '0) (apply (lambda () (t7ed@installed-libraries '#f)) t960) (error 'apply '"invalid arg count")))))) (set! t99c@t7ed@installed-libraries t7ed@installed-libraries) (set! t7ef@library-spec (lambda (t962@x) (begin (if (not (t783@library? t962@x)) (assertion-violation 'library-spec '"not a library" t962@x) (void)) (list (t785@library-id t962@x) (t789@library-name t962@x) (t78d@library-version t962@x))))) (set! t99d@t7ef@library-spec t7ef@library-spec) (void))
(begin (set! t9a1@build-global-define (unspecified)) (set! ta12@build-lambda (unspecified)) (set! ta14@build-case-lambda (unspecified)) (set! ta42@build-sequence (unspecified)) (set! ta44@build-void (unspecified)) (set! ta46@build-letrec (unspecified)) (set! ta48@build-let (unspecified)) (set! ta4a@build-named-let (unspecified)) (set! ta4c@build-letrec* (unspecified)) (set! ta4e@build-library-letrec* (unspecified)) (set! ta50@build-receive (unspecified)) (set! t9a1@build-global-define (lambda (ta51@x) (ta44@build-void))) (set! tadf@t9a1@build-global-define t9a1@build-global-define) (set! ta12@build-lambda (lambda (ta53@ae ta54@vars ta55@exp) (list 'lambda ta54@vars ta55@exp))) (set! tae0@ta12@build-lambda ta12@build-lambda) (set! ta14@build-case-lambda (lambda (ta59@ae ta5a@vars* ta5b@exp*) (letrec* ((ta60@build-error (lambda (ta97@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (ta62@build-pred (lambda (ta7f@ae ta80@n ta81@vars) (call-with-values (lambda () (let ta8d@f ((ta89@vars ta81@vars) (ta8a@count '0)) (if (pair? ta89@vars) (ta8d@f (cdr ta89@vars) (+ ta8a@count '1)) (if (null? ta89@vars) (values ta8a@count '=) (values ta8a@count '>=))))) (lambda (ta8f@ta86 ta90@ta88) (let ((ta93@pred ta90@ta88) (ta94@count ta8f@ta86)) (list (list 'primitive ta93@pred) ta80@n (list 'quote ta94@count))))))) (ta64@build-apply (lambda (ta77@ae ta78@g ta79@vars ta7a@exp) (list '(primitive apply) (ta12@build-lambda ta77@ae ta79@vars ta7a@exp) ta78@g))) (ta66@expand-case-lambda (lambda (ta67@ae ta68@vars ta69@exp*) (let ((ta6d@g (gensym)) (ta6e@n (gensym))) (list 'lambda ta6d@g (ta48@build-let ta67@ae (list ta6e@n) (list (list '(primitive length) ta6d@g)) (let ta75@f ((ta71@vars* ta5a@vars*) (ta72@exp* ta69@exp*)) (if (null? ta71@vars*) (ta60@build-error ta67@ae) (list 'if (ta62@build-pred ta67@ae ta6e@n (car ta71@vars*)) (ta64@build-apply ta67@ae ta6d@g (car ta71@vars*) (car ta72@exp*)) (ta75@f (cdr ta71@vars*) (cdr ta72@exp*))))))))))) (if (= (length ta5b@exp*) '1) (ta12@build-lambda ta59@ae (car ta5a@vars*) (car ta5b@exp*)) (ta66@expand-case-lambda ta59@ae ta5a@vars* ta5b@exp*))))) (set! tae1@ta14@build-case-lambda ta14@build-case-lambda) (set! ta42@build-sequence (lambda (ta99@ae ta9a@exps) (let ta9f@loop ((ta9d@exps ta9a@exps)) (if (null? (cdr ta9d@exps)) (car ta9d@exps) (if (equal? (car ta9d@exps) (ta44@build-void)) (ta9f@loop (cdr ta9d@exps)) (cons 'begin ta9d@exps)))))) (set! tae2@ta42@build-sequence ta42@build-sequence) (set! ta44@build-void (lambda () '((primitive void)))) (set! tae3@ta44@build-void ta44@build-void) (set! ta46@build-letrec (lambda (taa1@ae taa2@vars taa3@val-exps taa4@body-exp) (if (null? taa2@vars) taa4@body-exp (list 'letrec (map list taa2@vars taa3@val-exps) taa4@body-exp)))) (set! tae4@ta46@build-letrec ta46@build-letrec) (set! ta48@build-let (lambda (taa9@ae taaa@vars taab@val-exps taac@body-exp) (if (null? taaa@vars) taac@body-exp (list 'let (map list taaa@vars taab@val-exps) taac@body-exp)))) (set! tae5@ta48@build-let ta48@build-let) (set! ta4a@build-named-let (lambda (tab1@ae tab2@name tab3@vars tab4@val-exps tab5@body-exp) (list 'let tab2@name (map list tab3@vars tab4@val-exps) tab5@body-exp))) (set! tae6@ta4a@build-named-let ta4a@build-named-let) (set! ta4c@build-letrec* (lambda (tabb@ae tabc@vars tabd@val-exps tabe@body-exp) (if (null? tabc@vars) tabe@body-exp (list 'letrec* (map list tabc@vars tabd@val-exps) tabe@body-exp)))) (set! tae7@ta4c@build-letrec* ta4c@build-letrec*) (set! ta4e@build-library-letrec* (lambda (tac3@ae tac4@name tac5@vars tac6@locs tac7@val-exps tac8@body-exp) (cons 'begin (append (map (lambda (tacf@var) (cons 'set! (cons tacf@var '((unspecified))))) tac5@vars) (append (apply append (map (lambda (tad1@var tad2@loc tad3@val-exp) (list (list 'set! tad1@var tad3@val-exp) (list 'set! tad2@loc tad1@var))) tac5@vars tac6@locs tac7@val-exps)) (list tac8@body-exp)))))) (set! tae8@ta4e@build-library-letrec* ta4e@build-library-letrec*) (set! ta50@build-receive (lambda (tad7@ae tad8@vars tad9@producer tada@body*) (begin (display '"************** in ") (cons 'receive (cons tad8@vars (cons tad9@producer tada@body*)))))) (set! tae9@ta50@build-receive ta50@build-receive) (void))
(begin (set! taf8@file-options-macro (unspecified)) (set! tafa@set-cons (unspecified)) (set! tafc@set-union (unspecified)) (set! tb01@top-mark* (unspecified)) (set! tb03@top-marked? (unspecified)) (set! tb05@gen-lexical (unspecified)) (set! tb07@gen-global (unspecified)) (set! tb09@gen-label (unspecified)) (set! tb0b@gen-top-level-label (unspecified)) (set! tb0d@gen-define-label+loc (unspecified)) (set! tb0f@gen-define-label (unspecified)) (set! tb19@rib? (unspecified)) (set! tb1b@rib-sym* (unspecified)) (set! tb1d@set-rib-sym*! (unspecified)) (set! tb1f@rib-mark** (unspecified)) (set! tb21@set-rib-mark**! (unspecified)) (set! tb23@rib-label* (unspecified)) (set! tb25@set-rib-label*! (unspecified)) (set! tb27@rib-sealed/freq (unspecified)) (set! tb29@set-rib-sealed/freq! (unspecified)) (set! tb2b@rib-cache (unspecified)) (set! tb2d@set-rib-cache! (unspecified)) (set! tb2f@dummy (unspecified)) (set! tb31@make-empty-rib (unspecified)) (set! tb33@extend-rib! (unspecified)) (set! tb35@extend-rib/nc! (unspecified)) (set! tb37@make-rib-map (unspecified)) (set! tb39@seal-rib! (unspecified)) (set! tb3b@unseal-rib! (unspecified)) (set! tb3d@make-full-rib (unspecified)) (set! tb3f@rp (unspecified)) (set! tb49@stx? (unspecified)) (set! tb4b@stx-expr (unspecified)) (set! tb4d@set-stx-expr! (unspecified)) (set! tb4f@stx-mark* (unspecified)) (set! tb51@set-stx-mark*! (unspecified)) (set! tb53@stx-subst* (unspecified)) (set! tb55@set-stx-subst*! (unspecified)) (set! tb57@stx-ae* (unspecified)) (set! tb59@set-stx-ae*! (unspecified)) (set! tb5b@dummy (unspecified)) (set! tb5d@datum->stx (unspecified)) (set! tb5f@gen-mark (unspecified)) (set! tb61@anti-mark (unspecified)) (set! tb63@anti-mark? (unspecified)) (set! tb65@mkstx (unspecified)) (set! tb67@add-subst (unspecified)) (set! tb69@add-mark (unspecified)) (set! tb6b@syntax-kind? (unspecified)) (set! tb6d@syntax-vector->list (unspecified)) (set! tb6f@syntax-pair? (unspecified)) (set! tb71@syntax-vector? (unspecified)) (set! tb73@syntax-null? (unspecified)) (set! tb75@syntax-list? (unspecified)) (set! tb77@syntax-car (unspecified)) (set! tb79@syntax-cdr (unspecified)) (set! tb7b@syntax->list (unspecified)) (set! tb7d@id? (unspecified)) (set! tb7f@id->sym (unspecified)) (set! tb81@bound-id=? (unspecified)) (set! tb83@free-id=? (unspecified)) (set! tb85@valid-bound-ids? (unspecified)) (set! tb87@distinct-bound-ids? (unspecified)) (set! tb89@bound-id-member? (unspecified)) (set! tb8b@self-evaluating? (unspecified)) (set! tb8d@strip-annotations (unspecified)) (set! tb8f@strip (unspecified)) (set! tb91@stx->datum (unspecified)) (set! tb93@id->label (unspecified)) (set! tb95@label->binding (unspecified)) (set! tb97@make-binding (unspecified)) (set! tb99@binding-type (unspecified)) (set! tb9b@binding-value (unspecified)) (set! tb9d@raise-unbound-error (unspecified)) (set! tb9f@syntax-type (unspecified)) (set! tbad@sanitize-binding (unspecified)) (set! tbaf@make-variable-transformer (unspecified)) (set! tbb1@variable-transformer? (unspecified)) (set! tbb3@variable-transformer-procedure (unspecified)) (set! tbb5@make-eval-transformer (unspecified)) (set! td06@parse-define (unspecified)) (set! td08@parse-define-syntax (unspecified)) (set! td0a@scheme-stx-hashtable (unspecified)) (set! td0c@scheme-stx (unspecified)) (set! td0e@lexical-var (unspecified)) (set! td10@lexical-mutable? (unspecified)) (set! td12@set-lexical-mutable! (unspecified)) (set! td14@add-lexical (unspecified)) (set! td16@add-lexicals (unspecified)) (set! td18@letrec-helper (unspecified)) (set! td1a@let-transformer (unspecified)) (set! td1c@letrec-transformer (unspecified)) (set! td1e@letrec*-transformer (unspecified)) (set! td20@fluid-let-syntax-transformer (unspecified)) (set! td22@type-descriptor-transformer (unspecified)) (set! td24@record-type-descriptor-transformer (unspecified)) (set! td26@record-constructor-descriptor-transformer (unspecified)) (set! td28@when-macro (unspecified)) (set! td2a@unless-macro (unspecified)) (set! td2c@if-transformer (unspecified)) (set! td2e@and-transformer (unspecified)) (set! td30@or-transformer (unspecified)) (set! td32@case-macro (unspecified)) (set! td34@quote-transformer (unspecified)) (set! td36@case-lambda-transformer (unspecified)) (set! td38@lambda-transformer (unspecified)) (set! td3a@bless (unspecified)) (set! td3c@with-syntax-macro (unspecified)) (set! td3e@invalid-fmls-error (unspecified)) (set! td40@let-macro (unspecified)) (set! td42@let-values-macro (unspecified)) (set! td44@let*-values-macro (unspecified)) (set! td46@trace-lambda-macro (unspecified)) (set! td48@trace-define-macro (unspecified)) (set! td4a@trace-define-syntax-macro (unspecified)) (set! td4c@trace-let/rec-syntax (unspecified)) (set! td4e@trace-let-syntax-macro (unspecified)) (set! td50@trace-letrec-syntax-macro (unspecified)) (set! td52@guard-macro (unspecified)) (set! td54@define-enumeration-macro (unspecified)) (set! td56@time-macro (unspecified)) (set! td58@delay-macro (unspecified)) (set! td5a@assert-macro (unspecified)) (set! td5c@endianness-macro (unspecified)) (set! td5e@identifier-syntax-macro (unspecified)) (set! td60@do-macro (unspecified)) (set! td62@let*-macro (unspecified)) (set! td64@or-macro (unspecified)) (set! td66@and-macro (unspecified)) (set! td68@cond-macro (unspecified)) (set! td6a@do-include (unspecified)) (set! td6c@include-macro (unspecified)) (set! td6e@include-into-macro (unspecified)) (set! td70@syntax-rules-macro (unspecified)) (set! td72@quasiquote-macro (unspecified)) (set! td74@quasisyntax-macro (unspecified)) (set! td76@define-struct-macro (unspecified)) (set! td78@define-record-type-macro (unspecified)) (set! td7a@define-condition-type-macro (unspecified)) (set! td7c@incorrect-usage-macro (unspecified)) (set! td7e@parameterize-macro (unspecified)) (set! td80@foreign-call-transformer (unspecified)) (set! td82@convert-pattern (unspecified)) (set! td84@syntax-dispatch (unspecified)) (set! td86@ellipsis? (unspecified)) (set! td88@underscore? (unspecified)) (set! td8a@verify-literals (unspecified)) (set! td8c@syntax-case-transformer (unspecified)) (set! td8e@ellipsis-map (unspecified)) (set! td90@syntax-transformer (unspecified)) (set! td92@core-macro-transformer (unspecified)) (set! td94@symbol-macro (unspecified)) (set! td96@macro-transformer (unspecified)) (set! td98@local-macro-transformer (unspecified)) (set! td9a@do-macro-call (unspecified)) (set! td9c@chi-macro (unspecified)) (set! td9e@chi-local-macro (unspecified)) (set! tda0@chi-global-macro (unspecified)) (set! tda2@chi-expr* (unspecified)) (set! tda4@chi-application (unspecified)) (set! tda6@chi-expr (unspecified)) (set! tda8@chi-set! (unspecified)) (set! tdaa@verify-formals (unspecified)) (set! tdac@chi-lambda-clause (unspecified)) (set! tdae@chi-lambda-clause* (unspecified)) (set! tdb0@chi-defun (unspecified)) (set! tdb2@chi-rhs (unspecified)) (set! tdb4@expand-interaction-rhs*/init* (unspecified)) (set! tdb6@chi-rhs* (unspecified)) (set! tdb8@find-bound=? (unspecified)) (set! tdba@find-dups (unspecified)) (set! tdbc@chi-internal (unspecified)) (set! tdbe@parse-module (unspecified)) (set! tdc8@module-interface? (unspecified)) (set! tdca@module-interface-first-mark (unspecified)) (set! tdcc@set-module-interface-first-mark! (unspecified)) (set! tdce@module-interface-exp-id-vec (unspecified)) (set! tdd0@set-module-interface-exp-id-vec! (unspecified)) (set! tdd2@module-interface-exp-lab-vec (unspecified)) (set! tdd4@set-module-interface-exp-lab-vec! (unspecified)) (set! tdd6@dummy (unspecified)) (set! tdd8@module-interface-exp-id* (unspecified)) (set! tdda@chi-internal-module (unspecified)) (set! tddc@chi-body* (unspecified)) (set! tdde@expand-transformer (unspecified)) (set! tde0@parse-exports (unspecified)) (set! tde2@parse-library-name (unspecified)) (set! tde4@parse-library (unspecified)) (set! tde6@parse-import-spec* (unspecified)) (set! tde8@make-top-rib (unspecified)) (set! tdea@make-collector (unspecified)) (set! tdec@inv-collector (unspecified)) (set! tdee@vis-collector (unspecified)) (set! tdf0@imp-collector (unspecified)) (set! tdf2@chi-library-internal (unspecified)) (set! tdf4@chi-interaction-expr (unspecified)) (set! tdf6@library-body-expander (unspecified)) (set! tdf8@core-library-expander (unspecified)) (set! tdfa@parse-top-level-program (unspecified)) (set! tdfc@top-level-expander (unspecified)) (set! tdfe@rp (unspecified)) (set! te08@env? (unspecified)) (set! te0a@env-names (unspecified)) (set! te0c@set-env-names! (unspecified)) (set! te0e@env-labels (unspecified)) (set! te10@set-env-labels! (unspecified)) (set! te12@env-itc (unspecified)) (set! te14@set-env-itc! (unspecified)) (set! te16@dummy (unspecified)) (set! te18@rp (unspecified)) (set! te22@interaction-env? (unspecified)) (set! te24@interaction-env-rib (unspecified)) (set! te26@set-interaction-env-rib! (unspecified)) (set! te28@interaction-env-r (unspecified)) (set! te2a@set-interaction-env-r! (unspecified)) (set! te2c@interaction-env-locs (unspecified)) (set! te2e@set-interaction-env-locs! (unspecified)) (set! te30@dummy (unspecified)) (set! te32@interaction-environment-symbols (unspecified)) (set! te34@environment-bindings (unspecified)) (set! te36@parse-binding (unspecified)) (set! te38@environment? (unspecified)) (set! te3a@environment-symbols (unspecified)) (set! te3c@environment (unspecified)) (set! te3e@null-environment (unspecified)) (set! te40@scheme-report-environment (unspecified)) (set! te42@expand (unspecified)) (set! te44@eval (unspecified)) (set! te46@library-expander (unspecified)) (set! te48@boot-library-expand (unspecified)) (set! te4a@rev-map-append (unspecified)) (set! te4c@build-exports (unspecified)) (set! te4e@make-export-subst (unspecified)) (set! te50@make-export-env/macros (unspecified)) (set! te52@generate-temporaries (unspecified)) (set! te54@free-identifier=? (unspecified)) (set! te56@bound-identifier=? (unspecified)) (set! te58@make-source-condition (unspecified)) (set! te5a@extract-position-condition (unspecified)) (set! te5c@expression-position (unspecified)) (set! te5e@assertion-error (unspecified)) (set! te60@syntax-error (unspecified)) (set! te62@syntax-violation* (unspecified)) (set! te64@syntax-violation (unspecified)) (set! te66@identifier? (unspecified)) (set! te68@datum->syntax (unspecified)) (set! te6a@syntax->datum (unspecified)) (set! te6c@ungensym-all (unspecified)) (set! te6e@compile-r6rs-top-level (unspecified)) (set! te70@pre-compile-r6rs-top-level (unspecified)) (set! te72@interaction-environment (unspecified)) (set! te74@top-level-context (unspecified)) (set! taf8@file-options-macro (lambda (te75@x) (letrec* ((te78@valid-option? (lambda (te81@x) (and (tb7d@id? te81@x) (memq (tb7f@id->sym te81@x) '(no-fail no-create no-truncate)))))) (let ((te79@t te75@x)) (let ((te7b@ls/false (td84@syntax-dispatch te79@t '(_ . each-any)))) (if (and te7b@ls/false (apply (lambda (te7d@opt*) (for-all te78@valid-option? te7d@opt*)) te7b@ls/false)) (apply (lambda (te7f@opt*) (td3a@bless (list 'make-file-options (list 'quote te7f@opt*)))) te7b@ls/false) (te64@syntax-violation '#f '"invalid syntax" te79@t))))))) (set! t2801@taf8@file-options-macro taf8@file-options-macro) (set! tafa@set-cons (lambda (te83@x te84@ls) (if (memq te83@x te84@ls) te84@ls (cons te83@x te84@ls)))) (set! t2802@tafa@set-cons tafa@set-cons) (set! tafc@set-union (lambda (te87@ls1 te88@ls2) (if (null? te87@ls1) te88@ls2 (if (memq (car te87@ls1) te88@ls2) (tafc@set-union (cdr te87@ls1) te88@ls2) (cons (car te87@ls1) (tafc@set-union (cdr te87@ls1) te88@ls2)))))) (set! t2803@tafc@set-union tafc@set-union) (set! tb01@top-mark* '(top)) (set! t2804@tb01@top-mark* tb01@top-mark*) (set! tb03@top-marked? (lambda (te8b@m*) (memq 'top te8b@m*))) (set! t2805@tb03@top-marked? tb03@top-marked?) (set! tb05@gen-lexical (lambda (te8d@sym) (if (symbol? te8d@sym) (gensym te8d@sym) (if (tb49@stx? te8d@sym) (tb05@gen-lexical (tb7f@id->sym te8d@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" te8d@sym))))) (set! t2806@tb05@gen-lexical tb05@gen-lexical) (set! tb07@gen-global (lambda (te8f@x) (tb05@gen-lexical te8f@x))) (set! t2807@tb07@gen-global tb07@gen-global) (set! tb09@gen-label (lambda (te91@_) (gensym))) (set! t2808@tb09@gen-label tb09@gen-label) (set! tb0b@gen-top-level-label (lambda (te93@id te94@rib) (letrec* ((te98@find (lambda (tea3@sym tea4@mark* tea5@sym* tea6@mark** tea7@label*) (and (pair? tea5@sym*) (if (and (eq? tea3@sym (car tea5@sym*)) (same-marks? tea4@mark* (car tea6@mark**))) (car tea7@label*) (te98@find tea3@sym tea4@mark* (cdr tea5@sym*) (cdr tea6@mark**) (cdr tea7@label*))))))) (let ((te99@sym (tb7f@id->sym te93@id)) (te9a@mark* (tb4f@stx-mark* te93@id))) (let ((te9d@sym* (tb1b@rib-sym* te94@rib))) (let ((te9f@t (and (memq te99@sym (tb1b@rib-sym* te94@rib)) (te98@find te99@sym te9a@mark* te9d@sym* (tb1f@rib-mark** te94@rib) (tb23@rib-label* te94@rib))))) (if te9f@t ((lambda (tea1@label) (if (t998@t7e5@imported-label->binding tea1@label) (gensym) tea1@label)) te9f@t) (gensym)))))))) (set! t2809@tb0b@gen-top-level-label tb0b@gen-top-level-label) (set! tb0d@gen-define-label+loc (lambda (tead@id teae@rib) (let ((teb1@t (te74@top-level-context))) (if teb1@t ((lambda (teb3@env) (let ((teb5@label (tb0b@gen-top-level-label tead@id teae@rib)) (teb6@locs (te2c@interaction-env-locs teb3@env))) (values teb5@label (let ((teb9@t (assq teb5@label teb6@locs))) (if teb9@t (cdr teb9@t) (let ((tebb@loc (tb05@gen-lexical tead@id))) (begin (te2e@set-interaction-env-locs! teb3@env (cons (cons teb5@label tebb@loc) teb6@locs)) tebb@loc))))))) teb1@t) (values (gensym) (tb05@gen-lexical tead@id)))))) (set! t280a@tb0d@gen-define-label+loc tb0d@gen-define-label+loc) (set! tb0f@gen-define-label (lambda (tebd@id tebe@rib) (if (te74@top-level-context) (tb0b@gen-top-level-label tebd@id tebe@rib) (gensym)))) (set! t280b@tb0f@gen-define-label tb0f@gen-define-label) (set! tb19@rib? (lambda (tec1@x) (and (simple-struct? tec1@x) (eq? (simple-struct-name tec1@x) 'rib)))) (set! t280c@tb19@rib? tb19@rib?) (set! tb1b@rib-sym* (lambda (tec3@x) (simple-struct-ref tec3@x '0))) (set! t280d@tb1b@rib-sym* tb1b@rib-sym*) (set! tb1d@set-rib-sym*! (lambda (tec5@x tec6@val) (simple-struct-set! tec5@x '0 tec6@val))) (set! t280e@tb1d@set-rib-sym*! tb1d@set-rib-sym*!) (set! tb1f@rib-mark** (lambda (tec9@x) (simple-struct-ref tec9@x '1))) (set! t280f@tb1f@rib-mark** tb1f@rib-mark**) (set! tb21@set-rib-mark**! (lambda (tecb@x tecc@val) (simple-struct-set! tecb@x '1 tecc@val))) (set! t2810@tb21@set-rib-mark**! tb21@set-rib-mark**!) (set! tb23@rib-label* (lambda (tecf@x) (simple-struct-ref tecf@x '2))) (set! t2811@tb23@rib-label* tb23@rib-label*) (set! tb25@set-rib-label*! (lambda (ted1@x ted2@val) (simple-struct-set! ted1@x '2 ted2@val))) (set! t2812@tb25@set-rib-label*! tb25@set-rib-label*!) (set! tb27@rib-sealed/freq (lambda (ted5@x) (simple-struct-ref ted5@x '3))) (set! t2813@tb27@rib-sealed/freq tb27@rib-sealed/freq) (set! tb29@set-rib-sealed/freq! (lambda (ted7@x ted8@val) (simple-struct-set! ted7@x '3 ted8@val))) (set! t2814@tb29@set-rib-sealed/freq! tb29@set-rib-sealed/freq!) (set! tb2b@rib-cache (lambda (tedb@x) (simple-struct-ref tedb@x '4))) (set! t2815@tb2b@rib-cache tb2b@rib-cache) (set! tb2d@set-rib-cache! (lambda (tedd@x tede@val) (simple-struct-set! tedd@x '4 tede@val))) (set! t2816@tb2d@set-rib-cache! tb2d@set-rib-cache!) (set! tb2f@dummy '3) (set! t2817@tb2f@dummy tb2f@dummy) (set! tb31@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! t2818@tb31@make-empty-rib tb31@make-empty-rib) (set! tb33@extend-rib! (lambda (tee1@rib tee2@id tee3@label) (letrec* ((tee8@find (lambda (tef5@sym tef6@mark* tef7@sym* tef8@mark** tef9@label*) (and (pair? tef7@sym*) (if (and (eq? tef5@sym (car tef7@sym*)) (same-marks? tef6@mark* (car tef8@mark**))) tef9@label* (tee8@find tef5@sym tef6@mark* (cdr tef7@sym*) (cdr tef8@mark**) (cdr tef9@label*))))))) (begin (if (tb27@rib-sealed/freq tee1@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" tee1@rib) (void)) (let ((tee9@sym (tb7f@id->sym tee2@id)) (teea@mark* (tb4f@stx-mark* tee2@id))) (let ((teed@sym* (tb1b@rib-sym* tee1@rib))) (let ((teef@t (and (memq tee9@sym (tb1b@rib-sym* tee1@rib)) (tee8@find tee9@sym teea@mark* teed@sym* (tb1f@rib-mark** tee1@rib) (tb23@rib-label* tee1@rib))))) (if teef@t ((lambda (tef1@p) (if (not (eq? tee3@label (car tef1@p))) (if (te74@top-level-context) (set-car! tef1@p tee3@label) (te64@syntax-violation '#f '"multiple definitions of identifier" tee2@id)) (void))) teef@t) (begin (if (tb2b@rib-cache tee1@rib) (hashtable-update! (tb2b@rib-cache tee1@rib) tee9@sym (lambda (tef3@e) (cons (cons teea@mark* tee3@label) tef3@e)) '()) (void)) (tb1d@set-rib-sym*! tee1@rib (cons tee9@sym teed@sym*)) (tb21@set-rib-mark**! tee1@rib (cons teea@mark* (tb1f@rib-mark** tee1@rib))) (tb25@set-rib-label*! tee1@rib (cons tee3@label (tb23@rib-label* tee1@rib)))))))))))) (set! t2819@tb33@extend-rib! tb33@extend-rib!) (set! tb35@extend-rib/nc! (lambda (teff@rib tf00@id tf01@label) (let ((tf05@sym (tb7f@id->sym tf00@id)) (tf06@mark* (tb4f@stx-mark* tf00@id))) (let ((tf09@sym* (tb1b@rib-sym* teff@rib))) (begin (if (tb2b@rib-cache teff@rib) (hashtable-update! (tb2b@rib-cache teff@rib) tf05@sym (lambda (tf0b@e) (cons (cons tf06@mark* tf01@label) tf0b@e)) '()) (void)) (tb1d@set-rib-sym*! teff@rib (cons tf05@sym tf09@sym*)) (tb21@set-rib-mark**! teff@rib (cons tf06@mark* (tb1f@rib-mark** teff@rib))) (tb25@set-rib-label*! teff@rib (cons tf01@label (tb23@rib-label* teff@rib)))))))) (set! t281a@tb35@extend-rib/nc! tb35@extend-rib/nc!) (set! tb37@make-rib-map (lambda (tf0d@sym*) (let ((tf0f@ht (make-eq-hashtable))) (let tf15@f ((tf11@i '0) (tf12@sym* tf0d@sym*)) (if (null? tf12@sym*) tf0f@ht (begin (hashtable-update! tf0f@ht (car tf12@sym*) (lambda (tf17@x) (cons tf11@i tf17@x)) '()) (tf15@f (+ tf11@i '1) (cdr tf12@sym*)))))))) (set! t281b@tb37@make-rib-map tb37@make-rib-map) (set! tb39@seal-rib! (lambda (tf19@rib) (let ((tf1b@sym* (tb1b@rib-sym* tf19@rib))) (if (not (null? tf1b@sym*)) (begin (tb1d@set-rib-sym*! tf19@rib (list->vector tf1b@sym*)) (tb21@set-rib-mark**! tf19@rib (list->vector (tb1f@rib-mark** tf19@rib))) (tb25@set-rib-label*! tf19@rib (list->vector (tb23@rib-label* tf19@rib))) (tb29@set-rib-sealed/freq! tf19@rib (tb37@make-rib-map tf1b@sym*))) (void))))) (set! t281c@tb39@seal-rib! tb39@seal-rib!) (set! tb3b@unseal-rib! (lambda (tf1d@rib) (if (tb27@rib-sealed/freq tf1d@rib) (begin (tb29@set-rib-sealed/freq! tf1d@rib '#f) (tb1d@set-rib-sym*! tf1d@rib (vector->list (tb1b@rib-sym* tf1d@rib))) (tb21@set-rib-mark**! tf1d@rib (vector->list (tb1f@rib-mark** tf1d@rib))) (tb25@set-rib-label*! tf1d@rib (vector->list (tb23@rib-label* tf1d@rib)))) (void)))) (set! t281d@tb3b@unseal-rib! tb3b@unseal-rib!) (set! tb3d@make-full-rib (lambda (tf1f@id* tf20@label*) (let ((tf23@r (make-simple-struct 'rib '6 (list (map tb7f@id->sym tf1f@id*) (map tb4f@stx-mark* tf1f@id*) tf20@label* '#f '#f)))) (begin (tb39@seal-rib! tf23@r) tf23@r)))) (set! t281e@tb3d@make-full-rib tb3d@make-full-rib) (set! tb3f@rp (t6ca@t5a5@make-record-printer 'stx (lambda (tf25@x tf26@p tf27@wr) (begin (display '"#<syntax " tf26@p) (write (tb91@stx->datum tf25@x) tf26@p) (let ((tf2b@expr (tb4b@stx-expr tf25@x))) (if (t6c1@t593@annotation? tf2b@expr) (let ((tf2d@src (t6c2@t595@annotation-source tf2b@expr))) (if (pair? tf2d@src) (begin (display '" [" tf26@p) (display (cdr tf2d@src) tf26@p) (display '" of " tf26@p) (display (car tf2d@src) tf26@p) (display '"]" tf26@p)) (void))) (void))) (display '">" tf26@p))))) (set! t281f@tb3f@rp tb3f@rp) (set! tb49@stx? (lambda (tf2f@x) (and (simple-struct? tf2f@x) (eq? (simple-struct-name tf2f@x) 'stx)))) (set! t2820@tb49@stx? tb49@stx?) (set! tb4b@stx-expr (lambda (tf31@x) (simple-struct-ref tf31@x '0))) (set! t2821@tb4b@stx-expr tb4b@stx-expr) (set! tb4d@set-stx-expr! (lambda (tf33@x tf34@val) (simple-struct-set! tf33@x '0 tf34@val))) (set! t2822@tb4d@set-stx-expr! tb4d@set-stx-expr!) (set! tb4f@stx-mark* (lambda (tf37@x) (simple-struct-ref tf37@x '1))) (set! t2823@tb4f@stx-mark* tb4f@stx-mark*) (set! tb51@set-stx-mark*! (lambda (tf39@x tf3a@val) (simple-struct-set! tf39@x '1 tf3a@val))) (set! t2824@tb51@set-stx-mark*! tb51@set-stx-mark*!) (set! tb53@stx-subst* (lambda (tf3d@x) (simple-struct-ref tf3d@x '2))) (set! t2825@tb53@stx-subst* tb53@stx-subst*) (set! tb55@set-stx-subst*! (lambda (tf3f@x tf40@val) (simple-struct-set! tf3f@x '2 tf40@val))) (set! t2826@tb55@set-stx-subst*! tb55@set-stx-subst*!) (set! tb57@stx-ae* (lambda (tf43@x) (simple-struct-ref tf43@x '3))) (set! t2827@tb57@stx-ae* tb57@stx-ae*) (set! tb59@set-stx-ae*! (lambda (tf45@x tf46@val) (simple-struct-set! tf45@x '3 tf46@val))) (set! t2828@tb59@set-stx-ae*! tb59@set-stx-ae*!) (set! tb5b@dummy '3) (set! t2829@tb5b@dummy tb5b@dummy) (set! tb5d@datum->stx (lambda (tf49@id tf4a@datum) (make-simple-struct 'stx '5 (list tf4a@datum (tb4f@stx-mark* tf49@id) (tb53@stx-subst* tf49@id) (tb57@stx-ae* tf49@id))))) (set! t282a@tb5d@datum->stx tb5d@datum->stx) (set! tb5f@gen-mark (lambda () (string '#\m))) (set! t282b@tb5f@gen-mark tb5f@gen-mark) (set! tb61@anti-mark '#f) (set! t282c@tb61@anti-mark tb61@anti-mark) (set! tb63@anti-mark? not) (set! t282d@tb63@anti-mark? tb63@anti-mark?) (set! tb65@mkstx (lambda (tf4d@e tf4e@m* tf4f@s* tf50@ae*) (if (and (tb49@stx? tf4d@e) (not (tb03@top-marked? tf4e@m*))) (call-with-values (lambda () (join-wraps tf4e@m* tf4f@s* tf50@ae* tf4d@e)) (lambda (tf5b@tf56 tf5c@tf58 tf5d@tf5a) (let ((tf61@ae* tf5d@tf5a) (tf62@s* tf5c@tf58) (tf63@m* tf5b@tf56)) (make-simple-struct 'stx '5 (list (tb4b@stx-expr tf4d@e) tf63@m* tf62@s* tf61@ae*))))) (make-simple-struct 'stx '5 (list tf4d@e tf4e@m* tf4f@s* tf50@ae*))))) (set! t282e@tb65@mkstx tb65@mkstx) (set! tb67@add-subst (lambda (tf67@subst tf68@e) (tb65@mkstx tf68@e '() (list tf67@subst) '()))) (set! t282f@tb67@add-subst tb67@add-subst) (set! tb69@add-mark (lambda (tf6b@mark tf6c@subst tf6d@expr tf6e@ae) (letrec* ((tf74@merge-ae* (lambda (tf9b@ls1 tf9c@ls2) (if (and (pair? tf9b@ls1) (pair? tf9c@ls2) (not (car tf9c@ls2))) (tf76@cancel tf9b@ls1 tf9c@ls2) (append tf9b@ls1 tf9c@ls2)))) (tf76@cancel (lambda (tf91@ls1 tf92@ls2) (let tf99@f ((tf95@x (car tf91@ls1)) (tf96@ls1 (cdr tf91@ls1))) (if (null? tf96@ls1) (cdr tf92@ls2) (cons tf95@x (tf99@f (car tf96@ls1) (cdr tf96@ls1))))))) (tf78@f (lambda (tf79@e tf7a@m tf7b@s1* tf7c@ae*) (if (pair? tf79@e) (let ((tf81@a (tf78@f (car tf79@e) tf7a@m tf7b@s1* tf7c@ae*)) (tf82@d (tf78@f (cdr tf79@e) tf7a@m tf7b@s1* tf7c@ae*))) (if (eq? tf81@a tf82@d) tf79@e (cons tf81@a tf82@d))) (if (vector? tf79@e) (let ((tf85@ls1 (vector->list tf79@e))) (let ((tf87@ls2 (map (lambda (tf89@x) (tf78@f tf89@x tf7a@m tf7b@s1* tf7c@ae*)) tf85@ls1))) (if (for-all eq? tf85@ls1 tf87@ls2) tf79@e (list->vector tf87@ls2)))) (if (tb49@stx? tf79@e) (let ((tf8b@m* (tb4f@stx-mark* tf79@e)) (tf8c@s2* (tb53@stx-subst* tf79@e))) (if (null? tf8b@m*) (tf78@f (tb4b@stx-expr tf79@e) tf7a@m (append tf7b@s1* tf8c@s2*) (tf74@merge-ae* tf7c@ae* (tb57@stx-ae* tf79@e))) (if (eq? (car tf8b@m*) tb61@anti-mark) (make-simple-struct 'stx '5 (list (tb4b@stx-expr tf79@e) (cdr tf8b@m*) (cdr (append tf7b@s1* tf8c@s2*)) (tf74@merge-ae* tf7c@ae* (tb57@stx-ae* tf79@e)))) (make-simple-struct 'stx '5 (list (tb4b@stx-expr tf79@e) (cons tf7a@m tf8b@m*) (let ((tf8f@s* (cons 'shift (append tf7b@s1* tf8c@s2*)))) (if tf6c@subst (cons tf6c@subst tf8f@s*) tf8f@s*)) (tf74@merge-ae* tf7c@ae* (tb57@stx-ae* tf79@e))))))) (if (symbol? tf79@e) (te64@syntax-violation '#f '"raw symbol encountered in output of macro" tf6d@expr tf79@e) (make-simple-struct 'stx '5 (list tf79@e (list tf7a@m) tf7b@s1* tf7c@ae*))))))))) (tb65@mkstx (tf78@f tf6d@expr tf6b@mark '() '()) '() '() (list tf6e@ae))))) (set! t2830@tb69@add-mark tb69@add-mark) (set! tb6b@syntax-kind? (lambda (tf9f@x tfa0@p?) (if (tb49@stx? tf9f@x) (tb6b@syntax-kind? (tb4b@stx-expr tf9f@x) tfa0@p?) (if (t6c1@t593@annotation? tf9f@x) (tb6b@syntax-kind? (t6c3@t597@annotation-expression tf9f@x) tfa0@p?) (tfa0@p? tf9f@x))))) (set! t2831@tb6b@syntax-kind? tb6b@syntax-kind?) (set! tb6d@syntax-vector->list (lambda (tfa3@x) (if (tb49@stx? tfa3@x) (let ((tfa5@ls (tb6d@syntax-vector->list (tb4b@stx-expr tfa3@x))) (tfa6@m* (tb4f@stx-mark* tfa3@x)) (tfa7@s* (tb53@stx-subst* tfa3@x)) (tfa8@ae* (tb57@stx-ae* tfa3@x))) (map (lambda (tfad@x) (tb65@mkstx tfad@x tfa6@m* tfa7@s* tfa8@ae*)) tfa5@ls)) (if (t6c1@t593@annotation? tfa3@x) (tb6d@syntax-vector->list (t6c3@t597@annotation-expression tfa3@x)) (if (vector? tfa3@x) (vector->list tfa3@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" tfa3@x)))))) (set! t2832@tb6d@syntax-vector->list tb6d@syntax-vector->list) (set! tb6f@syntax-pair? (lambda (tfaf@x) (tb6b@syntax-kind? tfaf@x pair?))) (set! t2833@tb6f@syntax-pair? tb6f@syntax-pair?) (set! tb71@syntax-vector? (lambda (tfb1@x) (tb6b@syntax-kind? tfb1@x vector?))) (set! t2834@tb71@syntax-vector? tb71@syntax-vector?) (set! tb73@syntax-null? (lambda (tfb3@x) (tb6b@syntax-kind? tfb3@x null?))) (set! t2835@tb73@syntax-null? tb73@syntax-null?) (set! tb75@syntax-list? (lambda (tfb5@x) (or (tb73@syntax-null? tfb5@x) (and (tb6f@syntax-pair? tfb5@x) (tb75@syntax-list? (tb79@syntax-cdr tfb5@x)))))) (set! t2836@tb75@syntax-list? tb75@syntax-list?) (set! tb77@syntax-car (lambda (tfb7@x) (if (tb49@stx? tfb7@x) (tb65@mkstx (tb77@syntax-car (tb4b@stx-expr tfb7@x)) (tb4f@stx-mark* tfb7@x) (tb53@stx-subst* tfb7@x) (tb57@stx-ae* tfb7@x)) (if (t6c1@t593@annotation? tfb7@x) (tb77@syntax-car (t6c3@t597@annotation-expression tfb7@x)) (if (pair? tfb7@x) (car tfb7@x) (assertion-violation 'syntax-car '"BUG: not a pair" tfb7@x)))))) (set! t2837@tb77@syntax-car tb77@syntax-car) (set! tb79@syntax-cdr (lambda (tfb9@x) (if (tb49@stx? tfb9@x) (tb65@mkstx (tb79@syntax-cdr (tb4b@stx-expr tfb9@x)) (tb4f@stx-mark* tfb9@x) (tb53@stx-subst* tfb9@x) (tb57@stx-ae* tfb9@x)) (if (t6c1@t593@annotation? tfb9@x) (tb79@syntax-cdr (t6c3@t597@annotation-expression tfb9@x)) (if (pair? tfb9@x) (cdr tfb9@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" tfb9@x)))))) (set! t2838@tb79@syntax-cdr tb79@syntax-cdr) (set! tb7b@syntax->list (lambda (tfbb@x) (if (tb6f@syntax-pair? tfbb@x) (cons (tb77@syntax-car tfbb@x) (tb7b@syntax->list (tb79@syntax-cdr tfbb@x))) (if (tb73@syntax-null? tfbb@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" tfbb@x))))) (set! t2839@tb7b@syntax->list tb7b@syntax->list) (set! tb7d@id? (lambda (tfbd@x) (and (tb49@stx? tfbd@x) (symbol? (tb4b@stx-expr tfbd@x))))) (set! t283a@tb7d@id? tb7d@id?) (set! tb7f@id->sym (lambda (tfbf@x) (tb4b@stx-expr tfbf@x))) (set! t283b@tb7f@id->sym tb7f@id->sym) (set! tb81@bound-id=? (lambda (tfc1@x tfc2@y) (and (eq? (tb7f@id->sym tfc1@x) (tb7f@id->sym tfc2@y)) (same-marks? (tb4f@stx-mark* tfc1@x) (tb4f@stx-mark* tfc2@y))))) (set! t283c@tb81@bound-id=? tb81@bound-id=?) (set! tb83@free-id=? (lambda (tfc5@i tfc6@j) (let ((tfc9@t0 (id->real-label tfc5@i)) (tfca@t1 (id->real-label tfc6@j))) (if (or tfc9@t0 tfca@t1) (eq? tfc9@t0 tfca@t1) (eq? (tb7f@id->sym tfc5@i) (tb7f@id->sym tfc6@j)))))) (set! t283d@tb83@free-id=? tb83@free-id=?) (set! tb85@valid-bound-ids? (lambda (tfcd@id*) (and (for-all tb7d@id? tfcd@id*) (tb87@distinct-bound-ids? tfcd@id*)))) (set! t283e@tb85@valid-bound-ids? tb85@valid-bound-ids?) (set! tb87@distinct-bound-ids? (lambda (tfcf@id*) (or (null? tfcf@id*) (and (not (tb89@bound-id-member? (car tfcf@id*) (cdr tfcf@id*))) (tb87@distinct-bound-ids? (cdr tfcf@id*)))))) (set! t283f@tb87@distinct-bound-ids? tb87@distinct-bound-ids?) (set! tb89@bound-id-member? (lambda (tfd1@id tfd2@id*) (and (pair? tfd2@id*) (or (tb81@bound-id=? tfd1@id (car tfd2@id*)) (tb89@bound-id-member? tfd1@id (cdr tfd2@id*)))))) (set! t2840@tb89@bound-id-member? tb89@bound-id-member?) (set! tb8b@self-evaluating? (lambda (tfd5@x) (or (number? tfd5@x) (string? tfd5@x) (char? tfd5@x) (boolean? tfd5@x) (regexp? tfd5@x) (bytevector? tfd5@x)))) (set! t2841@tb8b@self-evaluating? tb8b@self-evaluating?) (set! tb8d@strip-annotations (lambda (tfd7@x) (if (pair? tfd7@x) (cons (tb8d@strip-annotations (car tfd7@x)) (tb8d@strip-annotations (cdr tfd7@x))) (if (vector? tfd7@x) (vector-map tb8d@strip-annotations tfd7@x) (if (t6c1@t593@annotation? tfd7@x) (t6c0@t591@annotation-stripped tfd7@x) tfd7@x))))) (set! t2842@tb8d@strip-annotations tb8d@strip-annotations) (set! tb8f@strip (lambda (tfd9@x tfda@m*) (if (tb03@top-marked? tfda@m*) (if (or (t6c1@t593@annotation? tfd9@x) (and (pair? tfd9@x) (t6c1@t593@annotation? (car tfd9@x))) (and (vector? tfd9@x) (> (vector-length tfd9@x) '0) (t6c1@t593@annotation? (vector-ref tfd9@x '0)))) (tb8d@strip-annotations tfd9@x) tfd9@x) (let tfdf@f ((tfdd@x tfd9@x)) (if (tb49@stx? tfdd@x) (begin (if (pair? (tb4b@stx-expr tfdd@x)) (begin (set-source-info! (tb4b@stx-expr tfdd@x) '#f) (set-source-info! (cdr (tb4b@stx-expr tfdd@x)) '#f) (set-source-info! (car (tb4b@stx-expr tfdd@x)) '#f)) (void)) (tb8f@strip (tb4b@stx-expr tfdd@x) (tb4f@stx-mark* tfdd@x))) (if (t6c1@t593@annotation? tfdd@x) (t6c0@t591@annotation-stripped tfdd@x) (if (pair? tfdd@x) (let ((tfe1@a (tfdf@f (car tfdd@x))) (tfe2@d (tfdf@f (cdr tfdd@x)))) (if (and (eq? tfe1@a (car tfdd@x)) (eq? tfe2@d (cdr tfdd@x))) tfdd@x (cons tfe1@a tfe2@d))) (if (vector? tfdd@x) (let ((tfe5@old (vector->list tfdd@x))) (let ((tfe7@new (map tfdf@f tfe5@old))) (if (for-all eq? tfe5@old tfe7@new) tfdd@x (list->vector tfe7@new)))) tfdd@x)))))))) (set! t2843@tb8f@strip tb8f@strip) (set! tb91@stx->datum (lambda (tfe9@x) (tb8f@strip tfe9@x '()))) (set! t2844@tb91@stx->datum tb91@stx->datum) (set! tb93@id->label (lambda (tfeb@id) (or (id->real-label tfeb@id) (let ((tfed@t (te74@top-level-context))) (if tfed@t ((lambda (tfef@env) (let ((tff1@rib (te24@interaction-env-rib tfef@env))) (call-with-values (lambda () (tb0d@gen-define-label+loc tfeb@id tff1@rib)) (lambda (tff7@tff4 tff8@tff6) (let ((tffb@loc_ tff8@tff6) (tffc@lab tff7@tff4)) (begin (tb33@extend-rib! tff1@rib tfeb@id tffc@lab) tffc@lab)))))) tfed@t) '#f))))) (set! t2845@tb93@id->label tb93@id->label) (set! tb95@label->binding (lambda (tfff@x t1000@r) (let ((t1003@t (t998@t7e5@imported-label->binding tfff@x))) (if t1003@t ((lambda (t1005@b) (if (and (pair? t1005@b) (eq? (car t1005@b) '$core-rtd)) (cons '$rtd (map td3a@bless (cdr t1005@b))) (if (and (pair? t1005@b) (eq? (car t1005@b) 'global-rtd)) (let ((t1007@lib (cadr t1005@b)) (t1008@loc (cddr t1005@b))) (cons '$rtd (symbol-value t1008@loc))) t1005@b))) t1003@t) (let ((t100b@t (assq tfff@x t1000@r))) (if t100b@t (cdr t100b@t) (let ((t100d@t (te74@top-level-context))) (if t100d@t ((lambda (t100f@env) (let ((t1011@t (assq tfff@x (te2c@interaction-env-locs t100f@env)))) (if t1011@t ((lambda (t1013@p) (cons* 'lexical (cdr t1013@p) '#f)) t1011@t) '(displaced-lexical . #f)))) t100d@t) '(displaced-lexical . #f))))))))) (set! t2846@tb95@label->binding tb95@label->binding) (set! tb97@make-binding cons) (set! t2847@tb97@make-binding tb97@make-binding) (set! tb99@binding-type car) (set! t2848@tb99@binding-type tb99@binding-type) (set! tb9b@binding-value cdr) (set! t2849@tb9b@binding-value tb9b@binding-value) (set! tb9d@raise-unbound-error (lambda (t1015@id) (te62@syntax-violation* '#f '"unbound identifier" t1015@id (make-undefined-violation)))) (set! t284a@tb9d@raise-unbound-error tb9d@raise-unbound-error) (set! tb9f@syntax-type (lambda (t1017@e t1018@r) (if (tb7d@id? t1017@e) (let ((t101b@id t1017@e)) (let ((t101d@label (tb93@id->label t101b@id))) (let ((t101f@b (tb95@label->binding t101d@label t1018@r))) (let ((t1021@type (tb99@binding-type t101f@b))) (begin (if (not t101d@label) (tb9d@raise-unbound-error t101b@id) (void)) (let ((t1023@t t1021@type)) (if (memv t1023@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values t1021@type (tb9b@binding-value t101f@b) t101b@id) (values 'other '#f '#f)))))))) (if (tb6f@syntax-pair? t1017@e) (let ((t1025@id (tb77@syntax-car t1017@e))) (if (tb7d@id? t1025@id) (let ((t1027@label (tb93@id->label t1025@id))) (let ((t1029@b (tb95@label->binding t1027@label t1018@r))) (let ((t102b@type (tb99@binding-type t1029@b))) (begin (if (not t1027@label) (tb9d@raise-unbound-error t1025@id) (void)) (let ((t102d@t t102b@type)) (if (memv t102d@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values t102b@type (tb9b@binding-value t1029@b) t1025@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((t102f@d (tb91@stx->datum t1017@e))) (if (tb8b@self-evaluating? t102f@d) (values 'constant t102f@d '#f) (values 'other '#f '#f))))))) (set! t284b@tb9f@syntax-type tb9f@syntax-type) (set! tbad@sanitize-binding (lambda (t1031@x t1032@src) (if (procedure? t1031@x) (cons* 'local-macro t1031@x t1032@src) (if (and (pair? t1031@x) (eq? (car t1031@x) 'macro!) (procedure? (cdr t1031@x))) (cons* 'local-macro! (cdr t1031@x) t1032@src) (if (and (pair? t1031@x) (eq? (car t1031@x) '$rtd)) t1031@x (assertion-violation 'expand '"invalid transformer" t1031@x)))))) (set! t284c@tbad@sanitize-binding tbad@sanitize-binding) (set! tbaf@make-variable-transformer (lambda (t1035@x) (if (procedure? t1035@x) (cons 'macro! t1035@x) (assertion-violation 'make-variable-transformer '"not a procedure" t1035@x)))) (set! t284d@tbaf@make-variable-transformer tbaf@make-variable-transformer) (set! tbb1@variable-transformer? (lambda (t1037@x) (and (pair? t1037@x) (eq? (car t1037@x) 'macro!) (procedure? (cdr t1037@x))))) (set! t284e@tbb1@variable-transformer? tbb1@variable-transformer?) (set! tbb3@variable-transformer-procedure (lambda (t1039@x) (if (tbb1@variable-transformer? t1039@x) (cdr t1039@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" t1039@x)))) (set! t284f@tbb3@variable-transformer-procedure tbb3@variable-transformer-procedure) (set! tbb5@make-eval-transformer (lambda (t103b@x) (tbad@sanitize-binding (eval-core (t723@t6db@expanded->core t103b@x)) t103b@x))) (set! t2850@tbb5@make-eval-transformer tbb5@make-eval-transformer) (set! td06@parse-define (lambda (t103d@x) (let ((t103f@t t103d@x)) (let ((t1041@ls/false (td84@syntax-dispatch t103f@t '(_ (any . any) any . each-any)))) (if (and t1041@ls/false (apply (lambda (t1043@id t1044@fmls t1045@b t1046@b*) (tb7d@id? t1043@id)) t1041@ls/false)) (apply (lambda (t104b@id t104c@fmls t104d@b t104e@b*) (begin (tdaa@verify-formals t104c@fmls t103d@x) (values t104b@id (cons 'defun (cons t104c@fmls (cons t104d@b t104e@b*)))))) t1041@ls/false) (let ((t1053@t t103f@t)) (let ((t1055@ls/false (td84@syntax-dispatch t1053@t '(_ any any)))) (if (and t1055@ls/false (apply (lambda (t1057@id t1058@val) (tb7d@id? t1057@id)) t1055@ls/false)) (apply (lambda (t105b@id t105c@val) (values t105b@id (cons 'expr t105c@val))) t1055@ls/false) (let ((t105f@t t1053@t)) (let ((t1061@ls/false (td84@syntax-dispatch t105f@t '(_ any)))) (if (and t1061@ls/false (apply (lambda (t1063@id) (tb7d@id? t1063@id)) t1061@ls/false)) (apply (lambda (t1065@id) (values t1065@id (cons 'expr (td3a@bless '(void))))) t1061@ls/false) (te64@syntax-violation '#f '"invalid syntax" t105f@t)))))))))))) (set! t2851@td06@parse-define td06@parse-define) (set! td08@parse-define-syntax (lambda (t1067@x) (let ((t1069@t t1067@x)) (let ((t106b@ls/false (td84@syntax-dispatch t1069@t '(_ any any)))) (if (and t106b@ls/false (apply (lambda (t106d@id t106e@val) (tb7d@id? t106d@id)) t106b@ls/false)) (apply (lambda (t1071@id t1072@val) (values t1071@id t1072@val)) t106b@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1069@t)))))) (set! t2852@td08@parse-define-syntax td08@parse-define-syntax) (set! td0a@scheme-stx-hashtable (make-eq-hashtable)) (set! t2853@td0a@scheme-stx-hashtable td0a@scheme-stx-hashtable) (set! td0c@scheme-stx (lambda (t1075@sym) (or (hashtable-ref td0a@scheme-stx-hashtable t1075@sym '#f) (let ((t1077@subst (t974@t79d@library-subst (t992@t7d9@find-library-by-name '(psyntax system $all))))) (let ((t1079@stx (make-simple-struct 'stx '5 (list t1075@sym tb01@top-mark* '() '())))) (let ((t107b@stx (let ((t107d@t (assq t1075@sym t1077@subst))) (if t107d@t ((lambda (t107f@x) (let ((t1081@name (car t107f@x)) (t1082@label (cdr t107f@x))) (tb67@add-subst (make-simple-struct 'rib '6 (list (list t1081@name) (list tb01@top-mark*) (list t1082@label) '#f '#f)) t1079@stx))) t107d@t) t1079@stx)))) (begin (hashtable-set! td0a@scheme-stx-hashtable t1075@sym t107b@stx) t107b@stx))))))) (set! t2854@td0c@scheme-stx td0c@scheme-stx) (set! td0e@lexical-var car) (set! t2855@td0e@lexical-var td0e@lexical-var) (set! td10@lexical-mutable? cdr) (set! t2856@td10@lexical-mutable? td10@lexical-mutable?) (set! td12@set-lexical-mutable! set-cdr!) (set! t2857@td12@set-lexical-mutable! td12@set-lexical-mutable!) (set! td14@add-lexical (lambda (t1085@lab t1086@lex t1087@r) (cons (cons* t1085@lab 'lexical t1086@lex '#f) t1087@r))) (set! t2858@td14@add-lexical td14@add-lexical) (set! td16@add-lexicals (lambda (t108b@lab* t108c@lex* t108d@r) (if (null? t108b@lab*) t108d@r (td16@add-lexicals (cdr t108b@lab*) (cdr t108c@lex*) (td14@add-lexical (car t108b@lab*) (car t108c@lex*) t108d@r))))) (set! t2859@td16@add-lexicals td16@add-lexicals) (set! td18@letrec-helper (lambda (t1091@e t1092@r t1093@mr t1094@build) (let ((t1099@t t1091@e)) (let ((t109b@ls/false (td84@syntax-dispatch t1099@t '(_ #(each (any any)) any . each-any)))) (if t109b@ls/false (apply (lambda (t109d@lhs* t109e@rhs* t109f@b t10a0@b*) (if (not (tb85@valid-bound-ids? t109d@lhs*)) (td3e@invalid-fmls-error t1091@e t109d@lhs*) (let ((t10a5@lex* (map tb05@gen-lexical t109d@lhs*)) (t10a6@lab* (map tb09@gen-label t109d@lhs*))) (let ((t10a9@rib (tb3d@make-full-rib t109d@lhs* t10a6@lab*)) (t10aa@r (td16@add-lexicals t10a6@lab* t10a5@lex* t1092@r))) (let ((t10ad@body (tdbc@chi-internal (tb67@add-subst t10a9@rib (cons t109f@b t10a0@b*)) t10aa@r t1093@mr)) (t10ae@rhs* (tda2@chi-expr* (map (lambda (t10b1@x) (tb67@add-subst t10a9@rib t10b1@x)) t109e@rhs*) t10aa@r t1093@mr))) (t1094@build '#f t10a5@lex* t10ae@rhs* t10ad@body)))))) t109b@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1099@t)))))) (set! t285a@td18@letrec-helper td18@letrec-helper) (set! td1a@let-transformer (lambda (t10b3@e t10b4@r t10b5@mr) (let ((t10b9@t t10b3@e)) (let ((t10bb@ls/false (td84@syntax-dispatch t10b9@t '(_ #(each (any any)) any . each-any)))) (if t10bb@ls/false (apply (lambda (t10bd@lhs* t10be@rhs* t10bf@b t10c0@b*) (if (not (tb85@valid-bound-ids? t10bd@lhs*)) (td3e@invalid-fmls-error t10b3@e t10bd@lhs*) (let ((t10c5@lex* (map tb05@gen-lexical t10bd@lhs*)) (t10c6@lab* (map tb09@gen-label t10bd@lhs*)) (t10c7@rhs* (tda2@chi-expr* t10be@rhs* t10b4@r t10b5@mr))) (let ((t10cb@rib (tb3d@make-full-rib t10bd@lhs* t10c6@lab*)) (t10cc@r (td16@add-lexicals t10c6@lab* t10c5@lex* t10b4@r))) (let ((t10cf@body (tdbc@chi-internal (tb67@add-subst t10cb@rib (cons t10bf@b t10c0@b*)) t10cc@r t10b5@mr))) (tae5@ta48@build-let '#f t10c5@lex* t10c7@rhs* t10cf@body)))))) t10bb@ls/false) (let ((t10d1@t t10b9@t)) (let ((t10d3@ls/false (td84@syntax-dispatch t10d1@t '(_ any #(each (any any)) any . each-any)))) (if t10d3@ls/false (apply (lambda (t10d5@loop t10d6@lhs* t10d7@rhs* t10d8@b t10d9@b*) (if (not (tb85@valid-bound-ids? t10d6@lhs*)) (td3e@invalid-fmls-error t10b3@e t10d6@lhs*) (let ((t10df@lex* (map tb05@gen-lexical t10d6@lhs*)) (t10e0@lab* (map tb09@gen-label t10d6@lhs*)) (t10e1@rhs* (tda2@chi-expr* t10d7@rhs* t10b4@r t10b5@mr)) (t10e2@loop-lex (tb05@gen-lexical t10d5@loop)) (t10e3@loop-lab (tb09@gen-label t10d5@loop))) (let ((t10e9@loop-rib (tb3d@make-full-rib (list t10d5@loop) (list t10e3@loop-lab))) (t10ea@rib (tb3d@make-full-rib t10d6@lhs* t10e0@lab*)) (t10eb@r (td16@add-lexicals (cons t10e3@loop-lab t10e0@lab*) (cons t10e2@loop-lex t10df@lex*) t10b4@r))) (let ((t10ef@body (tdbc@chi-internal (tb67@add-subst t10e9@loop-rib (tb67@add-subst t10ea@rib (cons t10d8@b t10d9@b*))) t10eb@r t10b5@mr))) (tae6@ta4a@build-named-let '#f t10e2@loop-lex t10df@lex* t10e1@rhs* t10ef@body)))))) t10d3@ls/false) (te64@syntax-violation '#f '"invalid syntax" t10d1@t))))))))) (set! t285b@td1a@let-transformer td1a@let-transformer) (set! td1c@letrec-transformer (lambda (t10f1@e t10f2@r t10f3@mr) (td18@letrec-helper t10f1@e t10f2@r t10f3@mr tae4@ta46@build-letrec))) (set! t285c@td1c@letrec-transformer td1c@letrec-transformer) (set! td1e@letrec*-transformer (lambda (t10f7@e t10f8@r t10f9@mr) (td18@letrec-helper t10f7@e t10f8@r t10f9@mr tae7@ta4c@build-letrec*))) (set! t285d@td1e@letrec*-transformer td1e@letrec*-transformer) (set! td20@fluid-let-syntax-transformer (lambda (t10fd@e t10fe@r t10ff@mr) (letrec* ((t1104@lookup (lambda (t1117@x) (or (tb93@id->label t1117@x) (te64@syntax-violation '#f '"unbound identifier" t10fd@e t1117@x))))) (let ((t1105@t t10fd@e)) (let ((t1107@ls/false (td84@syntax-dispatch t1105@t '(_ #(each (any any)) any . each-any)))) (if t1107@ls/false (apply (lambda (t1109@lhs* t110a@rhs* t110b@b t110c@b*) (if (not (tb85@valid-bound-ids? t1109@lhs*)) (td3e@invalid-fmls-error t10fd@e t1109@lhs*) (let ((t1111@lab* (map t1104@lookup t1109@lhs*)) (t1112@rhs* (map (lambda (t1115@x) (tbb5@make-eval-transformer (tdde@expand-transformer t1115@x t10ff@mr))) t110a@rhs*))) (tdbc@chi-internal (cons t110b@b t110c@b*) (append (map cons t1111@lab* t1112@rhs*) t10fe@r) (append (map cons t1111@lab* t1112@rhs*) t10ff@mr))))) t1107@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1105@t))))))) (set! t285e@td20@fluid-let-syntax-transformer td20@fluid-let-syntax-transformer) (set! td22@type-descriptor-transformer (lambda (t1119@e t111a@r t111b@mr) (let ((t111f@t t1119@e)) (let ((t1121@ls/false (td84@syntax-dispatch t111f@t '(_ any)))) (if (and t1121@ls/false (apply (lambda (t1123@id) (tb7d@id? t1123@id)) t1121@ls/false)) (apply (lambda (t1125@id) (let ((t1127@lab (tb93@id->label t1125@id))) (let ((t1129@b (tb95@label->binding t1127@lab t111a@r))) (let ((t112b@type (tb99@binding-type t1129@b))) (begin (if (not t1127@lab) (tb9d@raise-unbound-error t1125@id) (void)) (if (not (and (eq? t112b@type '$rtd) (not (list? (tb9b@binding-value t1129@b))))) (te64@syntax-violation '#f '"not a record type" t1119@e) (void)) (list 'quote (tb9b@binding-value t1129@b))))))) t1121@ls/false) (te64@syntax-violation '#f '"invalid syntax" t111f@t)))))) (set! t285f@td22@type-descriptor-transformer td22@type-descriptor-transformer) (set! td24@record-type-descriptor-transformer (lambda (t112d@e t112e@r t112f@mr) (let ((t1133@t t112d@e)) (let ((t1135@ls/false (td84@syntax-dispatch t1133@t '(_ any)))) (if (and t1135@ls/false (apply (lambda (t1137@id) (tb7d@id? t1137@id)) t1135@ls/false)) (apply (lambda (t1139@id) (let ((t113b@lab (tb93@id->label t1139@id))) (let ((t113d@b (tb95@label->binding t113b@lab t112e@r))) (let ((t113f@type (tb99@binding-type t113d@b))) (begin (if (not t113b@lab) (tb9d@raise-unbound-error t1139@id) (void)) (if (not (and (eq? t113f@type '$rtd) (list? (tb9b@binding-value t113d@b)))) (te64@syntax-violation '#f '"not a record type" t112d@e) (void)) (tda6@chi-expr (car (tb9b@binding-value t113d@b)) t112e@r t112f@mr)))))) t1135@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1133@t)))))) (set! t2860@td24@record-type-descriptor-transformer td24@record-type-descriptor-transformer) (set! td26@record-constructor-descriptor-transformer (lambda (t1141@e t1142@r t1143@mr) (let ((t1147@t t1141@e)) (let ((t1149@ls/false (td84@syntax-dispatch t1147@t '(_ any)))) (if (and t1149@ls/false (apply (lambda (t114b@id) (tb7d@id? t114b@id)) t1149@ls/false)) (apply (lambda (t114d@id) (let ((t114f@lab (tb93@id->label t114d@id))) (let ((t1151@b (tb95@label->binding t114f@lab t1142@r))) (let ((t1153@type (tb99@binding-type t1151@b))) (begin (if (not t114f@lab) (tb9d@raise-unbound-error t114d@id) (void)) (if (not (and (eq? t1153@type '$rtd) (list? (tb9b@binding-value t1151@b)))) (te64@syntax-violation '#f '"invalid type" t1141@e) (void)) (tda6@chi-expr (cadr (tb9b@binding-value t1151@b)) t1142@r t1143@mr)))))) t1149@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1147@t)))))) (set! t2861@td26@record-constructor-descriptor-transformer td26@record-constructor-descriptor-transformer) (set! td28@when-macro (lambda (t1155@e) (let ((t1157@t t1155@e)) (let ((t1159@ls/false (td84@syntax-dispatch t1157@t '(_ any any . each-any)))) (if t1159@ls/false (apply (lambda (t115b@test t115c@e t115d@e*) (td3a@bless (list 'if t115b@test (cons 'begin (cons t115c@e t115d@e*))))) t1159@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1157@t)))))) (set! t2862@td28@when-macro td28@when-macro) (set! td2a@unless-macro (lambda (t1161@e) (let ((t1163@t t1161@e)) (let ((t1165@ls/false (td84@syntax-dispatch t1163@t '(_ any any . each-any)))) (if t1165@ls/false (apply (lambda (t1167@test t1168@e t1169@e*) (td3a@bless (list 'if (list 'not t1167@test) (cons 'begin (cons t1168@e t1169@e*))))) t1165@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1163@t)))))) (set! t2863@td2a@unless-macro td2a@unless-macro) (set! td2c@if-transformer (lambda (t116d@e t116e@r t116f@mr) (let ((t1173@t t116d@e)) (let ((t1175@ls/false (td84@syntax-dispatch t1173@t '(_ any any any)))) (if t1175@ls/false (apply (lambda (t1177@e0 t1178@e1 t1179@e2) (list 'if (tda6@chi-expr t1177@e0 t116e@r t116f@mr) (tda6@chi-expr t1178@e1 t116e@r t116f@mr) (tda6@chi-expr t1179@e2 t116e@r t116f@mr))) t1175@ls/false) (let ((t117d@t t1173@t)) (let ((t117f@ls/false (td84@syntax-dispatch t117d@t '(_ any any)))) (if t117f@ls/false (apply (lambda (t1181@e0 t1182@e1) (list 'if (tda6@chi-expr t1181@e0 t116e@r t116f@mr) (tda6@chi-expr t1182@e1 t116e@r t116f@mr) (tae3@ta44@build-void))) t117f@ls/false) (te64@syntax-violation '#f '"invalid syntax" t117d@t))))))))) (set! t2864@td2c@if-transformer td2c@if-transformer) (set! td2e@and-transformer (lambda (t1185@e t1186@r t1187@mr) (let ((t118b@t t1185@e)) (let ((t118d@ls/false (td84@syntax-dispatch t118b@t '(_ . each-any)))) (if t118d@ls/false (apply (lambda (t118f@e*) (cons 'and (tda2@chi-expr* t118f@e* t1186@r t1187@mr))) t118d@ls/false) (te64@syntax-violation '#f '"invalid syntax" t118b@t)))))) (set! t2865@td2e@and-transformer td2e@and-transformer) (set! td30@or-transformer (lambda (t1191@e t1192@r t1193@mr) (let ((t1197@t t1191@e)) (let ((t1199@ls/false (td84@syntax-dispatch t1197@t '(_ . each-any)))) (if t1199@ls/false (apply (lambda (t119b@e*) (cons 'or (tda2@chi-expr* t119b@e* t1192@r t1193@mr))) t1199@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1197@t)))))) (set! t2866@td30@or-transformer td30@or-transformer) (set! td32@case-macro (lambda (t119d@e) (letrec* ((t11a0@build-last (lambda (t11c7@cls) (let ((t11c9@t t11c7@cls)) (let ((t11cb@ls/false (td84@syntax-dispatch t11c9@t '(#(scheme-id else) any . each-any)))) (if t11cb@ls/false (apply (lambda (t11cd@e t11ce@e*) (cons 'begin (cons t11cd@e t11ce@e*))) t11cb@ls/false) (let ((t11d1@t t11c9@t)) (let ((t11d3@ls/false (td84@syntax-dispatch t11d1@t '_))) (if t11d3@ls/false (apply (lambda () (t11a2@build-one t11c7@cls '(if #f #f))) t11d3@ls/false) (te64@syntax-violation '#f '"invalid syntax" t11d1@t))))))))) (t11a2@build-one (lambda (t11b9@cls t11ba@k) (let ((t11bd@t t11b9@cls)) (let ((t11bf@ls/false (td84@syntax-dispatch t11bd@t '(each-any any . each-any)))) (if t11bf@ls/false (apply (lambda (t11c1@d* t11c2@e t11c3@e*) (list 'if (list 'memv 't (list 'quote t11c1@d*)) (cons 'begin (cons t11c2@e t11c3@e*)) t11ba@k)) t11bf@ls/false) (te64@syntax-violation '#f '"invalid syntax" t11bd@t))))))) (let ((t11a3@t t119d@e)) (let ((t11a5@ls/false (td84@syntax-dispatch t11a3@t '(_ any)))) (if t11a5@ls/false (apply (lambda (t11a7@expr) (td3a@bless (cons 'let (cons (list (list 't t11a7@expr)) '((if #f #f)))))) t11a5@ls/false) (let ((t11a9@t t11a3@t)) (let ((t11ab@ls/false (td84@syntax-dispatch t11a9@t '(_ any any . each-any)))) (if t11ab@ls/false (apply (lambda (t11ad@expr t11ae@cls t11af@cls*) (td3a@bless (list 'let (list (list 't t11ad@expr)) (let t11b7@f ((t11b3@cls t11ae@cls) (t11b4@cls* t11af@cls*)) (if (null? t11b4@cls*) (t11a0@build-last t11b3@cls) (t11a2@build-one t11b3@cls (t11b7@f (car t11b4@cls*) (cdr t11b4@cls*)))))))) t11ab@ls/false) (te64@syntax-violation '#f '"invalid syntax" t11a9@t)))))))))) (set! t2867@td32@case-macro td32@case-macro) (set! td34@quote-transformer (lambda (t11d5@e t11d6@r t11d7@mr) (let ((t11db@t t11d5@e)) (let ((t11dd@ls/false (td84@syntax-dispatch t11db@t '(_ any)))) (if t11dd@ls/false (apply (lambda (t11df@datum) (list 'quote (tb91@stx->datum t11df@datum))) t11dd@ls/false) (te64@syntax-violation '#f '"invalid syntax" t11db@t)))))) (set! t2868@td34@quote-transformer td34@quote-transformer) (set! td36@case-lambda-transformer (lambda (t11e1@e t11e2@r t11e3@mr) (let ((t11e7@t t11e1@e)) (let ((t11e9@ls/false (td84@syntax-dispatch t11e7@t '(_ . #(each (any any . each-any)))))) (if t11e9@ls/false (apply (lambda (t11eb@fmls* t11ec@b* t11ed@b**) (call-with-values (lambda () (tdae@chi-lambda-clause* t11e1@e t11eb@fmls* (map cons t11ec@b* t11ed@b**) t11e2@r t11e3@mr)) (lambda (t11f5@t11f2 t11f6@t11f4) (let ((t11f9@body* t11f6@t11f4) (t11fa@fmls* t11f5@t11f2)) (tae1@ta14@build-case-lambda '#f t11fa@fmls* t11f9@body*))))) t11e9@ls/false) (te64@syntax-violation '#f '"invalid syntax" t11e7@t)))))) (set! t2869@td36@case-lambda-transformer td36@case-lambda-transformer) (set! td38@lambda-transformer (lambda (t11fd@e t11fe@r t11ff@mr) (let ((t1203@t t11fd@e)) (let ((t1205@ls/false (td84@syntax-dispatch t1203@t '(_ any any . each-any)))) (if t1205@ls/false (apply (lambda (t1207@fmls t1208@b t1209@b*) (call-with-values (lambda () (tdac@chi-lambda-clause t11fd@e t1207@fmls (cons t1208@b t1209@b*) t11fe@r t11ff@mr)) (lambda (t1211@t120e t1212@t1210) (let ((t1215@body t1212@t1210) (t1216@fmls t1211@t120e)) (tae0@ta12@build-lambda '#f t1216@fmls t1215@body))))) t1205@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1203@t)))))) (set! t286a@td38@lambda-transformer td38@lambda-transformer) (set! td3a@bless (lambda (t1219@x) (tb65@mkstx (let t121d@f ((t121b@x t1219@x)) (if (tb49@stx? t121b@x) t121b@x (if (pair? t121b@x) (cons (t121d@f (car t121b@x)) (t121d@f (cdr t121b@x))) (if (symbol? t121b@x) (td0c@scheme-stx t121b@x) (if (vector? t121b@x) (vector-map t121d@f t121b@x) t121b@x))))) '() '() '()))) (set! t286b@td3a@bless td3a@bless) (set! td3c@with-syntax-macro (lambda (t121f@e) (let ((t1221@t t121f@e)) (let ((t1223@ls/false (td84@syntax-dispatch t1221@t '(_ #(each (any any)) any . each-any)))) (if t1223@ls/false (apply (lambda (t1225@pat* t1226@expr* t1227@b t1228@b*) (let ((t122d@idn* (let t1231@f ((t122f@pat* t1225@pat*)) (if (null? t122f@pat*) '() (call-with-values (lambda () (td82@convert-pattern (car t122f@pat*) '())) (lambda (t1237@t1234 t1238@t1236) (let ((t123b@idn* t1238@t1236) (t123c@pat t1237@t1234)) (append t123b@idn* (t1231@f (cdr t122f@pat*)))))))))) (begin (tdaa@verify-formals (map car t122d@idn*) t121f@e) (let ((t123f@t* (te52@generate-temporaries t1226@expr*))) (td3a@bless (list 'let (map list t123f@t* t1226@expr*) (let t1245@f ((t1241@pat* t1225@pat*) (t1242@t* t123f@t*)) (if (null? t1241@pat*) (cons 'let (cons '() (cons t1227@b t1228@b*))) (list 'syntax-case (car t1242@t*) '() (list (car t1241@pat*) (t1245@f (cdr t1241@pat*) (cdr t1242@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car t1241@pat*)) (car t1242@t*)))))))))))) t1223@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1221@t)))))) (set! t286c@td3c@with-syntax-macro td3c@with-syntax-macro) (set! td3e@invalid-fmls-error (lambda (t1247@stx t1248@fmls) (let ((t124b@t t1248@fmls)) (let ((t124d@ls/false (td84@syntax-dispatch t124b@t '#(each+ any () any)))) (if t124d@ls/false (apply (lambda (t124f@id* t1250@last) (let t1255@f ((t1253@id* (if (tb7d@id? t1250@last) (cons t1250@last t124f@id*) (if (tb73@syntax-null? t1250@last) t124f@id* (te64@syntax-violation '#f '"not an identifier" t1247@stx t1250@last))))) (if (null? t1253@id*) (values) (if (not (tb7d@id? (car t1253@id*))) (te64@syntax-violation '#f '"not an identifier" t1247@stx (car t1253@id*)) (begin (t1255@f (cdr t1253@id*)) (if (tb89@bound-id-member? (car t1253@id*) (cdr t1253@id*)) (te64@syntax-violation '#f '"duplicate binding" t1247@stx (car t1253@id*)) (void))))))) t124d@ls/false) (let ((t1257@t t124b@t)) (let ((t1259@ls/false (td84@syntax-dispatch t1257@t '_))) (if t1259@ls/false (apply (lambda () (te64@syntax-violation '#f '"malformed binding form" t1247@stx t1248@fmls)) t1259@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1257@t))))))))) (set! t286d@td3e@invalid-fmls-error td3e@invalid-fmls-error) (set! td40@let-macro (lambda (t125b@stx) (let ((t125d@t t125b@stx)) (let ((t125f@ls/false (td84@syntax-dispatch t125d@t '(_ #(each (any any)) any . each-any)))) (if t125f@ls/false (apply (lambda (t1261@lhs* t1262@rhs* t1263@b t1264@b*) (if (tb85@valid-bound-ids? t1261@lhs*) (td3a@bless (cons (cons 'lambda (cons t1261@lhs* (cons t1263@b t1264@b*))) t1262@rhs*)) (td3e@invalid-fmls-error t125b@stx t1261@lhs*))) t125f@ls/false) (let ((t1269@t t125d@t)) (let ((t126b@ls/false (td84@syntax-dispatch t1269@t '(_ any #(each (any any)) any . each-any)))) (if (and t126b@ls/false (apply (lambda (t126d@f t126e@lhs* t126f@rhs* t1270@b t1271@b*) (tb7d@id? t126d@f)) t126b@ls/false)) (apply (lambda (t1277@f t1278@lhs* t1279@rhs* t127a@b t127b@b*) (if (tb85@valid-bound-ids? t1278@lhs*) (td3a@bless (cons (list 'letrec (list (list t1277@f (cons 'lambda (cons t1278@lhs* (cons t127a@b t127b@b*))))) t1277@f) t1279@rhs*)) (td3e@invalid-fmls-error t125b@stx t1278@lhs*))) t126b@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1269@t))))))))) (set! t286e@td40@let-macro td40@let-macro) (set! td42@let-values-macro (lambda (t1281@stx) (letrec* ((t1284@rename (lambda (t12e9@x t12ea@old* t12eb@new*) (begin (if (not (tb7d@id? t12e9@x)) (te64@syntax-violation '#f '"not an indentifier" t1281@stx t12e9@x) (void)) (if (tb89@bound-id-member? t12e9@x t12ea@old*) (te64@syntax-violation '#f '"duplicate binding" t1281@stx t12e9@x) (void)) (let ((t12ef@y (gensym (te6a@syntax->datum t12e9@x)))) (values t12ef@y (cons t12e9@x t12ea@old*) (cons t12ef@y t12eb@new*)))))) (t1286@rename* (lambda (t12d7@x* t12d8@old* t12d9@new*) (if (null? t12d7@x*) (values '() t12d8@old* t12d9@new*) (call-with-values (lambda () (t1284@rename (car t12d7@x*) t12d8@old* t12d9@new*)) (lambda (t12dd@x t12de@old* t12df@new*) (call-with-values (lambda () (t1286@rename* (cdr t12d7@x*) t12de@old* t12df@new*)) (lambda (t12e3@x* t12e4@old* t12e5@new*) (values (cons t12dd@x t12e3@x*) t12e4@old* t12e5@new*))))))))) (let ((t1287@t t1281@stx)) (let ((t1289@ls/false (td84@syntax-dispatch t1287@t '(_ () any . each-any)))) (if t1289@ls/false (apply (lambda (t128b@b t128c@b*) (cons* (td3a@bless 'let) '() t128b@b t128c@b*)) t1289@ls/false) (let ((t128f@t t1287@t)) (let ((t1291@ls/false (td84@syntax-dispatch t128f@t '(_ #(each (any any)) any . each-any)))) (if t1291@ls/false (apply (lambda (t1293@lhs* t1294@rhs* t1295@b t1296@b*) (td3a@bless (let t12a3@f ((t129b@lhs* t1293@lhs*) (t129c@rhs* t1294@rhs*) (t129d@old* '()) (t129e@new* '())) (if (null? t129b@lhs*) (cons 'let (cons (map list t129d@old* t129e@new*) (cons t1295@b t1296@b*))) (let ((t12a5@t (car t129b@lhs*))) (let ((t12a7@ls/false (td84@syntax-dispatch t12a5@t 'each-any))) (if t12a7@ls/false (apply (lambda (t12a9@x*) (call-with-values (lambda () (t1286@rename* t12a9@x* t129d@old* t129e@new*)) (lambda (t12b1@t12ac t12b2@t12ae t12b3@t12b0) (let ((t12b7@new* t12b3@t12b0) (t12b8@old* t12b2@t12ae) (t12b9@y* t12b1@t12ac)) (list 'call-with-values (list 'lambda '() (car t129c@rhs*)) (list 'lambda t12b9@y* (t12a3@f (cdr t129b@lhs*) (cdr t129c@rhs*) t12b8@old* t12b7@new*))))))) t12a7@ls/false) (let ((t12bd@t t12a5@t)) (let ((t12bf@ls/false (td84@syntax-dispatch t12bd@t '#(each+ any () any)))) (if t12bf@ls/false (apply (lambda (t12c1@x* t12c2@x) (call-with-values (lambda () (t1284@rename t12c2@x t129d@old* t129e@new*)) (lambda (t12c5@y t12c6@old* t12c7@new*) (call-with-values (lambda () (t1286@rename* t12c1@x* t12c6@old* t12c7@new*)) (lambda (t12cb@y* t12cc@old* t12cd@new*) (list 'call-with-values (list 'lambda '() (car t129c@rhs*)) (list 'lambda (append t12cb@y* t12c5@y) (t12a3@f (cdr t129b@lhs*) (cdr t129c@rhs*) t12cc@old* t12cd@new*)))))))) t12bf@ls/false) (let ((t12d1@t t12bd@t)) (let ((t12d3@ls/false (td84@syntax-dispatch t12d1@t 'any))) (if t12d3@ls/false (apply (lambda (t12d5@others) (te64@syntax-violation '#f '"malformed bindings" t1281@stx t12d5@others)) t12d3@ls/false) (te64@syntax-violation '#f '"invalid syntax" t12d1@t)))))))))))))) t1291@ls/false) (te64@syntax-violation '#f '"invalid syntax" t128f@t)))))))))) (set! t286f@td42@let-values-macro td42@let-values-macro) (set! td44@let*-values-macro (lambda (t12f1@stx) (letrec* ((t12f4@check (lambda (t1323@x*) (if (not (null? t1323@x*)) (let ((t1325@x (car t1323@x*))) (begin (if (not (tb7d@id? t1325@x)) (te64@syntax-violation '#f '"not an identifier" t12f1@stx t1325@x) (void)) (t12f4@check (cdr t1323@x*)) (if (tb89@bound-id-member? t1325@x (cdr t1323@x*)) (te64@syntax-violation '#f '"duplicate identifier" t12f1@stx t1325@x) (void)))) (void))))) (let ((t12f5@t t12f1@stx)) (let ((t12f7@ls/false (td84@syntax-dispatch t12f5@t '(_ () any . each-any)))) (if t12f7@ls/false (apply (lambda (t12f9@b t12fa@b*) (cons* (td3a@bless 'let) '() t12f9@b t12fa@b*)) t12f7@ls/false) (let ((t12fd@t t12f5@t)) (let ((t12ff@ls/false (td84@syntax-dispatch t12fd@t '(_ #(each (any any)) any . each-any)))) (if t12ff@ls/false (apply (lambda (t1301@lhs* t1302@rhs* t1303@b t1304@b*) (td3a@bless (let t130d@f ((t1309@lhs* t1301@lhs*) (t130a@rhs* t1302@rhs*)) (if (null? t1309@lhs*) (cons 'begin (cons t1303@b t1304@b*)) (let ((t130f@t (car t1309@lhs*))) (let ((t1311@ls/false (td84@syntax-dispatch t130f@t 'each-any))) (if t1311@ls/false (apply (lambda (t1313@x*) (begin (t12f4@check t1313@x*) (list 'call-with-values (list 'lambda '() (car t130a@rhs*)) (list 'lambda t1313@x* (t130d@f (cdr t1309@lhs*) (cdr t130a@rhs*)))))) t1311@ls/false) (let ((t1315@t t130f@t)) (let ((t1317@ls/false (td84@syntax-dispatch t1315@t '#(each+ any () any)))) (if t1317@ls/false (apply (lambda (t1319@x* t131a@x) (begin (t12f4@check (cons t131a@x t1319@x*)) (list 'call-with-values (list 'lambda '() (car t130a@rhs*)) (list 'lambda (append t1319@x* t131a@x) (t130d@f (cdr t1309@lhs*) (cdr t130a@rhs*)))))) t1317@ls/false) (let ((t131d@t t1315@t)) (let ((t131f@ls/false (td84@syntax-dispatch t131d@t 'any))) (if t131f@ls/false (apply (lambda (t1321@others) (te64@syntax-violation '#f '"malformed bindings" t12f1@stx t1321@others)) t131f@ls/false) (te64@syntax-violation '#f '"invalid syntax" t131d@t)))))))))))))) t12ff@ls/false) (te64@syntax-violation '#f '"invalid syntax" t12fd@t)))))))))) (set! t2870@td44@let*-values-macro td44@let*-values-macro) (set! td46@trace-lambda-macro (lambda (t1327@stx) (let ((t1329@t t1327@stx)) (let ((t132b@ls/false (td84@syntax-dispatch t1329@t '(_ any each-any any . each-any)))) (if t132b@ls/false (apply (lambda (t132d@who t132e@fmls t132f@b t1330@b*) (if (tb85@valid-bound-ids? t132e@fmls) (td3a@bless (list 'make-traced-procedure (list 'quote t132d@who) (cons 'lambda (cons t132e@fmls (cons t132f@b t1330@b*))))) (td3e@invalid-fmls-error t1327@stx t132e@fmls))) t132b@ls/false) (let ((t1335@t t1329@t)) (let ((t1337@ls/false (td84@syntax-dispatch t1335@t '(_ any #(each+ any () any) any . each-any)))) (if t1337@ls/false (apply (lambda (t1339@who t133a@fmls t133b@last t133c@b t133d@b*) (if (tb85@valid-bound-ids? (cons t133b@last t133a@fmls)) (td3a@bless (list 'make-traced-procedure (list 'quote t1339@who) (cons 'lambda (cons (append t133a@fmls t133b@last) (cons t133c@b t133d@b*))))) (td3e@invalid-fmls-error t1327@stx (append t133a@fmls t133b@last)))) t1337@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1335@t))))))))) (set! t2871@td46@trace-lambda-macro td46@trace-lambda-macro) (set! td48@trace-define-macro (lambda (t1343@stx) (let ((t1345@t t1343@stx)) (let ((t1347@ls/false (td84@syntax-dispatch t1345@t '(_ (any . each-any) any . each-any)))) (if t1347@ls/false (apply (lambda (t1349@who t134a@fmls t134b@b t134c@b*) (if (tb85@valid-bound-ids? t134a@fmls) (td3a@bless (list 'define t1349@who (list 'make-traced-procedure (list 'quote t1349@who) (cons 'lambda (cons t134a@fmls (cons t134b@b t134c@b*)))))) (td3e@invalid-fmls-error t1343@stx t134a@fmls))) t1347@ls/false) (let ((t1351@t t1345@t)) (let ((t1353@ls/false (td84@syntax-dispatch t1351@t '(_ (any . #(each+ any () any)) any . each-any)))) (if t1353@ls/false (apply (lambda (t1355@who t1356@fmls t1357@last t1358@b t1359@b*) (if (tb85@valid-bound-ids? (cons t1357@last t1356@fmls)) (td3a@bless (list 'define t1355@who (list 'make-traced-procedure (list 'quote t1355@who) (cons 'lambda (cons (append t1356@fmls t1357@last) (cons t1358@b t1359@b*)))))) (td3e@invalid-fmls-error t1343@stx (append t1356@fmls t1357@last)))) t1353@ls/false) (let ((t135f@t t1351@t)) (let ((t1361@ls/false (td84@syntax-dispatch t135f@t '(_ any any)))) (if t1361@ls/false (apply (lambda (t1363@who t1364@expr) (if (tb7d@id? t1363@who) (td3a@bless (list 'define t1363@who (list 'let (list (list 'v t1364@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote t1363@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (te64@syntax-violation '#f '"invalid name" t1343@stx))) t1361@ls/false) (te64@syntax-violation '#f '"invalid syntax" t135f@t)))))))))))) (set! t2872@td48@trace-define-macro td48@trace-define-macro) (set! td4a@trace-define-syntax-macro (lambda (t1367@stx) (let ((t1369@t t1367@stx)) (let ((t136b@ls/false (td84@syntax-dispatch t1369@t '(_ any any)))) (if t136b@ls/false (apply (lambda (t136d@who t136e@expr) (if (tb7d@id? t136d@who) (td3a@bless (list 'define-syntax t136d@who (list 'make-traced-macro (list 'quote t136d@who) t136e@expr))) (te64@syntax-violation '#f '"invalid name" t1367@stx))) t136b@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1369@t)))))) (set! t2873@td4a@trace-define-syntax-macro td4a@trace-define-syntax-macro) (set! td4c@trace-let/rec-syntax (lambda (t1371@who) (lambda (t1373@stx) (let ((t1375@t t1373@stx)) (let ((t1377@ls/false (td84@syntax-dispatch t1375@t '(_ #(each (any any)) any . each-any)))) (if t1377@ls/false (apply (lambda (t1379@lhs* t137a@rhs* t137b@b t137c@b*) (if (tb85@valid-bound-ids? t1379@lhs*) (let ((t1381@rhs* (map (lambda (t1383@lhs t1384@rhs) (list 'make-traced-macro (list 'quote t1383@lhs) t1384@rhs)) t1379@lhs* t137a@rhs*))) (td3a@bless (cons t1371@who (cons (map list t1379@lhs* t1381@rhs*) (cons t137b@b t137c@b*))))) (td3e@invalid-fmls-error t1373@stx t1379@lhs*))) t1377@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1375@t))))))) (set! t2874@td4c@trace-let/rec-syntax td4c@trace-let/rec-syntax) (set! td4e@trace-let-syntax-macro (td4c@trace-let/rec-syntax 'let-syntax)) (set! t2875@td4e@trace-let-syntax-macro td4e@trace-let-syntax-macro) (set! td50@trace-letrec-syntax-macro (td4c@trace-let/rec-syntax 'letrec-syntax)) (set! t2876@td50@trace-letrec-syntax-macro td50@trace-letrec-syntax-macro) (set! td52@guard-macro (lambda (t1387@x) (letrec* ((t138a@gen-clauses (lambda (t13a1@con t13a2@outerk t13a3@clause*) (letrec* ((t13a8@f (lambda (t13e1@x t13e2@k) (let ((t13e5@t t13e1@x)) (let ((t13e7@ls/false (td84@syntax-dispatch t13e5@t '(any #(scheme-id =>) any)))) (if t13e7@ls/false (apply (lambda (t13e9@e t13ea@p) (let ((t13ed@t (gensym))) (list 'let (list (list t13ed@t t13e9@e)) (list 'if t13ed@t (list t13ea@p t13ed@t) t13e2@k)))) t13e7@ls/false) (let ((t13ef@t t13e5@t)) (let ((t13f1@ls/false (td84@syntax-dispatch t13ef@t '(any)))) (if t13f1@ls/false (apply (lambda (t13f3@e) (let ((t13f5@t (gensym))) (list 'let (list (list t13f5@t t13f3@e)) (list 'if t13f5@t t13f5@t t13e2@k)))) t13f1@ls/false) (let ((t13f7@t t13ef@t)) (let ((t13f9@ls/false (td84@syntax-dispatch t13f7@t '(any any . each-any)))) (if t13f9@ls/false (apply (lambda (t13fb@e t13fc@v t13fd@v*) (list 'if t13fb@e (cons 'begin (cons t13fc@v t13fd@v*)) t13e2@k)) t13f9@ls/false) (let ((t1401@t t13f7@t)) (let ((t1403@ls/false (td84@syntax-dispatch t1401@t '_))) (if t1403@ls/false (apply (lambda () (te64@syntax-violation '#f '"invalid guard clause" t13e1@x)) t1403@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1401@t))))))))))))))) (t13aa@f* (lambda (t13b7@x*) (let ((t13b9@t t13b7@x*)) (let ((t13bb@ls/false (td84@syntax-dispatch t13b9@t '()))) (if t13bb@ls/false (apply (lambda () (let ((t13bd@g (gensym))) (values (list t13bd@g (list 'lambda '() (list 'raise-continuable t13a1@con))) t13bd@g))) t13bb@ls/false) (let ((t13bf@t t13b9@t)) (let ((t13c1@ls/false (td84@syntax-dispatch t13bf@t '((#(scheme-id else) any . each-any))))) (if t13c1@ls/false (apply (lambda (t13c3@e t13c4@e*) (values (cons 'begin (cons t13c3@e t13c4@e*)) '#f)) t13c1@ls/false) (let ((t13c7@t t13bf@t)) (let ((t13c9@ls/false (td84@syntax-dispatch t13c7@t '(any . any)))) (if t13c9@ls/false (apply (lambda (t13cb@cls t13cc@cls*) (call-with-values (lambda () (t13aa@f* t13cc@cls*)) (lambda (t13d3@t13d0 t13d4@t13d2) (let ((t13d7@g t13d4@t13d2) (t13d8@e t13d3@t13d0)) (values (t13a8@f t13cb@cls t13d8@e) t13d7@g))))) t13c9@ls/false) (let ((t13db@t t13c7@t)) (let ((t13dd@ls/false (td84@syntax-dispatch t13db@t 'any))) (if t13dd@ls/false (apply (lambda (t13df@others) (te64@syntax-violation '#f '"invalid guard clause" t13df@others)) t13dd@ls/false) (te64@syntax-violation '#f '"invalid syntax" t13db@t)))))))))))))))) (call-with-values (lambda () (t13aa@f* t13a3@clause*)) (lambda (t13af@t13ac t13b0@t13ae) (let ((t13b3@raisek t13b0@t13ae) (t13b4@code t13af@t13ac)) (if t13b3@raisek (list (list 'call/cc (list 'lambda (list t13b3@raisek) (list t13a2@outerk (list 'lambda '() t13b4@code))))) (list t13a2@outerk (list 'lambda '() t13b4@code)))))))))) (let ((t138b@t t1387@x)) (let ((t138d@ls/false (td84@syntax-dispatch t138b@t '(_ (any . each-any) any . each-any)))) (if (and t138d@ls/false (apply (lambda (t138f@con t1390@clause* t1391@b t1392@b*) (tb7d@id? t138f@con)) t138d@ls/false)) (apply (lambda (t1397@con t1398@clause* t1399@b t139a@b*) (let ((t139f@outerk (gensym))) (td3a@bless (list (list 'call/cc (list 'lambda (list t139f@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list t1397@con) (t138a@gen-clauses t1397@con t139f@outerk t1398@clause*)) (cons 'lambda (cons '() (cons t1399@b t139a@b*))))))))))) t138d@ls/false) (te64@syntax-violation '#f '"invalid syntax" t138b@t))))))) (set! t2877@td52@guard-macro td52@guard-macro) (set! td54@define-enumeration-macro (lambda (t1405@stx) (letrec* ((t1408@set? (lambda (t1421@x) (or (null? t1421@x) (and (not (memq (car t1421@x) (cdr t1421@x))) (t1408@set? (cdr t1421@x)))))) (t140a@remove-dups (lambda (t141f@ls) (if (null? t141f@ls) '() (cons (car t141f@ls) (t140a@remove-dups (remq (car t141f@ls) (cdr t141f@ls)))))))) (let ((t140b@t t1405@stx)) (let ((t140d@ls/false (td84@syntax-dispatch t140b@t '(_ any each-any any)))) (if (and t140d@ls/false (apply (lambda (t140f@name t1410@id* t1411@maker) (and (tb7d@id? t140f@name) (tb7d@id? t1411@maker) (for-all tb7d@id? t1410@id*))) t140d@ls/false)) (apply (lambda (t1415@name t1416@id* t1417@maker) (let ((t141b@name* (t140a@remove-dups (te6a@syntax->datum t1416@id*))) (t141c@mk (gensym))) (td3a@bless (list 'begin (list 'define t141c@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote t141b@name*)))) (list 'define-syntax t1415@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote t141b@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote t1415@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax t1417@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote t1417@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote t141b@name*)) (cons 'syntax-violation (cons (list 'quote t1417@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons t141c@mk '('(n* ...))))))))))))) t140d@ls/false) (te64@syntax-violation '#f '"invalid syntax" t140b@t))))))) (set! t2878@td54@define-enumeration-macro td54@define-enumeration-macro) (set! td56@time-macro (lambda (t1423@stx) (let ((t1425@t t1423@stx)) (let ((t1427@ls/false (td84@syntax-dispatch t1425@t '(_ any)))) (if t1427@ls/false (apply (lambda (t1429@expr) (td3a@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() t1429@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) t1427@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1425@t)))))) (set! t2879@td56@time-macro td56@time-macro) (set! td58@delay-macro (lambda (t142b@stx) (let ((t142d@t t142b@stx)) (let ((t142f@ls/false (td84@syntax-dispatch t142d@t '(_ any)))) (if t142f@ls/false (apply (lambda (t1431@expr) (td3a@bless (list 'make-promise (list 'lambda '() t1431@expr)))) t142f@ls/false) (te64@syntax-violation '#f '"invalid syntax" t142d@t)))))) (set! t287a@td58@delay-macro td58@delay-macro) (set! td5a@assert-macro (lambda (t1433@stx) (let ((t1435@t t1433@stx)) (let ((t1437@ls/false (td84@syntax-dispatch t1435@t '(_ any)))) (if t1437@ls/false (apply (lambda (t1439@expr) (let ((t143b@pos (or (te5c@expression-position t1433@stx) (te5c@expression-position t1439@expr)))) (td3a@bless (list 'let (list (list 'x t1439@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote t1439@expr) (list 'quote t143b@pos))))))) t1437@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1435@t)))))) (set! t287b@td5a@assert-macro td5a@assert-macro) (set! td5c@endianness-macro (lambda (t143d@stx) (let ((t143f@t t143d@stx)) (let ((t1441@ls/false (td84@syntax-dispatch t143f@t '(_ any)))) (if t1441@ls/false (apply (lambda (t1443@e) (let ((t1445@t (te6a@syntax->datum t1443@e))) (if (memv t1445@t '(little)) (td3a@bless ''little) (if (memv t1445@t '(big)) (td3a@bless ''big) (te64@syntax-violation '#f '"endianness must be big or little" t143d@stx))))) t1441@ls/false) (te64@syntax-violation '#f '"invalid syntax" t143f@t)))))) (set! t287c@td5c@endianness-macro td5c@endianness-macro) (set! td5e@identifier-syntax-macro (lambda (t1447@stx) (let ((t1449@t t1447@stx)) (let ((t144b@ls/false (td84@syntax-dispatch t1449@t '(_ any)))) (if t144b@ls/false (apply (lambda (t144d@expr) (td3a@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax t144d@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax t144d@expr) '((syntax (e* ...)))))))))) t144b@ls/false) (let ((t144f@t t1449@t)) (let ((t1451@ls/false (td84@syntax-dispatch t144f@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and t1451@ls/false (apply (lambda (t1453@id1 t1454@expr1 t1455@id2 t1456@expr2 t1457@expr3) (and (tb7d@id? t1453@id1) (tb7d@id? t1455@id2) (tb7d@id? t1456@expr2))) t1451@ls/false)) (apply (lambda (t145d@id1 t145e@expr1 t145f@id2 t1460@expr2 t1461@expr3) (td3a@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax t145e@expr1)) (list (list 'set! 'id t1460@expr2) (list 'syntax t1461@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons t145e@expr1 '(e* ...))))))))) t1451@ls/false) (te64@syntax-violation '#f '"invalid syntax" t144f@t))))))))) (set! t287d@td5e@identifier-syntax-macro td5e@identifier-syntax-macro) (set! td60@do-macro (lambda (t1467@stx) (letrec* ((t146a@bind (lambda (t1481@x) (let ((t1483@t t1481@x)) (let ((t1485@ls/false (td84@syntax-dispatch t1483@t '(any any)))) (if t1485@ls/false (apply (lambda (t1487@x t1488@init) (list t1487@x t1488@init t1487@x)) t1485@ls/false) (let ((t148b@t t1483@t)) (let ((t148d@ls/false (td84@syntax-dispatch t148b@t '(any any any)))) (if t148d@ls/false (apply (lambda (t148f@x t1490@init t1491@step) (list t148f@x t1490@init t1491@step)) t148d@ls/false) (let ((t1495@t t148b@t)) (let ((t1497@ls/false (td84@syntax-dispatch t1495@t '_))) (if t1497@ls/false (apply (lambda () (te64@syntax-violation '#f '"invalid binding" t1467@stx)) t1497@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1495@t))))))))))))) (let ((t146b@t t1467@stx)) (let ((t146d@ls/false (td84@syntax-dispatch t146b@t '(_ each-any (any . each-any) . each-any)))) (if t146d@ls/false (apply (lambda (t146f@binding* t1470@test t1471@expr* t1472@command*) (let ((t1477@t (map t146a@bind t146f@binding*))) (let ((t1479@ls/false (td84@syntax-dispatch t1477@t '#(each (any any any))))) (if t1479@ls/false (apply (lambda (t147b@x* t147c@init* t147d@step*) (if (tb85@valid-bound-ids? t147b@x*) (td3a@bless (list 'letrec (list (list 'loop (list 'lambda t147b@x* (list 'if t1470@test (cons 'begin (cons '(if #f #f) t1471@expr*)) (cons 'begin (append t1472@command* (list (cons 'loop t147d@step*)))))))) (cons 'loop t147c@init*))) (te64@syntax-violation '#f '"invalid bindings" t1467@stx))) t1479@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1477@t))))) t146d@ls/false) (te64@syntax-violation '#f '"invalid syntax" t146b@t))))))) (set! t287e@td60@do-macro td60@do-macro) (set! td62@let*-macro (lambda (t1499@stx) (let ((t149b@t t1499@stx)) (let ((t149d@ls/false (td84@syntax-dispatch t149b@t '(_ #(each (any any)) any . each-any)))) (if (and t149d@ls/false (apply (lambda (t149f@lhs* t14a0@rhs* t14a1@b t14a2@b*) (for-all tb7d@id? t149f@lhs*)) t149d@ls/false)) (apply (lambda (t14a7@lhs* t14a8@rhs* t14a9@b t14aa@b*) (td3a@bless (let t14b1@f ((t14af@x* (map list t14a7@lhs* t14a8@rhs*))) (if (null? t14af@x*) (cons 'let (cons '() (cons t14a9@b t14aa@b*))) (list 'let (list (car t14af@x*)) (t14b1@f (cdr t14af@x*))))))) t149d@ls/false) (te64@syntax-violation '#f '"invalid syntax" t149b@t)))))) (set! t287f@td62@let*-macro td62@let*-macro) (set! td64@or-macro (lambda (t14b3@stx) (let ((t14b5@t t14b3@stx)) (let ((t14b7@ls/false (td84@syntax-dispatch t14b5@t '(_)))) (if t14b7@ls/false (apply (lambda () '#f) t14b7@ls/false) (let ((t14b9@t t14b5@t)) (let ((t14bb@ls/false (td84@syntax-dispatch t14b9@t '(_ any . each-any)))) (if t14bb@ls/false (apply (lambda (t14bd@e t14be@e*) (td3a@bless (let t14c5@f ((t14c1@e t14bd@e) (t14c2@e* t14be@e*)) (if (null? t14c2@e*) (list 'begin '#f t14c1@e) (list 'let (list (list 't t14c1@e)) (list 'if 't 't (t14c5@f (car t14c2@e*) (cdr t14c2@e*)))))))) t14bb@ls/false) (te64@syntax-violation '#f '"invalid syntax" t14b9@t))))))))) (set! t2880@td64@or-macro td64@or-macro) (set! td66@and-macro (lambda (t14c7@stx) (let ((t14c9@t t14c7@stx)) (let ((t14cb@ls/false (td84@syntax-dispatch t14c9@t '(_)))) (if t14cb@ls/false (apply (lambda () '#t) t14cb@ls/false) (let ((t14cd@t t14c9@t)) (let ((t14cf@ls/false (td84@syntax-dispatch t14cd@t '(_ any . each-any)))) (if t14cf@ls/false (apply (lambda (t14d1@e t14d2@e*) (td3a@bless (let t14d9@f ((t14d5@e t14d1@e) (t14d6@e* t14d2@e*)) (if (null? t14d6@e*) (list 'begin '#f t14d5@e) (cons 'if (cons t14d5@e (cons (t14d9@f (car t14d6@e*) (cdr t14d6@e*)) '(#f)))))))) t14cf@ls/false) (te64@syntax-violation '#f '"invalid syntax" t14cd@t))))))))) (set! t2881@td66@and-macro td66@and-macro) (set! td68@cond-macro (lambda (t14db@stx) (let ((t14dd@t t14db@stx)) (let ((t14df@ls/false (td84@syntax-dispatch t14dd@t '(_ any . each-any)))) (if t14df@ls/false (apply (lambda (t14e1@cls t14e2@cls*) (td3a@bless (let t14e9@f ((t14e5@cls t14e1@cls) (t14e6@cls* t14e2@cls*)) (if (null? t14e6@cls*) (let ((t14eb@t t14e5@cls)) (let ((t14ed@ls/false (td84@syntax-dispatch t14eb@t '(#(scheme-id else) any . each-any)))) (if t14ed@ls/false (apply (lambda (t14ef@e t14f0@e*) (cons 'begin (cons t14ef@e t14f0@e*))) t14ed@ls/false) (let ((t14f3@t t14eb@t)) (let ((t14f5@ls/false (td84@syntax-dispatch t14f3@t '(any #(scheme-id =>) any)))) (if t14f5@ls/false (apply (lambda (t14f7@e t14f8@p) (list 'let (list (list 't t14f7@e)) (list 'if 't (cons t14f8@p '(t))))) t14f5@ls/false) (let ((t14fb@t t14f3@t)) (let ((t14fd@ls/false (td84@syntax-dispatch t14fb@t '(any)))) (if t14fd@ls/false (apply (lambda (t14ff@e) (cons 'or (cons t14ff@e '((if #f #f))))) t14fd@ls/false) (let ((t1501@t t14fb@t)) (let ((t1503@ls/false (td84@syntax-dispatch t1501@t '(any . each-any)))) (if t1503@ls/false (apply (lambda (t1505@e t1506@e*) (list 'if t1505@e (cons 'begin t1506@e*))) t1503@ls/false) (let ((t1509@t t1501@t)) (let ((t150b@ls/false (td84@syntax-dispatch t1509@t '_))) (if t150b@ls/false (apply (lambda () (te64@syntax-violation '#f '"invalid last clause" t14db@stx)) t150b@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1509@t)))))))))))))))) (let ((t150d@t t14e5@cls)) (let ((t150f@ls/false (td84@syntax-dispatch t150d@t '(#(scheme-id else) any . each-any)))) (if t150f@ls/false (apply (lambda (t1511@e t1512@e*) (te64@syntax-violation '#f '"incorrect position of keyword else" t14db@stx)) t150f@ls/false) (let ((t1515@t t150d@t)) (let ((t1517@ls/false (td84@syntax-dispatch t1515@t '(any #(scheme-id =>) any)))) (if t1517@ls/false (apply (lambda (t1519@e t151a@p) (list 'let (list (list 't t1519@e)) (list 'if 't (cons t151a@p '(t)) (t14e9@f (car t14e6@cls*) (cdr t14e6@cls*))))) t1517@ls/false) (let ((t151d@t t1515@t)) (let ((t151f@ls/false (td84@syntax-dispatch t151d@t '(any)))) (if t151f@ls/false (apply (lambda (t1521@e) (list 'or t1521@e (t14e9@f (car t14e6@cls*) (cdr t14e6@cls*)))) t151f@ls/false) (let ((t1523@t t151d@t)) (let ((t1525@ls/false (td84@syntax-dispatch t1523@t '(any . each-any)))) (if t1525@ls/false (apply (lambda (t1527@e t1528@e*) (list 'if t1527@e (cons 'begin t1528@e*) (t14e9@f (car t14e6@cls*) (cdr t14e6@cls*)))) t1525@ls/false) (let ((t152b@t t1523@t)) (let ((t152d@ls/false (td84@syntax-dispatch t152b@t '_))) (if t152d@ls/false (apply (lambda () (te64@syntax-violation '#f '"invalid last clause" t14db@stx)) t152d@ls/false) (te64@syntax-violation '#f '"invalid syntax" t152b@t)))))))))))))))))))) t14df@ls/false) (te64@syntax-violation '#f '"invalid syntax" t14dd@t)))))) (set! t2882@td68@cond-macro td68@cond-macro) (set! td6a@do-include (lambda (t152f@stx t1530@id t1531@filename) (let ((t1535@filename (tb91@stx->datum t1531@filename))) (begin (if (not (and (string? t1535@filename) (tb7d@id? t1530@id))) (te64@syntax-violation '#f '"invalid syntax" t152f@stx) (void)) (cons (td3a@bless 'begin) (with-input-from-file t1535@filename (lambda () (let t1539@f ((t1537@ls '())) (let ((t153b@x (t6bf@t58f@read-annotated))) (if (eof-object? t153b@x) (reverse t1537@ls) (t1539@f (cons (tb5d@datum->stx t1530@id t153b@x) t1537@ls)))))))))))) (set! t2883@td6a@do-include td6a@do-include) (set! td6c@include-macro (lambda (t153d@e) (let ((t153f@t t153d@e)) (let ((t1541@ls/false (td84@syntax-dispatch t153f@t '(any any)))) (if t1541@ls/false (apply (lambda (t1543@id t1544@filename) (td6a@do-include t153d@e t1543@id t1544@filename)) t1541@ls/false) (te64@syntax-violation '#f '"invalid syntax" t153f@t)))))) (set! t2884@td6c@include-macro td6c@include-macro) (set! td6e@include-into-macro (lambda (t1547@e) (let ((t1549@t t1547@e)) (let ((t154b@ls/false (td84@syntax-dispatch t1549@t '(_ any any)))) (if t154b@ls/false (apply (lambda (t154d@id t154e@filename) (td6a@do-include t1547@e t154d@id t154e@filename)) t154b@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1549@t)))))) (set! t2885@td6e@include-into-macro td6e@include-into-macro) (set! td70@syntax-rules-macro (lambda (t1551@e) (let ((t1553@t t1551@e)) (let ((t1555@ls/false (td84@syntax-dispatch t1553@t '(_ each-any . #(each (any any)))))) (if t1555@ls/false (apply (lambda (t1557@lits t1558@pat* t1559@tmp*) (begin (td8a@verify-literals t1557@lits t1551@e) (td3a@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons t1557@lits (map (lambda (t155d@pat t155e@tmp) (let ((t1561@t t155d@pat)) (let ((t1563@ls/false (td84@syntax-dispatch t1561@t '(_ . any)))) (if t1563@ls/false (apply (lambda (t1565@rest) (list (cons 'g t1565@rest) (list 'syntax t155e@tmp))) t1563@ls/false) (let ((t1567@t t1561@t)) (let ((t1569@ls/false (td84@syntax-dispatch t1567@t '_))) (if t1569@ls/false (apply (lambda () (te64@syntax-violation '#f '"invalid syntax-rules pattern" t1551@e t155d@pat)) t1569@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1567@t)))))))) t1558@pat* t1559@tmp*)))))))) t1555@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1553@t)))))) (set! t2886@td70@syntax-rules-macro td70@syntax-rules-macro) (set! td72@quasiquote-macro (letrec* ((t156c@datum (lambda (t166d@x) (list (td0c@scheme-stx 'quote) (tb65@mkstx t166d@x tb01@top-mark* '() '())))) (t1588@quasicons* (lambda (t1665@x t1666@y) (let t166b@f ((t1669@x t1665@x)) (if (null? t1669@x) t1666@y (t158a@quasicons (car t1669@x) (t166b@f (cdr t1669@x))))))) (t158a@quasicons (lambda (t163f@x t1640@y) (let ((t1643@t t1640@y)) (let ((t1645@ls/false (td84@syntax-dispatch t1643@t '(#(scheme-id quote) any)))) (if t1645@ls/false (apply (lambda (t1647@dy) (let ((t1649@t t163f@x)) (let ((t164b@ls/false (td84@syntax-dispatch t1649@t '(#(scheme-id quote) any)))) (if t164b@ls/false (apply (lambda (t164d@dx) (list (td0c@scheme-stx 'quote) (cons t164d@dx t1647@dy))) t164b@ls/false) (let ((t164f@t t1649@t)) (let ((t1651@ls/false (td84@syntax-dispatch t164f@t '_))) (if t1651@ls/false (apply (lambda () (let ((t1653@t t1647@dy)) (let ((t1655@ls/false (td84@syntax-dispatch t1653@t '()))) (if t1655@ls/false (apply (lambda () (list (td0c@scheme-stx 'list) t163f@x)) t1655@ls/false) (let ((t1657@t t1653@t)) (let ((t1659@ls/false (td84@syntax-dispatch t1657@t '_))) (if t1659@ls/false (apply (lambda () (list (td0c@scheme-stx 'cons) t163f@x t1640@y)) t1659@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1657@t)))))))) t1651@ls/false) (te64@syntax-violation '#f '"invalid syntax" t164f@t)))))))) t1645@ls/false) (let ((t165b@t t1643@t)) (let ((t165d@ls/false (td84@syntax-dispatch t165b@t '(#(scheme-id list) . each-any)))) (if t165d@ls/false (apply (lambda (t165f@stuff) (cons* (td0c@scheme-stx 'list) t163f@x t165f@stuff)) t165d@ls/false) (let ((t1661@t t165b@t)) (let ((t1663@ls/false (td84@syntax-dispatch t1661@t '_))) (if t1663@ls/false (apply (lambda () (list (td0c@scheme-stx 'cons) t163f@x t1640@y)) t1663@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1661@t)))))))))))) (t158c@quasiappend (lambda (t1625@x t1626@y) (let ((t1629@ls (let t162d@f ((t162b@x t1625@x)) (if (null? t162b@x) (let ((t162f@t t1626@y)) (let ((t1631@ls/false (td84@syntax-dispatch t162f@t '(#(scheme-id quote) ())))) (if t1631@ls/false (apply (lambda () '()) t1631@ls/false) (let ((t1633@t t162f@t)) (let ((t1635@ls/false (td84@syntax-dispatch t1633@t '_))) (if t1635@ls/false (apply (lambda () (list t1626@y)) t1635@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1633@t))))))) (let ((t1637@t (car t162b@x))) (let ((t1639@ls/false (td84@syntax-dispatch t1637@t '(#(scheme-id quote) ())))) (if t1639@ls/false (apply (lambda () (t162d@f (cdr t162b@x))) t1639@ls/false) (let ((t163b@t t1637@t)) (let ((t163d@ls/false (td84@syntax-dispatch t163b@t '_))) (if t163d@ls/false (apply (lambda () (cons (car t162b@x) (t162d@f (cdr t162b@x)))) t163d@ls/false) (te64@syntax-violation '#f '"invalid syntax" t163b@t))))))))))) (if (null? t1629@ls) (list (td0c@scheme-stx 'quote) '()) (if (null? (cdr t1629@ls)) (car t1629@ls) (cons* (td0c@scheme-stx 'append) t1629@ls)))))) (t158e@quasivector (lambda (t15f3@x) (let ((t15f5@pat-x t15f3@x)) (let ((t15f7@t t15f5@pat-x)) (let ((t15f9@ls/false (td84@syntax-dispatch t15f7@t '(#(scheme-id quote) each-any)))) (if t15f9@ls/false (apply (lambda (t15fb@x*) (list (td0c@scheme-stx 'quote) (list->vector t15fb@x*))) t15f9@ls/false) (let ((t15fd@t t15f7@t)) (let ((t15ff@ls/false (td84@syntax-dispatch t15fd@t '_))) (if t15ff@ls/false (apply (lambda () (let t1607@f ((t1601@x t15f3@x) (t1602@k (lambda (t1605@ls) (cons* (td0c@scheme-stx 'vector) t1605@ls)))) (let ((t1609@t t1601@x)) (let ((t160b@ls/false (td84@syntax-dispatch t1609@t '(#(scheme-id quote) each-any)))) (if t160b@ls/false (apply (lambda (t160d@x*) (t1602@k (map (lambda (t160f@x) (list (td0c@scheme-stx 'quote) t160f@x)) t160d@x*))) t160b@ls/false) (let ((t1611@t t1609@t)) (let ((t1613@ls/false (td84@syntax-dispatch t1611@t '(#(scheme-id list) . each-any)))) (if t1613@ls/false (apply (lambda (t1615@x*) (t1602@k t1615@x*)) t1613@ls/false) (let ((t1617@t t1611@t)) (let ((t1619@ls/false (td84@syntax-dispatch t1617@t '(#(scheme-id cons) any any)))) (if t1619@ls/false (apply (lambda (t161b@x t161c@y) (t1607@f t161c@y (lambda (t161f@ls) (t1602@k (cons t161b@x t161f@ls))))) t1619@ls/false) (let ((t1621@t t1617@t)) (let ((t1623@ls/false (td84@syntax-dispatch t1621@t '_))) (if t1623@ls/false (apply (lambda () (list (td0c@scheme-stx 'list->vector) t15f5@pat-x)) t1623@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1621@t))))))))))))))) t15ff@ls/false) (te64@syntax-violation '#f '"invalid syntax" t15fd@t)))))))))) (t1590@vquasi (lambda (t15d1@p t15d2@lev) (let ((t15d5@t t15d1@p)) (let ((t15d7@ls/false (td84@syntax-dispatch t15d5@t '(any . any)))) (if t15d7@ls/false (apply (lambda (t15d9@p t15da@q) (let ((t15dd@t t15d9@p)) (let ((t15df@ls/false (td84@syntax-dispatch t15dd@t '(#(scheme-id unquote) . each-any)))) (if t15df@ls/false (apply (lambda (t15e1@p) (if (= t15d2@lev '0) (t1588@quasicons* t15e1@p (t1590@vquasi t15da@q t15d2@lev)) (t158a@quasicons (t158a@quasicons (t156c@datum 'unquote) (t1592@quasi t15e1@p (- t15d2@lev '1))) (t1590@vquasi t15da@q t15d2@lev)))) t15df@ls/false) (let ((t15e3@t t15dd@t)) (let ((t15e5@ls/false (td84@syntax-dispatch t15e3@t '(#(scheme-id unquote-splicing) . each-any)))) (if t15e5@ls/false (apply (lambda (t15e7@p) (if (= t15d2@lev '0) (t158c@quasiappend t15e7@p (t1590@vquasi t15da@q t15d2@lev)) (t158a@quasicons (t158a@quasicons (t156c@datum 'unquote-splicing) (t1592@quasi t15e7@p (- t15d2@lev '1))) (t1590@vquasi t15da@q t15d2@lev)))) t15e5@ls/false) (let ((t15e9@t t15e3@t)) (let ((t15eb@ls/false (td84@syntax-dispatch t15e9@t 'any))) (if t15eb@ls/false (apply (lambda (t15ed@p) (t158a@quasicons (t1592@quasi t15ed@p t15d2@lev) (t1590@vquasi t15da@q t15d2@lev))) t15eb@ls/false) (te64@syntax-violation '#f '"invalid syntax" t15e9@t))))))))))) t15d7@ls/false) (let ((t15ef@t t15d5@t)) (let ((t15f1@ls/false (td84@syntax-dispatch t15ef@t '()))) (if t15f1@ls/false (apply (lambda () (list (td0c@scheme-stx 'quote) '())) t15f1@ls/false) (te64@syntax-violation '#f '"invalid syntax" t15ef@t))))))))) (t1592@quasi (lambda (t159b@p t159c@lev) (let ((t159f@t t159b@p)) (let ((t15a1@ls/false (td84@syntax-dispatch t159f@t '(#(scheme-id unquote) any)))) (if t15a1@ls/false (apply (lambda (t15a3@p) (if (= t159c@lev '0) t15a3@p (t158a@quasicons (t156c@datum 'unquote) (t1592@quasi (list t15a3@p) (- t159c@lev '1))))) t15a1@ls/false) (let ((t15a5@t t159f@t)) (let ((t15a7@ls/false (td84@syntax-dispatch t15a5@t '((#(scheme-id unquote) . each-any) . any)))) (if t15a7@ls/false (apply (lambda (t15a9@p t15aa@q) (if (= t159c@lev '0) (t1588@quasicons* t15a9@p (t1592@quasi t15aa@q t159c@lev)) (t158a@quasicons (t158a@quasicons (t156c@datum 'unquote) (t1592@quasi t15a9@p (- t159c@lev '1))) (t1592@quasi t15aa@q t159c@lev)))) t15a7@ls/false) (let ((t15ad@t t15a5@t)) (let ((t15af@ls/false (td84@syntax-dispatch t15ad@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if t15af@ls/false (apply (lambda (t15b1@p t15b2@q) (if (= t159c@lev '0) (t158c@quasiappend t15b1@p (t1592@quasi t15b2@q t159c@lev)) (t158a@quasicons (t158a@quasicons (t156c@datum 'unquote-splicing) (t1592@quasi t15b1@p (- t159c@lev '1))) (t1592@quasi t15b2@q t159c@lev)))) t15af@ls/false) (let ((t15b5@t t15ad@t)) (let ((t15b7@ls/false (td84@syntax-dispatch t15b5@t '(#(scheme-id quasiquote) any)))) (if t15b7@ls/false (apply (lambda (t15b9@p) (t158a@quasicons (t156c@datum 'quasiquote) (t1592@quasi (list t15b9@p) (+ t159c@lev '1)))) t15b7@ls/false) (let ((t15bb@t t15b5@t)) (let ((t15bd@ls/false (td84@syntax-dispatch t15bb@t '(any . any)))) (if t15bd@ls/false (apply (lambda (t15bf@p t15c0@q) (t158a@quasicons (t1592@quasi t15bf@p t159c@lev) (t1592@quasi t15c0@q t159c@lev))) t15bd@ls/false) (let ((t15c3@t t15bb@t)) (let ((t15c5@ls/false (td84@syntax-dispatch t15c3@t '#(vector each-any)))) (if (and t15c5@ls/false (apply (lambda (t15c7@x) (not (tb49@stx? t15c7@x))) t15c5@ls/false)) (apply (lambda (t15c9@x) (t158e@quasivector (t1590@vquasi t15c9@x t159c@lev))) t15c5@ls/false) (let ((t15cb@t t15c3@t)) (let ((t15cd@ls/false (td84@syntax-dispatch t15cb@t 'any))) (if t15cd@ls/false (apply (lambda (t15cf@p) (list (td0c@scheme-stx 'quote) t15cf@p)) t15cd@ls/false) (te64@syntax-violation '#f '"invalid syntax" t15cb@t))))))))))))))))))))))))) (lambda (t1593@x) (let ((t1595@t t1593@x)) (let ((t1597@ls/false (td84@syntax-dispatch t1595@t '(_ any)))) (if t1597@ls/false (apply (lambda (t1599@e) (t1592@quasi t1599@e '0)) t1597@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1595@t))))))) (set! t2887@td72@quasiquote-macro td72@quasiquote-macro) (set! td74@quasisyntax-macro (letrec* ((t1670@quasi (lambda (t168b@p t168c@lev) (let ((t168f@t t168b@p)) (let ((t1691@ls/false (td84@syntax-dispatch t168f@t '(#(scheme-id unsyntax) any)))) (if t1691@ls/false (apply (lambda (t1693@p) (if (= t168c@lev '0) (let ((t1695@g (gensym))) (values (list t1695@g) (list t1693@p) t1695@g)) (call-with-values (lambda () (t1670@quasi t1693@p (- t168c@lev '1))) (lambda (t169d@t1698 t169e@t169a t169f@t169c) (let ((t16a3@p t169f@t169c) (t16a4@rhs* t169e@t169a) (t16a5@lhs* t169d@t1698)) (values t16a5@lhs* t16a4@rhs* (list 'unsyntax t16a3@p))))))) t1691@ls/false) (let ((t16a9@t t168f@t)) (let ((t16ab@ls/false (td84@syntax-dispatch t16a9@t '#(scheme-id unsyntax)))) (if (and t16ab@ls/false (apply (lambda () (= t168c@lev '0)) t16ab@ls/false)) (apply (lambda () (te64@syntax-violation '#f '"incorrect use of unsyntax" t168b@p)) t16ab@ls/false) (let ((t16ad@t t16a9@t)) (let ((t16af@ls/false (td84@syntax-dispatch t16ad@t '((#(scheme-id unsyntax) . each-any) . any)))) (if t16af@ls/false (apply (lambda (t16b1@p* t16b2@q) (call-with-values (lambda () (t1670@quasi t16b2@q t168c@lev)) (lambda (t16bb@t16b6 t16bc@t16b8 t16bd@t16ba) (let ((t16c1@q t16bd@t16ba) (t16c2@rhs* t16bc@t16b8) (t16c3@lhs* t16bb@t16b6)) (if (= t168c@lev '0) (let ((t16c7@g* (map (lambda (t16c9@x) (gensym)) t16b1@p*))) (values (append t16c7@g* t16c3@lhs*) (append t16b1@p* t16c2@rhs*) (append t16c7@g* t16c1@q))) (call-with-values (lambda () (t1670@quasi t16b1@p* (- t168c@lev '1))) (lambda (t16d1@t16cc t16d2@t16ce t16d3@t16d0) (let ((t16d7@p* t16d3@t16d0) (t16d8@rhs2* t16d2@t16ce) (t16d9@lhs2* t16d1@t16cc)) (values (append t16d9@lhs2* t16c3@lhs*) (append t16d8@rhs2* t16c2@rhs*) (cons (cons 'unsyntax t16d7@p*) t16c1@q)))))))))) t16af@ls/false) (let ((t16dd@t t16ad@t)) (let ((t16df@ls/false (td84@syntax-dispatch t16dd@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if t16df@ls/false (apply (lambda (t16e1@p* t16e2@q) (call-with-values (lambda () (t1670@quasi t16e2@q t168c@lev)) (lambda (t16eb@t16e6 t16ec@t16e8 t16ed@t16ea) (let ((t16f1@q t16ed@t16ea) (t16f2@rhs* t16ec@t16e8) (t16f3@lhs* t16eb@t16e6)) (if (= t168c@lev '0) (let ((t16f7@g* (map (lambda (t16f9@x) (gensym)) t16e1@p*))) (values (append (map (lambda (t16fb@g) (cons t16fb@g '(...))) t16f7@g*) t16f3@lhs*) (append t16e1@p* t16f2@rhs*) (append (apply append (map (lambda (t16fd@g) (cons t16fd@g '(...))) t16f7@g*)) t16f1@q))) (call-with-values (lambda () (t1670@quasi t16e1@p* (- t168c@lev '1))) (lambda (t1705@t1700 t1706@t1702 t1707@t1704) (let ((t170b@p* t1707@t1704) (t170c@rhs2* t1706@t1702) (t170d@lhs2* t1705@t1700)) (values (append t170d@lhs2* t16f3@lhs*) (append t170c@rhs2* t16f2@rhs*) (cons (cons 'unsyntax-splicing t170b@p*) t16f1@q)))))))))) t16df@ls/false) (let ((t1711@t t16dd@t)) (let ((t1713@ls/false (td84@syntax-dispatch t1711@t '#(scheme-id unsyntax-splicing)))) (if (and t1713@ls/false (apply (lambda () (= t168c@lev '0)) t1713@ls/false)) (apply (lambda () (te64@syntax-violation '#f '"incorrect use of unsyntax-splicing" t168b@p)) t1713@ls/false) (let ((t1715@t t1711@t)) (let ((t1717@ls/false (td84@syntax-dispatch t1715@t '(#(scheme-id quasisyntax) any)))) (if t1717@ls/false (apply (lambda (t1719@p) (call-with-values (lambda () (t1670@quasi t1719@p (+ t168c@lev '1))) (lambda (t1721@t171c t1722@t171e t1723@t1720) (let ((t1727@p t1723@t1720) (t1728@rhs* t1722@t171e) (t1729@lhs* t1721@t171c)) (values t1729@lhs* t1728@rhs* (list 'quasisyntax t1727@p)))))) t1717@ls/false) (let ((t172d@t t1715@t)) (let ((t172f@ls/false (td84@syntax-dispatch t172d@t '(any . any)))) (if t172f@ls/false (apply (lambda (t1731@p t1732@q) (call-with-values (lambda () (t1670@quasi t1731@p t168c@lev)) (lambda (t1741@t1736 t1742@t1738 t1743@t173a) (call-with-values (lambda () (t1670@quasi t1732@q t168c@lev)) (lambda (t1747@t173c t1748@t173e t1749@t1740) (let ((t174d@q t1749@t1740) (t174e@rhs2* t1748@t173e) (t174f@lhs2* t1747@t173c) (t1750@p t1743@t173a) (t1751@rhs* t1742@t1738) (t1752@lhs* t1741@t1736)) (values (append t174f@lhs2* t1752@lhs*) (append t174e@rhs2* t1751@rhs*) (cons t1750@p t174d@q)))))))) t172f@ls/false) (let ((t1759@t t172d@t)) (let ((t175b@ls/false (td84@syntax-dispatch t1759@t '#(vector each-any)))) (if t175b@ls/false (apply (lambda (t175d@x*) (call-with-values (lambda () (t1670@quasi t175d@x* t168c@lev)) (lambda (t1765@t1760 t1766@t1762 t1767@t1764) (let ((t176b@x* t1767@t1764) (t176c@rhs* t1766@t1762) (t176d@lhs* t1765@t1760)) (values t176d@lhs* t176c@rhs* (list->vector t176b@x*)))))) t175b@ls/false) (let ((t1771@t t1759@t)) (let ((t1773@ls/false (td84@syntax-dispatch t1771@t '_))) (if t1773@ls/false (apply (lambda () (values '() '() t168b@p)) t1773@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1771@t))))))))))))))))))))))))))))))) (lambda (t1671@x) (let ((t1673@t t1671@x)) (let ((t1675@ls/false (td84@syntax-dispatch t1673@t '(_ any)))) (if t1675@ls/false (apply (lambda (t1677@e) (call-with-values (lambda () (t1670@quasi t1677@e '0)) (lambda (t167f@t167a t1680@t167c t1681@t167e) (let ((t1685@v t1681@t167e) (t1686@rhs* t1680@t167c) (t1687@lhs* t167f@t167a)) (td3a@bless (list 'syntax-case (cons 'list t1686@rhs*) '() (list t1687@lhs* (list 'syntax t1685@v)))))))) t1675@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1673@t))))))) (set! t2888@td74@quasisyntax-macro td74@quasisyntax-macro) (set! td76@define-struct-macro (lambda (t1775@stx) (te64@syntax-violation '#f '"define-struct not supported" t1775@stx))) (set! t2889@td76@define-struct-macro td76@define-struct-macro) (set! td78@define-record-type-macro (lambda (t1777@x) (letrec* ((t177a@id (lambda (t196d@ctxt . t196f@str*) (te68@datum->syntax t196d@ctxt (string->symbol (apply string-append (map (lambda (t1971@x) (if (symbol? t1971@x) (symbol->string t1971@x) (if (string? t1971@x) t1971@x (assertion-violation 'define-record-type '"BUG")))) t196f@str*)))))) (t177c@get-record-name (lambda (t195b@spec) (let ((t195d@t t195b@spec)) (let ((t195f@ls/false (td84@syntax-dispatch t195d@t '(any any any)))) (if t195f@ls/false (apply (lambda (t1961@foo t1962@make-foo t1963@foo?) t1961@foo) t195f@ls/false) (let ((t1967@t t195d@t)) (let ((t1969@ls/false (td84@syntax-dispatch t1967@t 'any))) (if t1969@ls/false (apply (lambda (t196b@foo) t196b@foo) t1969@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1967@t))))))))) (t177e@get-record-constructor-name (lambda (t1947@spec) (let ((t1949@t t1947@spec)) (let ((t194b@ls/false (td84@syntax-dispatch t1949@t '(any any any)))) (if t194b@ls/false (apply (lambda (t194d@foo t194e@make-foo t194f@foo?) t194e@make-foo) t194b@ls/false) (let ((t1953@t t1949@t)) (let ((t1955@ls/false (td84@syntax-dispatch t1953@t 'any))) (if (and t1955@ls/false (apply (lambda (t1957@foo) (tb7d@id? t1957@foo)) t1955@ls/false)) (apply (lambda (t1959@foo) (t177a@id t1959@foo '"make-" (tb91@stx->datum t1959@foo))) t1955@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1953@t))))))))) (t1780@get-record-predicate-name (lambda (t1933@spec) (let ((t1935@t t1933@spec)) (let ((t1937@ls/false (td84@syntax-dispatch t1935@t '(any any any)))) (if t1937@ls/false (apply (lambda (t1939@foo t193a@make-foo t193b@foo?) t193b@foo?) t1937@ls/false) (let ((t193f@t t1935@t)) (let ((t1941@ls/false (td84@syntax-dispatch t193f@t 'any))) (if (and t1941@ls/false (apply (lambda (t1943@foo) (tb7d@id? t1943@foo)) t1941@ls/false)) (apply (lambda (t1945@foo) (t177a@id t1945@foo (tb91@stx->datum t1945@foo) '"?")) t1941@ls/false) (te64@syntax-violation '#f '"invalid syntax" t193f@t))))))))) (t1782@get-clause (lambda (t1921@id t1922@ls) (let ((t1925@t t1922@ls)) (let ((t1927@ls/false (td84@syntax-dispatch t1925@t '()))) (if t1927@ls/false (apply (lambda () '#f) t1927@ls/false) (let ((t1929@t t1925@t)) (let ((t192b@ls/false (td84@syntax-dispatch t1929@t '((any . any) . any)))) (if t192b@ls/false (apply (lambda (t192d@x t192e@rest t192f@ls) (if (tb83@free-id=? (td3a@bless t1921@id) t192d@x) (cons t192d@x t192e@rest) (t1782@get-clause t1921@id t192f@ls))) t192b@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1929@t))))))))) (t1784@foo-rtd-code (lambda (t18cf@name t18d0@clause* t18d1@parent-rtd-code) (letrec* ((t18d6@convert-field-spec* (lambda (t1907@ls) (list->vector (map (lambda (t1909@x) (let ((t190b@t t1909@x)) (let ((t190d@ls/false (td84@syntax-dispatch t190b@t '(#(scheme-id mutable) any . any)))) (if t190d@ls/false (apply (lambda (t190f@name t1910@rest) (list 'mutable t190f@name)) t190d@ls/false) (let ((t1913@t t190b@t)) (let ((t1915@ls/false (td84@syntax-dispatch t1913@t '(#(scheme-id immutable) any . any)))) (if t1915@ls/false (apply (lambda (t1917@name t1918@rest) (list 'immutable t1917@name)) t1915@ls/false) (let ((t191b@t t1913@t)) (let ((t191d@ls/false (td84@syntax-dispatch t191b@t 'any))) (if t191d@ls/false (apply (lambda (t191f@name) (list 'immutable t191f@name)) t191d@ls/false) (te64@syntax-violation '#f '"invalid syntax" t191b@t))))))))))) t1907@ls))))) (let ((t18d7@uid-code (let ((t18df@t (t1782@get-clause 'nongenerative t18d0@clause*))) (let ((t18e1@ls/false (td84@syntax-dispatch t18df@t '(_)))) (if t18e1@ls/false (apply (lambda () (list 'quote (gensym))) t18e1@ls/false) (let ((t18e3@t t18df@t)) (let ((t18e5@ls/false (td84@syntax-dispatch t18e3@t '(_ any)))) (if t18e5@ls/false (apply (lambda (t18e7@uid) (list 'quote t18e7@uid)) t18e5@ls/false) (let ((t18e9@t t18e3@t)) (let ((t18eb@ls/false (td84@syntax-dispatch t18e9@t '_))) (if t18eb@ls/false (apply (lambda () '#f) t18eb@ls/false) (te64@syntax-violation '#f '"invalid syntax" t18e9@t))))))))))) (t18d8@sealed? (let ((t18ed@t (t1782@get-clause 'sealed t18d0@clause*))) (let ((t18ef@ls/false (td84@syntax-dispatch t18ed@t '(_ #(atom #t))))) (if t18ef@ls/false (apply (lambda () '#t) t18ef@ls/false) (let ((t18f1@t t18ed@t)) (let ((t18f3@ls/false (td84@syntax-dispatch t18f1@t '_))) (if t18f3@ls/false (apply (lambda () '#f) t18f3@ls/false) (te64@syntax-violation '#f '"invalid syntax" t18f1@t)))))))) (t18d9@opaque? (let ((t18f5@t (t1782@get-clause 'opaque t18d0@clause*))) (let ((t18f7@ls/false (td84@syntax-dispatch t18f5@t '(_ #(atom #t))))) (if t18f7@ls/false (apply (lambda () '#t) t18f7@ls/false) (let ((t18f9@t t18f5@t)) (let ((t18fb@ls/false (td84@syntax-dispatch t18f9@t '_))) (if t18fb@ls/false (apply (lambda () '#f) t18fb@ls/false) (te64@syntax-violation '#f '"invalid syntax" t18f9@t)))))))) (t18da@fields (let ((t18fd@t (t1782@get-clause 'fields t18d0@clause*))) (let ((t18ff@ls/false (td84@syntax-dispatch t18fd@t '(_ . each-any)))) (if t18ff@ls/false (apply (lambda (t1901@field-spec*) (list 'quote (t18d6@convert-field-spec* t1901@field-spec*))) t18ff@ls/false) (let ((t1903@t t18fd@t)) (let ((t1905@ls/false (td84@syntax-dispatch t1903@t '_))) (if t1905@ls/false (apply (lambda () ''#()) t1905@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1903@t))))))))) (td3a@bless (list 'make-record-type-descriptor (list 'quote t18cf@name) t18d1@parent-rtd-code t18d7@uid-code t18d8@sealed? t18d9@opaque? t18da@fields)))))) (t1786@parent-rtd-code (lambda (t18b7@clause*) (let ((t18b9@t (t1782@get-clause 'parent t18b7@clause*))) (let ((t18bb@ls/false (td84@syntax-dispatch t18b9@t '(_ any)))) (if t18bb@ls/false (apply (lambda (t18bd@name) (list 'record-type-descriptor t18bd@name)) t18bb@ls/false) (let ((t18bf@t t18b9@t)) (let ((t18c1@ls/false (td84@syntax-dispatch t18bf@t '#(atom #f)))) (if t18c1@ls/false (apply (lambda () (let ((t18c3@t (t1782@get-clause 'parent-rtd t18b7@clause*))) (let ((t18c5@ls/false (td84@syntax-dispatch t18c3@t '(_ any any)))) (if t18c5@ls/false (apply (lambda (t18c7@rtd t18c8@rcd) t18c7@rtd) t18c5@ls/false) (let ((t18cb@t t18c3@t)) (let ((t18cd@ls/false (td84@syntax-dispatch t18cb@t '#(atom #f)))) (if t18cd@ls/false (apply (lambda () '#f) t18cd@ls/false) (te64@syntax-violation '#f '"invalid syntax" t18cb@t)))))))) t18c1@ls/false) (te64@syntax-violation '#f '"invalid syntax" t18bf@t))))))))) (t1788@parent-rcd-code (lambda (t189f@clause*) (let ((t18a1@t (t1782@get-clause 'parent t189f@clause*))) (let ((t18a3@ls/false (td84@syntax-dispatch t18a1@t '(_ any)))) (if t18a3@ls/false (apply (lambda (t18a5@name) (list 'record-constructor-descriptor t18a5@name)) t18a3@ls/false) (let ((t18a7@t t18a1@t)) (let ((t18a9@ls/false (td84@syntax-dispatch t18a7@t '#(atom #f)))) (if t18a9@ls/false (apply (lambda () (let ((t18ab@t (t1782@get-clause 'parent-rtd t189f@clause*))) (let ((t18ad@ls/false (td84@syntax-dispatch t18ab@t '(_ any any)))) (if t18ad@ls/false (apply (lambda (t18af@rtd t18b0@rcd) t18b0@rcd) t18ad@ls/false) (let ((t18b3@t t18ab@t)) (let ((t18b5@ls/false (td84@syntax-dispatch t18b3@t '#(atom #f)))) (if t18b5@ls/false (apply (lambda () '#f) t18b5@ls/false) (te64@syntax-violation '#f '"invalid syntax" t18b3@t)))))))) t18a9@ls/false) (te64@syntax-violation '#f '"invalid syntax" t18a7@t))))))))) (t178a@foo-rcd-code (lambda (t1897@clause* t1898@foo-rtd t1899@protocol t189a@parent-rcd-code) (list 'make-record-constructor-descriptor t1898@foo-rtd t189a@parent-rcd-code t1899@protocol))) (t178c@get-protocol-code (lambda (t188b@clause*) (let ((t188d@t (t1782@get-clause 'protocol t188b@clause*))) (let ((t188f@ls/false (td84@syntax-dispatch t188d@t '(_ any)))) (if t188f@ls/false (apply (lambda (t1891@expr) t1891@expr) t188f@ls/false) (let ((t1893@t t188d@t)) (let ((t1895@ls/false (td84@syntax-dispatch t1893@t '_))) (if t1895@ls/false (apply (lambda () '#f) t1895@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1893@t))))))))) (t178e@get-fields (lambda (t1879@clause*) (let ((t187b@t t1879@clause*)) (let ((t187d@ls/false (td84@syntax-dispatch t187b@t '()))) (if t187d@ls/false (apply (lambda () '()) t187d@ls/false) (let ((t187f@t t187b@t)) (let ((t1881@ls/false (td84@syntax-dispatch t187f@t '((#(scheme-id fields) . each-any) . _)))) (if t1881@ls/false (apply (lambda (t1883@f*) t1883@f*) t1881@ls/false) (let ((t1885@t t187f@t)) (let ((t1887@ls/false (td84@syntax-dispatch t1885@t '(_ . any)))) (if t1887@ls/false (apply (lambda (t1889@rest) (t178e@get-fields t1889@rest)) t1887@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1885@t)))))))))))) (t1790@get-mutator-indices (lambda (t1861@fields) (let t1867@f ((t1863@fields t1861@fields) (t1864@i '0)) (let ((t1869@t t1863@fields)) (let ((t186b@ls/false (td84@syntax-dispatch t1869@t '()))) (if t186b@ls/false (apply (lambda () '()) t186b@ls/false) (let ((t186d@t t1869@t)) (let ((t186f@ls/false (td84@syntax-dispatch t186d@t '((#(scheme-id mutable) . _) . any)))) (if t186f@ls/false (apply (lambda (t1871@rest) (cons t1864@i (t1867@f t1871@rest (+ t1864@i '1)))) t186f@ls/false) (let ((t1873@t t186d@t)) (let ((t1875@ls/false (td84@syntax-dispatch t1873@t '(_ . any)))) (if t1875@ls/false (apply (lambda (t1877@rest) (t1867@f t1877@rest (+ t1864@i '1))) t1875@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1873@t))))))))))))) (t1792@get-mutators (lambda (t1837@foo t1838@fields) (letrec* ((t183c@gen-name (lambda (t185f@x) (te68@datum->syntax t1837@foo (string->symbol (string-append (symbol->string (te6a@syntax->datum t1837@foo)) '"-" (symbol->string (te6a@syntax->datum t185f@x)) '"-set!")))))) (let t183f@f ((t183d@fields t1838@fields)) (let ((t1841@t t183d@fields)) (let ((t1843@ls/false (td84@syntax-dispatch t1841@t '()))) (if t1843@ls/false (apply (lambda () '()) t1843@ls/false) (let ((t1845@t t1841@t)) (let ((t1847@ls/false (td84@syntax-dispatch t1845@t '((#(scheme-id mutable) any any any) . any)))) (if t1847@ls/false (apply (lambda (t1849@name t184a@accessor t184b@mutator t184c@rest) (cons t184b@mutator (t183f@f t184c@rest))) t1847@ls/false) (let ((t1851@t t1845@t)) (let ((t1853@ls/false (td84@syntax-dispatch t1851@t '((#(scheme-id mutable) any) . any)))) (if t1853@ls/false (apply (lambda (t1855@name t1856@rest) (cons (t183c@gen-name t1855@name) (t183f@f t1856@rest))) t1853@ls/false) (let ((t1859@t t1851@t)) (let ((t185b@ls/false (td84@syntax-dispatch t1859@t '(_ . any)))) (if t185b@ls/false (apply (lambda (t185d@rest) (t183f@f t185d@rest)) t185b@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1859@t))))))))))))))))) (t1794@get-accessors (lambda (t17f3@foo t17f4@fields) (letrec* ((t17f8@gen-name (lambda (t1835@x) (te68@datum->syntax t17f3@foo (string->symbol (string-append (symbol->string (te6a@syntax->datum t17f3@foo)) '"-" (symbol->string (te6a@syntax->datum t1835@x)))))))) (map (lambda (t17f9@field) (let ((t17fb@t t17f9@field)) (let ((t17fd@ls/false (td84@syntax-dispatch t17fb@t '(#(scheme-id mutable) any any any)))) (if (and t17fd@ls/false (apply (lambda (t17ff@name t1800@accessor t1801@mutator) (tb7d@id? t1800@accessor)) t17fd@ls/false)) (apply (lambda (t1805@name t1806@accessor t1807@mutator) t1806@accessor) t17fd@ls/false) (let ((t180b@t t17fb@t)) (let ((t180d@ls/false (td84@syntax-dispatch t180b@t '(#(scheme-id immutable) any any)))) (if (and t180d@ls/false (apply (lambda (t180f@name t1810@accessor) (tb7d@id? t1810@accessor)) t180d@ls/false)) (apply (lambda (t1813@name t1814@accessor) t1814@accessor) t180d@ls/false) (let ((t1817@t t180b@t)) (let ((t1819@ls/false (td84@syntax-dispatch t1817@t '(#(scheme-id mutable) any)))) (if (and t1819@ls/false (apply (lambda (t181b@name) (tb7d@id? t181b@name)) t1819@ls/false)) (apply (lambda (t181d@name) (t17f8@gen-name t181d@name)) t1819@ls/false) (let ((t181f@t t1817@t)) (let ((t1821@ls/false (td84@syntax-dispatch t181f@t '(#(scheme-id immutable) any)))) (if (and t1821@ls/false (apply (lambda (t1823@name) (tb7d@id? t1823@name)) t1821@ls/false)) (apply (lambda (t1825@name) (t17f8@gen-name t1825@name)) t1821@ls/false) (let ((t1827@t t181f@t)) (let ((t1829@ls/false (td84@syntax-dispatch t1827@t 'any))) (if (and t1829@ls/false (apply (lambda (t182b@name) (tb7d@id? t182b@name)) t1829@ls/false)) (apply (lambda (t182d@name) (t17f8@gen-name t182d@name)) t1829@ls/false) (let ((t182f@t t1827@t)) (let ((t1831@ls/false (td84@syntax-dispatch t182f@t 'any))) (if t1831@ls/false (apply (lambda (t1833@others) (te64@syntax-violation '#f '"invalid field spec" t17f9@field)) t1831@ls/false) (te64@syntax-violation '#f '"invalid syntax" t182f@t)))))))))))))))))))) t17f4@fields)))) (t1796@enumerate (lambda (t17eb@ls) (let t17f1@f ((t17ed@ls t17eb@ls) (t17ee@i '0)) (if (null? t17ed@ls) '() (cons t17ee@i (t17f1@f (cdr t17ed@ls) (+ t17ee@i '1))))))) (t1798@do-define-record (lambda (t17c3@namespec t17c4@clause*) (let ((t17c7@foo (t177c@get-record-name t17c3@namespec))) (let ((t17c9@foo-rtd (gensym))) (let ((t17cb@foo-rcd (gensym))) (let ((t17cd@protocol (gensym))) (let ((t17cf@make-foo (t177e@get-record-constructor-name t17c3@namespec))) (let ((t17d1@fields (t178e@get-fields t17c4@clause*))) (let ((t17d3@idx* (t1796@enumerate t17d1@fields))) (let ((t17d5@foo-x* (t1794@get-accessors t17c7@foo t17d1@fields))) (let ((t17d7@set-foo-x!* (t1792@get-mutators t17c7@foo t17d1@fields))) (let ((t17d9@set-foo-idx* (t1790@get-mutator-indices t17d1@fields))) (let ((t17db@foo? (t1780@get-record-predicate-name t17c3@namespec))) (let ((t17dd@foo-rtd-code (t1784@foo-rtd-code t17c7@foo t17c4@clause* (t1786@parent-rtd-code t17c4@clause*)))) (let ((t17df@foo-rcd-code (t178a@foo-rcd-code t17c4@clause* t17c9@foo-rtd t17cd@protocol (t1788@parent-rcd-code t17c4@clause*)))) (let ((t17e1@protocol-code (t178c@get-protocol-code t17c4@clause*))) (td3a@bless (cons 'begin (cons (list 'define t17c9@foo-rtd t17dd@foo-rtd-code) (cons (list 'define t17cd@protocol t17e1@protocol-code) (cons (list 'define t17cb@foo-rcd t17df@foo-rcd-code) (cons (list 'define-syntax t17c7@foo (list 'list ''$rtd (list 'syntax t17c9@foo-rtd) (list 'syntax t17cb@foo-rcd))) (cons (list 'define t17db@foo? (list 'record-predicate t17c9@foo-rtd)) (cons (list 'define t17cf@make-foo (list 'record-constructor t17cb@foo-rcd)) (append (map (lambda (t17e3@foo-x t17e4@idx) (list 'define t17e3@foo-x (list 'record-accessor t17c9@foo-rtd t17e4@idx))) t17d5@foo-x* t17d3@idx*) (map (lambda (t17e7@set-foo-x! t17e8@idx) (list 'define t17e7@set-foo-x! (list 'record-mutator t17c9@foo-rtd t17e8@idx))) t17d7@set-foo-x!* t17d9@set-foo-idx*)))))))))))))))))))))))))) (t179a@verify-clauses (lambda (t17a3@x t17a4@cls*) (letrec* ((t17a8@valid-kwds (map td3a@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (t17aa@free-id-member? (lambda (t17bf@x t17c0@ls) (and (pair? t17c0@ls) (or (tb83@free-id=? t17bf@x (car t17c0@ls)) (t17aa@free-id-member? t17bf@x (cdr t17c0@ls))))))) (let t17af@f ((t17ab@cls* t17a4@cls*) (t17ac@seen* '())) (if (not (null? t17ab@cls*)) (let ((t17b1@t (car t17ab@cls*))) (let ((t17b3@ls/false (td84@syntax-dispatch t17b1@t '(any . any)))) (if t17b3@ls/false (apply (lambda (t17b5@kwd t17b6@rest) (if (or (not (tb7d@id? t17b5@kwd)) (not (t17aa@free-id-member? t17b5@kwd t17a8@valid-kwds))) (te64@syntax-violation '#f '"not a valid define-record-type keyword" t17b5@kwd) (if (tb89@bound-id-member? t17b5@kwd t17ac@seen*) (te64@syntax-violation '#f '"duplicate use of keyword " t17a3@x t17b5@kwd) (t17af@f (cdr t17ab@cls*) (cons t17b5@kwd t17ac@seen*))))) t17b3@ls/false) (let ((t17b9@t t17b1@t)) (let ((t17bb@ls/false (td84@syntax-dispatch t17b9@t 'any))) (if t17bb@ls/false (apply (lambda (t17bd@cls) (te64@syntax-violation '#f '"malformed define-record-type clause" t17bd@cls)) t17bb@ls/false) (te64@syntax-violation '#f '"invalid syntax" t17b9@t))))))) (void))))))) (let ((t179b@t t1777@x)) (let ((t179d@ls/false (td84@syntax-dispatch t179b@t '(_ any . each-any)))) (if t179d@ls/false (apply (lambda (t179f@namespec t17a0@clause*) (begin (t179a@verify-clauses t1777@x t17a0@clause*) (t1798@do-define-record t179f@namespec t17a0@clause*))) t179d@ls/false) (te64@syntax-violation '#f '"invalid syntax" t179b@t))))))) (set! t288a@td78@define-record-type-macro td78@define-record-type-macro) (set! td7a@define-condition-type-macro (lambda (t1973@x) (letrec* ((t1976@mkname (lambda (t19a3@name t19a4@suffix) (te68@datum->syntax t19a3@name (string->symbol (string-append (symbol->string (te6a@syntax->datum t19a3@name)) t19a4@suffix)))))) (let ((t1977@t t1973@x)) (let ((t1979@ls/false (td84@syntax-dispatch t1977@t '(any any any any any . #(each (any any)))))) (if (and t1979@ls/false (apply (lambda (t197b@ctxt t197c@name t197d@super t197e@constructor t197f@predicate t1980@field* t1981@accessor*) (and (tb7d@id? t197c@name) (tb7d@id? t197d@super) (tb7d@id? t197e@constructor) (tb7d@id? t197f@predicate) (for-all tb7d@id? t1980@field*) (for-all tb7d@id? t1981@accessor*))) t1979@ls/false)) (apply (lambda (t1989@ctxt t198a@name t198b@super t198c@constructor t198d@predicate t198e@field* t198f@accessor*) (let ((t1997@aux-accessor* (map (lambda (t1999@x) (gensym)) t198f@accessor*))) (td3a@bless (cons 'begin (cons (cons 'define-record-type (cons (list t198a@name t198c@constructor (gensym)) (cons (list 'parent t198b@super) (cons (cons 'fields (map (lambda (t199b@field t199c@aux) (list 'immutable t199b@field t199c@aux)) t198e@field* t1997@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define t198d@predicate (list 'condition-predicate (list 'record-type-descriptor t198a@name))) (map (lambda (t199f@accessor t19a0@aux) (list 'define t199f@accessor (list 'condition-accessor (list 'record-type-descriptor t198a@name) t19a0@aux))) t198f@accessor* t1997@aux-accessor*))))))) t1979@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1977@t))))))) (set! t288b@td7a@define-condition-type-macro td7a@define-condition-type-macro) (set! td7c@incorrect-usage-macro (lambda (t19a7@e) (te64@syntax-violation '#f '"incorrect usage of auxiliary keyword" t19a7@e))) (set! t288c@td7c@incorrect-usage-macro td7c@incorrect-usage-macro) (set! td7e@parameterize-macro (lambda (t19a9@e) (let ((t19ab@t t19a9@e)) (let ((t19ad@ls/false (td84@syntax-dispatch t19ab@t '(_ () any . each-any)))) (if t19ad@ls/false (apply (lambda (t19af@b t19b0@b*) (td3a@bless (cons 'let (cons '() (cons t19af@b t19b0@b*))))) t19ad@ls/false) (let ((t19b3@t t19ab@t)) (let ((t19b5@ls/false (td84@syntax-dispatch t19b3@t '(_ #(each (any any)) any . each-any)))) (if t19b5@ls/false (apply (lambda (t19b7@olhs* t19b8@orhs* t19b9@b t19ba@b*) (let ((t19bf@lhs* (te52@generate-temporaries t19b7@olhs*)) (t19c0@rhs* (te52@generate-temporaries t19b8@orhs*))) (td3a@bless (cons (list 'lambda (append t19bf@lhs* t19c0@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (t19c3@lhs t19c4@rhs) (list 'let (list (list 't (list t19c3@lhs))) (list t19c3@lhs t19c4@rhs) (cons 'set! (cons t19c4@rhs '(t))))) t19bf@lhs* t19c0@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons t19b9@b t19ba@b*))) '(swap)))))) (append t19b7@olhs* t19b8@orhs*))))) t19b5@ls/false) (te64@syntax-violation '#f '"invalid syntax" t19b3@t))))))))) (set! t288d@td7e@parameterize-macro td7e@parameterize-macro) (set! td80@foreign-call-transformer (lambda (t19c7@e t19c8@r t19c9@mr) (let ((t19cd@t t19c7@e)) (let ((t19cf@ls/false (td84@syntax-dispatch t19cd@t '(_ any . each-any)))) (if t19cf@ls/false (apply (lambda (t19d1@name t19d2@arg*) (cons 'foreign-call (cons (tda6@chi-expr t19d1@name t19c8@r t19c9@mr) (tda2@chi-expr* t19d2@arg* t19c8@r t19c9@mr)))) t19cf@ls/false) (te64@syntax-violation '#f '"invalid syntax" t19cd@t)))))) (set! t288e@td80@foreign-call-transformer td80@foreign-call-transformer) (set! td82@convert-pattern (lambda (t19d5@pattern t19d6@keys) (letrec* ((t19da@cvt* (lambda (t1a79@p* t1a7a@n t1a7b@ids) (if (null? t1a79@p*) (values '() t1a7b@ids) (call-with-values (lambda () (t19da@cvt* (cdr t1a79@p*) t1a7a@n t1a7b@ids)) (lambda (t1a83@t1a80 t1a84@t1a82) (let ((t1a87@ids t1a84@t1a82) (t1a88@y t1a83@t1a80)) (call-with-values (lambda () (t19dc@cvt (car t1a79@p*) t1a7a@n t1a87@ids)) (lambda (t1a8f@t1a8c t1a90@t1a8e) (let ((t1a93@ids t1a90@t1a8e) (t1a94@x t1a8f@t1a8c)) (values (cons t1a94@x t1a88@y) t1a93@ids)))))))))) (t19dc@cvt (lambda (t19dd@p t19de@n t19df@ids) (let ((t19e3@t t19dd@p)) (let ((t19e5@ls/false (td84@syntax-dispatch t19e3@t 'any))) (if (and t19e5@ls/false (apply (lambda (t19e7@id) (tb7d@id? t19e7@id)) t19e5@ls/false)) (apply (lambda (t19e9@id) (if (tb89@bound-id-member? t19dd@p t19d6@keys) (values (vector 'free-id t19dd@p) t19df@ids) (if (tb83@free-id=? t19dd@p (td0c@scheme-stx '_)) (values '_ t19df@ids) (values 'any (cons (cons t19dd@p t19de@n) t19df@ids))))) t19e5@ls/false) (let ((t19eb@t t19e3@t)) (let ((t19ed@ls/false (td84@syntax-dispatch t19eb@t '(any any)))) (if (and t19ed@ls/false (apply (lambda (t19ef@p t19f0@dots) (td86@ellipsis? t19f0@dots)) t19ed@ls/false)) (apply (lambda (t19f3@p t19f4@dots) (call-with-values (lambda () (t19dc@cvt t19f3@p (+ t19de@n '1) t19df@ids)) (lambda (t19fb@t19f8 t19fc@t19fa) (let ((t19ff@ids t19fc@t19fa) (t1a00@p t19fb@t19f8)) (values (if (eq? t1a00@p 'any) 'each-any (vector 'each t1a00@p)) t19ff@ids))))) t19ed@ls/false) (let ((t1a03@t t19eb@t)) (let ((t1a05@ls/false (td84@syntax-dispatch t1a03@t '(any any . #(each+ any () any))))) (if (and t1a05@ls/false (apply (lambda (t1a07@x t1a08@dots t1a09@ys t1a0a@z) (td86@ellipsis? t1a08@dots)) t1a05@ls/false)) (apply (lambda (t1a0f@x t1a10@dots t1a11@ys t1a12@z) (call-with-values (lambda () (t19dc@cvt t1a12@z t19de@n t19df@ids)) (lambda (t1a1b@t1a18 t1a1c@t1a1a) (let ((t1a1f@ids t1a1c@t1a1a) (t1a20@z t1a1b@t1a18)) (call-with-values (lambda () (t19da@cvt* t1a11@ys t19de@n t1a1f@ids)) (lambda (t1a27@t1a24 t1a28@t1a26) (let ((t1a2b@ids t1a28@t1a26) (t1a2c@ys t1a27@t1a24)) (call-with-values (lambda () (t19dc@cvt t1a0f@x (+ t19de@n '1) t1a2b@ids)) (lambda (t1a33@t1a30 t1a34@t1a32) (let ((t1a37@ids t1a34@t1a32) (t1a38@x t1a33@t1a30)) (values (vector 'each+ t1a38@x (reverse t1a2c@ys) t1a20@z) t1a37@ids))))))))))) t1a05@ls/false) (let ((t1a3b@t t1a03@t)) (let ((t1a3d@ls/false (td84@syntax-dispatch t1a3b@t '(any . any)))) (if t1a3d@ls/false (apply (lambda (t1a3f@x t1a40@y) (call-with-values (lambda () (t19dc@cvt t1a40@y t19de@n t19df@ids)) (lambda (t1a47@t1a44 t1a48@t1a46) (let ((t1a4b@ids t1a48@t1a46) (t1a4c@y t1a47@t1a44)) (call-with-values (lambda () (t19dc@cvt t1a3f@x t19de@n t1a4b@ids)) (lambda (t1a53@t1a50 t1a54@t1a52) (let ((t1a57@ids t1a54@t1a52) (t1a58@x t1a53@t1a50)) (values (cons t1a58@x t1a4c@y) t1a57@ids)))))))) t1a3d@ls/false) (let ((t1a5b@t t1a3b@t)) (let ((t1a5d@ls/false (td84@syntax-dispatch t1a5b@t '()))) (if t1a5d@ls/false (apply (lambda () (values '() t19df@ids)) t1a5d@ls/false) (let ((t1a5f@t t1a5b@t)) (let ((t1a61@ls/false (td84@syntax-dispatch t1a5f@t '#(vector each-any)))) (if (and t1a61@ls/false (apply (lambda (t1a63@p) (not (tb49@stx? t1a63@p))) t1a61@ls/false)) (apply (lambda (t1a65@p) (call-with-values (lambda () (t19dc@cvt t1a65@p t19de@n t19df@ids)) (lambda (t1a6b@t1a68 t1a6c@t1a6a) (let ((t1a6f@ids t1a6c@t1a6a) (t1a70@p t1a6b@t1a68)) (values (vector 'vector t1a70@p) t1a6f@ids))))) t1a61@ls/false) (let ((t1a73@t t1a5f@t)) (let ((t1a75@ls/false (td84@syntax-dispatch t1a73@t 'any))) (if t1a75@ls/false (apply (lambda (t1a77@datum) (values (vector 'atom (tb91@stx->datum t1a77@datum)) t19df@ids)) t1a75@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1a73@t))))))))))))))))))))))))) (t19dc@cvt t19d5@pattern '0 '())))) (set! t288f@td82@convert-pattern td82@convert-pattern) (set! td84@syntax-dispatch (letrec* ((t1a98@stx^ (lambda (t1b73@e t1b74@m* t1b75@s* t1b76@ae*) (if (and (null? t1b74@m*) (null? t1b75@s*) (null? t1b76@ae*)) t1b73@e (tb65@mkstx t1b73@e t1b74@m* t1b75@s* t1b76@ae*)))) (t1a9a@match-each (lambda (t1b53@e t1b54@p t1b55@m* t1b56@s* t1b57@ae*) (if (pair? t1b53@e) (let ((t1b5d@first (t1aa6@match (car t1b53@e) t1b54@p t1b55@m* t1b56@s* t1b57@ae* '()))) (and t1b5d@first (let ((t1b5f@rest (t1a9a@match-each (cdr t1b53@e) t1b54@p t1b55@m* t1b56@s* t1b57@ae*))) (and t1b5f@rest (cons t1b5d@first t1b5f@rest))))) (if (null? t1b53@e) '() (if (tb49@stx? t1b53@e) (and (not (tb03@top-marked? t1b55@m*)) (call-with-values (lambda () (join-wraps t1b55@m* t1b56@s* t1b57@ae* t1b53@e)) (lambda (t1b67@t1b62 t1b68@t1b64 t1b69@t1b66) (let ((t1b6d@ae* t1b69@t1b66) (t1b6e@s* t1b68@t1b64) (t1b6f@m* t1b67@t1b62)) (t1a9a@match-each (tb4b@stx-expr t1b53@e) t1b54@p t1b6f@m* t1b6e@s* t1b6d@ae*))))) (if (t6c1@t593@annotation? t1b53@e) (t1a9a@match-each (t6c3@t597@annotation-expression t1b53@e) t1b54@p t1b55@m* t1b56@s* t1b57@ae*) '#f)))))) (t1a9c@match-each+ (lambda (t1b13@e t1b14@x-pat t1b15@y-pat t1b16@z-pat t1b17@m* t1b18@s* t1b19@ae* t1b1a@r) (let t1b2b@f ((t1b23@e t1b13@e) (t1b24@m* t1b17@m*) (t1b25@s* t1b18@s*) (t1b26@ae* t1b19@ae*)) (if (pair? t1b23@e) (call-with-values (lambda () (t1b2b@f (cdr t1b23@e) t1b24@m* t1b25@s* t1b26@ae*)) (lambda (t1b33@t1b2e t1b34@t1b30 t1b35@t1b32) (let ((t1b39@r t1b35@t1b32) (t1b3a@y-pat t1b34@t1b30) (t1b3b@xr* t1b33@t1b2e)) (if t1b39@r (if (null? t1b3a@y-pat) (let ((t1b3f@xr (t1aa6@match (car t1b23@e) t1b14@x-pat t1b24@m* t1b25@s* t1b26@ae* '()))) (if t1b3f@xr (values (cons t1b3f@xr t1b3b@xr*) t1b3a@y-pat t1b39@r) (values '#f '#f '#f))) (values '() (cdr t1b3a@y-pat) (t1aa6@match (car t1b23@e) (car t1b3a@y-pat) t1b24@m* t1b25@s* t1b26@ae* t1b39@r))) (values '#f '#f '#f))))) (if (tb49@stx? t1b23@e) (if (tb03@top-marked? t1b24@m*) (values '() t1b15@y-pat (t1aa6@match t1b23@e t1b16@z-pat t1b24@m* t1b25@s* t1b26@ae* t1b1a@r)) (call-with-values (lambda () (join-wraps t1b24@m* t1b25@s* t1b26@ae* t1b23@e)) (lambda (t1b47@t1b42 t1b48@t1b44 t1b49@t1b46) (let ((t1b4d@ae* t1b49@t1b46) (t1b4e@s* t1b48@t1b44) (t1b4f@m* t1b47@t1b42)) (t1b2b@f (tb4b@stx-expr t1b23@e) t1b4f@m* t1b4e@s* t1b4d@ae*))))) (if (t6c1@t593@annotation? t1b23@e) (t1b2b@f (t6c3@t597@annotation-expression t1b23@e) t1b24@m* t1b25@s* t1b26@ae*) (values '() t1b15@y-pat (t1aa6@match t1b23@e t1b16@z-pat t1b24@m* t1b25@s* t1b26@ae* t1b1a@r)))))))) (t1a9e@match-each-any (lambda (t1af7@e t1af8@m* t1af9@s* t1afa@ae*) (if (pair? t1af7@e) (let ((t1aff@l (t1a9e@match-each-any (cdr t1af7@e) t1af8@m* t1af9@s* t1afa@ae*))) (and t1aff@l (cons (t1a98@stx^ (car t1af7@e) t1af8@m* t1af9@s* t1afa@ae*) t1aff@l))) (if (null? t1af7@e) '() (if (tb49@stx? t1af7@e) (and (not (tb03@top-marked? t1af8@m*)) (call-with-values (lambda () (join-wraps t1af8@m* t1af9@s* t1afa@ae* t1af7@e)) (lambda (t1b07@t1b02 t1b08@t1b04 t1b09@t1b06) (let ((t1b0d@ae* t1b09@t1b06) (t1b0e@s* t1b08@t1b04) (t1b0f@m* t1b07@t1b02)) (t1a9e@match-each-any (tb4b@stx-expr t1af7@e) t1b0f@m* t1b0e@s* t1b0d@ae*))))) (if (t6c1@t593@annotation? t1af7@e) (t1a9e@match-each-any (t6c3@t597@annotation-expression t1af7@e) t1af8@m* t1af9@s* t1afa@ae*) '#f)))))) (t1aa0@match-empty (lambda (t1af1@p t1af2@r) (if (null? t1af1@p) t1af2@r (if (eq? t1af1@p '_) t1af2@r (if (eq? t1af1@p 'any) (cons '() t1af2@r) (if (pair? t1af1@p) (t1aa0@match-empty (car t1af1@p) (t1aa0@match-empty (cdr t1af1@p) t1af2@r)) (if (eq? t1af1@p 'each-any) (cons '() t1af2@r) (let ((t1af5@t (vector-ref t1af1@p '0))) (if (memv t1af5@t '(each)) (t1aa0@match-empty (vector-ref t1af1@p '1) t1af2@r) (if (memv t1af5@t '(each+)) (t1aa0@match-empty (vector-ref t1af1@p '1) (t1aa0@match-empty (reverse (vector-ref t1af1@p '2)) (t1aa0@match-empty (vector-ref t1af1@p '3) t1af2@r))) (if (memv t1af5@t '(free-id atom)) t1af2@r (if (memv t1af5@t '(scheme-id atom)) t1af2@r (if (memv t1af5@t '(vector)) (t1aa0@match-empty (vector-ref t1af1@p '1) t1af2@r) (assertion-violation 'syntax-dispatch '"invalid pattern" t1af1@p)))))))))))))) (t1aa2@combine (lambda (t1aed@r* t1aee@r) (if (null? (car t1aed@r*)) t1aee@r (cons (map car t1aed@r*) (t1aa2@combine (map cdr t1aed@r*) t1aee@r))))) (t1aa4@match* (lambda (t1ac9@e t1aca@p t1acb@m* t1acc@s* t1acd@ae* t1ace@r) (if (null? t1aca@p) (and (null? t1ac9@e) t1ace@r) (if (pair? t1aca@p) (and (pair? t1ac9@e) (t1aa6@match (car t1ac9@e) (car t1aca@p) t1acb@m* t1acc@s* t1acd@ae* (t1aa6@match (cdr t1ac9@e) (cdr t1aca@p) t1acb@m* t1acc@s* t1acd@ae* t1ace@r))) (if (eq? t1aca@p 'each-any) (let ((t1ad5@l (t1a9e@match-each-any t1ac9@e t1acb@m* t1acc@s* t1acd@ae*))) (and t1ad5@l (cons t1ad5@l t1ace@r))) (let ((t1ad7@t (vector-ref t1aca@p '0))) (if (memv t1ad7@t '(each)) (if (null? t1ac9@e) (t1aa0@match-empty (vector-ref t1aca@p '1) t1ace@r) (let ((t1ad9@r* (t1a9a@match-each t1ac9@e (vector-ref t1aca@p '1) t1acb@m* t1acc@s* t1acd@ae*))) (and t1ad9@r* (t1aa2@combine t1ad9@r* t1ace@r)))) (if (memv t1ad7@t '(free-id)) (and (symbol? t1ac9@e) (tb03@top-marked? t1acb@m*) (tb83@free-id=? (t1a98@stx^ t1ac9@e t1acb@m* t1acc@s* t1acd@ae*) (vector-ref t1aca@p '1)) t1ace@r) (if (memv t1ad7@t '(scheme-id)) (and (symbol? t1ac9@e) (tb03@top-marked? t1acb@m*) (tb83@free-id=? (t1a98@stx^ t1ac9@e t1acb@m* t1acc@s* t1acd@ae*) (td0c@scheme-stx (vector-ref t1aca@p '1))) t1ace@r) (if (memv t1ad7@t '(each+)) (call-with-values (lambda () (t1a9c@match-each+ t1ac9@e (vector-ref t1aca@p '1) (vector-ref t1aca@p '2) (vector-ref t1aca@p '3) t1acb@m* t1acc@s* t1acd@ae* t1ace@r)) (lambda (t1ae1@t1adc t1ae2@t1ade t1ae3@t1ae0) (let ((t1ae7@r t1ae3@t1ae0) (t1ae8@y-pat t1ae2@t1ade) (t1ae9@xr* t1ae1@t1adc)) (and t1ae7@r (null? t1ae8@y-pat) (if (null? t1ae9@xr*) (t1aa0@match-empty (vector-ref t1aca@p '1) t1ae7@r) (t1aa2@combine t1ae9@xr* t1ae7@r)))))) (if (memv t1ad7@t '(atom)) (and (fast-equal? (vector-ref t1aca@p '1) (tb8f@strip t1ac9@e t1acb@m*)) t1ace@r) (if (memv t1ad7@t '(vector)) (and (vector? t1ac9@e) (t1aa6@match (vector->list t1ac9@e) (vector-ref t1aca@p '1) t1acb@m* t1acc@s* t1acd@ae* t1ace@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" t1aca@p))))))))))))) (t1aa6@match (lambda (t1aab@e t1aac@p t1aad@m* t1aae@s* t1aaf@ae* t1ab0@r) (if (not t1ab0@r) '#f (if (eq? t1aac@p '_) t1ab0@r (if (eq? t1aac@p 'any) (cons (t1a98@stx^ t1aab@e t1aad@m* t1aae@s* t1aaf@ae*) t1ab0@r) (if (tb49@stx? t1aab@e) (and (not (tb03@top-marked? t1aad@m*)) (call-with-values (lambda () (join-wraps t1aad@m* t1aae@s* t1aaf@ae* t1aab@e)) (lambda (t1abd@t1ab8 t1abe@t1aba t1abf@t1abc) (let ((t1ac3@ae* t1abf@t1abc) (t1ac4@s* t1abe@t1aba) (t1ac5@m* t1abd@t1ab8)) (t1aa6@match (tb4b@stx-expr t1aab@e) t1aac@p t1ac5@m* t1ac4@s* t1ac3@ae* t1ab0@r))))) (if (t6c1@t593@annotation? t1aab@e) (t1aa6@match (t6c3@t597@annotation-expression t1aab@e) t1aac@p t1aad@m* t1aae@s* t1aaf@ae* t1ab0@r) (t1aa4@match* t1aab@e t1aac@p t1aad@m* t1aae@s* t1aaf@ae* t1ab0@r))))))))) (lambda (t1aa7@e t1aa8@p) (t1aa6@match t1aa7@e t1aa8@p '() '() '() '())))) (set! t2890@td84@syntax-dispatch td84@syntax-dispatch) (set! td86@ellipsis? (lambda (t1b7b@x) (and (tb7d@id? t1b7b@x) (tb83@free-id=? t1b7b@x (td0c@scheme-stx '...))))) (set! t2891@td86@ellipsis? td86@ellipsis?) (set! td88@underscore? (lambda (t1b7d@x) (and (tb7d@id? t1b7d@x) (tb83@free-id=? t1b7d@x (td0c@scheme-stx '_))))) (set! t2892@td88@underscore? td88@underscore?) (set! td8a@verify-literals (lambda (t1b7f@lits t1b80@expr) (for-each (lambda (t1b83@x) (if (or (not (tb7d@id? t1b83@x)) (td86@ellipsis? t1b83@x) (td88@underscore? t1b83@x)) (te64@syntax-violation '#f '"invalid literal" t1b80@expr t1b83@x) (void))) t1b7f@lits))) (set! t2893@td8a@verify-literals td8a@verify-literals) (set! td8c@syntax-case-transformer (letrec* ((t1b86@build-dispatch-call (lambda (t1bf7@pvars t1bf8@expr t1bf9@y t1bfa@r t1bfb@mr) (let ((t1c01@ids (map car t1bf7@pvars)) (t1c02@levels (map cdr t1bf7@pvars))) (let ((t1c05@labels (map tb09@gen-label t1c01@ids)) (t1c06@new-vars (map tb05@gen-lexical t1c01@ids))) (let ((t1c09@body (tda6@chi-expr (tb67@add-subst (tb3d@make-full-rib t1c01@ids t1c05@labels) t1bf8@expr) (append (map (lambda (t1c0b@label t1c0c@var t1c0d@level) (cons t1c0b@label (tb97@make-binding 'syntax (cons t1c0c@var t1c0d@level)))) t1c05@labels t1c06@new-vars (map cdr t1bf7@pvars)) t1bfa@r) t1bfb@mr))) (list '(primitive apply) (tae0@ta12@build-lambda '#f t1c06@new-vars t1c09@body) t1bf9@y)))))) (t1b88@invalid-ids-error (lambda (t1beb@id* t1bec@e t1bed@class) (let t1bf5@find ((t1bf1@id* t1beb@id*) (t1bf2@ok* '())) (if (null? t1bf1@id*) (te64@syntax-violation '#f '"invalid syntax" t1bec@e) (if (tb7d@id? (car t1bf1@id*)) (if (tb89@bound-id-member? (car t1bf1@id*) t1bf2@ok*) (te60@syntax-error (car t1bf1@id*) '"duplicate " t1bed@class) (t1bf5@find (cdr t1bf1@id*) (cons (car t1bf1@id*) t1bf2@ok*))) (te60@syntax-error (car t1bf1@id*) '"invalid " t1bed@class)))))) (t1b8a@gen-clause (lambda (t1bc3@x t1bc4@keys t1bc5@clauses t1bc6@r t1bc7@mr t1bc8@pat t1bc9@fender t1bca@expr) (call-with-values (lambda () (td82@convert-pattern t1bc8@pat t1bc4@keys)) (lambda (t1bd7@t1bd4 t1bd8@t1bd6) (let ((t1bdb@pvars t1bd8@t1bd6) (t1bdc@p t1bd7@t1bd4)) (if (not (tb87@distinct-bound-ids? (map car t1bdb@pvars))) (t1b88@invalid-ids-error (map car t1bdb@pvars) t1bc8@pat '"pattern variable") (if (not (for-all (lambda (t1bdf@x) (not (td86@ellipsis? (car t1bdf@x)))) t1bdb@pvars)) (te64@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" t1bc8@pat) (let ((t1be1@y (tb05@gen-lexical 'tmp))) (let ((t1be3@test (if (eq? t1bc9@fender '#t) t1be1@y (let ((t1be5@call (t1b86@build-dispatch-call t1bdb@pvars t1bc9@fender t1be1@y t1bc6@r t1bc7@mr))) (list 'if t1be1@y t1be5@call (list 'quote '#f)))))) (let ((t1be7@conseq (t1b86@build-dispatch-call t1bdb@pvars t1bca@expr t1be1@y t1bc6@r t1bc7@mr))) (let ((t1be9@altern (t1b8c@gen-syntax-case t1bc3@x t1bc4@keys t1bc5@clauses t1bc6@r t1bc7@mr))) (list (tae0@ta12@build-lambda '#f (list t1be1@y) (list 'if t1be3@test t1be7@conseq t1be9@altern)) (list '(primitive syntax-dispatch) t1bc3@x (list 'quote t1bdc@p)))))))))))))) (t1b8c@gen-syntax-case (lambda (t1ba1@x t1ba2@keys t1ba3@clauses t1ba4@r t1ba5@mr) (if (null? t1ba3@clauses) (list '(primitive syntax-error) t1ba1@x) (let ((t1bab@t (car t1ba3@clauses))) (let ((t1bad@ls/false (td84@syntax-dispatch t1bab@t '(any any)))) (if t1bad@ls/false (apply (lambda (t1baf@pat t1bb0@expr) (if (and (tb7d@id? t1baf@pat) (not (tb89@bound-id-member? t1baf@pat t1ba2@keys)) (not (td86@ellipsis? t1baf@pat))) (if (tb83@free-id=? t1baf@pat (td0c@scheme-stx '_)) (tda6@chi-expr t1bb0@expr t1ba4@r t1ba5@mr) (let ((t1bb3@lab (tb09@gen-label t1baf@pat)) (t1bb4@lex (tb05@gen-lexical t1baf@pat))) (let ((t1bb7@body (tda6@chi-expr (tb67@add-subst (tb3d@make-full-rib (list t1baf@pat) (list t1bb3@lab)) t1bb0@expr) (cons (cons t1bb3@lab (tb97@make-binding 'syntax (cons t1bb4@lex '0))) t1ba4@r) t1ba5@mr))) (list (tae0@ta12@build-lambda '#f (list t1bb4@lex) t1bb7@body) t1ba1@x)))) (t1b8a@gen-clause t1ba1@x t1ba2@keys (cdr t1ba3@clauses) t1ba4@r t1ba5@mr t1baf@pat '#t t1bb0@expr))) t1bad@ls/false) (let ((t1bb9@t t1bab@t)) (let ((t1bbb@ls/false (td84@syntax-dispatch t1bb9@t '(any any any)))) (if t1bbb@ls/false (apply (lambda (t1bbd@pat t1bbe@fender t1bbf@expr) (t1b8a@gen-clause t1ba1@x t1ba2@keys (cdr t1ba3@clauses) t1ba4@r t1ba5@mr t1bbd@pat t1bbe@fender t1bbf@expr)) t1bbb@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1bb9@t))))))))))) (lambda (t1b8d@e t1b8e@r t1b8f@mr) (let ((t1b93@t t1b8d@e)) (let ((t1b95@ls/false (td84@syntax-dispatch t1b93@t '(_ any each-any . each-any)))) (if t1b95@ls/false (apply (lambda (t1b97@expr t1b98@keys t1b99@clauses) (begin (td8a@verify-literals t1b98@keys t1b8d@e) (let ((t1b9d@x (tb05@gen-lexical 'tmp))) (let ((t1b9f@body (t1b8c@gen-syntax-case t1b9d@x t1b98@keys t1b99@clauses t1b8e@r t1b8f@mr))) (list (tae0@ta12@build-lambda '#f (list t1b9d@x) t1b9f@body) (tda6@chi-expr t1b97@expr t1b8e@r t1b8f@mr)))))) t1b95@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1b93@t))))))) (set! t2894@td8c@syntax-case-transformer td8c@syntax-case-transformer) (set! td8e@ellipsis-map (lambda (t1c11@proc t1c12@ls . t1c15@ls*) (letrec* ((t1c18@who '...)) (begin (if (not (list? t1c12@ls)) (assertion-violation t1c18@who '"not a list" t1c12@ls) (void)) (if (not (null? t1c15@ls*)) (let ((t1c19@n (length t1c12@ls))) (for-each (lambda (t1c1b@x) (begin (if (not (list? t1c1b@x)) (assertion-violation t1c18@who '"not a list" t1c1b@x) (void)) (if (not (= (length t1c1b@x) t1c19@n)) (assertion-violation t1c18@who '"length mismatch" t1c12@ls t1c1b@x) (void)))) t1c15@ls*)) (void)) (apply map t1c11@proc t1c12@ls t1c15@ls*))))) (set! t2895@td8e@ellipsis-map td8e@ellipsis-map) (set! td90@syntax-transformer (letrec* ((t1c1e@gen-syntax (lambda (t1c95@src t1c96@e t1c97@r t1c98@maps t1c99@ellipsis? t1c9a@vec?) (let ((t1ca1@t t1c96@e)) (let ((t1ca3@ls/false (td84@syntax-dispatch t1ca1@t 'any))) (if (and t1ca3@ls/false (apply (lambda (t1ca5@dots) (t1c99@ellipsis? t1ca5@dots)) t1ca3@ls/false)) (apply (lambda (t1ca7@dots) (te64@syntax-violation '#f '"misplaced ellipsis in syntax form" t1c95@src)) t1ca3@ls/false) (let ((t1ca9@t t1ca1@t)) (let ((t1cab@ls/false (td84@syntax-dispatch t1ca9@t 'any))) (if (and t1cab@ls/false (apply (lambda (t1cad@id) (tb7d@id? t1cad@id)) t1cab@ls/false)) (apply (lambda (t1caf@id) (let ((t1cb1@label (tb93@id->label t1c96@e))) (let ((t1cb3@b (tb95@label->binding t1cb1@label t1c97@r))) (if (eq? (tb99@binding-type t1cb3@b) 'syntax) (call-with-values (lambda () (let ((t1cb9@var.lev (tb9b@binding-value t1cb3@b))) (t1c20@gen-ref t1c95@src (car t1cb9@var.lev) (cdr t1cb9@var.lev) t1c98@maps))) (lambda (t1cbb@t1cb6 t1cbc@t1cb8) (let ((t1cbf@maps t1cbc@t1cb8) (t1cc0@var t1cbb@t1cb6)) (values (list 'ref t1cc0@var) t1cbf@maps)))) (values (list 'quote t1c96@e) t1c98@maps))))) t1cab@ls/false) (let ((t1cc3@t t1ca9@t)) (let ((t1cc5@ls/false (td84@syntax-dispatch t1cc3@t '(any any)))) (if (and t1cc5@ls/false (apply (lambda (t1cc7@dots t1cc8@e) (t1c99@ellipsis? t1cc7@dots)) t1cc5@ls/false)) (apply (lambda (t1ccb@dots t1ccc@e) (if t1c9a@vec? (te64@syntax-violation '#f '"misplaced ellipsis in syntax form" t1c95@src) (t1c1e@gen-syntax t1c95@src t1ccc@e t1c97@r t1c98@maps (lambda (t1ccf@x) '#f) '#f))) t1cc5@ls/false) (let ((t1cd1@t t1cc3@t)) (let ((t1cd3@ls/false (td84@syntax-dispatch t1cd1@t '(any any . any)))) (if (and t1cd3@ls/false (apply (lambda (t1cd5@x t1cd6@dots t1cd7@y) (t1c99@ellipsis? t1cd6@dots)) t1cd3@ls/false)) (apply (lambda (t1cdb@x t1cdc@dots t1cdd@y) (let t1cf3@f ((t1ce1@y t1cdd@y) (t1ce2@k (lambda (t1ce5@maps) (call-with-values (lambda () (t1c1e@gen-syntax t1c95@src t1cdb@x t1c97@r (cons '() t1ce5@maps) t1c99@ellipsis? '#f)) (lambda (t1ceb@t1ce8 t1cec@t1cea) (let ((t1cef@maps t1cec@t1cea) (t1cf0@x t1ceb@t1ce8)) (if (null? (car t1cef@maps)) (te64@syntax-violation '#f '"extra ellipsis in syntax form" t1c95@src) (values (t1c26@gen-map t1cf0@x (car t1cef@maps)) (cdr t1cef@maps))))))))) (let ((t1cf5@t t1ce1@y)) (let ((t1cf7@ls/false (td84@syntax-dispatch t1cf5@t '()))) (if t1cf7@ls/false (apply (lambda () (t1ce2@k t1c98@maps)) t1cf7@ls/false) (let ((t1cf9@t t1cf5@t)) (let ((t1cfb@ls/false (td84@syntax-dispatch t1cf9@t '(any . any)))) (if (and t1cfb@ls/false (apply (lambda (t1cfd@dots t1cfe@y) (t1c99@ellipsis? t1cfd@dots)) t1cfb@ls/false)) (apply (lambda (t1d01@dots t1d02@y) (t1cf3@f t1d02@y (lambda (t1d05@maps) (call-with-values (lambda () (t1ce2@k (cons '() t1d05@maps))) (lambda (t1d0b@t1d08 t1d0c@t1d0a) (let ((t1d0f@maps t1d0c@t1d0a) (t1d10@x t1d0b@t1d08)) (if (null? (car t1d0f@maps)) (te64@syntax-violation '#f '"extra ellipsis in syntax form" t1c95@src) (values (t1c24@gen-mappend t1d10@x (car t1d0f@maps)) (cdr t1d0f@maps))))))))) t1cfb@ls/false) (let ((t1d13@t t1cf9@t)) (let ((t1d15@ls/false (td84@syntax-dispatch t1d13@t '_))) (if t1d15@ls/false (apply (lambda () (call-with-values (lambda () (t1c1e@gen-syntax t1c95@src t1ce1@y t1c97@r t1c98@maps t1c99@ellipsis? t1c9a@vec?)) (lambda (t1d1b@t1d18 t1d1c@t1d1a) (let ((t1d1f@maps t1d1c@t1d1a) (t1d20@y t1d1b@t1d18)) (call-with-values (lambda () (t1ce2@k t1d1f@maps)) (lambda (t1d27@t1d24 t1d28@t1d26) (let ((t1d2b@maps t1d28@t1d26) (t1d2c@x t1d27@t1d24)) (values (t1c22@gen-append t1d2c@x t1d20@y) t1d2b@maps)))))))) t1d15@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1d13@t)))))))))))) t1cd3@ls/false) (let ((t1d2f@t t1cd1@t)) (let ((t1d31@ls/false (td84@syntax-dispatch t1d2f@t '(any . any)))) (if t1d31@ls/false (apply (lambda (t1d33@x t1d34@y) (call-with-values (lambda () (t1c1e@gen-syntax t1c95@src t1d33@x t1c97@r t1c98@maps t1c99@ellipsis? '#f)) (lambda (t1d3b@t1d38 t1d3c@t1d3a) (let ((t1d3f@maps t1d3c@t1d3a) (t1d40@xnew t1d3b@t1d38)) (call-with-values (lambda () (t1c1e@gen-syntax t1c95@src t1d34@y t1c97@r t1d3f@maps t1c99@ellipsis? t1c9a@vec?)) (lambda (t1d47@t1d44 t1d48@t1d46) (let ((t1d4b@maps t1d48@t1d46) (t1d4c@ynew t1d47@t1d44)) (values (t1c28@gen-cons t1c96@e t1d33@x t1d34@y t1d40@xnew t1d4c@ynew) t1d4b@maps)))))))) t1d31@ls/false) (let ((t1d4f@t t1d2f@t)) (let ((t1d51@ls/false (td84@syntax-dispatch t1d4f@t '#(vector each-any)))) (if t1d51@ls/false (apply (lambda (t1d53@ls) (call-with-values (lambda () (t1c1e@gen-syntax t1c95@src t1d53@ls t1c97@r t1c98@maps t1c99@ellipsis? '#t)) (lambda (t1d59@t1d56 t1d5a@t1d58) (let ((t1d5d@maps t1d5a@t1d58) (t1d5e@lsnew t1d59@t1d56)) (values (t1c2a@gen-vector t1c96@e t1d53@ls t1d5e@lsnew) t1d5d@maps))))) t1d51@ls/false) (let ((t1d61@t t1d4f@t)) (let ((t1d63@ls/false (td84@syntax-dispatch t1d61@t '_))) (if t1d63@ls/false (apply (lambda () (values (list 'quote t1c96@e) t1c98@maps)) t1d63@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1d61@t)))))))))))))))))))))))) (t1c20@gen-ref (lambda (t1c7b@src t1c7c@var t1c7d@level t1c7e@maps) (if (= t1c7d@level '0) (values t1c7c@var t1c7e@maps) (if (null? t1c7e@maps) (te64@syntax-violation '#f '"missing ellipsis in syntax form" t1c7b@src) (call-with-values (lambda () (t1c20@gen-ref t1c7b@src t1c7c@var (- t1c7d@level '1) (cdr t1c7e@maps))) (lambda (t1c87@t1c84 t1c88@t1c86) (let ((t1c8b@outer-maps t1c88@t1c86) (t1c8c@outer-var t1c87@t1c84)) (let ((t1c8f@t (assq t1c8c@outer-var (car t1c7e@maps)))) (if t1c8f@t ((lambda (t1c91@b) (values (cdr t1c91@b) t1c7e@maps)) t1c8f@t) (let ((t1c93@inner-var (tb05@gen-lexical 'tmp))) (values t1c93@inner-var (cons (cons (cons t1c8c@outer-var t1c93@inner-var) (car t1c7e@maps)) t1c8b@outer-maps)))))))))))) (t1c22@gen-append (lambda (t1c77@x t1c78@y) (if (fast-equal? t1c78@y ''()) t1c77@x (list 'append t1c77@x t1c78@y)))) (t1c24@gen-mappend (lambda (t1c73@e t1c74@map-env) (list 'apply '(primitive append) (t1c26@gen-map t1c73@e t1c74@map-env)))) (t1c26@gen-map (lambda (t1c61@e t1c62@map-env) (let ((t1c65@formals (map cdr t1c62@map-env)) (t1c66@actuals (map (lambda (t1c69@x) (list 'ref (car t1c69@x))) t1c62@map-env))) (if (eq? (car t1c61@e) 'ref) (car t1c66@actuals) (if (for-all (lambda (t1c6b@x) (and (eq? (car t1c6b@x) 'ref) (memq (cadr t1c6b@x) t1c65@formals))) (cdr t1c61@e)) (let ((t1c6d@args (map (let ((t1c6f@r (map cons t1c65@formals t1c66@actuals))) (lambda (t1c71@x) (cdr (assq (cadr t1c71@x) t1c6f@r)))) (cdr t1c61@e)))) (cons 'map (cons (list 'primitive (car t1c61@e)) t1c6d@args))) (cons* 'map (list 'lambda t1c65@formals t1c61@e) t1c66@actuals)))))) (t1c28@gen-cons (lambda (t1c51@e t1c52@x t1c53@y t1c54@xnew t1c55@ynew) (let ((t1c5b@t (car t1c55@ynew))) (if (memv t1c5b@t '(quote)) (if (eq? (car t1c54@xnew) 'quote) (let ((t1c5d@xnew (cadr t1c54@xnew)) (t1c5e@ynew (cadr t1c55@ynew))) (if (and (eq? t1c5d@xnew t1c52@x) (eq? t1c5e@ynew t1c53@y)) (list 'quote t1c51@e) (list 'quote (cons t1c5d@xnew t1c5e@ynew)))) (if (null? (cadr t1c55@ynew)) (list 'list t1c54@xnew) (list 'cons t1c54@xnew t1c55@ynew))) (if (memv t1c5b@t '(list)) (cons 'list (cons t1c54@xnew (cdr t1c55@ynew))) (list 'cons t1c54@xnew t1c55@ynew)))))) (t1c2a@gen-vector (lambda (t1c4b@e t1c4c@ls t1c4d@lsnew) (if (eq? (car t1c4d@lsnew) 'quote) (if (eq? (cadr t1c4d@lsnew) t1c4c@ls) (list 'quote t1c4b@e) (list 'quote (list->vector (cadr t1c4d@lsnew)))) (if (eq? (car t1c4d@lsnew) 'list) (cons 'vector (cdr t1c4d@lsnew)) (list 'list->vector t1c4d@lsnew))))) (t1c2c@regen (lambda (t1c45@x) (let ((t1c47@t (car t1c45@x))) (if (memv t1c47@t '(ref)) (cadr t1c45@x) (if (memv t1c47@t '(primitive)) (list 'primitive (cadr t1c45@x)) (if (memv t1c47@t '(quote)) (list 'quote (cadr t1c45@x)) (if (memv t1c47@t '(lambda)) (tae0@ta12@build-lambda '#f (cadr t1c45@x) (t1c2c@regen (caddr t1c45@x))) (if (memv t1c47@t '(map)) (let ((t1c49@ls (map t1c2c@regen (cdr t1c45@x)))) (cons '(primitive ellipsis-map) t1c49@ls)) (cons (list 'primitive (car t1c45@x)) (map t1c2c@regen (cdr t1c45@x)))))))))))) (lambda (t1c2d@e t1c2e@r t1c2f@mr) (let ((t1c33@t t1c2d@e)) (let ((t1c35@ls/false (td84@syntax-dispatch t1c33@t '(_ any)))) (if t1c35@ls/false (apply (lambda (t1c37@x) (call-with-values (lambda () (t1c1e@gen-syntax t1c2d@e t1c37@x t1c2e@r '() td86@ellipsis? '#f)) (lambda (t1c3d@t1c3a t1c3e@t1c3c) (let ((t1c41@maps t1c3e@t1c3c) (t1c42@e t1c3d@t1c3a)) (t1c2c@regen t1c42@e))))) t1c35@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1c33@t))))))) (set! t2896@td90@syntax-transformer td90@syntax-transformer) (set! td92@core-macro-transformer (lambda (t1d65@name) (let ((t1d67@t t1d65@name)) (if (memv t1d67@t '(quote)) td34@quote-transformer (if (memv t1d67@t '(lambda)) td38@lambda-transformer (if (memv t1d67@t '(case-lambda)) td36@case-lambda-transformer (if (memv t1d67@t '(letrec)) td1c@letrec-transformer (if (memv t1d67@t '(letrec*)) td1e@letrec*-transformer (if (memv t1d67@t '(let)) td1a@let-transformer (if (memv t1d67@t '(if)) td2c@if-transformer (if (memv t1d67@t '(and)) td2e@and-transformer (if (memv t1d67@t '(or)) td30@or-transformer (if (memv t1d67@t '(foreign-call)) td80@foreign-call-transformer (if (memv t1d67@t '(syntax-case)) td8c@syntax-case-transformer (if (memv t1d67@t '(syntax)) td90@syntax-transformer (if (memv t1d67@t '(type-descriptor)) td22@type-descriptor-transformer (if (memv t1d67@t '(record-type-descriptor)) td24@record-type-descriptor-transformer (if (memv t1d67@t '(record-constructor-descriptor)) td26@record-constructor-descriptor-transformer (if (memv t1d67@t '(fluid-let-syntax)) td20@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" t1d65@name)))))))))))))))))))) (set! t2897@td92@core-macro-transformer td92@core-macro-transformer) (set! td94@symbol-macro (lambda (t1d69@x t1d6a@set) (let ((t1d6d@t t1d69@x)) (let ((t1d6f@ls/false (td84@syntax-dispatch t1d6d@t '(_ any)))) (if (and t1d6f@ls/false (apply (lambda (t1d71@name) (and (tb7d@id? t1d71@name) (memq (tb7f@id->sym t1d71@name) t1d6a@set))) t1d6f@ls/false)) (apply (lambda (t1d73@name) (td3a@bless (list 'quote t1d73@name))) t1d6f@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1d6d@t)))))) (set! t2898@td94@symbol-macro td94@symbol-macro) (set! td96@macro-transformer (lambda (t1d75@x) (if (procedure? t1d75@x) t1d75@x (if (symbol? t1d75@x) (let ((t1d77@t t1d75@x)) (if (memv t1d77@t '(define-record-type)) td78@define-record-type-macro (if (memv t1d77@t '(define-struct)) td76@define-struct-macro (if (memv t1d77@t '(include)) td6c@include-macro (if (memv t1d77@t '(cond)) td68@cond-macro (if (memv t1d77@t '(let)) td40@let-macro (if (memv t1d77@t '(do)) td60@do-macro (if (memv t1d77@t '(or)) td64@or-macro (if (memv t1d77@t '(and)) td66@and-macro (if (memv t1d77@t '(let*)) td62@let*-macro (if (memv t1d77@t '(let-values)) td42@let-values-macro (if (memv t1d77@t '(let*-values)) td44@let*-values-macro (if (memv t1d77@t '(syntax-rules)) td70@syntax-rules-macro (if (memv t1d77@t '(quasiquote)) td72@quasiquote-macro (if (memv t1d77@t '(quasisyntax)) td74@quasisyntax-macro (if (memv t1d77@t '(with-syntax)) td3c@with-syntax-macro (if (memv t1d77@t '(when)) td28@when-macro (if (memv t1d77@t '(unless)) td2a@unless-macro (if (memv t1d77@t '(case)) td32@case-macro (if (memv t1d77@t '(identifier-syntax)) td5e@identifier-syntax-macro (if (memv t1d77@t '(time)) td56@time-macro (if (memv t1d77@t '(delay)) td58@delay-macro (if (memv t1d77@t '(assert)) td5a@assert-macro (if (memv t1d77@t '(endianness)) td5c@endianness-macro (if (memv t1d77@t '(guard)) td52@guard-macro (if (memv t1d77@t '(define-enumeration)) td54@define-enumeration-macro (if (memv t1d77@t '(trace-lambda)) td46@trace-lambda-macro (if (memv t1d77@t '(trace-define)) td48@trace-define-macro (if (memv t1d77@t '(trace-define-syntax)) td4a@trace-define-syntax-macro (if (memv t1d77@t '(trace-let-syntax)) td4e@trace-let-syntax-macro (if (memv t1d77@t '(trace-letrec-syntax)) td50@trace-letrec-syntax-macro (if (memv t1d77@t '(define-condition-type)) td7a@define-condition-type-macro (if (memv t1d77@t '(parameterize)) td7e@parameterize-macro (if (memv t1d77@t '(include-into)) td6e@include-into-macro (if (memv t1d77@t '(eol-style)) (lambda (t1d79@x) (td94@symbol-macro t1d79@x '(none lf cr crlf nel crnel ls))) (if (memv t1d77@t '(error-handling-mode)) (lambda (t1d7b@x) (td94@symbol-macro t1d7b@x '(ignore raise replace))) (if (memv t1d77@t '(buffer-mode)) (lambda (t1d7d@x) (td94@symbol-macro t1d7d@x '(none line block))) (if (memv t1d77@t '(file-options)) taf8@file-options-macro (if (memv t1d77@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) td7c@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" t1d75@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" t1d75@x))))) (set! t2899@td96@macro-transformer td96@macro-transformer) (set! td98@local-macro-transformer (lambda (t1d7f@x) (car t1d7f@x))) (set! t289a@td98@local-macro-transformer td98@local-macro-transformer) (set! td9a@do-macro-call (lambda (t1d81@transformer t1d82@expr t1d83@rib) (let ((t1d87@out (t1d81@transformer (tb69@add-mark tb61@anti-mark '#f t1d82@expr '#f)))) (begin (let t1d8b@f ((t1d89@x t1d87@out)) (if (not (tb49@stx? t1d89@x)) (if (pair? t1d89@x) (begin (t1d8b@f (car t1d89@x)) (t1d8b@f (cdr t1d89@x))) (if (vector? t1d89@x) (vector-for-each t1d8b@f t1d89@x) (if (symbol? t1d89@x) (te64@syntax-violation '#f '"raw symbol encountered in output of macro" t1d82@expr t1d89@x) (void)))) (void))) (tb69@add-mark (tb5f@gen-mark) t1d83@rib t1d87@out t1d82@expr))))) (set! t289b@td9a@do-macro-call td9a@do-macro-call) (set! td9c@chi-macro (lambda (t1d8d@p t1d8e@e t1d8f@rib) (td9a@do-macro-call (td96@macro-transformer t1d8d@p) t1d8e@e t1d8f@rib))) (set! t289c@td9c@chi-macro td9c@chi-macro) (set! td9e@chi-local-macro (lambda (t1d93@p t1d94@e t1d95@rib) (td9a@do-macro-call (td98@local-macro-transformer t1d93@p) t1d94@e t1d95@rib))) (set! t289d@td9e@chi-local-macro td9e@chi-local-macro) (set! tda0@chi-global-macro (lambda (t1d99@p t1d9a@e t1d9b@rib) (let ((t1d9f@lib (car t1d99@p)) (t1da0@loc (cdr t1d99@p))) (begin (t99a@t7e9@visit-library t1d9f@lib) (let ((t1da3@x (symbol-value t1da0@loc))) (let ((t1da5@transformer (if (procedure? t1da3@x) t1da3@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" t1da3@x)))) (td9a@do-macro-call t1da5@transformer t1d9a@e t1d9b@rib))))))) (set! t289e@tda0@chi-global-macro tda0@chi-global-macro) (set! tda2@chi-expr* (lambda (t1da7@e* t1da8@r t1da9@mr) (if (null? t1da7@e*) '() (let ((t1dad@e (tda6@chi-expr (car t1da7@e*) t1da8@r t1da9@mr))) (cons t1dad@e (tda2@chi-expr* (cdr t1da7@e*) t1da8@r t1da9@mr)))))) (set! t289f@tda2@chi-expr* tda2@chi-expr*) (set! tda4@chi-application (lambda (t1daf@e t1db0@r t1db1@mr) (let ((t1db5@t t1daf@e)) (let ((t1db7@ls/false (td84@syntax-dispatch t1db5@t '(any . each-any)))) (if t1db7@ls/false (apply (lambda (t1db9@rator t1dba@rands) (let ((t1dbd@rator (tda6@chi-expr t1db9@rator t1db0@r t1db1@mr))) (cons t1dbd@rator (tda2@chi-expr* t1dba@rands t1db0@r t1db1@mr)))) t1db7@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1db5@t)))))) (set! t28a0@tda4@chi-application tda4@chi-application) (set! tda6@chi-expr (lambda (t1dbf@e t1dc0@r t1dc1@mr) (call-with-values (lambda () (tb9f@syntax-type t1dbf@e t1dc0@r)) (lambda (t1dcb@t1dc6 t1dcc@t1dc8 t1dcd@t1dca) (let ((t1dd1@kwd t1dcd@t1dca) (t1dd2@value t1dcc@t1dc8) (t1dd3@type t1dcb@t1dc6)) (let ((t1dd7@t t1dd3@type)) (if (memv t1dd7@t '(core-macro)) (let ((t1dd9@transformer (td92@core-macro-transformer t1dd2@value))) (t1dd9@transformer t1dbf@e t1dc0@r t1dc1@mr)) (if (memv t1dd7@t '(global)) (let ((t1ddb@lib (car t1dd2@value))) (let ((t1ddd@loc (cdr t1dd2@value))) (begin ((tdec@inv-collector) t1ddb@lib) t1ddd@loc))) (if (memv t1dd7@t '(core-prim)) (let ((t1ddf@name t1dd2@value)) (list 'primitive t1ddf@name)) (if (memv t1dd7@t '(call)) (tda4@chi-application t1dbf@e t1dc0@r t1dc1@mr) (if (memv t1dd7@t '(lexical)) (let ((t1de1@lex (td0e@lexical-var t1dd2@value))) t1de1@lex) (if (memv t1dd7@t '(global-macro global-macro!)) (tda6@chi-expr (tda0@chi-global-macro t1dd2@value t1dbf@e '#f) t1dc0@r t1dc1@mr) (if (memv t1dd7@t '(local-macro local-macro!)) (tda6@chi-expr (td9e@chi-local-macro t1dd2@value t1dbf@e '#f) t1dc0@r t1dc1@mr) (if (memv t1dd7@t '(macro macro!)) (tda6@chi-expr (td9c@chi-macro t1dd2@value t1dbf@e '#f) t1dc0@r t1dc1@mr) (if (memv t1dd7@t '(constant)) (let ((t1de3@datum t1dd2@value)) (list 'quote t1de3@datum)) (if (memv t1dd7@t '(set!)) (tda8@chi-set! t1dbf@e t1dc0@r t1dc1@mr) (if (memv t1dd7@t '(begin)) (let ((t1de5@t t1dbf@e)) (let ((t1de7@ls/false (td84@syntax-dispatch t1de5@t '(_ any . each-any)))) (if t1de7@ls/false (apply (lambda (t1de9@x t1dea@x*) (tae2@ta42@build-sequence '#f (tda2@chi-expr* (cons t1de9@x t1dea@x*) t1dc0@r t1dc1@mr))) t1de7@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1de5@t)))) (if (memv t1dd7@t '(let-syntax letrec-syntax)) (let ((t1ded@t t1dbf@e)) (let ((t1def@ls/false (td84@syntax-dispatch t1ded@t '(_ #(each (any any)) any . each-any)))) (if (and t1def@ls/false (apply (lambda (t1df1@xlhs* t1df2@xrhs* t1df3@xbody t1df4@xbody*) (if (not (tb85@valid-bound-ids? t1df1@xlhs*)) (te64@syntax-violation '#f '"invalid identifiers" t1dbf@e) (void))) t1def@ls/false)) (apply (lambda (t1df9@xlhs* t1dfa@xrhs* t1dfb@xbody t1dfc@xbody*) (let ((t1e01@xlab* (map tb09@gen-label t1df9@xlhs*))) (let ((t1e03@xrib (tb3d@make-full-rib t1df9@xlhs* t1e01@xlab*))) (let ((t1e05@xb* (map (lambda (t1e07@x) (tbb5@make-eval-transformer (tdde@expand-transformer (if (eq? t1dd3@type 'let-syntax) t1e07@x (tb67@add-subst t1e03@xrib t1e07@x)) t1dc1@mr))) t1dfa@xrhs*))) (tae2@ta42@build-sequence '#f (tda2@chi-expr* (map (lambda (t1e09@x) (tb67@add-subst t1e03@xrib t1e09@x)) (cons t1dfb@xbody t1dfc@xbody*)) (append (map cons t1e01@xlab* t1e05@xb*) t1dc0@r) (append (map cons t1e01@xlab* t1e05@xb*) t1dc1@mr))))))) t1def@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1ded@t)))) (if (memv t1dd7@t '(displaced-lexical)) (te64@syntax-violation '#f '"identifier out of context" t1dbf@e) (if (memv t1dd7@t '(syntax)) (te64@syntax-violation '#f '"reference to pattern variable outside a syntax form" t1dbf@e) (if (memv t1dd7@t '(define define-syntax module import library)) (te64@syntax-violation '#f (string-append (let ((t1e0b@t t1dd3@type)) (if (memv t1e0b@t '(define)) '"a definition" (if (memv t1e0b@t '(define-syntax)) '"a define-syntax" (if (memv t1e0b@t '(module)) '"a module definition" (if (memv t1e0b@t '(library)) '"a library definition" (if (memv t1e0b@t '(import)) '"an import declaration" (if (memv t1e0b@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") t1dbf@e) (if (memv t1dd7@t '(mutable)) (te64@syntax-violation '#f '"attempt to reference an unexportable variable" t1dbf@e) (te64@syntax-violation '#f '"invalid expression" t1dbf@e))))))))))))))))))))))) (set! t28a1@tda6@chi-expr tda6@chi-expr) (set! tda8@chi-set! (lambda (t1e0d@e t1e0e@r t1e0f@mr) (let ((t1e13@t t1e0d@e)) (let ((t1e15@ls/false (td84@syntax-dispatch t1e13@t '(_ any any)))) (if (and t1e15@ls/false (apply (lambda (t1e17@x t1e18@v) (tb7d@id? t1e17@x)) t1e15@ls/false)) (apply (lambda (t1e1b@x t1e1c@v) (call-with-values (lambda () (tb9f@syntax-type t1e1b@x t1e0e@r)) (lambda (t1e25@t1e20 t1e26@t1e22 t1e27@t1e24) (let ((t1e2b@kwd t1e27@t1e24) (t1e2c@value t1e26@t1e22) (t1e2d@type t1e25@t1e20)) (let ((t1e31@t t1e2d@type)) (if (memv t1e31@t '(lexical)) (begin (td12@set-lexical-mutable! t1e2c@value '#t) (list 'set! (td0e@lexical-var t1e2c@value) (tda6@chi-expr t1e1c@v t1e0e@r t1e0f@mr))) (if (memv t1e31@t '(core-prim)) (te64@syntax-violation '#f '"cannot modify imported core primitive" t1e0d@e) (if (memv t1e31@t '(global)) (te64@syntax-violation '#f '"attempt to modify imported binding" t1e0d@e) (if (memv t1e31@t '(global-macro!)) (tda6@chi-expr (tda0@chi-global-macro t1e2c@value t1e0d@e '#f) t1e0e@r t1e0f@mr) (if (memv t1e31@t '(local-macro!)) (tda6@chi-expr (td9e@chi-local-macro t1e2c@value t1e0d@e '#f) t1e0e@r t1e0f@mr) (if (memv t1e31@t '(mutable)) (te64@syntax-violation '#f '"attempt to assign to an unexportable variable" t1e0d@e) (te64@syntax-violation '#f '"invalid syntax" t1e0d@e)))))))))))) t1e15@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1e13@t)))))) (set! t28a2@tda8@chi-set! tda8@chi-set!) (set! tdaa@verify-formals (lambda (t1e33@fmls t1e34@stx) (let ((t1e37@t t1e33@fmls)) (let ((t1e39@ls/false (td84@syntax-dispatch t1e37@t 'each-any))) (if t1e39@ls/false (apply (lambda (t1e3b@x*) (if (not (tb85@valid-bound-ids? t1e3b@x*)) (td3e@invalid-fmls-error t1e34@stx t1e33@fmls) (void))) t1e39@ls/false) (let ((t1e3d@t t1e37@t)) (let ((t1e3f@ls/false (td84@syntax-dispatch t1e3d@t '#(each+ any () any)))) (if t1e3f@ls/false (apply (lambda (t1e41@x* t1e42@x) (if (not (tb85@valid-bound-ids? (cons t1e42@x t1e41@x*))) (td3e@invalid-fmls-error t1e34@stx t1e33@fmls) (void))) t1e3f@ls/false) (let ((t1e45@t t1e3d@t)) (let ((t1e47@ls/false (td84@syntax-dispatch t1e45@t '_))) (if t1e47@ls/false (apply (lambda () (te64@syntax-violation '#f '"invalid syntax" t1e34@stx)) t1e47@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1e45@t)))))))))))) (set! t28a3@tdaa@verify-formals tdaa@verify-formals) (set! tdac@chi-lambda-clause (lambda (t1e49@stx t1e4a@fmls t1e4b@body* t1e4c@r t1e4d@mr) (let ((t1e53@t t1e4a@fmls)) (let ((t1e55@ls/false (td84@syntax-dispatch t1e53@t 'each-any))) (if t1e55@ls/false (apply (lambda (t1e57@x*) (begin (tdaa@verify-formals t1e4a@fmls t1e49@stx) (let ((t1e59@lex* (map tb05@gen-lexical t1e57@x*)) (t1e5a@lab* (map tb09@gen-label t1e57@x*))) (values t1e59@lex* (tdbc@chi-internal (tb67@add-subst (tb3d@make-full-rib t1e57@x* t1e5a@lab*) t1e4b@body*) (td16@add-lexicals t1e5a@lab* t1e59@lex* t1e4c@r) t1e4d@mr))))) t1e55@ls/false) (let ((t1e5d@t t1e53@t)) (let ((t1e5f@ls/false (td84@syntax-dispatch t1e5d@t '#(each+ any () any)))) (if t1e5f@ls/false (apply (lambda (t1e61@x* t1e62@x) (begin (tdaa@verify-formals t1e4a@fmls t1e49@stx) (let ((t1e65@lex* (map tb05@gen-lexical t1e61@x*)) (t1e66@lab* (map tb09@gen-label t1e61@x*)) (t1e67@lex (tb05@gen-lexical t1e62@x)) (t1e68@lab (tb09@gen-label t1e62@x))) (values (append t1e65@lex* t1e67@lex) (tdbc@chi-internal (tb67@add-subst (tb3d@make-full-rib (cons t1e62@x t1e61@x*) (cons t1e68@lab t1e66@lab*)) t1e4b@body*) (td16@add-lexicals (cons t1e68@lab t1e66@lab*) (cons t1e67@lex t1e65@lex*) t1e4c@r) t1e4d@mr))))) t1e5f@ls/false) (let ((t1e6d@t t1e5d@t)) (let ((t1e6f@ls/false (td84@syntax-dispatch t1e6d@t '_))) (if t1e6f@ls/false (apply (lambda () (te64@syntax-violation '#f '"invalid syntax" t1e4a@fmls)) t1e6f@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1e6d@t)))))))))))) (set! t28a4@tdac@chi-lambda-clause tdac@chi-lambda-clause) (set! tdae@chi-lambda-clause* (lambda (t1e71@stx t1e72@fmls* t1e73@body** t1e74@r t1e75@mr) (if (null? t1e72@fmls*) (values '() '()) (call-with-values (lambda () (tdac@chi-lambda-clause t1e71@stx (car t1e72@fmls*) (car t1e73@body**) t1e74@r t1e75@mr)) (lambda (t1e7f@t1e7c t1e80@t1e7e) (let ((t1e83@b t1e80@t1e7e) (t1e84@a t1e7f@t1e7c)) (call-with-values (lambda () (tdae@chi-lambda-clause* t1e71@stx (cdr t1e72@fmls*) (cdr t1e73@body**) t1e74@r t1e75@mr)) (lambda (t1e8b@t1e88 t1e8c@t1e8a) (let ((t1e8f@b* t1e8c@t1e8a) (t1e90@a* t1e8b@t1e88)) (values (cons t1e84@a t1e90@a*) (cons t1e83@b t1e8f@b*))))))))))) (set! t28a5@tdae@chi-lambda-clause* tdae@chi-lambda-clause*) (set! tdb0@chi-defun (lambda (t1e93@x t1e94@r t1e95@mr) (let ((t1e99@fmls (car t1e93@x)) (t1e9a@body* (cdr t1e93@x))) (call-with-values (lambda () (tdac@chi-lambda-clause t1e99@fmls t1e99@fmls t1e9a@body* t1e94@r t1e95@mr)) (lambda (t1ea1@t1e9e t1ea2@t1ea0) (let ((t1ea5@body t1ea2@t1ea0) (t1ea6@fmls t1ea1@t1e9e)) (tae0@ta12@build-lambda '#f t1ea6@fmls t1ea5@body))))))) (set! t28a6@tdb0@chi-defun tdb0@chi-defun) (set! tdb2@chi-rhs (lambda (t1ea9@rhs t1eaa@r t1eab@mr) (let ((t1eaf@t (car t1ea9@rhs))) (if (memv t1eaf@t '(defun)) (tdb0@chi-defun (cdr t1ea9@rhs) t1eaa@r t1eab@mr) (if (memv t1eaf@t '(expr)) (let ((t1eb1@expr (cdr t1ea9@rhs))) (tda6@chi-expr t1eb1@expr t1eaa@r t1eab@mr)) (if (memv t1eaf@t '(top-expr)) (let ((t1eb3@expr (cdr t1ea9@rhs))) (tae2@ta42@build-sequence '#f (list (tda6@chi-expr t1eb3@expr t1eaa@r t1eab@mr) (tae3@ta44@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" t1ea9@rhs))))))) (set! t28a7@tdb2@chi-rhs tdb2@chi-rhs) (set! tdb4@expand-interaction-rhs*/init* (lambda (t1eb5@lhs* t1eb6@rhs* t1eb7@init* t1eb8@r t1eb9@mr) (let t1ec3@f ((t1ebf@lhs* t1eb5@lhs*) (t1ec0@rhs* t1eb6@rhs*)) (if (null? t1ebf@lhs*) (map (lambda (t1ec5@x) (tda6@chi-expr t1ec5@x t1eb8@r t1eb9@mr)) t1eb7@init*) (let ((t1ec7@lhs (car t1ebf@lhs*)) (t1ec8@rhs (car t1ec0@rhs*))) (let ((t1ecb@t (car t1ec8@rhs))) (if (memv t1ecb@t '(defun)) (let ((t1ecd@rhs (tdb0@chi-defun (cdr t1ec8@rhs) t1eb8@r t1eb9@mr))) (cons (list 'set! t1ec7@lhs t1ecd@rhs) (t1ec3@f (cdr t1ebf@lhs*) (cdr t1ec0@rhs*)))) (if (memv t1ecb@t '(expr)) (let ((t1ecf@rhs (tda6@chi-expr (cdr t1ec8@rhs) t1eb8@r t1eb9@mr))) (cons (list 'set! t1ec7@lhs t1ecf@rhs) (t1ec3@f (cdr t1ebf@lhs*) (cdr t1ec0@rhs*)))) (if (memv t1ecb@t '(top-expr)) (let ((t1ed1@e (tda6@chi-expr (cdr t1ec8@rhs) t1eb8@r t1eb9@mr))) (cons t1ed1@e (t1ec3@f (cdr t1ebf@lhs*) (cdr t1ec0@rhs*)))) (error 'expand-interaction '"invallid" t1ec8@rhs)))))))))) (set! t28a8@tdb4@expand-interaction-rhs*/init* tdb4@expand-interaction-rhs*/init*) (set! tdb6@chi-rhs* (lambda (t1ed3@rhs* t1ed4@r t1ed5@mr) (let t1edb@f ((t1ed9@ls t1ed3@rhs*)) (if (null? t1ed9@ls) '() (let ((t1edd@a (tdb2@chi-rhs (car t1ed9@ls) t1ed4@r t1ed5@mr))) (cons t1edd@a (t1edb@f (cdr t1ed9@ls)))))))) (set! t28a9@tdb6@chi-rhs* tdb6@chi-rhs*) (set! tdb8@find-bound=? (lambda (t1edf@x t1ee0@lhs* t1ee1@rhs*) (if (null? t1ee0@lhs*) '#f (if (tb81@bound-id=? t1edf@x (car t1ee0@lhs*)) (car t1ee1@rhs*) (tdb8@find-bound=? t1edf@x (cdr t1ee0@lhs*) (cdr t1ee1@rhs*)))))) (set! t28aa@tdb8@find-bound=? tdb8@find-bound=?) (set! tdba@find-dups (lambda (t1ee5@ls) (let t1eeb@f ((t1ee7@ls t1ee5@ls) (t1ee8@dups '())) (if (null? t1ee7@ls) t1ee8@dups (let ((t1eed@t (tdb8@find-bound=? (car t1ee7@ls) (cdr t1ee7@ls) (cdr t1ee7@ls)))) (if t1eed@t ((lambda (t1eef@x) (t1eeb@f (cdr t1ee7@ls) (cons (list (car t1ee7@ls) t1eef@x) t1ee8@dups))) t1eed@t) (t1eeb@f (cdr t1ee7@ls) t1ee8@dups))))))) (set! t28ab@tdba@find-dups tdba@find-dups) (set! tdbc@chi-internal (lambda (t1ef1@e* t1ef2@r t1ef3@mr) (let ((t1ef7@rib (tb31@make-empty-rib))) (call-with-values (lambda () (tddc@chi-body* (map (lambda (t1f09@x) (tb67@add-subst t1ef7@rib t1f09@x)) (tb7b@syntax->list t1ef1@e*)) t1ef2@r t1ef3@mr '() '() '() '() '() t1ef7@rib '#f)) (lambda (t1f0b@t1efa t1f0c@t1efc t1f0d@t1efe t1f0e@t1f00 t1f0f@t1f02 t1f10@t1f04 t1f11@t1f06 t1f12@t1f08) (let ((t1f1b@_exp* t1f12@t1f08) (t1f1c@kwd* t1f11@t1f06) (t1f1d@mod** t1f10@t1f04) (t1f1e@rhs* t1f0f@t1f02) (t1f1f@lex* t1f0e@t1f00) (t1f20@mr t1f0d@t1efe) (t1f21@r t1f0c@t1efc) (t1f22@e* t1f0b@t1efa)) (begin (if (null? t1f22@e*) (te64@syntax-violation '#f '"no expression in body" t1f22@e*) (void)) (let ((t1f2b@init* (tda2@chi-expr* (append (apply append (reverse t1f1d@mod**)) t1f22@e*) t1f21@r t1f20@mr))) (let ((t1f2d@rhs* (tdb6@chi-rhs* t1f1e@rhs* t1f21@r t1f20@mr))) (tae7@ta4c@build-letrec* '#f (reverse t1f1f@lex*) (reverse t1f2d@rhs*) (tae2@ta42@build-sequence '#f t1f2b@init*))))))))))) (set! t28ac@tdbc@chi-internal tdbc@chi-internal) (set! tdbe@parse-module (lambda (t1f2f@e) (let ((t1f31@t t1f2f@e)) (let ((t1f33@ls/false (td84@syntax-dispatch t1f31@t '(_ each-any . each-any)))) (if t1f33@ls/false (apply (lambda (t1f35@export* t1f36@b*) (begin (if (not (for-all tb7d@id? t1f35@export*)) (te64@syntax-violation '#f '"module exports must be identifiers" t1f2f@e) (void)) (values '#f (list->vector t1f35@export*) t1f36@b*))) t1f33@ls/false) (let ((t1f39@t t1f31@t)) (let ((t1f3b@ls/false (td84@syntax-dispatch t1f39@t '(_ any each-any . each-any)))) (if t1f3b@ls/false (apply (lambda (t1f3d@name t1f3e@export* t1f3f@b*) (begin (if (not (tb7d@id? t1f3d@name)) (te64@syntax-violation '#f '"module name must be an identifier" t1f2f@e) (void)) (if (not (for-all tb7d@id? t1f3e@export*)) (te64@syntax-violation '#f '"module exports must be identifiers" t1f2f@e) (void)) (values t1f3d@name (list->vector t1f3e@export*) t1f3f@b*))) t1f3b@ls/false) (te64@syntax-violation '#f '"invalid syntax" t1f39@t))))))))) (set! t28ad@tdbe@parse-module tdbe@parse-module) (set! tdc8@module-interface? (lambda (t1f43@x) (and (simple-struct? t1f43@x) (eq? (simple-struct-name t1f43@x) 'module-interface)))) (set! t28ae@tdc8@module-interface? tdc8@module-interface?) (set! tdca@module-interface-first-mark (lambda (t1f45@x) (simple-struct-ref t1f45@x '0))) (set! t28af@tdca@module-interface-first-mark tdca@module-interface-first-mark) (set! tdcc@set-module-interface-first-mark! (lambda (t1f47@x t1f48@val) (simple-struct-set! t1f47@x '0 t1f48@val))) (set! t28b0@tdcc@set-module-interface-first-mark! tdcc@set-module-interface-first-mark!) (set! tdce@module-interface-exp-id-vec (lambda (t1f4b@x) (simple-struct-ref t1f4b@x '1))) (set! t28b1@tdce@module-interface-exp-id-vec tdce@module-interface-exp-id-vec) (set! tdd0@set-module-interface-exp-id-vec! (lambda (t1f4d@x t1f4e@val) (simple-struct-set! t1f4d@x '1 t1f4e@val))) (set! t28b2@tdd0@set-module-interface-exp-id-vec! tdd0@set-module-interface-exp-id-vec!) (set! tdd2@module-interface-exp-lab-vec (lambda (t1f51@x) (simple-struct-ref t1f51@x '2))) (set! t28b3@tdd2@module-interface-exp-lab-vec tdd2@module-interface-exp-lab-vec) (set! tdd4@set-module-interface-exp-lab-vec! (lambda (t1f53@x t1f54@val) (simple-struct-set! t1f53@x '2 t1f54@val))) (set! t28b4@tdd4@set-module-interface-exp-lab-vec! tdd4@set-module-interface-exp-lab-vec!) (set! tdd6@dummy '3) (set! t28b5@tdd6@dummy tdd6@dummy) (set! tdd8@module-interface-exp-id* (lambda (t1f57@iface t1f58@id) (letrec* ((t1f5c@diff-marks (lambda (t1f63@ls t1f64@x) (begin (if (null? t1f63@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((t1f67@a (car t1f63@ls))) (if (eq? t1f67@a t1f64@x) '() (cons t1f67@a (t1f5c@diff-marks (cdr t1f63@ls) t1f64@x)))))))) (let ((t1f5d@diff (t1f5c@diff-marks (tb4f@stx-mark* t1f58@id) (tdca@module-interface-first-mark t1f57@iface))) (t1f5e@id-vec (tdce@module-interface-exp-id-vec t1f57@iface))) (if (null? t1f5d@diff) t1f5e@id-vec (vector-map (lambda (t1f61@x) (make-simple-struct 'stx '5 (list (tb4b@stx-expr t1f61@x) (append t1f5d@diff (tb4f@stx-mark* t1f61@x)) '() '()))) t1f5e@id-vec)))))) (set! t28b6@tdd8@module-interface-exp-id* tdd8@module-interface-exp-id*) (set! tdda@chi-internal-module (lambda (t1f69@e t1f6a@r t1f6b@mr t1f6c@lex* t1f6d@rhs* t1f6e@mod** t1f6f@kwd*) (call-with-values (lambda () (tdbe@parse-module t1f69@e)) (lambda (t1f7d@t1f78 t1f7e@t1f7a t1f7f@t1f7c) (let ((t1f83@e* t1f7f@t1f7c) (t1f84@exp-id* t1f7e@t1f7a) (t1f85@name t1f7d@t1f78)) (let ((t1f89@rib (tb31@make-empty-rib))) (let ((t1f8b@e* (map (lambda (t1f8d@x) (tb67@add-subst t1f89@rib t1f8d@x)) (tb7b@syntax->list t1f83@e*)))) (call-with-values (lambda () (tddc@chi-body* t1f8b@e* t1f6a@r t1f6b@mr t1f6c@lex* t1f6d@rhs* t1f6e@mod** t1f6f@kwd* '() t1f89@rib '#f)) (lambda (t1f9f@t1f90 t1fa0@t1f92 t1fa1@t1f94 t1fa2@t1f96 t1fa3@t1f98 t1fa4@t1f9a t1fa5@t1f9c t1fa6@t1f9e) (let ((t1faf@_exp* t1fa6@t1f9e) (t1fb0@kwd* t1fa5@t1f9c) (t1fb1@mod** t1fa4@t1f9a) (t1fb2@rhs* t1fa3@t1f98) (t1fb3@lex* t1fa2@t1f96) (t1fb4@mr t1fa1@t1f94) (t1fb5@r t1fa0@t1f92) (t1fb6@e* t1f9f@t1f90)) (let ((t1fbf@exp-lab* (vector-map (lambda (t1fc3@x) (or (tb93@id->label (make-simple-struct 'stx '5 (list (tb7f@id->sym t1fc3@x) (tb4f@stx-mark* t1fc3@x) (list t1f89@rib) '()))) (te64@syntax-violation '#f '"cannot find module export" t1fc3@x))) t1f84@exp-id*)) (t1fc0@mod** (cons t1fb6@e* t1fb1@mod**))) (if (not t1f85@name) (values t1fb3@lex* t1fb2@rhs* t1f84@exp-id* t1fbf@exp-lab* t1fb5@r t1fb4@mr t1fc0@mod** t1fb0@kwd*) (let ((t1fc5@lab (tb09@gen-label 'module)) (t1fc6@iface (make-simple-struct 'module-interface '4 (list (car (tb4f@stx-mark* t1f85@name)) (vector-map (lambda (t1fc9@x) (make-simple-struct 'stx '5 (list (tb4b@stx-expr t1fc9@x) (tb4f@stx-mark* t1fc9@x) '() '()))) t1f84@exp-id*) t1fbf@exp-lab*)))) (values t1fb3@lex* t1fb2@rhs* (vector t1f85@name) (vector t1fc5@lab) (cons (cons t1fc5@lab (cons '$module t1fc6@iface)) t1fb5@r) (cons (cons t1fc5@lab (cons '$module t1fc6@iface)) t1fb4@mr) t1fc0@mod** t1fb0@kwd*)))))))))))))) (set! t28b7@tdda@chi-internal-module tdda@chi-internal-module) (set! tddc@chi-body* (lambda (t1fcb@e* t1fcc@r t1fcd@mr t1fce@lex* t1fcf@rhs* t1fd0@mod** t1fd1@kwd* t1fd2@exp* t1fd3@rib t1fd4@top?) (if (null? t1fcb@e*) (values t1fcb@e* t1fcc@r t1fcd@mr t1fce@lex* t1fcf@rhs* t1fd0@mod** t1fd1@kwd* t1fd2@exp*) (let ((t1fdf@e (car t1fcb@e*))) (call-with-values (lambda () (tb9f@syntax-type t1fdf@e t1fcc@r)) (lambda (t1fe7@t1fe2 t1fe8@t1fe4 t1fe9@t1fe6) (let ((t1fed@kwd t1fe9@t1fe6) (t1fee@value t1fe8@t1fe4) (t1fef@type t1fe7@t1fe2)) (let ((t1ff3@kwd* (if (tb7d@id? t1fed@kwd) (cons t1fed@kwd t1fd1@kwd*) t1fd1@kwd*))) (let ((t1ff5@t t1fef@type)) (if (memv t1ff5@t '(define)) (call-with-values (lambda () (td06@parse-define t1fdf@e)) (lambda (t1ffb@t1ff8 t1ffc@t1ffa) (let ((t1fff@rhs t1ffc@t1ffa) (t2000@id t1ffb@t1ff8)) (begin (if (tb89@bound-id-member? t2000@id t1ff3@kwd*) (te64@syntax-violation '#f '"cannot redefine keyword" t1fdf@e) (void)) (call-with-values (lambda () (tb0d@gen-define-label+loc t2000@id t1fd3@rib)) (lambda (t2007@t2004 t2008@t2006) (let ((t200b@lex t2008@t2006) (t200c@lab t2007@t2004)) (begin (tb33@extend-rib! t1fd3@rib t2000@id t200c@lab) (tddc@chi-body* (cdr t1fcb@e*) (td14@add-lexical t200c@lab t200b@lex t1fcc@r) t1fcd@mr (cons t200b@lex t1fce@lex*) (cons t1fff@rhs t1fcf@rhs*) t1fd0@mod** t1ff3@kwd* t1fd2@exp* t1fd3@rib t1fd4@top?))))))))) (if (memv t1ff5@t '(define-syntax)) (call-with-values (lambda () (td08@parse-define-syntax t1fdf@e)) (lambda (t2013@t2010 t2014@t2012) (let ((t2017@rhs t2014@t2012) (t2018@id t2013@t2010)) (begin (if (tb89@bound-id-member? t2018@id t1ff3@kwd*) (te64@syntax-violation '#f '"cannot redefine keyword" t1fdf@e) (void)) (let ((t201b@lab (tb0f@gen-define-label t2018@id t1fd3@rib)) (t201c@expanded-rhs (tdde@expand-transformer t2017@rhs t1fcd@mr))) (begin (tb33@extend-rib! t1fd3@rib t2018@id t201b@lab) (let ((t201f@b (tbb5@make-eval-transformer t201c@expanded-rhs))) (tddc@chi-body* (cdr t1fcb@e*) (cons (cons t201b@lab t201f@b) t1fcc@r) (cons (cons t201b@lab t201f@b) t1fcd@mr) t1fce@lex* t1fcf@rhs* t1fd0@mod** t1ff3@kwd* t1fd2@exp* t1fd3@rib t1fd4@top?)))))))) (if (memv t1ff5@t '(let-syntax letrec-syntax)) (let ((t2021@t t1fdf@e)) (let ((t2023@ls/false (td84@syntax-dispatch t2021@t '(_ #(each (any any)) . each-any)))) (if (and t2023@ls/false (apply (lambda (t2025@xlhs* t2026@xrhs* t2027@xbody*) (if (not (tb85@valid-bound-ids? t2025@xlhs*)) (te64@syntax-violation '#f '"invalid identifiers" t1fdf@e) (void))) t2023@ls/false)) (apply (lambda (t202b@xlhs* t202c@xrhs* t202d@xbody*) (let ((t2031@xlab* (map tb09@gen-label t202b@xlhs*))) (let ((t2033@xrib (tb3d@make-full-rib t202b@xlhs* t2031@xlab*))) (let ((t2035@xb* (map (lambda (t2037@x) (tbb5@make-eval-transformer (tdde@expand-transformer (if (eq? t1fef@type 'let-syntax) t2037@x (tb67@add-subst t2033@xrib t2037@x)) t1fcd@mr))) t202c@xrhs*))) (tddc@chi-body* (append (map (lambda (t2039@x) (tb67@add-subst t2033@xrib t2039@x)) t202d@xbody*) (cdr t1fcb@e*)) (append (map cons t2031@xlab* t2035@xb*) t1fcc@r) (append (map cons t2031@xlab* t2035@xb*) t1fcd@mr) t1fce@lex* t1fcf@rhs* t1fd0@mod** t1ff3@kwd* t1fd2@exp* t1fd3@rib t1fd4@top?))))) t2023@ls/false) (te64@syntax-violation '#f '"invalid syntax" t2021@t)))) (if (memv t1ff5@t '(begin)) (let ((t203b@t t1fdf@e)) (let ((t203d@ls/false (td84@syntax-dispatch t203b@t '(_ . each-any)))) (if t203d@ls/false (apply (lambda (t203f@x*) (tddc@chi-body* (append t203f@x* (cdr t1fcb@e*)) t1fcc@r t1fcd@mr t1fce@lex* t1fcf@rhs* t1fd0@mod** t1ff3@kwd* t1fd2@exp* t1fd3@rib t1fd4@top?)) t203d@ls/false) (te64@syntax-violation '#f '"invalid syntax" t203b@t)))) (if (memv t1ff5@t '(global-macro global-macro!)) (tddc@chi-body* (cons (tda0@chi-global-macro t1fee@value t1fdf@e t1fd3@rib) (cdr t1fcb@e*)) t1fcc@r t1fcd@mr t1fce@lex* t1fcf@rhs* t1fd0@mod** t1ff3@kwd* t1fd2@exp* t1fd3@rib t1fd4@top?) (if (memv t1ff5@t '(local-macro local-macro!)) (tddc@chi-body* (cons (td9e@chi-local-macro t1fee@value t1fdf@e t1fd3@rib) (cdr t1fcb@e*)) t1fcc@r t1fcd@mr t1fce@lex* t1fcf@rhs* t1fd0@mod** t1ff3@kwd* t1fd2@exp* t1fd3@rib t1fd4@top?) (if (memv t1ff5@t '(macro macro!)) (tddc@chi-body* (cons (td9c@chi-macro t1fee@value t1fdf@e t1fd3@rib) (cdr t1fcb@e*)) t1fcc@r t1fcd@mr t1fce@lex* t1fcf@rhs* t1fd0@mod** t1ff3@kwd* t1fd2@exp* t1fd3@rib t1fd4@top?) (if (memv t1ff5@t '(module)) (call-with-values (lambda () (tdda@chi-internal-module t1fdf@e t1fcc@r t1fcd@mr t1fce@lex* t1fcf@rhs* t1fd0@mod** t1ff3@kwd*)) (lambda (t2051@t2042 t2052@t2044 t2053@t2046 t2054@t2048 t2055@t204a t2056@t204c t2057@t204e t2058@t2050) (let ((t2061@kwd* t2058@t2050) (t2062@mod** t2057@t204e) (t2063@mr t2056@t204c) (t2064@r t2055@t204a) (t2065@m-exp-lab* t2054@t2048) (t2066@m-exp-id* t2053@t2046) (t2067@rhs* t2052@t2044) (t2068@lex* t2051@t2042)) (begin (vector-for-each (lambda (t2071@id t2072@lab) (tb33@extend-rib! t1fd3@rib t2071@id t2072@lab)) t2066@m-exp-id* t2065@m-exp-lab*) (tddc@chi-body* (cdr t1fcb@e*) t2064@r t2063@mr t2068@lex* t2067@rhs* t2062@mod** t2061@kwd* t1fd2@exp* t1fd3@rib t1fd4@top?))))) (if (memv t1ff5@t '(library)) (begin (te46@library-expander (tb91@stx->datum t1fdf@e)) (tddc@chi-body* (cdr t1fcb@e*) t1fcc@r t1fcd@mr t1fce@lex* t1fcf@rhs* t1fd0@mod** t1ff3@kwd* t1fd2@exp* t1fd3@rib t1fd4@top?)) (if (memv t1ff5@t '(export)) (let ((t2075@t t1fdf@e)) (let ((t2077@ls/false (td84@syntax-dispatch t2075@t '(_ . each-any)))) (if t2077@ls/false (apply (lambda (t2079@exp-decl*) (tddc@chi-body* (cdr t1fcb@e*) t1fcc@r t1fcd@mr t1fce@lex* t1fcf@rhs* t1fd0@mod** t1ff3@kwd* (append t2079@exp-decl* t1fd2@exp*) t1fd3@rib t1fd4@top?)) t2077@ls/false) (te64@syntax-violation '#f '"invalid syntax" t2075@t)))) (if (memv t1ff5@t '(import)) (letrec* ((t207c@module-import? (lambda (t20cf@e) (let ((t20d1@t t20cf@e)) (let ((t20d3@ls/false (td84@syntax-dispatch t20d1@t '(_ any)))) (if (and t20d3@ls/false (apply (lambda (t20d5@id) (tb7d@id? t20d5@id)) t20d3@ls/false)) (apply (lambda (t20d7@id) '#t) t20d3@ls/false) (let ((t20d9@t t20d1@t)) (let ((t20db@ls/false (td84@syntax-dispatch t20d9@t '(_ . each-any)))) (if t20db@ls/false (apply (lambda (t20dd@imp*) '#f) t20db@ls/false) (let ((t20df@t t20d9@t)) (let ((t20e1@ls/false (td84@syntax-dispatch t20df@t '_))) (if t20e1@ls/false (apply (lambda () (te64@syntax-violation '#f '"malformed import form" t20cf@e)) t20e1@ls/false) (te64@syntax-violation '#f '"invalid syntax" t20df@t)))))))))))) (t207e@module-import (lambda (t20ad@e t20ae@r) (let ((t20b1@t t20ad@e)) (let ((t20b3@ls/false (td84@syntax-dispatch t20b1@t '(_ any)))) (if (and t20b3@ls/false (apply (lambda (t20b5@id) (tb7d@id? t20b5@id)) t20b3@ls/false)) (apply (lambda (t20b7@id) (call-with-values (lambda () (tb9f@syntax-type t20b7@id t20ae@r)) (lambda (t20bf@t20ba t20c0@t20bc t20c1@t20be) (let ((t20c5@kwd t20c1@t20be) (t20c6@value t20c0@t20bc) (t20c7@type t20bf@t20ba)) (let ((t20cb@t t20c7@type)) (if (memv t20cb@t '($module)) (let ((t20cd@iface t20c6@value)) (values (tdd8@module-interface-exp-id* t20cd@iface t20b7@id) (tdd2@module-interface-exp-lab-vec t20cd@iface))) (te64@syntax-violation '#f '"invalid import" t20ad@e))))))) t20b3@ls/false) (te64@syntax-violation '#f '"invalid syntax" t20b1@t)))))) (t2080@library-import (lambda (t2091@e) (let ((t2093@t t2091@e)) (let ((t2095@ls/false (td84@syntax-dispatch t2093@t '(any . each-any)))) (if t2095@ls/false (apply (lambda (t2097@ctxt t2098@imp*) (call-with-values (lambda () (tde6@parse-import-spec* (te6a@syntax->datum t2098@imp*))) (lambda (t209f@t209c t20a0@t209e) (let ((t20a3@subst-labels t20a0@t209e) (t20a4@subst-names t209f@t209c)) (values (vector-map (lambda (t20a7@name) (tb5d@datum->stx t2097@ctxt t20a7@name)) t20a4@subst-names) t20a3@subst-labels))))) t2095@ls/false) (let ((t20a9@t t2093@t)) (let ((t20ab@ls/false (td84@syntax-dispatch t20a9@t '_))) (if t20ab@ls/false (apply (lambda () (te64@syntax-violation '#f '"invalid import form" t2091@e)) t20ab@ls/false) (te64@syntax-violation '#f '"invalid syntax" t20a9@t)))))))))) (begin (call-with-values (lambda () (if (t207c@module-import? t1fdf@e) (t207e@module-import t1fdf@e t1fcc@r) (t2080@library-import t1fdf@e))) (lambda (t2085@t2082 t2086@t2084) (let ((t2089@lab* t2086@t2084) (t208a@id* t2085@t2082)) (vector-for-each (lambda (t208d@id t208e@lab) (tb33@extend-rib! t1fd3@rib t208d@id t208e@lab)) t208a@id* t2089@lab*)))) (tddc@chi-body* (cdr t1fcb@e*) t1fcc@r t1fcd@mr t1fce@lex* t1fcf@rhs* t1fd0@mod** t1ff3@kwd* t1fd2@exp* t1fd3@rib t1fd4@top?))) (if t1fd4@top? (tddc@chi-body* (cdr t1fcb@e*) t1fcc@r t1fcd@mr (cons (tb05@gen-lexical 'dummy) t1fce@lex*) (cons (cons 'top-expr t1fdf@e) t1fcf@rhs*) t1fd0@mod** t1ff3@kwd* t1fd2@exp* t1fd3@rib t1fd4@top?) (values t1fcb@e* t1fcc@r t1fcd@mr t1fce@lex* t1fcf@rhs* t1fd0@mod** t1ff3@kwd* t1fd2@exp*)))))))))))))))))))))) (set! t28b8@tddc@chi-body* tddc@chi-body*) (set! tdde@expand-transformer (lambda (t20e3@expr t20e4@r) (let ((t20e7@rtc (tdea@make-collector))) (let ((t20e9@expanded-rhs (let ((t20f3@t20ec tdec@inv-collector) (t20f4@t20ee tdee@vis-collector) (t20f5@t20f0 t20e7@rtc) (t20f6@t20f2 (lambda (t20fb@x) (values)))) (let ((t20fd@swap (lambda () (begin (let ((t20ff@t (t20f3@t20ec))) (begin (t20f3@t20ec t20f5@t20f0) (set! t20f5@t20f0 t20ff@t))) (let ((t2101@t (t20f4@t20ee))) (begin (t20f4@t20ee t20f6@t20f2) (set! t20f6@t20f2 t2101@t))))))) (dynamic-wind t20fd@swap (lambda () (tda6@chi-expr t20e3@expr t20e4@r t20e4@r)) t20fd@swap))))) (begin (for-each (let ((t2103@mark-visit (tdee@vis-collector))) (lambda (t2105@x) (begin (t999@t7e7@invoke-library t2105@x) (t2103@mark-visit t2105@x)))) (t20e7@rtc)) t20e9@expanded-rhs))))) (set! t28b9@tdde@expand-transformer tdde@expand-transformer) (set! tde0@parse-exports (lambda (t2107@exp*) (let t210f@f ((t2109@exp* t2107@exp*) (t210a@int* '()) (t210b@ext* '())) (if (null? t2109@exp*) (begin (if (not (tb85@valid-bound-ids? t210b@ext*)) (te64@syntax-violation 'export '"invalid exports" (tdba@find-dups t210b@ext*)) (void)) (values (map te6a@syntax->datum t210b@ext*) t210a@int*)) (let ((t2111@t (car t2109@exp*))) (let ((t2113@ls/false (td84@syntax-dispatch t2111@t '(any . #(each (any any)))))) (if t2113@ls/false (apply (lambda (t2115@rename t2116@i* t2117@e*) (begin (if (not (and (eq? (te6a@syntax->datum t2115@rename) 'rename) (for-all tb7d@id? t2116@i*) (for-all tb7d@id? t2117@e*))) (te64@syntax-violation 'export '"invalid export specifier" (car t2109@exp*)) (void)) (t210f@f (cdr t2109@exp*) (append t2116@i* t210a@int*) (append t2117@e* t210b@ext*)))) t2113@ls/false) (let ((t211b@t t2111@t)) (let ((t211d@ls/false (td84@syntax-dispatch t211b@t 'any))) (if t211d@ls/false (apply (lambda (t211f@ie) (begin (if (not (tb7d@id? t211f@ie)) (te64@syntax-violation 'export '"invalid export" t211f@ie) (void)) (t210f@f (cdr t2109@exp*) (cons t211f@ie t210a@int*) (cons t211f@ie t210b@ext*)))) t211d@ls/false) (te64@syntax-violation '#f '"invalid syntax" t211b@t))))))))))) (set! t28ba@tde0@parse-exports tde0@parse-exports) (set! tde2@parse-library-name (lambda (t2121@spec) (letrec* ((t2124@parse (lambda (t2131@x) (let ((t2133@t t2131@x)) (let ((t2135@ls/false (td84@syntax-dispatch t2133@t '(each-any)))) (if (and t2135@ls/false (apply (lambda (t2137@v*) (for-all (lambda (t2139@x) (let ((t213b@x (te6a@syntax->datum t2139@x))) (and (integer? t213b@x) (exact? t213b@x)))) t2137@v*)) t2135@ls/false)) (apply (lambda (t213d@v*) (values '() (map te6a@syntax->datum t213d@v*))) t2135@ls/false) (let ((t213f@t t2133@t)) (let ((t2141@ls/false (td84@syntax-dispatch t213f@t '(any . any)))) (if (and t2141@ls/false (apply (lambda (t2143@x t2144@rest) (symbol? (te6a@syntax->datum t2143@x))) t2141@ls/false)) (apply (lambda (t2147@x t2148@rest) (call-with-values (lambda () (t2124@parse t2148@rest)) (lambda (t214f@t214c t2150@t214e) (let ((t2153@v* t2150@t214e) (t2154@x* t214f@t214c)) (values (cons (te6a@syntax->datum t2147@x) t2154@x*) t2153@v*))))) t2141@ls/false) (let ((t2157@t t213f@t)) (let ((t2159@ls/false (td84@syntax-dispatch t2157@t '()))) (if t2159@ls/false (apply (lambda () (values '() '())) t2159@ls/false) (let ((t215b@t t2157@t)) (let ((t215d@ls/false (td84@syntax-dispatch t215b@t '_))) (if t215d@ls/false (apply (lambda () (te64@syntax-violation '#f '"invalid library name" t2121@spec)) t215d@ls/false) (te64@syntax-violation '#f '"invalid syntax" t215b@t)))))))))))))))) (call-with-values (lambda () (t2124@parse t2121@spec)) (lambda (t2129@t2126 t212a@t2128) (let ((t212d@ver* t212a@t2128) (t212e@name* t2129@t2126)) (begin (if (null? t212e@name*) (te64@syntax-violation '#f '"empty library name" t2121@spec) (void)) (values t212e@name* t212d@ver*)))))))) (set! t28bb@tde2@parse-library-name tde2@parse-library-name) (set! tde4@parse-library (lambda (t215f@e) (let ((t2161@t t215f@e)) (let ((t2163@ls/false (td84@syntax-dispatch t2161@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and t2163@ls/false (apply (lambda (t2165@library t2166@name* t2167@export t2168@exp* t2169@import t216a@imp* t216b@b*) (and (eq? (te6a@syntax->datum t2167@export) 'export) (eq? (te6a@syntax->datum t2169@import) 'import) (eq? (te6a@syntax->datum t2165@library) 'library))) t2163@ls/false)) (apply (lambda (t2173@library t2174@name* t2175@export t2176@exp* t2177@import t2178@imp* t2179@b*) (values t2174@name* t2176@exp* t2178@imp* t2179@b*)) t2163@ls/false) (let ((t2181@t t2161@t)) (let ((t2183@ls/false (td84@syntax-dispatch t2181@t '_))) (if t2183@ls/false (apply (lambda () (te64@syntax-violation '#f '"malformed library" t215f@e)) t2183@ls/false) (te64@syntax-violation '#f '"invalid syntax" t2181@t))))))))) (set! t28bc@tde4@parse-library tde4@parse-library) (set! tde6@parse-import-spec* (letrec* ((t2186@idsyn? (lambda (t238f@x) (symbol? (te6a@syntax->datum t238f@x)))) (t2188@dup-error (lambda (t238d@name) (te64@syntax-violation 'import '"two imports with different bindings" t238d@name))) (t218a@merge-substs (lambda (t237b@s t237c@subst) (letrec* ((t2380@insert-to-subst (lambda (t2381@a t2382@subst) (let ((t2385@name (car t2381@a)) (t2386@label (cdr t2381@a))) (let ((t2389@t (assq t2385@name t2382@subst))) (if t2389@t ((lambda (t238b@x) (if (eq? (cdr t238b@x) t2386@label) t2382@subst (t2188@dup-error t2385@name))) t2389@t) (cons t2381@a t2382@subst))))))) (if (null? t237b@s) t237c@subst (t2380@insert-to-subst (car t237b@s) (t218a@merge-substs (cdr t237b@s) t237c@subst)))))) (t218c@exclude* (lambda (t234b@sym* t234c@subst) (letrec* ((t2350@exclude (lambda (t2369@sym t236a@subst) (if (null? t236a@subst) (te64@syntax-violation 'import '"cannot rename unbound identifier" t2369@sym) (if (eq? t2369@sym (caar t236a@subst)) (values (cdar t236a@subst) (cdr t236a@subst)) (let ((t236d@a (car t236a@subst))) (call-with-values (lambda () (t2350@exclude t2369@sym (cdr t236a@subst))) (lambda (t2373@t2370 t2374@t2372) (let ((t2377@subst t2374@t2372) (t2378@old t2373@t2370)) (values t2378@old (cons t236d@a t2377@subst))))))))))) (if (null? t234b@sym*) (values '() t234c@subst) (call-with-values (lambda () (t2350@exclude (car t234b@sym*) t234c@subst)) (lambda (t2355@t2352 t2356@t2354) (let ((t2359@subst t2356@t2354) (t235a@old t2355@t2352)) (call-with-values (lambda () (t218c@exclude* (cdr t234b@sym*) t2359@subst)) (lambda (t2361@t235e t2362@t2360) (let ((t2365@subst t2362@t2360) (t2366@old* t2361@t235e)) (values (cons t235a@old t2366@old*) t2365@subst))))))))))) (t218e@find* (lambda (t2343@sym* t2344@subst) (map (lambda (t2347@x) (let ((t2349@t (assq t2347@x t2344@subst))) (if t2349@t (cdr t2349@t) (te64@syntax-violation 'import '"cannot find identifier" t2347@x)))) t2343@sym*))) (t2190@rem* (lambda (t233b@sym* t233c@subst) (let t2341@f ((t233f@subst t233c@subst)) (if (null? t233f@subst) '() (if (memq (caar t233f@subst) t233b@sym*) (t2341@f (cdr t233f@subst)) (cons (car t233f@subst) (t2341@f (cdr t233f@subst)))))))) (t2192@remove-dups (lambda (t2339@ls) (if (null? t2339@ls) '() (if (memq (car t2339@ls) (cdr t2339@ls)) (t2192@remove-dups (cdr t2339@ls)) (cons (car t2339@ls) (t2192@remove-dups (cdr t2339@ls))))))) (t2194@parse-library-name (lambda (t2251@spec) (letrec* ((t2254@subversion? (lambda (t2335@x) (let ((t2337@x (te6a@syntax->datum t2335@x))) (and (integer? t2337@x) (exact? t2337@x) (>= t2337@x '0))))) (t2256@subversion-pred (lambda (t22d5@x*) (let ((t22d7@t t22d5@x*)) (let ((t22d9@ls/false (td84@syntax-dispatch t22d7@t 'any))) (if (and t22d9@ls/false (apply (lambda (t22db@n) (t2254@subversion? t22db@n)) t22d9@ls/false)) (apply (lambda (t22dd@n) (lambda (t22df@x) (= t22df@x (te6a@syntax->datum t22dd@n)))) t22d9@ls/false) (let ((t22e1@t t22d7@t)) (let ((t22e3@ls/false (td84@syntax-dispatch t22e1@t '(any . each-any)))) (if (and t22e3@ls/false (apply (lambda (t22e5@p? t22e6@sub*) (eq? (te6a@syntax->datum t22e5@p?) 'and)) t22e3@ls/false)) (apply (lambda (t22e9@p? t22ea@sub*) (let ((t22ed@p* (map t2256@subversion-pred t22ea@sub*))) (lambda (t22ef@x) (for-all (lambda (t22f1@p) (t22f1@p t22ef@x)) t22ed@p*)))) t22e3@ls/false) (let ((t22f3@t t22e1@t)) (let ((t22f5@ls/false (td84@syntax-dispatch t22f3@t '(any . each-any)))) (if (and t22f5@ls/false (apply (lambda (t22f7@p? t22f8@sub*) (eq? (te6a@syntax->datum t22f7@p?) 'or)) t22f5@ls/false)) (apply (lambda (t22fb@p? t22fc@sub*) (let ((t22ff@p* (map t2256@subversion-pred t22fc@sub*))) (lambda (t2301@x) (exists (lambda (t2303@p) (t2303@p t2301@x)) t22ff@p*)))) t22f5@ls/false) (let ((t2305@t t22f3@t)) (let ((t2307@ls/false (td84@syntax-dispatch t2305@t '(any any)))) (if (and t2307@ls/false (apply (lambda (t2309@p? t230a@sub) (eq? (te6a@syntax->datum t2309@p?) 'not)) t2307@ls/false)) (apply (lambda (t230d@p? t230e@sub) (let ((t2311@p (t2256@subversion-pred t230e@sub))) (lambda (t2313@x) (not (t2311@p t2313@x))))) t2307@ls/false) (let ((t2315@t t2305@t)) (let ((t2317@ls/false (td84@syntax-dispatch t2315@t '(any any)))) (if (and t2317@ls/false (apply (lambda (t2319@p? t231a@n) (and (eq? (te6a@syntax->datum t2319@p?) '<=) (t2254@subversion? t231a@n))) t2317@ls/false)) (apply (lambda (t231d@p? t231e@n) (lambda (t2321@x) (<= t2321@x (te6a@syntax->datum t231e@n)))) t2317@ls/false) (let ((t2323@t t2315@t)) (let ((t2325@ls/false (td84@syntax-dispatch t2323@t '(any any)))) (if (and t2325@ls/false (apply (lambda (t2327@p? t2328@n) (and (eq? (te6a@syntax->datum t2327@p?) '>=) (t2254@subversion? t2328@n))) t2325@ls/false)) (apply (lambda (t232b@p? t232c@n) (lambda (t232f@x) (>= t232f@x (te6a@syntax->datum t232c@n)))) t2325@ls/false) (let ((t2331@t t2323@t)) (let ((t2333@ls/false (td84@syntax-dispatch t2331@t '_))) (if t2333@ls/false (apply (lambda () (te64@syntax-violation 'import '"invalid sub-version spec" t2251@spec t22d5@x*)) t2333@ls/false) (te64@syntax-violation '#f '"invalid syntax" t2331@t)))))))))))))))))))))))) (t2258@version-pred (lambda (t2285@x*) (let ((t2287@t t2285@x*)) (let ((t2289@ls/false (td84@syntax-dispatch t2287@t '()))) (if t2289@ls/false (apply (lambda () (lambda (t228b@x) '#t)) t2289@ls/false) (let ((t228d@t t2287@t)) (let ((t228f@ls/false (td84@syntax-dispatch t228d@t '(any . each-any)))) (if (and t228f@ls/false (apply (lambda (t2291@c t2292@ver*) (eq? (te6a@syntax->datum t2291@c) 'and)) t228f@ls/false)) (apply (lambda (t2295@c t2296@ver*) (let ((t2299@p* (map t2258@version-pred t2296@ver*))) (lambda (t229b@x) (for-all (lambda (t229d@p) (t229d@p t229b@x)) t2299@p*)))) t228f@ls/false) (let ((t229f@t t228d@t)) (let ((t22a1@ls/false (td84@syntax-dispatch t229f@t '(any . each-any)))) (if (and t22a1@ls/false (apply (lambda (t22a3@c t22a4@ver*) (eq? (te6a@syntax->datum t22a3@c) 'or)) t22a1@ls/false)) (apply (lambda (t22a7@c t22a8@ver*) (let ((t22ab@p* (map t2258@version-pred t22a8@ver*))) (lambda (t22ad@x) (exists (lambda (t22af@p) (t22af@p t22ad@x)) t22ab@p*)))) t22a1@ls/false) (let ((t22b1@t t229f@t)) (let ((t22b3@ls/false (td84@syntax-dispatch t22b1@t '(any any)))) (if (and t22b3@ls/false (apply (lambda (t22b5@c t22b6@ver) (eq? (te6a@syntax->datum t22b5@c) 'not)) t22b3@ls/false)) (apply (lambda (t22b9@c t22ba@ver) (let ((t22bd@p (t2258@version-pred t22ba@ver))) (lambda (t22bf@x) (not (t22bd@p t22bf@x))))) t22b3@ls/false) (let ((t22c1@t t22b1@t)) (let ((t22c3@ls/false (td84@syntax-dispatch t22c1@t 'each-any))) (if t22c3@ls/false (apply (lambda (t22c5@sub*) (let ((t22c7@p* (map t2256@subversion-pred t22c5@sub*))) (lambda (t22c9@x) (let t22cf@f ((t22cb@p* t22c7@p*) (t22cc@x t22c9@x)) (if (null? t22cb@p*) '#t (if (null? t22cc@x) '#f (and ((car t22cb@p*) (car t22cc@x)) (t22cf@f (cdr t22cb@p*) (cdr t22cc@x))))))))) t22c3@ls/false) (let ((t22d1@t t22c1@t)) (let ((t22d3@ls/false (td84@syntax-dispatch t22d1@t '_))) (if t22d3@ls/false (apply (lambda () (te64@syntax-violation 'import '"invalid version spec" t2251@spec t2285@x*)) t22d3@ls/false) (te64@syntax-violation '#f '"invalid syntax" t22d1@t)))))))))))))))))))))) (let t225b@f ((t2259@x t2251@spec)) (let ((t225d@t t2259@x)) (let ((t225f@ls/false (td84@syntax-dispatch t225d@t '(each-any)))) (if t225f@ls/false (apply (lambda (t2261@version-spec*) (values '() (t2258@version-pred t2261@version-spec*))) t225f@ls/false) (let ((t2263@t t225d@t)) (let ((t2265@ls/false (td84@syntax-dispatch t2263@t '(any . any)))) (if (and t2265@ls/false (apply (lambda (t2267@x t2268@x*) (t2186@idsyn? t2267@x)) t2265@ls/false)) (apply (lambda (t226b@x t226c@x*) (call-with-values (lambda () (t225b@f t226c@x*)) (lambda (t2273@t2270 t2274@t2272) (let ((t2277@pred t2274@t2272) (t2278@name t2273@t2270)) (values (cons (te6a@syntax->datum t226b@x) t2278@name) t2277@pred))))) t2265@ls/false) (let ((t227b@t t2263@t)) (let ((t227d@ls/false (td84@syntax-dispatch t227b@t '()))) (if t227d@ls/false (apply (lambda () (values '() (lambda (t227f@x) '#t))) t227d@ls/false) (let ((t2281@t t227b@t)) (let ((t2283@ls/false (td84@syntax-dispatch t2281@t '_))) (if t2283@ls/false (apply (lambda () (te64@syntax-violation '#f '"invalid import spec" t2251@spec)) t2283@ls/false) (te64@syntax-violation '#f '"invalid syntax" t2281@t))))))))))))))))) (t2196@import-library (lambda (t2241@spec*) (call-with-values (lambda () (t2194@parse-library-name t2241@spec*)) (lambda (t2247@t2244 t2248@t2246) (let ((t224b@pred t2248@t2246) (t224c@name t2247@t2244)) (begin (if (null? t224c@name) (te64@syntax-violation 'import '"empty library name" t2241@spec*) (void)) (let ((t224f@lib (t992@t7d9@find-library-by-name t224c@name))) (begin (if (not t224f@lib) (te64@syntax-violation 'import '"cannot find library with required name" t224c@name) (void)) (if (not (t224b@pred (t96c@t78d@library-version t224f@lib))) (te64@syntax-violation 'import '"library does not satisfy version specification" t2241@spec* t224f@lib) (void)) ((tdf0@imp-collector) t224f@lib) (t974@t79d@library-subst t224f@lib))))))))) (t2198@get-import (lambda (t21b3@spec) (let ((t21b5@t t21b3@spec)) (let ((t21b7@ls/false (td84@syntax-dispatch t21b5@t '(any . each-any)))) (if (and t21b7@ls/false (apply (lambda (t21b9@x t21ba@x*) (not (memq (te6a@syntax->datum t21b9@x) '(for rename except only prefix library)))) t21b7@ls/false)) (apply (lambda (t21bd@x t21be@x*) (t2196@import-library (cons t21bd@x t21be@x*))) t21b7@ls/false) (let ((t21c1@t t21b5@t)) (let ((t21c3@ls/false (td84@syntax-dispatch t21c1@t '(any any . #(each (any any)))))) (if (and t21c3@ls/false (apply (lambda (t21c5@rename t21c6@isp t21c7@old* t21c8@new*) (and (eq? (te6a@syntax->datum t21c5@rename) 'rename) (for-all t2186@idsyn? t21c7@old*) (for-all t2186@idsyn? t21c8@new*))) t21c3@ls/false)) (apply (lambda (t21cd@rename t21ce@isp t21cf@old* t21d0@new*) (let ((t21d5@subst (t2198@get-import t21ce@isp)) (t21d6@old* (map te6a@syntax->datum t21cf@old*)) (t21d7@new* (map te6a@syntax->datum t21d0@new*))) (let ((t21db@old-label* (t218e@find* t21d6@old* t21d5@subst))) (let ((t21dd@subst (t2190@rem* t21d6@old* t21d5@subst))) (t218a@merge-substs (map cons t21d7@new* t21db@old-label*) t21dd@subst))))) t21c3@ls/false) (let ((t21df@t t21c1@t)) (let ((t21e1@ls/false (td84@syntax-dispatch t21df@t '(any any . each-any)))) (if (and t21e1@ls/false (apply (lambda (t21e3@except t21e4@isp t21e5@sym*) (and (eq? (te6a@syntax->datum t21e3@except) 'except) (for-all t2186@idsyn? t21e5@sym*))) t21e1@ls/false)) (apply (lambda (t21e9@except t21ea@isp t21eb@sym*) (let ((t21ef@subst (t2198@get-import t21ea@isp))) (t2190@rem* (map te6a@syntax->datum t21eb@sym*) t21ef@subst))) t21e1@ls/false) (let ((t21f1@t t21df@t)) (let ((t21f3@ls/false (td84@syntax-dispatch t21f1@t '(any any . each-any)))) (if (and t21f3@ls/false (apply (lambda (t21f5@only t21f6@isp t21f7@sym*) (and (eq? (te6a@syntax->datum t21f5@only) 'only) (for-all t2186@idsyn? t21f7@sym*))) t21f3@ls/false)) (apply (lambda (t21fb@only t21fc@isp t21fd@sym*) (let ((t2201@subst (t2198@get-import t21fc@isp)) (t2202@sym* (map te6a@syntax->datum t21fd@sym*))) (let ((t2205@sym* (t2192@remove-dups t2202@sym*))) (let ((t2207@lab* (t218e@find* t2205@sym* t2201@subst))) (map cons t2205@sym* t2207@lab*))))) t21f3@ls/false) (let ((t2209@t t21f1@t)) (let ((t220b@ls/false (td84@syntax-dispatch t2209@t '(any any any)))) (if (and t220b@ls/false (apply (lambda (t220d@prefix t220e@isp t220f@p) (and (eq? (te6a@syntax->datum t220d@prefix) 'prefix) (t2186@idsyn? t220f@p))) t220b@ls/false)) (apply (lambda (t2213@prefix t2214@isp t2215@p) (let ((t2219@subst (t2198@get-import t2214@isp)) (t221a@prefix (symbol->string (te6a@syntax->datum t2215@p)))) (map (lambda (t221d@x) (cons (string->symbol (string-append t221a@prefix (symbol->string (car t221d@x)))) (cdr t221d@x))) t2219@subst))) t220b@ls/false) (let ((t221f@t t2209@t)) (let ((t2221@ls/false (td84@syntax-dispatch t221f@t '(any each-any)))) (if (and t2221@ls/false (apply (lambda (t2223@library t2224@spec*) (eq? (te6a@syntax->datum t2223@library) 'library)) t2221@ls/false)) (apply (lambda (t2227@library t2228@spec*) (t2196@import-library t2228@spec*)) t2221@ls/false) (let ((t222b@t t221f@t)) (let ((t222d@ls/false (td84@syntax-dispatch t222b@t '(any any . any)))) (if (and t222d@ls/false (apply (lambda (t222f@for t2230@isp t2231@rest) (eq? (te6a@syntax->datum t222f@for) 'for)) t222d@ls/false)) (apply (lambda (t2235@for t2236@isp t2237@rest) (t2198@get-import t2236@isp)) t222d@ls/false) (let ((t223b@t t222b@t)) (let ((t223d@ls/false (td84@syntax-dispatch t223b@t 'any))) (if t223d@ls/false (apply (lambda (t223f@spec) (te64@syntax-violation 'import '"invalid import spec" t223f@spec)) t223d@ls/false) (te64@syntax-violation '#f '"invalid syntax" t223b@t))))))))))))))))))))))))))) (t219a@add-imports! (lambda (t21a3@imp t21a4@h) (let ((t21a7@subst (t2198@get-import t21a3@imp))) (for-each (lambda (t21a9@x) (let ((t21ab@name (car t21a9@x)) (t21ac@label (cdr t21a9@x))) (let ((t21af@t (hashtable-ref t21a4@h t21ab@name '#f))) (if t21af@t ((lambda (t21b1@l) (if (not (eq? t21b1@l t21ac@label)) (t2188@dup-error t21ab@name) (void))) t21af@t) (hashtable-set! t21a4@h t21ab@name t21ac@label))))) t21a7@subst))))) (lambda (t219b@imp*) (let t21a1@f ((t219d@imp* t219b@imp*) (t219e@h (make-eq-hashtable))) (if (null? t219d@imp*) (hashtable-entries t219e@h) (begin (t219a@add-imports! (car t219d@imp*) t219e@h) (t21a1@f (cdr t219d@imp*) t219e@h))))))) (set! t28bd@tde6@parse-import-spec* tde6@parse-import-spec*) (set! tde8@make-top-rib (lambda (t2391@names t2392@labels) (let ((t2395@rib (tb31@make-empty-rib))) (begin (vector-for-each (lambda (t2397@name t2398@label) (begin (if (not (symbol? t2397@name)) (error 'make-top-rib '"BUG: not a symbol" t2397@name) (void)) (tb35@extend-rib/nc! t2395@rib (make-simple-struct 'stx '5 (list t2397@name tb01@top-mark* '() '())) t2398@label))) t2391@names t2392@labels) t2395@rib)))) (set! t28be@tde8@make-top-rib tde8@make-top-rib) (set! tdea@make-collector (lambda () (let ((t239b@ls '())) (lambda t239f (let ((t23a0 (length t239f))) (if (= t23a0 '0) (apply (lambda () t239b@ls) t239f) (if (= t23a0 '1) (apply (lambda (t239d@x) (set! t239b@ls (tafa@set-cons t239d@x t239b@ls))) t239f) (error 'apply '"invalid arg count")))))))) (set! t28bf@tdea@make-collector tdea@make-collector) (set! tdec@inv-collector (t6cd@t5ab@make-parameter (lambda t23a1@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (t23a3@x) (begin (if (not (procedure? t23a3@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" t23a3@x) (void)) t23a3@x)))) (set! t28c0@tdec@inv-collector tdec@inv-collector) (set! tdee@vis-collector (t6cd@t5ab@make-parameter (lambda t23a5@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (t23a7@x) (begin (if (not (procedure? t23a7@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" t23a7@x) (void)) t23a7@x)))) (set! t28c1@tdee@vis-collector tdee@vis-collector) (set! tdf0@imp-collector (t6cd@t5ab@make-parameter (lambda t23a9@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (t23ab@x) (begin (if (not (procedure? t23ab@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" t23ab@x) (void)) t23ab@x)))) (set! t28c2@tdf0@imp-collector tdf0@imp-collector) (set! tdf2@chi-library-internal (lambda (t23ad@e* t23ae@rib t23af@top?) (call-with-values (lambda () (tddc@chi-body* t23ad@e* '() '() '() '() '() '() '() t23ae@rib t23af@top?)) (lambda (t23c3@t23b4 t23c4@t23b6 t23c5@t23b8 t23c6@t23ba t23c7@t23bc t23c8@t23be t23c9@t23c0 t23ca@t23c2) (let ((t23d3@exp* t23ca@t23c2) (t23d4@_kwd* t23c9@t23c0) (t23d5@mod** t23c8@t23be) (t23d6@rhs* t23c7@t23bc) (t23d7@lex* t23c6@t23ba) (t23d8@mr t23c5@t23b8) (t23d9@r t23c4@t23b6) (t23da@e* t23c3@t23b4)) (values (append (apply append (reverse t23d5@mod**)) t23da@e*) t23d9@r t23d8@mr (reverse t23d7@lex*) (reverse t23d6@rhs*) t23d3@exp*)))))) (set! t28c3@tdf2@chi-library-internal tdf2@chi-library-internal) (set! tdf4@chi-interaction-expr (lambda (t23e3@e t23e4@rib t23e5@r) (call-with-values (lambda () (tddc@chi-body* (list t23e3@e) t23e5@r t23e5@r '() '() '() '() '() t23e4@rib '#t)) (lambda (t23f9@t23ea t23fa@t23ec t23fb@t23ee t23fc@t23f0 t23fd@t23f2 t23fe@t23f4 t23ff@t23f6 t2400@t23f8) (let ((t2409@_exp* t2400@t23f8) (t240a@_kwd* t23ff@t23f6) (t240b@mod** t23fe@t23f4) (t240c@rhs* t23fd@t23f2) (t240d@lex* t23fc@t23f0) (t240e@mr t23fb@t23ee) (t240f@r t23fa@t23ec) (t2410@e* t23f9@t23ea)) (let ((t2419@e* (tdb4@expand-interaction-rhs*/init* (reverse t240d@lex*) (reverse t240c@rhs*) (append (apply append (reverse t240b@mod**)) t2410@e*) t240f@r t240e@mr))) (let ((t241b@e (if (null? t2419@e*) (tae3@ta44@build-void) (if (null? (cdr t2419@e*)) (car t2419@e*) (tae2@ta42@build-sequence '#f t2419@e*))))) (values t241b@e t240f@r)))))))) (set! t28c4@tdf4@chi-interaction-expr tdf4@chi-interaction-expr) (set! tdf6@library-body-expander (lambda (t241d@name t241e@main-exp* t241f@imp* t2420@b* t2421@top?) (letrec* ((t2428@itc (tdea@make-collector))) (let ((t2431@t242a tdf0@imp-collector) (t2432@t242c te74@top-level-context) (t2433@t242e t2428@itc) (t2434@t2430 '#f)) (let ((t2439@swap (lambda () (begin (let ((t243b@t (t2431@t242a))) (begin (t2431@t242a t2433@t242e) (set! t2433@t242e t243b@t))) (let ((t243d@t (t2432@t242c))) (begin (t2432@t242c t2434@t2430) (set! t2434@t2430 t243d@t))))))) (dynamic-wind t2439@swap (lambda () (call-with-values (lambda () (tde6@parse-import-spec* t241f@imp*)) (lambda (t2443@t2440 t2444@t2442) (let ((t2447@subst-labels t2444@t2442) (t2448@subst-names t2443@t2440)) (let ((t244b@rib (tde8@make-top-rib t2448@subst-names t2447@subst-labels))) (letrec* ((t244e@wrap (lambda (t24c9@x) (make-simple-struct 'stx '5 (list t24c9@x tb01@top-mark* (list t244b@rib) '()))))) (let ((t244f@b* (map t244e@wrap t2420@b*)) (t2450@main-exp* (map t244e@wrap t241e@main-exp*)) (t2451@rtc (tdea@make-collector)) (t2452@vtc (tdea@make-collector))) (let ((t245f@t2458 tdec@inv-collector) (t2460@t245a tdee@vis-collector) (t2461@t245c t2451@rtc) (t2462@t245e t2452@vtc)) (let ((t2467@swap (lambda () (begin (let ((t2469@t (t245f@t2458))) (begin (t245f@t2458 t2461@t245c) (set! t2461@t245c t2469@t))) (let ((t246b@t (t2460@t245a))) (begin (t2460@t245a t2462@t245e) (set! t2462@t245e t246b@t))))))) (dynamic-wind t2467@swap (lambda () (call-with-values (lambda () (tdf2@chi-library-internal t244f@b* t244b@rib t2421@top?)) (lambda (t2479@t246e t247a@t2470 t247b@t2472 t247c@t2474 t247d@t2476 t247e@t2478) (let ((t2485@internal-exp* t247e@t2478) (t2486@rhs* t247d@t2476) (t2487@lex* t247c@t2474) (t2488@mr t247b@t2472) (t2489@r t247a@t2470) (t248a@init* t2479@t246e)) (call-with-values (lambda () (tde0@parse-exports (append t2450@main-exp* t2485@internal-exp*))) (lambda (t2495@t2492 t2496@t2494) (let ((t2499@exp-id* t2496@t2494) (t249a@exp-name* t2495@t2492)) (begin (tb39@seal-rib! t244b@rib) (let ((t249d@init* (tda2@chi-expr* t248a@init* t2489@r t2488@mr))) (let ((t249f@rhs* (tdb6@chi-rhs* t2486@rhs* t2489@r t2488@mr))) (begin (tb3b@unseal-rib! t244b@rib) (let ((t24a1@loc* (map tb07@gen-global t2487@lex*)) (t24a2@export-subst (te4e@make-export-subst t249a@exp-name* t2499@exp-id*))) (letrec* ((t24a6@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (te50@make-export-env/macros t2487@lex* t24a1@loc* t2489@r)) (lambda (t24ad@t24a8 t24ae@t24aa t24af@t24ac) (let ((t24b3@macro* t24af@t24ac) (t24b4@global* t24ae@t24aa) (t24b5@export-env t24ad@t24a8)) (begin (for-each (lambda (t24b9@s) (let ((t24bb@name (car t24b9@s)) (t24bc@label (cdr t24b9@s))) (let ((t24bf@p (assq t24bc@label t24b5@export-env))) (if t24bf@p (let ((t24c1@b (cdr t24bf@p))) (let ((t24c3@type (car t24c1@b))) (if (eq? t24c3@type 'mutable) (te64@syntax-violation 'export t24a6@errstr t24bb@name) (void)))) (void))))) t24a2@export-subst) (let ((t24c5@invoke-body (tae8@ta4e@build-library-letrec* '#f t241d@name t2487@lex* t24a1@loc* t249f@rhs* (if (null? t249d@init*) (tae3@ta44@build-void) (tae2@ta42@build-sequence '#f t249d@init*)))) (t24c6@invoke-definitions (map tadf@t9a1@build-global-define (map cdr t24b4@global*)))) (values (t2428@itc) (t2451@rtc) (t2452@vtc) (tae2@ta42@build-sequence '#f (append t24c6@invoke-definitions (list t24c5@invoke-body))) t24b3@macro* t24a2@export-subst t24b5@export-env))))))))))))))))))) t2467@swap)))))))))) t2439@swap)))))) (set! t28c5@tdf6@library-body-expander tdf6@library-body-expander) (set! tdf8@core-library-expander (lambda (t24cb@e t24cc@verify-name) (call-with-values (lambda () (tde4@parse-library t24cb@e)) (lambda (t24d7@t24d0 t24d8@t24d2 t24d9@t24d4 t24da@t24d6) (let ((t24df@b* t24da@t24d6) (t24e0@imp* t24d9@t24d4) (t24e1@exp* t24d8@t24d2) (t24e2@name* t24d7@t24d0)) (call-with-values (lambda () (tde2@parse-library-name t24e2@name*)) (lambda (t24eb@t24e8 t24ec@t24ea) (let ((t24ef@ver t24ec@t24ea) (t24f0@name t24eb@t24e8)) (begin (t24cc@verify-name t24f0@name) (call-with-values (lambda () (tdf6@library-body-expander t24f0@name t24e1@exp* t24e0@imp* t24df@b* '#f)) (lambda (t2501@t24f4 t2502@t24f6 t2503@t24f8 t2504@t24fa t2505@t24fc t2506@t24fe t2507@t2500) (let ((t250f@export-env t2507@t2500) (t2510@export-subst t2506@t24fe) (t2511@visit-code t2505@t24fc) (t2512@invoke-code t2504@t24fa) (t2513@visit-req* t2503@t24f8) (t2514@invoke-req* t2502@t24f6) (t2515@imp* t2501@t24f4)) (values t24f0@name t24ef@ver t2515@imp* t2514@invoke-req* t2513@visit-req* t2512@invoke-code t2511@visit-code t2510@export-subst t250f@export-env))))))))))))) (set! t28c6@tdf8@core-library-expander tdf8@core-library-expander) (set! tdfa@parse-top-level-program (lambda (t251d@e*) (let ((t251f@t t251d@e*)) (let ((t2521@ls/false (td84@syntax-dispatch t251f@t '((any . each-any) . each-any)))) (if (and t2521@ls/false (apply (lambda (t2523@import t2524@imp* t2525@b*) (eq? (te6a@syntax->datum t2523@import) 'import)) t2521@ls/false)) (apply (lambda (t2529@import t252a@imp* t252b@b*) (values t252a@imp* t252b@b*)) t2521@ls/false) (let ((t252f@t t251f@t)) (let ((t2531@ls/false (td84@syntax-dispatch t252f@t '((any . any) . any)))) (if (and t2531@ls/false (apply (lambda (t2533@import t2534@x t2535@y) (eq? (te6a@syntax->datum t2533@import) 'import)) t2531@ls/false)) (apply (lambda (t2539@import t253a@x t253b@y) (te64@syntax-violation 'expander '"invalid syntax of top-level program" (tb77@syntax-car t251d@e*))) t2531@ls/false) (let ((t253f@t t252f@t)) (let ((t2541@ls/false (td84@syntax-dispatch t253f@t '_))) (if t2541@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) t2541@ls/false) (te64@syntax-violation '#f '"invalid syntax" t253f@t)))))))))))) (set! t28c7@tdfa@parse-top-level-program tdfa@parse-top-level-program) (set! tdfc@top-level-expander (lambda (t2543@e*) (call-with-values (lambda () (tdfa@parse-top-level-program t2543@e*)) (lambda (t2549@t2546 t254a@t2548) (let ((t254d@b* t254a@t2548) (t254e@imp* t2549@t2546)) (call-with-values (lambda () (tdf6@library-body-expander '() '() t254e@imp* t254d@b* '#t)) (lambda (t255f@t2552 t2560@t2554 t2561@t2556 t2562@t2558 t2563@t255a t2564@t255c t2565@t255e) (let ((t256d@export-env t2565@t255e) (t256e@export-subst t2564@t255c) (t256f@visit-code t2563@t255a) (t2570@invoke-code t2562@t2558) (t2571@visit-req* t2561@t2556) (t2572@invoke-req* t2560@t2554) (t2573@imp* t255f@t2552)) (values t2572@invoke-req* t2570@invoke-code))))))))) (set! t28c8@tdfc@top-level-expander tdfc@top-level-expander) (set! tdfe@rp (t6ca@t5a5@make-record-printer 'env (lambda (t257b@x t257c@p t257d@wr) (display '"#<environment>" t257c@p)))) (set! t28c9@tdfe@rp tdfe@rp) (set! te08@env? (lambda (t2581@x) (and (simple-struct? t2581@x) (eq? (simple-struct-name t2581@x) 'env)))) (set! t28ca@te08@env? te08@env?) (set! te0a@env-names (lambda (t2583@x) (simple-struct-ref t2583@x '0))) (set! t28cb@te0a@env-names te0a@env-names) (set! te0c@set-env-names! (lambda (t2585@x t2586@val) (simple-struct-set! t2585@x '0 t2586@val))) (set! t28cc@te0c@set-env-names! te0c@set-env-names!) (set! te0e@env-labels (lambda (t2589@x) (simple-struct-ref t2589@x '1))) (set! t28cd@te0e@env-labels te0e@env-labels) (set! te10@set-env-labels! (lambda (t258b@x t258c@val) (simple-struct-set! t258b@x '1 t258c@val))) (set! t28ce@te10@set-env-labels! te10@set-env-labels!) (set! te12@env-itc (lambda (t258f@x) (simple-struct-ref t258f@x '2))) (set! t28cf@te12@env-itc te12@env-itc) (set! te14@set-env-itc! (lambda (t2591@x t2592@val) (simple-struct-set! t2591@x '2 t2592@val))) (set! t28d0@te14@set-env-itc! te14@set-env-itc!) (set! te16@dummy '3) (set! t28d1@te16@dummy te16@dummy) (set! te18@rp (t6ca@t5a5@make-record-printer 'interaction-env (lambda (t2595@x t2596@p t2597@wr) (display '"#<environment>" t2596@p)))) (set! t28d2@te18@rp te18@rp) (set! te22@interaction-env? (lambda (t259b@x) (and (simple-struct? t259b@x) (eq? (simple-struct-name t259b@x) 'interaction-env)))) (set! t28d3@te22@interaction-env? te22@interaction-env?) (set! te24@interaction-env-rib (lambda (t259d@x) (simple-struct-ref t259d@x '0))) (set! t28d4@te24@interaction-env-rib te24@interaction-env-rib) (set! te26@set-interaction-env-rib! (lambda (t259f@x t25a0@val) (simple-struct-set! t259f@x '0 t25a0@val))) (set! t28d5@te26@set-interaction-env-rib! te26@set-interaction-env-rib!) (set! te28@interaction-env-r (lambda (t25a3@x) (simple-struct-ref t25a3@x '1))) (set! t28d6@te28@interaction-env-r te28@interaction-env-r) (set! te2a@set-interaction-env-r! (lambda (t25a5@x t25a6@val) (simple-struct-set! t25a5@x '1 t25a6@val))) (set! t28d7@te2a@set-interaction-env-r! te2a@set-interaction-env-r!) (set! te2c@interaction-env-locs (lambda (t25a9@x) (simple-struct-ref t25a9@x '2))) (set! t28d8@te2c@interaction-env-locs te2c@interaction-env-locs) (set! te2e@set-interaction-env-locs! (lambda (t25ab@x t25ac@val) (simple-struct-set! t25ab@x '2 t25ac@val))) (set! t28d9@te2e@set-interaction-env-locs! te2e@set-interaction-env-locs!) (set! te30@dummy '3) (set! t28da@te30@dummy te30@dummy) (set! te32@interaction-environment-symbols (lambda () (te3a@environment-symbols (te72@interaction-environment)))) (set! t28db@te32@interaction-environment-symbols te32@interaction-environment-symbols) (set! te34@environment-bindings (lambda (t25af@e) (vector->list (vector-map (lambda (t25b1@name t25b2@label) (te36@parse-binding (cons t25b1@name (t998@t7e5@imported-label->binding t25b2@label)))) (te0a@env-names t25af@e) (te0e@env-labels t25af@e))))) (set! t28dc@te34@environment-bindings te34@environment-bindings) (set! te36@parse-binding (lambda (t25b5@b) (cons (car t25b5@b) (let ((t25b7@t (cadr t25b5@b))) (if (memv t25b7@t '(core-prim global)) 'procedure (if (memv t25b7@t '(core-macro macro global-macro)) 'syntax (if (memv t25b7@t '($core-rtd)) 'record (if (eq? (car t25b5@b) (cadr t25b5@b)) 'syntax 'unknown)))))))) (set! t28dd@te36@parse-binding te36@parse-binding) (set! te38@environment? (lambda (t25b9@x) (or (te08@env? t25b9@x) (te22@interaction-env? t25b9@x)))) (set! t28de@te38@environment? te38@environment?) (set! te3a@environment-symbols (lambda (t25bb@x) (if (te08@env? t25bb@x) (vector->list (te0a@env-names t25bb@x)) (if (te22@interaction-env? t25bb@x) (map values (tb1b@rib-sym* (te24@interaction-env-rib t25bb@x))) (assertion-violation 'environment-symbols '"not an environment" t25bb@x))))) (set! t28df@te3a@environment-symbols te3a@environment-symbols) (set! te3c@environment (lambda t25bd@imp* (let ((t25bf@itc (tdea@make-collector))) (let ((t25c5@t25c2 tdf0@imp-collector) (t25c6@t25c4 t25bf@itc)) (let ((t25c9@swap (lambda () (let ((t25cb@t (t25c5@t25c2))) (begin (t25c5@t25c2 t25c6@t25c4) (set! t25c6@t25c4 t25cb@t)))))) (dynamic-wind t25c9@swap (lambda () (call-with-values (lambda () (tde6@parse-import-spec* t25bd@imp*)) (lambda (t25d1@t25ce t25d2@t25d0) (let ((t25d5@subst-labels t25d2@t25d0) (t25d6@subst-names t25d1@t25ce)) (make-simple-struct 'env '4 (list t25d6@subst-names t25d5@subst-labels t25bf@itc)))))) t25c9@swap)))))) (set! t28e0@te3c@environment te3c@environment) (set! te3e@null-environment (lambda (t25d9@n) (begin (if (not (eqv? t25d9@n '5)) (assertion-violation 'null-environment '"not 5" t25d9@n) (void)) (te3c@environment '(psyntax null-environment-5))))) (set! t28e1@te3e@null-environment te3e@null-environment) (set! te40@scheme-report-environment (lambda (t25db@n) (begin (if (not (eqv? t25db@n '5)) (assertion-violation 'scheme-report-environment '"not 5" t25db@n) (void)) (te3c@environment '(psyntax scheme-report-environment-5))))) (set! t28e2@te40@scheme-report-environment te40@scheme-report-environment) (set! te42@expand (lambda (t25dd@x t25de@env) (if (te08@env? t25de@env) (let ((t25e1@rib (tde8@make-top-rib (te0a@env-names t25de@env) (te0e@env-labels t25de@env)))) (let ((t25e3@x (make-simple-struct 'stx '5 (list t25dd@x tb01@top-mark* (list t25e1@rib) '()))) (t25e4@itc (te12@env-itc t25de@env)) (t25e5@rtc (tdea@make-collector)) (t25e6@vtc (tdea@make-collector))) (let ((t25eb@x (let ((t25fd@t25ee te74@top-level-context) (t25fe@t25f0 tdec@inv-collector) (t25ff@t25f2 tdee@vis-collector) (t2600@t25f4 tdf0@imp-collector) (t2601@t25f6 '#f) (t2602@t25f8 t25e5@rtc) (t2603@t25fa t25e6@vtc) (t2604@t25fc t25e4@itc)) (let ((t260d@swap (lambda () (begin (let ((t260f@t (t25fd@t25ee))) (begin (t25fd@t25ee t2601@t25f6) (set! t2601@t25f6 t260f@t))) (let ((t2611@t (t25fe@t25f0))) (begin (t25fe@t25f0 t2602@t25f8) (set! t2602@t25f8 t2611@t))) (let ((t2613@t (t25ff@t25f2))) (begin (t25ff@t25f2 t2603@t25fa) (set! t2603@t25fa t2613@t))) (let ((t2615@t (t2600@t25f4))) (begin (t2600@t25f4 t2604@t25fc) (set! t2604@t25fc t2615@t))))))) (dynamic-wind t260d@swap (lambda () (tda6@chi-expr t25e3@x '() '())) t260d@swap))))) (begin (tb39@seal-rib! t25e1@rib) (values t25eb@x (t25e5@rtc)))))) (if (te22@interaction-env? t25de@env) (let ((t2617@rib (te24@interaction-env-rib t25de@env)) (t2618@r (te28@interaction-env-r t25de@env)) (t2619@rtc (tdea@make-collector))) (let ((t261d@x (make-simple-struct 'stx '5 (list t25dd@x tb01@top-mark* (list t2617@rib) '())))) (call-with-values (lambda () (let ((t2633@t2624 te74@top-level-context) (t2634@t2626 tdec@inv-collector) (t2635@t2628 tdee@vis-collector) (t2636@t262a tdf0@imp-collector) (t2637@t262c t25de@env) (t2638@t262e t2619@rtc) (t2639@t2630 (tdea@make-collector)) (t263a@t2632 (tdea@make-collector))) (let ((t2643@swap (lambda () (begin (let ((t2645@t (t2633@t2624))) (begin (t2633@t2624 t2637@t262c) (set! t2637@t262c t2645@t))) (let ((t2647@t (t2634@t2626))) (begin (t2634@t2626 t2638@t262e) (set! t2638@t262e t2647@t))) (let ((t2649@t (t2635@t2628))) (begin (t2635@t2628 t2639@t2630) (set! t2639@t2630 t2649@t))) (let ((t264b@t (t2636@t262a))) (begin (t2636@t262a t263a@t2632) (set! t263a@t2632 t264b@t))))))) (dynamic-wind t2643@swap (lambda () (tdf4@chi-interaction-expr t261d@x t2617@rib t2618@r)) t2643@swap)))) (lambda (t264d@t2620 t264e@t2622) (let ((t2651@r^ t264e@t2622) (t2652@e t264d@t2620)) (begin (te2a@set-interaction-env-r! t25de@env t2651@r^) (values t2652@e (t2619@rtc)))))))) (assertion-violation 'expand '"not an environment" t25de@env))))) (set! t28e3@te42@expand te42@expand) (set! te44@eval (lambda (t2655@x t2656@env) (begin (if (not (te38@environment? t2656@env)) (error 'eval '"not an environment" t2656@env) (void)) (call-with-values (lambda () (te42@expand t2655@x t2656@env)) (lambda (t265d@t265a t265e@t265c) (let ((t2661@invoke-req* t265e@t265c) (t2662@x t265d@t265a)) (begin (for-each t999@t7e7@invoke-library t2661@invoke-req*) (eval-core (t723@t6db@expanded->core t2662@x))))))))) (set! t28e4@te44@eval te44@eval) (set! te46@library-expander (lambda t26d3 (let ((t26d4 (length t26d3))) (if (= t26d4 '3) (apply (lambda (t2665@x t2666@filename t2667@verify-name) (letrec* ((t266c@build-visit-code (lambda (t26c1@macro*) (if (null? t26c1@macro*) (tae3@ta44@build-void) (tae2@ta42@build-sequence '#f (map (lambda (t26c3@x) (let ((t26c5@loc (car t26c3@x)) (t26c6@src (cddr t26c3@x))) (list 'set! t26c5@loc t26c6@src))) t26c1@macro*))))) (t266e@visit! (lambda (t26b9@macro*) (for-each (lambda (t26bb@x) (let ((t26bd@loc (car t26bb@x)) (t26be@proc (cadr t26bb@x))) (set-symbol-value! t26bd@loc t26be@proc))) t26b9@macro*)))) (call-with-values (lambda () (tdf8@core-library-expander t2665@x t2667@verify-name)) (lambda (t2681@t2670 t2682@t2672 t2683@t2674 t2684@t2676 t2685@t2678 t2686@t267a t2687@t267c t2688@t267e t2689@t2680) (let ((t2693@export-env t2689@t2680) (t2694@export-subst t2688@t267e) (t2695@macro* t2687@t267c) (t2696@invoke-code t2686@t267a) (t2697@vis* t2685@t2678) (t2698@inv* t2684@t2676) (t2699@imp* t2683@t2674) (t269a@ver t2682@t2672) (t269b@name t2681@t2670)) (let ((t26a5@id (gensym)) (t26a6@name t269b@name) (t26a7@ver t269a@ver) (t26a8@imp* (map t99d@t7ef@library-spec t2699@imp*)) (t26a9@vis* (map t99d@t7ef@library-spec t2697@vis*)) (t26aa@inv* (map t99d@t7ef@library-spec t2698@inv*)) (t26ab@visit-proc (lambda () (t266e@visit! t2695@macro*))) (t26ac@invoke-proc (lambda () (eval-core (t723@t6db@expanded->core t2696@invoke-code)))) (t26ad@visit-code (t266c@build-visit-code t2695@macro*)) (t26ae@invoke-code t2696@invoke-code)) (begin (t997@t7e3@install-library t26a5@id t26a6@name t26a7@ver t26a8@imp* t26a9@vis* t26aa@inv* t2694@export-subst t2693@export-env t26ab@visit-proc t26ac@invoke-proc t26ad@visit-code t26ae@invoke-code '#t t2666@filename) (values t26a5@id t26a6@name t26a7@ver t26a8@imp* t26a9@vis* t26aa@inv* t26ae@invoke-code t26ad@visit-code t2694@export-subst t2693@export-env)))))))) t26d3) (if (= t26d4 '2) (apply (lambda (t26c9@x t26ca@filename) (te46@library-expander t26c9@x t26ca@filename (lambda (t26cd@x) (values)))) t26d3) (if (= t26d4 '1) (apply (lambda (t26cf@x) (te46@library-expander t26cf@x '#f (lambda (t26d1@x) (values)))) t26d3) (error 'apply '"invalid arg count"))))))) (set! t28e5@te46@library-expander te46@library-expander) (set! te48@boot-library-expand (lambda (t26d5@x) (call-with-values (lambda () (te46@library-expander t26d5@x)) (lambda (t26eb@t26d8 t26ec@t26da t26ed@t26dc t26ee@t26de t26ef@t26e0 t26f0@t26e2 t26f1@t26e4 t26f2@t26e6 t26f3@t26e8 t26f4@t26ea) (let ((t26ff@export-env t26f4@t26ea) (t2700@export-subst t26f3@t26e8) (t2701@visit-code t26f2@t26e6) (t2702@invoke-code t26f1@t26e4) (t2703@inv* t26f0@t26e2) (t2704@vis* t26ef@t26e0) (t2705@imp* t26ee@t26de) (t2706@ver t26ed@t26dc) (t2707@name t26ec@t26da) (t2708@id t26eb@t26d8)) (values t2707@name t2702@invoke-code t2700@export-subst t26ff@export-env)))))) (set! t28e6@te48@boot-library-expand te48@boot-library-expand) (set! te4a@rev-map-append (lambda (t2713@f t2714@ls t2715@ac) (if (null? t2714@ls) t2715@ac (te4a@rev-map-append t2713@f (cdr t2714@ls) (cons (t2713@f (car t2714@ls)) t2715@ac))))) (set! t28e7@te4a@rev-map-append te4a@rev-map-append) (set! te4c@build-exports (lambda (t2719@lex*+loc* t271a@init*) (tae2@ta42@build-sequence '#f (cons (tae3@ta44@build-void) (te4a@rev-map-append (lambda (t271d@x) (list 'set! (cdr t271d@x) (car t271d@x))) t2719@lex*+loc* t271a@init*))))) (set! t28e8@te4c@build-exports te4c@build-exports) (set! te4e@make-export-subst (lambda (t271f@name* t2720@id*) (map (lambda (t2723@name t2724@id) (let ((t2727@label (tb93@id->label t2724@id))) (begin (if (not t2727@label) (te64@syntax-violation '#f '"cannot export unbound identifier" t2724@id) (void)) (cons t2723@name t2727@label)))) t271f@name* t2720@id*))) (set! t28e9@te4e@make-export-subst te4e@make-export-subst) (set! te50@make-export-env/macros (lambda (t2729@lex* t272a@loc* t272b@r) (letrec* ((t2730@lookup (lambda (t274d@x) (let t2755@f ((t274f@x t274d@x) (t2750@lex* t2729@lex*) (t2751@loc* t272a@loc*)) (if (pair? t2750@lex*) (if (eq? t274f@x (car t2750@lex*)) (car t2751@loc*) (t2755@f t274f@x (cdr t2750@lex*) (cdr t2751@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let t2739@f ((t2731@r t272b@r) (t2732@env '()) (t2733@global* '()) (t2734@macro* '())) (if (null? t2731@r) (values t2732@env t2733@global* t2734@macro*) (let ((t273b@x (car t2731@r))) (let ((t273d@label (car t273b@x)) (t273e@b (cdr t273b@x))) (let ((t2741@t (tb99@binding-type t273e@b))) (if (memv t2741@t '(lexical)) (let ((t2743@v (tb9b@binding-value t273e@b))) (let ((t2745@loc (t2730@lookup (td0e@lexical-var t2743@v))) (t2746@type (if (td10@lexical-mutable? t2743@v) 'mutable 'global))) (t2739@f (cdr t2731@r) (cons (cons* t273d@label t2746@type t2745@loc) t2732@env) (cons (cons (td0e@lexical-var t2743@v) t2745@loc) t2733@global*) t2734@macro*))) (if (memv t2741@t '(local-macro)) (let ((t2749@loc (gensym))) (t2739@f (cdr t2731@r) (cons (cons* t273d@label 'global-macro t2749@loc) t2732@env) t2733@global* (cons (cons t2749@loc (tb9b@binding-value t273e@b)) t2734@macro*))) (if (memv t2741@t '(local-macro!)) (let ((t274b@loc (gensym))) (t2739@f (cdr t2731@r) (cons (cons* t273d@label 'global-macro! t274b@loc) t2732@env) t2733@global* (cons (cons t274b@loc (tb9b@binding-value t273e@b)) t2734@macro*))) (if (memv t2741@t '($rtd $module)) (t2739@f (cdr t2731@r) (cons t273b@x t2732@env) t2733@global* t2734@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (tb99@binding-type t273e@b) (tb9b@binding-value t273e@b)))))))))))))) (set! t28ea@te50@make-export-env/macros te50@make-export-env/macros) (set! te52@generate-temporaries (lambda (t2757@ls) (let ((t2759@t t2757@ls)) (let ((t275b@ls/false (td84@syntax-dispatch t2759@t 'each-any))) (if t275b@ls/false (apply (lambda (t275d@ls) (map (lambda (t275f@x) (make-simple-struct 'stx '5 (list (let ((t2761@x (te6a@syntax->datum t275f@x))) (if (or (symbol? t2761@x) (string? t2761@x)) (gensym t2761@x) (gensym 't))) tb01@top-mark* '() '()))) t275d@ls)) t275b@ls/false) (let ((t2763@t t2759@t)) (let ((t2765@ls/false (td84@syntax-dispatch t2763@t '_))) (if t2765@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) t2765@ls/false) (te64@syntax-violation '#f '"invalid syntax" t2763@t))))))))) (set! t28eb@te52@generate-temporaries te52@generate-temporaries) (set! te54@free-identifier=? (lambda (t2767@x t2768@y) (if (tb7d@id? t2767@x) (if (tb7d@id? t2768@y) (tb83@free-id=? t2767@x t2768@y) (assertion-violation 'free-identifier=? '"not an identifier" t2768@y)) (assertion-violation 'free-identifier=? '"not an identifier" t2767@x)))) (set! t28ec@te54@free-identifier=? te54@free-identifier=?) (set! te56@bound-identifier=? (lambda (t276b@x t276c@y) (if (tb7d@id? t276b@x) (if (tb7d@id? t276c@y) (tb81@bound-id=? t276b@x t276c@y) (assertion-violation 'bound-identifier=? '"not an identifier" t276c@y)) (assertion-violation 'bound-identifier=? '"not an identifier" t276b@x)))) (set! t28ed@te56@bound-identifier=? te56@bound-identifier=?) (set! te58@make-source-condition (lambda (t276f@x) (letrec* ((t2779@t2774 (make-record-type-descriptor '&source-information &condition-rtd 't2777 '#f '#f '#((immutable file-name) (immutable line)))) (t277b@t2776 '#f) (t277d@t2775 (make-record-constructor-descriptor t2779@t2774 &condition-rcd t277b@t2776)) (t2780@t2773 (record-predicate t2779@t2774)) (t2782@make-source-condition (record-constructor t277d@t2775)) (t2784@t2771 (record-accessor t2779@t2774 '0)) (t2786@t2772 (record-accessor t2779@t2774 '1)) (t2788@source-condition? (condition-predicate t2779@t2774)) (t278a@source-filename (condition-accessor t2779@t2774 t2784@t2771)) (t278c@source-character (condition-accessor t2779@t2774 t2786@t2772))) (if (and (pair? t276f@x) (pair? (cdr t276f@x))) (t2782@make-source-condition (car t276f@x) (cadr t276f@x)) (condition))))) (set! t28ee@te58@make-source-condition te58@make-source-condition) (set! te5a@extract-position-condition (lambda (t278d@x) (te58@make-source-condition (te5c@expression-position t278d@x)))) (set! t28ef@te5a@extract-position-condition te5a@extract-position-condition) (set! te5c@expression-position (lambda (t278f@x) (and (tb49@stx? t278f@x) (let ((t2791@x (tb4b@stx-expr t278f@x))) (and (t6c1@t593@annotation? t2791@x) (t6c2@t595@annotation-source t2791@x)))))) (set! t28f0@te5c@expression-position te5c@expression-position) (set! te5e@assertion-error (lambda (t2793@expr t2794@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list t2793@expr)) (te58@make-source-condition t2794@pos))))) (set! t28f1@te5e@assertion-error te5e@assertion-error) (set! te60@syntax-error (lambda (t2797@x . t2799@args) (begin (if (not (for-all string? t2799@args)) (assertion-violation 'syntax-error '"invalid argument" t2799@args) (void)) (raise (condition (make-message-condition (if (null? t2799@args) '"invalid syntax" (apply string-append t2799@args))) (make-syntax-violation (te6a@syntax->datum t2797@x) '#f) (te5a@extract-position-condition t2797@x)))))) (set! t28f2@te60@syntax-error te60@syntax-error) (set! te62@syntax-violation* (lambda (t279b@who t279c@msg t279d@form t279e@condition-object) (begin (if (not (string? t279c@msg)) (assertion-violation 'syntax-violation '"message is not a string" t279c@msg) (void)) (let ((t27a3@who (if (or (string? t279b@who) (symbol? t279b@who)) t279b@who (if (not t279b@who) (let ((t27a5@t t279d@form)) (let ((t27a7@ls/false (td84@syntax-dispatch t27a5@t 'any))) (if (and t27a7@ls/false (apply (lambda (t27a9@id) (tb7d@id? t27a9@id)) t27a7@ls/false)) (apply (lambda (t27ab@id) (te6a@syntax->datum t27ab@id)) t27a7@ls/false) (let ((t27ad@t t27a5@t)) (let ((t27af@ls/false (td84@syntax-dispatch t27ad@t '(any . any)))) (if (and t27af@ls/false (apply (lambda (t27b1@id t27b2@rest) (tb7d@id? t27b1@id)) t27af@ls/false)) (apply (lambda (t27b5@id t27b6@rest) (te6a@syntax->datum t27b5@id)) t27af@ls/false) (let ((t27b9@t t27ad@t)) (let ((t27bb@ls/false (td84@syntax-dispatch t27b9@t '_))) (if t27bb@ls/false (apply (lambda () '#f) t27bb@ls/false) (te64@syntax-violation '#f '"invalid syntax" t27b9@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" t279b@who))))) (raise (condition (if t27a3@who (make-who-condition t27a3@who) (condition)) (make-message-condition t279c@msg) t279e@condition-object (te5a@extract-position-condition t279d@form))))))) (set! t28f3@te62@syntax-violation* te62@syntax-violation*) (set! te64@syntax-violation (lambda t27cb (let ((t27cc (length t27cb))) (if (= t27cc '3) (apply (lambda (t27bd@who t27be@msg t27bf@form) (te64@syntax-violation t27bd@who t27be@msg t27bf@form '#f)) t27cb) (if (= t27cc '4) (apply (lambda (t27c3@who t27c4@msg t27c5@form t27c6@subform) (te62@syntax-violation* t27c3@who t27c4@msg t27c5@form (make-syntax-violation (te6a@syntax->datum t27c5@form) (te6a@syntax->datum t27c6@subform)))) t27cb) (error 'apply '"invalid arg count")))))) (set! t28f4@te64@syntax-violation te64@syntax-violation) (set! te66@identifier? (lambda (t27cd@x) (tb7d@id? t27cd@x))) (set! t28f5@te66@identifier? te66@identifier?) (set! te68@datum->syntax (lambda (t27cf@id t27d0@datum) (if (tb7d@id? t27cf@id) (tb5d@datum->stx t27cf@id t27d0@datum) (assertion-violation 'datum->syntax '"not an identifier" t27cf@id)))) (set! t28f6@te68@datum->syntax te68@datum->syntax) (set! te6a@syntax->datum (lambda (t27d3@x) (tb91@stx->datum t27d3@x))) (set! t28f7@te6a@syntax->datum te6a@syntax->datum) (set! te6c@ungensym-all (lambda (t27d5@code) (if (pair? t27d5@code) (cons (te6c@ungensym-all (car t27d5@code)) (te6c@ungensym-all (cdr t27d5@code))) (if (symbol? t27d5@code) (ungensym t27d5@code) t27d5@code)))) (set! t28f8@te6c@ungensym-all te6c@ungensym-all) (set! te6e@compile-r6rs-top-level (lambda (t27d7@x*) (call-with-values (lambda () (tdfc@top-level-expander t27d7@x*)) (lambda (t27dd@t27da t27de@t27dc) (let ((t27e1@invoke-code t27de@t27dc) (t27e2@lib* t27dd@t27da)) (lambda () (begin (for-each t999@t7e7@invoke-library t27e2@lib*) (let ((t27e5@expanded (t723@t6db@expanded->core t27e1@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (te6c@ungensym-all t27e5@expanded)) (void)) (eval-core t27e5@expanded)))))))))) (set! t28f9@te6e@compile-r6rs-top-level te6e@compile-r6rs-top-level) (set! te70@pre-compile-r6rs-top-level (lambda (t27e7@x*) (call-with-values (lambda () (tdfc@top-level-expander t27e7@x*)) (lambda (t27ed@t27ea t27ee@t27ec) (let ((t27f1@invoke-code t27ee@t27ec) (t27f2@lib* t27ed@t27ea)) (begin (for-each t999@t7e7@invoke-library t27f2@lib*) (t6cb@t5a7@compile-core (t723@t6db@expanded->core t27f1@invoke-code)))))))) (set! t28fa@te70@pre-compile-r6rs-top-level te70@pre-compile-r6rs-top-level) (set! te72@interaction-environment (let ((t27f5@the-env '#f)) (lambda () (or t27f5@the-env (let ((t27f7@lib (t992@t7d9@find-library-by-name '(mosh interaction))) (t27f8@rib (tb31@make-empty-rib))) (begin (let ((t27fb@subst (t974@t79d@library-subst t27f7@lib))) (begin (tb1d@set-rib-sym*! t27f8@rib (map car t27fb@subst)) (tb21@set-rib-mark**! t27f8@rib (map (lambda (t27fd@x) tb01@top-mark*) t27fb@subst)) (tb25@set-rib-label*! t27f8@rib (map cdr t27fb@subst)))) (let ((t27ff@env (make-simple-struct 'interaction-env '4 (list t27f8@rib '() '())))) (begin (set! t27f5@the-env t27ff@env) t27ff@env)))))))) (set! t28fb@te72@interaction-environment te72@interaction-environment) (set! te74@top-level-context (t6cd@t5ab@make-parameter '#f)) (set! t28fc@te74@top-level-context te74@top-level-context) (t98f@t7d3@current-library-expander te46@library-expander))
(begin (begin (t720@t6d5@current-primitive-locations (lambda (t2e57@x) (let ((t2e59@t (assq t2e57@x '((syntax-error . t28f2@te60@syntax-error) (syntax-dispatch . t2890@td84@syntax-dispatch) (load . t2a7c@t2923@load) (interaction-environment . t28fb@te72@interaction-environment) (library-path . t987@t7c3@library-path) (mosh-cache-dir . t6ce@t5ad@mosh-cache-dir) (make-parameter . t6cd@t5ab@make-parameter) (make-variable-transformer . t284d@tbaf@make-variable-transformer) (identifier? . t28f5@te66@identifier?) (generate-temporaries . t28eb@te52@generate-temporaries) (free-identifier=? . t28ec@te54@free-identifier=?) (syntax->datum . t28f7@te6a@syntax->datum) (datum->syntax . t28f6@te68@datum->syntax) (bound-identifier=? . t28ed@te56@bound-identifier=?) (scheme-report-environment . t28e2@te40@scheme-report-environment) (null-environment . t28e1@te3e@null-environment) (command-line . t2a79@t291d@command-line) (eval . t28e4@te44@eval) (environment . t28e0@te3c@environment) (syntax-violation . t28f4@te64@syntax-violation) (assertion-error . t28f1@te5e@assertion-error))))) (if t2e59@t (cdr t2e59@t) '#f)))) (t997@t7e3@install-library 't2e34 '(mosh interaction) '() '() '() '() '((regexp? . t2df4) (alist->eq-hash-table . t2df0) (format . t2ded) (string-split . t2ddd) (call-process . t2dd6) (set-current-directory! . t2dd2) (expand-path . t2dd1) (current-directory . t2dd0) (%getpid . t2dcf) (%spawn . t2dce) (%waitpid . t2dcd) (simple-struct-name . t2dcc) (simple-struct-set! . t2dcb) (simple-struct-ref . t2dca) (make-simple-struct . t2dc9) (simple-struct? . t2dc8) (pointer-ref-c-int64 . t2dc7) (pointer-ref-c-int32 . t2dc6) (pointer-ref-c-int16 . t2dc5) (pointer-ref-c-int8 . t2dc4) (pointer-ref-c-uint64 . t2dc3) (pointer-ref-c-uint32 . t2dc2) (pointer-ref-c-uint16 . t2dc1) (pointer-ref-c-uint8 . t2dc0) (pointer-set-c-uint64! . t2dbf) (pointer-set-c-uint32! . t2dbe) (pointer-set-c-uint16! . t2dbd) (pointer-set-c-uint8! . t2dbc) (pointer-set-c-int64! . t2dbb) (pointer-set-c-int32! . t2dba) (pointer-set-c-int16! . t2db9) (pointer-set-c-int8! . t2db8) (pointer-set-c-pointer! . t2db7) (pointer-set-c-double! . t2db6) (pointer-set-c-float! . t2db5) (pointer-set-c-long-long! . t2db4) (pointer-set-c-long! . t2db3) (pointer-set-c-int! . t2db2) (pointer-set-c-short! . t2db1) (pointer-set-c-char! . t2db0) (pointer-ref-c-pointer . t2daf) (pointer-ref-c-double . t2dae) (pointer-ref-c-float . t2dad) (pointer-ref-c-unsigned-long-long . t2dac) (pointer-ref-c-signed-long-long . t2dab) (pointer-ref-c-unsigned-long . t2daa) (pointer-ref-c-signed-long . t2da9) (pointer-ref-c-unsigned-int . t2da8) (pointer-ref-c-signed-int . t2da7) (pointer-ref-c-unsigned-short . t2da6) (pointer-ref-c-signed-short . t2da5) (pointer-ref-c-unsigned-char . t2da4) (pointer-ref-c-signed-char . t2da3) (pointer->integer . t2da2) (integer->pointer . t2da1) (pointer? . t2da0) (shared-errno . t2d9f) (%ffi-supported? . t2d9a) (%ffi-pointer->string . t2d99) (%ffi-call . t2d98) (%ffi-lookup . t2d97) (%ffi-open . t2d96) (null-terminated-utf8->string . t2d95) (null-terminated-bytevector->string . t2d94) (%exec . t2d93) (%fork . t2d92) (%pipe . t2d91) (p . t2d90) (whereis . t2d74) (register . t2d73) (vm-join! . t2d72) (vm-set-value! . t2d71) (vm? . t2d70) (main-vm? . t2d6f) (vm-eval . t2d6e) (vm-self . t2d6d) (vm-start! . t2d6c) (make-vm . t2d6b) (mutex-try-lock! . t2d6a) (mutex-unlock! . t2d69) (mutex-lock! . t2d68) (mutex? . t2d67) (make-mutex . t2d66) (condition-variable-notify-all! . t2d65) (condition-variable-notify! . t2d64) (condition-variable-wait! . t2d63) (make-condition-variable . t2d62) (write/ss . t2d61) (string-upcase . t2d44) (string-titlecase . t2d43) (string-normalize-nfkd . t2d42) (string-normalize-nfkc . t2d41) (string-normalize-nfd . t2d40) (string-normalize-nfc . t2d3f) (string-foldcase . t2d3e) (string-downcase . t2d3d) (string-ci>? . t2d3c) (string-ci>=? . t2d3b) (string-ci=? . t2d3a) (string-ci<? . t2d39) (string-ci<=? . t2d38) (char-whitespace? . t2d37) (char-upper-case? . t2d36) (char-title-case? . t2d35) (char-numeric? . t2d34) (char-lower-case? . t2d33) (char-general-category . t2d32) (char-upcase . t2d31) (char-titlecase . t2d30) (char-foldcase . t2d2f) (char-downcase . t2d2e) (char-ci>? . t2d2d) (char-ci>=? . t2d2c) (char-ci=? . t2d2b) (char-ci<? . t2d2a) (char-ci<=? . t2d29) (char-alphabetic? . t2d28) (make-variable-transformer . tbae) (identifier? . te65) (generate-temporaries . te51) (free-identifier=? . te53) (syntax->datum . te69) (datum->syntax . te67) (bound-identifier=? . te55) (record-type-descriptor? . t2d27) (record-predicate . t2d26) (record-mutator . t2d25) (record-constructor . t2d24) (record-accessor . t2d23) (make-record-type-descriptor . t2d22) (make-record-constructor-descriptor . t2d21) (record? . t2d20) (record-type-uid . t2d1f) (record-type-sealed? . t2d1e) (record-type-parent . t2d1d) (record-type-opaque? . t2d1c) (record-type-name . t2d1b) (record-type-generative? . t2d1a) (record-type-field-names . t2d19) (record-rtd . t2d18) (record-field-mutable? . t2d17) (delete-file . t2d16) (file-exists? . t2d15) (vector-sort! . t2d14) (vector-sort . t2d13) (list-sort . t2d12) (symbol-hash . t2d11) (string-ci-hash . t2d10) (string-hash . t2d0f) (equal-hash . t2d0e) (hashtable-equivalence-function . t2d0d) (make-hashtable . t2d0c) (hashtable-hash-function . t2d0b) (make-eqv-hashtable . t2d0a) (make-eq-hashtable . t2d09) (hashtable? . t2d08) (hashtable-update! . t2d07) (hashtable-size . t2d06) (hashtable-set! . t2d05) (hashtable-ref . t2d04) (hashtable-mutable? . t2d03) (hashtable-keys . t2d02) (hashtable-entries . t2d01) (hashtable-delete! . t2d00) (hashtable-copy . t2cff) (hashtable-contains? . t2cfe) (hashtable-clear! . t2cfd) (call-with-output-file . t2cfc) (call-with-input-file . t2cfb) (write-char . t2cfa) (write . t2cf9) (with-output-to-file . t2cf8) (with-input-from-file . t2cf7) (read-char . t2cf6) (read . t2cf5) (peek-char . t2cf4) (open-output-file . t2cf3) (open-input-file . t2cf2) (newline . t2cf1) (display . t2cf0) (close-output-port . t2cef) (close-input-port . t2cee) (eof-object? . t2ced) (eof-object . t2cec) (current-error-port . t2ceb) (current-output-port . t2cea) (current-input-port . t2ce9) (output-port? . t2ce8) (input-port? . t2ce7) (utf-8-codec . t2ce6) (utf-16-codec . t2ce5) (transcoder-error-handling-mode . t2ce4) (transcoder-eol-style . t2ce3) (transcoder-codec . t2ce2) (transcoded-port . t2ce1) (textual-port? . t2ce0) (string->bytevector . t2cdf) (standard-output-port . t2cde) (standard-input-port . t2cdd) (standard-error-port . t2cdc) (set-port-position! . t2cdb) (put-u8 . t2cda) (put-string . t2cd9) (put-datum . t2cd8) (put-char . t2cd7) (put-bytevector . t2cd6) (port? . t2cd5) (port-transcoder . t2cd4) (port-position . t2cd3) (port-has-set-port-position!? . t2cd2) (port-has-port-position? . t2cd1) (port-eof? . t2cd0) (output-port-buffer-mode . t2ccf) (open-string-output-port . t2cce) (open-string-input-port . t2ccd) (open-file-output-port . t2ccc) (open-file-input/output-port . t2ccb) (open-file-input-port . t2cca) (open-bytevector-output-port . t2cc9) (open-bytevector-input-port . t2cc8) (native-transcoder . t2cc7) (native-eol-style . t2cc6) (make-transcoder . t2cc5) (latin-1-codec . t2cc4) (make-i/o-write-error . t2cc3) (make-i/o-read-error . t2cc2) (make-i/o-port-error . t2cc1) (make-i/o-invalid-position-error . t2cc0) (make-i/o-filename-error . t2cbf) (make-i/o-file-protection-error . t2cbe) (make-i/o-file-is-read-only-error . t2cbd) (make-i/o-file-does-not-exist-error . t2cbc) (make-i/o-file-already-exists-error . t2cbb) (make-i/o-error . t2cba) (make-i/o-encoding-error . t2cb9) (make-i/o-decoding-error . t2cb8) (make-custom-textual-output-port . t2cb7) (make-custom-textual-input/output-port . t2cb6) (make-custom-textual-input-port . t2cb5) (make-custom-binary-output-port . t2cb4) (make-custom-binary-input/output-port . t2cb3) (make-custom-binary-input-port . t2cb2) (make-bytevector . t2cb1) (lookahead-u8 . t2cb0) (lookahead-char . t2caf) (i/o-write-error? . t2cae) (i/o-read-error? . t2cad) (i/o-port-error? . t2cac) (i/o-invalid-position-error? . t2cab) (i/o-filename-error? . t2caa) (i/o-file-protection-error? . t2ca9) (i/o-file-is-read-only-error? . t2ca8) (i/o-file-does-not-exist-error? . t2ca7) (i/o-file-already-exists-error? . t2ca6) (i/o-error? . t2ca5) (i/o-error-position . t2ca4) (i/o-error-port . t2ca3) (i/o-error-filename . t2ca2) (i/o-encoding-error? . t2ca1) (i/o-encoding-error-char . t2ca0) (i/o-decoding-error? . t2c9f) (get-u8 . t2c9e) (get-string-n! . t2c9d) (get-string-n . t2c9c) (get-string-all . t2c9b) (get-line . t2c9a) (get-datum . t2c99) (get-char . t2c98) (get-bytevector-some . t2c97) (get-bytevector-n! . t2c96) (get-bytevector-n . t2c95) (get-bytevector-all . t2c94) (flush-output-port . t2c93) (close-port . t2c92) (exit . t2c8a) (command-line . t291c) (string-fill! . t2c89) (string-set! . t2c88) (set-cdr! . t2c87) (set-car! . t2c86) (remove . t2c85) (remv . t2c84) (remp . t2c83) (remq . t2c82) (partition . t2c81) (memv . t2c80) (memq . t2c7f) (memp . t2c7e) (member . t2c7d) (exists . t2c7c) (for-all . t2c7b) (fold-right . t2c7a) (fold-left . t2c79) (find . t2c78) (filter . t2c77) (cons* . t2c76) (assv . t2c75) (assq . t2c74) (assp . t2c73) (assoc . t2c72) (call-with-string-output-port . t2c71) (call-with-port . t2c70) (call-with-bytevector-output-port . t2c6f) (bytevector->string . t2c6e) (buffer-mode? . t2c6d) (binary-port? . t2c6c) (with-exception-handler . t2c6b) (raise-continuable . t2c6a) (raise . t2c69) (eval . te43) (environment . te3b) (make-enumeration . t2c68) (enum-set=? . t2c67) (enum-set-universe . t2c66) (enum-set-union . t2c65) (enum-set-subset? . t2c64) (enum-set-projection . t2c63) (enum-set-member? . t2c62) (enum-set-intersection . t2c61) (enum-set-indexer . t2c60) (enum-set-difference . t2c5f) (enum-set-constructor . t2c5e) (enum-set-complement . t2c5d) (enum-set->list . t2c5c) (who-condition? . t2c5b) (warning? . t2c5a) (violation? . t2c59) (undefined-violation? . t2c58) (syntax-violation? . t2c57) (syntax-violation-subform . t2c56) (syntax-violation-form . t2c55) (syntax-violation . te63) (simple-conditions . t2c54) (serious-condition? . t2c53) (non-continuable-violation? . t2c52) (message-condition? . t2c51) (make-who-condition . t2c50) (make-warning . t2c4f) (make-violation . t2c4e) (make-undefined-violation . t2c4d) (make-syntax-violation . t2c4c) (make-serious-condition . t2c4b) (make-non-continuable-violation . t2c4a) (make-message-condition . t2c49) (make-lexical-violation . t2c48) (make-irritants-condition . t2c47) (make-implementation-restriction-violation . t2c46) (make-error . t2c45) (make-assertion-violation . t2c44) (lexical-violation? . t2c43) (irritants-condition? . t2c42) (implementation-restriction-violation? . t2c41) (error? . t2c40) (condition-who . t2c3f) (condition-predicate . t2c3e) (condition-message . t2c3d) (condition-irritants . t2c3c) (condition-accessor . t2c3b) (condition . t2c3a) (assertion-violation? . t2c39) (condition? . t2c38) (utf32->string . t2c37) (utf16->string . t2c36) (utf8->string . t2c35) (uint-list->bytevector . t2c34) (u8-list->bytevector . t2c33) (string->utf8 . t2c32) (string->utf32 . t2c31) (string->utf16 . t2c30) (sint-list->bytevector . t2c2f) (native-endianness . t2c2e) (bytevector? . t2c2d) (bytevector=? . t2c2c) (bytevector-uint-set! . t2c2b) (bytevector-uint-ref . t2c2a) (bytevector-u8-set! . t2c29) (bytevector-u8-ref . t2c28) (bytevector-u64-set! . t2c27) (bytevector-u64-ref . t2c26) (bytevector-u64-native-set! . t2c25) (bytevector-u64-native-ref . t2c24) (bytevector-u32-set! . t2c23) (bytevector-u32-ref . t2c22) (bytevector-u32-native-set! . t2c21) (bytevector-u32-native-ref . t2c20) (bytevector-u16-set! . t2c1f) (bytevector-u16-ref . t2c1e) (bytevector-u16-native-set! . t2c1d) (bytevector-u16-native-ref . t2c1c) (bytevector-sint-set! . t2c1b) (bytevector-sint-ref . t2c1a) (bytevector-s8-set! . t2c19) (bytevector-s8-ref . t2c18) (bytevector-s64-set! . t2c17) (bytevector-s64-ref . t2c16) (bytevector-s64-native-set! . t2c15) (bytevector-s64-native-ref . t2c14) (bytevector-s32-set! . t2c13) (bytevector-s32-ref . t2c12) (bytevector-s32-native-set! . t2c11) (bytevector-s32-native-ref . t2c10) (bytevector-s16-set! . t2c0f) (bytevector-s16-ref . t2c0e) (bytevector-s16-native-set! . t2c0d) (bytevector-s16-native-ref . t2c0c) (bytevector-length . t2c0b) (bytevector-ieee-single-ref . t2c0a) (bytevector-ieee-single-set! . t2c09) (bytevector-ieee-single-native-set! . t2c08) (bytevector-ieee-single-native-ref . t2c07) (bytevector-ieee-double-set! . t2c06) (bytevector-ieee-double-ref . t2c05) (bytevector-ieee-double-native-set! . t2c04) (bytevector-ieee-double-native-ref . t2c03) (bytevector-fill! . t2c02) (bytevector-copy! . t2c01) (bytevector-copy . t2c00) (bytevector->uint-list . t2bff) (bytevector->u8-list . t2bfe) (bytevector->sint-list . t2bfd) (no-nans-violation? . t2bfc) (no-infinities-violation? . t2bfb) (make-no-nans-violation . t2bfa) (make-no-infinities-violation . t2bf9) (real->flonum . t2bf8) (flzero? . t2bf7) (fltruncate . t2bf6) (fltan . t2bf5) (flsqrt . t2bf4) (flsin . t2bf3) (flround . t2bf2) (flpositive? . t2bf1) (flonum? . t2bf0) (flodd? . t2bef) (flnumerator . t2bee) (flnegative? . t2bed) (flnan? . t2bec) (flmod0 . t2beb) (flmod . t2bea) (flmin . t2be9) (flmax . t2be8) (fllog . t2be7) (flinteger? . t2be6) (flinfinite? . t2be5) (flfloor . t2be4) (flfinite? . t2be3) (flexpt . t2be2) (flexp . t2be1) (fleven? . t2be0) (fldiv0-and-mod0 . t2bdf) (fldiv0 . t2bde) (fldiv-and-mod . t2bdd) (fldiv . t2bdc) (fldenominator . t2bdb) (flcos . t2bda) (flceiling . t2bd9) (flatan . t2bd8) (flasin . t2bd7) (flacos . t2bd6) (flabs . t2bd5) (fl>? . t2bd4) (fl>=? . t2bd3) (fl=? . t2bd2) (fl<? . t2bd1) (fl<=? . t2bd0) (fl/ . t2bcf) (fl- . t2bce) (fl+ . t2bcd) (fl* . t2bcc) (fixnum->flonum . t2bcb) (fxzero? . t2bca) (fxxor . t2bc9) (fxrotate-bit-field . t2bc8) (fxreverse-bit-field . t2bc7) (fxpositive? . t2bc6) (fxodd? . t2bc5) (fxnot . t2bc4) (fxnegative? . t2bc3) (fxmod0 . t2bc2) (fxmod . t2bc1) (fxmin . t2bc0) (fxmax . t2bbf) (fxlength . t2bbe) (fxior . t2bbd) (fxif . t2bbc) (fxfirst-bit-set . t2bbb) (fxeven? . t2bba) (fxdiv0-and-mod0 . t2bb9) (fxdiv0 . t2bb8) (fxdiv-and-mod . t2bb7) (fxdiv . t2bb6) (fxcopy-bit-field . t2bb5) (fxcopy-bit . t2bb4) (fxbit-set? . t2bb3) (fxbit-field . t2bb2) (fxbit-count . t2bb1) (fxarithmetic-shift-right . t2bb0) (fxarithmetic-shift-left . t2baf) (fxarithmetic-shift . t2bae) (fxand . t2bad) (fx>? . t2bac) (fx>=? . t2bab) (fx=? . t2baa) (fx<? . t2ba9) (fx<=? . t2ba8) (fx-/carry . t2ba7) (fx- . t2ba6) (fx+/carry . t2ba5) (fx+ . t2ba4) (fx*/carry . t2ba3) (fx* . t2ba2) (greatest-fixnum . t2ba1) (least-fixnum . t2ba0) (fixnum-width . t2b9f) (fixnum? . t2b9e) (bitwise-rotate-bit-field . t2b9d) (bitwise-reverse-bit-field . t2b9c) (bitwise-length . t2b9b) (bitwise-if . t2b9a) (bitwise-first-bit-set . t2b99) (bitwise-copy-bit-field . t2b98) (bitwise-copy-bit . t2b97) (bitwise-bit-set? . t2b96) (bitwise-bit-field . t2b95) (bitwise-bit-count . t2b94) (bitwise-xor . t2b93) (bitwise-ior . t2b92) (bitwise-and . t2b91) (bitwise-not . t2b90) (bitwise-arithmetic-shift-right . t2b8f) (bitwise-arithmetic-shift-left . t2b8e) (bitwise-arithmetic-shift . t2b8d) (zero? . t2b8c) (vector? . t2b8b) (vector-set! . t2b8a) (vector-ref . t2b89) (vector-map . t2b88) (vector-length . t2b87) (vector-for-each . t2b86) (vector-fill! . t2b85) (vector->list . t2b84) (vector . t2b83) (values . t2b82) (truncate . t2b81) (tan . t2b80) (symbol? . t2b7f) (symbol=? . t2b7e) (symbol->string . t2b7d) (substring . t2b7c) (string? . t2b7b) (string>? . t2b7a) (string>=? . t2b79) (string=? . t2b78) (string<? . t2b77) (string<=? . t2b76) (string-ref . t2b75) (string-length . t2b74) (string-for-each . t2b73) (string-copy . t2b72) (string-append . t2b71) (string->symbol . t2b70) (string->number . t2b6f) (string->list . t2b6e) (string . t2b6d) (sqrt . t2b6c) (sin . t2b6b) (round . t2b6a) (reverse . t2b69) (real? . t2b68) (real-valued? . t2b67) (real-part . t2b66) (rationalize . t2b65) (rational? . t2b64) (rational-valued? . t2b63) (procedure? . t2b62) (positive? . t2b61) (pair? . t2b60) (odd? . t2b5f) (numerator . t2b5e) (number? . t2b5d) (number->string . t2b5c) (null? . t2b5b) (not . t2b5a) (negative? . t2b59) (nan? . t2b58) (min . t2b57) (max . t2b56) (map . t2b55) (make-vector . t2b54) (make-string . t2b53) (make-rectangular . t2b52) (make-polar . t2b51) (magnitude . t2b50) (log . t2b4f) (list? . t2b4e) (list-tail . t2b4d) (list-ref . t2b4c) (list->vector . t2b4b) (list->string . t2b4a) (list . t2b49) (length . t2b48) (lcm . t2b47) (integer? . t2b46) (integer-valued? . t2b45) (integer->char . t2b44) (infinite? . t2b43) (inexact? . t2b42) (inexact . t2b41) (imag-part . t2b40) (gcd . t2b3f) (for-each . t2b3e) (floor . t2b3d) (finite? . t2b3c) (expt . t2b3b) (exp . t2b3a) (exact? . t2b39) (exact-integer-sqrt . t2b38) (exact . t2b37) (even? . t2b36) (error . t2b35) (eqv? . t2b34) (equal? . t2b33) (eq? . t2b32) (dynamic-wind . t2b31) (div0-and-mod0 . t2b30) (mod0 . t2b2f) (div0 . t2b2e) (div-and-mod . t2b2d) (mod . t2b2c) (div . t2b2b) (denominator . t2b2a) (cos . t2b29) (cons . t2b28) (complex? . t2b27) (char? . t2b26) (char>? . t2b25) (char>=? . t2b24) (char=? . t2b23) (char<? . t2b22) (char<=? . t2b21) (char->integer . t2b20) (ceiling . t2b1f) (call-with-values . t2b1e) (call/cc . t2b1d) (call-with-current-continuation . t2b1c) (cddddr . t2b1b) (cdddar . t2b1a) (cddadr . t2b19) (cddaar . t2b18) (cdaddr . t2b17) (cdadar . t2b16) (cdaadr . t2b15) (cdaaar . t2b14) (cadddr . t2b13) (caddar . t2b12) (cadadr . t2b11) (cadaar . t2b10) (caaddr . t2b0f) (caadar . t2b0e) (caaadr . t2b0d) (caaaar . t2b0c) (cdddr . t2b0b) (cddar . t2b0a) (cdadr . t2b09) (cdaar . t2b08) (caddr . t2b07) (cadar . t2b06) (caadr . t2b05) (caaar . t2b04) (cddr . t2b03) (cdar . t2b02) (cadr . t2b01) (caar . t2b00) (cdr . t2aff) (car . t2afe) (boolean? . t2afd) (boolean=? . t2afc) (atan . t2afb) (assertion-violation . t2afa) (asin . t2af9) (apply . t2af8) (append . t2af7) (angle . t2af6) (acos . t2af5) (abs . t2af4) (/ . t2af3) (* . t2af2) (- . t2af1) (+ . t2af0) (>= . t2aef) (> . t2aee) (= . t2aed) (<= . t2aec) (< . t2aeb) (library . t2aea) (&no-nans . t2ae9) (&no-infinities . t2ae8) (&i/o-encoding . t2ae7) (&i/o-decoding . t2ae6) (&i/o-port . t2ae5) (&i/o-file-does-not-exist . t2ae4) (&i/o-file-already-exists . t2ae3) (&i/o-file-is-read-only . t2ae2) (&i/o-file-protection . t2ae1) (&i/o-filename . t2ae0) (&i/o-invalid-position . t2adf) (&i/o-write . t2ade) (&i/o-read . t2add) (&i/o . t2adc) (&undefined . t2adb) (&syntax . t2ada) (&lexical . t2ad9) (&implementation-restriction . t2ad8) (&non-continuable . t2ad7) (&who . t2ad6) (&irritants . t2ad5) (&assertion . t2ad4) (&violation . t2ad3) (&error . t2ad2) (&serious . t2ad1) (&warning . t2ad0) (&message . t2acf) (&condition . t2ace) (define-condition-type . t2acd) (define-enumeration . t2acc) (define-record-type . t2acb) (parent-rtd . t2aca) (nongenerative . t2ac9) (opaque . t2ac8) (sealed . t2ac7) (protocol . t2ac6) (parent . t2ac5) (immutable . t2ac4) (mutable . t2ac3) (fields . t2ac2) (error-handling-mode . t2ac1) (file-options . t2ac0) (buffer-mode . t2abf) (eol-style . t2abe) (guard . t2abd) (unsyntax-splicing . t2aba) (unsyntax . t2ab9) (unquote-splicing . t2ab8) (unquote . t2ab7) (_ . t2ab6) (else . t2ab5) (=> . t2ab4) (... . t2ab3) (assert . t2ab2) (endianness . t2ab1) (time . t2aaf) (do . t2aae) (cond . t2aad) (let* . t2aac) (let*-values . t2aab) (let-values . t2aaa) (identifier-syntax . t2aa9) (with-syntax . t2aa8) (quasisyntax . t2aa7) (quasiquote . t2aa6) (syntax-rules . t2aa5) (include . t2aa4) (record-constructor-descriptor . t2aa2) (record-type-descriptor . t2aa1) (case . t2aa0) (unless . t2a9e) (when . t2a9d) (or . t2a9c) (and . t2a9b) (if . t2a9a) (let . t2a99) (letrec* . t2a98) (letrec . t2a97) (case-lambda . t2a95) (lambda . t2a94) (syntax . t2a93) (syntax-case . t2a92) (quote . t2a91) (letrec-syntax . t2a8f) (let-syntax . t2a8e) (set! . t2a8d) (import . t2a8c) (begin . t2a8b) (define-syntax . t2a89) (define . t2a88)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e35 '(psyntax null-environment-5) '() '() '() '() '((make-promise . t2c8b) (unquote-splicing . t2ab8) (unquote . t2ab7) (_ . t2ab6) (else . t2ab5) (=> . t2ab4) (... . t2ab3) (delay . t2ab0) (do . t2aae) (cond . t2aad) (let* . t2aac) (quasiquote . t2aa6) (syntax-rules . t2aa5) (case . t2aa0) (or . t2a9c) (and . t2a9b) (if . t2a9a) (let . t2a99) (letrec . t2a97) (lambda . t2a94) (quote . t2a91) (letrec-syntax . t2a8f) (let-syntax . t2a8e) (set! . t2a8d) (begin . t2a8b) (define-syntax . t2a89) (define . t2a88)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e36 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . t2d3c) (string-ci>=? . t2d3b) (string-ci=? . t2d3a) (string-ci<? . t2d39) (string-ci<=? . t2d38) (char-whitespace? . t2d37) (char-upper-case? . t2d36) (char-numeric? . t2d34) (char-lower-case? . t2d33) (char-upcase . t2d31) (char-downcase . t2d2e) (char-ci>? . t2d2d) (char-ci>=? . t2d2c) (char-ci=? . t2d2b) (char-ci<? . t2d2a) (char-ci<=? . t2d29) (char-alphabetic? . t2d28) (call-with-output-file . t2cfc) (call-with-input-file . t2cfb) (write-char . t2cfa) (write . t2cf9) (with-output-to-file . t2cf8) (with-input-from-file . t2cf7) (read-char . t2cf6) (read . t2cf5) (peek-char . t2cf4) (open-output-file . t2cf3) (open-input-file . t2cf2) (newline . t2cf1) (display . t2cf0) (close-output-port . t2cef) (close-input-port . t2cee) (eof-object . t2cec) (current-output-port . t2cea) (current-input-port . t2ce9) (output-port? . t2ce8) (input-port? . t2ce7) (scheme-report-environment . te3f) (quotient . t2c91) (null-environment . te3d) (remainder . t2c90) (modulo . t2c8f) (inexact->exact . t2c8e) (force . t2c8d) (exact->inexact . t2c8c) (make-promise . t2c8b) (string-fill! . t2c89) (string-set! . t2c88) (set-cdr! . t2c87) (set-car! . t2c86) (memv . t2c80) (memq . t2c7f) (member . t2c7d) (assv . t2c75) (assq . t2c74) (assoc . t2c72) (eval . te43) (zero? . t2b8c) (vector? . t2b8b) (vector-set! . t2b8a) (vector-ref . t2b89) (vector-length . t2b87) (vector-fill! . t2b85) (vector->list . t2b84) (vector . t2b83) (values . t2b82) (truncate . t2b81) (tan . t2b80) (symbol? . t2b7f) (symbol->string . t2b7d) (substring . t2b7c) (string? . t2b7b) (string>? . t2b7a) (string>=? . t2b79) (string=? . t2b78) (string<? . t2b77) (string<=? . t2b76) (string-ref . t2b75) (string-length . t2b74) (string-copy . t2b72) (string-append . t2b71) (string->symbol . t2b70) (string->number . t2b6f) (string->list . t2b6e) (string . t2b6d) (sqrt . t2b6c) (sin . t2b6b) (round . t2b6a) (reverse . t2b69) (real? . t2b68) (real-part . t2b66) (rationalize . t2b65) (rational? . t2b64) (procedure? . t2b62) (positive? . t2b61) (pair? . t2b60) (odd? . t2b5f) (numerator . t2b5e) (number? . t2b5d) (number->string . t2b5c) (not . t2b5a) (negative? . t2b59) (min . t2b57) (max . t2b56) (map . t2b55) (make-vector . t2b54) (make-string . t2b53) (make-rectangular . t2b52) (make-polar . t2b51) (magnitude . t2b50) (log . t2b4f) (list? . t2b4e) (list-tail . t2b4d) (list-ref . t2b4c) (list->vector . t2b4b) (list->string . t2b4a) (list . t2b49) (length . t2b48) (lcm . t2b47) (integer? . t2b46) (integer->char . t2b44) (inexact? . t2b42) (imag-part . t2b40) (gcd . t2b3f) (for-each . t2b3e) (floor . t2b3d) (expt . t2b3b) (exp . t2b3a) (exact? . t2b39) (even? . t2b36) (eqv? . t2b34) (equal? . t2b33) (eq? . t2b32) (dynamic-wind . t2b31) (denominator . t2b2a) (cos . t2b29) (cons . t2b28) (complex? . t2b27) (char? . t2b26) (char>? . t2b25) (char>=? . t2b24) (char=? . t2b23) (char<? . t2b22) (char<=? . t2b21) (char->integer . t2b20) (ceiling . t2b1f) (call-with-values . t2b1e) (call-with-current-continuation . t2b1c) (cddddr . t2b1b) (cdddar . t2b1a) (cddadr . t2b19) (cddaar . t2b18) (cdaddr . t2b17) (cdadar . t2b16) (cdaadr . t2b15) (cdaaar . t2b14) (cadddr . t2b13) (caddar . t2b12) (cadadr . t2b11) (cadaar . t2b10) (caaddr . t2b0f) (caadar . t2b0e) (caaadr . t2b0d) (caaaar . t2b0c) (cdddr . t2b0b) (cddar . t2b0a) (cdadr . t2b09) (cdaar . t2b08) (caddr . t2b07) (cadar . t2b06) (caadr . t2b05) (caaar . t2b04) (cddr . t2b03) (cdar . t2b02) (cadr . t2b01) (caar . t2b00) (cdr . t2aff) (car . t2afe) (boolean? . t2afd) (atan . t2afb) (asin . t2af9) (apply . t2af8) (append . t2af7) (angle . t2af6) (acos . t2af5) (abs . t2af4) (/ . t2af3) (* . t2af2) (- . t2af1) (+ . t2af0) (>= . t2aef) (> . t2aee) (= . t2aed) (<= . t2aec) (< . t2aeb) (unquote-splicing . t2ab8) (unquote . t2ab7) (else . t2ab5) (=> . t2ab4) (... . t2ab3) (delay . t2ab0) (do . t2aae) (cond . t2aad) (let* . t2aac) (quasiquote . t2aa6) (syntax-rules . t2aa5) (case . t2aa0) (or . t2a9c) (and . t2a9b) (if . t2a9a) (let . t2a99) (letrec . t2a97) (lambda . t2a94) (quote . t2a91) (letrec-syntax . t2a8f) (let-syntax . t2a8e) (set! . t2a8d) (begin . t2a8b) (define-syntax . t2a89) (define . t2a88)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e37 '(psyntax modules) '() '() '() '() '((module . t2a8a)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e38 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e39 '(rnrs) '(6) '() '() '() '((regexp? . t2df4) (string-upcase . t2d44) (string-titlecase . t2d43) (string-normalize-nfkd . t2d42) (string-normalize-nfkc . t2d41) (string-normalize-nfd . t2d40) (string-normalize-nfc . t2d3f) (string-foldcase . t2d3e) (string-downcase . t2d3d) (string-ci>? . t2d3c) (string-ci>=? . t2d3b) (string-ci=? . t2d3a) (string-ci<? . t2d39) (string-ci<=? . t2d38) (char-whitespace? . t2d37) (char-upper-case? . t2d36) (char-title-case? . t2d35) (char-numeric? . t2d34) (char-lower-case? . t2d33) (char-general-category . t2d32) (char-upcase . t2d31) (char-titlecase . t2d30) (char-foldcase . t2d2f) (char-downcase . t2d2e) (char-ci>? . t2d2d) (char-ci>=? . t2d2c) (char-ci=? . t2d2b) (char-ci<? . t2d2a) (char-ci<=? . t2d29) (char-alphabetic? . t2d28) (make-variable-transformer . tbae) (identifier? . te65) (generate-temporaries . te51) (free-identifier=? . te53) (syntax->datum . te69) (datum->syntax . te67) (bound-identifier=? . te55) (record-type-descriptor? . t2d27) (record-predicate . t2d26) (record-mutator . t2d25) (record-constructor . t2d24) (record-accessor . t2d23) (make-record-type-descriptor . t2d22) (make-record-constructor-descriptor . t2d21) (record? . t2d20) (record-type-uid . t2d1f) (record-type-sealed? . t2d1e) (record-type-parent . t2d1d) (record-type-opaque? . t2d1c) (record-type-name . t2d1b) (record-type-generative? . t2d1a) (record-type-field-names . t2d19) (record-rtd . t2d18) (record-field-mutable? . t2d17) (delete-file . t2d16) (file-exists? . t2d15) (vector-sort! . t2d14) (vector-sort . t2d13) (list-sort . t2d12) (symbol-hash . t2d11) (string-ci-hash . t2d10) (string-hash . t2d0f) (equal-hash . t2d0e) (hashtable-equivalence-function . t2d0d) (make-hashtable . t2d0c) (hashtable-hash-function . t2d0b) (make-eqv-hashtable . t2d0a) (make-eq-hashtable . t2d09) (hashtable? . t2d08) (hashtable-update! . t2d07) (hashtable-size . t2d06) (hashtable-set! . t2d05) (hashtable-ref . t2d04) (hashtable-mutable? . t2d03) (hashtable-keys . t2d02) (hashtable-entries . t2d01) (hashtable-delete! . t2d00) (hashtable-copy . t2cff) (hashtable-contains? . t2cfe) (hashtable-clear! . t2cfd) (call-with-output-file . t2cfc) (call-with-input-file . t2cfb) (write-char . t2cfa) (write . t2cf9) (with-output-to-file . t2cf8) (with-input-from-file . t2cf7) (read-char . t2cf6) (read . t2cf5) (peek-char . t2cf4) (open-output-file . t2cf3) (open-input-file . t2cf2) (newline . t2cf1) (display . t2cf0) (close-output-port . t2cef) (close-input-port . t2cee) (eof-object? . t2ced) (eof-object . t2cec) (current-error-port . t2ceb) (current-output-port . t2cea) (current-input-port . t2ce9) (output-port? . t2ce8) (input-port? . t2ce7) (utf-8-codec . t2ce6) (utf-16-codec . t2ce5) (transcoder-error-handling-mode . t2ce4) (transcoder-eol-style . t2ce3) (transcoder-codec . t2ce2) (transcoded-port . t2ce1) (textual-port? . t2ce0) (string->bytevector . t2cdf) (standard-output-port . t2cde) (standard-input-port . t2cdd) (standard-error-port . t2cdc) (set-port-position! . t2cdb) (put-u8 . t2cda) (put-string . t2cd9) (put-datum . t2cd8) (put-char . t2cd7) (put-bytevector . t2cd6) (port? . t2cd5) (port-transcoder . t2cd4) (port-position . t2cd3) (port-has-set-port-position!? . t2cd2) (port-has-port-position? . t2cd1) (port-eof? . t2cd0) (output-port-buffer-mode . t2ccf) (open-string-output-port . t2cce) (open-string-input-port . t2ccd) (open-file-output-port . t2ccc) (open-file-input/output-port . t2ccb) (open-file-input-port . t2cca) (open-bytevector-output-port . t2cc9) (open-bytevector-input-port . t2cc8) (native-transcoder . t2cc7) (native-eol-style . t2cc6) (make-transcoder . t2cc5) (latin-1-codec . t2cc4) (make-i/o-write-error . t2cc3) (make-i/o-read-error . t2cc2) (make-i/o-port-error . t2cc1) (make-i/o-invalid-position-error . t2cc0) (make-i/o-filename-error . t2cbf) (make-i/o-file-protection-error . t2cbe) (make-i/o-file-is-read-only-error . t2cbd) (make-i/o-file-does-not-exist-error . t2cbc) (make-i/o-file-already-exists-error . t2cbb) (make-i/o-error . t2cba) (make-i/o-encoding-error . t2cb9) (make-i/o-decoding-error . t2cb8) (make-custom-textual-output-port . t2cb7) (make-custom-textual-input/output-port . t2cb6) (make-custom-textual-input-port . t2cb5) (make-custom-binary-output-port . t2cb4) (make-custom-binary-input/output-port . t2cb3) (make-custom-binary-input-port . t2cb2) (make-bytevector . t2cb1) (lookahead-u8 . t2cb0) (lookahead-char . t2caf) (i/o-write-error? . t2cae) (i/o-read-error? . t2cad) (i/o-port-error? . t2cac) (i/o-invalid-position-error? . t2cab) (i/o-filename-error? . t2caa) (i/o-file-protection-error? . t2ca9) (i/o-file-is-read-only-error? . t2ca8) (i/o-file-does-not-exist-error? . t2ca7) (i/o-file-already-exists-error? . t2ca6) (i/o-error? . t2ca5) (i/o-error-position . t2ca4) (i/o-error-port . t2ca3) (i/o-error-filename . t2ca2) (i/o-encoding-error? . t2ca1) (i/o-encoding-error-char . t2ca0) (i/o-decoding-error? . t2c9f) (get-u8 . t2c9e) (get-string-n! . t2c9d) (get-string-n . t2c9c) (get-string-all . t2c9b) (get-line . t2c9a) (get-datum . t2c99) (get-char . t2c98) (get-bytevector-some . t2c97) (get-bytevector-n! . t2c96) (get-bytevector-n . t2c95) (get-bytevector-all . t2c94) (flush-output-port . t2c93) (close-port . t2c92) (exit . t2c8a) (command-line . t291c) (remove . t2c85) (remv . t2c84) (remp . t2c83) (remq . t2c82) (partition . t2c81) (memv . t2c80) (memq . t2c7f) (memp . t2c7e) (member . t2c7d) (exists . t2c7c) (for-all . t2c7b) (fold-right . t2c7a) (fold-left . t2c79) (find . t2c78) (filter . t2c77) (cons* . t2c76) (assv . t2c75) (assq . t2c74) (assp . t2c73) (assoc . t2c72) (call-with-string-output-port . t2c71) (call-with-port . t2c70) (call-with-bytevector-output-port . t2c6f) (bytevector->string . t2c6e) (buffer-mode? . t2c6d) (binary-port? . t2c6c) (with-exception-handler . t2c6b) (raise-continuable . t2c6a) (raise . t2c69) (make-enumeration . t2c68) (enum-set=? . t2c67) (enum-set-universe . t2c66) (enum-set-union . t2c65) (enum-set-subset? . t2c64) (enum-set-projection . t2c63) (enum-set-member? . t2c62) (enum-set-intersection . t2c61) (enum-set-indexer . t2c60) (enum-set-difference . t2c5f) (enum-set-constructor . t2c5e) (enum-set-complement . t2c5d) (enum-set->list . t2c5c) (who-condition? . t2c5b) (warning? . t2c5a) (violation? . t2c59) (undefined-violation? . t2c58) (syntax-violation? . t2c57) (syntax-violation-subform . t2c56) (syntax-violation-form . t2c55) (syntax-violation . te63) (simple-conditions . t2c54) (serious-condition? . t2c53) (non-continuable-violation? . t2c52) (message-condition? . t2c51) (make-who-condition . t2c50) (make-warning . t2c4f) (make-violation . t2c4e) (make-undefined-violation . t2c4d) (make-syntax-violation . t2c4c) (make-serious-condition . t2c4b) (make-non-continuable-violation . t2c4a) (make-message-condition . t2c49) (make-lexical-violation . t2c48) (make-irritants-condition . t2c47) (make-implementation-restriction-violation . t2c46) (make-error . t2c45) (make-assertion-violation . t2c44) (lexical-violation? . t2c43) (irritants-condition? . t2c42) (implementation-restriction-violation? . t2c41) (error? . t2c40) (condition-who . t2c3f) (condition-predicate . t2c3e) (condition-message . t2c3d) (condition-irritants . t2c3c) (condition-accessor . t2c3b) (condition . t2c3a) (assertion-violation? . t2c39) (condition? . t2c38) (utf32->string . t2c37) (utf16->string . t2c36) (utf8->string . t2c35) (uint-list->bytevector . t2c34) (u8-list->bytevector . t2c33) (string->utf8 . t2c32) (string->utf32 . t2c31) (string->utf16 . t2c30) (sint-list->bytevector . t2c2f) (native-endianness . t2c2e) (bytevector? . t2c2d) (bytevector=? . t2c2c) (bytevector-uint-set! . t2c2b) (bytevector-uint-ref . t2c2a) (bytevector-u8-set! . t2c29) (bytevector-u8-ref . t2c28) (bytevector-u64-set! . t2c27) (bytevector-u64-ref . t2c26) (bytevector-u64-native-set! . t2c25) (bytevector-u64-native-ref . t2c24) (bytevector-u32-set! . t2c23) (bytevector-u32-ref . t2c22) (bytevector-u32-native-set! . t2c21) (bytevector-u32-native-ref . t2c20) (bytevector-u16-set! . t2c1f) (bytevector-u16-ref . t2c1e) (bytevector-u16-native-set! . t2c1d) (bytevector-u16-native-ref . t2c1c) (bytevector-sint-set! . t2c1b) (bytevector-sint-ref . t2c1a) (bytevector-s8-set! . t2c19) (bytevector-s8-ref . t2c18) (bytevector-s64-set! . t2c17) (bytevector-s64-ref . t2c16) (bytevector-s64-native-set! . t2c15) (bytevector-s64-native-ref . t2c14) (bytevector-s32-set! . t2c13) (bytevector-s32-ref . t2c12) (bytevector-s32-native-set! . t2c11) (bytevector-s32-native-ref . t2c10) (bytevector-s16-set! . t2c0f) (bytevector-s16-ref . t2c0e) (bytevector-s16-native-set! . t2c0d) (bytevector-s16-native-ref . t2c0c) (bytevector-length . t2c0b) (bytevector-ieee-single-ref . t2c0a) (bytevector-ieee-single-set! . t2c09) (bytevector-ieee-single-native-set! . t2c08) (bytevector-ieee-single-native-ref . t2c07) (bytevector-ieee-double-set! . t2c06) (bytevector-ieee-double-ref . t2c05) (bytevector-ieee-double-native-set! . t2c04) (bytevector-ieee-double-native-ref . t2c03) (bytevector-fill! . t2c02) (bytevector-copy! . t2c01) (bytevector-copy . t2c00) (bytevector->uint-list . t2bff) (bytevector->u8-list . t2bfe) (bytevector->sint-list . t2bfd) (no-nans-violation? . t2bfc) (no-infinities-violation? . t2bfb) (make-no-nans-violation . t2bfa) (make-no-infinities-violation . t2bf9) (real->flonum . t2bf8) (flzero? . t2bf7) (fltruncate . t2bf6) (fltan . t2bf5) (flsqrt . t2bf4) (flsin . t2bf3) (flround . t2bf2) (flpositive? . t2bf1) (flonum? . t2bf0) (flodd? . t2bef) (flnumerator . t2bee) (flnegative? . t2bed) (flnan? . t2bec) (flmod0 . t2beb) (flmod . t2bea) (flmin . t2be9) (flmax . t2be8) (fllog . t2be7) (flinteger? . t2be6) (flinfinite? . t2be5) (flfloor . t2be4) (flfinite? . t2be3) (flexpt . t2be2) (flexp . t2be1) (fleven? . t2be0) (fldiv0-and-mod0 . t2bdf) (fldiv0 . t2bde) (fldiv-and-mod . t2bdd) (fldiv . t2bdc) (fldenominator . t2bdb) (flcos . t2bda) (flceiling . t2bd9) (flatan . t2bd8) (flasin . t2bd7) (flacos . t2bd6) (flabs . t2bd5) (fl>? . t2bd4) (fl>=? . t2bd3) (fl=? . t2bd2) (fl<? . t2bd1) (fl<=? . t2bd0) (fl/ . t2bcf) (fl- . t2bce) (fl+ . t2bcd) (fl* . t2bcc) (fixnum->flonum . t2bcb) (fxzero? . t2bca) (fxxor . t2bc9) (fxrotate-bit-field . t2bc8) (fxreverse-bit-field . t2bc7) (fxpositive? . t2bc6) (fxodd? . t2bc5) (fxnot . t2bc4) (fxnegative? . t2bc3) (fxmod0 . t2bc2) (fxmod . t2bc1) (fxmin . t2bc0) (fxmax . t2bbf) (fxlength . t2bbe) (fxior . t2bbd) (fxif . t2bbc) (fxfirst-bit-set . t2bbb) (fxeven? . t2bba) (fxdiv0-and-mod0 . t2bb9) (fxdiv0 . t2bb8) (fxdiv-and-mod . t2bb7) (fxdiv . t2bb6) (fxcopy-bit-field . t2bb5) (fxcopy-bit . t2bb4) (fxbit-set? . t2bb3) (fxbit-field . t2bb2) (fxbit-count . t2bb1) (fxarithmetic-shift-right . t2bb0) (fxarithmetic-shift-left . t2baf) (fxarithmetic-shift . t2bae) (fxand . t2bad) (fx>? . t2bac) (fx>=? . t2bab) (fx=? . t2baa) (fx<? . t2ba9) (fx<=? . t2ba8) (fx-/carry . t2ba7) (fx- . t2ba6) (fx+/carry . t2ba5) (fx+ . t2ba4) (fx*/carry . t2ba3) (fx* . t2ba2) (greatest-fixnum . t2ba1) (least-fixnum . t2ba0) (fixnum-width . t2b9f) (fixnum? . t2b9e) (bitwise-rotate-bit-field . t2b9d) (bitwise-reverse-bit-field . t2b9c) (bitwise-length . t2b9b) (bitwise-if . t2b9a) (bitwise-first-bit-set . t2b99) (bitwise-copy-bit-field . t2b98) (bitwise-copy-bit . t2b97) (bitwise-bit-set? . t2b96) (bitwise-bit-field . t2b95) (bitwise-bit-count . t2b94) (bitwise-xor . t2b93) (bitwise-ior . t2b92) (bitwise-and . t2b91) (bitwise-not . t2b90) (bitwise-arithmetic-shift-right . t2b8f) (bitwise-arithmetic-shift-left . t2b8e) (bitwise-arithmetic-shift . t2b8d) (zero? . t2b8c) (vector? . t2b8b) (vector-set! . t2b8a) (vector-ref . t2b89) (vector-map . t2b88) (vector-length . t2b87) (vector-for-each . t2b86) (vector-fill! . t2b85) (vector->list . t2b84) (vector . t2b83) (values . t2b82) (truncate . t2b81) (tan . t2b80) (symbol? . t2b7f) (symbol=? . t2b7e) (symbol->string . t2b7d) (substring . t2b7c) (string? . t2b7b) (string>? . t2b7a) (string>=? . t2b79) (string=? . t2b78) (string<? . t2b77) (string<=? . t2b76) (string-ref . t2b75) (string-length . t2b74) (string-for-each . t2b73) (string-copy . t2b72) (string-append . t2b71) (string->symbol . t2b70) (string->number . t2b6f) (string->list . t2b6e) (string . t2b6d) (sqrt . t2b6c) (sin . t2b6b) (round . t2b6a) (reverse . t2b69) (real? . t2b68) (real-valued? . t2b67) (real-part . t2b66) (rationalize . t2b65) (rational? . t2b64) (rational-valued? . t2b63) (procedure? . t2b62) (positive? . t2b61) (pair? . t2b60) (odd? . t2b5f) (numerator . t2b5e) (number? . t2b5d) (number->string . t2b5c) (null? . t2b5b) (not . t2b5a) (negative? . t2b59) (nan? . t2b58) (min . t2b57) (max . t2b56) (map . t2b55) (make-vector . t2b54) (make-string . t2b53) (make-rectangular . t2b52) (make-polar . t2b51) (magnitude . t2b50) (log . t2b4f) (list? . t2b4e) (list-tail . t2b4d) (list-ref . t2b4c) (list->vector . t2b4b) (list->string . t2b4a) (list . t2b49) (length . t2b48) (lcm . t2b47) (integer? . t2b46) (integer-valued? . t2b45) (integer->char . t2b44) (infinite? . t2b43) (inexact? . t2b42) (inexact . t2b41) (imag-part . t2b40) (gcd . t2b3f) (for-each . t2b3e) (floor . t2b3d) (finite? . t2b3c) (expt . t2b3b) (exp . t2b3a) (exact? . t2b39) (exact-integer-sqrt . t2b38) (exact . t2b37) (even? . t2b36) (error . t2b35) (eqv? . t2b34) (equal? . t2b33) (eq? . t2b32) (dynamic-wind . t2b31) (div0-and-mod0 . t2b30) (mod0 . t2b2f) (div0 . t2b2e) (div-and-mod . t2b2d) (mod . t2b2c) (div . t2b2b) (denominator . t2b2a) (cos . t2b29) (cons . t2b28) (complex? . t2b27) (char? . t2b26) (char>? . t2b25) (char>=? . t2b24) (char=? . t2b23) (char<? . t2b22) (char<=? . t2b21) (char->integer . t2b20) (ceiling . t2b1f) (call-with-values . t2b1e) (call/cc . t2b1d) (call-with-current-continuation . t2b1c) (cddddr . t2b1b) (cdddar . t2b1a) (cddadr . t2b19) (cddaar . t2b18) (cdaddr . t2b17) (cdadar . t2b16) (cdaadr . t2b15) (cdaaar . t2b14) (cadddr . t2b13) (caddar . t2b12) (cadadr . t2b11) (cadaar . t2b10) (caaddr . t2b0f) (caadar . t2b0e) (caaadr . t2b0d) (caaaar . t2b0c) (cdddr . t2b0b) (cddar . t2b0a) (cdadr . t2b09) (cdaar . t2b08) (caddr . t2b07) (cadar . t2b06) (caadr . t2b05) (caaar . t2b04) (cddr . t2b03) (cdar . t2b02) (cadr . t2b01) (caar . t2b00) (cdr . t2aff) (car . t2afe) (boolean? . t2afd) (boolean=? . t2afc) (atan . t2afb) (assertion-violation . t2afa) (asin . t2af9) (apply . t2af8) (append . t2af7) (angle . t2af6) (acos . t2af5) (abs . t2af4) (/ . t2af3) (* . t2af2) (- . t2af1) (+ . t2af0) (>= . t2aef) (> . t2aee) (= . t2aed) (<= . t2aec) (< . t2aeb) (&no-nans . t2ae9) (&no-infinities . t2ae8) (&i/o-encoding . t2ae7) (&i/o-decoding . t2ae6) (&i/o-port . t2ae5) (&i/o-file-does-not-exist . t2ae4) (&i/o-file-already-exists . t2ae3) (&i/o-file-is-read-only . t2ae2) (&i/o-file-protection . t2ae1) (&i/o-filename . t2ae0) (&i/o-invalid-position . t2adf) (&i/o-write . t2ade) (&i/o-read . t2add) (&i/o . t2adc) (&undefined . t2adb) (&syntax . t2ada) (&lexical . t2ad9) (&implementation-restriction . t2ad8) (&non-continuable . t2ad7) (&who . t2ad6) (&irritants . t2ad5) (&assertion . t2ad4) (&violation . t2ad3) (&error . t2ad2) (&serious . t2ad1) (&warning . t2ad0) (&message . t2acf) (&condition . t2ace) (define-condition-type . t2acd) (define-enumeration . t2acc) (define-record-type . t2acb) (parent-rtd . t2aca) (nongenerative . t2ac9) (opaque . t2ac8) (sealed . t2ac7) (protocol . t2ac6) (parent . t2ac5) (immutable . t2ac4) (mutable . t2ac3) (fields . t2ac2) (error-handling-mode . t2ac1) (file-options . t2ac0) (buffer-mode . t2abf) (eol-style . t2abe) (guard . t2abd) (unsyntax-splicing . t2aba) (unsyntax . t2ab9) (unquote-splicing . t2ab8) (unquote . t2ab7) (_ . t2ab6) (else . t2ab5) (=> . t2ab4) (... . t2ab3) (assert . t2ab2) (endianness . t2ab1) (do . t2aae) (cond . t2aad) (let* . t2aac) (let*-values . t2aab) (let-values . t2aaa) (identifier-syntax . t2aa9) (with-syntax . t2aa8) (quasisyntax . t2aa7) (quasiquote . t2aa6) (syntax-rules . t2aa5) (record-constructor-descriptor . t2aa2) (record-type-descriptor . t2aa1) (case . t2aa0) (unless . t2a9e) (when . t2a9d) (or . t2a9c) (and . t2a9b) (if . t2a9a) (let . t2a99) (letrec* . t2a98) (letrec . t2a97) (case-lambda . t2a95) (lambda . t2a94) (syntax . t2a93) (syntax-case . t2a92) (quote . t2a91) (letrec-syntax . t2a8f) (let-syntax . t2a8e) (set! . t2a8d) (begin . t2a8b) (define-syntax . t2a89) (define . t2a88)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e3a '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . te3f) (quotient . t2c91) (null-environment . te3d) (remainder . t2c90) (modulo . t2c8f) (inexact->exact . t2c8e) (force . t2c8d) (exact->inexact . t2c8c) (make-promise . t2c8b) (delay . t2ab0)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e3b '(rnrs control) '(6) '() '() '() '((do . t2aae) (unless . t2a9e) (when . t2a9d) (case-lambda . t2a95)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e3c '(rnrs eval) '(6) '() '() '() '((eval . te43) (environment . te3b)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e3d '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . t2c87) (set-car! . t2c86)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e3e '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . t2c89) (string-set! . t2c88)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e3f '(rnrs programs) '(6) '() '() '() '((exit . t2c8a) (command-line . t291c)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e40 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . tbae) (identifier? . te65) (generate-temporaries . te51) (free-identifier=? . te53) (syntax->datum . te69) (datum->syntax . te67) (bound-identifier=? . te55) (syntax-violation . te63) (unsyntax-splicing . t2aba) (unsyntax . t2ab9) (_ . t2ab6) (... . t2ab3) (with-syntax . t2aa8) (quasisyntax . t2aa7) (syntax . t2a93) (syntax-case . t2a92)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e41 '(rnrs files) '(6) '() '() '() '((delete-file . t2d16) (file-exists? . t2d15) (make-i/o-write-error . t2cc3) (make-i/o-read-error . t2cc2) (make-i/o-port-error . t2cc1) (make-i/o-invalid-position-error . t2cc0) (make-i/o-filename-error . t2cbf) (make-i/o-file-protection-error . t2cbe) (make-i/o-file-is-read-only-error . t2cbd) (make-i/o-file-does-not-exist-error . t2cbc) (make-i/o-file-already-exists-error . t2cbb) (make-i/o-error . t2cba) (i/o-write-error? . t2cae) (i/o-read-error? . t2cad) (i/o-port-error? . t2cac) (i/o-invalid-position-error? . t2cab) (i/o-filename-error? . t2caa) (i/o-file-protection-error? . t2ca9) (i/o-file-is-read-only-error? . t2ca8) (i/o-file-does-not-exist-error? . t2ca7) (i/o-file-already-exists-error? . t2ca6) (i/o-error? . t2ca5) (i/o-error-position . t2ca4) (i/o-error-port . t2ca3) (i/o-error-filename . t2ca2) (&i/o-port . t2ae5) (&i/o-file-does-not-exist . t2ae4) (&i/o-file-already-exists . t2ae3) (&i/o-file-is-read-only . t2ae2) (&i/o-file-protection . t2ae1) (&i/o-filename . t2ae0) (&i/o-invalid-position . t2adf) (&i/o-write . t2ade) (&i/o-read . t2add) (&i/o . t2adc)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e42 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . t2d14) (vector-sort . t2d13) (list-sort . t2d12)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e43 '(rnrs base) '(6) '() '() '() '((zero? . t2b8c) (vector? . t2b8b) (vector-set! . t2b8a) (vector-ref . t2b89) (vector-map . t2b88) (vector-length . t2b87) (vector-for-each . t2b86) (vector-fill! . t2b85) (vector->list . t2b84) (vector . t2b83) (values . t2b82) (truncate . t2b81) (tan . t2b80) (symbol? . t2b7f) (symbol=? . t2b7e) (symbol->string . t2b7d) (substring . t2b7c) (string? . t2b7b) (string>? . t2b7a) (string>=? . t2b79) (string=? . t2b78) (string<? . t2b77) (string<=? . t2b76) (string-ref . t2b75) (string-length . t2b74) (string-for-each . t2b73) (string-copy . t2b72) (string-append . t2b71) (string->symbol . t2b70) (string->number . t2b6f) (string->list . t2b6e) (string . t2b6d) (sqrt . t2b6c) (sin . t2b6b) (round . t2b6a) (reverse . t2b69) (real? . t2b68) (real-valued? . t2b67) (real-part . t2b66) (rationalize . t2b65) (rational? . t2b64) (rational-valued? . t2b63) (procedure? . t2b62) (positive? . t2b61) (pair? . t2b60) (odd? . t2b5f) (numerator . t2b5e) (number? . t2b5d) (number->string . t2b5c) (null? . t2b5b) (not . t2b5a) (negative? . t2b59) (nan? . t2b58) (min . t2b57) (max . t2b56) (map . t2b55) (make-vector . t2b54) (make-string . t2b53) (make-rectangular . t2b52) (make-polar . t2b51) (magnitude . t2b50) (log . t2b4f) (list? . t2b4e) (list-tail . t2b4d) (list-ref . t2b4c) (list->vector . t2b4b) (list->string . t2b4a) (list . t2b49) (length . t2b48) (lcm . t2b47) (integer? . t2b46) (integer-valued? . t2b45) (integer->char . t2b44) (infinite? . t2b43) (inexact? . t2b42) (inexact . t2b41) (imag-part . t2b40) (gcd . t2b3f) (for-each . t2b3e) (floor . t2b3d) (finite? . t2b3c) (expt . t2b3b) (exp . t2b3a) (exact? . t2b39) (exact-integer-sqrt . t2b38) (exact . t2b37) (even? . t2b36) (error . t2b35) (eqv? . t2b34) (equal? . t2b33) (eq? . t2b32) (dynamic-wind . t2b31) (div0-and-mod0 . t2b30) (mod0 . t2b2f) (div0 . t2b2e) (div-and-mod . t2b2d) (mod . t2b2c) (div . t2b2b) (denominator . t2b2a) (cos . t2b29) (cons . t2b28) (complex? . t2b27) (char? . t2b26) (char>? . t2b25) (char>=? . t2b24) (char=? . t2b23) (char<? . t2b22) (char<=? . t2b21) (char->integer . t2b20) (ceiling . t2b1f) (call-with-values . t2b1e) (call/cc . t2b1d) (call-with-current-continuation . t2b1c) (cddddr . t2b1b) (cdddar . t2b1a) (cddadr . t2b19) (cddaar . t2b18) (cdaddr . t2b17) (cdadar . t2b16) (cdaadr . t2b15) (cdaaar . t2b14) (cadddr . t2b13) (caddar . t2b12) (cadadr . t2b11) (cadaar . t2b10) (caaddr . t2b0f) (caadar . t2b0e) (caaadr . t2b0d) (caaaar . t2b0c) (cdddr . t2b0b) (cddar . t2b0a) (cdadr . t2b09) (cdaar . t2b08) (caddr . t2b07) (cadar . t2b06) (caadr . t2b05) (caaar . t2b04) (cddr . t2b03) (cdar . t2b02) (cadr . t2b01) (caar . t2b00) (cdr . t2aff) (car . t2afe) (boolean? . t2afd) (boolean=? . t2afc) (atan . t2afb) (assertion-violation . t2afa) (asin . t2af9) (apply . t2af8) (append . t2af7) (angle . t2af6) (acos . t2af5) (abs . t2af4) (/ . t2af3) (* . t2af2) (- . t2af1) (+ . t2af0) (>= . t2aef) (> . t2aee) (= . t2aed) (<= . t2aec) (< . t2aeb) (unquote-splicing . t2ab8) (unquote . t2ab7) (_ . t2ab6) (else . t2ab5) (=> . t2ab4) (... . t2ab3) (assert . t2ab2) (cond . t2aad) (let* . t2aac) (let*-values . t2aab) (let-values . t2aaa) (identifier-syntax . t2aa9) (quasiquote . t2aa6) (syntax-rules . t2aa5) (case . t2aa0) (or . t2a9c) (and . t2a9b) (if . t2a9a) (let . t2a99) (letrec* . t2a98) (letrec . t2a97) (lambda . t2a94) (quote . t2a91) (letrec-syntax . t2a8f) (let-syntax . t2a8e) (set! . t2a8d) (begin . t2a8b) (define-syntax . t2a89) (define . t2a88)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e44 '(rnrs lists) '(6) '() '() '() '((remove . t2c85) (remv . t2c84) (remp . t2c83) (remq . t2c82) (partition . t2c81) (memv . t2c80) (memq . t2c7f) (memp . t2c7e) (member . t2c7d) (exists . t2c7c) (for-all . t2c7b) (fold-right . t2c7a) (fold-left . t2c79) (find . t2c78) (filter . t2c77) (cons* . t2c76) (assv . t2c75) (assq . t2c74) (assp . t2c73) (assoc . t2c72)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e45 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . t2cfc) (call-with-input-file . t2cfb) (write-char . t2cfa) (write . t2cf9) (with-output-to-file . t2cf8) (with-input-from-file . t2cf7) (read-char . t2cf6) (read . t2cf5) (peek-char . t2cf4) (open-output-file . t2cf3) (open-input-file . t2cf2) (newline . t2cf1) (display . t2cf0) (close-output-port . t2cef) (close-input-port . t2cee) (eof-object? . t2ced) (eof-object . t2cec) (current-error-port . t2ceb) (current-output-port . t2cea) (current-input-port . t2ce9) (output-port? . t2ce8) (input-port? . t2ce7) (make-i/o-write-error . t2cc3) (make-i/o-read-error . t2cc2) (make-i/o-port-error . t2cc1) (make-i/o-invalid-position-error . t2cc0) (make-i/o-filename-error . t2cbf) (make-i/o-file-protection-error . t2cbe) (make-i/o-file-is-read-only-error . t2cbd) (make-i/o-file-does-not-exist-error . t2cbc) (make-i/o-file-already-exists-error . t2cbb) (make-i/o-error . t2cba) (i/o-write-error? . t2cae) (i/o-read-error? . t2cad) (i/o-port-error? . t2cac) (i/o-invalid-position-error? . t2cab) (i/o-filename-error? . t2caa) (i/o-file-protection-error? . t2ca9) (i/o-file-is-read-only-error? . t2ca8) (i/o-file-does-not-exist-error? . t2ca7) (i/o-file-already-exists-error? . t2ca6) (i/o-error? . t2ca5) (i/o-error-position . t2ca4) (i/o-error-port . t2ca3) (i/o-error-filename . t2ca2) (&i/o-port . t2ae5) (&i/o-file-does-not-exist . t2ae4) (&i/o-file-already-exists . t2ae3) (&i/o-file-is-read-only . t2ae2) (&i/o-file-protection . t2ae1) (&i/o-filename . t2ae0) (&i/o-invalid-position . t2adf) (&i/o-write . t2ade) (&i/o-read . t2add) (&i/o . t2adc)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e46 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . t2cb1) (utf32->string . t2c37) (utf16->string . t2c36) (utf8->string . t2c35) (uint-list->bytevector . t2c34) (u8-list->bytevector . t2c33) (string->utf8 . t2c32) (string->utf32 . t2c31) (string->utf16 . t2c30) (sint-list->bytevector . t2c2f) (native-endianness . t2c2e) (bytevector? . t2c2d) (bytevector=? . t2c2c) (bytevector-uint-set! . t2c2b) (bytevector-uint-ref . t2c2a) (bytevector-u8-set! . t2c29) (bytevector-u8-ref . t2c28) (bytevector-u64-set! . t2c27) (bytevector-u64-ref . t2c26) (bytevector-u64-native-set! . t2c25) (bytevector-u64-native-ref . t2c24) (bytevector-u32-set! . t2c23) (bytevector-u32-ref . t2c22) (bytevector-u32-native-set! . t2c21) (bytevector-u32-native-ref . t2c20) (bytevector-u16-set! . t2c1f) (bytevector-u16-ref . t2c1e) (bytevector-u16-native-set! . t2c1d) (bytevector-u16-native-ref . t2c1c) (bytevector-sint-set! . t2c1b) (bytevector-sint-ref . t2c1a) (bytevector-s8-set! . t2c19) (bytevector-s8-ref . t2c18) (bytevector-s64-set! . t2c17) (bytevector-s64-ref . t2c16) (bytevector-s64-native-set! . t2c15) (bytevector-s64-native-ref . t2c14) (bytevector-s32-set! . t2c13) (bytevector-s32-ref . t2c12) (bytevector-s32-native-set! . t2c11) (bytevector-s32-native-ref . t2c10) (bytevector-s16-set! . t2c0f) (bytevector-s16-ref . t2c0e) (bytevector-s16-native-set! . t2c0d) (bytevector-s16-native-ref . t2c0c) (bytevector-length . t2c0b) (bytevector-ieee-single-ref . t2c0a) (bytevector-ieee-single-set! . t2c09) (bytevector-ieee-single-native-set! . t2c08) (bytevector-ieee-single-native-ref . t2c07) (bytevector-ieee-double-set! . t2c06) (bytevector-ieee-double-ref . t2c05) (bytevector-ieee-double-native-set! . t2c04) (bytevector-ieee-double-native-ref . t2c03) (bytevector-fill! . t2c02) (bytevector-copy! . t2c01) (bytevector-copy . t2c00) (bytevector->uint-list . t2bff) (bytevector->u8-list . t2bfe) (bytevector->sint-list . t2bfd) (endianness . t2ab1)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e47 '(rnrs unicode) '(6) '() '() '() '((string-upcase . t2d44) (string-titlecase . t2d43) (string-normalize-nfkd . t2d42) (string-normalize-nfkc . t2d41) (string-normalize-nfd . t2d40) (string-normalize-nfc . t2d3f) (string-foldcase . t2d3e) (string-downcase . t2d3d) (string-ci>? . t2d3c) (string-ci>=? . t2d3b) (string-ci=? . t2d3a) (string-ci<? . t2d39) (string-ci<=? . t2d38) (char-whitespace? . t2d37) (char-upper-case? . t2d36) (char-title-case? . t2d35) (char-numeric? . t2d34) (char-lower-case? . t2d33) (char-general-category . t2d32) (char-upcase . t2d31) (char-titlecase . t2d30) (char-foldcase . t2d2f) (char-downcase . t2d2e) (char-ci>? . t2d2d) (char-ci>=? . t2d2c) (char-ci=? . t2d2b) (char-ci<? . t2d2a) (char-ci<=? . t2d29) (char-alphabetic? . t2d28)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e48 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . t2c6b) (raise-continuable . t2c6a) (raise . t2c69) (guard . t2abd) (else . t2ab5) (=> . t2ab4)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e49 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . t2b9d) (bitwise-reverse-bit-field . t2b9c) (bitwise-length . t2b9b) (bitwise-if . t2b9a) (bitwise-first-bit-set . t2b99) (bitwise-copy-bit-field . t2b98) (bitwise-copy-bit . t2b97) (bitwise-bit-set? . t2b96) (bitwise-bit-field . t2b95) (bitwise-bit-count . t2b94) (bitwise-xor . t2b93) (bitwise-ior . t2b92) (bitwise-and . t2b91) (bitwise-not . t2b90) (bitwise-arithmetic-shift-right . t2b8f) (bitwise-arithmetic-shift-left . t2b8e) (bitwise-arithmetic-shift . t2b8d)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e4a '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . t2bca) (fxxor . t2bc9) (fxrotate-bit-field . t2bc8) (fxreverse-bit-field . t2bc7) (fxpositive? . t2bc6) (fxodd? . t2bc5) (fxnot . t2bc4) (fxnegative? . t2bc3) (fxmod0 . t2bc2) (fxmod . t2bc1) (fxmin . t2bc0) (fxmax . t2bbf) (fxlength . t2bbe) (fxior . t2bbd) (fxif . t2bbc) (fxfirst-bit-set . t2bbb) (fxeven? . t2bba) (fxdiv0-and-mod0 . t2bb9) (fxdiv0 . t2bb8) (fxdiv-and-mod . t2bb7) (fxdiv . t2bb6) (fxcopy-bit-field . t2bb5) (fxcopy-bit . t2bb4) (fxbit-set? . t2bb3) (fxbit-field . t2bb2) (fxbit-count . t2bb1) (fxarithmetic-shift-right . t2bb0) (fxarithmetic-shift-left . t2baf) (fxarithmetic-shift . t2bae) (fxand . t2bad) (fx>? . t2bac) (fx>=? . t2bab) (fx=? . t2baa) (fx<? . t2ba9) (fx<=? . t2ba8) (fx-/carry . t2ba7) (fx- . t2ba6) (fx+/carry . t2ba5) (fx+ . t2ba4) (fx*/carry . t2ba3) (fx* . t2ba2) (greatest-fixnum . t2ba1) (least-fixnum . t2ba0) (fixnum-width . t2b9f) (fixnum? . t2b9e)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e4b '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . t2bfc) (no-infinities-violation? . t2bfb) (make-no-nans-violation . t2bfa) (make-no-infinities-violation . t2bf9) (real->flonum . t2bf8) (flzero? . t2bf7) (fltruncate . t2bf6) (fltan . t2bf5) (flsqrt . t2bf4) (flsin . t2bf3) (flround . t2bf2) (flpositive? . t2bf1) (flonum? . t2bf0) (flodd? . t2bef) (flnumerator . t2bee) (flnegative? . t2bed) (flnan? . t2bec) (flmod0 . t2beb) (flmod . t2bea) (flmin . t2be9) (flmax . t2be8) (fllog . t2be7) (flinteger? . t2be6) (flinfinite? . t2be5) (flfloor . t2be4) (flfinite? . t2be3) (flexpt . t2be2) (flexp . t2be1) (fleven? . t2be0) (fldiv0-and-mod0 . t2bdf) (fldiv0 . t2bde) (fldiv-and-mod . t2bdd) (fldiv . t2bdc) (fldenominator . t2bdb) (flcos . t2bda) (flceiling . t2bd9) (flatan . t2bd8) (flasin . t2bd7) (flacos . t2bd6) (flabs . t2bd5) (fl>? . t2bd4) (fl>=? . t2bd3) (fl=? . t2bd2) (fl<? . t2bd1) (fl<=? . t2bd0) (fl/ . t2bcf) (fl- . t2bce) (fl+ . t2bcd) (fl* . t2bcc) (fixnum->flonum . t2bcb) (&no-nans . t2ae9) (&no-infinities . t2ae8)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e4c '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . t2d11) (string-ci-hash . t2d10) (string-hash . t2d0f) (equal-hash . t2d0e) (hashtable-equivalence-function . t2d0d) (make-hashtable . t2d0c) (hashtable-hash-function . t2d0b) (make-eqv-hashtable . t2d0a) (make-eq-hashtable . t2d09) (hashtable? . t2d08) (hashtable-update! . t2d07) (hashtable-size . t2d06) (hashtable-set! . t2d05) (hashtable-ref . t2d04) (hashtable-mutable? . t2d03) (hashtable-keys . t2d02) (hashtable-entries . t2d01) (hashtable-delete! . t2d00) (hashtable-copy . t2cff) (hashtable-contains? . t2cfe) (hashtable-clear! . t2cfd)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e4d '(rnrs io ports) '(6) '() '() '() '((eof-object? . t2ced) (eof-object . t2cec) (current-error-port . t2ceb) (current-output-port . t2cea) (current-input-port . t2ce9) (output-port? . t2ce8) (input-port? . t2ce7) (utf-8-codec . t2ce6) (utf-16-codec . t2ce5) (transcoder-error-handling-mode . t2ce4) (transcoder-eol-style . t2ce3) (transcoder-codec . t2ce2) (transcoded-port . t2ce1) (textual-port? . t2ce0) (string->bytevector . t2cdf) (standard-output-port . t2cde) (standard-input-port . t2cdd) (standard-error-port . t2cdc) (set-port-position! . t2cdb) (put-u8 . t2cda) (put-string . t2cd9) (put-datum . t2cd8) (put-char . t2cd7) (put-bytevector . t2cd6) (port? . t2cd5) (port-transcoder . t2cd4) (port-position . t2cd3) (port-has-set-port-position!? . t2cd2) (port-has-port-position? . t2cd1) (port-eof? . t2cd0) (output-port-buffer-mode . t2ccf) (open-string-output-port . t2cce) (open-string-input-port . t2ccd) (open-file-output-port . t2ccc) (open-file-input/output-port . t2ccb) (open-file-input-port . t2cca) (open-bytevector-output-port . t2cc9) (open-bytevector-input-port . t2cc8) (native-transcoder . t2cc7) (native-eol-style . t2cc6) (make-transcoder . t2cc5) (latin-1-codec . t2cc4) (make-i/o-write-error . t2cc3) (make-i/o-read-error . t2cc2) (make-i/o-port-error . t2cc1) (make-i/o-invalid-position-error . t2cc0) (make-i/o-filename-error . t2cbf) (make-i/o-file-protection-error . t2cbe) (make-i/o-file-is-read-only-error . t2cbd) (make-i/o-file-does-not-exist-error . t2cbc) (make-i/o-file-already-exists-error . t2cbb) (make-i/o-error . t2cba) (make-i/o-encoding-error . t2cb9) (make-i/o-decoding-error . t2cb8) (make-custom-textual-output-port . t2cb7) (make-custom-textual-input/output-port . t2cb6) (make-custom-textual-input-port . t2cb5) (make-custom-binary-output-port . t2cb4) (make-custom-binary-input/output-port . t2cb3) (make-custom-binary-input-port . t2cb2) (lookahead-u8 . t2cb0) (lookahead-char . t2caf) (i/o-write-error? . t2cae) (i/o-read-error? . t2cad) (i/o-port-error? . t2cac) (i/o-invalid-position-error? . t2cab) (i/o-filename-error? . t2caa) (i/o-file-protection-error? . t2ca9) (i/o-file-is-read-only-error? . t2ca8) (i/o-file-does-not-exist-error? . t2ca7) (i/o-file-already-exists-error? . t2ca6) (i/o-error? . t2ca5) (i/o-error-position . t2ca4) (i/o-error-port . t2ca3) (i/o-error-filename . t2ca2) (i/o-encoding-error? . t2ca1) (i/o-encoding-error-char . t2ca0) (i/o-decoding-error? . t2c9f) (get-u8 . t2c9e) (get-string-n! . t2c9d) (get-string-n . t2c9c) (get-string-all . t2c9b) (get-line . t2c9a) (get-datum . t2c99) (get-char . t2c98) (get-bytevector-some . t2c97) (get-bytevector-n! . t2c96) (get-bytevector-n . t2c95) (get-bytevector-all . t2c94) (flush-output-port . t2c93) (close-port . t2c92) (call-with-string-output-port . t2c71) (call-with-port . t2c70) (call-with-bytevector-output-port . t2c6f) (bytevector->string . t2c6e) (buffer-mode? . t2c6d) (binary-port? . t2c6c) (&i/o-encoding . t2ae7) (&i/o-decoding . t2ae6) (&i/o-port . t2ae5) (&i/o-file-does-not-exist . t2ae4) (&i/o-file-already-exists . t2ae3) (&i/o-file-is-read-only . t2ae2) (&i/o-file-protection . t2ae1) (&i/o-filename . t2ae0) (&i/o-invalid-position . t2adf) (&i/o-write . t2ade) (&i/o-read . t2add) (&i/o . t2adc) (error-handling-mode . t2ac1) (file-options . t2ac0) (buffer-mode . t2abf) (eol-style . t2abe)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e4e '(rnrs enums) '(6) '() '() '() '((make-enumeration . t2c68) (enum-set=? . t2c67) (enum-set-universe . t2c66) (enum-set-union . t2c65) (enum-set-subset? . t2c64) (enum-set-projection . t2c63) (enum-set-member? . t2c62) (enum-set-intersection . t2c61) (enum-set-indexer . t2c60) (enum-set-difference . t2c5f) (enum-set-constructor . t2c5e) (enum-set-complement . t2c5d) (enum-set->list . t2c5c) (define-enumeration . t2acc)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e4f '(rnrs conditions) '(6) '() '() '() '((who-condition? . t2c5b) (warning? . t2c5a) (violation? . t2c59) (undefined-violation? . t2c58) (syntax-violation? . t2c57) (syntax-violation-subform . t2c56) (syntax-violation-form . t2c55) (syntax-violation . te63) (simple-conditions . t2c54) (serious-condition? . t2c53) (non-continuable-violation? . t2c52) (message-condition? . t2c51) (make-who-condition . t2c50) (make-warning . t2c4f) (make-violation . t2c4e) (make-undefined-violation . t2c4d) (make-syntax-violation . t2c4c) (make-serious-condition . t2c4b) (make-non-continuable-violation . t2c4a) (make-message-condition . t2c49) (make-lexical-violation . t2c48) (make-irritants-condition . t2c47) (make-implementation-restriction-violation . t2c46) (make-error . t2c45) (make-assertion-violation . t2c44) (lexical-violation? . t2c43) (irritants-condition? . t2c42) (implementation-restriction-violation? . t2c41) (error? . t2c40) (condition-who . t2c3f) (condition-predicate . t2c3e) (condition-message . t2c3d) (condition-irritants . t2c3c) (condition-accessor . t2c3b) (condition . t2c3a) (assertion-violation? . t2c39) (condition? . t2c38) (&undefined . t2adb) (&syntax . t2ada) (&lexical . t2ad9) (&implementation-restriction . t2ad8) (&non-continuable . t2ad7) (&who . t2ad6) (&irritants . t2ad5) (&assertion . t2ad4) (&violation . t2ad3) (&error . t2ad2) (&serious . t2ad1) (&warning . t2ad0) (&message . t2acf) (&condition . t2ace) (define-condition-type . t2acd)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e50 '(rnrs records inspection) '(6) '() '() '() '((record? . t2d20) (record-type-uid . t2d1f) (record-type-sealed? . t2d1e) (record-type-parent . t2d1d) (record-type-opaque? . t2d1c) (record-type-name . t2d1b) (record-type-generative? . t2d1a) (record-type-field-names . t2d19) (record-rtd . t2d18) (record-field-mutable? . t2d17)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e51 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . t2d27) (record-predicate . t2d26) (record-mutator . t2d25) (record-constructor . t2d24) (record-accessor . t2d23) (make-record-type-descriptor . t2d22) (make-record-constructor-descriptor . t2d21)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e52 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . t2acb) (parent-rtd . t2aca) (nongenerative . t2ac9) (opaque . t2ac8) (sealed . t2ac7) (protocol . t2ac6) (parent . t2ac5) (immutable . t2ac4) (mutable . t2ac3) (fields . t2ac2) (record-constructor-descriptor . t2aa2) (record-type-descriptor . t2aa1)) '() values values '#f '#f '#t '#f) (t997@t7e3@install-library 't2e53 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . t2e33) (&no-nans-rtd . t2e32) (&no-infinities-rcd . t2e31) (&no-infinities-rtd . t2e30) (&i/o-encoding-rcd . t2e2f) (&i/o-encoding-rtd . t2e2e) (&i/o-decoding-rcd . t2e2d) (&i/o-decoding-rtd . t2e2c) (&i/o-port-rcd . t2e2b) (&i/o-port-rtd . t2e2a) (&i/o-file-does-not-exist-rcd . t2e29) (&i/o-file-does-not-exist-rtd . t2e28) (&i/o-file-already-exists-rcd . t2e27) (&i/o-file-already-exists-rtd . t2e26) (&i/o-file-is-read-only-rcd . t2e25) (&i/o-file-is-read-only-rtd . t2e24) (&i/o-file-protection-rcd . t2e23) (&i/o-file-protection-rtd . t2e22) (&i/o-filename-rcd . t2e21) (&i/o-filename-rtd . t2e20) (&i/o-invalid-position-rcd . t2e1f) (&i/o-invalid-position-rtd . t2e1e) (&i/o-write-rcd . t2e1d) (&i/o-write-rtd . t2e1c) (&i/o-read-rcd . t2e1b) (&i/o-read-rtd . t2e1a) (&i/o-rcd . t2e19) (&i/o-rtd . t2e18) (&undefined-rcd . t2e17) (&undefined-rtd . t2e16) (&syntax-rcd . t2e15) (&syntax-rtd . t2e14) (&lexical-rcd . t2e13) (&lexical-rtd . t2e12) (&implementation-restriction-rcd . t2e11) (&implementation-restriction-rtd . t2e10) (&non-continuable-rcd . t2e0f) (&non-continuable-rtd . t2e0e) (&who-rcd . t2e0d) (&who-rtd . t2e0c) (&irritants-rcd . t2e0b) (&irritants-rtd . t2e0a) (&assertion-rcd . t2e09) (&assertion-rtd . t2e08) (&violation-rcd . t2e07) (&violation-rtd . t2e06) (&error-rcd . t2e05) (&error-rtd . t2e04) (&serious-rcd . t2e03) (&serious-rtd . t2e02) (&warning-rcd . t2e01) (&warning-rtd . t2e00) (&message-rcd . t2dff) (&message-rtd . t2dfe) (&condition-rcd . t2dfd) (&condition-rtd . t2dfc) (syntax-error . te5f) (syntax-dispatch . td83) (pretty-print . t2dfb) (eval-core . t2dfa) (set-symbol-value! . t2df9) (symbol-value . t2df8) (gensym . t2df7) (void . t2df6) (load . t2922) (interaction-environment . te71) (char-ready? . t2df5) (regexp? . t2df4) (read-line . t2df3) (gensym-prefix-set! . t2df2) (ungensym . t2df1) (alist->eq-hash-table . t2df0) (assoc-ref . t2def) (print . t2dee) (format . t2ded) (host-os . t2dec) (library-path . t7c2) (standard-library-path . t2deb) (ssl-supported? . t2dea) (ssl-socket? . t2de9) (socket-sslize! . t2de8) (%monapi-name-whereis . t2de7) (%monapi-message-send . t2de6) (file-newer? . t2de5) (stat-mtime . t2de4) (write-to-file . t2de3) (file->list . t2de2) (file->string . t2de1) (digit->integer . t2de0) (call-with-string-input-port . t2ddf) (call-with-string-io . t2dde) (string-split . t2ddd) (bytevector-for-each . t2ddc) (string->regexp . t2ddb) (rxmatch . t2dda) (regexp-replace-all . t2dd9) (hashtable-fold-left . t2dd8) (hashtable-for-each . t2dd7) (mosh-cache-dir . t5ac) (call-process . t2dd6) (local-tz-offset . t2dd5) (microseconds . t2dd4) (directory-list . t2dd3) (set-current-directory! . t2dd2) (expand-path . t2dd1) (current-directory . t2dd0) (%getpid . t2dcf) (%spawn . t2dce) (%waitpid . t2dcd) (simple-struct-name . t2dcc) (simple-struct-set! . t2dcb) (simple-struct-ref . t2dca) (make-simple-struct . t2dc9) (simple-struct? . t2dc8) (pointer-ref-c-int64 . t2dc7) (pointer-ref-c-int32 . t2dc6) (pointer-ref-c-int16 . t2dc5) (pointer-ref-c-int8 . t2dc4) (pointer-ref-c-uint64 . t2dc3) (pointer-ref-c-uint32 . t2dc2) (pointer-ref-c-uint16 . t2dc1) (pointer-ref-c-uint8 . t2dc0) (pointer-set-c-uint64! . t2dbf) (pointer-set-c-uint32! . t2dbe) (pointer-set-c-uint16! . t2dbd) (pointer-set-c-uint8! . t2dbc) (pointer-set-c-int64! . t2dbb) (pointer-set-c-int32! . t2dba) (pointer-set-c-int16! . t2db9) (pointer-set-c-int8! . t2db8) (pointer-set-c-pointer! . t2db7) (pointer-set-c-double! . t2db6) (pointer-set-c-float! . t2db5) (pointer-set-c-long-long! . t2db4) (pointer-set-c-long! . t2db3) (pointer-set-c-int! . t2db2) (pointer-set-c-short! . t2db1) (pointer-set-c-char! . t2db0) (pointer-ref-c-pointer . t2daf) (pointer-ref-c-double . t2dae) (pointer-ref-c-float . t2dad) (pointer-ref-c-unsigned-long-long . t2dac) (pointer-ref-c-signed-long-long . t2dab) (pointer-ref-c-unsigned-long . t2daa) (pointer-ref-c-signed-long . t2da9) (pointer-ref-c-unsigned-int . t2da8) (pointer-ref-c-signed-int . t2da7) (pointer-ref-c-unsigned-short . t2da6) (pointer-ref-c-signed-short . t2da5) (pointer-ref-c-unsigned-char . t2da4) (pointer-ref-c-signed-char . t2da3) (pointer->integer . t2da2) (integer->pointer . t2da1) (pointer? . t2da0) (shared-errno . t2d9f) (%ffi-free-c-callback-trampoline . t2d9e) (%ffi-make-c-callback-trampoline . t2d9d) (%ffi-free . t2d9c) (%ffi-malloc . t2d9b) (%ffi-supported? . t2d9a) (%ffi-pointer->string . t2d99) (%ffi-call . t2d98) (%ffi-lookup . t2d97) (%ffi-open . t2d96) (null-terminated-utf8->string . t2d95) (null-terminated-bytevector->string . t2d94) (%exec . t2d93) (%fork . t2d92) (%pipe . t2d91) (p . t2d90) (open-output-string . t2d8f) (get-output-string . t2d8e) (file-stat-ctime . t2d8d) (file-stat-atime . t2d8c) (file-stat-mtime . t2d8b) (file-size-in-bytes . t2d8a) (file-writable? . t2d89) (file-executable? . t2d88) (file-readable? . t2d87) (file-regular? . t2d86) (file-symbolic-link? . t2d85) (file-directory? . t2d84) (create-symbolic-link . t2d83) (rename-file . t2d82) (delete-directory . t2d81) (create-directory . t2d80) (create-mosh-cache-dir . t2d7f) (get-environment-variables . t2d7e) (current-exception-handler . t2d7d) (get-environment-variable . t2d7c) (join-wraps . t2d7b) (id->real-label . t2d7a) (same-marks? . t2d79) (same-marks*? . t2d78) (get-timeofday . t2d77) (get-command-line . t2d76) (sys-display . t2d75) (whereis . t2d74) (register . t2d73) (vm-join! . t2d72) (vm-set-value! . t2d71) (vm? . t2d70) (main-vm? . t2d6f) (vm-eval . t2d6e) (vm-self . t2d6d) (vm-start! . t2d6c) (make-vm . t2d6b) (mutex-try-lock! . t2d6a) (mutex-unlock! . t2d69) (mutex-lock! . t2d68) (mutex? . t2d67) (make-mutex . t2d66) (condition-variable-notify-all! . t2d65) (condition-variable-notify! . t2d64) (condition-variable-wait! . t2d63) (make-condition-variable . t2d62) (write/ss . t2d61) (mosh-executable-path . t2d60) (make-file-options . t2d5f) (source-info . t2d5e) (make-compiler-instruction . t2d5d) (make-instruction . t2d5c) (set-annotation! . t2d5b) (get-annotation . t2d5a) (annotated-pair? . t2d59) (annotated-cons . t2d58) (set-source-info! . t2d57) (bignum? . t2d56) (fast-equal? . t2d55) (fasl-read . t2d54) (fasl-write . t2d53) (time-usage . t2d52) (os-constant . t2d51) (condition-printer . t2d50) (disasm . t2d4f) (make-parameter . t5aa) (socket-port . t2d4e) (socket-shutdown . t2d4d) (socket-close . t2d4c) (socket-send . t2d4b) (socket-recv! . t2d4a) (socket-recv . t2d49) (make-server-socket . t2d48) (make-client-socket . t2d47) (socket-accept . t2d46) (socket? . t2d45) (string-upcase . t2d44) (string-titlecase . t2d43) (string-normalize-nfkd . t2d42) (string-normalize-nfkc . t2d41) (string-normalize-nfd . t2d40) (string-normalize-nfc . t2d3f) (string-foldcase . t2d3e) (string-downcase . t2d3d) (string-ci>? . t2d3c) (string-ci>=? . t2d3b) (string-ci=? . t2d3a) (string-ci<? . t2d39) (string-ci<=? . t2d38) (char-whitespace? . t2d37) (char-upper-case? . t2d36) (char-title-case? . t2d35) (char-numeric? . t2d34) (char-lower-case? . t2d33) (char-general-category . t2d32) (char-upcase . t2d31) (char-titlecase . t2d30) (char-foldcase . t2d2f) (char-downcase . t2d2e) (char-ci>? . t2d2d) (char-ci>=? . t2d2c) (char-ci=? . t2d2b) (char-ci<? . t2d2a) (char-ci<=? . t2d29) (char-alphabetic? . t2d28) (make-variable-transformer . tbae) (identifier? . te65) (generate-temporaries . te51) (free-identifier=? . te53) (syntax->datum . te69) (datum->syntax . te67) (bound-identifier=? . te55) (record-type-descriptor? . t2d27) (record-predicate . t2d26) (record-mutator . t2d25) (record-constructor . t2d24) (record-accessor . t2d23) (make-record-type-descriptor . t2d22) (make-record-constructor-descriptor . t2d21) (record? . t2d20) (record-type-uid . t2d1f) (record-type-sealed? . t2d1e) (record-type-parent . t2d1d) (record-type-opaque? . t2d1c) (record-type-name . t2d1b) (record-type-generative? . t2d1a) (record-type-field-names . t2d19) (record-rtd . t2d18) (record-field-mutable? . t2d17) (delete-file . t2d16) (file-exists? . t2d15) (vector-sort! . t2d14) (vector-sort . t2d13) (list-sort . t2d12) (symbol-hash . t2d11) (string-ci-hash . t2d10) (string-hash . t2d0f) (equal-hash . t2d0e) (hashtable-equivalence-function . t2d0d) (make-hashtable . t2d0c) (hashtable-hash-function . t2d0b) (make-eqv-hashtable . t2d0a) (make-eq-hashtable . t2d09) (hashtable? . t2d08) (hashtable-update! . t2d07) (hashtable-size . t2d06) (hashtable-set! . t2d05) (hashtable-ref . t2d04) (hashtable-mutable? . t2d03) (hashtable-keys . t2d02) (hashtable-entries . t2d01) (hashtable-delete! . t2d00) (hashtable-copy . t2cff) (hashtable-contains? . t2cfe) (hashtable-clear! . t2cfd) (call-with-output-file . t2cfc) (call-with-input-file . t2cfb) (write-char . t2cfa) (write . t2cf9) (with-output-to-file . t2cf8) (with-input-from-file . t2cf7) (read-char . t2cf6) (read . t2cf5) (peek-char . t2cf4) (open-output-file . t2cf3) (open-input-file . t2cf2) (newline . t2cf1) (display . t2cf0) (close-output-port . t2cef) (close-input-port . t2cee) (eof-object? . t2ced) (eof-object . t2cec) (current-error-port . t2ceb) (current-output-port . t2cea) (current-input-port . t2ce9) (output-port? . t2ce8) (input-port? . t2ce7) (utf-8-codec . t2ce6) (utf-16-codec . t2ce5) (transcoder-error-handling-mode . t2ce4) (transcoder-eol-style . t2ce3) (transcoder-codec . t2ce2) (transcoded-port . t2ce1) (textual-port? . t2ce0) (string->bytevector . t2cdf) (standard-output-port . t2cde) (standard-input-port . t2cdd) (standard-error-port . t2cdc) (set-port-position! . t2cdb) (put-u8 . t2cda) (put-string . t2cd9) (put-datum . t2cd8) (put-char . t2cd7) (put-bytevector . t2cd6) (port? . t2cd5) (port-transcoder . t2cd4) (port-position . t2cd3) (port-has-set-port-position!? . t2cd2) (port-has-port-position? . t2cd1) (port-eof? . t2cd0) (output-port-buffer-mode . t2ccf) (open-string-output-port . t2cce) (open-string-input-port . t2ccd) (open-file-output-port . t2ccc) (open-file-input/output-port . t2ccb) (open-file-input-port . t2cca) (open-bytevector-output-port . t2cc9) (open-bytevector-input-port . t2cc8) (native-transcoder . t2cc7) (native-eol-style . t2cc6) (make-transcoder . t2cc5) (latin-1-codec . t2cc4) (make-i/o-write-error . t2cc3) (make-i/o-read-error . t2cc2) (make-i/o-port-error . t2cc1) (make-i/o-invalid-position-error . t2cc0) (make-i/o-filename-error . t2cbf) (make-i/o-file-protection-error . t2cbe) (make-i/o-file-is-read-only-error . t2cbd) (make-i/o-file-does-not-exist-error . t2cbc) (make-i/o-file-already-exists-error . t2cbb) (make-i/o-error . t2cba) (make-i/o-encoding-error . t2cb9) (make-i/o-decoding-error . t2cb8) (make-custom-textual-output-port . t2cb7) (make-custom-textual-input/output-port . t2cb6) (make-custom-textual-input-port . t2cb5) (make-custom-binary-output-port . t2cb4) (make-custom-binary-input/output-port . t2cb3) (make-custom-binary-input-port . t2cb2) (make-bytevector . t2cb1) (lookahead-u8 . t2cb0) (lookahead-char . t2caf) (i/o-write-error? . t2cae) (i/o-read-error? . t2cad) (i/o-port-error? . t2cac) (i/o-invalid-position-error? . t2cab) (i/o-filename-error? . t2caa) (i/o-file-protection-error? . t2ca9) (i/o-file-is-read-only-error? . t2ca8) (i/o-file-does-not-exist-error? . t2ca7) (i/o-file-already-exists-error? . t2ca6) (i/o-error? . t2ca5) (i/o-error-position . t2ca4) (i/o-error-port . t2ca3) (i/o-error-filename . t2ca2) (i/o-encoding-error? . t2ca1) (i/o-encoding-error-char . t2ca0) (i/o-decoding-error? . t2c9f) (get-u8 . t2c9e) (get-string-n! . t2c9d) (get-string-n . t2c9c) (get-string-all . t2c9b) (get-line . t2c9a) (get-datum . t2c99) (get-char . t2c98) (get-bytevector-some . t2c97) (get-bytevector-n! . t2c96) (get-bytevector-n . t2c95) (get-bytevector-all . t2c94) (flush-output-port . t2c93) (close-port . t2c92) (scheme-report-environment . te3f) (quotient . t2c91) (null-environment . te3d) (remainder . t2c90) (modulo . t2c8f) (inexact->exact . t2c8e) (force . t2c8d) (exact->inexact . t2c8c) (make-promise . t2c8b) (exit . t2c8a) (command-line . t291c) (string-fill! . t2c89) (string-set! . t2c88) (set-cdr! . t2c87) (set-car! . t2c86) (remove . t2c85) (remv . t2c84) (remp . t2c83) (remq . t2c82) (partition . t2c81) (memv . t2c80) (memq . t2c7f) (memp . t2c7e) (member . t2c7d) (exists . t2c7c) (for-all . t2c7b) (fold-right . t2c7a) (fold-left . t2c79) (find . t2c78) (filter . t2c77) (cons* . t2c76) (assv . t2c75) (assq . t2c74) (assp . t2c73) (assoc . t2c72) (call-with-string-output-port . t2c71) (call-with-port . t2c70) (call-with-bytevector-output-port . t2c6f) (bytevector->string . t2c6e) (buffer-mode? . t2c6d) (binary-port? . t2c6c) (with-exception-handler . t2c6b) (raise-continuable . t2c6a) (raise . t2c69) (eval . te43) (environment . te3b) (make-enumeration . t2c68) (enum-set=? . t2c67) (enum-set-universe . t2c66) (enum-set-union . t2c65) (enum-set-subset? . t2c64) (enum-set-projection . t2c63) (enum-set-member? . t2c62) (enum-set-intersection . t2c61) (enum-set-indexer . t2c60) (enum-set-difference . t2c5f) (enum-set-constructor . t2c5e) (enum-set-complement . t2c5d) (enum-set->list . t2c5c) (who-condition? . t2c5b) (warning? . t2c5a) (violation? . t2c59) (undefined-violation? . t2c58) (syntax-violation? . t2c57) (syntax-violation-subform . t2c56) (syntax-violation-form . t2c55) (syntax-violation . te63) (simple-conditions . t2c54) (serious-condition? . t2c53) (non-continuable-violation? . t2c52) (message-condition? . t2c51) (make-who-condition . t2c50) (make-warning . t2c4f) (make-violation . t2c4e) (make-undefined-violation . t2c4d) (make-syntax-violation . t2c4c) (make-serious-condition . t2c4b) (make-non-continuable-violation . t2c4a) (make-message-condition . t2c49) (make-lexical-violation . t2c48) (make-irritants-condition . t2c47) (make-implementation-restriction-violation . t2c46) (make-error . t2c45) (make-assertion-violation . t2c44) (lexical-violation? . t2c43) (irritants-condition? . t2c42) (implementation-restriction-violation? . t2c41) (error? . t2c40) (condition-who . t2c3f) (condition-predicate . t2c3e) (condition-message . t2c3d) (condition-irritants . t2c3c) (condition-accessor . t2c3b) (condition . t2c3a) (assertion-violation? . t2c39) (condition? . t2c38) (utf32->string . t2c37) (utf16->string . t2c36) (utf8->string . t2c35) (uint-list->bytevector . t2c34) (u8-list->bytevector . t2c33) (string->utf8 . t2c32) (string->utf32 . t2c31) (string->utf16 . t2c30) (sint-list->bytevector . t2c2f) (native-endianness . t2c2e) (bytevector? . t2c2d) (bytevector=? . t2c2c) (bytevector-uint-set! . t2c2b) (bytevector-uint-ref . t2c2a) (bytevector-u8-set! . t2c29) (bytevector-u8-ref . t2c28) (bytevector-u64-set! . t2c27) (bytevector-u64-ref . t2c26) (bytevector-u64-native-set! . t2c25) (bytevector-u64-native-ref . t2c24) (bytevector-u32-set! . t2c23) (bytevector-u32-ref . t2c22) (bytevector-u32-native-set! . t2c21) (bytevector-u32-native-ref . t2c20) (bytevector-u16-set! . t2c1f) (bytevector-u16-ref . t2c1e) (bytevector-u16-native-set! . t2c1d) (bytevector-u16-native-ref . t2c1c) (bytevector-sint-set! . t2c1b) (bytevector-sint-ref . t2c1a) (bytevector-s8-set! . t2c19) (bytevector-s8-ref . t2c18) (bytevector-s64-set! . t2c17) (bytevector-s64-ref . t2c16) (bytevector-s64-native-set! . t2c15) (bytevector-s64-native-ref . t2c14) (bytevector-s32-set! . t2c13) (bytevector-s32-ref . t2c12) (bytevector-s32-native-set! . t2c11) (bytevector-s32-native-ref . t2c10) (bytevector-s16-set! . t2c0f) (bytevector-s16-ref . t2c0e) (bytevector-s16-native-set! . t2c0d) (bytevector-s16-native-ref . t2c0c) (bytevector-length . t2c0b) (bytevector-ieee-single-ref . t2c0a) (bytevector-ieee-single-set! . t2c09) (bytevector-ieee-single-native-set! . t2c08) (bytevector-ieee-single-native-ref . t2c07) (bytevector-ieee-double-set! . t2c06) (bytevector-ieee-double-ref . t2c05) (bytevector-ieee-double-native-set! . t2c04) (bytevector-ieee-double-native-ref . t2c03) (bytevector-fill! . t2c02) (bytevector-copy! . t2c01) (bytevector-copy . t2c00) (bytevector->uint-list . t2bff) (bytevector->u8-list . t2bfe) (bytevector->sint-list . t2bfd) (no-nans-violation? . t2bfc) (no-infinities-violation? . t2bfb) (make-no-nans-violation . t2bfa) (make-no-infinities-violation . t2bf9) (real->flonum . t2bf8) (flzero? . t2bf7) (fltruncate . t2bf6) (fltan . t2bf5) (flsqrt . t2bf4) (flsin . t2bf3) (flround . t2bf2) (flpositive? . t2bf1) (flonum? . t2bf0) (flodd? . t2bef) (flnumerator . t2bee) (flnegative? . t2bed) (flnan? . t2bec) (flmod0 . t2beb) (flmod . t2bea) (flmin . t2be9) (flmax . t2be8) (fllog . t2be7) (flinteger? . t2be6) (flinfinite? . t2be5) (flfloor . t2be4) (flfinite? . t2be3) (flexpt . t2be2) (flexp . t2be1) (fleven? . t2be0) (fldiv0-and-mod0 . t2bdf) (fldiv0 . t2bde) (fldiv-and-mod . t2bdd) (fldiv . t2bdc) (fldenominator . t2bdb) (flcos . t2bda) (flceiling . t2bd9) (flatan . t2bd8) (flasin . t2bd7) (flacos . t2bd6) (flabs . t2bd5) (fl>? . t2bd4) (fl>=? . t2bd3) (fl=? . t2bd2) (fl<? . t2bd1) (fl<=? . t2bd0) (fl/ . t2bcf) (fl- . t2bce) (fl+ . t2bcd) (fl* . t2bcc) (fixnum->flonum . t2bcb) (fxzero? . t2bca) (fxxor . t2bc9) (fxrotate-bit-field . t2bc8) (fxreverse-bit-field . t2bc7) (fxpositive? . t2bc6) (fxodd? . t2bc5) (fxnot . t2bc4) (fxnegative? . t2bc3) (fxmod0 . t2bc2) (fxmod . t2bc1) (fxmin . t2bc0) (fxmax . t2bbf) (fxlength . t2bbe) (fxior . t2bbd) (fxif . t2bbc) (fxfirst-bit-set . t2bbb) (fxeven? . t2bba) (fxdiv0-and-mod0 . t2bb9) (fxdiv0 . t2bb8) (fxdiv-and-mod . t2bb7) (fxdiv . t2bb6) (fxcopy-bit-field . t2bb5) (fxcopy-bit . t2bb4) (fxbit-set? . t2bb3) (fxbit-field . t2bb2) (fxbit-count . t2bb1) (fxarithmetic-shift-right . t2bb0) (fxarithmetic-shift-left . t2baf) (fxarithmetic-shift . t2bae) (fxand . t2bad) (fx>? . t2bac) (fx>=? . t2bab) (fx=? . t2baa) (fx<? . t2ba9) (fx<=? . t2ba8) (fx-/carry . t2ba7) (fx- . t2ba6) (fx+/carry . t2ba5) (fx+ . t2ba4) (fx*/carry . t2ba3) (fx* . t2ba2) (greatest-fixnum . t2ba1) (least-fixnum . t2ba0) (fixnum-width . t2b9f) (fixnum? . t2b9e) (bitwise-rotate-bit-field . t2b9d) (bitwise-reverse-bit-field . t2b9c) (bitwise-length . t2b9b) (bitwise-if . t2b9a) (bitwise-first-bit-set . t2b99) (bitwise-copy-bit-field . t2b98) (bitwise-copy-bit . t2b97) (bitwise-bit-set? . t2b96) (bitwise-bit-field . t2b95) (bitwise-bit-count . t2b94) (bitwise-xor . t2b93) (bitwise-ior . t2b92) (bitwise-and . t2b91) (bitwise-not . t2b90) (bitwise-arithmetic-shift-right . t2b8f) (bitwise-arithmetic-shift-left . t2b8e) (bitwise-arithmetic-shift . t2b8d) (zero? . t2b8c) (vector? . t2b8b) (vector-set! . t2b8a) (vector-ref . t2b89) (vector-map . t2b88) (vector-length . t2b87) (vector-for-each . t2b86) (vector-fill! . t2b85) (vector->list . t2b84) (vector . t2b83) (values . t2b82) (truncate . t2b81) (tan . t2b80) (symbol? . t2b7f) (symbol=? . t2b7e) (symbol->string . t2b7d) (substring . t2b7c) (string? . t2b7b) (string>? . t2b7a) (string>=? . t2b79) (string=? . t2b78) (string<? . t2b77) (string<=? . t2b76) (string-ref . t2b75) (string-length . t2b74) (string-for-each . t2b73) (string-copy . t2b72) (string-append . t2b71) (string->symbol . t2b70) (string->number . t2b6f) (string->list . t2b6e) (string . t2b6d) (sqrt . t2b6c) (sin . t2b6b) (round . t2b6a) (reverse . t2b69) (real? . t2b68) (real-valued? . t2b67) (real-part . t2b66) (rationalize . t2b65) (rational? . t2b64) (rational-valued? . t2b63) (procedure? . t2b62) (positive? . t2b61) (pair? . t2b60) (odd? . t2b5f) (numerator . t2b5e) (number? . t2b5d) (number->string . t2b5c) (null? . t2b5b) (not . t2b5a) (negative? . t2b59) (nan? . t2b58) (min . t2b57) (max . t2b56) (map . t2b55) (make-vector . t2b54) (make-string . t2b53) (make-rectangular . t2b52) (make-polar . t2b51) (magnitude . t2b50) (log . t2b4f) (list? . t2b4e) (list-tail . t2b4d) (list-ref . t2b4c) (list->vector . t2b4b) (list->string . t2b4a) (list . t2b49) (length . t2b48) (lcm . t2b47) (integer? . t2b46) (integer-valued? . t2b45) (integer->char . t2b44) (infinite? . t2b43) (inexact? . t2b42) (inexact . t2b41) (imag-part . t2b40) (gcd . t2b3f) (for-each . t2b3e) (floor . t2b3d) (finite? . t2b3c) (expt . t2b3b) (exp . t2b3a) (exact? . t2b39) (exact-integer-sqrt . t2b38) (exact . t2b37) (even? . t2b36) (error . t2b35) (eqv? . t2b34) (equal? . t2b33) (eq? . t2b32) (dynamic-wind . t2b31) (div0-and-mod0 . t2b30) (mod0 . t2b2f) (div0 . t2b2e) (div-and-mod . t2b2d) (mod . t2b2c) (div . t2b2b) (denominator . t2b2a) (cos . t2b29) (cons . t2b28) (complex? . t2b27) (char? . t2b26) (char>? . t2b25) (char>=? . t2b24) (char=? . t2b23) (char<? . t2b22) (char<=? . t2b21) (char->integer . t2b20) (ceiling . t2b1f) (call-with-values . t2b1e) (call/cc . t2b1d) (call-with-current-continuation . t2b1c) (cddddr . t2b1b) (cdddar . t2b1a) (cddadr . t2b19) (cddaar . t2b18) (cdaddr . t2b17) (cdadar . t2b16) (cdaadr . t2b15) (cdaaar . t2b14) (cadddr . t2b13) (caddar . t2b12) (cadadr . t2b11) (cadaar . t2b10) (caaddr . t2b0f) (caadar . t2b0e) (caaadr . t2b0d) (caaaar . t2b0c) (cdddr . t2b0b) (cddar . t2b0a) (cdadr . t2b09) (cdaar . t2b08) (caddr . t2b07) (cadar . t2b06) (caadr . t2b05) (caaar . t2b04) (cddr . t2b03) (cdar . t2b02) (cadr . t2b01) (caar . t2b00) (cdr . t2aff) (car . t2afe) (boolean? . t2afd) (boolean=? . t2afc) (atan . t2afb) (assertion-violation . t2afa) (assertion-error . te5d) (asin . t2af9) (apply . t2af8) (append . t2af7) (angle . t2af6) (acos . t2af5) (abs . t2af4) (/ . t2af3) (* . t2af2) (- . t2af1) (+ . t2af0) (>= . t2aef) (> . t2aee) (= . t2aed) (<= . t2aec) (< . t2aeb) (library . t2aea) (&no-nans . t2ae9) (&no-infinities . t2ae8) (&i/o-encoding . t2ae7) (&i/o-decoding . t2ae6) (&i/o-port . t2ae5) (&i/o-file-does-not-exist . t2ae4) (&i/o-file-already-exists . t2ae3) (&i/o-file-is-read-only . t2ae2) (&i/o-file-protection . t2ae1) (&i/o-filename . t2ae0) (&i/o-invalid-position . t2adf) (&i/o-write . t2ade) (&i/o-read . t2add) (&i/o . t2adc) (&undefined . t2adb) (&syntax . t2ada) (&lexical . t2ad9) (&implementation-restriction . t2ad8) (&non-continuable . t2ad7) (&who . t2ad6) (&irritants . t2ad5) (&assertion . t2ad4) (&violation . t2ad3) (&error . t2ad2) (&serious . t2ad1) (&warning . t2ad0) (&message . t2acf) (&condition . t2ace) (define-condition-type . t2acd) (define-enumeration . t2acc) (define-record-type . t2acb) (parent-rtd . t2aca) (nongenerative . t2ac9) (opaque . t2ac8) (sealed . t2ac7) (protocol . t2ac6) (parent . t2ac5) (immutable . t2ac4) (mutable . t2ac3) (fields . t2ac2) (error-handling-mode . t2ac1) (file-options . t2ac0) (buffer-mode . t2abf) (eol-style . t2abe) (guard . t2abd) (trace-define . t2abc) (trace-lambda . t2abb) (unsyntax-splicing . t2aba) (unsyntax . t2ab9) (unquote-splicing . t2ab8) (unquote . t2ab7) (_ . t2ab6) (else . t2ab5) (=> . t2ab4) (... . t2ab3) (assert . t2ab2) (endianness . t2ab1) (delay . t2ab0) (time . t2aaf) (do . t2aae) (cond . t2aad) (let* . t2aac) (let*-values . t2aab) (let-values . t2aaa) (identifier-syntax . t2aa9) (with-syntax . t2aa8) (quasisyntax . t2aa7) (quasiquote . t2aa6) (syntax-rules . t2aa5) (include . t2aa4) (define-struct . t2aa3) (record-constructor-descriptor . t2aa2) (record-type-descriptor . t2aa1) (case . t2aa0) (parameterize . t2a9f) (unless . t2a9e) (when . t2a9d) (or . t2a9c) (and . t2a9b) (if . t2a9a) (let . t2a99) (letrec* . t2a98) (letrec . t2a97) (type-descriptor . t2a96) (case-lambda . t2a95) (lambda . t2a94) (syntax . t2a93) (syntax-case . t2a92) (quote . t2a91) (foreign-call . t2a90) (letrec-syntax . t2a8f) (let-syntax . t2a8e) (set! . t2a8d) (import . t2a8c) (begin . t2a8b) (module . t2a8a) (define-syntax . t2a89) (define . t2a88)) '((t2e33 core-prim . &no-nans-rcd) (t2e32 core-prim . &no-nans-rtd) (t2e31 core-prim . &no-infinities-rcd) (t2e30 core-prim . &no-infinities-rtd) (t2e2f core-prim . &i/o-encoding-rcd) (t2e2e core-prim . &i/o-encoding-rtd) (t2e2d core-prim . &i/o-decoding-rcd) (t2e2c core-prim . &i/o-decoding-rtd) (t2e2b core-prim . &i/o-port-rcd) (t2e2a core-prim . &i/o-port-rtd) (t2e29 core-prim . &i/o-file-does-not-exist-rcd) (t2e28 core-prim . &i/o-file-does-not-exist-rtd) (t2e27 core-prim . &i/o-file-already-exists-rcd) (t2e26 core-prim . &i/o-file-already-exists-rtd) (t2e25 core-prim . &i/o-file-is-read-only-rcd) (t2e24 core-prim . &i/o-file-is-read-only-rtd) (t2e23 core-prim . &i/o-file-protection-rcd) (t2e22 core-prim . &i/o-file-protection-rtd) (t2e21 core-prim . &i/o-filename-rcd) (t2e20 core-prim . &i/o-filename-rtd) (t2e1f core-prim . &i/o-invalid-position-rcd) (t2e1e core-prim . &i/o-invalid-position-rtd) (t2e1d core-prim . &i/o-write-rcd) (t2e1c core-prim . &i/o-write-rtd) (t2e1b core-prim . &i/o-read-rcd) (t2e1a core-prim . &i/o-read-rtd) (t2e19 core-prim . &i/o-rcd) (t2e18 core-prim . &i/o-rtd) (t2e17 core-prim . &undefined-rcd) (t2e16 core-prim . &undefined-rtd) (t2e15 core-prim . &syntax-rcd) (t2e14 core-prim . &syntax-rtd) (t2e13 core-prim . &lexical-rcd) (t2e12 core-prim . &lexical-rtd) (t2e11 core-prim . &implementation-restriction-rcd) (t2e10 core-prim . &implementation-restriction-rtd) (t2e0f core-prim . &non-continuable-rcd) (t2e0e core-prim . &non-continuable-rtd) (t2e0d core-prim . &who-rcd) (t2e0c core-prim . &who-rtd) (t2e0b core-prim . &irritants-rcd) (t2e0a core-prim . &irritants-rtd) (t2e09 core-prim . &assertion-rcd) (t2e08 core-prim . &assertion-rtd) (t2e07 core-prim . &violation-rcd) (t2e06 core-prim . &violation-rtd) (t2e05 core-prim . &error-rcd) (t2e04 core-prim . &error-rtd) (t2e03 core-prim . &serious-rcd) (t2e02 core-prim . &serious-rtd) (t2e01 core-prim . &warning-rcd) (t2e00 core-prim . &warning-rtd) (t2dff core-prim . &message-rcd) (t2dfe core-prim . &message-rtd) (t2dfd core-prim . &condition-rcd) (t2dfc core-prim . &condition-rtd) (te5f core-prim . syntax-error) (td83 core-prim . syntax-dispatch) (t2dfb core-prim . pretty-print) (t2dfa core-prim . eval-core) (t2df9 core-prim . set-symbol-value!) (t2df8 core-prim . symbol-value) (t2df7 core-prim . gensym) (t2df6 core-prim . void) (t2922 core-prim . load) (te71 core-prim . interaction-environment) (t2df5 core-prim . char-ready?) (t2df4 core-prim . regexp?) (t2df3 core-prim . read-line) (t2df2 core-prim . gensym-prefix-set!) (t2df1 core-prim . ungensym) (t2df0 core-prim . alist->eq-hash-table) (t2def core-prim . assoc-ref) (t2dee core-prim . print) (t2ded core-prim . format) (t2dec core-prim . host-os) (t7c2 core-prim . library-path) (t2deb core-prim . standard-library-path) (t2dea core-prim . ssl-supported?) (t2de9 core-prim . ssl-socket?) (t2de8 core-prim . socket-sslize!) (t2de7 core-prim . %monapi-name-whereis) (t2de6 core-prim . %monapi-message-send) (t2de5 core-prim . file-newer?) (t2de4 core-prim . stat-mtime) (t2de3 core-prim . write-to-file) (t2de2 core-prim . file->list) (t2de1 core-prim . file->string) (t2de0 core-prim . digit->integer) (t2ddf core-prim . call-with-string-input-port) (t2dde core-prim . call-with-string-io) (t2ddd core-prim . string-split) (t2ddc core-prim . bytevector-for-each) (t2ddb core-prim . string->regexp) (t2dda core-prim . rxmatch) (t2dd9 core-prim . regexp-replace-all) (t2dd8 core-prim . hashtable-fold-left) (t2dd7 core-prim . hashtable-for-each) (t5ac core-prim . mosh-cache-dir) (t2dd6 core-prim . call-process) (t2dd5 core-prim . local-tz-offset) (t2dd4 core-prim . microseconds) (t2dd3 core-prim . directory-list) (t2dd2 core-prim . set-current-directory!) (t2dd1 core-prim . expand-path) (t2dd0 core-prim . current-directory) (t2dcf core-prim . %getpid) (t2dce core-prim . %spawn) (t2dcd core-prim . %waitpid) (t2dcc core-prim . simple-struct-name) (t2dcb core-prim . simple-struct-set!) (t2dca core-prim . simple-struct-ref) (t2dc9 core-prim . make-simple-struct) (t2dc8 core-prim . simple-struct?) (t2dc7 core-prim . pointer-ref-c-int64) (t2dc6 core-prim . pointer-ref-c-int32) (t2dc5 core-prim . pointer-ref-c-int16) (t2dc4 core-prim . pointer-ref-c-int8) (t2dc3 core-prim . pointer-ref-c-uint64) (t2dc2 core-prim . pointer-ref-c-uint32) (t2dc1 core-prim . pointer-ref-c-uint16) (t2dc0 core-prim . pointer-ref-c-uint8) (t2dbf core-prim . pointer-set-c-uint64!) (t2dbe core-prim . pointer-set-c-uint32!) (t2dbd core-prim . pointer-set-c-uint16!) (t2dbc core-prim . pointer-set-c-uint8!) (t2dbb core-prim . pointer-set-c-int64!) (t2dba core-prim . pointer-set-c-int32!) (t2db9 core-prim . pointer-set-c-int16!) (t2db8 core-prim . pointer-set-c-int8!) (t2db7 core-prim . pointer-set-c-pointer!) (t2db6 core-prim . pointer-set-c-double!) (t2db5 core-prim . pointer-set-c-float!) (t2db4 core-prim . pointer-set-c-long-long!) (t2db3 core-prim . pointer-set-c-long!) (t2db2 core-prim . pointer-set-c-int!) (t2db1 core-prim . pointer-set-c-short!) (t2db0 core-prim . pointer-set-c-char!) (t2daf core-prim . pointer-ref-c-pointer) (t2dae core-prim . pointer-ref-c-double) (t2dad core-prim . pointer-ref-c-float) (t2dac core-prim . pointer-ref-c-unsigned-long-long) (t2dab core-prim . pointer-ref-c-signed-long-long) (t2daa core-prim . pointer-ref-c-unsigned-long) (t2da9 core-prim . pointer-ref-c-signed-long) (t2da8 core-prim . pointer-ref-c-unsigned-int) (t2da7 core-prim . pointer-ref-c-signed-int) (t2da6 core-prim . pointer-ref-c-unsigned-short) (t2da5 core-prim . pointer-ref-c-signed-short) (t2da4 core-prim . pointer-ref-c-unsigned-char) (t2da3 core-prim . pointer-ref-c-signed-char) (t2da2 core-prim . pointer->integer) (t2da1 core-prim . integer->pointer) (t2da0 core-prim . pointer?) (t2d9f core-prim . shared-errno) (t2d9e core-prim . %ffi-free-c-callback-trampoline) (t2d9d core-prim . %ffi-make-c-callback-trampoline) (t2d9c core-prim . %ffi-free) (t2d9b core-prim . %ffi-malloc) (t2d9a core-prim . %ffi-supported?) (t2d99 core-prim . %ffi-pointer->string) (t2d98 core-prim . %ffi-call) (t2d97 core-prim . %ffi-lookup) (t2d96 core-prim . %ffi-open) (t2d95 core-prim . null-terminated-utf8->string) (t2d94 core-prim . null-terminated-bytevector->string) (t2d93 core-prim . %exec) (t2d92 core-prim . %fork) (t2d91 core-prim . %pipe) (t2d90 core-prim . p) (t2d8f core-prim . open-output-string) (t2d8e core-prim . get-output-string) (t2d8d core-prim . file-stat-ctime) (t2d8c core-prim . file-stat-atime) (t2d8b core-prim . file-stat-mtime) (t2d8a core-prim . file-size-in-bytes) (t2d89 core-prim . file-writable?) (t2d88 core-prim . file-executable?) (t2d87 core-prim . file-readable?) (t2d86 core-prim . file-regular?) (t2d85 core-prim . file-symbolic-link?) (t2d84 core-prim . file-directory?) (t2d83 core-prim . create-symbolic-link) (t2d82 core-prim . rename-file) (t2d81 core-prim . delete-directory) (t2d80 core-prim . create-directory) (t2d7f core-prim . create-mosh-cache-dir) (t2d7e core-prim . get-environment-variables) (t2d7d core-prim . current-exception-handler) (t2d7c core-prim . get-environment-variable) (t2d7b core-prim . join-wraps) (t2d7a core-prim . id->real-label) (t2d79 core-prim . same-marks?) (t2d78 core-prim . same-marks*?) (t2d77 core-prim . get-timeofday) (t2d76 core-prim . get-command-line) (t2d75 core-prim . sys-display) (t2d74 core-prim . whereis) (t2d73 core-prim . register) (t2d72 core-prim . vm-join!) (t2d71 core-prim . vm-set-value!) (t2d70 core-prim . vm?) (t2d6f core-prim . main-vm?) (t2d6e core-prim . vm-eval) (t2d6d core-prim . vm-self) (t2d6c core-prim . vm-start!) (t2d6b core-prim . make-vm) (t2d6a core-prim . mutex-try-lock!) (t2d69 core-prim . mutex-unlock!) (t2d68 core-prim . mutex-lock!) (t2d67 core-prim . mutex?) (t2d66 core-prim . make-mutex) (t2d65 core-prim . condition-variable-notify-all!) (t2d64 core-prim . condition-variable-notify!) (t2d63 core-prim . condition-variable-wait!) (t2d62 core-prim . make-condition-variable) (t2d61 core-prim . write/ss) (t2d60 core-prim . mosh-executable-path) (t2d5f core-prim . make-file-options) (t2d5e core-prim . source-info) (t2d5d core-prim . make-compiler-instruction) (t2d5c core-prim . make-instruction) (t2d5b core-prim . set-annotation!) (t2d5a core-prim . get-annotation) (t2d59 core-prim . annotated-pair?) (t2d58 core-prim . annotated-cons) (t2d57 core-prim . set-source-info!) (t2d56 core-prim . bignum?) (t2d55 core-prim . fast-equal?) (t2d54 core-prim . fasl-read) (t2d53 core-prim . fasl-write) (t2d52 core-prim . time-usage) (t2d51 core-prim . os-constant) (t2d50 core-prim . condition-printer) (t2d4f core-prim . disasm) (t5aa core-prim . make-parameter) (t2d4e core-prim . socket-port) (t2d4d core-prim . socket-shutdown) (t2d4c core-prim . socket-close) (t2d4b core-prim . socket-send) (t2d4a core-prim . socket-recv!) (t2d49 core-prim . socket-recv) (t2d48 core-prim . make-server-socket) (t2d47 core-prim . make-client-socket) (t2d46 core-prim . socket-accept) (t2d45 core-prim . socket?) (t2d44 core-prim . string-upcase) (t2d43 core-prim . string-titlecase) (t2d42 core-prim . string-normalize-nfkd) (t2d41 core-prim . string-normalize-nfkc) (t2d40 core-prim . string-normalize-nfd) (t2d3f core-prim . string-normalize-nfc) (t2d3e core-prim . string-foldcase) (t2d3d core-prim . string-downcase) (t2d3c core-prim . string-ci>?) (t2d3b core-prim . string-ci>=?) (t2d3a core-prim . string-ci=?) (t2d39 core-prim . string-ci<?) (t2d38 core-prim . string-ci<=?) (t2d37 core-prim . char-whitespace?) (t2d36 core-prim . char-upper-case?) (t2d35 core-prim . char-title-case?) (t2d34 core-prim . char-numeric?) (t2d33 core-prim . char-lower-case?) (t2d32 core-prim . char-general-category) (t2d31 core-prim . char-upcase) (t2d30 core-prim . char-titlecase) (t2d2f core-prim . char-foldcase) (t2d2e core-prim . char-downcase) (t2d2d core-prim . char-ci>?) (t2d2c core-prim . char-ci>=?) (t2d2b core-prim . char-ci=?) (t2d2a core-prim . char-ci<?) (t2d29 core-prim . char-ci<=?) (t2d28 core-prim . char-alphabetic?) (tbae core-prim . make-variable-transformer) (te65 core-prim . identifier?) (te51 core-prim . generate-temporaries) (te53 core-prim . free-identifier=?) (te69 core-prim . syntax->datum) (te67 core-prim . datum->syntax) (te55 core-prim . bound-identifier=?) (t2d27 core-prim . record-type-descriptor?) (t2d26 core-prim . record-predicate) (t2d25 core-prim . record-mutator) (t2d24 core-prim . record-constructor) (t2d23 core-prim . record-accessor) (t2d22 core-prim . make-record-type-descriptor) (t2d21 core-prim . make-record-constructor-descriptor) (t2d20 core-prim . record?) (t2d1f core-prim . record-type-uid) (t2d1e core-prim . record-type-sealed?) (t2d1d core-prim . record-type-parent) (t2d1c core-prim . record-type-opaque?) (t2d1b core-prim . record-type-name) (t2d1a core-prim . record-type-generative?) (t2d19 core-prim . record-type-field-names) (t2d18 core-prim . record-rtd) (t2d17 core-prim . record-field-mutable?) (t2d16 core-prim . delete-file) (t2d15 core-prim . file-exists?) (t2d14 core-prim . vector-sort!) (t2d13 core-prim . vector-sort) (t2d12 core-prim . list-sort) (t2d11 core-prim . symbol-hash) (t2d10 core-prim . string-ci-hash) (t2d0f core-prim . string-hash) (t2d0e core-prim . equal-hash) (t2d0d core-prim . hashtable-equivalence-function) (t2d0c core-prim . make-hashtable) (t2d0b core-prim . hashtable-hash-function) (t2d0a core-prim . make-eqv-hashtable) (t2d09 core-prim . make-eq-hashtable) (t2d08 core-prim . hashtable?) (t2d07 core-prim . hashtable-update!) (t2d06 core-prim . hashtable-size) (t2d05 core-prim . hashtable-set!) (t2d04 core-prim . hashtable-ref) (t2d03 core-prim . hashtable-mutable?) (t2d02 core-prim . hashtable-keys) (t2d01 core-prim . hashtable-entries) (t2d00 core-prim . hashtable-delete!) (t2cff core-prim . hashtable-copy) (t2cfe core-prim . hashtable-contains?) (t2cfd core-prim . hashtable-clear!) (t2cfc core-prim . call-with-output-file) (t2cfb core-prim . call-with-input-file) (t2cfa core-prim . write-char) (t2cf9 core-prim . write) (t2cf8 core-prim . with-output-to-file) (t2cf7 core-prim . with-input-from-file) (t2cf6 core-prim . read-char) (t2cf5 core-prim . read) (t2cf4 core-prim . peek-char) (t2cf3 core-prim . open-output-file) (t2cf2 core-prim . open-input-file) (t2cf1 core-prim . newline) (t2cf0 core-prim . display) (t2cef core-prim . close-output-port) (t2cee core-prim . close-input-port) (t2ced core-prim . eof-object?) (t2cec core-prim . eof-object) (t2ceb core-prim . current-error-port) (t2cea core-prim . current-output-port) (t2ce9 core-prim . current-input-port) (t2ce8 core-prim . output-port?) (t2ce7 core-prim . input-port?) (t2ce6 core-prim . utf-8-codec) (t2ce5 core-prim . utf-16-codec) (t2ce4 core-prim . transcoder-error-handling-mode) (t2ce3 core-prim . transcoder-eol-style) (t2ce2 core-prim . transcoder-codec) (t2ce1 core-prim . transcoded-port) (t2ce0 core-prim . textual-port?) (t2cdf core-prim . string->bytevector) (t2cde core-prim . standard-output-port) (t2cdd core-prim . standard-input-port) (t2cdc core-prim . standard-error-port) (t2cdb core-prim . set-port-position!) (t2cda core-prim . put-u8) (t2cd9 core-prim . put-string) (t2cd8 core-prim . put-datum) (t2cd7 core-prim . put-char) (t2cd6 core-prim . put-bytevector) (t2cd5 core-prim . port?) (t2cd4 core-prim . port-transcoder) (t2cd3 core-prim . port-position) (t2cd2 core-prim . port-has-set-port-position!?) (t2cd1 core-prim . port-has-port-position?) (t2cd0 core-prim . port-eof?) (t2ccf core-prim . output-port-buffer-mode) (t2cce core-prim . open-string-output-port) (t2ccd core-prim . open-string-input-port) (t2ccc core-prim . open-file-output-port) (t2ccb core-prim . open-file-input/output-port) (t2cca core-prim . open-file-input-port) (t2cc9 core-prim . open-bytevector-output-port) (t2cc8 core-prim . open-bytevector-input-port) (t2cc7 core-prim . native-transcoder) (t2cc6 core-prim . native-eol-style) (t2cc5 core-prim . make-transcoder) (t2cc4 core-prim . latin-1-codec) (t2cc3 core-prim . make-i/o-write-error) (t2cc2 core-prim . make-i/o-read-error) (t2cc1 core-prim . make-i/o-port-error) (t2cc0 core-prim . make-i/o-invalid-position-error) (t2cbf core-prim . make-i/o-filename-error) (t2cbe core-prim . make-i/o-file-protection-error) (t2cbd core-prim . make-i/o-file-is-read-only-error) (t2cbc core-prim . make-i/o-file-does-not-exist-error) (t2cbb core-prim . make-i/o-file-already-exists-error) (t2cba core-prim . make-i/o-error) (t2cb9 core-prim . make-i/o-encoding-error) (t2cb8 core-prim . make-i/o-decoding-error) (t2cb7 core-prim . make-custom-textual-output-port) (t2cb6 core-prim . make-custom-textual-input/output-port) (t2cb5 core-prim . make-custom-textual-input-port) (t2cb4 core-prim . make-custom-binary-output-port) (t2cb3 core-prim . make-custom-binary-input/output-port) (t2cb2 core-prim . make-custom-binary-input-port) (t2cb1 core-prim . make-bytevector) (t2cb0 core-prim . lookahead-u8) (t2caf core-prim . lookahead-char) (t2cae core-prim . i/o-write-error?) (t2cad core-prim . i/o-read-error?) (t2cac core-prim . i/o-port-error?) (t2cab core-prim . i/o-invalid-position-error?) (t2caa core-prim . i/o-filename-error?) (t2ca9 core-prim . i/o-file-protection-error?) (t2ca8 core-prim . i/o-file-is-read-only-error?) (t2ca7 core-prim . i/o-file-does-not-exist-error?) (t2ca6 core-prim . i/o-file-already-exists-error?) (t2ca5 core-prim . i/o-error?) (t2ca4 core-prim . i/o-error-position) (t2ca3 core-prim . i/o-error-port) (t2ca2 core-prim . i/o-error-filename) (t2ca1 core-prim . i/o-encoding-error?) (t2ca0 core-prim . i/o-encoding-error-char) (t2c9f core-prim . i/o-decoding-error?) (t2c9e core-prim . get-u8) (t2c9d core-prim . get-string-n!) (t2c9c core-prim . get-string-n) (t2c9b core-prim . get-string-all) (t2c9a core-prim . get-line) (t2c99 core-prim . get-datum) (t2c98 core-prim . get-char) (t2c97 core-prim . get-bytevector-some) (t2c96 core-prim . get-bytevector-n!) (t2c95 core-prim . get-bytevector-n) (t2c94 core-prim . get-bytevector-all) (t2c93 core-prim . flush-output-port) (t2c92 core-prim . close-port) (te3f core-prim . scheme-report-environment) (t2c91 core-prim . quotient) (te3d core-prim . null-environment) (t2c90 core-prim . remainder) (t2c8f core-prim . modulo) (t2c8e core-prim . inexact->exact) (t2c8d core-prim . force) (t2c8c core-prim . exact->inexact) (t2c8b core-prim . make-promise) (t2c8a core-prim . exit) (t291c core-prim . command-line) (t2c89 core-prim . string-fill!) (t2c88 core-prim . string-set!) (t2c87 core-prim . set-cdr!) (t2c86 core-prim . set-car!) (t2c85 core-prim . remove) (t2c84 core-prim . remv) (t2c83 core-prim . remp) (t2c82 core-prim . remq) (t2c81 core-prim . partition) (t2c80 core-prim . memv) (t2c7f core-prim . memq) (t2c7e core-prim . memp) (t2c7d core-prim . member) (t2c7c core-prim . exists) (t2c7b core-prim . for-all) (t2c7a core-prim . fold-right) (t2c79 core-prim . fold-left) (t2c78 core-prim . find) (t2c77 core-prim . filter) (t2c76 core-prim . cons*) (t2c75 core-prim . assv) (t2c74 core-prim . assq) (t2c73 core-prim . assp) (t2c72 core-prim . assoc) (t2c71 core-prim . call-with-string-output-port) (t2c70 core-prim . call-with-port) (t2c6f core-prim . call-with-bytevector-output-port) (t2c6e core-prim . bytevector->string) (t2c6d core-prim . buffer-mode?) (t2c6c core-prim . binary-port?) (t2c6b core-prim . with-exception-handler) (t2c6a core-prim . raise-continuable) (t2c69 core-prim . raise) (te43 core-prim . eval) (te3b core-prim . environment) (t2c68 core-prim . make-enumeration) (t2c67 core-prim . enum-set=?) (t2c66 core-prim . enum-set-universe) (t2c65 core-prim . enum-set-union) (t2c64 core-prim . enum-set-subset?) (t2c63 core-prim . enum-set-projection) (t2c62 core-prim . enum-set-member?) (t2c61 core-prim . enum-set-intersection) (t2c60 core-prim . enum-set-indexer) (t2c5f core-prim . enum-set-difference) (t2c5e core-prim . enum-set-constructor) (t2c5d core-prim . enum-set-complement) (t2c5c core-prim . enum-set->list) (t2c5b core-prim . who-condition?) (t2c5a core-prim . warning?) (t2c59 core-prim . violation?) (t2c58 core-prim . undefined-violation?) (t2c57 core-prim . syntax-violation?) (t2c56 core-prim . syntax-violation-subform) (t2c55 core-prim . syntax-violation-form) (te63 core-prim . syntax-violation) (t2c54 core-prim . simple-conditions) (t2c53 core-prim . serious-condition?) (t2c52 core-prim . non-continuable-violation?) (t2c51 core-prim . message-condition?) (t2c50 core-prim . make-who-condition) (t2c4f core-prim . make-warning) (t2c4e core-prim . make-violation) (t2c4d core-prim . make-undefined-violation) (t2c4c core-prim . make-syntax-violation) (t2c4b core-prim . make-serious-condition) (t2c4a core-prim . make-non-continuable-violation) (t2c49 core-prim . make-message-condition) (t2c48 core-prim . make-lexical-violation) (t2c47 core-prim . make-irritants-condition) (t2c46 core-prim . make-implementation-restriction-violation) (t2c45 core-prim . make-error) (t2c44 core-prim . make-assertion-violation) (t2c43 core-prim . lexical-violation?) (t2c42 core-prim . irritants-condition?) (t2c41 core-prim . implementation-restriction-violation?) (t2c40 core-prim . error?) (t2c3f core-prim . condition-who) (t2c3e core-prim . condition-predicate) (t2c3d core-prim . condition-message) (t2c3c core-prim . condition-irritants) (t2c3b core-prim . condition-accessor) (t2c3a core-prim . condition) (t2c39 core-prim . assertion-violation?) (t2c38 core-prim . condition?) (t2c37 core-prim . utf32->string) (t2c36 core-prim . utf16->string) (t2c35 core-prim . utf8->string) (t2c34 core-prim . uint-list->bytevector) (t2c33 core-prim . u8-list->bytevector) (t2c32 core-prim . string->utf8) (t2c31 core-prim . string->utf32) (t2c30 core-prim . string->utf16) (t2c2f core-prim . sint-list->bytevector) (t2c2e core-prim . native-endianness) (t2c2d core-prim . bytevector?) (t2c2c core-prim . bytevector=?) (t2c2b core-prim . bytevector-uint-set!) (t2c2a core-prim . bytevector-uint-ref) (t2c29 core-prim . bytevector-u8-set!) (t2c28 core-prim . bytevector-u8-ref) (t2c27 core-prim . bytevector-u64-set!) (t2c26 core-prim . bytevector-u64-ref) (t2c25 core-prim . bytevector-u64-native-set!) (t2c24 core-prim . bytevector-u64-native-ref) (t2c23 core-prim . bytevector-u32-set!) (t2c22 core-prim . bytevector-u32-ref) (t2c21 core-prim . bytevector-u32-native-set!) (t2c20 core-prim . bytevector-u32-native-ref) (t2c1f core-prim . bytevector-u16-set!) (t2c1e core-prim . bytevector-u16-ref) (t2c1d core-prim . bytevector-u16-native-set!) (t2c1c core-prim . bytevector-u16-native-ref) (t2c1b core-prim . bytevector-sint-set!) (t2c1a core-prim . bytevector-sint-ref) (t2c19 core-prim . bytevector-s8-set!) (t2c18 core-prim . bytevector-s8-ref) (t2c17 core-prim . bytevector-s64-set!) (t2c16 core-prim . bytevector-s64-ref) (t2c15 core-prim . bytevector-s64-native-set!) (t2c14 core-prim . bytevector-s64-native-ref) (t2c13 core-prim . bytevector-s32-set!) (t2c12 core-prim . bytevector-s32-ref) (t2c11 core-prim . bytevector-s32-native-set!) (t2c10 core-prim . bytevector-s32-native-ref) (t2c0f core-prim . bytevector-s16-set!) (t2c0e core-prim . bytevector-s16-ref) (t2c0d core-prim . bytevector-s16-native-set!) (t2c0c core-prim . bytevector-s16-native-ref) (t2c0b core-prim . bytevector-length) (t2c0a core-prim . bytevector-ieee-single-ref) (t2c09 core-prim . bytevector-ieee-single-set!) (t2c08 core-prim . bytevector-ieee-single-native-set!) (t2c07 core-prim . bytevector-ieee-single-native-ref) (t2c06 core-prim . bytevector-ieee-double-set!) (t2c05 core-prim . bytevector-ieee-double-ref) (t2c04 core-prim . bytevector-ieee-double-native-set!) (t2c03 core-prim . bytevector-ieee-double-native-ref) (t2c02 core-prim . bytevector-fill!) (t2c01 core-prim . bytevector-copy!) (t2c00 core-prim . bytevector-copy) (t2bff core-prim . bytevector->uint-list) (t2bfe core-prim . bytevector->u8-list) (t2bfd core-prim . bytevector->sint-list) (t2bfc core-prim . no-nans-violation?) (t2bfb core-prim . no-infinities-violation?) (t2bfa core-prim . make-no-nans-violation) (t2bf9 core-prim . make-no-infinities-violation) (t2bf8 core-prim . real->flonum) (t2bf7 core-prim . flzero?) (t2bf6 core-prim . fltruncate) (t2bf5 core-prim . fltan) (t2bf4 core-prim . flsqrt) (t2bf3 core-prim . flsin) (t2bf2 core-prim . flround) (t2bf1 core-prim . flpositive?) (t2bf0 core-prim . flonum?) (t2bef core-prim . flodd?) (t2bee core-prim . flnumerator) (t2bed core-prim . flnegative?) (t2bec core-prim . flnan?) (t2beb core-prim . flmod0) (t2bea core-prim . flmod) (t2be9 core-prim . flmin) (t2be8 core-prim . flmax) (t2be7 core-prim . fllog) (t2be6 core-prim . flinteger?) (t2be5 core-prim . flinfinite?) (t2be4 core-prim . flfloor) (t2be3 core-prim . flfinite?) (t2be2 core-prim . flexpt) (t2be1 core-prim . flexp) (t2be0 core-prim . fleven?) (t2bdf core-prim . fldiv0-and-mod0) (t2bde core-prim . fldiv0) (t2bdd core-prim . fldiv-and-mod) (t2bdc core-prim . fldiv) (t2bdb core-prim . fldenominator) (t2bda core-prim . flcos) (t2bd9 core-prim . flceiling) (t2bd8 core-prim . flatan) (t2bd7 core-prim . flasin) (t2bd6 core-prim . flacos) (t2bd5 core-prim . flabs) (t2bd4 core-prim . fl>?) (t2bd3 core-prim . fl>=?) (t2bd2 core-prim . fl=?) (t2bd1 core-prim . fl<?) (t2bd0 core-prim . fl<=?) (t2bcf core-prim . fl/) (t2bce core-prim . fl-) (t2bcd core-prim . fl+) (t2bcc core-prim . fl*) (t2bcb core-prim . fixnum->flonum) (t2bca core-prim . fxzero?) (t2bc9 core-prim . fxxor) (t2bc8 core-prim . fxrotate-bit-field) (t2bc7 core-prim . fxreverse-bit-field) (t2bc6 core-prim . fxpositive?) (t2bc5 core-prim . fxodd?) (t2bc4 core-prim . fxnot) (t2bc3 core-prim . fxnegative?) (t2bc2 core-prim . fxmod0) (t2bc1 core-prim . fxmod) (t2bc0 core-prim . fxmin) (t2bbf core-prim . fxmax) (t2bbe core-prim . fxlength) (t2bbd core-prim . fxior) (t2bbc core-prim . fxif) (t2bbb core-prim . fxfirst-bit-set) (t2bba core-prim . fxeven?) (t2bb9 core-prim . fxdiv0-and-mod0) (t2bb8 core-prim . fxdiv0) (t2bb7 core-prim . fxdiv-and-mod) (t2bb6 core-prim . fxdiv) (t2bb5 core-prim . fxcopy-bit-field) (t2bb4 core-prim . fxcopy-bit) (t2bb3 core-prim . fxbit-set?) (t2bb2 core-prim . fxbit-field) (t2bb1 core-prim . fxbit-count) (t2bb0 core-prim . fxarithmetic-shift-right) (t2baf core-prim . fxarithmetic-shift-left) (t2bae core-prim . fxarithmetic-shift) (t2bad core-prim . fxand) (t2bac core-prim . fx>?) (t2bab core-prim . fx>=?) (t2baa core-prim . fx=?) (t2ba9 core-prim . fx<?) (t2ba8 core-prim . fx<=?) (t2ba7 core-prim . fx-/carry) (t2ba6 core-prim . fx-) (t2ba5 core-prim . fx+/carry) (t2ba4 core-prim . fx+) (t2ba3 core-prim . fx*/carry) (t2ba2 core-prim . fx*) (t2ba1 core-prim . greatest-fixnum) (t2ba0 core-prim . least-fixnum) (t2b9f core-prim . fixnum-width) (t2b9e core-prim . fixnum?) (t2b9d core-prim . bitwise-rotate-bit-field) (t2b9c core-prim . bitwise-reverse-bit-field) (t2b9b core-prim . bitwise-length) (t2b9a core-prim . bitwise-if) (t2b99 core-prim . bitwise-first-bit-set) (t2b98 core-prim . bitwise-copy-bit-field) (t2b97 core-prim . bitwise-copy-bit) (t2b96 core-prim . bitwise-bit-set?) (t2b95 core-prim . bitwise-bit-field) (t2b94 core-prim . bitwise-bit-count) (t2b93 core-prim . bitwise-xor) (t2b92 core-prim . bitwise-ior) (t2b91 core-prim . bitwise-and) (t2b90 core-prim . bitwise-not) (t2b8f core-prim . bitwise-arithmetic-shift-right) (t2b8e core-prim . bitwise-arithmetic-shift-left) (t2b8d core-prim . bitwise-arithmetic-shift) (t2b8c core-prim . zero?) (t2b8b core-prim . vector?) (t2b8a core-prim . vector-set!) (t2b89 core-prim . vector-ref) (t2b88 core-prim . vector-map) (t2b87 core-prim . vector-length) (t2b86 core-prim . vector-for-each) (t2b85 core-prim . vector-fill!) (t2b84 core-prim . vector->list) (t2b83 core-prim . vector) (t2b82 core-prim . values) (t2b81 core-prim . truncate) (t2b80 core-prim . tan) (t2b7f core-prim . symbol?) (t2b7e core-prim . symbol=?) (t2b7d core-prim . symbol->string) (t2b7c core-prim . substring) (t2b7b core-prim . string?) (t2b7a core-prim . string>?) (t2b79 core-prim . string>=?) (t2b78 core-prim . string=?) (t2b77 core-prim . string<?) (t2b76 core-prim . string<=?) (t2b75 core-prim . string-ref) (t2b74 core-prim . string-length) (t2b73 core-prim . string-for-each) (t2b72 core-prim . string-copy) (t2b71 core-prim . string-append) (t2b70 core-prim . string->symbol) (t2b6f core-prim . string->number) (t2b6e core-prim . string->list) (t2b6d core-prim . string) (t2b6c core-prim . sqrt) (t2b6b core-prim . sin) (t2b6a core-prim . round) (t2b69 core-prim . reverse) (t2b68 core-prim . real?) (t2b67 core-prim . real-valued?) (t2b66 core-prim . real-part) (t2b65 core-prim . rationalize) (t2b64 core-prim . rational?) (t2b63 core-prim . rational-valued?) (t2b62 core-prim . procedure?) (t2b61 core-prim . positive?) (t2b60 core-prim . pair?) (t2b5f core-prim . odd?) (t2b5e core-prim . numerator) (t2b5d core-prim . number?) (t2b5c core-prim . number->string) (t2b5b core-prim . null?) (t2b5a core-prim . not) (t2b59 core-prim . negative?) (t2b58 core-prim . nan?) (t2b57 core-prim . min) (t2b56 core-prim . max) (t2b55 core-prim . map) (t2b54 core-prim . make-vector) (t2b53 core-prim . make-string) (t2b52 core-prim . make-rectangular) (t2b51 core-prim . make-polar) (t2b50 core-prim . magnitude) (t2b4f core-prim . log) (t2b4e core-prim . list?) (t2b4d core-prim . list-tail) (t2b4c core-prim . list-ref) (t2b4b core-prim . list->vector) (t2b4a core-prim . list->string) (t2b49 core-prim . list) (t2b48 core-prim . length) (t2b47 core-prim . lcm) (t2b46 core-prim . integer?) (t2b45 core-prim . integer-valued?) (t2b44 core-prim . integer->char) (t2b43 core-prim . infinite?) (t2b42 core-prim . inexact?) (t2b41 core-prim . inexact) (t2b40 core-prim . imag-part) (t2b3f core-prim . gcd) (t2b3e core-prim . for-each) (t2b3d core-prim . floor) (t2b3c core-prim . finite?) (t2b3b core-prim . expt) (t2b3a core-prim . exp) (t2b39 core-prim . exact?) (t2b38 core-prim . exact-integer-sqrt) (t2b37 core-prim . exact) (t2b36 core-prim . even?) (t2b35 core-prim . error) (t2b34 core-prim . eqv?) (t2b33 core-prim . equal?) (t2b32 core-prim . eq?) (t2b31 core-prim . dynamic-wind) (t2b30 core-prim . div0-and-mod0) (t2b2f core-prim . mod0) (t2b2e core-prim . div0) (t2b2d core-prim . div-and-mod) (t2b2c core-prim . mod) (t2b2b core-prim . div) (t2b2a core-prim . denominator) (t2b29 core-prim . cos) (t2b28 core-prim . cons) (t2b27 core-prim . complex?) (t2b26 core-prim . char?) (t2b25 core-prim . char>?) (t2b24 core-prim . char>=?) (t2b23 core-prim . char=?) (t2b22 core-prim . char<?) (t2b21 core-prim . char<=?) (t2b20 core-prim . char->integer) (t2b1f core-prim . ceiling) (t2b1e core-prim . call-with-values) (t2b1d core-prim . call/cc) (t2b1c core-prim . call-with-current-continuation) (t2b1b core-prim . cddddr) (t2b1a core-prim . cdddar) (t2b19 core-prim . cddadr) (t2b18 core-prim . cddaar) (t2b17 core-prim . cdaddr) (t2b16 core-prim . cdadar) (t2b15 core-prim . cdaadr) (t2b14 core-prim . cdaaar) (t2b13 core-prim . cadddr) (t2b12 core-prim . caddar) (t2b11 core-prim . cadadr) (t2b10 core-prim . cadaar) (t2b0f core-prim . caaddr) (t2b0e core-prim . caadar) (t2b0d core-prim . caaadr) (t2b0c core-prim . caaaar) (t2b0b core-prim . cdddr) (t2b0a core-prim . cddar) (t2b09 core-prim . cdadr) (t2b08 core-prim . cdaar) (t2b07 core-prim . caddr) (t2b06 core-prim . cadar) (t2b05 core-prim . caadr) (t2b04 core-prim . caaar) (t2b03 core-prim . cddr) (t2b02 core-prim . cdar) (t2b01 core-prim . cadr) (t2b00 core-prim . caar) (t2aff core-prim . cdr) (t2afe core-prim . car) (t2afd core-prim . boolean?) (t2afc core-prim . boolean=?) (t2afb core-prim . atan) (t2afa core-prim . assertion-violation) (te5d core-prim . assertion-error) (t2af9 core-prim . asin) (t2af8 core-prim . apply) (t2af7 core-prim . append) (t2af6 core-prim . angle) (t2af5 core-prim . acos) (t2af4 core-prim . abs) (t2af3 core-prim . /) (t2af2 core-prim . *) (t2af1 core-prim . -) (t2af0 core-prim . +) (t2aef core-prim . >=) (t2aee core-prim . >) (t2aed core-prim . =) (t2aec core-prim . <=) (t2aeb core-prim . <) (t2aea core-prim . library) (t2ae9 $core-rtd &no-nans-rtd &no-nans-rcd) (t2ae8 $core-rtd &no-infinities-rtd &no-infinities-rcd) (t2ae7 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (t2ae6 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (t2ae5 $core-rtd &i/o-port-rtd &i/o-port-rcd) (t2ae4 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (t2ae3 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (t2ae2 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (t2ae1 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (t2ae0 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (t2adf $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (t2ade $core-rtd &i/o-write-rtd &i/o-write-rcd) (t2add $core-rtd &i/o-read-rtd &i/o-read-rcd) (t2adc $core-rtd &i/o-rtd &i/o-rcd) (t2adb $core-rtd &undefined-rtd &undefined-rcd) (t2ada $core-rtd &syntax-rtd &syntax-rcd) (t2ad9 $core-rtd &lexical-rtd &lexical-rcd) (t2ad8 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (t2ad7 $core-rtd &non-continuable-rtd &non-continuable-rcd) (t2ad6 $core-rtd &who-rtd &who-rcd) (t2ad5 $core-rtd &irritants-rtd &irritants-rcd) (t2ad4 $core-rtd &assertion-rtd &assertion-rcd) (t2ad3 $core-rtd &violation-rtd &violation-rcd) (t2ad2 $core-rtd &error-rtd &error-rcd) (t2ad1 $core-rtd &serious-rtd &serious-rcd) (t2ad0 $core-rtd &warning-rtd &warning-rcd) (t2acf $core-rtd &message-rtd &message-rcd) (t2ace $core-rtd &condition-rtd &condition-rcd) (t2acd macro . define-condition-type) (t2acc macro . define-enumeration) (t2acb macro . define-record-type) (t2aca macro . parent-rtd) (t2ac9 macro . nongenerative) (t2ac8 macro . opaque) (t2ac7 macro . sealed) (t2ac6 macro . protocol) (t2ac5 macro . parent) (t2ac4 macro . immutable) (t2ac3 macro . mutable) (t2ac2 macro . fields) (t2ac1 macro . error-handling-mode) (t2ac0 macro . file-options) (t2abf macro . buffer-mode) (t2abe macro . eol-style) (t2abd macro . guard) (t2abc macro . trace-define) (t2abb macro . trace-lambda) (t2aba macro . unsyntax-splicing) (t2ab9 macro . unsyntax) (t2ab8 macro . unquote-splicing) (t2ab7 macro . unquote) (t2ab6 macro . _) (t2ab5 macro . else) (t2ab4 macro . =>) (t2ab3 macro . ...) (t2ab2 macro . assert) (t2ab1 macro . endianness) (t2ab0 macro . delay) (t2aaf macro . time) (t2aae macro . do) (t2aad macro . cond) (t2aac macro . let*) (t2aab macro . let*-values) (t2aaa macro . let-values) (t2aa9 macro . identifier-syntax) (t2aa8 macro . with-syntax) (t2aa7 macro . quasisyntax) (t2aa6 macro . quasiquote) (t2aa5 macro . syntax-rules) (t2aa4 macro . include) (t2aa3 macro . define-struct) (t2aa2 core-macro . record-constructor-descriptor) (t2aa1 core-macro . record-type-descriptor) (t2aa0 macro . case) (t2a9f macro . parameterize) (t2a9e macro . unless) (t2a9d macro . when) (t2a9c core-macro . or) (t2a9b core-macro . and) (t2a9a core-macro . if) (t2a99 core-macro . let) (t2a98 core-macro . letrec*) (t2a97 core-macro . letrec) (t2a96 core-macro . type-descriptor) (t2a95 core-macro . case-lambda) (t2a94 core-macro . lambda) (t2a93 core-macro . syntax) (t2a92 core-macro . syntax-case) (t2a91 core-macro . quote) (t2a90 core-macro . foreign-call) (t2a8f letrec-syntax) (t2a8e let-syntax) (t2a8d set!) (t2a8c import) (t2a8b begin) (t2a8a module) (t2a89 define-syntax) (t2a88 define)) values values '#f '#f '#f '#f) (t997@t7e3@install-library 't2e54 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . t2dfb) (eval-core . t2dfa) (set-symbol-value! . t2df9) (symbol-value . t2df8) (gensym . t2df7) (void . t2df6)) '() values values '#f '#f '#f '#f) (t997@t7e3@install-library 't2e55 '(mosh) '() '() '() '() '((set-symbol-value! . t2df9) (symbol-value . t2df8) (regexp? . t2df4) (read-line . t2df3) (ungensym . t2df1) (alist->eq-hash-table . t2df0) (assoc-ref . t2def) (print . t2dee) (format . t2ded) (host-os . t2dec) (library-path . t7c2) (standard-library-path . t2deb) (file-newer? . t2de5) (stat-mtime . t2de4) (digit->integer . t2de0) (call-with-string-input-port . t2ddf) (call-with-string-io . t2dde) (string-split . t2ddd) (bytevector-for-each . t2ddc) (string->regexp . t2ddb) (rxmatch . t2dda) (regexp-replace-all . t2dd9) (hashtable-fold-left . t2dd8) (hashtable-for-each . t2dd7) (set-current-directory! . t2dd2) (expand-path . t2dd1) (current-directory . t2dd0) (p . t2d90) (get-timeofday . t2d77) (get-command-line . t2d76) (sys-display . t2d75) (whereis . t2d74) (register . t2d73) (vm-join! . t2d72) (vm-set-value! . t2d71) (vm? . t2d70) (main-vm? . t2d6f) (vm-eval . t2d6e) (vm-self . t2d6d) (vm-start! . t2d6c) (make-vm . t2d6b) (mutex-try-lock! . t2d6a) (mutex-unlock! . t2d69) (mutex-lock! . t2d68) (mutex? . t2d67) (make-mutex . t2d66) (condition-variable-notify-all! . t2d65) (condition-variable-notify! . t2d64) (condition-variable-wait! . t2d63) (make-condition-variable . t2d62) (write/ss . t2d61) (mosh-executable-path . t2d60) (make-file-options . t2d5f) (source-info . t2d5e) (make-compiler-instruction . t2d5d) (make-instruction . t2d5c) (set-annotation! . t2d5b) (get-annotation . t2d5a) (annotated-pair? . t2d59) (annotated-cons . t2d58) (set-source-info! . t2d57) (bignum? . t2d56) (fast-equal? . t2d55) (fasl-read . t2d54) (fasl-write . t2d53) (time-usage . t2d52) (os-constant . t2d51) (condition-printer . t2d50) (time . t2aaf) (include . t2aa4)) '() values values '#f '#f '#f '#f) (t997@t7e3@install-library 't2e56 '(system) '() '() '() '() '((gensym-prefix-set! . t2df2) (ssl-supported? . t2dea) (ssl-socket? . t2de9) (socket-sslize! . t2de8) (%monapi-name-whereis . t2de7) (%monapi-message-send . t2de6) (write-to-file . t2de3) (file->list . t2de2) (file->string . t2de1) (mosh-cache-dir . t5ac) (call-process . t2dd6) (local-tz-offset . t2dd5) (microseconds . t2dd4) (directory-list . t2dd3) (expand-path . t2dd1) (%getpid . t2dcf) (%spawn . t2dce) (%waitpid . t2dcd) (simple-struct-name . t2dcc) (simple-struct-set! . t2dcb) (simple-struct-ref . t2dca) (make-simple-struct . t2dc9) (simple-struct? . t2dc8) (pointer-ref-c-int64 . t2dc7) (pointer-ref-c-int32 . t2dc6) (pointer-ref-c-int16 . t2dc5) (pointer-ref-c-int8 . t2dc4) (pointer-ref-c-uint64 . t2dc3) (pointer-ref-c-uint32 . t2dc2) (pointer-ref-c-uint16 . t2dc1) (pointer-ref-c-uint8 . t2dc0) (pointer-set-c-uint64! . t2dbf) (pointer-set-c-uint32! . t2dbe) (pointer-set-c-uint16! . t2dbd) (pointer-set-c-uint8! . t2dbc) (pointer-set-c-int64! . t2dbb) (pointer-set-c-int32! . t2dba) (pointer-set-c-int16! . t2db9) (pointer-set-c-int8! . t2db8) (pointer-set-c-pointer! . t2db7) (pointer-set-c-double! . t2db6) (pointer-set-c-float! . t2db5) (pointer-set-c-long-long! . t2db4) (pointer-set-c-long! . t2db3) (pointer-set-c-int! . t2db2) (pointer-set-c-short! . t2db1) (pointer-set-c-char! . t2db0) (pointer-ref-c-pointer . t2daf) (pointer-ref-c-double . t2dae) (pointer-ref-c-float . t2dad) (pointer-ref-c-unsigned-long-long . t2dac) (pointer-ref-c-signed-long-long . t2dab) (pointer-ref-c-unsigned-long . t2daa) (pointer-ref-c-signed-long . t2da9) (pointer-ref-c-unsigned-int . t2da8) (pointer-ref-c-signed-int . t2da7) (pointer-ref-c-unsigned-short . t2da6) (pointer-ref-c-signed-short . t2da5) (pointer-ref-c-unsigned-char . t2da4) (pointer-ref-c-signed-char . t2da3) (pointer->integer . t2da2) (integer->pointer . t2da1) (pointer? . t2da0) (shared-errno . t2d9f) (%ffi-free-c-callback-trampoline . t2d9e) (%ffi-make-c-callback-trampoline . t2d9d) (%ffi-free . t2d9c) (%ffi-malloc . t2d9b) (%ffi-supported? . t2d9a) (%ffi-pointer->string . t2d99) (%ffi-call . t2d98) (%ffi-lookup . t2d97) (%ffi-open . t2d96) (null-terminated-utf8->string . t2d95) (null-terminated-bytevector->string . t2d94) (%exec . t2d93) (%fork . t2d92) (%pipe . t2d91) (open-output-string . t2d8f) (get-output-string . t2d8e) (file-stat-ctime . t2d8d) (file-stat-atime . t2d8c) (file-stat-mtime . t2d8b) (file-size-in-bytes . t2d8a) (file-writable? . t2d89) (file-executable? . t2d88) (file-readable? . t2d87) (file-regular? . t2d86) (file-symbolic-link? . t2d85) (file-directory? . t2d84) (create-symbolic-link . t2d83) (rename-file . t2d82) (delete-directory . t2d81) (create-directory . t2d80) (create-mosh-cache-dir . t2d7f) (get-environment-variables . t2d7e) (current-exception-handler . t2d7d) (get-environment-variable . t2d7c) (join-wraps . t2d7b) (id->real-label . t2d7a) (same-marks? . t2d79) (same-marks*? . t2d78) (disasm . t2d4f) (make-parameter . t5aa) (socket-port . t2d4e) (socket-shutdown . t2d4d) (socket-close . t2d4c) (socket-send . t2d4b) (socket-recv! . t2d4a) (socket-recv . t2d49) (make-server-socket . t2d48) (make-client-socket . t2d47) (socket-accept . t2d46) (socket? . t2d45) (parameterize . t2a9f)) '() values values '#f '#f '#f '#f)))
(begin (set! t2907@ref (unspecified)) (set! t2909@x* (unspecified)) (set! t290b@add-library-path! (unspecified)) (set! t290d@parse-and-add-library-path (unspecified)) (set! t290f@for-each-with-index (unspecified)) (set! t2911@rpad (unspecified)) (set! t2913@condition-printer/p (unspecified)) (set! t2915@record->field-alist (unspecified)) (set! t2917@map-with-index (unspecified)) (set! t2919@repl (unspecified)) (set! t291b@trace-printer (unspecified)) (set! t291d@command-line (unspecified)) (set! t291f@local-library-path (unspecified)) (set! t2921@load/args (unspecified)) (set! t2923@load (unspecified)) (set! t2925@ironscheme-build (unspecified)) (set! t2927@eval-top-level (unspecified)) (set! t2929@compile-system-libraries (unspecified)) (set! t292b@compile (unspecified)) (set! t292d@compile->closure (unspecified)) (set! t292f@pre-compile-r6rs-file (unspecified)) (set! t2931@load-r6rs-top-level (unspecified)) (set! t2933@load-r6rs-top-level-sexp (unspecified)) (set! t2935@prefix-inc (unspecified)) (set! t2937@prefix-inc! (unspecified)) (set! t2907@ref (lambda (t2972@rtd t2973@i t2974@x) (let ((t2978@val ((record-accessor t2972@rtd t2973@i) t2974@x))) (if (symbol? t2978@val) (ungensym t2978@val) t2978@val)))) (set! t2a6e@t2907@ref t2907@ref) (set! t2909@x* '()) (set! t2a6f@t2909@x* t2909@x*) (set! t290b@add-library-path! (lambda (t297a@path) (t987@t7c3@library-path (append (t987@t7c3@library-path) (list t297a@path))))) (set! t2a70@t290b@add-library-path! t290b@add-library-path!) (set! t290d@parse-and-add-library-path (lambda (t297c@paths t297d@message) (letrec* ((t2981@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((t2982@t t297c@paths)) (if t2982@t ((lambda (t2984@paths) (for-each (lambda (t2986@path) (if (file-exists? t2986@path) (t290b@add-library-path! (expand-path t2986@path)) (format (current-error-port) t297d@message t2986@path))) (string-split t2984@paths t2981@separator))) t2982@t) (void)))))) (set! t2a71@t290d@parse-and-add-library-path t290d@parse-and-add-library-path) (set! t290f@for-each-with-index (lambda (t2988@proc t2989@lst) (letrec ((t298c@loop (lambda (t298e@i t298f@lst) (if (null? t298f@lst) (if '#f '#f (void)) (begin (t2988@proc t298e@i (car t298f@lst)) (t298c@loop (+ t298e@i '1) (cdr t298f@lst))))))) (t298c@loop '1 t2989@lst)))) (set! t2a72@t290f@for-each-with-index t290f@for-each-with-index) (set! t2911@rpad (lambda (t2992@str t2993@pad t2994@n) (let ((t2998@rest (- t2994@n (string-length (format '"~a" t2992@str))))) (let t299e@loop ((t299a@rest t2998@rest) (t299b@ret (format '"~a" t2992@str))) (if (<= t299a@rest '0) t299b@ret (t299e@loop (- t299a@rest '1) (string-append t299b@ret t2993@pad))))))) (set! t2a73@t2911@rpad t2911@rpad) (set! t2913@condition-printer/p (lambda (t29a0@e t29a1@port) (letrec* ((t29a5@max-condition-len (apply max (map (lambda (t29b6@c) (string-length (symbol->string (record-type-name (record-rtd t29b6@c))))) (simple-conditions t29a0@e))))) (begin (display '" Condition components:\n" t29a1@port) (t290f@for-each-with-index (lambda (t29a6@i t29a7@x) (let ((t29aa@rtd (record-rtd t29a7@x)) (t29ab@fields-alist (t2915@record->field-alist t29a7@x))) (begin (format t29a1@port '" ~d. ~a" t29a6@i (t2911@rpad (symbol->string (record-type-name t29aa@rtd)) '" " t29a5@max-condition-len)) (if (null? t29ab@fields-alist) (newline t29a1@port) (void)) (let t29b2@loop ((t29ae@first '#t) (t29af@fields-alist t29ab@fields-alist)) (if (null? t29af@fields-alist) '() (let ((t29b4@field (car t29af@fields-alist))) (begin (if (not t29ae@first) (display (t2911@rpad '"" '" " (+ '4 t29a5@max-condition-len)) t29a1@port) (void)) (display '"       " t29a1@port) (display (car t29b4@field) t29a1@port) (display '": " t29a1@port) (write (cdr t29b4@field) t29a1@port) (newline t29a1@port) (t29b2@loop '#f (cdr t29af@fields-alist))))))))) (simple-conditions t29a0@e)))))) (set! t2a74@t2913@condition-printer/p t2913@condition-printer/p) (set! t2915@record->field-alist (lambda (t29b8@r) (letrec* ((t29bb@ref (lambda (t29c6@rtd t29c7@i t29c8@x) (let ((t29cc@val ((record-accessor t29c6@rtd t29c7@i) t29c8@x))) (if (symbol? t29cc@val) (ungensym t29cc@val) t29cc@val))))) (let t29c0@loop ((t29bc@ret '()) (t29bd@rtd (record-rtd t29b8@r))) (if t29bd@rtd (t29c0@loop (append t29bc@ret (t2917@map-with-index (lambda (t29c2@i t29c3@field) (cons t29c3@field (t29bb@ref t29bd@rtd t29c2@i t29b8@r))) (vector->list (record-type-field-names t29bd@rtd)))) (record-type-parent t29bd@rtd)) t29bc@ret))))) (set! t2a75@t2915@record->field-alist t2915@record->field-alist) (set! t2917@map-with-index (lambda (t29ce@proc t29cf@lst) (let t29d8@loop ((t29d2@i '0) (t29d3@lst t29cf@lst) (t29d4@ret '())) (if (null? t29d3@lst) (reverse t29d4@ret) (t29d8@loop (+ t29d2@i '1) (cdr t29d3@lst) (cons (t29ce@proc t29d2@i (car t29d3@lst)) t29d4@ret)))))) (set! t2a76@t2917@map-with-index t2917@map-with-index) (set! t2919@repl (lambda t29da@x (letrec* ((t29dd@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (t29e0@t29de) (lambda () (with-exception-handler (lambda (t29e2@e) ((call/cc (lambda (t29e4@t29df) (t29e0@t29de (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? t29e2@e) (t2913@condition-printer/p t29e2@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" t29e2@e))) (t29e4@t29df (lambda () (raise-continuable t29e2@e)))))))))) (lambda () (let t29ea@loop ((t29e6@line (get-line (current-input-port))) (t29e7@accum '"")) (letrec* ((t29ed@parentheses-ok? (lambda (t29f8@text) (let t2a00@loop ((t29fa@chars (string->list t29f8@text)) (t29fb@p0 '0) (t29fc@p1 '0)) (if (null? t29fa@chars) (= '0 t29fb@p0 t29fc@p1) (let ((t2a02@t (car t29fa@chars))) (if (memv t2a02@t '(#\()) (t2a00@loop (cdr t29fa@chars) (+ t29fb@p0 '1) t29fc@p1) (if (memv t2a02@t '(#\))) (t2a00@loop (cdr t29fa@chars) (- t29fb@p0 '1) t29fc@p1) (if (memv t2a02@t '(#\[)) (t2a00@loop (cdr t29fa@chars) t29fb@p0 (+ t29fc@p1 '1)) (if (memv t2a02@t '(#\])) (t2a00@loop (cdr t29fa@chars) t29fb@p0 (- t29fc@p1 '1)) (t2a00@loop (cdr t29fa@chars) t29fb@p0 t29fc@p1)))))))))) (t29ef@eval-string-print (lambda (t29f2@text) (if (not (or (string=? '"\n" t29f2@text) (= '0 (string-length t29f2@text)))) (call-with-values (lambda () (t2927@eval-top-level (call-with-port (open-string-input-port t29f2@text) read))) (lambda t29f4@out* (for-each (lambda (t29f6@out) (begin (write/ss t29f6@out) (newline))) t29f4@out*))) (void))))) (if (eof-object? t29e6@line) (begin (t29ef@eval-string-print t29e7@accum) (exit)) (let ((t29f0@current (string-append t29e7@accum t29e6@line))) (if (t29ed@parentheses-ok? t29f0@current) (t29ef@eval-string-print t29f0@current) (t29ea@loop (get-line (current-input-port)) t29f0@current)))))))))))) (newline) (t29dd@rec))))) (t29dd@rec)))) (set! t2a77@t2919@repl t2919@repl) (set! t291b@trace-printer (t6cd@t5ab@make-parameter write)) (set! t2a78@t291b@trace-printer t291b@trace-printer) (set! t291d@command-line (t6cd@t5ab@make-parameter (get-command-line))) (set! t2a79@t291d@command-line t291d@command-line) (set! t291f@local-library-path (lambda (t2a04@filename) (t987@t7c3@library-path))) (set! t2a7a@t291f@local-library-path t291f@local-library-path) (set! t2921@load/args (lambda (t2a06@filename . t2a08@args) (begin (apply t2931@load-r6rs-top-level t2a06@filename 'load t2a08@args) (void)))) (set! t2a7b@t2921@load/args t2921@load/args) (set! t2923@load (lambda (t2a0a@filename) (begin (apply t2931@load-r6rs-top-level t2a0a@filename 'load (t291d@command-line)) (void)))) (set! t2a7c@t2923@load t2923@load) (set! t2925@ironscheme-build (lambda () (t2923@load '"ironscheme-buildscript.ss"))) (set! t2a7d@t2925@ironscheme-build t2925@ironscheme-build) (set! t2927@eval-top-level (lambda (t2a0c@x) (t28e4@te44@eval t2a0c@x (t28fb@te72@interaction-environment)))) (set! t2a7e@t2927@eval-top-level t2927@eval-top-level) (set! t2929@compile-system-libraries (lambda () (t2927@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! t2a7f@t2929@compile-system-libraries t2929@compile-system-libraries) (set! t292b@compile (lambda (t2a0e@filename) (t2931@load-r6rs-top-level t2a0e@filename 'compile))) (set! t2a80@t292b@compile t292b@compile) (set! t292d@compile->closure (lambda (t2a10@filename) (t2931@load-r6rs-top-level t2a10@filename 'closure))) (set! t2a81@t292d@compile->closure t292d@compile->closure) (set! t292f@pre-compile-r6rs-file (lambda (t2a12@filename) (t2931@load-r6rs-top-level t2a12@filename 'compile))) (set! t2a82@t292f@pre-compile-r6rs-file t292f@pre-compile-r6rs-file) (set! t2931@load-r6rs-top-level (lambda (t2a14@filename t2a15@how . t2a18@args) (begin (t987@t7c3@library-path (t291f@local-library-path t2a14@filename)) (let ((t2a1a@x* (with-input-from-file t2a14@filename (lambda () (let t2a1c@f () (let ((t2a1e@x (t6bf@t58f@read-annotated))) (if (eof-object? t2a1e@x) '() (cons t2a1e@x (t2a1c@f))))))))) (let ((t2a20@t t2a15@how)) (if (memv t2a20@t '(closure)) (t28fa@te70@pre-compile-r6rs-top-level t2a1a@x*) (if (memv t2a20@t '(load)) (begin (t291d@command-line (cons t2a14@filename (car t2a18@args))) (t6ce@t5ad@mosh-cache-dir (create-mosh-cache-dir)) (if (t6ce@t5ad@mosh-cache-dir) (gensym-prefix-set! (t2937@prefix-inc! (string-append (t6ce@t5ad@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (t2a22@file) ((call/cc (lambda (t2a26@t2a24) (lambda () (with-exception-handler (lambda (t2a28@c) ((call/cc (lambda (t2a2a@t2a25) (t2a26@t2a24 (lambda () (if '#t '#t (t2a2a@t2a25 (lambda () (raise-continuable t2a28@c)))))))))) (lambda () (delete-file (string-append (t6ce@t5ad@mosh-cache-dir) '"/" t2a22@file))))))))) (directory-list (t6ce@t5ad@mosh-cache-dir))) (void)) (let ((t2a2c@compiled (t28f9@te6e@compile-r6rs-top-level t2a1a@x*))) (begin (if (and (t6ce@t5ad@mosh-cache-dir) (not (symbol-value '%disable-acc))) (t98b@t7cb@serialize-all t6c8@t5a1@serialize-library t724@t6dd@compile-core-expr) (void)) (t2a2c@compiled)))) (if (memv t2a20@t '(compile)) (begin (t28f9@te6e@compile-r6rs-top-level t2a1a@x*) (t98b@t7cb@serialize-all t6c8@t5a1@serialize-library t724@t6dd@compile-core-expr)) (if '#f '#f (void)))))))))) (set! t2a83@t2931@load-r6rs-top-level t2931@load-r6rs-top-level) (set! t2933@load-r6rs-top-level-sexp (lambda (t2a2e@import-spec t2a2f@thunk) (let ((t2a3a@t2a33 t987@t7c3@library-path) (t2a3b@t2a35 t6ce@t5ad@mosh-cache-dir) (t2a3c@t2a37 (t291f@local-library-path '"")) (t2a3d@t2a39 (create-mosh-cache-dir))) (let ((t2a42@swap (lambda () (begin (let ((t2a44@t (t2a3a@t2a33))) (begin (t2a3a@t2a33 t2a3c@t2a37) (set! t2a3c@t2a37 t2a44@t))) (let ((t2a46@t (t2a3b@t2a35))) (begin (t2a3b@t2a35 t2a3d@t2a39) (set! t2a3d@t2a39 t2a46@t))))))) (dynamic-wind t2a42@swap (lambda () (begin (if (t6ce@t5ad@mosh-cache-dir) (gensym-prefix-set! (t2937@prefix-inc! (string-append (t6ce@t5ad@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((t2a4c@t2a49 t291d@command-line) (t2a4d@t2a4b '())) (let ((t2a50@swap (lambda () (let ((t2a52@t (t2a4c@t2a49))) (begin (t2a4c@t2a49 t2a4d@t2a4b) (set! t2a4d@t2a4b t2a52@t)))))) (dynamic-wind t2a50@swap (lambda () ((t28f9@te6e@compile-r6rs-top-level (list (cons 'import t2a2e@import-spec) (list t2a2f@thunk))))) t2a50@swap))))) t2a42@swap))))) (set! t2a84@t2933@load-r6rs-top-level-sexp t2933@load-r6rs-top-level-sexp) (set! t2935@prefix-inc (lambda (t2a54@prefix-string) (let ((t2a56@prefix (symbol->string t2a54@prefix-string))) (let ((t2a58@len (string-length t2a56@prefix))) (let t2a60@loop ((t2a5a@i (- t2a58@len '1)) (t2a5b@carry? '#t) (t2a5c@accum '())) (if (< t2a5a@i '0) (string->symbol (list->string (if t2a5b@carry? (cons '#\a t2a5c@accum) t2a5c@accum))) (if t2a5b@carry? (let ((t2a62@next-integer (+ '1 (char->integer (string-ref t2a56@prefix t2a5a@i))))) (if (= t2a62@next-integer '123) (t2a60@loop (- t2a5a@i '1) '#f (cons '#\A t2a5c@accum)) (if (= t2a62@next-integer '91) (t2a60@loop (- t2a5a@i '1) '#t (cons '#\a t2a5c@accum)) (t2a60@loop (- t2a5a@i '1) '#f (cons (integer->char t2a62@next-integer) t2a5c@accum))))) (t2a60@loop (- t2a5a@i '1) '#f (cons (string-ref t2a56@prefix t2a5a@i) t2a5c@accum))))))))) (set! t2a85@t2935@prefix-inc t2935@prefix-inc) (set! t2937@prefix-inc! (lambda (t2a64@file) (begin (if (not (file-exists? t2a64@file)) (call-with-output-file t2a64@file (lambda (t2a66@port) (write 'd t2a66@port))) (void)) (let ((t2a68@prefix (call-with-input-file t2a64@file read))) (if (main-vm?) (let ((t2a6a@next-prefix (t2935@prefix-inc t2a68@prefix))) (begin (call-with-port (open-file-output-port t2a64@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (t2a6c@port) (write t2a6a@next-prefix t2a6c@port))) t2a68@prefix)) t2a68@prefix))))) (set! t2a86@t2937@prefix-inc! t2937@prefix-inc!) (begin (t98c@t7cd@current-precompiled-library-loader t6c9@t5a3@load-serialized-library) (set-symbol-value! 'load t2923@load) (set-symbol-value! 'pre-compile-r6rs-file t292f@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs t2927@eval-top-level) (set-symbol-value! 'int-env-syms t28db@te32@interaction-environment-symbols) (set-symbol-value! 'expanded2core t723@t6db@expanded->core) (set-symbol-value! 'trace-printer t291b@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (t2938@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list t2938@c))))) (t290d@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (t290d@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (t290b@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (t290b@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (t290b@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((t293a@prefix (lambda (t293c@ext t293d@ls) (append (map (lambda (t2940@x) (string-append t293c@ext t2940@x)) t293d@ls) t293d@ls)))) (t988@t7c5@library-extensions (t293a@prefix '".mosh" (t988@t7c5@library-extensions)))) (current-exception-handler (lambda (t2942@c) (begin (if (condition? t2942@c) (t2913@condition-printer/p t2942@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" t2942@c)) t2942@c))) (if ((call/cc (lambda (t2946@t2944) (lambda () (with-exception-handler (lambda (t2948@c) ((call/cc (lambda (t294a@t2945) (t2946@t2944 (lambda () (if '#t '#f (t294a@t2945 (lambda () (raise-continuable t2948@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (t2933@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (t291d@command-line)) (let ((t2954@t294d t291d@command-line) (t2955@t294f t6ce@t5ad@mosh-cache-dir) (t2956@t2951 '()) (t2957@t2953 (create-mosh-cache-dir))) (let ((t295c@swap (lambda () (begin (let ((t295e@t (t2954@t294d))) (begin (t2954@t294d t2956@t2951) (set! t2956@t2951 t295e@t))) (let ((t2960@t (t2955@t294f))) (begin (t2955@t294f t2957@t2953) (set! t2957@t2953 t2960@t))))))) (dynamic-wind t295c@swap (lambda () (begin (if (t6ce@t5ad@mosh-cache-dir) (gensym-prefix-set! (t2937@prefix-inc! (string-append (t6ce@t5ad@mosh-cache-dir) '"/prefix.txt"))) (void)) (t2919@repl))) t295c@swap))) (begin (t987@t7c3@library-path (t291f@local-library-path (car (t291d@command-line)))) (set! t2909@x* (with-input-from-file (car (t291d@command-line)) (lambda () (let t2962@f () (let ((t2964@x (t6bf@t58f@read-annotated))) (if (eof-object? t2964@x) '() (cons t2964@x (t2962@f)))))))) (t291d@command-line (cons (car (t291d@command-line)) (cdr (t291d@command-line)))) (t6ce@t5ad@mosh-cache-dir (create-mosh-cache-dir)) (if (t6ce@t5ad@mosh-cache-dir) (gensym-prefix-set! (t2937@prefix-inc! (string-append (t6ce@t5ad@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (t2966@file) ((call/cc (lambda (t296a@t2968) (lambda () (with-exception-handler (lambda (t296c@c) ((call/cc (lambda (t296e@t2969) (t296a@t2968 (lambda () (if '#t '#t (t296e@t2969 (lambda () (raise-continuable t296c@c)))))))))) (lambda () (delete-file (string-append (t6ce@t5ad@mosh-cache-dir) '"/" t2966@file))))))))) (directory-list (t6ce@t5ad@mosh-cache-dir))) (void)) (let ((t2970@compiled (t28f9@te6e@compile-r6rs-top-level t2909@x*))) (begin (if (and (t6ce@t5ad@mosh-cache-dir) (not (symbol-value '%disable-acc))) (t98b@t7cb@serialize-all t6c8@t5a1@serialize-library t724@t6dd@compile-core-expr) (void)) (t2970@compiled))))))))
