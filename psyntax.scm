;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! tm597@library-file-path->cache-path (unspecified)) (set! tm599@read-annotated (unspecified)) (set! tm59b@annotation-stripped (unspecified)) (set! tm59d@annotation? (unspecified)) (set! tm59f@annotation-source (unspecified)) (set! tm5a1@annotation-expression (unspecified)) (set! tm5a3@scm->fasl (unspecified)) (set! tm5a5@fasl-save (unspecified)) (set! tm5a7@fasl-load (unspecified)) (set! tm5a9@verbose? (unspecified)) (set! tm5ab@serialize-library (unspecified)) (set! tm5ad@load-serialized-library (unspecified)) (set! tm5af@make-record-printer (unspecified)) (set! tm5b1@compile-core (unspecified)) (set! tm5b3@read-library-source-file (unspecified)) (set! tm5b5@make-parameter (unspecified)) (set! tm5b7@mosh-cache-dir (unspecified)) (set! tm64d@file-options-spec (unspecified)) (set! tm597@library-file-path->cache-path (lambda (tm64e@x) (call-with-values (lambda () (open-string-output-port)) (lambda (tm654@tm651 tm655@tm653) (let ((tm658@extract tm655@tm653) (tm659@p tm654@tm651)) (letrec* ((tm65d@display-hex (lambda (tm666@n) (if (<= '0 tm666@n '9) (display tm666@n tm659@p) (display (integer->char (+ (char->integer '#\a) (- tm666@n '10))) tm659@p))))) (begin (let tm660@f ((tm65e@ls (string-split tm64e@x '#\/))) (if (not (null? tm65e@ls)) (begin (display '"_" tm659@p) (for-each (lambda (tm662@c) (if (or (char<=? '#\a tm662@c '#\z) (char<=? '#\A tm662@c '#\Z) (char<=? '#\0 tm662@c '#\9) (memv tm662@c '(#\- #\. #\_ #\~))) (display tm662@c tm659@p) (begin (display '"%" tm659@p) (let ((tm664@n (char->integer tm662@c))) (begin (tm65d@display-hex (quotient tm664@n '16)) (tm65d@display-hex (remainder tm664@n '16))))))) (string->list (car tm65e@ls))) (tm660@f (cdr tm65e@ls))) (void))) (tm658@extract)))))))) (set! tm6c8@tm597@library-file-path->cache-path tm597@library-file-path->cache-path) (set! tm599@read-annotated read) (set! tm6c9@tm599@read-annotated tm599@read-annotated) (set! tm59b@annotation-stripped (lambda (tm668@x) (if (pair? tm668@x) (cons (tm59b@annotation-stripped (car tm668@x)) (tm59b@annotation-stripped (cdr tm668@x))) (if (procedure? tm668@x) (set-source-info! tm668@x '#f) tm668@x)))) (set! tm6ca@tm59b@annotation-stripped tm59b@annotation-stripped) (set! tm59d@annotation? (lambda (tm66a@x) (or (and (annotated-pair? tm66a@x) (source-info tm66a@x)) (and (procedure? tm66a@x) (source-info tm66a@x))))) (set! tm6cb@tm59d@annotation? tm59d@annotation?) (set! tm59f@annotation-source (lambda (tm66c@x) (source-info tm66c@x))) (set! tm6cc@tm59f@annotation-source tm59f@annotation-source) (set! tm5a1@annotation-expression (lambda (tm66e@x) (if (annotated-pair? tm66e@x) (cons (car tm66e@x) (cdr tm66e@x)) (if (procedure? tm66e@x) (set-source-info! tm66e@x '#f) tm66e@x)))) (set! tm6cd@tm5a1@annotation-expression tm5a1@annotation-expression) (set! tm5a3@scm->fasl (lambda (tm670@filename) (string-append (tm5b7@mosh-cache-dir) '"/" (tm597@library-file-path->cache-path tm670@filename) '".mosh-fasl"))) (set! tm6ce@tm5a3@scm->fasl tm5a3@scm->fasl) (set! tm5a5@fasl-save (lambda (tm672@filename tm673@obj) (call-with-port (open-file-output-port tm672@filename) (lambda (tm676@port) ((symbol-value 'fasl-write!) tm673@obj tm676@port))))) (set! tm6cf@tm5a5@fasl-save tm5a5@fasl-save) (set! tm5a7@fasl-load (lambda (tm678@filename) (call-with-port (open-file-input-port tm678@filename) (symbol-value 'fasl-read!)))) (set! tm6d0@tm5a7@fasl-load tm5a7@fasl-load) (set! tm5a9@verbose? (symbol-value '%verbose)) (set! tm6d1@tm5a9@verbose? tm5a9@verbose?) (set! tm5ab@serialize-library (lambda (tm67a@filename tm67b@obj) (begin (if tm5a9@verbose? (format (current-error-port) '"serialize-library ~a\n..." tm67a@filename) (void)) (let ((tm67e@expanded2core (symbol-value 'expanded2core))) (let ((tm680@compile (symbol-value 'compile-w/o-halt))) (let ((tm682@code tm67b@obj)) (let ((tm684@pivot (cddddr (cddddr tm682@code)))) (let ((tm686@visit (tm680@compile (tm67e@expanded2core (car tm684@pivot))))) (begin (set-car! tm684@pivot tm686@visit) (let ((tm688@pivot (cdr tm684@pivot))) (let ((tm68a@invoke (tm680@compile (tm67e@expanded2core (car tm688@pivot))))) (set-car! tm688@pivot tm68a@invoke))))))))) (let ((tm68c@fasl-file (tm5a3@scm->fasl tm67a@filename))) (begin (if (file-exists? tm68c@fasl-file) (delete-file tm68c@fasl-file) (void)) ((call/cc (lambda (tm690@tm68e) (lambda () (with-exception-handler (lambda (tm692@c) ((call/cc (lambda (tm694@tm68f) (tm690@tm68e (lambda () (if '#t (begin (if tm5a9@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" tm67a@filename) (void)) (if (file-exists? tm68c@fasl-file) (delete-file tm68c@fasl-file) (void)) '#f) (tm694@tm68f (lambda () (raise-continuable tm692@c)))))))))) (lambda () (tm5a5@fasl-save tm68c@fasl-file tm67b@obj)))))))))))) (set! tm6d2@tm5ab@serialize-library tm5ab@serialize-library) (set! tm5ad@load-serialized-library (lambda (tm696@filename tm697@obj) (and (tm5b7@mosh-cache-dir) (let ((tm69a@fasl-file (tm5a3@scm->fasl tm696@filename))) (if (and (file-exists? tm69a@fasl-file) ((symbol-value 'file-newer?) tm69a@fasl-file tm696@filename)) (let ((tm69c@expanded2core (symbol-value 'expanded2core))) (let ((tm69e@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((tm6a0@code (tm5a7@fasl-load tm69a@fasl-file))) (let ((tm6a2@pivot (cddddr (cddddr tm6a0@code)))) (let ((tm6a4@visit (car tm6a2@pivot))) (let ((tm6a6@visit-proc (lambda () (tm69e@eval-compiled-core tm6a4@visit)))) (begin (set-car! tm6a2@pivot tm6a6@visit-proc) (let ((tm6a8@pivot (cdr tm6a2@pivot))) (let ((tm6aa@invoke (car tm6a8@pivot))) (begin (set-car! tm6a8@pivot (lambda () (tm69e@eval-compiled-core tm6aa@invoke))) (apply tm697@obj tm6a0@code))))))))))) '#f))))) (set! tm6d3@tm5ad@load-serialized-library tm5ad@load-serialized-library) (set! tm5af@make-record-printer (lambda (tm6ac@name tm6ad@printer) (lambda tm6b0@x (begin (display '"record printer") (for-each display tm6b0@x))))) (set! tm6d4@tm5af@make-record-printer tm5af@make-record-printer) (set! tm5b1@compile-core (lambda tm6b2@x (apply error 'comile-core '"not implementated" tm6b2@x))) (set! tm6d5@tm5b1@compile-core tm5b1@compile-core) (set! tm5b3@read-library-source-file (lambda (tm6b4@file-name) (with-input-from-file tm6b4@file-name tm599@read-annotated))) (set! tm6d6@tm5b3@read-library-source-file tm5b3@read-library-source-file) (set! tm5b5@make-parameter (lambda tm6c4 (let ((tm6c5 (length tm6c4))) (if (= tm6c5 '1) (apply (lambda (tm6b6@x) (tm5b5@make-parameter tm6b6@x (lambda (tm6b8@x) tm6b8@x))) tm6c4) (if (= tm6c5 '2) (apply (lambda (tm6ba@x tm6bb@fender) (let ((tm6be@x (tm6bb@fender tm6ba@x))) (lambda tm6c2 (let ((tm6c3 (length tm6c2))) (if (= tm6c3 '0) (apply (lambda () tm6be@x) tm6c2) (if (= tm6c3 '1) (apply (lambda (tm6c0@v) (set! tm6be@x (tm6bb@fender tm6c0@v))) tm6c2) (error 'apply '"invalid arg count"))))))) tm6c4) (error 'apply '"invalid arg count")))))) (set! tm6d7@tm5b5@make-parameter tm5b5@make-parameter) (set! tm5b7@mosh-cache-dir (tm5b5@make-parameter '#f)) (set! tm6d8@tm5b7@mosh-cache-dir tm5b7@mosh-cache-dir) (set! tm64d@file-options-spec (lambda (tm6c6@x) tm6c6@x)) (set! tm6d9@tm64d@file-options-spec tm64d@file-options-spec) (void))
(begin (set! tm6df@current-primitive-locations (unspecified)) (set! tm6e1@mutable? (unspecified)) (set! tm6e3@rewriter (unspecified)) (set! tm6e5@expanded->core (unspecified)) (set! tm6e7@compile-core-expr (unspecified)) (set! tm6e9@pretty-print (unspecified)) (set! tm6eb@compile-core-expr-to-port (unspecified)) (set! tm6df@current-primitive-locations (tm6d7@tm5b5@make-parameter (lambda (tm6ec@x) '#f) (lambda (tm6ee@p) tm6ee@p))) (set! tm72a@tm6df@current-primitive-locations tm6df@current-primitive-locations) (set! tm6e1@mutable? (lambda (tm6f0@x) (or (pair? tm6f0@x) (vector? tm6f0@x) (hashtable? tm6f0@x)))) (set! tm72b@tm6e1@mutable? tm6e1@mutable?) (set! tm6e3@rewriter (lambda (tm6f2@quote-hack?) (letrec* ((tm6f5@f (lambda (tm6f6@x) (if (pair? tm6f6@x) (let ((tm6f8@t (car tm6f6@x))) (if (memv tm6f8@t '(quote)) (if (and tm6f2@quote-hack? (tm6e1@mutable? (cadr tm6f6@x))) (let ((tm6fa@g (gensym))) (begin (set-symbol-value! tm6fa@g (cadr tm6f6@x)) tm6fa@g)) tm6f6@x) (if (memv tm6f8@t '(case-lambda)) (cons 'case-lambda (map (lambda (tm6fc@x) (cons (car tm6fc@x) (map tm6f5@f (cdr tm6fc@x)))) (cdr tm6f6@x))) (if (memv tm6f8@t '(lambda)) (cons* 'lambda (cadr tm6f6@x) (map tm6f5@f (cddr tm6f6@x))) (if (memv tm6f8@t '(letrec)) (let ((tm6fe@bindings (cadr tm6f6@x)) (tm6ff@body* (cddr tm6f6@x))) (let ((tm702@lhs* (map car tm6fe@bindings)) (tm703@rhs* (map cadr tm6fe@bindings))) (cons* 'letrec (map list tm702@lhs* (map tm6f5@f tm703@rhs*)) (map tm6f5@f tm6ff@body*)))) (if (memv tm6f8@t '(letrec*)) (let ((tm706@bindings (cadr tm6f6@x)) (tm707@body* (cddr tm6f6@x))) (let ((tm70a@lhs* (map car tm706@bindings)) (tm70b@rhs* (map cadr tm706@bindings))) (cons* 'letrec* (map list tm70a@lhs* (map tm6f5@f tm70b@rhs*)) (map tm6f5@f tm707@body*)))) (if (memv tm6f8@t '(library-letrec*)) (let ((tm70e@name (cadr tm6f6@x)) (tm70f@x (cdr tm6f6@x))) (let ((tm712@bindings (cadr tm70f@x)) (tm713@body* (cddr tm70f@x))) (let ((tm716@lhs* (map car tm712@bindings)) (tm717@lhs** (map cadr tm712@bindings)) (tm718@rhs* (map caddr tm712@bindings))) (cons* 'library-letrec* tm70e@name (map list tm716@lhs* tm717@lhs** (map tm6f5@f tm718@rhs*)) (map tm6f5@f tm713@body*))))) (if (memv tm6f8@t '(begin)) (cons 'begin (map tm6f5@f (cdr tm6f6@x))) (if (memv tm6f8@t '(set!)) (list 'set! (cadr tm6f6@x) (tm6f5@f (caddr tm6f6@x))) (if (memv tm6f8@t '(primitive)) (let ((tm71c@op (cadr tm6f6@x))) (let ((tm71e@t ((tm6df@current-primitive-locations) tm71c@op))) (if tm71e@t ((lambda (tm720@loc) tm720@loc) tm71e@t) tm71c@op))) (if (memv tm6f8@t '(define)) tm6f6@x (if (list? tm6f6@x) (map tm6f5@f tm6f6@x) (error 'rewrite '"invalid form ~s ~s" tm6f6@x (list? tm6f6@x)))))))))))))) tm6f6@x)))) tm6f5@f))) (set! tm72c@tm6e3@rewriter tm6e3@rewriter) (set! tm6e5@expanded->core (lambda (tm722@x) ((tm6e3@rewriter '#f) tm722@x))) (set! tm72d@tm6e5@expanded->core tm6e5@expanded->core) (set! tm6e7@compile-core-expr (lambda (tm724@x) ((tm6e3@rewriter '#f) tm724@x))) (set! tm72e@tm6e7@compile-core-expr tm6e7@compile-core-expr) (set! tm6e9@pretty-print write) (set! tm72f@tm6e9@pretty-print tm6e9@pretty-print) (set! tm6eb@compile-core-expr-to-port (lambda (tm726@x tm727@p) (tm6e9@pretty-print ((tm6e3@rewriter '#f) tm726@x) tm727@p))) (set! tm730@tm6eb@compile-core-expr-to-port tm6eb@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! tm77f@make-collection (unspecified)) (set! tm781@current-library-collection (unspecified)) (set! tm783@rp (unspecified)) (set! tm78d@library? (unspecified)) (set! tm78f@library-id (unspecified)) (set! tm791@set-library-id! (unspecified)) (set! tm793@library-name (unspecified)) (set! tm795@set-library-name! (unspecified)) (set! tm797@library-version (unspecified)) (set! tm799@set-library-version! (unspecified)) (set! tm79b@library-imp* (unspecified)) (set! tm79d@set-library-imp*! (unspecified)) (set! tm79f@library-vis* (unspecified)) (set! tm7a1@set-library-vis*! (unspecified)) (set! tm7a3@library-inv* (unspecified)) (set! tm7a5@set-library-inv*! (unspecified)) (set! tm7a7@library-subst (unspecified)) (set! tm7a9@set-library-subst! (unspecified)) (set! tm7ab@library-env (unspecified)) (set! tm7ad@set-library-env! (unspecified)) (set! tm7af@library-visit-state (unspecified)) (set! tm7b1@set-library-visit-state! (unspecified)) (set! tm7b3@library-invoke-state (unspecified)) (set! tm7b5@set-library-invoke-state! (unspecified)) (set! tm7b7@library-visit-code (unspecified)) (set! tm7b9@set-library-visit-code! (unspecified)) (set! tm7bb@library-invoke-code (unspecified)) (set! tm7bd@set-library-invoke-code! (unspecified)) (set! tm7bf@library-visible? (unspecified)) (set! tm7c1@set-library-visible?! (unspecified)) (set! tm7c3@library-source-file-name (unspecified)) (set! tm7c5@set-library-source-file-name! (unspecified)) (set! tm7c7@dummy (unspecified)) (set! tm7c9@find-dependencies (unspecified)) (set! tm7cb@find-library-by (unspecified)) (set! tm7cd@library-path (unspecified)) (set! tm7cf@library-extensions (unspecified)) (set! tm7d1@library-name->file-name (unspecified)) (set! tm7d3@file-locator (unspecified)) (set! tm7d5@serialize-all (unspecified)) (set! tm7d7@current-precompiled-library-loader (unspecified)) (set! tm7d9@try-load-from-file (unspecified)) (set! tm7db@library-loader (unspecified)) (set! tm7dd@current-library-expander (unspecified)) (set! tm7df@external-pending-libraries (unspecified)) (set! tm7e1@find-external-library (unspecified)) (set! tm7e3@find-library-by-name (unspecified)) (set! tm7e5@library-exists? (unspecified)) (set! tm7e7@find-library-by-spec/die (unspecified)) (set! tm7e9@label->binding-table (unspecified)) (set! tm7eb@install-library-record (unspecified)) (set! tm7ed@install-library (unspecified)) (set! tm7ef@imported-label->binding (unspecified)) (set! tm7f1@invoke-library (unspecified)) (set! tm7f3@visit-library (unspecified)) (set! tm7f5@invoke-library-by-spec (unspecified)) (set! tm7f7@installed-libraries (unspecified)) (set! tm7f9@library-spec (unspecified)) (set! tm77f@make-collection (lambda () (let ((tm7fa@set '())) (letrec* ((tm7fd@set-cons (lambda (tm802@x tm803@ls) (if (memq tm802@x tm803@ls) tm803@ls (cons tm802@x tm803@ls))))) (lambda tm800 (let ((tm801 (length tm800))) (if (= tm801 '0) (apply (lambda () tm7fa@set) tm800) (if (= tm801 '1) (apply (lambda (tm7fe@x) (set! tm7fa@set (tm7fd@set-cons tm7fe@x tm7fa@set))) tm800) (error 'apply '"invalid arg count"))))))))) (set! tm96e@tm77f@make-collection tm77f@make-collection) (set! tm781@current-library-collection (tm6d7@tm5b5@make-parameter (tm77f@make-collection) (lambda (tm806@x) (begin (if (not (procedure? tm806@x)) (assertion-violation 'current-library-collection '"not a procedure" tm806@x) (void)) tm806@x)))) (set! tm96f@tm781@current-library-collection tm781@current-library-collection) (set! tm783@rp (tm6d4@tm5af@make-record-printer 'library (lambda (tm808@x tm809@p tm80a@wr) (begin (if (not (tm78d@library? tm808@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (tm797@library-version tm808@x)) (tm793@library-name tm808@x) (append (tm793@library-name tm808@x) (list (tm797@library-version tm808@x))))) tm809@p))))) (set! tm970@tm783@rp tm783@rp) (set! tm78d@library? (lambda (tm80e@x) (and (simple-struct? tm80e@x) (eq? (simple-struct-name tm80e@x) 'library)))) (set! tm971@tm78d@library? tm78d@library?) (set! tm78f@library-id (lambda (tm810@x) (simple-struct-ref tm810@x '0))) (set! tm972@tm78f@library-id tm78f@library-id) (set! tm791@set-library-id! (lambda (tm812@x tm813@val) (simple-struct-set! tm812@x '0 tm813@val))) (set! tm973@tm791@set-library-id! tm791@set-library-id!) (set! tm793@library-name (lambda (tm816@x) (simple-struct-ref tm816@x '1))) (set! tm974@tm793@library-name tm793@library-name) (set! tm795@set-library-name! (lambda (tm818@x tm819@val) (simple-struct-set! tm818@x '1 tm819@val))) (set! tm975@tm795@set-library-name! tm795@set-library-name!) (set! tm797@library-version (lambda (tm81c@x) (simple-struct-ref tm81c@x '2))) (set! tm976@tm797@library-version tm797@library-version) (set! tm799@set-library-version! (lambda (tm81e@x tm81f@val) (simple-struct-set! tm81e@x '2 tm81f@val))) (set! tm977@tm799@set-library-version! tm799@set-library-version!) (set! tm79b@library-imp* (lambda (tm822@x) (simple-struct-ref tm822@x '3))) (set! tm978@tm79b@library-imp* tm79b@library-imp*) (set! tm79d@set-library-imp*! (lambda (tm824@x tm825@val) (simple-struct-set! tm824@x '3 tm825@val))) (set! tm979@tm79d@set-library-imp*! tm79d@set-library-imp*!) (set! tm79f@library-vis* (lambda (tm828@x) (simple-struct-ref tm828@x '4))) (set! tm97a@tm79f@library-vis* tm79f@library-vis*) (set! tm7a1@set-library-vis*! (lambda (tm82a@x tm82b@val) (simple-struct-set! tm82a@x '4 tm82b@val))) (set! tm97b@tm7a1@set-library-vis*! tm7a1@set-library-vis*!) (set! tm7a3@library-inv* (lambda (tm82e@x) (simple-struct-ref tm82e@x '5))) (set! tm97c@tm7a3@library-inv* tm7a3@library-inv*) (set! tm7a5@set-library-inv*! (lambda (tm830@x tm831@val) (simple-struct-set! tm830@x '5 tm831@val))) (set! tm97d@tm7a5@set-library-inv*! tm7a5@set-library-inv*!) (set! tm7a7@library-subst (lambda (tm834@x) (simple-struct-ref tm834@x '6))) (set! tm97e@tm7a7@library-subst tm7a7@library-subst) (set! tm7a9@set-library-subst! (lambda (tm836@x tm837@val) (simple-struct-set! tm836@x '6 tm837@val))) (set! tm97f@tm7a9@set-library-subst! tm7a9@set-library-subst!) (set! tm7ab@library-env (lambda (tm83a@x) (simple-struct-ref tm83a@x '7))) (set! tm980@tm7ab@library-env tm7ab@library-env) (set! tm7ad@set-library-env! (lambda (tm83c@x tm83d@val) (simple-struct-set! tm83c@x '7 tm83d@val))) (set! tm981@tm7ad@set-library-env! tm7ad@set-library-env!) (set! tm7af@library-visit-state (lambda (tm840@x) (simple-struct-ref tm840@x '8))) (set! tm982@tm7af@library-visit-state tm7af@library-visit-state) (set! tm7b1@set-library-visit-state! (lambda (tm842@x tm843@val) (simple-struct-set! tm842@x '8 tm843@val))) (set! tm983@tm7b1@set-library-visit-state! tm7b1@set-library-visit-state!) (set! tm7b3@library-invoke-state (lambda (tm846@x) (simple-struct-ref tm846@x '9))) (set! tm984@tm7b3@library-invoke-state tm7b3@library-invoke-state) (set! tm7b5@set-library-invoke-state! (lambda (tm848@x tm849@val) (simple-struct-set! tm848@x '9 tm849@val))) (set! tm985@tm7b5@set-library-invoke-state! tm7b5@set-library-invoke-state!) (set! tm7b7@library-visit-code (lambda (tm84c@x) (simple-struct-ref tm84c@x '10))) (set! tm986@tm7b7@library-visit-code tm7b7@library-visit-code) (set! tm7b9@set-library-visit-code! (lambda (tm84e@x tm84f@val) (simple-struct-set! tm84e@x '10 tm84f@val))) (set! tm987@tm7b9@set-library-visit-code! tm7b9@set-library-visit-code!) (set! tm7bb@library-invoke-code (lambda (tm852@x) (simple-struct-ref tm852@x '11))) (set! tm988@tm7bb@library-invoke-code tm7bb@library-invoke-code) (set! tm7bd@set-library-invoke-code! (lambda (tm854@x tm855@val) (simple-struct-set! tm854@x '11 tm855@val))) (set! tm989@tm7bd@set-library-invoke-code! tm7bd@set-library-invoke-code!) (set! tm7bf@library-visible? (lambda (tm858@x) (simple-struct-ref tm858@x '12))) (set! tm98a@tm7bf@library-visible? tm7bf@library-visible?) (set! tm7c1@set-library-visible?! (lambda (tm85a@x tm85b@val) (simple-struct-set! tm85a@x '12 tm85b@val))) (set! tm98b@tm7c1@set-library-visible?! tm7c1@set-library-visible?!) (set! tm7c3@library-source-file-name (lambda (tm85e@x) (simple-struct-ref tm85e@x '13))) (set! tm98c@tm7c3@library-source-file-name tm7c3@library-source-file-name) (set! tm7c5@set-library-source-file-name! (lambda (tm860@x tm861@val) (simple-struct-set! tm860@x '13 tm861@val))) (set! tm98d@tm7c5@set-library-source-file-name! tm7c5@set-library-source-file-name!) (set! tm7c7@dummy '3) (set! tm98e@tm7c7@dummy tm7c7@dummy) (set! tm7c9@find-dependencies (lambda (tm864@ls) (if (null? tm864@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! tm98f@tm7c9@find-dependencies tm7c9@find-dependencies) (set! tm7cb@find-library-by (lambda (tm866@pred) (let tm86a@f ((tm868@ls ((tm781@current-library-collection)))) (if (null? tm868@ls) '#f (if (tm866@pred (car tm868@ls)) (car tm868@ls) (tm86a@f (cdr tm868@ls))))))) (set! tm990@tm7cb@find-library-by tm7cb@find-library-by) (set! tm7cd@library-path (tm6d7@tm5b5@make-parameter '(".") (lambda (tm86c@x) (if (and (list? tm86c@x) (for-all string? tm86c@x)) (map (lambda (tm86e@x) tm86e@x) tm86c@x) (assertion-violation 'library-path '"not a list of strings" tm86c@x))))) (set! tm991@tm7cd@library-path tm7cd@library-path) (set! tm7cf@library-extensions (tm6d7@tm5b5@make-parameter '(".sls" ".ss" ".scm") (lambda (tm870@x) (if (and (list? tm870@x) (for-all string? tm870@x)) (map (lambda (tm872@x) tm872@x) tm870@x) (assertion-violation 'library-extensions '"not a list of strings" tm870@x))))) (set! tm992@tm7cf@library-extensions tm7cf@library-extensions) (set! tm7d1@library-name->file-name (lambda (tm874@x) (call-with-values (lambda () (open-string-output-port)) (lambda (tm87a@tm877 tm87b@tm879) (let ((tm87e@extract tm87b@tm879) (tm87f@p tm87a@tm877)) (letrec* ((tm883@display-hex (lambda (tm88c@n) (if (<= '0 tm88c@n '9) (display tm88c@n tm87f@p) (display (integer->char (+ (char->integer '#\a) (- tm88c@n '10))) tm87f@p))))) (begin (let tm886@f ((tm884@ls tm874@x)) (if (not (null? tm884@ls)) (begin (display '"/" tm87f@p) (for-each (lambda (tm888@c) (if (or (char<=? '#\a tm888@c '#\z) (char<=? '#\A tm888@c '#\Z) (char<=? '#\0 tm888@c '#\9) (memv tm888@c '(#\- #\. #\_ #\~))) (display tm888@c tm87f@p) (begin (display '"%" tm87f@p) (let ((tm88a@n (char->integer tm888@c))) (begin (tm883@display-hex (quotient tm88a@n '16)) (tm883@display-hex (remainder tm88a@n '16))))))) (string->list (symbol->string (car tm884@ls)))) (tm886@f (cdr tm884@ls))) (void))) (tm87e@extract)))))))) (set! tm993@tm7d1@library-name->file-name tm7d1@library-name->file-name) (set! tm7d3@file-locator (tm6d7@tm5b5@make-parameter (lambda (tm88e@x) (let ((tm890@str (tm7d1@library-name->file-name tm88e@x))) (let tm898@f ((tm892@ls (tm7cd@library-path)) (tm893@exts (tm7cf@library-extensions)) (tm894@failed-list '())) (if (null? tm892@ls) (letrec* ((tm8a2@tm89d (make-record-type-descriptor '&library-resolution &condition-rtd 'tm8a0 '#f '#f '#((immutable library) (immutable files)))) (tm8a4@tm89f '#f) (tm8a6@tm89e (make-record-constructor-descriptor tm8a2@tm89d &condition-rcd tm8a4@tm89f)) (tm8a9@tm89c (record-predicate tm8a2@tm89d)) (tm8ab@make-library-resolution-condition (record-constructor tm8a6@tm89e)) (tm8ad@tm89a (record-accessor tm8a2@tm89d '0)) (tm8af@tm89b (record-accessor tm8a2@tm89d '1)) (tm8b1@library-resolution-condition? (condition-predicate tm8a2@tm89d)) (tm8b3@condition-library (condition-accessor tm8a2@tm89d tm8ad@tm89a)) (tm8b5@condition-files (condition-accessor tm8a2@tm89d tm8af@tm89b))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (tm8ab@make-library-resolution-condition tm88e@x (reverse tm894@failed-list))))) (if (null? tm893@exts) (tm898@f (cdr tm892@ls) (tm7cf@library-extensions) tm894@failed-list) (let ((tm8b6@name (string-append (car tm892@ls) tm890@str (car tm893@exts)))) (if (file-exists? tm8b6@name) tm8b6@name (tm898@f tm892@ls (cdr tm893@exts) (cons tm8b6@name tm894@failed-list))))))))) (lambda (tm8b8@f) (if (procedure? tm8b8@f) tm8b8@f (assertion-violation 'file-locator '"not a procedure" tm8b8@f))))) (set! tm994@tm7d3@file-locator tm7d3@file-locator) (set! tm7d5@serialize-all (lambda (tm8ba@serialize tm8bb@compile) (letrec* ((tm8bf@library-desc (lambda (tm8c2@x) (list (tm78f@library-id tm8c2@x) (tm793@library-name tm8c2@x))))) (for-each (lambda (tm8c0@x) (if (tm7c3@library-source-file-name tm8c0@x) (tm8ba@serialize (tm7c3@library-source-file-name tm8c0@x) (list (tm78f@library-id tm8c0@x) (tm793@library-name tm8c0@x) (tm797@library-version tm8c0@x) (map tm8bf@library-desc (tm79b@library-imp* tm8c0@x)) (map tm8bf@library-desc (tm79f@library-vis* tm8c0@x)) (map tm8bf@library-desc (tm7a3@library-inv* tm8c0@x)) (tm7a7@library-subst tm8c0@x) (tm7ab@library-env tm8c0@x) (tm8bb@compile (tm7b7@library-visit-code tm8c0@x)) (tm8bb@compile (tm7bb@library-invoke-code tm8c0@x)) (tm7bf@library-visible? tm8c0@x))) (void))) ((tm781@current-library-collection)))))) (set! tm995@tm7d5@serialize-all tm7d5@serialize-all) (set! tm7d7@current-precompiled-library-loader (tm6d7@tm5b5@make-parameter (lambda (tm8c4@filename tm8c5@sk) '#f))) (set! tm996@tm7d7@current-precompiled-library-loader tm7d7@current-precompiled-library-loader) (set! tm7d9@try-load-from-file (lambda (tm8c8@filename) ((tm7d7@current-precompiled-library-loader) tm8c8@filename (lambda tm8ee (let ((tm8ef (length tm8ee))) (if (= tm8ef '11) (apply (lambda (tm8ca@id tm8cb@name tm8cc@ver tm8cd@imp* tm8ce@vis* tm8cf@inv* tm8d0@exp-subst tm8d1@exp-env tm8d2@visit-proc tm8d3@invoke-proc tm8d4@visible?) (let tm8e2@f ((tm8e0@deps (append tm8cd@imp* tm8ce@vis* tm8cf@inv*))) (if (null? tm8e0@deps) (begin (tm7ed@install-library tm8ca@id tm8cb@name tm8cc@ver tm8cd@imp* tm8ce@vis* tm8cf@inv* tm8d0@exp-subst tm8d1@exp-env tm8d2@visit-proc tm8d3@invoke-proc '#f '#f tm8d4@visible? '#f) '#t) (let ((tm8e4@d (car tm8e0@deps))) (let ((tm8e6@label (car tm8e4@d)) (tm8e7@dname (cadr tm8e4@d))) (let ((tm8ea@l (tm7e3@find-library-by-name tm8e7@dname))) (if (and (tm78d@library? tm8ea@l) (eq? tm8e6@label (tm78f@library-id tm8ea@l))) (tm8e2@f (cdr tm8e0@deps)) (begin (if tm6d1@tm5a9@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" tm8cb@name tm8e7@dname tm8c8@filename) (void)) '#f)))))))) tm8ee) (if (>= tm8ef '0) (apply (lambda tm8ec@others '#f) tm8ee) (error 'apply '"invalid arg count")))))))) (set! tm997@tm7d9@try-load-from-file tm7d9@try-load-from-file) (set! tm7db@library-loader (tm6d7@tm5b5@make-parameter (lambda (tm8f0@x) (let ((tm8f2@file-name ((tm7d3@file-locator) tm8f0@x))) (if (not tm8f2@file-name) (assertion-violation '#f '"cannot file library" tm8f0@x) (or (tm7d9@try-load-from-file tm8f2@file-name) ((tm7dd@current-library-expander) (tm6d6@tm5b3@read-library-source-file tm8f2@file-name) tm8f2@file-name (lambda (tm8f4@name) (if (not (fast-equal? tm8f4@name tm8f0@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (tm8fa@tm8f7 tm8fb@tm8f9) (let ((tm8fe@e tm8fb@tm8f9) (tm8ff@p tm8fa@tm8f7)) (begin (display '"expected to find library " tm8ff@p) (write tm8f0@x tm8ff@p) (display '" in file " tm8ff@p) (display tm8f2@file-name tm8ff@p) (display '", found " tm8ff@p) (write tm8f4@name tm8ff@p) (display '" instead" tm8ff@p) (tm8fe@e)))))) (void)))))))) (lambda (tm902@f) (if (procedure? tm902@f) tm902@f (assertion-violation 'library-locator '"not a procedure" tm902@f))))) (set! tm998@tm7db@library-loader tm7db@library-loader) (set! tm7dd@current-library-expander (tm6d7@tm5b5@make-parameter (lambda (tm904@x) (assertion-violation 'library-expander '"not initialized")) (lambda (tm906@f) (if (procedure? tm906@f) tm906@f (assertion-violation 'library-expander '"not a procedure" tm906@f))))) (set! tm999@tm7dd@current-library-expander tm7dd@current-library-expander) (set! tm7df@external-pending-libraries (tm6d7@tm5b5@make-parameter '())) (set! tm99a@tm7df@external-pending-libraries tm7df@external-pending-libraries) (set! tm7e1@find-external-library (lambda (tm908@name) (begin (if (member tm908@name (tm7df@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" tm908@name) (void)) (let ((tm90e@tm90b tm7df@external-pending-libraries) (tm90f@tm90d (cons tm908@name (tm7df@external-pending-libraries)))) (let ((tm912@swap (lambda () (let ((tm914@t (tm90e@tm90b))) (begin (tm90e@tm90b tm90f@tm90d) (set! tm90f@tm90d tm914@t)))))) (dynamic-wind tm912@swap (lambda () (begin ((tm7db@library-loader) tm908@name) (or (tm7cb@find-library-by (lambda (tm916@x) (fast-equal? (tm793@library-name tm916@x) tm908@name))) (assertion-violation '#f '"handling external library did not yield the correct library" tm908@name)))) tm912@swap)))))) (set! tm99b@tm7e1@find-external-library tm7e1@find-external-library) (set! tm7e3@find-library-by-name (lambda (tm918@name) (or (tm7cb@find-library-by (lambda (tm91a@x) (fast-equal? (tm793@library-name tm91a@x) tm918@name))) (tm7e1@find-external-library tm918@name)))) (set! tm99c@tm7e3@find-library-by-name tm7e3@find-library-by-name) (set! tm7e5@library-exists? (lambda (tm91c@name) (and (tm7cb@find-library-by (lambda (tm91e@x) (fast-equal? (tm793@library-name tm91e@x) tm91c@name))) '#t))) (set! tm99d@tm7e5@library-exists? tm7e5@library-exists?) (set! tm7e7@find-library-by-spec/die (lambda (tm920@spec) (let ((tm922@id (car tm920@spec))) (or (tm7cb@find-library-by (lambda (tm924@x) (eq? tm922@id (tm78f@library-id tm924@x)))) (assertion-violation '#f '"cannot find library with required spec" tm920@spec))))) (set! tm99e@tm7e7@find-library-by-spec/die tm7e7@find-library-by-spec/die) (set! tm7e9@label->binding-table (make-eq-hashtable)) (set! tm99f@tm7e9@label->binding-table tm7e9@label->binding-table) (set! tm7eb@install-library-record (lambda (tm926@lib) (begin (let ((tm928@exp-env (tm7ab@library-env tm926@lib))) (for-each (lambda (tm92a@x) (let ((tm92c@label (car tm92a@x)) (tm92d@binding (cdr tm92a@x))) (let ((tm930@binding (let ((tm932@t (car tm92d@binding))) (if (memv tm932@t '(global)) (cons 'global (cons tm926@lib (cdr tm92d@binding))) (if (memv tm932@t '(global-macro)) (cons 'global-macro (cons tm926@lib (cdr tm92d@binding))) (if (memv tm932@t '(global-macro!)) (cons 'global-macro! (cons tm926@lib (cdr tm92d@binding))) tm92d@binding)))))) (begin (if (hashtable-ref tm7e9@label->binding-table tm92c@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" tm92c@label (hashtable-ref tm7e9@label->binding-table tm92c@label '#f) tm930@binding) (exit)) (void)) (hashtable-set! tm7e9@label->binding-table tm92c@label tm930@binding))))) tm928@exp-env)) ((tm781@current-library-collection) tm926@lib)))) (set! tm9a0@tm7eb@install-library-record tm7eb@install-library-record) (set! tm7ed@install-library (lambda (tm934@id tm935@name tm936@ver tm937@imp* tm938@vis* tm939@inv* tm93a@exp-subst tm93b@exp-env tm93c@visit-proc tm93d@invoke-proc tm93e@visit-code tm93f@invoke-code tm940@visible? tm941@source-file-name) (let ((tm950@imp-lib* (map tm7e7@find-library-by-spec/die tm937@imp*)) (tm951@vis-lib* (map tm7e7@find-library-by-spec/die tm938@vis*)) (tm952@inv-lib* (map tm7e7@find-library-by-spec/die tm939@inv*))) (begin (if (not (and (symbol? tm934@id) (list? tm935@name) (list? tm936@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" tm934@id tm935@name tm936@ver) (void)) (if (tm7e5@library-exists? tm935@name) (assertion-violation 'install-library '"library is already installed" tm935@name) (void)) (let ((tm956@lib (make-simple-struct 'library '15 (list tm934@id tm935@name tm936@ver tm950@imp-lib* tm951@vis-lib* tm952@inv-lib* tm93a@exp-subst tm93b@exp-env tm93c@visit-proc tm93d@invoke-proc tm93e@visit-code tm93f@invoke-code tm940@visible? tm941@source-file-name)))) (tm7eb@install-library-record tm956@lib)))))) (set! tm9a1@tm7ed@install-library tm7ed@install-library) (set! tm7ef@imported-label->binding (lambda (tm958@lab) (hashtable-ref tm7e9@label->binding-table tm958@lab '#f))) (set! tm9a2@tm7ef@imported-label->binding tm7ef@imported-label->binding) (set! tm7f1@invoke-library (lambda (tm95a@lib) (let ((tm95c@invoke (tm7b3@library-invoke-state tm95a@lib))) (if (procedure? tm95c@invoke) (begin (tm7b5@set-library-invoke-state! tm95a@lib (lambda () (assertion-violation 'invoke '"circularity detected" tm95a@lib))) (for-each tm7f1@invoke-library (tm7a3@library-inv* tm95a@lib)) (tm7b5@set-library-invoke-state! tm95a@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" tm95a@lib))) (tm95c@invoke) (tm7b5@set-library-invoke-state! tm95a@lib '#t)) (void))))) (set! tm9a3@tm7f1@invoke-library tm7f1@invoke-library) (set! tm7f3@visit-library (lambda (tm95e@lib) (let ((tm960@visit (tm7af@library-visit-state tm95e@lib))) (if (procedure? tm960@visit) (begin (tm7b1@set-library-visit-state! tm95e@lib (lambda () (assertion-violation 'visit '"circularity detected" tm95e@lib))) (for-each tm7f1@invoke-library (tm79f@library-vis* tm95e@lib)) (tm7b1@set-library-visit-state! tm95e@lib (lambda () (assertion-violation 'invoke '"first visit did not return" tm95e@lib))) (tm960@visit) (tm7b1@set-library-visit-state! tm95e@lib '#t)) (void))))) (set! tm9a4@tm7f3@visit-library tm7f3@visit-library) (set! tm7f5@invoke-library-by-spec (lambda (tm962@spec) (tm7f1@invoke-library (tm7e7@find-library-by-spec/die tm962@spec)))) (set! tm9a5@tm7f5@invoke-library-by-spec tm7f5@invoke-library-by-spec) (set! tm7f7@installed-libraries (lambda tm96a (let ((tm96b (length tm96a))) (if (= tm96b '1) (apply (lambda (tm964@all?) (let tm968@f ((tm966@ls ((tm781@current-library-collection)))) (if (null? tm966@ls) '() (if (or tm964@all? (tm7bf@library-visible? (car tm966@ls))) (cons (car tm966@ls) (tm968@f (cdr tm966@ls))) (tm968@f (cdr tm966@ls)))))) tm96a) (if (= tm96b '0) (apply (lambda () (tm7f7@installed-libraries '#f)) tm96a) (error 'apply '"invalid arg count")))))) (set! tm9a6@tm7f7@installed-libraries tm7f7@installed-libraries) (set! tm7f9@library-spec (lambda (tm96c@x) (begin (if (not (tm78d@library? tm96c@x)) (assertion-violation 'library-spec '"not a library" tm96c@x) (void)) (list (tm78f@library-id tm96c@x) (tm793@library-name tm96c@x) (tm797@library-version tm96c@x))))) (set! tm9a7@tm7f9@library-spec tm7f9@library-spec) (void))
(begin (set! tm9ab@build-global-define (unspecified)) (set! tma1c@build-lambda (unspecified)) (set! tma1e@build-case-lambda (unspecified)) (set! tma4c@build-sequence (unspecified)) (set! tma4e@build-void (unspecified)) (set! tma50@build-letrec (unspecified)) (set! tma52@build-let (unspecified)) (set! tma54@build-named-let (unspecified)) (set! tma56@build-letrec* (unspecified)) (set! tma58@build-library-letrec* (unspecified)) (set! tma5a@build-receive (unspecified)) (set! tm9ab@build-global-define (lambda (tma5b@x) (tma4e@build-void))) (set! tmae9@tm9ab@build-global-define tm9ab@build-global-define) (set! tma1c@build-lambda (lambda (tma5d@ae tma5e@vars tma5f@exp) (list 'lambda tma5e@vars tma5f@exp))) (set! tmaea@tma1c@build-lambda tma1c@build-lambda) (set! tma1e@build-case-lambda (lambda (tma63@ae tma64@vars* tma65@exp*) (letrec* ((tma6a@build-error (lambda (tmaa1@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (tma6c@build-pred (lambda (tma89@ae tma8a@n tma8b@vars) (call-with-values (lambda () (let tma97@f ((tma93@vars tma8b@vars) (tma94@count '0)) (if (pair? tma93@vars) (tma97@f (cdr tma93@vars) (+ tma94@count '1)) (if (null? tma93@vars) (values tma94@count '=) (values tma94@count '>=))))) (lambda (tma99@tma90 tma9a@tma92) (let ((tma9d@pred tma9a@tma92) (tma9e@count tma99@tma90)) (list (list 'primitive tma9d@pred) tma8a@n (list 'quote tma9e@count))))))) (tma6e@build-apply (lambda (tma81@ae tma82@g tma83@vars tma84@exp) (list '(primitive apply) (tma1c@build-lambda tma81@ae tma83@vars tma84@exp) tma82@g))) (tma70@expand-case-lambda (lambda (tma71@ae tma72@vars tma73@exp*) (let ((tma77@g (gensym)) (tma78@n (gensym))) (list 'lambda tma77@g (tma52@build-let tma71@ae (list tma78@n) (list (list '(primitive length) tma77@g)) (let tma7f@f ((tma7b@vars* tma64@vars*) (tma7c@exp* tma73@exp*)) (if (null? tma7b@vars*) (tma6a@build-error tma71@ae) (list 'if (tma6c@build-pred tma71@ae tma78@n (car tma7b@vars*)) (tma6e@build-apply tma71@ae tma77@g (car tma7b@vars*) (car tma7c@exp*)) (tma7f@f (cdr tma7b@vars*) (cdr tma7c@exp*))))))))))) (if (= (length tma65@exp*) '1) (tma1c@build-lambda tma63@ae (car tma64@vars*) (car tma65@exp*)) (tma70@expand-case-lambda tma63@ae tma64@vars* tma65@exp*))))) (set! tmaeb@tma1e@build-case-lambda tma1e@build-case-lambda) (set! tma4c@build-sequence (lambda (tmaa3@ae tmaa4@exps) (let tmaa9@loop ((tmaa7@exps tmaa4@exps)) (if (null? (cdr tmaa7@exps)) (car tmaa7@exps) (if (equal? (car tmaa7@exps) (tma4e@build-void)) (tmaa9@loop (cdr tmaa7@exps)) (cons 'begin tmaa7@exps)))))) (set! tmaec@tma4c@build-sequence tma4c@build-sequence) (set! tma4e@build-void (lambda () '((primitive void)))) (set! tmaed@tma4e@build-void tma4e@build-void) (set! tma50@build-letrec (lambda (tmaab@ae tmaac@vars tmaad@val-exps tmaae@body-exp) (if (null? tmaac@vars) tmaae@body-exp (list 'letrec (map list tmaac@vars tmaad@val-exps) tmaae@body-exp)))) (set! tmaee@tma50@build-letrec tma50@build-letrec) (set! tma52@build-let (lambda (tmab3@ae tmab4@vars tmab5@val-exps tmab6@body-exp) (if (null? tmab4@vars) tmab6@body-exp (list 'let (map list tmab4@vars tmab5@val-exps) tmab6@body-exp)))) (set! tmaef@tma52@build-let tma52@build-let) (set! tma54@build-named-let (lambda (tmabb@ae tmabc@name tmabd@vars tmabe@val-exps tmabf@body-exp) (list 'let tmabc@name (map list tmabd@vars tmabe@val-exps) tmabf@body-exp))) (set! tmaf0@tma54@build-named-let tma54@build-named-let) (set! tma56@build-letrec* (lambda (tmac5@ae tmac6@vars tmac7@val-exps tmac8@body-exp) (if (null? tmac6@vars) tmac8@body-exp (list 'letrec* (map list tmac6@vars tmac7@val-exps) tmac8@body-exp)))) (set! tmaf1@tma56@build-letrec* tma56@build-letrec*) (set! tma58@build-library-letrec* (lambda (tmacd@ae tmace@name tmacf@vars tmad0@locs tmad1@val-exps tmad2@body-exp) (cons 'begin (append (map (lambda (tmad9@var) (cons 'set! (cons tmad9@var '((unspecified))))) tmacf@vars) (append (apply append (map (lambda (tmadb@var tmadc@loc tmadd@val-exp) (list (list 'set! tmadb@var tmadd@val-exp) (list 'set! tmadc@loc tmadb@var))) tmacf@vars tmad0@locs tmad1@val-exps)) (list tmad2@body-exp)))))) (set! tmaf2@tma58@build-library-letrec* tma58@build-library-letrec*) (set! tma5a@build-receive (lambda (tmae1@ae tmae2@vars tmae3@producer tmae4@body*) (begin (display '"************** in ") (cons 'receive (cons tmae2@vars (cons tmae3@producer tmae4@body*)))))) (set! tmaf3@tma5a@build-receive tma5a@build-receive) (void))
(begin (set! tmb02@file-options-macro (unspecified)) (set! tmb04@set-cons (unspecified)) (set! tmb06@set-union (unspecified)) (set! tmb0b@top-mark* (unspecified)) (set! tmb0d@top-marked? (unspecified)) (set! tmb0f@gen-lexical (unspecified)) (set! tmb11@gen-global (unspecified)) (set! tmb13@gen-label (unspecified)) (set! tmb15@gen-top-level-label (unspecified)) (set! tmb17@gen-define-label+loc (unspecified)) (set! tmb19@gen-define-label (unspecified)) (set! tmb23@rib? (unspecified)) (set! tmb25@rib-sym* (unspecified)) (set! tmb27@set-rib-sym*! (unspecified)) (set! tmb29@rib-mark** (unspecified)) (set! tmb2b@set-rib-mark**! (unspecified)) (set! tmb2d@rib-label* (unspecified)) (set! tmb2f@set-rib-label*! (unspecified)) (set! tmb31@rib-sealed/freq (unspecified)) (set! tmb33@set-rib-sealed/freq! (unspecified)) (set! tmb35@rib-cache (unspecified)) (set! tmb37@set-rib-cache! (unspecified)) (set! tmb39@dummy (unspecified)) (set! tmb3b@make-empty-rib (unspecified)) (set! tmb3d@extend-rib! (unspecified)) (set! tmb3f@extend-rib/nc! (unspecified)) (set! tmb41@make-rib-map (unspecified)) (set! tmb43@seal-rib! (unspecified)) (set! tmb45@unseal-rib! (unspecified)) (set! tmb47@make-full-rib (unspecified)) (set! tmb49@rp (unspecified)) (set! tmb53@stx? (unspecified)) (set! tmb55@stx-expr (unspecified)) (set! tmb57@set-stx-expr! (unspecified)) (set! tmb59@stx-mark* (unspecified)) (set! tmb5b@set-stx-mark*! (unspecified)) (set! tmb5d@stx-subst* (unspecified)) (set! tmb5f@set-stx-subst*! (unspecified)) (set! tmb61@stx-ae* (unspecified)) (set! tmb63@set-stx-ae*! (unspecified)) (set! tmb65@dummy (unspecified)) (set! tmb67@datum->stx (unspecified)) (set! tmb69@gen-mark (unspecified)) (set! tmb6b@anti-mark (unspecified)) (set! tmb6d@anti-mark? (unspecified)) (set! tmb6f@mkstx (unspecified)) (set! tmb71@add-subst (unspecified)) (set! tmb73@add-mark (unspecified)) (set! tmb75@syntax-kind? (unspecified)) (set! tmb77@syntax-vector->list (unspecified)) (set! tmb79@syntax-pair? (unspecified)) (set! tmb7b@syntax-vector? (unspecified)) (set! tmb7d@syntax-null? (unspecified)) (set! tmb7f@syntax-list? (unspecified)) (set! tmb81@syntax-car (unspecified)) (set! tmb83@syntax-cdr (unspecified)) (set! tmb85@syntax->list (unspecified)) (set! tmb87@id? (unspecified)) (set! tmb89@id->sym (unspecified)) (set! tmb8b@bound-id=? (unspecified)) (set! tmb8d@free-id=? (unspecified)) (set! tmb8f@valid-bound-ids? (unspecified)) (set! tmb91@distinct-bound-ids? (unspecified)) (set! tmb93@bound-id-member? (unspecified)) (set! tmb95@self-evaluating? (unspecified)) (set! tmb97@strip-annotations (unspecified)) (set! tmb99@strip (unspecified)) (set! tmb9b@stx->datum (unspecified)) (set! tmb9d@id->label (unspecified)) (set! tmb9f@label->binding (unspecified)) (set! tmba1@make-binding (unspecified)) (set! tmba3@binding-type (unspecified)) (set! tmba5@binding-value (unspecified)) (set! tmba7@raise-unbound-error (unspecified)) (set! tmba9@syntax-type (unspecified)) (set! tmbb7@sanitize-binding (unspecified)) (set! tmbb9@make-variable-transformer (unspecified)) (set! tmbbb@variable-transformer? (unspecified)) (set! tmbbd@variable-transformer-procedure (unspecified)) (set! tmbbf@make-eval-transformer (unspecified)) (set! tmd10@parse-define (unspecified)) (set! tmd12@parse-define-syntax (unspecified)) (set! tmd14@scheme-stx-hashtable (unspecified)) (set! tmd16@scheme-stx (unspecified)) (set! tmd18@lexical-var (unspecified)) (set! tmd1a@lexical-mutable? (unspecified)) (set! tmd1c@set-lexical-mutable! (unspecified)) (set! tmd1e@add-lexical (unspecified)) (set! tmd20@add-lexicals (unspecified)) (set! tmd22@letrec-helper (unspecified)) (set! tmd24@let-transformer (unspecified)) (set! tmd26@letrec-transformer (unspecified)) (set! tmd28@letrec*-transformer (unspecified)) (set! tmd2a@fluid-let-syntax-transformer (unspecified)) (set! tmd2c@type-descriptor-transformer (unspecified)) (set! tmd2e@record-type-descriptor-transformer (unspecified)) (set! tmd30@record-constructor-descriptor-transformer (unspecified)) (set! tmd32@when-macro (unspecified)) (set! tmd34@unless-macro (unspecified)) (set! tmd36@if-transformer (unspecified)) (set! tmd38@and-transformer (unspecified)) (set! tmd3a@or-transformer (unspecified)) (set! tmd3c@case-macro (unspecified)) (set! tmd3e@quote-transformer (unspecified)) (set! tmd40@case-lambda-transformer (unspecified)) (set! tmd42@lambda-transformer (unspecified)) (set! tmd44@bless (unspecified)) (set! tmd46@with-syntax-macro (unspecified)) (set! tmd48@invalid-fmls-error (unspecified)) (set! tmd4a@let-macro (unspecified)) (set! tmd4c@let-values-macro (unspecified)) (set! tmd4e@let*-values-macro (unspecified)) (set! tmd50@trace-lambda-macro (unspecified)) (set! tmd52@trace-define-macro (unspecified)) (set! tmd54@trace-define-syntax-macro (unspecified)) (set! tmd56@trace-let/rec-syntax (unspecified)) (set! tmd58@trace-let-syntax-macro (unspecified)) (set! tmd5a@trace-letrec-syntax-macro (unspecified)) (set! tmd5c@guard-macro (unspecified)) (set! tmd5e@define-enumeration-macro (unspecified)) (set! tmd60@time-macro (unspecified)) (set! tmd62@delay-macro (unspecified)) (set! tmd64@assert-macro (unspecified)) (set! tmd66@endianness-macro (unspecified)) (set! tmd68@identifier-syntax-macro (unspecified)) (set! tmd6a@do-macro (unspecified)) (set! tmd6c@let*-macro (unspecified)) (set! tmd6e@or-macro (unspecified)) (set! tmd70@and-macro (unspecified)) (set! tmd72@cond-macro (unspecified)) (set! tmd74@do-include (unspecified)) (set! tmd76@include-macro (unspecified)) (set! tmd78@include-into-macro (unspecified)) (set! tmd7a@syntax-rules-macro (unspecified)) (set! tmd7c@quasiquote-macro (unspecified)) (set! tmd7e@quasisyntax-macro (unspecified)) (set! tmd80@define-struct-macro (unspecified)) (set! tmd82@define-record-type-macro (unspecified)) (set! tmd84@define-condition-type-macro (unspecified)) (set! tmd86@incorrect-usage-macro (unspecified)) (set! tmd88@parameterize-macro (unspecified)) (set! tmd8a@foreign-call-transformer (unspecified)) (set! tmd8c@convert-pattern (unspecified)) (set! tmd8e@syntax-dispatch (unspecified)) (set! tmd90@ellipsis? (unspecified)) (set! tmd92@underscore? (unspecified)) (set! tmd94@verify-literals (unspecified)) (set! tmd96@syntax-case-transformer (unspecified)) (set! tmd98@ellipsis-map (unspecified)) (set! tmd9a@syntax-transformer (unspecified)) (set! tmd9c@core-macro-transformer (unspecified)) (set! tmd9e@symbol-macro (unspecified)) (set! tmda0@macro-transformer (unspecified)) (set! tmda2@local-macro-transformer (unspecified)) (set! tmda4@do-macro-call (unspecified)) (set! tmda6@chi-macro (unspecified)) (set! tmda8@chi-local-macro (unspecified)) (set! tmdaa@chi-global-macro (unspecified)) (set! tmdac@chi-expr* (unspecified)) (set! tmdae@chi-application (unspecified)) (set! tmdb0@chi-expr (unspecified)) (set! tmdb2@chi-set! (unspecified)) (set! tmdb4@verify-formals (unspecified)) (set! tmdb6@chi-lambda-clause (unspecified)) (set! tmdb8@chi-lambda-clause* (unspecified)) (set! tmdba@chi-defun (unspecified)) (set! tmdbc@chi-rhs (unspecified)) (set! tmdbe@expand-interaction-rhs*/init* (unspecified)) (set! tmdc0@chi-rhs* (unspecified)) (set! tmdc2@find-bound=? (unspecified)) (set! tmdc4@find-dups (unspecified)) (set! tmdc6@chi-internal (unspecified)) (set! tmdc8@parse-module (unspecified)) (set! tmdd2@module-interface? (unspecified)) (set! tmdd4@module-interface-first-mark (unspecified)) (set! tmdd6@set-module-interface-first-mark! (unspecified)) (set! tmdd8@module-interface-exp-id-vec (unspecified)) (set! tmdda@set-module-interface-exp-id-vec! (unspecified)) (set! tmddc@module-interface-exp-lab-vec (unspecified)) (set! tmdde@set-module-interface-exp-lab-vec! (unspecified)) (set! tmde0@dummy (unspecified)) (set! tmde2@module-interface-exp-id* (unspecified)) (set! tmde4@chi-internal-module (unspecified)) (set! tmde6@chi-body* (unspecified)) (set! tmde8@expand-transformer (unspecified)) (set! tmdea@parse-exports (unspecified)) (set! tmdec@parse-library-name (unspecified)) (set! tmdee@parse-library (unspecified)) (set! tmdf0@parse-import-spec* (unspecified)) (set! tmdf2@make-top-rib (unspecified)) (set! tmdf4@make-collector (unspecified)) (set! tmdf6@inv-collector (unspecified)) (set! tmdf8@vis-collector (unspecified)) (set! tmdfa@imp-collector (unspecified)) (set! tmdfc@chi-library-internal (unspecified)) (set! tmdfe@chi-interaction-expr (unspecified)) (set! tme00@library-body-expander (unspecified)) (set! tme02@core-library-expander (unspecified)) (set! tme04@parse-top-level-program (unspecified)) (set! tme06@top-level-expander (unspecified)) (set! tme08@rp (unspecified)) (set! tme12@env? (unspecified)) (set! tme14@env-names (unspecified)) (set! tme16@set-env-names! (unspecified)) (set! tme18@env-labels (unspecified)) (set! tme1a@set-env-labels! (unspecified)) (set! tme1c@env-itc (unspecified)) (set! tme1e@set-env-itc! (unspecified)) (set! tme20@dummy (unspecified)) (set! tme22@rp (unspecified)) (set! tme2c@interaction-env? (unspecified)) (set! tme2e@interaction-env-rib (unspecified)) (set! tme30@set-interaction-env-rib! (unspecified)) (set! tme32@interaction-env-r (unspecified)) (set! tme34@set-interaction-env-r! (unspecified)) (set! tme36@interaction-env-locs (unspecified)) (set! tme38@set-interaction-env-locs! (unspecified)) (set! tme3a@dummy (unspecified)) (set! tme3c@interaction-environment-symbols (unspecified)) (set! tme3e@environment-bindings (unspecified)) (set! tme40@parse-binding (unspecified)) (set! tme42@environment? (unspecified)) (set! tme44@environment-symbols (unspecified)) (set! tme46@environment (unspecified)) (set! tme48@null-environment (unspecified)) (set! tme4a@scheme-report-environment (unspecified)) (set! tme4c@expand (unspecified)) (set! tme4e@eval (unspecified)) (set! tme50@library-expander (unspecified)) (set! tme52@boot-library-expand (unspecified)) (set! tme54@rev-map-append (unspecified)) (set! tme56@build-exports (unspecified)) (set! tme58@make-export-subst (unspecified)) (set! tme5a@make-export-env/macros (unspecified)) (set! tme5c@generate-temporaries (unspecified)) (set! tme5e@free-identifier=? (unspecified)) (set! tme60@bound-identifier=? (unspecified)) (set! tme62@make-source-condition (unspecified)) (set! tme64@extract-position-condition (unspecified)) (set! tme66@expression-position (unspecified)) (set! tme68@assertion-error (unspecified)) (set! tme6a@syntax-error (unspecified)) (set! tme6c@syntax-violation* (unspecified)) (set! tme6e@syntax-violation (unspecified)) (set! tme70@identifier? (unspecified)) (set! tme72@datum->syntax (unspecified)) (set! tme74@syntax->datum (unspecified)) (set! tme76@ungensym-all (unspecified)) (set! tme78@compile-r6rs-top-level (unspecified)) (set! tme7a@pre-compile-r6rs-top-level (unspecified)) (set! tme7c@interaction-environment (unspecified)) (set! tme7e@top-level-context (unspecified)) (set! tmb02@file-options-macro (lambda (tme7f@x) (letrec* ((tme82@valid-option? (lambda (tme8b@x) (and (tmb87@id? tme8b@x) (memq (tmb89@id->sym tme8b@x) '(no-fail no-create no-truncate)))))) (let ((tme83@t tme7f@x)) (let ((tme85@ls/false (tmd8e@syntax-dispatch tme83@t '(_ . each-any)))) (if (and tme85@ls/false (apply (lambda (tme87@opt*) (for-all tme82@valid-option? tme87@opt*)) tme85@ls/false)) (apply (lambda (tme89@opt*) (tmd44@bless (list 'make-file-options (list 'quote tme89@opt*)))) tme85@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tme83@t))))))) (set! tm280b@tmb02@file-options-macro tmb02@file-options-macro) (set! tmb04@set-cons (lambda (tme8d@x tme8e@ls) (if (memq tme8d@x tme8e@ls) tme8e@ls (cons tme8d@x tme8e@ls)))) (set! tm280c@tmb04@set-cons tmb04@set-cons) (set! tmb06@set-union (lambda (tme91@ls1 tme92@ls2) (if (null? tme91@ls1) tme92@ls2 (if (memq (car tme91@ls1) tme92@ls2) (tmb06@set-union (cdr tme91@ls1) tme92@ls2) (cons (car tme91@ls1) (tmb06@set-union (cdr tme91@ls1) tme92@ls2)))))) (set! tm280d@tmb06@set-union tmb06@set-union) (set! tmb0b@top-mark* '(top)) (set! tm280e@tmb0b@top-mark* tmb0b@top-mark*) (set! tmb0d@top-marked? (lambda (tme95@m*) (memq 'top tme95@m*))) (set! tm280f@tmb0d@top-marked? tmb0d@top-marked?) (set! tmb0f@gen-lexical (lambda (tme97@sym) (if (symbol? tme97@sym) (gensym tme97@sym) (if (tmb53@stx? tme97@sym) (tmb0f@gen-lexical (tmb89@id->sym tme97@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" tme97@sym))))) (set! tm2810@tmb0f@gen-lexical tmb0f@gen-lexical) (set! tmb11@gen-global (lambda (tme99@x) (tmb0f@gen-lexical tme99@x))) (set! tm2811@tmb11@gen-global tmb11@gen-global) (set! tmb13@gen-label (lambda (tme9b@_) (gensym))) (set! tm2812@tmb13@gen-label tmb13@gen-label) (set! tmb15@gen-top-level-label (lambda (tme9d@id tme9e@rib) (letrec* ((tmea2@find (lambda (tmead@sym tmeae@mark* tmeaf@sym* tmeb0@mark** tmeb1@label*) (and (pair? tmeaf@sym*) (if (and (eq? tmead@sym (car tmeaf@sym*)) (same-marks? tmeae@mark* (car tmeb0@mark**))) (car tmeb1@label*) (tmea2@find tmead@sym tmeae@mark* (cdr tmeaf@sym*) (cdr tmeb0@mark**) (cdr tmeb1@label*))))))) (let ((tmea3@sym (tmb89@id->sym tme9d@id)) (tmea4@mark* (tmb59@stx-mark* tme9d@id))) (let ((tmea7@sym* (tmb25@rib-sym* tme9e@rib))) (let ((tmea9@t (and (memq tmea3@sym (tmb25@rib-sym* tme9e@rib)) (tmea2@find tmea3@sym tmea4@mark* tmea7@sym* (tmb29@rib-mark** tme9e@rib) (tmb2d@rib-label* tme9e@rib))))) (if tmea9@t ((lambda (tmeab@label) (if (tm9a2@tm7ef@imported-label->binding tmeab@label) (gensym) tmeab@label)) tmea9@t) (gensym)))))))) (set! tm2813@tmb15@gen-top-level-label tmb15@gen-top-level-label) (set! tmb17@gen-define-label+loc (lambda (tmeb7@id tmeb8@rib) (let ((tmebb@t (tme7e@top-level-context))) (if tmebb@t ((lambda (tmebd@env) (let ((tmebf@label (tmb15@gen-top-level-label tmeb7@id tmeb8@rib)) (tmec0@locs (tme36@interaction-env-locs tmebd@env))) (values tmebf@label (let ((tmec3@t (assq tmebf@label tmec0@locs))) (if tmec3@t (cdr tmec3@t) (let ((tmec5@loc (tmb0f@gen-lexical tmeb7@id))) (begin (tme38@set-interaction-env-locs! tmebd@env (cons (cons tmebf@label tmec5@loc) tmec0@locs)) tmec5@loc))))))) tmebb@t) (values (gensym) (tmb0f@gen-lexical tmeb7@id)))))) (set! tm2814@tmb17@gen-define-label+loc tmb17@gen-define-label+loc) (set! tmb19@gen-define-label (lambda (tmec7@id tmec8@rib) (if (tme7e@top-level-context) (tmb15@gen-top-level-label tmec7@id tmec8@rib) (gensym)))) (set! tm2815@tmb19@gen-define-label tmb19@gen-define-label) (set! tmb23@rib? (lambda (tmecb@x) (and (simple-struct? tmecb@x) (eq? (simple-struct-name tmecb@x) 'rib)))) (set! tm2816@tmb23@rib? tmb23@rib?) (set! tmb25@rib-sym* (lambda (tmecd@x) (simple-struct-ref tmecd@x '0))) (set! tm2817@tmb25@rib-sym* tmb25@rib-sym*) (set! tmb27@set-rib-sym*! (lambda (tmecf@x tmed0@val) (simple-struct-set! tmecf@x '0 tmed0@val))) (set! tm2818@tmb27@set-rib-sym*! tmb27@set-rib-sym*!) (set! tmb29@rib-mark** (lambda (tmed3@x) (simple-struct-ref tmed3@x '1))) (set! tm2819@tmb29@rib-mark** tmb29@rib-mark**) (set! tmb2b@set-rib-mark**! (lambda (tmed5@x tmed6@val) (simple-struct-set! tmed5@x '1 tmed6@val))) (set! tm281a@tmb2b@set-rib-mark**! tmb2b@set-rib-mark**!) (set! tmb2d@rib-label* (lambda (tmed9@x) (simple-struct-ref tmed9@x '2))) (set! tm281b@tmb2d@rib-label* tmb2d@rib-label*) (set! tmb2f@set-rib-label*! (lambda (tmedb@x tmedc@val) (simple-struct-set! tmedb@x '2 tmedc@val))) (set! tm281c@tmb2f@set-rib-label*! tmb2f@set-rib-label*!) (set! tmb31@rib-sealed/freq (lambda (tmedf@x) (simple-struct-ref tmedf@x '3))) (set! tm281d@tmb31@rib-sealed/freq tmb31@rib-sealed/freq) (set! tmb33@set-rib-sealed/freq! (lambda (tmee1@x tmee2@val) (simple-struct-set! tmee1@x '3 tmee2@val))) (set! tm281e@tmb33@set-rib-sealed/freq! tmb33@set-rib-sealed/freq!) (set! tmb35@rib-cache (lambda (tmee5@x) (simple-struct-ref tmee5@x '4))) (set! tm281f@tmb35@rib-cache tmb35@rib-cache) (set! tmb37@set-rib-cache! (lambda (tmee7@x tmee8@val) (simple-struct-set! tmee7@x '4 tmee8@val))) (set! tm2820@tmb37@set-rib-cache! tmb37@set-rib-cache!) (set! tmb39@dummy '3) (set! tm2821@tmb39@dummy tmb39@dummy) (set! tmb3b@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! tm2822@tmb3b@make-empty-rib tmb3b@make-empty-rib) (set! tmb3d@extend-rib! (lambda (tmeeb@rib tmeec@id tmeed@label) (letrec* ((tmef2@find (lambda (tmeff@sym tmf00@mark* tmf01@sym* tmf02@mark** tmf03@label*) (and (pair? tmf01@sym*) (if (and (eq? tmeff@sym (car tmf01@sym*)) (same-marks? tmf00@mark* (car tmf02@mark**))) tmf03@label* (tmef2@find tmeff@sym tmf00@mark* (cdr tmf01@sym*) (cdr tmf02@mark**) (cdr tmf03@label*))))))) (begin (if (tmb31@rib-sealed/freq tmeeb@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" tmeeb@rib) (void)) (let ((tmef3@sym (tmb89@id->sym tmeec@id)) (tmef4@mark* (tmb59@stx-mark* tmeec@id))) (let ((tmef7@sym* (tmb25@rib-sym* tmeeb@rib))) (let ((tmef9@t (and (memq tmef3@sym (tmb25@rib-sym* tmeeb@rib)) (tmef2@find tmef3@sym tmef4@mark* tmef7@sym* (tmb29@rib-mark** tmeeb@rib) (tmb2d@rib-label* tmeeb@rib))))) (if tmef9@t ((lambda (tmefb@p) (if (not (eq? tmeed@label (car tmefb@p))) (if (tme7e@top-level-context) (set-car! tmefb@p tmeed@label) (tme6e@syntax-violation '#f '"multiple definitions of identifier" tmeec@id)) (void))) tmef9@t) (begin (if (tmb35@rib-cache tmeeb@rib) (hashtable-update! (tmb35@rib-cache tmeeb@rib) tmef3@sym (lambda (tmefd@e) (cons (cons tmef4@mark* tmeed@label) tmefd@e)) '()) (void)) (tmb27@set-rib-sym*! tmeeb@rib (cons tmef3@sym tmef7@sym*)) (tmb2b@set-rib-mark**! tmeeb@rib (cons tmef4@mark* (tmb29@rib-mark** tmeeb@rib))) (tmb2f@set-rib-label*! tmeeb@rib (cons tmeed@label (tmb2d@rib-label* tmeeb@rib)))))))))))) (set! tm2823@tmb3d@extend-rib! tmb3d@extend-rib!) (set! tmb3f@extend-rib/nc! (lambda (tmf09@rib tmf0a@id tmf0b@label) (let ((tmf0f@sym (tmb89@id->sym tmf0a@id)) (tmf10@mark* (tmb59@stx-mark* tmf0a@id))) (let ((tmf13@sym* (tmb25@rib-sym* tmf09@rib))) (begin (if (tmb35@rib-cache tmf09@rib) (hashtable-update! (tmb35@rib-cache tmf09@rib) tmf0f@sym (lambda (tmf15@e) (cons (cons tmf10@mark* tmf0b@label) tmf15@e)) '()) (void)) (tmb27@set-rib-sym*! tmf09@rib (cons tmf0f@sym tmf13@sym*)) (tmb2b@set-rib-mark**! tmf09@rib (cons tmf10@mark* (tmb29@rib-mark** tmf09@rib))) (tmb2f@set-rib-label*! tmf09@rib (cons tmf0b@label (tmb2d@rib-label* tmf09@rib)))))))) (set! tm2824@tmb3f@extend-rib/nc! tmb3f@extend-rib/nc!) (set! tmb41@make-rib-map (lambda (tmf17@sym*) (let ((tmf19@ht (make-eq-hashtable))) (let tmf1f@f ((tmf1b@i '0) (tmf1c@sym* tmf17@sym*)) (if (null? tmf1c@sym*) tmf19@ht (begin (hashtable-update! tmf19@ht (car tmf1c@sym*) (lambda (tmf21@x) (cons tmf1b@i tmf21@x)) '()) (tmf1f@f (+ tmf1b@i '1) (cdr tmf1c@sym*)))))))) (set! tm2825@tmb41@make-rib-map tmb41@make-rib-map) (set! tmb43@seal-rib! (lambda (tmf23@rib) (let ((tmf25@sym* (tmb25@rib-sym* tmf23@rib))) (if (not (null? tmf25@sym*)) (begin (tmb27@set-rib-sym*! tmf23@rib (list->vector tmf25@sym*)) (tmb2b@set-rib-mark**! tmf23@rib (list->vector (tmb29@rib-mark** tmf23@rib))) (tmb2f@set-rib-label*! tmf23@rib (list->vector (tmb2d@rib-label* tmf23@rib))) (tmb33@set-rib-sealed/freq! tmf23@rib (tmb41@make-rib-map tmf25@sym*))) (void))))) (set! tm2826@tmb43@seal-rib! tmb43@seal-rib!) (set! tmb45@unseal-rib! (lambda (tmf27@rib) (if (tmb31@rib-sealed/freq tmf27@rib) (begin (tmb33@set-rib-sealed/freq! tmf27@rib '#f) (tmb27@set-rib-sym*! tmf27@rib (vector->list (tmb25@rib-sym* tmf27@rib))) (tmb2b@set-rib-mark**! tmf27@rib (vector->list (tmb29@rib-mark** tmf27@rib))) (tmb2f@set-rib-label*! tmf27@rib (vector->list (tmb2d@rib-label* tmf27@rib)))) (void)))) (set! tm2827@tmb45@unseal-rib! tmb45@unseal-rib!) (set! tmb47@make-full-rib (lambda (tmf29@id* tmf2a@label*) (let ((tmf2d@r (make-simple-struct 'rib '6 (list (map tmb89@id->sym tmf29@id*) (map tmb59@stx-mark* tmf29@id*) tmf2a@label* '#f '#f)))) (begin (tmb43@seal-rib! tmf2d@r) tmf2d@r)))) (set! tm2828@tmb47@make-full-rib tmb47@make-full-rib) (set! tmb49@rp (tm6d4@tm5af@make-record-printer 'stx (lambda (tmf2f@x tmf30@p tmf31@wr) (begin (display '"#<syntax " tmf30@p) (write (tmb9b@stx->datum tmf2f@x) tmf30@p) (let ((tmf35@expr (tmb55@stx-expr tmf2f@x))) (if (tm6cb@tm59d@annotation? tmf35@expr) (let ((tmf37@src (tm6cc@tm59f@annotation-source tmf35@expr))) (if (pair? tmf37@src) (begin (display '" [" tmf30@p) (display (cdr tmf37@src) tmf30@p) (display '" of " tmf30@p) (display (car tmf37@src) tmf30@p) (display '"]" tmf30@p)) (void))) (void))) (display '">" tmf30@p))))) (set! tm2829@tmb49@rp tmb49@rp) (set! tmb53@stx? (lambda (tmf39@x) (and (simple-struct? tmf39@x) (eq? (simple-struct-name tmf39@x) 'stx)))) (set! tm282a@tmb53@stx? tmb53@stx?) (set! tmb55@stx-expr (lambda (tmf3b@x) (simple-struct-ref tmf3b@x '0))) (set! tm282b@tmb55@stx-expr tmb55@stx-expr) (set! tmb57@set-stx-expr! (lambda (tmf3d@x tmf3e@val) (simple-struct-set! tmf3d@x '0 tmf3e@val))) (set! tm282c@tmb57@set-stx-expr! tmb57@set-stx-expr!) (set! tmb59@stx-mark* (lambda (tmf41@x) (simple-struct-ref tmf41@x '1))) (set! tm282d@tmb59@stx-mark* tmb59@stx-mark*) (set! tmb5b@set-stx-mark*! (lambda (tmf43@x tmf44@val) (simple-struct-set! tmf43@x '1 tmf44@val))) (set! tm282e@tmb5b@set-stx-mark*! tmb5b@set-stx-mark*!) (set! tmb5d@stx-subst* (lambda (tmf47@x) (simple-struct-ref tmf47@x '2))) (set! tm282f@tmb5d@stx-subst* tmb5d@stx-subst*) (set! tmb5f@set-stx-subst*! (lambda (tmf49@x tmf4a@val) (simple-struct-set! tmf49@x '2 tmf4a@val))) (set! tm2830@tmb5f@set-stx-subst*! tmb5f@set-stx-subst*!) (set! tmb61@stx-ae* (lambda (tmf4d@x) (simple-struct-ref tmf4d@x '3))) (set! tm2831@tmb61@stx-ae* tmb61@stx-ae*) (set! tmb63@set-stx-ae*! (lambda (tmf4f@x tmf50@val) (simple-struct-set! tmf4f@x '3 tmf50@val))) (set! tm2832@tmb63@set-stx-ae*! tmb63@set-stx-ae*!) (set! tmb65@dummy '3) (set! tm2833@tmb65@dummy tmb65@dummy) (set! tmb67@datum->stx (lambda (tmf53@id tmf54@datum) (make-simple-struct 'stx '5 (list tmf54@datum (tmb59@stx-mark* tmf53@id) (tmb5d@stx-subst* tmf53@id) (tmb61@stx-ae* tmf53@id))))) (set! tm2834@tmb67@datum->stx tmb67@datum->stx) (set! tmb69@gen-mark (lambda () (string '#\m))) (set! tm2835@tmb69@gen-mark tmb69@gen-mark) (set! tmb6b@anti-mark '#f) (set! tm2836@tmb6b@anti-mark tmb6b@anti-mark) (set! tmb6d@anti-mark? not) (set! tm2837@tmb6d@anti-mark? tmb6d@anti-mark?) (set! tmb6f@mkstx (lambda (tmf57@e tmf58@m* tmf59@s* tmf5a@ae*) (if (and (tmb53@stx? tmf57@e) (not (tmb0d@top-marked? tmf58@m*))) (call-with-values (lambda () (join-wraps tmf58@m* tmf59@s* tmf5a@ae* tmf57@e)) (lambda (tmf65@tmf60 tmf66@tmf62 tmf67@tmf64) (let ((tmf6b@ae* tmf67@tmf64) (tmf6c@s* tmf66@tmf62) (tmf6d@m* tmf65@tmf60)) (make-simple-struct 'stx '5 (list (tmb55@stx-expr tmf57@e) tmf6d@m* tmf6c@s* tmf6b@ae*))))) (make-simple-struct 'stx '5 (list tmf57@e tmf58@m* tmf59@s* tmf5a@ae*))))) (set! tm2838@tmb6f@mkstx tmb6f@mkstx) (set! tmb71@add-subst (lambda (tmf71@subst tmf72@e) (tmb6f@mkstx tmf72@e '() (list tmf71@subst) '()))) (set! tm2839@tmb71@add-subst tmb71@add-subst) (set! tmb73@add-mark (lambda (tmf75@mark tmf76@subst tmf77@expr tmf78@ae) (letrec* ((tmf7e@merge-ae* (lambda (tmfa5@ls1 tmfa6@ls2) (if (and (pair? tmfa5@ls1) (pair? tmfa6@ls2) (not (car tmfa6@ls2))) (tmf80@cancel tmfa5@ls1 tmfa6@ls2) (append tmfa5@ls1 tmfa6@ls2)))) (tmf80@cancel (lambda (tmf9b@ls1 tmf9c@ls2) (let tmfa3@f ((tmf9f@x (car tmf9b@ls1)) (tmfa0@ls1 (cdr tmf9b@ls1))) (if (null? tmfa0@ls1) (cdr tmf9c@ls2) (cons tmf9f@x (tmfa3@f (car tmfa0@ls1) (cdr tmfa0@ls1))))))) (tmf82@f (lambda (tmf83@e tmf84@m tmf85@s1* tmf86@ae*) (if (pair? tmf83@e) (let ((tmf8b@a (tmf82@f (car tmf83@e) tmf84@m tmf85@s1* tmf86@ae*)) (tmf8c@d (tmf82@f (cdr tmf83@e) tmf84@m tmf85@s1* tmf86@ae*))) (if (eq? tmf8b@a tmf8c@d) tmf83@e (cons tmf8b@a tmf8c@d))) (if (vector? tmf83@e) (let ((tmf8f@ls1 (vector->list tmf83@e))) (let ((tmf91@ls2 (map (lambda (tmf93@x) (tmf82@f tmf93@x tmf84@m tmf85@s1* tmf86@ae*)) tmf8f@ls1))) (if (for-all eq? tmf8f@ls1 tmf91@ls2) tmf83@e (list->vector tmf91@ls2)))) (if (tmb53@stx? tmf83@e) (let ((tmf95@m* (tmb59@stx-mark* tmf83@e)) (tmf96@s2* (tmb5d@stx-subst* tmf83@e))) (if (null? tmf95@m*) (tmf82@f (tmb55@stx-expr tmf83@e) tmf84@m (append tmf85@s1* tmf96@s2*) (tmf7e@merge-ae* tmf86@ae* (tmb61@stx-ae* tmf83@e))) (if (eq? (car tmf95@m*) tmb6b@anti-mark) (make-simple-struct 'stx '5 (list (tmb55@stx-expr tmf83@e) (cdr tmf95@m*) (cdr (append tmf85@s1* tmf96@s2*)) (tmf7e@merge-ae* tmf86@ae* (tmb61@stx-ae* tmf83@e)))) (make-simple-struct 'stx '5 (list (tmb55@stx-expr tmf83@e) (cons tmf84@m tmf95@m*) (let ((tmf99@s* (cons 'shift (append tmf85@s1* tmf96@s2*)))) (if tmf76@subst (cons tmf76@subst tmf99@s*) tmf99@s*)) (tmf7e@merge-ae* tmf86@ae* (tmb61@stx-ae* tmf83@e))))))) (if (symbol? tmf83@e) (tme6e@syntax-violation '#f '"raw symbol encountered in output of macro" tmf77@expr tmf83@e) (make-simple-struct 'stx '5 (list tmf83@e (list tmf84@m) tmf85@s1* tmf86@ae*))))))))) (tmb6f@mkstx (tmf82@f tmf77@expr tmf75@mark '() '()) '() '() (list tmf78@ae))))) (set! tm283a@tmb73@add-mark tmb73@add-mark) (set! tmb75@syntax-kind? (lambda (tmfa9@x tmfaa@p?) (if (tmb53@stx? tmfa9@x) (tmb75@syntax-kind? (tmb55@stx-expr tmfa9@x) tmfaa@p?) (if (tm6cb@tm59d@annotation? tmfa9@x) (tmb75@syntax-kind? (tm6cd@tm5a1@annotation-expression tmfa9@x) tmfaa@p?) (tmfaa@p? tmfa9@x))))) (set! tm283b@tmb75@syntax-kind? tmb75@syntax-kind?) (set! tmb77@syntax-vector->list (lambda (tmfad@x) (if (tmb53@stx? tmfad@x) (let ((tmfaf@ls (tmb77@syntax-vector->list (tmb55@stx-expr tmfad@x))) (tmfb0@m* (tmb59@stx-mark* tmfad@x)) (tmfb1@s* (tmb5d@stx-subst* tmfad@x)) (tmfb2@ae* (tmb61@stx-ae* tmfad@x))) (map (lambda (tmfb7@x) (tmb6f@mkstx tmfb7@x tmfb0@m* tmfb1@s* tmfb2@ae*)) tmfaf@ls)) (if (tm6cb@tm59d@annotation? tmfad@x) (tmb77@syntax-vector->list (tm6cd@tm5a1@annotation-expression tmfad@x)) (if (vector? tmfad@x) (vector->list tmfad@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" tmfad@x)))))) (set! tm283c@tmb77@syntax-vector->list tmb77@syntax-vector->list) (set! tmb79@syntax-pair? (lambda (tmfb9@x) (tmb75@syntax-kind? tmfb9@x pair?))) (set! tm283d@tmb79@syntax-pair? tmb79@syntax-pair?) (set! tmb7b@syntax-vector? (lambda (tmfbb@x) (tmb75@syntax-kind? tmfbb@x vector?))) (set! tm283e@tmb7b@syntax-vector? tmb7b@syntax-vector?) (set! tmb7d@syntax-null? (lambda (tmfbd@x) (tmb75@syntax-kind? tmfbd@x null?))) (set! tm283f@tmb7d@syntax-null? tmb7d@syntax-null?) (set! tmb7f@syntax-list? (lambda (tmfbf@x) (or (tmb7d@syntax-null? tmfbf@x) (and (tmb79@syntax-pair? tmfbf@x) (tmb7f@syntax-list? (tmb83@syntax-cdr tmfbf@x)))))) (set! tm2840@tmb7f@syntax-list? tmb7f@syntax-list?) (set! tmb81@syntax-car (lambda (tmfc1@x) (if (tmb53@stx? tmfc1@x) (tmb6f@mkstx (tmb81@syntax-car (tmb55@stx-expr tmfc1@x)) (tmb59@stx-mark* tmfc1@x) (tmb5d@stx-subst* tmfc1@x) (tmb61@stx-ae* tmfc1@x)) (if (tm6cb@tm59d@annotation? tmfc1@x) (tmb81@syntax-car (tm6cd@tm5a1@annotation-expression tmfc1@x)) (if (pair? tmfc1@x) (car tmfc1@x) (assertion-violation 'syntax-car '"BUG: not a pair" tmfc1@x)))))) (set! tm2841@tmb81@syntax-car tmb81@syntax-car) (set! tmb83@syntax-cdr (lambda (tmfc3@x) (if (tmb53@stx? tmfc3@x) (tmb6f@mkstx (tmb83@syntax-cdr (tmb55@stx-expr tmfc3@x)) (tmb59@stx-mark* tmfc3@x) (tmb5d@stx-subst* tmfc3@x) (tmb61@stx-ae* tmfc3@x)) (if (tm6cb@tm59d@annotation? tmfc3@x) (tmb83@syntax-cdr (tm6cd@tm5a1@annotation-expression tmfc3@x)) (if (pair? tmfc3@x) (cdr tmfc3@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" tmfc3@x)))))) (set! tm2842@tmb83@syntax-cdr tmb83@syntax-cdr) (set! tmb85@syntax->list (lambda (tmfc5@x) (if (tmb79@syntax-pair? tmfc5@x) (cons (tmb81@syntax-car tmfc5@x) (tmb85@syntax->list (tmb83@syntax-cdr tmfc5@x))) (if (tmb7d@syntax-null? tmfc5@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" tmfc5@x))))) (set! tm2843@tmb85@syntax->list tmb85@syntax->list) (set! tmb87@id? (lambda (tmfc7@x) (and (tmb53@stx? tmfc7@x) (symbol? (tmb55@stx-expr tmfc7@x))))) (set! tm2844@tmb87@id? tmb87@id?) (set! tmb89@id->sym (lambda (tmfc9@x) (tmb55@stx-expr tmfc9@x))) (set! tm2845@tmb89@id->sym tmb89@id->sym) (set! tmb8b@bound-id=? (lambda (tmfcb@x tmfcc@y) (and (eq? (tmb89@id->sym tmfcb@x) (tmb89@id->sym tmfcc@y)) (same-marks? (tmb59@stx-mark* tmfcb@x) (tmb59@stx-mark* tmfcc@y))))) (set! tm2846@tmb8b@bound-id=? tmb8b@bound-id=?) (set! tmb8d@free-id=? (lambda (tmfcf@i tmfd0@j) (let ((tmfd3@t0 (id->real-label tmfcf@i)) (tmfd4@t1 (id->real-label tmfd0@j))) (if (or tmfd3@t0 tmfd4@t1) (eq? tmfd3@t0 tmfd4@t1) (eq? (tmb89@id->sym tmfcf@i) (tmb89@id->sym tmfd0@j)))))) (set! tm2847@tmb8d@free-id=? tmb8d@free-id=?) (set! tmb8f@valid-bound-ids? (lambda (tmfd7@id*) (and (for-all tmb87@id? tmfd7@id*) (tmb91@distinct-bound-ids? tmfd7@id*)))) (set! tm2848@tmb8f@valid-bound-ids? tmb8f@valid-bound-ids?) (set! tmb91@distinct-bound-ids? (lambda (tmfd9@id*) (or (null? tmfd9@id*) (and (not (tmb93@bound-id-member? (car tmfd9@id*) (cdr tmfd9@id*))) (tmb91@distinct-bound-ids? (cdr tmfd9@id*)))))) (set! tm2849@tmb91@distinct-bound-ids? tmb91@distinct-bound-ids?) (set! tmb93@bound-id-member? (lambda (tmfdb@id tmfdc@id*) (and (pair? tmfdc@id*) (or (tmb8b@bound-id=? tmfdb@id (car tmfdc@id*)) (tmb93@bound-id-member? tmfdb@id (cdr tmfdc@id*)))))) (set! tm284a@tmb93@bound-id-member? tmb93@bound-id-member?) (set! tmb95@self-evaluating? (lambda (tmfdf@x) (or (number? tmfdf@x) (string? tmfdf@x) (char? tmfdf@x) (boolean? tmfdf@x) (regexp? tmfdf@x) (bytevector? tmfdf@x)))) (set! tm284b@tmb95@self-evaluating? tmb95@self-evaluating?) (set! tmb97@strip-annotations (lambda (tmfe1@x) (if (pair? tmfe1@x) (cons (tmb97@strip-annotations (car tmfe1@x)) (tmb97@strip-annotations (cdr tmfe1@x))) (if (vector? tmfe1@x) (vector-map tmb97@strip-annotations tmfe1@x) (if (tm6cb@tm59d@annotation? tmfe1@x) (tm6ca@tm59b@annotation-stripped tmfe1@x) tmfe1@x))))) (set! tm284c@tmb97@strip-annotations tmb97@strip-annotations) (set! tmb99@strip (lambda (tmfe3@x tmfe4@m*) (if (tmb0d@top-marked? tmfe4@m*) (if (or (tm6cb@tm59d@annotation? tmfe3@x) (and (pair? tmfe3@x) (tm6cb@tm59d@annotation? (car tmfe3@x))) (and (vector? tmfe3@x) (> (vector-length tmfe3@x) '0) (tm6cb@tm59d@annotation? (vector-ref tmfe3@x '0)))) (tmb97@strip-annotations tmfe3@x) tmfe3@x) (let tmfe9@f ((tmfe7@x tmfe3@x)) (if (tmb53@stx? tmfe7@x) (begin (if (pair? (tmb55@stx-expr tmfe7@x)) (begin (set-source-info! (tmb55@stx-expr tmfe7@x) '#f) (set-source-info! (cdr (tmb55@stx-expr tmfe7@x)) '#f) (set-source-info! (car (tmb55@stx-expr tmfe7@x)) '#f)) (void)) (tmb99@strip (tmb55@stx-expr tmfe7@x) (tmb59@stx-mark* tmfe7@x))) (if (tm6cb@tm59d@annotation? tmfe7@x) (tm6ca@tm59b@annotation-stripped tmfe7@x) (if (pair? tmfe7@x) (let ((tmfeb@a (tmfe9@f (car tmfe7@x))) (tmfec@d (tmfe9@f (cdr tmfe7@x)))) (if (and (eq? tmfeb@a (car tmfe7@x)) (eq? tmfec@d (cdr tmfe7@x))) tmfe7@x (cons tmfeb@a tmfec@d))) (if (vector? tmfe7@x) (let ((tmfef@old (vector->list tmfe7@x))) (let ((tmff1@new (map tmfe9@f tmfef@old))) (if (for-all eq? tmfef@old tmff1@new) tmfe7@x (list->vector tmff1@new)))) tmfe7@x)))))))) (set! tm284d@tmb99@strip tmb99@strip) (set! tmb9b@stx->datum (lambda (tmff3@x) (tmb99@strip tmff3@x '()))) (set! tm284e@tmb9b@stx->datum tmb9b@stx->datum) (set! tmb9d@id->label (lambda (tmff5@id) (or (id->real-label tmff5@id) (let ((tmff7@t (tme7e@top-level-context))) (if tmff7@t ((lambda (tmff9@env) (let ((tmffb@rib (tme2e@interaction-env-rib tmff9@env))) (call-with-values (lambda () (tmb17@gen-define-label+loc tmff5@id tmffb@rib)) (lambda (tm1001@tmffe tm1002@tm1000) (let ((tm1005@loc_ tm1002@tm1000) (tm1006@lab tm1001@tmffe)) (begin (tmb3d@extend-rib! tmffb@rib tmff5@id tm1006@lab) tm1006@lab)))))) tmff7@t) '#f))))) (set! tm284f@tmb9d@id->label tmb9d@id->label) (set! tmb9f@label->binding (lambda (tm1009@x tm100a@r) (let ((tm100d@t (tm9a2@tm7ef@imported-label->binding tm1009@x))) (if tm100d@t ((lambda (tm100f@b) (if (and (pair? tm100f@b) (eq? (car tm100f@b) '$core-rtd)) (cons '$rtd (map tmd44@bless (cdr tm100f@b))) (if (and (pair? tm100f@b) (eq? (car tm100f@b) 'global-rtd)) (let ((tm1011@lib (cadr tm100f@b)) (tm1012@loc (cddr tm100f@b))) (cons '$rtd (symbol-value tm1012@loc))) tm100f@b))) tm100d@t) (let ((tm1015@t (assq tm1009@x tm100a@r))) (if tm1015@t (cdr tm1015@t) (let ((tm1017@t (tme7e@top-level-context))) (if tm1017@t ((lambda (tm1019@env) (let ((tm101b@t (assq tm1009@x (tme36@interaction-env-locs tm1019@env)))) (if tm101b@t ((lambda (tm101d@p) (cons* 'lexical (cdr tm101d@p) '#f)) tm101b@t) '(displaced-lexical . #f)))) tm1017@t) '(displaced-lexical . #f))))))))) (set! tm2850@tmb9f@label->binding tmb9f@label->binding) (set! tmba1@make-binding cons) (set! tm2851@tmba1@make-binding tmba1@make-binding) (set! tmba3@binding-type car) (set! tm2852@tmba3@binding-type tmba3@binding-type) (set! tmba5@binding-value cdr) (set! tm2853@tmba5@binding-value tmba5@binding-value) (set! tmba7@raise-unbound-error (lambda (tm101f@id) (tme6c@syntax-violation* '#f '"unbound identifier" tm101f@id (make-undefined-violation)))) (set! tm2854@tmba7@raise-unbound-error tmba7@raise-unbound-error) (set! tmba9@syntax-type (lambda (tm1021@e tm1022@r) (if (tmb87@id? tm1021@e) (let ((tm1025@id tm1021@e)) (let ((tm1027@label (tmb9d@id->label tm1025@id))) (let ((tm1029@b (tmb9f@label->binding tm1027@label tm1022@r))) (let ((tm102b@type (tmba3@binding-type tm1029@b))) (begin (if (not tm1027@label) (tmba7@raise-unbound-error tm1025@id) (void)) (let ((tm102d@t tm102b@type)) (if (memv tm102d@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values tm102b@type (tmba5@binding-value tm1029@b) tm1025@id) (values 'other '#f '#f)))))))) (if (tmb79@syntax-pair? tm1021@e) (let ((tm102f@id (tmb81@syntax-car tm1021@e))) (if (tmb87@id? tm102f@id) (let ((tm1031@label (tmb9d@id->label tm102f@id))) (let ((tm1033@b (tmb9f@label->binding tm1031@label tm1022@r))) (let ((tm1035@type (tmba3@binding-type tm1033@b))) (begin (if (not tm1031@label) (tmba7@raise-unbound-error tm102f@id) (void)) (let ((tm1037@t tm1035@type)) (if (memv tm1037@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values tm1035@type (tmba5@binding-value tm1033@b) tm102f@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((tm1039@d (tmb9b@stx->datum tm1021@e))) (if (tmb95@self-evaluating? tm1039@d) (values 'constant tm1039@d '#f) (values 'other '#f '#f))))))) (set! tm2855@tmba9@syntax-type tmba9@syntax-type) (set! tmbb7@sanitize-binding (lambda (tm103b@x tm103c@src) (if (procedure? tm103b@x) (cons* 'local-macro tm103b@x tm103c@src) (if (and (pair? tm103b@x) (eq? (car tm103b@x) 'macro!) (procedure? (cdr tm103b@x))) (cons* 'local-macro! (cdr tm103b@x) tm103c@src) (if (and (pair? tm103b@x) (eq? (car tm103b@x) '$rtd)) tm103b@x (assertion-violation 'expand '"invalid transformer" tm103b@x)))))) (set! tm2856@tmbb7@sanitize-binding tmbb7@sanitize-binding) (set! tmbb9@make-variable-transformer (lambda (tm103f@x) (if (procedure? tm103f@x) (cons 'macro! tm103f@x) (assertion-violation 'make-variable-transformer '"not a procedure" tm103f@x)))) (set! tm2857@tmbb9@make-variable-transformer tmbb9@make-variable-transformer) (set! tmbbb@variable-transformer? (lambda (tm1041@x) (and (pair? tm1041@x) (eq? (car tm1041@x) 'macro!) (procedure? (cdr tm1041@x))))) (set! tm2858@tmbbb@variable-transformer? tmbbb@variable-transformer?) (set! tmbbd@variable-transformer-procedure (lambda (tm1043@x) (if (tmbbb@variable-transformer? tm1043@x) (cdr tm1043@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" tm1043@x)))) (set! tm2859@tmbbd@variable-transformer-procedure tmbbd@variable-transformer-procedure) (set! tmbbf@make-eval-transformer (lambda (tm1045@x) (tmbb7@sanitize-binding (eval-core (tm72d@tm6e5@expanded->core tm1045@x)) tm1045@x))) (set! tm285a@tmbbf@make-eval-transformer tmbbf@make-eval-transformer) (set! tmd10@parse-define (lambda (tm1047@x) (let ((tm1049@t tm1047@x)) (let ((tm104b@ls/false (tmd8e@syntax-dispatch tm1049@t '(_ (any . any) any . each-any)))) (if (and tm104b@ls/false (apply (lambda (tm104d@id tm104e@fmls tm104f@b tm1050@b*) (tmb87@id? tm104d@id)) tm104b@ls/false)) (apply (lambda (tm1055@id tm1056@fmls tm1057@b tm1058@b*) (begin (tmdb4@verify-formals tm1056@fmls tm1047@x) (values tm1055@id (cons 'defun (cons tm1056@fmls (cons tm1057@b tm1058@b*)))))) tm104b@ls/false) (let ((tm105d@t tm1049@t)) (let ((tm105f@ls/false (tmd8e@syntax-dispatch tm105d@t '(_ any any)))) (if (and tm105f@ls/false (apply (lambda (tm1061@id tm1062@val) (tmb87@id? tm1061@id)) tm105f@ls/false)) (apply (lambda (tm1065@id tm1066@val) (values tm1065@id (cons 'expr tm1066@val))) tm105f@ls/false) (let ((tm1069@t tm105d@t)) (let ((tm106b@ls/false (tmd8e@syntax-dispatch tm1069@t '(_ any)))) (if (and tm106b@ls/false (apply (lambda (tm106d@id) (tmb87@id? tm106d@id)) tm106b@ls/false)) (apply (lambda (tm106f@id) (values tm106f@id (cons 'expr (tmd44@bless '(void))))) tm106b@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1069@t)))))))))))) (set! tm285b@tmd10@parse-define tmd10@parse-define) (set! tmd12@parse-define-syntax (lambda (tm1071@x) (let ((tm1073@t tm1071@x)) (let ((tm1075@ls/false (tmd8e@syntax-dispatch tm1073@t '(_ any any)))) (if (and tm1075@ls/false (apply (lambda (tm1077@id tm1078@val) (tmb87@id? tm1077@id)) tm1075@ls/false)) (apply (lambda (tm107b@id tm107c@val) (values tm107b@id tm107c@val)) tm1075@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1073@t)))))) (set! tm285c@tmd12@parse-define-syntax tmd12@parse-define-syntax) (set! tmd14@scheme-stx-hashtable (make-eq-hashtable)) (set! tm285d@tmd14@scheme-stx-hashtable tmd14@scheme-stx-hashtable) (set! tmd16@scheme-stx (lambda (tm107f@sym) (or (hashtable-ref tmd14@scheme-stx-hashtable tm107f@sym '#f) (let ((tm1081@subst (tm97e@tm7a7@library-subst (tm99c@tm7e3@find-library-by-name '(psyntax system $all))))) (let ((tm1083@stx (make-simple-struct 'stx '5 (list tm107f@sym tmb0b@top-mark* '() '())))) (let ((tm1085@stx (let ((tm1087@t (assq tm107f@sym tm1081@subst))) (if tm1087@t ((lambda (tm1089@x) (let ((tm108b@name (car tm1089@x)) (tm108c@label (cdr tm1089@x))) (tmb71@add-subst (make-simple-struct 'rib '6 (list (list tm108b@name) (list tmb0b@top-mark*) (list tm108c@label) '#f '#f)) tm1083@stx))) tm1087@t) tm1083@stx)))) (begin (hashtable-set! tmd14@scheme-stx-hashtable tm107f@sym tm1085@stx) tm1085@stx))))))) (set! tm285e@tmd16@scheme-stx tmd16@scheme-stx) (set! tmd18@lexical-var car) (set! tm285f@tmd18@lexical-var tmd18@lexical-var) (set! tmd1a@lexical-mutable? cdr) (set! tm2860@tmd1a@lexical-mutable? tmd1a@lexical-mutable?) (set! tmd1c@set-lexical-mutable! set-cdr!) (set! tm2861@tmd1c@set-lexical-mutable! tmd1c@set-lexical-mutable!) (set! tmd1e@add-lexical (lambda (tm108f@lab tm1090@lex tm1091@r) (cons (cons* tm108f@lab 'lexical tm1090@lex '#f) tm1091@r))) (set! tm2862@tmd1e@add-lexical tmd1e@add-lexical) (set! tmd20@add-lexicals (lambda (tm1095@lab* tm1096@lex* tm1097@r) (if (null? tm1095@lab*) tm1097@r (tmd20@add-lexicals (cdr tm1095@lab*) (cdr tm1096@lex*) (tmd1e@add-lexical (car tm1095@lab*) (car tm1096@lex*) tm1097@r))))) (set! tm2863@tmd20@add-lexicals tmd20@add-lexicals) (set! tmd22@letrec-helper (lambda (tm109b@e tm109c@r tm109d@mr tm109e@build) (let ((tm10a3@t tm109b@e)) (let ((tm10a5@ls/false (tmd8e@syntax-dispatch tm10a3@t '(_ #(each (any any)) any . each-any)))) (if tm10a5@ls/false (apply (lambda (tm10a7@lhs* tm10a8@rhs* tm10a9@b tm10aa@b*) (if (not (tmb8f@valid-bound-ids? tm10a7@lhs*)) (tmd48@invalid-fmls-error tm109b@e tm10a7@lhs*) (let ((tm10af@lex* (map tmb0f@gen-lexical tm10a7@lhs*)) (tm10b0@lab* (map tmb13@gen-label tm10a7@lhs*))) (let ((tm10b3@rib (tmb47@make-full-rib tm10a7@lhs* tm10b0@lab*)) (tm10b4@r (tmd20@add-lexicals tm10b0@lab* tm10af@lex* tm109c@r))) (let ((tm10b7@body (tmdc6@chi-internal (tmb71@add-subst tm10b3@rib (cons tm10a9@b tm10aa@b*)) tm10b4@r tm109d@mr)) (tm10b8@rhs* (tmdac@chi-expr* (map (lambda (tm10bb@x) (tmb71@add-subst tm10b3@rib tm10bb@x)) tm10a8@rhs*) tm10b4@r tm109d@mr))) (tm109e@build '#f tm10af@lex* tm10b8@rhs* tm10b7@body)))))) tm10a5@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm10a3@t)))))) (set! tm2864@tmd22@letrec-helper tmd22@letrec-helper) (set! tmd24@let-transformer (lambda (tm10bd@e tm10be@r tm10bf@mr) (let ((tm10c3@t tm10bd@e)) (let ((tm10c5@ls/false (tmd8e@syntax-dispatch tm10c3@t '(_ #(each (any any)) any . each-any)))) (if tm10c5@ls/false (apply (lambda (tm10c7@lhs* tm10c8@rhs* tm10c9@b tm10ca@b*) (if (not (tmb8f@valid-bound-ids? tm10c7@lhs*)) (tmd48@invalid-fmls-error tm10bd@e tm10c7@lhs*) (let ((tm10cf@lex* (map tmb0f@gen-lexical tm10c7@lhs*)) (tm10d0@lab* (map tmb13@gen-label tm10c7@lhs*)) (tm10d1@rhs* (tmdac@chi-expr* tm10c8@rhs* tm10be@r tm10bf@mr))) (let ((tm10d5@rib (tmb47@make-full-rib tm10c7@lhs* tm10d0@lab*)) (tm10d6@r (tmd20@add-lexicals tm10d0@lab* tm10cf@lex* tm10be@r))) (let ((tm10d9@body (tmdc6@chi-internal (tmb71@add-subst tm10d5@rib (cons tm10c9@b tm10ca@b*)) tm10d6@r tm10bf@mr))) (tmaef@tma52@build-let '#f tm10cf@lex* tm10d1@rhs* tm10d9@body)))))) tm10c5@ls/false) (let ((tm10db@t tm10c3@t)) (let ((tm10dd@ls/false (tmd8e@syntax-dispatch tm10db@t '(_ any #(each (any any)) any . each-any)))) (if tm10dd@ls/false (apply (lambda (tm10df@loop tm10e0@lhs* tm10e1@rhs* tm10e2@b tm10e3@b*) (if (not (tmb8f@valid-bound-ids? tm10e0@lhs*)) (tmd48@invalid-fmls-error tm10bd@e tm10e0@lhs*) (let ((tm10e9@lex* (map tmb0f@gen-lexical tm10e0@lhs*)) (tm10ea@lab* (map tmb13@gen-label tm10e0@lhs*)) (tm10eb@rhs* (tmdac@chi-expr* tm10e1@rhs* tm10be@r tm10bf@mr)) (tm10ec@loop-lex (tmb0f@gen-lexical tm10df@loop)) (tm10ed@loop-lab (tmb13@gen-label tm10df@loop))) (let ((tm10f3@loop-rib (tmb47@make-full-rib (list tm10df@loop) (list tm10ed@loop-lab))) (tm10f4@rib (tmb47@make-full-rib tm10e0@lhs* tm10ea@lab*)) (tm10f5@r (tmd20@add-lexicals (cons tm10ed@loop-lab tm10ea@lab*) (cons tm10ec@loop-lex tm10e9@lex*) tm10be@r))) (let ((tm10f9@body (tmdc6@chi-internal (tmb71@add-subst tm10f3@loop-rib (tmb71@add-subst tm10f4@rib (cons tm10e2@b tm10e3@b*))) tm10f5@r tm10bf@mr))) (tmaf0@tma54@build-named-let '#f tm10ec@loop-lex tm10e9@lex* tm10eb@rhs* tm10f9@body)))))) tm10dd@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm10db@t))))))))) (set! tm2865@tmd24@let-transformer tmd24@let-transformer) (set! tmd26@letrec-transformer (lambda (tm10fb@e tm10fc@r tm10fd@mr) (tmd22@letrec-helper tm10fb@e tm10fc@r tm10fd@mr tmaee@tma50@build-letrec))) (set! tm2866@tmd26@letrec-transformer tmd26@letrec-transformer) (set! tmd28@letrec*-transformer (lambda (tm1101@e tm1102@r tm1103@mr) (tmd22@letrec-helper tm1101@e tm1102@r tm1103@mr tmaf1@tma56@build-letrec*))) (set! tm2867@tmd28@letrec*-transformer tmd28@letrec*-transformer) (set! tmd2a@fluid-let-syntax-transformer (lambda (tm1107@e tm1108@r tm1109@mr) (letrec* ((tm110e@lookup (lambda (tm1121@x) (or (tmb9d@id->label tm1121@x) (tme6e@syntax-violation '#f '"unbound identifier" tm1107@e tm1121@x))))) (let ((tm110f@t tm1107@e)) (let ((tm1111@ls/false (tmd8e@syntax-dispatch tm110f@t '(_ #(each (any any)) any . each-any)))) (if tm1111@ls/false (apply (lambda (tm1113@lhs* tm1114@rhs* tm1115@b tm1116@b*) (if (not (tmb8f@valid-bound-ids? tm1113@lhs*)) (tmd48@invalid-fmls-error tm1107@e tm1113@lhs*) (let ((tm111b@lab* (map tm110e@lookup tm1113@lhs*)) (tm111c@rhs* (map (lambda (tm111f@x) (tmbbf@make-eval-transformer (tmde8@expand-transformer tm111f@x tm1109@mr))) tm1114@rhs*))) (tmdc6@chi-internal (cons tm1115@b tm1116@b*) (append (map cons tm111b@lab* tm111c@rhs*) tm1108@r) (append (map cons tm111b@lab* tm111c@rhs*) tm1109@mr))))) tm1111@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm110f@t))))))) (set! tm2868@tmd2a@fluid-let-syntax-transformer tmd2a@fluid-let-syntax-transformer) (set! tmd2c@type-descriptor-transformer (lambda (tm1123@e tm1124@r tm1125@mr) (let ((tm1129@t tm1123@e)) (let ((tm112b@ls/false (tmd8e@syntax-dispatch tm1129@t '(_ any)))) (if (and tm112b@ls/false (apply (lambda (tm112d@id) (tmb87@id? tm112d@id)) tm112b@ls/false)) (apply (lambda (tm112f@id) (let ((tm1131@lab (tmb9d@id->label tm112f@id))) (let ((tm1133@b (tmb9f@label->binding tm1131@lab tm1124@r))) (let ((tm1135@type (tmba3@binding-type tm1133@b))) (begin (if (not tm1131@lab) (tmba7@raise-unbound-error tm112f@id) (void)) (if (not (and (eq? tm1135@type '$rtd) (not (list? (tmba5@binding-value tm1133@b))))) (tme6e@syntax-violation '#f '"not a record type" tm1123@e) (void)) (list 'quote (tmba5@binding-value tm1133@b))))))) tm112b@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1129@t)))))) (set! tm2869@tmd2c@type-descriptor-transformer tmd2c@type-descriptor-transformer) (set! tmd2e@record-type-descriptor-transformer (lambda (tm1137@e tm1138@r tm1139@mr) (let ((tm113d@t tm1137@e)) (let ((tm113f@ls/false (tmd8e@syntax-dispatch tm113d@t '(_ any)))) (if (and tm113f@ls/false (apply (lambda (tm1141@id) (tmb87@id? tm1141@id)) tm113f@ls/false)) (apply (lambda (tm1143@id) (let ((tm1145@lab (tmb9d@id->label tm1143@id))) (let ((tm1147@b (tmb9f@label->binding tm1145@lab tm1138@r))) (let ((tm1149@type (tmba3@binding-type tm1147@b))) (begin (if (not tm1145@lab) (tmba7@raise-unbound-error tm1143@id) (void)) (if (not (and (eq? tm1149@type '$rtd) (list? (tmba5@binding-value tm1147@b)))) (tme6e@syntax-violation '#f '"not a record type" tm1137@e) (void)) (tmdb0@chi-expr (car (tmba5@binding-value tm1147@b)) tm1138@r tm1139@mr)))))) tm113f@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm113d@t)))))) (set! tm286a@tmd2e@record-type-descriptor-transformer tmd2e@record-type-descriptor-transformer) (set! tmd30@record-constructor-descriptor-transformer (lambda (tm114b@e tm114c@r tm114d@mr) (let ((tm1151@t tm114b@e)) (let ((tm1153@ls/false (tmd8e@syntax-dispatch tm1151@t '(_ any)))) (if (and tm1153@ls/false (apply (lambda (tm1155@id) (tmb87@id? tm1155@id)) tm1153@ls/false)) (apply (lambda (tm1157@id) (let ((tm1159@lab (tmb9d@id->label tm1157@id))) (let ((tm115b@b (tmb9f@label->binding tm1159@lab tm114c@r))) (let ((tm115d@type (tmba3@binding-type tm115b@b))) (begin (if (not tm1159@lab) (tmba7@raise-unbound-error tm1157@id) (void)) (if (not (and (eq? tm115d@type '$rtd) (list? (tmba5@binding-value tm115b@b)))) (tme6e@syntax-violation '#f '"invalid type" tm114b@e) (void)) (tmdb0@chi-expr (cadr (tmba5@binding-value tm115b@b)) tm114c@r tm114d@mr)))))) tm1153@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1151@t)))))) (set! tm286b@tmd30@record-constructor-descriptor-transformer tmd30@record-constructor-descriptor-transformer) (set! tmd32@when-macro (lambda (tm115f@e) (let ((tm1161@t tm115f@e)) (let ((tm1163@ls/false (tmd8e@syntax-dispatch tm1161@t '(_ any any . each-any)))) (if tm1163@ls/false (apply (lambda (tm1165@test tm1166@e tm1167@e*) (tmd44@bless (list 'if tm1165@test (cons 'begin (cons tm1166@e tm1167@e*))))) tm1163@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1161@t)))))) (set! tm286c@tmd32@when-macro tmd32@when-macro) (set! tmd34@unless-macro (lambda (tm116b@e) (let ((tm116d@t tm116b@e)) (let ((tm116f@ls/false (tmd8e@syntax-dispatch tm116d@t '(_ any any . each-any)))) (if tm116f@ls/false (apply (lambda (tm1171@test tm1172@e tm1173@e*) (tmd44@bless (list 'if (list 'not tm1171@test) (cons 'begin (cons tm1172@e tm1173@e*))))) tm116f@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm116d@t)))))) (set! tm286d@tmd34@unless-macro tmd34@unless-macro) (set! tmd36@if-transformer (lambda (tm1177@e tm1178@r tm1179@mr) (let ((tm117d@t tm1177@e)) (let ((tm117f@ls/false (tmd8e@syntax-dispatch tm117d@t '(_ any any any)))) (if tm117f@ls/false (apply (lambda (tm1181@e0 tm1182@e1 tm1183@e2) (list 'if (tmdb0@chi-expr tm1181@e0 tm1178@r tm1179@mr) (tmdb0@chi-expr tm1182@e1 tm1178@r tm1179@mr) (tmdb0@chi-expr tm1183@e2 tm1178@r tm1179@mr))) tm117f@ls/false) (let ((tm1187@t tm117d@t)) (let ((tm1189@ls/false (tmd8e@syntax-dispatch tm1187@t '(_ any any)))) (if tm1189@ls/false (apply (lambda (tm118b@e0 tm118c@e1) (list 'if (tmdb0@chi-expr tm118b@e0 tm1178@r tm1179@mr) (tmdb0@chi-expr tm118c@e1 tm1178@r tm1179@mr) (tmaed@tma4e@build-void))) tm1189@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1187@t))))))))) (set! tm286e@tmd36@if-transformer tmd36@if-transformer) (set! tmd38@and-transformer (lambda (tm118f@e tm1190@r tm1191@mr) (let ((tm1195@t tm118f@e)) (let ((tm1197@ls/false (tmd8e@syntax-dispatch tm1195@t '(_ . each-any)))) (if tm1197@ls/false (apply (lambda (tm1199@e*) (cons 'and (tmdac@chi-expr* tm1199@e* tm1190@r tm1191@mr))) tm1197@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1195@t)))))) (set! tm286f@tmd38@and-transformer tmd38@and-transformer) (set! tmd3a@or-transformer (lambda (tm119b@e tm119c@r tm119d@mr) (let ((tm11a1@t tm119b@e)) (let ((tm11a3@ls/false (tmd8e@syntax-dispatch tm11a1@t '(_ . each-any)))) (if tm11a3@ls/false (apply (lambda (tm11a5@e*) (cons 'or (tmdac@chi-expr* tm11a5@e* tm119c@r tm119d@mr))) tm11a3@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm11a1@t)))))) (set! tm2870@tmd3a@or-transformer tmd3a@or-transformer) (set! tmd3c@case-macro (lambda (tm11a7@e) (letrec* ((tm11aa@build-last (lambda (tm11d1@cls) (let ((tm11d3@t tm11d1@cls)) (let ((tm11d5@ls/false (tmd8e@syntax-dispatch tm11d3@t '(#(scheme-id else) any . each-any)))) (if tm11d5@ls/false (apply (lambda (tm11d7@e tm11d8@e*) (cons 'begin (cons tm11d7@e tm11d8@e*))) tm11d5@ls/false) (let ((tm11db@t tm11d3@t)) (let ((tm11dd@ls/false (tmd8e@syntax-dispatch tm11db@t '_))) (if tm11dd@ls/false (apply (lambda () (tm11ac@build-one tm11d1@cls '(if #f #f))) tm11dd@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm11db@t))))))))) (tm11ac@build-one (lambda (tm11c3@cls tm11c4@k) (let ((tm11c7@t tm11c3@cls)) (let ((tm11c9@ls/false (tmd8e@syntax-dispatch tm11c7@t '(each-any any . each-any)))) (if tm11c9@ls/false (apply (lambda (tm11cb@d* tm11cc@e tm11cd@e*) (list 'if (list 'memv 't (list 'quote tm11cb@d*)) (cons 'begin (cons tm11cc@e tm11cd@e*)) tm11c4@k)) tm11c9@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm11c7@t))))))) (let ((tm11ad@t tm11a7@e)) (let ((tm11af@ls/false (tmd8e@syntax-dispatch tm11ad@t '(_ any)))) (if tm11af@ls/false (apply (lambda (tm11b1@expr) (tmd44@bless (cons 'let (cons (list (list 't tm11b1@expr)) '((if #f #f)))))) tm11af@ls/false) (let ((tm11b3@t tm11ad@t)) (let ((tm11b5@ls/false (tmd8e@syntax-dispatch tm11b3@t '(_ any any . each-any)))) (if tm11b5@ls/false (apply (lambda (tm11b7@expr tm11b8@cls tm11b9@cls*) (tmd44@bless (list 'let (list (list 't tm11b7@expr)) (let tm11c1@f ((tm11bd@cls tm11b8@cls) (tm11be@cls* tm11b9@cls*)) (if (null? tm11be@cls*) (tm11aa@build-last tm11bd@cls) (tm11ac@build-one tm11bd@cls (tm11c1@f (car tm11be@cls*) (cdr tm11be@cls*)))))))) tm11b5@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm11b3@t)))))))))) (set! tm2871@tmd3c@case-macro tmd3c@case-macro) (set! tmd3e@quote-transformer (lambda (tm11df@e tm11e0@r tm11e1@mr) (let ((tm11e5@t tm11df@e)) (let ((tm11e7@ls/false (tmd8e@syntax-dispatch tm11e5@t '(_ any)))) (if tm11e7@ls/false (apply (lambda (tm11e9@datum) (list 'quote (tmb9b@stx->datum tm11e9@datum))) tm11e7@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm11e5@t)))))) (set! tm2872@tmd3e@quote-transformer tmd3e@quote-transformer) (set! tmd40@case-lambda-transformer (lambda (tm11eb@e tm11ec@r tm11ed@mr) (let ((tm11f1@t tm11eb@e)) (let ((tm11f3@ls/false (tmd8e@syntax-dispatch tm11f1@t '(_ . #(each (any any . each-any)))))) (if tm11f3@ls/false (apply (lambda (tm11f5@fmls* tm11f6@b* tm11f7@b**) (call-with-values (lambda () (tmdb8@chi-lambda-clause* tm11eb@e tm11f5@fmls* (map cons tm11f6@b* tm11f7@b**) tm11ec@r tm11ed@mr)) (lambda (tm11ff@tm11fc tm1200@tm11fe) (let ((tm1203@body* tm1200@tm11fe) (tm1204@fmls* tm11ff@tm11fc)) (tmaeb@tma1e@build-case-lambda '#f tm1204@fmls* tm1203@body*))))) tm11f3@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm11f1@t)))))) (set! tm2873@tmd40@case-lambda-transformer tmd40@case-lambda-transformer) (set! tmd42@lambda-transformer (lambda (tm1207@e tm1208@r tm1209@mr) (let ((tm120d@t tm1207@e)) (let ((tm120f@ls/false (tmd8e@syntax-dispatch tm120d@t '(_ any any . each-any)))) (if tm120f@ls/false (apply (lambda (tm1211@fmls tm1212@b tm1213@b*) (call-with-values (lambda () (tmdb6@chi-lambda-clause tm1207@e tm1211@fmls (cons tm1212@b tm1213@b*) tm1208@r tm1209@mr)) (lambda (tm121b@tm1218 tm121c@tm121a) (let ((tm121f@body tm121c@tm121a) (tm1220@fmls tm121b@tm1218)) (tmaea@tma1c@build-lambda '#f tm1220@fmls tm121f@body))))) tm120f@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm120d@t)))))) (set! tm2874@tmd42@lambda-transformer tmd42@lambda-transformer) (set! tmd44@bless (lambda (tm1223@x) (tmb6f@mkstx (let tm1227@f ((tm1225@x tm1223@x)) (if (tmb53@stx? tm1225@x) tm1225@x (if (pair? tm1225@x) (cons (tm1227@f (car tm1225@x)) (tm1227@f (cdr tm1225@x))) (if (symbol? tm1225@x) (tmd16@scheme-stx tm1225@x) (if (vector? tm1225@x) (vector-map tm1227@f tm1225@x) tm1225@x))))) '() '() '()))) (set! tm2875@tmd44@bless tmd44@bless) (set! tmd46@with-syntax-macro (lambda (tm1229@e) (let ((tm122b@t tm1229@e)) (let ((tm122d@ls/false (tmd8e@syntax-dispatch tm122b@t '(_ #(each (any any)) any . each-any)))) (if tm122d@ls/false (apply (lambda (tm122f@pat* tm1230@expr* tm1231@b tm1232@b*) (let ((tm1237@idn* (let tm123b@f ((tm1239@pat* tm122f@pat*)) (if (null? tm1239@pat*) '() (call-with-values (lambda () (tmd8c@convert-pattern (car tm1239@pat*) '())) (lambda (tm1241@tm123e tm1242@tm1240) (let ((tm1245@idn* tm1242@tm1240) (tm1246@pat tm1241@tm123e)) (append tm1245@idn* (tm123b@f (cdr tm1239@pat*)))))))))) (begin (tmdb4@verify-formals (map car tm1237@idn*) tm1229@e) (let ((tm1249@t* (tme5c@generate-temporaries tm1230@expr*))) (tmd44@bless (list 'let (map list tm1249@t* tm1230@expr*) (let tm124f@f ((tm124b@pat* tm122f@pat*) (tm124c@t* tm1249@t*)) (if (null? tm124b@pat*) (cons 'let (cons '() (cons tm1231@b tm1232@b*))) (list 'syntax-case (car tm124c@t*) '() (list (car tm124b@pat*) (tm124f@f (cdr tm124b@pat*) (cdr tm124c@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car tm124b@pat*)) (car tm124c@t*)))))))))))) tm122d@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm122b@t)))))) (set! tm2876@tmd46@with-syntax-macro tmd46@with-syntax-macro) (set! tmd48@invalid-fmls-error (lambda (tm1251@stx tm1252@fmls) (let ((tm1255@t tm1252@fmls)) (let ((tm1257@ls/false (tmd8e@syntax-dispatch tm1255@t '#(each+ any () any)))) (if tm1257@ls/false (apply (lambda (tm1259@id* tm125a@last) (let tm125f@f ((tm125d@id* (if (tmb87@id? tm125a@last) (cons tm125a@last tm1259@id*) (if (tmb7d@syntax-null? tm125a@last) tm1259@id* (tme6e@syntax-violation '#f '"not an identifier" tm1251@stx tm125a@last))))) (if (null? tm125d@id*) (values) (if (not (tmb87@id? (car tm125d@id*))) (tme6e@syntax-violation '#f '"not an identifier" tm1251@stx (car tm125d@id*)) (begin (tm125f@f (cdr tm125d@id*)) (if (tmb93@bound-id-member? (car tm125d@id*) (cdr tm125d@id*)) (tme6e@syntax-violation '#f '"duplicate binding" tm1251@stx (car tm125d@id*)) (void))))))) tm1257@ls/false) (let ((tm1261@t tm1255@t)) (let ((tm1263@ls/false (tmd8e@syntax-dispatch tm1261@t '_))) (if tm1263@ls/false (apply (lambda () (tme6e@syntax-violation '#f '"malformed binding form" tm1251@stx tm1252@fmls)) tm1263@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1261@t))))))))) (set! tm2877@tmd48@invalid-fmls-error tmd48@invalid-fmls-error) (set! tmd4a@let-macro (lambda (tm1265@stx) (let ((tm1267@t tm1265@stx)) (let ((tm1269@ls/false (tmd8e@syntax-dispatch tm1267@t '(_ #(each (any any)) any . each-any)))) (if tm1269@ls/false (apply (lambda (tm126b@lhs* tm126c@rhs* tm126d@b tm126e@b*) (if (tmb8f@valid-bound-ids? tm126b@lhs*) (tmd44@bless (cons (cons 'lambda (cons tm126b@lhs* (cons tm126d@b tm126e@b*))) tm126c@rhs*)) (tmd48@invalid-fmls-error tm1265@stx tm126b@lhs*))) tm1269@ls/false) (let ((tm1273@t tm1267@t)) (let ((tm1275@ls/false (tmd8e@syntax-dispatch tm1273@t '(_ any #(each (any any)) any . each-any)))) (if (and tm1275@ls/false (apply (lambda (tm1277@f tm1278@lhs* tm1279@rhs* tm127a@b tm127b@b*) (tmb87@id? tm1277@f)) tm1275@ls/false)) (apply (lambda (tm1281@f tm1282@lhs* tm1283@rhs* tm1284@b tm1285@b*) (if (tmb8f@valid-bound-ids? tm1282@lhs*) (tmd44@bless (cons (list 'letrec (list (list tm1281@f (cons 'lambda (cons tm1282@lhs* (cons tm1284@b tm1285@b*))))) tm1281@f) tm1283@rhs*)) (tmd48@invalid-fmls-error tm1265@stx tm1282@lhs*))) tm1275@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1273@t))))))))) (set! tm2878@tmd4a@let-macro tmd4a@let-macro) (set! tmd4c@let-values-macro (lambda (tm128b@stx) (letrec* ((tm128e@rename (lambda (tm12f3@x tm12f4@old* tm12f5@new*) (begin (if (not (tmb87@id? tm12f3@x)) (tme6e@syntax-violation '#f '"not an indentifier" tm128b@stx tm12f3@x) (void)) (if (tmb93@bound-id-member? tm12f3@x tm12f4@old*) (tme6e@syntax-violation '#f '"duplicate binding" tm128b@stx tm12f3@x) (void)) (let ((tm12f9@y (gensym (tme74@syntax->datum tm12f3@x)))) (values tm12f9@y (cons tm12f3@x tm12f4@old*) (cons tm12f9@y tm12f5@new*)))))) (tm1290@rename* (lambda (tm12e1@x* tm12e2@old* tm12e3@new*) (if (null? tm12e1@x*) (values '() tm12e2@old* tm12e3@new*) (call-with-values (lambda () (tm128e@rename (car tm12e1@x*) tm12e2@old* tm12e3@new*)) (lambda (tm12e7@x tm12e8@old* tm12e9@new*) (call-with-values (lambda () (tm1290@rename* (cdr tm12e1@x*) tm12e8@old* tm12e9@new*)) (lambda (tm12ed@x* tm12ee@old* tm12ef@new*) (values (cons tm12e7@x tm12ed@x*) tm12ee@old* tm12ef@new*))))))))) (let ((tm1291@t tm128b@stx)) (let ((tm1293@ls/false (tmd8e@syntax-dispatch tm1291@t '(_ () any . each-any)))) (if tm1293@ls/false (apply (lambda (tm1295@b tm1296@b*) (cons* (tmd44@bless 'let) '() tm1295@b tm1296@b*)) tm1293@ls/false) (let ((tm1299@t tm1291@t)) (let ((tm129b@ls/false (tmd8e@syntax-dispatch tm1299@t '(_ #(each (any any)) any . each-any)))) (if tm129b@ls/false (apply (lambda (tm129d@lhs* tm129e@rhs* tm129f@b tm12a0@b*) (tmd44@bless (let tm12ad@f ((tm12a5@lhs* tm129d@lhs*) (tm12a6@rhs* tm129e@rhs*) (tm12a7@old* '()) (tm12a8@new* '())) (if (null? tm12a5@lhs*) (cons 'let (cons (map list tm12a7@old* tm12a8@new*) (cons tm129f@b tm12a0@b*))) (let ((tm12af@t (car tm12a5@lhs*))) (let ((tm12b1@ls/false (tmd8e@syntax-dispatch tm12af@t 'each-any))) (if tm12b1@ls/false (apply (lambda (tm12b3@x*) (call-with-values (lambda () (tm1290@rename* tm12b3@x* tm12a7@old* tm12a8@new*)) (lambda (tm12bb@tm12b6 tm12bc@tm12b8 tm12bd@tm12ba) (let ((tm12c1@new* tm12bd@tm12ba) (tm12c2@old* tm12bc@tm12b8) (tm12c3@y* tm12bb@tm12b6)) (list 'call-with-values (list 'lambda '() (car tm12a6@rhs*)) (list 'lambda tm12c3@y* (tm12ad@f (cdr tm12a5@lhs*) (cdr tm12a6@rhs*) tm12c2@old* tm12c1@new*))))))) tm12b1@ls/false) (let ((tm12c7@t tm12af@t)) (let ((tm12c9@ls/false (tmd8e@syntax-dispatch tm12c7@t '#(each+ any () any)))) (if tm12c9@ls/false (apply (lambda (tm12cb@x* tm12cc@x) (call-with-values (lambda () (tm128e@rename tm12cc@x tm12a7@old* tm12a8@new*)) (lambda (tm12cf@y tm12d0@old* tm12d1@new*) (call-with-values (lambda () (tm1290@rename* tm12cb@x* tm12d0@old* tm12d1@new*)) (lambda (tm12d5@y* tm12d6@old* tm12d7@new*) (list 'call-with-values (list 'lambda '() (car tm12a6@rhs*)) (list 'lambda (append tm12d5@y* tm12cf@y) (tm12ad@f (cdr tm12a5@lhs*) (cdr tm12a6@rhs*) tm12d6@old* tm12d7@new*)))))))) tm12c9@ls/false) (let ((tm12db@t tm12c7@t)) (let ((tm12dd@ls/false (tmd8e@syntax-dispatch tm12db@t 'any))) (if tm12dd@ls/false (apply (lambda (tm12df@others) (tme6e@syntax-violation '#f '"malformed bindings" tm128b@stx tm12df@others)) tm12dd@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm12db@t)))))))))))))) tm129b@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1299@t)))))))))) (set! tm2879@tmd4c@let-values-macro tmd4c@let-values-macro) (set! tmd4e@let*-values-macro (lambda (tm12fb@stx) (letrec* ((tm12fe@check (lambda (tm132d@x*) (if (not (null? tm132d@x*)) (let ((tm132f@x (car tm132d@x*))) (begin (if (not (tmb87@id? tm132f@x)) (tme6e@syntax-violation '#f '"not an identifier" tm12fb@stx tm132f@x) (void)) (tm12fe@check (cdr tm132d@x*)) (if (tmb93@bound-id-member? tm132f@x (cdr tm132d@x*)) (tme6e@syntax-violation '#f '"duplicate identifier" tm12fb@stx tm132f@x) (void)))) (void))))) (let ((tm12ff@t tm12fb@stx)) (let ((tm1301@ls/false (tmd8e@syntax-dispatch tm12ff@t '(_ () any . each-any)))) (if tm1301@ls/false (apply (lambda (tm1303@b tm1304@b*) (cons* (tmd44@bless 'let) '() tm1303@b tm1304@b*)) tm1301@ls/false) (let ((tm1307@t tm12ff@t)) (let ((tm1309@ls/false (tmd8e@syntax-dispatch tm1307@t '(_ #(each (any any)) any . each-any)))) (if tm1309@ls/false (apply (lambda (tm130b@lhs* tm130c@rhs* tm130d@b tm130e@b*) (tmd44@bless (let tm1317@f ((tm1313@lhs* tm130b@lhs*) (tm1314@rhs* tm130c@rhs*)) (if (null? tm1313@lhs*) (cons 'begin (cons tm130d@b tm130e@b*)) (let ((tm1319@t (car tm1313@lhs*))) (let ((tm131b@ls/false (tmd8e@syntax-dispatch tm1319@t 'each-any))) (if tm131b@ls/false (apply (lambda (tm131d@x*) (begin (tm12fe@check tm131d@x*) (list 'call-with-values (list 'lambda '() (car tm1314@rhs*)) (list 'lambda tm131d@x* (tm1317@f (cdr tm1313@lhs*) (cdr tm1314@rhs*)))))) tm131b@ls/false) (let ((tm131f@t tm1319@t)) (let ((tm1321@ls/false (tmd8e@syntax-dispatch tm131f@t '#(each+ any () any)))) (if tm1321@ls/false (apply (lambda (tm1323@x* tm1324@x) (begin (tm12fe@check (cons tm1324@x tm1323@x*)) (list 'call-with-values (list 'lambda '() (car tm1314@rhs*)) (list 'lambda (append tm1323@x* tm1324@x) (tm1317@f (cdr tm1313@lhs*) (cdr tm1314@rhs*)))))) tm1321@ls/false) (let ((tm1327@t tm131f@t)) (let ((tm1329@ls/false (tmd8e@syntax-dispatch tm1327@t 'any))) (if tm1329@ls/false (apply (lambda (tm132b@others) (tme6e@syntax-violation '#f '"malformed bindings" tm12fb@stx tm132b@others)) tm1329@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1327@t)))))))))))))) tm1309@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1307@t)))))))))) (set! tm287a@tmd4e@let*-values-macro tmd4e@let*-values-macro) (set! tmd50@trace-lambda-macro (lambda (tm1331@stx) (let ((tm1333@t tm1331@stx)) (let ((tm1335@ls/false (tmd8e@syntax-dispatch tm1333@t '(_ any each-any any . each-any)))) (if tm1335@ls/false (apply (lambda (tm1337@who tm1338@fmls tm1339@b tm133a@b*) (if (tmb8f@valid-bound-ids? tm1338@fmls) (tmd44@bless (list 'make-traced-procedure (list 'quote tm1337@who) (cons 'lambda (cons tm1338@fmls (cons tm1339@b tm133a@b*))))) (tmd48@invalid-fmls-error tm1331@stx tm1338@fmls))) tm1335@ls/false) (let ((tm133f@t tm1333@t)) (let ((tm1341@ls/false (tmd8e@syntax-dispatch tm133f@t '(_ any #(each+ any () any) any . each-any)))) (if tm1341@ls/false (apply (lambda (tm1343@who tm1344@fmls tm1345@last tm1346@b tm1347@b*) (if (tmb8f@valid-bound-ids? (cons tm1345@last tm1344@fmls)) (tmd44@bless (list 'make-traced-procedure (list 'quote tm1343@who) (cons 'lambda (cons (append tm1344@fmls tm1345@last) (cons tm1346@b tm1347@b*))))) (tmd48@invalid-fmls-error tm1331@stx (append tm1344@fmls tm1345@last)))) tm1341@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm133f@t))))))))) (set! tm287b@tmd50@trace-lambda-macro tmd50@trace-lambda-macro) (set! tmd52@trace-define-macro (lambda (tm134d@stx) (let ((tm134f@t tm134d@stx)) (let ((tm1351@ls/false (tmd8e@syntax-dispatch tm134f@t '(_ (any . each-any) any . each-any)))) (if tm1351@ls/false (apply (lambda (tm1353@who tm1354@fmls tm1355@b tm1356@b*) (if (tmb8f@valid-bound-ids? tm1354@fmls) (tmd44@bless (list 'define tm1353@who (list 'make-traced-procedure (list 'quote tm1353@who) (cons 'lambda (cons tm1354@fmls (cons tm1355@b tm1356@b*)))))) (tmd48@invalid-fmls-error tm134d@stx tm1354@fmls))) tm1351@ls/false) (let ((tm135b@t tm134f@t)) (let ((tm135d@ls/false (tmd8e@syntax-dispatch tm135b@t '(_ (any . #(each+ any () any)) any . each-any)))) (if tm135d@ls/false (apply (lambda (tm135f@who tm1360@fmls tm1361@last tm1362@b tm1363@b*) (if (tmb8f@valid-bound-ids? (cons tm1361@last tm1360@fmls)) (tmd44@bless (list 'define tm135f@who (list 'make-traced-procedure (list 'quote tm135f@who) (cons 'lambda (cons (append tm1360@fmls tm1361@last) (cons tm1362@b tm1363@b*)))))) (tmd48@invalid-fmls-error tm134d@stx (append tm1360@fmls tm1361@last)))) tm135d@ls/false) (let ((tm1369@t tm135b@t)) (let ((tm136b@ls/false (tmd8e@syntax-dispatch tm1369@t '(_ any any)))) (if tm136b@ls/false (apply (lambda (tm136d@who tm136e@expr) (if (tmb87@id? tm136d@who) (tmd44@bless (list 'define tm136d@who (list 'let (list (list 'v tm136e@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote tm136d@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (tme6e@syntax-violation '#f '"invalid name" tm134d@stx))) tm136b@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1369@t)))))))))))) (set! tm287c@tmd52@trace-define-macro tmd52@trace-define-macro) (set! tmd54@trace-define-syntax-macro (lambda (tm1371@stx) (let ((tm1373@t tm1371@stx)) (let ((tm1375@ls/false (tmd8e@syntax-dispatch tm1373@t '(_ any any)))) (if tm1375@ls/false (apply (lambda (tm1377@who tm1378@expr) (if (tmb87@id? tm1377@who) (tmd44@bless (list 'define-syntax tm1377@who (list 'make-traced-macro (list 'quote tm1377@who) tm1378@expr))) (tme6e@syntax-violation '#f '"invalid name" tm1371@stx))) tm1375@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1373@t)))))) (set! tm287d@tmd54@trace-define-syntax-macro tmd54@trace-define-syntax-macro) (set! tmd56@trace-let/rec-syntax (lambda (tm137b@who) (lambda (tm137d@stx) (let ((tm137f@t tm137d@stx)) (let ((tm1381@ls/false (tmd8e@syntax-dispatch tm137f@t '(_ #(each (any any)) any . each-any)))) (if tm1381@ls/false (apply (lambda (tm1383@lhs* tm1384@rhs* tm1385@b tm1386@b*) (if (tmb8f@valid-bound-ids? tm1383@lhs*) (let ((tm138b@rhs* (map (lambda (tm138d@lhs tm138e@rhs) (list 'make-traced-macro (list 'quote tm138d@lhs) tm138e@rhs)) tm1383@lhs* tm1384@rhs*))) (tmd44@bless (cons tm137b@who (cons (map list tm1383@lhs* tm138b@rhs*) (cons tm1385@b tm1386@b*))))) (tmd48@invalid-fmls-error tm137d@stx tm1383@lhs*))) tm1381@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm137f@t))))))) (set! tm287e@tmd56@trace-let/rec-syntax tmd56@trace-let/rec-syntax) (set! tmd58@trace-let-syntax-macro (tmd56@trace-let/rec-syntax 'let-syntax)) (set! tm287f@tmd58@trace-let-syntax-macro tmd58@trace-let-syntax-macro) (set! tmd5a@trace-letrec-syntax-macro (tmd56@trace-let/rec-syntax 'letrec-syntax)) (set! tm2880@tmd5a@trace-letrec-syntax-macro tmd5a@trace-letrec-syntax-macro) (set! tmd5c@guard-macro (lambda (tm1391@x) (letrec* ((tm1394@gen-clauses (lambda (tm13ab@con tm13ac@outerk tm13ad@clause*) (letrec* ((tm13b2@f (lambda (tm13eb@x tm13ec@k) (let ((tm13ef@t tm13eb@x)) (let ((tm13f1@ls/false (tmd8e@syntax-dispatch tm13ef@t '(any #(scheme-id =>) any)))) (if tm13f1@ls/false (apply (lambda (tm13f3@e tm13f4@p) (let ((tm13f7@t (gensym))) (list 'let (list (list tm13f7@t tm13f3@e)) (list 'if tm13f7@t (list tm13f4@p tm13f7@t) tm13ec@k)))) tm13f1@ls/false) (let ((tm13f9@t tm13ef@t)) (let ((tm13fb@ls/false (tmd8e@syntax-dispatch tm13f9@t '(any)))) (if tm13fb@ls/false (apply (lambda (tm13fd@e) (let ((tm13ff@t (gensym))) (list 'let (list (list tm13ff@t tm13fd@e)) (list 'if tm13ff@t tm13ff@t tm13ec@k)))) tm13fb@ls/false) (let ((tm1401@t tm13f9@t)) (let ((tm1403@ls/false (tmd8e@syntax-dispatch tm1401@t '(any any . each-any)))) (if tm1403@ls/false (apply (lambda (tm1405@e tm1406@v tm1407@v*) (list 'if tm1405@e (cons 'begin (cons tm1406@v tm1407@v*)) tm13ec@k)) tm1403@ls/false) (let ((tm140b@t tm1401@t)) (let ((tm140d@ls/false (tmd8e@syntax-dispatch tm140b@t '_))) (if tm140d@ls/false (apply (lambda () (tme6e@syntax-violation '#f '"invalid guard clause" tm13eb@x)) tm140d@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm140b@t))))))))))))))) (tm13b4@f* (lambda (tm13c1@x*) (let ((tm13c3@t tm13c1@x*)) (let ((tm13c5@ls/false (tmd8e@syntax-dispatch tm13c3@t '()))) (if tm13c5@ls/false (apply (lambda () (let ((tm13c7@g (gensym))) (values (list tm13c7@g (list 'lambda '() (list 'raise-continuable tm13ab@con))) tm13c7@g))) tm13c5@ls/false) (let ((tm13c9@t tm13c3@t)) (let ((tm13cb@ls/false (tmd8e@syntax-dispatch tm13c9@t '((#(scheme-id else) any . each-any))))) (if tm13cb@ls/false (apply (lambda (tm13cd@e tm13ce@e*) (values (cons 'begin (cons tm13cd@e tm13ce@e*)) '#f)) tm13cb@ls/false) (let ((tm13d1@t tm13c9@t)) (let ((tm13d3@ls/false (tmd8e@syntax-dispatch tm13d1@t '(any . any)))) (if tm13d3@ls/false (apply (lambda (tm13d5@cls tm13d6@cls*) (call-with-values (lambda () (tm13b4@f* tm13d6@cls*)) (lambda (tm13dd@tm13da tm13de@tm13dc) (let ((tm13e1@g tm13de@tm13dc) (tm13e2@e tm13dd@tm13da)) (values (tm13b2@f tm13d5@cls tm13e2@e) tm13e1@g))))) tm13d3@ls/false) (let ((tm13e5@t tm13d1@t)) (let ((tm13e7@ls/false (tmd8e@syntax-dispatch tm13e5@t 'any))) (if tm13e7@ls/false (apply (lambda (tm13e9@others) (tme6e@syntax-violation '#f '"invalid guard clause" tm13e9@others)) tm13e7@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm13e5@t)))))))))))))))) (call-with-values (lambda () (tm13b4@f* tm13ad@clause*)) (lambda (tm13b9@tm13b6 tm13ba@tm13b8) (let ((tm13bd@raisek tm13ba@tm13b8) (tm13be@code tm13b9@tm13b6)) (if tm13bd@raisek (list (list 'call/cc (list 'lambda (list tm13bd@raisek) (list tm13ac@outerk (list 'lambda '() tm13be@code))))) (list tm13ac@outerk (list 'lambda '() tm13be@code)))))))))) (let ((tm1395@t tm1391@x)) (let ((tm1397@ls/false (tmd8e@syntax-dispatch tm1395@t '(_ (any . each-any) any . each-any)))) (if (and tm1397@ls/false (apply (lambda (tm1399@con tm139a@clause* tm139b@b tm139c@b*) (tmb87@id? tm1399@con)) tm1397@ls/false)) (apply (lambda (tm13a1@con tm13a2@clause* tm13a3@b tm13a4@b*) (let ((tm13a9@outerk (gensym))) (tmd44@bless (list (list 'call/cc (list 'lambda (list tm13a9@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list tm13a1@con) (tm1394@gen-clauses tm13a1@con tm13a9@outerk tm13a2@clause*)) (cons 'lambda (cons '() (cons tm13a3@b tm13a4@b*))))))))))) tm1397@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1395@t))))))) (set! tm2881@tmd5c@guard-macro tmd5c@guard-macro) (set! tmd5e@define-enumeration-macro (lambda (tm140f@stx) (letrec* ((tm1412@set? (lambda (tm142b@x) (or (null? tm142b@x) (and (not (memq (car tm142b@x) (cdr tm142b@x))) (tm1412@set? (cdr tm142b@x)))))) (tm1414@remove-dups (lambda (tm1429@ls) (if (null? tm1429@ls) '() (cons (car tm1429@ls) (tm1414@remove-dups (remq (car tm1429@ls) (cdr tm1429@ls)))))))) (let ((tm1415@t tm140f@stx)) (let ((tm1417@ls/false (tmd8e@syntax-dispatch tm1415@t '(_ any each-any any)))) (if (and tm1417@ls/false (apply (lambda (tm1419@name tm141a@id* tm141b@maker) (and (tmb87@id? tm1419@name) (tmb87@id? tm141b@maker) (for-all tmb87@id? tm141a@id*))) tm1417@ls/false)) (apply (lambda (tm141f@name tm1420@id* tm1421@maker) (let ((tm1425@name* (tm1414@remove-dups (tme74@syntax->datum tm1420@id*))) (tm1426@mk (gensym))) (tmd44@bless (list 'begin (list 'define tm1426@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote tm1425@name*)))) (list 'define-syntax tm141f@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote tm1425@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote tm141f@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax tm1421@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote tm1421@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote tm1425@name*)) (cons 'syntax-violation (cons (list 'quote tm1421@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons tm1426@mk '('(n* ...))))))))))))) tm1417@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1415@t))))))) (set! tm2882@tmd5e@define-enumeration-macro tmd5e@define-enumeration-macro) (set! tmd60@time-macro (lambda (tm142d@stx) (let ((tm142f@t tm142d@stx)) (let ((tm1431@ls/false (tmd8e@syntax-dispatch tm142f@t '(_ any)))) (if tm1431@ls/false (apply (lambda (tm1433@expr) (tmd44@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() tm1433@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) tm1431@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm142f@t)))))) (set! tm2883@tmd60@time-macro tmd60@time-macro) (set! tmd62@delay-macro (lambda (tm1435@stx) (let ((tm1437@t tm1435@stx)) (let ((tm1439@ls/false (tmd8e@syntax-dispatch tm1437@t '(_ any)))) (if tm1439@ls/false (apply (lambda (tm143b@expr) (tmd44@bless (list 'make-promise (list 'lambda '() tm143b@expr)))) tm1439@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1437@t)))))) (set! tm2884@tmd62@delay-macro tmd62@delay-macro) (set! tmd64@assert-macro (lambda (tm143d@stx) (let ((tm143f@t tm143d@stx)) (let ((tm1441@ls/false (tmd8e@syntax-dispatch tm143f@t '(_ any)))) (if tm1441@ls/false (apply (lambda (tm1443@expr) (let ((tm1445@pos (or (tme66@expression-position tm143d@stx) (tme66@expression-position tm1443@expr)))) (tmd44@bless (list 'let (list (list 'x tm1443@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote tm1443@expr) (list 'quote tm1445@pos))))))) tm1441@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm143f@t)))))) (set! tm2885@tmd64@assert-macro tmd64@assert-macro) (set! tmd66@endianness-macro (lambda (tm1447@stx) (let ((tm1449@t tm1447@stx)) (let ((tm144b@ls/false (tmd8e@syntax-dispatch tm1449@t '(_ any)))) (if tm144b@ls/false (apply (lambda (tm144d@e) (let ((tm144f@t (tme74@syntax->datum tm144d@e))) (if (memv tm144f@t '(little)) (tmd44@bless ''little) (if (memv tm144f@t '(big)) (tmd44@bless ''big) (tme6e@syntax-violation '#f '"endianness must be big or little" tm1447@stx))))) tm144b@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1449@t)))))) (set! tm2886@tmd66@endianness-macro tmd66@endianness-macro) (set! tmd68@identifier-syntax-macro (lambda (tm1451@stx) (let ((tm1453@t tm1451@stx)) (let ((tm1455@ls/false (tmd8e@syntax-dispatch tm1453@t '(_ any)))) (if tm1455@ls/false (apply (lambda (tm1457@expr) (tmd44@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax tm1457@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax tm1457@expr) '((syntax (e* ...)))))))))) tm1455@ls/false) (let ((tm1459@t tm1453@t)) (let ((tm145b@ls/false (tmd8e@syntax-dispatch tm1459@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and tm145b@ls/false (apply (lambda (tm145d@id1 tm145e@expr1 tm145f@id2 tm1460@expr2 tm1461@expr3) (and (tmb87@id? tm145d@id1) (tmb87@id? tm145f@id2) (tmb87@id? tm1460@expr2))) tm145b@ls/false)) (apply (lambda (tm1467@id1 tm1468@expr1 tm1469@id2 tm146a@expr2 tm146b@expr3) (tmd44@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax tm1468@expr1)) (list (list 'set! 'id tm146a@expr2) (list 'syntax tm146b@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons tm1468@expr1 '(e* ...))))))))) tm145b@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1459@t))))))))) (set! tm2887@tmd68@identifier-syntax-macro tmd68@identifier-syntax-macro) (set! tmd6a@do-macro (lambda (tm1471@stx) (letrec* ((tm1474@bind (lambda (tm148b@x) (let ((tm148d@t tm148b@x)) (let ((tm148f@ls/false (tmd8e@syntax-dispatch tm148d@t '(any any)))) (if tm148f@ls/false (apply (lambda (tm1491@x tm1492@init) (list tm1491@x tm1492@init tm1491@x)) tm148f@ls/false) (let ((tm1495@t tm148d@t)) (let ((tm1497@ls/false (tmd8e@syntax-dispatch tm1495@t '(any any any)))) (if tm1497@ls/false (apply (lambda (tm1499@x tm149a@init tm149b@step) (list tm1499@x tm149a@init tm149b@step)) tm1497@ls/false) (let ((tm149f@t tm1495@t)) (let ((tm14a1@ls/false (tmd8e@syntax-dispatch tm149f@t '_))) (if tm14a1@ls/false (apply (lambda () (tme6e@syntax-violation '#f '"invalid binding" tm1471@stx)) tm14a1@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm149f@t))))))))))))) (let ((tm1475@t tm1471@stx)) (let ((tm1477@ls/false (tmd8e@syntax-dispatch tm1475@t '(_ each-any (any . each-any) . each-any)))) (if tm1477@ls/false (apply (lambda (tm1479@binding* tm147a@test tm147b@expr* tm147c@command*) (let ((tm1481@t (map tm1474@bind tm1479@binding*))) (let ((tm1483@ls/false (tmd8e@syntax-dispatch tm1481@t '#(each (any any any))))) (if tm1483@ls/false (apply (lambda (tm1485@x* tm1486@init* tm1487@step*) (if (tmb8f@valid-bound-ids? tm1485@x*) (tmd44@bless (list 'letrec (list (list 'loop (list 'lambda tm1485@x* (list 'if tm147a@test (cons 'begin (cons '(if #f #f) tm147b@expr*)) (cons 'begin (append tm147c@command* (list (cons 'loop tm1487@step*)))))))) (cons 'loop tm1486@init*))) (tme6e@syntax-violation '#f '"invalid bindings" tm1471@stx))) tm1483@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1481@t))))) tm1477@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1475@t))))))) (set! tm2888@tmd6a@do-macro tmd6a@do-macro) (set! tmd6c@let*-macro (lambda (tm14a3@stx) (let ((tm14a5@t tm14a3@stx)) (let ((tm14a7@ls/false (tmd8e@syntax-dispatch tm14a5@t '(_ #(each (any any)) any . each-any)))) (if (and tm14a7@ls/false (apply (lambda (tm14a9@lhs* tm14aa@rhs* tm14ab@b tm14ac@b*) (for-all tmb87@id? tm14a9@lhs*)) tm14a7@ls/false)) (apply (lambda (tm14b1@lhs* tm14b2@rhs* tm14b3@b tm14b4@b*) (tmd44@bless (let tm14bb@f ((tm14b9@x* (map list tm14b1@lhs* tm14b2@rhs*))) (if (null? tm14b9@x*) (cons 'let (cons '() (cons tm14b3@b tm14b4@b*))) (list 'let (list (car tm14b9@x*)) (tm14bb@f (cdr tm14b9@x*))))))) tm14a7@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm14a5@t)))))) (set! tm2889@tmd6c@let*-macro tmd6c@let*-macro) (set! tmd6e@or-macro (lambda (tm14bd@stx) (let ((tm14bf@t tm14bd@stx)) (let ((tm14c1@ls/false (tmd8e@syntax-dispatch tm14bf@t '(_)))) (if tm14c1@ls/false (apply (lambda () '#f) tm14c1@ls/false) (let ((tm14c3@t tm14bf@t)) (let ((tm14c5@ls/false (tmd8e@syntax-dispatch tm14c3@t '(_ any . each-any)))) (if tm14c5@ls/false (apply (lambda (tm14c7@e tm14c8@e*) (tmd44@bless (let tm14cf@f ((tm14cb@e tm14c7@e) (tm14cc@e* tm14c8@e*)) (if (null? tm14cc@e*) (list 'begin '#f tm14cb@e) (list 'let (list (list 't tm14cb@e)) (list 'if 't 't (tm14cf@f (car tm14cc@e*) (cdr tm14cc@e*)))))))) tm14c5@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm14c3@t))))))))) (set! tm288a@tmd6e@or-macro tmd6e@or-macro) (set! tmd70@and-macro (lambda (tm14d1@stx) (let ((tm14d3@t tm14d1@stx)) (let ((tm14d5@ls/false (tmd8e@syntax-dispatch tm14d3@t '(_)))) (if tm14d5@ls/false (apply (lambda () '#t) tm14d5@ls/false) (let ((tm14d7@t tm14d3@t)) (let ((tm14d9@ls/false (tmd8e@syntax-dispatch tm14d7@t '(_ any . each-any)))) (if tm14d9@ls/false (apply (lambda (tm14db@e tm14dc@e*) (tmd44@bless (let tm14e3@f ((tm14df@e tm14db@e) (tm14e0@e* tm14dc@e*)) (if (null? tm14e0@e*) (list 'begin '#f tm14df@e) (cons 'if (cons tm14df@e (cons (tm14e3@f (car tm14e0@e*) (cdr tm14e0@e*)) '(#f)))))))) tm14d9@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm14d7@t))))))))) (set! tm288b@tmd70@and-macro tmd70@and-macro) (set! tmd72@cond-macro (lambda (tm14e5@stx) (let ((tm14e7@t tm14e5@stx)) (let ((tm14e9@ls/false (tmd8e@syntax-dispatch tm14e7@t '(_ any . each-any)))) (if tm14e9@ls/false (apply (lambda (tm14eb@cls tm14ec@cls*) (tmd44@bless (let tm14f3@f ((tm14ef@cls tm14eb@cls) (tm14f0@cls* tm14ec@cls*)) (if (null? tm14f0@cls*) (let ((tm14f5@t tm14ef@cls)) (let ((tm14f7@ls/false (tmd8e@syntax-dispatch tm14f5@t '(#(scheme-id else) any . each-any)))) (if tm14f7@ls/false (apply (lambda (tm14f9@e tm14fa@e*) (cons 'begin (cons tm14f9@e tm14fa@e*))) tm14f7@ls/false) (let ((tm14fd@t tm14f5@t)) (let ((tm14ff@ls/false (tmd8e@syntax-dispatch tm14fd@t '(any #(scheme-id =>) any)))) (if tm14ff@ls/false (apply (lambda (tm1501@e tm1502@p) (list 'let (list (list 't tm1501@e)) (list 'if 't (cons tm1502@p '(t))))) tm14ff@ls/false) (let ((tm1505@t tm14fd@t)) (let ((tm1507@ls/false (tmd8e@syntax-dispatch tm1505@t '(any)))) (if tm1507@ls/false (apply (lambda (tm1509@e) (cons 'or (cons tm1509@e '((if #f #f))))) tm1507@ls/false) (let ((tm150b@t tm1505@t)) (let ((tm150d@ls/false (tmd8e@syntax-dispatch tm150b@t '(any . each-any)))) (if tm150d@ls/false (apply (lambda (tm150f@e tm1510@e*) (list 'if tm150f@e (cons 'begin tm1510@e*))) tm150d@ls/false) (let ((tm1513@t tm150b@t)) (let ((tm1515@ls/false (tmd8e@syntax-dispatch tm1513@t '_))) (if tm1515@ls/false (apply (lambda () (tme6e@syntax-violation '#f '"invalid last clause" tm14e5@stx)) tm1515@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1513@t)))))))))))))))) (let ((tm1517@t tm14ef@cls)) (let ((tm1519@ls/false (tmd8e@syntax-dispatch tm1517@t '(#(scheme-id else) any . each-any)))) (if tm1519@ls/false (apply (lambda (tm151b@e tm151c@e*) (tme6e@syntax-violation '#f '"incorrect position of keyword else" tm14e5@stx)) tm1519@ls/false) (let ((tm151f@t tm1517@t)) (let ((tm1521@ls/false (tmd8e@syntax-dispatch tm151f@t '(any #(scheme-id =>) any)))) (if tm1521@ls/false (apply (lambda (tm1523@e tm1524@p) (list 'let (list (list 't tm1523@e)) (list 'if 't (cons tm1524@p '(t)) (tm14f3@f (car tm14f0@cls*) (cdr tm14f0@cls*))))) tm1521@ls/false) (let ((tm1527@t tm151f@t)) (let ((tm1529@ls/false (tmd8e@syntax-dispatch tm1527@t '(any)))) (if tm1529@ls/false (apply (lambda (tm152b@e) (list 'or tm152b@e (tm14f3@f (car tm14f0@cls*) (cdr tm14f0@cls*)))) tm1529@ls/false) (let ((tm152d@t tm1527@t)) (let ((tm152f@ls/false (tmd8e@syntax-dispatch tm152d@t '(any . each-any)))) (if tm152f@ls/false (apply (lambda (tm1531@e tm1532@e*) (list 'if tm1531@e (cons 'begin tm1532@e*) (tm14f3@f (car tm14f0@cls*) (cdr tm14f0@cls*)))) tm152f@ls/false) (let ((tm1535@t tm152d@t)) (let ((tm1537@ls/false (tmd8e@syntax-dispatch tm1535@t '_))) (if tm1537@ls/false (apply (lambda () (tme6e@syntax-violation '#f '"invalid last clause" tm14e5@stx)) tm1537@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1535@t)))))))))))))))))))) tm14e9@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm14e7@t)))))) (set! tm288c@tmd72@cond-macro tmd72@cond-macro) (set! tmd74@do-include (lambda (tm1539@stx tm153a@id tm153b@filename) (let ((tm153f@filename (tmb9b@stx->datum tm153b@filename))) (begin (if (not (and (string? tm153f@filename) (tmb87@id? tm153a@id))) (tme6e@syntax-violation '#f '"invalid syntax" tm1539@stx) (void)) (cons (tmd44@bless 'begin) (with-input-from-file tm153f@filename (lambda () (let tm1543@f ((tm1541@ls '())) (let ((tm1545@x (tm6c9@tm599@read-annotated))) (if (eof-object? tm1545@x) (reverse tm1541@ls) (tm1543@f (cons (tmb67@datum->stx tm153a@id tm1545@x) tm1541@ls)))))))))))) (set! tm288d@tmd74@do-include tmd74@do-include) (set! tmd76@include-macro (lambda (tm1547@e) (let ((tm1549@t tm1547@e)) (let ((tm154b@ls/false (tmd8e@syntax-dispatch tm1549@t '(any any)))) (if tm154b@ls/false (apply (lambda (tm154d@id tm154e@filename) (tmd74@do-include tm1547@e tm154d@id tm154e@filename)) tm154b@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1549@t)))))) (set! tm288e@tmd76@include-macro tmd76@include-macro) (set! tmd78@include-into-macro (lambda (tm1551@e) (let ((tm1553@t tm1551@e)) (let ((tm1555@ls/false (tmd8e@syntax-dispatch tm1553@t '(_ any any)))) (if tm1555@ls/false (apply (lambda (tm1557@id tm1558@filename) (tmd74@do-include tm1551@e tm1557@id tm1558@filename)) tm1555@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1553@t)))))) (set! tm288f@tmd78@include-into-macro tmd78@include-into-macro) (set! tmd7a@syntax-rules-macro (lambda (tm155b@e) (let ((tm155d@t tm155b@e)) (let ((tm155f@ls/false (tmd8e@syntax-dispatch tm155d@t '(_ each-any . #(each (any any)))))) (if tm155f@ls/false (apply (lambda (tm1561@lits tm1562@pat* tm1563@tmp*) (begin (tmd94@verify-literals tm1561@lits tm155b@e) (tmd44@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons tm1561@lits (map (lambda (tm1567@pat tm1568@tmp) (let ((tm156b@t tm1567@pat)) (let ((tm156d@ls/false (tmd8e@syntax-dispatch tm156b@t '(_ . any)))) (if tm156d@ls/false (apply (lambda (tm156f@rest) (list (cons 'g tm156f@rest) (list 'syntax tm1568@tmp))) tm156d@ls/false) (let ((tm1571@t tm156b@t)) (let ((tm1573@ls/false (tmd8e@syntax-dispatch tm1571@t '_))) (if tm1573@ls/false (apply (lambda () (tme6e@syntax-violation '#f '"invalid syntax-rules pattern" tm155b@e tm1567@pat)) tm1573@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1571@t)))))))) tm1562@pat* tm1563@tmp*)))))))) tm155f@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm155d@t)))))) (set! tm2890@tmd7a@syntax-rules-macro tmd7a@syntax-rules-macro) (set! tmd7c@quasiquote-macro (letrec* ((tm1576@datum (lambda (tm1677@x) (list (tmd16@scheme-stx 'quote) (tmb6f@mkstx tm1677@x tmb0b@top-mark* '() '())))) (tm1592@quasicons* (lambda (tm166f@x tm1670@y) (let tm1675@f ((tm1673@x tm166f@x)) (if (null? tm1673@x) tm1670@y (tm1594@quasicons (car tm1673@x) (tm1675@f (cdr tm1673@x))))))) (tm1594@quasicons (lambda (tm1649@x tm164a@y) (let ((tm164d@t tm164a@y)) (let ((tm164f@ls/false (tmd8e@syntax-dispatch tm164d@t '(#(scheme-id quote) any)))) (if tm164f@ls/false (apply (lambda (tm1651@dy) (let ((tm1653@t tm1649@x)) (let ((tm1655@ls/false (tmd8e@syntax-dispatch tm1653@t '(#(scheme-id quote) any)))) (if tm1655@ls/false (apply (lambda (tm1657@dx) (list (tmd16@scheme-stx 'quote) (cons tm1657@dx tm1651@dy))) tm1655@ls/false) (let ((tm1659@t tm1653@t)) (let ((tm165b@ls/false (tmd8e@syntax-dispatch tm1659@t '_))) (if tm165b@ls/false (apply (lambda () (let ((tm165d@t tm1651@dy)) (let ((tm165f@ls/false (tmd8e@syntax-dispatch tm165d@t '()))) (if tm165f@ls/false (apply (lambda () (list (tmd16@scheme-stx 'list) tm1649@x)) tm165f@ls/false) (let ((tm1661@t tm165d@t)) (let ((tm1663@ls/false (tmd8e@syntax-dispatch tm1661@t '_))) (if tm1663@ls/false (apply (lambda () (list (tmd16@scheme-stx 'cons) tm1649@x tm164a@y)) tm1663@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1661@t)))))))) tm165b@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1659@t)))))))) tm164f@ls/false) (let ((tm1665@t tm164d@t)) (let ((tm1667@ls/false (tmd8e@syntax-dispatch tm1665@t '(#(scheme-id list) . each-any)))) (if tm1667@ls/false (apply (lambda (tm1669@stuff) (cons* (tmd16@scheme-stx 'list) tm1649@x tm1669@stuff)) tm1667@ls/false) (let ((tm166b@t tm1665@t)) (let ((tm166d@ls/false (tmd8e@syntax-dispatch tm166b@t '_))) (if tm166d@ls/false (apply (lambda () (list (tmd16@scheme-stx 'cons) tm1649@x tm164a@y)) tm166d@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm166b@t)))))))))))) (tm1596@quasiappend (lambda (tm162f@x tm1630@y) (let ((tm1633@ls (let tm1637@f ((tm1635@x tm162f@x)) (if (null? tm1635@x) (let ((tm1639@t tm1630@y)) (let ((tm163b@ls/false (tmd8e@syntax-dispatch tm1639@t '(#(scheme-id quote) ())))) (if tm163b@ls/false (apply (lambda () '()) tm163b@ls/false) (let ((tm163d@t tm1639@t)) (let ((tm163f@ls/false (tmd8e@syntax-dispatch tm163d@t '_))) (if tm163f@ls/false (apply (lambda () (list tm1630@y)) tm163f@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm163d@t))))))) (let ((tm1641@t (car tm1635@x))) (let ((tm1643@ls/false (tmd8e@syntax-dispatch tm1641@t '(#(scheme-id quote) ())))) (if tm1643@ls/false (apply (lambda () (tm1637@f (cdr tm1635@x))) tm1643@ls/false) (let ((tm1645@t tm1641@t)) (let ((tm1647@ls/false (tmd8e@syntax-dispatch tm1645@t '_))) (if tm1647@ls/false (apply (lambda () (cons (car tm1635@x) (tm1637@f (cdr tm1635@x)))) tm1647@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1645@t))))))))))) (if (null? tm1633@ls) (list (tmd16@scheme-stx 'quote) '()) (if (null? (cdr tm1633@ls)) (car tm1633@ls) (cons* (tmd16@scheme-stx 'append) tm1633@ls)))))) (tm1598@quasivector (lambda (tm15fd@x) (let ((tm15ff@pat-x tm15fd@x)) (let ((tm1601@t tm15ff@pat-x)) (let ((tm1603@ls/false (tmd8e@syntax-dispatch tm1601@t '(#(scheme-id quote) each-any)))) (if tm1603@ls/false (apply (lambda (tm1605@x*) (list (tmd16@scheme-stx 'quote) (list->vector tm1605@x*))) tm1603@ls/false) (let ((tm1607@t tm1601@t)) (let ((tm1609@ls/false (tmd8e@syntax-dispatch tm1607@t '_))) (if tm1609@ls/false (apply (lambda () (let tm1611@f ((tm160b@x tm15fd@x) (tm160c@k (lambda (tm160f@ls) (cons* (tmd16@scheme-stx 'vector) tm160f@ls)))) (let ((tm1613@t tm160b@x)) (let ((tm1615@ls/false (tmd8e@syntax-dispatch tm1613@t '(#(scheme-id quote) each-any)))) (if tm1615@ls/false (apply (lambda (tm1617@x*) (tm160c@k (map (lambda (tm1619@x) (list (tmd16@scheme-stx 'quote) tm1619@x)) tm1617@x*))) tm1615@ls/false) (let ((tm161b@t tm1613@t)) (let ((tm161d@ls/false (tmd8e@syntax-dispatch tm161b@t '(#(scheme-id list) . each-any)))) (if tm161d@ls/false (apply (lambda (tm161f@x*) (tm160c@k tm161f@x*)) tm161d@ls/false) (let ((tm1621@t tm161b@t)) (let ((tm1623@ls/false (tmd8e@syntax-dispatch tm1621@t '(#(scheme-id cons) any any)))) (if tm1623@ls/false (apply (lambda (tm1625@x tm1626@y) (tm1611@f tm1626@y (lambda (tm1629@ls) (tm160c@k (cons tm1625@x tm1629@ls))))) tm1623@ls/false) (let ((tm162b@t tm1621@t)) (let ((tm162d@ls/false (tmd8e@syntax-dispatch tm162b@t '_))) (if tm162d@ls/false (apply (lambda () (list (tmd16@scheme-stx 'list->vector) tm15ff@pat-x)) tm162d@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm162b@t))))))))))))))) tm1609@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1607@t)))))))))) (tm159a@vquasi (lambda (tm15db@p tm15dc@lev) (let ((tm15df@t tm15db@p)) (let ((tm15e1@ls/false (tmd8e@syntax-dispatch tm15df@t '(any . any)))) (if tm15e1@ls/false (apply (lambda (tm15e3@p tm15e4@q) (let ((tm15e7@t tm15e3@p)) (let ((tm15e9@ls/false (tmd8e@syntax-dispatch tm15e7@t '(#(scheme-id unquote) . each-any)))) (if tm15e9@ls/false (apply (lambda (tm15eb@p) (if (= tm15dc@lev '0) (tm1592@quasicons* tm15eb@p (tm159a@vquasi tm15e4@q tm15dc@lev)) (tm1594@quasicons (tm1594@quasicons (tm1576@datum 'unquote) (tm159c@quasi tm15eb@p (- tm15dc@lev '1))) (tm159a@vquasi tm15e4@q tm15dc@lev)))) tm15e9@ls/false) (let ((tm15ed@t tm15e7@t)) (let ((tm15ef@ls/false (tmd8e@syntax-dispatch tm15ed@t '(#(scheme-id unquote-splicing) . each-any)))) (if tm15ef@ls/false (apply (lambda (tm15f1@p) (if (= tm15dc@lev '0) (tm1596@quasiappend tm15f1@p (tm159a@vquasi tm15e4@q tm15dc@lev)) (tm1594@quasicons (tm1594@quasicons (tm1576@datum 'unquote-splicing) (tm159c@quasi tm15f1@p (- tm15dc@lev '1))) (tm159a@vquasi tm15e4@q tm15dc@lev)))) tm15ef@ls/false) (let ((tm15f3@t tm15ed@t)) (let ((tm15f5@ls/false (tmd8e@syntax-dispatch tm15f3@t 'any))) (if tm15f5@ls/false (apply (lambda (tm15f7@p) (tm1594@quasicons (tm159c@quasi tm15f7@p tm15dc@lev) (tm159a@vquasi tm15e4@q tm15dc@lev))) tm15f5@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm15f3@t))))))))))) tm15e1@ls/false) (let ((tm15f9@t tm15df@t)) (let ((tm15fb@ls/false (tmd8e@syntax-dispatch tm15f9@t '()))) (if tm15fb@ls/false (apply (lambda () (list (tmd16@scheme-stx 'quote) '())) tm15fb@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm15f9@t))))))))) (tm159c@quasi (lambda (tm15a5@p tm15a6@lev) (let ((tm15a9@t tm15a5@p)) (let ((tm15ab@ls/false (tmd8e@syntax-dispatch tm15a9@t '(#(scheme-id unquote) any)))) (if tm15ab@ls/false (apply (lambda (tm15ad@p) (if (= tm15a6@lev '0) tm15ad@p (tm1594@quasicons (tm1576@datum 'unquote) (tm159c@quasi (list tm15ad@p) (- tm15a6@lev '1))))) tm15ab@ls/false) (let ((tm15af@t tm15a9@t)) (let ((tm15b1@ls/false (tmd8e@syntax-dispatch tm15af@t '((#(scheme-id unquote) . each-any) . any)))) (if tm15b1@ls/false (apply (lambda (tm15b3@p tm15b4@q) (if (= tm15a6@lev '0) (tm1592@quasicons* tm15b3@p (tm159c@quasi tm15b4@q tm15a6@lev)) (tm1594@quasicons (tm1594@quasicons (tm1576@datum 'unquote) (tm159c@quasi tm15b3@p (- tm15a6@lev '1))) (tm159c@quasi tm15b4@q tm15a6@lev)))) tm15b1@ls/false) (let ((tm15b7@t tm15af@t)) (let ((tm15b9@ls/false (tmd8e@syntax-dispatch tm15b7@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if tm15b9@ls/false (apply (lambda (tm15bb@p tm15bc@q) (if (= tm15a6@lev '0) (tm1596@quasiappend tm15bb@p (tm159c@quasi tm15bc@q tm15a6@lev)) (tm1594@quasicons (tm1594@quasicons (tm1576@datum 'unquote-splicing) (tm159c@quasi tm15bb@p (- tm15a6@lev '1))) (tm159c@quasi tm15bc@q tm15a6@lev)))) tm15b9@ls/false) (let ((tm15bf@t tm15b7@t)) (let ((tm15c1@ls/false (tmd8e@syntax-dispatch tm15bf@t '(#(scheme-id quasiquote) any)))) (if tm15c1@ls/false (apply (lambda (tm15c3@p) (tm1594@quasicons (tm1576@datum 'quasiquote) (tm159c@quasi (list tm15c3@p) (+ tm15a6@lev '1)))) tm15c1@ls/false) (let ((tm15c5@t tm15bf@t)) (let ((tm15c7@ls/false (tmd8e@syntax-dispatch tm15c5@t '(any . any)))) (if tm15c7@ls/false (apply (lambda (tm15c9@p tm15ca@q) (tm1594@quasicons (tm159c@quasi tm15c9@p tm15a6@lev) (tm159c@quasi tm15ca@q tm15a6@lev))) tm15c7@ls/false) (let ((tm15cd@t tm15c5@t)) (let ((tm15cf@ls/false (tmd8e@syntax-dispatch tm15cd@t '#(vector each-any)))) (if (and tm15cf@ls/false (apply (lambda (tm15d1@x) (not (tmb53@stx? tm15d1@x))) tm15cf@ls/false)) (apply (lambda (tm15d3@x) (tm1598@quasivector (tm159a@vquasi tm15d3@x tm15a6@lev))) tm15cf@ls/false) (let ((tm15d5@t tm15cd@t)) (let ((tm15d7@ls/false (tmd8e@syntax-dispatch tm15d5@t 'any))) (if tm15d7@ls/false (apply (lambda (tm15d9@p) (list (tmd16@scheme-stx 'quote) tm15d9@p)) tm15d7@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm15d5@t))))))))))))))))))))))))) (lambda (tm159d@x) (let ((tm159f@t tm159d@x)) (let ((tm15a1@ls/false (tmd8e@syntax-dispatch tm159f@t '(_ any)))) (if tm15a1@ls/false (apply (lambda (tm15a3@e) (tm159c@quasi tm15a3@e '0)) tm15a1@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm159f@t))))))) (set! tm2891@tmd7c@quasiquote-macro tmd7c@quasiquote-macro) (set! tmd7e@quasisyntax-macro (letrec* ((tm167a@quasi (lambda (tm1695@p tm1696@lev) (let ((tm1699@t tm1695@p)) (let ((tm169b@ls/false (tmd8e@syntax-dispatch tm1699@t '(#(scheme-id unsyntax) any)))) (if tm169b@ls/false (apply (lambda (tm169d@p) (if (= tm1696@lev '0) (let ((tm169f@g (gensym))) (values (list tm169f@g) (list tm169d@p) tm169f@g)) (call-with-values (lambda () (tm167a@quasi tm169d@p (- tm1696@lev '1))) (lambda (tm16a7@tm16a2 tm16a8@tm16a4 tm16a9@tm16a6) (let ((tm16ad@p tm16a9@tm16a6) (tm16ae@rhs* tm16a8@tm16a4) (tm16af@lhs* tm16a7@tm16a2)) (values tm16af@lhs* tm16ae@rhs* (list 'unsyntax tm16ad@p))))))) tm169b@ls/false) (let ((tm16b3@t tm1699@t)) (let ((tm16b5@ls/false (tmd8e@syntax-dispatch tm16b3@t '#(scheme-id unsyntax)))) (if (and tm16b5@ls/false (apply (lambda () (= tm1696@lev '0)) tm16b5@ls/false)) (apply (lambda () (tme6e@syntax-violation '#f '"incorrect use of unsyntax" tm1695@p)) tm16b5@ls/false) (let ((tm16b7@t tm16b3@t)) (let ((tm16b9@ls/false (tmd8e@syntax-dispatch tm16b7@t '((#(scheme-id unsyntax) . each-any) . any)))) (if tm16b9@ls/false (apply (lambda (tm16bb@p* tm16bc@q) (call-with-values (lambda () (tm167a@quasi tm16bc@q tm1696@lev)) (lambda (tm16c5@tm16c0 tm16c6@tm16c2 tm16c7@tm16c4) (let ((tm16cb@q tm16c7@tm16c4) (tm16cc@rhs* tm16c6@tm16c2) (tm16cd@lhs* tm16c5@tm16c0)) (if (= tm1696@lev '0) (let ((tm16d1@g* (map (lambda (tm16d3@x) (gensym)) tm16bb@p*))) (values (append tm16d1@g* tm16cd@lhs*) (append tm16bb@p* tm16cc@rhs*) (append tm16d1@g* tm16cb@q))) (call-with-values (lambda () (tm167a@quasi tm16bb@p* (- tm1696@lev '1))) (lambda (tm16db@tm16d6 tm16dc@tm16d8 tm16dd@tm16da) (let ((tm16e1@p* tm16dd@tm16da) (tm16e2@rhs2* tm16dc@tm16d8) (tm16e3@lhs2* tm16db@tm16d6)) (values (append tm16e3@lhs2* tm16cd@lhs*) (append tm16e2@rhs2* tm16cc@rhs*) (cons (cons 'unsyntax tm16e1@p*) tm16cb@q)))))))))) tm16b9@ls/false) (let ((tm16e7@t tm16b7@t)) (let ((tm16e9@ls/false (tmd8e@syntax-dispatch tm16e7@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if tm16e9@ls/false (apply (lambda (tm16eb@p* tm16ec@q) (call-with-values (lambda () (tm167a@quasi tm16ec@q tm1696@lev)) (lambda (tm16f5@tm16f0 tm16f6@tm16f2 tm16f7@tm16f4) (let ((tm16fb@q tm16f7@tm16f4) (tm16fc@rhs* tm16f6@tm16f2) (tm16fd@lhs* tm16f5@tm16f0)) (if (= tm1696@lev '0) (let ((tm1701@g* (map (lambda (tm1703@x) (gensym)) tm16eb@p*))) (values (append (map (lambda (tm1705@g) (cons tm1705@g '(...))) tm1701@g*) tm16fd@lhs*) (append tm16eb@p* tm16fc@rhs*) (append (apply append (map (lambda (tm1707@g) (cons tm1707@g '(...))) tm1701@g*)) tm16fb@q))) (call-with-values (lambda () (tm167a@quasi tm16eb@p* (- tm1696@lev '1))) (lambda (tm170f@tm170a tm1710@tm170c tm1711@tm170e) (let ((tm1715@p* tm1711@tm170e) (tm1716@rhs2* tm1710@tm170c) (tm1717@lhs2* tm170f@tm170a)) (values (append tm1717@lhs2* tm16fd@lhs*) (append tm1716@rhs2* tm16fc@rhs*) (cons (cons 'unsyntax-splicing tm1715@p*) tm16fb@q)))))))))) tm16e9@ls/false) (let ((tm171b@t tm16e7@t)) (let ((tm171d@ls/false (tmd8e@syntax-dispatch tm171b@t '#(scheme-id unsyntax-splicing)))) (if (and tm171d@ls/false (apply (lambda () (= tm1696@lev '0)) tm171d@ls/false)) (apply (lambda () (tme6e@syntax-violation '#f '"incorrect use of unsyntax-splicing" tm1695@p)) tm171d@ls/false) (let ((tm171f@t tm171b@t)) (let ((tm1721@ls/false (tmd8e@syntax-dispatch tm171f@t '(#(scheme-id quasisyntax) any)))) (if tm1721@ls/false (apply (lambda (tm1723@p) (call-with-values (lambda () (tm167a@quasi tm1723@p (+ tm1696@lev '1))) (lambda (tm172b@tm1726 tm172c@tm1728 tm172d@tm172a) (let ((tm1731@p tm172d@tm172a) (tm1732@rhs* tm172c@tm1728) (tm1733@lhs* tm172b@tm1726)) (values tm1733@lhs* tm1732@rhs* (list 'quasisyntax tm1731@p)))))) tm1721@ls/false) (let ((tm1737@t tm171f@t)) (let ((tm1739@ls/false (tmd8e@syntax-dispatch tm1737@t '(any . any)))) (if tm1739@ls/false (apply (lambda (tm173b@p tm173c@q) (call-with-values (lambda () (tm167a@quasi tm173b@p tm1696@lev)) (lambda (tm174b@tm1740 tm174c@tm1742 tm174d@tm1744) (call-with-values (lambda () (tm167a@quasi tm173c@q tm1696@lev)) (lambda (tm1751@tm1746 tm1752@tm1748 tm1753@tm174a) (let ((tm1757@q tm1753@tm174a) (tm1758@rhs2* tm1752@tm1748) (tm1759@lhs2* tm1751@tm1746) (tm175a@p tm174d@tm1744) (tm175b@rhs* tm174c@tm1742) (tm175c@lhs* tm174b@tm1740)) (values (append tm1759@lhs2* tm175c@lhs*) (append tm1758@rhs2* tm175b@rhs*) (cons tm175a@p tm1757@q)))))))) tm1739@ls/false) (let ((tm1763@t tm1737@t)) (let ((tm1765@ls/false (tmd8e@syntax-dispatch tm1763@t '#(vector each-any)))) (if tm1765@ls/false (apply (lambda (tm1767@x*) (call-with-values (lambda () (tm167a@quasi tm1767@x* tm1696@lev)) (lambda (tm176f@tm176a tm1770@tm176c tm1771@tm176e) (let ((tm1775@x* tm1771@tm176e) (tm1776@rhs* tm1770@tm176c) (tm1777@lhs* tm176f@tm176a)) (values tm1777@lhs* tm1776@rhs* (list->vector tm1775@x*)))))) tm1765@ls/false) (let ((tm177b@t tm1763@t)) (let ((tm177d@ls/false (tmd8e@syntax-dispatch tm177b@t '_))) (if tm177d@ls/false (apply (lambda () (values '() '() tm1695@p)) tm177d@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm177b@t))))))))))))))))))))))))))))))) (lambda (tm167b@x) (let ((tm167d@t tm167b@x)) (let ((tm167f@ls/false (tmd8e@syntax-dispatch tm167d@t '(_ any)))) (if tm167f@ls/false (apply (lambda (tm1681@e) (call-with-values (lambda () (tm167a@quasi tm1681@e '0)) (lambda (tm1689@tm1684 tm168a@tm1686 tm168b@tm1688) (let ((tm168f@v tm168b@tm1688) (tm1690@rhs* tm168a@tm1686) (tm1691@lhs* tm1689@tm1684)) (tmd44@bless (list 'syntax-case (cons 'list tm1690@rhs*) '() (list tm1691@lhs* (list 'syntax tm168f@v)))))))) tm167f@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm167d@t))))))) (set! tm2892@tmd7e@quasisyntax-macro tmd7e@quasisyntax-macro) (set! tmd80@define-struct-macro (lambda (tm177f@stx) (tme6e@syntax-violation '#f '"define-struct not supported" tm177f@stx))) (set! tm2893@tmd80@define-struct-macro tmd80@define-struct-macro) (set! tmd82@define-record-type-macro (lambda (tm1781@x) (letrec* ((tm1784@id (lambda (tm1977@ctxt . tm1979@str*) (tme72@datum->syntax tm1977@ctxt (string->symbol (apply string-append (map (lambda (tm197b@x) (if (symbol? tm197b@x) (symbol->string tm197b@x) (if (string? tm197b@x) tm197b@x (assertion-violation 'define-record-type '"BUG")))) tm1979@str*)))))) (tm1786@get-record-name (lambda (tm1965@spec) (let ((tm1967@t tm1965@spec)) (let ((tm1969@ls/false (tmd8e@syntax-dispatch tm1967@t '(any any any)))) (if tm1969@ls/false (apply (lambda (tm196b@foo tm196c@make-foo tm196d@foo?) tm196b@foo) tm1969@ls/false) (let ((tm1971@t tm1967@t)) (let ((tm1973@ls/false (tmd8e@syntax-dispatch tm1971@t 'any))) (if tm1973@ls/false (apply (lambda (tm1975@foo) tm1975@foo) tm1973@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1971@t))))))))) (tm1788@get-record-constructor-name (lambda (tm1951@spec) (let ((tm1953@t tm1951@spec)) (let ((tm1955@ls/false (tmd8e@syntax-dispatch tm1953@t '(any any any)))) (if tm1955@ls/false (apply (lambda (tm1957@foo tm1958@make-foo tm1959@foo?) tm1958@make-foo) tm1955@ls/false) (let ((tm195d@t tm1953@t)) (let ((tm195f@ls/false (tmd8e@syntax-dispatch tm195d@t 'any))) (if (and tm195f@ls/false (apply (lambda (tm1961@foo) (tmb87@id? tm1961@foo)) tm195f@ls/false)) (apply (lambda (tm1963@foo) (tm1784@id tm1963@foo '"make-" (tmb9b@stx->datum tm1963@foo))) tm195f@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm195d@t))))))))) (tm178a@get-record-predicate-name (lambda (tm193d@spec) (let ((tm193f@t tm193d@spec)) (let ((tm1941@ls/false (tmd8e@syntax-dispatch tm193f@t '(any any any)))) (if tm1941@ls/false (apply (lambda (tm1943@foo tm1944@make-foo tm1945@foo?) tm1945@foo?) tm1941@ls/false) (let ((tm1949@t tm193f@t)) (let ((tm194b@ls/false (tmd8e@syntax-dispatch tm1949@t 'any))) (if (and tm194b@ls/false (apply (lambda (tm194d@foo) (tmb87@id? tm194d@foo)) tm194b@ls/false)) (apply (lambda (tm194f@foo) (tm1784@id tm194f@foo (tmb9b@stx->datum tm194f@foo) '"?")) tm194b@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1949@t))))))))) (tm178c@get-clause (lambda (tm192b@id tm192c@ls) (let ((tm192f@t tm192c@ls)) (let ((tm1931@ls/false (tmd8e@syntax-dispatch tm192f@t '()))) (if tm1931@ls/false (apply (lambda () '#f) tm1931@ls/false) (let ((tm1933@t tm192f@t)) (let ((tm1935@ls/false (tmd8e@syntax-dispatch tm1933@t '((any . any) . any)))) (if tm1935@ls/false (apply (lambda (tm1937@x tm1938@rest tm1939@ls) (if (tmb8d@free-id=? (tmd44@bless tm192b@id) tm1937@x) (cons tm1937@x tm1938@rest) (tm178c@get-clause tm192b@id tm1939@ls))) tm1935@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1933@t))))))))) (tm178e@foo-rtd-code (lambda (tm18d9@name tm18da@clause* tm18db@parent-rtd-code) (letrec* ((tm18e0@convert-field-spec* (lambda (tm1911@ls) (list->vector (map (lambda (tm1913@x) (let ((tm1915@t tm1913@x)) (let ((tm1917@ls/false (tmd8e@syntax-dispatch tm1915@t '(#(scheme-id mutable) any . any)))) (if tm1917@ls/false (apply (lambda (tm1919@name tm191a@rest) (list 'mutable tm1919@name)) tm1917@ls/false) (let ((tm191d@t tm1915@t)) (let ((tm191f@ls/false (tmd8e@syntax-dispatch tm191d@t '(#(scheme-id immutable) any . any)))) (if tm191f@ls/false (apply (lambda (tm1921@name tm1922@rest) (list 'immutable tm1921@name)) tm191f@ls/false) (let ((tm1925@t tm191d@t)) (let ((tm1927@ls/false (tmd8e@syntax-dispatch tm1925@t 'any))) (if tm1927@ls/false (apply (lambda (tm1929@name) (list 'immutable tm1929@name)) tm1927@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1925@t))))))))))) tm1911@ls))))) (let ((tm18e1@uid-code (let ((tm18e9@t (tm178c@get-clause 'nongenerative tm18da@clause*))) (let ((tm18eb@ls/false (tmd8e@syntax-dispatch tm18e9@t '(_)))) (if tm18eb@ls/false (apply (lambda () (list 'quote (gensym))) tm18eb@ls/false) (let ((tm18ed@t tm18e9@t)) (let ((tm18ef@ls/false (tmd8e@syntax-dispatch tm18ed@t '(_ any)))) (if tm18ef@ls/false (apply (lambda (tm18f1@uid) (list 'quote tm18f1@uid)) tm18ef@ls/false) (let ((tm18f3@t tm18ed@t)) (let ((tm18f5@ls/false (tmd8e@syntax-dispatch tm18f3@t '_))) (if tm18f5@ls/false (apply (lambda () '#f) tm18f5@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm18f3@t))))))))))) (tm18e2@sealed? (let ((tm18f7@t (tm178c@get-clause 'sealed tm18da@clause*))) (let ((tm18f9@ls/false (tmd8e@syntax-dispatch tm18f7@t '(_ #(atom #t))))) (if tm18f9@ls/false (apply (lambda () '#t) tm18f9@ls/false) (let ((tm18fb@t tm18f7@t)) (let ((tm18fd@ls/false (tmd8e@syntax-dispatch tm18fb@t '_))) (if tm18fd@ls/false (apply (lambda () '#f) tm18fd@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm18fb@t)))))))) (tm18e3@opaque? (let ((tm18ff@t (tm178c@get-clause 'opaque tm18da@clause*))) (let ((tm1901@ls/false (tmd8e@syntax-dispatch tm18ff@t '(_ #(atom #t))))) (if tm1901@ls/false (apply (lambda () '#t) tm1901@ls/false) (let ((tm1903@t tm18ff@t)) (let ((tm1905@ls/false (tmd8e@syntax-dispatch tm1903@t '_))) (if tm1905@ls/false (apply (lambda () '#f) tm1905@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1903@t)))))))) (tm18e4@fields (let ((tm1907@t (tm178c@get-clause 'fields tm18da@clause*))) (let ((tm1909@ls/false (tmd8e@syntax-dispatch tm1907@t '(_ . each-any)))) (if tm1909@ls/false (apply (lambda (tm190b@field-spec*) (list 'quote (tm18e0@convert-field-spec* tm190b@field-spec*))) tm1909@ls/false) (let ((tm190d@t tm1907@t)) (let ((tm190f@ls/false (tmd8e@syntax-dispatch tm190d@t '_))) (if tm190f@ls/false (apply (lambda () ''#()) tm190f@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm190d@t))))))))) (tmd44@bless (list 'make-record-type-descriptor (list 'quote tm18d9@name) tm18db@parent-rtd-code tm18e1@uid-code tm18e2@sealed? tm18e3@opaque? tm18e4@fields)))))) (tm1790@parent-rtd-code (lambda (tm18c1@clause*) (let ((tm18c3@t (tm178c@get-clause 'parent tm18c1@clause*))) (let ((tm18c5@ls/false (tmd8e@syntax-dispatch tm18c3@t '(_ any)))) (if tm18c5@ls/false (apply (lambda (tm18c7@name) (list 'record-type-descriptor tm18c7@name)) tm18c5@ls/false) (let ((tm18c9@t tm18c3@t)) (let ((tm18cb@ls/false (tmd8e@syntax-dispatch tm18c9@t '#(atom #f)))) (if tm18cb@ls/false (apply (lambda () (let ((tm18cd@t (tm178c@get-clause 'parent-rtd tm18c1@clause*))) (let ((tm18cf@ls/false (tmd8e@syntax-dispatch tm18cd@t '(_ any any)))) (if tm18cf@ls/false (apply (lambda (tm18d1@rtd tm18d2@rcd) tm18d1@rtd) tm18cf@ls/false) (let ((tm18d5@t tm18cd@t)) (let ((tm18d7@ls/false (tmd8e@syntax-dispatch tm18d5@t '#(atom #f)))) (if tm18d7@ls/false (apply (lambda () '#f) tm18d7@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm18d5@t)))))))) tm18cb@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm18c9@t))))))))) (tm1792@parent-rcd-code (lambda (tm18a9@clause*) (let ((tm18ab@t (tm178c@get-clause 'parent tm18a9@clause*))) (let ((tm18ad@ls/false (tmd8e@syntax-dispatch tm18ab@t '(_ any)))) (if tm18ad@ls/false (apply (lambda (tm18af@name) (list 'record-constructor-descriptor tm18af@name)) tm18ad@ls/false) (let ((tm18b1@t tm18ab@t)) (let ((tm18b3@ls/false (tmd8e@syntax-dispatch tm18b1@t '#(atom #f)))) (if tm18b3@ls/false (apply (lambda () (let ((tm18b5@t (tm178c@get-clause 'parent-rtd tm18a9@clause*))) (let ((tm18b7@ls/false (tmd8e@syntax-dispatch tm18b5@t '(_ any any)))) (if tm18b7@ls/false (apply (lambda (tm18b9@rtd tm18ba@rcd) tm18ba@rcd) tm18b7@ls/false) (let ((tm18bd@t tm18b5@t)) (let ((tm18bf@ls/false (tmd8e@syntax-dispatch tm18bd@t '#(atom #f)))) (if tm18bf@ls/false (apply (lambda () '#f) tm18bf@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm18bd@t)))))))) tm18b3@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm18b1@t))))))))) (tm1794@foo-rcd-code (lambda (tm18a1@clause* tm18a2@foo-rtd tm18a3@protocol tm18a4@parent-rcd-code) (list 'make-record-constructor-descriptor tm18a2@foo-rtd tm18a4@parent-rcd-code tm18a3@protocol))) (tm1796@get-protocol-code (lambda (tm1895@clause*) (let ((tm1897@t (tm178c@get-clause 'protocol tm1895@clause*))) (let ((tm1899@ls/false (tmd8e@syntax-dispatch tm1897@t '(_ any)))) (if tm1899@ls/false (apply (lambda (tm189b@expr) tm189b@expr) tm1899@ls/false) (let ((tm189d@t tm1897@t)) (let ((tm189f@ls/false (tmd8e@syntax-dispatch tm189d@t '_))) (if tm189f@ls/false (apply (lambda () '#f) tm189f@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm189d@t))))))))) (tm1798@get-fields (lambda (tm1883@clause*) (let ((tm1885@t tm1883@clause*)) (let ((tm1887@ls/false (tmd8e@syntax-dispatch tm1885@t '()))) (if tm1887@ls/false (apply (lambda () '()) tm1887@ls/false) (let ((tm1889@t tm1885@t)) (let ((tm188b@ls/false (tmd8e@syntax-dispatch tm1889@t '((#(scheme-id fields) . each-any) . _)))) (if tm188b@ls/false (apply (lambda (tm188d@f*) tm188d@f*) tm188b@ls/false) (let ((tm188f@t tm1889@t)) (let ((tm1891@ls/false (tmd8e@syntax-dispatch tm188f@t '(_ . any)))) (if tm1891@ls/false (apply (lambda (tm1893@rest) (tm1798@get-fields tm1893@rest)) tm1891@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm188f@t)))))))))))) (tm179a@get-mutator-indices (lambda (tm186b@fields) (let tm1871@f ((tm186d@fields tm186b@fields) (tm186e@i '0)) (let ((tm1873@t tm186d@fields)) (let ((tm1875@ls/false (tmd8e@syntax-dispatch tm1873@t '()))) (if tm1875@ls/false (apply (lambda () '()) tm1875@ls/false) (let ((tm1877@t tm1873@t)) (let ((tm1879@ls/false (tmd8e@syntax-dispatch tm1877@t '((#(scheme-id mutable) . _) . any)))) (if tm1879@ls/false (apply (lambda (tm187b@rest) (cons tm186e@i (tm1871@f tm187b@rest (+ tm186e@i '1)))) tm1879@ls/false) (let ((tm187d@t tm1877@t)) (let ((tm187f@ls/false (tmd8e@syntax-dispatch tm187d@t '(_ . any)))) (if tm187f@ls/false (apply (lambda (tm1881@rest) (tm1871@f tm1881@rest (+ tm186e@i '1))) tm187f@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm187d@t))))))))))))) (tm179c@get-mutators (lambda (tm1841@foo tm1842@fields) (letrec* ((tm1846@gen-name (lambda (tm1869@x) (tme72@datum->syntax tm1841@foo (string->symbol (string-append (symbol->string (tme74@syntax->datum tm1841@foo)) '"-" (symbol->string (tme74@syntax->datum tm1869@x)) '"-set!")))))) (let tm1849@f ((tm1847@fields tm1842@fields)) (let ((tm184b@t tm1847@fields)) (let ((tm184d@ls/false (tmd8e@syntax-dispatch tm184b@t '()))) (if tm184d@ls/false (apply (lambda () '()) tm184d@ls/false) (let ((tm184f@t tm184b@t)) (let ((tm1851@ls/false (tmd8e@syntax-dispatch tm184f@t '((#(scheme-id mutable) any any any) . any)))) (if tm1851@ls/false (apply (lambda (tm1853@name tm1854@accessor tm1855@mutator tm1856@rest) (cons tm1855@mutator (tm1849@f tm1856@rest))) tm1851@ls/false) (let ((tm185b@t tm184f@t)) (let ((tm185d@ls/false (tmd8e@syntax-dispatch tm185b@t '((#(scheme-id mutable) any) . any)))) (if tm185d@ls/false (apply (lambda (tm185f@name tm1860@rest) (cons (tm1846@gen-name tm185f@name) (tm1849@f tm1860@rest))) tm185d@ls/false) (let ((tm1863@t tm185b@t)) (let ((tm1865@ls/false (tmd8e@syntax-dispatch tm1863@t '(_ . any)))) (if tm1865@ls/false (apply (lambda (tm1867@rest) (tm1849@f tm1867@rest)) tm1865@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1863@t))))))))))))))))) (tm179e@get-accessors (lambda (tm17fd@foo tm17fe@fields) (letrec* ((tm1802@gen-name (lambda (tm183f@x) (tme72@datum->syntax tm17fd@foo (string->symbol (string-append (symbol->string (tme74@syntax->datum tm17fd@foo)) '"-" (symbol->string (tme74@syntax->datum tm183f@x)))))))) (map (lambda (tm1803@field) (let ((tm1805@t tm1803@field)) (let ((tm1807@ls/false (tmd8e@syntax-dispatch tm1805@t '(#(scheme-id mutable) any any any)))) (if (and tm1807@ls/false (apply (lambda (tm1809@name tm180a@accessor tm180b@mutator) (tmb87@id? tm180a@accessor)) tm1807@ls/false)) (apply (lambda (tm180f@name tm1810@accessor tm1811@mutator) tm1810@accessor) tm1807@ls/false) (let ((tm1815@t tm1805@t)) (let ((tm1817@ls/false (tmd8e@syntax-dispatch tm1815@t '(#(scheme-id immutable) any any)))) (if (and tm1817@ls/false (apply (lambda (tm1819@name tm181a@accessor) (tmb87@id? tm181a@accessor)) tm1817@ls/false)) (apply (lambda (tm181d@name tm181e@accessor) tm181e@accessor) tm1817@ls/false) (let ((tm1821@t tm1815@t)) (let ((tm1823@ls/false (tmd8e@syntax-dispatch tm1821@t '(#(scheme-id mutable) any)))) (if (and tm1823@ls/false (apply (lambda (tm1825@name) (tmb87@id? tm1825@name)) tm1823@ls/false)) (apply (lambda (tm1827@name) (tm1802@gen-name tm1827@name)) tm1823@ls/false) (let ((tm1829@t tm1821@t)) (let ((tm182b@ls/false (tmd8e@syntax-dispatch tm1829@t '(#(scheme-id immutable) any)))) (if (and tm182b@ls/false (apply (lambda (tm182d@name) (tmb87@id? tm182d@name)) tm182b@ls/false)) (apply (lambda (tm182f@name) (tm1802@gen-name tm182f@name)) tm182b@ls/false) (let ((tm1831@t tm1829@t)) (let ((tm1833@ls/false (tmd8e@syntax-dispatch tm1831@t 'any))) (if (and tm1833@ls/false (apply (lambda (tm1835@name) (tmb87@id? tm1835@name)) tm1833@ls/false)) (apply (lambda (tm1837@name) (tm1802@gen-name tm1837@name)) tm1833@ls/false) (let ((tm1839@t tm1831@t)) (let ((tm183b@ls/false (tmd8e@syntax-dispatch tm1839@t 'any))) (if tm183b@ls/false (apply (lambda (tm183d@others) (tme6e@syntax-violation '#f '"invalid field spec" tm1803@field)) tm183b@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1839@t)))))))))))))))))))) tm17fe@fields)))) (tm17a0@enumerate (lambda (tm17f5@ls) (let tm17fb@f ((tm17f7@ls tm17f5@ls) (tm17f8@i '0)) (if (null? tm17f7@ls) '() (cons tm17f8@i (tm17fb@f (cdr tm17f7@ls) (+ tm17f8@i '1))))))) (tm17a2@do-define-record (lambda (tm17cd@namespec tm17ce@clause*) (let ((tm17d1@foo (tm1786@get-record-name tm17cd@namespec))) (let ((tm17d3@foo-rtd (gensym))) (let ((tm17d5@foo-rcd (gensym))) (let ((tm17d7@protocol (gensym))) (let ((tm17d9@make-foo (tm1788@get-record-constructor-name tm17cd@namespec))) (let ((tm17db@fields (tm1798@get-fields tm17ce@clause*))) (let ((tm17dd@idx* (tm17a0@enumerate tm17db@fields))) (let ((tm17df@foo-x* (tm179e@get-accessors tm17d1@foo tm17db@fields))) (let ((tm17e1@set-foo-x!* (tm179c@get-mutators tm17d1@foo tm17db@fields))) (let ((tm17e3@set-foo-idx* (tm179a@get-mutator-indices tm17db@fields))) (let ((tm17e5@foo? (tm178a@get-record-predicate-name tm17cd@namespec))) (let ((tm17e7@foo-rtd-code (tm178e@foo-rtd-code tm17d1@foo tm17ce@clause* (tm1790@parent-rtd-code tm17ce@clause*)))) (let ((tm17e9@foo-rcd-code (tm1794@foo-rcd-code tm17ce@clause* tm17d3@foo-rtd tm17d7@protocol (tm1792@parent-rcd-code tm17ce@clause*)))) (let ((tm17eb@protocol-code (tm1796@get-protocol-code tm17ce@clause*))) (tmd44@bless (cons 'begin (cons (list 'define tm17d3@foo-rtd tm17e7@foo-rtd-code) (cons (list 'define tm17d7@protocol tm17eb@protocol-code) (cons (list 'define tm17d5@foo-rcd tm17e9@foo-rcd-code) (cons (list 'define-syntax tm17d1@foo (list 'list ''$rtd (list 'syntax tm17d3@foo-rtd) (list 'syntax tm17d5@foo-rcd))) (cons (list 'define tm17e5@foo? (list 'record-predicate tm17d3@foo-rtd)) (cons (list 'define tm17d9@make-foo (list 'record-constructor tm17d5@foo-rcd)) (append (map (lambda (tm17ed@foo-x tm17ee@idx) (list 'define tm17ed@foo-x (list 'record-accessor tm17d3@foo-rtd tm17ee@idx))) tm17df@foo-x* tm17dd@idx*) (map (lambda (tm17f1@set-foo-x! tm17f2@idx) (list 'define tm17f1@set-foo-x! (list 'record-mutator tm17d3@foo-rtd tm17f2@idx))) tm17e1@set-foo-x!* tm17e3@set-foo-idx*)))))))))))))))))))))))))) (tm17a4@verify-clauses (lambda (tm17ad@x tm17ae@cls*) (letrec* ((tm17b2@valid-kwds (map tmd44@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (tm17b4@free-id-member? (lambda (tm17c9@x tm17ca@ls) (and (pair? tm17ca@ls) (or (tmb8d@free-id=? tm17c9@x (car tm17ca@ls)) (tm17b4@free-id-member? tm17c9@x (cdr tm17ca@ls))))))) (let tm17b9@f ((tm17b5@cls* tm17ae@cls*) (tm17b6@seen* '())) (if (not (null? tm17b5@cls*)) (let ((tm17bb@t (car tm17b5@cls*))) (let ((tm17bd@ls/false (tmd8e@syntax-dispatch tm17bb@t '(any . any)))) (if tm17bd@ls/false (apply (lambda (tm17bf@kwd tm17c0@rest) (if (or (not (tmb87@id? tm17bf@kwd)) (not (tm17b4@free-id-member? tm17bf@kwd tm17b2@valid-kwds))) (tme6e@syntax-violation '#f '"not a valid define-record-type keyword" tm17bf@kwd) (if (tmb93@bound-id-member? tm17bf@kwd tm17b6@seen*) (tme6e@syntax-violation '#f '"duplicate use of keyword " tm17ad@x tm17bf@kwd) (tm17b9@f (cdr tm17b5@cls*) (cons tm17bf@kwd tm17b6@seen*))))) tm17bd@ls/false) (let ((tm17c3@t tm17bb@t)) (let ((tm17c5@ls/false (tmd8e@syntax-dispatch tm17c3@t 'any))) (if tm17c5@ls/false (apply (lambda (tm17c7@cls) (tme6e@syntax-violation '#f '"malformed define-record-type clause" tm17c7@cls)) tm17c5@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm17c3@t))))))) (void))))))) (let ((tm17a5@t tm1781@x)) (let ((tm17a7@ls/false (tmd8e@syntax-dispatch tm17a5@t '(_ any . each-any)))) (if tm17a7@ls/false (apply (lambda (tm17a9@namespec tm17aa@clause*) (begin (tm17a4@verify-clauses tm1781@x tm17aa@clause*) (tm17a2@do-define-record tm17a9@namespec tm17aa@clause*))) tm17a7@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm17a5@t))))))) (set! tm2894@tmd82@define-record-type-macro tmd82@define-record-type-macro) (set! tmd84@define-condition-type-macro (lambda (tm197d@x) (letrec* ((tm1980@mkname (lambda (tm19ad@name tm19ae@suffix) (tme72@datum->syntax tm19ad@name (string->symbol (string-append (symbol->string (tme74@syntax->datum tm19ad@name)) tm19ae@suffix)))))) (let ((tm1981@t tm197d@x)) (let ((tm1983@ls/false (tmd8e@syntax-dispatch tm1981@t '(any any any any any . #(each (any any)))))) (if (and tm1983@ls/false (apply (lambda (tm1985@ctxt tm1986@name tm1987@super tm1988@constructor tm1989@predicate tm198a@field* tm198b@accessor*) (and (tmb87@id? tm1986@name) (tmb87@id? tm1987@super) (tmb87@id? tm1988@constructor) (tmb87@id? tm1989@predicate) (for-all tmb87@id? tm198a@field*) (for-all tmb87@id? tm198b@accessor*))) tm1983@ls/false)) (apply (lambda (tm1993@ctxt tm1994@name tm1995@super tm1996@constructor tm1997@predicate tm1998@field* tm1999@accessor*) (let ((tm19a1@aux-accessor* (map (lambda (tm19a3@x) (gensym)) tm1999@accessor*))) (tmd44@bless (cons 'begin (cons (cons 'define-record-type (cons (list tm1994@name tm1996@constructor (gensym)) (cons (list 'parent tm1995@super) (cons (cons 'fields (map (lambda (tm19a5@field tm19a6@aux) (list 'immutable tm19a5@field tm19a6@aux)) tm1998@field* tm19a1@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define tm1997@predicate (list 'condition-predicate (list 'record-type-descriptor tm1994@name))) (map (lambda (tm19a9@accessor tm19aa@aux) (list 'define tm19a9@accessor (list 'condition-accessor (list 'record-type-descriptor tm1994@name) tm19aa@aux))) tm1999@accessor* tm19a1@aux-accessor*))))))) tm1983@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1981@t))))))) (set! tm2895@tmd84@define-condition-type-macro tmd84@define-condition-type-macro) (set! tmd86@incorrect-usage-macro (lambda (tm19b1@e) (tme6e@syntax-violation '#f '"incorrect usage of auxiliary keyword" tm19b1@e))) (set! tm2896@tmd86@incorrect-usage-macro tmd86@incorrect-usage-macro) (set! tmd88@parameterize-macro (lambda (tm19b3@e) (let ((tm19b5@t tm19b3@e)) (let ((tm19b7@ls/false (tmd8e@syntax-dispatch tm19b5@t '(_ () any . each-any)))) (if tm19b7@ls/false (apply (lambda (tm19b9@b tm19ba@b*) (tmd44@bless (cons 'let (cons '() (cons tm19b9@b tm19ba@b*))))) tm19b7@ls/false) (let ((tm19bd@t tm19b5@t)) (let ((tm19bf@ls/false (tmd8e@syntax-dispatch tm19bd@t '(_ #(each (any any)) any . each-any)))) (if tm19bf@ls/false (apply (lambda (tm19c1@olhs* tm19c2@orhs* tm19c3@b tm19c4@b*) (let ((tm19c9@lhs* (tme5c@generate-temporaries tm19c1@olhs*)) (tm19ca@rhs* (tme5c@generate-temporaries tm19c2@orhs*))) (tmd44@bless (cons (list 'lambda (append tm19c9@lhs* tm19ca@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (tm19cd@lhs tm19ce@rhs) (list 'let (list (list 't (list tm19cd@lhs))) (list tm19cd@lhs tm19ce@rhs) (cons 'set! (cons tm19ce@rhs '(t))))) tm19c9@lhs* tm19ca@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons tm19c3@b tm19c4@b*))) '(swap)))))) (append tm19c1@olhs* tm19c2@orhs*))))) tm19bf@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm19bd@t))))))))) (set! tm2897@tmd88@parameterize-macro tmd88@parameterize-macro) (set! tmd8a@foreign-call-transformer (lambda (tm19d1@e tm19d2@r tm19d3@mr) (let ((tm19d7@t tm19d1@e)) (let ((tm19d9@ls/false (tmd8e@syntax-dispatch tm19d7@t '(_ any . each-any)))) (if tm19d9@ls/false (apply (lambda (tm19db@name tm19dc@arg*) (cons 'foreign-call (cons (tmdb0@chi-expr tm19db@name tm19d2@r tm19d3@mr) (tmdac@chi-expr* tm19dc@arg* tm19d2@r tm19d3@mr)))) tm19d9@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm19d7@t)))))) (set! tm2898@tmd8a@foreign-call-transformer tmd8a@foreign-call-transformer) (set! tmd8c@convert-pattern (lambda (tm19df@pattern tm19e0@keys) (letrec* ((tm19e4@cvt* (lambda (tm1a83@p* tm1a84@n tm1a85@ids) (if (null? tm1a83@p*) (values '() tm1a85@ids) (call-with-values (lambda () (tm19e4@cvt* (cdr tm1a83@p*) tm1a84@n tm1a85@ids)) (lambda (tm1a8d@tm1a8a tm1a8e@tm1a8c) (let ((tm1a91@ids tm1a8e@tm1a8c) (tm1a92@y tm1a8d@tm1a8a)) (call-with-values (lambda () (tm19e6@cvt (car tm1a83@p*) tm1a84@n tm1a91@ids)) (lambda (tm1a99@tm1a96 tm1a9a@tm1a98) (let ((tm1a9d@ids tm1a9a@tm1a98) (tm1a9e@x tm1a99@tm1a96)) (values (cons tm1a9e@x tm1a92@y) tm1a9d@ids)))))))))) (tm19e6@cvt (lambda (tm19e7@p tm19e8@n tm19e9@ids) (let ((tm19ed@t tm19e7@p)) (let ((tm19ef@ls/false (tmd8e@syntax-dispatch tm19ed@t 'any))) (if (and tm19ef@ls/false (apply (lambda (tm19f1@id) (tmb87@id? tm19f1@id)) tm19ef@ls/false)) (apply (lambda (tm19f3@id) (if (tmb93@bound-id-member? tm19e7@p tm19e0@keys) (values (vector 'free-id tm19e7@p) tm19e9@ids) (if (tmb8d@free-id=? tm19e7@p (tmd16@scheme-stx '_)) (values '_ tm19e9@ids) (values 'any (cons (cons tm19e7@p tm19e8@n) tm19e9@ids))))) tm19ef@ls/false) (let ((tm19f5@t tm19ed@t)) (let ((tm19f7@ls/false (tmd8e@syntax-dispatch tm19f5@t '(any any)))) (if (and tm19f7@ls/false (apply (lambda (tm19f9@p tm19fa@dots) (tmd90@ellipsis? tm19fa@dots)) tm19f7@ls/false)) (apply (lambda (tm19fd@p tm19fe@dots) (call-with-values (lambda () (tm19e6@cvt tm19fd@p (+ tm19e8@n '1) tm19e9@ids)) (lambda (tm1a05@tm1a02 tm1a06@tm1a04) (let ((tm1a09@ids tm1a06@tm1a04) (tm1a0a@p tm1a05@tm1a02)) (values (if (eq? tm1a0a@p 'any) 'each-any (vector 'each tm1a0a@p)) tm1a09@ids))))) tm19f7@ls/false) (let ((tm1a0d@t tm19f5@t)) (let ((tm1a0f@ls/false (tmd8e@syntax-dispatch tm1a0d@t '(any any . #(each+ any () any))))) (if (and tm1a0f@ls/false (apply (lambda (tm1a11@x tm1a12@dots tm1a13@ys tm1a14@z) (tmd90@ellipsis? tm1a12@dots)) tm1a0f@ls/false)) (apply (lambda (tm1a19@x tm1a1a@dots tm1a1b@ys tm1a1c@z) (call-with-values (lambda () (tm19e6@cvt tm1a1c@z tm19e8@n tm19e9@ids)) (lambda (tm1a25@tm1a22 tm1a26@tm1a24) (let ((tm1a29@ids tm1a26@tm1a24) (tm1a2a@z tm1a25@tm1a22)) (call-with-values (lambda () (tm19e4@cvt* tm1a1b@ys tm19e8@n tm1a29@ids)) (lambda (tm1a31@tm1a2e tm1a32@tm1a30) (let ((tm1a35@ids tm1a32@tm1a30) (tm1a36@ys tm1a31@tm1a2e)) (call-with-values (lambda () (tm19e6@cvt tm1a19@x (+ tm19e8@n '1) tm1a35@ids)) (lambda (tm1a3d@tm1a3a tm1a3e@tm1a3c) (let ((tm1a41@ids tm1a3e@tm1a3c) (tm1a42@x tm1a3d@tm1a3a)) (values (vector 'each+ tm1a42@x (reverse tm1a36@ys) tm1a2a@z) tm1a41@ids))))))))))) tm1a0f@ls/false) (let ((tm1a45@t tm1a0d@t)) (let ((tm1a47@ls/false (tmd8e@syntax-dispatch tm1a45@t '(any . any)))) (if tm1a47@ls/false (apply (lambda (tm1a49@x tm1a4a@y) (call-with-values (lambda () (tm19e6@cvt tm1a4a@y tm19e8@n tm19e9@ids)) (lambda (tm1a51@tm1a4e tm1a52@tm1a50) (let ((tm1a55@ids tm1a52@tm1a50) (tm1a56@y tm1a51@tm1a4e)) (call-with-values (lambda () (tm19e6@cvt tm1a49@x tm19e8@n tm1a55@ids)) (lambda (tm1a5d@tm1a5a tm1a5e@tm1a5c) (let ((tm1a61@ids tm1a5e@tm1a5c) (tm1a62@x tm1a5d@tm1a5a)) (values (cons tm1a62@x tm1a56@y) tm1a61@ids)))))))) tm1a47@ls/false) (let ((tm1a65@t tm1a45@t)) (let ((tm1a67@ls/false (tmd8e@syntax-dispatch tm1a65@t '()))) (if tm1a67@ls/false (apply (lambda () (values '() tm19e9@ids)) tm1a67@ls/false) (let ((tm1a69@t tm1a65@t)) (let ((tm1a6b@ls/false (tmd8e@syntax-dispatch tm1a69@t '#(vector each-any)))) (if (and tm1a6b@ls/false (apply (lambda (tm1a6d@p) (not (tmb53@stx? tm1a6d@p))) tm1a6b@ls/false)) (apply (lambda (tm1a6f@p) (call-with-values (lambda () (tm19e6@cvt tm1a6f@p tm19e8@n tm19e9@ids)) (lambda (tm1a75@tm1a72 tm1a76@tm1a74) (let ((tm1a79@ids tm1a76@tm1a74) (tm1a7a@p tm1a75@tm1a72)) (values (vector 'vector tm1a7a@p) tm1a79@ids))))) tm1a6b@ls/false) (let ((tm1a7d@t tm1a69@t)) (let ((tm1a7f@ls/false (tmd8e@syntax-dispatch tm1a7d@t 'any))) (if tm1a7f@ls/false (apply (lambda (tm1a81@datum) (values (vector 'atom (tmb9b@stx->datum tm1a81@datum)) tm19e9@ids)) tm1a7f@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1a7d@t))))))))))))))))))))))))) (tm19e6@cvt tm19df@pattern '0 '())))) (set! tm2899@tmd8c@convert-pattern tmd8c@convert-pattern) (set! tmd8e@syntax-dispatch (letrec* ((tm1aa2@stx^ (lambda (tm1b7d@e tm1b7e@m* tm1b7f@s* tm1b80@ae*) (if (and (null? tm1b7e@m*) (null? tm1b7f@s*) (null? tm1b80@ae*)) tm1b7d@e (tmb6f@mkstx tm1b7d@e tm1b7e@m* tm1b7f@s* tm1b80@ae*)))) (tm1aa4@match-each (lambda (tm1b5d@e tm1b5e@p tm1b5f@m* tm1b60@s* tm1b61@ae*) (if (pair? tm1b5d@e) (let ((tm1b67@first (tm1ab0@match (car tm1b5d@e) tm1b5e@p tm1b5f@m* tm1b60@s* tm1b61@ae* '()))) (and tm1b67@first (let ((tm1b69@rest (tm1aa4@match-each (cdr tm1b5d@e) tm1b5e@p tm1b5f@m* tm1b60@s* tm1b61@ae*))) (and tm1b69@rest (cons tm1b67@first tm1b69@rest))))) (if (null? tm1b5d@e) '() (if (tmb53@stx? tm1b5d@e) (and (not (tmb0d@top-marked? tm1b5f@m*)) (call-with-values (lambda () (join-wraps tm1b5f@m* tm1b60@s* tm1b61@ae* tm1b5d@e)) (lambda (tm1b71@tm1b6c tm1b72@tm1b6e tm1b73@tm1b70) (let ((tm1b77@ae* tm1b73@tm1b70) (tm1b78@s* tm1b72@tm1b6e) (tm1b79@m* tm1b71@tm1b6c)) (tm1aa4@match-each (tmb55@stx-expr tm1b5d@e) tm1b5e@p tm1b79@m* tm1b78@s* tm1b77@ae*))))) (if (tm6cb@tm59d@annotation? tm1b5d@e) (tm1aa4@match-each (tm6cd@tm5a1@annotation-expression tm1b5d@e) tm1b5e@p tm1b5f@m* tm1b60@s* tm1b61@ae*) '#f)))))) (tm1aa6@match-each+ (lambda (tm1b1d@e tm1b1e@x-pat tm1b1f@y-pat tm1b20@z-pat tm1b21@m* tm1b22@s* tm1b23@ae* tm1b24@r) (let tm1b35@f ((tm1b2d@e tm1b1d@e) (tm1b2e@m* tm1b21@m*) (tm1b2f@s* tm1b22@s*) (tm1b30@ae* tm1b23@ae*)) (if (pair? tm1b2d@e) (call-with-values (lambda () (tm1b35@f (cdr tm1b2d@e) tm1b2e@m* tm1b2f@s* tm1b30@ae*)) (lambda (tm1b3d@tm1b38 tm1b3e@tm1b3a tm1b3f@tm1b3c) (let ((tm1b43@r tm1b3f@tm1b3c) (tm1b44@y-pat tm1b3e@tm1b3a) (tm1b45@xr* tm1b3d@tm1b38)) (if tm1b43@r (if (null? tm1b44@y-pat) (let ((tm1b49@xr (tm1ab0@match (car tm1b2d@e) tm1b1e@x-pat tm1b2e@m* tm1b2f@s* tm1b30@ae* '()))) (if tm1b49@xr (values (cons tm1b49@xr tm1b45@xr*) tm1b44@y-pat tm1b43@r) (values '#f '#f '#f))) (values '() (cdr tm1b44@y-pat) (tm1ab0@match (car tm1b2d@e) (car tm1b44@y-pat) tm1b2e@m* tm1b2f@s* tm1b30@ae* tm1b43@r))) (values '#f '#f '#f))))) (if (tmb53@stx? tm1b2d@e) (if (tmb0d@top-marked? tm1b2e@m*) (values '() tm1b1f@y-pat (tm1ab0@match tm1b2d@e tm1b20@z-pat tm1b2e@m* tm1b2f@s* tm1b30@ae* tm1b24@r)) (call-with-values (lambda () (join-wraps tm1b2e@m* tm1b2f@s* tm1b30@ae* tm1b2d@e)) (lambda (tm1b51@tm1b4c tm1b52@tm1b4e tm1b53@tm1b50) (let ((tm1b57@ae* tm1b53@tm1b50) (tm1b58@s* tm1b52@tm1b4e) (tm1b59@m* tm1b51@tm1b4c)) (tm1b35@f (tmb55@stx-expr tm1b2d@e) tm1b59@m* tm1b58@s* tm1b57@ae*))))) (if (tm6cb@tm59d@annotation? tm1b2d@e) (tm1b35@f (tm6cd@tm5a1@annotation-expression tm1b2d@e) tm1b2e@m* tm1b2f@s* tm1b30@ae*) (values '() tm1b1f@y-pat (tm1ab0@match tm1b2d@e tm1b20@z-pat tm1b2e@m* tm1b2f@s* tm1b30@ae* tm1b24@r)))))))) (tm1aa8@match-each-any (lambda (tm1b01@e tm1b02@m* tm1b03@s* tm1b04@ae*) (if (pair? tm1b01@e) (let ((tm1b09@l (tm1aa8@match-each-any (cdr tm1b01@e) tm1b02@m* tm1b03@s* tm1b04@ae*))) (and tm1b09@l (cons (tm1aa2@stx^ (car tm1b01@e) tm1b02@m* tm1b03@s* tm1b04@ae*) tm1b09@l))) (if (null? tm1b01@e) '() (if (tmb53@stx? tm1b01@e) (and (not (tmb0d@top-marked? tm1b02@m*)) (call-with-values (lambda () (join-wraps tm1b02@m* tm1b03@s* tm1b04@ae* tm1b01@e)) (lambda (tm1b11@tm1b0c tm1b12@tm1b0e tm1b13@tm1b10) (let ((tm1b17@ae* tm1b13@tm1b10) (tm1b18@s* tm1b12@tm1b0e) (tm1b19@m* tm1b11@tm1b0c)) (tm1aa8@match-each-any (tmb55@stx-expr tm1b01@e) tm1b19@m* tm1b18@s* tm1b17@ae*))))) (if (tm6cb@tm59d@annotation? tm1b01@e) (tm1aa8@match-each-any (tm6cd@tm5a1@annotation-expression tm1b01@e) tm1b02@m* tm1b03@s* tm1b04@ae*) '#f)))))) (tm1aaa@match-empty (lambda (tm1afb@p tm1afc@r) (if (null? tm1afb@p) tm1afc@r (if (eq? tm1afb@p '_) tm1afc@r (if (eq? tm1afb@p 'any) (cons '() tm1afc@r) (if (pair? tm1afb@p) (tm1aaa@match-empty (car tm1afb@p) (tm1aaa@match-empty (cdr tm1afb@p) tm1afc@r)) (if (eq? tm1afb@p 'each-any) (cons '() tm1afc@r) (let ((tm1aff@t (vector-ref tm1afb@p '0))) (if (memv tm1aff@t '(each)) (tm1aaa@match-empty (vector-ref tm1afb@p '1) tm1afc@r) (if (memv tm1aff@t '(each+)) (tm1aaa@match-empty (vector-ref tm1afb@p '1) (tm1aaa@match-empty (reverse (vector-ref tm1afb@p '2)) (tm1aaa@match-empty (vector-ref tm1afb@p '3) tm1afc@r))) (if (memv tm1aff@t '(free-id atom)) tm1afc@r (if (memv tm1aff@t '(scheme-id atom)) tm1afc@r (if (memv tm1aff@t '(vector)) (tm1aaa@match-empty (vector-ref tm1afb@p '1) tm1afc@r) (assertion-violation 'syntax-dispatch '"invalid pattern" tm1afb@p)))))))))))))) (tm1aac@combine (lambda (tm1af7@r* tm1af8@r) (if (null? (car tm1af7@r*)) tm1af8@r (cons (map car tm1af7@r*) (tm1aac@combine (map cdr tm1af7@r*) tm1af8@r))))) (tm1aae@match* (lambda (tm1ad3@e tm1ad4@p tm1ad5@m* tm1ad6@s* tm1ad7@ae* tm1ad8@r) (if (null? tm1ad4@p) (and (null? tm1ad3@e) tm1ad8@r) (if (pair? tm1ad4@p) (and (pair? tm1ad3@e) (tm1ab0@match (car tm1ad3@e) (car tm1ad4@p) tm1ad5@m* tm1ad6@s* tm1ad7@ae* (tm1ab0@match (cdr tm1ad3@e) (cdr tm1ad4@p) tm1ad5@m* tm1ad6@s* tm1ad7@ae* tm1ad8@r))) (if (eq? tm1ad4@p 'each-any) (let ((tm1adf@l (tm1aa8@match-each-any tm1ad3@e tm1ad5@m* tm1ad6@s* tm1ad7@ae*))) (and tm1adf@l (cons tm1adf@l tm1ad8@r))) (let ((tm1ae1@t (vector-ref tm1ad4@p '0))) (if (memv tm1ae1@t '(each)) (if (null? tm1ad3@e) (tm1aaa@match-empty (vector-ref tm1ad4@p '1) tm1ad8@r) (let ((tm1ae3@r* (tm1aa4@match-each tm1ad3@e (vector-ref tm1ad4@p '1) tm1ad5@m* tm1ad6@s* tm1ad7@ae*))) (and tm1ae3@r* (tm1aac@combine tm1ae3@r* tm1ad8@r)))) (if (memv tm1ae1@t '(free-id)) (and (symbol? tm1ad3@e) (tmb0d@top-marked? tm1ad5@m*) (tmb8d@free-id=? (tm1aa2@stx^ tm1ad3@e tm1ad5@m* tm1ad6@s* tm1ad7@ae*) (vector-ref tm1ad4@p '1)) tm1ad8@r) (if (memv tm1ae1@t '(scheme-id)) (and (symbol? tm1ad3@e) (tmb0d@top-marked? tm1ad5@m*) (tmb8d@free-id=? (tm1aa2@stx^ tm1ad3@e tm1ad5@m* tm1ad6@s* tm1ad7@ae*) (tmd16@scheme-stx (vector-ref tm1ad4@p '1))) tm1ad8@r) (if (memv tm1ae1@t '(each+)) (call-with-values (lambda () (tm1aa6@match-each+ tm1ad3@e (vector-ref tm1ad4@p '1) (vector-ref tm1ad4@p '2) (vector-ref tm1ad4@p '3) tm1ad5@m* tm1ad6@s* tm1ad7@ae* tm1ad8@r)) (lambda (tm1aeb@tm1ae6 tm1aec@tm1ae8 tm1aed@tm1aea) (let ((tm1af1@r tm1aed@tm1aea) (tm1af2@y-pat tm1aec@tm1ae8) (tm1af3@xr* tm1aeb@tm1ae6)) (and tm1af1@r (null? tm1af2@y-pat) (if (null? tm1af3@xr*) (tm1aaa@match-empty (vector-ref tm1ad4@p '1) tm1af1@r) (tm1aac@combine tm1af3@xr* tm1af1@r)))))) (if (memv tm1ae1@t '(atom)) (and (fast-equal? (vector-ref tm1ad4@p '1) (tmb99@strip tm1ad3@e tm1ad5@m*)) tm1ad8@r) (if (memv tm1ae1@t '(vector)) (and (vector? tm1ad3@e) (tm1ab0@match (vector->list tm1ad3@e) (vector-ref tm1ad4@p '1) tm1ad5@m* tm1ad6@s* tm1ad7@ae* tm1ad8@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" tm1ad4@p))))))))))))) (tm1ab0@match (lambda (tm1ab5@e tm1ab6@p tm1ab7@m* tm1ab8@s* tm1ab9@ae* tm1aba@r) (if (not tm1aba@r) '#f (if (eq? tm1ab6@p '_) tm1aba@r (if (eq? tm1ab6@p 'any) (cons (tm1aa2@stx^ tm1ab5@e tm1ab7@m* tm1ab8@s* tm1ab9@ae*) tm1aba@r) (if (tmb53@stx? tm1ab5@e) (and (not (tmb0d@top-marked? tm1ab7@m*)) (call-with-values (lambda () (join-wraps tm1ab7@m* tm1ab8@s* tm1ab9@ae* tm1ab5@e)) (lambda (tm1ac7@tm1ac2 tm1ac8@tm1ac4 tm1ac9@tm1ac6) (let ((tm1acd@ae* tm1ac9@tm1ac6) (tm1ace@s* tm1ac8@tm1ac4) (tm1acf@m* tm1ac7@tm1ac2)) (tm1ab0@match (tmb55@stx-expr tm1ab5@e) tm1ab6@p tm1acf@m* tm1ace@s* tm1acd@ae* tm1aba@r))))) (if (tm6cb@tm59d@annotation? tm1ab5@e) (tm1ab0@match (tm6cd@tm5a1@annotation-expression tm1ab5@e) tm1ab6@p tm1ab7@m* tm1ab8@s* tm1ab9@ae* tm1aba@r) (tm1aae@match* tm1ab5@e tm1ab6@p tm1ab7@m* tm1ab8@s* tm1ab9@ae* tm1aba@r))))))))) (lambda (tm1ab1@e tm1ab2@p) (tm1ab0@match tm1ab1@e tm1ab2@p '() '() '() '())))) (set! tm289a@tmd8e@syntax-dispatch tmd8e@syntax-dispatch) (set! tmd90@ellipsis? (lambda (tm1b85@x) (and (tmb87@id? tm1b85@x) (tmb8d@free-id=? tm1b85@x (tmd16@scheme-stx '...))))) (set! tm289b@tmd90@ellipsis? tmd90@ellipsis?) (set! tmd92@underscore? (lambda (tm1b87@x) (and (tmb87@id? tm1b87@x) (tmb8d@free-id=? tm1b87@x (tmd16@scheme-stx '_))))) (set! tm289c@tmd92@underscore? tmd92@underscore?) (set! tmd94@verify-literals (lambda (tm1b89@lits tm1b8a@expr) (for-each (lambda (tm1b8d@x) (if (or (not (tmb87@id? tm1b8d@x)) (tmd90@ellipsis? tm1b8d@x) (tmd92@underscore? tm1b8d@x)) (tme6e@syntax-violation '#f '"invalid literal" tm1b8a@expr tm1b8d@x) (void))) tm1b89@lits))) (set! tm289d@tmd94@verify-literals tmd94@verify-literals) (set! tmd96@syntax-case-transformer (letrec* ((tm1b90@build-dispatch-call (lambda (tm1c01@pvars tm1c02@expr tm1c03@y tm1c04@r tm1c05@mr) (let ((tm1c0b@ids (map car tm1c01@pvars)) (tm1c0c@levels (map cdr tm1c01@pvars))) (let ((tm1c0f@labels (map tmb13@gen-label tm1c0b@ids)) (tm1c10@new-vars (map tmb0f@gen-lexical tm1c0b@ids))) (let ((tm1c13@body (tmdb0@chi-expr (tmb71@add-subst (tmb47@make-full-rib tm1c0b@ids tm1c0f@labels) tm1c02@expr) (append (map (lambda (tm1c15@label tm1c16@var tm1c17@level) (cons tm1c15@label (tmba1@make-binding 'syntax (cons tm1c16@var tm1c17@level)))) tm1c0f@labels tm1c10@new-vars (map cdr tm1c01@pvars)) tm1c04@r) tm1c05@mr))) (list '(primitive apply) (tmaea@tma1c@build-lambda '#f tm1c10@new-vars tm1c13@body) tm1c03@y)))))) (tm1b92@invalid-ids-error (lambda (tm1bf5@id* tm1bf6@e tm1bf7@class) (let tm1bff@find ((tm1bfb@id* tm1bf5@id*) (tm1bfc@ok* '())) (if (null? tm1bfb@id*) (tme6e@syntax-violation '#f '"invalid syntax" tm1bf6@e) (if (tmb87@id? (car tm1bfb@id*)) (if (tmb93@bound-id-member? (car tm1bfb@id*) tm1bfc@ok*) (tme6a@syntax-error (car tm1bfb@id*) '"duplicate " tm1bf7@class) (tm1bff@find (cdr tm1bfb@id*) (cons (car tm1bfb@id*) tm1bfc@ok*))) (tme6a@syntax-error (car tm1bfb@id*) '"invalid " tm1bf7@class)))))) (tm1b94@gen-clause (lambda (tm1bcd@x tm1bce@keys tm1bcf@clauses tm1bd0@r tm1bd1@mr tm1bd2@pat tm1bd3@fender tm1bd4@expr) (call-with-values (lambda () (tmd8c@convert-pattern tm1bd2@pat tm1bce@keys)) (lambda (tm1be1@tm1bde tm1be2@tm1be0) (let ((tm1be5@pvars tm1be2@tm1be0) (tm1be6@p tm1be1@tm1bde)) (if (not (tmb91@distinct-bound-ids? (map car tm1be5@pvars))) (tm1b92@invalid-ids-error (map car tm1be5@pvars) tm1bd2@pat '"pattern variable") (if (not (for-all (lambda (tm1be9@x) (not (tmd90@ellipsis? (car tm1be9@x)))) tm1be5@pvars)) (tme6e@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" tm1bd2@pat) (let ((tm1beb@y (tmb0f@gen-lexical 'tmp))) (let ((tm1bed@test (if (eq? tm1bd3@fender '#t) tm1beb@y (let ((tm1bef@call (tm1b90@build-dispatch-call tm1be5@pvars tm1bd3@fender tm1beb@y tm1bd0@r tm1bd1@mr))) (list 'if tm1beb@y tm1bef@call (list 'quote '#f)))))) (let ((tm1bf1@conseq (tm1b90@build-dispatch-call tm1be5@pvars tm1bd4@expr tm1beb@y tm1bd0@r tm1bd1@mr))) (let ((tm1bf3@altern (tm1b96@gen-syntax-case tm1bcd@x tm1bce@keys tm1bcf@clauses tm1bd0@r tm1bd1@mr))) (list (tmaea@tma1c@build-lambda '#f (list tm1beb@y) (list 'if tm1bed@test tm1bf1@conseq tm1bf3@altern)) (list '(primitive syntax-dispatch) tm1bcd@x (list 'quote tm1be6@p)))))))))))))) (tm1b96@gen-syntax-case (lambda (tm1bab@x tm1bac@keys tm1bad@clauses tm1bae@r tm1baf@mr) (if (null? tm1bad@clauses) (list '(primitive syntax-error) tm1bab@x) (let ((tm1bb5@t (car tm1bad@clauses))) (let ((tm1bb7@ls/false (tmd8e@syntax-dispatch tm1bb5@t '(any any)))) (if tm1bb7@ls/false (apply (lambda (tm1bb9@pat tm1bba@expr) (if (and (tmb87@id? tm1bb9@pat) (not (tmb93@bound-id-member? tm1bb9@pat tm1bac@keys)) (not (tmd90@ellipsis? tm1bb9@pat))) (if (tmb8d@free-id=? tm1bb9@pat (tmd16@scheme-stx '_)) (tmdb0@chi-expr tm1bba@expr tm1bae@r tm1baf@mr) (let ((tm1bbd@lab (tmb13@gen-label tm1bb9@pat)) (tm1bbe@lex (tmb0f@gen-lexical tm1bb9@pat))) (let ((tm1bc1@body (tmdb0@chi-expr (tmb71@add-subst (tmb47@make-full-rib (list tm1bb9@pat) (list tm1bbd@lab)) tm1bba@expr) (cons (cons tm1bbd@lab (tmba1@make-binding 'syntax (cons tm1bbe@lex '0))) tm1bae@r) tm1baf@mr))) (list (tmaea@tma1c@build-lambda '#f (list tm1bbe@lex) tm1bc1@body) tm1bab@x)))) (tm1b94@gen-clause tm1bab@x tm1bac@keys (cdr tm1bad@clauses) tm1bae@r tm1baf@mr tm1bb9@pat '#t tm1bba@expr))) tm1bb7@ls/false) (let ((tm1bc3@t tm1bb5@t)) (let ((tm1bc5@ls/false (tmd8e@syntax-dispatch tm1bc3@t '(any any any)))) (if tm1bc5@ls/false (apply (lambda (tm1bc7@pat tm1bc8@fender tm1bc9@expr) (tm1b94@gen-clause tm1bab@x tm1bac@keys (cdr tm1bad@clauses) tm1bae@r tm1baf@mr tm1bc7@pat tm1bc8@fender tm1bc9@expr)) tm1bc5@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1bc3@t))))))))))) (lambda (tm1b97@e tm1b98@r tm1b99@mr) (let ((tm1b9d@t tm1b97@e)) (let ((tm1b9f@ls/false (tmd8e@syntax-dispatch tm1b9d@t '(_ any each-any . each-any)))) (if tm1b9f@ls/false (apply (lambda (tm1ba1@expr tm1ba2@keys tm1ba3@clauses) (begin (tmd94@verify-literals tm1ba2@keys tm1b97@e) (let ((tm1ba7@x (tmb0f@gen-lexical 'tmp))) (let ((tm1ba9@body (tm1b96@gen-syntax-case tm1ba7@x tm1ba2@keys tm1ba3@clauses tm1b98@r tm1b99@mr))) (list (tmaea@tma1c@build-lambda '#f (list tm1ba7@x) tm1ba9@body) (tmdb0@chi-expr tm1ba1@expr tm1b98@r tm1b99@mr)))))) tm1b9f@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1b9d@t))))))) (set! tm289e@tmd96@syntax-case-transformer tmd96@syntax-case-transformer) (set! tmd98@ellipsis-map (lambda (tm1c1b@proc tm1c1c@ls . tm1c1f@ls*) (letrec* ((tm1c22@who '...)) (begin (if (not (list? tm1c1c@ls)) (assertion-violation tm1c22@who '"not a list" tm1c1c@ls) (void)) (if (not (null? tm1c1f@ls*)) (let ((tm1c23@n (length tm1c1c@ls))) (for-each (lambda (tm1c25@x) (begin (if (not (list? tm1c25@x)) (assertion-violation tm1c22@who '"not a list" tm1c25@x) (void)) (if (not (= (length tm1c25@x) tm1c23@n)) (assertion-violation tm1c22@who '"length mismatch" tm1c1c@ls tm1c25@x) (void)))) tm1c1f@ls*)) (void)) (apply map tm1c1b@proc tm1c1c@ls tm1c1f@ls*))))) (set! tm289f@tmd98@ellipsis-map tmd98@ellipsis-map) (set! tmd9a@syntax-transformer (letrec* ((tm1c28@gen-syntax (lambda (tm1c9f@src tm1ca0@e tm1ca1@r tm1ca2@maps tm1ca3@ellipsis? tm1ca4@vec?) (let ((tm1cab@t tm1ca0@e)) (let ((tm1cad@ls/false (tmd8e@syntax-dispatch tm1cab@t 'any))) (if (and tm1cad@ls/false (apply (lambda (tm1caf@dots) (tm1ca3@ellipsis? tm1caf@dots)) tm1cad@ls/false)) (apply (lambda (tm1cb1@dots) (tme6e@syntax-violation '#f '"misplaced ellipsis in syntax form" tm1c9f@src)) tm1cad@ls/false) (let ((tm1cb3@t tm1cab@t)) (let ((tm1cb5@ls/false (tmd8e@syntax-dispatch tm1cb3@t 'any))) (if (and tm1cb5@ls/false (apply (lambda (tm1cb7@id) (tmb87@id? tm1cb7@id)) tm1cb5@ls/false)) (apply (lambda (tm1cb9@id) (let ((tm1cbb@label (tmb9d@id->label tm1ca0@e))) (let ((tm1cbd@b (tmb9f@label->binding tm1cbb@label tm1ca1@r))) (if (eq? (tmba3@binding-type tm1cbd@b) 'syntax) (call-with-values (lambda () (let ((tm1cc3@var.lev (tmba5@binding-value tm1cbd@b))) (tm1c2a@gen-ref tm1c9f@src (car tm1cc3@var.lev) (cdr tm1cc3@var.lev) tm1ca2@maps))) (lambda (tm1cc5@tm1cc0 tm1cc6@tm1cc2) (let ((tm1cc9@maps tm1cc6@tm1cc2) (tm1cca@var tm1cc5@tm1cc0)) (values (list 'ref tm1cca@var) tm1cc9@maps)))) (values (list 'quote tm1ca0@e) tm1ca2@maps))))) tm1cb5@ls/false) (let ((tm1ccd@t tm1cb3@t)) (let ((tm1ccf@ls/false (tmd8e@syntax-dispatch tm1ccd@t '(any any)))) (if (and tm1ccf@ls/false (apply (lambda (tm1cd1@dots tm1cd2@e) (tm1ca3@ellipsis? tm1cd1@dots)) tm1ccf@ls/false)) (apply (lambda (tm1cd5@dots tm1cd6@e) (if tm1ca4@vec? (tme6e@syntax-violation '#f '"misplaced ellipsis in syntax form" tm1c9f@src) (tm1c28@gen-syntax tm1c9f@src tm1cd6@e tm1ca1@r tm1ca2@maps (lambda (tm1cd9@x) '#f) '#f))) tm1ccf@ls/false) (let ((tm1cdb@t tm1ccd@t)) (let ((tm1cdd@ls/false (tmd8e@syntax-dispatch tm1cdb@t '(any any . any)))) (if (and tm1cdd@ls/false (apply (lambda (tm1cdf@x tm1ce0@dots tm1ce1@y) (tm1ca3@ellipsis? tm1ce0@dots)) tm1cdd@ls/false)) (apply (lambda (tm1ce5@x tm1ce6@dots tm1ce7@y) (let tm1cfd@f ((tm1ceb@y tm1ce7@y) (tm1cec@k (lambda (tm1cef@maps) (call-with-values (lambda () (tm1c28@gen-syntax tm1c9f@src tm1ce5@x tm1ca1@r (cons '() tm1cef@maps) tm1ca3@ellipsis? '#f)) (lambda (tm1cf5@tm1cf2 tm1cf6@tm1cf4) (let ((tm1cf9@maps tm1cf6@tm1cf4) (tm1cfa@x tm1cf5@tm1cf2)) (if (null? (car tm1cf9@maps)) (tme6e@syntax-violation '#f '"extra ellipsis in syntax form" tm1c9f@src) (values (tm1c30@gen-map tm1cfa@x (car tm1cf9@maps)) (cdr tm1cf9@maps))))))))) (let ((tm1cff@t tm1ceb@y)) (let ((tm1d01@ls/false (tmd8e@syntax-dispatch tm1cff@t '()))) (if tm1d01@ls/false (apply (lambda () (tm1cec@k tm1ca2@maps)) tm1d01@ls/false) (let ((tm1d03@t tm1cff@t)) (let ((tm1d05@ls/false (tmd8e@syntax-dispatch tm1d03@t '(any . any)))) (if (and tm1d05@ls/false (apply (lambda (tm1d07@dots tm1d08@y) (tm1ca3@ellipsis? tm1d07@dots)) tm1d05@ls/false)) (apply (lambda (tm1d0b@dots tm1d0c@y) (tm1cfd@f tm1d0c@y (lambda (tm1d0f@maps) (call-with-values (lambda () (tm1cec@k (cons '() tm1d0f@maps))) (lambda (tm1d15@tm1d12 tm1d16@tm1d14) (let ((tm1d19@maps tm1d16@tm1d14) (tm1d1a@x tm1d15@tm1d12)) (if (null? (car tm1d19@maps)) (tme6e@syntax-violation '#f '"extra ellipsis in syntax form" tm1c9f@src) (values (tm1c2e@gen-mappend tm1d1a@x (car tm1d19@maps)) (cdr tm1d19@maps))))))))) tm1d05@ls/false) (let ((tm1d1d@t tm1d03@t)) (let ((tm1d1f@ls/false (tmd8e@syntax-dispatch tm1d1d@t '_))) (if tm1d1f@ls/false (apply (lambda () (call-with-values (lambda () (tm1c28@gen-syntax tm1c9f@src tm1ceb@y tm1ca1@r tm1ca2@maps tm1ca3@ellipsis? tm1ca4@vec?)) (lambda (tm1d25@tm1d22 tm1d26@tm1d24) (let ((tm1d29@maps tm1d26@tm1d24) (tm1d2a@y tm1d25@tm1d22)) (call-with-values (lambda () (tm1cec@k tm1d29@maps)) (lambda (tm1d31@tm1d2e tm1d32@tm1d30) (let ((tm1d35@maps tm1d32@tm1d30) (tm1d36@x tm1d31@tm1d2e)) (values (tm1c2c@gen-append tm1d36@x tm1d2a@y) tm1d35@maps)))))))) tm1d1f@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1d1d@t)))))))))))) tm1cdd@ls/false) (let ((tm1d39@t tm1cdb@t)) (let ((tm1d3b@ls/false (tmd8e@syntax-dispatch tm1d39@t '(any . any)))) (if tm1d3b@ls/false (apply (lambda (tm1d3d@x tm1d3e@y) (call-with-values (lambda () (tm1c28@gen-syntax tm1c9f@src tm1d3d@x tm1ca1@r tm1ca2@maps tm1ca3@ellipsis? '#f)) (lambda (tm1d45@tm1d42 tm1d46@tm1d44) (let ((tm1d49@maps tm1d46@tm1d44) (tm1d4a@xnew tm1d45@tm1d42)) (call-with-values (lambda () (tm1c28@gen-syntax tm1c9f@src tm1d3e@y tm1ca1@r tm1d49@maps tm1ca3@ellipsis? tm1ca4@vec?)) (lambda (tm1d51@tm1d4e tm1d52@tm1d50) (let ((tm1d55@maps tm1d52@tm1d50) (tm1d56@ynew tm1d51@tm1d4e)) (values (tm1c32@gen-cons tm1ca0@e tm1d3d@x tm1d3e@y tm1d4a@xnew tm1d56@ynew) tm1d55@maps)))))))) tm1d3b@ls/false) (let ((tm1d59@t tm1d39@t)) (let ((tm1d5b@ls/false (tmd8e@syntax-dispatch tm1d59@t '#(vector each-any)))) (if tm1d5b@ls/false (apply (lambda (tm1d5d@ls) (call-with-values (lambda () (tm1c28@gen-syntax tm1c9f@src tm1d5d@ls tm1ca1@r tm1ca2@maps tm1ca3@ellipsis? '#t)) (lambda (tm1d63@tm1d60 tm1d64@tm1d62) (let ((tm1d67@maps tm1d64@tm1d62) (tm1d68@lsnew tm1d63@tm1d60)) (values (tm1c34@gen-vector tm1ca0@e tm1d5d@ls tm1d68@lsnew) tm1d67@maps))))) tm1d5b@ls/false) (let ((tm1d6b@t tm1d59@t)) (let ((tm1d6d@ls/false (tmd8e@syntax-dispatch tm1d6b@t '_))) (if tm1d6d@ls/false (apply (lambda () (values (list 'quote tm1ca0@e) tm1ca2@maps)) tm1d6d@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1d6b@t)))))))))))))))))))))))) (tm1c2a@gen-ref (lambda (tm1c85@src tm1c86@var tm1c87@level tm1c88@maps) (if (= tm1c87@level '0) (values tm1c86@var tm1c88@maps) (if (null? tm1c88@maps) (tme6e@syntax-violation '#f '"missing ellipsis in syntax form" tm1c85@src) (call-with-values (lambda () (tm1c2a@gen-ref tm1c85@src tm1c86@var (- tm1c87@level '1) (cdr tm1c88@maps))) (lambda (tm1c91@tm1c8e tm1c92@tm1c90) (let ((tm1c95@outer-maps tm1c92@tm1c90) (tm1c96@outer-var tm1c91@tm1c8e)) (let ((tm1c99@t (assq tm1c96@outer-var (car tm1c88@maps)))) (if tm1c99@t ((lambda (tm1c9b@b) (values (cdr tm1c9b@b) tm1c88@maps)) tm1c99@t) (let ((tm1c9d@inner-var (tmb0f@gen-lexical 'tmp))) (values tm1c9d@inner-var (cons (cons (cons tm1c96@outer-var tm1c9d@inner-var) (car tm1c88@maps)) tm1c95@outer-maps)))))))))))) (tm1c2c@gen-append (lambda (tm1c81@x tm1c82@y) (if (fast-equal? tm1c82@y ''()) tm1c81@x (list 'append tm1c81@x tm1c82@y)))) (tm1c2e@gen-mappend (lambda (tm1c7d@e tm1c7e@map-env) (list 'apply '(primitive append) (tm1c30@gen-map tm1c7d@e tm1c7e@map-env)))) (tm1c30@gen-map (lambda (tm1c6b@e tm1c6c@map-env) (let ((tm1c6f@formals (map cdr tm1c6c@map-env)) (tm1c70@actuals (map (lambda (tm1c73@x) (list 'ref (car tm1c73@x))) tm1c6c@map-env))) (if (eq? (car tm1c6b@e) 'ref) (car tm1c70@actuals) (if (for-all (lambda (tm1c75@x) (and (eq? (car tm1c75@x) 'ref) (memq (cadr tm1c75@x) tm1c6f@formals))) (cdr tm1c6b@e)) (let ((tm1c77@args (map (let ((tm1c79@r (map cons tm1c6f@formals tm1c70@actuals))) (lambda (tm1c7b@x) (cdr (assq (cadr tm1c7b@x) tm1c79@r)))) (cdr tm1c6b@e)))) (cons 'map (cons (list 'primitive (car tm1c6b@e)) tm1c77@args))) (cons* 'map (list 'lambda tm1c6f@formals tm1c6b@e) tm1c70@actuals)))))) (tm1c32@gen-cons (lambda (tm1c5b@e tm1c5c@x tm1c5d@y tm1c5e@xnew tm1c5f@ynew) (let ((tm1c65@t (car tm1c5f@ynew))) (if (memv tm1c65@t '(quote)) (if (eq? (car tm1c5e@xnew) 'quote) (let ((tm1c67@xnew (cadr tm1c5e@xnew)) (tm1c68@ynew (cadr tm1c5f@ynew))) (if (and (eq? tm1c67@xnew tm1c5c@x) (eq? tm1c68@ynew tm1c5d@y)) (list 'quote tm1c5b@e) (list 'quote (cons tm1c67@xnew tm1c68@ynew)))) (if (null? (cadr tm1c5f@ynew)) (list 'list tm1c5e@xnew) (list 'cons tm1c5e@xnew tm1c5f@ynew))) (if (memv tm1c65@t '(list)) (cons 'list (cons tm1c5e@xnew (cdr tm1c5f@ynew))) (list 'cons tm1c5e@xnew tm1c5f@ynew)))))) (tm1c34@gen-vector (lambda (tm1c55@e tm1c56@ls tm1c57@lsnew) (if (eq? (car tm1c57@lsnew) 'quote) (if (eq? (cadr tm1c57@lsnew) tm1c56@ls) (list 'quote tm1c55@e) (list 'quote (list->vector (cadr tm1c57@lsnew)))) (if (eq? (car tm1c57@lsnew) 'list) (cons 'vector (cdr tm1c57@lsnew)) (list 'list->vector tm1c57@lsnew))))) (tm1c36@regen (lambda (tm1c4f@x) (let ((tm1c51@t (car tm1c4f@x))) (if (memv tm1c51@t '(ref)) (cadr tm1c4f@x) (if (memv tm1c51@t '(primitive)) (list 'primitive (cadr tm1c4f@x)) (if (memv tm1c51@t '(quote)) (list 'quote (cadr tm1c4f@x)) (if (memv tm1c51@t '(lambda)) (tmaea@tma1c@build-lambda '#f (cadr tm1c4f@x) (tm1c36@regen (caddr tm1c4f@x))) (if (memv tm1c51@t '(map)) (let ((tm1c53@ls (map tm1c36@regen (cdr tm1c4f@x)))) (cons '(primitive ellipsis-map) tm1c53@ls)) (cons (list 'primitive (car tm1c4f@x)) (map tm1c36@regen (cdr tm1c4f@x)))))))))))) (lambda (tm1c37@e tm1c38@r tm1c39@mr) (let ((tm1c3d@t tm1c37@e)) (let ((tm1c3f@ls/false (tmd8e@syntax-dispatch tm1c3d@t '(_ any)))) (if tm1c3f@ls/false (apply (lambda (tm1c41@x) (call-with-values (lambda () (tm1c28@gen-syntax tm1c37@e tm1c41@x tm1c38@r '() tmd90@ellipsis? '#f)) (lambda (tm1c47@tm1c44 tm1c48@tm1c46) (let ((tm1c4b@maps tm1c48@tm1c46) (tm1c4c@e tm1c47@tm1c44)) (tm1c36@regen tm1c4c@e))))) tm1c3f@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1c3d@t))))))) (set! tm28a0@tmd9a@syntax-transformer tmd9a@syntax-transformer) (set! tmd9c@core-macro-transformer (lambda (tm1d6f@name) (let ((tm1d71@t tm1d6f@name)) (if (memv tm1d71@t '(quote)) tmd3e@quote-transformer (if (memv tm1d71@t '(lambda)) tmd42@lambda-transformer (if (memv tm1d71@t '(case-lambda)) tmd40@case-lambda-transformer (if (memv tm1d71@t '(letrec)) tmd26@letrec-transformer (if (memv tm1d71@t '(letrec*)) tmd28@letrec*-transformer (if (memv tm1d71@t '(let)) tmd24@let-transformer (if (memv tm1d71@t '(if)) tmd36@if-transformer (if (memv tm1d71@t '(and)) tmd38@and-transformer (if (memv tm1d71@t '(or)) tmd3a@or-transformer (if (memv tm1d71@t '(foreign-call)) tmd8a@foreign-call-transformer (if (memv tm1d71@t '(syntax-case)) tmd96@syntax-case-transformer (if (memv tm1d71@t '(syntax)) tmd9a@syntax-transformer (if (memv tm1d71@t '(type-descriptor)) tmd2c@type-descriptor-transformer (if (memv tm1d71@t '(record-type-descriptor)) tmd2e@record-type-descriptor-transformer (if (memv tm1d71@t '(record-constructor-descriptor)) tmd30@record-constructor-descriptor-transformer (if (memv tm1d71@t '(fluid-let-syntax)) tmd2a@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" tm1d6f@name)))))))))))))))))))) (set! tm28a1@tmd9c@core-macro-transformer tmd9c@core-macro-transformer) (set! tmd9e@symbol-macro (lambda (tm1d73@x tm1d74@set) (let ((tm1d77@t tm1d73@x)) (let ((tm1d79@ls/false (tmd8e@syntax-dispatch tm1d77@t '(_ any)))) (if (and tm1d79@ls/false (apply (lambda (tm1d7b@name) (and (tmb87@id? tm1d7b@name) (memq (tmb89@id->sym tm1d7b@name) tm1d74@set))) tm1d79@ls/false)) (apply (lambda (tm1d7d@name) (tmd44@bless (list 'quote tm1d7d@name))) tm1d79@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1d77@t)))))) (set! tm28a2@tmd9e@symbol-macro tmd9e@symbol-macro) (set! tmda0@macro-transformer (lambda (tm1d7f@x) (if (procedure? tm1d7f@x) tm1d7f@x (if (symbol? tm1d7f@x) (let ((tm1d81@t tm1d7f@x)) (if (memv tm1d81@t '(define-record-type)) tmd82@define-record-type-macro (if (memv tm1d81@t '(define-struct)) tmd80@define-struct-macro (if (memv tm1d81@t '(include)) tmd76@include-macro (if (memv tm1d81@t '(cond)) tmd72@cond-macro (if (memv tm1d81@t '(let)) tmd4a@let-macro (if (memv tm1d81@t '(do)) tmd6a@do-macro (if (memv tm1d81@t '(or)) tmd6e@or-macro (if (memv tm1d81@t '(and)) tmd70@and-macro (if (memv tm1d81@t '(let*)) tmd6c@let*-macro (if (memv tm1d81@t '(let-values)) tmd4c@let-values-macro (if (memv tm1d81@t '(let*-values)) tmd4e@let*-values-macro (if (memv tm1d81@t '(syntax-rules)) tmd7a@syntax-rules-macro (if (memv tm1d81@t '(quasiquote)) tmd7c@quasiquote-macro (if (memv tm1d81@t '(quasisyntax)) tmd7e@quasisyntax-macro (if (memv tm1d81@t '(with-syntax)) tmd46@with-syntax-macro (if (memv tm1d81@t '(when)) tmd32@when-macro (if (memv tm1d81@t '(unless)) tmd34@unless-macro (if (memv tm1d81@t '(case)) tmd3c@case-macro (if (memv tm1d81@t '(identifier-syntax)) tmd68@identifier-syntax-macro (if (memv tm1d81@t '(time)) tmd60@time-macro (if (memv tm1d81@t '(delay)) tmd62@delay-macro (if (memv tm1d81@t '(assert)) tmd64@assert-macro (if (memv tm1d81@t '(endianness)) tmd66@endianness-macro (if (memv tm1d81@t '(guard)) tmd5c@guard-macro (if (memv tm1d81@t '(define-enumeration)) tmd5e@define-enumeration-macro (if (memv tm1d81@t '(trace-lambda)) tmd50@trace-lambda-macro (if (memv tm1d81@t '(trace-define)) tmd52@trace-define-macro (if (memv tm1d81@t '(trace-define-syntax)) tmd54@trace-define-syntax-macro (if (memv tm1d81@t '(trace-let-syntax)) tmd58@trace-let-syntax-macro (if (memv tm1d81@t '(trace-letrec-syntax)) tmd5a@trace-letrec-syntax-macro (if (memv tm1d81@t '(define-condition-type)) tmd84@define-condition-type-macro (if (memv tm1d81@t '(parameterize)) tmd88@parameterize-macro (if (memv tm1d81@t '(include-into)) tmd78@include-into-macro (if (memv tm1d81@t '(eol-style)) (lambda (tm1d83@x) (tmd9e@symbol-macro tm1d83@x '(none lf cr crlf nel crnel ls))) (if (memv tm1d81@t '(error-handling-mode)) (lambda (tm1d85@x) (tmd9e@symbol-macro tm1d85@x '(ignore raise replace))) (if (memv tm1d81@t '(buffer-mode)) (lambda (tm1d87@x) (tmd9e@symbol-macro tm1d87@x '(none line block))) (if (memv tm1d81@t '(file-options)) tmb02@file-options-macro (if (memv tm1d81@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) tmd86@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" tm1d7f@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" tm1d7f@x))))) (set! tm28a3@tmda0@macro-transformer tmda0@macro-transformer) (set! tmda2@local-macro-transformer (lambda (tm1d89@x) (car tm1d89@x))) (set! tm28a4@tmda2@local-macro-transformer tmda2@local-macro-transformer) (set! tmda4@do-macro-call (lambda (tm1d8b@transformer tm1d8c@expr tm1d8d@rib) (let ((tm1d91@out (tm1d8b@transformer (tmb73@add-mark tmb6b@anti-mark '#f tm1d8c@expr '#f)))) (begin (let tm1d95@f ((tm1d93@x tm1d91@out)) (if (not (tmb53@stx? tm1d93@x)) (if (pair? tm1d93@x) (begin (tm1d95@f (car tm1d93@x)) (tm1d95@f (cdr tm1d93@x))) (if (vector? tm1d93@x) (vector-for-each tm1d95@f tm1d93@x) (if (symbol? tm1d93@x) (tme6e@syntax-violation '#f '"raw symbol encountered in output of macro" tm1d8c@expr tm1d93@x) (void)))) (void))) (tmb73@add-mark (tmb69@gen-mark) tm1d8d@rib tm1d91@out tm1d8c@expr))))) (set! tm28a5@tmda4@do-macro-call tmda4@do-macro-call) (set! tmda6@chi-macro (lambda (tm1d97@p tm1d98@e tm1d99@rib) (tmda4@do-macro-call (tmda0@macro-transformer tm1d97@p) tm1d98@e tm1d99@rib))) (set! tm28a6@tmda6@chi-macro tmda6@chi-macro) (set! tmda8@chi-local-macro (lambda (tm1d9d@p tm1d9e@e tm1d9f@rib) (tmda4@do-macro-call (tmda2@local-macro-transformer tm1d9d@p) tm1d9e@e tm1d9f@rib))) (set! tm28a7@tmda8@chi-local-macro tmda8@chi-local-macro) (set! tmdaa@chi-global-macro (lambda (tm1da3@p tm1da4@e tm1da5@rib) (let ((tm1da9@lib (car tm1da3@p)) (tm1daa@loc (cdr tm1da3@p))) (begin (tm9a4@tm7f3@visit-library tm1da9@lib) (let ((tm1dad@x (symbol-value tm1daa@loc))) (let ((tm1daf@transformer (if (procedure? tm1dad@x) tm1dad@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" tm1dad@x)))) (tmda4@do-macro-call tm1daf@transformer tm1da4@e tm1da5@rib))))))) (set! tm28a8@tmdaa@chi-global-macro tmdaa@chi-global-macro) (set! tmdac@chi-expr* (lambda (tm1db1@e* tm1db2@r tm1db3@mr) (if (null? tm1db1@e*) '() (let ((tm1db7@e (tmdb0@chi-expr (car tm1db1@e*) tm1db2@r tm1db3@mr))) (cons tm1db7@e (tmdac@chi-expr* (cdr tm1db1@e*) tm1db2@r tm1db3@mr)))))) (set! tm28a9@tmdac@chi-expr* tmdac@chi-expr*) (set! tmdae@chi-application (lambda (tm1db9@e tm1dba@r tm1dbb@mr) (let ((tm1dbf@t tm1db9@e)) (let ((tm1dc1@ls/false (tmd8e@syntax-dispatch tm1dbf@t '(any . each-any)))) (if tm1dc1@ls/false (apply (lambda (tm1dc3@rator tm1dc4@rands) (let ((tm1dc7@rator (tmdb0@chi-expr tm1dc3@rator tm1dba@r tm1dbb@mr))) (cons tm1dc7@rator (tmdac@chi-expr* tm1dc4@rands tm1dba@r tm1dbb@mr)))) tm1dc1@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1dbf@t)))))) (set! tm28aa@tmdae@chi-application tmdae@chi-application) (set! tmdb0@chi-expr (lambda (tm1dc9@e tm1dca@r tm1dcb@mr) (call-with-values (lambda () (tmba9@syntax-type tm1dc9@e tm1dca@r)) (lambda (tm1dd5@tm1dd0 tm1dd6@tm1dd2 tm1dd7@tm1dd4) (let ((tm1ddb@kwd tm1dd7@tm1dd4) (tm1ddc@value tm1dd6@tm1dd2) (tm1ddd@type tm1dd5@tm1dd0)) (let ((tm1de1@t tm1ddd@type)) (if (memv tm1de1@t '(core-macro)) (let ((tm1de3@transformer (tmd9c@core-macro-transformer tm1ddc@value))) (tm1de3@transformer tm1dc9@e tm1dca@r tm1dcb@mr)) (if (memv tm1de1@t '(global)) (let ((tm1de5@lib (car tm1ddc@value))) (let ((tm1de7@loc (cdr tm1ddc@value))) (begin ((tmdf6@inv-collector) tm1de5@lib) tm1de7@loc))) (if (memv tm1de1@t '(core-prim)) (let ((tm1de9@name tm1ddc@value)) (list 'primitive tm1de9@name)) (if (memv tm1de1@t '(call)) (tmdae@chi-application tm1dc9@e tm1dca@r tm1dcb@mr) (if (memv tm1de1@t '(lexical)) (let ((tm1deb@lex (tmd18@lexical-var tm1ddc@value))) tm1deb@lex) (if (memv tm1de1@t '(global-macro global-macro!)) (tmdb0@chi-expr (tmdaa@chi-global-macro tm1ddc@value tm1dc9@e '#f) tm1dca@r tm1dcb@mr) (if (memv tm1de1@t '(local-macro local-macro!)) (tmdb0@chi-expr (tmda8@chi-local-macro tm1ddc@value tm1dc9@e '#f) tm1dca@r tm1dcb@mr) (if (memv tm1de1@t '(macro macro!)) (tmdb0@chi-expr (tmda6@chi-macro tm1ddc@value tm1dc9@e '#f) tm1dca@r tm1dcb@mr) (if (memv tm1de1@t '(constant)) (let ((tm1ded@datum tm1ddc@value)) (list 'quote tm1ded@datum)) (if (memv tm1de1@t '(set!)) (tmdb2@chi-set! tm1dc9@e tm1dca@r tm1dcb@mr) (if (memv tm1de1@t '(begin)) (let ((tm1def@t tm1dc9@e)) (let ((tm1df1@ls/false (tmd8e@syntax-dispatch tm1def@t '(_ any . each-any)))) (if tm1df1@ls/false (apply (lambda (tm1df3@x tm1df4@x*) (tmaec@tma4c@build-sequence '#f (tmdac@chi-expr* (cons tm1df3@x tm1df4@x*) tm1dca@r tm1dcb@mr))) tm1df1@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1def@t)))) (if (memv tm1de1@t '(let-syntax letrec-syntax)) (let ((tm1df7@t tm1dc9@e)) (let ((tm1df9@ls/false (tmd8e@syntax-dispatch tm1df7@t '(_ #(each (any any)) any . each-any)))) (if (and tm1df9@ls/false (apply (lambda (tm1dfb@xlhs* tm1dfc@xrhs* tm1dfd@xbody tm1dfe@xbody*) (if (not (tmb8f@valid-bound-ids? tm1dfb@xlhs*)) (tme6e@syntax-violation '#f '"invalid identifiers" tm1dc9@e) (void))) tm1df9@ls/false)) (apply (lambda (tm1e03@xlhs* tm1e04@xrhs* tm1e05@xbody tm1e06@xbody*) (let ((tm1e0b@xlab* (map tmb13@gen-label tm1e03@xlhs*))) (let ((tm1e0d@xrib (tmb47@make-full-rib tm1e03@xlhs* tm1e0b@xlab*))) (let ((tm1e0f@xb* (map (lambda (tm1e11@x) (tmbbf@make-eval-transformer (tmde8@expand-transformer (if (eq? tm1ddd@type 'let-syntax) tm1e11@x (tmb71@add-subst tm1e0d@xrib tm1e11@x)) tm1dcb@mr))) tm1e04@xrhs*))) (tmaec@tma4c@build-sequence '#f (tmdac@chi-expr* (map (lambda (tm1e13@x) (tmb71@add-subst tm1e0d@xrib tm1e13@x)) (cons tm1e05@xbody tm1e06@xbody*)) (append (map cons tm1e0b@xlab* tm1e0f@xb*) tm1dca@r) (append (map cons tm1e0b@xlab* tm1e0f@xb*) tm1dcb@mr))))))) tm1df9@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1df7@t)))) (if (memv tm1de1@t '(displaced-lexical)) (tme6e@syntax-violation '#f '"identifier out of context" tm1dc9@e) (if (memv tm1de1@t '(syntax)) (tme6e@syntax-violation '#f '"reference to pattern variable outside a syntax form" tm1dc9@e) (if (memv tm1de1@t '(define define-syntax module import library)) (tme6e@syntax-violation '#f (string-append (let ((tm1e15@t tm1ddd@type)) (if (memv tm1e15@t '(define)) '"a definition" (if (memv tm1e15@t '(define-syntax)) '"a define-syntax" (if (memv tm1e15@t '(module)) '"a module definition" (if (memv tm1e15@t '(library)) '"a library definition" (if (memv tm1e15@t '(import)) '"an import declaration" (if (memv tm1e15@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") tm1dc9@e) (if (memv tm1de1@t '(mutable)) (tme6e@syntax-violation '#f '"attempt to reference an unexportable variable" tm1dc9@e) (tme6e@syntax-violation '#f '"invalid expression" tm1dc9@e))))))))))))))))))))))) (set! tm28ab@tmdb0@chi-expr tmdb0@chi-expr) (set! tmdb2@chi-set! (lambda (tm1e17@e tm1e18@r tm1e19@mr) (let ((tm1e1d@t tm1e17@e)) (let ((tm1e1f@ls/false (tmd8e@syntax-dispatch tm1e1d@t '(_ any any)))) (if (and tm1e1f@ls/false (apply (lambda (tm1e21@x tm1e22@v) (tmb87@id? tm1e21@x)) tm1e1f@ls/false)) (apply (lambda (tm1e25@x tm1e26@v) (call-with-values (lambda () (tmba9@syntax-type tm1e25@x tm1e18@r)) (lambda (tm1e2f@tm1e2a tm1e30@tm1e2c tm1e31@tm1e2e) (let ((tm1e35@kwd tm1e31@tm1e2e) (tm1e36@value tm1e30@tm1e2c) (tm1e37@type tm1e2f@tm1e2a)) (let ((tm1e3b@t tm1e37@type)) (if (memv tm1e3b@t '(lexical)) (begin (tmd1c@set-lexical-mutable! tm1e36@value '#t) (list 'set! (tmd18@lexical-var tm1e36@value) (tmdb0@chi-expr tm1e26@v tm1e18@r tm1e19@mr))) (if (memv tm1e3b@t '(core-prim)) (tme6e@syntax-violation '#f '"cannot modify imported core primitive" tm1e17@e) (if (memv tm1e3b@t '(global)) (tme6e@syntax-violation '#f '"attempt to modify imported binding" tm1e17@e) (if (memv tm1e3b@t '(global-macro!)) (tmdb0@chi-expr (tmdaa@chi-global-macro tm1e36@value tm1e17@e '#f) tm1e18@r tm1e19@mr) (if (memv tm1e3b@t '(local-macro!)) (tmdb0@chi-expr (tmda8@chi-local-macro tm1e36@value tm1e17@e '#f) tm1e18@r tm1e19@mr) (if (memv tm1e3b@t '(mutable)) (tme6e@syntax-violation '#f '"attempt to assign to an unexportable variable" tm1e17@e) (tme6e@syntax-violation '#f '"invalid syntax" tm1e17@e)))))))))))) tm1e1f@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1e1d@t)))))) (set! tm28ac@tmdb2@chi-set! tmdb2@chi-set!) (set! tmdb4@verify-formals (lambda (tm1e3d@fmls tm1e3e@stx) (let ((tm1e41@t tm1e3d@fmls)) (let ((tm1e43@ls/false (tmd8e@syntax-dispatch tm1e41@t 'each-any))) (if tm1e43@ls/false (apply (lambda (tm1e45@x*) (if (not (tmb8f@valid-bound-ids? tm1e45@x*)) (tmd48@invalid-fmls-error tm1e3e@stx tm1e3d@fmls) (void))) tm1e43@ls/false) (let ((tm1e47@t tm1e41@t)) (let ((tm1e49@ls/false (tmd8e@syntax-dispatch tm1e47@t '#(each+ any () any)))) (if tm1e49@ls/false (apply (lambda (tm1e4b@x* tm1e4c@x) (if (not (tmb8f@valid-bound-ids? (cons tm1e4c@x tm1e4b@x*))) (tmd48@invalid-fmls-error tm1e3e@stx tm1e3d@fmls) (void))) tm1e49@ls/false) (let ((tm1e4f@t tm1e47@t)) (let ((tm1e51@ls/false (tmd8e@syntax-dispatch tm1e4f@t '_))) (if tm1e51@ls/false (apply (lambda () (tme6e@syntax-violation '#f '"invalid syntax" tm1e3e@stx)) tm1e51@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1e4f@t)))))))))))) (set! tm28ad@tmdb4@verify-formals tmdb4@verify-formals) (set! tmdb6@chi-lambda-clause (lambda (tm1e53@stx tm1e54@fmls tm1e55@body* tm1e56@r tm1e57@mr) (let ((tm1e5d@t tm1e54@fmls)) (let ((tm1e5f@ls/false (tmd8e@syntax-dispatch tm1e5d@t 'each-any))) (if tm1e5f@ls/false (apply (lambda (tm1e61@x*) (begin (tmdb4@verify-formals tm1e54@fmls tm1e53@stx) (let ((tm1e63@lex* (map tmb0f@gen-lexical tm1e61@x*)) (tm1e64@lab* (map tmb13@gen-label tm1e61@x*))) (values tm1e63@lex* (tmdc6@chi-internal (tmb71@add-subst (tmb47@make-full-rib tm1e61@x* tm1e64@lab*) tm1e55@body*) (tmd20@add-lexicals tm1e64@lab* tm1e63@lex* tm1e56@r) tm1e57@mr))))) tm1e5f@ls/false) (let ((tm1e67@t tm1e5d@t)) (let ((tm1e69@ls/false (tmd8e@syntax-dispatch tm1e67@t '#(each+ any () any)))) (if tm1e69@ls/false (apply (lambda (tm1e6b@x* tm1e6c@x) (begin (tmdb4@verify-formals tm1e54@fmls tm1e53@stx) (let ((tm1e6f@lex* (map tmb0f@gen-lexical tm1e6b@x*)) (tm1e70@lab* (map tmb13@gen-label tm1e6b@x*)) (tm1e71@lex (tmb0f@gen-lexical tm1e6c@x)) (tm1e72@lab (tmb13@gen-label tm1e6c@x))) (values (append tm1e6f@lex* tm1e71@lex) (tmdc6@chi-internal (tmb71@add-subst (tmb47@make-full-rib (cons tm1e6c@x tm1e6b@x*) (cons tm1e72@lab tm1e70@lab*)) tm1e55@body*) (tmd20@add-lexicals (cons tm1e72@lab tm1e70@lab*) (cons tm1e71@lex tm1e6f@lex*) tm1e56@r) tm1e57@mr))))) tm1e69@ls/false) (let ((tm1e77@t tm1e67@t)) (let ((tm1e79@ls/false (tmd8e@syntax-dispatch tm1e77@t '_))) (if tm1e79@ls/false (apply (lambda () (tme6e@syntax-violation '#f '"invalid syntax" tm1e54@fmls)) tm1e79@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1e77@t)))))))))))) (set! tm28ae@tmdb6@chi-lambda-clause tmdb6@chi-lambda-clause) (set! tmdb8@chi-lambda-clause* (lambda (tm1e7b@stx tm1e7c@fmls* tm1e7d@body** tm1e7e@r tm1e7f@mr) (if (null? tm1e7c@fmls*) (values '() '()) (call-with-values (lambda () (tmdb6@chi-lambda-clause tm1e7b@stx (car tm1e7c@fmls*) (car tm1e7d@body**) tm1e7e@r tm1e7f@mr)) (lambda (tm1e89@tm1e86 tm1e8a@tm1e88) (let ((tm1e8d@b tm1e8a@tm1e88) (tm1e8e@a tm1e89@tm1e86)) (call-with-values (lambda () (tmdb8@chi-lambda-clause* tm1e7b@stx (cdr tm1e7c@fmls*) (cdr tm1e7d@body**) tm1e7e@r tm1e7f@mr)) (lambda (tm1e95@tm1e92 tm1e96@tm1e94) (let ((tm1e99@b* tm1e96@tm1e94) (tm1e9a@a* tm1e95@tm1e92)) (values (cons tm1e8e@a tm1e9a@a*) (cons tm1e8d@b tm1e99@b*))))))))))) (set! tm28af@tmdb8@chi-lambda-clause* tmdb8@chi-lambda-clause*) (set! tmdba@chi-defun (lambda (tm1e9d@x tm1e9e@r tm1e9f@mr) (let ((tm1ea3@fmls (car tm1e9d@x)) (tm1ea4@body* (cdr tm1e9d@x))) (call-with-values (lambda () (tmdb6@chi-lambda-clause tm1ea3@fmls tm1ea3@fmls tm1ea4@body* tm1e9e@r tm1e9f@mr)) (lambda (tm1eab@tm1ea8 tm1eac@tm1eaa) (let ((tm1eaf@body tm1eac@tm1eaa) (tm1eb0@fmls tm1eab@tm1ea8)) (tmaea@tma1c@build-lambda '#f tm1eb0@fmls tm1eaf@body))))))) (set! tm28b0@tmdba@chi-defun tmdba@chi-defun) (set! tmdbc@chi-rhs (lambda (tm1eb3@rhs tm1eb4@r tm1eb5@mr) (let ((tm1eb9@t (car tm1eb3@rhs))) (if (memv tm1eb9@t '(defun)) (tmdba@chi-defun (cdr tm1eb3@rhs) tm1eb4@r tm1eb5@mr) (if (memv tm1eb9@t '(expr)) (let ((tm1ebb@expr (cdr tm1eb3@rhs))) (tmdb0@chi-expr tm1ebb@expr tm1eb4@r tm1eb5@mr)) (if (memv tm1eb9@t '(top-expr)) (let ((tm1ebd@expr (cdr tm1eb3@rhs))) (tmaec@tma4c@build-sequence '#f (list (tmdb0@chi-expr tm1ebd@expr tm1eb4@r tm1eb5@mr) (tmaed@tma4e@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" tm1eb3@rhs))))))) (set! tm28b1@tmdbc@chi-rhs tmdbc@chi-rhs) (set! tmdbe@expand-interaction-rhs*/init* (lambda (tm1ebf@lhs* tm1ec0@rhs* tm1ec1@init* tm1ec2@r tm1ec3@mr) (let tm1ecd@f ((tm1ec9@lhs* tm1ebf@lhs*) (tm1eca@rhs* tm1ec0@rhs*)) (if (null? tm1ec9@lhs*) (map (lambda (tm1ecf@x) (tmdb0@chi-expr tm1ecf@x tm1ec2@r tm1ec3@mr)) tm1ec1@init*) (let ((tm1ed1@lhs (car tm1ec9@lhs*)) (tm1ed2@rhs (car tm1eca@rhs*))) (let ((tm1ed5@t (car tm1ed2@rhs))) (if (memv tm1ed5@t '(defun)) (let ((tm1ed7@rhs (tmdba@chi-defun (cdr tm1ed2@rhs) tm1ec2@r tm1ec3@mr))) (cons (list 'set! tm1ed1@lhs tm1ed7@rhs) (tm1ecd@f (cdr tm1ec9@lhs*) (cdr tm1eca@rhs*)))) (if (memv tm1ed5@t '(expr)) (let ((tm1ed9@rhs (tmdb0@chi-expr (cdr tm1ed2@rhs) tm1ec2@r tm1ec3@mr))) (cons (list 'set! tm1ed1@lhs tm1ed9@rhs) (tm1ecd@f (cdr tm1ec9@lhs*) (cdr tm1eca@rhs*)))) (if (memv tm1ed5@t '(top-expr)) (let ((tm1edb@e (tmdb0@chi-expr (cdr tm1ed2@rhs) tm1ec2@r tm1ec3@mr))) (cons tm1edb@e (tm1ecd@f (cdr tm1ec9@lhs*) (cdr tm1eca@rhs*)))) (error 'expand-interaction '"invallid" tm1ed2@rhs)))))))))) (set! tm28b2@tmdbe@expand-interaction-rhs*/init* tmdbe@expand-interaction-rhs*/init*) (set! tmdc0@chi-rhs* (lambda (tm1edd@rhs* tm1ede@r tm1edf@mr) (let tm1ee5@f ((tm1ee3@ls tm1edd@rhs*)) (if (null? tm1ee3@ls) '() (let ((tm1ee7@a (tmdbc@chi-rhs (car tm1ee3@ls) tm1ede@r tm1edf@mr))) (cons tm1ee7@a (tm1ee5@f (cdr tm1ee3@ls)))))))) (set! tm28b3@tmdc0@chi-rhs* tmdc0@chi-rhs*) (set! tmdc2@find-bound=? (lambda (tm1ee9@x tm1eea@lhs* tm1eeb@rhs*) (if (null? tm1eea@lhs*) '#f (if (tmb8b@bound-id=? tm1ee9@x (car tm1eea@lhs*)) (car tm1eeb@rhs*) (tmdc2@find-bound=? tm1ee9@x (cdr tm1eea@lhs*) (cdr tm1eeb@rhs*)))))) (set! tm28b4@tmdc2@find-bound=? tmdc2@find-bound=?) (set! tmdc4@find-dups (lambda (tm1eef@ls) (let tm1ef5@f ((tm1ef1@ls tm1eef@ls) (tm1ef2@dups '())) (if (null? tm1ef1@ls) tm1ef2@dups (let ((tm1ef7@t (tmdc2@find-bound=? (car tm1ef1@ls) (cdr tm1ef1@ls) (cdr tm1ef1@ls)))) (if tm1ef7@t ((lambda (tm1ef9@x) (tm1ef5@f (cdr tm1ef1@ls) (cons (list (car tm1ef1@ls) tm1ef9@x) tm1ef2@dups))) tm1ef7@t) (tm1ef5@f (cdr tm1ef1@ls) tm1ef2@dups))))))) (set! tm28b5@tmdc4@find-dups tmdc4@find-dups) (set! tmdc6@chi-internal (lambda (tm1efb@e* tm1efc@r tm1efd@mr) (let ((tm1f01@rib (tmb3b@make-empty-rib))) (call-with-values (lambda () (tmde6@chi-body* (map (lambda (tm1f13@x) (tmb71@add-subst tm1f01@rib tm1f13@x)) (tmb85@syntax->list tm1efb@e*)) tm1efc@r tm1efd@mr '() '() '() '() '() tm1f01@rib '#f)) (lambda (tm1f15@tm1f04 tm1f16@tm1f06 tm1f17@tm1f08 tm1f18@tm1f0a tm1f19@tm1f0c tm1f1a@tm1f0e tm1f1b@tm1f10 tm1f1c@tm1f12) (let ((tm1f25@_exp* tm1f1c@tm1f12) (tm1f26@kwd* tm1f1b@tm1f10) (tm1f27@mod** tm1f1a@tm1f0e) (tm1f28@rhs* tm1f19@tm1f0c) (tm1f29@lex* tm1f18@tm1f0a) (tm1f2a@mr tm1f17@tm1f08) (tm1f2b@r tm1f16@tm1f06) (tm1f2c@e* tm1f15@tm1f04)) (begin (if (null? tm1f2c@e*) (tme6e@syntax-violation '#f '"no expression in body" tm1f2c@e*) (void)) (let ((tm1f35@init* (tmdac@chi-expr* (append (apply append (reverse tm1f27@mod**)) tm1f2c@e*) tm1f2b@r tm1f2a@mr))) (let ((tm1f37@rhs* (tmdc0@chi-rhs* tm1f28@rhs* tm1f2b@r tm1f2a@mr))) (tmaf1@tma56@build-letrec* '#f (reverse tm1f29@lex*) (reverse tm1f37@rhs*) (tmaec@tma4c@build-sequence '#f tm1f35@init*))))))))))) (set! tm28b6@tmdc6@chi-internal tmdc6@chi-internal) (set! tmdc8@parse-module (lambda (tm1f39@e) (let ((tm1f3b@t tm1f39@e)) (let ((tm1f3d@ls/false (tmd8e@syntax-dispatch tm1f3b@t '(_ each-any . each-any)))) (if tm1f3d@ls/false (apply (lambda (tm1f3f@export* tm1f40@b*) (begin (if (not (for-all tmb87@id? tm1f3f@export*)) (tme6e@syntax-violation '#f '"module exports must be identifiers" tm1f39@e) (void)) (values '#f (list->vector tm1f3f@export*) tm1f40@b*))) tm1f3d@ls/false) (let ((tm1f43@t tm1f3b@t)) (let ((tm1f45@ls/false (tmd8e@syntax-dispatch tm1f43@t '(_ any each-any . each-any)))) (if tm1f45@ls/false (apply (lambda (tm1f47@name tm1f48@export* tm1f49@b*) (begin (if (not (tmb87@id? tm1f47@name)) (tme6e@syntax-violation '#f '"module name must be an identifier" tm1f39@e) (void)) (if (not (for-all tmb87@id? tm1f48@export*)) (tme6e@syntax-violation '#f '"module exports must be identifiers" tm1f39@e) (void)) (values tm1f47@name (list->vector tm1f48@export*) tm1f49@b*))) tm1f45@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm1f43@t))))))))) (set! tm28b7@tmdc8@parse-module tmdc8@parse-module) (set! tmdd2@module-interface? (lambda (tm1f4d@x) (and (simple-struct? tm1f4d@x) (eq? (simple-struct-name tm1f4d@x) 'module-interface)))) (set! tm28b8@tmdd2@module-interface? tmdd2@module-interface?) (set! tmdd4@module-interface-first-mark (lambda (tm1f4f@x) (simple-struct-ref tm1f4f@x '0))) (set! tm28b9@tmdd4@module-interface-first-mark tmdd4@module-interface-first-mark) (set! tmdd6@set-module-interface-first-mark! (lambda (tm1f51@x tm1f52@val) (simple-struct-set! tm1f51@x '0 tm1f52@val))) (set! tm28ba@tmdd6@set-module-interface-first-mark! tmdd6@set-module-interface-first-mark!) (set! tmdd8@module-interface-exp-id-vec (lambda (tm1f55@x) (simple-struct-ref tm1f55@x '1))) (set! tm28bb@tmdd8@module-interface-exp-id-vec tmdd8@module-interface-exp-id-vec) (set! tmdda@set-module-interface-exp-id-vec! (lambda (tm1f57@x tm1f58@val) (simple-struct-set! tm1f57@x '1 tm1f58@val))) (set! tm28bc@tmdda@set-module-interface-exp-id-vec! tmdda@set-module-interface-exp-id-vec!) (set! tmddc@module-interface-exp-lab-vec (lambda (tm1f5b@x) (simple-struct-ref tm1f5b@x '2))) (set! tm28bd@tmddc@module-interface-exp-lab-vec tmddc@module-interface-exp-lab-vec) (set! tmdde@set-module-interface-exp-lab-vec! (lambda (tm1f5d@x tm1f5e@val) (simple-struct-set! tm1f5d@x '2 tm1f5e@val))) (set! tm28be@tmdde@set-module-interface-exp-lab-vec! tmdde@set-module-interface-exp-lab-vec!) (set! tmde0@dummy '3) (set! tm28bf@tmde0@dummy tmde0@dummy) (set! tmde2@module-interface-exp-id* (lambda (tm1f61@iface tm1f62@id) (letrec* ((tm1f66@diff-marks (lambda (tm1f6d@ls tm1f6e@x) (begin (if (null? tm1f6d@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((tm1f71@a (car tm1f6d@ls))) (if (eq? tm1f71@a tm1f6e@x) '() (cons tm1f71@a (tm1f66@diff-marks (cdr tm1f6d@ls) tm1f6e@x)))))))) (let ((tm1f67@diff (tm1f66@diff-marks (tmb59@stx-mark* tm1f62@id) (tmdd4@module-interface-first-mark tm1f61@iface))) (tm1f68@id-vec (tmdd8@module-interface-exp-id-vec tm1f61@iface))) (if (null? tm1f67@diff) tm1f68@id-vec (vector-map (lambda (tm1f6b@x) (make-simple-struct 'stx '5 (list (tmb55@stx-expr tm1f6b@x) (append tm1f67@diff (tmb59@stx-mark* tm1f6b@x)) '() '()))) tm1f68@id-vec)))))) (set! tm28c0@tmde2@module-interface-exp-id* tmde2@module-interface-exp-id*) (set! tmde4@chi-internal-module (lambda (tm1f73@e tm1f74@r tm1f75@mr tm1f76@lex* tm1f77@rhs* tm1f78@mod** tm1f79@kwd*) (call-with-values (lambda () (tmdc8@parse-module tm1f73@e)) (lambda (tm1f87@tm1f82 tm1f88@tm1f84 tm1f89@tm1f86) (let ((tm1f8d@e* tm1f89@tm1f86) (tm1f8e@exp-id* tm1f88@tm1f84) (tm1f8f@name tm1f87@tm1f82)) (let ((tm1f93@rib (tmb3b@make-empty-rib))) (let ((tm1f95@e* (map (lambda (tm1f97@x) (tmb71@add-subst tm1f93@rib tm1f97@x)) (tmb85@syntax->list tm1f8d@e*)))) (call-with-values (lambda () (tmde6@chi-body* tm1f95@e* tm1f74@r tm1f75@mr tm1f76@lex* tm1f77@rhs* tm1f78@mod** tm1f79@kwd* '() tm1f93@rib '#f)) (lambda (tm1fa9@tm1f9a tm1faa@tm1f9c tm1fab@tm1f9e tm1fac@tm1fa0 tm1fad@tm1fa2 tm1fae@tm1fa4 tm1faf@tm1fa6 tm1fb0@tm1fa8) (let ((tm1fb9@_exp* tm1fb0@tm1fa8) (tm1fba@kwd* tm1faf@tm1fa6) (tm1fbb@mod** tm1fae@tm1fa4) (tm1fbc@rhs* tm1fad@tm1fa2) (tm1fbd@lex* tm1fac@tm1fa0) (tm1fbe@mr tm1fab@tm1f9e) (tm1fbf@r tm1faa@tm1f9c) (tm1fc0@e* tm1fa9@tm1f9a)) (let ((tm1fc9@exp-lab* (vector-map (lambda (tm1fcd@x) (or (tmb9d@id->label (make-simple-struct 'stx '5 (list (tmb89@id->sym tm1fcd@x) (tmb59@stx-mark* tm1fcd@x) (list tm1f93@rib) '()))) (tme6e@syntax-violation '#f '"cannot find module export" tm1fcd@x))) tm1f8e@exp-id*)) (tm1fca@mod** (cons tm1fc0@e* tm1fbb@mod**))) (if (not tm1f8f@name) (values tm1fbd@lex* tm1fbc@rhs* tm1f8e@exp-id* tm1fc9@exp-lab* tm1fbf@r tm1fbe@mr tm1fca@mod** tm1fba@kwd*) (let ((tm1fcf@lab (tmb13@gen-label 'module)) (tm1fd0@iface (make-simple-struct 'module-interface '4 (list (car (tmb59@stx-mark* tm1f8f@name)) (vector-map (lambda (tm1fd3@x) (make-simple-struct 'stx '5 (list (tmb55@stx-expr tm1fd3@x) (tmb59@stx-mark* tm1fd3@x) '() '()))) tm1f8e@exp-id*) tm1fc9@exp-lab*)))) (values tm1fbd@lex* tm1fbc@rhs* (vector tm1f8f@name) (vector tm1fcf@lab) (cons (cons tm1fcf@lab (cons '$module tm1fd0@iface)) tm1fbf@r) (cons (cons tm1fcf@lab (cons '$module tm1fd0@iface)) tm1fbe@mr) tm1fca@mod** tm1fba@kwd*)))))))))))))) (set! tm28c1@tmde4@chi-internal-module tmde4@chi-internal-module) (set! tmde6@chi-body* (lambda (tm1fd5@e* tm1fd6@r tm1fd7@mr tm1fd8@lex* tm1fd9@rhs* tm1fda@mod** tm1fdb@kwd* tm1fdc@exp* tm1fdd@rib tm1fde@top?) (if (null? tm1fd5@e*) (values tm1fd5@e* tm1fd6@r tm1fd7@mr tm1fd8@lex* tm1fd9@rhs* tm1fda@mod** tm1fdb@kwd* tm1fdc@exp*) (let ((tm1fe9@e (car tm1fd5@e*))) (call-with-values (lambda () (tmba9@syntax-type tm1fe9@e tm1fd6@r)) (lambda (tm1ff1@tm1fec tm1ff2@tm1fee tm1ff3@tm1ff0) (let ((tm1ff7@kwd tm1ff3@tm1ff0) (tm1ff8@value tm1ff2@tm1fee) (tm1ff9@type tm1ff1@tm1fec)) (let ((tm1ffd@kwd* (if (tmb87@id? tm1ff7@kwd) (cons tm1ff7@kwd tm1fdb@kwd*) tm1fdb@kwd*))) (let ((tm1fff@t tm1ff9@type)) (if (memv tm1fff@t '(define)) (call-with-values (lambda () (tmd10@parse-define tm1fe9@e)) (lambda (tm2005@tm2002 tm2006@tm2004) (let ((tm2009@rhs tm2006@tm2004) (tm200a@id tm2005@tm2002)) (begin (if (tmb93@bound-id-member? tm200a@id tm1ffd@kwd*) (tme6e@syntax-violation '#f '"cannot redefine keyword" tm1fe9@e) (void)) (call-with-values (lambda () (tmb17@gen-define-label+loc tm200a@id tm1fdd@rib)) (lambda (tm2011@tm200e tm2012@tm2010) (let ((tm2015@lex tm2012@tm2010) (tm2016@lab tm2011@tm200e)) (begin (tmb3d@extend-rib! tm1fdd@rib tm200a@id tm2016@lab) (tmde6@chi-body* (cdr tm1fd5@e*) (tmd1e@add-lexical tm2016@lab tm2015@lex tm1fd6@r) tm1fd7@mr (cons tm2015@lex tm1fd8@lex*) (cons tm2009@rhs tm1fd9@rhs*) tm1fda@mod** tm1ffd@kwd* tm1fdc@exp* tm1fdd@rib tm1fde@top?))))))))) (if (memv tm1fff@t '(define-syntax)) (call-with-values (lambda () (tmd12@parse-define-syntax tm1fe9@e)) (lambda (tm201d@tm201a tm201e@tm201c) (let ((tm2021@rhs tm201e@tm201c) (tm2022@id tm201d@tm201a)) (begin (if (tmb93@bound-id-member? tm2022@id tm1ffd@kwd*) (tme6e@syntax-violation '#f '"cannot redefine keyword" tm1fe9@e) (void)) (let ((tm2025@lab (tmb19@gen-define-label tm2022@id tm1fdd@rib)) (tm2026@expanded-rhs (tmde8@expand-transformer tm2021@rhs tm1fd7@mr))) (begin (tmb3d@extend-rib! tm1fdd@rib tm2022@id tm2025@lab) (let ((tm2029@b (tmbbf@make-eval-transformer tm2026@expanded-rhs))) (tmde6@chi-body* (cdr tm1fd5@e*) (cons (cons tm2025@lab tm2029@b) tm1fd6@r) (cons (cons tm2025@lab tm2029@b) tm1fd7@mr) tm1fd8@lex* tm1fd9@rhs* tm1fda@mod** tm1ffd@kwd* tm1fdc@exp* tm1fdd@rib tm1fde@top?)))))))) (if (memv tm1fff@t '(let-syntax letrec-syntax)) (let ((tm202b@t tm1fe9@e)) (let ((tm202d@ls/false (tmd8e@syntax-dispatch tm202b@t '(_ #(each (any any)) . each-any)))) (if (and tm202d@ls/false (apply (lambda (tm202f@xlhs* tm2030@xrhs* tm2031@xbody*) (if (not (tmb8f@valid-bound-ids? tm202f@xlhs*)) (tme6e@syntax-violation '#f '"invalid identifiers" tm1fe9@e) (void))) tm202d@ls/false)) (apply (lambda (tm2035@xlhs* tm2036@xrhs* tm2037@xbody*) (let ((tm203b@xlab* (map tmb13@gen-label tm2035@xlhs*))) (let ((tm203d@xrib (tmb47@make-full-rib tm2035@xlhs* tm203b@xlab*))) (let ((tm203f@xb* (map (lambda (tm2041@x) (tmbbf@make-eval-transformer (tmde8@expand-transformer (if (eq? tm1ff9@type 'let-syntax) tm2041@x (tmb71@add-subst tm203d@xrib tm2041@x)) tm1fd7@mr))) tm2036@xrhs*))) (tmde6@chi-body* (append (map (lambda (tm2043@x) (tmb71@add-subst tm203d@xrib tm2043@x)) tm2037@xbody*) (cdr tm1fd5@e*)) (append (map cons tm203b@xlab* tm203f@xb*) tm1fd6@r) (append (map cons tm203b@xlab* tm203f@xb*) tm1fd7@mr) tm1fd8@lex* tm1fd9@rhs* tm1fda@mod** tm1ffd@kwd* tm1fdc@exp* tm1fdd@rib tm1fde@top?))))) tm202d@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm202b@t)))) (if (memv tm1fff@t '(begin)) (let ((tm2045@t tm1fe9@e)) (let ((tm2047@ls/false (tmd8e@syntax-dispatch tm2045@t '(_ . each-any)))) (if tm2047@ls/false (apply (lambda (tm2049@x*) (tmde6@chi-body* (append tm2049@x* (cdr tm1fd5@e*)) tm1fd6@r tm1fd7@mr tm1fd8@lex* tm1fd9@rhs* tm1fda@mod** tm1ffd@kwd* tm1fdc@exp* tm1fdd@rib tm1fde@top?)) tm2047@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm2045@t)))) (if (memv tm1fff@t '(global-macro global-macro!)) (tmde6@chi-body* (cons (tmdaa@chi-global-macro tm1ff8@value tm1fe9@e tm1fdd@rib) (cdr tm1fd5@e*)) tm1fd6@r tm1fd7@mr tm1fd8@lex* tm1fd9@rhs* tm1fda@mod** tm1ffd@kwd* tm1fdc@exp* tm1fdd@rib tm1fde@top?) (if (memv tm1fff@t '(local-macro local-macro!)) (tmde6@chi-body* (cons (tmda8@chi-local-macro tm1ff8@value tm1fe9@e tm1fdd@rib) (cdr tm1fd5@e*)) tm1fd6@r tm1fd7@mr tm1fd8@lex* tm1fd9@rhs* tm1fda@mod** tm1ffd@kwd* tm1fdc@exp* tm1fdd@rib tm1fde@top?) (if (memv tm1fff@t '(macro macro!)) (tmde6@chi-body* (cons (tmda6@chi-macro tm1ff8@value tm1fe9@e tm1fdd@rib) (cdr tm1fd5@e*)) tm1fd6@r tm1fd7@mr tm1fd8@lex* tm1fd9@rhs* tm1fda@mod** tm1ffd@kwd* tm1fdc@exp* tm1fdd@rib tm1fde@top?) (if (memv tm1fff@t '(module)) (call-with-values (lambda () (tmde4@chi-internal-module tm1fe9@e tm1fd6@r tm1fd7@mr tm1fd8@lex* tm1fd9@rhs* tm1fda@mod** tm1ffd@kwd*)) (lambda (tm205b@tm204c tm205c@tm204e tm205d@tm2050 tm205e@tm2052 tm205f@tm2054 tm2060@tm2056 tm2061@tm2058 tm2062@tm205a) (let ((tm206b@kwd* tm2062@tm205a) (tm206c@mod** tm2061@tm2058) (tm206d@mr tm2060@tm2056) (tm206e@r tm205f@tm2054) (tm206f@m-exp-lab* tm205e@tm2052) (tm2070@m-exp-id* tm205d@tm2050) (tm2071@rhs* tm205c@tm204e) (tm2072@lex* tm205b@tm204c)) (begin (vector-for-each (lambda (tm207b@id tm207c@lab) (tmb3d@extend-rib! tm1fdd@rib tm207b@id tm207c@lab)) tm2070@m-exp-id* tm206f@m-exp-lab*) (tmde6@chi-body* (cdr tm1fd5@e*) tm206e@r tm206d@mr tm2072@lex* tm2071@rhs* tm206c@mod** tm206b@kwd* tm1fdc@exp* tm1fdd@rib tm1fde@top?))))) (if (memv tm1fff@t '(library)) (begin (tme50@library-expander (tmb9b@stx->datum tm1fe9@e)) (tmde6@chi-body* (cdr tm1fd5@e*) tm1fd6@r tm1fd7@mr tm1fd8@lex* tm1fd9@rhs* tm1fda@mod** tm1ffd@kwd* tm1fdc@exp* tm1fdd@rib tm1fde@top?)) (if (memv tm1fff@t '(export)) (let ((tm207f@t tm1fe9@e)) (let ((tm2081@ls/false (tmd8e@syntax-dispatch tm207f@t '(_ . each-any)))) (if tm2081@ls/false (apply (lambda (tm2083@exp-decl*) (tmde6@chi-body* (cdr tm1fd5@e*) tm1fd6@r tm1fd7@mr tm1fd8@lex* tm1fd9@rhs* tm1fda@mod** tm1ffd@kwd* (append tm2083@exp-decl* tm1fdc@exp*) tm1fdd@rib tm1fde@top?)) tm2081@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm207f@t)))) (if (memv tm1fff@t '(import)) (letrec* ((tm2086@module-import? (lambda (tm20d9@e) (let ((tm20db@t tm20d9@e)) (let ((tm20dd@ls/false (tmd8e@syntax-dispatch tm20db@t '(_ any)))) (if (and tm20dd@ls/false (apply (lambda (tm20df@id) (tmb87@id? tm20df@id)) tm20dd@ls/false)) (apply (lambda (tm20e1@id) '#t) tm20dd@ls/false) (let ((tm20e3@t tm20db@t)) (let ((tm20e5@ls/false (tmd8e@syntax-dispatch tm20e3@t '(_ . each-any)))) (if tm20e5@ls/false (apply (lambda (tm20e7@imp*) '#f) tm20e5@ls/false) (let ((tm20e9@t tm20e3@t)) (let ((tm20eb@ls/false (tmd8e@syntax-dispatch tm20e9@t '_))) (if tm20eb@ls/false (apply (lambda () (tme6e@syntax-violation '#f '"malformed import form" tm20d9@e)) tm20eb@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm20e9@t)))))))))))) (tm2088@module-import (lambda (tm20b7@e tm20b8@r) (let ((tm20bb@t tm20b7@e)) (let ((tm20bd@ls/false (tmd8e@syntax-dispatch tm20bb@t '(_ any)))) (if (and tm20bd@ls/false (apply (lambda (tm20bf@id) (tmb87@id? tm20bf@id)) tm20bd@ls/false)) (apply (lambda (tm20c1@id) (call-with-values (lambda () (tmba9@syntax-type tm20c1@id tm20b8@r)) (lambda (tm20c9@tm20c4 tm20ca@tm20c6 tm20cb@tm20c8) (let ((tm20cf@kwd tm20cb@tm20c8) (tm20d0@value tm20ca@tm20c6) (tm20d1@type tm20c9@tm20c4)) (let ((tm20d5@t tm20d1@type)) (if (memv tm20d5@t '($module)) (let ((tm20d7@iface tm20d0@value)) (values (tmde2@module-interface-exp-id* tm20d7@iface tm20c1@id) (tmddc@module-interface-exp-lab-vec tm20d7@iface))) (tme6e@syntax-violation '#f '"invalid import" tm20b7@e))))))) tm20bd@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm20bb@t)))))) (tm208a@library-import (lambda (tm209b@e) (let ((tm209d@t tm209b@e)) (let ((tm209f@ls/false (tmd8e@syntax-dispatch tm209d@t '(any . each-any)))) (if tm209f@ls/false (apply (lambda (tm20a1@ctxt tm20a2@imp*) (call-with-values (lambda () (tmdf0@parse-import-spec* (tme74@syntax->datum tm20a2@imp*))) (lambda (tm20a9@tm20a6 tm20aa@tm20a8) (let ((tm20ad@subst-labels tm20aa@tm20a8) (tm20ae@subst-names tm20a9@tm20a6)) (values (vector-map (lambda (tm20b1@name) (tmb67@datum->stx tm20a1@ctxt tm20b1@name)) tm20ae@subst-names) tm20ad@subst-labels))))) tm209f@ls/false) (let ((tm20b3@t tm209d@t)) (let ((tm20b5@ls/false (tmd8e@syntax-dispatch tm20b3@t '_))) (if tm20b5@ls/false (apply (lambda () (tme6e@syntax-violation '#f '"invalid import form" tm209b@e)) tm20b5@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm20b3@t)))))))))) (begin (call-with-values (lambda () (if (tm2086@module-import? tm1fe9@e) (tm2088@module-import tm1fe9@e tm1fd6@r) (tm208a@library-import tm1fe9@e))) (lambda (tm208f@tm208c tm2090@tm208e) (let ((tm2093@lab* tm2090@tm208e) (tm2094@id* tm208f@tm208c)) (vector-for-each (lambda (tm2097@id tm2098@lab) (tmb3d@extend-rib! tm1fdd@rib tm2097@id tm2098@lab)) tm2094@id* tm2093@lab*)))) (tmde6@chi-body* (cdr tm1fd5@e*) tm1fd6@r tm1fd7@mr tm1fd8@lex* tm1fd9@rhs* tm1fda@mod** tm1ffd@kwd* tm1fdc@exp* tm1fdd@rib tm1fde@top?))) (if tm1fde@top? (tmde6@chi-body* (cdr tm1fd5@e*) tm1fd6@r tm1fd7@mr (cons (tmb0f@gen-lexical 'dummy) tm1fd8@lex*) (cons (cons 'top-expr tm1fe9@e) tm1fd9@rhs*) tm1fda@mod** tm1ffd@kwd* tm1fdc@exp* tm1fdd@rib tm1fde@top?) (values tm1fd5@e* tm1fd6@r tm1fd7@mr tm1fd8@lex* tm1fd9@rhs* tm1fda@mod** tm1ffd@kwd* tm1fdc@exp*)))))))))))))))))))))) (set! tm28c2@tmde6@chi-body* tmde6@chi-body*) (set! tmde8@expand-transformer (lambda (tm20ed@expr tm20ee@r) (let ((tm20f1@rtc (tmdf4@make-collector))) (let ((tm20f3@expanded-rhs (let ((tm20fd@tm20f6 tmdf6@inv-collector) (tm20fe@tm20f8 tmdf8@vis-collector) (tm20ff@tm20fa tm20f1@rtc) (tm2100@tm20fc (lambda (tm2105@x) (values)))) (let ((tm2107@swap (lambda () (begin (let ((tm2109@t (tm20fd@tm20f6))) (begin (tm20fd@tm20f6 tm20ff@tm20fa) (set! tm20ff@tm20fa tm2109@t))) (let ((tm210b@t (tm20fe@tm20f8))) (begin (tm20fe@tm20f8 tm2100@tm20fc) (set! tm2100@tm20fc tm210b@t))))))) (dynamic-wind tm2107@swap (lambda () (tmdb0@chi-expr tm20ed@expr tm20ee@r tm20ee@r)) tm2107@swap))))) (begin (for-each (let ((tm210d@mark-visit (tmdf8@vis-collector))) (lambda (tm210f@x) (begin (tm9a3@tm7f1@invoke-library tm210f@x) (tm210d@mark-visit tm210f@x)))) (tm20f1@rtc)) tm20f3@expanded-rhs))))) (set! tm28c3@tmde8@expand-transformer tmde8@expand-transformer) (set! tmdea@parse-exports (lambda (tm2111@exp*) (let tm2119@f ((tm2113@exp* tm2111@exp*) (tm2114@int* '()) (tm2115@ext* '())) (if (null? tm2113@exp*) (begin (if (not (tmb8f@valid-bound-ids? tm2115@ext*)) (tme6e@syntax-violation 'export '"invalid exports" (tmdc4@find-dups tm2115@ext*)) (void)) (values (map tme74@syntax->datum tm2115@ext*) tm2114@int*)) (let ((tm211b@t (car tm2113@exp*))) (let ((tm211d@ls/false (tmd8e@syntax-dispatch tm211b@t '(any . #(each (any any)))))) (if tm211d@ls/false (apply (lambda (tm211f@rename tm2120@i* tm2121@e*) (begin (if (not (and (eq? (tme74@syntax->datum tm211f@rename) 'rename) (for-all tmb87@id? tm2120@i*) (for-all tmb87@id? tm2121@e*))) (tme6e@syntax-violation 'export '"invalid export specifier" (car tm2113@exp*)) (void)) (tm2119@f (cdr tm2113@exp*) (append tm2120@i* tm2114@int*) (append tm2121@e* tm2115@ext*)))) tm211d@ls/false) (let ((tm2125@t tm211b@t)) (let ((tm2127@ls/false (tmd8e@syntax-dispatch tm2125@t 'any))) (if tm2127@ls/false (apply (lambda (tm2129@ie) (begin (if (not (tmb87@id? tm2129@ie)) (tme6e@syntax-violation 'export '"invalid export" tm2129@ie) (void)) (tm2119@f (cdr tm2113@exp*) (cons tm2129@ie tm2114@int*) (cons tm2129@ie tm2115@ext*)))) tm2127@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm2125@t))))))))))) (set! tm28c4@tmdea@parse-exports tmdea@parse-exports) (set! tmdec@parse-library-name (lambda (tm212b@spec) (letrec* ((tm212e@parse (lambda (tm213b@x) (let ((tm213d@t tm213b@x)) (let ((tm213f@ls/false (tmd8e@syntax-dispatch tm213d@t '(each-any)))) (if (and tm213f@ls/false (apply (lambda (tm2141@v*) (for-all (lambda (tm2143@x) (let ((tm2145@x (tme74@syntax->datum tm2143@x))) (and (integer? tm2145@x) (exact? tm2145@x)))) tm2141@v*)) tm213f@ls/false)) (apply (lambda (tm2147@v*) (values '() (map tme74@syntax->datum tm2147@v*))) tm213f@ls/false) (let ((tm2149@t tm213d@t)) (let ((tm214b@ls/false (tmd8e@syntax-dispatch tm2149@t '(any . any)))) (if (and tm214b@ls/false (apply (lambda (tm214d@x tm214e@rest) (symbol? (tme74@syntax->datum tm214d@x))) tm214b@ls/false)) (apply (lambda (tm2151@x tm2152@rest) (call-with-values (lambda () (tm212e@parse tm2152@rest)) (lambda (tm2159@tm2156 tm215a@tm2158) (let ((tm215d@v* tm215a@tm2158) (tm215e@x* tm2159@tm2156)) (values (cons (tme74@syntax->datum tm2151@x) tm215e@x*) tm215d@v*))))) tm214b@ls/false) (let ((tm2161@t tm2149@t)) (let ((tm2163@ls/false (tmd8e@syntax-dispatch tm2161@t '()))) (if tm2163@ls/false (apply (lambda () (values '() '())) tm2163@ls/false) (let ((tm2165@t tm2161@t)) (let ((tm2167@ls/false (tmd8e@syntax-dispatch tm2165@t '_))) (if tm2167@ls/false (apply (lambda () (tme6e@syntax-violation '#f '"invalid library name" tm212b@spec)) tm2167@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm2165@t)))))))))))))))) (call-with-values (lambda () (tm212e@parse tm212b@spec)) (lambda (tm2133@tm2130 tm2134@tm2132) (let ((tm2137@ver* tm2134@tm2132) (tm2138@name* tm2133@tm2130)) (begin (if (null? tm2138@name*) (tme6e@syntax-violation '#f '"empty library name" tm212b@spec) (void)) (values tm2138@name* tm2137@ver*)))))))) (set! tm28c5@tmdec@parse-library-name tmdec@parse-library-name) (set! tmdee@parse-library (lambda (tm2169@e) (let ((tm216b@t tm2169@e)) (let ((tm216d@ls/false (tmd8e@syntax-dispatch tm216b@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and tm216d@ls/false (apply (lambda (tm216f@library tm2170@name* tm2171@export tm2172@exp* tm2173@import tm2174@imp* tm2175@b*) (and (eq? (tme74@syntax->datum tm2171@export) 'export) (eq? (tme74@syntax->datum tm2173@import) 'import) (eq? (tme74@syntax->datum tm216f@library) 'library))) tm216d@ls/false)) (apply (lambda (tm217d@library tm217e@name* tm217f@export tm2180@exp* tm2181@import tm2182@imp* tm2183@b*) (values tm217e@name* tm2180@exp* tm2182@imp* tm2183@b*)) tm216d@ls/false) (let ((tm218b@t tm216b@t)) (let ((tm218d@ls/false (tmd8e@syntax-dispatch tm218b@t '_))) (if tm218d@ls/false (apply (lambda () (tme6e@syntax-violation '#f '"malformed library" tm2169@e)) tm218d@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm218b@t))))))))) (set! tm28c6@tmdee@parse-library tmdee@parse-library) (set! tmdf0@parse-import-spec* (letrec* ((tm2190@idsyn? (lambda (tm2399@x) (symbol? (tme74@syntax->datum tm2399@x)))) (tm2192@dup-error (lambda (tm2397@name) (tme6e@syntax-violation 'import '"two imports with different bindings" tm2397@name))) (tm2194@merge-substs (lambda (tm2385@s tm2386@subst) (letrec* ((tm238a@insert-to-subst (lambda (tm238b@a tm238c@subst) (let ((tm238f@name (car tm238b@a)) (tm2390@label (cdr tm238b@a))) (let ((tm2393@t (assq tm238f@name tm238c@subst))) (if tm2393@t ((lambda (tm2395@x) (if (eq? (cdr tm2395@x) tm2390@label) tm238c@subst (tm2192@dup-error tm238f@name))) tm2393@t) (cons tm238b@a tm238c@subst))))))) (if (null? tm2385@s) tm2386@subst (tm238a@insert-to-subst (car tm2385@s) (tm2194@merge-substs (cdr tm2385@s) tm2386@subst)))))) (tm2196@exclude* (lambda (tm2355@sym* tm2356@subst) (letrec* ((tm235a@exclude (lambda (tm2373@sym tm2374@subst) (if (null? tm2374@subst) (tme6e@syntax-violation 'import '"cannot rename unbound identifier" tm2373@sym) (if (eq? tm2373@sym (caar tm2374@subst)) (values (cdar tm2374@subst) (cdr tm2374@subst)) (let ((tm2377@a (car tm2374@subst))) (call-with-values (lambda () (tm235a@exclude tm2373@sym (cdr tm2374@subst))) (lambda (tm237d@tm237a tm237e@tm237c) (let ((tm2381@subst tm237e@tm237c) (tm2382@old tm237d@tm237a)) (values tm2382@old (cons tm2377@a tm2381@subst))))))))))) (if (null? tm2355@sym*) (values '() tm2356@subst) (call-with-values (lambda () (tm235a@exclude (car tm2355@sym*) tm2356@subst)) (lambda (tm235f@tm235c tm2360@tm235e) (let ((tm2363@subst tm2360@tm235e) (tm2364@old tm235f@tm235c)) (call-with-values (lambda () (tm2196@exclude* (cdr tm2355@sym*) tm2363@subst)) (lambda (tm236b@tm2368 tm236c@tm236a) (let ((tm236f@subst tm236c@tm236a) (tm2370@old* tm236b@tm2368)) (values (cons tm2364@old tm2370@old*) tm236f@subst))))))))))) (tm2198@find* (lambda (tm234d@sym* tm234e@subst) (map (lambda (tm2351@x) (let ((tm2353@t (assq tm2351@x tm234e@subst))) (if tm2353@t (cdr tm2353@t) (tme6e@syntax-violation 'import '"cannot find identifier" tm2351@x)))) tm234d@sym*))) (tm219a@rem* (lambda (tm2345@sym* tm2346@subst) (let tm234b@f ((tm2349@subst tm2346@subst)) (if (null? tm2349@subst) '() (if (memq (caar tm2349@subst) tm2345@sym*) (tm234b@f (cdr tm2349@subst)) (cons (car tm2349@subst) (tm234b@f (cdr tm2349@subst)))))))) (tm219c@remove-dups (lambda (tm2343@ls) (if (null? tm2343@ls) '() (if (memq (car tm2343@ls) (cdr tm2343@ls)) (tm219c@remove-dups (cdr tm2343@ls)) (cons (car tm2343@ls) (tm219c@remove-dups (cdr tm2343@ls))))))) (tm219e@parse-library-name (lambda (tm225b@spec) (letrec* ((tm225e@subversion? (lambda (tm233f@x) (let ((tm2341@x (tme74@syntax->datum tm233f@x))) (and (integer? tm2341@x) (exact? tm2341@x) (>= tm2341@x '0))))) (tm2260@subversion-pred (lambda (tm22df@x*) (let ((tm22e1@t tm22df@x*)) (let ((tm22e3@ls/false (tmd8e@syntax-dispatch tm22e1@t 'any))) (if (and tm22e3@ls/false (apply (lambda (tm22e5@n) (tm225e@subversion? tm22e5@n)) tm22e3@ls/false)) (apply (lambda (tm22e7@n) (lambda (tm22e9@x) (= tm22e9@x (tme74@syntax->datum tm22e7@n)))) tm22e3@ls/false) (let ((tm22eb@t tm22e1@t)) (let ((tm22ed@ls/false (tmd8e@syntax-dispatch tm22eb@t '(any . each-any)))) (if (and tm22ed@ls/false (apply (lambda (tm22ef@p? tm22f0@sub*) (eq? (tme74@syntax->datum tm22ef@p?) 'and)) tm22ed@ls/false)) (apply (lambda (tm22f3@p? tm22f4@sub*) (let ((tm22f7@p* (map tm2260@subversion-pred tm22f4@sub*))) (lambda (tm22f9@x) (for-all (lambda (tm22fb@p) (tm22fb@p tm22f9@x)) tm22f7@p*)))) tm22ed@ls/false) (let ((tm22fd@t tm22eb@t)) (let ((tm22ff@ls/false (tmd8e@syntax-dispatch tm22fd@t '(any . each-any)))) (if (and tm22ff@ls/false (apply (lambda (tm2301@p? tm2302@sub*) (eq? (tme74@syntax->datum tm2301@p?) 'or)) tm22ff@ls/false)) (apply (lambda (tm2305@p? tm2306@sub*) (let ((tm2309@p* (map tm2260@subversion-pred tm2306@sub*))) (lambda (tm230b@x) (exists (lambda (tm230d@p) (tm230d@p tm230b@x)) tm2309@p*)))) tm22ff@ls/false) (let ((tm230f@t tm22fd@t)) (let ((tm2311@ls/false (tmd8e@syntax-dispatch tm230f@t '(any any)))) (if (and tm2311@ls/false (apply (lambda (tm2313@p? tm2314@sub) (eq? (tme74@syntax->datum tm2313@p?) 'not)) tm2311@ls/false)) (apply (lambda (tm2317@p? tm2318@sub) (let ((tm231b@p (tm2260@subversion-pred tm2318@sub))) (lambda (tm231d@x) (not (tm231b@p tm231d@x))))) tm2311@ls/false) (let ((tm231f@t tm230f@t)) (let ((tm2321@ls/false (tmd8e@syntax-dispatch tm231f@t '(any any)))) (if (and tm2321@ls/false (apply (lambda (tm2323@p? tm2324@n) (and (eq? (tme74@syntax->datum tm2323@p?) '<=) (tm225e@subversion? tm2324@n))) tm2321@ls/false)) (apply (lambda (tm2327@p? tm2328@n) (lambda (tm232b@x) (<= tm232b@x (tme74@syntax->datum tm2328@n)))) tm2321@ls/false) (let ((tm232d@t tm231f@t)) (let ((tm232f@ls/false (tmd8e@syntax-dispatch tm232d@t '(any any)))) (if (and tm232f@ls/false (apply (lambda (tm2331@p? tm2332@n) (and (eq? (tme74@syntax->datum tm2331@p?) '>=) (tm225e@subversion? tm2332@n))) tm232f@ls/false)) (apply (lambda (tm2335@p? tm2336@n) (lambda (tm2339@x) (>= tm2339@x (tme74@syntax->datum tm2336@n)))) tm232f@ls/false) (let ((tm233b@t tm232d@t)) (let ((tm233d@ls/false (tmd8e@syntax-dispatch tm233b@t '_))) (if tm233d@ls/false (apply (lambda () (tme6e@syntax-violation 'import '"invalid sub-version spec" tm225b@spec tm22df@x*)) tm233d@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm233b@t)))))))))))))))))))))))) (tm2262@version-pred (lambda (tm228f@x*) (let ((tm2291@t tm228f@x*)) (let ((tm2293@ls/false (tmd8e@syntax-dispatch tm2291@t '()))) (if tm2293@ls/false (apply (lambda () (lambda (tm2295@x) '#t)) tm2293@ls/false) (let ((tm2297@t tm2291@t)) (let ((tm2299@ls/false (tmd8e@syntax-dispatch tm2297@t '(any . each-any)))) (if (and tm2299@ls/false (apply (lambda (tm229b@c tm229c@ver*) (eq? (tme74@syntax->datum tm229b@c) 'and)) tm2299@ls/false)) (apply (lambda (tm229f@c tm22a0@ver*) (let ((tm22a3@p* (map tm2262@version-pred tm22a0@ver*))) (lambda (tm22a5@x) (for-all (lambda (tm22a7@p) (tm22a7@p tm22a5@x)) tm22a3@p*)))) tm2299@ls/false) (let ((tm22a9@t tm2297@t)) (let ((tm22ab@ls/false (tmd8e@syntax-dispatch tm22a9@t '(any . each-any)))) (if (and tm22ab@ls/false (apply (lambda (tm22ad@c tm22ae@ver*) (eq? (tme74@syntax->datum tm22ad@c) 'or)) tm22ab@ls/false)) (apply (lambda (tm22b1@c tm22b2@ver*) (let ((tm22b5@p* (map tm2262@version-pred tm22b2@ver*))) (lambda (tm22b7@x) (exists (lambda (tm22b9@p) (tm22b9@p tm22b7@x)) tm22b5@p*)))) tm22ab@ls/false) (let ((tm22bb@t tm22a9@t)) (let ((tm22bd@ls/false (tmd8e@syntax-dispatch tm22bb@t '(any any)))) (if (and tm22bd@ls/false (apply (lambda (tm22bf@c tm22c0@ver) (eq? (tme74@syntax->datum tm22bf@c) 'not)) tm22bd@ls/false)) (apply (lambda (tm22c3@c tm22c4@ver) (let ((tm22c7@p (tm2262@version-pred tm22c4@ver))) (lambda (tm22c9@x) (not (tm22c7@p tm22c9@x))))) tm22bd@ls/false) (let ((tm22cb@t tm22bb@t)) (let ((tm22cd@ls/false (tmd8e@syntax-dispatch tm22cb@t 'each-any))) (if tm22cd@ls/false (apply (lambda (tm22cf@sub*) (let ((tm22d1@p* (map tm2260@subversion-pred tm22cf@sub*))) (lambda (tm22d3@x) (let tm22d9@f ((tm22d5@p* tm22d1@p*) (tm22d6@x tm22d3@x)) (if (null? tm22d5@p*) '#t (if (null? tm22d6@x) '#f (and ((car tm22d5@p*) (car tm22d6@x)) (tm22d9@f (cdr tm22d5@p*) (cdr tm22d6@x))))))))) tm22cd@ls/false) (let ((tm22db@t tm22cb@t)) (let ((tm22dd@ls/false (tmd8e@syntax-dispatch tm22db@t '_))) (if tm22dd@ls/false (apply (lambda () (tme6e@syntax-violation 'import '"invalid version spec" tm225b@spec tm228f@x*)) tm22dd@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm22db@t)))))))))))))))))))))) (let tm2265@f ((tm2263@x tm225b@spec)) (let ((tm2267@t tm2263@x)) (let ((tm2269@ls/false (tmd8e@syntax-dispatch tm2267@t '(each-any)))) (if tm2269@ls/false (apply (lambda (tm226b@version-spec*) (values '() (tm2262@version-pred tm226b@version-spec*))) tm2269@ls/false) (let ((tm226d@t tm2267@t)) (let ((tm226f@ls/false (tmd8e@syntax-dispatch tm226d@t '(any . any)))) (if (and tm226f@ls/false (apply (lambda (tm2271@x tm2272@x*) (tm2190@idsyn? tm2271@x)) tm226f@ls/false)) (apply (lambda (tm2275@x tm2276@x*) (call-with-values (lambda () (tm2265@f tm2276@x*)) (lambda (tm227d@tm227a tm227e@tm227c) (let ((tm2281@pred tm227e@tm227c) (tm2282@name tm227d@tm227a)) (values (cons (tme74@syntax->datum tm2275@x) tm2282@name) tm2281@pred))))) tm226f@ls/false) (let ((tm2285@t tm226d@t)) (let ((tm2287@ls/false (tmd8e@syntax-dispatch tm2285@t '()))) (if tm2287@ls/false (apply (lambda () (values '() (lambda (tm2289@x) '#t))) tm2287@ls/false) (let ((tm228b@t tm2285@t)) (let ((tm228d@ls/false (tmd8e@syntax-dispatch tm228b@t '_))) (if tm228d@ls/false (apply (lambda () (tme6e@syntax-violation '#f '"invalid import spec" tm225b@spec)) tm228d@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm228b@t))))))))))))))))) (tm21a0@import-library (lambda (tm224b@spec*) (call-with-values (lambda () (tm219e@parse-library-name tm224b@spec*)) (lambda (tm2251@tm224e tm2252@tm2250) (let ((tm2255@pred tm2252@tm2250) (tm2256@name tm2251@tm224e)) (begin (if (null? tm2256@name) (tme6e@syntax-violation 'import '"empty library name" tm224b@spec*) (void)) (let ((tm2259@lib (tm99c@tm7e3@find-library-by-name tm2256@name))) (begin (if (not tm2259@lib) (tme6e@syntax-violation 'import '"cannot find library with required name" tm2256@name) (void)) (if (not (tm2255@pred (tm976@tm797@library-version tm2259@lib))) (tme6e@syntax-violation 'import '"library does not satisfy version specification" tm224b@spec* tm2259@lib) (void)) ((tmdfa@imp-collector) tm2259@lib) (tm97e@tm7a7@library-subst tm2259@lib))))))))) (tm21a2@get-import (lambda (tm21bd@spec) (let ((tm21bf@t tm21bd@spec)) (let ((tm21c1@ls/false (tmd8e@syntax-dispatch tm21bf@t '(any . each-any)))) (if (and tm21c1@ls/false (apply (lambda (tm21c3@x tm21c4@x*) (not (memq (tme74@syntax->datum tm21c3@x) '(for rename except only prefix library)))) tm21c1@ls/false)) (apply (lambda (tm21c7@x tm21c8@x*) (tm21a0@import-library (cons tm21c7@x tm21c8@x*))) tm21c1@ls/false) (let ((tm21cb@t tm21bf@t)) (let ((tm21cd@ls/false (tmd8e@syntax-dispatch tm21cb@t '(any any . #(each (any any)))))) (if (and tm21cd@ls/false (apply (lambda (tm21cf@rename tm21d0@isp tm21d1@old* tm21d2@new*) (and (eq? (tme74@syntax->datum tm21cf@rename) 'rename) (for-all tm2190@idsyn? tm21d1@old*) (for-all tm2190@idsyn? tm21d2@new*))) tm21cd@ls/false)) (apply (lambda (tm21d7@rename tm21d8@isp tm21d9@old* tm21da@new*) (let ((tm21df@subst (tm21a2@get-import tm21d8@isp)) (tm21e0@old* (map tme74@syntax->datum tm21d9@old*)) (tm21e1@new* (map tme74@syntax->datum tm21da@new*))) (let ((tm21e5@old-label* (tm2198@find* tm21e0@old* tm21df@subst))) (let ((tm21e7@subst (tm219a@rem* tm21e0@old* tm21df@subst))) (tm2194@merge-substs (map cons tm21e1@new* tm21e5@old-label*) tm21e7@subst))))) tm21cd@ls/false) (let ((tm21e9@t tm21cb@t)) (let ((tm21eb@ls/false (tmd8e@syntax-dispatch tm21e9@t '(any any . each-any)))) (if (and tm21eb@ls/false (apply (lambda (tm21ed@except tm21ee@isp tm21ef@sym*) (and (eq? (tme74@syntax->datum tm21ed@except) 'except) (for-all tm2190@idsyn? tm21ef@sym*))) tm21eb@ls/false)) (apply (lambda (tm21f3@except tm21f4@isp tm21f5@sym*) (let ((tm21f9@subst (tm21a2@get-import tm21f4@isp))) (tm219a@rem* (map tme74@syntax->datum tm21f5@sym*) tm21f9@subst))) tm21eb@ls/false) (let ((tm21fb@t tm21e9@t)) (let ((tm21fd@ls/false (tmd8e@syntax-dispatch tm21fb@t '(any any . each-any)))) (if (and tm21fd@ls/false (apply (lambda (tm21ff@only tm2200@isp tm2201@sym*) (and (eq? (tme74@syntax->datum tm21ff@only) 'only) (for-all tm2190@idsyn? tm2201@sym*))) tm21fd@ls/false)) (apply (lambda (tm2205@only tm2206@isp tm2207@sym*) (let ((tm220b@subst (tm21a2@get-import tm2206@isp)) (tm220c@sym* (map tme74@syntax->datum tm2207@sym*))) (let ((tm220f@sym* (tm219c@remove-dups tm220c@sym*))) (let ((tm2211@lab* (tm2198@find* tm220f@sym* tm220b@subst))) (map cons tm220f@sym* tm2211@lab*))))) tm21fd@ls/false) (let ((tm2213@t tm21fb@t)) (let ((tm2215@ls/false (tmd8e@syntax-dispatch tm2213@t '(any any any)))) (if (and tm2215@ls/false (apply (lambda (tm2217@prefix tm2218@isp tm2219@p) (and (eq? (tme74@syntax->datum tm2217@prefix) 'prefix) (tm2190@idsyn? tm2219@p))) tm2215@ls/false)) (apply (lambda (tm221d@prefix tm221e@isp tm221f@p) (let ((tm2223@subst (tm21a2@get-import tm221e@isp)) (tm2224@prefix (symbol->string (tme74@syntax->datum tm221f@p)))) (map (lambda (tm2227@x) (cons (string->symbol (string-append tm2224@prefix (symbol->string (car tm2227@x)))) (cdr tm2227@x))) tm2223@subst))) tm2215@ls/false) (let ((tm2229@t tm2213@t)) (let ((tm222b@ls/false (tmd8e@syntax-dispatch tm2229@t '(any each-any)))) (if (and tm222b@ls/false (apply (lambda (tm222d@library tm222e@spec*) (eq? (tme74@syntax->datum tm222d@library) 'library)) tm222b@ls/false)) (apply (lambda (tm2231@library tm2232@spec*) (tm21a0@import-library tm2232@spec*)) tm222b@ls/false) (let ((tm2235@t tm2229@t)) (let ((tm2237@ls/false (tmd8e@syntax-dispatch tm2235@t '(any any . any)))) (if (and tm2237@ls/false (apply (lambda (tm2239@for tm223a@isp tm223b@rest) (eq? (tme74@syntax->datum tm2239@for) 'for)) tm2237@ls/false)) (apply (lambda (tm223f@for tm2240@isp tm2241@rest) (tm21a2@get-import tm2240@isp)) tm2237@ls/false) (let ((tm2245@t tm2235@t)) (let ((tm2247@ls/false (tmd8e@syntax-dispatch tm2245@t 'any))) (if tm2247@ls/false (apply (lambda (tm2249@spec) (tme6e@syntax-violation 'import '"invalid import spec" tm2249@spec)) tm2247@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm2245@t))))))))))))))))))))))))))) (tm21a4@add-imports! (lambda (tm21ad@imp tm21ae@h) (let ((tm21b1@subst (tm21a2@get-import tm21ad@imp))) (for-each (lambda (tm21b3@x) (let ((tm21b5@name (car tm21b3@x)) (tm21b6@label (cdr tm21b3@x))) (let ((tm21b9@t (hashtable-ref tm21ae@h tm21b5@name '#f))) (if tm21b9@t ((lambda (tm21bb@l) (if (not (eq? tm21bb@l tm21b6@label)) (tm2192@dup-error tm21b5@name) (void))) tm21b9@t) (hashtable-set! tm21ae@h tm21b5@name tm21b6@label))))) tm21b1@subst))))) (lambda (tm21a5@imp*) (let tm21ab@f ((tm21a7@imp* tm21a5@imp*) (tm21a8@h (make-eq-hashtable))) (if (null? tm21a7@imp*) (hashtable-entries tm21a8@h) (begin (tm21a4@add-imports! (car tm21a7@imp*) tm21a8@h) (tm21ab@f (cdr tm21a7@imp*) tm21a8@h))))))) (set! tm28c7@tmdf0@parse-import-spec* tmdf0@parse-import-spec*) (set! tmdf2@make-top-rib (lambda (tm239b@names tm239c@labels) (let ((tm239f@rib (tmb3b@make-empty-rib))) (begin (vector-for-each (lambda (tm23a1@name tm23a2@label) (begin (if (not (symbol? tm23a1@name)) (error 'make-top-rib '"BUG: not a symbol" tm23a1@name) (void)) (tmb3f@extend-rib/nc! tm239f@rib (make-simple-struct 'stx '5 (list tm23a1@name tmb0b@top-mark* '() '())) tm23a2@label))) tm239b@names tm239c@labels) tm239f@rib)))) (set! tm28c8@tmdf2@make-top-rib tmdf2@make-top-rib) (set! tmdf4@make-collector (lambda () (let ((tm23a5@ls '())) (lambda tm23a9 (let ((tm23aa (length tm23a9))) (if (= tm23aa '0) (apply (lambda () tm23a5@ls) tm23a9) (if (= tm23aa '1) (apply (lambda (tm23a7@x) (set! tm23a5@ls (tmb04@set-cons tm23a7@x tm23a5@ls))) tm23a9) (error 'apply '"invalid arg count")))))))) (set! tm28c9@tmdf4@make-collector tmdf4@make-collector) (set! tmdf6@inv-collector (tm6d7@tm5b5@make-parameter (lambda tm23ab@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (tm23ad@x) (begin (if (not (procedure? tm23ad@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" tm23ad@x) (void)) tm23ad@x)))) (set! tm28ca@tmdf6@inv-collector tmdf6@inv-collector) (set! tmdf8@vis-collector (tm6d7@tm5b5@make-parameter (lambda tm23af@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (tm23b1@x) (begin (if (not (procedure? tm23b1@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" tm23b1@x) (void)) tm23b1@x)))) (set! tm28cb@tmdf8@vis-collector tmdf8@vis-collector) (set! tmdfa@imp-collector (tm6d7@tm5b5@make-parameter (lambda tm23b3@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (tm23b5@x) (begin (if (not (procedure? tm23b5@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" tm23b5@x) (void)) tm23b5@x)))) (set! tm28cc@tmdfa@imp-collector tmdfa@imp-collector) (set! tmdfc@chi-library-internal (lambda (tm23b7@e* tm23b8@rib tm23b9@top?) (call-with-values (lambda () (tmde6@chi-body* tm23b7@e* '() '() '() '() '() '() '() tm23b8@rib tm23b9@top?)) (lambda (tm23cd@tm23be tm23ce@tm23c0 tm23cf@tm23c2 tm23d0@tm23c4 tm23d1@tm23c6 tm23d2@tm23c8 tm23d3@tm23ca tm23d4@tm23cc) (let ((tm23dd@exp* tm23d4@tm23cc) (tm23de@_kwd* tm23d3@tm23ca) (tm23df@mod** tm23d2@tm23c8) (tm23e0@rhs* tm23d1@tm23c6) (tm23e1@lex* tm23d0@tm23c4) (tm23e2@mr tm23cf@tm23c2) (tm23e3@r tm23ce@tm23c0) (tm23e4@e* tm23cd@tm23be)) (values (append (apply append (reverse tm23df@mod**)) tm23e4@e*) tm23e3@r tm23e2@mr (reverse tm23e1@lex*) (reverse tm23e0@rhs*) tm23dd@exp*)))))) (set! tm28cd@tmdfc@chi-library-internal tmdfc@chi-library-internal) (set! tmdfe@chi-interaction-expr (lambda (tm23ed@e tm23ee@rib tm23ef@r) (call-with-values (lambda () (tmde6@chi-body* (list tm23ed@e) tm23ef@r tm23ef@r '() '() '() '() '() tm23ee@rib '#t)) (lambda (tm2403@tm23f4 tm2404@tm23f6 tm2405@tm23f8 tm2406@tm23fa tm2407@tm23fc tm2408@tm23fe tm2409@tm2400 tm240a@tm2402) (let ((tm2413@_exp* tm240a@tm2402) (tm2414@_kwd* tm2409@tm2400) (tm2415@mod** tm2408@tm23fe) (tm2416@rhs* tm2407@tm23fc) (tm2417@lex* tm2406@tm23fa) (tm2418@mr tm2405@tm23f8) (tm2419@r tm2404@tm23f6) (tm241a@e* tm2403@tm23f4)) (let ((tm2423@e* (tmdbe@expand-interaction-rhs*/init* (reverse tm2417@lex*) (reverse tm2416@rhs*) (append (apply append (reverse tm2415@mod**)) tm241a@e*) tm2419@r tm2418@mr))) (let ((tm2425@e (if (null? tm2423@e*) (tmaed@tma4e@build-void) (if (null? (cdr tm2423@e*)) (car tm2423@e*) (tmaec@tma4c@build-sequence '#f tm2423@e*))))) (values tm2425@e tm2419@r)))))))) (set! tm28ce@tmdfe@chi-interaction-expr tmdfe@chi-interaction-expr) (set! tme00@library-body-expander (lambda (tm2427@name tm2428@main-exp* tm2429@imp* tm242a@b* tm242b@top?) (letrec* ((tm2432@itc (tmdf4@make-collector))) (let ((tm243b@tm2434 tmdfa@imp-collector) (tm243c@tm2436 tme7e@top-level-context) (tm243d@tm2438 tm2432@itc) (tm243e@tm243a '#f)) (let ((tm2443@swap (lambda () (begin (let ((tm2445@t (tm243b@tm2434))) (begin (tm243b@tm2434 tm243d@tm2438) (set! tm243d@tm2438 tm2445@t))) (let ((tm2447@t (tm243c@tm2436))) (begin (tm243c@tm2436 tm243e@tm243a) (set! tm243e@tm243a tm2447@t))))))) (dynamic-wind tm2443@swap (lambda () (call-with-values (lambda () (tmdf0@parse-import-spec* tm2429@imp*)) (lambda (tm244d@tm244a tm244e@tm244c) (let ((tm2451@subst-labels tm244e@tm244c) (tm2452@subst-names tm244d@tm244a)) (let ((tm2455@rib (tmdf2@make-top-rib tm2452@subst-names tm2451@subst-labels))) (letrec* ((tm2458@wrap (lambda (tm24d3@x) (make-simple-struct 'stx '5 (list tm24d3@x tmb0b@top-mark* (list tm2455@rib) '()))))) (let ((tm2459@b* (map tm2458@wrap tm242a@b*)) (tm245a@main-exp* (map tm2458@wrap tm2428@main-exp*)) (tm245b@rtc (tmdf4@make-collector)) (tm245c@vtc (tmdf4@make-collector))) (let ((tm2469@tm2462 tmdf6@inv-collector) (tm246a@tm2464 tmdf8@vis-collector) (tm246b@tm2466 tm245b@rtc) (tm246c@tm2468 tm245c@vtc)) (let ((tm2471@swap (lambda () (begin (let ((tm2473@t (tm2469@tm2462))) (begin (tm2469@tm2462 tm246b@tm2466) (set! tm246b@tm2466 tm2473@t))) (let ((tm2475@t (tm246a@tm2464))) (begin (tm246a@tm2464 tm246c@tm2468) (set! tm246c@tm2468 tm2475@t))))))) (dynamic-wind tm2471@swap (lambda () (call-with-values (lambda () (tmdfc@chi-library-internal tm2459@b* tm2455@rib tm242b@top?)) (lambda (tm2483@tm2478 tm2484@tm247a tm2485@tm247c tm2486@tm247e tm2487@tm2480 tm2488@tm2482) (let ((tm248f@internal-exp* tm2488@tm2482) (tm2490@rhs* tm2487@tm2480) (tm2491@lex* tm2486@tm247e) (tm2492@mr tm2485@tm247c) (tm2493@r tm2484@tm247a) (tm2494@init* tm2483@tm2478)) (call-with-values (lambda () (tmdea@parse-exports (append tm245a@main-exp* tm248f@internal-exp*))) (lambda (tm249f@tm249c tm24a0@tm249e) (let ((tm24a3@exp-id* tm24a0@tm249e) (tm24a4@exp-name* tm249f@tm249c)) (begin (tmb43@seal-rib! tm2455@rib) (let ((tm24a7@init* (tmdac@chi-expr* tm2494@init* tm2493@r tm2492@mr))) (let ((tm24a9@rhs* (tmdc0@chi-rhs* tm2490@rhs* tm2493@r tm2492@mr))) (begin (tmb45@unseal-rib! tm2455@rib) (let ((tm24ab@loc* (map tmb11@gen-global tm2491@lex*)) (tm24ac@export-subst (tme58@make-export-subst tm24a4@exp-name* tm24a3@exp-id*))) (letrec* ((tm24b0@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (tme5a@make-export-env/macros tm2491@lex* tm24ab@loc* tm2493@r)) (lambda (tm24b7@tm24b2 tm24b8@tm24b4 tm24b9@tm24b6) (let ((tm24bd@macro* tm24b9@tm24b6) (tm24be@global* tm24b8@tm24b4) (tm24bf@export-env tm24b7@tm24b2)) (begin (for-each (lambda (tm24c3@s) (let ((tm24c5@name (car tm24c3@s)) (tm24c6@label (cdr tm24c3@s))) (let ((tm24c9@p (assq tm24c6@label tm24bf@export-env))) (if tm24c9@p (let ((tm24cb@b (cdr tm24c9@p))) (let ((tm24cd@type (car tm24cb@b))) (if (eq? tm24cd@type 'mutable) (tme6e@syntax-violation 'export tm24b0@errstr tm24c5@name) (void)))) (void))))) tm24ac@export-subst) (let ((tm24cf@invoke-body (tmaf2@tma58@build-library-letrec* '#f tm2427@name tm2491@lex* tm24ab@loc* tm24a9@rhs* (if (null? tm24a7@init*) (tmaed@tma4e@build-void) (tmaec@tma4c@build-sequence '#f tm24a7@init*)))) (tm24d0@invoke-definitions (map tmae9@tm9ab@build-global-define (map cdr tm24be@global*)))) (values (tm2432@itc) (tm245b@rtc) (tm245c@vtc) (tmaec@tma4c@build-sequence '#f (append tm24d0@invoke-definitions (list tm24cf@invoke-body))) tm24bd@macro* tm24ac@export-subst tm24bf@export-env))))))))))))))))))) tm2471@swap)))))))))) tm2443@swap)))))) (set! tm28cf@tme00@library-body-expander tme00@library-body-expander) (set! tme02@core-library-expander (lambda (tm24d5@e tm24d6@verify-name) (call-with-values (lambda () (tmdee@parse-library tm24d5@e)) (lambda (tm24e1@tm24da tm24e2@tm24dc tm24e3@tm24de tm24e4@tm24e0) (let ((tm24e9@b* tm24e4@tm24e0) (tm24ea@imp* tm24e3@tm24de) (tm24eb@exp* tm24e2@tm24dc) (tm24ec@name* tm24e1@tm24da)) (call-with-values (lambda () (tmdec@parse-library-name tm24ec@name*)) (lambda (tm24f5@tm24f2 tm24f6@tm24f4) (let ((tm24f9@ver tm24f6@tm24f4) (tm24fa@name tm24f5@tm24f2)) (begin (tm24d6@verify-name tm24fa@name) (call-with-values (lambda () (tme00@library-body-expander tm24fa@name tm24eb@exp* tm24ea@imp* tm24e9@b* '#f)) (lambda (tm250b@tm24fe tm250c@tm2500 tm250d@tm2502 tm250e@tm2504 tm250f@tm2506 tm2510@tm2508 tm2511@tm250a) (let ((tm2519@export-env tm2511@tm250a) (tm251a@export-subst tm2510@tm2508) (tm251b@visit-code tm250f@tm2506) (tm251c@invoke-code tm250e@tm2504) (tm251d@visit-req* tm250d@tm2502) (tm251e@invoke-req* tm250c@tm2500) (tm251f@imp* tm250b@tm24fe)) (values tm24fa@name tm24f9@ver tm251f@imp* tm251e@invoke-req* tm251d@visit-req* tm251c@invoke-code tm251b@visit-code tm251a@export-subst tm2519@export-env))))))))))))) (set! tm28d0@tme02@core-library-expander tme02@core-library-expander) (set! tme04@parse-top-level-program (lambda (tm2527@e*) (let ((tm2529@t tm2527@e*)) (let ((tm252b@ls/false (tmd8e@syntax-dispatch tm2529@t '((any . each-any) . each-any)))) (if (and tm252b@ls/false (apply (lambda (tm252d@import tm252e@imp* tm252f@b*) (eq? (tme74@syntax->datum tm252d@import) 'import)) tm252b@ls/false)) (apply (lambda (tm2533@import tm2534@imp* tm2535@b*) (values tm2534@imp* tm2535@b*)) tm252b@ls/false) (let ((tm2539@t tm2529@t)) (let ((tm253b@ls/false (tmd8e@syntax-dispatch tm2539@t '((any . any) . any)))) (if (and tm253b@ls/false (apply (lambda (tm253d@import tm253e@x tm253f@y) (eq? (tme74@syntax->datum tm253d@import) 'import)) tm253b@ls/false)) (apply (lambda (tm2543@import tm2544@x tm2545@y) (tme6e@syntax-violation 'expander '"invalid syntax of top-level program" (tmb81@syntax-car tm2527@e*))) tm253b@ls/false) (let ((tm2549@t tm2539@t)) (let ((tm254b@ls/false (tmd8e@syntax-dispatch tm2549@t '_))) (if tm254b@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) tm254b@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm2549@t)))))))))))) (set! tm28d1@tme04@parse-top-level-program tme04@parse-top-level-program) (set! tme06@top-level-expander (lambda (tm254d@e*) (call-with-values (lambda () (tme04@parse-top-level-program tm254d@e*)) (lambda (tm2553@tm2550 tm2554@tm2552) (let ((tm2557@b* tm2554@tm2552) (tm2558@imp* tm2553@tm2550)) (call-with-values (lambda () (tme00@library-body-expander '() '() tm2558@imp* tm2557@b* '#t)) (lambda (tm2569@tm255c tm256a@tm255e tm256b@tm2560 tm256c@tm2562 tm256d@tm2564 tm256e@tm2566 tm256f@tm2568) (let ((tm2577@export-env tm256f@tm2568) (tm2578@export-subst tm256e@tm2566) (tm2579@visit-code tm256d@tm2564) (tm257a@invoke-code tm256c@tm2562) (tm257b@visit-req* tm256b@tm2560) (tm257c@invoke-req* tm256a@tm255e) (tm257d@imp* tm2569@tm255c)) (values tm257c@invoke-req* tm257a@invoke-code))))))))) (set! tm28d2@tme06@top-level-expander tme06@top-level-expander) (set! tme08@rp (tm6d4@tm5af@make-record-printer 'env (lambda (tm2585@x tm2586@p tm2587@wr) (display '"#<environment>" tm2586@p)))) (set! tm28d3@tme08@rp tme08@rp) (set! tme12@env? (lambda (tm258b@x) (and (simple-struct? tm258b@x) (eq? (simple-struct-name tm258b@x) 'env)))) (set! tm28d4@tme12@env? tme12@env?) (set! tme14@env-names (lambda (tm258d@x) (simple-struct-ref tm258d@x '0))) (set! tm28d5@tme14@env-names tme14@env-names) (set! tme16@set-env-names! (lambda (tm258f@x tm2590@val) (simple-struct-set! tm258f@x '0 tm2590@val))) (set! tm28d6@tme16@set-env-names! tme16@set-env-names!) (set! tme18@env-labels (lambda (tm2593@x) (simple-struct-ref tm2593@x '1))) (set! tm28d7@tme18@env-labels tme18@env-labels) (set! tme1a@set-env-labels! (lambda (tm2595@x tm2596@val) (simple-struct-set! tm2595@x '1 tm2596@val))) (set! tm28d8@tme1a@set-env-labels! tme1a@set-env-labels!) (set! tme1c@env-itc (lambda (tm2599@x) (simple-struct-ref tm2599@x '2))) (set! tm28d9@tme1c@env-itc tme1c@env-itc) (set! tme1e@set-env-itc! (lambda (tm259b@x tm259c@val) (simple-struct-set! tm259b@x '2 tm259c@val))) (set! tm28da@tme1e@set-env-itc! tme1e@set-env-itc!) (set! tme20@dummy '3) (set! tm28db@tme20@dummy tme20@dummy) (set! tme22@rp (tm6d4@tm5af@make-record-printer 'interaction-env (lambda (tm259f@x tm25a0@p tm25a1@wr) (display '"#<environment>" tm25a0@p)))) (set! tm28dc@tme22@rp tme22@rp) (set! tme2c@interaction-env? (lambda (tm25a5@x) (and (simple-struct? tm25a5@x) (eq? (simple-struct-name tm25a5@x) 'interaction-env)))) (set! tm28dd@tme2c@interaction-env? tme2c@interaction-env?) (set! tme2e@interaction-env-rib (lambda (tm25a7@x) (simple-struct-ref tm25a7@x '0))) (set! tm28de@tme2e@interaction-env-rib tme2e@interaction-env-rib) (set! tme30@set-interaction-env-rib! (lambda (tm25a9@x tm25aa@val) (simple-struct-set! tm25a9@x '0 tm25aa@val))) (set! tm28df@tme30@set-interaction-env-rib! tme30@set-interaction-env-rib!) (set! tme32@interaction-env-r (lambda (tm25ad@x) (simple-struct-ref tm25ad@x '1))) (set! tm28e0@tme32@interaction-env-r tme32@interaction-env-r) (set! tme34@set-interaction-env-r! (lambda (tm25af@x tm25b0@val) (simple-struct-set! tm25af@x '1 tm25b0@val))) (set! tm28e1@tme34@set-interaction-env-r! tme34@set-interaction-env-r!) (set! tme36@interaction-env-locs (lambda (tm25b3@x) (simple-struct-ref tm25b3@x '2))) (set! tm28e2@tme36@interaction-env-locs tme36@interaction-env-locs) (set! tme38@set-interaction-env-locs! (lambda (tm25b5@x tm25b6@val) (simple-struct-set! tm25b5@x '2 tm25b6@val))) (set! tm28e3@tme38@set-interaction-env-locs! tme38@set-interaction-env-locs!) (set! tme3a@dummy '3) (set! tm28e4@tme3a@dummy tme3a@dummy) (set! tme3c@interaction-environment-symbols (lambda () (tme44@environment-symbols (tme7c@interaction-environment)))) (set! tm28e5@tme3c@interaction-environment-symbols tme3c@interaction-environment-symbols) (set! tme3e@environment-bindings (lambda (tm25b9@e) (vector->list (vector-map (lambda (tm25bb@name tm25bc@label) (tme40@parse-binding (cons tm25bb@name (tm9a2@tm7ef@imported-label->binding tm25bc@label)))) (tme14@env-names tm25b9@e) (tme18@env-labels tm25b9@e))))) (set! tm28e6@tme3e@environment-bindings tme3e@environment-bindings) (set! tme40@parse-binding (lambda (tm25bf@b) (cons (car tm25bf@b) (let ((tm25c1@t (cadr tm25bf@b))) (if (memv tm25c1@t '(core-prim global)) 'procedure (if (memv tm25c1@t '(core-macro macro global-macro)) 'syntax (if (memv tm25c1@t '($core-rtd)) 'record (if (eq? (car tm25bf@b) (cadr tm25bf@b)) 'syntax 'unknown)))))))) (set! tm28e7@tme40@parse-binding tme40@parse-binding) (set! tme42@environment? (lambda (tm25c3@x) (or (tme12@env? tm25c3@x) (tme2c@interaction-env? tm25c3@x)))) (set! tm28e8@tme42@environment? tme42@environment?) (set! tme44@environment-symbols (lambda (tm25c5@x) (if (tme12@env? tm25c5@x) (vector->list (tme14@env-names tm25c5@x)) (if (tme2c@interaction-env? tm25c5@x) (map values (tmb25@rib-sym* (tme2e@interaction-env-rib tm25c5@x))) (assertion-violation 'environment-symbols '"not an environment" tm25c5@x))))) (set! tm28e9@tme44@environment-symbols tme44@environment-symbols) (set! tme46@environment (lambda tm25c7@imp* (let ((tm25c9@itc (tmdf4@make-collector))) (let ((tm25cf@tm25cc tmdfa@imp-collector) (tm25d0@tm25ce tm25c9@itc)) (let ((tm25d3@swap (lambda () (let ((tm25d5@t (tm25cf@tm25cc))) (begin (tm25cf@tm25cc tm25d0@tm25ce) (set! tm25d0@tm25ce tm25d5@t)))))) (dynamic-wind tm25d3@swap (lambda () (call-with-values (lambda () (tmdf0@parse-import-spec* tm25c7@imp*)) (lambda (tm25db@tm25d8 tm25dc@tm25da) (let ((tm25df@subst-labels tm25dc@tm25da) (tm25e0@subst-names tm25db@tm25d8)) (make-simple-struct 'env '4 (list tm25e0@subst-names tm25df@subst-labels tm25c9@itc)))))) tm25d3@swap)))))) (set! tm28ea@tme46@environment tme46@environment) (set! tme48@null-environment (lambda (tm25e3@n) (begin (if (not (eqv? tm25e3@n '5)) (assertion-violation 'null-environment '"not 5" tm25e3@n) (void)) (tme46@environment '(psyntax null-environment-5))))) (set! tm28eb@tme48@null-environment tme48@null-environment) (set! tme4a@scheme-report-environment (lambda (tm25e5@n) (begin (if (not (eqv? tm25e5@n '5)) (assertion-violation 'scheme-report-environment '"not 5" tm25e5@n) (void)) (tme46@environment '(psyntax scheme-report-environment-5))))) (set! tm28ec@tme4a@scheme-report-environment tme4a@scheme-report-environment) (set! tme4c@expand (lambda (tm25e7@x tm25e8@env) (if (tme12@env? tm25e8@env) (let ((tm25eb@rib (tmdf2@make-top-rib (tme14@env-names tm25e8@env) (tme18@env-labels tm25e8@env)))) (let ((tm25ed@x (make-simple-struct 'stx '5 (list tm25e7@x tmb0b@top-mark* (list tm25eb@rib) '()))) (tm25ee@itc (tme1c@env-itc tm25e8@env)) (tm25ef@rtc (tmdf4@make-collector)) (tm25f0@vtc (tmdf4@make-collector))) (let ((tm25f5@x (let ((tm2607@tm25f8 tme7e@top-level-context) (tm2608@tm25fa tmdf6@inv-collector) (tm2609@tm25fc tmdf8@vis-collector) (tm260a@tm25fe tmdfa@imp-collector) (tm260b@tm2600 '#f) (tm260c@tm2602 tm25ef@rtc) (tm260d@tm2604 tm25f0@vtc) (tm260e@tm2606 tm25ee@itc)) (let ((tm2617@swap (lambda () (begin (let ((tm2619@t (tm2607@tm25f8))) (begin (tm2607@tm25f8 tm260b@tm2600) (set! tm260b@tm2600 tm2619@t))) (let ((tm261b@t (tm2608@tm25fa))) (begin (tm2608@tm25fa tm260c@tm2602) (set! tm260c@tm2602 tm261b@t))) (let ((tm261d@t (tm2609@tm25fc))) (begin (tm2609@tm25fc tm260d@tm2604) (set! tm260d@tm2604 tm261d@t))) (let ((tm261f@t (tm260a@tm25fe))) (begin (tm260a@tm25fe tm260e@tm2606) (set! tm260e@tm2606 tm261f@t))))))) (dynamic-wind tm2617@swap (lambda () (tmdb0@chi-expr tm25ed@x '() '())) tm2617@swap))))) (begin (tmb43@seal-rib! tm25eb@rib) (values tm25f5@x (tm25ef@rtc)))))) (if (tme2c@interaction-env? tm25e8@env) (let ((tm2621@rib (tme2e@interaction-env-rib tm25e8@env)) (tm2622@r (tme32@interaction-env-r tm25e8@env)) (tm2623@rtc (tmdf4@make-collector))) (let ((tm2627@x (make-simple-struct 'stx '5 (list tm25e7@x tmb0b@top-mark* (list tm2621@rib) '())))) (call-with-values (lambda () (let ((tm263d@tm262e tme7e@top-level-context) (tm263e@tm2630 tmdf6@inv-collector) (tm263f@tm2632 tmdf8@vis-collector) (tm2640@tm2634 tmdfa@imp-collector) (tm2641@tm2636 tm25e8@env) (tm2642@tm2638 tm2623@rtc) (tm2643@tm263a (tmdf4@make-collector)) (tm2644@tm263c (tmdf4@make-collector))) (let ((tm264d@swap (lambda () (begin (let ((tm264f@t (tm263d@tm262e))) (begin (tm263d@tm262e tm2641@tm2636) (set! tm2641@tm2636 tm264f@t))) (let ((tm2651@t (tm263e@tm2630))) (begin (tm263e@tm2630 tm2642@tm2638) (set! tm2642@tm2638 tm2651@t))) (let ((tm2653@t (tm263f@tm2632))) (begin (tm263f@tm2632 tm2643@tm263a) (set! tm2643@tm263a tm2653@t))) (let ((tm2655@t (tm2640@tm2634))) (begin (tm2640@tm2634 tm2644@tm263c) (set! tm2644@tm263c tm2655@t))))))) (dynamic-wind tm264d@swap (lambda () (tmdfe@chi-interaction-expr tm2627@x tm2621@rib tm2622@r)) tm264d@swap)))) (lambda (tm2657@tm262a tm2658@tm262c) (let ((tm265b@r^ tm2658@tm262c) (tm265c@e tm2657@tm262a)) (begin (tme34@set-interaction-env-r! tm25e8@env tm265b@r^) (values tm265c@e (tm2623@rtc)))))))) (assertion-violation 'expand '"not an environment" tm25e8@env))))) (set! tm28ed@tme4c@expand tme4c@expand) (set! tme4e@eval (lambda (tm265f@x tm2660@env) (begin (if (not (tme42@environment? tm2660@env)) (error 'eval '"not an environment" tm2660@env) (void)) (call-with-values (lambda () (tme4c@expand tm265f@x tm2660@env)) (lambda (tm2667@tm2664 tm2668@tm2666) (let ((tm266b@invoke-req* tm2668@tm2666) (tm266c@x tm2667@tm2664)) (begin (for-each tm9a3@tm7f1@invoke-library tm266b@invoke-req*) (eval-core (tm72d@tm6e5@expanded->core tm266c@x))))))))) (set! tm28ee@tme4e@eval tme4e@eval) (set! tme50@library-expander (lambda tm26dd (let ((tm26de (length tm26dd))) (if (= tm26de '3) (apply (lambda (tm266f@x tm2670@filename tm2671@verify-name) (letrec* ((tm2676@build-visit-code (lambda (tm26cb@macro*) (if (null? tm26cb@macro*) (tmaed@tma4e@build-void) (tmaec@tma4c@build-sequence '#f (map (lambda (tm26cd@x) (let ((tm26cf@loc (car tm26cd@x)) (tm26d0@src (cddr tm26cd@x))) (list 'set! tm26cf@loc tm26d0@src))) tm26cb@macro*))))) (tm2678@visit! (lambda (tm26c3@macro*) (for-each (lambda (tm26c5@x) (let ((tm26c7@loc (car tm26c5@x)) (tm26c8@proc (cadr tm26c5@x))) (set-symbol-value! tm26c7@loc tm26c8@proc))) tm26c3@macro*)))) (call-with-values (lambda () (tme02@core-library-expander tm266f@x tm2671@verify-name)) (lambda (tm268b@tm267a tm268c@tm267c tm268d@tm267e tm268e@tm2680 tm268f@tm2682 tm2690@tm2684 tm2691@tm2686 tm2692@tm2688 tm2693@tm268a) (let ((tm269d@export-env tm2693@tm268a) (tm269e@export-subst tm2692@tm2688) (tm269f@macro* tm2691@tm2686) (tm26a0@invoke-code tm2690@tm2684) (tm26a1@vis* tm268f@tm2682) (tm26a2@inv* tm268e@tm2680) (tm26a3@imp* tm268d@tm267e) (tm26a4@ver tm268c@tm267c) (tm26a5@name tm268b@tm267a)) (let ((tm26af@id (gensym)) (tm26b0@name tm26a5@name) (tm26b1@ver tm26a4@ver) (tm26b2@imp* (map tm9a7@tm7f9@library-spec tm26a3@imp*)) (tm26b3@vis* (map tm9a7@tm7f9@library-spec tm26a1@vis*)) (tm26b4@inv* (map tm9a7@tm7f9@library-spec tm26a2@inv*)) (tm26b5@visit-proc (lambda () (tm2678@visit! tm269f@macro*))) (tm26b6@invoke-proc (lambda () (eval-core (tm72d@tm6e5@expanded->core tm26a0@invoke-code)))) (tm26b7@visit-code (tm2676@build-visit-code tm269f@macro*)) (tm26b8@invoke-code tm26a0@invoke-code)) (begin (tm9a1@tm7ed@install-library tm26af@id tm26b0@name tm26b1@ver tm26b2@imp* tm26b3@vis* tm26b4@inv* tm269e@export-subst tm269d@export-env tm26b5@visit-proc tm26b6@invoke-proc tm26b7@visit-code tm26b8@invoke-code '#t tm2670@filename) (values tm26af@id tm26b0@name tm26b1@ver tm26b2@imp* tm26b3@vis* tm26b4@inv* tm26b8@invoke-code tm26b7@visit-code tm269e@export-subst tm269d@export-env)))))))) tm26dd) (if (= tm26de '2) (apply (lambda (tm26d3@x tm26d4@filename) (tme50@library-expander tm26d3@x tm26d4@filename (lambda (tm26d7@x) (values)))) tm26dd) (if (= tm26de '1) (apply (lambda (tm26d9@x) (tme50@library-expander tm26d9@x '#f (lambda (tm26db@x) (values)))) tm26dd) (error 'apply '"invalid arg count"))))))) (set! tm28ef@tme50@library-expander tme50@library-expander) (set! tme52@boot-library-expand (lambda (tm26df@x) (call-with-values (lambda () (tme50@library-expander tm26df@x)) (lambda (tm26f5@tm26e2 tm26f6@tm26e4 tm26f7@tm26e6 tm26f8@tm26e8 tm26f9@tm26ea tm26fa@tm26ec tm26fb@tm26ee tm26fc@tm26f0 tm26fd@tm26f2 tm26fe@tm26f4) (let ((tm2709@export-env tm26fe@tm26f4) (tm270a@export-subst tm26fd@tm26f2) (tm270b@visit-code tm26fc@tm26f0) (tm270c@invoke-code tm26fb@tm26ee) (tm270d@inv* tm26fa@tm26ec) (tm270e@vis* tm26f9@tm26ea) (tm270f@imp* tm26f8@tm26e8) (tm2710@ver tm26f7@tm26e6) (tm2711@name tm26f6@tm26e4) (tm2712@id tm26f5@tm26e2)) (values tm2711@name tm270c@invoke-code tm270a@export-subst tm2709@export-env)))))) (set! tm28f0@tme52@boot-library-expand tme52@boot-library-expand) (set! tme54@rev-map-append (lambda (tm271d@f tm271e@ls tm271f@ac) (if (null? tm271e@ls) tm271f@ac (tme54@rev-map-append tm271d@f (cdr tm271e@ls) (cons (tm271d@f (car tm271e@ls)) tm271f@ac))))) (set! tm28f1@tme54@rev-map-append tme54@rev-map-append) (set! tme56@build-exports (lambda (tm2723@lex*+loc* tm2724@init*) (tmaec@tma4c@build-sequence '#f (cons (tmaed@tma4e@build-void) (tme54@rev-map-append (lambda (tm2727@x) (list 'set! (cdr tm2727@x) (car tm2727@x))) tm2723@lex*+loc* tm2724@init*))))) (set! tm28f2@tme56@build-exports tme56@build-exports) (set! tme58@make-export-subst (lambda (tm2729@name* tm272a@id*) (map (lambda (tm272d@name tm272e@id) (let ((tm2731@label (tmb9d@id->label tm272e@id))) (begin (if (not tm2731@label) (tme6e@syntax-violation '#f '"cannot export unbound identifier" tm272e@id) (void)) (cons tm272d@name tm2731@label)))) tm2729@name* tm272a@id*))) (set! tm28f3@tme58@make-export-subst tme58@make-export-subst) (set! tme5a@make-export-env/macros (lambda (tm2733@lex* tm2734@loc* tm2735@r) (letrec* ((tm273a@lookup (lambda (tm2757@x) (let tm275f@f ((tm2759@x tm2757@x) (tm275a@lex* tm2733@lex*) (tm275b@loc* tm2734@loc*)) (if (pair? tm275a@lex*) (if (eq? tm2759@x (car tm275a@lex*)) (car tm275b@loc*) (tm275f@f tm2759@x (cdr tm275a@lex*) (cdr tm275b@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let tm2743@f ((tm273b@r tm2735@r) (tm273c@env '()) (tm273d@global* '()) (tm273e@macro* '())) (if (null? tm273b@r) (values tm273c@env tm273d@global* tm273e@macro*) (let ((tm2745@x (car tm273b@r))) (let ((tm2747@label (car tm2745@x)) (tm2748@b (cdr tm2745@x))) (let ((tm274b@t (tmba3@binding-type tm2748@b))) (if (memv tm274b@t '(lexical)) (let ((tm274d@v (tmba5@binding-value tm2748@b))) (let ((tm274f@loc (tm273a@lookup (tmd18@lexical-var tm274d@v))) (tm2750@type (if (tmd1a@lexical-mutable? tm274d@v) 'mutable 'global))) (tm2743@f (cdr tm273b@r) (cons (cons* tm2747@label tm2750@type tm274f@loc) tm273c@env) (cons (cons (tmd18@lexical-var tm274d@v) tm274f@loc) tm273d@global*) tm273e@macro*))) (if (memv tm274b@t '(local-macro)) (let ((tm2753@loc (gensym))) (tm2743@f (cdr tm273b@r) (cons (cons* tm2747@label 'global-macro tm2753@loc) tm273c@env) tm273d@global* (cons (cons tm2753@loc (tmba5@binding-value tm2748@b)) tm273e@macro*))) (if (memv tm274b@t '(local-macro!)) (let ((tm2755@loc (gensym))) (tm2743@f (cdr tm273b@r) (cons (cons* tm2747@label 'global-macro! tm2755@loc) tm273c@env) tm273d@global* (cons (cons tm2755@loc (tmba5@binding-value tm2748@b)) tm273e@macro*))) (if (memv tm274b@t '($rtd $module)) (tm2743@f (cdr tm273b@r) (cons tm2745@x tm273c@env) tm273d@global* tm273e@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (tmba3@binding-type tm2748@b) (tmba5@binding-value tm2748@b)))))))))))))) (set! tm28f4@tme5a@make-export-env/macros tme5a@make-export-env/macros) (set! tme5c@generate-temporaries (lambda (tm2761@ls) (let ((tm2763@t tm2761@ls)) (let ((tm2765@ls/false (tmd8e@syntax-dispatch tm2763@t 'each-any))) (if tm2765@ls/false (apply (lambda (tm2767@ls) (map (lambda (tm2769@x) (make-simple-struct 'stx '5 (list (let ((tm276b@x (tme74@syntax->datum tm2769@x))) (if (or (symbol? tm276b@x) (string? tm276b@x)) (gensym tm276b@x) (gensym 't))) tmb0b@top-mark* '() '()))) tm2767@ls)) tm2765@ls/false) (let ((tm276d@t tm2763@t)) (let ((tm276f@ls/false (tmd8e@syntax-dispatch tm276d@t '_))) (if tm276f@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) tm276f@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm276d@t))))))))) (set! tm28f5@tme5c@generate-temporaries tme5c@generate-temporaries) (set! tme5e@free-identifier=? (lambda (tm2771@x tm2772@y) (if (tmb87@id? tm2771@x) (if (tmb87@id? tm2772@y) (tmb8d@free-id=? tm2771@x tm2772@y) (assertion-violation 'free-identifier=? '"not an identifier" tm2772@y)) (assertion-violation 'free-identifier=? '"not an identifier" tm2771@x)))) (set! tm28f6@tme5e@free-identifier=? tme5e@free-identifier=?) (set! tme60@bound-identifier=? (lambda (tm2775@x tm2776@y) (if (tmb87@id? tm2775@x) (if (tmb87@id? tm2776@y) (tmb8b@bound-id=? tm2775@x tm2776@y) (assertion-violation 'bound-identifier=? '"not an identifier" tm2776@y)) (assertion-violation 'bound-identifier=? '"not an identifier" tm2775@x)))) (set! tm28f7@tme60@bound-identifier=? tme60@bound-identifier=?) (set! tme62@make-source-condition (lambda (tm2779@x) (letrec* ((tm2783@tm277e (make-record-type-descriptor '&source-information &condition-rtd 'tm2781 '#f '#f '#((immutable file-name) (immutable line)))) (tm2785@tm2780 '#f) (tm2787@tm277f (make-record-constructor-descriptor tm2783@tm277e &condition-rcd tm2785@tm2780)) (tm278a@tm277d (record-predicate tm2783@tm277e)) (tm278c@make-source-condition (record-constructor tm2787@tm277f)) (tm278e@tm277b (record-accessor tm2783@tm277e '0)) (tm2790@tm277c (record-accessor tm2783@tm277e '1)) (tm2792@source-condition? (condition-predicate tm2783@tm277e)) (tm2794@source-filename (condition-accessor tm2783@tm277e tm278e@tm277b)) (tm2796@source-character (condition-accessor tm2783@tm277e tm2790@tm277c))) (if (and (pair? tm2779@x) (pair? (cdr tm2779@x))) (tm278c@make-source-condition (car tm2779@x) (cadr tm2779@x)) (condition))))) (set! tm28f8@tme62@make-source-condition tme62@make-source-condition) (set! tme64@extract-position-condition (lambda (tm2797@x) (tme62@make-source-condition (tme66@expression-position tm2797@x)))) (set! tm28f9@tme64@extract-position-condition tme64@extract-position-condition) (set! tme66@expression-position (lambda (tm2799@x) (and (tmb53@stx? tm2799@x) (let ((tm279b@x (tmb55@stx-expr tm2799@x))) (and (tm6cb@tm59d@annotation? tm279b@x) (tm6cc@tm59f@annotation-source tm279b@x)))))) (set! tm28fa@tme66@expression-position tme66@expression-position) (set! tme68@assertion-error (lambda (tm279d@expr tm279e@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list tm279d@expr)) (tme62@make-source-condition tm279e@pos))))) (set! tm28fb@tme68@assertion-error tme68@assertion-error) (set! tme6a@syntax-error (lambda (tm27a1@x . tm27a3@args) (begin (if (not (for-all string? tm27a3@args)) (assertion-violation 'syntax-error '"invalid argument" tm27a3@args) (void)) (raise (condition (make-message-condition (if (null? tm27a3@args) '"invalid syntax" (apply string-append tm27a3@args))) (make-syntax-violation (tme74@syntax->datum tm27a1@x) '#f) (tme64@extract-position-condition tm27a1@x)))))) (set! tm28fc@tme6a@syntax-error tme6a@syntax-error) (set! tme6c@syntax-violation* (lambda (tm27a5@who tm27a6@msg tm27a7@form tm27a8@condition-object) (begin (if (not (string? tm27a6@msg)) (assertion-violation 'syntax-violation '"message is not a string" tm27a6@msg) (void)) (let ((tm27ad@who (if (or (string? tm27a5@who) (symbol? tm27a5@who)) tm27a5@who (if (not tm27a5@who) (let ((tm27af@t tm27a7@form)) (let ((tm27b1@ls/false (tmd8e@syntax-dispatch tm27af@t 'any))) (if (and tm27b1@ls/false (apply (lambda (tm27b3@id) (tmb87@id? tm27b3@id)) tm27b1@ls/false)) (apply (lambda (tm27b5@id) (tme74@syntax->datum tm27b5@id)) tm27b1@ls/false) (let ((tm27b7@t tm27af@t)) (let ((tm27b9@ls/false (tmd8e@syntax-dispatch tm27b7@t '(any . any)))) (if (and tm27b9@ls/false (apply (lambda (tm27bb@id tm27bc@rest) (tmb87@id? tm27bb@id)) tm27b9@ls/false)) (apply (lambda (tm27bf@id tm27c0@rest) (tme74@syntax->datum tm27bf@id)) tm27b9@ls/false) (let ((tm27c3@t tm27b7@t)) (let ((tm27c5@ls/false (tmd8e@syntax-dispatch tm27c3@t '_))) (if tm27c5@ls/false (apply (lambda () '#f) tm27c5@ls/false) (tme6e@syntax-violation '#f '"invalid syntax" tm27c3@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" tm27a5@who))))) (raise (condition (if tm27ad@who (make-who-condition tm27ad@who) (condition)) (make-message-condition tm27a6@msg) tm27a8@condition-object (tme64@extract-position-condition tm27a7@form))))))) (set! tm28fd@tme6c@syntax-violation* tme6c@syntax-violation*) (set! tme6e@syntax-violation (lambda tm27d5 (let ((tm27d6 (length tm27d5))) (if (= tm27d6 '3) (apply (lambda (tm27c7@who tm27c8@msg tm27c9@form) (tme6e@syntax-violation tm27c7@who tm27c8@msg tm27c9@form '#f)) tm27d5) (if (= tm27d6 '4) (apply (lambda (tm27cd@who tm27ce@msg tm27cf@form tm27d0@subform) (tme6c@syntax-violation* tm27cd@who tm27ce@msg tm27cf@form (make-syntax-violation (tme74@syntax->datum tm27cf@form) (tme74@syntax->datum tm27d0@subform)))) tm27d5) (error 'apply '"invalid arg count")))))) (set! tm28fe@tme6e@syntax-violation tme6e@syntax-violation) (set! tme70@identifier? (lambda (tm27d7@x) (tmb87@id? tm27d7@x))) (set! tm28ff@tme70@identifier? tme70@identifier?) (set! tme72@datum->syntax (lambda (tm27d9@id tm27da@datum) (if (tmb87@id? tm27d9@id) (tmb67@datum->stx tm27d9@id tm27da@datum) (assertion-violation 'datum->syntax '"not an identifier" tm27d9@id)))) (set! tm2900@tme72@datum->syntax tme72@datum->syntax) (set! tme74@syntax->datum (lambda (tm27dd@x) (tmb9b@stx->datum tm27dd@x))) (set! tm2901@tme74@syntax->datum tme74@syntax->datum) (set! tme76@ungensym-all (lambda (tm27df@code) (if (pair? tm27df@code) (cons (tme76@ungensym-all (car tm27df@code)) (tme76@ungensym-all (cdr tm27df@code))) (if (symbol? tm27df@code) (ungensym tm27df@code) tm27df@code)))) (set! tm2902@tme76@ungensym-all tme76@ungensym-all) (set! tme78@compile-r6rs-top-level (lambda (tm27e1@x*) (call-with-values (lambda () (tme06@top-level-expander tm27e1@x*)) (lambda (tm27e7@tm27e4 tm27e8@tm27e6) (let ((tm27eb@invoke-code tm27e8@tm27e6) (tm27ec@lib* tm27e7@tm27e4)) (lambda () (begin (for-each tm9a3@tm7f1@invoke-library tm27ec@lib*) (let ((tm27ef@expanded (tm72d@tm6e5@expanded->core tm27eb@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (tme76@ungensym-all tm27ef@expanded)) (void)) (eval-core tm27ef@expanded)))))))))) (set! tm2903@tme78@compile-r6rs-top-level tme78@compile-r6rs-top-level) (set! tme7a@pre-compile-r6rs-top-level (lambda (tm27f1@x*) (call-with-values (lambda () (tme06@top-level-expander tm27f1@x*)) (lambda (tm27f7@tm27f4 tm27f8@tm27f6) (let ((tm27fb@invoke-code tm27f8@tm27f6) (tm27fc@lib* tm27f7@tm27f4)) (begin (for-each tm9a3@tm7f1@invoke-library tm27fc@lib*) (tm6d5@tm5b1@compile-core (tm72d@tm6e5@expanded->core tm27fb@invoke-code)))))))) (set! tm2904@tme7a@pre-compile-r6rs-top-level tme7a@pre-compile-r6rs-top-level) (set! tme7c@interaction-environment (let ((tm27ff@the-env '#f)) (lambda () (or tm27ff@the-env (let ((tm2801@lib (tm99c@tm7e3@find-library-by-name '(mosh interaction))) (tm2802@rib (tmb3b@make-empty-rib))) (begin (let ((tm2805@subst (tm97e@tm7a7@library-subst tm2801@lib))) (begin (tmb27@set-rib-sym*! tm2802@rib (map car tm2805@subst)) (tmb2b@set-rib-mark**! tm2802@rib (map (lambda (tm2807@x) tmb0b@top-mark*) tm2805@subst)) (tmb2f@set-rib-label*! tm2802@rib (map cdr tm2805@subst)))) (let ((tm2809@env (make-simple-struct 'interaction-env '4 (list tm2802@rib '() '())))) (begin (set! tm27ff@the-env tm2809@env) tm2809@env)))))))) (set! tm2905@tme7c@interaction-environment tme7c@interaction-environment) (set! tme7e@top-level-context (tm6d7@tm5b5@make-parameter '#f)) (set! tm2906@tme7e@top-level-context tme7e@top-level-context) (tm999@tm7dd@current-library-expander tme50@library-expander))
(begin (begin (tm72a@tm6df@current-primitive-locations (lambda (tm2e6b@x) (let ((tm2e6d@t (assq tm2e6b@x '((syntax-error . tm28fc@tme6a@syntax-error) (syntax-dispatch . tm289a@tmd8e@syntax-dispatch) (load . tm2a86@tm292d@load) (interaction-environment . tm2905@tme7c@interaction-environment) (library-path . tm991@tm7cd@library-path) (mosh-cache-dir . tm6d8@tm5b7@mosh-cache-dir) (make-parameter . tm6d7@tm5b5@make-parameter) (make-variable-transformer . tm2857@tmbb9@make-variable-transformer) (identifier? . tm28ff@tme70@identifier?) (generate-temporaries . tm28f5@tme5c@generate-temporaries) (free-identifier=? . tm28f6@tme5e@free-identifier=?) (syntax->datum . tm2901@tme74@syntax->datum) (datum->syntax . tm2900@tme72@datum->syntax) (bound-identifier=? . tm28f7@tme60@bound-identifier=?) (scheme-report-environment . tm28ec@tme4a@scheme-report-environment) (null-environment . tm28eb@tme48@null-environment) (command-line . tm2a83@tm2927@command-line) (eval . tm28ee@tme4e@eval) (environment . tm28ea@tme46@environment) (syntax-violation . tm28fe@tme6e@syntax-violation) (assertion-error . tm28fb@tme68@assertion-error))))) (if tm2e6d@t (cdr tm2e6d@t) '#f)))) (tm9a1@tm7ed@install-library 'tm2e48 '(mosh interaction) '() '() '() '() '((regexp? . tm2e08) (alist->eq-hash-table . tm2e04) (format . tm2e01) (string-split . tm2de7) (%call-process . tm2de0) (set-current-directory! . tm2ddc) (expand-path . tm2ddb) (current-directory . tm2dda) (%getpid . tm2dd9) (%spawn . tm2dd8) (%waitpid . tm2dd7) (simple-struct-name . tm2dd6) (simple-struct-set! . tm2dd5) (simple-struct-ref . tm2dd4) (make-simple-struct . tm2dd3) (simple-struct? . tm2dd2) (pointer-ref-c-int64 . tm2dd1) (pointer-ref-c-int32 . tm2dd0) (pointer-ref-c-int16 . tm2dcf) (pointer-ref-c-int8 . tm2dce) (pointer-ref-c-uint64 . tm2dcd) (pointer-ref-c-uint32 . tm2dcc) (pointer-ref-c-uint16 . tm2dcb) (pointer-ref-c-uint8 . tm2dca) (pointer-set-c-uint64! . tm2dc9) (pointer-set-c-uint32! . tm2dc8) (pointer-set-c-uint16! . tm2dc7) (pointer-set-c-uint8! . tm2dc6) (pointer-set-c-int64! . tm2dc5) (pointer-set-c-int32! . tm2dc4) (pointer-set-c-int16! . tm2dc3) (pointer-set-c-int8! . tm2dc2) (pointer-set-c-pointer! . tm2dc1) (pointer-set-c-double! . tm2dc0) (pointer-set-c-float! . tm2dbf) (pointer-set-c-long-long! . tm2dbe) (pointer-set-c-long! . tm2dbd) (pointer-set-c-int! . tm2dbc) (pointer-set-c-short! . tm2dbb) (pointer-set-c-char! . tm2dba) (pointer-ref-c-pointer . tm2db9) (pointer-ref-c-double . tm2db8) (pointer-ref-c-float . tm2db7) (pointer-ref-c-unsigned-long-long . tm2db6) (pointer-ref-c-signed-long-long . tm2db5) (pointer-ref-c-unsigned-long . tm2db4) (pointer-ref-c-signed-long . tm2db3) (pointer-ref-c-unsigned-int . tm2db2) (pointer-ref-c-signed-int . tm2db1) (pointer-ref-c-unsigned-short . tm2db0) (pointer-ref-c-signed-short . tm2daf) (pointer-ref-c-unsigned-char . tm2dae) (pointer-ref-c-signed-char . tm2dad) (pointer->integer . tm2dac) (integer->pointer . tm2dab) (pointer? . tm2daa) (shared-errno . tm2da9) (%ffi-supported? . tm2da4) (%ffi-pointer->string . tm2da3) (%ffi-call . tm2da2) (%ffi-lookup . tm2da1) (%ffi-open . tm2da0) (null-terminated-utf8->string . tm2d9f) (null-terminated-bytevector->string . tm2d9e) (%exec . tm2d9d) (%fork . tm2d9c) (%pipe . tm2d9b) (p . tm2d9a) (whereis . tm2d7e) (register . tm2d7d) (vm-join! . tm2d7c) (vm-set-value! . tm2d7b) (vm? . tm2d7a) (main-vm? . tm2d79) (vm-eval . tm2d78) (vm-self . tm2d77) (vm-start! . tm2d76) (make-vm . tm2d75) (mutex-try-lock! . tm2d74) (mutex-unlock! . tm2d73) (mutex-lock! . tm2d72) (mutex? . tm2d71) (make-mutex . tm2d70) (condition-variable-notify-all! . tm2d6f) (condition-variable-notify! . tm2d6e) (condition-variable-wait! . tm2d6d) (make-condition-variable . tm2d6c) (write/ss . tm2d6b) (string-upcase . tm2d4e) (string-titlecase . tm2d4d) (string-normalize-nfkd . tm2d4c) (string-normalize-nfkc . tm2d4b) (string-normalize-nfd . tm2d4a) (string-normalize-nfc . tm2d49) (string-foldcase . tm2d48) (string-downcase . tm2d47) (string-ci>? . tm2d46) (string-ci>=? . tm2d45) (string-ci=? . tm2d44) (string-ci<? . tm2d43) (string-ci<=? . tm2d42) (char-whitespace? . tm2d41) (char-upper-case? . tm2d40) (char-title-case? . tm2d3f) (char-numeric? . tm2d3e) (char-lower-case? . tm2d3d) (char-general-category . tm2d3c) (char-upcase . tm2d3b) (char-titlecase . tm2d3a) (char-foldcase . tm2d39) (char-downcase . tm2d38) (char-ci>? . tm2d37) (char-ci>=? . tm2d36) (char-ci=? . tm2d35) (char-ci<? . tm2d34) (char-ci<=? . tm2d33) (char-alphabetic? . tm2d32) (make-variable-transformer . tmbb8) (identifier? . tme6f) (generate-temporaries . tme5b) (free-identifier=? . tme5d) (syntax->datum . tme73) (datum->syntax . tme71) (bound-identifier=? . tme5f) (record-type-descriptor? . tm2d31) (record-predicate . tm2d30) (record-mutator . tm2d2f) (record-constructor . tm2d2e) (record-accessor . tm2d2d) (make-record-type-descriptor . tm2d2c) (make-record-constructor-descriptor . tm2d2b) (record? . tm2d2a) (record-type-uid . tm2d29) (record-type-sealed? . tm2d28) (record-type-parent . tm2d27) (record-type-opaque? . tm2d26) (record-type-name . tm2d25) (record-type-generative? . tm2d24) (record-type-field-names . tm2d23) (record-rtd . tm2d22) (record-field-mutable? . tm2d21) (delete-file . tm2d20) (file-exists? . tm2d1f) (vector-sort! . tm2d1e) (vector-sort . tm2d1d) (list-sort . tm2d1c) (symbol-hash . tm2d1b) (string-ci-hash . tm2d1a) (string-hash . tm2d19) (equal-hash . tm2d18) (hashtable-equivalence-function . tm2d17) (make-hashtable . tm2d16) (hashtable-hash-function . tm2d15) (make-eqv-hashtable . tm2d14) (make-eq-hashtable . tm2d13) (hashtable? . tm2d12) (hashtable-update! . tm2d11) (hashtable-size . tm2d10) (hashtable-set! . tm2d0f) (hashtable-ref . tm2d0e) (hashtable-mutable? . tm2d0d) (hashtable-keys . tm2d0c) (hashtable-entries . tm2d0b) (hashtable-delete! . tm2d0a) (hashtable-copy . tm2d09) (hashtable-contains? . tm2d08) (hashtable-clear! . tm2d07) (call-with-output-file . tm2d06) (call-with-input-file . tm2d05) (write-char . tm2d04) (write . tm2d03) (with-output-to-file . tm2d02) (with-input-from-file . tm2d01) (read-char . tm2d00) (read . tm2cff) (peek-char . tm2cfe) (open-output-file . tm2cfd) (open-input-file . tm2cfc) (newline . tm2cfb) (display . tm2cfa) (close-output-port . tm2cf9) (close-input-port . tm2cf8) (eof-object? . tm2cf7) (eof-object . tm2cf6) (current-error-port . tm2cf5) (current-output-port . tm2cf4) (current-input-port . tm2cf3) (output-port? . tm2cf2) (input-port? . tm2cf1) (utf-8-codec . tm2cf0) (utf-16-codec . tm2cef) (transcoder-error-handling-mode . tm2cee) (transcoder-eol-style . tm2ced) (transcoder-codec . tm2cec) (transcoded-port . tm2ceb) (textual-port? . tm2cea) (string->bytevector . tm2ce9) (standard-output-port . tm2ce8) (standard-input-port . tm2ce7) (standard-error-port . tm2ce6) (set-port-position! . tm2ce5) (put-u8 . tm2ce4) (put-string . tm2ce3) (put-datum . tm2ce2) (put-char . tm2ce1) (put-bytevector . tm2ce0) (port? . tm2cdf) (port-transcoder . tm2cde) (port-position . tm2cdd) (port-has-set-port-position!? . tm2cdc) (port-has-port-position? . tm2cdb) (port-eof? . tm2cda) (output-port-buffer-mode . tm2cd9) (open-string-output-port . tm2cd8) (open-string-input-port . tm2cd7) (open-file-output-port . tm2cd6) (open-file-input/output-port . tm2cd5) (open-file-input-port . tm2cd4) (open-bytevector-output-port . tm2cd3) (open-bytevector-input-port . tm2cd2) (native-transcoder . tm2cd1) (native-eol-style . tm2cd0) (make-transcoder . tm2ccf) (latin-1-codec . tm2cce) (make-i/o-write-error . tm2ccd) (make-i/o-read-error . tm2ccc) (make-i/o-port-error . tm2ccb) (make-i/o-invalid-position-error . tm2cca) (make-i/o-filename-error . tm2cc9) (make-i/o-file-protection-error . tm2cc8) (make-i/o-file-is-read-only-error . tm2cc7) (make-i/o-file-does-not-exist-error . tm2cc6) (make-i/o-file-already-exists-error . tm2cc5) (make-i/o-error . tm2cc4) (make-i/o-encoding-error . tm2cc3) (make-i/o-decoding-error . tm2cc2) (make-custom-textual-output-port . tm2cc1) (make-custom-textual-input/output-port . tm2cc0) (make-custom-textual-input-port . tm2cbf) (make-custom-binary-output-port . tm2cbe) (make-custom-binary-input/output-port . tm2cbd) (make-custom-binary-input-port . tm2cbc) (make-bytevector . tm2cbb) (lookahead-u8 . tm2cba) (lookahead-char . tm2cb9) (i/o-write-error? . tm2cb8) (i/o-read-error? . tm2cb7) (i/o-port-error? . tm2cb6) (i/o-invalid-position-error? . tm2cb5) (i/o-filename-error? . tm2cb4) (i/o-file-protection-error? . tm2cb3) (i/o-file-is-read-only-error? . tm2cb2) (i/o-file-does-not-exist-error? . tm2cb1) (i/o-file-already-exists-error? . tm2cb0) (i/o-error? . tm2caf) (i/o-error-position . tm2cae) (i/o-error-port . tm2cad) (i/o-error-filename . tm2cac) (i/o-encoding-error? . tm2cab) (i/o-encoding-error-char . tm2caa) (i/o-decoding-error? . tm2ca9) (get-u8 . tm2ca8) (get-string-n! . tm2ca7) (get-string-n . tm2ca6) (get-string-all . tm2ca5) (get-line . tm2ca4) (get-datum . tm2ca3) (get-char . tm2ca2) (get-bytevector-some . tm2ca1) (get-bytevector-n! . tm2ca0) (get-bytevector-n . tm2c9f) (get-bytevector-all . tm2c9e) (flush-output-port . tm2c9d) (close-port . tm2c9c) (exit . tm2c94) (command-line . tm2926) (string-fill! . tm2c93) (string-set! . tm2c92) (set-cdr! . tm2c91) (set-car! . tm2c90) (remove . tm2c8f) (remv . tm2c8e) (remp . tm2c8d) (remq . tm2c8c) (partition . tm2c8b) (memv . tm2c8a) (memq . tm2c89) (memp . tm2c88) (member . tm2c87) (exists . tm2c86) (for-all . tm2c85) (fold-right . tm2c84) (fold-left . tm2c83) (find . tm2c82) (filter . tm2c81) (cons* . tm2c80) (assv . tm2c7f) (assq . tm2c7e) (assp . tm2c7d) (assoc . tm2c7c) (call-with-string-output-port . tm2c7b) (call-with-port . tm2c7a) (call-with-bytevector-output-port . tm2c79) (bytevector->string . tm2c78) (buffer-mode? . tm2c77) (binary-port? . tm2c76) (with-exception-handler . tm2c75) (raise-continuable . tm2c74) (raise . tm2c73) (eval . tme4d) (environment . tme45) (make-enumeration . tm2c72) (enum-set=? . tm2c71) (enum-set-universe . tm2c70) (enum-set-union . tm2c6f) (enum-set-subset? . tm2c6e) (enum-set-projection . tm2c6d) (enum-set-member? . tm2c6c) (enum-set-intersection . tm2c6b) (enum-set-indexer . tm2c6a) (enum-set-difference . tm2c69) (enum-set-constructor . tm2c68) (enum-set-complement . tm2c67) (enum-set->list . tm2c66) (who-condition? . tm2c65) (warning? . tm2c64) (violation? . tm2c63) (undefined-violation? . tm2c62) (syntax-violation? . tm2c61) (syntax-violation-subform . tm2c60) (syntax-violation-form . tm2c5f) (syntax-violation . tme6d) (simple-conditions . tm2c5e) (serious-condition? . tm2c5d) (non-continuable-violation? . tm2c5c) (message-condition? . tm2c5b) (make-who-condition . tm2c5a) (make-warning . tm2c59) (make-violation . tm2c58) (make-undefined-violation . tm2c57) (make-syntax-violation . tm2c56) (make-serious-condition . tm2c55) (make-non-continuable-violation . tm2c54) (make-message-condition . tm2c53) (make-lexical-violation . tm2c52) (make-irritants-condition . tm2c51) (make-implementation-restriction-violation . tm2c50) (make-error . tm2c4f) (make-assertion-violation . tm2c4e) (lexical-violation? . tm2c4d) (irritants-condition? . tm2c4c) (implementation-restriction-violation? . tm2c4b) (error? . tm2c4a) (condition-who . tm2c49) (condition-predicate . tm2c48) (condition-message . tm2c47) (condition-irritants . tm2c46) (condition-accessor . tm2c45) (condition . tm2c44) (assertion-violation? . tm2c43) (condition? . tm2c42) (utf32->string . tm2c41) (utf16->string . tm2c40) (utf8->string . tm2c3f) (uint-list->bytevector . tm2c3e) (u8-list->bytevector . tm2c3d) (string->utf8 . tm2c3c) (string->utf32 . tm2c3b) (string->utf16 . tm2c3a) (sint-list->bytevector . tm2c39) (native-endianness . tm2c38) (bytevector? . tm2c37) (bytevector=? . tm2c36) (bytevector-uint-set! . tm2c35) (bytevector-uint-ref . tm2c34) (bytevector-u8-set! . tm2c33) (bytevector-u8-ref . tm2c32) (bytevector-u64-set! . tm2c31) (bytevector-u64-ref . tm2c30) (bytevector-u64-native-set! . tm2c2f) (bytevector-u64-native-ref . tm2c2e) (bytevector-u32-set! . tm2c2d) (bytevector-u32-ref . tm2c2c) (bytevector-u32-native-set! . tm2c2b) (bytevector-u32-native-ref . tm2c2a) (bytevector-u16-set! . tm2c29) (bytevector-u16-ref . tm2c28) (bytevector-u16-native-set! . tm2c27) (bytevector-u16-native-ref . tm2c26) (bytevector-sint-set! . tm2c25) (bytevector-sint-ref . tm2c24) (bytevector-s8-set! . tm2c23) (bytevector-s8-ref . tm2c22) (bytevector-s64-set! . tm2c21) (bytevector-s64-ref . tm2c20) (bytevector-s64-native-set! . tm2c1f) (bytevector-s64-native-ref . tm2c1e) (bytevector-s32-set! . tm2c1d) (bytevector-s32-ref . tm2c1c) (bytevector-s32-native-set! . tm2c1b) (bytevector-s32-native-ref . tm2c1a) (bytevector-s16-set! . tm2c19) (bytevector-s16-ref . tm2c18) (bytevector-s16-native-set! . tm2c17) (bytevector-s16-native-ref . tm2c16) (bytevector-length . tm2c15) (bytevector-ieee-single-ref . tm2c14) (bytevector-ieee-single-set! . tm2c13) (bytevector-ieee-single-native-set! . tm2c12) (bytevector-ieee-single-native-ref . tm2c11) (bytevector-ieee-double-set! . tm2c10) (bytevector-ieee-double-ref . tm2c0f) (bytevector-ieee-double-native-set! . tm2c0e) (bytevector-ieee-double-native-ref . tm2c0d) (bytevector-fill! . tm2c0c) (bytevector-copy! . tm2c0b) (bytevector-copy . tm2c0a) (bytevector->uint-list . tm2c09) (bytevector->u8-list . tm2c08) (bytevector->sint-list . tm2c07) (no-nans-violation? . tm2c06) (no-infinities-violation? . tm2c05) (make-no-nans-violation . tm2c04) (make-no-infinities-violation . tm2c03) (real->flonum . tm2c02) (flzero? . tm2c01) (fltruncate . tm2c00) (fltan . tm2bff) (flsqrt . tm2bfe) (flsin . tm2bfd) (flround . tm2bfc) (flpositive? . tm2bfb) (flonum? . tm2bfa) (flodd? . tm2bf9) (flnumerator . tm2bf8) (flnegative? . tm2bf7) (flnan? . tm2bf6) (flmod0 . tm2bf5) (flmod . tm2bf4) (flmin . tm2bf3) (flmax . tm2bf2) (fllog . tm2bf1) (flinteger? . tm2bf0) (flinfinite? . tm2bef) (flfloor . tm2bee) (flfinite? . tm2bed) (flexpt . tm2bec) (flexp . tm2beb) (fleven? . tm2bea) (fldiv0-and-mod0 . tm2be9) (fldiv0 . tm2be8) (fldiv-and-mod . tm2be7) (fldiv . tm2be6) (fldenominator . tm2be5) (flcos . tm2be4) (flceiling . tm2be3) (flatan . tm2be2) (flasin . tm2be1) (flacos . tm2be0) (flabs . tm2bdf) (fl>? . tm2bde) (fl>=? . tm2bdd) (fl=? . tm2bdc) (fl<? . tm2bdb) (fl<=? . tm2bda) (fl/ . tm2bd9) (fl- . tm2bd8) (fl+ . tm2bd7) (fl* . tm2bd6) (fixnum->flonum . tm2bd5) (fxzero? . tm2bd4) (fxxor . tm2bd3) (fxrotate-bit-field . tm2bd2) (fxreverse-bit-field . tm2bd1) (fxpositive? . tm2bd0) (fxodd? . tm2bcf) (fxnot . tm2bce) (fxnegative? . tm2bcd) (fxmod0 . tm2bcc) (fxmod . tm2bcb) (fxmin . tm2bca) (fxmax . tm2bc9) (fxlength . tm2bc8) (fxior . tm2bc7) (fxif . tm2bc6) (fxfirst-bit-set . tm2bc5) (fxeven? . tm2bc4) (fxdiv0-and-mod0 . tm2bc3) (fxdiv0 . tm2bc2) (fxdiv-and-mod . tm2bc1) (fxdiv . tm2bc0) (fxcopy-bit-field . tm2bbf) (fxcopy-bit . tm2bbe) (fxbit-set? . tm2bbd) (fxbit-field . tm2bbc) (fxbit-count . tm2bbb) (fxarithmetic-shift-right . tm2bba) (fxarithmetic-shift-left . tm2bb9) (fxarithmetic-shift . tm2bb8) (fxand . tm2bb7) (fx>? . tm2bb6) (fx>=? . tm2bb5) (fx=? . tm2bb4) (fx<? . tm2bb3) (fx<=? . tm2bb2) (fx-/carry . tm2bb1) (fx- . tm2bb0) (fx+/carry . tm2baf) (fx+ . tm2bae) (fx*/carry . tm2bad) (fx* . tm2bac) (greatest-fixnum . tm2bab) (least-fixnum . tm2baa) (fixnum-width . tm2ba9) (fixnum? . tm2ba8) (bitwise-rotate-bit-field . tm2ba7) (bitwise-reverse-bit-field . tm2ba6) (bitwise-length . tm2ba5) (bitwise-if . tm2ba4) (bitwise-first-bit-set . tm2ba3) (bitwise-copy-bit-field . tm2ba2) (bitwise-copy-bit . tm2ba1) (bitwise-bit-set? . tm2ba0) (bitwise-bit-field . tm2b9f) (bitwise-bit-count . tm2b9e) (bitwise-xor . tm2b9d) (bitwise-ior . tm2b9c) (bitwise-and . tm2b9b) (bitwise-not . tm2b9a) (bitwise-arithmetic-shift-right . tm2b99) (bitwise-arithmetic-shift-left . tm2b98) (bitwise-arithmetic-shift . tm2b97) (zero? . tm2b96) (vector? . tm2b95) (vector-set! . tm2b94) (vector-ref . tm2b93) (vector-map . tm2b92) (vector-length . tm2b91) (vector-for-each . tm2b90) (vector-fill! . tm2b8f) (vector->list . tm2b8e) (vector . tm2b8d) (values . tm2b8c) (truncate . tm2b8b) (tan . tm2b8a) (symbol? . tm2b89) (symbol=? . tm2b88) (symbol->string . tm2b87) (substring . tm2b86) (string? . tm2b85) (string>? . tm2b84) (string>=? . tm2b83) (string=? . tm2b82) (string<? . tm2b81) (string<=? . tm2b80) (string-ref . tm2b7f) (string-length . tm2b7e) (string-for-each . tm2b7d) (string-copy . tm2b7c) (string-append . tm2b7b) (string->symbol . tm2b7a) (string->number . tm2b79) (string->list . tm2b78) (string . tm2b77) (sqrt . tm2b76) (sin . tm2b75) (round . tm2b74) (reverse . tm2b73) (real? . tm2b72) (real-valued? . tm2b71) (real-part . tm2b70) (rationalize . tm2b6f) (rational? . tm2b6e) (rational-valued? . tm2b6d) (procedure? . tm2b6c) (positive? . tm2b6b) (pair? . tm2b6a) (odd? . tm2b69) (numerator . tm2b68) (number? . tm2b67) (number->string . tm2b66) (null? . tm2b65) (not . tm2b64) (negative? . tm2b63) (nan? . tm2b62) (min . tm2b61) (max . tm2b60) (map . tm2b5f) (make-vector . tm2b5e) (make-string . tm2b5d) (make-rectangular . tm2b5c) (make-polar . tm2b5b) (magnitude . tm2b5a) (log . tm2b59) (list? . tm2b58) (list-tail . tm2b57) (list-ref . tm2b56) (list->vector . tm2b55) (list->string . tm2b54) (list . tm2b53) (length . tm2b52) (lcm . tm2b51) (integer? . tm2b50) (integer-valued? . tm2b4f) (integer->char . tm2b4e) (infinite? . tm2b4d) (inexact? . tm2b4c) (inexact . tm2b4b) (imag-part . tm2b4a) (gcd . tm2b49) (for-each . tm2b48) (floor . tm2b47) (finite? . tm2b46) (expt . tm2b45) (exp . tm2b44) (exact? . tm2b43) (exact-integer-sqrt . tm2b42) (exact . tm2b41) (even? . tm2b40) (error . tm2b3f) (eqv? . tm2b3e) (equal? . tm2b3d) (eq? . tm2b3c) (dynamic-wind . tm2b3b) (div0-and-mod0 . tm2b3a) (mod0 . tm2b39) (div0 . tm2b38) (div-and-mod . tm2b37) (mod . tm2b36) (div . tm2b35) (denominator . tm2b34) (cos . tm2b33) (cons . tm2b32) (complex? . tm2b31) (char? . tm2b30) (char>? . tm2b2f) (char>=? . tm2b2e) (char=? . tm2b2d) (char<? . tm2b2c) (char<=? . tm2b2b) (char->integer . tm2b2a) (ceiling . tm2b29) (call-with-values . tm2b28) (call/cc . tm2b27) (call-with-current-continuation . tm2b26) (cddddr . tm2b25) (cdddar . tm2b24) (cddadr . tm2b23) (cddaar . tm2b22) (cdaddr . tm2b21) (cdadar . tm2b20) (cdaadr . tm2b1f) (cdaaar . tm2b1e) (cadddr . tm2b1d) (caddar . tm2b1c) (cadadr . tm2b1b) (cadaar . tm2b1a) (caaddr . tm2b19) (caadar . tm2b18) (caaadr . tm2b17) (caaaar . tm2b16) (cdddr . tm2b15) (cddar . tm2b14) (cdadr . tm2b13) (cdaar . tm2b12) (caddr . tm2b11) (cadar . tm2b10) (caadr . tm2b0f) (caaar . tm2b0e) (cddr . tm2b0d) (cdar . tm2b0c) (cadr . tm2b0b) (caar . tm2b0a) (cdr . tm2b09) (car . tm2b08) (boolean? . tm2b07) (boolean=? . tm2b06) (atan . tm2b05) (assertion-violation . tm2b04) (asin . tm2b03) (apply . tm2b02) (append . tm2b01) (angle . tm2b00) (acos . tm2aff) (abs . tm2afe) (/ . tm2afd) (* . tm2afc) (- . tm2afb) (+ . tm2afa) (>= . tm2af9) (> . tm2af8) (= . tm2af7) (<= . tm2af6) (< . tm2af5) (library . tm2af4) (&no-nans . tm2af3) (&no-infinities . tm2af2) (&i/o-encoding . tm2af1) (&i/o-decoding . tm2af0) (&i/o-port . tm2aef) (&i/o-file-does-not-exist . tm2aee) (&i/o-file-already-exists . tm2aed) (&i/o-file-is-read-only . tm2aec) (&i/o-file-protection . tm2aeb) (&i/o-filename . tm2aea) (&i/o-invalid-position . tm2ae9) (&i/o-write . tm2ae8) (&i/o-read . tm2ae7) (&i/o . tm2ae6) (&undefined . tm2ae5) (&syntax . tm2ae4) (&lexical . tm2ae3) (&implementation-restriction . tm2ae2) (&non-continuable . tm2ae1) (&who . tm2ae0) (&irritants . tm2adf) (&assertion . tm2ade) (&violation . tm2add) (&error . tm2adc) (&serious . tm2adb) (&warning . tm2ada) (&message . tm2ad9) (&condition . tm2ad8) (define-condition-type . tm2ad7) (define-enumeration . tm2ad6) (define-record-type . tm2ad5) (parent-rtd . tm2ad4) (nongenerative . tm2ad3) (opaque . tm2ad2) (sealed . tm2ad1) (protocol . tm2ad0) (parent . tm2acf) (immutable . tm2ace) (mutable . tm2acd) (fields . tm2acc) (error-handling-mode . tm2acb) (file-options . tm2aca) (buffer-mode . tm2ac9) (eol-style . tm2ac8) (guard . tm2ac7) (unsyntax-splicing . tm2ac4) (unsyntax . tm2ac3) (unquote-splicing . tm2ac2) (unquote . tm2ac1) (_ . tm2ac0) (else . tm2abf) (=> . tm2abe) (... . tm2abd) (assert . tm2abc) (endianness . tm2abb) (time . tm2ab9) (do . tm2ab8) (cond . tm2ab7) (let* . tm2ab6) (let*-values . tm2ab5) (let-values . tm2ab4) (identifier-syntax . tm2ab3) (with-syntax . tm2ab2) (quasisyntax . tm2ab1) (quasiquote . tm2ab0) (syntax-rules . tm2aaf) (include . tm2aae) (record-constructor-descriptor . tm2aac) (record-type-descriptor . tm2aab) (case . tm2aaa) (unless . tm2aa8) (when . tm2aa7) (or . tm2aa6) (and . tm2aa5) (if . tm2aa4) (let . tm2aa3) (letrec* . tm2aa2) (letrec . tm2aa1) (case-lambda . tm2a9f) (lambda . tm2a9e) (syntax . tm2a9d) (syntax-case . tm2a9c) (quote . tm2a9b) (letrec-syntax . tm2a99) (let-syntax . tm2a98) (set! . tm2a97) (import . tm2a96) (begin . tm2a95) (define-syntax . tm2a93) (define . tm2a92)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e49 '(psyntax null-environment-5) '() '() '() '() '((make-promise . tm2c95) (unquote-splicing . tm2ac2) (unquote . tm2ac1) (_ . tm2ac0) (else . tm2abf) (=> . tm2abe) (... . tm2abd) (delay . tm2aba) (do . tm2ab8) (cond . tm2ab7) (let* . tm2ab6) (quasiquote . tm2ab0) (syntax-rules . tm2aaf) (case . tm2aaa) (or . tm2aa6) (and . tm2aa5) (if . tm2aa4) (let . tm2aa3) (letrec . tm2aa1) (lambda . tm2a9e) (quote . tm2a9b) (letrec-syntax . tm2a99) (let-syntax . tm2a98) (set! . tm2a97) (begin . tm2a95) (define-syntax . tm2a93) (define . tm2a92)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e4a '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . tm2d46) (string-ci>=? . tm2d45) (string-ci=? . tm2d44) (string-ci<? . tm2d43) (string-ci<=? . tm2d42) (char-whitespace? . tm2d41) (char-upper-case? . tm2d40) (char-numeric? . tm2d3e) (char-lower-case? . tm2d3d) (char-upcase . tm2d3b) (char-downcase . tm2d38) (char-ci>? . tm2d37) (char-ci>=? . tm2d36) (char-ci=? . tm2d35) (char-ci<? . tm2d34) (char-ci<=? . tm2d33) (char-alphabetic? . tm2d32) (call-with-output-file . tm2d06) (call-with-input-file . tm2d05) (write-char . tm2d04) (write . tm2d03) (with-output-to-file . tm2d02) (with-input-from-file . tm2d01) (read-char . tm2d00) (read . tm2cff) (peek-char . tm2cfe) (open-output-file . tm2cfd) (open-input-file . tm2cfc) (newline . tm2cfb) (display . tm2cfa) (close-output-port . tm2cf9) (close-input-port . tm2cf8) (eof-object . tm2cf6) (current-output-port . tm2cf4) (current-input-port . tm2cf3) (output-port? . tm2cf2) (input-port? . tm2cf1) (scheme-report-environment . tme49) (quotient . tm2c9b) (null-environment . tme47) (remainder . tm2c9a) (modulo . tm2c99) (inexact->exact . tm2c98) (force . tm2c97) (exact->inexact . tm2c96) (make-promise . tm2c95) (string-fill! . tm2c93) (string-set! . tm2c92) (set-cdr! . tm2c91) (set-car! . tm2c90) (memv . tm2c8a) (memq . tm2c89) (member . tm2c87) (assv . tm2c7f) (assq . tm2c7e) (assoc . tm2c7c) (eval . tme4d) (zero? . tm2b96) (vector? . tm2b95) (vector-set! . tm2b94) (vector-ref . tm2b93) (vector-length . tm2b91) (vector-fill! . tm2b8f) (vector->list . tm2b8e) (vector . tm2b8d) (values . tm2b8c) (truncate . tm2b8b) (tan . tm2b8a) (symbol? . tm2b89) (symbol->string . tm2b87) (substring . tm2b86) (string? . tm2b85) (string>? . tm2b84) (string>=? . tm2b83) (string=? . tm2b82) (string<? . tm2b81) (string<=? . tm2b80) (string-ref . tm2b7f) (string-length . tm2b7e) (string-copy . tm2b7c) (string-append . tm2b7b) (string->symbol . tm2b7a) (string->number . tm2b79) (string->list . tm2b78) (string . tm2b77) (sqrt . tm2b76) (sin . tm2b75) (round . tm2b74) (reverse . tm2b73) (real? . tm2b72) (real-part . tm2b70) (rationalize . tm2b6f) (rational? . tm2b6e) (procedure? . tm2b6c) (positive? . tm2b6b) (pair? . tm2b6a) (odd? . tm2b69) (numerator . tm2b68) (number? . tm2b67) (number->string . tm2b66) (not . tm2b64) (negative? . tm2b63) (min . tm2b61) (max . tm2b60) (map . tm2b5f) (make-vector . tm2b5e) (make-string . tm2b5d) (make-rectangular . tm2b5c) (make-polar . tm2b5b) (magnitude . tm2b5a) (log . tm2b59) (list? . tm2b58) (list-tail . tm2b57) (list-ref . tm2b56) (list->vector . tm2b55) (list->string . tm2b54) (list . tm2b53) (length . tm2b52) (lcm . tm2b51) (integer? . tm2b50) (integer->char . tm2b4e) (inexact? . tm2b4c) (imag-part . tm2b4a) (gcd . tm2b49) (for-each . tm2b48) (floor . tm2b47) (expt . tm2b45) (exp . tm2b44) (exact? . tm2b43) (even? . tm2b40) (eqv? . tm2b3e) (equal? . tm2b3d) (eq? . tm2b3c) (dynamic-wind . tm2b3b) (denominator . tm2b34) (cos . tm2b33) (cons . tm2b32) (complex? . tm2b31) (char? . tm2b30) (char>? . tm2b2f) (char>=? . tm2b2e) (char=? . tm2b2d) (char<? . tm2b2c) (char<=? . tm2b2b) (char->integer . tm2b2a) (ceiling . tm2b29) (call-with-values . tm2b28) (call-with-current-continuation . tm2b26) (cddddr . tm2b25) (cdddar . tm2b24) (cddadr . tm2b23) (cddaar . tm2b22) (cdaddr . tm2b21) (cdadar . tm2b20) (cdaadr . tm2b1f) (cdaaar . tm2b1e) (cadddr . tm2b1d) (caddar . tm2b1c) (cadadr . tm2b1b) (cadaar . tm2b1a) (caaddr . tm2b19) (caadar . tm2b18) (caaadr . tm2b17) (caaaar . tm2b16) (cdddr . tm2b15) (cddar . tm2b14) (cdadr . tm2b13) (cdaar . tm2b12) (caddr . tm2b11) (cadar . tm2b10) (caadr . tm2b0f) (caaar . tm2b0e) (cddr . tm2b0d) (cdar . tm2b0c) (cadr . tm2b0b) (caar . tm2b0a) (cdr . tm2b09) (car . tm2b08) (boolean? . tm2b07) (atan . tm2b05) (asin . tm2b03) (apply . tm2b02) (append . tm2b01) (angle . tm2b00) (acos . tm2aff) (abs . tm2afe) (/ . tm2afd) (* . tm2afc) (- . tm2afb) (+ . tm2afa) (>= . tm2af9) (> . tm2af8) (= . tm2af7) (<= . tm2af6) (< . tm2af5) (unquote-splicing . tm2ac2) (unquote . tm2ac1) (else . tm2abf) (=> . tm2abe) (... . tm2abd) (delay . tm2aba) (do . tm2ab8) (cond . tm2ab7) (let* . tm2ab6) (quasiquote . tm2ab0) (syntax-rules . tm2aaf) (case . tm2aaa) (or . tm2aa6) (and . tm2aa5) (if . tm2aa4) (let . tm2aa3) (letrec . tm2aa1) (lambda . tm2a9e) (quote . tm2a9b) (letrec-syntax . tm2a99) (let-syntax . tm2a98) (set! . tm2a97) (begin . tm2a95) (define-syntax . tm2a93) (define . tm2a92)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e4b '(psyntax modules) '() '() '() '() '((module . tm2a94)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e4c '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e4d '(rnrs) '(6) '() '() '() '((regexp? . tm2e08) (string-upcase . tm2d4e) (string-titlecase . tm2d4d) (string-normalize-nfkd . tm2d4c) (string-normalize-nfkc . tm2d4b) (string-normalize-nfd . tm2d4a) (string-normalize-nfc . tm2d49) (string-foldcase . tm2d48) (string-downcase . tm2d47) (string-ci>? . tm2d46) (string-ci>=? . tm2d45) (string-ci=? . tm2d44) (string-ci<? . tm2d43) (string-ci<=? . tm2d42) (char-whitespace? . tm2d41) (char-upper-case? . tm2d40) (char-title-case? . tm2d3f) (char-numeric? . tm2d3e) (char-lower-case? . tm2d3d) (char-general-category . tm2d3c) (char-upcase . tm2d3b) (char-titlecase . tm2d3a) (char-foldcase . tm2d39) (char-downcase . tm2d38) (char-ci>? . tm2d37) (char-ci>=? . tm2d36) (char-ci=? . tm2d35) (char-ci<? . tm2d34) (char-ci<=? . tm2d33) (char-alphabetic? . tm2d32) (make-variable-transformer . tmbb8) (identifier? . tme6f) (generate-temporaries . tme5b) (free-identifier=? . tme5d) (syntax->datum . tme73) (datum->syntax . tme71) (bound-identifier=? . tme5f) (record-type-descriptor? . tm2d31) (record-predicate . tm2d30) (record-mutator . tm2d2f) (record-constructor . tm2d2e) (record-accessor . tm2d2d) (make-record-type-descriptor . tm2d2c) (make-record-constructor-descriptor . tm2d2b) (record? . tm2d2a) (record-type-uid . tm2d29) (record-type-sealed? . tm2d28) (record-type-parent . tm2d27) (record-type-opaque? . tm2d26) (record-type-name . tm2d25) (record-type-generative? . tm2d24) (record-type-field-names . tm2d23) (record-rtd . tm2d22) (record-field-mutable? . tm2d21) (delete-file . tm2d20) (file-exists? . tm2d1f) (vector-sort! . tm2d1e) (vector-sort . tm2d1d) (list-sort . tm2d1c) (symbol-hash . tm2d1b) (string-ci-hash . tm2d1a) (string-hash . tm2d19) (equal-hash . tm2d18) (hashtable-equivalence-function . tm2d17) (make-hashtable . tm2d16) (hashtable-hash-function . tm2d15) (make-eqv-hashtable . tm2d14) (make-eq-hashtable . tm2d13) (hashtable? . tm2d12) (hashtable-update! . tm2d11) (hashtable-size . tm2d10) (hashtable-set! . tm2d0f) (hashtable-ref . tm2d0e) (hashtable-mutable? . tm2d0d) (hashtable-keys . tm2d0c) (hashtable-entries . tm2d0b) (hashtable-delete! . tm2d0a) (hashtable-copy . tm2d09) (hashtable-contains? . tm2d08) (hashtable-clear! . tm2d07) (call-with-output-file . tm2d06) (call-with-input-file . tm2d05) (write-char . tm2d04) (write . tm2d03) (with-output-to-file . tm2d02) (with-input-from-file . tm2d01) (read-char . tm2d00) (read . tm2cff) (peek-char . tm2cfe) (open-output-file . tm2cfd) (open-input-file . tm2cfc) (newline . tm2cfb) (display . tm2cfa) (close-output-port . tm2cf9) (close-input-port . tm2cf8) (eof-object? . tm2cf7) (eof-object . tm2cf6) (current-error-port . tm2cf5) (current-output-port . tm2cf4) (current-input-port . tm2cf3) (output-port? . tm2cf2) (input-port? . tm2cf1) (utf-8-codec . tm2cf0) (utf-16-codec . tm2cef) (transcoder-error-handling-mode . tm2cee) (transcoder-eol-style . tm2ced) (transcoder-codec . tm2cec) (transcoded-port . tm2ceb) (textual-port? . tm2cea) (string->bytevector . tm2ce9) (standard-output-port . tm2ce8) (standard-input-port . tm2ce7) (standard-error-port . tm2ce6) (set-port-position! . tm2ce5) (put-u8 . tm2ce4) (put-string . tm2ce3) (put-datum . tm2ce2) (put-char . tm2ce1) (put-bytevector . tm2ce0) (port? . tm2cdf) (port-transcoder . tm2cde) (port-position . tm2cdd) (port-has-set-port-position!? . tm2cdc) (port-has-port-position? . tm2cdb) (port-eof? . tm2cda) (output-port-buffer-mode . tm2cd9) (open-string-output-port . tm2cd8) (open-string-input-port . tm2cd7) (open-file-output-port . tm2cd6) (open-file-input/output-port . tm2cd5) (open-file-input-port . tm2cd4) (open-bytevector-output-port . tm2cd3) (open-bytevector-input-port . tm2cd2) (native-transcoder . tm2cd1) (native-eol-style . tm2cd0) (make-transcoder . tm2ccf) (latin-1-codec . tm2cce) (make-i/o-write-error . tm2ccd) (make-i/o-read-error . tm2ccc) (make-i/o-port-error . tm2ccb) (make-i/o-invalid-position-error . tm2cca) (make-i/o-filename-error . tm2cc9) (make-i/o-file-protection-error . tm2cc8) (make-i/o-file-is-read-only-error . tm2cc7) (make-i/o-file-does-not-exist-error . tm2cc6) (make-i/o-file-already-exists-error . tm2cc5) (make-i/o-error . tm2cc4) (make-i/o-encoding-error . tm2cc3) (make-i/o-decoding-error . tm2cc2) (make-custom-textual-output-port . tm2cc1) (make-custom-textual-input/output-port . tm2cc0) (make-custom-textual-input-port . tm2cbf) (make-custom-binary-output-port . tm2cbe) (make-custom-binary-input/output-port . tm2cbd) (make-custom-binary-input-port . tm2cbc) (make-bytevector . tm2cbb) (lookahead-u8 . tm2cba) (lookahead-char . tm2cb9) (i/o-write-error? . tm2cb8) (i/o-read-error? . tm2cb7) (i/o-port-error? . tm2cb6) (i/o-invalid-position-error? . tm2cb5) (i/o-filename-error? . tm2cb4) (i/o-file-protection-error? . tm2cb3) (i/o-file-is-read-only-error? . tm2cb2) (i/o-file-does-not-exist-error? . tm2cb1) (i/o-file-already-exists-error? . tm2cb0) (i/o-error? . tm2caf) (i/o-error-position . tm2cae) (i/o-error-port . tm2cad) (i/o-error-filename . tm2cac) (i/o-encoding-error? . tm2cab) (i/o-encoding-error-char . tm2caa) (i/o-decoding-error? . tm2ca9) (get-u8 . tm2ca8) (get-string-n! . tm2ca7) (get-string-n . tm2ca6) (get-string-all . tm2ca5) (get-line . tm2ca4) (get-datum . tm2ca3) (get-char . tm2ca2) (get-bytevector-some . tm2ca1) (get-bytevector-n! . tm2ca0) (get-bytevector-n . tm2c9f) (get-bytevector-all . tm2c9e) (flush-output-port . tm2c9d) (close-port . tm2c9c) (exit . tm2c94) (command-line . tm2926) (remove . tm2c8f) (remv . tm2c8e) (remp . tm2c8d) (remq . tm2c8c) (partition . tm2c8b) (memv . tm2c8a) (memq . tm2c89) (memp . tm2c88) (member . tm2c87) (exists . tm2c86) (for-all . tm2c85) (fold-right . tm2c84) (fold-left . tm2c83) (find . tm2c82) (filter . tm2c81) (cons* . tm2c80) (assv . tm2c7f) (assq . tm2c7e) (assp . tm2c7d) (assoc . tm2c7c) (call-with-string-output-port . tm2c7b) (call-with-port . tm2c7a) (call-with-bytevector-output-port . tm2c79) (bytevector->string . tm2c78) (buffer-mode? . tm2c77) (binary-port? . tm2c76) (with-exception-handler . tm2c75) (raise-continuable . tm2c74) (raise . tm2c73) (make-enumeration . tm2c72) (enum-set=? . tm2c71) (enum-set-universe . tm2c70) (enum-set-union . tm2c6f) (enum-set-subset? . tm2c6e) (enum-set-projection . tm2c6d) (enum-set-member? . tm2c6c) (enum-set-intersection . tm2c6b) (enum-set-indexer . tm2c6a) (enum-set-difference . tm2c69) (enum-set-constructor . tm2c68) (enum-set-complement . tm2c67) (enum-set->list . tm2c66) (who-condition? . tm2c65) (warning? . tm2c64) (violation? . tm2c63) (undefined-violation? . tm2c62) (syntax-violation? . tm2c61) (syntax-violation-subform . tm2c60) (syntax-violation-form . tm2c5f) (syntax-violation . tme6d) (simple-conditions . tm2c5e) (serious-condition? . tm2c5d) (non-continuable-violation? . tm2c5c) (message-condition? . tm2c5b) (make-who-condition . tm2c5a) (make-warning . tm2c59) (make-violation . tm2c58) (make-undefined-violation . tm2c57) (make-syntax-violation . tm2c56) (make-serious-condition . tm2c55) (make-non-continuable-violation . tm2c54) (make-message-condition . tm2c53) (make-lexical-violation . tm2c52) (make-irritants-condition . tm2c51) (make-implementation-restriction-violation . tm2c50) (make-error . tm2c4f) (make-assertion-violation . tm2c4e) (lexical-violation? . tm2c4d) (irritants-condition? . tm2c4c) (implementation-restriction-violation? . tm2c4b) (error? . tm2c4a) (condition-who . tm2c49) (condition-predicate . tm2c48) (condition-message . tm2c47) (condition-irritants . tm2c46) (condition-accessor . tm2c45) (condition . tm2c44) (assertion-violation? . tm2c43) (condition? . tm2c42) (utf32->string . tm2c41) (utf16->string . tm2c40) (utf8->string . tm2c3f) (uint-list->bytevector . tm2c3e) (u8-list->bytevector . tm2c3d) (string->utf8 . tm2c3c) (string->utf32 . tm2c3b) (string->utf16 . tm2c3a) (sint-list->bytevector . tm2c39) (native-endianness . tm2c38) (bytevector? . tm2c37) (bytevector=? . tm2c36) (bytevector-uint-set! . tm2c35) (bytevector-uint-ref . tm2c34) (bytevector-u8-set! . tm2c33) (bytevector-u8-ref . tm2c32) (bytevector-u64-set! . tm2c31) (bytevector-u64-ref . tm2c30) (bytevector-u64-native-set! . tm2c2f) (bytevector-u64-native-ref . tm2c2e) (bytevector-u32-set! . tm2c2d) (bytevector-u32-ref . tm2c2c) (bytevector-u32-native-set! . tm2c2b) (bytevector-u32-native-ref . tm2c2a) (bytevector-u16-set! . tm2c29) (bytevector-u16-ref . tm2c28) (bytevector-u16-native-set! . tm2c27) (bytevector-u16-native-ref . tm2c26) (bytevector-sint-set! . tm2c25) (bytevector-sint-ref . tm2c24) (bytevector-s8-set! . tm2c23) (bytevector-s8-ref . tm2c22) (bytevector-s64-set! . tm2c21) (bytevector-s64-ref . tm2c20) (bytevector-s64-native-set! . tm2c1f) (bytevector-s64-native-ref . tm2c1e) (bytevector-s32-set! . tm2c1d) (bytevector-s32-ref . tm2c1c) (bytevector-s32-native-set! . tm2c1b) (bytevector-s32-native-ref . tm2c1a) (bytevector-s16-set! . tm2c19) (bytevector-s16-ref . tm2c18) (bytevector-s16-native-set! . tm2c17) (bytevector-s16-native-ref . tm2c16) (bytevector-length . tm2c15) (bytevector-ieee-single-ref . tm2c14) (bytevector-ieee-single-set! . tm2c13) (bytevector-ieee-single-native-set! . tm2c12) (bytevector-ieee-single-native-ref . tm2c11) (bytevector-ieee-double-set! . tm2c10) (bytevector-ieee-double-ref . tm2c0f) (bytevector-ieee-double-native-set! . tm2c0e) (bytevector-ieee-double-native-ref . tm2c0d) (bytevector-fill! . tm2c0c) (bytevector-copy! . tm2c0b) (bytevector-copy . tm2c0a) (bytevector->uint-list . tm2c09) (bytevector->u8-list . tm2c08) (bytevector->sint-list . tm2c07) (no-nans-violation? . tm2c06) (no-infinities-violation? . tm2c05) (make-no-nans-violation . tm2c04) (make-no-infinities-violation . tm2c03) (real->flonum . tm2c02) (flzero? . tm2c01) (fltruncate . tm2c00) (fltan . tm2bff) (flsqrt . tm2bfe) (flsin . tm2bfd) (flround . tm2bfc) (flpositive? . tm2bfb) (flonum? . tm2bfa) (flodd? . tm2bf9) (flnumerator . tm2bf8) (flnegative? . tm2bf7) (flnan? . tm2bf6) (flmod0 . tm2bf5) (flmod . tm2bf4) (flmin . tm2bf3) (flmax . tm2bf2) (fllog . tm2bf1) (flinteger? . tm2bf0) (flinfinite? . tm2bef) (flfloor . tm2bee) (flfinite? . tm2bed) (flexpt . tm2bec) (flexp . tm2beb) (fleven? . tm2bea) (fldiv0-and-mod0 . tm2be9) (fldiv0 . tm2be8) (fldiv-and-mod . tm2be7) (fldiv . tm2be6) (fldenominator . tm2be5) (flcos . tm2be4) (flceiling . tm2be3) (flatan . tm2be2) (flasin . tm2be1) (flacos . tm2be0) (flabs . tm2bdf) (fl>? . tm2bde) (fl>=? . tm2bdd) (fl=? . tm2bdc) (fl<? . tm2bdb) (fl<=? . tm2bda) (fl/ . tm2bd9) (fl- . tm2bd8) (fl+ . tm2bd7) (fl* . tm2bd6) (fixnum->flonum . tm2bd5) (fxzero? . tm2bd4) (fxxor . tm2bd3) (fxrotate-bit-field . tm2bd2) (fxreverse-bit-field . tm2bd1) (fxpositive? . tm2bd0) (fxodd? . tm2bcf) (fxnot . tm2bce) (fxnegative? . tm2bcd) (fxmod0 . tm2bcc) (fxmod . tm2bcb) (fxmin . tm2bca) (fxmax . tm2bc9) (fxlength . tm2bc8) (fxior . tm2bc7) (fxif . tm2bc6) (fxfirst-bit-set . tm2bc5) (fxeven? . tm2bc4) (fxdiv0-and-mod0 . tm2bc3) (fxdiv0 . tm2bc2) (fxdiv-and-mod . tm2bc1) (fxdiv . tm2bc0) (fxcopy-bit-field . tm2bbf) (fxcopy-bit . tm2bbe) (fxbit-set? . tm2bbd) (fxbit-field . tm2bbc) (fxbit-count . tm2bbb) (fxarithmetic-shift-right . tm2bba) (fxarithmetic-shift-left . tm2bb9) (fxarithmetic-shift . tm2bb8) (fxand . tm2bb7) (fx>? . tm2bb6) (fx>=? . tm2bb5) (fx=? . tm2bb4) (fx<? . tm2bb3) (fx<=? . tm2bb2) (fx-/carry . tm2bb1) (fx- . tm2bb0) (fx+/carry . tm2baf) (fx+ . tm2bae) (fx*/carry . tm2bad) (fx* . tm2bac) (greatest-fixnum . tm2bab) (least-fixnum . tm2baa) (fixnum-width . tm2ba9) (fixnum? . tm2ba8) (bitwise-rotate-bit-field . tm2ba7) (bitwise-reverse-bit-field . tm2ba6) (bitwise-length . tm2ba5) (bitwise-if . tm2ba4) (bitwise-first-bit-set . tm2ba3) (bitwise-copy-bit-field . tm2ba2) (bitwise-copy-bit . tm2ba1) (bitwise-bit-set? . tm2ba0) (bitwise-bit-field . tm2b9f) (bitwise-bit-count . tm2b9e) (bitwise-xor . tm2b9d) (bitwise-ior . tm2b9c) (bitwise-and . tm2b9b) (bitwise-not . tm2b9a) (bitwise-arithmetic-shift-right . tm2b99) (bitwise-arithmetic-shift-left . tm2b98) (bitwise-arithmetic-shift . tm2b97) (zero? . tm2b96) (vector? . tm2b95) (vector-set! . tm2b94) (vector-ref . tm2b93) (vector-map . tm2b92) (vector-length . tm2b91) (vector-for-each . tm2b90) (vector-fill! . tm2b8f) (vector->list . tm2b8e) (vector . tm2b8d) (values . tm2b8c) (truncate . tm2b8b) (tan . tm2b8a) (symbol? . tm2b89) (symbol=? . tm2b88) (symbol->string . tm2b87) (substring . tm2b86) (string? . tm2b85) (string>? . tm2b84) (string>=? . tm2b83) (string=? . tm2b82) (string<? . tm2b81) (string<=? . tm2b80) (string-ref . tm2b7f) (string-length . tm2b7e) (string-for-each . tm2b7d) (string-copy . tm2b7c) (string-append . tm2b7b) (string->symbol . tm2b7a) (string->number . tm2b79) (string->list . tm2b78) (string . tm2b77) (sqrt . tm2b76) (sin . tm2b75) (round . tm2b74) (reverse . tm2b73) (real? . tm2b72) (real-valued? . tm2b71) (real-part . tm2b70) (rationalize . tm2b6f) (rational? . tm2b6e) (rational-valued? . tm2b6d) (procedure? . tm2b6c) (positive? . tm2b6b) (pair? . tm2b6a) (odd? . tm2b69) (numerator . tm2b68) (number? . tm2b67) (number->string . tm2b66) (null? . tm2b65) (not . tm2b64) (negative? . tm2b63) (nan? . tm2b62) (min . tm2b61) (max . tm2b60) (map . tm2b5f) (make-vector . tm2b5e) (make-string . tm2b5d) (make-rectangular . tm2b5c) (make-polar . tm2b5b) (magnitude . tm2b5a) (log . tm2b59) (list? . tm2b58) (list-tail . tm2b57) (list-ref . tm2b56) (list->vector . tm2b55) (list->string . tm2b54) (list . tm2b53) (length . tm2b52) (lcm . tm2b51) (integer? . tm2b50) (integer-valued? . tm2b4f) (integer->char . tm2b4e) (infinite? . tm2b4d) (inexact? . tm2b4c) (inexact . tm2b4b) (imag-part . tm2b4a) (gcd . tm2b49) (for-each . tm2b48) (floor . tm2b47) (finite? . tm2b46) (expt . tm2b45) (exp . tm2b44) (exact? . tm2b43) (exact-integer-sqrt . tm2b42) (exact . tm2b41) (even? . tm2b40) (error . tm2b3f) (eqv? . tm2b3e) (equal? . tm2b3d) (eq? . tm2b3c) (dynamic-wind . tm2b3b) (div0-and-mod0 . tm2b3a) (mod0 . tm2b39) (div0 . tm2b38) (div-and-mod . tm2b37) (mod . tm2b36) (div . tm2b35) (denominator . tm2b34) (cos . tm2b33) (cons . tm2b32) (complex? . tm2b31) (char? . tm2b30) (char>? . tm2b2f) (char>=? . tm2b2e) (char=? . tm2b2d) (char<? . tm2b2c) (char<=? . tm2b2b) (char->integer . tm2b2a) (ceiling . tm2b29) (call-with-values . tm2b28) (call/cc . tm2b27) (call-with-current-continuation . tm2b26) (cddddr . tm2b25) (cdddar . tm2b24) (cddadr . tm2b23) (cddaar . tm2b22) (cdaddr . tm2b21) (cdadar . tm2b20) (cdaadr . tm2b1f) (cdaaar . tm2b1e) (cadddr . tm2b1d) (caddar . tm2b1c) (cadadr . tm2b1b) (cadaar . tm2b1a) (caaddr . tm2b19) (caadar . tm2b18) (caaadr . tm2b17) (caaaar . tm2b16) (cdddr . tm2b15) (cddar . tm2b14) (cdadr . tm2b13) (cdaar . tm2b12) (caddr . tm2b11) (cadar . tm2b10) (caadr . tm2b0f) (caaar . tm2b0e) (cddr . tm2b0d) (cdar . tm2b0c) (cadr . tm2b0b) (caar . tm2b0a) (cdr . tm2b09) (car . tm2b08) (boolean? . tm2b07) (boolean=? . tm2b06) (atan . tm2b05) (assertion-violation . tm2b04) (asin . tm2b03) (apply . tm2b02) (append . tm2b01) (angle . tm2b00) (acos . tm2aff) (abs . tm2afe) (/ . tm2afd) (* . tm2afc) (- . tm2afb) (+ . tm2afa) (>= . tm2af9) (> . tm2af8) (= . tm2af7) (<= . tm2af6) (< . tm2af5) (&no-nans . tm2af3) (&no-infinities . tm2af2) (&i/o-encoding . tm2af1) (&i/o-decoding . tm2af0) (&i/o-port . tm2aef) (&i/o-file-does-not-exist . tm2aee) (&i/o-file-already-exists . tm2aed) (&i/o-file-is-read-only . tm2aec) (&i/o-file-protection . tm2aeb) (&i/o-filename . tm2aea) (&i/o-invalid-position . tm2ae9) (&i/o-write . tm2ae8) (&i/o-read . tm2ae7) (&i/o . tm2ae6) (&undefined . tm2ae5) (&syntax . tm2ae4) (&lexical . tm2ae3) (&implementation-restriction . tm2ae2) (&non-continuable . tm2ae1) (&who . tm2ae0) (&irritants . tm2adf) (&assertion . tm2ade) (&violation . tm2add) (&error . tm2adc) (&serious . tm2adb) (&warning . tm2ada) (&message . tm2ad9) (&condition . tm2ad8) (define-condition-type . tm2ad7) (define-enumeration . tm2ad6) (define-record-type . tm2ad5) (parent-rtd . tm2ad4) (nongenerative . tm2ad3) (opaque . tm2ad2) (sealed . tm2ad1) (protocol . tm2ad0) (parent . tm2acf) (immutable . tm2ace) (mutable . tm2acd) (fields . tm2acc) (error-handling-mode . tm2acb) (file-options . tm2aca) (buffer-mode . tm2ac9) (eol-style . tm2ac8) (guard . tm2ac7) (unsyntax-splicing . tm2ac4) (unsyntax . tm2ac3) (unquote-splicing . tm2ac2) (unquote . tm2ac1) (_ . tm2ac0) (else . tm2abf) (=> . tm2abe) (... . tm2abd) (assert . tm2abc) (endianness . tm2abb) (do . tm2ab8) (cond . tm2ab7) (let* . tm2ab6) (let*-values . tm2ab5) (let-values . tm2ab4) (identifier-syntax . tm2ab3) (with-syntax . tm2ab2) (quasisyntax . tm2ab1) (quasiquote . tm2ab0) (syntax-rules . tm2aaf) (record-constructor-descriptor . tm2aac) (record-type-descriptor . tm2aab) (case . tm2aaa) (unless . tm2aa8) (when . tm2aa7) (or . tm2aa6) (and . tm2aa5) (if . tm2aa4) (let . tm2aa3) (letrec* . tm2aa2) (letrec . tm2aa1) (case-lambda . tm2a9f) (lambda . tm2a9e) (syntax . tm2a9d) (syntax-case . tm2a9c) (quote . tm2a9b) (letrec-syntax . tm2a99) (let-syntax . tm2a98) (set! . tm2a97) (begin . tm2a95) (define-syntax . tm2a93) (define . tm2a92)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e4e '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . tme49) (quotient . tm2c9b) (null-environment . tme47) (remainder . tm2c9a) (modulo . tm2c99) (inexact->exact . tm2c98) (force . tm2c97) (exact->inexact . tm2c96) (make-promise . tm2c95) (delay . tm2aba)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e4f '(rnrs control) '(6) '() '() '() '((do . tm2ab8) (unless . tm2aa8) (when . tm2aa7) (case-lambda . tm2a9f)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e50 '(rnrs eval) '(6) '() '() '() '((eval . tme4d) (environment . tme45)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e51 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . tm2c91) (set-car! . tm2c90)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e52 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . tm2c93) (string-set! . tm2c92)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e53 '(rnrs programs) '(6) '() '() '() '((exit . tm2c94) (command-line . tm2926)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e54 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . tmbb8) (identifier? . tme6f) (generate-temporaries . tme5b) (free-identifier=? . tme5d) (syntax->datum . tme73) (datum->syntax . tme71) (bound-identifier=? . tme5f) (syntax-violation . tme6d) (unsyntax-splicing . tm2ac4) (unsyntax . tm2ac3) (_ . tm2ac0) (... . tm2abd) (with-syntax . tm2ab2) (quasisyntax . tm2ab1) (syntax . tm2a9d) (syntax-case . tm2a9c)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e55 '(rnrs files) '(6) '() '() '() '((delete-file . tm2d20) (file-exists? . tm2d1f) (make-i/o-write-error . tm2ccd) (make-i/o-read-error . tm2ccc) (make-i/o-port-error . tm2ccb) (make-i/o-invalid-position-error . tm2cca) (make-i/o-filename-error . tm2cc9) (make-i/o-file-protection-error . tm2cc8) (make-i/o-file-is-read-only-error . tm2cc7) (make-i/o-file-does-not-exist-error . tm2cc6) (make-i/o-file-already-exists-error . tm2cc5) (make-i/o-error . tm2cc4) (i/o-write-error? . tm2cb8) (i/o-read-error? . tm2cb7) (i/o-port-error? . tm2cb6) (i/o-invalid-position-error? . tm2cb5) (i/o-filename-error? . tm2cb4) (i/o-file-protection-error? . tm2cb3) (i/o-file-is-read-only-error? . tm2cb2) (i/o-file-does-not-exist-error? . tm2cb1) (i/o-file-already-exists-error? . tm2cb0) (i/o-error? . tm2caf) (i/o-error-position . tm2cae) (i/o-error-port . tm2cad) (i/o-error-filename . tm2cac) (&i/o-port . tm2aef) (&i/o-file-does-not-exist . tm2aee) (&i/o-file-already-exists . tm2aed) (&i/o-file-is-read-only . tm2aec) (&i/o-file-protection . tm2aeb) (&i/o-filename . tm2aea) (&i/o-invalid-position . tm2ae9) (&i/o-write . tm2ae8) (&i/o-read . tm2ae7) (&i/o . tm2ae6)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e56 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . tm2d1e) (vector-sort . tm2d1d) (list-sort . tm2d1c)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e57 '(rnrs base) '(6) '() '() '() '((zero? . tm2b96) (vector? . tm2b95) (vector-set! . tm2b94) (vector-ref . tm2b93) (vector-map . tm2b92) (vector-length . tm2b91) (vector-for-each . tm2b90) (vector-fill! . tm2b8f) (vector->list . tm2b8e) (vector . tm2b8d) (values . tm2b8c) (truncate . tm2b8b) (tan . tm2b8a) (symbol? . tm2b89) (symbol=? . tm2b88) (symbol->string . tm2b87) (substring . tm2b86) (string? . tm2b85) (string>? . tm2b84) (string>=? . tm2b83) (string=? . tm2b82) (string<? . tm2b81) (string<=? . tm2b80) (string-ref . tm2b7f) (string-length . tm2b7e) (string-for-each . tm2b7d) (string-copy . tm2b7c) (string-append . tm2b7b) (string->symbol . tm2b7a) (string->number . tm2b79) (string->list . tm2b78) (string . tm2b77) (sqrt . tm2b76) (sin . tm2b75) (round . tm2b74) (reverse . tm2b73) (real? . tm2b72) (real-valued? . tm2b71) (real-part . tm2b70) (rationalize . tm2b6f) (rational? . tm2b6e) (rational-valued? . tm2b6d) (procedure? . tm2b6c) (positive? . tm2b6b) (pair? . tm2b6a) (odd? . tm2b69) (numerator . tm2b68) (number? . tm2b67) (number->string . tm2b66) (null? . tm2b65) (not . tm2b64) (negative? . tm2b63) (nan? . tm2b62) (min . tm2b61) (max . tm2b60) (map . tm2b5f) (make-vector . tm2b5e) (make-string . tm2b5d) (make-rectangular . tm2b5c) (make-polar . tm2b5b) (magnitude . tm2b5a) (log . tm2b59) (list? . tm2b58) (list-tail . tm2b57) (list-ref . tm2b56) (list->vector . tm2b55) (list->string . tm2b54) (list . tm2b53) (length . tm2b52) (lcm . tm2b51) (integer? . tm2b50) (integer-valued? . tm2b4f) (integer->char . tm2b4e) (infinite? . tm2b4d) (inexact? . tm2b4c) (inexact . tm2b4b) (imag-part . tm2b4a) (gcd . tm2b49) (for-each . tm2b48) (floor . tm2b47) (finite? . tm2b46) (expt . tm2b45) (exp . tm2b44) (exact? . tm2b43) (exact-integer-sqrt . tm2b42) (exact . tm2b41) (even? . tm2b40) (error . tm2b3f) (eqv? . tm2b3e) (equal? . tm2b3d) (eq? . tm2b3c) (dynamic-wind . tm2b3b) (div0-and-mod0 . tm2b3a) (mod0 . tm2b39) (div0 . tm2b38) (div-and-mod . tm2b37) (mod . tm2b36) (div . tm2b35) (denominator . tm2b34) (cos . tm2b33) (cons . tm2b32) (complex? . tm2b31) (char? . tm2b30) (char>? . tm2b2f) (char>=? . tm2b2e) (char=? . tm2b2d) (char<? . tm2b2c) (char<=? . tm2b2b) (char->integer . tm2b2a) (ceiling . tm2b29) (call-with-values . tm2b28) (call/cc . tm2b27) (call-with-current-continuation . tm2b26) (cddddr . tm2b25) (cdddar . tm2b24) (cddadr . tm2b23) (cddaar . tm2b22) (cdaddr . tm2b21) (cdadar . tm2b20) (cdaadr . tm2b1f) (cdaaar . tm2b1e) (cadddr . tm2b1d) (caddar . tm2b1c) (cadadr . tm2b1b) (cadaar . tm2b1a) (caaddr . tm2b19) (caadar . tm2b18) (caaadr . tm2b17) (caaaar . tm2b16) (cdddr . tm2b15) (cddar . tm2b14) (cdadr . tm2b13) (cdaar . tm2b12) (caddr . tm2b11) (cadar . tm2b10) (caadr . tm2b0f) (caaar . tm2b0e) (cddr . tm2b0d) (cdar . tm2b0c) (cadr . tm2b0b) (caar . tm2b0a) (cdr . tm2b09) (car . tm2b08) (boolean? . tm2b07) (boolean=? . tm2b06) (atan . tm2b05) (assertion-violation . tm2b04) (asin . tm2b03) (apply . tm2b02) (append . tm2b01) (angle . tm2b00) (acos . tm2aff) (abs . tm2afe) (/ . tm2afd) (* . tm2afc) (- . tm2afb) (+ . tm2afa) (>= . tm2af9) (> . tm2af8) (= . tm2af7) (<= . tm2af6) (< . tm2af5) (unquote-splicing . tm2ac2) (unquote . tm2ac1) (_ . tm2ac0) (else . tm2abf) (=> . tm2abe) (... . tm2abd) (assert . tm2abc) (cond . tm2ab7) (let* . tm2ab6) (let*-values . tm2ab5) (let-values . tm2ab4) (identifier-syntax . tm2ab3) (quasiquote . tm2ab0) (syntax-rules . tm2aaf) (case . tm2aaa) (or . tm2aa6) (and . tm2aa5) (if . tm2aa4) (let . tm2aa3) (letrec* . tm2aa2) (letrec . tm2aa1) (lambda . tm2a9e) (quote . tm2a9b) (letrec-syntax . tm2a99) (let-syntax . tm2a98) (set! . tm2a97) (begin . tm2a95) (define-syntax . tm2a93) (define . tm2a92)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e58 '(rnrs lists) '(6) '() '() '() '((remove . tm2c8f) (remv . tm2c8e) (remp . tm2c8d) (remq . tm2c8c) (partition . tm2c8b) (memv . tm2c8a) (memq . tm2c89) (memp . tm2c88) (member . tm2c87) (exists . tm2c86) (for-all . tm2c85) (fold-right . tm2c84) (fold-left . tm2c83) (find . tm2c82) (filter . tm2c81) (cons* . tm2c80) (assv . tm2c7f) (assq . tm2c7e) (assp . tm2c7d) (assoc . tm2c7c)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e59 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . tm2d06) (call-with-input-file . tm2d05) (write-char . tm2d04) (write . tm2d03) (with-output-to-file . tm2d02) (with-input-from-file . tm2d01) (read-char . tm2d00) (read . tm2cff) (peek-char . tm2cfe) (open-output-file . tm2cfd) (open-input-file . tm2cfc) (newline . tm2cfb) (display . tm2cfa) (close-output-port . tm2cf9) (close-input-port . tm2cf8) (eof-object? . tm2cf7) (eof-object . tm2cf6) (current-error-port . tm2cf5) (current-output-port . tm2cf4) (current-input-port . tm2cf3) (output-port? . tm2cf2) (input-port? . tm2cf1) (make-i/o-write-error . tm2ccd) (make-i/o-read-error . tm2ccc) (make-i/o-port-error . tm2ccb) (make-i/o-invalid-position-error . tm2cca) (make-i/o-filename-error . tm2cc9) (make-i/o-file-protection-error . tm2cc8) (make-i/o-file-is-read-only-error . tm2cc7) (make-i/o-file-does-not-exist-error . tm2cc6) (make-i/o-file-already-exists-error . tm2cc5) (make-i/o-error . tm2cc4) (i/o-write-error? . tm2cb8) (i/o-read-error? . tm2cb7) (i/o-port-error? . tm2cb6) (i/o-invalid-position-error? . tm2cb5) (i/o-filename-error? . tm2cb4) (i/o-file-protection-error? . tm2cb3) (i/o-file-is-read-only-error? . tm2cb2) (i/o-file-does-not-exist-error? . tm2cb1) (i/o-file-already-exists-error? . tm2cb0) (i/o-error? . tm2caf) (i/o-error-position . tm2cae) (i/o-error-port . tm2cad) (i/o-error-filename . tm2cac) (&i/o-port . tm2aef) (&i/o-file-does-not-exist . tm2aee) (&i/o-file-already-exists . tm2aed) (&i/o-file-is-read-only . tm2aec) (&i/o-file-protection . tm2aeb) (&i/o-filename . tm2aea) (&i/o-invalid-position . tm2ae9) (&i/o-write . tm2ae8) (&i/o-read . tm2ae7) (&i/o . tm2ae6)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e5a '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . tm2cbb) (utf32->string . tm2c41) (utf16->string . tm2c40) (utf8->string . tm2c3f) (uint-list->bytevector . tm2c3e) (u8-list->bytevector . tm2c3d) (string->utf8 . tm2c3c) (string->utf32 . tm2c3b) (string->utf16 . tm2c3a) (sint-list->bytevector . tm2c39) (native-endianness . tm2c38) (bytevector? . tm2c37) (bytevector=? . tm2c36) (bytevector-uint-set! . tm2c35) (bytevector-uint-ref . tm2c34) (bytevector-u8-set! . tm2c33) (bytevector-u8-ref . tm2c32) (bytevector-u64-set! . tm2c31) (bytevector-u64-ref . tm2c30) (bytevector-u64-native-set! . tm2c2f) (bytevector-u64-native-ref . tm2c2e) (bytevector-u32-set! . tm2c2d) (bytevector-u32-ref . tm2c2c) (bytevector-u32-native-set! . tm2c2b) (bytevector-u32-native-ref . tm2c2a) (bytevector-u16-set! . tm2c29) (bytevector-u16-ref . tm2c28) (bytevector-u16-native-set! . tm2c27) (bytevector-u16-native-ref . tm2c26) (bytevector-sint-set! . tm2c25) (bytevector-sint-ref . tm2c24) (bytevector-s8-set! . tm2c23) (bytevector-s8-ref . tm2c22) (bytevector-s64-set! . tm2c21) (bytevector-s64-ref . tm2c20) (bytevector-s64-native-set! . tm2c1f) (bytevector-s64-native-ref . tm2c1e) (bytevector-s32-set! . tm2c1d) (bytevector-s32-ref . tm2c1c) (bytevector-s32-native-set! . tm2c1b) (bytevector-s32-native-ref . tm2c1a) (bytevector-s16-set! . tm2c19) (bytevector-s16-ref . tm2c18) (bytevector-s16-native-set! . tm2c17) (bytevector-s16-native-ref . tm2c16) (bytevector-length . tm2c15) (bytevector-ieee-single-ref . tm2c14) (bytevector-ieee-single-set! . tm2c13) (bytevector-ieee-single-native-set! . tm2c12) (bytevector-ieee-single-native-ref . tm2c11) (bytevector-ieee-double-set! . tm2c10) (bytevector-ieee-double-ref . tm2c0f) (bytevector-ieee-double-native-set! . tm2c0e) (bytevector-ieee-double-native-ref . tm2c0d) (bytevector-fill! . tm2c0c) (bytevector-copy! . tm2c0b) (bytevector-copy . tm2c0a) (bytevector->uint-list . tm2c09) (bytevector->u8-list . tm2c08) (bytevector->sint-list . tm2c07) (endianness . tm2abb)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e5b '(rnrs unicode) '(6) '() '() '() '((string-upcase . tm2d4e) (string-titlecase . tm2d4d) (string-normalize-nfkd . tm2d4c) (string-normalize-nfkc . tm2d4b) (string-normalize-nfd . tm2d4a) (string-normalize-nfc . tm2d49) (string-foldcase . tm2d48) (string-downcase . tm2d47) (string-ci>? . tm2d46) (string-ci>=? . tm2d45) (string-ci=? . tm2d44) (string-ci<? . tm2d43) (string-ci<=? . tm2d42) (char-whitespace? . tm2d41) (char-upper-case? . tm2d40) (char-title-case? . tm2d3f) (char-numeric? . tm2d3e) (char-lower-case? . tm2d3d) (char-general-category . tm2d3c) (char-upcase . tm2d3b) (char-titlecase . tm2d3a) (char-foldcase . tm2d39) (char-downcase . tm2d38) (char-ci>? . tm2d37) (char-ci>=? . tm2d36) (char-ci=? . tm2d35) (char-ci<? . tm2d34) (char-ci<=? . tm2d33) (char-alphabetic? . tm2d32)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e5c '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . tm2c75) (raise-continuable . tm2c74) (raise . tm2c73) (guard . tm2ac7) (else . tm2abf) (=> . tm2abe)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e5d '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . tm2ba7) (bitwise-reverse-bit-field . tm2ba6) (bitwise-length . tm2ba5) (bitwise-if . tm2ba4) (bitwise-first-bit-set . tm2ba3) (bitwise-copy-bit-field . tm2ba2) (bitwise-copy-bit . tm2ba1) (bitwise-bit-set? . tm2ba0) (bitwise-bit-field . tm2b9f) (bitwise-bit-count . tm2b9e) (bitwise-xor . tm2b9d) (bitwise-ior . tm2b9c) (bitwise-and . tm2b9b) (bitwise-not . tm2b9a) (bitwise-arithmetic-shift-right . tm2b99) (bitwise-arithmetic-shift-left . tm2b98) (bitwise-arithmetic-shift . tm2b97)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e5e '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . tm2bd4) (fxxor . tm2bd3) (fxrotate-bit-field . tm2bd2) (fxreverse-bit-field . tm2bd1) (fxpositive? . tm2bd0) (fxodd? . tm2bcf) (fxnot . tm2bce) (fxnegative? . tm2bcd) (fxmod0 . tm2bcc) (fxmod . tm2bcb) (fxmin . tm2bca) (fxmax . tm2bc9) (fxlength . tm2bc8) (fxior . tm2bc7) (fxif . tm2bc6) (fxfirst-bit-set . tm2bc5) (fxeven? . tm2bc4) (fxdiv0-and-mod0 . tm2bc3) (fxdiv0 . tm2bc2) (fxdiv-and-mod . tm2bc1) (fxdiv . tm2bc0) (fxcopy-bit-field . tm2bbf) (fxcopy-bit . tm2bbe) (fxbit-set? . tm2bbd) (fxbit-field . tm2bbc) (fxbit-count . tm2bbb) (fxarithmetic-shift-right . tm2bba) (fxarithmetic-shift-left . tm2bb9) (fxarithmetic-shift . tm2bb8) (fxand . tm2bb7) (fx>? . tm2bb6) (fx>=? . tm2bb5) (fx=? . tm2bb4) (fx<? . tm2bb3) (fx<=? . tm2bb2) (fx-/carry . tm2bb1) (fx- . tm2bb0) (fx+/carry . tm2baf) (fx+ . tm2bae) (fx*/carry . tm2bad) (fx* . tm2bac) (greatest-fixnum . tm2bab) (least-fixnum . tm2baa) (fixnum-width . tm2ba9) (fixnum? . tm2ba8)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e5f '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . tm2c06) (no-infinities-violation? . tm2c05) (make-no-nans-violation . tm2c04) (make-no-infinities-violation . tm2c03) (real->flonum . tm2c02) (flzero? . tm2c01) (fltruncate . tm2c00) (fltan . tm2bff) (flsqrt . tm2bfe) (flsin . tm2bfd) (flround . tm2bfc) (flpositive? . tm2bfb) (flonum? . tm2bfa) (flodd? . tm2bf9) (flnumerator . tm2bf8) (flnegative? . tm2bf7) (flnan? . tm2bf6) (flmod0 . tm2bf5) (flmod . tm2bf4) (flmin . tm2bf3) (flmax . tm2bf2) (fllog . tm2bf1) (flinteger? . tm2bf0) (flinfinite? . tm2bef) (flfloor . tm2bee) (flfinite? . tm2bed) (flexpt . tm2bec) (flexp . tm2beb) (fleven? . tm2bea) (fldiv0-and-mod0 . tm2be9) (fldiv0 . tm2be8) (fldiv-and-mod . tm2be7) (fldiv . tm2be6) (fldenominator . tm2be5) (flcos . tm2be4) (flceiling . tm2be3) (flatan . tm2be2) (flasin . tm2be1) (flacos . tm2be0) (flabs . tm2bdf) (fl>? . tm2bde) (fl>=? . tm2bdd) (fl=? . tm2bdc) (fl<? . tm2bdb) (fl<=? . tm2bda) (fl/ . tm2bd9) (fl- . tm2bd8) (fl+ . tm2bd7) (fl* . tm2bd6) (fixnum->flonum . tm2bd5) (&no-nans . tm2af3) (&no-infinities . tm2af2)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e60 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . tm2d1b) (string-ci-hash . tm2d1a) (string-hash . tm2d19) (equal-hash . tm2d18) (hashtable-equivalence-function . tm2d17) (make-hashtable . tm2d16) (hashtable-hash-function . tm2d15) (make-eqv-hashtable . tm2d14) (make-eq-hashtable . tm2d13) (hashtable? . tm2d12) (hashtable-update! . tm2d11) (hashtable-size . tm2d10) (hashtable-set! . tm2d0f) (hashtable-ref . tm2d0e) (hashtable-mutable? . tm2d0d) (hashtable-keys . tm2d0c) (hashtable-entries . tm2d0b) (hashtable-delete! . tm2d0a) (hashtable-copy . tm2d09) (hashtable-contains? . tm2d08) (hashtable-clear! . tm2d07)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e61 '(rnrs io ports) '(6) '() '() '() '((eof-object? . tm2cf7) (eof-object . tm2cf6) (current-error-port . tm2cf5) (current-output-port . tm2cf4) (current-input-port . tm2cf3) (output-port? . tm2cf2) (input-port? . tm2cf1) (utf-8-codec . tm2cf0) (utf-16-codec . tm2cef) (transcoder-error-handling-mode . tm2cee) (transcoder-eol-style . tm2ced) (transcoder-codec . tm2cec) (transcoded-port . tm2ceb) (textual-port? . tm2cea) (string->bytevector . tm2ce9) (standard-output-port . tm2ce8) (standard-input-port . tm2ce7) (standard-error-port . tm2ce6) (set-port-position! . tm2ce5) (put-u8 . tm2ce4) (put-string . tm2ce3) (put-datum . tm2ce2) (put-char . tm2ce1) (put-bytevector . tm2ce0) (port? . tm2cdf) (port-transcoder . tm2cde) (port-position . tm2cdd) (port-has-set-port-position!? . tm2cdc) (port-has-port-position? . tm2cdb) (port-eof? . tm2cda) (output-port-buffer-mode . tm2cd9) (open-string-output-port . tm2cd8) (open-string-input-port . tm2cd7) (open-file-output-port . tm2cd6) (open-file-input/output-port . tm2cd5) (open-file-input-port . tm2cd4) (open-bytevector-output-port . tm2cd3) (open-bytevector-input-port . tm2cd2) (native-transcoder . tm2cd1) (native-eol-style . tm2cd0) (make-transcoder . tm2ccf) (latin-1-codec . tm2cce) (make-i/o-write-error . tm2ccd) (make-i/o-read-error . tm2ccc) (make-i/o-port-error . tm2ccb) (make-i/o-invalid-position-error . tm2cca) (make-i/o-filename-error . tm2cc9) (make-i/o-file-protection-error . tm2cc8) (make-i/o-file-is-read-only-error . tm2cc7) (make-i/o-file-does-not-exist-error . tm2cc6) (make-i/o-file-already-exists-error . tm2cc5) (make-i/o-error . tm2cc4) (make-i/o-encoding-error . tm2cc3) (make-i/o-decoding-error . tm2cc2) (make-custom-textual-output-port . tm2cc1) (make-custom-textual-input/output-port . tm2cc0) (make-custom-textual-input-port . tm2cbf) (make-custom-binary-output-port . tm2cbe) (make-custom-binary-input/output-port . tm2cbd) (make-custom-binary-input-port . tm2cbc) (lookahead-u8 . tm2cba) (lookahead-char . tm2cb9) (i/o-write-error? . tm2cb8) (i/o-read-error? . tm2cb7) (i/o-port-error? . tm2cb6) (i/o-invalid-position-error? . tm2cb5) (i/o-filename-error? . tm2cb4) (i/o-file-protection-error? . tm2cb3) (i/o-file-is-read-only-error? . tm2cb2) (i/o-file-does-not-exist-error? . tm2cb1) (i/o-file-already-exists-error? . tm2cb0) (i/o-error? . tm2caf) (i/o-error-position . tm2cae) (i/o-error-port . tm2cad) (i/o-error-filename . tm2cac) (i/o-encoding-error? . tm2cab) (i/o-encoding-error-char . tm2caa) (i/o-decoding-error? . tm2ca9) (get-u8 . tm2ca8) (get-string-n! . tm2ca7) (get-string-n . tm2ca6) (get-string-all . tm2ca5) (get-line . tm2ca4) (get-datum . tm2ca3) (get-char . tm2ca2) (get-bytevector-some . tm2ca1) (get-bytevector-n! . tm2ca0) (get-bytevector-n . tm2c9f) (get-bytevector-all . tm2c9e) (flush-output-port . tm2c9d) (close-port . tm2c9c) (call-with-string-output-port . tm2c7b) (call-with-port . tm2c7a) (call-with-bytevector-output-port . tm2c79) (bytevector->string . tm2c78) (buffer-mode? . tm2c77) (binary-port? . tm2c76) (&i/o-encoding . tm2af1) (&i/o-decoding . tm2af0) (&i/o-port . tm2aef) (&i/o-file-does-not-exist . tm2aee) (&i/o-file-already-exists . tm2aed) (&i/o-file-is-read-only . tm2aec) (&i/o-file-protection . tm2aeb) (&i/o-filename . tm2aea) (&i/o-invalid-position . tm2ae9) (&i/o-write . tm2ae8) (&i/o-read . tm2ae7) (&i/o . tm2ae6) (error-handling-mode . tm2acb) (file-options . tm2aca) (buffer-mode . tm2ac9) (eol-style . tm2ac8)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e62 '(rnrs enums) '(6) '() '() '() '((make-enumeration . tm2c72) (enum-set=? . tm2c71) (enum-set-universe . tm2c70) (enum-set-union . tm2c6f) (enum-set-subset? . tm2c6e) (enum-set-projection . tm2c6d) (enum-set-member? . tm2c6c) (enum-set-intersection . tm2c6b) (enum-set-indexer . tm2c6a) (enum-set-difference . tm2c69) (enum-set-constructor . tm2c68) (enum-set-complement . tm2c67) (enum-set->list . tm2c66) (define-enumeration . tm2ad6)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e63 '(rnrs conditions) '(6) '() '() '() '((who-condition? . tm2c65) (warning? . tm2c64) (violation? . tm2c63) (undefined-violation? . tm2c62) (syntax-violation? . tm2c61) (syntax-violation-subform . tm2c60) (syntax-violation-form . tm2c5f) (syntax-violation . tme6d) (simple-conditions . tm2c5e) (serious-condition? . tm2c5d) (non-continuable-violation? . tm2c5c) (message-condition? . tm2c5b) (make-who-condition . tm2c5a) (make-warning . tm2c59) (make-violation . tm2c58) (make-undefined-violation . tm2c57) (make-syntax-violation . tm2c56) (make-serious-condition . tm2c55) (make-non-continuable-violation . tm2c54) (make-message-condition . tm2c53) (make-lexical-violation . tm2c52) (make-irritants-condition . tm2c51) (make-implementation-restriction-violation . tm2c50) (make-error . tm2c4f) (make-assertion-violation . tm2c4e) (lexical-violation? . tm2c4d) (irritants-condition? . tm2c4c) (implementation-restriction-violation? . tm2c4b) (error? . tm2c4a) (condition-who . tm2c49) (condition-predicate . tm2c48) (condition-message . tm2c47) (condition-irritants . tm2c46) (condition-accessor . tm2c45) (condition . tm2c44) (assertion-violation? . tm2c43) (condition? . tm2c42) (&undefined . tm2ae5) (&syntax . tm2ae4) (&lexical . tm2ae3) (&implementation-restriction . tm2ae2) (&non-continuable . tm2ae1) (&who . tm2ae0) (&irritants . tm2adf) (&assertion . tm2ade) (&violation . tm2add) (&error . tm2adc) (&serious . tm2adb) (&warning . tm2ada) (&message . tm2ad9) (&condition . tm2ad8) (define-condition-type . tm2ad7)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e64 '(rnrs records inspection) '(6) '() '() '() '((record? . tm2d2a) (record-type-uid . tm2d29) (record-type-sealed? . tm2d28) (record-type-parent . tm2d27) (record-type-opaque? . tm2d26) (record-type-name . tm2d25) (record-type-generative? . tm2d24) (record-type-field-names . tm2d23) (record-rtd . tm2d22) (record-field-mutable? . tm2d21)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e65 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . tm2d31) (record-predicate . tm2d30) (record-mutator . tm2d2f) (record-constructor . tm2d2e) (record-accessor . tm2d2d) (make-record-type-descriptor . tm2d2c) (make-record-constructor-descriptor . tm2d2b)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e66 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . tm2ad5) (parent-rtd . tm2ad4) (nongenerative . tm2ad3) (opaque . tm2ad2) (sealed . tm2ad1) (protocol . tm2ad0) (parent . tm2acf) (immutable . tm2ace) (mutable . tm2acd) (fields . tm2acc) (record-constructor-descriptor . tm2aac) (record-type-descriptor . tm2aab)) '() values values '#f '#f '#t '#f) (tm9a1@tm7ed@install-library 'tm2e67 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . tm2e47) (&no-nans-rtd . tm2e46) (&no-infinities-rcd . tm2e45) (&no-infinities-rtd . tm2e44) (&i/o-encoding-rcd . tm2e43) (&i/o-encoding-rtd . tm2e42) (&i/o-decoding-rcd . tm2e41) (&i/o-decoding-rtd . tm2e40) (&i/o-port-rcd . tm2e3f) (&i/o-port-rtd . tm2e3e) (&i/o-file-does-not-exist-rcd . tm2e3d) (&i/o-file-does-not-exist-rtd . tm2e3c) (&i/o-file-already-exists-rcd . tm2e3b) (&i/o-file-already-exists-rtd . tm2e3a) (&i/o-file-is-read-only-rcd . tm2e39) (&i/o-file-is-read-only-rtd . tm2e38) (&i/o-file-protection-rcd . tm2e37) (&i/o-file-protection-rtd . tm2e36) (&i/o-filename-rcd . tm2e35) (&i/o-filename-rtd . tm2e34) (&i/o-invalid-position-rcd . tm2e33) (&i/o-invalid-position-rtd . tm2e32) (&i/o-write-rcd . tm2e31) (&i/o-write-rtd . tm2e30) (&i/o-read-rcd . tm2e2f) (&i/o-read-rtd . tm2e2e) (&i/o-rcd . tm2e2d) (&i/o-rtd . tm2e2c) (&undefined-rcd . tm2e2b) (&undefined-rtd . tm2e2a) (&syntax-rcd . tm2e29) (&syntax-rtd . tm2e28) (&lexical-rcd . tm2e27) (&lexical-rtd . tm2e26) (&implementation-restriction-rcd . tm2e25) (&implementation-restriction-rtd . tm2e24) (&non-continuable-rcd . tm2e23) (&non-continuable-rtd . tm2e22) (&who-rcd . tm2e21) (&who-rtd . tm2e20) (&irritants-rcd . tm2e1f) (&irritants-rtd . tm2e1e) (&assertion-rcd . tm2e1d) (&assertion-rtd . tm2e1c) (&violation-rcd . tm2e1b) (&violation-rtd . tm2e1a) (&error-rcd . tm2e19) (&error-rtd . tm2e18) (&serious-rcd . tm2e17) (&serious-rtd . tm2e16) (&warning-rcd . tm2e15) (&warning-rtd . tm2e14) (&message-rcd . tm2e13) (&message-rtd . tm2e12) (&condition-rcd . tm2e11) (&condition-rtd . tm2e10) (syntax-error . tme69) (syntax-dispatch . tmd8d) (pretty-print . tm2e0f) (eval-core . tm2e0e) (set-symbol-value! . tm2e0d) (symbol-value . tm2e0c) (gensym . tm2e0b) (void . tm2e0a) (load . tm292c) (interaction-environment . tme7b) (char-ready? . tm2e09) (regexp? . tm2e08) (read-line . tm2e07) (gensym-prefix-set! . tm2e06) (ungensym . tm2e05) (alist->eq-hash-table . tm2e04) (assoc-ref . tm2e03) (print . tm2e02) (format . tm2e01) (host-os . tm2e00) (library-path . tm7cc) (standard-library-path . tm2dff) (ssl-supported? . tm2dfe) (ssl-socket? . tm2dfd) (socket-sslize! . tm2dfc) (%monapi-stream-read . tm2dfb) (%monapi-stream-write . tm2dfa) (%monapi-stream-handle . tm2df9) (%monapi-make-stream . tm2df8) (%monapi-name-add! . tm2df7) (%monapi-message-receive . tm2df6) (%monapi-name-whereis . tm2df5) (%monapi-message-reply . tm2df4) (%monapi-message-send-receive . tm2df3) (%monapi-message-send . tm2df2) (process-terminate! . tm2df1) (process-list . tm2df0) (file-newer? . tm2def) (stat-mtime . tm2dee) (write-to-file . tm2ded) (file->list . tm2dec) (file->string . tm2deb) (digit->integer . tm2dea) (call-with-string-input-port . tm2de9) (call-with-string-io . tm2de8) (string-split . tm2de7) (bytevector-for-each . tm2de6) (string->regexp . tm2de5) (rxmatch . tm2de4) (regexp-replace-all . tm2de3) (hashtable-fold-left . tm2de2) (hashtable-for-each . tm2de1) (mosh-cache-dir . tm5b6) (%call-process . tm2de0) (local-tz-offset . tm2ddf) (microseconds . tm2dde) (directory-list . tm2ddd) (set-current-directory! . tm2ddc) (expand-path . tm2ddb) (current-directory . tm2dda) (%getpid . tm2dd9) (%spawn . tm2dd8) (%waitpid . tm2dd7) (simple-struct-name . tm2dd6) (simple-struct-set! . tm2dd5) (simple-struct-ref . tm2dd4) (make-simple-struct . tm2dd3) (simple-struct? . tm2dd2) (pointer-ref-c-int64 . tm2dd1) (pointer-ref-c-int32 . tm2dd0) (pointer-ref-c-int16 . tm2dcf) (pointer-ref-c-int8 . tm2dce) (pointer-ref-c-uint64 . tm2dcd) (pointer-ref-c-uint32 . tm2dcc) (pointer-ref-c-uint16 . tm2dcb) (pointer-ref-c-uint8 . tm2dca) (pointer-set-c-uint64! . tm2dc9) (pointer-set-c-uint32! . tm2dc8) (pointer-set-c-uint16! . tm2dc7) (pointer-set-c-uint8! . tm2dc6) (pointer-set-c-int64! . tm2dc5) (pointer-set-c-int32! . tm2dc4) (pointer-set-c-int16! . tm2dc3) (pointer-set-c-int8! . tm2dc2) (pointer-set-c-pointer! . tm2dc1) (pointer-set-c-double! . tm2dc0) (pointer-set-c-float! . tm2dbf) (pointer-set-c-long-long! . tm2dbe) (pointer-set-c-long! . tm2dbd) (pointer-set-c-int! . tm2dbc) (pointer-set-c-short! . tm2dbb) (pointer-set-c-char! . tm2dba) (pointer-ref-c-pointer . tm2db9) (pointer-ref-c-double . tm2db8) (pointer-ref-c-float . tm2db7) (pointer-ref-c-unsigned-long-long . tm2db6) (pointer-ref-c-signed-long-long . tm2db5) (pointer-ref-c-unsigned-long . tm2db4) (pointer-ref-c-signed-long . tm2db3) (pointer-ref-c-unsigned-int . tm2db2) (pointer-ref-c-signed-int . tm2db1) (pointer-ref-c-unsigned-short . tm2db0) (pointer-ref-c-signed-short . tm2daf) (pointer-ref-c-unsigned-char . tm2dae) (pointer-ref-c-signed-char . tm2dad) (pointer->integer . tm2dac) (integer->pointer . tm2dab) (pointer? . tm2daa) (shared-errno . tm2da9) (%ffi-free-c-callback-trampoline . tm2da8) (%ffi-make-c-callback-trampoline . tm2da7) (%ffi-free . tm2da6) (%ffi-malloc . tm2da5) (%ffi-supported? . tm2da4) (%ffi-pointer->string . tm2da3) (%ffi-call . tm2da2) (%ffi-lookup . tm2da1) (%ffi-open . tm2da0) (null-terminated-utf8->string . tm2d9f) (null-terminated-bytevector->string . tm2d9e) (%exec . tm2d9d) (%fork . tm2d9c) (%pipe . tm2d9b) (p . tm2d9a) (open-output-string . tm2d99) (get-output-string . tm2d98) (file-stat-ctime . tm2d97) (file-stat-atime . tm2d96) (file-stat-mtime . tm2d95) (file-size-in-bytes . tm2d94) (file-writable? . tm2d93) (file-executable? . tm2d92) (file-readable? . tm2d91) (file-regular? . tm2d90) (file-symbolic-link? . tm2d8f) (file-directory? . tm2d8e) (create-symbolic-link . tm2d8d) (rename-file . tm2d8c) (delete-directory . tm2d8b) (create-directory . tm2d8a) (create-mosh-cache-dir . tm2d89) (get-environment-variables . tm2d88) (current-exception-handler . tm2d87) (get-environment-variable . tm2d86) (join-wraps . tm2d85) (id->real-label . tm2d84) (same-marks? . tm2d83) (same-marks*? . tm2d82) (get-timeofday . tm2d81) (get-command-line . tm2d80) (sys-display . tm2d7f) (whereis . tm2d7e) (register . tm2d7d) (vm-join! . tm2d7c) (vm-set-value! . tm2d7b) (vm? . tm2d7a) (main-vm? . tm2d79) (vm-eval . tm2d78) (vm-self . tm2d77) (vm-start! . tm2d76) (make-vm . tm2d75) (mutex-try-lock! . tm2d74) (mutex-unlock! . tm2d73) (mutex-lock! . tm2d72) (mutex? . tm2d71) (make-mutex . tm2d70) (condition-variable-notify-all! . tm2d6f) (condition-variable-notify! . tm2d6e) (condition-variable-wait! . tm2d6d) (make-condition-variable . tm2d6c) (write/ss . tm2d6b) (mosh-executable-path . tm2d6a) (make-file-options . tm2d69) (source-info . tm2d68) (make-compiler-instruction . tm2d67) (make-instruction . tm2d66) (set-annotation! . tm2d65) (get-annotation . tm2d64) (annotated-pair? . tm2d63) (annotated-cons . tm2d62) (set-source-info! . tm2d61) (bignum? . tm2d60) (fast-equal? . tm2d5f) (fasl-read . tm2d5e) (fasl-write . tm2d5d) (time-usage . tm2d5c) (os-constant . tm2d5b) (condition-printer . tm2d5a) (disasm . tm2d59) (make-parameter . tm5b4) (socket-port . tm2d58) (socket-shutdown . tm2d57) (socket-close . tm2d56) (socket-send . tm2d55) (socket-recv! . tm2d54) (socket-recv . tm2d53) (make-server-socket . tm2d52) (make-client-socket . tm2d51) (socket-accept . tm2d50) (socket? . tm2d4f) (string-upcase . tm2d4e) (string-titlecase . tm2d4d) (string-normalize-nfkd . tm2d4c) (string-normalize-nfkc . tm2d4b) (string-normalize-nfd . tm2d4a) (string-normalize-nfc . tm2d49) (string-foldcase . tm2d48) (string-downcase . tm2d47) (string-ci>? . tm2d46) (string-ci>=? . tm2d45) (string-ci=? . tm2d44) (string-ci<? . tm2d43) (string-ci<=? . tm2d42) (char-whitespace? . tm2d41) (char-upper-case? . tm2d40) (char-title-case? . tm2d3f) (char-numeric? . tm2d3e) (char-lower-case? . tm2d3d) (char-general-category . tm2d3c) (char-upcase . tm2d3b) (char-titlecase . tm2d3a) (char-foldcase . tm2d39) (char-downcase . tm2d38) (char-ci>? . tm2d37) (char-ci>=? . tm2d36) (char-ci=? . tm2d35) (char-ci<? . tm2d34) (char-ci<=? . tm2d33) (char-alphabetic? . tm2d32) (make-variable-transformer . tmbb8) (identifier? . tme6f) (generate-temporaries . tme5b) (free-identifier=? . tme5d) (syntax->datum . tme73) (datum->syntax . tme71) (bound-identifier=? . tme5f) (record-type-descriptor? . tm2d31) (record-predicate . tm2d30) (record-mutator . tm2d2f) (record-constructor . tm2d2e) (record-accessor . tm2d2d) (make-record-type-descriptor . tm2d2c) (make-record-constructor-descriptor . tm2d2b) (record? . tm2d2a) (record-type-uid . tm2d29) (record-type-sealed? . tm2d28) (record-type-parent . tm2d27) (record-type-opaque? . tm2d26) (record-type-name . tm2d25) (record-type-generative? . tm2d24) (record-type-field-names . tm2d23) (record-rtd . tm2d22) (record-field-mutable? . tm2d21) (delete-file . tm2d20) (file-exists? . tm2d1f) (vector-sort! . tm2d1e) (vector-sort . tm2d1d) (list-sort . tm2d1c) (symbol-hash . tm2d1b) (string-ci-hash . tm2d1a) (string-hash . tm2d19) (equal-hash . tm2d18) (hashtable-equivalence-function . tm2d17) (make-hashtable . tm2d16) (hashtable-hash-function . tm2d15) (make-eqv-hashtable . tm2d14) (make-eq-hashtable . tm2d13) (hashtable? . tm2d12) (hashtable-update! . tm2d11) (hashtable-size . tm2d10) (hashtable-set! . tm2d0f) (hashtable-ref . tm2d0e) (hashtable-mutable? . tm2d0d) (hashtable-keys . tm2d0c) (hashtable-entries . tm2d0b) (hashtable-delete! . tm2d0a) (hashtable-copy . tm2d09) (hashtable-contains? . tm2d08) (hashtable-clear! . tm2d07) (call-with-output-file . tm2d06) (call-with-input-file . tm2d05) (write-char . tm2d04) (write . tm2d03) (with-output-to-file . tm2d02) (with-input-from-file . tm2d01) (read-char . tm2d00) (read . tm2cff) (peek-char . tm2cfe) (open-output-file . tm2cfd) (open-input-file . tm2cfc) (newline . tm2cfb) (display . tm2cfa) (close-output-port . tm2cf9) (close-input-port . tm2cf8) (eof-object? . tm2cf7) (eof-object . tm2cf6) (current-error-port . tm2cf5) (current-output-port . tm2cf4) (current-input-port . tm2cf3) (output-port? . tm2cf2) (input-port? . tm2cf1) (utf-8-codec . tm2cf0) (utf-16-codec . tm2cef) (transcoder-error-handling-mode . tm2cee) (transcoder-eol-style . tm2ced) (transcoder-codec . tm2cec) (transcoded-port . tm2ceb) (textual-port? . tm2cea) (string->bytevector . tm2ce9) (standard-output-port . tm2ce8) (standard-input-port . tm2ce7) (standard-error-port . tm2ce6) (set-port-position! . tm2ce5) (put-u8 . tm2ce4) (put-string . tm2ce3) (put-datum . tm2ce2) (put-char . tm2ce1) (put-bytevector . tm2ce0) (port? . tm2cdf) (port-transcoder . tm2cde) (port-position . tm2cdd) (port-has-set-port-position!? . tm2cdc) (port-has-port-position? . tm2cdb) (port-eof? . tm2cda) (output-port-buffer-mode . tm2cd9) (open-string-output-port . tm2cd8) (open-string-input-port . tm2cd7) (open-file-output-port . tm2cd6) (open-file-input/output-port . tm2cd5) (open-file-input-port . tm2cd4) (open-bytevector-output-port . tm2cd3) (open-bytevector-input-port . tm2cd2) (native-transcoder . tm2cd1) (native-eol-style . tm2cd0) (make-transcoder . tm2ccf) (latin-1-codec . tm2cce) (make-i/o-write-error . tm2ccd) (make-i/o-read-error . tm2ccc) (make-i/o-port-error . tm2ccb) (make-i/o-invalid-position-error . tm2cca) (make-i/o-filename-error . tm2cc9) (make-i/o-file-protection-error . tm2cc8) (make-i/o-file-is-read-only-error . tm2cc7) (make-i/o-file-does-not-exist-error . tm2cc6) (make-i/o-file-already-exists-error . tm2cc5) (make-i/o-error . tm2cc4) (make-i/o-encoding-error . tm2cc3) (make-i/o-decoding-error . tm2cc2) (make-custom-textual-output-port . tm2cc1) (make-custom-textual-input/output-port . tm2cc0) (make-custom-textual-input-port . tm2cbf) (make-custom-binary-output-port . tm2cbe) (make-custom-binary-input/output-port . tm2cbd) (make-custom-binary-input-port . tm2cbc) (make-bytevector . tm2cbb) (lookahead-u8 . tm2cba) (lookahead-char . tm2cb9) (i/o-write-error? . tm2cb8) (i/o-read-error? . tm2cb7) (i/o-port-error? . tm2cb6) (i/o-invalid-position-error? . tm2cb5) (i/o-filename-error? . tm2cb4) (i/o-file-protection-error? . tm2cb3) (i/o-file-is-read-only-error? . tm2cb2) (i/o-file-does-not-exist-error? . tm2cb1) (i/o-file-already-exists-error? . tm2cb0) (i/o-error? . tm2caf) (i/o-error-position . tm2cae) (i/o-error-port . tm2cad) (i/o-error-filename . tm2cac) (i/o-encoding-error? . tm2cab) (i/o-encoding-error-char . tm2caa) (i/o-decoding-error? . tm2ca9) (get-u8 . tm2ca8) (get-string-n! . tm2ca7) (get-string-n . tm2ca6) (get-string-all . tm2ca5) (get-line . tm2ca4) (get-datum . tm2ca3) (get-char . tm2ca2) (get-bytevector-some . tm2ca1) (get-bytevector-n! . tm2ca0) (get-bytevector-n . tm2c9f) (get-bytevector-all . tm2c9e) (flush-output-port . tm2c9d) (close-port . tm2c9c) (scheme-report-environment . tme49) (quotient . tm2c9b) (null-environment . tme47) (remainder . tm2c9a) (modulo . tm2c99) (inexact->exact . tm2c98) (force . tm2c97) (exact->inexact . tm2c96) (make-promise . tm2c95) (exit . tm2c94) (command-line . tm2926) (string-fill! . tm2c93) (string-set! . tm2c92) (set-cdr! . tm2c91) (set-car! . tm2c90) (remove . tm2c8f) (remv . tm2c8e) (remp . tm2c8d) (remq . tm2c8c) (partition . tm2c8b) (memv . tm2c8a) (memq . tm2c89) (memp . tm2c88) (member . tm2c87) (exists . tm2c86) (for-all . tm2c85) (fold-right . tm2c84) (fold-left . tm2c83) (find . tm2c82) (filter . tm2c81) (cons* . tm2c80) (assv . tm2c7f) (assq . tm2c7e) (assp . tm2c7d) (assoc . tm2c7c) (call-with-string-output-port . tm2c7b) (call-with-port . tm2c7a) (call-with-bytevector-output-port . tm2c79) (bytevector->string . tm2c78) (buffer-mode? . tm2c77) (binary-port? . tm2c76) (with-exception-handler . tm2c75) (raise-continuable . tm2c74) (raise . tm2c73) (eval . tme4d) (environment . tme45) (make-enumeration . tm2c72) (enum-set=? . tm2c71) (enum-set-universe . tm2c70) (enum-set-union . tm2c6f) (enum-set-subset? . tm2c6e) (enum-set-projection . tm2c6d) (enum-set-member? . tm2c6c) (enum-set-intersection . tm2c6b) (enum-set-indexer . tm2c6a) (enum-set-difference . tm2c69) (enum-set-constructor . tm2c68) (enum-set-complement . tm2c67) (enum-set->list . tm2c66) (who-condition? . tm2c65) (warning? . tm2c64) (violation? . tm2c63) (undefined-violation? . tm2c62) (syntax-violation? . tm2c61) (syntax-violation-subform . tm2c60) (syntax-violation-form . tm2c5f) (syntax-violation . tme6d) (simple-conditions . tm2c5e) (serious-condition? . tm2c5d) (non-continuable-violation? . tm2c5c) (message-condition? . tm2c5b) (make-who-condition . tm2c5a) (make-warning . tm2c59) (make-violation . tm2c58) (make-undefined-violation . tm2c57) (make-syntax-violation . tm2c56) (make-serious-condition . tm2c55) (make-non-continuable-violation . tm2c54) (make-message-condition . tm2c53) (make-lexical-violation . tm2c52) (make-irritants-condition . tm2c51) (make-implementation-restriction-violation . tm2c50) (make-error . tm2c4f) (make-assertion-violation . tm2c4e) (lexical-violation? . tm2c4d) (irritants-condition? . tm2c4c) (implementation-restriction-violation? . tm2c4b) (error? . tm2c4a) (condition-who . tm2c49) (condition-predicate . tm2c48) (condition-message . tm2c47) (condition-irritants . tm2c46) (condition-accessor . tm2c45) (condition . tm2c44) (assertion-violation? . tm2c43) (condition? . tm2c42) (utf32->string . tm2c41) (utf16->string . tm2c40) (utf8->string . tm2c3f) (uint-list->bytevector . tm2c3e) (u8-list->bytevector . tm2c3d) (string->utf8 . tm2c3c) (string->utf32 . tm2c3b) (string->utf16 . tm2c3a) (sint-list->bytevector . tm2c39) (native-endianness . tm2c38) (bytevector? . tm2c37) (bytevector=? . tm2c36) (bytevector-uint-set! . tm2c35) (bytevector-uint-ref . tm2c34) (bytevector-u8-set! . tm2c33) (bytevector-u8-ref . tm2c32) (bytevector-u64-set! . tm2c31) (bytevector-u64-ref . tm2c30) (bytevector-u64-native-set! . tm2c2f) (bytevector-u64-native-ref . tm2c2e) (bytevector-u32-set! . tm2c2d) (bytevector-u32-ref . tm2c2c) (bytevector-u32-native-set! . tm2c2b) (bytevector-u32-native-ref . tm2c2a) (bytevector-u16-set! . tm2c29) (bytevector-u16-ref . tm2c28) (bytevector-u16-native-set! . tm2c27) (bytevector-u16-native-ref . tm2c26) (bytevector-sint-set! . tm2c25) (bytevector-sint-ref . tm2c24) (bytevector-s8-set! . tm2c23) (bytevector-s8-ref . tm2c22) (bytevector-s64-set! . tm2c21) (bytevector-s64-ref . tm2c20) (bytevector-s64-native-set! . tm2c1f) (bytevector-s64-native-ref . tm2c1e) (bytevector-s32-set! . tm2c1d) (bytevector-s32-ref . tm2c1c) (bytevector-s32-native-set! . tm2c1b) (bytevector-s32-native-ref . tm2c1a) (bytevector-s16-set! . tm2c19) (bytevector-s16-ref . tm2c18) (bytevector-s16-native-set! . tm2c17) (bytevector-s16-native-ref . tm2c16) (bytevector-length . tm2c15) (bytevector-ieee-single-ref . tm2c14) (bytevector-ieee-single-set! . tm2c13) (bytevector-ieee-single-native-set! . tm2c12) (bytevector-ieee-single-native-ref . tm2c11) (bytevector-ieee-double-set! . tm2c10) (bytevector-ieee-double-ref . tm2c0f) (bytevector-ieee-double-native-set! . tm2c0e) (bytevector-ieee-double-native-ref . tm2c0d) (bytevector-fill! . tm2c0c) (bytevector-copy! . tm2c0b) (bytevector-copy . tm2c0a) (bytevector->uint-list . tm2c09) (bytevector->u8-list . tm2c08) (bytevector->sint-list . tm2c07) (no-nans-violation? . tm2c06) (no-infinities-violation? . tm2c05) (make-no-nans-violation . tm2c04) (make-no-infinities-violation . tm2c03) (real->flonum . tm2c02) (flzero? . tm2c01) (fltruncate . tm2c00) (fltan . tm2bff) (flsqrt . tm2bfe) (flsin . tm2bfd) (flround . tm2bfc) (flpositive? . tm2bfb) (flonum? . tm2bfa) (flodd? . tm2bf9) (flnumerator . tm2bf8) (flnegative? . tm2bf7) (flnan? . tm2bf6) (flmod0 . tm2bf5) (flmod . tm2bf4) (flmin . tm2bf3) (flmax . tm2bf2) (fllog . tm2bf1) (flinteger? . tm2bf0) (flinfinite? . tm2bef) (flfloor . tm2bee) (flfinite? . tm2bed) (flexpt . tm2bec) (flexp . tm2beb) (fleven? . tm2bea) (fldiv0-and-mod0 . tm2be9) (fldiv0 . tm2be8) (fldiv-and-mod . tm2be7) (fldiv . tm2be6) (fldenominator . tm2be5) (flcos . tm2be4) (flceiling . tm2be3) (flatan . tm2be2) (flasin . tm2be1) (flacos . tm2be0) (flabs . tm2bdf) (fl>? . tm2bde) (fl>=? . tm2bdd) (fl=? . tm2bdc) (fl<? . tm2bdb) (fl<=? . tm2bda) (fl/ . tm2bd9) (fl- . tm2bd8) (fl+ . tm2bd7) (fl* . tm2bd6) (fixnum->flonum . tm2bd5) (fxzero? . tm2bd4) (fxxor . tm2bd3) (fxrotate-bit-field . tm2bd2) (fxreverse-bit-field . tm2bd1) (fxpositive? . tm2bd0) (fxodd? . tm2bcf) (fxnot . tm2bce) (fxnegative? . tm2bcd) (fxmod0 . tm2bcc) (fxmod . tm2bcb) (fxmin . tm2bca) (fxmax . tm2bc9) (fxlength . tm2bc8) (fxior . tm2bc7) (fxif . tm2bc6) (fxfirst-bit-set . tm2bc5) (fxeven? . tm2bc4) (fxdiv0-and-mod0 . tm2bc3) (fxdiv0 . tm2bc2) (fxdiv-and-mod . tm2bc1) (fxdiv . tm2bc0) (fxcopy-bit-field . tm2bbf) (fxcopy-bit . tm2bbe) (fxbit-set? . tm2bbd) (fxbit-field . tm2bbc) (fxbit-count . tm2bbb) (fxarithmetic-shift-right . tm2bba) (fxarithmetic-shift-left . tm2bb9) (fxarithmetic-shift . tm2bb8) (fxand . tm2bb7) (fx>? . tm2bb6) (fx>=? . tm2bb5) (fx=? . tm2bb4) (fx<? . tm2bb3) (fx<=? . tm2bb2) (fx-/carry . tm2bb1) (fx- . tm2bb0) (fx+/carry . tm2baf) (fx+ . tm2bae) (fx*/carry . tm2bad) (fx* . tm2bac) (greatest-fixnum . tm2bab) (least-fixnum . tm2baa) (fixnum-width . tm2ba9) (fixnum? . tm2ba8) (bitwise-rotate-bit-field . tm2ba7) (bitwise-reverse-bit-field . tm2ba6) (bitwise-length . tm2ba5) (bitwise-if . tm2ba4) (bitwise-first-bit-set . tm2ba3) (bitwise-copy-bit-field . tm2ba2) (bitwise-copy-bit . tm2ba1) (bitwise-bit-set? . tm2ba0) (bitwise-bit-field . tm2b9f) (bitwise-bit-count . tm2b9e) (bitwise-xor . tm2b9d) (bitwise-ior . tm2b9c) (bitwise-and . tm2b9b) (bitwise-not . tm2b9a) (bitwise-arithmetic-shift-right . tm2b99) (bitwise-arithmetic-shift-left . tm2b98) (bitwise-arithmetic-shift . tm2b97) (zero? . tm2b96) (vector? . tm2b95) (vector-set! . tm2b94) (vector-ref . tm2b93) (vector-map . tm2b92) (vector-length . tm2b91) (vector-for-each . tm2b90) (vector-fill! . tm2b8f) (vector->list . tm2b8e) (vector . tm2b8d) (values . tm2b8c) (truncate . tm2b8b) (tan . tm2b8a) (symbol? . tm2b89) (symbol=? . tm2b88) (symbol->string . tm2b87) (substring . tm2b86) (string? . tm2b85) (string>? . tm2b84) (string>=? . tm2b83) (string=? . tm2b82) (string<? . tm2b81) (string<=? . tm2b80) (string-ref . tm2b7f) (string-length . tm2b7e) (string-for-each . tm2b7d) (string-copy . tm2b7c) (string-append . tm2b7b) (string->symbol . tm2b7a) (string->number . tm2b79) (string->list . tm2b78) (string . tm2b77) (sqrt . tm2b76) (sin . tm2b75) (round . tm2b74) (reverse . tm2b73) (real? . tm2b72) (real-valued? . tm2b71) (real-part . tm2b70) (rationalize . tm2b6f) (rational? . tm2b6e) (rational-valued? . tm2b6d) (procedure? . tm2b6c) (positive? . tm2b6b) (pair? . tm2b6a) (odd? . tm2b69) (numerator . tm2b68) (number? . tm2b67) (number->string . tm2b66) (null? . tm2b65) (not . tm2b64) (negative? . tm2b63) (nan? . tm2b62) (min . tm2b61) (max . tm2b60) (map . tm2b5f) (make-vector . tm2b5e) (make-string . tm2b5d) (make-rectangular . tm2b5c) (make-polar . tm2b5b) (magnitude . tm2b5a) (log . tm2b59) (list? . tm2b58) (list-tail . tm2b57) (list-ref . tm2b56) (list->vector . tm2b55) (list->string . tm2b54) (list . tm2b53) (length . tm2b52) (lcm . tm2b51) (integer? . tm2b50) (integer-valued? . tm2b4f) (integer->char . tm2b4e) (infinite? . tm2b4d) (inexact? . tm2b4c) (inexact . tm2b4b) (imag-part . tm2b4a) (gcd . tm2b49) (for-each . tm2b48) (floor . tm2b47) (finite? . tm2b46) (expt . tm2b45) (exp . tm2b44) (exact? . tm2b43) (exact-integer-sqrt . tm2b42) (exact . tm2b41) (even? . tm2b40) (error . tm2b3f) (eqv? . tm2b3e) (equal? . tm2b3d) (eq? . tm2b3c) (dynamic-wind . tm2b3b) (div0-and-mod0 . tm2b3a) (mod0 . tm2b39) (div0 . tm2b38) (div-and-mod . tm2b37) (mod . tm2b36) (div . tm2b35) (denominator . tm2b34) (cos . tm2b33) (cons . tm2b32) (complex? . tm2b31) (char? . tm2b30) (char>? . tm2b2f) (char>=? . tm2b2e) (char=? . tm2b2d) (char<? . tm2b2c) (char<=? . tm2b2b) (char->integer . tm2b2a) (ceiling . tm2b29) (call-with-values . tm2b28) (call/cc . tm2b27) (call-with-current-continuation . tm2b26) (cddddr . tm2b25) (cdddar . tm2b24) (cddadr . tm2b23) (cddaar . tm2b22) (cdaddr . tm2b21) (cdadar . tm2b20) (cdaadr . tm2b1f) (cdaaar . tm2b1e) (cadddr . tm2b1d) (caddar . tm2b1c) (cadadr . tm2b1b) (cadaar . tm2b1a) (caaddr . tm2b19) (caadar . tm2b18) (caaadr . tm2b17) (caaaar . tm2b16) (cdddr . tm2b15) (cddar . tm2b14) (cdadr . tm2b13) (cdaar . tm2b12) (caddr . tm2b11) (cadar . tm2b10) (caadr . tm2b0f) (caaar . tm2b0e) (cddr . tm2b0d) (cdar . tm2b0c) (cadr . tm2b0b) (caar . tm2b0a) (cdr . tm2b09) (car . tm2b08) (boolean? . tm2b07) (boolean=? . tm2b06) (atan . tm2b05) (assertion-violation . tm2b04) (assertion-error . tme67) (asin . tm2b03) (apply . tm2b02) (append . tm2b01) (angle . tm2b00) (acos . tm2aff) (abs . tm2afe) (/ . tm2afd) (* . tm2afc) (- . tm2afb) (+ . tm2afa) (>= . tm2af9) (> . tm2af8) (= . tm2af7) (<= . tm2af6) (< . tm2af5) (library . tm2af4) (&no-nans . tm2af3) (&no-infinities . tm2af2) (&i/o-encoding . tm2af1) (&i/o-decoding . tm2af0) (&i/o-port . tm2aef) (&i/o-file-does-not-exist . tm2aee) (&i/o-file-already-exists . tm2aed) (&i/o-file-is-read-only . tm2aec) (&i/o-file-protection . tm2aeb) (&i/o-filename . tm2aea) (&i/o-invalid-position . tm2ae9) (&i/o-write . tm2ae8) (&i/o-read . tm2ae7) (&i/o . tm2ae6) (&undefined . tm2ae5) (&syntax . tm2ae4) (&lexical . tm2ae3) (&implementation-restriction . tm2ae2) (&non-continuable . tm2ae1) (&who . tm2ae0) (&irritants . tm2adf) (&assertion . tm2ade) (&violation . tm2add) (&error . tm2adc) (&serious . tm2adb) (&warning . tm2ada) (&message . tm2ad9) (&condition . tm2ad8) (define-condition-type . tm2ad7) (define-enumeration . tm2ad6) (define-record-type . tm2ad5) (parent-rtd . tm2ad4) (nongenerative . tm2ad3) (opaque . tm2ad2) (sealed . tm2ad1) (protocol . tm2ad0) (parent . tm2acf) (immutable . tm2ace) (mutable . tm2acd) (fields . tm2acc) (error-handling-mode . tm2acb) (file-options . tm2aca) (buffer-mode . tm2ac9) (eol-style . tm2ac8) (guard . tm2ac7) (trace-define . tm2ac6) (trace-lambda . tm2ac5) (unsyntax-splicing . tm2ac4) (unsyntax . tm2ac3) (unquote-splicing . tm2ac2) (unquote . tm2ac1) (_ . tm2ac0) (else . tm2abf) (=> . tm2abe) (... . tm2abd) (assert . tm2abc) (endianness . tm2abb) (delay . tm2aba) (time . tm2ab9) (do . tm2ab8) (cond . tm2ab7) (let* . tm2ab6) (let*-values . tm2ab5) (let-values . tm2ab4) (identifier-syntax . tm2ab3) (with-syntax . tm2ab2) (quasisyntax . tm2ab1) (quasiquote . tm2ab0) (syntax-rules . tm2aaf) (include . tm2aae) (define-struct . tm2aad) (record-constructor-descriptor . tm2aac) (record-type-descriptor . tm2aab) (case . tm2aaa) (parameterize . tm2aa9) (unless . tm2aa8) (when . tm2aa7) (or . tm2aa6) (and . tm2aa5) (if . tm2aa4) (let . tm2aa3) (letrec* . tm2aa2) (letrec . tm2aa1) (type-descriptor . tm2aa0) (case-lambda . tm2a9f) (lambda . tm2a9e) (syntax . tm2a9d) (syntax-case . tm2a9c) (quote . tm2a9b) (foreign-call . tm2a9a) (letrec-syntax . tm2a99) (let-syntax . tm2a98) (set! . tm2a97) (import . tm2a96) (begin . tm2a95) (module . tm2a94) (define-syntax . tm2a93) (define . tm2a92)) '((tm2e47 core-prim . &no-nans-rcd) (tm2e46 core-prim . &no-nans-rtd) (tm2e45 core-prim . &no-infinities-rcd) (tm2e44 core-prim . &no-infinities-rtd) (tm2e43 core-prim . &i/o-encoding-rcd) (tm2e42 core-prim . &i/o-encoding-rtd) (tm2e41 core-prim . &i/o-decoding-rcd) (tm2e40 core-prim . &i/o-decoding-rtd) (tm2e3f core-prim . &i/o-port-rcd) (tm2e3e core-prim . &i/o-port-rtd) (tm2e3d core-prim . &i/o-file-does-not-exist-rcd) (tm2e3c core-prim . &i/o-file-does-not-exist-rtd) (tm2e3b core-prim . &i/o-file-already-exists-rcd) (tm2e3a core-prim . &i/o-file-already-exists-rtd) (tm2e39 core-prim . &i/o-file-is-read-only-rcd) (tm2e38 core-prim . &i/o-file-is-read-only-rtd) (tm2e37 core-prim . &i/o-file-protection-rcd) (tm2e36 core-prim . &i/o-file-protection-rtd) (tm2e35 core-prim . &i/o-filename-rcd) (tm2e34 core-prim . &i/o-filename-rtd) (tm2e33 core-prim . &i/o-invalid-position-rcd) (tm2e32 core-prim . &i/o-invalid-position-rtd) (tm2e31 core-prim . &i/o-write-rcd) (tm2e30 core-prim . &i/o-write-rtd) (tm2e2f core-prim . &i/o-read-rcd) (tm2e2e core-prim . &i/o-read-rtd) (tm2e2d core-prim . &i/o-rcd) (tm2e2c core-prim . &i/o-rtd) (tm2e2b core-prim . &undefined-rcd) (tm2e2a core-prim . &undefined-rtd) (tm2e29 core-prim . &syntax-rcd) (tm2e28 core-prim . &syntax-rtd) (tm2e27 core-prim . &lexical-rcd) (tm2e26 core-prim . &lexical-rtd) (tm2e25 core-prim . &implementation-restriction-rcd) (tm2e24 core-prim . &implementation-restriction-rtd) (tm2e23 core-prim . &non-continuable-rcd) (tm2e22 core-prim . &non-continuable-rtd) (tm2e21 core-prim . &who-rcd) (tm2e20 core-prim . &who-rtd) (tm2e1f core-prim . &irritants-rcd) (tm2e1e core-prim . &irritants-rtd) (tm2e1d core-prim . &assertion-rcd) (tm2e1c core-prim . &assertion-rtd) (tm2e1b core-prim . &violation-rcd) (tm2e1a core-prim . &violation-rtd) (tm2e19 core-prim . &error-rcd) (tm2e18 core-prim . &error-rtd) (tm2e17 core-prim . &serious-rcd) (tm2e16 core-prim . &serious-rtd) (tm2e15 core-prim . &warning-rcd) (tm2e14 core-prim . &warning-rtd) (tm2e13 core-prim . &message-rcd) (tm2e12 core-prim . &message-rtd) (tm2e11 core-prim . &condition-rcd) (tm2e10 core-prim . &condition-rtd) (tme69 core-prim . syntax-error) (tmd8d core-prim . syntax-dispatch) (tm2e0f core-prim . pretty-print) (tm2e0e core-prim . eval-core) (tm2e0d core-prim . set-symbol-value!) (tm2e0c core-prim . symbol-value) (tm2e0b core-prim . gensym) (tm2e0a core-prim . void) (tm292c core-prim . load) (tme7b core-prim . interaction-environment) (tm2e09 core-prim . char-ready?) (tm2e08 core-prim . regexp?) (tm2e07 core-prim . read-line) (tm2e06 core-prim . gensym-prefix-set!) (tm2e05 core-prim . ungensym) (tm2e04 core-prim . alist->eq-hash-table) (tm2e03 core-prim . assoc-ref) (tm2e02 core-prim . print) (tm2e01 core-prim . format) (tm2e00 core-prim . host-os) (tm7cc core-prim . library-path) (tm2dff core-prim . standard-library-path) (tm2dfe core-prim . ssl-supported?) (tm2dfd core-prim . ssl-socket?) (tm2dfc core-prim . socket-sslize!) (tm2dfb core-prim . %monapi-stream-read) (tm2dfa core-prim . %monapi-stream-write) (tm2df9 core-prim . %monapi-stream-handle) (tm2df8 core-prim . %monapi-make-stream) (tm2df7 core-prim . %monapi-name-add!) (tm2df6 core-prim . %monapi-message-receive) (tm2df5 core-prim . %monapi-name-whereis) (tm2df4 core-prim . %monapi-message-reply) (tm2df3 core-prim . %monapi-message-send-receive) (tm2df2 core-prim . %monapi-message-send) (tm2df1 core-prim . process-terminate!) (tm2df0 core-prim . process-list) (tm2def core-prim . file-newer?) (tm2dee core-prim . stat-mtime) (tm2ded core-prim . write-to-file) (tm2dec core-prim . file->list) (tm2deb core-prim . file->string) (tm2dea core-prim . digit->integer) (tm2de9 core-prim . call-with-string-input-port) (tm2de8 core-prim . call-with-string-io) (tm2de7 core-prim . string-split) (tm2de6 core-prim . bytevector-for-each) (tm2de5 core-prim . string->regexp) (tm2de4 core-prim . rxmatch) (tm2de3 core-prim . regexp-replace-all) (tm2de2 core-prim . hashtable-fold-left) (tm2de1 core-prim . hashtable-for-each) (tm5b6 core-prim . mosh-cache-dir) (tm2de0 core-prim . %call-process) (tm2ddf core-prim . local-tz-offset) (tm2dde core-prim . microseconds) (tm2ddd core-prim . directory-list) (tm2ddc core-prim . set-current-directory!) (tm2ddb core-prim . expand-path) (tm2dda core-prim . current-directory) (tm2dd9 core-prim . %getpid) (tm2dd8 core-prim . %spawn) (tm2dd7 core-prim . %waitpid) (tm2dd6 core-prim . simple-struct-name) (tm2dd5 core-prim . simple-struct-set!) (tm2dd4 core-prim . simple-struct-ref) (tm2dd3 core-prim . make-simple-struct) (tm2dd2 core-prim . simple-struct?) (tm2dd1 core-prim . pointer-ref-c-int64) (tm2dd0 core-prim . pointer-ref-c-int32) (tm2dcf core-prim . pointer-ref-c-int16) (tm2dce core-prim . pointer-ref-c-int8) (tm2dcd core-prim . pointer-ref-c-uint64) (tm2dcc core-prim . pointer-ref-c-uint32) (tm2dcb core-prim . pointer-ref-c-uint16) (tm2dca core-prim . pointer-ref-c-uint8) (tm2dc9 core-prim . pointer-set-c-uint64!) (tm2dc8 core-prim . pointer-set-c-uint32!) (tm2dc7 core-prim . pointer-set-c-uint16!) (tm2dc6 core-prim . pointer-set-c-uint8!) (tm2dc5 core-prim . pointer-set-c-int64!) (tm2dc4 core-prim . pointer-set-c-int32!) (tm2dc3 core-prim . pointer-set-c-int16!) (tm2dc2 core-prim . pointer-set-c-int8!) (tm2dc1 core-prim . pointer-set-c-pointer!) (tm2dc0 core-prim . pointer-set-c-double!) (tm2dbf core-prim . pointer-set-c-float!) (tm2dbe core-prim . pointer-set-c-long-long!) (tm2dbd core-prim . pointer-set-c-long!) (tm2dbc core-prim . pointer-set-c-int!) (tm2dbb core-prim . pointer-set-c-short!) (tm2dba core-prim . pointer-set-c-char!) (tm2db9 core-prim . pointer-ref-c-pointer) (tm2db8 core-prim . pointer-ref-c-double) (tm2db7 core-prim . pointer-ref-c-float) (tm2db6 core-prim . pointer-ref-c-unsigned-long-long) (tm2db5 core-prim . pointer-ref-c-signed-long-long) (tm2db4 core-prim . pointer-ref-c-unsigned-long) (tm2db3 core-prim . pointer-ref-c-signed-long) (tm2db2 core-prim . pointer-ref-c-unsigned-int) (tm2db1 core-prim . pointer-ref-c-signed-int) (tm2db0 core-prim . pointer-ref-c-unsigned-short) (tm2daf core-prim . pointer-ref-c-signed-short) (tm2dae core-prim . pointer-ref-c-unsigned-char) (tm2dad core-prim . pointer-ref-c-signed-char) (tm2dac core-prim . pointer->integer) (tm2dab core-prim . integer->pointer) (tm2daa core-prim . pointer?) (tm2da9 core-prim . shared-errno) (tm2da8 core-prim . %ffi-free-c-callback-trampoline) (tm2da7 core-prim . %ffi-make-c-callback-trampoline) (tm2da6 core-prim . %ffi-free) (tm2da5 core-prim . %ffi-malloc) (tm2da4 core-prim . %ffi-supported?) (tm2da3 core-prim . %ffi-pointer->string) (tm2da2 core-prim . %ffi-call) (tm2da1 core-prim . %ffi-lookup) (tm2da0 core-prim . %ffi-open) (tm2d9f core-prim . null-terminated-utf8->string) (tm2d9e core-prim . null-terminated-bytevector->string) (tm2d9d core-prim . %exec) (tm2d9c core-prim . %fork) (tm2d9b core-prim . %pipe) (tm2d9a core-prim . p) (tm2d99 core-prim . open-output-string) (tm2d98 core-prim . get-output-string) (tm2d97 core-prim . file-stat-ctime) (tm2d96 core-prim . file-stat-atime) (tm2d95 core-prim . file-stat-mtime) (tm2d94 core-prim . file-size-in-bytes) (tm2d93 core-prim . file-writable?) (tm2d92 core-prim . file-executable?) (tm2d91 core-prim . file-readable?) (tm2d90 core-prim . file-regular?) (tm2d8f core-prim . file-symbolic-link?) (tm2d8e core-prim . file-directory?) (tm2d8d core-prim . create-symbolic-link) (tm2d8c core-prim . rename-file) (tm2d8b core-prim . delete-directory) (tm2d8a core-prim . create-directory) (tm2d89 core-prim . create-mosh-cache-dir) (tm2d88 core-prim . get-environment-variables) (tm2d87 core-prim . current-exception-handler) (tm2d86 core-prim . get-environment-variable) (tm2d85 core-prim . join-wraps) (tm2d84 core-prim . id->real-label) (tm2d83 core-prim . same-marks?) (tm2d82 core-prim . same-marks*?) (tm2d81 core-prim . get-timeofday) (tm2d80 core-prim . get-command-line) (tm2d7f core-prim . sys-display) (tm2d7e core-prim . whereis) (tm2d7d core-prim . register) (tm2d7c core-prim . vm-join!) (tm2d7b core-prim . vm-set-value!) (tm2d7a core-prim . vm?) (tm2d79 core-prim . main-vm?) (tm2d78 core-prim . vm-eval) (tm2d77 core-prim . vm-self) (tm2d76 core-prim . vm-start!) (tm2d75 core-prim . make-vm) (tm2d74 core-prim . mutex-try-lock!) (tm2d73 core-prim . mutex-unlock!) (tm2d72 core-prim . mutex-lock!) (tm2d71 core-prim . mutex?) (tm2d70 core-prim . make-mutex) (tm2d6f core-prim . condition-variable-notify-all!) (tm2d6e core-prim . condition-variable-notify!) (tm2d6d core-prim . condition-variable-wait!) (tm2d6c core-prim . make-condition-variable) (tm2d6b core-prim . write/ss) (tm2d6a core-prim . mosh-executable-path) (tm2d69 core-prim . make-file-options) (tm2d68 core-prim . source-info) (tm2d67 core-prim . make-compiler-instruction) (tm2d66 core-prim . make-instruction) (tm2d65 core-prim . set-annotation!) (tm2d64 core-prim . get-annotation) (tm2d63 core-prim . annotated-pair?) (tm2d62 core-prim . annotated-cons) (tm2d61 core-prim . set-source-info!) (tm2d60 core-prim . bignum?) (tm2d5f core-prim . fast-equal?) (tm2d5e core-prim . fasl-read) (tm2d5d core-prim . fasl-write) (tm2d5c core-prim . time-usage) (tm2d5b core-prim . os-constant) (tm2d5a core-prim . condition-printer) (tm2d59 core-prim . disasm) (tm5b4 core-prim . make-parameter) (tm2d58 core-prim . socket-port) (tm2d57 core-prim . socket-shutdown) (tm2d56 core-prim . socket-close) (tm2d55 core-prim . socket-send) (tm2d54 core-prim . socket-recv!) (tm2d53 core-prim . socket-recv) (tm2d52 core-prim . make-server-socket) (tm2d51 core-prim . make-client-socket) (tm2d50 core-prim . socket-accept) (tm2d4f core-prim . socket?) (tm2d4e core-prim . string-upcase) (tm2d4d core-prim . string-titlecase) (tm2d4c core-prim . string-normalize-nfkd) (tm2d4b core-prim . string-normalize-nfkc) (tm2d4a core-prim . string-normalize-nfd) (tm2d49 core-prim . string-normalize-nfc) (tm2d48 core-prim . string-foldcase) (tm2d47 core-prim . string-downcase) (tm2d46 core-prim . string-ci>?) (tm2d45 core-prim . string-ci>=?) (tm2d44 core-prim . string-ci=?) (tm2d43 core-prim . string-ci<?) (tm2d42 core-prim . string-ci<=?) (tm2d41 core-prim . char-whitespace?) (tm2d40 core-prim . char-upper-case?) (tm2d3f core-prim . char-title-case?) (tm2d3e core-prim . char-numeric?) (tm2d3d core-prim . char-lower-case?) (tm2d3c core-prim . char-general-category) (tm2d3b core-prim . char-upcase) (tm2d3a core-prim . char-titlecase) (tm2d39 core-prim . char-foldcase) (tm2d38 core-prim . char-downcase) (tm2d37 core-prim . char-ci>?) (tm2d36 core-prim . char-ci>=?) (tm2d35 core-prim . char-ci=?) (tm2d34 core-prim . char-ci<?) (tm2d33 core-prim . char-ci<=?) (tm2d32 core-prim . char-alphabetic?) (tmbb8 core-prim . make-variable-transformer) (tme6f core-prim . identifier?) (tme5b core-prim . generate-temporaries) (tme5d core-prim . free-identifier=?) (tme73 core-prim . syntax->datum) (tme71 core-prim . datum->syntax) (tme5f core-prim . bound-identifier=?) (tm2d31 core-prim . record-type-descriptor?) (tm2d30 core-prim . record-predicate) (tm2d2f core-prim . record-mutator) (tm2d2e core-prim . record-constructor) (tm2d2d core-prim . record-accessor) (tm2d2c core-prim . make-record-type-descriptor) (tm2d2b core-prim . make-record-constructor-descriptor) (tm2d2a core-prim . record?) (tm2d29 core-prim . record-type-uid) (tm2d28 core-prim . record-type-sealed?) (tm2d27 core-prim . record-type-parent) (tm2d26 core-prim . record-type-opaque?) (tm2d25 core-prim . record-type-name) (tm2d24 core-prim . record-type-generative?) (tm2d23 core-prim . record-type-field-names) (tm2d22 core-prim . record-rtd) (tm2d21 core-prim . record-field-mutable?) (tm2d20 core-prim . delete-file) (tm2d1f core-prim . file-exists?) (tm2d1e core-prim . vector-sort!) (tm2d1d core-prim . vector-sort) (tm2d1c core-prim . list-sort) (tm2d1b core-prim . symbol-hash) (tm2d1a core-prim . string-ci-hash) (tm2d19 core-prim . string-hash) (tm2d18 core-prim . equal-hash) (tm2d17 core-prim . hashtable-equivalence-function) (tm2d16 core-prim . make-hashtable) (tm2d15 core-prim . hashtable-hash-function) (tm2d14 core-prim . make-eqv-hashtable) (tm2d13 core-prim . make-eq-hashtable) (tm2d12 core-prim . hashtable?) (tm2d11 core-prim . hashtable-update!) (tm2d10 core-prim . hashtable-size) (tm2d0f core-prim . hashtable-set!) (tm2d0e core-prim . hashtable-ref) (tm2d0d core-prim . hashtable-mutable?) (tm2d0c core-prim . hashtable-keys) (tm2d0b core-prim . hashtable-entries) (tm2d0a core-prim . hashtable-delete!) (tm2d09 core-prim . hashtable-copy) (tm2d08 core-prim . hashtable-contains?) (tm2d07 core-prim . hashtable-clear!) (tm2d06 core-prim . call-with-output-file) (tm2d05 core-prim . call-with-input-file) (tm2d04 core-prim . write-char) (tm2d03 core-prim . write) (tm2d02 core-prim . with-output-to-file) (tm2d01 core-prim . with-input-from-file) (tm2d00 core-prim . read-char) (tm2cff core-prim . read) (tm2cfe core-prim . peek-char) (tm2cfd core-prim . open-output-file) (tm2cfc core-prim . open-input-file) (tm2cfb core-prim . newline) (tm2cfa core-prim . display) (tm2cf9 core-prim . close-output-port) (tm2cf8 core-prim . close-input-port) (tm2cf7 core-prim . eof-object?) (tm2cf6 core-prim . eof-object) (tm2cf5 core-prim . current-error-port) (tm2cf4 core-prim . current-output-port) (tm2cf3 core-prim . current-input-port) (tm2cf2 core-prim . output-port?) (tm2cf1 core-prim . input-port?) (tm2cf0 core-prim . utf-8-codec) (tm2cef core-prim . utf-16-codec) (tm2cee core-prim . transcoder-error-handling-mode) (tm2ced core-prim . transcoder-eol-style) (tm2cec core-prim . transcoder-codec) (tm2ceb core-prim . transcoded-port) (tm2cea core-prim . textual-port?) (tm2ce9 core-prim . string->bytevector) (tm2ce8 core-prim . standard-output-port) (tm2ce7 core-prim . standard-input-port) (tm2ce6 core-prim . standard-error-port) (tm2ce5 core-prim . set-port-position!) (tm2ce4 core-prim . put-u8) (tm2ce3 core-prim . put-string) (tm2ce2 core-prim . put-datum) (tm2ce1 core-prim . put-char) (tm2ce0 core-prim . put-bytevector) (tm2cdf core-prim . port?) (tm2cde core-prim . port-transcoder) (tm2cdd core-prim . port-position) (tm2cdc core-prim . port-has-set-port-position!?) (tm2cdb core-prim . port-has-port-position?) (tm2cda core-prim . port-eof?) (tm2cd9 core-prim . output-port-buffer-mode) (tm2cd8 core-prim . open-string-output-port) (tm2cd7 core-prim . open-string-input-port) (tm2cd6 core-prim . open-file-output-port) (tm2cd5 core-prim . open-file-input/output-port) (tm2cd4 core-prim . open-file-input-port) (tm2cd3 core-prim . open-bytevector-output-port) (tm2cd2 core-prim . open-bytevector-input-port) (tm2cd1 core-prim . native-transcoder) (tm2cd0 core-prim . native-eol-style) (tm2ccf core-prim . make-transcoder) (tm2cce core-prim . latin-1-codec) (tm2ccd core-prim . make-i/o-write-error) (tm2ccc core-prim . make-i/o-read-error) (tm2ccb core-prim . make-i/o-port-error) (tm2cca core-prim . make-i/o-invalid-position-error) (tm2cc9 core-prim . make-i/o-filename-error) (tm2cc8 core-prim . make-i/o-file-protection-error) (tm2cc7 core-prim . make-i/o-file-is-read-only-error) (tm2cc6 core-prim . make-i/o-file-does-not-exist-error) (tm2cc5 core-prim . make-i/o-file-already-exists-error) (tm2cc4 core-prim . make-i/o-error) (tm2cc3 core-prim . make-i/o-encoding-error) (tm2cc2 core-prim . make-i/o-decoding-error) (tm2cc1 core-prim . make-custom-textual-output-port) (tm2cc0 core-prim . make-custom-textual-input/output-port) (tm2cbf core-prim . make-custom-textual-input-port) (tm2cbe core-prim . make-custom-binary-output-port) (tm2cbd core-prim . make-custom-binary-input/output-port) (tm2cbc core-prim . make-custom-binary-input-port) (tm2cbb core-prim . make-bytevector) (tm2cba core-prim . lookahead-u8) (tm2cb9 core-prim . lookahead-char) (tm2cb8 core-prim . i/o-write-error?) (tm2cb7 core-prim . i/o-read-error?) (tm2cb6 core-prim . i/o-port-error?) (tm2cb5 core-prim . i/o-invalid-position-error?) (tm2cb4 core-prim . i/o-filename-error?) (tm2cb3 core-prim . i/o-file-protection-error?) (tm2cb2 core-prim . i/o-file-is-read-only-error?) (tm2cb1 core-prim . i/o-file-does-not-exist-error?) (tm2cb0 core-prim . i/o-file-already-exists-error?) (tm2caf core-prim . i/o-error?) (tm2cae core-prim . i/o-error-position) (tm2cad core-prim . i/o-error-port) (tm2cac core-prim . i/o-error-filename) (tm2cab core-prim . i/o-encoding-error?) (tm2caa core-prim . i/o-encoding-error-char) (tm2ca9 core-prim . i/o-decoding-error?) (tm2ca8 core-prim . get-u8) (tm2ca7 core-prim . get-string-n!) (tm2ca6 core-prim . get-string-n) (tm2ca5 core-prim . get-string-all) (tm2ca4 core-prim . get-line) (tm2ca3 core-prim . get-datum) (tm2ca2 core-prim . get-char) (tm2ca1 core-prim . get-bytevector-some) (tm2ca0 core-prim . get-bytevector-n!) (tm2c9f core-prim . get-bytevector-n) (tm2c9e core-prim . get-bytevector-all) (tm2c9d core-prim . flush-output-port) (tm2c9c core-prim . close-port) (tme49 core-prim . scheme-report-environment) (tm2c9b core-prim . quotient) (tme47 core-prim . null-environment) (tm2c9a core-prim . remainder) (tm2c99 core-prim . modulo) (tm2c98 core-prim . inexact->exact) (tm2c97 core-prim . force) (tm2c96 core-prim . exact->inexact) (tm2c95 core-prim . make-promise) (tm2c94 core-prim . exit) (tm2926 core-prim . command-line) (tm2c93 core-prim . string-fill!) (tm2c92 core-prim . string-set!) (tm2c91 core-prim . set-cdr!) (tm2c90 core-prim . set-car!) (tm2c8f core-prim . remove) (tm2c8e core-prim . remv) (tm2c8d core-prim . remp) (tm2c8c core-prim . remq) (tm2c8b core-prim . partition) (tm2c8a core-prim . memv) (tm2c89 core-prim . memq) (tm2c88 core-prim . memp) (tm2c87 core-prim . member) (tm2c86 core-prim . exists) (tm2c85 core-prim . for-all) (tm2c84 core-prim . fold-right) (tm2c83 core-prim . fold-left) (tm2c82 core-prim . find) (tm2c81 core-prim . filter) (tm2c80 core-prim . cons*) (tm2c7f core-prim . assv) (tm2c7e core-prim . assq) (tm2c7d core-prim . assp) (tm2c7c core-prim . assoc) (tm2c7b core-prim . call-with-string-output-port) (tm2c7a core-prim . call-with-port) (tm2c79 core-prim . call-with-bytevector-output-port) (tm2c78 core-prim . bytevector->string) (tm2c77 core-prim . buffer-mode?) (tm2c76 core-prim . binary-port?) (tm2c75 core-prim . with-exception-handler) (tm2c74 core-prim . raise-continuable) (tm2c73 core-prim . raise) (tme4d core-prim . eval) (tme45 core-prim . environment) (tm2c72 core-prim . make-enumeration) (tm2c71 core-prim . enum-set=?) (tm2c70 core-prim . enum-set-universe) (tm2c6f core-prim . enum-set-union) (tm2c6e core-prim . enum-set-subset?) (tm2c6d core-prim . enum-set-projection) (tm2c6c core-prim . enum-set-member?) (tm2c6b core-prim . enum-set-intersection) (tm2c6a core-prim . enum-set-indexer) (tm2c69 core-prim . enum-set-difference) (tm2c68 core-prim . enum-set-constructor) (tm2c67 core-prim . enum-set-complement) (tm2c66 core-prim . enum-set->list) (tm2c65 core-prim . who-condition?) (tm2c64 core-prim . warning?) (tm2c63 core-prim . violation?) (tm2c62 core-prim . undefined-violation?) (tm2c61 core-prim . syntax-violation?) (tm2c60 core-prim . syntax-violation-subform) (tm2c5f core-prim . syntax-violation-form) (tme6d core-prim . syntax-violation) (tm2c5e core-prim . simple-conditions) (tm2c5d core-prim . serious-condition?) (tm2c5c core-prim . non-continuable-violation?) (tm2c5b core-prim . message-condition?) (tm2c5a core-prim . make-who-condition) (tm2c59 core-prim . make-warning) (tm2c58 core-prim . make-violation) (tm2c57 core-prim . make-undefined-violation) (tm2c56 core-prim . make-syntax-violation) (tm2c55 core-prim . make-serious-condition) (tm2c54 core-prim . make-non-continuable-violation) (tm2c53 core-prim . make-message-condition) (tm2c52 core-prim . make-lexical-violation) (tm2c51 core-prim . make-irritants-condition) (tm2c50 core-prim . make-implementation-restriction-violation) (tm2c4f core-prim . make-error) (tm2c4e core-prim . make-assertion-violation) (tm2c4d core-prim . lexical-violation?) (tm2c4c core-prim . irritants-condition?) (tm2c4b core-prim . implementation-restriction-violation?) (tm2c4a core-prim . error?) (tm2c49 core-prim . condition-who) (tm2c48 core-prim . condition-predicate) (tm2c47 core-prim . condition-message) (tm2c46 core-prim . condition-irritants) (tm2c45 core-prim . condition-accessor) (tm2c44 core-prim . condition) (tm2c43 core-prim . assertion-violation?) (tm2c42 core-prim . condition?) (tm2c41 core-prim . utf32->string) (tm2c40 core-prim . utf16->string) (tm2c3f core-prim . utf8->string) (tm2c3e core-prim . uint-list->bytevector) (tm2c3d core-prim . u8-list->bytevector) (tm2c3c core-prim . string->utf8) (tm2c3b core-prim . string->utf32) (tm2c3a core-prim . string->utf16) (tm2c39 core-prim . sint-list->bytevector) (tm2c38 core-prim . native-endianness) (tm2c37 core-prim . bytevector?) (tm2c36 core-prim . bytevector=?) (tm2c35 core-prim . bytevector-uint-set!) (tm2c34 core-prim . bytevector-uint-ref) (tm2c33 core-prim . bytevector-u8-set!) (tm2c32 core-prim . bytevector-u8-ref) (tm2c31 core-prim . bytevector-u64-set!) (tm2c30 core-prim . bytevector-u64-ref) (tm2c2f core-prim . bytevector-u64-native-set!) (tm2c2e core-prim . bytevector-u64-native-ref) (tm2c2d core-prim . bytevector-u32-set!) (tm2c2c core-prim . bytevector-u32-ref) (tm2c2b core-prim . bytevector-u32-native-set!) (tm2c2a core-prim . bytevector-u32-native-ref) (tm2c29 core-prim . bytevector-u16-set!) (tm2c28 core-prim . bytevector-u16-ref) (tm2c27 core-prim . bytevector-u16-native-set!) (tm2c26 core-prim . bytevector-u16-native-ref) (tm2c25 core-prim . bytevector-sint-set!) (tm2c24 core-prim . bytevector-sint-ref) (tm2c23 core-prim . bytevector-s8-set!) (tm2c22 core-prim . bytevector-s8-ref) (tm2c21 core-prim . bytevector-s64-set!) (tm2c20 core-prim . bytevector-s64-ref) (tm2c1f core-prim . bytevector-s64-native-set!) (tm2c1e core-prim . bytevector-s64-native-ref) (tm2c1d core-prim . bytevector-s32-set!) (tm2c1c core-prim . bytevector-s32-ref) (tm2c1b core-prim . bytevector-s32-native-set!) (tm2c1a core-prim . bytevector-s32-native-ref) (tm2c19 core-prim . bytevector-s16-set!) (tm2c18 core-prim . bytevector-s16-ref) (tm2c17 core-prim . bytevector-s16-native-set!) (tm2c16 core-prim . bytevector-s16-native-ref) (tm2c15 core-prim . bytevector-length) (tm2c14 core-prim . bytevector-ieee-single-ref) (tm2c13 core-prim . bytevector-ieee-single-set!) (tm2c12 core-prim . bytevector-ieee-single-native-set!) (tm2c11 core-prim . bytevector-ieee-single-native-ref) (tm2c10 core-prim . bytevector-ieee-double-set!) (tm2c0f core-prim . bytevector-ieee-double-ref) (tm2c0e core-prim . bytevector-ieee-double-native-set!) (tm2c0d core-prim . bytevector-ieee-double-native-ref) (tm2c0c core-prim . bytevector-fill!) (tm2c0b core-prim . bytevector-copy!) (tm2c0a core-prim . bytevector-copy) (tm2c09 core-prim . bytevector->uint-list) (tm2c08 core-prim . bytevector->u8-list) (tm2c07 core-prim . bytevector->sint-list) (tm2c06 core-prim . no-nans-violation?) (tm2c05 core-prim . no-infinities-violation?) (tm2c04 core-prim . make-no-nans-violation) (tm2c03 core-prim . make-no-infinities-violation) (tm2c02 core-prim . real->flonum) (tm2c01 core-prim . flzero?) (tm2c00 core-prim . fltruncate) (tm2bff core-prim . fltan) (tm2bfe core-prim . flsqrt) (tm2bfd core-prim . flsin) (tm2bfc core-prim . flround) (tm2bfb core-prim . flpositive?) (tm2bfa core-prim . flonum?) (tm2bf9 core-prim . flodd?) (tm2bf8 core-prim . flnumerator) (tm2bf7 core-prim . flnegative?) (tm2bf6 core-prim . flnan?) (tm2bf5 core-prim . flmod0) (tm2bf4 core-prim . flmod) (tm2bf3 core-prim . flmin) (tm2bf2 core-prim . flmax) (tm2bf1 core-prim . fllog) (tm2bf0 core-prim . flinteger?) (tm2bef core-prim . flinfinite?) (tm2bee core-prim . flfloor) (tm2bed core-prim . flfinite?) (tm2bec core-prim . flexpt) (tm2beb core-prim . flexp) (tm2bea core-prim . fleven?) (tm2be9 core-prim . fldiv0-and-mod0) (tm2be8 core-prim . fldiv0) (tm2be7 core-prim . fldiv-and-mod) (tm2be6 core-prim . fldiv) (tm2be5 core-prim . fldenominator) (tm2be4 core-prim . flcos) (tm2be3 core-prim . flceiling) (tm2be2 core-prim . flatan) (tm2be1 core-prim . flasin) (tm2be0 core-prim . flacos) (tm2bdf core-prim . flabs) (tm2bde core-prim . fl>?) (tm2bdd core-prim . fl>=?) (tm2bdc core-prim . fl=?) (tm2bdb core-prim . fl<?) (tm2bda core-prim . fl<=?) (tm2bd9 core-prim . fl/) (tm2bd8 core-prim . fl-) (tm2bd7 core-prim . fl+) (tm2bd6 core-prim . fl*) (tm2bd5 core-prim . fixnum->flonum) (tm2bd4 core-prim . fxzero?) (tm2bd3 core-prim . fxxor) (tm2bd2 core-prim . fxrotate-bit-field) (tm2bd1 core-prim . fxreverse-bit-field) (tm2bd0 core-prim . fxpositive?) (tm2bcf core-prim . fxodd?) (tm2bce core-prim . fxnot) (tm2bcd core-prim . fxnegative?) (tm2bcc core-prim . fxmod0) (tm2bcb core-prim . fxmod) (tm2bca core-prim . fxmin) (tm2bc9 core-prim . fxmax) (tm2bc8 core-prim . fxlength) (tm2bc7 core-prim . fxior) (tm2bc6 core-prim . fxif) (tm2bc5 core-prim . fxfirst-bit-set) (tm2bc4 core-prim . fxeven?) (tm2bc3 core-prim . fxdiv0-and-mod0) (tm2bc2 core-prim . fxdiv0) (tm2bc1 core-prim . fxdiv-and-mod) (tm2bc0 core-prim . fxdiv) (tm2bbf core-prim . fxcopy-bit-field) (tm2bbe core-prim . fxcopy-bit) (tm2bbd core-prim . fxbit-set?) (tm2bbc core-prim . fxbit-field) (tm2bbb core-prim . fxbit-count) (tm2bba core-prim . fxarithmetic-shift-right) (tm2bb9 core-prim . fxarithmetic-shift-left) (tm2bb8 core-prim . fxarithmetic-shift) (tm2bb7 core-prim . fxand) (tm2bb6 core-prim . fx>?) (tm2bb5 core-prim . fx>=?) (tm2bb4 core-prim . fx=?) (tm2bb3 core-prim . fx<?) (tm2bb2 core-prim . fx<=?) (tm2bb1 core-prim . fx-/carry) (tm2bb0 core-prim . fx-) (tm2baf core-prim . fx+/carry) (tm2bae core-prim . fx+) (tm2bad core-prim . fx*/carry) (tm2bac core-prim . fx*) (tm2bab core-prim . greatest-fixnum) (tm2baa core-prim . least-fixnum) (tm2ba9 core-prim . fixnum-width) (tm2ba8 core-prim . fixnum?) (tm2ba7 core-prim . bitwise-rotate-bit-field) (tm2ba6 core-prim . bitwise-reverse-bit-field) (tm2ba5 core-prim . bitwise-length) (tm2ba4 core-prim . bitwise-if) (tm2ba3 core-prim . bitwise-first-bit-set) (tm2ba2 core-prim . bitwise-copy-bit-field) (tm2ba1 core-prim . bitwise-copy-bit) (tm2ba0 core-prim . bitwise-bit-set?) (tm2b9f core-prim . bitwise-bit-field) (tm2b9e core-prim . bitwise-bit-count) (tm2b9d core-prim . bitwise-xor) (tm2b9c core-prim . bitwise-ior) (tm2b9b core-prim . bitwise-and) (tm2b9a core-prim . bitwise-not) (tm2b99 core-prim . bitwise-arithmetic-shift-right) (tm2b98 core-prim . bitwise-arithmetic-shift-left) (tm2b97 core-prim . bitwise-arithmetic-shift) (tm2b96 core-prim . zero?) (tm2b95 core-prim . vector?) (tm2b94 core-prim . vector-set!) (tm2b93 core-prim . vector-ref) (tm2b92 core-prim . vector-map) (tm2b91 core-prim . vector-length) (tm2b90 core-prim . vector-for-each) (tm2b8f core-prim . vector-fill!) (tm2b8e core-prim . vector->list) (tm2b8d core-prim . vector) (tm2b8c core-prim . values) (tm2b8b core-prim . truncate) (tm2b8a core-prim . tan) (tm2b89 core-prim . symbol?) (tm2b88 core-prim . symbol=?) (tm2b87 core-prim . symbol->string) (tm2b86 core-prim . substring) (tm2b85 core-prim . string?) (tm2b84 core-prim . string>?) (tm2b83 core-prim . string>=?) (tm2b82 core-prim . string=?) (tm2b81 core-prim . string<?) (tm2b80 core-prim . string<=?) (tm2b7f core-prim . string-ref) (tm2b7e core-prim . string-length) (tm2b7d core-prim . string-for-each) (tm2b7c core-prim . string-copy) (tm2b7b core-prim . string-append) (tm2b7a core-prim . string->symbol) (tm2b79 core-prim . string->number) (tm2b78 core-prim . string->list) (tm2b77 core-prim . string) (tm2b76 core-prim . sqrt) (tm2b75 core-prim . sin) (tm2b74 core-prim . round) (tm2b73 core-prim . reverse) (tm2b72 core-prim . real?) (tm2b71 core-prim . real-valued?) (tm2b70 core-prim . real-part) (tm2b6f core-prim . rationalize) (tm2b6e core-prim . rational?) (tm2b6d core-prim . rational-valued?) (tm2b6c core-prim . procedure?) (tm2b6b core-prim . positive?) (tm2b6a core-prim . pair?) (tm2b69 core-prim . odd?) (tm2b68 core-prim . numerator) (tm2b67 core-prim . number?) (tm2b66 core-prim . number->string) (tm2b65 core-prim . null?) (tm2b64 core-prim . not) (tm2b63 core-prim . negative?) (tm2b62 core-prim . nan?) (tm2b61 core-prim . min) (tm2b60 core-prim . max) (tm2b5f core-prim . map) (tm2b5e core-prim . make-vector) (tm2b5d core-prim . make-string) (tm2b5c core-prim . make-rectangular) (tm2b5b core-prim . make-polar) (tm2b5a core-prim . magnitude) (tm2b59 core-prim . log) (tm2b58 core-prim . list?) (tm2b57 core-prim . list-tail) (tm2b56 core-prim . list-ref) (tm2b55 core-prim . list->vector) (tm2b54 core-prim . list->string) (tm2b53 core-prim . list) (tm2b52 core-prim . length) (tm2b51 core-prim . lcm) (tm2b50 core-prim . integer?) (tm2b4f core-prim . integer-valued?) (tm2b4e core-prim . integer->char) (tm2b4d core-prim . infinite?) (tm2b4c core-prim . inexact?) (tm2b4b core-prim . inexact) (tm2b4a core-prim . imag-part) (tm2b49 core-prim . gcd) (tm2b48 core-prim . for-each) (tm2b47 core-prim . floor) (tm2b46 core-prim . finite?) (tm2b45 core-prim . expt) (tm2b44 core-prim . exp) (tm2b43 core-prim . exact?) (tm2b42 core-prim . exact-integer-sqrt) (tm2b41 core-prim . exact) (tm2b40 core-prim . even?) (tm2b3f core-prim . error) (tm2b3e core-prim . eqv?) (tm2b3d core-prim . equal?) (tm2b3c core-prim . eq?) (tm2b3b core-prim . dynamic-wind) (tm2b3a core-prim . div0-and-mod0) (tm2b39 core-prim . mod0) (tm2b38 core-prim . div0) (tm2b37 core-prim . div-and-mod) (tm2b36 core-prim . mod) (tm2b35 core-prim . div) (tm2b34 core-prim . denominator) (tm2b33 core-prim . cos) (tm2b32 core-prim . cons) (tm2b31 core-prim . complex?) (tm2b30 core-prim . char?) (tm2b2f core-prim . char>?) (tm2b2e core-prim . char>=?) (tm2b2d core-prim . char=?) (tm2b2c core-prim . char<?) (tm2b2b core-prim . char<=?) (tm2b2a core-prim . char->integer) (tm2b29 core-prim . ceiling) (tm2b28 core-prim . call-with-values) (tm2b27 core-prim . call/cc) (tm2b26 core-prim . call-with-current-continuation) (tm2b25 core-prim . cddddr) (tm2b24 core-prim . cdddar) (tm2b23 core-prim . cddadr) (tm2b22 core-prim . cddaar) (tm2b21 core-prim . cdaddr) (tm2b20 core-prim . cdadar) (tm2b1f core-prim . cdaadr) (tm2b1e core-prim . cdaaar) (tm2b1d core-prim . cadddr) (tm2b1c core-prim . caddar) (tm2b1b core-prim . cadadr) (tm2b1a core-prim . cadaar) (tm2b19 core-prim . caaddr) (tm2b18 core-prim . caadar) (tm2b17 core-prim . caaadr) (tm2b16 core-prim . caaaar) (tm2b15 core-prim . cdddr) (tm2b14 core-prim . cddar) (tm2b13 core-prim . cdadr) (tm2b12 core-prim . cdaar) (tm2b11 core-prim . caddr) (tm2b10 core-prim . cadar) (tm2b0f core-prim . caadr) (tm2b0e core-prim . caaar) (tm2b0d core-prim . cddr) (tm2b0c core-prim . cdar) (tm2b0b core-prim . cadr) (tm2b0a core-prim . caar) (tm2b09 core-prim . cdr) (tm2b08 core-prim . car) (tm2b07 core-prim . boolean?) (tm2b06 core-prim . boolean=?) (tm2b05 core-prim . atan) (tm2b04 core-prim . assertion-violation) (tme67 core-prim . assertion-error) (tm2b03 core-prim . asin) (tm2b02 core-prim . apply) (tm2b01 core-prim . append) (tm2b00 core-prim . angle) (tm2aff core-prim . acos) (tm2afe core-prim . abs) (tm2afd core-prim . /) (tm2afc core-prim . *) (tm2afb core-prim . -) (tm2afa core-prim . +) (tm2af9 core-prim . >=) (tm2af8 core-prim . >) (tm2af7 core-prim . =) (tm2af6 core-prim . <=) (tm2af5 core-prim . <) (tm2af4 core-prim . library) (tm2af3 $core-rtd &no-nans-rtd &no-nans-rcd) (tm2af2 $core-rtd &no-infinities-rtd &no-infinities-rcd) (tm2af1 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (tm2af0 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (tm2aef $core-rtd &i/o-port-rtd &i/o-port-rcd) (tm2aee $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (tm2aed $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (tm2aec $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (tm2aeb $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (tm2aea $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (tm2ae9 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (tm2ae8 $core-rtd &i/o-write-rtd &i/o-write-rcd) (tm2ae7 $core-rtd &i/o-read-rtd &i/o-read-rcd) (tm2ae6 $core-rtd &i/o-rtd &i/o-rcd) (tm2ae5 $core-rtd &undefined-rtd &undefined-rcd) (tm2ae4 $core-rtd &syntax-rtd &syntax-rcd) (tm2ae3 $core-rtd &lexical-rtd &lexical-rcd) (tm2ae2 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (tm2ae1 $core-rtd &non-continuable-rtd &non-continuable-rcd) (tm2ae0 $core-rtd &who-rtd &who-rcd) (tm2adf $core-rtd &irritants-rtd &irritants-rcd) (tm2ade $core-rtd &assertion-rtd &assertion-rcd) (tm2add $core-rtd &violation-rtd &violation-rcd) (tm2adc $core-rtd &error-rtd &error-rcd) (tm2adb $core-rtd &serious-rtd &serious-rcd) (tm2ada $core-rtd &warning-rtd &warning-rcd) (tm2ad9 $core-rtd &message-rtd &message-rcd) (tm2ad8 $core-rtd &condition-rtd &condition-rcd) (tm2ad7 macro . define-condition-type) (tm2ad6 macro . define-enumeration) (tm2ad5 macro . define-record-type) (tm2ad4 macro . parent-rtd) (tm2ad3 macro . nongenerative) (tm2ad2 macro . opaque) (tm2ad1 macro . sealed) (tm2ad0 macro . protocol) (tm2acf macro . parent) (tm2ace macro . immutable) (tm2acd macro . mutable) (tm2acc macro . fields) (tm2acb macro . error-handling-mode) (tm2aca macro . file-options) (tm2ac9 macro . buffer-mode) (tm2ac8 macro . eol-style) (tm2ac7 macro . guard) (tm2ac6 macro . trace-define) (tm2ac5 macro . trace-lambda) (tm2ac4 macro . unsyntax-splicing) (tm2ac3 macro . unsyntax) (tm2ac2 macro . unquote-splicing) (tm2ac1 macro . unquote) (tm2ac0 macro . _) (tm2abf macro . else) (tm2abe macro . =>) (tm2abd macro . ...) (tm2abc macro . assert) (tm2abb macro . endianness) (tm2aba macro . delay) (tm2ab9 macro . time) (tm2ab8 macro . do) (tm2ab7 macro . cond) (tm2ab6 macro . let*) (tm2ab5 macro . let*-values) (tm2ab4 macro . let-values) (tm2ab3 macro . identifier-syntax) (tm2ab2 macro . with-syntax) (tm2ab1 macro . quasisyntax) (tm2ab0 macro . quasiquote) (tm2aaf macro . syntax-rules) (tm2aae macro . include) (tm2aad macro . define-struct) (tm2aac core-macro . record-constructor-descriptor) (tm2aab core-macro . record-type-descriptor) (tm2aaa macro . case) (tm2aa9 macro . parameterize) (tm2aa8 macro . unless) (tm2aa7 macro . when) (tm2aa6 core-macro . or) (tm2aa5 core-macro . and) (tm2aa4 core-macro . if) (tm2aa3 core-macro . let) (tm2aa2 core-macro . letrec*) (tm2aa1 core-macro . letrec) (tm2aa0 core-macro . type-descriptor) (tm2a9f core-macro . case-lambda) (tm2a9e core-macro . lambda) (tm2a9d core-macro . syntax) (tm2a9c core-macro . syntax-case) (tm2a9b core-macro . quote) (tm2a9a core-macro . foreign-call) (tm2a99 letrec-syntax) (tm2a98 let-syntax) (tm2a97 set!) (tm2a96 import) (tm2a95 begin) (tm2a94 module) (tm2a93 define-syntax) (tm2a92 define)) values values '#f '#f '#f '#f) (tm9a1@tm7ed@install-library 'tm2e68 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . tm2e0f) (eval-core . tm2e0e) (set-symbol-value! . tm2e0d) (symbol-value . tm2e0c) (gensym . tm2e0b) (void . tm2e0a)) '() values values '#f '#f '#f '#f) (tm9a1@tm7ed@install-library 'tm2e69 '(mosh) '() '() '() '() '((set-symbol-value! . tm2e0d) (symbol-value . tm2e0c) (regexp? . tm2e08) (read-line . tm2e07) (ungensym . tm2e05) (alist->eq-hash-table . tm2e04) (assoc-ref . tm2e03) (print . tm2e02) (format . tm2e01) (host-os . tm2e00) (library-path . tm7cc) (standard-library-path . tm2dff) (file-newer? . tm2def) (stat-mtime . tm2dee) (digit->integer . tm2dea) (call-with-string-input-port . tm2de9) (call-with-string-io . tm2de8) (string-split . tm2de7) (bytevector-for-each . tm2de6) (string->regexp . tm2de5) (rxmatch . tm2de4) (regexp-replace-all . tm2de3) (hashtable-fold-left . tm2de2) (hashtable-for-each . tm2de1) (set-current-directory! . tm2ddc) (expand-path . tm2ddb) (current-directory . tm2dda) (p . tm2d9a) (get-timeofday . tm2d81) (get-command-line . tm2d80) (sys-display . tm2d7f) (whereis . tm2d7e) (register . tm2d7d) (vm-join! . tm2d7c) (vm-set-value! . tm2d7b) (vm? . tm2d7a) (main-vm? . tm2d79) (vm-eval . tm2d78) (vm-self . tm2d77) (vm-start! . tm2d76) (make-vm . tm2d75) (mutex-try-lock! . tm2d74) (mutex-unlock! . tm2d73) (mutex-lock! . tm2d72) (mutex? . tm2d71) (make-mutex . tm2d70) (condition-variable-notify-all! . tm2d6f) (condition-variable-notify! . tm2d6e) (condition-variable-wait! . tm2d6d) (make-condition-variable . tm2d6c) (write/ss . tm2d6b) (mosh-executable-path . tm2d6a) (make-file-options . tm2d69) (source-info . tm2d68) (make-compiler-instruction . tm2d67) (make-instruction . tm2d66) (set-annotation! . tm2d65) (get-annotation . tm2d64) (annotated-pair? . tm2d63) (annotated-cons . tm2d62) (set-source-info! . tm2d61) (bignum? . tm2d60) (fast-equal? . tm2d5f) (fasl-read . tm2d5e) (fasl-write . tm2d5d) (time-usage . tm2d5c) (os-constant . tm2d5b) (condition-printer . tm2d5a) (time . tm2ab9) (include . tm2aae)) '() values values '#f '#f '#f '#f) (tm9a1@tm7ed@install-library 'tm2e6a '(system) '() '() '() '() '((gensym-prefix-set! . tm2e06) (ssl-supported? . tm2dfe) (ssl-socket? . tm2dfd) (socket-sslize! . tm2dfc) (%monapi-stream-read . tm2dfb) (%monapi-stream-write . tm2dfa) (%monapi-stream-handle . tm2df9) (%monapi-make-stream . tm2df8) (%monapi-name-add! . tm2df7) (%monapi-message-receive . tm2df6) (%monapi-name-whereis . tm2df5) (%monapi-message-reply . tm2df4) (%monapi-message-send-receive . tm2df3) (%monapi-message-send . tm2df2) (process-terminate! . tm2df1) (process-list . tm2df0) (write-to-file . tm2ded) (file->list . tm2dec) (file->string . tm2deb) (mosh-cache-dir . tm5b6) (%call-process . tm2de0) (local-tz-offset . tm2ddf) (microseconds . tm2dde) (directory-list . tm2ddd) (expand-path . tm2ddb) (%getpid . tm2dd9) (%spawn . tm2dd8) (%waitpid . tm2dd7) (simple-struct-name . tm2dd6) (simple-struct-set! . tm2dd5) (simple-struct-ref . tm2dd4) (make-simple-struct . tm2dd3) (simple-struct? . tm2dd2) (pointer-ref-c-int64 . tm2dd1) (pointer-ref-c-int32 . tm2dd0) (pointer-ref-c-int16 . tm2dcf) (pointer-ref-c-int8 . tm2dce) (pointer-ref-c-uint64 . tm2dcd) (pointer-ref-c-uint32 . tm2dcc) (pointer-ref-c-uint16 . tm2dcb) (pointer-ref-c-uint8 . tm2dca) (pointer-set-c-uint64! . tm2dc9) (pointer-set-c-uint32! . tm2dc8) (pointer-set-c-uint16! . tm2dc7) (pointer-set-c-uint8! . tm2dc6) (pointer-set-c-int64! . tm2dc5) (pointer-set-c-int32! . tm2dc4) (pointer-set-c-int16! . tm2dc3) (pointer-set-c-int8! . tm2dc2) (pointer-set-c-pointer! . tm2dc1) (pointer-set-c-double! . tm2dc0) (pointer-set-c-float! . tm2dbf) (pointer-set-c-long-long! . tm2dbe) (pointer-set-c-long! . tm2dbd) (pointer-set-c-int! . tm2dbc) (pointer-set-c-short! . tm2dbb) (pointer-set-c-char! . tm2dba) (pointer-ref-c-pointer . tm2db9) (pointer-ref-c-double . tm2db8) (pointer-ref-c-float . tm2db7) (pointer-ref-c-unsigned-long-long . tm2db6) (pointer-ref-c-signed-long-long . tm2db5) (pointer-ref-c-unsigned-long . tm2db4) (pointer-ref-c-signed-long . tm2db3) (pointer-ref-c-unsigned-int . tm2db2) (pointer-ref-c-signed-int . tm2db1) (pointer-ref-c-unsigned-short . tm2db0) (pointer-ref-c-signed-short . tm2daf) (pointer-ref-c-unsigned-char . tm2dae) (pointer-ref-c-signed-char . tm2dad) (pointer->integer . tm2dac) (integer->pointer . tm2dab) (pointer? . tm2daa) (shared-errno . tm2da9) (%ffi-free-c-callback-trampoline . tm2da8) (%ffi-make-c-callback-trampoline . tm2da7) (%ffi-free . tm2da6) (%ffi-malloc . tm2da5) (%ffi-supported? . tm2da4) (%ffi-pointer->string . tm2da3) (%ffi-call . tm2da2) (%ffi-lookup . tm2da1) (%ffi-open . tm2da0) (null-terminated-utf8->string . tm2d9f) (null-terminated-bytevector->string . tm2d9e) (%exec . tm2d9d) (%fork . tm2d9c) (%pipe . tm2d9b) (open-output-string . tm2d99) (get-output-string . tm2d98) (file-stat-ctime . tm2d97) (file-stat-atime . tm2d96) (file-stat-mtime . tm2d95) (file-size-in-bytes . tm2d94) (file-writable? . tm2d93) (file-executable? . tm2d92) (file-readable? . tm2d91) (file-regular? . tm2d90) (file-symbolic-link? . tm2d8f) (file-directory? . tm2d8e) (create-symbolic-link . tm2d8d) (rename-file . tm2d8c) (delete-directory . tm2d8b) (create-directory . tm2d8a) (create-mosh-cache-dir . tm2d89) (get-environment-variables . tm2d88) (current-exception-handler . tm2d87) (get-environment-variable . tm2d86) (join-wraps . tm2d85) (id->real-label . tm2d84) (same-marks? . tm2d83) (same-marks*? . tm2d82) (disasm . tm2d59) (make-parameter . tm5b4) (socket-port . tm2d58) (socket-shutdown . tm2d57) (socket-close . tm2d56) (socket-send . tm2d55) (socket-recv! . tm2d54) (socket-recv . tm2d53) (make-server-socket . tm2d52) (make-client-socket . tm2d51) (socket-accept . tm2d50) (socket? . tm2d4f) (parameterize . tm2aa9)) '() values values '#f '#f '#f '#f)))
(begin (set! tm2911@ref (unspecified)) (set! tm2913@x* (unspecified)) (set! tm2915@add-library-path! (unspecified)) (set! tm2917@parse-and-add-library-path (unspecified)) (set! tm2919@for-each-with-index (unspecified)) (set! tm291b@rpad (unspecified)) (set! tm291d@condition-printer/p (unspecified)) (set! tm291f@record->field-alist (unspecified)) (set! tm2921@map-with-index (unspecified)) (set! tm2923@repl (unspecified)) (set! tm2925@trace-printer (unspecified)) (set! tm2927@command-line (unspecified)) (set! tm2929@local-library-path (unspecified)) (set! tm292b@load/args (unspecified)) (set! tm292d@load (unspecified)) (set! tm292f@ironscheme-build (unspecified)) (set! tm2931@eval-top-level (unspecified)) (set! tm2933@compile-system-libraries (unspecified)) (set! tm2935@compile (unspecified)) (set! tm2937@compile->closure (unspecified)) (set! tm2939@pre-compile-r6rs-file (unspecified)) (set! tm293b@load-r6rs-top-level (unspecified)) (set! tm293d@load-r6rs-top-level-sexp (unspecified)) (set! tm293f@prefix-inc (unspecified)) (set! tm2941@prefix-inc! (unspecified)) (set! tm2911@ref (lambda (tm297c@rtd tm297d@i tm297e@x) (let ((tm2982@val ((record-accessor tm297c@rtd tm297d@i) tm297e@x))) (if (symbol? tm2982@val) (ungensym tm2982@val) tm2982@val)))) (set! tm2a78@tm2911@ref tm2911@ref) (set! tm2913@x* '()) (set! tm2a79@tm2913@x* tm2913@x*) (set! tm2915@add-library-path! (lambda (tm2984@path) (tm991@tm7cd@library-path (append (tm991@tm7cd@library-path) (list tm2984@path))))) (set! tm2a7a@tm2915@add-library-path! tm2915@add-library-path!) (set! tm2917@parse-and-add-library-path (lambda (tm2986@paths tm2987@message) (letrec* ((tm298b@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((tm298c@t tm2986@paths)) (if tm298c@t ((lambda (tm298e@paths) (for-each (lambda (tm2990@path) (if (file-exists? tm2990@path) (tm2915@add-library-path! (expand-path tm2990@path)) (format (current-error-port) tm2987@message tm2990@path))) (string-split tm298e@paths tm298b@separator))) tm298c@t) (void)))))) (set! tm2a7b@tm2917@parse-and-add-library-path tm2917@parse-and-add-library-path) (set! tm2919@for-each-with-index (lambda (tm2992@proc tm2993@lst) (letrec ((tm2996@loop (lambda (tm2998@i tm2999@lst) (if (null? tm2999@lst) (if '#f '#f (void)) (begin (tm2992@proc tm2998@i (car tm2999@lst)) (tm2996@loop (+ tm2998@i '1) (cdr tm2999@lst))))))) (tm2996@loop '1 tm2993@lst)))) (set! tm2a7c@tm2919@for-each-with-index tm2919@for-each-with-index) (set! tm291b@rpad (lambda (tm299c@str tm299d@pad tm299e@n) (let ((tm29a2@rest (- tm299e@n (string-length (format '"~a" tm299c@str))))) (let tm29a8@loop ((tm29a4@rest tm29a2@rest) (tm29a5@ret (format '"~a" tm299c@str))) (if (<= tm29a4@rest '0) tm29a5@ret (tm29a8@loop (- tm29a4@rest '1) (string-append tm29a5@ret tm299d@pad))))))) (set! tm2a7d@tm291b@rpad tm291b@rpad) (set! tm291d@condition-printer/p (lambda (tm29aa@e tm29ab@port) (letrec* ((tm29af@max-condition-len (apply max (map (lambda (tm29c0@c) (string-length (symbol->string (record-type-name (record-rtd tm29c0@c))))) (simple-conditions tm29aa@e))))) (begin (display '" Condition components:\n" tm29ab@port) (tm2919@for-each-with-index (lambda (tm29b0@i tm29b1@x) (let ((tm29b4@rtd (record-rtd tm29b1@x)) (tm29b5@fields-alist (tm291f@record->field-alist tm29b1@x))) (begin (format tm29ab@port '" ~d. ~a" tm29b0@i (tm291b@rpad (symbol->string (record-type-name tm29b4@rtd)) '" " tm29af@max-condition-len)) (if (null? tm29b5@fields-alist) (newline tm29ab@port) (void)) (let tm29bc@loop ((tm29b8@first '#t) (tm29b9@fields-alist tm29b5@fields-alist)) (if (null? tm29b9@fields-alist) '() (let ((tm29be@field (car tm29b9@fields-alist))) (begin (if (not tm29b8@first) (display (tm291b@rpad '"" '" " (+ '4 tm29af@max-condition-len)) tm29ab@port) (void)) (display '"       " tm29ab@port) (display (car tm29be@field) tm29ab@port) (display '": " tm29ab@port) (write (cdr tm29be@field) tm29ab@port) (newline tm29ab@port) (tm29bc@loop '#f (cdr tm29b9@fields-alist))))))))) (simple-conditions tm29aa@e)))))) (set! tm2a7e@tm291d@condition-printer/p tm291d@condition-printer/p) (set! tm291f@record->field-alist (lambda (tm29c2@r) (letrec* ((tm29c5@ref (lambda (tm29d0@rtd tm29d1@i tm29d2@x) (let ((tm29d6@val ((record-accessor tm29d0@rtd tm29d1@i) tm29d2@x))) (if (symbol? tm29d6@val) (ungensym tm29d6@val) tm29d6@val))))) (let tm29ca@loop ((tm29c6@ret '()) (tm29c7@rtd (record-rtd tm29c2@r))) (if tm29c7@rtd (tm29ca@loop (append tm29c6@ret (tm2921@map-with-index (lambda (tm29cc@i tm29cd@field) (cons tm29cd@field (tm29c5@ref tm29c7@rtd tm29cc@i tm29c2@r))) (vector->list (record-type-field-names tm29c7@rtd)))) (record-type-parent tm29c7@rtd)) tm29c6@ret))))) (set! tm2a7f@tm291f@record->field-alist tm291f@record->field-alist) (set! tm2921@map-with-index (lambda (tm29d8@proc tm29d9@lst) (let tm29e2@loop ((tm29dc@i '0) (tm29dd@lst tm29d9@lst) (tm29de@ret '())) (if (null? tm29dd@lst) (reverse tm29de@ret) (tm29e2@loop (+ tm29dc@i '1) (cdr tm29dd@lst) (cons (tm29d8@proc tm29dc@i (car tm29dd@lst)) tm29de@ret)))))) (set! tm2a80@tm2921@map-with-index tm2921@map-with-index) (set! tm2923@repl (lambda tm29e4@x (letrec* ((tm29e7@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (tm29ea@tm29e8) (lambda () (with-exception-handler (lambda (tm29ec@e) ((call/cc (lambda (tm29ee@tm29e9) (tm29ea@tm29e8 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? tm29ec@e) (tm291d@condition-printer/p tm29ec@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" tm29ec@e))) (tm29ee@tm29e9 (lambda () (raise-continuable tm29ec@e)))))))))) (lambda () (let tm29f4@loop ((tm29f0@line (get-line (current-input-port))) (tm29f1@accum '"")) (letrec* ((tm29f7@parentheses-ok? (lambda (tm2a02@text) (let tm2a0a@loop ((tm2a04@chars (string->list tm2a02@text)) (tm2a05@p0 '0) (tm2a06@p1 '0)) (if (null? tm2a04@chars) (= '0 tm2a05@p0 tm2a06@p1) (let ((tm2a0c@t (car tm2a04@chars))) (if (memv tm2a0c@t '(#\()) (tm2a0a@loop (cdr tm2a04@chars) (+ tm2a05@p0 '1) tm2a06@p1) (if (memv tm2a0c@t '(#\))) (tm2a0a@loop (cdr tm2a04@chars) (- tm2a05@p0 '1) tm2a06@p1) (if (memv tm2a0c@t '(#\[)) (tm2a0a@loop (cdr tm2a04@chars) tm2a05@p0 (+ tm2a06@p1 '1)) (if (memv tm2a0c@t '(#\])) (tm2a0a@loop (cdr tm2a04@chars) tm2a05@p0 (- tm2a06@p1 '1)) (tm2a0a@loop (cdr tm2a04@chars) tm2a05@p0 tm2a06@p1)))))))))) (tm29f9@eval-string-print (lambda (tm29fc@text) (if (not (or (string=? '"\n" tm29fc@text) (= '0 (string-length tm29fc@text)))) (call-with-values (lambda () (tm2931@eval-top-level (call-with-port (open-string-input-port tm29fc@text) read))) (lambda tm29fe@out* (for-each (lambda (tm2a00@out) (begin (write/ss tm2a00@out) (newline))) tm29fe@out*))) (void))))) (if (eof-object? tm29f0@line) (begin (tm29f9@eval-string-print tm29f1@accum) (exit)) (let ((tm29fa@current (string-append tm29f1@accum tm29f0@line))) (if (tm29f7@parentheses-ok? tm29fa@current) (tm29f9@eval-string-print tm29fa@current) (tm29f4@loop (get-line (current-input-port)) tm29fa@current)))))))))))) (newline) (tm29e7@rec))))) (tm29e7@rec)))) (set! tm2a81@tm2923@repl tm2923@repl) (set! tm2925@trace-printer (tm6d7@tm5b5@make-parameter write)) (set! tm2a82@tm2925@trace-printer tm2925@trace-printer) (set! tm2927@command-line (tm6d7@tm5b5@make-parameter (get-command-line))) (set! tm2a83@tm2927@command-line tm2927@command-line) (set! tm2929@local-library-path (lambda (tm2a0e@filename) (tm991@tm7cd@library-path))) (set! tm2a84@tm2929@local-library-path tm2929@local-library-path) (set! tm292b@load/args (lambda (tm2a10@filename . tm2a12@args) (begin (apply tm293b@load-r6rs-top-level tm2a10@filename 'load tm2a12@args) (void)))) (set! tm2a85@tm292b@load/args tm292b@load/args) (set! tm292d@load (lambda (tm2a14@filename) (begin (apply tm293b@load-r6rs-top-level tm2a14@filename 'load (tm2927@command-line)) (void)))) (set! tm2a86@tm292d@load tm292d@load) (set! tm292f@ironscheme-build (lambda () (tm292d@load '"ironscheme-buildscript.ss"))) (set! tm2a87@tm292f@ironscheme-build tm292f@ironscheme-build) (set! tm2931@eval-top-level (lambda (tm2a16@x) (tm28ee@tme4e@eval tm2a16@x (tm2905@tme7c@interaction-environment)))) (set! tm2a88@tm2931@eval-top-level tm2931@eval-top-level) (set! tm2933@compile-system-libraries (lambda () (tm2931@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! tm2a89@tm2933@compile-system-libraries tm2933@compile-system-libraries) (set! tm2935@compile (lambda (tm2a18@filename) (tm293b@load-r6rs-top-level tm2a18@filename 'compile))) (set! tm2a8a@tm2935@compile tm2935@compile) (set! tm2937@compile->closure (lambda (tm2a1a@filename) (tm293b@load-r6rs-top-level tm2a1a@filename 'closure))) (set! tm2a8b@tm2937@compile->closure tm2937@compile->closure) (set! tm2939@pre-compile-r6rs-file (lambda (tm2a1c@filename) (tm293b@load-r6rs-top-level tm2a1c@filename 'compile))) (set! tm2a8c@tm2939@pre-compile-r6rs-file tm2939@pre-compile-r6rs-file) (set! tm293b@load-r6rs-top-level (lambda (tm2a1e@filename tm2a1f@how . tm2a22@args) (begin (tm991@tm7cd@library-path (tm2929@local-library-path tm2a1e@filename)) (let ((tm2a24@x* (with-input-from-file tm2a1e@filename (lambda () (let tm2a26@f () (let ((tm2a28@x (tm6c9@tm599@read-annotated))) (if (eof-object? tm2a28@x) '() (cons tm2a28@x (tm2a26@f))))))))) (let ((tm2a2a@t tm2a1f@how)) (if (memv tm2a2a@t '(closure)) (tm2904@tme7a@pre-compile-r6rs-top-level tm2a24@x*) (if (memv tm2a2a@t '(load)) (begin (tm2927@command-line (cons tm2a1e@filename (car tm2a22@args))) (tm6d8@tm5b7@mosh-cache-dir (create-mosh-cache-dir)) (if (tm6d8@tm5b7@mosh-cache-dir) (gensym-prefix-set! (tm2941@prefix-inc! (string-append (tm6d8@tm5b7@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (tm2a2c@file) ((call/cc (lambda (tm2a30@tm2a2e) (lambda () (with-exception-handler (lambda (tm2a32@c) ((call/cc (lambda (tm2a34@tm2a2f) (tm2a30@tm2a2e (lambda () (if '#t '#t (tm2a34@tm2a2f (lambda () (raise-continuable tm2a32@c)))))))))) (lambda () (delete-file (string-append (tm6d8@tm5b7@mosh-cache-dir) '"/" tm2a2c@file))))))))) (directory-list (tm6d8@tm5b7@mosh-cache-dir))) (void)) (let ((tm2a36@compiled (tm2903@tme78@compile-r6rs-top-level tm2a24@x*))) (begin (if (and (tm6d8@tm5b7@mosh-cache-dir) (not (symbol-value '%disable-acc))) (tm995@tm7d5@serialize-all tm6d2@tm5ab@serialize-library tm72e@tm6e7@compile-core-expr) (void)) (tm2a36@compiled)))) (if (memv tm2a2a@t '(compile)) (begin (tm2903@tme78@compile-r6rs-top-level tm2a24@x*) (tm995@tm7d5@serialize-all tm6d2@tm5ab@serialize-library tm72e@tm6e7@compile-core-expr)) (if '#f '#f (void)))))))))) (set! tm2a8d@tm293b@load-r6rs-top-level tm293b@load-r6rs-top-level) (set! tm293d@load-r6rs-top-level-sexp (lambda (tm2a38@import-spec tm2a39@thunk) (let ((tm2a44@tm2a3d tm991@tm7cd@library-path) (tm2a45@tm2a3f tm6d8@tm5b7@mosh-cache-dir) (tm2a46@tm2a41 (tm2929@local-library-path '"")) (tm2a47@tm2a43 (create-mosh-cache-dir))) (let ((tm2a4c@swap (lambda () (begin (let ((tm2a4e@t (tm2a44@tm2a3d))) (begin (tm2a44@tm2a3d tm2a46@tm2a41) (set! tm2a46@tm2a41 tm2a4e@t))) (let ((tm2a50@t (tm2a45@tm2a3f))) (begin (tm2a45@tm2a3f tm2a47@tm2a43) (set! tm2a47@tm2a43 tm2a50@t))))))) (dynamic-wind tm2a4c@swap (lambda () (begin (if (tm6d8@tm5b7@mosh-cache-dir) (gensym-prefix-set! (tm2941@prefix-inc! (string-append (tm6d8@tm5b7@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((tm2a56@tm2a53 tm2927@command-line) (tm2a57@tm2a55 '())) (let ((tm2a5a@swap (lambda () (let ((tm2a5c@t (tm2a56@tm2a53))) (begin (tm2a56@tm2a53 tm2a57@tm2a55) (set! tm2a57@tm2a55 tm2a5c@t)))))) (dynamic-wind tm2a5a@swap (lambda () ((tm2903@tme78@compile-r6rs-top-level (list (cons 'import tm2a38@import-spec) (list tm2a39@thunk))))) tm2a5a@swap))))) tm2a4c@swap))))) (set! tm2a8e@tm293d@load-r6rs-top-level-sexp tm293d@load-r6rs-top-level-sexp) (set! tm293f@prefix-inc (lambda (tm2a5e@prefix-string) (let ((tm2a60@prefix (symbol->string tm2a5e@prefix-string))) (let ((tm2a62@len (string-length tm2a60@prefix))) (let tm2a6a@loop ((tm2a64@i (- tm2a62@len '1)) (tm2a65@carry? '#t) (tm2a66@accum '())) (if (< tm2a64@i '0) (string->symbol (list->string (if tm2a65@carry? (cons '#\a tm2a66@accum) tm2a66@accum))) (if tm2a65@carry? (let ((tm2a6c@next-integer (+ '1 (char->integer (string-ref tm2a60@prefix tm2a64@i))))) (if (= tm2a6c@next-integer '123) (tm2a6a@loop (- tm2a64@i '1) '#f (cons '#\A tm2a66@accum)) (if (= tm2a6c@next-integer '91) (tm2a6a@loop (- tm2a64@i '1) '#t (cons '#\a tm2a66@accum)) (tm2a6a@loop (- tm2a64@i '1) '#f (cons (integer->char tm2a6c@next-integer) tm2a66@accum))))) (tm2a6a@loop (- tm2a64@i '1) '#f (cons (string-ref tm2a60@prefix tm2a64@i) tm2a66@accum))))))))) (set! tm2a8f@tm293f@prefix-inc tm293f@prefix-inc) (set! tm2941@prefix-inc! (lambda (tm2a6e@file) (begin (if (not (file-exists? tm2a6e@file)) (call-with-output-file tm2a6e@file (lambda (tm2a70@port) (write 'd tm2a70@port))) (void)) (let ((tm2a72@prefix (call-with-input-file tm2a6e@file read))) (if (main-vm?) (let ((tm2a74@next-prefix (tm293f@prefix-inc tm2a72@prefix))) (begin (call-with-port (open-file-output-port tm2a6e@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (tm2a76@port) (write tm2a74@next-prefix tm2a76@port))) tm2a72@prefix)) tm2a72@prefix))))) (set! tm2a90@tm2941@prefix-inc! tm2941@prefix-inc!) (begin (tm996@tm7d7@current-precompiled-library-loader tm6d3@tm5ad@load-serialized-library) (set-symbol-value! 'load tm292d@load) (set-symbol-value! 'pre-compile-r6rs-file tm2939@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs tm2931@eval-top-level) (set-symbol-value! 'int-env-syms tm28e5@tme3c@interaction-environment-symbols) (set-symbol-value! 'expanded2core tm72d@tm6e5@expanded->core) (set-symbol-value! 'trace-printer tm2925@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (tm2942@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list tm2942@c))))) (tm2917@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (tm2917@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (tm2915@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (tm2915@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (tm2915@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((tm2944@prefix (lambda (tm2946@ext tm2947@ls) (append (map (lambda (tm294a@x) (string-append tm2946@ext tm294a@x)) tm2947@ls) tm2947@ls)))) (tm992@tm7cf@library-extensions (tm2944@prefix '".mosh" (tm992@tm7cf@library-extensions)))) (current-exception-handler (lambda (tm294c@c) (begin (if (condition? tm294c@c) (tm291d@condition-printer/p tm294c@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" tm294c@c)) tm294c@c))) (if ((call/cc (lambda (tm2950@tm294e) (lambda () (with-exception-handler (lambda (tm2952@c) ((call/cc (lambda (tm2954@tm294f) (tm2950@tm294e (lambda () (if '#t '#f (tm2954@tm294f (lambda () (raise-continuable tm2952@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (tm293d@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (tm2927@command-line)) (let ((tm295e@tm2957 tm2927@command-line) (tm295f@tm2959 tm6d8@tm5b7@mosh-cache-dir) (tm2960@tm295b '()) (tm2961@tm295d (create-mosh-cache-dir))) (let ((tm2966@swap (lambda () (begin (let ((tm2968@t (tm295e@tm2957))) (begin (tm295e@tm2957 tm2960@tm295b) (set! tm2960@tm295b tm2968@t))) (let ((tm296a@t (tm295f@tm2959))) (begin (tm295f@tm2959 tm2961@tm295d) (set! tm2961@tm295d tm296a@t))))))) (dynamic-wind tm2966@swap (lambda () (begin (if (tm6d8@tm5b7@mosh-cache-dir) (gensym-prefix-set! (tm2941@prefix-inc! (string-append (tm6d8@tm5b7@mosh-cache-dir) '"/prefix.txt"))) (void)) (tm2923@repl))) tm2966@swap))) (begin (tm991@tm7cd@library-path (tm2929@local-library-path (car (tm2927@command-line)))) (set! tm2913@x* (with-input-from-file (car (tm2927@command-line)) (lambda () (let tm296c@f () (let ((tm296e@x (tm6c9@tm599@read-annotated))) (if (eof-object? tm296e@x) '() (cons tm296e@x (tm296c@f)))))))) (tm2927@command-line (cons (car (tm2927@command-line)) (cdr (tm2927@command-line)))) (tm6d8@tm5b7@mosh-cache-dir (create-mosh-cache-dir)) (if (tm6d8@tm5b7@mosh-cache-dir) (gensym-prefix-set! (tm2941@prefix-inc! (string-append (tm6d8@tm5b7@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (tm2970@file) ((call/cc (lambda (tm2974@tm2972) (lambda () (with-exception-handler (lambda (tm2976@c) ((call/cc (lambda (tm2978@tm2973) (tm2974@tm2972 (lambda () (if '#t '#t (tm2978@tm2973 (lambda () (raise-continuable tm2976@c)))))))))) (lambda () (delete-file (string-append (tm6d8@tm5b7@mosh-cache-dir) '"/" tm2970@file))))))))) (directory-list (tm6d8@tm5b7@mosh-cache-dir))) (void)) (let ((tm297a@compiled (tm2903@tme78@compile-r6rs-top-level tm2913@x*))) (begin (if (and (tm6d8@tm5b7@mosh-cache-dir) (not (symbol-value '%disable-acc))) (tm995@tm7d5@serialize-all tm6d2@tm5ab@serialize-library tm72e@tm6e7@compile-core-expr) (void)) (tm297a@compiled))))))))
