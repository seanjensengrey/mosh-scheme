;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! bl2902@library-file-path->cache-path (unspecified)) (set! bl2904@read-annotated (unspecified)) (set! bl2906@annotation-stripped (unspecified)) (set! bl2908@annotation? (unspecified)) (set! bl290a@annotation-source (unspecified)) (set! bl290c@annotation-expression (unspecified)) (set! bl290e@scm->fasl (unspecified)) (set! bl2910@fasl-save (unspecified)) (set! bl2912@fasl-load (unspecified)) (set! bl2914@verbose? (unspecified)) (set! bl2916@serialize-library (unspecified)) (set! bl2918@load-serialized-library (unspecified)) (set! bl291a@make-record-printer (unspecified)) (set! bl291c@compile-core (unspecified)) (set! bl291e@read-library-source-file (unspecified)) (set! bl2920@make-parameter (unspecified)) (set! bl2922@mosh-cache-dir (unspecified)) (set! bl29b8@file-options-spec (unspecified)) (set! bl2902@library-file-path->cache-path (lambda (bl29b9@x) (call-with-values (lambda () (open-string-output-port)) (lambda (bl29bf@bl29bc bl29c0@bl29be) (let ((bl29c3@extract bl29c0@bl29be) (bl29c4@p bl29bf@bl29bc)) (letrec* ((bl29c8@display-hex (lambda (bl29d1@n) (if (<= '0 bl29d1@n '9) (display bl29d1@n bl29c4@p) (display (integer->char (+ (char->integer '#\a) (- bl29d1@n '10))) bl29c4@p))))) (begin (let bl29cb@f ((bl29c9@ls (string-split bl29b9@x '#\/))) (if (not (null? bl29c9@ls)) (begin (display '"_" bl29c4@p) (for-each (lambda (bl29cd@c) (if (or (char<=? '#\a bl29cd@c '#\z) (char<=? '#\A bl29cd@c '#\Z) (char<=? '#\0 bl29cd@c '#\9) (memv bl29cd@c '(#\- #\. #\_ #\~))) (display bl29cd@c bl29c4@p) (begin (display '"%" bl29c4@p) (let ((bl29cf@n (char->integer bl29cd@c))) (begin (bl29c8@display-hex (quotient bl29cf@n '16)) (bl29c8@display-hex (remainder bl29cf@n '16))))))) (string->list (car bl29c9@ls))) (bl29cb@f (cdr bl29c9@ls))) (void))) (bl29c3@extract)))))))) (set! bl2a33@bl2902@library-file-path->cache-path bl2902@library-file-path->cache-path) (set! bl2904@read-annotated read) (set! bl2a34@bl2904@read-annotated bl2904@read-annotated) (set! bl2906@annotation-stripped (lambda (bl29d3@x) (bl290c@annotation-expression bl29d3@x))) (set! bl2a35@bl2906@annotation-stripped bl2906@annotation-stripped) (set! bl2908@annotation? (lambda (bl29d5@x) (source-info bl29d5@x))) (set! bl2a36@bl2908@annotation? bl2908@annotation?) (set! bl290a@annotation-source (lambda (bl29d7@x) (source-info bl29d7@x))) (set! bl2a37@bl290a@annotation-source bl290a@annotation-source) (set! bl290c@annotation-expression (lambda (bl29d9@x) (if (pair? bl29d9@x) (cons (car bl29d9@x) (cdr bl29d9@x)) (if (procedure? bl29d9@x) (set-source-info! bl29d9@x '#f) bl29d9@x)))) (set! bl2a38@bl290c@annotation-expression bl290c@annotation-expression) (set! bl290e@scm->fasl (lambda (bl29db@filename) (string-append (bl2922@mosh-cache-dir) '"/" (bl2902@library-file-path->cache-path bl29db@filename) '".mosh-fasl"))) (set! bl2a39@bl290e@scm->fasl bl290e@scm->fasl) (set! bl2910@fasl-save (lambda (bl29dd@filename bl29de@obj) (call-with-port (open-file-output-port bl29dd@filename) (lambda (bl29e1@port) ((symbol-value 'fasl-write!) bl29de@obj bl29e1@port))))) (set! bl2a3a@bl2910@fasl-save bl2910@fasl-save) (set! bl2912@fasl-load (lambda (bl29e3@filename) (call-with-port (open-file-input-port bl29e3@filename) (symbol-value 'fasl-read!)))) (set! bl2a3b@bl2912@fasl-load bl2912@fasl-load) (set! bl2914@verbose? (symbol-value '%verbose)) (set! bl2a3c@bl2914@verbose? bl2914@verbose?) (set! bl2916@serialize-library (lambda (bl29e5@filename bl29e6@obj) (begin (if bl2914@verbose? (format (current-error-port) '"serialize-library ~a\n..." bl29e5@filename) (void)) (let ((bl29e9@expanded2core (symbol-value 'expanded2core))) (let ((bl29eb@compile (symbol-value 'compile-w/o-halt))) (let ((bl29ed@code bl29e6@obj)) (let ((bl29ef@pivot (cddddr (cddddr bl29ed@code)))) (let ((bl29f1@visit (bl29eb@compile (bl29e9@expanded2core (car bl29ef@pivot))))) (begin (set-car! bl29ef@pivot bl29f1@visit) (let ((bl29f3@pivot (cdr bl29ef@pivot))) (let ((bl29f5@invoke (bl29eb@compile (bl29e9@expanded2core (car bl29f3@pivot))))) (set-car! bl29f3@pivot bl29f5@invoke))))))))) (let ((bl29f7@fasl-file (bl290e@scm->fasl bl29e5@filename))) (begin (if (file-exists? bl29f7@fasl-file) (delete-file bl29f7@fasl-file) (void)) ((call/cc (lambda (bl29fb@bl29f9) (lambda () (with-exception-handler (lambda (bl29fd@c) ((call/cc (lambda (bl29ff@bl29fa) (bl29fb@bl29f9 (lambda () (if '#t (begin (if bl2914@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" bl29e5@filename) (void)) (if (file-exists? bl29f7@fasl-file) (delete-file bl29f7@fasl-file) (void)) '#f) (bl29ff@bl29fa (lambda () (raise-continuable bl29fd@c)))))))))) (lambda () (bl2910@fasl-save bl29f7@fasl-file bl29e6@obj)))))))))))) (set! bl2a3d@bl2916@serialize-library bl2916@serialize-library) (set! bl2918@load-serialized-library (lambda (bl2a01@filename bl2a02@obj) (and (bl2922@mosh-cache-dir) (let ((bl2a05@fasl-file (bl290e@scm->fasl bl2a01@filename))) (if (and (file-exists? bl2a05@fasl-file) ((symbol-value 'file-newer?) bl2a05@fasl-file bl2a01@filename)) (let ((bl2a07@expanded2core (symbol-value 'expanded2core))) (let ((bl2a09@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((bl2a0b@code (bl2912@fasl-load bl2a05@fasl-file))) (let ((bl2a0d@pivot (cddddr (cddddr bl2a0b@code)))) (let ((bl2a0f@visit (car bl2a0d@pivot))) (let ((bl2a11@visit-proc (lambda () (bl2a09@eval-compiled-core bl2a0f@visit)))) (begin (set-car! bl2a0d@pivot bl2a11@visit-proc) (let ((bl2a13@pivot (cdr bl2a0d@pivot))) (let ((bl2a15@invoke (car bl2a13@pivot))) (begin (set-car! bl2a13@pivot (lambda () (bl2a09@eval-compiled-core bl2a15@invoke))) (apply bl2a02@obj bl2a0b@code))))))))))) '#f))))) (set! bl2a3e@bl2918@load-serialized-library bl2918@load-serialized-library) (set! bl291a@make-record-printer (lambda (bl2a17@name bl2a18@printer) (lambda bl2a1b@x (begin (display '"record printer") (for-each display bl2a1b@x))))) (set! bl2a3f@bl291a@make-record-printer bl291a@make-record-printer) (set! bl291c@compile-core (lambda bl2a1d@x (apply error 'comile-core '"not implementated" bl2a1d@x))) (set! bl2a40@bl291c@compile-core bl291c@compile-core) (set! bl291e@read-library-source-file (lambda (bl2a1f@file-name) (with-input-from-file bl2a1f@file-name bl2904@read-annotated))) (set! bl2a41@bl291e@read-library-source-file bl291e@read-library-source-file) (set! bl2920@make-parameter (lambda bl2a2f (let ((bl2a30 (length bl2a2f))) (if (= bl2a30 '1) (apply (lambda (bl2a21@x) (bl2920@make-parameter bl2a21@x (lambda (bl2a23@x) bl2a23@x))) bl2a2f) (if (= bl2a30 '2) (apply (lambda (bl2a25@x bl2a26@fender) (let ((bl2a29@x (bl2a26@fender bl2a25@x))) (lambda bl2a2d (let ((bl2a2e (length bl2a2d))) (if (= bl2a2e '0) (apply (lambda () bl2a29@x) bl2a2d) (if (= bl2a2e '1) (apply (lambda (bl2a2b@v) (set! bl2a29@x (bl2a26@fender bl2a2b@v))) bl2a2d) (error 'apply '"invalid arg count"))))))) bl2a2f) (error 'apply '"invalid arg count")))))) (set! bl2a42@bl2920@make-parameter bl2920@make-parameter) (set! bl2922@mosh-cache-dir (bl2920@make-parameter '#f)) (set! bl2a43@bl2922@mosh-cache-dir bl2922@mosh-cache-dir) (set! bl29b8@file-options-spec (lambda (bl2a31@x) bl2a31@x)) (set! bl2a44@bl29b8@file-options-spec bl29b8@file-options-spec) (void))
(begin (set! bl2a4a@current-primitive-locations (unspecified)) (set! bl2a4c@mutable? (unspecified)) (set! bl2a4e@rewriter (unspecified)) (set! bl2a50@expanded->core (unspecified)) (set! bl2a52@compile-core-expr (unspecified)) (set! bl2a54@pretty-print (unspecified)) (set! bl2a56@compile-core-expr-to-port (unspecified)) (set! bl2a4a@current-primitive-locations (bl2a42@bl2920@make-parameter (lambda (bl2a57@x) '#f) (lambda (bl2a59@p) bl2a59@p))) (set! bl2a95@bl2a4a@current-primitive-locations bl2a4a@current-primitive-locations) (set! bl2a4c@mutable? (lambda (bl2a5b@x) (or (pair? bl2a5b@x) (vector? bl2a5b@x) (hashtable? bl2a5b@x)))) (set! bl2a96@bl2a4c@mutable? bl2a4c@mutable?) (set! bl2a4e@rewriter (lambda (bl2a5d@quote-hack?) (letrec* ((bl2a60@f (lambda (bl2a61@x) (if (pair? bl2a61@x) (let ((bl2a63@t (car bl2a61@x))) (if (memv bl2a63@t '(quote)) (if (and bl2a5d@quote-hack? (bl2a4c@mutable? (cadr bl2a61@x))) (let ((bl2a65@g (gensym))) (begin (set-symbol-value! bl2a65@g (cadr bl2a61@x)) bl2a65@g)) bl2a61@x) (if (memv bl2a63@t '(case-lambda)) (cons 'case-lambda (map (lambda (bl2a67@x) (cons (car bl2a67@x) (map bl2a60@f (cdr bl2a67@x)))) (cdr bl2a61@x))) (if (memv bl2a63@t '(lambda)) (cons* 'lambda (cadr bl2a61@x) (map bl2a60@f (cddr bl2a61@x))) (if (memv bl2a63@t '(letrec)) (let ((bl2a69@bindings (cadr bl2a61@x)) (bl2a6a@body* (cddr bl2a61@x))) (let ((bl2a6d@lhs* (map car bl2a69@bindings)) (bl2a6e@rhs* (map cadr bl2a69@bindings))) (cons* 'letrec (map list bl2a6d@lhs* (map bl2a60@f bl2a6e@rhs*)) (map bl2a60@f bl2a6a@body*)))) (if (memv bl2a63@t '(letrec*)) (let ((bl2a71@bindings (cadr bl2a61@x)) (bl2a72@body* (cddr bl2a61@x))) (let ((bl2a75@lhs* (map car bl2a71@bindings)) (bl2a76@rhs* (map cadr bl2a71@bindings))) (cons* 'letrec* (map list bl2a75@lhs* (map bl2a60@f bl2a76@rhs*)) (map bl2a60@f bl2a72@body*)))) (if (memv bl2a63@t '(library-letrec*)) (let ((bl2a79@name (cadr bl2a61@x)) (bl2a7a@x (cdr bl2a61@x))) (let ((bl2a7d@bindings (cadr bl2a7a@x)) (bl2a7e@body* (cddr bl2a7a@x))) (let ((bl2a81@lhs* (map car bl2a7d@bindings)) (bl2a82@lhs** (map cadr bl2a7d@bindings)) (bl2a83@rhs* (map caddr bl2a7d@bindings))) (cons* 'library-letrec* bl2a79@name (map list bl2a81@lhs* bl2a82@lhs** (map bl2a60@f bl2a83@rhs*)) (map bl2a60@f bl2a7e@body*))))) (if (memv bl2a63@t '(begin)) (cons 'begin (map bl2a60@f (cdr bl2a61@x))) (if (memv bl2a63@t '(set!)) (list 'set! (cadr bl2a61@x) (bl2a60@f (caddr bl2a61@x))) (if (memv bl2a63@t '(primitive)) (let ((bl2a87@op (cadr bl2a61@x))) (let ((bl2a89@t ((bl2a4a@current-primitive-locations) bl2a87@op))) (if bl2a89@t ((lambda (bl2a8b@loc) bl2a8b@loc) bl2a89@t) bl2a87@op))) (if (memv bl2a63@t '(define)) bl2a61@x (if (list? bl2a61@x) (map bl2a60@f bl2a61@x) (error 'rewrite '"invalid form ~s ~s" bl2a61@x (list? bl2a61@x)))))))))))))) bl2a61@x)))) bl2a60@f))) (set! bl2a97@bl2a4e@rewriter bl2a4e@rewriter) (set! bl2a50@expanded->core (lambda (bl2a8d@x) ((bl2a4e@rewriter '#f) bl2a8d@x))) (set! bl2a98@bl2a50@expanded->core bl2a50@expanded->core) (set! bl2a52@compile-core-expr (lambda (bl2a8f@x) ((bl2a4e@rewriter '#f) bl2a8f@x))) (set! bl2a99@bl2a52@compile-core-expr bl2a52@compile-core-expr) (set! bl2a54@pretty-print write) (set! bl2a9a@bl2a54@pretty-print bl2a54@pretty-print) (set! bl2a56@compile-core-expr-to-port (lambda (bl2a91@x bl2a92@p) (bl2a54@pretty-print ((bl2a4e@rewriter '#f) bl2a91@x) bl2a92@p))) (set! bl2a9b@bl2a56@compile-core-expr-to-port bl2a56@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! bl2aea@make-collection (unspecified)) (set! bl2aec@current-library-collection (unspecified)) (set! bl2aee@rp (unspecified)) (set! bl2af8@library? (unspecified)) (set! bl2afa@library-id (unspecified)) (set! bl2afc@set-library-id! (unspecified)) (set! bl2afe@library-name (unspecified)) (set! bl2b00@set-library-name! (unspecified)) (set! bl2b02@library-version (unspecified)) (set! bl2b04@set-library-version! (unspecified)) (set! bl2b06@library-imp* (unspecified)) (set! bl2b08@set-library-imp*! (unspecified)) (set! bl2b0a@library-vis* (unspecified)) (set! bl2b0c@set-library-vis*! (unspecified)) (set! bl2b0e@library-inv* (unspecified)) (set! bl2b10@set-library-inv*! (unspecified)) (set! bl2b12@library-subst (unspecified)) (set! bl2b14@set-library-subst! (unspecified)) (set! bl2b16@library-env (unspecified)) (set! bl2b18@set-library-env! (unspecified)) (set! bl2b1a@library-visit-state (unspecified)) (set! bl2b1c@set-library-visit-state! (unspecified)) (set! bl2b1e@library-invoke-state (unspecified)) (set! bl2b20@set-library-invoke-state! (unspecified)) (set! bl2b22@library-visit-code (unspecified)) (set! bl2b24@set-library-visit-code! (unspecified)) (set! bl2b26@library-invoke-code (unspecified)) (set! bl2b28@set-library-invoke-code! (unspecified)) (set! bl2b2a@library-visible? (unspecified)) (set! bl2b2c@set-library-visible?! (unspecified)) (set! bl2b2e@library-source-file-name (unspecified)) (set! bl2b30@set-library-source-file-name! (unspecified)) (set! bl2b32@dummy (unspecified)) (set! bl2b34@find-dependencies (unspecified)) (set! bl2b36@find-library-by (unspecified)) (set! bl2b38@library-path (unspecified)) (set! bl2b3a@library-extensions (unspecified)) (set! bl2b3c@library-name->file-name (unspecified)) (set! bl2b3e@file-locator (unspecified)) (set! bl2b40@serialize-all (unspecified)) (set! bl2b42@current-precompiled-library-loader (unspecified)) (set! bl2b44@try-load-from-file (unspecified)) (set! bl2b46@library-loader (unspecified)) (set! bl2b48@current-library-expander (unspecified)) (set! bl2b4a@external-pending-libraries (unspecified)) (set! bl2b4c@find-external-library (unspecified)) (set! bl2b4e@find-library-by-name (unspecified)) (set! bl2b50@library-exists? (unspecified)) (set! bl2b52@find-library-by-spec/die (unspecified)) (set! bl2b54@label->binding-table (unspecified)) (set! bl2b56@install-library-record (unspecified)) (set! bl2b58@install-library (unspecified)) (set! bl2b5a@imported-label->binding (unspecified)) (set! bl2b5c@invoke-library (unspecified)) (set! bl2b5e@visit-library (unspecified)) (set! bl2b60@invoke-library-by-spec (unspecified)) (set! bl2b62@installed-libraries (unspecified)) (set! bl2b64@library-spec (unspecified)) (set! bl2aea@make-collection (lambda () (let ((bl2b65@set '())) (letrec* ((bl2b68@set-cons (lambda (bl2b6d@x bl2b6e@ls) (if (memq bl2b6d@x bl2b6e@ls) bl2b6e@ls (cons bl2b6d@x bl2b6e@ls))))) (lambda bl2b6b (let ((bl2b6c (length bl2b6b))) (if (= bl2b6c '0) (apply (lambda () bl2b65@set) bl2b6b) (if (= bl2b6c '1) (apply (lambda (bl2b69@x) (set! bl2b65@set (bl2b68@set-cons bl2b69@x bl2b65@set))) bl2b6b) (error 'apply '"invalid arg count"))))))))) (set! bl2cd9@bl2aea@make-collection bl2aea@make-collection) (set! bl2aec@current-library-collection (bl2a42@bl2920@make-parameter (bl2aea@make-collection) (lambda (bl2b71@x) (begin (if (not (procedure? bl2b71@x)) (assertion-violation 'current-library-collection '"not a procedure" bl2b71@x) (void)) bl2b71@x)))) (set! bl2cda@bl2aec@current-library-collection bl2aec@current-library-collection) (set! bl2aee@rp (bl2a3f@bl291a@make-record-printer 'library (lambda (bl2b73@x bl2b74@p bl2b75@wr) (begin (if (not (bl2af8@library? bl2b73@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (bl2b02@library-version bl2b73@x)) (bl2afe@library-name bl2b73@x) (append (bl2afe@library-name bl2b73@x) (list (bl2b02@library-version bl2b73@x))))) bl2b74@p))))) (set! bl2cdb@bl2aee@rp bl2aee@rp) (set! bl2af8@library? (lambda (bl2b79@x) (and (simple-struct? bl2b79@x) (eq? (simple-struct-name bl2b79@x) 'library)))) (set! bl2cdc@bl2af8@library? bl2af8@library?) (set! bl2afa@library-id (lambda (bl2b7b@x) (simple-struct-ref bl2b7b@x '0))) (set! bl2cdd@bl2afa@library-id bl2afa@library-id) (set! bl2afc@set-library-id! (lambda (bl2b7d@x bl2b7e@val) (simple-struct-set! bl2b7d@x '0 bl2b7e@val))) (set! bl2cde@bl2afc@set-library-id! bl2afc@set-library-id!) (set! bl2afe@library-name (lambda (bl2b81@x) (simple-struct-ref bl2b81@x '1))) (set! bl2cdf@bl2afe@library-name bl2afe@library-name) (set! bl2b00@set-library-name! (lambda (bl2b83@x bl2b84@val) (simple-struct-set! bl2b83@x '1 bl2b84@val))) (set! bl2ce0@bl2b00@set-library-name! bl2b00@set-library-name!) (set! bl2b02@library-version (lambda (bl2b87@x) (simple-struct-ref bl2b87@x '2))) (set! bl2ce1@bl2b02@library-version bl2b02@library-version) (set! bl2b04@set-library-version! (lambda (bl2b89@x bl2b8a@val) (simple-struct-set! bl2b89@x '2 bl2b8a@val))) (set! bl2ce2@bl2b04@set-library-version! bl2b04@set-library-version!) (set! bl2b06@library-imp* (lambda (bl2b8d@x) (simple-struct-ref bl2b8d@x '3))) (set! bl2ce3@bl2b06@library-imp* bl2b06@library-imp*) (set! bl2b08@set-library-imp*! (lambda (bl2b8f@x bl2b90@val) (simple-struct-set! bl2b8f@x '3 bl2b90@val))) (set! bl2ce4@bl2b08@set-library-imp*! bl2b08@set-library-imp*!) (set! bl2b0a@library-vis* (lambda (bl2b93@x) (simple-struct-ref bl2b93@x '4))) (set! bl2ce5@bl2b0a@library-vis* bl2b0a@library-vis*) (set! bl2b0c@set-library-vis*! (lambda (bl2b95@x bl2b96@val) (simple-struct-set! bl2b95@x '4 bl2b96@val))) (set! bl2ce6@bl2b0c@set-library-vis*! bl2b0c@set-library-vis*!) (set! bl2b0e@library-inv* (lambda (bl2b99@x) (simple-struct-ref bl2b99@x '5))) (set! bl2ce7@bl2b0e@library-inv* bl2b0e@library-inv*) (set! bl2b10@set-library-inv*! (lambda (bl2b9b@x bl2b9c@val) (simple-struct-set! bl2b9b@x '5 bl2b9c@val))) (set! bl2ce8@bl2b10@set-library-inv*! bl2b10@set-library-inv*!) (set! bl2b12@library-subst (lambda (bl2b9f@x) (simple-struct-ref bl2b9f@x '6))) (set! bl2ce9@bl2b12@library-subst bl2b12@library-subst) (set! bl2b14@set-library-subst! (lambda (bl2ba1@x bl2ba2@val) (simple-struct-set! bl2ba1@x '6 bl2ba2@val))) (set! bl2cea@bl2b14@set-library-subst! bl2b14@set-library-subst!) (set! bl2b16@library-env (lambda (bl2ba5@x) (simple-struct-ref bl2ba5@x '7))) (set! bl2ceb@bl2b16@library-env bl2b16@library-env) (set! bl2b18@set-library-env! (lambda (bl2ba7@x bl2ba8@val) (simple-struct-set! bl2ba7@x '7 bl2ba8@val))) (set! bl2cec@bl2b18@set-library-env! bl2b18@set-library-env!) (set! bl2b1a@library-visit-state (lambda (bl2bab@x) (simple-struct-ref bl2bab@x '8))) (set! bl2ced@bl2b1a@library-visit-state bl2b1a@library-visit-state) (set! bl2b1c@set-library-visit-state! (lambda (bl2bad@x bl2bae@val) (simple-struct-set! bl2bad@x '8 bl2bae@val))) (set! bl2cee@bl2b1c@set-library-visit-state! bl2b1c@set-library-visit-state!) (set! bl2b1e@library-invoke-state (lambda (bl2bb1@x) (simple-struct-ref bl2bb1@x '9))) (set! bl2cef@bl2b1e@library-invoke-state bl2b1e@library-invoke-state) (set! bl2b20@set-library-invoke-state! (lambda (bl2bb3@x bl2bb4@val) (simple-struct-set! bl2bb3@x '9 bl2bb4@val))) (set! bl2cf0@bl2b20@set-library-invoke-state! bl2b20@set-library-invoke-state!) (set! bl2b22@library-visit-code (lambda (bl2bb7@x) (simple-struct-ref bl2bb7@x '10))) (set! bl2cf1@bl2b22@library-visit-code bl2b22@library-visit-code) (set! bl2b24@set-library-visit-code! (lambda (bl2bb9@x bl2bba@val) (simple-struct-set! bl2bb9@x '10 bl2bba@val))) (set! bl2cf2@bl2b24@set-library-visit-code! bl2b24@set-library-visit-code!) (set! bl2b26@library-invoke-code (lambda (bl2bbd@x) (simple-struct-ref bl2bbd@x '11))) (set! bl2cf3@bl2b26@library-invoke-code bl2b26@library-invoke-code) (set! bl2b28@set-library-invoke-code! (lambda (bl2bbf@x bl2bc0@val) (simple-struct-set! bl2bbf@x '11 bl2bc0@val))) (set! bl2cf4@bl2b28@set-library-invoke-code! bl2b28@set-library-invoke-code!) (set! bl2b2a@library-visible? (lambda (bl2bc3@x) (simple-struct-ref bl2bc3@x '12))) (set! bl2cf5@bl2b2a@library-visible? bl2b2a@library-visible?) (set! bl2b2c@set-library-visible?! (lambda (bl2bc5@x bl2bc6@val) (simple-struct-set! bl2bc5@x '12 bl2bc6@val))) (set! bl2cf6@bl2b2c@set-library-visible?! bl2b2c@set-library-visible?!) (set! bl2b2e@library-source-file-name (lambda (bl2bc9@x) (simple-struct-ref bl2bc9@x '13))) (set! bl2cf7@bl2b2e@library-source-file-name bl2b2e@library-source-file-name) (set! bl2b30@set-library-source-file-name! (lambda (bl2bcb@x bl2bcc@val) (simple-struct-set! bl2bcb@x '13 bl2bcc@val))) (set! bl2cf8@bl2b30@set-library-source-file-name! bl2b30@set-library-source-file-name!) (set! bl2b32@dummy '3) (set! bl2cf9@bl2b32@dummy bl2b32@dummy) (set! bl2b34@find-dependencies (lambda (bl2bcf@ls) (if (null? bl2bcf@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! bl2cfa@bl2b34@find-dependencies bl2b34@find-dependencies) (set! bl2b36@find-library-by (lambda (bl2bd1@pred) (let bl2bd5@f ((bl2bd3@ls ((bl2aec@current-library-collection)))) (if (null? bl2bd3@ls) '#f (if (bl2bd1@pred (car bl2bd3@ls)) (car bl2bd3@ls) (bl2bd5@f (cdr bl2bd3@ls))))))) (set! bl2cfb@bl2b36@find-library-by bl2b36@find-library-by) (set! bl2b38@library-path (bl2a42@bl2920@make-parameter '(".") (lambda (bl2bd7@x) (if (and (list? bl2bd7@x) (for-all string? bl2bd7@x)) (map (lambda (bl2bd9@x) bl2bd9@x) bl2bd7@x) (assertion-violation 'library-path '"not a list of strings" bl2bd7@x))))) (set! bl2cfc@bl2b38@library-path bl2b38@library-path) (set! bl2b3a@library-extensions (bl2a42@bl2920@make-parameter '(".sls" ".ss" ".scm") (lambda (bl2bdb@x) (if (and (list? bl2bdb@x) (for-all string? bl2bdb@x)) (map (lambda (bl2bdd@x) bl2bdd@x) bl2bdb@x) (assertion-violation 'library-extensions '"not a list of strings" bl2bdb@x))))) (set! bl2cfd@bl2b3a@library-extensions bl2b3a@library-extensions) (set! bl2b3c@library-name->file-name (lambda (bl2bdf@x) (call-with-values (lambda () (open-string-output-port)) (lambda (bl2be5@bl2be2 bl2be6@bl2be4) (let ((bl2be9@extract bl2be6@bl2be4) (bl2bea@p bl2be5@bl2be2)) (letrec* ((bl2bee@display-hex (lambda (bl2bf7@n) (if (<= '0 bl2bf7@n '9) (display bl2bf7@n bl2bea@p) (display (integer->char (+ (char->integer '#\a) (- bl2bf7@n '10))) bl2bea@p))))) (begin (let bl2bf1@f ((bl2bef@ls bl2bdf@x)) (if (not (null? bl2bef@ls)) (begin (display '"/" bl2bea@p) (for-each (lambda (bl2bf3@c) (if (or (char<=? '#\a bl2bf3@c '#\z) (char<=? '#\A bl2bf3@c '#\Z) (char<=? '#\0 bl2bf3@c '#\9) (memv bl2bf3@c '(#\- #\. #\_ #\~))) (display bl2bf3@c bl2bea@p) (begin (display '"%" bl2bea@p) (let ((bl2bf5@n (char->integer bl2bf3@c))) (begin (bl2bee@display-hex (quotient bl2bf5@n '16)) (bl2bee@display-hex (remainder bl2bf5@n '16))))))) (string->list (symbol->string (car bl2bef@ls)))) (bl2bf1@f (cdr bl2bef@ls))) (void))) (bl2be9@extract)))))))) (set! bl2cfe@bl2b3c@library-name->file-name bl2b3c@library-name->file-name) (set! bl2b3e@file-locator (bl2a42@bl2920@make-parameter (lambda (bl2bf9@x) (let ((bl2bfb@str (bl2b3c@library-name->file-name bl2bf9@x))) (let bl2c03@f ((bl2bfd@ls (bl2b38@library-path)) (bl2bfe@exts (bl2b3a@library-extensions)) (bl2bff@failed-list '())) (if (null? bl2bfd@ls) (letrec* ((bl2c0d@bl2c08 (make-record-type-descriptor '&library-resolution &condition-rtd 'bl2c0b '#f '#f '#((immutable library) (immutable files)))) (bl2c0f@bl2c0a '#f) (bl2c11@bl2c09 (make-record-constructor-descriptor bl2c0d@bl2c08 &condition-rcd bl2c0f@bl2c0a)) (bl2c14@bl2c07 (record-predicate bl2c0d@bl2c08)) (bl2c16@make-library-resolution-condition (record-constructor bl2c11@bl2c09)) (bl2c18@bl2c05 (record-accessor bl2c0d@bl2c08 '0)) (bl2c1a@bl2c06 (record-accessor bl2c0d@bl2c08 '1)) (bl2c1c@library-resolution-condition? (condition-predicate bl2c0d@bl2c08)) (bl2c1e@condition-library (condition-accessor bl2c0d@bl2c08 bl2c18@bl2c05)) (bl2c20@condition-files (condition-accessor bl2c0d@bl2c08 bl2c1a@bl2c06))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (bl2c16@make-library-resolution-condition bl2bf9@x (reverse bl2bff@failed-list))))) (if (null? bl2bfe@exts) (bl2c03@f (cdr bl2bfd@ls) (bl2b3a@library-extensions) bl2bff@failed-list) (let ((bl2c21@name (string-append (car bl2bfd@ls) bl2bfb@str (car bl2bfe@exts)))) (if (file-exists? bl2c21@name) bl2c21@name (bl2c03@f bl2bfd@ls (cdr bl2bfe@exts) (cons bl2c21@name bl2bff@failed-list))))))))) (lambda (bl2c23@f) (if (procedure? bl2c23@f) bl2c23@f (assertion-violation 'file-locator '"not a procedure" bl2c23@f))))) (set! bl2cff@bl2b3e@file-locator bl2b3e@file-locator) (set! bl2b40@serialize-all (lambda (bl2c25@serialize bl2c26@compile) (letrec* ((bl2c2a@library-desc (lambda (bl2c2d@x) (list (bl2afa@library-id bl2c2d@x) (bl2afe@library-name bl2c2d@x))))) (for-each (lambda (bl2c2b@x) (if (bl2b2e@library-source-file-name bl2c2b@x) (bl2c25@serialize (bl2b2e@library-source-file-name bl2c2b@x) (list (bl2afa@library-id bl2c2b@x) (bl2afe@library-name bl2c2b@x) (bl2b02@library-version bl2c2b@x) (map bl2c2a@library-desc (bl2b06@library-imp* bl2c2b@x)) (map bl2c2a@library-desc (bl2b0a@library-vis* bl2c2b@x)) (map bl2c2a@library-desc (bl2b0e@library-inv* bl2c2b@x)) (bl2b12@library-subst bl2c2b@x) (bl2b16@library-env bl2c2b@x) (bl2c26@compile (bl2b22@library-visit-code bl2c2b@x)) (bl2c26@compile (bl2b26@library-invoke-code bl2c2b@x)) (bl2b2a@library-visible? bl2c2b@x))) (void))) ((bl2aec@current-library-collection)))))) (set! bl2d00@bl2b40@serialize-all bl2b40@serialize-all) (set! bl2b42@current-precompiled-library-loader (bl2a42@bl2920@make-parameter (lambda (bl2c2f@filename bl2c30@sk) '#f))) (set! bl2d01@bl2b42@current-precompiled-library-loader bl2b42@current-precompiled-library-loader) (set! bl2b44@try-load-from-file (lambda (bl2c33@filename) ((bl2b42@current-precompiled-library-loader) bl2c33@filename (lambda bl2c59 (let ((bl2c5a (length bl2c59))) (if (= bl2c5a '11) (apply (lambda (bl2c35@id bl2c36@name bl2c37@ver bl2c38@imp* bl2c39@vis* bl2c3a@inv* bl2c3b@exp-subst bl2c3c@exp-env bl2c3d@visit-proc bl2c3e@invoke-proc bl2c3f@visible?) (let bl2c4d@f ((bl2c4b@deps (append bl2c38@imp* bl2c39@vis* bl2c3a@inv*))) (if (null? bl2c4b@deps) (begin (bl2b58@install-library bl2c35@id bl2c36@name bl2c37@ver bl2c38@imp* bl2c39@vis* bl2c3a@inv* bl2c3b@exp-subst bl2c3c@exp-env bl2c3d@visit-proc bl2c3e@invoke-proc '#f '#f bl2c3f@visible? '#f) '#t) (let ((bl2c4f@d (car bl2c4b@deps))) (let ((bl2c51@label (car bl2c4f@d)) (bl2c52@dname (cadr bl2c4f@d))) (let ((bl2c55@l (bl2b4e@find-library-by-name bl2c52@dname))) (if (and (bl2af8@library? bl2c55@l) (eq? bl2c51@label (bl2afa@library-id bl2c55@l))) (bl2c4d@f (cdr bl2c4b@deps)) (begin (if bl2a3c@bl2914@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" bl2c36@name bl2c52@dname bl2c33@filename) (void)) '#f)))))))) bl2c59) (if (>= bl2c5a '0) (apply (lambda bl2c57@others '#f) bl2c59) (error 'apply '"invalid arg count")))))))) (set! bl2d02@bl2b44@try-load-from-file bl2b44@try-load-from-file) (set! bl2b46@library-loader (bl2a42@bl2920@make-parameter (lambda (bl2c5b@x) (let ((bl2c5d@file-name ((bl2b3e@file-locator) bl2c5b@x))) (if (not bl2c5d@file-name) (assertion-violation '#f '"cannot file library" bl2c5b@x) (or (bl2b44@try-load-from-file bl2c5d@file-name) ((bl2b48@current-library-expander) (bl2a41@bl291e@read-library-source-file bl2c5d@file-name) bl2c5d@file-name (lambda (bl2c5f@name) (if (not (fast-equal? bl2c5f@name bl2c5b@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (bl2c65@bl2c62 bl2c66@bl2c64) (let ((bl2c69@e bl2c66@bl2c64) (bl2c6a@p bl2c65@bl2c62)) (begin (display '"expected to find library " bl2c6a@p) (write bl2c5b@x bl2c6a@p) (display '" in file " bl2c6a@p) (display bl2c5d@file-name bl2c6a@p) (display '", found " bl2c6a@p) (write bl2c5f@name bl2c6a@p) (display '" instead" bl2c6a@p) (bl2c69@e)))))) (void)))))))) (lambda (bl2c6d@f) (if (procedure? bl2c6d@f) bl2c6d@f (assertion-violation 'library-locator '"not a procedure" bl2c6d@f))))) (set! bl2d03@bl2b46@library-loader bl2b46@library-loader) (set! bl2b48@current-library-expander (bl2a42@bl2920@make-parameter (lambda (bl2c6f@x) (assertion-violation 'library-expander '"not initialized")) (lambda (bl2c71@f) (if (procedure? bl2c71@f) bl2c71@f (assertion-violation 'library-expander '"not a procedure" bl2c71@f))))) (set! bl2d04@bl2b48@current-library-expander bl2b48@current-library-expander) (set! bl2b4a@external-pending-libraries (bl2a42@bl2920@make-parameter '())) (set! bl2d05@bl2b4a@external-pending-libraries bl2b4a@external-pending-libraries) (set! bl2b4c@find-external-library (lambda (bl2c73@name) (begin (if (member bl2c73@name (bl2b4a@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" bl2c73@name) (void)) (let ((bl2c79@bl2c76 bl2b4a@external-pending-libraries) (bl2c7a@bl2c78 (cons bl2c73@name (bl2b4a@external-pending-libraries)))) (let ((bl2c7d@swap (lambda () (let ((bl2c7f@t (bl2c79@bl2c76))) (begin (bl2c79@bl2c76 bl2c7a@bl2c78) (set! bl2c7a@bl2c78 bl2c7f@t)))))) (dynamic-wind bl2c7d@swap (lambda () (begin ((bl2b46@library-loader) bl2c73@name) (or (bl2b36@find-library-by (lambda (bl2c81@x) (fast-equal? (bl2afe@library-name bl2c81@x) bl2c73@name))) (assertion-violation '#f '"handling external library did not yield the correct library" bl2c73@name)))) bl2c7d@swap)))))) (set! bl2d06@bl2b4c@find-external-library bl2b4c@find-external-library) (set! bl2b4e@find-library-by-name (lambda (bl2c83@name) (or (bl2b36@find-library-by (lambda (bl2c85@x) (fast-equal? (bl2afe@library-name bl2c85@x) bl2c83@name))) (bl2b4c@find-external-library bl2c83@name)))) (set! bl2d07@bl2b4e@find-library-by-name bl2b4e@find-library-by-name) (set! bl2b50@library-exists? (lambda (bl2c87@name) (and (bl2b36@find-library-by (lambda (bl2c89@x) (fast-equal? (bl2afe@library-name bl2c89@x) bl2c87@name))) '#t))) (set! bl2d08@bl2b50@library-exists? bl2b50@library-exists?) (set! bl2b52@find-library-by-spec/die (lambda (bl2c8b@spec) (let ((bl2c8d@id (car bl2c8b@spec))) (or (bl2b36@find-library-by (lambda (bl2c8f@x) (eq? bl2c8d@id (bl2afa@library-id bl2c8f@x)))) (assertion-violation '#f '"cannot find library with required spec" bl2c8b@spec))))) (set! bl2d09@bl2b52@find-library-by-spec/die bl2b52@find-library-by-spec/die) (set! bl2b54@label->binding-table (make-eq-hashtable)) (set! bl2d0a@bl2b54@label->binding-table bl2b54@label->binding-table) (set! bl2b56@install-library-record (lambda (bl2c91@lib) (begin (let ((bl2c93@exp-env (bl2b16@library-env bl2c91@lib))) (for-each (lambda (bl2c95@x) (let ((bl2c97@label (car bl2c95@x)) (bl2c98@binding (cdr bl2c95@x))) (let ((bl2c9b@binding (let ((bl2c9d@t (car bl2c98@binding))) (if (memv bl2c9d@t '(global)) (cons 'global (cons bl2c91@lib (cdr bl2c98@binding))) (if (memv bl2c9d@t '(global-macro)) (cons 'global-macro (cons bl2c91@lib (cdr bl2c98@binding))) (if (memv bl2c9d@t '(global-macro!)) (cons 'global-macro! (cons bl2c91@lib (cdr bl2c98@binding))) bl2c98@binding)))))) (begin (if (hashtable-ref bl2b54@label->binding-table bl2c97@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" bl2c97@label (hashtable-ref bl2b54@label->binding-table bl2c97@label '#f) bl2c9b@binding) (exit)) (void)) (hashtable-set! bl2b54@label->binding-table bl2c97@label bl2c9b@binding))))) bl2c93@exp-env)) ((bl2aec@current-library-collection) bl2c91@lib)))) (set! bl2d0b@bl2b56@install-library-record bl2b56@install-library-record) (set! bl2b58@install-library (lambda (bl2c9f@id bl2ca0@name bl2ca1@ver bl2ca2@imp* bl2ca3@vis* bl2ca4@inv* bl2ca5@exp-subst bl2ca6@exp-env bl2ca7@visit-proc bl2ca8@invoke-proc bl2ca9@visit-code bl2caa@invoke-code bl2cab@visible? bl2cac@source-file-name) (let ((bl2cbb@imp-lib* (map bl2b52@find-library-by-spec/die bl2ca2@imp*)) (bl2cbc@vis-lib* (map bl2b52@find-library-by-spec/die bl2ca3@vis*)) (bl2cbd@inv-lib* (map bl2b52@find-library-by-spec/die bl2ca4@inv*))) (begin (if (not (and (symbol? bl2c9f@id) (list? bl2ca0@name) (list? bl2ca1@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" bl2c9f@id bl2ca0@name bl2ca1@ver) (void)) (if (bl2b50@library-exists? bl2ca0@name) (assertion-violation 'install-library '"library is already installed" bl2ca0@name) (void)) (let ((bl2cc1@lib (make-simple-struct 'library '15 (list bl2c9f@id bl2ca0@name bl2ca1@ver bl2cbb@imp-lib* bl2cbc@vis-lib* bl2cbd@inv-lib* bl2ca5@exp-subst bl2ca6@exp-env bl2ca7@visit-proc bl2ca8@invoke-proc bl2ca9@visit-code bl2caa@invoke-code bl2cab@visible? bl2cac@source-file-name)))) (bl2b56@install-library-record bl2cc1@lib)))))) (set! bl2d0c@bl2b58@install-library bl2b58@install-library) (set! bl2b5a@imported-label->binding (lambda (bl2cc3@lab) (hashtable-ref bl2b54@label->binding-table bl2cc3@lab '#f))) (set! bl2d0d@bl2b5a@imported-label->binding bl2b5a@imported-label->binding) (set! bl2b5c@invoke-library (lambda (bl2cc5@lib) (let ((bl2cc7@invoke (bl2b1e@library-invoke-state bl2cc5@lib))) (if (procedure? bl2cc7@invoke) (begin (bl2b20@set-library-invoke-state! bl2cc5@lib (lambda () (assertion-violation 'invoke '"circularity detected" bl2cc5@lib))) (for-each bl2b5c@invoke-library (bl2b0e@library-inv* bl2cc5@lib)) (bl2b20@set-library-invoke-state! bl2cc5@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" bl2cc5@lib))) (bl2cc7@invoke) (bl2b20@set-library-invoke-state! bl2cc5@lib '#t)) (void))))) (set! bl2d0e@bl2b5c@invoke-library bl2b5c@invoke-library) (set! bl2b5e@visit-library (lambda (bl2cc9@lib) (let ((bl2ccb@visit (bl2b1a@library-visit-state bl2cc9@lib))) (if (procedure? bl2ccb@visit) (begin (bl2b1c@set-library-visit-state! bl2cc9@lib (lambda () (assertion-violation 'visit '"circularity detected" bl2cc9@lib))) (for-each bl2b5c@invoke-library (bl2b0a@library-vis* bl2cc9@lib)) (bl2b1c@set-library-visit-state! bl2cc9@lib (lambda () (assertion-violation 'invoke '"first visit did not return" bl2cc9@lib))) (bl2ccb@visit) (bl2b1c@set-library-visit-state! bl2cc9@lib '#t)) (void))))) (set! bl2d0f@bl2b5e@visit-library bl2b5e@visit-library) (set! bl2b60@invoke-library-by-spec (lambda (bl2ccd@spec) (bl2b5c@invoke-library (bl2b52@find-library-by-spec/die bl2ccd@spec)))) (set! bl2d10@bl2b60@invoke-library-by-spec bl2b60@invoke-library-by-spec) (set! bl2b62@installed-libraries (lambda bl2cd5 (let ((bl2cd6 (length bl2cd5))) (if (= bl2cd6 '1) (apply (lambda (bl2ccf@all?) (let bl2cd3@f ((bl2cd1@ls ((bl2aec@current-library-collection)))) (if (null? bl2cd1@ls) '() (if (or bl2ccf@all? (bl2b2a@library-visible? (car bl2cd1@ls))) (cons (car bl2cd1@ls) (bl2cd3@f (cdr bl2cd1@ls))) (bl2cd3@f (cdr bl2cd1@ls)))))) bl2cd5) (if (= bl2cd6 '0) (apply (lambda () (bl2b62@installed-libraries '#f)) bl2cd5) (error 'apply '"invalid arg count")))))) (set! bl2d11@bl2b62@installed-libraries bl2b62@installed-libraries) (set! bl2b64@library-spec (lambda (bl2cd7@x) (begin (if (not (bl2af8@library? bl2cd7@x)) (assertion-violation 'library-spec '"not a library" bl2cd7@x) (void)) (list (bl2afa@library-id bl2cd7@x) (bl2afe@library-name bl2cd7@x) (bl2b02@library-version bl2cd7@x))))) (set! bl2d12@bl2b64@library-spec bl2b64@library-spec) (void))
(begin (set! bl2d16@build-global-define (unspecified)) (set! bl2d87@build-lambda (unspecified)) (set! bl2d89@build-case-lambda (unspecified)) (set! bl2db7@build-sequence (unspecified)) (set! bl2db9@build-void (unspecified)) (set! bl2dbb@build-letrec (unspecified)) (set! bl2dbd@build-let (unspecified)) (set! bl2dbf@build-named-let (unspecified)) (set! bl2dc1@build-letrec* (unspecified)) (set! bl2dc3@build-library-letrec* (unspecified)) (set! bl2dc5@build-receive (unspecified)) (set! bl2d16@build-global-define (lambda (bl2dc6@x) (bl2db9@build-void))) (set! bl2e54@bl2d16@build-global-define bl2d16@build-global-define) (set! bl2d87@build-lambda (lambda (bl2dc8@ae bl2dc9@vars bl2dca@exp) (list 'lambda bl2dc9@vars bl2dca@exp))) (set! bl2e55@bl2d87@build-lambda bl2d87@build-lambda) (set! bl2d89@build-case-lambda (lambda (bl2dce@ae bl2dcf@vars* bl2dd0@exp*) (letrec* ((bl2dd5@build-error (lambda (bl2e0c@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (bl2dd7@build-pred (lambda (bl2df4@ae bl2df5@n bl2df6@vars) (call-with-values (lambda () (let bl2e02@f ((bl2dfe@vars bl2df6@vars) (bl2dff@count '0)) (if (pair? bl2dfe@vars) (bl2e02@f (cdr bl2dfe@vars) (+ bl2dff@count '1)) (if (null? bl2dfe@vars) (values bl2dff@count '=) (values bl2dff@count '>=))))) (lambda (bl2e04@bl2dfb bl2e05@bl2dfd) (let ((bl2e08@pred bl2e05@bl2dfd) (bl2e09@count bl2e04@bl2dfb)) (list (list 'primitive bl2e08@pred) bl2df5@n (list 'quote bl2e09@count))))))) (bl2dd9@build-apply (lambda (bl2dec@ae bl2ded@g bl2dee@vars bl2def@exp) (list '(primitive apply) (bl2d87@build-lambda bl2dec@ae bl2dee@vars bl2def@exp) bl2ded@g))) (bl2ddb@expand-case-lambda (lambda (bl2ddc@ae bl2ddd@vars bl2dde@exp*) (let ((bl2de2@g (gensym)) (bl2de3@n (gensym))) (list 'lambda bl2de2@g (bl2dbd@build-let bl2ddc@ae (list bl2de3@n) (list (list '(primitive length) bl2de2@g)) (let bl2dea@f ((bl2de6@vars* bl2dcf@vars*) (bl2de7@exp* bl2dde@exp*)) (if (null? bl2de6@vars*) (bl2dd5@build-error bl2ddc@ae) (list 'if (bl2dd7@build-pred bl2ddc@ae bl2de3@n (car bl2de6@vars*)) (bl2dd9@build-apply bl2ddc@ae bl2de2@g (car bl2de6@vars*) (car bl2de7@exp*)) (bl2dea@f (cdr bl2de6@vars*) (cdr bl2de7@exp*))))))))))) (if (= (length bl2dd0@exp*) '1) (bl2d87@build-lambda bl2dce@ae (car bl2dcf@vars*) (car bl2dd0@exp*)) (bl2ddb@expand-case-lambda bl2dce@ae bl2dcf@vars* bl2dd0@exp*))))) (set! bl2e56@bl2d89@build-case-lambda bl2d89@build-case-lambda) (set! bl2db7@build-sequence (lambda (bl2e0e@ae bl2e0f@exps) (let bl2e14@loop ((bl2e12@exps bl2e0f@exps)) (if (null? (cdr bl2e12@exps)) (car bl2e12@exps) (if (equal? (car bl2e12@exps) (bl2db9@build-void)) (bl2e14@loop (cdr bl2e12@exps)) (cons 'begin bl2e12@exps)))))) (set! bl2e57@bl2db7@build-sequence bl2db7@build-sequence) (set! bl2db9@build-void (lambda () '((primitive void)))) (set! bl2e58@bl2db9@build-void bl2db9@build-void) (set! bl2dbb@build-letrec (lambda (bl2e16@ae bl2e17@vars bl2e18@val-exps bl2e19@body-exp) (if (null? bl2e17@vars) bl2e19@body-exp (list 'letrec (map list bl2e17@vars bl2e18@val-exps) bl2e19@body-exp)))) (set! bl2e59@bl2dbb@build-letrec bl2dbb@build-letrec) (set! bl2dbd@build-let (lambda (bl2e1e@ae bl2e1f@vars bl2e20@val-exps bl2e21@body-exp) (if (null? bl2e1f@vars) bl2e21@body-exp (list 'let (map list bl2e1f@vars bl2e20@val-exps) bl2e21@body-exp)))) (set! bl2e5a@bl2dbd@build-let bl2dbd@build-let) (set! bl2dbf@build-named-let (lambda (bl2e26@ae bl2e27@name bl2e28@vars bl2e29@val-exps bl2e2a@body-exp) (list 'let bl2e27@name (map list bl2e28@vars bl2e29@val-exps) bl2e2a@body-exp))) (set! bl2e5b@bl2dbf@build-named-let bl2dbf@build-named-let) (set! bl2dc1@build-letrec* (lambda (bl2e30@ae bl2e31@vars bl2e32@val-exps bl2e33@body-exp) (if (null? bl2e31@vars) bl2e33@body-exp (list 'letrec* (map list bl2e31@vars bl2e32@val-exps) bl2e33@body-exp)))) (set! bl2e5c@bl2dc1@build-letrec* bl2dc1@build-letrec*) (set! bl2dc3@build-library-letrec* (lambda (bl2e38@ae bl2e39@name bl2e3a@vars bl2e3b@locs bl2e3c@val-exps bl2e3d@body-exp) (cons 'begin (append (map (lambda (bl2e44@var) (cons 'set! (cons bl2e44@var '((unspecified))))) bl2e3a@vars) (append (apply append (map (lambda (bl2e46@var bl2e47@loc bl2e48@val-exp) (list (list 'set! bl2e46@var bl2e48@val-exp) (list 'set! bl2e47@loc bl2e46@var))) bl2e3a@vars bl2e3b@locs bl2e3c@val-exps)) (list bl2e3d@body-exp)))))) (set! bl2e5d@bl2dc3@build-library-letrec* bl2dc3@build-library-letrec*) (set! bl2dc5@build-receive (lambda (bl2e4c@ae bl2e4d@vars bl2e4e@producer bl2e4f@body*) (begin (display '"************** in ") (cons 'receive (cons bl2e4d@vars (cons bl2e4e@producer bl2e4f@body*)))))) (set! bl2e5e@bl2dc5@build-receive bl2dc5@build-receive) (void))
(begin (set! bl2e6d@file-options-macro (unspecified)) (set! bl2e6f@set-cons (unspecified)) (set! bl2e71@set-union (unspecified)) (set! bl2e76@top-mark* (unspecified)) (set! bl2e78@top-marked? (unspecified)) (set! bl2e7a@gen-lexical (unspecified)) (set! bl2e7c@gen-global (unspecified)) (set! bl2e7e@gen-label (unspecified)) (set! bl2e80@gen-top-level-label (unspecified)) (set! bl2e82@gen-define-label+loc (unspecified)) (set! bl2e84@gen-define-label (unspecified)) (set! bl2e8e@rib? (unspecified)) (set! bl2e90@rib-sym* (unspecified)) (set! bl2e92@set-rib-sym*! (unspecified)) (set! bl2e94@rib-mark** (unspecified)) (set! bl2e96@set-rib-mark**! (unspecified)) (set! bl2e98@rib-label* (unspecified)) (set! bl2e9a@set-rib-label*! (unspecified)) (set! bl2e9c@rib-sealed/freq (unspecified)) (set! bl2e9e@set-rib-sealed/freq! (unspecified)) (set! bl2ea0@rib-cache (unspecified)) (set! bl2ea2@set-rib-cache! (unspecified)) (set! bl2ea4@dummy (unspecified)) (set! bl2ea6@make-empty-rib (unspecified)) (set! bl2ea8@extend-rib! (unspecified)) (set! bl2eaa@extend-rib/nc! (unspecified)) (set! bl2eac@make-rib-map (unspecified)) (set! bl2eae@seal-rib! (unspecified)) (set! bl2eb0@unseal-rib! (unspecified)) (set! bl2eb2@make-full-rib (unspecified)) (set! bl2eb4@rp (unspecified)) (set! bl2ebe@stx? (unspecified)) (set! bl2ec0@stx-expr (unspecified)) (set! bl2ec2@set-stx-expr! (unspecified)) (set! bl2ec4@stx-mark* (unspecified)) (set! bl2ec6@set-stx-mark*! (unspecified)) (set! bl2ec8@stx-subst* (unspecified)) (set! bl2eca@set-stx-subst*! (unspecified)) (set! bl2ecc@stx-ae* (unspecified)) (set! bl2ece@set-stx-ae*! (unspecified)) (set! bl2ed0@dummy (unspecified)) (set! bl2ed2@datum->stx (unspecified)) (set! bl2ed4@gen-mark (unspecified)) (set! bl2ed6@anti-mark (unspecified)) (set! bl2ed8@anti-mark? (unspecified)) (set! bl2eda@mkstx (unspecified)) (set! bl2edc@add-subst (unspecified)) (set! bl2ede@add-mark (unspecified)) (set! bl2ee0@syntax-kind? (unspecified)) (set! bl2ee2@syntax-vector->list (unspecified)) (set! bl2ee4@syntax-pair? (unspecified)) (set! bl2ee6@syntax-vector? (unspecified)) (set! bl2ee8@syntax-null? (unspecified)) (set! bl2eea@syntax-list? (unspecified)) (set! bl2eec@syntax-car (unspecified)) (set! bl2eee@syntax-cdr (unspecified)) (set! bl2ef0@syntax->list (unspecified)) (set! bl2ef2@id? (unspecified)) (set! bl2ef4@id->sym (unspecified)) (set! bl2ef6@bound-id=? (unspecified)) (set! bl2ef8@free-id=? (unspecified)) (set! bl2efa@valid-bound-ids? (unspecified)) (set! bl2efc@distinct-bound-ids? (unspecified)) (set! bl2efe@bound-id-member? (unspecified)) (set! bl2f00@self-evaluating? (unspecified)) (set! bl2f02@strip-annotations (unspecified)) (set! bl2f04@strip (unspecified)) (set! bl2f06@stx->datum (unspecified)) (set! bl2f08@id->label (unspecified)) (set! bl2f0a@label->binding (unspecified)) (set! bl2f0c@make-binding (unspecified)) (set! bl2f0e@binding-type (unspecified)) (set! bl2f10@binding-value (unspecified)) (set! bl2f12@raise-unbound-error (unspecified)) (set! bl2f14@syntax-type (unspecified)) (set! bl2f22@sanitize-binding (unspecified)) (set! bl2f24@make-variable-transformer (unspecified)) (set! bl2f26@variable-transformer? (unspecified)) (set! bl2f28@variable-transformer-procedure (unspecified)) (set! bl2f2a@make-eval-transformer (unspecified)) (set! bl307b@parse-define (unspecified)) (set! bl307d@parse-define-syntax (unspecified)) (set! bl307f@scheme-stx-hashtable (unspecified)) (set! bl3081@scheme-stx (unspecified)) (set! bl3083@lexical-var (unspecified)) (set! bl3085@lexical-mutable? (unspecified)) (set! bl3087@set-lexical-mutable! (unspecified)) (set! bl3089@add-lexical (unspecified)) (set! bl308b@add-lexicals (unspecified)) (set! bl308d@letrec-helper (unspecified)) (set! bl308f@let-transformer (unspecified)) (set! bl3091@letrec-transformer (unspecified)) (set! bl3093@letrec*-transformer (unspecified)) (set! bl3095@fluid-let-syntax-transformer (unspecified)) (set! bl3097@type-descriptor-transformer (unspecified)) (set! bl3099@record-type-descriptor-transformer (unspecified)) (set! bl309b@record-constructor-descriptor-transformer (unspecified)) (set! bl309d@when-macro (unspecified)) (set! bl309f@unless-macro (unspecified)) (set! bl30a1@if-transformer (unspecified)) (set! bl30a3@and-transformer (unspecified)) (set! bl30a5@or-transformer (unspecified)) (set! bl30a7@case-macro (unspecified)) (set! bl30a9@quote-transformer (unspecified)) (set! bl30ab@case-lambda-transformer (unspecified)) (set! bl30ad@lambda-transformer (unspecified)) (set! bl30af@bless (unspecified)) (set! bl30b1@with-syntax-macro (unspecified)) (set! bl30b3@invalid-fmls-error (unspecified)) (set! bl30b5@let-macro (unspecified)) (set! bl30b7@let-values-macro (unspecified)) (set! bl30b9@let*-values-macro (unspecified)) (set! bl30bb@trace-lambda-macro (unspecified)) (set! bl30bd@trace-define-macro (unspecified)) (set! bl30bf@trace-define-syntax-macro (unspecified)) (set! bl30c1@trace-let/rec-syntax (unspecified)) (set! bl30c3@trace-let-syntax-macro (unspecified)) (set! bl30c5@trace-letrec-syntax-macro (unspecified)) (set! bl30c7@guard-macro (unspecified)) (set! bl30c9@define-enumeration-macro (unspecified)) (set! bl30cb@time-macro (unspecified)) (set! bl30cd@delay-macro (unspecified)) (set! bl30cf@assert-macro (unspecified)) (set! bl30d1@endianness-macro (unspecified)) (set! bl30d3@identifier-syntax-macro (unspecified)) (set! bl30d5@do-macro (unspecified)) (set! bl30d7@let*-macro (unspecified)) (set! bl30d9@or-macro (unspecified)) (set! bl30db@and-macro (unspecified)) (set! bl30dd@cond-macro (unspecified)) (set! bl30df@do-include (unspecified)) (set! bl30e1@include-macro (unspecified)) (set! bl30e3@include-into-macro (unspecified)) (set! bl30e5@syntax-rules-macro (unspecified)) (set! bl30e7@quasiquote-macro (unspecified)) (set! bl30e9@quasisyntax-macro (unspecified)) (set! bl30eb@define-struct-macro (unspecified)) (set! bl30ed@define-record-type-macro (unspecified)) (set! bl30ef@define-condition-type-macro (unspecified)) (set! bl30f1@incorrect-usage-macro (unspecified)) (set! bl30f3@parameterize-macro (unspecified)) (set! bl30f5@foreign-call-transformer (unspecified)) (set! bl30f7@convert-pattern (unspecified)) (set! bl30f9@syntax-dispatch (unspecified)) (set! bl30fb@ellipsis? (unspecified)) (set! bl30fd@underscore? (unspecified)) (set! bl30ff@verify-literals (unspecified)) (set! bl3101@syntax-case-transformer (unspecified)) (set! bl3103@ellipsis-map (unspecified)) (set! bl3105@syntax-transformer (unspecified)) (set! bl3107@core-macro-transformer (unspecified)) (set! bl3109@symbol-macro (unspecified)) (set! bl310b@macro-transformer (unspecified)) (set! bl310d@local-macro-transformer (unspecified)) (set! bl310f@do-macro-call (unspecified)) (set! bl3111@chi-macro (unspecified)) (set! bl3113@chi-local-macro (unspecified)) (set! bl3115@chi-global-macro (unspecified)) (set! bl3117@chi-expr* (unspecified)) (set! bl3119@chi-application (unspecified)) (set! bl311b@chi-expr (unspecified)) (set! bl311d@chi-set! (unspecified)) (set! bl311f@verify-formals (unspecified)) (set! bl3121@chi-lambda-clause (unspecified)) (set! bl3123@chi-lambda-clause* (unspecified)) (set! bl3125@chi-defun (unspecified)) (set! bl3127@chi-rhs (unspecified)) (set! bl3129@expand-interaction-rhs*/init* (unspecified)) (set! bl312b@chi-rhs* (unspecified)) (set! bl312d@find-bound=? (unspecified)) (set! bl312f@find-dups (unspecified)) (set! bl3131@chi-internal (unspecified)) (set! bl3133@parse-module (unspecified)) (set! bl313d@module-interface? (unspecified)) (set! bl313f@module-interface-first-mark (unspecified)) (set! bl3141@set-module-interface-first-mark! (unspecified)) (set! bl3143@module-interface-exp-id-vec (unspecified)) (set! bl3145@set-module-interface-exp-id-vec! (unspecified)) (set! bl3147@module-interface-exp-lab-vec (unspecified)) (set! bl3149@set-module-interface-exp-lab-vec! (unspecified)) (set! bl314b@dummy (unspecified)) (set! bl314d@module-interface-exp-id* (unspecified)) (set! bl314f@chi-internal-module (unspecified)) (set! bl3151@chi-body* (unspecified)) (set! bl3153@expand-transformer (unspecified)) (set! bl3155@parse-exports (unspecified)) (set! bl3157@parse-library-name (unspecified)) (set! bl3159@parse-library (unspecified)) (set! bl315b@parse-import-spec* (unspecified)) (set! bl315d@make-top-rib (unspecified)) (set! bl315f@make-collector (unspecified)) (set! bl3161@inv-collector (unspecified)) (set! bl3163@vis-collector (unspecified)) (set! bl3165@imp-collector (unspecified)) (set! bl3167@chi-library-internal (unspecified)) (set! bl3169@chi-interaction-expr (unspecified)) (set! bl316b@library-body-expander (unspecified)) (set! bl316d@core-library-expander (unspecified)) (set! bl316f@parse-top-level-program (unspecified)) (set! bl3171@top-level-expander (unspecified)) (set! bl3173@rp (unspecified)) (set! bl317d@env? (unspecified)) (set! bl317f@env-names (unspecified)) (set! bl3181@set-env-names! (unspecified)) (set! bl3183@env-labels (unspecified)) (set! bl3185@set-env-labels! (unspecified)) (set! bl3187@env-itc (unspecified)) (set! bl3189@set-env-itc! (unspecified)) (set! bl318b@dummy (unspecified)) (set! bl318d@rp (unspecified)) (set! bl3197@interaction-env? (unspecified)) (set! bl3199@interaction-env-rib (unspecified)) (set! bl319b@set-interaction-env-rib! (unspecified)) (set! bl319d@interaction-env-r (unspecified)) (set! bl319f@set-interaction-env-r! (unspecified)) (set! bl31a1@interaction-env-locs (unspecified)) (set! bl31a3@set-interaction-env-locs! (unspecified)) (set! bl31a5@dummy (unspecified)) (set! bl31a7@interaction-environment-symbols (unspecified)) (set! bl31a9@environment-bindings (unspecified)) (set! bl31ab@parse-binding (unspecified)) (set! bl31ad@environment? (unspecified)) (set! bl31af@environment-symbols (unspecified)) (set! bl31b1@environment (unspecified)) (set! bl31b3@null-environment (unspecified)) (set! bl31b5@scheme-report-environment (unspecified)) (set! bl31b7@expand (unspecified)) (set! bl31b9@eval (unspecified)) (set! bl31bb@library-expander (unspecified)) (set! bl31bd@boot-library-expand (unspecified)) (set! bl31bf@rev-map-append (unspecified)) (set! bl31c1@build-exports (unspecified)) (set! bl31c3@make-export-subst (unspecified)) (set! bl31c5@make-export-env/macros (unspecified)) (set! bl31c7@generate-temporaries (unspecified)) (set! bl31c9@free-identifier=? (unspecified)) (set! bl31cb@bound-identifier=? (unspecified)) (set! bl31cd@make-source-condition (unspecified)) (set! bl31cf@extract-position-condition (unspecified)) (set! bl31d1@expression-position (unspecified)) (set! bl31d3@assertion-error (unspecified)) (set! bl31d5@syntax-error (unspecified)) (set! bl31d7@syntax-violation* (unspecified)) (set! bl31d9@syntax-violation (unspecified)) (set! bl31db@identifier? (unspecified)) (set! bl31dd@datum->syntax (unspecified)) (set! bl31df@syntax->datum (unspecified)) (set! bl31e1@ungensym-all (unspecified)) (set! bl31e3@compile-r6rs-top-level (unspecified)) (set! bl31e5@pre-compile-r6rs-top-level (unspecified)) (set! bl31e7@interaction-environment (unspecified)) (set! bl31e9@top-level-context (unspecified)) (set! bl2e6d@file-options-macro (lambda (bl31ea@x) (letrec* ((bl31ed@valid-option? (lambda (bl31f6@x) (and (bl2ef2@id? bl31f6@x) (memq (bl2ef4@id->sym bl31f6@x) '(no-fail no-create no-truncate)))))) (let ((bl31ee@t bl31ea@x)) (let ((bl31f0@ls/false (bl30f9@syntax-dispatch bl31ee@t '(_ . each-any)))) (if (and bl31f0@ls/false (apply (lambda (bl31f2@opt*) (for-all bl31ed@valid-option? bl31f2@opt*)) bl31f0@ls/false)) (apply (lambda (bl31f4@opt*) (bl30af@bless (list 'make-file-options (list 'quote bl31f4@opt*)))) bl31f0@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl31ee@t))))))) (set! bl4b76@bl2e6d@file-options-macro bl2e6d@file-options-macro) (set! bl2e6f@set-cons (lambda (bl31f8@x bl31f9@ls) (if (memq bl31f8@x bl31f9@ls) bl31f9@ls (cons bl31f8@x bl31f9@ls)))) (set! bl4b77@bl2e6f@set-cons bl2e6f@set-cons) (set! bl2e71@set-union (lambda (bl31fc@ls1 bl31fd@ls2) (if (null? bl31fc@ls1) bl31fd@ls2 (if (memq (car bl31fc@ls1) bl31fd@ls2) (bl2e71@set-union (cdr bl31fc@ls1) bl31fd@ls2) (cons (car bl31fc@ls1) (bl2e71@set-union (cdr bl31fc@ls1) bl31fd@ls2)))))) (set! bl4b78@bl2e71@set-union bl2e71@set-union) (set! bl2e76@top-mark* '(top)) (set! bl4b79@bl2e76@top-mark* bl2e76@top-mark*) (set! bl2e78@top-marked? (lambda (bl3200@m*) (memq 'top bl3200@m*))) (set! bl4b7a@bl2e78@top-marked? bl2e78@top-marked?) (set! bl2e7a@gen-lexical (lambda (bl3202@sym) (if (symbol? bl3202@sym) (gensym bl3202@sym) (if (bl2ebe@stx? bl3202@sym) (bl2e7a@gen-lexical (bl2ef4@id->sym bl3202@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" bl3202@sym))))) (set! bl4b7b@bl2e7a@gen-lexical bl2e7a@gen-lexical) (set! bl2e7c@gen-global (lambda (bl3204@x) (bl2e7a@gen-lexical bl3204@x))) (set! bl4b7c@bl2e7c@gen-global bl2e7c@gen-global) (set! bl2e7e@gen-label (lambda (bl3206@_) (gensym))) (set! bl4b7d@bl2e7e@gen-label bl2e7e@gen-label) (set! bl2e80@gen-top-level-label (lambda (bl3208@id bl3209@rib) (letrec* ((bl320d@find (lambda (bl3218@sym bl3219@mark* bl321a@sym* bl321b@mark** bl321c@label*) (and (pair? bl321a@sym*) (if (and (eq? bl3218@sym (car bl321a@sym*)) (same-marks? bl3219@mark* (car bl321b@mark**))) (car bl321c@label*) (bl320d@find bl3218@sym bl3219@mark* (cdr bl321a@sym*) (cdr bl321b@mark**) (cdr bl321c@label*))))))) (let ((bl320e@sym (bl2ef4@id->sym bl3208@id)) (bl320f@mark* (bl2ec4@stx-mark* bl3208@id))) (let ((bl3212@sym* (bl2e90@rib-sym* bl3209@rib))) (let ((bl3214@t (and (memq bl320e@sym (bl2e90@rib-sym* bl3209@rib)) (bl320d@find bl320e@sym bl320f@mark* bl3212@sym* (bl2e94@rib-mark** bl3209@rib) (bl2e98@rib-label* bl3209@rib))))) (if bl3214@t ((lambda (bl3216@label) (if (bl2d0d@bl2b5a@imported-label->binding bl3216@label) (gensym) bl3216@label)) bl3214@t) (gensym)))))))) (set! bl4b7e@bl2e80@gen-top-level-label bl2e80@gen-top-level-label) (set! bl2e82@gen-define-label+loc (lambda (bl3222@id bl3223@rib) (let ((bl3226@t (bl31e9@top-level-context))) (if bl3226@t ((lambda (bl3228@env) (let ((bl322a@label (bl2e80@gen-top-level-label bl3222@id bl3223@rib)) (bl322b@locs (bl31a1@interaction-env-locs bl3228@env))) (values bl322a@label (let ((bl322e@t (assq bl322a@label bl322b@locs))) (if bl322e@t (cdr bl322e@t) (let ((bl3230@loc (bl2e7a@gen-lexical bl3222@id))) (begin (bl31a3@set-interaction-env-locs! bl3228@env (cons (cons bl322a@label bl3230@loc) bl322b@locs)) bl3230@loc))))))) bl3226@t) (values (gensym) (bl2e7a@gen-lexical bl3222@id)))))) (set! bl4b7f@bl2e82@gen-define-label+loc bl2e82@gen-define-label+loc) (set! bl2e84@gen-define-label (lambda (bl3232@id bl3233@rib) (if (bl31e9@top-level-context) (bl2e80@gen-top-level-label bl3232@id bl3233@rib) (gensym)))) (set! bl4b80@bl2e84@gen-define-label bl2e84@gen-define-label) (set! bl2e8e@rib? (lambda (bl3236@x) (and (simple-struct? bl3236@x) (eq? (simple-struct-name bl3236@x) 'rib)))) (set! bl4b81@bl2e8e@rib? bl2e8e@rib?) (set! bl2e90@rib-sym* (lambda (bl3238@x) (simple-struct-ref bl3238@x '0))) (set! bl4b82@bl2e90@rib-sym* bl2e90@rib-sym*) (set! bl2e92@set-rib-sym*! (lambda (bl323a@x bl323b@val) (simple-struct-set! bl323a@x '0 bl323b@val))) (set! bl4b83@bl2e92@set-rib-sym*! bl2e92@set-rib-sym*!) (set! bl2e94@rib-mark** (lambda (bl323e@x) (simple-struct-ref bl323e@x '1))) (set! bl4b84@bl2e94@rib-mark** bl2e94@rib-mark**) (set! bl2e96@set-rib-mark**! (lambda (bl3240@x bl3241@val) (simple-struct-set! bl3240@x '1 bl3241@val))) (set! bl4b85@bl2e96@set-rib-mark**! bl2e96@set-rib-mark**!) (set! bl2e98@rib-label* (lambda (bl3244@x) (simple-struct-ref bl3244@x '2))) (set! bl4b86@bl2e98@rib-label* bl2e98@rib-label*) (set! bl2e9a@set-rib-label*! (lambda (bl3246@x bl3247@val) (simple-struct-set! bl3246@x '2 bl3247@val))) (set! bl4b87@bl2e9a@set-rib-label*! bl2e9a@set-rib-label*!) (set! bl2e9c@rib-sealed/freq (lambda (bl324a@x) (simple-struct-ref bl324a@x '3))) (set! bl4b88@bl2e9c@rib-sealed/freq bl2e9c@rib-sealed/freq) (set! bl2e9e@set-rib-sealed/freq! (lambda (bl324c@x bl324d@val) (simple-struct-set! bl324c@x '3 bl324d@val))) (set! bl4b89@bl2e9e@set-rib-sealed/freq! bl2e9e@set-rib-sealed/freq!) (set! bl2ea0@rib-cache (lambda (bl3250@x) (simple-struct-ref bl3250@x '4))) (set! bl4b8a@bl2ea0@rib-cache bl2ea0@rib-cache) (set! bl2ea2@set-rib-cache! (lambda (bl3252@x bl3253@val) (simple-struct-set! bl3252@x '4 bl3253@val))) (set! bl4b8b@bl2ea2@set-rib-cache! bl2ea2@set-rib-cache!) (set! bl2ea4@dummy '3) (set! bl4b8c@bl2ea4@dummy bl2ea4@dummy) (set! bl2ea6@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! bl4b8d@bl2ea6@make-empty-rib bl2ea6@make-empty-rib) (set! bl2ea8@extend-rib! (lambda (bl3256@rib bl3257@id bl3258@label) (letrec* ((bl325d@find (lambda (bl326a@sym bl326b@mark* bl326c@sym* bl326d@mark** bl326e@label*) (and (pair? bl326c@sym*) (if (and (eq? bl326a@sym (car bl326c@sym*)) (same-marks? bl326b@mark* (car bl326d@mark**))) bl326e@label* (bl325d@find bl326a@sym bl326b@mark* (cdr bl326c@sym*) (cdr bl326d@mark**) (cdr bl326e@label*))))))) (begin (if (bl2e9c@rib-sealed/freq bl3256@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" bl3256@rib) (void)) (let ((bl325e@sym (bl2ef4@id->sym bl3257@id)) (bl325f@mark* (bl2ec4@stx-mark* bl3257@id))) (let ((bl3262@sym* (bl2e90@rib-sym* bl3256@rib))) (let ((bl3264@t (and (memq bl325e@sym (bl2e90@rib-sym* bl3256@rib)) (bl325d@find bl325e@sym bl325f@mark* bl3262@sym* (bl2e94@rib-mark** bl3256@rib) (bl2e98@rib-label* bl3256@rib))))) (if bl3264@t ((lambda (bl3266@p) (if (not (eq? bl3258@label (car bl3266@p))) (if (bl31e9@top-level-context) (set-car! bl3266@p bl3258@label) (bl31d9@syntax-violation '#f '"multiple definitions of identifier" bl3257@id)) (void))) bl3264@t) (begin (if (bl2ea0@rib-cache bl3256@rib) (hashtable-update! (bl2ea0@rib-cache bl3256@rib) bl325e@sym (lambda (bl3268@e) (cons (cons bl325f@mark* bl3258@label) bl3268@e)) '()) (void)) (bl2e92@set-rib-sym*! bl3256@rib (cons bl325e@sym bl3262@sym*)) (bl2e96@set-rib-mark**! bl3256@rib (cons bl325f@mark* (bl2e94@rib-mark** bl3256@rib))) (bl2e9a@set-rib-label*! bl3256@rib (cons bl3258@label (bl2e98@rib-label* bl3256@rib)))))))))))) (set! bl4b8e@bl2ea8@extend-rib! bl2ea8@extend-rib!) (set! bl2eaa@extend-rib/nc! (lambda (bl3274@rib bl3275@id bl3276@label) (let ((bl327a@sym (bl2ef4@id->sym bl3275@id)) (bl327b@mark* (bl2ec4@stx-mark* bl3275@id))) (let ((bl327e@sym* (bl2e90@rib-sym* bl3274@rib))) (begin (if (bl2ea0@rib-cache bl3274@rib) (hashtable-update! (bl2ea0@rib-cache bl3274@rib) bl327a@sym (lambda (bl3280@e) (cons (cons bl327b@mark* bl3276@label) bl3280@e)) '()) (void)) (bl2e92@set-rib-sym*! bl3274@rib (cons bl327a@sym bl327e@sym*)) (bl2e96@set-rib-mark**! bl3274@rib (cons bl327b@mark* (bl2e94@rib-mark** bl3274@rib))) (bl2e9a@set-rib-label*! bl3274@rib (cons bl3276@label (bl2e98@rib-label* bl3274@rib)))))))) (set! bl4b8f@bl2eaa@extend-rib/nc! bl2eaa@extend-rib/nc!) (set! bl2eac@make-rib-map (lambda (bl3282@sym*) (let ((bl3284@ht (make-eq-hashtable))) (let bl328a@f ((bl3286@i '0) (bl3287@sym* bl3282@sym*)) (if (null? bl3287@sym*) bl3284@ht (begin (hashtable-update! bl3284@ht (car bl3287@sym*) (lambda (bl328c@x) (cons bl3286@i bl328c@x)) '()) (bl328a@f (+ bl3286@i '1) (cdr bl3287@sym*)))))))) (set! bl4b90@bl2eac@make-rib-map bl2eac@make-rib-map) (set! bl2eae@seal-rib! (lambda (bl328e@rib) (let ((bl3290@sym* (bl2e90@rib-sym* bl328e@rib))) (if (not (null? bl3290@sym*)) (begin (bl2e92@set-rib-sym*! bl328e@rib (list->vector bl3290@sym*)) (bl2e96@set-rib-mark**! bl328e@rib (list->vector (bl2e94@rib-mark** bl328e@rib))) (bl2e9a@set-rib-label*! bl328e@rib (list->vector (bl2e98@rib-label* bl328e@rib))) (bl2e9e@set-rib-sealed/freq! bl328e@rib (bl2eac@make-rib-map bl3290@sym*))) (void))))) (set! bl4b91@bl2eae@seal-rib! bl2eae@seal-rib!) (set! bl2eb0@unseal-rib! (lambda (bl3292@rib) (if (bl2e9c@rib-sealed/freq bl3292@rib) (begin (bl2e9e@set-rib-sealed/freq! bl3292@rib '#f) (bl2e92@set-rib-sym*! bl3292@rib (vector->list (bl2e90@rib-sym* bl3292@rib))) (bl2e96@set-rib-mark**! bl3292@rib (vector->list (bl2e94@rib-mark** bl3292@rib))) (bl2e9a@set-rib-label*! bl3292@rib (vector->list (bl2e98@rib-label* bl3292@rib)))) (void)))) (set! bl4b92@bl2eb0@unseal-rib! bl2eb0@unseal-rib!) (set! bl2eb2@make-full-rib (lambda (bl3294@id* bl3295@label*) (let ((bl3298@r (make-simple-struct 'rib '6 (list (map bl2ef4@id->sym bl3294@id*) (map bl2ec4@stx-mark* bl3294@id*) bl3295@label* '#f '#f)))) (begin (bl2eae@seal-rib! bl3298@r) bl3298@r)))) (set! bl4b93@bl2eb2@make-full-rib bl2eb2@make-full-rib) (set! bl2eb4@rp (bl2a3f@bl291a@make-record-printer 'stx (lambda (bl329a@x bl329b@p bl329c@wr) (begin (display '"#<syntax " bl329b@p) (write (bl2f06@stx->datum bl329a@x) bl329b@p) (let ((bl32a0@expr (bl2ec0@stx-expr bl329a@x))) (if (bl2a36@bl2908@annotation? bl32a0@expr) (let ((bl32a2@src (bl2a37@bl290a@annotation-source bl32a0@expr))) (if (pair? bl32a2@src) (begin (display '" [" bl329b@p) (display (cdr bl32a2@src) bl329b@p) (display '" of " bl329b@p) (display (car bl32a2@src) bl329b@p) (display '"]" bl329b@p)) (void))) (void))) (display '">" bl329b@p))))) (set! bl4b94@bl2eb4@rp bl2eb4@rp) (set! bl2ebe@stx? (lambda (bl32a4@x) (and (simple-struct? bl32a4@x) (eq? (simple-struct-name bl32a4@x) 'stx)))) (set! bl4b95@bl2ebe@stx? bl2ebe@stx?) (set! bl2ec0@stx-expr (lambda (bl32a6@x) (simple-struct-ref bl32a6@x '0))) (set! bl4b96@bl2ec0@stx-expr bl2ec0@stx-expr) (set! bl2ec2@set-stx-expr! (lambda (bl32a8@x bl32a9@val) (simple-struct-set! bl32a8@x '0 bl32a9@val))) (set! bl4b97@bl2ec2@set-stx-expr! bl2ec2@set-stx-expr!) (set! bl2ec4@stx-mark* (lambda (bl32ac@x) (simple-struct-ref bl32ac@x '1))) (set! bl4b98@bl2ec4@stx-mark* bl2ec4@stx-mark*) (set! bl2ec6@set-stx-mark*! (lambda (bl32ae@x bl32af@val) (simple-struct-set! bl32ae@x '1 bl32af@val))) (set! bl4b99@bl2ec6@set-stx-mark*! bl2ec6@set-stx-mark*!) (set! bl2ec8@stx-subst* (lambda (bl32b2@x) (simple-struct-ref bl32b2@x '2))) (set! bl4b9a@bl2ec8@stx-subst* bl2ec8@stx-subst*) (set! bl2eca@set-stx-subst*! (lambda (bl32b4@x bl32b5@val) (simple-struct-set! bl32b4@x '2 bl32b5@val))) (set! bl4b9b@bl2eca@set-stx-subst*! bl2eca@set-stx-subst*!) (set! bl2ecc@stx-ae* (lambda (bl32b8@x) (simple-struct-ref bl32b8@x '3))) (set! bl4b9c@bl2ecc@stx-ae* bl2ecc@stx-ae*) (set! bl2ece@set-stx-ae*! (lambda (bl32ba@x bl32bb@val) (simple-struct-set! bl32ba@x '3 bl32bb@val))) (set! bl4b9d@bl2ece@set-stx-ae*! bl2ece@set-stx-ae*!) (set! bl2ed0@dummy '3) (set! bl4b9e@bl2ed0@dummy bl2ed0@dummy) (set! bl2ed2@datum->stx (lambda (bl32be@id bl32bf@datum) (make-simple-struct 'stx '5 (list bl32bf@datum (bl2ec4@stx-mark* bl32be@id) (bl2ec8@stx-subst* bl32be@id) (bl2ecc@stx-ae* bl32be@id))))) (set! bl4b9f@bl2ed2@datum->stx bl2ed2@datum->stx) (set! bl2ed4@gen-mark (lambda () (string '#\m))) (set! bl4ba0@bl2ed4@gen-mark bl2ed4@gen-mark) (set! bl2ed6@anti-mark '#f) (set! bl4ba1@bl2ed6@anti-mark bl2ed6@anti-mark) (set! bl2ed8@anti-mark? not) (set! bl4ba2@bl2ed8@anti-mark? bl2ed8@anti-mark?) (set! bl2eda@mkstx (lambda (bl32c2@e bl32c3@m* bl32c4@s* bl32c5@ae*) (if (and (bl2ebe@stx? bl32c2@e) (not (bl2e78@top-marked? bl32c3@m*))) (call-with-values (lambda () (join-wraps bl32c3@m* bl32c4@s* bl32c5@ae* bl32c2@e)) (lambda (bl32d0@bl32cb bl32d1@bl32cd bl32d2@bl32cf) (let ((bl32d6@ae* bl32d2@bl32cf) (bl32d7@s* bl32d1@bl32cd) (bl32d8@m* bl32d0@bl32cb)) (make-simple-struct 'stx '5 (list (bl2ec0@stx-expr bl32c2@e) bl32d8@m* bl32d7@s* bl32d6@ae*))))) (make-simple-struct 'stx '5 (list bl32c2@e bl32c3@m* bl32c4@s* bl32c5@ae*))))) (set! bl4ba3@bl2eda@mkstx bl2eda@mkstx) (set! bl2edc@add-subst (lambda (bl32dc@subst bl32dd@e) (bl2eda@mkstx bl32dd@e '() (list bl32dc@subst) '()))) (set! bl4ba4@bl2edc@add-subst bl2edc@add-subst) (set! bl2ede@add-mark (lambda (bl32e0@mark bl32e1@subst bl32e2@expr bl32e3@ae) (letrec* ((bl32e9@merge-ae* (lambda (bl3310@ls1 bl3311@ls2) (if (and (pair? bl3310@ls1) (pair? bl3311@ls2) (not (car bl3311@ls2))) (bl32eb@cancel bl3310@ls1 bl3311@ls2) (append bl3310@ls1 bl3311@ls2)))) (bl32eb@cancel (lambda (bl3306@ls1 bl3307@ls2) (let bl330e@f ((bl330a@x (car bl3306@ls1)) (bl330b@ls1 (cdr bl3306@ls1))) (if (null? bl330b@ls1) (cdr bl3307@ls2) (cons bl330a@x (bl330e@f (car bl330b@ls1) (cdr bl330b@ls1))))))) (bl32ed@f (lambda (bl32ee@e bl32ef@m bl32f0@s1* bl32f1@ae*) (if (pair? bl32ee@e) (let ((bl32f6@a (bl32ed@f (car bl32ee@e) bl32ef@m bl32f0@s1* bl32f1@ae*)) (bl32f7@d (bl32ed@f (cdr bl32ee@e) bl32ef@m bl32f0@s1* bl32f1@ae*))) (if (eq? bl32f6@a bl32f7@d) bl32ee@e (cons bl32f6@a bl32f7@d))) (if (vector? bl32ee@e) (let ((bl32fa@ls1 (vector->list bl32ee@e))) (let ((bl32fc@ls2 (map (lambda (bl32fe@x) (bl32ed@f bl32fe@x bl32ef@m bl32f0@s1* bl32f1@ae*)) bl32fa@ls1))) (if (for-all eq? bl32fa@ls1 bl32fc@ls2) bl32ee@e (list->vector bl32fc@ls2)))) (if (bl2ebe@stx? bl32ee@e) (let ((bl3300@m* (bl2ec4@stx-mark* bl32ee@e)) (bl3301@s2* (bl2ec8@stx-subst* bl32ee@e))) (if (null? bl3300@m*) (bl32ed@f (bl2ec0@stx-expr bl32ee@e) bl32ef@m (append bl32f0@s1* bl3301@s2*) (bl32e9@merge-ae* bl32f1@ae* (bl2ecc@stx-ae* bl32ee@e))) (if (eq? (car bl3300@m*) bl2ed6@anti-mark) (make-simple-struct 'stx '5 (list (bl2ec0@stx-expr bl32ee@e) (cdr bl3300@m*) (cdr (append bl32f0@s1* bl3301@s2*)) (bl32e9@merge-ae* bl32f1@ae* (bl2ecc@stx-ae* bl32ee@e)))) (make-simple-struct 'stx '5 (list (bl2ec0@stx-expr bl32ee@e) (cons bl32ef@m bl3300@m*) (let ((bl3304@s* (cons 'shift (append bl32f0@s1* bl3301@s2*)))) (if bl32e1@subst (cons bl32e1@subst bl3304@s*) bl3304@s*)) (bl32e9@merge-ae* bl32f1@ae* (bl2ecc@stx-ae* bl32ee@e))))))) (if (symbol? bl32ee@e) (bl31d9@syntax-violation '#f '"raw symbol encountered in output of macro" bl32e2@expr bl32ee@e) (make-simple-struct 'stx '5 (list bl32ee@e (list bl32ef@m) bl32f0@s1* bl32f1@ae*))))))))) (bl2eda@mkstx (bl32ed@f bl32e2@expr bl32e0@mark '() '()) '() '() (list bl32e3@ae))))) (set! bl4ba5@bl2ede@add-mark bl2ede@add-mark) (set! bl2ee0@syntax-kind? (lambda (bl3314@x bl3315@p?) (if (bl2ebe@stx? bl3314@x) (bl2ee0@syntax-kind? (bl2ec0@stx-expr bl3314@x) bl3315@p?) (if (bl2a36@bl2908@annotation? bl3314@x) (bl2ee0@syntax-kind? (bl2a38@bl290c@annotation-expression bl3314@x) bl3315@p?) (bl3315@p? bl3314@x))))) (set! bl4ba6@bl2ee0@syntax-kind? bl2ee0@syntax-kind?) (set! bl2ee2@syntax-vector->list (lambda (bl3318@x) (if (bl2ebe@stx? bl3318@x) (let ((bl331a@ls (bl2ee2@syntax-vector->list (bl2ec0@stx-expr bl3318@x))) (bl331b@m* (bl2ec4@stx-mark* bl3318@x)) (bl331c@s* (bl2ec8@stx-subst* bl3318@x)) (bl331d@ae* (bl2ecc@stx-ae* bl3318@x))) (map (lambda (bl3322@x) (bl2eda@mkstx bl3322@x bl331b@m* bl331c@s* bl331d@ae*)) bl331a@ls)) (if (bl2a36@bl2908@annotation? bl3318@x) (bl2ee2@syntax-vector->list (bl2a38@bl290c@annotation-expression bl3318@x)) (if (vector? bl3318@x) (vector->list bl3318@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" bl3318@x)))))) (set! bl4ba7@bl2ee2@syntax-vector->list bl2ee2@syntax-vector->list) (set! bl2ee4@syntax-pair? (lambda (bl3324@x) (bl2ee0@syntax-kind? bl3324@x pair?))) (set! bl4ba8@bl2ee4@syntax-pair? bl2ee4@syntax-pair?) (set! bl2ee6@syntax-vector? (lambda (bl3326@x) (bl2ee0@syntax-kind? bl3326@x vector?))) (set! bl4ba9@bl2ee6@syntax-vector? bl2ee6@syntax-vector?) (set! bl2ee8@syntax-null? (lambda (bl3328@x) (bl2ee0@syntax-kind? bl3328@x null?))) (set! bl4baa@bl2ee8@syntax-null? bl2ee8@syntax-null?) (set! bl2eea@syntax-list? (lambda (bl332a@x) (or (bl2ee8@syntax-null? bl332a@x) (and (bl2ee4@syntax-pair? bl332a@x) (bl2eea@syntax-list? (bl2eee@syntax-cdr bl332a@x)))))) (set! bl4bab@bl2eea@syntax-list? bl2eea@syntax-list?) (set! bl2eec@syntax-car (lambda (bl332c@x) (if (bl2ebe@stx? bl332c@x) (bl2eda@mkstx (bl2eec@syntax-car (bl2ec0@stx-expr bl332c@x)) (bl2ec4@stx-mark* bl332c@x) (bl2ec8@stx-subst* bl332c@x) (bl2ecc@stx-ae* bl332c@x)) (if (bl2a36@bl2908@annotation? bl332c@x) (bl2eec@syntax-car (bl2a38@bl290c@annotation-expression bl332c@x)) (if (pair? bl332c@x) (car bl332c@x) (assertion-violation 'syntax-car '"BUG: not a pair" bl332c@x)))))) (set! bl4bac@bl2eec@syntax-car bl2eec@syntax-car) (set! bl2eee@syntax-cdr (lambda (bl332e@x) (if (bl2ebe@stx? bl332e@x) (bl2eda@mkstx (bl2eee@syntax-cdr (bl2ec0@stx-expr bl332e@x)) (bl2ec4@stx-mark* bl332e@x) (bl2ec8@stx-subst* bl332e@x) (bl2ecc@stx-ae* bl332e@x)) (if (bl2a36@bl2908@annotation? bl332e@x) (bl2eee@syntax-cdr (bl2a38@bl290c@annotation-expression bl332e@x)) (if (pair? bl332e@x) (cdr bl332e@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" bl332e@x)))))) (set! bl4bad@bl2eee@syntax-cdr bl2eee@syntax-cdr) (set! bl2ef0@syntax->list (lambda (bl3330@x) (if (bl2ee4@syntax-pair? bl3330@x) (cons (bl2eec@syntax-car bl3330@x) (bl2ef0@syntax->list (bl2eee@syntax-cdr bl3330@x))) (if (bl2ee8@syntax-null? bl3330@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" bl3330@x))))) (set! bl4bae@bl2ef0@syntax->list bl2ef0@syntax->list) (set! bl2ef2@id? (lambda (bl3332@x) (and (bl2ebe@stx? bl3332@x) (symbol? (bl2ec0@stx-expr bl3332@x))))) (set! bl4baf@bl2ef2@id? bl2ef2@id?) (set! bl2ef4@id->sym (lambda (bl3334@x) (bl2ec0@stx-expr bl3334@x))) (set! bl4bb0@bl2ef4@id->sym bl2ef4@id->sym) (set! bl2ef6@bound-id=? (lambda (bl3336@x bl3337@y) (and (eq? (bl2ef4@id->sym bl3336@x) (bl2ef4@id->sym bl3337@y)) (same-marks? (bl2ec4@stx-mark* bl3336@x) (bl2ec4@stx-mark* bl3337@y))))) (set! bl4bb1@bl2ef6@bound-id=? bl2ef6@bound-id=?) (set! bl2ef8@free-id=? (lambda (bl333a@i bl333b@j) (let ((bl333e@t0 (id->real-label bl333a@i)) (bl333f@t1 (id->real-label bl333b@j))) (if (or bl333e@t0 bl333f@t1) (eq? bl333e@t0 bl333f@t1) (eq? (bl2ef4@id->sym bl333a@i) (bl2ef4@id->sym bl333b@j)))))) (set! bl4bb2@bl2ef8@free-id=? bl2ef8@free-id=?) (set! bl2efa@valid-bound-ids? (lambda (bl3342@id*) (and (for-all bl2ef2@id? bl3342@id*) (bl2efc@distinct-bound-ids? bl3342@id*)))) (set! bl4bb3@bl2efa@valid-bound-ids? bl2efa@valid-bound-ids?) (set! bl2efc@distinct-bound-ids? (lambda (bl3344@id*) (or (null? bl3344@id*) (and (not (bl2efe@bound-id-member? (car bl3344@id*) (cdr bl3344@id*))) (bl2efc@distinct-bound-ids? (cdr bl3344@id*)))))) (set! bl4bb4@bl2efc@distinct-bound-ids? bl2efc@distinct-bound-ids?) (set! bl2efe@bound-id-member? (lambda (bl3346@id bl3347@id*) (and (pair? bl3347@id*) (or (bl2ef6@bound-id=? bl3346@id (car bl3347@id*)) (bl2efe@bound-id-member? bl3346@id (cdr bl3347@id*)))))) (set! bl4bb5@bl2efe@bound-id-member? bl2efe@bound-id-member?) (set! bl2f00@self-evaluating? (lambda (bl334a@x) (or (number? bl334a@x) (string? bl334a@x) (char? bl334a@x) (boolean? bl334a@x) (regexp? bl334a@x) (bytevector? bl334a@x)))) (set! bl4bb6@bl2f00@self-evaluating? bl2f00@self-evaluating?) (set! bl2f02@strip-annotations (lambda (bl334c@x) (if (pair? bl334c@x) (cons (bl2f02@strip-annotations (car bl334c@x)) (bl2f02@strip-annotations (cdr bl334c@x))) (if (vector? bl334c@x) (vector-map bl2f02@strip-annotations bl334c@x) (if (bl2a36@bl2908@annotation? bl334c@x) (bl2a35@bl2906@annotation-stripped bl334c@x) bl334c@x))))) (set! bl4bb7@bl2f02@strip-annotations bl2f02@strip-annotations) (set! bl2f04@strip (lambda (bl334e@x bl334f@m*) (if (bl2e78@top-marked? bl334f@m*) (if (or (bl2a36@bl2908@annotation? bl334e@x) (and (pair? bl334e@x) (bl2a36@bl2908@annotation? (car bl334e@x))) (and (vector? bl334e@x) (> (vector-length bl334e@x) '0) (bl2a36@bl2908@annotation? (vector-ref bl334e@x '0)))) (bl2f02@strip-annotations bl334e@x) bl334e@x) (let bl3354@f ((bl3352@x bl334e@x)) (if (bl2ebe@stx? bl3352@x) (begin (if (pair? (bl2ec0@stx-expr bl3352@x)) (begin (set-source-info! (bl2ec0@stx-expr bl3352@x) '#f) (set-source-info! (cdr (bl2ec0@stx-expr bl3352@x)) '#f) (set-source-info! (car (bl2ec0@stx-expr bl3352@x)) '#f)) (void)) (bl2f04@strip (bl2ec0@stx-expr bl3352@x) (bl2ec4@stx-mark* bl3352@x))) (if (bl2a36@bl2908@annotation? bl3352@x) (bl2a35@bl2906@annotation-stripped bl3352@x) (if (pair? bl3352@x) (let ((bl3356@a (bl3354@f (car bl3352@x))) (bl3357@d (bl3354@f (cdr bl3352@x)))) (if (and (eq? bl3356@a (car bl3352@x)) (eq? bl3357@d (cdr bl3352@x))) bl3352@x (cons bl3356@a bl3357@d))) (if (vector? bl3352@x) (let ((bl335a@old (vector->list bl3352@x))) (let ((bl335c@new (map bl3354@f bl335a@old))) (if (for-all eq? bl335a@old bl335c@new) bl3352@x (list->vector bl335c@new)))) bl3352@x)))))))) (set! bl4bb8@bl2f04@strip bl2f04@strip) (set! bl2f06@stx->datum (lambda (bl335e@x) (bl2f04@strip bl335e@x '()))) (set! bl4bb9@bl2f06@stx->datum bl2f06@stx->datum) (set! bl2f08@id->label (lambda (bl3360@id) (or (id->real-label bl3360@id) (let ((bl3362@t (bl31e9@top-level-context))) (if bl3362@t ((lambda (bl3364@env) (let ((bl3366@rib (bl3199@interaction-env-rib bl3364@env))) (call-with-values (lambda () (bl2e82@gen-define-label+loc bl3360@id bl3366@rib)) (lambda (bl336c@bl3369 bl336d@bl336b) (let ((bl3370@loc_ bl336d@bl336b) (bl3371@lab bl336c@bl3369)) (begin (bl2ea8@extend-rib! bl3366@rib bl3360@id bl3371@lab) bl3371@lab)))))) bl3362@t) '#f))))) (set! bl4bba@bl2f08@id->label bl2f08@id->label) (set! bl2f0a@label->binding (lambda (bl3374@x bl3375@r) (let ((bl3378@t (bl2d0d@bl2b5a@imported-label->binding bl3374@x))) (if bl3378@t ((lambda (bl337a@b) (if (and (pair? bl337a@b) (eq? (car bl337a@b) '$core-rtd)) (cons '$rtd (map bl30af@bless (cdr bl337a@b))) (if (and (pair? bl337a@b) (eq? (car bl337a@b) 'global-rtd)) (let ((bl337c@lib (cadr bl337a@b)) (bl337d@loc (cddr bl337a@b))) (cons '$rtd (symbol-value bl337d@loc))) bl337a@b))) bl3378@t) (let ((bl3380@t (assq bl3374@x bl3375@r))) (if bl3380@t (cdr bl3380@t) (let ((bl3382@t (bl31e9@top-level-context))) (if bl3382@t ((lambda (bl3384@env) (let ((bl3386@t (assq bl3374@x (bl31a1@interaction-env-locs bl3384@env)))) (if bl3386@t ((lambda (bl3388@p) (cons* 'lexical (cdr bl3388@p) '#f)) bl3386@t) '(displaced-lexical . #f)))) bl3382@t) '(displaced-lexical . #f))))))))) (set! bl4bbb@bl2f0a@label->binding bl2f0a@label->binding) (set! bl2f0c@make-binding cons) (set! bl4bbc@bl2f0c@make-binding bl2f0c@make-binding) (set! bl2f0e@binding-type car) (set! bl4bbd@bl2f0e@binding-type bl2f0e@binding-type) (set! bl2f10@binding-value cdr) (set! bl4bbe@bl2f10@binding-value bl2f10@binding-value) (set! bl2f12@raise-unbound-error (lambda (bl338a@id) (bl31d7@syntax-violation* '#f '"unbound identifier" bl338a@id (make-undefined-violation)))) (set! bl4bbf@bl2f12@raise-unbound-error bl2f12@raise-unbound-error) (set! bl2f14@syntax-type (lambda (bl338c@e bl338d@r) (if (bl2ef2@id? bl338c@e) (let ((bl3390@id bl338c@e)) (let ((bl3392@label (bl2f08@id->label bl3390@id))) (let ((bl3394@b (bl2f0a@label->binding bl3392@label bl338d@r))) (let ((bl3396@type (bl2f0e@binding-type bl3394@b))) (begin (if (not bl3392@label) (bl2f12@raise-unbound-error bl3390@id) (void)) (let ((bl3398@t bl3396@type)) (if (memv bl3398@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values bl3396@type (bl2f10@binding-value bl3394@b) bl3390@id) (values 'other '#f '#f)))))))) (if (bl2ee4@syntax-pair? bl338c@e) (let ((bl339a@id (bl2eec@syntax-car bl338c@e))) (if (bl2ef2@id? bl339a@id) (let ((bl339c@label (bl2f08@id->label bl339a@id))) (let ((bl339e@b (bl2f0a@label->binding bl339c@label bl338d@r))) (let ((bl33a0@type (bl2f0e@binding-type bl339e@b))) (begin (if (not bl339c@label) (bl2f12@raise-unbound-error bl339a@id) (void)) (let ((bl33a2@t bl33a0@type)) (if (memv bl33a2@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values bl33a0@type (bl2f10@binding-value bl339e@b) bl339a@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((bl33a4@d (bl2f06@stx->datum bl338c@e))) (if (bl2f00@self-evaluating? bl33a4@d) (values 'constant bl33a4@d '#f) (values 'other '#f '#f))))))) (set! bl4bc0@bl2f14@syntax-type bl2f14@syntax-type) (set! bl2f22@sanitize-binding (lambda (bl33a6@x bl33a7@src) (if (procedure? bl33a6@x) (cons* 'local-macro bl33a6@x bl33a7@src) (if (and (pair? bl33a6@x) (eq? (car bl33a6@x) 'macro!) (procedure? (cdr bl33a6@x))) (cons* 'local-macro! (cdr bl33a6@x) bl33a7@src) (if (and (pair? bl33a6@x) (eq? (car bl33a6@x) '$rtd)) bl33a6@x (assertion-violation 'expand '"invalid transformer" bl33a6@x)))))) (set! bl4bc1@bl2f22@sanitize-binding bl2f22@sanitize-binding) (set! bl2f24@make-variable-transformer (lambda (bl33aa@x) (if (procedure? bl33aa@x) (cons 'macro! bl33aa@x) (assertion-violation 'make-variable-transformer '"not a procedure" bl33aa@x)))) (set! bl4bc2@bl2f24@make-variable-transformer bl2f24@make-variable-transformer) (set! bl2f26@variable-transformer? (lambda (bl33ac@x) (and (pair? bl33ac@x) (eq? (car bl33ac@x) 'macro!) (procedure? (cdr bl33ac@x))))) (set! bl4bc3@bl2f26@variable-transformer? bl2f26@variable-transformer?) (set! bl2f28@variable-transformer-procedure (lambda (bl33ae@x) (if (bl2f26@variable-transformer? bl33ae@x) (cdr bl33ae@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" bl33ae@x)))) (set! bl4bc4@bl2f28@variable-transformer-procedure bl2f28@variable-transformer-procedure) (set! bl2f2a@make-eval-transformer (lambda (bl33b0@x) (bl2f22@sanitize-binding (eval-core (bl2a98@bl2a50@expanded->core bl33b0@x)) bl33b0@x))) (set! bl4bc5@bl2f2a@make-eval-transformer bl2f2a@make-eval-transformer) (set! bl307b@parse-define (lambda (bl33b2@x) (let ((bl33b4@t bl33b2@x)) (let ((bl33b6@ls/false (bl30f9@syntax-dispatch bl33b4@t '(_ (any . any) any . each-any)))) (if (and bl33b6@ls/false (apply (lambda (bl33b8@id bl33b9@fmls bl33ba@b bl33bb@b*) (bl2ef2@id? bl33b8@id)) bl33b6@ls/false)) (apply (lambda (bl33c0@id bl33c1@fmls bl33c2@b bl33c3@b*) (begin (bl311f@verify-formals bl33c1@fmls bl33b2@x) (values bl33c0@id (cons 'defun (cons bl33c1@fmls (cons bl33c2@b bl33c3@b*)))))) bl33b6@ls/false) (let ((bl33c8@t bl33b4@t)) (let ((bl33ca@ls/false (bl30f9@syntax-dispatch bl33c8@t '(_ any any)))) (if (and bl33ca@ls/false (apply (lambda (bl33cc@id bl33cd@val) (bl2ef2@id? bl33cc@id)) bl33ca@ls/false)) (apply (lambda (bl33d0@id bl33d1@val) (values bl33d0@id (cons 'expr bl33d1@val))) bl33ca@ls/false) (let ((bl33d4@t bl33c8@t)) (let ((bl33d6@ls/false (bl30f9@syntax-dispatch bl33d4@t '(_ any)))) (if (and bl33d6@ls/false (apply (lambda (bl33d8@id) (bl2ef2@id? bl33d8@id)) bl33d6@ls/false)) (apply (lambda (bl33da@id) (values bl33da@id (cons 'expr (bl30af@bless '(void))))) bl33d6@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl33d4@t)))))))))))) (set! bl4bc6@bl307b@parse-define bl307b@parse-define) (set! bl307d@parse-define-syntax (lambda (bl33dc@x) (let ((bl33de@t bl33dc@x)) (let ((bl33e0@ls/false (bl30f9@syntax-dispatch bl33de@t '(_ any any)))) (if (and bl33e0@ls/false (apply (lambda (bl33e2@id bl33e3@val) (bl2ef2@id? bl33e2@id)) bl33e0@ls/false)) (apply (lambda (bl33e6@id bl33e7@val) (values bl33e6@id bl33e7@val)) bl33e0@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl33de@t)))))) (set! bl4bc7@bl307d@parse-define-syntax bl307d@parse-define-syntax) (set! bl307f@scheme-stx-hashtable (make-eq-hashtable)) (set! bl4bc8@bl307f@scheme-stx-hashtable bl307f@scheme-stx-hashtable) (set! bl3081@scheme-stx (lambda (bl33ea@sym) (or (hashtable-ref bl307f@scheme-stx-hashtable bl33ea@sym '#f) (let ((bl33ec@subst (bl2ce9@bl2b12@library-subst (bl2d07@bl2b4e@find-library-by-name '(psyntax system $all))))) (let ((bl33ee@stx (make-simple-struct 'stx '5 (list bl33ea@sym bl2e76@top-mark* '() '())))) (let ((bl33f0@stx (let ((bl33f2@t (assq bl33ea@sym bl33ec@subst))) (if bl33f2@t ((lambda (bl33f4@x) (let ((bl33f6@name (car bl33f4@x)) (bl33f7@label (cdr bl33f4@x))) (bl2edc@add-subst (make-simple-struct 'rib '6 (list (list bl33f6@name) (list bl2e76@top-mark*) (list bl33f7@label) '#f '#f)) bl33ee@stx))) bl33f2@t) bl33ee@stx)))) (begin (hashtable-set! bl307f@scheme-stx-hashtable bl33ea@sym bl33f0@stx) bl33f0@stx))))))) (set! bl4bc9@bl3081@scheme-stx bl3081@scheme-stx) (set! bl3083@lexical-var car) (set! bl4bca@bl3083@lexical-var bl3083@lexical-var) (set! bl3085@lexical-mutable? cdr) (set! bl4bcb@bl3085@lexical-mutable? bl3085@lexical-mutable?) (set! bl3087@set-lexical-mutable! set-cdr!) (set! bl4bcc@bl3087@set-lexical-mutable! bl3087@set-lexical-mutable!) (set! bl3089@add-lexical (lambda (bl33fa@lab bl33fb@lex bl33fc@r) (cons (cons* bl33fa@lab 'lexical bl33fb@lex '#f) bl33fc@r))) (set! bl4bcd@bl3089@add-lexical bl3089@add-lexical) (set! bl308b@add-lexicals (lambda (bl3400@lab* bl3401@lex* bl3402@r) (if (null? bl3400@lab*) bl3402@r (bl308b@add-lexicals (cdr bl3400@lab*) (cdr bl3401@lex*) (bl3089@add-lexical (car bl3400@lab*) (car bl3401@lex*) bl3402@r))))) (set! bl4bce@bl308b@add-lexicals bl308b@add-lexicals) (set! bl308d@letrec-helper (lambda (bl3406@e bl3407@r bl3408@mr bl3409@build) (let ((bl340e@t bl3406@e)) (let ((bl3410@ls/false (bl30f9@syntax-dispatch bl340e@t '(_ #(each (any any)) any . each-any)))) (if bl3410@ls/false (apply (lambda (bl3412@lhs* bl3413@rhs* bl3414@b bl3415@b*) (if (not (bl2efa@valid-bound-ids? bl3412@lhs*)) (bl30b3@invalid-fmls-error bl3406@e bl3412@lhs*) (let ((bl341a@lex* (map bl2e7a@gen-lexical bl3412@lhs*)) (bl341b@lab* (map bl2e7e@gen-label bl3412@lhs*))) (let ((bl341e@rib (bl2eb2@make-full-rib bl3412@lhs* bl341b@lab*)) (bl341f@r (bl308b@add-lexicals bl341b@lab* bl341a@lex* bl3407@r))) (let ((bl3422@body (bl3131@chi-internal (bl2edc@add-subst bl341e@rib (cons bl3414@b bl3415@b*)) bl341f@r bl3408@mr)) (bl3423@rhs* (bl3117@chi-expr* (map (lambda (bl3426@x) (bl2edc@add-subst bl341e@rib bl3426@x)) bl3413@rhs*) bl341f@r bl3408@mr))) (bl3409@build '#f bl341a@lex* bl3423@rhs* bl3422@body)))))) bl3410@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl340e@t)))))) (set! bl4bcf@bl308d@letrec-helper bl308d@letrec-helper) (set! bl308f@let-transformer (lambda (bl3428@e bl3429@r bl342a@mr) (let ((bl342e@t bl3428@e)) (let ((bl3430@ls/false (bl30f9@syntax-dispatch bl342e@t '(_ #(each (any any)) any . each-any)))) (if bl3430@ls/false (apply (lambda (bl3432@lhs* bl3433@rhs* bl3434@b bl3435@b*) (if (not (bl2efa@valid-bound-ids? bl3432@lhs*)) (bl30b3@invalid-fmls-error bl3428@e bl3432@lhs*) (let ((bl343a@lex* (map bl2e7a@gen-lexical bl3432@lhs*)) (bl343b@lab* (map bl2e7e@gen-label bl3432@lhs*)) (bl343c@rhs* (bl3117@chi-expr* bl3433@rhs* bl3429@r bl342a@mr))) (let ((bl3440@rib (bl2eb2@make-full-rib bl3432@lhs* bl343b@lab*)) (bl3441@r (bl308b@add-lexicals bl343b@lab* bl343a@lex* bl3429@r))) (let ((bl3444@body (bl3131@chi-internal (bl2edc@add-subst bl3440@rib (cons bl3434@b bl3435@b*)) bl3441@r bl342a@mr))) (bl2e5a@bl2dbd@build-let '#f bl343a@lex* bl343c@rhs* bl3444@body)))))) bl3430@ls/false) (let ((bl3446@t bl342e@t)) (let ((bl3448@ls/false (bl30f9@syntax-dispatch bl3446@t '(_ any #(each (any any)) any . each-any)))) (if bl3448@ls/false (apply (lambda (bl344a@loop bl344b@lhs* bl344c@rhs* bl344d@b bl344e@b*) (if (not (bl2efa@valid-bound-ids? bl344b@lhs*)) (bl30b3@invalid-fmls-error bl3428@e bl344b@lhs*) (let ((bl3454@lex* (map bl2e7a@gen-lexical bl344b@lhs*)) (bl3455@lab* (map bl2e7e@gen-label bl344b@lhs*)) (bl3456@rhs* (bl3117@chi-expr* bl344c@rhs* bl3429@r bl342a@mr)) (bl3457@loop-lex (bl2e7a@gen-lexical bl344a@loop)) (bl3458@loop-lab (bl2e7e@gen-label bl344a@loop))) (let ((bl345e@loop-rib (bl2eb2@make-full-rib (list bl344a@loop) (list bl3458@loop-lab))) (bl345f@rib (bl2eb2@make-full-rib bl344b@lhs* bl3455@lab*)) (bl3460@r (bl308b@add-lexicals (cons bl3458@loop-lab bl3455@lab*) (cons bl3457@loop-lex bl3454@lex*) bl3429@r))) (let ((bl3464@body (bl3131@chi-internal (bl2edc@add-subst bl345e@loop-rib (bl2edc@add-subst bl345f@rib (cons bl344d@b bl344e@b*))) bl3460@r bl342a@mr))) (bl2e5b@bl2dbf@build-named-let '#f bl3457@loop-lex bl3454@lex* bl3456@rhs* bl3464@body)))))) bl3448@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3446@t))))))))) (set! bl4bd0@bl308f@let-transformer bl308f@let-transformer) (set! bl3091@letrec-transformer (lambda (bl3466@e bl3467@r bl3468@mr) (bl308d@letrec-helper bl3466@e bl3467@r bl3468@mr bl2e59@bl2dbb@build-letrec))) (set! bl4bd1@bl3091@letrec-transformer bl3091@letrec-transformer) (set! bl3093@letrec*-transformer (lambda (bl346c@e bl346d@r bl346e@mr) (bl308d@letrec-helper bl346c@e bl346d@r bl346e@mr bl2e5c@bl2dc1@build-letrec*))) (set! bl4bd2@bl3093@letrec*-transformer bl3093@letrec*-transformer) (set! bl3095@fluid-let-syntax-transformer (lambda (bl3472@e bl3473@r bl3474@mr) (letrec* ((bl3479@lookup (lambda (bl348c@x) (or (bl2f08@id->label bl348c@x) (bl31d9@syntax-violation '#f '"unbound identifier" bl3472@e bl348c@x))))) (let ((bl347a@t bl3472@e)) (let ((bl347c@ls/false (bl30f9@syntax-dispatch bl347a@t '(_ #(each (any any)) any . each-any)))) (if bl347c@ls/false (apply (lambda (bl347e@lhs* bl347f@rhs* bl3480@b bl3481@b*) (if (not (bl2efa@valid-bound-ids? bl347e@lhs*)) (bl30b3@invalid-fmls-error bl3472@e bl347e@lhs*) (let ((bl3486@lab* (map bl3479@lookup bl347e@lhs*)) (bl3487@rhs* (map (lambda (bl348a@x) (bl2f2a@make-eval-transformer (bl3153@expand-transformer bl348a@x bl3474@mr))) bl347f@rhs*))) (bl3131@chi-internal (cons bl3480@b bl3481@b*) (append (map cons bl3486@lab* bl3487@rhs*) bl3473@r) (append (map cons bl3486@lab* bl3487@rhs*) bl3474@mr))))) bl347c@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl347a@t))))))) (set! bl4bd3@bl3095@fluid-let-syntax-transformer bl3095@fluid-let-syntax-transformer) (set! bl3097@type-descriptor-transformer (lambda (bl348e@e bl348f@r bl3490@mr) (let ((bl3494@t bl348e@e)) (let ((bl3496@ls/false (bl30f9@syntax-dispatch bl3494@t '(_ any)))) (if (and bl3496@ls/false (apply (lambda (bl3498@id) (bl2ef2@id? bl3498@id)) bl3496@ls/false)) (apply (lambda (bl349a@id) (let ((bl349c@lab (bl2f08@id->label bl349a@id))) (let ((bl349e@b (bl2f0a@label->binding bl349c@lab bl348f@r))) (let ((bl34a0@type (bl2f0e@binding-type bl349e@b))) (begin (if (not bl349c@lab) (bl2f12@raise-unbound-error bl349a@id) (void)) (if (not (and (eq? bl34a0@type '$rtd) (not (list? (bl2f10@binding-value bl349e@b))))) (bl31d9@syntax-violation '#f '"not a record type" bl348e@e) (void)) (list 'quote (bl2f10@binding-value bl349e@b))))))) bl3496@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3494@t)))))) (set! bl4bd4@bl3097@type-descriptor-transformer bl3097@type-descriptor-transformer) (set! bl3099@record-type-descriptor-transformer (lambda (bl34a2@e bl34a3@r bl34a4@mr) (let ((bl34a8@t bl34a2@e)) (let ((bl34aa@ls/false (bl30f9@syntax-dispatch bl34a8@t '(_ any)))) (if (and bl34aa@ls/false (apply (lambda (bl34ac@id) (bl2ef2@id? bl34ac@id)) bl34aa@ls/false)) (apply (lambda (bl34ae@id) (let ((bl34b0@lab (bl2f08@id->label bl34ae@id))) (let ((bl34b2@b (bl2f0a@label->binding bl34b0@lab bl34a3@r))) (let ((bl34b4@type (bl2f0e@binding-type bl34b2@b))) (begin (if (not bl34b0@lab) (bl2f12@raise-unbound-error bl34ae@id) (void)) (if (not (and (eq? bl34b4@type '$rtd) (list? (bl2f10@binding-value bl34b2@b)))) (bl31d9@syntax-violation '#f '"not a record type" bl34a2@e) (void)) (bl311b@chi-expr (car (bl2f10@binding-value bl34b2@b)) bl34a3@r bl34a4@mr)))))) bl34aa@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl34a8@t)))))) (set! bl4bd5@bl3099@record-type-descriptor-transformer bl3099@record-type-descriptor-transformer) (set! bl309b@record-constructor-descriptor-transformer (lambda (bl34b6@e bl34b7@r bl34b8@mr) (let ((bl34bc@t bl34b6@e)) (let ((bl34be@ls/false (bl30f9@syntax-dispatch bl34bc@t '(_ any)))) (if (and bl34be@ls/false (apply (lambda (bl34c0@id) (bl2ef2@id? bl34c0@id)) bl34be@ls/false)) (apply (lambda (bl34c2@id) (let ((bl34c4@lab (bl2f08@id->label bl34c2@id))) (let ((bl34c6@b (bl2f0a@label->binding bl34c4@lab bl34b7@r))) (let ((bl34c8@type (bl2f0e@binding-type bl34c6@b))) (begin (if (not bl34c4@lab) (bl2f12@raise-unbound-error bl34c2@id) (void)) (if (not (and (eq? bl34c8@type '$rtd) (list? (bl2f10@binding-value bl34c6@b)))) (bl31d9@syntax-violation '#f '"invalid type" bl34b6@e) (void)) (bl311b@chi-expr (cadr (bl2f10@binding-value bl34c6@b)) bl34b7@r bl34b8@mr)))))) bl34be@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl34bc@t)))))) (set! bl4bd6@bl309b@record-constructor-descriptor-transformer bl309b@record-constructor-descriptor-transformer) (set! bl309d@when-macro (lambda (bl34ca@e) (let ((bl34cc@t bl34ca@e)) (let ((bl34ce@ls/false (bl30f9@syntax-dispatch bl34cc@t '(_ any any . each-any)))) (if bl34ce@ls/false (apply (lambda (bl34d0@test bl34d1@e bl34d2@e*) (bl30af@bless (list 'if bl34d0@test (cons 'begin (cons bl34d1@e bl34d2@e*))))) bl34ce@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl34cc@t)))))) (set! bl4bd7@bl309d@when-macro bl309d@when-macro) (set! bl309f@unless-macro (lambda (bl34d6@e) (let ((bl34d8@t bl34d6@e)) (let ((bl34da@ls/false (bl30f9@syntax-dispatch bl34d8@t '(_ any any . each-any)))) (if bl34da@ls/false (apply (lambda (bl34dc@test bl34dd@e bl34de@e*) (bl30af@bless (list 'if (list 'not bl34dc@test) (cons 'begin (cons bl34dd@e bl34de@e*))))) bl34da@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl34d8@t)))))) (set! bl4bd8@bl309f@unless-macro bl309f@unless-macro) (set! bl30a1@if-transformer (lambda (bl34e2@e bl34e3@r bl34e4@mr) (let ((bl34e8@t bl34e2@e)) (let ((bl34ea@ls/false (bl30f9@syntax-dispatch bl34e8@t '(_ any any any)))) (if bl34ea@ls/false (apply (lambda (bl34ec@e0 bl34ed@e1 bl34ee@e2) (list 'if (bl311b@chi-expr bl34ec@e0 bl34e3@r bl34e4@mr) (bl311b@chi-expr bl34ed@e1 bl34e3@r bl34e4@mr) (bl311b@chi-expr bl34ee@e2 bl34e3@r bl34e4@mr))) bl34ea@ls/false) (let ((bl34f2@t bl34e8@t)) (let ((bl34f4@ls/false (bl30f9@syntax-dispatch bl34f2@t '(_ any any)))) (if bl34f4@ls/false (apply (lambda (bl34f6@e0 bl34f7@e1) (list 'if (bl311b@chi-expr bl34f6@e0 bl34e3@r bl34e4@mr) (bl311b@chi-expr bl34f7@e1 bl34e3@r bl34e4@mr) (bl2e58@bl2db9@build-void))) bl34f4@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl34f2@t))))))))) (set! bl4bd9@bl30a1@if-transformer bl30a1@if-transformer) (set! bl30a3@and-transformer (lambda (bl34fa@e bl34fb@r bl34fc@mr) (let ((bl3500@t bl34fa@e)) (let ((bl3502@ls/false (bl30f9@syntax-dispatch bl3500@t '(_ . each-any)))) (if bl3502@ls/false (apply (lambda (bl3504@e*) (cons 'and (bl3117@chi-expr* bl3504@e* bl34fb@r bl34fc@mr))) bl3502@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3500@t)))))) (set! bl4bda@bl30a3@and-transformer bl30a3@and-transformer) (set! bl30a5@or-transformer (lambda (bl3506@e bl3507@r bl3508@mr) (let ((bl350c@t bl3506@e)) (let ((bl350e@ls/false (bl30f9@syntax-dispatch bl350c@t '(_ . each-any)))) (if bl350e@ls/false (apply (lambda (bl3510@e*) (cons 'or (bl3117@chi-expr* bl3510@e* bl3507@r bl3508@mr))) bl350e@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl350c@t)))))) (set! bl4bdb@bl30a5@or-transformer bl30a5@or-transformer) (set! bl30a7@case-macro (lambda (bl3512@e) (letrec* ((bl3515@build-last (lambda (bl353c@cls) (let ((bl353e@t bl353c@cls)) (let ((bl3540@ls/false (bl30f9@syntax-dispatch bl353e@t '(#(scheme-id else) any . each-any)))) (if bl3540@ls/false (apply (lambda (bl3542@e bl3543@e*) (cons 'begin (cons bl3542@e bl3543@e*))) bl3540@ls/false) (let ((bl3546@t bl353e@t)) (let ((bl3548@ls/false (bl30f9@syntax-dispatch bl3546@t '_))) (if bl3548@ls/false (apply (lambda () (bl3517@build-one bl353c@cls '(if #f #f))) bl3548@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3546@t))))))))) (bl3517@build-one (lambda (bl352e@cls bl352f@k) (let ((bl3532@t bl352e@cls)) (let ((bl3534@ls/false (bl30f9@syntax-dispatch bl3532@t '(each-any any . each-any)))) (if bl3534@ls/false (apply (lambda (bl3536@d* bl3537@e bl3538@e*) (list 'if (list 'memv 't (list 'quote bl3536@d*)) (cons 'begin (cons bl3537@e bl3538@e*)) bl352f@k)) bl3534@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3532@t))))))) (let ((bl3518@t bl3512@e)) (let ((bl351a@ls/false (bl30f9@syntax-dispatch bl3518@t '(_ any)))) (if bl351a@ls/false (apply (lambda (bl351c@expr) (bl30af@bless (cons 'let (cons (list (list 't bl351c@expr)) '((if #f #f)))))) bl351a@ls/false) (let ((bl351e@t bl3518@t)) (let ((bl3520@ls/false (bl30f9@syntax-dispatch bl351e@t '(_ any any . each-any)))) (if bl3520@ls/false (apply (lambda (bl3522@expr bl3523@cls bl3524@cls*) (bl30af@bless (list 'let (list (list 't bl3522@expr)) (let bl352c@f ((bl3528@cls bl3523@cls) (bl3529@cls* bl3524@cls*)) (if (null? bl3529@cls*) (bl3515@build-last bl3528@cls) (bl3517@build-one bl3528@cls (bl352c@f (car bl3529@cls*) (cdr bl3529@cls*)))))))) bl3520@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl351e@t)))))))))) (set! bl4bdc@bl30a7@case-macro bl30a7@case-macro) (set! bl30a9@quote-transformer (lambda (bl354a@e bl354b@r bl354c@mr) (let ((bl3550@t bl354a@e)) (let ((bl3552@ls/false (bl30f9@syntax-dispatch bl3550@t '(_ any)))) (if bl3552@ls/false (apply (lambda (bl3554@datum) (list 'quote (bl2f06@stx->datum bl3554@datum))) bl3552@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3550@t)))))) (set! bl4bdd@bl30a9@quote-transformer bl30a9@quote-transformer) (set! bl30ab@case-lambda-transformer (lambda (bl3556@e bl3557@r bl3558@mr) (let ((bl355c@t bl3556@e)) (let ((bl355e@ls/false (bl30f9@syntax-dispatch bl355c@t '(_ . #(each (any any . each-any)))))) (if bl355e@ls/false (apply (lambda (bl3560@fmls* bl3561@b* bl3562@b**) (call-with-values (lambda () (bl3123@chi-lambda-clause* bl3556@e bl3560@fmls* (map cons bl3561@b* bl3562@b**) bl3557@r bl3558@mr)) (lambda (bl356a@bl3567 bl356b@bl3569) (let ((bl356e@body* bl356b@bl3569) (bl356f@fmls* bl356a@bl3567)) (bl2e56@bl2d89@build-case-lambda '#f bl356f@fmls* bl356e@body*))))) bl355e@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl355c@t)))))) (set! bl4bde@bl30ab@case-lambda-transformer bl30ab@case-lambda-transformer) (set! bl30ad@lambda-transformer (lambda (bl3572@e bl3573@r bl3574@mr) (let ((bl3578@t bl3572@e)) (let ((bl357a@ls/false (bl30f9@syntax-dispatch bl3578@t '(_ any any . each-any)))) (if bl357a@ls/false (apply (lambda (bl357c@fmls bl357d@b bl357e@b*) (call-with-values (lambda () (bl3121@chi-lambda-clause bl3572@e bl357c@fmls (cons bl357d@b bl357e@b*) bl3573@r bl3574@mr)) (lambda (bl3586@bl3583 bl3587@bl3585) (let ((bl358a@body bl3587@bl3585) (bl358b@fmls bl3586@bl3583)) (bl2e55@bl2d87@build-lambda '#f bl358b@fmls bl358a@body))))) bl357a@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3578@t)))))) (set! bl4bdf@bl30ad@lambda-transformer bl30ad@lambda-transformer) (set! bl30af@bless (lambda (bl358e@x) (bl2eda@mkstx (let bl3592@f ((bl3590@x bl358e@x)) (if (bl2ebe@stx? bl3590@x) bl3590@x (if (pair? bl3590@x) (cons (bl3592@f (car bl3590@x)) (bl3592@f (cdr bl3590@x))) (if (symbol? bl3590@x) (bl3081@scheme-stx bl3590@x) (if (vector? bl3590@x) (vector-map bl3592@f bl3590@x) bl3590@x))))) '() '() '()))) (set! bl4be0@bl30af@bless bl30af@bless) (set! bl30b1@with-syntax-macro (lambda (bl3594@e) (let ((bl3596@t bl3594@e)) (let ((bl3598@ls/false (bl30f9@syntax-dispatch bl3596@t '(_ #(each (any any)) any . each-any)))) (if bl3598@ls/false (apply (lambda (bl359a@pat* bl359b@expr* bl359c@b bl359d@b*) (let ((bl35a2@idn* (let bl35a6@f ((bl35a4@pat* bl359a@pat*)) (if (null? bl35a4@pat*) '() (call-with-values (lambda () (bl30f7@convert-pattern (car bl35a4@pat*) '())) (lambda (bl35ac@bl35a9 bl35ad@bl35ab) (let ((bl35b0@idn* bl35ad@bl35ab) (bl35b1@pat bl35ac@bl35a9)) (append bl35b0@idn* (bl35a6@f (cdr bl35a4@pat*)))))))))) (begin (bl311f@verify-formals (map car bl35a2@idn*) bl3594@e) (let ((bl35b4@t* (bl31c7@generate-temporaries bl359b@expr*))) (bl30af@bless (list 'let (map list bl35b4@t* bl359b@expr*) (let bl35ba@f ((bl35b6@pat* bl359a@pat*) (bl35b7@t* bl35b4@t*)) (if (null? bl35b6@pat*) (cons 'let (cons '() (cons bl359c@b bl359d@b*))) (list 'syntax-case (car bl35b7@t*) '() (list (car bl35b6@pat*) (bl35ba@f (cdr bl35b6@pat*) (cdr bl35b7@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car bl35b6@pat*)) (car bl35b7@t*)))))))))))) bl3598@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3596@t)))))) (set! bl4be1@bl30b1@with-syntax-macro bl30b1@with-syntax-macro) (set! bl30b3@invalid-fmls-error (lambda (bl35bc@stx bl35bd@fmls) (let ((bl35c0@t bl35bd@fmls)) (let ((bl35c2@ls/false (bl30f9@syntax-dispatch bl35c0@t '#(each+ any () any)))) (if bl35c2@ls/false (apply (lambda (bl35c4@id* bl35c5@last) (let bl35ca@f ((bl35c8@id* (if (bl2ef2@id? bl35c5@last) (cons bl35c5@last bl35c4@id*) (if (bl2ee8@syntax-null? bl35c5@last) bl35c4@id* (bl31d9@syntax-violation '#f '"not an identifier" bl35bc@stx bl35c5@last))))) (if (null? bl35c8@id*) (values) (if (not (bl2ef2@id? (car bl35c8@id*))) (bl31d9@syntax-violation '#f '"not an identifier" bl35bc@stx (car bl35c8@id*)) (begin (bl35ca@f (cdr bl35c8@id*)) (if (bl2efe@bound-id-member? (car bl35c8@id*) (cdr bl35c8@id*)) (bl31d9@syntax-violation '#f '"duplicate binding" bl35bc@stx (car bl35c8@id*)) (void))))))) bl35c2@ls/false) (let ((bl35cc@t bl35c0@t)) (let ((bl35ce@ls/false (bl30f9@syntax-dispatch bl35cc@t '_))) (if bl35ce@ls/false (apply (lambda () (bl31d9@syntax-violation '#f '"malformed binding form" bl35bc@stx bl35bd@fmls)) bl35ce@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl35cc@t))))))))) (set! bl4be2@bl30b3@invalid-fmls-error bl30b3@invalid-fmls-error) (set! bl30b5@let-macro (lambda (bl35d0@stx) (let ((bl35d2@t bl35d0@stx)) (let ((bl35d4@ls/false (bl30f9@syntax-dispatch bl35d2@t '(_ #(each (any any)) any . each-any)))) (if bl35d4@ls/false (apply (lambda (bl35d6@lhs* bl35d7@rhs* bl35d8@b bl35d9@b*) (if (bl2efa@valid-bound-ids? bl35d6@lhs*) (bl30af@bless (cons (cons 'lambda (cons bl35d6@lhs* (cons bl35d8@b bl35d9@b*))) bl35d7@rhs*)) (bl30b3@invalid-fmls-error bl35d0@stx bl35d6@lhs*))) bl35d4@ls/false) (let ((bl35de@t bl35d2@t)) (let ((bl35e0@ls/false (bl30f9@syntax-dispatch bl35de@t '(_ any #(each (any any)) any . each-any)))) (if (and bl35e0@ls/false (apply (lambda (bl35e2@f bl35e3@lhs* bl35e4@rhs* bl35e5@b bl35e6@b*) (bl2ef2@id? bl35e2@f)) bl35e0@ls/false)) (apply (lambda (bl35ec@f bl35ed@lhs* bl35ee@rhs* bl35ef@b bl35f0@b*) (if (bl2efa@valid-bound-ids? bl35ed@lhs*) (bl30af@bless (cons (list 'letrec (list (list bl35ec@f (cons 'lambda (cons bl35ed@lhs* (cons bl35ef@b bl35f0@b*))))) bl35ec@f) bl35ee@rhs*)) (bl30b3@invalid-fmls-error bl35d0@stx bl35ed@lhs*))) bl35e0@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl35de@t))))))))) (set! bl4be3@bl30b5@let-macro bl30b5@let-macro) (set! bl30b7@let-values-macro (lambda (bl35f6@stx) (letrec* ((bl35f9@rename (lambda (bl365e@x bl365f@old* bl3660@new*) (begin (if (not (bl2ef2@id? bl365e@x)) (bl31d9@syntax-violation '#f '"not an indentifier" bl35f6@stx bl365e@x) (void)) (if (bl2efe@bound-id-member? bl365e@x bl365f@old*) (bl31d9@syntax-violation '#f '"duplicate binding" bl35f6@stx bl365e@x) (void)) (let ((bl3664@y (gensym (bl31df@syntax->datum bl365e@x)))) (values bl3664@y (cons bl365e@x bl365f@old*) (cons bl3664@y bl3660@new*)))))) (bl35fb@rename* (lambda (bl364c@x* bl364d@old* bl364e@new*) (if (null? bl364c@x*) (values '() bl364d@old* bl364e@new*) (call-with-values (lambda () (bl35f9@rename (car bl364c@x*) bl364d@old* bl364e@new*)) (lambda (bl3652@x bl3653@old* bl3654@new*) (call-with-values (lambda () (bl35fb@rename* (cdr bl364c@x*) bl3653@old* bl3654@new*)) (lambda (bl3658@x* bl3659@old* bl365a@new*) (values (cons bl3652@x bl3658@x*) bl3659@old* bl365a@new*))))))))) (let ((bl35fc@t bl35f6@stx)) (let ((bl35fe@ls/false (bl30f9@syntax-dispatch bl35fc@t '(_ () any . each-any)))) (if bl35fe@ls/false (apply (lambda (bl3600@b bl3601@b*) (cons* (bl30af@bless 'let) '() bl3600@b bl3601@b*)) bl35fe@ls/false) (let ((bl3604@t bl35fc@t)) (let ((bl3606@ls/false (bl30f9@syntax-dispatch bl3604@t '(_ #(each (any any)) any . each-any)))) (if bl3606@ls/false (apply (lambda (bl3608@lhs* bl3609@rhs* bl360a@b bl360b@b*) (bl30af@bless (let bl3618@f ((bl3610@lhs* bl3608@lhs*) (bl3611@rhs* bl3609@rhs*) (bl3612@old* '()) (bl3613@new* '())) (if (null? bl3610@lhs*) (cons 'let (cons (map list bl3612@old* bl3613@new*) (cons bl360a@b bl360b@b*))) (let ((bl361a@t (car bl3610@lhs*))) (let ((bl361c@ls/false (bl30f9@syntax-dispatch bl361a@t 'each-any))) (if bl361c@ls/false (apply (lambda (bl361e@x*) (call-with-values (lambda () (bl35fb@rename* bl361e@x* bl3612@old* bl3613@new*)) (lambda (bl3626@bl3621 bl3627@bl3623 bl3628@bl3625) (let ((bl362c@new* bl3628@bl3625) (bl362d@old* bl3627@bl3623) (bl362e@y* bl3626@bl3621)) (list 'call-with-values (list 'lambda '() (car bl3611@rhs*)) (list 'lambda bl362e@y* (bl3618@f (cdr bl3610@lhs*) (cdr bl3611@rhs*) bl362d@old* bl362c@new*))))))) bl361c@ls/false) (let ((bl3632@t bl361a@t)) (let ((bl3634@ls/false (bl30f9@syntax-dispatch bl3632@t '#(each+ any () any)))) (if bl3634@ls/false (apply (lambda (bl3636@x* bl3637@x) (call-with-values (lambda () (bl35f9@rename bl3637@x bl3612@old* bl3613@new*)) (lambda (bl363a@y bl363b@old* bl363c@new*) (call-with-values (lambda () (bl35fb@rename* bl3636@x* bl363b@old* bl363c@new*)) (lambda (bl3640@y* bl3641@old* bl3642@new*) (list 'call-with-values (list 'lambda '() (car bl3611@rhs*)) (list 'lambda (append bl3640@y* bl363a@y) (bl3618@f (cdr bl3610@lhs*) (cdr bl3611@rhs*) bl3641@old* bl3642@new*)))))))) bl3634@ls/false) (let ((bl3646@t bl3632@t)) (let ((bl3648@ls/false (bl30f9@syntax-dispatch bl3646@t 'any))) (if bl3648@ls/false (apply (lambda (bl364a@others) (bl31d9@syntax-violation '#f '"malformed bindings" bl35f6@stx bl364a@others)) bl3648@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3646@t)))))))))))))) bl3606@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3604@t)))))))))) (set! bl4be4@bl30b7@let-values-macro bl30b7@let-values-macro) (set! bl30b9@let*-values-macro (lambda (bl3666@stx) (letrec* ((bl3669@check (lambda (bl3698@x*) (if (not (null? bl3698@x*)) (let ((bl369a@x (car bl3698@x*))) (begin (if (not (bl2ef2@id? bl369a@x)) (bl31d9@syntax-violation '#f '"not an identifier" bl3666@stx bl369a@x) (void)) (bl3669@check (cdr bl3698@x*)) (if (bl2efe@bound-id-member? bl369a@x (cdr bl3698@x*)) (bl31d9@syntax-violation '#f '"duplicate identifier" bl3666@stx bl369a@x) (void)))) (void))))) (let ((bl366a@t bl3666@stx)) (let ((bl366c@ls/false (bl30f9@syntax-dispatch bl366a@t '(_ () any . each-any)))) (if bl366c@ls/false (apply (lambda (bl366e@b bl366f@b*) (cons* (bl30af@bless 'let) '() bl366e@b bl366f@b*)) bl366c@ls/false) (let ((bl3672@t bl366a@t)) (let ((bl3674@ls/false (bl30f9@syntax-dispatch bl3672@t '(_ #(each (any any)) any . each-any)))) (if bl3674@ls/false (apply (lambda (bl3676@lhs* bl3677@rhs* bl3678@b bl3679@b*) (bl30af@bless (let bl3682@f ((bl367e@lhs* bl3676@lhs*) (bl367f@rhs* bl3677@rhs*)) (if (null? bl367e@lhs*) (cons 'begin (cons bl3678@b bl3679@b*)) (let ((bl3684@t (car bl367e@lhs*))) (let ((bl3686@ls/false (bl30f9@syntax-dispatch bl3684@t 'each-any))) (if bl3686@ls/false (apply (lambda (bl3688@x*) (begin (bl3669@check bl3688@x*) (list 'call-with-values (list 'lambda '() (car bl367f@rhs*)) (list 'lambda bl3688@x* (bl3682@f (cdr bl367e@lhs*) (cdr bl367f@rhs*)))))) bl3686@ls/false) (let ((bl368a@t bl3684@t)) (let ((bl368c@ls/false (bl30f9@syntax-dispatch bl368a@t '#(each+ any () any)))) (if bl368c@ls/false (apply (lambda (bl368e@x* bl368f@x) (begin (bl3669@check (cons bl368f@x bl368e@x*)) (list 'call-with-values (list 'lambda '() (car bl367f@rhs*)) (list 'lambda (append bl368e@x* bl368f@x) (bl3682@f (cdr bl367e@lhs*) (cdr bl367f@rhs*)))))) bl368c@ls/false) (let ((bl3692@t bl368a@t)) (let ((bl3694@ls/false (bl30f9@syntax-dispatch bl3692@t 'any))) (if bl3694@ls/false (apply (lambda (bl3696@others) (bl31d9@syntax-violation '#f '"malformed bindings" bl3666@stx bl3696@others)) bl3694@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3692@t)))))))))))))) bl3674@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3672@t)))))))))) (set! bl4be5@bl30b9@let*-values-macro bl30b9@let*-values-macro) (set! bl30bb@trace-lambda-macro (lambda (bl369c@stx) (let ((bl369e@t bl369c@stx)) (let ((bl36a0@ls/false (bl30f9@syntax-dispatch bl369e@t '(_ any each-any any . each-any)))) (if bl36a0@ls/false (apply (lambda (bl36a2@who bl36a3@fmls bl36a4@b bl36a5@b*) (if (bl2efa@valid-bound-ids? bl36a3@fmls) (bl30af@bless (list 'make-traced-procedure (list 'quote bl36a2@who) (cons 'lambda (cons bl36a3@fmls (cons bl36a4@b bl36a5@b*))))) (bl30b3@invalid-fmls-error bl369c@stx bl36a3@fmls))) bl36a0@ls/false) (let ((bl36aa@t bl369e@t)) (let ((bl36ac@ls/false (bl30f9@syntax-dispatch bl36aa@t '(_ any #(each+ any () any) any . each-any)))) (if bl36ac@ls/false (apply (lambda (bl36ae@who bl36af@fmls bl36b0@last bl36b1@b bl36b2@b*) (if (bl2efa@valid-bound-ids? (cons bl36b0@last bl36af@fmls)) (bl30af@bless (list 'make-traced-procedure (list 'quote bl36ae@who) (cons 'lambda (cons (append bl36af@fmls bl36b0@last) (cons bl36b1@b bl36b2@b*))))) (bl30b3@invalid-fmls-error bl369c@stx (append bl36af@fmls bl36b0@last)))) bl36ac@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl36aa@t))))))))) (set! bl4be6@bl30bb@trace-lambda-macro bl30bb@trace-lambda-macro) (set! bl30bd@trace-define-macro (lambda (bl36b8@stx) (let ((bl36ba@t bl36b8@stx)) (let ((bl36bc@ls/false (bl30f9@syntax-dispatch bl36ba@t '(_ (any . each-any) any . each-any)))) (if bl36bc@ls/false (apply (lambda (bl36be@who bl36bf@fmls bl36c0@b bl36c1@b*) (if (bl2efa@valid-bound-ids? bl36bf@fmls) (bl30af@bless (list 'define bl36be@who (list 'make-traced-procedure (list 'quote bl36be@who) (cons 'lambda (cons bl36bf@fmls (cons bl36c0@b bl36c1@b*)))))) (bl30b3@invalid-fmls-error bl36b8@stx bl36bf@fmls))) bl36bc@ls/false) (let ((bl36c6@t bl36ba@t)) (let ((bl36c8@ls/false (bl30f9@syntax-dispatch bl36c6@t '(_ (any . #(each+ any () any)) any . each-any)))) (if bl36c8@ls/false (apply (lambda (bl36ca@who bl36cb@fmls bl36cc@last bl36cd@b bl36ce@b*) (if (bl2efa@valid-bound-ids? (cons bl36cc@last bl36cb@fmls)) (bl30af@bless (list 'define bl36ca@who (list 'make-traced-procedure (list 'quote bl36ca@who) (cons 'lambda (cons (append bl36cb@fmls bl36cc@last) (cons bl36cd@b bl36ce@b*)))))) (bl30b3@invalid-fmls-error bl36b8@stx (append bl36cb@fmls bl36cc@last)))) bl36c8@ls/false) (let ((bl36d4@t bl36c6@t)) (let ((bl36d6@ls/false (bl30f9@syntax-dispatch bl36d4@t '(_ any any)))) (if bl36d6@ls/false (apply (lambda (bl36d8@who bl36d9@expr) (if (bl2ef2@id? bl36d8@who) (bl30af@bless (list 'define bl36d8@who (list 'let (list (list 'v bl36d9@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote bl36d8@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (bl31d9@syntax-violation '#f '"invalid name" bl36b8@stx))) bl36d6@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl36d4@t)))))))))))) (set! bl4be7@bl30bd@trace-define-macro bl30bd@trace-define-macro) (set! bl30bf@trace-define-syntax-macro (lambda (bl36dc@stx) (let ((bl36de@t bl36dc@stx)) (let ((bl36e0@ls/false (bl30f9@syntax-dispatch bl36de@t '(_ any any)))) (if bl36e0@ls/false (apply (lambda (bl36e2@who bl36e3@expr) (if (bl2ef2@id? bl36e2@who) (bl30af@bless (list 'define-syntax bl36e2@who (list 'make-traced-macro (list 'quote bl36e2@who) bl36e3@expr))) (bl31d9@syntax-violation '#f '"invalid name" bl36dc@stx))) bl36e0@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl36de@t)))))) (set! bl4be8@bl30bf@trace-define-syntax-macro bl30bf@trace-define-syntax-macro) (set! bl30c1@trace-let/rec-syntax (lambda (bl36e6@who) (lambda (bl36e8@stx) (let ((bl36ea@t bl36e8@stx)) (let ((bl36ec@ls/false (bl30f9@syntax-dispatch bl36ea@t '(_ #(each (any any)) any . each-any)))) (if bl36ec@ls/false (apply (lambda (bl36ee@lhs* bl36ef@rhs* bl36f0@b bl36f1@b*) (if (bl2efa@valid-bound-ids? bl36ee@lhs*) (let ((bl36f6@rhs* (map (lambda (bl36f8@lhs bl36f9@rhs) (list 'make-traced-macro (list 'quote bl36f8@lhs) bl36f9@rhs)) bl36ee@lhs* bl36ef@rhs*))) (bl30af@bless (cons bl36e6@who (cons (map list bl36ee@lhs* bl36f6@rhs*) (cons bl36f0@b bl36f1@b*))))) (bl30b3@invalid-fmls-error bl36e8@stx bl36ee@lhs*))) bl36ec@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl36ea@t))))))) (set! bl4be9@bl30c1@trace-let/rec-syntax bl30c1@trace-let/rec-syntax) (set! bl30c3@trace-let-syntax-macro (bl30c1@trace-let/rec-syntax 'let-syntax)) (set! bl4bea@bl30c3@trace-let-syntax-macro bl30c3@trace-let-syntax-macro) (set! bl30c5@trace-letrec-syntax-macro (bl30c1@trace-let/rec-syntax 'letrec-syntax)) (set! bl4beb@bl30c5@trace-letrec-syntax-macro bl30c5@trace-letrec-syntax-macro) (set! bl30c7@guard-macro (lambda (bl36fc@x) (letrec* ((bl36ff@gen-clauses (lambda (bl3716@con bl3717@outerk bl3718@clause*) (letrec* ((bl371d@f (lambda (bl3756@x bl3757@k) (let ((bl375a@t bl3756@x)) (let ((bl375c@ls/false (bl30f9@syntax-dispatch bl375a@t '(any #(scheme-id =>) any)))) (if bl375c@ls/false (apply (lambda (bl375e@e bl375f@p) (let ((bl3762@t (gensym))) (list 'let (list (list bl3762@t bl375e@e)) (list 'if bl3762@t (list bl375f@p bl3762@t) bl3757@k)))) bl375c@ls/false) (let ((bl3764@t bl375a@t)) (let ((bl3766@ls/false (bl30f9@syntax-dispatch bl3764@t '(any)))) (if bl3766@ls/false (apply (lambda (bl3768@e) (let ((bl376a@t (gensym))) (list 'let (list (list bl376a@t bl3768@e)) (list 'if bl376a@t bl376a@t bl3757@k)))) bl3766@ls/false) (let ((bl376c@t bl3764@t)) (let ((bl376e@ls/false (bl30f9@syntax-dispatch bl376c@t '(any any . each-any)))) (if bl376e@ls/false (apply (lambda (bl3770@e bl3771@v bl3772@v*) (list 'if bl3770@e (cons 'begin (cons bl3771@v bl3772@v*)) bl3757@k)) bl376e@ls/false) (let ((bl3776@t bl376c@t)) (let ((bl3778@ls/false (bl30f9@syntax-dispatch bl3776@t '_))) (if bl3778@ls/false (apply (lambda () (bl31d9@syntax-violation '#f '"invalid guard clause" bl3756@x)) bl3778@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3776@t))))))))))))))) (bl371f@f* (lambda (bl372c@x*) (let ((bl372e@t bl372c@x*)) (let ((bl3730@ls/false (bl30f9@syntax-dispatch bl372e@t '()))) (if bl3730@ls/false (apply (lambda () (let ((bl3732@g (gensym))) (values (list bl3732@g (list 'lambda '() (list 'raise-continuable bl3716@con))) bl3732@g))) bl3730@ls/false) (let ((bl3734@t bl372e@t)) (let ((bl3736@ls/false (bl30f9@syntax-dispatch bl3734@t '((#(scheme-id else) any . each-any))))) (if bl3736@ls/false (apply (lambda (bl3738@e bl3739@e*) (values (cons 'begin (cons bl3738@e bl3739@e*)) '#f)) bl3736@ls/false) (let ((bl373c@t bl3734@t)) (let ((bl373e@ls/false (bl30f9@syntax-dispatch bl373c@t '(any . any)))) (if bl373e@ls/false (apply (lambda (bl3740@cls bl3741@cls*) (call-with-values (lambda () (bl371f@f* bl3741@cls*)) (lambda (bl3748@bl3745 bl3749@bl3747) (let ((bl374c@g bl3749@bl3747) (bl374d@e bl3748@bl3745)) (values (bl371d@f bl3740@cls bl374d@e) bl374c@g))))) bl373e@ls/false) (let ((bl3750@t bl373c@t)) (let ((bl3752@ls/false (bl30f9@syntax-dispatch bl3750@t 'any))) (if bl3752@ls/false (apply (lambda (bl3754@others) (bl31d9@syntax-violation '#f '"invalid guard clause" bl3754@others)) bl3752@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3750@t)))))))))))))))) (call-with-values (lambda () (bl371f@f* bl3718@clause*)) (lambda (bl3724@bl3721 bl3725@bl3723) (let ((bl3728@raisek bl3725@bl3723) (bl3729@code bl3724@bl3721)) (if bl3728@raisek (list (list 'call/cc (list 'lambda (list bl3728@raisek) (list bl3717@outerk (list 'lambda '() bl3729@code))))) (list bl3717@outerk (list 'lambda '() bl3729@code)))))))))) (let ((bl3700@t bl36fc@x)) (let ((bl3702@ls/false (bl30f9@syntax-dispatch bl3700@t '(_ (any . each-any) any . each-any)))) (if (and bl3702@ls/false (apply (lambda (bl3704@con bl3705@clause* bl3706@b bl3707@b*) (bl2ef2@id? bl3704@con)) bl3702@ls/false)) (apply (lambda (bl370c@con bl370d@clause* bl370e@b bl370f@b*) (let ((bl3714@outerk (gensym))) (bl30af@bless (list (list 'call/cc (list 'lambda (list bl3714@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list bl370c@con) (bl36ff@gen-clauses bl370c@con bl3714@outerk bl370d@clause*)) (cons 'lambda (cons '() (cons bl370e@b bl370f@b*))))))))))) bl3702@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3700@t))))))) (set! bl4bec@bl30c7@guard-macro bl30c7@guard-macro) (set! bl30c9@define-enumeration-macro (lambda (bl377a@stx) (letrec* ((bl377d@set? (lambda (bl3796@x) (or (null? bl3796@x) (and (not (memq (car bl3796@x) (cdr bl3796@x))) (bl377d@set? (cdr bl3796@x)))))) (bl377f@remove-dups (lambda (bl3794@ls) (if (null? bl3794@ls) '() (cons (car bl3794@ls) (bl377f@remove-dups (remq (car bl3794@ls) (cdr bl3794@ls)))))))) (let ((bl3780@t bl377a@stx)) (let ((bl3782@ls/false (bl30f9@syntax-dispatch bl3780@t '(_ any each-any any)))) (if (and bl3782@ls/false (apply (lambda (bl3784@name bl3785@id* bl3786@maker) (and (bl2ef2@id? bl3784@name) (bl2ef2@id? bl3786@maker) (for-all bl2ef2@id? bl3785@id*))) bl3782@ls/false)) (apply (lambda (bl378a@name bl378b@id* bl378c@maker) (let ((bl3790@name* (bl377f@remove-dups (bl31df@syntax->datum bl378b@id*))) (bl3791@mk (gensym))) (bl30af@bless (list 'begin (list 'define bl3791@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote bl3790@name*)))) (list 'define-syntax bl378a@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote bl3790@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote bl378a@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax bl378c@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote bl378c@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote bl3790@name*)) (cons 'syntax-violation (cons (list 'quote bl378c@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons bl3791@mk '('(n* ...))))))))))))) bl3782@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3780@t))))))) (set! bl4bed@bl30c9@define-enumeration-macro bl30c9@define-enumeration-macro) (set! bl30cb@time-macro (lambda (bl3798@stx) (let ((bl379a@t bl3798@stx)) (let ((bl379c@ls/false (bl30f9@syntax-dispatch bl379a@t '(_ any)))) (if bl379c@ls/false (apply (lambda (bl379e@expr) (bl30af@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() bl379e@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) bl379c@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl379a@t)))))) (set! bl4bee@bl30cb@time-macro bl30cb@time-macro) (set! bl30cd@delay-macro (lambda (bl37a0@stx) (let ((bl37a2@t bl37a0@stx)) (let ((bl37a4@ls/false (bl30f9@syntax-dispatch bl37a2@t '(_ any)))) (if bl37a4@ls/false (apply (lambda (bl37a6@expr) (bl30af@bless (list 'make-promise (list 'lambda '() bl37a6@expr)))) bl37a4@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl37a2@t)))))) (set! bl4bef@bl30cd@delay-macro bl30cd@delay-macro) (set! bl30cf@assert-macro (lambda (bl37a8@stx) (let ((bl37aa@t bl37a8@stx)) (let ((bl37ac@ls/false (bl30f9@syntax-dispatch bl37aa@t '(_ any)))) (if bl37ac@ls/false (apply (lambda (bl37ae@expr) (let ((bl37b0@pos (or (bl31d1@expression-position bl37a8@stx) (bl31d1@expression-position bl37ae@expr)))) (bl30af@bless (list 'let (list (list 'x bl37ae@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote bl37ae@expr) (list 'quote bl37b0@pos))))))) bl37ac@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl37aa@t)))))) (set! bl4bf0@bl30cf@assert-macro bl30cf@assert-macro) (set! bl30d1@endianness-macro (lambda (bl37b2@stx) (let ((bl37b4@t bl37b2@stx)) (let ((bl37b6@ls/false (bl30f9@syntax-dispatch bl37b4@t '(_ any)))) (if bl37b6@ls/false (apply (lambda (bl37b8@e) (let ((bl37ba@t (bl31df@syntax->datum bl37b8@e))) (if (memv bl37ba@t '(little)) (bl30af@bless ''little) (if (memv bl37ba@t '(big)) (bl30af@bless ''big) (bl31d9@syntax-violation '#f '"endianness must be big or little" bl37b2@stx))))) bl37b6@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl37b4@t)))))) (set! bl4bf1@bl30d1@endianness-macro bl30d1@endianness-macro) (set! bl30d3@identifier-syntax-macro (lambda (bl37bc@stx) (let ((bl37be@t bl37bc@stx)) (let ((bl37c0@ls/false (bl30f9@syntax-dispatch bl37be@t '(_ any)))) (if bl37c0@ls/false (apply (lambda (bl37c2@expr) (bl30af@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax bl37c2@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax bl37c2@expr) '((syntax (e* ...)))))))))) bl37c0@ls/false) (let ((bl37c4@t bl37be@t)) (let ((bl37c6@ls/false (bl30f9@syntax-dispatch bl37c4@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and bl37c6@ls/false (apply (lambda (bl37c8@id1 bl37c9@expr1 bl37ca@id2 bl37cb@expr2 bl37cc@expr3) (and (bl2ef2@id? bl37c8@id1) (bl2ef2@id? bl37ca@id2) (bl2ef2@id? bl37cb@expr2))) bl37c6@ls/false)) (apply (lambda (bl37d2@id1 bl37d3@expr1 bl37d4@id2 bl37d5@expr2 bl37d6@expr3) (bl30af@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax bl37d3@expr1)) (list (list 'set! 'id bl37d5@expr2) (list 'syntax bl37d6@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons bl37d3@expr1 '(e* ...))))))))) bl37c6@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl37c4@t))))))))) (set! bl4bf2@bl30d3@identifier-syntax-macro bl30d3@identifier-syntax-macro) (set! bl30d5@do-macro (lambda (bl37dc@stx) (letrec* ((bl37df@bind (lambda (bl37f6@x) (let ((bl37f8@t bl37f6@x)) (let ((bl37fa@ls/false (bl30f9@syntax-dispatch bl37f8@t '(any any)))) (if bl37fa@ls/false (apply (lambda (bl37fc@x bl37fd@init) (list bl37fc@x bl37fd@init bl37fc@x)) bl37fa@ls/false) (let ((bl3800@t bl37f8@t)) (let ((bl3802@ls/false (bl30f9@syntax-dispatch bl3800@t '(any any any)))) (if bl3802@ls/false (apply (lambda (bl3804@x bl3805@init bl3806@step) (list bl3804@x bl3805@init bl3806@step)) bl3802@ls/false) (let ((bl380a@t bl3800@t)) (let ((bl380c@ls/false (bl30f9@syntax-dispatch bl380a@t '_))) (if bl380c@ls/false (apply (lambda () (bl31d9@syntax-violation '#f '"invalid binding" bl37dc@stx)) bl380c@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl380a@t))))))))))))) (let ((bl37e0@t bl37dc@stx)) (let ((bl37e2@ls/false (bl30f9@syntax-dispatch bl37e0@t '(_ each-any (any . each-any) . each-any)))) (if bl37e2@ls/false (apply (lambda (bl37e4@binding* bl37e5@test bl37e6@expr* bl37e7@command*) (let ((bl37ec@t (map bl37df@bind bl37e4@binding*))) (let ((bl37ee@ls/false (bl30f9@syntax-dispatch bl37ec@t '#(each (any any any))))) (if bl37ee@ls/false (apply (lambda (bl37f0@x* bl37f1@init* bl37f2@step*) (if (bl2efa@valid-bound-ids? bl37f0@x*) (bl30af@bless (list 'letrec (list (list 'loop (list 'lambda bl37f0@x* (list 'if bl37e5@test (cons 'begin (cons '(if #f #f) bl37e6@expr*)) (cons 'begin (append bl37e7@command* (list (cons 'loop bl37f2@step*)))))))) (cons 'loop bl37f1@init*))) (bl31d9@syntax-violation '#f '"invalid bindings" bl37dc@stx))) bl37ee@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl37ec@t))))) bl37e2@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl37e0@t))))))) (set! bl4bf3@bl30d5@do-macro bl30d5@do-macro) (set! bl30d7@let*-macro (lambda (bl380e@stx) (let ((bl3810@t bl380e@stx)) (let ((bl3812@ls/false (bl30f9@syntax-dispatch bl3810@t '(_ #(each (any any)) any . each-any)))) (if (and bl3812@ls/false (apply (lambda (bl3814@lhs* bl3815@rhs* bl3816@b bl3817@b*) (for-all bl2ef2@id? bl3814@lhs*)) bl3812@ls/false)) (apply (lambda (bl381c@lhs* bl381d@rhs* bl381e@b bl381f@b*) (bl30af@bless (let bl3826@f ((bl3824@x* (map list bl381c@lhs* bl381d@rhs*))) (if (null? bl3824@x*) (cons 'let (cons '() (cons bl381e@b bl381f@b*))) (list 'let (list (car bl3824@x*)) (bl3826@f (cdr bl3824@x*))))))) bl3812@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3810@t)))))) (set! bl4bf4@bl30d7@let*-macro bl30d7@let*-macro) (set! bl30d9@or-macro (lambda (bl3828@stx) (let ((bl382a@t bl3828@stx)) (let ((bl382c@ls/false (bl30f9@syntax-dispatch bl382a@t '(_)))) (if bl382c@ls/false (apply (lambda () '#f) bl382c@ls/false) (let ((bl382e@t bl382a@t)) (let ((bl3830@ls/false (bl30f9@syntax-dispatch bl382e@t '(_ any . each-any)))) (if bl3830@ls/false (apply (lambda (bl3832@e bl3833@e*) (bl30af@bless (let bl383a@f ((bl3836@e bl3832@e) (bl3837@e* bl3833@e*)) (if (null? bl3837@e*) (list 'begin '#f bl3836@e) (list 'let (list (list 't bl3836@e)) (list 'if 't 't (bl383a@f (car bl3837@e*) (cdr bl3837@e*)))))))) bl3830@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl382e@t))))))))) (set! bl4bf5@bl30d9@or-macro bl30d9@or-macro) (set! bl30db@and-macro (lambda (bl383c@stx) (let ((bl383e@t bl383c@stx)) (let ((bl3840@ls/false (bl30f9@syntax-dispatch bl383e@t '(_)))) (if bl3840@ls/false (apply (lambda () '#t) bl3840@ls/false) (let ((bl3842@t bl383e@t)) (let ((bl3844@ls/false (bl30f9@syntax-dispatch bl3842@t '(_ any . each-any)))) (if bl3844@ls/false (apply (lambda (bl3846@e bl3847@e*) (bl30af@bless (let bl384e@f ((bl384a@e bl3846@e) (bl384b@e* bl3847@e*)) (if (null? bl384b@e*) (list 'begin '#f bl384a@e) (cons 'if (cons bl384a@e (cons (bl384e@f (car bl384b@e*) (cdr bl384b@e*)) '(#f)))))))) bl3844@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3842@t))))))))) (set! bl4bf6@bl30db@and-macro bl30db@and-macro) (set! bl30dd@cond-macro (lambda (bl3850@stx) (let ((bl3852@t bl3850@stx)) (let ((bl3854@ls/false (bl30f9@syntax-dispatch bl3852@t '(_ any . each-any)))) (if bl3854@ls/false (apply (lambda (bl3856@cls bl3857@cls*) (bl30af@bless (let bl385e@f ((bl385a@cls bl3856@cls) (bl385b@cls* bl3857@cls*)) (if (null? bl385b@cls*) (let ((bl3860@t bl385a@cls)) (let ((bl3862@ls/false (bl30f9@syntax-dispatch bl3860@t '(#(scheme-id else) any . each-any)))) (if bl3862@ls/false (apply (lambda (bl3864@e bl3865@e*) (cons 'begin (cons bl3864@e bl3865@e*))) bl3862@ls/false) (let ((bl3868@t bl3860@t)) (let ((bl386a@ls/false (bl30f9@syntax-dispatch bl3868@t '(any #(scheme-id =>) any)))) (if bl386a@ls/false (apply (lambda (bl386c@e bl386d@p) (list 'let (list (list 't bl386c@e)) (list 'if 't (cons bl386d@p '(t))))) bl386a@ls/false) (let ((bl3870@t bl3868@t)) (let ((bl3872@ls/false (bl30f9@syntax-dispatch bl3870@t '(any)))) (if bl3872@ls/false (apply (lambda (bl3874@e) (cons 'or (cons bl3874@e '((if #f #f))))) bl3872@ls/false) (let ((bl3876@t bl3870@t)) (let ((bl3878@ls/false (bl30f9@syntax-dispatch bl3876@t '(any . each-any)))) (if bl3878@ls/false (apply (lambda (bl387a@e bl387b@e*) (list 'if bl387a@e (cons 'begin bl387b@e*))) bl3878@ls/false) (let ((bl387e@t bl3876@t)) (let ((bl3880@ls/false (bl30f9@syntax-dispatch bl387e@t '_))) (if bl3880@ls/false (apply (lambda () (bl31d9@syntax-violation '#f '"invalid last clause" bl3850@stx)) bl3880@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl387e@t)))))))))))))))) (let ((bl3882@t bl385a@cls)) (let ((bl3884@ls/false (bl30f9@syntax-dispatch bl3882@t '(#(scheme-id else) any . each-any)))) (if bl3884@ls/false (apply (lambda (bl3886@e bl3887@e*) (bl31d9@syntax-violation '#f '"incorrect position of keyword else" bl3850@stx)) bl3884@ls/false) (let ((bl388a@t bl3882@t)) (let ((bl388c@ls/false (bl30f9@syntax-dispatch bl388a@t '(any #(scheme-id =>) any)))) (if bl388c@ls/false (apply (lambda (bl388e@e bl388f@p) (list 'let (list (list 't bl388e@e)) (list 'if 't (cons bl388f@p '(t)) (bl385e@f (car bl385b@cls*) (cdr bl385b@cls*))))) bl388c@ls/false) (let ((bl3892@t bl388a@t)) (let ((bl3894@ls/false (bl30f9@syntax-dispatch bl3892@t '(any)))) (if bl3894@ls/false (apply (lambda (bl3896@e) (list 'or bl3896@e (bl385e@f (car bl385b@cls*) (cdr bl385b@cls*)))) bl3894@ls/false) (let ((bl3898@t bl3892@t)) (let ((bl389a@ls/false (bl30f9@syntax-dispatch bl3898@t '(any . each-any)))) (if bl389a@ls/false (apply (lambda (bl389c@e bl389d@e*) (list 'if bl389c@e (cons 'begin bl389d@e*) (bl385e@f (car bl385b@cls*) (cdr bl385b@cls*)))) bl389a@ls/false) (let ((bl38a0@t bl3898@t)) (let ((bl38a2@ls/false (bl30f9@syntax-dispatch bl38a0@t '_))) (if bl38a2@ls/false (apply (lambda () (bl31d9@syntax-violation '#f '"invalid last clause" bl3850@stx)) bl38a2@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl38a0@t)))))))))))))))))))) bl3854@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3852@t)))))) (set! bl4bf7@bl30dd@cond-macro bl30dd@cond-macro) (set! bl30df@do-include (lambda (bl38a4@stx bl38a5@id bl38a6@filename) (let ((bl38aa@filename (bl2f06@stx->datum bl38a6@filename))) (begin (if (not (and (string? bl38aa@filename) (bl2ef2@id? bl38a5@id))) (bl31d9@syntax-violation '#f '"invalid syntax" bl38a4@stx) (void)) (cons (bl30af@bless 'begin) (with-input-from-file bl38aa@filename (lambda () (let bl38ae@f ((bl38ac@ls '())) (let ((bl38b0@x (bl2a34@bl2904@read-annotated))) (if (eof-object? bl38b0@x) (reverse bl38ac@ls) (bl38ae@f (cons (bl2ed2@datum->stx bl38a5@id bl38b0@x) bl38ac@ls)))))))))))) (set! bl4bf8@bl30df@do-include bl30df@do-include) (set! bl30e1@include-macro (lambda (bl38b2@e) (let ((bl38b4@t bl38b2@e)) (let ((bl38b6@ls/false (bl30f9@syntax-dispatch bl38b4@t '(any any)))) (if bl38b6@ls/false (apply (lambda (bl38b8@id bl38b9@filename) (bl30df@do-include bl38b2@e bl38b8@id bl38b9@filename)) bl38b6@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl38b4@t)))))) (set! bl4bf9@bl30e1@include-macro bl30e1@include-macro) (set! bl30e3@include-into-macro (lambda (bl38bc@e) (let ((bl38be@t bl38bc@e)) (let ((bl38c0@ls/false (bl30f9@syntax-dispatch bl38be@t '(_ any any)))) (if bl38c0@ls/false (apply (lambda (bl38c2@id bl38c3@filename) (bl30df@do-include bl38bc@e bl38c2@id bl38c3@filename)) bl38c0@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl38be@t)))))) (set! bl4bfa@bl30e3@include-into-macro bl30e3@include-into-macro) (set! bl30e5@syntax-rules-macro (lambda (bl38c6@e) (let ((bl38c8@t bl38c6@e)) (let ((bl38ca@ls/false (bl30f9@syntax-dispatch bl38c8@t '(_ each-any . #(each (any any)))))) (if bl38ca@ls/false (apply (lambda (bl38cc@lits bl38cd@pat* bl38ce@tmp*) (begin (bl30ff@verify-literals bl38cc@lits bl38c6@e) (bl30af@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons bl38cc@lits (map (lambda (bl38d2@pat bl38d3@tmp) (let ((bl38d6@t bl38d2@pat)) (let ((bl38d8@ls/false (bl30f9@syntax-dispatch bl38d6@t '(_ . any)))) (if bl38d8@ls/false (apply (lambda (bl38da@rest) (list (cons 'g bl38da@rest) (list 'syntax bl38d3@tmp))) bl38d8@ls/false) (let ((bl38dc@t bl38d6@t)) (let ((bl38de@ls/false (bl30f9@syntax-dispatch bl38dc@t '_))) (if bl38de@ls/false (apply (lambda () (bl31d9@syntax-violation '#f '"invalid syntax-rules pattern" bl38c6@e bl38d2@pat)) bl38de@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl38dc@t)))))))) bl38cd@pat* bl38ce@tmp*)))))))) bl38ca@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl38c8@t)))))) (set! bl4bfb@bl30e5@syntax-rules-macro bl30e5@syntax-rules-macro) (set! bl30e7@quasiquote-macro (letrec* ((bl38e1@datum (lambda (bl39e2@x) (list (bl3081@scheme-stx 'quote) (bl2eda@mkstx bl39e2@x bl2e76@top-mark* '() '())))) (bl38fd@quasicons* (lambda (bl39da@x bl39db@y) (let bl39e0@f ((bl39de@x bl39da@x)) (if (null? bl39de@x) bl39db@y (bl38ff@quasicons (car bl39de@x) (bl39e0@f (cdr bl39de@x))))))) (bl38ff@quasicons (lambda (bl39b4@x bl39b5@y) (let ((bl39b8@t bl39b5@y)) (let ((bl39ba@ls/false (bl30f9@syntax-dispatch bl39b8@t '(#(scheme-id quote) any)))) (if bl39ba@ls/false (apply (lambda (bl39bc@dy) (let ((bl39be@t bl39b4@x)) (let ((bl39c0@ls/false (bl30f9@syntax-dispatch bl39be@t '(#(scheme-id quote) any)))) (if bl39c0@ls/false (apply (lambda (bl39c2@dx) (list (bl3081@scheme-stx 'quote) (cons bl39c2@dx bl39bc@dy))) bl39c0@ls/false) (let ((bl39c4@t bl39be@t)) (let ((bl39c6@ls/false (bl30f9@syntax-dispatch bl39c4@t '_))) (if bl39c6@ls/false (apply (lambda () (let ((bl39c8@t bl39bc@dy)) (let ((bl39ca@ls/false (bl30f9@syntax-dispatch bl39c8@t '()))) (if bl39ca@ls/false (apply (lambda () (list (bl3081@scheme-stx 'list) bl39b4@x)) bl39ca@ls/false) (let ((bl39cc@t bl39c8@t)) (let ((bl39ce@ls/false (bl30f9@syntax-dispatch bl39cc@t '_))) (if bl39ce@ls/false (apply (lambda () (list (bl3081@scheme-stx 'cons) bl39b4@x bl39b5@y)) bl39ce@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl39cc@t)))))))) bl39c6@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl39c4@t)))))))) bl39ba@ls/false) (let ((bl39d0@t bl39b8@t)) (let ((bl39d2@ls/false (bl30f9@syntax-dispatch bl39d0@t '(#(scheme-id list) . each-any)))) (if bl39d2@ls/false (apply (lambda (bl39d4@stuff) (cons* (bl3081@scheme-stx 'list) bl39b4@x bl39d4@stuff)) bl39d2@ls/false) (let ((bl39d6@t bl39d0@t)) (let ((bl39d8@ls/false (bl30f9@syntax-dispatch bl39d6@t '_))) (if bl39d8@ls/false (apply (lambda () (list (bl3081@scheme-stx 'cons) bl39b4@x bl39b5@y)) bl39d8@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl39d6@t)))))))))))) (bl3901@quasiappend (lambda (bl399a@x bl399b@y) (let ((bl399e@ls (let bl39a2@f ((bl39a0@x bl399a@x)) (if (null? bl39a0@x) (let ((bl39a4@t bl399b@y)) (let ((bl39a6@ls/false (bl30f9@syntax-dispatch bl39a4@t '(#(scheme-id quote) ())))) (if bl39a6@ls/false (apply (lambda () '()) bl39a6@ls/false) (let ((bl39a8@t bl39a4@t)) (let ((bl39aa@ls/false (bl30f9@syntax-dispatch bl39a8@t '_))) (if bl39aa@ls/false (apply (lambda () (list bl399b@y)) bl39aa@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl39a8@t))))))) (let ((bl39ac@t (car bl39a0@x))) (let ((bl39ae@ls/false (bl30f9@syntax-dispatch bl39ac@t '(#(scheme-id quote) ())))) (if bl39ae@ls/false (apply (lambda () (bl39a2@f (cdr bl39a0@x))) bl39ae@ls/false) (let ((bl39b0@t bl39ac@t)) (let ((bl39b2@ls/false (bl30f9@syntax-dispatch bl39b0@t '_))) (if bl39b2@ls/false (apply (lambda () (cons (car bl39a0@x) (bl39a2@f (cdr bl39a0@x)))) bl39b2@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl39b0@t))))))))))) (if (null? bl399e@ls) (list (bl3081@scheme-stx 'quote) '()) (if (null? (cdr bl399e@ls)) (car bl399e@ls) (cons* (bl3081@scheme-stx 'append) bl399e@ls)))))) (bl3903@quasivector (lambda (bl3968@x) (let ((bl396a@pat-x bl3968@x)) (let ((bl396c@t bl396a@pat-x)) (let ((bl396e@ls/false (bl30f9@syntax-dispatch bl396c@t '(#(scheme-id quote) each-any)))) (if bl396e@ls/false (apply (lambda (bl3970@x*) (list (bl3081@scheme-stx 'quote) (list->vector bl3970@x*))) bl396e@ls/false) (let ((bl3972@t bl396c@t)) (let ((bl3974@ls/false (bl30f9@syntax-dispatch bl3972@t '_))) (if bl3974@ls/false (apply (lambda () (let bl397c@f ((bl3976@x bl3968@x) (bl3977@k (lambda (bl397a@ls) (cons* (bl3081@scheme-stx 'vector) bl397a@ls)))) (let ((bl397e@t bl3976@x)) (let ((bl3980@ls/false (bl30f9@syntax-dispatch bl397e@t '(#(scheme-id quote) each-any)))) (if bl3980@ls/false (apply (lambda (bl3982@x*) (bl3977@k (map (lambda (bl3984@x) (list (bl3081@scheme-stx 'quote) bl3984@x)) bl3982@x*))) bl3980@ls/false) (let ((bl3986@t bl397e@t)) (let ((bl3988@ls/false (bl30f9@syntax-dispatch bl3986@t '(#(scheme-id list) . each-any)))) (if bl3988@ls/false (apply (lambda (bl398a@x*) (bl3977@k bl398a@x*)) bl3988@ls/false) (let ((bl398c@t bl3986@t)) (let ((bl398e@ls/false (bl30f9@syntax-dispatch bl398c@t '(#(scheme-id cons) any any)))) (if bl398e@ls/false (apply (lambda (bl3990@x bl3991@y) (bl397c@f bl3991@y (lambda (bl3994@ls) (bl3977@k (cons bl3990@x bl3994@ls))))) bl398e@ls/false) (let ((bl3996@t bl398c@t)) (let ((bl3998@ls/false (bl30f9@syntax-dispatch bl3996@t '_))) (if bl3998@ls/false (apply (lambda () (list (bl3081@scheme-stx 'list->vector) bl396a@pat-x)) bl3998@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3996@t))))))))))))))) bl3974@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3972@t)))))))))) (bl3905@vquasi (lambda (bl3946@p bl3947@lev) (let ((bl394a@t bl3946@p)) (let ((bl394c@ls/false (bl30f9@syntax-dispatch bl394a@t '(any . any)))) (if bl394c@ls/false (apply (lambda (bl394e@p bl394f@q) (let ((bl3952@t bl394e@p)) (let ((bl3954@ls/false (bl30f9@syntax-dispatch bl3952@t '(#(scheme-id unquote) . each-any)))) (if bl3954@ls/false (apply (lambda (bl3956@p) (if (= bl3947@lev '0) (bl38fd@quasicons* bl3956@p (bl3905@vquasi bl394f@q bl3947@lev)) (bl38ff@quasicons (bl38ff@quasicons (bl38e1@datum 'unquote) (bl3907@quasi bl3956@p (- bl3947@lev '1))) (bl3905@vquasi bl394f@q bl3947@lev)))) bl3954@ls/false) (let ((bl3958@t bl3952@t)) (let ((bl395a@ls/false (bl30f9@syntax-dispatch bl3958@t '(#(scheme-id unquote-splicing) . each-any)))) (if bl395a@ls/false (apply (lambda (bl395c@p) (if (= bl3947@lev '0) (bl3901@quasiappend bl395c@p (bl3905@vquasi bl394f@q bl3947@lev)) (bl38ff@quasicons (bl38ff@quasicons (bl38e1@datum 'unquote-splicing) (bl3907@quasi bl395c@p (- bl3947@lev '1))) (bl3905@vquasi bl394f@q bl3947@lev)))) bl395a@ls/false) (let ((bl395e@t bl3958@t)) (let ((bl3960@ls/false (bl30f9@syntax-dispatch bl395e@t 'any))) (if bl3960@ls/false (apply (lambda (bl3962@p) (bl38ff@quasicons (bl3907@quasi bl3962@p bl3947@lev) (bl3905@vquasi bl394f@q bl3947@lev))) bl3960@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl395e@t))))))))))) bl394c@ls/false) (let ((bl3964@t bl394a@t)) (let ((bl3966@ls/false (bl30f9@syntax-dispatch bl3964@t '()))) (if bl3966@ls/false (apply (lambda () (list (bl3081@scheme-stx 'quote) '())) bl3966@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3964@t))))))))) (bl3907@quasi (lambda (bl3910@p bl3911@lev) (let ((bl3914@t bl3910@p)) (let ((bl3916@ls/false (bl30f9@syntax-dispatch bl3914@t '(#(scheme-id unquote) any)))) (if bl3916@ls/false (apply (lambda (bl3918@p) (if (= bl3911@lev '0) bl3918@p (bl38ff@quasicons (bl38e1@datum 'unquote) (bl3907@quasi (list bl3918@p) (- bl3911@lev '1))))) bl3916@ls/false) (let ((bl391a@t bl3914@t)) (let ((bl391c@ls/false (bl30f9@syntax-dispatch bl391a@t '((#(scheme-id unquote) . each-any) . any)))) (if bl391c@ls/false (apply (lambda (bl391e@p bl391f@q) (if (= bl3911@lev '0) (bl38fd@quasicons* bl391e@p (bl3907@quasi bl391f@q bl3911@lev)) (bl38ff@quasicons (bl38ff@quasicons (bl38e1@datum 'unquote) (bl3907@quasi bl391e@p (- bl3911@lev '1))) (bl3907@quasi bl391f@q bl3911@lev)))) bl391c@ls/false) (let ((bl3922@t bl391a@t)) (let ((bl3924@ls/false (bl30f9@syntax-dispatch bl3922@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if bl3924@ls/false (apply (lambda (bl3926@p bl3927@q) (if (= bl3911@lev '0) (bl3901@quasiappend bl3926@p (bl3907@quasi bl3927@q bl3911@lev)) (bl38ff@quasicons (bl38ff@quasicons (bl38e1@datum 'unquote-splicing) (bl3907@quasi bl3926@p (- bl3911@lev '1))) (bl3907@quasi bl3927@q bl3911@lev)))) bl3924@ls/false) (let ((bl392a@t bl3922@t)) (let ((bl392c@ls/false (bl30f9@syntax-dispatch bl392a@t '(#(scheme-id quasiquote) any)))) (if bl392c@ls/false (apply (lambda (bl392e@p) (bl38ff@quasicons (bl38e1@datum 'quasiquote) (bl3907@quasi (list bl392e@p) (+ bl3911@lev '1)))) bl392c@ls/false) (let ((bl3930@t bl392a@t)) (let ((bl3932@ls/false (bl30f9@syntax-dispatch bl3930@t '(any . any)))) (if bl3932@ls/false (apply (lambda (bl3934@p bl3935@q) (bl38ff@quasicons (bl3907@quasi bl3934@p bl3911@lev) (bl3907@quasi bl3935@q bl3911@lev))) bl3932@ls/false) (let ((bl3938@t bl3930@t)) (let ((bl393a@ls/false (bl30f9@syntax-dispatch bl3938@t '#(vector each-any)))) (if (and bl393a@ls/false (apply (lambda (bl393c@x) (not (bl2ebe@stx? bl393c@x))) bl393a@ls/false)) (apply (lambda (bl393e@x) (bl3903@quasivector (bl3905@vquasi bl393e@x bl3911@lev))) bl393a@ls/false) (let ((bl3940@t bl3938@t)) (let ((bl3942@ls/false (bl30f9@syntax-dispatch bl3940@t 'any))) (if bl3942@ls/false (apply (lambda (bl3944@p) (list (bl3081@scheme-stx 'quote) bl3944@p)) bl3942@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3940@t))))))))))))))))))))))))) (lambda (bl3908@x) (let ((bl390a@t bl3908@x)) (let ((bl390c@ls/false (bl30f9@syntax-dispatch bl390a@t '(_ any)))) (if bl390c@ls/false (apply (lambda (bl390e@e) (bl3907@quasi bl390e@e '0)) bl390c@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl390a@t))))))) (set! bl4bfc@bl30e7@quasiquote-macro bl30e7@quasiquote-macro) (set! bl30e9@quasisyntax-macro (letrec* ((bl39e5@quasi (lambda (bl3a00@p bl3a01@lev) (let ((bl3a04@t bl3a00@p)) (let ((bl3a06@ls/false (bl30f9@syntax-dispatch bl3a04@t '(#(scheme-id unsyntax) any)))) (if bl3a06@ls/false (apply (lambda (bl3a08@p) (if (= bl3a01@lev '0) (let ((bl3a0a@g (gensym))) (values (list bl3a0a@g) (list bl3a08@p) bl3a0a@g)) (call-with-values (lambda () (bl39e5@quasi bl3a08@p (- bl3a01@lev '1))) (lambda (bl3a12@bl3a0d bl3a13@bl3a0f bl3a14@bl3a11) (let ((bl3a18@p bl3a14@bl3a11) (bl3a19@rhs* bl3a13@bl3a0f) (bl3a1a@lhs* bl3a12@bl3a0d)) (values bl3a1a@lhs* bl3a19@rhs* (list 'unsyntax bl3a18@p))))))) bl3a06@ls/false) (let ((bl3a1e@t bl3a04@t)) (let ((bl3a20@ls/false (bl30f9@syntax-dispatch bl3a1e@t '#(scheme-id unsyntax)))) (if (and bl3a20@ls/false (apply (lambda () (= bl3a01@lev '0)) bl3a20@ls/false)) (apply (lambda () (bl31d9@syntax-violation '#f '"incorrect use of unsyntax" bl3a00@p)) bl3a20@ls/false) (let ((bl3a22@t bl3a1e@t)) (let ((bl3a24@ls/false (bl30f9@syntax-dispatch bl3a22@t '((#(scheme-id unsyntax) . each-any) . any)))) (if bl3a24@ls/false (apply (lambda (bl3a26@p* bl3a27@q) (call-with-values (lambda () (bl39e5@quasi bl3a27@q bl3a01@lev)) (lambda (bl3a30@bl3a2b bl3a31@bl3a2d bl3a32@bl3a2f) (let ((bl3a36@q bl3a32@bl3a2f) (bl3a37@rhs* bl3a31@bl3a2d) (bl3a38@lhs* bl3a30@bl3a2b)) (if (= bl3a01@lev '0) (let ((bl3a3c@g* (map (lambda (bl3a3e@x) (gensym)) bl3a26@p*))) (values (append bl3a3c@g* bl3a38@lhs*) (append bl3a26@p* bl3a37@rhs*) (append bl3a3c@g* bl3a36@q))) (call-with-values (lambda () (bl39e5@quasi bl3a26@p* (- bl3a01@lev '1))) (lambda (bl3a46@bl3a41 bl3a47@bl3a43 bl3a48@bl3a45) (let ((bl3a4c@p* bl3a48@bl3a45) (bl3a4d@rhs2* bl3a47@bl3a43) (bl3a4e@lhs2* bl3a46@bl3a41)) (values (append bl3a4e@lhs2* bl3a38@lhs*) (append bl3a4d@rhs2* bl3a37@rhs*) (cons (cons 'unsyntax bl3a4c@p*) bl3a36@q)))))))))) bl3a24@ls/false) (let ((bl3a52@t bl3a22@t)) (let ((bl3a54@ls/false (bl30f9@syntax-dispatch bl3a52@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if bl3a54@ls/false (apply (lambda (bl3a56@p* bl3a57@q) (call-with-values (lambda () (bl39e5@quasi bl3a57@q bl3a01@lev)) (lambda (bl3a60@bl3a5b bl3a61@bl3a5d bl3a62@bl3a5f) (let ((bl3a66@q bl3a62@bl3a5f) (bl3a67@rhs* bl3a61@bl3a5d) (bl3a68@lhs* bl3a60@bl3a5b)) (if (= bl3a01@lev '0) (let ((bl3a6c@g* (map (lambda (bl3a6e@x) (gensym)) bl3a56@p*))) (values (append (map (lambda (bl3a70@g) (cons bl3a70@g '(...))) bl3a6c@g*) bl3a68@lhs*) (append bl3a56@p* bl3a67@rhs*) (append (apply append (map (lambda (bl3a72@g) (cons bl3a72@g '(...))) bl3a6c@g*)) bl3a66@q))) (call-with-values (lambda () (bl39e5@quasi bl3a56@p* (- bl3a01@lev '1))) (lambda (bl3a7a@bl3a75 bl3a7b@bl3a77 bl3a7c@bl3a79) (let ((bl3a80@p* bl3a7c@bl3a79) (bl3a81@rhs2* bl3a7b@bl3a77) (bl3a82@lhs2* bl3a7a@bl3a75)) (values (append bl3a82@lhs2* bl3a68@lhs*) (append bl3a81@rhs2* bl3a67@rhs*) (cons (cons 'unsyntax-splicing bl3a80@p*) bl3a66@q)))))))))) bl3a54@ls/false) (let ((bl3a86@t bl3a52@t)) (let ((bl3a88@ls/false (bl30f9@syntax-dispatch bl3a86@t '#(scheme-id unsyntax-splicing)))) (if (and bl3a88@ls/false (apply (lambda () (= bl3a01@lev '0)) bl3a88@ls/false)) (apply (lambda () (bl31d9@syntax-violation '#f '"incorrect use of unsyntax-splicing" bl3a00@p)) bl3a88@ls/false) (let ((bl3a8a@t bl3a86@t)) (let ((bl3a8c@ls/false (bl30f9@syntax-dispatch bl3a8a@t '(#(scheme-id quasisyntax) any)))) (if bl3a8c@ls/false (apply (lambda (bl3a8e@p) (call-with-values (lambda () (bl39e5@quasi bl3a8e@p (+ bl3a01@lev '1))) (lambda (bl3a96@bl3a91 bl3a97@bl3a93 bl3a98@bl3a95) (let ((bl3a9c@p bl3a98@bl3a95) (bl3a9d@rhs* bl3a97@bl3a93) (bl3a9e@lhs* bl3a96@bl3a91)) (values bl3a9e@lhs* bl3a9d@rhs* (list 'quasisyntax bl3a9c@p)))))) bl3a8c@ls/false) (let ((bl3aa2@t bl3a8a@t)) (let ((bl3aa4@ls/false (bl30f9@syntax-dispatch bl3aa2@t '(any . any)))) (if bl3aa4@ls/false (apply (lambda (bl3aa6@p bl3aa7@q) (call-with-values (lambda () (bl39e5@quasi bl3aa6@p bl3a01@lev)) (lambda (bl3ab6@bl3aab bl3ab7@bl3aad bl3ab8@bl3aaf) (call-with-values (lambda () (bl39e5@quasi bl3aa7@q bl3a01@lev)) (lambda (bl3abc@bl3ab1 bl3abd@bl3ab3 bl3abe@bl3ab5) (let ((bl3ac2@q bl3abe@bl3ab5) (bl3ac3@rhs2* bl3abd@bl3ab3) (bl3ac4@lhs2* bl3abc@bl3ab1) (bl3ac5@p bl3ab8@bl3aaf) (bl3ac6@rhs* bl3ab7@bl3aad) (bl3ac7@lhs* bl3ab6@bl3aab)) (values (append bl3ac4@lhs2* bl3ac7@lhs*) (append bl3ac3@rhs2* bl3ac6@rhs*) (cons bl3ac5@p bl3ac2@q)))))))) bl3aa4@ls/false) (let ((bl3ace@t bl3aa2@t)) (let ((bl3ad0@ls/false (bl30f9@syntax-dispatch bl3ace@t '#(vector each-any)))) (if bl3ad0@ls/false (apply (lambda (bl3ad2@x*) (call-with-values (lambda () (bl39e5@quasi bl3ad2@x* bl3a01@lev)) (lambda (bl3ada@bl3ad5 bl3adb@bl3ad7 bl3adc@bl3ad9) (let ((bl3ae0@x* bl3adc@bl3ad9) (bl3ae1@rhs* bl3adb@bl3ad7) (bl3ae2@lhs* bl3ada@bl3ad5)) (values bl3ae2@lhs* bl3ae1@rhs* (list->vector bl3ae0@x*)))))) bl3ad0@ls/false) (let ((bl3ae6@t bl3ace@t)) (let ((bl3ae8@ls/false (bl30f9@syntax-dispatch bl3ae6@t '_))) (if bl3ae8@ls/false (apply (lambda () (values '() '() bl3a00@p)) bl3ae8@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3ae6@t))))))))))))))))))))))))))))))) (lambda (bl39e6@x) (let ((bl39e8@t bl39e6@x)) (let ((bl39ea@ls/false (bl30f9@syntax-dispatch bl39e8@t '(_ any)))) (if bl39ea@ls/false (apply (lambda (bl39ec@e) (call-with-values (lambda () (bl39e5@quasi bl39ec@e '0)) (lambda (bl39f4@bl39ef bl39f5@bl39f1 bl39f6@bl39f3) (let ((bl39fa@v bl39f6@bl39f3) (bl39fb@rhs* bl39f5@bl39f1) (bl39fc@lhs* bl39f4@bl39ef)) (bl30af@bless (list 'syntax-case (cons 'list bl39fb@rhs*) '() (list bl39fc@lhs* (list 'syntax bl39fa@v)))))))) bl39ea@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl39e8@t))))))) (set! bl4bfd@bl30e9@quasisyntax-macro bl30e9@quasisyntax-macro) (set! bl30eb@define-struct-macro (lambda (bl3aea@stx) (bl31d9@syntax-violation '#f '"define-struct not supported" bl3aea@stx))) (set! bl4bfe@bl30eb@define-struct-macro bl30eb@define-struct-macro) (set! bl30ed@define-record-type-macro (lambda (bl3aec@x) (letrec* ((bl3aef@id (lambda (bl3ce2@ctxt . bl3ce4@str*) (bl31dd@datum->syntax bl3ce2@ctxt (string->symbol (apply string-append (map (lambda (bl3ce6@x) (if (symbol? bl3ce6@x) (symbol->string bl3ce6@x) (if (string? bl3ce6@x) bl3ce6@x (assertion-violation 'define-record-type '"BUG")))) bl3ce4@str*)))))) (bl3af1@get-record-name (lambda (bl3cd0@spec) (let ((bl3cd2@t bl3cd0@spec)) (let ((bl3cd4@ls/false (bl30f9@syntax-dispatch bl3cd2@t '(any any any)))) (if bl3cd4@ls/false (apply (lambda (bl3cd6@foo bl3cd7@make-foo bl3cd8@foo?) bl3cd6@foo) bl3cd4@ls/false) (let ((bl3cdc@t bl3cd2@t)) (let ((bl3cde@ls/false (bl30f9@syntax-dispatch bl3cdc@t 'any))) (if bl3cde@ls/false (apply (lambda (bl3ce0@foo) bl3ce0@foo) bl3cde@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3cdc@t))))))))) (bl3af3@get-record-constructor-name (lambda (bl3cbc@spec) (let ((bl3cbe@t bl3cbc@spec)) (let ((bl3cc0@ls/false (bl30f9@syntax-dispatch bl3cbe@t '(any any any)))) (if bl3cc0@ls/false (apply (lambda (bl3cc2@foo bl3cc3@make-foo bl3cc4@foo?) bl3cc3@make-foo) bl3cc0@ls/false) (let ((bl3cc8@t bl3cbe@t)) (let ((bl3cca@ls/false (bl30f9@syntax-dispatch bl3cc8@t 'any))) (if (and bl3cca@ls/false (apply (lambda (bl3ccc@foo) (bl2ef2@id? bl3ccc@foo)) bl3cca@ls/false)) (apply (lambda (bl3cce@foo) (bl3aef@id bl3cce@foo '"make-" (bl2f06@stx->datum bl3cce@foo))) bl3cca@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3cc8@t))))))))) (bl3af5@get-record-predicate-name (lambda (bl3ca8@spec) (let ((bl3caa@t bl3ca8@spec)) (let ((bl3cac@ls/false (bl30f9@syntax-dispatch bl3caa@t '(any any any)))) (if bl3cac@ls/false (apply (lambda (bl3cae@foo bl3caf@make-foo bl3cb0@foo?) bl3cb0@foo?) bl3cac@ls/false) (let ((bl3cb4@t bl3caa@t)) (let ((bl3cb6@ls/false (bl30f9@syntax-dispatch bl3cb4@t 'any))) (if (and bl3cb6@ls/false (apply (lambda (bl3cb8@foo) (bl2ef2@id? bl3cb8@foo)) bl3cb6@ls/false)) (apply (lambda (bl3cba@foo) (bl3aef@id bl3cba@foo (bl2f06@stx->datum bl3cba@foo) '"?")) bl3cb6@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3cb4@t))))))))) (bl3af7@get-clause (lambda (bl3c96@id bl3c97@ls) (let ((bl3c9a@t bl3c97@ls)) (let ((bl3c9c@ls/false (bl30f9@syntax-dispatch bl3c9a@t '()))) (if bl3c9c@ls/false (apply (lambda () '#f) bl3c9c@ls/false) (let ((bl3c9e@t bl3c9a@t)) (let ((bl3ca0@ls/false (bl30f9@syntax-dispatch bl3c9e@t '((any . any) . any)))) (if bl3ca0@ls/false (apply (lambda (bl3ca2@x bl3ca3@rest bl3ca4@ls) (if (bl2ef8@free-id=? (bl30af@bless bl3c96@id) bl3ca2@x) (cons bl3ca2@x bl3ca3@rest) (bl3af7@get-clause bl3c96@id bl3ca4@ls))) bl3ca0@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3c9e@t))))))))) (bl3af9@foo-rtd-code (lambda (bl3c44@name bl3c45@clause* bl3c46@parent-rtd-code) (letrec* ((bl3c4b@convert-field-spec* (lambda (bl3c7c@ls) (list->vector (map (lambda (bl3c7e@x) (let ((bl3c80@t bl3c7e@x)) (let ((bl3c82@ls/false (bl30f9@syntax-dispatch bl3c80@t '(#(scheme-id mutable) any . any)))) (if bl3c82@ls/false (apply (lambda (bl3c84@name bl3c85@rest) (list 'mutable bl3c84@name)) bl3c82@ls/false) (let ((bl3c88@t bl3c80@t)) (let ((bl3c8a@ls/false (bl30f9@syntax-dispatch bl3c88@t '(#(scheme-id immutable) any . any)))) (if bl3c8a@ls/false (apply (lambda (bl3c8c@name bl3c8d@rest) (list 'immutable bl3c8c@name)) bl3c8a@ls/false) (let ((bl3c90@t bl3c88@t)) (let ((bl3c92@ls/false (bl30f9@syntax-dispatch bl3c90@t 'any))) (if bl3c92@ls/false (apply (lambda (bl3c94@name) (list 'immutable bl3c94@name)) bl3c92@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3c90@t))))))))))) bl3c7c@ls))))) (let ((bl3c4c@uid-code (let ((bl3c54@t (bl3af7@get-clause 'nongenerative bl3c45@clause*))) (let ((bl3c56@ls/false (bl30f9@syntax-dispatch bl3c54@t '(_)))) (if bl3c56@ls/false (apply (lambda () (list 'quote (gensym))) bl3c56@ls/false) (let ((bl3c58@t bl3c54@t)) (let ((bl3c5a@ls/false (bl30f9@syntax-dispatch bl3c58@t '(_ any)))) (if bl3c5a@ls/false (apply (lambda (bl3c5c@uid) (list 'quote bl3c5c@uid)) bl3c5a@ls/false) (let ((bl3c5e@t bl3c58@t)) (let ((bl3c60@ls/false (bl30f9@syntax-dispatch bl3c5e@t '_))) (if bl3c60@ls/false (apply (lambda () '#f) bl3c60@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3c5e@t))))))))))) (bl3c4d@sealed? (let ((bl3c62@t (bl3af7@get-clause 'sealed bl3c45@clause*))) (let ((bl3c64@ls/false (bl30f9@syntax-dispatch bl3c62@t '(_ #(atom #t))))) (if bl3c64@ls/false (apply (lambda () '#t) bl3c64@ls/false) (let ((bl3c66@t bl3c62@t)) (let ((bl3c68@ls/false (bl30f9@syntax-dispatch bl3c66@t '_))) (if bl3c68@ls/false (apply (lambda () '#f) bl3c68@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3c66@t)))))))) (bl3c4e@opaque? (let ((bl3c6a@t (bl3af7@get-clause 'opaque bl3c45@clause*))) (let ((bl3c6c@ls/false (bl30f9@syntax-dispatch bl3c6a@t '(_ #(atom #t))))) (if bl3c6c@ls/false (apply (lambda () '#t) bl3c6c@ls/false) (let ((bl3c6e@t bl3c6a@t)) (let ((bl3c70@ls/false (bl30f9@syntax-dispatch bl3c6e@t '_))) (if bl3c70@ls/false (apply (lambda () '#f) bl3c70@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3c6e@t)))))))) (bl3c4f@fields (let ((bl3c72@t (bl3af7@get-clause 'fields bl3c45@clause*))) (let ((bl3c74@ls/false (bl30f9@syntax-dispatch bl3c72@t '(_ . each-any)))) (if bl3c74@ls/false (apply (lambda (bl3c76@field-spec*) (list 'quote (bl3c4b@convert-field-spec* bl3c76@field-spec*))) bl3c74@ls/false) (let ((bl3c78@t bl3c72@t)) (let ((bl3c7a@ls/false (bl30f9@syntax-dispatch bl3c78@t '_))) (if bl3c7a@ls/false (apply (lambda () ''#()) bl3c7a@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3c78@t))))))))) (bl30af@bless (list 'make-record-type-descriptor (list 'quote bl3c44@name) bl3c46@parent-rtd-code bl3c4c@uid-code bl3c4d@sealed? bl3c4e@opaque? bl3c4f@fields)))))) (bl3afb@parent-rtd-code (lambda (bl3c2c@clause*) (let ((bl3c2e@t (bl3af7@get-clause 'parent bl3c2c@clause*))) (let ((bl3c30@ls/false (bl30f9@syntax-dispatch bl3c2e@t '(_ any)))) (if bl3c30@ls/false (apply (lambda (bl3c32@name) (list 'record-type-descriptor bl3c32@name)) bl3c30@ls/false) (let ((bl3c34@t bl3c2e@t)) (let ((bl3c36@ls/false (bl30f9@syntax-dispatch bl3c34@t '#(atom #f)))) (if bl3c36@ls/false (apply (lambda () (let ((bl3c38@t (bl3af7@get-clause 'parent-rtd bl3c2c@clause*))) (let ((bl3c3a@ls/false (bl30f9@syntax-dispatch bl3c38@t '(_ any any)))) (if bl3c3a@ls/false (apply (lambda (bl3c3c@rtd bl3c3d@rcd) bl3c3c@rtd) bl3c3a@ls/false) (let ((bl3c40@t bl3c38@t)) (let ((bl3c42@ls/false (bl30f9@syntax-dispatch bl3c40@t '#(atom #f)))) (if bl3c42@ls/false (apply (lambda () '#f) bl3c42@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3c40@t)))))))) bl3c36@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3c34@t))))))))) (bl3afd@parent-rcd-code (lambda (bl3c14@clause*) (let ((bl3c16@t (bl3af7@get-clause 'parent bl3c14@clause*))) (let ((bl3c18@ls/false (bl30f9@syntax-dispatch bl3c16@t '(_ any)))) (if bl3c18@ls/false (apply (lambda (bl3c1a@name) (list 'record-constructor-descriptor bl3c1a@name)) bl3c18@ls/false) (let ((bl3c1c@t bl3c16@t)) (let ((bl3c1e@ls/false (bl30f9@syntax-dispatch bl3c1c@t '#(atom #f)))) (if bl3c1e@ls/false (apply (lambda () (let ((bl3c20@t (bl3af7@get-clause 'parent-rtd bl3c14@clause*))) (let ((bl3c22@ls/false (bl30f9@syntax-dispatch bl3c20@t '(_ any any)))) (if bl3c22@ls/false (apply (lambda (bl3c24@rtd bl3c25@rcd) bl3c25@rcd) bl3c22@ls/false) (let ((bl3c28@t bl3c20@t)) (let ((bl3c2a@ls/false (bl30f9@syntax-dispatch bl3c28@t '#(atom #f)))) (if bl3c2a@ls/false (apply (lambda () '#f) bl3c2a@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3c28@t)))))))) bl3c1e@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3c1c@t))))))))) (bl3aff@foo-rcd-code (lambda (bl3c0c@clause* bl3c0d@foo-rtd bl3c0e@protocol bl3c0f@parent-rcd-code) (list 'make-record-constructor-descriptor bl3c0d@foo-rtd bl3c0f@parent-rcd-code bl3c0e@protocol))) (bl3b01@get-protocol-code (lambda (bl3c00@clause*) (let ((bl3c02@t (bl3af7@get-clause 'protocol bl3c00@clause*))) (let ((bl3c04@ls/false (bl30f9@syntax-dispatch bl3c02@t '(_ any)))) (if bl3c04@ls/false (apply (lambda (bl3c06@expr) bl3c06@expr) bl3c04@ls/false) (let ((bl3c08@t bl3c02@t)) (let ((bl3c0a@ls/false (bl30f9@syntax-dispatch bl3c08@t '_))) (if bl3c0a@ls/false (apply (lambda () '#f) bl3c0a@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3c08@t))))))))) (bl3b03@get-fields (lambda (bl3bee@clause*) (let ((bl3bf0@t bl3bee@clause*)) (let ((bl3bf2@ls/false (bl30f9@syntax-dispatch bl3bf0@t '()))) (if bl3bf2@ls/false (apply (lambda () '()) bl3bf2@ls/false) (let ((bl3bf4@t bl3bf0@t)) (let ((bl3bf6@ls/false (bl30f9@syntax-dispatch bl3bf4@t '((#(scheme-id fields) . each-any) . _)))) (if bl3bf6@ls/false (apply (lambda (bl3bf8@f*) bl3bf8@f*) bl3bf6@ls/false) (let ((bl3bfa@t bl3bf4@t)) (let ((bl3bfc@ls/false (bl30f9@syntax-dispatch bl3bfa@t '(_ . any)))) (if bl3bfc@ls/false (apply (lambda (bl3bfe@rest) (bl3b03@get-fields bl3bfe@rest)) bl3bfc@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3bfa@t)))))))))))) (bl3b05@get-mutator-indices (lambda (bl3bd6@fields) (let bl3bdc@f ((bl3bd8@fields bl3bd6@fields) (bl3bd9@i '0)) (let ((bl3bde@t bl3bd8@fields)) (let ((bl3be0@ls/false (bl30f9@syntax-dispatch bl3bde@t '()))) (if bl3be0@ls/false (apply (lambda () '()) bl3be0@ls/false) (let ((bl3be2@t bl3bde@t)) (let ((bl3be4@ls/false (bl30f9@syntax-dispatch bl3be2@t '((#(scheme-id mutable) . _) . any)))) (if bl3be4@ls/false (apply (lambda (bl3be6@rest) (cons bl3bd9@i (bl3bdc@f bl3be6@rest (+ bl3bd9@i '1)))) bl3be4@ls/false) (let ((bl3be8@t bl3be2@t)) (let ((bl3bea@ls/false (bl30f9@syntax-dispatch bl3be8@t '(_ . any)))) (if bl3bea@ls/false (apply (lambda (bl3bec@rest) (bl3bdc@f bl3bec@rest (+ bl3bd9@i '1))) bl3bea@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3be8@t))))))))))))) (bl3b07@get-mutators (lambda (bl3bac@foo bl3bad@fields) (letrec* ((bl3bb1@gen-name (lambda (bl3bd4@x) (bl31dd@datum->syntax bl3bac@foo (string->symbol (string-append (symbol->string (bl31df@syntax->datum bl3bac@foo)) '"-" (symbol->string (bl31df@syntax->datum bl3bd4@x)) '"-set!")))))) (let bl3bb4@f ((bl3bb2@fields bl3bad@fields)) (let ((bl3bb6@t bl3bb2@fields)) (let ((bl3bb8@ls/false (bl30f9@syntax-dispatch bl3bb6@t '()))) (if bl3bb8@ls/false (apply (lambda () '()) bl3bb8@ls/false) (let ((bl3bba@t bl3bb6@t)) (let ((bl3bbc@ls/false (bl30f9@syntax-dispatch bl3bba@t '((#(scheme-id mutable) any any any) . any)))) (if bl3bbc@ls/false (apply (lambda (bl3bbe@name bl3bbf@accessor bl3bc0@mutator bl3bc1@rest) (cons bl3bc0@mutator (bl3bb4@f bl3bc1@rest))) bl3bbc@ls/false) (let ((bl3bc6@t bl3bba@t)) (let ((bl3bc8@ls/false (bl30f9@syntax-dispatch bl3bc6@t '((#(scheme-id mutable) any) . any)))) (if bl3bc8@ls/false (apply (lambda (bl3bca@name bl3bcb@rest) (cons (bl3bb1@gen-name bl3bca@name) (bl3bb4@f bl3bcb@rest))) bl3bc8@ls/false) (let ((bl3bce@t bl3bc6@t)) (let ((bl3bd0@ls/false (bl30f9@syntax-dispatch bl3bce@t '(_ . any)))) (if bl3bd0@ls/false (apply (lambda (bl3bd2@rest) (bl3bb4@f bl3bd2@rest)) bl3bd0@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3bce@t))))))))))))))))) (bl3b09@get-accessors (lambda (bl3b68@foo bl3b69@fields) (letrec* ((bl3b6d@gen-name (lambda (bl3baa@x) (bl31dd@datum->syntax bl3b68@foo (string->symbol (string-append (symbol->string (bl31df@syntax->datum bl3b68@foo)) '"-" (symbol->string (bl31df@syntax->datum bl3baa@x)))))))) (map (lambda (bl3b6e@field) (let ((bl3b70@t bl3b6e@field)) (let ((bl3b72@ls/false (bl30f9@syntax-dispatch bl3b70@t '(#(scheme-id mutable) any any any)))) (if (and bl3b72@ls/false (apply (lambda (bl3b74@name bl3b75@accessor bl3b76@mutator) (bl2ef2@id? bl3b75@accessor)) bl3b72@ls/false)) (apply (lambda (bl3b7a@name bl3b7b@accessor bl3b7c@mutator) bl3b7b@accessor) bl3b72@ls/false) (let ((bl3b80@t bl3b70@t)) (let ((bl3b82@ls/false (bl30f9@syntax-dispatch bl3b80@t '(#(scheme-id immutable) any any)))) (if (and bl3b82@ls/false (apply (lambda (bl3b84@name bl3b85@accessor) (bl2ef2@id? bl3b85@accessor)) bl3b82@ls/false)) (apply (lambda (bl3b88@name bl3b89@accessor) bl3b89@accessor) bl3b82@ls/false) (let ((bl3b8c@t bl3b80@t)) (let ((bl3b8e@ls/false (bl30f9@syntax-dispatch bl3b8c@t '(#(scheme-id mutable) any)))) (if (and bl3b8e@ls/false (apply (lambda (bl3b90@name) (bl2ef2@id? bl3b90@name)) bl3b8e@ls/false)) (apply (lambda (bl3b92@name) (bl3b6d@gen-name bl3b92@name)) bl3b8e@ls/false) (let ((bl3b94@t bl3b8c@t)) (let ((bl3b96@ls/false (bl30f9@syntax-dispatch bl3b94@t '(#(scheme-id immutable) any)))) (if (and bl3b96@ls/false (apply (lambda (bl3b98@name) (bl2ef2@id? bl3b98@name)) bl3b96@ls/false)) (apply (lambda (bl3b9a@name) (bl3b6d@gen-name bl3b9a@name)) bl3b96@ls/false) (let ((bl3b9c@t bl3b94@t)) (let ((bl3b9e@ls/false (bl30f9@syntax-dispatch bl3b9c@t 'any))) (if (and bl3b9e@ls/false (apply (lambda (bl3ba0@name) (bl2ef2@id? bl3ba0@name)) bl3b9e@ls/false)) (apply (lambda (bl3ba2@name) (bl3b6d@gen-name bl3ba2@name)) bl3b9e@ls/false) (let ((bl3ba4@t bl3b9c@t)) (let ((bl3ba6@ls/false (bl30f9@syntax-dispatch bl3ba4@t 'any))) (if bl3ba6@ls/false (apply (lambda (bl3ba8@others) (bl31d9@syntax-violation '#f '"invalid field spec" bl3b6e@field)) bl3ba6@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3ba4@t)))))))))))))))))))) bl3b69@fields)))) (bl3b0b@enumerate (lambda (bl3b60@ls) (let bl3b66@f ((bl3b62@ls bl3b60@ls) (bl3b63@i '0)) (if (null? bl3b62@ls) '() (cons bl3b63@i (bl3b66@f (cdr bl3b62@ls) (+ bl3b63@i '1))))))) (bl3b0d@do-define-record (lambda (bl3b38@namespec bl3b39@clause*) (let ((bl3b3c@foo (bl3af1@get-record-name bl3b38@namespec))) (let ((bl3b3e@foo-rtd (gensym))) (let ((bl3b40@foo-rcd (gensym))) (let ((bl3b42@protocol (gensym))) (let ((bl3b44@make-foo (bl3af3@get-record-constructor-name bl3b38@namespec))) (let ((bl3b46@fields (bl3b03@get-fields bl3b39@clause*))) (let ((bl3b48@idx* (bl3b0b@enumerate bl3b46@fields))) (let ((bl3b4a@foo-x* (bl3b09@get-accessors bl3b3c@foo bl3b46@fields))) (let ((bl3b4c@set-foo-x!* (bl3b07@get-mutators bl3b3c@foo bl3b46@fields))) (let ((bl3b4e@set-foo-idx* (bl3b05@get-mutator-indices bl3b46@fields))) (let ((bl3b50@foo? (bl3af5@get-record-predicate-name bl3b38@namespec))) (let ((bl3b52@foo-rtd-code (bl3af9@foo-rtd-code bl3b3c@foo bl3b39@clause* (bl3afb@parent-rtd-code bl3b39@clause*)))) (let ((bl3b54@foo-rcd-code (bl3aff@foo-rcd-code bl3b39@clause* bl3b3e@foo-rtd bl3b42@protocol (bl3afd@parent-rcd-code bl3b39@clause*)))) (let ((bl3b56@protocol-code (bl3b01@get-protocol-code bl3b39@clause*))) (bl30af@bless (cons 'begin (cons (list 'define bl3b3e@foo-rtd bl3b52@foo-rtd-code) (cons (list 'define bl3b42@protocol bl3b56@protocol-code) (cons (list 'define bl3b40@foo-rcd bl3b54@foo-rcd-code) (cons (list 'define-syntax bl3b3c@foo (list 'list ''$rtd (list 'syntax bl3b3e@foo-rtd) (list 'syntax bl3b40@foo-rcd))) (cons (list 'define bl3b50@foo? (list 'record-predicate bl3b3e@foo-rtd)) (cons (list 'define bl3b44@make-foo (list 'record-constructor bl3b40@foo-rcd)) (append (map (lambda (bl3b58@foo-x bl3b59@idx) (list 'define bl3b58@foo-x (list 'record-accessor bl3b3e@foo-rtd bl3b59@idx))) bl3b4a@foo-x* bl3b48@idx*) (map (lambda (bl3b5c@set-foo-x! bl3b5d@idx) (list 'define bl3b5c@set-foo-x! (list 'record-mutator bl3b3e@foo-rtd bl3b5d@idx))) bl3b4c@set-foo-x!* bl3b4e@set-foo-idx*)))))))))))))))))))))))))) (bl3b0f@verify-clauses (lambda (bl3b18@x bl3b19@cls*) (letrec* ((bl3b1d@valid-kwds (map bl30af@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (bl3b1f@free-id-member? (lambda (bl3b34@x bl3b35@ls) (and (pair? bl3b35@ls) (or (bl2ef8@free-id=? bl3b34@x (car bl3b35@ls)) (bl3b1f@free-id-member? bl3b34@x (cdr bl3b35@ls))))))) (let bl3b24@f ((bl3b20@cls* bl3b19@cls*) (bl3b21@seen* '())) (if (not (null? bl3b20@cls*)) (let ((bl3b26@t (car bl3b20@cls*))) (let ((bl3b28@ls/false (bl30f9@syntax-dispatch bl3b26@t '(any . any)))) (if bl3b28@ls/false (apply (lambda (bl3b2a@kwd bl3b2b@rest) (if (or (not (bl2ef2@id? bl3b2a@kwd)) (not (bl3b1f@free-id-member? bl3b2a@kwd bl3b1d@valid-kwds))) (bl31d9@syntax-violation '#f '"not a valid define-record-type keyword" bl3b2a@kwd) (if (bl2efe@bound-id-member? bl3b2a@kwd bl3b21@seen*) (bl31d9@syntax-violation '#f '"duplicate use of keyword " bl3b18@x bl3b2a@kwd) (bl3b24@f (cdr bl3b20@cls*) (cons bl3b2a@kwd bl3b21@seen*))))) bl3b28@ls/false) (let ((bl3b2e@t bl3b26@t)) (let ((bl3b30@ls/false (bl30f9@syntax-dispatch bl3b2e@t 'any))) (if bl3b30@ls/false (apply (lambda (bl3b32@cls) (bl31d9@syntax-violation '#f '"malformed define-record-type clause" bl3b32@cls)) bl3b30@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3b2e@t))))))) (void))))))) (let ((bl3b10@t bl3aec@x)) (let ((bl3b12@ls/false (bl30f9@syntax-dispatch bl3b10@t '(_ any . each-any)))) (if bl3b12@ls/false (apply (lambda (bl3b14@namespec bl3b15@clause*) (begin (bl3b0f@verify-clauses bl3aec@x bl3b15@clause*) (bl3b0d@do-define-record bl3b14@namespec bl3b15@clause*))) bl3b12@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3b10@t))))))) (set! bl4bff@bl30ed@define-record-type-macro bl30ed@define-record-type-macro) (set! bl30ef@define-condition-type-macro (lambda (bl3ce8@x) (letrec* ((bl3ceb@mkname (lambda (bl3d18@name bl3d19@suffix) (bl31dd@datum->syntax bl3d18@name (string->symbol (string-append (symbol->string (bl31df@syntax->datum bl3d18@name)) bl3d19@suffix)))))) (let ((bl3cec@t bl3ce8@x)) (let ((bl3cee@ls/false (bl30f9@syntax-dispatch bl3cec@t '(any any any any any . #(each (any any)))))) (if (and bl3cee@ls/false (apply (lambda (bl3cf0@ctxt bl3cf1@name bl3cf2@super bl3cf3@constructor bl3cf4@predicate bl3cf5@field* bl3cf6@accessor*) (and (bl2ef2@id? bl3cf1@name) (bl2ef2@id? bl3cf2@super) (bl2ef2@id? bl3cf3@constructor) (bl2ef2@id? bl3cf4@predicate) (for-all bl2ef2@id? bl3cf5@field*) (for-all bl2ef2@id? bl3cf6@accessor*))) bl3cee@ls/false)) (apply (lambda (bl3cfe@ctxt bl3cff@name bl3d00@super bl3d01@constructor bl3d02@predicate bl3d03@field* bl3d04@accessor*) (let ((bl3d0c@aux-accessor* (map (lambda (bl3d0e@x) (gensym)) bl3d04@accessor*))) (bl30af@bless (cons 'begin (cons (cons 'define-record-type (cons (list bl3cff@name bl3d01@constructor (gensym)) (cons (list 'parent bl3d00@super) (cons (cons 'fields (map (lambda (bl3d10@field bl3d11@aux) (list 'immutable bl3d10@field bl3d11@aux)) bl3d03@field* bl3d0c@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define bl3d02@predicate (list 'condition-predicate (list 'record-type-descriptor bl3cff@name))) (map (lambda (bl3d14@accessor bl3d15@aux) (list 'define bl3d14@accessor (list 'condition-accessor (list 'record-type-descriptor bl3cff@name) bl3d15@aux))) bl3d04@accessor* bl3d0c@aux-accessor*))))))) bl3cee@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3cec@t))))))) (set! bl4c00@bl30ef@define-condition-type-macro bl30ef@define-condition-type-macro) (set! bl30f1@incorrect-usage-macro (lambda (bl3d1c@e) (bl31d9@syntax-violation '#f '"incorrect usage of auxiliary keyword" bl3d1c@e))) (set! bl4c01@bl30f1@incorrect-usage-macro bl30f1@incorrect-usage-macro) (set! bl30f3@parameterize-macro (lambda (bl3d1e@e) (let ((bl3d20@t bl3d1e@e)) (let ((bl3d22@ls/false (bl30f9@syntax-dispatch bl3d20@t '(_ () any . each-any)))) (if bl3d22@ls/false (apply (lambda (bl3d24@b bl3d25@b*) (bl30af@bless (cons 'let (cons '() (cons bl3d24@b bl3d25@b*))))) bl3d22@ls/false) (let ((bl3d28@t bl3d20@t)) (let ((bl3d2a@ls/false (bl30f9@syntax-dispatch bl3d28@t '(_ #(each (any any)) any . each-any)))) (if bl3d2a@ls/false (apply (lambda (bl3d2c@olhs* bl3d2d@orhs* bl3d2e@b bl3d2f@b*) (let ((bl3d34@lhs* (bl31c7@generate-temporaries bl3d2c@olhs*)) (bl3d35@rhs* (bl31c7@generate-temporaries bl3d2d@orhs*))) (bl30af@bless (cons (list 'lambda (append bl3d34@lhs* bl3d35@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (bl3d38@lhs bl3d39@rhs) (list 'let (list (list 't (list bl3d38@lhs))) (list bl3d38@lhs bl3d39@rhs) (cons 'set! (cons bl3d39@rhs '(t))))) bl3d34@lhs* bl3d35@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons bl3d2e@b bl3d2f@b*))) '(swap)))))) (append bl3d2c@olhs* bl3d2d@orhs*))))) bl3d2a@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3d28@t))))))))) (set! bl4c02@bl30f3@parameterize-macro bl30f3@parameterize-macro) (set! bl30f5@foreign-call-transformer (lambda (bl3d3c@e bl3d3d@r bl3d3e@mr) (let ((bl3d42@t bl3d3c@e)) (let ((bl3d44@ls/false (bl30f9@syntax-dispatch bl3d42@t '(_ any . each-any)))) (if bl3d44@ls/false (apply (lambda (bl3d46@name bl3d47@arg*) (cons 'foreign-call (cons (bl311b@chi-expr bl3d46@name bl3d3d@r bl3d3e@mr) (bl3117@chi-expr* bl3d47@arg* bl3d3d@r bl3d3e@mr)))) bl3d44@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3d42@t)))))) (set! bl4c03@bl30f5@foreign-call-transformer bl30f5@foreign-call-transformer) (set! bl30f7@convert-pattern (lambda (bl3d4a@pattern bl3d4b@keys) (letrec* ((bl3d4f@cvt* (lambda (bl3dee@p* bl3def@n bl3df0@ids) (if (null? bl3dee@p*) (values '() bl3df0@ids) (call-with-values (lambda () (bl3d4f@cvt* (cdr bl3dee@p*) bl3def@n bl3df0@ids)) (lambda (bl3df8@bl3df5 bl3df9@bl3df7) (let ((bl3dfc@ids bl3df9@bl3df7) (bl3dfd@y bl3df8@bl3df5)) (call-with-values (lambda () (bl3d51@cvt (car bl3dee@p*) bl3def@n bl3dfc@ids)) (lambda (bl3e04@bl3e01 bl3e05@bl3e03) (let ((bl3e08@ids bl3e05@bl3e03) (bl3e09@x bl3e04@bl3e01)) (values (cons bl3e09@x bl3dfd@y) bl3e08@ids)))))))))) (bl3d51@cvt (lambda (bl3d52@p bl3d53@n bl3d54@ids) (let ((bl3d58@t bl3d52@p)) (let ((bl3d5a@ls/false (bl30f9@syntax-dispatch bl3d58@t 'any))) (if (and bl3d5a@ls/false (apply (lambda (bl3d5c@id) (bl2ef2@id? bl3d5c@id)) bl3d5a@ls/false)) (apply (lambda (bl3d5e@id) (if (bl2efe@bound-id-member? bl3d52@p bl3d4b@keys) (values (vector 'free-id bl3d52@p) bl3d54@ids) (if (bl2ef8@free-id=? bl3d52@p (bl3081@scheme-stx '_)) (values '_ bl3d54@ids) (values 'any (cons (cons bl3d52@p bl3d53@n) bl3d54@ids))))) bl3d5a@ls/false) (let ((bl3d60@t bl3d58@t)) (let ((bl3d62@ls/false (bl30f9@syntax-dispatch bl3d60@t '(any any)))) (if (and bl3d62@ls/false (apply (lambda (bl3d64@p bl3d65@dots) (bl30fb@ellipsis? bl3d65@dots)) bl3d62@ls/false)) (apply (lambda (bl3d68@p bl3d69@dots) (call-with-values (lambda () (bl3d51@cvt bl3d68@p (+ bl3d53@n '1) bl3d54@ids)) (lambda (bl3d70@bl3d6d bl3d71@bl3d6f) (let ((bl3d74@ids bl3d71@bl3d6f) (bl3d75@p bl3d70@bl3d6d)) (values (if (eq? bl3d75@p 'any) 'each-any (vector 'each bl3d75@p)) bl3d74@ids))))) bl3d62@ls/false) (let ((bl3d78@t bl3d60@t)) (let ((bl3d7a@ls/false (bl30f9@syntax-dispatch bl3d78@t '(any any . #(each+ any () any))))) (if (and bl3d7a@ls/false (apply (lambda (bl3d7c@x bl3d7d@dots bl3d7e@ys bl3d7f@z) (bl30fb@ellipsis? bl3d7d@dots)) bl3d7a@ls/false)) (apply (lambda (bl3d84@x bl3d85@dots bl3d86@ys bl3d87@z) (call-with-values (lambda () (bl3d51@cvt bl3d87@z bl3d53@n bl3d54@ids)) (lambda (bl3d90@bl3d8d bl3d91@bl3d8f) (let ((bl3d94@ids bl3d91@bl3d8f) (bl3d95@z bl3d90@bl3d8d)) (call-with-values (lambda () (bl3d4f@cvt* bl3d86@ys bl3d53@n bl3d94@ids)) (lambda (bl3d9c@bl3d99 bl3d9d@bl3d9b) (let ((bl3da0@ids bl3d9d@bl3d9b) (bl3da1@ys bl3d9c@bl3d99)) (call-with-values (lambda () (bl3d51@cvt bl3d84@x (+ bl3d53@n '1) bl3da0@ids)) (lambda (bl3da8@bl3da5 bl3da9@bl3da7) (let ((bl3dac@ids bl3da9@bl3da7) (bl3dad@x bl3da8@bl3da5)) (values (vector 'each+ bl3dad@x (reverse bl3da1@ys) bl3d95@z) bl3dac@ids))))))))))) bl3d7a@ls/false) (let ((bl3db0@t bl3d78@t)) (let ((bl3db2@ls/false (bl30f9@syntax-dispatch bl3db0@t '(any . any)))) (if bl3db2@ls/false (apply (lambda (bl3db4@x bl3db5@y) (call-with-values (lambda () (bl3d51@cvt bl3db5@y bl3d53@n bl3d54@ids)) (lambda (bl3dbc@bl3db9 bl3dbd@bl3dbb) (let ((bl3dc0@ids bl3dbd@bl3dbb) (bl3dc1@y bl3dbc@bl3db9)) (call-with-values (lambda () (bl3d51@cvt bl3db4@x bl3d53@n bl3dc0@ids)) (lambda (bl3dc8@bl3dc5 bl3dc9@bl3dc7) (let ((bl3dcc@ids bl3dc9@bl3dc7) (bl3dcd@x bl3dc8@bl3dc5)) (values (cons bl3dcd@x bl3dc1@y) bl3dcc@ids)))))))) bl3db2@ls/false) (let ((bl3dd0@t bl3db0@t)) (let ((bl3dd2@ls/false (bl30f9@syntax-dispatch bl3dd0@t '()))) (if bl3dd2@ls/false (apply (lambda () (values '() bl3d54@ids)) bl3dd2@ls/false) (let ((bl3dd4@t bl3dd0@t)) (let ((bl3dd6@ls/false (bl30f9@syntax-dispatch bl3dd4@t '#(vector each-any)))) (if (and bl3dd6@ls/false (apply (lambda (bl3dd8@p) (not (bl2ebe@stx? bl3dd8@p))) bl3dd6@ls/false)) (apply (lambda (bl3dda@p) (call-with-values (lambda () (bl3d51@cvt bl3dda@p bl3d53@n bl3d54@ids)) (lambda (bl3de0@bl3ddd bl3de1@bl3ddf) (let ((bl3de4@ids bl3de1@bl3ddf) (bl3de5@p bl3de0@bl3ddd)) (values (vector 'vector bl3de5@p) bl3de4@ids))))) bl3dd6@ls/false) (let ((bl3de8@t bl3dd4@t)) (let ((bl3dea@ls/false (bl30f9@syntax-dispatch bl3de8@t 'any))) (if bl3dea@ls/false (apply (lambda (bl3dec@datum) (values (vector 'atom (bl2f06@stx->datum bl3dec@datum)) bl3d54@ids)) bl3dea@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3de8@t))))))))))))))))))))))))) (bl3d51@cvt bl3d4a@pattern '0 '())))) (set! bl4c04@bl30f7@convert-pattern bl30f7@convert-pattern) (set! bl30f9@syntax-dispatch (letrec* ((bl3e0d@stx^ (lambda (bl3ee8@e bl3ee9@m* bl3eea@s* bl3eeb@ae*) (if (and (null? bl3ee9@m*) (null? bl3eea@s*) (null? bl3eeb@ae*)) bl3ee8@e (bl2eda@mkstx bl3ee8@e bl3ee9@m* bl3eea@s* bl3eeb@ae*)))) (bl3e0f@match-each (lambda (bl3ec8@e bl3ec9@p bl3eca@m* bl3ecb@s* bl3ecc@ae*) (if (pair? bl3ec8@e) (let ((bl3ed2@first (bl3e1b@match (car bl3ec8@e) bl3ec9@p bl3eca@m* bl3ecb@s* bl3ecc@ae* '()))) (and bl3ed2@first (let ((bl3ed4@rest (bl3e0f@match-each (cdr bl3ec8@e) bl3ec9@p bl3eca@m* bl3ecb@s* bl3ecc@ae*))) (and bl3ed4@rest (cons bl3ed2@first bl3ed4@rest))))) (if (null? bl3ec8@e) '() (if (bl2ebe@stx? bl3ec8@e) (and (not (bl2e78@top-marked? bl3eca@m*)) (call-with-values (lambda () (join-wraps bl3eca@m* bl3ecb@s* bl3ecc@ae* bl3ec8@e)) (lambda (bl3edc@bl3ed7 bl3edd@bl3ed9 bl3ede@bl3edb) (let ((bl3ee2@ae* bl3ede@bl3edb) (bl3ee3@s* bl3edd@bl3ed9) (bl3ee4@m* bl3edc@bl3ed7)) (bl3e0f@match-each (bl2ec0@stx-expr bl3ec8@e) bl3ec9@p bl3ee4@m* bl3ee3@s* bl3ee2@ae*))))) (if (bl2a36@bl2908@annotation? bl3ec8@e) (bl3e0f@match-each (bl2a38@bl290c@annotation-expression bl3ec8@e) bl3ec9@p bl3eca@m* bl3ecb@s* bl3ecc@ae*) '#f)))))) (bl3e11@match-each+ (lambda (bl3e88@e bl3e89@x-pat bl3e8a@y-pat bl3e8b@z-pat bl3e8c@m* bl3e8d@s* bl3e8e@ae* bl3e8f@r) (let bl3ea0@f ((bl3e98@e bl3e88@e) (bl3e99@m* bl3e8c@m*) (bl3e9a@s* bl3e8d@s*) (bl3e9b@ae* bl3e8e@ae*)) (if (pair? bl3e98@e) (call-with-values (lambda () (bl3ea0@f (cdr bl3e98@e) bl3e99@m* bl3e9a@s* bl3e9b@ae*)) (lambda (bl3ea8@bl3ea3 bl3ea9@bl3ea5 bl3eaa@bl3ea7) (let ((bl3eae@r bl3eaa@bl3ea7) (bl3eaf@y-pat bl3ea9@bl3ea5) (bl3eb0@xr* bl3ea8@bl3ea3)) (if bl3eae@r (if (null? bl3eaf@y-pat) (let ((bl3eb4@xr (bl3e1b@match (car bl3e98@e) bl3e89@x-pat bl3e99@m* bl3e9a@s* bl3e9b@ae* '()))) (if bl3eb4@xr (values (cons bl3eb4@xr bl3eb0@xr*) bl3eaf@y-pat bl3eae@r) (values '#f '#f '#f))) (values '() (cdr bl3eaf@y-pat) (bl3e1b@match (car bl3e98@e) (car bl3eaf@y-pat) bl3e99@m* bl3e9a@s* bl3e9b@ae* bl3eae@r))) (values '#f '#f '#f))))) (if (bl2ebe@stx? bl3e98@e) (if (bl2e78@top-marked? bl3e99@m*) (values '() bl3e8a@y-pat (bl3e1b@match bl3e98@e bl3e8b@z-pat bl3e99@m* bl3e9a@s* bl3e9b@ae* bl3e8f@r)) (call-with-values (lambda () (join-wraps bl3e99@m* bl3e9a@s* bl3e9b@ae* bl3e98@e)) (lambda (bl3ebc@bl3eb7 bl3ebd@bl3eb9 bl3ebe@bl3ebb) (let ((bl3ec2@ae* bl3ebe@bl3ebb) (bl3ec3@s* bl3ebd@bl3eb9) (bl3ec4@m* bl3ebc@bl3eb7)) (bl3ea0@f (bl2ec0@stx-expr bl3e98@e) bl3ec4@m* bl3ec3@s* bl3ec2@ae*))))) (if (bl2a36@bl2908@annotation? bl3e98@e) (bl3ea0@f (bl2a38@bl290c@annotation-expression bl3e98@e) bl3e99@m* bl3e9a@s* bl3e9b@ae*) (values '() bl3e8a@y-pat (bl3e1b@match bl3e98@e bl3e8b@z-pat bl3e99@m* bl3e9a@s* bl3e9b@ae* bl3e8f@r)))))))) (bl3e13@match-each-any (lambda (bl3e6c@e bl3e6d@m* bl3e6e@s* bl3e6f@ae*) (if (pair? bl3e6c@e) (let ((bl3e74@l (bl3e13@match-each-any (cdr bl3e6c@e) bl3e6d@m* bl3e6e@s* bl3e6f@ae*))) (and bl3e74@l (cons (bl3e0d@stx^ (car bl3e6c@e) bl3e6d@m* bl3e6e@s* bl3e6f@ae*) bl3e74@l))) (if (null? bl3e6c@e) '() (if (bl2ebe@stx? bl3e6c@e) (and (not (bl2e78@top-marked? bl3e6d@m*)) (call-with-values (lambda () (join-wraps bl3e6d@m* bl3e6e@s* bl3e6f@ae* bl3e6c@e)) (lambda (bl3e7c@bl3e77 bl3e7d@bl3e79 bl3e7e@bl3e7b) (let ((bl3e82@ae* bl3e7e@bl3e7b) (bl3e83@s* bl3e7d@bl3e79) (bl3e84@m* bl3e7c@bl3e77)) (bl3e13@match-each-any (bl2ec0@stx-expr bl3e6c@e) bl3e84@m* bl3e83@s* bl3e82@ae*))))) (if (bl2a36@bl2908@annotation? bl3e6c@e) (bl3e13@match-each-any (bl2a38@bl290c@annotation-expression bl3e6c@e) bl3e6d@m* bl3e6e@s* bl3e6f@ae*) '#f)))))) (bl3e15@match-empty (lambda (bl3e66@p bl3e67@r) (if (null? bl3e66@p) bl3e67@r (if (eq? bl3e66@p '_) bl3e67@r (if (eq? bl3e66@p 'any) (cons '() bl3e67@r) (if (pair? bl3e66@p) (bl3e15@match-empty (car bl3e66@p) (bl3e15@match-empty (cdr bl3e66@p) bl3e67@r)) (if (eq? bl3e66@p 'each-any) (cons '() bl3e67@r) (let ((bl3e6a@t (vector-ref bl3e66@p '0))) (if (memv bl3e6a@t '(each)) (bl3e15@match-empty (vector-ref bl3e66@p '1) bl3e67@r) (if (memv bl3e6a@t '(each+)) (bl3e15@match-empty (vector-ref bl3e66@p '1) (bl3e15@match-empty (reverse (vector-ref bl3e66@p '2)) (bl3e15@match-empty (vector-ref bl3e66@p '3) bl3e67@r))) (if (memv bl3e6a@t '(free-id atom)) bl3e67@r (if (memv bl3e6a@t '(scheme-id atom)) bl3e67@r (if (memv bl3e6a@t '(vector)) (bl3e15@match-empty (vector-ref bl3e66@p '1) bl3e67@r) (assertion-violation 'syntax-dispatch '"invalid pattern" bl3e66@p)))))))))))))) (bl3e17@combine (lambda (bl3e62@r* bl3e63@r) (if (null? (car bl3e62@r*)) bl3e63@r (cons (map car bl3e62@r*) (bl3e17@combine (map cdr bl3e62@r*) bl3e63@r))))) (bl3e19@match* (lambda (bl3e3e@e bl3e3f@p bl3e40@m* bl3e41@s* bl3e42@ae* bl3e43@r) (if (null? bl3e3f@p) (and (null? bl3e3e@e) bl3e43@r) (if (pair? bl3e3f@p) (and (pair? bl3e3e@e) (bl3e1b@match (car bl3e3e@e) (car bl3e3f@p) bl3e40@m* bl3e41@s* bl3e42@ae* (bl3e1b@match (cdr bl3e3e@e) (cdr bl3e3f@p) bl3e40@m* bl3e41@s* bl3e42@ae* bl3e43@r))) (if (eq? bl3e3f@p 'each-any) (let ((bl3e4a@l (bl3e13@match-each-any bl3e3e@e bl3e40@m* bl3e41@s* bl3e42@ae*))) (and bl3e4a@l (cons bl3e4a@l bl3e43@r))) (let ((bl3e4c@t (vector-ref bl3e3f@p '0))) (if (memv bl3e4c@t '(each)) (if (null? bl3e3e@e) (bl3e15@match-empty (vector-ref bl3e3f@p '1) bl3e43@r) (let ((bl3e4e@r* (bl3e0f@match-each bl3e3e@e (vector-ref bl3e3f@p '1) bl3e40@m* bl3e41@s* bl3e42@ae*))) (and bl3e4e@r* (bl3e17@combine bl3e4e@r* bl3e43@r)))) (if (memv bl3e4c@t '(free-id)) (and (symbol? bl3e3e@e) (bl2e78@top-marked? bl3e40@m*) (bl2ef8@free-id=? (bl3e0d@stx^ bl3e3e@e bl3e40@m* bl3e41@s* bl3e42@ae*) (vector-ref bl3e3f@p '1)) bl3e43@r) (if (memv bl3e4c@t '(scheme-id)) (and (symbol? bl3e3e@e) (bl2e78@top-marked? bl3e40@m*) (bl2ef8@free-id=? (bl3e0d@stx^ bl3e3e@e bl3e40@m* bl3e41@s* bl3e42@ae*) (bl3081@scheme-stx (vector-ref bl3e3f@p '1))) bl3e43@r) (if (memv bl3e4c@t '(each+)) (call-with-values (lambda () (bl3e11@match-each+ bl3e3e@e (vector-ref bl3e3f@p '1) (vector-ref bl3e3f@p '2) (vector-ref bl3e3f@p '3) bl3e40@m* bl3e41@s* bl3e42@ae* bl3e43@r)) (lambda (bl3e56@bl3e51 bl3e57@bl3e53 bl3e58@bl3e55) (let ((bl3e5c@r bl3e58@bl3e55) (bl3e5d@y-pat bl3e57@bl3e53) (bl3e5e@xr* bl3e56@bl3e51)) (and bl3e5c@r (null? bl3e5d@y-pat) (if (null? bl3e5e@xr*) (bl3e15@match-empty (vector-ref bl3e3f@p '1) bl3e5c@r) (bl3e17@combine bl3e5e@xr* bl3e5c@r)))))) (if (memv bl3e4c@t '(atom)) (and (fast-equal? (vector-ref bl3e3f@p '1) (bl2f04@strip bl3e3e@e bl3e40@m*)) bl3e43@r) (if (memv bl3e4c@t '(vector)) (and (vector? bl3e3e@e) (bl3e1b@match (vector->list bl3e3e@e) (vector-ref bl3e3f@p '1) bl3e40@m* bl3e41@s* bl3e42@ae* bl3e43@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" bl3e3f@p))))))))))))) (bl3e1b@match (lambda (bl3e20@e bl3e21@p bl3e22@m* bl3e23@s* bl3e24@ae* bl3e25@r) (if (not bl3e25@r) '#f (if (eq? bl3e21@p '_) bl3e25@r (if (eq? bl3e21@p 'any) (cons (bl3e0d@stx^ bl3e20@e bl3e22@m* bl3e23@s* bl3e24@ae*) bl3e25@r) (if (bl2ebe@stx? bl3e20@e) (and (not (bl2e78@top-marked? bl3e22@m*)) (call-with-values (lambda () (join-wraps bl3e22@m* bl3e23@s* bl3e24@ae* bl3e20@e)) (lambda (bl3e32@bl3e2d bl3e33@bl3e2f bl3e34@bl3e31) (let ((bl3e38@ae* bl3e34@bl3e31) (bl3e39@s* bl3e33@bl3e2f) (bl3e3a@m* bl3e32@bl3e2d)) (bl3e1b@match (bl2ec0@stx-expr bl3e20@e) bl3e21@p bl3e3a@m* bl3e39@s* bl3e38@ae* bl3e25@r))))) (if (bl2a36@bl2908@annotation? bl3e20@e) (bl3e1b@match (bl2a38@bl290c@annotation-expression bl3e20@e) bl3e21@p bl3e22@m* bl3e23@s* bl3e24@ae* bl3e25@r) (bl3e19@match* bl3e20@e bl3e21@p bl3e22@m* bl3e23@s* bl3e24@ae* bl3e25@r))))))))) (lambda (bl3e1c@e bl3e1d@p) (bl3e1b@match bl3e1c@e bl3e1d@p '() '() '() '())))) (set! bl4c05@bl30f9@syntax-dispatch bl30f9@syntax-dispatch) (set! bl30fb@ellipsis? (lambda (bl3ef0@x) (and (bl2ef2@id? bl3ef0@x) (bl2ef8@free-id=? bl3ef0@x (bl3081@scheme-stx '...))))) (set! bl4c06@bl30fb@ellipsis? bl30fb@ellipsis?) (set! bl30fd@underscore? (lambda (bl3ef2@x) (and (bl2ef2@id? bl3ef2@x) (bl2ef8@free-id=? bl3ef2@x (bl3081@scheme-stx '_))))) (set! bl4c07@bl30fd@underscore? bl30fd@underscore?) (set! bl30ff@verify-literals (lambda (bl3ef4@lits bl3ef5@expr) (for-each (lambda (bl3ef8@x) (if (or (not (bl2ef2@id? bl3ef8@x)) (bl30fb@ellipsis? bl3ef8@x) (bl30fd@underscore? bl3ef8@x)) (bl31d9@syntax-violation '#f '"invalid literal" bl3ef5@expr bl3ef8@x) (void))) bl3ef4@lits))) (set! bl4c08@bl30ff@verify-literals bl30ff@verify-literals) (set! bl3101@syntax-case-transformer (letrec* ((bl3efb@build-dispatch-call (lambda (bl3f6c@pvars bl3f6d@expr bl3f6e@y bl3f6f@r bl3f70@mr) (let ((bl3f76@ids (map car bl3f6c@pvars)) (bl3f77@levels (map cdr bl3f6c@pvars))) (let ((bl3f7a@labels (map bl2e7e@gen-label bl3f76@ids)) (bl3f7b@new-vars (map bl2e7a@gen-lexical bl3f76@ids))) (let ((bl3f7e@body (bl311b@chi-expr (bl2edc@add-subst (bl2eb2@make-full-rib bl3f76@ids bl3f7a@labels) bl3f6d@expr) (append (map (lambda (bl3f80@label bl3f81@var bl3f82@level) (cons bl3f80@label (bl2f0c@make-binding 'syntax (cons bl3f81@var bl3f82@level)))) bl3f7a@labels bl3f7b@new-vars (map cdr bl3f6c@pvars)) bl3f6f@r) bl3f70@mr))) (list '(primitive apply) (bl2e55@bl2d87@build-lambda '#f bl3f7b@new-vars bl3f7e@body) bl3f6e@y)))))) (bl3efd@invalid-ids-error (lambda (bl3f60@id* bl3f61@e bl3f62@class) (let bl3f6a@find ((bl3f66@id* bl3f60@id*) (bl3f67@ok* '())) (if (null? bl3f66@id*) (bl31d9@syntax-violation '#f '"invalid syntax" bl3f61@e) (if (bl2ef2@id? (car bl3f66@id*)) (if (bl2efe@bound-id-member? (car bl3f66@id*) bl3f67@ok*) (bl31d5@syntax-error (car bl3f66@id*) '"duplicate " bl3f62@class) (bl3f6a@find (cdr bl3f66@id*) (cons (car bl3f66@id*) bl3f67@ok*))) (bl31d5@syntax-error (car bl3f66@id*) '"invalid " bl3f62@class)))))) (bl3eff@gen-clause (lambda (bl3f38@x bl3f39@keys bl3f3a@clauses bl3f3b@r bl3f3c@mr bl3f3d@pat bl3f3e@fender bl3f3f@expr) (call-with-values (lambda () (bl30f7@convert-pattern bl3f3d@pat bl3f39@keys)) (lambda (bl3f4c@bl3f49 bl3f4d@bl3f4b) (let ((bl3f50@pvars bl3f4d@bl3f4b) (bl3f51@p bl3f4c@bl3f49)) (if (not (bl2efc@distinct-bound-ids? (map car bl3f50@pvars))) (bl3efd@invalid-ids-error (map car bl3f50@pvars) bl3f3d@pat '"pattern variable") (if (not (for-all (lambda (bl3f54@x) (not (bl30fb@ellipsis? (car bl3f54@x)))) bl3f50@pvars)) (bl31d9@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" bl3f3d@pat) (let ((bl3f56@y (bl2e7a@gen-lexical 'tmp))) (let ((bl3f58@test (if (eq? bl3f3e@fender '#t) bl3f56@y (let ((bl3f5a@call (bl3efb@build-dispatch-call bl3f50@pvars bl3f3e@fender bl3f56@y bl3f3b@r bl3f3c@mr))) (list 'if bl3f56@y bl3f5a@call (list 'quote '#f)))))) (let ((bl3f5c@conseq (bl3efb@build-dispatch-call bl3f50@pvars bl3f3f@expr bl3f56@y bl3f3b@r bl3f3c@mr))) (let ((bl3f5e@altern (bl3f01@gen-syntax-case bl3f38@x bl3f39@keys bl3f3a@clauses bl3f3b@r bl3f3c@mr))) (list (bl2e55@bl2d87@build-lambda '#f (list bl3f56@y) (list 'if bl3f58@test bl3f5c@conseq bl3f5e@altern)) (list '(primitive syntax-dispatch) bl3f38@x (list 'quote bl3f51@p)))))))))))))) (bl3f01@gen-syntax-case (lambda (bl3f16@x bl3f17@keys bl3f18@clauses bl3f19@r bl3f1a@mr) (if (null? bl3f18@clauses) (list '(primitive syntax-error) bl3f16@x) (let ((bl3f20@t (car bl3f18@clauses))) (let ((bl3f22@ls/false (bl30f9@syntax-dispatch bl3f20@t '(any any)))) (if bl3f22@ls/false (apply (lambda (bl3f24@pat bl3f25@expr) (if (and (bl2ef2@id? bl3f24@pat) (not (bl2efe@bound-id-member? bl3f24@pat bl3f17@keys)) (not (bl30fb@ellipsis? bl3f24@pat))) (if (bl2ef8@free-id=? bl3f24@pat (bl3081@scheme-stx '_)) (bl311b@chi-expr bl3f25@expr bl3f19@r bl3f1a@mr) (let ((bl3f28@lab (bl2e7e@gen-label bl3f24@pat)) (bl3f29@lex (bl2e7a@gen-lexical bl3f24@pat))) (let ((bl3f2c@body (bl311b@chi-expr (bl2edc@add-subst (bl2eb2@make-full-rib (list bl3f24@pat) (list bl3f28@lab)) bl3f25@expr) (cons (cons bl3f28@lab (bl2f0c@make-binding 'syntax (cons bl3f29@lex '0))) bl3f19@r) bl3f1a@mr))) (list (bl2e55@bl2d87@build-lambda '#f (list bl3f29@lex) bl3f2c@body) bl3f16@x)))) (bl3eff@gen-clause bl3f16@x bl3f17@keys (cdr bl3f18@clauses) bl3f19@r bl3f1a@mr bl3f24@pat '#t bl3f25@expr))) bl3f22@ls/false) (let ((bl3f2e@t bl3f20@t)) (let ((bl3f30@ls/false (bl30f9@syntax-dispatch bl3f2e@t '(any any any)))) (if bl3f30@ls/false (apply (lambda (bl3f32@pat bl3f33@fender bl3f34@expr) (bl3eff@gen-clause bl3f16@x bl3f17@keys (cdr bl3f18@clauses) bl3f19@r bl3f1a@mr bl3f32@pat bl3f33@fender bl3f34@expr)) bl3f30@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3f2e@t))))))))))) (lambda (bl3f02@e bl3f03@r bl3f04@mr) (let ((bl3f08@t bl3f02@e)) (let ((bl3f0a@ls/false (bl30f9@syntax-dispatch bl3f08@t '(_ any each-any . each-any)))) (if bl3f0a@ls/false (apply (lambda (bl3f0c@expr bl3f0d@keys bl3f0e@clauses) (begin (bl30ff@verify-literals bl3f0d@keys bl3f02@e) (let ((bl3f12@x (bl2e7a@gen-lexical 'tmp))) (let ((bl3f14@body (bl3f01@gen-syntax-case bl3f12@x bl3f0d@keys bl3f0e@clauses bl3f03@r bl3f04@mr))) (list (bl2e55@bl2d87@build-lambda '#f (list bl3f12@x) bl3f14@body) (bl311b@chi-expr bl3f0c@expr bl3f03@r bl3f04@mr)))))) bl3f0a@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3f08@t))))))) (set! bl4c09@bl3101@syntax-case-transformer bl3101@syntax-case-transformer) (set! bl3103@ellipsis-map (lambda (bl3f86@proc bl3f87@ls . bl3f8a@ls*) (letrec* ((bl3f8d@who '...)) (begin (if (not (list? bl3f87@ls)) (assertion-violation bl3f8d@who '"not a list" bl3f87@ls) (void)) (if (not (null? bl3f8a@ls*)) (let ((bl3f8e@n (length bl3f87@ls))) (for-each (lambda (bl3f90@x) (begin (if (not (list? bl3f90@x)) (assertion-violation bl3f8d@who '"not a list" bl3f90@x) (void)) (if (not (= (length bl3f90@x) bl3f8e@n)) (assertion-violation bl3f8d@who '"length mismatch" bl3f87@ls bl3f90@x) (void)))) bl3f8a@ls*)) (void)) (apply map bl3f86@proc bl3f87@ls bl3f8a@ls*))))) (set! bl4c0a@bl3103@ellipsis-map bl3103@ellipsis-map) (set! bl3105@syntax-transformer (letrec* ((bl3f93@gen-syntax (lambda (bl400a@src bl400b@e bl400c@r bl400d@maps bl400e@ellipsis? bl400f@vec?) (let ((bl4016@t bl400b@e)) (let ((bl4018@ls/false (bl30f9@syntax-dispatch bl4016@t 'any))) (if (and bl4018@ls/false (apply (lambda (bl401a@dots) (bl400e@ellipsis? bl401a@dots)) bl4018@ls/false)) (apply (lambda (bl401c@dots) (bl31d9@syntax-violation '#f '"misplaced ellipsis in syntax form" bl400a@src)) bl4018@ls/false) (let ((bl401e@t bl4016@t)) (let ((bl4020@ls/false (bl30f9@syntax-dispatch bl401e@t 'any))) (if (and bl4020@ls/false (apply (lambda (bl4022@id) (bl2ef2@id? bl4022@id)) bl4020@ls/false)) (apply (lambda (bl4024@id) (let ((bl4026@label (bl2f08@id->label bl400b@e))) (let ((bl4028@b (bl2f0a@label->binding bl4026@label bl400c@r))) (if (eq? (bl2f0e@binding-type bl4028@b) 'syntax) (call-with-values (lambda () (let ((bl402e@var.lev (bl2f10@binding-value bl4028@b))) (bl3f95@gen-ref bl400a@src (car bl402e@var.lev) (cdr bl402e@var.lev) bl400d@maps))) (lambda (bl4030@bl402b bl4031@bl402d) (let ((bl4034@maps bl4031@bl402d) (bl4035@var bl4030@bl402b)) (values (list 'ref bl4035@var) bl4034@maps)))) (values (list 'quote bl400b@e) bl400d@maps))))) bl4020@ls/false) (let ((bl4038@t bl401e@t)) (let ((bl403a@ls/false (bl30f9@syntax-dispatch bl4038@t '(any any)))) (if (and bl403a@ls/false (apply (lambda (bl403c@dots bl403d@e) (bl400e@ellipsis? bl403c@dots)) bl403a@ls/false)) (apply (lambda (bl4040@dots bl4041@e) (if bl400f@vec? (bl31d9@syntax-violation '#f '"misplaced ellipsis in syntax form" bl400a@src) (bl3f93@gen-syntax bl400a@src bl4041@e bl400c@r bl400d@maps (lambda (bl4044@x) '#f) '#f))) bl403a@ls/false) (let ((bl4046@t bl4038@t)) (let ((bl4048@ls/false (bl30f9@syntax-dispatch bl4046@t '(any any . any)))) (if (and bl4048@ls/false (apply (lambda (bl404a@x bl404b@dots bl404c@y) (bl400e@ellipsis? bl404b@dots)) bl4048@ls/false)) (apply (lambda (bl4050@x bl4051@dots bl4052@y) (let bl4068@f ((bl4056@y bl4052@y) (bl4057@k (lambda (bl405a@maps) (call-with-values (lambda () (bl3f93@gen-syntax bl400a@src bl4050@x bl400c@r (cons '() bl405a@maps) bl400e@ellipsis? '#f)) (lambda (bl4060@bl405d bl4061@bl405f) (let ((bl4064@maps bl4061@bl405f) (bl4065@x bl4060@bl405d)) (if (null? (car bl4064@maps)) (bl31d9@syntax-violation '#f '"extra ellipsis in syntax form" bl400a@src) (values (bl3f9b@gen-map bl4065@x (car bl4064@maps)) (cdr bl4064@maps))))))))) (let ((bl406a@t bl4056@y)) (let ((bl406c@ls/false (bl30f9@syntax-dispatch bl406a@t '()))) (if bl406c@ls/false (apply (lambda () (bl4057@k bl400d@maps)) bl406c@ls/false) (let ((bl406e@t bl406a@t)) (let ((bl4070@ls/false (bl30f9@syntax-dispatch bl406e@t '(any . any)))) (if (and bl4070@ls/false (apply (lambda (bl4072@dots bl4073@y) (bl400e@ellipsis? bl4072@dots)) bl4070@ls/false)) (apply (lambda (bl4076@dots bl4077@y) (bl4068@f bl4077@y (lambda (bl407a@maps) (call-with-values (lambda () (bl4057@k (cons '() bl407a@maps))) (lambda (bl4080@bl407d bl4081@bl407f) (let ((bl4084@maps bl4081@bl407f) (bl4085@x bl4080@bl407d)) (if (null? (car bl4084@maps)) (bl31d9@syntax-violation '#f '"extra ellipsis in syntax form" bl400a@src) (values (bl3f99@gen-mappend bl4085@x (car bl4084@maps)) (cdr bl4084@maps))))))))) bl4070@ls/false) (let ((bl4088@t bl406e@t)) (let ((bl408a@ls/false (bl30f9@syntax-dispatch bl4088@t '_))) (if bl408a@ls/false (apply (lambda () (call-with-values (lambda () (bl3f93@gen-syntax bl400a@src bl4056@y bl400c@r bl400d@maps bl400e@ellipsis? bl400f@vec?)) (lambda (bl4090@bl408d bl4091@bl408f) (let ((bl4094@maps bl4091@bl408f) (bl4095@y bl4090@bl408d)) (call-with-values (lambda () (bl4057@k bl4094@maps)) (lambda (bl409c@bl4099 bl409d@bl409b) (let ((bl40a0@maps bl409d@bl409b) (bl40a1@x bl409c@bl4099)) (values (bl3f97@gen-append bl40a1@x bl4095@y) bl40a0@maps)))))))) bl408a@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl4088@t)))))))))))) bl4048@ls/false) (let ((bl40a4@t bl4046@t)) (let ((bl40a6@ls/false (bl30f9@syntax-dispatch bl40a4@t '(any . any)))) (if bl40a6@ls/false (apply (lambda (bl40a8@x bl40a9@y) (call-with-values (lambda () (bl3f93@gen-syntax bl400a@src bl40a8@x bl400c@r bl400d@maps bl400e@ellipsis? '#f)) (lambda (bl40b0@bl40ad bl40b1@bl40af) (let ((bl40b4@maps bl40b1@bl40af) (bl40b5@xnew bl40b0@bl40ad)) (call-with-values (lambda () (bl3f93@gen-syntax bl400a@src bl40a9@y bl400c@r bl40b4@maps bl400e@ellipsis? bl400f@vec?)) (lambda (bl40bc@bl40b9 bl40bd@bl40bb) (let ((bl40c0@maps bl40bd@bl40bb) (bl40c1@ynew bl40bc@bl40b9)) (values (bl3f9d@gen-cons bl400b@e bl40a8@x bl40a9@y bl40b5@xnew bl40c1@ynew) bl40c0@maps)))))))) bl40a6@ls/false) (let ((bl40c4@t bl40a4@t)) (let ((bl40c6@ls/false (bl30f9@syntax-dispatch bl40c4@t '#(vector each-any)))) (if bl40c6@ls/false (apply (lambda (bl40c8@ls) (call-with-values (lambda () (bl3f93@gen-syntax bl400a@src bl40c8@ls bl400c@r bl400d@maps bl400e@ellipsis? '#t)) (lambda (bl40ce@bl40cb bl40cf@bl40cd) (let ((bl40d2@maps bl40cf@bl40cd) (bl40d3@lsnew bl40ce@bl40cb)) (values (bl3f9f@gen-vector bl400b@e bl40c8@ls bl40d3@lsnew) bl40d2@maps))))) bl40c6@ls/false) (let ((bl40d6@t bl40c4@t)) (let ((bl40d8@ls/false (bl30f9@syntax-dispatch bl40d6@t '_))) (if bl40d8@ls/false (apply (lambda () (values (list 'quote bl400b@e) bl400d@maps)) bl40d8@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl40d6@t)))))))))))))))))))))))) (bl3f95@gen-ref (lambda (bl3ff0@src bl3ff1@var bl3ff2@level bl3ff3@maps) (if (= bl3ff2@level '0) (values bl3ff1@var bl3ff3@maps) (if (null? bl3ff3@maps) (bl31d9@syntax-violation '#f '"missing ellipsis in syntax form" bl3ff0@src) (call-with-values (lambda () (bl3f95@gen-ref bl3ff0@src bl3ff1@var (- bl3ff2@level '1) (cdr bl3ff3@maps))) (lambda (bl3ffc@bl3ff9 bl3ffd@bl3ffb) (let ((bl4000@outer-maps bl3ffd@bl3ffb) (bl4001@outer-var bl3ffc@bl3ff9)) (let ((bl4004@t (assq bl4001@outer-var (car bl3ff3@maps)))) (if bl4004@t ((lambda (bl4006@b) (values (cdr bl4006@b) bl3ff3@maps)) bl4004@t) (let ((bl4008@inner-var (bl2e7a@gen-lexical 'tmp))) (values bl4008@inner-var (cons (cons (cons bl4001@outer-var bl4008@inner-var) (car bl3ff3@maps)) bl4000@outer-maps)))))))))))) (bl3f97@gen-append (lambda (bl3fec@x bl3fed@y) (if (fast-equal? bl3fed@y ''()) bl3fec@x (list 'append bl3fec@x bl3fed@y)))) (bl3f99@gen-mappend (lambda (bl3fe8@e bl3fe9@map-env) (list 'apply '(primitive append) (bl3f9b@gen-map bl3fe8@e bl3fe9@map-env)))) (bl3f9b@gen-map (lambda (bl3fd6@e bl3fd7@map-env) (let ((bl3fda@formals (map cdr bl3fd7@map-env)) (bl3fdb@actuals (map (lambda (bl3fde@x) (list 'ref (car bl3fde@x))) bl3fd7@map-env))) (if (eq? (car bl3fd6@e) 'ref) (car bl3fdb@actuals) (if (for-all (lambda (bl3fe0@x) (and (eq? (car bl3fe0@x) 'ref) (memq (cadr bl3fe0@x) bl3fda@formals))) (cdr bl3fd6@e)) (let ((bl3fe2@args (map (let ((bl3fe4@r (map cons bl3fda@formals bl3fdb@actuals))) (lambda (bl3fe6@x) (cdr (assq (cadr bl3fe6@x) bl3fe4@r)))) (cdr bl3fd6@e)))) (cons 'map (cons (list 'primitive (car bl3fd6@e)) bl3fe2@args))) (cons* 'map (list 'lambda bl3fda@formals bl3fd6@e) bl3fdb@actuals)))))) (bl3f9d@gen-cons (lambda (bl3fc6@e bl3fc7@x bl3fc8@y bl3fc9@xnew bl3fca@ynew) (let ((bl3fd0@t (car bl3fca@ynew))) (if (memv bl3fd0@t '(quote)) (if (eq? (car bl3fc9@xnew) 'quote) (let ((bl3fd2@xnew (cadr bl3fc9@xnew)) (bl3fd3@ynew (cadr bl3fca@ynew))) (if (and (eq? bl3fd2@xnew bl3fc7@x) (eq? bl3fd3@ynew bl3fc8@y)) (list 'quote bl3fc6@e) (list 'quote (cons bl3fd2@xnew bl3fd3@ynew)))) (if (null? (cadr bl3fca@ynew)) (list 'list bl3fc9@xnew) (list 'cons bl3fc9@xnew bl3fca@ynew))) (if (memv bl3fd0@t '(list)) (cons 'list (cons bl3fc9@xnew (cdr bl3fca@ynew))) (list 'cons bl3fc9@xnew bl3fca@ynew)))))) (bl3f9f@gen-vector (lambda (bl3fc0@e bl3fc1@ls bl3fc2@lsnew) (if (eq? (car bl3fc2@lsnew) 'quote) (if (eq? (cadr bl3fc2@lsnew) bl3fc1@ls) (list 'quote bl3fc0@e) (list 'quote (list->vector (cadr bl3fc2@lsnew)))) (if (eq? (car bl3fc2@lsnew) 'list) (cons 'vector (cdr bl3fc2@lsnew)) (list 'list->vector bl3fc2@lsnew))))) (bl3fa1@regen (lambda (bl3fba@x) (let ((bl3fbc@t (car bl3fba@x))) (if (memv bl3fbc@t '(ref)) (cadr bl3fba@x) (if (memv bl3fbc@t '(primitive)) (list 'primitive (cadr bl3fba@x)) (if (memv bl3fbc@t '(quote)) (list 'quote (cadr bl3fba@x)) (if (memv bl3fbc@t '(lambda)) (bl2e55@bl2d87@build-lambda '#f (cadr bl3fba@x) (bl3fa1@regen (caddr bl3fba@x))) (if (memv bl3fbc@t '(map)) (let ((bl3fbe@ls (map bl3fa1@regen (cdr bl3fba@x)))) (cons '(primitive ellipsis-map) bl3fbe@ls)) (cons (list 'primitive (car bl3fba@x)) (map bl3fa1@regen (cdr bl3fba@x)))))))))))) (lambda (bl3fa2@e bl3fa3@r bl3fa4@mr) (let ((bl3fa8@t bl3fa2@e)) (let ((bl3faa@ls/false (bl30f9@syntax-dispatch bl3fa8@t '(_ any)))) (if bl3faa@ls/false (apply (lambda (bl3fac@x) (call-with-values (lambda () (bl3f93@gen-syntax bl3fa2@e bl3fac@x bl3fa3@r '() bl30fb@ellipsis? '#f)) (lambda (bl3fb2@bl3faf bl3fb3@bl3fb1) (let ((bl3fb6@maps bl3fb3@bl3fb1) (bl3fb7@e bl3fb2@bl3faf)) (bl3fa1@regen bl3fb7@e))))) bl3faa@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl3fa8@t))))))) (set! bl4c0b@bl3105@syntax-transformer bl3105@syntax-transformer) (set! bl3107@core-macro-transformer (lambda (bl40da@name) (let ((bl40dc@t bl40da@name)) (if (memv bl40dc@t '(quote)) bl30a9@quote-transformer (if (memv bl40dc@t '(lambda)) bl30ad@lambda-transformer (if (memv bl40dc@t '(case-lambda)) bl30ab@case-lambda-transformer (if (memv bl40dc@t '(letrec)) bl3091@letrec-transformer (if (memv bl40dc@t '(letrec*)) bl3093@letrec*-transformer (if (memv bl40dc@t '(let)) bl308f@let-transformer (if (memv bl40dc@t '(if)) bl30a1@if-transformer (if (memv bl40dc@t '(and)) bl30a3@and-transformer (if (memv bl40dc@t '(or)) bl30a5@or-transformer (if (memv bl40dc@t '(foreign-call)) bl30f5@foreign-call-transformer (if (memv bl40dc@t '(syntax-case)) bl3101@syntax-case-transformer (if (memv bl40dc@t '(syntax)) bl3105@syntax-transformer (if (memv bl40dc@t '(type-descriptor)) bl3097@type-descriptor-transformer (if (memv bl40dc@t '(record-type-descriptor)) bl3099@record-type-descriptor-transformer (if (memv bl40dc@t '(record-constructor-descriptor)) bl309b@record-constructor-descriptor-transformer (if (memv bl40dc@t '(fluid-let-syntax)) bl3095@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" bl40da@name)))))))))))))))))))) (set! bl4c0c@bl3107@core-macro-transformer bl3107@core-macro-transformer) (set! bl3109@symbol-macro (lambda (bl40de@x bl40df@set) (let ((bl40e2@t bl40de@x)) (let ((bl40e4@ls/false (bl30f9@syntax-dispatch bl40e2@t '(_ any)))) (if (and bl40e4@ls/false (apply (lambda (bl40e6@name) (and (bl2ef2@id? bl40e6@name) (memq (bl2ef4@id->sym bl40e6@name) bl40df@set))) bl40e4@ls/false)) (apply (lambda (bl40e8@name) (bl30af@bless (list 'quote bl40e8@name))) bl40e4@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl40e2@t)))))) (set! bl4c0d@bl3109@symbol-macro bl3109@symbol-macro) (set! bl310b@macro-transformer (lambda (bl40ea@x) (if (procedure? bl40ea@x) bl40ea@x (if (symbol? bl40ea@x) (let ((bl40ec@t bl40ea@x)) (if (memv bl40ec@t '(define-record-type)) bl30ed@define-record-type-macro (if (memv bl40ec@t '(define-struct)) bl30eb@define-struct-macro (if (memv bl40ec@t '(include)) bl30e1@include-macro (if (memv bl40ec@t '(cond)) bl30dd@cond-macro (if (memv bl40ec@t '(let)) bl30b5@let-macro (if (memv bl40ec@t '(do)) bl30d5@do-macro (if (memv bl40ec@t '(or)) bl30d9@or-macro (if (memv bl40ec@t '(and)) bl30db@and-macro (if (memv bl40ec@t '(let*)) bl30d7@let*-macro (if (memv bl40ec@t '(let-values)) bl30b7@let-values-macro (if (memv bl40ec@t '(let*-values)) bl30b9@let*-values-macro (if (memv bl40ec@t '(syntax-rules)) bl30e5@syntax-rules-macro (if (memv bl40ec@t '(quasiquote)) bl30e7@quasiquote-macro (if (memv bl40ec@t '(quasisyntax)) bl30e9@quasisyntax-macro (if (memv bl40ec@t '(with-syntax)) bl30b1@with-syntax-macro (if (memv bl40ec@t '(when)) bl309d@when-macro (if (memv bl40ec@t '(unless)) bl309f@unless-macro (if (memv bl40ec@t '(case)) bl30a7@case-macro (if (memv bl40ec@t '(identifier-syntax)) bl30d3@identifier-syntax-macro (if (memv bl40ec@t '(time)) bl30cb@time-macro (if (memv bl40ec@t '(delay)) bl30cd@delay-macro (if (memv bl40ec@t '(assert)) bl30cf@assert-macro (if (memv bl40ec@t '(endianness)) bl30d1@endianness-macro (if (memv bl40ec@t '(guard)) bl30c7@guard-macro (if (memv bl40ec@t '(define-enumeration)) bl30c9@define-enumeration-macro (if (memv bl40ec@t '(trace-lambda)) bl30bb@trace-lambda-macro (if (memv bl40ec@t '(trace-define)) bl30bd@trace-define-macro (if (memv bl40ec@t '(trace-define-syntax)) bl30bf@trace-define-syntax-macro (if (memv bl40ec@t '(trace-let-syntax)) bl30c3@trace-let-syntax-macro (if (memv bl40ec@t '(trace-letrec-syntax)) bl30c5@trace-letrec-syntax-macro (if (memv bl40ec@t '(define-condition-type)) bl30ef@define-condition-type-macro (if (memv bl40ec@t '(parameterize)) bl30f3@parameterize-macro (if (memv bl40ec@t '(include-into)) bl30e3@include-into-macro (if (memv bl40ec@t '(eol-style)) (lambda (bl40ee@x) (bl3109@symbol-macro bl40ee@x '(none lf cr crlf nel crnel ls))) (if (memv bl40ec@t '(error-handling-mode)) (lambda (bl40f0@x) (bl3109@symbol-macro bl40f0@x '(ignore raise replace))) (if (memv bl40ec@t '(buffer-mode)) (lambda (bl40f2@x) (bl3109@symbol-macro bl40f2@x '(none line block))) (if (memv bl40ec@t '(file-options)) bl2e6d@file-options-macro (if (memv bl40ec@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) bl30f1@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" bl40ea@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" bl40ea@x))))) (set! bl4c0e@bl310b@macro-transformer bl310b@macro-transformer) (set! bl310d@local-macro-transformer (lambda (bl40f4@x) (car bl40f4@x))) (set! bl4c0f@bl310d@local-macro-transformer bl310d@local-macro-transformer) (set! bl310f@do-macro-call (lambda (bl40f6@transformer bl40f7@expr bl40f8@rib) (let ((bl40fc@out (bl40f6@transformer (bl2ede@add-mark bl2ed6@anti-mark '#f bl40f7@expr '#f)))) (begin (let bl4100@f ((bl40fe@x bl40fc@out)) (if (not (bl2ebe@stx? bl40fe@x)) (if (pair? bl40fe@x) (begin (bl4100@f (car bl40fe@x)) (bl4100@f (cdr bl40fe@x))) (if (vector? bl40fe@x) (vector-for-each bl4100@f bl40fe@x) (if (symbol? bl40fe@x) (bl31d9@syntax-violation '#f '"raw symbol encountered in output of macro" bl40f7@expr bl40fe@x) (void)))) (void))) (bl2ede@add-mark (bl2ed4@gen-mark) bl40f8@rib bl40fc@out bl40f7@expr))))) (set! bl4c10@bl310f@do-macro-call bl310f@do-macro-call) (set! bl3111@chi-macro (lambda (bl4102@p bl4103@e bl4104@rib) (bl310f@do-macro-call (bl310b@macro-transformer bl4102@p) bl4103@e bl4104@rib))) (set! bl4c11@bl3111@chi-macro bl3111@chi-macro) (set! bl3113@chi-local-macro (lambda (bl4108@p bl4109@e bl410a@rib) (bl310f@do-macro-call (bl310d@local-macro-transformer bl4108@p) bl4109@e bl410a@rib))) (set! bl4c12@bl3113@chi-local-macro bl3113@chi-local-macro) (set! bl3115@chi-global-macro (lambda (bl410e@p bl410f@e bl4110@rib) (let ((bl4114@lib (car bl410e@p)) (bl4115@loc (cdr bl410e@p))) (begin (bl2d0f@bl2b5e@visit-library bl4114@lib) (let ((bl4118@x (symbol-value bl4115@loc))) (let ((bl411a@transformer (if (procedure? bl4118@x) bl4118@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" bl4118@x)))) (bl310f@do-macro-call bl411a@transformer bl410f@e bl4110@rib))))))) (set! bl4c13@bl3115@chi-global-macro bl3115@chi-global-macro) (set! bl3117@chi-expr* (lambda (bl411c@e* bl411d@r bl411e@mr) (if (null? bl411c@e*) '() (let ((bl4122@e (bl311b@chi-expr (car bl411c@e*) bl411d@r bl411e@mr))) (cons bl4122@e (bl3117@chi-expr* (cdr bl411c@e*) bl411d@r bl411e@mr)))))) (set! bl4c14@bl3117@chi-expr* bl3117@chi-expr*) (set! bl3119@chi-application (lambda (bl4124@e bl4125@r bl4126@mr) (let ((bl412a@t bl4124@e)) (let ((bl412c@ls/false (bl30f9@syntax-dispatch bl412a@t '(any . each-any)))) (if bl412c@ls/false (apply (lambda (bl412e@rator bl412f@rands) (let ((bl4132@rator (bl311b@chi-expr bl412e@rator bl4125@r bl4126@mr))) (cons bl4132@rator (bl3117@chi-expr* bl412f@rands bl4125@r bl4126@mr)))) bl412c@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl412a@t)))))) (set! bl4c15@bl3119@chi-application bl3119@chi-application) (set! bl311b@chi-expr (lambda (bl4134@e bl4135@r bl4136@mr) (call-with-values (lambda () (bl2f14@syntax-type bl4134@e bl4135@r)) (lambda (bl4140@bl413b bl4141@bl413d bl4142@bl413f) (let ((bl4146@kwd bl4142@bl413f) (bl4147@value bl4141@bl413d) (bl4148@type bl4140@bl413b)) (let ((bl414c@t bl4148@type)) (if (memv bl414c@t '(core-macro)) (let ((bl414e@transformer (bl3107@core-macro-transformer bl4147@value))) (bl414e@transformer bl4134@e bl4135@r bl4136@mr)) (if (memv bl414c@t '(global)) (let ((bl4150@lib (car bl4147@value))) (let ((bl4152@loc (cdr bl4147@value))) (begin ((bl3161@inv-collector) bl4150@lib) bl4152@loc))) (if (memv bl414c@t '(core-prim)) (let ((bl4154@name bl4147@value)) (list 'primitive bl4154@name)) (if (memv bl414c@t '(call)) (bl3119@chi-application bl4134@e bl4135@r bl4136@mr) (if (memv bl414c@t '(lexical)) (let ((bl4156@lex (bl3083@lexical-var bl4147@value))) bl4156@lex) (if (memv bl414c@t '(global-macro global-macro!)) (bl311b@chi-expr (bl3115@chi-global-macro bl4147@value bl4134@e '#f) bl4135@r bl4136@mr) (if (memv bl414c@t '(local-macro local-macro!)) (bl311b@chi-expr (bl3113@chi-local-macro bl4147@value bl4134@e '#f) bl4135@r bl4136@mr) (if (memv bl414c@t '(macro macro!)) (bl311b@chi-expr (bl3111@chi-macro bl4147@value bl4134@e '#f) bl4135@r bl4136@mr) (if (memv bl414c@t '(constant)) (let ((bl4158@datum bl4147@value)) (list 'quote bl4158@datum)) (if (memv bl414c@t '(set!)) (bl311d@chi-set! bl4134@e bl4135@r bl4136@mr) (if (memv bl414c@t '(begin)) (let ((bl415a@t bl4134@e)) (let ((bl415c@ls/false (bl30f9@syntax-dispatch bl415a@t '(_ any . each-any)))) (if bl415c@ls/false (apply (lambda (bl415e@x bl415f@x*) (bl2e57@bl2db7@build-sequence '#f (bl3117@chi-expr* (cons bl415e@x bl415f@x*) bl4135@r bl4136@mr))) bl415c@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl415a@t)))) (if (memv bl414c@t '(let-syntax letrec-syntax)) (let ((bl4162@t bl4134@e)) (let ((bl4164@ls/false (bl30f9@syntax-dispatch bl4162@t '(_ #(each (any any)) any . each-any)))) (if (and bl4164@ls/false (apply (lambda (bl4166@xlhs* bl4167@xrhs* bl4168@xbody bl4169@xbody*) (if (not (bl2efa@valid-bound-ids? bl4166@xlhs*)) (bl31d9@syntax-violation '#f '"invalid identifiers" bl4134@e) (void))) bl4164@ls/false)) (apply (lambda (bl416e@xlhs* bl416f@xrhs* bl4170@xbody bl4171@xbody*) (let ((bl4176@xlab* (map bl2e7e@gen-label bl416e@xlhs*))) (let ((bl4178@xrib (bl2eb2@make-full-rib bl416e@xlhs* bl4176@xlab*))) (let ((bl417a@xb* (map (lambda (bl417c@x) (bl2f2a@make-eval-transformer (bl3153@expand-transformer (if (eq? bl4148@type 'let-syntax) bl417c@x (bl2edc@add-subst bl4178@xrib bl417c@x)) bl4136@mr))) bl416f@xrhs*))) (bl2e57@bl2db7@build-sequence '#f (bl3117@chi-expr* (map (lambda (bl417e@x) (bl2edc@add-subst bl4178@xrib bl417e@x)) (cons bl4170@xbody bl4171@xbody*)) (append (map cons bl4176@xlab* bl417a@xb*) bl4135@r) (append (map cons bl4176@xlab* bl417a@xb*) bl4136@mr))))))) bl4164@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl4162@t)))) (if (memv bl414c@t '(displaced-lexical)) (bl31d9@syntax-violation '#f '"identifier out of context" bl4134@e) (if (memv bl414c@t '(syntax)) (bl31d9@syntax-violation '#f '"reference to pattern variable outside a syntax form" bl4134@e) (if (memv bl414c@t '(define define-syntax module import library)) (bl31d9@syntax-violation '#f (string-append (let ((bl4180@t bl4148@type)) (if (memv bl4180@t '(define)) '"a definition" (if (memv bl4180@t '(define-syntax)) '"a define-syntax" (if (memv bl4180@t '(module)) '"a module definition" (if (memv bl4180@t '(library)) '"a library definition" (if (memv bl4180@t '(import)) '"an import declaration" (if (memv bl4180@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") bl4134@e) (if (memv bl414c@t '(mutable)) (bl31d9@syntax-violation '#f '"attempt to reference an unexportable variable" bl4134@e) (bl31d9@syntax-violation '#f '"invalid expression" bl4134@e))))))))))))))))))))))) (set! bl4c16@bl311b@chi-expr bl311b@chi-expr) (set! bl311d@chi-set! (lambda (bl4182@e bl4183@r bl4184@mr) (let ((bl4188@t bl4182@e)) (let ((bl418a@ls/false (bl30f9@syntax-dispatch bl4188@t '(_ any any)))) (if (and bl418a@ls/false (apply (lambda (bl418c@x bl418d@v) (bl2ef2@id? bl418c@x)) bl418a@ls/false)) (apply (lambda (bl4190@x bl4191@v) (call-with-values (lambda () (bl2f14@syntax-type bl4190@x bl4183@r)) (lambda (bl419a@bl4195 bl419b@bl4197 bl419c@bl4199) (let ((bl41a0@kwd bl419c@bl4199) (bl41a1@value bl419b@bl4197) (bl41a2@type bl419a@bl4195)) (let ((bl41a6@t bl41a2@type)) (if (memv bl41a6@t '(lexical)) (begin (bl3087@set-lexical-mutable! bl41a1@value '#t) (list 'set! (bl3083@lexical-var bl41a1@value) (bl311b@chi-expr bl4191@v bl4183@r bl4184@mr))) (if (memv bl41a6@t '(core-prim)) (bl31d9@syntax-violation '#f '"cannot modify imported core primitive" bl4182@e) (if (memv bl41a6@t '(global)) (bl31d9@syntax-violation '#f '"attempt to modify imported binding" bl4182@e) (if (memv bl41a6@t '(global-macro!)) (bl311b@chi-expr (bl3115@chi-global-macro bl41a1@value bl4182@e '#f) bl4183@r bl4184@mr) (if (memv bl41a6@t '(local-macro!)) (bl311b@chi-expr (bl3113@chi-local-macro bl41a1@value bl4182@e '#f) bl4183@r bl4184@mr) (if (memv bl41a6@t '(mutable)) (bl31d9@syntax-violation '#f '"attempt to assign to an unexportable variable" bl4182@e) (bl31d9@syntax-violation '#f '"invalid syntax" bl4182@e)))))))))))) bl418a@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl4188@t)))))) (set! bl4c17@bl311d@chi-set! bl311d@chi-set!) (set! bl311f@verify-formals (lambda (bl41a8@fmls bl41a9@stx) (let ((bl41ac@t bl41a8@fmls)) (let ((bl41ae@ls/false (bl30f9@syntax-dispatch bl41ac@t 'each-any))) (if bl41ae@ls/false (apply (lambda (bl41b0@x*) (if (not (bl2efa@valid-bound-ids? bl41b0@x*)) (bl30b3@invalid-fmls-error bl41a9@stx bl41a8@fmls) (void))) bl41ae@ls/false) (let ((bl41b2@t bl41ac@t)) (let ((bl41b4@ls/false (bl30f9@syntax-dispatch bl41b2@t '#(each+ any () any)))) (if bl41b4@ls/false (apply (lambda (bl41b6@x* bl41b7@x) (if (not (bl2efa@valid-bound-ids? (cons bl41b7@x bl41b6@x*))) (bl30b3@invalid-fmls-error bl41a9@stx bl41a8@fmls) (void))) bl41b4@ls/false) (let ((bl41ba@t bl41b2@t)) (let ((bl41bc@ls/false (bl30f9@syntax-dispatch bl41ba@t '_))) (if bl41bc@ls/false (apply (lambda () (bl31d9@syntax-violation '#f '"invalid syntax" bl41a9@stx)) bl41bc@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl41ba@t)))))))))))) (set! bl4c18@bl311f@verify-formals bl311f@verify-formals) (set! bl3121@chi-lambda-clause (lambda (bl41be@stx bl41bf@fmls bl41c0@body* bl41c1@r bl41c2@mr) (let ((bl41c8@t bl41bf@fmls)) (let ((bl41ca@ls/false (bl30f9@syntax-dispatch bl41c8@t 'each-any))) (if bl41ca@ls/false (apply (lambda (bl41cc@x*) (begin (bl311f@verify-formals bl41bf@fmls bl41be@stx) (let ((bl41ce@lex* (map bl2e7a@gen-lexical bl41cc@x*)) (bl41cf@lab* (map bl2e7e@gen-label bl41cc@x*))) (values bl41ce@lex* (bl3131@chi-internal (bl2edc@add-subst (bl2eb2@make-full-rib bl41cc@x* bl41cf@lab*) bl41c0@body*) (bl308b@add-lexicals bl41cf@lab* bl41ce@lex* bl41c1@r) bl41c2@mr))))) bl41ca@ls/false) (let ((bl41d2@t bl41c8@t)) (let ((bl41d4@ls/false (bl30f9@syntax-dispatch bl41d2@t '#(each+ any () any)))) (if bl41d4@ls/false (apply (lambda (bl41d6@x* bl41d7@x) (begin (bl311f@verify-formals bl41bf@fmls bl41be@stx) (let ((bl41da@lex* (map bl2e7a@gen-lexical bl41d6@x*)) (bl41db@lab* (map bl2e7e@gen-label bl41d6@x*)) (bl41dc@lex (bl2e7a@gen-lexical bl41d7@x)) (bl41dd@lab (bl2e7e@gen-label bl41d7@x))) (values (append bl41da@lex* bl41dc@lex) (bl3131@chi-internal (bl2edc@add-subst (bl2eb2@make-full-rib (cons bl41d7@x bl41d6@x*) (cons bl41dd@lab bl41db@lab*)) bl41c0@body*) (bl308b@add-lexicals (cons bl41dd@lab bl41db@lab*) (cons bl41dc@lex bl41da@lex*) bl41c1@r) bl41c2@mr))))) bl41d4@ls/false) (let ((bl41e2@t bl41d2@t)) (let ((bl41e4@ls/false (bl30f9@syntax-dispatch bl41e2@t '_))) (if bl41e4@ls/false (apply (lambda () (bl31d9@syntax-violation '#f '"invalid syntax" bl41bf@fmls)) bl41e4@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl41e2@t)))))))))))) (set! bl4c19@bl3121@chi-lambda-clause bl3121@chi-lambda-clause) (set! bl3123@chi-lambda-clause* (lambda (bl41e6@stx bl41e7@fmls* bl41e8@body** bl41e9@r bl41ea@mr) (if (null? bl41e7@fmls*) (values '() '()) (call-with-values (lambda () (bl3121@chi-lambda-clause bl41e6@stx (car bl41e7@fmls*) (car bl41e8@body**) bl41e9@r bl41ea@mr)) (lambda (bl41f4@bl41f1 bl41f5@bl41f3) (let ((bl41f8@b bl41f5@bl41f3) (bl41f9@a bl41f4@bl41f1)) (call-with-values (lambda () (bl3123@chi-lambda-clause* bl41e6@stx (cdr bl41e7@fmls*) (cdr bl41e8@body**) bl41e9@r bl41ea@mr)) (lambda (bl4200@bl41fd bl4201@bl41ff) (let ((bl4204@b* bl4201@bl41ff) (bl4205@a* bl4200@bl41fd)) (values (cons bl41f9@a bl4205@a*) (cons bl41f8@b bl4204@b*))))))))))) (set! bl4c1a@bl3123@chi-lambda-clause* bl3123@chi-lambda-clause*) (set! bl3125@chi-defun (lambda (bl4208@x bl4209@r bl420a@mr) (let ((bl420e@fmls (car bl4208@x)) (bl420f@body* (cdr bl4208@x))) (call-with-values (lambda () (bl3121@chi-lambda-clause bl420e@fmls bl420e@fmls bl420f@body* bl4209@r bl420a@mr)) (lambda (bl4216@bl4213 bl4217@bl4215) (let ((bl421a@body bl4217@bl4215) (bl421b@fmls bl4216@bl4213)) (bl2e55@bl2d87@build-lambda '#f bl421b@fmls bl421a@body))))))) (set! bl4c1b@bl3125@chi-defun bl3125@chi-defun) (set! bl3127@chi-rhs (lambda (bl421e@rhs bl421f@r bl4220@mr) (let ((bl4224@t (car bl421e@rhs))) (if (memv bl4224@t '(defun)) (bl3125@chi-defun (cdr bl421e@rhs) bl421f@r bl4220@mr) (if (memv bl4224@t '(expr)) (let ((bl4226@expr (cdr bl421e@rhs))) (bl311b@chi-expr bl4226@expr bl421f@r bl4220@mr)) (if (memv bl4224@t '(top-expr)) (let ((bl4228@expr (cdr bl421e@rhs))) (bl2e57@bl2db7@build-sequence '#f (list (bl311b@chi-expr bl4228@expr bl421f@r bl4220@mr) (bl2e58@bl2db9@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" bl421e@rhs))))))) (set! bl4c1c@bl3127@chi-rhs bl3127@chi-rhs) (set! bl3129@expand-interaction-rhs*/init* (lambda (bl422a@lhs* bl422b@rhs* bl422c@init* bl422d@r bl422e@mr) (let bl4238@f ((bl4234@lhs* bl422a@lhs*) (bl4235@rhs* bl422b@rhs*)) (if (null? bl4234@lhs*) (map (lambda (bl423a@x) (bl311b@chi-expr bl423a@x bl422d@r bl422e@mr)) bl422c@init*) (let ((bl423c@lhs (car bl4234@lhs*)) (bl423d@rhs (car bl4235@rhs*))) (let ((bl4240@t (car bl423d@rhs))) (if (memv bl4240@t '(defun)) (let ((bl4242@rhs (bl3125@chi-defun (cdr bl423d@rhs) bl422d@r bl422e@mr))) (cons (list 'set! bl423c@lhs bl4242@rhs) (bl4238@f (cdr bl4234@lhs*) (cdr bl4235@rhs*)))) (if (memv bl4240@t '(expr)) (let ((bl4244@rhs (bl311b@chi-expr (cdr bl423d@rhs) bl422d@r bl422e@mr))) (cons (list 'set! bl423c@lhs bl4244@rhs) (bl4238@f (cdr bl4234@lhs*) (cdr bl4235@rhs*)))) (if (memv bl4240@t '(top-expr)) (let ((bl4246@e (bl311b@chi-expr (cdr bl423d@rhs) bl422d@r bl422e@mr))) (cons bl4246@e (bl4238@f (cdr bl4234@lhs*) (cdr bl4235@rhs*)))) (error 'expand-interaction '"invallid" bl423d@rhs)))))))))) (set! bl4c1d@bl3129@expand-interaction-rhs*/init* bl3129@expand-interaction-rhs*/init*) (set! bl312b@chi-rhs* (lambda (bl4248@rhs* bl4249@r bl424a@mr) (let bl4250@f ((bl424e@ls bl4248@rhs*)) (if (null? bl424e@ls) '() (let ((bl4252@a (bl3127@chi-rhs (car bl424e@ls) bl4249@r bl424a@mr))) (cons bl4252@a (bl4250@f (cdr bl424e@ls)))))))) (set! bl4c1e@bl312b@chi-rhs* bl312b@chi-rhs*) (set! bl312d@find-bound=? (lambda (bl4254@x bl4255@lhs* bl4256@rhs*) (if (null? bl4255@lhs*) '#f (if (bl2ef6@bound-id=? bl4254@x (car bl4255@lhs*)) (car bl4256@rhs*) (bl312d@find-bound=? bl4254@x (cdr bl4255@lhs*) (cdr bl4256@rhs*)))))) (set! bl4c1f@bl312d@find-bound=? bl312d@find-bound=?) (set! bl312f@find-dups (lambda (bl425a@ls) (let bl4260@f ((bl425c@ls bl425a@ls) (bl425d@dups '())) (if (null? bl425c@ls) bl425d@dups (let ((bl4262@t (bl312d@find-bound=? (car bl425c@ls) (cdr bl425c@ls) (cdr bl425c@ls)))) (if bl4262@t ((lambda (bl4264@x) (bl4260@f (cdr bl425c@ls) (cons (list (car bl425c@ls) bl4264@x) bl425d@dups))) bl4262@t) (bl4260@f (cdr bl425c@ls) bl425d@dups))))))) (set! bl4c20@bl312f@find-dups bl312f@find-dups) (set! bl3131@chi-internal (lambda (bl4266@e* bl4267@r bl4268@mr) (let ((bl426c@rib (bl2ea6@make-empty-rib))) (call-with-values (lambda () (bl3151@chi-body* (map (lambda (bl427e@x) (bl2edc@add-subst bl426c@rib bl427e@x)) (bl2ef0@syntax->list bl4266@e*)) bl4267@r bl4268@mr '() '() '() '() '() bl426c@rib '#f)) (lambda (bl4280@bl426f bl4281@bl4271 bl4282@bl4273 bl4283@bl4275 bl4284@bl4277 bl4285@bl4279 bl4286@bl427b bl4287@bl427d) (let ((bl4290@_exp* bl4287@bl427d) (bl4291@kwd* bl4286@bl427b) (bl4292@mod** bl4285@bl4279) (bl4293@rhs* bl4284@bl4277) (bl4294@lex* bl4283@bl4275) (bl4295@mr bl4282@bl4273) (bl4296@r bl4281@bl4271) (bl4297@e* bl4280@bl426f)) (begin (if (null? bl4297@e*) (bl31d9@syntax-violation '#f '"no expression in body" bl4297@e*) (void)) (let ((bl42a0@init* (bl3117@chi-expr* (append (apply append (reverse bl4292@mod**)) bl4297@e*) bl4296@r bl4295@mr))) (let ((bl42a2@rhs* (bl312b@chi-rhs* bl4293@rhs* bl4296@r bl4295@mr))) (bl2e5c@bl2dc1@build-letrec* '#f (reverse bl4294@lex*) (reverse bl42a2@rhs*) (bl2e57@bl2db7@build-sequence '#f bl42a0@init*))))))))))) (set! bl4c21@bl3131@chi-internal bl3131@chi-internal) (set! bl3133@parse-module (lambda (bl42a4@e) (let ((bl42a6@t bl42a4@e)) (let ((bl42a8@ls/false (bl30f9@syntax-dispatch bl42a6@t '(_ each-any . each-any)))) (if bl42a8@ls/false (apply (lambda (bl42aa@export* bl42ab@b*) (begin (if (not (for-all bl2ef2@id? bl42aa@export*)) (bl31d9@syntax-violation '#f '"module exports must be identifiers" bl42a4@e) (void)) (values '#f (list->vector bl42aa@export*) bl42ab@b*))) bl42a8@ls/false) (let ((bl42ae@t bl42a6@t)) (let ((bl42b0@ls/false (bl30f9@syntax-dispatch bl42ae@t '(_ any each-any . each-any)))) (if bl42b0@ls/false (apply (lambda (bl42b2@name bl42b3@export* bl42b4@b*) (begin (if (not (bl2ef2@id? bl42b2@name)) (bl31d9@syntax-violation '#f '"module name must be an identifier" bl42a4@e) (void)) (if (not (for-all bl2ef2@id? bl42b3@export*)) (bl31d9@syntax-violation '#f '"module exports must be identifiers" bl42a4@e) (void)) (values bl42b2@name (list->vector bl42b3@export*) bl42b4@b*))) bl42b0@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl42ae@t))))))))) (set! bl4c22@bl3133@parse-module bl3133@parse-module) (set! bl313d@module-interface? (lambda (bl42b8@x) (and (simple-struct? bl42b8@x) (eq? (simple-struct-name bl42b8@x) 'module-interface)))) (set! bl4c23@bl313d@module-interface? bl313d@module-interface?) (set! bl313f@module-interface-first-mark (lambda (bl42ba@x) (simple-struct-ref bl42ba@x '0))) (set! bl4c24@bl313f@module-interface-first-mark bl313f@module-interface-first-mark) (set! bl3141@set-module-interface-first-mark! (lambda (bl42bc@x bl42bd@val) (simple-struct-set! bl42bc@x '0 bl42bd@val))) (set! bl4c25@bl3141@set-module-interface-first-mark! bl3141@set-module-interface-first-mark!) (set! bl3143@module-interface-exp-id-vec (lambda (bl42c0@x) (simple-struct-ref bl42c0@x '1))) (set! bl4c26@bl3143@module-interface-exp-id-vec bl3143@module-interface-exp-id-vec) (set! bl3145@set-module-interface-exp-id-vec! (lambda (bl42c2@x bl42c3@val) (simple-struct-set! bl42c2@x '1 bl42c3@val))) (set! bl4c27@bl3145@set-module-interface-exp-id-vec! bl3145@set-module-interface-exp-id-vec!) (set! bl3147@module-interface-exp-lab-vec (lambda (bl42c6@x) (simple-struct-ref bl42c6@x '2))) (set! bl4c28@bl3147@module-interface-exp-lab-vec bl3147@module-interface-exp-lab-vec) (set! bl3149@set-module-interface-exp-lab-vec! (lambda (bl42c8@x bl42c9@val) (simple-struct-set! bl42c8@x '2 bl42c9@val))) (set! bl4c29@bl3149@set-module-interface-exp-lab-vec! bl3149@set-module-interface-exp-lab-vec!) (set! bl314b@dummy '3) (set! bl4c2a@bl314b@dummy bl314b@dummy) (set! bl314d@module-interface-exp-id* (lambda (bl42cc@iface bl42cd@id) (letrec* ((bl42d1@diff-marks (lambda (bl42d8@ls bl42d9@x) (begin (if (null? bl42d8@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((bl42dc@a (car bl42d8@ls))) (if (eq? bl42dc@a bl42d9@x) '() (cons bl42dc@a (bl42d1@diff-marks (cdr bl42d8@ls) bl42d9@x)))))))) (let ((bl42d2@diff (bl42d1@diff-marks (bl2ec4@stx-mark* bl42cd@id) (bl313f@module-interface-first-mark bl42cc@iface))) (bl42d3@id-vec (bl3143@module-interface-exp-id-vec bl42cc@iface))) (if (null? bl42d2@diff) bl42d3@id-vec (vector-map (lambda (bl42d6@x) (make-simple-struct 'stx '5 (list (bl2ec0@stx-expr bl42d6@x) (append bl42d2@diff (bl2ec4@stx-mark* bl42d6@x)) '() '()))) bl42d3@id-vec)))))) (set! bl4c2b@bl314d@module-interface-exp-id* bl314d@module-interface-exp-id*) (set! bl314f@chi-internal-module (lambda (bl42de@e bl42df@r bl42e0@mr bl42e1@lex* bl42e2@rhs* bl42e3@mod** bl42e4@kwd*) (call-with-values (lambda () (bl3133@parse-module bl42de@e)) (lambda (bl42f2@bl42ed bl42f3@bl42ef bl42f4@bl42f1) (let ((bl42f8@e* bl42f4@bl42f1) (bl42f9@exp-id* bl42f3@bl42ef) (bl42fa@name bl42f2@bl42ed)) (let ((bl42fe@rib (bl2ea6@make-empty-rib))) (let ((bl4300@e* (map (lambda (bl4302@x) (bl2edc@add-subst bl42fe@rib bl4302@x)) (bl2ef0@syntax->list bl42f8@e*)))) (call-with-values (lambda () (bl3151@chi-body* bl4300@e* bl42df@r bl42e0@mr bl42e1@lex* bl42e2@rhs* bl42e3@mod** bl42e4@kwd* '() bl42fe@rib '#f)) (lambda (bl4314@bl4305 bl4315@bl4307 bl4316@bl4309 bl4317@bl430b bl4318@bl430d bl4319@bl430f bl431a@bl4311 bl431b@bl4313) (let ((bl4324@_exp* bl431b@bl4313) (bl4325@kwd* bl431a@bl4311) (bl4326@mod** bl4319@bl430f) (bl4327@rhs* bl4318@bl430d) (bl4328@lex* bl4317@bl430b) (bl4329@mr bl4316@bl4309) (bl432a@r bl4315@bl4307) (bl432b@e* bl4314@bl4305)) (let ((bl4334@exp-lab* (vector-map (lambda (bl4338@x) (or (bl2f08@id->label (make-simple-struct 'stx '5 (list (bl2ef4@id->sym bl4338@x) (bl2ec4@stx-mark* bl4338@x) (list bl42fe@rib) '()))) (bl31d9@syntax-violation '#f '"cannot find module export" bl4338@x))) bl42f9@exp-id*)) (bl4335@mod** (cons bl432b@e* bl4326@mod**))) (if (not bl42fa@name) (values bl4328@lex* bl4327@rhs* bl42f9@exp-id* bl4334@exp-lab* bl432a@r bl4329@mr bl4335@mod** bl4325@kwd*) (let ((bl433a@lab (bl2e7e@gen-label 'module)) (bl433b@iface (make-simple-struct 'module-interface '4 (list (car (bl2ec4@stx-mark* bl42fa@name)) (vector-map (lambda (bl433e@x) (make-simple-struct 'stx '5 (list (bl2ec0@stx-expr bl433e@x) (bl2ec4@stx-mark* bl433e@x) '() '()))) bl42f9@exp-id*) bl4334@exp-lab*)))) (values bl4328@lex* bl4327@rhs* (vector bl42fa@name) (vector bl433a@lab) (cons (cons bl433a@lab (cons '$module bl433b@iface)) bl432a@r) (cons (cons bl433a@lab (cons '$module bl433b@iface)) bl4329@mr) bl4335@mod** bl4325@kwd*)))))))))))))) (set! bl4c2c@bl314f@chi-internal-module bl314f@chi-internal-module) (set! bl3151@chi-body* (lambda (bl4340@e* bl4341@r bl4342@mr bl4343@lex* bl4344@rhs* bl4345@mod** bl4346@kwd* bl4347@exp* bl4348@rib bl4349@top?) (if (null? bl4340@e*) (values bl4340@e* bl4341@r bl4342@mr bl4343@lex* bl4344@rhs* bl4345@mod** bl4346@kwd* bl4347@exp*) (let ((bl4354@e (car bl4340@e*))) (call-with-values (lambda () (bl2f14@syntax-type bl4354@e bl4341@r)) (lambda (bl435c@bl4357 bl435d@bl4359 bl435e@bl435b) (let ((bl4362@kwd bl435e@bl435b) (bl4363@value bl435d@bl4359) (bl4364@type bl435c@bl4357)) (let ((bl4368@kwd* (if (bl2ef2@id? bl4362@kwd) (cons bl4362@kwd bl4346@kwd*) bl4346@kwd*))) (let ((bl436a@t bl4364@type)) (if (memv bl436a@t '(define)) (call-with-values (lambda () (bl307b@parse-define bl4354@e)) (lambda (bl4370@bl436d bl4371@bl436f) (let ((bl4374@rhs bl4371@bl436f) (bl4375@id bl4370@bl436d)) (begin (if (bl2efe@bound-id-member? bl4375@id bl4368@kwd*) (bl31d9@syntax-violation '#f '"cannot redefine keyword" bl4354@e) (void)) (call-with-values (lambda () (bl2e82@gen-define-label+loc bl4375@id bl4348@rib)) (lambda (bl437c@bl4379 bl437d@bl437b) (let ((bl4380@lex bl437d@bl437b) (bl4381@lab bl437c@bl4379)) (begin (bl2ea8@extend-rib! bl4348@rib bl4375@id bl4381@lab) (bl3151@chi-body* (cdr bl4340@e*) (bl3089@add-lexical bl4381@lab bl4380@lex bl4341@r) bl4342@mr (cons bl4380@lex bl4343@lex*) (cons bl4374@rhs bl4344@rhs*) bl4345@mod** bl4368@kwd* bl4347@exp* bl4348@rib bl4349@top?))))))))) (if (memv bl436a@t '(define-syntax)) (call-with-values (lambda () (bl307d@parse-define-syntax bl4354@e)) (lambda (bl4388@bl4385 bl4389@bl4387) (let ((bl438c@rhs bl4389@bl4387) (bl438d@id bl4388@bl4385)) (begin (if (bl2efe@bound-id-member? bl438d@id bl4368@kwd*) (bl31d9@syntax-violation '#f '"cannot redefine keyword" bl4354@e) (void)) (let ((bl4390@lab (bl2e84@gen-define-label bl438d@id bl4348@rib)) (bl4391@expanded-rhs (bl3153@expand-transformer bl438c@rhs bl4342@mr))) (begin (bl2ea8@extend-rib! bl4348@rib bl438d@id bl4390@lab) (let ((bl4394@b (bl2f2a@make-eval-transformer bl4391@expanded-rhs))) (bl3151@chi-body* (cdr bl4340@e*) (cons (cons bl4390@lab bl4394@b) bl4341@r) (cons (cons bl4390@lab bl4394@b) bl4342@mr) bl4343@lex* bl4344@rhs* bl4345@mod** bl4368@kwd* bl4347@exp* bl4348@rib bl4349@top?)))))))) (if (memv bl436a@t '(let-syntax letrec-syntax)) (let ((bl4396@t bl4354@e)) (let ((bl4398@ls/false (bl30f9@syntax-dispatch bl4396@t '(_ #(each (any any)) . each-any)))) (if (and bl4398@ls/false (apply (lambda (bl439a@xlhs* bl439b@xrhs* bl439c@xbody*) (if (not (bl2efa@valid-bound-ids? bl439a@xlhs*)) (bl31d9@syntax-violation '#f '"invalid identifiers" bl4354@e) (void))) bl4398@ls/false)) (apply (lambda (bl43a0@xlhs* bl43a1@xrhs* bl43a2@xbody*) (let ((bl43a6@xlab* (map bl2e7e@gen-label bl43a0@xlhs*))) (let ((bl43a8@xrib (bl2eb2@make-full-rib bl43a0@xlhs* bl43a6@xlab*))) (let ((bl43aa@xb* (map (lambda (bl43ac@x) (bl2f2a@make-eval-transformer (bl3153@expand-transformer (if (eq? bl4364@type 'let-syntax) bl43ac@x (bl2edc@add-subst bl43a8@xrib bl43ac@x)) bl4342@mr))) bl43a1@xrhs*))) (bl3151@chi-body* (append (map (lambda (bl43ae@x) (bl2edc@add-subst bl43a8@xrib bl43ae@x)) bl43a2@xbody*) (cdr bl4340@e*)) (append (map cons bl43a6@xlab* bl43aa@xb*) bl4341@r) (append (map cons bl43a6@xlab* bl43aa@xb*) bl4342@mr) bl4343@lex* bl4344@rhs* bl4345@mod** bl4368@kwd* bl4347@exp* bl4348@rib bl4349@top?))))) bl4398@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl4396@t)))) (if (memv bl436a@t '(begin)) (let ((bl43b0@t bl4354@e)) (let ((bl43b2@ls/false (bl30f9@syntax-dispatch bl43b0@t '(_ . each-any)))) (if bl43b2@ls/false (apply (lambda (bl43b4@x*) (bl3151@chi-body* (append bl43b4@x* (cdr bl4340@e*)) bl4341@r bl4342@mr bl4343@lex* bl4344@rhs* bl4345@mod** bl4368@kwd* bl4347@exp* bl4348@rib bl4349@top?)) bl43b2@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl43b0@t)))) (if (memv bl436a@t '(global-macro global-macro!)) (bl3151@chi-body* (cons (bl3115@chi-global-macro bl4363@value bl4354@e bl4348@rib) (cdr bl4340@e*)) bl4341@r bl4342@mr bl4343@lex* bl4344@rhs* bl4345@mod** bl4368@kwd* bl4347@exp* bl4348@rib bl4349@top?) (if (memv bl436a@t '(local-macro local-macro!)) (bl3151@chi-body* (cons (bl3113@chi-local-macro bl4363@value bl4354@e bl4348@rib) (cdr bl4340@e*)) bl4341@r bl4342@mr bl4343@lex* bl4344@rhs* bl4345@mod** bl4368@kwd* bl4347@exp* bl4348@rib bl4349@top?) (if (memv bl436a@t '(macro macro!)) (bl3151@chi-body* (cons (bl3111@chi-macro bl4363@value bl4354@e bl4348@rib) (cdr bl4340@e*)) bl4341@r bl4342@mr bl4343@lex* bl4344@rhs* bl4345@mod** bl4368@kwd* bl4347@exp* bl4348@rib bl4349@top?) (if (memv bl436a@t '(module)) (call-with-values (lambda () (bl314f@chi-internal-module bl4354@e bl4341@r bl4342@mr bl4343@lex* bl4344@rhs* bl4345@mod** bl4368@kwd*)) (lambda (bl43c6@bl43b7 bl43c7@bl43b9 bl43c8@bl43bb bl43c9@bl43bd bl43ca@bl43bf bl43cb@bl43c1 bl43cc@bl43c3 bl43cd@bl43c5) (let ((bl43d6@kwd* bl43cd@bl43c5) (bl43d7@mod** bl43cc@bl43c3) (bl43d8@mr bl43cb@bl43c1) (bl43d9@r bl43ca@bl43bf) (bl43da@m-exp-lab* bl43c9@bl43bd) (bl43db@m-exp-id* bl43c8@bl43bb) (bl43dc@rhs* bl43c7@bl43b9) (bl43dd@lex* bl43c6@bl43b7)) (begin (vector-for-each (lambda (bl43e6@id bl43e7@lab) (bl2ea8@extend-rib! bl4348@rib bl43e6@id bl43e7@lab)) bl43db@m-exp-id* bl43da@m-exp-lab*) (bl3151@chi-body* (cdr bl4340@e*) bl43d9@r bl43d8@mr bl43dd@lex* bl43dc@rhs* bl43d7@mod** bl43d6@kwd* bl4347@exp* bl4348@rib bl4349@top?))))) (if (memv bl436a@t '(library)) (begin (bl31bb@library-expander (bl2f06@stx->datum bl4354@e)) (bl3151@chi-body* (cdr bl4340@e*) bl4341@r bl4342@mr bl4343@lex* bl4344@rhs* bl4345@mod** bl4368@kwd* bl4347@exp* bl4348@rib bl4349@top?)) (if (memv bl436a@t '(export)) (let ((bl43ea@t bl4354@e)) (let ((bl43ec@ls/false (bl30f9@syntax-dispatch bl43ea@t '(_ . each-any)))) (if bl43ec@ls/false (apply (lambda (bl43ee@exp-decl*) (bl3151@chi-body* (cdr bl4340@e*) bl4341@r bl4342@mr bl4343@lex* bl4344@rhs* bl4345@mod** bl4368@kwd* (append bl43ee@exp-decl* bl4347@exp*) bl4348@rib bl4349@top?)) bl43ec@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl43ea@t)))) (if (memv bl436a@t '(import)) (letrec* ((bl43f1@module-import? (lambda (bl4444@e) (let ((bl4446@t bl4444@e)) (let ((bl4448@ls/false (bl30f9@syntax-dispatch bl4446@t '(_ any)))) (if (and bl4448@ls/false (apply (lambda (bl444a@id) (bl2ef2@id? bl444a@id)) bl4448@ls/false)) (apply (lambda (bl444c@id) '#t) bl4448@ls/false) (let ((bl444e@t bl4446@t)) (let ((bl4450@ls/false (bl30f9@syntax-dispatch bl444e@t '(_ . each-any)))) (if bl4450@ls/false (apply (lambda (bl4452@imp*) '#f) bl4450@ls/false) (let ((bl4454@t bl444e@t)) (let ((bl4456@ls/false (bl30f9@syntax-dispatch bl4454@t '_))) (if bl4456@ls/false (apply (lambda () (bl31d9@syntax-violation '#f '"malformed import form" bl4444@e)) bl4456@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl4454@t)))))))))))) (bl43f3@module-import (lambda (bl4422@e bl4423@r) (let ((bl4426@t bl4422@e)) (let ((bl4428@ls/false (bl30f9@syntax-dispatch bl4426@t '(_ any)))) (if (and bl4428@ls/false (apply (lambda (bl442a@id) (bl2ef2@id? bl442a@id)) bl4428@ls/false)) (apply (lambda (bl442c@id) (call-with-values (lambda () (bl2f14@syntax-type bl442c@id bl4423@r)) (lambda (bl4434@bl442f bl4435@bl4431 bl4436@bl4433) (let ((bl443a@kwd bl4436@bl4433) (bl443b@value bl4435@bl4431) (bl443c@type bl4434@bl442f)) (let ((bl4440@t bl443c@type)) (if (memv bl4440@t '($module)) (let ((bl4442@iface bl443b@value)) (values (bl314d@module-interface-exp-id* bl4442@iface bl442c@id) (bl3147@module-interface-exp-lab-vec bl4442@iface))) (bl31d9@syntax-violation '#f '"invalid import" bl4422@e))))))) bl4428@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl4426@t)))))) (bl43f5@library-import (lambda (bl4406@e) (let ((bl4408@t bl4406@e)) (let ((bl440a@ls/false (bl30f9@syntax-dispatch bl4408@t '(any . each-any)))) (if bl440a@ls/false (apply (lambda (bl440c@ctxt bl440d@imp*) (call-with-values (lambda () (bl315b@parse-import-spec* (bl31df@syntax->datum bl440d@imp*))) (lambda (bl4414@bl4411 bl4415@bl4413) (let ((bl4418@subst-labels bl4415@bl4413) (bl4419@subst-names bl4414@bl4411)) (values (vector-map (lambda (bl441c@name) (bl2ed2@datum->stx bl440c@ctxt bl441c@name)) bl4419@subst-names) bl4418@subst-labels))))) bl440a@ls/false) (let ((bl441e@t bl4408@t)) (let ((bl4420@ls/false (bl30f9@syntax-dispatch bl441e@t '_))) (if bl4420@ls/false (apply (lambda () (bl31d9@syntax-violation '#f '"invalid import form" bl4406@e)) bl4420@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl441e@t)))))))))) (begin (call-with-values (lambda () (if (bl43f1@module-import? bl4354@e) (bl43f3@module-import bl4354@e bl4341@r) (bl43f5@library-import bl4354@e))) (lambda (bl43fa@bl43f7 bl43fb@bl43f9) (let ((bl43fe@lab* bl43fb@bl43f9) (bl43ff@id* bl43fa@bl43f7)) (vector-for-each (lambda (bl4402@id bl4403@lab) (bl2ea8@extend-rib! bl4348@rib bl4402@id bl4403@lab)) bl43ff@id* bl43fe@lab*)))) (bl3151@chi-body* (cdr bl4340@e*) bl4341@r bl4342@mr bl4343@lex* bl4344@rhs* bl4345@mod** bl4368@kwd* bl4347@exp* bl4348@rib bl4349@top?))) (if bl4349@top? (bl3151@chi-body* (cdr bl4340@e*) bl4341@r bl4342@mr (cons (bl2e7a@gen-lexical 'dummy) bl4343@lex*) (cons (cons 'top-expr bl4354@e) bl4344@rhs*) bl4345@mod** bl4368@kwd* bl4347@exp* bl4348@rib bl4349@top?) (values bl4340@e* bl4341@r bl4342@mr bl4343@lex* bl4344@rhs* bl4345@mod** bl4368@kwd* bl4347@exp*)))))))))))))))))))))) (set! bl4c2d@bl3151@chi-body* bl3151@chi-body*) (set! bl3153@expand-transformer (lambda (bl4458@expr bl4459@r) (let ((bl445c@rtc (bl315f@make-collector))) (let ((bl445e@expanded-rhs (let ((bl4468@bl4461 bl3161@inv-collector) (bl4469@bl4463 bl3163@vis-collector) (bl446a@bl4465 bl445c@rtc) (bl446b@bl4467 (lambda (bl4470@x) (values)))) (let ((bl4472@swap (lambda () (begin (let ((bl4474@t (bl4468@bl4461))) (begin (bl4468@bl4461 bl446a@bl4465) (set! bl446a@bl4465 bl4474@t))) (let ((bl4476@t (bl4469@bl4463))) (begin (bl4469@bl4463 bl446b@bl4467) (set! bl446b@bl4467 bl4476@t))))))) (dynamic-wind bl4472@swap (lambda () (bl311b@chi-expr bl4458@expr bl4459@r bl4459@r)) bl4472@swap))))) (begin (for-each (let ((bl4478@mark-visit (bl3163@vis-collector))) (lambda (bl447a@x) (begin (bl2d0e@bl2b5c@invoke-library bl447a@x) (bl4478@mark-visit bl447a@x)))) (bl445c@rtc)) bl445e@expanded-rhs))))) (set! bl4c2e@bl3153@expand-transformer bl3153@expand-transformer) (set! bl3155@parse-exports (lambda (bl447c@exp*) (let bl4484@f ((bl447e@exp* bl447c@exp*) (bl447f@int* '()) (bl4480@ext* '())) (if (null? bl447e@exp*) (begin (if (not (bl2efa@valid-bound-ids? bl4480@ext*)) (bl31d9@syntax-violation 'export '"invalid exports" (bl312f@find-dups bl4480@ext*)) (void)) (values (map bl31df@syntax->datum bl4480@ext*) bl447f@int*)) (let ((bl4486@t (car bl447e@exp*))) (let ((bl4488@ls/false (bl30f9@syntax-dispatch bl4486@t '(any . #(each (any any)))))) (if bl4488@ls/false (apply (lambda (bl448a@rename bl448b@i* bl448c@e*) (begin (if (not (and (eq? (bl31df@syntax->datum bl448a@rename) 'rename) (for-all bl2ef2@id? bl448b@i*) (for-all bl2ef2@id? bl448c@e*))) (bl31d9@syntax-violation 'export '"invalid export specifier" (car bl447e@exp*)) (void)) (bl4484@f (cdr bl447e@exp*) (append bl448b@i* bl447f@int*) (append bl448c@e* bl4480@ext*)))) bl4488@ls/false) (let ((bl4490@t bl4486@t)) (let ((bl4492@ls/false (bl30f9@syntax-dispatch bl4490@t 'any))) (if bl4492@ls/false (apply (lambda (bl4494@ie) (begin (if (not (bl2ef2@id? bl4494@ie)) (bl31d9@syntax-violation 'export '"invalid export" bl4494@ie) (void)) (bl4484@f (cdr bl447e@exp*) (cons bl4494@ie bl447f@int*) (cons bl4494@ie bl4480@ext*)))) bl4492@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl4490@t))))))))))) (set! bl4c2f@bl3155@parse-exports bl3155@parse-exports) (set! bl3157@parse-library-name (lambda (bl4496@spec) (letrec* ((bl4499@parse (lambda (bl44a6@x) (let ((bl44a8@t bl44a6@x)) (let ((bl44aa@ls/false (bl30f9@syntax-dispatch bl44a8@t '(each-any)))) (if (and bl44aa@ls/false (apply (lambda (bl44ac@v*) (for-all (lambda (bl44ae@x) (let ((bl44b0@x (bl31df@syntax->datum bl44ae@x))) (and (integer? bl44b0@x) (exact? bl44b0@x)))) bl44ac@v*)) bl44aa@ls/false)) (apply (lambda (bl44b2@v*) (values '() (map bl31df@syntax->datum bl44b2@v*))) bl44aa@ls/false) (let ((bl44b4@t bl44a8@t)) (let ((bl44b6@ls/false (bl30f9@syntax-dispatch bl44b4@t '(any . any)))) (if (and bl44b6@ls/false (apply (lambda (bl44b8@x bl44b9@rest) (symbol? (bl31df@syntax->datum bl44b8@x))) bl44b6@ls/false)) (apply (lambda (bl44bc@x bl44bd@rest) (call-with-values (lambda () (bl4499@parse bl44bd@rest)) (lambda (bl44c4@bl44c1 bl44c5@bl44c3) (let ((bl44c8@v* bl44c5@bl44c3) (bl44c9@x* bl44c4@bl44c1)) (values (cons (bl31df@syntax->datum bl44bc@x) bl44c9@x*) bl44c8@v*))))) bl44b6@ls/false) (let ((bl44cc@t bl44b4@t)) (let ((bl44ce@ls/false (bl30f9@syntax-dispatch bl44cc@t '()))) (if bl44ce@ls/false (apply (lambda () (values '() '())) bl44ce@ls/false) (let ((bl44d0@t bl44cc@t)) (let ((bl44d2@ls/false (bl30f9@syntax-dispatch bl44d0@t '_))) (if bl44d2@ls/false (apply (lambda () (bl31d9@syntax-violation '#f '"invalid library name" bl4496@spec)) bl44d2@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl44d0@t)))))))))))))))) (call-with-values (lambda () (bl4499@parse bl4496@spec)) (lambda (bl449e@bl449b bl449f@bl449d) (let ((bl44a2@ver* bl449f@bl449d) (bl44a3@name* bl449e@bl449b)) (begin (if (null? bl44a3@name*) (bl31d9@syntax-violation '#f '"empty library name" bl4496@spec) (void)) (values bl44a3@name* bl44a2@ver*)))))))) (set! bl4c30@bl3157@parse-library-name bl3157@parse-library-name) (set! bl3159@parse-library (lambda (bl44d4@e) (let ((bl44d6@t bl44d4@e)) (let ((bl44d8@ls/false (bl30f9@syntax-dispatch bl44d6@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and bl44d8@ls/false (apply (lambda (bl44da@library bl44db@name* bl44dc@export bl44dd@exp* bl44de@import bl44df@imp* bl44e0@b*) (and (eq? (bl31df@syntax->datum bl44dc@export) 'export) (eq? (bl31df@syntax->datum bl44de@import) 'import) (eq? (bl31df@syntax->datum bl44da@library) 'library))) bl44d8@ls/false)) (apply (lambda (bl44e8@library bl44e9@name* bl44ea@export bl44eb@exp* bl44ec@import bl44ed@imp* bl44ee@b*) (values bl44e9@name* bl44eb@exp* bl44ed@imp* bl44ee@b*)) bl44d8@ls/false) (let ((bl44f6@t bl44d6@t)) (let ((bl44f8@ls/false (bl30f9@syntax-dispatch bl44f6@t '_))) (if bl44f8@ls/false (apply (lambda () (bl31d9@syntax-violation '#f '"malformed library" bl44d4@e)) bl44f8@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl44f6@t))))))))) (set! bl4c31@bl3159@parse-library bl3159@parse-library) (set! bl315b@parse-import-spec* (letrec* ((bl44fb@idsyn? (lambda (bl4704@x) (symbol? (bl31df@syntax->datum bl4704@x)))) (bl44fd@dup-error (lambda (bl4702@name) (bl31d9@syntax-violation 'import '"two imports with different bindings" bl4702@name))) (bl44ff@merge-substs (lambda (bl46f0@s bl46f1@subst) (letrec* ((bl46f5@insert-to-subst (lambda (bl46f6@a bl46f7@subst) (let ((bl46fa@name (car bl46f6@a)) (bl46fb@label (cdr bl46f6@a))) (let ((bl46fe@t (assq bl46fa@name bl46f7@subst))) (if bl46fe@t ((lambda (bl4700@x) (if (eq? (cdr bl4700@x) bl46fb@label) bl46f7@subst (bl44fd@dup-error bl46fa@name))) bl46fe@t) (cons bl46f6@a bl46f7@subst))))))) (if (null? bl46f0@s) bl46f1@subst (bl46f5@insert-to-subst (car bl46f0@s) (bl44ff@merge-substs (cdr bl46f0@s) bl46f1@subst)))))) (bl4501@exclude* (lambda (bl46c0@sym* bl46c1@subst) (letrec* ((bl46c5@exclude (lambda (bl46de@sym bl46df@subst) (if (null? bl46df@subst) (bl31d9@syntax-violation 'import '"cannot rename unbound identifier" bl46de@sym) (if (eq? bl46de@sym (caar bl46df@subst)) (values (cdar bl46df@subst) (cdr bl46df@subst)) (let ((bl46e2@a (car bl46df@subst))) (call-with-values (lambda () (bl46c5@exclude bl46de@sym (cdr bl46df@subst))) (lambda (bl46e8@bl46e5 bl46e9@bl46e7) (let ((bl46ec@subst bl46e9@bl46e7) (bl46ed@old bl46e8@bl46e5)) (values bl46ed@old (cons bl46e2@a bl46ec@subst))))))))))) (if (null? bl46c0@sym*) (values '() bl46c1@subst) (call-with-values (lambda () (bl46c5@exclude (car bl46c0@sym*) bl46c1@subst)) (lambda (bl46ca@bl46c7 bl46cb@bl46c9) (let ((bl46ce@subst bl46cb@bl46c9) (bl46cf@old bl46ca@bl46c7)) (call-with-values (lambda () (bl4501@exclude* (cdr bl46c0@sym*) bl46ce@subst)) (lambda (bl46d6@bl46d3 bl46d7@bl46d5) (let ((bl46da@subst bl46d7@bl46d5) (bl46db@old* bl46d6@bl46d3)) (values (cons bl46cf@old bl46db@old*) bl46da@subst))))))))))) (bl4503@find* (lambda (bl46b8@sym* bl46b9@subst) (map (lambda (bl46bc@x) (let ((bl46be@t (assq bl46bc@x bl46b9@subst))) (if bl46be@t (cdr bl46be@t) (bl31d9@syntax-violation 'import '"cannot find identifier" bl46bc@x)))) bl46b8@sym*))) (bl4505@rem* (lambda (bl46b0@sym* bl46b1@subst) (let bl46b6@f ((bl46b4@subst bl46b1@subst)) (if (null? bl46b4@subst) '() (if (memq (caar bl46b4@subst) bl46b0@sym*) (bl46b6@f (cdr bl46b4@subst)) (cons (car bl46b4@subst) (bl46b6@f (cdr bl46b4@subst)))))))) (bl4507@remove-dups (lambda (bl46ae@ls) (if (null? bl46ae@ls) '() (if (memq (car bl46ae@ls) (cdr bl46ae@ls)) (bl4507@remove-dups (cdr bl46ae@ls)) (cons (car bl46ae@ls) (bl4507@remove-dups (cdr bl46ae@ls))))))) (bl4509@parse-library-name (lambda (bl45c6@spec) (letrec* ((bl45c9@subversion? (lambda (bl46aa@x) (let ((bl46ac@x (bl31df@syntax->datum bl46aa@x))) (and (integer? bl46ac@x) (exact? bl46ac@x) (>= bl46ac@x '0))))) (bl45cb@subversion-pred (lambda (bl464a@x*) (let ((bl464c@t bl464a@x*)) (let ((bl464e@ls/false (bl30f9@syntax-dispatch bl464c@t 'any))) (if (and bl464e@ls/false (apply (lambda (bl4650@n) (bl45c9@subversion? bl4650@n)) bl464e@ls/false)) (apply (lambda (bl4652@n) (lambda (bl4654@x) (= bl4654@x (bl31df@syntax->datum bl4652@n)))) bl464e@ls/false) (let ((bl4656@t bl464c@t)) (let ((bl4658@ls/false (bl30f9@syntax-dispatch bl4656@t '(any . each-any)))) (if (and bl4658@ls/false (apply (lambda (bl465a@p? bl465b@sub*) (eq? (bl31df@syntax->datum bl465a@p?) 'and)) bl4658@ls/false)) (apply (lambda (bl465e@p? bl465f@sub*) (let ((bl4662@p* (map bl45cb@subversion-pred bl465f@sub*))) (lambda (bl4664@x) (for-all (lambda (bl4666@p) (bl4666@p bl4664@x)) bl4662@p*)))) bl4658@ls/false) (let ((bl4668@t bl4656@t)) (let ((bl466a@ls/false (bl30f9@syntax-dispatch bl4668@t '(any . each-any)))) (if (and bl466a@ls/false (apply (lambda (bl466c@p? bl466d@sub*) (eq? (bl31df@syntax->datum bl466c@p?) 'or)) bl466a@ls/false)) (apply (lambda (bl4670@p? bl4671@sub*) (let ((bl4674@p* (map bl45cb@subversion-pred bl4671@sub*))) (lambda (bl4676@x) (exists (lambda (bl4678@p) (bl4678@p bl4676@x)) bl4674@p*)))) bl466a@ls/false) (let ((bl467a@t bl4668@t)) (let ((bl467c@ls/false (bl30f9@syntax-dispatch bl467a@t '(any any)))) (if (and bl467c@ls/false (apply (lambda (bl467e@p? bl467f@sub) (eq? (bl31df@syntax->datum bl467e@p?) 'not)) bl467c@ls/false)) (apply (lambda (bl4682@p? bl4683@sub) (let ((bl4686@p (bl45cb@subversion-pred bl4683@sub))) (lambda (bl4688@x) (not (bl4686@p bl4688@x))))) bl467c@ls/false) (let ((bl468a@t bl467a@t)) (let ((bl468c@ls/false (bl30f9@syntax-dispatch bl468a@t '(any any)))) (if (and bl468c@ls/false (apply (lambda (bl468e@p? bl468f@n) (and (eq? (bl31df@syntax->datum bl468e@p?) '<=) (bl45c9@subversion? bl468f@n))) bl468c@ls/false)) (apply (lambda (bl4692@p? bl4693@n) (lambda (bl4696@x) (<= bl4696@x (bl31df@syntax->datum bl4693@n)))) bl468c@ls/false) (let ((bl4698@t bl468a@t)) (let ((bl469a@ls/false (bl30f9@syntax-dispatch bl4698@t '(any any)))) (if (and bl469a@ls/false (apply (lambda (bl469c@p? bl469d@n) (and (eq? (bl31df@syntax->datum bl469c@p?) '>=) (bl45c9@subversion? bl469d@n))) bl469a@ls/false)) (apply (lambda (bl46a0@p? bl46a1@n) (lambda (bl46a4@x) (>= bl46a4@x (bl31df@syntax->datum bl46a1@n)))) bl469a@ls/false) (let ((bl46a6@t bl4698@t)) (let ((bl46a8@ls/false (bl30f9@syntax-dispatch bl46a6@t '_))) (if bl46a8@ls/false (apply (lambda () (bl31d9@syntax-violation 'import '"invalid sub-version spec" bl45c6@spec bl464a@x*)) bl46a8@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl46a6@t)))))))))))))))))))))))) (bl45cd@version-pred (lambda (bl45fa@x*) (let ((bl45fc@t bl45fa@x*)) (let ((bl45fe@ls/false (bl30f9@syntax-dispatch bl45fc@t '()))) (if bl45fe@ls/false (apply (lambda () (lambda (bl4600@x) '#t)) bl45fe@ls/false) (let ((bl4602@t bl45fc@t)) (let ((bl4604@ls/false (bl30f9@syntax-dispatch bl4602@t '(any . each-any)))) (if (and bl4604@ls/false (apply (lambda (bl4606@c bl4607@ver*) (eq? (bl31df@syntax->datum bl4606@c) 'and)) bl4604@ls/false)) (apply (lambda (bl460a@c bl460b@ver*) (let ((bl460e@p* (map bl45cd@version-pred bl460b@ver*))) (lambda (bl4610@x) (for-all (lambda (bl4612@p) (bl4612@p bl4610@x)) bl460e@p*)))) bl4604@ls/false) (let ((bl4614@t bl4602@t)) (let ((bl4616@ls/false (bl30f9@syntax-dispatch bl4614@t '(any . each-any)))) (if (and bl4616@ls/false (apply (lambda (bl4618@c bl4619@ver*) (eq? (bl31df@syntax->datum bl4618@c) 'or)) bl4616@ls/false)) (apply (lambda (bl461c@c bl461d@ver*) (let ((bl4620@p* (map bl45cd@version-pred bl461d@ver*))) (lambda (bl4622@x) (exists (lambda (bl4624@p) (bl4624@p bl4622@x)) bl4620@p*)))) bl4616@ls/false) (let ((bl4626@t bl4614@t)) (let ((bl4628@ls/false (bl30f9@syntax-dispatch bl4626@t '(any any)))) (if (and bl4628@ls/false (apply (lambda (bl462a@c bl462b@ver) (eq? (bl31df@syntax->datum bl462a@c) 'not)) bl4628@ls/false)) (apply (lambda (bl462e@c bl462f@ver) (let ((bl4632@p (bl45cd@version-pred bl462f@ver))) (lambda (bl4634@x) (not (bl4632@p bl4634@x))))) bl4628@ls/false) (let ((bl4636@t bl4626@t)) (let ((bl4638@ls/false (bl30f9@syntax-dispatch bl4636@t 'each-any))) (if bl4638@ls/false (apply (lambda (bl463a@sub*) (let ((bl463c@p* (map bl45cb@subversion-pred bl463a@sub*))) (lambda (bl463e@x) (let bl4644@f ((bl4640@p* bl463c@p*) (bl4641@x bl463e@x)) (if (null? bl4640@p*) '#t (if (null? bl4641@x) '#f (and ((car bl4640@p*) (car bl4641@x)) (bl4644@f (cdr bl4640@p*) (cdr bl4641@x))))))))) bl4638@ls/false) (let ((bl4646@t bl4636@t)) (let ((bl4648@ls/false (bl30f9@syntax-dispatch bl4646@t '_))) (if bl4648@ls/false (apply (lambda () (bl31d9@syntax-violation 'import '"invalid version spec" bl45c6@spec bl45fa@x*)) bl4648@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl4646@t)))))))))))))))))))))) (let bl45d0@f ((bl45ce@x bl45c6@spec)) (let ((bl45d2@t bl45ce@x)) (let ((bl45d4@ls/false (bl30f9@syntax-dispatch bl45d2@t '(each-any)))) (if bl45d4@ls/false (apply (lambda (bl45d6@version-spec*) (values '() (bl45cd@version-pred bl45d6@version-spec*))) bl45d4@ls/false) (let ((bl45d8@t bl45d2@t)) (let ((bl45da@ls/false (bl30f9@syntax-dispatch bl45d8@t '(any . any)))) (if (and bl45da@ls/false (apply (lambda (bl45dc@x bl45dd@x*) (bl44fb@idsyn? bl45dc@x)) bl45da@ls/false)) (apply (lambda (bl45e0@x bl45e1@x*) (call-with-values (lambda () (bl45d0@f bl45e1@x*)) (lambda (bl45e8@bl45e5 bl45e9@bl45e7) (let ((bl45ec@pred bl45e9@bl45e7) (bl45ed@name bl45e8@bl45e5)) (values (cons (bl31df@syntax->datum bl45e0@x) bl45ed@name) bl45ec@pred))))) bl45da@ls/false) (let ((bl45f0@t bl45d8@t)) (let ((bl45f2@ls/false (bl30f9@syntax-dispatch bl45f0@t '()))) (if bl45f2@ls/false (apply (lambda () (values '() (lambda (bl45f4@x) '#t))) bl45f2@ls/false) (let ((bl45f6@t bl45f0@t)) (let ((bl45f8@ls/false (bl30f9@syntax-dispatch bl45f6@t '_))) (if bl45f8@ls/false (apply (lambda () (bl31d9@syntax-violation '#f '"invalid import spec" bl45c6@spec)) bl45f8@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl45f6@t))))))))))))))))) (bl450b@import-library (lambda (bl45b6@spec*) (call-with-values (lambda () (bl4509@parse-library-name bl45b6@spec*)) (lambda (bl45bc@bl45b9 bl45bd@bl45bb) (let ((bl45c0@pred bl45bd@bl45bb) (bl45c1@name bl45bc@bl45b9)) (begin (if (null? bl45c1@name) (bl31d9@syntax-violation 'import '"empty library name" bl45b6@spec*) (void)) (let ((bl45c4@lib (bl2d07@bl2b4e@find-library-by-name bl45c1@name))) (begin (if (not bl45c4@lib) (bl31d9@syntax-violation 'import '"cannot find library with required name" bl45c1@name) (void)) (if (not (bl45c0@pred (bl2ce1@bl2b02@library-version bl45c4@lib))) (bl31d9@syntax-violation 'import '"library does not satisfy version specification" bl45b6@spec* bl45c4@lib) (void)) ((bl3165@imp-collector) bl45c4@lib) (bl2ce9@bl2b12@library-subst bl45c4@lib))))))))) (bl450d@get-import (lambda (bl4528@spec) (let ((bl452a@t bl4528@spec)) (let ((bl452c@ls/false (bl30f9@syntax-dispatch bl452a@t '(any . each-any)))) (if (and bl452c@ls/false (apply (lambda (bl452e@x bl452f@x*) (not (memq (bl31df@syntax->datum bl452e@x) '(for rename except only prefix library)))) bl452c@ls/false)) (apply (lambda (bl4532@x bl4533@x*) (bl450b@import-library (cons bl4532@x bl4533@x*))) bl452c@ls/false) (let ((bl4536@t bl452a@t)) (let ((bl4538@ls/false (bl30f9@syntax-dispatch bl4536@t '(any any . #(each (any any)))))) (if (and bl4538@ls/false (apply (lambda (bl453a@rename bl453b@isp bl453c@old* bl453d@new*) (and (eq? (bl31df@syntax->datum bl453a@rename) 'rename) (for-all bl44fb@idsyn? bl453c@old*) (for-all bl44fb@idsyn? bl453d@new*))) bl4538@ls/false)) (apply (lambda (bl4542@rename bl4543@isp bl4544@old* bl4545@new*) (let ((bl454a@subst (bl450d@get-import bl4543@isp)) (bl454b@old* (map bl31df@syntax->datum bl4544@old*)) (bl454c@new* (map bl31df@syntax->datum bl4545@new*))) (let ((bl4550@old-label* (bl4503@find* bl454b@old* bl454a@subst))) (let ((bl4552@subst (bl4505@rem* bl454b@old* bl454a@subst))) (bl44ff@merge-substs (map cons bl454c@new* bl4550@old-label*) bl4552@subst))))) bl4538@ls/false) (let ((bl4554@t bl4536@t)) (let ((bl4556@ls/false (bl30f9@syntax-dispatch bl4554@t '(any any . each-any)))) (if (and bl4556@ls/false (apply (lambda (bl4558@except bl4559@isp bl455a@sym*) (and (eq? (bl31df@syntax->datum bl4558@except) 'except) (for-all bl44fb@idsyn? bl455a@sym*))) bl4556@ls/false)) (apply (lambda (bl455e@except bl455f@isp bl4560@sym*) (let ((bl4564@subst (bl450d@get-import bl455f@isp))) (bl4505@rem* (map bl31df@syntax->datum bl4560@sym*) bl4564@subst))) bl4556@ls/false) (let ((bl4566@t bl4554@t)) (let ((bl4568@ls/false (bl30f9@syntax-dispatch bl4566@t '(any any . each-any)))) (if (and bl4568@ls/false (apply (lambda (bl456a@only bl456b@isp bl456c@sym*) (and (eq? (bl31df@syntax->datum bl456a@only) 'only) (for-all bl44fb@idsyn? bl456c@sym*))) bl4568@ls/false)) (apply (lambda (bl4570@only bl4571@isp bl4572@sym*) (let ((bl4576@subst (bl450d@get-import bl4571@isp)) (bl4577@sym* (map bl31df@syntax->datum bl4572@sym*))) (let ((bl457a@sym* (bl4507@remove-dups bl4577@sym*))) (let ((bl457c@lab* (bl4503@find* bl457a@sym* bl4576@subst))) (map cons bl457a@sym* bl457c@lab*))))) bl4568@ls/false) (let ((bl457e@t bl4566@t)) (let ((bl4580@ls/false (bl30f9@syntax-dispatch bl457e@t '(any any any)))) (if (and bl4580@ls/false (apply (lambda (bl4582@prefix bl4583@isp bl4584@p) (and (eq? (bl31df@syntax->datum bl4582@prefix) 'prefix) (bl44fb@idsyn? bl4584@p))) bl4580@ls/false)) (apply (lambda (bl4588@prefix bl4589@isp bl458a@p) (let ((bl458e@subst (bl450d@get-import bl4589@isp)) (bl458f@prefix (symbol->string (bl31df@syntax->datum bl458a@p)))) (map (lambda (bl4592@x) (cons (string->symbol (string-append bl458f@prefix (symbol->string (car bl4592@x)))) (cdr bl4592@x))) bl458e@subst))) bl4580@ls/false) (let ((bl4594@t bl457e@t)) (let ((bl4596@ls/false (bl30f9@syntax-dispatch bl4594@t '(any each-any)))) (if (and bl4596@ls/false (apply (lambda (bl4598@library bl4599@spec*) (eq? (bl31df@syntax->datum bl4598@library) 'library)) bl4596@ls/false)) (apply (lambda (bl459c@library bl459d@spec*) (bl450b@import-library bl459d@spec*)) bl4596@ls/false) (let ((bl45a0@t bl4594@t)) (let ((bl45a2@ls/false (bl30f9@syntax-dispatch bl45a0@t '(any any . any)))) (if (and bl45a2@ls/false (apply (lambda (bl45a4@for bl45a5@isp bl45a6@rest) (eq? (bl31df@syntax->datum bl45a4@for) 'for)) bl45a2@ls/false)) (apply (lambda (bl45aa@for bl45ab@isp bl45ac@rest) (bl450d@get-import bl45ab@isp)) bl45a2@ls/false) (let ((bl45b0@t bl45a0@t)) (let ((bl45b2@ls/false (bl30f9@syntax-dispatch bl45b0@t 'any))) (if bl45b2@ls/false (apply (lambda (bl45b4@spec) (bl31d9@syntax-violation 'import '"invalid import spec" bl45b4@spec)) bl45b2@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl45b0@t))))))))))))))))))))))))))) (bl450f@add-imports! (lambda (bl4518@imp bl4519@h) (let ((bl451c@subst (bl450d@get-import bl4518@imp))) (for-each (lambda (bl451e@x) (let ((bl4520@name (car bl451e@x)) (bl4521@label (cdr bl451e@x))) (let ((bl4524@t (hashtable-ref bl4519@h bl4520@name '#f))) (if bl4524@t ((lambda (bl4526@l) (if (not (eq? bl4526@l bl4521@label)) (bl44fd@dup-error bl4520@name) (void))) bl4524@t) (hashtable-set! bl4519@h bl4520@name bl4521@label))))) bl451c@subst))))) (lambda (bl4510@imp*) (let bl4516@f ((bl4512@imp* bl4510@imp*) (bl4513@h (make-eq-hashtable))) (if (null? bl4512@imp*) (hashtable-entries bl4513@h) (begin (bl450f@add-imports! (car bl4512@imp*) bl4513@h) (bl4516@f (cdr bl4512@imp*) bl4513@h))))))) (set! bl4c32@bl315b@parse-import-spec* bl315b@parse-import-spec*) (set! bl315d@make-top-rib (lambda (bl4706@names bl4707@labels) (let ((bl470a@rib (bl2ea6@make-empty-rib))) (begin (vector-for-each (lambda (bl470c@name bl470d@label) (begin (if (not (symbol? bl470c@name)) (error 'make-top-rib '"BUG: not a symbol" bl470c@name) (void)) (bl2eaa@extend-rib/nc! bl470a@rib (make-simple-struct 'stx '5 (list bl470c@name bl2e76@top-mark* '() '())) bl470d@label))) bl4706@names bl4707@labels) bl470a@rib)))) (set! bl4c33@bl315d@make-top-rib bl315d@make-top-rib) (set! bl315f@make-collector (lambda () (let ((bl4710@ls '())) (lambda bl4714 (let ((bl4715 (length bl4714))) (if (= bl4715 '0) (apply (lambda () bl4710@ls) bl4714) (if (= bl4715 '1) (apply (lambda (bl4712@x) (set! bl4710@ls (bl2e6f@set-cons bl4712@x bl4710@ls))) bl4714) (error 'apply '"invalid arg count")))))))) (set! bl4c34@bl315f@make-collector bl315f@make-collector) (set! bl3161@inv-collector (bl2a42@bl2920@make-parameter (lambda bl4716@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (bl4718@x) (begin (if (not (procedure? bl4718@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" bl4718@x) (void)) bl4718@x)))) (set! bl4c35@bl3161@inv-collector bl3161@inv-collector) (set! bl3163@vis-collector (bl2a42@bl2920@make-parameter (lambda bl471a@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (bl471c@x) (begin (if (not (procedure? bl471c@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" bl471c@x) (void)) bl471c@x)))) (set! bl4c36@bl3163@vis-collector bl3163@vis-collector) (set! bl3165@imp-collector (bl2a42@bl2920@make-parameter (lambda bl471e@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (bl4720@x) (begin (if (not (procedure? bl4720@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" bl4720@x) (void)) bl4720@x)))) (set! bl4c37@bl3165@imp-collector bl3165@imp-collector) (set! bl3167@chi-library-internal (lambda (bl4722@e* bl4723@rib bl4724@top?) (call-with-values (lambda () (bl3151@chi-body* bl4722@e* '() '() '() '() '() '() '() bl4723@rib bl4724@top?)) (lambda (bl4738@bl4729 bl4739@bl472b bl473a@bl472d bl473b@bl472f bl473c@bl4731 bl473d@bl4733 bl473e@bl4735 bl473f@bl4737) (let ((bl4748@exp* bl473f@bl4737) (bl4749@_kwd* bl473e@bl4735) (bl474a@mod** bl473d@bl4733) (bl474b@rhs* bl473c@bl4731) (bl474c@lex* bl473b@bl472f) (bl474d@mr bl473a@bl472d) (bl474e@r bl4739@bl472b) (bl474f@e* bl4738@bl4729)) (values (append (apply append (reverse bl474a@mod**)) bl474f@e*) bl474e@r bl474d@mr (reverse bl474c@lex*) (reverse bl474b@rhs*) bl4748@exp*)))))) (set! bl4c38@bl3167@chi-library-internal bl3167@chi-library-internal) (set! bl3169@chi-interaction-expr (lambda (bl4758@e bl4759@rib bl475a@r) (call-with-values (lambda () (bl3151@chi-body* (list bl4758@e) bl475a@r bl475a@r '() '() '() '() '() bl4759@rib '#t)) (lambda (bl476e@bl475f bl476f@bl4761 bl4770@bl4763 bl4771@bl4765 bl4772@bl4767 bl4773@bl4769 bl4774@bl476b bl4775@bl476d) (let ((bl477e@_exp* bl4775@bl476d) (bl477f@_kwd* bl4774@bl476b) (bl4780@mod** bl4773@bl4769) (bl4781@rhs* bl4772@bl4767) (bl4782@lex* bl4771@bl4765) (bl4783@mr bl4770@bl4763) (bl4784@r bl476f@bl4761) (bl4785@e* bl476e@bl475f)) (let ((bl478e@e* (bl3129@expand-interaction-rhs*/init* (reverse bl4782@lex*) (reverse bl4781@rhs*) (append (apply append (reverse bl4780@mod**)) bl4785@e*) bl4784@r bl4783@mr))) (let ((bl4790@e (if (null? bl478e@e*) (bl2e58@bl2db9@build-void) (if (null? (cdr bl478e@e*)) (car bl478e@e*) (bl2e57@bl2db7@build-sequence '#f bl478e@e*))))) (values bl4790@e bl4784@r)))))))) (set! bl4c39@bl3169@chi-interaction-expr bl3169@chi-interaction-expr) (set! bl316b@library-body-expander (lambda (bl4792@name bl4793@main-exp* bl4794@imp* bl4795@b* bl4796@top?) (letrec* ((bl479d@itc (bl315f@make-collector))) (let ((bl47a6@bl479f bl3165@imp-collector) (bl47a7@bl47a1 bl31e9@top-level-context) (bl47a8@bl47a3 bl479d@itc) (bl47a9@bl47a5 '#f)) (let ((bl47ae@swap (lambda () (begin (let ((bl47b0@t (bl47a6@bl479f))) (begin (bl47a6@bl479f bl47a8@bl47a3) (set! bl47a8@bl47a3 bl47b0@t))) (let ((bl47b2@t (bl47a7@bl47a1))) (begin (bl47a7@bl47a1 bl47a9@bl47a5) (set! bl47a9@bl47a5 bl47b2@t))))))) (dynamic-wind bl47ae@swap (lambda () (call-with-values (lambda () (bl315b@parse-import-spec* bl4794@imp*)) (lambda (bl47b8@bl47b5 bl47b9@bl47b7) (let ((bl47bc@subst-labels bl47b9@bl47b7) (bl47bd@subst-names bl47b8@bl47b5)) (let ((bl47c0@rib (bl315d@make-top-rib bl47bd@subst-names bl47bc@subst-labels))) (letrec* ((bl47c3@wrap (lambda (bl483e@x) (make-simple-struct 'stx '5 (list bl483e@x bl2e76@top-mark* (list bl47c0@rib) '()))))) (let ((bl47c4@b* (map bl47c3@wrap bl4795@b*)) (bl47c5@main-exp* (map bl47c3@wrap bl4793@main-exp*)) (bl47c6@rtc (bl315f@make-collector)) (bl47c7@vtc (bl315f@make-collector))) (let ((bl47d4@bl47cd bl3161@inv-collector) (bl47d5@bl47cf bl3163@vis-collector) (bl47d6@bl47d1 bl47c6@rtc) (bl47d7@bl47d3 bl47c7@vtc)) (let ((bl47dc@swap (lambda () (begin (let ((bl47de@t (bl47d4@bl47cd))) (begin (bl47d4@bl47cd bl47d6@bl47d1) (set! bl47d6@bl47d1 bl47de@t))) (let ((bl47e0@t (bl47d5@bl47cf))) (begin (bl47d5@bl47cf bl47d7@bl47d3) (set! bl47d7@bl47d3 bl47e0@t))))))) (dynamic-wind bl47dc@swap (lambda () (call-with-values (lambda () (bl3167@chi-library-internal bl47c4@b* bl47c0@rib bl4796@top?)) (lambda (bl47ee@bl47e3 bl47ef@bl47e5 bl47f0@bl47e7 bl47f1@bl47e9 bl47f2@bl47eb bl47f3@bl47ed) (let ((bl47fa@internal-exp* bl47f3@bl47ed) (bl47fb@rhs* bl47f2@bl47eb) (bl47fc@lex* bl47f1@bl47e9) (bl47fd@mr bl47f0@bl47e7) (bl47fe@r bl47ef@bl47e5) (bl47ff@init* bl47ee@bl47e3)) (call-with-values (lambda () (bl3155@parse-exports (append bl47c5@main-exp* bl47fa@internal-exp*))) (lambda (bl480a@bl4807 bl480b@bl4809) (let ((bl480e@exp-id* bl480b@bl4809) (bl480f@exp-name* bl480a@bl4807)) (begin (bl2eae@seal-rib! bl47c0@rib) (let ((bl4812@init* (bl3117@chi-expr* bl47ff@init* bl47fe@r bl47fd@mr))) (let ((bl4814@rhs* (bl312b@chi-rhs* bl47fb@rhs* bl47fe@r bl47fd@mr))) (begin (bl2eb0@unseal-rib! bl47c0@rib) (let ((bl4816@loc* (map bl2e7c@gen-global bl47fc@lex*)) (bl4817@export-subst (bl31c3@make-export-subst bl480f@exp-name* bl480e@exp-id*))) (letrec* ((bl481b@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (bl31c5@make-export-env/macros bl47fc@lex* bl4816@loc* bl47fe@r)) (lambda (bl4822@bl481d bl4823@bl481f bl4824@bl4821) (let ((bl4828@macro* bl4824@bl4821) (bl4829@global* bl4823@bl481f) (bl482a@export-env bl4822@bl481d)) (begin (for-each (lambda (bl482e@s) (let ((bl4830@name (car bl482e@s)) (bl4831@label (cdr bl482e@s))) (let ((bl4834@p (assq bl4831@label bl482a@export-env))) (if bl4834@p (let ((bl4836@b (cdr bl4834@p))) (let ((bl4838@type (car bl4836@b))) (if (eq? bl4838@type 'mutable) (bl31d9@syntax-violation 'export bl481b@errstr bl4830@name) (void)))) (void))))) bl4817@export-subst) (let ((bl483a@invoke-body (bl2e5d@bl2dc3@build-library-letrec* '#f bl4792@name bl47fc@lex* bl4816@loc* bl4814@rhs* (if (null? bl4812@init*) (bl2e58@bl2db9@build-void) (bl2e57@bl2db7@build-sequence '#f bl4812@init*)))) (bl483b@invoke-definitions (map bl2e54@bl2d16@build-global-define (map cdr bl4829@global*)))) (values (bl479d@itc) (bl47c6@rtc) (bl47c7@vtc) (bl2e57@bl2db7@build-sequence '#f (append bl483b@invoke-definitions (list bl483a@invoke-body))) bl4828@macro* bl4817@export-subst bl482a@export-env))))))))))))))))))) bl47dc@swap)))))))))) bl47ae@swap)))))) (set! bl4c3a@bl316b@library-body-expander bl316b@library-body-expander) (set! bl316d@core-library-expander (lambda (bl4840@e bl4841@verify-name) (call-with-values (lambda () (bl3159@parse-library bl4840@e)) (lambda (bl484c@bl4845 bl484d@bl4847 bl484e@bl4849 bl484f@bl484b) (let ((bl4854@b* bl484f@bl484b) (bl4855@imp* bl484e@bl4849) (bl4856@exp* bl484d@bl4847) (bl4857@name* bl484c@bl4845)) (call-with-values (lambda () (bl3157@parse-library-name bl4857@name*)) (lambda (bl4860@bl485d bl4861@bl485f) (let ((bl4864@ver bl4861@bl485f) (bl4865@name bl4860@bl485d)) (begin (bl4841@verify-name bl4865@name) (call-with-values (lambda () (bl316b@library-body-expander bl4865@name bl4856@exp* bl4855@imp* bl4854@b* '#f)) (lambda (bl4876@bl4869 bl4877@bl486b bl4878@bl486d bl4879@bl486f bl487a@bl4871 bl487b@bl4873 bl487c@bl4875) (let ((bl4884@export-env bl487c@bl4875) (bl4885@export-subst bl487b@bl4873) (bl4886@visit-code bl487a@bl4871) (bl4887@invoke-code bl4879@bl486f) (bl4888@visit-req* bl4878@bl486d) (bl4889@invoke-req* bl4877@bl486b) (bl488a@imp* bl4876@bl4869)) (values bl4865@name bl4864@ver bl488a@imp* bl4889@invoke-req* bl4888@visit-req* bl4887@invoke-code bl4886@visit-code bl4885@export-subst bl4884@export-env))))))))))))) (set! bl4c3b@bl316d@core-library-expander bl316d@core-library-expander) (set! bl316f@parse-top-level-program (lambda (bl4892@e*) (let ((bl4894@t bl4892@e*)) (let ((bl4896@ls/false (bl30f9@syntax-dispatch bl4894@t '((any . each-any) . each-any)))) (if (and bl4896@ls/false (apply (lambda (bl4898@import bl4899@imp* bl489a@b*) (eq? (bl31df@syntax->datum bl4898@import) 'import)) bl4896@ls/false)) (apply (lambda (bl489e@import bl489f@imp* bl48a0@b*) (values bl489f@imp* bl48a0@b*)) bl4896@ls/false) (let ((bl48a4@t bl4894@t)) (let ((bl48a6@ls/false (bl30f9@syntax-dispatch bl48a4@t '((any . any) . any)))) (if (and bl48a6@ls/false (apply (lambda (bl48a8@import bl48a9@x bl48aa@y) (eq? (bl31df@syntax->datum bl48a8@import) 'import)) bl48a6@ls/false)) (apply (lambda (bl48ae@import bl48af@x bl48b0@y) (bl31d9@syntax-violation 'expander '"invalid syntax of top-level program" (bl2eec@syntax-car bl4892@e*))) bl48a6@ls/false) (let ((bl48b4@t bl48a4@t)) (let ((bl48b6@ls/false (bl30f9@syntax-dispatch bl48b4@t '_))) (if bl48b6@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) bl48b6@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl48b4@t)))))))))))) (set! bl4c3c@bl316f@parse-top-level-program bl316f@parse-top-level-program) (set! bl3171@top-level-expander (lambda (bl48b8@e*) (call-with-values (lambda () (bl316f@parse-top-level-program bl48b8@e*)) (lambda (bl48be@bl48bb bl48bf@bl48bd) (let ((bl48c2@b* bl48bf@bl48bd) (bl48c3@imp* bl48be@bl48bb)) (call-with-values (lambda () (bl316b@library-body-expander '() '() bl48c3@imp* bl48c2@b* '#t)) (lambda (bl48d4@bl48c7 bl48d5@bl48c9 bl48d6@bl48cb bl48d7@bl48cd bl48d8@bl48cf bl48d9@bl48d1 bl48da@bl48d3) (let ((bl48e2@export-env bl48da@bl48d3) (bl48e3@export-subst bl48d9@bl48d1) (bl48e4@visit-code bl48d8@bl48cf) (bl48e5@invoke-code bl48d7@bl48cd) (bl48e6@visit-req* bl48d6@bl48cb) (bl48e7@invoke-req* bl48d5@bl48c9) (bl48e8@imp* bl48d4@bl48c7)) (values bl48e7@invoke-req* bl48e5@invoke-code))))))))) (set! bl4c3d@bl3171@top-level-expander bl3171@top-level-expander) (set! bl3173@rp (bl2a3f@bl291a@make-record-printer 'env (lambda (bl48f0@x bl48f1@p bl48f2@wr) (display '"#<environment>" bl48f1@p)))) (set! bl4c3e@bl3173@rp bl3173@rp) (set! bl317d@env? (lambda (bl48f6@x) (and (simple-struct? bl48f6@x) (eq? (simple-struct-name bl48f6@x) 'env)))) (set! bl4c3f@bl317d@env? bl317d@env?) (set! bl317f@env-names (lambda (bl48f8@x) (simple-struct-ref bl48f8@x '0))) (set! bl4c40@bl317f@env-names bl317f@env-names) (set! bl3181@set-env-names! (lambda (bl48fa@x bl48fb@val) (simple-struct-set! bl48fa@x '0 bl48fb@val))) (set! bl4c41@bl3181@set-env-names! bl3181@set-env-names!) (set! bl3183@env-labels (lambda (bl48fe@x) (simple-struct-ref bl48fe@x '1))) (set! bl4c42@bl3183@env-labels bl3183@env-labels) (set! bl3185@set-env-labels! (lambda (bl4900@x bl4901@val) (simple-struct-set! bl4900@x '1 bl4901@val))) (set! bl4c43@bl3185@set-env-labels! bl3185@set-env-labels!) (set! bl3187@env-itc (lambda (bl4904@x) (simple-struct-ref bl4904@x '2))) (set! bl4c44@bl3187@env-itc bl3187@env-itc) (set! bl3189@set-env-itc! (lambda (bl4906@x bl4907@val) (simple-struct-set! bl4906@x '2 bl4907@val))) (set! bl4c45@bl3189@set-env-itc! bl3189@set-env-itc!) (set! bl318b@dummy '3) (set! bl4c46@bl318b@dummy bl318b@dummy) (set! bl318d@rp (bl2a3f@bl291a@make-record-printer 'interaction-env (lambda (bl490a@x bl490b@p bl490c@wr) (display '"#<environment>" bl490b@p)))) (set! bl4c47@bl318d@rp bl318d@rp) (set! bl3197@interaction-env? (lambda (bl4910@x) (and (simple-struct? bl4910@x) (eq? (simple-struct-name bl4910@x) 'interaction-env)))) (set! bl4c48@bl3197@interaction-env? bl3197@interaction-env?) (set! bl3199@interaction-env-rib (lambda (bl4912@x) (simple-struct-ref bl4912@x '0))) (set! bl4c49@bl3199@interaction-env-rib bl3199@interaction-env-rib) (set! bl319b@set-interaction-env-rib! (lambda (bl4914@x bl4915@val) (simple-struct-set! bl4914@x '0 bl4915@val))) (set! bl4c4a@bl319b@set-interaction-env-rib! bl319b@set-interaction-env-rib!) (set! bl319d@interaction-env-r (lambda (bl4918@x) (simple-struct-ref bl4918@x '1))) (set! bl4c4b@bl319d@interaction-env-r bl319d@interaction-env-r) (set! bl319f@set-interaction-env-r! (lambda (bl491a@x bl491b@val) (simple-struct-set! bl491a@x '1 bl491b@val))) (set! bl4c4c@bl319f@set-interaction-env-r! bl319f@set-interaction-env-r!) (set! bl31a1@interaction-env-locs (lambda (bl491e@x) (simple-struct-ref bl491e@x '2))) (set! bl4c4d@bl31a1@interaction-env-locs bl31a1@interaction-env-locs) (set! bl31a3@set-interaction-env-locs! (lambda (bl4920@x bl4921@val) (simple-struct-set! bl4920@x '2 bl4921@val))) (set! bl4c4e@bl31a3@set-interaction-env-locs! bl31a3@set-interaction-env-locs!) (set! bl31a5@dummy '3) (set! bl4c4f@bl31a5@dummy bl31a5@dummy) (set! bl31a7@interaction-environment-symbols (lambda () (bl31af@environment-symbols (bl31e7@interaction-environment)))) (set! bl4c50@bl31a7@interaction-environment-symbols bl31a7@interaction-environment-symbols) (set! bl31a9@environment-bindings (lambda (bl4924@e) (vector->list (vector-map (lambda (bl4926@name bl4927@label) (bl31ab@parse-binding (cons bl4926@name (bl2d0d@bl2b5a@imported-label->binding bl4927@label)))) (bl317f@env-names bl4924@e) (bl3183@env-labels bl4924@e))))) (set! bl4c51@bl31a9@environment-bindings bl31a9@environment-bindings) (set! bl31ab@parse-binding (lambda (bl492a@b) (cons (car bl492a@b) (let ((bl492c@t (cadr bl492a@b))) (if (memv bl492c@t '(core-prim global)) 'procedure (if (memv bl492c@t '(core-macro macro global-macro)) 'syntax (if (memv bl492c@t '($core-rtd)) 'record (if (eq? (car bl492a@b) (cadr bl492a@b)) 'syntax 'unknown)))))))) (set! bl4c52@bl31ab@parse-binding bl31ab@parse-binding) (set! bl31ad@environment? (lambda (bl492e@x) (or (bl317d@env? bl492e@x) (bl3197@interaction-env? bl492e@x)))) (set! bl4c53@bl31ad@environment? bl31ad@environment?) (set! bl31af@environment-symbols (lambda (bl4930@x) (if (bl317d@env? bl4930@x) (vector->list (bl317f@env-names bl4930@x)) (if (bl3197@interaction-env? bl4930@x) (map values (bl2e90@rib-sym* (bl3199@interaction-env-rib bl4930@x))) (assertion-violation 'environment-symbols '"not an environment" bl4930@x))))) (set! bl4c54@bl31af@environment-symbols bl31af@environment-symbols) (set! bl31b1@environment (lambda bl4932@imp* (let ((bl4934@itc (bl315f@make-collector))) (let ((bl493a@bl4937 bl3165@imp-collector) (bl493b@bl4939 bl4934@itc)) (let ((bl493e@swap (lambda () (let ((bl4940@t (bl493a@bl4937))) (begin (bl493a@bl4937 bl493b@bl4939) (set! bl493b@bl4939 bl4940@t)))))) (dynamic-wind bl493e@swap (lambda () (call-with-values (lambda () (bl315b@parse-import-spec* bl4932@imp*)) (lambda (bl4946@bl4943 bl4947@bl4945) (let ((bl494a@subst-labels bl4947@bl4945) (bl494b@subst-names bl4946@bl4943)) (make-simple-struct 'env '4 (list bl494b@subst-names bl494a@subst-labels bl4934@itc)))))) bl493e@swap)))))) (set! bl4c55@bl31b1@environment bl31b1@environment) (set! bl31b3@null-environment (lambda (bl494e@n) (begin (if (not (eqv? bl494e@n '5)) (assertion-violation 'null-environment '"not 5" bl494e@n) (void)) (bl31b1@environment '(psyntax null-environment-5))))) (set! bl4c56@bl31b3@null-environment bl31b3@null-environment) (set! bl31b5@scheme-report-environment (lambda (bl4950@n) (begin (if (not (eqv? bl4950@n '5)) (assertion-violation 'scheme-report-environment '"not 5" bl4950@n) (void)) (bl31b1@environment '(psyntax scheme-report-environment-5))))) (set! bl4c57@bl31b5@scheme-report-environment bl31b5@scheme-report-environment) (set! bl31b7@expand (lambda (bl4952@x bl4953@env) (if (bl317d@env? bl4953@env) (let ((bl4956@rib (bl315d@make-top-rib (bl317f@env-names bl4953@env) (bl3183@env-labels bl4953@env)))) (let ((bl4958@x (make-simple-struct 'stx '5 (list bl4952@x bl2e76@top-mark* (list bl4956@rib) '()))) (bl4959@itc (bl3187@env-itc bl4953@env)) (bl495a@rtc (bl315f@make-collector)) (bl495b@vtc (bl315f@make-collector))) (let ((bl4960@x (let ((bl4972@bl4963 bl31e9@top-level-context) (bl4973@bl4965 bl3161@inv-collector) (bl4974@bl4967 bl3163@vis-collector) (bl4975@bl4969 bl3165@imp-collector) (bl4976@bl496b '#f) (bl4977@bl496d bl495a@rtc) (bl4978@bl496f bl495b@vtc) (bl4979@bl4971 bl4959@itc)) (let ((bl4982@swap (lambda () (begin (let ((bl4984@t (bl4972@bl4963))) (begin (bl4972@bl4963 bl4976@bl496b) (set! bl4976@bl496b bl4984@t))) (let ((bl4986@t (bl4973@bl4965))) (begin (bl4973@bl4965 bl4977@bl496d) (set! bl4977@bl496d bl4986@t))) (let ((bl4988@t (bl4974@bl4967))) (begin (bl4974@bl4967 bl4978@bl496f) (set! bl4978@bl496f bl4988@t))) (let ((bl498a@t (bl4975@bl4969))) (begin (bl4975@bl4969 bl4979@bl4971) (set! bl4979@bl4971 bl498a@t))))))) (dynamic-wind bl4982@swap (lambda () (bl311b@chi-expr bl4958@x '() '())) bl4982@swap))))) (begin (bl2eae@seal-rib! bl4956@rib) (values bl4960@x (bl495a@rtc)))))) (if (bl3197@interaction-env? bl4953@env) (let ((bl498c@rib (bl3199@interaction-env-rib bl4953@env)) (bl498d@r (bl319d@interaction-env-r bl4953@env)) (bl498e@rtc (bl315f@make-collector))) (let ((bl4992@x (make-simple-struct 'stx '5 (list bl4952@x bl2e76@top-mark* (list bl498c@rib) '())))) (call-with-values (lambda () (let ((bl49a8@bl4999 bl31e9@top-level-context) (bl49a9@bl499b bl3161@inv-collector) (bl49aa@bl499d bl3163@vis-collector) (bl49ab@bl499f bl3165@imp-collector) (bl49ac@bl49a1 bl4953@env) (bl49ad@bl49a3 bl498e@rtc) (bl49ae@bl49a5 (bl315f@make-collector)) (bl49af@bl49a7 (bl315f@make-collector))) (let ((bl49b8@swap (lambda () (begin (let ((bl49ba@t (bl49a8@bl4999))) (begin (bl49a8@bl4999 bl49ac@bl49a1) (set! bl49ac@bl49a1 bl49ba@t))) (let ((bl49bc@t (bl49a9@bl499b))) (begin (bl49a9@bl499b bl49ad@bl49a3) (set! bl49ad@bl49a3 bl49bc@t))) (let ((bl49be@t (bl49aa@bl499d))) (begin (bl49aa@bl499d bl49ae@bl49a5) (set! bl49ae@bl49a5 bl49be@t))) (let ((bl49c0@t (bl49ab@bl499f))) (begin (bl49ab@bl499f bl49af@bl49a7) (set! bl49af@bl49a7 bl49c0@t))))))) (dynamic-wind bl49b8@swap (lambda () (bl3169@chi-interaction-expr bl4992@x bl498c@rib bl498d@r)) bl49b8@swap)))) (lambda (bl49c2@bl4995 bl49c3@bl4997) (let ((bl49c6@r^ bl49c3@bl4997) (bl49c7@e bl49c2@bl4995)) (begin (bl319f@set-interaction-env-r! bl4953@env bl49c6@r^) (values bl49c7@e (bl498e@rtc)))))))) (assertion-violation 'expand '"not an environment" bl4953@env))))) (set! bl4c58@bl31b7@expand bl31b7@expand) (set! bl31b9@eval (lambda (bl49ca@x bl49cb@env) (begin (if (not (bl31ad@environment? bl49cb@env)) (error 'eval '"not an environment" bl49cb@env) (void)) (call-with-values (lambda () (bl31b7@expand bl49ca@x bl49cb@env)) (lambda (bl49d2@bl49cf bl49d3@bl49d1) (let ((bl49d6@invoke-req* bl49d3@bl49d1) (bl49d7@x bl49d2@bl49cf)) (begin (for-each bl2d0e@bl2b5c@invoke-library bl49d6@invoke-req*) (eval-core (bl2a98@bl2a50@expanded->core bl49d7@x))))))))) (set! bl4c59@bl31b9@eval bl31b9@eval) (set! bl31bb@library-expander (lambda bl4a48 (let ((bl4a49 (length bl4a48))) (if (= bl4a49 '3) (apply (lambda (bl49da@x bl49db@filename bl49dc@verify-name) (letrec* ((bl49e1@build-visit-code (lambda (bl4a36@macro*) (if (null? bl4a36@macro*) (bl2e58@bl2db9@build-void) (bl2e57@bl2db7@build-sequence '#f (map (lambda (bl4a38@x) (let ((bl4a3a@loc (car bl4a38@x)) (bl4a3b@src (cddr bl4a38@x))) (list 'set! bl4a3a@loc bl4a3b@src))) bl4a36@macro*))))) (bl49e3@visit! (lambda (bl4a2e@macro*) (for-each (lambda (bl4a30@x) (let ((bl4a32@loc (car bl4a30@x)) (bl4a33@proc (cadr bl4a30@x))) (set-symbol-value! bl4a32@loc bl4a33@proc))) bl4a2e@macro*)))) (call-with-values (lambda () (bl316d@core-library-expander bl49da@x bl49dc@verify-name)) (lambda (bl49f6@bl49e5 bl49f7@bl49e7 bl49f8@bl49e9 bl49f9@bl49eb bl49fa@bl49ed bl49fb@bl49ef bl49fc@bl49f1 bl49fd@bl49f3 bl49fe@bl49f5) (let ((bl4a08@export-env bl49fe@bl49f5) (bl4a09@export-subst bl49fd@bl49f3) (bl4a0a@macro* bl49fc@bl49f1) (bl4a0b@invoke-code bl49fb@bl49ef) (bl4a0c@vis* bl49fa@bl49ed) (bl4a0d@inv* bl49f9@bl49eb) (bl4a0e@imp* bl49f8@bl49e9) (bl4a0f@ver bl49f7@bl49e7) (bl4a10@name bl49f6@bl49e5)) (let ((bl4a1a@id (gensym)) (bl4a1b@name bl4a10@name) (bl4a1c@ver bl4a0f@ver) (bl4a1d@imp* (map bl2d12@bl2b64@library-spec bl4a0e@imp*)) (bl4a1e@vis* (map bl2d12@bl2b64@library-spec bl4a0c@vis*)) (bl4a1f@inv* (map bl2d12@bl2b64@library-spec bl4a0d@inv*)) (bl4a20@visit-proc (lambda () (bl49e3@visit! bl4a0a@macro*))) (bl4a21@invoke-proc (lambda () (eval-core (bl2a98@bl2a50@expanded->core bl4a0b@invoke-code)))) (bl4a22@visit-code (bl49e1@build-visit-code bl4a0a@macro*)) (bl4a23@invoke-code bl4a0b@invoke-code)) (begin (bl2d0c@bl2b58@install-library bl4a1a@id bl4a1b@name bl4a1c@ver bl4a1d@imp* bl4a1e@vis* bl4a1f@inv* bl4a09@export-subst bl4a08@export-env bl4a20@visit-proc bl4a21@invoke-proc bl4a22@visit-code bl4a23@invoke-code '#t bl49db@filename) (values bl4a1a@id bl4a1b@name bl4a1c@ver bl4a1d@imp* bl4a1e@vis* bl4a1f@inv* bl4a23@invoke-code bl4a22@visit-code bl4a09@export-subst bl4a08@export-env)))))))) bl4a48) (if (= bl4a49 '2) (apply (lambda (bl4a3e@x bl4a3f@filename) (bl31bb@library-expander bl4a3e@x bl4a3f@filename (lambda (bl4a42@x) (values)))) bl4a48) (if (= bl4a49 '1) (apply (lambda (bl4a44@x) (bl31bb@library-expander bl4a44@x '#f (lambda (bl4a46@x) (values)))) bl4a48) (error 'apply '"invalid arg count"))))))) (set! bl4c5a@bl31bb@library-expander bl31bb@library-expander) (set! bl31bd@boot-library-expand (lambda (bl4a4a@x) (call-with-values (lambda () (bl31bb@library-expander bl4a4a@x)) (lambda (bl4a60@bl4a4d bl4a61@bl4a4f bl4a62@bl4a51 bl4a63@bl4a53 bl4a64@bl4a55 bl4a65@bl4a57 bl4a66@bl4a59 bl4a67@bl4a5b bl4a68@bl4a5d bl4a69@bl4a5f) (let ((bl4a74@export-env bl4a69@bl4a5f) (bl4a75@export-subst bl4a68@bl4a5d) (bl4a76@visit-code bl4a67@bl4a5b) (bl4a77@invoke-code bl4a66@bl4a59) (bl4a78@inv* bl4a65@bl4a57) (bl4a79@vis* bl4a64@bl4a55) (bl4a7a@imp* bl4a63@bl4a53) (bl4a7b@ver bl4a62@bl4a51) (bl4a7c@name bl4a61@bl4a4f) (bl4a7d@id bl4a60@bl4a4d)) (values bl4a7c@name bl4a77@invoke-code bl4a75@export-subst bl4a74@export-env)))))) (set! bl4c5b@bl31bd@boot-library-expand bl31bd@boot-library-expand) (set! bl31bf@rev-map-append (lambda (bl4a88@f bl4a89@ls bl4a8a@ac) (if (null? bl4a89@ls) bl4a8a@ac (bl31bf@rev-map-append bl4a88@f (cdr bl4a89@ls) (cons (bl4a88@f (car bl4a89@ls)) bl4a8a@ac))))) (set! bl4c5c@bl31bf@rev-map-append bl31bf@rev-map-append) (set! bl31c1@build-exports (lambda (bl4a8e@lex*+loc* bl4a8f@init*) (bl2e57@bl2db7@build-sequence '#f (cons (bl2e58@bl2db9@build-void) (bl31bf@rev-map-append (lambda (bl4a92@x) (list 'set! (cdr bl4a92@x) (car bl4a92@x))) bl4a8e@lex*+loc* bl4a8f@init*))))) (set! bl4c5d@bl31c1@build-exports bl31c1@build-exports) (set! bl31c3@make-export-subst (lambda (bl4a94@name* bl4a95@id*) (map (lambda (bl4a98@name bl4a99@id) (let ((bl4a9c@label (bl2f08@id->label bl4a99@id))) (begin (if (not bl4a9c@label) (bl31d9@syntax-violation '#f '"cannot export unbound identifier" bl4a99@id) (void)) (cons bl4a98@name bl4a9c@label)))) bl4a94@name* bl4a95@id*))) (set! bl4c5e@bl31c3@make-export-subst bl31c3@make-export-subst) (set! bl31c5@make-export-env/macros (lambda (bl4a9e@lex* bl4a9f@loc* bl4aa0@r) (letrec* ((bl4aa5@lookup (lambda (bl4ac2@x) (let bl4aca@f ((bl4ac4@x bl4ac2@x) (bl4ac5@lex* bl4a9e@lex*) (bl4ac6@loc* bl4a9f@loc*)) (if (pair? bl4ac5@lex*) (if (eq? bl4ac4@x (car bl4ac5@lex*)) (car bl4ac6@loc*) (bl4aca@f bl4ac4@x (cdr bl4ac5@lex*) (cdr bl4ac6@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let bl4aae@f ((bl4aa6@r bl4aa0@r) (bl4aa7@env '()) (bl4aa8@global* '()) (bl4aa9@macro* '())) (if (null? bl4aa6@r) (values bl4aa7@env bl4aa8@global* bl4aa9@macro*) (let ((bl4ab0@x (car bl4aa6@r))) (let ((bl4ab2@label (car bl4ab0@x)) (bl4ab3@b (cdr bl4ab0@x))) (let ((bl4ab6@t (bl2f0e@binding-type bl4ab3@b))) (if (memv bl4ab6@t '(lexical)) (let ((bl4ab8@v (bl2f10@binding-value bl4ab3@b))) (let ((bl4aba@loc (bl4aa5@lookup (bl3083@lexical-var bl4ab8@v))) (bl4abb@type (if (bl3085@lexical-mutable? bl4ab8@v) 'mutable 'global))) (bl4aae@f (cdr bl4aa6@r) (cons (cons* bl4ab2@label bl4abb@type bl4aba@loc) bl4aa7@env) (cons (cons (bl3083@lexical-var bl4ab8@v) bl4aba@loc) bl4aa8@global*) bl4aa9@macro*))) (if (memv bl4ab6@t '(local-macro)) (let ((bl4abe@loc (gensym))) (bl4aae@f (cdr bl4aa6@r) (cons (cons* bl4ab2@label 'global-macro bl4abe@loc) bl4aa7@env) bl4aa8@global* (cons (cons bl4abe@loc (bl2f10@binding-value bl4ab3@b)) bl4aa9@macro*))) (if (memv bl4ab6@t '(local-macro!)) (let ((bl4ac0@loc (gensym))) (bl4aae@f (cdr bl4aa6@r) (cons (cons* bl4ab2@label 'global-macro! bl4ac0@loc) bl4aa7@env) bl4aa8@global* (cons (cons bl4ac0@loc (bl2f10@binding-value bl4ab3@b)) bl4aa9@macro*))) (if (memv bl4ab6@t '($rtd $module)) (bl4aae@f (cdr bl4aa6@r) (cons bl4ab0@x bl4aa7@env) bl4aa8@global* bl4aa9@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (bl2f0e@binding-type bl4ab3@b) (bl2f10@binding-value bl4ab3@b)))))))))))))) (set! bl4c5f@bl31c5@make-export-env/macros bl31c5@make-export-env/macros) (set! bl31c7@generate-temporaries (lambda (bl4acc@ls) (let ((bl4ace@t bl4acc@ls)) (let ((bl4ad0@ls/false (bl30f9@syntax-dispatch bl4ace@t 'each-any))) (if bl4ad0@ls/false (apply (lambda (bl4ad2@ls) (map (lambda (bl4ad4@x) (make-simple-struct 'stx '5 (list (let ((bl4ad6@x (bl31df@syntax->datum bl4ad4@x))) (if (or (symbol? bl4ad6@x) (string? bl4ad6@x)) (gensym bl4ad6@x) (gensym 't))) bl2e76@top-mark* '() '()))) bl4ad2@ls)) bl4ad0@ls/false) (let ((bl4ad8@t bl4ace@t)) (let ((bl4ada@ls/false (bl30f9@syntax-dispatch bl4ad8@t '_))) (if bl4ada@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) bl4ada@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl4ad8@t))))))))) (set! bl4c60@bl31c7@generate-temporaries bl31c7@generate-temporaries) (set! bl31c9@free-identifier=? (lambda (bl4adc@x bl4add@y) (if (bl2ef2@id? bl4adc@x) (if (bl2ef2@id? bl4add@y) (bl2ef8@free-id=? bl4adc@x bl4add@y) (assertion-violation 'free-identifier=? '"not an identifier" bl4add@y)) (assertion-violation 'free-identifier=? '"not an identifier" bl4adc@x)))) (set! bl4c61@bl31c9@free-identifier=? bl31c9@free-identifier=?) (set! bl31cb@bound-identifier=? (lambda (bl4ae0@x bl4ae1@y) (if (bl2ef2@id? bl4ae0@x) (if (bl2ef2@id? bl4ae1@y) (bl2ef6@bound-id=? bl4ae0@x bl4ae1@y) (assertion-violation 'bound-identifier=? '"not an identifier" bl4ae1@y)) (assertion-violation 'bound-identifier=? '"not an identifier" bl4ae0@x)))) (set! bl4c62@bl31cb@bound-identifier=? bl31cb@bound-identifier=?) (set! bl31cd@make-source-condition (lambda (bl4ae4@x) (letrec* ((bl4aee@bl4ae9 (make-record-type-descriptor '&source-information &condition-rtd 'bl4aec '#f '#f '#((immutable file-name) (immutable line)))) (bl4af0@bl4aeb '#f) (bl4af2@bl4aea (make-record-constructor-descriptor bl4aee@bl4ae9 &condition-rcd bl4af0@bl4aeb)) (bl4af5@bl4ae8 (record-predicate bl4aee@bl4ae9)) (bl4af7@make-source-condition (record-constructor bl4af2@bl4aea)) (bl4af9@bl4ae6 (record-accessor bl4aee@bl4ae9 '0)) (bl4afb@bl4ae7 (record-accessor bl4aee@bl4ae9 '1)) (bl4afd@source-condition? (condition-predicate bl4aee@bl4ae9)) (bl4aff@source-filename (condition-accessor bl4aee@bl4ae9 bl4af9@bl4ae6)) (bl4b01@source-character (condition-accessor bl4aee@bl4ae9 bl4afb@bl4ae7))) (if (and (pair? bl4ae4@x) (pair? (cdr bl4ae4@x))) (bl4af7@make-source-condition (car bl4ae4@x) (cadr bl4ae4@x)) (condition))))) (set! bl4c63@bl31cd@make-source-condition bl31cd@make-source-condition) (set! bl31cf@extract-position-condition (lambda (bl4b02@x) (bl31cd@make-source-condition (bl31d1@expression-position bl4b02@x)))) (set! bl4c64@bl31cf@extract-position-condition bl31cf@extract-position-condition) (set! bl31d1@expression-position (lambda (bl4b04@x) (and (bl2ebe@stx? bl4b04@x) (let ((bl4b06@x (bl2ec0@stx-expr bl4b04@x))) (and (bl2a36@bl2908@annotation? bl4b06@x) (bl2a37@bl290a@annotation-source bl4b06@x)))))) (set! bl4c65@bl31d1@expression-position bl31d1@expression-position) (set! bl31d3@assertion-error (lambda (bl4b08@expr bl4b09@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list bl4b08@expr)) (bl31cd@make-source-condition bl4b09@pos))))) (set! bl4c66@bl31d3@assertion-error bl31d3@assertion-error) (set! bl31d5@syntax-error (lambda (bl4b0c@x . bl4b0e@args) (begin (if (not (for-all string? bl4b0e@args)) (assertion-violation 'syntax-error '"invalid argument" bl4b0e@args) (void)) (raise (condition (make-message-condition (if (null? bl4b0e@args) '"invalid syntax" (apply string-append bl4b0e@args))) (make-syntax-violation (bl31df@syntax->datum bl4b0c@x) '#f) (bl31cf@extract-position-condition bl4b0c@x)))))) (set! bl4c67@bl31d5@syntax-error bl31d5@syntax-error) (set! bl31d7@syntax-violation* (lambda (bl4b10@who bl4b11@msg bl4b12@form bl4b13@condition-object) (begin (if (not (string? bl4b11@msg)) (assertion-violation 'syntax-violation '"message is not a string" bl4b11@msg) (void)) (let ((bl4b18@who (if (or (string? bl4b10@who) (symbol? bl4b10@who)) bl4b10@who (if (not bl4b10@who) (let ((bl4b1a@t bl4b12@form)) (let ((bl4b1c@ls/false (bl30f9@syntax-dispatch bl4b1a@t 'any))) (if (and bl4b1c@ls/false (apply (lambda (bl4b1e@id) (bl2ef2@id? bl4b1e@id)) bl4b1c@ls/false)) (apply (lambda (bl4b20@id) (bl31df@syntax->datum bl4b20@id)) bl4b1c@ls/false) (let ((bl4b22@t bl4b1a@t)) (let ((bl4b24@ls/false (bl30f9@syntax-dispatch bl4b22@t '(any . any)))) (if (and bl4b24@ls/false (apply (lambda (bl4b26@id bl4b27@rest) (bl2ef2@id? bl4b26@id)) bl4b24@ls/false)) (apply (lambda (bl4b2a@id bl4b2b@rest) (bl31df@syntax->datum bl4b2a@id)) bl4b24@ls/false) (let ((bl4b2e@t bl4b22@t)) (let ((bl4b30@ls/false (bl30f9@syntax-dispatch bl4b2e@t '_))) (if bl4b30@ls/false (apply (lambda () '#f) bl4b30@ls/false) (bl31d9@syntax-violation '#f '"invalid syntax" bl4b2e@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" bl4b10@who))))) (raise (condition (if bl4b18@who (make-who-condition bl4b18@who) (condition)) (make-message-condition bl4b11@msg) bl4b13@condition-object (bl31cf@extract-position-condition bl4b12@form))))))) (set! bl4c68@bl31d7@syntax-violation* bl31d7@syntax-violation*) (set! bl31d9@syntax-violation (lambda bl4b40 (let ((bl4b41 (length bl4b40))) (if (= bl4b41 '3) (apply (lambda (bl4b32@who bl4b33@msg bl4b34@form) (bl31d9@syntax-violation bl4b32@who bl4b33@msg bl4b34@form '#f)) bl4b40) (if (= bl4b41 '4) (apply (lambda (bl4b38@who bl4b39@msg bl4b3a@form bl4b3b@subform) (bl31d7@syntax-violation* bl4b38@who bl4b39@msg bl4b3a@form (make-syntax-violation (bl31df@syntax->datum bl4b3a@form) (bl31df@syntax->datum bl4b3b@subform)))) bl4b40) (error 'apply '"invalid arg count")))))) (set! bl4c69@bl31d9@syntax-violation bl31d9@syntax-violation) (set! bl31db@identifier? (lambda (bl4b42@x) (bl2ef2@id? bl4b42@x))) (set! bl4c6a@bl31db@identifier? bl31db@identifier?) (set! bl31dd@datum->syntax (lambda (bl4b44@id bl4b45@datum) (if (bl2ef2@id? bl4b44@id) (bl2ed2@datum->stx bl4b44@id bl4b45@datum) (assertion-violation 'datum->syntax '"not an identifier" bl4b44@id)))) (set! bl4c6b@bl31dd@datum->syntax bl31dd@datum->syntax) (set! bl31df@syntax->datum (lambda (bl4b48@x) (bl2f06@stx->datum bl4b48@x))) (set! bl4c6c@bl31df@syntax->datum bl31df@syntax->datum) (set! bl31e1@ungensym-all (lambda (bl4b4a@code) (if (pair? bl4b4a@code) (cons (bl31e1@ungensym-all (car bl4b4a@code)) (bl31e1@ungensym-all (cdr bl4b4a@code))) (if (symbol? bl4b4a@code) (ungensym bl4b4a@code) bl4b4a@code)))) (set! bl4c6d@bl31e1@ungensym-all bl31e1@ungensym-all) (set! bl31e3@compile-r6rs-top-level (lambda (bl4b4c@x*) (call-with-values (lambda () (bl3171@top-level-expander bl4b4c@x*)) (lambda (bl4b52@bl4b4f bl4b53@bl4b51) (let ((bl4b56@invoke-code bl4b53@bl4b51) (bl4b57@lib* bl4b52@bl4b4f)) (lambda () (begin (for-each bl2d0e@bl2b5c@invoke-library bl4b57@lib*) (let ((bl4b5a@expanded (bl2a98@bl2a50@expanded->core bl4b56@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (bl31e1@ungensym-all bl4b5a@expanded)) (void)) (eval-core bl4b5a@expanded)))))))))) (set! bl4c6e@bl31e3@compile-r6rs-top-level bl31e3@compile-r6rs-top-level) (set! bl31e5@pre-compile-r6rs-top-level (lambda (bl4b5c@x*) (call-with-values (lambda () (bl3171@top-level-expander bl4b5c@x*)) (lambda (bl4b62@bl4b5f bl4b63@bl4b61) (let ((bl4b66@invoke-code bl4b63@bl4b61) (bl4b67@lib* bl4b62@bl4b5f)) (begin (for-each bl2d0e@bl2b5c@invoke-library bl4b67@lib*) (bl2a40@bl291c@compile-core (bl2a98@bl2a50@expanded->core bl4b66@invoke-code)))))))) (set! bl4c6f@bl31e5@pre-compile-r6rs-top-level bl31e5@pre-compile-r6rs-top-level) (set! bl31e7@interaction-environment (let ((bl4b6a@the-env '#f)) (lambda () (or bl4b6a@the-env (let ((bl4b6c@lib (bl2d07@bl2b4e@find-library-by-name '(mosh interaction))) (bl4b6d@rib (bl2ea6@make-empty-rib))) (begin (let ((bl4b70@subst (bl2ce9@bl2b12@library-subst bl4b6c@lib))) (begin (bl2e92@set-rib-sym*! bl4b6d@rib (map car bl4b70@subst)) (bl2e96@set-rib-mark**! bl4b6d@rib (map (lambda (bl4b72@x) bl2e76@top-mark*) bl4b70@subst)) (bl2e9a@set-rib-label*! bl4b6d@rib (map cdr bl4b70@subst)))) (let ((bl4b74@env (make-simple-struct 'interaction-env '4 (list bl4b6d@rib '() '())))) (begin (set! bl4b6a@the-env bl4b74@env) bl4b74@env)))))))) (set! bl4c70@bl31e7@interaction-environment bl31e7@interaction-environment) (set! bl31e9@top-level-context (bl2a42@bl2920@make-parameter '#f)) (set! bl4c71@bl31e9@top-level-context bl31e9@top-level-context) (bl2d04@bl2b48@current-library-expander bl31bb@library-expander))
(begin (begin (bl2a95@bl2a4a@current-primitive-locations (lambda (bl51c7@x) (let ((bl51c9@t (assq bl51c7@x '((syntax-error . bl4c67@bl31d5@syntax-error) (syntax-dispatch . bl4c05@bl30f9@syntax-dispatch) (load . bl4df1@bl4c98@load) (interaction-environment . bl4c70@bl31e7@interaction-environment) (library-path . bl2cfc@bl2b38@library-path) (mosh-cache-dir . bl2a43@bl2922@mosh-cache-dir) (make-parameter . bl2a42@bl2920@make-parameter) (make-variable-transformer . bl4bc2@bl2f24@make-variable-transformer) (identifier? . bl4c6a@bl31db@identifier?) (generate-temporaries . bl4c60@bl31c7@generate-temporaries) (free-identifier=? . bl4c61@bl31c9@free-identifier=?) (syntax->datum . bl4c6c@bl31df@syntax->datum) (datum->syntax . bl4c6b@bl31dd@datum->syntax) (bound-identifier=? . bl4c62@bl31cb@bound-identifier=?) (scheme-report-environment . bl4c57@bl31b5@scheme-report-environment) (null-environment . bl4c56@bl31b3@null-environment) (command-line . bl4dee@bl4c92@command-line) (eval . bl4c59@bl31b9@eval) (environment . bl4c55@bl31b1@environment) (syntax-violation . bl4c69@bl31d9@syntax-violation) (assertion-error . bl4c66@bl31d3@assertion-error))))) (if bl51c9@t (cdr bl51c9@t) '#f)))) (bl2d0c@bl2b58@install-library 'bl51a4 '(mosh interaction) '() '() '() '() '((regexp? . bl5164) (alist->eq-hash-table . bl5160) (format . bl515d) (string-split . bl514d) (call-process . bl5146) (set-current-directory! . bl5142) (expand-path . bl5141) (current-directory . bl5140) (%spawn . bl513f) (%waitpid . bl513e) (simple-struct-name . bl513d) (simple-struct-set! . bl513c) (simple-struct-ref . bl513b) (make-simple-struct . bl513a) (simple-struct? . bl5139) (pointer-ref-c-int64 . bl5138) (pointer-ref-c-int32 . bl5137) (pointer-ref-c-int16 . bl5136) (pointer-ref-c-int8 . bl5135) (pointer-ref-c-uint64 . bl5134) (pointer-ref-c-uint32 . bl5133) (pointer-ref-c-uint16 . bl5132) (pointer-ref-c-uint8 . bl5131) (pointer-set-c-uint64! . bl5130) (pointer-set-c-uint32! . bl512f) (pointer-set-c-uint16! . bl512e) (pointer-set-c-uint8! . bl512d) (pointer-set-c-int64! . bl512c) (pointer-set-c-int32! . bl512b) (pointer-set-c-int16! . bl512a) (pointer-set-c-int8! . bl5129) (pointer-set-c-pointer! . bl5128) (pointer-set-c-double! . bl5127) (pointer-set-c-float! . bl5126) (pointer-set-c-long-long! . bl5125) (pointer-set-c-long! . bl5124) (pointer-set-c-int! . bl5123) (pointer-set-c-short! . bl5122) (pointer-set-c-char! . bl5121) (pointer-ref-c-pointer . bl5120) (pointer-ref-c-double . bl511f) (pointer-ref-c-float . bl511e) (pointer-ref-c-unsigned-long-long . bl511d) (pointer-ref-c-signed-long-long . bl511c) (pointer-ref-c-unsigned-long . bl511b) (pointer-ref-c-signed-long . bl511a) (pointer-ref-c-unsigned-int . bl5119) (pointer-ref-c-signed-int . bl5118) (pointer-ref-c-unsigned-short . bl5117) (pointer-ref-c-signed-short . bl5116) (pointer-ref-c-unsigned-char . bl5115) (pointer-ref-c-signed-char . bl5114) (pointer->integer . bl5113) (integer->pointer . bl5112) (pointer? . bl5111) (shared-errno . bl5110) (%ffi-supported? . bl510b) (%ffi-pointer->string . bl510a) (%ffi-call . bl5109) (%ffi-lookup . bl5108) (%ffi-open . bl5107) (null-terminated-utf8->string . bl5106) (null-terminated-bytevector->string . bl5105) (%exec . bl5104) (%fork . bl5103) (%pipe . bl5102) (p . bl5101) (whereis . bl50e5) (register . bl50e4) (vm-join! . bl50e3) (vm-set-value! . bl50e2) (vm? . bl50e1) (main-vm? . bl50e0) (vm-eval . bl50df) (vm-self . bl50de) (vm-start! . bl50dd) (make-vm . bl50dc) (mutex-try-lock! . bl50db) (mutex-unlock! . bl50da) (mutex-lock! . bl50d9) (mutex? . bl50d8) (make-mutex . bl50d7) (condition-variable-notify-all! . bl50d6) (condition-variable-notify! . bl50d5) (condition-variable-wait! . bl50d4) (make-condition-variable . bl50d3) (write/ss . bl50d2) (string-upcase . bl50b9) (string-titlecase . bl50b8) (string-normalize-nfkd . bl50b7) (string-normalize-nfkc . bl50b6) (string-normalize-nfd . bl50b5) (string-normalize-nfc . bl50b4) (string-foldcase . bl50b3) (string-downcase . bl50b2) (string-ci>? . bl50b1) (string-ci>=? . bl50b0) (string-ci=? . bl50af) (string-ci<? . bl50ae) (string-ci<=? . bl50ad) (char-whitespace? . bl50ac) (char-upper-case? . bl50ab) (char-title-case? . bl50aa) (char-numeric? . bl50a9) (char-lower-case? . bl50a8) (char-general-category . bl50a7) (char-upcase . bl50a6) (char-titlecase . bl50a5) (char-foldcase . bl50a4) (char-downcase . bl50a3) (char-ci>? . bl50a2) (char-ci>=? . bl50a1) (char-ci=? . bl50a0) (char-ci<? . bl509f) (char-ci<=? . bl509e) (char-alphabetic? . bl509d) (make-variable-transformer . bl2f23) (identifier? . bl31da) (generate-temporaries . bl31c6) (free-identifier=? . bl31c8) (syntax->datum . bl31de) (datum->syntax . bl31dc) (bound-identifier=? . bl31ca) (record-type-descriptor? . bl509c) (record-predicate . bl509b) (record-mutator . bl509a) (record-constructor . bl5099) (record-accessor . bl5098) (make-record-type-descriptor . bl5097) (make-record-constructor-descriptor . bl5096) (record? . bl5095) (record-type-uid . bl5094) (record-type-sealed? . bl5093) (record-type-parent . bl5092) (record-type-opaque? . bl5091) (record-type-name . bl5090) (record-type-generative? . bl508f) (record-type-field-names . bl508e) (record-rtd . bl508d) (record-field-mutable? . bl508c) (delete-file . bl508b) (file-exists? . bl508a) (vector-sort! . bl5089) (vector-sort . bl5088) (list-sort . bl5087) (symbol-hash . bl5086) (string-ci-hash . bl5085) (string-hash . bl5084) (equal-hash . bl5083) (hashtable-equivalence-function . bl5082) (make-hashtable . bl5081) (hashtable-hash-function . bl5080) (make-eqv-hashtable . bl507f) (make-eq-hashtable . bl507e) (hashtable? . bl507d) (hashtable-update! . bl507c) (hashtable-size . bl507b) (hashtable-set! . bl507a) (hashtable-ref . bl5079) (hashtable-mutable? . bl5078) (hashtable-keys . bl5077) (hashtable-entries . bl5076) (hashtable-delete! . bl5075) (hashtable-copy . bl5074) (hashtable-contains? . bl5073) (hashtable-clear! . bl5072) (call-with-output-file . bl5071) (call-with-input-file . bl5070) (write-char . bl506f) (write . bl506e) (with-output-to-file . bl506d) (with-input-from-file . bl506c) (read-char . bl506b) (read . bl506a) (peek-char . bl5069) (open-output-file . bl5068) (open-input-file . bl5067) (newline . bl5066) (display . bl5065) (close-output-port . bl5064) (close-input-port . bl5063) (eof-object? . bl5062) (eof-object . bl5061) (current-error-port . bl5060) (current-output-port . bl505f) (current-input-port . bl505e) (output-port? . bl505d) (input-port? . bl505c) (utf-8-codec . bl505b) (utf-16-codec . bl505a) (transcoder-error-handling-mode . bl5059) (transcoder-eol-style . bl5058) (transcoder-codec . bl5057) (transcoded-port . bl5056) (textual-port? . bl5055) (string->bytevector . bl5054) (standard-output-port . bl5053) (standard-input-port . bl5052) (standard-error-port . bl5051) (set-port-position! . bl5050) (put-u8 . bl504f) (put-string . bl504e) (put-datum . bl504d) (put-char . bl504c) (put-bytevector . bl504b) (port? . bl504a) (port-transcoder . bl5049) (port-position . bl5048) (port-has-set-port-position!? . bl5047) (port-has-port-position? . bl5046) (port-eof? . bl5045) (output-port-buffer-mode . bl5044) (open-string-output-port . bl5043) (open-string-input-port . bl5042) (open-file-output-port . bl5041) (open-file-input/output-port . bl5040) (open-file-input-port . bl503f) (open-bytevector-output-port . bl503e) (open-bytevector-input-port . bl503d) (native-transcoder . bl503c) (native-eol-style . bl503b) (make-transcoder . bl503a) (latin-1-codec . bl5039) (make-i/o-write-error . bl5038) (make-i/o-read-error . bl5037) (make-i/o-port-error . bl5036) (make-i/o-invalid-position-error . bl5035) (make-i/o-filename-error . bl5034) (make-i/o-file-protection-error . bl5033) (make-i/o-file-is-read-only-error . bl5032) (make-i/o-file-does-not-exist-error . bl5031) (make-i/o-file-already-exists-error . bl5030) (make-i/o-error . bl502f) (make-i/o-encoding-error . bl502e) (make-i/o-decoding-error . bl502d) (make-custom-textual-output-port . bl502c) (make-custom-textual-input/output-port . bl502b) (make-custom-textual-input-port . bl502a) (make-custom-binary-output-port . bl5029) (make-custom-binary-input/output-port . bl5028) (make-custom-binary-input-port . bl5027) (make-bytevector . bl5026) (lookahead-u8 . bl5025) (lookahead-char . bl5024) (i/o-write-error? . bl5023) (i/o-read-error? . bl5022) (i/o-port-error? . bl5021) (i/o-invalid-position-error? . bl5020) (i/o-filename-error? . bl501f) (i/o-file-protection-error? . bl501e) (i/o-file-is-read-only-error? . bl501d) (i/o-file-does-not-exist-error? . bl501c) (i/o-file-already-exists-error? . bl501b) (i/o-error? . bl501a) (i/o-error-position . bl5019) (i/o-error-port . bl5018) (i/o-error-filename . bl5017) (i/o-encoding-error? . bl5016) (i/o-encoding-error-char . bl5015) (i/o-decoding-error? . bl5014) (get-u8 . bl5013) (get-string-n! . bl5012) (get-string-n . bl5011) (get-string-all . bl5010) (get-line . bl500f) (get-datum . bl500e) (get-char . bl500d) (get-bytevector-some . bl500c) (get-bytevector-n! . bl500b) (get-bytevector-n . bl500a) (get-bytevector-all . bl5009) (flush-output-port . bl5008) (close-port . bl5007) (exit . bl4fff) (command-line . bl4c91) (string-fill! . bl4ffe) (string-set! . bl4ffd) (set-cdr! . bl4ffc) (set-car! . bl4ffb) (remove . bl4ffa) (remv . bl4ff9) (remp . bl4ff8) (remq . bl4ff7) (partition . bl4ff6) (memv . bl4ff5) (memq . bl4ff4) (memp . bl4ff3) (member . bl4ff2) (exists . bl4ff1) (for-all . bl4ff0) (fold-right . bl4fef) (fold-left . bl4fee) (find . bl4fed) (filter . bl4fec) (cons* . bl4feb) (assv . bl4fea) (assq . bl4fe9) (assp . bl4fe8) (assoc . bl4fe7) (call-with-string-output-port . bl4fe6) (call-with-port . bl4fe5) (call-with-bytevector-output-port . bl4fe4) (bytevector->string . bl4fe3) (buffer-mode? . bl4fe2) (binary-port? . bl4fe1) (with-exception-handler . bl4fe0) (raise-continuable . bl4fdf) (raise . bl4fde) (eval . bl31b8) (environment . bl31b0) (make-enumeration . bl4fdd) (enum-set=? . bl4fdc) (enum-set-universe . bl4fdb) (enum-set-union . bl4fda) (enum-set-subset? . bl4fd9) (enum-set-projection . bl4fd8) (enum-set-member? . bl4fd7) (enum-set-intersection . bl4fd6) (enum-set-indexer . bl4fd5) (enum-set-difference . bl4fd4) (enum-set-constructor . bl4fd3) (enum-set-complement . bl4fd2) (enum-set->list . bl4fd1) (who-condition? . bl4fd0) (warning? . bl4fcf) (violation? . bl4fce) (undefined-violation? . bl4fcd) (syntax-violation? . bl4fcc) (syntax-violation-subform . bl4fcb) (syntax-violation-form . bl4fca) (syntax-violation . bl31d8) (simple-conditions . bl4fc9) (serious-condition? . bl4fc8) (non-continuable-violation? . bl4fc7) (message-condition? . bl4fc6) (make-who-condition . bl4fc5) (make-warning . bl4fc4) (make-violation . bl4fc3) (make-undefined-violation . bl4fc2) (make-syntax-violation . bl4fc1) (make-serious-condition . bl4fc0) (make-non-continuable-violation . bl4fbf) (make-message-condition . bl4fbe) (make-lexical-violation . bl4fbd) (make-irritants-condition . bl4fbc) (make-implementation-restriction-violation . bl4fbb) (make-error . bl4fba) (make-assertion-violation . bl4fb9) (lexical-violation? . bl4fb8) (irritants-condition? . bl4fb7) (implementation-restriction-violation? . bl4fb6) (error? . bl4fb5) (condition-who . bl4fb4) (condition-predicate . bl4fb3) (condition-message . bl4fb2) (condition-irritants . bl4fb1) (condition-accessor . bl4fb0) (condition . bl4faf) (assertion-violation? . bl4fae) (condition? . bl4fad) (utf32->string . bl4fac) (utf16->string . bl4fab) (utf8->string . bl4faa) (uint-list->bytevector . bl4fa9) (u8-list->bytevector . bl4fa8) (string->utf8 . bl4fa7) (string->utf32 . bl4fa6) (string->utf16 . bl4fa5) (sint-list->bytevector . bl4fa4) (native-endianness . bl4fa3) (bytevector? . bl4fa2) (bytevector=? . bl4fa1) (bytevector-uint-set! . bl4fa0) (bytevector-uint-ref . bl4f9f) (bytevector-u8-set! . bl4f9e) (bytevector-u8-ref . bl4f9d) (bytevector-u64-set! . bl4f9c) (bytevector-u64-ref . bl4f9b) (bytevector-u64-native-set! . bl4f9a) (bytevector-u64-native-ref . bl4f99) (bytevector-u32-set! . bl4f98) (bytevector-u32-ref . bl4f97) (bytevector-u32-native-set! . bl4f96) (bytevector-u32-native-ref . bl4f95) (bytevector-u16-set! . bl4f94) (bytevector-u16-ref . bl4f93) (bytevector-u16-native-set! . bl4f92) (bytevector-u16-native-ref . bl4f91) (bytevector-sint-set! . bl4f90) (bytevector-sint-ref . bl4f8f) (bytevector-s8-set! . bl4f8e) (bytevector-s8-ref . bl4f8d) (bytevector-s64-set! . bl4f8c) (bytevector-s64-ref . bl4f8b) (bytevector-s64-native-set! . bl4f8a) (bytevector-s64-native-ref . bl4f89) (bytevector-s32-set! . bl4f88) (bytevector-s32-ref . bl4f87) (bytevector-s32-native-set! . bl4f86) (bytevector-s32-native-ref . bl4f85) (bytevector-s16-set! . bl4f84) (bytevector-s16-ref . bl4f83) (bytevector-s16-native-set! . bl4f82) (bytevector-s16-native-ref . bl4f81) (bytevector-length . bl4f80) (bytevector-ieee-single-ref . bl4f7f) (bytevector-ieee-single-set! . bl4f7e) (bytevector-ieee-single-native-set! . bl4f7d) (bytevector-ieee-single-native-ref . bl4f7c) (bytevector-ieee-double-set! . bl4f7b) (bytevector-ieee-double-ref . bl4f7a) (bytevector-ieee-double-native-set! . bl4f79) (bytevector-ieee-double-native-ref . bl4f78) (bytevector-fill! . bl4f77) (bytevector-copy! . bl4f76) (bytevector-copy . bl4f75) (bytevector->uint-list . bl4f74) (bytevector->u8-list . bl4f73) (bytevector->sint-list . bl4f72) (no-nans-violation? . bl4f71) (no-infinities-violation? . bl4f70) (make-no-nans-violation . bl4f6f) (make-no-infinities-violation . bl4f6e) (real->flonum . bl4f6d) (flzero? . bl4f6c) (fltruncate . bl4f6b) (fltan . bl4f6a) (flsqrt . bl4f69) (flsin . bl4f68) (flround . bl4f67) (flpositive? . bl4f66) (flonum? . bl4f65) (flodd? . bl4f64) (flnumerator . bl4f63) (flnegative? . bl4f62) (flnan? . bl4f61) (flmod0 . bl4f60) (flmod . bl4f5f) (flmin . bl4f5e) (flmax . bl4f5d) (fllog . bl4f5c) (flinteger? . bl4f5b) (flinfinite? . bl4f5a) (flfloor . bl4f59) (flfinite? . bl4f58) (flexpt . bl4f57) (flexp . bl4f56) (fleven? . bl4f55) (fldiv0-and-mod0 . bl4f54) (fldiv0 . bl4f53) (fldiv-and-mod . bl4f52) (fldiv . bl4f51) (fldenominator . bl4f50) (flcos . bl4f4f) (flceiling . bl4f4e) (flatan . bl4f4d) (flasin . bl4f4c) (flacos . bl4f4b) (flabs . bl4f4a) (fl>? . bl4f49) (fl>=? . bl4f48) (fl=? . bl4f47) (fl<? . bl4f46) (fl<=? . bl4f45) (fl/ . bl4f44) (fl- . bl4f43) (fl+ . bl4f42) (fl* . bl4f41) (fixnum->flonum . bl4f40) (fxzero? . bl4f3f) (fxxor . bl4f3e) (fxrotate-bit-field . bl4f3d) (fxreverse-bit-field . bl4f3c) (fxpositive? . bl4f3b) (fxodd? . bl4f3a) (fxnot . bl4f39) (fxnegative? . bl4f38) (fxmod0 . bl4f37) (fxmod . bl4f36) (fxmin . bl4f35) (fxmax . bl4f34) (fxlength . bl4f33) (fxior . bl4f32) (fxif . bl4f31) (fxfirst-bit-set . bl4f30) (fxeven? . bl4f2f) (fxdiv0-and-mod0 . bl4f2e) (fxdiv0 . bl4f2d) (fxdiv-and-mod . bl4f2c) (fxdiv . bl4f2b) (fxcopy-bit-field . bl4f2a) (fxcopy-bit . bl4f29) (fxbit-set? . bl4f28) (fxbit-field . bl4f27) (fxbit-count . bl4f26) (fxarithmetic-shift-right . bl4f25) (fxarithmetic-shift-left . bl4f24) (fxarithmetic-shift . bl4f23) (fxand . bl4f22) (fx>? . bl4f21) (fx>=? . bl4f20) (fx=? . bl4f1f) (fx<? . bl4f1e) (fx<=? . bl4f1d) (fx-/carry . bl4f1c) (fx- . bl4f1b) (fx+/carry . bl4f1a) (fx+ . bl4f19) (fx*/carry . bl4f18) (fx* . bl4f17) (greatest-fixnum . bl4f16) (least-fixnum . bl4f15) (fixnum-width . bl4f14) (fixnum? . bl4f13) (bitwise-rotate-bit-field . bl4f12) (bitwise-reverse-bit-field . bl4f11) (bitwise-length . bl4f10) (bitwise-if . bl4f0f) (bitwise-first-bit-set . bl4f0e) (bitwise-copy-bit-field . bl4f0d) (bitwise-copy-bit . bl4f0c) (bitwise-bit-set? . bl4f0b) (bitwise-bit-field . bl4f0a) (bitwise-bit-count . bl4f09) (bitwise-xor . bl4f08) (bitwise-ior . bl4f07) (bitwise-and . bl4f06) (bitwise-not . bl4f05) (bitwise-arithmetic-shift-right . bl4f04) (bitwise-arithmetic-shift-left . bl4f03) (bitwise-arithmetic-shift . bl4f02) (zero? . bl4f01) (vector? . bl4f00) (vector-set! . bl4eff) (vector-ref . bl4efe) (vector-map . bl4efd) (vector-length . bl4efc) (vector-for-each . bl4efb) (vector-fill! . bl4efa) (vector->list . bl4ef9) (vector . bl4ef8) (values . bl4ef7) (truncate . bl4ef6) (tan . bl4ef5) (symbol? . bl4ef4) (symbol=? . bl4ef3) (symbol->string . bl4ef2) (substring . bl4ef1) (string? . bl4ef0) (string>? . bl4eef) (string>=? . bl4eee) (string=? . bl4eed) (string<? . bl4eec) (string<=? . bl4eeb) (string-ref . bl4eea) (string-length . bl4ee9) (string-for-each . bl4ee8) (string-copy . bl4ee7) (string-append . bl4ee6) (string->symbol . bl4ee5) (string->number . bl4ee4) (string->list . bl4ee3) (string . bl4ee2) (sqrt . bl4ee1) (sin . bl4ee0) (round . bl4edf) (reverse . bl4ede) (real? . bl4edd) (real-valued? . bl4edc) (real-part . bl4edb) (rationalize . bl4eda) (rational? . bl4ed9) (rational-valued? . bl4ed8) (procedure? . bl4ed7) (positive? . bl4ed6) (pair? . bl4ed5) (odd? . bl4ed4) (numerator . bl4ed3) (number? . bl4ed2) (number->string . bl4ed1) (null? . bl4ed0) (not . bl4ecf) (negative? . bl4ece) (nan? . bl4ecd) (min . bl4ecc) (max . bl4ecb) (map . bl4eca) (make-vector . bl4ec9) (make-string . bl4ec8) (make-rectangular . bl4ec7) (make-polar . bl4ec6) (magnitude . bl4ec5) (log . bl4ec4) (list? . bl4ec3) (list-tail . bl4ec2) (list-ref . bl4ec1) (list->vector . bl4ec0) (list->string . bl4ebf) (list . bl4ebe) (length . bl4ebd) (lcm . bl4ebc) (integer? . bl4ebb) (integer-valued? . bl4eba) (integer->char . bl4eb9) (infinite? . bl4eb8) (inexact? . bl4eb7) (inexact . bl4eb6) (imag-part . bl4eb5) (gcd . bl4eb4) (for-each . bl4eb3) (floor . bl4eb2) (finite? . bl4eb1) (expt . bl4eb0) (exp . bl4eaf) (exact? . bl4eae) (exact-integer-sqrt . bl4ead) (exact . bl4eac) (even? . bl4eab) (error . bl4eaa) (eqv? . bl4ea9) (equal? . bl4ea8) (eq? . bl4ea7) (dynamic-wind . bl4ea6) (div0-and-mod0 . bl4ea5) (mod0 . bl4ea4) (div0 . bl4ea3) (div-and-mod . bl4ea2) (mod . bl4ea1) (div . bl4ea0) (denominator . bl4e9f) (cos . bl4e9e) (cons . bl4e9d) (complex? . bl4e9c) (char? . bl4e9b) (char>? . bl4e9a) (char>=? . bl4e99) (char=? . bl4e98) (char<? . bl4e97) (char<=? . bl4e96) (char->integer . bl4e95) (ceiling . bl4e94) (call-with-values . bl4e93) (call/cc . bl4e92) (call-with-current-continuation . bl4e91) (cddddr . bl4e90) (cdddar . bl4e8f) (cddadr . bl4e8e) (cddaar . bl4e8d) (cdaddr . bl4e8c) (cdadar . bl4e8b) (cdaadr . bl4e8a) (cdaaar . bl4e89) (cadddr . bl4e88) (caddar . bl4e87) (cadadr . bl4e86) (cadaar . bl4e85) (caaddr . bl4e84) (caadar . bl4e83) (caaadr . bl4e82) (caaaar . bl4e81) (cdddr . bl4e80) (cddar . bl4e7f) (cdadr . bl4e7e) (cdaar . bl4e7d) (caddr . bl4e7c) (cadar . bl4e7b) (caadr . bl4e7a) (caaar . bl4e79) (cddr . bl4e78) (cdar . bl4e77) (cadr . bl4e76) (caar . bl4e75) (cdr . bl4e74) (car . bl4e73) (boolean? . bl4e72) (boolean=? . bl4e71) (atan . bl4e70) (assertion-violation . bl4e6f) (asin . bl4e6e) (apply . bl4e6d) (append . bl4e6c) (angle . bl4e6b) (acos . bl4e6a) (abs . bl4e69) (/ . bl4e68) (* . bl4e67) (- . bl4e66) (+ . bl4e65) (>= . bl4e64) (> . bl4e63) (= . bl4e62) (<= . bl4e61) (< . bl4e60) (library . bl4e5f) (&no-nans . bl4e5e) (&no-infinities . bl4e5d) (&i/o-encoding . bl4e5c) (&i/o-decoding . bl4e5b) (&i/o-port . bl4e5a) (&i/o-file-does-not-exist . bl4e59) (&i/o-file-already-exists . bl4e58) (&i/o-file-is-read-only . bl4e57) (&i/o-file-protection . bl4e56) (&i/o-filename . bl4e55) (&i/o-invalid-position . bl4e54) (&i/o-write . bl4e53) (&i/o-read . bl4e52) (&i/o . bl4e51) (&undefined . bl4e50) (&syntax . bl4e4f) (&lexical . bl4e4e) (&implementation-restriction . bl4e4d) (&non-continuable . bl4e4c) (&who . bl4e4b) (&irritants . bl4e4a) (&assertion . bl4e49) (&violation . bl4e48) (&error . bl4e47) (&serious . bl4e46) (&warning . bl4e45) (&message . bl4e44) (&condition . bl4e43) (define-condition-type . bl4e42) (define-enumeration . bl4e41) (define-record-type . bl4e40) (parent-rtd . bl4e3f) (nongenerative . bl4e3e) (opaque . bl4e3d) (sealed . bl4e3c) (protocol . bl4e3b) (parent . bl4e3a) (immutable . bl4e39) (mutable . bl4e38) (fields . bl4e37) (error-handling-mode . bl4e36) (file-options . bl4e35) (buffer-mode . bl4e34) (eol-style . bl4e33) (guard . bl4e32) (unsyntax-splicing . bl4e2f) (unsyntax . bl4e2e) (unquote-splicing . bl4e2d) (unquote . bl4e2c) (_ . bl4e2b) (else . bl4e2a) (=> . bl4e29) (... . bl4e28) (assert . bl4e27) (endianness . bl4e26) (time . bl4e24) (do . bl4e23) (cond . bl4e22) (let* . bl4e21) (let*-values . bl4e20) (let-values . bl4e1f) (identifier-syntax . bl4e1e) (with-syntax . bl4e1d) (quasisyntax . bl4e1c) (quasiquote . bl4e1b) (syntax-rules . bl4e1a) (include . bl4e19) (record-constructor-descriptor . bl4e17) (record-type-descriptor . bl4e16) (case . bl4e15) (unless . bl4e13) (when . bl4e12) (or . bl4e11) (and . bl4e10) (if . bl4e0f) (let . bl4e0e) (letrec* . bl4e0d) (letrec . bl4e0c) (case-lambda . bl4e0a) (lambda . bl4e09) (syntax . bl4e08) (syntax-case . bl4e07) (quote . bl4e06) (letrec-syntax . bl4e04) (let-syntax . bl4e03) (set! . bl4e02) (import . bl4e01) (begin . bl4e00) (define-syntax . bl4dfe) (define . bl4dfd)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51a5 '(psyntax null-environment-5) '() '() '() '() '((make-promise . bl5000) (unquote-splicing . bl4e2d) (unquote . bl4e2c) (_ . bl4e2b) (else . bl4e2a) (=> . bl4e29) (... . bl4e28) (delay . bl4e25) (do . bl4e23) (cond . bl4e22) (let* . bl4e21) (quasiquote . bl4e1b) (syntax-rules . bl4e1a) (case . bl4e15) (or . bl4e11) (and . bl4e10) (if . bl4e0f) (let . bl4e0e) (letrec . bl4e0c) (lambda . bl4e09) (quote . bl4e06) (letrec-syntax . bl4e04) (let-syntax . bl4e03) (set! . bl4e02) (begin . bl4e00) (define-syntax . bl4dfe) (define . bl4dfd)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51a6 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . bl50b1) (string-ci>=? . bl50b0) (string-ci=? . bl50af) (string-ci<? . bl50ae) (string-ci<=? . bl50ad) (char-whitespace? . bl50ac) (char-upper-case? . bl50ab) (char-numeric? . bl50a9) (char-lower-case? . bl50a8) (char-upcase . bl50a6) (char-downcase . bl50a3) (char-ci>? . bl50a2) (char-ci>=? . bl50a1) (char-ci=? . bl50a0) (char-ci<? . bl509f) (char-ci<=? . bl509e) (char-alphabetic? . bl509d) (call-with-output-file . bl5071) (call-with-input-file . bl5070) (write-char . bl506f) (write . bl506e) (with-output-to-file . bl506d) (with-input-from-file . bl506c) (read-char . bl506b) (read . bl506a) (peek-char . bl5069) (open-output-file . bl5068) (open-input-file . bl5067) (newline . bl5066) (display . bl5065) (close-output-port . bl5064) (close-input-port . bl5063) (eof-object . bl5061) (current-output-port . bl505f) (current-input-port . bl505e) (output-port? . bl505d) (input-port? . bl505c) (scheme-report-environment . bl31b4) (quotient . bl5006) (null-environment . bl31b2) (remainder . bl5005) (modulo . bl5004) (inexact->exact . bl5003) (force . bl5002) (exact->inexact . bl5001) (make-promise . bl5000) (string-fill! . bl4ffe) (string-set! . bl4ffd) (set-cdr! . bl4ffc) (set-car! . bl4ffb) (memv . bl4ff5) (memq . bl4ff4) (member . bl4ff2) (assv . bl4fea) (assq . bl4fe9) (assoc . bl4fe7) (eval . bl31b8) (zero? . bl4f01) (vector? . bl4f00) (vector-set! . bl4eff) (vector-ref . bl4efe) (vector-length . bl4efc) (vector-fill! . bl4efa) (vector->list . bl4ef9) (vector . bl4ef8) (values . bl4ef7) (truncate . bl4ef6) (tan . bl4ef5) (symbol? . bl4ef4) (symbol->string . bl4ef2) (substring . bl4ef1) (string? . bl4ef0) (string>? . bl4eef) (string>=? . bl4eee) (string=? . bl4eed) (string<? . bl4eec) (string<=? . bl4eeb) (string-ref . bl4eea) (string-length . bl4ee9) (string-copy . bl4ee7) (string-append . bl4ee6) (string->symbol . bl4ee5) (string->number . bl4ee4) (string->list . bl4ee3) (string . bl4ee2) (sqrt . bl4ee1) (sin . bl4ee0) (round . bl4edf) (reverse . bl4ede) (real? . bl4edd) (real-part . bl4edb) (rationalize . bl4eda) (rational? . bl4ed9) (procedure? . bl4ed7) (positive? . bl4ed6) (pair? . bl4ed5) (odd? . bl4ed4) (numerator . bl4ed3) (number? . bl4ed2) (number->string . bl4ed1) (not . bl4ecf) (negative? . bl4ece) (min . bl4ecc) (max . bl4ecb) (map . bl4eca) (make-vector . bl4ec9) (make-string . bl4ec8) (make-rectangular . bl4ec7) (make-polar . bl4ec6) (magnitude . bl4ec5) (log . bl4ec4) (list? . bl4ec3) (list-tail . bl4ec2) (list-ref . bl4ec1) (list->vector . bl4ec0) (list->string . bl4ebf) (list . bl4ebe) (length . bl4ebd) (lcm . bl4ebc) (integer? . bl4ebb) (integer->char . bl4eb9) (inexact? . bl4eb7) (imag-part . bl4eb5) (gcd . bl4eb4) (for-each . bl4eb3) (floor . bl4eb2) (expt . bl4eb0) (exp . bl4eaf) (exact? . bl4eae) (even? . bl4eab) (eqv? . bl4ea9) (equal? . bl4ea8) (eq? . bl4ea7) (dynamic-wind . bl4ea6) (denominator . bl4e9f) (cos . bl4e9e) (cons . bl4e9d) (complex? . bl4e9c) (char? . bl4e9b) (char>? . bl4e9a) (char>=? . bl4e99) (char=? . bl4e98) (char<? . bl4e97) (char<=? . bl4e96) (char->integer . bl4e95) (ceiling . bl4e94) (call-with-values . bl4e93) (call-with-current-continuation . bl4e91) (cddddr . bl4e90) (cdddar . bl4e8f) (cddadr . bl4e8e) (cddaar . bl4e8d) (cdaddr . bl4e8c) (cdadar . bl4e8b) (cdaadr . bl4e8a) (cdaaar . bl4e89) (cadddr . bl4e88) (caddar . bl4e87) (cadadr . bl4e86) (cadaar . bl4e85) (caaddr . bl4e84) (caadar . bl4e83) (caaadr . bl4e82) (caaaar . bl4e81) (cdddr . bl4e80) (cddar . bl4e7f) (cdadr . bl4e7e) (cdaar . bl4e7d) (caddr . bl4e7c) (cadar . bl4e7b) (caadr . bl4e7a) (caaar . bl4e79) (cddr . bl4e78) (cdar . bl4e77) (cadr . bl4e76) (caar . bl4e75) (cdr . bl4e74) (car . bl4e73) (boolean? . bl4e72) (atan . bl4e70) (asin . bl4e6e) (apply . bl4e6d) (append . bl4e6c) (angle . bl4e6b) (acos . bl4e6a) (abs . bl4e69) (/ . bl4e68) (* . bl4e67) (- . bl4e66) (+ . bl4e65) (>= . bl4e64) (> . bl4e63) (= . bl4e62) (<= . bl4e61) (< . bl4e60) (unquote-splicing . bl4e2d) (unquote . bl4e2c) (else . bl4e2a) (=> . bl4e29) (... . bl4e28) (delay . bl4e25) (do . bl4e23) (cond . bl4e22) (let* . bl4e21) (quasiquote . bl4e1b) (syntax-rules . bl4e1a) (case . bl4e15) (or . bl4e11) (and . bl4e10) (if . bl4e0f) (let . bl4e0e) (letrec . bl4e0c) (lambda . bl4e09) (quote . bl4e06) (letrec-syntax . bl4e04) (let-syntax . bl4e03) (set! . bl4e02) (begin . bl4e00) (define-syntax . bl4dfe) (define . bl4dfd)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51a7 '(psyntax modules) '() '() '() '() '((module . bl4dff)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51a8 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51a9 '(rnrs) '(6) '() '() '() '((regexp? . bl5164) (string-upcase . bl50b9) (string-titlecase . bl50b8) (string-normalize-nfkd . bl50b7) (string-normalize-nfkc . bl50b6) (string-normalize-nfd . bl50b5) (string-normalize-nfc . bl50b4) (string-foldcase . bl50b3) (string-downcase . bl50b2) (string-ci>? . bl50b1) (string-ci>=? . bl50b0) (string-ci=? . bl50af) (string-ci<? . bl50ae) (string-ci<=? . bl50ad) (char-whitespace? . bl50ac) (char-upper-case? . bl50ab) (char-title-case? . bl50aa) (char-numeric? . bl50a9) (char-lower-case? . bl50a8) (char-general-category . bl50a7) (char-upcase . bl50a6) (char-titlecase . bl50a5) (char-foldcase . bl50a4) (char-downcase . bl50a3) (char-ci>? . bl50a2) (char-ci>=? . bl50a1) (char-ci=? . bl50a0) (char-ci<? . bl509f) (char-ci<=? . bl509e) (char-alphabetic? . bl509d) (make-variable-transformer . bl2f23) (identifier? . bl31da) (generate-temporaries . bl31c6) (free-identifier=? . bl31c8) (syntax->datum . bl31de) (datum->syntax . bl31dc) (bound-identifier=? . bl31ca) (record-type-descriptor? . bl509c) (record-predicate . bl509b) (record-mutator . bl509a) (record-constructor . bl5099) (record-accessor . bl5098) (make-record-type-descriptor . bl5097) (make-record-constructor-descriptor . bl5096) (record? . bl5095) (record-type-uid . bl5094) (record-type-sealed? . bl5093) (record-type-parent . bl5092) (record-type-opaque? . bl5091) (record-type-name . bl5090) (record-type-generative? . bl508f) (record-type-field-names . bl508e) (record-rtd . bl508d) (record-field-mutable? . bl508c) (delete-file . bl508b) (file-exists? . bl508a) (vector-sort! . bl5089) (vector-sort . bl5088) (list-sort . bl5087) (symbol-hash . bl5086) (string-ci-hash . bl5085) (string-hash . bl5084) (equal-hash . bl5083) (hashtable-equivalence-function . bl5082) (make-hashtable . bl5081) (hashtable-hash-function . bl5080) (make-eqv-hashtable . bl507f) (make-eq-hashtable . bl507e) (hashtable? . bl507d) (hashtable-update! . bl507c) (hashtable-size . bl507b) (hashtable-set! . bl507a) (hashtable-ref . bl5079) (hashtable-mutable? . bl5078) (hashtable-keys . bl5077) (hashtable-entries . bl5076) (hashtable-delete! . bl5075) (hashtable-copy . bl5074) (hashtable-contains? . bl5073) (hashtable-clear! . bl5072) (call-with-output-file . bl5071) (call-with-input-file . bl5070) (write-char . bl506f) (write . bl506e) (with-output-to-file . bl506d) (with-input-from-file . bl506c) (read-char . bl506b) (read . bl506a) (peek-char . bl5069) (open-output-file . bl5068) (open-input-file . bl5067) (newline . bl5066) (display . bl5065) (close-output-port . bl5064) (close-input-port . bl5063) (eof-object? . bl5062) (eof-object . bl5061) (current-error-port . bl5060) (current-output-port . bl505f) (current-input-port . bl505e) (output-port? . bl505d) (input-port? . bl505c) (utf-8-codec . bl505b) (utf-16-codec . bl505a) (transcoder-error-handling-mode . bl5059) (transcoder-eol-style . bl5058) (transcoder-codec . bl5057) (transcoded-port . bl5056) (textual-port? . bl5055) (string->bytevector . bl5054) (standard-output-port . bl5053) (standard-input-port . bl5052) (standard-error-port . bl5051) (set-port-position! . bl5050) (put-u8 . bl504f) (put-string . bl504e) (put-datum . bl504d) (put-char . bl504c) (put-bytevector . bl504b) (port? . bl504a) (port-transcoder . bl5049) (port-position . bl5048) (port-has-set-port-position!? . bl5047) (port-has-port-position? . bl5046) (port-eof? . bl5045) (output-port-buffer-mode . bl5044) (open-string-output-port . bl5043) (open-string-input-port . bl5042) (open-file-output-port . bl5041) (open-file-input/output-port . bl5040) (open-file-input-port . bl503f) (open-bytevector-output-port . bl503e) (open-bytevector-input-port . bl503d) (native-transcoder . bl503c) (native-eol-style . bl503b) (make-transcoder . bl503a) (latin-1-codec . bl5039) (make-i/o-write-error . bl5038) (make-i/o-read-error . bl5037) (make-i/o-port-error . bl5036) (make-i/o-invalid-position-error . bl5035) (make-i/o-filename-error . bl5034) (make-i/o-file-protection-error . bl5033) (make-i/o-file-is-read-only-error . bl5032) (make-i/o-file-does-not-exist-error . bl5031) (make-i/o-file-already-exists-error . bl5030) (make-i/o-error . bl502f) (make-i/o-encoding-error . bl502e) (make-i/o-decoding-error . bl502d) (make-custom-textual-output-port . bl502c) (make-custom-textual-input/output-port . bl502b) (make-custom-textual-input-port . bl502a) (make-custom-binary-output-port . bl5029) (make-custom-binary-input/output-port . bl5028) (make-custom-binary-input-port . bl5027) (make-bytevector . bl5026) (lookahead-u8 . bl5025) (lookahead-char . bl5024) (i/o-write-error? . bl5023) (i/o-read-error? . bl5022) (i/o-port-error? . bl5021) (i/o-invalid-position-error? . bl5020) (i/o-filename-error? . bl501f) (i/o-file-protection-error? . bl501e) (i/o-file-is-read-only-error? . bl501d) (i/o-file-does-not-exist-error? . bl501c) (i/o-file-already-exists-error? . bl501b) (i/o-error? . bl501a) (i/o-error-position . bl5019) (i/o-error-port . bl5018) (i/o-error-filename . bl5017) (i/o-encoding-error? . bl5016) (i/o-encoding-error-char . bl5015) (i/o-decoding-error? . bl5014) (get-u8 . bl5013) (get-string-n! . bl5012) (get-string-n . bl5011) (get-string-all . bl5010) (get-line . bl500f) (get-datum . bl500e) (get-char . bl500d) (get-bytevector-some . bl500c) (get-bytevector-n! . bl500b) (get-bytevector-n . bl500a) (get-bytevector-all . bl5009) (flush-output-port . bl5008) (close-port . bl5007) (exit . bl4fff) (command-line . bl4c91) (remove . bl4ffa) (remv . bl4ff9) (remp . bl4ff8) (remq . bl4ff7) (partition . bl4ff6) (memv . bl4ff5) (memq . bl4ff4) (memp . bl4ff3) (member . bl4ff2) (exists . bl4ff1) (for-all . bl4ff0) (fold-right . bl4fef) (fold-left . bl4fee) (find . bl4fed) (filter . bl4fec) (cons* . bl4feb) (assv . bl4fea) (assq . bl4fe9) (assp . bl4fe8) (assoc . bl4fe7) (call-with-string-output-port . bl4fe6) (call-with-port . bl4fe5) (call-with-bytevector-output-port . bl4fe4) (bytevector->string . bl4fe3) (buffer-mode? . bl4fe2) (binary-port? . bl4fe1) (with-exception-handler . bl4fe0) (raise-continuable . bl4fdf) (raise . bl4fde) (make-enumeration . bl4fdd) (enum-set=? . bl4fdc) (enum-set-universe . bl4fdb) (enum-set-union . bl4fda) (enum-set-subset? . bl4fd9) (enum-set-projection . bl4fd8) (enum-set-member? . bl4fd7) (enum-set-intersection . bl4fd6) (enum-set-indexer . bl4fd5) (enum-set-difference . bl4fd4) (enum-set-constructor . bl4fd3) (enum-set-complement . bl4fd2) (enum-set->list . bl4fd1) (who-condition? . bl4fd0) (warning? . bl4fcf) (violation? . bl4fce) (undefined-violation? . bl4fcd) (syntax-violation? . bl4fcc) (syntax-violation-subform . bl4fcb) (syntax-violation-form . bl4fca) (syntax-violation . bl31d8) (simple-conditions . bl4fc9) (serious-condition? . bl4fc8) (non-continuable-violation? . bl4fc7) (message-condition? . bl4fc6) (make-who-condition . bl4fc5) (make-warning . bl4fc4) (make-violation . bl4fc3) (make-undefined-violation . bl4fc2) (make-syntax-violation . bl4fc1) (make-serious-condition . bl4fc0) (make-non-continuable-violation . bl4fbf) (make-message-condition . bl4fbe) (make-lexical-violation . bl4fbd) (make-irritants-condition . bl4fbc) (make-implementation-restriction-violation . bl4fbb) (make-error . bl4fba) (make-assertion-violation . bl4fb9) (lexical-violation? . bl4fb8) (irritants-condition? . bl4fb7) (implementation-restriction-violation? . bl4fb6) (error? . bl4fb5) (condition-who . bl4fb4) (condition-predicate . bl4fb3) (condition-message . bl4fb2) (condition-irritants . bl4fb1) (condition-accessor . bl4fb0) (condition . bl4faf) (assertion-violation? . bl4fae) (condition? . bl4fad) (utf32->string . bl4fac) (utf16->string . bl4fab) (utf8->string . bl4faa) (uint-list->bytevector . bl4fa9) (u8-list->bytevector . bl4fa8) (string->utf8 . bl4fa7) (string->utf32 . bl4fa6) (string->utf16 . bl4fa5) (sint-list->bytevector . bl4fa4) (native-endianness . bl4fa3) (bytevector? . bl4fa2) (bytevector=? . bl4fa1) (bytevector-uint-set! . bl4fa0) (bytevector-uint-ref . bl4f9f) (bytevector-u8-set! . bl4f9e) (bytevector-u8-ref . bl4f9d) (bytevector-u64-set! . bl4f9c) (bytevector-u64-ref . bl4f9b) (bytevector-u64-native-set! . bl4f9a) (bytevector-u64-native-ref . bl4f99) (bytevector-u32-set! . bl4f98) (bytevector-u32-ref . bl4f97) (bytevector-u32-native-set! . bl4f96) (bytevector-u32-native-ref . bl4f95) (bytevector-u16-set! . bl4f94) (bytevector-u16-ref . bl4f93) (bytevector-u16-native-set! . bl4f92) (bytevector-u16-native-ref . bl4f91) (bytevector-sint-set! . bl4f90) (bytevector-sint-ref . bl4f8f) (bytevector-s8-set! . bl4f8e) (bytevector-s8-ref . bl4f8d) (bytevector-s64-set! . bl4f8c) (bytevector-s64-ref . bl4f8b) (bytevector-s64-native-set! . bl4f8a) (bytevector-s64-native-ref . bl4f89) (bytevector-s32-set! . bl4f88) (bytevector-s32-ref . bl4f87) (bytevector-s32-native-set! . bl4f86) (bytevector-s32-native-ref . bl4f85) (bytevector-s16-set! . bl4f84) (bytevector-s16-ref . bl4f83) (bytevector-s16-native-set! . bl4f82) (bytevector-s16-native-ref . bl4f81) (bytevector-length . bl4f80) (bytevector-ieee-single-ref . bl4f7f) (bytevector-ieee-single-set! . bl4f7e) (bytevector-ieee-single-native-set! . bl4f7d) (bytevector-ieee-single-native-ref . bl4f7c) (bytevector-ieee-double-set! . bl4f7b) (bytevector-ieee-double-ref . bl4f7a) (bytevector-ieee-double-native-set! . bl4f79) (bytevector-ieee-double-native-ref . bl4f78) (bytevector-fill! . bl4f77) (bytevector-copy! . bl4f76) (bytevector-copy . bl4f75) (bytevector->uint-list . bl4f74) (bytevector->u8-list . bl4f73) (bytevector->sint-list . bl4f72) (no-nans-violation? . bl4f71) (no-infinities-violation? . bl4f70) (make-no-nans-violation . bl4f6f) (make-no-infinities-violation . bl4f6e) (real->flonum . bl4f6d) (flzero? . bl4f6c) (fltruncate . bl4f6b) (fltan . bl4f6a) (flsqrt . bl4f69) (flsin . bl4f68) (flround . bl4f67) (flpositive? . bl4f66) (flonum? . bl4f65) (flodd? . bl4f64) (flnumerator . bl4f63) (flnegative? . bl4f62) (flnan? . bl4f61) (flmod0 . bl4f60) (flmod . bl4f5f) (flmin . bl4f5e) (flmax . bl4f5d) (fllog . bl4f5c) (flinteger? . bl4f5b) (flinfinite? . bl4f5a) (flfloor . bl4f59) (flfinite? . bl4f58) (flexpt . bl4f57) (flexp . bl4f56) (fleven? . bl4f55) (fldiv0-and-mod0 . bl4f54) (fldiv0 . bl4f53) (fldiv-and-mod . bl4f52) (fldiv . bl4f51) (fldenominator . bl4f50) (flcos . bl4f4f) (flceiling . bl4f4e) (flatan . bl4f4d) (flasin . bl4f4c) (flacos . bl4f4b) (flabs . bl4f4a) (fl>? . bl4f49) (fl>=? . bl4f48) (fl=? . bl4f47) (fl<? . bl4f46) (fl<=? . bl4f45) (fl/ . bl4f44) (fl- . bl4f43) (fl+ . bl4f42) (fl* . bl4f41) (fixnum->flonum . bl4f40) (fxzero? . bl4f3f) (fxxor . bl4f3e) (fxrotate-bit-field . bl4f3d) (fxreverse-bit-field . bl4f3c) (fxpositive? . bl4f3b) (fxodd? . bl4f3a) (fxnot . bl4f39) (fxnegative? . bl4f38) (fxmod0 . bl4f37) (fxmod . bl4f36) (fxmin . bl4f35) (fxmax . bl4f34) (fxlength . bl4f33) (fxior . bl4f32) (fxif . bl4f31) (fxfirst-bit-set . bl4f30) (fxeven? . bl4f2f) (fxdiv0-and-mod0 . bl4f2e) (fxdiv0 . bl4f2d) (fxdiv-and-mod . bl4f2c) (fxdiv . bl4f2b) (fxcopy-bit-field . bl4f2a) (fxcopy-bit . bl4f29) (fxbit-set? . bl4f28) (fxbit-field . bl4f27) (fxbit-count . bl4f26) (fxarithmetic-shift-right . bl4f25) (fxarithmetic-shift-left . bl4f24) (fxarithmetic-shift . bl4f23) (fxand . bl4f22) (fx>? . bl4f21) (fx>=? . bl4f20) (fx=? . bl4f1f) (fx<? . bl4f1e) (fx<=? . bl4f1d) (fx-/carry . bl4f1c) (fx- . bl4f1b) (fx+/carry . bl4f1a) (fx+ . bl4f19) (fx*/carry . bl4f18) (fx* . bl4f17) (greatest-fixnum . bl4f16) (least-fixnum . bl4f15) (fixnum-width . bl4f14) (fixnum? . bl4f13) (bitwise-rotate-bit-field . bl4f12) (bitwise-reverse-bit-field . bl4f11) (bitwise-length . bl4f10) (bitwise-if . bl4f0f) (bitwise-first-bit-set . bl4f0e) (bitwise-copy-bit-field . bl4f0d) (bitwise-copy-bit . bl4f0c) (bitwise-bit-set? . bl4f0b) (bitwise-bit-field . bl4f0a) (bitwise-bit-count . bl4f09) (bitwise-xor . bl4f08) (bitwise-ior . bl4f07) (bitwise-and . bl4f06) (bitwise-not . bl4f05) (bitwise-arithmetic-shift-right . bl4f04) (bitwise-arithmetic-shift-left . bl4f03) (bitwise-arithmetic-shift . bl4f02) (zero? . bl4f01) (vector? . bl4f00) (vector-set! . bl4eff) (vector-ref . bl4efe) (vector-map . bl4efd) (vector-length . bl4efc) (vector-for-each . bl4efb) (vector-fill! . bl4efa) (vector->list . bl4ef9) (vector . bl4ef8) (values . bl4ef7) (truncate . bl4ef6) (tan . bl4ef5) (symbol? . bl4ef4) (symbol=? . bl4ef3) (symbol->string . bl4ef2) (substring . bl4ef1) (string? . bl4ef0) (string>? . bl4eef) (string>=? . bl4eee) (string=? . bl4eed) (string<? . bl4eec) (string<=? . bl4eeb) (string-ref . bl4eea) (string-length . bl4ee9) (string-for-each . bl4ee8) (string-copy . bl4ee7) (string-append . bl4ee6) (string->symbol . bl4ee5) (string->number . bl4ee4) (string->list . bl4ee3) (string . bl4ee2) (sqrt . bl4ee1) (sin . bl4ee0) (round . bl4edf) (reverse . bl4ede) (real? . bl4edd) (real-valued? . bl4edc) (real-part . bl4edb) (rationalize . bl4eda) (rational? . bl4ed9) (rational-valued? . bl4ed8) (procedure? . bl4ed7) (positive? . bl4ed6) (pair? . bl4ed5) (odd? . bl4ed4) (numerator . bl4ed3) (number? . bl4ed2) (number->string . bl4ed1) (null? . bl4ed0) (not . bl4ecf) (negative? . bl4ece) (nan? . bl4ecd) (min . bl4ecc) (max . bl4ecb) (map . bl4eca) (make-vector . bl4ec9) (make-string . bl4ec8) (make-rectangular . bl4ec7) (make-polar . bl4ec6) (magnitude . bl4ec5) (log . bl4ec4) (list? . bl4ec3) (list-tail . bl4ec2) (list-ref . bl4ec1) (list->vector . bl4ec0) (list->string . bl4ebf) (list . bl4ebe) (length . bl4ebd) (lcm . bl4ebc) (integer? . bl4ebb) (integer-valued? . bl4eba) (integer->char . bl4eb9) (infinite? . bl4eb8) (inexact? . bl4eb7) (inexact . bl4eb6) (imag-part . bl4eb5) (gcd . bl4eb4) (for-each . bl4eb3) (floor . bl4eb2) (finite? . bl4eb1) (expt . bl4eb0) (exp . bl4eaf) (exact? . bl4eae) (exact-integer-sqrt . bl4ead) (exact . bl4eac) (even? . bl4eab) (error . bl4eaa) (eqv? . bl4ea9) (equal? . bl4ea8) (eq? . bl4ea7) (dynamic-wind . bl4ea6) (div0-and-mod0 . bl4ea5) (mod0 . bl4ea4) (div0 . bl4ea3) (div-and-mod . bl4ea2) (mod . bl4ea1) (div . bl4ea0) (denominator . bl4e9f) (cos . bl4e9e) (cons . bl4e9d) (complex? . bl4e9c) (char? . bl4e9b) (char>? . bl4e9a) (char>=? . bl4e99) (char=? . bl4e98) (char<? . bl4e97) (char<=? . bl4e96) (char->integer . bl4e95) (ceiling . bl4e94) (call-with-values . bl4e93) (call/cc . bl4e92) (call-with-current-continuation . bl4e91) (cddddr . bl4e90) (cdddar . bl4e8f) (cddadr . bl4e8e) (cddaar . bl4e8d) (cdaddr . bl4e8c) (cdadar . bl4e8b) (cdaadr . bl4e8a) (cdaaar . bl4e89) (cadddr . bl4e88) (caddar . bl4e87) (cadadr . bl4e86) (cadaar . bl4e85) (caaddr . bl4e84) (caadar . bl4e83) (caaadr . bl4e82) (caaaar . bl4e81) (cdddr . bl4e80) (cddar . bl4e7f) (cdadr . bl4e7e) (cdaar . bl4e7d) (caddr . bl4e7c) (cadar . bl4e7b) (caadr . bl4e7a) (caaar . bl4e79) (cddr . bl4e78) (cdar . bl4e77) (cadr . bl4e76) (caar . bl4e75) (cdr . bl4e74) (car . bl4e73) (boolean? . bl4e72) (boolean=? . bl4e71) (atan . bl4e70) (assertion-violation . bl4e6f) (asin . bl4e6e) (apply . bl4e6d) (append . bl4e6c) (angle . bl4e6b) (acos . bl4e6a) (abs . bl4e69) (/ . bl4e68) (* . bl4e67) (- . bl4e66) (+ . bl4e65) (>= . bl4e64) (> . bl4e63) (= . bl4e62) (<= . bl4e61) (< . bl4e60) (&no-nans . bl4e5e) (&no-infinities . bl4e5d) (&i/o-encoding . bl4e5c) (&i/o-decoding . bl4e5b) (&i/o-port . bl4e5a) (&i/o-file-does-not-exist . bl4e59) (&i/o-file-already-exists . bl4e58) (&i/o-file-is-read-only . bl4e57) (&i/o-file-protection . bl4e56) (&i/o-filename . bl4e55) (&i/o-invalid-position . bl4e54) (&i/o-write . bl4e53) (&i/o-read . bl4e52) (&i/o . bl4e51) (&undefined . bl4e50) (&syntax . bl4e4f) (&lexical . bl4e4e) (&implementation-restriction . bl4e4d) (&non-continuable . bl4e4c) (&who . bl4e4b) (&irritants . bl4e4a) (&assertion . bl4e49) (&violation . bl4e48) (&error . bl4e47) (&serious . bl4e46) (&warning . bl4e45) (&message . bl4e44) (&condition . bl4e43) (define-condition-type . bl4e42) (define-enumeration . bl4e41) (define-record-type . bl4e40) (parent-rtd . bl4e3f) (nongenerative . bl4e3e) (opaque . bl4e3d) (sealed . bl4e3c) (protocol . bl4e3b) (parent . bl4e3a) (immutable . bl4e39) (mutable . bl4e38) (fields . bl4e37) (error-handling-mode . bl4e36) (file-options . bl4e35) (buffer-mode . bl4e34) (eol-style . bl4e33) (guard . bl4e32) (unsyntax-splicing . bl4e2f) (unsyntax . bl4e2e) (unquote-splicing . bl4e2d) (unquote . bl4e2c) (_ . bl4e2b) (else . bl4e2a) (=> . bl4e29) (... . bl4e28) (assert . bl4e27) (endianness . bl4e26) (do . bl4e23) (cond . bl4e22) (let* . bl4e21) (let*-values . bl4e20) (let-values . bl4e1f) (identifier-syntax . bl4e1e) (with-syntax . bl4e1d) (quasisyntax . bl4e1c) (quasiquote . bl4e1b) (syntax-rules . bl4e1a) (record-constructor-descriptor . bl4e17) (record-type-descriptor . bl4e16) (case . bl4e15) (unless . bl4e13) (when . bl4e12) (or . bl4e11) (and . bl4e10) (if . bl4e0f) (let . bl4e0e) (letrec* . bl4e0d) (letrec . bl4e0c) (case-lambda . bl4e0a) (lambda . bl4e09) (syntax . bl4e08) (syntax-case . bl4e07) (quote . bl4e06) (letrec-syntax . bl4e04) (let-syntax . bl4e03) (set! . bl4e02) (begin . bl4e00) (define-syntax . bl4dfe) (define . bl4dfd)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51aa '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . bl31b4) (quotient . bl5006) (null-environment . bl31b2) (remainder . bl5005) (modulo . bl5004) (inexact->exact . bl5003) (force . bl5002) (exact->inexact . bl5001) (make-promise . bl5000) (delay . bl4e25)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51ab '(rnrs control) '(6) '() '() '() '((do . bl4e23) (unless . bl4e13) (when . bl4e12) (case-lambda . bl4e0a)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51ac '(rnrs eval) '(6) '() '() '() '((eval . bl31b8) (environment . bl31b0)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51ad '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . bl4ffc) (set-car! . bl4ffb)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51ae '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . bl4ffe) (string-set! . bl4ffd)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51af '(rnrs programs) '(6) '() '() '() '((exit . bl4fff) (command-line . bl4c91)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51b0 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . bl2f23) (identifier? . bl31da) (generate-temporaries . bl31c6) (free-identifier=? . bl31c8) (syntax->datum . bl31de) (datum->syntax . bl31dc) (bound-identifier=? . bl31ca) (syntax-violation . bl31d8) (unsyntax-splicing . bl4e2f) (unsyntax . bl4e2e) (_ . bl4e2b) (... . bl4e28) (with-syntax . bl4e1d) (quasisyntax . bl4e1c) (syntax . bl4e08) (syntax-case . bl4e07)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51b1 '(rnrs files) '(6) '() '() '() '((delete-file . bl508b) (file-exists? . bl508a) (make-i/o-write-error . bl5038) (make-i/o-read-error . bl5037) (make-i/o-port-error . bl5036) (make-i/o-invalid-position-error . bl5035) (make-i/o-filename-error . bl5034) (make-i/o-file-protection-error . bl5033) (make-i/o-file-is-read-only-error . bl5032) (make-i/o-file-does-not-exist-error . bl5031) (make-i/o-file-already-exists-error . bl5030) (make-i/o-error . bl502f) (i/o-write-error? . bl5023) (i/o-read-error? . bl5022) (i/o-port-error? . bl5021) (i/o-invalid-position-error? . bl5020) (i/o-filename-error? . bl501f) (i/o-file-protection-error? . bl501e) (i/o-file-is-read-only-error? . bl501d) (i/o-file-does-not-exist-error? . bl501c) (i/o-file-already-exists-error? . bl501b) (i/o-error? . bl501a) (i/o-error-position . bl5019) (i/o-error-port . bl5018) (i/o-error-filename . bl5017) (&i/o-port . bl4e5a) (&i/o-file-does-not-exist . bl4e59) (&i/o-file-already-exists . bl4e58) (&i/o-file-is-read-only . bl4e57) (&i/o-file-protection . bl4e56) (&i/o-filename . bl4e55) (&i/o-invalid-position . bl4e54) (&i/o-write . bl4e53) (&i/o-read . bl4e52) (&i/o . bl4e51)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51b2 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . bl5089) (vector-sort . bl5088) (list-sort . bl5087)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51b3 '(rnrs base) '(6) '() '() '() '((zero? . bl4f01) (vector? . bl4f00) (vector-set! . bl4eff) (vector-ref . bl4efe) (vector-map . bl4efd) (vector-length . bl4efc) (vector-for-each . bl4efb) (vector-fill! . bl4efa) (vector->list . bl4ef9) (vector . bl4ef8) (values . bl4ef7) (truncate . bl4ef6) (tan . bl4ef5) (symbol? . bl4ef4) (symbol=? . bl4ef3) (symbol->string . bl4ef2) (substring . bl4ef1) (string? . bl4ef0) (string>? . bl4eef) (string>=? . bl4eee) (string=? . bl4eed) (string<? . bl4eec) (string<=? . bl4eeb) (string-ref . bl4eea) (string-length . bl4ee9) (string-for-each . bl4ee8) (string-copy . bl4ee7) (string-append . bl4ee6) (string->symbol . bl4ee5) (string->number . bl4ee4) (string->list . bl4ee3) (string . bl4ee2) (sqrt . bl4ee1) (sin . bl4ee0) (round . bl4edf) (reverse . bl4ede) (real? . bl4edd) (real-valued? . bl4edc) (real-part . bl4edb) (rationalize . bl4eda) (rational? . bl4ed9) (rational-valued? . bl4ed8) (procedure? . bl4ed7) (positive? . bl4ed6) (pair? . bl4ed5) (odd? . bl4ed4) (numerator . bl4ed3) (number? . bl4ed2) (number->string . bl4ed1) (null? . bl4ed0) (not . bl4ecf) (negative? . bl4ece) (nan? . bl4ecd) (min . bl4ecc) (max . bl4ecb) (map . bl4eca) (make-vector . bl4ec9) (make-string . bl4ec8) (make-rectangular . bl4ec7) (make-polar . bl4ec6) (magnitude . bl4ec5) (log . bl4ec4) (list? . bl4ec3) (list-tail . bl4ec2) (list-ref . bl4ec1) (list->vector . bl4ec0) (list->string . bl4ebf) (list . bl4ebe) (length . bl4ebd) (lcm . bl4ebc) (integer? . bl4ebb) (integer-valued? . bl4eba) (integer->char . bl4eb9) (infinite? . bl4eb8) (inexact? . bl4eb7) (inexact . bl4eb6) (imag-part . bl4eb5) (gcd . bl4eb4) (for-each . bl4eb3) (floor . bl4eb2) (finite? . bl4eb1) (expt . bl4eb0) (exp . bl4eaf) (exact? . bl4eae) (exact-integer-sqrt . bl4ead) (exact . bl4eac) (even? . bl4eab) (error . bl4eaa) (eqv? . bl4ea9) (equal? . bl4ea8) (eq? . bl4ea7) (dynamic-wind . bl4ea6) (div0-and-mod0 . bl4ea5) (mod0 . bl4ea4) (div0 . bl4ea3) (div-and-mod . bl4ea2) (mod . bl4ea1) (div . bl4ea0) (denominator . bl4e9f) (cos . bl4e9e) (cons . bl4e9d) (complex? . bl4e9c) (char? . bl4e9b) (char>? . bl4e9a) (char>=? . bl4e99) (char=? . bl4e98) (char<? . bl4e97) (char<=? . bl4e96) (char->integer . bl4e95) (ceiling . bl4e94) (call-with-values . bl4e93) (call/cc . bl4e92) (call-with-current-continuation . bl4e91) (cddddr . bl4e90) (cdddar . bl4e8f) (cddadr . bl4e8e) (cddaar . bl4e8d) (cdaddr . bl4e8c) (cdadar . bl4e8b) (cdaadr . bl4e8a) (cdaaar . bl4e89) (cadddr . bl4e88) (caddar . bl4e87) (cadadr . bl4e86) (cadaar . bl4e85) (caaddr . bl4e84) (caadar . bl4e83) (caaadr . bl4e82) (caaaar . bl4e81) (cdddr . bl4e80) (cddar . bl4e7f) (cdadr . bl4e7e) (cdaar . bl4e7d) (caddr . bl4e7c) (cadar . bl4e7b) (caadr . bl4e7a) (caaar . bl4e79) (cddr . bl4e78) (cdar . bl4e77) (cadr . bl4e76) (caar . bl4e75) (cdr . bl4e74) (car . bl4e73) (boolean? . bl4e72) (boolean=? . bl4e71) (atan . bl4e70) (assertion-violation . bl4e6f) (asin . bl4e6e) (apply . bl4e6d) (append . bl4e6c) (angle . bl4e6b) (acos . bl4e6a) (abs . bl4e69) (/ . bl4e68) (* . bl4e67) (- . bl4e66) (+ . bl4e65) (>= . bl4e64) (> . bl4e63) (= . bl4e62) (<= . bl4e61) (< . bl4e60) (unquote-splicing . bl4e2d) (unquote . bl4e2c) (_ . bl4e2b) (else . bl4e2a) (=> . bl4e29) (... . bl4e28) (assert . bl4e27) (cond . bl4e22) (let* . bl4e21) (let*-values . bl4e20) (let-values . bl4e1f) (identifier-syntax . bl4e1e) (quasiquote . bl4e1b) (syntax-rules . bl4e1a) (case . bl4e15) (or . bl4e11) (and . bl4e10) (if . bl4e0f) (let . bl4e0e) (letrec* . bl4e0d) (letrec . bl4e0c) (lambda . bl4e09) (quote . bl4e06) (letrec-syntax . bl4e04) (let-syntax . bl4e03) (set! . bl4e02) (begin . bl4e00) (define-syntax . bl4dfe) (define . bl4dfd)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51b4 '(rnrs lists) '(6) '() '() '() '((remove . bl4ffa) (remv . bl4ff9) (remp . bl4ff8) (remq . bl4ff7) (partition . bl4ff6) (memv . bl4ff5) (memq . bl4ff4) (memp . bl4ff3) (member . bl4ff2) (exists . bl4ff1) (for-all . bl4ff0) (fold-right . bl4fef) (fold-left . bl4fee) (find . bl4fed) (filter . bl4fec) (cons* . bl4feb) (assv . bl4fea) (assq . bl4fe9) (assp . bl4fe8) (assoc . bl4fe7)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51b5 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . bl5071) (call-with-input-file . bl5070) (write-char . bl506f) (write . bl506e) (with-output-to-file . bl506d) (with-input-from-file . bl506c) (read-char . bl506b) (read . bl506a) (peek-char . bl5069) (open-output-file . bl5068) (open-input-file . bl5067) (newline . bl5066) (display . bl5065) (close-output-port . bl5064) (close-input-port . bl5063) (eof-object? . bl5062) (eof-object . bl5061) (current-error-port . bl5060) (current-output-port . bl505f) (current-input-port . bl505e) (output-port? . bl505d) (input-port? . bl505c) (make-i/o-write-error . bl5038) (make-i/o-read-error . bl5037) (make-i/o-port-error . bl5036) (make-i/o-invalid-position-error . bl5035) (make-i/o-filename-error . bl5034) (make-i/o-file-protection-error . bl5033) (make-i/o-file-is-read-only-error . bl5032) (make-i/o-file-does-not-exist-error . bl5031) (make-i/o-file-already-exists-error . bl5030) (make-i/o-error . bl502f) (i/o-write-error? . bl5023) (i/o-read-error? . bl5022) (i/o-port-error? . bl5021) (i/o-invalid-position-error? . bl5020) (i/o-filename-error? . bl501f) (i/o-file-protection-error? . bl501e) (i/o-file-is-read-only-error? . bl501d) (i/o-file-does-not-exist-error? . bl501c) (i/o-file-already-exists-error? . bl501b) (i/o-error? . bl501a) (i/o-error-position . bl5019) (i/o-error-port . bl5018) (i/o-error-filename . bl5017) (&i/o-port . bl4e5a) (&i/o-file-does-not-exist . bl4e59) (&i/o-file-already-exists . bl4e58) (&i/o-file-is-read-only . bl4e57) (&i/o-file-protection . bl4e56) (&i/o-filename . bl4e55) (&i/o-invalid-position . bl4e54) (&i/o-write . bl4e53) (&i/o-read . bl4e52) (&i/o . bl4e51)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51b6 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . bl5026) (utf32->string . bl4fac) (utf16->string . bl4fab) (utf8->string . bl4faa) (uint-list->bytevector . bl4fa9) (u8-list->bytevector . bl4fa8) (string->utf8 . bl4fa7) (string->utf32 . bl4fa6) (string->utf16 . bl4fa5) (sint-list->bytevector . bl4fa4) (native-endianness . bl4fa3) (bytevector? . bl4fa2) (bytevector=? . bl4fa1) (bytevector-uint-set! . bl4fa0) (bytevector-uint-ref . bl4f9f) (bytevector-u8-set! . bl4f9e) (bytevector-u8-ref . bl4f9d) (bytevector-u64-set! . bl4f9c) (bytevector-u64-ref . bl4f9b) (bytevector-u64-native-set! . bl4f9a) (bytevector-u64-native-ref . bl4f99) (bytevector-u32-set! . bl4f98) (bytevector-u32-ref . bl4f97) (bytevector-u32-native-set! . bl4f96) (bytevector-u32-native-ref . bl4f95) (bytevector-u16-set! . bl4f94) (bytevector-u16-ref . bl4f93) (bytevector-u16-native-set! . bl4f92) (bytevector-u16-native-ref . bl4f91) (bytevector-sint-set! . bl4f90) (bytevector-sint-ref . bl4f8f) (bytevector-s8-set! . bl4f8e) (bytevector-s8-ref . bl4f8d) (bytevector-s64-set! . bl4f8c) (bytevector-s64-ref . bl4f8b) (bytevector-s64-native-set! . bl4f8a) (bytevector-s64-native-ref . bl4f89) (bytevector-s32-set! . bl4f88) (bytevector-s32-ref . bl4f87) (bytevector-s32-native-set! . bl4f86) (bytevector-s32-native-ref . bl4f85) (bytevector-s16-set! . bl4f84) (bytevector-s16-ref . bl4f83) (bytevector-s16-native-set! . bl4f82) (bytevector-s16-native-ref . bl4f81) (bytevector-length . bl4f80) (bytevector-ieee-single-ref . bl4f7f) (bytevector-ieee-single-set! . bl4f7e) (bytevector-ieee-single-native-set! . bl4f7d) (bytevector-ieee-single-native-ref . bl4f7c) (bytevector-ieee-double-set! . bl4f7b) (bytevector-ieee-double-ref . bl4f7a) (bytevector-ieee-double-native-set! . bl4f79) (bytevector-ieee-double-native-ref . bl4f78) (bytevector-fill! . bl4f77) (bytevector-copy! . bl4f76) (bytevector-copy . bl4f75) (bytevector->uint-list . bl4f74) (bytevector->u8-list . bl4f73) (bytevector->sint-list . bl4f72) (endianness . bl4e26)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51b7 '(rnrs unicode) '(6) '() '() '() '((string-upcase . bl50b9) (string-titlecase . bl50b8) (string-normalize-nfkd . bl50b7) (string-normalize-nfkc . bl50b6) (string-normalize-nfd . bl50b5) (string-normalize-nfc . bl50b4) (string-foldcase . bl50b3) (string-downcase . bl50b2) (string-ci>? . bl50b1) (string-ci>=? . bl50b0) (string-ci=? . bl50af) (string-ci<? . bl50ae) (string-ci<=? . bl50ad) (char-whitespace? . bl50ac) (char-upper-case? . bl50ab) (char-title-case? . bl50aa) (char-numeric? . bl50a9) (char-lower-case? . bl50a8) (char-general-category . bl50a7) (char-upcase . bl50a6) (char-titlecase . bl50a5) (char-foldcase . bl50a4) (char-downcase . bl50a3) (char-ci>? . bl50a2) (char-ci>=? . bl50a1) (char-ci=? . bl50a0) (char-ci<? . bl509f) (char-ci<=? . bl509e) (char-alphabetic? . bl509d)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51b8 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . bl4fe0) (raise-continuable . bl4fdf) (raise . bl4fde) (guard . bl4e32) (else . bl4e2a) (=> . bl4e29)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51b9 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . bl4f12) (bitwise-reverse-bit-field . bl4f11) (bitwise-length . bl4f10) (bitwise-if . bl4f0f) (bitwise-first-bit-set . bl4f0e) (bitwise-copy-bit-field . bl4f0d) (bitwise-copy-bit . bl4f0c) (bitwise-bit-set? . bl4f0b) (bitwise-bit-field . bl4f0a) (bitwise-bit-count . bl4f09) (bitwise-xor . bl4f08) (bitwise-ior . bl4f07) (bitwise-and . bl4f06) (bitwise-not . bl4f05) (bitwise-arithmetic-shift-right . bl4f04) (bitwise-arithmetic-shift-left . bl4f03) (bitwise-arithmetic-shift . bl4f02)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51ba '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . bl4f3f) (fxxor . bl4f3e) (fxrotate-bit-field . bl4f3d) (fxreverse-bit-field . bl4f3c) (fxpositive? . bl4f3b) (fxodd? . bl4f3a) (fxnot . bl4f39) (fxnegative? . bl4f38) (fxmod0 . bl4f37) (fxmod . bl4f36) (fxmin . bl4f35) (fxmax . bl4f34) (fxlength . bl4f33) (fxior . bl4f32) (fxif . bl4f31) (fxfirst-bit-set . bl4f30) (fxeven? . bl4f2f) (fxdiv0-and-mod0 . bl4f2e) (fxdiv0 . bl4f2d) (fxdiv-and-mod . bl4f2c) (fxdiv . bl4f2b) (fxcopy-bit-field . bl4f2a) (fxcopy-bit . bl4f29) (fxbit-set? . bl4f28) (fxbit-field . bl4f27) (fxbit-count . bl4f26) (fxarithmetic-shift-right . bl4f25) (fxarithmetic-shift-left . bl4f24) (fxarithmetic-shift . bl4f23) (fxand . bl4f22) (fx>? . bl4f21) (fx>=? . bl4f20) (fx=? . bl4f1f) (fx<? . bl4f1e) (fx<=? . bl4f1d) (fx-/carry . bl4f1c) (fx- . bl4f1b) (fx+/carry . bl4f1a) (fx+ . bl4f19) (fx*/carry . bl4f18) (fx* . bl4f17) (greatest-fixnum . bl4f16) (least-fixnum . bl4f15) (fixnum-width . bl4f14) (fixnum? . bl4f13)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51bb '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . bl4f71) (no-infinities-violation? . bl4f70) (make-no-nans-violation . bl4f6f) (make-no-infinities-violation . bl4f6e) (real->flonum . bl4f6d) (flzero? . bl4f6c) (fltruncate . bl4f6b) (fltan . bl4f6a) (flsqrt . bl4f69) (flsin . bl4f68) (flround . bl4f67) (flpositive? . bl4f66) (flonum? . bl4f65) (flodd? . bl4f64) (flnumerator . bl4f63) (flnegative? . bl4f62) (flnan? . bl4f61) (flmod0 . bl4f60) (flmod . bl4f5f) (flmin . bl4f5e) (flmax . bl4f5d) (fllog . bl4f5c) (flinteger? . bl4f5b) (flinfinite? . bl4f5a) (flfloor . bl4f59) (flfinite? . bl4f58) (flexpt . bl4f57) (flexp . bl4f56) (fleven? . bl4f55) (fldiv0-and-mod0 . bl4f54) (fldiv0 . bl4f53) (fldiv-and-mod . bl4f52) (fldiv . bl4f51) (fldenominator . bl4f50) (flcos . bl4f4f) (flceiling . bl4f4e) (flatan . bl4f4d) (flasin . bl4f4c) (flacos . bl4f4b) (flabs . bl4f4a) (fl>? . bl4f49) (fl>=? . bl4f48) (fl=? . bl4f47) (fl<? . bl4f46) (fl<=? . bl4f45) (fl/ . bl4f44) (fl- . bl4f43) (fl+ . bl4f42) (fl* . bl4f41) (fixnum->flonum . bl4f40) (&no-nans . bl4e5e) (&no-infinities . bl4e5d)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51bc '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . bl5086) (string-ci-hash . bl5085) (string-hash . bl5084) (equal-hash . bl5083) (hashtable-equivalence-function . bl5082) (make-hashtable . bl5081) (hashtable-hash-function . bl5080) (make-eqv-hashtable . bl507f) (make-eq-hashtable . bl507e) (hashtable? . bl507d) (hashtable-update! . bl507c) (hashtable-size . bl507b) (hashtable-set! . bl507a) (hashtable-ref . bl5079) (hashtable-mutable? . bl5078) (hashtable-keys . bl5077) (hashtable-entries . bl5076) (hashtable-delete! . bl5075) (hashtable-copy . bl5074) (hashtable-contains? . bl5073) (hashtable-clear! . bl5072)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51bd '(rnrs io ports) '(6) '() '() '() '((eof-object? . bl5062) (eof-object . bl5061) (current-error-port . bl5060) (current-output-port . bl505f) (current-input-port . bl505e) (output-port? . bl505d) (input-port? . bl505c) (utf-8-codec . bl505b) (utf-16-codec . bl505a) (transcoder-error-handling-mode . bl5059) (transcoder-eol-style . bl5058) (transcoder-codec . bl5057) (transcoded-port . bl5056) (textual-port? . bl5055) (string->bytevector . bl5054) (standard-output-port . bl5053) (standard-input-port . bl5052) (standard-error-port . bl5051) (set-port-position! . bl5050) (put-u8 . bl504f) (put-string . bl504e) (put-datum . bl504d) (put-char . bl504c) (put-bytevector . bl504b) (port? . bl504a) (port-transcoder . bl5049) (port-position . bl5048) (port-has-set-port-position!? . bl5047) (port-has-port-position? . bl5046) (port-eof? . bl5045) (output-port-buffer-mode . bl5044) (open-string-output-port . bl5043) (open-string-input-port . bl5042) (open-file-output-port . bl5041) (open-file-input/output-port . bl5040) (open-file-input-port . bl503f) (open-bytevector-output-port . bl503e) (open-bytevector-input-port . bl503d) (native-transcoder . bl503c) (native-eol-style . bl503b) (make-transcoder . bl503a) (latin-1-codec . bl5039) (make-i/o-write-error . bl5038) (make-i/o-read-error . bl5037) (make-i/o-port-error . bl5036) (make-i/o-invalid-position-error . bl5035) (make-i/o-filename-error . bl5034) (make-i/o-file-protection-error . bl5033) (make-i/o-file-is-read-only-error . bl5032) (make-i/o-file-does-not-exist-error . bl5031) (make-i/o-file-already-exists-error . bl5030) (make-i/o-error . bl502f) (make-i/o-encoding-error . bl502e) (make-i/o-decoding-error . bl502d) (make-custom-textual-output-port . bl502c) (make-custom-textual-input/output-port . bl502b) (make-custom-textual-input-port . bl502a) (make-custom-binary-output-port . bl5029) (make-custom-binary-input/output-port . bl5028) (make-custom-binary-input-port . bl5027) (lookahead-u8 . bl5025) (lookahead-char . bl5024) (i/o-write-error? . bl5023) (i/o-read-error? . bl5022) (i/o-port-error? . bl5021) (i/o-invalid-position-error? . bl5020) (i/o-filename-error? . bl501f) (i/o-file-protection-error? . bl501e) (i/o-file-is-read-only-error? . bl501d) (i/o-file-does-not-exist-error? . bl501c) (i/o-file-already-exists-error? . bl501b) (i/o-error? . bl501a) (i/o-error-position . bl5019) (i/o-error-port . bl5018) (i/o-error-filename . bl5017) (i/o-encoding-error? . bl5016) (i/o-encoding-error-char . bl5015) (i/o-decoding-error? . bl5014) (get-u8 . bl5013) (get-string-n! . bl5012) (get-string-n . bl5011) (get-string-all . bl5010) (get-line . bl500f) (get-datum . bl500e) (get-char . bl500d) (get-bytevector-some . bl500c) (get-bytevector-n! . bl500b) (get-bytevector-n . bl500a) (get-bytevector-all . bl5009) (flush-output-port . bl5008) (close-port . bl5007) (call-with-string-output-port . bl4fe6) (call-with-port . bl4fe5) (call-with-bytevector-output-port . bl4fe4) (bytevector->string . bl4fe3) (buffer-mode? . bl4fe2) (binary-port? . bl4fe1) (&i/o-encoding . bl4e5c) (&i/o-decoding . bl4e5b) (&i/o-port . bl4e5a) (&i/o-file-does-not-exist . bl4e59) (&i/o-file-already-exists . bl4e58) (&i/o-file-is-read-only . bl4e57) (&i/o-file-protection . bl4e56) (&i/o-filename . bl4e55) (&i/o-invalid-position . bl4e54) (&i/o-write . bl4e53) (&i/o-read . bl4e52) (&i/o . bl4e51) (error-handling-mode . bl4e36) (file-options . bl4e35) (buffer-mode . bl4e34) (eol-style . bl4e33)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51be '(rnrs enums) '(6) '() '() '() '((make-enumeration . bl4fdd) (enum-set=? . bl4fdc) (enum-set-universe . bl4fdb) (enum-set-union . bl4fda) (enum-set-subset? . bl4fd9) (enum-set-projection . bl4fd8) (enum-set-member? . bl4fd7) (enum-set-intersection . bl4fd6) (enum-set-indexer . bl4fd5) (enum-set-difference . bl4fd4) (enum-set-constructor . bl4fd3) (enum-set-complement . bl4fd2) (enum-set->list . bl4fd1) (define-enumeration . bl4e41)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51bf '(rnrs conditions) '(6) '() '() '() '((who-condition? . bl4fd0) (warning? . bl4fcf) (violation? . bl4fce) (undefined-violation? . bl4fcd) (syntax-violation? . bl4fcc) (syntax-violation-subform . bl4fcb) (syntax-violation-form . bl4fca) (syntax-violation . bl31d8) (simple-conditions . bl4fc9) (serious-condition? . bl4fc8) (non-continuable-violation? . bl4fc7) (message-condition? . bl4fc6) (make-who-condition . bl4fc5) (make-warning . bl4fc4) (make-violation . bl4fc3) (make-undefined-violation . bl4fc2) (make-syntax-violation . bl4fc1) (make-serious-condition . bl4fc0) (make-non-continuable-violation . bl4fbf) (make-message-condition . bl4fbe) (make-lexical-violation . bl4fbd) (make-irritants-condition . bl4fbc) (make-implementation-restriction-violation . bl4fbb) (make-error . bl4fba) (make-assertion-violation . bl4fb9) (lexical-violation? . bl4fb8) (irritants-condition? . bl4fb7) (implementation-restriction-violation? . bl4fb6) (error? . bl4fb5) (condition-who . bl4fb4) (condition-predicate . bl4fb3) (condition-message . bl4fb2) (condition-irritants . bl4fb1) (condition-accessor . bl4fb0) (condition . bl4faf) (assertion-violation? . bl4fae) (condition? . bl4fad) (&undefined . bl4e50) (&syntax . bl4e4f) (&lexical . bl4e4e) (&implementation-restriction . bl4e4d) (&non-continuable . bl4e4c) (&who . bl4e4b) (&irritants . bl4e4a) (&assertion . bl4e49) (&violation . bl4e48) (&error . bl4e47) (&serious . bl4e46) (&warning . bl4e45) (&message . bl4e44) (&condition . bl4e43) (define-condition-type . bl4e42)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51c0 '(rnrs records inspection) '(6) '() '() '() '((record? . bl5095) (record-type-uid . bl5094) (record-type-sealed? . bl5093) (record-type-parent . bl5092) (record-type-opaque? . bl5091) (record-type-name . bl5090) (record-type-generative? . bl508f) (record-type-field-names . bl508e) (record-rtd . bl508d) (record-field-mutable? . bl508c)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51c1 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . bl509c) (record-predicate . bl509b) (record-mutator . bl509a) (record-constructor . bl5099) (record-accessor . bl5098) (make-record-type-descriptor . bl5097) (make-record-constructor-descriptor . bl5096)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51c2 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . bl4e40) (parent-rtd . bl4e3f) (nongenerative . bl4e3e) (opaque . bl4e3d) (sealed . bl4e3c) (protocol . bl4e3b) (parent . bl4e3a) (immutable . bl4e39) (mutable . bl4e38) (fields . bl4e37) (record-constructor-descriptor . bl4e17) (record-type-descriptor . bl4e16)) '() values values '#f '#f '#t '#f) (bl2d0c@bl2b58@install-library 'bl51c3 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . bl51a3) (&no-nans-rtd . bl51a2) (&no-infinities-rcd . bl51a1) (&no-infinities-rtd . bl51a0) (&i/o-encoding-rcd . bl519f) (&i/o-encoding-rtd . bl519e) (&i/o-decoding-rcd . bl519d) (&i/o-decoding-rtd . bl519c) (&i/o-port-rcd . bl519b) (&i/o-port-rtd . bl519a) (&i/o-file-does-not-exist-rcd . bl5199) (&i/o-file-does-not-exist-rtd . bl5198) (&i/o-file-already-exists-rcd . bl5197) (&i/o-file-already-exists-rtd . bl5196) (&i/o-file-is-read-only-rcd . bl5195) (&i/o-file-is-read-only-rtd . bl5194) (&i/o-file-protection-rcd . bl5193) (&i/o-file-protection-rtd . bl5192) (&i/o-filename-rcd . bl5191) (&i/o-filename-rtd . bl5190) (&i/o-invalid-position-rcd . bl518f) (&i/o-invalid-position-rtd . bl518e) (&i/o-write-rcd . bl518d) (&i/o-write-rtd . bl518c) (&i/o-read-rcd . bl518b) (&i/o-read-rtd . bl518a) (&i/o-rcd . bl5189) (&i/o-rtd . bl5188) (&undefined-rcd . bl5187) (&undefined-rtd . bl5186) (&syntax-rcd . bl5185) (&syntax-rtd . bl5184) (&lexical-rcd . bl5183) (&lexical-rtd . bl5182) (&implementation-restriction-rcd . bl5181) (&implementation-restriction-rtd . bl5180) (&non-continuable-rcd . bl517f) (&non-continuable-rtd . bl517e) (&who-rcd . bl517d) (&who-rtd . bl517c) (&irritants-rcd . bl517b) (&irritants-rtd . bl517a) (&assertion-rcd . bl5179) (&assertion-rtd . bl5178) (&violation-rcd . bl5177) (&violation-rtd . bl5176) (&error-rcd . bl5175) (&error-rtd . bl5174) (&serious-rcd . bl5173) (&serious-rtd . bl5172) (&warning-rcd . bl5171) (&warning-rtd . bl5170) (&message-rcd . bl516f) (&message-rtd . bl516e) (&condition-rcd . bl516d) (&condition-rtd . bl516c) (syntax-error . bl31d4) (syntax-dispatch . bl30f8) (pretty-print . bl516b) (eval-core . bl516a) (set-symbol-value! . bl5169) (symbol-value . bl5168) (gensym . bl5167) (void . bl5166) (load . bl4c97) (interaction-environment . bl31e6) (char-ready? . bl5165) (regexp? . bl5164) (read-line . bl5163) (gensym-prefix-set! . bl5162) (ungensym . bl5161) (alist->eq-hash-table . bl5160) (assoc-ref . bl515f) (print . bl515e) (format . bl515d) (host-os . bl515c) (library-path . bl2b37) (standard-library-path . bl515b) (ssl-supported? . bl515a) (ssl-socket? . bl5159) (socket-sslize! . bl5158) (%monapi-name-whereis . bl5157) (%monapi-message-send . bl5156) (file-newer? . bl5155) (stat-mtime . bl5154) (write-to-file . bl5153) (file->list . bl5152) (file->string . bl5151) (digit->integer . bl5150) (call-with-string-input-port . bl514f) (call-with-string-io . bl514e) (string-split . bl514d) (bytevector-for-each . bl514c) (string->regexp . bl514b) (rxmatch . bl514a) (regexp-replace-all . bl5149) (hashtable-fold-left . bl5148) (hashtable-for-each . bl5147) (mosh-cache-dir . bl2921) (call-process . bl5146) (local-tz-offset . bl5145) (microseconds . bl5144) (directory-list . bl5143) (set-current-directory! . bl5142) (expand-path . bl5141) (current-directory . bl5140) (%spawn . bl513f) (%waitpid . bl513e) (simple-struct-name . bl513d) (simple-struct-set! . bl513c) (simple-struct-ref . bl513b) (make-simple-struct . bl513a) (simple-struct? . bl5139) (pointer-ref-c-int64 . bl5138) (pointer-ref-c-int32 . bl5137) (pointer-ref-c-int16 . bl5136) (pointer-ref-c-int8 . bl5135) (pointer-ref-c-uint64 . bl5134) (pointer-ref-c-uint32 . bl5133) (pointer-ref-c-uint16 . bl5132) (pointer-ref-c-uint8 . bl5131) (pointer-set-c-uint64! . bl5130) (pointer-set-c-uint32! . bl512f) (pointer-set-c-uint16! . bl512e) (pointer-set-c-uint8! . bl512d) (pointer-set-c-int64! . bl512c) (pointer-set-c-int32! . bl512b) (pointer-set-c-int16! . bl512a) (pointer-set-c-int8! . bl5129) (pointer-set-c-pointer! . bl5128) (pointer-set-c-double! . bl5127) (pointer-set-c-float! . bl5126) (pointer-set-c-long-long! . bl5125) (pointer-set-c-long! . bl5124) (pointer-set-c-int! . bl5123) (pointer-set-c-short! . bl5122) (pointer-set-c-char! . bl5121) (pointer-ref-c-pointer . bl5120) (pointer-ref-c-double . bl511f) (pointer-ref-c-float . bl511e) (pointer-ref-c-unsigned-long-long . bl511d) (pointer-ref-c-signed-long-long . bl511c) (pointer-ref-c-unsigned-long . bl511b) (pointer-ref-c-signed-long . bl511a) (pointer-ref-c-unsigned-int . bl5119) (pointer-ref-c-signed-int . bl5118) (pointer-ref-c-unsigned-short . bl5117) (pointer-ref-c-signed-short . bl5116) (pointer-ref-c-unsigned-char . bl5115) (pointer-ref-c-signed-char . bl5114) (pointer->integer . bl5113) (integer->pointer . bl5112) (pointer? . bl5111) (shared-errno . bl5110) (%ffi-free-c-callback-trampoline . bl510f) (%ffi-make-c-callback-trampoline . bl510e) (%ffi-free . bl510d) (%ffi-malloc . bl510c) (%ffi-supported? . bl510b) (%ffi-pointer->string . bl510a) (%ffi-call . bl5109) (%ffi-lookup . bl5108) (%ffi-open . bl5107) (null-terminated-utf8->string . bl5106) (null-terminated-bytevector->string . bl5105) (%exec . bl5104) (%fork . bl5103) (%pipe . bl5102) (p . bl5101) (open-output-string . bl5100) (get-output-string . bl50ff) (file-stat-ctime . bl50fe) (file-stat-atime . bl50fd) (file-stat-mtime . bl50fc) (file-size-in-bytes . bl50fb) (file-writable? . bl50fa) (file-executable? . bl50f9) (file-readable? . bl50f8) (file-regular? . bl50f7) (file-symbolic-link? . bl50f6) (file-directory? . bl50f5) (create-symbolic-link . bl50f4) (rename-file . bl50f3) (delete-directory . bl50f2) (create-directory . bl50f1) (create-mosh-cache-dir . bl50f0) (get-environment-variables . bl50ef) (current-exception-handler . bl50ee) (get-environment-variable . bl50ed) (join-wraps . bl50ec) (id->real-label . bl50eb) (same-marks? . bl50ea) (same-marks*? . bl50e9) (get-timeofday . bl50e8) (get-command-line . bl50e7) (sys-display . bl50e6) (whereis . bl50e5) (register . bl50e4) (vm-join! . bl50e3) (vm-set-value! . bl50e2) (vm? . bl50e1) (main-vm? . bl50e0) (vm-eval . bl50df) (vm-self . bl50de) (vm-start! . bl50dd) (make-vm . bl50dc) (mutex-try-lock! . bl50db) (mutex-unlock! . bl50da) (mutex-lock! . bl50d9) (mutex? . bl50d8) (make-mutex . bl50d7) (condition-variable-notify-all! . bl50d6) (condition-variable-notify! . bl50d5) (condition-variable-wait! . bl50d4) (make-condition-variable . bl50d3) (write/ss . bl50d2) (mosh-executable-path . bl50d1) (make-file-options . bl50d0) (source-info . bl50cf) (make-compiler-instruction . bl50ce) (make-instruction . bl50cd) (set-source-info! . bl50cc) (bignum? . bl50cb) (fast-equal? . bl50ca) (fasl-read . bl50c9) (fasl-write . bl50c8) (time-usage . bl50c7) (os-constant . bl50c6) (condition-printer . bl50c5) (disasm . bl50c4) (make-parameter . bl291f) (socket-port . bl50c3) (socket-shutdown . bl50c2) (socket-close . bl50c1) (socket-send . bl50c0) (socket-recv! . bl50bf) (socket-recv . bl50be) (make-server-socket . bl50bd) (make-client-socket . bl50bc) (socket-accept . bl50bb) (socket? . bl50ba) (string-upcase . bl50b9) (string-titlecase . bl50b8) (string-normalize-nfkd . bl50b7) (string-normalize-nfkc . bl50b6) (string-normalize-nfd . bl50b5) (string-normalize-nfc . bl50b4) (string-foldcase . bl50b3) (string-downcase . bl50b2) (string-ci>? . bl50b1) (string-ci>=? . bl50b0) (string-ci=? . bl50af) (string-ci<? . bl50ae) (string-ci<=? . bl50ad) (char-whitespace? . bl50ac) (char-upper-case? . bl50ab) (char-title-case? . bl50aa) (char-numeric? . bl50a9) (char-lower-case? . bl50a8) (char-general-category . bl50a7) (char-upcase . bl50a6) (char-titlecase . bl50a5) (char-foldcase . bl50a4) (char-downcase . bl50a3) (char-ci>? . bl50a2) (char-ci>=? . bl50a1) (char-ci=? . bl50a0) (char-ci<? . bl509f) (char-ci<=? . bl509e) (char-alphabetic? . bl509d) (make-variable-transformer . bl2f23) (identifier? . bl31da) (generate-temporaries . bl31c6) (free-identifier=? . bl31c8) (syntax->datum . bl31de) (datum->syntax . bl31dc) (bound-identifier=? . bl31ca) (record-type-descriptor? . bl509c) (record-predicate . bl509b) (record-mutator . bl509a) (record-constructor . bl5099) (record-accessor . bl5098) (make-record-type-descriptor . bl5097) (make-record-constructor-descriptor . bl5096) (record? . bl5095) (record-type-uid . bl5094) (record-type-sealed? . bl5093) (record-type-parent . bl5092) (record-type-opaque? . bl5091) (record-type-name . bl5090) (record-type-generative? . bl508f) (record-type-field-names . bl508e) (record-rtd . bl508d) (record-field-mutable? . bl508c) (delete-file . bl508b) (file-exists? . bl508a) (vector-sort! . bl5089) (vector-sort . bl5088) (list-sort . bl5087) (symbol-hash . bl5086) (string-ci-hash . bl5085) (string-hash . bl5084) (equal-hash . bl5083) (hashtable-equivalence-function . bl5082) (make-hashtable . bl5081) (hashtable-hash-function . bl5080) (make-eqv-hashtable . bl507f) (make-eq-hashtable . bl507e) (hashtable? . bl507d) (hashtable-update! . bl507c) (hashtable-size . bl507b) (hashtable-set! . bl507a) (hashtable-ref . bl5079) (hashtable-mutable? . bl5078) (hashtable-keys . bl5077) (hashtable-entries . bl5076) (hashtable-delete! . bl5075) (hashtable-copy . bl5074) (hashtable-contains? . bl5073) (hashtable-clear! . bl5072) (call-with-output-file . bl5071) (call-with-input-file . bl5070) (write-char . bl506f) (write . bl506e) (with-output-to-file . bl506d) (with-input-from-file . bl506c) (read-char . bl506b) (read . bl506a) (peek-char . bl5069) (open-output-file . bl5068) (open-input-file . bl5067) (newline . bl5066) (display . bl5065) (close-output-port . bl5064) (close-input-port . bl5063) (eof-object? . bl5062) (eof-object . bl5061) (current-error-port . bl5060) (current-output-port . bl505f) (current-input-port . bl505e) (output-port? . bl505d) (input-port? . bl505c) (utf-8-codec . bl505b) (utf-16-codec . bl505a) (transcoder-error-handling-mode . bl5059) (transcoder-eol-style . bl5058) (transcoder-codec . bl5057) (transcoded-port . bl5056) (textual-port? . bl5055) (string->bytevector . bl5054) (standard-output-port . bl5053) (standard-input-port . bl5052) (standard-error-port . bl5051) (set-port-position! . bl5050) (put-u8 . bl504f) (put-string . bl504e) (put-datum . bl504d) (put-char . bl504c) (put-bytevector . bl504b) (port? . bl504a) (port-transcoder . bl5049) (port-position . bl5048) (port-has-set-port-position!? . bl5047) (port-has-port-position? . bl5046) (port-eof? . bl5045) (output-port-buffer-mode . bl5044) (open-string-output-port . bl5043) (open-string-input-port . bl5042) (open-file-output-port . bl5041) (open-file-input/output-port . bl5040) (open-file-input-port . bl503f) (open-bytevector-output-port . bl503e) (open-bytevector-input-port . bl503d) (native-transcoder . bl503c) (native-eol-style . bl503b) (make-transcoder . bl503a) (latin-1-codec . bl5039) (make-i/o-write-error . bl5038) (make-i/o-read-error . bl5037) (make-i/o-port-error . bl5036) (make-i/o-invalid-position-error . bl5035) (make-i/o-filename-error . bl5034) (make-i/o-file-protection-error . bl5033) (make-i/o-file-is-read-only-error . bl5032) (make-i/o-file-does-not-exist-error . bl5031) (make-i/o-file-already-exists-error . bl5030) (make-i/o-error . bl502f) (make-i/o-encoding-error . bl502e) (make-i/o-decoding-error . bl502d) (make-custom-textual-output-port . bl502c) (make-custom-textual-input/output-port . bl502b) (make-custom-textual-input-port . bl502a) (make-custom-binary-output-port . bl5029) (make-custom-binary-input/output-port . bl5028) (make-custom-binary-input-port . bl5027) (make-bytevector . bl5026) (lookahead-u8 . bl5025) (lookahead-char . bl5024) (i/o-write-error? . bl5023) (i/o-read-error? . bl5022) (i/o-port-error? . bl5021) (i/o-invalid-position-error? . bl5020) (i/o-filename-error? . bl501f) (i/o-file-protection-error? . bl501e) (i/o-file-is-read-only-error? . bl501d) (i/o-file-does-not-exist-error? . bl501c) (i/o-file-already-exists-error? . bl501b) (i/o-error? . bl501a) (i/o-error-position . bl5019) (i/o-error-port . bl5018) (i/o-error-filename . bl5017) (i/o-encoding-error? . bl5016) (i/o-encoding-error-char . bl5015) (i/o-decoding-error? . bl5014) (get-u8 . bl5013) (get-string-n! . bl5012) (get-string-n . bl5011) (get-string-all . bl5010) (get-line . bl500f) (get-datum . bl500e) (get-char . bl500d) (get-bytevector-some . bl500c) (get-bytevector-n! . bl500b) (get-bytevector-n . bl500a) (get-bytevector-all . bl5009) (flush-output-port . bl5008) (close-port . bl5007) (scheme-report-environment . bl31b4) (quotient . bl5006) (null-environment . bl31b2) (remainder . bl5005) (modulo . bl5004) (inexact->exact . bl5003) (force . bl5002) (exact->inexact . bl5001) (make-promise . bl5000) (exit . bl4fff) (command-line . bl4c91) (string-fill! . bl4ffe) (string-set! . bl4ffd) (set-cdr! . bl4ffc) (set-car! . bl4ffb) (remove . bl4ffa) (remv . bl4ff9) (remp . bl4ff8) (remq . bl4ff7) (partition . bl4ff6) (memv . bl4ff5) (memq . bl4ff4) (memp . bl4ff3) (member . bl4ff2) (exists . bl4ff1) (for-all . bl4ff0) (fold-right . bl4fef) (fold-left . bl4fee) (find . bl4fed) (filter . bl4fec) (cons* . bl4feb) (assv . bl4fea) (assq . bl4fe9) (assp . bl4fe8) (assoc . bl4fe7) (call-with-string-output-port . bl4fe6) (call-with-port . bl4fe5) (call-with-bytevector-output-port . bl4fe4) (bytevector->string . bl4fe3) (buffer-mode? . bl4fe2) (binary-port? . bl4fe1) (with-exception-handler . bl4fe0) (raise-continuable . bl4fdf) (raise . bl4fde) (eval . bl31b8) (environment . bl31b0) (make-enumeration . bl4fdd) (enum-set=? . bl4fdc) (enum-set-universe . bl4fdb) (enum-set-union . bl4fda) (enum-set-subset? . bl4fd9) (enum-set-projection . bl4fd8) (enum-set-member? . bl4fd7) (enum-set-intersection . bl4fd6) (enum-set-indexer . bl4fd5) (enum-set-difference . bl4fd4) (enum-set-constructor . bl4fd3) (enum-set-complement . bl4fd2) (enum-set->list . bl4fd1) (who-condition? . bl4fd0) (warning? . bl4fcf) (violation? . bl4fce) (undefined-violation? . bl4fcd) (syntax-violation? . bl4fcc) (syntax-violation-subform . bl4fcb) (syntax-violation-form . bl4fca) (syntax-violation . bl31d8) (simple-conditions . bl4fc9) (serious-condition? . bl4fc8) (non-continuable-violation? . bl4fc7) (message-condition? . bl4fc6) (make-who-condition . bl4fc5) (make-warning . bl4fc4) (make-violation . bl4fc3) (make-undefined-violation . bl4fc2) (make-syntax-violation . bl4fc1) (make-serious-condition . bl4fc0) (make-non-continuable-violation . bl4fbf) (make-message-condition . bl4fbe) (make-lexical-violation . bl4fbd) (make-irritants-condition . bl4fbc) (make-implementation-restriction-violation . bl4fbb) (make-error . bl4fba) (make-assertion-violation . bl4fb9) (lexical-violation? . bl4fb8) (irritants-condition? . bl4fb7) (implementation-restriction-violation? . bl4fb6) (error? . bl4fb5) (condition-who . bl4fb4) (condition-predicate . bl4fb3) (condition-message . bl4fb2) (condition-irritants . bl4fb1) (condition-accessor . bl4fb0) (condition . bl4faf) (assertion-violation? . bl4fae) (condition? . bl4fad) (utf32->string . bl4fac) (utf16->string . bl4fab) (utf8->string . bl4faa) (uint-list->bytevector . bl4fa9) (u8-list->bytevector . bl4fa8) (string->utf8 . bl4fa7) (string->utf32 . bl4fa6) (string->utf16 . bl4fa5) (sint-list->bytevector . bl4fa4) (native-endianness . bl4fa3) (bytevector? . bl4fa2) (bytevector=? . bl4fa1) (bytevector-uint-set! . bl4fa0) (bytevector-uint-ref . bl4f9f) (bytevector-u8-set! . bl4f9e) (bytevector-u8-ref . bl4f9d) (bytevector-u64-set! . bl4f9c) (bytevector-u64-ref . bl4f9b) (bytevector-u64-native-set! . bl4f9a) (bytevector-u64-native-ref . bl4f99) (bytevector-u32-set! . bl4f98) (bytevector-u32-ref . bl4f97) (bytevector-u32-native-set! . bl4f96) (bytevector-u32-native-ref . bl4f95) (bytevector-u16-set! . bl4f94) (bytevector-u16-ref . bl4f93) (bytevector-u16-native-set! . bl4f92) (bytevector-u16-native-ref . bl4f91) (bytevector-sint-set! . bl4f90) (bytevector-sint-ref . bl4f8f) (bytevector-s8-set! . bl4f8e) (bytevector-s8-ref . bl4f8d) (bytevector-s64-set! . bl4f8c) (bytevector-s64-ref . bl4f8b) (bytevector-s64-native-set! . bl4f8a) (bytevector-s64-native-ref . bl4f89) (bytevector-s32-set! . bl4f88) (bytevector-s32-ref . bl4f87) (bytevector-s32-native-set! . bl4f86) (bytevector-s32-native-ref . bl4f85) (bytevector-s16-set! . bl4f84) (bytevector-s16-ref . bl4f83) (bytevector-s16-native-set! . bl4f82) (bytevector-s16-native-ref . bl4f81) (bytevector-length . bl4f80) (bytevector-ieee-single-ref . bl4f7f) (bytevector-ieee-single-set! . bl4f7e) (bytevector-ieee-single-native-set! . bl4f7d) (bytevector-ieee-single-native-ref . bl4f7c) (bytevector-ieee-double-set! . bl4f7b) (bytevector-ieee-double-ref . bl4f7a) (bytevector-ieee-double-native-set! . bl4f79) (bytevector-ieee-double-native-ref . bl4f78) (bytevector-fill! . bl4f77) (bytevector-copy! . bl4f76) (bytevector-copy . bl4f75) (bytevector->uint-list . bl4f74) (bytevector->u8-list . bl4f73) (bytevector->sint-list . bl4f72) (no-nans-violation? . bl4f71) (no-infinities-violation? . bl4f70) (make-no-nans-violation . bl4f6f) (make-no-infinities-violation . bl4f6e) (real->flonum . bl4f6d) (flzero? . bl4f6c) (fltruncate . bl4f6b) (fltan . bl4f6a) (flsqrt . bl4f69) (flsin . bl4f68) (flround . bl4f67) (flpositive? . bl4f66) (flonum? . bl4f65) (flodd? . bl4f64) (flnumerator . bl4f63) (flnegative? . bl4f62) (flnan? . bl4f61) (flmod0 . bl4f60) (flmod . bl4f5f) (flmin . bl4f5e) (flmax . bl4f5d) (fllog . bl4f5c) (flinteger? . bl4f5b) (flinfinite? . bl4f5a) (flfloor . bl4f59) (flfinite? . bl4f58) (flexpt . bl4f57) (flexp . bl4f56) (fleven? . bl4f55) (fldiv0-and-mod0 . bl4f54) (fldiv0 . bl4f53) (fldiv-and-mod . bl4f52) (fldiv . bl4f51) (fldenominator . bl4f50) (flcos . bl4f4f) (flceiling . bl4f4e) (flatan . bl4f4d) (flasin . bl4f4c) (flacos . bl4f4b) (flabs . bl4f4a) (fl>? . bl4f49) (fl>=? . bl4f48) (fl=? . bl4f47) (fl<? . bl4f46) (fl<=? . bl4f45) (fl/ . bl4f44) (fl- . bl4f43) (fl+ . bl4f42) (fl* . bl4f41) (fixnum->flonum . bl4f40) (fxzero? . bl4f3f) (fxxor . bl4f3e) (fxrotate-bit-field . bl4f3d) (fxreverse-bit-field . bl4f3c) (fxpositive? . bl4f3b) (fxodd? . bl4f3a) (fxnot . bl4f39) (fxnegative? . bl4f38) (fxmod0 . bl4f37) (fxmod . bl4f36) (fxmin . bl4f35) (fxmax . bl4f34) (fxlength . bl4f33) (fxior . bl4f32) (fxif . bl4f31) (fxfirst-bit-set . bl4f30) (fxeven? . bl4f2f) (fxdiv0-and-mod0 . bl4f2e) (fxdiv0 . bl4f2d) (fxdiv-and-mod . bl4f2c) (fxdiv . bl4f2b) (fxcopy-bit-field . bl4f2a) (fxcopy-bit . bl4f29) (fxbit-set? . bl4f28) (fxbit-field . bl4f27) (fxbit-count . bl4f26) (fxarithmetic-shift-right . bl4f25) (fxarithmetic-shift-left . bl4f24) (fxarithmetic-shift . bl4f23) (fxand . bl4f22) (fx>? . bl4f21) (fx>=? . bl4f20) (fx=? . bl4f1f) (fx<? . bl4f1e) (fx<=? . bl4f1d) (fx-/carry . bl4f1c) (fx- . bl4f1b) (fx+/carry . bl4f1a) (fx+ . bl4f19) (fx*/carry . bl4f18) (fx* . bl4f17) (greatest-fixnum . bl4f16) (least-fixnum . bl4f15) (fixnum-width . bl4f14) (fixnum? . bl4f13) (bitwise-rotate-bit-field . bl4f12) (bitwise-reverse-bit-field . bl4f11) (bitwise-length . bl4f10) (bitwise-if . bl4f0f) (bitwise-first-bit-set . bl4f0e) (bitwise-copy-bit-field . bl4f0d) (bitwise-copy-bit . bl4f0c) (bitwise-bit-set? . bl4f0b) (bitwise-bit-field . bl4f0a) (bitwise-bit-count . bl4f09) (bitwise-xor . bl4f08) (bitwise-ior . bl4f07) (bitwise-and . bl4f06) (bitwise-not . bl4f05) (bitwise-arithmetic-shift-right . bl4f04) (bitwise-arithmetic-shift-left . bl4f03) (bitwise-arithmetic-shift . bl4f02) (zero? . bl4f01) (vector? . bl4f00) (vector-set! . bl4eff) (vector-ref . bl4efe) (vector-map . bl4efd) (vector-length . bl4efc) (vector-for-each . bl4efb) (vector-fill! . bl4efa) (vector->list . bl4ef9) (vector . bl4ef8) (values . bl4ef7) (truncate . bl4ef6) (tan . bl4ef5) (symbol? . bl4ef4) (symbol=? . bl4ef3) (symbol->string . bl4ef2) (substring . bl4ef1) (string? . bl4ef0) (string>? . bl4eef) (string>=? . bl4eee) (string=? . bl4eed) (string<? . bl4eec) (string<=? . bl4eeb) (string-ref . bl4eea) (string-length . bl4ee9) (string-for-each . bl4ee8) (string-copy . bl4ee7) (string-append . bl4ee6) (string->symbol . bl4ee5) (string->number . bl4ee4) (string->list . bl4ee3) (string . bl4ee2) (sqrt . bl4ee1) (sin . bl4ee0) (round . bl4edf) (reverse . bl4ede) (real? . bl4edd) (real-valued? . bl4edc) (real-part . bl4edb) (rationalize . bl4eda) (rational? . bl4ed9) (rational-valued? . bl4ed8) (procedure? . bl4ed7) (positive? . bl4ed6) (pair? . bl4ed5) (odd? . bl4ed4) (numerator . bl4ed3) (number? . bl4ed2) (number->string . bl4ed1) (null? . bl4ed0) (not . bl4ecf) (negative? . bl4ece) (nan? . bl4ecd) (min . bl4ecc) (max . bl4ecb) (map . bl4eca) (make-vector . bl4ec9) (make-string . bl4ec8) (make-rectangular . bl4ec7) (make-polar . bl4ec6) (magnitude . bl4ec5) (log . bl4ec4) (list? . bl4ec3) (list-tail . bl4ec2) (list-ref . bl4ec1) (list->vector . bl4ec0) (list->string . bl4ebf) (list . bl4ebe) (length . bl4ebd) (lcm . bl4ebc) (integer? . bl4ebb) (integer-valued? . bl4eba) (integer->char . bl4eb9) (infinite? . bl4eb8) (inexact? . bl4eb7) (inexact . bl4eb6) (imag-part . bl4eb5) (gcd . bl4eb4) (for-each . bl4eb3) (floor . bl4eb2) (finite? . bl4eb1) (expt . bl4eb0) (exp . bl4eaf) (exact? . bl4eae) (exact-integer-sqrt . bl4ead) (exact . bl4eac) (even? . bl4eab) (error . bl4eaa) (eqv? . bl4ea9) (equal? . bl4ea8) (eq? . bl4ea7) (dynamic-wind . bl4ea6) (div0-and-mod0 . bl4ea5) (mod0 . bl4ea4) (div0 . bl4ea3) (div-and-mod . bl4ea2) (mod . bl4ea1) (div . bl4ea0) (denominator . bl4e9f) (cos . bl4e9e) (cons . bl4e9d) (complex? . bl4e9c) (char? . bl4e9b) (char>? . bl4e9a) (char>=? . bl4e99) (char=? . bl4e98) (char<? . bl4e97) (char<=? . bl4e96) (char->integer . bl4e95) (ceiling . bl4e94) (call-with-values . bl4e93) (call/cc . bl4e92) (call-with-current-continuation . bl4e91) (cddddr . bl4e90) (cdddar . bl4e8f) (cddadr . bl4e8e) (cddaar . bl4e8d) (cdaddr . bl4e8c) (cdadar . bl4e8b) (cdaadr . bl4e8a) (cdaaar . bl4e89) (cadddr . bl4e88) (caddar . bl4e87) (cadadr . bl4e86) (cadaar . bl4e85) (caaddr . bl4e84) (caadar . bl4e83) (caaadr . bl4e82) (caaaar . bl4e81) (cdddr . bl4e80) (cddar . bl4e7f) (cdadr . bl4e7e) (cdaar . bl4e7d) (caddr . bl4e7c) (cadar . bl4e7b) (caadr . bl4e7a) (caaar . bl4e79) (cddr . bl4e78) (cdar . bl4e77) (cadr . bl4e76) (caar . bl4e75) (cdr . bl4e74) (car . bl4e73) (boolean? . bl4e72) (boolean=? . bl4e71) (atan . bl4e70) (assertion-violation . bl4e6f) (assertion-error . bl31d2) (asin . bl4e6e) (apply . bl4e6d) (append . bl4e6c) (angle . bl4e6b) (acos . bl4e6a) (abs . bl4e69) (/ . bl4e68) (* . bl4e67) (- . bl4e66) (+ . bl4e65) (>= . bl4e64) (> . bl4e63) (= . bl4e62) (<= . bl4e61) (< . bl4e60) (library . bl4e5f) (&no-nans . bl4e5e) (&no-infinities . bl4e5d) (&i/o-encoding . bl4e5c) (&i/o-decoding . bl4e5b) (&i/o-port . bl4e5a) (&i/o-file-does-not-exist . bl4e59) (&i/o-file-already-exists . bl4e58) (&i/o-file-is-read-only . bl4e57) (&i/o-file-protection . bl4e56) (&i/o-filename . bl4e55) (&i/o-invalid-position . bl4e54) (&i/o-write . bl4e53) (&i/o-read . bl4e52) (&i/o . bl4e51) (&undefined . bl4e50) (&syntax . bl4e4f) (&lexical . bl4e4e) (&implementation-restriction . bl4e4d) (&non-continuable . bl4e4c) (&who . bl4e4b) (&irritants . bl4e4a) (&assertion . bl4e49) (&violation . bl4e48) (&error . bl4e47) (&serious . bl4e46) (&warning . bl4e45) (&message . bl4e44) (&condition . bl4e43) (define-condition-type . bl4e42) (define-enumeration . bl4e41) (define-record-type . bl4e40) (parent-rtd . bl4e3f) (nongenerative . bl4e3e) (opaque . bl4e3d) (sealed . bl4e3c) (protocol . bl4e3b) (parent . bl4e3a) (immutable . bl4e39) (mutable . bl4e38) (fields . bl4e37) (error-handling-mode . bl4e36) (file-options . bl4e35) (buffer-mode . bl4e34) (eol-style . bl4e33) (guard . bl4e32) (trace-define . bl4e31) (trace-lambda . bl4e30) (unsyntax-splicing . bl4e2f) (unsyntax . bl4e2e) (unquote-splicing . bl4e2d) (unquote . bl4e2c) (_ . bl4e2b) (else . bl4e2a) (=> . bl4e29) (... . bl4e28) (assert . bl4e27) (endianness . bl4e26) (delay . bl4e25) (time . bl4e24) (do . bl4e23) (cond . bl4e22) (let* . bl4e21) (let*-values . bl4e20) (let-values . bl4e1f) (identifier-syntax . bl4e1e) (with-syntax . bl4e1d) (quasisyntax . bl4e1c) (quasiquote . bl4e1b) (syntax-rules . bl4e1a) (include . bl4e19) (define-struct . bl4e18) (record-constructor-descriptor . bl4e17) (record-type-descriptor . bl4e16) (case . bl4e15) (parameterize . bl4e14) (unless . bl4e13) (when . bl4e12) (or . bl4e11) (and . bl4e10) (if . bl4e0f) (let . bl4e0e) (letrec* . bl4e0d) (letrec . bl4e0c) (type-descriptor . bl4e0b) (case-lambda . bl4e0a) (lambda . bl4e09) (syntax . bl4e08) (syntax-case . bl4e07) (quote . bl4e06) (foreign-call . bl4e05) (letrec-syntax . bl4e04) (let-syntax . bl4e03) (set! . bl4e02) (import . bl4e01) (begin . bl4e00) (module . bl4dff) (define-syntax . bl4dfe) (define . bl4dfd)) '((bl51a3 core-prim . &no-nans-rcd) (bl51a2 core-prim . &no-nans-rtd) (bl51a1 core-prim . &no-infinities-rcd) (bl51a0 core-prim . &no-infinities-rtd) (bl519f core-prim . &i/o-encoding-rcd) (bl519e core-prim . &i/o-encoding-rtd) (bl519d core-prim . &i/o-decoding-rcd) (bl519c core-prim . &i/o-decoding-rtd) (bl519b core-prim . &i/o-port-rcd) (bl519a core-prim . &i/o-port-rtd) (bl5199 core-prim . &i/o-file-does-not-exist-rcd) (bl5198 core-prim . &i/o-file-does-not-exist-rtd) (bl5197 core-prim . &i/o-file-already-exists-rcd) (bl5196 core-prim . &i/o-file-already-exists-rtd) (bl5195 core-prim . &i/o-file-is-read-only-rcd) (bl5194 core-prim . &i/o-file-is-read-only-rtd) (bl5193 core-prim . &i/o-file-protection-rcd) (bl5192 core-prim . &i/o-file-protection-rtd) (bl5191 core-prim . &i/o-filename-rcd) (bl5190 core-prim . &i/o-filename-rtd) (bl518f core-prim . &i/o-invalid-position-rcd) (bl518e core-prim . &i/o-invalid-position-rtd) (bl518d core-prim . &i/o-write-rcd) (bl518c core-prim . &i/o-write-rtd) (bl518b core-prim . &i/o-read-rcd) (bl518a core-prim . &i/o-read-rtd) (bl5189 core-prim . &i/o-rcd) (bl5188 core-prim . &i/o-rtd) (bl5187 core-prim . &undefined-rcd) (bl5186 core-prim . &undefined-rtd) (bl5185 core-prim . &syntax-rcd) (bl5184 core-prim . &syntax-rtd) (bl5183 core-prim . &lexical-rcd) (bl5182 core-prim . &lexical-rtd) (bl5181 core-prim . &implementation-restriction-rcd) (bl5180 core-prim . &implementation-restriction-rtd) (bl517f core-prim . &non-continuable-rcd) (bl517e core-prim . &non-continuable-rtd) (bl517d core-prim . &who-rcd) (bl517c core-prim . &who-rtd) (bl517b core-prim . &irritants-rcd) (bl517a core-prim . &irritants-rtd) (bl5179 core-prim . &assertion-rcd) (bl5178 core-prim . &assertion-rtd) (bl5177 core-prim . &violation-rcd) (bl5176 core-prim . &violation-rtd) (bl5175 core-prim . &error-rcd) (bl5174 core-prim . &error-rtd) (bl5173 core-prim . &serious-rcd) (bl5172 core-prim . &serious-rtd) (bl5171 core-prim . &warning-rcd) (bl5170 core-prim . &warning-rtd) (bl516f core-prim . &message-rcd) (bl516e core-prim . &message-rtd) (bl516d core-prim . &condition-rcd) (bl516c core-prim . &condition-rtd) (bl31d4 core-prim . syntax-error) (bl30f8 core-prim . syntax-dispatch) (bl516b core-prim . pretty-print) (bl516a core-prim . eval-core) (bl5169 core-prim . set-symbol-value!) (bl5168 core-prim . symbol-value) (bl5167 core-prim . gensym) (bl5166 core-prim . void) (bl4c97 core-prim . load) (bl31e6 core-prim . interaction-environment) (bl5165 core-prim . char-ready?) (bl5164 core-prim . regexp?) (bl5163 core-prim . read-line) (bl5162 core-prim . gensym-prefix-set!) (bl5161 core-prim . ungensym) (bl5160 core-prim . alist->eq-hash-table) (bl515f core-prim . assoc-ref) (bl515e core-prim . print) (bl515d core-prim . format) (bl515c core-prim . host-os) (bl2b37 core-prim . library-path) (bl515b core-prim . standard-library-path) (bl515a core-prim . ssl-supported?) (bl5159 core-prim . ssl-socket?) (bl5158 core-prim . socket-sslize!) (bl5157 core-prim . %monapi-name-whereis) (bl5156 core-prim . %monapi-message-send) (bl5155 core-prim . file-newer?) (bl5154 core-prim . stat-mtime) (bl5153 core-prim . write-to-file) (bl5152 core-prim . file->list) (bl5151 core-prim . file->string) (bl5150 core-prim . digit->integer) (bl514f core-prim . call-with-string-input-port) (bl514e core-prim . call-with-string-io) (bl514d core-prim . string-split) (bl514c core-prim . bytevector-for-each) (bl514b core-prim . string->regexp) (bl514a core-prim . rxmatch) (bl5149 core-prim . regexp-replace-all) (bl5148 core-prim . hashtable-fold-left) (bl5147 core-prim . hashtable-for-each) (bl2921 core-prim . mosh-cache-dir) (bl5146 core-prim . call-process) (bl5145 core-prim . local-tz-offset) (bl5144 core-prim . microseconds) (bl5143 core-prim . directory-list) (bl5142 core-prim . set-current-directory!) (bl5141 core-prim . expand-path) (bl5140 core-prim . current-directory) (bl513f core-prim . %spawn) (bl513e core-prim . %waitpid) (bl513d core-prim . simple-struct-name) (bl513c core-prim . simple-struct-set!) (bl513b core-prim . simple-struct-ref) (bl513a core-prim . make-simple-struct) (bl5139 core-prim . simple-struct?) (bl5138 core-prim . pointer-ref-c-int64) (bl5137 core-prim . pointer-ref-c-int32) (bl5136 core-prim . pointer-ref-c-int16) (bl5135 core-prim . pointer-ref-c-int8) (bl5134 core-prim . pointer-ref-c-uint64) (bl5133 core-prim . pointer-ref-c-uint32) (bl5132 core-prim . pointer-ref-c-uint16) (bl5131 core-prim . pointer-ref-c-uint8) (bl5130 core-prim . pointer-set-c-uint64!) (bl512f core-prim . pointer-set-c-uint32!) (bl512e core-prim . pointer-set-c-uint16!) (bl512d core-prim . pointer-set-c-uint8!) (bl512c core-prim . pointer-set-c-int64!) (bl512b core-prim . pointer-set-c-int32!) (bl512a core-prim . pointer-set-c-int16!) (bl5129 core-prim . pointer-set-c-int8!) (bl5128 core-prim . pointer-set-c-pointer!) (bl5127 core-prim . pointer-set-c-double!) (bl5126 core-prim . pointer-set-c-float!) (bl5125 core-prim . pointer-set-c-long-long!) (bl5124 core-prim . pointer-set-c-long!) (bl5123 core-prim . pointer-set-c-int!) (bl5122 core-prim . pointer-set-c-short!) (bl5121 core-prim . pointer-set-c-char!) (bl5120 core-prim . pointer-ref-c-pointer) (bl511f core-prim . pointer-ref-c-double) (bl511e core-prim . pointer-ref-c-float) (bl511d core-prim . pointer-ref-c-unsigned-long-long) (bl511c core-prim . pointer-ref-c-signed-long-long) (bl511b core-prim . pointer-ref-c-unsigned-long) (bl511a core-prim . pointer-ref-c-signed-long) (bl5119 core-prim . pointer-ref-c-unsigned-int) (bl5118 core-prim . pointer-ref-c-signed-int) (bl5117 core-prim . pointer-ref-c-unsigned-short) (bl5116 core-prim . pointer-ref-c-signed-short) (bl5115 core-prim . pointer-ref-c-unsigned-char) (bl5114 core-prim . pointer-ref-c-signed-char) (bl5113 core-prim . pointer->integer) (bl5112 core-prim . integer->pointer) (bl5111 core-prim . pointer?) (bl5110 core-prim . shared-errno) (bl510f core-prim . %ffi-free-c-callback-trampoline) (bl510e core-prim . %ffi-make-c-callback-trampoline) (bl510d core-prim . %ffi-free) (bl510c core-prim . %ffi-malloc) (bl510b core-prim . %ffi-supported?) (bl510a core-prim . %ffi-pointer->string) (bl5109 core-prim . %ffi-call) (bl5108 core-prim . %ffi-lookup) (bl5107 core-prim . %ffi-open) (bl5106 core-prim . null-terminated-utf8->string) (bl5105 core-prim . null-terminated-bytevector->string) (bl5104 core-prim . %exec) (bl5103 core-prim . %fork) (bl5102 core-prim . %pipe) (bl5101 core-prim . p) (bl5100 core-prim . open-output-string) (bl50ff core-prim . get-output-string) (bl50fe core-prim . file-stat-ctime) (bl50fd core-prim . file-stat-atime) (bl50fc core-prim . file-stat-mtime) (bl50fb core-prim . file-size-in-bytes) (bl50fa core-prim . file-writable?) (bl50f9 core-prim . file-executable?) (bl50f8 core-prim . file-readable?) (bl50f7 core-prim . file-regular?) (bl50f6 core-prim . file-symbolic-link?) (bl50f5 core-prim . file-directory?) (bl50f4 core-prim . create-symbolic-link) (bl50f3 core-prim . rename-file) (bl50f2 core-prim . delete-directory) (bl50f1 core-prim . create-directory) (bl50f0 core-prim . create-mosh-cache-dir) (bl50ef core-prim . get-environment-variables) (bl50ee core-prim . current-exception-handler) (bl50ed core-prim . get-environment-variable) (bl50ec core-prim . join-wraps) (bl50eb core-prim . id->real-label) (bl50ea core-prim . same-marks?) (bl50e9 core-prim . same-marks*?) (bl50e8 core-prim . get-timeofday) (bl50e7 core-prim . get-command-line) (bl50e6 core-prim . sys-display) (bl50e5 core-prim . whereis) (bl50e4 core-prim . register) (bl50e3 core-prim . vm-join!) (bl50e2 core-prim . vm-set-value!) (bl50e1 core-prim . vm?) (bl50e0 core-prim . main-vm?) (bl50df core-prim . vm-eval) (bl50de core-prim . vm-self) (bl50dd core-prim . vm-start!) (bl50dc core-prim . make-vm) (bl50db core-prim . mutex-try-lock!) (bl50da core-prim . mutex-unlock!) (bl50d9 core-prim . mutex-lock!) (bl50d8 core-prim . mutex?) (bl50d7 core-prim . make-mutex) (bl50d6 core-prim . condition-variable-notify-all!) (bl50d5 core-prim . condition-variable-notify!) (bl50d4 core-prim . condition-variable-wait!) (bl50d3 core-prim . make-condition-variable) (bl50d2 core-prim . write/ss) (bl50d1 core-prim . mosh-executable-path) (bl50d0 core-prim . make-file-options) (bl50cf core-prim . source-info) (bl50ce core-prim . make-compiler-instruction) (bl50cd core-prim . make-instruction) (bl50cc core-prim . set-source-info!) (bl50cb core-prim . bignum?) (bl50ca core-prim . fast-equal?) (bl50c9 core-prim . fasl-read) (bl50c8 core-prim . fasl-write) (bl50c7 core-prim . time-usage) (bl50c6 core-prim . os-constant) (bl50c5 core-prim . condition-printer) (bl50c4 core-prim . disasm) (bl291f core-prim . make-parameter) (bl50c3 core-prim . socket-port) (bl50c2 core-prim . socket-shutdown) (bl50c1 core-prim . socket-close) (bl50c0 core-prim . socket-send) (bl50bf core-prim . socket-recv!) (bl50be core-prim . socket-recv) (bl50bd core-prim . make-server-socket) (bl50bc core-prim . make-client-socket) (bl50bb core-prim . socket-accept) (bl50ba core-prim . socket?) (bl50b9 core-prim . string-upcase) (bl50b8 core-prim . string-titlecase) (bl50b7 core-prim . string-normalize-nfkd) (bl50b6 core-prim . string-normalize-nfkc) (bl50b5 core-prim . string-normalize-nfd) (bl50b4 core-prim . string-normalize-nfc) (bl50b3 core-prim . string-foldcase) (bl50b2 core-prim . string-downcase) (bl50b1 core-prim . string-ci>?) (bl50b0 core-prim . string-ci>=?) (bl50af core-prim . string-ci=?) (bl50ae core-prim . string-ci<?) (bl50ad core-prim . string-ci<=?) (bl50ac core-prim . char-whitespace?) (bl50ab core-prim . char-upper-case?) (bl50aa core-prim . char-title-case?) (bl50a9 core-prim . char-numeric?) (bl50a8 core-prim . char-lower-case?) (bl50a7 core-prim . char-general-category) (bl50a6 core-prim . char-upcase) (bl50a5 core-prim . char-titlecase) (bl50a4 core-prim . char-foldcase) (bl50a3 core-prim . char-downcase) (bl50a2 core-prim . char-ci>?) (bl50a1 core-prim . char-ci>=?) (bl50a0 core-prim . char-ci=?) (bl509f core-prim . char-ci<?) (bl509e core-prim . char-ci<=?) (bl509d core-prim . char-alphabetic?) (bl2f23 core-prim . make-variable-transformer) (bl31da core-prim . identifier?) (bl31c6 core-prim . generate-temporaries) (bl31c8 core-prim . free-identifier=?) (bl31de core-prim . syntax->datum) (bl31dc core-prim . datum->syntax) (bl31ca core-prim . bound-identifier=?) (bl509c core-prim . record-type-descriptor?) (bl509b core-prim . record-predicate) (bl509a core-prim . record-mutator) (bl5099 core-prim . record-constructor) (bl5098 core-prim . record-accessor) (bl5097 core-prim . make-record-type-descriptor) (bl5096 core-prim . make-record-constructor-descriptor) (bl5095 core-prim . record?) (bl5094 core-prim . record-type-uid) (bl5093 core-prim . record-type-sealed?) (bl5092 core-prim . record-type-parent) (bl5091 core-prim . record-type-opaque?) (bl5090 core-prim . record-type-name) (bl508f core-prim . record-type-generative?) (bl508e core-prim . record-type-field-names) (bl508d core-prim . record-rtd) (bl508c core-prim . record-field-mutable?) (bl508b core-prim . delete-file) (bl508a core-prim . file-exists?) (bl5089 core-prim . vector-sort!) (bl5088 core-prim . vector-sort) (bl5087 core-prim . list-sort) (bl5086 core-prim . symbol-hash) (bl5085 core-prim . string-ci-hash) (bl5084 core-prim . string-hash) (bl5083 core-prim . equal-hash) (bl5082 core-prim . hashtable-equivalence-function) (bl5081 core-prim . make-hashtable) (bl5080 core-prim . hashtable-hash-function) (bl507f core-prim . make-eqv-hashtable) (bl507e core-prim . make-eq-hashtable) (bl507d core-prim . hashtable?) (bl507c core-prim . hashtable-update!) (bl507b core-prim . hashtable-size) (bl507a core-prim . hashtable-set!) (bl5079 core-prim . hashtable-ref) (bl5078 core-prim . hashtable-mutable?) (bl5077 core-prim . hashtable-keys) (bl5076 core-prim . hashtable-entries) (bl5075 core-prim . hashtable-delete!) (bl5074 core-prim . hashtable-copy) (bl5073 core-prim . hashtable-contains?) (bl5072 core-prim . hashtable-clear!) (bl5071 core-prim . call-with-output-file) (bl5070 core-prim . call-with-input-file) (bl506f core-prim . write-char) (bl506e core-prim . write) (bl506d core-prim . with-output-to-file) (bl506c core-prim . with-input-from-file) (bl506b core-prim . read-char) (bl506a core-prim . read) (bl5069 core-prim . peek-char) (bl5068 core-prim . open-output-file) (bl5067 core-prim . open-input-file) (bl5066 core-prim . newline) (bl5065 core-prim . display) (bl5064 core-prim . close-output-port) (bl5063 core-prim . close-input-port) (bl5062 core-prim . eof-object?) (bl5061 core-prim . eof-object) (bl5060 core-prim . current-error-port) (bl505f core-prim . current-output-port) (bl505e core-prim . current-input-port) (bl505d core-prim . output-port?) (bl505c core-prim . input-port?) (bl505b core-prim . utf-8-codec) (bl505a core-prim . utf-16-codec) (bl5059 core-prim . transcoder-error-handling-mode) (bl5058 core-prim . transcoder-eol-style) (bl5057 core-prim . transcoder-codec) (bl5056 core-prim . transcoded-port) (bl5055 core-prim . textual-port?) (bl5054 core-prim . string->bytevector) (bl5053 core-prim . standard-output-port) (bl5052 core-prim . standard-input-port) (bl5051 core-prim . standard-error-port) (bl5050 core-prim . set-port-position!) (bl504f core-prim . put-u8) (bl504e core-prim . put-string) (bl504d core-prim . put-datum) (bl504c core-prim . put-char) (bl504b core-prim . put-bytevector) (bl504a core-prim . port?) (bl5049 core-prim . port-transcoder) (bl5048 core-prim . port-position) (bl5047 core-prim . port-has-set-port-position!?) (bl5046 core-prim . port-has-port-position?) (bl5045 core-prim . port-eof?) (bl5044 core-prim . output-port-buffer-mode) (bl5043 core-prim . open-string-output-port) (bl5042 core-prim . open-string-input-port) (bl5041 core-prim . open-file-output-port) (bl5040 core-prim . open-file-input/output-port) (bl503f core-prim . open-file-input-port) (bl503e core-prim . open-bytevector-output-port) (bl503d core-prim . open-bytevector-input-port) (bl503c core-prim . native-transcoder) (bl503b core-prim . native-eol-style) (bl503a core-prim . make-transcoder) (bl5039 core-prim . latin-1-codec) (bl5038 core-prim . make-i/o-write-error) (bl5037 core-prim . make-i/o-read-error) (bl5036 core-prim . make-i/o-port-error) (bl5035 core-prim . make-i/o-invalid-position-error) (bl5034 core-prim . make-i/o-filename-error) (bl5033 core-prim . make-i/o-file-protection-error) (bl5032 core-prim . make-i/o-file-is-read-only-error) (bl5031 core-prim . make-i/o-file-does-not-exist-error) (bl5030 core-prim . make-i/o-file-already-exists-error) (bl502f core-prim . make-i/o-error) (bl502e core-prim . make-i/o-encoding-error) (bl502d core-prim . make-i/o-decoding-error) (bl502c core-prim . make-custom-textual-output-port) (bl502b core-prim . make-custom-textual-input/output-port) (bl502a core-prim . make-custom-textual-input-port) (bl5029 core-prim . make-custom-binary-output-port) (bl5028 core-prim . make-custom-binary-input/output-port) (bl5027 core-prim . make-custom-binary-input-port) (bl5026 core-prim . make-bytevector) (bl5025 core-prim . lookahead-u8) (bl5024 core-prim . lookahead-char) (bl5023 core-prim . i/o-write-error?) (bl5022 core-prim . i/o-read-error?) (bl5021 core-prim . i/o-port-error?) (bl5020 core-prim . i/o-invalid-position-error?) (bl501f core-prim . i/o-filename-error?) (bl501e core-prim . i/o-file-protection-error?) (bl501d core-prim . i/o-file-is-read-only-error?) (bl501c core-prim . i/o-file-does-not-exist-error?) (bl501b core-prim . i/o-file-already-exists-error?) (bl501a core-prim . i/o-error?) (bl5019 core-prim . i/o-error-position) (bl5018 core-prim . i/o-error-port) (bl5017 core-prim . i/o-error-filename) (bl5016 core-prim . i/o-encoding-error?) (bl5015 core-prim . i/o-encoding-error-char) (bl5014 core-prim . i/o-decoding-error?) (bl5013 core-prim . get-u8) (bl5012 core-prim . get-string-n!) (bl5011 core-prim . get-string-n) (bl5010 core-prim . get-string-all) (bl500f core-prim . get-line) (bl500e core-prim . get-datum) (bl500d core-prim . get-char) (bl500c core-prim . get-bytevector-some) (bl500b core-prim . get-bytevector-n!) (bl500a core-prim . get-bytevector-n) (bl5009 core-prim . get-bytevector-all) (bl5008 core-prim . flush-output-port) (bl5007 core-prim . close-port) (bl31b4 core-prim . scheme-report-environment) (bl5006 core-prim . quotient) (bl31b2 core-prim . null-environment) (bl5005 core-prim . remainder) (bl5004 core-prim . modulo) (bl5003 core-prim . inexact->exact) (bl5002 core-prim . force) (bl5001 core-prim . exact->inexact) (bl5000 core-prim . make-promise) (bl4fff core-prim . exit) (bl4c91 core-prim . command-line) (bl4ffe core-prim . string-fill!) (bl4ffd core-prim . string-set!) (bl4ffc core-prim . set-cdr!) (bl4ffb core-prim . set-car!) (bl4ffa core-prim . remove) (bl4ff9 core-prim . remv) (bl4ff8 core-prim . remp) (bl4ff7 core-prim . remq) (bl4ff6 core-prim . partition) (bl4ff5 core-prim . memv) (bl4ff4 core-prim . memq) (bl4ff3 core-prim . memp) (bl4ff2 core-prim . member) (bl4ff1 core-prim . exists) (bl4ff0 core-prim . for-all) (bl4fef core-prim . fold-right) (bl4fee core-prim . fold-left) (bl4fed core-prim . find) (bl4fec core-prim . filter) (bl4feb core-prim . cons*) (bl4fea core-prim . assv) (bl4fe9 core-prim . assq) (bl4fe8 core-prim . assp) (bl4fe7 core-prim . assoc) (bl4fe6 core-prim . call-with-string-output-port) (bl4fe5 core-prim . call-with-port) (bl4fe4 core-prim . call-with-bytevector-output-port) (bl4fe3 core-prim . bytevector->string) (bl4fe2 core-prim . buffer-mode?) (bl4fe1 core-prim . binary-port?) (bl4fe0 core-prim . with-exception-handler) (bl4fdf core-prim . raise-continuable) (bl4fde core-prim . raise) (bl31b8 core-prim . eval) (bl31b0 core-prim . environment) (bl4fdd core-prim . make-enumeration) (bl4fdc core-prim . enum-set=?) (bl4fdb core-prim . enum-set-universe) (bl4fda core-prim . enum-set-union) (bl4fd9 core-prim . enum-set-subset?) (bl4fd8 core-prim . enum-set-projection) (bl4fd7 core-prim . enum-set-member?) (bl4fd6 core-prim . enum-set-intersection) (bl4fd5 core-prim . enum-set-indexer) (bl4fd4 core-prim . enum-set-difference) (bl4fd3 core-prim . enum-set-constructor) (bl4fd2 core-prim . enum-set-complement) (bl4fd1 core-prim . enum-set->list) (bl4fd0 core-prim . who-condition?) (bl4fcf core-prim . warning?) (bl4fce core-prim . violation?) (bl4fcd core-prim . undefined-violation?) (bl4fcc core-prim . syntax-violation?) (bl4fcb core-prim . syntax-violation-subform) (bl4fca core-prim . syntax-violation-form) (bl31d8 core-prim . syntax-violation) (bl4fc9 core-prim . simple-conditions) (bl4fc8 core-prim . serious-condition?) (bl4fc7 core-prim . non-continuable-violation?) (bl4fc6 core-prim . message-condition?) (bl4fc5 core-prim . make-who-condition) (bl4fc4 core-prim . make-warning) (bl4fc3 core-prim . make-violation) (bl4fc2 core-prim . make-undefined-violation) (bl4fc1 core-prim . make-syntax-violation) (bl4fc0 core-prim . make-serious-condition) (bl4fbf core-prim . make-non-continuable-violation) (bl4fbe core-prim . make-message-condition) (bl4fbd core-prim . make-lexical-violation) (bl4fbc core-prim . make-irritants-condition) (bl4fbb core-prim . make-implementation-restriction-violation) (bl4fba core-prim . make-error) (bl4fb9 core-prim . make-assertion-violation) (bl4fb8 core-prim . lexical-violation?) (bl4fb7 core-prim . irritants-condition?) (bl4fb6 core-prim . implementation-restriction-violation?) (bl4fb5 core-prim . error?) (bl4fb4 core-prim . condition-who) (bl4fb3 core-prim . condition-predicate) (bl4fb2 core-prim . condition-message) (bl4fb1 core-prim . condition-irritants) (bl4fb0 core-prim . condition-accessor) (bl4faf core-prim . condition) (bl4fae core-prim . assertion-violation?) (bl4fad core-prim . condition?) (bl4fac core-prim . utf32->string) (bl4fab core-prim . utf16->string) (bl4faa core-prim . utf8->string) (bl4fa9 core-prim . uint-list->bytevector) (bl4fa8 core-prim . u8-list->bytevector) (bl4fa7 core-prim . string->utf8) (bl4fa6 core-prim . string->utf32) (bl4fa5 core-prim . string->utf16) (bl4fa4 core-prim . sint-list->bytevector) (bl4fa3 core-prim . native-endianness) (bl4fa2 core-prim . bytevector?) (bl4fa1 core-prim . bytevector=?) (bl4fa0 core-prim . bytevector-uint-set!) (bl4f9f core-prim . bytevector-uint-ref) (bl4f9e core-prim . bytevector-u8-set!) (bl4f9d core-prim . bytevector-u8-ref) (bl4f9c core-prim . bytevector-u64-set!) (bl4f9b core-prim . bytevector-u64-ref) (bl4f9a core-prim . bytevector-u64-native-set!) (bl4f99 core-prim . bytevector-u64-native-ref) (bl4f98 core-prim . bytevector-u32-set!) (bl4f97 core-prim . bytevector-u32-ref) (bl4f96 core-prim . bytevector-u32-native-set!) (bl4f95 core-prim . bytevector-u32-native-ref) (bl4f94 core-prim . bytevector-u16-set!) (bl4f93 core-prim . bytevector-u16-ref) (bl4f92 core-prim . bytevector-u16-native-set!) (bl4f91 core-prim . bytevector-u16-native-ref) (bl4f90 core-prim . bytevector-sint-set!) (bl4f8f core-prim . bytevector-sint-ref) (bl4f8e core-prim . bytevector-s8-set!) (bl4f8d core-prim . bytevector-s8-ref) (bl4f8c core-prim . bytevector-s64-set!) (bl4f8b core-prim . bytevector-s64-ref) (bl4f8a core-prim . bytevector-s64-native-set!) (bl4f89 core-prim . bytevector-s64-native-ref) (bl4f88 core-prim . bytevector-s32-set!) (bl4f87 core-prim . bytevector-s32-ref) (bl4f86 core-prim . bytevector-s32-native-set!) (bl4f85 core-prim . bytevector-s32-native-ref) (bl4f84 core-prim . bytevector-s16-set!) (bl4f83 core-prim . bytevector-s16-ref) (bl4f82 core-prim . bytevector-s16-native-set!) (bl4f81 core-prim . bytevector-s16-native-ref) (bl4f80 core-prim . bytevector-length) (bl4f7f core-prim . bytevector-ieee-single-ref) (bl4f7e core-prim . bytevector-ieee-single-set!) (bl4f7d core-prim . bytevector-ieee-single-native-set!) (bl4f7c core-prim . bytevector-ieee-single-native-ref) (bl4f7b core-prim . bytevector-ieee-double-set!) (bl4f7a core-prim . bytevector-ieee-double-ref) (bl4f79 core-prim . bytevector-ieee-double-native-set!) (bl4f78 core-prim . bytevector-ieee-double-native-ref) (bl4f77 core-prim . bytevector-fill!) (bl4f76 core-prim . bytevector-copy!) (bl4f75 core-prim . bytevector-copy) (bl4f74 core-prim . bytevector->uint-list) (bl4f73 core-prim . bytevector->u8-list) (bl4f72 core-prim . bytevector->sint-list) (bl4f71 core-prim . no-nans-violation?) (bl4f70 core-prim . no-infinities-violation?) (bl4f6f core-prim . make-no-nans-violation) (bl4f6e core-prim . make-no-infinities-violation) (bl4f6d core-prim . real->flonum) (bl4f6c core-prim . flzero?) (bl4f6b core-prim . fltruncate) (bl4f6a core-prim . fltan) (bl4f69 core-prim . flsqrt) (bl4f68 core-prim . flsin) (bl4f67 core-prim . flround) (bl4f66 core-prim . flpositive?) (bl4f65 core-prim . flonum?) (bl4f64 core-prim . flodd?) (bl4f63 core-prim . flnumerator) (bl4f62 core-prim . flnegative?) (bl4f61 core-prim . flnan?) (bl4f60 core-prim . flmod0) (bl4f5f core-prim . flmod) (bl4f5e core-prim . flmin) (bl4f5d core-prim . flmax) (bl4f5c core-prim . fllog) (bl4f5b core-prim . flinteger?) (bl4f5a core-prim . flinfinite?) (bl4f59 core-prim . flfloor) (bl4f58 core-prim . flfinite?) (bl4f57 core-prim . flexpt) (bl4f56 core-prim . flexp) (bl4f55 core-prim . fleven?) (bl4f54 core-prim . fldiv0-and-mod0) (bl4f53 core-prim . fldiv0) (bl4f52 core-prim . fldiv-and-mod) (bl4f51 core-prim . fldiv) (bl4f50 core-prim . fldenominator) (bl4f4f core-prim . flcos) (bl4f4e core-prim . flceiling) (bl4f4d core-prim . flatan) (bl4f4c core-prim . flasin) (bl4f4b core-prim . flacos) (bl4f4a core-prim . flabs) (bl4f49 core-prim . fl>?) (bl4f48 core-prim . fl>=?) (bl4f47 core-prim . fl=?) (bl4f46 core-prim . fl<?) (bl4f45 core-prim . fl<=?) (bl4f44 core-prim . fl/) (bl4f43 core-prim . fl-) (bl4f42 core-prim . fl+) (bl4f41 core-prim . fl*) (bl4f40 core-prim . fixnum->flonum) (bl4f3f core-prim . fxzero?) (bl4f3e core-prim . fxxor) (bl4f3d core-prim . fxrotate-bit-field) (bl4f3c core-prim . fxreverse-bit-field) (bl4f3b core-prim . fxpositive?) (bl4f3a core-prim . fxodd?) (bl4f39 core-prim . fxnot) (bl4f38 core-prim . fxnegative?) (bl4f37 core-prim . fxmod0) (bl4f36 core-prim . fxmod) (bl4f35 core-prim . fxmin) (bl4f34 core-prim . fxmax) (bl4f33 core-prim . fxlength) (bl4f32 core-prim . fxior) (bl4f31 core-prim . fxif) (bl4f30 core-prim . fxfirst-bit-set) (bl4f2f core-prim . fxeven?) (bl4f2e core-prim . fxdiv0-and-mod0) (bl4f2d core-prim . fxdiv0) (bl4f2c core-prim . fxdiv-and-mod) (bl4f2b core-prim . fxdiv) (bl4f2a core-prim . fxcopy-bit-field) (bl4f29 core-prim . fxcopy-bit) (bl4f28 core-prim . fxbit-set?) (bl4f27 core-prim . fxbit-field) (bl4f26 core-prim . fxbit-count) (bl4f25 core-prim . fxarithmetic-shift-right) (bl4f24 core-prim . fxarithmetic-shift-left) (bl4f23 core-prim . fxarithmetic-shift) (bl4f22 core-prim . fxand) (bl4f21 core-prim . fx>?) (bl4f20 core-prim . fx>=?) (bl4f1f core-prim . fx=?) (bl4f1e core-prim . fx<?) (bl4f1d core-prim . fx<=?) (bl4f1c core-prim . fx-/carry) (bl4f1b core-prim . fx-) (bl4f1a core-prim . fx+/carry) (bl4f19 core-prim . fx+) (bl4f18 core-prim . fx*/carry) (bl4f17 core-prim . fx*) (bl4f16 core-prim . greatest-fixnum) (bl4f15 core-prim . least-fixnum) (bl4f14 core-prim . fixnum-width) (bl4f13 core-prim . fixnum?) (bl4f12 core-prim . bitwise-rotate-bit-field) (bl4f11 core-prim . bitwise-reverse-bit-field) (bl4f10 core-prim . bitwise-length) (bl4f0f core-prim . bitwise-if) (bl4f0e core-prim . bitwise-first-bit-set) (bl4f0d core-prim . bitwise-copy-bit-field) (bl4f0c core-prim . bitwise-copy-bit) (bl4f0b core-prim . bitwise-bit-set?) (bl4f0a core-prim . bitwise-bit-field) (bl4f09 core-prim . bitwise-bit-count) (bl4f08 core-prim . bitwise-xor) (bl4f07 core-prim . bitwise-ior) (bl4f06 core-prim . bitwise-and) (bl4f05 core-prim . bitwise-not) (bl4f04 core-prim . bitwise-arithmetic-shift-right) (bl4f03 core-prim . bitwise-arithmetic-shift-left) (bl4f02 core-prim . bitwise-arithmetic-shift) (bl4f01 core-prim . zero?) (bl4f00 core-prim . vector?) (bl4eff core-prim . vector-set!) (bl4efe core-prim . vector-ref) (bl4efd core-prim . vector-map) (bl4efc core-prim . vector-length) (bl4efb core-prim . vector-for-each) (bl4efa core-prim . vector-fill!) (bl4ef9 core-prim . vector->list) (bl4ef8 core-prim . vector) (bl4ef7 core-prim . values) (bl4ef6 core-prim . truncate) (bl4ef5 core-prim . tan) (bl4ef4 core-prim . symbol?) (bl4ef3 core-prim . symbol=?) (bl4ef2 core-prim . symbol->string) (bl4ef1 core-prim . substring) (bl4ef0 core-prim . string?) (bl4eef core-prim . string>?) (bl4eee core-prim . string>=?) (bl4eed core-prim . string=?) (bl4eec core-prim . string<?) (bl4eeb core-prim . string<=?) (bl4eea core-prim . string-ref) (bl4ee9 core-prim . string-length) (bl4ee8 core-prim . string-for-each) (bl4ee7 core-prim . string-copy) (bl4ee6 core-prim . string-append) (bl4ee5 core-prim . string->symbol) (bl4ee4 core-prim . string->number) (bl4ee3 core-prim . string->list) (bl4ee2 core-prim . string) (bl4ee1 core-prim . sqrt) (bl4ee0 core-prim . sin) (bl4edf core-prim . round) (bl4ede core-prim . reverse) (bl4edd core-prim . real?) (bl4edc core-prim . real-valued?) (bl4edb core-prim . real-part) (bl4eda core-prim . rationalize) (bl4ed9 core-prim . rational?) (bl4ed8 core-prim . rational-valued?) (bl4ed7 core-prim . procedure?) (bl4ed6 core-prim . positive?) (bl4ed5 core-prim . pair?) (bl4ed4 core-prim . odd?) (bl4ed3 core-prim . numerator) (bl4ed2 core-prim . number?) (bl4ed1 core-prim . number->string) (bl4ed0 core-prim . null?) (bl4ecf core-prim . not) (bl4ece core-prim . negative?) (bl4ecd core-prim . nan?) (bl4ecc core-prim . min) (bl4ecb core-prim . max) (bl4eca core-prim . map) (bl4ec9 core-prim . make-vector) (bl4ec8 core-prim . make-string) (bl4ec7 core-prim . make-rectangular) (bl4ec6 core-prim . make-polar) (bl4ec5 core-prim . magnitude) (bl4ec4 core-prim . log) (bl4ec3 core-prim . list?) (bl4ec2 core-prim . list-tail) (bl4ec1 core-prim . list-ref) (bl4ec0 core-prim . list->vector) (bl4ebf core-prim . list->string) (bl4ebe core-prim . list) (bl4ebd core-prim . length) (bl4ebc core-prim . lcm) (bl4ebb core-prim . integer?) (bl4eba core-prim . integer-valued?) (bl4eb9 core-prim . integer->char) (bl4eb8 core-prim . infinite?) (bl4eb7 core-prim . inexact?) (bl4eb6 core-prim . inexact) (bl4eb5 core-prim . imag-part) (bl4eb4 core-prim . gcd) (bl4eb3 core-prim . for-each) (bl4eb2 core-prim . floor) (bl4eb1 core-prim . finite?) (bl4eb0 core-prim . expt) (bl4eaf core-prim . exp) (bl4eae core-prim . exact?) (bl4ead core-prim . exact-integer-sqrt) (bl4eac core-prim . exact) (bl4eab core-prim . even?) (bl4eaa core-prim . error) (bl4ea9 core-prim . eqv?) (bl4ea8 core-prim . equal?) (bl4ea7 core-prim . eq?) (bl4ea6 core-prim . dynamic-wind) (bl4ea5 core-prim . div0-and-mod0) (bl4ea4 core-prim . mod0) (bl4ea3 core-prim . div0) (bl4ea2 core-prim . div-and-mod) (bl4ea1 core-prim . mod) (bl4ea0 core-prim . div) (bl4e9f core-prim . denominator) (bl4e9e core-prim . cos) (bl4e9d core-prim . cons) (bl4e9c core-prim . complex?) (bl4e9b core-prim . char?) (bl4e9a core-prim . char>?) (bl4e99 core-prim . char>=?) (bl4e98 core-prim . char=?) (bl4e97 core-prim . char<?) (bl4e96 core-prim . char<=?) (bl4e95 core-prim . char->integer) (bl4e94 core-prim . ceiling) (bl4e93 core-prim . call-with-values) (bl4e92 core-prim . call/cc) (bl4e91 core-prim . call-with-current-continuation) (bl4e90 core-prim . cddddr) (bl4e8f core-prim . cdddar) (bl4e8e core-prim . cddadr) (bl4e8d core-prim . cddaar) (bl4e8c core-prim . cdaddr) (bl4e8b core-prim . cdadar) (bl4e8a core-prim . cdaadr) (bl4e89 core-prim . cdaaar) (bl4e88 core-prim . cadddr) (bl4e87 core-prim . caddar) (bl4e86 core-prim . cadadr) (bl4e85 core-prim . cadaar) (bl4e84 core-prim . caaddr) (bl4e83 core-prim . caadar) (bl4e82 core-prim . caaadr) (bl4e81 core-prim . caaaar) (bl4e80 core-prim . cdddr) (bl4e7f core-prim . cddar) (bl4e7e core-prim . cdadr) (bl4e7d core-prim . cdaar) (bl4e7c core-prim . caddr) (bl4e7b core-prim . cadar) (bl4e7a core-prim . caadr) (bl4e79 core-prim . caaar) (bl4e78 core-prim . cddr) (bl4e77 core-prim . cdar) (bl4e76 core-prim . cadr) (bl4e75 core-prim . caar) (bl4e74 core-prim . cdr) (bl4e73 core-prim . car) (bl4e72 core-prim . boolean?) (bl4e71 core-prim . boolean=?) (bl4e70 core-prim . atan) (bl4e6f core-prim . assertion-violation) (bl31d2 core-prim . assertion-error) (bl4e6e core-prim . asin) (bl4e6d core-prim . apply) (bl4e6c core-prim . append) (bl4e6b core-prim . angle) (bl4e6a core-prim . acos) (bl4e69 core-prim . abs) (bl4e68 core-prim . /) (bl4e67 core-prim . *) (bl4e66 core-prim . -) (bl4e65 core-prim . +) (bl4e64 core-prim . >=) (bl4e63 core-prim . >) (bl4e62 core-prim . =) (bl4e61 core-prim . <=) (bl4e60 core-prim . <) (bl4e5f core-prim . library) (bl4e5e $core-rtd &no-nans-rtd &no-nans-rcd) (bl4e5d $core-rtd &no-infinities-rtd &no-infinities-rcd) (bl4e5c $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (bl4e5b $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (bl4e5a $core-rtd &i/o-port-rtd &i/o-port-rcd) (bl4e59 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (bl4e58 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (bl4e57 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (bl4e56 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (bl4e55 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (bl4e54 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (bl4e53 $core-rtd &i/o-write-rtd &i/o-write-rcd) (bl4e52 $core-rtd &i/o-read-rtd &i/o-read-rcd) (bl4e51 $core-rtd &i/o-rtd &i/o-rcd) (bl4e50 $core-rtd &undefined-rtd &undefined-rcd) (bl4e4f $core-rtd &syntax-rtd &syntax-rcd) (bl4e4e $core-rtd &lexical-rtd &lexical-rcd) (bl4e4d $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (bl4e4c $core-rtd &non-continuable-rtd &non-continuable-rcd) (bl4e4b $core-rtd &who-rtd &who-rcd) (bl4e4a $core-rtd &irritants-rtd &irritants-rcd) (bl4e49 $core-rtd &assertion-rtd &assertion-rcd) (bl4e48 $core-rtd &violation-rtd &violation-rcd) (bl4e47 $core-rtd &error-rtd &error-rcd) (bl4e46 $core-rtd &serious-rtd &serious-rcd) (bl4e45 $core-rtd &warning-rtd &warning-rcd) (bl4e44 $core-rtd &message-rtd &message-rcd) (bl4e43 $core-rtd &condition-rtd &condition-rcd) (bl4e42 macro . define-condition-type) (bl4e41 macro . define-enumeration) (bl4e40 macro . define-record-type) (bl4e3f macro . parent-rtd) (bl4e3e macro . nongenerative) (bl4e3d macro . opaque) (bl4e3c macro . sealed) (bl4e3b macro . protocol) (bl4e3a macro . parent) (bl4e39 macro . immutable) (bl4e38 macro . mutable) (bl4e37 macro . fields) (bl4e36 macro . error-handling-mode) (bl4e35 macro . file-options) (bl4e34 macro . buffer-mode) (bl4e33 macro . eol-style) (bl4e32 macro . guard) (bl4e31 macro . trace-define) (bl4e30 macro . trace-lambda) (bl4e2f macro . unsyntax-splicing) (bl4e2e macro . unsyntax) (bl4e2d macro . unquote-splicing) (bl4e2c macro . unquote) (bl4e2b macro . _) (bl4e2a macro . else) (bl4e29 macro . =>) (bl4e28 macro . ...) (bl4e27 macro . assert) (bl4e26 macro . endianness) (bl4e25 macro . delay) (bl4e24 macro . time) (bl4e23 macro . do) (bl4e22 macro . cond) (bl4e21 macro . let*) (bl4e20 macro . let*-values) (bl4e1f macro . let-values) (bl4e1e macro . identifier-syntax) (bl4e1d macro . with-syntax) (bl4e1c macro . quasisyntax) (bl4e1b macro . quasiquote) (bl4e1a macro . syntax-rules) (bl4e19 macro . include) (bl4e18 macro . define-struct) (bl4e17 core-macro . record-constructor-descriptor) (bl4e16 core-macro . record-type-descriptor) (bl4e15 macro . case) (bl4e14 macro . parameterize) (bl4e13 macro . unless) (bl4e12 macro . when) (bl4e11 core-macro . or) (bl4e10 core-macro . and) (bl4e0f core-macro . if) (bl4e0e core-macro . let) (bl4e0d core-macro . letrec*) (bl4e0c core-macro . letrec) (bl4e0b core-macro . type-descriptor) (bl4e0a core-macro . case-lambda) (bl4e09 core-macro . lambda) (bl4e08 core-macro . syntax) (bl4e07 core-macro . syntax-case) (bl4e06 core-macro . quote) (bl4e05 core-macro . foreign-call) (bl4e04 letrec-syntax) (bl4e03 let-syntax) (bl4e02 set!) (bl4e01 import) (bl4e00 begin) (bl4dff module) (bl4dfe define-syntax) (bl4dfd define)) values values '#f '#f '#f '#f) (bl2d0c@bl2b58@install-library 'bl51c4 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . bl516b) (eval-core . bl516a) (set-symbol-value! . bl5169) (symbol-value . bl5168) (gensym . bl5167) (void . bl5166)) '() values values '#f '#f '#f '#f) (bl2d0c@bl2b58@install-library 'bl51c5 '(mosh) '() '() '() '() '((set-symbol-value! . bl5169) (symbol-value . bl5168) (regexp? . bl5164) (read-line . bl5163) (ungensym . bl5161) (alist->eq-hash-table . bl5160) (assoc-ref . bl515f) (print . bl515e) (format . bl515d) (host-os . bl515c) (library-path . bl2b37) (standard-library-path . bl515b) (file-newer? . bl5155) (stat-mtime . bl5154) (digit->integer . bl5150) (call-with-string-input-port . bl514f) (call-with-string-io . bl514e) (string-split . bl514d) (bytevector-for-each . bl514c) (string->regexp . bl514b) (rxmatch . bl514a) (regexp-replace-all . bl5149) (hashtable-fold-left . bl5148) (hashtable-for-each . bl5147) (set-current-directory! . bl5142) (expand-path . bl5141) (current-directory . bl5140) (p . bl5101) (get-timeofday . bl50e8) (get-command-line . bl50e7) (sys-display . bl50e6) (whereis . bl50e5) (register . bl50e4) (vm-join! . bl50e3) (vm-set-value! . bl50e2) (vm? . bl50e1) (main-vm? . bl50e0) (vm-eval . bl50df) (vm-self . bl50de) (vm-start! . bl50dd) (make-vm . bl50dc) (mutex-try-lock! . bl50db) (mutex-unlock! . bl50da) (mutex-lock! . bl50d9) (mutex? . bl50d8) (make-mutex . bl50d7) (condition-variable-notify-all! . bl50d6) (condition-variable-notify! . bl50d5) (condition-variable-wait! . bl50d4) (make-condition-variable . bl50d3) (write/ss . bl50d2) (mosh-executable-path . bl50d1) (make-file-options . bl50d0) (source-info . bl50cf) (make-compiler-instruction . bl50ce) (make-instruction . bl50cd) (set-source-info! . bl50cc) (bignum? . bl50cb) (fast-equal? . bl50ca) (fasl-read . bl50c9) (fasl-write . bl50c8) (time-usage . bl50c7) (os-constant . bl50c6) (condition-printer . bl50c5) (time . bl4e24) (include . bl4e19)) '() values values '#f '#f '#f '#f) (bl2d0c@bl2b58@install-library 'bl51c6 '(system) '() '() '() '() '((gensym-prefix-set! . bl5162) (ssl-supported? . bl515a) (ssl-socket? . bl5159) (socket-sslize! . bl5158) (%monapi-name-whereis . bl5157) (%monapi-message-send . bl5156) (write-to-file . bl5153) (file->list . bl5152) (file->string . bl5151) (mosh-cache-dir . bl2921) (call-process . bl5146) (local-tz-offset . bl5145) (microseconds . bl5144) (directory-list . bl5143) (expand-path . bl5141) (%spawn . bl513f) (%waitpid . bl513e) (simple-struct-name . bl513d) (simple-struct-set! . bl513c) (simple-struct-ref . bl513b) (make-simple-struct . bl513a) (simple-struct? . bl5139) (pointer-ref-c-int64 . bl5138) (pointer-ref-c-int32 . bl5137) (pointer-ref-c-int16 . bl5136) (pointer-ref-c-int8 . bl5135) (pointer-ref-c-uint64 . bl5134) (pointer-ref-c-uint32 . bl5133) (pointer-ref-c-uint16 . bl5132) (pointer-ref-c-uint8 . bl5131) (pointer-set-c-uint64! . bl5130) (pointer-set-c-uint32! . bl512f) (pointer-set-c-uint16! . bl512e) (pointer-set-c-uint8! . bl512d) (pointer-set-c-int64! . bl512c) (pointer-set-c-int32! . bl512b) (pointer-set-c-int16! . bl512a) (pointer-set-c-int8! . bl5129) (pointer-set-c-pointer! . bl5128) (pointer-set-c-double! . bl5127) (pointer-set-c-float! . bl5126) (pointer-set-c-long-long! . bl5125) (pointer-set-c-long! . bl5124) (pointer-set-c-int! . bl5123) (pointer-set-c-short! . bl5122) (pointer-set-c-char! . bl5121) (pointer-ref-c-pointer . bl5120) (pointer-ref-c-double . bl511f) (pointer-ref-c-float . bl511e) (pointer-ref-c-unsigned-long-long . bl511d) (pointer-ref-c-signed-long-long . bl511c) (pointer-ref-c-unsigned-long . bl511b) (pointer-ref-c-signed-long . bl511a) (pointer-ref-c-unsigned-int . bl5119) (pointer-ref-c-signed-int . bl5118) (pointer-ref-c-unsigned-short . bl5117) (pointer-ref-c-signed-short . bl5116) (pointer-ref-c-unsigned-char . bl5115) (pointer-ref-c-signed-char . bl5114) (pointer->integer . bl5113) (integer->pointer . bl5112) (pointer? . bl5111) (shared-errno . bl5110) (%ffi-free-c-callback-trampoline . bl510f) (%ffi-make-c-callback-trampoline . bl510e) (%ffi-free . bl510d) (%ffi-malloc . bl510c) (%ffi-supported? . bl510b) (%ffi-pointer->string . bl510a) (%ffi-call . bl5109) (%ffi-lookup . bl5108) (%ffi-open . bl5107) (null-terminated-utf8->string . bl5106) (null-terminated-bytevector->string . bl5105) (%exec . bl5104) (%fork . bl5103) (%pipe . bl5102) (open-output-string . bl5100) (get-output-string . bl50ff) (file-stat-ctime . bl50fe) (file-stat-atime . bl50fd) (file-stat-mtime . bl50fc) (file-size-in-bytes . bl50fb) (file-writable? . bl50fa) (file-executable? . bl50f9) (file-readable? . bl50f8) (file-regular? . bl50f7) (file-symbolic-link? . bl50f6) (file-directory? . bl50f5) (create-symbolic-link . bl50f4) (rename-file . bl50f3) (delete-directory . bl50f2) (create-directory . bl50f1) (create-mosh-cache-dir . bl50f0) (get-environment-variables . bl50ef) (current-exception-handler . bl50ee) (get-environment-variable . bl50ed) (join-wraps . bl50ec) (id->real-label . bl50eb) (same-marks? . bl50ea) (same-marks*? . bl50e9) (disasm . bl50c4) (make-parameter . bl291f) (socket-port . bl50c3) (socket-shutdown . bl50c2) (socket-close . bl50c1) (socket-send . bl50c0) (socket-recv! . bl50bf) (socket-recv . bl50be) (make-server-socket . bl50bd) (make-client-socket . bl50bc) (socket-accept . bl50bb) (socket? . bl50ba) (parameterize . bl4e14)) '() values values '#f '#f '#f '#f)))
(begin (set! bl4c7c@ref (unspecified)) (set! bl4c7e@x* (unspecified)) (set! bl4c80@add-library-path! (unspecified)) (set! bl4c82@parse-and-add-library-path (unspecified)) (set! bl4c84@for-each-with-index (unspecified)) (set! bl4c86@rpad (unspecified)) (set! bl4c88@condition-printer/p (unspecified)) (set! bl4c8a@record->field-alist (unspecified)) (set! bl4c8c@map-with-index (unspecified)) (set! bl4c8e@repl (unspecified)) (set! bl4c90@trace-printer (unspecified)) (set! bl4c92@command-line (unspecified)) (set! bl4c94@local-library-path (unspecified)) (set! bl4c96@load/args (unspecified)) (set! bl4c98@load (unspecified)) (set! bl4c9a@ironscheme-build (unspecified)) (set! bl4c9c@eval-top-level (unspecified)) (set! bl4c9e@compile-system-libraries (unspecified)) (set! bl4ca0@compile (unspecified)) (set! bl4ca2@compile->closure (unspecified)) (set! bl4ca4@pre-compile-r6rs-file (unspecified)) (set! bl4ca6@load-r6rs-top-level (unspecified)) (set! bl4ca8@load-r6rs-top-level-sexp (unspecified)) (set! bl4caa@prefix-inc (unspecified)) (set! bl4cac@prefix-inc! (unspecified)) (set! bl4c7c@ref (lambda (bl4ce7@rtd bl4ce8@i bl4ce9@x) (let ((bl4ced@val ((record-accessor bl4ce7@rtd bl4ce8@i) bl4ce9@x))) (if (symbol? bl4ced@val) (ungensym bl4ced@val) bl4ced@val)))) (set! bl4de3@bl4c7c@ref bl4c7c@ref) (set! bl4c7e@x* '()) (set! bl4de4@bl4c7e@x* bl4c7e@x*) (set! bl4c80@add-library-path! (lambda (bl4cef@path) (bl2cfc@bl2b38@library-path (append (bl2cfc@bl2b38@library-path) (list bl4cef@path))))) (set! bl4de5@bl4c80@add-library-path! bl4c80@add-library-path!) (set! bl4c82@parse-and-add-library-path (lambda (bl4cf1@paths bl4cf2@message) (letrec* ((bl4cf6@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((bl4cf7@t bl4cf1@paths)) (if bl4cf7@t ((lambda (bl4cf9@paths) (for-each (lambda (bl4cfb@path) (if (file-exists? bl4cfb@path) (bl4c80@add-library-path! (expand-path bl4cfb@path)) (format (current-error-port) bl4cf2@message bl4cfb@path))) (string-split bl4cf9@paths bl4cf6@separator))) bl4cf7@t) (void)))))) (set! bl4de6@bl4c82@parse-and-add-library-path bl4c82@parse-and-add-library-path) (set! bl4c84@for-each-with-index (lambda (bl4cfd@proc bl4cfe@lst) (letrec ((bl4d01@loop (lambda (bl4d03@i bl4d04@lst) (if (null? bl4d04@lst) (if '#f '#f (void)) (begin (bl4cfd@proc bl4d03@i (car bl4d04@lst)) (bl4d01@loop (+ bl4d03@i '1) (cdr bl4d04@lst))))))) (bl4d01@loop '1 bl4cfe@lst)))) (set! bl4de7@bl4c84@for-each-with-index bl4c84@for-each-with-index) (set! bl4c86@rpad (lambda (bl4d07@str bl4d08@pad bl4d09@n) (let ((bl4d0d@rest (- bl4d09@n (string-length (format '"~a" bl4d07@str))))) (let bl4d13@loop ((bl4d0f@rest bl4d0d@rest) (bl4d10@ret (format '"~a" bl4d07@str))) (if (<= bl4d0f@rest '0) bl4d10@ret (bl4d13@loop (- bl4d0f@rest '1) (string-append bl4d10@ret bl4d08@pad))))))) (set! bl4de8@bl4c86@rpad bl4c86@rpad) (set! bl4c88@condition-printer/p (lambda (bl4d15@e bl4d16@port) (letrec* ((bl4d1a@max-condition-len (apply max (map (lambda (bl4d2b@c) (string-length (symbol->string (record-type-name (record-rtd bl4d2b@c))))) (simple-conditions bl4d15@e))))) (begin (display '" Condition components:\n" bl4d16@port) (bl4c84@for-each-with-index (lambda (bl4d1b@i bl4d1c@x) (let ((bl4d1f@rtd (record-rtd bl4d1c@x)) (bl4d20@fields-alist (bl4c8a@record->field-alist bl4d1c@x))) (begin (format bl4d16@port '" ~d. ~a" bl4d1b@i (bl4c86@rpad (symbol->string (record-type-name bl4d1f@rtd)) '" " bl4d1a@max-condition-len)) (if (null? bl4d20@fields-alist) (newline bl4d16@port) (void)) (let bl4d27@loop ((bl4d23@first '#t) (bl4d24@fields-alist bl4d20@fields-alist)) (if (null? bl4d24@fields-alist) '() (let ((bl4d29@field (car bl4d24@fields-alist))) (begin (if (not bl4d23@first) (display (bl4c86@rpad '"" '" " (+ '4 bl4d1a@max-condition-len)) bl4d16@port) (void)) (display '"       " bl4d16@port) (display (car bl4d29@field) bl4d16@port) (display '": " bl4d16@port) (write (cdr bl4d29@field) bl4d16@port) (newline bl4d16@port) (bl4d27@loop '#f (cdr bl4d24@fields-alist))))))))) (simple-conditions bl4d15@e)))))) (set! bl4de9@bl4c88@condition-printer/p bl4c88@condition-printer/p) (set! bl4c8a@record->field-alist (lambda (bl4d2d@r) (letrec* ((bl4d30@ref (lambda (bl4d3b@rtd bl4d3c@i bl4d3d@x) (let ((bl4d41@val ((record-accessor bl4d3b@rtd bl4d3c@i) bl4d3d@x))) (if (symbol? bl4d41@val) (ungensym bl4d41@val) bl4d41@val))))) (let bl4d35@loop ((bl4d31@ret '()) (bl4d32@rtd (record-rtd bl4d2d@r))) (if bl4d32@rtd (bl4d35@loop (append bl4d31@ret (bl4c8c@map-with-index (lambda (bl4d37@i bl4d38@field) (cons bl4d38@field (bl4d30@ref bl4d32@rtd bl4d37@i bl4d2d@r))) (vector->list (record-type-field-names bl4d32@rtd)))) (record-type-parent bl4d32@rtd)) bl4d31@ret))))) (set! bl4dea@bl4c8a@record->field-alist bl4c8a@record->field-alist) (set! bl4c8c@map-with-index (lambda (bl4d43@proc bl4d44@lst) (let bl4d4d@loop ((bl4d47@i '0) (bl4d48@lst bl4d44@lst) (bl4d49@ret '())) (if (null? bl4d48@lst) (reverse bl4d49@ret) (bl4d4d@loop (+ bl4d47@i '1) (cdr bl4d48@lst) (cons (bl4d43@proc bl4d47@i (car bl4d48@lst)) bl4d49@ret)))))) (set! bl4deb@bl4c8c@map-with-index bl4c8c@map-with-index) (set! bl4c8e@repl (lambda bl4d4f@x (letrec* ((bl4d52@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (bl4d55@bl4d53) (lambda () (with-exception-handler (lambda (bl4d57@e) ((call/cc (lambda (bl4d59@bl4d54) (bl4d55@bl4d53 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? bl4d57@e) (bl4c88@condition-printer/p bl4d57@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" bl4d57@e))) (bl4d59@bl4d54 (lambda () (raise-continuable bl4d57@e)))))))))) (lambda () (let bl4d5f@loop ((bl4d5b@line (get-line (current-input-port))) (bl4d5c@accum '"")) (letrec* ((bl4d62@parentheses-ok? (lambda (bl4d6d@text) (let bl4d75@loop ((bl4d6f@chars (string->list bl4d6d@text)) (bl4d70@p0 '0) (bl4d71@p1 '0)) (if (null? bl4d6f@chars) (= '0 bl4d70@p0 bl4d71@p1) (let ((bl4d77@t (car bl4d6f@chars))) (if (memv bl4d77@t '(#\()) (bl4d75@loop (cdr bl4d6f@chars) (+ bl4d70@p0 '1) bl4d71@p1) (if (memv bl4d77@t '(#\))) (bl4d75@loop (cdr bl4d6f@chars) (- bl4d70@p0 '1) bl4d71@p1) (if (memv bl4d77@t '(#\[)) (bl4d75@loop (cdr bl4d6f@chars) bl4d70@p0 (+ bl4d71@p1 '1)) (if (memv bl4d77@t '(#\])) (bl4d75@loop (cdr bl4d6f@chars) bl4d70@p0 (- bl4d71@p1 '1)) (bl4d75@loop (cdr bl4d6f@chars) bl4d70@p0 bl4d71@p1)))))))))) (bl4d64@eval-string-print (lambda (bl4d67@text) (if (not (or (string=? '"\n" bl4d67@text) (= '0 (string-length bl4d67@text)))) (call-with-values (lambda () (bl4c9c@eval-top-level (call-with-port (open-string-input-port bl4d67@text) read))) (lambda bl4d69@out* (for-each (lambda (bl4d6b@out) (begin (write/ss bl4d6b@out) (newline))) bl4d69@out*))) (void))))) (if (eof-object? bl4d5b@line) (begin (bl4d64@eval-string-print bl4d5c@accum) (exit)) (let ((bl4d65@current (string-append bl4d5c@accum bl4d5b@line))) (if (bl4d62@parentheses-ok? bl4d65@current) (bl4d64@eval-string-print bl4d65@current) (bl4d5f@loop (get-line (current-input-port)) bl4d65@current)))))))))))) (newline) (bl4d52@rec))))) (bl4d52@rec)))) (set! bl4dec@bl4c8e@repl bl4c8e@repl) (set! bl4c90@trace-printer (bl2a42@bl2920@make-parameter write)) (set! bl4ded@bl4c90@trace-printer bl4c90@trace-printer) (set! bl4c92@command-line (bl2a42@bl2920@make-parameter (get-command-line))) (set! bl4dee@bl4c92@command-line bl4c92@command-line) (set! bl4c94@local-library-path (lambda (bl4d79@filename) (bl2cfc@bl2b38@library-path))) (set! bl4def@bl4c94@local-library-path bl4c94@local-library-path) (set! bl4c96@load/args (lambda (bl4d7b@filename . bl4d7d@args) (begin (apply bl4ca6@load-r6rs-top-level bl4d7b@filename 'load bl4d7d@args) (void)))) (set! bl4df0@bl4c96@load/args bl4c96@load/args) (set! bl4c98@load (lambda (bl4d7f@filename) (begin (apply bl4ca6@load-r6rs-top-level bl4d7f@filename 'load (bl4c92@command-line)) (void)))) (set! bl4df1@bl4c98@load bl4c98@load) (set! bl4c9a@ironscheme-build (lambda () (bl4c98@load '"ironscheme-buildscript.ss"))) (set! bl4df2@bl4c9a@ironscheme-build bl4c9a@ironscheme-build) (set! bl4c9c@eval-top-level (lambda (bl4d81@x) (bl4c59@bl31b9@eval bl4d81@x (bl4c70@bl31e7@interaction-environment)))) (set! bl4df3@bl4c9c@eval-top-level bl4c9c@eval-top-level) (set! bl4c9e@compile-system-libraries (lambda () (bl4c9c@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! bl4df4@bl4c9e@compile-system-libraries bl4c9e@compile-system-libraries) (set! bl4ca0@compile (lambda (bl4d83@filename) (bl4ca6@load-r6rs-top-level bl4d83@filename 'compile))) (set! bl4df5@bl4ca0@compile bl4ca0@compile) (set! bl4ca2@compile->closure (lambda (bl4d85@filename) (bl4ca6@load-r6rs-top-level bl4d85@filename 'closure))) (set! bl4df6@bl4ca2@compile->closure bl4ca2@compile->closure) (set! bl4ca4@pre-compile-r6rs-file (lambda (bl4d87@filename) (bl4ca6@load-r6rs-top-level bl4d87@filename 'compile))) (set! bl4df7@bl4ca4@pre-compile-r6rs-file bl4ca4@pre-compile-r6rs-file) (set! bl4ca6@load-r6rs-top-level (lambda (bl4d89@filename bl4d8a@how . bl4d8d@args) (begin (bl2cfc@bl2b38@library-path (bl4c94@local-library-path bl4d89@filename)) (let ((bl4d8f@x* (with-input-from-file bl4d89@filename (lambda () (let bl4d91@f () (let ((bl4d93@x (bl2a34@bl2904@read-annotated))) (if (eof-object? bl4d93@x) '() (cons bl4d93@x (bl4d91@f))))))))) (let ((bl4d95@t bl4d8a@how)) (if (memv bl4d95@t '(closure)) (bl4c6f@bl31e5@pre-compile-r6rs-top-level bl4d8f@x*) (if (memv bl4d95@t '(load)) (begin (bl4c92@command-line (cons bl4d89@filename (car bl4d8d@args))) (bl2a43@bl2922@mosh-cache-dir (create-mosh-cache-dir)) (if (bl2a43@bl2922@mosh-cache-dir) (gensym-prefix-set! (bl4cac@prefix-inc! (string-append (bl2a43@bl2922@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (bl4d97@file) ((call/cc (lambda (bl4d9b@bl4d99) (lambda () (with-exception-handler (lambda (bl4d9d@c) ((call/cc (lambda (bl4d9f@bl4d9a) (bl4d9b@bl4d99 (lambda () (if '#t '#t (bl4d9f@bl4d9a (lambda () (raise-continuable bl4d9d@c)))))))))) (lambda () (delete-file (string-append (bl2a43@bl2922@mosh-cache-dir) '"/" bl4d97@file))))))))) (directory-list (bl2a43@bl2922@mosh-cache-dir))) (void)) (let ((bl4da1@compiled (bl4c6e@bl31e3@compile-r6rs-top-level bl4d8f@x*))) (begin (if (and (bl2a43@bl2922@mosh-cache-dir) (not (symbol-value '%disable-acc))) (bl2d00@bl2b40@serialize-all bl2a3d@bl2916@serialize-library bl2a99@bl2a52@compile-core-expr) (void)) (bl4da1@compiled)))) (if (memv bl4d95@t '(compile)) (begin (bl4c6e@bl31e3@compile-r6rs-top-level bl4d8f@x*) (bl2d00@bl2b40@serialize-all bl2a3d@bl2916@serialize-library bl2a99@bl2a52@compile-core-expr)) (if '#f '#f (void)))))))))) (set! bl4df8@bl4ca6@load-r6rs-top-level bl4ca6@load-r6rs-top-level) (set! bl4ca8@load-r6rs-top-level-sexp (lambda (bl4da3@import-spec bl4da4@thunk) (let ((bl4daf@bl4da8 bl2cfc@bl2b38@library-path) (bl4db0@bl4daa bl2a43@bl2922@mosh-cache-dir) (bl4db1@bl4dac (bl4c94@local-library-path '"")) (bl4db2@bl4dae (create-mosh-cache-dir))) (let ((bl4db7@swap (lambda () (begin (let ((bl4db9@t (bl4daf@bl4da8))) (begin (bl4daf@bl4da8 bl4db1@bl4dac) (set! bl4db1@bl4dac bl4db9@t))) (let ((bl4dbb@t (bl4db0@bl4daa))) (begin (bl4db0@bl4daa bl4db2@bl4dae) (set! bl4db2@bl4dae bl4dbb@t))))))) (dynamic-wind bl4db7@swap (lambda () (begin (if (bl2a43@bl2922@mosh-cache-dir) (gensym-prefix-set! (bl4cac@prefix-inc! (string-append (bl2a43@bl2922@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((bl4dc1@bl4dbe bl4c92@command-line) (bl4dc2@bl4dc0 '())) (let ((bl4dc5@swap (lambda () (let ((bl4dc7@t (bl4dc1@bl4dbe))) (begin (bl4dc1@bl4dbe bl4dc2@bl4dc0) (set! bl4dc2@bl4dc0 bl4dc7@t)))))) (dynamic-wind bl4dc5@swap (lambda () ((bl4c6e@bl31e3@compile-r6rs-top-level (list (cons 'import bl4da3@import-spec) (list bl4da4@thunk))))) bl4dc5@swap))))) bl4db7@swap))))) (set! bl4df9@bl4ca8@load-r6rs-top-level-sexp bl4ca8@load-r6rs-top-level-sexp) (set! bl4caa@prefix-inc (lambda (bl4dc9@prefix-string) (let ((bl4dcb@prefix (symbol->string bl4dc9@prefix-string))) (let ((bl4dcd@len (string-length bl4dcb@prefix))) (let bl4dd5@loop ((bl4dcf@i (- bl4dcd@len '1)) (bl4dd0@carry? '#t) (bl4dd1@accum '())) (if (< bl4dcf@i '0) (string->symbol (list->string (if bl4dd0@carry? (cons '#\a bl4dd1@accum) bl4dd1@accum))) (if bl4dd0@carry? (let ((bl4dd7@next-integer (+ '1 (char->integer (string-ref bl4dcb@prefix bl4dcf@i))))) (if (= bl4dd7@next-integer '123) (bl4dd5@loop (- bl4dcf@i '1) '#f (cons '#\A bl4dd1@accum)) (if (= bl4dd7@next-integer '91) (bl4dd5@loop (- bl4dcf@i '1) '#t (cons '#\a bl4dd1@accum)) (bl4dd5@loop (- bl4dcf@i '1) '#f (cons (integer->char bl4dd7@next-integer) bl4dd1@accum))))) (bl4dd5@loop (- bl4dcf@i '1) '#f (cons (string-ref bl4dcb@prefix bl4dcf@i) bl4dd1@accum))))))))) (set! bl4dfa@bl4caa@prefix-inc bl4caa@prefix-inc) (set! bl4cac@prefix-inc! (lambda (bl4dd9@file) (begin (if (not (file-exists? bl4dd9@file)) (call-with-output-file bl4dd9@file (lambda (bl4ddb@port) (write 'd bl4ddb@port))) (void)) (let ((bl4ddd@prefix (call-with-input-file bl4dd9@file read))) (if (main-vm?) (let ((bl4ddf@next-prefix (bl4caa@prefix-inc bl4ddd@prefix))) (begin (call-with-port (open-file-output-port bl4dd9@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (bl4de1@port) (write bl4ddf@next-prefix bl4de1@port))) bl4ddd@prefix)) bl4ddd@prefix))))) (set! bl4dfb@bl4cac@prefix-inc! bl4cac@prefix-inc!) (begin (bl2d01@bl2b42@current-precompiled-library-loader bl2a3e@bl2918@load-serialized-library) (set-symbol-value! 'load bl4c98@load) (set-symbol-value! 'pre-compile-r6rs-file bl4ca4@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs bl4c9c@eval-top-level) (set-symbol-value! 'int-env-syms bl4c50@bl31a7@interaction-environment-symbols) (set-symbol-value! 'expanded2core bl2a98@bl2a50@expanded->core) (set-symbol-value! 'trace-printer bl4c90@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (bl4cad@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list bl4cad@c))))) (bl4c82@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (bl4c82@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (bl4c80@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (bl4c80@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (bl4c80@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((bl4caf@prefix (lambda (bl4cb1@ext bl4cb2@ls) (append (map (lambda (bl4cb5@x) (string-append bl4cb1@ext bl4cb5@x)) bl4cb2@ls) bl4cb2@ls)))) (bl2cfd@bl2b3a@library-extensions (bl4caf@prefix '".mosh" (bl2cfd@bl2b3a@library-extensions)))) (current-exception-handler (lambda (bl4cb7@c) (begin (if (condition? bl4cb7@c) (bl4c88@condition-printer/p bl4cb7@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" bl4cb7@c)) bl4cb7@c))) (if ((call/cc (lambda (bl4cbb@bl4cb9) (lambda () (with-exception-handler (lambda (bl4cbd@c) ((call/cc (lambda (bl4cbf@bl4cba) (bl4cbb@bl4cb9 (lambda () (if '#t '#f (bl4cbf@bl4cba (lambda () (raise-continuable bl4cbd@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (bl4ca8@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (bl4c92@command-line)) (let ((bl4cc9@bl4cc2 bl4c92@command-line) (bl4cca@bl4cc4 bl2a43@bl2922@mosh-cache-dir) (bl4ccb@bl4cc6 '()) (bl4ccc@bl4cc8 (create-mosh-cache-dir))) (let ((bl4cd1@swap (lambda () (begin (let ((bl4cd3@t (bl4cc9@bl4cc2))) (begin (bl4cc9@bl4cc2 bl4ccb@bl4cc6) (set! bl4ccb@bl4cc6 bl4cd3@t))) (let ((bl4cd5@t (bl4cca@bl4cc4))) (begin (bl4cca@bl4cc4 bl4ccc@bl4cc8) (set! bl4ccc@bl4cc8 bl4cd5@t))))))) (dynamic-wind bl4cd1@swap (lambda () (begin (if (bl2a43@bl2922@mosh-cache-dir) (gensym-prefix-set! (bl4cac@prefix-inc! (string-append (bl2a43@bl2922@mosh-cache-dir) '"/prefix.txt"))) (void)) (bl4c8e@repl))) bl4cd1@swap))) (begin (bl2cfc@bl2b38@library-path (bl4c94@local-library-path (car (bl4c92@command-line)))) (set! bl4c7e@x* (with-input-from-file (car (bl4c92@command-line)) (lambda () (let bl4cd7@f () (let ((bl4cd9@x (bl2a34@bl2904@read-annotated))) (if (eof-object? bl4cd9@x) '() (cons bl4cd9@x (bl4cd7@f)))))))) (bl4c92@command-line (cons (car (bl4c92@command-line)) (cdr (bl4c92@command-line)))) (bl2a43@bl2922@mosh-cache-dir (create-mosh-cache-dir)) (if (bl2a43@bl2922@mosh-cache-dir) (gensym-prefix-set! (bl4cac@prefix-inc! (string-append (bl2a43@bl2922@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (bl4cdb@file) ((call/cc (lambda (bl4cdf@bl4cdd) (lambda () (with-exception-handler (lambda (bl4ce1@c) ((call/cc (lambda (bl4ce3@bl4cde) (bl4cdf@bl4cdd (lambda () (if '#t '#t (bl4ce3@bl4cde (lambda () (raise-continuable bl4ce1@c)))))))))) (lambda () (delete-file (string-append (bl2a43@bl2922@mosh-cache-dir) '"/" bl4cdb@file))))))))) (directory-list (bl2a43@bl2922@mosh-cache-dir))) (void)) (let ((bl4ce5@compiled (bl4c6e@bl31e3@compile-r6rs-top-level bl4c7e@x*))) (begin (if (and (bl2a43@bl2922@mosh-cache-dir) (not (symbol-value '%disable-acc))) (bl2d00@bl2b40@serialize-all bl2a3d@bl2916@serialize-library bl2a99@bl2a52@compile-core-expr) (void)) (bl4ce5@compiled))))))))
