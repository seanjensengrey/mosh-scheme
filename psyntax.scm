;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! dL581@library-file-path->cache-path (unspecified)) (set! dL583@read-annotated (unspecified)) (set! dL585@annotation-stripped (unspecified)) (set! dL587@annotation? (unspecified)) (set! dL589@annotation-source (unspecified)) (set! dL58b@annotation-expression (unspecified)) (set! dL58d@scm->fasl (unspecified)) (set! dL58f@fasl-save (unspecified)) (set! dL591@fasl-load (unspecified)) (set! dL593@verbose? (unspecified)) (set! dL595@serialize-library (unspecified)) (set! dL597@load-serialized-library (unspecified)) (set! dL599@make-record-printer (unspecified)) (set! dL59b@compile-core (unspecified)) (set! dL59d@read-library-source-file (unspecified)) (set! dL59f@make-parameter (unspecified)) (set! dL5a1@mosh-cache-dir (unspecified)) (set! dL637@file-options-spec (unspecified)) (set! dL581@library-file-path->cache-path (lambda (dL638@x) (call-with-values (lambda () (open-string-output-port)) (lambda (dL63e@dL63b dL63f@dL63d) (let ((dL642@extract dL63f@dL63d) (dL643@p dL63e@dL63b)) (letrec* ((dL647@display-hex (lambda (dL650@n) (if (<= '0 dL650@n '9) (display dL650@n dL643@p) (display (integer->char (+ (char->integer '#\a) (- dL650@n '10))) dL643@p))))) (begin (let dL64a@f ((dL648@ls (string-split dL638@x '#\/))) (if (not (null? dL648@ls)) (begin (display '"_" dL643@p) (for-each (lambda (dL64c@c) (if (or (char<=? '#\a dL64c@c '#\z) (char<=? '#\A dL64c@c '#\Z) (char<=? '#\0 dL64c@c '#\9) (memv dL64c@c '(#\- #\. #\_ #\~))) (display dL64c@c dL643@p) (begin (display '"%" dL643@p) (let ((dL64e@n (char->integer dL64c@c))) (begin (dL647@display-hex (quotient dL64e@n '16)) (dL647@display-hex (remainder dL64e@n '16))))))) (string->list (car dL648@ls))) (dL64a@f (cdr dL648@ls))) (void))) (dL642@extract)))))))) (set! dL6b2@dL581@library-file-path->cache-path dL581@library-file-path->cache-path) (set! dL583@read-annotated read) (set! dL6b3@dL583@read-annotated dL583@read-annotated) (set! dL585@annotation-stripped (lambda (dL652@x) (dL58b@annotation-expression dL652@x))) (set! dL6b4@dL585@annotation-stripped dL585@annotation-stripped) (set! dL587@annotation? (lambda (dL654@x) (source-info dL654@x))) (set! dL6b5@dL587@annotation? dL587@annotation?) (set! dL589@annotation-source (lambda (dL656@x) (source-info dL656@x))) (set! dL6b6@dL589@annotation-source dL589@annotation-source) (set! dL58b@annotation-expression (lambda (dL658@x) (if (pair? dL658@x) (cons (car dL658@x) (cdr dL658@x)) (if (procedure? dL658@x) (set-source-info! dL658@x '#f) dL658@x)))) (set! dL6b7@dL58b@annotation-expression dL58b@annotation-expression) (set! dL58d@scm->fasl (lambda (dL65a@filename) (string-append (dL5a1@mosh-cache-dir) '"/" (dL581@library-file-path->cache-path dL65a@filename) '".mosh-fasl"))) (set! dL6b8@dL58d@scm->fasl dL58d@scm->fasl) (set! dL58f@fasl-save (lambda (dL65c@filename dL65d@obj) (call-with-port (open-file-output-port dL65c@filename) (lambda (dL660@port) ((symbol-value 'fasl-write!) dL65d@obj dL660@port))))) (set! dL6b9@dL58f@fasl-save dL58f@fasl-save) (set! dL591@fasl-load (lambda (dL662@filename) (call-with-port (open-file-input-port dL662@filename) (symbol-value 'fasl-read!)))) (set! dL6ba@dL591@fasl-load dL591@fasl-load) (set! dL593@verbose? (symbol-value '%verbose)) (set! dL6bb@dL593@verbose? dL593@verbose?) (set! dL595@serialize-library (lambda (dL664@filename dL665@obj) (begin (if dL593@verbose? (format (current-error-port) '"serialize-library ~a\n..." dL664@filename) (void)) (let ((dL668@expanded2core (symbol-value 'expanded2core))) (let ((dL66a@compile (symbol-value 'compile-w/o-halt))) (let ((dL66c@code dL665@obj)) (let ((dL66e@pivot (cddddr (cddddr dL66c@code)))) (let ((dL670@visit (dL66a@compile (dL668@expanded2core (car dL66e@pivot))))) (begin (set-car! dL66e@pivot dL670@visit) (let ((dL672@pivot (cdr dL66e@pivot))) (let ((dL674@invoke (dL66a@compile (dL668@expanded2core (car dL672@pivot))))) (set-car! dL672@pivot dL674@invoke))))))))) (let ((dL676@fasl-file (dL58d@scm->fasl dL664@filename))) (begin (if (file-exists? dL676@fasl-file) (delete-file dL676@fasl-file) (void)) ((call/cc (lambda (dL67a@dL678) (lambda () (with-exception-handler (lambda (dL67c@c) ((call/cc (lambda (dL67e@dL679) (dL67a@dL678 (lambda () (if '#t (begin (if dL593@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" dL664@filename) (void)) (if (file-exists? dL676@fasl-file) (delete-file dL676@fasl-file) (void)) '#f) (dL67e@dL679 (lambda () (raise-continuable dL67c@c)))))))))) (lambda () (dL58f@fasl-save dL676@fasl-file dL665@obj)))))))))))) (set! dL6bc@dL595@serialize-library dL595@serialize-library) (set! dL597@load-serialized-library (lambda (dL680@filename dL681@obj) (and (dL5a1@mosh-cache-dir) (let ((dL684@fasl-file (dL58d@scm->fasl dL680@filename))) (if (and (file-exists? dL684@fasl-file) ((symbol-value 'file-newer?) dL684@fasl-file dL680@filename)) (let ((dL686@expanded2core (symbol-value 'expanded2core))) (let ((dL688@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((dL68a@code (dL591@fasl-load dL684@fasl-file))) (let ((dL68c@pivot (cddddr (cddddr dL68a@code)))) (let ((dL68e@visit (car dL68c@pivot))) (let ((dL690@visit-proc (lambda () (dL688@eval-compiled-core dL68e@visit)))) (begin (set-car! dL68c@pivot dL690@visit-proc) (let ((dL692@pivot (cdr dL68c@pivot))) (let ((dL694@invoke (car dL692@pivot))) (begin (set-car! dL692@pivot (lambda () (dL688@eval-compiled-core dL694@invoke))) (apply dL681@obj dL68a@code))))))))))) '#f))))) (set! dL6bd@dL597@load-serialized-library dL597@load-serialized-library) (set! dL599@make-record-printer (lambda (dL696@name dL697@printer) (lambda dL69a@x (begin (display '"record printer") (for-each display dL69a@x))))) (set! dL6be@dL599@make-record-printer dL599@make-record-printer) (set! dL59b@compile-core (lambda dL69c@x (apply error 'comile-core '"not implementated" dL69c@x))) (set! dL6bf@dL59b@compile-core dL59b@compile-core) (set! dL59d@read-library-source-file (lambda (dL69e@file-name) (with-input-from-file dL69e@file-name dL583@read-annotated))) (set! dL6c0@dL59d@read-library-source-file dL59d@read-library-source-file) (set! dL59f@make-parameter (lambda dL6ae (let ((dL6af (length dL6ae))) (if (= dL6af '1) (apply (lambda (dL6a0@x) (dL59f@make-parameter dL6a0@x (lambda (dL6a2@x) dL6a2@x))) dL6ae) (if (= dL6af '2) (apply (lambda (dL6a4@x dL6a5@fender) (let ((dL6a8@x (dL6a5@fender dL6a4@x))) (lambda dL6ac (let ((dL6ad (length dL6ac))) (if (= dL6ad '0) (apply (lambda () dL6a8@x) dL6ac) (if (= dL6ad '1) (apply (lambda (dL6aa@v) (set! dL6a8@x (dL6a5@fender dL6aa@v))) dL6ac) (error 'apply '"invalid arg count"))))))) dL6ae) (error 'apply '"invalid arg count")))))) (set! dL6c1@dL59f@make-parameter dL59f@make-parameter) (set! dL5a1@mosh-cache-dir (dL59f@make-parameter '#f)) (set! dL6c2@dL5a1@mosh-cache-dir dL5a1@mosh-cache-dir) (set! dL637@file-options-spec (lambda (dL6b0@x) dL6b0@x)) (set! dL6c3@dL637@file-options-spec dL637@file-options-spec) (void))
(begin (set! dL6c9@current-primitive-locations (unspecified)) (set! dL6cb@mutable? (unspecified)) (set! dL6cd@rewriter (unspecified)) (set! dL6cf@expanded->core (unspecified)) (set! dL6d1@compile-core-expr (unspecified)) (set! dL6d3@pretty-print (unspecified)) (set! dL6d5@compile-core-expr-to-port (unspecified)) (set! dL6c9@current-primitive-locations (dL6c1@dL59f@make-parameter (lambda (dL6d6@x) '#f) (lambda (dL6d8@p) dL6d8@p))) (set! dL714@dL6c9@current-primitive-locations dL6c9@current-primitive-locations) (set! dL6cb@mutable? (lambda (dL6da@x) (or (pair? dL6da@x) (vector? dL6da@x) (hashtable? dL6da@x)))) (set! dL715@dL6cb@mutable? dL6cb@mutable?) (set! dL6cd@rewriter (lambda (dL6dc@quote-hack?) (letrec* ((dL6df@f (lambda (dL6e0@x) (if (pair? dL6e0@x) (let ((dL6e2@t (car dL6e0@x))) (if (memv dL6e2@t '(quote)) (if (and dL6dc@quote-hack? (dL6cb@mutable? (cadr dL6e0@x))) (let ((dL6e4@g (gensym))) (begin (set-symbol-value! dL6e4@g (cadr dL6e0@x)) dL6e4@g)) dL6e0@x) (if (memv dL6e2@t '(case-lambda)) (cons 'case-lambda (map (lambda (dL6e6@x) (cons (car dL6e6@x) (map dL6df@f (cdr dL6e6@x)))) (cdr dL6e0@x))) (if (memv dL6e2@t '(lambda)) (cons* 'lambda (cadr dL6e0@x) (map dL6df@f (cddr dL6e0@x))) (if (memv dL6e2@t '(letrec)) (let ((dL6e8@bindings (cadr dL6e0@x)) (dL6e9@body* (cddr dL6e0@x))) (let ((dL6ec@lhs* (map car dL6e8@bindings)) (dL6ed@rhs* (map cadr dL6e8@bindings))) (cons* 'letrec (map list dL6ec@lhs* (map dL6df@f dL6ed@rhs*)) (map dL6df@f dL6e9@body*)))) (if (memv dL6e2@t '(letrec*)) (let ((dL6f0@bindings (cadr dL6e0@x)) (dL6f1@body* (cddr dL6e0@x))) (let ((dL6f4@lhs* (map car dL6f0@bindings)) (dL6f5@rhs* (map cadr dL6f0@bindings))) (cons* 'letrec* (map list dL6f4@lhs* (map dL6df@f dL6f5@rhs*)) (map dL6df@f dL6f1@body*)))) (if (memv dL6e2@t '(library-letrec*)) (let ((dL6f8@name (cadr dL6e0@x)) (dL6f9@x (cdr dL6e0@x))) (let ((dL6fc@bindings (cadr dL6f9@x)) (dL6fd@body* (cddr dL6f9@x))) (let ((dL700@lhs* (map car dL6fc@bindings)) (dL701@lhs** (map cadr dL6fc@bindings)) (dL702@rhs* (map caddr dL6fc@bindings))) (cons* 'library-letrec* dL6f8@name (map list dL700@lhs* dL701@lhs** (map dL6df@f dL702@rhs*)) (map dL6df@f dL6fd@body*))))) (if (memv dL6e2@t '(begin)) (cons 'begin (map dL6df@f (cdr dL6e0@x))) (if (memv dL6e2@t '(set!)) (list 'set! (cadr dL6e0@x) (dL6df@f (caddr dL6e0@x))) (if (memv dL6e2@t '(primitive)) (let ((dL706@op (cadr dL6e0@x))) (let ((dL708@t ((dL6c9@current-primitive-locations) dL706@op))) (if dL708@t ((lambda (dL70a@loc) dL70a@loc) dL708@t) dL706@op))) (if (memv dL6e2@t '(define)) dL6e0@x (if (list? dL6e0@x) (map dL6df@f dL6e0@x) (error 'rewrite '"invalid form ~s ~s" dL6e0@x (list? dL6e0@x)))))))))))))) dL6e0@x)))) dL6df@f))) (set! dL716@dL6cd@rewriter dL6cd@rewriter) (set! dL6cf@expanded->core (lambda (dL70c@x) ((dL6cd@rewriter '#f) dL70c@x))) (set! dL717@dL6cf@expanded->core dL6cf@expanded->core) (set! dL6d1@compile-core-expr (lambda (dL70e@x) ((dL6cd@rewriter '#f) dL70e@x))) (set! dL718@dL6d1@compile-core-expr dL6d1@compile-core-expr) (set! dL6d3@pretty-print write) (set! dL719@dL6d3@pretty-print dL6d3@pretty-print) (set! dL6d5@compile-core-expr-to-port (lambda (dL710@x dL711@p) (dL6d3@pretty-print ((dL6cd@rewriter '#f) dL710@x) dL711@p))) (set! dL71a@dL6d5@compile-core-expr-to-port dL6d5@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! dL769@make-collection (unspecified)) (set! dL76b@current-library-collection (unspecified)) (set! dL76d@rp (unspecified)) (set! dL777@library? (unspecified)) (set! dL779@library-id (unspecified)) (set! dL77b@set-library-id! (unspecified)) (set! dL77d@library-name (unspecified)) (set! dL77f@set-library-name! (unspecified)) (set! dL781@library-version (unspecified)) (set! dL783@set-library-version! (unspecified)) (set! dL785@library-imp* (unspecified)) (set! dL787@set-library-imp*! (unspecified)) (set! dL789@library-vis* (unspecified)) (set! dL78b@set-library-vis*! (unspecified)) (set! dL78d@library-inv* (unspecified)) (set! dL78f@set-library-inv*! (unspecified)) (set! dL791@library-subst (unspecified)) (set! dL793@set-library-subst! (unspecified)) (set! dL795@library-env (unspecified)) (set! dL797@set-library-env! (unspecified)) (set! dL799@library-visit-state (unspecified)) (set! dL79b@set-library-visit-state! (unspecified)) (set! dL79d@library-invoke-state (unspecified)) (set! dL79f@set-library-invoke-state! (unspecified)) (set! dL7a1@library-visit-code (unspecified)) (set! dL7a3@set-library-visit-code! (unspecified)) (set! dL7a5@library-invoke-code (unspecified)) (set! dL7a7@set-library-invoke-code! (unspecified)) (set! dL7a9@library-visible? (unspecified)) (set! dL7ab@set-library-visible?! (unspecified)) (set! dL7ad@library-source-file-name (unspecified)) (set! dL7af@set-library-source-file-name! (unspecified)) (set! dL7b1@dummy (unspecified)) (set! dL7b3@find-dependencies (unspecified)) (set! dL7b5@find-library-by (unspecified)) (set! dL7b7@library-path (unspecified)) (set! dL7b9@library-extensions (unspecified)) (set! dL7bb@library-name->file-name (unspecified)) (set! dL7bd@file-locator (unspecified)) (set! dL7bf@serialize-all (unspecified)) (set! dL7c1@current-precompiled-library-loader (unspecified)) (set! dL7c3@try-load-from-file (unspecified)) (set! dL7c5@library-loader (unspecified)) (set! dL7c7@current-library-expander (unspecified)) (set! dL7c9@external-pending-libraries (unspecified)) (set! dL7cb@find-external-library (unspecified)) (set! dL7cd@find-library-by-name (unspecified)) (set! dL7cf@library-exists? (unspecified)) (set! dL7d1@find-library-by-spec/die (unspecified)) (set! dL7d3@label->binding-table (unspecified)) (set! dL7d5@install-library-record (unspecified)) (set! dL7d7@install-library (unspecified)) (set! dL7d9@imported-label->binding (unspecified)) (set! dL7db@invoke-library (unspecified)) (set! dL7dd@visit-library (unspecified)) (set! dL7df@invoke-library-by-spec (unspecified)) (set! dL7e1@installed-libraries (unspecified)) (set! dL7e3@library-spec (unspecified)) (set! dL769@make-collection (lambda () (let ((dL7e4@set '())) (letrec* ((dL7e7@set-cons (lambda (dL7ec@x dL7ed@ls) (if (memq dL7ec@x dL7ed@ls) dL7ed@ls (cons dL7ec@x dL7ed@ls))))) (lambda dL7ea (let ((dL7eb (length dL7ea))) (if (= dL7eb '0) (apply (lambda () dL7e4@set) dL7ea) (if (= dL7eb '1) (apply (lambda (dL7e8@x) (set! dL7e4@set (dL7e7@set-cons dL7e8@x dL7e4@set))) dL7ea) (error 'apply '"invalid arg count"))))))))) (set! dL958@dL769@make-collection dL769@make-collection) (set! dL76b@current-library-collection (dL6c1@dL59f@make-parameter (dL769@make-collection) (lambda (dL7f0@x) (begin (if (not (procedure? dL7f0@x)) (assertion-violation 'current-library-collection '"not a procedure" dL7f0@x) (void)) dL7f0@x)))) (set! dL959@dL76b@current-library-collection dL76b@current-library-collection) (set! dL76d@rp (dL6be@dL599@make-record-printer 'library (lambda (dL7f2@x dL7f3@p dL7f4@wr) (begin (if (not (dL777@library? dL7f2@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (dL781@library-version dL7f2@x)) (dL77d@library-name dL7f2@x) (append (dL77d@library-name dL7f2@x) (list (dL781@library-version dL7f2@x))))) dL7f3@p))))) (set! dL95a@dL76d@rp dL76d@rp) (set! dL777@library? (lambda (dL7f8@x) (and (simple-struct? dL7f8@x) (eq? (simple-struct-name dL7f8@x) 'library)))) (set! dL95b@dL777@library? dL777@library?) (set! dL779@library-id (lambda (dL7fa@x) (simple-struct-ref dL7fa@x '0))) (set! dL95c@dL779@library-id dL779@library-id) (set! dL77b@set-library-id! (lambda (dL7fc@x dL7fd@val) (simple-struct-set! dL7fc@x '0 dL7fd@val))) (set! dL95d@dL77b@set-library-id! dL77b@set-library-id!) (set! dL77d@library-name (lambda (dL800@x) (simple-struct-ref dL800@x '1))) (set! dL95e@dL77d@library-name dL77d@library-name) (set! dL77f@set-library-name! (lambda (dL802@x dL803@val) (simple-struct-set! dL802@x '1 dL803@val))) (set! dL95f@dL77f@set-library-name! dL77f@set-library-name!) (set! dL781@library-version (lambda (dL806@x) (simple-struct-ref dL806@x '2))) (set! dL960@dL781@library-version dL781@library-version) (set! dL783@set-library-version! (lambda (dL808@x dL809@val) (simple-struct-set! dL808@x '2 dL809@val))) (set! dL961@dL783@set-library-version! dL783@set-library-version!) (set! dL785@library-imp* (lambda (dL80c@x) (simple-struct-ref dL80c@x '3))) (set! dL962@dL785@library-imp* dL785@library-imp*) (set! dL787@set-library-imp*! (lambda (dL80e@x dL80f@val) (simple-struct-set! dL80e@x '3 dL80f@val))) (set! dL963@dL787@set-library-imp*! dL787@set-library-imp*!) (set! dL789@library-vis* (lambda (dL812@x) (simple-struct-ref dL812@x '4))) (set! dL964@dL789@library-vis* dL789@library-vis*) (set! dL78b@set-library-vis*! (lambda (dL814@x dL815@val) (simple-struct-set! dL814@x '4 dL815@val))) (set! dL965@dL78b@set-library-vis*! dL78b@set-library-vis*!) (set! dL78d@library-inv* (lambda (dL818@x) (simple-struct-ref dL818@x '5))) (set! dL966@dL78d@library-inv* dL78d@library-inv*) (set! dL78f@set-library-inv*! (lambda (dL81a@x dL81b@val) (simple-struct-set! dL81a@x '5 dL81b@val))) (set! dL967@dL78f@set-library-inv*! dL78f@set-library-inv*!) (set! dL791@library-subst (lambda (dL81e@x) (simple-struct-ref dL81e@x '6))) (set! dL968@dL791@library-subst dL791@library-subst) (set! dL793@set-library-subst! (lambda (dL820@x dL821@val) (simple-struct-set! dL820@x '6 dL821@val))) (set! dL969@dL793@set-library-subst! dL793@set-library-subst!) (set! dL795@library-env (lambda (dL824@x) (simple-struct-ref dL824@x '7))) (set! dL96a@dL795@library-env dL795@library-env) (set! dL797@set-library-env! (lambda (dL826@x dL827@val) (simple-struct-set! dL826@x '7 dL827@val))) (set! dL96b@dL797@set-library-env! dL797@set-library-env!) (set! dL799@library-visit-state (lambda (dL82a@x) (simple-struct-ref dL82a@x '8))) (set! dL96c@dL799@library-visit-state dL799@library-visit-state) (set! dL79b@set-library-visit-state! (lambda (dL82c@x dL82d@val) (simple-struct-set! dL82c@x '8 dL82d@val))) (set! dL96d@dL79b@set-library-visit-state! dL79b@set-library-visit-state!) (set! dL79d@library-invoke-state (lambda (dL830@x) (simple-struct-ref dL830@x '9))) (set! dL96e@dL79d@library-invoke-state dL79d@library-invoke-state) (set! dL79f@set-library-invoke-state! (lambda (dL832@x dL833@val) (simple-struct-set! dL832@x '9 dL833@val))) (set! dL96f@dL79f@set-library-invoke-state! dL79f@set-library-invoke-state!) (set! dL7a1@library-visit-code (lambda (dL836@x) (simple-struct-ref dL836@x '10))) (set! dL970@dL7a1@library-visit-code dL7a1@library-visit-code) (set! dL7a3@set-library-visit-code! (lambda (dL838@x dL839@val) (simple-struct-set! dL838@x '10 dL839@val))) (set! dL971@dL7a3@set-library-visit-code! dL7a3@set-library-visit-code!) (set! dL7a5@library-invoke-code (lambda (dL83c@x) (simple-struct-ref dL83c@x '11))) (set! dL972@dL7a5@library-invoke-code dL7a5@library-invoke-code) (set! dL7a7@set-library-invoke-code! (lambda (dL83e@x dL83f@val) (simple-struct-set! dL83e@x '11 dL83f@val))) (set! dL973@dL7a7@set-library-invoke-code! dL7a7@set-library-invoke-code!) (set! dL7a9@library-visible? (lambda (dL842@x) (simple-struct-ref dL842@x '12))) (set! dL974@dL7a9@library-visible? dL7a9@library-visible?) (set! dL7ab@set-library-visible?! (lambda (dL844@x dL845@val) (simple-struct-set! dL844@x '12 dL845@val))) (set! dL975@dL7ab@set-library-visible?! dL7ab@set-library-visible?!) (set! dL7ad@library-source-file-name (lambda (dL848@x) (simple-struct-ref dL848@x '13))) (set! dL976@dL7ad@library-source-file-name dL7ad@library-source-file-name) (set! dL7af@set-library-source-file-name! (lambda (dL84a@x dL84b@val) (simple-struct-set! dL84a@x '13 dL84b@val))) (set! dL977@dL7af@set-library-source-file-name! dL7af@set-library-source-file-name!) (set! dL7b1@dummy '3) (set! dL978@dL7b1@dummy dL7b1@dummy) (set! dL7b3@find-dependencies (lambda (dL84e@ls) (if (null? dL84e@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! dL979@dL7b3@find-dependencies dL7b3@find-dependencies) (set! dL7b5@find-library-by (lambda (dL850@pred) (let dL854@f ((dL852@ls ((dL76b@current-library-collection)))) (if (null? dL852@ls) '#f (if (dL850@pred (car dL852@ls)) (car dL852@ls) (dL854@f (cdr dL852@ls))))))) (set! dL97a@dL7b5@find-library-by dL7b5@find-library-by) (set! dL7b7@library-path (dL6c1@dL59f@make-parameter '(".") (lambda (dL856@x) (if (and (list? dL856@x) (for-all string? dL856@x)) (map (lambda (dL858@x) dL858@x) dL856@x) (assertion-violation 'library-path '"not a list of strings" dL856@x))))) (set! dL97b@dL7b7@library-path dL7b7@library-path) (set! dL7b9@library-extensions (dL6c1@dL59f@make-parameter '(".sls" ".ss" ".scm") (lambda (dL85a@x) (if (and (list? dL85a@x) (for-all string? dL85a@x)) (map (lambda (dL85c@x) dL85c@x) dL85a@x) (assertion-violation 'library-extensions '"not a list of strings" dL85a@x))))) (set! dL97c@dL7b9@library-extensions dL7b9@library-extensions) (set! dL7bb@library-name->file-name (lambda (dL85e@x) (call-with-values (lambda () (open-string-output-port)) (lambda (dL864@dL861 dL865@dL863) (let ((dL868@extract dL865@dL863) (dL869@p dL864@dL861)) (letrec* ((dL86d@display-hex (lambda (dL876@n) (if (<= '0 dL876@n '9) (display dL876@n dL869@p) (display (integer->char (+ (char->integer '#\a) (- dL876@n '10))) dL869@p))))) (begin (let dL870@f ((dL86e@ls dL85e@x)) (if (not (null? dL86e@ls)) (begin (display '"/" dL869@p) (for-each (lambda (dL872@c) (if (or (char<=? '#\a dL872@c '#\z) (char<=? '#\A dL872@c '#\Z) (char<=? '#\0 dL872@c '#\9) (memv dL872@c '(#\- #\. #\_ #\~))) (display dL872@c dL869@p) (begin (display '"%" dL869@p) (let ((dL874@n (char->integer dL872@c))) (begin (dL86d@display-hex (quotient dL874@n '16)) (dL86d@display-hex (remainder dL874@n '16))))))) (string->list (symbol->string (car dL86e@ls)))) (dL870@f (cdr dL86e@ls))) (void))) (dL868@extract)))))))) (set! dL97d@dL7bb@library-name->file-name dL7bb@library-name->file-name) (set! dL7bd@file-locator (dL6c1@dL59f@make-parameter (lambda (dL878@x) (let ((dL87a@str (dL7bb@library-name->file-name dL878@x))) (let dL882@f ((dL87c@ls (dL7b7@library-path)) (dL87d@exts (dL7b9@library-extensions)) (dL87e@failed-list '())) (if (null? dL87c@ls) (letrec* ((dL88c@dL887 (make-record-type-descriptor '&library-resolution &condition-rtd 'dL88a '#f '#f '#((immutable library) (immutable files)))) (dL88e@dL889 '#f) (dL890@dL888 (make-record-constructor-descriptor dL88c@dL887 &condition-rcd dL88e@dL889)) (dL893@dL886 (record-predicate dL88c@dL887)) (dL895@make-library-resolution-condition (record-constructor dL890@dL888)) (dL897@dL884 (record-accessor dL88c@dL887 '0)) (dL899@dL885 (record-accessor dL88c@dL887 '1)) (dL89b@library-resolution-condition? (condition-predicate dL88c@dL887)) (dL89d@condition-library (condition-accessor dL88c@dL887 dL897@dL884)) (dL89f@condition-files (condition-accessor dL88c@dL887 dL899@dL885))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (dL895@make-library-resolution-condition dL878@x (reverse dL87e@failed-list))))) (if (null? dL87d@exts) (dL882@f (cdr dL87c@ls) (dL7b9@library-extensions) dL87e@failed-list) (let ((dL8a0@name (string-append (car dL87c@ls) dL87a@str (car dL87d@exts)))) (if (file-exists? dL8a0@name) dL8a0@name (dL882@f dL87c@ls (cdr dL87d@exts) (cons dL8a0@name dL87e@failed-list))))))))) (lambda (dL8a2@f) (if (procedure? dL8a2@f) dL8a2@f (assertion-violation 'file-locator '"not a procedure" dL8a2@f))))) (set! dL97e@dL7bd@file-locator dL7bd@file-locator) (set! dL7bf@serialize-all (lambda (dL8a4@serialize dL8a5@compile) (letrec* ((dL8a9@library-desc (lambda (dL8ac@x) (list (dL779@library-id dL8ac@x) (dL77d@library-name dL8ac@x))))) (for-each (lambda (dL8aa@x) (if (dL7ad@library-source-file-name dL8aa@x) (dL8a4@serialize (dL7ad@library-source-file-name dL8aa@x) (list (dL779@library-id dL8aa@x) (dL77d@library-name dL8aa@x) (dL781@library-version dL8aa@x) (map dL8a9@library-desc (dL785@library-imp* dL8aa@x)) (map dL8a9@library-desc (dL789@library-vis* dL8aa@x)) (map dL8a9@library-desc (dL78d@library-inv* dL8aa@x)) (dL791@library-subst dL8aa@x) (dL795@library-env dL8aa@x) (dL8a5@compile (dL7a1@library-visit-code dL8aa@x)) (dL8a5@compile (dL7a5@library-invoke-code dL8aa@x)) (dL7a9@library-visible? dL8aa@x))) (void))) ((dL76b@current-library-collection)))))) (set! dL97f@dL7bf@serialize-all dL7bf@serialize-all) (set! dL7c1@current-precompiled-library-loader (dL6c1@dL59f@make-parameter (lambda (dL8ae@filename dL8af@sk) '#f))) (set! dL980@dL7c1@current-precompiled-library-loader dL7c1@current-precompiled-library-loader) (set! dL7c3@try-load-from-file (lambda (dL8b2@filename) ((dL7c1@current-precompiled-library-loader) dL8b2@filename (lambda dL8d8 (let ((dL8d9 (length dL8d8))) (if (= dL8d9 '11) (apply (lambda (dL8b4@id dL8b5@name dL8b6@ver dL8b7@imp* dL8b8@vis* dL8b9@inv* dL8ba@exp-subst dL8bb@exp-env dL8bc@visit-proc dL8bd@invoke-proc dL8be@visible?) (let dL8cc@f ((dL8ca@deps (append dL8b7@imp* dL8b8@vis* dL8b9@inv*))) (if (null? dL8ca@deps) (begin (dL7d7@install-library dL8b4@id dL8b5@name dL8b6@ver dL8b7@imp* dL8b8@vis* dL8b9@inv* dL8ba@exp-subst dL8bb@exp-env dL8bc@visit-proc dL8bd@invoke-proc '#f '#f dL8be@visible? '#f) '#t) (let ((dL8ce@d (car dL8ca@deps))) (let ((dL8d0@label (car dL8ce@d)) (dL8d1@dname (cadr dL8ce@d))) (let ((dL8d4@l (dL7cd@find-library-by-name dL8d1@dname))) (if (and (dL777@library? dL8d4@l) (eq? dL8d0@label (dL779@library-id dL8d4@l))) (dL8cc@f (cdr dL8ca@deps)) (begin (if dL6bb@dL593@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" dL8b5@name dL8d1@dname dL8b2@filename dL8d4@l dL8d0@label (dL779@library-id dL8d4@l)) (void)) '#f)))))))) dL8d8) (if (>= dL8d9 '0) (apply (lambda dL8d6@others '#f) dL8d8) (error 'apply '"invalid arg count")))))))) (set! dL981@dL7c3@try-load-from-file dL7c3@try-load-from-file) (set! dL7c5@library-loader (dL6c1@dL59f@make-parameter (lambda (dL8da@x) (let ((dL8dc@file-name ((dL7bd@file-locator) dL8da@x))) (if (not dL8dc@file-name) (assertion-violation '#f '"cannot file library" dL8da@x) (or (dL7c3@try-load-from-file dL8dc@file-name) ((dL7c7@current-library-expander) (dL6c0@dL59d@read-library-source-file dL8dc@file-name) dL8dc@file-name (lambda (dL8de@name) (if (not (fast-equal? dL8de@name dL8da@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (dL8e4@dL8e1 dL8e5@dL8e3) (let ((dL8e8@e dL8e5@dL8e3) (dL8e9@p dL8e4@dL8e1)) (begin (display '"expected to find library " dL8e9@p) (write dL8da@x dL8e9@p) (display '" in file " dL8e9@p) (display dL8dc@file-name dL8e9@p) (display '", found " dL8e9@p) (write dL8de@name dL8e9@p) (display '" instead" dL8e9@p) (dL8e8@e)))))) (void)))))))) (lambda (dL8ec@f) (if (procedure? dL8ec@f) dL8ec@f (assertion-violation 'library-locator '"not a procedure" dL8ec@f))))) (set! dL982@dL7c5@library-loader dL7c5@library-loader) (set! dL7c7@current-library-expander (dL6c1@dL59f@make-parameter (lambda (dL8ee@x) (assertion-violation 'library-expander '"not initialized")) (lambda (dL8f0@f) (if (procedure? dL8f0@f) dL8f0@f (assertion-violation 'library-expander '"not a procedure" dL8f0@f))))) (set! dL983@dL7c7@current-library-expander dL7c7@current-library-expander) (set! dL7c9@external-pending-libraries (dL6c1@dL59f@make-parameter '())) (set! dL984@dL7c9@external-pending-libraries dL7c9@external-pending-libraries) (set! dL7cb@find-external-library (lambda (dL8f2@name) (begin (if (member dL8f2@name (dL7c9@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" dL8f2@name) (void)) (let ((dL8f8@dL8f5 dL7c9@external-pending-libraries) (dL8f9@dL8f7 (cons dL8f2@name (dL7c9@external-pending-libraries)))) (let ((dL8fc@swap (lambda () (let ((dL8fe@t (dL8f8@dL8f5))) (begin (dL8f8@dL8f5 dL8f9@dL8f7) (set! dL8f9@dL8f7 dL8fe@t)))))) (dynamic-wind dL8fc@swap (lambda () (begin ((dL7c5@library-loader) dL8f2@name) (or (dL7b5@find-library-by (lambda (dL900@x) (fast-equal? (dL77d@library-name dL900@x) dL8f2@name))) (assertion-violation '#f '"handling external library did not yield the correct library" dL8f2@name)))) dL8fc@swap)))))) (set! dL985@dL7cb@find-external-library dL7cb@find-external-library) (set! dL7cd@find-library-by-name (lambda (dL902@name) (or (dL7b5@find-library-by (lambda (dL904@x) (fast-equal? (dL77d@library-name dL904@x) dL902@name))) (dL7cb@find-external-library dL902@name)))) (set! dL986@dL7cd@find-library-by-name dL7cd@find-library-by-name) (set! dL7cf@library-exists? (lambda (dL906@name) (and (dL7b5@find-library-by (lambda (dL908@x) (fast-equal? (dL77d@library-name dL908@x) dL906@name))) '#t))) (set! dL987@dL7cf@library-exists? dL7cf@library-exists?) (set! dL7d1@find-library-by-spec/die (lambda (dL90a@spec) (let ((dL90c@id (car dL90a@spec))) (or (dL7b5@find-library-by (lambda (dL90e@x) (eq? dL90c@id (dL779@library-id dL90e@x)))) (assertion-violation '#f '"cannot find library with required spec" dL90a@spec))))) (set! dL988@dL7d1@find-library-by-spec/die dL7d1@find-library-by-spec/die) (set! dL7d3@label->binding-table (make-eq-hashtable)) (set! dL989@dL7d3@label->binding-table dL7d3@label->binding-table) (set! dL7d5@install-library-record (lambda (dL910@lib) (begin (let ((dL912@exp-env (dL795@library-env dL910@lib))) (for-each (lambda (dL914@x) (let ((dL916@label (car dL914@x)) (dL917@binding (cdr dL914@x))) (let ((dL91a@binding (let ((dL91c@t (car dL917@binding))) (if (memv dL91c@t '(global)) (cons 'global (cons dL910@lib (cdr dL917@binding))) (if (memv dL91c@t '(global-macro)) (cons 'global-macro (cons dL910@lib (cdr dL917@binding))) (if (memv dL91c@t '(global-macro!)) (cons 'global-macro! (cons dL910@lib (cdr dL917@binding))) dL917@binding)))))) (begin (if (hashtable-ref dL7d3@label->binding-table dL916@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" dL916@label (hashtable-ref dL7d3@label->binding-table dL916@label '#f) dL91a@binding) (exit)) (void)) (hashtable-set! dL7d3@label->binding-table dL916@label dL91a@binding))))) dL912@exp-env)) ((dL76b@current-library-collection) dL910@lib)))) (set! dL98a@dL7d5@install-library-record dL7d5@install-library-record) (set! dL7d7@install-library (lambda (dL91e@id dL91f@name dL920@ver dL921@imp* dL922@vis* dL923@inv* dL924@exp-subst dL925@exp-env dL926@visit-proc dL927@invoke-proc dL928@visit-code dL929@invoke-code dL92a@visible? dL92b@source-file-name) (let ((dL93a@imp-lib* (map dL7d1@find-library-by-spec/die dL921@imp*)) (dL93b@vis-lib* (map dL7d1@find-library-by-spec/die dL922@vis*)) (dL93c@inv-lib* (map dL7d1@find-library-by-spec/die dL923@inv*))) (begin (if (not (and (symbol? dL91e@id) (list? dL91f@name) (list? dL920@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" dL91e@id dL91f@name dL920@ver) (void)) (if (dL7cf@library-exists? dL91f@name) (assertion-violation 'install-library '"library is already installed" dL91f@name) (void)) (let ((dL940@lib (make-simple-struct 'library '15 (list dL91e@id dL91f@name dL920@ver dL93a@imp-lib* dL93b@vis-lib* dL93c@inv-lib* dL924@exp-subst dL925@exp-env dL926@visit-proc dL927@invoke-proc dL928@visit-code dL929@invoke-code dL92a@visible? dL92b@source-file-name)))) (dL7d5@install-library-record dL940@lib)))))) (set! dL98b@dL7d7@install-library dL7d7@install-library) (set! dL7d9@imported-label->binding (lambda (dL942@lab) (hashtable-ref dL7d3@label->binding-table dL942@lab '#f))) (set! dL98c@dL7d9@imported-label->binding dL7d9@imported-label->binding) (set! dL7db@invoke-library (lambda (dL944@lib) (let ((dL946@invoke (dL79d@library-invoke-state dL944@lib))) (if (procedure? dL946@invoke) (begin (dL79f@set-library-invoke-state! dL944@lib (lambda () (assertion-violation 'invoke '"circularity detected" dL944@lib))) (for-each dL7db@invoke-library (dL78d@library-inv* dL944@lib)) (dL79f@set-library-invoke-state! dL944@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" dL944@lib))) (dL946@invoke) (dL79f@set-library-invoke-state! dL944@lib '#t)) (void))))) (set! dL98d@dL7db@invoke-library dL7db@invoke-library) (set! dL7dd@visit-library (lambda (dL948@lib) (let ((dL94a@visit (dL799@library-visit-state dL948@lib))) (if (procedure? dL94a@visit) (begin (dL79b@set-library-visit-state! dL948@lib (lambda () (assertion-violation 'visit '"circularity detected" dL948@lib))) (for-each dL7db@invoke-library (dL789@library-vis* dL948@lib)) (dL79b@set-library-visit-state! dL948@lib (lambda () (assertion-violation 'invoke '"first visit did not return" dL948@lib))) (dL94a@visit) (dL79b@set-library-visit-state! dL948@lib '#t)) (void))))) (set! dL98e@dL7dd@visit-library dL7dd@visit-library) (set! dL7df@invoke-library-by-spec (lambda (dL94c@spec) (dL7db@invoke-library (dL7d1@find-library-by-spec/die dL94c@spec)))) (set! dL98f@dL7df@invoke-library-by-spec dL7df@invoke-library-by-spec) (set! dL7e1@installed-libraries (lambda dL954 (let ((dL955 (length dL954))) (if (= dL955 '1) (apply (lambda (dL94e@all?) (let dL952@f ((dL950@ls ((dL76b@current-library-collection)))) (if (null? dL950@ls) '() (if (or dL94e@all? (dL7a9@library-visible? (car dL950@ls))) (cons (car dL950@ls) (dL952@f (cdr dL950@ls))) (dL952@f (cdr dL950@ls)))))) dL954) (if (= dL955 '0) (apply (lambda () (dL7e1@installed-libraries '#f)) dL954) (error 'apply '"invalid arg count")))))) (set! dL990@dL7e1@installed-libraries dL7e1@installed-libraries) (set! dL7e3@library-spec (lambda (dL956@x) (begin (if (not (dL777@library? dL956@x)) (assertion-violation 'library-spec '"not a library" dL956@x) (void)) (list (dL779@library-id dL956@x) (dL77d@library-name dL956@x) (dL781@library-version dL956@x))))) (set! dL991@dL7e3@library-spec dL7e3@library-spec) (void))
(begin (set! dL995@build-global-define (unspecified)) (set! dLa06@build-lambda (unspecified)) (set! dLa08@build-case-lambda (unspecified)) (set! dLa36@build-sequence (unspecified)) (set! dLa38@build-void (unspecified)) (set! dLa3a@build-letrec (unspecified)) (set! dLa3c@build-let (unspecified)) (set! dLa3e@build-named-let (unspecified)) (set! dLa40@build-letrec* (unspecified)) (set! dLa42@build-library-letrec* (unspecified)) (set! dLa44@build-receive (unspecified)) (set! dL995@build-global-define (lambda (dLa45@x) (dLa38@build-void))) (set! dLad3@dL995@build-global-define dL995@build-global-define) (set! dLa06@build-lambda (lambda (dLa47@ae dLa48@vars dLa49@exp) (list 'lambda dLa48@vars dLa49@exp))) (set! dLad4@dLa06@build-lambda dLa06@build-lambda) (set! dLa08@build-case-lambda (lambda (dLa4d@ae dLa4e@vars* dLa4f@exp*) (letrec* ((dLa54@build-error (lambda (dLa8b@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (dLa56@build-pred (lambda (dLa73@ae dLa74@n dLa75@vars) (call-with-values (lambda () (let dLa81@f ((dLa7d@vars dLa75@vars) (dLa7e@count '0)) (if (pair? dLa7d@vars) (dLa81@f (cdr dLa7d@vars) (+ dLa7e@count '1)) (if (null? dLa7d@vars) (values dLa7e@count '=) (values dLa7e@count '>=))))) (lambda (dLa83@dLa7a dLa84@dLa7c) (let ((dLa87@pred dLa84@dLa7c) (dLa88@count dLa83@dLa7a)) (list (list 'primitive dLa87@pred) dLa74@n (list 'quote dLa88@count))))))) (dLa58@build-apply (lambda (dLa6b@ae dLa6c@g dLa6d@vars dLa6e@exp) (list '(primitive apply) (dLa06@build-lambda dLa6b@ae dLa6d@vars dLa6e@exp) dLa6c@g))) (dLa5a@expand-case-lambda (lambda (dLa5b@ae dLa5c@vars dLa5d@exp*) (let ((dLa61@g (gensym)) (dLa62@n (gensym))) (list 'lambda dLa61@g (dLa3c@build-let dLa5b@ae (list dLa62@n) (list (list '(primitive length) dLa61@g)) (let dLa69@f ((dLa65@vars* dLa4e@vars*) (dLa66@exp* dLa5d@exp*)) (if (null? dLa65@vars*) (dLa54@build-error dLa5b@ae) (list 'if (dLa56@build-pred dLa5b@ae dLa62@n (car dLa65@vars*)) (dLa58@build-apply dLa5b@ae dLa61@g (car dLa65@vars*) (car dLa66@exp*)) (dLa69@f (cdr dLa65@vars*) (cdr dLa66@exp*))))))))))) (if (= (length dLa4f@exp*) '1) (dLa06@build-lambda dLa4d@ae (car dLa4e@vars*) (car dLa4f@exp*)) (dLa5a@expand-case-lambda dLa4d@ae dLa4e@vars* dLa4f@exp*))))) (set! dLad5@dLa08@build-case-lambda dLa08@build-case-lambda) (set! dLa36@build-sequence (lambda (dLa8d@ae dLa8e@exps) (let dLa93@loop ((dLa91@exps dLa8e@exps)) (if (null? (cdr dLa91@exps)) (car dLa91@exps) (if (equal? (car dLa91@exps) (dLa38@build-void)) (dLa93@loop (cdr dLa91@exps)) (cons 'begin dLa91@exps)))))) (set! dLad6@dLa36@build-sequence dLa36@build-sequence) (set! dLa38@build-void (lambda () '((primitive void)))) (set! dLad7@dLa38@build-void dLa38@build-void) (set! dLa3a@build-letrec (lambda (dLa95@ae dLa96@vars dLa97@val-exps dLa98@body-exp) (if (null? dLa96@vars) dLa98@body-exp (list 'letrec (map list dLa96@vars dLa97@val-exps) dLa98@body-exp)))) (set! dLad8@dLa3a@build-letrec dLa3a@build-letrec) (set! dLa3c@build-let (lambda (dLa9d@ae dLa9e@vars dLa9f@val-exps dLaa0@body-exp) (if (null? dLa9e@vars) dLaa0@body-exp (list 'let (map list dLa9e@vars dLa9f@val-exps) dLaa0@body-exp)))) (set! dLad9@dLa3c@build-let dLa3c@build-let) (set! dLa3e@build-named-let (lambda (dLaa5@ae dLaa6@name dLaa7@vars dLaa8@val-exps dLaa9@body-exp) (list 'let dLaa6@name (map list dLaa7@vars dLaa8@val-exps) dLaa9@body-exp))) (set! dLada@dLa3e@build-named-let dLa3e@build-named-let) (set! dLa40@build-letrec* (lambda (dLaaf@ae dLab0@vars dLab1@val-exps dLab2@body-exp) (if (null? dLab0@vars) dLab2@body-exp (list 'letrec* (map list dLab0@vars dLab1@val-exps) dLab2@body-exp)))) (set! dLadb@dLa40@build-letrec* dLa40@build-letrec*) (set! dLa42@build-library-letrec* (lambda (dLab7@ae dLab8@name dLab9@vars dLaba@locs dLabb@val-exps dLabc@body-exp) (cons 'begin (append (map (lambda (dLac3@var) (cons 'set! (cons dLac3@var '((unspecified))))) dLab9@vars) (append (apply append (map (lambda (dLac5@var dLac6@loc dLac7@val-exp) (list (list 'set! dLac5@var dLac7@val-exp) (list 'set! dLac6@loc dLac5@var))) dLab9@vars dLaba@locs dLabb@val-exps)) (list dLabc@body-exp)))))) (set! dLadc@dLa42@build-library-letrec* dLa42@build-library-letrec*) (set! dLa44@build-receive (lambda (dLacb@ae dLacc@vars dLacd@producer dLace@body*) (begin (display '"************** in ") (cons 'receive (cons dLacc@vars (cons dLacd@producer dLace@body*)))))) (set! dLadd@dLa44@build-receive dLa44@build-receive) (void))
(begin (set! dLaec@file-options-macro (unspecified)) (set! dLaee@set-cons (unspecified)) (set! dLaf0@set-union (unspecified)) (set! dLaf5@top-mark* (unspecified)) (set! dLaf7@top-marked? (unspecified)) (set! dLaf9@gen-lexical (unspecified)) (set! dLafb@gen-global (unspecified)) (set! dLafd@gen-label (unspecified)) (set! dLaff@gen-top-level-label (unspecified)) (set! dLb01@gen-define-label+loc (unspecified)) (set! dLb03@gen-define-label (unspecified)) (set! dLb0d@rib? (unspecified)) (set! dLb0f@rib-sym* (unspecified)) (set! dLb11@set-rib-sym*! (unspecified)) (set! dLb13@rib-mark** (unspecified)) (set! dLb15@set-rib-mark**! (unspecified)) (set! dLb17@rib-label* (unspecified)) (set! dLb19@set-rib-label*! (unspecified)) (set! dLb1b@rib-sealed/freq (unspecified)) (set! dLb1d@set-rib-sealed/freq! (unspecified)) (set! dLb1f@rib-cache (unspecified)) (set! dLb21@set-rib-cache! (unspecified)) (set! dLb23@dummy (unspecified)) (set! dLb25@make-empty-rib (unspecified)) (set! dLb27@extend-rib! (unspecified)) (set! dLb29@extend-rib/nc! (unspecified)) (set! dLb2b@make-rib-map (unspecified)) (set! dLb2d@seal-rib! (unspecified)) (set! dLb2f@unseal-rib! (unspecified)) (set! dLb31@make-full-rib (unspecified)) (set! dLb33@rp (unspecified)) (set! dLb3d@stx? (unspecified)) (set! dLb3f@stx-expr (unspecified)) (set! dLb41@set-stx-expr! (unspecified)) (set! dLb43@stx-mark* (unspecified)) (set! dLb45@set-stx-mark*! (unspecified)) (set! dLb47@stx-subst* (unspecified)) (set! dLb49@set-stx-subst*! (unspecified)) (set! dLb4b@stx-ae* (unspecified)) (set! dLb4d@set-stx-ae*! (unspecified)) (set! dLb4f@dummy (unspecified)) (set! dLb51@datum->stx (unspecified)) (set! dLb53@gen-mark (unspecified)) (set! dLb55@anti-mark (unspecified)) (set! dLb57@anti-mark? (unspecified)) (set! dLb59@mkstx (unspecified)) (set! dLb5b@add-mark (unspecified)) (set! dLb5d@add-subst (unspecified)) (set! dLb5f@syntax-kind? (unspecified)) (set! dLb61@syntax-vector->list (unspecified)) (set! dLb63@syntax-pair? (unspecified)) (set! dLb65@syntax-vector? (unspecified)) (set! dLb67@syntax-null? (unspecified)) (set! dLb69@syntax-list? (unspecified)) (set! dLb6b@syntax-car (unspecified)) (set! dLb6d@syntax-cdr (unspecified)) (set! dLb6f@syntax->list (unspecified)) (set! dLb71@id? (unspecified)) (set! dLb73@id->sym (unspecified)) (set! dLb75@bound-id=? (unspecified)) (set! dLb77@free-id=? (unspecified)) (set! dLb79@valid-bound-ids? (unspecified)) (set! dLb7b@distinct-bound-ids? (unspecified)) (set! dLb7d@bound-id-member? (unspecified)) (set! dLb7f@self-evaluating? (unspecified)) (set! dLb81@strip-annotations (unspecified)) (set! dLb83@strip (unspecified)) (set! dLb85@stx->datum (unspecified)) (set! dLb87@id->label (unspecified)) (set! dLb89@label->binding (unspecified)) (set! dLb8b@make-binding (unspecified)) (set! dLb8d@binding-type (unspecified)) (set! dLb8f@binding-value (unspecified)) (set! dLb91@raise-unbound-error (unspecified)) (set! dLb93@syntax-type (unspecified)) (set! dLba1@sanitize-binding (unspecified)) (set! dLba3@make-variable-transformer (unspecified)) (set! dLba5@variable-transformer? (unspecified)) (set! dLba7@variable-transformer-procedure (unspecified)) (set! dLba9@make-eval-transformer (unspecified)) (set! dLcfa@parse-define (unspecified)) (set! dLcfc@parse-define-syntax (unspecified)) (set! dLcfe@scheme-stx-hashtable (unspecified)) (set! dLd00@scheme-stx (unspecified)) (set! dLd02@lexical-var (unspecified)) (set! dLd04@lexical-mutable? (unspecified)) (set! dLd06@set-lexical-mutable! (unspecified)) (set! dLd08@add-lexical (unspecified)) (set! dLd0a@add-lexicals (unspecified)) (set! dLd0c@letrec-helper (unspecified)) (set! dLd0e@let-transformer (unspecified)) (set! dLd10@letrec-transformer (unspecified)) (set! dLd12@letrec*-transformer (unspecified)) (set! dLd14@fluid-let-syntax-transformer (unspecified)) (set! dLd16@type-descriptor-transformer (unspecified)) (set! dLd18@record-type-descriptor-transformer (unspecified)) (set! dLd1a@record-constructor-descriptor-transformer (unspecified)) (set! dLd1c@when-macro (unspecified)) (set! dLd1e@unless-macro (unspecified)) (set! dLd20@if-transformer (unspecified)) (set! dLd22@and-transformer (unspecified)) (set! dLd24@or-transformer (unspecified)) (set! dLd26@case-macro (unspecified)) (set! dLd28@quote-transformer (unspecified)) (set! dLd2a@case-lambda-transformer (unspecified)) (set! dLd2c@lambda-transformer (unspecified)) (set! dLd2e@bless (unspecified)) (set! dLd30@with-syntax-macro (unspecified)) (set! dLd32@invalid-fmls-error (unspecified)) (set! dLd34@let-macro (unspecified)) (set! dLd36@let-values-macro (unspecified)) (set! dLd38@let*-values-macro (unspecified)) (set! dLd3a@trace-lambda-macro (unspecified)) (set! dLd3c@trace-define-macro (unspecified)) (set! dLd3e@trace-define-syntax-macro (unspecified)) (set! dLd40@trace-let/rec-syntax (unspecified)) (set! dLd42@trace-let-syntax-macro (unspecified)) (set! dLd44@trace-letrec-syntax-macro (unspecified)) (set! dLd46@guard-macro (unspecified)) (set! dLd48@define-enumeration-macro (unspecified)) (set! dLd4a@time-macro (unspecified)) (set! dLd4c@delay-macro (unspecified)) (set! dLd4e@assert-macro (unspecified)) (set! dLd50@endianness-macro (unspecified)) (set! dLd52@identifier-syntax-macro (unspecified)) (set! dLd54@do-macro (unspecified)) (set! dLd56@let*-macro (unspecified)) (set! dLd58@or-macro (unspecified)) (set! dLd5a@and-macro (unspecified)) (set! dLd5c@cond-macro (unspecified)) (set! dLd5e@do-include (unspecified)) (set! dLd60@include-macro (unspecified)) (set! dLd62@include-into-macro (unspecified)) (set! dLd64@syntax-rules-macro (unspecified)) (set! dLd66@quasiquote-macro (unspecified)) (set! dLd68@quasisyntax-macro (unspecified)) (set! dLd6a@define-struct-macro (unspecified)) (set! dLd6c@define-record-type-macro (unspecified)) (set! dLd6e@define-condition-type-macro (unspecified)) (set! dLd70@incorrect-usage-macro (unspecified)) (set! dLd72@parameterize-macro (unspecified)) (set! dLd74@foreign-call-transformer (unspecified)) (set! dLd76@convert-pattern (unspecified)) (set! dLd78@syntax-dispatch (unspecified)) (set! dLd7a@ellipsis? (unspecified)) (set! dLd7c@underscore? (unspecified)) (set! dLd7e@verify-literals (unspecified)) (set! dLd80@syntax-case-transformer (unspecified)) (set! dLd82@ellipsis-map (unspecified)) (set! dLd84@syntax-transformer (unspecified)) (set! dLd86@core-macro-transformer (unspecified)) (set! dLd88@symbol-macro (unspecified)) (set! dLd8a@macro-transformer (unspecified)) (set! dLd8c@local-macro-transformer (unspecified)) (set! dLd8e@do-macro-call (unspecified)) (set! dLd90@chi-macro (unspecified)) (set! dLd92@chi-local-macro (unspecified)) (set! dLd94@chi-global-macro (unspecified)) (set! dLd96@chi-expr* (unspecified)) (set! dLd98@chi-application (unspecified)) (set! dLd9a@chi-expr (unspecified)) (set! dLd9c@chi-set! (unspecified)) (set! dLd9e@verify-formals (unspecified)) (set! dLda0@chi-lambda-clause (unspecified)) (set! dLda2@chi-lambda-clause* (unspecified)) (set! dLda4@chi-defun (unspecified)) (set! dLda6@chi-rhs (unspecified)) (set! dLda8@expand-interaction-rhs*/init* (unspecified)) (set! dLdaa@chi-rhs* (unspecified)) (set! dLdac@find-bound=? (unspecified)) (set! dLdae@find-dups (unspecified)) (set! dLdb0@chi-internal (unspecified)) (set! dLdb2@parse-module (unspecified)) (set! dLdbc@module-interface? (unspecified)) (set! dLdbe@module-interface-first-mark (unspecified)) (set! dLdc0@set-module-interface-first-mark! (unspecified)) (set! dLdc2@module-interface-exp-id-vec (unspecified)) (set! dLdc4@set-module-interface-exp-id-vec! (unspecified)) (set! dLdc6@module-interface-exp-lab-vec (unspecified)) (set! dLdc8@set-module-interface-exp-lab-vec! (unspecified)) (set! dLdca@dummy (unspecified)) (set! dLdcc@module-interface-exp-id* (unspecified)) (set! dLdce@chi-internal-module (unspecified)) (set! dLdd0@chi-body* (unspecified)) (set! dLdd2@expand-transformer (unspecified)) (set! dLdd4@parse-exports (unspecified)) (set! dLdd6@parse-library-name (unspecified)) (set! dLdd8@parse-library (unspecified)) (set! dLdda@parse-import-spec* (unspecified)) (set! dLddc@make-top-rib (unspecified)) (set! dLdde@make-collector (unspecified)) (set! dLde0@inv-collector (unspecified)) (set! dLde2@vis-collector (unspecified)) (set! dLde4@imp-collector (unspecified)) (set! dLde6@chi-library-internal (unspecified)) (set! dLde8@chi-interaction-expr (unspecified)) (set! dLdea@library-body-expander (unspecified)) (set! dLdec@core-library-expander (unspecified)) (set! dLdee@parse-top-level-program (unspecified)) (set! dLdf0@top-level-expander (unspecified)) (set! dLdf2@rp (unspecified)) (set! dLdfc@env? (unspecified)) (set! dLdfe@env-names (unspecified)) (set! dLe00@set-env-names! (unspecified)) (set! dLe02@env-labels (unspecified)) (set! dLe04@set-env-labels! (unspecified)) (set! dLe06@env-itc (unspecified)) (set! dLe08@set-env-itc! (unspecified)) (set! dLe0a@dummy (unspecified)) (set! dLe0c@rp (unspecified)) (set! dLe16@interaction-env? (unspecified)) (set! dLe18@interaction-env-rib (unspecified)) (set! dLe1a@set-interaction-env-rib! (unspecified)) (set! dLe1c@interaction-env-r (unspecified)) (set! dLe1e@set-interaction-env-r! (unspecified)) (set! dLe20@interaction-env-locs (unspecified)) (set! dLe22@set-interaction-env-locs! (unspecified)) (set! dLe24@dummy (unspecified)) (set! dLe26@interaction-environment-symbols (unspecified)) (set! dLe28@environment-bindings (unspecified)) (set! dLe2a@parse-binding (unspecified)) (set! dLe2c@environment? (unspecified)) (set! dLe2e@environment-symbols (unspecified)) (set! dLe30@environment (unspecified)) (set! dLe32@null-environment (unspecified)) (set! dLe34@scheme-report-environment (unspecified)) (set! dLe36@expand (unspecified)) (set! dLe38@eval (unspecified)) (set! dLe3a@library-expander (unspecified)) (set! dLe3c@boot-library-expand (unspecified)) (set! dLe3e@rev-map-append (unspecified)) (set! dLe40@build-exports (unspecified)) (set! dLe42@make-export-subst (unspecified)) (set! dLe44@make-export-env/macros (unspecified)) (set! dLe46@generate-temporaries (unspecified)) (set! dLe48@free-identifier=? (unspecified)) (set! dLe4a@bound-identifier=? (unspecified)) (set! dLe4c@make-source-condition (unspecified)) (set! dLe4e@extract-position-condition (unspecified)) (set! dLe50@expression-position (unspecified)) (set! dLe52@assertion-error (unspecified)) (set! dLe54@syntax-error (unspecified)) (set! dLe56@syntax-violation* (unspecified)) (set! dLe58@syntax-violation (unspecified)) (set! dLe5a@identifier? (unspecified)) (set! dLe5c@datum->syntax (unspecified)) (set! dLe5e@syntax->datum (unspecified)) (set! dLe60@ungensym-all (unspecified)) (set! dLe62@compile-r6rs-top-level (unspecified)) (set! dLe64@pre-compile-r6rs-top-level (unspecified)) (set! dLe66@interaction-environment (unspecified)) (set! dLe68@top-level-context (unspecified)) (set! dLaec@file-options-macro (lambda (dLe69@x) (letrec* ((dLe6c@valid-option? (lambda (dLe75@x) (and (dLb71@id? dLe75@x) (memq (dLb73@id->sym dLe75@x) '(no-fail no-create no-truncate)))))) (let ((dLe6d@t dLe69@x)) (let ((dLe6f@ls/false (dLd78@syntax-dispatch dLe6d@t '(_ . each-any)))) (if (and dLe6f@ls/false (apply (lambda (dLe71@opt*) (for-all dLe6c@valid-option? dLe71@opt*)) dLe6f@ls/false)) (apply (lambda (dLe73@opt*) (dLd2e@bless (list 'make-file-options (list 'quote dLe73@opt*)))) dLe6f@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dLe6d@t))))))) (set! dL27bf@dLaec@file-options-macro dLaec@file-options-macro) (set! dLaee@set-cons (lambda (dLe77@x dLe78@ls) (if (memq dLe77@x dLe78@ls) dLe78@ls (cons dLe77@x dLe78@ls)))) (set! dL27c0@dLaee@set-cons dLaee@set-cons) (set! dLaf0@set-union (lambda (dLe7b@ls1 dLe7c@ls2) (if (null? dLe7b@ls1) dLe7c@ls2 (if (memq (car dLe7b@ls1) dLe7c@ls2) (dLaf0@set-union (cdr dLe7b@ls1) dLe7c@ls2) (cons (car dLe7b@ls1) (dLaf0@set-union (cdr dLe7b@ls1) dLe7c@ls2)))))) (set! dL27c1@dLaf0@set-union dLaf0@set-union) (set! dLaf5@top-mark* '(top)) (set! dL27c2@dLaf5@top-mark* dLaf5@top-mark*) (set! dLaf7@top-marked? (lambda (dLe7f@m*) (memq 'top dLe7f@m*))) (set! dL27c3@dLaf7@top-marked? dLaf7@top-marked?) (set! dLaf9@gen-lexical (lambda (dLe81@sym) (if (symbol? dLe81@sym) (gensym dLe81@sym) (if (dLb3d@stx? dLe81@sym) (dLaf9@gen-lexical (dLb73@id->sym dLe81@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" dLe81@sym))))) (set! dL27c4@dLaf9@gen-lexical dLaf9@gen-lexical) (set! dLafb@gen-global (lambda (dLe83@x) (dLaf9@gen-lexical dLe83@x))) (set! dL27c5@dLafb@gen-global dLafb@gen-global) (set! dLafd@gen-label (lambda (dLe85@_) (gensym))) (set! dL27c6@dLafd@gen-label dLafd@gen-label) (set! dLaff@gen-top-level-label (lambda (dLe87@id dLe88@rib) (letrec* ((dLe8c@find (lambda (dLe97@sym dLe98@mark* dLe99@sym* dLe9a@mark** dLe9b@label*) (and (pair? dLe99@sym*) (if (and (eq? dLe97@sym (car dLe99@sym*)) (same-marks? dLe98@mark* (car dLe9a@mark**))) (car dLe9b@label*) (dLe8c@find dLe97@sym dLe98@mark* (cdr dLe99@sym*) (cdr dLe9a@mark**) (cdr dLe9b@label*))))))) (let ((dLe8d@sym (dLb73@id->sym dLe87@id)) (dLe8e@mark* (dLb43@stx-mark* dLe87@id))) (let ((dLe91@sym* (dLb0f@rib-sym* dLe88@rib))) (let ((dLe93@t (and (memq dLe8d@sym (dLb0f@rib-sym* dLe88@rib)) (dLe8c@find dLe8d@sym dLe8e@mark* dLe91@sym* (dLb13@rib-mark** dLe88@rib) (dLb17@rib-label* dLe88@rib))))) (if dLe93@t ((lambda (dLe95@label) (if (dL98c@dL7d9@imported-label->binding dLe95@label) (gensym) dLe95@label)) dLe93@t) (gensym)))))))) (set! dL27c7@dLaff@gen-top-level-label dLaff@gen-top-level-label) (set! dLb01@gen-define-label+loc (lambda (dLea1@id dLea2@rib) (let ((dLea5@t (dLe68@top-level-context))) (if dLea5@t ((lambda (dLea7@env) (let ((dLea9@label (dLaff@gen-top-level-label dLea1@id dLea2@rib)) (dLeaa@locs (dLe20@interaction-env-locs dLea7@env))) (values dLea9@label (let ((dLead@t (assq dLea9@label dLeaa@locs))) (if dLead@t (cdr dLead@t) (let ((dLeaf@loc (dLaf9@gen-lexical dLea1@id))) (begin (dLe22@set-interaction-env-locs! dLea7@env (cons (cons dLea9@label dLeaf@loc) dLeaa@locs)) dLeaf@loc))))))) dLea5@t) (values (gensym) (dLaf9@gen-lexical dLea1@id)))))) (set! dL27c8@dLb01@gen-define-label+loc dLb01@gen-define-label+loc) (set! dLb03@gen-define-label (lambda (dLeb1@id dLeb2@rib) (if (dLe68@top-level-context) (dLaff@gen-top-level-label dLeb1@id dLeb2@rib) (gensym)))) (set! dL27c9@dLb03@gen-define-label dLb03@gen-define-label) (set! dLb0d@rib? (lambda (dLeb5@x) (and (simple-struct? dLeb5@x) (eq? (simple-struct-name dLeb5@x) 'rib)))) (set! dL27ca@dLb0d@rib? dLb0d@rib?) (set! dLb0f@rib-sym* (lambda (dLeb7@x) (simple-struct-ref dLeb7@x '0))) (set! dL27cb@dLb0f@rib-sym* dLb0f@rib-sym*) (set! dLb11@set-rib-sym*! (lambda (dLeb9@x dLeba@val) (simple-struct-set! dLeb9@x '0 dLeba@val))) (set! dL27cc@dLb11@set-rib-sym*! dLb11@set-rib-sym*!) (set! dLb13@rib-mark** (lambda (dLebd@x) (simple-struct-ref dLebd@x '1))) (set! dL27cd@dLb13@rib-mark** dLb13@rib-mark**) (set! dLb15@set-rib-mark**! (lambda (dLebf@x dLec0@val) (simple-struct-set! dLebf@x '1 dLec0@val))) (set! dL27ce@dLb15@set-rib-mark**! dLb15@set-rib-mark**!) (set! dLb17@rib-label* (lambda (dLec3@x) (simple-struct-ref dLec3@x '2))) (set! dL27cf@dLb17@rib-label* dLb17@rib-label*) (set! dLb19@set-rib-label*! (lambda (dLec5@x dLec6@val) (simple-struct-set! dLec5@x '2 dLec6@val))) (set! dL27d0@dLb19@set-rib-label*! dLb19@set-rib-label*!) (set! dLb1b@rib-sealed/freq (lambda (dLec9@x) (simple-struct-ref dLec9@x '3))) (set! dL27d1@dLb1b@rib-sealed/freq dLb1b@rib-sealed/freq) (set! dLb1d@set-rib-sealed/freq! (lambda (dLecb@x dLecc@val) (simple-struct-set! dLecb@x '3 dLecc@val))) (set! dL27d2@dLb1d@set-rib-sealed/freq! dLb1d@set-rib-sealed/freq!) (set! dLb1f@rib-cache (lambda (dLecf@x) (simple-struct-ref dLecf@x '4))) (set! dL27d3@dLb1f@rib-cache dLb1f@rib-cache) (set! dLb21@set-rib-cache! (lambda (dLed1@x dLed2@val) (simple-struct-set! dLed1@x '4 dLed2@val))) (set! dL27d4@dLb21@set-rib-cache! dLb21@set-rib-cache!) (set! dLb23@dummy '3) (set! dL27d5@dLb23@dummy dLb23@dummy) (set! dLb25@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! dL27d6@dLb25@make-empty-rib dLb25@make-empty-rib) (set! dLb27@extend-rib! (lambda (dLed5@rib dLed6@id dLed7@label) (letrec* ((dLedc@find (lambda (dLee9@sym dLeea@mark* dLeeb@sym* dLeec@mark** dLeed@label*) (and (pair? dLeeb@sym*) (if (and (eq? dLee9@sym (car dLeeb@sym*)) (same-marks? dLeea@mark* (car dLeec@mark**))) dLeed@label* (dLedc@find dLee9@sym dLeea@mark* (cdr dLeeb@sym*) (cdr dLeec@mark**) (cdr dLeed@label*))))))) (begin (if (dLb1b@rib-sealed/freq dLed5@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" dLed5@rib) (void)) (let ((dLedd@sym (dLb73@id->sym dLed6@id)) (dLede@mark* (dLb43@stx-mark* dLed6@id))) (let ((dLee1@sym* (dLb0f@rib-sym* dLed5@rib))) (let ((dLee3@t (and (memq dLedd@sym (dLb0f@rib-sym* dLed5@rib)) (dLedc@find dLedd@sym dLede@mark* dLee1@sym* (dLb13@rib-mark** dLed5@rib) (dLb17@rib-label* dLed5@rib))))) (if dLee3@t ((lambda (dLee5@p) (if (not (eq? dLed7@label (car dLee5@p))) (if (dLe68@top-level-context) (set-car! dLee5@p dLed7@label) (dLe58@syntax-violation '#f '"multiple definitions of identifier" dLed6@id)) (void))) dLee3@t) (begin (if (dLb1f@rib-cache dLed5@rib) (hashtable-update! (dLb1f@rib-cache dLed5@rib) dLedd@sym (lambda (dLee7@e) (cons (cons dLede@mark* dLed7@label) dLee7@e)) '()) (void)) (dLb11@set-rib-sym*! dLed5@rib (cons dLedd@sym dLee1@sym*)) (dLb15@set-rib-mark**! dLed5@rib (cons dLede@mark* (dLb13@rib-mark** dLed5@rib))) (dLb19@set-rib-label*! dLed5@rib (cons dLed7@label (dLb17@rib-label* dLed5@rib)))))))))))) (set! dL27d7@dLb27@extend-rib! dLb27@extend-rib!) (set! dLb29@extend-rib/nc! (lambda (dLef3@rib dLef4@id dLef5@label) (let ((dLef9@sym (dLb73@id->sym dLef4@id)) (dLefa@mark* (dLb43@stx-mark* dLef4@id))) (let ((dLefd@sym* (dLb0f@rib-sym* dLef3@rib))) (begin (if (dLb1f@rib-cache dLef3@rib) (hashtable-update! (dLb1f@rib-cache dLef3@rib) dLef9@sym (lambda (dLeff@e) (cons (cons dLefa@mark* dLef5@label) dLeff@e)) '()) (void)) (dLb11@set-rib-sym*! dLef3@rib (cons dLef9@sym dLefd@sym*)) (dLb15@set-rib-mark**! dLef3@rib (cons dLefa@mark* (dLb13@rib-mark** dLef3@rib))) (dLb19@set-rib-label*! dLef3@rib (cons dLef5@label (dLb17@rib-label* dLef3@rib)))))))) (set! dL27d8@dLb29@extend-rib/nc! dLb29@extend-rib/nc!) (set! dLb2b@make-rib-map (lambda (dLf01@sym*) (let ((dLf03@ht (make-eq-hashtable))) (let dLf09@f ((dLf05@i '0) (dLf06@sym* dLf01@sym*)) (if (null? dLf06@sym*) dLf03@ht (begin (hashtable-update! dLf03@ht (car dLf06@sym*) (lambda (dLf0b@x) (cons dLf05@i dLf0b@x)) '()) (dLf09@f (+ dLf05@i '1) (cdr dLf06@sym*)))))))) (set! dL27d9@dLb2b@make-rib-map dLb2b@make-rib-map) (set! dLb2d@seal-rib! (lambda (dLf0d@rib) (let ((dLf0f@sym* (dLb0f@rib-sym* dLf0d@rib))) (if (not (null? dLf0f@sym*)) (begin (dLb11@set-rib-sym*! dLf0d@rib (list->vector dLf0f@sym*)) (dLb15@set-rib-mark**! dLf0d@rib (list->vector (dLb13@rib-mark** dLf0d@rib))) (dLb19@set-rib-label*! dLf0d@rib (list->vector (dLb17@rib-label* dLf0d@rib))) (dLb1d@set-rib-sealed/freq! dLf0d@rib (dLb2b@make-rib-map dLf0f@sym*))) (void))))) (set! dL27da@dLb2d@seal-rib! dLb2d@seal-rib!) (set! dLb2f@unseal-rib! (lambda (dLf11@rib) (if (dLb1b@rib-sealed/freq dLf11@rib) (begin (dLb1d@set-rib-sealed/freq! dLf11@rib '#f) (dLb11@set-rib-sym*! dLf11@rib (vector->list (dLb0f@rib-sym* dLf11@rib))) (dLb15@set-rib-mark**! dLf11@rib (vector->list (dLb13@rib-mark** dLf11@rib))) (dLb19@set-rib-label*! dLf11@rib (vector->list (dLb17@rib-label* dLf11@rib)))) (void)))) (set! dL27db@dLb2f@unseal-rib! dLb2f@unseal-rib!) (set! dLb31@make-full-rib (lambda (dLf13@id* dLf14@label*) (let ((dLf17@r (make-simple-struct 'rib '6 (list (map dLb73@id->sym dLf13@id*) (map dLb43@stx-mark* dLf13@id*) dLf14@label* '#f '#f)))) (begin (dLb2d@seal-rib! dLf17@r) dLf17@r)))) (set! dL27dc@dLb31@make-full-rib dLb31@make-full-rib) (set! dLb33@rp (dL6be@dL599@make-record-printer 'stx (lambda (dLf19@x dLf1a@p dLf1b@wr) (begin (display '"#<syntax " dLf1a@p) (write (dLb85@stx->datum dLf19@x) dLf1a@p) (let ((dLf1f@expr (dLb3f@stx-expr dLf19@x))) (if (dL6b5@dL587@annotation? dLf1f@expr) (let ((dLf21@src (dL6b6@dL589@annotation-source dLf1f@expr))) (if (pair? dLf21@src) (begin (display '" [" dLf1a@p) (display (cdr dLf21@src) dLf1a@p) (display '" of " dLf1a@p) (display (car dLf21@src) dLf1a@p) (display '"]" dLf1a@p)) (void))) (void))) (display '">" dLf1a@p))))) (set! dL27dd@dLb33@rp dLb33@rp) (set! dLb3d@stx? (lambda (dLf23@x) (and (simple-struct? dLf23@x) (eq? (simple-struct-name dLf23@x) 'stx)))) (set! dL27de@dLb3d@stx? dLb3d@stx?) (set! dLb3f@stx-expr (lambda (dLf25@x) (simple-struct-ref dLf25@x '0))) (set! dL27df@dLb3f@stx-expr dLb3f@stx-expr) (set! dLb41@set-stx-expr! (lambda (dLf27@x dLf28@val) (simple-struct-set! dLf27@x '0 dLf28@val))) (set! dL27e0@dLb41@set-stx-expr! dLb41@set-stx-expr!) (set! dLb43@stx-mark* (lambda (dLf2b@x) (simple-struct-ref dLf2b@x '1))) (set! dL27e1@dLb43@stx-mark* dLb43@stx-mark*) (set! dLb45@set-stx-mark*! (lambda (dLf2d@x dLf2e@val) (simple-struct-set! dLf2d@x '1 dLf2e@val))) (set! dL27e2@dLb45@set-stx-mark*! dLb45@set-stx-mark*!) (set! dLb47@stx-subst* (lambda (dLf31@x) (simple-struct-ref dLf31@x '2))) (set! dL27e3@dLb47@stx-subst* dLb47@stx-subst*) (set! dLb49@set-stx-subst*! (lambda (dLf33@x dLf34@val) (simple-struct-set! dLf33@x '2 dLf34@val))) (set! dL27e4@dLb49@set-stx-subst*! dLb49@set-stx-subst*!) (set! dLb4b@stx-ae* (lambda (dLf37@x) (simple-struct-ref dLf37@x '3))) (set! dL27e5@dLb4b@stx-ae* dLb4b@stx-ae*) (set! dLb4d@set-stx-ae*! (lambda (dLf39@x dLf3a@val) (simple-struct-set! dLf39@x '3 dLf3a@val))) (set! dL27e6@dLb4d@set-stx-ae*! dLb4d@set-stx-ae*!) (set! dLb4f@dummy '3) (set! dL27e7@dLb4f@dummy dLb4f@dummy) (set! dLb51@datum->stx (lambda (dLf3d@id dLf3e@datum) (make-simple-struct 'stx '5 (list dLf3e@datum (dLb43@stx-mark* dLf3d@id) (dLb47@stx-subst* dLf3d@id) (dLb4b@stx-ae* dLf3d@id))))) (set! dL27e8@dLb51@datum->stx dLb51@datum->stx) (set! dLb53@gen-mark (lambda () (string '#\m))) (set! dL27e9@dLb53@gen-mark dLb53@gen-mark) (set! dLb55@anti-mark '#f) (set! dL27ea@dLb55@anti-mark dLb55@anti-mark) (set! dLb57@anti-mark? not) (set! dL27eb@dLb57@anti-mark? dLb57@anti-mark?) (set! dLb59@mkstx (lambda (dLf41@e dLf42@m* dLf43@s* dLf44@ae*) (if (and (dLb3d@stx? dLf41@e) (not (dLaf7@top-marked? dLf42@m*))) (call-with-values (lambda () (join-wraps dLf42@m* dLf43@s* dLf44@ae* dLf41@e)) (lambda (dLf4f@dLf4a dLf50@dLf4c dLf51@dLf4e) (let ((dLf55@ae* dLf51@dLf4e) (dLf56@s* dLf50@dLf4c) (dLf57@m* dLf4f@dLf4a)) (make-simple-struct 'stx '5 (list (dLb3f@stx-expr dLf41@e) dLf57@m* dLf56@s* dLf55@ae*))))) (make-simple-struct 'stx '5 (list dLf41@e dLf42@m* dLf43@s* dLf44@ae*))))) (set! dL27ec@dLb59@mkstx dLb59@mkstx) (set! dLb5b@add-mark (lambda (dLf5b@m dLf5c@e dLf5d@ae) (dLb59@mkstx dLf5c@e (list dLf5b@m) '(shift) (list dLf5d@ae)))) (set! dL27ed@dLb5b@add-mark dLb5b@add-mark) (set! dLb5d@add-subst (lambda (dLf61@subst dLf62@e) (dLb59@mkstx dLf62@e '() (list dLf61@subst) '()))) (set! dL27ee@dLb5d@add-subst dLb5d@add-subst) (set! dLb5f@syntax-kind? (lambda (dLf65@x dLf66@p?) (if (dLb3d@stx? dLf65@x) (dLb5f@syntax-kind? (dLb3f@stx-expr dLf65@x) dLf66@p?) (if (dL6b5@dL587@annotation? dLf65@x) (dLb5f@syntax-kind? (dL6b7@dL58b@annotation-expression dLf65@x) dLf66@p?) (dLf66@p? dLf65@x))))) (set! dL27ef@dLb5f@syntax-kind? dLb5f@syntax-kind?) (set! dLb61@syntax-vector->list (lambda (dLf69@x) (if (dLb3d@stx? dLf69@x) (let ((dLf6b@ls (dLb61@syntax-vector->list (dLb3f@stx-expr dLf69@x))) (dLf6c@m* (dLb43@stx-mark* dLf69@x)) (dLf6d@s* (dLb47@stx-subst* dLf69@x)) (dLf6e@ae* (dLb4b@stx-ae* dLf69@x))) (map (lambda (dLf73@x) (dLb59@mkstx dLf73@x dLf6c@m* dLf6d@s* dLf6e@ae*)) dLf6b@ls)) (if (dL6b5@dL587@annotation? dLf69@x) (dLb61@syntax-vector->list (dL6b7@dL58b@annotation-expression dLf69@x)) (if (vector? dLf69@x) (vector->list dLf69@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" dLf69@x)))))) (set! dL27f0@dLb61@syntax-vector->list dLb61@syntax-vector->list) (set! dLb63@syntax-pair? (lambda (dLf75@x) (dLb5f@syntax-kind? dLf75@x pair?))) (set! dL27f1@dLb63@syntax-pair? dLb63@syntax-pair?) (set! dLb65@syntax-vector? (lambda (dLf77@x) (dLb5f@syntax-kind? dLf77@x vector?))) (set! dL27f2@dLb65@syntax-vector? dLb65@syntax-vector?) (set! dLb67@syntax-null? (lambda (dLf79@x) (dLb5f@syntax-kind? dLf79@x null?))) (set! dL27f3@dLb67@syntax-null? dLb67@syntax-null?) (set! dLb69@syntax-list? (lambda (dLf7b@x) (or (dLb67@syntax-null? dLf7b@x) (and (dLb63@syntax-pair? dLf7b@x) (dLb69@syntax-list? (dLb6d@syntax-cdr dLf7b@x)))))) (set! dL27f4@dLb69@syntax-list? dLb69@syntax-list?) (set! dLb6b@syntax-car (lambda (dLf7d@x) (if (dLb3d@stx? dLf7d@x) (dLb59@mkstx (dLb6b@syntax-car (dLb3f@stx-expr dLf7d@x)) (dLb43@stx-mark* dLf7d@x) (dLb47@stx-subst* dLf7d@x) (dLb4b@stx-ae* dLf7d@x)) (if (dL6b5@dL587@annotation? dLf7d@x) (dLb6b@syntax-car (dL6b7@dL58b@annotation-expression dLf7d@x)) (if (pair? dLf7d@x) (car dLf7d@x) (assertion-violation 'syntax-car '"BUG: not a pair" dLf7d@x)))))) (set! dL27f5@dLb6b@syntax-car dLb6b@syntax-car) (set! dLb6d@syntax-cdr (lambda (dLf7f@x) (if (dLb3d@stx? dLf7f@x) (dLb59@mkstx (dLb6d@syntax-cdr (dLb3f@stx-expr dLf7f@x)) (dLb43@stx-mark* dLf7f@x) (dLb47@stx-subst* dLf7f@x) (dLb4b@stx-ae* dLf7f@x)) (if (dL6b5@dL587@annotation? dLf7f@x) (dLb6d@syntax-cdr (dL6b7@dL58b@annotation-expression dLf7f@x)) (if (pair? dLf7f@x) (cdr dLf7f@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" dLf7f@x)))))) (set! dL27f6@dLb6d@syntax-cdr dLb6d@syntax-cdr) (set! dLb6f@syntax->list (lambda (dLf81@x) (if (dLb63@syntax-pair? dLf81@x) (cons (dLb6b@syntax-car dLf81@x) (dLb6f@syntax->list (dLb6d@syntax-cdr dLf81@x))) (if (dLb67@syntax-null? dLf81@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" dLf81@x))))) (set! dL27f7@dLb6f@syntax->list dLb6f@syntax->list) (set! dLb71@id? (lambda (dLf83@x) (and (dLb3d@stx? dLf83@x) (symbol? (dLb3f@stx-expr dLf83@x))))) (set! dL27f8@dLb71@id? dLb71@id?) (set! dLb73@id->sym (lambda (dLf85@x) (dLb3f@stx-expr dLf85@x))) (set! dL27f9@dLb73@id->sym dLb73@id->sym) (set! dLb75@bound-id=? (lambda (dLf87@x dLf88@y) (and (eq? (dLb73@id->sym dLf87@x) (dLb73@id->sym dLf88@y)) (same-marks? (dLb43@stx-mark* dLf87@x) (dLb43@stx-mark* dLf88@y))))) (set! dL27fa@dLb75@bound-id=? dLb75@bound-id=?) (set! dLb77@free-id=? (lambda (dLf8b@i dLf8c@j) (let ((dLf8f@t0 (id->real-label dLf8b@i)) (dLf90@t1 (id->real-label dLf8c@j))) (if (or dLf8f@t0 dLf90@t1) (eq? dLf8f@t0 dLf90@t1) (eq? (dLb73@id->sym dLf8b@i) (dLb73@id->sym dLf8c@j)))))) (set! dL27fb@dLb77@free-id=? dLb77@free-id=?) (set! dLb79@valid-bound-ids? (lambda (dLf93@id*) (and (for-all dLb71@id? dLf93@id*) (dLb7b@distinct-bound-ids? dLf93@id*)))) (set! dL27fc@dLb79@valid-bound-ids? dLb79@valid-bound-ids?) (set! dLb7b@distinct-bound-ids? (lambda (dLf95@id*) (or (null? dLf95@id*) (and (not (dLb7d@bound-id-member? (car dLf95@id*) (cdr dLf95@id*))) (dLb7b@distinct-bound-ids? (cdr dLf95@id*)))))) (set! dL27fd@dLb7b@distinct-bound-ids? dLb7b@distinct-bound-ids?) (set! dLb7d@bound-id-member? (lambda (dLf97@id dLf98@id*) (and (pair? dLf98@id*) (or (dLb75@bound-id=? dLf97@id (car dLf98@id*)) (dLb7d@bound-id-member? dLf97@id (cdr dLf98@id*)))))) (set! dL27fe@dLb7d@bound-id-member? dLb7d@bound-id-member?) (set! dLb7f@self-evaluating? (lambda (dLf9b@x) (or (number? dLf9b@x) (string? dLf9b@x) (char? dLf9b@x) (boolean? dLf9b@x) (regexp? dLf9b@x) (bytevector? dLf9b@x)))) (set! dL27ff@dLb7f@self-evaluating? dLb7f@self-evaluating?) (set! dLb81@strip-annotations (lambda (dLf9d@x) (if (pair? dLf9d@x) (cons (dLb81@strip-annotations (car dLf9d@x)) (dLb81@strip-annotations (cdr dLf9d@x))) (if (vector? dLf9d@x) (vector-map dLb81@strip-annotations dLf9d@x) (if (dL6b5@dL587@annotation? dLf9d@x) (dL6b4@dL585@annotation-stripped dLf9d@x) dLf9d@x))))) (set! dL2800@dLb81@strip-annotations dLb81@strip-annotations) (set! dLb83@strip (lambda (dLf9f@x dLfa0@m*) (if (dLaf7@top-marked? dLfa0@m*) (if (or (dL6b5@dL587@annotation? dLf9f@x) (and (pair? dLf9f@x) (dL6b5@dL587@annotation? (car dLf9f@x))) (and (vector? dLf9f@x) (> (vector-length dLf9f@x) '0) (dL6b5@dL587@annotation? (vector-ref dLf9f@x '0)))) (dLb81@strip-annotations dLf9f@x) dLf9f@x) (let dLfa5@f ((dLfa3@x dLf9f@x)) (if (dLb3d@stx? dLfa3@x) (begin (if (pair? (dLb3f@stx-expr dLfa3@x)) (begin (set-source-info! (dLb3f@stx-expr dLfa3@x) '#f) (set-source-info! (cdr (dLb3f@stx-expr dLfa3@x)) '#f) (set-source-info! (car (dLb3f@stx-expr dLfa3@x)) '#f)) (void)) (dLb83@strip (dLb3f@stx-expr dLfa3@x) (dLb43@stx-mark* dLfa3@x))) (if (dL6b5@dL587@annotation? dLfa3@x) (dL6b4@dL585@annotation-stripped dLfa3@x) (if (pair? dLfa3@x) (let ((dLfa7@a (dLfa5@f (car dLfa3@x))) (dLfa8@d (dLfa5@f (cdr dLfa3@x)))) (if (and (eq? dLfa7@a (car dLfa3@x)) (eq? dLfa8@d (cdr dLfa3@x))) dLfa3@x (cons dLfa7@a dLfa8@d))) (if (vector? dLfa3@x) (let ((dLfab@old (vector->list dLfa3@x))) (let ((dLfad@new (map dLfa5@f dLfab@old))) (if (for-all eq? dLfab@old dLfad@new) dLfa3@x (list->vector dLfad@new)))) dLfa3@x)))))))) (set! dL2801@dLb83@strip dLb83@strip) (set! dLb85@stx->datum (lambda (dLfaf@x) (dLb83@strip dLfaf@x '()))) (set! dL2802@dLb85@stx->datum dLb85@stx->datum) (set! dLb87@id->label (lambda (dLfb1@id) (or (id->real-label dLfb1@id) (let ((dLfb3@t (dLe68@top-level-context))) (if dLfb3@t ((lambda (dLfb5@env) (let ((dLfb7@rib (dLe18@interaction-env-rib dLfb5@env))) (call-with-values (lambda () (dLb01@gen-define-label+loc dLfb1@id dLfb7@rib)) (lambda (dLfbd@dLfba dLfbe@dLfbc) (let ((dLfc1@loc_ dLfbe@dLfbc) (dLfc2@lab dLfbd@dLfba)) (begin (dLb27@extend-rib! dLfb7@rib dLfb1@id dLfc2@lab) dLfc2@lab)))))) dLfb3@t) '#f))))) (set! dL2803@dLb87@id->label dLb87@id->label) (set! dLb89@label->binding (lambda (dLfc5@x dLfc6@r) (let ((dLfc9@t (dL98c@dL7d9@imported-label->binding dLfc5@x))) (if dLfc9@t ((lambda (dLfcb@b) (if (and (pair? dLfcb@b) (eq? (car dLfcb@b) '$core-rtd)) (cons '$rtd (map dLd2e@bless (cdr dLfcb@b))) (if (and (pair? dLfcb@b) (eq? (car dLfcb@b) 'global-rtd)) (let ((dLfcd@lib (cadr dLfcb@b)) (dLfce@loc (cddr dLfcb@b))) (cons '$rtd (symbol-value dLfce@loc))) dLfcb@b))) dLfc9@t) (let ((dLfd1@t (assq dLfc5@x dLfc6@r))) (if dLfd1@t (cdr dLfd1@t) (let ((dLfd3@t (dLe68@top-level-context))) (if dLfd3@t ((lambda (dLfd5@env) (let ((dLfd7@t (assq dLfc5@x (dLe20@interaction-env-locs dLfd5@env)))) (if dLfd7@t ((lambda (dLfd9@p) (cons* 'lexical (cdr dLfd9@p) '#f)) dLfd7@t) '(displaced-lexical . #f)))) dLfd3@t) '(displaced-lexical . #f))))))))) (set! dL2804@dLb89@label->binding dLb89@label->binding) (set! dLb8b@make-binding cons) (set! dL2805@dLb8b@make-binding dLb8b@make-binding) (set! dLb8d@binding-type car) (set! dL2806@dLb8d@binding-type dLb8d@binding-type) (set! dLb8f@binding-value cdr) (set! dL2807@dLb8f@binding-value dLb8f@binding-value) (set! dLb91@raise-unbound-error (lambda (dLfdb@id) (dLe56@syntax-violation* '#f '"unbound identifier" dLfdb@id (make-undefined-violation)))) (set! dL2808@dLb91@raise-unbound-error dLb91@raise-unbound-error) (set! dLb93@syntax-type (lambda (dLfdd@e dLfde@r) (if (dLb71@id? dLfdd@e) (let ((dLfe1@id dLfdd@e)) (let ((dLfe3@label (dLb87@id->label dLfe1@id))) (let ((dLfe5@b (dLb89@label->binding dLfe3@label dLfde@r))) (let ((dLfe7@type (dLb8d@binding-type dLfe5@b))) (begin (if (not dLfe3@label) (dLb91@raise-unbound-error dLfe1@id) (void)) (let ((dLfe9@t dLfe7@type)) (if (memv dLfe9@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values dLfe7@type (dLb8f@binding-value dLfe5@b) dLfe1@id) (values 'other '#f '#f)))))))) (if (dLb63@syntax-pair? dLfdd@e) (let ((dLfeb@id (dLb6b@syntax-car dLfdd@e))) (if (dLb71@id? dLfeb@id) (let ((dLfed@label (dLb87@id->label dLfeb@id))) (let ((dLfef@b (dLb89@label->binding dLfed@label dLfde@r))) (let ((dLff1@type (dLb8d@binding-type dLfef@b))) (begin (if (not dLfed@label) (dLb91@raise-unbound-error dLfeb@id) (void)) (let ((dLff3@t dLff1@type)) (if (memv dLff3@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values dLff1@type (dLb8f@binding-value dLfef@b) dLfeb@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((dLff5@d (dLb85@stx->datum dLfdd@e))) (if (dLb7f@self-evaluating? dLff5@d) (values 'constant dLff5@d '#f) (values 'other '#f '#f))))))) (set! dL2809@dLb93@syntax-type dLb93@syntax-type) (set! dLba1@sanitize-binding (lambda (dLff7@x dLff8@src) (if (procedure? dLff7@x) (cons* 'local-macro dLff7@x dLff8@src) (if (and (pair? dLff7@x) (eq? (car dLff7@x) 'macro!) (procedure? (cdr dLff7@x))) (cons* 'local-macro! (cdr dLff7@x) dLff8@src) (if (and (pair? dLff7@x) (eq? (car dLff7@x) '$rtd)) dLff7@x (assertion-violation 'expand '"invalid transformer" dLff7@x)))))) (set! dL280a@dLba1@sanitize-binding dLba1@sanitize-binding) (set! dLba3@make-variable-transformer (lambda (dLffb@x) (if (procedure? dLffb@x) (cons 'macro! dLffb@x) (assertion-violation 'make-variable-transformer '"not a procedure" dLffb@x)))) (set! dL280b@dLba3@make-variable-transformer dLba3@make-variable-transformer) (set! dLba5@variable-transformer? (lambda (dLffd@x) (and (pair? dLffd@x) (eq? (car dLffd@x) 'macro!) (procedure? (cdr dLffd@x))))) (set! dL280c@dLba5@variable-transformer? dLba5@variable-transformer?) (set! dLba7@variable-transformer-procedure (lambda (dLfff@x) (if (dLba5@variable-transformer? dLfff@x) (cdr dLfff@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" dLfff@x)))) (set! dL280d@dLba7@variable-transformer-procedure dLba7@variable-transformer-procedure) (set! dLba9@make-eval-transformer (lambda (dL1001@x) (dLba1@sanitize-binding (eval-core (dL717@dL6cf@expanded->core dL1001@x)) dL1001@x))) (set! dL280e@dLba9@make-eval-transformer dLba9@make-eval-transformer) (set! dLcfa@parse-define (lambda (dL1003@x) (let ((dL1005@t dL1003@x)) (let ((dL1007@ls/false (dLd78@syntax-dispatch dL1005@t '(_ (any . any) any . each-any)))) (if (and dL1007@ls/false (apply (lambda (dL1009@id dL100a@fmls dL100b@b dL100c@b*) (dLb71@id? dL1009@id)) dL1007@ls/false)) (apply (lambda (dL1011@id dL1012@fmls dL1013@b dL1014@b*) (begin (dLd9e@verify-formals dL1012@fmls dL1003@x) (values dL1011@id (cons 'defun (cons dL1012@fmls (cons dL1013@b dL1014@b*)))))) dL1007@ls/false) (let ((dL1019@t dL1005@t)) (let ((dL101b@ls/false (dLd78@syntax-dispatch dL1019@t '(_ any any)))) (if (and dL101b@ls/false (apply (lambda (dL101d@id dL101e@val) (dLb71@id? dL101d@id)) dL101b@ls/false)) (apply (lambda (dL1021@id dL1022@val) (values dL1021@id (cons 'expr dL1022@val))) dL101b@ls/false) (let ((dL1025@t dL1019@t)) (let ((dL1027@ls/false (dLd78@syntax-dispatch dL1025@t '(_ any)))) (if (and dL1027@ls/false (apply (lambda (dL1029@id) (dLb71@id? dL1029@id)) dL1027@ls/false)) (apply (lambda (dL102b@id) (values dL102b@id (cons 'expr (dLd2e@bless '(void))))) dL1027@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1025@t)))))))))))) (set! dL280f@dLcfa@parse-define dLcfa@parse-define) (set! dLcfc@parse-define-syntax (lambda (dL102d@x) (let ((dL102f@t dL102d@x)) (let ((dL1031@ls/false (dLd78@syntax-dispatch dL102f@t '(_ any any)))) (if (and dL1031@ls/false (apply (lambda (dL1033@id dL1034@val) (dLb71@id? dL1033@id)) dL1031@ls/false)) (apply (lambda (dL1037@id dL1038@val) (values dL1037@id dL1038@val)) dL1031@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL102f@t)))))) (set! dL2810@dLcfc@parse-define-syntax dLcfc@parse-define-syntax) (set! dLcfe@scheme-stx-hashtable (make-eq-hashtable)) (set! dL2811@dLcfe@scheme-stx-hashtable dLcfe@scheme-stx-hashtable) (set! dLd00@scheme-stx (lambda (dL103b@sym) (or (hashtable-ref dLcfe@scheme-stx-hashtable dL103b@sym '#f) (let ((dL103d@subst (dL968@dL791@library-subst (dL986@dL7cd@find-library-by-name '(psyntax system $all))))) (let ((dL103f@stx (make-simple-struct 'stx '5 (list dL103b@sym dLaf5@top-mark* '() '())))) (let ((dL1041@stx (let ((dL1043@t (assq dL103b@sym dL103d@subst))) (if dL1043@t ((lambda (dL1045@x) (let ((dL1047@name (car dL1045@x)) (dL1048@label (cdr dL1045@x))) (dLb5d@add-subst (make-simple-struct 'rib '6 (list (list dL1047@name) (list dLaf5@top-mark*) (list dL1048@label) '#f '#f)) dL103f@stx))) dL1043@t) dL103f@stx)))) (begin (hashtable-set! dLcfe@scheme-stx-hashtable dL103b@sym dL1041@stx) dL1041@stx))))))) (set! dL2812@dLd00@scheme-stx dLd00@scheme-stx) (set! dLd02@lexical-var car) (set! dL2813@dLd02@lexical-var dLd02@lexical-var) (set! dLd04@lexical-mutable? cdr) (set! dL2814@dLd04@lexical-mutable? dLd04@lexical-mutable?) (set! dLd06@set-lexical-mutable! set-cdr!) (set! dL2815@dLd06@set-lexical-mutable! dLd06@set-lexical-mutable!) (set! dLd08@add-lexical (lambda (dL104b@lab dL104c@lex dL104d@r) (cons (cons* dL104b@lab 'lexical dL104c@lex '#f) dL104d@r))) (set! dL2816@dLd08@add-lexical dLd08@add-lexical) (set! dLd0a@add-lexicals (lambda (dL1051@lab* dL1052@lex* dL1053@r) (if (null? dL1051@lab*) dL1053@r (dLd0a@add-lexicals (cdr dL1051@lab*) (cdr dL1052@lex*) (dLd08@add-lexical (car dL1051@lab*) (car dL1052@lex*) dL1053@r))))) (set! dL2817@dLd0a@add-lexicals dLd0a@add-lexicals) (set! dLd0c@letrec-helper (lambda (dL1057@e dL1058@r dL1059@mr dL105a@build) (let ((dL105f@t dL1057@e)) (let ((dL1061@ls/false (dLd78@syntax-dispatch dL105f@t '(_ #(each (any any)) any . each-any)))) (if dL1061@ls/false (apply (lambda (dL1063@lhs* dL1064@rhs* dL1065@b dL1066@b*) (if (not (dLb79@valid-bound-ids? dL1063@lhs*)) (dLd32@invalid-fmls-error dL1057@e dL1063@lhs*) (let ((dL106b@lex* (map dLaf9@gen-lexical dL1063@lhs*)) (dL106c@lab* (map dLafd@gen-label dL1063@lhs*))) (let ((dL106f@rib (dLb31@make-full-rib dL1063@lhs* dL106c@lab*)) (dL1070@r (dLd0a@add-lexicals dL106c@lab* dL106b@lex* dL1058@r))) (let ((dL1073@body (dLdb0@chi-internal (dLb5d@add-subst dL106f@rib (cons dL1065@b dL1066@b*)) dL1070@r dL1059@mr)) (dL1074@rhs* (dLd96@chi-expr* (map (lambda (dL1077@x) (dLb5d@add-subst dL106f@rib dL1077@x)) dL1064@rhs*) dL1070@r dL1059@mr))) (dL105a@build '#f dL106b@lex* dL1074@rhs* dL1073@body)))))) dL1061@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL105f@t)))))) (set! dL2818@dLd0c@letrec-helper dLd0c@letrec-helper) (set! dLd0e@let-transformer (lambda (dL1079@e dL107a@r dL107b@mr) (let ((dL107f@t dL1079@e)) (let ((dL1081@ls/false (dLd78@syntax-dispatch dL107f@t '(_ #(each (any any)) any . each-any)))) (if dL1081@ls/false (apply (lambda (dL1083@lhs* dL1084@rhs* dL1085@b dL1086@b*) (if (not (dLb79@valid-bound-ids? dL1083@lhs*)) (dLd32@invalid-fmls-error dL1079@e dL1083@lhs*) (let ((dL108b@lex* (map dLaf9@gen-lexical dL1083@lhs*)) (dL108c@lab* (map dLafd@gen-label dL1083@lhs*)) (dL108d@rhs* (dLd96@chi-expr* dL1084@rhs* dL107a@r dL107b@mr))) (let ((dL1091@rib (dLb31@make-full-rib dL1083@lhs* dL108c@lab*)) (dL1092@r (dLd0a@add-lexicals dL108c@lab* dL108b@lex* dL107a@r))) (let ((dL1095@body (dLdb0@chi-internal (dLb5d@add-subst dL1091@rib (cons dL1085@b dL1086@b*)) dL1092@r dL107b@mr))) (dLad9@dLa3c@build-let '#f dL108b@lex* dL108d@rhs* dL1095@body)))))) dL1081@ls/false) (let ((dL1097@t dL107f@t)) (let ((dL1099@ls/false (dLd78@syntax-dispatch dL1097@t '(_ any #(each (any any)) any . each-any)))) (if dL1099@ls/false (apply (lambda (dL109b@loop dL109c@lhs* dL109d@rhs* dL109e@b dL109f@b*) (if (not (dLb79@valid-bound-ids? dL109c@lhs*)) (dLd32@invalid-fmls-error dL1079@e dL109c@lhs*) (let ((dL10a5@lex* (map dLaf9@gen-lexical dL109c@lhs*)) (dL10a6@lab* (map dLafd@gen-label dL109c@lhs*)) (dL10a7@rhs* (dLd96@chi-expr* dL109d@rhs* dL107a@r dL107b@mr)) (dL10a8@loop-lex (dLaf9@gen-lexical dL109b@loop)) (dL10a9@loop-lab (dLafd@gen-label dL109b@loop))) (let ((dL10af@loop-rib (dLb31@make-full-rib (list dL109b@loop) (list dL10a9@loop-lab))) (dL10b0@rib (dLb31@make-full-rib dL109c@lhs* dL10a6@lab*)) (dL10b1@r (dLd0a@add-lexicals (cons dL10a9@loop-lab dL10a6@lab*) (cons dL10a8@loop-lex dL10a5@lex*) dL107a@r))) (let ((dL10b5@body (dLdb0@chi-internal (dLb5d@add-subst dL10af@loop-rib (dLb5d@add-subst dL10b0@rib (cons dL109e@b dL109f@b*))) dL10b1@r dL107b@mr))) (dLada@dLa3e@build-named-let '#f dL10a8@loop-lex dL10a5@lex* dL10a7@rhs* dL10b5@body)))))) dL1099@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1097@t))))))))) (set! dL2819@dLd0e@let-transformer dLd0e@let-transformer) (set! dLd10@letrec-transformer (lambda (dL10b7@e dL10b8@r dL10b9@mr) (dLd0c@letrec-helper dL10b7@e dL10b8@r dL10b9@mr dLad8@dLa3a@build-letrec))) (set! dL281a@dLd10@letrec-transformer dLd10@letrec-transformer) (set! dLd12@letrec*-transformer (lambda (dL10bd@e dL10be@r dL10bf@mr) (dLd0c@letrec-helper dL10bd@e dL10be@r dL10bf@mr dLadb@dLa40@build-letrec*))) (set! dL281b@dLd12@letrec*-transformer dLd12@letrec*-transformer) (set! dLd14@fluid-let-syntax-transformer (lambda (dL10c3@e dL10c4@r dL10c5@mr) (letrec* ((dL10ca@lookup (lambda (dL10dd@x) (or (dLb87@id->label dL10dd@x) (dLe58@syntax-violation '#f '"unbound identifier" dL10c3@e dL10dd@x))))) (let ((dL10cb@t dL10c3@e)) (let ((dL10cd@ls/false (dLd78@syntax-dispatch dL10cb@t '(_ #(each (any any)) any . each-any)))) (if dL10cd@ls/false (apply (lambda (dL10cf@lhs* dL10d0@rhs* dL10d1@b dL10d2@b*) (if (not (dLb79@valid-bound-ids? dL10cf@lhs*)) (dLd32@invalid-fmls-error dL10c3@e dL10cf@lhs*) (let ((dL10d7@lab* (map dL10ca@lookup dL10cf@lhs*)) (dL10d8@rhs* (map (lambda (dL10db@x) (dLba9@make-eval-transformer (dLdd2@expand-transformer dL10db@x dL10c5@mr))) dL10d0@rhs*))) (dLdb0@chi-internal (cons dL10d1@b dL10d2@b*) (append (map cons dL10d7@lab* dL10d8@rhs*) dL10c4@r) (append (map cons dL10d7@lab* dL10d8@rhs*) dL10c5@mr))))) dL10cd@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL10cb@t))))))) (set! dL281c@dLd14@fluid-let-syntax-transformer dLd14@fluid-let-syntax-transformer) (set! dLd16@type-descriptor-transformer (lambda (dL10df@e dL10e0@r dL10e1@mr) (let ((dL10e5@t dL10df@e)) (let ((dL10e7@ls/false (dLd78@syntax-dispatch dL10e5@t '(_ any)))) (if (and dL10e7@ls/false (apply (lambda (dL10e9@id) (dLb71@id? dL10e9@id)) dL10e7@ls/false)) (apply (lambda (dL10eb@id) (let ((dL10ed@lab (dLb87@id->label dL10eb@id))) (let ((dL10ef@b (dLb89@label->binding dL10ed@lab dL10e0@r))) (let ((dL10f1@type (dLb8d@binding-type dL10ef@b))) (begin (if (not dL10ed@lab) (dLb91@raise-unbound-error dL10eb@id) (void)) (if (not (and (eq? dL10f1@type '$rtd) (not (list? (dLb8f@binding-value dL10ef@b))))) (dLe58@syntax-violation '#f '"not a record type" dL10df@e) (void)) (list 'quote (dLb8f@binding-value dL10ef@b))))))) dL10e7@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL10e5@t)))))) (set! dL281d@dLd16@type-descriptor-transformer dLd16@type-descriptor-transformer) (set! dLd18@record-type-descriptor-transformer (lambda (dL10f3@e dL10f4@r dL10f5@mr) (let ((dL10f9@t dL10f3@e)) (let ((dL10fb@ls/false (dLd78@syntax-dispatch dL10f9@t '(_ any)))) (if (and dL10fb@ls/false (apply (lambda (dL10fd@id) (dLb71@id? dL10fd@id)) dL10fb@ls/false)) (apply (lambda (dL10ff@id) (let ((dL1101@lab (dLb87@id->label dL10ff@id))) (let ((dL1103@b (dLb89@label->binding dL1101@lab dL10f4@r))) (let ((dL1105@type (dLb8d@binding-type dL1103@b))) (begin (if (not dL1101@lab) (dLb91@raise-unbound-error dL10ff@id) (void)) (if (not (and (eq? dL1105@type '$rtd) (list? (dLb8f@binding-value dL1103@b)))) (dLe58@syntax-violation '#f '"not a record type" dL10f3@e) (void)) (dLd9a@chi-expr (car (dLb8f@binding-value dL1103@b)) dL10f4@r dL10f5@mr)))))) dL10fb@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL10f9@t)))))) (set! dL281e@dLd18@record-type-descriptor-transformer dLd18@record-type-descriptor-transformer) (set! dLd1a@record-constructor-descriptor-transformer (lambda (dL1107@e dL1108@r dL1109@mr) (let ((dL110d@t dL1107@e)) (let ((dL110f@ls/false (dLd78@syntax-dispatch dL110d@t '(_ any)))) (if (and dL110f@ls/false (apply (lambda (dL1111@id) (dLb71@id? dL1111@id)) dL110f@ls/false)) (apply (lambda (dL1113@id) (let ((dL1115@lab (dLb87@id->label dL1113@id))) (let ((dL1117@b (dLb89@label->binding dL1115@lab dL1108@r))) (let ((dL1119@type (dLb8d@binding-type dL1117@b))) (begin (if (not dL1115@lab) (dLb91@raise-unbound-error dL1113@id) (void)) (if (not (and (eq? dL1119@type '$rtd) (list? (dLb8f@binding-value dL1117@b)))) (dLe58@syntax-violation '#f '"invalid type" dL1107@e) (void)) (dLd9a@chi-expr (cadr (dLb8f@binding-value dL1117@b)) dL1108@r dL1109@mr)))))) dL110f@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL110d@t)))))) (set! dL281f@dLd1a@record-constructor-descriptor-transformer dLd1a@record-constructor-descriptor-transformer) (set! dLd1c@when-macro (lambda (dL111b@e) (let ((dL111d@t dL111b@e)) (let ((dL111f@ls/false (dLd78@syntax-dispatch dL111d@t '(_ any any . each-any)))) (if dL111f@ls/false (apply (lambda (dL1121@test dL1122@e dL1123@e*) (dLd2e@bless (list 'if dL1121@test (cons 'begin (cons dL1122@e dL1123@e*))))) dL111f@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL111d@t)))))) (set! dL2820@dLd1c@when-macro dLd1c@when-macro) (set! dLd1e@unless-macro (lambda (dL1127@e) (let ((dL1129@t dL1127@e)) (let ((dL112b@ls/false (dLd78@syntax-dispatch dL1129@t '(_ any any . each-any)))) (if dL112b@ls/false (apply (lambda (dL112d@test dL112e@e dL112f@e*) (dLd2e@bless (list 'if (list 'not dL112d@test) (cons 'begin (cons dL112e@e dL112f@e*))))) dL112b@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1129@t)))))) (set! dL2821@dLd1e@unless-macro dLd1e@unless-macro) (set! dLd20@if-transformer (lambda (dL1133@e dL1134@r dL1135@mr) (let ((dL1139@t dL1133@e)) (let ((dL113b@ls/false (dLd78@syntax-dispatch dL1139@t '(_ any any any)))) (if dL113b@ls/false (apply (lambda (dL113d@e0 dL113e@e1 dL113f@e2) (list 'if (dLd9a@chi-expr dL113d@e0 dL1134@r dL1135@mr) (dLd9a@chi-expr dL113e@e1 dL1134@r dL1135@mr) (dLd9a@chi-expr dL113f@e2 dL1134@r dL1135@mr))) dL113b@ls/false) (let ((dL1143@t dL1139@t)) (let ((dL1145@ls/false (dLd78@syntax-dispatch dL1143@t '(_ any any)))) (if dL1145@ls/false (apply (lambda (dL1147@e0 dL1148@e1) (list 'if (dLd9a@chi-expr dL1147@e0 dL1134@r dL1135@mr) (dLd9a@chi-expr dL1148@e1 dL1134@r dL1135@mr) (dLad7@dLa38@build-void))) dL1145@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1143@t))))))))) (set! dL2822@dLd20@if-transformer dLd20@if-transformer) (set! dLd22@and-transformer (lambda (dL114b@e dL114c@r dL114d@mr) (let ((dL1151@t dL114b@e)) (let ((dL1153@ls/false (dLd78@syntax-dispatch dL1151@t '(_ . each-any)))) (if dL1153@ls/false (apply (lambda (dL1155@e*) (cons 'and (dLd96@chi-expr* dL1155@e* dL114c@r dL114d@mr))) dL1153@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1151@t)))))) (set! dL2823@dLd22@and-transformer dLd22@and-transformer) (set! dLd24@or-transformer (lambda (dL1157@e dL1158@r dL1159@mr) (let ((dL115d@t dL1157@e)) (let ((dL115f@ls/false (dLd78@syntax-dispatch dL115d@t '(_ . each-any)))) (if dL115f@ls/false (apply (lambda (dL1161@e*) (cons 'or (dLd96@chi-expr* dL1161@e* dL1158@r dL1159@mr))) dL115f@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL115d@t)))))) (set! dL2824@dLd24@or-transformer dLd24@or-transformer) (set! dLd26@case-macro (lambda (dL1163@e) (letrec* ((dL1166@build-last (lambda (dL118d@cls) (let ((dL118f@t dL118d@cls)) (let ((dL1191@ls/false (dLd78@syntax-dispatch dL118f@t '(#(scheme-id else) any . each-any)))) (if dL1191@ls/false (apply (lambda (dL1193@e dL1194@e*) (cons 'begin (cons dL1193@e dL1194@e*))) dL1191@ls/false) (let ((dL1197@t dL118f@t)) (let ((dL1199@ls/false (dLd78@syntax-dispatch dL1197@t '_))) (if dL1199@ls/false (apply (lambda () (dL1168@build-one dL118d@cls '(if #f #f))) dL1199@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1197@t))))))))) (dL1168@build-one (lambda (dL117f@cls dL1180@k) (let ((dL1183@t dL117f@cls)) (let ((dL1185@ls/false (dLd78@syntax-dispatch dL1183@t '(each-any any . each-any)))) (if dL1185@ls/false (apply (lambda (dL1187@d* dL1188@e dL1189@e*) (list 'if (list 'memv 't (list 'quote dL1187@d*)) (cons 'begin (cons dL1188@e dL1189@e*)) dL1180@k)) dL1185@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1183@t))))))) (let ((dL1169@t dL1163@e)) (let ((dL116b@ls/false (dLd78@syntax-dispatch dL1169@t '(_ any)))) (if dL116b@ls/false (apply (lambda (dL116d@expr) (dLd2e@bless (cons 'let (cons (list (list 't dL116d@expr)) '((if #f #f)))))) dL116b@ls/false) (let ((dL116f@t dL1169@t)) (let ((dL1171@ls/false (dLd78@syntax-dispatch dL116f@t '(_ any any . each-any)))) (if dL1171@ls/false (apply (lambda (dL1173@expr dL1174@cls dL1175@cls*) (dLd2e@bless (list 'let (list (list 't dL1173@expr)) (let dL117d@f ((dL1179@cls dL1174@cls) (dL117a@cls* dL1175@cls*)) (if (null? dL117a@cls*) (dL1166@build-last dL1179@cls) (dL1168@build-one dL1179@cls (dL117d@f (car dL117a@cls*) (cdr dL117a@cls*)))))))) dL1171@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL116f@t)))))))))) (set! dL2825@dLd26@case-macro dLd26@case-macro) (set! dLd28@quote-transformer (lambda (dL119b@e dL119c@r dL119d@mr) (let ((dL11a1@t dL119b@e)) (let ((dL11a3@ls/false (dLd78@syntax-dispatch dL11a1@t '(_ any)))) (if dL11a3@ls/false (apply (lambda (dL11a5@datum) (list 'quote (dLb85@stx->datum dL11a5@datum))) dL11a3@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL11a1@t)))))) (set! dL2826@dLd28@quote-transformer dLd28@quote-transformer) (set! dLd2a@case-lambda-transformer (lambda (dL11a7@e dL11a8@r dL11a9@mr) (let ((dL11ad@t dL11a7@e)) (let ((dL11af@ls/false (dLd78@syntax-dispatch dL11ad@t '(_ . #(each (any any . each-any)))))) (if dL11af@ls/false (apply (lambda (dL11b1@fmls* dL11b2@b* dL11b3@b**) (call-with-values (lambda () (dLda2@chi-lambda-clause* dL11a7@e dL11b1@fmls* (map cons dL11b2@b* dL11b3@b**) dL11a8@r dL11a9@mr)) (lambda (dL11bb@dL11b8 dL11bc@dL11ba) (let ((dL11bf@body* dL11bc@dL11ba) (dL11c0@fmls* dL11bb@dL11b8)) (dLad5@dLa08@build-case-lambda '#f dL11c0@fmls* dL11bf@body*))))) dL11af@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL11ad@t)))))) (set! dL2827@dLd2a@case-lambda-transformer dLd2a@case-lambda-transformer) (set! dLd2c@lambda-transformer (lambda (dL11c3@e dL11c4@r dL11c5@mr) (let ((dL11c9@t dL11c3@e)) (let ((dL11cb@ls/false (dLd78@syntax-dispatch dL11c9@t '(_ any any . each-any)))) (if dL11cb@ls/false (apply (lambda (dL11cd@fmls dL11ce@b dL11cf@b*) (call-with-values (lambda () (dLda0@chi-lambda-clause dL11c3@e dL11cd@fmls (cons dL11ce@b dL11cf@b*) dL11c4@r dL11c5@mr)) (lambda (dL11d7@dL11d4 dL11d8@dL11d6) (let ((dL11db@body dL11d8@dL11d6) (dL11dc@fmls dL11d7@dL11d4)) (dLad4@dLa06@build-lambda '#f dL11dc@fmls dL11db@body))))) dL11cb@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL11c9@t)))))) (set! dL2828@dLd2c@lambda-transformer dLd2c@lambda-transformer) (set! dLd2e@bless (lambda (dL11df@x) (dLb59@mkstx (let dL11e3@f ((dL11e1@x dL11df@x)) (if (dLb3d@stx? dL11e1@x) dL11e1@x (if (pair? dL11e1@x) (cons (dL11e3@f (car dL11e1@x)) (dL11e3@f (cdr dL11e1@x))) (if (symbol? dL11e1@x) (dLd00@scheme-stx dL11e1@x) (if (vector? dL11e1@x) (vector-map dL11e3@f dL11e1@x) dL11e1@x))))) '() '() '()))) (set! dL2829@dLd2e@bless dLd2e@bless) (set! dLd30@with-syntax-macro (lambda (dL11e5@e) (let ((dL11e7@t dL11e5@e)) (let ((dL11e9@ls/false (dLd78@syntax-dispatch dL11e7@t '(_ #(each (any any)) any . each-any)))) (if dL11e9@ls/false (apply (lambda (dL11eb@pat* dL11ec@expr* dL11ed@b dL11ee@b*) (let ((dL11f3@idn* (let dL11f7@f ((dL11f5@pat* dL11eb@pat*)) (if (null? dL11f5@pat*) '() (call-with-values (lambda () (dLd76@convert-pattern (car dL11f5@pat*) '())) (lambda (dL11fd@dL11fa dL11fe@dL11fc) (let ((dL1201@idn* dL11fe@dL11fc) (dL1202@pat dL11fd@dL11fa)) (append dL1201@idn* (dL11f7@f (cdr dL11f5@pat*)))))))))) (begin (dLd9e@verify-formals (map car dL11f3@idn*) dL11e5@e) (let ((dL1205@t* (dLe46@generate-temporaries dL11ec@expr*))) (dLd2e@bless (list 'let (map list dL1205@t* dL11ec@expr*) (let dL120b@f ((dL1207@pat* dL11eb@pat*) (dL1208@t* dL1205@t*)) (if (null? dL1207@pat*) (cons 'begin (cons '#f (cons dL11ed@b dL11ee@b*))) (list 'syntax-case (car dL1208@t*) '() (list (car dL1207@pat*) (dL120b@f (cdr dL1207@pat*) (cdr dL1208@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car dL1207@pat*)) (car dL1208@t*)))))))))))) dL11e9@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL11e7@t)))))) (set! dL282a@dLd30@with-syntax-macro dLd30@with-syntax-macro) (set! dLd32@invalid-fmls-error (lambda (dL120d@stx dL120e@fmls) (let ((dL1211@t dL120e@fmls)) (let ((dL1213@ls/false (dLd78@syntax-dispatch dL1211@t '#(each+ any () any)))) (if dL1213@ls/false (apply (lambda (dL1215@id* dL1216@last) (let dL121b@f ((dL1219@id* (if (dLb71@id? dL1216@last) (cons dL1216@last dL1215@id*) (if (dLb67@syntax-null? dL1216@last) dL1215@id* (dLe58@syntax-violation '#f '"not an identifier" dL120d@stx dL1216@last))))) (if (null? dL1219@id*) (values) (if (not (dLb71@id? (car dL1219@id*))) (dLe58@syntax-violation '#f '"not an identifier" dL120d@stx (car dL1219@id*)) (begin (dL121b@f (cdr dL1219@id*)) (if (dLb7d@bound-id-member? (car dL1219@id*) (cdr dL1219@id*)) (dLe58@syntax-violation '#f '"duplicate binding" dL120d@stx (car dL1219@id*)) (void))))))) dL1213@ls/false) (let ((dL121d@t dL1211@t)) (let ((dL121f@ls/false (dLd78@syntax-dispatch dL121d@t '_))) (if dL121f@ls/false (apply (lambda () (dLe58@syntax-violation '#f '"malformed binding form" dL120d@stx dL120e@fmls)) dL121f@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL121d@t))))))))) (set! dL282b@dLd32@invalid-fmls-error dLd32@invalid-fmls-error) (set! dLd34@let-macro (lambda (dL1221@stx) (let ((dL1223@t dL1221@stx)) (let ((dL1225@ls/false (dLd78@syntax-dispatch dL1223@t '(_ #(each (any any)) any . each-any)))) (if dL1225@ls/false (apply (lambda (dL1227@lhs* dL1228@rhs* dL1229@b dL122a@b*) (if (dLb79@valid-bound-ids? dL1227@lhs*) (dLd2e@bless (cons (cons 'lambda (cons dL1227@lhs* (cons dL1229@b dL122a@b*))) dL1228@rhs*)) (dLd32@invalid-fmls-error dL1221@stx dL1227@lhs*))) dL1225@ls/false) (let ((dL122f@t dL1223@t)) (let ((dL1231@ls/false (dLd78@syntax-dispatch dL122f@t '(_ any #(each (any any)) any . each-any)))) (if (and dL1231@ls/false (apply (lambda (dL1233@f dL1234@lhs* dL1235@rhs* dL1236@b dL1237@b*) (dLb71@id? dL1233@f)) dL1231@ls/false)) (apply (lambda (dL123d@f dL123e@lhs* dL123f@rhs* dL1240@b dL1241@b*) (if (dLb79@valid-bound-ids? dL123e@lhs*) (dLd2e@bless (cons (list 'letrec (list (list dL123d@f (cons 'lambda (cons dL123e@lhs* (cons dL1240@b dL1241@b*))))) dL123d@f) dL123f@rhs*)) (dLd32@invalid-fmls-error dL1221@stx dL123e@lhs*))) dL1231@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL122f@t))))))))) (set! dL282c@dLd34@let-macro dLd34@let-macro) (set! dLd36@let-values-macro (lambda (dL1247@stx) (letrec* ((dL124a@rename (lambda (dL12af@x dL12b0@old* dL12b1@new*) (begin (if (not (dLb71@id? dL12af@x)) (dLe58@syntax-violation '#f '"not an indentifier" dL1247@stx dL12af@x) (void)) (if (dLb7d@bound-id-member? dL12af@x dL12b0@old*) (dLe58@syntax-violation '#f '"duplicate binding" dL1247@stx dL12af@x) (void)) (let ((dL12b5@y (gensym (dLe5e@syntax->datum dL12af@x)))) (values dL12b5@y (cons dL12af@x dL12b0@old*) (cons dL12b5@y dL12b1@new*)))))) (dL124c@rename* (lambda (dL129d@x* dL129e@old* dL129f@new*) (if (null? dL129d@x*) (values '() dL129e@old* dL129f@new*) (call-with-values (lambda () (dL124a@rename (car dL129d@x*) dL129e@old* dL129f@new*)) (lambda (dL12a3@x dL12a4@old* dL12a5@new*) (call-with-values (lambda () (dL124c@rename* (cdr dL129d@x*) dL12a4@old* dL12a5@new*)) (lambda (dL12a9@x* dL12aa@old* dL12ab@new*) (values (cons dL12a3@x dL12a9@x*) dL12aa@old* dL12ab@new*))))))))) (let ((dL124d@t dL1247@stx)) (let ((dL124f@ls/false (dLd78@syntax-dispatch dL124d@t '(_ () any . each-any)))) (if dL124f@ls/false (apply (lambda (dL1251@b dL1252@b*) (cons* (dLd2e@bless 'let) '() dL1251@b dL1252@b*)) dL124f@ls/false) (let ((dL1255@t dL124d@t)) (let ((dL1257@ls/false (dLd78@syntax-dispatch dL1255@t '(_ #(each (any any)) any . each-any)))) (if dL1257@ls/false (apply (lambda (dL1259@lhs* dL125a@rhs* dL125b@b dL125c@b*) (dLd2e@bless (let dL1269@f ((dL1261@lhs* dL1259@lhs*) (dL1262@rhs* dL125a@rhs*) (dL1263@old* '()) (dL1264@new* '())) (if (null? dL1261@lhs*) (cons 'let (cons (map list dL1263@old* dL1264@new*) (cons dL125b@b dL125c@b*))) (let ((dL126b@t (car dL1261@lhs*))) (let ((dL126d@ls/false (dLd78@syntax-dispatch dL126b@t 'each-any))) (if dL126d@ls/false (apply (lambda (dL126f@x*) (call-with-values (lambda () (dL124c@rename* dL126f@x* dL1263@old* dL1264@new*)) (lambda (dL1277@dL1272 dL1278@dL1274 dL1279@dL1276) (let ((dL127d@new* dL1279@dL1276) (dL127e@old* dL1278@dL1274) (dL127f@y* dL1277@dL1272)) (list 'call-with-values (list 'lambda '() (car dL1262@rhs*)) (list 'lambda dL127f@y* (dL1269@f (cdr dL1261@lhs*) (cdr dL1262@rhs*) dL127e@old* dL127d@new*))))))) dL126d@ls/false) (let ((dL1283@t dL126b@t)) (let ((dL1285@ls/false (dLd78@syntax-dispatch dL1283@t '#(each+ any () any)))) (if dL1285@ls/false (apply (lambda (dL1287@x* dL1288@x) (call-with-values (lambda () (dL124a@rename dL1288@x dL1263@old* dL1264@new*)) (lambda (dL128b@y dL128c@old* dL128d@new*) (call-with-values (lambda () (dL124c@rename* dL1287@x* dL128c@old* dL128d@new*)) (lambda (dL1291@y* dL1292@old* dL1293@new*) (list 'call-with-values (list 'lambda '() (car dL1262@rhs*)) (list 'lambda (append dL1291@y* dL128b@y) (dL1269@f (cdr dL1261@lhs*) (cdr dL1262@rhs*) dL1292@old* dL1293@new*)))))))) dL1285@ls/false) (let ((dL1297@t dL1283@t)) (let ((dL1299@ls/false (dLd78@syntax-dispatch dL1297@t 'any))) (if dL1299@ls/false (apply (lambda (dL129b@others) (dLe58@syntax-violation '#f '"malformed bindings" dL1247@stx dL129b@others)) dL1299@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1297@t)))))))))))))) dL1257@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1255@t)))))))))) (set! dL282d@dLd36@let-values-macro dLd36@let-values-macro) (set! dLd38@let*-values-macro (lambda (dL12b7@stx) (letrec* ((dL12ba@check (lambda (dL12e9@x*) (if (not (null? dL12e9@x*)) (let ((dL12eb@x (car dL12e9@x*))) (begin (if (not (dLb71@id? dL12eb@x)) (dLe58@syntax-violation '#f '"not an identifier" dL12b7@stx dL12eb@x) (void)) (dL12ba@check (cdr dL12e9@x*)) (if (dLb7d@bound-id-member? dL12eb@x (cdr dL12e9@x*)) (dLe58@syntax-violation '#f '"duplicate identifier" dL12b7@stx dL12eb@x) (void)))) (void))))) (let ((dL12bb@t dL12b7@stx)) (let ((dL12bd@ls/false (dLd78@syntax-dispatch dL12bb@t '(_ () any . each-any)))) (if dL12bd@ls/false (apply (lambda (dL12bf@b dL12c0@b*) (cons* (dLd2e@bless 'let) '() dL12bf@b dL12c0@b*)) dL12bd@ls/false) (let ((dL12c3@t dL12bb@t)) (let ((dL12c5@ls/false (dLd78@syntax-dispatch dL12c3@t '(_ #(each (any any)) any . each-any)))) (if dL12c5@ls/false (apply (lambda (dL12c7@lhs* dL12c8@rhs* dL12c9@b dL12ca@b*) (dLd2e@bless (let dL12d3@f ((dL12cf@lhs* dL12c7@lhs*) (dL12d0@rhs* dL12c8@rhs*)) (if (null? dL12cf@lhs*) (cons 'begin (cons dL12c9@b dL12ca@b*)) (let ((dL12d5@t (car dL12cf@lhs*))) (let ((dL12d7@ls/false (dLd78@syntax-dispatch dL12d5@t 'each-any))) (if dL12d7@ls/false (apply (lambda (dL12d9@x*) (begin (dL12ba@check dL12d9@x*) (list 'call-with-values (list 'lambda '() (car dL12d0@rhs*)) (list 'lambda dL12d9@x* (dL12d3@f (cdr dL12cf@lhs*) (cdr dL12d0@rhs*)))))) dL12d7@ls/false) (let ((dL12db@t dL12d5@t)) (let ((dL12dd@ls/false (dLd78@syntax-dispatch dL12db@t '#(each+ any () any)))) (if dL12dd@ls/false (apply (lambda (dL12df@x* dL12e0@x) (begin (dL12ba@check (cons dL12e0@x dL12df@x*)) (list 'call-with-values (list 'lambda '() (car dL12d0@rhs*)) (list 'lambda (append dL12df@x* dL12e0@x) (dL12d3@f (cdr dL12cf@lhs*) (cdr dL12d0@rhs*)))))) dL12dd@ls/false) (let ((dL12e3@t dL12db@t)) (let ((dL12e5@ls/false (dLd78@syntax-dispatch dL12e3@t 'any))) (if dL12e5@ls/false (apply (lambda (dL12e7@others) (dLe58@syntax-violation '#f '"malformed bindings" dL12b7@stx dL12e7@others)) dL12e5@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL12e3@t)))))))))))))) dL12c5@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL12c3@t)))))))))) (set! dL282e@dLd38@let*-values-macro dLd38@let*-values-macro) (set! dLd3a@trace-lambda-macro (lambda (dL12ed@stx) (let ((dL12ef@t dL12ed@stx)) (let ((dL12f1@ls/false (dLd78@syntax-dispatch dL12ef@t '(_ any each-any any . each-any)))) (if dL12f1@ls/false (apply (lambda (dL12f3@who dL12f4@fmls dL12f5@b dL12f6@b*) (if (dLb79@valid-bound-ids? dL12f4@fmls) (dLd2e@bless (list 'make-traced-procedure (list 'quote dL12f3@who) (cons 'lambda (cons dL12f4@fmls (cons dL12f5@b dL12f6@b*))))) (dLd32@invalid-fmls-error dL12ed@stx dL12f4@fmls))) dL12f1@ls/false) (let ((dL12fb@t dL12ef@t)) (let ((dL12fd@ls/false (dLd78@syntax-dispatch dL12fb@t '(_ any #(each+ any () any) any . each-any)))) (if dL12fd@ls/false (apply (lambda (dL12ff@who dL1300@fmls dL1301@last dL1302@b dL1303@b*) (if (dLb79@valid-bound-ids? (cons dL1301@last dL1300@fmls)) (dLd2e@bless (list 'make-traced-procedure (list 'quote dL12ff@who) (cons 'lambda (cons (append dL1300@fmls dL1301@last) (cons dL1302@b dL1303@b*))))) (dLd32@invalid-fmls-error dL12ed@stx (append dL1300@fmls dL1301@last)))) dL12fd@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL12fb@t))))))))) (set! dL282f@dLd3a@trace-lambda-macro dLd3a@trace-lambda-macro) (set! dLd3c@trace-define-macro (lambda (dL1309@stx) (let ((dL130b@t dL1309@stx)) (let ((dL130d@ls/false (dLd78@syntax-dispatch dL130b@t '(_ (any . each-any) any . each-any)))) (if dL130d@ls/false (apply (lambda (dL130f@who dL1310@fmls dL1311@b dL1312@b*) (if (dLb79@valid-bound-ids? dL1310@fmls) (dLd2e@bless (list 'define dL130f@who (list 'make-traced-procedure (list 'quote dL130f@who) (cons 'lambda (cons dL1310@fmls (cons dL1311@b dL1312@b*)))))) (dLd32@invalid-fmls-error dL1309@stx dL1310@fmls))) dL130d@ls/false) (let ((dL1317@t dL130b@t)) (let ((dL1319@ls/false (dLd78@syntax-dispatch dL1317@t '(_ (any . #(each+ any () any)) any . each-any)))) (if dL1319@ls/false (apply (lambda (dL131b@who dL131c@fmls dL131d@last dL131e@b dL131f@b*) (if (dLb79@valid-bound-ids? (cons dL131d@last dL131c@fmls)) (dLd2e@bless (list 'define dL131b@who (list 'make-traced-procedure (list 'quote dL131b@who) (cons 'lambda (cons (append dL131c@fmls dL131d@last) (cons dL131e@b dL131f@b*)))))) (dLd32@invalid-fmls-error dL1309@stx (append dL131c@fmls dL131d@last)))) dL1319@ls/false) (let ((dL1325@t dL1317@t)) (let ((dL1327@ls/false (dLd78@syntax-dispatch dL1325@t '(_ any any)))) (if dL1327@ls/false (apply (lambda (dL1329@who dL132a@expr) (if (dLb71@id? dL1329@who) (dLd2e@bless (list 'define dL1329@who (list 'let (list (list 'v dL132a@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote dL1329@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (dLe58@syntax-violation '#f '"invalid name" dL1309@stx))) dL1327@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1325@t)))))))))))) (set! dL2830@dLd3c@trace-define-macro dLd3c@trace-define-macro) (set! dLd3e@trace-define-syntax-macro (lambda (dL132d@stx) (let ((dL132f@t dL132d@stx)) (let ((dL1331@ls/false (dLd78@syntax-dispatch dL132f@t '(_ any any)))) (if dL1331@ls/false (apply (lambda (dL1333@who dL1334@expr) (if (dLb71@id? dL1333@who) (dLd2e@bless (list 'define-syntax dL1333@who (list 'make-traced-macro (list 'quote dL1333@who) dL1334@expr))) (dLe58@syntax-violation '#f '"invalid name" dL132d@stx))) dL1331@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL132f@t)))))) (set! dL2831@dLd3e@trace-define-syntax-macro dLd3e@trace-define-syntax-macro) (set! dLd40@trace-let/rec-syntax (lambda (dL1337@who) (lambda (dL1339@stx) (let ((dL133b@t dL1339@stx)) (let ((dL133d@ls/false (dLd78@syntax-dispatch dL133b@t '(_ #(each (any any)) any . each-any)))) (if dL133d@ls/false (apply (lambda (dL133f@lhs* dL1340@rhs* dL1341@b dL1342@b*) (if (dLb79@valid-bound-ids? dL133f@lhs*) (let ((dL1347@rhs* (map (lambda (dL1349@lhs dL134a@rhs) (list 'make-traced-macro (list 'quote dL1349@lhs) dL134a@rhs)) dL133f@lhs* dL1340@rhs*))) (dLd2e@bless (cons dL1337@who (cons (map list dL133f@lhs* dL1347@rhs*) (cons dL1341@b dL1342@b*))))) (dLd32@invalid-fmls-error dL1339@stx dL133f@lhs*))) dL133d@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL133b@t))))))) (set! dL2832@dLd40@trace-let/rec-syntax dLd40@trace-let/rec-syntax) (set! dLd42@trace-let-syntax-macro (dLd40@trace-let/rec-syntax 'let-syntax)) (set! dL2833@dLd42@trace-let-syntax-macro dLd42@trace-let-syntax-macro) (set! dLd44@trace-letrec-syntax-macro (dLd40@trace-let/rec-syntax 'letrec-syntax)) (set! dL2834@dLd44@trace-letrec-syntax-macro dLd44@trace-letrec-syntax-macro) (set! dLd46@guard-macro (lambda (dL134d@x) (letrec* ((dL1350@gen-clauses (lambda (dL1367@con dL1368@outerk dL1369@clause*) (letrec* ((dL136e@f (lambda (dL13a7@x dL13a8@k) (let ((dL13ab@t dL13a7@x)) (let ((dL13ad@ls/false (dLd78@syntax-dispatch dL13ab@t '(any #(scheme-id =>) any)))) (if dL13ad@ls/false (apply (lambda (dL13af@e dL13b0@p) (let ((dL13b3@t (gensym))) (list 'let (list (list dL13b3@t dL13af@e)) (list 'if dL13b3@t (list dL13b0@p dL13b3@t) dL13a8@k)))) dL13ad@ls/false) (let ((dL13b5@t dL13ab@t)) (let ((dL13b7@ls/false (dLd78@syntax-dispatch dL13b5@t '(any)))) (if dL13b7@ls/false (apply (lambda (dL13b9@e) (let ((dL13bb@t (gensym))) (list 'let (list (list dL13bb@t dL13b9@e)) (list 'if dL13bb@t dL13bb@t dL13a8@k)))) dL13b7@ls/false) (let ((dL13bd@t dL13b5@t)) (let ((dL13bf@ls/false (dLd78@syntax-dispatch dL13bd@t '(any any . each-any)))) (if dL13bf@ls/false (apply (lambda (dL13c1@e dL13c2@v dL13c3@v*) (list 'if dL13c1@e (cons 'begin (cons dL13c2@v dL13c3@v*)) dL13a8@k)) dL13bf@ls/false) (let ((dL13c7@t dL13bd@t)) (let ((dL13c9@ls/false (dLd78@syntax-dispatch dL13c7@t '_))) (if dL13c9@ls/false (apply (lambda () (dLe58@syntax-violation '#f '"invalid guard clause" dL13a7@x)) dL13c9@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL13c7@t))))))))))))))) (dL1370@f* (lambda (dL137d@x*) (let ((dL137f@t dL137d@x*)) (let ((dL1381@ls/false (dLd78@syntax-dispatch dL137f@t '()))) (if dL1381@ls/false (apply (lambda () (let ((dL1383@g (gensym))) (values (list dL1383@g (list 'lambda '() (list 'raise-continuable dL1367@con))) dL1383@g))) dL1381@ls/false) (let ((dL1385@t dL137f@t)) (let ((dL1387@ls/false (dLd78@syntax-dispatch dL1385@t '((#(scheme-id else) any . each-any))))) (if dL1387@ls/false (apply (lambda (dL1389@e dL138a@e*) (values (cons 'begin (cons dL1389@e dL138a@e*)) '#f)) dL1387@ls/false) (let ((dL138d@t dL1385@t)) (let ((dL138f@ls/false (dLd78@syntax-dispatch dL138d@t '(any . any)))) (if dL138f@ls/false (apply (lambda (dL1391@cls dL1392@cls*) (call-with-values (lambda () (dL1370@f* dL1392@cls*)) (lambda (dL1399@dL1396 dL139a@dL1398) (let ((dL139d@g dL139a@dL1398) (dL139e@e dL1399@dL1396)) (values (dL136e@f dL1391@cls dL139e@e) dL139d@g))))) dL138f@ls/false) (let ((dL13a1@t dL138d@t)) (let ((dL13a3@ls/false (dLd78@syntax-dispatch dL13a1@t 'any))) (if dL13a3@ls/false (apply (lambda (dL13a5@others) (dLe58@syntax-violation '#f '"invalid guard clause" dL13a5@others)) dL13a3@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL13a1@t)))))))))))))))) (call-with-values (lambda () (dL1370@f* dL1369@clause*)) (lambda (dL1375@dL1372 dL1376@dL1374) (let ((dL1379@raisek dL1376@dL1374) (dL137a@code dL1375@dL1372)) (if dL1379@raisek (list (list 'call/cc (list 'lambda (list dL1379@raisek) (list dL1368@outerk (list 'lambda '() dL137a@code))))) (list dL1368@outerk (list 'lambda '() dL137a@code)))))))))) (let ((dL1351@t dL134d@x)) (let ((dL1353@ls/false (dLd78@syntax-dispatch dL1351@t '(_ (any . each-any) any . each-any)))) (if (and dL1353@ls/false (apply (lambda (dL1355@con dL1356@clause* dL1357@b dL1358@b*) (dLb71@id? dL1355@con)) dL1353@ls/false)) (apply (lambda (dL135d@con dL135e@clause* dL135f@b dL1360@b*) (let ((dL1365@outerk (gensym))) (dLd2e@bless (list (list 'call/cc (list 'lambda (list dL1365@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list dL135d@con) (dL1350@gen-clauses dL135d@con dL1365@outerk dL135e@clause*)) (cons 'lambda (cons '() (cons dL135f@b dL1360@b*))))))))))) dL1353@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1351@t))))))) (set! dL2835@dLd46@guard-macro dLd46@guard-macro) (set! dLd48@define-enumeration-macro (lambda (dL13cb@stx) (letrec* ((dL13ce@set? (lambda (dL13e7@x) (or (null? dL13e7@x) (and (not (memq (car dL13e7@x) (cdr dL13e7@x))) (dL13ce@set? (cdr dL13e7@x)))))) (dL13d0@remove-dups (lambda (dL13e5@ls) (if (null? dL13e5@ls) '() (cons (car dL13e5@ls) (dL13d0@remove-dups (remq (car dL13e5@ls) (cdr dL13e5@ls)))))))) (let ((dL13d1@t dL13cb@stx)) (let ((dL13d3@ls/false (dLd78@syntax-dispatch dL13d1@t '(_ any each-any any)))) (if (and dL13d3@ls/false (apply (lambda (dL13d5@name dL13d6@id* dL13d7@maker) (and (dLb71@id? dL13d5@name) (dLb71@id? dL13d7@maker) (for-all dLb71@id? dL13d6@id*))) dL13d3@ls/false)) (apply (lambda (dL13db@name dL13dc@id* dL13dd@maker) (let ((dL13e1@name* (dL13d0@remove-dups (dLe5e@syntax->datum dL13dc@id*))) (dL13e2@mk (gensym))) (dLd2e@bless (list 'begin (list 'define dL13e2@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote dL13e1@name*)))) (list 'define-syntax dL13db@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote dL13e1@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote dL13db@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax dL13dd@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote dL13dd@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote dL13e1@name*)) (cons 'syntax-violation (cons (list 'quote dL13dd@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons dL13e2@mk '('(n* ...))))))))))))) dL13d3@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL13d1@t))))))) (set! dL2836@dLd48@define-enumeration-macro dLd48@define-enumeration-macro) (set! dLd4a@time-macro (lambda (dL13e9@stx) (let ((dL13eb@t dL13e9@stx)) (let ((dL13ed@ls/false (dLd78@syntax-dispatch dL13eb@t '(_ any)))) (if dL13ed@ls/false (apply (lambda (dL13ef@expr) (dLd2e@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() dL13ef@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) dL13ed@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL13eb@t)))))) (set! dL2837@dLd4a@time-macro dLd4a@time-macro) (set! dLd4c@delay-macro (lambda (dL13f1@stx) (let ((dL13f3@t dL13f1@stx)) (let ((dL13f5@ls/false (dLd78@syntax-dispatch dL13f3@t '(_ any)))) (if dL13f5@ls/false (apply (lambda (dL13f7@expr) (dLd2e@bless (list 'make-promise (list 'lambda '() dL13f7@expr)))) dL13f5@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL13f3@t)))))) (set! dL2838@dLd4c@delay-macro dLd4c@delay-macro) (set! dLd4e@assert-macro (lambda (dL13f9@stx) (let ((dL13fb@t dL13f9@stx)) (let ((dL13fd@ls/false (dLd78@syntax-dispatch dL13fb@t '(_ any)))) (if dL13fd@ls/false (apply (lambda (dL13ff@expr) (let ((dL1401@pos (or (dLe50@expression-position dL13f9@stx) (dLe50@expression-position dL13ff@expr)))) (dLd2e@bless (list 'let (list (list 'x dL13ff@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote dL13ff@expr) (list 'quote dL1401@pos))))))) dL13fd@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL13fb@t)))))) (set! dL2839@dLd4e@assert-macro dLd4e@assert-macro) (set! dLd50@endianness-macro (lambda (dL1403@stx) (let ((dL1405@t dL1403@stx)) (let ((dL1407@ls/false (dLd78@syntax-dispatch dL1405@t '(_ any)))) (if dL1407@ls/false (apply (lambda (dL1409@e) (let ((dL140b@t (dLe5e@syntax->datum dL1409@e))) (if (memv dL140b@t '(little)) (dLd2e@bless ''little) (if (memv dL140b@t '(big)) (dLd2e@bless ''big) (dLe58@syntax-violation '#f '"endianness must be big or little" dL1403@stx))))) dL1407@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1405@t)))))) (set! dL283a@dLd50@endianness-macro dLd50@endianness-macro) (set! dLd52@identifier-syntax-macro (lambda (dL140d@stx) (let ((dL140f@t dL140d@stx)) (let ((dL1411@ls/false (dLd78@syntax-dispatch dL140f@t '(_ any)))) (if dL1411@ls/false (apply (lambda (dL1413@expr) (dLd2e@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax dL1413@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax dL1413@expr) '((syntax (e* ...)))))))))) dL1411@ls/false) (let ((dL1415@t dL140f@t)) (let ((dL1417@ls/false (dLd78@syntax-dispatch dL1415@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and dL1417@ls/false (apply (lambda (dL1419@id1 dL141a@expr1 dL141b@id2 dL141c@expr2 dL141d@expr3) (and (dLb71@id? dL1419@id1) (dLb71@id? dL141b@id2) (dLb71@id? dL141c@expr2))) dL1417@ls/false)) (apply (lambda (dL1423@id1 dL1424@expr1 dL1425@id2 dL1426@expr2 dL1427@expr3) (dLd2e@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax dL1424@expr1)) (list (list 'set! 'id dL1426@expr2) (list 'syntax dL1427@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons dL1424@expr1 '(e* ...))))))))) dL1417@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1415@t))))))))) (set! dL283b@dLd52@identifier-syntax-macro dLd52@identifier-syntax-macro) (set! dLd54@do-macro (lambda (dL142d@stx) (letrec* ((dL1430@bind (lambda (dL1447@x) (let ((dL1449@t dL1447@x)) (let ((dL144b@ls/false (dLd78@syntax-dispatch dL1449@t '(any any)))) (if dL144b@ls/false (apply (lambda (dL144d@x dL144e@init) (list dL144d@x dL144e@init dL144d@x)) dL144b@ls/false) (let ((dL1451@t dL1449@t)) (let ((dL1453@ls/false (dLd78@syntax-dispatch dL1451@t '(any any any)))) (if dL1453@ls/false (apply (lambda (dL1455@x dL1456@init dL1457@step) (list dL1455@x dL1456@init dL1457@step)) dL1453@ls/false) (let ((dL145b@t dL1451@t)) (let ((dL145d@ls/false (dLd78@syntax-dispatch dL145b@t '_))) (if dL145d@ls/false (apply (lambda () (dLe58@syntax-violation '#f '"invalid binding" dL142d@stx)) dL145d@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL145b@t))))))))))))) (let ((dL1431@t dL142d@stx)) (let ((dL1433@ls/false (dLd78@syntax-dispatch dL1431@t '(_ each-any (any . each-any) . each-any)))) (if dL1433@ls/false (apply (lambda (dL1435@binding* dL1436@test dL1437@expr* dL1438@command*) (let ((dL143d@t (map dL1430@bind dL1435@binding*))) (let ((dL143f@ls/false (dLd78@syntax-dispatch dL143d@t '#(each (any any any))))) (if dL143f@ls/false (apply (lambda (dL1441@x* dL1442@init* dL1443@step*) (if (dLb79@valid-bound-ids? dL1441@x*) (dLd2e@bless (list 'letrec (list (list 'loop (list 'lambda dL1441@x* (list 'if dL1436@test (cons 'begin (cons '(if #f #f) dL1437@expr*)) (cons 'begin (append dL1438@command* (list (cons 'loop dL1443@step*)))))))) (cons 'loop dL1442@init*))) (dLe58@syntax-violation '#f '"invalid bindings" dL142d@stx))) dL143f@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL143d@t))))) dL1433@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1431@t))))))) (set! dL283c@dLd54@do-macro dLd54@do-macro) (set! dLd56@let*-macro (lambda (dL145f@stx) (let ((dL1461@t dL145f@stx)) (let ((dL1463@ls/false (dLd78@syntax-dispatch dL1461@t '(_ #(each (any any)) any . each-any)))) (if (and dL1463@ls/false (apply (lambda (dL1465@lhs* dL1466@rhs* dL1467@b dL1468@b*) (for-all dLb71@id? dL1465@lhs*)) dL1463@ls/false)) (apply (lambda (dL146d@lhs* dL146e@rhs* dL146f@b dL1470@b*) (dLd2e@bless (let dL1477@f ((dL1475@x* (map list dL146d@lhs* dL146e@rhs*))) (if (null? dL1475@x*) (cons 'let (cons '() (cons dL146f@b dL1470@b*))) (list 'let (list (car dL1475@x*)) (dL1477@f (cdr dL1475@x*))))))) dL1463@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1461@t)))))) (set! dL283d@dLd56@let*-macro dLd56@let*-macro) (set! dLd58@or-macro (lambda (dL1479@stx) (let ((dL147b@t dL1479@stx)) (let ((dL147d@ls/false (dLd78@syntax-dispatch dL147b@t '(_)))) (if dL147d@ls/false (apply (lambda () '#f) dL147d@ls/false) (let ((dL147f@t dL147b@t)) (let ((dL1481@ls/false (dLd78@syntax-dispatch dL147f@t '(_ any . each-any)))) (if dL1481@ls/false (apply (lambda (dL1483@e dL1484@e*) (dLd2e@bless (let dL148b@f ((dL1487@e dL1483@e) (dL1488@e* dL1484@e*)) (if (null? dL1488@e*) (list 'begin '#f dL1487@e) (list 'let (list (list 't dL1487@e)) (list 'if 't 't (dL148b@f (car dL1488@e*) (cdr dL1488@e*)))))))) dL1481@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL147f@t))))))))) (set! dL283e@dLd58@or-macro dLd58@or-macro) (set! dLd5a@and-macro (lambda (dL148d@stx) (let ((dL148f@t dL148d@stx)) (let ((dL1491@ls/false (dLd78@syntax-dispatch dL148f@t '(_)))) (if dL1491@ls/false (apply (lambda () '#t) dL1491@ls/false) (let ((dL1493@t dL148f@t)) (let ((dL1495@ls/false (dLd78@syntax-dispatch dL1493@t '(_ any . each-any)))) (if dL1495@ls/false (apply (lambda (dL1497@e dL1498@e*) (dLd2e@bless (let dL149f@f ((dL149b@e dL1497@e) (dL149c@e* dL1498@e*)) (if (null? dL149c@e*) (list 'begin '#f dL149b@e) (cons 'if (cons dL149b@e (cons (dL149f@f (car dL149c@e*) (cdr dL149c@e*)) '(#f)))))))) dL1495@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1493@t))))))))) (set! dL283f@dLd5a@and-macro dLd5a@and-macro) (set! dLd5c@cond-macro (lambda (dL14a1@stx) (let ((dL14a3@t dL14a1@stx)) (let ((dL14a5@ls/false (dLd78@syntax-dispatch dL14a3@t '(_ any . each-any)))) (if dL14a5@ls/false (apply (lambda (dL14a7@cls dL14a8@cls*) (dLd2e@bless (let dL14af@f ((dL14ab@cls dL14a7@cls) (dL14ac@cls* dL14a8@cls*)) (if (null? dL14ac@cls*) (let ((dL14b1@t dL14ab@cls)) (let ((dL14b3@ls/false (dLd78@syntax-dispatch dL14b1@t '(#(scheme-id else) any . each-any)))) (if dL14b3@ls/false (apply (lambda (dL14b5@e dL14b6@e*) (cons 'begin (cons dL14b5@e dL14b6@e*))) dL14b3@ls/false) (let ((dL14b9@t dL14b1@t)) (let ((dL14bb@ls/false (dLd78@syntax-dispatch dL14b9@t '(any #(scheme-id =>) any)))) (if dL14bb@ls/false (apply (lambda (dL14bd@e dL14be@p) (list 'let (list (list 't dL14bd@e)) (list 'if 't (cons dL14be@p '(t))))) dL14bb@ls/false) (let ((dL14c1@t dL14b9@t)) (let ((dL14c3@ls/false (dLd78@syntax-dispatch dL14c1@t '(any)))) (if dL14c3@ls/false (apply (lambda (dL14c5@e) (cons 'or (cons dL14c5@e '((if #f #f))))) dL14c3@ls/false) (let ((dL14c7@t dL14c1@t)) (let ((dL14c9@ls/false (dLd78@syntax-dispatch dL14c7@t '(any . each-any)))) (if dL14c9@ls/false (apply (lambda (dL14cb@e dL14cc@e*) (list 'if dL14cb@e (cons 'begin dL14cc@e*))) dL14c9@ls/false) (let ((dL14cf@t dL14c7@t)) (let ((dL14d1@ls/false (dLd78@syntax-dispatch dL14cf@t '_))) (if dL14d1@ls/false (apply (lambda () (dLe58@syntax-violation '#f '"invalid last clause" dL14a1@stx)) dL14d1@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL14cf@t)))))))))))))))) (let ((dL14d3@t dL14ab@cls)) (let ((dL14d5@ls/false (dLd78@syntax-dispatch dL14d3@t '(#(scheme-id else) any . each-any)))) (if dL14d5@ls/false (apply (lambda (dL14d7@e dL14d8@e*) (dLe58@syntax-violation '#f '"incorrect position of keyword else" dL14a1@stx)) dL14d5@ls/false) (let ((dL14db@t dL14d3@t)) (let ((dL14dd@ls/false (dLd78@syntax-dispatch dL14db@t '(any #(scheme-id =>) any)))) (if dL14dd@ls/false (apply (lambda (dL14df@e dL14e0@p) (list 'let (list (list 't dL14df@e)) (list 'if 't (cons dL14e0@p '(t)) (dL14af@f (car dL14ac@cls*) (cdr dL14ac@cls*))))) dL14dd@ls/false) (let ((dL14e3@t dL14db@t)) (let ((dL14e5@ls/false (dLd78@syntax-dispatch dL14e3@t '(any)))) (if dL14e5@ls/false (apply (lambda (dL14e7@e) (list 'or dL14e7@e (dL14af@f (car dL14ac@cls*) (cdr dL14ac@cls*)))) dL14e5@ls/false) (let ((dL14e9@t dL14e3@t)) (let ((dL14eb@ls/false (dLd78@syntax-dispatch dL14e9@t '(any . each-any)))) (if dL14eb@ls/false (apply (lambda (dL14ed@e dL14ee@e*) (list 'if dL14ed@e (cons 'begin dL14ee@e*) (dL14af@f (car dL14ac@cls*) (cdr dL14ac@cls*)))) dL14eb@ls/false) (let ((dL14f1@t dL14e9@t)) (let ((dL14f3@ls/false (dLd78@syntax-dispatch dL14f1@t '_))) (if dL14f3@ls/false (apply (lambda () (dLe58@syntax-violation '#f '"invalid last clause" dL14a1@stx)) dL14f3@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL14f1@t)))))))))))))))))))) dL14a5@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL14a3@t)))))) (set! dL2840@dLd5c@cond-macro dLd5c@cond-macro) (set! dLd5e@do-include (lambda (dL14f5@stx dL14f6@id dL14f7@filename) (let ((dL14fb@filename (dLb85@stx->datum dL14f7@filename))) (begin (if (not (and (string? dL14fb@filename) (dLb71@id? dL14f6@id))) (dLe58@syntax-violation '#f '"invalid syntax" dL14f5@stx) (void)) (cons (dLd2e@bless 'begin) (with-input-from-file dL14fb@filename (lambda () (let dL14ff@f ((dL14fd@ls '())) (let ((dL1501@x (dL6b3@dL583@read-annotated))) (if (eof-object? dL1501@x) (reverse dL14fd@ls) (dL14ff@f (cons (dLb51@datum->stx dL14f6@id dL1501@x) dL14fd@ls)))))))))))) (set! dL2841@dLd5e@do-include dLd5e@do-include) (set! dLd60@include-macro (lambda (dL1503@e) (let ((dL1505@t dL1503@e)) (let ((dL1507@ls/false (dLd78@syntax-dispatch dL1505@t '(any any)))) (if dL1507@ls/false (apply (lambda (dL1509@id dL150a@filename) (dLd5e@do-include dL1503@e dL1509@id dL150a@filename)) dL1507@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1505@t)))))) (set! dL2842@dLd60@include-macro dLd60@include-macro) (set! dLd62@include-into-macro (lambda (dL150d@e) (let ((dL150f@t dL150d@e)) (let ((dL1511@ls/false (dLd78@syntax-dispatch dL150f@t '(_ any any)))) (if dL1511@ls/false (apply (lambda (dL1513@id dL1514@filename) (dLd5e@do-include dL150d@e dL1513@id dL1514@filename)) dL1511@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL150f@t)))))) (set! dL2843@dLd62@include-into-macro dLd62@include-into-macro) (set! dLd64@syntax-rules-macro (lambda (dL1517@e) (let ((dL1519@t dL1517@e)) (let ((dL151b@ls/false (dLd78@syntax-dispatch dL1519@t '(_ each-any . #(each (any any)))))) (if dL151b@ls/false (apply (lambda (dL151d@lits dL151e@pat* dL151f@tmp*) (begin (dLd7e@verify-literals dL151d@lits dL1517@e) (dLd2e@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons dL151d@lits (map (lambda (dL1523@pat dL1524@tmp) (let ((dL1527@t dL1523@pat)) (let ((dL1529@ls/false (dLd78@syntax-dispatch dL1527@t '(_ . any)))) (if dL1529@ls/false (apply (lambda (dL152b@rest) (list (cons 'g dL152b@rest) (list 'syntax dL1524@tmp))) dL1529@ls/false) (let ((dL152d@t dL1527@t)) (let ((dL152f@ls/false (dLd78@syntax-dispatch dL152d@t '_))) (if dL152f@ls/false (apply (lambda () (dLe58@syntax-violation '#f '"invalid syntax-rules pattern" dL1517@e dL1523@pat)) dL152f@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL152d@t)))))))) dL151e@pat* dL151f@tmp*)))))))) dL151b@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1519@t)))))) (set! dL2844@dLd64@syntax-rules-macro dLd64@syntax-rules-macro) (set! dLd66@quasiquote-macro (letrec* ((dL1532@datum (lambda (dL1633@x) (list (dLd00@scheme-stx 'quote) (dLb59@mkstx dL1633@x '() '() '())))) (dL154e@quasicons* (lambda (dL162b@x dL162c@y) (let dL1631@f ((dL162f@x dL162b@x)) (if (null? dL162f@x) dL162c@y (dL1550@quasicons (car dL162f@x) (dL1631@f (cdr dL162f@x))))))) (dL1550@quasicons (lambda (dL1605@x dL1606@y) (let ((dL1609@t dL1606@y)) (let ((dL160b@ls/false (dLd78@syntax-dispatch dL1609@t '(#(scheme-id quote) any)))) (if dL160b@ls/false (apply (lambda (dL160d@dy) (let ((dL160f@t dL1605@x)) (let ((dL1611@ls/false (dLd78@syntax-dispatch dL160f@t '(#(scheme-id quote) any)))) (if dL1611@ls/false (apply (lambda (dL1613@dx) (list (dLd00@scheme-stx 'quote) (cons dL1613@dx dL160d@dy))) dL1611@ls/false) (let ((dL1615@t dL160f@t)) (let ((dL1617@ls/false (dLd78@syntax-dispatch dL1615@t '_))) (if dL1617@ls/false (apply (lambda () (let ((dL1619@t dL160d@dy)) (let ((dL161b@ls/false (dLd78@syntax-dispatch dL1619@t '()))) (if dL161b@ls/false (apply (lambda () (list (dLd00@scheme-stx 'list) dL1605@x)) dL161b@ls/false) (let ((dL161d@t dL1619@t)) (let ((dL161f@ls/false (dLd78@syntax-dispatch dL161d@t '_))) (if dL161f@ls/false (apply (lambda () (list (dLd00@scheme-stx 'cons) dL1605@x dL1606@y)) dL161f@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL161d@t)))))))) dL1617@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1615@t)))))))) dL160b@ls/false) (let ((dL1621@t dL1609@t)) (let ((dL1623@ls/false (dLd78@syntax-dispatch dL1621@t '(#(scheme-id list) . each-any)))) (if dL1623@ls/false (apply (lambda (dL1625@stuff) (cons* (dLd00@scheme-stx 'list) dL1605@x dL1625@stuff)) dL1623@ls/false) (let ((dL1627@t dL1621@t)) (let ((dL1629@ls/false (dLd78@syntax-dispatch dL1627@t '_))) (if dL1629@ls/false (apply (lambda () (list (dLd00@scheme-stx 'cons) dL1605@x dL1606@y)) dL1629@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1627@t)))))))))))) (dL1552@quasiappend (lambda (dL15eb@x dL15ec@y) (let ((dL15ef@ls (let dL15f3@f ((dL15f1@x dL15eb@x)) (if (null? dL15f1@x) (let ((dL15f5@t dL15ec@y)) (let ((dL15f7@ls/false (dLd78@syntax-dispatch dL15f5@t '(#(scheme-id quote) ())))) (if dL15f7@ls/false (apply (lambda () '()) dL15f7@ls/false) (let ((dL15f9@t dL15f5@t)) (let ((dL15fb@ls/false (dLd78@syntax-dispatch dL15f9@t '_))) (if dL15fb@ls/false (apply (lambda () (list dL15ec@y)) dL15fb@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL15f9@t))))))) (let ((dL15fd@t (car dL15f1@x))) (let ((dL15ff@ls/false (dLd78@syntax-dispatch dL15fd@t '(#(scheme-id quote) ())))) (if dL15ff@ls/false (apply (lambda () (dL15f3@f (cdr dL15f1@x))) dL15ff@ls/false) (let ((dL1601@t dL15fd@t)) (let ((dL1603@ls/false (dLd78@syntax-dispatch dL1601@t '_))) (if dL1603@ls/false (apply (lambda () (cons (car dL15f1@x) (dL15f3@f (cdr dL15f1@x)))) dL1603@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1601@t))))))))))) (if (null? dL15ef@ls) (list (dLd00@scheme-stx 'quote) '()) (if (null? (cdr dL15ef@ls)) (car dL15ef@ls) (cons* (dLd00@scheme-stx 'append) dL15ef@ls)))))) (dL1554@quasivector (lambda (dL15b9@x) (let ((dL15bb@pat-x dL15b9@x)) (let ((dL15bd@t dL15bb@pat-x)) (let ((dL15bf@ls/false (dLd78@syntax-dispatch dL15bd@t '(#(scheme-id quote) each-any)))) (if dL15bf@ls/false (apply (lambda (dL15c1@x*) (list (dLd00@scheme-stx 'quote) (list->vector dL15c1@x*))) dL15bf@ls/false) (let ((dL15c3@t dL15bd@t)) (let ((dL15c5@ls/false (dLd78@syntax-dispatch dL15c3@t '_))) (if dL15c5@ls/false (apply (lambda () (let dL15cd@f ((dL15c7@x dL15b9@x) (dL15c8@k (lambda (dL15cb@ls) (cons* (dLd00@scheme-stx 'vector) dL15cb@ls)))) (let ((dL15cf@t dL15c7@x)) (let ((dL15d1@ls/false (dLd78@syntax-dispatch dL15cf@t '(#(scheme-id quote) each-any)))) (if dL15d1@ls/false (apply (lambda (dL15d3@x*) (dL15c8@k (map (lambda (dL15d5@x) (list (dLd00@scheme-stx 'quote) dL15d5@x)) dL15d3@x*))) dL15d1@ls/false) (let ((dL15d7@t dL15cf@t)) (let ((dL15d9@ls/false (dLd78@syntax-dispatch dL15d7@t '(#(scheme-id list) . each-any)))) (if dL15d9@ls/false (apply (lambda (dL15db@x*) (dL15c8@k dL15db@x*)) dL15d9@ls/false) (let ((dL15dd@t dL15d7@t)) (let ((dL15df@ls/false (dLd78@syntax-dispatch dL15dd@t '(#(scheme-id cons) any any)))) (if dL15df@ls/false (apply (lambda (dL15e1@x dL15e2@y) (dL15cd@f dL15e2@y (lambda (dL15e5@ls) (dL15c8@k (cons dL15e1@x dL15e5@ls))))) dL15df@ls/false) (let ((dL15e7@t dL15dd@t)) (let ((dL15e9@ls/false (dLd78@syntax-dispatch dL15e7@t '_))) (if dL15e9@ls/false (apply (lambda () (list (dLd00@scheme-stx 'list->vector) dL15bb@pat-x)) dL15e9@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL15e7@t))))))))))))))) dL15c5@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL15c3@t)))))))))) (dL1556@vquasi (lambda (dL1597@p dL1598@lev) (let ((dL159b@t dL1597@p)) (let ((dL159d@ls/false (dLd78@syntax-dispatch dL159b@t '(any . any)))) (if dL159d@ls/false (apply (lambda (dL159f@p dL15a0@q) (let ((dL15a3@t dL159f@p)) (let ((dL15a5@ls/false (dLd78@syntax-dispatch dL15a3@t '(#(scheme-id unquote) . each-any)))) (if dL15a5@ls/false (apply (lambda (dL15a7@p) (if (= dL1598@lev '0) (dL154e@quasicons* dL15a7@p (dL1556@vquasi dL15a0@q dL1598@lev)) (dL1550@quasicons (dL1550@quasicons (dL1532@datum 'unquote) (dL1558@quasi dL15a7@p (- dL1598@lev '1))) (dL1556@vquasi dL15a0@q dL1598@lev)))) dL15a5@ls/false) (let ((dL15a9@t dL15a3@t)) (let ((dL15ab@ls/false (dLd78@syntax-dispatch dL15a9@t '(#(scheme-id unquote-splicing) . each-any)))) (if dL15ab@ls/false (apply (lambda (dL15ad@p) (if (= dL1598@lev '0) (dL1552@quasiappend dL15ad@p (dL1556@vquasi dL15a0@q dL1598@lev)) (dL1550@quasicons (dL1550@quasicons (dL1532@datum 'unquote-splicing) (dL1558@quasi dL15ad@p (- dL1598@lev '1))) (dL1556@vquasi dL15a0@q dL1598@lev)))) dL15ab@ls/false) (let ((dL15af@t dL15a9@t)) (let ((dL15b1@ls/false (dLd78@syntax-dispatch dL15af@t 'any))) (if dL15b1@ls/false (apply (lambda (dL15b3@p) (dL1550@quasicons (dL1558@quasi dL15b3@p dL1598@lev) (dL1556@vquasi dL15a0@q dL1598@lev))) dL15b1@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL15af@t))))))))))) dL159d@ls/false) (let ((dL15b5@t dL159b@t)) (let ((dL15b7@ls/false (dLd78@syntax-dispatch dL15b5@t '()))) (if dL15b7@ls/false (apply (lambda () (list (dLd00@scheme-stx 'quote) '())) dL15b7@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL15b5@t))))))))) (dL1558@quasi (lambda (dL1561@p dL1562@lev) (let ((dL1565@t dL1561@p)) (let ((dL1567@ls/false (dLd78@syntax-dispatch dL1565@t '(#(scheme-id unquote) any)))) (if dL1567@ls/false (apply (lambda (dL1569@p) (if (= dL1562@lev '0) dL1569@p (dL1550@quasicons (dL1532@datum 'unquote) (dL1558@quasi (list dL1569@p) (- dL1562@lev '1))))) dL1567@ls/false) (let ((dL156b@t dL1565@t)) (let ((dL156d@ls/false (dLd78@syntax-dispatch dL156b@t '((#(scheme-id unquote) . each-any) . any)))) (if dL156d@ls/false (apply (lambda (dL156f@p dL1570@q) (if (= dL1562@lev '0) (dL154e@quasicons* dL156f@p (dL1558@quasi dL1570@q dL1562@lev)) (dL1550@quasicons (dL1550@quasicons (dL1532@datum 'unquote) (dL1558@quasi dL156f@p (- dL1562@lev '1))) (dL1558@quasi dL1570@q dL1562@lev)))) dL156d@ls/false) (let ((dL1573@t dL156b@t)) (let ((dL1575@ls/false (dLd78@syntax-dispatch dL1573@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if dL1575@ls/false (apply (lambda (dL1577@p dL1578@q) (if (= dL1562@lev '0) (dL1552@quasiappend dL1577@p (dL1558@quasi dL1578@q dL1562@lev)) (dL1550@quasicons (dL1550@quasicons (dL1532@datum 'unquote-splicing) (dL1558@quasi dL1577@p (- dL1562@lev '1))) (dL1558@quasi dL1578@q dL1562@lev)))) dL1575@ls/false) (let ((dL157b@t dL1573@t)) (let ((dL157d@ls/false (dLd78@syntax-dispatch dL157b@t '(#(scheme-id quasiquote) any)))) (if dL157d@ls/false (apply (lambda (dL157f@p) (dL1550@quasicons (dL1532@datum 'quasiquote) (dL1558@quasi (list dL157f@p) (+ dL1562@lev '1)))) dL157d@ls/false) (let ((dL1581@t dL157b@t)) (let ((dL1583@ls/false (dLd78@syntax-dispatch dL1581@t '(any . any)))) (if dL1583@ls/false (apply (lambda (dL1585@p dL1586@q) (dL1550@quasicons (dL1558@quasi dL1585@p dL1562@lev) (dL1558@quasi dL1586@q dL1562@lev))) dL1583@ls/false) (let ((dL1589@t dL1581@t)) (let ((dL158b@ls/false (dLd78@syntax-dispatch dL1589@t '#(vector each-any)))) (if (and dL158b@ls/false (apply (lambda (dL158d@x) (not (dLb3d@stx? dL158d@x))) dL158b@ls/false)) (apply (lambda (dL158f@x) (dL1554@quasivector (dL1556@vquasi dL158f@x dL1562@lev))) dL158b@ls/false) (let ((dL1591@t dL1589@t)) (let ((dL1593@ls/false (dLd78@syntax-dispatch dL1591@t 'any))) (if dL1593@ls/false (apply (lambda (dL1595@p) (list (dLd00@scheme-stx 'quote) dL1595@p)) dL1593@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1591@t))))))))))))))))))))))))) (lambda (dL1559@x) (let ((dL155b@t dL1559@x)) (let ((dL155d@ls/false (dLd78@syntax-dispatch dL155b@t '(_ any)))) (if dL155d@ls/false (apply (lambda (dL155f@e) (dL1558@quasi dL155f@e '0)) dL155d@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL155b@t))))))) (set! dL2845@dLd66@quasiquote-macro dLd66@quasiquote-macro) (set! dLd68@quasisyntax-macro (letrec* ((dL1636@quasi (lambda (dL1651@p dL1652@lev) (let ((dL1655@t dL1651@p)) (let ((dL1657@ls/false (dLd78@syntax-dispatch dL1655@t '(#(scheme-id unsyntax) any)))) (if dL1657@ls/false (apply (lambda (dL1659@p) (if (= dL1652@lev '0) (let ((dL165b@g (gensym))) (values (list dL165b@g) (list dL1659@p) dL165b@g)) (call-with-values (lambda () (dL1636@quasi dL1659@p (- dL1652@lev '1))) (lambda (dL1663@dL165e dL1664@dL1660 dL1665@dL1662) (let ((dL1669@p dL1665@dL1662) (dL166a@rhs* dL1664@dL1660) (dL166b@lhs* dL1663@dL165e)) (values dL166b@lhs* dL166a@rhs* (list 'unsyntax dL1669@p))))))) dL1657@ls/false) (let ((dL166f@t dL1655@t)) (let ((dL1671@ls/false (dLd78@syntax-dispatch dL166f@t '#(scheme-id unsyntax)))) (if (and dL1671@ls/false (apply (lambda () (= dL1652@lev '0)) dL1671@ls/false)) (apply (lambda () (dLe58@syntax-violation '#f '"incorrect use of unsyntax" dL1651@p)) dL1671@ls/false) (let ((dL1673@t dL166f@t)) (let ((dL1675@ls/false (dLd78@syntax-dispatch dL1673@t '((#(scheme-id unsyntax) . each-any) . any)))) (if dL1675@ls/false (apply (lambda (dL1677@p* dL1678@q) (call-with-values (lambda () (dL1636@quasi dL1678@q dL1652@lev)) (lambda (dL1681@dL167c dL1682@dL167e dL1683@dL1680) (let ((dL1687@q dL1683@dL1680) (dL1688@rhs* dL1682@dL167e) (dL1689@lhs* dL1681@dL167c)) (if (= dL1652@lev '0) (let ((dL168d@g* (map (lambda (dL168f@x) (gensym)) dL1677@p*))) (values (append dL168d@g* dL1689@lhs*) (append dL1677@p* dL1688@rhs*) (append dL168d@g* dL1687@q))) (call-with-values (lambda () (dL1636@quasi dL1677@p* (- dL1652@lev '1))) (lambda (dL1697@dL1692 dL1698@dL1694 dL1699@dL1696) (let ((dL169d@p* dL1699@dL1696) (dL169e@rhs2* dL1698@dL1694) (dL169f@lhs2* dL1697@dL1692)) (values (append dL169f@lhs2* dL1689@lhs*) (append dL169e@rhs2* dL1688@rhs*) (cons (cons 'unsyntax dL169d@p*) dL1687@q)))))))))) dL1675@ls/false) (let ((dL16a3@t dL1673@t)) (let ((dL16a5@ls/false (dLd78@syntax-dispatch dL16a3@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if dL16a5@ls/false (apply (lambda (dL16a7@p* dL16a8@q) (call-with-values (lambda () (dL1636@quasi dL16a8@q dL1652@lev)) (lambda (dL16b1@dL16ac dL16b2@dL16ae dL16b3@dL16b0) (let ((dL16b7@q dL16b3@dL16b0) (dL16b8@rhs* dL16b2@dL16ae) (dL16b9@lhs* dL16b1@dL16ac)) (if (= dL1652@lev '0) (let ((dL16bd@g* (map (lambda (dL16bf@x) (gensym)) dL16a7@p*))) (values (append (map (lambda (dL16c1@g) (cons dL16c1@g '(...))) dL16bd@g*) dL16b9@lhs*) (append dL16a7@p* dL16b8@rhs*) (append (apply append (map (lambda (dL16c3@g) (cons dL16c3@g '(...))) dL16bd@g*)) dL16b7@q))) (call-with-values (lambda () (dL1636@quasi dL16a7@p* (- dL1652@lev '1))) (lambda (dL16cb@dL16c6 dL16cc@dL16c8 dL16cd@dL16ca) (let ((dL16d1@p* dL16cd@dL16ca) (dL16d2@rhs2* dL16cc@dL16c8) (dL16d3@lhs2* dL16cb@dL16c6)) (values (append dL16d3@lhs2* dL16b9@lhs*) (append dL16d2@rhs2* dL16b8@rhs*) (cons (cons 'unsyntax-splicing dL16d1@p*) dL16b7@q)))))))))) dL16a5@ls/false) (let ((dL16d7@t dL16a3@t)) (let ((dL16d9@ls/false (dLd78@syntax-dispatch dL16d7@t '#(scheme-id unsyntax-splicing)))) (if (and dL16d9@ls/false (apply (lambda () (= dL1652@lev '0)) dL16d9@ls/false)) (apply (lambda () (dLe58@syntax-violation '#f '"incorrect use of unsyntax-splicing" dL1651@p)) dL16d9@ls/false) (let ((dL16db@t dL16d7@t)) (let ((dL16dd@ls/false (dLd78@syntax-dispatch dL16db@t '(#(scheme-id quasisyntax) any)))) (if dL16dd@ls/false (apply (lambda (dL16df@p) (call-with-values (lambda () (dL1636@quasi dL16df@p (+ dL1652@lev '1))) (lambda (dL16e7@dL16e2 dL16e8@dL16e4 dL16e9@dL16e6) (let ((dL16ed@p dL16e9@dL16e6) (dL16ee@rhs* dL16e8@dL16e4) (dL16ef@lhs* dL16e7@dL16e2)) (values dL16ef@lhs* dL16ee@rhs* (list 'quasisyntax dL16ed@p)))))) dL16dd@ls/false) (let ((dL16f3@t dL16db@t)) (let ((dL16f5@ls/false (dLd78@syntax-dispatch dL16f3@t '(any . any)))) (if dL16f5@ls/false (apply (lambda (dL16f7@p dL16f8@q) (call-with-values (lambda () (dL1636@quasi dL16f7@p dL1652@lev)) (lambda (dL1707@dL16fc dL1708@dL16fe dL1709@dL1700) (call-with-values (lambda () (dL1636@quasi dL16f8@q dL1652@lev)) (lambda (dL170d@dL1702 dL170e@dL1704 dL170f@dL1706) (let ((dL1713@q dL170f@dL1706) (dL1714@rhs2* dL170e@dL1704) (dL1715@lhs2* dL170d@dL1702) (dL1716@p dL1709@dL1700) (dL1717@rhs* dL1708@dL16fe) (dL1718@lhs* dL1707@dL16fc)) (values (append dL1715@lhs2* dL1718@lhs*) (append dL1714@rhs2* dL1717@rhs*) (cons dL1716@p dL1713@q)))))))) dL16f5@ls/false) (let ((dL171f@t dL16f3@t)) (let ((dL1721@ls/false (dLd78@syntax-dispatch dL171f@t '#(vector each-any)))) (if dL1721@ls/false (apply (lambda (dL1723@x*) (call-with-values (lambda () (dL1636@quasi dL1723@x* dL1652@lev)) (lambda (dL172b@dL1726 dL172c@dL1728 dL172d@dL172a) (let ((dL1731@x* dL172d@dL172a) (dL1732@rhs* dL172c@dL1728) (dL1733@lhs* dL172b@dL1726)) (values dL1733@lhs* dL1732@rhs* (list->vector dL1731@x*)))))) dL1721@ls/false) (let ((dL1737@t dL171f@t)) (let ((dL1739@ls/false (dLd78@syntax-dispatch dL1737@t '_))) (if dL1739@ls/false (apply (lambda () (values '() '() dL1651@p)) dL1739@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1737@t))))))))))))))))))))))))))))))) (lambda (dL1637@x) (let ((dL1639@t dL1637@x)) (let ((dL163b@ls/false (dLd78@syntax-dispatch dL1639@t '(_ any)))) (if dL163b@ls/false (apply (lambda (dL163d@e) (call-with-values (lambda () (dL1636@quasi dL163d@e '0)) (lambda (dL1645@dL1640 dL1646@dL1642 dL1647@dL1644) (let ((dL164b@v dL1647@dL1644) (dL164c@rhs* dL1646@dL1642) (dL164d@lhs* dL1645@dL1640)) (dLd2e@bless (list 'syntax-case (cons 'list dL164c@rhs*) '() (list dL164d@lhs* (list 'syntax dL164b@v)))))))) dL163b@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1639@t))))))) (set! dL2846@dLd68@quasisyntax-macro dLd68@quasisyntax-macro) (set! dLd6a@define-struct-macro (lambda (dL173b@stx) (dLe58@syntax-violation '#f '"define-struct not supported" dL173b@stx))) (set! dL2847@dLd6a@define-struct-macro dLd6a@define-struct-macro) (set! dLd6c@define-record-type-macro (lambda (dL173d@x) (letrec* ((dL1740@id (lambda (dL1933@ctxt . dL1935@str*) (dLe5c@datum->syntax dL1933@ctxt (string->symbol (apply string-append (map (lambda (dL1937@x) (if (symbol? dL1937@x) (symbol->string dL1937@x) (if (string? dL1937@x) dL1937@x (assertion-violation 'define-record-type '"BUG")))) dL1935@str*)))))) (dL1742@get-record-name (lambda (dL1921@spec) (let ((dL1923@t dL1921@spec)) (let ((dL1925@ls/false (dLd78@syntax-dispatch dL1923@t '(any any any)))) (if dL1925@ls/false (apply (lambda (dL1927@foo dL1928@make-foo dL1929@foo?) dL1927@foo) dL1925@ls/false) (let ((dL192d@t dL1923@t)) (let ((dL192f@ls/false (dLd78@syntax-dispatch dL192d@t 'any))) (if dL192f@ls/false (apply (lambda (dL1931@foo) dL1931@foo) dL192f@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL192d@t))))))))) (dL1744@get-record-constructor-name (lambda (dL190d@spec) (let ((dL190f@t dL190d@spec)) (let ((dL1911@ls/false (dLd78@syntax-dispatch dL190f@t '(any any any)))) (if dL1911@ls/false (apply (lambda (dL1913@foo dL1914@make-foo dL1915@foo?) dL1914@make-foo) dL1911@ls/false) (let ((dL1919@t dL190f@t)) (let ((dL191b@ls/false (dLd78@syntax-dispatch dL1919@t 'any))) (if (and dL191b@ls/false (apply (lambda (dL191d@foo) (dLb71@id? dL191d@foo)) dL191b@ls/false)) (apply (lambda (dL191f@foo) (dL1740@id dL191f@foo '"make-" (dLb85@stx->datum dL191f@foo))) dL191b@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1919@t))))))))) (dL1746@get-record-predicate-name (lambda (dL18f9@spec) (let ((dL18fb@t dL18f9@spec)) (let ((dL18fd@ls/false (dLd78@syntax-dispatch dL18fb@t '(any any any)))) (if dL18fd@ls/false (apply (lambda (dL18ff@foo dL1900@make-foo dL1901@foo?) dL1901@foo?) dL18fd@ls/false) (let ((dL1905@t dL18fb@t)) (let ((dL1907@ls/false (dLd78@syntax-dispatch dL1905@t 'any))) (if (and dL1907@ls/false (apply (lambda (dL1909@foo) (dLb71@id? dL1909@foo)) dL1907@ls/false)) (apply (lambda (dL190b@foo) (dL1740@id dL190b@foo (dLb85@stx->datum dL190b@foo) '"?")) dL1907@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1905@t))))))))) (dL1748@get-clause (lambda (dL18e7@id dL18e8@ls) (let ((dL18eb@t dL18e8@ls)) (let ((dL18ed@ls/false (dLd78@syntax-dispatch dL18eb@t '()))) (if dL18ed@ls/false (apply (lambda () '#f) dL18ed@ls/false) (let ((dL18ef@t dL18eb@t)) (let ((dL18f1@ls/false (dLd78@syntax-dispatch dL18ef@t '((any . any) . any)))) (if dL18f1@ls/false (apply (lambda (dL18f3@x dL18f4@rest dL18f5@ls) (if (dLb77@free-id=? (dLd2e@bless dL18e7@id) dL18f3@x) (cons dL18f3@x dL18f4@rest) (dL1748@get-clause dL18e7@id dL18f5@ls))) dL18f1@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL18ef@t))))))))) (dL174a@foo-rtd-code (lambda (dL1895@name dL1896@clause* dL1897@parent-rtd-code) (letrec* ((dL189c@convert-field-spec* (lambda (dL18cd@ls) (list->vector (map (lambda (dL18cf@x) (let ((dL18d1@t dL18cf@x)) (let ((dL18d3@ls/false (dLd78@syntax-dispatch dL18d1@t '(#(scheme-id mutable) any . any)))) (if dL18d3@ls/false (apply (lambda (dL18d5@name dL18d6@rest) (list 'mutable dL18d5@name)) dL18d3@ls/false) (let ((dL18d9@t dL18d1@t)) (let ((dL18db@ls/false (dLd78@syntax-dispatch dL18d9@t '(#(scheme-id immutable) any . any)))) (if dL18db@ls/false (apply (lambda (dL18dd@name dL18de@rest) (list 'immutable dL18dd@name)) dL18db@ls/false) (let ((dL18e1@t dL18d9@t)) (let ((dL18e3@ls/false (dLd78@syntax-dispatch dL18e1@t 'any))) (if dL18e3@ls/false (apply (lambda (dL18e5@name) (list 'immutable dL18e5@name)) dL18e3@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL18e1@t))))))))))) dL18cd@ls))))) (let ((dL189d@uid-code (let ((dL18a5@t (dL1748@get-clause 'nongenerative dL1896@clause*))) (let ((dL18a7@ls/false (dLd78@syntax-dispatch dL18a5@t '(_)))) (if dL18a7@ls/false (apply (lambda () (list 'quote (gensym))) dL18a7@ls/false) (let ((dL18a9@t dL18a5@t)) (let ((dL18ab@ls/false (dLd78@syntax-dispatch dL18a9@t '(_ any)))) (if dL18ab@ls/false (apply (lambda (dL18ad@uid) (list 'quote dL18ad@uid)) dL18ab@ls/false) (let ((dL18af@t dL18a9@t)) (let ((dL18b1@ls/false (dLd78@syntax-dispatch dL18af@t '_))) (if dL18b1@ls/false (apply (lambda () '#f) dL18b1@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL18af@t))))))))))) (dL189e@sealed? (let ((dL18b3@t (dL1748@get-clause 'sealed dL1896@clause*))) (let ((dL18b5@ls/false (dLd78@syntax-dispatch dL18b3@t '(_ #(atom #t))))) (if dL18b5@ls/false (apply (lambda () '#t) dL18b5@ls/false) (let ((dL18b7@t dL18b3@t)) (let ((dL18b9@ls/false (dLd78@syntax-dispatch dL18b7@t '_))) (if dL18b9@ls/false (apply (lambda () '#f) dL18b9@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL18b7@t)))))))) (dL189f@opaque? (let ((dL18bb@t (dL1748@get-clause 'opaque dL1896@clause*))) (let ((dL18bd@ls/false (dLd78@syntax-dispatch dL18bb@t '(_ #(atom #t))))) (if dL18bd@ls/false (apply (lambda () '#t) dL18bd@ls/false) (let ((dL18bf@t dL18bb@t)) (let ((dL18c1@ls/false (dLd78@syntax-dispatch dL18bf@t '_))) (if dL18c1@ls/false (apply (lambda () '#f) dL18c1@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL18bf@t)))))))) (dL18a0@fields (let ((dL18c3@t (dL1748@get-clause 'fields dL1896@clause*))) (let ((dL18c5@ls/false (dLd78@syntax-dispatch dL18c3@t '(_ . each-any)))) (if dL18c5@ls/false (apply (lambda (dL18c7@field-spec*) (list 'quote (dL189c@convert-field-spec* dL18c7@field-spec*))) dL18c5@ls/false) (let ((dL18c9@t dL18c3@t)) (let ((dL18cb@ls/false (dLd78@syntax-dispatch dL18c9@t '_))) (if dL18cb@ls/false (apply (lambda () ''#()) dL18cb@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL18c9@t))))))))) (dLd2e@bless (list 'make-record-type-descriptor (list 'quote dL1895@name) dL1897@parent-rtd-code dL189d@uid-code dL189e@sealed? dL189f@opaque? dL18a0@fields)))))) (dL174c@parent-rtd-code (lambda (dL187d@clause*) (let ((dL187f@t (dL1748@get-clause 'parent dL187d@clause*))) (let ((dL1881@ls/false (dLd78@syntax-dispatch dL187f@t '(_ any)))) (if dL1881@ls/false (apply (lambda (dL1883@name) (list 'record-type-descriptor dL1883@name)) dL1881@ls/false) (let ((dL1885@t dL187f@t)) (let ((dL1887@ls/false (dLd78@syntax-dispatch dL1885@t '#(atom #f)))) (if dL1887@ls/false (apply (lambda () (let ((dL1889@t (dL1748@get-clause 'parent-rtd dL187d@clause*))) (let ((dL188b@ls/false (dLd78@syntax-dispatch dL1889@t '(_ any any)))) (if dL188b@ls/false (apply (lambda (dL188d@rtd dL188e@rcd) dL188d@rtd) dL188b@ls/false) (let ((dL1891@t dL1889@t)) (let ((dL1893@ls/false (dLd78@syntax-dispatch dL1891@t '#(atom #f)))) (if dL1893@ls/false (apply (lambda () '#f) dL1893@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1891@t)))))))) dL1887@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1885@t))))))))) (dL174e@parent-rcd-code (lambda (dL1865@clause*) (let ((dL1867@t (dL1748@get-clause 'parent dL1865@clause*))) (let ((dL1869@ls/false (dLd78@syntax-dispatch dL1867@t '(_ any)))) (if dL1869@ls/false (apply (lambda (dL186b@name) (list 'record-constructor-descriptor dL186b@name)) dL1869@ls/false) (let ((dL186d@t dL1867@t)) (let ((dL186f@ls/false (dLd78@syntax-dispatch dL186d@t '#(atom #f)))) (if dL186f@ls/false (apply (lambda () (let ((dL1871@t (dL1748@get-clause 'parent-rtd dL1865@clause*))) (let ((dL1873@ls/false (dLd78@syntax-dispatch dL1871@t '(_ any any)))) (if dL1873@ls/false (apply (lambda (dL1875@rtd dL1876@rcd) dL1876@rcd) dL1873@ls/false) (let ((dL1879@t dL1871@t)) (let ((dL187b@ls/false (dLd78@syntax-dispatch dL1879@t '#(atom #f)))) (if dL187b@ls/false (apply (lambda () '#f) dL187b@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1879@t)))))))) dL186f@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL186d@t))))))))) (dL1750@foo-rcd-code (lambda (dL185d@clause* dL185e@foo-rtd dL185f@protocol dL1860@parent-rcd-code) (list 'make-record-constructor-descriptor dL185e@foo-rtd dL1860@parent-rcd-code dL185f@protocol))) (dL1752@get-protocol-code (lambda (dL1851@clause*) (let ((dL1853@t (dL1748@get-clause 'protocol dL1851@clause*))) (let ((dL1855@ls/false (dLd78@syntax-dispatch dL1853@t '(_ any)))) (if dL1855@ls/false (apply (lambda (dL1857@expr) dL1857@expr) dL1855@ls/false) (let ((dL1859@t dL1853@t)) (let ((dL185b@ls/false (dLd78@syntax-dispatch dL1859@t '_))) (if dL185b@ls/false (apply (lambda () '#f) dL185b@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1859@t))))))))) (dL1754@get-fields (lambda (dL183f@clause*) (let ((dL1841@t dL183f@clause*)) (let ((dL1843@ls/false (dLd78@syntax-dispatch dL1841@t '()))) (if dL1843@ls/false (apply (lambda () '()) dL1843@ls/false) (let ((dL1845@t dL1841@t)) (let ((dL1847@ls/false (dLd78@syntax-dispatch dL1845@t '((#(scheme-id fields) . each-any) . _)))) (if dL1847@ls/false (apply (lambda (dL1849@f*) dL1849@f*) dL1847@ls/false) (let ((dL184b@t dL1845@t)) (let ((dL184d@ls/false (dLd78@syntax-dispatch dL184b@t '(_ . any)))) (if dL184d@ls/false (apply (lambda (dL184f@rest) (dL1754@get-fields dL184f@rest)) dL184d@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL184b@t)))))))))))) (dL1756@get-mutator-indices (lambda (dL1827@fields) (let dL182d@f ((dL1829@fields dL1827@fields) (dL182a@i '0)) (let ((dL182f@t dL1829@fields)) (let ((dL1831@ls/false (dLd78@syntax-dispatch dL182f@t '()))) (if dL1831@ls/false (apply (lambda () '()) dL1831@ls/false) (let ((dL1833@t dL182f@t)) (let ((dL1835@ls/false (dLd78@syntax-dispatch dL1833@t '((#(scheme-id mutable) . _) . any)))) (if dL1835@ls/false (apply (lambda (dL1837@rest) (cons dL182a@i (dL182d@f dL1837@rest (+ dL182a@i '1)))) dL1835@ls/false) (let ((dL1839@t dL1833@t)) (let ((dL183b@ls/false (dLd78@syntax-dispatch dL1839@t '(_ . any)))) (if dL183b@ls/false (apply (lambda (dL183d@rest) (dL182d@f dL183d@rest (+ dL182a@i '1))) dL183b@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1839@t))))))))))))) (dL1758@get-mutators (lambda (dL17fd@foo dL17fe@fields) (letrec* ((dL1802@gen-name (lambda (dL1825@x) (dLe5c@datum->syntax dL17fd@foo (string->symbol (string-append (symbol->string (dLe5e@syntax->datum dL17fd@foo)) '"-" (symbol->string (dLe5e@syntax->datum dL1825@x)) '"-set!")))))) (let dL1805@f ((dL1803@fields dL17fe@fields)) (let ((dL1807@t dL1803@fields)) (let ((dL1809@ls/false (dLd78@syntax-dispatch dL1807@t '()))) (if dL1809@ls/false (apply (lambda () '()) dL1809@ls/false) (let ((dL180b@t dL1807@t)) (let ((dL180d@ls/false (dLd78@syntax-dispatch dL180b@t '((#(scheme-id mutable) any any any) . any)))) (if dL180d@ls/false (apply (lambda (dL180f@name dL1810@accessor dL1811@mutator dL1812@rest) (cons dL1811@mutator (dL1805@f dL1812@rest))) dL180d@ls/false) (let ((dL1817@t dL180b@t)) (let ((dL1819@ls/false (dLd78@syntax-dispatch dL1817@t '((#(scheme-id mutable) any) . any)))) (if dL1819@ls/false (apply (lambda (dL181b@name dL181c@rest) (cons (dL1802@gen-name dL181b@name) (dL1805@f dL181c@rest))) dL1819@ls/false) (let ((dL181f@t dL1817@t)) (let ((dL1821@ls/false (dLd78@syntax-dispatch dL181f@t '(_ . any)))) (if dL1821@ls/false (apply (lambda (dL1823@rest) (dL1805@f dL1823@rest)) dL1821@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL181f@t))))))))))))))))) (dL175a@get-accessors (lambda (dL17b9@foo dL17ba@fields) (letrec* ((dL17be@gen-name (lambda (dL17fb@x) (dLe5c@datum->syntax dL17b9@foo (string->symbol (string-append (symbol->string (dLe5e@syntax->datum dL17b9@foo)) '"-" (symbol->string (dLe5e@syntax->datum dL17fb@x)))))))) (map (lambda (dL17bf@field) (let ((dL17c1@t dL17bf@field)) (let ((dL17c3@ls/false (dLd78@syntax-dispatch dL17c1@t '(#(scheme-id mutable) any any any)))) (if (and dL17c3@ls/false (apply (lambda (dL17c5@name dL17c6@accessor dL17c7@mutator) (dLb71@id? dL17c6@accessor)) dL17c3@ls/false)) (apply (lambda (dL17cb@name dL17cc@accessor dL17cd@mutator) dL17cc@accessor) dL17c3@ls/false) (let ((dL17d1@t dL17c1@t)) (let ((dL17d3@ls/false (dLd78@syntax-dispatch dL17d1@t '(#(scheme-id immutable) any any)))) (if (and dL17d3@ls/false (apply (lambda (dL17d5@name dL17d6@accessor) (dLb71@id? dL17d6@accessor)) dL17d3@ls/false)) (apply (lambda (dL17d9@name dL17da@accessor) dL17da@accessor) dL17d3@ls/false) (let ((dL17dd@t dL17d1@t)) (let ((dL17df@ls/false (dLd78@syntax-dispatch dL17dd@t '(#(scheme-id mutable) any)))) (if (and dL17df@ls/false (apply (lambda (dL17e1@name) (dLb71@id? dL17e1@name)) dL17df@ls/false)) (apply (lambda (dL17e3@name) (dL17be@gen-name dL17e3@name)) dL17df@ls/false) (let ((dL17e5@t dL17dd@t)) (let ((dL17e7@ls/false (dLd78@syntax-dispatch dL17e5@t '(#(scheme-id immutable) any)))) (if (and dL17e7@ls/false (apply (lambda (dL17e9@name) (dLb71@id? dL17e9@name)) dL17e7@ls/false)) (apply (lambda (dL17eb@name) (dL17be@gen-name dL17eb@name)) dL17e7@ls/false) (let ((dL17ed@t dL17e5@t)) (let ((dL17ef@ls/false (dLd78@syntax-dispatch dL17ed@t 'any))) (if (and dL17ef@ls/false (apply (lambda (dL17f1@name) (dLb71@id? dL17f1@name)) dL17ef@ls/false)) (apply (lambda (dL17f3@name) (dL17be@gen-name dL17f3@name)) dL17ef@ls/false) (let ((dL17f5@t dL17ed@t)) (let ((dL17f7@ls/false (dLd78@syntax-dispatch dL17f5@t 'any))) (if dL17f7@ls/false (apply (lambda (dL17f9@others) (dLe58@syntax-violation '#f '"invalid field spec" dL17bf@field)) dL17f7@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL17f5@t)))))))))))))))))))) dL17ba@fields)))) (dL175c@enumerate (lambda (dL17b1@ls) (let dL17b7@f ((dL17b3@ls dL17b1@ls) (dL17b4@i '0)) (if (null? dL17b3@ls) '() (cons dL17b4@i (dL17b7@f (cdr dL17b3@ls) (+ dL17b4@i '1))))))) (dL175e@do-define-record (lambda (dL1789@namespec dL178a@clause*) (let ((dL178d@foo (dL1742@get-record-name dL1789@namespec))) (let ((dL178f@foo-rtd (gensym))) (let ((dL1791@foo-rcd (gensym))) (let ((dL1793@protocol (gensym))) (let ((dL1795@make-foo (dL1744@get-record-constructor-name dL1789@namespec))) (let ((dL1797@fields (dL1754@get-fields dL178a@clause*))) (let ((dL1799@idx* (dL175c@enumerate dL1797@fields))) (let ((dL179b@foo-x* (dL175a@get-accessors dL178d@foo dL1797@fields))) (let ((dL179d@set-foo-x!* (dL1758@get-mutators dL178d@foo dL1797@fields))) (let ((dL179f@set-foo-idx* (dL1756@get-mutator-indices dL1797@fields))) (let ((dL17a1@foo? (dL1746@get-record-predicate-name dL1789@namespec))) (let ((dL17a3@foo-rtd-code (dL174a@foo-rtd-code dL178d@foo dL178a@clause* (dL174c@parent-rtd-code dL178a@clause*)))) (let ((dL17a5@foo-rcd-code (dL1750@foo-rcd-code dL178a@clause* dL178f@foo-rtd dL1793@protocol (dL174e@parent-rcd-code dL178a@clause*)))) (let ((dL17a7@protocol-code (dL1752@get-protocol-code dL178a@clause*))) (dLd2e@bless (cons 'begin (cons (list 'define dL178f@foo-rtd dL17a3@foo-rtd-code) (cons (list 'define dL1793@protocol dL17a7@protocol-code) (cons (list 'define dL1791@foo-rcd dL17a5@foo-rcd-code) (cons (list 'define-syntax dL178d@foo (list 'list ''$rtd (list 'syntax dL178f@foo-rtd) (list 'syntax dL1791@foo-rcd))) (cons (list 'define dL17a1@foo? (list 'record-predicate dL178f@foo-rtd)) (cons (list 'define dL1795@make-foo (list 'record-constructor dL1791@foo-rcd)) (append (map (lambda (dL17a9@foo-x dL17aa@idx) (list 'define dL17a9@foo-x (list 'record-accessor dL178f@foo-rtd dL17aa@idx))) dL179b@foo-x* dL1799@idx*) (map (lambda (dL17ad@set-foo-x! dL17ae@idx) (list 'define dL17ad@set-foo-x! (list 'record-mutator dL178f@foo-rtd dL17ae@idx))) dL179d@set-foo-x!* dL179f@set-foo-idx*)))))))))))))))))))))))))) (dL1760@verify-clauses (lambda (dL1769@x dL176a@cls*) (letrec* ((dL176e@valid-kwds (map dLd2e@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (dL1770@free-id-member? (lambda (dL1785@x dL1786@ls) (and (pair? dL1786@ls) (or (dLb77@free-id=? dL1785@x (car dL1786@ls)) (dL1770@free-id-member? dL1785@x (cdr dL1786@ls))))))) (let dL1775@f ((dL1771@cls* dL176a@cls*) (dL1772@seen* '())) (if (not (null? dL1771@cls*)) (let ((dL1777@t (car dL1771@cls*))) (let ((dL1779@ls/false (dLd78@syntax-dispatch dL1777@t '(any . any)))) (if dL1779@ls/false (apply (lambda (dL177b@kwd dL177c@rest) (if (or (not (dLb71@id? dL177b@kwd)) (not (dL1770@free-id-member? dL177b@kwd dL176e@valid-kwds))) (dLe58@syntax-violation '#f '"not a valid define-record-type keyword" dL177b@kwd) (if (dLb7d@bound-id-member? dL177b@kwd dL1772@seen*) (dLe58@syntax-violation '#f '"duplicate use of keyword " dL1769@x dL177b@kwd) (dL1775@f (cdr dL1771@cls*) (cons dL177b@kwd dL1772@seen*))))) dL1779@ls/false) (let ((dL177f@t dL1777@t)) (let ((dL1781@ls/false (dLd78@syntax-dispatch dL177f@t 'any))) (if dL1781@ls/false (apply (lambda (dL1783@cls) (dLe58@syntax-violation '#f '"malformed define-record-type clause" dL1783@cls)) dL1781@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL177f@t))))))) (void))))))) (let ((dL1761@t dL173d@x)) (let ((dL1763@ls/false (dLd78@syntax-dispatch dL1761@t '(_ any . each-any)))) (if dL1763@ls/false (apply (lambda (dL1765@namespec dL1766@clause*) (begin (dL1760@verify-clauses dL173d@x dL1766@clause*) (dL175e@do-define-record dL1765@namespec dL1766@clause*))) dL1763@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1761@t))))))) (set! dL2848@dLd6c@define-record-type-macro dLd6c@define-record-type-macro) (set! dLd6e@define-condition-type-macro (lambda (dL1939@x) (letrec* ((dL193c@mkname (lambda (dL1969@name dL196a@suffix) (dLe5c@datum->syntax dL1969@name (string->symbol (string-append (symbol->string (dLe5e@syntax->datum dL1969@name)) dL196a@suffix)))))) (let ((dL193d@t dL1939@x)) (let ((dL193f@ls/false (dLd78@syntax-dispatch dL193d@t '(any any any any any . #(each (any any)))))) (if (and dL193f@ls/false (apply (lambda (dL1941@ctxt dL1942@name dL1943@super dL1944@constructor dL1945@predicate dL1946@field* dL1947@accessor*) (and (dLb71@id? dL1942@name) (dLb71@id? dL1943@super) (dLb71@id? dL1944@constructor) (dLb71@id? dL1945@predicate) (for-all dLb71@id? dL1946@field*) (for-all dLb71@id? dL1947@accessor*))) dL193f@ls/false)) (apply (lambda (dL194f@ctxt dL1950@name dL1951@super dL1952@constructor dL1953@predicate dL1954@field* dL1955@accessor*) (let ((dL195d@aux-accessor* (map (lambda (dL195f@x) (gensym)) dL1955@accessor*))) (dLd2e@bless (cons 'begin (cons (cons 'define-record-type (cons (list dL1950@name dL1952@constructor (gensym)) (cons (list 'parent dL1951@super) (cons (cons 'fields (map (lambda (dL1961@field dL1962@aux) (list 'immutable dL1961@field dL1962@aux)) dL1954@field* dL195d@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define dL1953@predicate (list 'condition-predicate (list 'record-type-descriptor dL1950@name))) (map (lambda (dL1965@accessor dL1966@aux) (list 'define dL1965@accessor (list 'condition-accessor (list 'record-type-descriptor dL1950@name) dL1966@aux))) dL1955@accessor* dL195d@aux-accessor*))))))) dL193f@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL193d@t))))))) (set! dL2849@dLd6e@define-condition-type-macro dLd6e@define-condition-type-macro) (set! dLd70@incorrect-usage-macro (lambda (dL196d@e) (dLe58@syntax-violation '#f '"incorrect usage of auxiliary keyword" dL196d@e))) (set! dL284a@dLd70@incorrect-usage-macro dLd70@incorrect-usage-macro) (set! dLd72@parameterize-macro (lambda (dL196f@e) (let ((dL1971@t dL196f@e)) (let ((dL1973@ls/false (dLd78@syntax-dispatch dL1971@t '(_ () any . each-any)))) (if dL1973@ls/false (apply (lambda (dL1975@b dL1976@b*) (dLd2e@bless (cons 'let (cons '() (cons dL1975@b dL1976@b*))))) dL1973@ls/false) (let ((dL1979@t dL1971@t)) (let ((dL197b@ls/false (dLd78@syntax-dispatch dL1979@t '(_ #(each (any any)) any . each-any)))) (if dL197b@ls/false (apply (lambda (dL197d@olhs* dL197e@orhs* dL197f@b dL1980@b*) (let ((dL1985@lhs* (dLe46@generate-temporaries dL197d@olhs*)) (dL1986@rhs* (dLe46@generate-temporaries dL197e@orhs*))) (dLd2e@bless (cons (list 'lambda (append dL1985@lhs* dL1986@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (dL1989@lhs dL198a@rhs) (list 'let (list (list 't (list dL1989@lhs))) (list dL1989@lhs dL198a@rhs) (cons 'set! (cons dL198a@rhs '(t))))) dL1985@lhs* dL1986@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons dL197f@b dL1980@b*))) '(swap)))))) (append dL197d@olhs* dL197e@orhs*))))) dL197b@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1979@t))))))))) (set! dL284b@dLd72@parameterize-macro dLd72@parameterize-macro) (set! dLd74@foreign-call-transformer (lambda (dL198d@e dL198e@r dL198f@mr) (let ((dL1993@t dL198d@e)) (let ((dL1995@ls/false (dLd78@syntax-dispatch dL1993@t '(_ any . each-any)))) (if dL1995@ls/false (apply (lambda (dL1997@name dL1998@arg*) (cons 'foreign-call (cons (dLd9a@chi-expr dL1997@name dL198e@r dL198f@mr) (dLd96@chi-expr* dL1998@arg* dL198e@r dL198f@mr)))) dL1995@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1993@t)))))) (set! dL284c@dLd74@foreign-call-transformer dLd74@foreign-call-transformer) (set! dLd76@convert-pattern (lambda (dL199b@pattern dL199c@keys) (letrec* ((dL19a0@cvt* (lambda (dL1a3f@p* dL1a40@n dL1a41@ids) (if (null? dL1a3f@p*) (values '() dL1a41@ids) (call-with-values (lambda () (dL19a0@cvt* (cdr dL1a3f@p*) dL1a40@n dL1a41@ids)) (lambda (dL1a49@dL1a46 dL1a4a@dL1a48) (let ((dL1a4d@ids dL1a4a@dL1a48) (dL1a4e@y dL1a49@dL1a46)) (call-with-values (lambda () (dL19a2@cvt (car dL1a3f@p*) dL1a40@n dL1a4d@ids)) (lambda (dL1a55@dL1a52 dL1a56@dL1a54) (let ((dL1a59@ids dL1a56@dL1a54) (dL1a5a@x dL1a55@dL1a52)) (values (cons dL1a5a@x dL1a4e@y) dL1a59@ids)))))))))) (dL19a2@cvt (lambda (dL19a3@p dL19a4@n dL19a5@ids) (let ((dL19a9@t dL19a3@p)) (let ((dL19ab@ls/false (dLd78@syntax-dispatch dL19a9@t 'any))) (if (and dL19ab@ls/false (apply (lambda (dL19ad@id) (dLb71@id? dL19ad@id)) dL19ab@ls/false)) (apply (lambda (dL19af@id) (if (dLb7d@bound-id-member? dL19a3@p dL199c@keys) (values (vector 'free-id dL19a3@p) dL19a5@ids) (if (dLb77@free-id=? dL19a3@p (dLd00@scheme-stx '_)) (values '_ dL19a5@ids) (values 'any (cons (cons dL19a3@p dL19a4@n) dL19a5@ids))))) dL19ab@ls/false) (let ((dL19b1@t dL19a9@t)) (let ((dL19b3@ls/false (dLd78@syntax-dispatch dL19b1@t '(any any)))) (if (and dL19b3@ls/false (apply (lambda (dL19b5@p dL19b6@dots) (dLd7a@ellipsis? dL19b6@dots)) dL19b3@ls/false)) (apply (lambda (dL19b9@p dL19ba@dots) (call-with-values (lambda () (dL19a2@cvt dL19b9@p (+ dL19a4@n '1) dL19a5@ids)) (lambda (dL19c1@dL19be dL19c2@dL19c0) (let ((dL19c5@ids dL19c2@dL19c0) (dL19c6@p dL19c1@dL19be)) (values (if (eq? dL19c6@p 'any) 'each-any (vector 'each dL19c6@p)) dL19c5@ids))))) dL19b3@ls/false) (let ((dL19c9@t dL19b1@t)) (let ((dL19cb@ls/false (dLd78@syntax-dispatch dL19c9@t '(any any . #(each+ any () any))))) (if (and dL19cb@ls/false (apply (lambda (dL19cd@x dL19ce@dots dL19cf@ys dL19d0@z) (dLd7a@ellipsis? dL19ce@dots)) dL19cb@ls/false)) (apply (lambda (dL19d5@x dL19d6@dots dL19d7@ys dL19d8@z) (call-with-values (lambda () (dL19a2@cvt dL19d8@z dL19a4@n dL19a5@ids)) (lambda (dL19e1@dL19de dL19e2@dL19e0) (let ((dL19e5@ids dL19e2@dL19e0) (dL19e6@z dL19e1@dL19de)) (call-with-values (lambda () (dL19a0@cvt* dL19d7@ys dL19a4@n dL19e5@ids)) (lambda (dL19ed@dL19ea dL19ee@dL19ec) (let ((dL19f1@ids dL19ee@dL19ec) (dL19f2@ys dL19ed@dL19ea)) (call-with-values (lambda () (dL19a2@cvt dL19d5@x (+ dL19a4@n '1) dL19f1@ids)) (lambda (dL19f9@dL19f6 dL19fa@dL19f8) (let ((dL19fd@ids dL19fa@dL19f8) (dL19fe@x dL19f9@dL19f6)) (values (vector 'each+ dL19fe@x (reverse dL19f2@ys) dL19e6@z) dL19fd@ids))))))))))) dL19cb@ls/false) (let ((dL1a01@t dL19c9@t)) (let ((dL1a03@ls/false (dLd78@syntax-dispatch dL1a01@t '(any . any)))) (if dL1a03@ls/false (apply (lambda (dL1a05@x dL1a06@y) (call-with-values (lambda () (dL19a2@cvt dL1a06@y dL19a4@n dL19a5@ids)) (lambda (dL1a0d@dL1a0a dL1a0e@dL1a0c) (let ((dL1a11@ids dL1a0e@dL1a0c) (dL1a12@y dL1a0d@dL1a0a)) (call-with-values (lambda () (dL19a2@cvt dL1a05@x dL19a4@n dL1a11@ids)) (lambda (dL1a19@dL1a16 dL1a1a@dL1a18) (let ((dL1a1d@ids dL1a1a@dL1a18) (dL1a1e@x dL1a19@dL1a16)) (values (cons dL1a1e@x dL1a12@y) dL1a1d@ids)))))))) dL1a03@ls/false) (let ((dL1a21@t dL1a01@t)) (let ((dL1a23@ls/false (dLd78@syntax-dispatch dL1a21@t '()))) (if dL1a23@ls/false (apply (lambda () (values '() dL19a5@ids)) dL1a23@ls/false) (let ((dL1a25@t dL1a21@t)) (let ((dL1a27@ls/false (dLd78@syntax-dispatch dL1a25@t '#(vector each-any)))) (if (and dL1a27@ls/false (apply (lambda (dL1a29@p) (not (dLb3d@stx? dL1a29@p))) dL1a27@ls/false)) (apply (lambda (dL1a2b@p) (call-with-values (lambda () (dL19a2@cvt dL1a2b@p dL19a4@n dL19a5@ids)) (lambda (dL1a31@dL1a2e dL1a32@dL1a30) (let ((dL1a35@ids dL1a32@dL1a30) (dL1a36@p dL1a31@dL1a2e)) (values (vector 'vector dL1a36@p) dL1a35@ids))))) dL1a27@ls/false) (let ((dL1a39@t dL1a25@t)) (let ((dL1a3b@ls/false (dLd78@syntax-dispatch dL1a39@t 'any))) (if dL1a3b@ls/false (apply (lambda (dL1a3d@datum) (values (vector 'atom (dLb85@stx->datum dL1a3d@datum)) dL19a5@ids)) dL1a3b@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1a39@t))))))))))))))))))))))))) (dL19a2@cvt dL199b@pattern '0 '())))) (set! dL284d@dLd76@convert-pattern dLd76@convert-pattern) (set! dLd78@syntax-dispatch (letrec* ((dL1a5e@stx^ (lambda (dL1b39@e dL1b3a@m* dL1b3b@s* dL1b3c@ae*) (if (and (null? dL1b3a@m*) (null? dL1b3b@s*) (null? dL1b3c@ae*)) dL1b39@e (dLb59@mkstx dL1b39@e dL1b3a@m* dL1b3b@s* dL1b3c@ae*)))) (dL1a60@match-each (lambda (dL1b19@e dL1b1a@p dL1b1b@m* dL1b1c@s* dL1b1d@ae*) (if (pair? dL1b19@e) (let ((dL1b23@first (dL1a6c@match (car dL1b19@e) dL1b1a@p dL1b1b@m* dL1b1c@s* dL1b1d@ae* '()))) (and dL1b23@first (let ((dL1b25@rest (dL1a60@match-each (cdr dL1b19@e) dL1b1a@p dL1b1b@m* dL1b1c@s* dL1b1d@ae*))) (and dL1b25@rest (cons dL1b23@first dL1b25@rest))))) (if (null? dL1b19@e) '() (if (dLb3d@stx? dL1b19@e) (and (not (dLaf7@top-marked? dL1b1b@m*)) (call-with-values (lambda () (join-wraps dL1b1b@m* dL1b1c@s* dL1b1d@ae* dL1b19@e)) (lambda (dL1b2d@dL1b28 dL1b2e@dL1b2a dL1b2f@dL1b2c) (let ((dL1b33@ae* dL1b2f@dL1b2c) (dL1b34@s* dL1b2e@dL1b2a) (dL1b35@m* dL1b2d@dL1b28)) (dL1a60@match-each (dLb3f@stx-expr dL1b19@e) dL1b1a@p dL1b35@m* dL1b34@s* dL1b33@ae*))))) (if (dL6b5@dL587@annotation? dL1b19@e) (dL1a60@match-each (dL6b7@dL58b@annotation-expression dL1b19@e) dL1b1a@p dL1b1b@m* dL1b1c@s* dL1b1d@ae*) '#f)))))) (dL1a62@match-each+ (lambda (dL1ad9@e dL1ada@x-pat dL1adb@y-pat dL1adc@z-pat dL1add@m* dL1ade@s* dL1adf@ae* dL1ae0@r) (let dL1af1@f ((dL1ae9@e dL1ad9@e) (dL1aea@m* dL1add@m*) (dL1aeb@s* dL1ade@s*) (dL1aec@ae* dL1adf@ae*)) (if (pair? dL1ae9@e) (call-with-values (lambda () (dL1af1@f (cdr dL1ae9@e) dL1aea@m* dL1aeb@s* dL1aec@ae*)) (lambda (dL1af9@dL1af4 dL1afa@dL1af6 dL1afb@dL1af8) (let ((dL1aff@r dL1afb@dL1af8) (dL1b00@y-pat dL1afa@dL1af6) (dL1b01@xr* dL1af9@dL1af4)) (if dL1aff@r (if (null? dL1b00@y-pat) (let ((dL1b05@xr (dL1a6c@match (car dL1ae9@e) dL1ada@x-pat dL1aea@m* dL1aeb@s* dL1aec@ae* '()))) (if dL1b05@xr (values (cons dL1b05@xr dL1b01@xr*) dL1b00@y-pat dL1aff@r) (values '#f '#f '#f))) (values '() (cdr dL1b00@y-pat) (dL1a6c@match (car dL1ae9@e) (car dL1b00@y-pat) dL1aea@m* dL1aeb@s* dL1aec@ae* dL1aff@r))) (values '#f '#f '#f))))) (if (dLb3d@stx? dL1ae9@e) (if (dLaf7@top-marked? dL1aea@m*) (values '() dL1adb@y-pat (dL1a6c@match dL1ae9@e dL1adc@z-pat dL1aea@m* dL1aeb@s* dL1aec@ae* dL1ae0@r)) (call-with-values (lambda () (join-wraps dL1aea@m* dL1aeb@s* dL1aec@ae* dL1ae9@e)) (lambda (dL1b0d@dL1b08 dL1b0e@dL1b0a dL1b0f@dL1b0c) (let ((dL1b13@ae* dL1b0f@dL1b0c) (dL1b14@s* dL1b0e@dL1b0a) (dL1b15@m* dL1b0d@dL1b08)) (dL1af1@f (dLb3f@stx-expr dL1ae9@e) dL1b15@m* dL1b14@s* dL1b13@ae*))))) (if (dL6b5@dL587@annotation? dL1ae9@e) (dL1af1@f (dL6b7@dL58b@annotation-expression dL1ae9@e) dL1aea@m* dL1aeb@s* dL1aec@ae*) (values '() dL1adb@y-pat (dL1a6c@match dL1ae9@e dL1adc@z-pat dL1aea@m* dL1aeb@s* dL1aec@ae* dL1ae0@r)))))))) (dL1a64@match-each-any (lambda (dL1abd@e dL1abe@m* dL1abf@s* dL1ac0@ae*) (if (pair? dL1abd@e) (let ((dL1ac5@l (dL1a64@match-each-any (cdr dL1abd@e) dL1abe@m* dL1abf@s* dL1ac0@ae*))) (and dL1ac5@l (cons (dL1a5e@stx^ (car dL1abd@e) dL1abe@m* dL1abf@s* dL1ac0@ae*) dL1ac5@l))) (if (null? dL1abd@e) '() (if (dLb3d@stx? dL1abd@e) (and (not (dLaf7@top-marked? dL1abe@m*)) (call-with-values (lambda () (join-wraps dL1abe@m* dL1abf@s* dL1ac0@ae* dL1abd@e)) (lambda (dL1acd@dL1ac8 dL1ace@dL1aca dL1acf@dL1acc) (let ((dL1ad3@ae* dL1acf@dL1acc) (dL1ad4@s* dL1ace@dL1aca) (dL1ad5@m* dL1acd@dL1ac8)) (dL1a64@match-each-any (dLb3f@stx-expr dL1abd@e) dL1ad5@m* dL1ad4@s* dL1ad3@ae*))))) (if (dL6b5@dL587@annotation? dL1abd@e) (dL1a64@match-each-any (dL6b7@dL58b@annotation-expression dL1abd@e) dL1abe@m* dL1abf@s* dL1ac0@ae*) '#f)))))) (dL1a66@match-empty (lambda (dL1ab7@p dL1ab8@r) (if (null? dL1ab7@p) dL1ab8@r (if (eq? dL1ab7@p '_) dL1ab8@r (if (eq? dL1ab7@p 'any) (cons '() dL1ab8@r) (if (pair? dL1ab7@p) (dL1a66@match-empty (car dL1ab7@p) (dL1a66@match-empty (cdr dL1ab7@p) dL1ab8@r)) (if (eq? dL1ab7@p 'each-any) (cons '() dL1ab8@r) (let ((dL1abb@t (vector-ref dL1ab7@p '0))) (if (memv dL1abb@t '(each)) (dL1a66@match-empty (vector-ref dL1ab7@p '1) dL1ab8@r) (if (memv dL1abb@t '(each+)) (dL1a66@match-empty (vector-ref dL1ab7@p '1) (dL1a66@match-empty (reverse (vector-ref dL1ab7@p '2)) (dL1a66@match-empty (vector-ref dL1ab7@p '3) dL1ab8@r))) (if (memv dL1abb@t '(free-id atom)) dL1ab8@r (if (memv dL1abb@t '(scheme-id atom)) dL1ab8@r (if (memv dL1abb@t '(vector)) (dL1a66@match-empty (vector-ref dL1ab7@p '1) dL1ab8@r) (assertion-violation 'syntax-dispatch '"invalid pattern" dL1ab7@p)))))))))))))) (dL1a68@combine (lambda (dL1ab3@r* dL1ab4@r) (if (null? (car dL1ab3@r*)) dL1ab4@r (cons (map car dL1ab3@r*) (dL1a68@combine (map cdr dL1ab3@r*) dL1ab4@r))))) (dL1a6a@match* (lambda (dL1a8f@e dL1a90@p dL1a91@m* dL1a92@s* dL1a93@ae* dL1a94@r) (if (null? dL1a90@p) (and (null? dL1a8f@e) dL1a94@r) (if (pair? dL1a90@p) (and (pair? dL1a8f@e) (dL1a6c@match (car dL1a8f@e) (car dL1a90@p) dL1a91@m* dL1a92@s* dL1a93@ae* (dL1a6c@match (cdr dL1a8f@e) (cdr dL1a90@p) dL1a91@m* dL1a92@s* dL1a93@ae* dL1a94@r))) (if (eq? dL1a90@p 'each-any) (let ((dL1a9b@l (dL1a64@match-each-any dL1a8f@e dL1a91@m* dL1a92@s* dL1a93@ae*))) (and dL1a9b@l (cons dL1a9b@l dL1a94@r))) (let ((dL1a9d@t (vector-ref dL1a90@p '0))) (if (memv dL1a9d@t '(each)) (if (null? dL1a8f@e) (dL1a66@match-empty (vector-ref dL1a90@p '1) dL1a94@r) (let ((dL1a9f@r* (dL1a60@match-each dL1a8f@e (vector-ref dL1a90@p '1) dL1a91@m* dL1a92@s* dL1a93@ae*))) (and dL1a9f@r* (dL1a68@combine dL1a9f@r* dL1a94@r)))) (if (memv dL1a9d@t '(free-id)) (and (symbol? dL1a8f@e) (dLaf7@top-marked? dL1a91@m*) (dLb77@free-id=? (dL1a5e@stx^ dL1a8f@e dL1a91@m* dL1a92@s* dL1a93@ae*) (vector-ref dL1a90@p '1)) dL1a94@r) (if (memv dL1a9d@t '(scheme-id)) (and (symbol? dL1a8f@e) (dLaf7@top-marked? dL1a91@m*) (dLb77@free-id=? (dL1a5e@stx^ dL1a8f@e dL1a91@m* dL1a92@s* dL1a93@ae*) (dLd00@scheme-stx (vector-ref dL1a90@p '1))) dL1a94@r) (if (memv dL1a9d@t '(each+)) (call-with-values (lambda () (dL1a62@match-each+ dL1a8f@e (vector-ref dL1a90@p '1) (vector-ref dL1a90@p '2) (vector-ref dL1a90@p '3) dL1a91@m* dL1a92@s* dL1a93@ae* dL1a94@r)) (lambda (dL1aa7@dL1aa2 dL1aa8@dL1aa4 dL1aa9@dL1aa6) (let ((dL1aad@r dL1aa9@dL1aa6) (dL1aae@y-pat dL1aa8@dL1aa4) (dL1aaf@xr* dL1aa7@dL1aa2)) (and dL1aad@r (null? dL1aae@y-pat) (if (null? dL1aaf@xr*) (dL1a66@match-empty (vector-ref dL1a90@p '1) dL1aad@r) (dL1a68@combine dL1aaf@xr* dL1aad@r)))))) (if (memv dL1a9d@t '(atom)) (and (fast-equal? (vector-ref dL1a90@p '1) (dLb83@strip dL1a8f@e dL1a91@m*)) dL1a94@r) (if (memv dL1a9d@t '(vector)) (and (vector? dL1a8f@e) (dL1a6c@match (vector->list dL1a8f@e) (vector-ref dL1a90@p '1) dL1a91@m* dL1a92@s* dL1a93@ae* dL1a94@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" dL1a90@p))))))))))))) (dL1a6c@match (lambda (dL1a71@e dL1a72@p dL1a73@m* dL1a74@s* dL1a75@ae* dL1a76@r) (if (not dL1a76@r) '#f (if (eq? dL1a72@p '_) dL1a76@r (if (eq? dL1a72@p 'any) (cons (dL1a5e@stx^ dL1a71@e dL1a73@m* dL1a74@s* dL1a75@ae*) dL1a76@r) (if (dLb3d@stx? dL1a71@e) (and (not (dLaf7@top-marked? dL1a73@m*)) (call-with-values (lambda () (join-wraps dL1a73@m* dL1a74@s* dL1a75@ae* dL1a71@e)) (lambda (dL1a83@dL1a7e dL1a84@dL1a80 dL1a85@dL1a82) (let ((dL1a89@ae* dL1a85@dL1a82) (dL1a8a@s* dL1a84@dL1a80) (dL1a8b@m* dL1a83@dL1a7e)) (dL1a6c@match (dLb3f@stx-expr dL1a71@e) dL1a72@p dL1a8b@m* dL1a8a@s* dL1a89@ae* dL1a76@r))))) (if (dL6b5@dL587@annotation? dL1a71@e) (dL1a6c@match (dL6b7@dL58b@annotation-expression dL1a71@e) dL1a72@p dL1a73@m* dL1a74@s* dL1a75@ae* dL1a76@r) (dL1a6a@match* dL1a71@e dL1a72@p dL1a73@m* dL1a74@s* dL1a75@ae* dL1a76@r))))))))) (lambda (dL1a6d@e dL1a6e@p) (dL1a6c@match dL1a6d@e dL1a6e@p '() '() '() '())))) (set! dL284e@dLd78@syntax-dispatch dLd78@syntax-dispatch) (set! dLd7a@ellipsis? (lambda (dL1b41@x) (and (dLb71@id? dL1b41@x) (dLb77@free-id=? dL1b41@x (dLd00@scheme-stx '...))))) (set! dL284f@dLd7a@ellipsis? dLd7a@ellipsis?) (set! dLd7c@underscore? (lambda (dL1b43@x) (and (dLb71@id? dL1b43@x) (dLb77@free-id=? dL1b43@x (dLd00@scheme-stx '_))))) (set! dL2850@dLd7c@underscore? dLd7c@underscore?) (set! dLd7e@verify-literals (lambda (dL1b45@lits dL1b46@expr) (for-each (lambda (dL1b49@x) (if (or (not (dLb71@id? dL1b49@x)) (dLd7a@ellipsis? dL1b49@x) (dLd7c@underscore? dL1b49@x)) (dLe58@syntax-violation '#f '"invalid literal" dL1b46@expr dL1b49@x) (void))) dL1b45@lits))) (set! dL2851@dLd7e@verify-literals dLd7e@verify-literals) (set! dLd80@syntax-case-transformer (letrec* ((dL1b4c@build-dispatch-call (lambda (dL1bbd@pvars dL1bbe@expr dL1bbf@y dL1bc0@r dL1bc1@mr) (let ((dL1bc7@ids (map car dL1bbd@pvars)) (dL1bc8@levels (map cdr dL1bbd@pvars))) (let ((dL1bcb@labels (map dLafd@gen-label dL1bc7@ids)) (dL1bcc@new-vars (map dLaf9@gen-lexical dL1bc7@ids))) (let ((dL1bcf@body (dLd9a@chi-expr (dLb5d@add-subst (dLb31@make-full-rib dL1bc7@ids dL1bcb@labels) dL1bbe@expr) (append (map (lambda (dL1bd1@label dL1bd2@var dL1bd3@level) (cons dL1bd1@label (dLb8b@make-binding 'syntax (cons dL1bd2@var dL1bd3@level)))) dL1bcb@labels dL1bcc@new-vars (map cdr dL1bbd@pvars)) dL1bc0@r) dL1bc1@mr))) (list '(primitive apply) (dLad4@dLa06@build-lambda '#f dL1bcc@new-vars dL1bcf@body) dL1bbf@y)))))) (dL1b4e@invalid-ids-error (lambda (dL1bb1@id* dL1bb2@e dL1bb3@class) (let dL1bbb@find ((dL1bb7@id* dL1bb1@id*) (dL1bb8@ok* '())) (if (null? dL1bb7@id*) (dLe58@syntax-violation '#f '"invalid syntax" dL1bb2@e) (if (dLb71@id? (car dL1bb7@id*)) (if (dLb7d@bound-id-member? (car dL1bb7@id*) dL1bb8@ok*) (dLe54@syntax-error (car dL1bb7@id*) '"duplicate " dL1bb3@class) (dL1bbb@find (cdr dL1bb7@id*) (cons (car dL1bb7@id*) dL1bb8@ok*))) (dLe54@syntax-error (car dL1bb7@id*) '"invalid " dL1bb3@class)))))) (dL1b50@gen-clause (lambda (dL1b89@x dL1b8a@keys dL1b8b@clauses dL1b8c@r dL1b8d@mr dL1b8e@pat dL1b8f@fender dL1b90@expr) (call-with-values (lambda () (dLd76@convert-pattern dL1b8e@pat dL1b8a@keys)) (lambda (dL1b9d@dL1b9a dL1b9e@dL1b9c) (let ((dL1ba1@pvars dL1b9e@dL1b9c) (dL1ba2@p dL1b9d@dL1b9a)) (if (not (dLb7b@distinct-bound-ids? (map car dL1ba1@pvars))) (dL1b4e@invalid-ids-error (map car dL1ba1@pvars) dL1b8e@pat '"pattern variable") (if (not (for-all (lambda (dL1ba5@x) (not (dLd7a@ellipsis? (car dL1ba5@x)))) dL1ba1@pvars)) (dLe58@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" dL1b8e@pat) (let ((dL1ba7@y (dLaf9@gen-lexical 'tmp))) (let ((dL1ba9@test (if (eq? dL1b8f@fender '#t) dL1ba7@y (let ((dL1bab@call (dL1b4c@build-dispatch-call dL1ba1@pvars dL1b8f@fender dL1ba7@y dL1b8c@r dL1b8d@mr))) (list 'if dL1ba7@y dL1bab@call (list 'quote '#f)))))) (let ((dL1bad@conseq (dL1b4c@build-dispatch-call dL1ba1@pvars dL1b90@expr dL1ba7@y dL1b8c@r dL1b8d@mr))) (let ((dL1baf@altern (dL1b52@gen-syntax-case dL1b89@x dL1b8a@keys dL1b8b@clauses dL1b8c@r dL1b8d@mr))) (list (dLad4@dLa06@build-lambda '#f (list dL1ba7@y) (list 'if dL1ba9@test dL1bad@conseq dL1baf@altern)) (list '(primitive syntax-dispatch) dL1b89@x (list 'quote dL1ba2@p)))))))))))))) (dL1b52@gen-syntax-case (lambda (dL1b67@x dL1b68@keys dL1b69@clauses dL1b6a@r dL1b6b@mr) (if (null? dL1b69@clauses) (list '(primitive syntax-error) dL1b67@x) (let ((dL1b71@t (car dL1b69@clauses))) (let ((dL1b73@ls/false (dLd78@syntax-dispatch dL1b71@t '(any any)))) (if dL1b73@ls/false (apply (lambda (dL1b75@pat dL1b76@expr) (if (and (dLb71@id? dL1b75@pat) (not (dLb7d@bound-id-member? dL1b75@pat dL1b68@keys)) (not (dLd7a@ellipsis? dL1b75@pat))) (if (dLb77@free-id=? dL1b75@pat (dLd00@scheme-stx '_)) (dLd9a@chi-expr dL1b76@expr dL1b6a@r dL1b6b@mr) (let ((dL1b79@lab (dLafd@gen-label dL1b75@pat)) (dL1b7a@lex (dLaf9@gen-lexical dL1b75@pat))) (let ((dL1b7d@body (dLd9a@chi-expr (dLb5d@add-subst (dLb31@make-full-rib (list dL1b75@pat) (list dL1b79@lab)) dL1b76@expr) (cons (cons dL1b79@lab (dLb8b@make-binding 'syntax (cons dL1b7a@lex '0))) dL1b6a@r) dL1b6b@mr))) (list (dLad4@dLa06@build-lambda '#f (list dL1b7a@lex) dL1b7d@body) dL1b67@x)))) (dL1b50@gen-clause dL1b67@x dL1b68@keys (cdr dL1b69@clauses) dL1b6a@r dL1b6b@mr dL1b75@pat '#t dL1b76@expr))) dL1b73@ls/false) (let ((dL1b7f@t dL1b71@t)) (let ((dL1b81@ls/false (dLd78@syntax-dispatch dL1b7f@t '(any any any)))) (if dL1b81@ls/false (apply (lambda (dL1b83@pat dL1b84@fender dL1b85@expr) (dL1b50@gen-clause dL1b67@x dL1b68@keys (cdr dL1b69@clauses) dL1b6a@r dL1b6b@mr dL1b83@pat dL1b84@fender dL1b85@expr)) dL1b81@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1b7f@t))))))))))) (lambda (dL1b53@e dL1b54@r dL1b55@mr) (let ((dL1b59@t dL1b53@e)) (let ((dL1b5b@ls/false (dLd78@syntax-dispatch dL1b59@t '(_ any each-any . each-any)))) (if dL1b5b@ls/false (apply (lambda (dL1b5d@expr dL1b5e@keys dL1b5f@clauses) (begin (dLd7e@verify-literals dL1b5e@keys dL1b53@e) (let ((dL1b63@x (dLaf9@gen-lexical 'tmp))) (let ((dL1b65@body (dL1b52@gen-syntax-case dL1b63@x dL1b5e@keys dL1b5f@clauses dL1b54@r dL1b55@mr))) (list (dLad4@dLa06@build-lambda '#f (list dL1b63@x) dL1b65@body) (dLd9a@chi-expr dL1b5d@expr dL1b54@r dL1b55@mr)))))) dL1b5b@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1b59@t))))))) (set! dL2852@dLd80@syntax-case-transformer dLd80@syntax-case-transformer) (set! dLd82@ellipsis-map (lambda (dL1bd7@proc dL1bd8@ls . dL1bdb@ls*) (letrec* ((dL1bde@who '...)) (begin (if (not (list? dL1bd8@ls)) (assertion-violation dL1bde@who '"not a list" dL1bd8@ls) (void)) (if (not (null? dL1bdb@ls*)) (let ((dL1bdf@n (length dL1bd8@ls))) (for-each (lambda (dL1be1@x) (begin (if (not (list? dL1be1@x)) (assertion-violation dL1bde@who '"not a list" dL1be1@x) (void)) (if (not (= (length dL1be1@x) dL1bdf@n)) (assertion-violation dL1bde@who '"length mismatch" dL1bd8@ls dL1be1@x) (void)))) dL1bdb@ls*)) (void)) (apply map dL1bd7@proc dL1bd8@ls dL1bdb@ls*))))) (set! dL2853@dLd82@ellipsis-map dLd82@ellipsis-map) (set! dLd84@syntax-transformer (letrec* ((dL1be4@gen-syntax (lambda (dL1c5b@src dL1c5c@e dL1c5d@r dL1c5e@maps dL1c5f@ellipsis? dL1c60@vec?) (let ((dL1c67@t dL1c5c@e)) (let ((dL1c69@ls/false (dLd78@syntax-dispatch dL1c67@t 'any))) (if (and dL1c69@ls/false (apply (lambda (dL1c6b@dots) (dL1c5f@ellipsis? dL1c6b@dots)) dL1c69@ls/false)) (apply (lambda (dL1c6d@dots) (dLe58@syntax-violation '#f '"misplaced ellipsis in syntax form" dL1c5b@src)) dL1c69@ls/false) (let ((dL1c6f@t dL1c67@t)) (let ((dL1c71@ls/false (dLd78@syntax-dispatch dL1c6f@t 'any))) (if (and dL1c71@ls/false (apply (lambda (dL1c73@id) (dLb71@id? dL1c73@id)) dL1c71@ls/false)) (apply (lambda (dL1c75@id) (let ((dL1c77@label (dLb87@id->label dL1c5c@e))) (let ((dL1c79@b (dLb89@label->binding dL1c77@label dL1c5d@r))) (if (eq? (dLb8d@binding-type dL1c79@b) 'syntax) (call-with-values (lambda () (let ((dL1c7f@var.lev (dLb8f@binding-value dL1c79@b))) (dL1be6@gen-ref dL1c5b@src (car dL1c7f@var.lev) (cdr dL1c7f@var.lev) dL1c5e@maps))) (lambda (dL1c81@dL1c7c dL1c82@dL1c7e) (let ((dL1c85@maps dL1c82@dL1c7e) (dL1c86@var dL1c81@dL1c7c)) (values (list 'ref dL1c86@var) dL1c85@maps)))) (values (list 'quote dL1c5c@e) dL1c5e@maps))))) dL1c71@ls/false) (let ((dL1c89@t dL1c6f@t)) (let ((dL1c8b@ls/false (dLd78@syntax-dispatch dL1c89@t '(any any)))) (if (and dL1c8b@ls/false (apply (lambda (dL1c8d@dots dL1c8e@e) (dL1c5f@ellipsis? dL1c8d@dots)) dL1c8b@ls/false)) (apply (lambda (dL1c91@dots dL1c92@e) (if dL1c60@vec? (dLe58@syntax-violation '#f '"misplaced ellipsis in syntax form" dL1c5b@src) (dL1be4@gen-syntax dL1c5b@src dL1c92@e dL1c5d@r dL1c5e@maps (lambda (dL1c95@x) '#f) '#f))) dL1c8b@ls/false) (let ((dL1c97@t dL1c89@t)) (let ((dL1c99@ls/false (dLd78@syntax-dispatch dL1c97@t '(any any . any)))) (if (and dL1c99@ls/false (apply (lambda (dL1c9b@x dL1c9c@dots dL1c9d@y) (dL1c5f@ellipsis? dL1c9c@dots)) dL1c99@ls/false)) (apply (lambda (dL1ca1@x dL1ca2@dots dL1ca3@y) (let dL1cb9@f ((dL1ca7@y dL1ca3@y) (dL1ca8@k (lambda (dL1cab@maps) (call-with-values (lambda () (dL1be4@gen-syntax dL1c5b@src dL1ca1@x dL1c5d@r (cons '() dL1cab@maps) dL1c5f@ellipsis? '#f)) (lambda (dL1cb1@dL1cae dL1cb2@dL1cb0) (let ((dL1cb5@maps dL1cb2@dL1cb0) (dL1cb6@x dL1cb1@dL1cae)) (if (null? (car dL1cb5@maps)) (dLe58@syntax-violation '#f '"extra ellipsis in syntax form" dL1c5b@src) (values (dL1bec@gen-map dL1cb6@x (car dL1cb5@maps)) (cdr dL1cb5@maps))))))))) (let ((dL1cbb@t dL1ca7@y)) (let ((dL1cbd@ls/false (dLd78@syntax-dispatch dL1cbb@t '()))) (if dL1cbd@ls/false (apply (lambda () (dL1ca8@k dL1c5e@maps)) dL1cbd@ls/false) (let ((dL1cbf@t dL1cbb@t)) (let ((dL1cc1@ls/false (dLd78@syntax-dispatch dL1cbf@t '(any . any)))) (if (and dL1cc1@ls/false (apply (lambda (dL1cc3@dots dL1cc4@y) (dL1c5f@ellipsis? dL1cc3@dots)) dL1cc1@ls/false)) (apply (lambda (dL1cc7@dots dL1cc8@y) (dL1cb9@f dL1cc8@y (lambda (dL1ccb@maps) (call-with-values (lambda () (dL1ca8@k (cons '() dL1ccb@maps))) (lambda (dL1cd1@dL1cce dL1cd2@dL1cd0) (let ((dL1cd5@maps dL1cd2@dL1cd0) (dL1cd6@x dL1cd1@dL1cce)) (if (null? (car dL1cd5@maps)) (dLe58@syntax-violation '#f '"extra ellipsis in syntax form" dL1c5b@src) (values (dL1bea@gen-mappend dL1cd6@x (car dL1cd5@maps)) (cdr dL1cd5@maps))))))))) dL1cc1@ls/false) (let ((dL1cd9@t dL1cbf@t)) (let ((dL1cdb@ls/false (dLd78@syntax-dispatch dL1cd9@t '_))) (if dL1cdb@ls/false (apply (lambda () (call-with-values (lambda () (dL1be4@gen-syntax dL1c5b@src dL1ca7@y dL1c5d@r dL1c5e@maps dL1c5f@ellipsis? dL1c60@vec?)) (lambda (dL1ce1@dL1cde dL1ce2@dL1ce0) (let ((dL1ce5@maps dL1ce2@dL1ce0) (dL1ce6@y dL1ce1@dL1cde)) (call-with-values (lambda () (dL1ca8@k dL1ce5@maps)) (lambda (dL1ced@dL1cea dL1cee@dL1cec) (let ((dL1cf1@maps dL1cee@dL1cec) (dL1cf2@x dL1ced@dL1cea)) (values (dL1be8@gen-append dL1cf2@x dL1ce6@y) dL1cf1@maps)))))))) dL1cdb@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1cd9@t)))))))))))) dL1c99@ls/false) (let ((dL1cf5@t dL1c97@t)) (let ((dL1cf7@ls/false (dLd78@syntax-dispatch dL1cf5@t '(any . any)))) (if dL1cf7@ls/false (apply (lambda (dL1cf9@x dL1cfa@y) (call-with-values (lambda () (dL1be4@gen-syntax dL1c5b@src dL1cf9@x dL1c5d@r dL1c5e@maps dL1c5f@ellipsis? '#f)) (lambda (dL1d01@dL1cfe dL1d02@dL1d00) (let ((dL1d05@maps dL1d02@dL1d00) (dL1d06@xnew dL1d01@dL1cfe)) (call-with-values (lambda () (dL1be4@gen-syntax dL1c5b@src dL1cfa@y dL1c5d@r dL1d05@maps dL1c5f@ellipsis? dL1c60@vec?)) (lambda (dL1d0d@dL1d0a dL1d0e@dL1d0c) (let ((dL1d11@maps dL1d0e@dL1d0c) (dL1d12@ynew dL1d0d@dL1d0a)) (values (dL1bee@gen-cons dL1c5c@e dL1cf9@x dL1cfa@y dL1d06@xnew dL1d12@ynew) dL1d11@maps)))))))) dL1cf7@ls/false) (let ((dL1d15@t dL1cf5@t)) (let ((dL1d17@ls/false (dLd78@syntax-dispatch dL1d15@t '#(vector each-any)))) (if dL1d17@ls/false (apply (lambda (dL1d19@ls) (call-with-values (lambda () (dL1be4@gen-syntax dL1c5b@src dL1d19@ls dL1c5d@r dL1c5e@maps dL1c5f@ellipsis? '#t)) (lambda (dL1d1f@dL1d1c dL1d20@dL1d1e) (let ((dL1d23@maps dL1d20@dL1d1e) (dL1d24@lsnew dL1d1f@dL1d1c)) (values (dL1bf0@gen-vector dL1c5c@e dL1d19@ls dL1d24@lsnew) dL1d23@maps))))) dL1d17@ls/false) (let ((dL1d27@t dL1d15@t)) (let ((dL1d29@ls/false (dLd78@syntax-dispatch dL1d27@t '_))) (if dL1d29@ls/false (apply (lambda () (values (list 'quote dL1c5c@e) dL1c5e@maps)) dL1d29@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1d27@t)))))))))))))))))))))))) (dL1be6@gen-ref (lambda (dL1c41@src dL1c42@var dL1c43@level dL1c44@maps) (if (= dL1c43@level '0) (values dL1c42@var dL1c44@maps) (if (null? dL1c44@maps) (dLe58@syntax-violation '#f '"missing ellipsis in syntax form" dL1c41@src) (call-with-values (lambda () (dL1be6@gen-ref dL1c41@src dL1c42@var (- dL1c43@level '1) (cdr dL1c44@maps))) (lambda (dL1c4d@dL1c4a dL1c4e@dL1c4c) (let ((dL1c51@outer-maps dL1c4e@dL1c4c) (dL1c52@outer-var dL1c4d@dL1c4a)) (let ((dL1c55@t (assq dL1c52@outer-var (car dL1c44@maps)))) (if dL1c55@t ((lambda (dL1c57@b) (values (cdr dL1c57@b) dL1c44@maps)) dL1c55@t) (let ((dL1c59@inner-var (dLaf9@gen-lexical 'tmp))) (values dL1c59@inner-var (cons (cons (cons dL1c52@outer-var dL1c59@inner-var) (car dL1c44@maps)) dL1c51@outer-maps)))))))))))) (dL1be8@gen-append (lambda (dL1c3d@x dL1c3e@y) (if (fast-equal? dL1c3e@y ''()) dL1c3d@x (list 'append dL1c3d@x dL1c3e@y)))) (dL1bea@gen-mappend (lambda (dL1c39@e dL1c3a@map-env) (list 'apply '(primitive append) (dL1bec@gen-map dL1c39@e dL1c3a@map-env)))) (dL1bec@gen-map (lambda (dL1c27@e dL1c28@map-env) (let ((dL1c2b@formals (map cdr dL1c28@map-env)) (dL1c2c@actuals (map (lambda (dL1c2f@x) (list 'ref (car dL1c2f@x))) dL1c28@map-env))) (if (eq? (car dL1c27@e) 'ref) (car dL1c2c@actuals) (if (for-all (lambda (dL1c31@x) (and (eq? (car dL1c31@x) 'ref) (memq (cadr dL1c31@x) dL1c2b@formals))) (cdr dL1c27@e)) (let ((dL1c33@args (map (let ((dL1c35@r (map cons dL1c2b@formals dL1c2c@actuals))) (lambda (dL1c37@x) (cdr (assq (cadr dL1c37@x) dL1c35@r)))) (cdr dL1c27@e)))) (cons 'map (cons (list 'primitive (car dL1c27@e)) dL1c33@args))) (cons* 'map (list 'lambda dL1c2b@formals dL1c27@e) dL1c2c@actuals)))))) (dL1bee@gen-cons (lambda (dL1c17@e dL1c18@x dL1c19@y dL1c1a@xnew dL1c1b@ynew) (let ((dL1c21@t (car dL1c1b@ynew))) (if (memv dL1c21@t '(quote)) (if (eq? (car dL1c1a@xnew) 'quote) (let ((dL1c23@xnew (cadr dL1c1a@xnew)) (dL1c24@ynew (cadr dL1c1b@ynew))) (if (and (eq? dL1c23@xnew dL1c18@x) (eq? dL1c24@ynew dL1c19@y)) (list 'quote dL1c17@e) (list 'quote (cons dL1c23@xnew dL1c24@ynew)))) (if (null? (cadr dL1c1b@ynew)) (list 'list dL1c1a@xnew) (list 'cons dL1c1a@xnew dL1c1b@ynew))) (if (memv dL1c21@t '(list)) (cons 'list (cons dL1c1a@xnew (cdr dL1c1b@ynew))) (list 'cons dL1c1a@xnew dL1c1b@ynew)))))) (dL1bf0@gen-vector (lambda (dL1c11@e dL1c12@ls dL1c13@lsnew) (if (eq? (car dL1c13@lsnew) 'quote) (if (eq? (cadr dL1c13@lsnew) dL1c12@ls) (list 'quote dL1c11@e) (list 'quote (list->vector (cadr dL1c13@lsnew)))) (if (eq? (car dL1c13@lsnew) 'list) (cons 'vector (cdr dL1c13@lsnew)) (list 'list->vector dL1c13@lsnew))))) (dL1bf2@regen (lambda (dL1c0b@x) (let ((dL1c0d@t (car dL1c0b@x))) (if (memv dL1c0d@t '(ref)) (cadr dL1c0b@x) (if (memv dL1c0d@t '(primitive)) (list 'primitive (cadr dL1c0b@x)) (if (memv dL1c0d@t '(quote)) (list 'quote (cadr dL1c0b@x)) (if (memv dL1c0d@t '(lambda)) (dLad4@dLa06@build-lambda '#f (cadr dL1c0b@x) (dL1bf2@regen (caddr dL1c0b@x))) (if (memv dL1c0d@t '(map)) (let ((dL1c0f@ls (map dL1bf2@regen (cdr dL1c0b@x)))) (cons '(primitive ellipsis-map) dL1c0f@ls)) (cons (list 'primitive (car dL1c0b@x)) (map dL1bf2@regen (cdr dL1c0b@x)))))))))))) (lambda (dL1bf3@e dL1bf4@r dL1bf5@mr) (let ((dL1bf9@t dL1bf3@e)) (let ((dL1bfb@ls/false (dLd78@syntax-dispatch dL1bf9@t '(_ any)))) (if dL1bfb@ls/false (apply (lambda (dL1bfd@x) (call-with-values (lambda () (dL1be4@gen-syntax dL1bf3@e dL1bfd@x dL1bf4@r '() dLd7a@ellipsis? '#f)) (lambda (dL1c03@dL1c00 dL1c04@dL1c02) (let ((dL1c07@maps dL1c04@dL1c02) (dL1c08@e dL1c03@dL1c00)) (dL1bf2@regen dL1c08@e))))) dL1bfb@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1bf9@t))))))) (set! dL2854@dLd84@syntax-transformer dLd84@syntax-transformer) (set! dLd86@core-macro-transformer (lambda (dL1d2b@name) (let ((dL1d2d@t dL1d2b@name)) (if (memv dL1d2d@t '(quote)) dLd28@quote-transformer (if (memv dL1d2d@t '(lambda)) dLd2c@lambda-transformer (if (memv dL1d2d@t '(case-lambda)) dLd2a@case-lambda-transformer (if (memv dL1d2d@t '(letrec)) dLd10@letrec-transformer (if (memv dL1d2d@t '(letrec*)) dLd12@letrec*-transformer (if (memv dL1d2d@t '(let)) dLd0e@let-transformer (if (memv dL1d2d@t '(if)) dLd20@if-transformer (if (memv dL1d2d@t '(and)) dLd22@and-transformer (if (memv dL1d2d@t '(or)) dLd24@or-transformer (if (memv dL1d2d@t '(foreign-call)) dLd74@foreign-call-transformer (if (memv dL1d2d@t '(syntax-case)) dLd80@syntax-case-transformer (if (memv dL1d2d@t '(syntax)) dLd84@syntax-transformer (if (memv dL1d2d@t '(type-descriptor)) dLd16@type-descriptor-transformer (if (memv dL1d2d@t '(record-type-descriptor)) dLd18@record-type-descriptor-transformer (if (memv dL1d2d@t '(record-constructor-descriptor)) dLd1a@record-constructor-descriptor-transformer (if (memv dL1d2d@t '(fluid-let-syntax)) dLd14@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" dL1d2b@name)))))))))))))))))))) (set! dL2855@dLd86@core-macro-transformer dLd86@core-macro-transformer) (set! dLd88@symbol-macro (lambda (dL1d2f@x dL1d30@set) (let ((dL1d33@t dL1d2f@x)) (let ((dL1d35@ls/false (dLd78@syntax-dispatch dL1d33@t '(_ any)))) (if (and dL1d35@ls/false (apply (lambda (dL1d37@name) (and (dLb71@id? dL1d37@name) (memq (dLb73@id->sym dL1d37@name) dL1d30@set))) dL1d35@ls/false)) (apply (lambda (dL1d39@name) (dLd2e@bless (list 'quote dL1d39@name))) dL1d35@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1d33@t)))))) (set! dL2856@dLd88@symbol-macro dLd88@symbol-macro) (set! dLd8a@macro-transformer (lambda (dL1d3b@x) (if (procedure? dL1d3b@x) dL1d3b@x (if (symbol? dL1d3b@x) (let ((dL1d3d@t dL1d3b@x)) (if (memv dL1d3d@t '(define-record-type)) dLd6c@define-record-type-macro (if (memv dL1d3d@t '(define-struct)) dLd6a@define-struct-macro (if (memv dL1d3d@t '(include)) dLd60@include-macro (if (memv dL1d3d@t '(cond)) dLd5c@cond-macro (if (memv dL1d3d@t '(let)) dLd34@let-macro (if (memv dL1d3d@t '(do)) dLd54@do-macro (if (memv dL1d3d@t '(or)) dLd58@or-macro (if (memv dL1d3d@t '(and)) dLd5a@and-macro (if (memv dL1d3d@t '(let*)) dLd56@let*-macro (if (memv dL1d3d@t '(let-values)) dLd36@let-values-macro (if (memv dL1d3d@t '(let*-values)) dLd38@let*-values-macro (if (memv dL1d3d@t '(syntax-rules)) dLd64@syntax-rules-macro (if (memv dL1d3d@t '(quasiquote)) dLd66@quasiquote-macro (if (memv dL1d3d@t '(quasisyntax)) dLd68@quasisyntax-macro (if (memv dL1d3d@t '(with-syntax)) dLd30@with-syntax-macro (if (memv dL1d3d@t '(when)) dLd1c@when-macro (if (memv dL1d3d@t '(unless)) dLd1e@unless-macro (if (memv dL1d3d@t '(case)) dLd26@case-macro (if (memv dL1d3d@t '(identifier-syntax)) dLd52@identifier-syntax-macro (if (memv dL1d3d@t '(time)) dLd4a@time-macro (if (memv dL1d3d@t '(delay)) dLd4c@delay-macro (if (memv dL1d3d@t '(assert)) dLd4e@assert-macro (if (memv dL1d3d@t '(endianness)) dLd50@endianness-macro (if (memv dL1d3d@t '(guard)) dLd46@guard-macro (if (memv dL1d3d@t '(define-enumeration)) dLd48@define-enumeration-macro (if (memv dL1d3d@t '(trace-lambda)) dLd3a@trace-lambda-macro (if (memv dL1d3d@t '(trace-define)) dLd3c@trace-define-macro (if (memv dL1d3d@t '(trace-define-syntax)) dLd3e@trace-define-syntax-macro (if (memv dL1d3d@t '(trace-let-syntax)) dLd42@trace-let-syntax-macro (if (memv dL1d3d@t '(trace-letrec-syntax)) dLd44@trace-letrec-syntax-macro (if (memv dL1d3d@t '(define-condition-type)) dLd6e@define-condition-type-macro (if (memv dL1d3d@t '(parameterize)) dLd72@parameterize-macro (if (memv dL1d3d@t '(include-into)) dLd62@include-into-macro (if (memv dL1d3d@t '(eol-style)) (lambda (dL1d3f@x) (dLd88@symbol-macro dL1d3f@x '(none lf cr crlf nel crnel ls))) (if (memv dL1d3d@t '(error-handling-mode)) (lambda (dL1d41@x) (dLd88@symbol-macro dL1d41@x '(ignore raise replace))) (if (memv dL1d3d@t '(buffer-mode)) (lambda (dL1d43@x) (dLd88@symbol-macro dL1d43@x '(none line block))) (if (memv dL1d3d@t '(file-options)) dLaec@file-options-macro (if (memv dL1d3d@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) dLd70@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" dL1d3b@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" dL1d3b@x))))) (set! dL2857@dLd8a@macro-transformer dLd8a@macro-transformer) (set! dLd8c@local-macro-transformer (lambda (dL1d45@x) (car dL1d45@x))) (set! dL2858@dLd8c@local-macro-transformer dLd8c@local-macro-transformer) (set! dLd8e@do-macro-call (lambda (dL1d47@transformer dL1d48@expr) (let ((dL1d4b@out (dL1d47@transformer (dLb5b@add-mark dLb55@anti-mark dL1d48@expr '#f)))) (begin (let dL1d4f@f ((dL1d4d@x dL1d4b@out)) (if (not (dLb3d@stx? dL1d4d@x)) (if (pair? dL1d4d@x) (begin (dL1d4f@f (car dL1d4d@x)) (dL1d4f@f (cdr dL1d4d@x))) (if (vector? dL1d4d@x) (vector-for-each dL1d4f@f dL1d4d@x) (if (symbol? dL1d4d@x) (dLe58@syntax-violation '#f '"raw symbol encountered in output of macro" dL1d48@expr dL1d4d@x) (void)))) (void))) (dLb5b@add-mark (dLb53@gen-mark) dL1d4b@out dL1d48@expr))))) (set! dL2859@dLd8e@do-macro-call dLd8e@do-macro-call) (set! dLd90@chi-macro (lambda (dL1d51@p dL1d52@e) (dLd8e@do-macro-call (dLd8a@macro-transformer dL1d51@p) dL1d52@e))) (set! dL285a@dLd90@chi-macro dLd90@chi-macro) (set! dLd92@chi-local-macro (lambda (dL1d55@p dL1d56@e) (dLd8e@do-macro-call (dLd8c@local-macro-transformer dL1d55@p) dL1d56@e))) (set! dL285b@dLd92@chi-local-macro dLd92@chi-local-macro) (set! dLd94@chi-global-macro (lambda (dL1d59@p dL1d5a@e) (let ((dL1d5d@lib (car dL1d59@p)) (dL1d5e@loc (cdr dL1d59@p))) (begin (dL98e@dL7dd@visit-library dL1d5d@lib) (let ((dL1d61@x (symbol-value dL1d5e@loc))) (let ((dL1d63@transformer (if (procedure? dL1d61@x) dL1d61@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" dL1d61@x)))) (dLd8e@do-macro-call dL1d63@transformer dL1d5a@e))))))) (set! dL285c@dLd94@chi-global-macro dLd94@chi-global-macro) (set! dLd96@chi-expr* (lambda (dL1d65@e* dL1d66@r dL1d67@mr) (if (null? dL1d65@e*) '() (let ((dL1d6b@e (dLd9a@chi-expr (car dL1d65@e*) dL1d66@r dL1d67@mr))) (cons dL1d6b@e (dLd96@chi-expr* (cdr dL1d65@e*) dL1d66@r dL1d67@mr)))))) (set! dL285d@dLd96@chi-expr* dLd96@chi-expr*) (set! dLd98@chi-application (lambda (dL1d6d@e dL1d6e@r dL1d6f@mr) (let ((dL1d73@t dL1d6d@e)) (let ((dL1d75@ls/false (dLd78@syntax-dispatch dL1d73@t '(any . each-any)))) (if dL1d75@ls/false (apply (lambda (dL1d77@rator dL1d78@rands) (let ((dL1d7b@rator (dLd9a@chi-expr dL1d77@rator dL1d6e@r dL1d6f@mr))) (cons dL1d7b@rator (dLd96@chi-expr* dL1d78@rands dL1d6e@r dL1d6f@mr)))) dL1d75@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1d73@t)))))) (set! dL285e@dLd98@chi-application dLd98@chi-application) (set! dLd9a@chi-expr (lambda (dL1d7d@e dL1d7e@r dL1d7f@mr) (call-with-values (lambda () (dLb93@syntax-type dL1d7d@e dL1d7e@r)) (lambda (dL1d89@dL1d84 dL1d8a@dL1d86 dL1d8b@dL1d88) (let ((dL1d8f@kwd dL1d8b@dL1d88) (dL1d90@value dL1d8a@dL1d86) (dL1d91@type dL1d89@dL1d84)) (let ((dL1d95@t dL1d91@type)) (if (memv dL1d95@t '(core-macro)) (let ((dL1d97@transformer (dLd86@core-macro-transformer dL1d90@value))) (dL1d97@transformer dL1d7d@e dL1d7e@r dL1d7f@mr)) (if (memv dL1d95@t '(global)) (let ((dL1d99@lib (car dL1d90@value))) (let ((dL1d9b@loc (cdr dL1d90@value))) (begin ((dLde0@inv-collector) dL1d99@lib) dL1d9b@loc))) (if (memv dL1d95@t '(core-prim)) (let ((dL1d9d@name dL1d90@value)) (list 'primitive dL1d9d@name)) (if (memv dL1d95@t '(call)) (dLd98@chi-application dL1d7d@e dL1d7e@r dL1d7f@mr) (if (memv dL1d95@t '(lexical)) (let ((dL1d9f@lex (dLd02@lexical-var dL1d90@value))) dL1d9f@lex) (if (memv dL1d95@t '(global-macro global-macro!)) (dLd9a@chi-expr (dLd94@chi-global-macro dL1d90@value dL1d7d@e) dL1d7e@r dL1d7f@mr) (if (memv dL1d95@t '(local-macro local-macro!)) (dLd9a@chi-expr (dLd92@chi-local-macro dL1d90@value dL1d7d@e) dL1d7e@r dL1d7f@mr) (if (memv dL1d95@t '(macro macro!)) (dLd9a@chi-expr (dLd90@chi-macro dL1d90@value dL1d7d@e) dL1d7e@r dL1d7f@mr) (if (memv dL1d95@t '(constant)) (let ((dL1da1@datum dL1d90@value)) (list 'quote dL1da1@datum)) (if (memv dL1d95@t '(set!)) (dLd9c@chi-set! dL1d7d@e dL1d7e@r dL1d7f@mr) (if (memv dL1d95@t '(begin)) (let ((dL1da3@t dL1d7d@e)) (let ((dL1da5@ls/false (dLd78@syntax-dispatch dL1da3@t '(_ any . each-any)))) (if dL1da5@ls/false (apply (lambda (dL1da7@x dL1da8@x*) (dLad6@dLa36@build-sequence '#f (dLd96@chi-expr* (cons dL1da7@x dL1da8@x*) dL1d7e@r dL1d7f@mr))) dL1da5@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1da3@t)))) (if (memv dL1d95@t '(let-syntax letrec-syntax)) (let ((dL1dab@t dL1d7d@e)) (let ((dL1dad@ls/false (dLd78@syntax-dispatch dL1dab@t '(_ #(each (any any)) any . each-any)))) (if (and dL1dad@ls/false (apply (lambda (dL1daf@xlhs* dL1db0@xrhs* dL1db1@xbody dL1db2@xbody*) (if (not (dLb79@valid-bound-ids? dL1daf@xlhs*)) (dLe58@syntax-violation '#f '"invalid identifiers" dL1d7d@e) (void))) dL1dad@ls/false)) (apply (lambda (dL1db7@xlhs* dL1db8@xrhs* dL1db9@xbody dL1dba@xbody*) (let ((dL1dbf@xlab* (map dLafd@gen-label dL1db7@xlhs*))) (let ((dL1dc1@xrib (dLb31@make-full-rib dL1db7@xlhs* dL1dbf@xlab*))) (let ((dL1dc3@xb* (map (lambda (dL1dc5@x) (dLba9@make-eval-transformer (dLdd2@expand-transformer (if (eq? dL1d91@type 'let-syntax) dL1dc5@x (dLb5d@add-subst dL1dc1@xrib dL1dc5@x)) dL1d7f@mr))) dL1db8@xrhs*))) (dLad6@dLa36@build-sequence '#f (dLd96@chi-expr* (map (lambda (dL1dc7@x) (dLb5d@add-subst dL1dc1@xrib dL1dc7@x)) (cons dL1db9@xbody dL1dba@xbody*)) (append (map cons dL1dbf@xlab* dL1dc3@xb*) dL1d7e@r) (append (map cons dL1dbf@xlab* dL1dc3@xb*) dL1d7f@mr))))))) dL1dad@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1dab@t)))) (if (memv dL1d95@t '(displaced-lexical)) (dLe58@syntax-violation '#f '"identifier out of context" dL1d7d@e) (if (memv dL1d95@t '(syntax)) (dLe58@syntax-violation '#f '"reference to pattern variable outside a syntax form" dL1d7d@e) (if (memv dL1d95@t '(define define-syntax module import library)) (dLe58@syntax-violation '#f (string-append (let ((dL1dc9@t dL1d91@type)) (if (memv dL1dc9@t '(define)) '"a definition" (if (memv dL1dc9@t '(define-syntax)) '"a define-syntax" (if (memv dL1dc9@t '(module)) '"a module definition" (if (memv dL1dc9@t '(library)) '"a library definition" (if (memv dL1dc9@t '(import)) '"an import declaration" (if (memv dL1dc9@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") dL1d7d@e) (if (memv dL1d95@t '(mutable)) (dLe58@syntax-violation '#f '"attempt to reference an unexportable variable" dL1d7d@e) (dLe58@syntax-violation '#f '"invalid expression" dL1d7d@e))))))))))))))))))))))) (set! dL285f@dLd9a@chi-expr dLd9a@chi-expr) (set! dLd9c@chi-set! (lambda (dL1dcb@e dL1dcc@r dL1dcd@mr) (let ((dL1dd1@t dL1dcb@e)) (let ((dL1dd3@ls/false (dLd78@syntax-dispatch dL1dd1@t '(_ any any)))) (if (and dL1dd3@ls/false (apply (lambda (dL1dd5@x dL1dd6@v) (dLb71@id? dL1dd5@x)) dL1dd3@ls/false)) (apply (lambda (dL1dd9@x dL1dda@v) (call-with-values (lambda () (dLb93@syntax-type dL1dd9@x dL1dcc@r)) (lambda (dL1de3@dL1dde dL1de4@dL1de0 dL1de5@dL1de2) (let ((dL1de9@kwd dL1de5@dL1de2) (dL1dea@value dL1de4@dL1de0) (dL1deb@type dL1de3@dL1dde)) (let ((dL1def@t dL1deb@type)) (if (memv dL1def@t '(lexical)) (begin (dLd06@set-lexical-mutable! dL1dea@value '#t) (list 'set! (dLd02@lexical-var dL1dea@value) (dLd9a@chi-expr dL1dda@v dL1dcc@r dL1dcd@mr))) (if (memv dL1def@t '(core-prim)) (dLe58@syntax-violation '#f '"cannot modify imported core primitive" dL1dcb@e) (if (memv dL1def@t '(global)) (dLe58@syntax-violation '#f '"attempt to modify imported binding" dL1dcb@e) (if (memv dL1def@t '(global-macro!)) (dLd9a@chi-expr (dLd94@chi-global-macro dL1dea@value dL1dcb@e) dL1dcc@r dL1dcd@mr) (if (memv dL1def@t '(local-macro!)) (dLd9a@chi-expr (dLd92@chi-local-macro dL1dea@value dL1dcb@e) dL1dcc@r dL1dcd@mr) (if (memv dL1def@t '(mutable)) (dLe58@syntax-violation '#f '"attempt to assign to an unexportable variable" dL1dcb@e) (dLe58@syntax-violation '#f '"invalid syntax" dL1dcb@e)))))))))))) dL1dd3@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1dd1@t)))))) (set! dL2860@dLd9c@chi-set! dLd9c@chi-set!) (set! dLd9e@verify-formals (lambda (dL1df1@fmls dL1df2@stx) (let ((dL1df5@t dL1df1@fmls)) (let ((dL1df7@ls/false (dLd78@syntax-dispatch dL1df5@t 'each-any))) (if dL1df7@ls/false (apply (lambda (dL1df9@x*) (if (not (dLb79@valid-bound-ids? dL1df9@x*)) (dLd32@invalid-fmls-error dL1df2@stx dL1df1@fmls) (void))) dL1df7@ls/false) (let ((dL1dfb@t dL1df5@t)) (let ((dL1dfd@ls/false (dLd78@syntax-dispatch dL1dfb@t '#(each+ any () any)))) (if dL1dfd@ls/false (apply (lambda (dL1dff@x* dL1e00@x) (if (not (dLb79@valid-bound-ids? (cons dL1e00@x dL1dff@x*))) (dLd32@invalid-fmls-error dL1df2@stx dL1df1@fmls) (void))) dL1dfd@ls/false) (let ((dL1e03@t dL1dfb@t)) (let ((dL1e05@ls/false (dLd78@syntax-dispatch dL1e03@t '_))) (if dL1e05@ls/false (apply (lambda () (dLe58@syntax-violation '#f '"invalid syntax" dL1df2@stx)) dL1e05@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1e03@t)))))))))))) (set! dL2861@dLd9e@verify-formals dLd9e@verify-formals) (set! dLda0@chi-lambda-clause (lambda (dL1e07@stx dL1e08@fmls dL1e09@body* dL1e0a@r dL1e0b@mr) (let ((dL1e11@t dL1e08@fmls)) (let ((dL1e13@ls/false (dLd78@syntax-dispatch dL1e11@t 'each-any))) (if dL1e13@ls/false (apply (lambda (dL1e15@x*) (begin (dLd9e@verify-formals dL1e08@fmls dL1e07@stx) (let ((dL1e17@lex* (map dLaf9@gen-lexical dL1e15@x*)) (dL1e18@lab* (map dLafd@gen-label dL1e15@x*))) (values dL1e17@lex* (dLdb0@chi-internal (dLb5d@add-subst (dLb31@make-full-rib dL1e15@x* dL1e18@lab*) dL1e09@body*) (dLd0a@add-lexicals dL1e18@lab* dL1e17@lex* dL1e0a@r) dL1e0b@mr))))) dL1e13@ls/false) (let ((dL1e1b@t dL1e11@t)) (let ((dL1e1d@ls/false (dLd78@syntax-dispatch dL1e1b@t '#(each+ any () any)))) (if dL1e1d@ls/false (apply (lambda (dL1e1f@x* dL1e20@x) (begin (dLd9e@verify-formals dL1e08@fmls dL1e07@stx) (let ((dL1e23@lex* (map dLaf9@gen-lexical dL1e1f@x*)) (dL1e24@lab* (map dLafd@gen-label dL1e1f@x*)) (dL1e25@lex (dLaf9@gen-lexical dL1e20@x)) (dL1e26@lab (dLafd@gen-label dL1e20@x))) (values (append dL1e23@lex* dL1e25@lex) (dLdb0@chi-internal (dLb5d@add-subst (dLb31@make-full-rib (cons dL1e20@x dL1e1f@x*) (cons dL1e26@lab dL1e24@lab*)) dL1e09@body*) (dLd0a@add-lexicals (cons dL1e26@lab dL1e24@lab*) (cons dL1e25@lex dL1e23@lex*) dL1e0a@r) dL1e0b@mr))))) dL1e1d@ls/false) (let ((dL1e2b@t dL1e1b@t)) (let ((dL1e2d@ls/false (dLd78@syntax-dispatch dL1e2b@t '_))) (if dL1e2d@ls/false (apply (lambda () (dLe58@syntax-violation '#f '"invalid syntax" dL1e08@fmls)) dL1e2d@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1e2b@t)))))))))))) (set! dL2862@dLda0@chi-lambda-clause dLda0@chi-lambda-clause) (set! dLda2@chi-lambda-clause* (lambda (dL1e2f@stx dL1e30@fmls* dL1e31@body** dL1e32@r dL1e33@mr) (if (null? dL1e30@fmls*) (values '() '()) (call-with-values (lambda () (dLda0@chi-lambda-clause dL1e2f@stx (car dL1e30@fmls*) (car dL1e31@body**) dL1e32@r dL1e33@mr)) (lambda (dL1e3d@dL1e3a dL1e3e@dL1e3c) (let ((dL1e41@b dL1e3e@dL1e3c) (dL1e42@a dL1e3d@dL1e3a)) (call-with-values (lambda () (dLda2@chi-lambda-clause* dL1e2f@stx (cdr dL1e30@fmls*) (cdr dL1e31@body**) dL1e32@r dL1e33@mr)) (lambda (dL1e49@dL1e46 dL1e4a@dL1e48) (let ((dL1e4d@b* dL1e4a@dL1e48) (dL1e4e@a* dL1e49@dL1e46)) (values (cons dL1e42@a dL1e4e@a*) (cons dL1e41@b dL1e4d@b*))))))))))) (set! dL2863@dLda2@chi-lambda-clause* dLda2@chi-lambda-clause*) (set! dLda4@chi-defun (lambda (dL1e51@x dL1e52@r dL1e53@mr) (let ((dL1e57@fmls (car dL1e51@x)) (dL1e58@body* (cdr dL1e51@x))) (call-with-values (lambda () (dLda0@chi-lambda-clause dL1e57@fmls dL1e57@fmls dL1e58@body* dL1e52@r dL1e53@mr)) (lambda (dL1e5f@dL1e5c dL1e60@dL1e5e) (let ((dL1e63@body dL1e60@dL1e5e) (dL1e64@fmls dL1e5f@dL1e5c)) (dLad4@dLa06@build-lambda '#f dL1e64@fmls dL1e63@body))))))) (set! dL2864@dLda4@chi-defun dLda4@chi-defun) (set! dLda6@chi-rhs (lambda (dL1e67@rhs dL1e68@r dL1e69@mr) (let ((dL1e6d@t (car dL1e67@rhs))) (if (memv dL1e6d@t '(defun)) (dLda4@chi-defun (cdr dL1e67@rhs) dL1e68@r dL1e69@mr) (if (memv dL1e6d@t '(expr)) (let ((dL1e6f@expr (cdr dL1e67@rhs))) (dLd9a@chi-expr dL1e6f@expr dL1e68@r dL1e69@mr)) (if (memv dL1e6d@t '(top-expr)) (let ((dL1e71@expr (cdr dL1e67@rhs))) (dLad6@dLa36@build-sequence '#f (list (dLd9a@chi-expr dL1e71@expr dL1e68@r dL1e69@mr) (dLad7@dLa38@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" dL1e67@rhs))))))) (set! dL2865@dLda6@chi-rhs dLda6@chi-rhs) (set! dLda8@expand-interaction-rhs*/init* (lambda (dL1e73@lhs* dL1e74@rhs* dL1e75@init* dL1e76@r dL1e77@mr) (let dL1e81@f ((dL1e7d@lhs* dL1e73@lhs*) (dL1e7e@rhs* dL1e74@rhs*)) (if (null? dL1e7d@lhs*) (map (lambda (dL1e83@x) (dLd9a@chi-expr dL1e83@x dL1e76@r dL1e77@mr)) dL1e75@init*) (let ((dL1e85@lhs (car dL1e7d@lhs*)) (dL1e86@rhs (car dL1e7e@rhs*))) (let ((dL1e89@t (car dL1e86@rhs))) (if (memv dL1e89@t '(defun)) (let ((dL1e8b@rhs (dLda4@chi-defun (cdr dL1e86@rhs) dL1e76@r dL1e77@mr))) (cons (list 'set! dL1e85@lhs dL1e8b@rhs) (dL1e81@f (cdr dL1e7d@lhs*) (cdr dL1e7e@rhs*)))) (if (memv dL1e89@t '(expr)) (let ((dL1e8d@rhs (dLd9a@chi-expr (cdr dL1e86@rhs) dL1e76@r dL1e77@mr))) (cons (list 'set! dL1e85@lhs dL1e8d@rhs) (dL1e81@f (cdr dL1e7d@lhs*) (cdr dL1e7e@rhs*)))) (if (memv dL1e89@t '(top-expr)) (let ((dL1e8f@e (dLd9a@chi-expr (cdr dL1e86@rhs) dL1e76@r dL1e77@mr))) (cons dL1e8f@e (dL1e81@f (cdr dL1e7d@lhs*) (cdr dL1e7e@rhs*)))) (error 'expand-interaction '"invallid" dL1e86@rhs)))))))))) (set! dL2866@dLda8@expand-interaction-rhs*/init* dLda8@expand-interaction-rhs*/init*) (set! dLdaa@chi-rhs* (lambda (dL1e91@rhs* dL1e92@r dL1e93@mr) (let dL1e99@f ((dL1e97@ls dL1e91@rhs*)) (if (null? dL1e97@ls) '() (let ((dL1e9b@a (dLda6@chi-rhs (car dL1e97@ls) dL1e92@r dL1e93@mr))) (cons dL1e9b@a (dL1e99@f (cdr dL1e97@ls)))))))) (set! dL2867@dLdaa@chi-rhs* dLdaa@chi-rhs*) (set! dLdac@find-bound=? (lambda (dL1e9d@x dL1e9e@lhs* dL1e9f@rhs*) (if (null? dL1e9e@lhs*) '#f (if (dLb75@bound-id=? dL1e9d@x (car dL1e9e@lhs*)) (car dL1e9f@rhs*) (dLdac@find-bound=? dL1e9d@x (cdr dL1e9e@lhs*) (cdr dL1e9f@rhs*)))))) (set! dL2868@dLdac@find-bound=? dLdac@find-bound=?) (set! dLdae@find-dups (lambda (dL1ea3@ls) (let dL1ea9@f ((dL1ea5@ls dL1ea3@ls) (dL1ea6@dups '())) (if (null? dL1ea5@ls) dL1ea6@dups (let ((dL1eab@t (dLdac@find-bound=? (car dL1ea5@ls) (cdr dL1ea5@ls) (cdr dL1ea5@ls)))) (if dL1eab@t ((lambda (dL1ead@x) (dL1ea9@f (cdr dL1ea5@ls) (cons (list (car dL1ea5@ls) dL1ead@x) dL1ea6@dups))) dL1eab@t) (dL1ea9@f (cdr dL1ea5@ls) dL1ea6@dups))))))) (set! dL2869@dLdae@find-dups dLdae@find-dups) (set! dLdb0@chi-internal (lambda (dL1eaf@e* dL1eb0@r dL1eb1@mr) (let ((dL1eb5@rib (dLb25@make-empty-rib))) (call-with-values (lambda () (dLdd0@chi-body* (map (lambda (dL1ec7@x) (dLb5d@add-subst dL1eb5@rib dL1ec7@x)) (dLb6f@syntax->list dL1eaf@e*)) dL1eb0@r dL1eb1@mr '() '() '() '() '() dL1eb5@rib '#f)) (lambda (dL1ec9@dL1eb8 dL1eca@dL1eba dL1ecb@dL1ebc dL1ecc@dL1ebe dL1ecd@dL1ec0 dL1ece@dL1ec2 dL1ecf@dL1ec4 dL1ed0@dL1ec6) (let ((dL1ed9@_exp* dL1ed0@dL1ec6) (dL1eda@kwd* dL1ecf@dL1ec4) (dL1edb@mod** dL1ece@dL1ec2) (dL1edc@rhs* dL1ecd@dL1ec0) (dL1edd@lex* dL1ecc@dL1ebe) (dL1ede@mr dL1ecb@dL1ebc) (dL1edf@r dL1eca@dL1eba) (dL1ee0@e* dL1ec9@dL1eb8)) (begin (if (null? dL1ee0@e*) (dLe58@syntax-violation '#f '"no expression in body" dL1ee0@e*) (void)) (let ((dL1ee9@init* (dLd96@chi-expr* (append (apply append (reverse dL1edb@mod**)) dL1ee0@e*) dL1edf@r dL1ede@mr))) (let ((dL1eeb@rhs* (dLdaa@chi-rhs* dL1edc@rhs* dL1edf@r dL1ede@mr))) (dLadb@dLa40@build-letrec* '#f (reverse dL1edd@lex*) (reverse dL1eeb@rhs*) (dLad6@dLa36@build-sequence '#f dL1ee9@init*))))))))))) (set! dL286a@dLdb0@chi-internal dLdb0@chi-internal) (set! dLdb2@parse-module (lambda (dL1eed@e) (let ((dL1eef@t dL1eed@e)) (let ((dL1ef1@ls/false (dLd78@syntax-dispatch dL1eef@t '(_ each-any . each-any)))) (if dL1ef1@ls/false (apply (lambda (dL1ef3@export* dL1ef4@b*) (begin (if (not (for-all dLb71@id? dL1ef3@export*)) (dLe58@syntax-violation '#f '"module exports must be identifiers" dL1eed@e) (void)) (values '#f (list->vector dL1ef3@export*) dL1ef4@b*))) dL1ef1@ls/false) (let ((dL1ef7@t dL1eef@t)) (let ((dL1ef9@ls/false (dLd78@syntax-dispatch dL1ef7@t '(_ any each-any . each-any)))) (if dL1ef9@ls/false (apply (lambda (dL1efb@name dL1efc@export* dL1efd@b*) (begin (if (not (dLb71@id? dL1efb@name)) (dLe58@syntax-violation '#f '"module name must be an identifier" dL1eed@e) (void)) (if (not (for-all dLb71@id? dL1efc@export*)) (dLe58@syntax-violation '#f '"module exports must be identifiers" dL1eed@e) (void)) (values dL1efb@name (list->vector dL1efc@export*) dL1efd@b*))) dL1ef9@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1ef7@t))))))))) (set! dL286b@dLdb2@parse-module dLdb2@parse-module) (set! dLdbc@module-interface? (lambda (dL1f01@x) (and (simple-struct? dL1f01@x) (eq? (simple-struct-name dL1f01@x) 'module-interface)))) (set! dL286c@dLdbc@module-interface? dLdbc@module-interface?) (set! dLdbe@module-interface-first-mark (lambda (dL1f03@x) (simple-struct-ref dL1f03@x '0))) (set! dL286d@dLdbe@module-interface-first-mark dLdbe@module-interface-first-mark) (set! dLdc0@set-module-interface-first-mark! (lambda (dL1f05@x dL1f06@val) (simple-struct-set! dL1f05@x '0 dL1f06@val))) (set! dL286e@dLdc0@set-module-interface-first-mark! dLdc0@set-module-interface-first-mark!) (set! dLdc2@module-interface-exp-id-vec (lambda (dL1f09@x) (simple-struct-ref dL1f09@x '1))) (set! dL286f@dLdc2@module-interface-exp-id-vec dLdc2@module-interface-exp-id-vec) (set! dLdc4@set-module-interface-exp-id-vec! (lambda (dL1f0b@x dL1f0c@val) (simple-struct-set! dL1f0b@x '1 dL1f0c@val))) (set! dL2870@dLdc4@set-module-interface-exp-id-vec! dLdc4@set-module-interface-exp-id-vec!) (set! dLdc6@module-interface-exp-lab-vec (lambda (dL1f0f@x) (simple-struct-ref dL1f0f@x '2))) (set! dL2871@dLdc6@module-interface-exp-lab-vec dLdc6@module-interface-exp-lab-vec) (set! dLdc8@set-module-interface-exp-lab-vec! (lambda (dL1f11@x dL1f12@val) (simple-struct-set! dL1f11@x '2 dL1f12@val))) (set! dL2872@dLdc8@set-module-interface-exp-lab-vec! dLdc8@set-module-interface-exp-lab-vec!) (set! dLdca@dummy '3) (set! dL2873@dLdca@dummy dLdca@dummy) (set! dLdcc@module-interface-exp-id* (lambda (dL1f15@iface dL1f16@id) (letrec* ((dL1f1a@diff-marks (lambda (dL1f21@ls dL1f22@x) (begin (if (null? dL1f21@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((dL1f25@a (car dL1f21@ls))) (if (eq? dL1f25@a dL1f22@x) '() (cons dL1f25@a (dL1f1a@diff-marks (cdr dL1f21@ls) dL1f22@x)))))))) (let ((dL1f1b@diff (dL1f1a@diff-marks (dLb43@stx-mark* dL1f16@id) (dLdbe@module-interface-first-mark dL1f15@iface))) (dL1f1c@id-vec (dLdc2@module-interface-exp-id-vec dL1f15@iface))) (if (null? dL1f1b@diff) dL1f1c@id-vec (vector-map (lambda (dL1f1f@x) (make-simple-struct 'stx '5 (list (dLb3f@stx-expr dL1f1f@x) (append dL1f1b@diff (dLb43@stx-mark* dL1f1f@x)) '() '()))) dL1f1c@id-vec)))))) (set! dL2874@dLdcc@module-interface-exp-id* dLdcc@module-interface-exp-id*) (set! dLdce@chi-internal-module (lambda (dL1f27@e dL1f28@r dL1f29@mr dL1f2a@lex* dL1f2b@rhs* dL1f2c@mod** dL1f2d@kwd*) (call-with-values (lambda () (dLdb2@parse-module dL1f27@e)) (lambda (dL1f3b@dL1f36 dL1f3c@dL1f38 dL1f3d@dL1f3a) (let ((dL1f41@e* dL1f3d@dL1f3a) (dL1f42@exp-id* dL1f3c@dL1f38) (dL1f43@name dL1f3b@dL1f36)) (let ((dL1f47@rib (dLb25@make-empty-rib))) (let ((dL1f49@e* (map (lambda (dL1f4b@x) (dLb5d@add-subst dL1f47@rib dL1f4b@x)) (dLb6f@syntax->list dL1f41@e*)))) (call-with-values (lambda () (dLdd0@chi-body* dL1f49@e* dL1f28@r dL1f29@mr dL1f2a@lex* dL1f2b@rhs* dL1f2c@mod** dL1f2d@kwd* '() dL1f47@rib '#f)) (lambda (dL1f5d@dL1f4e dL1f5e@dL1f50 dL1f5f@dL1f52 dL1f60@dL1f54 dL1f61@dL1f56 dL1f62@dL1f58 dL1f63@dL1f5a dL1f64@dL1f5c) (let ((dL1f6d@_exp* dL1f64@dL1f5c) (dL1f6e@kwd* dL1f63@dL1f5a) (dL1f6f@mod** dL1f62@dL1f58) (dL1f70@rhs* dL1f61@dL1f56) (dL1f71@lex* dL1f60@dL1f54) (dL1f72@mr dL1f5f@dL1f52) (dL1f73@r dL1f5e@dL1f50) (dL1f74@e* dL1f5d@dL1f4e)) (let ((dL1f7d@exp-lab* (vector-map (lambda (dL1f81@x) (or (dLb87@id->label (make-simple-struct 'stx '5 (list (dLb73@id->sym dL1f81@x) (dLb43@stx-mark* dL1f81@x) (list dL1f47@rib) '()))) (dLe58@syntax-violation '#f '"cannot find module export" dL1f81@x))) dL1f42@exp-id*)) (dL1f7e@mod** (cons dL1f74@e* dL1f6f@mod**))) (if (not dL1f43@name) (values dL1f71@lex* dL1f70@rhs* dL1f42@exp-id* dL1f7d@exp-lab* dL1f73@r dL1f72@mr dL1f7e@mod** dL1f6e@kwd*) (let ((dL1f83@lab (dLafd@gen-label 'module)) (dL1f84@iface (make-simple-struct 'module-interface '4 (list (car (dLb43@stx-mark* dL1f43@name)) (vector-map (lambda (dL1f87@x) (make-simple-struct 'stx '5 (list (dLb3f@stx-expr dL1f87@x) (dLb43@stx-mark* dL1f87@x) '() '()))) dL1f42@exp-id*) dL1f7d@exp-lab*)))) (values dL1f71@lex* dL1f70@rhs* (vector dL1f43@name) (vector dL1f83@lab) (cons (cons dL1f83@lab (cons '$module dL1f84@iface)) dL1f73@r) (cons (cons dL1f83@lab (cons '$module dL1f84@iface)) dL1f72@mr) dL1f7e@mod** dL1f6e@kwd*)))))))))))))) (set! dL2875@dLdce@chi-internal-module dLdce@chi-internal-module) (set! dLdd0@chi-body* (lambda (dL1f89@e* dL1f8a@r dL1f8b@mr dL1f8c@lex* dL1f8d@rhs* dL1f8e@mod** dL1f8f@kwd* dL1f90@exp* dL1f91@rib dL1f92@top?) (if (null? dL1f89@e*) (values dL1f89@e* dL1f8a@r dL1f8b@mr dL1f8c@lex* dL1f8d@rhs* dL1f8e@mod** dL1f8f@kwd* dL1f90@exp*) (let ((dL1f9d@e (car dL1f89@e*))) (call-with-values (lambda () (dLb93@syntax-type dL1f9d@e dL1f8a@r)) (lambda (dL1fa5@dL1fa0 dL1fa6@dL1fa2 dL1fa7@dL1fa4) (let ((dL1fab@kwd dL1fa7@dL1fa4) (dL1fac@value dL1fa6@dL1fa2) (dL1fad@type dL1fa5@dL1fa0)) (let ((dL1fb1@kwd* (if (dLb71@id? dL1fab@kwd) (cons dL1fab@kwd dL1f8f@kwd*) dL1f8f@kwd*))) (let ((dL1fb3@t dL1fad@type)) (if (memv dL1fb3@t '(define)) (call-with-values (lambda () (dLcfa@parse-define dL1f9d@e)) (lambda (dL1fb9@dL1fb6 dL1fba@dL1fb8) (let ((dL1fbd@rhs dL1fba@dL1fb8) (dL1fbe@id dL1fb9@dL1fb6)) (begin (if (dLb7d@bound-id-member? dL1fbe@id dL1fb1@kwd*) (dLe58@syntax-violation '#f '"cannot redefine keyword" dL1f9d@e) (void)) (call-with-values (lambda () (dLb01@gen-define-label+loc dL1fbe@id dL1f91@rib)) (lambda (dL1fc5@dL1fc2 dL1fc6@dL1fc4) (let ((dL1fc9@lex dL1fc6@dL1fc4) (dL1fca@lab dL1fc5@dL1fc2)) (begin (dLb27@extend-rib! dL1f91@rib dL1fbe@id dL1fca@lab) (dLdd0@chi-body* (cdr dL1f89@e*) (dLd08@add-lexical dL1fca@lab dL1fc9@lex dL1f8a@r) dL1f8b@mr (cons dL1fc9@lex dL1f8c@lex*) (cons dL1fbd@rhs dL1f8d@rhs*) dL1f8e@mod** dL1fb1@kwd* dL1f90@exp* dL1f91@rib dL1f92@top?))))))))) (if (memv dL1fb3@t '(define-syntax)) (call-with-values (lambda () (dLcfc@parse-define-syntax dL1f9d@e)) (lambda (dL1fd1@dL1fce dL1fd2@dL1fd0) (let ((dL1fd5@rhs dL1fd2@dL1fd0) (dL1fd6@id dL1fd1@dL1fce)) (begin (if (dLb7d@bound-id-member? dL1fd6@id dL1fb1@kwd*) (dLe58@syntax-violation '#f '"cannot redefine keyword" dL1f9d@e) (void)) (let ((dL1fd9@lab (dLb03@gen-define-label dL1fd6@id dL1f91@rib)) (dL1fda@expanded-rhs (dLdd2@expand-transformer dL1fd5@rhs dL1f8b@mr))) (begin (dLb27@extend-rib! dL1f91@rib dL1fd6@id dL1fd9@lab) (let ((dL1fdd@b (dLba9@make-eval-transformer dL1fda@expanded-rhs))) (dLdd0@chi-body* (cdr dL1f89@e*) (cons (cons dL1fd9@lab dL1fdd@b) dL1f8a@r) (cons (cons dL1fd9@lab dL1fdd@b) dL1f8b@mr) dL1f8c@lex* dL1f8d@rhs* dL1f8e@mod** dL1fb1@kwd* dL1f90@exp* dL1f91@rib dL1f92@top?)))))))) (if (memv dL1fb3@t '(let-syntax letrec-syntax)) (let ((dL1fdf@t dL1f9d@e)) (let ((dL1fe1@ls/false (dLd78@syntax-dispatch dL1fdf@t '(_ #(each (any any)) . each-any)))) (if (and dL1fe1@ls/false (apply (lambda (dL1fe3@xlhs* dL1fe4@xrhs* dL1fe5@xbody*) (if (not (dLb79@valid-bound-ids? dL1fe3@xlhs*)) (dLe58@syntax-violation '#f '"invalid identifiers" dL1f9d@e) (void))) dL1fe1@ls/false)) (apply (lambda (dL1fe9@xlhs* dL1fea@xrhs* dL1feb@xbody*) (let ((dL1fef@xlab* (map dLafd@gen-label dL1fe9@xlhs*))) (let ((dL1ff1@xrib (dLb31@make-full-rib dL1fe9@xlhs* dL1fef@xlab*))) (let ((dL1ff3@xb* (map (lambda (dL1ff5@x) (dLba9@make-eval-transformer (dLdd2@expand-transformer (if (eq? dL1fad@type 'let-syntax) dL1ff5@x (dLb5d@add-subst dL1ff1@xrib dL1ff5@x)) dL1f8b@mr))) dL1fea@xrhs*))) (dLdd0@chi-body* (append (map (lambda (dL1ff7@x) (dLb5d@add-subst dL1ff1@xrib dL1ff7@x)) dL1feb@xbody*) (cdr dL1f89@e*)) (append (map cons dL1fef@xlab* dL1ff3@xb*) dL1f8a@r) (append (map cons dL1fef@xlab* dL1ff3@xb*) dL1f8b@mr) dL1f8c@lex* dL1f8d@rhs* dL1f8e@mod** dL1fb1@kwd* dL1f90@exp* dL1f91@rib dL1f92@top?))))) dL1fe1@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1fdf@t)))) (if (memv dL1fb3@t '(begin)) (let ((dL1ff9@t dL1f9d@e)) (let ((dL1ffb@ls/false (dLd78@syntax-dispatch dL1ff9@t '(_ . each-any)))) (if dL1ffb@ls/false (apply (lambda (dL1ffd@x*) (dLdd0@chi-body* (append dL1ffd@x* (cdr dL1f89@e*)) dL1f8a@r dL1f8b@mr dL1f8c@lex* dL1f8d@rhs* dL1f8e@mod** dL1fb1@kwd* dL1f90@exp* dL1f91@rib dL1f92@top?)) dL1ffb@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL1ff9@t)))) (if (memv dL1fb3@t '(global-macro global-macro!)) (dLdd0@chi-body* (cons (dLb5d@add-subst dL1f91@rib (dLd94@chi-global-macro dL1fac@value dL1f9d@e)) (cdr dL1f89@e*)) dL1f8a@r dL1f8b@mr dL1f8c@lex* dL1f8d@rhs* dL1f8e@mod** dL1fb1@kwd* dL1f90@exp* dL1f91@rib dL1f92@top?) (if (memv dL1fb3@t '(local-macro local-macro!)) (dLdd0@chi-body* (cons (dLb5d@add-subst dL1f91@rib (dLd92@chi-local-macro dL1fac@value dL1f9d@e)) (cdr dL1f89@e*)) dL1f8a@r dL1f8b@mr dL1f8c@lex* dL1f8d@rhs* dL1f8e@mod** dL1fb1@kwd* dL1f90@exp* dL1f91@rib dL1f92@top?) (if (memv dL1fb3@t '(macro macro!)) (dLdd0@chi-body* (cons (dLb5d@add-subst dL1f91@rib (dLd90@chi-macro dL1fac@value dL1f9d@e)) (cdr dL1f89@e*)) dL1f8a@r dL1f8b@mr dL1f8c@lex* dL1f8d@rhs* dL1f8e@mod** dL1fb1@kwd* dL1f90@exp* dL1f91@rib dL1f92@top?) (if (memv dL1fb3@t '(module)) (call-with-values (lambda () (dLdce@chi-internal-module dL1f9d@e dL1f8a@r dL1f8b@mr dL1f8c@lex* dL1f8d@rhs* dL1f8e@mod** dL1fb1@kwd*)) (lambda (dL200f@dL2000 dL2010@dL2002 dL2011@dL2004 dL2012@dL2006 dL2013@dL2008 dL2014@dL200a dL2015@dL200c dL2016@dL200e) (let ((dL201f@kwd* dL2016@dL200e) (dL2020@mod** dL2015@dL200c) (dL2021@mr dL2014@dL200a) (dL2022@r dL2013@dL2008) (dL2023@m-exp-lab* dL2012@dL2006) (dL2024@m-exp-id* dL2011@dL2004) (dL2025@rhs* dL2010@dL2002) (dL2026@lex* dL200f@dL2000)) (begin (vector-for-each (lambda (dL202f@id dL2030@lab) (dLb27@extend-rib! dL1f91@rib dL202f@id dL2030@lab)) dL2024@m-exp-id* dL2023@m-exp-lab*) (dLdd0@chi-body* (cdr dL1f89@e*) dL2022@r dL2021@mr dL2026@lex* dL2025@rhs* dL2020@mod** dL201f@kwd* dL1f90@exp* dL1f91@rib dL1f92@top?))))) (if (memv dL1fb3@t '(library)) (begin (dLe3a@library-expander (dLb85@stx->datum dL1f9d@e)) (dLdd0@chi-body* (cdr dL1f89@e*) dL1f8a@r dL1f8b@mr dL1f8c@lex* dL1f8d@rhs* dL1f8e@mod** dL1fb1@kwd* dL1f90@exp* dL1f91@rib dL1f92@top?)) (if (memv dL1fb3@t '(export)) (let ((dL2033@t dL1f9d@e)) (let ((dL2035@ls/false (dLd78@syntax-dispatch dL2033@t '(_ . each-any)))) (if dL2035@ls/false (apply (lambda (dL2037@exp-decl*) (dLdd0@chi-body* (cdr dL1f89@e*) dL1f8a@r dL1f8b@mr dL1f8c@lex* dL1f8d@rhs* dL1f8e@mod** dL1fb1@kwd* (append dL2037@exp-decl* dL1f90@exp*) dL1f91@rib dL1f92@top?)) dL2035@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL2033@t)))) (if (memv dL1fb3@t '(import)) (letrec* ((dL203a@module-import? (lambda (dL208d@e) (let ((dL208f@t dL208d@e)) (let ((dL2091@ls/false (dLd78@syntax-dispatch dL208f@t '(_ any)))) (if (and dL2091@ls/false (apply (lambda (dL2093@id) (dLb71@id? dL2093@id)) dL2091@ls/false)) (apply (lambda (dL2095@id) '#t) dL2091@ls/false) (let ((dL2097@t dL208f@t)) (let ((dL2099@ls/false (dLd78@syntax-dispatch dL2097@t '(_ . each-any)))) (if dL2099@ls/false (apply (lambda (dL209b@imp*) '#f) dL2099@ls/false) (let ((dL209d@t dL2097@t)) (let ((dL209f@ls/false (dLd78@syntax-dispatch dL209d@t '_))) (if dL209f@ls/false (apply (lambda () (dLe58@syntax-violation '#f '"malformed import form" dL208d@e)) dL209f@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL209d@t)))))))))))) (dL203c@module-import (lambda (dL206b@e dL206c@r) (let ((dL206f@t dL206b@e)) (let ((dL2071@ls/false (dLd78@syntax-dispatch dL206f@t '(_ any)))) (if (and dL2071@ls/false (apply (lambda (dL2073@id) (dLb71@id? dL2073@id)) dL2071@ls/false)) (apply (lambda (dL2075@id) (call-with-values (lambda () (dLb93@syntax-type dL2075@id dL206c@r)) (lambda (dL207d@dL2078 dL207e@dL207a dL207f@dL207c) (let ((dL2083@kwd dL207f@dL207c) (dL2084@value dL207e@dL207a) (dL2085@type dL207d@dL2078)) (let ((dL2089@t dL2085@type)) (if (memv dL2089@t '($module)) (let ((dL208b@iface dL2084@value)) (values (dLdcc@module-interface-exp-id* dL208b@iface dL2075@id) (dLdc6@module-interface-exp-lab-vec dL208b@iface))) (dLe58@syntax-violation '#f '"invalid import" dL206b@e))))))) dL2071@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL206f@t)))))) (dL203e@library-import (lambda (dL204f@e) (let ((dL2051@t dL204f@e)) (let ((dL2053@ls/false (dLd78@syntax-dispatch dL2051@t '(any . each-any)))) (if dL2053@ls/false (apply (lambda (dL2055@ctxt dL2056@imp*) (call-with-values (lambda () (dLdda@parse-import-spec* (dLe5e@syntax->datum dL2056@imp*))) (lambda (dL205d@dL205a dL205e@dL205c) (let ((dL2061@subst-labels dL205e@dL205c) (dL2062@subst-names dL205d@dL205a)) (values (vector-map (lambda (dL2065@name) (dLb51@datum->stx dL2055@ctxt dL2065@name)) dL2062@subst-names) dL2061@subst-labels))))) dL2053@ls/false) (let ((dL2067@t dL2051@t)) (let ((dL2069@ls/false (dLd78@syntax-dispatch dL2067@t '_))) (if dL2069@ls/false (apply (lambda () (dLe58@syntax-violation '#f '"invalid import form" dL204f@e)) dL2069@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL2067@t)))))))))) (begin (call-with-values (lambda () (if (dL203a@module-import? dL1f9d@e) (dL203c@module-import dL1f9d@e dL1f8a@r) (dL203e@library-import dL1f9d@e))) (lambda (dL2043@dL2040 dL2044@dL2042) (let ((dL2047@lab* dL2044@dL2042) (dL2048@id* dL2043@dL2040)) (vector-for-each (lambda (dL204b@id dL204c@lab) (dLb27@extend-rib! dL1f91@rib dL204b@id dL204c@lab)) dL2048@id* dL2047@lab*)))) (dLdd0@chi-body* (cdr dL1f89@e*) dL1f8a@r dL1f8b@mr dL1f8c@lex* dL1f8d@rhs* dL1f8e@mod** dL1fb1@kwd* dL1f90@exp* dL1f91@rib dL1f92@top?))) (if dL1f92@top? (dLdd0@chi-body* (cdr dL1f89@e*) dL1f8a@r dL1f8b@mr (cons (dLaf9@gen-lexical 'dummy) dL1f8c@lex*) (cons (cons 'top-expr dL1f9d@e) dL1f8d@rhs*) dL1f8e@mod** dL1fb1@kwd* dL1f90@exp* dL1f91@rib dL1f92@top?) (values dL1f89@e* dL1f8a@r dL1f8b@mr dL1f8c@lex* dL1f8d@rhs* dL1f8e@mod** dL1fb1@kwd* dL1f90@exp*)))))))))))))))))))))) (set! dL2876@dLdd0@chi-body* dLdd0@chi-body*) (set! dLdd2@expand-transformer (lambda (dL20a1@expr dL20a2@r) (let ((dL20a5@rtc (dLdde@make-collector))) (let ((dL20a7@expanded-rhs (let ((dL20b1@dL20aa dLde0@inv-collector) (dL20b2@dL20ac dLde2@vis-collector) (dL20b3@dL20ae dL20a5@rtc) (dL20b4@dL20b0 (lambda (dL20b9@x) (values)))) (let ((dL20bb@swap (lambda () (begin (let ((dL20bd@t (dL20b1@dL20aa))) (begin (dL20b1@dL20aa dL20b3@dL20ae) (set! dL20b3@dL20ae dL20bd@t))) (let ((dL20bf@t (dL20b2@dL20ac))) (begin (dL20b2@dL20ac dL20b4@dL20b0) (set! dL20b4@dL20b0 dL20bf@t))))))) (dynamic-wind dL20bb@swap (lambda () (dLd9a@chi-expr dL20a1@expr dL20a2@r dL20a2@r)) dL20bb@swap))))) (begin (for-each (let ((dL20c1@mark-visit (dLde2@vis-collector))) (lambda (dL20c3@x) (begin (dL98d@dL7db@invoke-library dL20c3@x) (dL20c1@mark-visit dL20c3@x)))) (dL20a5@rtc)) dL20a7@expanded-rhs))))) (set! dL2877@dLdd2@expand-transformer dLdd2@expand-transformer) (set! dLdd4@parse-exports (lambda (dL20c5@exp*) (let dL20cd@f ((dL20c7@exp* dL20c5@exp*) (dL20c8@int* '()) (dL20c9@ext* '())) (if (null? dL20c7@exp*) (begin (if (not (dLb79@valid-bound-ids? dL20c9@ext*)) (dLe58@syntax-violation 'export '"invalid exports" (dLdae@find-dups dL20c9@ext*)) (void)) (values (map dLe5e@syntax->datum dL20c9@ext*) dL20c8@int*)) (let ((dL20cf@t (car dL20c7@exp*))) (let ((dL20d1@ls/false (dLd78@syntax-dispatch dL20cf@t '(any . #(each (any any)))))) (if dL20d1@ls/false (apply (lambda (dL20d3@rename dL20d4@i* dL20d5@e*) (begin (if (not (and (eq? (dLe5e@syntax->datum dL20d3@rename) 'rename) (for-all dLb71@id? dL20d4@i*) (for-all dLb71@id? dL20d5@e*))) (dLe58@syntax-violation 'export '"invalid export specifier" (car dL20c7@exp*)) (void)) (dL20cd@f (cdr dL20c7@exp*) (append dL20d4@i* dL20c8@int*) (append dL20d5@e* dL20c9@ext*)))) dL20d1@ls/false) (let ((dL20d9@t dL20cf@t)) (let ((dL20db@ls/false (dLd78@syntax-dispatch dL20d9@t 'any))) (if dL20db@ls/false (apply (lambda (dL20dd@ie) (begin (if (not (dLb71@id? dL20dd@ie)) (dLe58@syntax-violation 'export '"invalid export" dL20dd@ie) (void)) (dL20cd@f (cdr dL20c7@exp*) (cons dL20dd@ie dL20c8@int*) (cons dL20dd@ie dL20c9@ext*)))) dL20db@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL20d9@t))))))))))) (set! dL2878@dLdd4@parse-exports dLdd4@parse-exports) (set! dLdd6@parse-library-name (lambda (dL20df@spec) (letrec* ((dL20e2@parse (lambda (dL20ef@x) (let ((dL20f1@t dL20ef@x)) (let ((dL20f3@ls/false (dLd78@syntax-dispatch dL20f1@t '(each-any)))) (if (and dL20f3@ls/false (apply (lambda (dL20f5@v*) (for-all (lambda (dL20f7@x) (let ((dL20f9@x (dLe5e@syntax->datum dL20f7@x))) (and (integer? dL20f9@x) (exact? dL20f9@x)))) dL20f5@v*)) dL20f3@ls/false)) (apply (lambda (dL20fb@v*) (values '() (map dLe5e@syntax->datum dL20fb@v*))) dL20f3@ls/false) (let ((dL20fd@t dL20f1@t)) (let ((dL20ff@ls/false (dLd78@syntax-dispatch dL20fd@t '(any . any)))) (if (and dL20ff@ls/false (apply (lambda (dL2101@x dL2102@rest) (symbol? (dLe5e@syntax->datum dL2101@x))) dL20ff@ls/false)) (apply (lambda (dL2105@x dL2106@rest) (call-with-values (lambda () (dL20e2@parse dL2106@rest)) (lambda (dL210d@dL210a dL210e@dL210c) (let ((dL2111@v* dL210e@dL210c) (dL2112@x* dL210d@dL210a)) (values (cons (dLe5e@syntax->datum dL2105@x) dL2112@x*) dL2111@v*))))) dL20ff@ls/false) (let ((dL2115@t dL20fd@t)) (let ((dL2117@ls/false (dLd78@syntax-dispatch dL2115@t '()))) (if dL2117@ls/false (apply (lambda () (values '() '())) dL2117@ls/false) (let ((dL2119@t dL2115@t)) (let ((dL211b@ls/false (dLd78@syntax-dispatch dL2119@t '_))) (if dL211b@ls/false (apply (lambda () (dLe58@syntax-violation '#f '"invalid library name" dL20df@spec)) dL211b@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL2119@t)))))))))))))))) (call-with-values (lambda () (dL20e2@parse dL20df@spec)) (lambda (dL20e7@dL20e4 dL20e8@dL20e6) (let ((dL20eb@ver* dL20e8@dL20e6) (dL20ec@name* dL20e7@dL20e4)) (begin (if (null? dL20ec@name*) (dLe58@syntax-violation '#f '"empty library name" dL20df@spec) (void)) (values dL20ec@name* dL20eb@ver*)))))))) (set! dL2879@dLdd6@parse-library-name dLdd6@parse-library-name) (set! dLdd8@parse-library (lambda (dL211d@e) (let ((dL211f@t dL211d@e)) (let ((dL2121@ls/false (dLd78@syntax-dispatch dL211f@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and dL2121@ls/false (apply (lambda (dL2123@library dL2124@name* dL2125@export dL2126@exp* dL2127@import dL2128@imp* dL2129@b*) (and (eq? (dLe5e@syntax->datum dL2125@export) 'export) (eq? (dLe5e@syntax->datum dL2127@import) 'import) (eq? (dLe5e@syntax->datum dL2123@library) 'library))) dL2121@ls/false)) (apply (lambda (dL2131@library dL2132@name* dL2133@export dL2134@exp* dL2135@import dL2136@imp* dL2137@b*) (values dL2132@name* dL2134@exp* dL2136@imp* dL2137@b*)) dL2121@ls/false) (let ((dL213f@t dL211f@t)) (let ((dL2141@ls/false (dLd78@syntax-dispatch dL213f@t '_))) (if dL2141@ls/false (apply (lambda () (dLe58@syntax-violation '#f '"malformed library" dL211d@e)) dL2141@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL213f@t))))))))) (set! dL287a@dLdd8@parse-library dLdd8@parse-library) (set! dLdda@parse-import-spec* (letrec* ((dL2144@idsyn? (lambda (dL234d@x) (symbol? (dLe5e@syntax->datum dL234d@x)))) (dL2146@dup-error (lambda (dL234b@name) (dLe58@syntax-violation 'import '"two imports with different bindings" dL234b@name))) (dL2148@merge-substs (lambda (dL2339@s dL233a@subst) (letrec* ((dL233e@insert-to-subst (lambda (dL233f@a dL2340@subst) (let ((dL2343@name (car dL233f@a)) (dL2344@label (cdr dL233f@a))) (let ((dL2347@t (assq dL2343@name dL2340@subst))) (if dL2347@t ((lambda (dL2349@x) (if (eq? (cdr dL2349@x) dL2344@label) dL2340@subst (dL2146@dup-error dL2343@name))) dL2347@t) (cons dL233f@a dL2340@subst))))))) (if (null? dL2339@s) dL233a@subst (dL233e@insert-to-subst (car dL2339@s) (dL2148@merge-substs (cdr dL2339@s) dL233a@subst)))))) (dL214a@exclude* (lambda (dL2309@sym* dL230a@subst) (letrec* ((dL230e@exclude (lambda (dL2327@sym dL2328@subst) (if (null? dL2328@subst) (dLe58@syntax-violation 'import '"cannot rename unbound identifier" dL2327@sym) (if (eq? dL2327@sym (caar dL2328@subst)) (values (cdar dL2328@subst) (cdr dL2328@subst)) (let ((dL232b@a (car dL2328@subst))) (call-with-values (lambda () (dL230e@exclude dL2327@sym (cdr dL2328@subst))) (lambda (dL2331@dL232e dL2332@dL2330) (let ((dL2335@subst dL2332@dL2330) (dL2336@old dL2331@dL232e)) (values dL2336@old (cons dL232b@a dL2335@subst))))))))))) (if (null? dL2309@sym*) (values '() dL230a@subst) (call-with-values (lambda () (dL230e@exclude (car dL2309@sym*) dL230a@subst)) (lambda (dL2313@dL2310 dL2314@dL2312) (let ((dL2317@subst dL2314@dL2312) (dL2318@old dL2313@dL2310)) (call-with-values (lambda () (dL214a@exclude* (cdr dL2309@sym*) dL2317@subst)) (lambda (dL231f@dL231c dL2320@dL231e) (let ((dL2323@subst dL2320@dL231e) (dL2324@old* dL231f@dL231c)) (values (cons dL2318@old dL2324@old*) dL2323@subst))))))))))) (dL214c@find* (lambda (dL2301@sym* dL2302@subst) (map (lambda (dL2305@x) (let ((dL2307@t (assq dL2305@x dL2302@subst))) (if dL2307@t (cdr dL2307@t) (dLe58@syntax-violation 'import '"cannot find identifier" dL2305@x)))) dL2301@sym*))) (dL214e@rem* (lambda (dL22f9@sym* dL22fa@subst) (let dL22ff@f ((dL22fd@subst dL22fa@subst)) (if (null? dL22fd@subst) '() (if (memq (caar dL22fd@subst) dL22f9@sym*) (dL22ff@f (cdr dL22fd@subst)) (cons (car dL22fd@subst) (dL22ff@f (cdr dL22fd@subst)))))))) (dL2150@remove-dups (lambda (dL22f7@ls) (if (null? dL22f7@ls) '() (if (memq (car dL22f7@ls) (cdr dL22f7@ls)) (dL2150@remove-dups (cdr dL22f7@ls)) (cons (car dL22f7@ls) (dL2150@remove-dups (cdr dL22f7@ls))))))) (dL2152@parse-library-name (lambda (dL220f@spec) (letrec* ((dL2212@subversion? (lambda (dL22f3@x) (let ((dL22f5@x (dLe5e@syntax->datum dL22f3@x))) (and (integer? dL22f5@x) (exact? dL22f5@x) (>= dL22f5@x '0))))) (dL2214@subversion-pred (lambda (dL2293@x*) (let ((dL2295@t dL2293@x*)) (let ((dL2297@ls/false (dLd78@syntax-dispatch dL2295@t 'any))) (if (and dL2297@ls/false (apply (lambda (dL2299@n) (dL2212@subversion? dL2299@n)) dL2297@ls/false)) (apply (lambda (dL229b@n) (lambda (dL229d@x) (= dL229d@x (dLe5e@syntax->datum dL229b@n)))) dL2297@ls/false) (let ((dL229f@t dL2295@t)) (let ((dL22a1@ls/false (dLd78@syntax-dispatch dL229f@t '(any . each-any)))) (if (and dL22a1@ls/false (apply (lambda (dL22a3@p? dL22a4@sub*) (eq? (dLe5e@syntax->datum dL22a3@p?) 'and)) dL22a1@ls/false)) (apply (lambda (dL22a7@p? dL22a8@sub*) (let ((dL22ab@p* (map dL2214@subversion-pred dL22a8@sub*))) (lambda (dL22ad@x) (for-all (lambda (dL22af@p) (dL22af@p dL22ad@x)) dL22ab@p*)))) dL22a1@ls/false) (let ((dL22b1@t dL229f@t)) (let ((dL22b3@ls/false (dLd78@syntax-dispatch dL22b1@t '(any . each-any)))) (if (and dL22b3@ls/false (apply (lambda (dL22b5@p? dL22b6@sub*) (eq? (dLe5e@syntax->datum dL22b5@p?) 'or)) dL22b3@ls/false)) (apply (lambda (dL22b9@p? dL22ba@sub*) (let ((dL22bd@p* (map dL2214@subversion-pred dL22ba@sub*))) (lambda (dL22bf@x) (exists (lambda (dL22c1@p) (dL22c1@p dL22bf@x)) dL22bd@p*)))) dL22b3@ls/false) (let ((dL22c3@t dL22b1@t)) (let ((dL22c5@ls/false (dLd78@syntax-dispatch dL22c3@t '(any any)))) (if (and dL22c5@ls/false (apply (lambda (dL22c7@p? dL22c8@sub) (eq? (dLe5e@syntax->datum dL22c7@p?) 'not)) dL22c5@ls/false)) (apply (lambda (dL22cb@p? dL22cc@sub) (let ((dL22cf@p (dL2214@subversion-pred dL22cc@sub))) (lambda (dL22d1@x) (not (dL22cf@p dL22d1@x))))) dL22c5@ls/false) (let ((dL22d3@t dL22c3@t)) (let ((dL22d5@ls/false (dLd78@syntax-dispatch dL22d3@t '(any any)))) (if (and dL22d5@ls/false (apply (lambda (dL22d7@p? dL22d8@n) (and (eq? (dLe5e@syntax->datum dL22d7@p?) '<=) (dL2212@subversion? dL22d8@n))) dL22d5@ls/false)) (apply (lambda (dL22db@p? dL22dc@n) (lambda (dL22df@x) (<= dL22df@x (dLe5e@syntax->datum dL22dc@n)))) dL22d5@ls/false) (let ((dL22e1@t dL22d3@t)) (let ((dL22e3@ls/false (dLd78@syntax-dispatch dL22e1@t '(any any)))) (if (and dL22e3@ls/false (apply (lambda (dL22e5@p? dL22e6@n) (and (eq? (dLe5e@syntax->datum dL22e5@p?) '>=) (dL2212@subversion? dL22e6@n))) dL22e3@ls/false)) (apply (lambda (dL22e9@p? dL22ea@n) (lambda (dL22ed@x) (>= dL22ed@x (dLe5e@syntax->datum dL22ea@n)))) dL22e3@ls/false) (let ((dL22ef@t dL22e1@t)) (let ((dL22f1@ls/false (dLd78@syntax-dispatch dL22ef@t '_))) (if dL22f1@ls/false (apply (lambda () (dLe58@syntax-violation 'import '"invalid sub-version spec" dL220f@spec dL2293@x*)) dL22f1@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL22ef@t)))))))))))))))))))))))) (dL2216@version-pred (lambda (dL2243@x*) (let ((dL2245@t dL2243@x*)) (let ((dL2247@ls/false (dLd78@syntax-dispatch dL2245@t '()))) (if dL2247@ls/false (apply (lambda () (lambda (dL2249@x) '#t)) dL2247@ls/false) (let ((dL224b@t dL2245@t)) (let ((dL224d@ls/false (dLd78@syntax-dispatch dL224b@t '(any . each-any)))) (if (and dL224d@ls/false (apply (lambda (dL224f@c dL2250@ver*) (eq? (dLe5e@syntax->datum dL224f@c) 'and)) dL224d@ls/false)) (apply (lambda (dL2253@c dL2254@ver*) (let ((dL2257@p* (map dL2216@version-pred dL2254@ver*))) (lambda (dL2259@x) (for-all (lambda (dL225b@p) (dL225b@p dL2259@x)) dL2257@p*)))) dL224d@ls/false) (let ((dL225d@t dL224b@t)) (let ((dL225f@ls/false (dLd78@syntax-dispatch dL225d@t '(any . each-any)))) (if (and dL225f@ls/false (apply (lambda (dL2261@c dL2262@ver*) (eq? (dLe5e@syntax->datum dL2261@c) 'or)) dL225f@ls/false)) (apply (lambda (dL2265@c dL2266@ver*) (let ((dL2269@p* (map dL2216@version-pred dL2266@ver*))) (lambda (dL226b@x) (exists (lambda (dL226d@p) (dL226d@p dL226b@x)) dL2269@p*)))) dL225f@ls/false) (let ((dL226f@t dL225d@t)) (let ((dL2271@ls/false (dLd78@syntax-dispatch dL226f@t '(any any)))) (if (and dL2271@ls/false (apply (lambda (dL2273@c dL2274@ver) (eq? (dLe5e@syntax->datum dL2273@c) 'not)) dL2271@ls/false)) (apply (lambda (dL2277@c dL2278@ver) (let ((dL227b@p (dL2216@version-pred dL2278@ver))) (lambda (dL227d@x) (not (dL227b@p dL227d@x))))) dL2271@ls/false) (let ((dL227f@t dL226f@t)) (let ((dL2281@ls/false (dLd78@syntax-dispatch dL227f@t 'each-any))) (if dL2281@ls/false (apply (lambda (dL2283@sub*) (let ((dL2285@p* (map dL2214@subversion-pred dL2283@sub*))) (lambda (dL2287@x) (let dL228d@f ((dL2289@p* dL2285@p*) (dL228a@x dL2287@x)) (if (null? dL2289@p*) '#t (if (null? dL228a@x) '#f (and ((car dL2289@p*) (car dL228a@x)) (dL228d@f (cdr dL2289@p*) (cdr dL228a@x))))))))) dL2281@ls/false) (let ((dL228f@t dL227f@t)) (let ((dL2291@ls/false (dLd78@syntax-dispatch dL228f@t '_))) (if dL2291@ls/false (apply (lambda () (dLe58@syntax-violation 'import '"invalid version spec" dL220f@spec dL2243@x*)) dL2291@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL228f@t)))))))))))))))))))))) (let dL2219@f ((dL2217@x dL220f@spec)) (let ((dL221b@t dL2217@x)) (let ((dL221d@ls/false (dLd78@syntax-dispatch dL221b@t '(each-any)))) (if dL221d@ls/false (apply (lambda (dL221f@version-spec*) (values '() (dL2216@version-pred dL221f@version-spec*))) dL221d@ls/false) (let ((dL2221@t dL221b@t)) (let ((dL2223@ls/false (dLd78@syntax-dispatch dL2221@t '(any . any)))) (if (and dL2223@ls/false (apply (lambda (dL2225@x dL2226@x*) (dL2144@idsyn? dL2225@x)) dL2223@ls/false)) (apply (lambda (dL2229@x dL222a@x*) (call-with-values (lambda () (dL2219@f dL222a@x*)) (lambda (dL2231@dL222e dL2232@dL2230) (let ((dL2235@pred dL2232@dL2230) (dL2236@name dL2231@dL222e)) (values (cons (dLe5e@syntax->datum dL2229@x) dL2236@name) dL2235@pred))))) dL2223@ls/false) (let ((dL2239@t dL2221@t)) (let ((dL223b@ls/false (dLd78@syntax-dispatch dL2239@t '()))) (if dL223b@ls/false (apply (lambda () (values '() (lambda (dL223d@x) '#t))) dL223b@ls/false) (let ((dL223f@t dL2239@t)) (let ((dL2241@ls/false (dLd78@syntax-dispatch dL223f@t '_))) (if dL2241@ls/false (apply (lambda () (dLe58@syntax-violation '#f '"invalid import spec" dL220f@spec)) dL2241@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL223f@t))))))))))))))))) (dL2154@import-library (lambda (dL21ff@spec*) (call-with-values (lambda () (dL2152@parse-library-name dL21ff@spec*)) (lambda (dL2205@dL2202 dL2206@dL2204) (let ((dL2209@pred dL2206@dL2204) (dL220a@name dL2205@dL2202)) (begin (if (null? dL220a@name) (dLe58@syntax-violation 'import '"empty library name" dL21ff@spec*) (void)) (let ((dL220d@lib (dL986@dL7cd@find-library-by-name dL220a@name))) (begin (if (not dL220d@lib) (dLe58@syntax-violation 'import '"cannot find library with required name" dL220a@name) (void)) (if (not (dL2209@pred (dL960@dL781@library-version dL220d@lib))) (dLe58@syntax-violation 'import '"library does not satisfy version specification" dL21ff@spec* dL220d@lib) (void)) ((dLde4@imp-collector) dL220d@lib) (dL968@dL791@library-subst dL220d@lib))))))))) (dL2156@get-import (lambda (dL2171@spec) (let ((dL2173@t dL2171@spec)) (let ((dL2175@ls/false (dLd78@syntax-dispatch dL2173@t '(any . each-any)))) (if (and dL2175@ls/false (apply (lambda (dL2177@x dL2178@x*) (not (memq (dLe5e@syntax->datum dL2177@x) '(for rename except only prefix library)))) dL2175@ls/false)) (apply (lambda (dL217b@x dL217c@x*) (dL2154@import-library (cons dL217b@x dL217c@x*))) dL2175@ls/false) (let ((dL217f@t dL2173@t)) (let ((dL2181@ls/false (dLd78@syntax-dispatch dL217f@t '(any any . #(each (any any)))))) (if (and dL2181@ls/false (apply (lambda (dL2183@rename dL2184@isp dL2185@old* dL2186@new*) (and (eq? (dLe5e@syntax->datum dL2183@rename) 'rename) (for-all dL2144@idsyn? dL2185@old*) (for-all dL2144@idsyn? dL2186@new*))) dL2181@ls/false)) (apply (lambda (dL218b@rename dL218c@isp dL218d@old* dL218e@new*) (let ((dL2193@subst (dL2156@get-import dL218c@isp)) (dL2194@old* (map dLe5e@syntax->datum dL218d@old*)) (dL2195@new* (map dLe5e@syntax->datum dL218e@new*))) (let ((dL2199@old-label* (dL214c@find* dL2194@old* dL2193@subst))) (let ((dL219b@subst (dL214e@rem* dL2194@old* dL2193@subst))) (dL2148@merge-substs (map cons dL2195@new* dL2199@old-label*) dL219b@subst))))) dL2181@ls/false) (let ((dL219d@t dL217f@t)) (let ((dL219f@ls/false (dLd78@syntax-dispatch dL219d@t '(any any . each-any)))) (if (and dL219f@ls/false (apply (lambda (dL21a1@except dL21a2@isp dL21a3@sym*) (and (eq? (dLe5e@syntax->datum dL21a1@except) 'except) (for-all dL2144@idsyn? dL21a3@sym*))) dL219f@ls/false)) (apply (lambda (dL21a7@except dL21a8@isp dL21a9@sym*) (let ((dL21ad@subst (dL2156@get-import dL21a8@isp))) (dL214e@rem* (map dLe5e@syntax->datum dL21a9@sym*) dL21ad@subst))) dL219f@ls/false) (let ((dL21af@t dL219d@t)) (let ((dL21b1@ls/false (dLd78@syntax-dispatch dL21af@t '(any any . each-any)))) (if (and dL21b1@ls/false (apply (lambda (dL21b3@only dL21b4@isp dL21b5@sym*) (and (eq? (dLe5e@syntax->datum dL21b3@only) 'only) (for-all dL2144@idsyn? dL21b5@sym*))) dL21b1@ls/false)) (apply (lambda (dL21b9@only dL21ba@isp dL21bb@sym*) (let ((dL21bf@subst (dL2156@get-import dL21ba@isp)) (dL21c0@sym* (map dLe5e@syntax->datum dL21bb@sym*))) (let ((dL21c3@sym* (dL2150@remove-dups dL21c0@sym*))) (let ((dL21c5@lab* (dL214c@find* dL21c3@sym* dL21bf@subst))) (map cons dL21c3@sym* dL21c5@lab*))))) dL21b1@ls/false) (let ((dL21c7@t dL21af@t)) (let ((dL21c9@ls/false (dLd78@syntax-dispatch dL21c7@t '(any any any)))) (if (and dL21c9@ls/false (apply (lambda (dL21cb@prefix dL21cc@isp dL21cd@p) (and (eq? (dLe5e@syntax->datum dL21cb@prefix) 'prefix) (dL2144@idsyn? dL21cd@p))) dL21c9@ls/false)) (apply (lambda (dL21d1@prefix dL21d2@isp dL21d3@p) (let ((dL21d7@subst (dL2156@get-import dL21d2@isp)) (dL21d8@prefix (symbol->string (dLe5e@syntax->datum dL21d3@p)))) (map (lambda (dL21db@x) (cons (string->symbol (string-append dL21d8@prefix (symbol->string (car dL21db@x)))) (cdr dL21db@x))) dL21d7@subst))) dL21c9@ls/false) (let ((dL21dd@t dL21c7@t)) (let ((dL21df@ls/false (dLd78@syntax-dispatch dL21dd@t '(any each-any)))) (if (and dL21df@ls/false (apply (lambda (dL21e1@library dL21e2@spec*) (eq? (dLe5e@syntax->datum dL21e1@library) 'library)) dL21df@ls/false)) (apply (lambda (dL21e5@library dL21e6@spec*) (dL2154@import-library dL21e6@spec*)) dL21df@ls/false) (let ((dL21e9@t dL21dd@t)) (let ((dL21eb@ls/false (dLd78@syntax-dispatch dL21e9@t '(any any . any)))) (if (and dL21eb@ls/false (apply (lambda (dL21ed@for dL21ee@isp dL21ef@rest) (eq? (dLe5e@syntax->datum dL21ed@for) 'for)) dL21eb@ls/false)) (apply (lambda (dL21f3@for dL21f4@isp dL21f5@rest) (dL2156@get-import dL21f4@isp)) dL21eb@ls/false) (let ((dL21f9@t dL21e9@t)) (let ((dL21fb@ls/false (dLd78@syntax-dispatch dL21f9@t 'any))) (if dL21fb@ls/false (apply (lambda (dL21fd@spec) (dLe58@syntax-violation 'import '"invalid import spec" dL21fd@spec)) dL21fb@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL21f9@t))))))))))))))))))))))))))) (dL2158@add-imports! (lambda (dL2161@imp dL2162@h) (let ((dL2165@subst (dL2156@get-import dL2161@imp))) (for-each (lambda (dL2167@x) (let ((dL2169@name (car dL2167@x)) (dL216a@label (cdr dL2167@x))) (let ((dL216d@t (hashtable-ref dL2162@h dL2169@name '#f))) (if dL216d@t ((lambda (dL216f@l) (if (not (eq? dL216f@l dL216a@label)) (dL2146@dup-error dL2169@name) (void))) dL216d@t) (hashtable-set! dL2162@h dL2169@name dL216a@label))))) dL2165@subst))))) (lambda (dL2159@imp*) (let dL215f@f ((dL215b@imp* dL2159@imp*) (dL215c@h (make-eq-hashtable))) (if (null? dL215b@imp*) (hashtable-entries dL215c@h) (begin (dL2158@add-imports! (car dL215b@imp*) dL215c@h) (dL215f@f (cdr dL215b@imp*) dL215c@h))))))) (set! dL287b@dLdda@parse-import-spec* dLdda@parse-import-spec*) (set! dLddc@make-top-rib (lambda (dL234f@names dL2350@labels) (let ((dL2353@rib (dLb25@make-empty-rib))) (begin (vector-for-each (lambda (dL2355@name dL2356@label) (begin (if (not (symbol? dL2355@name)) (error 'make-top-rib '"BUG: not a symbol" dL2355@name) (void)) (dLb29@extend-rib/nc! dL2353@rib (make-simple-struct 'stx '5 (list dL2355@name dLaf5@top-mark* '() '())) dL2356@label))) dL234f@names dL2350@labels) dL2353@rib)))) (set! dL287c@dLddc@make-top-rib dLddc@make-top-rib) (set! dLdde@make-collector (lambda () (let ((dL2359@ls '())) (lambda dL235d (let ((dL235e (length dL235d))) (if (= dL235e '0) (apply (lambda () dL2359@ls) dL235d) (if (= dL235e '1) (apply (lambda (dL235b@x) (set! dL2359@ls (dLaee@set-cons dL235b@x dL2359@ls))) dL235d) (error 'apply '"invalid arg count")))))))) (set! dL287d@dLdde@make-collector dLdde@make-collector) (set! dLde0@inv-collector (dL6c1@dL59f@make-parameter (lambda dL235f@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (dL2361@x) (begin (if (not (procedure? dL2361@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" dL2361@x) (void)) dL2361@x)))) (set! dL287e@dLde0@inv-collector dLde0@inv-collector) (set! dLde2@vis-collector (dL6c1@dL59f@make-parameter (lambda dL2363@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (dL2365@x) (begin (if (not (procedure? dL2365@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" dL2365@x) (void)) dL2365@x)))) (set! dL287f@dLde2@vis-collector dLde2@vis-collector) (set! dLde4@imp-collector (dL6c1@dL59f@make-parameter (lambda dL2367@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (dL2369@x) (begin (if (not (procedure? dL2369@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" dL2369@x) (void)) dL2369@x)))) (set! dL2880@dLde4@imp-collector dLde4@imp-collector) (set! dLde6@chi-library-internal (lambda (dL236b@e* dL236c@rib dL236d@top?) (call-with-values (lambda () (dLdd0@chi-body* dL236b@e* '() '() '() '() '() '() '() dL236c@rib dL236d@top?)) (lambda (dL2381@dL2372 dL2382@dL2374 dL2383@dL2376 dL2384@dL2378 dL2385@dL237a dL2386@dL237c dL2387@dL237e dL2388@dL2380) (let ((dL2391@exp* dL2388@dL2380) (dL2392@_kwd* dL2387@dL237e) (dL2393@mod** dL2386@dL237c) (dL2394@rhs* dL2385@dL237a) (dL2395@lex* dL2384@dL2378) (dL2396@mr dL2383@dL2376) (dL2397@r dL2382@dL2374) (dL2398@e* dL2381@dL2372)) (values (append (apply append (reverse dL2393@mod**)) dL2398@e*) dL2397@r dL2396@mr (reverse dL2395@lex*) (reverse dL2394@rhs*) dL2391@exp*)))))) (set! dL2881@dLde6@chi-library-internal dLde6@chi-library-internal) (set! dLde8@chi-interaction-expr (lambda (dL23a1@e dL23a2@rib dL23a3@r) (call-with-values (lambda () (dLdd0@chi-body* (list dL23a1@e) dL23a3@r dL23a3@r '() '() '() '() '() dL23a2@rib '#t)) (lambda (dL23b7@dL23a8 dL23b8@dL23aa dL23b9@dL23ac dL23ba@dL23ae dL23bb@dL23b0 dL23bc@dL23b2 dL23bd@dL23b4 dL23be@dL23b6) (let ((dL23c7@_exp* dL23be@dL23b6) (dL23c8@_kwd* dL23bd@dL23b4) (dL23c9@mod** dL23bc@dL23b2) (dL23ca@rhs* dL23bb@dL23b0) (dL23cb@lex* dL23ba@dL23ae) (dL23cc@mr dL23b9@dL23ac) (dL23cd@r dL23b8@dL23aa) (dL23ce@e* dL23b7@dL23a8)) (let ((dL23d7@e* (dLda8@expand-interaction-rhs*/init* (reverse dL23cb@lex*) (reverse dL23ca@rhs*) (append (apply append (reverse dL23c9@mod**)) dL23ce@e*) dL23cd@r dL23cc@mr))) (let ((dL23d9@e (if (null? dL23d7@e*) (dLad7@dLa38@build-void) (if (null? (cdr dL23d7@e*)) (car dL23d7@e*) (dLad6@dLa36@build-sequence '#f dL23d7@e*))))) (values dL23d9@e dL23cd@r)))))))) (set! dL2882@dLde8@chi-interaction-expr dLde8@chi-interaction-expr) (set! dLdea@library-body-expander (lambda (dL23db@name dL23dc@main-exp* dL23dd@imp* dL23de@b* dL23df@top?) (letrec* ((dL23e6@itc (dLdde@make-collector))) (let ((dL23ef@dL23e8 dLde4@imp-collector) (dL23f0@dL23ea dLe68@top-level-context) (dL23f1@dL23ec dL23e6@itc) (dL23f2@dL23ee '#f)) (let ((dL23f7@swap (lambda () (begin (let ((dL23f9@t (dL23ef@dL23e8))) (begin (dL23ef@dL23e8 dL23f1@dL23ec) (set! dL23f1@dL23ec dL23f9@t))) (let ((dL23fb@t (dL23f0@dL23ea))) (begin (dL23f0@dL23ea dL23f2@dL23ee) (set! dL23f2@dL23ee dL23fb@t))))))) (dynamic-wind dL23f7@swap (lambda () (call-with-values (lambda () (dLdda@parse-import-spec* dL23dd@imp*)) (lambda (dL2401@dL23fe dL2402@dL2400) (let ((dL2405@subst-labels dL2402@dL2400) (dL2406@subst-names dL2401@dL23fe)) (let ((dL2409@rib (dLddc@make-top-rib dL2406@subst-names dL2405@subst-labels))) (letrec* ((dL240c@wrap (lambda (dL2487@x) (make-simple-struct 'stx '5 (list dL2487@x dLaf5@top-mark* (list dL2409@rib) '()))))) (let ((dL240d@b* (map dL240c@wrap dL23de@b*)) (dL240e@main-exp* (map dL240c@wrap dL23dc@main-exp*)) (dL240f@rtc (dLdde@make-collector)) (dL2410@vtc (dLdde@make-collector))) (let ((dL241d@dL2416 dLde0@inv-collector) (dL241e@dL2418 dLde2@vis-collector) (dL241f@dL241a dL240f@rtc) (dL2420@dL241c dL2410@vtc)) (let ((dL2425@swap (lambda () (begin (let ((dL2427@t (dL241d@dL2416))) (begin (dL241d@dL2416 dL241f@dL241a) (set! dL241f@dL241a dL2427@t))) (let ((dL2429@t (dL241e@dL2418))) (begin (dL241e@dL2418 dL2420@dL241c) (set! dL2420@dL241c dL2429@t))))))) (dynamic-wind dL2425@swap (lambda () (call-with-values (lambda () (dLde6@chi-library-internal dL240d@b* dL2409@rib dL23df@top?)) (lambda (dL2437@dL242c dL2438@dL242e dL2439@dL2430 dL243a@dL2432 dL243b@dL2434 dL243c@dL2436) (let ((dL2443@internal-exp* dL243c@dL2436) (dL2444@rhs* dL243b@dL2434) (dL2445@lex* dL243a@dL2432) (dL2446@mr dL2439@dL2430) (dL2447@r dL2438@dL242e) (dL2448@init* dL2437@dL242c)) (call-with-values (lambda () (dLdd4@parse-exports (append dL240e@main-exp* dL2443@internal-exp*))) (lambda (dL2453@dL2450 dL2454@dL2452) (let ((dL2457@exp-id* dL2454@dL2452) (dL2458@exp-name* dL2453@dL2450)) (begin (dLb2d@seal-rib! dL2409@rib) (let ((dL245b@init* (dLd96@chi-expr* dL2448@init* dL2447@r dL2446@mr))) (let ((dL245d@rhs* (dLdaa@chi-rhs* dL2444@rhs* dL2447@r dL2446@mr))) (begin (dLb2f@unseal-rib! dL2409@rib) (let ((dL245f@loc* (map dLafb@gen-global dL2445@lex*)) (dL2460@export-subst (dLe42@make-export-subst dL2458@exp-name* dL2457@exp-id*))) (letrec* ((dL2464@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (dLe44@make-export-env/macros dL2445@lex* dL245f@loc* dL2447@r)) (lambda (dL246b@dL2466 dL246c@dL2468 dL246d@dL246a) (let ((dL2471@macro* dL246d@dL246a) (dL2472@global* dL246c@dL2468) (dL2473@export-env dL246b@dL2466)) (begin (for-each (lambda (dL2477@s) (let ((dL2479@name (car dL2477@s)) (dL247a@label (cdr dL2477@s))) (let ((dL247d@p (assq dL247a@label dL2473@export-env))) (if dL247d@p (let ((dL247f@b (cdr dL247d@p))) (let ((dL2481@type (car dL247f@b))) (if (eq? dL2481@type 'mutable) (dLe58@syntax-violation 'export dL2464@errstr dL2479@name) (void)))) (void))))) dL2460@export-subst) (let ((dL2483@invoke-body (dLadc@dLa42@build-library-letrec* '#f dL23db@name dL2445@lex* dL245f@loc* dL245d@rhs* (if (null? dL245b@init*) (dLad7@dLa38@build-void) (dLad6@dLa36@build-sequence '#f dL245b@init*)))) (dL2484@invoke-definitions (map dLad3@dL995@build-global-define (map cdr dL2472@global*)))) (values (dL23e6@itc) (dL240f@rtc) (dL2410@vtc) (dLad6@dLa36@build-sequence '#f (append dL2484@invoke-definitions (list dL2483@invoke-body))) dL2471@macro* dL2460@export-subst dL2473@export-env))))))))))))))))))) dL2425@swap)))))))))) dL23f7@swap)))))) (set! dL2883@dLdea@library-body-expander dLdea@library-body-expander) (set! dLdec@core-library-expander (lambda (dL2489@e dL248a@verify-name) (call-with-values (lambda () (dLdd8@parse-library dL2489@e)) (lambda (dL2495@dL248e dL2496@dL2490 dL2497@dL2492 dL2498@dL2494) (let ((dL249d@b* dL2498@dL2494) (dL249e@imp* dL2497@dL2492) (dL249f@exp* dL2496@dL2490) (dL24a0@name* dL2495@dL248e)) (call-with-values (lambda () (dLdd6@parse-library-name dL24a0@name*)) (lambda (dL24a9@dL24a6 dL24aa@dL24a8) (let ((dL24ad@ver dL24aa@dL24a8) (dL24ae@name dL24a9@dL24a6)) (begin (dL248a@verify-name dL24ae@name) (call-with-values (lambda () (dLdea@library-body-expander dL24ae@name dL249f@exp* dL249e@imp* dL249d@b* '#f)) (lambda (dL24bf@dL24b2 dL24c0@dL24b4 dL24c1@dL24b6 dL24c2@dL24b8 dL24c3@dL24ba dL24c4@dL24bc dL24c5@dL24be) (let ((dL24cd@export-env dL24c5@dL24be) (dL24ce@export-subst dL24c4@dL24bc) (dL24cf@visit-code dL24c3@dL24ba) (dL24d0@invoke-code dL24c2@dL24b8) (dL24d1@visit-req* dL24c1@dL24b6) (dL24d2@invoke-req* dL24c0@dL24b4) (dL24d3@imp* dL24bf@dL24b2)) (values dL24ae@name dL24ad@ver dL24d3@imp* dL24d2@invoke-req* dL24d1@visit-req* dL24d0@invoke-code dL24cf@visit-code dL24ce@export-subst dL24cd@export-env))))))))))))) (set! dL2884@dLdec@core-library-expander dLdec@core-library-expander) (set! dLdee@parse-top-level-program (lambda (dL24db@e*) (let ((dL24dd@t dL24db@e*)) (let ((dL24df@ls/false (dLd78@syntax-dispatch dL24dd@t '((any . each-any) . each-any)))) (if (and dL24df@ls/false (apply (lambda (dL24e1@import dL24e2@imp* dL24e3@b*) (eq? (dLe5e@syntax->datum dL24e1@import) 'import)) dL24df@ls/false)) (apply (lambda (dL24e7@import dL24e8@imp* dL24e9@b*) (values dL24e8@imp* dL24e9@b*)) dL24df@ls/false) (let ((dL24ed@t dL24dd@t)) (let ((dL24ef@ls/false (dLd78@syntax-dispatch dL24ed@t '((any . any) . any)))) (if (and dL24ef@ls/false (apply (lambda (dL24f1@import dL24f2@x dL24f3@y) (eq? (dLe5e@syntax->datum dL24f1@import) 'import)) dL24ef@ls/false)) (apply (lambda (dL24f7@import dL24f8@x dL24f9@y) (dLe58@syntax-violation 'expander '"invalid syntax of top-level program" (dLb6b@syntax-car dL24db@e*))) dL24ef@ls/false) (let ((dL24fd@t dL24ed@t)) (let ((dL24ff@ls/false (dLd78@syntax-dispatch dL24fd@t '_))) (if dL24ff@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) dL24ff@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL24fd@t)))))))))))) (set! dL2885@dLdee@parse-top-level-program dLdee@parse-top-level-program) (set! dLdf0@top-level-expander (lambda (dL2501@e*) (call-with-values (lambda () (dLdee@parse-top-level-program dL2501@e*)) (lambda (dL2507@dL2504 dL2508@dL2506) (let ((dL250b@b* dL2508@dL2506) (dL250c@imp* dL2507@dL2504)) (call-with-values (lambda () (dLdea@library-body-expander '() '() dL250c@imp* dL250b@b* '#t)) (lambda (dL251d@dL2510 dL251e@dL2512 dL251f@dL2514 dL2520@dL2516 dL2521@dL2518 dL2522@dL251a dL2523@dL251c) (let ((dL252b@export-env dL2523@dL251c) (dL252c@export-subst dL2522@dL251a) (dL252d@visit-code dL2521@dL2518) (dL252e@invoke-code dL2520@dL2516) (dL252f@visit-req* dL251f@dL2514) (dL2530@invoke-req* dL251e@dL2512) (dL2531@imp* dL251d@dL2510)) (values dL2530@invoke-req* dL252e@invoke-code))))))))) (set! dL2886@dLdf0@top-level-expander dLdf0@top-level-expander) (set! dLdf2@rp (dL6be@dL599@make-record-printer 'env (lambda (dL2539@x dL253a@p dL253b@wr) (display '"#<environment>" dL253a@p)))) (set! dL2887@dLdf2@rp dLdf2@rp) (set! dLdfc@env? (lambda (dL253f@x) (and (simple-struct? dL253f@x) (eq? (simple-struct-name dL253f@x) 'env)))) (set! dL2888@dLdfc@env? dLdfc@env?) (set! dLdfe@env-names (lambda (dL2541@x) (simple-struct-ref dL2541@x '0))) (set! dL2889@dLdfe@env-names dLdfe@env-names) (set! dLe00@set-env-names! (lambda (dL2543@x dL2544@val) (simple-struct-set! dL2543@x '0 dL2544@val))) (set! dL288a@dLe00@set-env-names! dLe00@set-env-names!) (set! dLe02@env-labels (lambda (dL2547@x) (simple-struct-ref dL2547@x '1))) (set! dL288b@dLe02@env-labels dLe02@env-labels) (set! dLe04@set-env-labels! (lambda (dL2549@x dL254a@val) (simple-struct-set! dL2549@x '1 dL254a@val))) (set! dL288c@dLe04@set-env-labels! dLe04@set-env-labels!) (set! dLe06@env-itc (lambda (dL254d@x) (simple-struct-ref dL254d@x '2))) (set! dL288d@dLe06@env-itc dLe06@env-itc) (set! dLe08@set-env-itc! (lambda (dL254f@x dL2550@val) (simple-struct-set! dL254f@x '2 dL2550@val))) (set! dL288e@dLe08@set-env-itc! dLe08@set-env-itc!) (set! dLe0a@dummy '3) (set! dL288f@dLe0a@dummy dLe0a@dummy) (set! dLe0c@rp (dL6be@dL599@make-record-printer 'interaction-env (lambda (dL2553@x dL2554@p dL2555@wr) (display '"#<environment>" dL2554@p)))) (set! dL2890@dLe0c@rp dLe0c@rp) (set! dLe16@interaction-env? (lambda (dL2559@x) (and (simple-struct? dL2559@x) (eq? (simple-struct-name dL2559@x) 'interaction-env)))) (set! dL2891@dLe16@interaction-env? dLe16@interaction-env?) (set! dLe18@interaction-env-rib (lambda (dL255b@x) (simple-struct-ref dL255b@x '0))) (set! dL2892@dLe18@interaction-env-rib dLe18@interaction-env-rib) (set! dLe1a@set-interaction-env-rib! (lambda (dL255d@x dL255e@val) (simple-struct-set! dL255d@x '0 dL255e@val))) (set! dL2893@dLe1a@set-interaction-env-rib! dLe1a@set-interaction-env-rib!) (set! dLe1c@interaction-env-r (lambda (dL2561@x) (simple-struct-ref dL2561@x '1))) (set! dL2894@dLe1c@interaction-env-r dLe1c@interaction-env-r) (set! dLe1e@set-interaction-env-r! (lambda (dL2563@x dL2564@val) (simple-struct-set! dL2563@x '1 dL2564@val))) (set! dL2895@dLe1e@set-interaction-env-r! dLe1e@set-interaction-env-r!) (set! dLe20@interaction-env-locs (lambda (dL2567@x) (simple-struct-ref dL2567@x '2))) (set! dL2896@dLe20@interaction-env-locs dLe20@interaction-env-locs) (set! dLe22@set-interaction-env-locs! (lambda (dL2569@x dL256a@val) (simple-struct-set! dL2569@x '2 dL256a@val))) (set! dL2897@dLe22@set-interaction-env-locs! dLe22@set-interaction-env-locs!) (set! dLe24@dummy '3) (set! dL2898@dLe24@dummy dLe24@dummy) (set! dLe26@interaction-environment-symbols (lambda () (dLe2e@environment-symbols (dLe66@interaction-environment)))) (set! dL2899@dLe26@interaction-environment-symbols dLe26@interaction-environment-symbols) (set! dLe28@environment-bindings (lambda (dL256d@e) (vector->list (vector-map (lambda (dL256f@name dL2570@label) (dLe2a@parse-binding (cons dL256f@name (dL98c@dL7d9@imported-label->binding dL2570@label)))) (dLdfe@env-names dL256d@e) (dLe02@env-labels dL256d@e))))) (set! dL289a@dLe28@environment-bindings dLe28@environment-bindings) (set! dLe2a@parse-binding (lambda (dL2573@b) (cons (car dL2573@b) (let ((dL2575@t (cadr dL2573@b))) (if (memv dL2575@t '(core-prim global)) 'procedure (if (memv dL2575@t '(core-macro macro global-macro)) 'syntax (if (memv dL2575@t '($core-rtd)) 'record (if (eq? (car dL2573@b) (cadr dL2573@b)) 'syntax 'unknown)))))))) (set! dL289b@dLe2a@parse-binding dLe2a@parse-binding) (set! dLe2c@environment? (lambda (dL2577@x) (or (dLdfc@env? dL2577@x) (dLe16@interaction-env? dL2577@x)))) (set! dL289c@dLe2c@environment? dLe2c@environment?) (set! dLe2e@environment-symbols (lambda (dL2579@x) (if (dLdfc@env? dL2579@x) (vector->list (dLdfe@env-names dL2579@x)) (if (dLe16@interaction-env? dL2579@x) (map values (dLb0f@rib-sym* (dLe18@interaction-env-rib dL2579@x))) (assertion-violation 'environment-symbols '"not an environment" dL2579@x))))) (set! dL289d@dLe2e@environment-symbols dLe2e@environment-symbols) (set! dLe30@environment (lambda dL257b@imp* (let ((dL257d@itc (dLdde@make-collector))) (let ((dL2583@dL2580 dLde4@imp-collector) (dL2584@dL2582 dL257d@itc)) (let ((dL2587@swap (lambda () (let ((dL2589@t (dL2583@dL2580))) (begin (dL2583@dL2580 dL2584@dL2582) (set! dL2584@dL2582 dL2589@t)))))) (dynamic-wind dL2587@swap (lambda () (call-with-values (lambda () (dLdda@parse-import-spec* dL257b@imp*)) (lambda (dL258f@dL258c dL2590@dL258e) (let ((dL2593@subst-labels dL2590@dL258e) (dL2594@subst-names dL258f@dL258c)) (make-simple-struct 'env '4 (list dL2594@subst-names dL2593@subst-labels dL257d@itc)))))) dL2587@swap)))))) (set! dL289e@dLe30@environment dLe30@environment) (set! dLe32@null-environment (lambda (dL2597@n) (begin (if (not (eqv? dL2597@n '5)) (assertion-violation 'null-environment '"not 5" dL2597@n) (void)) (dLe30@environment '(psyntax null-environment-5))))) (set! dL289f@dLe32@null-environment dLe32@null-environment) (set! dLe34@scheme-report-environment (lambda (dL2599@n) (begin (if (not (eqv? dL2599@n '5)) (assertion-violation 'scheme-report-environment '"not 5" dL2599@n) (void)) (dLe30@environment '(psyntax scheme-report-environment-5))))) (set! dL28a0@dLe34@scheme-report-environment dLe34@scheme-report-environment) (set! dLe36@expand (lambda (dL259b@x dL259c@env) (if (dLdfc@env? dL259c@env) (let ((dL259f@rib (dLddc@make-top-rib (dLdfe@env-names dL259c@env) (dLe02@env-labels dL259c@env)))) (let ((dL25a1@x (make-simple-struct 'stx '5 (list dL259b@x dLaf5@top-mark* (list dL259f@rib) '()))) (dL25a2@itc (dLe06@env-itc dL259c@env)) (dL25a3@rtc (dLdde@make-collector)) (dL25a4@vtc (dLdde@make-collector))) (let ((dL25a9@x (let ((dL25bb@dL25ac dLe68@top-level-context) (dL25bc@dL25ae dLde0@inv-collector) (dL25bd@dL25b0 dLde2@vis-collector) (dL25be@dL25b2 dLde4@imp-collector) (dL25bf@dL25b4 '#f) (dL25c0@dL25b6 dL25a3@rtc) (dL25c1@dL25b8 dL25a4@vtc) (dL25c2@dL25ba dL25a2@itc)) (let ((dL25cb@swap (lambda () (begin (let ((dL25cd@t (dL25bb@dL25ac))) (begin (dL25bb@dL25ac dL25bf@dL25b4) (set! dL25bf@dL25b4 dL25cd@t))) (let ((dL25cf@t (dL25bc@dL25ae))) (begin (dL25bc@dL25ae dL25c0@dL25b6) (set! dL25c0@dL25b6 dL25cf@t))) (let ((dL25d1@t (dL25bd@dL25b0))) (begin (dL25bd@dL25b0 dL25c1@dL25b8) (set! dL25c1@dL25b8 dL25d1@t))) (let ((dL25d3@t (dL25be@dL25b2))) (begin (dL25be@dL25b2 dL25c2@dL25ba) (set! dL25c2@dL25ba dL25d3@t))))))) (dynamic-wind dL25cb@swap (lambda () (dLd9a@chi-expr dL25a1@x '() '())) dL25cb@swap))))) (begin (dLb2d@seal-rib! dL259f@rib) (values dL25a9@x (dL25a3@rtc)))))) (if (dLe16@interaction-env? dL259c@env) (let ((dL25d5@rib (dLe18@interaction-env-rib dL259c@env)) (dL25d6@r (dLe1c@interaction-env-r dL259c@env)) (dL25d7@rtc (dLdde@make-collector))) (let ((dL25db@x (make-simple-struct 'stx '5 (list dL259b@x dLaf5@top-mark* (list dL25d5@rib) '())))) (call-with-values (lambda () (let ((dL25f1@dL25e2 dLe68@top-level-context) (dL25f2@dL25e4 dLde0@inv-collector) (dL25f3@dL25e6 dLde2@vis-collector) (dL25f4@dL25e8 dLde4@imp-collector) (dL25f5@dL25ea dL259c@env) (dL25f6@dL25ec dL25d7@rtc) (dL25f7@dL25ee (dLdde@make-collector)) (dL25f8@dL25f0 (dLdde@make-collector))) (let ((dL2601@swap (lambda () (begin (let ((dL2603@t (dL25f1@dL25e2))) (begin (dL25f1@dL25e2 dL25f5@dL25ea) (set! dL25f5@dL25ea dL2603@t))) (let ((dL2605@t (dL25f2@dL25e4))) (begin (dL25f2@dL25e4 dL25f6@dL25ec) (set! dL25f6@dL25ec dL2605@t))) (let ((dL2607@t (dL25f3@dL25e6))) (begin (dL25f3@dL25e6 dL25f7@dL25ee) (set! dL25f7@dL25ee dL2607@t))) (let ((dL2609@t (dL25f4@dL25e8))) (begin (dL25f4@dL25e8 dL25f8@dL25f0) (set! dL25f8@dL25f0 dL2609@t))))))) (dynamic-wind dL2601@swap (lambda () (dLde8@chi-interaction-expr dL25db@x dL25d5@rib dL25d6@r)) dL2601@swap)))) (lambda (dL260b@dL25de dL260c@dL25e0) (let ((dL260f@r^ dL260c@dL25e0) (dL2610@e dL260b@dL25de)) (begin (dLe1e@set-interaction-env-r! dL259c@env dL260f@r^) (values dL2610@e (dL25d7@rtc)))))))) (assertion-violation 'expand '"not an environment" dL259c@env))))) (set! dL28a1@dLe36@expand dLe36@expand) (set! dLe38@eval (lambda (dL2613@x dL2614@env) (begin (if (not (dLe2c@environment? dL2614@env)) (error 'eval '"not an environment" dL2614@env) (void)) (call-with-values (lambda () (dLe36@expand dL2613@x dL2614@env)) (lambda (dL261b@dL2618 dL261c@dL261a) (let ((dL261f@invoke-req* dL261c@dL261a) (dL2620@x dL261b@dL2618)) (begin (for-each dL98d@dL7db@invoke-library dL261f@invoke-req*) (eval-core (dL717@dL6cf@expanded->core dL2620@x))))))))) (set! dL28a2@dLe38@eval dLe38@eval) (set! dLe3a@library-expander (lambda dL2691 (let ((dL2692 (length dL2691))) (if (= dL2692 '3) (apply (lambda (dL2623@x dL2624@filename dL2625@verify-name) (letrec* ((dL262a@build-visit-code (lambda (dL267f@macro*) (if (null? dL267f@macro*) (dLad7@dLa38@build-void) (dLad6@dLa36@build-sequence '#f (map (lambda (dL2681@x) (let ((dL2683@loc (car dL2681@x)) (dL2684@src (cddr dL2681@x))) (list 'set! dL2683@loc dL2684@src))) dL267f@macro*))))) (dL262c@visit! (lambda (dL2677@macro*) (for-each (lambda (dL2679@x) (let ((dL267b@loc (car dL2679@x)) (dL267c@proc (cadr dL2679@x))) (set-symbol-value! dL267b@loc dL267c@proc))) dL2677@macro*)))) (call-with-values (lambda () (dLdec@core-library-expander dL2623@x dL2625@verify-name)) (lambda (dL263f@dL262e dL2640@dL2630 dL2641@dL2632 dL2642@dL2634 dL2643@dL2636 dL2644@dL2638 dL2645@dL263a dL2646@dL263c dL2647@dL263e) (let ((dL2651@export-env dL2647@dL263e) (dL2652@export-subst dL2646@dL263c) (dL2653@macro* dL2645@dL263a) (dL2654@invoke-code dL2644@dL2638) (dL2655@vis* dL2643@dL2636) (dL2656@inv* dL2642@dL2634) (dL2657@imp* dL2641@dL2632) (dL2658@ver dL2640@dL2630) (dL2659@name dL263f@dL262e)) (let ((dL2663@id (gensym)) (dL2664@name dL2659@name) (dL2665@ver dL2658@ver) (dL2666@imp* (map dL991@dL7e3@library-spec dL2657@imp*)) (dL2667@vis* (map dL991@dL7e3@library-spec dL2655@vis*)) (dL2668@inv* (map dL991@dL7e3@library-spec dL2656@inv*)) (dL2669@visit-proc (lambda () (dL262c@visit! dL2653@macro*))) (dL266a@invoke-proc (lambda () (eval-core (dL717@dL6cf@expanded->core dL2654@invoke-code)))) (dL266b@visit-code (dL262a@build-visit-code dL2653@macro*)) (dL266c@invoke-code dL2654@invoke-code)) (begin (dL98b@dL7d7@install-library dL2663@id dL2664@name dL2665@ver dL2666@imp* dL2667@vis* dL2668@inv* dL2652@export-subst dL2651@export-env dL2669@visit-proc dL266a@invoke-proc dL266b@visit-code dL266c@invoke-code '#t dL2624@filename) (values dL2663@id dL2664@name dL2665@ver dL2666@imp* dL2667@vis* dL2668@inv* dL266c@invoke-code dL266b@visit-code dL2652@export-subst dL2651@export-env)))))))) dL2691) (if (= dL2692 '2) (apply (lambda (dL2687@x dL2688@filename) (dLe3a@library-expander dL2687@x dL2688@filename (lambda (dL268b@x) (values)))) dL2691) (if (= dL2692 '1) (apply (lambda (dL268d@x) (dLe3a@library-expander dL268d@x '#f (lambda (dL268f@x) (values)))) dL2691) (error 'apply '"invalid arg count"))))))) (set! dL28a3@dLe3a@library-expander dLe3a@library-expander) (set! dLe3c@boot-library-expand (lambda (dL2693@x) (call-with-values (lambda () (dLe3a@library-expander dL2693@x)) (lambda (dL26a9@dL2696 dL26aa@dL2698 dL26ab@dL269a dL26ac@dL269c dL26ad@dL269e dL26ae@dL26a0 dL26af@dL26a2 dL26b0@dL26a4 dL26b1@dL26a6 dL26b2@dL26a8) (let ((dL26bd@export-env dL26b2@dL26a8) (dL26be@export-subst dL26b1@dL26a6) (dL26bf@visit-code dL26b0@dL26a4) (dL26c0@invoke-code dL26af@dL26a2) (dL26c1@inv* dL26ae@dL26a0) (dL26c2@vis* dL26ad@dL269e) (dL26c3@imp* dL26ac@dL269c) (dL26c4@ver dL26ab@dL269a) (dL26c5@name dL26aa@dL2698) (dL26c6@id dL26a9@dL2696)) (values dL26c5@name dL26c0@invoke-code dL26be@export-subst dL26bd@export-env)))))) (set! dL28a4@dLe3c@boot-library-expand dLe3c@boot-library-expand) (set! dLe3e@rev-map-append (lambda (dL26d1@f dL26d2@ls dL26d3@ac) (if (null? dL26d2@ls) dL26d3@ac (dLe3e@rev-map-append dL26d1@f (cdr dL26d2@ls) (cons (dL26d1@f (car dL26d2@ls)) dL26d3@ac))))) (set! dL28a5@dLe3e@rev-map-append dLe3e@rev-map-append) (set! dLe40@build-exports (lambda (dL26d7@lex*+loc* dL26d8@init*) (dLad6@dLa36@build-sequence '#f (cons (dLad7@dLa38@build-void) (dLe3e@rev-map-append (lambda (dL26db@x) (list 'set! (cdr dL26db@x) (car dL26db@x))) dL26d7@lex*+loc* dL26d8@init*))))) (set! dL28a6@dLe40@build-exports dLe40@build-exports) (set! dLe42@make-export-subst (lambda (dL26dd@name* dL26de@id*) (map (lambda (dL26e1@name dL26e2@id) (let ((dL26e5@label (dLb87@id->label dL26e2@id))) (begin (if (not dL26e5@label) (dLe58@syntax-violation '#f '"cannot export unbound identifier" dL26e2@id) (void)) (cons dL26e1@name dL26e5@label)))) dL26dd@name* dL26de@id*))) (set! dL28a7@dLe42@make-export-subst dLe42@make-export-subst) (set! dLe44@make-export-env/macros (lambda (dL26e7@lex* dL26e8@loc* dL26e9@r) (letrec* ((dL26ee@lookup (lambda (dL270b@x) (let dL2713@f ((dL270d@x dL270b@x) (dL270e@lex* dL26e7@lex*) (dL270f@loc* dL26e8@loc*)) (if (pair? dL270e@lex*) (if (eq? dL270d@x (car dL270e@lex*)) (car dL270f@loc*) (dL2713@f dL270d@x (cdr dL270e@lex*) (cdr dL270f@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let dL26f7@f ((dL26ef@r dL26e9@r) (dL26f0@env '()) (dL26f1@global* '()) (dL26f2@macro* '())) (if (null? dL26ef@r) (values dL26f0@env dL26f1@global* dL26f2@macro*) (let ((dL26f9@x (car dL26ef@r))) (let ((dL26fb@label (car dL26f9@x)) (dL26fc@b (cdr dL26f9@x))) (let ((dL26ff@t (dLb8d@binding-type dL26fc@b))) (if (memv dL26ff@t '(lexical)) (let ((dL2701@v (dLb8f@binding-value dL26fc@b))) (let ((dL2703@loc (dL26ee@lookup (dLd02@lexical-var dL2701@v))) (dL2704@type (if (dLd04@lexical-mutable? dL2701@v) 'mutable 'global))) (dL26f7@f (cdr dL26ef@r) (cons (cons* dL26fb@label dL2704@type dL2703@loc) dL26f0@env) (cons (cons (dLd02@lexical-var dL2701@v) dL2703@loc) dL26f1@global*) dL26f2@macro*))) (if (memv dL26ff@t '(local-macro)) (let ((dL2707@loc (gensym))) (dL26f7@f (cdr dL26ef@r) (cons (cons* dL26fb@label 'global-macro dL2707@loc) dL26f0@env) dL26f1@global* (cons (cons dL2707@loc (dLb8f@binding-value dL26fc@b)) dL26f2@macro*))) (if (memv dL26ff@t '(local-macro!)) (let ((dL2709@loc (gensym))) (dL26f7@f (cdr dL26ef@r) (cons (cons* dL26fb@label 'global-macro! dL2709@loc) dL26f0@env) dL26f1@global* (cons (cons dL2709@loc (dLb8f@binding-value dL26fc@b)) dL26f2@macro*))) (if (memv dL26ff@t '($rtd $module)) (dL26f7@f (cdr dL26ef@r) (cons dL26f9@x dL26f0@env) dL26f1@global* dL26f2@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (dLb8d@binding-type dL26fc@b) (dLb8f@binding-value dL26fc@b)))))))))))))) (set! dL28a8@dLe44@make-export-env/macros dLe44@make-export-env/macros) (set! dLe46@generate-temporaries (lambda (dL2715@ls) (let ((dL2717@t dL2715@ls)) (let ((dL2719@ls/false (dLd78@syntax-dispatch dL2717@t 'each-any))) (if dL2719@ls/false (apply (lambda (dL271b@ls) (map (lambda (dL271d@x) (make-simple-struct 'stx '5 (list (let ((dL271f@x (dLe5e@syntax->datum dL271d@x))) (if (or (symbol? dL271f@x) (string? dL271f@x)) (gensym dL271f@x) (gensym 't))) dLaf5@top-mark* '() '()))) dL271b@ls)) dL2719@ls/false) (let ((dL2721@t dL2717@t)) (let ((dL2723@ls/false (dLd78@syntax-dispatch dL2721@t '_))) (if dL2723@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) dL2723@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL2721@t))))))))) (set! dL28a9@dLe46@generate-temporaries dLe46@generate-temporaries) (set! dLe48@free-identifier=? (lambda (dL2725@x dL2726@y) (if (dLb71@id? dL2725@x) (if (dLb71@id? dL2726@y) (dLb77@free-id=? dL2725@x dL2726@y) (assertion-violation 'free-identifier=? '"not an identifier" dL2726@y)) (assertion-violation 'free-identifier=? '"not an identifier" dL2725@x)))) (set! dL28aa@dLe48@free-identifier=? dLe48@free-identifier=?) (set! dLe4a@bound-identifier=? (lambda (dL2729@x dL272a@y) (if (dLb71@id? dL2729@x) (if (dLb71@id? dL272a@y) (dLb75@bound-id=? dL2729@x dL272a@y) (assertion-violation 'bound-identifier=? '"not an identifier" dL272a@y)) (assertion-violation 'bound-identifier=? '"not an identifier" dL2729@x)))) (set! dL28ab@dLe4a@bound-identifier=? dLe4a@bound-identifier=?) (set! dLe4c@make-source-condition (lambda (dL272d@x) (letrec* ((dL2737@dL2732 (make-record-type-descriptor '&source-information &condition-rtd 'dL2735 '#f '#f '#((immutable file-name) (immutable line)))) (dL2739@dL2734 '#f) (dL273b@dL2733 (make-record-constructor-descriptor dL2737@dL2732 &condition-rcd dL2739@dL2734)) (dL273e@dL2731 (record-predicate dL2737@dL2732)) (dL2740@make-source-condition (record-constructor dL273b@dL2733)) (dL2742@dL272f (record-accessor dL2737@dL2732 '0)) (dL2744@dL2730 (record-accessor dL2737@dL2732 '1)) (dL2746@source-condition? (condition-predicate dL2737@dL2732)) (dL2748@source-filename (condition-accessor dL2737@dL2732 dL2742@dL272f)) (dL274a@source-character (condition-accessor dL2737@dL2732 dL2744@dL2730))) (if (and (pair? dL272d@x) (pair? (cdr dL272d@x))) (dL2740@make-source-condition (car dL272d@x) (cadr dL272d@x)) (condition))))) (set! dL28ac@dLe4c@make-source-condition dLe4c@make-source-condition) (set! dLe4e@extract-position-condition (lambda (dL274b@x) (dLe4c@make-source-condition (dLe50@expression-position dL274b@x)))) (set! dL28ad@dLe4e@extract-position-condition dLe4e@extract-position-condition) (set! dLe50@expression-position (lambda (dL274d@x) (and (dLb3d@stx? dL274d@x) (let ((dL274f@x (dLb3f@stx-expr dL274d@x))) (and (dL6b5@dL587@annotation? dL274f@x) (dL6b6@dL589@annotation-source dL274f@x)))))) (set! dL28ae@dLe50@expression-position dLe50@expression-position) (set! dLe52@assertion-error (lambda (dL2751@expr dL2752@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list dL2751@expr)) (dLe4c@make-source-condition dL2752@pos))))) (set! dL28af@dLe52@assertion-error dLe52@assertion-error) (set! dLe54@syntax-error (lambda (dL2755@x . dL2757@args) (begin (if (not (for-all string? dL2757@args)) (assertion-violation 'syntax-error '"invalid argument" dL2757@args) (void)) (raise (condition (make-message-condition (if (null? dL2757@args) '"invalid syntax" (apply string-append dL2757@args))) (make-syntax-violation (dLe5e@syntax->datum dL2755@x) '#f) (dLe4e@extract-position-condition dL2755@x)))))) (set! dL28b0@dLe54@syntax-error dLe54@syntax-error) (set! dLe56@syntax-violation* (lambda (dL2759@who dL275a@msg dL275b@form dL275c@condition-object) (begin (if (not (string? dL275a@msg)) (assertion-violation 'syntax-violation '"message is not a string" dL275a@msg) (void)) (let ((dL2761@who (if (or (string? dL2759@who) (symbol? dL2759@who)) dL2759@who (if (not dL2759@who) (let ((dL2763@t dL275b@form)) (let ((dL2765@ls/false (dLd78@syntax-dispatch dL2763@t 'any))) (if (and dL2765@ls/false (apply (lambda (dL2767@id) (dLb71@id? dL2767@id)) dL2765@ls/false)) (apply (lambda (dL2769@id) (dLe5e@syntax->datum dL2769@id)) dL2765@ls/false) (let ((dL276b@t dL2763@t)) (let ((dL276d@ls/false (dLd78@syntax-dispatch dL276b@t '(any . any)))) (if (and dL276d@ls/false (apply (lambda (dL276f@id dL2770@rest) (dLb71@id? dL276f@id)) dL276d@ls/false)) (apply (lambda (dL2773@id dL2774@rest) (dLe5e@syntax->datum dL2773@id)) dL276d@ls/false) (let ((dL2777@t dL276b@t)) (let ((dL2779@ls/false (dLd78@syntax-dispatch dL2777@t '_))) (if dL2779@ls/false (apply (lambda () '#f) dL2779@ls/false) (dLe58@syntax-violation '#f '"invalid syntax" dL2777@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" dL2759@who))))) (raise (condition (if dL2761@who (make-who-condition dL2761@who) (condition)) (make-message-condition dL275a@msg) dL275c@condition-object (dLe4e@extract-position-condition dL275b@form))))))) (set! dL28b1@dLe56@syntax-violation* dLe56@syntax-violation*) (set! dLe58@syntax-violation (lambda dL2789 (let ((dL278a (length dL2789))) (if (= dL278a '3) (apply (lambda (dL277b@who dL277c@msg dL277d@form) (dLe58@syntax-violation dL277b@who dL277c@msg dL277d@form '#f)) dL2789) (if (= dL278a '4) (apply (lambda (dL2781@who dL2782@msg dL2783@form dL2784@subform) (dLe56@syntax-violation* dL2781@who dL2782@msg dL2783@form (make-syntax-violation (dLe5e@syntax->datum dL2783@form) (dLe5e@syntax->datum dL2784@subform)))) dL2789) (error 'apply '"invalid arg count")))))) (set! dL28b2@dLe58@syntax-violation dLe58@syntax-violation) (set! dLe5a@identifier? (lambda (dL278b@x) (dLb71@id? dL278b@x))) (set! dL28b3@dLe5a@identifier? dLe5a@identifier?) (set! dLe5c@datum->syntax (lambda (dL278d@id dL278e@datum) (if (dLb71@id? dL278d@id) (dLb51@datum->stx dL278d@id dL278e@datum) (assertion-violation 'datum->syntax '"not an identifier" dL278d@id)))) (set! dL28b4@dLe5c@datum->syntax dLe5c@datum->syntax) (set! dLe5e@syntax->datum (lambda (dL2791@x) (dLb85@stx->datum dL2791@x))) (set! dL28b5@dLe5e@syntax->datum dLe5e@syntax->datum) (set! dLe60@ungensym-all (lambda (dL2793@code) (if (pair? dL2793@code) (cons (dLe60@ungensym-all (car dL2793@code)) (dLe60@ungensym-all (cdr dL2793@code))) (if (symbol? dL2793@code) (ungensym dL2793@code) dL2793@code)))) (set! dL28b6@dLe60@ungensym-all dLe60@ungensym-all) (set! dLe62@compile-r6rs-top-level (lambda (dL2795@x*) (call-with-values (lambda () (dLdf0@top-level-expander dL2795@x*)) (lambda (dL279b@dL2798 dL279c@dL279a) (let ((dL279f@invoke-code dL279c@dL279a) (dL27a0@lib* dL279b@dL2798)) (lambda () (begin (for-each dL98d@dL7db@invoke-library dL27a0@lib*) (let ((dL27a3@expanded (dL717@dL6cf@expanded->core dL279f@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (dLe60@ungensym-all dL27a3@expanded)) (void)) (eval-core dL27a3@expanded)))))))))) (set! dL28b7@dLe62@compile-r6rs-top-level dLe62@compile-r6rs-top-level) (set! dLe64@pre-compile-r6rs-top-level (lambda (dL27a5@x*) (call-with-values (lambda () (dLdf0@top-level-expander dL27a5@x*)) (lambda (dL27ab@dL27a8 dL27ac@dL27aa) (let ((dL27af@invoke-code dL27ac@dL27aa) (dL27b0@lib* dL27ab@dL27a8)) (begin (for-each dL98d@dL7db@invoke-library dL27b0@lib*) (dL6bf@dL59b@compile-core (dL717@dL6cf@expanded->core dL27af@invoke-code)))))))) (set! dL28b8@dLe64@pre-compile-r6rs-top-level dLe64@pre-compile-r6rs-top-level) (set! dLe66@interaction-environment (let ((dL27b3@the-env '#f)) (lambda () (or dL27b3@the-env (let ((dL27b5@lib (dL986@dL7cd@find-library-by-name '(mosh interaction))) (dL27b6@rib (dLb25@make-empty-rib))) (begin (let ((dL27b9@subst (dL968@dL791@library-subst dL27b5@lib))) (begin (dLb11@set-rib-sym*! dL27b6@rib (map car dL27b9@subst)) (dLb15@set-rib-mark**! dL27b6@rib (map (lambda (dL27bb@x) dLaf5@top-mark*) dL27b9@subst)) (dLb19@set-rib-label*! dL27b6@rib (map cdr dL27b9@subst)))) (let ((dL27bd@env (make-simple-struct 'interaction-env '4 (list dL27b6@rib '() '())))) (begin (set! dL27b3@the-env dL27bd@env) dL27bd@env)))))))) (set! dL28b9@dLe66@interaction-environment dLe66@interaction-environment) (set! dLe68@top-level-context (dL6c1@dL59f@make-parameter '#f)) (set! dL28ba@dLe68@top-level-context dLe68@top-level-context) (dL983@dL7c7@current-library-expander dLe3a@library-expander))
(begin (begin (dL714@dL6c9@current-primitive-locations (lambda (dL2e09@x) (let ((dL2e0b@t (assq dL2e09@x '((syntax-error . dL28b0@dLe54@syntax-error) (syntax-dispatch . dL284e@dLd78@syntax-dispatch) (load . dL2a3a@dL28e1@load) (interaction-environment . dL28b9@dLe66@interaction-environment) (library-path . dL97b@dL7b7@library-path) (mosh-cache-dir . dL6c2@dL5a1@mosh-cache-dir) (make-parameter . dL6c1@dL59f@make-parameter) (make-variable-transformer . dL280b@dLba3@make-variable-transformer) (identifier? . dL28b3@dLe5a@identifier?) (generate-temporaries . dL28a9@dLe46@generate-temporaries) (free-identifier=? . dL28aa@dLe48@free-identifier=?) (syntax->datum . dL28b5@dLe5e@syntax->datum) (datum->syntax . dL28b4@dLe5c@datum->syntax) (bound-identifier=? . dL28ab@dLe4a@bound-identifier=?) (scheme-report-environment . dL28a0@dLe34@scheme-report-environment) (null-environment . dL289f@dLe32@null-environment) (command-line . dL2a37@dL28db@command-line) (eval . dL28a2@dLe38@eval) (environment . dL289e@dLe30@environment) (syntax-violation . dL28b2@dLe58@syntax-violation) (assertion-error . dL28af@dLe52@assertion-error))))) (if dL2e0b@t (cdr dL2e0b@t) '#f)))) (dL98b@dL7d7@install-library 'dL2de6 '(mosh interaction) '() '() '() '() '((regexp? . dL2da6) (alist->eq-hash-table . dL2da2) (format . dL2d9f) (string-split . dL2d94) (call-process . dL2d8e) (set-current-directory! . dL2d8a) (expand-path . dL2d89) (current-directory . dL2d88) (%spawn . dL2d87) (%waitpid . dL2d86) (simple-struct-name . dL2d85) (simple-struct-set! . dL2d84) (simple-struct-ref . dL2d83) (make-simple-struct . dL2d82) (simple-struct? . dL2d81) (pointer-ref-c-int64 . dL2d80) (pointer-ref-c-int32 . dL2d7f) (pointer-ref-c-int16 . dL2d7e) (pointer-ref-c-int8 . dL2d7d) (pointer-ref-c-uint64 . dL2d7c) (pointer-ref-c-uint32 . dL2d7b) (pointer-ref-c-uint16 . dL2d7a) (pointer-ref-c-uint8 . dL2d79) (pointer-set-c-uint64! . dL2d78) (pointer-set-c-uint32! . dL2d77) (pointer-set-c-uint16! . dL2d76) (pointer-set-c-uint8! . dL2d75) (pointer-set-c-int64! . dL2d74) (pointer-set-c-int32! . dL2d73) (pointer-set-c-int16! . dL2d72) (pointer-set-c-int8! . dL2d71) (pointer-set-c-pointer! . dL2d70) (pointer-set-c-double! . dL2d6f) (pointer-set-c-float! . dL2d6e) (pointer-set-c-long-long! . dL2d6d) (pointer-set-c-long! . dL2d6c) (pointer-set-c-int! . dL2d6b) (pointer-set-c-short! . dL2d6a) (pointer-set-c-char! . dL2d69) (pointer-ref-c-pointer . dL2d68) (pointer-ref-c-double . dL2d67) (pointer-ref-c-float . dL2d66) (pointer-ref-c-unsigned-long-long . dL2d65) (pointer-ref-c-signed-long-long . dL2d64) (pointer-ref-c-unsigned-long . dL2d63) (pointer-ref-c-signed-long . dL2d62) (pointer-ref-c-unsigned-int . dL2d61) (pointer-ref-c-signed-int . dL2d60) (pointer-ref-c-unsigned-short . dL2d5f) (pointer-ref-c-signed-short . dL2d5e) (pointer-ref-c-unsigned-char . dL2d5d) (pointer-ref-c-signed-char . dL2d5c) (pointer->integer . dL2d5b) (integer->pointer . dL2d5a) (pointer? . dL2d59) (shared-errno . dL2d58) (%ffi-supported? . dL2d53) (%ffi-pointer->string . dL2d52) (%ffi-call . dL2d51) (%ffi-lookup . dL2d50) (%ffi-open . dL2d4f) (null-terminated-utf8->string . dL2d4e) (null-terminated-bytevector->string . dL2d4d) (%exec . dL2d4c) (%fork . dL2d4b) (%pipe . dL2d4a) (p . dL2d49) (whereis . dL2d2d) (register . dL2d2c) (vm-join! . dL2d2b) (vm-set-value! . dL2d2a) (vm? . dL2d29) (main-vm? . dL2d28) (vm-eval . dL2d27) (vm-self . dL2d26) (vm-start! . dL2d25) (make-vm . dL2d24) (mutex-try-lock! . dL2d23) (mutex-unlock! . dL2d22) (mutex-lock! . dL2d21) (mutex? . dL2d20) (make-mutex . dL2d1f) (condition-variable-notify-all! . dL2d1e) (condition-variable-notify! . dL2d1d) (condition-variable-wait! . dL2d1c) (make-condition-variable . dL2d1b) (write/ss . dL2d1a) (string-upcase . dL2d02) (string-titlecase . dL2d01) (string-normalize-nfkd . dL2d00) (string-normalize-nfkc . dL2cff) (string-normalize-nfd . dL2cfe) (string-normalize-nfc . dL2cfd) (string-foldcase . dL2cfc) (string-downcase . dL2cfb) (string-ci>? . dL2cfa) (string-ci>=? . dL2cf9) (string-ci=? . dL2cf8) (string-ci<? . dL2cf7) (string-ci<=? . dL2cf6) (char-whitespace? . dL2cf5) (char-upper-case? . dL2cf4) (char-title-case? . dL2cf3) (char-numeric? . dL2cf2) (char-lower-case? . dL2cf1) (char-general-category . dL2cf0) (char-upcase . dL2cef) (char-titlecase . dL2cee) (char-foldcase . dL2ced) (char-downcase . dL2cec) (char-ci>? . dL2ceb) (char-ci>=? . dL2cea) (char-ci=? . dL2ce9) (char-ci<? . dL2ce8) (char-ci<=? . dL2ce7) (char-alphabetic? . dL2ce6) (make-variable-transformer . dLba2) (identifier? . dLe59) (generate-temporaries . dLe45) (free-identifier=? . dLe47) (syntax->datum . dLe5d) (datum->syntax . dLe5b) (bound-identifier=? . dLe49) (record-type-descriptor? . dL2ce5) (record-predicate . dL2ce4) (record-mutator . dL2ce3) (record-constructor . dL2ce2) (record-accessor . dL2ce1) (make-record-type-descriptor . dL2ce0) (make-record-constructor-descriptor . dL2cdf) (record? . dL2cde) (record-type-uid . dL2cdd) (record-type-sealed? . dL2cdc) (record-type-parent . dL2cdb) (record-type-opaque? . dL2cda) (record-type-name . dL2cd9) (record-type-generative? . dL2cd8) (record-type-field-names . dL2cd7) (record-rtd . dL2cd6) (record-field-mutable? . dL2cd5) (delete-file . dL2cd4) (file-exists? . dL2cd3) (vector-sort! . dL2cd2) (vector-sort . dL2cd1) (list-sort . dL2cd0) (symbol-hash . dL2ccf) (string-ci-hash . dL2cce) (string-hash . dL2ccd) (equal-hash . dL2ccc) (hashtable-equivalence-function . dL2ccb) (make-hashtable . dL2cca) (hashtable-hash-function . dL2cc9) (make-eqv-hashtable . dL2cc8) (make-eq-hashtable . dL2cc7) (hashtable? . dL2cc6) (hashtable-update! . dL2cc5) (hashtable-size . dL2cc4) (hashtable-set! . dL2cc3) (hashtable-ref . dL2cc2) (hashtable-mutable? . dL2cc1) (hashtable-keys . dL2cc0) (hashtable-entries . dL2cbf) (hashtable-delete! . dL2cbe) (hashtable-copy . dL2cbd) (hashtable-contains? . dL2cbc) (hashtable-clear! . dL2cbb) (call-with-output-file . dL2cba) (call-with-input-file . dL2cb9) (write-char . dL2cb8) (write . dL2cb7) (with-output-to-file . dL2cb6) (with-input-from-file . dL2cb5) (read-char . dL2cb4) (read . dL2cb3) (peek-char . dL2cb2) (open-output-file . dL2cb1) (open-input-file . dL2cb0) (newline . dL2caf) (display . dL2cae) (close-output-port . dL2cad) (close-input-port . dL2cac) (eof-object? . dL2cab) (eof-object . dL2caa) (current-error-port . dL2ca9) (current-output-port . dL2ca8) (current-input-port . dL2ca7) (output-port? . dL2ca6) (input-port? . dL2ca5) (utf-8-codec . dL2ca4) (utf-16-codec . dL2ca3) (transcoder-error-handling-mode . dL2ca2) (transcoder-eol-style . dL2ca1) (transcoder-codec . dL2ca0) (transcoded-port . dL2c9f) (textual-port? . dL2c9e) (string->bytevector . dL2c9d) (standard-output-port . dL2c9c) (standard-input-port . dL2c9b) (standard-error-port . dL2c9a) (set-port-position! . dL2c99) (put-u8 . dL2c98) (put-string . dL2c97) (put-datum . dL2c96) (put-char . dL2c95) (put-bytevector . dL2c94) (port? . dL2c93) (port-transcoder . dL2c92) (port-position . dL2c91) (port-has-set-port-position!? . dL2c90) (port-has-port-position? . dL2c8f) (port-eof? . dL2c8e) (output-port-buffer-mode . dL2c8d) (open-string-output-port . dL2c8c) (open-string-input-port . dL2c8b) (open-file-output-port . dL2c8a) (open-file-input/output-port . dL2c89) (open-file-input-port . dL2c88) (open-bytevector-output-port . dL2c87) (open-bytevector-input-port . dL2c86) (native-transcoder . dL2c85) (native-eol-style . dL2c84) (make-transcoder . dL2c83) (latin-1-codec . dL2c82) (make-i/o-write-error . dL2c81) (make-i/o-read-error . dL2c80) (make-i/o-port-error . dL2c7f) (make-i/o-invalid-position-error . dL2c7e) (make-i/o-filename-error . dL2c7d) (make-i/o-file-protection-error . dL2c7c) (make-i/o-file-is-read-only-error . dL2c7b) (make-i/o-file-does-not-exist-error . dL2c7a) (make-i/o-file-already-exists-error . dL2c79) (make-i/o-error . dL2c78) (make-i/o-encoding-error . dL2c77) (make-i/o-decoding-error . dL2c76) (make-custom-textual-output-port . dL2c75) (make-custom-textual-input/output-port . dL2c74) (make-custom-textual-input-port . dL2c73) (make-custom-binary-output-port . dL2c72) (make-custom-binary-input/output-port . dL2c71) (make-custom-binary-input-port . dL2c70) (make-bytevector . dL2c6f) (lookahead-u8 . dL2c6e) (lookahead-char . dL2c6d) (i/o-write-error? . dL2c6c) (i/o-read-error? . dL2c6b) (i/o-port-error? . dL2c6a) (i/o-invalid-position-error? . dL2c69) (i/o-filename-error? . dL2c68) (i/o-file-protection-error? . dL2c67) (i/o-file-is-read-only-error? . dL2c66) (i/o-file-does-not-exist-error? . dL2c65) (i/o-file-already-exists-error? . dL2c64) (i/o-error? . dL2c63) (i/o-error-position . dL2c62) (i/o-error-port . dL2c61) (i/o-error-filename . dL2c60) (i/o-encoding-error? . dL2c5f) (i/o-encoding-error-char . dL2c5e) (i/o-decoding-error? . dL2c5d) (get-u8 . dL2c5c) (get-string-n! . dL2c5b) (get-string-n . dL2c5a) (get-string-all . dL2c59) (get-line . dL2c58) (get-datum . dL2c57) (get-char . dL2c56) (get-bytevector-some . dL2c55) (get-bytevector-n! . dL2c54) (get-bytevector-n . dL2c53) (get-bytevector-all . dL2c52) (flush-output-port . dL2c51) (close-port . dL2c50) (exit . dL2c48) (command-line . dL28da) (string-fill! . dL2c47) (string-set! . dL2c46) (set-cdr! . dL2c45) (set-car! . dL2c44) (remove . dL2c43) (remv . dL2c42) (remp . dL2c41) (remq . dL2c40) (partition . dL2c3f) (memv . dL2c3e) (memq . dL2c3d) (memp . dL2c3c) (member . dL2c3b) (exists . dL2c3a) (for-all . dL2c39) (fold-right . dL2c38) (fold-left . dL2c37) (find . dL2c36) (filter . dL2c35) (cons* . dL2c34) (assv . dL2c33) (assq . dL2c32) (assp . dL2c31) (assoc . dL2c30) (call-with-string-output-port . dL2c2f) (call-with-port . dL2c2e) (call-with-bytevector-output-port . dL2c2d) (bytevector->string . dL2c2c) (buffer-mode? . dL2c2b) (binary-port? . dL2c2a) (with-exception-handler . dL2c29) (raise-continuable . dL2c28) (raise . dL2c27) (eval . dLe37) (environment . dLe2f) (make-enumeration . dL2c26) (enum-set=? . dL2c25) (enum-set-universe . dL2c24) (enum-set-union . dL2c23) (enum-set-subset? . dL2c22) (enum-set-projection . dL2c21) (enum-set-member? . dL2c20) (enum-set-intersection . dL2c1f) (enum-set-indexer . dL2c1e) (enum-set-difference . dL2c1d) (enum-set-constructor . dL2c1c) (enum-set-complement . dL2c1b) (enum-set->list . dL2c1a) (who-condition? . dL2c19) (warning? . dL2c18) (violation? . dL2c17) (undefined-violation? . dL2c16) (syntax-violation? . dL2c15) (syntax-violation-subform . dL2c14) (syntax-violation-form . dL2c13) (syntax-violation . dLe57) (simple-conditions . dL2c12) (serious-condition? . dL2c11) (non-continuable-violation? . dL2c10) (message-condition? . dL2c0f) (make-who-condition . dL2c0e) (make-warning . dL2c0d) (make-violation . dL2c0c) (make-undefined-violation . dL2c0b) (make-syntax-violation . dL2c0a) (make-serious-condition . dL2c09) (make-non-continuable-violation . dL2c08) (make-message-condition . dL2c07) (make-lexical-violation . dL2c06) (make-irritants-condition . dL2c05) (make-implementation-restriction-violation . dL2c04) (make-error . dL2c03) (make-assertion-violation . dL2c02) (lexical-violation? . dL2c01) (irritants-condition? . dL2c00) (implementation-restriction-violation? . dL2bff) (error? . dL2bfe) (condition-who . dL2bfd) (condition-predicate . dL2bfc) (condition-message . dL2bfb) (condition-irritants . dL2bfa) (condition-accessor . dL2bf9) (condition . dL2bf8) (assertion-violation? . dL2bf7) (condition? . dL2bf6) (utf32->string . dL2bf5) (utf16->string . dL2bf4) (utf8->string . dL2bf3) (uint-list->bytevector . dL2bf2) (u8-list->bytevector . dL2bf1) (string->utf8 . dL2bf0) (string->utf32 . dL2bef) (string->utf16 . dL2bee) (sint-list->bytevector . dL2bed) (native-endianness . dL2bec) (bytevector? . dL2beb) (bytevector=? . dL2bea) (bytevector-uint-set! . dL2be9) (bytevector-uint-ref . dL2be8) (bytevector-u8-set! . dL2be7) (bytevector-u8-ref . dL2be6) (bytevector-u64-set! . dL2be5) (bytevector-u64-ref . dL2be4) (bytevector-u64-native-set! . dL2be3) (bytevector-u64-native-ref . dL2be2) (bytevector-u32-set! . dL2be1) (bytevector-u32-ref . dL2be0) (bytevector-u32-native-set! . dL2bdf) (bytevector-u32-native-ref . dL2bde) (bytevector-u16-set! . dL2bdd) (bytevector-u16-ref . dL2bdc) (bytevector-u16-native-set! . dL2bdb) (bytevector-u16-native-ref . dL2bda) (bytevector-sint-set! . dL2bd9) (bytevector-sint-ref . dL2bd8) (bytevector-s8-set! . dL2bd7) (bytevector-s8-ref . dL2bd6) (bytevector-s64-set! . dL2bd5) (bytevector-s64-ref . dL2bd4) (bytevector-s64-native-set! . dL2bd3) (bytevector-s64-native-ref . dL2bd2) (bytevector-s32-set! . dL2bd1) (bytevector-s32-ref . dL2bd0) (bytevector-s32-native-set! . dL2bcf) (bytevector-s32-native-ref . dL2bce) (bytevector-s16-set! . dL2bcd) (bytevector-s16-ref . dL2bcc) (bytevector-s16-native-set! . dL2bcb) (bytevector-s16-native-ref . dL2bca) (bytevector-length . dL2bc9) (bytevector-ieee-single-ref . dL2bc8) (bytevector-ieee-single-set! . dL2bc7) (bytevector-ieee-single-native-set! . dL2bc6) (bytevector-ieee-single-native-ref . dL2bc5) (bytevector-ieee-double-set! . dL2bc4) (bytevector-ieee-double-ref . dL2bc3) (bytevector-ieee-double-native-set! . dL2bc2) (bytevector-ieee-double-native-ref . dL2bc1) (bytevector-fill! . dL2bc0) (bytevector-copy! . dL2bbf) (bytevector-copy . dL2bbe) (bytevector->uint-list . dL2bbd) (bytevector->u8-list . dL2bbc) (bytevector->sint-list . dL2bbb) (no-nans-violation? . dL2bba) (no-infinities-violation? . dL2bb9) (make-no-nans-violation . dL2bb8) (make-no-infinities-violation . dL2bb7) (real->flonum . dL2bb6) (flzero? . dL2bb5) (fltruncate . dL2bb4) (fltan . dL2bb3) (flsqrt . dL2bb2) (flsin . dL2bb1) (flround . dL2bb0) (flpositive? . dL2baf) (flonum? . dL2bae) (flodd? . dL2bad) (flnumerator . dL2bac) (flnegative? . dL2bab) (flnan? . dL2baa) (flmod0 . dL2ba9) (flmod . dL2ba8) (flmin . dL2ba7) (flmax . dL2ba6) (fllog . dL2ba5) (flinteger? . dL2ba4) (flinfinite? . dL2ba3) (flfloor . dL2ba2) (flfinite? . dL2ba1) (flexpt . dL2ba0) (flexp . dL2b9f) (fleven? . dL2b9e) (fldiv0-and-mod0 . dL2b9d) (fldiv0 . dL2b9c) (fldiv-and-mod . dL2b9b) (fldiv . dL2b9a) (fldenominator . dL2b99) (flcos . dL2b98) (flceiling . dL2b97) (flatan . dL2b96) (flasin . dL2b95) (flacos . dL2b94) (flabs . dL2b93) (fl>? . dL2b92) (fl>=? . dL2b91) (fl=? . dL2b90) (fl<? . dL2b8f) (fl<=? . dL2b8e) (fl/ . dL2b8d) (fl- . dL2b8c) (fl+ . dL2b8b) (fl* . dL2b8a) (fixnum->flonum . dL2b89) (fxzero? . dL2b88) (fxxor . dL2b87) (fxrotate-bit-field . dL2b86) (fxreverse-bit-field . dL2b85) (fxpositive? . dL2b84) (fxodd? . dL2b83) (fxnot . dL2b82) (fxnegative? . dL2b81) (fxmod0 . dL2b80) (fxmod . dL2b7f) (fxmin . dL2b7e) (fxmax . dL2b7d) (fxlength . dL2b7c) (fxior . dL2b7b) (fxif . dL2b7a) (fxfirst-bit-set . dL2b79) (fxeven? . dL2b78) (fxdiv0-and-mod0 . dL2b77) (fxdiv0 . dL2b76) (fxdiv-and-mod . dL2b75) (fxdiv . dL2b74) (fxcopy-bit-field . dL2b73) (fxcopy-bit . dL2b72) (fxbit-set? . dL2b71) (fxbit-field . dL2b70) (fxbit-count . dL2b6f) (fxarithmetic-shift-right . dL2b6e) (fxarithmetic-shift-left . dL2b6d) (fxarithmetic-shift . dL2b6c) (fxand . dL2b6b) (fx>? . dL2b6a) (fx>=? . dL2b69) (fx=? . dL2b68) (fx<? . dL2b67) (fx<=? . dL2b66) (fx-/carry . dL2b65) (fx- . dL2b64) (fx+/carry . dL2b63) (fx+ . dL2b62) (fx*/carry . dL2b61) (fx* . dL2b60) (greatest-fixnum . dL2b5f) (least-fixnum . dL2b5e) (fixnum-width . dL2b5d) (fixnum? . dL2b5c) (bitwise-rotate-bit-field . dL2b5b) (bitwise-reverse-bit-field . dL2b5a) (bitwise-length . dL2b59) (bitwise-if . dL2b58) (bitwise-first-bit-set . dL2b57) (bitwise-copy-bit-field . dL2b56) (bitwise-copy-bit . dL2b55) (bitwise-bit-set? . dL2b54) (bitwise-bit-field . dL2b53) (bitwise-bit-count . dL2b52) (bitwise-xor . dL2b51) (bitwise-ior . dL2b50) (bitwise-and . dL2b4f) (bitwise-not . dL2b4e) (bitwise-arithmetic-shift-right . dL2b4d) (bitwise-arithmetic-shift-left . dL2b4c) (bitwise-arithmetic-shift . dL2b4b) (zero? . dL2b4a) (vector? . dL2b49) (vector-set! . dL2b48) (vector-ref . dL2b47) (vector-map . dL2b46) (vector-length . dL2b45) (vector-for-each . dL2b44) (vector-fill! . dL2b43) (vector->list . dL2b42) (vector . dL2b41) (values . dL2b40) (truncate . dL2b3f) (tan . dL2b3e) (symbol? . dL2b3d) (symbol=? . dL2b3c) (symbol->string . dL2b3b) (substring . dL2b3a) (string? . dL2b39) (string>? . dL2b38) (string>=? . dL2b37) (string=? . dL2b36) (string<? . dL2b35) (string<=? . dL2b34) (string-ref . dL2b33) (string-length . dL2b32) (string-for-each . dL2b31) (string-copy . dL2b30) (string-append . dL2b2f) (string->symbol . dL2b2e) (string->number . dL2b2d) (string->list . dL2b2c) (string . dL2b2b) (sqrt . dL2b2a) (sin . dL2b29) (round . dL2b28) (reverse . dL2b27) (real? . dL2b26) (real-valued? . dL2b25) (real-part . dL2b24) (rationalize . dL2b23) (rational? . dL2b22) (rational-valued? . dL2b21) (procedure? . dL2b20) (positive? . dL2b1f) (pair? . dL2b1e) (odd? . dL2b1d) (numerator . dL2b1c) (number? . dL2b1b) (number->string . dL2b1a) (null? . dL2b19) (not . dL2b18) (negative? . dL2b17) (nan? . dL2b16) (min . dL2b15) (max . dL2b14) (map . dL2b13) (make-vector . dL2b12) (make-string . dL2b11) (make-rectangular . dL2b10) (make-polar . dL2b0f) (magnitude . dL2b0e) (log . dL2b0d) (list? . dL2b0c) (list-tail . dL2b0b) (list-ref . dL2b0a) (list->vector . dL2b09) (list->string . dL2b08) (list . dL2b07) (length . dL2b06) (lcm . dL2b05) (integer? . dL2b04) (integer-valued? . dL2b03) (integer->char . dL2b02) (infinite? . dL2b01) (inexact? . dL2b00) (inexact . dL2aff) (imag-part . dL2afe) (gcd . dL2afd) (for-each . dL2afc) (floor . dL2afb) (finite? . dL2afa) (expt . dL2af9) (exp . dL2af8) (exact? . dL2af7) (exact-integer-sqrt . dL2af6) (exact . dL2af5) (even? . dL2af4) (error . dL2af3) (eqv? . dL2af2) (equal? . dL2af1) (eq? . dL2af0) (dynamic-wind . dL2aef) (div0-and-mod0 . dL2aee) (mod0 . dL2aed) (div0 . dL2aec) (div-and-mod . dL2aeb) (mod . dL2aea) (div . dL2ae9) (denominator . dL2ae8) (cos . dL2ae7) (cons . dL2ae6) (complex? . dL2ae5) (char? . dL2ae4) (char>? . dL2ae3) (char>=? . dL2ae2) (char=? . dL2ae1) (char<? . dL2ae0) (char<=? . dL2adf) (char->integer . dL2ade) (ceiling . dL2add) (call-with-values . dL2adc) (call/cc . dL2adb) (call-with-current-continuation . dL2ada) (cddddr . dL2ad9) (cdddar . dL2ad8) (cddadr . dL2ad7) (cddaar . dL2ad6) (cdaddr . dL2ad5) (cdadar . dL2ad4) (cdaadr . dL2ad3) (cdaaar . dL2ad2) (cadddr . dL2ad1) (caddar . dL2ad0) (cadadr . dL2acf) (cadaar . dL2ace) (caaddr . dL2acd) (caadar . dL2acc) (caaadr . dL2acb) (caaaar . dL2aca) (cdddr . dL2ac9) (cddar . dL2ac8) (cdadr . dL2ac7) (cdaar . dL2ac6) (caddr . dL2ac5) (cadar . dL2ac4) (caadr . dL2ac3) (caaar . dL2ac2) (cddr . dL2ac1) (cdar . dL2ac0) (cadr . dL2abf) (caar . dL2abe) (cdr . dL2abd) (car . dL2abc) (boolean? . dL2abb) (boolean=? . dL2aba) (atan . dL2ab9) (assertion-violation . dL2ab8) (asin . dL2ab7) (apply . dL2ab6) (append . dL2ab5) (angle . dL2ab4) (acos . dL2ab3) (abs . dL2ab2) (/ . dL2ab1) (* . dL2ab0) (- . dL2aaf) (+ . dL2aae) (>= . dL2aad) (> . dL2aac) (= . dL2aab) (<= . dL2aaa) (< . dL2aa9) (library . dL2aa8) (&no-nans . dL2aa7) (&no-infinities . dL2aa6) (&i/o-encoding . dL2aa5) (&i/o-decoding . dL2aa4) (&i/o-port . dL2aa3) (&i/o-file-does-not-exist . dL2aa2) (&i/o-file-already-exists . dL2aa1) (&i/o-file-is-read-only . dL2aa0) (&i/o-file-protection . dL2a9f) (&i/o-filename . dL2a9e) (&i/o-invalid-position . dL2a9d) (&i/o-write . dL2a9c) (&i/o-read . dL2a9b) (&i/o . dL2a9a) (&undefined . dL2a99) (&syntax . dL2a98) (&lexical . dL2a97) (&implementation-restriction . dL2a96) (&non-continuable . dL2a95) (&who . dL2a94) (&irritants . dL2a93) (&assertion . dL2a92) (&violation . dL2a91) (&error . dL2a90) (&serious . dL2a8f) (&warning . dL2a8e) (&message . dL2a8d) (&condition . dL2a8c) (define-condition-type . dL2a8b) (define-enumeration . dL2a8a) (define-record-type . dL2a89) (parent-rtd . dL2a88) (nongenerative . dL2a87) (opaque . dL2a86) (sealed . dL2a85) (protocol . dL2a84) (parent . dL2a83) (immutable . dL2a82) (mutable . dL2a81) (fields . dL2a80) (error-handling-mode . dL2a7f) (file-options . dL2a7e) (buffer-mode . dL2a7d) (eol-style . dL2a7c) (guard . dL2a7b) (unsyntax-splicing . dL2a78) (unsyntax . dL2a77) (unquote-splicing . dL2a76) (unquote . dL2a75) (_ . dL2a74) (else . dL2a73) (=> . dL2a72) (... . dL2a71) (assert . dL2a70) (endianness . dL2a6f) (time . dL2a6d) (do . dL2a6c) (cond . dL2a6b) (let* . dL2a6a) (let*-values . dL2a69) (let-values . dL2a68) (identifier-syntax . dL2a67) (with-syntax . dL2a66) (quasisyntax . dL2a65) (quasiquote . dL2a64) (syntax-rules . dL2a63) (include . dL2a62) (record-constructor-descriptor . dL2a60) (record-type-descriptor . dL2a5f) (case . dL2a5e) (unless . dL2a5c) (when . dL2a5b) (or . dL2a5a) (and . dL2a59) (if . dL2a58) (let . dL2a57) (letrec* . dL2a56) (letrec . dL2a55) (case-lambda . dL2a53) (lambda . dL2a52) (syntax . dL2a51) (syntax-case . dL2a50) (quote . dL2a4f) (letrec-syntax . dL2a4d) (let-syntax . dL2a4c) (set! . dL2a4b) (import . dL2a4a) (begin . dL2a49) (define-syntax . dL2a47) (define . dL2a46)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2de7 '(psyntax null-environment-5) '() '() '() '() '((make-promise . dL2c49) (unquote-splicing . dL2a76) (unquote . dL2a75) (_ . dL2a74) (else . dL2a73) (=> . dL2a72) (... . dL2a71) (delay . dL2a6e) (do . dL2a6c) (cond . dL2a6b) (let* . dL2a6a) (quasiquote . dL2a64) (syntax-rules . dL2a63) (case . dL2a5e) (or . dL2a5a) (and . dL2a59) (if . dL2a58) (let . dL2a57) (letrec . dL2a55) (lambda . dL2a52) (quote . dL2a4f) (letrec-syntax . dL2a4d) (let-syntax . dL2a4c) (set! . dL2a4b) (begin . dL2a49) (define-syntax . dL2a47) (define . dL2a46)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2de8 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . dL2cfa) (string-ci>=? . dL2cf9) (string-ci=? . dL2cf8) (string-ci<? . dL2cf7) (string-ci<=? . dL2cf6) (char-whitespace? . dL2cf5) (char-upper-case? . dL2cf4) (char-numeric? . dL2cf2) (char-lower-case? . dL2cf1) (char-upcase . dL2cef) (char-downcase . dL2cec) (char-ci>? . dL2ceb) (char-ci>=? . dL2cea) (char-ci=? . dL2ce9) (char-ci<? . dL2ce8) (char-ci<=? . dL2ce7) (char-alphabetic? . dL2ce6) (call-with-output-file . dL2cba) (call-with-input-file . dL2cb9) (write-char . dL2cb8) (write . dL2cb7) (with-output-to-file . dL2cb6) (with-input-from-file . dL2cb5) (read-char . dL2cb4) (read . dL2cb3) (peek-char . dL2cb2) (open-output-file . dL2cb1) (open-input-file . dL2cb0) (newline . dL2caf) (display . dL2cae) (close-output-port . dL2cad) (close-input-port . dL2cac) (eof-object . dL2caa) (current-output-port . dL2ca8) (current-input-port . dL2ca7) (output-port? . dL2ca6) (input-port? . dL2ca5) (scheme-report-environment . dLe33) (quotient . dL2c4f) (null-environment . dLe31) (remainder . dL2c4e) (modulo . dL2c4d) (inexact->exact . dL2c4c) (force . dL2c4b) (exact->inexact . dL2c4a) (make-promise . dL2c49) (string-fill! . dL2c47) (string-set! . dL2c46) (set-cdr! . dL2c45) (set-car! . dL2c44) (memv . dL2c3e) (memq . dL2c3d) (member . dL2c3b) (assv . dL2c33) (assq . dL2c32) (assoc . dL2c30) (eval . dLe37) (zero? . dL2b4a) (vector? . dL2b49) (vector-set! . dL2b48) (vector-ref . dL2b47) (vector-length . dL2b45) (vector-fill! . dL2b43) (vector->list . dL2b42) (vector . dL2b41) (values . dL2b40) (truncate . dL2b3f) (tan . dL2b3e) (symbol? . dL2b3d) (symbol->string . dL2b3b) (substring . dL2b3a) (string? . dL2b39) (string>? . dL2b38) (string>=? . dL2b37) (string=? . dL2b36) (string<? . dL2b35) (string<=? . dL2b34) (string-ref . dL2b33) (string-length . dL2b32) (string-copy . dL2b30) (string-append . dL2b2f) (string->symbol . dL2b2e) (string->number . dL2b2d) (string->list . dL2b2c) (string . dL2b2b) (sqrt . dL2b2a) (sin . dL2b29) (round . dL2b28) (reverse . dL2b27) (real? . dL2b26) (real-part . dL2b24) (rationalize . dL2b23) (rational? . dL2b22) (procedure? . dL2b20) (positive? . dL2b1f) (pair? . dL2b1e) (odd? . dL2b1d) (numerator . dL2b1c) (number? . dL2b1b) (number->string . dL2b1a) (not . dL2b18) (negative? . dL2b17) (min . dL2b15) (max . dL2b14) (map . dL2b13) (make-vector . dL2b12) (make-string . dL2b11) (make-rectangular . dL2b10) (make-polar . dL2b0f) (magnitude . dL2b0e) (log . dL2b0d) (list? . dL2b0c) (list-tail . dL2b0b) (list-ref . dL2b0a) (list->vector . dL2b09) (list->string . dL2b08) (list . dL2b07) (length . dL2b06) (lcm . dL2b05) (integer? . dL2b04) (integer->char . dL2b02) (inexact? . dL2b00) (imag-part . dL2afe) (gcd . dL2afd) (for-each . dL2afc) (floor . dL2afb) (expt . dL2af9) (exp . dL2af8) (exact? . dL2af7) (even? . dL2af4) (eqv? . dL2af2) (equal? . dL2af1) (eq? . dL2af0) (dynamic-wind . dL2aef) (denominator . dL2ae8) (cos . dL2ae7) (cons . dL2ae6) (complex? . dL2ae5) (char? . dL2ae4) (char>? . dL2ae3) (char>=? . dL2ae2) (char=? . dL2ae1) (char<? . dL2ae0) (char<=? . dL2adf) (char->integer . dL2ade) (ceiling . dL2add) (call-with-values . dL2adc) (call-with-current-continuation . dL2ada) (cddddr . dL2ad9) (cdddar . dL2ad8) (cddadr . dL2ad7) (cddaar . dL2ad6) (cdaddr . dL2ad5) (cdadar . dL2ad4) (cdaadr . dL2ad3) (cdaaar . dL2ad2) (cadddr . dL2ad1) (caddar . dL2ad0) (cadadr . dL2acf) (cadaar . dL2ace) (caaddr . dL2acd) (caadar . dL2acc) (caaadr . dL2acb) (caaaar . dL2aca) (cdddr . dL2ac9) (cddar . dL2ac8) (cdadr . dL2ac7) (cdaar . dL2ac6) (caddr . dL2ac5) (cadar . dL2ac4) (caadr . dL2ac3) (caaar . dL2ac2) (cddr . dL2ac1) (cdar . dL2ac0) (cadr . dL2abf) (caar . dL2abe) (cdr . dL2abd) (car . dL2abc) (boolean? . dL2abb) (atan . dL2ab9) (asin . dL2ab7) (apply . dL2ab6) (append . dL2ab5) (angle . dL2ab4) (acos . dL2ab3) (abs . dL2ab2) (/ . dL2ab1) (* . dL2ab0) (- . dL2aaf) (+ . dL2aae) (>= . dL2aad) (> . dL2aac) (= . dL2aab) (<= . dL2aaa) (< . dL2aa9) (unquote-splicing . dL2a76) (unquote . dL2a75) (else . dL2a73) (=> . dL2a72) (... . dL2a71) (delay . dL2a6e) (do . dL2a6c) (cond . dL2a6b) (let* . dL2a6a) (quasiquote . dL2a64) (syntax-rules . dL2a63) (case . dL2a5e) (or . dL2a5a) (and . dL2a59) (if . dL2a58) (let . dL2a57) (letrec . dL2a55) (lambda . dL2a52) (quote . dL2a4f) (letrec-syntax . dL2a4d) (let-syntax . dL2a4c) (set! . dL2a4b) (begin . dL2a49) (define-syntax . dL2a47) (define . dL2a46)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2de9 '(psyntax modules) '() '() '() '() '((module . dL2a48)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2dea '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2deb '(rnrs) '(6) '() '() '() '((regexp? . dL2da6) (string-upcase . dL2d02) (string-titlecase . dL2d01) (string-normalize-nfkd . dL2d00) (string-normalize-nfkc . dL2cff) (string-normalize-nfd . dL2cfe) (string-normalize-nfc . dL2cfd) (string-foldcase . dL2cfc) (string-downcase . dL2cfb) (string-ci>? . dL2cfa) (string-ci>=? . dL2cf9) (string-ci=? . dL2cf8) (string-ci<? . dL2cf7) (string-ci<=? . dL2cf6) (char-whitespace? . dL2cf5) (char-upper-case? . dL2cf4) (char-title-case? . dL2cf3) (char-numeric? . dL2cf2) (char-lower-case? . dL2cf1) (char-general-category . dL2cf0) (char-upcase . dL2cef) (char-titlecase . dL2cee) (char-foldcase . dL2ced) (char-downcase . dL2cec) (char-ci>? . dL2ceb) (char-ci>=? . dL2cea) (char-ci=? . dL2ce9) (char-ci<? . dL2ce8) (char-ci<=? . dL2ce7) (char-alphabetic? . dL2ce6) (make-variable-transformer . dLba2) (identifier? . dLe59) (generate-temporaries . dLe45) (free-identifier=? . dLe47) (syntax->datum . dLe5d) (datum->syntax . dLe5b) (bound-identifier=? . dLe49) (record-type-descriptor? . dL2ce5) (record-predicate . dL2ce4) (record-mutator . dL2ce3) (record-constructor . dL2ce2) (record-accessor . dL2ce1) (make-record-type-descriptor . dL2ce0) (make-record-constructor-descriptor . dL2cdf) (record? . dL2cde) (record-type-uid . dL2cdd) (record-type-sealed? . dL2cdc) (record-type-parent . dL2cdb) (record-type-opaque? . dL2cda) (record-type-name . dL2cd9) (record-type-generative? . dL2cd8) (record-type-field-names . dL2cd7) (record-rtd . dL2cd6) (record-field-mutable? . dL2cd5) (delete-file . dL2cd4) (file-exists? . dL2cd3) (vector-sort! . dL2cd2) (vector-sort . dL2cd1) (list-sort . dL2cd0) (symbol-hash . dL2ccf) (string-ci-hash . dL2cce) (string-hash . dL2ccd) (equal-hash . dL2ccc) (hashtable-equivalence-function . dL2ccb) (make-hashtable . dL2cca) (hashtable-hash-function . dL2cc9) (make-eqv-hashtable . dL2cc8) (make-eq-hashtable . dL2cc7) (hashtable? . dL2cc6) (hashtable-update! . dL2cc5) (hashtable-size . dL2cc4) (hashtable-set! . dL2cc3) (hashtable-ref . dL2cc2) (hashtable-mutable? . dL2cc1) (hashtable-keys . dL2cc0) (hashtable-entries . dL2cbf) (hashtable-delete! . dL2cbe) (hashtable-copy . dL2cbd) (hashtable-contains? . dL2cbc) (hashtable-clear! . dL2cbb) (call-with-output-file . dL2cba) (call-with-input-file . dL2cb9) (write-char . dL2cb8) (write . dL2cb7) (with-output-to-file . dL2cb6) (with-input-from-file . dL2cb5) (read-char . dL2cb4) (read . dL2cb3) (peek-char . dL2cb2) (open-output-file . dL2cb1) (open-input-file . dL2cb0) (newline . dL2caf) (display . dL2cae) (close-output-port . dL2cad) (close-input-port . dL2cac) (eof-object? . dL2cab) (eof-object . dL2caa) (current-error-port . dL2ca9) (current-output-port . dL2ca8) (current-input-port . dL2ca7) (output-port? . dL2ca6) (input-port? . dL2ca5) (utf-8-codec . dL2ca4) (utf-16-codec . dL2ca3) (transcoder-error-handling-mode . dL2ca2) (transcoder-eol-style . dL2ca1) (transcoder-codec . dL2ca0) (transcoded-port . dL2c9f) (textual-port? . dL2c9e) (string->bytevector . dL2c9d) (standard-output-port . dL2c9c) (standard-input-port . dL2c9b) (standard-error-port . dL2c9a) (set-port-position! . dL2c99) (put-u8 . dL2c98) (put-string . dL2c97) (put-datum . dL2c96) (put-char . dL2c95) (put-bytevector . dL2c94) (port? . dL2c93) (port-transcoder . dL2c92) (port-position . dL2c91) (port-has-set-port-position!? . dL2c90) (port-has-port-position? . dL2c8f) (port-eof? . dL2c8e) (output-port-buffer-mode . dL2c8d) (open-string-output-port . dL2c8c) (open-string-input-port . dL2c8b) (open-file-output-port . dL2c8a) (open-file-input/output-port . dL2c89) (open-file-input-port . dL2c88) (open-bytevector-output-port . dL2c87) (open-bytevector-input-port . dL2c86) (native-transcoder . dL2c85) (native-eol-style . dL2c84) (make-transcoder . dL2c83) (latin-1-codec . dL2c82) (make-i/o-write-error . dL2c81) (make-i/o-read-error . dL2c80) (make-i/o-port-error . dL2c7f) (make-i/o-invalid-position-error . dL2c7e) (make-i/o-filename-error . dL2c7d) (make-i/o-file-protection-error . dL2c7c) (make-i/o-file-is-read-only-error . dL2c7b) (make-i/o-file-does-not-exist-error . dL2c7a) (make-i/o-file-already-exists-error . dL2c79) (make-i/o-error . dL2c78) (make-i/o-encoding-error . dL2c77) (make-i/o-decoding-error . dL2c76) (make-custom-textual-output-port . dL2c75) (make-custom-textual-input/output-port . dL2c74) (make-custom-textual-input-port . dL2c73) (make-custom-binary-output-port . dL2c72) (make-custom-binary-input/output-port . dL2c71) (make-custom-binary-input-port . dL2c70) (make-bytevector . dL2c6f) (lookahead-u8 . dL2c6e) (lookahead-char . dL2c6d) (i/o-write-error? . dL2c6c) (i/o-read-error? . dL2c6b) (i/o-port-error? . dL2c6a) (i/o-invalid-position-error? . dL2c69) (i/o-filename-error? . dL2c68) (i/o-file-protection-error? . dL2c67) (i/o-file-is-read-only-error? . dL2c66) (i/o-file-does-not-exist-error? . dL2c65) (i/o-file-already-exists-error? . dL2c64) (i/o-error? . dL2c63) (i/o-error-position . dL2c62) (i/o-error-port . dL2c61) (i/o-error-filename . dL2c60) (i/o-encoding-error? . dL2c5f) (i/o-encoding-error-char . dL2c5e) (i/o-decoding-error? . dL2c5d) (get-u8 . dL2c5c) (get-string-n! . dL2c5b) (get-string-n . dL2c5a) (get-string-all . dL2c59) (get-line . dL2c58) (get-datum . dL2c57) (get-char . dL2c56) (get-bytevector-some . dL2c55) (get-bytevector-n! . dL2c54) (get-bytevector-n . dL2c53) (get-bytevector-all . dL2c52) (flush-output-port . dL2c51) (close-port . dL2c50) (exit . dL2c48) (command-line . dL28da) (remove . dL2c43) (remv . dL2c42) (remp . dL2c41) (remq . dL2c40) (partition . dL2c3f) (memv . dL2c3e) (memq . dL2c3d) (memp . dL2c3c) (member . dL2c3b) (exists . dL2c3a) (for-all . dL2c39) (fold-right . dL2c38) (fold-left . dL2c37) (find . dL2c36) (filter . dL2c35) (cons* . dL2c34) (assv . dL2c33) (assq . dL2c32) (assp . dL2c31) (assoc . dL2c30) (call-with-string-output-port . dL2c2f) (call-with-port . dL2c2e) (call-with-bytevector-output-port . dL2c2d) (bytevector->string . dL2c2c) (buffer-mode? . dL2c2b) (binary-port? . dL2c2a) (with-exception-handler . dL2c29) (raise-continuable . dL2c28) (raise . dL2c27) (make-enumeration . dL2c26) (enum-set=? . dL2c25) (enum-set-universe . dL2c24) (enum-set-union . dL2c23) (enum-set-subset? . dL2c22) (enum-set-projection . dL2c21) (enum-set-member? . dL2c20) (enum-set-intersection . dL2c1f) (enum-set-indexer . dL2c1e) (enum-set-difference . dL2c1d) (enum-set-constructor . dL2c1c) (enum-set-complement . dL2c1b) (enum-set->list . dL2c1a) (who-condition? . dL2c19) (warning? . dL2c18) (violation? . dL2c17) (undefined-violation? . dL2c16) (syntax-violation? . dL2c15) (syntax-violation-subform . dL2c14) (syntax-violation-form . dL2c13) (syntax-violation . dLe57) (simple-conditions . dL2c12) (serious-condition? . dL2c11) (non-continuable-violation? . dL2c10) (message-condition? . dL2c0f) (make-who-condition . dL2c0e) (make-warning . dL2c0d) (make-violation . dL2c0c) (make-undefined-violation . dL2c0b) (make-syntax-violation . dL2c0a) (make-serious-condition . dL2c09) (make-non-continuable-violation . dL2c08) (make-message-condition . dL2c07) (make-lexical-violation . dL2c06) (make-irritants-condition . dL2c05) (make-implementation-restriction-violation . dL2c04) (make-error . dL2c03) (make-assertion-violation . dL2c02) (lexical-violation? . dL2c01) (irritants-condition? . dL2c00) (implementation-restriction-violation? . dL2bff) (error? . dL2bfe) (condition-who . dL2bfd) (condition-predicate . dL2bfc) (condition-message . dL2bfb) (condition-irritants . dL2bfa) (condition-accessor . dL2bf9) (condition . dL2bf8) (assertion-violation? . dL2bf7) (condition? . dL2bf6) (utf32->string . dL2bf5) (utf16->string . dL2bf4) (utf8->string . dL2bf3) (uint-list->bytevector . dL2bf2) (u8-list->bytevector . dL2bf1) (string->utf8 . dL2bf0) (string->utf32 . dL2bef) (string->utf16 . dL2bee) (sint-list->bytevector . dL2bed) (native-endianness . dL2bec) (bytevector? . dL2beb) (bytevector=? . dL2bea) (bytevector-uint-set! . dL2be9) (bytevector-uint-ref . dL2be8) (bytevector-u8-set! . dL2be7) (bytevector-u8-ref . dL2be6) (bytevector-u64-set! . dL2be5) (bytevector-u64-ref . dL2be4) (bytevector-u64-native-set! . dL2be3) (bytevector-u64-native-ref . dL2be2) (bytevector-u32-set! . dL2be1) (bytevector-u32-ref . dL2be0) (bytevector-u32-native-set! . dL2bdf) (bytevector-u32-native-ref . dL2bde) (bytevector-u16-set! . dL2bdd) (bytevector-u16-ref . dL2bdc) (bytevector-u16-native-set! . dL2bdb) (bytevector-u16-native-ref . dL2bda) (bytevector-sint-set! . dL2bd9) (bytevector-sint-ref . dL2bd8) (bytevector-s8-set! . dL2bd7) (bytevector-s8-ref . dL2bd6) (bytevector-s64-set! . dL2bd5) (bytevector-s64-ref . dL2bd4) (bytevector-s64-native-set! . dL2bd3) (bytevector-s64-native-ref . dL2bd2) (bytevector-s32-set! . dL2bd1) (bytevector-s32-ref . dL2bd0) (bytevector-s32-native-set! . dL2bcf) (bytevector-s32-native-ref . dL2bce) (bytevector-s16-set! . dL2bcd) (bytevector-s16-ref . dL2bcc) (bytevector-s16-native-set! . dL2bcb) (bytevector-s16-native-ref . dL2bca) (bytevector-length . dL2bc9) (bytevector-ieee-single-ref . dL2bc8) (bytevector-ieee-single-set! . dL2bc7) (bytevector-ieee-single-native-set! . dL2bc6) (bytevector-ieee-single-native-ref . dL2bc5) (bytevector-ieee-double-set! . dL2bc4) (bytevector-ieee-double-ref . dL2bc3) (bytevector-ieee-double-native-set! . dL2bc2) (bytevector-ieee-double-native-ref . dL2bc1) (bytevector-fill! . dL2bc0) (bytevector-copy! . dL2bbf) (bytevector-copy . dL2bbe) (bytevector->uint-list . dL2bbd) (bytevector->u8-list . dL2bbc) (bytevector->sint-list . dL2bbb) (no-nans-violation? . dL2bba) (no-infinities-violation? . dL2bb9) (make-no-nans-violation . dL2bb8) (make-no-infinities-violation . dL2bb7) (real->flonum . dL2bb6) (flzero? . dL2bb5) (fltruncate . dL2bb4) (fltan . dL2bb3) (flsqrt . dL2bb2) (flsin . dL2bb1) (flround . dL2bb0) (flpositive? . dL2baf) (flonum? . dL2bae) (flodd? . dL2bad) (flnumerator . dL2bac) (flnegative? . dL2bab) (flnan? . dL2baa) (flmod0 . dL2ba9) (flmod . dL2ba8) (flmin . dL2ba7) (flmax . dL2ba6) (fllog . dL2ba5) (flinteger? . dL2ba4) (flinfinite? . dL2ba3) (flfloor . dL2ba2) (flfinite? . dL2ba1) (flexpt . dL2ba0) (flexp . dL2b9f) (fleven? . dL2b9e) (fldiv0-and-mod0 . dL2b9d) (fldiv0 . dL2b9c) (fldiv-and-mod . dL2b9b) (fldiv . dL2b9a) (fldenominator . dL2b99) (flcos . dL2b98) (flceiling . dL2b97) (flatan . dL2b96) (flasin . dL2b95) (flacos . dL2b94) (flabs . dL2b93) (fl>? . dL2b92) (fl>=? . dL2b91) (fl=? . dL2b90) (fl<? . dL2b8f) (fl<=? . dL2b8e) (fl/ . dL2b8d) (fl- . dL2b8c) (fl+ . dL2b8b) (fl* . dL2b8a) (fixnum->flonum . dL2b89) (fxzero? . dL2b88) (fxxor . dL2b87) (fxrotate-bit-field . dL2b86) (fxreverse-bit-field . dL2b85) (fxpositive? . dL2b84) (fxodd? . dL2b83) (fxnot . dL2b82) (fxnegative? . dL2b81) (fxmod0 . dL2b80) (fxmod . dL2b7f) (fxmin . dL2b7e) (fxmax . dL2b7d) (fxlength . dL2b7c) (fxior . dL2b7b) (fxif . dL2b7a) (fxfirst-bit-set . dL2b79) (fxeven? . dL2b78) (fxdiv0-and-mod0 . dL2b77) (fxdiv0 . dL2b76) (fxdiv-and-mod . dL2b75) (fxdiv . dL2b74) (fxcopy-bit-field . dL2b73) (fxcopy-bit . dL2b72) (fxbit-set? . dL2b71) (fxbit-field . dL2b70) (fxbit-count . dL2b6f) (fxarithmetic-shift-right . dL2b6e) (fxarithmetic-shift-left . dL2b6d) (fxarithmetic-shift . dL2b6c) (fxand . dL2b6b) (fx>? . dL2b6a) (fx>=? . dL2b69) (fx=? . dL2b68) (fx<? . dL2b67) (fx<=? . dL2b66) (fx-/carry . dL2b65) (fx- . dL2b64) (fx+/carry . dL2b63) (fx+ . dL2b62) (fx*/carry . dL2b61) (fx* . dL2b60) (greatest-fixnum . dL2b5f) (least-fixnum . dL2b5e) (fixnum-width . dL2b5d) (fixnum? . dL2b5c) (bitwise-rotate-bit-field . dL2b5b) (bitwise-reverse-bit-field . dL2b5a) (bitwise-length . dL2b59) (bitwise-if . dL2b58) (bitwise-first-bit-set . dL2b57) (bitwise-copy-bit-field . dL2b56) (bitwise-copy-bit . dL2b55) (bitwise-bit-set? . dL2b54) (bitwise-bit-field . dL2b53) (bitwise-bit-count . dL2b52) (bitwise-xor . dL2b51) (bitwise-ior . dL2b50) (bitwise-and . dL2b4f) (bitwise-not . dL2b4e) (bitwise-arithmetic-shift-right . dL2b4d) (bitwise-arithmetic-shift-left . dL2b4c) (bitwise-arithmetic-shift . dL2b4b) (zero? . dL2b4a) (vector? . dL2b49) (vector-set! . dL2b48) (vector-ref . dL2b47) (vector-map . dL2b46) (vector-length . dL2b45) (vector-for-each . dL2b44) (vector-fill! . dL2b43) (vector->list . dL2b42) (vector . dL2b41) (values . dL2b40) (truncate . dL2b3f) (tan . dL2b3e) (symbol? . dL2b3d) (symbol=? . dL2b3c) (symbol->string . dL2b3b) (substring . dL2b3a) (string? . dL2b39) (string>? . dL2b38) (string>=? . dL2b37) (string=? . dL2b36) (string<? . dL2b35) (string<=? . dL2b34) (string-ref . dL2b33) (string-length . dL2b32) (string-for-each . dL2b31) (string-copy . dL2b30) (string-append . dL2b2f) (string->symbol . dL2b2e) (string->number . dL2b2d) (string->list . dL2b2c) (string . dL2b2b) (sqrt . dL2b2a) (sin . dL2b29) (round . dL2b28) (reverse . dL2b27) (real? . dL2b26) (real-valued? . dL2b25) (real-part . dL2b24) (rationalize . dL2b23) (rational? . dL2b22) (rational-valued? . dL2b21) (procedure? . dL2b20) (positive? . dL2b1f) (pair? . dL2b1e) (odd? . dL2b1d) (numerator . dL2b1c) (number? . dL2b1b) (number->string . dL2b1a) (null? . dL2b19) (not . dL2b18) (negative? . dL2b17) (nan? . dL2b16) (min . dL2b15) (max . dL2b14) (map . dL2b13) (make-vector . dL2b12) (make-string . dL2b11) (make-rectangular . dL2b10) (make-polar . dL2b0f) (magnitude . dL2b0e) (log . dL2b0d) (list? . dL2b0c) (list-tail . dL2b0b) (list-ref . dL2b0a) (list->vector . dL2b09) (list->string . dL2b08) (list . dL2b07) (length . dL2b06) (lcm . dL2b05) (integer? . dL2b04) (integer-valued? . dL2b03) (integer->char . dL2b02) (infinite? . dL2b01) (inexact? . dL2b00) (inexact . dL2aff) (imag-part . dL2afe) (gcd . dL2afd) (for-each . dL2afc) (floor . dL2afb) (finite? . dL2afa) (expt . dL2af9) (exp . dL2af8) (exact? . dL2af7) (exact-integer-sqrt . dL2af6) (exact . dL2af5) (even? . dL2af4) (error . dL2af3) (eqv? . dL2af2) (equal? . dL2af1) (eq? . dL2af0) (dynamic-wind . dL2aef) (div0-and-mod0 . dL2aee) (mod0 . dL2aed) (div0 . dL2aec) (div-and-mod . dL2aeb) (mod . dL2aea) (div . dL2ae9) (denominator . dL2ae8) (cos . dL2ae7) (cons . dL2ae6) (complex? . dL2ae5) (char? . dL2ae4) (char>? . dL2ae3) (char>=? . dL2ae2) (char=? . dL2ae1) (char<? . dL2ae0) (char<=? . dL2adf) (char->integer . dL2ade) (ceiling . dL2add) (call-with-values . dL2adc) (call/cc . dL2adb) (call-with-current-continuation . dL2ada) (cddddr . dL2ad9) (cdddar . dL2ad8) (cddadr . dL2ad7) (cddaar . dL2ad6) (cdaddr . dL2ad5) (cdadar . dL2ad4) (cdaadr . dL2ad3) (cdaaar . dL2ad2) (cadddr . dL2ad1) (caddar . dL2ad0) (cadadr . dL2acf) (cadaar . dL2ace) (caaddr . dL2acd) (caadar . dL2acc) (caaadr . dL2acb) (caaaar . dL2aca) (cdddr . dL2ac9) (cddar . dL2ac8) (cdadr . dL2ac7) (cdaar . dL2ac6) (caddr . dL2ac5) (cadar . dL2ac4) (caadr . dL2ac3) (caaar . dL2ac2) (cddr . dL2ac1) (cdar . dL2ac0) (cadr . dL2abf) (caar . dL2abe) (cdr . dL2abd) (car . dL2abc) (boolean? . dL2abb) (boolean=? . dL2aba) (atan . dL2ab9) (assertion-violation . dL2ab8) (asin . dL2ab7) (apply . dL2ab6) (append . dL2ab5) (angle . dL2ab4) (acos . dL2ab3) (abs . dL2ab2) (/ . dL2ab1) (* . dL2ab0) (- . dL2aaf) (+ . dL2aae) (>= . dL2aad) (> . dL2aac) (= . dL2aab) (<= . dL2aaa) (< . dL2aa9) (&no-nans . dL2aa7) (&no-infinities . dL2aa6) (&i/o-encoding . dL2aa5) (&i/o-decoding . dL2aa4) (&i/o-port . dL2aa3) (&i/o-file-does-not-exist . dL2aa2) (&i/o-file-already-exists . dL2aa1) (&i/o-file-is-read-only . dL2aa0) (&i/o-file-protection . dL2a9f) (&i/o-filename . dL2a9e) (&i/o-invalid-position . dL2a9d) (&i/o-write . dL2a9c) (&i/o-read . dL2a9b) (&i/o . dL2a9a) (&undefined . dL2a99) (&syntax . dL2a98) (&lexical . dL2a97) (&implementation-restriction . dL2a96) (&non-continuable . dL2a95) (&who . dL2a94) (&irritants . dL2a93) (&assertion . dL2a92) (&violation . dL2a91) (&error . dL2a90) (&serious . dL2a8f) (&warning . dL2a8e) (&message . dL2a8d) (&condition . dL2a8c) (define-condition-type . dL2a8b) (define-enumeration . dL2a8a) (define-record-type . dL2a89) (parent-rtd . dL2a88) (nongenerative . dL2a87) (opaque . dL2a86) (sealed . dL2a85) (protocol . dL2a84) (parent . dL2a83) (immutable . dL2a82) (mutable . dL2a81) (fields . dL2a80) (error-handling-mode . dL2a7f) (file-options . dL2a7e) (buffer-mode . dL2a7d) (eol-style . dL2a7c) (guard . dL2a7b) (unsyntax-splicing . dL2a78) (unsyntax . dL2a77) (unquote-splicing . dL2a76) (unquote . dL2a75) (_ . dL2a74) (else . dL2a73) (=> . dL2a72) (... . dL2a71) (assert . dL2a70) (endianness . dL2a6f) (do . dL2a6c) (cond . dL2a6b) (let* . dL2a6a) (let*-values . dL2a69) (let-values . dL2a68) (identifier-syntax . dL2a67) (with-syntax . dL2a66) (quasisyntax . dL2a65) (quasiquote . dL2a64) (syntax-rules . dL2a63) (record-constructor-descriptor . dL2a60) (record-type-descriptor . dL2a5f) (case . dL2a5e) (unless . dL2a5c) (when . dL2a5b) (or . dL2a5a) (and . dL2a59) (if . dL2a58) (let . dL2a57) (letrec* . dL2a56) (letrec . dL2a55) (case-lambda . dL2a53) (lambda . dL2a52) (syntax . dL2a51) (syntax-case . dL2a50) (quote . dL2a4f) (letrec-syntax . dL2a4d) (let-syntax . dL2a4c) (set! . dL2a4b) (begin . dL2a49) (define-syntax . dL2a47) (define . dL2a46)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2dec '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . dLe33) (quotient . dL2c4f) (null-environment . dLe31) (remainder . dL2c4e) (modulo . dL2c4d) (inexact->exact . dL2c4c) (force . dL2c4b) (exact->inexact . dL2c4a) (make-promise . dL2c49) (delay . dL2a6e)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2ded '(rnrs control) '(6) '() '() '() '((do . dL2a6c) (unless . dL2a5c) (when . dL2a5b) (case-lambda . dL2a53)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2dee '(rnrs eval) '(6) '() '() '() '((eval . dLe37) (environment . dLe2f)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2def '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . dL2c45) (set-car! . dL2c44)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2df0 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . dL2c47) (string-set! . dL2c46)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2df1 '(rnrs programs) '(6) '() '() '() '((exit . dL2c48) (command-line . dL28da)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2df2 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . dLba2) (identifier? . dLe59) (generate-temporaries . dLe45) (free-identifier=? . dLe47) (syntax->datum . dLe5d) (datum->syntax . dLe5b) (bound-identifier=? . dLe49) (syntax-violation . dLe57) (unsyntax-splicing . dL2a78) (unsyntax . dL2a77) (_ . dL2a74) (... . dL2a71) (with-syntax . dL2a66) (quasisyntax . dL2a65) (syntax . dL2a51) (syntax-case . dL2a50)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2df3 '(rnrs files) '(6) '() '() '() '((delete-file . dL2cd4) (file-exists? . dL2cd3) (make-i/o-write-error . dL2c81) (make-i/o-read-error . dL2c80) (make-i/o-port-error . dL2c7f) (make-i/o-invalid-position-error . dL2c7e) (make-i/o-filename-error . dL2c7d) (make-i/o-file-protection-error . dL2c7c) (make-i/o-file-is-read-only-error . dL2c7b) (make-i/o-file-does-not-exist-error . dL2c7a) (make-i/o-file-already-exists-error . dL2c79) (make-i/o-error . dL2c78) (i/o-write-error? . dL2c6c) (i/o-read-error? . dL2c6b) (i/o-port-error? . dL2c6a) (i/o-invalid-position-error? . dL2c69) (i/o-filename-error? . dL2c68) (i/o-file-protection-error? . dL2c67) (i/o-file-is-read-only-error? . dL2c66) (i/o-file-does-not-exist-error? . dL2c65) (i/o-file-already-exists-error? . dL2c64) (i/o-error? . dL2c63) (i/o-error-position . dL2c62) (i/o-error-port . dL2c61) (i/o-error-filename . dL2c60) (&i/o-port . dL2aa3) (&i/o-file-does-not-exist . dL2aa2) (&i/o-file-already-exists . dL2aa1) (&i/o-file-is-read-only . dL2aa0) (&i/o-file-protection . dL2a9f) (&i/o-filename . dL2a9e) (&i/o-invalid-position . dL2a9d) (&i/o-write . dL2a9c) (&i/o-read . dL2a9b) (&i/o . dL2a9a)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2df4 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . dL2cd2) (vector-sort . dL2cd1) (list-sort . dL2cd0)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2df5 '(rnrs base) '(6) '() '() '() '((zero? . dL2b4a) (vector? . dL2b49) (vector-set! . dL2b48) (vector-ref . dL2b47) (vector-map . dL2b46) (vector-length . dL2b45) (vector-for-each . dL2b44) (vector-fill! . dL2b43) (vector->list . dL2b42) (vector . dL2b41) (values . dL2b40) (truncate . dL2b3f) (tan . dL2b3e) (symbol? . dL2b3d) (symbol=? . dL2b3c) (symbol->string . dL2b3b) (substring . dL2b3a) (string? . dL2b39) (string>? . dL2b38) (string>=? . dL2b37) (string=? . dL2b36) (string<? . dL2b35) (string<=? . dL2b34) (string-ref . dL2b33) (string-length . dL2b32) (string-for-each . dL2b31) (string-copy . dL2b30) (string-append . dL2b2f) (string->symbol . dL2b2e) (string->number . dL2b2d) (string->list . dL2b2c) (string . dL2b2b) (sqrt . dL2b2a) (sin . dL2b29) (round . dL2b28) (reverse . dL2b27) (real? . dL2b26) (real-valued? . dL2b25) (real-part . dL2b24) (rationalize . dL2b23) (rational? . dL2b22) (rational-valued? . dL2b21) (procedure? . dL2b20) (positive? . dL2b1f) (pair? . dL2b1e) (odd? . dL2b1d) (numerator . dL2b1c) (number? . dL2b1b) (number->string . dL2b1a) (null? . dL2b19) (not . dL2b18) (negative? . dL2b17) (nan? . dL2b16) (min . dL2b15) (max . dL2b14) (map . dL2b13) (make-vector . dL2b12) (make-string . dL2b11) (make-rectangular . dL2b10) (make-polar . dL2b0f) (magnitude . dL2b0e) (log . dL2b0d) (list? . dL2b0c) (list-tail . dL2b0b) (list-ref . dL2b0a) (list->vector . dL2b09) (list->string . dL2b08) (list . dL2b07) (length . dL2b06) (lcm . dL2b05) (integer? . dL2b04) (integer-valued? . dL2b03) (integer->char . dL2b02) (infinite? . dL2b01) (inexact? . dL2b00) (inexact . dL2aff) (imag-part . dL2afe) (gcd . dL2afd) (for-each . dL2afc) (floor . dL2afb) (finite? . dL2afa) (expt . dL2af9) (exp . dL2af8) (exact? . dL2af7) (exact-integer-sqrt . dL2af6) (exact . dL2af5) (even? . dL2af4) (error . dL2af3) (eqv? . dL2af2) (equal? . dL2af1) (eq? . dL2af0) (dynamic-wind . dL2aef) (div0-and-mod0 . dL2aee) (mod0 . dL2aed) (div0 . dL2aec) (div-and-mod . dL2aeb) (mod . dL2aea) (div . dL2ae9) (denominator . dL2ae8) (cos . dL2ae7) (cons . dL2ae6) (complex? . dL2ae5) (char? . dL2ae4) (char>? . dL2ae3) (char>=? . dL2ae2) (char=? . dL2ae1) (char<? . dL2ae0) (char<=? . dL2adf) (char->integer . dL2ade) (ceiling . dL2add) (call-with-values . dL2adc) (call/cc . dL2adb) (call-with-current-continuation . dL2ada) (cddddr . dL2ad9) (cdddar . dL2ad8) (cddadr . dL2ad7) (cddaar . dL2ad6) (cdaddr . dL2ad5) (cdadar . dL2ad4) (cdaadr . dL2ad3) (cdaaar . dL2ad2) (cadddr . dL2ad1) (caddar . dL2ad0) (cadadr . dL2acf) (cadaar . dL2ace) (caaddr . dL2acd) (caadar . dL2acc) (caaadr . dL2acb) (caaaar . dL2aca) (cdddr . dL2ac9) (cddar . dL2ac8) (cdadr . dL2ac7) (cdaar . dL2ac6) (caddr . dL2ac5) (cadar . dL2ac4) (caadr . dL2ac3) (caaar . dL2ac2) (cddr . dL2ac1) (cdar . dL2ac0) (cadr . dL2abf) (caar . dL2abe) (cdr . dL2abd) (car . dL2abc) (boolean? . dL2abb) (boolean=? . dL2aba) (atan . dL2ab9) (assertion-violation . dL2ab8) (asin . dL2ab7) (apply . dL2ab6) (append . dL2ab5) (angle . dL2ab4) (acos . dL2ab3) (abs . dL2ab2) (/ . dL2ab1) (* . dL2ab0) (- . dL2aaf) (+ . dL2aae) (>= . dL2aad) (> . dL2aac) (= . dL2aab) (<= . dL2aaa) (< . dL2aa9) (unquote-splicing . dL2a76) (unquote . dL2a75) (_ . dL2a74) (else . dL2a73) (=> . dL2a72) (... . dL2a71) (assert . dL2a70) (cond . dL2a6b) (let* . dL2a6a) (let*-values . dL2a69) (let-values . dL2a68) (identifier-syntax . dL2a67) (quasiquote . dL2a64) (syntax-rules . dL2a63) (case . dL2a5e) (or . dL2a5a) (and . dL2a59) (if . dL2a58) (let . dL2a57) (letrec* . dL2a56) (letrec . dL2a55) (lambda . dL2a52) (quote . dL2a4f) (letrec-syntax . dL2a4d) (let-syntax . dL2a4c) (set! . dL2a4b) (begin . dL2a49) (define-syntax . dL2a47) (define . dL2a46)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2df6 '(rnrs lists) '(6) '() '() '() '((remove . dL2c43) (remv . dL2c42) (remp . dL2c41) (remq . dL2c40) (partition . dL2c3f) (memv . dL2c3e) (memq . dL2c3d) (memp . dL2c3c) (member . dL2c3b) (exists . dL2c3a) (for-all . dL2c39) (fold-right . dL2c38) (fold-left . dL2c37) (find . dL2c36) (filter . dL2c35) (cons* . dL2c34) (assv . dL2c33) (assq . dL2c32) (assp . dL2c31) (assoc . dL2c30)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2df7 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . dL2cba) (call-with-input-file . dL2cb9) (write-char . dL2cb8) (write . dL2cb7) (with-output-to-file . dL2cb6) (with-input-from-file . dL2cb5) (read-char . dL2cb4) (read . dL2cb3) (peek-char . dL2cb2) (open-output-file . dL2cb1) (open-input-file . dL2cb0) (newline . dL2caf) (display . dL2cae) (close-output-port . dL2cad) (close-input-port . dL2cac) (eof-object? . dL2cab) (eof-object . dL2caa) (current-error-port . dL2ca9) (current-output-port . dL2ca8) (current-input-port . dL2ca7) (output-port? . dL2ca6) (input-port? . dL2ca5) (make-i/o-write-error . dL2c81) (make-i/o-read-error . dL2c80) (make-i/o-port-error . dL2c7f) (make-i/o-invalid-position-error . dL2c7e) (make-i/o-filename-error . dL2c7d) (make-i/o-file-protection-error . dL2c7c) (make-i/o-file-is-read-only-error . dL2c7b) (make-i/o-file-does-not-exist-error . dL2c7a) (make-i/o-file-already-exists-error . dL2c79) (make-i/o-error . dL2c78) (i/o-write-error? . dL2c6c) (i/o-read-error? . dL2c6b) (i/o-port-error? . dL2c6a) (i/o-invalid-position-error? . dL2c69) (i/o-filename-error? . dL2c68) (i/o-file-protection-error? . dL2c67) (i/o-file-is-read-only-error? . dL2c66) (i/o-file-does-not-exist-error? . dL2c65) (i/o-file-already-exists-error? . dL2c64) (i/o-error? . dL2c63) (i/o-error-position . dL2c62) (i/o-error-port . dL2c61) (i/o-error-filename . dL2c60) (&i/o-port . dL2aa3) (&i/o-file-does-not-exist . dL2aa2) (&i/o-file-already-exists . dL2aa1) (&i/o-file-is-read-only . dL2aa0) (&i/o-file-protection . dL2a9f) (&i/o-filename . dL2a9e) (&i/o-invalid-position . dL2a9d) (&i/o-write . dL2a9c) (&i/o-read . dL2a9b) (&i/o . dL2a9a)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2df8 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . dL2c6f) (utf32->string . dL2bf5) (utf16->string . dL2bf4) (utf8->string . dL2bf3) (uint-list->bytevector . dL2bf2) (u8-list->bytevector . dL2bf1) (string->utf8 . dL2bf0) (string->utf32 . dL2bef) (string->utf16 . dL2bee) (sint-list->bytevector . dL2bed) (native-endianness . dL2bec) (bytevector? . dL2beb) (bytevector=? . dL2bea) (bytevector-uint-set! . dL2be9) (bytevector-uint-ref . dL2be8) (bytevector-u8-set! . dL2be7) (bytevector-u8-ref . dL2be6) (bytevector-u64-set! . dL2be5) (bytevector-u64-ref . dL2be4) (bytevector-u64-native-set! . dL2be3) (bytevector-u64-native-ref . dL2be2) (bytevector-u32-set! . dL2be1) (bytevector-u32-ref . dL2be0) (bytevector-u32-native-set! . dL2bdf) (bytevector-u32-native-ref . dL2bde) (bytevector-u16-set! . dL2bdd) (bytevector-u16-ref . dL2bdc) (bytevector-u16-native-set! . dL2bdb) (bytevector-u16-native-ref . dL2bda) (bytevector-sint-set! . dL2bd9) (bytevector-sint-ref . dL2bd8) (bytevector-s8-set! . dL2bd7) (bytevector-s8-ref . dL2bd6) (bytevector-s64-set! . dL2bd5) (bytevector-s64-ref . dL2bd4) (bytevector-s64-native-set! . dL2bd3) (bytevector-s64-native-ref . dL2bd2) (bytevector-s32-set! . dL2bd1) (bytevector-s32-ref . dL2bd0) (bytevector-s32-native-set! . dL2bcf) (bytevector-s32-native-ref . dL2bce) (bytevector-s16-set! . dL2bcd) (bytevector-s16-ref . dL2bcc) (bytevector-s16-native-set! . dL2bcb) (bytevector-s16-native-ref . dL2bca) (bytevector-length . dL2bc9) (bytevector-ieee-single-ref . dL2bc8) (bytevector-ieee-single-set! . dL2bc7) (bytevector-ieee-single-native-set! . dL2bc6) (bytevector-ieee-single-native-ref . dL2bc5) (bytevector-ieee-double-set! . dL2bc4) (bytevector-ieee-double-ref . dL2bc3) (bytevector-ieee-double-native-set! . dL2bc2) (bytevector-ieee-double-native-ref . dL2bc1) (bytevector-fill! . dL2bc0) (bytevector-copy! . dL2bbf) (bytevector-copy . dL2bbe) (bytevector->uint-list . dL2bbd) (bytevector->u8-list . dL2bbc) (bytevector->sint-list . dL2bbb) (endianness . dL2a6f)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2df9 '(rnrs unicode) '(6) '() '() '() '((string-upcase . dL2d02) (string-titlecase . dL2d01) (string-normalize-nfkd . dL2d00) (string-normalize-nfkc . dL2cff) (string-normalize-nfd . dL2cfe) (string-normalize-nfc . dL2cfd) (string-foldcase . dL2cfc) (string-downcase . dL2cfb) (string-ci>? . dL2cfa) (string-ci>=? . dL2cf9) (string-ci=? . dL2cf8) (string-ci<? . dL2cf7) (string-ci<=? . dL2cf6) (char-whitespace? . dL2cf5) (char-upper-case? . dL2cf4) (char-title-case? . dL2cf3) (char-numeric? . dL2cf2) (char-lower-case? . dL2cf1) (char-general-category . dL2cf0) (char-upcase . dL2cef) (char-titlecase . dL2cee) (char-foldcase . dL2ced) (char-downcase . dL2cec) (char-ci>? . dL2ceb) (char-ci>=? . dL2cea) (char-ci=? . dL2ce9) (char-ci<? . dL2ce8) (char-ci<=? . dL2ce7) (char-alphabetic? . dL2ce6)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2dfa '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . dL2c29) (raise-continuable . dL2c28) (raise . dL2c27) (guard . dL2a7b) (else . dL2a73) (=> . dL2a72)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2dfb '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . dL2b5b) (bitwise-reverse-bit-field . dL2b5a) (bitwise-length . dL2b59) (bitwise-if . dL2b58) (bitwise-first-bit-set . dL2b57) (bitwise-copy-bit-field . dL2b56) (bitwise-copy-bit . dL2b55) (bitwise-bit-set? . dL2b54) (bitwise-bit-field . dL2b53) (bitwise-bit-count . dL2b52) (bitwise-xor . dL2b51) (bitwise-ior . dL2b50) (bitwise-and . dL2b4f) (bitwise-not . dL2b4e) (bitwise-arithmetic-shift-right . dL2b4d) (bitwise-arithmetic-shift-left . dL2b4c) (bitwise-arithmetic-shift . dL2b4b)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2dfc '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . dL2b88) (fxxor . dL2b87) (fxrotate-bit-field . dL2b86) (fxreverse-bit-field . dL2b85) (fxpositive? . dL2b84) (fxodd? . dL2b83) (fxnot . dL2b82) (fxnegative? . dL2b81) (fxmod0 . dL2b80) (fxmod . dL2b7f) (fxmin . dL2b7e) (fxmax . dL2b7d) (fxlength . dL2b7c) (fxior . dL2b7b) (fxif . dL2b7a) (fxfirst-bit-set . dL2b79) (fxeven? . dL2b78) (fxdiv0-and-mod0 . dL2b77) (fxdiv0 . dL2b76) (fxdiv-and-mod . dL2b75) (fxdiv . dL2b74) (fxcopy-bit-field . dL2b73) (fxcopy-bit . dL2b72) (fxbit-set? . dL2b71) (fxbit-field . dL2b70) (fxbit-count . dL2b6f) (fxarithmetic-shift-right . dL2b6e) (fxarithmetic-shift-left . dL2b6d) (fxarithmetic-shift . dL2b6c) (fxand . dL2b6b) (fx>? . dL2b6a) (fx>=? . dL2b69) (fx=? . dL2b68) (fx<? . dL2b67) (fx<=? . dL2b66) (fx-/carry . dL2b65) (fx- . dL2b64) (fx+/carry . dL2b63) (fx+ . dL2b62) (fx*/carry . dL2b61) (fx* . dL2b60) (greatest-fixnum . dL2b5f) (least-fixnum . dL2b5e) (fixnum-width . dL2b5d) (fixnum? . dL2b5c)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2dfd '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . dL2bba) (no-infinities-violation? . dL2bb9) (make-no-nans-violation . dL2bb8) (make-no-infinities-violation . dL2bb7) (real->flonum . dL2bb6) (flzero? . dL2bb5) (fltruncate . dL2bb4) (fltan . dL2bb3) (flsqrt . dL2bb2) (flsin . dL2bb1) (flround . dL2bb0) (flpositive? . dL2baf) (flonum? . dL2bae) (flodd? . dL2bad) (flnumerator . dL2bac) (flnegative? . dL2bab) (flnan? . dL2baa) (flmod0 . dL2ba9) (flmod . dL2ba8) (flmin . dL2ba7) (flmax . dL2ba6) (fllog . dL2ba5) (flinteger? . dL2ba4) (flinfinite? . dL2ba3) (flfloor . dL2ba2) (flfinite? . dL2ba1) (flexpt . dL2ba0) (flexp . dL2b9f) (fleven? . dL2b9e) (fldiv0-and-mod0 . dL2b9d) (fldiv0 . dL2b9c) (fldiv-and-mod . dL2b9b) (fldiv . dL2b9a) (fldenominator . dL2b99) (flcos . dL2b98) (flceiling . dL2b97) (flatan . dL2b96) (flasin . dL2b95) (flacos . dL2b94) (flabs . dL2b93) (fl>? . dL2b92) (fl>=? . dL2b91) (fl=? . dL2b90) (fl<? . dL2b8f) (fl<=? . dL2b8e) (fl/ . dL2b8d) (fl- . dL2b8c) (fl+ . dL2b8b) (fl* . dL2b8a) (fixnum->flonum . dL2b89) (&no-nans . dL2aa7) (&no-infinities . dL2aa6)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2dfe '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . dL2ccf) (string-ci-hash . dL2cce) (string-hash . dL2ccd) (equal-hash . dL2ccc) (hashtable-equivalence-function . dL2ccb) (make-hashtable . dL2cca) (hashtable-hash-function . dL2cc9) (make-eqv-hashtable . dL2cc8) (make-eq-hashtable . dL2cc7) (hashtable? . dL2cc6) (hashtable-update! . dL2cc5) (hashtable-size . dL2cc4) (hashtable-set! . dL2cc3) (hashtable-ref . dL2cc2) (hashtable-mutable? . dL2cc1) (hashtable-keys . dL2cc0) (hashtable-entries . dL2cbf) (hashtable-delete! . dL2cbe) (hashtable-copy . dL2cbd) (hashtable-contains? . dL2cbc) (hashtable-clear! . dL2cbb)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2dff '(rnrs io ports) '(6) '() '() '() '((eof-object? . dL2cab) (eof-object . dL2caa) (current-error-port . dL2ca9) (current-output-port . dL2ca8) (current-input-port . dL2ca7) (output-port? . dL2ca6) (input-port? . dL2ca5) (utf-8-codec . dL2ca4) (utf-16-codec . dL2ca3) (transcoder-error-handling-mode . dL2ca2) (transcoder-eol-style . dL2ca1) (transcoder-codec . dL2ca0) (transcoded-port . dL2c9f) (textual-port? . dL2c9e) (string->bytevector . dL2c9d) (standard-output-port . dL2c9c) (standard-input-port . dL2c9b) (standard-error-port . dL2c9a) (set-port-position! . dL2c99) (put-u8 . dL2c98) (put-string . dL2c97) (put-datum . dL2c96) (put-char . dL2c95) (put-bytevector . dL2c94) (port? . dL2c93) (port-transcoder . dL2c92) (port-position . dL2c91) (port-has-set-port-position!? . dL2c90) (port-has-port-position? . dL2c8f) (port-eof? . dL2c8e) (output-port-buffer-mode . dL2c8d) (open-string-output-port . dL2c8c) (open-string-input-port . dL2c8b) (open-file-output-port . dL2c8a) (open-file-input/output-port . dL2c89) (open-file-input-port . dL2c88) (open-bytevector-output-port . dL2c87) (open-bytevector-input-port . dL2c86) (native-transcoder . dL2c85) (native-eol-style . dL2c84) (make-transcoder . dL2c83) (latin-1-codec . dL2c82) (make-i/o-write-error . dL2c81) (make-i/o-read-error . dL2c80) (make-i/o-port-error . dL2c7f) (make-i/o-invalid-position-error . dL2c7e) (make-i/o-filename-error . dL2c7d) (make-i/o-file-protection-error . dL2c7c) (make-i/o-file-is-read-only-error . dL2c7b) (make-i/o-file-does-not-exist-error . dL2c7a) (make-i/o-file-already-exists-error . dL2c79) (make-i/o-error . dL2c78) (make-i/o-encoding-error . dL2c77) (make-i/o-decoding-error . dL2c76) (make-custom-textual-output-port . dL2c75) (make-custom-textual-input/output-port . dL2c74) (make-custom-textual-input-port . dL2c73) (make-custom-binary-output-port . dL2c72) (make-custom-binary-input/output-port . dL2c71) (make-custom-binary-input-port . dL2c70) (lookahead-u8 . dL2c6e) (lookahead-char . dL2c6d) (i/o-write-error? . dL2c6c) (i/o-read-error? . dL2c6b) (i/o-port-error? . dL2c6a) (i/o-invalid-position-error? . dL2c69) (i/o-filename-error? . dL2c68) (i/o-file-protection-error? . dL2c67) (i/o-file-is-read-only-error? . dL2c66) (i/o-file-does-not-exist-error? . dL2c65) (i/o-file-already-exists-error? . dL2c64) (i/o-error? . dL2c63) (i/o-error-position . dL2c62) (i/o-error-port . dL2c61) (i/o-error-filename . dL2c60) (i/o-encoding-error? . dL2c5f) (i/o-encoding-error-char . dL2c5e) (i/o-decoding-error? . dL2c5d) (get-u8 . dL2c5c) (get-string-n! . dL2c5b) (get-string-n . dL2c5a) (get-string-all . dL2c59) (get-line . dL2c58) (get-datum . dL2c57) (get-char . dL2c56) (get-bytevector-some . dL2c55) (get-bytevector-n! . dL2c54) (get-bytevector-n . dL2c53) (get-bytevector-all . dL2c52) (flush-output-port . dL2c51) (close-port . dL2c50) (call-with-string-output-port . dL2c2f) (call-with-port . dL2c2e) (call-with-bytevector-output-port . dL2c2d) (bytevector->string . dL2c2c) (buffer-mode? . dL2c2b) (binary-port? . dL2c2a) (&i/o-encoding . dL2aa5) (&i/o-decoding . dL2aa4) (&i/o-port . dL2aa3) (&i/o-file-does-not-exist . dL2aa2) (&i/o-file-already-exists . dL2aa1) (&i/o-file-is-read-only . dL2aa0) (&i/o-file-protection . dL2a9f) (&i/o-filename . dL2a9e) (&i/o-invalid-position . dL2a9d) (&i/o-write . dL2a9c) (&i/o-read . dL2a9b) (&i/o . dL2a9a) (error-handling-mode . dL2a7f) (file-options . dL2a7e) (buffer-mode . dL2a7d) (eol-style . dL2a7c)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2e00 '(rnrs enums) '(6) '() '() '() '((make-enumeration . dL2c26) (enum-set=? . dL2c25) (enum-set-universe . dL2c24) (enum-set-union . dL2c23) (enum-set-subset? . dL2c22) (enum-set-projection . dL2c21) (enum-set-member? . dL2c20) (enum-set-intersection . dL2c1f) (enum-set-indexer . dL2c1e) (enum-set-difference . dL2c1d) (enum-set-constructor . dL2c1c) (enum-set-complement . dL2c1b) (enum-set->list . dL2c1a) (define-enumeration . dL2a8a)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2e01 '(rnrs conditions) '(6) '() '() '() '((who-condition? . dL2c19) (warning? . dL2c18) (violation? . dL2c17) (undefined-violation? . dL2c16) (syntax-violation? . dL2c15) (syntax-violation-subform . dL2c14) (syntax-violation-form . dL2c13) (syntax-violation . dLe57) (simple-conditions . dL2c12) (serious-condition? . dL2c11) (non-continuable-violation? . dL2c10) (message-condition? . dL2c0f) (make-who-condition . dL2c0e) (make-warning . dL2c0d) (make-violation . dL2c0c) (make-undefined-violation . dL2c0b) (make-syntax-violation . dL2c0a) (make-serious-condition . dL2c09) (make-non-continuable-violation . dL2c08) (make-message-condition . dL2c07) (make-lexical-violation . dL2c06) (make-irritants-condition . dL2c05) (make-implementation-restriction-violation . dL2c04) (make-error . dL2c03) (make-assertion-violation . dL2c02) (lexical-violation? . dL2c01) (irritants-condition? . dL2c00) (implementation-restriction-violation? . dL2bff) (error? . dL2bfe) (condition-who . dL2bfd) (condition-predicate . dL2bfc) (condition-message . dL2bfb) (condition-irritants . dL2bfa) (condition-accessor . dL2bf9) (condition . dL2bf8) (assertion-violation? . dL2bf7) (condition? . dL2bf6) (&undefined . dL2a99) (&syntax . dL2a98) (&lexical . dL2a97) (&implementation-restriction . dL2a96) (&non-continuable . dL2a95) (&who . dL2a94) (&irritants . dL2a93) (&assertion . dL2a92) (&violation . dL2a91) (&error . dL2a90) (&serious . dL2a8f) (&warning . dL2a8e) (&message . dL2a8d) (&condition . dL2a8c) (define-condition-type . dL2a8b)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2e02 '(rnrs records inspection) '(6) '() '() '() '((record? . dL2cde) (record-type-uid . dL2cdd) (record-type-sealed? . dL2cdc) (record-type-parent . dL2cdb) (record-type-opaque? . dL2cda) (record-type-name . dL2cd9) (record-type-generative? . dL2cd8) (record-type-field-names . dL2cd7) (record-rtd . dL2cd6) (record-field-mutable? . dL2cd5)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2e03 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . dL2ce5) (record-predicate . dL2ce4) (record-mutator . dL2ce3) (record-constructor . dL2ce2) (record-accessor . dL2ce1) (make-record-type-descriptor . dL2ce0) (make-record-constructor-descriptor . dL2cdf)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2e04 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . dL2a89) (parent-rtd . dL2a88) (nongenerative . dL2a87) (opaque . dL2a86) (sealed . dL2a85) (protocol . dL2a84) (parent . dL2a83) (immutable . dL2a82) (mutable . dL2a81) (fields . dL2a80) (record-constructor-descriptor . dL2a60) (record-type-descriptor . dL2a5f)) '() values values '#f '#f '#t '#f) (dL98b@dL7d7@install-library 'dL2e05 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . dL2de5) (&no-nans-rtd . dL2de4) (&no-infinities-rcd . dL2de3) (&no-infinities-rtd . dL2de2) (&i/o-encoding-rcd . dL2de1) (&i/o-encoding-rtd . dL2de0) (&i/o-decoding-rcd . dL2ddf) (&i/o-decoding-rtd . dL2dde) (&i/o-port-rcd . dL2ddd) (&i/o-port-rtd . dL2ddc) (&i/o-file-does-not-exist-rcd . dL2ddb) (&i/o-file-does-not-exist-rtd . dL2dda) (&i/o-file-already-exists-rcd . dL2dd9) (&i/o-file-already-exists-rtd . dL2dd8) (&i/o-file-is-read-only-rcd . dL2dd7) (&i/o-file-is-read-only-rtd . dL2dd6) (&i/o-file-protection-rcd . dL2dd5) (&i/o-file-protection-rtd . dL2dd4) (&i/o-filename-rcd . dL2dd3) (&i/o-filename-rtd . dL2dd2) (&i/o-invalid-position-rcd . dL2dd1) (&i/o-invalid-position-rtd . dL2dd0) (&i/o-write-rcd . dL2dcf) (&i/o-write-rtd . dL2dce) (&i/o-read-rcd . dL2dcd) (&i/o-read-rtd . dL2dcc) (&i/o-rcd . dL2dcb) (&i/o-rtd . dL2dca) (&undefined-rcd . dL2dc9) (&undefined-rtd . dL2dc8) (&syntax-rcd . dL2dc7) (&syntax-rtd . dL2dc6) (&lexical-rcd . dL2dc5) (&lexical-rtd . dL2dc4) (&implementation-restriction-rcd . dL2dc3) (&implementation-restriction-rtd . dL2dc2) (&non-continuable-rcd . dL2dc1) (&non-continuable-rtd . dL2dc0) (&who-rcd . dL2dbf) (&who-rtd . dL2dbe) (&irritants-rcd . dL2dbd) (&irritants-rtd . dL2dbc) (&assertion-rcd . dL2dbb) (&assertion-rtd . dL2dba) (&violation-rcd . dL2db9) (&violation-rtd . dL2db8) (&error-rcd . dL2db7) (&error-rtd . dL2db6) (&serious-rcd . dL2db5) (&serious-rtd . dL2db4) (&warning-rcd . dL2db3) (&warning-rtd . dL2db2) (&message-rcd . dL2db1) (&message-rtd . dL2db0) (&condition-rcd . dL2daf) (&condition-rtd . dL2dae) (syntax-error . dLe53) (syntax-dispatch . dLd77) (pretty-print . dL2dad) (eval-core . dL2dac) (set-symbol-value! . dL2dab) (symbol-value . dL2daa) (gensym . dL2da9) (void . dL2da8) (load . dL28e0) (interaction-environment . dLe65) (char-ready? . dL2da7) (regexp? . dL2da6) (read-line . dL2da5) (gensym-prefix-set! . dL2da4) (ungensym . dL2da3) (alist->eq-hash-table . dL2da2) (assoc-ref . dL2da1) (print . dL2da0) (format . dL2d9f) (host-os . dL2d9e) (library-path . dL7b6) (standard-library-path . dL2d9d) (file-newer? . dL2d9c) (stat-mtime . dL2d9b) (write-to-file . dL2d9a) (file->list . dL2d99) (file->string . dL2d98) (digit->integer . dL2d97) (call-with-string-input-port . dL2d96) (call-with-string-io . dL2d95) (string-split . dL2d94) (bytevector-for-each . dL2d93) (string->regexp . dL2d92) (rxmatch . dL2d91) (regexp-replace-all . dL2d90) (hashtable-for-each . dL2d8f) (mosh-cache-dir . dL5a0) (call-process . dL2d8e) (local-tz-offset . dL2d8d) (microseconds . dL2d8c) (directory-list . dL2d8b) (set-current-directory! . dL2d8a) (expand-path . dL2d89) (current-directory . dL2d88) (%spawn . dL2d87) (%waitpid . dL2d86) (simple-struct-name . dL2d85) (simple-struct-set! . dL2d84) (simple-struct-ref . dL2d83) (make-simple-struct . dL2d82) (simple-struct? . dL2d81) (pointer-ref-c-int64 . dL2d80) (pointer-ref-c-int32 . dL2d7f) (pointer-ref-c-int16 . dL2d7e) (pointer-ref-c-int8 . dL2d7d) (pointer-ref-c-uint64 . dL2d7c) (pointer-ref-c-uint32 . dL2d7b) (pointer-ref-c-uint16 . dL2d7a) (pointer-ref-c-uint8 . dL2d79) (pointer-set-c-uint64! . dL2d78) (pointer-set-c-uint32! . dL2d77) (pointer-set-c-uint16! . dL2d76) (pointer-set-c-uint8! . dL2d75) (pointer-set-c-int64! . dL2d74) (pointer-set-c-int32! . dL2d73) (pointer-set-c-int16! . dL2d72) (pointer-set-c-int8! . dL2d71) (pointer-set-c-pointer! . dL2d70) (pointer-set-c-double! . dL2d6f) (pointer-set-c-float! . dL2d6e) (pointer-set-c-long-long! . dL2d6d) (pointer-set-c-long! . dL2d6c) (pointer-set-c-int! . dL2d6b) (pointer-set-c-short! . dL2d6a) (pointer-set-c-char! . dL2d69) (pointer-ref-c-pointer . dL2d68) (pointer-ref-c-double . dL2d67) (pointer-ref-c-float . dL2d66) (pointer-ref-c-unsigned-long-long . dL2d65) (pointer-ref-c-signed-long-long . dL2d64) (pointer-ref-c-unsigned-long . dL2d63) (pointer-ref-c-signed-long . dL2d62) (pointer-ref-c-unsigned-int . dL2d61) (pointer-ref-c-signed-int . dL2d60) (pointer-ref-c-unsigned-short . dL2d5f) (pointer-ref-c-signed-short . dL2d5e) (pointer-ref-c-unsigned-char . dL2d5d) (pointer-ref-c-signed-char . dL2d5c) (pointer->integer . dL2d5b) (integer->pointer . dL2d5a) (pointer? . dL2d59) (shared-errno . dL2d58) (%ffi-free-c-callback-trampoline . dL2d57) (%ffi-make-c-callback-trampoline . dL2d56) (%ffi-free . dL2d55) (%ffi-malloc . dL2d54) (%ffi-supported? . dL2d53) (%ffi-pointer->string . dL2d52) (%ffi-call . dL2d51) (%ffi-lookup . dL2d50) (%ffi-open . dL2d4f) (null-terminated-utf8->string . dL2d4e) (null-terminated-bytevector->string . dL2d4d) (%exec . dL2d4c) (%fork . dL2d4b) (%pipe . dL2d4a) (p . dL2d49) (open-output-string . dL2d48) (get-output-string . dL2d47) (file-stat-ctime . dL2d46) (file-stat-atime . dL2d45) (file-stat-mtime . dL2d44) (file-size-in-bytes . dL2d43) (file-writable? . dL2d42) (file-executable? . dL2d41) (file-readable? . dL2d40) (file-regular? . dL2d3f) (file-symbolic-link? . dL2d3e) (file-directory? . dL2d3d) (create-symbolic-link . dL2d3c) (rename-file . dL2d3b) (delete-directory . dL2d3a) (create-directory . dL2d39) (create-mosh-cache-dir . dL2d38) (get-environment-variables . dL2d37) (current-exception-handler . dL2d36) (get-environment-variable . dL2d35) (join-wraps . dL2d34) (id->real-label . dL2d33) (same-marks? . dL2d32) (same-marks*? . dL2d31) (get-timeofday . dL2d30) (get-command-line . dL2d2f) (sys-display . dL2d2e) (whereis . dL2d2d) (register . dL2d2c) (vm-join! . dL2d2b) (vm-set-value! . dL2d2a) (vm? . dL2d29) (main-vm? . dL2d28) (vm-eval . dL2d27) (vm-self . dL2d26) (vm-start! . dL2d25) (make-vm . dL2d24) (mutex-try-lock! . dL2d23) (mutex-unlock! . dL2d22) (mutex-lock! . dL2d21) (mutex? . dL2d20) (make-mutex . dL2d1f) (condition-variable-notify-all! . dL2d1e) (condition-variable-notify! . dL2d1d) (condition-variable-wait! . dL2d1c) (make-condition-variable . dL2d1b) (write/ss . dL2d1a) (mosh-executable-path . dL2d19) (make-file-options . dL2d18) (source-info . dL2d17) (make-compiler-instruction . dL2d16) (make-instruction . dL2d15) (set-source-info! . dL2d14) (bignum? . dL2d13) (fast-equal? . dL2d12) (fasl-read . dL2d11) (fasl-write . dL2d10) (time-usage . dL2d0f) (os-constant . dL2d0e) (disasm . dL2d0d) (make-parameter . dL59e) (socket-port . dL2d0c) (socket-shutdown . dL2d0b) (socket-close . dL2d0a) (socket-send . dL2d09) (socket-recv! . dL2d08) (socket-recv . dL2d07) (make-server-socket . dL2d06) (make-client-socket . dL2d05) (socket-accept . dL2d04) (socket? . dL2d03) (string-upcase . dL2d02) (string-titlecase . dL2d01) (string-normalize-nfkd . dL2d00) (string-normalize-nfkc . dL2cff) (string-normalize-nfd . dL2cfe) (string-normalize-nfc . dL2cfd) (string-foldcase . dL2cfc) (string-downcase . dL2cfb) (string-ci>? . dL2cfa) (string-ci>=? . dL2cf9) (string-ci=? . dL2cf8) (string-ci<? . dL2cf7) (string-ci<=? . dL2cf6) (char-whitespace? . dL2cf5) (char-upper-case? . dL2cf4) (char-title-case? . dL2cf3) (char-numeric? . dL2cf2) (char-lower-case? . dL2cf1) (char-general-category . dL2cf0) (char-upcase . dL2cef) (char-titlecase . dL2cee) (char-foldcase . dL2ced) (char-downcase . dL2cec) (char-ci>? . dL2ceb) (char-ci>=? . dL2cea) (char-ci=? . dL2ce9) (char-ci<? . dL2ce8) (char-ci<=? . dL2ce7) (char-alphabetic? . dL2ce6) (make-variable-transformer . dLba2) (identifier? . dLe59) (generate-temporaries . dLe45) (free-identifier=? . dLe47) (syntax->datum . dLe5d) (datum->syntax . dLe5b) (bound-identifier=? . dLe49) (record-type-descriptor? . dL2ce5) (record-predicate . dL2ce4) (record-mutator . dL2ce3) (record-constructor . dL2ce2) (record-accessor . dL2ce1) (make-record-type-descriptor . dL2ce0) (make-record-constructor-descriptor . dL2cdf) (record? . dL2cde) (record-type-uid . dL2cdd) (record-type-sealed? . dL2cdc) (record-type-parent . dL2cdb) (record-type-opaque? . dL2cda) (record-type-name . dL2cd9) (record-type-generative? . dL2cd8) (record-type-field-names . dL2cd7) (record-rtd . dL2cd6) (record-field-mutable? . dL2cd5) (delete-file . dL2cd4) (file-exists? . dL2cd3) (vector-sort! . dL2cd2) (vector-sort . dL2cd1) (list-sort . dL2cd0) (symbol-hash . dL2ccf) (string-ci-hash . dL2cce) (string-hash . dL2ccd) (equal-hash . dL2ccc) (hashtable-equivalence-function . dL2ccb) (make-hashtable . dL2cca) (hashtable-hash-function . dL2cc9) (make-eqv-hashtable . dL2cc8) (make-eq-hashtable . dL2cc7) (hashtable? . dL2cc6) (hashtable-update! . dL2cc5) (hashtable-size . dL2cc4) (hashtable-set! . dL2cc3) (hashtable-ref . dL2cc2) (hashtable-mutable? . dL2cc1) (hashtable-keys . dL2cc0) (hashtable-entries . dL2cbf) (hashtable-delete! . dL2cbe) (hashtable-copy . dL2cbd) (hashtable-contains? . dL2cbc) (hashtable-clear! . dL2cbb) (call-with-output-file . dL2cba) (call-with-input-file . dL2cb9) (write-char . dL2cb8) (write . dL2cb7) (with-output-to-file . dL2cb6) (with-input-from-file . dL2cb5) (read-char . dL2cb4) (read . dL2cb3) (peek-char . dL2cb2) (open-output-file . dL2cb1) (open-input-file . dL2cb0) (newline . dL2caf) (display . dL2cae) (close-output-port . dL2cad) (close-input-port . dL2cac) (eof-object? . dL2cab) (eof-object . dL2caa) (current-error-port . dL2ca9) (current-output-port . dL2ca8) (current-input-port . dL2ca7) (output-port? . dL2ca6) (input-port? . dL2ca5) (utf-8-codec . dL2ca4) (utf-16-codec . dL2ca3) (transcoder-error-handling-mode . dL2ca2) (transcoder-eol-style . dL2ca1) (transcoder-codec . dL2ca0) (transcoded-port . dL2c9f) (textual-port? . dL2c9e) (string->bytevector . dL2c9d) (standard-output-port . dL2c9c) (standard-input-port . dL2c9b) (standard-error-port . dL2c9a) (set-port-position! . dL2c99) (put-u8 . dL2c98) (put-string . dL2c97) (put-datum . dL2c96) (put-char . dL2c95) (put-bytevector . dL2c94) (port? . dL2c93) (port-transcoder . dL2c92) (port-position . dL2c91) (port-has-set-port-position!? . dL2c90) (port-has-port-position? . dL2c8f) (port-eof? . dL2c8e) (output-port-buffer-mode . dL2c8d) (open-string-output-port . dL2c8c) (open-string-input-port . dL2c8b) (open-file-output-port . dL2c8a) (open-file-input/output-port . dL2c89) (open-file-input-port . dL2c88) (open-bytevector-output-port . dL2c87) (open-bytevector-input-port . dL2c86) (native-transcoder . dL2c85) (native-eol-style . dL2c84) (make-transcoder . dL2c83) (latin-1-codec . dL2c82) (make-i/o-write-error . dL2c81) (make-i/o-read-error . dL2c80) (make-i/o-port-error . dL2c7f) (make-i/o-invalid-position-error . dL2c7e) (make-i/o-filename-error . dL2c7d) (make-i/o-file-protection-error . dL2c7c) (make-i/o-file-is-read-only-error . dL2c7b) (make-i/o-file-does-not-exist-error . dL2c7a) (make-i/o-file-already-exists-error . dL2c79) (make-i/o-error . dL2c78) (make-i/o-encoding-error . dL2c77) (make-i/o-decoding-error . dL2c76) (make-custom-textual-output-port . dL2c75) (make-custom-textual-input/output-port . dL2c74) (make-custom-textual-input-port . dL2c73) (make-custom-binary-output-port . dL2c72) (make-custom-binary-input/output-port . dL2c71) (make-custom-binary-input-port . dL2c70) (make-bytevector . dL2c6f) (lookahead-u8 . dL2c6e) (lookahead-char . dL2c6d) (i/o-write-error? . dL2c6c) (i/o-read-error? . dL2c6b) (i/o-port-error? . dL2c6a) (i/o-invalid-position-error? . dL2c69) (i/o-filename-error? . dL2c68) (i/o-file-protection-error? . dL2c67) (i/o-file-is-read-only-error? . dL2c66) (i/o-file-does-not-exist-error? . dL2c65) (i/o-file-already-exists-error? . dL2c64) (i/o-error? . dL2c63) (i/o-error-position . dL2c62) (i/o-error-port . dL2c61) (i/o-error-filename . dL2c60) (i/o-encoding-error? . dL2c5f) (i/o-encoding-error-char . dL2c5e) (i/o-decoding-error? . dL2c5d) (get-u8 . dL2c5c) (get-string-n! . dL2c5b) (get-string-n . dL2c5a) (get-string-all . dL2c59) (get-line . dL2c58) (get-datum . dL2c57) (get-char . dL2c56) (get-bytevector-some . dL2c55) (get-bytevector-n! . dL2c54) (get-bytevector-n . dL2c53) (get-bytevector-all . dL2c52) (flush-output-port . dL2c51) (close-port . dL2c50) (scheme-report-environment . dLe33) (quotient . dL2c4f) (null-environment . dLe31) (remainder . dL2c4e) (modulo . dL2c4d) (inexact->exact . dL2c4c) (force . dL2c4b) (exact->inexact . dL2c4a) (make-promise . dL2c49) (exit . dL2c48) (command-line . dL28da) (string-fill! . dL2c47) (string-set! . dL2c46) (set-cdr! . dL2c45) (set-car! . dL2c44) (remove . dL2c43) (remv . dL2c42) (remp . dL2c41) (remq . dL2c40) (partition . dL2c3f) (memv . dL2c3e) (memq . dL2c3d) (memp . dL2c3c) (member . dL2c3b) (exists . dL2c3a) (for-all . dL2c39) (fold-right . dL2c38) (fold-left . dL2c37) (find . dL2c36) (filter . dL2c35) (cons* . dL2c34) (assv . dL2c33) (assq . dL2c32) (assp . dL2c31) (assoc . dL2c30) (call-with-string-output-port . dL2c2f) (call-with-port . dL2c2e) (call-with-bytevector-output-port . dL2c2d) (bytevector->string . dL2c2c) (buffer-mode? . dL2c2b) (binary-port? . dL2c2a) (with-exception-handler . dL2c29) (raise-continuable . dL2c28) (raise . dL2c27) (eval . dLe37) (environment . dLe2f) (make-enumeration . dL2c26) (enum-set=? . dL2c25) (enum-set-universe . dL2c24) (enum-set-union . dL2c23) (enum-set-subset? . dL2c22) (enum-set-projection . dL2c21) (enum-set-member? . dL2c20) (enum-set-intersection . dL2c1f) (enum-set-indexer . dL2c1e) (enum-set-difference . dL2c1d) (enum-set-constructor . dL2c1c) (enum-set-complement . dL2c1b) (enum-set->list . dL2c1a) (who-condition? . dL2c19) (warning? . dL2c18) (violation? . dL2c17) (undefined-violation? . dL2c16) (syntax-violation? . dL2c15) (syntax-violation-subform . dL2c14) (syntax-violation-form . dL2c13) (syntax-violation . dLe57) (simple-conditions . dL2c12) (serious-condition? . dL2c11) (non-continuable-violation? . dL2c10) (message-condition? . dL2c0f) (make-who-condition . dL2c0e) (make-warning . dL2c0d) (make-violation . dL2c0c) (make-undefined-violation . dL2c0b) (make-syntax-violation . dL2c0a) (make-serious-condition . dL2c09) (make-non-continuable-violation . dL2c08) (make-message-condition . dL2c07) (make-lexical-violation . dL2c06) (make-irritants-condition . dL2c05) (make-implementation-restriction-violation . dL2c04) (make-error . dL2c03) (make-assertion-violation . dL2c02) (lexical-violation? . dL2c01) (irritants-condition? . dL2c00) (implementation-restriction-violation? . dL2bff) (error? . dL2bfe) (condition-who . dL2bfd) (condition-predicate . dL2bfc) (condition-message . dL2bfb) (condition-irritants . dL2bfa) (condition-accessor . dL2bf9) (condition . dL2bf8) (assertion-violation? . dL2bf7) (condition? . dL2bf6) (utf32->string . dL2bf5) (utf16->string . dL2bf4) (utf8->string . dL2bf3) (uint-list->bytevector . dL2bf2) (u8-list->bytevector . dL2bf1) (string->utf8 . dL2bf0) (string->utf32 . dL2bef) (string->utf16 . dL2bee) (sint-list->bytevector . dL2bed) (native-endianness . dL2bec) (bytevector? . dL2beb) (bytevector=? . dL2bea) (bytevector-uint-set! . dL2be9) (bytevector-uint-ref . dL2be8) (bytevector-u8-set! . dL2be7) (bytevector-u8-ref . dL2be6) (bytevector-u64-set! . dL2be5) (bytevector-u64-ref . dL2be4) (bytevector-u64-native-set! . dL2be3) (bytevector-u64-native-ref . dL2be2) (bytevector-u32-set! . dL2be1) (bytevector-u32-ref . dL2be0) (bytevector-u32-native-set! . dL2bdf) (bytevector-u32-native-ref . dL2bde) (bytevector-u16-set! . dL2bdd) (bytevector-u16-ref . dL2bdc) (bytevector-u16-native-set! . dL2bdb) (bytevector-u16-native-ref . dL2bda) (bytevector-sint-set! . dL2bd9) (bytevector-sint-ref . dL2bd8) (bytevector-s8-set! . dL2bd7) (bytevector-s8-ref . dL2bd6) (bytevector-s64-set! . dL2bd5) (bytevector-s64-ref . dL2bd4) (bytevector-s64-native-set! . dL2bd3) (bytevector-s64-native-ref . dL2bd2) (bytevector-s32-set! . dL2bd1) (bytevector-s32-ref . dL2bd0) (bytevector-s32-native-set! . dL2bcf) (bytevector-s32-native-ref . dL2bce) (bytevector-s16-set! . dL2bcd) (bytevector-s16-ref . dL2bcc) (bytevector-s16-native-set! . dL2bcb) (bytevector-s16-native-ref . dL2bca) (bytevector-length . dL2bc9) (bytevector-ieee-single-ref . dL2bc8) (bytevector-ieee-single-set! . dL2bc7) (bytevector-ieee-single-native-set! . dL2bc6) (bytevector-ieee-single-native-ref . dL2bc5) (bytevector-ieee-double-set! . dL2bc4) (bytevector-ieee-double-ref . dL2bc3) (bytevector-ieee-double-native-set! . dL2bc2) (bytevector-ieee-double-native-ref . dL2bc1) (bytevector-fill! . dL2bc0) (bytevector-copy! . dL2bbf) (bytevector-copy . dL2bbe) (bytevector->uint-list . dL2bbd) (bytevector->u8-list . dL2bbc) (bytevector->sint-list . dL2bbb) (no-nans-violation? . dL2bba) (no-infinities-violation? . dL2bb9) (make-no-nans-violation . dL2bb8) (make-no-infinities-violation . dL2bb7) (real->flonum . dL2bb6) (flzero? . dL2bb5) (fltruncate . dL2bb4) (fltan . dL2bb3) (flsqrt . dL2bb2) (flsin . dL2bb1) (flround . dL2bb0) (flpositive? . dL2baf) (flonum? . dL2bae) (flodd? . dL2bad) (flnumerator . dL2bac) (flnegative? . dL2bab) (flnan? . dL2baa) (flmod0 . dL2ba9) (flmod . dL2ba8) (flmin . dL2ba7) (flmax . dL2ba6) (fllog . dL2ba5) (flinteger? . dL2ba4) (flinfinite? . dL2ba3) (flfloor . dL2ba2) (flfinite? . dL2ba1) (flexpt . dL2ba0) (flexp . dL2b9f) (fleven? . dL2b9e) (fldiv0-and-mod0 . dL2b9d) (fldiv0 . dL2b9c) (fldiv-and-mod . dL2b9b) (fldiv . dL2b9a) (fldenominator . dL2b99) (flcos . dL2b98) (flceiling . dL2b97) (flatan . dL2b96) (flasin . dL2b95) (flacos . dL2b94) (flabs . dL2b93) (fl>? . dL2b92) (fl>=? . dL2b91) (fl=? . dL2b90) (fl<? . dL2b8f) (fl<=? . dL2b8e) (fl/ . dL2b8d) (fl- . dL2b8c) (fl+ . dL2b8b) (fl* . dL2b8a) (fixnum->flonum . dL2b89) (fxzero? . dL2b88) (fxxor . dL2b87) (fxrotate-bit-field . dL2b86) (fxreverse-bit-field . dL2b85) (fxpositive? . dL2b84) (fxodd? . dL2b83) (fxnot . dL2b82) (fxnegative? . dL2b81) (fxmod0 . dL2b80) (fxmod . dL2b7f) (fxmin . dL2b7e) (fxmax . dL2b7d) (fxlength . dL2b7c) (fxior . dL2b7b) (fxif . dL2b7a) (fxfirst-bit-set . dL2b79) (fxeven? . dL2b78) (fxdiv0-and-mod0 . dL2b77) (fxdiv0 . dL2b76) (fxdiv-and-mod . dL2b75) (fxdiv . dL2b74) (fxcopy-bit-field . dL2b73) (fxcopy-bit . dL2b72) (fxbit-set? . dL2b71) (fxbit-field . dL2b70) (fxbit-count . dL2b6f) (fxarithmetic-shift-right . dL2b6e) (fxarithmetic-shift-left . dL2b6d) (fxarithmetic-shift . dL2b6c) (fxand . dL2b6b) (fx>? . dL2b6a) (fx>=? . dL2b69) (fx=? . dL2b68) (fx<? . dL2b67) (fx<=? . dL2b66) (fx-/carry . dL2b65) (fx- . dL2b64) (fx+/carry . dL2b63) (fx+ . dL2b62) (fx*/carry . dL2b61) (fx* . dL2b60) (greatest-fixnum . dL2b5f) (least-fixnum . dL2b5e) (fixnum-width . dL2b5d) (fixnum? . dL2b5c) (bitwise-rotate-bit-field . dL2b5b) (bitwise-reverse-bit-field . dL2b5a) (bitwise-length . dL2b59) (bitwise-if . dL2b58) (bitwise-first-bit-set . dL2b57) (bitwise-copy-bit-field . dL2b56) (bitwise-copy-bit . dL2b55) (bitwise-bit-set? . dL2b54) (bitwise-bit-field . dL2b53) (bitwise-bit-count . dL2b52) (bitwise-xor . dL2b51) (bitwise-ior . dL2b50) (bitwise-and . dL2b4f) (bitwise-not . dL2b4e) (bitwise-arithmetic-shift-right . dL2b4d) (bitwise-arithmetic-shift-left . dL2b4c) (bitwise-arithmetic-shift . dL2b4b) (zero? . dL2b4a) (vector? . dL2b49) (vector-set! . dL2b48) (vector-ref . dL2b47) (vector-map . dL2b46) (vector-length . dL2b45) (vector-for-each . dL2b44) (vector-fill! . dL2b43) (vector->list . dL2b42) (vector . dL2b41) (values . dL2b40) (truncate . dL2b3f) (tan . dL2b3e) (symbol? . dL2b3d) (symbol=? . dL2b3c) (symbol->string . dL2b3b) (substring . dL2b3a) (string? . dL2b39) (string>? . dL2b38) (string>=? . dL2b37) (string=? . dL2b36) (string<? . dL2b35) (string<=? . dL2b34) (string-ref . dL2b33) (string-length . dL2b32) (string-for-each . dL2b31) (string-copy . dL2b30) (string-append . dL2b2f) (string->symbol . dL2b2e) (string->number . dL2b2d) (string->list . dL2b2c) (string . dL2b2b) (sqrt . dL2b2a) (sin . dL2b29) (round . dL2b28) (reverse . dL2b27) (real? . dL2b26) (real-valued? . dL2b25) (real-part . dL2b24) (rationalize . dL2b23) (rational? . dL2b22) (rational-valued? . dL2b21) (procedure? . dL2b20) (positive? . dL2b1f) (pair? . dL2b1e) (odd? . dL2b1d) (numerator . dL2b1c) (number? . dL2b1b) (number->string . dL2b1a) (null? . dL2b19) (not . dL2b18) (negative? . dL2b17) (nan? . dL2b16) (min . dL2b15) (max . dL2b14) (map . dL2b13) (make-vector . dL2b12) (make-string . dL2b11) (make-rectangular . dL2b10) (make-polar . dL2b0f) (magnitude . dL2b0e) (log . dL2b0d) (list? . dL2b0c) (list-tail . dL2b0b) (list-ref . dL2b0a) (list->vector . dL2b09) (list->string . dL2b08) (list . dL2b07) (length . dL2b06) (lcm . dL2b05) (integer? . dL2b04) (integer-valued? . dL2b03) (integer->char . dL2b02) (infinite? . dL2b01) (inexact? . dL2b00) (inexact . dL2aff) (imag-part . dL2afe) (gcd . dL2afd) (for-each . dL2afc) (floor . dL2afb) (finite? . dL2afa) (expt . dL2af9) (exp . dL2af8) (exact? . dL2af7) (exact-integer-sqrt . dL2af6) (exact . dL2af5) (even? . dL2af4) (error . dL2af3) (eqv? . dL2af2) (equal? . dL2af1) (eq? . dL2af0) (dynamic-wind . dL2aef) (div0-and-mod0 . dL2aee) (mod0 . dL2aed) (div0 . dL2aec) (div-and-mod . dL2aeb) (mod . dL2aea) (div . dL2ae9) (denominator . dL2ae8) (cos . dL2ae7) (cons . dL2ae6) (complex? . dL2ae5) (char? . dL2ae4) (char>? . dL2ae3) (char>=? . dL2ae2) (char=? . dL2ae1) (char<? . dL2ae0) (char<=? . dL2adf) (char->integer . dL2ade) (ceiling . dL2add) (call-with-values . dL2adc) (call/cc . dL2adb) (call-with-current-continuation . dL2ada) (cddddr . dL2ad9) (cdddar . dL2ad8) (cddadr . dL2ad7) (cddaar . dL2ad6) (cdaddr . dL2ad5) (cdadar . dL2ad4) (cdaadr . dL2ad3) (cdaaar . dL2ad2) (cadddr . dL2ad1) (caddar . dL2ad0) (cadadr . dL2acf) (cadaar . dL2ace) (caaddr . dL2acd) (caadar . dL2acc) (caaadr . dL2acb) (caaaar . dL2aca) (cdddr . dL2ac9) (cddar . dL2ac8) (cdadr . dL2ac7) (cdaar . dL2ac6) (caddr . dL2ac5) (cadar . dL2ac4) (caadr . dL2ac3) (caaar . dL2ac2) (cddr . dL2ac1) (cdar . dL2ac0) (cadr . dL2abf) (caar . dL2abe) (cdr . dL2abd) (car . dL2abc) (boolean? . dL2abb) (boolean=? . dL2aba) (atan . dL2ab9) (assertion-violation . dL2ab8) (assertion-error . dLe51) (asin . dL2ab7) (apply . dL2ab6) (append . dL2ab5) (angle . dL2ab4) (acos . dL2ab3) (abs . dL2ab2) (/ . dL2ab1) (* . dL2ab0) (- . dL2aaf) (+ . dL2aae) (>= . dL2aad) (> . dL2aac) (= . dL2aab) (<= . dL2aaa) (< . dL2aa9) (library . dL2aa8) (&no-nans . dL2aa7) (&no-infinities . dL2aa6) (&i/o-encoding . dL2aa5) (&i/o-decoding . dL2aa4) (&i/o-port . dL2aa3) (&i/o-file-does-not-exist . dL2aa2) (&i/o-file-already-exists . dL2aa1) (&i/o-file-is-read-only . dL2aa0) (&i/o-file-protection . dL2a9f) (&i/o-filename . dL2a9e) (&i/o-invalid-position . dL2a9d) (&i/o-write . dL2a9c) (&i/o-read . dL2a9b) (&i/o . dL2a9a) (&undefined . dL2a99) (&syntax . dL2a98) (&lexical . dL2a97) (&implementation-restriction . dL2a96) (&non-continuable . dL2a95) (&who . dL2a94) (&irritants . dL2a93) (&assertion . dL2a92) (&violation . dL2a91) (&error . dL2a90) (&serious . dL2a8f) (&warning . dL2a8e) (&message . dL2a8d) (&condition . dL2a8c) (define-condition-type . dL2a8b) (define-enumeration . dL2a8a) (define-record-type . dL2a89) (parent-rtd . dL2a88) (nongenerative . dL2a87) (opaque . dL2a86) (sealed . dL2a85) (protocol . dL2a84) (parent . dL2a83) (immutable . dL2a82) (mutable . dL2a81) (fields . dL2a80) (error-handling-mode . dL2a7f) (file-options . dL2a7e) (buffer-mode . dL2a7d) (eol-style . dL2a7c) (guard . dL2a7b) (trace-define . dL2a7a) (trace-lambda . dL2a79) (unsyntax-splicing . dL2a78) (unsyntax . dL2a77) (unquote-splicing . dL2a76) (unquote . dL2a75) (_ . dL2a74) (else . dL2a73) (=> . dL2a72) (... . dL2a71) (assert . dL2a70) (endianness . dL2a6f) (delay . dL2a6e) (time . dL2a6d) (do . dL2a6c) (cond . dL2a6b) (let* . dL2a6a) (let*-values . dL2a69) (let-values . dL2a68) (identifier-syntax . dL2a67) (with-syntax . dL2a66) (quasisyntax . dL2a65) (quasiquote . dL2a64) (syntax-rules . dL2a63) (include . dL2a62) (define-struct . dL2a61) (record-constructor-descriptor . dL2a60) (record-type-descriptor . dL2a5f) (case . dL2a5e) (parameterize . dL2a5d) (unless . dL2a5c) (when . dL2a5b) (or . dL2a5a) (and . dL2a59) (if . dL2a58) (let . dL2a57) (letrec* . dL2a56) (letrec . dL2a55) (type-descriptor . dL2a54) (case-lambda . dL2a53) (lambda . dL2a52) (syntax . dL2a51) (syntax-case . dL2a50) (quote . dL2a4f) (foreign-call . dL2a4e) (letrec-syntax . dL2a4d) (let-syntax . dL2a4c) (set! . dL2a4b) (import . dL2a4a) (begin . dL2a49) (module . dL2a48) (define-syntax . dL2a47) (define . dL2a46)) '((dL2de5 core-prim . &no-nans-rcd) (dL2de4 core-prim . &no-nans-rtd) (dL2de3 core-prim . &no-infinities-rcd) (dL2de2 core-prim . &no-infinities-rtd) (dL2de1 core-prim . &i/o-encoding-rcd) (dL2de0 core-prim . &i/o-encoding-rtd) (dL2ddf core-prim . &i/o-decoding-rcd) (dL2dde core-prim . &i/o-decoding-rtd) (dL2ddd core-prim . &i/o-port-rcd) (dL2ddc core-prim . &i/o-port-rtd) (dL2ddb core-prim . &i/o-file-does-not-exist-rcd) (dL2dda core-prim . &i/o-file-does-not-exist-rtd) (dL2dd9 core-prim . &i/o-file-already-exists-rcd) (dL2dd8 core-prim . &i/o-file-already-exists-rtd) (dL2dd7 core-prim . &i/o-file-is-read-only-rcd) (dL2dd6 core-prim . &i/o-file-is-read-only-rtd) (dL2dd5 core-prim . &i/o-file-protection-rcd) (dL2dd4 core-prim . &i/o-file-protection-rtd) (dL2dd3 core-prim . &i/o-filename-rcd) (dL2dd2 core-prim . &i/o-filename-rtd) (dL2dd1 core-prim . &i/o-invalid-position-rcd) (dL2dd0 core-prim . &i/o-invalid-position-rtd) (dL2dcf core-prim . &i/o-write-rcd) (dL2dce core-prim . &i/o-write-rtd) (dL2dcd core-prim . &i/o-read-rcd) (dL2dcc core-prim . &i/o-read-rtd) (dL2dcb core-prim . &i/o-rcd) (dL2dca core-prim . &i/o-rtd) (dL2dc9 core-prim . &undefined-rcd) (dL2dc8 core-prim . &undefined-rtd) (dL2dc7 core-prim . &syntax-rcd) (dL2dc6 core-prim . &syntax-rtd) (dL2dc5 core-prim . &lexical-rcd) (dL2dc4 core-prim . &lexical-rtd) (dL2dc3 core-prim . &implementation-restriction-rcd) (dL2dc2 core-prim . &implementation-restriction-rtd) (dL2dc1 core-prim . &non-continuable-rcd) (dL2dc0 core-prim . &non-continuable-rtd) (dL2dbf core-prim . &who-rcd) (dL2dbe core-prim . &who-rtd) (dL2dbd core-prim . &irritants-rcd) (dL2dbc core-prim . &irritants-rtd) (dL2dbb core-prim . &assertion-rcd) (dL2dba core-prim . &assertion-rtd) (dL2db9 core-prim . &violation-rcd) (dL2db8 core-prim . &violation-rtd) (dL2db7 core-prim . &error-rcd) (dL2db6 core-prim . &error-rtd) (dL2db5 core-prim . &serious-rcd) (dL2db4 core-prim . &serious-rtd) (dL2db3 core-prim . &warning-rcd) (dL2db2 core-prim . &warning-rtd) (dL2db1 core-prim . &message-rcd) (dL2db0 core-prim . &message-rtd) (dL2daf core-prim . &condition-rcd) (dL2dae core-prim . &condition-rtd) (dLe53 core-prim . syntax-error) (dLd77 core-prim . syntax-dispatch) (dL2dad core-prim . pretty-print) (dL2dac core-prim . eval-core) (dL2dab core-prim . set-symbol-value!) (dL2daa core-prim . symbol-value) (dL2da9 core-prim . gensym) (dL2da8 core-prim . void) (dL28e0 core-prim . load) (dLe65 core-prim . interaction-environment) (dL2da7 core-prim . char-ready?) (dL2da6 core-prim . regexp?) (dL2da5 core-prim . read-line) (dL2da4 core-prim . gensym-prefix-set!) (dL2da3 core-prim . ungensym) (dL2da2 core-prim . alist->eq-hash-table) (dL2da1 core-prim . assoc-ref) (dL2da0 core-prim . print) (dL2d9f core-prim . format) (dL2d9e core-prim . host-os) (dL7b6 core-prim . library-path) (dL2d9d core-prim . standard-library-path) (dL2d9c core-prim . file-newer?) (dL2d9b core-prim . stat-mtime) (dL2d9a core-prim . write-to-file) (dL2d99 core-prim . file->list) (dL2d98 core-prim . file->string) (dL2d97 core-prim . digit->integer) (dL2d96 core-prim . call-with-string-input-port) (dL2d95 core-prim . call-with-string-io) (dL2d94 core-prim . string-split) (dL2d93 core-prim . bytevector-for-each) (dL2d92 core-prim . string->regexp) (dL2d91 core-prim . rxmatch) (dL2d90 core-prim . regexp-replace-all) (dL2d8f core-prim . hashtable-for-each) (dL5a0 core-prim . mosh-cache-dir) (dL2d8e core-prim . call-process) (dL2d8d core-prim . local-tz-offset) (dL2d8c core-prim . microseconds) (dL2d8b core-prim . directory-list) (dL2d8a core-prim . set-current-directory!) (dL2d89 core-prim . expand-path) (dL2d88 core-prim . current-directory) (dL2d87 core-prim . %spawn) (dL2d86 core-prim . %waitpid) (dL2d85 core-prim . simple-struct-name) (dL2d84 core-prim . simple-struct-set!) (dL2d83 core-prim . simple-struct-ref) (dL2d82 core-prim . make-simple-struct) (dL2d81 core-prim . simple-struct?) (dL2d80 core-prim . pointer-ref-c-int64) (dL2d7f core-prim . pointer-ref-c-int32) (dL2d7e core-prim . pointer-ref-c-int16) (dL2d7d core-prim . pointer-ref-c-int8) (dL2d7c core-prim . pointer-ref-c-uint64) (dL2d7b core-prim . pointer-ref-c-uint32) (dL2d7a core-prim . pointer-ref-c-uint16) (dL2d79 core-prim . pointer-ref-c-uint8) (dL2d78 core-prim . pointer-set-c-uint64!) (dL2d77 core-prim . pointer-set-c-uint32!) (dL2d76 core-prim . pointer-set-c-uint16!) (dL2d75 core-prim . pointer-set-c-uint8!) (dL2d74 core-prim . pointer-set-c-int64!) (dL2d73 core-prim . pointer-set-c-int32!) (dL2d72 core-prim . pointer-set-c-int16!) (dL2d71 core-prim . pointer-set-c-int8!) (dL2d70 core-prim . pointer-set-c-pointer!) (dL2d6f core-prim . pointer-set-c-double!) (dL2d6e core-prim . pointer-set-c-float!) (dL2d6d core-prim . pointer-set-c-long-long!) (dL2d6c core-prim . pointer-set-c-long!) (dL2d6b core-prim . pointer-set-c-int!) (dL2d6a core-prim . pointer-set-c-short!) (dL2d69 core-prim . pointer-set-c-char!) (dL2d68 core-prim . pointer-ref-c-pointer) (dL2d67 core-prim . pointer-ref-c-double) (dL2d66 core-prim . pointer-ref-c-float) (dL2d65 core-prim . pointer-ref-c-unsigned-long-long) (dL2d64 core-prim . pointer-ref-c-signed-long-long) (dL2d63 core-prim . pointer-ref-c-unsigned-long) (dL2d62 core-prim . pointer-ref-c-signed-long) (dL2d61 core-prim . pointer-ref-c-unsigned-int) (dL2d60 core-prim . pointer-ref-c-signed-int) (dL2d5f core-prim . pointer-ref-c-unsigned-short) (dL2d5e core-prim . pointer-ref-c-signed-short) (dL2d5d core-prim . pointer-ref-c-unsigned-char) (dL2d5c core-prim . pointer-ref-c-signed-char) (dL2d5b core-prim . pointer->integer) (dL2d5a core-prim . integer->pointer) (dL2d59 core-prim . pointer?) (dL2d58 core-prim . shared-errno) (dL2d57 core-prim . %ffi-free-c-callback-trampoline) (dL2d56 core-prim . %ffi-make-c-callback-trampoline) (dL2d55 core-prim . %ffi-free) (dL2d54 core-prim . %ffi-malloc) (dL2d53 core-prim . %ffi-supported?) (dL2d52 core-prim . %ffi-pointer->string) (dL2d51 core-prim . %ffi-call) (dL2d50 core-prim . %ffi-lookup) (dL2d4f core-prim . %ffi-open) (dL2d4e core-prim . null-terminated-utf8->string) (dL2d4d core-prim . null-terminated-bytevector->string) (dL2d4c core-prim . %exec) (dL2d4b core-prim . %fork) (dL2d4a core-prim . %pipe) (dL2d49 core-prim . p) (dL2d48 core-prim . open-output-string) (dL2d47 core-prim . get-output-string) (dL2d46 core-prim . file-stat-ctime) (dL2d45 core-prim . file-stat-atime) (dL2d44 core-prim . file-stat-mtime) (dL2d43 core-prim . file-size-in-bytes) (dL2d42 core-prim . file-writable?) (dL2d41 core-prim . file-executable?) (dL2d40 core-prim . file-readable?) (dL2d3f core-prim . file-regular?) (dL2d3e core-prim . file-symbolic-link?) (dL2d3d core-prim . file-directory?) (dL2d3c core-prim . create-symbolic-link) (dL2d3b core-prim . rename-file) (dL2d3a core-prim . delete-directory) (dL2d39 core-prim . create-directory) (dL2d38 core-prim . create-mosh-cache-dir) (dL2d37 core-prim . get-environment-variables) (dL2d36 core-prim . current-exception-handler) (dL2d35 core-prim . get-environment-variable) (dL2d34 core-prim . join-wraps) (dL2d33 core-prim . id->real-label) (dL2d32 core-prim . same-marks?) (dL2d31 core-prim . same-marks*?) (dL2d30 core-prim . get-timeofday) (dL2d2f core-prim . get-command-line) (dL2d2e core-prim . sys-display) (dL2d2d core-prim . whereis) (dL2d2c core-prim . register) (dL2d2b core-prim . vm-join!) (dL2d2a core-prim . vm-set-value!) (dL2d29 core-prim . vm?) (dL2d28 core-prim . main-vm?) (dL2d27 core-prim . vm-eval) (dL2d26 core-prim . vm-self) (dL2d25 core-prim . vm-start!) (dL2d24 core-prim . make-vm) (dL2d23 core-prim . mutex-try-lock!) (dL2d22 core-prim . mutex-unlock!) (dL2d21 core-prim . mutex-lock!) (dL2d20 core-prim . mutex?) (dL2d1f core-prim . make-mutex) (dL2d1e core-prim . condition-variable-notify-all!) (dL2d1d core-prim . condition-variable-notify!) (dL2d1c core-prim . condition-variable-wait!) (dL2d1b core-prim . make-condition-variable) (dL2d1a core-prim . write/ss) (dL2d19 core-prim . mosh-executable-path) (dL2d18 core-prim . make-file-options) (dL2d17 core-prim . source-info) (dL2d16 core-prim . make-compiler-instruction) (dL2d15 core-prim . make-instruction) (dL2d14 core-prim . set-source-info!) (dL2d13 core-prim . bignum?) (dL2d12 core-prim . fast-equal?) (dL2d11 core-prim . fasl-read) (dL2d10 core-prim . fasl-write) (dL2d0f core-prim . time-usage) (dL2d0e core-prim . os-constant) (dL2d0d core-prim . disasm) (dL59e core-prim . make-parameter) (dL2d0c core-prim . socket-port) (dL2d0b core-prim . socket-shutdown) (dL2d0a core-prim . socket-close) (dL2d09 core-prim . socket-send) (dL2d08 core-prim . socket-recv!) (dL2d07 core-prim . socket-recv) (dL2d06 core-prim . make-server-socket) (dL2d05 core-prim . make-client-socket) (dL2d04 core-prim . socket-accept) (dL2d03 core-prim . socket?) (dL2d02 core-prim . string-upcase) (dL2d01 core-prim . string-titlecase) (dL2d00 core-prim . string-normalize-nfkd) (dL2cff core-prim . string-normalize-nfkc) (dL2cfe core-prim . string-normalize-nfd) (dL2cfd core-prim . string-normalize-nfc) (dL2cfc core-prim . string-foldcase) (dL2cfb core-prim . string-downcase) (dL2cfa core-prim . string-ci>?) (dL2cf9 core-prim . string-ci>=?) (dL2cf8 core-prim . string-ci=?) (dL2cf7 core-prim . string-ci<?) (dL2cf6 core-prim . string-ci<=?) (dL2cf5 core-prim . char-whitespace?) (dL2cf4 core-prim . char-upper-case?) (dL2cf3 core-prim . char-title-case?) (dL2cf2 core-prim . char-numeric?) (dL2cf1 core-prim . char-lower-case?) (dL2cf0 core-prim . char-general-category) (dL2cef core-prim . char-upcase) (dL2cee core-prim . char-titlecase) (dL2ced core-prim . char-foldcase) (dL2cec core-prim . char-downcase) (dL2ceb core-prim . char-ci>?) (dL2cea core-prim . char-ci>=?) (dL2ce9 core-prim . char-ci=?) (dL2ce8 core-prim . char-ci<?) (dL2ce7 core-prim . char-ci<=?) (dL2ce6 core-prim . char-alphabetic?) (dLba2 core-prim . make-variable-transformer) (dLe59 core-prim . identifier?) (dLe45 core-prim . generate-temporaries) (dLe47 core-prim . free-identifier=?) (dLe5d core-prim . syntax->datum) (dLe5b core-prim . datum->syntax) (dLe49 core-prim . bound-identifier=?) (dL2ce5 core-prim . record-type-descriptor?) (dL2ce4 core-prim . record-predicate) (dL2ce3 core-prim . record-mutator) (dL2ce2 core-prim . record-constructor) (dL2ce1 core-prim . record-accessor) (dL2ce0 core-prim . make-record-type-descriptor) (dL2cdf core-prim . make-record-constructor-descriptor) (dL2cde core-prim . record?) (dL2cdd core-prim . record-type-uid) (dL2cdc core-prim . record-type-sealed?) (dL2cdb core-prim . record-type-parent) (dL2cda core-prim . record-type-opaque?) (dL2cd9 core-prim . record-type-name) (dL2cd8 core-prim . record-type-generative?) (dL2cd7 core-prim . record-type-field-names) (dL2cd6 core-prim . record-rtd) (dL2cd5 core-prim . record-field-mutable?) (dL2cd4 core-prim . delete-file) (dL2cd3 core-prim . file-exists?) (dL2cd2 core-prim . vector-sort!) (dL2cd1 core-prim . vector-sort) (dL2cd0 core-prim . list-sort) (dL2ccf core-prim . symbol-hash) (dL2cce core-prim . string-ci-hash) (dL2ccd core-prim . string-hash) (dL2ccc core-prim . equal-hash) (dL2ccb core-prim . hashtable-equivalence-function) (dL2cca core-prim . make-hashtable) (dL2cc9 core-prim . hashtable-hash-function) (dL2cc8 core-prim . make-eqv-hashtable) (dL2cc7 core-prim . make-eq-hashtable) (dL2cc6 core-prim . hashtable?) (dL2cc5 core-prim . hashtable-update!) (dL2cc4 core-prim . hashtable-size) (dL2cc3 core-prim . hashtable-set!) (dL2cc2 core-prim . hashtable-ref) (dL2cc1 core-prim . hashtable-mutable?) (dL2cc0 core-prim . hashtable-keys) (dL2cbf core-prim . hashtable-entries) (dL2cbe core-prim . hashtable-delete!) (dL2cbd core-prim . hashtable-copy) (dL2cbc core-prim . hashtable-contains?) (dL2cbb core-prim . hashtable-clear!) (dL2cba core-prim . call-with-output-file) (dL2cb9 core-prim . call-with-input-file) (dL2cb8 core-prim . write-char) (dL2cb7 core-prim . write) (dL2cb6 core-prim . with-output-to-file) (dL2cb5 core-prim . with-input-from-file) (dL2cb4 core-prim . read-char) (dL2cb3 core-prim . read) (dL2cb2 core-prim . peek-char) (dL2cb1 core-prim . open-output-file) (dL2cb0 core-prim . open-input-file) (dL2caf core-prim . newline) (dL2cae core-prim . display) (dL2cad core-prim . close-output-port) (dL2cac core-prim . close-input-port) (dL2cab core-prim . eof-object?) (dL2caa core-prim . eof-object) (dL2ca9 core-prim . current-error-port) (dL2ca8 core-prim . current-output-port) (dL2ca7 core-prim . current-input-port) (dL2ca6 core-prim . output-port?) (dL2ca5 core-prim . input-port?) (dL2ca4 core-prim . utf-8-codec) (dL2ca3 core-prim . utf-16-codec) (dL2ca2 core-prim . transcoder-error-handling-mode) (dL2ca1 core-prim . transcoder-eol-style) (dL2ca0 core-prim . transcoder-codec) (dL2c9f core-prim . transcoded-port) (dL2c9e core-prim . textual-port?) (dL2c9d core-prim . string->bytevector) (dL2c9c core-prim . standard-output-port) (dL2c9b core-prim . standard-input-port) (dL2c9a core-prim . standard-error-port) (dL2c99 core-prim . set-port-position!) (dL2c98 core-prim . put-u8) (dL2c97 core-prim . put-string) (dL2c96 core-prim . put-datum) (dL2c95 core-prim . put-char) (dL2c94 core-prim . put-bytevector) (dL2c93 core-prim . port?) (dL2c92 core-prim . port-transcoder) (dL2c91 core-prim . port-position) (dL2c90 core-prim . port-has-set-port-position!?) (dL2c8f core-prim . port-has-port-position?) (dL2c8e core-prim . port-eof?) (dL2c8d core-prim . output-port-buffer-mode) (dL2c8c core-prim . open-string-output-port) (dL2c8b core-prim . open-string-input-port) (dL2c8a core-prim . open-file-output-port) (dL2c89 core-prim . open-file-input/output-port) (dL2c88 core-prim . open-file-input-port) (dL2c87 core-prim . open-bytevector-output-port) (dL2c86 core-prim . open-bytevector-input-port) (dL2c85 core-prim . native-transcoder) (dL2c84 core-prim . native-eol-style) (dL2c83 core-prim . make-transcoder) (dL2c82 core-prim . latin-1-codec) (dL2c81 core-prim . make-i/o-write-error) (dL2c80 core-prim . make-i/o-read-error) (dL2c7f core-prim . make-i/o-port-error) (dL2c7e core-prim . make-i/o-invalid-position-error) (dL2c7d core-prim . make-i/o-filename-error) (dL2c7c core-prim . make-i/o-file-protection-error) (dL2c7b core-prim . make-i/o-file-is-read-only-error) (dL2c7a core-prim . make-i/o-file-does-not-exist-error) (dL2c79 core-prim . make-i/o-file-already-exists-error) (dL2c78 core-prim . make-i/o-error) (dL2c77 core-prim . make-i/o-encoding-error) (dL2c76 core-prim . make-i/o-decoding-error) (dL2c75 core-prim . make-custom-textual-output-port) (dL2c74 core-prim . make-custom-textual-input/output-port) (dL2c73 core-prim . make-custom-textual-input-port) (dL2c72 core-prim . make-custom-binary-output-port) (dL2c71 core-prim . make-custom-binary-input/output-port) (dL2c70 core-prim . make-custom-binary-input-port) (dL2c6f core-prim . make-bytevector) (dL2c6e core-prim . lookahead-u8) (dL2c6d core-prim . lookahead-char) (dL2c6c core-prim . i/o-write-error?) (dL2c6b core-prim . i/o-read-error?) (dL2c6a core-prim . i/o-port-error?) (dL2c69 core-prim . i/o-invalid-position-error?) (dL2c68 core-prim . i/o-filename-error?) (dL2c67 core-prim . i/o-file-protection-error?) (dL2c66 core-prim . i/o-file-is-read-only-error?) (dL2c65 core-prim . i/o-file-does-not-exist-error?) (dL2c64 core-prim . i/o-file-already-exists-error?) (dL2c63 core-prim . i/o-error?) (dL2c62 core-prim . i/o-error-position) (dL2c61 core-prim . i/o-error-port) (dL2c60 core-prim . i/o-error-filename) (dL2c5f core-prim . i/o-encoding-error?) (dL2c5e core-prim . i/o-encoding-error-char) (dL2c5d core-prim . i/o-decoding-error?) (dL2c5c core-prim . get-u8) (dL2c5b core-prim . get-string-n!) (dL2c5a core-prim . get-string-n) (dL2c59 core-prim . get-string-all) (dL2c58 core-prim . get-line) (dL2c57 core-prim . get-datum) (dL2c56 core-prim . get-char) (dL2c55 core-prim . get-bytevector-some) (dL2c54 core-prim . get-bytevector-n!) (dL2c53 core-prim . get-bytevector-n) (dL2c52 core-prim . get-bytevector-all) (dL2c51 core-prim . flush-output-port) (dL2c50 core-prim . close-port) (dLe33 core-prim . scheme-report-environment) (dL2c4f core-prim . quotient) (dLe31 core-prim . null-environment) (dL2c4e core-prim . remainder) (dL2c4d core-prim . modulo) (dL2c4c core-prim . inexact->exact) (dL2c4b core-prim . force) (dL2c4a core-prim . exact->inexact) (dL2c49 core-prim . make-promise) (dL2c48 core-prim . exit) (dL28da core-prim . command-line) (dL2c47 core-prim . string-fill!) (dL2c46 core-prim . string-set!) (dL2c45 core-prim . set-cdr!) (dL2c44 core-prim . set-car!) (dL2c43 core-prim . remove) (dL2c42 core-prim . remv) (dL2c41 core-prim . remp) (dL2c40 core-prim . remq) (dL2c3f core-prim . partition) (dL2c3e core-prim . memv) (dL2c3d core-prim . memq) (dL2c3c core-prim . memp) (dL2c3b core-prim . member) (dL2c3a core-prim . exists) (dL2c39 core-prim . for-all) (dL2c38 core-prim . fold-right) (dL2c37 core-prim . fold-left) (dL2c36 core-prim . find) (dL2c35 core-prim . filter) (dL2c34 core-prim . cons*) (dL2c33 core-prim . assv) (dL2c32 core-prim . assq) (dL2c31 core-prim . assp) (dL2c30 core-prim . assoc) (dL2c2f core-prim . call-with-string-output-port) (dL2c2e core-prim . call-with-port) (dL2c2d core-prim . call-with-bytevector-output-port) (dL2c2c core-prim . bytevector->string) (dL2c2b core-prim . buffer-mode?) (dL2c2a core-prim . binary-port?) (dL2c29 core-prim . with-exception-handler) (dL2c28 core-prim . raise-continuable) (dL2c27 core-prim . raise) (dLe37 core-prim . eval) (dLe2f core-prim . environment) (dL2c26 core-prim . make-enumeration) (dL2c25 core-prim . enum-set=?) (dL2c24 core-prim . enum-set-universe) (dL2c23 core-prim . enum-set-union) (dL2c22 core-prim . enum-set-subset?) (dL2c21 core-prim . enum-set-projection) (dL2c20 core-prim . enum-set-member?) (dL2c1f core-prim . enum-set-intersection) (dL2c1e core-prim . enum-set-indexer) (dL2c1d core-prim . enum-set-difference) (dL2c1c core-prim . enum-set-constructor) (dL2c1b core-prim . enum-set-complement) (dL2c1a core-prim . enum-set->list) (dL2c19 core-prim . who-condition?) (dL2c18 core-prim . warning?) (dL2c17 core-prim . violation?) (dL2c16 core-prim . undefined-violation?) (dL2c15 core-prim . syntax-violation?) (dL2c14 core-prim . syntax-violation-subform) (dL2c13 core-prim . syntax-violation-form) (dLe57 core-prim . syntax-violation) (dL2c12 core-prim . simple-conditions) (dL2c11 core-prim . serious-condition?) (dL2c10 core-prim . non-continuable-violation?) (dL2c0f core-prim . message-condition?) (dL2c0e core-prim . make-who-condition) (dL2c0d core-prim . make-warning) (dL2c0c core-prim . make-violation) (dL2c0b core-prim . make-undefined-violation) (dL2c0a core-prim . make-syntax-violation) (dL2c09 core-prim . make-serious-condition) (dL2c08 core-prim . make-non-continuable-violation) (dL2c07 core-prim . make-message-condition) (dL2c06 core-prim . make-lexical-violation) (dL2c05 core-prim . make-irritants-condition) (dL2c04 core-prim . make-implementation-restriction-violation) (dL2c03 core-prim . make-error) (dL2c02 core-prim . make-assertion-violation) (dL2c01 core-prim . lexical-violation?) (dL2c00 core-prim . irritants-condition?) (dL2bff core-prim . implementation-restriction-violation?) (dL2bfe core-prim . error?) (dL2bfd core-prim . condition-who) (dL2bfc core-prim . condition-predicate) (dL2bfb core-prim . condition-message) (dL2bfa core-prim . condition-irritants) (dL2bf9 core-prim . condition-accessor) (dL2bf8 core-prim . condition) (dL2bf7 core-prim . assertion-violation?) (dL2bf6 core-prim . condition?) (dL2bf5 core-prim . utf32->string) (dL2bf4 core-prim . utf16->string) (dL2bf3 core-prim . utf8->string) (dL2bf2 core-prim . uint-list->bytevector) (dL2bf1 core-prim . u8-list->bytevector) (dL2bf0 core-prim . string->utf8) (dL2bef core-prim . string->utf32) (dL2bee core-prim . string->utf16) (dL2bed core-prim . sint-list->bytevector) (dL2bec core-prim . native-endianness) (dL2beb core-prim . bytevector?) (dL2bea core-prim . bytevector=?) (dL2be9 core-prim . bytevector-uint-set!) (dL2be8 core-prim . bytevector-uint-ref) (dL2be7 core-prim . bytevector-u8-set!) (dL2be6 core-prim . bytevector-u8-ref) (dL2be5 core-prim . bytevector-u64-set!) (dL2be4 core-prim . bytevector-u64-ref) (dL2be3 core-prim . bytevector-u64-native-set!) (dL2be2 core-prim . bytevector-u64-native-ref) (dL2be1 core-prim . bytevector-u32-set!) (dL2be0 core-prim . bytevector-u32-ref) (dL2bdf core-prim . bytevector-u32-native-set!) (dL2bde core-prim . bytevector-u32-native-ref) (dL2bdd core-prim . bytevector-u16-set!) (dL2bdc core-prim . bytevector-u16-ref) (dL2bdb core-prim . bytevector-u16-native-set!) (dL2bda core-prim . bytevector-u16-native-ref) (dL2bd9 core-prim . bytevector-sint-set!) (dL2bd8 core-prim . bytevector-sint-ref) (dL2bd7 core-prim . bytevector-s8-set!) (dL2bd6 core-prim . bytevector-s8-ref) (dL2bd5 core-prim . bytevector-s64-set!) (dL2bd4 core-prim . bytevector-s64-ref) (dL2bd3 core-prim . bytevector-s64-native-set!) (dL2bd2 core-prim . bytevector-s64-native-ref) (dL2bd1 core-prim . bytevector-s32-set!) (dL2bd0 core-prim . bytevector-s32-ref) (dL2bcf core-prim . bytevector-s32-native-set!) (dL2bce core-prim . bytevector-s32-native-ref) (dL2bcd core-prim . bytevector-s16-set!) (dL2bcc core-prim . bytevector-s16-ref) (dL2bcb core-prim . bytevector-s16-native-set!) (dL2bca core-prim . bytevector-s16-native-ref) (dL2bc9 core-prim . bytevector-length) (dL2bc8 core-prim . bytevector-ieee-single-ref) (dL2bc7 core-prim . bytevector-ieee-single-set!) (dL2bc6 core-prim . bytevector-ieee-single-native-set!) (dL2bc5 core-prim . bytevector-ieee-single-native-ref) (dL2bc4 core-prim . bytevector-ieee-double-set!) (dL2bc3 core-prim . bytevector-ieee-double-ref) (dL2bc2 core-prim . bytevector-ieee-double-native-set!) (dL2bc1 core-prim . bytevector-ieee-double-native-ref) (dL2bc0 core-prim . bytevector-fill!) (dL2bbf core-prim . bytevector-copy!) (dL2bbe core-prim . bytevector-copy) (dL2bbd core-prim . bytevector->uint-list) (dL2bbc core-prim . bytevector->u8-list) (dL2bbb core-prim . bytevector->sint-list) (dL2bba core-prim . no-nans-violation?) (dL2bb9 core-prim . no-infinities-violation?) (dL2bb8 core-prim . make-no-nans-violation) (dL2bb7 core-prim . make-no-infinities-violation) (dL2bb6 core-prim . real->flonum) (dL2bb5 core-prim . flzero?) (dL2bb4 core-prim . fltruncate) (dL2bb3 core-prim . fltan) (dL2bb2 core-prim . flsqrt) (dL2bb1 core-prim . flsin) (dL2bb0 core-prim . flround) (dL2baf core-prim . flpositive?) (dL2bae core-prim . flonum?) (dL2bad core-prim . flodd?) (dL2bac core-prim . flnumerator) (dL2bab core-prim . flnegative?) (dL2baa core-prim . flnan?) (dL2ba9 core-prim . flmod0) (dL2ba8 core-prim . flmod) (dL2ba7 core-prim . flmin) (dL2ba6 core-prim . flmax) (dL2ba5 core-prim . fllog) (dL2ba4 core-prim . flinteger?) (dL2ba3 core-prim . flinfinite?) (dL2ba2 core-prim . flfloor) (dL2ba1 core-prim . flfinite?) (dL2ba0 core-prim . flexpt) (dL2b9f core-prim . flexp) (dL2b9e core-prim . fleven?) (dL2b9d core-prim . fldiv0-and-mod0) (dL2b9c core-prim . fldiv0) (dL2b9b core-prim . fldiv-and-mod) (dL2b9a core-prim . fldiv) (dL2b99 core-prim . fldenominator) (dL2b98 core-prim . flcos) (dL2b97 core-prim . flceiling) (dL2b96 core-prim . flatan) (dL2b95 core-prim . flasin) (dL2b94 core-prim . flacos) (dL2b93 core-prim . flabs) (dL2b92 core-prim . fl>?) (dL2b91 core-prim . fl>=?) (dL2b90 core-prim . fl=?) (dL2b8f core-prim . fl<?) (dL2b8e core-prim . fl<=?) (dL2b8d core-prim . fl/) (dL2b8c core-prim . fl-) (dL2b8b core-prim . fl+) (dL2b8a core-prim . fl*) (dL2b89 core-prim . fixnum->flonum) (dL2b88 core-prim . fxzero?) (dL2b87 core-prim . fxxor) (dL2b86 core-prim . fxrotate-bit-field) (dL2b85 core-prim . fxreverse-bit-field) (dL2b84 core-prim . fxpositive?) (dL2b83 core-prim . fxodd?) (dL2b82 core-prim . fxnot) (dL2b81 core-prim . fxnegative?) (dL2b80 core-prim . fxmod0) (dL2b7f core-prim . fxmod) (dL2b7e core-prim . fxmin) (dL2b7d core-prim . fxmax) (dL2b7c core-prim . fxlength) (dL2b7b core-prim . fxior) (dL2b7a core-prim . fxif) (dL2b79 core-prim . fxfirst-bit-set) (dL2b78 core-prim . fxeven?) (dL2b77 core-prim . fxdiv0-and-mod0) (dL2b76 core-prim . fxdiv0) (dL2b75 core-prim . fxdiv-and-mod) (dL2b74 core-prim . fxdiv) (dL2b73 core-prim . fxcopy-bit-field) (dL2b72 core-prim . fxcopy-bit) (dL2b71 core-prim . fxbit-set?) (dL2b70 core-prim . fxbit-field) (dL2b6f core-prim . fxbit-count) (dL2b6e core-prim . fxarithmetic-shift-right) (dL2b6d core-prim . fxarithmetic-shift-left) (dL2b6c core-prim . fxarithmetic-shift) (dL2b6b core-prim . fxand) (dL2b6a core-prim . fx>?) (dL2b69 core-prim . fx>=?) (dL2b68 core-prim . fx=?) (dL2b67 core-prim . fx<?) (dL2b66 core-prim . fx<=?) (dL2b65 core-prim . fx-/carry) (dL2b64 core-prim . fx-) (dL2b63 core-prim . fx+/carry) (dL2b62 core-prim . fx+) (dL2b61 core-prim . fx*/carry) (dL2b60 core-prim . fx*) (dL2b5f core-prim . greatest-fixnum) (dL2b5e core-prim . least-fixnum) (dL2b5d core-prim . fixnum-width) (dL2b5c core-prim . fixnum?) (dL2b5b core-prim . bitwise-rotate-bit-field) (dL2b5a core-prim . bitwise-reverse-bit-field) (dL2b59 core-prim . bitwise-length) (dL2b58 core-prim . bitwise-if) (dL2b57 core-prim . bitwise-first-bit-set) (dL2b56 core-prim . bitwise-copy-bit-field) (dL2b55 core-prim . bitwise-copy-bit) (dL2b54 core-prim . bitwise-bit-set?) (dL2b53 core-prim . bitwise-bit-field) (dL2b52 core-prim . bitwise-bit-count) (dL2b51 core-prim . bitwise-xor) (dL2b50 core-prim . bitwise-ior) (dL2b4f core-prim . bitwise-and) (dL2b4e core-prim . bitwise-not) (dL2b4d core-prim . bitwise-arithmetic-shift-right) (dL2b4c core-prim . bitwise-arithmetic-shift-left) (dL2b4b core-prim . bitwise-arithmetic-shift) (dL2b4a core-prim . zero?) (dL2b49 core-prim . vector?) (dL2b48 core-prim . vector-set!) (dL2b47 core-prim . vector-ref) (dL2b46 core-prim . vector-map) (dL2b45 core-prim . vector-length) (dL2b44 core-prim . vector-for-each) (dL2b43 core-prim . vector-fill!) (dL2b42 core-prim . vector->list) (dL2b41 core-prim . vector) (dL2b40 core-prim . values) (dL2b3f core-prim . truncate) (dL2b3e core-prim . tan) (dL2b3d core-prim . symbol?) (dL2b3c core-prim . symbol=?) (dL2b3b core-prim . symbol->string) (dL2b3a core-prim . substring) (dL2b39 core-prim . string?) (dL2b38 core-prim . string>?) (dL2b37 core-prim . string>=?) (dL2b36 core-prim . string=?) (dL2b35 core-prim . string<?) (dL2b34 core-prim . string<=?) (dL2b33 core-prim . string-ref) (dL2b32 core-prim . string-length) (dL2b31 core-prim . string-for-each) (dL2b30 core-prim . string-copy) (dL2b2f core-prim . string-append) (dL2b2e core-prim . string->symbol) (dL2b2d core-prim . string->number) (dL2b2c core-prim . string->list) (dL2b2b core-prim . string) (dL2b2a core-prim . sqrt) (dL2b29 core-prim . sin) (dL2b28 core-prim . round) (dL2b27 core-prim . reverse) (dL2b26 core-prim . real?) (dL2b25 core-prim . real-valued?) (dL2b24 core-prim . real-part) (dL2b23 core-prim . rationalize) (dL2b22 core-prim . rational?) (dL2b21 core-prim . rational-valued?) (dL2b20 core-prim . procedure?) (dL2b1f core-prim . positive?) (dL2b1e core-prim . pair?) (dL2b1d core-prim . odd?) (dL2b1c core-prim . numerator) (dL2b1b core-prim . number?) (dL2b1a core-prim . number->string) (dL2b19 core-prim . null?) (dL2b18 core-prim . not) (dL2b17 core-prim . negative?) (dL2b16 core-prim . nan?) (dL2b15 core-prim . min) (dL2b14 core-prim . max) (dL2b13 core-prim . map) (dL2b12 core-prim . make-vector) (dL2b11 core-prim . make-string) (dL2b10 core-prim . make-rectangular) (dL2b0f core-prim . make-polar) (dL2b0e core-prim . magnitude) (dL2b0d core-prim . log) (dL2b0c core-prim . list?) (dL2b0b core-prim . list-tail) (dL2b0a core-prim . list-ref) (dL2b09 core-prim . list->vector) (dL2b08 core-prim . list->string) (dL2b07 core-prim . list) (dL2b06 core-prim . length) (dL2b05 core-prim . lcm) (dL2b04 core-prim . integer?) (dL2b03 core-prim . integer-valued?) (dL2b02 core-prim . integer->char) (dL2b01 core-prim . infinite?) (dL2b00 core-prim . inexact?) (dL2aff core-prim . inexact) (dL2afe core-prim . imag-part) (dL2afd core-prim . gcd) (dL2afc core-prim . for-each) (dL2afb core-prim . floor) (dL2afa core-prim . finite?) (dL2af9 core-prim . expt) (dL2af8 core-prim . exp) (dL2af7 core-prim . exact?) (dL2af6 core-prim . exact-integer-sqrt) (dL2af5 core-prim . exact) (dL2af4 core-prim . even?) (dL2af3 core-prim . error) (dL2af2 core-prim . eqv?) (dL2af1 core-prim . equal?) (dL2af0 core-prim . eq?) (dL2aef core-prim . dynamic-wind) (dL2aee core-prim . div0-and-mod0) (dL2aed core-prim . mod0) (dL2aec core-prim . div0) (dL2aeb core-prim . div-and-mod) (dL2aea core-prim . mod) (dL2ae9 core-prim . div) (dL2ae8 core-prim . denominator) (dL2ae7 core-prim . cos) (dL2ae6 core-prim . cons) (dL2ae5 core-prim . complex?) (dL2ae4 core-prim . char?) (dL2ae3 core-prim . char>?) (dL2ae2 core-prim . char>=?) (dL2ae1 core-prim . char=?) (dL2ae0 core-prim . char<?) (dL2adf core-prim . char<=?) (dL2ade core-prim . char->integer) (dL2add core-prim . ceiling) (dL2adc core-prim . call-with-values) (dL2adb core-prim . call/cc) (dL2ada core-prim . call-with-current-continuation) (dL2ad9 core-prim . cddddr) (dL2ad8 core-prim . cdddar) (dL2ad7 core-prim . cddadr) (dL2ad6 core-prim . cddaar) (dL2ad5 core-prim . cdaddr) (dL2ad4 core-prim . cdadar) (dL2ad3 core-prim . cdaadr) (dL2ad2 core-prim . cdaaar) (dL2ad1 core-prim . cadddr) (dL2ad0 core-prim . caddar) (dL2acf core-prim . cadadr) (dL2ace core-prim . cadaar) (dL2acd core-prim . caaddr) (dL2acc core-prim . caadar) (dL2acb core-prim . caaadr) (dL2aca core-prim . caaaar) (dL2ac9 core-prim . cdddr) (dL2ac8 core-prim . cddar) (dL2ac7 core-prim . cdadr) (dL2ac6 core-prim . cdaar) (dL2ac5 core-prim . caddr) (dL2ac4 core-prim . cadar) (dL2ac3 core-prim . caadr) (dL2ac2 core-prim . caaar) (dL2ac1 core-prim . cddr) (dL2ac0 core-prim . cdar) (dL2abf core-prim . cadr) (dL2abe core-prim . caar) (dL2abd core-prim . cdr) (dL2abc core-prim . car) (dL2abb core-prim . boolean?) (dL2aba core-prim . boolean=?) (dL2ab9 core-prim . atan) (dL2ab8 core-prim . assertion-violation) (dLe51 core-prim . assertion-error) (dL2ab7 core-prim . asin) (dL2ab6 core-prim . apply) (dL2ab5 core-prim . append) (dL2ab4 core-prim . angle) (dL2ab3 core-prim . acos) (dL2ab2 core-prim . abs) (dL2ab1 core-prim . /) (dL2ab0 core-prim . *) (dL2aaf core-prim . -) (dL2aae core-prim . +) (dL2aad core-prim . >=) (dL2aac core-prim . >) (dL2aab core-prim . =) (dL2aaa core-prim . <=) (dL2aa9 core-prim . <) (dL2aa8 core-prim . library) (dL2aa7 $core-rtd &no-nans-rtd &no-nans-rcd) (dL2aa6 $core-rtd &no-infinities-rtd &no-infinities-rcd) (dL2aa5 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (dL2aa4 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (dL2aa3 $core-rtd &i/o-port-rtd &i/o-port-rcd) (dL2aa2 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (dL2aa1 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (dL2aa0 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (dL2a9f $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (dL2a9e $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (dL2a9d $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (dL2a9c $core-rtd &i/o-write-rtd &i/o-write-rcd) (dL2a9b $core-rtd &i/o-read-rtd &i/o-read-rcd) (dL2a9a $core-rtd &i/o-rtd &i/o-rcd) (dL2a99 $core-rtd &undefined-rtd &undefined-rcd) (dL2a98 $core-rtd &syntax-rtd &syntax-rcd) (dL2a97 $core-rtd &lexical-rtd &lexical-rcd) (dL2a96 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (dL2a95 $core-rtd &non-continuable-rtd &non-continuable-rcd) (dL2a94 $core-rtd &who-rtd &who-rcd) (dL2a93 $core-rtd &irritants-rtd &irritants-rcd) (dL2a92 $core-rtd &assertion-rtd &assertion-rcd) (dL2a91 $core-rtd &violation-rtd &violation-rcd) (dL2a90 $core-rtd &error-rtd &error-rcd) (dL2a8f $core-rtd &serious-rtd &serious-rcd) (dL2a8e $core-rtd &warning-rtd &warning-rcd) (dL2a8d $core-rtd &message-rtd &message-rcd) (dL2a8c $core-rtd &condition-rtd &condition-rcd) (dL2a8b macro . define-condition-type) (dL2a8a macro . define-enumeration) (dL2a89 macro . define-record-type) (dL2a88 macro . parent-rtd) (dL2a87 macro . nongenerative) (dL2a86 macro . opaque) (dL2a85 macro . sealed) (dL2a84 macro . protocol) (dL2a83 macro . parent) (dL2a82 macro . immutable) (dL2a81 macro . mutable) (dL2a80 macro . fields) (dL2a7f macro . error-handling-mode) (dL2a7e macro . file-options) (dL2a7d macro . buffer-mode) (dL2a7c macro . eol-style) (dL2a7b macro . guard) (dL2a7a macro . trace-define) (dL2a79 macro . trace-lambda) (dL2a78 macro . unsyntax-splicing) (dL2a77 macro . unsyntax) (dL2a76 macro . unquote-splicing) (dL2a75 macro . unquote) (dL2a74 macro . _) (dL2a73 macro . else) (dL2a72 macro . =>) (dL2a71 macro . ...) (dL2a70 macro . assert) (dL2a6f macro . endianness) (dL2a6e macro . delay) (dL2a6d macro . time) (dL2a6c macro . do) (dL2a6b macro . cond) (dL2a6a macro . let*) (dL2a69 macro . let*-values) (dL2a68 macro . let-values) (dL2a67 macro . identifier-syntax) (dL2a66 macro . with-syntax) (dL2a65 macro . quasisyntax) (dL2a64 macro . quasiquote) (dL2a63 macro . syntax-rules) (dL2a62 macro . include) (dL2a61 macro . define-struct) (dL2a60 core-macro . record-constructor-descriptor) (dL2a5f core-macro . record-type-descriptor) (dL2a5e macro . case) (dL2a5d macro . parameterize) (dL2a5c macro . unless) (dL2a5b macro . when) (dL2a5a core-macro . or) (dL2a59 core-macro . and) (dL2a58 core-macro . if) (dL2a57 core-macro . let) (dL2a56 core-macro . letrec*) (dL2a55 core-macro . letrec) (dL2a54 core-macro . type-descriptor) (dL2a53 core-macro . case-lambda) (dL2a52 core-macro . lambda) (dL2a51 core-macro . syntax) (dL2a50 core-macro . syntax-case) (dL2a4f core-macro . quote) (dL2a4e core-macro . foreign-call) (dL2a4d letrec-syntax) (dL2a4c let-syntax) (dL2a4b set!) (dL2a4a import) (dL2a49 begin) (dL2a48 module) (dL2a47 define-syntax) (dL2a46 define)) values values '#f '#f '#f '#f) (dL98b@dL7d7@install-library 'dL2e06 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . dL2dad) (eval-core . dL2dac) (set-symbol-value! . dL2dab) (symbol-value . dL2daa) (gensym . dL2da9) (void . dL2da8)) '() values values '#f '#f '#f '#f) (dL98b@dL7d7@install-library 'dL2e07 '(mosh) '() '() '() '() '((set-symbol-value! . dL2dab) (symbol-value . dL2daa) (regexp? . dL2da6) (read-line . dL2da5) (ungensym . dL2da3) (alist->eq-hash-table . dL2da2) (assoc-ref . dL2da1) (print . dL2da0) (format . dL2d9f) (host-os . dL2d9e) (library-path . dL7b6) (standard-library-path . dL2d9d) (file-newer? . dL2d9c) (stat-mtime . dL2d9b) (digit->integer . dL2d97) (call-with-string-input-port . dL2d96) (call-with-string-io . dL2d95) (string-split . dL2d94) (bytevector-for-each . dL2d93) (string->regexp . dL2d92) (rxmatch . dL2d91) (regexp-replace-all . dL2d90) (hashtable-for-each . dL2d8f) (set-current-directory! . dL2d8a) (expand-path . dL2d89) (current-directory . dL2d88) (p . dL2d49) (get-timeofday . dL2d30) (get-command-line . dL2d2f) (sys-display . dL2d2e) (whereis . dL2d2d) (register . dL2d2c) (vm-join! . dL2d2b) (vm-set-value! . dL2d2a) (vm? . dL2d29) (main-vm? . dL2d28) (vm-eval . dL2d27) (vm-self . dL2d26) (vm-start! . dL2d25) (make-vm . dL2d24) (mutex-try-lock! . dL2d23) (mutex-unlock! . dL2d22) (mutex-lock! . dL2d21) (mutex? . dL2d20) (make-mutex . dL2d1f) (condition-variable-notify-all! . dL2d1e) (condition-variable-notify! . dL2d1d) (condition-variable-wait! . dL2d1c) (make-condition-variable . dL2d1b) (write/ss . dL2d1a) (mosh-executable-path . dL2d19) (make-file-options . dL2d18) (source-info . dL2d17) (make-compiler-instruction . dL2d16) (make-instruction . dL2d15) (set-source-info! . dL2d14) (bignum? . dL2d13) (fast-equal? . dL2d12) (fasl-read . dL2d11) (fasl-write . dL2d10) (time-usage . dL2d0f) (os-constant . dL2d0e) (time . dL2a6d) (include . dL2a62)) '() values values '#f '#f '#f '#f) (dL98b@dL7d7@install-library 'dL2e08 '(system) '() '() '() '() '((gensym-prefix-set! . dL2da4) (write-to-file . dL2d9a) (file->list . dL2d99) (file->string . dL2d98) (mosh-cache-dir . dL5a0) (call-process . dL2d8e) (local-tz-offset . dL2d8d) (microseconds . dL2d8c) (directory-list . dL2d8b) (expand-path . dL2d89) (%spawn . dL2d87) (%waitpid . dL2d86) (simple-struct-name . dL2d85) (simple-struct-set! . dL2d84) (simple-struct-ref . dL2d83) (make-simple-struct . dL2d82) (simple-struct? . dL2d81) (pointer-ref-c-int64 . dL2d80) (pointer-ref-c-int32 . dL2d7f) (pointer-ref-c-int16 . dL2d7e) (pointer-ref-c-int8 . dL2d7d) (pointer-ref-c-uint64 . dL2d7c) (pointer-ref-c-uint32 . dL2d7b) (pointer-ref-c-uint16 . dL2d7a) (pointer-ref-c-uint8 . dL2d79) (pointer-set-c-uint64! . dL2d78) (pointer-set-c-uint32! . dL2d77) (pointer-set-c-uint16! . dL2d76) (pointer-set-c-uint8! . dL2d75) (pointer-set-c-int64! . dL2d74) (pointer-set-c-int32! . dL2d73) (pointer-set-c-int16! . dL2d72) (pointer-set-c-int8! . dL2d71) (pointer-set-c-pointer! . dL2d70) (pointer-set-c-double! . dL2d6f) (pointer-set-c-float! . dL2d6e) (pointer-set-c-long-long! . dL2d6d) (pointer-set-c-long! . dL2d6c) (pointer-set-c-int! . dL2d6b) (pointer-set-c-short! . dL2d6a) (pointer-set-c-char! . dL2d69) (pointer-ref-c-pointer . dL2d68) (pointer-ref-c-double . dL2d67) (pointer-ref-c-float . dL2d66) (pointer-ref-c-unsigned-long-long . dL2d65) (pointer-ref-c-signed-long-long . dL2d64) (pointer-ref-c-unsigned-long . dL2d63) (pointer-ref-c-signed-long . dL2d62) (pointer-ref-c-unsigned-int . dL2d61) (pointer-ref-c-signed-int . dL2d60) (pointer-ref-c-unsigned-short . dL2d5f) (pointer-ref-c-signed-short . dL2d5e) (pointer-ref-c-unsigned-char . dL2d5d) (pointer-ref-c-signed-char . dL2d5c) (pointer->integer . dL2d5b) (integer->pointer . dL2d5a) (pointer? . dL2d59) (shared-errno . dL2d58) (%ffi-free-c-callback-trampoline . dL2d57) (%ffi-make-c-callback-trampoline . dL2d56) (%ffi-free . dL2d55) (%ffi-malloc . dL2d54) (%ffi-supported? . dL2d53) (%ffi-pointer->string . dL2d52) (%ffi-call . dL2d51) (%ffi-lookup . dL2d50) (%ffi-open . dL2d4f) (null-terminated-utf8->string . dL2d4e) (null-terminated-bytevector->string . dL2d4d) (%exec . dL2d4c) (%fork . dL2d4b) (%pipe . dL2d4a) (open-output-string . dL2d48) (get-output-string . dL2d47) (file-stat-ctime . dL2d46) (file-stat-atime . dL2d45) (file-stat-mtime . dL2d44) (file-size-in-bytes . dL2d43) (file-writable? . dL2d42) (file-executable? . dL2d41) (file-readable? . dL2d40) (file-regular? . dL2d3f) (file-symbolic-link? . dL2d3e) (file-directory? . dL2d3d) (create-symbolic-link . dL2d3c) (rename-file . dL2d3b) (delete-directory . dL2d3a) (create-directory . dL2d39) (create-mosh-cache-dir . dL2d38) (get-environment-variables . dL2d37) (current-exception-handler . dL2d36) (get-environment-variable . dL2d35) (join-wraps . dL2d34) (id->real-label . dL2d33) (same-marks? . dL2d32) (same-marks*? . dL2d31) (disasm . dL2d0d) (make-parameter . dL59e) (socket-port . dL2d0c) (socket-shutdown . dL2d0b) (socket-close . dL2d0a) (socket-send . dL2d09) (socket-recv! . dL2d08) (socket-recv . dL2d07) (make-server-socket . dL2d06) (make-client-socket . dL2d05) (socket-accept . dL2d04) (socket? . dL2d03) (parameterize . dL2a5d)) '() values values '#f '#f '#f '#f)))
(begin (set! dL28c5@ref (unspecified)) (set! dL28c7@x* (unspecified)) (set! dL28c9@add-library-path! (unspecified)) (set! dL28cb@parse-and-add-library-path (unspecified)) (set! dL28cd@for-each-with-index (unspecified)) (set! dL28cf@rpad (unspecified)) (set! dL28d1@condition-printer (unspecified)) (set! dL28d3@record->field-alist (unspecified)) (set! dL28d5@map-with-index (unspecified)) (set! dL28d7@repl (unspecified)) (set! dL28d9@trace-printer (unspecified)) (set! dL28db@command-line (unspecified)) (set! dL28dd@local-library-path (unspecified)) (set! dL28df@load/args (unspecified)) (set! dL28e1@load (unspecified)) (set! dL28e3@ironscheme-build (unspecified)) (set! dL28e5@eval-top-level (unspecified)) (set! dL28e7@compile-system-libraries (unspecified)) (set! dL28e9@compile (unspecified)) (set! dL28eb@compile->closure (unspecified)) (set! dL28ed@pre-compile-r6rs-file (unspecified)) (set! dL28ef@load-r6rs-top-level (unspecified)) (set! dL28f1@load-r6rs-top-level-sexp (unspecified)) (set! dL28f3@prefix-inc (unspecified)) (set! dL28f5@prefix-inc! (unspecified)) (set! dL28c5@ref (lambda (dL2930@rtd dL2931@i dL2932@x) (let ((dL2936@val ((record-accessor dL2930@rtd dL2931@i) dL2932@x))) (if (symbol? dL2936@val) (ungensym dL2936@val) dL2936@val)))) (set! dL2a2c@dL28c5@ref dL28c5@ref) (set! dL28c7@x* '()) (set! dL2a2d@dL28c7@x* dL28c7@x*) (set! dL28c9@add-library-path! (lambda (dL2938@path) (dL97b@dL7b7@library-path (append (dL97b@dL7b7@library-path) (list dL2938@path))))) (set! dL2a2e@dL28c9@add-library-path! dL28c9@add-library-path!) (set! dL28cb@parse-and-add-library-path (lambda (dL293a@paths dL293b@message) (letrec* ((dL293f@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((dL2940@t dL293a@paths)) (if dL2940@t ((lambda (dL2942@paths) (for-each (lambda (dL2944@path) (if (file-exists? dL2944@path) (dL28c9@add-library-path! (expand-path dL2944@path)) (format (current-error-port) dL293b@message dL2944@path))) (string-split dL2942@paths dL293f@separator))) dL2940@t) (void)))))) (set! dL2a2f@dL28cb@parse-and-add-library-path dL28cb@parse-and-add-library-path) (set! dL28cd@for-each-with-index (lambda (dL2946@proc dL2947@lst) (letrec ((dL294a@loop (lambda (dL294c@i dL294d@lst) (if (null? dL294d@lst) (if '#f '#f (void)) (begin (dL2946@proc dL294c@i (car dL294d@lst)) (dL294a@loop (+ dL294c@i '1) (cdr dL294d@lst))))))) (dL294a@loop '1 dL2947@lst)))) (set! dL2a30@dL28cd@for-each-with-index dL28cd@for-each-with-index) (set! dL28cf@rpad (lambda (dL2950@str dL2951@pad dL2952@n) (let ((dL2956@rest (- dL2952@n (string-length (format '"~a" dL2950@str))))) (let dL295c@loop ((dL2958@rest dL2956@rest) (dL2959@ret (format '"~a" dL2950@str))) (if (<= dL2958@rest '0) dL2959@ret (dL295c@loop (- dL2958@rest '1) (string-append dL2959@ret dL2951@pad))))))) (set! dL2a31@dL28cf@rpad dL28cf@rpad) (set! dL28d1@condition-printer (lambda (dL295e@e dL295f@port) (letrec* ((dL2963@max-condition-len (apply max (map (lambda (dL2974@c) (string-length (symbol->string (record-type-name (record-rtd dL2974@c))))) (simple-conditions dL295e@e))))) (begin (display '" Condition components:\n" dL295f@port) (dL28cd@for-each-with-index (lambda (dL2964@i dL2965@x) (let ((dL2968@rtd (record-rtd dL2965@x)) (dL2969@fields-alist (dL28d3@record->field-alist dL2965@x))) (begin (format dL295f@port '" ~d. ~a" dL2964@i (dL28cf@rpad (symbol->string (record-type-name dL2968@rtd)) '" " dL2963@max-condition-len)) (if (null? dL2969@fields-alist) (newline dL295f@port) (void)) (let dL2970@loop ((dL296c@first '#t) (dL296d@fields-alist dL2969@fields-alist)) (if (null? dL296d@fields-alist) '() (let ((dL2972@field (car dL296d@fields-alist))) (begin (if (not dL296c@first) (display (dL28cf@rpad '"" '" " (+ '4 dL2963@max-condition-len)) dL295f@port) (void)) (display '"       " dL295f@port) (display (car dL2972@field) dL295f@port) (display '": " dL295f@port) (write (cdr dL2972@field) dL295f@port) (newline dL295f@port) (dL2970@loop '#f (cdr dL296d@fields-alist))))))))) (simple-conditions dL295e@e)))))) (set! dL2a32@dL28d1@condition-printer dL28d1@condition-printer) (set! dL28d3@record->field-alist (lambda (dL2976@r) (letrec* ((dL2979@ref (lambda (dL2984@rtd dL2985@i dL2986@x) (let ((dL298a@val ((record-accessor dL2984@rtd dL2985@i) dL2986@x))) (if (symbol? dL298a@val) (ungensym dL298a@val) dL298a@val))))) (let dL297e@loop ((dL297a@ret '()) (dL297b@rtd (record-rtd dL2976@r))) (if dL297b@rtd (dL297e@loop (append dL297a@ret (dL28d5@map-with-index (lambda (dL2980@i dL2981@field) (cons dL2981@field (dL2979@ref dL297b@rtd dL2980@i dL2976@r))) (vector->list (record-type-field-names dL297b@rtd)))) (record-type-parent dL297b@rtd)) dL297a@ret))))) (set! dL2a33@dL28d3@record->field-alist dL28d3@record->field-alist) (set! dL28d5@map-with-index (lambda (dL298c@proc dL298d@lst) (let dL2996@loop ((dL2990@i '0) (dL2991@lst dL298d@lst) (dL2992@ret '())) (if (null? dL2991@lst) (reverse dL2992@ret) (dL2996@loop (+ dL2990@i '1) (cdr dL2991@lst) (cons (dL298c@proc dL2990@i (car dL2991@lst)) dL2992@ret)))))) (set! dL2a34@dL28d5@map-with-index dL28d5@map-with-index) (set! dL28d7@repl (lambda dL2998@x (letrec* ((dL299b@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (dL299e@dL299c) (lambda () (with-exception-handler (lambda (dL29a0@e) ((call/cc (lambda (dL29a2@dL299d) (dL299e@dL299c (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? dL29a0@e) (dL28d1@condition-printer dL29a0@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" dL29a0@e))) (dL29a2@dL299d (lambda () (raise-continuable dL29a0@e)))))))))) (lambda () (let dL29a8@loop ((dL29a4@line (get-line (current-input-port))) (dL29a5@accum '"")) (letrec* ((dL29ab@parentheses-ok? (lambda (dL29b6@text) (let dL29be@loop ((dL29b8@chars (string->list dL29b6@text)) (dL29b9@p0 '0) (dL29ba@p1 '0)) (if (null? dL29b8@chars) (= '0 dL29b9@p0 dL29ba@p1) (let ((dL29c0@t (car dL29b8@chars))) (if (memv dL29c0@t '(#\()) (dL29be@loop (cdr dL29b8@chars) (+ dL29b9@p0 '1) dL29ba@p1) (if (memv dL29c0@t '(#\))) (dL29be@loop (cdr dL29b8@chars) (- dL29b9@p0 '1) dL29ba@p1) (if (memv dL29c0@t '(#\[)) (dL29be@loop (cdr dL29b8@chars) dL29b9@p0 (+ dL29ba@p1 '1)) (if (memv dL29c0@t '(#\])) (dL29be@loop (cdr dL29b8@chars) dL29b9@p0 (- dL29ba@p1 '1)) (dL29be@loop (cdr dL29b8@chars) dL29b9@p0 dL29ba@p1)))))))))) (dL29ad@eval-string-print (lambda (dL29b0@text) (if (not (or (string=? '"\n" dL29b0@text) (= '0 (string-length dL29b0@text)))) (call-with-values (lambda () (dL28e5@eval-top-level (call-with-port (open-string-input-port dL29b0@text) read))) (lambda dL29b2@out* (for-each (lambda (dL29b4@out) (begin (write dL29b4@out) (newline))) dL29b2@out*))) (void))))) (if (eof-object? dL29a4@line) (begin (dL29ad@eval-string-print dL29a5@accum) (exit)) (let ((dL29ae@current (string-append dL29a5@accum dL29a4@line))) (if (dL29ab@parentheses-ok? dL29ae@current) (dL29ad@eval-string-print dL29ae@current) (dL29a8@loop (get-line (current-input-port)) dL29ae@current)))))))))))) (newline) (dL299b@rec))))) (dL299b@rec)))) (set! dL2a35@dL28d7@repl dL28d7@repl) (set! dL28d9@trace-printer (dL6c1@dL59f@make-parameter write)) (set! dL2a36@dL28d9@trace-printer dL28d9@trace-printer) (set! dL28db@command-line (dL6c1@dL59f@make-parameter (get-command-line))) (set! dL2a37@dL28db@command-line dL28db@command-line) (set! dL28dd@local-library-path (lambda (dL29c2@filename) (dL97b@dL7b7@library-path))) (set! dL2a38@dL28dd@local-library-path dL28dd@local-library-path) (set! dL28df@load/args (lambda (dL29c4@filename . dL29c6@args) (begin (apply dL28ef@load-r6rs-top-level dL29c4@filename 'load dL29c6@args) (void)))) (set! dL2a39@dL28df@load/args dL28df@load/args) (set! dL28e1@load (lambda (dL29c8@filename) (begin (apply dL28ef@load-r6rs-top-level dL29c8@filename 'load (dL28db@command-line)) (void)))) (set! dL2a3a@dL28e1@load dL28e1@load) (set! dL28e3@ironscheme-build (lambda () (dL28e1@load '"ironscheme-buildscript.ss"))) (set! dL2a3b@dL28e3@ironscheme-build dL28e3@ironscheme-build) (set! dL28e5@eval-top-level (lambda (dL29ca@x) (dL28a2@dLe38@eval dL29ca@x (dL28b9@dLe66@interaction-environment)))) (set! dL2a3c@dL28e5@eval-top-level dL28e5@eval-top-level) (set! dL28e7@compile-system-libraries (lambda () (dL28e5@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! dL2a3d@dL28e7@compile-system-libraries dL28e7@compile-system-libraries) (set! dL28e9@compile (lambda (dL29cc@filename) (dL28ef@load-r6rs-top-level dL29cc@filename 'compile))) (set! dL2a3e@dL28e9@compile dL28e9@compile) (set! dL28eb@compile->closure (lambda (dL29ce@filename) (dL28ef@load-r6rs-top-level dL29ce@filename 'closure))) (set! dL2a3f@dL28eb@compile->closure dL28eb@compile->closure) (set! dL28ed@pre-compile-r6rs-file (lambda (dL29d0@filename) (dL28ef@load-r6rs-top-level dL29d0@filename 'compile))) (set! dL2a40@dL28ed@pre-compile-r6rs-file dL28ed@pre-compile-r6rs-file) (set! dL28ef@load-r6rs-top-level (lambda (dL29d2@filename dL29d3@how . dL29d6@args) (begin (dL97b@dL7b7@library-path (dL28dd@local-library-path dL29d2@filename)) (let ((dL29d8@x* (with-input-from-file dL29d2@filename (lambda () (let dL29da@f () (let ((dL29dc@x (dL6b3@dL583@read-annotated))) (if (eof-object? dL29dc@x) '() (cons dL29dc@x (dL29da@f))))))))) (let ((dL29de@t dL29d3@how)) (if (memv dL29de@t '(closure)) (dL28b8@dLe64@pre-compile-r6rs-top-level dL29d8@x*) (if (memv dL29de@t '(load)) (begin (dL28db@command-line (cons dL29d2@filename (car dL29d6@args))) (dL6c2@dL5a1@mosh-cache-dir (create-mosh-cache-dir)) (if (dL6c2@dL5a1@mosh-cache-dir) (gensym-prefix-set! (dL28f5@prefix-inc! (string-append (dL6c2@dL5a1@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (dL29e0@file) ((call/cc (lambda (dL29e4@dL29e2) (lambda () (with-exception-handler (lambda (dL29e6@c) ((call/cc (lambda (dL29e8@dL29e3) (dL29e4@dL29e2 (lambda () (if '#t '#t (dL29e8@dL29e3 (lambda () (raise-continuable dL29e6@c)))))))))) (lambda () (delete-file (string-append (dL6c2@dL5a1@mosh-cache-dir) '"/" dL29e0@file))))))))) (directory-list (dL6c2@dL5a1@mosh-cache-dir))) (void)) (let ((dL29ea@compiled (dL28b7@dLe62@compile-r6rs-top-level dL29d8@x*))) (begin (if (and (dL6c2@dL5a1@mosh-cache-dir) (not (symbol-value '%disable-acc))) (dL97f@dL7bf@serialize-all dL6bc@dL595@serialize-library dL718@dL6d1@compile-core-expr) (void)) (dL29ea@compiled)))) (if (memv dL29de@t '(compile)) (begin (dL28b7@dLe62@compile-r6rs-top-level dL29d8@x*) (dL97f@dL7bf@serialize-all dL6bc@dL595@serialize-library dL718@dL6d1@compile-core-expr)) (if '#f '#f (void)))))))))) (set! dL2a41@dL28ef@load-r6rs-top-level dL28ef@load-r6rs-top-level) (set! dL28f1@load-r6rs-top-level-sexp (lambda (dL29ec@import-spec dL29ed@thunk) (let ((dL29f8@dL29f1 dL97b@dL7b7@library-path) (dL29f9@dL29f3 dL6c2@dL5a1@mosh-cache-dir) (dL29fa@dL29f5 (dL28dd@local-library-path '"")) (dL29fb@dL29f7 (create-mosh-cache-dir))) (let ((dL2a00@swap (lambda () (begin (let ((dL2a02@t (dL29f8@dL29f1))) (begin (dL29f8@dL29f1 dL29fa@dL29f5) (set! dL29fa@dL29f5 dL2a02@t))) (let ((dL2a04@t (dL29f9@dL29f3))) (begin (dL29f9@dL29f3 dL29fb@dL29f7) (set! dL29fb@dL29f7 dL2a04@t))))))) (dynamic-wind dL2a00@swap (lambda () (begin (if (dL6c2@dL5a1@mosh-cache-dir) (gensym-prefix-set! (dL28f5@prefix-inc! (string-append (dL6c2@dL5a1@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((dL2a0a@dL2a07 dL28db@command-line) (dL2a0b@dL2a09 '())) (let ((dL2a0e@swap (lambda () (let ((dL2a10@t (dL2a0a@dL2a07))) (begin (dL2a0a@dL2a07 dL2a0b@dL2a09) (set! dL2a0b@dL2a09 dL2a10@t)))))) (dynamic-wind dL2a0e@swap (lambda () ((dL28b7@dLe62@compile-r6rs-top-level (list (cons 'import dL29ec@import-spec) (list dL29ed@thunk))))) dL2a0e@swap))))) dL2a00@swap))))) (set! dL2a42@dL28f1@load-r6rs-top-level-sexp dL28f1@load-r6rs-top-level-sexp) (set! dL28f3@prefix-inc (lambda (dL2a12@prefix-string) (let ((dL2a14@prefix (symbol->string dL2a12@prefix-string))) (let ((dL2a16@len (string-length dL2a14@prefix))) (let dL2a1e@loop ((dL2a18@i (- dL2a16@len '1)) (dL2a19@carry? '#t) (dL2a1a@accum '())) (if (< dL2a18@i '0) (string->symbol (list->string (if dL2a19@carry? (cons '#\a dL2a1a@accum) dL2a1a@accum))) (if dL2a19@carry? (let ((dL2a20@next-integer (+ '1 (char->integer (string-ref dL2a14@prefix dL2a18@i))))) (if (= dL2a20@next-integer '123) (dL2a1e@loop (- dL2a18@i '1) '#f (cons '#\A dL2a1a@accum)) (if (= dL2a20@next-integer '91) (dL2a1e@loop (- dL2a18@i '1) '#t (cons '#\a dL2a1a@accum)) (dL2a1e@loop (- dL2a18@i '1) '#f (cons (integer->char dL2a20@next-integer) dL2a1a@accum))))) (dL2a1e@loop (- dL2a18@i '1) '#f (cons (string-ref dL2a14@prefix dL2a18@i) dL2a1a@accum))))))))) (set! dL2a43@dL28f3@prefix-inc dL28f3@prefix-inc) (set! dL28f5@prefix-inc! (lambda (dL2a22@file) (begin (if (not (file-exists? dL2a22@file)) (call-with-output-file dL2a22@file (lambda (dL2a24@port) (write 'd dL2a24@port))) (void)) (let ((dL2a26@prefix (call-with-input-file dL2a22@file read))) (if (main-vm?) (let ((dL2a28@next-prefix (dL28f3@prefix-inc dL2a26@prefix))) (begin (call-with-port (open-file-output-port dL2a22@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (dL2a2a@port) (write dL2a28@next-prefix dL2a2a@port))) dL2a26@prefix)) dL2a26@prefix))))) (set! dL2a44@dL28f5@prefix-inc! dL28f5@prefix-inc!) (begin (dL980@dL7c1@current-precompiled-library-loader dL6bd@dL597@load-serialized-library) (set-symbol-value! 'load dL28e1@load) (set-symbol-value! 'pre-compile-r6rs-file dL28ed@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs dL28e5@eval-top-level) (set-symbol-value! 'int-env-syms dL2899@dLe26@interaction-environment-symbols) (set-symbol-value! 'expanded2core dL717@dL6cf@expanded->core) (set-symbol-value! 'trace-printer dL28d9@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (dL28f6@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list dL28f6@c))))) (dL28cb@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (dL28cb@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (dL28c9@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (dL28c9@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (dL28c9@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((dL28f8@prefix (lambda (dL28fa@ext dL28fb@ls) (append (map (lambda (dL28fe@x) (string-append dL28fa@ext dL28fe@x)) dL28fb@ls) dL28fb@ls)))) (dL97c@dL7b9@library-extensions (dL28f8@prefix '".mosh" (dL97c@dL7b9@library-extensions)))) (current-exception-handler (lambda (dL2900@c) (begin (if (condition? dL2900@c) (dL28d1@condition-printer dL2900@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" dL2900@c)) dL2900@c))) (if ((call/cc (lambda (dL2904@dL2902) (lambda () (with-exception-handler (lambda (dL2906@c) ((call/cc (lambda (dL2908@dL2903) (dL2904@dL2902 (lambda () (if '#t '#f (dL2908@dL2903 (lambda () (raise-continuable dL2906@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (dL28f1@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (dL28db@command-line)) (let ((dL2912@dL290b dL28db@command-line) (dL2913@dL290d dL6c2@dL5a1@mosh-cache-dir) (dL2914@dL290f '()) (dL2915@dL2911 (create-mosh-cache-dir))) (let ((dL291a@swap (lambda () (begin (let ((dL291c@t (dL2912@dL290b))) (begin (dL2912@dL290b dL2914@dL290f) (set! dL2914@dL290f dL291c@t))) (let ((dL291e@t (dL2913@dL290d))) (begin (dL2913@dL290d dL2915@dL2911) (set! dL2915@dL2911 dL291e@t))))))) (dynamic-wind dL291a@swap (lambda () (begin (if (dL6c2@dL5a1@mosh-cache-dir) (gensym-prefix-set! (dL28f5@prefix-inc! (string-append (dL6c2@dL5a1@mosh-cache-dir) '"/prefix.txt"))) (void)) (dL28d7@repl))) dL291a@swap))) (begin (dL97b@dL7b7@library-path (dL28dd@local-library-path (car (dL28db@command-line)))) (set! dL28c7@x* (with-input-from-file (car (dL28db@command-line)) (lambda () (let dL2920@f () (let ((dL2922@x (dL6b3@dL583@read-annotated))) (if (eof-object? dL2922@x) '() (cons dL2922@x (dL2920@f)))))))) (dL28db@command-line (cons (car (dL28db@command-line)) (cdr (dL28db@command-line)))) (dL6c2@dL5a1@mosh-cache-dir (create-mosh-cache-dir)) (if (dL6c2@dL5a1@mosh-cache-dir) (gensym-prefix-set! (dL28f5@prefix-inc! (string-append (dL6c2@dL5a1@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (dL2924@file) ((call/cc (lambda (dL2928@dL2926) (lambda () (with-exception-handler (lambda (dL292a@c) ((call/cc (lambda (dL292c@dL2927) (dL2928@dL2926 (lambda () (if '#t '#t (dL292c@dL2927 (lambda () (raise-continuable dL292a@c)))))))))) (lambda () (delete-file (string-append (dL6c2@dL5a1@mosh-cache-dir) '"/" dL2924@file))))))))) (directory-list (dL6c2@dL5a1@mosh-cache-dir))) (void)) (let ((dL292e@compiled (dL28b7@dLe62@compile-r6rs-top-level dL28c7@x*))) (begin (if (and (dL6c2@dL5a1@mosh-cache-dir) (not (symbol-value '%disable-acc))) (dL97f@dL7bf@serialize-all dL6bc@dL595@serialize-library dL718@dL6d1@compile-core-expr) (void)) (dL292e@compiled))))))))
