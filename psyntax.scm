;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! kd28d7@library-file-path->cache-path (unspecified)) (set! kd28d9@read-annotated (unspecified)) (set! kd28db@annotation-stripped (unspecified)) (set! kd28dd@annotation? (unspecified)) (set! kd28df@annotation-source (unspecified)) (set! kd28e1@annotation-expression (unspecified)) (set! kd28e3@scm->fasl (unspecified)) (set! kd28e5@fasl-save (unspecified)) (set! kd28e7@fasl-load (unspecified)) (set! kd28e9@verbose? (unspecified)) (set! kd28eb@serialize-library (unspecified)) (set! kd28ed@load-serialized-library (unspecified)) (set! kd28ef@make-record-printer (unspecified)) (set! kd28f1@compile-core (unspecified)) (set! kd28f3@read-library-source-file (unspecified)) (set! kd28f5@make-parameter (unspecified)) (set! kd28f7@mosh-cache-dir (unspecified)) (set! kd298d@file-options-spec (unspecified)) (set! kd28d7@library-file-path->cache-path (lambda (kd298e@x) (call-with-values (lambda () (open-string-output-port)) (lambda (kd2994@kd2991 kd2995@kd2993) (let ((kd2998@extract kd2995@kd2993) (kd2999@p kd2994@kd2991)) (let ((kd299d@display-hex '#f)) (begin (set! kd299d@display-hex (lambda (kd29a6@n) (if (<= '0 kd29a6@n '9) (display kd29a6@n kd2999@p) (display (integer->char (+ (char->integer '#\a) (- kd29a6@n '10))) kd2999@p)))) (begin (let kd29a0@f ((kd299e@ls (string-split kd298e@x '#\/))) (if (not (null? kd299e@ls)) (begin (display '"_" kd2999@p) (for-each (lambda (kd29a2@c) (if (or (char<=? '#\a kd29a2@c '#\z) (char<=? '#\A kd29a2@c '#\Z) (char<=? '#\0 kd29a2@c '#\9) (memv kd29a2@c '(#\- #\. #\_ #\~))) (display kd29a2@c kd2999@p) (begin (display '"%" kd2999@p) (let ((kd29a4@n (char->integer kd29a2@c))) (begin (kd299d@display-hex (quotient kd29a4@n '16)) (kd299d@display-hex (remainder kd29a4@n '16))))))) (string->list (car kd299e@ls))) (kd29a0@f (cdr kd299e@ls))) (void))) (kd2998@extract))))))))) (set! kd2a08@kd28d7@library-file-path->cache-path kd28d7@library-file-path->cache-path) (set! kd28d9@read-annotated read) (set! kd2a09@kd28d9@read-annotated kd28d9@read-annotated) (set! kd28db@annotation-stripped (lambda (kd29a8@x) (kd28e1@annotation-expression kd29a8@x))) (set! kd2a0a@kd28db@annotation-stripped kd28db@annotation-stripped) (set! kd28dd@annotation? (lambda (kd29aa@x) (source-info kd29aa@x))) (set! kd2a0b@kd28dd@annotation? kd28dd@annotation?) (set! kd28df@annotation-source (lambda (kd29ac@x) (source-info kd29ac@x))) (set! kd2a0c@kd28df@annotation-source kd28df@annotation-source) (set! kd28e1@annotation-expression (lambda (kd29ae@x) (if (pair? kd29ae@x) (cons (car kd29ae@x) (cdr kd29ae@x)) (if (procedure? kd29ae@x) (set-source-info! kd29ae@x '#f) kd29ae@x)))) (set! kd2a0d@kd28e1@annotation-expression kd28e1@annotation-expression) (set! kd28e3@scm->fasl (lambda (kd29b0@filename) (string-append (kd28f7@mosh-cache-dir) '"/" (kd28d7@library-file-path->cache-path kd29b0@filename) '".mosh-fasl"))) (set! kd2a0e@kd28e3@scm->fasl kd28e3@scm->fasl) (set! kd28e5@fasl-save (lambda (kd29b2@filename kd29b3@obj) (call-with-port (open-file-output-port kd29b2@filename) (lambda (kd29b6@port) ((symbol-value 'fasl-write!) kd29b3@obj kd29b6@port))))) (set! kd2a0f@kd28e5@fasl-save kd28e5@fasl-save) (set! kd28e7@fasl-load (lambda (kd29b8@filename) (call-with-port (open-file-input-port kd29b8@filename) (symbol-value 'fasl-read!)))) (set! kd2a10@kd28e7@fasl-load kd28e7@fasl-load) (set! kd28e9@verbose? (symbol-value '%verbose)) (set! kd2a11@kd28e9@verbose? kd28e9@verbose?) (set! kd28eb@serialize-library (lambda (kd29ba@filename kd29bb@obj) (begin (if kd28e9@verbose? (format (current-error-port) '"serialize-library ~a\n..." kd29ba@filename) (void)) (let ((kd29be@expanded2core (symbol-value 'expanded2core))) (let ((kd29c0@compile (symbol-value 'compile-w/o-halt))) (let ((kd29c2@code kd29bb@obj)) (let ((kd29c4@pivot (cddddr (cddddr kd29c2@code)))) (let ((kd29c6@visit (kd29c0@compile (kd29be@expanded2core (car kd29c4@pivot))))) (begin (set-car! kd29c4@pivot kd29c6@visit) (let ((kd29c8@pivot (cdr kd29c4@pivot))) (let ((kd29ca@invoke (kd29c0@compile (kd29be@expanded2core (car kd29c8@pivot))))) (set-car! kd29c8@pivot kd29ca@invoke))))))))) (let ((kd29cc@fasl-file (kd28e3@scm->fasl kd29ba@filename))) (begin (if (file-exists? kd29cc@fasl-file) (delete-file kd29cc@fasl-file) (void)) ((call/cc (lambda (kd29d0@kd29ce) (lambda () (with-exception-handler (lambda (kd29d2@c) ((call/cc (lambda (kd29d4@kd29cf) (kd29d0@kd29ce (lambda () (if '#t (begin (if kd28e9@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" kd29ba@filename) (void)) (if (file-exists? kd29cc@fasl-file) (delete-file kd29cc@fasl-file) (void)) '#f) (kd29d4@kd29cf (lambda () (raise-continuable kd29d2@c)))))))))) (lambda () (kd28e5@fasl-save kd29cc@fasl-file kd29bb@obj)))))))))))) (set! kd2a12@kd28eb@serialize-library kd28eb@serialize-library) (set! kd28ed@load-serialized-library (lambda (kd29d6@filename kd29d7@obj) (and (kd28f7@mosh-cache-dir) (let ((kd29da@fasl-file (kd28e3@scm->fasl kd29d6@filename))) (if (and (file-exists? kd29da@fasl-file) ((symbol-value 'file-newer?) kd29da@fasl-file kd29d6@filename)) (let ((kd29dc@expanded2core (symbol-value 'expanded2core))) (let ((kd29de@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((kd29e0@code (kd28e7@fasl-load kd29da@fasl-file))) (let ((kd29e2@pivot (cddddr (cddddr kd29e0@code)))) (let ((kd29e4@visit (car kd29e2@pivot))) (let ((kd29e6@visit-proc (lambda () (kd29de@eval-compiled-core kd29e4@visit)))) (begin (set-car! kd29e2@pivot kd29e6@visit-proc) (let ((kd29e8@pivot (cdr kd29e2@pivot))) (let ((kd29ea@invoke (car kd29e8@pivot))) (begin (set-car! kd29e8@pivot (lambda () (kd29de@eval-compiled-core kd29ea@invoke))) (apply kd29d7@obj kd29e0@code))))))))))) '#f))))) (set! kd2a13@kd28ed@load-serialized-library kd28ed@load-serialized-library) (set! kd28ef@make-record-printer (lambda (kd29ec@name kd29ed@printer) (lambda kd29f0@x (begin (display '"record printer") (for-each display kd29f0@x))))) (set! kd2a14@kd28ef@make-record-printer kd28ef@make-record-printer) (set! kd28f1@compile-core (lambda kd29f2@x (apply error 'comile-core '"not implementated" kd29f2@x))) (set! kd2a15@kd28f1@compile-core kd28f1@compile-core) (set! kd28f3@read-library-source-file (lambda (kd29f4@file-name) (with-input-from-file kd29f4@file-name kd28d9@read-annotated))) (set! kd2a16@kd28f3@read-library-source-file kd28f3@read-library-source-file) (set! kd28f5@make-parameter (lambda kd2a04 (let ((kd2a05 (length kd2a04))) (if (= kd2a05 '1) (apply (lambda (kd29f6@x) (kd28f5@make-parameter kd29f6@x (lambda (kd29f8@x) kd29f8@x))) kd2a04) (if (= kd2a05 '2) (apply (lambda (kd29fa@x kd29fb@fender) (let ((kd29fe@x (kd29fb@fender kd29fa@x))) (lambda kd2a02 (let ((kd2a03 (length kd2a02))) (if (= kd2a03 '0) (apply (lambda () kd29fe@x) kd2a02) (if (= kd2a03 '1) (apply (lambda (kd2a00@v) (set! kd29fe@x (kd29fb@fender kd2a00@v))) kd2a02) (error 'apply '"invalid arg count"))))))) kd2a04) (error 'apply '"invalid arg count")))))) (set! kd2a17@kd28f5@make-parameter kd28f5@make-parameter) (set! kd28f7@mosh-cache-dir (kd28f5@make-parameter '#f)) (set! kd2a18@kd28f7@mosh-cache-dir kd28f7@mosh-cache-dir) (set! kd298d@file-options-spec (lambda (kd2a06@x) kd2a06@x)) (set! kd2a19@kd298d@file-options-spec kd298d@file-options-spec) (void))
(begin (set! kd2a1f@current-primitive-locations (unspecified)) (set! kd2a21@mutable? (unspecified)) (set! kd2a23@rewriter (unspecified)) (set! kd2a25@expanded->core (unspecified)) (set! kd2a27@compile-core-expr (unspecified)) (set! kd2a29@pretty-print (unspecified)) (set! kd2a2b@compile-core-expr-to-port (unspecified)) (set! kd2a1f@current-primitive-locations (kd2a17@kd28f5@make-parameter (lambda (kd2a2c@x) '#f) (lambda (kd2a2e@p) kd2a2e@p))) (set! kd2a6a@kd2a1f@current-primitive-locations kd2a1f@current-primitive-locations) (set! kd2a21@mutable? (lambda (kd2a30@x) (or (pair? kd2a30@x) (vector? kd2a30@x) (hashtable? kd2a30@x)))) (set! kd2a6b@kd2a21@mutable? kd2a21@mutable?) (set! kd2a23@rewriter (lambda (kd2a32@quote-hack?) (let ((kd2a35@f '#f)) (begin (set! kd2a35@f (lambda (kd2a36@x) (if (pair? kd2a36@x) (let ((kd2a38@t (car kd2a36@x))) (if (memv kd2a38@t '(quote)) (if (and kd2a32@quote-hack? (kd2a21@mutable? (cadr kd2a36@x))) (let ((kd2a3a@g (gensym))) (begin (set-symbol-value! kd2a3a@g (cadr kd2a36@x)) kd2a3a@g)) kd2a36@x) (if (memv kd2a38@t '(case-lambda)) (cons 'case-lambda (map (lambda (kd2a3c@x) (cons (car kd2a3c@x) (map kd2a35@f (cdr kd2a3c@x)))) (cdr kd2a36@x))) (if (memv kd2a38@t '(lambda)) (cons* 'lambda (cadr kd2a36@x) (map kd2a35@f (cddr kd2a36@x))) (if (memv kd2a38@t '(letrec)) (let ((kd2a3e@bindings (cadr kd2a36@x)) (kd2a3f@body* (cddr kd2a36@x))) (let ((kd2a42@lhs* (map car kd2a3e@bindings)) (kd2a43@rhs* (map cadr kd2a3e@bindings))) (cons* 'letrec (map list kd2a42@lhs* (map kd2a35@f kd2a43@rhs*)) (map kd2a35@f kd2a3f@body*)))) (if (memv kd2a38@t '(letrec*)) (let ((kd2a46@bindings (cadr kd2a36@x)) (kd2a47@body* (cddr kd2a36@x))) (let ((kd2a4a@lhs* (map car kd2a46@bindings)) (kd2a4b@rhs* (map cadr kd2a46@bindings))) (cons* 'letrec* (map list kd2a4a@lhs* (map kd2a35@f kd2a4b@rhs*)) (map kd2a35@f kd2a47@body*)))) (if (memv kd2a38@t '(library-letrec*)) (let ((kd2a4e@name (cadr kd2a36@x)) (kd2a4f@x (cdr kd2a36@x))) (let ((kd2a52@bindings (cadr kd2a4f@x)) (kd2a53@body* (cddr kd2a4f@x))) (let ((kd2a56@lhs* (map car kd2a52@bindings)) (kd2a57@lhs** (map cadr kd2a52@bindings)) (kd2a58@rhs* (map caddr kd2a52@bindings))) (cons* 'library-letrec* kd2a4e@name (map list kd2a56@lhs* kd2a57@lhs** (map kd2a35@f kd2a58@rhs*)) (map kd2a35@f kd2a53@body*))))) (if (memv kd2a38@t '(begin)) (cons 'begin (map kd2a35@f (cdr kd2a36@x))) (if (memv kd2a38@t '(set!)) (list 'set! (cadr kd2a36@x) (kd2a35@f (caddr kd2a36@x))) (if (memv kd2a38@t '(primitive)) (let ((kd2a5c@op (cadr kd2a36@x))) (let ((kd2a5e@t ((kd2a1f@current-primitive-locations) kd2a5c@op))) (if kd2a5e@t ((lambda (kd2a60@loc) kd2a60@loc) kd2a5e@t) kd2a5c@op))) (if (memv kd2a38@t '(define)) kd2a36@x (if (list? kd2a36@x) (map kd2a35@f kd2a36@x) (error 'rewrite '"invalid form ~s ~s" kd2a36@x (list? kd2a36@x)))))))))))))) kd2a36@x))) kd2a35@f)))) (set! kd2a6c@kd2a23@rewriter kd2a23@rewriter) (set! kd2a25@expanded->core (lambda (kd2a62@x) ((kd2a23@rewriter '#f) kd2a62@x))) (set! kd2a6d@kd2a25@expanded->core kd2a25@expanded->core) (set! kd2a27@compile-core-expr (lambda (kd2a64@x) ((kd2a23@rewriter '#f) kd2a64@x))) (set! kd2a6e@kd2a27@compile-core-expr kd2a27@compile-core-expr) (set! kd2a29@pretty-print write) (set! kd2a6f@kd2a29@pretty-print kd2a29@pretty-print) (set! kd2a2b@compile-core-expr-to-port (lambda (kd2a66@x kd2a67@p) (kd2a29@pretty-print ((kd2a23@rewriter '#f) kd2a66@x) kd2a67@p))) (set! kd2a70@kd2a2b@compile-core-expr-to-port kd2a2b@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! kd2abf@make-collection (unspecified)) (set! kd2ac1@current-library-collection (unspecified)) (set! kd2ac3@rp (unspecified)) (set! kd2acd@library? (unspecified)) (set! kd2acf@library-id (unspecified)) (set! kd2ad1@set-library-id! (unspecified)) (set! kd2ad3@library-name (unspecified)) (set! kd2ad5@set-library-name! (unspecified)) (set! kd2ad7@library-version (unspecified)) (set! kd2ad9@set-library-version! (unspecified)) (set! kd2adb@library-imp* (unspecified)) (set! kd2add@set-library-imp*! (unspecified)) (set! kd2adf@library-vis* (unspecified)) (set! kd2ae1@set-library-vis*! (unspecified)) (set! kd2ae3@library-inv* (unspecified)) (set! kd2ae5@set-library-inv*! (unspecified)) (set! kd2ae7@library-subst (unspecified)) (set! kd2ae9@set-library-subst! (unspecified)) (set! kd2aeb@library-env (unspecified)) (set! kd2aed@set-library-env! (unspecified)) (set! kd2aef@library-visit-state (unspecified)) (set! kd2af1@set-library-visit-state! (unspecified)) (set! kd2af3@library-invoke-state (unspecified)) (set! kd2af5@set-library-invoke-state! (unspecified)) (set! kd2af7@library-visit-code (unspecified)) (set! kd2af9@set-library-visit-code! (unspecified)) (set! kd2afb@library-invoke-code (unspecified)) (set! kd2afd@set-library-invoke-code! (unspecified)) (set! kd2aff@library-visible? (unspecified)) (set! kd2b01@set-library-visible?! (unspecified)) (set! kd2b03@library-source-file-name (unspecified)) (set! kd2b05@set-library-source-file-name! (unspecified)) (set! kd2b07@dummy (unspecified)) (set! kd2b09@find-dependencies (unspecified)) (set! kd2b0b@find-library-by (unspecified)) (set! kd2b0d@library-path (unspecified)) (set! kd2b0f@library-extensions (unspecified)) (set! kd2b11@library-name->file-name (unspecified)) (set! kd2b13@file-locator (unspecified)) (set! kd2b15@serialize-all (unspecified)) (set! kd2b17@current-precompiled-library-loader (unspecified)) (set! kd2b19@try-load-from-file (unspecified)) (set! kd2b1b@library-loader (unspecified)) (set! kd2b1d@current-library-expander (unspecified)) (set! kd2b1f@external-pending-libraries (unspecified)) (set! kd2b21@find-external-library (unspecified)) (set! kd2b23@find-library-by-name (unspecified)) (set! kd2b25@library-exists? (unspecified)) (set! kd2b27@find-library-by-spec/die (unspecified)) (set! kd2b29@label->binding-table (unspecified)) (set! kd2b2b@install-library-record (unspecified)) (set! kd2b2d@install-library (unspecified)) (set! kd2b2f@imported-label->binding (unspecified)) (set! kd2b31@invoke-library (unspecified)) (set! kd2b33@visit-library (unspecified)) (set! kd2b35@invoke-library-by-spec (unspecified)) (set! kd2b37@invoke-library-by-name (unspecified)) (set! kd2b39@installed-libraries (unspecified)) (set! kd2b3b@library-spec (unspecified)) (set! kd2abf@make-collection (lambda () (let ((kd2b3c@set '())) (let ((kd2b3f@set-cons '#f)) (begin (set! kd2b3f@set-cons (lambda (kd2b44@x kd2b45@ls) (if (memq kd2b44@x kd2b45@ls) kd2b45@ls (cons kd2b44@x kd2b45@ls)))) (lambda kd2b42 (let ((kd2b43 (length kd2b42))) (if (= kd2b43 '0) (apply (lambda () kd2b3c@set) kd2b42) (if (= kd2b43 '1) (apply (lambda (kd2b40@x) (set! kd2b3c@set (kd2b3f@set-cons kd2b40@x kd2b3c@set))) kd2b42) (error 'apply '"invalid arg count")))))))))) (set! kd2cb2@kd2abf@make-collection kd2abf@make-collection) (set! kd2ac1@current-library-collection (kd2a17@kd28f5@make-parameter (kd2abf@make-collection) (lambda (kd2b48@x) (begin (if (not (procedure? kd2b48@x)) (assertion-violation 'current-library-collection '"not a procedure" kd2b48@x) (void)) kd2b48@x)))) (set! kd2cb3@kd2ac1@current-library-collection kd2ac1@current-library-collection) (set! kd2ac3@rp (kd2a14@kd28ef@make-record-printer 'library (lambda (kd2b4a@x kd2b4b@p kd2b4c@wr) (begin (if (not (kd2acd@library? kd2b4a@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (kd2ad7@library-version kd2b4a@x)) (kd2ad3@library-name kd2b4a@x) (append (kd2ad3@library-name kd2b4a@x) (list (kd2ad7@library-version kd2b4a@x))))) kd2b4b@p))))) (set! kd2cb4@kd2ac3@rp kd2ac3@rp) (set! kd2acd@library? (lambda (kd2b50@x) (and (simple-struct? kd2b50@x) (eq? (simple-struct-name kd2b50@x) 'library)))) (set! kd2cb5@kd2acd@library? kd2acd@library?) (set! kd2acf@library-id (lambda (kd2b52@x) (simple-struct-ref kd2b52@x '0))) (set! kd2cb6@kd2acf@library-id kd2acf@library-id) (set! kd2ad1@set-library-id! (lambda (kd2b54@x kd2b55@val) (simple-struct-set! kd2b54@x '0 kd2b55@val))) (set! kd2cb7@kd2ad1@set-library-id! kd2ad1@set-library-id!) (set! kd2ad3@library-name (lambda (kd2b58@x) (simple-struct-ref kd2b58@x '1))) (set! kd2cb8@kd2ad3@library-name kd2ad3@library-name) (set! kd2ad5@set-library-name! (lambda (kd2b5a@x kd2b5b@val) (simple-struct-set! kd2b5a@x '1 kd2b5b@val))) (set! kd2cb9@kd2ad5@set-library-name! kd2ad5@set-library-name!) (set! kd2ad7@library-version (lambda (kd2b5e@x) (simple-struct-ref kd2b5e@x '2))) (set! kd2cba@kd2ad7@library-version kd2ad7@library-version) (set! kd2ad9@set-library-version! (lambda (kd2b60@x kd2b61@val) (simple-struct-set! kd2b60@x '2 kd2b61@val))) (set! kd2cbb@kd2ad9@set-library-version! kd2ad9@set-library-version!) (set! kd2adb@library-imp* (lambda (kd2b64@x) (simple-struct-ref kd2b64@x '3))) (set! kd2cbc@kd2adb@library-imp* kd2adb@library-imp*) (set! kd2add@set-library-imp*! (lambda (kd2b66@x kd2b67@val) (simple-struct-set! kd2b66@x '3 kd2b67@val))) (set! kd2cbd@kd2add@set-library-imp*! kd2add@set-library-imp*!) (set! kd2adf@library-vis* (lambda (kd2b6a@x) (simple-struct-ref kd2b6a@x '4))) (set! kd2cbe@kd2adf@library-vis* kd2adf@library-vis*) (set! kd2ae1@set-library-vis*! (lambda (kd2b6c@x kd2b6d@val) (simple-struct-set! kd2b6c@x '4 kd2b6d@val))) (set! kd2cbf@kd2ae1@set-library-vis*! kd2ae1@set-library-vis*!) (set! kd2ae3@library-inv* (lambda (kd2b70@x) (simple-struct-ref kd2b70@x '5))) (set! kd2cc0@kd2ae3@library-inv* kd2ae3@library-inv*) (set! kd2ae5@set-library-inv*! (lambda (kd2b72@x kd2b73@val) (simple-struct-set! kd2b72@x '5 kd2b73@val))) (set! kd2cc1@kd2ae5@set-library-inv*! kd2ae5@set-library-inv*!) (set! kd2ae7@library-subst (lambda (kd2b76@x) (simple-struct-ref kd2b76@x '6))) (set! kd2cc2@kd2ae7@library-subst kd2ae7@library-subst) (set! kd2ae9@set-library-subst! (lambda (kd2b78@x kd2b79@val) (simple-struct-set! kd2b78@x '6 kd2b79@val))) (set! kd2cc3@kd2ae9@set-library-subst! kd2ae9@set-library-subst!) (set! kd2aeb@library-env (lambda (kd2b7c@x) (simple-struct-ref kd2b7c@x '7))) (set! kd2cc4@kd2aeb@library-env kd2aeb@library-env) (set! kd2aed@set-library-env! (lambda (kd2b7e@x kd2b7f@val) (simple-struct-set! kd2b7e@x '7 kd2b7f@val))) (set! kd2cc5@kd2aed@set-library-env! kd2aed@set-library-env!) (set! kd2aef@library-visit-state (lambda (kd2b82@x) (simple-struct-ref kd2b82@x '8))) (set! kd2cc6@kd2aef@library-visit-state kd2aef@library-visit-state) (set! kd2af1@set-library-visit-state! (lambda (kd2b84@x kd2b85@val) (simple-struct-set! kd2b84@x '8 kd2b85@val))) (set! kd2cc7@kd2af1@set-library-visit-state! kd2af1@set-library-visit-state!) (set! kd2af3@library-invoke-state (lambda (kd2b88@x) (simple-struct-ref kd2b88@x '9))) (set! kd2cc8@kd2af3@library-invoke-state kd2af3@library-invoke-state) (set! kd2af5@set-library-invoke-state! (lambda (kd2b8a@x kd2b8b@val) (simple-struct-set! kd2b8a@x '9 kd2b8b@val))) (set! kd2cc9@kd2af5@set-library-invoke-state! kd2af5@set-library-invoke-state!) (set! kd2af7@library-visit-code (lambda (kd2b8e@x) (simple-struct-ref kd2b8e@x '10))) (set! kd2cca@kd2af7@library-visit-code kd2af7@library-visit-code) (set! kd2af9@set-library-visit-code! (lambda (kd2b90@x kd2b91@val) (simple-struct-set! kd2b90@x '10 kd2b91@val))) (set! kd2ccb@kd2af9@set-library-visit-code! kd2af9@set-library-visit-code!) (set! kd2afb@library-invoke-code (lambda (kd2b94@x) (simple-struct-ref kd2b94@x '11))) (set! kd2ccc@kd2afb@library-invoke-code kd2afb@library-invoke-code) (set! kd2afd@set-library-invoke-code! (lambda (kd2b96@x kd2b97@val) (simple-struct-set! kd2b96@x '11 kd2b97@val))) (set! kd2ccd@kd2afd@set-library-invoke-code! kd2afd@set-library-invoke-code!) (set! kd2aff@library-visible? (lambda (kd2b9a@x) (simple-struct-ref kd2b9a@x '12))) (set! kd2cce@kd2aff@library-visible? kd2aff@library-visible?) (set! kd2b01@set-library-visible?! (lambda (kd2b9c@x kd2b9d@val) (simple-struct-set! kd2b9c@x '12 kd2b9d@val))) (set! kd2ccf@kd2b01@set-library-visible?! kd2b01@set-library-visible?!) (set! kd2b03@library-source-file-name (lambda (kd2ba0@x) (simple-struct-ref kd2ba0@x '13))) (set! kd2cd0@kd2b03@library-source-file-name kd2b03@library-source-file-name) (set! kd2b05@set-library-source-file-name! (lambda (kd2ba2@x kd2ba3@val) (simple-struct-set! kd2ba2@x '13 kd2ba3@val))) (set! kd2cd1@kd2b05@set-library-source-file-name! kd2b05@set-library-source-file-name!) (set! kd2b07@dummy '3) (set! kd2cd2@kd2b07@dummy kd2b07@dummy) (set! kd2b09@find-dependencies (lambda (kd2ba6@ls) (if (null? kd2ba6@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! kd2cd3@kd2b09@find-dependencies kd2b09@find-dependencies) (set! kd2b0b@find-library-by (lambda (kd2ba8@pred) (let kd2bac@f ((kd2baa@ls ((kd2ac1@current-library-collection)))) (if (null? kd2baa@ls) '#f (if (kd2ba8@pred (car kd2baa@ls)) (car kd2baa@ls) (kd2bac@f (cdr kd2baa@ls))))))) (set! kd2cd4@kd2b0b@find-library-by kd2b0b@find-library-by) (set! kd2b0d@library-path (kd2a17@kd28f5@make-parameter '(".") (lambda (kd2bae@x) (if (and (list? kd2bae@x) (for-all string? kd2bae@x)) (map (lambda (kd2bb0@x) kd2bb0@x) kd2bae@x) (assertion-violation 'library-path '"not a list of strings" kd2bae@x))))) (set! kd2cd5@kd2b0d@library-path kd2b0d@library-path) (set! kd2b0f@library-extensions (kd2a17@kd28f5@make-parameter '(".sls" ".ss" ".scm") (lambda (kd2bb2@x) (if (and (list? kd2bb2@x) (for-all string? kd2bb2@x)) (map (lambda (kd2bb4@x) kd2bb4@x) kd2bb2@x) (assertion-violation 'library-extensions '"not a list of strings" kd2bb2@x))))) (set! kd2cd6@kd2b0f@library-extensions kd2b0f@library-extensions) (set! kd2b11@library-name->file-name (lambda (kd2bb6@x) (call-with-values (lambda () (open-string-output-port)) (lambda (kd2bbc@kd2bb9 kd2bbd@kd2bbb) (let ((kd2bc0@extract kd2bbd@kd2bbb) (kd2bc1@p kd2bbc@kd2bb9)) (let ((kd2bc5@display-hex '#f)) (begin (set! kd2bc5@display-hex (lambda (kd2bce@n) (if (<= '0 kd2bce@n '9) (display kd2bce@n kd2bc1@p) (display (integer->char (+ (char->integer '#\a) (- kd2bce@n '10))) kd2bc1@p)))) (begin (let kd2bc8@f ((kd2bc6@ls kd2bb6@x)) (if (not (null? kd2bc6@ls)) (begin (display '"/" kd2bc1@p) (for-each (lambda (kd2bca@c) (if (or (char<=? '#\a kd2bca@c '#\z) (char<=? '#\A kd2bca@c '#\Z) (char<=? '#\0 kd2bca@c '#\9) (memv kd2bca@c '(#\- #\. #\_ #\~))) (display kd2bca@c kd2bc1@p) (begin (display '"%" kd2bc1@p) (let ((kd2bcc@n (char->integer kd2bca@c))) (begin (kd2bc5@display-hex (quotient kd2bcc@n '16)) (kd2bc5@display-hex (remainder kd2bcc@n '16))))))) (string->list (symbol->string (car kd2bc6@ls)))) (kd2bc8@f (cdr kd2bc6@ls))) (void))) (kd2bc0@extract))))))))) (set! kd2cd7@kd2b11@library-name->file-name kd2b11@library-name->file-name) (set! kd2b13@file-locator (kd2a17@kd28f5@make-parameter (lambda (kd2bd0@x) (let ((kd2bd2@str (kd2b11@library-name->file-name kd2bd0@x))) (let kd2bda@f ((kd2bd4@ls (kd2b0d@library-path)) (kd2bd5@exts (kd2b0f@library-extensions)) (kd2bd6@failed-list '())) (if (null? kd2bd4@ls) (let ((kd2be4@kd2bdf '#f) (kd2be6@kd2be1 '#f) (kd2be8@kd2be0 '#f) (kd2beb@kd2bde '#f) (kd2bed@make-library-resolution-condition '#f) (kd2bef@kd2bdc '#f) (kd2bf1@kd2bdd '#f) (kd2bf3@library-resolution-condition? '#f) (kd2bf5@condition-library '#f) (kd2bf7@condition-files '#f)) (begin (set! kd2be4@kd2bdf (make-record-type-descriptor '&library-resolution kd4eee@kd4c35@&condition-rtd 'kd2be2 '#f '#f '#((immutable library) (immutable files)))) (set! kd2be6@kd2be1 '#f) (set! kd2be8@kd2be0 (make-record-constructor-descriptor kd2be4@kd2bdf kd4eef@kd4c37@&condition-rcd kd2be6@kd2be1)) (set! kd2beb@kd2bde (record-predicate kd2be4@kd2bdf)) (set! kd2bed@make-library-resolution-condition (record-constructor kd2be8@kd2be0)) (set! kd2bef@kd2bdc (record-accessor kd2be4@kd2bdf '0)) (set! kd2bf1@kd2bdd (record-accessor kd2be4@kd2bdf '1)) (set! kd2bf3@library-resolution-condition? (condition-predicate kd2be4@kd2bdf)) (set! kd2bf5@condition-library (condition-accessor kd2be4@kd2bdf kd2bef@kd2bdc)) (set! kd2bf7@condition-files (condition-accessor kd2be4@kd2bdf kd2bf1@kd2bdd)) (raise (condition (kd4f0e@kd4ccf@make-error) (kd4f30@kd4d2b@make-who-condition 'expander) (kd4ef4@kd4c8c@make-message-condition '"cannot locate library in library-path") (kd2bed@make-library-resolution-condition kd2bd0@x (reverse kd2bd6@failed-list)))))) (if (null? kd2bd5@exts) (kd2bda@f (cdr kd2bd4@ls) (kd2b0f@library-extensions) kd2bd6@failed-list) (let ((kd2bf8@name (string-append (car kd2bd4@ls) kd2bd2@str (car kd2bd5@exts)))) (if (file-exists? kd2bf8@name) kd2bf8@name (kd2bda@f kd2bd4@ls (cdr kd2bd5@exts) (cons kd2bf8@name kd2bd6@failed-list))))))))) (lambda (kd2bfa@f) (if (procedure? kd2bfa@f) kd2bfa@f (assertion-violation 'file-locator '"not a procedure" kd2bfa@f))))) (set! kd2cd8@kd2b13@file-locator kd2b13@file-locator) (set! kd2b15@serialize-all (lambda (kd2bfc@serialize kd2bfd@compile) (let ((kd2c01@library-desc '#f)) (begin (set! kd2c01@library-desc (lambda (kd2c04@x) (list (kd2acf@library-id kd2c04@x) (kd2ad3@library-name kd2c04@x)))) (for-each (lambda (kd2c02@x) (if (kd2b03@library-source-file-name kd2c02@x) (kd2bfc@serialize (kd2b03@library-source-file-name kd2c02@x) (list (kd2acf@library-id kd2c02@x) (kd2ad3@library-name kd2c02@x) (kd2ad7@library-version kd2c02@x) (map kd2c01@library-desc (kd2adb@library-imp* kd2c02@x)) (map kd2c01@library-desc (kd2adf@library-vis* kd2c02@x)) (map kd2c01@library-desc (kd2ae3@library-inv* kd2c02@x)) (kd2ae7@library-subst kd2c02@x) (kd2aeb@library-env kd2c02@x) (kd2bfd@compile (kd2af7@library-visit-code kd2c02@x)) (kd2bfd@compile (kd2afb@library-invoke-code kd2c02@x)) (kd2aff@library-visible? kd2c02@x))) (void))) ((kd2ac1@current-library-collection))))))) (set! kd2cd9@kd2b15@serialize-all kd2b15@serialize-all) (set! kd2b17@current-precompiled-library-loader (kd2a17@kd28f5@make-parameter (lambda (kd2c06@filename kd2c07@sk) '#f))) (set! kd2cda@kd2b17@current-precompiled-library-loader kd2b17@current-precompiled-library-loader) (set! kd2b19@try-load-from-file (lambda (kd2c0a@filename) ((kd2b17@current-precompiled-library-loader) kd2c0a@filename (lambda kd2c30 (let ((kd2c31 (length kd2c30))) (if (= kd2c31 '11) (apply (lambda (kd2c0c@id kd2c0d@name kd2c0e@ver kd2c0f@imp* kd2c10@vis* kd2c11@inv* kd2c12@exp-subst kd2c13@exp-env kd2c14@visit-proc kd2c15@invoke-proc kd2c16@visible?) (let kd2c24@f ((kd2c22@deps (append kd2c0f@imp* kd2c10@vis* kd2c11@inv*))) (if (null? kd2c22@deps) (begin (kd2b2d@install-library kd2c0c@id kd2c0d@name kd2c0e@ver kd2c0f@imp* kd2c10@vis* kd2c11@inv* kd2c12@exp-subst kd2c13@exp-env kd2c14@visit-proc kd2c15@invoke-proc '#f '#f kd2c16@visible? '#f) '#t) (let ((kd2c26@d (car kd2c22@deps))) (let ((kd2c28@label (car kd2c26@d)) (kd2c29@dname (cadr kd2c26@d))) (let ((kd2c2c@l (kd2b23@find-library-by-name kd2c29@dname))) (if (and (kd2acd@library? kd2c2c@l) (eq? kd2c28@label (kd2acf@library-id kd2c2c@l))) (kd2c24@f (cdr kd2c22@deps)) (begin (if kd2a11@kd28e9@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" kd2c0d@name kd2c29@dname kd2c0a@filename kd2c2c@l kd2c28@label (kd2acf@library-id kd2c2c@l)) (void)) '#f)))))))) kd2c30) (if (>= kd2c31 '0) (apply (lambda kd2c2e@others '#f) kd2c30) (error 'apply '"invalid arg count")))))))) (set! kd2cdb@kd2b19@try-load-from-file kd2b19@try-load-from-file) (set! kd2b1b@library-loader (kd2a17@kd28f5@make-parameter (lambda (kd2c32@x) (let ((kd2c34@file-name ((kd2b13@file-locator) kd2c32@x))) (if (not kd2c34@file-name) (assertion-violation '#f '"cannot file library" kd2c32@x) (or (kd2b19@try-load-from-file kd2c34@file-name) ((kd2b1d@current-library-expander) (kd2a16@kd28f3@read-library-source-file kd2c34@file-name) kd2c34@file-name (lambda (kd2c36@name) (if (not (fast-equal? kd2c36@name kd2c32@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (kd2c3c@kd2c39 kd2c3d@kd2c3b) (let ((kd2c40@e kd2c3d@kd2c3b) (kd2c41@p kd2c3c@kd2c39)) (begin (display '"expected to find library " kd2c41@p) (write kd2c32@x kd2c41@p) (display '" in file " kd2c41@p) (display kd2c34@file-name kd2c41@p) (display '", found " kd2c41@p) (write kd2c36@name kd2c41@p) (display '" instead" kd2c41@p) (kd2c40@e)))))) (void)))))))) (lambda (kd2c44@f) (if (procedure? kd2c44@f) kd2c44@f (assertion-violation 'library-locator '"not a procedure" kd2c44@f))))) (set! kd2cdc@kd2b1b@library-loader kd2b1b@library-loader) (set! kd2b1d@current-library-expander (kd2a17@kd28f5@make-parameter (lambda (kd2c46@x) (assertion-violation 'library-expander '"not initialized")) (lambda (kd2c48@f) (if (procedure? kd2c48@f) kd2c48@f (assertion-violation 'library-expander '"not a procedure" kd2c48@f))))) (set! kd2cdd@kd2b1d@current-library-expander kd2b1d@current-library-expander) (set! kd2b1f@external-pending-libraries (kd2a17@kd28f5@make-parameter '())) (set! kd2cde@kd2b1f@external-pending-libraries kd2b1f@external-pending-libraries) (set! kd2b21@find-external-library (lambda (kd2c4a@name) (begin (if (member kd2c4a@name (kd2b1f@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" kd2c4a@name) (void)) (let ((kd2c50@kd2c4d kd2b1f@external-pending-libraries) (kd2c51@kd2c4f (cons kd2c4a@name (kd2b1f@external-pending-libraries)))) (let ((kd2c54@swap (lambda () (let ((kd2c56@t (kd2c50@kd2c4d))) (begin (kd2c50@kd2c4d kd2c51@kd2c4f) (set! kd2c51@kd2c4f kd2c56@t)))))) (dynamic-wind kd2c54@swap (lambda () (begin ((kd2b1b@library-loader) kd2c4a@name) (or (kd2b0b@find-library-by (lambda (kd2c58@x) (fast-equal? (kd2ad3@library-name kd2c58@x) kd2c4a@name))) (assertion-violation '#f '"handling external library did not yield the correct library" kd2c4a@name)))) kd2c54@swap)))))) (set! kd2cdf@kd2b21@find-external-library kd2b21@find-external-library) (set! kd2b23@find-library-by-name (lambda (kd2c5a@name) (or (kd2b0b@find-library-by (lambda (kd2c5c@x) (fast-equal? (kd2ad3@library-name kd2c5c@x) kd2c5a@name))) (kd2b21@find-external-library kd2c5a@name)))) (set! kd2ce0@kd2b23@find-library-by-name kd2b23@find-library-by-name) (set! kd2b25@library-exists? (lambda (kd2c5e@name) (and (kd2b0b@find-library-by (lambda (kd2c60@x) (fast-equal? (kd2ad3@library-name kd2c60@x) kd2c5e@name))) '#t))) (set! kd2ce1@kd2b25@library-exists? kd2b25@library-exists?) (set! kd2b27@find-library-by-spec/die (lambda (kd2c62@spec) (let ((kd2c64@id (car kd2c62@spec))) (or (kd2b0b@find-library-by (lambda (kd2c66@x) (eq? kd2c64@id (kd2acf@library-id kd2c66@x)))) (assertion-violation '#f '"cannot find library with required spec" kd2c62@spec))))) (set! kd2ce2@kd2b27@find-library-by-spec/die kd2b27@find-library-by-spec/die) (set! kd2b29@label->binding-table (make-eq-hashtable)) (set! kd2ce3@kd2b29@label->binding-table kd2b29@label->binding-table) (set! kd2b2b@install-library-record (lambda (kd2c68@lib) (begin (let ((kd2c6a@exp-env (kd2aeb@library-env kd2c68@lib))) (for-each (lambda (kd2c6c@x) (let ((kd2c6e@label (car kd2c6c@x)) (kd2c6f@binding (cdr kd2c6c@x))) (let ((kd2c72@binding (let ((kd2c74@t (car kd2c6f@binding))) (if (memv kd2c74@t '(global)) (cons 'global (cons kd2c68@lib (cdr kd2c6f@binding))) (if (memv kd2c74@t '(global-macro)) (cons 'global-macro (cons kd2c68@lib (cdr kd2c6f@binding))) (if (memv kd2c74@t '(global-macro!)) (cons 'global-macro! (cons kd2c68@lib (cdr kd2c6f@binding))) kd2c6f@binding)))))) (begin (if (hashtable-ref kd2b29@label->binding-table kd2c6e@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" kd2c6e@label (hashtable-ref kd2b29@label->binding-table kd2c6e@label '#f) kd2c72@binding) (exit)) (void)) (hashtable-set! kd2b29@label->binding-table kd2c6e@label kd2c72@binding))))) kd2c6a@exp-env)) ((kd2ac1@current-library-collection) kd2c68@lib)))) (set! kd2ce4@kd2b2b@install-library-record kd2b2b@install-library-record) (set! kd2b2d@install-library (lambda (kd2c76@id kd2c77@name kd2c78@ver kd2c79@imp* kd2c7a@vis* kd2c7b@inv* kd2c7c@exp-subst kd2c7d@exp-env kd2c7e@visit-proc kd2c7f@invoke-proc kd2c80@visit-code kd2c81@invoke-code kd2c82@visible? kd2c83@source-file-name) (let ((kd2c92@imp-lib* (map kd2b27@find-library-by-spec/die kd2c79@imp*)) (kd2c93@vis-lib* (map kd2b27@find-library-by-spec/die kd2c7a@vis*)) (kd2c94@inv-lib* (map kd2b27@find-library-by-spec/die kd2c7b@inv*))) (begin (if (not (and (symbol? kd2c76@id) (list? kd2c77@name) (list? kd2c78@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" kd2c76@id kd2c77@name kd2c78@ver) (void)) (if (kd2b25@library-exists? kd2c77@name) (assertion-violation 'install-library '"library is already installed" kd2c77@name) (void)) (let ((kd2c98@lib (make-simple-struct 'library '15 (list kd2c76@id kd2c77@name kd2c78@ver kd2c92@imp-lib* kd2c93@vis-lib* kd2c94@inv-lib* kd2c7c@exp-subst kd2c7d@exp-env kd2c7e@visit-proc kd2c7f@invoke-proc kd2c80@visit-code kd2c81@invoke-code kd2c82@visible? kd2c83@source-file-name)))) (kd2b2b@install-library-record kd2c98@lib)))))) (set! kd2ce5@kd2b2d@install-library kd2b2d@install-library) (set! kd2b2f@imported-label->binding (lambda (kd2c9a@lab) (hashtable-ref kd2b29@label->binding-table kd2c9a@lab '#f))) (set! kd2ce6@kd2b2f@imported-label->binding kd2b2f@imported-label->binding) (set! kd2b31@invoke-library (lambda (kd2c9c@lib) (let ((kd2c9e@invoke (kd2af3@library-invoke-state kd2c9c@lib))) (if (procedure? kd2c9e@invoke) (begin (kd2af5@set-library-invoke-state! kd2c9c@lib (lambda () (assertion-violation 'invoke '"circularity detected" kd2c9c@lib))) (for-each kd2b31@invoke-library (kd2ae3@library-inv* kd2c9c@lib)) (kd2af5@set-library-invoke-state! kd2c9c@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" kd2c9c@lib))) (kd2c9e@invoke) (kd2af5@set-library-invoke-state! kd2c9c@lib '#t)) (void))))) (set! kd2ce7@kd2b31@invoke-library kd2b31@invoke-library) (set! kd2b33@visit-library (lambda (kd2ca0@lib) (let ((kd2ca2@visit (kd2aef@library-visit-state kd2ca0@lib))) (if (procedure? kd2ca2@visit) (begin (kd2af1@set-library-visit-state! kd2ca0@lib (lambda () (assertion-violation 'visit '"circularity detected" kd2ca0@lib))) (for-each kd2b31@invoke-library (kd2adf@library-vis* kd2ca0@lib)) (kd2af1@set-library-visit-state! kd2ca0@lib (lambda () (assertion-violation 'invoke '"first visit did not return" kd2ca0@lib))) (kd2ca2@visit) (kd2af1@set-library-visit-state! kd2ca0@lib '#t)) (void))))) (set! kd2ce8@kd2b33@visit-library kd2b33@visit-library) (set! kd2b35@invoke-library-by-spec (lambda (kd2ca4@spec) (kd2b31@invoke-library (kd2b27@find-library-by-spec/die kd2ca4@spec)))) (set! kd2ce9@kd2b35@invoke-library-by-spec kd2b35@invoke-library-by-spec) (set! kd2b37@invoke-library-by-name (lambda (kd2ca6@name) (kd2b31@invoke-library (kd2b23@find-library-by-name kd2ca6@name)))) (set! kd2cea@kd2b37@invoke-library-by-name kd2b37@invoke-library-by-name) (set! kd2b39@installed-libraries (lambda kd2cae (let ((kd2caf (length kd2cae))) (if (= kd2caf '1) (apply (lambda (kd2ca8@all?) (let kd2cac@f ((kd2caa@ls ((kd2ac1@current-library-collection)))) (if (null? kd2caa@ls) '() (if (or kd2ca8@all? (kd2aff@library-visible? (car kd2caa@ls))) (cons (car kd2caa@ls) (kd2cac@f (cdr kd2caa@ls))) (kd2cac@f (cdr kd2caa@ls)))))) kd2cae) (if (= kd2caf '0) (apply (lambda () (kd2b39@installed-libraries '#f)) kd2cae) (error 'apply '"invalid arg count")))))) (set! kd2ceb@kd2b39@installed-libraries kd2b39@installed-libraries) (set! kd2b3b@library-spec (lambda (kd2cb0@x) (begin (if (not (kd2acd@library? kd2cb0@x)) (assertion-violation 'library-spec '"not a library" kd2cb0@x) (void)) (list (kd2acf@library-id kd2cb0@x) (kd2ad3@library-name kd2cb0@x) (kd2ad7@library-version kd2cb0@x))))) (set! kd2cec@kd2b3b@library-spec kd2b3b@library-spec) (void))
(begin (set! kd2cf0@build-global-define (unspecified)) (set! kd2d61@build-lambda (unspecified)) (set! kd2d63@build-case-lambda (unspecified)) (set! kd2d91@build-sequence (unspecified)) (set! kd2d93@build-void (unspecified)) (set! kd2d95@build-letrec (unspecified)) (set! kd2d97@build-let (unspecified)) (set! kd2d99@build-named-let (unspecified)) (set! kd2d9b@build-letrec* (unspecified)) (set! kd2d9d@build-library-letrec* (unspecified)) (set! kd2d9f@build-receive (unspecified)) (set! kd2cf0@build-global-define (lambda (kd2da0@x) (kd2d93@build-void))) (set! kd2e34@kd2cf0@build-global-define kd2cf0@build-global-define) (set! kd2d61@build-lambda (lambda (kd2da2@ae kd2da3@vars kd2da4@exp) (list 'lambda kd2da3@vars kd2da4@exp))) (set! kd2e35@kd2d61@build-lambda kd2d61@build-lambda) (set! kd2d63@build-case-lambda (lambda (kd2da8@ae kd2da9@vars* kd2daa@exp*) (let ((kd2daf@build-error '#f) (kd2db1@build-pred '#f) (kd2db3@build-apply '#f) (kd2db5@expand-case-lambda '#f)) (begin (set! kd2daf@build-error (lambda (kd2de6@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! kd2db1@build-pred (lambda (kd2dce@ae kd2dcf@n kd2dd0@vars) (call-with-values (lambda () (let kd2ddc@f ((kd2dd8@vars kd2dd0@vars) (kd2dd9@count '0)) (if (pair? kd2dd8@vars) (kd2ddc@f (cdr kd2dd8@vars) (+ kd2dd9@count '1)) (if (null? kd2dd8@vars) (values kd2dd9@count '=) (values kd2dd9@count '>=))))) (lambda (kd2dde@kd2dd5 kd2ddf@kd2dd7) (let ((kd2de2@pred kd2ddf@kd2dd7) (kd2de3@count kd2dde@kd2dd5)) (list (list 'primitive kd2de2@pred) kd2dcf@n (list 'quote kd2de3@count))))))) (set! kd2db3@build-apply (lambda (kd2dc6@ae kd2dc7@g kd2dc8@vars kd2dc9@exp) (list '(primitive apply) (kd2d61@build-lambda kd2dc6@ae kd2dc8@vars kd2dc9@exp) kd2dc7@g))) (set! kd2db5@expand-case-lambda (lambda (kd2db6@ae kd2db7@vars kd2db8@exp*) (let ((kd2dbc@g (gensym)) (kd2dbd@n (gensym))) (list 'lambda kd2dbc@g (kd2d97@build-let kd2db6@ae (list kd2dbd@n) (list (list '(primitive length) kd2dbc@g)) (let kd2dc4@f ((kd2dc0@vars* kd2da9@vars*) (kd2dc1@exp* kd2db8@exp*)) (if (null? kd2dc0@vars*) (kd2daf@build-error kd2db6@ae) (list 'if (kd2db1@build-pred kd2db6@ae kd2dbd@n (car kd2dc0@vars*)) (kd2db3@build-apply kd2db6@ae kd2dbc@g (car kd2dc0@vars*) (car kd2dc1@exp*)) (kd2dc4@f (cdr kd2dc0@vars*) (cdr kd2dc1@exp*)))))))))) (if (= (length kd2daa@exp*) '1) (kd2d61@build-lambda kd2da8@ae (car kd2da9@vars*) (car kd2daa@exp*)) (kd2db5@expand-case-lambda kd2da8@ae kd2da9@vars* kd2daa@exp*)))))) (set! kd2e36@kd2d63@build-case-lambda kd2d63@build-case-lambda) (set! kd2d91@build-sequence (lambda (kd2de8@ae kd2de9@exps) (let kd2dee@loop ((kd2dec@exps kd2de9@exps)) (if (null? (cdr kd2dec@exps)) (car kd2dec@exps) (if (equal? (car kd2dec@exps) (kd2d93@build-void)) (kd2dee@loop (cdr kd2dec@exps)) (cons 'begin kd2dec@exps)))))) (set! kd2e37@kd2d91@build-sequence kd2d91@build-sequence) (set! kd2d93@build-void (lambda () '((primitive void)))) (set! kd2e38@kd2d93@build-void kd2d93@build-void) (set! kd2d95@build-letrec (lambda (kd2df0@ae kd2df1@vars kd2df2@val-exps kd2df3@body-exp) (if (null? kd2df1@vars) kd2df3@body-exp (list 'letrec (map list kd2df1@vars kd2df2@val-exps) kd2df3@body-exp)))) (set! kd2e39@kd2d95@build-letrec kd2d95@build-letrec) (set! kd2d97@build-let (lambda (kd2df8@ae kd2df9@vars kd2dfa@val-exps kd2dfb@body-exp) (if (null? kd2df9@vars) kd2dfb@body-exp (list 'let (map list kd2df9@vars kd2dfa@val-exps) kd2dfb@body-exp)))) (set! kd2e3a@kd2d97@build-let kd2d97@build-let) (set! kd2d99@build-named-let (lambda (kd2e00@ae kd2e01@name kd2e02@vars kd2e03@val-exps kd2e04@body-exp) (list 'let kd2e01@name (map list kd2e02@vars kd2e03@val-exps) kd2e04@body-exp))) (set! kd2e3b@kd2d99@build-named-let kd2d99@build-named-let) (set! kd2d9b@build-letrec* (lambda (kd2e0a@ae kd2e0b@vars kd2e0c@val-exps kd2e0d@body-exp) (if (null? kd2e0b@vars) kd2e0d@body-exp (kd2d97@build-let kd2e0a@ae kd2e0b@vars (map (lambda (kd2e12@x) (list 'quote '#f)) kd2e0b@vars) (kd2d91@build-sequence kd2e0a@ae (append (map (lambda (kd2e14@lhs kd2e15@rhs) (list 'set! kd2e14@lhs kd2e15@rhs)) kd2e0b@vars kd2e0c@val-exps) (list kd2e0d@body-exp))))))) (set! kd2e3c@kd2d9b@build-letrec* kd2d9b@build-letrec*) (set! kd2d9d@build-library-letrec* (lambda (kd2e18@ae kd2e19@name kd2e1a@vars kd2e1b@locs kd2e1c@val-exps kd2e1d@body-exp) (cons 'begin (append (map (lambda (kd2e24@var) (cons 'set! (cons kd2e24@var '((unspecified))))) kd2e1a@vars) (append (apply append (map (lambda (kd2e26@var kd2e27@loc kd2e28@val-exp) (list (list 'set! kd2e26@var kd2e28@val-exp) (list 'set! kd2e27@loc kd2e26@var))) kd2e1a@vars kd2e1b@locs kd2e1c@val-exps)) (list kd2e1d@body-exp)))))) (set! kd2e3d@kd2d9d@build-library-letrec* kd2d9d@build-library-letrec*) (set! kd2d9f@build-receive (lambda (kd2e2c@ae kd2e2d@vars kd2e2e@producer kd2e2f@body*) (begin (display '"************** in ") (cons 'receive (cons kd2e2d@vars (cons kd2e2e@producer kd2e2f@body*)))))) (set! kd2e3e@kd2d9f@build-receive kd2d9f@build-receive) (void))
(begin (set! kd2e4d@file-options-macro (unspecified)) (set! kd2e4f@set-cons (unspecified)) (set! kd2e51@set-union (unspecified)) (set! kd2e56@top-mark* (unspecified)) (set! kd2e58@top-marked? (unspecified)) (set! kd2e5a@gen-lexical (unspecified)) (set! kd2e5c@gen-global (unspecified)) (set! kd2e5e@gen-label (unspecified)) (set! kd2e60@gen-top-level-label (unspecified)) (set! kd2e62@gen-define-label+loc (unspecified)) (set! kd2e64@gen-define-label (unspecified)) (set! kd2e6e@rib? (unspecified)) (set! kd2e70@rib-sym* (unspecified)) (set! kd2e72@set-rib-sym*! (unspecified)) (set! kd2e74@rib-mark** (unspecified)) (set! kd2e76@set-rib-mark**! (unspecified)) (set! kd2e78@rib-label* (unspecified)) (set! kd2e7a@set-rib-label*! (unspecified)) (set! kd2e7c@rib-sealed/freq (unspecified)) (set! kd2e7e@set-rib-sealed/freq! (unspecified)) (set! kd2e80@rib-cache (unspecified)) (set! kd2e82@set-rib-cache! (unspecified)) (set! kd2e84@dummy (unspecified)) (set! kd2e86@make-empty-rib (unspecified)) (set! kd2e88@extend-rib! (unspecified)) (set! kd2e8a@extend-rib/nc! (unspecified)) (set! kd2e8c@make-rib-map (unspecified)) (set! kd2e8e@seal-rib! (unspecified)) (set! kd2e90@unseal-rib! (unspecified)) (set! kd2e92@make-full-rib (unspecified)) (set! kd2e94@rp (unspecified)) (set! kd2e9e@stx? (unspecified)) (set! kd2ea0@stx-expr (unspecified)) (set! kd2ea2@set-stx-expr! (unspecified)) (set! kd2ea4@stx-mark* (unspecified)) (set! kd2ea6@set-stx-mark*! (unspecified)) (set! kd2ea8@stx-subst* (unspecified)) (set! kd2eaa@set-stx-subst*! (unspecified)) (set! kd2eac@stx-ae* (unspecified)) (set! kd2eae@set-stx-ae*! (unspecified)) (set! kd2eb0@dummy (unspecified)) (set! kd2eb2@datum->stx (unspecified)) (set! kd2eb4@gen-mark (unspecified)) (set! kd2eb6@anti-mark (unspecified)) (set! kd2eb8@anti-mark? (unspecified)) (set! kd2eba@mkstx (unspecified)) (set! kd2ebc@add-mark (unspecified)) (set! kd2ebe@add-subst (unspecified)) (set! kd2ec0@syntax-kind? (unspecified)) (set! kd2ec2@syntax-vector->list (unspecified)) (set! kd2ec4@syntax-pair? (unspecified)) (set! kd2ec6@syntax-vector? (unspecified)) (set! kd2ec8@syntax-null? (unspecified)) (set! kd2eca@syntax-list? (unspecified)) (set! kd2ecc@syntax-car (unspecified)) (set! kd2ece@syntax-cdr (unspecified)) (set! kd2ed0@syntax->list (unspecified)) (set! kd2ed2@id? (unspecified)) (set! kd2ed4@id->sym (unspecified)) (set! kd2ed6@bound-id=? (unspecified)) (set! kd2ed8@free-id=? (unspecified)) (set! kd2eda@valid-bound-ids? (unspecified)) (set! kd2edc@distinct-bound-ids? (unspecified)) (set! kd2ede@bound-id-member? (unspecified)) (set! kd2ee0@self-evaluating? (unspecified)) (set! kd2ee2@strip-annotations (unspecified)) (set! kd2ee4@strip (unspecified)) (set! kd2ee6@stx->datum (unspecified)) (set! kd2ee8@id->label (unspecified)) (set! kd2eea@label->binding (unspecified)) (set! kd2eec@make-binding (unspecified)) (set! kd2eee@binding-type (unspecified)) (set! kd2ef0@binding-value (unspecified)) (set! kd2ef2@raise-unbound-error (unspecified)) (set! kd2ef4@syntax-type (unspecified)) (set! kd2f02@sanitize-binding (unspecified)) (set! kd2f04@make-variable-transformer (unspecified)) (set! kd2f06@variable-transformer? (unspecified)) (set! kd2f08@variable-transformer-procedure (unspecified)) (set! kd2f0a@make-eval-transformer (unspecified)) (set! kd305b@parse-define (unspecified)) (set! kd305d@parse-define-syntax (unspecified)) (set! kd305f@scheme-stx-hashtable (unspecified)) (set! kd3061@scheme-stx (unspecified)) (set! kd3063@lexical-var (unspecified)) (set! kd3065@lexical-mutable? (unspecified)) (set! kd3067@set-lexical-mutable! (unspecified)) (set! kd3069@add-lexical (unspecified)) (set! kd306b@add-lexicals (unspecified)) (set! kd306d@letrec-helper (unspecified)) (set! kd306f@let-transformer (unspecified)) (set! kd3071@letrec-transformer (unspecified)) (set! kd3073@letrec*-transformer (unspecified)) (set! kd3075@fluid-let-syntax-transformer (unspecified)) (set! kd3077@type-descriptor-transformer (unspecified)) (set! kd3079@record-type-descriptor-transformer (unspecified)) (set! kd307b@record-constructor-descriptor-transformer (unspecified)) (set! kd307d@when-macro (unspecified)) (set! kd307f@unless-macro (unspecified)) (set! kd3081@if-transformer (unspecified)) (set! kd3083@and-transformer (unspecified)) (set! kd3085@or-transformer (unspecified)) (set! kd3087@case-macro (unspecified)) (set! kd3089@quote-transformer (unspecified)) (set! kd308b@case-lambda-transformer (unspecified)) (set! kd308d@lambda-transformer (unspecified)) (set! kd308f@bless (unspecified)) (set! kd3091@with-syntax-macro (unspecified)) (set! kd3093@invalid-fmls-error (unspecified)) (set! kd3095@let-macro (unspecified)) (set! kd3097@let-values-macro (unspecified)) (set! kd3099@let*-values-macro (unspecified)) (set! kd309b@trace-lambda-macro (unspecified)) (set! kd309d@trace-define-macro (unspecified)) (set! kd309f@trace-define-syntax-macro (unspecified)) (set! kd30a1@trace-let/rec-syntax (unspecified)) (set! kd30a3@trace-let-syntax-macro (unspecified)) (set! kd30a5@trace-letrec-syntax-macro (unspecified)) (set! kd30a7@guard-macro (unspecified)) (set! kd30a9@define-enumeration-macro (unspecified)) (set! kd30ab@time-macro (unspecified)) (set! kd30ad@delay-macro (unspecified)) (set! kd30af@assert-macro (unspecified)) (set! kd30b1@endianness-macro (unspecified)) (set! kd30b3@identifier-syntax-macro (unspecified)) (set! kd30b5@do-macro (unspecified)) (set! kd30b7@let*-macro (unspecified)) (set! kd30b9@or-macro (unspecified)) (set! kd30bb@and-macro (unspecified)) (set! kd30bd@cond-macro (unspecified)) (set! kd30bf@do-include (unspecified)) (set! kd30c1@include-macro (unspecified)) (set! kd30c3@include-into-macro (unspecified)) (set! kd30c5@syntax-rules-macro (unspecified)) (set! kd30c7@quasiquote-macro (unspecified)) (set! kd30c9@quasisyntax-macro (unspecified)) (set! kd30cb@define-struct-macro (unspecified)) (set! kd30cd@define-record-type-macro (unspecified)) (set! kd30cf@define-condition-type-macro (unspecified)) (set! kd30d1@incorrect-usage-macro (unspecified)) (set! kd30d3@parameterize-macro (unspecified)) (set! kd30d5@foreign-call-transformer (unspecified)) (set! kd30d7@convert-pattern (unspecified)) (set! kd30d9@syntax-dispatch (unspecified)) (set! kd30db@ellipsis? (unspecified)) (set! kd30dd@underscore? (unspecified)) (set! kd30df@verify-literals (unspecified)) (set! kd30e1@syntax-case-transformer (unspecified)) (set! kd30e3@ellipsis-map (unspecified)) (set! kd30e5@syntax-transformer (unspecified)) (set! kd30e7@core-macro-transformer (unspecified)) (set! kd30e9@symbol-macro (unspecified)) (set! kd30eb@macro-transformer (unspecified)) (set! kd30ed@local-macro-transformer (unspecified)) (set! kd30ef@do-macro-call (unspecified)) (set! kd30f1@chi-macro (unspecified)) (set! kd30f3@chi-local-macro (unspecified)) (set! kd30f5@chi-global-macro (unspecified)) (set! kd30f7@chi-expr* (unspecified)) (set! kd30f9@chi-application (unspecified)) (set! kd30fb@chi-expr (unspecified)) (set! kd30fd@chi-set! (unspecified)) (set! kd30ff@verify-formals (unspecified)) (set! kd3101@chi-lambda-clause (unspecified)) (set! kd3103@chi-lambda-clause* (unspecified)) (set! kd3105@chi-defun (unspecified)) (set! kd3107@chi-rhs (unspecified)) (set! kd3109@expand-interaction-rhs*/init* (unspecified)) (set! kd310b@chi-rhs* (unspecified)) (set! kd310d@find-bound=? (unspecified)) (set! kd310f@find-dups (unspecified)) (set! kd3111@chi-internal (unspecified)) (set! kd3113@parse-module (unspecified)) (set! kd311d@module-interface? (unspecified)) (set! kd311f@module-interface-first-mark (unspecified)) (set! kd3121@set-module-interface-first-mark! (unspecified)) (set! kd3123@module-interface-exp-id-vec (unspecified)) (set! kd3125@set-module-interface-exp-id-vec! (unspecified)) (set! kd3127@module-interface-exp-lab-vec (unspecified)) (set! kd3129@set-module-interface-exp-lab-vec! (unspecified)) (set! kd312b@dummy (unspecified)) (set! kd312d@module-interface-exp-id* (unspecified)) (set! kd312f@chi-internal-module (unspecified)) (set! kd3131@chi-body* (unspecified)) (set! kd3133@expand-transformer (unspecified)) (set! kd3135@parse-exports (unspecified)) (set! kd3137@parse-library-name (unspecified)) (set! kd3139@parse-library (unspecified)) (set! kd313b@parse-import-spec* (unspecified)) (set! kd313d@make-top-rib (unspecified)) (set! kd313f@make-collector (unspecified)) (set! kd3141@inv-collector (unspecified)) (set! kd3143@vis-collector (unspecified)) (set! kd3145@imp-collector (unspecified)) (set! kd3147@chi-library-internal (unspecified)) (set! kd3149@chi-interaction-expr (unspecified)) (set! kd314b@library-body-expander (unspecified)) (set! kd314d@core-library-expander (unspecified)) (set! kd314f@parse-top-level-program (unspecified)) (set! kd3151@top-level-expander (unspecified)) (set! kd3153@rp (unspecified)) (set! kd315d@env? (unspecified)) (set! kd315f@env-names (unspecified)) (set! kd3161@set-env-names! (unspecified)) (set! kd3163@env-labels (unspecified)) (set! kd3165@set-env-labels! (unspecified)) (set! kd3167@env-itc (unspecified)) (set! kd3169@set-env-itc! (unspecified)) (set! kd316b@dummy (unspecified)) (set! kd316d@rp (unspecified)) (set! kd3177@interaction-env? (unspecified)) (set! kd3179@interaction-env-rib (unspecified)) (set! kd317b@set-interaction-env-rib! (unspecified)) (set! kd317d@interaction-env-r (unspecified)) (set! kd317f@set-interaction-env-r! (unspecified)) (set! kd3181@interaction-env-locs (unspecified)) (set! kd3183@set-interaction-env-locs! (unspecified)) (set! kd3185@dummy (unspecified)) (set! kd3187@interaction-environment-symbols (unspecified)) (set! kd3189@environment-bindings (unspecified)) (set! kd318b@parse-binding (unspecified)) (set! kd318d@environment? (unspecified)) (set! kd318f@environment-symbols (unspecified)) (set! kd3191@environment (unspecified)) (set! kd3193@null-environment (unspecified)) (set! kd3195@scheme-report-environment (unspecified)) (set! kd3197@expand (unspecified)) (set! kd3199@eval (unspecified)) (set! kd319b@library-expander (unspecified)) (set! kd319d@boot-library-expand (unspecified)) (set! kd319f@rev-map-append (unspecified)) (set! kd31a1@build-exports (unspecified)) (set! kd31a3@make-export-subst (unspecified)) (set! kd31a5@make-export-env/macros (unspecified)) (set! kd31a7@generate-temporaries (unspecified)) (set! kd31a9@free-identifier=? (unspecified)) (set! kd31ab@bound-identifier=? (unspecified)) (set! kd31ad@make-source-condition (unspecified)) (set! kd31af@extract-position-condition (unspecified)) (set! kd31b1@expression-position (unspecified)) (set! kd31b3@assertion-error (unspecified)) (set! kd31b5@syntax-error (unspecified)) (set! kd31b7@syntax-violation* (unspecified)) (set! kd31b9@syntax-violation (unspecified)) (set! kd31bb@identifier? (unspecified)) (set! kd31bd@datum->syntax (unspecified)) (set! kd31bf@syntax->datum (unspecified)) (set! kd31c1@ungensym-all (unspecified)) (set! kd31c3@compile-r6rs-top-level (unspecified)) (set! kd31c5@pre-compile-r6rs-top-level (unspecified)) (set! kd31c7@interaction-environment (unspecified)) (set! kd31c9@top-level-context (unspecified)) (set! kd2e4d@file-options-macro (lambda (kd31ca@x) (let ((kd31cd@valid-option? '#f)) (begin (set! kd31cd@valid-option? (lambda (kd31d6@x) (and (kd2ed2@id? kd31d6@x) (memq (kd2ed4@id->sym kd31d6@x) '(no-fail no-create no-truncate))))) (let ((kd31ce@t kd31ca@x)) (let ((kd31d0@ls/false (kd30d9@syntax-dispatch kd31ce@t '(_ . each-any)))) (if (and kd31d0@ls/false (apply (lambda (kd31d2@opt*) (for-all kd31cd@valid-option? kd31d2@opt*)) kd31d0@ls/false)) (apply (lambda (kd31d4@opt*) (kd308f@bless (list 'make-file-options (list 'quote kd31d4@opt*)))) kd31d0@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd31ce@t)))))))) (set! kd4b20@kd2e4d@file-options-macro kd2e4d@file-options-macro) (set! kd2e4f@set-cons (lambda (kd31d8@x kd31d9@ls) (if (memq kd31d8@x kd31d9@ls) kd31d9@ls (cons kd31d8@x kd31d9@ls)))) (set! kd4b21@kd2e4f@set-cons kd2e4f@set-cons) (set! kd2e51@set-union (lambda (kd31dc@ls1 kd31dd@ls2) (if (null? kd31dc@ls1) kd31dd@ls2 (if (memq (car kd31dc@ls1) kd31dd@ls2) (kd2e51@set-union (cdr kd31dc@ls1) kd31dd@ls2) (cons (car kd31dc@ls1) (kd2e51@set-union (cdr kd31dc@ls1) kd31dd@ls2)))))) (set! kd4b22@kd2e51@set-union kd2e51@set-union) (set! kd2e56@top-mark* '(top)) (set! kd4b23@kd2e56@top-mark* kd2e56@top-mark*) (set! kd2e58@top-marked? (lambda (kd31e0@m*) (memq 'top kd31e0@m*))) (set! kd4b24@kd2e58@top-marked? kd2e58@top-marked?) (set! kd2e5a@gen-lexical (lambda (kd31e2@sym) (if (symbol? kd31e2@sym) (gensym kd31e2@sym) (if (kd2e9e@stx? kd31e2@sym) (kd2e5a@gen-lexical (kd2ed4@id->sym kd31e2@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" kd31e2@sym))))) (set! kd4b25@kd2e5a@gen-lexical kd2e5a@gen-lexical) (set! kd2e5c@gen-global (lambda (kd31e4@x) (kd2e5a@gen-lexical kd31e4@x))) (set! kd4b26@kd2e5c@gen-global kd2e5c@gen-global) (set! kd2e5e@gen-label (lambda (kd31e6@_) (gensym))) (set! kd4b27@kd2e5e@gen-label kd2e5e@gen-label) (set! kd2e60@gen-top-level-label (lambda (kd31e8@id kd31e9@rib) (let ((kd31ed@find '#f)) (begin (set! kd31ed@find (lambda (kd31f8@sym kd31f9@mark* kd31fa@sym* kd31fb@mark** kd31fc@label*) (and (pair? kd31fa@sym*) (if (and (eq? kd31f8@sym (car kd31fa@sym*)) (same-marks? kd31f9@mark* (car kd31fb@mark**))) (car kd31fc@label*) (kd31ed@find kd31f8@sym kd31f9@mark* (cdr kd31fa@sym*) (cdr kd31fb@mark**) (cdr kd31fc@label*)))))) (let ((kd31ee@sym (kd2ed4@id->sym kd31e8@id)) (kd31ef@mark* (kd2ea4@stx-mark* kd31e8@id))) (let ((kd31f2@sym* (kd2e70@rib-sym* kd31e9@rib))) (let ((kd31f4@t (and (memq kd31ee@sym (kd2e70@rib-sym* kd31e9@rib)) (kd31ed@find kd31ee@sym kd31ef@mark* kd31f2@sym* (kd2e74@rib-mark** kd31e9@rib) (kd2e78@rib-label* kd31e9@rib))))) (if kd31f4@t ((lambda (kd31f6@label) (if (kd2ce6@kd2b2f@imported-label->binding kd31f6@label) (gensym) kd31f6@label)) kd31f4@t) (gensym))))))))) (set! kd4b28@kd2e60@gen-top-level-label kd2e60@gen-top-level-label) (set! kd2e62@gen-define-label+loc (lambda (kd3202@id kd3203@rib) (let ((kd3206@t (kd31c9@top-level-context))) (if kd3206@t ((lambda (kd3208@env) (let ((kd320a@label (kd2e60@gen-top-level-label kd3202@id kd3203@rib)) (kd320b@locs (kd3181@interaction-env-locs kd3208@env))) (values kd320a@label (let ((kd320e@t (assq kd320a@label kd320b@locs))) (if kd320e@t (cdr kd320e@t) (let ((kd3210@loc (kd2e5a@gen-lexical kd3202@id))) (begin (kd3183@set-interaction-env-locs! kd3208@env (cons (cons kd320a@label kd3210@loc) kd320b@locs)) kd3210@loc))))))) kd3206@t) (values (gensym) (kd2e5a@gen-lexical kd3202@id)))))) (set! kd4b29@kd2e62@gen-define-label+loc kd2e62@gen-define-label+loc) (set! kd2e64@gen-define-label (lambda (kd3212@id kd3213@rib) (if (kd31c9@top-level-context) (kd2e60@gen-top-level-label kd3212@id kd3213@rib) (gensym)))) (set! kd4b2a@kd2e64@gen-define-label kd2e64@gen-define-label) (set! kd2e6e@rib? (lambda (kd3216@x) (and (simple-struct? kd3216@x) (eq? (simple-struct-name kd3216@x) 'rib)))) (set! kd4b2b@kd2e6e@rib? kd2e6e@rib?) (set! kd2e70@rib-sym* (lambda (kd3218@x) (simple-struct-ref kd3218@x '0))) (set! kd4b2c@kd2e70@rib-sym* kd2e70@rib-sym*) (set! kd2e72@set-rib-sym*! (lambda (kd321a@x kd321b@val) (simple-struct-set! kd321a@x '0 kd321b@val))) (set! kd4b2d@kd2e72@set-rib-sym*! kd2e72@set-rib-sym*!) (set! kd2e74@rib-mark** (lambda (kd321e@x) (simple-struct-ref kd321e@x '1))) (set! kd4b2e@kd2e74@rib-mark** kd2e74@rib-mark**) (set! kd2e76@set-rib-mark**! (lambda (kd3220@x kd3221@val) (simple-struct-set! kd3220@x '1 kd3221@val))) (set! kd4b2f@kd2e76@set-rib-mark**! kd2e76@set-rib-mark**!) (set! kd2e78@rib-label* (lambda (kd3224@x) (simple-struct-ref kd3224@x '2))) (set! kd4b30@kd2e78@rib-label* kd2e78@rib-label*) (set! kd2e7a@set-rib-label*! (lambda (kd3226@x kd3227@val) (simple-struct-set! kd3226@x '2 kd3227@val))) (set! kd4b31@kd2e7a@set-rib-label*! kd2e7a@set-rib-label*!) (set! kd2e7c@rib-sealed/freq (lambda (kd322a@x) (simple-struct-ref kd322a@x '3))) (set! kd4b32@kd2e7c@rib-sealed/freq kd2e7c@rib-sealed/freq) (set! kd2e7e@set-rib-sealed/freq! (lambda (kd322c@x kd322d@val) (simple-struct-set! kd322c@x '3 kd322d@val))) (set! kd4b33@kd2e7e@set-rib-sealed/freq! kd2e7e@set-rib-sealed/freq!) (set! kd2e80@rib-cache (lambda (kd3230@x) (simple-struct-ref kd3230@x '4))) (set! kd4b34@kd2e80@rib-cache kd2e80@rib-cache) (set! kd2e82@set-rib-cache! (lambda (kd3232@x kd3233@val) (simple-struct-set! kd3232@x '4 kd3233@val))) (set! kd4b35@kd2e82@set-rib-cache! kd2e82@set-rib-cache!) (set! kd2e84@dummy '3) (set! kd4b36@kd2e84@dummy kd2e84@dummy) (set! kd2e86@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! kd4b37@kd2e86@make-empty-rib kd2e86@make-empty-rib) (set! kd2e88@extend-rib! (lambda (kd3236@rib kd3237@id kd3238@label) (let ((kd323d@find '#f)) (begin (set! kd323d@find (lambda (kd324a@sym kd324b@mark* kd324c@sym* kd324d@mark** kd324e@label*) (and (pair? kd324c@sym*) (if (and (eq? kd324a@sym (car kd324c@sym*)) (same-marks? kd324b@mark* (car kd324d@mark**))) kd324e@label* (kd323d@find kd324a@sym kd324b@mark* (cdr kd324c@sym*) (cdr kd324d@mark**) (cdr kd324e@label*)))))) (begin (if (kd2e7c@rib-sealed/freq kd3236@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" kd3236@rib) (void)) (let ((kd323e@sym (kd2ed4@id->sym kd3237@id)) (kd323f@mark* (kd2ea4@stx-mark* kd3237@id))) (let ((kd3242@sym* (kd2e70@rib-sym* kd3236@rib))) (let ((kd3244@t (and (memq kd323e@sym (kd2e70@rib-sym* kd3236@rib)) (kd323d@find kd323e@sym kd323f@mark* kd3242@sym* (kd2e74@rib-mark** kd3236@rib) (kd2e78@rib-label* kd3236@rib))))) (if kd3244@t ((lambda (kd3246@p) (if (not (eq? kd3238@label (car kd3246@p))) (if (kd31c9@top-level-context) (set-car! kd3246@p kd3238@label) (kd31b9@syntax-violation '#f '"multiple definitions of identifier" kd3237@id)) (void))) kd3244@t) (begin (if (kd2e80@rib-cache kd3236@rib) (hashtable-update! (kd2e80@rib-cache kd3236@rib) kd323e@sym (lambda (kd3248@e) (cons (cons kd323f@mark* kd3238@label) kd3248@e)) '()) (void)) (kd2e72@set-rib-sym*! kd3236@rib (cons kd323e@sym kd3242@sym*)) (kd2e76@set-rib-mark**! kd3236@rib (cons kd323f@mark* (kd2e74@rib-mark** kd3236@rib))) (kd2e7a@set-rib-label*! kd3236@rib (cons kd3238@label (kd2e78@rib-label* kd3236@rib))))))))))))) (set! kd4b38@kd2e88@extend-rib! kd2e88@extend-rib!) (set! kd2e8a@extend-rib/nc! (lambda (kd3254@rib kd3255@id kd3256@label) (let ((kd325a@sym (kd2ed4@id->sym kd3255@id)) (kd325b@mark* (kd2ea4@stx-mark* kd3255@id))) (let ((kd325e@sym* (kd2e70@rib-sym* kd3254@rib))) (begin (if (kd2e80@rib-cache kd3254@rib) (hashtable-update! (kd2e80@rib-cache kd3254@rib) kd325a@sym (lambda (kd3260@e) (cons (cons kd325b@mark* kd3256@label) kd3260@e)) '()) (void)) (kd2e72@set-rib-sym*! kd3254@rib (cons kd325a@sym kd325e@sym*)) (kd2e76@set-rib-mark**! kd3254@rib (cons kd325b@mark* (kd2e74@rib-mark** kd3254@rib))) (kd2e7a@set-rib-label*! kd3254@rib (cons kd3256@label (kd2e78@rib-label* kd3254@rib)))))))) (set! kd4b39@kd2e8a@extend-rib/nc! kd2e8a@extend-rib/nc!) (set! kd2e8c@make-rib-map (lambda (kd3262@sym*) (let ((kd3264@ht (make-eq-hashtable))) (let kd326a@f ((kd3266@i '0) (kd3267@sym* kd3262@sym*)) (if (null? kd3267@sym*) kd3264@ht (begin (hashtable-update! kd3264@ht (car kd3267@sym*) (lambda (kd326c@x) (cons kd3266@i kd326c@x)) '()) (kd326a@f (+ kd3266@i '1) (cdr kd3267@sym*)))))))) (set! kd4b3a@kd2e8c@make-rib-map kd2e8c@make-rib-map) (set! kd2e8e@seal-rib! (lambda (kd326e@rib) (let ((kd3270@sym* (kd2e70@rib-sym* kd326e@rib))) (if (not (null? kd3270@sym*)) (begin (kd2e72@set-rib-sym*! kd326e@rib (list->vector kd3270@sym*)) (kd2e76@set-rib-mark**! kd326e@rib (list->vector (kd2e74@rib-mark** kd326e@rib))) (kd2e7a@set-rib-label*! kd326e@rib (list->vector (kd2e78@rib-label* kd326e@rib))) (kd2e7e@set-rib-sealed/freq! kd326e@rib (kd2e8c@make-rib-map kd3270@sym*))) (void))))) (set! kd4b3b@kd2e8e@seal-rib! kd2e8e@seal-rib!) (set! kd2e90@unseal-rib! (lambda (kd3272@rib) (if (kd2e7c@rib-sealed/freq kd3272@rib) (begin (kd2e7e@set-rib-sealed/freq! kd3272@rib '#f) (kd2e72@set-rib-sym*! kd3272@rib (vector->list (kd2e70@rib-sym* kd3272@rib))) (kd2e76@set-rib-mark**! kd3272@rib (vector->list (kd2e74@rib-mark** kd3272@rib))) (kd2e7a@set-rib-label*! kd3272@rib (vector->list (kd2e78@rib-label* kd3272@rib)))) (void)))) (set! kd4b3c@kd2e90@unseal-rib! kd2e90@unseal-rib!) (set! kd2e92@make-full-rib (lambda (kd3274@id* kd3275@label*) (let ((kd3278@r (make-simple-struct 'rib '6 (list (map kd2ed4@id->sym kd3274@id*) (map kd2ea4@stx-mark* kd3274@id*) kd3275@label* '#f '#f)))) (begin (kd2e8e@seal-rib! kd3278@r) kd3278@r)))) (set! kd4b3d@kd2e92@make-full-rib kd2e92@make-full-rib) (set! kd2e94@rp (kd2a14@kd28ef@make-record-printer 'stx (lambda (kd327a@x kd327b@p kd327c@wr) (begin (display '"#<syntax " kd327b@p) (write (kd2ee6@stx->datum kd327a@x) kd327b@p) (let ((kd3280@expr (kd2ea0@stx-expr kd327a@x))) (if (kd2a0b@kd28dd@annotation? kd3280@expr) (let ((kd3282@src (kd2a0c@kd28df@annotation-source kd3280@expr))) (if (pair? kd3282@src) (begin (display '" [" kd327b@p) (display (cdr kd3282@src) kd327b@p) (display '" of " kd327b@p) (display (car kd3282@src) kd327b@p) (display '"]" kd327b@p)) (void))) (void))) (display '">" kd327b@p))))) (set! kd4b3e@kd2e94@rp kd2e94@rp) (set! kd2e9e@stx? (lambda (kd3284@x) (and (simple-struct? kd3284@x) (eq? (simple-struct-name kd3284@x) 'stx)))) (set! kd4b3f@kd2e9e@stx? kd2e9e@stx?) (set! kd2ea0@stx-expr (lambda (kd3286@x) (simple-struct-ref kd3286@x '0))) (set! kd4b40@kd2ea0@stx-expr kd2ea0@stx-expr) (set! kd2ea2@set-stx-expr! (lambda (kd3288@x kd3289@val) (simple-struct-set! kd3288@x '0 kd3289@val))) (set! kd4b41@kd2ea2@set-stx-expr! kd2ea2@set-stx-expr!) (set! kd2ea4@stx-mark* (lambda (kd328c@x) (simple-struct-ref kd328c@x '1))) (set! kd4b42@kd2ea4@stx-mark* kd2ea4@stx-mark*) (set! kd2ea6@set-stx-mark*! (lambda (kd328e@x kd328f@val) (simple-struct-set! kd328e@x '1 kd328f@val))) (set! kd4b43@kd2ea6@set-stx-mark*! kd2ea6@set-stx-mark*!) (set! kd2ea8@stx-subst* (lambda (kd3292@x) (simple-struct-ref kd3292@x '2))) (set! kd4b44@kd2ea8@stx-subst* kd2ea8@stx-subst*) (set! kd2eaa@set-stx-subst*! (lambda (kd3294@x kd3295@val) (simple-struct-set! kd3294@x '2 kd3295@val))) (set! kd4b45@kd2eaa@set-stx-subst*! kd2eaa@set-stx-subst*!) (set! kd2eac@stx-ae* (lambda (kd3298@x) (simple-struct-ref kd3298@x '3))) (set! kd4b46@kd2eac@stx-ae* kd2eac@stx-ae*) (set! kd2eae@set-stx-ae*! (lambda (kd329a@x kd329b@val) (simple-struct-set! kd329a@x '3 kd329b@val))) (set! kd4b47@kd2eae@set-stx-ae*! kd2eae@set-stx-ae*!) (set! kd2eb0@dummy '3) (set! kd4b48@kd2eb0@dummy kd2eb0@dummy) (set! kd2eb2@datum->stx (lambda (kd329e@id kd329f@datum) (make-simple-struct 'stx '5 (list kd329f@datum (kd2ea4@stx-mark* kd329e@id) (kd2ea8@stx-subst* kd329e@id) (kd2eac@stx-ae* kd329e@id))))) (set! kd4b49@kd2eb2@datum->stx kd2eb2@datum->stx) (set! kd2eb4@gen-mark (lambda () (string '#\m))) (set! kd4b4a@kd2eb4@gen-mark kd2eb4@gen-mark) (set! kd2eb6@anti-mark '#f) (set! kd4b4b@kd2eb6@anti-mark kd2eb6@anti-mark) (set! kd2eb8@anti-mark? not) (set! kd4b4c@kd2eb8@anti-mark? kd2eb8@anti-mark?) (set! kd2eba@mkstx (lambda (kd32a2@e kd32a3@m* kd32a4@s* kd32a5@ae*) (if (and (kd2e9e@stx? kd32a2@e) (not (kd2e58@top-marked? kd32a3@m*))) (call-with-values (lambda () (join-wraps kd32a3@m* kd32a4@s* kd32a5@ae* kd32a2@e)) (lambda (kd32b0@kd32ab kd32b1@kd32ad kd32b2@kd32af) (let ((kd32b6@ae* kd32b2@kd32af) (kd32b7@s* kd32b1@kd32ad) (kd32b8@m* kd32b0@kd32ab)) (make-simple-struct 'stx '5 (list (kd2ea0@stx-expr kd32a2@e) kd32b8@m* kd32b7@s* kd32b6@ae*))))) (make-simple-struct 'stx '5 (list kd32a2@e kd32a3@m* kd32a4@s* kd32a5@ae*))))) (set! kd4b4d@kd2eba@mkstx kd2eba@mkstx) (set! kd2ebc@add-mark (lambda (kd32bc@m kd32bd@e kd32be@ae) (kd2eba@mkstx kd32bd@e (list kd32bc@m) '(shift) (list kd32be@ae)))) (set! kd4b4e@kd2ebc@add-mark kd2ebc@add-mark) (set! kd2ebe@add-subst (lambda (kd32c2@subst kd32c3@e) (kd2eba@mkstx kd32c3@e '() (list kd32c2@subst) '()))) (set! kd4b4f@kd2ebe@add-subst kd2ebe@add-subst) (set! kd2ec0@syntax-kind? (lambda (kd32c6@x kd32c7@p?) (if (kd2e9e@stx? kd32c6@x) (kd2ec0@syntax-kind? (kd2ea0@stx-expr kd32c6@x) kd32c7@p?) (if (kd2a0b@kd28dd@annotation? kd32c6@x) (kd2ec0@syntax-kind? (kd2a0d@kd28e1@annotation-expression kd32c6@x) kd32c7@p?) (kd32c7@p? kd32c6@x))))) (set! kd4b50@kd2ec0@syntax-kind? kd2ec0@syntax-kind?) (set! kd2ec2@syntax-vector->list (lambda (kd32ca@x) (if (kd2e9e@stx? kd32ca@x) (let ((kd32cc@ls (kd2ec2@syntax-vector->list (kd2ea0@stx-expr kd32ca@x))) (kd32cd@m* (kd2ea4@stx-mark* kd32ca@x)) (kd32ce@s* (kd2ea8@stx-subst* kd32ca@x)) (kd32cf@ae* (kd2eac@stx-ae* kd32ca@x))) (map (lambda (kd32d4@x) (kd2eba@mkstx kd32d4@x kd32cd@m* kd32ce@s* kd32cf@ae*)) kd32cc@ls)) (if (kd2a0b@kd28dd@annotation? kd32ca@x) (kd2ec2@syntax-vector->list (kd2a0d@kd28e1@annotation-expression kd32ca@x)) (if (vector? kd32ca@x) (vector->list kd32ca@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" kd32ca@x)))))) (set! kd4b51@kd2ec2@syntax-vector->list kd2ec2@syntax-vector->list) (set! kd2ec4@syntax-pair? (lambda (kd32d6@x) (kd2ec0@syntax-kind? kd32d6@x pair?))) (set! kd4b52@kd2ec4@syntax-pair? kd2ec4@syntax-pair?) (set! kd2ec6@syntax-vector? (lambda (kd32d8@x) (kd2ec0@syntax-kind? kd32d8@x vector?))) (set! kd4b53@kd2ec6@syntax-vector? kd2ec6@syntax-vector?) (set! kd2ec8@syntax-null? (lambda (kd32da@x) (kd2ec0@syntax-kind? kd32da@x null?))) (set! kd4b54@kd2ec8@syntax-null? kd2ec8@syntax-null?) (set! kd2eca@syntax-list? (lambda (kd32dc@x) (or (kd2ec8@syntax-null? kd32dc@x) (and (kd2ec4@syntax-pair? kd32dc@x) (kd2eca@syntax-list? (kd2ece@syntax-cdr kd32dc@x)))))) (set! kd4b55@kd2eca@syntax-list? kd2eca@syntax-list?) (set! kd2ecc@syntax-car (lambda (kd32de@x) (if (kd2e9e@stx? kd32de@x) (kd2eba@mkstx (kd2ecc@syntax-car (kd2ea0@stx-expr kd32de@x)) (kd2ea4@stx-mark* kd32de@x) (kd2ea8@stx-subst* kd32de@x) (kd2eac@stx-ae* kd32de@x)) (if (kd2a0b@kd28dd@annotation? kd32de@x) (kd2ecc@syntax-car (kd2a0d@kd28e1@annotation-expression kd32de@x)) (if (pair? kd32de@x) (car kd32de@x) (assertion-violation 'syntax-car '"BUG: not a pair" kd32de@x)))))) (set! kd4b56@kd2ecc@syntax-car kd2ecc@syntax-car) (set! kd2ece@syntax-cdr (lambda (kd32e0@x) (if (kd2e9e@stx? kd32e0@x) (kd2eba@mkstx (kd2ece@syntax-cdr (kd2ea0@stx-expr kd32e0@x)) (kd2ea4@stx-mark* kd32e0@x) (kd2ea8@stx-subst* kd32e0@x) (kd2eac@stx-ae* kd32e0@x)) (if (kd2a0b@kd28dd@annotation? kd32e0@x) (kd2ece@syntax-cdr (kd2a0d@kd28e1@annotation-expression kd32e0@x)) (if (pair? kd32e0@x) (cdr kd32e0@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" kd32e0@x)))))) (set! kd4b57@kd2ece@syntax-cdr kd2ece@syntax-cdr) (set! kd2ed0@syntax->list (lambda (kd32e2@x) (if (kd2ec4@syntax-pair? kd32e2@x) (cons (kd2ecc@syntax-car kd32e2@x) (kd2ed0@syntax->list (kd2ece@syntax-cdr kd32e2@x))) (if (kd2ec8@syntax-null? kd32e2@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" kd32e2@x))))) (set! kd4b58@kd2ed0@syntax->list kd2ed0@syntax->list) (set! kd2ed2@id? (lambda (kd32e4@x) (and (kd2e9e@stx? kd32e4@x) (symbol? (kd2ea0@stx-expr kd32e4@x))))) (set! kd4b59@kd2ed2@id? kd2ed2@id?) (set! kd2ed4@id->sym (lambda (kd32e6@x) (kd2ea0@stx-expr kd32e6@x))) (set! kd4b5a@kd2ed4@id->sym kd2ed4@id->sym) (set! kd2ed6@bound-id=? (lambda (kd32e8@x kd32e9@y) (and (eq? (kd2ed4@id->sym kd32e8@x) (kd2ed4@id->sym kd32e9@y)) (same-marks? (kd2ea4@stx-mark* kd32e8@x) (kd2ea4@stx-mark* kd32e9@y))))) (set! kd4b5b@kd2ed6@bound-id=? kd2ed6@bound-id=?) (set! kd2ed8@free-id=? (lambda (kd32ec@i kd32ed@j) (let ((kd32f0@t0 (id->real-label kd32ec@i)) (kd32f1@t1 (id->real-label kd32ed@j))) (if (or kd32f0@t0 kd32f1@t1) (eq? kd32f0@t0 kd32f1@t1) (eq? (kd2ed4@id->sym kd32ec@i) (kd2ed4@id->sym kd32ed@j)))))) (set! kd4b5c@kd2ed8@free-id=? kd2ed8@free-id=?) (set! kd2eda@valid-bound-ids? (lambda (kd32f4@id*) (and (for-all kd2ed2@id? kd32f4@id*) (kd2edc@distinct-bound-ids? kd32f4@id*)))) (set! kd4b5d@kd2eda@valid-bound-ids? kd2eda@valid-bound-ids?) (set! kd2edc@distinct-bound-ids? (lambda (kd32f6@id*) (or (null? kd32f6@id*) (and (not (kd2ede@bound-id-member? (car kd32f6@id*) (cdr kd32f6@id*))) (kd2edc@distinct-bound-ids? (cdr kd32f6@id*)))))) (set! kd4b5e@kd2edc@distinct-bound-ids? kd2edc@distinct-bound-ids?) (set! kd2ede@bound-id-member? (lambda (kd32f8@id kd32f9@id*) (and (pair? kd32f9@id*) (or (kd2ed6@bound-id=? kd32f8@id (car kd32f9@id*)) (kd2ede@bound-id-member? kd32f8@id (cdr kd32f9@id*)))))) (set! kd4b5f@kd2ede@bound-id-member? kd2ede@bound-id-member?) (set! kd2ee0@self-evaluating? (lambda (kd32fc@x) (or (number? kd32fc@x) (string? kd32fc@x) (char? kd32fc@x) (boolean? kd32fc@x) (regexp? kd32fc@x) (bytevector? kd32fc@x)))) (set! kd4b60@kd2ee0@self-evaluating? kd2ee0@self-evaluating?) (set! kd2ee2@strip-annotations (lambda (kd32fe@x) (if (pair? kd32fe@x) (cons (kd2ee2@strip-annotations (car kd32fe@x)) (kd2ee2@strip-annotations (cdr kd32fe@x))) (if (vector? kd32fe@x) (vector-map kd2ee2@strip-annotations kd32fe@x) (if (kd2a0b@kd28dd@annotation? kd32fe@x) (kd2a0a@kd28db@annotation-stripped kd32fe@x) kd32fe@x))))) (set! kd4b61@kd2ee2@strip-annotations kd2ee2@strip-annotations) (set! kd2ee4@strip (lambda (kd3300@x kd3301@m*) (if (kd2e58@top-marked? kd3301@m*) (if (or (kd2a0b@kd28dd@annotation? kd3300@x) (and (pair? kd3300@x) (kd2a0b@kd28dd@annotation? (car kd3300@x))) (and (vector? kd3300@x) (> (vector-length kd3300@x) '0) (kd2a0b@kd28dd@annotation? (vector-ref kd3300@x '0)))) (kd2ee2@strip-annotations kd3300@x) kd3300@x) (let kd3306@f ((kd3304@x kd3300@x)) (if (kd2e9e@stx? kd3304@x) (kd2ee4@strip (kd2ea0@stx-expr kd3304@x) (kd2ea4@stx-mark* kd3304@x)) (if (kd2a0b@kd28dd@annotation? kd3304@x) (kd2a0a@kd28db@annotation-stripped kd3304@x) (if (pair? kd3304@x) (let ((kd3308@a (kd3306@f (car kd3304@x))) (kd3309@d (kd3306@f (cdr kd3304@x)))) (if (and (eq? kd3308@a (car kd3304@x)) (eq? kd3309@d (cdr kd3304@x))) kd3304@x (cons kd3308@a kd3309@d))) (if (vector? kd3304@x) (let ((kd330c@old (vector->list kd3304@x))) (let ((kd330e@new (map kd3306@f kd330c@old))) (if (for-all eq? kd330c@old kd330e@new) kd3304@x (list->vector kd330e@new)))) kd3304@x)))))))) (set! kd4b62@kd2ee4@strip kd2ee4@strip) (set! kd2ee6@stx->datum (lambda (kd3310@x) (kd2ee4@strip kd3310@x '()))) (set! kd4b63@kd2ee6@stx->datum kd2ee6@stx->datum) (set! kd2ee8@id->label (lambda (kd3312@id) (or (id->real-label kd3312@id) (let ((kd3314@t (kd31c9@top-level-context))) (if kd3314@t ((lambda (kd3316@env) (let ((kd3318@rib (kd3179@interaction-env-rib kd3316@env))) (call-with-values (lambda () (kd2e62@gen-define-label+loc kd3312@id kd3318@rib)) (lambda (kd331e@kd331b kd331f@kd331d) (let ((kd3322@loc_ kd331f@kd331d) (kd3323@lab kd331e@kd331b)) (begin (kd2e88@extend-rib! kd3318@rib kd3312@id kd3323@lab) kd3323@lab)))))) kd3314@t) '#f))))) (set! kd4b64@kd2ee8@id->label kd2ee8@id->label) (set! kd2eea@label->binding (lambda (kd3326@x kd3327@r) (let ((kd332a@t (kd2ce6@kd2b2f@imported-label->binding kd3326@x))) (if kd332a@t ((lambda (kd332c@b) (if (and (pair? kd332c@b) (eq? (car kd332c@b) '$core-rtd)) (cons '$rtd (map kd308f@bless (cdr kd332c@b))) (if (and (pair? kd332c@b) (eq? (car kd332c@b) 'global-rtd)) (let ((kd332e@lib (cadr kd332c@b)) (kd332f@loc (cddr kd332c@b))) (cons '$rtd (symbol-value kd332f@loc))) kd332c@b))) kd332a@t) (let ((kd3332@t (assq kd3326@x kd3327@r))) (if kd3332@t (cdr kd3332@t) (let ((kd3334@t (kd31c9@top-level-context))) (if kd3334@t ((lambda (kd3336@env) (let ((kd3338@t (assq kd3326@x (kd3181@interaction-env-locs kd3336@env)))) (if kd3338@t ((lambda (kd333a@p) (cons* 'lexical (cdr kd333a@p) '#f)) kd3338@t) '(displaced-lexical . #f)))) kd3334@t) '(displaced-lexical . #f))))))))) (set! kd4b65@kd2eea@label->binding kd2eea@label->binding) (set! kd2eec@make-binding cons) (set! kd4b66@kd2eec@make-binding kd2eec@make-binding) (set! kd2eee@binding-type car) (set! kd4b67@kd2eee@binding-type kd2eee@binding-type) (set! kd2ef0@binding-value cdr) (set! kd4b68@kd2ef0@binding-value kd2ef0@binding-value) (set! kd2ef2@raise-unbound-error (lambda (kd333c@id) (kd31b7@syntax-violation* '#f '"unbound identifier" kd333c@id (kd4f5e@kd4da4@make-undefined-violation)))) (set! kd4b69@kd2ef2@raise-unbound-error kd2ef2@raise-unbound-error) (set! kd2ef4@syntax-type (lambda (kd333e@e kd333f@r) (if (kd2ed2@id? kd333e@e) (let ((kd3342@id kd333e@e)) (let ((kd3344@label (kd2ee8@id->label kd3342@id))) (let ((kd3346@b (kd2eea@label->binding kd3344@label kd333f@r))) (let ((kd3348@type (kd2eee@binding-type kd3346@b))) (begin (if (not kd3344@label) (kd2ef2@raise-unbound-error kd3342@id) (void)) (let ((kd334a@t kd3348@type)) (if (memv kd334a@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values kd3348@type (kd2ef0@binding-value kd3346@b) kd3342@id) (values 'other '#f '#f)))))))) (if (kd2ec4@syntax-pair? kd333e@e) (let ((kd334c@id (kd2ecc@syntax-car kd333e@e))) (if (kd2ed2@id? kd334c@id) (let ((kd334e@label (kd2ee8@id->label kd334c@id))) (let ((kd3350@b (kd2eea@label->binding kd334e@label kd333f@r))) (let ((kd3352@type (kd2eee@binding-type kd3350@b))) (begin (if (not kd334e@label) (kd2ef2@raise-unbound-error kd334c@id) (void)) (let ((kd3354@t kd3352@type)) (if (memv kd3354@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values kd3352@type (kd2ef0@binding-value kd3350@b) kd334c@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((kd3356@d (kd2ee6@stx->datum kd333e@e))) (if (kd2ee0@self-evaluating? kd3356@d) (values 'constant kd3356@d '#f) (values 'other '#f '#f))))))) (set! kd4b6a@kd2ef4@syntax-type kd2ef4@syntax-type) (set! kd2f02@sanitize-binding (lambda (kd3358@x kd3359@src) (if (procedure? kd3358@x) (cons* 'local-macro kd3358@x kd3359@src) (if (and (pair? kd3358@x) (eq? (car kd3358@x) 'macro!) (procedure? (cdr kd3358@x))) (cons* 'local-macro! (cdr kd3358@x) kd3359@src) (if (and (pair? kd3358@x) (eq? (car kd3358@x) '$rtd)) kd3358@x (assertion-violation 'expand '"invalid transformer" kd3358@x)))))) (set! kd4b6b@kd2f02@sanitize-binding kd2f02@sanitize-binding) (set! kd2f04@make-variable-transformer (lambda (kd335c@x) (if (procedure? kd335c@x) (cons 'macro! kd335c@x) (assertion-violation 'make-variable-transformer '"not a procedure" kd335c@x)))) (set! kd4b6c@kd2f04@make-variable-transformer kd2f04@make-variable-transformer) (set! kd2f06@variable-transformer? (lambda (kd335e@x) (and (pair? kd335e@x) (eq? (car kd335e@x) 'macro!) (procedure? (cdr kd335e@x))))) (set! kd4b6d@kd2f06@variable-transformer? kd2f06@variable-transformer?) (set! kd2f08@variable-transformer-procedure (lambda (kd3360@x) (if (kd2f06@variable-transformer? kd3360@x) (cdr kd3360@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" kd3360@x)))) (set! kd4b6e@kd2f08@variable-transformer-procedure kd2f08@variable-transformer-procedure) (set! kd2f0a@make-eval-transformer (lambda (kd3362@x) (kd2f02@sanitize-binding (eval-core (kd2a6d@kd2a25@expanded->core kd3362@x)) kd3362@x))) (set! kd4b6f@kd2f0a@make-eval-transformer kd2f0a@make-eval-transformer) (set! kd305b@parse-define (lambda (kd3364@x) (let ((kd3366@t kd3364@x)) (let ((kd3368@ls/false (kd30d9@syntax-dispatch kd3366@t '(_ (any . any) any . each-any)))) (if (and kd3368@ls/false (apply (lambda (kd336a@id kd336b@fmls kd336c@b kd336d@b*) (kd2ed2@id? kd336a@id)) kd3368@ls/false)) (apply (lambda (kd3372@id kd3373@fmls kd3374@b kd3375@b*) (begin (kd30ff@verify-formals kd3373@fmls kd3364@x) (values kd3372@id (cons 'defun (cons kd3373@fmls (cons kd3374@b kd3375@b*)))))) kd3368@ls/false) (let ((kd337a@t kd3366@t)) (let ((kd337c@ls/false (kd30d9@syntax-dispatch kd337a@t '(_ any any)))) (if (and kd337c@ls/false (apply (lambda (kd337e@id kd337f@val) (kd2ed2@id? kd337e@id)) kd337c@ls/false)) (apply (lambda (kd3382@id kd3383@val) (values kd3382@id (cons 'expr kd3383@val))) kd337c@ls/false) (let ((kd3386@t kd337a@t)) (let ((kd3388@ls/false (kd30d9@syntax-dispatch kd3386@t '(_ any)))) (if (and kd3388@ls/false (apply (lambda (kd338a@id) (kd2ed2@id? kd338a@id)) kd3388@ls/false)) (apply (lambda (kd338c@id) (values kd338c@id (cons 'expr (kd308f@bless '(void))))) kd3388@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3386@t)))))))))))) (set! kd4b70@kd305b@parse-define kd305b@parse-define) (set! kd305d@parse-define-syntax (lambda (kd338e@x) (let ((kd3390@t kd338e@x)) (let ((kd3392@ls/false (kd30d9@syntax-dispatch kd3390@t '(_ any any)))) (if (and kd3392@ls/false (apply (lambda (kd3394@id kd3395@val) (kd2ed2@id? kd3394@id)) kd3392@ls/false)) (apply (lambda (kd3398@id kd3399@val) (values kd3398@id kd3399@val)) kd3392@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3390@t)))))) (set! kd4b71@kd305d@parse-define-syntax kd305d@parse-define-syntax) (set! kd305f@scheme-stx-hashtable (make-eq-hashtable)) (set! kd4b72@kd305f@scheme-stx-hashtable kd305f@scheme-stx-hashtable) (set! kd3061@scheme-stx (lambda (kd339c@sym) (or (hashtable-ref kd305f@scheme-stx-hashtable kd339c@sym '#f) (let ((kd339e@subst (kd2cc2@kd2ae7@library-subst (kd2ce0@kd2b23@find-library-by-name '(psyntax system $all))))) (let ((kd33a0@stx (make-simple-struct 'stx '5 (list kd339c@sym kd2e56@top-mark* '() '())))) (let ((kd33a2@stx (let ((kd33a4@t (assq kd339c@sym kd339e@subst))) (if kd33a4@t ((lambda (kd33a6@x) (let ((kd33a8@name (car kd33a6@x)) (kd33a9@label (cdr kd33a6@x))) (kd2ebe@add-subst (make-simple-struct 'rib '6 (list (list kd33a8@name) (list kd2e56@top-mark*) (list kd33a9@label) '#f '#f)) kd33a0@stx))) kd33a4@t) kd33a0@stx)))) (begin (hashtable-set! kd305f@scheme-stx-hashtable kd339c@sym kd33a2@stx) kd33a2@stx))))))) (set! kd4b73@kd3061@scheme-stx kd3061@scheme-stx) (set! kd3063@lexical-var car) (set! kd4b74@kd3063@lexical-var kd3063@lexical-var) (set! kd3065@lexical-mutable? cdr) (set! kd4b75@kd3065@lexical-mutable? kd3065@lexical-mutable?) (set! kd3067@set-lexical-mutable! set-cdr!) (set! kd4b76@kd3067@set-lexical-mutable! kd3067@set-lexical-mutable!) (set! kd3069@add-lexical (lambda (kd33ac@lab kd33ad@lex kd33ae@r) (cons (cons* kd33ac@lab 'lexical kd33ad@lex '#f) kd33ae@r))) (set! kd4b77@kd3069@add-lexical kd3069@add-lexical) (set! kd306b@add-lexicals (lambda (kd33b2@lab* kd33b3@lex* kd33b4@r) (if (null? kd33b2@lab*) kd33b4@r (kd306b@add-lexicals (cdr kd33b2@lab*) (cdr kd33b3@lex*) (kd3069@add-lexical (car kd33b2@lab*) (car kd33b3@lex*) kd33b4@r))))) (set! kd4b78@kd306b@add-lexicals kd306b@add-lexicals) (set! kd306d@letrec-helper (lambda (kd33b8@e kd33b9@r kd33ba@mr kd33bb@build) (let ((kd33c0@t kd33b8@e)) (let ((kd33c2@ls/false (kd30d9@syntax-dispatch kd33c0@t '(_ #(each (any any)) any . each-any)))) (if kd33c2@ls/false (apply (lambda (kd33c4@lhs* kd33c5@rhs* kd33c6@b kd33c7@b*) (if (not (kd2eda@valid-bound-ids? kd33c4@lhs*)) (kd3093@invalid-fmls-error kd33b8@e kd33c4@lhs*) (let ((kd33cc@lex* (map kd2e5a@gen-lexical kd33c4@lhs*)) (kd33cd@lab* (map kd2e5e@gen-label kd33c4@lhs*))) (let ((kd33d0@rib (kd2e92@make-full-rib kd33c4@lhs* kd33cd@lab*)) (kd33d1@r (kd306b@add-lexicals kd33cd@lab* kd33cc@lex* kd33b9@r))) (let ((kd33d4@body (kd3111@chi-internal (kd2ebe@add-subst kd33d0@rib (cons kd33c6@b kd33c7@b*)) kd33d1@r kd33ba@mr)) (kd33d5@rhs* (kd30f7@chi-expr* (map (lambda (kd33d8@x) (kd2ebe@add-subst kd33d0@rib kd33d8@x)) kd33c5@rhs*) kd33d1@r kd33ba@mr))) (kd33bb@build '#f kd33cc@lex* kd33d5@rhs* kd33d4@body)))))) kd33c2@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd33c0@t)))))) (set! kd4b79@kd306d@letrec-helper kd306d@letrec-helper) (set! kd306f@let-transformer (lambda (kd33da@e kd33db@r kd33dc@mr) (let ((kd33e0@t kd33da@e)) (let ((kd33e2@ls/false (kd30d9@syntax-dispatch kd33e0@t '(_ #(each (any any)) any . each-any)))) (if kd33e2@ls/false (apply (lambda (kd33e4@lhs* kd33e5@rhs* kd33e6@b kd33e7@b*) (if (not (kd2eda@valid-bound-ids? kd33e4@lhs*)) (kd3093@invalid-fmls-error kd33da@e kd33e4@lhs*) (let ((kd33ec@lex* (map kd2e5a@gen-lexical kd33e4@lhs*)) (kd33ed@lab* (map kd2e5e@gen-label kd33e4@lhs*)) (kd33ee@rhs* (kd30f7@chi-expr* kd33e5@rhs* kd33db@r kd33dc@mr))) (let ((kd33f2@rib (kd2e92@make-full-rib kd33e4@lhs* kd33ed@lab*)) (kd33f3@r (kd306b@add-lexicals kd33ed@lab* kd33ec@lex* kd33db@r))) (let ((kd33f6@body (kd3111@chi-internal (kd2ebe@add-subst kd33f2@rib (cons kd33e6@b kd33e7@b*)) kd33f3@r kd33dc@mr))) (kd2e3a@kd2d97@build-let '#f kd33ec@lex* kd33ee@rhs* kd33f6@body)))))) kd33e2@ls/false) (let ((kd33f8@t kd33e0@t)) (let ((kd33fa@ls/false (kd30d9@syntax-dispatch kd33f8@t '(_ any #(each (any any)) any . each-any)))) (if kd33fa@ls/false (apply (lambda (kd33fc@loop kd33fd@lhs* kd33fe@rhs* kd33ff@b kd3400@b*) (if (not (kd2eda@valid-bound-ids? kd33fd@lhs*)) (kd3093@invalid-fmls-error kd33da@e kd33fd@lhs*) (let ((kd3406@lex* (map kd2e5a@gen-lexical kd33fd@lhs*)) (kd3407@lab* (map kd2e5e@gen-label kd33fd@lhs*)) (kd3408@rhs* (kd30f7@chi-expr* kd33fe@rhs* kd33db@r kd33dc@mr)) (kd3409@loop-lex (kd2e5a@gen-lexical kd33fc@loop)) (kd340a@loop-lab (kd2e5e@gen-label kd33fc@loop))) (let ((kd3410@loop-rib (kd2e92@make-full-rib (list kd33fc@loop) (list kd340a@loop-lab))) (kd3411@rib (kd2e92@make-full-rib kd33fd@lhs* kd3407@lab*)) (kd3412@r (kd306b@add-lexicals (cons kd340a@loop-lab kd3407@lab*) (cons kd3409@loop-lex kd3406@lex*) kd33db@r))) (let ((kd3416@body (kd3111@chi-internal (kd2ebe@add-subst kd3410@loop-rib (kd2ebe@add-subst kd3411@rib (cons kd33ff@b kd3400@b*))) kd3412@r kd33dc@mr))) (kd2e3b@kd2d99@build-named-let '#f kd3409@loop-lex kd3406@lex* kd3408@rhs* kd3416@body)))))) kd33fa@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd33f8@t))))))))) (set! kd4b7a@kd306f@let-transformer kd306f@let-transformer) (set! kd3071@letrec-transformer (lambda (kd3418@e kd3419@r kd341a@mr) (kd306d@letrec-helper kd3418@e kd3419@r kd341a@mr kd2e39@kd2d95@build-letrec))) (set! kd4b7b@kd3071@letrec-transformer kd3071@letrec-transformer) (set! kd3073@letrec*-transformer (lambda (kd341e@e kd341f@r kd3420@mr) (kd306d@letrec-helper kd341e@e kd341f@r kd3420@mr kd2e3c@kd2d9b@build-letrec*))) (set! kd4b7c@kd3073@letrec*-transformer kd3073@letrec*-transformer) (set! kd3075@fluid-let-syntax-transformer (lambda (kd3424@e kd3425@r kd3426@mr) (let ((kd342b@lookup '#f)) (begin (set! kd342b@lookup (lambda (kd343e@x) (or (kd2ee8@id->label kd343e@x) (kd31b9@syntax-violation '#f '"unbound identifier" kd3424@e kd343e@x)))) (let ((kd342c@t kd3424@e)) (let ((kd342e@ls/false (kd30d9@syntax-dispatch kd342c@t '(_ #(each (any any)) any . each-any)))) (if kd342e@ls/false (apply (lambda (kd3430@lhs* kd3431@rhs* kd3432@b kd3433@b*) (if (not (kd2eda@valid-bound-ids? kd3430@lhs*)) (kd3093@invalid-fmls-error kd3424@e kd3430@lhs*) (let ((kd3438@lab* (map kd342b@lookup kd3430@lhs*)) (kd3439@rhs* (map (lambda (kd343c@x) (kd2f0a@make-eval-transformer (kd3133@expand-transformer kd343c@x kd3426@mr))) kd3431@rhs*))) (kd3111@chi-internal (cons kd3432@b kd3433@b*) (append (map cons kd3438@lab* kd3439@rhs*) kd3425@r) (append (map cons kd3438@lab* kd3439@rhs*) kd3426@mr))))) kd342e@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd342c@t)))))))) (set! kd4b7d@kd3075@fluid-let-syntax-transformer kd3075@fluid-let-syntax-transformer) (set! kd3077@type-descriptor-transformer (lambda (kd3440@e kd3441@r kd3442@mr) (let ((kd3446@t kd3440@e)) (let ((kd3448@ls/false (kd30d9@syntax-dispatch kd3446@t '(_ any)))) (if (and kd3448@ls/false (apply (lambda (kd344a@id) (kd2ed2@id? kd344a@id)) kd3448@ls/false)) (apply (lambda (kd344c@id) (let ((kd344e@lab (kd2ee8@id->label kd344c@id))) (let ((kd3450@b (kd2eea@label->binding kd344e@lab kd3441@r))) (let ((kd3452@type (kd2eee@binding-type kd3450@b))) (begin (if (not kd344e@lab) (kd2ef2@raise-unbound-error kd344c@id) (void)) (if (not (and (eq? kd3452@type '$rtd) (not (list? (kd2ef0@binding-value kd3450@b))))) (kd31b9@syntax-violation '#f '"not a record type" kd3440@e) (void)) (list 'quote (kd2ef0@binding-value kd3450@b))))))) kd3448@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3446@t)))))) (set! kd4b7e@kd3077@type-descriptor-transformer kd3077@type-descriptor-transformer) (set! kd3079@record-type-descriptor-transformer (lambda (kd3454@e kd3455@r kd3456@mr) (let ((kd345a@t kd3454@e)) (let ((kd345c@ls/false (kd30d9@syntax-dispatch kd345a@t '(_ any)))) (if (and kd345c@ls/false (apply (lambda (kd345e@id) (kd2ed2@id? kd345e@id)) kd345c@ls/false)) (apply (lambda (kd3460@id) (let ((kd3462@lab (kd2ee8@id->label kd3460@id))) (let ((kd3464@b (kd2eea@label->binding kd3462@lab kd3455@r))) (let ((kd3466@type (kd2eee@binding-type kd3464@b))) (begin (if (not kd3462@lab) (kd2ef2@raise-unbound-error kd3460@id) (void)) (if (not (and (eq? kd3466@type '$rtd) (list? (kd2ef0@binding-value kd3464@b)))) (kd31b9@syntax-violation '#f '"not a record type" kd3454@e) (void)) (kd30fb@chi-expr (car (kd2ef0@binding-value kd3464@b)) kd3455@r kd3456@mr)))))) kd345c@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd345a@t)))))) (set! kd4b7f@kd3079@record-type-descriptor-transformer kd3079@record-type-descriptor-transformer) (set! kd307b@record-constructor-descriptor-transformer (lambda (kd3468@e kd3469@r kd346a@mr) (let ((kd346e@t kd3468@e)) (let ((kd3470@ls/false (kd30d9@syntax-dispatch kd346e@t '(_ any)))) (if (and kd3470@ls/false (apply (lambda (kd3472@id) (kd2ed2@id? kd3472@id)) kd3470@ls/false)) (apply (lambda (kd3474@id) (let ((kd3476@lab (kd2ee8@id->label kd3474@id))) (let ((kd3478@b (kd2eea@label->binding kd3476@lab kd3469@r))) (let ((kd347a@type (kd2eee@binding-type kd3478@b))) (begin (if (not kd3476@lab) (kd2ef2@raise-unbound-error kd3474@id) (void)) (if (not (and (eq? kd347a@type '$rtd) (list? (kd2ef0@binding-value kd3478@b)))) (kd31b9@syntax-violation '#f '"invalid type" kd3468@e) (void)) (kd30fb@chi-expr (cadr (kd2ef0@binding-value kd3478@b)) kd3469@r kd346a@mr)))))) kd3470@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd346e@t)))))) (set! kd4b80@kd307b@record-constructor-descriptor-transformer kd307b@record-constructor-descriptor-transformer) (set! kd307d@when-macro (lambda (kd347c@e) (let ((kd347e@t kd347c@e)) (let ((kd3480@ls/false (kd30d9@syntax-dispatch kd347e@t '(_ any any . each-any)))) (if kd3480@ls/false (apply (lambda (kd3482@test kd3483@e kd3484@e*) (kd308f@bless (list 'if kd3482@test (cons 'begin (cons kd3483@e kd3484@e*))))) kd3480@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd347e@t)))))) (set! kd4b81@kd307d@when-macro kd307d@when-macro) (set! kd307f@unless-macro (lambda (kd3488@e) (let ((kd348a@t kd3488@e)) (let ((kd348c@ls/false (kd30d9@syntax-dispatch kd348a@t '(_ any any . each-any)))) (if kd348c@ls/false (apply (lambda (kd348e@test kd348f@e kd3490@e*) (kd308f@bless (list 'if (list 'not kd348e@test) (cons 'begin (cons kd348f@e kd3490@e*))))) kd348c@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd348a@t)))))) (set! kd4b82@kd307f@unless-macro kd307f@unless-macro) (set! kd3081@if-transformer (lambda (kd3494@e kd3495@r kd3496@mr) (let ((kd349a@t kd3494@e)) (let ((kd349c@ls/false (kd30d9@syntax-dispatch kd349a@t '(_ any any any)))) (if kd349c@ls/false (apply (lambda (kd349e@e0 kd349f@e1 kd34a0@e2) (list 'if (kd30fb@chi-expr kd349e@e0 kd3495@r kd3496@mr) (kd30fb@chi-expr kd349f@e1 kd3495@r kd3496@mr) (kd30fb@chi-expr kd34a0@e2 kd3495@r kd3496@mr))) kd349c@ls/false) (let ((kd34a4@t kd349a@t)) (let ((kd34a6@ls/false (kd30d9@syntax-dispatch kd34a4@t '(_ any any)))) (if kd34a6@ls/false (apply (lambda (kd34a8@e0 kd34a9@e1) (list 'if (kd30fb@chi-expr kd34a8@e0 kd3495@r kd3496@mr) (kd30fb@chi-expr kd34a9@e1 kd3495@r kd3496@mr) (kd2e38@kd2d93@build-void))) kd34a6@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd34a4@t))))))))) (set! kd4b83@kd3081@if-transformer kd3081@if-transformer) (set! kd3083@and-transformer (lambda (kd34ac@e kd34ad@r kd34ae@mr) (let ((kd34b2@t kd34ac@e)) (let ((kd34b4@ls/false (kd30d9@syntax-dispatch kd34b2@t '(_ . each-any)))) (if kd34b4@ls/false (apply (lambda (kd34b6@e*) (cons 'and (kd30f7@chi-expr* kd34b6@e* kd34ad@r kd34ae@mr))) kd34b4@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd34b2@t)))))) (set! kd4b84@kd3083@and-transformer kd3083@and-transformer) (set! kd3085@or-transformer (lambda (kd34b8@e kd34b9@r kd34ba@mr) (let ((kd34be@t kd34b8@e)) (let ((kd34c0@ls/false (kd30d9@syntax-dispatch kd34be@t '(_ . each-any)))) (if kd34c0@ls/false (apply (lambda (kd34c2@e*) (cons 'or (kd30f7@chi-expr* kd34c2@e* kd34b9@r kd34ba@mr))) kd34c0@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd34be@t)))))) (set! kd4b85@kd3085@or-transformer kd3085@or-transformer) (set! kd3087@case-macro (lambda (kd34c4@e) (let ((kd34c7@build-last '#f) (kd34c9@build-one '#f)) (begin (set! kd34c7@build-last (lambda (kd34ee@cls) (let ((kd34f0@t kd34ee@cls)) (let ((kd34f2@ls/false (kd30d9@syntax-dispatch kd34f0@t '(#(scheme-id else) any . each-any)))) (if kd34f2@ls/false (apply (lambda (kd34f4@e kd34f5@e*) (cons 'begin (cons kd34f4@e kd34f5@e*))) kd34f2@ls/false) (let ((kd34f8@t kd34f0@t)) (let ((kd34fa@ls/false (kd30d9@syntax-dispatch kd34f8@t '_))) (if kd34fa@ls/false (apply (lambda () (kd34c9@build-one kd34ee@cls '(if #f #f))) kd34fa@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd34f8@t))))))))) (set! kd34c9@build-one (lambda (kd34e0@cls kd34e1@k) (let ((kd34e4@t kd34e0@cls)) (let ((kd34e6@ls/false (kd30d9@syntax-dispatch kd34e4@t '(each-any any . each-any)))) (if kd34e6@ls/false (apply (lambda (kd34e8@d* kd34e9@e kd34ea@e*) (list 'if (list 'memv 't (list 'quote kd34e8@d*)) (cons 'begin (cons kd34e9@e kd34ea@e*)) kd34e1@k)) kd34e6@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd34e4@t)))))) (let ((kd34ca@t kd34c4@e)) (let ((kd34cc@ls/false (kd30d9@syntax-dispatch kd34ca@t '(_ any)))) (if kd34cc@ls/false (apply (lambda (kd34ce@expr) (kd308f@bless (cons 'let (cons (list (list 't kd34ce@expr)) '((if #f #f)))))) kd34cc@ls/false) (let ((kd34d0@t kd34ca@t)) (let ((kd34d2@ls/false (kd30d9@syntax-dispatch kd34d0@t '(_ any any . each-any)))) (if kd34d2@ls/false (apply (lambda (kd34d4@expr kd34d5@cls kd34d6@cls*) (kd308f@bless (list 'let (list (list 't kd34d4@expr)) (let kd34de@f ((kd34da@cls kd34d5@cls) (kd34db@cls* kd34d6@cls*)) (if (null? kd34db@cls*) (kd34c7@build-last kd34da@cls) (kd34c9@build-one kd34da@cls (kd34de@f (car kd34db@cls*) (cdr kd34db@cls*)))))))) kd34d2@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd34d0@t))))))))))) (set! kd4b86@kd3087@case-macro kd3087@case-macro) (set! kd3089@quote-transformer (lambda (kd34fc@e kd34fd@r kd34fe@mr) (let ((kd3502@t kd34fc@e)) (let ((kd3504@ls/false (kd30d9@syntax-dispatch kd3502@t '(_ any)))) (if kd3504@ls/false (apply (lambda (kd3506@datum) (list 'quote (kd2ee6@stx->datum kd3506@datum))) kd3504@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3502@t)))))) (set! kd4b87@kd3089@quote-transformer kd3089@quote-transformer) (set! kd308b@case-lambda-transformer (lambda (kd3508@e kd3509@r kd350a@mr) (let ((kd350e@t kd3508@e)) (let ((kd3510@ls/false (kd30d9@syntax-dispatch kd350e@t '(_ . #(each (any any . each-any)))))) (if kd3510@ls/false (apply (lambda (kd3512@fmls* kd3513@b* kd3514@b**) (call-with-values (lambda () (kd3103@chi-lambda-clause* kd3508@e kd3512@fmls* (map cons kd3513@b* kd3514@b**) kd3509@r kd350a@mr)) (lambda (kd351c@kd3519 kd351d@kd351b) (let ((kd3520@body* kd351d@kd351b) (kd3521@fmls* kd351c@kd3519)) (kd2e36@kd2d63@build-case-lambda '#f kd3521@fmls* kd3520@body*))))) kd3510@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd350e@t)))))) (set! kd4b88@kd308b@case-lambda-transformer kd308b@case-lambda-transformer) (set! kd308d@lambda-transformer (lambda (kd3524@e kd3525@r kd3526@mr) (let ((kd352a@t kd3524@e)) (let ((kd352c@ls/false (kd30d9@syntax-dispatch kd352a@t '(_ any any . each-any)))) (if kd352c@ls/false (apply (lambda (kd352e@fmls kd352f@b kd3530@b*) (call-with-values (lambda () (kd3101@chi-lambda-clause kd3524@e kd352e@fmls (cons kd352f@b kd3530@b*) kd3525@r kd3526@mr)) (lambda (kd3538@kd3535 kd3539@kd3537) (let ((kd353c@body kd3539@kd3537) (kd353d@fmls kd3538@kd3535)) (kd2e35@kd2d61@build-lambda '#f kd353d@fmls kd353c@body))))) kd352c@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd352a@t)))))) (set! kd4b89@kd308d@lambda-transformer kd308d@lambda-transformer) (set! kd308f@bless (lambda (kd3540@x) (kd2eba@mkstx (let kd3544@f ((kd3542@x kd3540@x)) (if (kd2e9e@stx? kd3542@x) kd3542@x (if (pair? kd3542@x) (cons (kd3544@f (car kd3542@x)) (kd3544@f (cdr kd3542@x))) (if (symbol? kd3542@x) (kd3061@scheme-stx kd3542@x) (if (vector? kd3542@x) (vector-map kd3544@f kd3542@x) kd3542@x))))) '() '() '()))) (set! kd4b8a@kd308f@bless kd308f@bless) (set! kd3091@with-syntax-macro (lambda (kd3546@e) (let ((kd3548@t kd3546@e)) (let ((kd354a@ls/false (kd30d9@syntax-dispatch kd3548@t '(_ #(each (any any)) any . each-any)))) (if kd354a@ls/false (apply (lambda (kd354c@pat* kd354d@expr* kd354e@b kd354f@b*) (let ((kd3554@idn* (let kd3558@f ((kd3556@pat* kd354c@pat*)) (if (null? kd3556@pat*) '() (call-with-values (lambda () (kd30d7@convert-pattern (car kd3556@pat*) '())) (lambda (kd355e@kd355b kd355f@kd355d) (let ((kd3562@idn* kd355f@kd355d) (kd3563@pat kd355e@kd355b)) (append kd3562@idn* (kd3558@f (cdr kd3556@pat*)))))))))) (begin (kd30ff@verify-formals (map car kd3554@idn*) kd3546@e) (let ((kd3566@t* (kd31a7@generate-temporaries kd354d@expr*))) (kd308f@bless (list 'let (map list kd3566@t* kd354d@expr*) (let kd356c@f ((kd3568@pat* kd354c@pat*) (kd3569@t* kd3566@t*)) (if (null? kd3568@pat*) (cons 'begin (cons '#f (cons kd354e@b kd354f@b*))) (list 'syntax-case (car kd3569@t*) '() (list (car kd3568@pat*) (kd356c@f (cdr kd3568@pat*) (cdr kd3569@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car kd3568@pat*)) (car kd3569@t*)))))))))))) kd354a@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3548@t)))))) (set! kd4b8b@kd3091@with-syntax-macro kd3091@with-syntax-macro) (set! kd3093@invalid-fmls-error (lambda (kd356e@stx kd356f@fmls) (let ((kd3572@t kd356f@fmls)) (let ((kd3574@ls/false (kd30d9@syntax-dispatch kd3572@t '#(each+ any () any)))) (if kd3574@ls/false (apply (lambda (kd3576@id* kd3577@last) (let kd357c@f ((kd357a@id* (if (kd2ed2@id? kd3577@last) (cons kd3577@last kd3576@id*) (if (kd2ec8@syntax-null? kd3577@last) kd3576@id* (kd31b9@syntax-violation '#f '"not an identifier" kd356e@stx kd3577@last))))) (if (null? kd357a@id*) (values) (if (not (kd2ed2@id? (car kd357a@id*))) (kd31b9@syntax-violation '#f '"not an identifier" kd356e@stx (car kd357a@id*)) (begin (kd357c@f (cdr kd357a@id*)) (if (kd2ede@bound-id-member? (car kd357a@id*) (cdr kd357a@id*)) (kd31b9@syntax-violation '#f '"duplicate binding" kd356e@stx (car kd357a@id*)) (void))))))) kd3574@ls/false) (let ((kd357e@t kd3572@t)) (let ((kd3580@ls/false (kd30d9@syntax-dispatch kd357e@t '_))) (if kd3580@ls/false (apply (lambda () (kd31b9@syntax-violation '#f '"malformed binding form" kd356e@stx kd356f@fmls)) kd3580@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd357e@t))))))))) (set! kd4b8c@kd3093@invalid-fmls-error kd3093@invalid-fmls-error) (set! kd3095@let-macro (lambda (kd3582@stx) (let ((kd3584@t kd3582@stx)) (let ((kd3586@ls/false (kd30d9@syntax-dispatch kd3584@t '(_ #(each (any any)) any . each-any)))) (if kd3586@ls/false (apply (lambda (kd3588@lhs* kd3589@rhs* kd358a@b kd358b@b*) (if (kd2eda@valid-bound-ids? kd3588@lhs*) (kd308f@bless (cons (cons 'lambda (cons kd3588@lhs* (cons kd358a@b kd358b@b*))) kd3589@rhs*)) (kd3093@invalid-fmls-error kd3582@stx kd3588@lhs*))) kd3586@ls/false) (let ((kd3590@t kd3584@t)) (let ((kd3592@ls/false (kd30d9@syntax-dispatch kd3590@t '(_ any #(each (any any)) any . each-any)))) (if (and kd3592@ls/false (apply (lambda (kd3594@f kd3595@lhs* kd3596@rhs* kd3597@b kd3598@b*) (kd2ed2@id? kd3594@f)) kd3592@ls/false)) (apply (lambda (kd359e@f kd359f@lhs* kd35a0@rhs* kd35a1@b kd35a2@b*) (if (kd2eda@valid-bound-ids? kd359f@lhs*) (kd308f@bless (cons (list 'letrec (list (list kd359e@f (cons 'lambda (cons kd359f@lhs* (cons kd35a1@b kd35a2@b*))))) kd359e@f) kd35a0@rhs*)) (kd3093@invalid-fmls-error kd3582@stx kd359f@lhs*))) kd3592@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3590@t))))))))) (set! kd4b8d@kd3095@let-macro kd3095@let-macro) (set! kd3097@let-values-macro (lambda (kd35a8@stx) (let ((kd35ab@rename '#f) (kd35ad@rename* '#f)) (begin (set! kd35ab@rename (lambda (kd3610@x kd3611@old* kd3612@new*) (begin (if (not (kd2ed2@id? kd3610@x)) (kd31b9@syntax-violation '#f '"not an indentifier" kd35a8@stx kd3610@x) (void)) (if (kd2ede@bound-id-member? kd3610@x kd3611@old*) (kd31b9@syntax-violation '#f '"duplicate binding" kd35a8@stx kd3610@x) (void)) (let ((kd3616@y (gensym (kd31bf@syntax->datum kd3610@x)))) (values kd3616@y (cons kd3610@x kd3611@old*) (cons kd3616@y kd3612@new*)))))) (set! kd35ad@rename* (lambda (kd35fe@x* kd35ff@old* kd3600@new*) (if (null? kd35fe@x*) (values '() kd35ff@old* kd3600@new*) (call-with-values (lambda () (kd35ab@rename (car kd35fe@x*) kd35ff@old* kd3600@new*)) (lambda (kd3604@x kd3605@old* kd3606@new*) (call-with-values (lambda () (kd35ad@rename* (cdr kd35fe@x*) kd3605@old* kd3606@new*)) (lambda (kd360a@x* kd360b@old* kd360c@new*) (values (cons kd3604@x kd360a@x*) kd360b@old* kd360c@new*)))))))) (let ((kd35ae@t kd35a8@stx)) (let ((kd35b0@ls/false (kd30d9@syntax-dispatch kd35ae@t '(_ () any . each-any)))) (if kd35b0@ls/false (apply (lambda (kd35b2@b kd35b3@b*) (cons* (kd308f@bless 'let) '() kd35b2@b kd35b3@b*)) kd35b0@ls/false) (let ((kd35b6@t kd35ae@t)) (let ((kd35b8@ls/false (kd30d9@syntax-dispatch kd35b6@t '(_ #(each (any any)) any . each-any)))) (if kd35b8@ls/false (apply (lambda (kd35ba@lhs* kd35bb@rhs* kd35bc@b kd35bd@b*) (kd308f@bless (let kd35ca@f ((kd35c2@lhs* kd35ba@lhs*) (kd35c3@rhs* kd35bb@rhs*) (kd35c4@old* '()) (kd35c5@new* '())) (if (null? kd35c2@lhs*) (cons 'let (cons (map list kd35c4@old* kd35c5@new*) (cons kd35bc@b kd35bd@b*))) (let ((kd35cc@t (car kd35c2@lhs*))) (let ((kd35ce@ls/false (kd30d9@syntax-dispatch kd35cc@t 'each-any))) (if kd35ce@ls/false (apply (lambda (kd35d0@x*) (call-with-values (lambda () (kd35ad@rename* kd35d0@x* kd35c4@old* kd35c5@new*)) (lambda (kd35d8@kd35d3 kd35d9@kd35d5 kd35da@kd35d7) (let ((kd35de@new* kd35da@kd35d7) (kd35df@old* kd35d9@kd35d5) (kd35e0@y* kd35d8@kd35d3)) (list 'call-with-values (list 'lambda '() (car kd35c3@rhs*)) (list 'lambda kd35e0@y* (kd35ca@f (cdr kd35c2@lhs*) (cdr kd35c3@rhs*) kd35df@old* kd35de@new*))))))) kd35ce@ls/false) (let ((kd35e4@t kd35cc@t)) (let ((kd35e6@ls/false (kd30d9@syntax-dispatch kd35e4@t '#(each+ any () any)))) (if kd35e6@ls/false (apply (lambda (kd35e8@x* kd35e9@x) (call-with-values (lambda () (kd35ab@rename kd35e9@x kd35c4@old* kd35c5@new*)) (lambda (kd35ec@y kd35ed@old* kd35ee@new*) (call-with-values (lambda () (kd35ad@rename* kd35e8@x* kd35ed@old* kd35ee@new*)) (lambda (kd35f2@y* kd35f3@old* kd35f4@new*) (list 'call-with-values (list 'lambda '() (car kd35c3@rhs*)) (list 'lambda (append kd35f2@y* kd35ec@y) (kd35ca@f (cdr kd35c2@lhs*) (cdr kd35c3@rhs*) kd35f3@old* kd35f4@new*)))))))) kd35e6@ls/false) (let ((kd35f8@t kd35e4@t)) (let ((kd35fa@ls/false (kd30d9@syntax-dispatch kd35f8@t 'any))) (if kd35fa@ls/false (apply (lambda (kd35fc@others) (kd31b9@syntax-violation '#f '"malformed bindings" kd35a8@stx kd35fc@others)) kd35fa@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd35f8@t)))))))))))))) kd35b8@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd35b6@t))))))))))) (set! kd4b8e@kd3097@let-values-macro kd3097@let-values-macro) (set! kd3099@let*-values-macro (lambda (kd3618@stx) (let ((kd361b@check '#f)) (begin (set! kd361b@check (lambda (kd364a@x*) (if (not (null? kd364a@x*)) (let ((kd364c@x (car kd364a@x*))) (begin (if (not (kd2ed2@id? kd364c@x)) (kd31b9@syntax-violation '#f '"not an identifier" kd3618@stx kd364c@x) (void)) (kd361b@check (cdr kd364a@x*)) (if (kd2ede@bound-id-member? kd364c@x (cdr kd364a@x*)) (kd31b9@syntax-violation '#f '"duplicate identifier" kd3618@stx kd364c@x) (void)))) (void)))) (let ((kd361c@t kd3618@stx)) (let ((kd361e@ls/false (kd30d9@syntax-dispatch kd361c@t '(_ () any . each-any)))) (if kd361e@ls/false (apply (lambda (kd3620@b kd3621@b*) (cons* (kd308f@bless 'let) '() kd3620@b kd3621@b*)) kd361e@ls/false) (let ((kd3624@t kd361c@t)) (let ((kd3626@ls/false (kd30d9@syntax-dispatch kd3624@t '(_ #(each (any any)) any . each-any)))) (if kd3626@ls/false (apply (lambda (kd3628@lhs* kd3629@rhs* kd362a@b kd362b@b*) (kd308f@bless (let kd3634@f ((kd3630@lhs* kd3628@lhs*) (kd3631@rhs* kd3629@rhs*)) (if (null? kd3630@lhs*) (cons 'begin (cons kd362a@b kd362b@b*)) (let ((kd3636@t (car kd3630@lhs*))) (let ((kd3638@ls/false (kd30d9@syntax-dispatch kd3636@t 'each-any))) (if kd3638@ls/false (apply (lambda (kd363a@x*) (begin (kd361b@check kd363a@x*) (list 'call-with-values (list 'lambda '() (car kd3631@rhs*)) (list 'lambda kd363a@x* (kd3634@f (cdr kd3630@lhs*) (cdr kd3631@rhs*)))))) kd3638@ls/false) (let ((kd363c@t kd3636@t)) (let ((kd363e@ls/false (kd30d9@syntax-dispatch kd363c@t '#(each+ any () any)))) (if kd363e@ls/false (apply (lambda (kd3640@x* kd3641@x) (begin (kd361b@check (cons kd3641@x kd3640@x*)) (list 'call-with-values (list 'lambda '() (car kd3631@rhs*)) (list 'lambda (append kd3640@x* kd3641@x) (kd3634@f (cdr kd3630@lhs*) (cdr kd3631@rhs*)))))) kd363e@ls/false) (let ((kd3644@t kd363c@t)) (let ((kd3646@ls/false (kd30d9@syntax-dispatch kd3644@t 'any))) (if kd3646@ls/false (apply (lambda (kd3648@others) (kd31b9@syntax-violation '#f '"malformed bindings" kd3618@stx kd3648@others)) kd3646@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3644@t)))))))))))))) kd3626@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3624@t))))))))))) (set! kd4b8f@kd3099@let*-values-macro kd3099@let*-values-macro) (set! kd309b@trace-lambda-macro (lambda (kd364e@stx) (let ((kd3650@t kd364e@stx)) (let ((kd3652@ls/false (kd30d9@syntax-dispatch kd3650@t '(_ any each-any any . each-any)))) (if kd3652@ls/false (apply (lambda (kd3654@who kd3655@fmls kd3656@b kd3657@b*) (if (kd2eda@valid-bound-ids? kd3655@fmls) (kd308f@bless (list 'make-traced-procedure (list 'quote kd3654@who) (cons 'lambda (cons kd3655@fmls (cons kd3656@b kd3657@b*))))) (kd3093@invalid-fmls-error kd364e@stx kd3655@fmls))) kd3652@ls/false) (let ((kd365c@t kd3650@t)) (let ((kd365e@ls/false (kd30d9@syntax-dispatch kd365c@t '(_ any #(each+ any () any) any . each-any)))) (if kd365e@ls/false (apply (lambda (kd3660@who kd3661@fmls kd3662@last kd3663@b kd3664@b*) (if (kd2eda@valid-bound-ids? (cons kd3662@last kd3661@fmls)) (kd308f@bless (list 'make-traced-procedure (list 'quote kd3660@who) (cons 'lambda (cons (append kd3661@fmls kd3662@last) (cons kd3663@b kd3664@b*))))) (kd3093@invalid-fmls-error kd364e@stx (append kd3661@fmls kd3662@last)))) kd365e@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd365c@t))))))))) (set! kd4b90@kd309b@trace-lambda-macro kd309b@trace-lambda-macro) (set! kd309d@trace-define-macro (lambda (kd366a@stx) (let ((kd366c@t kd366a@stx)) (let ((kd366e@ls/false (kd30d9@syntax-dispatch kd366c@t '(_ (any . each-any) any . each-any)))) (if kd366e@ls/false (apply (lambda (kd3670@who kd3671@fmls kd3672@b kd3673@b*) (if (kd2eda@valid-bound-ids? kd3671@fmls) (kd308f@bless (list 'define kd3670@who (list 'make-traced-procedure (list 'quote kd3670@who) (cons 'lambda (cons kd3671@fmls (cons kd3672@b kd3673@b*)))))) (kd3093@invalid-fmls-error kd366a@stx kd3671@fmls))) kd366e@ls/false) (let ((kd3678@t kd366c@t)) (let ((kd367a@ls/false (kd30d9@syntax-dispatch kd3678@t '(_ (any . #(each+ any () any)) any . each-any)))) (if kd367a@ls/false (apply (lambda (kd367c@who kd367d@fmls kd367e@last kd367f@b kd3680@b*) (if (kd2eda@valid-bound-ids? (cons kd367e@last kd367d@fmls)) (kd308f@bless (list 'define kd367c@who (list 'make-traced-procedure (list 'quote kd367c@who) (cons 'lambda (cons (append kd367d@fmls kd367e@last) (cons kd367f@b kd3680@b*)))))) (kd3093@invalid-fmls-error kd366a@stx (append kd367d@fmls kd367e@last)))) kd367a@ls/false) (let ((kd3686@t kd3678@t)) (let ((kd3688@ls/false (kd30d9@syntax-dispatch kd3686@t '(_ any any)))) (if kd3688@ls/false (apply (lambda (kd368a@who kd368b@expr) (if (kd2ed2@id? kd368a@who) (kd308f@bless (list 'define kd368a@who (list 'let (list (list 'v kd368b@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote kd368a@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (kd31b9@syntax-violation '#f '"invalid name" kd366a@stx))) kd3688@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3686@t)))))))))))) (set! kd4b91@kd309d@trace-define-macro kd309d@trace-define-macro) (set! kd309f@trace-define-syntax-macro (lambda (kd368e@stx) (let ((kd3690@t kd368e@stx)) (let ((kd3692@ls/false (kd30d9@syntax-dispatch kd3690@t '(_ any any)))) (if kd3692@ls/false (apply (lambda (kd3694@who kd3695@expr) (if (kd2ed2@id? kd3694@who) (kd308f@bless (list 'define-syntax kd3694@who (list 'make-traced-macro (list 'quote kd3694@who) kd3695@expr))) (kd31b9@syntax-violation '#f '"invalid name" kd368e@stx))) kd3692@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3690@t)))))) (set! kd4b92@kd309f@trace-define-syntax-macro kd309f@trace-define-syntax-macro) (set! kd30a1@trace-let/rec-syntax (lambda (kd3698@who) (lambda (kd369a@stx) (let ((kd369c@t kd369a@stx)) (let ((kd369e@ls/false (kd30d9@syntax-dispatch kd369c@t '(_ #(each (any any)) any . each-any)))) (if kd369e@ls/false (apply (lambda (kd36a0@lhs* kd36a1@rhs* kd36a2@b kd36a3@b*) (if (kd2eda@valid-bound-ids? kd36a0@lhs*) (let ((kd36a8@rhs* (map (lambda (kd36aa@lhs kd36ab@rhs) (list 'make-traced-macro (list 'quote kd36aa@lhs) kd36ab@rhs)) kd36a0@lhs* kd36a1@rhs*))) (kd308f@bless (cons kd3698@who (cons (map list kd36a0@lhs* kd36a8@rhs*) (cons kd36a2@b kd36a3@b*))))) (kd3093@invalid-fmls-error kd369a@stx kd36a0@lhs*))) kd369e@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd369c@t))))))) (set! kd4b93@kd30a1@trace-let/rec-syntax kd30a1@trace-let/rec-syntax) (set! kd30a3@trace-let-syntax-macro (kd30a1@trace-let/rec-syntax 'let-syntax)) (set! kd4b94@kd30a3@trace-let-syntax-macro kd30a3@trace-let-syntax-macro) (set! kd30a5@trace-letrec-syntax-macro (kd30a1@trace-let/rec-syntax 'letrec-syntax)) (set! kd4b95@kd30a5@trace-letrec-syntax-macro kd30a5@trace-letrec-syntax-macro) (set! kd30a7@guard-macro (lambda (kd36ae@x) (let ((kd36b1@gen-clauses '#f)) (begin (set! kd36b1@gen-clauses (lambda (kd36c8@con kd36c9@outerk kd36ca@clause*) (let ((kd36cf@f '#f) (kd36d1@f* '#f)) (begin (set! kd36cf@f (lambda (kd3708@x kd3709@k) (let ((kd370c@t kd3708@x)) (let ((kd370e@ls/false (kd30d9@syntax-dispatch kd370c@t '(any #(scheme-id =>) any)))) (if kd370e@ls/false (apply (lambda (kd3710@e kd3711@p) (let ((kd3714@t (gensym))) (list 'let (list (list kd3714@t kd3710@e)) (list 'if kd3714@t (list kd3711@p kd3714@t) kd3709@k)))) kd370e@ls/false) (let ((kd3716@t kd370c@t)) (let ((kd3718@ls/false (kd30d9@syntax-dispatch kd3716@t '(any)))) (if kd3718@ls/false (apply (lambda (kd371a@e) (let ((kd371c@t (gensym))) (list 'let (list (list kd371c@t kd371a@e)) (list 'if kd371c@t kd371c@t kd3709@k)))) kd3718@ls/false) (let ((kd371e@t kd3716@t)) (let ((kd3720@ls/false (kd30d9@syntax-dispatch kd371e@t '(any any . each-any)))) (if kd3720@ls/false (apply (lambda (kd3722@e kd3723@v kd3724@v*) (list 'if kd3722@e (cons 'begin (cons kd3723@v kd3724@v*)) kd3709@k)) kd3720@ls/false) (let ((kd3728@t kd371e@t)) (let ((kd372a@ls/false (kd30d9@syntax-dispatch kd3728@t '_))) (if kd372a@ls/false (apply (lambda () (kd31b9@syntax-violation '#f '"invalid guard clause" kd3708@x)) kd372a@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3728@t))))))))))))))) (set! kd36d1@f* (lambda (kd36de@x*) (let ((kd36e0@t kd36de@x*)) (let ((kd36e2@ls/false (kd30d9@syntax-dispatch kd36e0@t '()))) (if kd36e2@ls/false (apply (lambda () (let ((kd36e4@g (gensym))) (values (list kd36e4@g (list 'lambda '() (list 'raise-continuable kd36c8@con))) kd36e4@g))) kd36e2@ls/false) (let ((kd36e6@t kd36e0@t)) (let ((kd36e8@ls/false (kd30d9@syntax-dispatch kd36e6@t '((#(scheme-id else) any . each-any))))) (if kd36e8@ls/false (apply (lambda (kd36ea@e kd36eb@e*) (values (cons 'begin (cons kd36ea@e kd36eb@e*)) '#f)) kd36e8@ls/false) (let ((kd36ee@t kd36e6@t)) (let ((kd36f0@ls/false (kd30d9@syntax-dispatch kd36ee@t '(any . any)))) (if kd36f0@ls/false (apply (lambda (kd36f2@cls kd36f3@cls*) (call-with-values (lambda () (kd36d1@f* kd36f3@cls*)) (lambda (kd36fa@kd36f7 kd36fb@kd36f9) (let ((kd36fe@g kd36fb@kd36f9) (kd36ff@e kd36fa@kd36f7)) (values (kd36cf@f kd36f2@cls kd36ff@e) kd36fe@g))))) kd36f0@ls/false) (let ((kd3702@t kd36ee@t)) (let ((kd3704@ls/false (kd30d9@syntax-dispatch kd3702@t 'any))) (if kd3704@ls/false (apply (lambda (kd3706@others) (kd31b9@syntax-violation '#f '"invalid guard clause" kd3706@others)) kd3704@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3702@t))))))))))))))) (call-with-values (lambda () (kd36d1@f* kd36ca@clause*)) (lambda (kd36d6@kd36d3 kd36d7@kd36d5) (let ((kd36da@raisek kd36d7@kd36d5) (kd36db@code kd36d6@kd36d3)) (if kd36da@raisek (list (list 'call/cc (list 'lambda (list kd36da@raisek) (list kd36c9@outerk (list 'lambda '() kd36db@code))))) (list kd36c9@outerk (list 'lambda '() kd36db@code)))))))))) (let ((kd36b2@t kd36ae@x)) (let ((kd36b4@ls/false (kd30d9@syntax-dispatch kd36b2@t '(_ (any . each-any) any . each-any)))) (if (and kd36b4@ls/false (apply (lambda (kd36b6@con kd36b7@clause* kd36b8@b kd36b9@b*) (kd2ed2@id? kd36b6@con)) kd36b4@ls/false)) (apply (lambda (kd36be@con kd36bf@clause* kd36c0@b kd36c1@b*) (let ((kd36c6@outerk (gensym))) (kd308f@bless (list (list 'call/cc (list 'lambda (list kd36c6@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list kd36be@con) (kd36b1@gen-clauses kd36be@con kd36c6@outerk kd36bf@clause*)) (cons 'lambda (cons '() (cons kd36c0@b kd36c1@b*))))))))))) kd36b4@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd36b2@t)))))))) (set! kd4b96@kd30a7@guard-macro kd30a7@guard-macro) (set! kd30a9@define-enumeration-macro (lambda (kd372c@stx) (let ((kd372f@set? '#f) (kd3731@remove-dups '#f)) (begin (set! kd372f@set? (lambda (kd3748@x) (or (null? kd3748@x) (and (not (memq (car kd3748@x) (cdr kd3748@x))) (kd372f@set? (cdr kd3748@x)))))) (set! kd3731@remove-dups (lambda (kd3746@ls) (if (null? kd3746@ls) '() (cons (car kd3746@ls) (kd3731@remove-dups (remq (car kd3746@ls) (cdr kd3746@ls))))))) (let ((kd3732@t kd372c@stx)) (let ((kd3734@ls/false (kd30d9@syntax-dispatch kd3732@t '(_ any each-any any)))) (if (and kd3734@ls/false (apply (lambda (kd3736@name kd3737@id* kd3738@maker) (and (kd2ed2@id? kd3736@name) (kd2ed2@id? kd3738@maker) (for-all kd2ed2@id? kd3737@id*))) kd3734@ls/false)) (apply (lambda (kd373c@name kd373d@id* kd373e@maker) (let ((kd3742@name* (kd3731@remove-dups (kd31bf@syntax->datum kd373d@id*))) (kd3743@mk (gensym))) (kd308f@bless (list 'begin (list 'define kd3743@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote kd3742@name*)))) (list 'define-syntax kd373c@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote kd3742@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote kd373c@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax kd373e@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote kd373e@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote kd3742@name*)) (cons 'syntax-violation (cons (list 'quote kd373e@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons kd3743@mk '('(n* ...))))))))))))) kd3734@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3732@t)))))))) (set! kd4b97@kd30a9@define-enumeration-macro kd30a9@define-enumeration-macro) (set! kd30ab@time-macro (lambda (kd374a@stx) (let ((kd374c@t kd374a@stx)) (let ((kd374e@ls/false (kd30d9@syntax-dispatch kd374c@t '(_ any)))) (if kd374e@ls/false (apply (lambda (kd3750@expr) (kd308f@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() kd3750@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) kd374e@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd374c@t)))))) (set! kd4b98@kd30ab@time-macro kd30ab@time-macro) (set! kd30ad@delay-macro (lambda (kd3752@stx) (let ((kd3754@t kd3752@stx)) (let ((kd3756@ls/false (kd30d9@syntax-dispatch kd3754@t '(_ any)))) (if kd3756@ls/false (apply (lambda (kd3758@expr) (kd308f@bless (list 'make-promise (list 'lambda '() kd3758@expr)))) kd3756@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3754@t)))))) (set! kd4b99@kd30ad@delay-macro kd30ad@delay-macro) (set! kd30af@assert-macro (lambda (kd375a@stx) (let ((kd375c@t kd375a@stx)) (let ((kd375e@ls/false (kd30d9@syntax-dispatch kd375c@t '(_ any)))) (if kd375e@ls/false (apply (lambda (kd3760@expr) (let ((kd3762@pos (or (kd31b1@expression-position kd375a@stx) (kd31b1@expression-position kd3760@expr)))) (kd308f@bless (list 'let (list (list 'x kd3760@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote kd3760@expr) (list 'quote kd3762@pos))))))) kd375e@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd375c@t)))))) (set! kd4b9a@kd30af@assert-macro kd30af@assert-macro) (set! kd30b1@endianness-macro (lambda (kd3764@stx) (let ((kd3766@t kd3764@stx)) (let ((kd3768@ls/false (kd30d9@syntax-dispatch kd3766@t '(_ any)))) (if kd3768@ls/false (apply (lambda (kd376a@e) (let ((kd376c@t (kd31bf@syntax->datum kd376a@e))) (if (memv kd376c@t '(little)) (kd308f@bless ''little) (if (memv kd376c@t '(big)) (kd308f@bless ''big) (kd31b9@syntax-violation '#f '"endianness must be big or little" kd3764@stx))))) kd3768@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3766@t)))))) (set! kd4b9b@kd30b1@endianness-macro kd30b1@endianness-macro) (set! kd30b3@identifier-syntax-macro (lambda (kd376e@stx) (let ((kd3770@t kd376e@stx)) (let ((kd3772@ls/false (kd30d9@syntax-dispatch kd3770@t '(_ any)))) (if kd3772@ls/false (apply (lambda (kd3774@expr) (kd308f@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax kd3774@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax kd3774@expr) '((syntax (e* ...)))))))))) kd3772@ls/false) (let ((kd3776@t kd3770@t)) (let ((kd3778@ls/false (kd30d9@syntax-dispatch kd3776@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and kd3778@ls/false (apply (lambda (kd377a@id1 kd377b@expr1 kd377c@id2 kd377d@expr2 kd377e@expr3) (and (kd2ed2@id? kd377a@id1) (kd2ed2@id? kd377c@id2) (kd2ed2@id? kd377d@expr2))) kd3778@ls/false)) (apply (lambda (kd3784@id1 kd3785@expr1 kd3786@id2 kd3787@expr2 kd3788@expr3) (kd308f@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax kd3785@expr1)) (list (list 'set! 'id kd3787@expr2) (list 'syntax kd3788@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons kd3785@expr1 '(e* ...))))))))) kd3778@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3776@t))))))))) (set! kd4b9c@kd30b3@identifier-syntax-macro kd30b3@identifier-syntax-macro) (set! kd30b5@do-macro (lambda (kd378e@stx) (let ((kd3791@bind '#f)) (begin (set! kd3791@bind (lambda (kd37a8@x) (let ((kd37aa@t kd37a8@x)) (let ((kd37ac@ls/false (kd30d9@syntax-dispatch kd37aa@t '(any any)))) (if kd37ac@ls/false (apply (lambda (kd37ae@x kd37af@init) (list kd37ae@x kd37af@init kd37ae@x)) kd37ac@ls/false) (let ((kd37b2@t kd37aa@t)) (let ((kd37b4@ls/false (kd30d9@syntax-dispatch kd37b2@t '(any any any)))) (if kd37b4@ls/false (apply (lambda (kd37b6@x kd37b7@init kd37b8@step) (list kd37b6@x kd37b7@init kd37b8@step)) kd37b4@ls/false) (let ((kd37bc@t kd37b2@t)) (let ((kd37be@ls/false (kd30d9@syntax-dispatch kd37bc@t '_))) (if kd37be@ls/false (apply (lambda () (kd31b9@syntax-violation '#f '"invalid binding" kd378e@stx)) kd37be@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd37bc@t)))))))))))) (let ((kd3792@t kd378e@stx)) (let ((kd3794@ls/false (kd30d9@syntax-dispatch kd3792@t '(_ each-any (any . each-any) . each-any)))) (if kd3794@ls/false (apply (lambda (kd3796@binding* kd3797@test kd3798@expr* kd3799@command*) (let ((kd379e@t (map kd3791@bind kd3796@binding*))) (let ((kd37a0@ls/false (kd30d9@syntax-dispatch kd379e@t '#(each (any any any))))) (if kd37a0@ls/false (apply (lambda (kd37a2@x* kd37a3@init* kd37a4@step*) (if (kd2eda@valid-bound-ids? kd37a2@x*) (kd308f@bless (list 'letrec (list (list 'loop (list 'lambda kd37a2@x* (list 'if kd3797@test (cons 'begin (cons '(if #f #f) kd3798@expr*)) (cons 'begin (append kd3799@command* (list (cons 'loop kd37a4@step*)))))))) (cons 'loop kd37a3@init*))) (kd31b9@syntax-violation '#f '"invalid bindings" kd378e@stx))) kd37a0@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd379e@t))))) kd3794@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3792@t)))))))) (set! kd4b9d@kd30b5@do-macro kd30b5@do-macro) (set! kd30b7@let*-macro (lambda (kd37c0@stx) (let ((kd37c2@t kd37c0@stx)) (let ((kd37c4@ls/false (kd30d9@syntax-dispatch kd37c2@t '(_ #(each (any any)) any . each-any)))) (if (and kd37c4@ls/false (apply (lambda (kd37c6@lhs* kd37c7@rhs* kd37c8@b kd37c9@b*) (for-all kd2ed2@id? kd37c6@lhs*)) kd37c4@ls/false)) (apply (lambda (kd37ce@lhs* kd37cf@rhs* kd37d0@b kd37d1@b*) (kd308f@bless (let kd37d8@f ((kd37d6@x* (map list kd37ce@lhs* kd37cf@rhs*))) (if (null? kd37d6@x*) (cons 'let (cons '() (cons kd37d0@b kd37d1@b*))) (list 'let (list (car kd37d6@x*)) (kd37d8@f (cdr kd37d6@x*))))))) kd37c4@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd37c2@t)))))) (set! kd4b9e@kd30b7@let*-macro kd30b7@let*-macro) (set! kd30b9@or-macro (lambda (kd37da@stx) (let ((kd37dc@t kd37da@stx)) (let ((kd37de@ls/false (kd30d9@syntax-dispatch kd37dc@t '(_)))) (if kd37de@ls/false (apply (lambda () '#f) kd37de@ls/false) (let ((kd37e0@t kd37dc@t)) (let ((kd37e2@ls/false (kd30d9@syntax-dispatch kd37e0@t '(_ any . each-any)))) (if kd37e2@ls/false (apply (lambda (kd37e4@e kd37e5@e*) (kd308f@bless (let kd37ec@f ((kd37e8@e kd37e4@e) (kd37e9@e* kd37e5@e*)) (if (null? kd37e9@e*) (list 'begin '#f kd37e8@e) (list 'let (list (list 't kd37e8@e)) (list 'if 't 't (kd37ec@f (car kd37e9@e*) (cdr kd37e9@e*)))))))) kd37e2@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd37e0@t))))))))) (set! kd4b9f@kd30b9@or-macro kd30b9@or-macro) (set! kd30bb@and-macro (lambda (kd37ee@stx) (let ((kd37f0@t kd37ee@stx)) (let ((kd37f2@ls/false (kd30d9@syntax-dispatch kd37f0@t '(_)))) (if kd37f2@ls/false (apply (lambda () '#t) kd37f2@ls/false) (let ((kd37f4@t kd37f0@t)) (let ((kd37f6@ls/false (kd30d9@syntax-dispatch kd37f4@t '(_ any . each-any)))) (if kd37f6@ls/false (apply (lambda (kd37f8@e kd37f9@e*) (kd308f@bless (let kd3800@f ((kd37fc@e kd37f8@e) (kd37fd@e* kd37f9@e*)) (if (null? kd37fd@e*) (list 'begin '#f kd37fc@e) (cons 'if (cons kd37fc@e (cons (kd3800@f (car kd37fd@e*) (cdr kd37fd@e*)) '(#f)))))))) kd37f6@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd37f4@t))))))))) (set! kd4ba0@kd30bb@and-macro kd30bb@and-macro) (set! kd30bd@cond-macro (lambda (kd3802@stx) (let ((kd3804@t kd3802@stx)) (let ((kd3806@ls/false (kd30d9@syntax-dispatch kd3804@t '(_ any . each-any)))) (if kd3806@ls/false (apply (lambda (kd3808@cls kd3809@cls*) (kd308f@bless (let kd3810@f ((kd380c@cls kd3808@cls) (kd380d@cls* kd3809@cls*)) (if (null? kd380d@cls*) (let ((kd3812@t kd380c@cls)) (let ((kd3814@ls/false (kd30d9@syntax-dispatch kd3812@t '(#(scheme-id else) any . each-any)))) (if kd3814@ls/false (apply (lambda (kd3816@e kd3817@e*) (cons 'begin (cons kd3816@e kd3817@e*))) kd3814@ls/false) (let ((kd381a@t kd3812@t)) (let ((kd381c@ls/false (kd30d9@syntax-dispatch kd381a@t '(any #(scheme-id =>) any)))) (if kd381c@ls/false (apply (lambda (kd381e@e kd381f@p) (list 'let (list (list 't kd381e@e)) (list 'if 't (cons kd381f@p '(t))))) kd381c@ls/false) (let ((kd3822@t kd381a@t)) (let ((kd3824@ls/false (kd30d9@syntax-dispatch kd3822@t '(any)))) (if kd3824@ls/false (apply (lambda (kd3826@e) (cons 'or (cons kd3826@e '((if #f #f))))) kd3824@ls/false) (let ((kd3828@t kd3822@t)) (let ((kd382a@ls/false (kd30d9@syntax-dispatch kd3828@t '(any . each-any)))) (if kd382a@ls/false (apply (lambda (kd382c@e kd382d@e*) (list 'if kd382c@e (cons 'begin kd382d@e*))) kd382a@ls/false) (let ((kd3830@t kd3828@t)) (let ((kd3832@ls/false (kd30d9@syntax-dispatch kd3830@t '_))) (if kd3832@ls/false (apply (lambda () (kd31b9@syntax-violation '#f '"invalid last clause" kd3802@stx)) kd3832@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3830@t)))))))))))))))) (let ((kd3834@t kd380c@cls)) (let ((kd3836@ls/false (kd30d9@syntax-dispatch kd3834@t '(#(scheme-id else) any . each-any)))) (if kd3836@ls/false (apply (lambda (kd3838@e kd3839@e*) (kd31b9@syntax-violation '#f '"incorrect position of keyword else" kd3802@stx)) kd3836@ls/false) (let ((kd383c@t kd3834@t)) (let ((kd383e@ls/false (kd30d9@syntax-dispatch kd383c@t '(any #(scheme-id =>) any)))) (if kd383e@ls/false (apply (lambda (kd3840@e kd3841@p) (list 'let (list (list 't kd3840@e)) (list 'if 't (cons kd3841@p '(t)) (kd3810@f (car kd380d@cls*) (cdr kd380d@cls*))))) kd383e@ls/false) (let ((kd3844@t kd383c@t)) (let ((kd3846@ls/false (kd30d9@syntax-dispatch kd3844@t '(any)))) (if kd3846@ls/false (apply (lambda (kd3848@e) (list 'or kd3848@e (kd3810@f (car kd380d@cls*) (cdr kd380d@cls*)))) kd3846@ls/false) (let ((kd384a@t kd3844@t)) (let ((kd384c@ls/false (kd30d9@syntax-dispatch kd384a@t '(any . each-any)))) (if kd384c@ls/false (apply (lambda (kd384e@e kd384f@e*) (list 'if kd384e@e (cons 'begin kd384f@e*) (kd3810@f (car kd380d@cls*) (cdr kd380d@cls*)))) kd384c@ls/false) (let ((kd3852@t kd384a@t)) (let ((kd3854@ls/false (kd30d9@syntax-dispatch kd3852@t '_))) (if kd3854@ls/false (apply (lambda () (kd31b9@syntax-violation '#f '"invalid last clause" kd3802@stx)) kd3854@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3852@t)))))))))))))))))))) kd3806@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3804@t)))))) (set! kd4ba1@kd30bd@cond-macro kd30bd@cond-macro) (set! kd30bf@do-include (lambda (kd3856@stx kd3857@id kd3858@filename) (let ((kd385c@filename (kd2ee6@stx->datum kd3858@filename))) (begin (if (not (and (string? kd385c@filename) (kd2ed2@id? kd3857@id))) (kd31b9@syntax-violation '#f '"invalid syntax" kd3856@stx) (void)) (cons (kd308f@bless 'begin) (with-input-from-file kd385c@filename (lambda () (let kd3860@f ((kd385e@ls '())) (let ((kd3862@x (kd2a09@kd28d9@read-annotated))) (if (eof-object? kd3862@x) (reverse kd385e@ls) (kd3860@f (cons (kd2eb2@datum->stx kd3857@id kd3862@x) kd385e@ls)))))))))))) (set! kd4ba2@kd30bf@do-include kd30bf@do-include) (set! kd30c1@include-macro (lambda (kd3864@e) (let ((kd3866@t kd3864@e)) (let ((kd3868@ls/false (kd30d9@syntax-dispatch kd3866@t '(any any)))) (if kd3868@ls/false (apply (lambda (kd386a@id kd386b@filename) (kd30bf@do-include kd3864@e kd386a@id kd386b@filename)) kd3868@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3866@t)))))) (set! kd4ba3@kd30c1@include-macro kd30c1@include-macro) (set! kd30c3@include-into-macro (lambda (kd386e@e) (let ((kd3870@t kd386e@e)) (let ((kd3872@ls/false (kd30d9@syntax-dispatch kd3870@t '(_ any any)))) (if kd3872@ls/false (apply (lambda (kd3874@id kd3875@filename) (kd30bf@do-include kd386e@e kd3874@id kd3875@filename)) kd3872@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3870@t)))))) (set! kd4ba4@kd30c3@include-into-macro kd30c3@include-into-macro) (set! kd30c5@syntax-rules-macro (lambda (kd3878@e) (let ((kd387a@t kd3878@e)) (let ((kd387c@ls/false (kd30d9@syntax-dispatch kd387a@t '(_ each-any . #(each (any any)))))) (if kd387c@ls/false (apply (lambda (kd387e@lits kd387f@pat* kd3880@tmp*) (begin (kd30df@verify-literals kd387e@lits kd3878@e) (kd308f@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons kd387e@lits (map (lambda (kd3884@pat kd3885@tmp) (let ((kd3888@t kd3884@pat)) (let ((kd388a@ls/false (kd30d9@syntax-dispatch kd3888@t '(_ . any)))) (if kd388a@ls/false (apply (lambda (kd388c@rest) (list (cons 'g kd388c@rest) (list 'syntax kd3885@tmp))) kd388a@ls/false) (let ((kd388e@t kd3888@t)) (let ((kd3890@ls/false (kd30d9@syntax-dispatch kd388e@t '_))) (if kd3890@ls/false (apply (lambda () (kd31b9@syntax-violation '#f '"invalid syntax-rules pattern" kd3878@e kd3884@pat)) kd3890@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd388e@t)))))))) kd387f@pat* kd3880@tmp*)))))))) kd387c@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd387a@t)))))) (set! kd4ba5@kd30c5@syntax-rules-macro kd30c5@syntax-rules-macro) (set! kd30c7@quasiquote-macro (let ((kd3893@datum '#f) (kd38af@quasicons* '#f) (kd38b1@quasicons '#f) (kd38b3@quasiappend '#f) (kd38b5@quasivector '#f) (kd38b7@vquasi '#f) (kd38b9@quasi '#f)) (begin (set! kd3893@datum (lambda (kd3994@x) (list (kd3061@scheme-stx 'quote) (kd2eba@mkstx kd3994@x '() '() '())))) (set! kd38af@quasicons* (lambda (kd398c@x kd398d@y) (let kd3992@f ((kd3990@x kd398c@x)) (if (null? kd3990@x) kd398d@y (kd38b1@quasicons (car kd3990@x) (kd3992@f (cdr kd3990@x))))))) (set! kd38b1@quasicons (lambda (kd3966@x kd3967@y) (let ((kd396a@t kd3967@y)) (let ((kd396c@ls/false (kd30d9@syntax-dispatch kd396a@t '(#(scheme-id quote) any)))) (if kd396c@ls/false (apply (lambda (kd396e@dy) (let ((kd3970@t kd3966@x)) (let ((kd3972@ls/false (kd30d9@syntax-dispatch kd3970@t '(#(scheme-id quote) any)))) (if kd3972@ls/false (apply (lambda (kd3974@dx) (list (kd3061@scheme-stx 'quote) (cons kd3974@dx kd396e@dy))) kd3972@ls/false) (let ((kd3976@t kd3970@t)) (let ((kd3978@ls/false (kd30d9@syntax-dispatch kd3976@t '_))) (if kd3978@ls/false (apply (lambda () (let ((kd397a@t kd396e@dy)) (let ((kd397c@ls/false (kd30d9@syntax-dispatch kd397a@t '()))) (if kd397c@ls/false (apply (lambda () (list (kd3061@scheme-stx 'list) kd3966@x)) kd397c@ls/false) (let ((kd397e@t kd397a@t)) (let ((kd3980@ls/false (kd30d9@syntax-dispatch kd397e@t '_))) (if kd3980@ls/false (apply (lambda () (list (kd3061@scheme-stx 'cons) kd3966@x kd3967@y)) kd3980@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd397e@t)))))))) kd3978@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3976@t)))))))) kd396c@ls/false) (let ((kd3982@t kd396a@t)) (let ((kd3984@ls/false (kd30d9@syntax-dispatch kd3982@t '(#(scheme-id list) . each-any)))) (if kd3984@ls/false (apply (lambda (kd3986@stuff) (cons* (kd3061@scheme-stx 'list) kd3966@x kd3986@stuff)) kd3984@ls/false) (let ((kd3988@t kd3982@t)) (let ((kd398a@ls/false (kd30d9@syntax-dispatch kd3988@t '_))) (if kd398a@ls/false (apply (lambda () (list (kd3061@scheme-stx 'cons) kd3966@x kd3967@y)) kd398a@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3988@t)))))))))))) (set! kd38b3@quasiappend (lambda (kd394c@x kd394d@y) (let ((kd3950@ls (let kd3954@f ((kd3952@x kd394c@x)) (if (null? kd3952@x) (let ((kd3956@t kd394d@y)) (let ((kd3958@ls/false (kd30d9@syntax-dispatch kd3956@t '(#(scheme-id quote) ())))) (if kd3958@ls/false (apply (lambda () '()) kd3958@ls/false) (let ((kd395a@t kd3956@t)) (let ((kd395c@ls/false (kd30d9@syntax-dispatch kd395a@t '_))) (if kd395c@ls/false (apply (lambda () (list kd394d@y)) kd395c@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd395a@t))))))) (let ((kd395e@t (car kd3952@x))) (let ((kd3960@ls/false (kd30d9@syntax-dispatch kd395e@t '(#(scheme-id quote) ())))) (if kd3960@ls/false (apply (lambda () (kd3954@f (cdr kd3952@x))) kd3960@ls/false) (let ((kd3962@t kd395e@t)) (let ((kd3964@ls/false (kd30d9@syntax-dispatch kd3962@t '_))) (if kd3964@ls/false (apply (lambda () (cons (car kd3952@x) (kd3954@f (cdr kd3952@x)))) kd3964@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3962@t))))))))))) (if (null? kd3950@ls) (list (kd3061@scheme-stx 'quote) '()) (if (null? (cdr kd3950@ls)) (car kd3950@ls) (cons* (kd3061@scheme-stx 'append) kd3950@ls)))))) (set! kd38b5@quasivector (lambda (kd391a@x) (let ((kd391c@pat-x kd391a@x)) (let ((kd391e@t kd391c@pat-x)) (let ((kd3920@ls/false (kd30d9@syntax-dispatch kd391e@t '(#(scheme-id quote) each-any)))) (if kd3920@ls/false (apply (lambda (kd3922@x*) (list (kd3061@scheme-stx 'quote) (list->vector kd3922@x*))) kd3920@ls/false) (let ((kd3924@t kd391e@t)) (let ((kd3926@ls/false (kd30d9@syntax-dispatch kd3924@t '_))) (if kd3926@ls/false (apply (lambda () (let kd392e@f ((kd3928@x kd391a@x) (kd3929@k (lambda (kd392c@ls) (cons* (kd3061@scheme-stx 'vector) kd392c@ls)))) (let ((kd3930@t kd3928@x)) (let ((kd3932@ls/false (kd30d9@syntax-dispatch kd3930@t '(#(scheme-id quote) each-any)))) (if kd3932@ls/false (apply (lambda (kd3934@x*) (kd3929@k (map (lambda (kd3936@x) (list (kd3061@scheme-stx 'quote) kd3936@x)) kd3934@x*))) kd3932@ls/false) (let ((kd3938@t kd3930@t)) (let ((kd393a@ls/false (kd30d9@syntax-dispatch kd3938@t '(#(scheme-id list) . each-any)))) (if kd393a@ls/false (apply (lambda (kd393c@x*) (kd3929@k kd393c@x*)) kd393a@ls/false) (let ((kd393e@t kd3938@t)) (let ((kd3940@ls/false (kd30d9@syntax-dispatch kd393e@t '(#(scheme-id cons) any any)))) (if kd3940@ls/false (apply (lambda (kd3942@x kd3943@y) (kd392e@f kd3943@y (lambda (kd3946@ls) (kd3929@k (cons kd3942@x kd3946@ls))))) kd3940@ls/false) (let ((kd3948@t kd393e@t)) (let ((kd394a@ls/false (kd30d9@syntax-dispatch kd3948@t '_))) (if kd394a@ls/false (apply (lambda () (list (kd3061@scheme-stx 'list->vector) kd391c@pat-x)) kd394a@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3948@t))))))))))))))) kd3926@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3924@t)))))))))) (set! kd38b7@vquasi (lambda (kd38f8@p kd38f9@lev) (let ((kd38fc@t kd38f8@p)) (let ((kd38fe@ls/false (kd30d9@syntax-dispatch kd38fc@t '(any . any)))) (if kd38fe@ls/false (apply (lambda (kd3900@p kd3901@q) (let ((kd3904@t kd3900@p)) (let ((kd3906@ls/false (kd30d9@syntax-dispatch kd3904@t '(#(scheme-id unquote) . each-any)))) (if kd3906@ls/false (apply (lambda (kd3908@p) (if (= kd38f9@lev '0) (kd38af@quasicons* kd3908@p (kd38b7@vquasi kd3901@q kd38f9@lev)) (kd38b1@quasicons (kd38b1@quasicons (kd3893@datum 'unquote) (kd38b9@quasi kd3908@p (- kd38f9@lev '1))) (kd38b7@vquasi kd3901@q kd38f9@lev)))) kd3906@ls/false) (let ((kd390a@t kd3904@t)) (let ((kd390c@ls/false (kd30d9@syntax-dispatch kd390a@t '(#(scheme-id unquote-splicing) . each-any)))) (if kd390c@ls/false (apply (lambda (kd390e@p) (if (= kd38f9@lev '0) (kd38b3@quasiappend kd390e@p (kd38b7@vquasi kd3901@q kd38f9@lev)) (kd38b1@quasicons (kd38b1@quasicons (kd3893@datum 'unquote-splicing) (kd38b9@quasi kd390e@p (- kd38f9@lev '1))) (kd38b7@vquasi kd3901@q kd38f9@lev)))) kd390c@ls/false) (let ((kd3910@t kd390a@t)) (let ((kd3912@ls/false (kd30d9@syntax-dispatch kd3910@t 'any))) (if kd3912@ls/false (apply (lambda (kd3914@p) (kd38b1@quasicons (kd38b9@quasi kd3914@p kd38f9@lev) (kd38b7@vquasi kd3901@q kd38f9@lev))) kd3912@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3910@t))))))))))) kd38fe@ls/false) (let ((kd3916@t kd38fc@t)) (let ((kd3918@ls/false (kd30d9@syntax-dispatch kd3916@t '()))) (if kd3918@ls/false (apply (lambda () (list (kd3061@scheme-stx 'quote) '())) kd3918@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3916@t))))))))) (set! kd38b9@quasi (lambda (kd38c2@p kd38c3@lev) (let ((kd38c6@t kd38c2@p)) (let ((kd38c8@ls/false (kd30d9@syntax-dispatch kd38c6@t '(#(scheme-id unquote) any)))) (if kd38c8@ls/false (apply (lambda (kd38ca@p) (if (= kd38c3@lev '0) kd38ca@p (kd38b1@quasicons (kd3893@datum 'unquote) (kd38b9@quasi (list kd38ca@p) (- kd38c3@lev '1))))) kd38c8@ls/false) (let ((kd38cc@t kd38c6@t)) (let ((kd38ce@ls/false (kd30d9@syntax-dispatch kd38cc@t '((#(scheme-id unquote) . each-any) . any)))) (if kd38ce@ls/false (apply (lambda (kd38d0@p kd38d1@q) (if (= kd38c3@lev '0) (kd38af@quasicons* kd38d0@p (kd38b9@quasi kd38d1@q kd38c3@lev)) (kd38b1@quasicons (kd38b1@quasicons (kd3893@datum 'unquote) (kd38b9@quasi kd38d0@p (- kd38c3@lev '1))) (kd38b9@quasi kd38d1@q kd38c3@lev)))) kd38ce@ls/false) (let ((kd38d4@t kd38cc@t)) (let ((kd38d6@ls/false (kd30d9@syntax-dispatch kd38d4@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if kd38d6@ls/false (apply (lambda (kd38d8@p kd38d9@q) (if (= kd38c3@lev '0) (kd38b3@quasiappend kd38d8@p (kd38b9@quasi kd38d9@q kd38c3@lev)) (kd38b1@quasicons (kd38b1@quasicons (kd3893@datum 'unquote-splicing) (kd38b9@quasi kd38d8@p (- kd38c3@lev '1))) (kd38b9@quasi kd38d9@q kd38c3@lev)))) kd38d6@ls/false) (let ((kd38dc@t kd38d4@t)) (let ((kd38de@ls/false (kd30d9@syntax-dispatch kd38dc@t '(#(scheme-id quasiquote) any)))) (if kd38de@ls/false (apply (lambda (kd38e0@p) (kd38b1@quasicons (kd3893@datum 'quasiquote) (kd38b9@quasi (list kd38e0@p) (+ kd38c3@lev '1)))) kd38de@ls/false) (let ((kd38e2@t kd38dc@t)) (let ((kd38e4@ls/false (kd30d9@syntax-dispatch kd38e2@t '(any . any)))) (if kd38e4@ls/false (apply (lambda (kd38e6@p kd38e7@q) (kd38b1@quasicons (kd38b9@quasi kd38e6@p kd38c3@lev) (kd38b9@quasi kd38e7@q kd38c3@lev))) kd38e4@ls/false) (let ((kd38ea@t kd38e2@t)) (let ((kd38ec@ls/false (kd30d9@syntax-dispatch kd38ea@t '#(vector each-any)))) (if (and kd38ec@ls/false (apply (lambda (kd38ee@x) (not (kd2e9e@stx? kd38ee@x))) kd38ec@ls/false)) (apply (lambda (kd38f0@x) (kd38b5@quasivector (kd38b7@vquasi kd38f0@x kd38c3@lev))) kd38ec@ls/false) (let ((kd38f2@t kd38ea@t)) (let ((kd38f4@ls/false (kd30d9@syntax-dispatch kd38f2@t 'any))) (if kd38f4@ls/false (apply (lambda (kd38f6@p) (list (kd3061@scheme-stx 'quote) kd38f6@p)) kd38f4@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd38f2@t)))))))))))))))))))))))) (lambda (kd38ba@x) (let ((kd38bc@t kd38ba@x)) (let ((kd38be@ls/false (kd30d9@syntax-dispatch kd38bc@t '(_ any)))) (if kd38be@ls/false (apply (lambda (kd38c0@e) (kd38b9@quasi kd38c0@e '0)) kd38be@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd38bc@t)))))))) (set! kd4ba6@kd30c7@quasiquote-macro kd30c7@quasiquote-macro) (set! kd30c9@quasisyntax-macro (let ((kd3997@quasi '#f)) (begin (set! kd3997@quasi (lambda (kd39b2@p kd39b3@lev) (let ((kd39b6@t kd39b2@p)) (let ((kd39b8@ls/false (kd30d9@syntax-dispatch kd39b6@t '(#(scheme-id unsyntax) any)))) (if kd39b8@ls/false (apply (lambda (kd39ba@p) (if (= kd39b3@lev '0) (let ((kd39bc@g (gensym))) (values (list kd39bc@g) (list kd39ba@p) kd39bc@g)) (call-with-values (lambda () (kd3997@quasi kd39ba@p (- kd39b3@lev '1))) (lambda (kd39c4@kd39bf kd39c5@kd39c1 kd39c6@kd39c3) (let ((kd39ca@p kd39c6@kd39c3) (kd39cb@rhs* kd39c5@kd39c1) (kd39cc@lhs* kd39c4@kd39bf)) (values kd39cc@lhs* kd39cb@rhs* (list 'unsyntax kd39ca@p))))))) kd39b8@ls/false) (let ((kd39d0@t kd39b6@t)) (let ((kd39d2@ls/false (kd30d9@syntax-dispatch kd39d0@t '#(scheme-id unsyntax)))) (if (and kd39d2@ls/false (apply (lambda () (= kd39b3@lev '0)) kd39d2@ls/false)) (apply (lambda () (kd31b9@syntax-violation '#f '"incorrect use of unsyntax" kd39b2@p)) kd39d2@ls/false) (let ((kd39d4@t kd39d0@t)) (let ((kd39d6@ls/false (kd30d9@syntax-dispatch kd39d4@t '((#(scheme-id unsyntax) . each-any) . any)))) (if kd39d6@ls/false (apply (lambda (kd39d8@p* kd39d9@q) (call-with-values (lambda () (kd3997@quasi kd39d9@q kd39b3@lev)) (lambda (kd39e2@kd39dd kd39e3@kd39df kd39e4@kd39e1) (let ((kd39e8@q kd39e4@kd39e1) (kd39e9@rhs* kd39e3@kd39df) (kd39ea@lhs* kd39e2@kd39dd)) (if (= kd39b3@lev '0) (let ((kd39ee@g* (map (lambda (kd39f0@x) (gensym)) kd39d8@p*))) (values (append kd39ee@g* kd39ea@lhs*) (append kd39d8@p* kd39e9@rhs*) (append kd39ee@g* kd39e8@q))) (call-with-values (lambda () (kd3997@quasi kd39d8@p* (- kd39b3@lev '1))) (lambda (kd39f8@kd39f3 kd39f9@kd39f5 kd39fa@kd39f7) (let ((kd39fe@p* kd39fa@kd39f7) (kd39ff@rhs2* kd39f9@kd39f5) (kd3a00@lhs2* kd39f8@kd39f3)) (values (append kd3a00@lhs2* kd39ea@lhs*) (append kd39ff@rhs2* kd39e9@rhs*) (cons (cons 'unsyntax kd39fe@p*) kd39e8@q)))))))))) kd39d6@ls/false) (let ((kd3a04@t kd39d4@t)) (let ((kd3a06@ls/false (kd30d9@syntax-dispatch kd3a04@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if kd3a06@ls/false (apply (lambda (kd3a08@p* kd3a09@q) (call-with-values (lambda () (kd3997@quasi kd3a09@q kd39b3@lev)) (lambda (kd3a12@kd3a0d kd3a13@kd3a0f kd3a14@kd3a11) (let ((kd3a18@q kd3a14@kd3a11) (kd3a19@rhs* kd3a13@kd3a0f) (kd3a1a@lhs* kd3a12@kd3a0d)) (if (= kd39b3@lev '0) (let ((kd3a1e@g* (map (lambda (kd3a20@x) (gensym)) kd3a08@p*))) (values (append (map (lambda (kd3a22@g) (cons kd3a22@g '(...))) kd3a1e@g*) kd3a1a@lhs*) (append kd3a08@p* kd3a19@rhs*) (append (apply append (map (lambda (kd3a24@g) (cons kd3a24@g '(...))) kd3a1e@g*)) kd3a18@q))) (call-with-values (lambda () (kd3997@quasi kd3a08@p* (- kd39b3@lev '1))) (lambda (kd3a2c@kd3a27 kd3a2d@kd3a29 kd3a2e@kd3a2b) (let ((kd3a32@p* kd3a2e@kd3a2b) (kd3a33@rhs2* kd3a2d@kd3a29) (kd3a34@lhs2* kd3a2c@kd3a27)) (values (append kd3a34@lhs2* kd3a1a@lhs*) (append kd3a33@rhs2* kd3a19@rhs*) (cons (cons 'unsyntax-splicing kd3a32@p*) kd3a18@q)))))))))) kd3a06@ls/false) (let ((kd3a38@t kd3a04@t)) (let ((kd3a3a@ls/false (kd30d9@syntax-dispatch kd3a38@t '#(scheme-id unsyntax-splicing)))) (if (and kd3a3a@ls/false (apply (lambda () (= kd39b3@lev '0)) kd3a3a@ls/false)) (apply (lambda () (kd31b9@syntax-violation '#f '"incorrect use of unsyntax-splicing" kd39b2@p)) kd3a3a@ls/false) (let ((kd3a3c@t kd3a38@t)) (let ((kd3a3e@ls/false (kd30d9@syntax-dispatch kd3a3c@t '(#(scheme-id quasisyntax) any)))) (if kd3a3e@ls/false (apply (lambda (kd3a40@p) (call-with-values (lambda () (kd3997@quasi kd3a40@p (+ kd39b3@lev '1))) (lambda (kd3a48@kd3a43 kd3a49@kd3a45 kd3a4a@kd3a47) (let ((kd3a4e@p kd3a4a@kd3a47) (kd3a4f@rhs* kd3a49@kd3a45) (kd3a50@lhs* kd3a48@kd3a43)) (values kd3a50@lhs* kd3a4f@rhs* (list 'quasisyntax kd3a4e@p)))))) kd3a3e@ls/false) (let ((kd3a54@t kd3a3c@t)) (let ((kd3a56@ls/false (kd30d9@syntax-dispatch kd3a54@t '(any . any)))) (if kd3a56@ls/false (apply (lambda (kd3a58@p kd3a59@q) (call-with-values (lambda () (kd3997@quasi kd3a58@p kd39b3@lev)) (lambda (kd3a68@kd3a5d kd3a69@kd3a5f kd3a6a@kd3a61) (call-with-values (lambda () (kd3997@quasi kd3a59@q kd39b3@lev)) (lambda (kd3a6e@kd3a63 kd3a6f@kd3a65 kd3a70@kd3a67) (let ((kd3a74@q kd3a70@kd3a67) (kd3a75@rhs2* kd3a6f@kd3a65) (kd3a76@lhs2* kd3a6e@kd3a63) (kd3a77@p kd3a6a@kd3a61) (kd3a78@rhs* kd3a69@kd3a5f) (kd3a79@lhs* kd3a68@kd3a5d)) (values (append kd3a76@lhs2* kd3a79@lhs*) (append kd3a75@rhs2* kd3a78@rhs*) (cons kd3a77@p kd3a74@q)))))))) kd3a56@ls/false) (let ((kd3a80@t kd3a54@t)) (let ((kd3a82@ls/false (kd30d9@syntax-dispatch kd3a80@t '#(vector each-any)))) (if kd3a82@ls/false (apply (lambda (kd3a84@x*) (call-with-values (lambda () (kd3997@quasi kd3a84@x* kd39b3@lev)) (lambda (kd3a8c@kd3a87 kd3a8d@kd3a89 kd3a8e@kd3a8b) (let ((kd3a92@x* kd3a8e@kd3a8b) (kd3a93@rhs* kd3a8d@kd3a89) (kd3a94@lhs* kd3a8c@kd3a87)) (values kd3a94@lhs* kd3a93@rhs* (list->vector kd3a92@x*)))))) kd3a82@ls/false) (let ((kd3a98@t kd3a80@t)) (let ((kd3a9a@ls/false (kd30d9@syntax-dispatch kd3a98@t '_))) (if kd3a9a@ls/false (apply (lambda () (values '() '() kd39b2@p)) kd3a9a@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3a98@t)))))))))))))))))))))))))))))) (lambda (kd3998@x) (let ((kd399a@t kd3998@x)) (let ((kd399c@ls/false (kd30d9@syntax-dispatch kd399a@t '(_ any)))) (if kd399c@ls/false (apply (lambda (kd399e@e) (call-with-values (lambda () (kd3997@quasi kd399e@e '0)) (lambda (kd39a6@kd39a1 kd39a7@kd39a3 kd39a8@kd39a5) (let ((kd39ac@v kd39a8@kd39a5) (kd39ad@rhs* kd39a7@kd39a3) (kd39ae@lhs* kd39a6@kd39a1)) (kd308f@bless (list 'syntax-case (cons 'list kd39ad@rhs*) '() (list kd39ae@lhs* (list 'syntax kd39ac@v)))))))) kd399c@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd399a@t)))))))) (set! kd4ba7@kd30c9@quasisyntax-macro kd30c9@quasisyntax-macro) (set! kd30cb@define-struct-macro (lambda (kd3a9c@stx) (kd31b9@syntax-violation '#f '"define-struct not supported" kd3a9c@stx))) (set! kd4ba8@kd30cb@define-struct-macro kd30cb@define-struct-macro) (set! kd30cd@define-record-type-macro (lambda (kd3a9e@x) (let ((kd3aa1@id '#f) (kd3aa3@get-record-name '#f) (kd3aa5@get-record-constructor-name '#f) (kd3aa7@get-record-predicate-name '#f) (kd3aa9@get-clause '#f) (kd3aab@foo-rtd-code '#f) (kd3aad@parent-rtd-code '#f) (kd3aaf@parent-rcd-code '#f) (kd3ab1@foo-rcd-code '#f) (kd3ab3@get-protocol-code '#f) (kd3ab5@get-fields '#f) (kd3ab7@get-mutator-indices '#f) (kd3ab9@get-mutators '#f) (kd3abb@get-accessors '#f) (kd3abd@enumerate '#f) (kd3abf@do-define-record '#f) (kd3ac1@verify-clauses '#f)) (begin (set! kd3aa1@id (lambda (kd3c94@ctxt . kd3c96@str*) (kd31bd@datum->syntax kd3c94@ctxt (string->symbol (apply string-append (map (lambda (kd3c98@x) (if (symbol? kd3c98@x) (symbol->string kd3c98@x) (if (string? kd3c98@x) kd3c98@x (assertion-violation 'define-record-type '"BUG")))) kd3c96@str*)))))) (set! kd3aa3@get-record-name (lambda (kd3c82@spec) (let ((kd3c84@t kd3c82@spec)) (let ((kd3c86@ls/false (kd30d9@syntax-dispatch kd3c84@t '(any any any)))) (if kd3c86@ls/false (apply (lambda (kd3c88@foo kd3c89@make-foo kd3c8a@foo?) kd3c88@foo) kd3c86@ls/false) (let ((kd3c8e@t kd3c84@t)) (let ((kd3c90@ls/false (kd30d9@syntax-dispatch kd3c8e@t 'any))) (if kd3c90@ls/false (apply (lambda (kd3c92@foo) kd3c92@foo) kd3c90@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3c8e@t))))))))) (set! kd3aa5@get-record-constructor-name (lambda (kd3c6e@spec) (let ((kd3c70@t kd3c6e@spec)) (let ((kd3c72@ls/false (kd30d9@syntax-dispatch kd3c70@t '(any any any)))) (if kd3c72@ls/false (apply (lambda (kd3c74@foo kd3c75@make-foo kd3c76@foo?) kd3c75@make-foo) kd3c72@ls/false) (let ((kd3c7a@t kd3c70@t)) (let ((kd3c7c@ls/false (kd30d9@syntax-dispatch kd3c7a@t 'any))) (if (and kd3c7c@ls/false (apply (lambda (kd3c7e@foo) (kd2ed2@id? kd3c7e@foo)) kd3c7c@ls/false)) (apply (lambda (kd3c80@foo) (kd3aa1@id kd3c80@foo '"make-" (kd2ee6@stx->datum kd3c80@foo))) kd3c7c@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3c7a@t))))))))) (set! kd3aa7@get-record-predicate-name (lambda (kd3c5a@spec) (let ((kd3c5c@t kd3c5a@spec)) (let ((kd3c5e@ls/false (kd30d9@syntax-dispatch kd3c5c@t '(any any any)))) (if kd3c5e@ls/false (apply (lambda (kd3c60@foo kd3c61@make-foo kd3c62@foo?) kd3c62@foo?) kd3c5e@ls/false) (let ((kd3c66@t kd3c5c@t)) (let ((kd3c68@ls/false (kd30d9@syntax-dispatch kd3c66@t 'any))) (if (and kd3c68@ls/false (apply (lambda (kd3c6a@foo) (kd2ed2@id? kd3c6a@foo)) kd3c68@ls/false)) (apply (lambda (kd3c6c@foo) (kd3aa1@id kd3c6c@foo (kd2ee6@stx->datum kd3c6c@foo) '"?")) kd3c68@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3c66@t))))))))) (set! kd3aa9@get-clause (lambda (kd3c48@id kd3c49@ls) (let ((kd3c4c@t kd3c49@ls)) (let ((kd3c4e@ls/false (kd30d9@syntax-dispatch kd3c4c@t '()))) (if kd3c4e@ls/false (apply (lambda () '#f) kd3c4e@ls/false) (let ((kd3c50@t kd3c4c@t)) (let ((kd3c52@ls/false (kd30d9@syntax-dispatch kd3c50@t '((any . any) . any)))) (if kd3c52@ls/false (apply (lambda (kd3c54@x kd3c55@rest kd3c56@ls) (if (kd2ed8@free-id=? (kd308f@bless kd3c48@id) kd3c54@x) (cons kd3c54@x kd3c55@rest) (kd3aa9@get-clause kd3c48@id kd3c56@ls))) kd3c52@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3c50@t))))))))) (set! kd3aab@foo-rtd-code (lambda (kd3bf6@name kd3bf7@clause* kd3bf8@parent-rtd-code) (let ((kd3bfd@convert-field-spec* '#f)) (begin (set! kd3bfd@convert-field-spec* (lambda (kd3c2e@ls) (list->vector (map (lambda (kd3c30@x) (let ((kd3c32@t kd3c30@x)) (let ((kd3c34@ls/false (kd30d9@syntax-dispatch kd3c32@t '(#(scheme-id mutable) any . any)))) (if kd3c34@ls/false (apply (lambda (kd3c36@name kd3c37@rest) (list 'mutable kd3c36@name)) kd3c34@ls/false) (let ((kd3c3a@t kd3c32@t)) (let ((kd3c3c@ls/false (kd30d9@syntax-dispatch kd3c3a@t '(#(scheme-id immutable) any . any)))) (if kd3c3c@ls/false (apply (lambda (kd3c3e@name kd3c3f@rest) (list 'immutable kd3c3e@name)) kd3c3c@ls/false) (let ((kd3c42@t kd3c3a@t)) (let ((kd3c44@ls/false (kd30d9@syntax-dispatch kd3c42@t 'any))) (if kd3c44@ls/false (apply (lambda (kd3c46@name) (list 'immutable kd3c46@name)) kd3c44@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3c42@t))))))))))) kd3c2e@ls)))) (let ((kd3bfe@uid-code (let ((kd3c06@t (kd3aa9@get-clause 'nongenerative kd3bf7@clause*))) (let ((kd3c08@ls/false (kd30d9@syntax-dispatch kd3c06@t '(_)))) (if kd3c08@ls/false (apply (lambda () (list 'quote (gensym))) kd3c08@ls/false) (let ((kd3c0a@t kd3c06@t)) (let ((kd3c0c@ls/false (kd30d9@syntax-dispatch kd3c0a@t '(_ any)))) (if kd3c0c@ls/false (apply (lambda (kd3c0e@uid) (list 'quote kd3c0e@uid)) kd3c0c@ls/false) (let ((kd3c10@t kd3c0a@t)) (let ((kd3c12@ls/false (kd30d9@syntax-dispatch kd3c10@t '_))) (if kd3c12@ls/false (apply (lambda () '#f) kd3c12@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3c10@t))))))))))) (kd3bff@sealed? (let ((kd3c14@t (kd3aa9@get-clause 'sealed kd3bf7@clause*))) (let ((kd3c16@ls/false (kd30d9@syntax-dispatch kd3c14@t '(_ #(atom #t))))) (if kd3c16@ls/false (apply (lambda () '#t) kd3c16@ls/false) (let ((kd3c18@t kd3c14@t)) (let ((kd3c1a@ls/false (kd30d9@syntax-dispatch kd3c18@t '_))) (if kd3c1a@ls/false (apply (lambda () '#f) kd3c1a@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3c18@t)))))))) (kd3c00@opaque? (let ((kd3c1c@t (kd3aa9@get-clause 'opaque kd3bf7@clause*))) (let ((kd3c1e@ls/false (kd30d9@syntax-dispatch kd3c1c@t '(_ #(atom #t))))) (if kd3c1e@ls/false (apply (lambda () '#t) kd3c1e@ls/false) (let ((kd3c20@t kd3c1c@t)) (let ((kd3c22@ls/false (kd30d9@syntax-dispatch kd3c20@t '_))) (if kd3c22@ls/false (apply (lambda () '#f) kd3c22@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3c20@t)))))))) (kd3c01@fields (let ((kd3c24@t (kd3aa9@get-clause 'fields kd3bf7@clause*))) (let ((kd3c26@ls/false (kd30d9@syntax-dispatch kd3c24@t '(_ . each-any)))) (if kd3c26@ls/false (apply (lambda (kd3c28@field-spec*) (list 'quote (kd3bfd@convert-field-spec* kd3c28@field-spec*))) kd3c26@ls/false) (let ((kd3c2a@t kd3c24@t)) (let ((kd3c2c@ls/false (kd30d9@syntax-dispatch kd3c2a@t '_))) (if kd3c2c@ls/false (apply (lambda () ''#()) kd3c2c@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3c2a@t))))))))) (kd308f@bless (list 'make-record-type-descriptor (list 'quote kd3bf6@name) kd3bf8@parent-rtd-code kd3bfe@uid-code kd3bff@sealed? kd3c00@opaque? kd3c01@fields))))))) (set! kd3aad@parent-rtd-code (lambda (kd3bde@clause*) (let ((kd3be0@t (kd3aa9@get-clause 'parent kd3bde@clause*))) (let ((kd3be2@ls/false (kd30d9@syntax-dispatch kd3be0@t '(_ any)))) (if kd3be2@ls/false (apply (lambda (kd3be4@name) (list 'record-type-descriptor kd3be4@name)) kd3be2@ls/false) (let ((kd3be6@t kd3be0@t)) (let ((kd3be8@ls/false (kd30d9@syntax-dispatch kd3be6@t '#(atom #f)))) (if kd3be8@ls/false (apply (lambda () (let ((kd3bea@t (kd3aa9@get-clause 'parent-rtd kd3bde@clause*))) (let ((kd3bec@ls/false (kd30d9@syntax-dispatch kd3bea@t '(_ any any)))) (if kd3bec@ls/false (apply (lambda (kd3bee@rtd kd3bef@rcd) kd3bee@rtd) kd3bec@ls/false) (let ((kd3bf2@t kd3bea@t)) (let ((kd3bf4@ls/false (kd30d9@syntax-dispatch kd3bf2@t '#(atom #f)))) (if kd3bf4@ls/false (apply (lambda () '#f) kd3bf4@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3bf2@t)))))))) kd3be8@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3be6@t))))))))) (set! kd3aaf@parent-rcd-code (lambda (kd3bc6@clause*) (let ((kd3bc8@t (kd3aa9@get-clause 'parent kd3bc6@clause*))) (let ((kd3bca@ls/false (kd30d9@syntax-dispatch kd3bc8@t '(_ any)))) (if kd3bca@ls/false (apply (lambda (kd3bcc@name) (list 'record-constructor-descriptor kd3bcc@name)) kd3bca@ls/false) (let ((kd3bce@t kd3bc8@t)) (let ((kd3bd0@ls/false (kd30d9@syntax-dispatch kd3bce@t '#(atom #f)))) (if kd3bd0@ls/false (apply (lambda () (let ((kd3bd2@t (kd3aa9@get-clause 'parent-rtd kd3bc6@clause*))) (let ((kd3bd4@ls/false (kd30d9@syntax-dispatch kd3bd2@t '(_ any any)))) (if kd3bd4@ls/false (apply (lambda (kd3bd6@rtd kd3bd7@rcd) kd3bd7@rcd) kd3bd4@ls/false) (let ((kd3bda@t kd3bd2@t)) (let ((kd3bdc@ls/false (kd30d9@syntax-dispatch kd3bda@t '#(atom #f)))) (if kd3bdc@ls/false (apply (lambda () '#f) kd3bdc@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3bda@t)))))))) kd3bd0@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3bce@t))))))))) (set! kd3ab1@foo-rcd-code (lambda (kd3bbe@clause* kd3bbf@foo-rtd kd3bc0@protocol kd3bc1@parent-rcd-code) (list 'make-record-constructor-descriptor kd3bbf@foo-rtd kd3bc1@parent-rcd-code kd3bc0@protocol))) (set! kd3ab3@get-protocol-code (lambda (kd3bb2@clause*) (let ((kd3bb4@t (kd3aa9@get-clause 'protocol kd3bb2@clause*))) (let ((kd3bb6@ls/false (kd30d9@syntax-dispatch kd3bb4@t '(_ any)))) (if kd3bb6@ls/false (apply (lambda (kd3bb8@expr) kd3bb8@expr) kd3bb6@ls/false) (let ((kd3bba@t kd3bb4@t)) (let ((kd3bbc@ls/false (kd30d9@syntax-dispatch kd3bba@t '_))) (if kd3bbc@ls/false (apply (lambda () '#f) kd3bbc@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3bba@t))))))))) (set! kd3ab5@get-fields (lambda (kd3ba0@clause*) (let ((kd3ba2@t kd3ba0@clause*)) (let ((kd3ba4@ls/false (kd30d9@syntax-dispatch kd3ba2@t '()))) (if kd3ba4@ls/false (apply (lambda () '()) kd3ba4@ls/false) (let ((kd3ba6@t kd3ba2@t)) (let ((kd3ba8@ls/false (kd30d9@syntax-dispatch kd3ba6@t '((#(scheme-id fields) . each-any) . _)))) (if kd3ba8@ls/false (apply (lambda (kd3baa@f*) kd3baa@f*) kd3ba8@ls/false) (let ((kd3bac@t kd3ba6@t)) (let ((kd3bae@ls/false (kd30d9@syntax-dispatch kd3bac@t '(_ . any)))) (if kd3bae@ls/false (apply (lambda (kd3bb0@rest) (kd3ab5@get-fields kd3bb0@rest)) kd3bae@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3bac@t)))))))))))) (set! kd3ab7@get-mutator-indices (lambda (kd3b88@fields) (let kd3b8e@f ((kd3b8a@fields kd3b88@fields) (kd3b8b@i '0)) (let ((kd3b90@t kd3b8a@fields)) (let ((kd3b92@ls/false (kd30d9@syntax-dispatch kd3b90@t '()))) (if kd3b92@ls/false (apply (lambda () '()) kd3b92@ls/false) (let ((kd3b94@t kd3b90@t)) (let ((kd3b96@ls/false (kd30d9@syntax-dispatch kd3b94@t '((#(scheme-id mutable) . _) . any)))) (if kd3b96@ls/false (apply (lambda (kd3b98@rest) (cons kd3b8b@i (kd3b8e@f kd3b98@rest (+ kd3b8b@i '1)))) kd3b96@ls/false) (let ((kd3b9a@t kd3b94@t)) (let ((kd3b9c@ls/false (kd30d9@syntax-dispatch kd3b9a@t '(_ . any)))) (if kd3b9c@ls/false (apply (lambda (kd3b9e@rest) (kd3b8e@f kd3b9e@rest (+ kd3b8b@i '1))) kd3b9c@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3b9a@t))))))))))))) (set! kd3ab9@get-mutators (lambda (kd3b5e@foo kd3b5f@fields) (let ((kd3b63@gen-name '#f)) (begin (set! kd3b63@gen-name (lambda (kd3b86@x) (kd31bd@datum->syntax kd3b5e@foo (string->symbol (string-append (symbol->string (kd31bf@syntax->datum kd3b5e@foo)) '"-" (symbol->string (kd31bf@syntax->datum kd3b86@x)) '"-set!"))))) (let kd3b66@f ((kd3b64@fields kd3b5f@fields)) (let ((kd3b68@t kd3b64@fields)) (let ((kd3b6a@ls/false (kd30d9@syntax-dispatch kd3b68@t '()))) (if kd3b6a@ls/false (apply (lambda () '()) kd3b6a@ls/false) (let ((kd3b6c@t kd3b68@t)) (let ((kd3b6e@ls/false (kd30d9@syntax-dispatch kd3b6c@t '((#(scheme-id mutable) any any any) . any)))) (if kd3b6e@ls/false (apply (lambda (kd3b70@name kd3b71@accessor kd3b72@mutator kd3b73@rest) (cons kd3b72@mutator (kd3b66@f kd3b73@rest))) kd3b6e@ls/false) (let ((kd3b78@t kd3b6c@t)) (let ((kd3b7a@ls/false (kd30d9@syntax-dispatch kd3b78@t '((#(scheme-id mutable) any) . any)))) (if kd3b7a@ls/false (apply (lambda (kd3b7c@name kd3b7d@rest) (cons (kd3b63@gen-name kd3b7c@name) (kd3b66@f kd3b7d@rest))) kd3b7a@ls/false) (let ((kd3b80@t kd3b78@t)) (let ((kd3b82@ls/false (kd30d9@syntax-dispatch kd3b80@t '(_ . any)))) (if kd3b82@ls/false (apply (lambda (kd3b84@rest) (kd3b66@f kd3b84@rest)) kd3b82@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3b80@t)))))))))))))))))) (set! kd3abb@get-accessors (lambda (kd3b1a@foo kd3b1b@fields) (let ((kd3b1f@gen-name '#f)) (begin (set! kd3b1f@gen-name (lambda (kd3b5c@x) (kd31bd@datum->syntax kd3b1a@foo (string->symbol (string-append (symbol->string (kd31bf@syntax->datum kd3b1a@foo)) '"-" (symbol->string (kd31bf@syntax->datum kd3b5c@x))))))) (map (lambda (kd3b20@field) (let ((kd3b22@t kd3b20@field)) (let ((kd3b24@ls/false (kd30d9@syntax-dispatch kd3b22@t '(#(scheme-id mutable) any any any)))) (if (and kd3b24@ls/false (apply (lambda (kd3b26@name kd3b27@accessor kd3b28@mutator) (kd2ed2@id? kd3b27@accessor)) kd3b24@ls/false)) (apply (lambda (kd3b2c@name kd3b2d@accessor kd3b2e@mutator) kd3b2d@accessor) kd3b24@ls/false) (let ((kd3b32@t kd3b22@t)) (let ((kd3b34@ls/false (kd30d9@syntax-dispatch kd3b32@t '(#(scheme-id immutable) any any)))) (if (and kd3b34@ls/false (apply (lambda (kd3b36@name kd3b37@accessor) (kd2ed2@id? kd3b37@accessor)) kd3b34@ls/false)) (apply (lambda (kd3b3a@name kd3b3b@accessor) kd3b3b@accessor) kd3b34@ls/false) (let ((kd3b3e@t kd3b32@t)) (let ((kd3b40@ls/false (kd30d9@syntax-dispatch kd3b3e@t '(#(scheme-id mutable) any)))) (if (and kd3b40@ls/false (apply (lambda (kd3b42@name) (kd2ed2@id? kd3b42@name)) kd3b40@ls/false)) (apply (lambda (kd3b44@name) (kd3b1f@gen-name kd3b44@name)) kd3b40@ls/false) (let ((kd3b46@t kd3b3e@t)) (let ((kd3b48@ls/false (kd30d9@syntax-dispatch kd3b46@t '(#(scheme-id immutable) any)))) (if (and kd3b48@ls/false (apply (lambda (kd3b4a@name) (kd2ed2@id? kd3b4a@name)) kd3b48@ls/false)) (apply (lambda (kd3b4c@name) (kd3b1f@gen-name kd3b4c@name)) kd3b48@ls/false) (let ((kd3b4e@t kd3b46@t)) (let ((kd3b50@ls/false (kd30d9@syntax-dispatch kd3b4e@t 'any))) (if (and kd3b50@ls/false (apply (lambda (kd3b52@name) (kd2ed2@id? kd3b52@name)) kd3b50@ls/false)) (apply (lambda (kd3b54@name) (kd3b1f@gen-name kd3b54@name)) kd3b50@ls/false) (let ((kd3b56@t kd3b4e@t)) (let ((kd3b58@ls/false (kd30d9@syntax-dispatch kd3b56@t 'any))) (if kd3b58@ls/false (apply (lambda (kd3b5a@others) (kd31b9@syntax-violation '#f '"invalid field spec" kd3b20@field)) kd3b58@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3b56@t)))))))))))))))))))) kd3b1b@fields))))) (set! kd3abd@enumerate (lambda (kd3b12@ls) (let kd3b18@f ((kd3b14@ls kd3b12@ls) (kd3b15@i '0)) (if (null? kd3b14@ls) '() (cons kd3b15@i (kd3b18@f (cdr kd3b14@ls) (+ kd3b15@i '1))))))) (set! kd3abf@do-define-record (lambda (kd3aea@namespec kd3aeb@clause*) (let ((kd3aee@foo (kd3aa3@get-record-name kd3aea@namespec))) (let ((kd3af0@foo-rtd (gensym))) (let ((kd3af2@foo-rcd (gensym))) (let ((kd3af4@protocol (gensym))) (let ((kd3af6@make-foo (kd3aa5@get-record-constructor-name kd3aea@namespec))) (let ((kd3af8@fields (kd3ab5@get-fields kd3aeb@clause*))) (let ((kd3afa@idx* (kd3abd@enumerate kd3af8@fields))) (let ((kd3afc@foo-x* (kd3abb@get-accessors kd3aee@foo kd3af8@fields))) (let ((kd3afe@set-foo-x!* (kd3ab9@get-mutators kd3aee@foo kd3af8@fields))) (let ((kd3b00@set-foo-idx* (kd3ab7@get-mutator-indices kd3af8@fields))) (let ((kd3b02@foo? (kd3aa7@get-record-predicate-name kd3aea@namespec))) (let ((kd3b04@foo-rtd-code (kd3aab@foo-rtd-code kd3aee@foo kd3aeb@clause* (kd3aad@parent-rtd-code kd3aeb@clause*)))) (let ((kd3b06@foo-rcd-code (kd3ab1@foo-rcd-code kd3aeb@clause* kd3af0@foo-rtd kd3af4@protocol (kd3aaf@parent-rcd-code kd3aeb@clause*)))) (let ((kd3b08@protocol-code (kd3ab3@get-protocol-code kd3aeb@clause*))) (kd308f@bless (cons 'begin (cons (list 'define kd3af0@foo-rtd kd3b04@foo-rtd-code) (cons (list 'define kd3af4@protocol kd3b08@protocol-code) (cons (list 'define kd3af2@foo-rcd kd3b06@foo-rcd-code) (cons (list 'define-syntax kd3aee@foo (list 'list ''$rtd (list 'syntax kd3af0@foo-rtd) (list 'syntax kd3af2@foo-rcd))) (cons (list 'define kd3b02@foo? (list 'record-predicate kd3af0@foo-rtd)) (cons (list 'define kd3af6@make-foo (list 'record-constructor kd3af2@foo-rcd)) (append (map (lambda (kd3b0a@foo-x kd3b0b@idx) (list 'define kd3b0a@foo-x (list 'record-accessor kd3af0@foo-rtd kd3b0b@idx))) kd3afc@foo-x* kd3afa@idx*) (map (lambda (kd3b0e@set-foo-x! kd3b0f@idx) (list 'define kd3b0e@set-foo-x! (list 'record-mutator kd3af0@foo-rtd kd3b0f@idx))) kd3afe@set-foo-x!* kd3b00@set-foo-idx*)))))))))))))))))))))))))) (set! kd3ac1@verify-clauses (lambda (kd3aca@x kd3acb@cls*) (let ((kd3acf@valid-kwds '#f) (kd3ad1@free-id-member? '#f)) (begin (set! kd3acf@valid-kwds (map kd308f@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! kd3ad1@free-id-member? (lambda (kd3ae6@x kd3ae7@ls) (and (pair? kd3ae7@ls) (or (kd2ed8@free-id=? kd3ae6@x (car kd3ae7@ls)) (kd3ad1@free-id-member? kd3ae6@x (cdr kd3ae7@ls)))))) (let kd3ad6@f ((kd3ad2@cls* kd3acb@cls*) (kd3ad3@seen* '())) (if (not (null? kd3ad2@cls*)) (let ((kd3ad8@t (car kd3ad2@cls*))) (let ((kd3ada@ls/false (kd30d9@syntax-dispatch kd3ad8@t '(any . any)))) (if kd3ada@ls/false (apply (lambda (kd3adc@kwd kd3add@rest) (if (or (not (kd2ed2@id? kd3adc@kwd)) (not (kd3ad1@free-id-member? kd3adc@kwd kd3acf@valid-kwds))) (kd31b9@syntax-violation '#f '"not a valid define-record-type keyword" kd3adc@kwd) (if (kd2ede@bound-id-member? kd3adc@kwd kd3ad3@seen*) (kd31b9@syntax-violation '#f '"duplicate use of keyword " kd3aca@x kd3adc@kwd) (kd3ad6@f (cdr kd3ad2@cls*) (cons kd3adc@kwd kd3ad3@seen*))))) kd3ada@ls/false) (let ((kd3ae0@t kd3ad8@t)) (let ((kd3ae2@ls/false (kd30d9@syntax-dispatch kd3ae0@t 'any))) (if kd3ae2@ls/false (apply (lambda (kd3ae4@cls) (kd31b9@syntax-violation '#f '"malformed define-record-type clause" kd3ae4@cls)) kd3ae2@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3ae0@t))))))) (void))))))) (let ((kd3ac2@t kd3a9e@x)) (let ((kd3ac4@ls/false (kd30d9@syntax-dispatch kd3ac2@t '(_ any . each-any)))) (if kd3ac4@ls/false (apply (lambda (kd3ac6@namespec kd3ac7@clause*) (begin (kd3ac1@verify-clauses kd3a9e@x kd3ac7@clause*) (kd3abf@do-define-record kd3ac6@namespec kd3ac7@clause*))) kd3ac4@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3ac2@t)))))))) (set! kd4ba9@kd30cd@define-record-type-macro kd30cd@define-record-type-macro) (set! kd30cf@define-condition-type-macro (lambda (kd3c9a@x) (let ((kd3c9d@mkname '#f)) (begin (set! kd3c9d@mkname (lambda (kd3cca@name kd3ccb@suffix) (kd31bd@datum->syntax kd3cca@name (string->symbol (string-append (symbol->string (kd31bf@syntax->datum kd3cca@name)) kd3ccb@suffix))))) (let ((kd3c9e@t kd3c9a@x)) (let ((kd3ca0@ls/false (kd30d9@syntax-dispatch kd3c9e@t '(any any any any any . #(each (any any)))))) (if (and kd3ca0@ls/false (apply (lambda (kd3ca2@ctxt kd3ca3@name kd3ca4@super kd3ca5@constructor kd3ca6@predicate kd3ca7@field* kd3ca8@accessor*) (and (kd2ed2@id? kd3ca3@name) (kd2ed2@id? kd3ca4@super) (kd2ed2@id? kd3ca5@constructor) (kd2ed2@id? kd3ca6@predicate) (for-all kd2ed2@id? kd3ca7@field*) (for-all kd2ed2@id? kd3ca8@accessor*))) kd3ca0@ls/false)) (apply (lambda (kd3cb0@ctxt kd3cb1@name kd3cb2@super kd3cb3@constructor kd3cb4@predicate kd3cb5@field* kd3cb6@accessor*) (let ((kd3cbe@aux-accessor* (map (lambda (kd3cc0@x) (gensym)) kd3cb6@accessor*))) (kd308f@bless (cons 'begin (cons (cons 'define-record-type (cons (list kd3cb1@name kd3cb3@constructor (gensym)) (cons (list 'parent kd3cb2@super) (cons (cons 'fields (map (lambda (kd3cc2@field kd3cc3@aux) (list 'immutable kd3cc2@field kd3cc3@aux)) kd3cb5@field* kd3cbe@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define kd3cb4@predicate (list 'condition-predicate (list 'record-type-descriptor kd3cb1@name))) (map (lambda (kd3cc6@accessor kd3cc7@aux) (list 'define kd3cc6@accessor (list 'condition-accessor (list 'record-type-descriptor kd3cb1@name) kd3cc7@aux))) kd3cb6@accessor* kd3cbe@aux-accessor*))))))) kd3ca0@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3c9e@t)))))))) (set! kd4baa@kd30cf@define-condition-type-macro kd30cf@define-condition-type-macro) (set! kd30d1@incorrect-usage-macro (lambda (kd3cce@e) (kd31b9@syntax-violation '#f '"incorrect usage of auxiliary keyword" kd3cce@e))) (set! kd4bab@kd30d1@incorrect-usage-macro kd30d1@incorrect-usage-macro) (set! kd30d3@parameterize-macro (lambda (kd3cd0@e) (let ((kd3cd2@t kd3cd0@e)) (let ((kd3cd4@ls/false (kd30d9@syntax-dispatch kd3cd2@t '(_ () any . each-any)))) (if kd3cd4@ls/false (apply (lambda (kd3cd6@b kd3cd7@b*) (kd308f@bless (cons 'let (cons '() (cons kd3cd6@b kd3cd7@b*))))) kd3cd4@ls/false) (let ((kd3cda@t kd3cd2@t)) (let ((kd3cdc@ls/false (kd30d9@syntax-dispatch kd3cda@t '(_ #(each (any any)) any . each-any)))) (if kd3cdc@ls/false (apply (lambda (kd3cde@olhs* kd3cdf@orhs* kd3ce0@b kd3ce1@b*) (let ((kd3ce6@lhs* (kd31a7@generate-temporaries kd3cde@olhs*)) (kd3ce7@rhs* (kd31a7@generate-temporaries kd3cdf@orhs*))) (kd308f@bless (cons (list 'lambda (append kd3ce6@lhs* kd3ce7@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (kd3cea@lhs kd3ceb@rhs) (list 'let (list (list 't (list kd3cea@lhs))) (list kd3cea@lhs kd3ceb@rhs) (cons 'set! (cons kd3ceb@rhs '(t))))) kd3ce6@lhs* kd3ce7@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons kd3ce0@b kd3ce1@b*))) '(swap)))))) (append kd3cde@olhs* kd3cdf@orhs*))))) kd3cdc@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3cda@t))))))))) (set! kd4bac@kd30d3@parameterize-macro kd30d3@parameterize-macro) (set! kd30d5@foreign-call-transformer (lambda (kd3cee@e kd3cef@r kd3cf0@mr) (let ((kd3cf4@t kd3cee@e)) (let ((kd3cf6@ls/false (kd30d9@syntax-dispatch kd3cf4@t '(_ any . each-any)))) (if kd3cf6@ls/false (apply (lambda (kd3cf8@name kd3cf9@arg*) (cons 'foreign-call (cons (kd30fb@chi-expr kd3cf8@name kd3cef@r kd3cf0@mr) (kd30f7@chi-expr* kd3cf9@arg* kd3cef@r kd3cf0@mr)))) kd3cf6@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3cf4@t)))))) (set! kd4bad@kd30d5@foreign-call-transformer kd30d5@foreign-call-transformer) (set! kd30d7@convert-pattern (lambda (kd3cfc@pattern kd3cfd@keys) (let ((kd3d01@cvt* '#f) (kd3d03@cvt '#f)) (begin (set! kd3d01@cvt* (lambda (kd3da0@p* kd3da1@n kd3da2@ids) (if (null? kd3da0@p*) (values '() kd3da2@ids) (call-with-values (lambda () (kd3d01@cvt* (cdr kd3da0@p*) kd3da1@n kd3da2@ids)) (lambda (kd3daa@kd3da7 kd3dab@kd3da9) (let ((kd3dae@ids kd3dab@kd3da9) (kd3daf@y kd3daa@kd3da7)) (call-with-values (lambda () (kd3d03@cvt (car kd3da0@p*) kd3da1@n kd3dae@ids)) (lambda (kd3db6@kd3db3 kd3db7@kd3db5) (let ((kd3dba@ids kd3db7@kd3db5) (kd3dbb@x kd3db6@kd3db3)) (values (cons kd3dbb@x kd3daf@y) kd3dba@ids)))))))))) (set! kd3d03@cvt (lambda (kd3d04@p kd3d05@n kd3d06@ids) (let ((kd3d0a@t kd3d04@p)) (let ((kd3d0c@ls/false (kd30d9@syntax-dispatch kd3d0a@t 'any))) (if (and kd3d0c@ls/false (apply (lambda (kd3d0e@id) (kd2ed2@id? kd3d0e@id)) kd3d0c@ls/false)) (apply (lambda (kd3d10@id) (if (kd2ede@bound-id-member? kd3d04@p kd3cfd@keys) (values (vector 'free-id kd3d04@p) kd3d06@ids) (if (kd2ed8@free-id=? kd3d04@p (kd3061@scheme-stx '_)) (values '_ kd3d06@ids) (values 'any (cons (cons kd3d04@p kd3d05@n) kd3d06@ids))))) kd3d0c@ls/false) (let ((kd3d12@t kd3d0a@t)) (let ((kd3d14@ls/false (kd30d9@syntax-dispatch kd3d12@t '(any any)))) (if (and kd3d14@ls/false (apply (lambda (kd3d16@p kd3d17@dots) (kd30db@ellipsis? kd3d17@dots)) kd3d14@ls/false)) (apply (lambda (kd3d1a@p kd3d1b@dots) (call-with-values (lambda () (kd3d03@cvt kd3d1a@p (+ kd3d05@n '1) kd3d06@ids)) (lambda (kd3d22@kd3d1f kd3d23@kd3d21) (let ((kd3d26@ids kd3d23@kd3d21) (kd3d27@p kd3d22@kd3d1f)) (values (if (eq? kd3d27@p 'any) 'each-any (vector 'each kd3d27@p)) kd3d26@ids))))) kd3d14@ls/false) (let ((kd3d2a@t kd3d12@t)) (let ((kd3d2c@ls/false (kd30d9@syntax-dispatch kd3d2a@t '(any any . #(each+ any () any))))) (if (and kd3d2c@ls/false (apply (lambda (kd3d2e@x kd3d2f@dots kd3d30@ys kd3d31@z) (kd30db@ellipsis? kd3d2f@dots)) kd3d2c@ls/false)) (apply (lambda (kd3d36@x kd3d37@dots kd3d38@ys kd3d39@z) (call-with-values (lambda () (kd3d03@cvt kd3d39@z kd3d05@n kd3d06@ids)) (lambda (kd3d42@kd3d3f kd3d43@kd3d41) (let ((kd3d46@ids kd3d43@kd3d41) (kd3d47@z kd3d42@kd3d3f)) (call-with-values (lambda () (kd3d01@cvt* kd3d38@ys kd3d05@n kd3d46@ids)) (lambda (kd3d4e@kd3d4b kd3d4f@kd3d4d) (let ((kd3d52@ids kd3d4f@kd3d4d) (kd3d53@ys kd3d4e@kd3d4b)) (call-with-values (lambda () (kd3d03@cvt kd3d36@x (+ kd3d05@n '1) kd3d52@ids)) (lambda (kd3d5a@kd3d57 kd3d5b@kd3d59) (let ((kd3d5e@ids kd3d5b@kd3d59) (kd3d5f@x kd3d5a@kd3d57)) (values (vector 'each+ kd3d5f@x (reverse kd3d53@ys) kd3d47@z) kd3d5e@ids))))))))))) kd3d2c@ls/false) (let ((kd3d62@t kd3d2a@t)) (let ((kd3d64@ls/false (kd30d9@syntax-dispatch kd3d62@t '(any . any)))) (if kd3d64@ls/false (apply (lambda (kd3d66@x kd3d67@y) (call-with-values (lambda () (kd3d03@cvt kd3d67@y kd3d05@n kd3d06@ids)) (lambda (kd3d6e@kd3d6b kd3d6f@kd3d6d) (let ((kd3d72@ids kd3d6f@kd3d6d) (kd3d73@y kd3d6e@kd3d6b)) (call-with-values (lambda () (kd3d03@cvt kd3d66@x kd3d05@n kd3d72@ids)) (lambda (kd3d7a@kd3d77 kd3d7b@kd3d79) (let ((kd3d7e@ids kd3d7b@kd3d79) (kd3d7f@x kd3d7a@kd3d77)) (values (cons kd3d7f@x kd3d73@y) kd3d7e@ids)))))))) kd3d64@ls/false) (let ((kd3d82@t kd3d62@t)) (let ((kd3d84@ls/false (kd30d9@syntax-dispatch kd3d82@t '()))) (if kd3d84@ls/false (apply (lambda () (values '() kd3d06@ids)) kd3d84@ls/false) (let ((kd3d86@t kd3d82@t)) (let ((kd3d88@ls/false (kd30d9@syntax-dispatch kd3d86@t '#(vector each-any)))) (if (and kd3d88@ls/false (apply (lambda (kd3d8a@p) (not (kd2e9e@stx? kd3d8a@p))) kd3d88@ls/false)) (apply (lambda (kd3d8c@p) (call-with-values (lambda () (kd3d03@cvt kd3d8c@p kd3d05@n kd3d06@ids)) (lambda (kd3d92@kd3d8f kd3d93@kd3d91) (let ((kd3d96@ids kd3d93@kd3d91) (kd3d97@p kd3d92@kd3d8f)) (values (vector 'vector kd3d97@p) kd3d96@ids))))) kd3d88@ls/false) (let ((kd3d9a@t kd3d86@t)) (let ((kd3d9c@ls/false (kd30d9@syntax-dispatch kd3d9a@t 'any))) (if kd3d9c@ls/false (apply (lambda (kd3d9e@datum) (values (vector 'atom (kd2ee6@stx->datum kd3d9e@datum)) kd3d06@ids)) kd3d9c@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3d9a@t)))))))))))))))))))))))) (kd3d03@cvt kd3cfc@pattern '0 '()))))) (set! kd4bae@kd30d7@convert-pattern kd30d7@convert-pattern) (set! kd30d9@syntax-dispatch (let ((kd3dbf@stx^ '#f) (kd3dc1@match-each '#f) (kd3dc3@match-each+ '#f) (kd3dc5@match-each-any '#f) (kd3dc7@match-empty '#f) (kd3dc9@combine '#f) (kd3dcb@match* '#f) (kd3dcd@match '#f)) (begin (set! kd3dbf@stx^ (lambda (kd3e9a@e kd3e9b@m* kd3e9c@s* kd3e9d@ae*) (if (and (null? kd3e9b@m*) (null? kd3e9c@s*) (null? kd3e9d@ae*)) kd3e9a@e (kd2eba@mkstx kd3e9a@e kd3e9b@m* kd3e9c@s* kd3e9d@ae*)))) (set! kd3dc1@match-each (lambda (kd3e7a@e kd3e7b@p kd3e7c@m* kd3e7d@s* kd3e7e@ae*) (if (pair? kd3e7a@e) (let ((kd3e84@first (kd3dcd@match (car kd3e7a@e) kd3e7b@p kd3e7c@m* kd3e7d@s* kd3e7e@ae* '()))) (and kd3e84@first (let ((kd3e86@rest (kd3dc1@match-each (cdr kd3e7a@e) kd3e7b@p kd3e7c@m* kd3e7d@s* kd3e7e@ae*))) (and kd3e86@rest (cons kd3e84@first kd3e86@rest))))) (if (null? kd3e7a@e) '() (if (kd2e9e@stx? kd3e7a@e) (and (not (kd2e58@top-marked? kd3e7c@m*)) (call-with-values (lambda () (join-wraps kd3e7c@m* kd3e7d@s* kd3e7e@ae* kd3e7a@e)) (lambda (kd3e8e@kd3e89 kd3e8f@kd3e8b kd3e90@kd3e8d) (let ((kd3e94@ae* kd3e90@kd3e8d) (kd3e95@s* kd3e8f@kd3e8b) (kd3e96@m* kd3e8e@kd3e89)) (kd3dc1@match-each (kd2ea0@stx-expr kd3e7a@e) kd3e7b@p kd3e96@m* kd3e95@s* kd3e94@ae*))))) (if (kd2a0b@kd28dd@annotation? kd3e7a@e) (kd3dc1@match-each (kd2a0d@kd28e1@annotation-expression kd3e7a@e) kd3e7b@p kd3e7c@m* kd3e7d@s* kd3e7e@ae*) '#f)))))) (set! kd3dc3@match-each+ (lambda (kd3e3a@e kd3e3b@x-pat kd3e3c@y-pat kd3e3d@z-pat kd3e3e@m* kd3e3f@s* kd3e40@ae* kd3e41@r) (let kd3e52@f ((kd3e4a@e kd3e3a@e) (kd3e4b@m* kd3e3e@m*) (kd3e4c@s* kd3e3f@s*) (kd3e4d@ae* kd3e40@ae*)) (if (pair? kd3e4a@e) (call-with-values (lambda () (kd3e52@f (cdr kd3e4a@e) kd3e4b@m* kd3e4c@s* kd3e4d@ae*)) (lambda (kd3e5a@kd3e55 kd3e5b@kd3e57 kd3e5c@kd3e59) (let ((kd3e60@r kd3e5c@kd3e59) (kd3e61@y-pat kd3e5b@kd3e57) (kd3e62@xr* kd3e5a@kd3e55)) (if kd3e60@r (if (null? kd3e61@y-pat) (let ((kd3e66@xr (kd3dcd@match (car kd3e4a@e) kd3e3b@x-pat kd3e4b@m* kd3e4c@s* kd3e4d@ae* '()))) (if kd3e66@xr (values (cons kd3e66@xr kd3e62@xr*) kd3e61@y-pat kd3e60@r) (values '#f '#f '#f))) (values '() (cdr kd3e61@y-pat) (kd3dcd@match (car kd3e4a@e) (car kd3e61@y-pat) kd3e4b@m* kd3e4c@s* kd3e4d@ae* kd3e60@r))) (values '#f '#f '#f))))) (if (kd2e9e@stx? kd3e4a@e) (if (kd2e58@top-marked? kd3e4b@m*) (values '() kd3e3c@y-pat (kd3dcd@match kd3e4a@e kd3e3d@z-pat kd3e4b@m* kd3e4c@s* kd3e4d@ae* kd3e41@r)) (call-with-values (lambda () (join-wraps kd3e4b@m* kd3e4c@s* kd3e4d@ae* kd3e4a@e)) (lambda (kd3e6e@kd3e69 kd3e6f@kd3e6b kd3e70@kd3e6d) (let ((kd3e74@ae* kd3e70@kd3e6d) (kd3e75@s* kd3e6f@kd3e6b) (kd3e76@m* kd3e6e@kd3e69)) (kd3e52@f (kd2ea0@stx-expr kd3e4a@e) kd3e76@m* kd3e75@s* kd3e74@ae*))))) (if (kd2a0b@kd28dd@annotation? kd3e4a@e) (kd3e52@f (kd2a0d@kd28e1@annotation-expression kd3e4a@e) kd3e4b@m* kd3e4c@s* kd3e4d@ae*) (values '() kd3e3c@y-pat (kd3dcd@match kd3e4a@e kd3e3d@z-pat kd3e4b@m* kd3e4c@s* kd3e4d@ae* kd3e41@r)))))))) (set! kd3dc5@match-each-any (lambda (kd3e1e@e kd3e1f@m* kd3e20@s* kd3e21@ae*) (if (pair? kd3e1e@e) (let ((kd3e26@l (kd3dc5@match-each-any (cdr kd3e1e@e) kd3e1f@m* kd3e20@s* kd3e21@ae*))) (and kd3e26@l (cons (kd3dbf@stx^ (car kd3e1e@e) kd3e1f@m* kd3e20@s* kd3e21@ae*) kd3e26@l))) (if (null? kd3e1e@e) '() (if (kd2e9e@stx? kd3e1e@e) (and (not (kd2e58@top-marked? kd3e1f@m*)) (call-with-values (lambda () (join-wraps kd3e1f@m* kd3e20@s* kd3e21@ae* kd3e1e@e)) (lambda (kd3e2e@kd3e29 kd3e2f@kd3e2b kd3e30@kd3e2d) (let ((kd3e34@ae* kd3e30@kd3e2d) (kd3e35@s* kd3e2f@kd3e2b) (kd3e36@m* kd3e2e@kd3e29)) (kd3dc5@match-each-any (kd2ea0@stx-expr kd3e1e@e) kd3e36@m* kd3e35@s* kd3e34@ae*))))) (if (kd2a0b@kd28dd@annotation? kd3e1e@e) (kd3dc5@match-each-any (kd2a0d@kd28e1@annotation-expression kd3e1e@e) kd3e1f@m* kd3e20@s* kd3e21@ae*) '#f)))))) (set! kd3dc7@match-empty (lambda (kd3e18@p kd3e19@r) (if (null? kd3e18@p) kd3e19@r (if (eq? kd3e18@p '_) kd3e19@r (if (eq? kd3e18@p 'any) (cons '() kd3e19@r) (if (pair? kd3e18@p) (kd3dc7@match-empty (car kd3e18@p) (kd3dc7@match-empty (cdr kd3e18@p) kd3e19@r)) (if (eq? kd3e18@p 'each-any) (cons '() kd3e19@r) (let ((kd3e1c@t (vector-ref kd3e18@p '0))) (if (memv kd3e1c@t '(each)) (kd3dc7@match-empty (vector-ref kd3e18@p '1) kd3e19@r) (if (memv kd3e1c@t '(each+)) (kd3dc7@match-empty (vector-ref kd3e18@p '1) (kd3dc7@match-empty (reverse (vector-ref kd3e18@p '2)) (kd3dc7@match-empty (vector-ref kd3e18@p '3) kd3e19@r))) (if (memv kd3e1c@t '(free-id atom)) kd3e19@r (if (memv kd3e1c@t '(scheme-id atom)) kd3e19@r (if (memv kd3e1c@t '(vector)) (kd3dc7@match-empty (vector-ref kd3e18@p '1) kd3e19@r) (assertion-violation 'syntax-dispatch '"invalid pattern" kd3e18@p)))))))))))))) (set! kd3dc9@combine (lambda (kd3e14@r* kd3e15@r) (if (null? (car kd3e14@r*)) kd3e15@r (cons (map car kd3e14@r*) (kd3dc9@combine (map cdr kd3e14@r*) kd3e15@r))))) (set! kd3dcb@match* (lambda (kd3df0@e kd3df1@p kd3df2@m* kd3df3@s* kd3df4@ae* kd3df5@r) (if (null? kd3df1@p) (and (null? kd3df0@e) kd3df5@r) (if (pair? kd3df1@p) (and (pair? kd3df0@e) (kd3dcd@match (car kd3df0@e) (car kd3df1@p) kd3df2@m* kd3df3@s* kd3df4@ae* (kd3dcd@match (cdr kd3df0@e) (cdr kd3df1@p) kd3df2@m* kd3df3@s* kd3df4@ae* kd3df5@r))) (if (eq? kd3df1@p 'each-any) (let ((kd3dfc@l (kd3dc5@match-each-any kd3df0@e kd3df2@m* kd3df3@s* kd3df4@ae*))) (and kd3dfc@l (cons kd3dfc@l kd3df5@r))) (let ((kd3dfe@t (vector-ref kd3df1@p '0))) (if (memv kd3dfe@t '(each)) (if (null? kd3df0@e) (kd3dc7@match-empty (vector-ref kd3df1@p '1) kd3df5@r) (let ((kd3e00@r* (kd3dc1@match-each kd3df0@e (vector-ref kd3df1@p '1) kd3df2@m* kd3df3@s* kd3df4@ae*))) (and kd3e00@r* (kd3dc9@combine kd3e00@r* kd3df5@r)))) (if (memv kd3dfe@t '(free-id)) (and (symbol? kd3df0@e) (kd2e58@top-marked? kd3df2@m*) (kd2ed8@free-id=? (kd3dbf@stx^ kd3df0@e kd3df2@m* kd3df3@s* kd3df4@ae*) (vector-ref kd3df1@p '1)) kd3df5@r) (if (memv kd3dfe@t '(scheme-id)) (and (symbol? kd3df0@e) (kd2e58@top-marked? kd3df2@m*) (kd2ed8@free-id=? (kd3dbf@stx^ kd3df0@e kd3df2@m* kd3df3@s* kd3df4@ae*) (kd3061@scheme-stx (vector-ref kd3df1@p '1))) kd3df5@r) (if (memv kd3dfe@t '(each+)) (call-with-values (lambda () (kd3dc3@match-each+ kd3df0@e (vector-ref kd3df1@p '1) (vector-ref kd3df1@p '2) (vector-ref kd3df1@p '3) kd3df2@m* kd3df3@s* kd3df4@ae* kd3df5@r)) (lambda (kd3e08@kd3e03 kd3e09@kd3e05 kd3e0a@kd3e07) (let ((kd3e0e@r kd3e0a@kd3e07) (kd3e0f@y-pat kd3e09@kd3e05) (kd3e10@xr* kd3e08@kd3e03)) (and kd3e0e@r (null? kd3e0f@y-pat) (if (null? kd3e10@xr*) (kd3dc7@match-empty (vector-ref kd3df1@p '1) kd3e0e@r) (kd3dc9@combine kd3e10@xr* kd3e0e@r)))))) (if (memv kd3dfe@t '(atom)) (and (fast-equal? (vector-ref kd3df1@p '1) (kd2ee4@strip kd3df0@e kd3df2@m*)) kd3df5@r) (if (memv kd3dfe@t '(vector)) (and (vector? kd3df0@e) (kd3dcd@match (vector->list kd3df0@e) (vector-ref kd3df1@p '1) kd3df2@m* kd3df3@s* kd3df4@ae* kd3df5@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" kd3df1@p))))))))))))) (set! kd3dcd@match (lambda (kd3dd2@e kd3dd3@p kd3dd4@m* kd3dd5@s* kd3dd6@ae* kd3dd7@r) (if (not kd3dd7@r) '#f (if (eq? kd3dd3@p '_) kd3dd7@r (if (eq? kd3dd3@p 'any) (cons (kd3dbf@stx^ kd3dd2@e kd3dd4@m* kd3dd5@s* kd3dd6@ae*) kd3dd7@r) (if (kd2e9e@stx? kd3dd2@e) (and (not (kd2e58@top-marked? kd3dd4@m*)) (call-with-values (lambda () (join-wraps kd3dd4@m* kd3dd5@s* kd3dd6@ae* kd3dd2@e)) (lambda (kd3de4@kd3ddf kd3de5@kd3de1 kd3de6@kd3de3) (let ((kd3dea@ae* kd3de6@kd3de3) (kd3deb@s* kd3de5@kd3de1) (kd3dec@m* kd3de4@kd3ddf)) (kd3dcd@match (kd2ea0@stx-expr kd3dd2@e) kd3dd3@p kd3dec@m* kd3deb@s* kd3dea@ae* kd3dd7@r))))) (if (kd2a0b@kd28dd@annotation? kd3dd2@e) (kd3dcd@match (kd2a0d@kd28e1@annotation-expression kd3dd2@e) kd3dd3@p kd3dd4@m* kd3dd5@s* kd3dd6@ae* kd3dd7@r) (kd3dcb@match* kd3dd2@e kd3dd3@p kd3dd4@m* kd3dd5@s* kd3dd6@ae* kd3dd7@r)))))))) (lambda (kd3dce@e kd3dcf@p) (kd3dcd@match kd3dce@e kd3dcf@p '() '() '() '()))))) (set! kd4baf@kd30d9@syntax-dispatch kd30d9@syntax-dispatch) (set! kd30db@ellipsis? (lambda (kd3ea2@x) (and (kd2ed2@id? kd3ea2@x) (kd2ed8@free-id=? kd3ea2@x (kd3061@scheme-stx '...))))) (set! kd4bb0@kd30db@ellipsis? kd30db@ellipsis?) (set! kd30dd@underscore? (lambda (kd3ea4@x) (and (kd2ed2@id? kd3ea4@x) (kd2ed8@free-id=? kd3ea4@x (kd3061@scheme-stx '_))))) (set! kd4bb1@kd30dd@underscore? kd30dd@underscore?) (set! kd30df@verify-literals (lambda (kd3ea6@lits kd3ea7@expr) (for-each (lambda (kd3eaa@x) (if (or (not (kd2ed2@id? kd3eaa@x)) (kd30db@ellipsis? kd3eaa@x) (kd30dd@underscore? kd3eaa@x)) (kd31b9@syntax-violation '#f '"invalid literal" kd3ea7@expr kd3eaa@x) (void))) kd3ea6@lits))) (set! kd4bb2@kd30df@verify-literals kd30df@verify-literals) (set! kd30e1@syntax-case-transformer (let ((kd3ead@build-dispatch-call '#f) (kd3eaf@invalid-ids-error '#f) (kd3eb1@gen-clause '#f) (kd3eb3@gen-syntax-case '#f)) (begin (set! kd3ead@build-dispatch-call (lambda (kd3f1e@pvars kd3f1f@expr kd3f20@y kd3f21@r kd3f22@mr) (let ((kd3f28@ids (map car kd3f1e@pvars)) (kd3f29@levels (map cdr kd3f1e@pvars))) (let ((kd3f2c@labels (map kd2e5e@gen-label kd3f28@ids)) (kd3f2d@new-vars (map kd2e5a@gen-lexical kd3f28@ids))) (let ((kd3f30@body (kd30fb@chi-expr (kd2ebe@add-subst (kd2e92@make-full-rib kd3f28@ids kd3f2c@labels) kd3f1f@expr) (append (map (lambda (kd3f32@label kd3f33@var kd3f34@level) (cons kd3f32@label (kd2eec@make-binding 'syntax (cons kd3f33@var kd3f34@level)))) kd3f2c@labels kd3f2d@new-vars (map cdr kd3f1e@pvars)) kd3f21@r) kd3f22@mr))) (list '(primitive apply) (kd2e35@kd2d61@build-lambda '#f kd3f2d@new-vars kd3f30@body) kd3f20@y)))))) (set! kd3eaf@invalid-ids-error (lambda (kd3f12@id* kd3f13@e kd3f14@class) (let kd3f1c@find ((kd3f18@id* kd3f12@id*) (kd3f19@ok* '())) (if (null? kd3f18@id*) (kd31b9@syntax-violation '#f '"invalid syntax" kd3f13@e) (if (kd2ed2@id? (car kd3f18@id*)) (if (kd2ede@bound-id-member? (car kd3f18@id*) kd3f19@ok*) (kd31b5@syntax-error (car kd3f18@id*) '"duplicate " kd3f14@class) (kd3f1c@find (cdr kd3f18@id*) (cons (car kd3f18@id*) kd3f19@ok*))) (kd31b5@syntax-error (car kd3f18@id*) '"invalid " kd3f14@class)))))) (set! kd3eb1@gen-clause (lambda (kd3eea@x kd3eeb@keys kd3eec@clauses kd3eed@r kd3eee@mr kd3eef@pat kd3ef0@fender kd3ef1@expr) (call-with-values (lambda () (kd30d7@convert-pattern kd3eef@pat kd3eeb@keys)) (lambda (kd3efe@kd3efb kd3eff@kd3efd) (let ((kd3f02@pvars kd3eff@kd3efd) (kd3f03@p kd3efe@kd3efb)) (if (not (kd2edc@distinct-bound-ids? (map car kd3f02@pvars))) (kd3eaf@invalid-ids-error (map car kd3f02@pvars) kd3eef@pat '"pattern variable") (if (not (for-all (lambda (kd3f06@x) (not (kd30db@ellipsis? (car kd3f06@x)))) kd3f02@pvars)) (kd31b9@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" kd3eef@pat) (let ((kd3f08@y (kd2e5a@gen-lexical 'tmp))) (let ((kd3f0a@test (if (eq? kd3ef0@fender '#t) kd3f08@y (let ((kd3f0c@call (kd3ead@build-dispatch-call kd3f02@pvars kd3ef0@fender kd3f08@y kd3eed@r kd3eee@mr))) (list 'if kd3f08@y kd3f0c@call (list 'quote '#f)))))) (let ((kd3f0e@conseq (kd3ead@build-dispatch-call kd3f02@pvars kd3ef1@expr kd3f08@y kd3eed@r kd3eee@mr))) (let ((kd3f10@altern (kd3eb3@gen-syntax-case kd3eea@x kd3eeb@keys kd3eec@clauses kd3eed@r kd3eee@mr))) (list (kd2e35@kd2d61@build-lambda '#f (list kd3f08@y) (list 'if kd3f0a@test kd3f0e@conseq kd3f10@altern)) (list '(primitive syntax-dispatch) kd3eea@x (list 'quote kd3f03@p)))))))))))))) (set! kd3eb3@gen-syntax-case (lambda (kd3ec8@x kd3ec9@keys kd3eca@clauses kd3ecb@r kd3ecc@mr) (if (null? kd3eca@clauses) (list '(primitive syntax-error) kd3ec8@x) (let ((kd3ed2@t (car kd3eca@clauses))) (let ((kd3ed4@ls/false (kd30d9@syntax-dispatch kd3ed2@t '(any any)))) (if kd3ed4@ls/false (apply (lambda (kd3ed6@pat kd3ed7@expr) (if (and (kd2ed2@id? kd3ed6@pat) (not (kd2ede@bound-id-member? kd3ed6@pat kd3ec9@keys)) (not (kd30db@ellipsis? kd3ed6@pat))) (if (kd2ed8@free-id=? kd3ed6@pat (kd3061@scheme-stx '_)) (kd30fb@chi-expr kd3ed7@expr kd3ecb@r kd3ecc@mr) (let ((kd3eda@lab (kd2e5e@gen-label kd3ed6@pat)) (kd3edb@lex (kd2e5a@gen-lexical kd3ed6@pat))) (let ((kd3ede@body (kd30fb@chi-expr (kd2ebe@add-subst (kd2e92@make-full-rib (list kd3ed6@pat) (list kd3eda@lab)) kd3ed7@expr) (cons (cons kd3eda@lab (kd2eec@make-binding 'syntax (cons kd3edb@lex '0))) kd3ecb@r) kd3ecc@mr))) (list (kd2e35@kd2d61@build-lambda '#f (list kd3edb@lex) kd3ede@body) kd3ec8@x)))) (kd3eb1@gen-clause kd3ec8@x kd3ec9@keys (cdr kd3eca@clauses) kd3ecb@r kd3ecc@mr kd3ed6@pat '#t kd3ed7@expr))) kd3ed4@ls/false) (let ((kd3ee0@t kd3ed2@t)) (let ((kd3ee2@ls/false (kd30d9@syntax-dispatch kd3ee0@t '(any any any)))) (if kd3ee2@ls/false (apply (lambda (kd3ee4@pat kd3ee5@fender kd3ee6@expr) (kd3eb1@gen-clause kd3ec8@x kd3ec9@keys (cdr kd3eca@clauses) kd3ecb@r kd3ecc@mr kd3ee4@pat kd3ee5@fender kd3ee6@expr)) kd3ee2@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3ee0@t)))))))))) (lambda (kd3eb4@e kd3eb5@r kd3eb6@mr) (let ((kd3eba@t kd3eb4@e)) (let ((kd3ebc@ls/false (kd30d9@syntax-dispatch kd3eba@t '(_ any each-any . each-any)))) (if kd3ebc@ls/false (apply (lambda (kd3ebe@expr kd3ebf@keys kd3ec0@clauses) (begin (kd30df@verify-literals kd3ebf@keys kd3eb4@e) (let ((kd3ec4@x (kd2e5a@gen-lexical 'tmp))) (let ((kd3ec6@body (kd3eb3@gen-syntax-case kd3ec4@x kd3ebf@keys kd3ec0@clauses kd3eb5@r kd3eb6@mr))) (list (kd2e35@kd2d61@build-lambda '#f (list kd3ec4@x) kd3ec6@body) (kd30fb@chi-expr kd3ebe@expr kd3eb5@r kd3eb6@mr)))))) kd3ebc@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3eba@t)))))))) (set! kd4bb3@kd30e1@syntax-case-transformer kd30e1@syntax-case-transformer) (set! kd30e3@ellipsis-map (lambda (kd3f38@proc kd3f39@ls . kd3f3c@ls*) (let ((kd3f3f@who '#f)) (begin (set! kd3f3f@who '...) (begin (if (not (list? kd3f39@ls)) (assertion-violation kd3f3f@who '"not a list" kd3f39@ls) (void)) (if (not (null? kd3f3c@ls*)) (let ((kd3f40@n (length kd3f39@ls))) (for-each (lambda (kd3f42@x) (begin (if (not (list? kd3f42@x)) (assertion-violation kd3f3f@who '"not a list" kd3f42@x) (void)) (if (not (= (length kd3f42@x) kd3f40@n)) (assertion-violation kd3f3f@who '"length mismatch" kd3f39@ls kd3f42@x) (void)))) kd3f3c@ls*)) (void)) (apply map kd3f38@proc kd3f39@ls kd3f3c@ls*)))))) (set! kd4bb4@kd30e3@ellipsis-map kd30e3@ellipsis-map) (set! kd30e5@syntax-transformer (let ((kd3f45@gen-syntax '#f) (kd3f47@gen-ref '#f) (kd3f49@gen-append '#f) (kd3f4b@gen-mappend '#f) (kd3f4d@gen-map '#f) (kd3f4f@gen-cons '#f) (kd3f51@gen-vector '#f) (kd3f53@regen '#f)) (begin (set! kd3f45@gen-syntax (lambda (kd3fbc@src kd3fbd@e kd3fbe@r kd3fbf@maps kd3fc0@ellipsis? kd3fc1@vec?) (let ((kd3fc8@t kd3fbd@e)) (let ((kd3fca@ls/false (kd30d9@syntax-dispatch kd3fc8@t 'any))) (if (and kd3fca@ls/false (apply (lambda (kd3fcc@dots) (kd3fc0@ellipsis? kd3fcc@dots)) kd3fca@ls/false)) (apply (lambda (kd3fce@dots) (kd31b9@syntax-violation '#f '"misplaced ellipsis in syntax form" kd3fbc@src)) kd3fca@ls/false) (let ((kd3fd0@t kd3fc8@t)) (let ((kd3fd2@ls/false (kd30d9@syntax-dispatch kd3fd0@t 'any))) (if (and kd3fd2@ls/false (apply (lambda (kd3fd4@id) (kd2ed2@id? kd3fd4@id)) kd3fd2@ls/false)) (apply (lambda (kd3fd6@id) (let ((kd3fd8@label (kd2ee8@id->label kd3fbd@e))) (let ((kd3fda@b (kd2eea@label->binding kd3fd8@label kd3fbe@r))) (if (eq? (kd2eee@binding-type kd3fda@b) 'syntax) (call-with-values (lambda () (let ((kd3fe0@var.lev (kd2ef0@binding-value kd3fda@b))) (kd3f47@gen-ref kd3fbc@src (car kd3fe0@var.lev) (cdr kd3fe0@var.lev) kd3fbf@maps))) (lambda (kd3fe2@kd3fdd kd3fe3@kd3fdf) (let ((kd3fe6@maps kd3fe3@kd3fdf) (kd3fe7@var kd3fe2@kd3fdd)) (values (list 'ref kd3fe7@var) kd3fe6@maps)))) (values (list 'quote kd3fbd@e) kd3fbf@maps))))) kd3fd2@ls/false) (let ((kd3fea@t kd3fd0@t)) (let ((kd3fec@ls/false (kd30d9@syntax-dispatch kd3fea@t '(any any)))) (if (and kd3fec@ls/false (apply (lambda (kd3fee@dots kd3fef@e) (kd3fc0@ellipsis? kd3fee@dots)) kd3fec@ls/false)) (apply (lambda (kd3ff2@dots kd3ff3@e) (if kd3fc1@vec? (kd31b9@syntax-violation '#f '"misplaced ellipsis in syntax form" kd3fbc@src) (kd3f45@gen-syntax kd3fbc@src kd3ff3@e kd3fbe@r kd3fbf@maps (lambda (kd3ff6@x) '#f) '#f))) kd3fec@ls/false) (let ((kd3ff8@t kd3fea@t)) (let ((kd3ffa@ls/false (kd30d9@syntax-dispatch kd3ff8@t '(any any . any)))) (if (and kd3ffa@ls/false (apply (lambda (kd3ffc@x kd3ffd@dots kd3ffe@y) (kd3fc0@ellipsis? kd3ffd@dots)) kd3ffa@ls/false)) (apply (lambda (kd4002@x kd4003@dots kd4004@y) (let kd401a@f ((kd4008@y kd4004@y) (kd4009@k (lambda (kd400c@maps) (call-with-values (lambda () (kd3f45@gen-syntax kd3fbc@src kd4002@x kd3fbe@r (cons '() kd400c@maps) kd3fc0@ellipsis? '#f)) (lambda (kd4012@kd400f kd4013@kd4011) (let ((kd4016@maps kd4013@kd4011) (kd4017@x kd4012@kd400f)) (if (null? (car kd4016@maps)) (kd31b9@syntax-violation '#f '"extra ellipsis in syntax form" kd3fbc@src) (values (kd3f4d@gen-map kd4017@x (car kd4016@maps)) (cdr kd4016@maps))))))))) (let ((kd401c@t kd4008@y)) (let ((kd401e@ls/false (kd30d9@syntax-dispatch kd401c@t '()))) (if kd401e@ls/false (apply (lambda () (kd4009@k kd3fbf@maps)) kd401e@ls/false) (let ((kd4020@t kd401c@t)) (let ((kd4022@ls/false (kd30d9@syntax-dispatch kd4020@t '(any . any)))) (if (and kd4022@ls/false (apply (lambda (kd4024@dots kd4025@y) (kd3fc0@ellipsis? kd4024@dots)) kd4022@ls/false)) (apply (lambda (kd4028@dots kd4029@y) (kd401a@f kd4029@y (lambda (kd402c@maps) (call-with-values (lambda () (kd4009@k (cons '() kd402c@maps))) (lambda (kd4032@kd402f kd4033@kd4031) (let ((kd4036@maps kd4033@kd4031) (kd4037@x kd4032@kd402f)) (if (null? (car kd4036@maps)) (kd31b9@syntax-violation '#f '"extra ellipsis in syntax form" kd3fbc@src) (values (kd3f4b@gen-mappend kd4037@x (car kd4036@maps)) (cdr kd4036@maps))))))))) kd4022@ls/false) (let ((kd403a@t kd4020@t)) (let ((kd403c@ls/false (kd30d9@syntax-dispatch kd403a@t '_))) (if kd403c@ls/false (apply (lambda () (call-with-values (lambda () (kd3f45@gen-syntax kd3fbc@src kd4008@y kd3fbe@r kd3fbf@maps kd3fc0@ellipsis? kd3fc1@vec?)) (lambda (kd4042@kd403f kd4043@kd4041) (let ((kd4046@maps kd4043@kd4041) (kd4047@y kd4042@kd403f)) (call-with-values (lambda () (kd4009@k kd4046@maps)) (lambda (kd404e@kd404b kd404f@kd404d) (let ((kd4052@maps kd404f@kd404d) (kd4053@x kd404e@kd404b)) (values (kd3f49@gen-append kd4053@x kd4047@y) kd4052@maps)))))))) kd403c@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd403a@t)))))))))))) kd3ffa@ls/false) (let ((kd4056@t kd3ff8@t)) (let ((kd4058@ls/false (kd30d9@syntax-dispatch kd4056@t '(any . any)))) (if kd4058@ls/false (apply (lambda (kd405a@x kd405b@y) (call-with-values (lambda () (kd3f45@gen-syntax kd3fbc@src kd405a@x kd3fbe@r kd3fbf@maps kd3fc0@ellipsis? '#f)) (lambda (kd4062@kd405f kd4063@kd4061) (let ((kd4066@maps kd4063@kd4061) (kd4067@xnew kd4062@kd405f)) (call-with-values (lambda () (kd3f45@gen-syntax kd3fbc@src kd405b@y kd3fbe@r kd4066@maps kd3fc0@ellipsis? kd3fc1@vec?)) (lambda (kd406e@kd406b kd406f@kd406d) (let ((kd4072@maps kd406f@kd406d) (kd4073@ynew kd406e@kd406b)) (values (kd3f4f@gen-cons kd3fbd@e kd405a@x kd405b@y kd4067@xnew kd4073@ynew) kd4072@maps)))))))) kd4058@ls/false) (let ((kd4076@t kd4056@t)) (let ((kd4078@ls/false (kd30d9@syntax-dispatch kd4076@t '#(vector each-any)))) (if kd4078@ls/false (apply (lambda (kd407a@ls) (call-with-values (lambda () (kd3f45@gen-syntax kd3fbc@src kd407a@ls kd3fbe@r kd3fbf@maps kd3fc0@ellipsis? '#t)) (lambda (kd4080@kd407d kd4081@kd407f) (let ((kd4084@maps kd4081@kd407f) (kd4085@lsnew kd4080@kd407d)) (values (kd3f51@gen-vector kd3fbd@e kd407a@ls kd4085@lsnew) kd4084@maps))))) kd4078@ls/false) (let ((kd4088@t kd4076@t)) (let ((kd408a@ls/false (kd30d9@syntax-dispatch kd4088@t '_))) (if kd408a@ls/false (apply (lambda () (values (list 'quote kd3fbd@e) kd3fbf@maps)) kd408a@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd4088@t)))))))))))))))))))))))) (set! kd3f47@gen-ref (lambda (kd3fa2@src kd3fa3@var kd3fa4@level kd3fa5@maps) (if (= kd3fa4@level '0) (values kd3fa3@var kd3fa5@maps) (if (null? kd3fa5@maps) (kd31b9@syntax-violation '#f '"missing ellipsis in syntax form" kd3fa2@src) (call-with-values (lambda () (kd3f47@gen-ref kd3fa2@src kd3fa3@var (- kd3fa4@level '1) (cdr kd3fa5@maps))) (lambda (kd3fae@kd3fab kd3faf@kd3fad) (let ((kd3fb2@outer-maps kd3faf@kd3fad) (kd3fb3@outer-var kd3fae@kd3fab)) (let ((kd3fb6@t (assq kd3fb3@outer-var (car kd3fa5@maps)))) (if kd3fb6@t ((lambda (kd3fb8@b) (values (cdr kd3fb8@b) kd3fa5@maps)) kd3fb6@t) (let ((kd3fba@inner-var (kd2e5a@gen-lexical 'tmp))) (values kd3fba@inner-var (cons (cons (cons kd3fb3@outer-var kd3fba@inner-var) (car kd3fa5@maps)) kd3fb2@outer-maps)))))))))))) (set! kd3f49@gen-append (lambda (kd3f9e@x kd3f9f@y) (if (fast-equal? kd3f9f@y ''()) kd3f9e@x (list 'append kd3f9e@x kd3f9f@y)))) (set! kd3f4b@gen-mappend (lambda (kd3f9a@e kd3f9b@map-env) (list 'apply '(primitive append) (kd3f4d@gen-map kd3f9a@e kd3f9b@map-env)))) (set! kd3f4d@gen-map (lambda (kd3f88@e kd3f89@map-env) (let ((kd3f8c@formals (map cdr kd3f89@map-env)) (kd3f8d@actuals (map (lambda (kd3f90@x) (list 'ref (car kd3f90@x))) kd3f89@map-env))) (if (eq? (car kd3f88@e) 'ref) (car kd3f8d@actuals) (if (for-all (lambda (kd3f92@x) (and (eq? (car kd3f92@x) 'ref) (memq (cadr kd3f92@x) kd3f8c@formals))) (cdr kd3f88@e)) (let ((kd3f94@args (map (let ((kd3f96@r (map cons kd3f8c@formals kd3f8d@actuals))) (lambda (kd3f98@x) (cdr (assq (cadr kd3f98@x) kd3f96@r)))) (cdr kd3f88@e)))) (cons 'map (cons (list 'primitive (car kd3f88@e)) kd3f94@args))) (cons* 'map (list 'lambda kd3f8c@formals kd3f88@e) kd3f8d@actuals)))))) (set! kd3f4f@gen-cons (lambda (kd3f78@e kd3f79@x kd3f7a@y kd3f7b@xnew kd3f7c@ynew) (let ((kd3f82@t (car kd3f7c@ynew))) (if (memv kd3f82@t '(quote)) (if (eq? (car kd3f7b@xnew) 'quote) (let ((kd3f84@xnew (cadr kd3f7b@xnew)) (kd3f85@ynew (cadr kd3f7c@ynew))) (if (and (eq? kd3f84@xnew kd3f79@x) (eq? kd3f85@ynew kd3f7a@y)) (list 'quote kd3f78@e) (list 'quote (cons kd3f84@xnew kd3f85@ynew)))) (if (null? (cadr kd3f7c@ynew)) (list 'list kd3f7b@xnew) (list 'cons kd3f7b@xnew kd3f7c@ynew))) (if (memv kd3f82@t '(list)) (cons 'list (cons kd3f7b@xnew (cdr kd3f7c@ynew))) (list 'cons kd3f7b@xnew kd3f7c@ynew)))))) (set! kd3f51@gen-vector (lambda (kd3f72@e kd3f73@ls kd3f74@lsnew) (if (eq? (car kd3f74@lsnew) 'quote) (if (eq? (cadr kd3f74@lsnew) kd3f73@ls) (list 'quote kd3f72@e) (list 'quote (list->vector (cadr kd3f74@lsnew)))) (if (eq? (car kd3f74@lsnew) 'list) (cons 'vector (cdr kd3f74@lsnew)) (list 'list->vector kd3f74@lsnew))))) (set! kd3f53@regen (lambda (kd3f6c@x) (let ((kd3f6e@t (car kd3f6c@x))) (if (memv kd3f6e@t '(ref)) (cadr kd3f6c@x) (if (memv kd3f6e@t '(primitive)) (list 'primitive (cadr kd3f6c@x)) (if (memv kd3f6e@t '(quote)) (list 'quote (cadr kd3f6c@x)) (if (memv kd3f6e@t '(lambda)) (kd2e35@kd2d61@build-lambda '#f (cadr kd3f6c@x) (kd3f53@regen (caddr kd3f6c@x))) (if (memv kd3f6e@t '(map)) (let ((kd3f70@ls (map kd3f53@regen (cdr kd3f6c@x)))) (cons '(primitive ellipsis-map) kd3f70@ls)) (cons (list 'primitive (car kd3f6c@x)) (map kd3f53@regen (cdr kd3f6c@x))))))))))) (lambda (kd3f54@e kd3f55@r kd3f56@mr) (let ((kd3f5a@t kd3f54@e)) (let ((kd3f5c@ls/false (kd30d9@syntax-dispatch kd3f5a@t '(_ any)))) (if kd3f5c@ls/false (apply (lambda (kd3f5e@x) (call-with-values (lambda () (kd3f45@gen-syntax kd3f54@e kd3f5e@x kd3f55@r '() kd30db@ellipsis? '#f)) (lambda (kd3f64@kd3f61 kd3f65@kd3f63) (let ((kd3f68@maps kd3f65@kd3f63) (kd3f69@e kd3f64@kd3f61)) (kd3f53@regen kd3f69@e))))) kd3f5c@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd3f5a@t)))))))) (set! kd4bb5@kd30e5@syntax-transformer kd30e5@syntax-transformer) (set! kd30e7@core-macro-transformer (lambda (kd408c@name) (let ((kd408e@t kd408c@name)) (if (memv kd408e@t '(quote)) kd3089@quote-transformer (if (memv kd408e@t '(lambda)) kd308d@lambda-transformer (if (memv kd408e@t '(case-lambda)) kd308b@case-lambda-transformer (if (memv kd408e@t '(letrec)) kd3071@letrec-transformer (if (memv kd408e@t '(letrec*)) kd3073@letrec*-transformer (if (memv kd408e@t '(let)) kd306f@let-transformer (if (memv kd408e@t '(if)) kd3081@if-transformer (if (memv kd408e@t '(and)) kd3083@and-transformer (if (memv kd408e@t '(or)) kd3085@or-transformer (if (memv kd408e@t '(foreign-call)) kd30d5@foreign-call-transformer (if (memv kd408e@t '(syntax-case)) kd30e1@syntax-case-transformer (if (memv kd408e@t '(syntax)) kd30e5@syntax-transformer (if (memv kd408e@t '(type-descriptor)) kd3077@type-descriptor-transformer (if (memv kd408e@t '(record-type-descriptor)) kd3079@record-type-descriptor-transformer (if (memv kd408e@t '(record-constructor-descriptor)) kd307b@record-constructor-descriptor-transformer (if (memv kd408e@t '(fluid-let-syntax)) kd3075@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" kd408c@name)))))))))))))))))))) (set! kd4bb6@kd30e7@core-macro-transformer kd30e7@core-macro-transformer) (set! kd30e9@symbol-macro (lambda (kd4090@x kd4091@set) (let ((kd4094@t kd4090@x)) (let ((kd4096@ls/false (kd30d9@syntax-dispatch kd4094@t '(_ any)))) (if (and kd4096@ls/false (apply (lambda (kd4098@name) (and (kd2ed2@id? kd4098@name) (memq (kd2ed4@id->sym kd4098@name) kd4091@set))) kd4096@ls/false)) (apply (lambda (kd409a@name) (kd308f@bless (list 'quote kd409a@name))) kd4096@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd4094@t)))))) (set! kd4bb7@kd30e9@symbol-macro kd30e9@symbol-macro) (set! kd30eb@macro-transformer (lambda (kd409c@x) (if (procedure? kd409c@x) kd409c@x (if (symbol? kd409c@x) (let ((kd409e@t kd409c@x)) (if (memv kd409e@t '(define-record-type)) kd30cd@define-record-type-macro (if (memv kd409e@t '(define-struct)) kd30cb@define-struct-macro (if (memv kd409e@t '(include)) kd30c1@include-macro (if (memv kd409e@t '(cond)) kd30bd@cond-macro (if (memv kd409e@t '(let)) kd3095@let-macro (if (memv kd409e@t '(do)) kd30b5@do-macro (if (memv kd409e@t '(or)) kd30b9@or-macro (if (memv kd409e@t '(and)) kd30bb@and-macro (if (memv kd409e@t '(let*)) kd30b7@let*-macro (if (memv kd409e@t '(let-values)) kd3097@let-values-macro (if (memv kd409e@t '(let*-values)) kd3099@let*-values-macro (if (memv kd409e@t '(syntax-rules)) kd30c5@syntax-rules-macro (if (memv kd409e@t '(quasiquote)) kd30c7@quasiquote-macro (if (memv kd409e@t '(quasisyntax)) kd30c9@quasisyntax-macro (if (memv kd409e@t '(with-syntax)) kd3091@with-syntax-macro (if (memv kd409e@t '(when)) kd307d@when-macro (if (memv kd409e@t '(unless)) kd307f@unless-macro (if (memv kd409e@t '(case)) kd3087@case-macro (if (memv kd409e@t '(identifier-syntax)) kd30b3@identifier-syntax-macro (if (memv kd409e@t '(time)) kd30ab@time-macro (if (memv kd409e@t '(delay)) kd30ad@delay-macro (if (memv kd409e@t '(assert)) kd30af@assert-macro (if (memv kd409e@t '(endianness)) kd30b1@endianness-macro (if (memv kd409e@t '(guard)) kd30a7@guard-macro (if (memv kd409e@t '(define-enumeration)) kd30a9@define-enumeration-macro (if (memv kd409e@t '(trace-lambda)) kd309b@trace-lambda-macro (if (memv kd409e@t '(trace-define)) kd309d@trace-define-macro (if (memv kd409e@t '(trace-define-syntax)) kd309f@trace-define-syntax-macro (if (memv kd409e@t '(trace-let-syntax)) kd30a3@trace-let-syntax-macro (if (memv kd409e@t '(trace-letrec-syntax)) kd30a5@trace-letrec-syntax-macro (if (memv kd409e@t '(define-condition-type)) kd30cf@define-condition-type-macro (if (memv kd409e@t '(parameterize)) kd30d3@parameterize-macro (if (memv kd409e@t '(include-into)) kd30c3@include-into-macro (if (memv kd409e@t '(eol-style)) (lambda (kd40a0@x) (kd30e9@symbol-macro kd40a0@x '(none lf cr crlf nel crnel ls))) (if (memv kd409e@t '(error-handling-mode)) (lambda (kd40a2@x) (kd30e9@symbol-macro kd40a2@x '(ignore raise replace))) (if (memv kd409e@t '(buffer-mode)) (lambda (kd40a4@x) (kd30e9@symbol-macro kd40a4@x '(none line block))) (if (memv kd409e@t '(file-options)) kd2e4d@file-options-macro (if (memv kd409e@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) kd30d1@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" kd409c@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" kd409c@x))))) (set! kd4bb8@kd30eb@macro-transformer kd30eb@macro-transformer) (set! kd30ed@local-macro-transformer (lambda (kd40a6@x) (car kd40a6@x))) (set! kd4bb9@kd30ed@local-macro-transformer kd30ed@local-macro-transformer) (set! kd30ef@do-macro-call (lambda (kd40a8@transformer kd40a9@expr) (let ((kd40ac@out (kd40a8@transformer (kd2ebc@add-mark kd2eb6@anti-mark kd40a9@expr '#f)))) (begin (let kd40b0@f ((kd40ae@x kd40ac@out)) (if (not (kd2e9e@stx? kd40ae@x)) (if (pair? kd40ae@x) (begin (kd40b0@f (car kd40ae@x)) (kd40b0@f (cdr kd40ae@x))) (if (vector? kd40ae@x) (vector-for-each kd40b0@f kd40ae@x) (if (symbol? kd40ae@x) (kd31b9@syntax-violation '#f '"raw symbol encountered in output of macro" kd40a9@expr kd40ae@x) (void)))) (void))) (kd2ebc@add-mark (kd2eb4@gen-mark) kd40ac@out kd40a9@expr))))) (set! kd4bba@kd30ef@do-macro-call kd30ef@do-macro-call) (set! kd30f1@chi-macro (lambda (kd40b2@p kd40b3@e) (kd30ef@do-macro-call (kd30eb@macro-transformer kd40b2@p) kd40b3@e))) (set! kd4bbb@kd30f1@chi-macro kd30f1@chi-macro) (set! kd30f3@chi-local-macro (lambda (kd40b6@p kd40b7@e) (kd30ef@do-macro-call (kd30ed@local-macro-transformer kd40b6@p) kd40b7@e))) (set! kd4bbc@kd30f3@chi-local-macro kd30f3@chi-local-macro) (set! kd30f5@chi-global-macro (lambda (kd40ba@p kd40bb@e) (let ((kd40be@lib (car kd40ba@p)) (kd40bf@loc (cdr kd40ba@p))) (begin (kd2ce8@kd2b33@visit-library kd40be@lib) (let ((kd40c2@x (symbol-value kd40bf@loc))) (let ((kd40c4@transformer (if (procedure? kd40c2@x) kd40c2@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" kd40c2@x)))) (kd30ef@do-macro-call kd40c4@transformer kd40bb@e))))))) (set! kd4bbd@kd30f5@chi-global-macro kd30f5@chi-global-macro) (set! kd30f7@chi-expr* (lambda (kd40c6@e* kd40c7@r kd40c8@mr) (if (null? kd40c6@e*) '() (let ((kd40cc@e (kd30fb@chi-expr (car kd40c6@e*) kd40c7@r kd40c8@mr))) (cons kd40cc@e (kd30f7@chi-expr* (cdr kd40c6@e*) kd40c7@r kd40c8@mr)))))) (set! kd4bbe@kd30f7@chi-expr* kd30f7@chi-expr*) (set! kd30f9@chi-application (lambda (kd40ce@e kd40cf@r kd40d0@mr) (let ((kd40d4@t kd40ce@e)) (let ((kd40d6@ls/false (kd30d9@syntax-dispatch kd40d4@t '(any . each-any)))) (if kd40d6@ls/false (apply (lambda (kd40d8@rator kd40d9@rands) (let ((kd40dc@rator (kd30fb@chi-expr kd40d8@rator kd40cf@r kd40d0@mr))) (cons kd40dc@rator (kd30f7@chi-expr* kd40d9@rands kd40cf@r kd40d0@mr)))) kd40d6@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd40d4@t)))))) (set! kd4bbf@kd30f9@chi-application kd30f9@chi-application) (set! kd30fb@chi-expr (lambda (kd40de@e kd40df@r kd40e0@mr) (call-with-values (lambda () (kd2ef4@syntax-type kd40de@e kd40df@r)) (lambda (kd40ea@kd40e5 kd40eb@kd40e7 kd40ec@kd40e9) (let ((kd40f0@kwd kd40ec@kd40e9) (kd40f1@value kd40eb@kd40e7) (kd40f2@type kd40ea@kd40e5)) (let ((kd40f6@t kd40f2@type)) (if (memv kd40f6@t '(core-macro)) (let ((kd40f8@transformer (kd30e7@core-macro-transformer kd40f1@value))) (kd40f8@transformer kd40de@e kd40df@r kd40e0@mr)) (if (memv kd40f6@t '(global)) (let ((kd40fa@lib (car kd40f1@value))) (let ((kd40fc@loc (cdr kd40f1@value))) (begin ((kd3141@inv-collector) kd40fa@lib) kd40fc@loc))) (if (memv kd40f6@t '(core-prim)) (let ((kd40fe@name kd40f1@value)) (list 'primitive kd40fe@name)) (if (memv kd40f6@t '(call)) (kd30f9@chi-application kd40de@e kd40df@r kd40e0@mr) (if (memv kd40f6@t '(lexical)) (let ((kd4100@lex (kd3063@lexical-var kd40f1@value))) kd4100@lex) (if (memv kd40f6@t '(global-macro global-macro!)) (kd30fb@chi-expr (kd30f5@chi-global-macro kd40f1@value kd40de@e) kd40df@r kd40e0@mr) (if (memv kd40f6@t '(local-macro local-macro!)) (kd30fb@chi-expr (kd30f3@chi-local-macro kd40f1@value kd40de@e) kd40df@r kd40e0@mr) (if (memv kd40f6@t '(macro macro!)) (kd30fb@chi-expr (kd30f1@chi-macro kd40f1@value kd40de@e) kd40df@r kd40e0@mr) (if (memv kd40f6@t '(constant)) (let ((kd4102@datum kd40f1@value)) (list 'quote kd4102@datum)) (if (memv kd40f6@t '(set!)) (kd30fd@chi-set! kd40de@e kd40df@r kd40e0@mr) (if (memv kd40f6@t '(begin)) (let ((kd4104@t kd40de@e)) (let ((kd4106@ls/false (kd30d9@syntax-dispatch kd4104@t '(_ any . each-any)))) (if kd4106@ls/false (apply (lambda (kd4108@x kd4109@x*) (kd2e37@kd2d91@build-sequence '#f (kd30f7@chi-expr* (cons kd4108@x kd4109@x*) kd40df@r kd40e0@mr))) kd4106@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd4104@t)))) (if (memv kd40f6@t '(let-syntax letrec-syntax)) (let ((kd410c@t kd40de@e)) (let ((kd410e@ls/false (kd30d9@syntax-dispatch kd410c@t '(_ #(each (any any)) any . each-any)))) (if (and kd410e@ls/false (apply (lambda (kd4110@xlhs* kd4111@xrhs* kd4112@xbody kd4113@xbody*) (if (not (kd2eda@valid-bound-ids? kd4110@xlhs*)) (kd31b9@syntax-violation '#f '"invalid identifiers" kd40de@e) (void))) kd410e@ls/false)) (apply (lambda (kd4118@xlhs* kd4119@xrhs* kd411a@xbody kd411b@xbody*) (let ((kd4120@xlab* (map kd2e5e@gen-label kd4118@xlhs*))) (let ((kd4122@xrib (kd2e92@make-full-rib kd4118@xlhs* kd4120@xlab*))) (let ((kd4124@xb* (map (lambda (kd4126@x) (kd2f0a@make-eval-transformer (kd3133@expand-transformer (if (eq? kd40f2@type 'let-syntax) kd4126@x (kd2ebe@add-subst kd4122@xrib kd4126@x)) kd40e0@mr))) kd4119@xrhs*))) (kd2e37@kd2d91@build-sequence '#f (kd30f7@chi-expr* (map (lambda (kd4128@x) (kd2ebe@add-subst kd4122@xrib kd4128@x)) (cons kd411a@xbody kd411b@xbody*)) (append (map cons kd4120@xlab* kd4124@xb*) kd40df@r) (append (map cons kd4120@xlab* kd4124@xb*) kd40e0@mr))))))) kd410e@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd410c@t)))) (if (memv kd40f6@t '(displaced-lexical)) (kd31b9@syntax-violation '#f '"identifier out of context" kd40de@e) (if (memv kd40f6@t '(syntax)) (kd31b9@syntax-violation '#f '"reference to pattern variable outside a syntax form" kd40de@e) (if (memv kd40f6@t '(define define-syntax module import library)) (kd31b9@syntax-violation '#f (string-append (let ((kd412a@t kd40f2@type)) (if (memv kd412a@t '(define)) '"a definition" (if (memv kd412a@t '(define-syntax)) '"a define-syntax" (if (memv kd412a@t '(module)) '"a module definition" (if (memv kd412a@t '(library)) '"a library definition" (if (memv kd412a@t '(import)) '"an import declaration" (if (memv kd412a@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") kd40de@e) (if (memv kd40f6@t '(mutable)) (kd31b9@syntax-violation '#f '"attempt to reference an unexportable variable" kd40de@e) (kd31b9@syntax-violation '#f '"invalid expression" kd40de@e))))))))))))))))))))))) (set! kd4bc0@kd30fb@chi-expr kd30fb@chi-expr) (set! kd30fd@chi-set! (lambda (kd412c@e kd412d@r kd412e@mr) (let ((kd4132@t kd412c@e)) (let ((kd4134@ls/false (kd30d9@syntax-dispatch kd4132@t '(_ any any)))) (if (and kd4134@ls/false (apply (lambda (kd4136@x kd4137@v) (kd2ed2@id? kd4136@x)) kd4134@ls/false)) (apply (lambda (kd413a@x kd413b@v) (call-with-values (lambda () (kd2ef4@syntax-type kd413a@x kd412d@r)) (lambda (kd4144@kd413f kd4145@kd4141 kd4146@kd4143) (let ((kd414a@kwd kd4146@kd4143) (kd414b@value kd4145@kd4141) (kd414c@type kd4144@kd413f)) (let ((kd4150@t kd414c@type)) (if (memv kd4150@t '(lexical)) (begin (kd3067@set-lexical-mutable! kd414b@value '#t) (list 'set! (kd3063@lexical-var kd414b@value) (kd30fb@chi-expr kd413b@v kd412d@r kd412e@mr))) (if (memv kd4150@t '(core-prim)) (kd31b9@syntax-violation '#f '"cannot modify imported core primitive" kd412c@e) (if (memv kd4150@t '(global)) (kd31b9@syntax-violation '#f '"attempt to modify imported binding" kd412c@e) (if (memv kd4150@t '(global-macro!)) (kd30fb@chi-expr (kd30f5@chi-global-macro kd414b@value kd412c@e) kd412d@r kd412e@mr) (if (memv kd4150@t '(local-macro!)) (kd30fb@chi-expr (kd30f3@chi-local-macro kd414b@value kd412c@e) kd412d@r kd412e@mr) (if (memv kd4150@t '(mutable)) (kd31b9@syntax-violation '#f '"attempt to assign to an unexportable variable" kd412c@e) (kd31b9@syntax-violation '#f '"invalid syntax" kd412c@e)))))))))))) kd4134@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd4132@t)))))) (set! kd4bc1@kd30fd@chi-set! kd30fd@chi-set!) (set! kd30ff@verify-formals (lambda (kd4152@fmls kd4153@stx) (let ((kd4156@t kd4152@fmls)) (let ((kd4158@ls/false (kd30d9@syntax-dispatch kd4156@t 'each-any))) (if kd4158@ls/false (apply (lambda (kd415a@x*) (if (not (kd2eda@valid-bound-ids? kd415a@x*)) (kd3093@invalid-fmls-error kd4153@stx kd4152@fmls) (void))) kd4158@ls/false) (let ((kd415c@t kd4156@t)) (let ((kd415e@ls/false (kd30d9@syntax-dispatch kd415c@t '#(each+ any () any)))) (if kd415e@ls/false (apply (lambda (kd4160@x* kd4161@x) (if (not (kd2eda@valid-bound-ids? (cons kd4161@x kd4160@x*))) (kd3093@invalid-fmls-error kd4153@stx kd4152@fmls) (void))) kd415e@ls/false) (let ((kd4164@t kd415c@t)) (let ((kd4166@ls/false (kd30d9@syntax-dispatch kd4164@t '_))) (if kd4166@ls/false (apply (lambda () (kd31b9@syntax-violation '#f '"invalid syntax" kd4153@stx)) kd4166@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd4164@t)))))))))))) (set! kd4bc2@kd30ff@verify-formals kd30ff@verify-formals) (set! kd3101@chi-lambda-clause (lambda (kd4168@stx kd4169@fmls kd416a@body* kd416b@r kd416c@mr) (let ((kd4172@t kd4169@fmls)) (let ((kd4174@ls/false (kd30d9@syntax-dispatch kd4172@t 'each-any))) (if kd4174@ls/false (apply (lambda (kd4176@x*) (begin (kd30ff@verify-formals kd4169@fmls kd4168@stx) (let ((kd4178@lex* (map kd2e5a@gen-lexical kd4176@x*)) (kd4179@lab* (map kd2e5e@gen-label kd4176@x*))) (values kd4178@lex* (kd3111@chi-internal (kd2ebe@add-subst (kd2e92@make-full-rib kd4176@x* kd4179@lab*) kd416a@body*) (kd306b@add-lexicals kd4179@lab* kd4178@lex* kd416b@r) kd416c@mr))))) kd4174@ls/false) (let ((kd417c@t kd4172@t)) (let ((kd417e@ls/false (kd30d9@syntax-dispatch kd417c@t '#(each+ any () any)))) (if kd417e@ls/false (apply (lambda (kd4180@x* kd4181@x) (begin (kd30ff@verify-formals kd4169@fmls kd4168@stx) (let ((kd4184@lex* (map kd2e5a@gen-lexical kd4180@x*)) (kd4185@lab* (map kd2e5e@gen-label kd4180@x*)) (kd4186@lex (kd2e5a@gen-lexical kd4181@x)) (kd4187@lab (kd2e5e@gen-label kd4181@x))) (values (append kd4184@lex* kd4186@lex) (kd3111@chi-internal (kd2ebe@add-subst (kd2e92@make-full-rib (cons kd4181@x kd4180@x*) (cons kd4187@lab kd4185@lab*)) kd416a@body*) (kd306b@add-lexicals (cons kd4187@lab kd4185@lab*) (cons kd4186@lex kd4184@lex*) kd416b@r) kd416c@mr))))) kd417e@ls/false) (let ((kd418c@t kd417c@t)) (let ((kd418e@ls/false (kd30d9@syntax-dispatch kd418c@t '_))) (if kd418e@ls/false (apply (lambda () (kd31b9@syntax-violation '#f '"invalid syntax" kd4169@fmls)) kd418e@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd418c@t)))))))))))) (set! kd4bc3@kd3101@chi-lambda-clause kd3101@chi-lambda-clause) (set! kd3103@chi-lambda-clause* (lambda (kd4190@stx kd4191@fmls* kd4192@body** kd4193@r kd4194@mr) (if (null? kd4191@fmls*) (values '() '()) (call-with-values (lambda () (kd3101@chi-lambda-clause kd4190@stx (car kd4191@fmls*) (car kd4192@body**) kd4193@r kd4194@mr)) (lambda (kd419e@kd419b kd419f@kd419d) (let ((kd41a2@b kd419f@kd419d) (kd41a3@a kd419e@kd419b)) (call-with-values (lambda () (kd3103@chi-lambda-clause* kd4190@stx (cdr kd4191@fmls*) (cdr kd4192@body**) kd4193@r kd4194@mr)) (lambda (kd41aa@kd41a7 kd41ab@kd41a9) (let ((kd41ae@b* kd41ab@kd41a9) (kd41af@a* kd41aa@kd41a7)) (values (cons kd41a3@a kd41af@a*) (cons kd41a2@b kd41ae@b*))))))))))) (set! kd4bc4@kd3103@chi-lambda-clause* kd3103@chi-lambda-clause*) (set! kd3105@chi-defun (lambda (kd41b2@x kd41b3@r kd41b4@mr) (let ((kd41b8@fmls (car kd41b2@x)) (kd41b9@body* (cdr kd41b2@x))) (call-with-values (lambda () (kd3101@chi-lambda-clause kd41b8@fmls kd41b8@fmls kd41b9@body* kd41b3@r kd41b4@mr)) (lambda (kd41c0@kd41bd kd41c1@kd41bf) (let ((kd41c4@body kd41c1@kd41bf) (kd41c5@fmls kd41c0@kd41bd)) (kd2e35@kd2d61@build-lambda '#f kd41c5@fmls kd41c4@body))))))) (set! kd4bc5@kd3105@chi-defun kd3105@chi-defun) (set! kd3107@chi-rhs (lambda (kd41c8@rhs kd41c9@r kd41ca@mr) (let ((kd41ce@t (car kd41c8@rhs))) (if (memv kd41ce@t '(defun)) (kd3105@chi-defun (cdr kd41c8@rhs) kd41c9@r kd41ca@mr) (if (memv kd41ce@t '(expr)) (let ((kd41d0@expr (cdr kd41c8@rhs))) (kd30fb@chi-expr kd41d0@expr kd41c9@r kd41ca@mr)) (if (memv kd41ce@t '(top-expr)) (let ((kd41d2@expr (cdr kd41c8@rhs))) (kd2e37@kd2d91@build-sequence '#f (list (kd30fb@chi-expr kd41d2@expr kd41c9@r kd41ca@mr) (kd2e38@kd2d93@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" kd41c8@rhs))))))) (set! kd4bc6@kd3107@chi-rhs kd3107@chi-rhs) (set! kd3109@expand-interaction-rhs*/init* (lambda (kd41d4@lhs* kd41d5@rhs* kd41d6@init* kd41d7@r kd41d8@mr) (let kd41e2@f ((kd41de@lhs* kd41d4@lhs*) (kd41df@rhs* kd41d5@rhs*)) (if (null? kd41de@lhs*) (map (lambda (kd41e4@x) (kd30fb@chi-expr kd41e4@x kd41d7@r kd41d8@mr)) kd41d6@init*) (let ((kd41e6@lhs (car kd41de@lhs*)) (kd41e7@rhs (car kd41df@rhs*))) (let ((kd41ea@t (car kd41e7@rhs))) (if (memv kd41ea@t '(defun)) (let ((kd41ec@rhs (kd3105@chi-defun (cdr kd41e7@rhs) kd41d7@r kd41d8@mr))) (cons (list 'set! kd41e6@lhs kd41ec@rhs) (kd41e2@f (cdr kd41de@lhs*) (cdr kd41df@rhs*)))) (if (memv kd41ea@t '(expr)) (let ((kd41ee@rhs (kd30fb@chi-expr (cdr kd41e7@rhs) kd41d7@r kd41d8@mr))) (cons (list 'set! kd41e6@lhs kd41ee@rhs) (kd41e2@f (cdr kd41de@lhs*) (cdr kd41df@rhs*)))) (if (memv kd41ea@t '(top-expr)) (let ((kd41f0@e (kd30fb@chi-expr (cdr kd41e7@rhs) kd41d7@r kd41d8@mr))) (cons kd41f0@e (kd41e2@f (cdr kd41de@lhs*) (cdr kd41df@rhs*)))) (error 'expand-interaction '"invallid" kd41e7@rhs)))))))))) (set! kd4bc7@kd3109@expand-interaction-rhs*/init* kd3109@expand-interaction-rhs*/init*) (set! kd310b@chi-rhs* (lambda (kd41f2@rhs* kd41f3@r kd41f4@mr) (let kd41fa@f ((kd41f8@ls kd41f2@rhs*)) (if (null? kd41f8@ls) '() (let ((kd41fc@a (kd3107@chi-rhs (car kd41f8@ls) kd41f3@r kd41f4@mr))) (cons kd41fc@a (kd41fa@f (cdr kd41f8@ls)))))))) (set! kd4bc8@kd310b@chi-rhs* kd310b@chi-rhs*) (set! kd310d@find-bound=? (lambda (kd41fe@x kd41ff@lhs* kd4200@rhs*) (if (null? kd41ff@lhs*) '#f (if (kd2ed6@bound-id=? kd41fe@x (car kd41ff@lhs*)) (car kd4200@rhs*) (kd310d@find-bound=? kd41fe@x (cdr kd41ff@lhs*) (cdr kd4200@rhs*)))))) (set! kd4bc9@kd310d@find-bound=? kd310d@find-bound=?) (set! kd310f@find-dups (lambda (kd4204@ls) (let kd420a@f ((kd4206@ls kd4204@ls) (kd4207@dups '())) (if (null? kd4206@ls) kd4207@dups (let ((kd420c@t (kd310d@find-bound=? (car kd4206@ls) (cdr kd4206@ls) (cdr kd4206@ls)))) (if kd420c@t ((lambda (kd420e@x) (kd420a@f (cdr kd4206@ls) (cons (list (car kd4206@ls) kd420e@x) kd4207@dups))) kd420c@t) (kd420a@f (cdr kd4206@ls) kd4207@dups))))))) (set! kd4bca@kd310f@find-dups kd310f@find-dups) (set! kd3111@chi-internal (lambda (kd4210@e* kd4211@r kd4212@mr) (let ((kd4216@rib (kd2e86@make-empty-rib))) (call-with-values (lambda () (kd3131@chi-body* (map (lambda (kd4228@x) (kd2ebe@add-subst kd4216@rib kd4228@x)) (kd2ed0@syntax->list kd4210@e*)) kd4211@r kd4212@mr '() '() '() '() '() kd4216@rib '#f)) (lambda (kd422a@kd4219 kd422b@kd421b kd422c@kd421d kd422d@kd421f kd422e@kd4221 kd422f@kd4223 kd4230@kd4225 kd4231@kd4227) (let ((kd423a@_exp* kd4231@kd4227) (kd423b@kwd* kd4230@kd4225) (kd423c@mod** kd422f@kd4223) (kd423d@rhs* kd422e@kd4221) (kd423e@lex* kd422d@kd421f) (kd423f@mr kd422c@kd421d) (kd4240@r kd422b@kd421b) (kd4241@e* kd422a@kd4219)) (begin (if (null? kd4241@e*) (kd31b9@syntax-violation '#f '"no expression in body" kd4241@e*) (void)) (let ((kd424a@init* (kd30f7@chi-expr* (append (apply append (reverse kd423c@mod**)) kd4241@e*) kd4240@r kd423f@mr))) (let ((kd424c@rhs* (kd310b@chi-rhs* kd423d@rhs* kd4240@r kd423f@mr))) (kd2e3c@kd2d9b@build-letrec* '#f (reverse kd423e@lex*) (reverse kd424c@rhs*) (kd2e37@kd2d91@build-sequence '#f kd424a@init*))))))))))) (set! kd4bcb@kd3111@chi-internal kd3111@chi-internal) (set! kd3113@parse-module (lambda (kd424e@e) (let ((kd4250@t kd424e@e)) (let ((kd4252@ls/false (kd30d9@syntax-dispatch kd4250@t '(_ each-any . each-any)))) (if kd4252@ls/false (apply (lambda (kd4254@export* kd4255@b*) (begin (if (not (for-all kd2ed2@id? kd4254@export*)) (kd31b9@syntax-violation '#f '"module exports must be identifiers" kd424e@e) (void)) (values '#f (list->vector kd4254@export*) kd4255@b*))) kd4252@ls/false) (let ((kd4258@t kd4250@t)) (let ((kd425a@ls/false (kd30d9@syntax-dispatch kd4258@t '(_ any each-any . each-any)))) (if kd425a@ls/false (apply (lambda (kd425c@name kd425d@export* kd425e@b*) (begin (if (not (kd2ed2@id? kd425c@name)) (kd31b9@syntax-violation '#f '"module name must be an identifier" kd424e@e) (void)) (if (not (for-all kd2ed2@id? kd425d@export*)) (kd31b9@syntax-violation '#f '"module exports must be identifiers" kd424e@e) (void)) (values kd425c@name (list->vector kd425d@export*) kd425e@b*))) kd425a@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd4258@t))))))))) (set! kd4bcc@kd3113@parse-module kd3113@parse-module) (set! kd311d@module-interface? (lambda (kd4262@x) (and (simple-struct? kd4262@x) (eq? (simple-struct-name kd4262@x) 'module-interface)))) (set! kd4bcd@kd311d@module-interface? kd311d@module-interface?) (set! kd311f@module-interface-first-mark (lambda (kd4264@x) (simple-struct-ref kd4264@x '0))) (set! kd4bce@kd311f@module-interface-first-mark kd311f@module-interface-first-mark) (set! kd3121@set-module-interface-first-mark! (lambda (kd4266@x kd4267@val) (simple-struct-set! kd4266@x '0 kd4267@val))) (set! kd4bcf@kd3121@set-module-interface-first-mark! kd3121@set-module-interface-first-mark!) (set! kd3123@module-interface-exp-id-vec (lambda (kd426a@x) (simple-struct-ref kd426a@x '1))) (set! kd4bd0@kd3123@module-interface-exp-id-vec kd3123@module-interface-exp-id-vec) (set! kd3125@set-module-interface-exp-id-vec! (lambda (kd426c@x kd426d@val) (simple-struct-set! kd426c@x '1 kd426d@val))) (set! kd4bd1@kd3125@set-module-interface-exp-id-vec! kd3125@set-module-interface-exp-id-vec!) (set! kd3127@module-interface-exp-lab-vec (lambda (kd4270@x) (simple-struct-ref kd4270@x '2))) (set! kd4bd2@kd3127@module-interface-exp-lab-vec kd3127@module-interface-exp-lab-vec) (set! kd3129@set-module-interface-exp-lab-vec! (lambda (kd4272@x kd4273@val) (simple-struct-set! kd4272@x '2 kd4273@val))) (set! kd4bd3@kd3129@set-module-interface-exp-lab-vec! kd3129@set-module-interface-exp-lab-vec!) (set! kd312b@dummy '3) (set! kd4bd4@kd312b@dummy kd312b@dummy) (set! kd312d@module-interface-exp-id* (lambda (kd4276@iface kd4277@id) (let ((kd427b@diff-marks '#f)) (begin (set! kd427b@diff-marks (lambda (kd4282@ls kd4283@x) (begin (if (null? kd4282@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((kd4286@a (car kd4282@ls))) (if (eq? kd4286@a kd4283@x) '() (cons kd4286@a (kd427b@diff-marks (cdr kd4282@ls) kd4283@x))))))) (let ((kd427c@diff (kd427b@diff-marks (kd2ea4@stx-mark* kd4277@id) (kd311f@module-interface-first-mark kd4276@iface))) (kd427d@id-vec (kd3123@module-interface-exp-id-vec kd4276@iface))) (if (null? kd427c@diff) kd427d@id-vec (vector-map (lambda (kd4280@x) (make-simple-struct 'stx '5 (list (kd2ea0@stx-expr kd4280@x) (append kd427c@diff (kd2ea4@stx-mark* kd4280@x)) '() '()))) kd427d@id-vec))))))) (set! kd4bd5@kd312d@module-interface-exp-id* kd312d@module-interface-exp-id*) (set! kd312f@chi-internal-module (lambda (kd4288@e kd4289@r kd428a@mr kd428b@lex* kd428c@rhs* kd428d@mod** kd428e@kwd*) (call-with-values (lambda () (kd3113@parse-module kd4288@e)) (lambda (kd429c@kd4297 kd429d@kd4299 kd429e@kd429b) (let ((kd42a2@e* kd429e@kd429b) (kd42a3@exp-id* kd429d@kd4299) (kd42a4@name kd429c@kd4297)) (let ((kd42a8@rib (kd2e86@make-empty-rib))) (let ((kd42aa@e* (map (lambda (kd42ac@x) (kd2ebe@add-subst kd42a8@rib kd42ac@x)) (kd2ed0@syntax->list kd42a2@e*)))) (call-with-values (lambda () (kd3131@chi-body* kd42aa@e* kd4289@r kd428a@mr kd428b@lex* kd428c@rhs* kd428d@mod** kd428e@kwd* '() kd42a8@rib '#f)) (lambda (kd42be@kd42af kd42bf@kd42b1 kd42c0@kd42b3 kd42c1@kd42b5 kd42c2@kd42b7 kd42c3@kd42b9 kd42c4@kd42bb kd42c5@kd42bd) (let ((kd42ce@_exp* kd42c5@kd42bd) (kd42cf@kwd* kd42c4@kd42bb) (kd42d0@mod** kd42c3@kd42b9) (kd42d1@rhs* kd42c2@kd42b7) (kd42d2@lex* kd42c1@kd42b5) (kd42d3@mr kd42c0@kd42b3) (kd42d4@r kd42bf@kd42b1) (kd42d5@e* kd42be@kd42af)) (let ((kd42de@exp-lab* (vector-map (lambda (kd42e2@x) (or (kd2ee8@id->label (make-simple-struct 'stx '5 (list (kd2ed4@id->sym kd42e2@x) (kd2ea4@stx-mark* kd42e2@x) (list kd42a8@rib) '()))) (kd31b9@syntax-violation '#f '"cannot find module export" kd42e2@x))) kd42a3@exp-id*)) (kd42df@mod** (cons kd42d5@e* kd42d0@mod**))) (if (not kd42a4@name) (values kd42d2@lex* kd42d1@rhs* kd42a3@exp-id* kd42de@exp-lab* kd42d4@r kd42d3@mr kd42df@mod** kd42cf@kwd*) (let ((kd42e4@lab (kd2e5e@gen-label 'module)) (kd42e5@iface (make-simple-struct 'module-interface '4 (list (car (kd2ea4@stx-mark* kd42a4@name)) (vector-map (lambda (kd42e8@x) (make-simple-struct 'stx '5 (list (kd2ea0@stx-expr kd42e8@x) (kd2ea4@stx-mark* kd42e8@x) '() '()))) kd42a3@exp-id*) kd42de@exp-lab*)))) (values kd42d2@lex* kd42d1@rhs* (vector kd42a4@name) (vector kd42e4@lab) (cons (cons kd42e4@lab (cons '$module kd42e5@iface)) kd42d4@r) (cons (cons kd42e4@lab (cons '$module kd42e5@iface)) kd42d3@mr) kd42df@mod** kd42cf@kwd*)))))))))))))) (set! kd4bd6@kd312f@chi-internal-module kd312f@chi-internal-module) (set! kd3131@chi-body* (lambda (kd42ea@e* kd42eb@r kd42ec@mr kd42ed@lex* kd42ee@rhs* kd42ef@mod** kd42f0@kwd* kd42f1@exp* kd42f2@rib kd42f3@top?) (if (null? kd42ea@e*) (values kd42ea@e* kd42eb@r kd42ec@mr kd42ed@lex* kd42ee@rhs* kd42ef@mod** kd42f0@kwd* kd42f1@exp*) (let ((kd42fe@e (car kd42ea@e*))) (call-with-values (lambda () (kd2ef4@syntax-type kd42fe@e kd42eb@r)) (lambda (kd4306@kd4301 kd4307@kd4303 kd4308@kd4305) (let ((kd430c@kwd kd4308@kd4305) (kd430d@value kd4307@kd4303) (kd430e@type kd4306@kd4301)) (let ((kd4312@kwd* (if (kd2ed2@id? kd430c@kwd) (cons kd430c@kwd kd42f0@kwd*) kd42f0@kwd*))) (let ((kd4314@t kd430e@type)) (if (memv kd4314@t '(define)) (call-with-values (lambda () (kd305b@parse-define kd42fe@e)) (lambda (kd431a@kd4317 kd431b@kd4319) (let ((kd431e@rhs kd431b@kd4319) (kd431f@id kd431a@kd4317)) (begin (if (kd2ede@bound-id-member? kd431f@id kd4312@kwd*) (kd31b9@syntax-violation '#f '"cannot redefine keyword" kd42fe@e) (void)) (call-with-values (lambda () (kd2e62@gen-define-label+loc kd431f@id kd42f2@rib)) (lambda (kd4326@kd4323 kd4327@kd4325) (let ((kd432a@lex kd4327@kd4325) (kd432b@lab kd4326@kd4323)) (begin (kd2e88@extend-rib! kd42f2@rib kd431f@id kd432b@lab) (kd3131@chi-body* (cdr kd42ea@e*) (kd3069@add-lexical kd432b@lab kd432a@lex kd42eb@r) kd42ec@mr (cons kd432a@lex kd42ed@lex*) (cons kd431e@rhs kd42ee@rhs*) kd42ef@mod** kd4312@kwd* kd42f1@exp* kd42f2@rib kd42f3@top?))))))))) (if (memv kd4314@t '(define-syntax)) (call-with-values (lambda () (kd305d@parse-define-syntax kd42fe@e)) (lambda (kd4332@kd432f kd4333@kd4331) (let ((kd4336@rhs kd4333@kd4331) (kd4337@id kd4332@kd432f)) (begin (if (kd2ede@bound-id-member? kd4337@id kd4312@kwd*) (kd31b9@syntax-violation '#f '"cannot redefine keyword" kd42fe@e) (void)) (let ((kd433a@lab (kd2e64@gen-define-label kd4337@id kd42f2@rib)) (kd433b@expanded-rhs (kd3133@expand-transformer kd4336@rhs kd42ec@mr))) (begin (kd2e88@extend-rib! kd42f2@rib kd4337@id kd433a@lab) (let ((kd433e@b (kd2f0a@make-eval-transformer kd433b@expanded-rhs))) (kd3131@chi-body* (cdr kd42ea@e*) (cons (cons kd433a@lab kd433e@b) kd42eb@r) (cons (cons kd433a@lab kd433e@b) kd42ec@mr) kd42ed@lex* kd42ee@rhs* kd42ef@mod** kd4312@kwd* kd42f1@exp* kd42f2@rib kd42f3@top?)))))))) (if (memv kd4314@t '(let-syntax letrec-syntax)) (let ((kd4340@t kd42fe@e)) (let ((kd4342@ls/false (kd30d9@syntax-dispatch kd4340@t '(_ #(each (any any)) . each-any)))) (if (and kd4342@ls/false (apply (lambda (kd4344@xlhs* kd4345@xrhs* kd4346@xbody*) (if (not (kd2eda@valid-bound-ids? kd4344@xlhs*)) (kd31b9@syntax-violation '#f '"invalid identifiers" kd42fe@e) (void))) kd4342@ls/false)) (apply (lambda (kd434a@xlhs* kd434b@xrhs* kd434c@xbody*) (let ((kd4350@xlab* (map kd2e5e@gen-label kd434a@xlhs*))) (let ((kd4352@xrib (kd2e92@make-full-rib kd434a@xlhs* kd4350@xlab*))) (let ((kd4354@xb* (map (lambda (kd4356@x) (kd2f0a@make-eval-transformer (kd3133@expand-transformer (if (eq? kd430e@type 'let-syntax) kd4356@x (kd2ebe@add-subst kd4352@xrib kd4356@x)) kd42ec@mr))) kd434b@xrhs*))) (kd3131@chi-body* (append (map (lambda (kd4358@x) (kd2ebe@add-subst kd4352@xrib kd4358@x)) kd434c@xbody*) (cdr kd42ea@e*)) (append (map cons kd4350@xlab* kd4354@xb*) kd42eb@r) (append (map cons kd4350@xlab* kd4354@xb*) kd42ec@mr) kd42ed@lex* kd42ee@rhs* kd42ef@mod** kd4312@kwd* kd42f1@exp* kd42f2@rib kd42f3@top?))))) kd4342@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd4340@t)))) (if (memv kd4314@t '(begin)) (let ((kd435a@t kd42fe@e)) (let ((kd435c@ls/false (kd30d9@syntax-dispatch kd435a@t '(_ . each-any)))) (if kd435c@ls/false (apply (lambda (kd435e@x*) (kd3131@chi-body* (append kd435e@x* (cdr kd42ea@e*)) kd42eb@r kd42ec@mr kd42ed@lex* kd42ee@rhs* kd42ef@mod** kd4312@kwd* kd42f1@exp* kd42f2@rib kd42f3@top?)) kd435c@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd435a@t)))) (if (memv kd4314@t '(global-macro global-macro!)) (kd3131@chi-body* (cons (kd2ebe@add-subst kd42f2@rib (kd30f5@chi-global-macro kd430d@value kd42fe@e)) (cdr kd42ea@e*)) kd42eb@r kd42ec@mr kd42ed@lex* kd42ee@rhs* kd42ef@mod** kd4312@kwd* kd42f1@exp* kd42f2@rib kd42f3@top?) (if (memv kd4314@t '(local-macro local-macro!)) (kd3131@chi-body* (cons (kd2ebe@add-subst kd42f2@rib (kd30f3@chi-local-macro kd430d@value kd42fe@e)) (cdr kd42ea@e*)) kd42eb@r kd42ec@mr kd42ed@lex* kd42ee@rhs* kd42ef@mod** kd4312@kwd* kd42f1@exp* kd42f2@rib kd42f3@top?) (if (memv kd4314@t '(macro macro!)) (kd3131@chi-body* (cons (kd2ebe@add-subst kd42f2@rib (kd30f1@chi-macro kd430d@value kd42fe@e)) (cdr kd42ea@e*)) kd42eb@r kd42ec@mr kd42ed@lex* kd42ee@rhs* kd42ef@mod** kd4312@kwd* kd42f1@exp* kd42f2@rib kd42f3@top?) (if (memv kd4314@t '(module)) (call-with-values (lambda () (kd312f@chi-internal-module kd42fe@e kd42eb@r kd42ec@mr kd42ed@lex* kd42ee@rhs* kd42ef@mod** kd4312@kwd*)) (lambda (kd4370@kd4361 kd4371@kd4363 kd4372@kd4365 kd4373@kd4367 kd4374@kd4369 kd4375@kd436b kd4376@kd436d kd4377@kd436f) (let ((kd4380@kwd* kd4377@kd436f) (kd4381@mod** kd4376@kd436d) (kd4382@mr kd4375@kd436b) (kd4383@r kd4374@kd4369) (kd4384@m-exp-lab* kd4373@kd4367) (kd4385@m-exp-id* kd4372@kd4365) (kd4386@rhs* kd4371@kd4363) (kd4387@lex* kd4370@kd4361)) (begin (vector-for-each (lambda (kd4390@id kd4391@lab) (kd2e88@extend-rib! kd42f2@rib kd4390@id kd4391@lab)) kd4385@m-exp-id* kd4384@m-exp-lab*) (kd3131@chi-body* (cdr kd42ea@e*) kd4383@r kd4382@mr kd4387@lex* kd4386@rhs* kd4381@mod** kd4380@kwd* kd42f1@exp* kd42f2@rib kd42f3@top?))))) (if (memv kd4314@t '(library)) (begin (kd319b@library-expander (kd2ee6@stx->datum kd42fe@e)) (kd3131@chi-body* (cdr kd42ea@e*) kd42eb@r kd42ec@mr kd42ed@lex* kd42ee@rhs* kd42ef@mod** kd4312@kwd* kd42f1@exp* kd42f2@rib kd42f3@top?)) (if (memv kd4314@t '(export)) (let ((kd4394@t kd42fe@e)) (let ((kd4396@ls/false (kd30d9@syntax-dispatch kd4394@t '(_ . each-any)))) (if kd4396@ls/false (apply (lambda (kd4398@exp-decl*) (kd3131@chi-body* (cdr kd42ea@e*) kd42eb@r kd42ec@mr kd42ed@lex* kd42ee@rhs* kd42ef@mod** kd4312@kwd* (append kd4398@exp-decl* kd42f1@exp*) kd42f2@rib kd42f3@top?)) kd4396@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd4394@t)))) (if (memv kd4314@t '(import)) (let ((kd439b@module-import? '#f) (kd439d@module-import '#f) (kd439f@library-import '#f)) (begin (set! kd439b@module-import? (lambda (kd43ee@e) (let ((kd43f0@t kd43ee@e)) (let ((kd43f2@ls/false (kd30d9@syntax-dispatch kd43f0@t '(_ any)))) (if (and kd43f2@ls/false (apply (lambda (kd43f4@id) (kd2ed2@id? kd43f4@id)) kd43f2@ls/false)) (apply (lambda (kd43f6@id) '#t) kd43f2@ls/false) (let ((kd43f8@t kd43f0@t)) (let ((kd43fa@ls/false (kd30d9@syntax-dispatch kd43f8@t '(_ . each-any)))) (if kd43fa@ls/false (apply (lambda (kd43fc@imp*) '#f) kd43fa@ls/false) (let ((kd43fe@t kd43f8@t)) (let ((kd4400@ls/false (kd30d9@syntax-dispatch kd43fe@t '_))) (if kd4400@ls/false (apply (lambda () (kd31b9@syntax-violation '#f '"malformed import form" kd43ee@e)) kd4400@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd43fe@t)))))))))))) (set! kd439d@module-import (lambda (kd43cc@e kd43cd@r) (let ((kd43d0@t kd43cc@e)) (let ((kd43d2@ls/false (kd30d9@syntax-dispatch kd43d0@t '(_ any)))) (if (and kd43d2@ls/false (apply (lambda (kd43d4@id) (kd2ed2@id? kd43d4@id)) kd43d2@ls/false)) (apply (lambda (kd43d6@id) (call-with-values (lambda () (kd2ef4@syntax-type kd43d6@id kd43cd@r)) (lambda (kd43de@kd43d9 kd43df@kd43db kd43e0@kd43dd) (let ((kd43e4@kwd kd43e0@kd43dd) (kd43e5@value kd43df@kd43db) (kd43e6@type kd43de@kd43d9)) (let ((kd43ea@t kd43e6@type)) (if (memv kd43ea@t '($module)) (let ((kd43ec@iface kd43e5@value)) (values (kd312d@module-interface-exp-id* kd43ec@iface kd43d6@id) (kd3127@module-interface-exp-lab-vec kd43ec@iface))) (kd31b9@syntax-violation '#f '"invalid import" kd43cc@e))))))) kd43d2@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd43d0@t)))))) (set! kd439f@library-import (lambda (kd43b0@e) (let ((kd43b2@t kd43b0@e)) (let ((kd43b4@ls/false (kd30d9@syntax-dispatch kd43b2@t '(any . each-any)))) (if kd43b4@ls/false (apply (lambda (kd43b6@ctxt kd43b7@imp*) (call-with-values (lambda () (kd313b@parse-import-spec* (kd31bf@syntax->datum kd43b7@imp*))) (lambda (kd43be@kd43bb kd43bf@kd43bd) (let ((kd43c2@subst-labels kd43bf@kd43bd) (kd43c3@subst-names kd43be@kd43bb)) (values (vector-map (lambda (kd43c6@name) (kd2eb2@datum->stx kd43b6@ctxt kd43c6@name)) kd43c3@subst-names) kd43c2@subst-labels))))) kd43b4@ls/false) (let ((kd43c8@t kd43b2@t)) (let ((kd43ca@ls/false (kd30d9@syntax-dispatch kd43c8@t '_))) (if kd43ca@ls/false (apply (lambda () (kd31b9@syntax-violation '#f '"invalid import form" kd43b0@e)) kd43ca@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd43c8@t))))))))) (begin (call-with-values (lambda () (if (kd439b@module-import? kd42fe@e) (kd439d@module-import kd42fe@e kd42eb@r) (kd439f@library-import kd42fe@e))) (lambda (kd43a4@kd43a1 kd43a5@kd43a3) (let ((kd43a8@lab* kd43a5@kd43a3) (kd43a9@id* kd43a4@kd43a1)) (vector-for-each (lambda (kd43ac@id kd43ad@lab) (kd2e88@extend-rib! kd42f2@rib kd43ac@id kd43ad@lab)) kd43a9@id* kd43a8@lab*)))) (kd3131@chi-body* (cdr kd42ea@e*) kd42eb@r kd42ec@mr kd42ed@lex* kd42ee@rhs* kd42ef@mod** kd4312@kwd* kd42f1@exp* kd42f2@rib kd42f3@top?)))) (if kd42f3@top? (kd3131@chi-body* (cdr kd42ea@e*) kd42eb@r kd42ec@mr (cons (kd2e5a@gen-lexical 'dummy) kd42ed@lex*) (cons (cons 'top-expr kd42fe@e) kd42ee@rhs*) kd42ef@mod** kd4312@kwd* kd42f1@exp* kd42f2@rib kd42f3@top?) (values kd42ea@e* kd42eb@r kd42ec@mr kd42ed@lex* kd42ee@rhs* kd42ef@mod** kd4312@kwd* kd42f1@exp*)))))))))))))))))))))) (set! kd4bd7@kd3131@chi-body* kd3131@chi-body*) (set! kd3133@expand-transformer (lambda (kd4402@expr kd4403@r) (let ((kd4406@rtc (kd313f@make-collector))) (let ((kd4408@expanded-rhs (let ((kd4412@kd440b kd3141@inv-collector) (kd4413@kd440d kd3143@vis-collector) (kd4414@kd440f kd4406@rtc) (kd4415@kd4411 (lambda (kd441a@x) (values)))) (let ((kd441c@swap (lambda () (begin (let ((kd441e@t (kd4412@kd440b))) (begin (kd4412@kd440b kd4414@kd440f) (set! kd4414@kd440f kd441e@t))) (let ((kd4420@t (kd4413@kd440d))) (begin (kd4413@kd440d kd4415@kd4411) (set! kd4415@kd4411 kd4420@t))))))) (dynamic-wind kd441c@swap (lambda () (kd30fb@chi-expr kd4402@expr kd4403@r kd4403@r)) kd441c@swap))))) (begin (for-each (let ((kd4422@mark-visit (kd3143@vis-collector))) (lambda (kd4424@x) (begin (kd2ce7@kd2b31@invoke-library kd4424@x) (kd4422@mark-visit kd4424@x)))) (kd4406@rtc)) kd4408@expanded-rhs))))) (set! kd4bd8@kd3133@expand-transformer kd3133@expand-transformer) (set! kd3135@parse-exports (lambda (kd4426@exp*) (let kd442e@f ((kd4428@exp* kd4426@exp*) (kd4429@int* '()) (kd442a@ext* '())) (if (null? kd4428@exp*) (begin (if (not (kd2eda@valid-bound-ids? kd442a@ext*)) (kd31b9@syntax-violation 'export '"invalid exports" (kd310f@find-dups kd442a@ext*)) (void)) (values (map kd31bf@syntax->datum kd442a@ext*) kd4429@int*)) (let ((kd4430@t (car kd4428@exp*))) (let ((kd4432@ls/false (kd30d9@syntax-dispatch kd4430@t '(any . #(each (any any)))))) (if kd4432@ls/false (apply (lambda (kd4434@rename kd4435@i* kd4436@e*) (begin (if (not (and (eq? (kd31bf@syntax->datum kd4434@rename) 'rename) (for-all kd2ed2@id? kd4435@i*) (for-all kd2ed2@id? kd4436@e*))) (kd31b9@syntax-violation 'export '"invalid export specifier" (car kd4428@exp*)) (void)) (kd442e@f (cdr kd4428@exp*) (append kd4435@i* kd4429@int*) (append kd4436@e* kd442a@ext*)))) kd4432@ls/false) (let ((kd443a@t kd4430@t)) (let ((kd443c@ls/false (kd30d9@syntax-dispatch kd443a@t 'any))) (if kd443c@ls/false (apply (lambda (kd443e@ie) (begin (if (not (kd2ed2@id? kd443e@ie)) (kd31b9@syntax-violation 'export '"invalid export" kd443e@ie) (void)) (kd442e@f (cdr kd4428@exp*) (cons kd443e@ie kd4429@int*) (cons kd443e@ie kd442a@ext*)))) kd443c@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd443a@t))))))))))) (set! kd4bd9@kd3135@parse-exports kd3135@parse-exports) (set! kd3137@parse-library-name (lambda (kd4440@spec) (let ((kd4443@parse '#f)) (begin (set! kd4443@parse (lambda (kd4450@x) (let ((kd4452@t kd4450@x)) (let ((kd4454@ls/false (kd30d9@syntax-dispatch kd4452@t '(each-any)))) (if (and kd4454@ls/false (apply (lambda (kd4456@v*) (for-all (lambda (kd4458@x) (let ((kd445a@x (kd31bf@syntax->datum kd4458@x))) (and (integer? kd445a@x) (exact? kd445a@x)))) kd4456@v*)) kd4454@ls/false)) (apply (lambda (kd445c@v*) (values '() (map kd31bf@syntax->datum kd445c@v*))) kd4454@ls/false) (let ((kd445e@t kd4452@t)) (let ((kd4460@ls/false (kd30d9@syntax-dispatch kd445e@t '(any . any)))) (if (and kd4460@ls/false (apply (lambda (kd4462@x kd4463@rest) (symbol? (kd31bf@syntax->datum kd4462@x))) kd4460@ls/false)) (apply (lambda (kd4466@x kd4467@rest) (call-with-values (lambda () (kd4443@parse kd4467@rest)) (lambda (kd446e@kd446b kd446f@kd446d) (let ((kd4472@v* kd446f@kd446d) (kd4473@x* kd446e@kd446b)) (values (cons (kd31bf@syntax->datum kd4466@x) kd4473@x*) kd4472@v*))))) kd4460@ls/false) (let ((kd4476@t kd445e@t)) (let ((kd4478@ls/false (kd30d9@syntax-dispatch kd4476@t '()))) (if kd4478@ls/false (apply (lambda () (values '() '())) kd4478@ls/false) (let ((kd447a@t kd4476@t)) (let ((kd447c@ls/false (kd30d9@syntax-dispatch kd447a@t '_))) (if kd447c@ls/false (apply (lambda () (kd31b9@syntax-violation '#f '"invalid library name" kd4440@spec)) kd447c@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd447a@t))))))))))))))) (call-with-values (lambda () (kd4443@parse kd4440@spec)) (lambda (kd4448@kd4445 kd4449@kd4447) (let ((kd444c@ver* kd4449@kd4447) (kd444d@name* kd4448@kd4445)) (begin (if (null? kd444d@name*) (kd31b9@syntax-violation '#f '"empty library name" kd4440@spec) (void)) (values kd444d@name* kd444c@ver*))))))))) (set! kd4bda@kd3137@parse-library-name kd3137@parse-library-name) (set! kd3139@parse-library (lambda (kd447e@e) (let ((kd4480@t kd447e@e)) (let ((kd4482@ls/false (kd30d9@syntax-dispatch kd4480@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and kd4482@ls/false (apply (lambda (kd4484@library kd4485@name* kd4486@export kd4487@exp* kd4488@import kd4489@imp* kd448a@b*) (and (eq? (kd31bf@syntax->datum kd4486@export) 'export) (eq? (kd31bf@syntax->datum kd4488@import) 'import) (eq? (kd31bf@syntax->datum kd4484@library) 'library))) kd4482@ls/false)) (apply (lambda (kd4492@library kd4493@name* kd4494@export kd4495@exp* kd4496@import kd4497@imp* kd4498@b*) (values kd4493@name* kd4495@exp* kd4497@imp* kd4498@b*)) kd4482@ls/false) (let ((kd44a0@t kd4480@t)) (let ((kd44a2@ls/false (kd30d9@syntax-dispatch kd44a0@t '_))) (if kd44a2@ls/false (apply (lambda () (kd31b9@syntax-violation '#f '"malformed library" kd447e@e)) kd44a2@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd44a0@t))))))))) (set! kd4bdb@kd3139@parse-library kd3139@parse-library) (set! kd313b@parse-import-spec* (let ((kd44a5@idsyn? '#f) (kd44a7@dup-error '#f) (kd44a9@merge-substs '#f) (kd44ab@exclude* '#f) (kd44ad@find* '#f) (kd44af@rem* '#f) (kd44b1@remove-dups '#f) (kd44b3@parse-library-name '#f) (kd44b5@import-library '#f) (kd44b7@get-import '#f) (kd44b9@add-imports! '#f)) (begin (set! kd44a5@idsyn? (lambda (kd46ae@x) (symbol? (kd31bf@syntax->datum kd46ae@x)))) (set! kd44a7@dup-error (lambda (kd46ac@name) (kd31b9@syntax-violation 'import '"two imports with different bindings" kd46ac@name))) (set! kd44a9@merge-substs (lambda (kd469a@s kd469b@subst) (let ((kd469f@insert-to-subst '#f)) (begin (set! kd469f@insert-to-subst (lambda (kd46a0@a kd46a1@subst) (let ((kd46a4@name (car kd46a0@a)) (kd46a5@label (cdr kd46a0@a))) (let ((kd46a8@t (assq kd46a4@name kd46a1@subst))) (if kd46a8@t ((lambda (kd46aa@x) (if (eq? (cdr kd46aa@x) kd46a5@label) kd46a1@subst (kd44a7@dup-error kd46a4@name))) kd46a8@t) (cons kd46a0@a kd46a1@subst)))))) (if (null? kd469a@s) kd469b@subst (kd469f@insert-to-subst (car kd469a@s) (kd44a9@merge-substs (cdr kd469a@s) kd469b@subst))))))) (set! kd44ab@exclude* (lambda (kd466a@sym* kd466b@subst) (let ((kd466f@exclude '#f)) (begin (set! kd466f@exclude (lambda (kd4688@sym kd4689@subst) (if (null? kd4689@subst) (kd31b9@syntax-violation 'import '"cannot rename unbound identifier" kd4688@sym) (if (eq? kd4688@sym (caar kd4689@subst)) (values (cdar kd4689@subst) (cdr kd4689@subst)) (let ((kd468c@a (car kd4689@subst))) (call-with-values (lambda () (kd466f@exclude kd4688@sym (cdr kd4689@subst))) (lambda (kd4692@kd468f kd4693@kd4691) (let ((kd4696@subst kd4693@kd4691) (kd4697@old kd4692@kd468f)) (values kd4697@old (cons kd468c@a kd4696@subst)))))))))) (if (null? kd466a@sym*) (values '() kd466b@subst) (call-with-values (lambda () (kd466f@exclude (car kd466a@sym*) kd466b@subst)) (lambda (kd4674@kd4671 kd4675@kd4673) (let ((kd4678@subst kd4675@kd4673) (kd4679@old kd4674@kd4671)) (call-with-values (lambda () (kd44ab@exclude* (cdr kd466a@sym*) kd4678@subst)) (lambda (kd4680@kd467d kd4681@kd467f) (let ((kd4684@subst kd4681@kd467f) (kd4685@old* kd4680@kd467d)) (values (cons kd4679@old kd4685@old*) kd4684@subst)))))))))))) (set! kd44ad@find* (lambda (kd4662@sym* kd4663@subst) (map (lambda (kd4666@x) (let ((kd4668@t (assq kd4666@x kd4663@subst))) (if kd4668@t (cdr kd4668@t) (kd31b9@syntax-violation 'import '"cannot find identifier" kd4666@x)))) kd4662@sym*))) (set! kd44af@rem* (lambda (kd465a@sym* kd465b@subst) (let kd4660@f ((kd465e@subst kd465b@subst)) (if (null? kd465e@subst) '() (if (memq (caar kd465e@subst) kd465a@sym*) (kd4660@f (cdr kd465e@subst)) (cons (car kd465e@subst) (kd4660@f (cdr kd465e@subst)))))))) (set! kd44b1@remove-dups (lambda (kd4658@ls) (if (null? kd4658@ls) '() (if (memq (car kd4658@ls) (cdr kd4658@ls)) (kd44b1@remove-dups (cdr kd4658@ls)) (cons (car kd4658@ls) (kd44b1@remove-dups (cdr kd4658@ls))))))) (set! kd44b3@parse-library-name (lambda (kd4570@spec) (let ((kd4573@subversion? '#f) (kd4575@subversion-pred '#f) (kd4577@version-pred '#f)) (begin (set! kd4573@subversion? (lambda (kd4654@x) (let ((kd4656@x (kd31bf@syntax->datum kd4654@x))) (and (integer? kd4656@x) (exact? kd4656@x) (>= kd4656@x '0))))) (set! kd4575@subversion-pred (lambda (kd45f4@x*) (let ((kd45f6@t kd45f4@x*)) (let ((kd45f8@ls/false (kd30d9@syntax-dispatch kd45f6@t 'any))) (if (and kd45f8@ls/false (apply (lambda (kd45fa@n) (kd4573@subversion? kd45fa@n)) kd45f8@ls/false)) (apply (lambda (kd45fc@n) (lambda (kd45fe@x) (= kd45fe@x (kd31bf@syntax->datum kd45fc@n)))) kd45f8@ls/false) (let ((kd4600@t kd45f6@t)) (let ((kd4602@ls/false (kd30d9@syntax-dispatch kd4600@t '(any . each-any)))) (if (and kd4602@ls/false (apply (lambda (kd4604@p? kd4605@sub*) (eq? (kd31bf@syntax->datum kd4604@p?) 'and)) kd4602@ls/false)) (apply (lambda (kd4608@p? kd4609@sub*) (let ((kd460c@p* (map kd4575@subversion-pred kd4609@sub*))) (lambda (kd460e@x) (for-all (lambda (kd4610@p) (kd4610@p kd460e@x)) kd460c@p*)))) kd4602@ls/false) (let ((kd4612@t kd4600@t)) (let ((kd4614@ls/false (kd30d9@syntax-dispatch kd4612@t '(any . each-any)))) (if (and kd4614@ls/false (apply (lambda (kd4616@p? kd4617@sub*) (eq? (kd31bf@syntax->datum kd4616@p?) 'or)) kd4614@ls/false)) (apply (lambda (kd461a@p? kd461b@sub*) (let ((kd461e@p* (map kd4575@subversion-pred kd461b@sub*))) (lambda (kd4620@x) (exists (lambda (kd4622@p) (kd4622@p kd4620@x)) kd461e@p*)))) kd4614@ls/false) (let ((kd4624@t kd4612@t)) (let ((kd4626@ls/false (kd30d9@syntax-dispatch kd4624@t '(any any)))) (if (and kd4626@ls/false (apply (lambda (kd4628@p? kd4629@sub) (eq? (kd31bf@syntax->datum kd4628@p?) 'not)) kd4626@ls/false)) (apply (lambda (kd462c@p? kd462d@sub) (let ((kd4630@p (kd4575@subversion-pred kd462d@sub))) (lambda (kd4632@x) (not (kd4630@p kd4632@x))))) kd4626@ls/false) (let ((kd4634@t kd4624@t)) (let ((kd4636@ls/false (kd30d9@syntax-dispatch kd4634@t '(any any)))) (if (and kd4636@ls/false (apply (lambda (kd4638@p? kd4639@n) (and (eq? (kd31bf@syntax->datum kd4638@p?) '<=) (kd4573@subversion? kd4639@n))) kd4636@ls/false)) (apply (lambda (kd463c@p? kd463d@n) (lambda (kd4640@x) (<= kd4640@x (kd31bf@syntax->datum kd463d@n)))) kd4636@ls/false) (let ((kd4642@t kd4634@t)) (let ((kd4644@ls/false (kd30d9@syntax-dispatch kd4642@t '(any any)))) (if (and kd4644@ls/false (apply (lambda (kd4646@p? kd4647@n) (and (eq? (kd31bf@syntax->datum kd4646@p?) '>=) (kd4573@subversion? kd4647@n))) kd4644@ls/false)) (apply (lambda (kd464a@p? kd464b@n) (lambda (kd464e@x) (>= kd464e@x (kd31bf@syntax->datum kd464b@n)))) kd4644@ls/false) (let ((kd4650@t kd4642@t)) (let ((kd4652@ls/false (kd30d9@syntax-dispatch kd4650@t '_))) (if kd4652@ls/false (apply (lambda () (kd31b9@syntax-violation 'import '"invalid sub-version spec" kd4570@spec kd45f4@x*)) kd4652@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd4650@t)))))))))))))))))))))))) (set! kd4577@version-pred (lambda (kd45a4@x*) (let ((kd45a6@t kd45a4@x*)) (let ((kd45a8@ls/false (kd30d9@syntax-dispatch kd45a6@t '()))) (if kd45a8@ls/false (apply (lambda () (lambda (kd45aa@x) '#t)) kd45a8@ls/false) (let ((kd45ac@t kd45a6@t)) (let ((kd45ae@ls/false (kd30d9@syntax-dispatch kd45ac@t '(any . each-any)))) (if (and kd45ae@ls/false (apply (lambda (kd45b0@c kd45b1@ver*) (eq? (kd31bf@syntax->datum kd45b0@c) 'and)) kd45ae@ls/false)) (apply (lambda (kd45b4@c kd45b5@ver*) (let ((kd45b8@p* (map kd4577@version-pred kd45b5@ver*))) (lambda (kd45ba@x) (for-all (lambda (kd45bc@p) (kd45bc@p kd45ba@x)) kd45b8@p*)))) kd45ae@ls/false) (let ((kd45be@t kd45ac@t)) (let ((kd45c0@ls/false (kd30d9@syntax-dispatch kd45be@t '(any . each-any)))) (if (and kd45c0@ls/false (apply (lambda (kd45c2@c kd45c3@ver*) (eq? (kd31bf@syntax->datum kd45c2@c) 'or)) kd45c0@ls/false)) (apply (lambda (kd45c6@c kd45c7@ver*) (let ((kd45ca@p* (map kd4577@version-pred kd45c7@ver*))) (lambda (kd45cc@x) (exists (lambda (kd45ce@p) (kd45ce@p kd45cc@x)) kd45ca@p*)))) kd45c0@ls/false) (let ((kd45d0@t kd45be@t)) (let ((kd45d2@ls/false (kd30d9@syntax-dispatch kd45d0@t '(any any)))) (if (and kd45d2@ls/false (apply (lambda (kd45d4@c kd45d5@ver) (eq? (kd31bf@syntax->datum kd45d4@c) 'not)) kd45d2@ls/false)) (apply (lambda (kd45d8@c kd45d9@ver) (let ((kd45dc@p (kd4577@version-pred kd45d9@ver))) (lambda (kd45de@x) (not (kd45dc@p kd45de@x))))) kd45d2@ls/false) (let ((kd45e0@t kd45d0@t)) (let ((kd45e2@ls/false (kd30d9@syntax-dispatch kd45e0@t 'each-any))) (if kd45e2@ls/false (apply (lambda (kd45e4@sub*) (let ((kd45e6@p* (map kd4575@subversion-pred kd45e4@sub*))) (lambda (kd45e8@x) (let kd45ee@f ((kd45ea@p* kd45e6@p*) (kd45eb@x kd45e8@x)) (if (null? kd45ea@p*) '#t (if (null? kd45eb@x) '#f (and ((car kd45ea@p*) (car kd45eb@x)) (kd45ee@f (cdr kd45ea@p*) (cdr kd45eb@x))))))))) kd45e2@ls/false) (let ((kd45f0@t kd45e0@t)) (let ((kd45f2@ls/false (kd30d9@syntax-dispatch kd45f0@t '_))) (if kd45f2@ls/false (apply (lambda () (kd31b9@syntax-violation 'import '"invalid version spec" kd4570@spec kd45a4@x*)) kd45f2@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd45f0@t))))))))))))))))))))) (let kd457a@f ((kd4578@x kd4570@spec)) (let ((kd457c@t kd4578@x)) (let ((kd457e@ls/false (kd30d9@syntax-dispatch kd457c@t '(each-any)))) (if kd457e@ls/false (apply (lambda (kd4580@version-spec*) (values '() (kd4577@version-pred kd4580@version-spec*))) kd457e@ls/false) (let ((kd4582@t kd457c@t)) (let ((kd4584@ls/false (kd30d9@syntax-dispatch kd4582@t '(any . any)))) (if (and kd4584@ls/false (apply (lambda (kd4586@x kd4587@x*) (kd44a5@idsyn? kd4586@x)) kd4584@ls/false)) (apply (lambda (kd458a@x kd458b@x*) (call-with-values (lambda () (kd457a@f kd458b@x*)) (lambda (kd4592@kd458f kd4593@kd4591) (let ((kd4596@pred kd4593@kd4591) (kd4597@name kd4592@kd458f)) (values (cons (kd31bf@syntax->datum kd458a@x) kd4597@name) kd4596@pred))))) kd4584@ls/false) (let ((kd459a@t kd4582@t)) (let ((kd459c@ls/false (kd30d9@syntax-dispatch kd459a@t '()))) (if kd459c@ls/false (apply (lambda () (values '() (lambda (kd459e@x) '#t))) kd459c@ls/false) (let ((kd45a0@t kd459a@t)) (let ((kd45a2@ls/false (kd30d9@syntax-dispatch kd45a0@t '_))) (if kd45a2@ls/false (apply (lambda () (kd31b9@syntax-violation '#f '"invalid import spec" kd4570@spec)) kd45a2@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd45a0@t)))))))))))))))))) (set! kd44b5@import-library (lambda (kd4560@spec*) (call-with-values (lambda () (kd44b3@parse-library-name kd4560@spec*)) (lambda (kd4566@kd4563 kd4567@kd4565) (let ((kd456a@pred kd4567@kd4565) (kd456b@name kd4566@kd4563)) (begin (if (null? kd456b@name) (kd31b9@syntax-violation 'import '"empty library name" kd4560@spec*) (void)) (let ((kd456e@lib (kd2ce0@kd2b23@find-library-by-name kd456b@name))) (begin (if (not kd456e@lib) (kd31b9@syntax-violation 'import '"cannot find library with required name" kd456b@name) (void)) (if (not (kd456a@pred (kd2cba@kd2ad7@library-version kd456e@lib))) (kd31b9@syntax-violation 'import '"library does not satisfy version specification" kd4560@spec* kd456e@lib) (void)) ((kd3145@imp-collector) kd456e@lib) (kd2cc2@kd2ae7@library-subst kd456e@lib))))))))) (set! kd44b7@get-import (lambda (kd44d2@spec) (let ((kd44d4@t kd44d2@spec)) (let ((kd44d6@ls/false (kd30d9@syntax-dispatch kd44d4@t '(any . each-any)))) (if (and kd44d6@ls/false (apply (lambda (kd44d8@x kd44d9@x*) (not (memq (kd31bf@syntax->datum kd44d8@x) '(for rename except only prefix library)))) kd44d6@ls/false)) (apply (lambda (kd44dc@x kd44dd@x*) (kd44b5@import-library (cons kd44dc@x kd44dd@x*))) kd44d6@ls/false) (let ((kd44e0@t kd44d4@t)) (let ((kd44e2@ls/false (kd30d9@syntax-dispatch kd44e0@t '(any any . #(each (any any)))))) (if (and kd44e2@ls/false (apply (lambda (kd44e4@rename kd44e5@isp kd44e6@old* kd44e7@new*) (and (eq? (kd31bf@syntax->datum kd44e4@rename) 'rename) (for-all kd44a5@idsyn? kd44e6@old*) (for-all kd44a5@idsyn? kd44e7@new*))) kd44e2@ls/false)) (apply (lambda (kd44ec@rename kd44ed@isp kd44ee@old* kd44ef@new*) (let ((kd44f4@subst (kd44b7@get-import kd44ed@isp)) (kd44f5@old* (map kd31bf@syntax->datum kd44ee@old*)) (kd44f6@new* (map kd31bf@syntax->datum kd44ef@new*))) (let ((kd44fa@old-label* (kd44ad@find* kd44f5@old* kd44f4@subst))) (let ((kd44fc@subst (kd44af@rem* kd44f5@old* kd44f4@subst))) (kd44a9@merge-substs (map cons kd44f6@new* kd44fa@old-label*) kd44fc@subst))))) kd44e2@ls/false) (let ((kd44fe@t kd44e0@t)) (let ((kd4500@ls/false (kd30d9@syntax-dispatch kd44fe@t '(any any . each-any)))) (if (and kd4500@ls/false (apply (lambda (kd4502@except kd4503@isp kd4504@sym*) (and (eq? (kd31bf@syntax->datum kd4502@except) 'except) (for-all kd44a5@idsyn? kd4504@sym*))) kd4500@ls/false)) (apply (lambda (kd4508@except kd4509@isp kd450a@sym*) (let ((kd450e@subst (kd44b7@get-import kd4509@isp))) (kd44af@rem* (map kd31bf@syntax->datum kd450a@sym*) kd450e@subst))) kd4500@ls/false) (let ((kd4510@t kd44fe@t)) (let ((kd4512@ls/false (kd30d9@syntax-dispatch kd4510@t '(any any . each-any)))) (if (and kd4512@ls/false (apply (lambda (kd4514@only kd4515@isp kd4516@sym*) (and (eq? (kd31bf@syntax->datum kd4514@only) 'only) (for-all kd44a5@idsyn? kd4516@sym*))) kd4512@ls/false)) (apply (lambda (kd451a@only kd451b@isp kd451c@sym*) (let ((kd4520@subst (kd44b7@get-import kd451b@isp)) (kd4521@sym* (map kd31bf@syntax->datum kd451c@sym*))) (let ((kd4524@sym* (kd44b1@remove-dups kd4521@sym*))) (let ((kd4526@lab* (kd44ad@find* kd4524@sym* kd4520@subst))) (map cons kd4524@sym* kd4526@lab*))))) kd4512@ls/false) (let ((kd4528@t kd4510@t)) (let ((kd452a@ls/false (kd30d9@syntax-dispatch kd4528@t '(any any any)))) (if (and kd452a@ls/false (apply (lambda (kd452c@prefix kd452d@isp kd452e@p) (and (eq? (kd31bf@syntax->datum kd452c@prefix) 'prefix) (kd44a5@idsyn? kd452e@p))) kd452a@ls/false)) (apply (lambda (kd4532@prefix kd4533@isp kd4534@p) (let ((kd4538@subst (kd44b7@get-import kd4533@isp)) (kd4539@prefix (symbol->string (kd31bf@syntax->datum kd4534@p)))) (map (lambda (kd453c@x) (cons (string->symbol (string-append kd4539@prefix (symbol->string (car kd453c@x)))) (cdr kd453c@x))) kd4538@subst))) kd452a@ls/false) (let ((kd453e@t kd4528@t)) (let ((kd4540@ls/false (kd30d9@syntax-dispatch kd453e@t '(any each-any)))) (if (and kd4540@ls/false (apply (lambda (kd4542@library kd4543@spec*) (eq? (kd31bf@syntax->datum kd4542@library) 'library)) kd4540@ls/false)) (apply (lambda (kd4546@library kd4547@spec*) (kd44b5@import-library kd4547@spec*)) kd4540@ls/false) (let ((kd454a@t kd453e@t)) (let ((kd454c@ls/false (kd30d9@syntax-dispatch kd454a@t '(any any . any)))) (if (and kd454c@ls/false (apply (lambda (kd454e@for kd454f@isp kd4550@rest) (eq? (kd31bf@syntax->datum kd454e@for) 'for)) kd454c@ls/false)) (apply (lambda (kd4554@for kd4555@isp kd4556@rest) (kd44b7@get-import kd4555@isp)) kd454c@ls/false) (let ((kd455a@t kd454a@t)) (let ((kd455c@ls/false (kd30d9@syntax-dispatch kd455a@t 'any))) (if kd455c@ls/false (apply (lambda (kd455e@spec) (kd31b9@syntax-violation 'import '"invalid import spec" kd455e@spec)) kd455c@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd455a@t))))))))))))))))))))))))))) (set! kd44b9@add-imports! (lambda (kd44c2@imp kd44c3@h) (let ((kd44c6@subst (kd44b7@get-import kd44c2@imp))) (for-each (lambda (kd44c8@x) (let ((kd44ca@name (car kd44c8@x)) (kd44cb@label (cdr kd44c8@x))) (let ((kd44ce@t (hashtable-ref kd44c3@h kd44ca@name '#f))) (if kd44ce@t ((lambda (kd44d0@l) (if (not (eq? kd44d0@l kd44cb@label)) (kd44a7@dup-error kd44ca@name) (void))) kd44ce@t) (hashtable-set! kd44c3@h kd44ca@name kd44cb@label))))) kd44c6@subst)))) (lambda (kd44ba@imp*) (let kd44c0@f ((kd44bc@imp* kd44ba@imp*) (kd44bd@h (make-eq-hashtable))) (if (null? kd44bc@imp*) (hashtable-entries kd44bd@h) (begin (kd44b9@add-imports! (car kd44bc@imp*) kd44bd@h) (kd44c0@f (cdr kd44bc@imp*) kd44bd@h)))))))) (set! kd4bdc@kd313b@parse-import-spec* kd313b@parse-import-spec*) (set! kd313d@make-top-rib (lambda (kd46b0@names kd46b1@labels) (let ((kd46b4@rib (kd2e86@make-empty-rib))) (begin (vector-for-each (lambda (kd46b6@name kd46b7@label) (begin (if (not (symbol? kd46b6@name)) (error 'make-top-rib '"BUG: not a symbol" kd46b6@name) (void)) (kd2e8a@extend-rib/nc! kd46b4@rib (make-simple-struct 'stx '5 (list kd46b6@name kd2e56@top-mark* '() '())) kd46b7@label))) kd46b0@names kd46b1@labels) kd46b4@rib)))) (set! kd4bdd@kd313d@make-top-rib kd313d@make-top-rib) (set! kd313f@make-collector (lambda () (let ((kd46ba@ls '())) (lambda kd46be (let ((kd46bf (length kd46be))) (if (= kd46bf '0) (apply (lambda () kd46ba@ls) kd46be) (if (= kd46bf '1) (apply (lambda (kd46bc@x) (set! kd46ba@ls (kd2e4f@set-cons kd46bc@x kd46ba@ls))) kd46be) (error 'apply '"invalid arg count")))))))) (set! kd4bde@kd313f@make-collector kd313f@make-collector) (set! kd3141@inv-collector (kd2a17@kd28f5@make-parameter (lambda kd46c0@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (kd46c2@x) (begin (if (not (procedure? kd46c2@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" kd46c2@x) (void)) kd46c2@x)))) (set! kd4bdf@kd3141@inv-collector kd3141@inv-collector) (set! kd3143@vis-collector (kd2a17@kd28f5@make-parameter (lambda kd46c4@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (kd46c6@x) (begin (if (not (procedure? kd46c6@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" kd46c6@x) (void)) kd46c6@x)))) (set! kd4be0@kd3143@vis-collector kd3143@vis-collector) (set! kd3145@imp-collector (kd2a17@kd28f5@make-parameter (lambda kd46c8@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (kd46ca@x) (begin (if (not (procedure? kd46ca@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" kd46ca@x) (void)) kd46ca@x)))) (set! kd4be1@kd3145@imp-collector kd3145@imp-collector) (set! kd3147@chi-library-internal (lambda (kd46cc@e* kd46cd@rib kd46ce@top?) (call-with-values (lambda () (kd3131@chi-body* kd46cc@e* '() '() '() '() '() '() '() kd46cd@rib kd46ce@top?)) (lambda (kd46e2@kd46d3 kd46e3@kd46d5 kd46e4@kd46d7 kd46e5@kd46d9 kd46e6@kd46db kd46e7@kd46dd kd46e8@kd46df kd46e9@kd46e1) (let ((kd46f2@exp* kd46e9@kd46e1) (kd46f3@_kwd* kd46e8@kd46df) (kd46f4@mod** kd46e7@kd46dd) (kd46f5@rhs* kd46e6@kd46db) (kd46f6@lex* kd46e5@kd46d9) (kd46f7@mr kd46e4@kd46d7) (kd46f8@r kd46e3@kd46d5) (kd46f9@e* kd46e2@kd46d3)) (values (append (apply append (reverse kd46f4@mod**)) kd46f9@e*) kd46f8@r kd46f7@mr (reverse kd46f6@lex*) (reverse kd46f5@rhs*) kd46f2@exp*)))))) (set! kd4be2@kd3147@chi-library-internal kd3147@chi-library-internal) (set! kd3149@chi-interaction-expr (lambda (kd4702@e kd4703@rib kd4704@r) (call-with-values (lambda () (kd3131@chi-body* (list kd4702@e) kd4704@r kd4704@r '() '() '() '() '() kd4703@rib '#t)) (lambda (kd4718@kd4709 kd4719@kd470b kd471a@kd470d kd471b@kd470f kd471c@kd4711 kd471d@kd4713 kd471e@kd4715 kd471f@kd4717) (let ((kd4728@_exp* kd471f@kd4717) (kd4729@_kwd* kd471e@kd4715) (kd472a@mod** kd471d@kd4713) (kd472b@rhs* kd471c@kd4711) (kd472c@lex* kd471b@kd470f) (kd472d@mr kd471a@kd470d) (kd472e@r kd4719@kd470b) (kd472f@e* kd4718@kd4709)) (let ((kd4738@e* (kd3109@expand-interaction-rhs*/init* (reverse kd472c@lex*) (reverse kd472b@rhs*) (append (apply append (reverse kd472a@mod**)) kd472f@e*) kd472e@r kd472d@mr))) (let ((kd473a@e (if (null? kd4738@e*) (kd2e38@kd2d93@build-void) (if (null? (cdr kd4738@e*)) (car kd4738@e*) (kd2e37@kd2d91@build-sequence '#f kd4738@e*))))) (values kd473a@e kd472e@r)))))))) (set! kd4be3@kd3149@chi-interaction-expr kd3149@chi-interaction-expr) (set! kd314b@library-body-expander (lambda (kd473c@name kd473d@main-exp* kd473e@imp* kd473f@b* kd4740@top?) (let ((kd4747@itc '#f)) (begin (set! kd4747@itc (kd313f@make-collector)) (let ((kd4750@kd4749 kd3145@imp-collector) (kd4751@kd474b kd31c9@top-level-context) (kd4752@kd474d kd4747@itc) (kd4753@kd474f '#f)) (let ((kd4758@swap (lambda () (begin (let ((kd475a@t (kd4750@kd4749))) (begin (kd4750@kd4749 kd4752@kd474d) (set! kd4752@kd474d kd475a@t))) (let ((kd475c@t (kd4751@kd474b))) (begin (kd4751@kd474b kd4753@kd474f) (set! kd4753@kd474f kd475c@t))))))) (dynamic-wind kd4758@swap (lambda () (call-with-values (lambda () (kd313b@parse-import-spec* kd473e@imp*)) (lambda (kd4762@kd475f kd4763@kd4761) (let ((kd4766@subst-labels kd4763@kd4761) (kd4767@subst-names kd4762@kd475f)) (let ((kd476a@rib (kd313d@make-top-rib kd4767@subst-names kd4766@subst-labels))) (let ((kd476d@wrap '#f)) (begin (set! kd476d@wrap (lambda (kd47e8@x) (make-simple-struct 'stx '5 (list kd47e8@x kd2e56@top-mark* (list kd476a@rib) '())))) (let ((kd476e@b* (map kd476d@wrap kd473f@b*)) (kd476f@main-exp* (map kd476d@wrap kd473d@main-exp*)) (kd4770@rtc (kd313f@make-collector)) (kd4771@vtc (kd313f@make-collector))) (let ((kd477e@kd4777 kd3141@inv-collector) (kd477f@kd4779 kd3143@vis-collector) (kd4780@kd477b kd4770@rtc) (kd4781@kd477d kd4771@vtc)) (let ((kd4786@swap (lambda () (begin (let ((kd4788@t (kd477e@kd4777))) (begin (kd477e@kd4777 kd4780@kd477b) (set! kd4780@kd477b kd4788@t))) (let ((kd478a@t (kd477f@kd4779))) (begin (kd477f@kd4779 kd4781@kd477d) (set! kd4781@kd477d kd478a@t))))))) (dynamic-wind kd4786@swap (lambda () (call-with-values (lambda () (kd3147@chi-library-internal kd476e@b* kd476a@rib kd4740@top?)) (lambda (kd4798@kd478d kd4799@kd478f kd479a@kd4791 kd479b@kd4793 kd479c@kd4795 kd479d@kd4797) (let ((kd47a4@internal-exp* kd479d@kd4797) (kd47a5@rhs* kd479c@kd4795) (kd47a6@lex* kd479b@kd4793) (kd47a7@mr kd479a@kd4791) (kd47a8@r kd4799@kd478f) (kd47a9@init* kd4798@kd478d)) (call-with-values (lambda () (kd3135@parse-exports (append kd476f@main-exp* kd47a4@internal-exp*))) (lambda (kd47b4@kd47b1 kd47b5@kd47b3) (let ((kd47b8@exp-id* kd47b5@kd47b3) (kd47b9@exp-name* kd47b4@kd47b1)) (begin (kd2e8e@seal-rib! kd476a@rib) (let ((kd47bc@init* (kd30f7@chi-expr* kd47a9@init* kd47a8@r kd47a7@mr))) (let ((kd47be@rhs* (kd310b@chi-rhs* kd47a5@rhs* kd47a8@r kd47a7@mr))) (begin (kd2e90@unseal-rib! kd476a@rib) (let ((kd47c0@loc* (map kd2e5c@gen-global kd47a6@lex*)) (kd47c1@export-subst (kd31a3@make-export-subst kd47b9@exp-name* kd47b8@exp-id*))) (let ((kd47c5@errstr '#f)) (begin (set! kd47c5@errstr '"attempt to export mutated variable") (call-with-values (lambda () (kd31a5@make-export-env/macros kd47a6@lex* kd47c0@loc* kd47a8@r)) (lambda (kd47cc@kd47c7 kd47cd@kd47c9 kd47ce@kd47cb) (let ((kd47d2@macro* kd47ce@kd47cb) (kd47d3@global* kd47cd@kd47c9) (kd47d4@export-env kd47cc@kd47c7)) (begin (for-each (lambda (kd47d8@s) (let ((kd47da@name (car kd47d8@s)) (kd47db@label (cdr kd47d8@s))) (let ((kd47de@p (assq kd47db@label kd47d4@export-env))) (if kd47de@p (let ((kd47e0@b (cdr kd47de@p))) (let ((kd47e2@type (car kd47e0@b))) (if (eq? kd47e2@type 'mutable) (kd31b9@syntax-violation 'export kd47c5@errstr kd47da@name) (void)))) (void))))) kd47c1@export-subst) (let ((kd47e4@invoke-body (kd2e3d@kd2d9d@build-library-letrec* '#f kd473c@name kd47a6@lex* kd47c0@loc* kd47be@rhs* (if (null? kd47bc@init*) (kd2e38@kd2d93@build-void) (kd2e37@kd2d91@build-sequence '#f kd47bc@init*)))) (kd47e5@invoke-definitions (map kd2e34@kd2cf0@build-global-define (map cdr kd47d3@global*)))) (values (kd4747@itc) (kd4770@rtc) (kd4771@vtc) (kd2e37@kd2d91@build-sequence '#f (append kd47e5@invoke-definitions (list kd47e4@invoke-body))) kd47d2@macro* kd47c1@export-subst kd47d4@export-env)))))))))))))))))))) kd4786@swap))))))))))) kd4758@swap))))))) (set! kd4be4@kd314b@library-body-expander kd314b@library-body-expander) (set! kd314d@core-library-expander (lambda (kd47ea@e kd47eb@verify-name) (call-with-values (lambda () (kd3139@parse-library kd47ea@e)) (lambda (kd47f6@kd47ef kd47f7@kd47f1 kd47f8@kd47f3 kd47f9@kd47f5) (let ((kd47fe@b* kd47f9@kd47f5) (kd47ff@imp* kd47f8@kd47f3) (kd4800@exp* kd47f7@kd47f1) (kd4801@name* kd47f6@kd47ef)) (call-with-values (lambda () (kd3137@parse-library-name kd4801@name*)) (lambda (kd480a@kd4807 kd480b@kd4809) (let ((kd480e@ver kd480b@kd4809) (kd480f@name kd480a@kd4807)) (begin (kd47eb@verify-name kd480f@name) (call-with-values (lambda () (kd314b@library-body-expander kd480f@name kd4800@exp* kd47ff@imp* kd47fe@b* '#f)) (lambda (kd4820@kd4813 kd4821@kd4815 kd4822@kd4817 kd4823@kd4819 kd4824@kd481b kd4825@kd481d kd4826@kd481f) (let ((kd482e@export-env kd4826@kd481f) (kd482f@export-subst kd4825@kd481d) (kd4830@visit-code kd4824@kd481b) (kd4831@invoke-code kd4823@kd4819) (kd4832@visit-req* kd4822@kd4817) (kd4833@invoke-req* kd4821@kd4815) (kd4834@imp* kd4820@kd4813)) (values kd480f@name kd480e@ver kd4834@imp* kd4833@invoke-req* kd4832@visit-req* kd4831@invoke-code kd4830@visit-code kd482f@export-subst kd482e@export-env))))))))))))) (set! kd4be5@kd314d@core-library-expander kd314d@core-library-expander) (set! kd314f@parse-top-level-program (lambda (kd483c@e*) (let ((kd483e@t kd483c@e*)) (let ((kd4840@ls/false (kd30d9@syntax-dispatch kd483e@t '((any . each-any) . each-any)))) (if (and kd4840@ls/false (apply (lambda (kd4842@import kd4843@imp* kd4844@b*) (eq? (kd31bf@syntax->datum kd4842@import) 'import)) kd4840@ls/false)) (apply (lambda (kd4848@import kd4849@imp* kd484a@b*) (values kd4849@imp* kd484a@b*)) kd4840@ls/false) (let ((kd484e@t kd483e@t)) (let ((kd4850@ls/false (kd30d9@syntax-dispatch kd484e@t '((any . any) . any)))) (if (and kd4850@ls/false (apply (lambda (kd4852@import kd4853@x kd4854@y) (eq? (kd31bf@syntax->datum kd4852@import) 'import)) kd4850@ls/false)) (apply (lambda (kd4858@import kd4859@x kd485a@y) (kd31b9@syntax-violation 'expander '"invalid syntax of top-level program" (kd2ecc@syntax-car kd483c@e*))) kd4850@ls/false) (let ((kd485e@t kd484e@t)) (let ((kd4860@ls/false (kd30d9@syntax-dispatch kd485e@t '_))) (if kd4860@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) kd4860@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd485e@t)))))))))))) (set! kd4be6@kd314f@parse-top-level-program kd314f@parse-top-level-program) (set! kd3151@top-level-expander (lambda (kd4862@e*) (call-with-values (lambda () (kd314f@parse-top-level-program kd4862@e*)) (lambda (kd4868@kd4865 kd4869@kd4867) (let ((kd486c@b* kd4869@kd4867) (kd486d@imp* kd4868@kd4865)) (call-with-values (lambda () (kd314b@library-body-expander '() '() kd486d@imp* kd486c@b* '#t)) (lambda (kd487e@kd4871 kd487f@kd4873 kd4880@kd4875 kd4881@kd4877 kd4882@kd4879 kd4883@kd487b kd4884@kd487d) (let ((kd488c@export-env kd4884@kd487d) (kd488d@export-subst kd4883@kd487b) (kd488e@visit-code kd4882@kd4879) (kd488f@invoke-code kd4881@kd4877) (kd4890@visit-req* kd4880@kd4875) (kd4891@invoke-req* kd487f@kd4873) (kd4892@imp* kd487e@kd4871)) (values kd4891@invoke-req* kd488f@invoke-code))))))))) (set! kd4be7@kd3151@top-level-expander kd3151@top-level-expander) (set! kd3153@rp (kd2a14@kd28ef@make-record-printer 'env (lambda (kd489a@x kd489b@p kd489c@wr) (display '"#<environment>" kd489b@p)))) (set! kd4be8@kd3153@rp kd3153@rp) (set! kd315d@env? (lambda (kd48a0@x) (and (simple-struct? kd48a0@x) (eq? (simple-struct-name kd48a0@x) 'env)))) (set! kd4be9@kd315d@env? kd315d@env?) (set! kd315f@env-names (lambda (kd48a2@x) (simple-struct-ref kd48a2@x '0))) (set! kd4bea@kd315f@env-names kd315f@env-names) (set! kd3161@set-env-names! (lambda (kd48a4@x kd48a5@val) (simple-struct-set! kd48a4@x '0 kd48a5@val))) (set! kd4beb@kd3161@set-env-names! kd3161@set-env-names!) (set! kd3163@env-labels (lambda (kd48a8@x) (simple-struct-ref kd48a8@x '1))) (set! kd4bec@kd3163@env-labels kd3163@env-labels) (set! kd3165@set-env-labels! (lambda (kd48aa@x kd48ab@val) (simple-struct-set! kd48aa@x '1 kd48ab@val))) (set! kd4bed@kd3165@set-env-labels! kd3165@set-env-labels!) (set! kd3167@env-itc (lambda (kd48ae@x) (simple-struct-ref kd48ae@x '2))) (set! kd4bee@kd3167@env-itc kd3167@env-itc) (set! kd3169@set-env-itc! (lambda (kd48b0@x kd48b1@val) (simple-struct-set! kd48b0@x '2 kd48b1@val))) (set! kd4bef@kd3169@set-env-itc! kd3169@set-env-itc!) (set! kd316b@dummy '3) (set! kd4bf0@kd316b@dummy kd316b@dummy) (set! kd316d@rp (kd2a14@kd28ef@make-record-printer 'interaction-env (lambda (kd48b4@x kd48b5@p kd48b6@wr) (display '"#<environment>" kd48b5@p)))) (set! kd4bf1@kd316d@rp kd316d@rp) (set! kd3177@interaction-env? (lambda (kd48ba@x) (and (simple-struct? kd48ba@x) (eq? (simple-struct-name kd48ba@x) 'interaction-env)))) (set! kd4bf2@kd3177@interaction-env? kd3177@interaction-env?) (set! kd3179@interaction-env-rib (lambda (kd48bc@x) (simple-struct-ref kd48bc@x '0))) (set! kd4bf3@kd3179@interaction-env-rib kd3179@interaction-env-rib) (set! kd317b@set-interaction-env-rib! (lambda (kd48be@x kd48bf@val) (simple-struct-set! kd48be@x '0 kd48bf@val))) (set! kd4bf4@kd317b@set-interaction-env-rib! kd317b@set-interaction-env-rib!) (set! kd317d@interaction-env-r (lambda (kd48c2@x) (simple-struct-ref kd48c2@x '1))) (set! kd4bf5@kd317d@interaction-env-r kd317d@interaction-env-r) (set! kd317f@set-interaction-env-r! (lambda (kd48c4@x kd48c5@val) (simple-struct-set! kd48c4@x '1 kd48c5@val))) (set! kd4bf6@kd317f@set-interaction-env-r! kd317f@set-interaction-env-r!) (set! kd3181@interaction-env-locs (lambda (kd48c8@x) (simple-struct-ref kd48c8@x '2))) (set! kd4bf7@kd3181@interaction-env-locs kd3181@interaction-env-locs) (set! kd3183@set-interaction-env-locs! (lambda (kd48ca@x kd48cb@val) (simple-struct-set! kd48ca@x '2 kd48cb@val))) (set! kd4bf8@kd3183@set-interaction-env-locs! kd3183@set-interaction-env-locs!) (set! kd3185@dummy '3) (set! kd4bf9@kd3185@dummy kd3185@dummy) (set! kd3187@interaction-environment-symbols (lambda () (kd318f@environment-symbols (kd31c7@interaction-environment)))) (set! kd4bfa@kd3187@interaction-environment-symbols kd3187@interaction-environment-symbols) (set! kd3189@environment-bindings (lambda (kd48ce@e) (vector->list (vector-map (lambda (kd48d0@name kd48d1@label) (kd318b@parse-binding (cons kd48d0@name (kd2ce6@kd2b2f@imported-label->binding kd48d1@label)))) (kd315f@env-names kd48ce@e) (kd3163@env-labels kd48ce@e))))) (set! kd4bfb@kd3189@environment-bindings kd3189@environment-bindings) (set! kd318b@parse-binding (lambda (kd48d4@b) (cons (car kd48d4@b) (let ((kd48d6@t (cadr kd48d4@b))) (if (memv kd48d6@t '(core-prim global)) 'procedure (if (memv kd48d6@t '(core-macro macro global-macro)) 'syntax (if (memv kd48d6@t '($core-rtd)) 'record (if (eq? (car kd48d4@b) (cadr kd48d4@b)) 'syntax 'unknown)))))))) (set! kd4bfc@kd318b@parse-binding kd318b@parse-binding) (set! kd318d@environment? (lambda (kd48d8@x) (or (kd315d@env? kd48d8@x) (kd3177@interaction-env? kd48d8@x)))) (set! kd4bfd@kd318d@environment? kd318d@environment?) (set! kd318f@environment-symbols (lambda (kd48da@x) (if (kd315d@env? kd48da@x) (vector->list (kd315f@env-names kd48da@x)) (if (kd3177@interaction-env? kd48da@x) (map values (kd2e70@rib-sym* (kd3179@interaction-env-rib kd48da@x))) (assertion-violation 'environment-symbols '"not an environment" kd48da@x))))) (set! kd4bfe@kd318f@environment-symbols kd318f@environment-symbols) (set! kd3191@environment (lambda kd48dc@imp* (let ((kd48de@itc (kd313f@make-collector))) (let ((kd48e4@kd48e1 kd3145@imp-collector) (kd48e5@kd48e3 kd48de@itc)) (let ((kd48e8@swap (lambda () (let ((kd48ea@t (kd48e4@kd48e1))) (begin (kd48e4@kd48e1 kd48e5@kd48e3) (set! kd48e5@kd48e3 kd48ea@t)))))) (dynamic-wind kd48e8@swap (lambda () (call-with-values (lambda () (kd313b@parse-import-spec* kd48dc@imp*)) (lambda (kd48f0@kd48ed kd48f1@kd48ef) (let ((kd48f4@subst-labels kd48f1@kd48ef) (kd48f5@subst-names kd48f0@kd48ed)) (make-simple-struct 'env '4 (list kd48f5@subst-names kd48f4@subst-labels kd48de@itc)))))) kd48e8@swap)))))) (set! kd4bff@kd3191@environment kd3191@environment) (set! kd3193@null-environment (lambda (kd48f8@n) (begin (if (not (eqv? kd48f8@n '5)) (assertion-violation 'null-environment '"not 5" kd48f8@n) (void)) (kd3191@environment '(psyntax null-environment-5))))) (set! kd4c00@kd3193@null-environment kd3193@null-environment) (set! kd3195@scheme-report-environment (lambda (kd48fa@n) (begin (if (not (eqv? kd48fa@n '5)) (assertion-violation 'scheme-report-environment '"not 5" kd48fa@n) (void)) (kd3191@environment '(psyntax scheme-report-environment-5))))) (set! kd4c01@kd3195@scheme-report-environment kd3195@scheme-report-environment) (set! kd3197@expand (lambda (kd48fc@x kd48fd@env) (if (kd315d@env? kd48fd@env) (let ((kd4900@rib (kd313d@make-top-rib (kd315f@env-names kd48fd@env) (kd3163@env-labels kd48fd@env)))) (let ((kd4902@x (make-simple-struct 'stx '5 (list kd48fc@x kd2e56@top-mark* (list kd4900@rib) '()))) (kd4903@itc (kd3167@env-itc kd48fd@env)) (kd4904@rtc (kd313f@make-collector)) (kd4905@vtc (kd313f@make-collector))) (let ((kd490a@x (let ((kd491c@kd490d kd31c9@top-level-context) (kd491d@kd490f kd3141@inv-collector) (kd491e@kd4911 kd3143@vis-collector) (kd491f@kd4913 kd3145@imp-collector) (kd4920@kd4915 '#f) (kd4921@kd4917 kd4904@rtc) (kd4922@kd4919 kd4905@vtc) (kd4923@kd491b kd4903@itc)) (let ((kd492c@swap (lambda () (begin (let ((kd492e@t (kd491c@kd490d))) (begin (kd491c@kd490d kd4920@kd4915) (set! kd4920@kd4915 kd492e@t))) (let ((kd4930@t (kd491d@kd490f))) (begin (kd491d@kd490f kd4921@kd4917) (set! kd4921@kd4917 kd4930@t))) (let ((kd4932@t (kd491e@kd4911))) (begin (kd491e@kd4911 kd4922@kd4919) (set! kd4922@kd4919 kd4932@t))) (let ((kd4934@t (kd491f@kd4913))) (begin (kd491f@kd4913 kd4923@kd491b) (set! kd4923@kd491b kd4934@t))))))) (dynamic-wind kd492c@swap (lambda () (kd30fb@chi-expr kd4902@x '() '())) kd492c@swap))))) (begin (kd2e8e@seal-rib! kd4900@rib) (values kd490a@x (kd4904@rtc)))))) (if (kd3177@interaction-env? kd48fd@env) (let ((kd4936@rib (kd3179@interaction-env-rib kd48fd@env)) (kd4937@r (kd317d@interaction-env-r kd48fd@env)) (kd4938@rtc (kd313f@make-collector))) (let ((kd493c@x (make-simple-struct 'stx '5 (list kd48fc@x kd2e56@top-mark* (list kd4936@rib) '())))) (call-with-values (lambda () (let ((kd4952@kd4943 kd31c9@top-level-context) (kd4953@kd4945 kd3141@inv-collector) (kd4954@kd4947 kd3143@vis-collector) (kd4955@kd4949 kd3145@imp-collector) (kd4956@kd494b kd48fd@env) (kd4957@kd494d kd4938@rtc) (kd4958@kd494f (kd313f@make-collector)) (kd4959@kd4951 (kd313f@make-collector))) (let ((kd4962@swap (lambda () (begin (let ((kd4964@t (kd4952@kd4943))) (begin (kd4952@kd4943 kd4956@kd494b) (set! kd4956@kd494b kd4964@t))) (let ((kd4966@t (kd4953@kd4945))) (begin (kd4953@kd4945 kd4957@kd494d) (set! kd4957@kd494d kd4966@t))) (let ((kd4968@t (kd4954@kd4947))) (begin (kd4954@kd4947 kd4958@kd494f) (set! kd4958@kd494f kd4968@t))) (let ((kd496a@t (kd4955@kd4949))) (begin (kd4955@kd4949 kd4959@kd4951) (set! kd4959@kd4951 kd496a@t))))))) (dynamic-wind kd4962@swap (lambda () (kd3149@chi-interaction-expr kd493c@x kd4936@rib kd4937@r)) kd4962@swap)))) (lambda (kd496c@kd493f kd496d@kd4941) (let ((kd4970@r^ kd496d@kd4941) (kd4971@e kd496c@kd493f)) (begin (kd317f@set-interaction-env-r! kd48fd@env kd4970@r^) (values kd4971@e (kd4938@rtc)))))))) (assertion-violation 'expand '"not an environment" kd48fd@env))))) (set! kd4c02@kd3197@expand kd3197@expand) (set! kd3199@eval (lambda (kd4974@x kd4975@env) (begin (if (not (kd318d@environment? kd4975@env)) (error 'eval '"not an environment" kd4975@env) (void)) (call-with-values (lambda () (kd3197@expand kd4974@x kd4975@env)) (lambda (kd497c@kd4979 kd497d@kd497b) (let ((kd4980@invoke-req* kd497d@kd497b) (kd4981@x kd497c@kd4979)) (begin (for-each kd2ce7@kd2b31@invoke-library kd4980@invoke-req*) (eval-core (kd2a6d@kd2a25@expanded->core kd4981@x))))))))) (set! kd4c03@kd3199@eval kd3199@eval) (set! kd319b@library-expander (lambda kd49f2 (let ((kd49f3 (length kd49f2))) (if (= kd49f3 '3) (apply (lambda (kd4984@x kd4985@filename kd4986@verify-name) (let ((kd498b@build-visit-code '#f) (kd498d@visit! '#f)) (begin (set! kd498b@build-visit-code (lambda (kd49e0@macro*) (if (null? kd49e0@macro*) (kd2e38@kd2d93@build-void) (kd2e37@kd2d91@build-sequence '#f (map (lambda (kd49e2@x) (let ((kd49e4@loc (car kd49e2@x)) (kd49e5@src (cddr kd49e2@x))) (list 'set! kd49e4@loc kd49e5@src))) kd49e0@macro*))))) (set! kd498d@visit! (lambda (kd49d8@macro*) (for-each (lambda (kd49da@x) (let ((kd49dc@loc (car kd49da@x)) (kd49dd@proc (cadr kd49da@x))) (set-symbol-value! kd49dc@loc kd49dd@proc))) kd49d8@macro*))) (call-with-values (lambda () (kd314d@core-library-expander kd4984@x kd4986@verify-name)) (lambda (kd49a0@kd498f kd49a1@kd4991 kd49a2@kd4993 kd49a3@kd4995 kd49a4@kd4997 kd49a5@kd4999 kd49a6@kd499b kd49a7@kd499d kd49a8@kd499f) (let ((kd49b2@export-env kd49a8@kd499f) (kd49b3@export-subst kd49a7@kd499d) (kd49b4@macro* kd49a6@kd499b) (kd49b5@invoke-code kd49a5@kd4999) (kd49b6@vis* kd49a4@kd4997) (kd49b7@inv* kd49a3@kd4995) (kd49b8@imp* kd49a2@kd4993) (kd49b9@ver kd49a1@kd4991) (kd49ba@name kd49a0@kd498f)) (let ((kd49c4@id (gensym)) (kd49c5@name kd49ba@name) (kd49c6@ver kd49b9@ver) (kd49c7@imp* (map kd2cec@kd2b3b@library-spec kd49b8@imp*)) (kd49c8@vis* (map kd2cec@kd2b3b@library-spec kd49b6@vis*)) (kd49c9@inv* (map kd2cec@kd2b3b@library-spec kd49b7@inv*)) (kd49ca@visit-proc (lambda () (kd498d@visit! kd49b4@macro*))) (kd49cb@invoke-proc (lambda () (eval-core (kd2a6d@kd2a25@expanded->core kd49b5@invoke-code)))) (kd49cc@visit-code (kd498b@build-visit-code kd49b4@macro*)) (kd49cd@invoke-code kd49b5@invoke-code)) (begin (kd2ce5@kd2b2d@install-library kd49c4@id kd49c5@name kd49c6@ver kd49c7@imp* kd49c8@vis* kd49c9@inv* kd49b3@export-subst kd49b2@export-env kd49ca@visit-proc kd49cb@invoke-proc kd49cc@visit-code kd49cd@invoke-code '#t kd4985@filename) (values kd49c4@id kd49c5@name kd49c6@ver kd49c7@imp* kd49c8@vis* kd49c9@inv* kd49cd@invoke-code kd49cc@visit-code kd49b3@export-subst kd49b2@export-env))))))))) kd49f2) (if (= kd49f3 '2) (apply (lambda (kd49e8@x kd49e9@filename) (kd319b@library-expander kd49e8@x kd49e9@filename (lambda (kd49ec@x) (values)))) kd49f2) (if (= kd49f3 '1) (apply (lambda (kd49ee@x) (kd319b@library-expander kd49ee@x '#f (lambda (kd49f0@x) (values)))) kd49f2) (error 'apply '"invalid arg count"))))))) (set! kd4c04@kd319b@library-expander kd319b@library-expander) (set! kd319d@boot-library-expand (lambda (kd49f4@x) (call-with-values (lambda () (kd319b@library-expander kd49f4@x)) (lambda (kd4a0a@kd49f7 kd4a0b@kd49f9 kd4a0c@kd49fb kd4a0d@kd49fd kd4a0e@kd49ff kd4a0f@kd4a01 kd4a10@kd4a03 kd4a11@kd4a05 kd4a12@kd4a07 kd4a13@kd4a09) (let ((kd4a1e@export-env kd4a13@kd4a09) (kd4a1f@export-subst kd4a12@kd4a07) (kd4a20@visit-code kd4a11@kd4a05) (kd4a21@invoke-code kd4a10@kd4a03) (kd4a22@inv* kd4a0f@kd4a01) (kd4a23@vis* kd4a0e@kd49ff) (kd4a24@imp* kd4a0d@kd49fd) (kd4a25@ver kd4a0c@kd49fb) (kd4a26@name kd4a0b@kd49f9) (kd4a27@id kd4a0a@kd49f7)) (values kd4a26@name kd4a21@invoke-code kd4a1f@export-subst kd4a1e@export-env)))))) (set! kd4c05@kd319d@boot-library-expand kd319d@boot-library-expand) (set! kd319f@rev-map-append (lambda (kd4a32@f kd4a33@ls kd4a34@ac) (if (null? kd4a33@ls) kd4a34@ac (kd319f@rev-map-append kd4a32@f (cdr kd4a33@ls) (cons (kd4a32@f (car kd4a33@ls)) kd4a34@ac))))) (set! kd4c06@kd319f@rev-map-append kd319f@rev-map-append) (set! kd31a1@build-exports (lambda (kd4a38@lex*+loc* kd4a39@init*) (kd2e37@kd2d91@build-sequence '#f (cons (kd2e38@kd2d93@build-void) (kd319f@rev-map-append (lambda (kd4a3c@x) (list 'set! (cdr kd4a3c@x) (car kd4a3c@x))) kd4a38@lex*+loc* kd4a39@init*))))) (set! kd4c07@kd31a1@build-exports kd31a1@build-exports) (set! kd31a3@make-export-subst (lambda (kd4a3e@name* kd4a3f@id*) (map (lambda (kd4a42@name kd4a43@id) (let ((kd4a46@label (kd2ee8@id->label kd4a43@id))) (begin (if (not kd4a46@label) (kd31b9@syntax-violation '#f '"cannot export unbound identifier" kd4a43@id) (void)) (cons kd4a42@name kd4a46@label)))) kd4a3e@name* kd4a3f@id*))) (set! kd4c08@kd31a3@make-export-subst kd31a3@make-export-subst) (set! kd31a5@make-export-env/macros (lambda (kd4a48@lex* kd4a49@loc* kd4a4a@r) (let ((kd4a4f@lookup '#f)) (begin (set! kd4a4f@lookup (lambda (kd4a6c@x) (let kd4a74@f ((kd4a6e@x kd4a6c@x) (kd4a6f@lex* kd4a48@lex*) (kd4a70@loc* kd4a49@loc*)) (if (pair? kd4a6f@lex*) (if (eq? kd4a6e@x (car kd4a6f@lex*)) (car kd4a70@loc*) (kd4a74@f kd4a6e@x (cdr kd4a6f@lex*) (cdr kd4a70@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let kd4a58@f ((kd4a50@r kd4a4a@r) (kd4a51@env '()) (kd4a52@global* '()) (kd4a53@macro* '())) (if (null? kd4a50@r) (values kd4a51@env kd4a52@global* kd4a53@macro*) (let ((kd4a5a@x (car kd4a50@r))) (let ((kd4a5c@label (car kd4a5a@x)) (kd4a5d@b (cdr kd4a5a@x))) (let ((kd4a60@t (kd2eee@binding-type kd4a5d@b))) (if (memv kd4a60@t '(lexical)) (let ((kd4a62@v (kd2ef0@binding-value kd4a5d@b))) (let ((kd4a64@loc (kd4a4f@lookup (kd3063@lexical-var kd4a62@v))) (kd4a65@type (if (kd3065@lexical-mutable? kd4a62@v) 'mutable 'global))) (kd4a58@f (cdr kd4a50@r) (cons (cons* kd4a5c@label kd4a65@type kd4a64@loc) kd4a51@env) (cons (cons (kd3063@lexical-var kd4a62@v) kd4a64@loc) kd4a52@global*) kd4a53@macro*))) (if (memv kd4a60@t '(local-macro)) (let ((kd4a68@loc (gensym))) (kd4a58@f (cdr kd4a50@r) (cons (cons* kd4a5c@label 'global-macro kd4a68@loc) kd4a51@env) kd4a52@global* (cons (cons kd4a68@loc (kd2ef0@binding-value kd4a5d@b)) kd4a53@macro*))) (if (memv kd4a60@t '(local-macro!)) (let ((kd4a6a@loc (gensym))) (kd4a58@f (cdr kd4a50@r) (cons (cons* kd4a5c@label 'global-macro! kd4a6a@loc) kd4a51@env) kd4a52@global* (cons (cons kd4a6a@loc (kd2ef0@binding-value kd4a5d@b)) kd4a53@macro*))) (if (memv kd4a60@t '($rtd $module)) (kd4a58@f (cdr kd4a50@r) (cons kd4a5a@x kd4a51@env) kd4a52@global* kd4a53@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (kd2eee@binding-type kd4a5d@b) (kd2ef0@binding-value kd4a5d@b))))))))))))))) (set! kd4c09@kd31a5@make-export-env/macros kd31a5@make-export-env/macros) (set! kd31a7@generate-temporaries (lambda (kd4a76@ls) (let ((kd4a78@t kd4a76@ls)) (let ((kd4a7a@ls/false (kd30d9@syntax-dispatch kd4a78@t 'each-any))) (if kd4a7a@ls/false (apply (lambda (kd4a7c@ls) (map (lambda (kd4a7e@x) (make-simple-struct 'stx '5 (list (let ((kd4a80@x (kd31bf@syntax->datum kd4a7e@x))) (if (or (symbol? kd4a80@x) (string? kd4a80@x)) (gensym kd4a80@x) (gensym 't))) kd2e56@top-mark* '() '()))) kd4a7c@ls)) kd4a7a@ls/false) (let ((kd4a82@t kd4a78@t)) (let ((kd4a84@ls/false (kd30d9@syntax-dispatch kd4a82@t '_))) (if kd4a84@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) kd4a84@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd4a82@t))))))))) (set! kd4c0a@kd31a7@generate-temporaries kd31a7@generate-temporaries) (set! kd31a9@free-identifier=? (lambda (kd4a86@x kd4a87@y) (if (kd2ed2@id? kd4a86@x) (if (kd2ed2@id? kd4a87@y) (kd2ed8@free-id=? kd4a86@x kd4a87@y) (assertion-violation 'free-identifier=? '"not an identifier" kd4a87@y)) (assertion-violation 'free-identifier=? '"not an identifier" kd4a86@x)))) (set! kd4c0b@kd31a9@free-identifier=? kd31a9@free-identifier=?) (set! kd31ab@bound-identifier=? (lambda (kd4a8a@x kd4a8b@y) (if (kd2ed2@id? kd4a8a@x) (if (kd2ed2@id? kd4a8b@y) (kd2ed6@bound-id=? kd4a8a@x kd4a8b@y) (assertion-violation 'bound-identifier=? '"not an identifier" kd4a8b@y)) (assertion-violation 'bound-identifier=? '"not an identifier" kd4a8a@x)))) (set! kd4c0c@kd31ab@bound-identifier=? kd31ab@bound-identifier=?) (set! kd31ad@make-source-condition (lambda (kd4a8e@x) (let ((kd4a98@kd4a93 '#f) (kd4a9a@kd4a95 '#f) (kd4a9c@kd4a94 '#f) (kd4a9f@kd4a92 '#f) (kd4aa1@make-source-condition '#f) (kd4aa3@kd4a90 '#f) (kd4aa5@kd4a91 '#f) (kd4aa7@source-condition? '#f) (kd4aa9@source-filename '#f) (kd4aab@source-character '#f)) (begin (set! kd4a98@kd4a93 (make-record-type-descriptor '&source-information kd4eee@kd4c35@&condition-rtd 'kd4a96 '#f '#f '#((immutable file-name) (immutable character)))) (set! kd4a9a@kd4a95 '#f) (set! kd4a9c@kd4a94 (make-record-constructor-descriptor kd4a98@kd4a93 kd4eef@kd4c37@&condition-rcd kd4a9a@kd4a95)) (set! kd4a9f@kd4a92 (record-predicate kd4a98@kd4a93)) (set! kd4aa1@make-source-condition (record-constructor kd4a9c@kd4a94)) (set! kd4aa3@kd4a90 (record-accessor kd4a98@kd4a93 '0)) (set! kd4aa5@kd4a91 (record-accessor kd4a98@kd4a93 '1)) (set! kd4aa7@source-condition? (condition-predicate kd4a98@kd4a93)) (set! kd4aa9@source-filename (condition-accessor kd4a98@kd4a93 kd4aa3@kd4a90)) (set! kd4aab@source-character (condition-accessor kd4a98@kd4a93 kd4aa5@kd4a91)) (if (pair? kd4a8e@x) (kd4aa1@make-source-condition (car kd4a8e@x) (cdr kd4a8e@x)) (condition)))))) (set! kd4c0d@kd31ad@make-source-condition kd31ad@make-source-condition) (set! kd31af@extract-position-condition (lambda (kd4aac@x) (kd31ad@make-source-condition (kd31b1@expression-position kd4aac@x)))) (set! kd4c0e@kd31af@extract-position-condition kd31af@extract-position-condition) (set! kd31b1@expression-position (lambda (kd4aae@x) (and (kd2e9e@stx? kd4aae@x) (let ((kd4ab0@x (kd2ea0@stx-expr kd4aae@x))) (and (kd2a0b@kd28dd@annotation? kd4ab0@x) (kd2a0c@kd28df@annotation-source kd4ab0@x)))))) (set! kd4c0f@kd31b1@expression-position kd31b1@expression-position) (set! kd31b3@assertion-error (lambda (kd4ab2@expr kd4ab3@pos) (raise (condition (kd4f1e@kd4cf9@make-assertion-violation) (kd4f30@kd4d2b@make-who-condition 'assert) (kd4ef4@kd4c8c@make-message-condition '"assertion failed") (kd4f26@kd4d10@make-irritants-condition (list kd4ab2@expr)) (kd31ad@make-source-condition kd4ab3@pos))))) (set! kd4c10@kd31b3@assertion-error kd31b3@assertion-error) (set! kd31b5@syntax-error (lambda (kd4ab6@x . kd4ab8@args) (begin (if (not (for-all string? kd4ab8@args)) (assertion-violation 'syntax-error '"invalid argument" kd4ab8@args) (void)) (raise (condition (kd4ef4@kd4c8c@make-message-condition (if (null? kd4ab8@args) '"invalid syntax" (apply string-append kd4ab8@args))) (kd4f52@kd4d87@make-syntax-violation (kd31bf@syntax->datum kd4ab6@x) '#f) (kd31af@extract-position-condition kd4ab6@x)))))) (set! kd4c11@kd31b5@syntax-error kd31b5@syntax-error) (set! kd31b7@syntax-violation* (lambda (kd4aba@who kd4abb@msg kd4abc@form kd4abd@condition-object) (begin (if (not (string? kd4abb@msg)) (assertion-violation 'syntax-violation '"message is not a string" kd4abb@msg) (void)) (let ((kd4ac2@who (if (or (string? kd4aba@who) (symbol? kd4aba@who)) kd4aba@who (if (not kd4aba@who) (let ((kd4ac4@t kd4abc@form)) (let ((kd4ac6@ls/false (kd30d9@syntax-dispatch kd4ac4@t 'any))) (if (and kd4ac6@ls/false (apply (lambda (kd4ac8@id) (kd2ed2@id? kd4ac8@id)) kd4ac6@ls/false)) (apply (lambda (kd4aca@id) (kd31bf@syntax->datum kd4aca@id)) kd4ac6@ls/false) (let ((kd4acc@t kd4ac4@t)) (let ((kd4ace@ls/false (kd30d9@syntax-dispatch kd4acc@t '(any . any)))) (if (and kd4ace@ls/false (apply (lambda (kd4ad0@id kd4ad1@rest) (kd2ed2@id? kd4ad0@id)) kd4ace@ls/false)) (apply (lambda (kd4ad4@id kd4ad5@rest) (kd31bf@syntax->datum kd4ad4@id)) kd4ace@ls/false) (let ((kd4ad8@t kd4acc@t)) (let ((kd4ada@ls/false (kd30d9@syntax-dispatch kd4ad8@t '_))) (if kd4ada@ls/false (apply (lambda () '#f) kd4ada@ls/false) (kd31b9@syntax-violation '#f '"invalid syntax" kd4ad8@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" kd4aba@who))))) (raise (condition (if kd4ac2@who (kd4f30@kd4d2b@make-who-condition kd4ac2@who) (condition)) (kd4ef4@kd4c8c@make-message-condition kd4abb@msg) kd4abd@condition-object (kd31af@extract-position-condition kd4abc@form))))))) (set! kd4c12@kd31b7@syntax-violation* kd31b7@syntax-violation*) (set! kd31b9@syntax-violation (lambda kd4aea (let ((kd4aeb (length kd4aea))) (if (= kd4aeb '3) (apply (lambda (kd4adc@who kd4add@msg kd4ade@form) (kd31b9@syntax-violation kd4adc@who kd4add@msg kd4ade@form '#f)) kd4aea) (if (= kd4aeb '4) (apply (lambda (kd4ae2@who kd4ae3@msg kd4ae4@form kd4ae5@subform) (kd31b7@syntax-violation* kd4ae2@who kd4ae3@msg kd4ae4@form (kd4f52@kd4d87@make-syntax-violation (kd31bf@syntax->datum kd4ae4@form) (kd31bf@syntax->datum kd4ae5@subform)))) kd4aea) (error 'apply '"invalid arg count")))))) (set! kd4c13@kd31b9@syntax-violation kd31b9@syntax-violation) (set! kd31bb@identifier? (lambda (kd4aec@x) (kd2ed2@id? kd4aec@x))) (set! kd4c14@kd31bb@identifier? kd31bb@identifier?) (set! kd31bd@datum->syntax (lambda (kd4aee@id kd4aef@datum) (if (kd2ed2@id? kd4aee@id) (kd2eb2@datum->stx kd4aee@id kd4aef@datum) (assertion-violation 'datum->syntax '"not an identifier" kd4aee@id)))) (set! kd4c15@kd31bd@datum->syntax kd31bd@datum->syntax) (set! kd31bf@syntax->datum (lambda (kd4af2@x) (kd2ee6@stx->datum kd4af2@x))) (set! kd4c16@kd31bf@syntax->datum kd31bf@syntax->datum) (set! kd31c1@ungensym-all (lambda (kd4af4@code) (if (pair? kd4af4@code) (cons (kd31c1@ungensym-all (car kd4af4@code)) (kd31c1@ungensym-all (cdr kd4af4@code))) (if (symbol? kd4af4@code) (ungensym kd4af4@code) kd4af4@code)))) (set! kd4c17@kd31c1@ungensym-all kd31c1@ungensym-all) (set! kd31c3@compile-r6rs-top-level (lambda (kd4af6@x*) (call-with-values (lambda () (kd3151@top-level-expander kd4af6@x*)) (lambda (kd4afc@kd4af9 kd4afd@kd4afb) (let ((kd4b00@invoke-code kd4afd@kd4afb) (kd4b01@lib* kd4afc@kd4af9)) (lambda () (begin (for-each kd2ce7@kd2b31@invoke-library kd4b01@lib*) (let ((kd4b04@expanded (kd2a6d@kd2a25@expanded->core kd4b00@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (kd31c1@ungensym-all kd4b04@expanded)) (void)) (eval-core kd4b04@expanded)))))))))) (set! kd4c18@kd31c3@compile-r6rs-top-level kd31c3@compile-r6rs-top-level) (set! kd31c5@pre-compile-r6rs-top-level (lambda (kd4b06@x*) (call-with-values (lambda () (kd3151@top-level-expander kd4b06@x*)) (lambda (kd4b0c@kd4b09 kd4b0d@kd4b0b) (let ((kd4b10@invoke-code kd4b0d@kd4b0b) (kd4b11@lib* kd4b0c@kd4b09)) (begin (for-each kd2ce7@kd2b31@invoke-library kd4b11@lib*) (kd2a15@kd28f1@compile-core (kd2a6d@kd2a25@expanded->core kd4b10@invoke-code)))))))) (set! kd4c19@kd31c5@pre-compile-r6rs-top-level kd31c5@pre-compile-r6rs-top-level) (set! kd31c7@interaction-environment (let ((kd4b14@the-env '#f)) (lambda () (or kd4b14@the-env (let ((kd4b16@lib (kd2ce0@kd2b23@find-library-by-name '(mosh interaction))) (kd4b17@rib (kd2e86@make-empty-rib))) (begin (let ((kd4b1a@subst (kd2cc2@kd2ae7@library-subst kd4b16@lib))) (begin (kd2e72@set-rib-sym*! kd4b17@rib (map car kd4b1a@subst)) (kd2e76@set-rib-mark**! kd4b17@rib (map (lambda (kd4b1c@x) kd2e56@top-mark*) kd4b1a@subst)) (kd2e7a@set-rib-label*! kd4b17@rib (map cdr kd4b1a@subst)))) (let ((kd4b1e@env (make-simple-struct 'interaction-env '4 (list kd4b17@rib '() '())))) (begin (set! kd4b14@the-env kd4b1e@env) kd4b1e@env)))))))) (set! kd4c1a@kd31c7@interaction-environment kd31c7@interaction-environment) (set! kd31c9@top-level-context (kd2a17@kd28f5@make-parameter '#f)) (set! kd4c1b@kd31c9@top-level-context kd31c9@top-level-context) (kd2cdd@kd2b1d@current-library-expander kd319b@library-expander))
(begin (set! kd4c2a@kd4c25 (unspecified)) (set! kd4c2c@kd4c27 (unspecified)) (set! kd4c2e@kd4c26 (unspecified)) (set! kd4c31@&condition? (unspecified)) (set! kd4c33@make-&condition (unspecified)) (set! kd4c35@&condition-rtd (unspecified)) (set! kd4c37@&condition-rcd (unspecified)) (set! kd4c83@kd4c7e (unspecified)) (set! kd4c85@kd4c80 (unspecified)) (set! kd4c87@kd4c7f (unspecified)) (set! kd4c8a@p? (unspecified)) (set! kd4c8c@make-message-condition (unspecified)) (set! kd4c8e@kd4c7d (unspecified)) (set! kd4c90@message-condition? (unspecified)) (set! kd4c92@condition-message (unspecified)) (set! kd4c94@&message-rtd (unspecified)) (set! kd4c96@&message-rcd (unspecified)) (set! kd4c9c@kd4c97 (unspecified)) (set! kd4c9e@kd4c99 (unspecified)) (set! kd4ca0@kd4c98 (unspecified)) (set! kd4ca3@p? (unspecified)) (set! kd4ca5@make-warning (unspecified)) (set! kd4ca7@warning? (unspecified)) (set! kd4ca9@&warning-rtd (unspecified)) (set! kd4cab@&warning-rcd (unspecified)) (set! kd4cb1@kd4cac (unspecified)) (set! kd4cb3@kd4cae (unspecified)) (set! kd4cb5@kd4cad (unspecified)) (set! kd4cb8@p? (unspecified)) (set! kd4cba@make-serious-condition (unspecified)) (set! kd4cbc@serious-condition? (unspecified)) (set! kd4cbe@&serious-rtd (unspecified)) (set! kd4cc0@&serious-rcd (unspecified)) (set! kd4cc6@kd4cc1 (unspecified)) (set! kd4cc8@kd4cc3 (unspecified)) (set! kd4cca@kd4cc2 (unspecified)) (set! kd4ccd@p? (unspecified)) (set! kd4ccf@make-error (unspecified)) (set! kd4cd1@error? (unspecified)) (set! kd4cd3@&error-rtd (unspecified)) (set! kd4cd5@&error-rcd (unspecified)) (set! kd4cdb@kd4cd6 (unspecified)) (set! kd4cdd@kd4cd8 (unspecified)) (set! kd4cdf@kd4cd7 (unspecified)) (set! kd4ce2@p? (unspecified)) (set! kd4ce4@make-violation (unspecified)) (set! kd4ce6@violation? (unspecified)) (set! kd4ce8@&violation-rtd (unspecified)) (set! kd4cea@&violation-rcd (unspecified)) (set! kd4cf0@kd4ceb (unspecified)) (set! kd4cf2@kd4ced (unspecified)) (set! kd4cf4@kd4cec (unspecified)) (set! kd4cf7@p? (unspecified)) (set! kd4cf9@make-assertion-violation (unspecified)) (set! kd4cfb@assertion-violation? (unspecified)) (set! kd4cfd@&assertion-rtd (unspecified)) (set! kd4cff@&assertion-rcd (unspecified)) (set! kd4d07@kd4d02 (unspecified)) (set! kd4d09@kd4d04 (unspecified)) (set! kd4d0b@kd4d03 (unspecified)) (set! kd4d0e@p? (unspecified)) (set! kd4d10@make-irritants-condition (unspecified)) (set! kd4d12@kd4d01 (unspecified)) (set! kd4d14@irritants-condition? (unspecified)) (set! kd4d16@condition-irritants (unspecified)) (set! kd4d18@&irritants-rtd (unspecified)) (set! kd4d1a@&irritants-rcd (unspecified)) (set! kd4d22@kd4d1d (unspecified)) (set! kd4d24@kd4d1f (unspecified)) (set! kd4d26@kd4d1e (unspecified)) (set! kd4d29@p? (unspecified)) (set! kd4d2b@make-who-condition (unspecified)) (set! kd4d2d@kd4d1c (unspecified)) (set! kd4d2f@who-condition? (unspecified)) (set! kd4d31@condition-who (unspecified)) (set! kd4d33@&who-rtd (unspecified)) (set! kd4d35@&who-rcd (unspecified)) (set! kd4d3b@kd4d36 (unspecified)) (set! kd4d3d@kd4d38 (unspecified)) (set! kd4d3f@kd4d37 (unspecified)) (set! kd4d42@p? (unspecified)) (set! kd4d44@make-non-continuable-violation (unspecified)) (set! kd4d46@non-continuable-violation? (unspecified)) (set! kd4d48@&non-continuable-rtd (unspecified)) (set! kd4d4a@&non-continuable-rcd (unspecified)) (set! kd4d50@kd4d4b (unspecified)) (set! kd4d52@kd4d4d (unspecified)) (set! kd4d54@kd4d4c (unspecified)) (set! kd4d57@p? (unspecified)) (set! kd4d59@make-implementation-restriction-violation (unspecified)) (set! kd4d5b@implementation-restriction-violation? (unspecified)) (set! kd4d5d@&implementation-restriction-rtd (unspecified)) (set! kd4d5f@&implementation-restriction-rcd (unspecified)) (set! kd4d65@kd4d60 (unspecified)) (set! kd4d67@kd4d62 (unspecified)) (set! kd4d69@kd4d61 (unspecified)) (set! kd4d6c@p? (unspecified)) (set! kd4d6e@make-lexical-violation (unspecified)) (set! kd4d70@lexical-violation? (unspecified)) (set! kd4d72@&lexical-rtd (unspecified)) (set! kd4d74@&lexical-rcd (unspecified)) (set! kd4d7e@kd4d79 (unspecified)) (set! kd4d80@kd4d7b (unspecified)) (set! kd4d82@kd4d7a (unspecified)) (set! kd4d85@p? (unspecified)) (set! kd4d87@make-syntax-violation (unspecified)) (set! kd4d89@kd4d76 (unspecified)) (set! kd4d8b@kd4d78 (unspecified)) (set! kd4d8d@syntax-violation? (unspecified)) (set! kd4d8f@syntax-violation-form (unspecified)) (set! kd4d91@syntax-violation-subform (unspecified)) (set! kd4d93@&syntax-rtd (unspecified)) (set! kd4d95@&syntax-rcd (unspecified)) (set! kd4d9b@kd4d96 (unspecified)) (set! kd4d9d@kd4d98 (unspecified)) (set! kd4d9f@kd4d97 (unspecified)) (set! kd4da2@p? (unspecified)) (set! kd4da4@make-undefined-violation (unspecified)) (set! kd4da6@undefined-violation? (unspecified)) (set! kd4da8@&undefined-rtd (unspecified)) (set! kd4daa@&undefined-rcd (unspecified)) (set! kd4db0@kd4dab (unspecified)) (set! kd4db2@kd4dad (unspecified)) (set! kd4db4@kd4dac (unspecified)) (set! kd4db7@p? (unspecified)) (set! kd4db9@make-i/o-error (unspecified)) (set! kd4dbb@i/o-error? (unspecified)) (set! kd4dbd@&i/o-rtd (unspecified)) (set! kd4dbf@&i/o-rcd (unspecified)) (set! kd4dc5@kd4dc0 (unspecified)) (set! kd4dc7@kd4dc2 (unspecified)) (set! kd4dc9@kd4dc1 (unspecified)) (set! kd4dcc@p? (unspecified)) (set! kd4dce@make-i/o-read-error (unspecified)) (set! kd4dd0@i/o-read-error? (unspecified)) (set! kd4dd2@&i/o-read-rtd (unspecified)) (set! kd4dd4@&i/o-read-rcd (unspecified)) (set! kd4dda@kd4dd5 (unspecified)) (set! kd4ddc@kd4dd7 (unspecified)) (set! kd4dde@kd4dd6 (unspecified)) (set! kd4de1@p? (unspecified)) (set! kd4de3@make-i/o-write-error (unspecified)) (set! kd4de5@i/o-write-error? (unspecified)) (set! kd4de7@&i/o-write-rtd (unspecified)) (set! kd4de9@&i/o-write-rcd (unspecified)) (set! kd4df1@kd4dec (unspecified)) (set! kd4df3@kd4dee (unspecified)) (set! kd4df5@kd4ded (unspecified)) (set! kd4df8@p? (unspecified)) (set! kd4dfa@make-i/o-invalid-position-error (unspecified)) (set! kd4dfc@kd4deb (unspecified)) (set! kd4dfe@i/o-invalid-position-error? (unspecified)) (set! kd4e00@i/o-error-position (unspecified)) (set! kd4e02@&i/o-invalid-position-rtd (unspecified)) (set! kd4e04@&i/o-invalid-position-rcd (unspecified)) (set! kd4e0c@kd4e07 (unspecified)) (set! kd4e0e@kd4e09 (unspecified)) (set! kd4e10@kd4e08 (unspecified)) (set! kd4e13@p? (unspecified)) (set! kd4e15@make-i/o-filename-error (unspecified)) (set! kd4e17@kd4e06 (unspecified)) (set! kd4e19@i/o-filename-error? (unspecified)) (set! kd4e1b@i/o-error-filename (unspecified)) (set! kd4e1d@&i/o-filename-rtd (unspecified)) (set! kd4e1f@&i/o-filename-rcd (unspecified)) (set! kd4e25@kd4e20 (unspecified)) (set! kd4e27@kd4e22 (unspecified)) (set! kd4e29@kd4e21 (unspecified)) (set! kd4e2c@p? (unspecified)) (set! kd4e2e@make-i/o-file-protection-error (unspecified)) (set! kd4e30@i/o-file-protection-error? (unspecified)) (set! kd4e32@&i/o-file-protection-rtd (unspecified)) (set! kd4e34@&i/o-file-protection-rcd (unspecified)) (set! kd4e3a@kd4e35 (unspecified)) (set! kd4e3c@kd4e37 (unspecified)) (set! kd4e3e@kd4e36 (unspecified)) (set! kd4e41@p? (unspecified)) (set! kd4e43@make-i/o-file-is-read-only-error (unspecified)) (set! kd4e45@i/o-file-is-read-only-error? (unspecified)) (set! kd4e47@&i/o-file-is-read-only-rtd (unspecified)) (set! kd4e49@&i/o-file-is-read-only-rcd (unspecified)) (set! kd4e4f@kd4e4a (unspecified)) (set! kd4e51@kd4e4c (unspecified)) (set! kd4e53@kd4e4b (unspecified)) (set! kd4e56@p? (unspecified)) (set! kd4e58@make-i/o-file-already-exists-error (unspecified)) (set! kd4e5a@i/o-file-already-exists-error? (unspecified)) (set! kd4e5c@&i/o-file-already-exists-rtd (unspecified)) (set! kd4e5e@&i/o-file-already-exists-rcd (unspecified)) (set! kd4e64@kd4e5f (unspecified)) (set! kd4e66@kd4e61 (unspecified)) (set! kd4e68@kd4e60 (unspecified)) (set! kd4e6b@p? (unspecified)) (set! kd4e6d@make-i/o-file-does-not-exist-error (unspecified)) (set! kd4e6f@i/o-file-does-not-exist-error? (unspecified)) (set! kd4e71@&i/o-file-does-not-exist-rtd (unspecified)) (set! kd4e73@&i/o-file-does-not-exist-rcd (unspecified)) (set! kd4e7b@kd4e76 (unspecified)) (set! kd4e7d@kd4e78 (unspecified)) (set! kd4e7f@kd4e77 (unspecified)) (set! kd4e82@p? (unspecified)) (set! kd4e84@make-i/o-port-error (unspecified)) (set! kd4e86@kd4e75 (unspecified)) (set! kd4e88@i/o-port-error? (unspecified)) (set! kd4e8a@i/o-error-port (unspecified)) (set! kd4e8c@&i/o-port-rtd (unspecified)) (set! kd4e8e@&i/o-port-rcd (unspecified)) (set! kd4e94@kd4e8f (unspecified)) (set! kd4e96@kd4e91 (unspecified)) (set! kd4e98@kd4e90 (unspecified)) (set! kd4e9b@p? (unspecified)) (set! kd4e9d@make-i/o-decoding-error (unspecified)) (set! kd4e9f@i/o-decoding-error? (unspecified)) (set! kd4ea1@&i/o-decoding-rtd (unspecified)) (set! kd4ea3@&i/o-decoding-rcd (unspecified)) (set! kd4eab@kd4ea6 (unspecified)) (set! kd4ead@kd4ea8 (unspecified)) (set! kd4eaf@kd4ea7 (unspecified)) (set! kd4eb2@p? (unspecified)) (set! kd4eb4@make-i/o-encoding-error (unspecified)) (set! kd4eb6@kd4ea5 (unspecified)) (set! kd4eb8@i/o-encoding-error? (unspecified)) (set! kd4eba@i/o-encoding-error-char (unspecified)) (set! kd4ebc@&i/o-encoding-rtd (unspecified)) (set! kd4ebe@&i/o-encoding-rcd (unspecified)) (set! kd4ec4@kd4ebf (unspecified)) (set! kd4ec6@kd4ec1 (unspecified)) (set! kd4ec8@kd4ec0 (unspecified)) (set! kd4ecb@p? (unspecified)) (set! kd4ecd@make-no-infinities-violation (unspecified)) (set! kd4ecf@no-infinities-violation? (unspecified)) (set! kd4ed1@&no-infinities-rtd (unspecified)) (set! kd4ed3@&no-infinities-rcd (unspecified)) (set! kd4ed9@kd4ed4 (unspecified)) (set! kd4edb@kd4ed6 (unspecified)) (set! kd4edd@kd4ed5 (unspecified)) (set! kd4ee0@p? (unspecified)) (set! kd4ee2@make-no-nans-violation (unspecified)) (set! kd4ee4@no-nans-violation? (unspecified)) (set! kd4ee6@&no-nans-rtd (unspecified)) (set! kd4ee8@&no-nans-rcd (unspecified)) (set! kd4c2a@kd4c25 (make-record-type-descriptor '&condition '#f 'kd4c28 '#f '#f '#())) (set! kd4ee9@kd4c2a@kd4c25 kd4c2a@kd4c25) (set! kd4c2c@kd4c27 '#f) (set! kd4eea@kd4c2c@kd4c27 kd4c2c@kd4c27) (set! kd4c2e@kd4c26 (make-record-constructor-descriptor kd4c2a@kd4c25 '#f kd4c2c@kd4c27)) (set! kd4eeb@kd4c2e@kd4c26 kd4c2e@kd4c26) (set! kd4c31@&condition? (record-predicate kd4c2a@kd4c25)) (set! kd4eec@kd4c31@&condition? kd4c31@&condition?) (set! kd4c33@make-&condition (record-constructor kd4c2e@kd4c26)) (set! kd4eed@kd4c33@make-&condition kd4c33@make-&condition) (set! kd4c35@&condition-rtd kd4c2a@kd4c25) (set! kd4eee@kd4c35@&condition-rtd kd4c35@&condition-rtd) (set! kd4c37@&condition-rcd kd4c2e@kd4c26) (set! kd4eef@kd4c37@&condition-rcd kd4c37@&condition-rcd) (set! kd4c83@kd4c7e (make-record-type-descriptor '&message kd4c2a@kd4c25 'kd4c81 '#f '#f '#((immutable message)))) (set! kd4ef0@kd4c83@kd4c7e kd4c83@kd4c7e) (set! kd4c85@kd4c80 '#f) (set! kd4ef1@kd4c85@kd4c80 kd4c85@kd4c80) (set! kd4c87@kd4c7f (make-record-constructor-descriptor kd4c83@kd4c7e kd4c2e@kd4c26 kd4c85@kd4c80)) (set! kd4ef2@kd4c87@kd4c7f kd4c87@kd4c7f) (set! kd4c8a@p? (record-predicate kd4c83@kd4c7e)) (set! kd4ef3@kd4c8a@p? kd4c8a@p?) (set! kd4c8c@make-message-condition (record-constructor kd4c87@kd4c7f)) (set! kd4ef4@kd4c8c@make-message-condition kd4c8c@make-message-condition) (set! kd4c8e@kd4c7d (record-accessor kd4c83@kd4c7e '0)) (set! kd4ef5@kd4c8e@kd4c7d kd4c8e@kd4c7d) (set! kd4c90@message-condition? (condition-predicate kd4c83@kd4c7e)) (set! kd4ef6@kd4c90@message-condition? kd4c90@message-condition?) (set! kd4c92@condition-message (condition-accessor kd4c83@kd4c7e kd4c8e@kd4c7d)) (set! kd4ef7@kd4c92@condition-message kd4c92@condition-message) (set! kd4c94@&message-rtd kd4c83@kd4c7e) (set! kd4ef8@kd4c94@&message-rtd kd4c94@&message-rtd) (set! kd4c96@&message-rcd kd4c87@kd4c7f) (set! kd4ef9@kd4c96@&message-rcd kd4c96@&message-rcd) (set! kd4c9c@kd4c97 (make-record-type-descriptor '&warning kd4c2a@kd4c25 'kd4c9a '#f '#f '#())) (set! kd4efa@kd4c9c@kd4c97 kd4c9c@kd4c97) (set! kd4c9e@kd4c99 '#f) (set! kd4efb@kd4c9e@kd4c99 kd4c9e@kd4c99) (set! kd4ca0@kd4c98 (make-record-constructor-descriptor kd4c9c@kd4c97 kd4c2e@kd4c26 kd4c9e@kd4c99)) (set! kd4efc@kd4ca0@kd4c98 kd4ca0@kd4c98) (set! kd4ca3@p? (record-predicate kd4c9c@kd4c97)) (set! kd4efd@kd4ca3@p? kd4ca3@p?) (set! kd4ca5@make-warning (record-constructor kd4ca0@kd4c98)) (set! kd4efe@kd4ca5@make-warning kd4ca5@make-warning) (set! kd4ca7@warning? (condition-predicate kd4c9c@kd4c97)) (set! kd4eff@kd4ca7@warning? kd4ca7@warning?) (set! kd4ca9@&warning-rtd kd4c9c@kd4c97) (set! kd4f00@kd4ca9@&warning-rtd kd4ca9@&warning-rtd) (set! kd4cab@&warning-rcd kd4ca0@kd4c98) (set! kd4f01@kd4cab@&warning-rcd kd4cab@&warning-rcd) (set! kd4cb1@kd4cac (make-record-type-descriptor '&serious kd4c2a@kd4c25 'kd4caf '#f '#f '#())) (set! kd4f02@kd4cb1@kd4cac kd4cb1@kd4cac) (set! kd4cb3@kd4cae '#f) (set! kd4f03@kd4cb3@kd4cae kd4cb3@kd4cae) (set! kd4cb5@kd4cad (make-record-constructor-descriptor kd4cb1@kd4cac kd4c2e@kd4c26 kd4cb3@kd4cae)) (set! kd4f04@kd4cb5@kd4cad kd4cb5@kd4cad) (set! kd4cb8@p? (record-predicate kd4cb1@kd4cac)) (set! kd4f05@kd4cb8@p? kd4cb8@p?) (set! kd4cba@make-serious-condition (record-constructor kd4cb5@kd4cad)) (set! kd4f06@kd4cba@make-serious-condition kd4cba@make-serious-condition) (set! kd4cbc@serious-condition? (condition-predicate kd4cb1@kd4cac)) (set! kd4f07@kd4cbc@serious-condition? kd4cbc@serious-condition?) (set! kd4cbe@&serious-rtd kd4cb1@kd4cac) (set! kd4f08@kd4cbe@&serious-rtd kd4cbe@&serious-rtd) (set! kd4cc0@&serious-rcd kd4cb5@kd4cad) (set! kd4f09@kd4cc0@&serious-rcd kd4cc0@&serious-rcd) (set! kd4cc6@kd4cc1 (make-record-type-descriptor '&error kd4cb1@kd4cac 'kd4cc4 '#f '#f '#())) (set! kd4f0a@kd4cc6@kd4cc1 kd4cc6@kd4cc1) (set! kd4cc8@kd4cc3 '#f) (set! kd4f0b@kd4cc8@kd4cc3 kd4cc8@kd4cc3) (set! kd4cca@kd4cc2 (make-record-constructor-descriptor kd4cc6@kd4cc1 kd4cb5@kd4cad kd4cc8@kd4cc3)) (set! kd4f0c@kd4cca@kd4cc2 kd4cca@kd4cc2) (set! kd4ccd@p? (record-predicate kd4cc6@kd4cc1)) (set! kd4f0d@kd4ccd@p? kd4ccd@p?) (set! kd4ccf@make-error (record-constructor kd4cca@kd4cc2)) (set! kd4f0e@kd4ccf@make-error kd4ccf@make-error) (set! kd4cd1@error? (condition-predicate kd4cc6@kd4cc1)) (set! kd4f0f@kd4cd1@error? kd4cd1@error?) (set! kd4cd3@&error-rtd kd4cc6@kd4cc1) (set! kd4f10@kd4cd3@&error-rtd kd4cd3@&error-rtd) (set! kd4cd5@&error-rcd kd4cca@kd4cc2) (set! kd4f11@kd4cd5@&error-rcd kd4cd5@&error-rcd) (set! kd4cdb@kd4cd6 (make-record-type-descriptor '&violation kd4cb1@kd4cac 'kd4cd9 '#f '#f '#())) (set! kd4f12@kd4cdb@kd4cd6 kd4cdb@kd4cd6) (set! kd4cdd@kd4cd8 '#f) (set! kd4f13@kd4cdd@kd4cd8 kd4cdd@kd4cd8) (set! kd4cdf@kd4cd7 (make-record-constructor-descriptor kd4cdb@kd4cd6 kd4cb5@kd4cad kd4cdd@kd4cd8)) (set! kd4f14@kd4cdf@kd4cd7 kd4cdf@kd4cd7) (set! kd4ce2@p? (record-predicate kd4cdb@kd4cd6)) (set! kd4f15@kd4ce2@p? kd4ce2@p?) (set! kd4ce4@make-violation (record-constructor kd4cdf@kd4cd7)) (set! kd4f16@kd4ce4@make-violation kd4ce4@make-violation) (set! kd4ce6@violation? (condition-predicate kd4cdb@kd4cd6)) (set! kd4f17@kd4ce6@violation? kd4ce6@violation?) (set! kd4ce8@&violation-rtd kd4cdb@kd4cd6) (set! kd4f18@kd4ce8@&violation-rtd kd4ce8@&violation-rtd) (set! kd4cea@&violation-rcd kd4cdf@kd4cd7) (set! kd4f19@kd4cea@&violation-rcd kd4cea@&violation-rcd) (set! kd4cf0@kd4ceb (make-record-type-descriptor '&assertion kd4cdb@kd4cd6 'kd4cee '#f '#f '#())) (set! kd4f1a@kd4cf0@kd4ceb kd4cf0@kd4ceb) (set! kd4cf2@kd4ced '#f) (set! kd4f1b@kd4cf2@kd4ced kd4cf2@kd4ced) (set! kd4cf4@kd4cec (make-record-constructor-descriptor kd4cf0@kd4ceb kd4cdf@kd4cd7 kd4cf2@kd4ced)) (set! kd4f1c@kd4cf4@kd4cec kd4cf4@kd4cec) (set! kd4cf7@p? (record-predicate kd4cf0@kd4ceb)) (set! kd4f1d@kd4cf7@p? kd4cf7@p?) (set! kd4cf9@make-assertion-violation (record-constructor kd4cf4@kd4cec)) (set! kd4f1e@kd4cf9@make-assertion-violation kd4cf9@make-assertion-violation) (set! kd4cfb@assertion-violation? (condition-predicate kd4cf0@kd4ceb)) (set! kd4f1f@kd4cfb@assertion-violation? kd4cfb@assertion-violation?) (set! kd4cfd@&assertion-rtd kd4cf0@kd4ceb) (set! kd4f20@kd4cfd@&assertion-rtd kd4cfd@&assertion-rtd) (set! kd4cff@&assertion-rcd kd4cf4@kd4cec) (set! kd4f21@kd4cff@&assertion-rcd kd4cff@&assertion-rcd) (set! kd4d07@kd4d02 (make-record-type-descriptor '&irritants kd4c2a@kd4c25 'kd4d05 '#f '#f '#((immutable irritants)))) (set! kd4f22@kd4d07@kd4d02 kd4d07@kd4d02) (set! kd4d09@kd4d04 '#f) (set! kd4f23@kd4d09@kd4d04 kd4d09@kd4d04) (set! kd4d0b@kd4d03 (make-record-constructor-descriptor kd4d07@kd4d02 kd4c2e@kd4c26 kd4d09@kd4d04)) (set! kd4f24@kd4d0b@kd4d03 kd4d0b@kd4d03) (set! kd4d0e@p? (record-predicate kd4d07@kd4d02)) (set! kd4f25@kd4d0e@p? kd4d0e@p?) (set! kd4d10@make-irritants-condition (record-constructor kd4d0b@kd4d03)) (set! kd4f26@kd4d10@make-irritants-condition kd4d10@make-irritants-condition) (set! kd4d12@kd4d01 (record-accessor kd4d07@kd4d02 '0)) (set! kd4f27@kd4d12@kd4d01 kd4d12@kd4d01) (set! kd4d14@irritants-condition? (condition-predicate kd4d07@kd4d02)) (set! kd4f28@kd4d14@irritants-condition? kd4d14@irritants-condition?) (set! kd4d16@condition-irritants (condition-accessor kd4d07@kd4d02 kd4d12@kd4d01)) (set! kd4f29@kd4d16@condition-irritants kd4d16@condition-irritants) (set! kd4d18@&irritants-rtd kd4d07@kd4d02) (set! kd4f2a@kd4d18@&irritants-rtd kd4d18@&irritants-rtd) (set! kd4d1a@&irritants-rcd kd4d0b@kd4d03) (set! kd4f2b@kd4d1a@&irritants-rcd kd4d1a@&irritants-rcd) (set! kd4d22@kd4d1d (make-record-type-descriptor '&who kd4c2a@kd4c25 'kd4d20 '#f '#f '#((immutable who)))) (set! kd4f2c@kd4d22@kd4d1d kd4d22@kd4d1d) (set! kd4d24@kd4d1f '#f) (set! kd4f2d@kd4d24@kd4d1f kd4d24@kd4d1f) (set! kd4d26@kd4d1e (make-record-constructor-descriptor kd4d22@kd4d1d kd4c2e@kd4c26 kd4d24@kd4d1f)) (set! kd4f2e@kd4d26@kd4d1e kd4d26@kd4d1e) (set! kd4d29@p? (record-predicate kd4d22@kd4d1d)) (set! kd4f2f@kd4d29@p? kd4d29@p?) (set! kd4d2b@make-who-condition (record-constructor kd4d26@kd4d1e)) (set! kd4f30@kd4d2b@make-who-condition kd4d2b@make-who-condition) (set! kd4d2d@kd4d1c (record-accessor kd4d22@kd4d1d '0)) (set! kd4f31@kd4d2d@kd4d1c kd4d2d@kd4d1c) (set! kd4d2f@who-condition? (condition-predicate kd4d22@kd4d1d)) (set! kd4f32@kd4d2f@who-condition? kd4d2f@who-condition?) (set! kd4d31@condition-who (condition-accessor kd4d22@kd4d1d kd4d2d@kd4d1c)) (set! kd4f33@kd4d31@condition-who kd4d31@condition-who) (set! kd4d33@&who-rtd kd4d22@kd4d1d) (set! kd4f34@kd4d33@&who-rtd kd4d33@&who-rtd) (set! kd4d35@&who-rcd kd4d26@kd4d1e) (set! kd4f35@kd4d35@&who-rcd kd4d35@&who-rcd) (set! kd4d3b@kd4d36 (make-record-type-descriptor '&non-continuable kd4cdb@kd4cd6 'kd4d39 '#f '#f '#())) (set! kd4f36@kd4d3b@kd4d36 kd4d3b@kd4d36) (set! kd4d3d@kd4d38 '#f) (set! kd4f37@kd4d3d@kd4d38 kd4d3d@kd4d38) (set! kd4d3f@kd4d37 (make-record-constructor-descriptor kd4d3b@kd4d36 kd4cdf@kd4cd7 kd4d3d@kd4d38)) (set! kd4f38@kd4d3f@kd4d37 kd4d3f@kd4d37) (set! kd4d42@p? (record-predicate kd4d3b@kd4d36)) (set! kd4f39@kd4d42@p? kd4d42@p?) (set! kd4d44@make-non-continuable-violation (record-constructor kd4d3f@kd4d37)) (set! kd4f3a@kd4d44@make-non-continuable-violation kd4d44@make-non-continuable-violation) (set! kd4d46@non-continuable-violation? (condition-predicate kd4d3b@kd4d36)) (set! kd4f3b@kd4d46@non-continuable-violation? kd4d46@non-continuable-violation?) (set! kd4d48@&non-continuable-rtd kd4d3b@kd4d36) (set! kd4f3c@kd4d48@&non-continuable-rtd kd4d48@&non-continuable-rtd) (set! kd4d4a@&non-continuable-rcd kd4d3f@kd4d37) (set! kd4f3d@kd4d4a@&non-continuable-rcd kd4d4a@&non-continuable-rcd) (set! kd4d50@kd4d4b (make-record-type-descriptor '&implementation-restriction kd4cdb@kd4cd6 'kd4d4e '#f '#f '#())) (set! kd4f3e@kd4d50@kd4d4b kd4d50@kd4d4b) (set! kd4d52@kd4d4d '#f) (set! kd4f3f@kd4d52@kd4d4d kd4d52@kd4d4d) (set! kd4d54@kd4d4c (make-record-constructor-descriptor kd4d50@kd4d4b kd4cdf@kd4cd7 kd4d52@kd4d4d)) (set! kd4f40@kd4d54@kd4d4c kd4d54@kd4d4c) (set! kd4d57@p? (record-predicate kd4d50@kd4d4b)) (set! kd4f41@kd4d57@p? kd4d57@p?) (set! kd4d59@make-implementation-restriction-violation (record-constructor kd4d54@kd4d4c)) (set! kd4f42@kd4d59@make-implementation-restriction-violation kd4d59@make-implementation-restriction-violation) (set! kd4d5b@implementation-restriction-violation? (condition-predicate kd4d50@kd4d4b)) (set! kd4f43@kd4d5b@implementation-restriction-violation? kd4d5b@implementation-restriction-violation?) (set! kd4d5d@&implementation-restriction-rtd kd4d50@kd4d4b) (set! kd4f44@kd4d5d@&implementation-restriction-rtd kd4d5d@&implementation-restriction-rtd) (set! kd4d5f@&implementation-restriction-rcd kd4d54@kd4d4c) (set! kd4f45@kd4d5f@&implementation-restriction-rcd kd4d5f@&implementation-restriction-rcd) (set! kd4d65@kd4d60 (make-record-type-descriptor '&lexical kd4cdb@kd4cd6 'kd4d63 '#f '#f '#())) (set! kd4f46@kd4d65@kd4d60 kd4d65@kd4d60) (set! kd4d67@kd4d62 '#f) (set! kd4f47@kd4d67@kd4d62 kd4d67@kd4d62) (set! kd4d69@kd4d61 (make-record-constructor-descriptor kd4d65@kd4d60 kd4cdf@kd4cd7 kd4d67@kd4d62)) (set! kd4f48@kd4d69@kd4d61 kd4d69@kd4d61) (set! kd4d6c@p? (record-predicate kd4d65@kd4d60)) (set! kd4f49@kd4d6c@p? kd4d6c@p?) (set! kd4d6e@make-lexical-violation (record-constructor kd4d69@kd4d61)) (set! kd4f4a@kd4d6e@make-lexical-violation kd4d6e@make-lexical-violation) (set! kd4d70@lexical-violation? (condition-predicate kd4d65@kd4d60)) (set! kd4f4b@kd4d70@lexical-violation? kd4d70@lexical-violation?) (set! kd4d72@&lexical-rtd kd4d65@kd4d60) (set! kd4f4c@kd4d72@&lexical-rtd kd4d72@&lexical-rtd) (set! kd4d74@&lexical-rcd kd4d69@kd4d61) (set! kd4f4d@kd4d74@&lexical-rcd kd4d74@&lexical-rcd) (set! kd4d7e@kd4d79 (make-record-type-descriptor '&syntax kd4cdb@kd4cd6 'kd4d7c '#f '#f '#((immutable form) (immutable subform)))) (set! kd4f4e@kd4d7e@kd4d79 kd4d7e@kd4d79) (set! kd4d80@kd4d7b '#f) (set! kd4f4f@kd4d80@kd4d7b kd4d80@kd4d7b) (set! kd4d82@kd4d7a (make-record-constructor-descriptor kd4d7e@kd4d79 kd4cdf@kd4cd7 kd4d80@kd4d7b)) (set! kd4f50@kd4d82@kd4d7a kd4d82@kd4d7a) (set! kd4d85@p? (record-predicate kd4d7e@kd4d79)) (set! kd4f51@kd4d85@p? kd4d85@p?) (set! kd4d87@make-syntax-violation (record-constructor kd4d82@kd4d7a)) (set! kd4f52@kd4d87@make-syntax-violation kd4d87@make-syntax-violation) (set! kd4d89@kd4d76 (record-accessor kd4d7e@kd4d79 '0)) (set! kd4f53@kd4d89@kd4d76 kd4d89@kd4d76) (set! kd4d8b@kd4d78 (record-accessor kd4d7e@kd4d79 '1)) (set! kd4f54@kd4d8b@kd4d78 kd4d8b@kd4d78) (set! kd4d8d@syntax-violation? (condition-predicate kd4d7e@kd4d79)) (set! kd4f55@kd4d8d@syntax-violation? kd4d8d@syntax-violation?) (set! kd4d8f@syntax-violation-form (condition-accessor kd4d7e@kd4d79 kd4d89@kd4d76)) (set! kd4f56@kd4d8f@syntax-violation-form kd4d8f@syntax-violation-form) (set! kd4d91@syntax-violation-subform (condition-accessor kd4d7e@kd4d79 kd4d8b@kd4d78)) (set! kd4f57@kd4d91@syntax-violation-subform kd4d91@syntax-violation-subform) (set! kd4d93@&syntax-rtd kd4d7e@kd4d79) (set! kd4f58@kd4d93@&syntax-rtd kd4d93@&syntax-rtd) (set! kd4d95@&syntax-rcd kd4d82@kd4d7a) (set! kd4f59@kd4d95@&syntax-rcd kd4d95@&syntax-rcd) (set! kd4d9b@kd4d96 (make-record-type-descriptor '&undefined kd4cdb@kd4cd6 'kd4d99 '#f '#f '#())) (set! kd4f5a@kd4d9b@kd4d96 kd4d9b@kd4d96) (set! kd4d9d@kd4d98 '#f) (set! kd4f5b@kd4d9d@kd4d98 kd4d9d@kd4d98) (set! kd4d9f@kd4d97 (make-record-constructor-descriptor kd4d9b@kd4d96 kd4cdf@kd4cd7 kd4d9d@kd4d98)) (set! kd4f5c@kd4d9f@kd4d97 kd4d9f@kd4d97) (set! kd4da2@p? (record-predicate kd4d9b@kd4d96)) (set! kd4f5d@kd4da2@p? kd4da2@p?) (set! kd4da4@make-undefined-violation (record-constructor kd4d9f@kd4d97)) (set! kd4f5e@kd4da4@make-undefined-violation kd4da4@make-undefined-violation) (set! kd4da6@undefined-violation? (condition-predicate kd4d9b@kd4d96)) (set! kd4f5f@kd4da6@undefined-violation? kd4da6@undefined-violation?) (set! kd4da8@&undefined-rtd kd4d9b@kd4d96) (set! kd4f60@kd4da8@&undefined-rtd kd4da8@&undefined-rtd) (set! kd4daa@&undefined-rcd kd4d9f@kd4d97) (set! kd4f61@kd4daa@&undefined-rcd kd4daa@&undefined-rcd) (set! kd4db0@kd4dab (make-record-type-descriptor '&i/o kd4cc6@kd4cc1 'kd4dae '#f '#f '#())) (set! kd4f62@kd4db0@kd4dab kd4db0@kd4dab) (set! kd4db2@kd4dad '#f) (set! kd4f63@kd4db2@kd4dad kd4db2@kd4dad) (set! kd4db4@kd4dac (make-record-constructor-descriptor kd4db0@kd4dab kd4cca@kd4cc2 kd4db2@kd4dad)) (set! kd4f64@kd4db4@kd4dac kd4db4@kd4dac) (set! kd4db7@p? (record-predicate kd4db0@kd4dab)) (set! kd4f65@kd4db7@p? kd4db7@p?) (set! kd4db9@make-i/o-error (record-constructor kd4db4@kd4dac)) (set! kd4f66@kd4db9@make-i/o-error kd4db9@make-i/o-error) (set! kd4dbb@i/o-error? (condition-predicate kd4db0@kd4dab)) (set! kd4f67@kd4dbb@i/o-error? kd4dbb@i/o-error?) (set! kd4dbd@&i/o-rtd kd4db0@kd4dab) (set! kd4f68@kd4dbd@&i/o-rtd kd4dbd@&i/o-rtd) (set! kd4dbf@&i/o-rcd kd4db4@kd4dac) (set! kd4f69@kd4dbf@&i/o-rcd kd4dbf@&i/o-rcd) (set! kd4dc5@kd4dc0 (make-record-type-descriptor '&i/o-read kd4db0@kd4dab 'kd4dc3 '#f '#f '#())) (set! kd4f6a@kd4dc5@kd4dc0 kd4dc5@kd4dc0) (set! kd4dc7@kd4dc2 '#f) (set! kd4f6b@kd4dc7@kd4dc2 kd4dc7@kd4dc2) (set! kd4dc9@kd4dc1 (make-record-constructor-descriptor kd4dc5@kd4dc0 kd4db4@kd4dac kd4dc7@kd4dc2)) (set! kd4f6c@kd4dc9@kd4dc1 kd4dc9@kd4dc1) (set! kd4dcc@p? (record-predicate kd4dc5@kd4dc0)) (set! kd4f6d@kd4dcc@p? kd4dcc@p?) (set! kd4dce@make-i/o-read-error (record-constructor kd4dc9@kd4dc1)) (set! kd4f6e@kd4dce@make-i/o-read-error kd4dce@make-i/o-read-error) (set! kd4dd0@i/o-read-error? (condition-predicate kd4dc5@kd4dc0)) (set! kd4f6f@kd4dd0@i/o-read-error? kd4dd0@i/o-read-error?) (set! kd4dd2@&i/o-read-rtd kd4dc5@kd4dc0) (set! kd4f70@kd4dd2@&i/o-read-rtd kd4dd2@&i/o-read-rtd) (set! kd4dd4@&i/o-read-rcd kd4dc9@kd4dc1) (set! kd4f71@kd4dd4@&i/o-read-rcd kd4dd4@&i/o-read-rcd) (set! kd4dda@kd4dd5 (make-record-type-descriptor '&i/o-write kd4db0@kd4dab 'kd4dd8 '#f '#f '#())) (set! kd4f72@kd4dda@kd4dd5 kd4dda@kd4dd5) (set! kd4ddc@kd4dd7 '#f) (set! kd4f73@kd4ddc@kd4dd7 kd4ddc@kd4dd7) (set! kd4dde@kd4dd6 (make-record-constructor-descriptor kd4dda@kd4dd5 kd4db4@kd4dac kd4ddc@kd4dd7)) (set! kd4f74@kd4dde@kd4dd6 kd4dde@kd4dd6) (set! kd4de1@p? (record-predicate kd4dda@kd4dd5)) (set! kd4f75@kd4de1@p? kd4de1@p?) (set! kd4de3@make-i/o-write-error (record-constructor kd4dde@kd4dd6)) (set! kd4f76@kd4de3@make-i/o-write-error kd4de3@make-i/o-write-error) (set! kd4de5@i/o-write-error? (condition-predicate kd4dda@kd4dd5)) (set! kd4f77@kd4de5@i/o-write-error? kd4de5@i/o-write-error?) (set! kd4de7@&i/o-write-rtd kd4dda@kd4dd5) (set! kd4f78@kd4de7@&i/o-write-rtd kd4de7@&i/o-write-rtd) (set! kd4de9@&i/o-write-rcd kd4dde@kd4dd6) (set! kd4f79@kd4de9@&i/o-write-rcd kd4de9@&i/o-write-rcd) (set! kd4df1@kd4dec (make-record-type-descriptor '&i/o-invalid-position kd4db0@kd4dab 'kd4def '#f '#f '#((immutable position)))) (set! kd4f7a@kd4df1@kd4dec kd4df1@kd4dec) (set! kd4df3@kd4dee '#f) (set! kd4f7b@kd4df3@kd4dee kd4df3@kd4dee) (set! kd4df5@kd4ded (make-record-constructor-descriptor kd4df1@kd4dec kd4db4@kd4dac kd4df3@kd4dee)) (set! kd4f7c@kd4df5@kd4ded kd4df5@kd4ded) (set! kd4df8@p? (record-predicate kd4df1@kd4dec)) (set! kd4f7d@kd4df8@p? kd4df8@p?) (set! kd4dfa@make-i/o-invalid-position-error (record-constructor kd4df5@kd4ded)) (set! kd4f7e@kd4dfa@make-i/o-invalid-position-error kd4dfa@make-i/o-invalid-position-error) (set! kd4dfc@kd4deb (record-accessor kd4df1@kd4dec '0)) (set! kd4f7f@kd4dfc@kd4deb kd4dfc@kd4deb) (set! kd4dfe@i/o-invalid-position-error? (condition-predicate kd4df1@kd4dec)) (set! kd4f80@kd4dfe@i/o-invalid-position-error? kd4dfe@i/o-invalid-position-error?) (set! kd4e00@i/o-error-position (condition-accessor kd4df1@kd4dec kd4dfc@kd4deb)) (set! kd4f81@kd4e00@i/o-error-position kd4e00@i/o-error-position) (set! kd4e02@&i/o-invalid-position-rtd kd4df1@kd4dec) (set! kd4f82@kd4e02@&i/o-invalid-position-rtd kd4e02@&i/o-invalid-position-rtd) (set! kd4e04@&i/o-invalid-position-rcd kd4df5@kd4ded) (set! kd4f83@kd4e04@&i/o-invalid-position-rcd kd4e04@&i/o-invalid-position-rcd) (set! kd4e0c@kd4e07 (make-record-type-descriptor '&i/o-filename kd4db0@kd4dab 'kd4e0a '#f '#f '#((immutable filename)))) (set! kd4f84@kd4e0c@kd4e07 kd4e0c@kd4e07) (set! kd4e0e@kd4e09 '#f) (set! kd4f85@kd4e0e@kd4e09 kd4e0e@kd4e09) (set! kd4e10@kd4e08 (make-record-constructor-descriptor kd4e0c@kd4e07 kd4db4@kd4dac kd4e0e@kd4e09)) (set! kd4f86@kd4e10@kd4e08 kd4e10@kd4e08) (set! kd4e13@p? (record-predicate kd4e0c@kd4e07)) (set! kd4f87@kd4e13@p? kd4e13@p?) (set! kd4e15@make-i/o-filename-error (record-constructor kd4e10@kd4e08)) (set! kd4f88@kd4e15@make-i/o-filename-error kd4e15@make-i/o-filename-error) (set! kd4e17@kd4e06 (record-accessor kd4e0c@kd4e07 '0)) (set! kd4f89@kd4e17@kd4e06 kd4e17@kd4e06) (set! kd4e19@i/o-filename-error? (condition-predicate kd4e0c@kd4e07)) (set! kd4f8a@kd4e19@i/o-filename-error? kd4e19@i/o-filename-error?) (set! kd4e1b@i/o-error-filename (condition-accessor kd4e0c@kd4e07 kd4e17@kd4e06)) (set! kd4f8b@kd4e1b@i/o-error-filename kd4e1b@i/o-error-filename) (set! kd4e1d@&i/o-filename-rtd kd4e0c@kd4e07) (set! kd4f8c@kd4e1d@&i/o-filename-rtd kd4e1d@&i/o-filename-rtd) (set! kd4e1f@&i/o-filename-rcd kd4e10@kd4e08) (set! kd4f8d@kd4e1f@&i/o-filename-rcd kd4e1f@&i/o-filename-rcd) (set! kd4e25@kd4e20 (make-record-type-descriptor '&i/o-file-protection kd4e0c@kd4e07 'kd4e23 '#f '#f '#())) (set! kd4f8e@kd4e25@kd4e20 kd4e25@kd4e20) (set! kd4e27@kd4e22 '#f) (set! kd4f8f@kd4e27@kd4e22 kd4e27@kd4e22) (set! kd4e29@kd4e21 (make-record-constructor-descriptor kd4e25@kd4e20 kd4e10@kd4e08 kd4e27@kd4e22)) (set! kd4f90@kd4e29@kd4e21 kd4e29@kd4e21) (set! kd4e2c@p? (record-predicate kd4e25@kd4e20)) (set! kd4f91@kd4e2c@p? kd4e2c@p?) (set! kd4e2e@make-i/o-file-protection-error (record-constructor kd4e29@kd4e21)) (set! kd4f92@kd4e2e@make-i/o-file-protection-error kd4e2e@make-i/o-file-protection-error) (set! kd4e30@i/o-file-protection-error? (condition-predicate kd4e25@kd4e20)) (set! kd4f93@kd4e30@i/o-file-protection-error? kd4e30@i/o-file-protection-error?) (set! kd4e32@&i/o-file-protection-rtd kd4e25@kd4e20) (set! kd4f94@kd4e32@&i/o-file-protection-rtd kd4e32@&i/o-file-protection-rtd) (set! kd4e34@&i/o-file-protection-rcd kd4e29@kd4e21) (set! kd4f95@kd4e34@&i/o-file-protection-rcd kd4e34@&i/o-file-protection-rcd) (set! kd4e3a@kd4e35 (make-record-type-descriptor '&i/o-file-is-read-only kd4e25@kd4e20 'kd4e38 '#f '#f '#())) (set! kd4f96@kd4e3a@kd4e35 kd4e3a@kd4e35) (set! kd4e3c@kd4e37 '#f) (set! kd4f97@kd4e3c@kd4e37 kd4e3c@kd4e37) (set! kd4e3e@kd4e36 (make-record-constructor-descriptor kd4e3a@kd4e35 kd4e29@kd4e21 kd4e3c@kd4e37)) (set! kd4f98@kd4e3e@kd4e36 kd4e3e@kd4e36) (set! kd4e41@p? (record-predicate kd4e3a@kd4e35)) (set! kd4f99@kd4e41@p? kd4e41@p?) (set! kd4e43@make-i/o-file-is-read-only-error (record-constructor kd4e3e@kd4e36)) (set! kd4f9a@kd4e43@make-i/o-file-is-read-only-error kd4e43@make-i/o-file-is-read-only-error) (set! kd4e45@i/o-file-is-read-only-error? (condition-predicate kd4e3a@kd4e35)) (set! kd4f9b@kd4e45@i/o-file-is-read-only-error? kd4e45@i/o-file-is-read-only-error?) (set! kd4e47@&i/o-file-is-read-only-rtd kd4e3a@kd4e35) (set! kd4f9c@kd4e47@&i/o-file-is-read-only-rtd kd4e47@&i/o-file-is-read-only-rtd) (set! kd4e49@&i/o-file-is-read-only-rcd kd4e3e@kd4e36) (set! kd4f9d@kd4e49@&i/o-file-is-read-only-rcd kd4e49@&i/o-file-is-read-only-rcd) (set! kd4e4f@kd4e4a (make-record-type-descriptor '&i/o-file-already-exists kd4e0c@kd4e07 'kd4e4d '#f '#f '#())) (set! kd4f9e@kd4e4f@kd4e4a kd4e4f@kd4e4a) (set! kd4e51@kd4e4c '#f) (set! kd4f9f@kd4e51@kd4e4c kd4e51@kd4e4c) (set! kd4e53@kd4e4b (make-record-constructor-descriptor kd4e4f@kd4e4a kd4e10@kd4e08 kd4e51@kd4e4c)) (set! kd4fa0@kd4e53@kd4e4b kd4e53@kd4e4b) (set! kd4e56@p? (record-predicate kd4e4f@kd4e4a)) (set! kd4fa1@kd4e56@p? kd4e56@p?) (set! kd4e58@make-i/o-file-already-exists-error (record-constructor kd4e53@kd4e4b)) (set! kd4fa2@kd4e58@make-i/o-file-already-exists-error kd4e58@make-i/o-file-already-exists-error) (set! kd4e5a@i/o-file-already-exists-error? (condition-predicate kd4e4f@kd4e4a)) (set! kd4fa3@kd4e5a@i/o-file-already-exists-error? kd4e5a@i/o-file-already-exists-error?) (set! kd4e5c@&i/o-file-already-exists-rtd kd4e4f@kd4e4a) (set! kd4fa4@kd4e5c@&i/o-file-already-exists-rtd kd4e5c@&i/o-file-already-exists-rtd) (set! kd4e5e@&i/o-file-already-exists-rcd kd4e53@kd4e4b) (set! kd4fa5@kd4e5e@&i/o-file-already-exists-rcd kd4e5e@&i/o-file-already-exists-rcd) (set! kd4e64@kd4e5f (make-record-type-descriptor '&i/o-file-does-not-exist kd4e0c@kd4e07 'kd4e62 '#f '#f '#())) (set! kd4fa6@kd4e64@kd4e5f kd4e64@kd4e5f) (set! kd4e66@kd4e61 '#f) (set! kd4fa7@kd4e66@kd4e61 kd4e66@kd4e61) (set! kd4e68@kd4e60 (make-record-constructor-descriptor kd4e64@kd4e5f kd4e10@kd4e08 kd4e66@kd4e61)) (set! kd4fa8@kd4e68@kd4e60 kd4e68@kd4e60) (set! kd4e6b@p? (record-predicate kd4e64@kd4e5f)) (set! kd4fa9@kd4e6b@p? kd4e6b@p?) (set! kd4e6d@make-i/o-file-does-not-exist-error (record-constructor kd4e68@kd4e60)) (set! kd4faa@kd4e6d@make-i/o-file-does-not-exist-error kd4e6d@make-i/o-file-does-not-exist-error) (set! kd4e6f@i/o-file-does-not-exist-error? (condition-predicate kd4e64@kd4e5f)) (set! kd4fab@kd4e6f@i/o-file-does-not-exist-error? kd4e6f@i/o-file-does-not-exist-error?) (set! kd4e71@&i/o-file-does-not-exist-rtd kd4e64@kd4e5f) (set! kd4fac@kd4e71@&i/o-file-does-not-exist-rtd kd4e71@&i/o-file-does-not-exist-rtd) (set! kd4e73@&i/o-file-does-not-exist-rcd kd4e68@kd4e60) (set! kd4fad@kd4e73@&i/o-file-does-not-exist-rcd kd4e73@&i/o-file-does-not-exist-rcd) (set! kd4e7b@kd4e76 (make-record-type-descriptor '&i/o-port kd4db0@kd4dab 'kd4e79 '#f '#f '#((immutable port)))) (set! kd4fae@kd4e7b@kd4e76 kd4e7b@kd4e76) (set! kd4e7d@kd4e78 '#f) (set! kd4faf@kd4e7d@kd4e78 kd4e7d@kd4e78) (set! kd4e7f@kd4e77 (make-record-constructor-descriptor kd4e7b@kd4e76 kd4db4@kd4dac kd4e7d@kd4e78)) (set! kd4fb0@kd4e7f@kd4e77 kd4e7f@kd4e77) (set! kd4e82@p? (record-predicate kd4e7b@kd4e76)) (set! kd4fb1@kd4e82@p? kd4e82@p?) (set! kd4e84@make-i/o-port-error (record-constructor kd4e7f@kd4e77)) (set! kd4fb2@kd4e84@make-i/o-port-error kd4e84@make-i/o-port-error) (set! kd4e86@kd4e75 (record-accessor kd4e7b@kd4e76 '0)) (set! kd4fb3@kd4e86@kd4e75 kd4e86@kd4e75) (set! kd4e88@i/o-port-error? (condition-predicate kd4e7b@kd4e76)) (set! kd4fb4@kd4e88@i/o-port-error? kd4e88@i/o-port-error?) (set! kd4e8a@i/o-error-port (condition-accessor kd4e7b@kd4e76 kd4e86@kd4e75)) (set! kd4fb5@kd4e8a@i/o-error-port kd4e8a@i/o-error-port) (set! kd4e8c@&i/o-port-rtd kd4e7b@kd4e76) (set! kd4fb6@kd4e8c@&i/o-port-rtd kd4e8c@&i/o-port-rtd) (set! kd4e8e@&i/o-port-rcd kd4e7f@kd4e77) (set! kd4fb7@kd4e8e@&i/o-port-rcd kd4e8e@&i/o-port-rcd) (set! kd4e94@kd4e8f (make-record-type-descriptor '&i/o-decoding kd4e7b@kd4e76 'kd4e92 '#f '#f '#())) (set! kd4fb8@kd4e94@kd4e8f kd4e94@kd4e8f) (set! kd4e96@kd4e91 '#f) (set! kd4fb9@kd4e96@kd4e91 kd4e96@kd4e91) (set! kd4e98@kd4e90 (make-record-constructor-descriptor kd4e94@kd4e8f kd4e7f@kd4e77 kd4e96@kd4e91)) (set! kd4fba@kd4e98@kd4e90 kd4e98@kd4e90) (set! kd4e9b@p? (record-predicate kd4e94@kd4e8f)) (set! kd4fbb@kd4e9b@p? kd4e9b@p?) (set! kd4e9d@make-i/o-decoding-error (record-constructor kd4e98@kd4e90)) (set! kd4fbc@kd4e9d@make-i/o-decoding-error kd4e9d@make-i/o-decoding-error) (set! kd4e9f@i/o-decoding-error? (condition-predicate kd4e94@kd4e8f)) (set! kd4fbd@kd4e9f@i/o-decoding-error? kd4e9f@i/o-decoding-error?) (set! kd4ea1@&i/o-decoding-rtd kd4e94@kd4e8f) (set! kd4fbe@kd4ea1@&i/o-decoding-rtd kd4ea1@&i/o-decoding-rtd) (set! kd4ea3@&i/o-decoding-rcd kd4e98@kd4e90) (set! kd4fbf@kd4ea3@&i/o-decoding-rcd kd4ea3@&i/o-decoding-rcd) (set! kd4eab@kd4ea6 (make-record-type-descriptor '&i/o-encoding kd4e7b@kd4e76 'kd4ea9 '#f '#f '#((immutable char)))) (set! kd4fc0@kd4eab@kd4ea6 kd4eab@kd4ea6) (set! kd4ead@kd4ea8 '#f) (set! kd4fc1@kd4ead@kd4ea8 kd4ead@kd4ea8) (set! kd4eaf@kd4ea7 (make-record-constructor-descriptor kd4eab@kd4ea6 kd4e7f@kd4e77 kd4ead@kd4ea8)) (set! kd4fc2@kd4eaf@kd4ea7 kd4eaf@kd4ea7) (set! kd4eb2@p? (record-predicate kd4eab@kd4ea6)) (set! kd4fc3@kd4eb2@p? kd4eb2@p?) (set! kd4eb4@make-i/o-encoding-error (record-constructor kd4eaf@kd4ea7)) (set! kd4fc4@kd4eb4@make-i/o-encoding-error kd4eb4@make-i/o-encoding-error) (set! kd4eb6@kd4ea5 (record-accessor kd4eab@kd4ea6 '0)) (set! kd4fc5@kd4eb6@kd4ea5 kd4eb6@kd4ea5) (set! kd4eb8@i/o-encoding-error? (condition-predicate kd4eab@kd4ea6)) (set! kd4fc6@kd4eb8@i/o-encoding-error? kd4eb8@i/o-encoding-error?) (set! kd4eba@i/o-encoding-error-char (condition-accessor kd4eab@kd4ea6 kd4eb6@kd4ea5)) (set! kd4fc7@kd4eba@i/o-encoding-error-char kd4eba@i/o-encoding-error-char) (set! kd4ebc@&i/o-encoding-rtd kd4eab@kd4ea6) (set! kd4fc8@kd4ebc@&i/o-encoding-rtd kd4ebc@&i/o-encoding-rtd) (set! kd4ebe@&i/o-encoding-rcd kd4eaf@kd4ea7) (set! kd4fc9@kd4ebe@&i/o-encoding-rcd kd4ebe@&i/o-encoding-rcd) (set! kd4ec4@kd4ebf (make-record-type-descriptor '&no-infinities kd4d50@kd4d4b 'kd4ec2 '#f '#f '#())) (set! kd4fca@kd4ec4@kd4ebf kd4ec4@kd4ebf) (set! kd4ec6@kd4ec1 '#f) (set! kd4fcb@kd4ec6@kd4ec1 kd4ec6@kd4ec1) (set! kd4ec8@kd4ec0 (make-record-constructor-descriptor kd4ec4@kd4ebf kd4d54@kd4d4c kd4ec6@kd4ec1)) (set! kd4fcc@kd4ec8@kd4ec0 kd4ec8@kd4ec0) (set! kd4ecb@p? (record-predicate kd4ec4@kd4ebf)) (set! kd4fcd@kd4ecb@p? kd4ecb@p?) (set! kd4ecd@make-no-infinities-violation (record-constructor kd4ec8@kd4ec0)) (set! kd4fce@kd4ecd@make-no-infinities-violation kd4ecd@make-no-infinities-violation) (set! kd4ecf@no-infinities-violation? (condition-predicate kd4ec4@kd4ebf)) (set! kd4fcf@kd4ecf@no-infinities-violation? kd4ecf@no-infinities-violation?) (set! kd4ed1@&no-infinities-rtd kd4ec4@kd4ebf) (set! kd4fd0@kd4ed1@&no-infinities-rtd kd4ed1@&no-infinities-rtd) (set! kd4ed3@&no-infinities-rcd kd4ec8@kd4ec0) (set! kd4fd1@kd4ed3@&no-infinities-rcd kd4ed3@&no-infinities-rcd) (set! kd4ed9@kd4ed4 (make-record-type-descriptor '&no-nans kd4d50@kd4d4b 'kd4ed7 '#f '#f '#())) (set! kd4fd2@kd4ed9@kd4ed4 kd4ed9@kd4ed4) (set! kd4edb@kd4ed6 '#f) (set! kd4fd3@kd4edb@kd4ed6 kd4edb@kd4ed6) (set! kd4edd@kd4ed5 (make-record-constructor-descriptor kd4ed9@kd4ed4 kd4d54@kd4d4c kd4edb@kd4ed6)) (set! kd4fd4@kd4edd@kd4ed5 kd4edd@kd4ed5) (set! kd4ee0@p? (record-predicate kd4ed9@kd4ed4)) (set! kd4fd5@kd4ee0@p? kd4ee0@p?) (set! kd4ee2@make-no-nans-violation (record-constructor kd4edd@kd4ed5)) (set! kd4fd6@kd4ee2@make-no-nans-violation kd4ee2@make-no-nans-violation) (set! kd4ee4@no-nans-violation? (condition-predicate kd4ed9@kd4ed4)) (set! kd4fd7@kd4ee4@no-nans-violation? kd4ee4@no-nans-violation?) (set! kd4ee6@&no-nans-rtd kd4ed9@kd4ed4) (set! kd4fd8@kd4ee6@&no-nans-rtd kd4ee6@&no-nans-rtd) (set! kd4ee8@&no-nans-rcd kd4edd@kd4ed5) (set! kd4fd9@kd4ee8@&no-nans-rcd kd4ee8@&no-nans-rcd) (void))
(begin (begin (kd2a6a@kd2a1f@current-primitive-locations (lambda (kd54a0@x) (let ((kd54a2@t (assq kd54a0@x '((&no-nans-rcd . kd4fd9@kd4ee8@&no-nans-rcd) (&no-nans-rtd . kd4fd8@kd4ee6@&no-nans-rtd) (&no-infinities-rcd . kd4fd1@kd4ed3@&no-infinities-rcd) (&no-infinities-rtd . kd4fd0@kd4ed1@&no-infinities-rtd) (&i/o-encoding-rcd . kd4fc9@kd4ebe@&i/o-encoding-rcd) (&i/o-encoding-rtd . kd4fc8@kd4ebc@&i/o-encoding-rtd) (&i/o-decoding-rcd . kd4fbf@kd4ea3@&i/o-decoding-rcd) (&i/o-decoding-rtd . kd4fbe@kd4ea1@&i/o-decoding-rtd) (&i/o-port-rcd . kd4fb7@kd4e8e@&i/o-port-rcd) (&i/o-port-rtd . kd4fb6@kd4e8c@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . kd4fad@kd4e73@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . kd4fac@kd4e71@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . kd4fa5@kd4e5e@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . kd4fa4@kd4e5c@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . kd4f9d@kd4e49@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . kd4f9c@kd4e47@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . kd4f95@kd4e34@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . kd4f94@kd4e32@&i/o-file-protection-rtd) (&i/o-filename-rcd . kd4f8d@kd4e1f@&i/o-filename-rcd) (&i/o-filename-rtd . kd4f8c@kd4e1d@&i/o-filename-rtd) (&i/o-invalid-position-rcd . kd4f83@kd4e04@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . kd4f82@kd4e02@&i/o-invalid-position-rtd) (&i/o-write-rcd . kd4f79@kd4de9@&i/o-write-rcd) (&i/o-write-rtd . kd4f78@kd4de7@&i/o-write-rtd) (&i/o-read-rcd . kd4f71@kd4dd4@&i/o-read-rcd) (&i/o-read-rtd . kd4f70@kd4dd2@&i/o-read-rtd) (&i/o-rcd . kd4f69@kd4dbf@&i/o-rcd) (&i/o-rtd . kd4f68@kd4dbd@&i/o-rtd) (&undefined-rcd . kd4f61@kd4daa@&undefined-rcd) (&undefined-rtd . kd4f60@kd4da8@&undefined-rtd) (&syntax-rcd . kd4f59@kd4d95@&syntax-rcd) (&syntax-rtd . kd4f58@kd4d93@&syntax-rtd) (&lexical-rcd . kd4f4d@kd4d74@&lexical-rcd) (&lexical-rtd . kd4f4c@kd4d72@&lexical-rtd) (&implementation-restriction-rcd . kd4f45@kd4d5f@&implementation-restriction-rcd) (&implementation-restriction-rtd . kd4f44@kd4d5d@&implementation-restriction-rtd) (&non-continuable-rcd . kd4f3d@kd4d4a@&non-continuable-rcd) (&non-continuable-rtd . kd4f3c@kd4d48@&non-continuable-rtd) (&who-rcd . kd4f35@kd4d35@&who-rcd) (&who-rtd . kd4f34@kd4d33@&who-rtd) (&irritants-rcd . kd4f2b@kd4d1a@&irritants-rcd) (&irritants-rtd . kd4f2a@kd4d18@&irritants-rtd) (&assertion-rcd . kd4f21@kd4cff@&assertion-rcd) (&assertion-rtd . kd4f20@kd4cfd@&assertion-rtd) (&violation-rcd . kd4f19@kd4cea@&violation-rcd) (&violation-rtd . kd4f18@kd4ce8@&violation-rtd) (&error-rcd . kd4f11@kd4cd5@&error-rcd) (&error-rtd . kd4f10@kd4cd3@&error-rtd) (&serious-rcd . kd4f09@kd4cc0@&serious-rcd) (&serious-rtd . kd4f08@kd4cbe@&serious-rtd) (&warning-rcd . kd4f01@kd4cab@&warning-rcd) (&warning-rtd . kd4f00@kd4ca9@&warning-rtd) (&message-rcd . kd4ef9@kd4c96@&message-rcd) (&message-rtd . kd4ef8@kd4c94@&message-rtd) (&condition-rcd . kd4eef@kd4c37@&condition-rcd) (&condition-rtd . kd4eee@kd4c35@&condition-rtd) (syntax-error . kd4c11@kd31b5@syntax-error) (syntax-dispatch . kd4baf@kd30d9@syntax-dispatch) (load . kd5141@kd4ff7@load) (interaction-environment . kd4c1a@kd31c7@interaction-environment) (library-path . kd2cd5@kd2b0d@library-path) (mosh-cache-dir . kd2a18@kd28f7@mosh-cache-dir) (make-parameter . kd2a17@kd28f5@make-parameter) (make-variable-transformer . kd4b6c@kd2f04@make-variable-transformer) (identifier? . kd4c14@kd31bb@identifier?) (generate-temporaries . kd4c0a@kd31a7@generate-temporaries) (free-identifier=? . kd4c0b@kd31a9@free-identifier=?) (syntax->datum . kd4c16@kd31bf@syntax->datum) (datum->syntax . kd4c15@kd31bd@datum->syntax) (bound-identifier=? . kd4c0c@kd31ab@bound-identifier=?) (make-i/o-write-error . kd4f76@kd4de3@make-i/o-write-error) (make-i/o-read-error . kd4f6e@kd4dce@make-i/o-read-error) (make-i/o-port-error . kd4fb2@kd4e84@make-i/o-port-error) (make-i/o-invalid-position-error . kd4f7e@kd4dfa@make-i/o-invalid-position-error) (make-i/o-filename-error . kd4f88@kd4e15@make-i/o-filename-error) (make-i/o-file-protection-error . kd4f92@kd4e2e@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . kd4f9a@kd4e43@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . kd4faa@kd4e6d@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . kd4fa2@kd4e58@make-i/o-file-already-exists-error) (make-i/o-error . kd4f66@kd4db9@make-i/o-error) (make-i/o-encoding-error . kd4fc4@kd4eb4@make-i/o-encoding-error) (make-i/o-decoding-error . kd4fbc@kd4e9d@make-i/o-decoding-error) (i/o-write-error? . kd4f77@kd4de5@i/o-write-error?) (i/o-read-error? . kd4f6f@kd4dd0@i/o-read-error?) (i/o-port-error? . kd4fb4@kd4e88@i/o-port-error?) (i/o-invalid-position-error? . kd4f80@kd4dfe@i/o-invalid-position-error?) (i/o-filename-error? . kd4f8a@kd4e19@i/o-filename-error?) (i/o-file-protection-error? . kd4f93@kd4e30@i/o-file-protection-error?) (i/o-file-is-read-only-error? . kd4f9b@kd4e45@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . kd4fab@kd4e6f@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . kd4fa3@kd4e5a@i/o-file-already-exists-error?) (i/o-error? . kd4f67@kd4dbb@i/o-error?) (i/o-error-position . kd4f81@kd4e00@i/o-error-position) (i/o-error-port . kd4fb5@kd4e8a@i/o-error-port) (i/o-error-filename . kd4f8b@kd4e1b@i/o-error-filename) (i/o-encoding-error? . kd4fc6@kd4eb8@i/o-encoding-error?) (i/o-encoding-error-char . kd4fc7@kd4eba@i/o-encoding-error-char) (i/o-decoding-error? . kd4fbd@kd4e9f@i/o-decoding-error?) (scheme-report-environment . kd4c01@kd3195@scheme-report-environment) (null-environment . kd4c00@kd3193@null-environment) (command-line . kd513e@kd4ff1@command-line) (eval . kd4c03@kd3199@eval) (environment . kd4bff@kd3191@environment) (who-condition? . kd4f32@kd4d2f@who-condition?) (warning? . kd4eff@kd4ca7@warning?) (violation? . kd4f17@kd4ce6@violation?) (undefined-violation? . kd4f5f@kd4da6@undefined-violation?) (syntax-violation? . kd4f55@kd4d8d@syntax-violation?) (syntax-violation-subform . kd4f57@kd4d91@syntax-violation-subform) (syntax-violation-form . kd4f56@kd4d8f@syntax-violation-form) (syntax-violation . kd4c13@kd31b9@syntax-violation) (serious-condition? . kd4f07@kd4cbc@serious-condition?) (non-continuable-violation? . kd4f3b@kd4d46@non-continuable-violation?) (message-condition? . kd4ef6@kd4c90@message-condition?) (make-who-condition . kd4f30@kd4d2b@make-who-condition) (make-warning . kd4efe@kd4ca5@make-warning) (make-violation . kd4f16@kd4ce4@make-violation) (make-undefined-violation . kd4f5e@kd4da4@make-undefined-violation) (make-syntax-violation . kd4f52@kd4d87@make-syntax-violation) (make-serious-condition . kd4f06@kd4cba@make-serious-condition) (make-non-continuable-violation . kd4f3a@kd4d44@make-non-continuable-violation) (make-message-condition . kd4ef4@kd4c8c@make-message-condition) (make-lexical-violation . kd4f4a@kd4d6e@make-lexical-violation) (make-irritants-condition . kd4f26@kd4d10@make-irritants-condition) (make-implementation-restriction-violation . kd4f42@kd4d59@make-implementation-restriction-violation) (make-error . kd4f0e@kd4ccf@make-error) (make-assertion-violation . kd4f1e@kd4cf9@make-assertion-violation) (lexical-violation? . kd4f4b@kd4d70@lexical-violation?) (irritants-condition? . kd4f28@kd4d14@irritants-condition?) (implementation-restriction-violation? . kd4f43@kd4d5b@implementation-restriction-violation?) (error? . kd4f0f@kd4cd1@error?) (condition-who . kd4f33@kd4d31@condition-who) (condition-message . kd4ef7@kd4c92@condition-message) (condition-irritants . kd4f29@kd4d16@condition-irritants) (assertion-violation? . kd4f1f@kd4cfb@assertion-violation?) (no-nans-violation? . kd4fd7@kd4ee4@no-nans-violation?) (no-infinities-violation? . kd4fcf@kd4ecf@no-infinities-violation?) (make-no-nans-violation . kd4fd6@kd4ee2@make-no-nans-violation) (make-no-infinities-violation . kd4fce@kd4ecd@make-no-infinities-violation) (assertion-error . kd4c10@kd31b3@assertion-error))))) (if kd54a2@t (cdr kd54a2@t) '#f)))) (kd2ce5@kd2b2d@install-library 'kd547d '(mosh interaction) '() '() '() '() '((regexp? . kd5475) (alist->eq-hash-table . kd5471) (format . kd546e) (string-split . kd5462) (call-process . kd545c) (set-current-directory! . kd5458) (expand-path . kd5457) (current-directory . kd5456) (%spawn . kd5455) (%waitpid . kd5454) (simple-struct-name . kd5453) (simple-struct-set! . kd5452) (simple-struct-ref . kd5451) (make-simple-struct . kd5450) (simple-struct? . kd544f) (pointer-ref-c-int64 . kd544e) (pointer-ref-c-int32 . kd544d) (pointer-ref-c-int16 . kd544c) (pointer-ref-c-int8 . kd544b) (pointer-ref-c-uint64 . kd544a) (pointer-ref-c-uint32 . kd5449) (pointer-ref-c-uint16 . kd5448) (pointer-ref-c-uint8 . kd5447) (pointer-set-c-uint64! . kd5446) (pointer-set-c-uint32! . kd5445) (pointer-set-c-uint16! . kd5444) (pointer-set-c-uint8! . kd5443) (pointer-set-c-int64! . kd5442) (pointer-set-c-int32! . kd5441) (pointer-set-c-int16! . kd5440) (pointer-set-c-int8! . kd543f) (pointer-set-c-pointer! . kd543e) (pointer-set-c-double! . kd543d) (pointer-set-c-float! . kd543c) (pointer-set-c-long-long! . kd543b) (pointer-set-c-long! . kd543a) (pointer-set-c-int! . kd5439) (pointer-set-c-short! . kd5438) (pointer-set-c-char! . kd5437) (pointer-ref-c-pointer . kd5436) (pointer-ref-c-double . kd5435) (pointer-ref-c-float . kd5434) (pointer-ref-c-unsigned-long-long . kd5433) (pointer-ref-c-signed-long-long . kd5432) (pointer-ref-c-unsigned-long . kd5431) (pointer-ref-c-signed-long . kd5430) (pointer-ref-c-unsigned-int . kd542f) (pointer-ref-c-signed-int . kd542e) (pointer-ref-c-unsigned-short . kd542d) (pointer-ref-c-signed-short . kd542c) (pointer-ref-c-unsigned-char . kd542b) (pointer-ref-c-signed-char . kd542a) (pointer->integer . kd5429) (integer->pointer . kd5428) (pointer? . kd5427) (shared-errno . kd5426) (%ffi-supported? . kd541e) (%ffi-pointer->string . kd541d) (%ffi-call . kd541c) (%ffi-lookup . kd541b) (%ffi-open . kd541a) (null-terminated-utf8->string . kd5419) (null-terminated-bytevector->string . kd5418) (%fork . kd5417) (%pipe . kd5416) (p . kd5415) (whereis . kd53f9) (register . kd53f8) (vm-join! . kd53f7) (vm-set-value! . kd53f6) (vm? . kd53f5) (main-vm? . kd53f4) (vm-eval . kd53f3) (vm-self . kd53f2) (vm-start! . kd53f1) (make-vm . kd53f0) (mutex-try-lock! . kd53ef) (mutex-unlock! . kd53ee) (mutex-lock! . kd53ed) (mutex? . kd53ec) (make-mutex . kd53eb) (condition-variable-notify-all! . kd53ea) (condition-variable-notify! . kd53e9) (condition-variable-wait! . kd53e8) (make-condition-variable . kd53e7) (string-upcase . kd53ca) (string-titlecase . kd53c9) (string-normalize-nfkd . kd53c8) (string-normalize-nfkc . kd53c7) (string-normalize-nfd . kd53c6) (string-normalize-nfc . kd53c5) (string-foldcase . kd53c4) (string-downcase . kd53c3) (string-ci>? . kd53c2) (string-ci>=? . kd53c1) (string-ci=? . kd53c0) (string-ci<? . kd53bf) (string-ci<=? . kd53be) (char-whitespace? . kd53bd) (char-upper-case? . kd53bc) (char-title-case? . kd53bb) (char-numeric? . kd53ba) (char-lower-case? . kd53b9) (char-general-category . kd53b8) (char-upcase . kd53b7) (char-titlecase . kd53b6) (char-foldcase . kd53b5) (char-downcase . kd53b4) (char-ci>? . kd53b3) (char-ci>=? . kd53b2) (char-ci=? . kd53b1) (char-ci<? . kd53b0) (char-ci<=? . kd53af) (char-alphabetic? . kd53ae) (make-variable-transformer . kd2f03) (identifier? . kd31ba) (generate-temporaries . kd31a6) (free-identifier=? . kd31a8) (syntax->datum . kd31be) (datum->syntax . kd31bc) (bound-identifier=? . kd31aa) (record-type-descriptor? . kd53ad) (record-predicate . kd53ac) (record-mutator . kd53ab) (record-constructor . kd53aa) (record-accessor . kd53a9) (make-record-type-descriptor . kd53a8) (make-record-constructor-descriptor . kd53a7) (record? . kd53a6) (record-type-uid . kd53a5) (record-type-sealed? . kd53a4) (record-type-parent . kd53a3) (record-type-opaque? . kd53a2) (record-type-name . kd53a1) (record-type-generative? . kd53a0) (record-type-field-names . kd539f) (record-rtd . kd539e) (record-field-mutable? . kd539d) (delete-file . kd539c) (file-exists? . kd539b) (vector-sort! . kd539a) (vector-sort . kd5399) (list-sort . kd5398) (symbol-hash . kd5397) (string-ci-hash . kd5396) (string-hash . kd5395) (equal-hash . kd5394) (hashtable-equivalence-function . kd5393) (make-hashtable . kd5392) (hashtable-hash-function . kd5391) (make-eqv-hashtable . kd5390) (make-eq-hashtable . kd538f) (hashtable? . kd538e) (hashtable-update! . kd538d) (hashtable-size . kd538c) (hashtable-set! . kd538b) (hashtable-ref . kd538a) (hashtable-mutable? . kd5389) (hashtable-keys . kd5388) (hashtable-entries . kd5387) (hashtable-delete! . kd5386) (hashtable-copy . kd5385) (hashtable-contains? . kd5384) (hashtable-clear! . kd5383) (call-with-output-file . kd5382) (call-with-input-file . kd5381) (write-char . kd5380) (write . kd537f) (with-output-to-file . kd537e) (with-input-from-file . kd537d) (read-char . kd537c) (read . kd537b) (peek-char . kd537a) (open-output-file . kd5379) (open-input-file . kd5378) (newline . kd5377) (display . kd5376) (close-output-port . kd5375) (close-input-port . kd5374) (eof-object? . kd5373) (eof-object . kd5372) (current-error-port . kd5371) (current-output-port . kd5370) (current-input-port . kd536f) (output-port? . kd536e) (input-port? . kd536d) (utf-8-codec . kd536c) (utf-16-codec . kd536b) (transcoder-error-handling-mode . kd536a) (transcoder-eol-style . kd5369) (transcoder-codec . kd5368) (transcoded-port . kd5367) (textual-port? . kd5366) (string->bytevector . kd5365) (standard-output-port . kd5364) (standard-input-port . kd5363) (standard-error-port . kd5362) (set-port-position! . kd5361) (put-u8 . kd5360) (put-string . kd535f) (put-datum . kd535e) (put-char . kd535d) (put-bytevector . kd535c) (port? . kd535b) (port-transcoder . kd535a) (port-position . kd5359) (port-has-set-port-position!? . kd5358) (port-has-port-position? . kd5357) (port-eof? . kd5356) (output-port-buffer-mode . kd5355) (open-string-output-port . kd5354) (open-string-input-port . kd5353) (open-file-output-port . kd5352) (open-file-input/output-port . kd5351) (open-file-input-port . kd5350) (open-bytevector-output-port . kd534f) (open-bytevector-input-port . kd534e) (native-transcoder . kd534d) (native-eol-style . kd534c) (make-transcoder . kd534b) (latin-1-codec . kd534a) (make-i/o-write-error . kd4de2) (make-i/o-read-error . kd4dcd) (make-i/o-port-error . kd4e83) (make-i/o-invalid-position-error . kd4df9) (make-i/o-filename-error . kd4e14) (make-i/o-file-protection-error . kd4e2d) (make-i/o-file-is-read-only-error . kd4e42) (make-i/o-file-does-not-exist-error . kd4e6c) (make-i/o-file-already-exists-error . kd4e57) (make-i/o-error . kd4db8) (make-i/o-encoding-error . kd4eb3) (make-i/o-decoding-error . kd4e9c) (make-custom-textual-output-port . kd5349) (make-custom-textual-input/output-port . kd5348) (make-custom-textual-input-port . kd5347) (make-custom-binary-output-port . kd5346) (make-custom-binary-input/output-port . kd5345) (make-custom-binary-input-port . kd5344) (make-bytevector . kd5343) (lookahead-u8 . kd5342) (lookahead-char . kd5341) (i/o-write-error? . kd4de4) (i/o-read-error? . kd4dcf) (i/o-port-error? . kd4e87) (i/o-invalid-position-error? . kd4dfd) (i/o-filename-error? . kd4e18) (i/o-file-protection-error? . kd4e2f) (i/o-file-is-read-only-error? . kd4e44) (i/o-file-does-not-exist-error? . kd4e6e) (i/o-file-already-exists-error? . kd4e59) (i/o-error? . kd4dba) (i/o-error-position . kd4dff) (i/o-error-port . kd4e89) (i/o-error-filename . kd4e1a) (i/o-encoding-error? . kd4eb7) (i/o-encoding-error-char . kd4eb9) (i/o-decoding-error? . kd4e9e) (get-u8 . kd5340) (get-string-n! . kd533f) (get-string-n . kd533e) (get-string-all . kd533d) (get-line . kd533c) (get-datum . kd533b) (get-char . kd533a) (get-bytevector-some . kd5339) (get-bytevector-n! . kd5338) (get-bytevector-n . kd5337) (get-bytevector-all . kd5336) (flush-output-port . kd5335) (close-port . kd5334) (exit . kd532c) (command-line . kd4ff0) (string-fill! . kd532b) (string-set! . kd532a) (set-cdr! . kd5329) (set-car! . kd5328) (remove . kd5327) (remv . kd5326) (remp . kd5325) (remq . kd5324) (partition . kd5323) (memv . kd5322) (memq . kd5321) (memp . kd5320) (member . kd531f) (exists . kd531e) (for-all . kd531d) (fold-right . kd531c) (fold-left . kd531b) (find . kd531a) (filter . kd5319) (cons* . kd5318) (assv . kd5317) (assq . kd5316) (assp . kd5315) (assoc . kd5314) (call-with-string-output-port . kd5313) (call-with-port . kd5312) (call-with-bytevector-output-port . kd5311) (bytevector->string . kd5310) (buffer-mode? . kd530f) (binary-port? . kd530e) (with-exception-handler . kd530d) (raise-continuable . kd530c) (raise . kd530b) (eval . kd3198) (environment . kd3190) (make-enumeration . kd530a) (enum-set=? . kd5309) (enum-set-universe . kd5308) (enum-set-union . kd5307) (enum-set-subset? . kd5306) (enum-set-projection . kd5305) (enum-set-member? . kd5304) (enum-set-intersection . kd5303) (enum-set-indexer . kd5302) (enum-set-difference . kd5301) (enum-set-constructor . kd5300) (enum-set-complement . kd52ff) (enum-set->list . kd52fe) (who-condition? . kd4d2e) (warning? . kd4ca6) (violation? . kd4ce5) (undefined-violation? . kd4da5) (syntax-violation? . kd4d8c) (syntax-violation-subform . kd4d90) (syntax-violation-form . kd4d8e) (syntax-violation . kd31b8) (simple-conditions . kd52fd) (serious-condition? . kd4cbb) (non-continuable-violation? . kd4d45) (message-condition? . kd4c8f) (make-who-condition . kd4d2a) (make-warning . kd4ca4) (make-violation . kd4ce3) (make-undefined-violation . kd4da3) (make-syntax-violation . kd4d86) (make-serious-condition . kd4cb9) (make-non-continuable-violation . kd4d43) (make-message-condition . kd4c8b) (make-lexical-violation . kd4d6d) (make-irritants-condition . kd4d0f) (make-implementation-restriction-violation . kd4d58) (make-error . kd4cce) (make-assertion-violation . kd4cf8) (lexical-violation? . kd4d6f) (irritants-condition? . kd4d13) (implementation-restriction-violation? . kd4d5a) (error? . kd4cd0) (condition-who . kd4d30) (condition-predicate . kd52fc) (condition-message . kd4c91) (condition-irritants . kd4d15) (condition-accessor . kd52fb) (condition . kd52fa) (assertion-violation? . kd4cfa) (condition? . kd52f9) (utf32->string . kd52f8) (utf16->string . kd52f7) (utf8->string . kd52f6) (uint-list->bytevector . kd52f5) (u8-list->bytevector . kd52f4) (string->utf8 . kd52f3) (string->utf32 . kd52f2) (string->utf16 . kd52f1) (sint-list->bytevector . kd52f0) (native-endianness . kd52ef) (bytevector? . kd52ee) (bytevector=? . kd52ed) (bytevector-uint-set! . kd52ec) (bytevector-uint-ref . kd52eb) (bytevector-u8-set! . kd52ea) (bytevector-u8-ref . kd52e9) (bytevector-u64-set! . kd52e8) (bytevector-u64-ref . kd52e7) (bytevector-u64-native-set! . kd52e6) (bytevector-u64-native-ref . kd52e5) (bytevector-u32-set! . kd52e4) (bytevector-u32-ref . kd52e3) (bytevector-u32-native-set! . kd52e2) (bytevector-u32-native-ref . kd52e1) (bytevector-u16-set! . kd52e0) (bytevector-u16-ref . kd52df) (bytevector-u16-native-set! . kd52de) (bytevector-u16-native-ref . kd52dd) (bytevector-sint-set! . kd52dc) (bytevector-sint-ref . kd52db) (bytevector-s8-set! . kd52da) (bytevector-s8-ref . kd52d9) (bytevector-s64-set! . kd52d8) (bytevector-s64-ref . kd52d7) (bytevector-s64-native-set! . kd52d6) (bytevector-s64-native-ref . kd52d5) (bytevector-s32-set! . kd52d4) (bytevector-s32-ref . kd52d3) (bytevector-s32-native-set! . kd52d2) (bytevector-s32-native-ref . kd52d1) (bytevector-s16-set! . kd52d0) (bytevector-s16-ref . kd52cf) (bytevector-s16-native-set! . kd52ce) (bytevector-s16-native-ref . kd52cd) (bytevector-length . kd52cc) (bytevector-ieee-single-ref . kd52cb) (bytevector-ieee-single-set! . kd52ca) (bytevector-ieee-single-native-set! . kd52c9) (bytevector-ieee-single-native-ref . kd52c8) (bytevector-ieee-double-set! . kd52c7) (bytevector-ieee-double-ref . kd52c6) (bytevector-ieee-double-native-set! . kd52c5) (bytevector-ieee-double-native-ref . kd52c4) (bytevector-fill! . kd52c3) (bytevector-copy! . kd52c2) (bytevector-copy . kd52c1) (bytevector->uint-list . kd52c0) (bytevector->u8-list . kd52bf) (bytevector->sint-list . kd52be) (no-nans-violation? . kd4ee3) (no-infinities-violation? . kd4ece) (make-no-nans-violation . kd4ee1) (make-no-infinities-violation . kd4ecc) (real->flonum . kd52bd) (flzero? . kd52bc) (fltruncate . kd52bb) (fltan . kd52ba) (flsqrt . kd52b9) (flsin . kd52b8) (flround . kd52b7) (flpositive? . kd52b6) (flonum? . kd52b5) (flodd? . kd52b4) (flnumerator . kd52b3) (flnegative? . kd52b2) (flnan? . kd52b1) (flmod0 . kd52b0) (flmod . kd52af) (flmin . kd52ae) (flmax . kd52ad) (fllog . kd52ac) (flinteger? . kd52ab) (flinfinite? . kd52aa) (flfloor . kd52a9) (flfinite? . kd52a8) (flexpt . kd52a7) (flexp . kd52a6) (fleven? . kd52a5) (fldiv0-and-mod0 . kd52a4) (fldiv0 . kd52a3) (fldiv-and-mod . kd52a2) (fldiv . kd52a1) (fldenominator . kd52a0) (flcos . kd529f) (flceiling . kd529e) (flatan . kd529d) (flasin . kd529c) (flacos . kd529b) (flabs . kd529a) (fl>? . kd5299) (fl>=? . kd5298) (fl=? . kd5297) (fl<? . kd5296) (fl<=? . kd5295) (fl/ . kd5294) (fl- . kd5293) (fl+ . kd5292) (fl* . kd5291) (fixnum->flonum . kd5290) (fxzero? . kd528f) (fxxor . kd528e) (fxrotate-bit-field . kd528d) (fxreverse-bit-field . kd528c) (fxpositive? . kd528b) (fxodd? . kd528a) (fxnot . kd5289) (fxnegative? . kd5288) (fxmod0 . kd5287) (fxmod . kd5286) (fxmin . kd5285) (fxmax . kd5284) (fxlength . kd5283) (fxior . kd5282) (fxif . kd5281) (fxfirst-bit-set . kd5280) (fxeven? . kd527f) (fxdiv0-and-mod0 . kd527e) (fxdiv0 . kd527d) (fxdiv-and-mod . kd527c) (fxdiv . kd527b) (fxcopy-bit-field . kd527a) (fxcopy-bit . kd5279) (fxbit-set? . kd5278) (fxbit-field . kd5277) (fxbit-count . kd5276) (fxarithmetic-shift-right . kd5275) (fxarithmetic-shift-left . kd5274) (fxarithmetic-shift . kd5273) (fxand . kd5272) (fx>? . kd5271) (fx>=? . kd5270) (fx=? . kd526f) (fx<? . kd526e) (fx<=? . kd526d) (fx-/carry . kd526c) (fx- . kd526b) (fx+/carry . kd526a) (fx+ . kd5269) (fx*/carry . kd5268) (fx* . kd5267) (greatest-fixnum . kd5266) (least-fixnum . kd5265) (fixnum-width . kd5264) (fixnum? . kd5263) (bitwise-rotate-bit-field . kd5262) (bitwise-reverse-bit-field . kd5261) (bitwise-length . kd5260) (bitwise-if . kd525f) (bitwise-first-bit-set . kd525e) (bitwise-copy-bit-field . kd525d) (bitwise-copy-bit . kd525c) (bitwise-bit-set? . kd525b) (bitwise-bit-field . kd525a) (bitwise-bit-count . kd5259) (bitwise-xor . kd5258) (bitwise-ior . kd5257) (bitwise-and . kd5256) (bitwise-not . kd5255) (bitwise-arithmetic-shift-right . kd5254) (bitwise-arithmetic-shift-left . kd5253) (bitwise-arithmetic-shift . kd5252) (zero? . kd5251) (vector? . kd5250) (vector-set! . kd524f) (vector-ref . kd524e) (vector-map . kd524d) (vector-length . kd524c) (vector-for-each . kd524b) (vector-fill! . kd524a) (vector->list . kd5249) (vector . kd5248) (values . kd5247) (truncate . kd5246) (tan . kd5245) (symbol? . kd5244) (symbol=? . kd5243) (symbol->string . kd5242) (substring . kd5241) (string? . kd5240) (string>? . kd523f) (string>=? . kd523e) (string=? . kd523d) (string<? . kd523c) (string<=? . kd523b) (string-ref . kd523a) (string-length . kd5239) (string-for-each . kd5238) (string-copy . kd5237) (string-append . kd5236) (string->symbol . kd5235) (string->number . kd5234) (string->list . kd5233) (string . kd5232) (sqrt . kd5231) (sin . kd5230) (round . kd522f) (reverse . kd522e) (real? . kd522d) (real-valued? . kd522c) (real-part . kd522b) (rationalize . kd522a) (rational? . kd5229) (rational-valued? . kd5228) (procedure? . kd5227) (positive? . kd5226) (pair? . kd5225) (odd? . kd5224) (numerator . kd5223) (number? . kd5222) (number->string . kd5221) (null? . kd5220) (not . kd521f) (negative? . kd521e) (nan? . kd521d) (min . kd521c) (max . kd521b) (map . kd521a) (make-vector . kd5219) (make-string . kd5218) (make-rectangular . kd5217) (make-polar . kd5216) (magnitude . kd5215) (log . kd5214) (list? . kd5213) (list-tail . kd5212) (list-ref . kd5211) (list->vector . kd5210) (list->string . kd520f) (list . kd520e) (length . kd520d) (lcm . kd520c) (integer? . kd520b) (integer-valued? . kd520a) (integer->char . kd5209) (infinite? . kd5208) (inexact? . kd5207) (inexact . kd5206) (imag-part . kd5205) (gcd . kd5204) (for-each . kd5203) (floor . kd5202) (finite? . kd5201) (expt . kd5200) (exp . kd51ff) (exact? . kd51fe) (exact-integer-sqrt . kd51fd) (exact . kd51fc) (even? . kd51fb) (error . kd51fa) (eqv? . kd51f9) (equal? . kd51f8) (eq? . kd51f7) (dynamic-wind . kd51f6) (div0-and-mod0 . kd51f5) (mod0 . kd51f4) (div0 . kd51f3) (div-and-mod . kd51f2) (mod . kd51f1) (div . kd51f0) (denominator . kd51ef) (cos . kd51ee) (cons . kd51ed) (complex? . kd51ec) (char? . kd51eb) (char>? . kd51ea) (char>=? . kd51e9) (char=? . kd51e8) (char<? . kd51e7) (char<=? . kd51e6) (char->integer . kd51e5) (ceiling . kd51e4) (call-with-values . kd51e3) (call/cc . kd51e2) (call-with-current-continuation . kd51e1) (cddddr . kd51e0) (cdddar . kd51df) (cddadr . kd51de) (cddaar . kd51dd) (cdaddr . kd51dc) (cdadar . kd51db) (cdaadr . kd51da) (cdaaar . kd51d9) (cadddr . kd51d8) (caddar . kd51d7) (cadadr . kd51d6) (cadaar . kd51d5) (caaddr . kd51d4) (caadar . kd51d3) (caaadr . kd51d2) (caaaar . kd51d1) (cdddr . kd51d0) (cddar . kd51cf) (cdadr . kd51ce) (cdaar . kd51cd) (caddr . kd51cc) (cadar . kd51cb) (caadr . kd51ca) (caaar . kd51c9) (cddr . kd51c8) (cdar . kd51c7) (cadr . kd51c6) (caar . kd51c5) (cdr . kd51c4) (car . kd51c3) (boolean? . kd51c2) (boolean=? . kd51c1) (atan . kd51c0) (assertion-violation . kd51bf) (asin . kd51be) (apply . kd51bd) (append . kd51bc) (angle . kd51bb) (acos . kd51ba) (abs . kd51b9) (/ . kd51b8) (* . kd51b7) (- . kd51b6) (+ . kd51b5) (>= . kd51b4) (> . kd51b3) (= . kd51b2) (<= . kd51b1) (< . kd51b0) (library . kd51af) (&no-nans . kd51ae) (&no-infinities . kd51ad) (&i/o-encoding . kd51ac) (&i/o-decoding . kd51ab) (&i/o-port . kd51aa) (&i/o-file-does-not-exist . kd51a9) (&i/o-file-already-exists . kd51a8) (&i/o-file-is-read-only . kd51a7) (&i/o-file-protection . kd51a6) (&i/o-filename . kd51a5) (&i/o-invalid-position . kd51a4) (&i/o-write . kd51a3) (&i/o-read . kd51a2) (&i/o . kd51a1) (&undefined . kd51a0) (&syntax . kd519f) (&lexical . kd519e) (&implementation-restriction . kd519d) (&non-continuable . kd519c) (&who . kd519b) (&irritants . kd519a) (&assertion . kd5199) (&violation . kd5198) (&error . kd5197) (&serious . kd5196) (&warning . kd5195) (&message . kd5194) (&condition . kd5193) (define-condition-type . kd5192) (define-enumeration . kd5191) (define-record-type . kd5190) (parent-rtd . kd518f) (nongenerative . kd518e) (opaque . kd518d) (sealed . kd518c) (protocol . kd518b) (parent . kd518a) (immutable . kd5189) (mutable . kd5188) (fields . kd5187) (error-handling-mode . kd5186) (file-options . kd5185) (buffer-mode . kd5184) (eol-style . kd5183) (guard . kd5182) (unsyntax-splicing . kd517f) (unsyntax . kd517e) (unquote-splicing . kd517d) (unquote . kd517c) (_ . kd517b) (else . kd517a) (=> . kd5179) (... . kd5178) (assert . kd5177) (endianness . kd5176) (time . kd5174) (do . kd5173) (cond . kd5172) (let* . kd5171) (let*-values . kd5170) (let-values . kd516f) (identifier-syntax . kd516e) (with-syntax . kd516d) (quasisyntax . kd516c) (quasiquote . kd516b) (syntax-rules . kd516a) (include . kd5169) (record-constructor-descriptor . kd5167) (record-type-descriptor . kd5166) (case . kd5165) (unless . kd5163) (when . kd5162) (or . kd5161) (and . kd5160) (if . kd515f) (let . kd515e) (letrec* . kd515d) (letrec . kd515c) (case-lambda . kd515a) (lambda . kd5159) (syntax . kd5158) (syntax-case . kd5157) (quote . kd5156) (letrec-syntax . kd5154) (let-syntax . kd5153) (set! . kd5152) (import . kd5151) (begin . kd5150) (define-syntax . kd514e) (define . kd514d)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd547e '(psyntax null-environment-5) '() '() '() '() '((make-promise . kd532d) (unquote-splicing . kd517d) (unquote . kd517c) (_ . kd517b) (else . kd517a) (=> . kd5179) (... . kd5178) (delay . kd5175) (do . kd5173) (cond . kd5172) (let* . kd5171) (quasiquote . kd516b) (syntax-rules . kd516a) (case . kd5165) (or . kd5161) (and . kd5160) (if . kd515f) (let . kd515e) (letrec . kd515c) (lambda . kd5159) (quote . kd5156) (letrec-syntax . kd5154) (let-syntax . kd5153) (set! . kd5152) (begin . kd5150) (define-syntax . kd514e) (define . kd514d)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd547f '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . kd53c2) (string-ci>=? . kd53c1) (string-ci=? . kd53c0) (string-ci<? . kd53bf) (string-ci<=? . kd53be) (char-whitespace? . kd53bd) (char-upper-case? . kd53bc) (char-numeric? . kd53ba) (char-lower-case? . kd53b9) (char-upcase . kd53b7) (char-downcase . kd53b4) (char-ci>? . kd53b3) (char-ci>=? . kd53b2) (char-ci=? . kd53b1) (char-ci<? . kd53b0) (char-ci<=? . kd53af) (char-alphabetic? . kd53ae) (call-with-output-file . kd5382) (call-with-input-file . kd5381) (write-char . kd5380) (write . kd537f) (with-output-to-file . kd537e) (with-input-from-file . kd537d) (read-char . kd537c) (read . kd537b) (peek-char . kd537a) (open-output-file . kd5379) (open-input-file . kd5378) (newline . kd5377) (display . kd5376) (close-output-port . kd5375) (close-input-port . kd5374) (eof-object . kd5372) (current-output-port . kd5370) (current-input-port . kd536f) (output-port? . kd536e) (input-port? . kd536d) (scheme-report-environment . kd3194) (quotient . kd5333) (null-environment . kd3192) (remainder . kd5332) (modulo . kd5331) (inexact->exact . kd5330) (force . kd532f) (exact->inexact . kd532e) (make-promise . kd532d) (string-fill! . kd532b) (string-set! . kd532a) (set-cdr! . kd5329) (set-car! . kd5328) (memv . kd5322) (memq . kd5321) (member . kd531f) (assv . kd5317) (assq . kd5316) (assoc . kd5314) (eval . kd3198) (zero? . kd5251) (vector? . kd5250) (vector-set! . kd524f) (vector-ref . kd524e) (vector-length . kd524c) (vector-fill! . kd524a) (vector->list . kd5249) (vector . kd5248) (values . kd5247) (truncate . kd5246) (tan . kd5245) (symbol? . kd5244) (symbol->string . kd5242) (substring . kd5241) (string? . kd5240) (string>? . kd523f) (string>=? . kd523e) (string=? . kd523d) (string<? . kd523c) (string<=? . kd523b) (string-ref . kd523a) (string-length . kd5239) (string-copy . kd5237) (string-append . kd5236) (string->symbol . kd5235) (string->number . kd5234) (string->list . kd5233) (string . kd5232) (sqrt . kd5231) (sin . kd5230) (round . kd522f) (reverse . kd522e) (real? . kd522d) (real-part . kd522b) (rationalize . kd522a) (rational? . kd5229) (procedure? . kd5227) (positive? . kd5226) (pair? . kd5225) (odd? . kd5224) (numerator . kd5223) (number? . kd5222) (number->string . kd5221) (not . kd521f) (negative? . kd521e) (min . kd521c) (max . kd521b) (map . kd521a) (make-vector . kd5219) (make-string . kd5218) (make-rectangular . kd5217) (make-polar . kd5216) (magnitude . kd5215) (log . kd5214) (list? . kd5213) (list-tail . kd5212) (list-ref . kd5211) (list->vector . kd5210) (list->string . kd520f) (list . kd520e) (length . kd520d) (lcm . kd520c) (integer? . kd520b) (integer->char . kd5209) (inexact? . kd5207) (imag-part . kd5205) (gcd . kd5204) (for-each . kd5203) (floor . kd5202) (expt . kd5200) (exp . kd51ff) (exact? . kd51fe) (even? . kd51fb) (eqv? . kd51f9) (equal? . kd51f8) (eq? . kd51f7) (dynamic-wind . kd51f6) (denominator . kd51ef) (cos . kd51ee) (cons . kd51ed) (complex? . kd51ec) (char? . kd51eb) (char>? . kd51ea) (char>=? . kd51e9) (char=? . kd51e8) (char<? . kd51e7) (char<=? . kd51e6) (char->integer . kd51e5) (ceiling . kd51e4) (call-with-values . kd51e3) (call-with-current-continuation . kd51e1) (cddddr . kd51e0) (cdddar . kd51df) (cddadr . kd51de) (cddaar . kd51dd) (cdaddr . kd51dc) (cdadar . kd51db) (cdaadr . kd51da) (cdaaar . kd51d9) (cadddr . kd51d8) (caddar . kd51d7) (cadadr . kd51d6) (cadaar . kd51d5) (caaddr . kd51d4) (caadar . kd51d3) (caaadr . kd51d2) (caaaar . kd51d1) (cdddr . kd51d0) (cddar . kd51cf) (cdadr . kd51ce) (cdaar . kd51cd) (caddr . kd51cc) (cadar . kd51cb) (caadr . kd51ca) (caaar . kd51c9) (cddr . kd51c8) (cdar . kd51c7) (cadr . kd51c6) (caar . kd51c5) (cdr . kd51c4) (car . kd51c3) (boolean? . kd51c2) (atan . kd51c0) (asin . kd51be) (apply . kd51bd) (append . kd51bc) (angle . kd51bb) (acos . kd51ba) (abs . kd51b9) (/ . kd51b8) (* . kd51b7) (- . kd51b6) (+ . kd51b5) (>= . kd51b4) (> . kd51b3) (= . kd51b2) (<= . kd51b1) (< . kd51b0) (unquote-splicing . kd517d) (unquote . kd517c) (else . kd517a) (=> . kd5179) (... . kd5178) (delay . kd5175) (do . kd5173) (cond . kd5172) (let* . kd5171) (quasiquote . kd516b) (syntax-rules . kd516a) (case . kd5165) (or . kd5161) (and . kd5160) (if . kd515f) (let . kd515e) (letrec . kd515c) (lambda . kd5159) (quote . kd5156) (letrec-syntax . kd5154) (let-syntax . kd5153) (set! . kd5152) (begin . kd5150) (define-syntax . kd514e) (define . kd514d)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd5480 '(psyntax modules) '() '() '() '() '((module . kd514f)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd5481 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd5482 '(rnrs) '(6) '() '() '() '((regexp? . kd5475) (string-upcase . kd53ca) (string-titlecase . kd53c9) (string-normalize-nfkd . kd53c8) (string-normalize-nfkc . kd53c7) (string-normalize-nfd . kd53c6) (string-normalize-nfc . kd53c5) (string-foldcase . kd53c4) (string-downcase . kd53c3) (string-ci>? . kd53c2) (string-ci>=? . kd53c1) (string-ci=? . kd53c0) (string-ci<? . kd53bf) (string-ci<=? . kd53be) (char-whitespace? . kd53bd) (char-upper-case? . kd53bc) (char-title-case? . kd53bb) (char-numeric? . kd53ba) (char-lower-case? . kd53b9) (char-general-category . kd53b8) (char-upcase . kd53b7) (char-titlecase . kd53b6) (char-foldcase . kd53b5) (char-downcase . kd53b4) (char-ci>? . kd53b3) (char-ci>=? . kd53b2) (char-ci=? . kd53b1) (char-ci<? . kd53b0) (char-ci<=? . kd53af) (char-alphabetic? . kd53ae) (make-variable-transformer . kd2f03) (identifier? . kd31ba) (generate-temporaries . kd31a6) (free-identifier=? . kd31a8) (syntax->datum . kd31be) (datum->syntax . kd31bc) (bound-identifier=? . kd31aa) (record-type-descriptor? . kd53ad) (record-predicate . kd53ac) (record-mutator . kd53ab) (record-constructor . kd53aa) (record-accessor . kd53a9) (make-record-type-descriptor . kd53a8) (make-record-constructor-descriptor . kd53a7) (record? . kd53a6) (record-type-uid . kd53a5) (record-type-sealed? . kd53a4) (record-type-parent . kd53a3) (record-type-opaque? . kd53a2) (record-type-name . kd53a1) (record-type-generative? . kd53a0) (record-type-field-names . kd539f) (record-rtd . kd539e) (record-field-mutable? . kd539d) (delete-file . kd539c) (file-exists? . kd539b) (vector-sort! . kd539a) (vector-sort . kd5399) (list-sort . kd5398) (symbol-hash . kd5397) (string-ci-hash . kd5396) (string-hash . kd5395) (equal-hash . kd5394) (hashtable-equivalence-function . kd5393) (make-hashtable . kd5392) (hashtable-hash-function . kd5391) (make-eqv-hashtable . kd5390) (make-eq-hashtable . kd538f) (hashtable? . kd538e) (hashtable-update! . kd538d) (hashtable-size . kd538c) (hashtable-set! . kd538b) (hashtable-ref . kd538a) (hashtable-mutable? . kd5389) (hashtable-keys . kd5388) (hashtable-entries . kd5387) (hashtable-delete! . kd5386) (hashtable-copy . kd5385) (hashtable-contains? . kd5384) (hashtable-clear! . kd5383) (call-with-output-file . kd5382) (call-with-input-file . kd5381) (write-char . kd5380) (write . kd537f) (with-output-to-file . kd537e) (with-input-from-file . kd537d) (read-char . kd537c) (read . kd537b) (peek-char . kd537a) (open-output-file . kd5379) (open-input-file . kd5378) (newline . kd5377) (display . kd5376) (close-output-port . kd5375) (close-input-port . kd5374) (eof-object? . kd5373) (eof-object . kd5372) (current-error-port . kd5371) (current-output-port . kd5370) (current-input-port . kd536f) (output-port? . kd536e) (input-port? . kd536d) (utf-8-codec . kd536c) (utf-16-codec . kd536b) (transcoder-error-handling-mode . kd536a) (transcoder-eol-style . kd5369) (transcoder-codec . kd5368) (transcoded-port . kd5367) (textual-port? . kd5366) (string->bytevector . kd5365) (standard-output-port . kd5364) (standard-input-port . kd5363) (standard-error-port . kd5362) (set-port-position! . kd5361) (put-u8 . kd5360) (put-string . kd535f) (put-datum . kd535e) (put-char . kd535d) (put-bytevector . kd535c) (port? . kd535b) (port-transcoder . kd535a) (port-position . kd5359) (port-has-set-port-position!? . kd5358) (port-has-port-position? . kd5357) (port-eof? . kd5356) (output-port-buffer-mode . kd5355) (open-string-output-port . kd5354) (open-string-input-port . kd5353) (open-file-output-port . kd5352) (open-file-input/output-port . kd5351) (open-file-input-port . kd5350) (open-bytevector-output-port . kd534f) (open-bytevector-input-port . kd534e) (native-transcoder . kd534d) (native-eol-style . kd534c) (make-transcoder . kd534b) (latin-1-codec . kd534a) (make-i/o-write-error . kd4de2) (make-i/o-read-error . kd4dcd) (make-i/o-port-error . kd4e83) (make-i/o-invalid-position-error . kd4df9) (make-i/o-filename-error . kd4e14) (make-i/o-file-protection-error . kd4e2d) (make-i/o-file-is-read-only-error . kd4e42) (make-i/o-file-does-not-exist-error . kd4e6c) (make-i/o-file-already-exists-error . kd4e57) (make-i/o-error . kd4db8) (make-i/o-encoding-error . kd4eb3) (make-i/o-decoding-error . kd4e9c) (make-custom-textual-output-port . kd5349) (make-custom-textual-input/output-port . kd5348) (make-custom-textual-input-port . kd5347) (make-custom-binary-output-port . kd5346) (make-custom-binary-input/output-port . kd5345) (make-custom-binary-input-port . kd5344) (make-bytevector . kd5343) (lookahead-u8 . kd5342) (lookahead-char . kd5341) (i/o-write-error? . kd4de4) (i/o-read-error? . kd4dcf) (i/o-port-error? . kd4e87) (i/o-invalid-position-error? . kd4dfd) (i/o-filename-error? . kd4e18) (i/o-file-protection-error? . kd4e2f) (i/o-file-is-read-only-error? . kd4e44) (i/o-file-does-not-exist-error? . kd4e6e) (i/o-file-already-exists-error? . kd4e59) (i/o-error? . kd4dba) (i/o-error-position . kd4dff) (i/o-error-port . kd4e89) (i/o-error-filename . kd4e1a) (i/o-encoding-error? . kd4eb7) (i/o-encoding-error-char . kd4eb9) (i/o-decoding-error? . kd4e9e) (get-u8 . kd5340) (get-string-n! . kd533f) (get-string-n . kd533e) (get-string-all . kd533d) (get-line . kd533c) (get-datum . kd533b) (get-char . kd533a) (get-bytevector-some . kd5339) (get-bytevector-n! . kd5338) (get-bytevector-n . kd5337) (get-bytevector-all . kd5336) (flush-output-port . kd5335) (close-port . kd5334) (exit . kd532c) (command-line . kd4ff0) (remove . kd5327) (remv . kd5326) (remp . kd5325) (remq . kd5324) (partition . kd5323) (memv . kd5322) (memq . kd5321) (memp . kd5320) (member . kd531f) (exists . kd531e) (for-all . kd531d) (fold-right . kd531c) (fold-left . kd531b) (find . kd531a) (filter . kd5319) (cons* . kd5318) (assv . kd5317) (assq . kd5316) (assp . kd5315) (assoc . kd5314) (call-with-string-output-port . kd5313) (call-with-port . kd5312) (call-with-bytevector-output-port . kd5311) (bytevector->string . kd5310) (buffer-mode? . kd530f) (binary-port? . kd530e) (with-exception-handler . kd530d) (raise-continuable . kd530c) (raise . kd530b) (make-enumeration . kd530a) (enum-set=? . kd5309) (enum-set-universe . kd5308) (enum-set-union . kd5307) (enum-set-subset? . kd5306) (enum-set-projection . kd5305) (enum-set-member? . kd5304) (enum-set-intersection . kd5303) (enum-set-indexer . kd5302) (enum-set-difference . kd5301) (enum-set-constructor . kd5300) (enum-set-complement . kd52ff) (enum-set->list . kd52fe) (who-condition? . kd4d2e) (warning? . kd4ca6) (violation? . kd4ce5) (undefined-violation? . kd4da5) (syntax-violation? . kd4d8c) (syntax-violation-subform . kd4d90) (syntax-violation-form . kd4d8e) (syntax-violation . kd31b8) (simple-conditions . kd52fd) (serious-condition? . kd4cbb) (non-continuable-violation? . kd4d45) (message-condition? . kd4c8f) (make-who-condition . kd4d2a) (make-warning . kd4ca4) (make-violation . kd4ce3) (make-undefined-violation . kd4da3) (make-syntax-violation . kd4d86) (make-serious-condition . kd4cb9) (make-non-continuable-violation . kd4d43) (make-message-condition . kd4c8b) (make-lexical-violation . kd4d6d) (make-irritants-condition . kd4d0f) (make-implementation-restriction-violation . kd4d58) (make-error . kd4cce) (make-assertion-violation . kd4cf8) (lexical-violation? . kd4d6f) (irritants-condition? . kd4d13) (implementation-restriction-violation? . kd4d5a) (error? . kd4cd0) (condition-who . kd4d30) (condition-predicate . kd52fc) (condition-message . kd4c91) (condition-irritants . kd4d15) (condition-accessor . kd52fb) (condition . kd52fa) (assertion-violation? . kd4cfa) (condition? . kd52f9) (utf32->string . kd52f8) (utf16->string . kd52f7) (utf8->string . kd52f6) (uint-list->bytevector . kd52f5) (u8-list->bytevector . kd52f4) (string->utf8 . kd52f3) (string->utf32 . kd52f2) (string->utf16 . kd52f1) (sint-list->bytevector . kd52f0) (native-endianness . kd52ef) (bytevector? . kd52ee) (bytevector=? . kd52ed) (bytevector-uint-set! . kd52ec) (bytevector-uint-ref . kd52eb) (bytevector-u8-set! . kd52ea) (bytevector-u8-ref . kd52e9) (bytevector-u64-set! . kd52e8) (bytevector-u64-ref . kd52e7) (bytevector-u64-native-set! . kd52e6) (bytevector-u64-native-ref . kd52e5) (bytevector-u32-set! . kd52e4) (bytevector-u32-ref . kd52e3) (bytevector-u32-native-set! . kd52e2) (bytevector-u32-native-ref . kd52e1) (bytevector-u16-set! . kd52e0) (bytevector-u16-ref . kd52df) (bytevector-u16-native-set! . kd52de) (bytevector-u16-native-ref . kd52dd) (bytevector-sint-set! . kd52dc) (bytevector-sint-ref . kd52db) (bytevector-s8-set! . kd52da) (bytevector-s8-ref . kd52d9) (bytevector-s64-set! . kd52d8) (bytevector-s64-ref . kd52d7) (bytevector-s64-native-set! . kd52d6) (bytevector-s64-native-ref . kd52d5) (bytevector-s32-set! . kd52d4) (bytevector-s32-ref . kd52d3) (bytevector-s32-native-set! . kd52d2) (bytevector-s32-native-ref . kd52d1) (bytevector-s16-set! . kd52d0) (bytevector-s16-ref . kd52cf) (bytevector-s16-native-set! . kd52ce) (bytevector-s16-native-ref . kd52cd) (bytevector-length . kd52cc) (bytevector-ieee-single-ref . kd52cb) (bytevector-ieee-single-set! . kd52ca) (bytevector-ieee-single-native-set! . kd52c9) (bytevector-ieee-single-native-ref . kd52c8) (bytevector-ieee-double-set! . kd52c7) (bytevector-ieee-double-ref . kd52c6) (bytevector-ieee-double-native-set! . kd52c5) (bytevector-ieee-double-native-ref . kd52c4) (bytevector-fill! . kd52c3) (bytevector-copy! . kd52c2) (bytevector-copy . kd52c1) (bytevector->uint-list . kd52c0) (bytevector->u8-list . kd52bf) (bytevector->sint-list . kd52be) (no-nans-violation? . kd4ee3) (no-infinities-violation? . kd4ece) (make-no-nans-violation . kd4ee1) (make-no-infinities-violation . kd4ecc) (real->flonum . kd52bd) (flzero? . kd52bc) (fltruncate . kd52bb) (fltan . kd52ba) (flsqrt . kd52b9) (flsin . kd52b8) (flround . kd52b7) (flpositive? . kd52b6) (flonum? . kd52b5) (flodd? . kd52b4) (flnumerator . kd52b3) (flnegative? . kd52b2) (flnan? . kd52b1) (flmod0 . kd52b0) (flmod . kd52af) (flmin . kd52ae) (flmax . kd52ad) (fllog . kd52ac) (flinteger? . kd52ab) (flinfinite? . kd52aa) (flfloor . kd52a9) (flfinite? . kd52a8) (flexpt . kd52a7) (flexp . kd52a6) (fleven? . kd52a5) (fldiv0-and-mod0 . kd52a4) (fldiv0 . kd52a3) (fldiv-and-mod . kd52a2) (fldiv . kd52a1) (fldenominator . kd52a0) (flcos . kd529f) (flceiling . kd529e) (flatan . kd529d) (flasin . kd529c) (flacos . kd529b) (flabs . kd529a) (fl>? . kd5299) (fl>=? . kd5298) (fl=? . kd5297) (fl<? . kd5296) (fl<=? . kd5295) (fl/ . kd5294) (fl- . kd5293) (fl+ . kd5292) (fl* . kd5291) (fixnum->flonum . kd5290) (fxzero? . kd528f) (fxxor . kd528e) (fxrotate-bit-field . kd528d) (fxreverse-bit-field . kd528c) (fxpositive? . kd528b) (fxodd? . kd528a) (fxnot . kd5289) (fxnegative? . kd5288) (fxmod0 . kd5287) (fxmod . kd5286) (fxmin . kd5285) (fxmax . kd5284) (fxlength . kd5283) (fxior . kd5282) (fxif . kd5281) (fxfirst-bit-set . kd5280) (fxeven? . kd527f) (fxdiv0-and-mod0 . kd527e) (fxdiv0 . kd527d) (fxdiv-and-mod . kd527c) (fxdiv . kd527b) (fxcopy-bit-field . kd527a) (fxcopy-bit . kd5279) (fxbit-set? . kd5278) (fxbit-field . kd5277) (fxbit-count . kd5276) (fxarithmetic-shift-right . kd5275) (fxarithmetic-shift-left . kd5274) (fxarithmetic-shift . kd5273) (fxand . kd5272) (fx>? . kd5271) (fx>=? . kd5270) (fx=? . kd526f) (fx<? . kd526e) (fx<=? . kd526d) (fx-/carry . kd526c) (fx- . kd526b) (fx+/carry . kd526a) (fx+ . kd5269) (fx*/carry . kd5268) (fx* . kd5267) (greatest-fixnum . kd5266) (least-fixnum . kd5265) (fixnum-width . kd5264) (fixnum? . kd5263) (bitwise-rotate-bit-field . kd5262) (bitwise-reverse-bit-field . kd5261) (bitwise-length . kd5260) (bitwise-if . kd525f) (bitwise-first-bit-set . kd525e) (bitwise-copy-bit-field . kd525d) (bitwise-copy-bit . kd525c) (bitwise-bit-set? . kd525b) (bitwise-bit-field . kd525a) (bitwise-bit-count . kd5259) (bitwise-xor . kd5258) (bitwise-ior . kd5257) (bitwise-and . kd5256) (bitwise-not . kd5255) (bitwise-arithmetic-shift-right . kd5254) (bitwise-arithmetic-shift-left . kd5253) (bitwise-arithmetic-shift . kd5252) (zero? . kd5251) (vector? . kd5250) (vector-set! . kd524f) (vector-ref . kd524e) (vector-map . kd524d) (vector-length . kd524c) (vector-for-each . kd524b) (vector-fill! . kd524a) (vector->list . kd5249) (vector . kd5248) (values . kd5247) (truncate . kd5246) (tan . kd5245) (symbol? . kd5244) (symbol=? . kd5243) (symbol->string . kd5242) (substring . kd5241) (string? . kd5240) (string>? . kd523f) (string>=? . kd523e) (string=? . kd523d) (string<? . kd523c) (string<=? . kd523b) (string-ref . kd523a) (string-length . kd5239) (string-for-each . kd5238) (string-copy . kd5237) (string-append . kd5236) (string->symbol . kd5235) (string->number . kd5234) (string->list . kd5233) (string . kd5232) (sqrt . kd5231) (sin . kd5230) (round . kd522f) (reverse . kd522e) (real? . kd522d) (real-valued? . kd522c) (real-part . kd522b) (rationalize . kd522a) (rational? . kd5229) (rational-valued? . kd5228) (procedure? . kd5227) (positive? . kd5226) (pair? . kd5225) (odd? . kd5224) (numerator . kd5223) (number? . kd5222) (number->string . kd5221) (null? . kd5220) (not . kd521f) (negative? . kd521e) (nan? . kd521d) (min . kd521c) (max . kd521b) (map . kd521a) (make-vector . kd5219) (make-string . kd5218) (make-rectangular . kd5217) (make-polar . kd5216) (magnitude . kd5215) (log . kd5214) (list? . kd5213) (list-tail . kd5212) (list-ref . kd5211) (list->vector . kd5210) (list->string . kd520f) (list . kd520e) (length . kd520d) (lcm . kd520c) (integer? . kd520b) (integer-valued? . kd520a) (integer->char . kd5209) (infinite? . kd5208) (inexact? . kd5207) (inexact . kd5206) (imag-part . kd5205) (gcd . kd5204) (for-each . kd5203) (floor . kd5202) (finite? . kd5201) (expt . kd5200) (exp . kd51ff) (exact? . kd51fe) (exact-integer-sqrt . kd51fd) (exact . kd51fc) (even? . kd51fb) (error . kd51fa) (eqv? . kd51f9) (equal? . kd51f8) (eq? . kd51f7) (dynamic-wind . kd51f6) (div0-and-mod0 . kd51f5) (mod0 . kd51f4) (div0 . kd51f3) (div-and-mod . kd51f2) (mod . kd51f1) (div . kd51f0) (denominator . kd51ef) (cos . kd51ee) (cons . kd51ed) (complex? . kd51ec) (char? . kd51eb) (char>? . kd51ea) (char>=? . kd51e9) (char=? . kd51e8) (char<? . kd51e7) (char<=? . kd51e6) (char->integer . kd51e5) (ceiling . kd51e4) (call-with-values . kd51e3) (call/cc . kd51e2) (call-with-current-continuation . kd51e1) (cddddr . kd51e0) (cdddar . kd51df) (cddadr . kd51de) (cddaar . kd51dd) (cdaddr . kd51dc) (cdadar . kd51db) (cdaadr . kd51da) (cdaaar . kd51d9) (cadddr . kd51d8) (caddar . kd51d7) (cadadr . kd51d6) (cadaar . kd51d5) (caaddr . kd51d4) (caadar . kd51d3) (caaadr . kd51d2) (caaaar . kd51d1) (cdddr . kd51d0) (cddar . kd51cf) (cdadr . kd51ce) (cdaar . kd51cd) (caddr . kd51cc) (cadar . kd51cb) (caadr . kd51ca) (caaar . kd51c9) (cddr . kd51c8) (cdar . kd51c7) (cadr . kd51c6) (caar . kd51c5) (cdr . kd51c4) (car . kd51c3) (boolean? . kd51c2) (boolean=? . kd51c1) (atan . kd51c0) (assertion-violation . kd51bf) (asin . kd51be) (apply . kd51bd) (append . kd51bc) (angle . kd51bb) (acos . kd51ba) (abs . kd51b9) (/ . kd51b8) (* . kd51b7) (- . kd51b6) (+ . kd51b5) (>= . kd51b4) (> . kd51b3) (= . kd51b2) (<= . kd51b1) (< . kd51b0) (&no-nans . kd51ae) (&no-infinities . kd51ad) (&i/o-encoding . kd51ac) (&i/o-decoding . kd51ab) (&i/o-port . kd51aa) (&i/o-file-does-not-exist . kd51a9) (&i/o-file-already-exists . kd51a8) (&i/o-file-is-read-only . kd51a7) (&i/o-file-protection . kd51a6) (&i/o-filename . kd51a5) (&i/o-invalid-position . kd51a4) (&i/o-write . kd51a3) (&i/o-read . kd51a2) (&i/o . kd51a1) (&undefined . kd51a0) (&syntax . kd519f) (&lexical . kd519e) (&implementation-restriction . kd519d) (&non-continuable . kd519c) (&who . kd519b) (&irritants . kd519a) (&assertion . kd5199) (&violation . kd5198) (&error . kd5197) (&serious . kd5196) (&warning . kd5195) (&message . kd5194) (&condition . kd5193) (define-condition-type . kd5192) (define-enumeration . kd5191) (define-record-type . kd5190) (parent-rtd . kd518f) (nongenerative . kd518e) (opaque . kd518d) (sealed . kd518c) (protocol . kd518b) (parent . kd518a) (immutable . kd5189) (mutable . kd5188) (fields . kd5187) (error-handling-mode . kd5186) (file-options . kd5185) (buffer-mode . kd5184) (eol-style . kd5183) (guard . kd5182) (unsyntax-splicing . kd517f) (unsyntax . kd517e) (unquote-splicing . kd517d) (unquote . kd517c) (_ . kd517b) (else . kd517a) (=> . kd5179) (... . kd5178) (assert . kd5177) (endianness . kd5176) (do . kd5173) (cond . kd5172) (let* . kd5171) (let*-values . kd5170) (let-values . kd516f) (identifier-syntax . kd516e) (with-syntax . kd516d) (quasisyntax . kd516c) (quasiquote . kd516b) (syntax-rules . kd516a) (record-constructor-descriptor . kd5167) (record-type-descriptor . kd5166) (case . kd5165) (unless . kd5163) (when . kd5162) (or . kd5161) (and . kd5160) (if . kd515f) (let . kd515e) (letrec* . kd515d) (letrec . kd515c) (case-lambda . kd515a) (lambda . kd5159) (syntax . kd5158) (syntax-case . kd5157) (quote . kd5156) (letrec-syntax . kd5154) (let-syntax . kd5153) (set! . kd5152) (begin . kd5150) (define-syntax . kd514e) (define . kd514d)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd5483 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . kd3194) (quotient . kd5333) (null-environment . kd3192) (remainder . kd5332) (modulo . kd5331) (inexact->exact . kd5330) (force . kd532f) (exact->inexact . kd532e) (make-promise . kd532d) (delay . kd5175)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd5484 '(rnrs control) '(6) '() '() '() '((do . kd5173) (unless . kd5163) (when . kd5162) (case-lambda . kd515a)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd5485 '(rnrs eval) '(6) '() '() '() '((eval . kd3198) (environment . kd3190)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd5486 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . kd5329) (set-car! . kd5328)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd5487 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . kd532b) (string-set! . kd532a)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd5488 '(rnrs programs) '(6) '() '() '() '((exit . kd532c) (command-line . kd4ff0)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd5489 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . kd2f03) (identifier? . kd31ba) (generate-temporaries . kd31a6) (free-identifier=? . kd31a8) (syntax->datum . kd31be) (datum->syntax . kd31bc) (bound-identifier=? . kd31aa) (syntax-violation . kd31b8) (unsyntax-splicing . kd517f) (unsyntax . kd517e) (_ . kd517b) (... . kd5178) (with-syntax . kd516d) (quasisyntax . kd516c) (syntax . kd5158) (syntax-case . kd5157)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd548a '(rnrs files) '(6) '() '() '() '((delete-file . kd539c) (file-exists? . kd539b) (make-i/o-write-error . kd4de2) (make-i/o-read-error . kd4dcd) (make-i/o-port-error . kd4e83) (make-i/o-invalid-position-error . kd4df9) (make-i/o-filename-error . kd4e14) (make-i/o-file-protection-error . kd4e2d) (make-i/o-file-is-read-only-error . kd4e42) (make-i/o-file-does-not-exist-error . kd4e6c) (make-i/o-file-already-exists-error . kd4e57) (make-i/o-error . kd4db8) (i/o-write-error? . kd4de4) (i/o-read-error? . kd4dcf) (i/o-port-error? . kd4e87) (i/o-invalid-position-error? . kd4dfd) (i/o-filename-error? . kd4e18) (i/o-file-protection-error? . kd4e2f) (i/o-file-is-read-only-error? . kd4e44) (i/o-file-does-not-exist-error? . kd4e6e) (i/o-file-already-exists-error? . kd4e59) (i/o-error? . kd4dba) (i/o-error-position . kd4dff) (i/o-error-port . kd4e89) (i/o-error-filename . kd4e1a) (&i/o-port . kd51aa) (&i/o-file-does-not-exist . kd51a9) (&i/o-file-already-exists . kd51a8) (&i/o-file-is-read-only . kd51a7) (&i/o-file-protection . kd51a6) (&i/o-filename . kd51a5) (&i/o-invalid-position . kd51a4) (&i/o-write . kd51a3) (&i/o-read . kd51a2) (&i/o . kd51a1)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd548b '(rnrs sorting) '(6) '() '() '() '((vector-sort! . kd539a) (vector-sort . kd5399) (list-sort . kd5398)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd548c '(rnrs base) '(6) '() '() '() '((zero? . kd5251) (vector? . kd5250) (vector-set! . kd524f) (vector-ref . kd524e) (vector-map . kd524d) (vector-length . kd524c) (vector-for-each . kd524b) (vector-fill! . kd524a) (vector->list . kd5249) (vector . kd5248) (values . kd5247) (truncate . kd5246) (tan . kd5245) (symbol? . kd5244) (symbol=? . kd5243) (symbol->string . kd5242) (substring . kd5241) (string? . kd5240) (string>? . kd523f) (string>=? . kd523e) (string=? . kd523d) (string<? . kd523c) (string<=? . kd523b) (string-ref . kd523a) (string-length . kd5239) (string-for-each . kd5238) (string-copy . kd5237) (string-append . kd5236) (string->symbol . kd5235) (string->number . kd5234) (string->list . kd5233) (string . kd5232) (sqrt . kd5231) (sin . kd5230) (round . kd522f) (reverse . kd522e) (real? . kd522d) (real-valued? . kd522c) (real-part . kd522b) (rationalize . kd522a) (rational? . kd5229) (rational-valued? . kd5228) (procedure? . kd5227) (positive? . kd5226) (pair? . kd5225) (odd? . kd5224) (numerator . kd5223) (number? . kd5222) (number->string . kd5221) (null? . kd5220) (not . kd521f) (negative? . kd521e) (nan? . kd521d) (min . kd521c) (max . kd521b) (map . kd521a) (make-vector . kd5219) (make-string . kd5218) (make-rectangular . kd5217) (make-polar . kd5216) (magnitude . kd5215) (log . kd5214) (list? . kd5213) (list-tail . kd5212) (list-ref . kd5211) (list->vector . kd5210) (list->string . kd520f) (list . kd520e) (length . kd520d) (lcm . kd520c) (integer? . kd520b) (integer-valued? . kd520a) (integer->char . kd5209) (infinite? . kd5208) (inexact? . kd5207) (inexact . kd5206) (imag-part . kd5205) (gcd . kd5204) (for-each . kd5203) (floor . kd5202) (finite? . kd5201) (expt . kd5200) (exp . kd51ff) (exact? . kd51fe) (exact-integer-sqrt . kd51fd) (exact . kd51fc) (even? . kd51fb) (error . kd51fa) (eqv? . kd51f9) (equal? . kd51f8) (eq? . kd51f7) (dynamic-wind . kd51f6) (div0-and-mod0 . kd51f5) (mod0 . kd51f4) (div0 . kd51f3) (div-and-mod . kd51f2) (mod . kd51f1) (div . kd51f0) (denominator . kd51ef) (cos . kd51ee) (cons . kd51ed) (complex? . kd51ec) (char? . kd51eb) (char>? . kd51ea) (char>=? . kd51e9) (char=? . kd51e8) (char<? . kd51e7) (char<=? . kd51e6) (char->integer . kd51e5) (ceiling . kd51e4) (call-with-values . kd51e3) (call/cc . kd51e2) (call-with-current-continuation . kd51e1) (cddddr . kd51e0) (cdddar . kd51df) (cddadr . kd51de) (cddaar . kd51dd) (cdaddr . kd51dc) (cdadar . kd51db) (cdaadr . kd51da) (cdaaar . kd51d9) (cadddr . kd51d8) (caddar . kd51d7) (cadadr . kd51d6) (cadaar . kd51d5) (caaddr . kd51d4) (caadar . kd51d3) (caaadr . kd51d2) (caaaar . kd51d1) (cdddr . kd51d0) (cddar . kd51cf) (cdadr . kd51ce) (cdaar . kd51cd) (caddr . kd51cc) (cadar . kd51cb) (caadr . kd51ca) (caaar . kd51c9) (cddr . kd51c8) (cdar . kd51c7) (cadr . kd51c6) (caar . kd51c5) (cdr . kd51c4) (car . kd51c3) (boolean? . kd51c2) (boolean=? . kd51c1) (atan . kd51c0) (assertion-violation . kd51bf) (asin . kd51be) (apply . kd51bd) (append . kd51bc) (angle . kd51bb) (acos . kd51ba) (abs . kd51b9) (/ . kd51b8) (* . kd51b7) (- . kd51b6) (+ . kd51b5) (>= . kd51b4) (> . kd51b3) (= . kd51b2) (<= . kd51b1) (< . kd51b0) (unquote-splicing . kd517d) (unquote . kd517c) (_ . kd517b) (else . kd517a) (=> . kd5179) (... . kd5178) (assert . kd5177) (cond . kd5172) (let* . kd5171) (let*-values . kd5170) (let-values . kd516f) (identifier-syntax . kd516e) (quasiquote . kd516b) (syntax-rules . kd516a) (case . kd5165) (or . kd5161) (and . kd5160) (if . kd515f) (let . kd515e) (letrec* . kd515d) (letrec . kd515c) (lambda . kd5159) (quote . kd5156) (letrec-syntax . kd5154) (let-syntax . kd5153) (set! . kd5152) (begin . kd5150) (define-syntax . kd514e) (define . kd514d)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd548d '(rnrs lists) '(6) '() '() '() '((remove . kd5327) (remv . kd5326) (remp . kd5325) (remq . kd5324) (partition . kd5323) (memv . kd5322) (memq . kd5321) (memp . kd5320) (member . kd531f) (exists . kd531e) (for-all . kd531d) (fold-right . kd531c) (fold-left . kd531b) (find . kd531a) (filter . kd5319) (cons* . kd5318) (assv . kd5317) (assq . kd5316) (assp . kd5315) (assoc . kd5314)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd548e '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . kd5382) (call-with-input-file . kd5381) (write-char . kd5380) (write . kd537f) (with-output-to-file . kd537e) (with-input-from-file . kd537d) (read-char . kd537c) (read . kd537b) (peek-char . kd537a) (open-output-file . kd5379) (open-input-file . kd5378) (newline . kd5377) (display . kd5376) (close-output-port . kd5375) (close-input-port . kd5374) (eof-object? . kd5373) (eof-object . kd5372) (current-error-port . kd5371) (current-output-port . kd5370) (current-input-port . kd536f) (output-port? . kd536e) (input-port? . kd536d) (make-i/o-write-error . kd4de2) (make-i/o-read-error . kd4dcd) (make-i/o-port-error . kd4e83) (make-i/o-invalid-position-error . kd4df9) (make-i/o-filename-error . kd4e14) (make-i/o-file-protection-error . kd4e2d) (make-i/o-file-is-read-only-error . kd4e42) (make-i/o-file-does-not-exist-error . kd4e6c) (make-i/o-file-already-exists-error . kd4e57) (make-i/o-error . kd4db8) (i/o-write-error? . kd4de4) (i/o-read-error? . kd4dcf) (i/o-port-error? . kd4e87) (i/o-invalid-position-error? . kd4dfd) (i/o-filename-error? . kd4e18) (i/o-file-protection-error? . kd4e2f) (i/o-file-is-read-only-error? . kd4e44) (i/o-file-does-not-exist-error? . kd4e6e) (i/o-file-already-exists-error? . kd4e59) (i/o-error? . kd4dba) (i/o-error-position . kd4dff) (i/o-error-port . kd4e89) (i/o-error-filename . kd4e1a) (&i/o-port . kd51aa) (&i/o-file-does-not-exist . kd51a9) (&i/o-file-already-exists . kd51a8) (&i/o-file-is-read-only . kd51a7) (&i/o-file-protection . kd51a6) (&i/o-filename . kd51a5) (&i/o-invalid-position . kd51a4) (&i/o-write . kd51a3) (&i/o-read . kd51a2) (&i/o . kd51a1)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd548f '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . kd5343) (utf32->string . kd52f8) (utf16->string . kd52f7) (utf8->string . kd52f6) (uint-list->bytevector . kd52f5) (u8-list->bytevector . kd52f4) (string->utf8 . kd52f3) (string->utf32 . kd52f2) (string->utf16 . kd52f1) (sint-list->bytevector . kd52f0) (native-endianness . kd52ef) (bytevector? . kd52ee) (bytevector=? . kd52ed) (bytevector-uint-set! . kd52ec) (bytevector-uint-ref . kd52eb) (bytevector-u8-set! . kd52ea) (bytevector-u8-ref . kd52e9) (bytevector-u64-set! . kd52e8) (bytevector-u64-ref . kd52e7) (bytevector-u64-native-set! . kd52e6) (bytevector-u64-native-ref . kd52e5) (bytevector-u32-set! . kd52e4) (bytevector-u32-ref . kd52e3) (bytevector-u32-native-set! . kd52e2) (bytevector-u32-native-ref . kd52e1) (bytevector-u16-set! . kd52e0) (bytevector-u16-ref . kd52df) (bytevector-u16-native-set! . kd52de) (bytevector-u16-native-ref . kd52dd) (bytevector-sint-set! . kd52dc) (bytevector-sint-ref . kd52db) (bytevector-s8-set! . kd52da) (bytevector-s8-ref . kd52d9) (bytevector-s64-set! . kd52d8) (bytevector-s64-ref . kd52d7) (bytevector-s64-native-set! . kd52d6) (bytevector-s64-native-ref . kd52d5) (bytevector-s32-set! . kd52d4) (bytevector-s32-ref . kd52d3) (bytevector-s32-native-set! . kd52d2) (bytevector-s32-native-ref . kd52d1) (bytevector-s16-set! . kd52d0) (bytevector-s16-ref . kd52cf) (bytevector-s16-native-set! . kd52ce) (bytevector-s16-native-ref . kd52cd) (bytevector-length . kd52cc) (bytevector-ieee-single-ref . kd52cb) (bytevector-ieee-single-set! . kd52ca) (bytevector-ieee-single-native-set! . kd52c9) (bytevector-ieee-single-native-ref . kd52c8) (bytevector-ieee-double-set! . kd52c7) (bytevector-ieee-double-ref . kd52c6) (bytevector-ieee-double-native-set! . kd52c5) (bytevector-ieee-double-native-ref . kd52c4) (bytevector-fill! . kd52c3) (bytevector-copy! . kd52c2) (bytevector-copy . kd52c1) (bytevector->uint-list . kd52c0) (bytevector->u8-list . kd52bf) (bytevector->sint-list . kd52be) (endianness . kd5176)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd5490 '(rnrs unicode) '(6) '() '() '() '((string-upcase . kd53ca) (string-titlecase . kd53c9) (string-normalize-nfkd . kd53c8) (string-normalize-nfkc . kd53c7) (string-normalize-nfd . kd53c6) (string-normalize-nfc . kd53c5) (string-foldcase . kd53c4) (string-downcase . kd53c3) (string-ci>? . kd53c2) (string-ci>=? . kd53c1) (string-ci=? . kd53c0) (string-ci<? . kd53bf) (string-ci<=? . kd53be) (char-whitespace? . kd53bd) (char-upper-case? . kd53bc) (char-title-case? . kd53bb) (char-numeric? . kd53ba) (char-lower-case? . kd53b9) (char-general-category . kd53b8) (char-upcase . kd53b7) (char-titlecase . kd53b6) (char-foldcase . kd53b5) (char-downcase . kd53b4) (char-ci>? . kd53b3) (char-ci>=? . kd53b2) (char-ci=? . kd53b1) (char-ci<? . kd53b0) (char-ci<=? . kd53af) (char-alphabetic? . kd53ae)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd5491 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . kd530d) (raise-continuable . kd530c) (raise . kd530b) (guard . kd5182) (else . kd517a) (=> . kd5179)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd5492 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . kd5262) (bitwise-reverse-bit-field . kd5261) (bitwise-length . kd5260) (bitwise-if . kd525f) (bitwise-first-bit-set . kd525e) (bitwise-copy-bit-field . kd525d) (bitwise-copy-bit . kd525c) (bitwise-bit-set? . kd525b) (bitwise-bit-field . kd525a) (bitwise-bit-count . kd5259) (bitwise-xor . kd5258) (bitwise-ior . kd5257) (bitwise-and . kd5256) (bitwise-not . kd5255) (bitwise-arithmetic-shift-right . kd5254) (bitwise-arithmetic-shift-left . kd5253) (bitwise-arithmetic-shift . kd5252)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd5493 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . kd528f) (fxxor . kd528e) (fxrotate-bit-field . kd528d) (fxreverse-bit-field . kd528c) (fxpositive? . kd528b) (fxodd? . kd528a) (fxnot . kd5289) (fxnegative? . kd5288) (fxmod0 . kd5287) (fxmod . kd5286) (fxmin . kd5285) (fxmax . kd5284) (fxlength . kd5283) (fxior . kd5282) (fxif . kd5281) (fxfirst-bit-set . kd5280) (fxeven? . kd527f) (fxdiv0-and-mod0 . kd527e) (fxdiv0 . kd527d) (fxdiv-and-mod . kd527c) (fxdiv . kd527b) (fxcopy-bit-field . kd527a) (fxcopy-bit . kd5279) (fxbit-set? . kd5278) (fxbit-field . kd5277) (fxbit-count . kd5276) (fxarithmetic-shift-right . kd5275) (fxarithmetic-shift-left . kd5274) (fxarithmetic-shift . kd5273) (fxand . kd5272) (fx>? . kd5271) (fx>=? . kd5270) (fx=? . kd526f) (fx<? . kd526e) (fx<=? . kd526d) (fx-/carry . kd526c) (fx- . kd526b) (fx+/carry . kd526a) (fx+ . kd5269) (fx*/carry . kd5268) (fx* . kd5267) (greatest-fixnum . kd5266) (least-fixnum . kd5265) (fixnum-width . kd5264) (fixnum? . kd5263)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd5494 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . kd4ee3) (no-infinities-violation? . kd4ece) (make-no-nans-violation . kd4ee1) (make-no-infinities-violation . kd4ecc) (real->flonum . kd52bd) (flzero? . kd52bc) (fltruncate . kd52bb) (fltan . kd52ba) (flsqrt . kd52b9) (flsin . kd52b8) (flround . kd52b7) (flpositive? . kd52b6) (flonum? . kd52b5) (flodd? . kd52b4) (flnumerator . kd52b3) (flnegative? . kd52b2) (flnan? . kd52b1) (flmod0 . kd52b0) (flmod . kd52af) (flmin . kd52ae) (flmax . kd52ad) (fllog . kd52ac) (flinteger? . kd52ab) (flinfinite? . kd52aa) (flfloor . kd52a9) (flfinite? . kd52a8) (flexpt . kd52a7) (flexp . kd52a6) (fleven? . kd52a5) (fldiv0-and-mod0 . kd52a4) (fldiv0 . kd52a3) (fldiv-and-mod . kd52a2) (fldiv . kd52a1) (fldenominator . kd52a0) (flcos . kd529f) (flceiling . kd529e) (flatan . kd529d) (flasin . kd529c) (flacos . kd529b) (flabs . kd529a) (fl>? . kd5299) (fl>=? . kd5298) (fl=? . kd5297) (fl<? . kd5296) (fl<=? . kd5295) (fl/ . kd5294) (fl- . kd5293) (fl+ . kd5292) (fl* . kd5291) (fixnum->flonum . kd5290) (&no-nans . kd51ae) (&no-infinities . kd51ad)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd5495 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . kd5397) (string-ci-hash . kd5396) (string-hash . kd5395) (equal-hash . kd5394) (hashtable-equivalence-function . kd5393) (make-hashtable . kd5392) (hashtable-hash-function . kd5391) (make-eqv-hashtable . kd5390) (make-eq-hashtable . kd538f) (hashtable? . kd538e) (hashtable-update! . kd538d) (hashtable-size . kd538c) (hashtable-set! . kd538b) (hashtable-ref . kd538a) (hashtable-mutable? . kd5389) (hashtable-keys . kd5388) (hashtable-entries . kd5387) (hashtable-delete! . kd5386) (hashtable-copy . kd5385) (hashtable-contains? . kd5384) (hashtable-clear! . kd5383)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd5496 '(rnrs io ports) '(6) '() '() '() '((eof-object? . kd5373) (eof-object . kd5372) (current-error-port . kd5371) (current-output-port . kd5370) (current-input-port . kd536f) (output-port? . kd536e) (input-port? . kd536d) (utf-8-codec . kd536c) (utf-16-codec . kd536b) (transcoder-error-handling-mode . kd536a) (transcoder-eol-style . kd5369) (transcoder-codec . kd5368) (transcoded-port . kd5367) (textual-port? . kd5366) (string->bytevector . kd5365) (standard-output-port . kd5364) (standard-input-port . kd5363) (standard-error-port . kd5362) (set-port-position! . kd5361) (put-u8 . kd5360) (put-string . kd535f) (put-datum . kd535e) (put-char . kd535d) (put-bytevector . kd535c) (port? . kd535b) (port-transcoder . kd535a) (port-position . kd5359) (port-has-set-port-position!? . kd5358) (port-has-port-position? . kd5357) (port-eof? . kd5356) (output-port-buffer-mode . kd5355) (open-string-output-port . kd5354) (open-string-input-port . kd5353) (open-file-output-port . kd5352) (open-file-input/output-port . kd5351) (open-file-input-port . kd5350) (open-bytevector-output-port . kd534f) (open-bytevector-input-port . kd534e) (native-transcoder . kd534d) (native-eol-style . kd534c) (make-transcoder . kd534b) (latin-1-codec . kd534a) (make-i/o-write-error . kd4de2) (make-i/o-read-error . kd4dcd) (make-i/o-port-error . kd4e83) (make-i/o-invalid-position-error . kd4df9) (make-i/o-filename-error . kd4e14) (make-i/o-file-protection-error . kd4e2d) (make-i/o-file-is-read-only-error . kd4e42) (make-i/o-file-does-not-exist-error . kd4e6c) (make-i/o-file-already-exists-error . kd4e57) (make-i/o-error . kd4db8) (make-i/o-encoding-error . kd4eb3) (make-i/o-decoding-error . kd4e9c) (make-custom-textual-output-port . kd5349) (make-custom-textual-input/output-port . kd5348) (make-custom-textual-input-port . kd5347) (make-custom-binary-output-port . kd5346) (make-custom-binary-input/output-port . kd5345) (make-custom-binary-input-port . kd5344) (lookahead-u8 . kd5342) (lookahead-char . kd5341) (i/o-write-error? . kd4de4) (i/o-read-error? . kd4dcf) (i/o-port-error? . kd4e87) (i/o-invalid-position-error? . kd4dfd) (i/o-filename-error? . kd4e18) (i/o-file-protection-error? . kd4e2f) (i/o-file-is-read-only-error? . kd4e44) (i/o-file-does-not-exist-error? . kd4e6e) (i/o-file-already-exists-error? . kd4e59) (i/o-error? . kd4dba) (i/o-error-position . kd4dff) (i/o-error-port . kd4e89) (i/o-error-filename . kd4e1a) (i/o-encoding-error? . kd4eb7) (i/o-encoding-error-char . kd4eb9) (i/o-decoding-error? . kd4e9e) (get-u8 . kd5340) (get-string-n! . kd533f) (get-string-n . kd533e) (get-string-all . kd533d) (get-line . kd533c) (get-datum . kd533b) (get-char . kd533a) (get-bytevector-some . kd5339) (get-bytevector-n! . kd5338) (get-bytevector-n . kd5337) (get-bytevector-all . kd5336) (flush-output-port . kd5335) (close-port . kd5334) (call-with-string-output-port . kd5313) (call-with-port . kd5312) (call-with-bytevector-output-port . kd5311) (bytevector->string . kd5310) (buffer-mode? . kd530f) (binary-port? . kd530e) (&i/o-encoding . kd51ac) (&i/o-decoding . kd51ab) (&i/o-port . kd51aa) (&i/o-file-does-not-exist . kd51a9) (&i/o-file-already-exists . kd51a8) (&i/o-file-is-read-only . kd51a7) (&i/o-file-protection . kd51a6) (&i/o-filename . kd51a5) (&i/o-invalid-position . kd51a4) (&i/o-write . kd51a3) (&i/o-read . kd51a2) (&i/o . kd51a1) (error-handling-mode . kd5186) (file-options . kd5185) (buffer-mode . kd5184) (eol-style . kd5183)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd5497 '(rnrs enums) '(6) '() '() '() '((make-enumeration . kd530a) (enum-set=? . kd5309) (enum-set-universe . kd5308) (enum-set-union . kd5307) (enum-set-subset? . kd5306) (enum-set-projection . kd5305) (enum-set-member? . kd5304) (enum-set-intersection . kd5303) (enum-set-indexer . kd5302) (enum-set-difference . kd5301) (enum-set-constructor . kd5300) (enum-set-complement . kd52ff) (enum-set->list . kd52fe) (define-enumeration . kd5191)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd5498 '(rnrs conditions) '(6) '() '() '() '((who-condition? . kd4d2e) (warning? . kd4ca6) (violation? . kd4ce5) (undefined-violation? . kd4da5) (syntax-violation? . kd4d8c) (syntax-violation-subform . kd4d90) (syntax-violation-form . kd4d8e) (syntax-violation . kd31b8) (simple-conditions . kd52fd) (serious-condition? . kd4cbb) (non-continuable-violation? . kd4d45) (message-condition? . kd4c8f) (make-who-condition . kd4d2a) (make-warning . kd4ca4) (make-violation . kd4ce3) (make-undefined-violation . kd4da3) (make-syntax-violation . kd4d86) (make-serious-condition . kd4cb9) (make-non-continuable-violation . kd4d43) (make-message-condition . kd4c8b) (make-lexical-violation . kd4d6d) (make-irritants-condition . kd4d0f) (make-implementation-restriction-violation . kd4d58) (make-error . kd4cce) (make-assertion-violation . kd4cf8) (lexical-violation? . kd4d6f) (irritants-condition? . kd4d13) (implementation-restriction-violation? . kd4d5a) (error? . kd4cd0) (condition-who . kd4d30) (condition-predicate . kd52fc) (condition-message . kd4c91) (condition-irritants . kd4d15) (condition-accessor . kd52fb) (condition . kd52fa) (assertion-violation? . kd4cfa) (condition? . kd52f9) (&undefined . kd51a0) (&syntax . kd519f) (&lexical . kd519e) (&implementation-restriction . kd519d) (&non-continuable . kd519c) (&who . kd519b) (&irritants . kd519a) (&assertion . kd5199) (&violation . kd5198) (&error . kd5197) (&serious . kd5196) (&warning . kd5195) (&message . kd5194) (&condition . kd5193) (define-condition-type . kd5192)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd5499 '(rnrs records inspection) '(6) '() '() '() '((record? . kd53a6) (record-type-uid . kd53a5) (record-type-sealed? . kd53a4) (record-type-parent . kd53a3) (record-type-opaque? . kd53a2) (record-type-name . kd53a1) (record-type-generative? . kd53a0) (record-type-field-names . kd539f) (record-rtd . kd539e) (record-field-mutable? . kd539d)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd549a '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . kd53ad) (record-predicate . kd53ac) (record-mutator . kd53ab) (record-constructor . kd53aa) (record-accessor . kd53a9) (make-record-type-descriptor . kd53a8) (make-record-constructor-descriptor . kd53a7)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd549b '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . kd5190) (parent-rtd . kd518f) (nongenerative . kd518e) (opaque . kd518d) (sealed . kd518c) (protocol . kd518b) (parent . kd518a) (immutable . kd5189) (mutable . kd5188) (fields . kd5187) (record-constructor-descriptor . kd5167) (record-type-descriptor . kd5166)) '() values values '#f '#f '#t '#f) (kd2ce5@kd2b2d@install-library 'kd549c '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . kd4ee7) (&no-nans-rtd . kd4ee5) (&no-infinities-rcd . kd4ed2) (&no-infinities-rtd . kd4ed0) (&i/o-encoding-rcd . kd4ebd) (&i/o-encoding-rtd . kd4ebb) (&i/o-decoding-rcd . kd4ea2) (&i/o-decoding-rtd . kd4ea0) (&i/o-port-rcd . kd4e8d) (&i/o-port-rtd . kd4e8b) (&i/o-file-does-not-exist-rcd . kd4e72) (&i/o-file-does-not-exist-rtd . kd4e70) (&i/o-file-already-exists-rcd . kd4e5d) (&i/o-file-already-exists-rtd . kd4e5b) (&i/o-file-is-read-only-rcd . kd4e48) (&i/o-file-is-read-only-rtd . kd4e46) (&i/o-file-protection-rcd . kd4e33) (&i/o-file-protection-rtd . kd4e31) (&i/o-filename-rcd . kd4e1e) (&i/o-filename-rtd . kd4e1c) (&i/o-invalid-position-rcd . kd4e03) (&i/o-invalid-position-rtd . kd4e01) (&i/o-write-rcd . kd4de8) (&i/o-write-rtd . kd4de6) (&i/o-read-rcd . kd4dd3) (&i/o-read-rtd . kd4dd1) (&i/o-rcd . kd4dbe) (&i/o-rtd . kd4dbc) (&undefined-rcd . kd4da9) (&undefined-rtd . kd4da7) (&syntax-rcd . kd4d94) (&syntax-rtd . kd4d92) (&lexical-rcd . kd4d73) (&lexical-rtd . kd4d71) (&implementation-restriction-rcd . kd4d5e) (&implementation-restriction-rtd . kd4d5c) (&non-continuable-rcd . kd4d49) (&non-continuable-rtd . kd4d47) (&who-rcd . kd4d34) (&who-rtd . kd4d32) (&irritants-rcd . kd4d19) (&irritants-rtd . kd4d17) (&assertion-rcd . kd4cfe) (&assertion-rtd . kd4cfc) (&violation-rcd . kd4ce9) (&violation-rtd . kd4ce7) (&error-rcd . kd4cd4) (&error-rtd . kd4cd2) (&serious-rcd . kd4cbf) (&serious-rtd . kd4cbd) (&warning-rcd . kd4caa) (&warning-rtd . kd4ca8) (&message-rcd . kd4c95) (&message-rtd . kd4c93) (&condition-rcd . kd4c36) (&condition-rtd . kd4c34) (syntax-error . kd31b4) (syntax-dispatch . kd30d8) (pretty-print . kd547c) (eval-core . kd547b) (set-symbol-value! . kd547a) (symbol-value . kd5479) (gensym . kd5478) (void . kd5477) (load . kd4ff6) (interaction-environment . kd31c6) (char-ready? . kd5476) (regexp? . kd5475) (read-line . kd5474) (gensym-prefix-set! . kd5473) (ungensym . kd5472) (alist->eq-hash-table . kd5471) (assoc-ref . kd5470) (print . kd546f) (format . kd546e) (host-os . kd546d) (library-path . kd2b0c) (standard-library-path . kd546c) (file-newer? . kd546b) (stat-mtime . kd546a) (write-to-file . kd5469) (file->sexp-list . kd5468) (file->list . kd5467) (file->string . kd5466) (digit->integer . kd5465) (call-with-string-input-port . kd5464) (call-with-string-io . kd5463) (string-split . kd5462) (bytevector-for-each . kd5461) (string->regexp . kd5460) (rxmatch . kd545f) (regexp-replace-all . kd545e) (hashtable-for-each . kd545d) (mosh-cache-dir . kd28f6) (call-process . kd545c) (local-tz-offset . kd545b) (microseconds . kd545a) (directory-list . kd5459) (set-current-directory! . kd5458) (expand-path . kd5457) (current-directory . kd5456) (%spawn . kd5455) (%waitpid . kd5454) (simple-struct-name . kd5453) (simple-struct-set! . kd5452) (simple-struct-ref . kd5451) (make-simple-struct . kd5450) (simple-struct? . kd544f) (pointer-ref-c-int64 . kd544e) (pointer-ref-c-int32 . kd544d) (pointer-ref-c-int16 . kd544c) (pointer-ref-c-int8 . kd544b) (pointer-ref-c-uint64 . kd544a) (pointer-ref-c-uint32 . kd5449) (pointer-ref-c-uint16 . kd5448) (pointer-ref-c-uint8 . kd5447) (pointer-set-c-uint64! . kd5446) (pointer-set-c-uint32! . kd5445) (pointer-set-c-uint16! . kd5444) (pointer-set-c-uint8! . kd5443) (pointer-set-c-int64! . kd5442) (pointer-set-c-int32! . kd5441) (pointer-set-c-int16! . kd5440) (pointer-set-c-int8! . kd543f) (pointer-set-c-pointer! . kd543e) (pointer-set-c-double! . kd543d) (pointer-set-c-float! . kd543c) (pointer-set-c-long-long! . kd543b) (pointer-set-c-long! . kd543a) (pointer-set-c-int! . kd5439) (pointer-set-c-short! . kd5438) (pointer-set-c-char! . kd5437) (pointer-ref-c-pointer . kd5436) (pointer-ref-c-double . kd5435) (pointer-ref-c-float . kd5434) (pointer-ref-c-unsigned-long-long . kd5433) (pointer-ref-c-signed-long-long . kd5432) (pointer-ref-c-unsigned-long . kd5431) (pointer-ref-c-signed-long . kd5430) (pointer-ref-c-unsigned-int . kd542f) (pointer-ref-c-signed-int . kd542e) (pointer-ref-c-unsigned-short . kd542d) (pointer-ref-c-signed-short . kd542c) (pointer-ref-c-unsigned-char . kd542b) (pointer-ref-c-signed-char . kd542a) (pointer->integer . kd5429) (integer->pointer . kd5428) (pointer? . kd5427) (shared-errno . kd5426) (get-c-address . kd5425) (obj->integer . kd5424) (u8-list->c-procedure . kd5423) (%ffi-free-c-callback-trampoline . kd5422) (%ffi-make-c-callback-trampoline . kd5421) (%ffi-free . kd5420) (%ffi-malloc . kd541f) (%ffi-supported? . kd541e) (%ffi-pointer->string . kd541d) (%ffi-call . kd541c) (%ffi-lookup . kd541b) (%ffi-open . kd541a) (null-terminated-utf8->string . kd5419) (null-terminated-bytevector->string . kd5418) (%fork . kd5417) (%pipe . kd5416) (p . kd5415) (open-output-string . kd5414) (get-output-string . kd5413) (file-stat-ctime . kd5412) (file-stat-atime . kd5411) (file-stat-mtime . kd5410) (file-size-in-bytes . kd540f) (file-writable? . kd540e) (file-executable? . kd540d) (file-readable? . kd540c) (file-regular? . kd540b) (file-symbolic-link? . kd540a) (file-directory? . kd5409) (create-symbolic-link . kd5408) (rename-file . kd5407) (delete-directory . kd5406) (create-directory . kd5405) (create-mosh-cache-dir . kd5404) (get-environment-variables . kd5403) (current-exception-handler . kd5402) (get-environment-variable . kd5401) (join-wraps . kd5400) (id->real-label . kd53ff) (same-marks? . kd53fe) (same-marks*? . kd53fd) (get-timeofday . kd53fc) (get-command-line . kd53fb) (sys-display . kd53fa) (whereis . kd53f9) (register . kd53f8) (vm-join! . kd53f7) (vm-set-value! . kd53f6) (vm? . kd53f5) (main-vm? . kd53f4) (vm-eval . kd53f3) (vm-self . kd53f2) (vm-start! . kd53f1) (make-vm . kd53f0) (mutex-try-lock! . kd53ef) (mutex-unlock! . kd53ee) (mutex-lock! . kd53ed) (mutex? . kd53ec) (make-mutex . kd53eb) (condition-variable-notify-all! . kd53ea) (condition-variable-notify! . kd53e9) (condition-variable-wait! . kd53e8) (make-condition-variable . kd53e7) (mosh-executable-path . kd53e6) (make-file-options . kd53e5) (for-each-with-index . kd53e4) (source-info . kd53e3) (instruction? . kd53e2) (instruction->integer . kd53e1) (instruction->symbol . kd53e0) (closure->list . kd53df) (make-compiler-instruction . kd53de) (make-instruction . kd53dd) (set-source-info! . kd53dc) (bignum? . kd53db) (fast-equal? . kd53da) (fasl-read . kd53d9) (fasl-write . kd53d8) (time-usage . kd53d7) (os-constant . kd53d6) (disasm . kd53d5) (make-parameter . kd28f4) (socket-port . kd53d4) (socket-shutdown . kd53d3) (socket-close . kd53d2) (socket-send . kd53d1) (socket-recv! . kd53d0) (socket-recv . kd53cf) (make-server-socket . kd53ce) (make-client-socket . kd53cd) (socket-accept . kd53cc) (socket? . kd53cb) (string-upcase . kd53ca) (string-titlecase . kd53c9) (string-normalize-nfkd . kd53c8) (string-normalize-nfkc . kd53c7) (string-normalize-nfd . kd53c6) (string-normalize-nfc . kd53c5) (string-foldcase . kd53c4) (string-downcase . kd53c3) (string-ci>? . kd53c2) (string-ci>=? . kd53c1) (string-ci=? . kd53c0) (string-ci<? . kd53bf) (string-ci<=? . kd53be) (char-whitespace? . kd53bd) (char-upper-case? . kd53bc) (char-title-case? . kd53bb) (char-numeric? . kd53ba) (char-lower-case? . kd53b9) (char-general-category . kd53b8) (char-upcase . kd53b7) (char-titlecase . kd53b6) (char-foldcase . kd53b5) (char-downcase . kd53b4) (char-ci>? . kd53b3) (char-ci>=? . kd53b2) (char-ci=? . kd53b1) (char-ci<? . kd53b0) (char-ci<=? . kd53af) (char-alphabetic? . kd53ae) (make-variable-transformer . kd2f03) (identifier? . kd31ba) (generate-temporaries . kd31a6) (free-identifier=? . kd31a8) (syntax->datum . kd31be) (datum->syntax . kd31bc) (bound-identifier=? . kd31aa) (record-type-descriptor? . kd53ad) (record-predicate . kd53ac) (record-mutator . kd53ab) (record-constructor . kd53aa) (record-accessor . kd53a9) (make-record-type-descriptor . kd53a8) (make-record-constructor-descriptor . kd53a7) (record? . kd53a6) (record-type-uid . kd53a5) (record-type-sealed? . kd53a4) (record-type-parent . kd53a3) (record-type-opaque? . kd53a2) (record-type-name . kd53a1) (record-type-generative? . kd53a0) (record-type-field-names . kd539f) (record-rtd . kd539e) (record-field-mutable? . kd539d) (delete-file . kd539c) (file-exists? . kd539b) (vector-sort! . kd539a) (vector-sort . kd5399) (list-sort . kd5398) (symbol-hash . kd5397) (string-ci-hash . kd5396) (string-hash . kd5395) (equal-hash . kd5394) (hashtable-equivalence-function . kd5393) (make-hashtable . kd5392) (hashtable-hash-function . kd5391) (make-eqv-hashtable . kd5390) (make-eq-hashtable . kd538f) (hashtable? . kd538e) (hashtable-update! . kd538d) (hashtable-size . kd538c) (hashtable-set! . kd538b) (hashtable-ref . kd538a) (hashtable-mutable? . kd5389) (hashtable-keys . kd5388) (hashtable-entries . kd5387) (hashtable-delete! . kd5386) (hashtable-copy . kd5385) (hashtable-contains? . kd5384) (hashtable-clear! . kd5383) (call-with-output-file . kd5382) (call-with-input-file . kd5381) (write-char . kd5380) (write . kd537f) (with-output-to-file . kd537e) (with-input-from-file . kd537d) (read-char . kd537c) (read . kd537b) (peek-char . kd537a) (open-output-file . kd5379) (open-input-file . kd5378) (newline . kd5377) (display . kd5376) (close-output-port . kd5375) (close-input-port . kd5374) (eof-object? . kd5373) (eof-object . kd5372) (current-error-port . kd5371) (current-output-port . kd5370) (current-input-port . kd536f) (output-port? . kd536e) (input-port? . kd536d) (utf-8-codec . kd536c) (utf-16-codec . kd536b) (transcoder-error-handling-mode . kd536a) (transcoder-eol-style . kd5369) (transcoder-codec . kd5368) (transcoded-port . kd5367) (textual-port? . kd5366) (string->bytevector . kd5365) (standard-output-port . kd5364) (standard-input-port . kd5363) (standard-error-port . kd5362) (set-port-position! . kd5361) (put-u8 . kd5360) (put-string . kd535f) (put-datum . kd535e) (put-char . kd535d) (put-bytevector . kd535c) (port? . kd535b) (port-transcoder . kd535a) (port-position . kd5359) (port-has-set-port-position!? . kd5358) (port-has-port-position? . kd5357) (port-eof? . kd5356) (output-port-buffer-mode . kd5355) (open-string-output-port . kd5354) (open-string-input-port . kd5353) (open-file-output-port . kd5352) (open-file-input/output-port . kd5351) (open-file-input-port . kd5350) (open-bytevector-output-port . kd534f) (open-bytevector-input-port . kd534e) (native-transcoder . kd534d) (native-eol-style . kd534c) (make-transcoder . kd534b) (latin-1-codec . kd534a) (make-i/o-write-error . kd4de2) (make-i/o-read-error . kd4dcd) (make-i/o-port-error . kd4e83) (make-i/o-invalid-position-error . kd4df9) (make-i/o-filename-error . kd4e14) (make-i/o-file-protection-error . kd4e2d) (make-i/o-file-is-read-only-error . kd4e42) (make-i/o-file-does-not-exist-error . kd4e6c) (make-i/o-file-already-exists-error . kd4e57) (make-i/o-error . kd4db8) (make-i/o-encoding-error . kd4eb3) (make-i/o-decoding-error . kd4e9c) (make-custom-textual-output-port . kd5349) (make-custom-textual-input/output-port . kd5348) (make-custom-textual-input-port . kd5347) (make-custom-binary-output-port . kd5346) (make-custom-binary-input/output-port . kd5345) (make-custom-binary-input-port . kd5344) (make-bytevector . kd5343) (lookahead-u8 . kd5342) (lookahead-char . kd5341) (i/o-write-error? . kd4de4) (i/o-read-error? . kd4dcf) (i/o-port-error? . kd4e87) (i/o-invalid-position-error? . kd4dfd) (i/o-filename-error? . kd4e18) (i/o-file-protection-error? . kd4e2f) (i/o-file-is-read-only-error? . kd4e44) (i/o-file-does-not-exist-error? . kd4e6e) (i/o-file-already-exists-error? . kd4e59) (i/o-error? . kd4dba) (i/o-error-position . kd4dff) (i/o-error-port . kd4e89) (i/o-error-filename . kd4e1a) (i/o-encoding-error? . kd4eb7) (i/o-encoding-error-char . kd4eb9) (i/o-decoding-error? . kd4e9e) (get-u8 . kd5340) (get-string-n! . kd533f) (get-string-n . kd533e) (get-string-all . kd533d) (get-line . kd533c) (get-datum . kd533b) (get-char . kd533a) (get-bytevector-some . kd5339) (get-bytevector-n! . kd5338) (get-bytevector-n . kd5337) (get-bytevector-all . kd5336) (flush-output-port . kd5335) (close-port . kd5334) (scheme-report-environment . kd3194) (quotient . kd5333) (null-environment . kd3192) (remainder . kd5332) (modulo . kd5331) (inexact->exact . kd5330) (force . kd532f) (exact->inexact . kd532e) (make-promise . kd532d) (exit . kd532c) (command-line . kd4ff0) (string-fill! . kd532b) (string-set! . kd532a) (set-cdr! . kd5329) (set-car! . kd5328) (remove . kd5327) (remv . kd5326) (remp . kd5325) (remq . kd5324) (partition . kd5323) (memv . kd5322) (memq . kd5321) (memp . kd5320) (member . kd531f) (exists . kd531e) (for-all . kd531d) (fold-right . kd531c) (fold-left . kd531b) (find . kd531a) (filter . kd5319) (cons* . kd5318) (assv . kd5317) (assq . kd5316) (assp . kd5315) (assoc . kd5314) (call-with-string-output-port . kd5313) (call-with-port . kd5312) (call-with-bytevector-output-port . kd5311) (bytevector->string . kd5310) (buffer-mode? . kd530f) (binary-port? . kd530e) (with-exception-handler . kd530d) (raise-continuable . kd530c) (raise . kd530b) (eval . kd3198) (environment . kd3190) (make-enumeration . kd530a) (enum-set=? . kd5309) (enum-set-universe . kd5308) (enum-set-union . kd5307) (enum-set-subset? . kd5306) (enum-set-projection . kd5305) (enum-set-member? . kd5304) (enum-set-intersection . kd5303) (enum-set-indexer . kd5302) (enum-set-difference . kd5301) (enum-set-constructor . kd5300) (enum-set-complement . kd52ff) (enum-set->list . kd52fe) (who-condition? . kd4d2e) (warning? . kd4ca6) (violation? . kd4ce5) (undefined-violation? . kd4da5) (syntax-violation? . kd4d8c) (syntax-violation-subform . kd4d90) (syntax-violation-form . kd4d8e) (syntax-violation . kd31b8) (simple-conditions . kd52fd) (serious-condition? . kd4cbb) (non-continuable-violation? . kd4d45) (message-condition? . kd4c8f) (make-who-condition . kd4d2a) (make-warning . kd4ca4) (make-violation . kd4ce3) (make-undefined-violation . kd4da3) (make-syntax-violation . kd4d86) (make-serious-condition . kd4cb9) (make-non-continuable-violation . kd4d43) (make-message-condition . kd4c8b) (make-lexical-violation . kd4d6d) (make-irritants-condition . kd4d0f) (make-implementation-restriction-violation . kd4d58) (make-error . kd4cce) (make-assertion-violation . kd4cf8) (lexical-violation? . kd4d6f) (irritants-condition? . kd4d13) (implementation-restriction-violation? . kd4d5a) (error? . kd4cd0) (condition-who . kd4d30) (condition-predicate . kd52fc) (condition-message . kd4c91) (condition-irritants . kd4d15) (condition-accessor . kd52fb) (condition . kd52fa) (assertion-violation? . kd4cfa) (condition? . kd52f9) (utf32->string . kd52f8) (utf16->string . kd52f7) (utf8->string . kd52f6) (uint-list->bytevector . kd52f5) (u8-list->bytevector . kd52f4) (string->utf8 . kd52f3) (string->utf32 . kd52f2) (string->utf16 . kd52f1) (sint-list->bytevector . kd52f0) (native-endianness . kd52ef) (bytevector? . kd52ee) (bytevector=? . kd52ed) (bytevector-uint-set! . kd52ec) (bytevector-uint-ref . kd52eb) (bytevector-u8-set! . kd52ea) (bytevector-u8-ref . kd52e9) (bytevector-u64-set! . kd52e8) (bytevector-u64-ref . kd52e7) (bytevector-u64-native-set! . kd52e6) (bytevector-u64-native-ref . kd52e5) (bytevector-u32-set! . kd52e4) (bytevector-u32-ref . kd52e3) (bytevector-u32-native-set! . kd52e2) (bytevector-u32-native-ref . kd52e1) (bytevector-u16-set! . kd52e0) (bytevector-u16-ref . kd52df) (bytevector-u16-native-set! . kd52de) (bytevector-u16-native-ref . kd52dd) (bytevector-sint-set! . kd52dc) (bytevector-sint-ref . kd52db) (bytevector-s8-set! . kd52da) (bytevector-s8-ref . kd52d9) (bytevector-s64-set! . kd52d8) (bytevector-s64-ref . kd52d7) (bytevector-s64-native-set! . kd52d6) (bytevector-s64-native-ref . kd52d5) (bytevector-s32-set! . kd52d4) (bytevector-s32-ref . kd52d3) (bytevector-s32-native-set! . kd52d2) (bytevector-s32-native-ref . kd52d1) (bytevector-s16-set! . kd52d0) (bytevector-s16-ref . kd52cf) (bytevector-s16-native-set! . kd52ce) (bytevector-s16-native-ref . kd52cd) (bytevector-length . kd52cc) (bytevector-ieee-single-ref . kd52cb) (bytevector-ieee-single-set! . kd52ca) (bytevector-ieee-single-native-set! . kd52c9) (bytevector-ieee-single-native-ref . kd52c8) (bytevector-ieee-double-set! . kd52c7) (bytevector-ieee-double-ref . kd52c6) (bytevector-ieee-double-native-set! . kd52c5) (bytevector-ieee-double-native-ref . kd52c4) (bytevector-fill! . kd52c3) (bytevector-copy! . kd52c2) (bytevector-copy . kd52c1) (bytevector->uint-list . kd52c0) (bytevector->u8-list . kd52bf) (bytevector->sint-list . kd52be) (no-nans-violation? . kd4ee3) (no-infinities-violation? . kd4ece) (make-no-nans-violation . kd4ee1) (make-no-infinities-violation . kd4ecc) (real->flonum . kd52bd) (flzero? . kd52bc) (fltruncate . kd52bb) (fltan . kd52ba) (flsqrt . kd52b9) (flsin . kd52b8) (flround . kd52b7) (flpositive? . kd52b6) (flonum? . kd52b5) (flodd? . kd52b4) (flnumerator . kd52b3) (flnegative? . kd52b2) (flnan? . kd52b1) (flmod0 . kd52b0) (flmod . kd52af) (flmin . kd52ae) (flmax . kd52ad) (fllog . kd52ac) (flinteger? . kd52ab) (flinfinite? . kd52aa) (flfloor . kd52a9) (flfinite? . kd52a8) (flexpt . kd52a7) (flexp . kd52a6) (fleven? . kd52a5) (fldiv0-and-mod0 . kd52a4) (fldiv0 . kd52a3) (fldiv-and-mod . kd52a2) (fldiv . kd52a1) (fldenominator . kd52a0) (flcos . kd529f) (flceiling . kd529e) (flatan . kd529d) (flasin . kd529c) (flacos . kd529b) (flabs . kd529a) (fl>? . kd5299) (fl>=? . kd5298) (fl=? . kd5297) (fl<? . kd5296) (fl<=? . kd5295) (fl/ . kd5294) (fl- . kd5293) (fl+ . kd5292) (fl* . kd5291) (fixnum->flonum . kd5290) (fxzero? . kd528f) (fxxor . kd528e) (fxrotate-bit-field . kd528d) (fxreverse-bit-field . kd528c) (fxpositive? . kd528b) (fxodd? . kd528a) (fxnot . kd5289) (fxnegative? . kd5288) (fxmod0 . kd5287) (fxmod . kd5286) (fxmin . kd5285) (fxmax . kd5284) (fxlength . kd5283) (fxior . kd5282) (fxif . kd5281) (fxfirst-bit-set . kd5280) (fxeven? . kd527f) (fxdiv0-and-mod0 . kd527e) (fxdiv0 . kd527d) (fxdiv-and-mod . kd527c) (fxdiv . kd527b) (fxcopy-bit-field . kd527a) (fxcopy-bit . kd5279) (fxbit-set? . kd5278) (fxbit-field . kd5277) (fxbit-count . kd5276) (fxarithmetic-shift-right . kd5275) (fxarithmetic-shift-left . kd5274) (fxarithmetic-shift . kd5273) (fxand . kd5272) (fx>? . kd5271) (fx>=? . kd5270) (fx=? . kd526f) (fx<? . kd526e) (fx<=? . kd526d) (fx-/carry . kd526c) (fx- . kd526b) (fx+/carry . kd526a) (fx+ . kd5269) (fx*/carry . kd5268) (fx* . kd5267) (greatest-fixnum . kd5266) (least-fixnum . kd5265) (fixnum-width . kd5264) (fixnum? . kd5263) (bitwise-rotate-bit-field . kd5262) (bitwise-reverse-bit-field . kd5261) (bitwise-length . kd5260) (bitwise-if . kd525f) (bitwise-first-bit-set . kd525e) (bitwise-copy-bit-field . kd525d) (bitwise-copy-bit . kd525c) (bitwise-bit-set? . kd525b) (bitwise-bit-field . kd525a) (bitwise-bit-count . kd5259) (bitwise-xor . kd5258) (bitwise-ior . kd5257) (bitwise-and . kd5256) (bitwise-not . kd5255) (bitwise-arithmetic-shift-right . kd5254) (bitwise-arithmetic-shift-left . kd5253) (bitwise-arithmetic-shift . kd5252) (zero? . kd5251) (vector? . kd5250) (vector-set! . kd524f) (vector-ref . kd524e) (vector-map . kd524d) (vector-length . kd524c) (vector-for-each . kd524b) (vector-fill! . kd524a) (vector->list . kd5249) (vector . kd5248) (values . kd5247) (truncate . kd5246) (tan . kd5245) (symbol? . kd5244) (symbol=? . kd5243) (symbol->string . kd5242) (substring . kd5241) (string? . kd5240) (string>? . kd523f) (string>=? . kd523e) (string=? . kd523d) (string<? . kd523c) (string<=? . kd523b) (string-ref . kd523a) (string-length . kd5239) (string-for-each . kd5238) (string-copy . kd5237) (string-append . kd5236) (string->symbol . kd5235) (string->number . kd5234) (string->list . kd5233) (string . kd5232) (sqrt . kd5231) (sin . kd5230) (round . kd522f) (reverse . kd522e) (real? . kd522d) (real-valued? . kd522c) (real-part . kd522b) (rationalize . kd522a) (rational? . kd5229) (rational-valued? . kd5228) (procedure? . kd5227) (positive? . kd5226) (pair? . kd5225) (odd? . kd5224) (numerator . kd5223) (number? . kd5222) (number->string . kd5221) (null? . kd5220) (not . kd521f) (negative? . kd521e) (nan? . kd521d) (min . kd521c) (max . kd521b) (map . kd521a) (make-vector . kd5219) (make-string . kd5218) (make-rectangular . kd5217) (make-polar . kd5216) (magnitude . kd5215) (log . kd5214) (list? . kd5213) (list-tail . kd5212) (list-ref . kd5211) (list->vector . kd5210) (list->string . kd520f) (list . kd520e) (length . kd520d) (lcm . kd520c) (integer? . kd520b) (integer-valued? . kd520a) (integer->char . kd5209) (infinite? . kd5208) (inexact? . kd5207) (inexact . kd5206) (imag-part . kd5205) (gcd . kd5204) (for-each . kd5203) (floor . kd5202) (finite? . kd5201) (expt . kd5200) (exp . kd51ff) (exact? . kd51fe) (exact-integer-sqrt . kd51fd) (exact . kd51fc) (even? . kd51fb) (error . kd51fa) (eqv? . kd51f9) (equal? . kd51f8) (eq? . kd51f7) (dynamic-wind . kd51f6) (div0-and-mod0 . kd51f5) (mod0 . kd51f4) (div0 . kd51f3) (div-and-mod . kd51f2) (mod . kd51f1) (div . kd51f0) (denominator . kd51ef) (cos . kd51ee) (cons . kd51ed) (complex? . kd51ec) (char? . kd51eb) (char>? . kd51ea) (char>=? . kd51e9) (char=? . kd51e8) (char<? . kd51e7) (char<=? . kd51e6) (char->integer . kd51e5) (ceiling . kd51e4) (call-with-values . kd51e3) (call/cc . kd51e2) (call-with-current-continuation . kd51e1) (cddddr . kd51e0) (cdddar . kd51df) (cddadr . kd51de) (cddaar . kd51dd) (cdaddr . kd51dc) (cdadar . kd51db) (cdaadr . kd51da) (cdaaar . kd51d9) (cadddr . kd51d8) (caddar . kd51d7) (cadadr . kd51d6) (cadaar . kd51d5) (caaddr . kd51d4) (caadar . kd51d3) (caaadr . kd51d2) (caaaar . kd51d1) (cdddr . kd51d0) (cddar . kd51cf) (cdadr . kd51ce) (cdaar . kd51cd) (caddr . kd51cc) (cadar . kd51cb) (caadr . kd51ca) (caaar . kd51c9) (cddr . kd51c8) (cdar . kd51c7) (cadr . kd51c6) (caar . kd51c5) (cdr . kd51c4) (car . kd51c3) (boolean? . kd51c2) (boolean=? . kd51c1) (atan . kd51c0) (assertion-violation . kd51bf) (assertion-error . kd31b2) (asin . kd51be) (apply . kd51bd) (append . kd51bc) (angle . kd51bb) (acos . kd51ba) (abs . kd51b9) (/ . kd51b8) (* . kd51b7) (- . kd51b6) (+ . kd51b5) (>= . kd51b4) (> . kd51b3) (= . kd51b2) (<= . kd51b1) (< . kd51b0) (library . kd51af) (&no-nans . kd51ae) (&no-infinities . kd51ad) (&i/o-encoding . kd51ac) (&i/o-decoding . kd51ab) (&i/o-port . kd51aa) (&i/o-file-does-not-exist . kd51a9) (&i/o-file-already-exists . kd51a8) (&i/o-file-is-read-only . kd51a7) (&i/o-file-protection . kd51a6) (&i/o-filename . kd51a5) (&i/o-invalid-position . kd51a4) (&i/o-write . kd51a3) (&i/o-read . kd51a2) (&i/o . kd51a1) (&undefined . kd51a0) (&syntax . kd519f) (&lexical . kd519e) (&implementation-restriction . kd519d) (&non-continuable . kd519c) (&who . kd519b) (&irritants . kd519a) (&assertion . kd5199) (&violation . kd5198) (&error . kd5197) (&serious . kd5196) (&warning . kd5195) (&message . kd5194) (&condition . kd5193) (define-condition-type . kd5192) (define-enumeration . kd5191) (define-record-type . kd5190) (parent-rtd . kd518f) (nongenerative . kd518e) (opaque . kd518d) (sealed . kd518c) (protocol . kd518b) (parent . kd518a) (immutable . kd5189) (mutable . kd5188) (fields . kd5187) (error-handling-mode . kd5186) (file-options . kd5185) (buffer-mode . kd5184) (eol-style . kd5183) (guard . kd5182) (trace-define . kd5181) (trace-lambda . kd5180) (unsyntax-splicing . kd517f) (unsyntax . kd517e) (unquote-splicing . kd517d) (unquote . kd517c) (_ . kd517b) (else . kd517a) (=> . kd5179) (... . kd5178) (assert . kd5177) (endianness . kd5176) (delay . kd5175) (time . kd5174) (do . kd5173) (cond . kd5172) (let* . kd5171) (let*-values . kd5170) (let-values . kd516f) (identifier-syntax . kd516e) (with-syntax . kd516d) (quasisyntax . kd516c) (quasiquote . kd516b) (syntax-rules . kd516a) (include . kd5169) (define-struct . kd5168) (record-constructor-descriptor . kd5167) (record-type-descriptor . kd5166) (case . kd5165) (parameterize . kd5164) (unless . kd5163) (when . kd5162) (or . kd5161) (and . kd5160) (if . kd515f) (let . kd515e) (letrec* . kd515d) (letrec . kd515c) (type-descriptor . kd515b) (case-lambda . kd515a) (lambda . kd5159) (syntax . kd5158) (syntax-case . kd5157) (quote . kd5156) (foreign-call . kd5155) (letrec-syntax . kd5154) (let-syntax . kd5153) (set! . kd5152) (import . kd5151) (begin . kd5150) (module . kd514f) (define-syntax . kd514e) (define . kd514d)) '((kd4ee7 core-prim . &no-nans-rcd) (kd4ee5 core-prim . &no-nans-rtd) (kd4ed2 core-prim . &no-infinities-rcd) (kd4ed0 core-prim . &no-infinities-rtd) (kd4ebd core-prim . &i/o-encoding-rcd) (kd4ebb core-prim . &i/o-encoding-rtd) (kd4ea2 core-prim . &i/o-decoding-rcd) (kd4ea0 core-prim . &i/o-decoding-rtd) (kd4e8d core-prim . &i/o-port-rcd) (kd4e8b core-prim . &i/o-port-rtd) (kd4e72 core-prim . &i/o-file-does-not-exist-rcd) (kd4e70 core-prim . &i/o-file-does-not-exist-rtd) (kd4e5d core-prim . &i/o-file-already-exists-rcd) (kd4e5b core-prim . &i/o-file-already-exists-rtd) (kd4e48 core-prim . &i/o-file-is-read-only-rcd) (kd4e46 core-prim . &i/o-file-is-read-only-rtd) (kd4e33 core-prim . &i/o-file-protection-rcd) (kd4e31 core-prim . &i/o-file-protection-rtd) (kd4e1e core-prim . &i/o-filename-rcd) (kd4e1c core-prim . &i/o-filename-rtd) (kd4e03 core-prim . &i/o-invalid-position-rcd) (kd4e01 core-prim . &i/o-invalid-position-rtd) (kd4de8 core-prim . &i/o-write-rcd) (kd4de6 core-prim . &i/o-write-rtd) (kd4dd3 core-prim . &i/o-read-rcd) (kd4dd1 core-prim . &i/o-read-rtd) (kd4dbe core-prim . &i/o-rcd) (kd4dbc core-prim . &i/o-rtd) (kd4da9 core-prim . &undefined-rcd) (kd4da7 core-prim . &undefined-rtd) (kd4d94 core-prim . &syntax-rcd) (kd4d92 core-prim . &syntax-rtd) (kd4d73 core-prim . &lexical-rcd) (kd4d71 core-prim . &lexical-rtd) (kd4d5e core-prim . &implementation-restriction-rcd) (kd4d5c core-prim . &implementation-restriction-rtd) (kd4d49 core-prim . &non-continuable-rcd) (kd4d47 core-prim . &non-continuable-rtd) (kd4d34 core-prim . &who-rcd) (kd4d32 core-prim . &who-rtd) (kd4d19 core-prim . &irritants-rcd) (kd4d17 core-prim . &irritants-rtd) (kd4cfe core-prim . &assertion-rcd) (kd4cfc core-prim . &assertion-rtd) (kd4ce9 core-prim . &violation-rcd) (kd4ce7 core-prim . &violation-rtd) (kd4cd4 core-prim . &error-rcd) (kd4cd2 core-prim . &error-rtd) (kd4cbf core-prim . &serious-rcd) (kd4cbd core-prim . &serious-rtd) (kd4caa core-prim . &warning-rcd) (kd4ca8 core-prim . &warning-rtd) (kd4c95 core-prim . &message-rcd) (kd4c93 core-prim . &message-rtd) (kd4c36 core-prim . &condition-rcd) (kd4c34 core-prim . &condition-rtd) (kd31b4 core-prim . syntax-error) (kd30d8 core-prim . syntax-dispatch) (kd547c core-prim . pretty-print) (kd547b core-prim . eval-core) (kd547a core-prim . set-symbol-value!) (kd5479 core-prim . symbol-value) (kd5478 core-prim . gensym) (kd5477 core-prim . void) (kd4ff6 core-prim . load) (kd31c6 core-prim . interaction-environment) (kd5476 core-prim . char-ready?) (kd5475 core-prim . regexp?) (kd5474 core-prim . read-line) (kd5473 core-prim . gensym-prefix-set!) (kd5472 core-prim . ungensym) (kd5471 core-prim . alist->eq-hash-table) (kd5470 core-prim . assoc-ref) (kd546f core-prim . print) (kd546e core-prim . format) (kd546d core-prim . host-os) (kd2b0c core-prim . library-path) (kd546c core-prim . standard-library-path) (kd546b core-prim . file-newer?) (kd546a core-prim . stat-mtime) (kd5469 core-prim . write-to-file) (kd5468 core-prim . file->sexp-list) (kd5467 core-prim . file->list) (kd5466 core-prim . file->string) (kd5465 core-prim . digit->integer) (kd5464 core-prim . call-with-string-input-port) (kd5463 core-prim . call-with-string-io) (kd5462 core-prim . string-split) (kd5461 core-prim . bytevector-for-each) (kd5460 core-prim . string->regexp) (kd545f core-prim . rxmatch) (kd545e core-prim . regexp-replace-all) (kd545d core-prim . hashtable-for-each) (kd28f6 core-prim . mosh-cache-dir) (kd545c core-prim . call-process) (kd545b core-prim . local-tz-offset) (kd545a core-prim . microseconds) (kd5459 core-prim . directory-list) (kd5458 core-prim . set-current-directory!) (kd5457 core-prim . expand-path) (kd5456 core-prim . current-directory) (kd5455 core-prim . %spawn) (kd5454 core-prim . %waitpid) (kd5453 core-prim . simple-struct-name) (kd5452 core-prim . simple-struct-set!) (kd5451 core-prim . simple-struct-ref) (kd5450 core-prim . make-simple-struct) (kd544f core-prim . simple-struct?) (kd544e core-prim . pointer-ref-c-int64) (kd544d core-prim . pointer-ref-c-int32) (kd544c core-prim . pointer-ref-c-int16) (kd544b core-prim . pointer-ref-c-int8) (kd544a core-prim . pointer-ref-c-uint64) (kd5449 core-prim . pointer-ref-c-uint32) (kd5448 core-prim . pointer-ref-c-uint16) (kd5447 core-prim . pointer-ref-c-uint8) (kd5446 core-prim . pointer-set-c-uint64!) (kd5445 core-prim . pointer-set-c-uint32!) (kd5444 core-prim . pointer-set-c-uint16!) (kd5443 core-prim . pointer-set-c-uint8!) (kd5442 core-prim . pointer-set-c-int64!) (kd5441 core-prim . pointer-set-c-int32!) (kd5440 core-prim . pointer-set-c-int16!) (kd543f core-prim . pointer-set-c-int8!) (kd543e core-prim . pointer-set-c-pointer!) (kd543d core-prim . pointer-set-c-double!) (kd543c core-prim . pointer-set-c-float!) (kd543b core-prim . pointer-set-c-long-long!) (kd543a core-prim . pointer-set-c-long!) (kd5439 core-prim . pointer-set-c-int!) (kd5438 core-prim . pointer-set-c-short!) (kd5437 core-prim . pointer-set-c-char!) (kd5436 core-prim . pointer-ref-c-pointer) (kd5435 core-prim . pointer-ref-c-double) (kd5434 core-prim . pointer-ref-c-float) (kd5433 core-prim . pointer-ref-c-unsigned-long-long) (kd5432 core-prim . pointer-ref-c-signed-long-long) (kd5431 core-prim . pointer-ref-c-unsigned-long) (kd5430 core-prim . pointer-ref-c-signed-long) (kd542f core-prim . pointer-ref-c-unsigned-int) (kd542e core-prim . pointer-ref-c-signed-int) (kd542d core-prim . pointer-ref-c-unsigned-short) (kd542c core-prim . pointer-ref-c-signed-short) (kd542b core-prim . pointer-ref-c-unsigned-char) (kd542a core-prim . pointer-ref-c-signed-char) (kd5429 core-prim . pointer->integer) (kd5428 core-prim . integer->pointer) (kd5427 core-prim . pointer?) (kd5426 core-prim . shared-errno) (kd5425 core-prim . get-c-address) (kd5424 core-prim . obj->integer) (kd5423 core-prim . u8-list->c-procedure) (kd5422 core-prim . %ffi-free-c-callback-trampoline) (kd5421 core-prim . %ffi-make-c-callback-trampoline) (kd5420 core-prim . %ffi-free) (kd541f core-prim . %ffi-malloc) (kd541e core-prim . %ffi-supported?) (kd541d core-prim . %ffi-pointer->string) (kd541c core-prim . %ffi-call) (kd541b core-prim . %ffi-lookup) (kd541a core-prim . %ffi-open) (kd5419 core-prim . null-terminated-utf8->string) (kd5418 core-prim . null-terminated-bytevector->string) (kd5417 core-prim . %fork) (kd5416 core-prim . %pipe) (kd5415 core-prim . p) (kd5414 core-prim . open-output-string) (kd5413 core-prim . get-output-string) (kd5412 core-prim . file-stat-ctime) (kd5411 core-prim . file-stat-atime) (kd5410 core-prim . file-stat-mtime) (kd540f core-prim . file-size-in-bytes) (kd540e core-prim . file-writable?) (kd540d core-prim . file-executable?) (kd540c core-prim . file-readable?) (kd540b core-prim . file-regular?) (kd540a core-prim . file-symbolic-link?) (kd5409 core-prim . file-directory?) (kd5408 core-prim . create-symbolic-link) (kd5407 core-prim . rename-file) (kd5406 core-prim . delete-directory) (kd5405 core-prim . create-directory) (kd5404 core-prim . create-mosh-cache-dir) (kd5403 core-prim . get-environment-variables) (kd5402 core-prim . current-exception-handler) (kd5401 core-prim . get-environment-variable) (kd5400 core-prim . join-wraps) (kd53ff core-prim . id->real-label) (kd53fe core-prim . same-marks?) (kd53fd core-prim . same-marks*?) (kd53fc core-prim . get-timeofday) (kd53fb core-prim . get-command-line) (kd53fa core-prim . sys-display) (kd53f9 core-prim . whereis) (kd53f8 core-prim . register) (kd53f7 core-prim . vm-join!) (kd53f6 core-prim . vm-set-value!) (kd53f5 core-prim . vm?) (kd53f4 core-prim . main-vm?) (kd53f3 core-prim . vm-eval) (kd53f2 core-prim . vm-self) (kd53f1 core-prim . vm-start!) (kd53f0 core-prim . make-vm) (kd53ef core-prim . mutex-try-lock!) (kd53ee core-prim . mutex-unlock!) (kd53ed core-prim . mutex-lock!) (kd53ec core-prim . mutex?) (kd53eb core-prim . make-mutex) (kd53ea core-prim . condition-variable-notify-all!) (kd53e9 core-prim . condition-variable-notify!) (kd53e8 core-prim . condition-variable-wait!) (kd53e7 core-prim . make-condition-variable) (kd53e6 core-prim . mosh-executable-path) (kd53e5 core-prim . make-file-options) (kd53e4 core-prim . for-each-with-index) (kd53e3 core-prim . source-info) (kd53e2 core-prim . instruction?) (kd53e1 core-prim . instruction->integer) (kd53e0 core-prim . instruction->symbol) (kd53df core-prim . closure->list) (kd53de core-prim . make-compiler-instruction) (kd53dd core-prim . make-instruction) (kd53dc core-prim . set-source-info!) (kd53db core-prim . bignum?) (kd53da core-prim . fast-equal?) (kd53d9 core-prim . fasl-read) (kd53d8 core-prim . fasl-write) (kd53d7 core-prim . time-usage) (kd53d6 core-prim . os-constant) (kd53d5 core-prim . disasm) (kd28f4 core-prim . make-parameter) (kd53d4 core-prim . socket-port) (kd53d3 core-prim . socket-shutdown) (kd53d2 core-prim . socket-close) (kd53d1 core-prim . socket-send) (kd53d0 core-prim . socket-recv!) (kd53cf core-prim . socket-recv) (kd53ce core-prim . make-server-socket) (kd53cd core-prim . make-client-socket) (kd53cc core-prim . socket-accept) (kd53cb core-prim . socket?) (kd53ca core-prim . string-upcase) (kd53c9 core-prim . string-titlecase) (kd53c8 core-prim . string-normalize-nfkd) (kd53c7 core-prim . string-normalize-nfkc) (kd53c6 core-prim . string-normalize-nfd) (kd53c5 core-prim . string-normalize-nfc) (kd53c4 core-prim . string-foldcase) (kd53c3 core-prim . string-downcase) (kd53c2 core-prim . string-ci>?) (kd53c1 core-prim . string-ci>=?) (kd53c0 core-prim . string-ci=?) (kd53bf core-prim . string-ci<?) (kd53be core-prim . string-ci<=?) (kd53bd core-prim . char-whitespace?) (kd53bc core-prim . char-upper-case?) (kd53bb core-prim . char-title-case?) (kd53ba core-prim . char-numeric?) (kd53b9 core-prim . char-lower-case?) (kd53b8 core-prim . char-general-category) (kd53b7 core-prim . char-upcase) (kd53b6 core-prim . char-titlecase) (kd53b5 core-prim . char-foldcase) (kd53b4 core-prim . char-downcase) (kd53b3 core-prim . char-ci>?) (kd53b2 core-prim . char-ci>=?) (kd53b1 core-prim . char-ci=?) (kd53b0 core-prim . char-ci<?) (kd53af core-prim . char-ci<=?) (kd53ae core-prim . char-alphabetic?) (kd2f03 core-prim . make-variable-transformer) (kd31ba core-prim . identifier?) (kd31a6 core-prim . generate-temporaries) (kd31a8 core-prim . free-identifier=?) (kd31be core-prim . syntax->datum) (kd31bc core-prim . datum->syntax) (kd31aa core-prim . bound-identifier=?) (kd53ad core-prim . record-type-descriptor?) (kd53ac core-prim . record-predicate) (kd53ab core-prim . record-mutator) (kd53aa core-prim . record-constructor) (kd53a9 core-prim . record-accessor) (kd53a8 core-prim . make-record-type-descriptor) (kd53a7 core-prim . make-record-constructor-descriptor) (kd53a6 core-prim . record?) (kd53a5 core-prim . record-type-uid) (kd53a4 core-prim . record-type-sealed?) (kd53a3 core-prim . record-type-parent) (kd53a2 core-prim . record-type-opaque?) (kd53a1 core-prim . record-type-name) (kd53a0 core-prim . record-type-generative?) (kd539f core-prim . record-type-field-names) (kd539e core-prim . record-rtd) (kd539d core-prim . record-field-mutable?) (kd539c core-prim . delete-file) (kd539b core-prim . file-exists?) (kd539a core-prim . vector-sort!) (kd5399 core-prim . vector-sort) (kd5398 core-prim . list-sort) (kd5397 core-prim . symbol-hash) (kd5396 core-prim . string-ci-hash) (kd5395 core-prim . string-hash) (kd5394 core-prim . equal-hash) (kd5393 core-prim . hashtable-equivalence-function) (kd5392 core-prim . make-hashtable) (kd5391 core-prim . hashtable-hash-function) (kd5390 core-prim . make-eqv-hashtable) (kd538f core-prim . make-eq-hashtable) (kd538e core-prim . hashtable?) (kd538d core-prim . hashtable-update!) (kd538c core-prim . hashtable-size) (kd538b core-prim . hashtable-set!) (kd538a core-prim . hashtable-ref) (kd5389 core-prim . hashtable-mutable?) (kd5388 core-prim . hashtable-keys) (kd5387 core-prim . hashtable-entries) (kd5386 core-prim . hashtable-delete!) (kd5385 core-prim . hashtable-copy) (kd5384 core-prim . hashtable-contains?) (kd5383 core-prim . hashtable-clear!) (kd5382 core-prim . call-with-output-file) (kd5381 core-prim . call-with-input-file) (kd5380 core-prim . write-char) (kd537f core-prim . write) (kd537e core-prim . with-output-to-file) (kd537d core-prim . with-input-from-file) (kd537c core-prim . read-char) (kd537b core-prim . read) (kd537a core-prim . peek-char) (kd5379 core-prim . open-output-file) (kd5378 core-prim . open-input-file) (kd5377 core-prim . newline) (kd5376 core-prim . display) (kd5375 core-prim . close-output-port) (kd5374 core-prim . close-input-port) (kd5373 core-prim . eof-object?) (kd5372 core-prim . eof-object) (kd5371 core-prim . current-error-port) (kd5370 core-prim . current-output-port) (kd536f core-prim . current-input-port) (kd536e core-prim . output-port?) (kd536d core-prim . input-port?) (kd536c core-prim . utf-8-codec) (kd536b core-prim . utf-16-codec) (kd536a core-prim . transcoder-error-handling-mode) (kd5369 core-prim . transcoder-eol-style) (kd5368 core-prim . transcoder-codec) (kd5367 core-prim . transcoded-port) (kd5366 core-prim . textual-port?) (kd5365 core-prim . string->bytevector) (kd5364 core-prim . standard-output-port) (kd5363 core-prim . standard-input-port) (kd5362 core-prim . standard-error-port) (kd5361 core-prim . set-port-position!) (kd5360 core-prim . put-u8) (kd535f core-prim . put-string) (kd535e core-prim . put-datum) (kd535d core-prim . put-char) (kd535c core-prim . put-bytevector) (kd535b core-prim . port?) (kd535a core-prim . port-transcoder) (kd5359 core-prim . port-position) (kd5358 core-prim . port-has-set-port-position!?) (kd5357 core-prim . port-has-port-position?) (kd5356 core-prim . port-eof?) (kd5355 core-prim . output-port-buffer-mode) (kd5354 core-prim . open-string-output-port) (kd5353 core-prim . open-string-input-port) (kd5352 core-prim . open-file-output-port) (kd5351 core-prim . open-file-input/output-port) (kd5350 core-prim . open-file-input-port) (kd534f core-prim . open-bytevector-output-port) (kd534e core-prim . open-bytevector-input-port) (kd534d core-prim . native-transcoder) (kd534c core-prim . native-eol-style) (kd534b core-prim . make-transcoder) (kd534a core-prim . latin-1-codec) (kd4de2 core-prim . make-i/o-write-error) (kd4dcd core-prim . make-i/o-read-error) (kd4e83 core-prim . make-i/o-port-error) (kd4df9 core-prim . make-i/o-invalid-position-error) (kd4e14 core-prim . make-i/o-filename-error) (kd4e2d core-prim . make-i/o-file-protection-error) (kd4e42 core-prim . make-i/o-file-is-read-only-error) (kd4e6c core-prim . make-i/o-file-does-not-exist-error) (kd4e57 core-prim . make-i/o-file-already-exists-error) (kd4db8 core-prim . make-i/o-error) (kd4eb3 core-prim . make-i/o-encoding-error) (kd4e9c core-prim . make-i/o-decoding-error) (kd5349 core-prim . make-custom-textual-output-port) (kd5348 core-prim . make-custom-textual-input/output-port) (kd5347 core-prim . make-custom-textual-input-port) (kd5346 core-prim . make-custom-binary-output-port) (kd5345 core-prim . make-custom-binary-input/output-port) (kd5344 core-prim . make-custom-binary-input-port) (kd5343 core-prim . make-bytevector) (kd5342 core-prim . lookahead-u8) (kd5341 core-prim . lookahead-char) (kd4de4 core-prim . i/o-write-error?) (kd4dcf core-prim . i/o-read-error?) (kd4e87 core-prim . i/o-port-error?) (kd4dfd core-prim . i/o-invalid-position-error?) (kd4e18 core-prim . i/o-filename-error?) (kd4e2f core-prim . i/o-file-protection-error?) (kd4e44 core-prim . i/o-file-is-read-only-error?) (kd4e6e core-prim . i/o-file-does-not-exist-error?) (kd4e59 core-prim . i/o-file-already-exists-error?) (kd4dba core-prim . i/o-error?) (kd4dff core-prim . i/o-error-position) (kd4e89 core-prim . i/o-error-port) (kd4e1a core-prim . i/o-error-filename) (kd4eb7 core-prim . i/o-encoding-error?) (kd4eb9 core-prim . i/o-encoding-error-char) (kd4e9e core-prim . i/o-decoding-error?) (kd5340 core-prim . get-u8) (kd533f core-prim . get-string-n!) (kd533e core-prim . get-string-n) (kd533d core-prim . get-string-all) (kd533c core-prim . get-line) (kd533b core-prim . get-datum) (kd533a core-prim . get-char) (kd5339 core-prim . get-bytevector-some) (kd5338 core-prim . get-bytevector-n!) (kd5337 core-prim . get-bytevector-n) (kd5336 core-prim . get-bytevector-all) (kd5335 core-prim . flush-output-port) (kd5334 core-prim . close-port) (kd3194 core-prim . scheme-report-environment) (kd5333 core-prim . quotient) (kd3192 core-prim . null-environment) (kd5332 core-prim . remainder) (kd5331 core-prim . modulo) (kd5330 core-prim . inexact->exact) (kd532f core-prim . force) (kd532e core-prim . exact->inexact) (kd532d core-prim . make-promise) (kd532c core-prim . exit) (kd4ff0 core-prim . command-line) (kd532b core-prim . string-fill!) (kd532a core-prim . string-set!) (kd5329 core-prim . set-cdr!) (kd5328 core-prim . set-car!) (kd5327 core-prim . remove) (kd5326 core-prim . remv) (kd5325 core-prim . remp) (kd5324 core-prim . remq) (kd5323 core-prim . partition) (kd5322 core-prim . memv) (kd5321 core-prim . memq) (kd5320 core-prim . memp) (kd531f core-prim . member) (kd531e core-prim . exists) (kd531d core-prim . for-all) (kd531c core-prim . fold-right) (kd531b core-prim . fold-left) (kd531a core-prim . find) (kd5319 core-prim . filter) (kd5318 core-prim . cons*) (kd5317 core-prim . assv) (kd5316 core-prim . assq) (kd5315 core-prim . assp) (kd5314 core-prim . assoc) (kd5313 core-prim . call-with-string-output-port) (kd5312 core-prim . call-with-port) (kd5311 core-prim . call-with-bytevector-output-port) (kd5310 core-prim . bytevector->string) (kd530f core-prim . buffer-mode?) (kd530e core-prim . binary-port?) (kd530d core-prim . with-exception-handler) (kd530c core-prim . raise-continuable) (kd530b core-prim . raise) (kd3198 core-prim . eval) (kd3190 core-prim . environment) (kd530a core-prim . make-enumeration) (kd5309 core-prim . enum-set=?) (kd5308 core-prim . enum-set-universe) (kd5307 core-prim . enum-set-union) (kd5306 core-prim . enum-set-subset?) (kd5305 core-prim . enum-set-projection) (kd5304 core-prim . enum-set-member?) (kd5303 core-prim . enum-set-intersection) (kd5302 core-prim . enum-set-indexer) (kd5301 core-prim . enum-set-difference) (kd5300 core-prim . enum-set-constructor) (kd52ff core-prim . enum-set-complement) (kd52fe core-prim . enum-set->list) (kd4d2e core-prim . who-condition?) (kd4ca6 core-prim . warning?) (kd4ce5 core-prim . violation?) (kd4da5 core-prim . undefined-violation?) (kd4d8c core-prim . syntax-violation?) (kd4d90 core-prim . syntax-violation-subform) (kd4d8e core-prim . syntax-violation-form) (kd31b8 core-prim . syntax-violation) (kd52fd core-prim . simple-conditions) (kd4cbb core-prim . serious-condition?) (kd4d45 core-prim . non-continuable-violation?) (kd4c8f core-prim . message-condition?) (kd4d2a core-prim . make-who-condition) (kd4ca4 core-prim . make-warning) (kd4ce3 core-prim . make-violation) (kd4da3 core-prim . make-undefined-violation) (kd4d86 core-prim . make-syntax-violation) (kd4cb9 core-prim . make-serious-condition) (kd4d43 core-prim . make-non-continuable-violation) (kd4c8b core-prim . make-message-condition) (kd4d6d core-prim . make-lexical-violation) (kd4d0f core-prim . make-irritants-condition) (kd4d58 core-prim . make-implementation-restriction-violation) (kd4cce core-prim . make-error) (kd4cf8 core-prim . make-assertion-violation) (kd4d6f core-prim . lexical-violation?) (kd4d13 core-prim . irritants-condition?) (kd4d5a core-prim . implementation-restriction-violation?) (kd4cd0 core-prim . error?) (kd4d30 core-prim . condition-who) (kd52fc core-prim . condition-predicate) (kd4c91 core-prim . condition-message) (kd4d15 core-prim . condition-irritants) (kd52fb core-prim . condition-accessor) (kd52fa core-prim . condition) (kd4cfa core-prim . assertion-violation?) (kd52f9 core-prim . condition?) (kd52f8 core-prim . utf32->string) (kd52f7 core-prim . utf16->string) (kd52f6 core-prim . utf8->string) (kd52f5 core-prim . uint-list->bytevector) (kd52f4 core-prim . u8-list->bytevector) (kd52f3 core-prim . string->utf8) (kd52f2 core-prim . string->utf32) (kd52f1 core-prim . string->utf16) (kd52f0 core-prim . sint-list->bytevector) (kd52ef core-prim . native-endianness) (kd52ee core-prim . bytevector?) (kd52ed core-prim . bytevector=?) (kd52ec core-prim . bytevector-uint-set!) (kd52eb core-prim . bytevector-uint-ref) (kd52ea core-prim . bytevector-u8-set!) (kd52e9 core-prim . bytevector-u8-ref) (kd52e8 core-prim . bytevector-u64-set!) (kd52e7 core-prim . bytevector-u64-ref) (kd52e6 core-prim . bytevector-u64-native-set!) (kd52e5 core-prim . bytevector-u64-native-ref) (kd52e4 core-prim . bytevector-u32-set!) (kd52e3 core-prim . bytevector-u32-ref) (kd52e2 core-prim . bytevector-u32-native-set!) (kd52e1 core-prim . bytevector-u32-native-ref) (kd52e0 core-prim . bytevector-u16-set!) (kd52df core-prim . bytevector-u16-ref) (kd52de core-prim . bytevector-u16-native-set!) (kd52dd core-prim . bytevector-u16-native-ref) (kd52dc core-prim . bytevector-sint-set!) (kd52db core-prim . bytevector-sint-ref) (kd52da core-prim . bytevector-s8-set!) (kd52d9 core-prim . bytevector-s8-ref) (kd52d8 core-prim . bytevector-s64-set!) (kd52d7 core-prim . bytevector-s64-ref) (kd52d6 core-prim . bytevector-s64-native-set!) (kd52d5 core-prim . bytevector-s64-native-ref) (kd52d4 core-prim . bytevector-s32-set!) (kd52d3 core-prim . bytevector-s32-ref) (kd52d2 core-prim . bytevector-s32-native-set!) (kd52d1 core-prim . bytevector-s32-native-ref) (kd52d0 core-prim . bytevector-s16-set!) (kd52cf core-prim . bytevector-s16-ref) (kd52ce core-prim . bytevector-s16-native-set!) (kd52cd core-prim . bytevector-s16-native-ref) (kd52cc core-prim . bytevector-length) (kd52cb core-prim . bytevector-ieee-single-ref) (kd52ca core-prim . bytevector-ieee-single-set!) (kd52c9 core-prim . bytevector-ieee-single-native-set!) (kd52c8 core-prim . bytevector-ieee-single-native-ref) (kd52c7 core-prim . bytevector-ieee-double-set!) (kd52c6 core-prim . bytevector-ieee-double-ref) (kd52c5 core-prim . bytevector-ieee-double-native-set!) (kd52c4 core-prim . bytevector-ieee-double-native-ref) (kd52c3 core-prim . bytevector-fill!) (kd52c2 core-prim . bytevector-copy!) (kd52c1 core-prim . bytevector-copy) (kd52c0 core-prim . bytevector->uint-list) (kd52bf core-prim . bytevector->u8-list) (kd52be core-prim . bytevector->sint-list) (kd4ee3 core-prim . no-nans-violation?) (kd4ece core-prim . no-infinities-violation?) (kd4ee1 core-prim . make-no-nans-violation) (kd4ecc core-prim . make-no-infinities-violation) (kd52bd core-prim . real->flonum) (kd52bc core-prim . flzero?) (kd52bb core-prim . fltruncate) (kd52ba core-prim . fltan) (kd52b9 core-prim . flsqrt) (kd52b8 core-prim . flsin) (kd52b7 core-prim . flround) (kd52b6 core-prim . flpositive?) (kd52b5 core-prim . flonum?) (kd52b4 core-prim . flodd?) (kd52b3 core-prim . flnumerator) (kd52b2 core-prim . flnegative?) (kd52b1 core-prim . flnan?) (kd52b0 core-prim . flmod0) (kd52af core-prim . flmod) (kd52ae core-prim . flmin) (kd52ad core-prim . flmax) (kd52ac core-prim . fllog) (kd52ab core-prim . flinteger?) (kd52aa core-prim . flinfinite?) (kd52a9 core-prim . flfloor) (kd52a8 core-prim . flfinite?) (kd52a7 core-prim . flexpt) (kd52a6 core-prim . flexp) (kd52a5 core-prim . fleven?) (kd52a4 core-prim . fldiv0-and-mod0) (kd52a3 core-prim . fldiv0) (kd52a2 core-prim . fldiv-and-mod) (kd52a1 core-prim . fldiv) (kd52a0 core-prim . fldenominator) (kd529f core-prim . flcos) (kd529e core-prim . flceiling) (kd529d core-prim . flatan) (kd529c core-prim . flasin) (kd529b core-prim . flacos) (kd529a core-prim . flabs) (kd5299 core-prim . fl>?) (kd5298 core-prim . fl>=?) (kd5297 core-prim . fl=?) (kd5296 core-prim . fl<?) (kd5295 core-prim . fl<=?) (kd5294 core-prim . fl/) (kd5293 core-prim . fl-) (kd5292 core-prim . fl+) (kd5291 core-prim . fl*) (kd5290 core-prim . fixnum->flonum) (kd528f core-prim . fxzero?) (kd528e core-prim . fxxor) (kd528d core-prim . fxrotate-bit-field) (kd528c core-prim . fxreverse-bit-field) (kd528b core-prim . fxpositive?) (kd528a core-prim . fxodd?) (kd5289 core-prim . fxnot) (kd5288 core-prim . fxnegative?) (kd5287 core-prim . fxmod0) (kd5286 core-prim . fxmod) (kd5285 core-prim . fxmin) (kd5284 core-prim . fxmax) (kd5283 core-prim . fxlength) (kd5282 core-prim . fxior) (kd5281 core-prim . fxif) (kd5280 core-prim . fxfirst-bit-set) (kd527f core-prim . fxeven?) (kd527e core-prim . fxdiv0-and-mod0) (kd527d core-prim . fxdiv0) (kd527c core-prim . fxdiv-and-mod) (kd527b core-prim . fxdiv) (kd527a core-prim . fxcopy-bit-field) (kd5279 core-prim . fxcopy-bit) (kd5278 core-prim . fxbit-set?) (kd5277 core-prim . fxbit-field) (kd5276 core-prim . fxbit-count) (kd5275 core-prim . fxarithmetic-shift-right) (kd5274 core-prim . fxarithmetic-shift-left) (kd5273 core-prim . fxarithmetic-shift) (kd5272 core-prim . fxand) (kd5271 core-prim . fx>?) (kd5270 core-prim . fx>=?) (kd526f core-prim . fx=?) (kd526e core-prim . fx<?) (kd526d core-prim . fx<=?) (kd526c core-prim . fx-/carry) (kd526b core-prim . fx-) (kd526a core-prim . fx+/carry) (kd5269 core-prim . fx+) (kd5268 core-prim . fx*/carry) (kd5267 core-prim . fx*) (kd5266 core-prim . greatest-fixnum) (kd5265 core-prim . least-fixnum) (kd5264 core-prim . fixnum-width) (kd5263 core-prim . fixnum?) (kd5262 core-prim . bitwise-rotate-bit-field) (kd5261 core-prim . bitwise-reverse-bit-field) (kd5260 core-prim . bitwise-length) (kd525f core-prim . bitwise-if) (kd525e core-prim . bitwise-first-bit-set) (kd525d core-prim . bitwise-copy-bit-field) (kd525c core-prim . bitwise-copy-bit) (kd525b core-prim . bitwise-bit-set?) (kd525a core-prim . bitwise-bit-field) (kd5259 core-prim . bitwise-bit-count) (kd5258 core-prim . bitwise-xor) (kd5257 core-prim . bitwise-ior) (kd5256 core-prim . bitwise-and) (kd5255 core-prim . bitwise-not) (kd5254 core-prim . bitwise-arithmetic-shift-right) (kd5253 core-prim . bitwise-arithmetic-shift-left) (kd5252 core-prim . bitwise-arithmetic-shift) (kd5251 core-prim . zero?) (kd5250 core-prim . vector?) (kd524f core-prim . vector-set!) (kd524e core-prim . vector-ref) (kd524d core-prim . vector-map) (kd524c core-prim . vector-length) (kd524b core-prim . vector-for-each) (kd524a core-prim . vector-fill!) (kd5249 core-prim . vector->list) (kd5248 core-prim . vector) (kd5247 core-prim . values) (kd5246 core-prim . truncate) (kd5245 core-prim . tan) (kd5244 core-prim . symbol?) (kd5243 core-prim . symbol=?) (kd5242 core-prim . symbol->string) (kd5241 core-prim . substring) (kd5240 core-prim . string?) (kd523f core-prim . string>?) (kd523e core-prim . string>=?) (kd523d core-prim . string=?) (kd523c core-prim . string<?) (kd523b core-prim . string<=?) (kd523a core-prim . string-ref) (kd5239 core-prim . string-length) (kd5238 core-prim . string-for-each) (kd5237 core-prim . string-copy) (kd5236 core-prim . string-append) (kd5235 core-prim . string->symbol) (kd5234 core-prim . string->number) (kd5233 core-prim . string->list) (kd5232 core-prim . string) (kd5231 core-prim . sqrt) (kd5230 core-prim . sin) (kd522f core-prim . round) (kd522e core-prim . reverse) (kd522d core-prim . real?) (kd522c core-prim . real-valued?) (kd522b core-prim . real-part) (kd522a core-prim . rationalize) (kd5229 core-prim . rational?) (kd5228 core-prim . rational-valued?) (kd5227 core-prim . procedure?) (kd5226 core-prim . positive?) (kd5225 core-prim . pair?) (kd5224 core-prim . odd?) (kd5223 core-prim . numerator) (kd5222 core-prim . number?) (kd5221 core-prim . number->string) (kd5220 core-prim . null?) (kd521f core-prim . not) (kd521e core-prim . negative?) (kd521d core-prim . nan?) (kd521c core-prim . min) (kd521b core-prim . max) (kd521a core-prim . map) (kd5219 core-prim . make-vector) (kd5218 core-prim . make-string) (kd5217 core-prim . make-rectangular) (kd5216 core-prim . make-polar) (kd5215 core-prim . magnitude) (kd5214 core-prim . log) (kd5213 core-prim . list?) (kd5212 core-prim . list-tail) (kd5211 core-prim . list-ref) (kd5210 core-prim . list->vector) (kd520f core-prim . list->string) (kd520e core-prim . list) (kd520d core-prim . length) (kd520c core-prim . lcm) (kd520b core-prim . integer?) (kd520a core-prim . integer-valued?) (kd5209 core-prim . integer->char) (kd5208 core-prim . infinite?) (kd5207 core-prim . inexact?) (kd5206 core-prim . inexact) (kd5205 core-prim . imag-part) (kd5204 core-prim . gcd) (kd5203 core-prim . for-each) (kd5202 core-prim . floor) (kd5201 core-prim . finite?) (kd5200 core-prim . expt) (kd51ff core-prim . exp) (kd51fe core-prim . exact?) (kd51fd core-prim . exact-integer-sqrt) (kd51fc core-prim . exact) (kd51fb core-prim . even?) (kd51fa core-prim . error) (kd51f9 core-prim . eqv?) (kd51f8 core-prim . equal?) (kd51f7 core-prim . eq?) (kd51f6 core-prim . dynamic-wind) (kd51f5 core-prim . div0-and-mod0) (kd51f4 core-prim . mod0) (kd51f3 core-prim . div0) (kd51f2 core-prim . div-and-mod) (kd51f1 core-prim . mod) (kd51f0 core-prim . div) (kd51ef core-prim . denominator) (kd51ee core-prim . cos) (kd51ed core-prim . cons) (kd51ec core-prim . complex?) (kd51eb core-prim . char?) (kd51ea core-prim . char>?) (kd51e9 core-prim . char>=?) (kd51e8 core-prim . char=?) (kd51e7 core-prim . char<?) (kd51e6 core-prim . char<=?) (kd51e5 core-prim . char->integer) (kd51e4 core-prim . ceiling) (kd51e3 core-prim . call-with-values) (kd51e2 core-prim . call/cc) (kd51e1 core-prim . call-with-current-continuation) (kd51e0 core-prim . cddddr) (kd51df core-prim . cdddar) (kd51de core-prim . cddadr) (kd51dd core-prim . cddaar) (kd51dc core-prim . cdaddr) (kd51db core-prim . cdadar) (kd51da core-prim . cdaadr) (kd51d9 core-prim . cdaaar) (kd51d8 core-prim . cadddr) (kd51d7 core-prim . caddar) (kd51d6 core-prim . cadadr) (kd51d5 core-prim . cadaar) (kd51d4 core-prim . caaddr) (kd51d3 core-prim . caadar) (kd51d2 core-prim . caaadr) (kd51d1 core-prim . caaaar) (kd51d0 core-prim . cdddr) (kd51cf core-prim . cddar) (kd51ce core-prim . cdadr) (kd51cd core-prim . cdaar) (kd51cc core-prim . caddr) (kd51cb core-prim . cadar) (kd51ca core-prim . caadr) (kd51c9 core-prim . caaar) (kd51c8 core-prim . cddr) (kd51c7 core-prim . cdar) (kd51c6 core-prim . cadr) (kd51c5 core-prim . caar) (kd51c4 core-prim . cdr) (kd51c3 core-prim . car) (kd51c2 core-prim . boolean?) (kd51c1 core-prim . boolean=?) (kd51c0 core-prim . atan) (kd51bf core-prim . assertion-violation) (kd31b2 core-prim . assertion-error) (kd51be core-prim . asin) (kd51bd core-prim . apply) (kd51bc core-prim . append) (kd51bb core-prim . angle) (kd51ba core-prim . acos) (kd51b9 core-prim . abs) (kd51b8 core-prim . /) (kd51b7 core-prim . *) (kd51b6 core-prim . -) (kd51b5 core-prim . +) (kd51b4 core-prim . >=) (kd51b3 core-prim . >) (kd51b2 core-prim . =) (kd51b1 core-prim . <=) (kd51b0 core-prim . <) (kd51af core-prim . library) (kd51ae $core-rtd &no-nans-rtd &no-nans-rcd) (kd51ad $core-rtd &no-infinities-rtd &no-infinities-rcd) (kd51ac $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (kd51ab $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (kd51aa $core-rtd &i/o-port-rtd &i/o-port-rcd) (kd51a9 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (kd51a8 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (kd51a7 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (kd51a6 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (kd51a5 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (kd51a4 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (kd51a3 $core-rtd &i/o-write-rtd &i/o-write-rcd) (kd51a2 $core-rtd &i/o-read-rtd &i/o-read-rcd) (kd51a1 $core-rtd &i/o-rtd &i/o-rcd) (kd51a0 $core-rtd &undefined-rtd &undefined-rcd) (kd519f $core-rtd &syntax-rtd &syntax-rcd) (kd519e $core-rtd &lexical-rtd &lexical-rcd) (kd519d $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (kd519c $core-rtd &non-continuable-rtd &non-continuable-rcd) (kd519b $core-rtd &who-rtd &who-rcd) (kd519a $core-rtd &irritants-rtd &irritants-rcd) (kd5199 $core-rtd &assertion-rtd &assertion-rcd) (kd5198 $core-rtd &violation-rtd &violation-rcd) (kd5197 $core-rtd &error-rtd &error-rcd) (kd5196 $core-rtd &serious-rtd &serious-rcd) (kd5195 $core-rtd &warning-rtd &warning-rcd) (kd5194 $core-rtd &message-rtd &message-rcd) (kd5193 $core-rtd &condition-rtd &condition-rcd) (kd5192 macro . define-condition-type) (kd5191 macro . define-enumeration) (kd5190 macro . define-record-type) (kd518f macro . parent-rtd) (kd518e macro . nongenerative) (kd518d macro . opaque) (kd518c macro . sealed) (kd518b macro . protocol) (kd518a macro . parent) (kd5189 macro . immutable) (kd5188 macro . mutable) (kd5187 macro . fields) (kd5186 macro . error-handling-mode) (kd5185 macro . file-options) (kd5184 macro . buffer-mode) (kd5183 macro . eol-style) (kd5182 macro . guard) (kd5181 macro . trace-define) (kd5180 macro . trace-lambda) (kd517f macro . unsyntax-splicing) (kd517e macro . unsyntax) (kd517d macro . unquote-splicing) (kd517c macro . unquote) (kd517b macro . _) (kd517a macro . else) (kd5179 macro . =>) (kd5178 macro . ...) (kd5177 macro . assert) (kd5176 macro . endianness) (kd5175 macro . delay) (kd5174 macro . time) (kd5173 macro . do) (kd5172 macro . cond) (kd5171 macro . let*) (kd5170 macro . let*-values) (kd516f macro . let-values) (kd516e macro . identifier-syntax) (kd516d macro . with-syntax) (kd516c macro . quasisyntax) (kd516b macro . quasiquote) (kd516a macro . syntax-rules) (kd5169 macro . include) (kd5168 macro . define-struct) (kd5167 core-macro . record-constructor-descriptor) (kd5166 core-macro . record-type-descriptor) (kd5165 macro . case) (kd5164 macro . parameterize) (kd5163 macro . unless) (kd5162 macro . when) (kd5161 core-macro . or) (kd5160 core-macro . and) (kd515f core-macro . if) (kd515e core-macro . let) (kd515d core-macro . letrec*) (kd515c core-macro . letrec) (kd515b core-macro . type-descriptor) (kd515a core-macro . case-lambda) (kd5159 core-macro . lambda) (kd5158 core-macro . syntax) (kd5157 core-macro . syntax-case) (kd5156 core-macro . quote) (kd5155 core-macro . foreign-call) (kd5154 letrec-syntax) (kd5153 let-syntax) (kd5152 set!) (kd5151 import) (kd5150 begin) (kd514f module) (kd514e define-syntax) (kd514d define)) values values '#f '#f '#f '#f) (kd2ce5@kd2b2d@install-library 'kd549d '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . kd547c) (eval-core . kd547b) (set-symbol-value! . kd547a) (symbol-value . kd5479) (gensym . kd5478) (void . kd5477)) '() values values '#f '#f '#f '#f) (kd2ce5@kd2b2d@install-library 'kd549e '(mosh) '() '() '() '() '((set-symbol-value! . kd547a) (symbol-value . kd5479) (gensym . kd5478) (regexp? . kd5475) (read-line . kd5474) (ungensym . kd5472) (alist->eq-hash-table . kd5471) (assoc-ref . kd5470) (print . kd546f) (format . kd546e) (host-os . kd546d) (library-path . kd2b0c) (standard-library-path . kd546c) (file-newer? . kd546b) (stat-mtime . kd546a) (digit->integer . kd5465) (call-with-string-input-port . kd5464) (call-with-string-io . kd5463) (string-split . kd5462) (bytevector-for-each . kd5461) (string->regexp . kd5460) (rxmatch . kd545f) (regexp-replace-all . kd545e) (hashtable-for-each . kd545d) (set-current-directory! . kd5458) (expand-path . kd5457) (current-directory . kd5456) (p . kd5415) (get-timeofday . kd53fc) (get-command-line . kd53fb) (sys-display . kd53fa) (whereis . kd53f9) (register . kd53f8) (vm-join! . kd53f7) (vm-set-value! . kd53f6) (vm? . kd53f5) (main-vm? . kd53f4) (vm-eval . kd53f3) (vm-self . kd53f2) (vm-start! . kd53f1) (make-vm . kd53f0) (mutex-try-lock! . kd53ef) (mutex-unlock! . kd53ee) (mutex-lock! . kd53ed) (mutex? . kd53ec) (make-mutex . kd53eb) (condition-variable-notify-all! . kd53ea) (condition-variable-notify! . kd53e9) (condition-variable-wait! . kd53e8) (make-condition-variable . kd53e7) (mosh-executable-path . kd53e6) (make-file-options . kd53e5) (for-each-with-index . kd53e4) (source-info . kd53e3) (make-compiler-instruction . kd53de) (make-instruction . kd53dd) (set-source-info! . kd53dc) (bignum? . kd53db) (fast-equal? . kd53da) (fasl-read . kd53d9) (fasl-write . kd53d8) (time-usage . kd53d7) (os-constant . kd53d6) (time . kd5174) (include . kd5169)) '() values values '#f '#f '#f '#f) (kd2ce5@kd2b2d@install-library 'kd549f '(system) '() '() '() '() '((gensym-prefix-set! . kd5473) (write-to-file . kd5469) (file->sexp-list . kd5468) (file->list . kd5467) (file->string . kd5466) (mosh-cache-dir . kd28f6) (call-process . kd545c) (local-tz-offset . kd545b) (microseconds . kd545a) (directory-list . kd5459) (expand-path . kd5457) (%spawn . kd5455) (%waitpid . kd5454) (simple-struct-name . kd5453) (simple-struct-set! . kd5452) (simple-struct-ref . kd5451) (make-simple-struct . kd5450) (simple-struct? . kd544f) (pointer-ref-c-int64 . kd544e) (pointer-ref-c-int32 . kd544d) (pointer-ref-c-int16 . kd544c) (pointer-ref-c-int8 . kd544b) (pointer-ref-c-uint64 . kd544a) (pointer-ref-c-uint32 . kd5449) (pointer-ref-c-uint16 . kd5448) (pointer-ref-c-uint8 . kd5447) (pointer-set-c-uint64! . kd5446) (pointer-set-c-uint32! . kd5445) (pointer-set-c-uint16! . kd5444) (pointer-set-c-uint8! . kd5443) (pointer-set-c-int64! . kd5442) (pointer-set-c-int32! . kd5441) (pointer-set-c-int16! . kd5440) (pointer-set-c-int8! . kd543f) (pointer-set-c-pointer! . kd543e) (pointer-set-c-double! . kd543d) (pointer-set-c-float! . kd543c) (pointer-set-c-long-long! . kd543b) (pointer-set-c-long! . kd543a) (pointer-set-c-int! . kd5439) (pointer-set-c-short! . kd5438) (pointer-set-c-char! . kd5437) (pointer-ref-c-pointer . kd5436) (pointer-ref-c-double . kd5435) (pointer-ref-c-float . kd5434) (pointer-ref-c-unsigned-long-long . kd5433) (pointer-ref-c-signed-long-long . kd5432) (pointer-ref-c-unsigned-long . kd5431) (pointer-ref-c-signed-long . kd5430) (pointer-ref-c-unsigned-int . kd542f) (pointer-ref-c-signed-int . kd542e) (pointer-ref-c-unsigned-short . kd542d) (pointer-ref-c-signed-short . kd542c) (pointer-ref-c-unsigned-char . kd542b) (pointer-ref-c-signed-char . kd542a) (pointer->integer . kd5429) (integer->pointer . kd5428) (pointer? . kd5427) (shared-errno . kd5426) (get-c-address . kd5425) (obj->integer . kd5424) (u8-list->c-procedure . kd5423) (%ffi-free-c-callback-trampoline . kd5422) (%ffi-make-c-callback-trampoline . kd5421) (%ffi-free . kd5420) (%ffi-malloc . kd541f) (%ffi-supported? . kd541e) (%ffi-pointer->string . kd541d) (%ffi-call . kd541c) (%ffi-lookup . kd541b) (%ffi-open . kd541a) (null-terminated-utf8->string . kd5419) (null-terminated-bytevector->string . kd5418) (%fork . kd5417) (%pipe . kd5416) (open-output-string . kd5414) (get-output-string . kd5413) (file-stat-ctime . kd5412) (file-stat-atime . kd5411) (file-stat-mtime . kd5410) (file-size-in-bytes . kd540f) (file-writable? . kd540e) (file-executable? . kd540d) (file-readable? . kd540c) (file-regular? . kd540b) (file-symbolic-link? . kd540a) (file-directory? . kd5409) (create-symbolic-link . kd5408) (rename-file . kd5407) (delete-directory . kd5406) (create-directory . kd5405) (create-mosh-cache-dir . kd5404) (get-environment-variables . kd5403) (current-exception-handler . kd5402) (get-environment-variable . kd5401) (join-wraps . kd5400) (id->real-label . kd53ff) (same-marks? . kd53fe) (same-marks*? . kd53fd) (instruction? . kd53e2) (instruction->integer . kd53e1) (instruction->symbol . kd53e0) (closure->list . kd53df) (disasm . kd53d5) (make-parameter . kd28f4) (socket-port . kd53d4) (socket-shutdown . kd53d3) (socket-close . kd53d2) (socket-send . kd53d1) (socket-recv! . kd53d0) (socket-recv . kd53cf) (make-server-socket . kd53ce) (make-client-socket . kd53cd) (socket-accept . kd53cc) (socket? . kd53cb) (parameterize . kd5164)) '() values values '#f '#f '#f '#f)))
(begin (set! kd4fdd@ref (unspecified)) (set! kd4fdf@x* (unspecified)) (set! kd4fe1@add-library-path! (unspecified)) (set! kd4fe3@parse-and-add-library-path (unspecified)) (set! kd4fe5@rpad (unspecified)) (set! kd4fe7@condition-printer (unspecified)) (set! kd4fe9@record->field-alist (unspecified)) (set! kd4feb@map-with-index (unspecified)) (set! kd4fed@repl (unspecified)) (set! kd4fef@trace-printer (unspecified)) (set! kd4ff1@command-line (unspecified)) (set! kd4ff3@local-library-path (unspecified)) (set! kd4ff5@load/args (unspecified)) (set! kd4ff7@load (unspecified)) (set! kd4ff9@ironscheme-build (unspecified)) (set! kd4ffb@eval-top-level (unspecified)) (set! kd4ffd@compile-system-libraries (unspecified)) (set! kd4fff@compile (unspecified)) (set! kd5001@compile->closure (unspecified)) (set! kd5003@pre-compile-r6rs-file (unspecified)) (set! kd5005@load-r6rs-top-level (unspecified)) (set! kd5007@load-r6rs-top-level-sexp (unspecified)) (set! kd5009@prefix-inc (unspecified)) (set! kd500b@prefix-inc! (unspecified)) (set! kd4fdd@ref (lambda (kd5046@rtd kd5047@i kd5048@x) (let ((kd504c@val ((record-accessor kd5046@rtd kd5047@i) kd5048@x))) (if (symbol? kd504c@val) (ungensym kd504c@val) kd504c@val)))) (set! kd5134@kd4fdd@ref kd4fdd@ref) (set! kd4fdf@x* '()) (set! kd5135@kd4fdf@x* kd4fdf@x*) (set! kd4fe1@add-library-path! (lambda (kd504e@path) (kd2cd5@kd2b0d@library-path (append (kd2cd5@kd2b0d@library-path) (list kd504e@path))))) (set! kd5136@kd4fe1@add-library-path! kd4fe1@add-library-path!) (set! kd4fe3@parse-and-add-library-path (lambda (kd5050@paths kd5051@message) (let ((kd5055@separator '#f)) (begin (set! kd5055@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((kd5056@t kd5050@paths)) (if kd5056@t ((lambda (kd5058@paths) (for-each (lambda (kd505a@path) (if (file-exists? kd505a@path) (kd4fe1@add-library-path! (expand-path kd505a@path)) (format (current-error-port) kd5051@message kd505a@path))) (string-split kd5058@paths kd5055@separator))) kd5056@t) (void))))))) (set! kd5137@kd4fe3@parse-and-add-library-path kd4fe3@parse-and-add-library-path) (set! kd4fe5@rpad (lambda (kd505c@str kd505d@pad kd505e@n) (let ((kd5062@rest (- kd505e@n (string-length (format '"~a" kd505c@str))))) (let kd5068@loop ((kd5064@rest kd5062@rest) (kd5065@ret (format '"~a" kd505c@str))) (if (<= kd5064@rest '0) kd5065@ret (kd5068@loop (- kd5064@rest '1) (string-append kd5065@ret kd505d@pad))))))) (set! kd5138@kd4fe5@rpad kd4fe5@rpad) (set! kd4fe7@condition-printer (lambda (kd506a@e kd506b@port) (let ((kd506f@max-condition-len '#f)) (begin (set! kd506f@max-condition-len (apply max (map (lambda (kd5080@c) (string-length (symbol->string (record-type-name (record-rtd kd5080@c))))) (simple-conditions kd506a@e)))) (begin (display '" Condition components:\n" kd506b@port) (for-each-with-index (lambda (kd5070@i kd5071@x) (let ((kd5074@rtd (record-rtd kd5071@x)) (kd5075@fields-alist (kd4fe9@record->field-alist kd5071@x))) (begin (format kd506b@port '" ~d. ~a" (+ kd5070@i '1) (kd4fe5@rpad (symbol->string (record-type-name kd5074@rtd)) '" " kd506f@max-condition-len)) (if (null? kd5075@fields-alist) (newline kd506b@port) (void)) (let kd507c@loop ((kd5078@first '#t) (kd5079@fields-alist kd5075@fields-alist)) (if (null? kd5079@fields-alist) '() (let ((kd507e@field (car kd5079@fields-alist))) (begin (if (not kd5078@first) (display (kd4fe5@rpad '"" '" " (+ '4 kd506f@max-condition-len)) kd506b@port) (void)) (display '"       " kd506b@port) (display (car kd507e@field) kd506b@port) (display '": " kd506b@port) (write (cdr kd507e@field) kd506b@port) (newline kd506b@port) (kd507c@loop '#f (cdr kd5079@fields-alist))))))))) (simple-conditions kd506a@e))))))) (set! kd5139@kd4fe7@condition-printer kd4fe7@condition-printer) (set! kd4fe9@record->field-alist (lambda (kd5082@r) (let ((kd5085@ref '#f)) (begin (set! kd5085@ref (lambda (kd5090@rtd kd5091@i kd5092@x) (let ((kd5096@val ((record-accessor kd5090@rtd kd5091@i) kd5092@x))) (if (symbol? kd5096@val) (ungensym kd5096@val) kd5096@val)))) (let kd508a@loop ((kd5086@ret '()) (kd5087@rtd (record-rtd kd5082@r))) (if kd5087@rtd (kd508a@loop (append kd5086@ret (kd4feb@map-with-index (lambda (kd508c@i kd508d@field) (cons kd508d@field (kd5085@ref kd5087@rtd kd508c@i kd5082@r))) (vector->list (record-type-field-names kd5087@rtd)))) (record-type-parent kd5087@rtd)) kd5086@ret)))))) (set! kd513a@kd4fe9@record->field-alist kd4fe9@record->field-alist) (set! kd4feb@map-with-index (lambda (kd5098@proc kd5099@lst) (let kd50a2@loop ((kd509c@i '0) (kd509d@lst kd5099@lst) (kd509e@ret '())) (if (null? kd509d@lst) (reverse kd509e@ret) (kd50a2@loop (+ kd509c@i '1) (cdr kd509d@lst) (cons (kd5098@proc kd509c@i (car kd509d@lst)) kd509e@ret)))))) (set! kd513b@kd4feb@map-with-index kd4feb@map-with-index) (set! kd4fed@repl (lambda kd50a4@x (let ((kd50a7@rec '#f)) (begin (set! kd50a7@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (kd50aa@kd50a8) (lambda () (with-exception-handler (lambda (kd50ac@e) ((call/cc (lambda (kd50ae@kd50a9) (kd50aa@kd50a8 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? kd50ac@e) (kd4fe7@condition-printer kd50ac@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" kd50ac@e))) (kd50ae@kd50a9 (lambda () (raise-continuable kd50ac@e)))))))))) (lambda () (let kd50b4@loop ((kd50b0@line (get-line (current-input-port))) (kd50b1@accum '"")) (let ((kd50b7@parentheses-ok? '#f) (kd50b9@eval-string-print '#f)) (begin (set! kd50b7@parentheses-ok? (lambda (kd50be@text) (let kd50c6@loop ((kd50c0@chars (string->list kd50be@text)) (kd50c1@p0 '0) (kd50c2@p1 '0)) (if (null? kd50c0@chars) (= '0 kd50c1@p0 kd50c2@p1) (let ((kd50c8@t (car kd50c0@chars))) (if (memv kd50c8@t '(#\()) (kd50c6@loop (cdr kd50c0@chars) (+ kd50c1@p0 '1) kd50c2@p1) (if (memv kd50c8@t '(#\))) (kd50c6@loop (cdr kd50c0@chars) (- kd50c1@p0 '1) kd50c2@p1) (if (memv kd50c8@t '(#\[)) (kd50c6@loop (cdr kd50c0@chars) kd50c1@p0 (+ kd50c2@p1 '1)) (if (memv kd50c8@t '(#\])) (kd50c6@loop (cdr kd50c0@chars) kd50c1@p0 (- kd50c2@p1 '1)) (kd50c6@loop (cdr kd50c0@chars) kd50c1@p0 kd50c2@p1)))))))))) (set! kd50b9@eval-string-print (lambda (kd50bc@text) (if (not (or (string=? '"\n" kd50bc@text) (= '0 (string-length kd50bc@text)))) (write (kd4ffb@eval-top-level (call-with-port (open-string-input-port kd50bc@text) read))) (void)))) (if (eof-object? kd50b0@line) (begin (kd50b9@eval-string-print kd50b1@accum) (exit)) (let ((kd50ba@current (string-append kd50b1@accum kd50b0@line))) (if (kd50b7@parentheses-ok? kd50ba@current) (kd50b9@eval-string-print kd50ba@current) (kd50b4@loop (get-line (current-input-port)) kd50ba@current))))))))))))) (newline) (kd50a7@rec)))) (kd50a7@rec))))) (set! kd513c@kd4fed@repl kd4fed@repl) (set! kd4fef@trace-printer (kd2a17@kd28f5@make-parameter write)) (set! kd513d@kd4fef@trace-printer kd4fef@trace-printer) (set! kd4ff1@command-line (kd2a17@kd28f5@make-parameter (get-command-line))) (set! kd513e@kd4ff1@command-line kd4ff1@command-line) (set! kd4ff3@local-library-path (lambda (kd50ca@filename) (kd2cd5@kd2b0d@library-path))) (set! kd513f@kd4ff3@local-library-path kd4ff3@local-library-path) (set! kd4ff5@load/args (lambda (kd50cc@filename . kd50ce@args) (begin (apply kd5005@load-r6rs-top-level kd50cc@filename 'load kd50ce@args) (void)))) (set! kd5140@kd4ff5@load/args kd4ff5@load/args) (set! kd4ff7@load (lambda (kd50d0@filename) (begin (apply kd5005@load-r6rs-top-level kd50d0@filename 'load (kd4ff1@command-line)) (void)))) (set! kd5141@kd4ff7@load kd4ff7@load) (set! kd4ff9@ironscheme-build (lambda () (kd4ff7@load '"ironscheme-buildscript.ss"))) (set! kd5142@kd4ff9@ironscheme-build kd4ff9@ironscheme-build) (set! kd4ffb@eval-top-level (lambda (kd50d2@x) (kd4c03@kd3199@eval kd50d2@x (kd4c1a@kd31c7@interaction-environment)))) (set! kd5143@kd4ffb@eval-top-level kd4ffb@eval-top-level) (set! kd4ffd@compile-system-libraries (lambda () (kd4ffb@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! kd5144@kd4ffd@compile-system-libraries kd4ffd@compile-system-libraries) (set! kd4fff@compile (lambda (kd50d4@filename) (kd5005@load-r6rs-top-level kd50d4@filename 'compile))) (set! kd5145@kd4fff@compile kd4fff@compile) (set! kd5001@compile->closure (lambda (kd50d6@filename) (kd5005@load-r6rs-top-level kd50d6@filename 'closure))) (set! kd5146@kd5001@compile->closure kd5001@compile->closure) (set! kd5003@pre-compile-r6rs-file (lambda (kd50d8@filename) (kd5005@load-r6rs-top-level kd50d8@filename 'compile))) (set! kd5147@kd5003@pre-compile-r6rs-file kd5003@pre-compile-r6rs-file) (set! kd5005@load-r6rs-top-level (lambda (kd50da@filename kd50db@how . kd50de@args) (begin (kd2cd5@kd2b0d@library-path (kd4ff3@local-library-path kd50da@filename)) (let ((kd50e0@x* (with-input-from-file kd50da@filename (lambda () (let kd50e2@f () (let ((kd50e4@x (kd2a09@kd28d9@read-annotated))) (if (eof-object? kd50e4@x) '() (cons kd50e4@x (kd50e2@f))))))))) (let ((kd50e6@t kd50db@how)) (if (memv kd50e6@t '(closure)) (kd4c19@kd31c5@pre-compile-r6rs-top-level kd50e0@x*) (if (memv kd50e6@t '(load)) (begin (kd4ff1@command-line (cons kd50da@filename (car kd50de@args))) (kd2a18@kd28f7@mosh-cache-dir (create-mosh-cache-dir)) (if (kd2a18@kd28f7@mosh-cache-dir) (gensym-prefix-set! (kd500b@prefix-inc! (string-append (kd2a18@kd28f7@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (kd50e8@file) ((call/cc (lambda (kd50ec@kd50ea) (lambda () (with-exception-handler (lambda (kd50ee@c) ((call/cc (lambda (kd50f0@kd50eb) (kd50ec@kd50ea (lambda () (if '#t '#t (kd50f0@kd50eb (lambda () (raise-continuable kd50ee@c)))))))))) (lambda () (delete-file (string-append (kd2a18@kd28f7@mosh-cache-dir) '"/" kd50e8@file))))))))) (directory-list (kd2a18@kd28f7@mosh-cache-dir))) (void)) (let ((kd50f2@compiled (kd4c18@kd31c3@compile-r6rs-top-level kd50e0@x*))) (begin (if (and (kd2a18@kd28f7@mosh-cache-dir) (not (symbol-value '%disable-acc))) (kd2cd9@kd2b15@serialize-all kd2a12@kd28eb@serialize-library kd2a6e@kd2a27@compile-core-expr) (void)) (kd50f2@compiled)))) (if (memv kd50e6@t '(compile)) (begin (kd4c18@kd31c3@compile-r6rs-top-level kd50e0@x*) (kd2cd9@kd2b15@serialize-all kd2a12@kd28eb@serialize-library kd2a6e@kd2a27@compile-core-expr)) (if '#f '#f (void)))))))))) (set! kd5148@kd5005@load-r6rs-top-level kd5005@load-r6rs-top-level) (set! kd5007@load-r6rs-top-level-sexp (lambda (kd50f4@import-spec kd50f5@thunk) (let ((kd5100@kd50f9 kd2cd5@kd2b0d@library-path) (kd5101@kd50fb kd2a18@kd28f7@mosh-cache-dir) (kd5102@kd50fd (kd4ff3@local-library-path '"")) (kd5103@kd50ff (create-mosh-cache-dir))) (let ((kd5108@swap (lambda () (begin (let ((kd510a@t (kd5100@kd50f9))) (begin (kd5100@kd50f9 kd5102@kd50fd) (set! kd5102@kd50fd kd510a@t))) (let ((kd510c@t (kd5101@kd50fb))) (begin (kd5101@kd50fb kd5103@kd50ff) (set! kd5103@kd50ff kd510c@t))))))) (dynamic-wind kd5108@swap (lambda () (begin (if (kd2a18@kd28f7@mosh-cache-dir) (gensym-prefix-set! (kd500b@prefix-inc! (string-append (kd2a18@kd28f7@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((kd5112@kd510f kd4ff1@command-line) (kd5113@kd5111 '())) (let ((kd5116@swap (lambda () (let ((kd5118@t (kd5112@kd510f))) (begin (kd5112@kd510f kd5113@kd5111) (set! kd5113@kd5111 kd5118@t)))))) (dynamic-wind kd5116@swap (lambda () ((kd4c18@kd31c3@compile-r6rs-top-level (list (cons 'import kd50f4@import-spec) (list kd50f5@thunk))))) kd5116@swap))))) kd5108@swap))))) (set! kd5149@kd5007@load-r6rs-top-level-sexp kd5007@load-r6rs-top-level-sexp) (set! kd5009@prefix-inc (lambda (kd511a@prefix-string) (let ((kd511c@prefix (symbol->string kd511a@prefix-string))) (let ((kd511e@len (string-length kd511c@prefix))) (let kd5126@loop ((kd5120@i (- kd511e@len '1)) (kd5121@carry? '#t) (kd5122@accum '())) (if (< kd5120@i '0) (string->symbol (list->string (if kd5121@carry? (cons '#\a kd5122@accum) kd5122@accum))) (if kd5121@carry? (let ((kd5128@next-integer (+ '1 (char->integer (string-ref kd511c@prefix kd5120@i))))) (if (= kd5128@next-integer '123) (kd5126@loop (- kd5120@i '1) '#f (cons '#\A kd5122@accum)) (if (= kd5128@next-integer '91) (kd5126@loop (- kd5120@i '1) '#t (cons '#\a kd5122@accum)) (kd5126@loop (- kd5120@i '1) '#f (cons (integer->char kd5128@next-integer) kd5122@accum))))) (kd5126@loop (- kd5120@i '1) '#f (cons (string-ref kd511c@prefix kd5120@i) kd5122@accum))))))))) (set! kd514a@kd5009@prefix-inc kd5009@prefix-inc) (set! kd500b@prefix-inc! (lambda (kd512a@file) (begin (if (not (file-exists? kd512a@file)) (call-with-output-file kd512a@file (lambda (kd512c@port) (write 'd kd512c@port))) (void)) (let ((kd512e@prefix (call-with-input-file kd512a@file read))) (if (main-vm?) (let ((kd5130@next-prefix (kd5009@prefix-inc kd512e@prefix))) (begin (call-with-port (open-file-output-port kd512a@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (kd5132@port) (write kd5130@next-prefix kd5132@port))) kd512e@prefix)) kd512e@prefix))))) (set! kd514b@kd500b@prefix-inc! kd500b@prefix-inc!) (begin (kd2cda@kd2b17@current-precompiled-library-loader kd2a13@kd28ed@load-serialized-library) (set-symbol-value! 'load kd4ff7@load) (set-symbol-value! 'pre-compile-r6rs-file kd5003@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs kd4ffb@eval-top-level) (set-symbol-value! 'int-env-syms kd4bfa@kd3187@interaction-environment-symbols) (set-symbol-value! 'expanded2core kd2a6d@kd2a25@expanded->core) (set-symbol-value! 'trace-printer kd4fef@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'invoke-library-by-name kd2cea@kd2b37@invoke-library-by-name) (set-symbol-value! 'create-non-continuable-violation (lambda (kd500c@c) (condition (kd4f3a@kd4d44@make-non-continuable-violation) (kd4f30@kd4d2b@make-who-condition 'raise) (kd4ef4@kd4c8c@make-message-condition '"returned from non-continuable exception") (kd4f26@kd4d10@make-irritants-condition (list kd500c@c))))) (kd4fe3@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (kd4fe3@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (kd4fe1@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (kd4fe1@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (kd4fe1@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((kd500e@prefix (lambda (kd5010@ext kd5011@ls) (append (map (lambda (kd5014@x) (string-append kd5010@ext kd5014@x)) kd5011@ls) kd5011@ls)))) (kd2cd6@kd2b0f@library-extensions (kd500e@prefix '".mosh" (kd2cd6@kd2b0f@library-extensions)))) (current-exception-handler (lambda (kd5016@c) (begin (if (condition? kd5016@c) (kd4fe7@condition-printer kd5016@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" kd5016@c)) kd5016@c))) (if ((call/cc (lambda (kd501a@kd5018) (lambda () (with-exception-handler (lambda (kd501c@c) ((call/cc (lambda (kd501e@kd5019) (kd501a@kd5018 (lambda () (if '#t '#f (kd501e@kd5019 (lambda () (raise-continuable kd501c@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (kd5007@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (kd4ff1@command-line)) (let ((kd5028@kd5021 kd4ff1@command-line) (kd5029@kd5023 kd2a18@kd28f7@mosh-cache-dir) (kd502a@kd5025 '()) (kd502b@kd5027 (create-mosh-cache-dir))) (let ((kd5030@swap (lambda () (begin (let ((kd5032@t (kd5028@kd5021))) (begin (kd5028@kd5021 kd502a@kd5025) (set! kd502a@kd5025 kd5032@t))) (let ((kd5034@t (kd5029@kd5023))) (begin (kd5029@kd5023 kd502b@kd5027) (set! kd502b@kd5027 kd5034@t))))))) (dynamic-wind kd5030@swap (lambda () (begin (if (kd2a18@kd28f7@mosh-cache-dir) (gensym-prefix-set! (kd500b@prefix-inc! (string-append (kd2a18@kd28f7@mosh-cache-dir) '"/prefix.txt"))) (void)) (kd4fed@repl))) kd5030@swap))) (begin (kd2cd5@kd2b0d@library-path (kd4ff3@local-library-path (car (kd4ff1@command-line)))) (set! kd4fdf@x* (with-input-from-file (car (kd4ff1@command-line)) (lambda () (let kd5036@f () (let ((kd5038@x (kd2a09@kd28d9@read-annotated))) (if (eof-object? kd5038@x) '() (cons kd5038@x (kd5036@f)))))))) (kd4ff1@command-line (cons (car (kd4ff1@command-line)) (cdr (kd4ff1@command-line)))) (kd2a18@kd28f7@mosh-cache-dir (create-mosh-cache-dir)) (if (kd2a18@kd28f7@mosh-cache-dir) (gensym-prefix-set! (kd500b@prefix-inc! (string-append (kd2a18@kd28f7@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (kd503a@file) ((call/cc (lambda (kd503e@kd503c) (lambda () (with-exception-handler (lambda (kd5040@c) ((call/cc (lambda (kd5042@kd503d) (kd503e@kd503c (lambda () (if '#t '#t (kd5042@kd503d (lambda () (raise-continuable kd5040@c)))))))))) (lambda () (delete-file (string-append (kd2a18@kd28f7@mosh-cache-dir) '"/" kd503a@file))))))))) (directory-list (kd2a18@kd28f7@mosh-cache-dir))) (void)) (let ((kd5044@compiled (kd4c18@kd31c3@compile-r6rs-top-level kd4fdf@x*))) (begin (if (and (kd2a18@kd28f7@mosh-cache-dir) (not (symbol-value '%disable-acc))) (kd2cd9@kd2b15@serialize-all kd2a12@kd28eb@serialize-library kd2a6e@kd2a27@compile-core-expr) (void)) (kd5044@compiled))))))))
