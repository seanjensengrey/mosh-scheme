;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! i581@library-file-path->cache-path (unspecified)) (set! i583@read-annotated (unspecified)) (set! i585@annotation-stripped (unspecified)) (set! i587@annotation? (unspecified)) (set! i589@annotation-source (unspecified)) (set! i58b@annotation-expression (unspecified)) (set! i58d@scm->fasl (unspecified)) (set! i58f@fasl-save (unspecified)) (set! i591@fasl-load (unspecified)) (set! i593@verbose? (unspecified)) (set! i595@serialize-library (unspecified)) (set! i597@load-serialized-library (unspecified)) (set! i599@make-record-printer (unspecified)) (set! i59b@compile-core (unspecified)) (set! i59d@read-library-source-file (unspecified)) (set! i59f@make-parameter (unspecified)) (set! i5a1@mosh-cache-dir (unspecified)) (set! i637@file-options-spec (unspecified)) (set! i581@library-file-path->cache-path (lambda (i638@x) (call-with-values (lambda () (open-string-output-port)) (lambda (i63e@i63b i63f@i63d) (let ((i642@extract i63f@i63d) (i643@p i63e@i63b)) (letrec* ((i647@display-hex (lambda (i650@n) (if (<= '0 i650@n '9) (display i650@n i643@p) (display (integer->char (+ (char->integer '#\a) (- i650@n '10))) i643@p))))) (begin (let i64a@f ((i648@ls (string-split i638@x '#\/))) (if (not (null? i648@ls)) (begin (display '"_" i643@p) (for-each (lambda (i64c@c) (if (or (char<=? '#\a i64c@c '#\z) (char<=? '#\A i64c@c '#\Z) (char<=? '#\0 i64c@c '#\9) (memv i64c@c '(#\- #\. #\_ #\~))) (display i64c@c i643@p) (begin (display '"%" i643@p) (let ((i64e@n (char->integer i64c@c))) (begin (i647@display-hex (quotient i64e@n '16)) (i647@display-hex (remainder i64e@n '16))))))) (string->list (car i648@ls))) (i64a@f (cdr i648@ls))) (void))) (i642@extract)))))))) (set! i6b2@i581@library-file-path->cache-path i581@library-file-path->cache-path) (set! i583@read-annotated read) (set! i6b3@i583@read-annotated i583@read-annotated) (set! i585@annotation-stripped (lambda (i652@x) (i58b@annotation-expression i652@x))) (set! i6b4@i585@annotation-stripped i585@annotation-stripped) (set! i587@annotation? (lambda (i654@x) (source-info i654@x))) (set! i6b5@i587@annotation? i587@annotation?) (set! i589@annotation-source (lambda (i656@x) (source-info i656@x))) (set! i6b6@i589@annotation-source i589@annotation-source) (set! i58b@annotation-expression (lambda (i658@x) (if (pair? i658@x) (cons (car i658@x) (cdr i658@x)) (if (procedure? i658@x) (set-source-info! i658@x '#f) i658@x)))) (set! i6b7@i58b@annotation-expression i58b@annotation-expression) (set! i58d@scm->fasl (lambda (i65a@filename) (string-append (i5a1@mosh-cache-dir) '"/" (i581@library-file-path->cache-path i65a@filename) '".mosh-fasl"))) (set! i6b8@i58d@scm->fasl i58d@scm->fasl) (set! i58f@fasl-save (lambda (i65c@filename i65d@obj) (call-with-port (open-file-output-port i65c@filename) (lambda (i660@port) ((symbol-value 'fasl-write!) i65d@obj i660@port))))) (set! i6b9@i58f@fasl-save i58f@fasl-save) (set! i591@fasl-load (lambda (i662@filename) (call-with-port (open-file-input-port i662@filename) (symbol-value 'fasl-read!)))) (set! i6ba@i591@fasl-load i591@fasl-load) (set! i593@verbose? (symbol-value '%verbose)) (set! i6bb@i593@verbose? i593@verbose?) (set! i595@serialize-library (lambda (i664@filename i665@obj) (begin (if i593@verbose? (format (current-error-port) '"serialize-library ~a\n..." i664@filename) (void)) (let ((i668@expanded2core (symbol-value 'expanded2core))) (let ((i66a@compile (symbol-value 'compile-w/o-halt))) (let ((i66c@code i665@obj)) (let ((i66e@pivot (cddddr (cddddr i66c@code)))) (let ((i670@visit (i66a@compile (i668@expanded2core (car i66e@pivot))))) (begin (set-car! i66e@pivot i670@visit) (let ((i672@pivot (cdr i66e@pivot))) (let ((i674@invoke (i66a@compile (i668@expanded2core (car i672@pivot))))) (set-car! i672@pivot i674@invoke))))))))) (let ((i676@fasl-file (i58d@scm->fasl i664@filename))) (begin (if (file-exists? i676@fasl-file) (delete-file i676@fasl-file) (void)) ((call/cc (lambda (i67a@i678) (lambda () (with-exception-handler (lambda (i67c@c) ((call/cc (lambda (i67e@i679) (i67a@i678 (lambda () (if '#t (begin (if i593@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" i664@filename) (void)) (if (file-exists? i676@fasl-file) (delete-file i676@fasl-file) (void)) '#f) (i67e@i679 (lambda () (raise-continuable i67c@c)))))))))) (lambda () (i58f@fasl-save i676@fasl-file i665@obj)))))))))))) (set! i6bc@i595@serialize-library i595@serialize-library) (set! i597@load-serialized-library (lambda (i680@filename i681@obj) (and (i5a1@mosh-cache-dir) (let ((i684@fasl-file (i58d@scm->fasl i680@filename))) (if (and (file-exists? i684@fasl-file) ((symbol-value 'file-newer?) i684@fasl-file i680@filename)) (let ((i686@expanded2core (symbol-value 'expanded2core))) (let ((i688@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((i68a@code (i591@fasl-load i684@fasl-file))) (let ((i68c@pivot (cddddr (cddddr i68a@code)))) (let ((i68e@visit (car i68c@pivot))) (let ((i690@visit-proc (lambda () (i688@eval-compiled-core i68e@visit)))) (begin (set-car! i68c@pivot i690@visit-proc) (let ((i692@pivot (cdr i68c@pivot))) (let ((i694@invoke (car i692@pivot))) (begin (set-car! i692@pivot (lambda () (i688@eval-compiled-core i694@invoke))) (apply i681@obj i68a@code))))))))))) '#f))))) (set! i6bd@i597@load-serialized-library i597@load-serialized-library) (set! i599@make-record-printer (lambda (i696@name i697@printer) (lambda i69a@x (begin (display '"record printer") (for-each display i69a@x))))) (set! i6be@i599@make-record-printer i599@make-record-printer) (set! i59b@compile-core (lambda i69c@x (apply error 'comile-core '"not implementated" i69c@x))) (set! i6bf@i59b@compile-core i59b@compile-core) (set! i59d@read-library-source-file (lambda (i69e@file-name) (with-input-from-file i69e@file-name i583@read-annotated))) (set! i6c0@i59d@read-library-source-file i59d@read-library-source-file) (set! i59f@make-parameter (lambda i6ae (let ((i6af (length i6ae))) (if (= i6af '1) (apply (lambda (i6a0@x) (i59f@make-parameter i6a0@x (lambda (i6a2@x) i6a2@x))) i6ae) (if (= i6af '2) (apply (lambda (i6a4@x i6a5@fender) (let ((i6a8@x (i6a5@fender i6a4@x))) (lambda i6ac (let ((i6ad (length i6ac))) (if (= i6ad '0) (apply (lambda () i6a8@x) i6ac) (if (= i6ad '1) (apply (lambda (i6aa@v) (set! i6a8@x (i6a5@fender i6aa@v))) i6ac) (error 'apply '"invalid arg count"))))))) i6ae) (error 'apply '"invalid arg count")))))) (set! i6c1@i59f@make-parameter i59f@make-parameter) (set! i5a1@mosh-cache-dir (i59f@make-parameter '#f)) (set! i6c2@i5a1@mosh-cache-dir i5a1@mosh-cache-dir) (set! i637@file-options-spec (lambda (i6b0@x) i6b0@x)) (set! i6c3@i637@file-options-spec i637@file-options-spec) (void))
(begin (set! i6c9@current-primitive-locations (unspecified)) (set! i6cb@mutable? (unspecified)) (set! i6cd@rewriter (unspecified)) (set! i6cf@expanded->core (unspecified)) (set! i6d1@compile-core-expr (unspecified)) (set! i6d3@pretty-print (unspecified)) (set! i6d5@compile-core-expr-to-port (unspecified)) (set! i6c9@current-primitive-locations (i6c1@i59f@make-parameter (lambda (i6d6@x) '#f) (lambda (i6d8@p) i6d8@p))) (set! i714@i6c9@current-primitive-locations i6c9@current-primitive-locations) (set! i6cb@mutable? (lambda (i6da@x) (or (pair? i6da@x) (vector? i6da@x) (hashtable? i6da@x)))) (set! i715@i6cb@mutable? i6cb@mutable?) (set! i6cd@rewriter (lambda (i6dc@quote-hack?) (letrec* ((i6df@f (lambda (i6e0@x) (if (pair? i6e0@x) (let ((i6e2@t (car i6e0@x))) (if (memv i6e2@t '(quote)) (if (and i6dc@quote-hack? (i6cb@mutable? (cadr i6e0@x))) (let ((i6e4@g (gensym))) (begin (set-symbol-value! i6e4@g (cadr i6e0@x)) i6e4@g)) i6e0@x) (if (memv i6e2@t '(case-lambda)) (cons 'case-lambda (map (lambda (i6e6@x) (cons (car i6e6@x) (map i6df@f (cdr i6e6@x)))) (cdr i6e0@x))) (if (memv i6e2@t '(lambda)) (cons* 'lambda (cadr i6e0@x) (map i6df@f (cddr i6e0@x))) (if (memv i6e2@t '(letrec)) (let ((i6e8@bindings (cadr i6e0@x)) (i6e9@body* (cddr i6e0@x))) (let ((i6ec@lhs* (map car i6e8@bindings)) (i6ed@rhs* (map cadr i6e8@bindings))) (cons* 'letrec (map list i6ec@lhs* (map i6df@f i6ed@rhs*)) (map i6df@f i6e9@body*)))) (if (memv i6e2@t '(letrec*)) (let ((i6f0@bindings (cadr i6e0@x)) (i6f1@body* (cddr i6e0@x))) (let ((i6f4@lhs* (map car i6f0@bindings)) (i6f5@rhs* (map cadr i6f0@bindings))) (cons* 'letrec* (map list i6f4@lhs* (map i6df@f i6f5@rhs*)) (map i6df@f i6f1@body*)))) (if (memv i6e2@t '(library-letrec*)) (let ((i6f8@name (cadr i6e0@x)) (i6f9@x (cdr i6e0@x))) (let ((i6fc@bindings (cadr i6f9@x)) (i6fd@body* (cddr i6f9@x))) (let ((i700@lhs* (map car i6fc@bindings)) (i701@lhs** (map cadr i6fc@bindings)) (i702@rhs* (map caddr i6fc@bindings))) (cons* 'library-letrec* i6f8@name (map list i700@lhs* i701@lhs** (map i6df@f i702@rhs*)) (map i6df@f i6fd@body*))))) (if (memv i6e2@t '(begin)) (cons 'begin (map i6df@f (cdr i6e0@x))) (if (memv i6e2@t '(set!)) (list 'set! (cadr i6e0@x) (i6df@f (caddr i6e0@x))) (if (memv i6e2@t '(primitive)) (let ((i706@op (cadr i6e0@x))) (let ((i708@t ((i6c9@current-primitive-locations) i706@op))) (if i708@t ((lambda (i70a@loc) i70a@loc) i708@t) i706@op))) (if (memv i6e2@t '(define)) i6e0@x (if (list? i6e0@x) (map i6df@f i6e0@x) (error 'rewrite '"invalid form ~s ~s" i6e0@x (list? i6e0@x)))))))))))))) i6e0@x)))) i6df@f))) (set! i716@i6cd@rewriter i6cd@rewriter) (set! i6cf@expanded->core (lambda (i70c@x) ((i6cd@rewriter '#f) i70c@x))) (set! i717@i6cf@expanded->core i6cf@expanded->core) (set! i6d1@compile-core-expr (lambda (i70e@x) ((i6cd@rewriter '#f) i70e@x))) (set! i718@i6d1@compile-core-expr i6d1@compile-core-expr) (set! i6d3@pretty-print write) (set! i719@i6d3@pretty-print i6d3@pretty-print) (set! i6d5@compile-core-expr-to-port (lambda (i710@x i711@p) (i6d3@pretty-print ((i6cd@rewriter '#f) i710@x) i711@p))) (set! i71a@i6d5@compile-core-expr-to-port i6d5@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! i769@make-collection (unspecified)) (set! i76b@current-library-collection (unspecified)) (set! i76d@rp (unspecified)) (set! i777@library? (unspecified)) (set! i779@library-id (unspecified)) (set! i77b@set-library-id! (unspecified)) (set! i77d@library-name (unspecified)) (set! i77f@set-library-name! (unspecified)) (set! i781@library-version (unspecified)) (set! i783@set-library-version! (unspecified)) (set! i785@library-imp* (unspecified)) (set! i787@set-library-imp*! (unspecified)) (set! i789@library-vis* (unspecified)) (set! i78b@set-library-vis*! (unspecified)) (set! i78d@library-inv* (unspecified)) (set! i78f@set-library-inv*! (unspecified)) (set! i791@library-subst (unspecified)) (set! i793@set-library-subst! (unspecified)) (set! i795@library-env (unspecified)) (set! i797@set-library-env! (unspecified)) (set! i799@library-visit-state (unspecified)) (set! i79b@set-library-visit-state! (unspecified)) (set! i79d@library-invoke-state (unspecified)) (set! i79f@set-library-invoke-state! (unspecified)) (set! i7a1@library-visit-code (unspecified)) (set! i7a3@set-library-visit-code! (unspecified)) (set! i7a5@library-invoke-code (unspecified)) (set! i7a7@set-library-invoke-code! (unspecified)) (set! i7a9@library-visible? (unspecified)) (set! i7ab@set-library-visible?! (unspecified)) (set! i7ad@library-source-file-name (unspecified)) (set! i7af@set-library-source-file-name! (unspecified)) (set! i7b1@dummy (unspecified)) (set! i7b3@find-dependencies (unspecified)) (set! i7b5@find-library-by (unspecified)) (set! i7b7@library-path (unspecified)) (set! i7b9@library-extensions (unspecified)) (set! i7bb@library-name->file-name (unspecified)) (set! i7bd@file-locator (unspecified)) (set! i7bf@serialize-all (unspecified)) (set! i7c1@current-precompiled-library-loader (unspecified)) (set! i7c3@try-load-from-file (unspecified)) (set! i7c5@library-loader (unspecified)) (set! i7c7@current-library-expander (unspecified)) (set! i7c9@external-pending-libraries (unspecified)) (set! i7cb@find-external-library (unspecified)) (set! i7cd@find-library-by-name (unspecified)) (set! i7cf@library-exists? (unspecified)) (set! i7d1@find-library-by-spec/die (unspecified)) (set! i7d3@label->binding-table (unspecified)) (set! i7d5@install-library-record (unspecified)) (set! i7d7@install-library (unspecified)) (set! i7d9@imported-label->binding (unspecified)) (set! i7db@invoke-library (unspecified)) (set! i7dd@visit-library (unspecified)) (set! i7df@invoke-library-by-spec (unspecified)) (set! i7e1@installed-libraries (unspecified)) (set! i7e3@library-spec (unspecified)) (set! i769@make-collection (lambda () (let ((i7e4@set '())) (letrec* ((i7e7@set-cons (lambda (i7ec@x i7ed@ls) (if (memq i7ec@x i7ed@ls) i7ed@ls (cons i7ec@x i7ed@ls))))) (lambda i7ea (let ((i7eb (length i7ea))) (if (= i7eb '0) (apply (lambda () i7e4@set) i7ea) (if (= i7eb '1) (apply (lambda (i7e8@x) (set! i7e4@set (i7e7@set-cons i7e8@x i7e4@set))) i7ea) (error 'apply '"invalid arg count"))))))))) (set! i958@i769@make-collection i769@make-collection) (set! i76b@current-library-collection (i6c1@i59f@make-parameter (i769@make-collection) (lambda (i7f0@x) (begin (if (not (procedure? i7f0@x)) (assertion-violation 'current-library-collection '"not a procedure" i7f0@x) (void)) i7f0@x)))) (set! i959@i76b@current-library-collection i76b@current-library-collection) (set! i76d@rp (i6be@i599@make-record-printer 'library (lambda (i7f2@x i7f3@p i7f4@wr) (begin (if (not (i777@library? i7f2@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (i781@library-version i7f2@x)) (i77d@library-name i7f2@x) (append (i77d@library-name i7f2@x) (list (i781@library-version i7f2@x))))) i7f3@p))))) (set! i95a@i76d@rp i76d@rp) (set! i777@library? (lambda (i7f8@x) (and (simple-struct? i7f8@x) (eq? (simple-struct-name i7f8@x) 'library)))) (set! i95b@i777@library? i777@library?) (set! i779@library-id (lambda (i7fa@x) (simple-struct-ref i7fa@x '0))) (set! i95c@i779@library-id i779@library-id) (set! i77b@set-library-id! (lambda (i7fc@x i7fd@val) (simple-struct-set! i7fc@x '0 i7fd@val))) (set! i95d@i77b@set-library-id! i77b@set-library-id!) (set! i77d@library-name (lambda (i800@x) (simple-struct-ref i800@x '1))) (set! i95e@i77d@library-name i77d@library-name) (set! i77f@set-library-name! (lambda (i802@x i803@val) (simple-struct-set! i802@x '1 i803@val))) (set! i95f@i77f@set-library-name! i77f@set-library-name!) (set! i781@library-version (lambda (i806@x) (simple-struct-ref i806@x '2))) (set! i960@i781@library-version i781@library-version) (set! i783@set-library-version! (lambda (i808@x i809@val) (simple-struct-set! i808@x '2 i809@val))) (set! i961@i783@set-library-version! i783@set-library-version!) (set! i785@library-imp* (lambda (i80c@x) (simple-struct-ref i80c@x '3))) (set! i962@i785@library-imp* i785@library-imp*) (set! i787@set-library-imp*! (lambda (i80e@x i80f@val) (simple-struct-set! i80e@x '3 i80f@val))) (set! i963@i787@set-library-imp*! i787@set-library-imp*!) (set! i789@library-vis* (lambda (i812@x) (simple-struct-ref i812@x '4))) (set! i964@i789@library-vis* i789@library-vis*) (set! i78b@set-library-vis*! (lambda (i814@x i815@val) (simple-struct-set! i814@x '4 i815@val))) (set! i965@i78b@set-library-vis*! i78b@set-library-vis*!) (set! i78d@library-inv* (lambda (i818@x) (simple-struct-ref i818@x '5))) (set! i966@i78d@library-inv* i78d@library-inv*) (set! i78f@set-library-inv*! (lambda (i81a@x i81b@val) (simple-struct-set! i81a@x '5 i81b@val))) (set! i967@i78f@set-library-inv*! i78f@set-library-inv*!) (set! i791@library-subst (lambda (i81e@x) (simple-struct-ref i81e@x '6))) (set! i968@i791@library-subst i791@library-subst) (set! i793@set-library-subst! (lambda (i820@x i821@val) (simple-struct-set! i820@x '6 i821@val))) (set! i969@i793@set-library-subst! i793@set-library-subst!) (set! i795@library-env (lambda (i824@x) (simple-struct-ref i824@x '7))) (set! i96a@i795@library-env i795@library-env) (set! i797@set-library-env! (lambda (i826@x i827@val) (simple-struct-set! i826@x '7 i827@val))) (set! i96b@i797@set-library-env! i797@set-library-env!) (set! i799@library-visit-state (lambda (i82a@x) (simple-struct-ref i82a@x '8))) (set! i96c@i799@library-visit-state i799@library-visit-state) (set! i79b@set-library-visit-state! (lambda (i82c@x i82d@val) (simple-struct-set! i82c@x '8 i82d@val))) (set! i96d@i79b@set-library-visit-state! i79b@set-library-visit-state!) (set! i79d@library-invoke-state (lambda (i830@x) (simple-struct-ref i830@x '9))) (set! i96e@i79d@library-invoke-state i79d@library-invoke-state) (set! i79f@set-library-invoke-state! (lambda (i832@x i833@val) (simple-struct-set! i832@x '9 i833@val))) (set! i96f@i79f@set-library-invoke-state! i79f@set-library-invoke-state!) (set! i7a1@library-visit-code (lambda (i836@x) (simple-struct-ref i836@x '10))) (set! i970@i7a1@library-visit-code i7a1@library-visit-code) (set! i7a3@set-library-visit-code! (lambda (i838@x i839@val) (simple-struct-set! i838@x '10 i839@val))) (set! i971@i7a3@set-library-visit-code! i7a3@set-library-visit-code!) (set! i7a5@library-invoke-code (lambda (i83c@x) (simple-struct-ref i83c@x '11))) (set! i972@i7a5@library-invoke-code i7a5@library-invoke-code) (set! i7a7@set-library-invoke-code! (lambda (i83e@x i83f@val) (simple-struct-set! i83e@x '11 i83f@val))) (set! i973@i7a7@set-library-invoke-code! i7a7@set-library-invoke-code!) (set! i7a9@library-visible? (lambda (i842@x) (simple-struct-ref i842@x '12))) (set! i974@i7a9@library-visible? i7a9@library-visible?) (set! i7ab@set-library-visible?! (lambda (i844@x i845@val) (simple-struct-set! i844@x '12 i845@val))) (set! i975@i7ab@set-library-visible?! i7ab@set-library-visible?!) (set! i7ad@library-source-file-name (lambda (i848@x) (simple-struct-ref i848@x '13))) (set! i976@i7ad@library-source-file-name i7ad@library-source-file-name) (set! i7af@set-library-source-file-name! (lambda (i84a@x i84b@val) (simple-struct-set! i84a@x '13 i84b@val))) (set! i977@i7af@set-library-source-file-name! i7af@set-library-source-file-name!) (set! i7b1@dummy '3) (set! i978@i7b1@dummy i7b1@dummy) (set! i7b3@find-dependencies (lambda (i84e@ls) (if (null? i84e@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! i979@i7b3@find-dependencies i7b3@find-dependencies) (set! i7b5@find-library-by (lambda (i850@pred) (let i854@f ((i852@ls ((i76b@current-library-collection)))) (if (null? i852@ls) '#f (if (i850@pred (car i852@ls)) (car i852@ls) (i854@f (cdr i852@ls))))))) (set! i97a@i7b5@find-library-by i7b5@find-library-by) (set! i7b7@library-path (i6c1@i59f@make-parameter '(".") (lambda (i856@x) (if (and (list? i856@x) (for-all string? i856@x)) (map (lambda (i858@x) i858@x) i856@x) (assertion-violation 'library-path '"not a list of strings" i856@x))))) (set! i97b@i7b7@library-path i7b7@library-path) (set! i7b9@library-extensions (i6c1@i59f@make-parameter '(".sls" ".ss" ".scm") (lambda (i85a@x) (if (and (list? i85a@x) (for-all string? i85a@x)) (map (lambda (i85c@x) i85c@x) i85a@x) (assertion-violation 'library-extensions '"not a list of strings" i85a@x))))) (set! i97c@i7b9@library-extensions i7b9@library-extensions) (set! i7bb@library-name->file-name (lambda (i85e@x) (call-with-values (lambda () (open-string-output-port)) (lambda (i864@i861 i865@i863) (let ((i868@extract i865@i863) (i869@p i864@i861)) (letrec* ((i86d@display-hex (lambda (i876@n) (if (<= '0 i876@n '9) (display i876@n i869@p) (display (integer->char (+ (char->integer '#\a) (- i876@n '10))) i869@p))))) (begin (let i870@f ((i86e@ls i85e@x)) (if (not (null? i86e@ls)) (begin (display '"/" i869@p) (for-each (lambda (i872@c) (if (or (char<=? '#\a i872@c '#\z) (char<=? '#\A i872@c '#\Z) (char<=? '#\0 i872@c '#\9) (memv i872@c '(#\- #\. #\_ #\~))) (display i872@c i869@p) (begin (display '"%" i869@p) (let ((i874@n (char->integer i872@c))) (begin (i86d@display-hex (quotient i874@n '16)) (i86d@display-hex (remainder i874@n '16))))))) (string->list (symbol->string (car i86e@ls)))) (i870@f (cdr i86e@ls))) (void))) (i868@extract)))))))) (set! i97d@i7bb@library-name->file-name i7bb@library-name->file-name) (set! i7bd@file-locator (i6c1@i59f@make-parameter (lambda (i878@x) (let ((i87a@str (i7bb@library-name->file-name i878@x))) (let i882@f ((i87c@ls (i7b7@library-path)) (i87d@exts (i7b9@library-extensions)) (i87e@failed-list '())) (if (null? i87c@ls) (letrec* ((i88c@i887 (make-record-type-descriptor '&library-resolution &condition-rtd 'i88a '#f '#f '#((immutable library) (immutable files)))) (i88e@i889 '#f) (i890@i888 (make-record-constructor-descriptor i88c@i887 &condition-rcd i88e@i889)) (i893@i886 (record-predicate i88c@i887)) (i895@make-library-resolution-condition (record-constructor i890@i888)) (i897@i884 (record-accessor i88c@i887 '0)) (i899@i885 (record-accessor i88c@i887 '1)) (i89b@library-resolution-condition? (condition-predicate i88c@i887)) (i89d@condition-library (condition-accessor i88c@i887 i897@i884)) (i89f@condition-files (condition-accessor i88c@i887 i899@i885))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (i895@make-library-resolution-condition i878@x (reverse i87e@failed-list))))) (if (null? i87d@exts) (i882@f (cdr i87c@ls) (i7b9@library-extensions) i87e@failed-list) (let ((i8a0@name (string-append (car i87c@ls) i87a@str (car i87d@exts)))) (if (file-exists? i8a0@name) i8a0@name (i882@f i87c@ls (cdr i87d@exts) (cons i8a0@name i87e@failed-list))))))))) (lambda (i8a2@f) (if (procedure? i8a2@f) i8a2@f (assertion-violation 'file-locator '"not a procedure" i8a2@f))))) (set! i97e@i7bd@file-locator i7bd@file-locator) (set! i7bf@serialize-all (lambda (i8a4@serialize i8a5@compile) (letrec* ((i8a9@library-desc (lambda (i8ac@x) (list (i779@library-id i8ac@x) (i77d@library-name i8ac@x))))) (for-each (lambda (i8aa@x) (if (i7ad@library-source-file-name i8aa@x) (i8a4@serialize (i7ad@library-source-file-name i8aa@x) (list (i779@library-id i8aa@x) (i77d@library-name i8aa@x) (i781@library-version i8aa@x) (map i8a9@library-desc (i785@library-imp* i8aa@x)) (map i8a9@library-desc (i789@library-vis* i8aa@x)) (map i8a9@library-desc (i78d@library-inv* i8aa@x)) (i791@library-subst i8aa@x) (i795@library-env i8aa@x) (i8a5@compile (i7a1@library-visit-code i8aa@x)) (i8a5@compile (i7a5@library-invoke-code i8aa@x)) (i7a9@library-visible? i8aa@x))) (void))) ((i76b@current-library-collection)))))) (set! i97f@i7bf@serialize-all i7bf@serialize-all) (set! i7c1@current-precompiled-library-loader (i6c1@i59f@make-parameter (lambda (i8ae@filename i8af@sk) '#f))) (set! i980@i7c1@current-precompiled-library-loader i7c1@current-precompiled-library-loader) (set! i7c3@try-load-from-file (lambda (i8b2@filename) ((i7c1@current-precompiled-library-loader) i8b2@filename (lambda i8d8 (let ((i8d9 (length i8d8))) (if (= i8d9 '11) (apply (lambda (i8b4@id i8b5@name i8b6@ver i8b7@imp* i8b8@vis* i8b9@inv* i8ba@exp-subst i8bb@exp-env i8bc@visit-proc i8bd@invoke-proc i8be@visible?) (let i8cc@f ((i8ca@deps (append i8b7@imp* i8b8@vis* i8b9@inv*))) (if (null? i8ca@deps) (begin (i7d7@install-library i8b4@id i8b5@name i8b6@ver i8b7@imp* i8b8@vis* i8b9@inv* i8ba@exp-subst i8bb@exp-env i8bc@visit-proc i8bd@invoke-proc '#f '#f i8be@visible? '#f) '#t) (let ((i8ce@d (car i8ca@deps))) (let ((i8d0@label (car i8ce@d)) (i8d1@dname (cadr i8ce@d))) (let ((i8d4@l (i7cd@find-library-by-name i8d1@dname))) (if (and (i777@library? i8d4@l) (eq? i8d0@label (i779@library-id i8d4@l))) (i8cc@f (cdr i8ca@deps)) (begin (if i6bb@i593@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" i8b5@name i8d1@dname i8b2@filename i8d4@l i8d0@label (i779@library-id i8d4@l)) (void)) '#f)))))))) i8d8) (if (>= i8d9 '0) (apply (lambda i8d6@others '#f) i8d8) (error 'apply '"invalid arg count")))))))) (set! i981@i7c3@try-load-from-file i7c3@try-load-from-file) (set! i7c5@library-loader (i6c1@i59f@make-parameter (lambda (i8da@x) (let ((i8dc@file-name ((i7bd@file-locator) i8da@x))) (if (not i8dc@file-name) (assertion-violation '#f '"cannot file library" i8da@x) (or (i7c3@try-load-from-file i8dc@file-name) ((i7c7@current-library-expander) (i6c0@i59d@read-library-source-file i8dc@file-name) i8dc@file-name (lambda (i8de@name) (if (not (fast-equal? i8de@name i8da@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (i8e4@i8e1 i8e5@i8e3) (let ((i8e8@e i8e5@i8e3) (i8e9@p i8e4@i8e1)) (begin (display '"expected to find library " i8e9@p) (write i8da@x i8e9@p) (display '" in file " i8e9@p) (display i8dc@file-name i8e9@p) (display '", found " i8e9@p) (write i8de@name i8e9@p) (display '" instead" i8e9@p) (i8e8@e)))))) (void)))))))) (lambda (i8ec@f) (if (procedure? i8ec@f) i8ec@f (assertion-violation 'library-locator '"not a procedure" i8ec@f))))) (set! i982@i7c5@library-loader i7c5@library-loader) (set! i7c7@current-library-expander (i6c1@i59f@make-parameter (lambda (i8ee@x) (assertion-violation 'library-expander '"not initialized")) (lambda (i8f0@f) (if (procedure? i8f0@f) i8f0@f (assertion-violation 'library-expander '"not a procedure" i8f0@f))))) (set! i983@i7c7@current-library-expander i7c7@current-library-expander) (set! i7c9@external-pending-libraries (i6c1@i59f@make-parameter '())) (set! i984@i7c9@external-pending-libraries i7c9@external-pending-libraries) (set! i7cb@find-external-library (lambda (i8f2@name) (begin (if (member i8f2@name (i7c9@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" i8f2@name) (void)) (let ((i8f8@i8f5 i7c9@external-pending-libraries) (i8f9@i8f7 (cons i8f2@name (i7c9@external-pending-libraries)))) (let ((i8fc@swap (lambda () (let ((i8fe@t (i8f8@i8f5))) (begin (i8f8@i8f5 i8f9@i8f7) (set! i8f9@i8f7 i8fe@t)))))) (dynamic-wind i8fc@swap (lambda () (begin ((i7c5@library-loader) i8f2@name) (or (i7b5@find-library-by (lambda (i900@x) (fast-equal? (i77d@library-name i900@x) i8f2@name))) (assertion-violation '#f '"handling external library did not yield the correct library" i8f2@name)))) i8fc@swap)))))) (set! i985@i7cb@find-external-library i7cb@find-external-library) (set! i7cd@find-library-by-name (lambda (i902@name) (or (i7b5@find-library-by (lambda (i904@x) (fast-equal? (i77d@library-name i904@x) i902@name))) (i7cb@find-external-library i902@name)))) (set! i986@i7cd@find-library-by-name i7cd@find-library-by-name) (set! i7cf@library-exists? (lambda (i906@name) (and (i7b5@find-library-by (lambda (i908@x) (fast-equal? (i77d@library-name i908@x) i906@name))) '#t))) (set! i987@i7cf@library-exists? i7cf@library-exists?) (set! i7d1@find-library-by-spec/die (lambda (i90a@spec) (let ((i90c@id (car i90a@spec))) (or (i7b5@find-library-by (lambda (i90e@x) (eq? i90c@id (i779@library-id i90e@x)))) (assertion-violation '#f '"cannot find library with required spec" i90a@spec))))) (set! i988@i7d1@find-library-by-spec/die i7d1@find-library-by-spec/die) (set! i7d3@label->binding-table (make-eq-hashtable)) (set! i989@i7d3@label->binding-table i7d3@label->binding-table) (set! i7d5@install-library-record (lambda (i910@lib) (begin (let ((i912@exp-env (i795@library-env i910@lib))) (for-each (lambda (i914@x) (let ((i916@label (car i914@x)) (i917@binding (cdr i914@x))) (let ((i91a@binding (let ((i91c@t (car i917@binding))) (if (memv i91c@t '(global)) (cons 'global (cons i910@lib (cdr i917@binding))) (if (memv i91c@t '(global-macro)) (cons 'global-macro (cons i910@lib (cdr i917@binding))) (if (memv i91c@t '(global-macro!)) (cons 'global-macro! (cons i910@lib (cdr i917@binding))) i917@binding)))))) (begin (if (hashtable-ref i7d3@label->binding-table i916@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" i916@label (hashtable-ref i7d3@label->binding-table i916@label '#f) i91a@binding) (exit)) (void)) (hashtable-set! i7d3@label->binding-table i916@label i91a@binding))))) i912@exp-env)) ((i76b@current-library-collection) i910@lib)))) (set! i98a@i7d5@install-library-record i7d5@install-library-record) (set! i7d7@install-library (lambda (i91e@id i91f@name i920@ver i921@imp* i922@vis* i923@inv* i924@exp-subst i925@exp-env i926@visit-proc i927@invoke-proc i928@visit-code i929@invoke-code i92a@visible? i92b@source-file-name) (let ((i93a@imp-lib* (map i7d1@find-library-by-spec/die i921@imp*)) (i93b@vis-lib* (map i7d1@find-library-by-spec/die i922@vis*)) (i93c@inv-lib* (map i7d1@find-library-by-spec/die i923@inv*))) (begin (if (not (and (symbol? i91e@id) (list? i91f@name) (list? i920@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" i91e@id i91f@name i920@ver) (void)) (if (i7cf@library-exists? i91f@name) (assertion-violation 'install-library '"library is already installed" i91f@name) (void)) (let ((i940@lib (make-simple-struct 'library '15 (list i91e@id i91f@name i920@ver i93a@imp-lib* i93b@vis-lib* i93c@inv-lib* i924@exp-subst i925@exp-env i926@visit-proc i927@invoke-proc i928@visit-code i929@invoke-code i92a@visible? i92b@source-file-name)))) (i7d5@install-library-record i940@lib)))))) (set! i98b@i7d7@install-library i7d7@install-library) (set! i7d9@imported-label->binding (lambda (i942@lab) (hashtable-ref i7d3@label->binding-table i942@lab '#f))) (set! i98c@i7d9@imported-label->binding i7d9@imported-label->binding) (set! i7db@invoke-library (lambda (i944@lib) (let ((i946@invoke (i79d@library-invoke-state i944@lib))) (if (procedure? i946@invoke) (begin (i79f@set-library-invoke-state! i944@lib (lambda () (assertion-violation 'invoke '"circularity detected" i944@lib))) (for-each i7db@invoke-library (i78d@library-inv* i944@lib)) (i79f@set-library-invoke-state! i944@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" i944@lib))) (i946@invoke) (i79f@set-library-invoke-state! i944@lib '#t)) (void))))) (set! i98d@i7db@invoke-library i7db@invoke-library) (set! i7dd@visit-library (lambda (i948@lib) (let ((i94a@visit (i799@library-visit-state i948@lib))) (if (procedure? i94a@visit) (begin (i79b@set-library-visit-state! i948@lib (lambda () (assertion-violation 'visit '"circularity detected" i948@lib))) (for-each i7db@invoke-library (i789@library-vis* i948@lib)) (i79b@set-library-visit-state! i948@lib (lambda () (assertion-violation 'invoke '"first visit did not return" i948@lib))) (i94a@visit) (i79b@set-library-visit-state! i948@lib '#t)) (void))))) (set! i98e@i7dd@visit-library i7dd@visit-library) (set! i7df@invoke-library-by-spec (lambda (i94c@spec) (i7db@invoke-library (i7d1@find-library-by-spec/die i94c@spec)))) (set! i98f@i7df@invoke-library-by-spec i7df@invoke-library-by-spec) (set! i7e1@installed-libraries (lambda i954 (let ((i955 (length i954))) (if (= i955 '1) (apply (lambda (i94e@all?) (let i952@f ((i950@ls ((i76b@current-library-collection)))) (if (null? i950@ls) '() (if (or i94e@all? (i7a9@library-visible? (car i950@ls))) (cons (car i950@ls) (i952@f (cdr i950@ls))) (i952@f (cdr i950@ls)))))) i954) (if (= i955 '0) (apply (lambda () (i7e1@installed-libraries '#f)) i954) (error 'apply '"invalid arg count")))))) (set! i990@i7e1@installed-libraries i7e1@installed-libraries) (set! i7e3@library-spec (lambda (i956@x) (begin (if (not (i777@library? i956@x)) (assertion-violation 'library-spec '"not a library" i956@x) (void)) (list (i779@library-id i956@x) (i77d@library-name i956@x) (i781@library-version i956@x))))) (set! i991@i7e3@library-spec i7e3@library-spec) (void))
(begin (set! i995@build-global-define (unspecified)) (set! ia06@build-lambda (unspecified)) (set! ia08@build-case-lambda (unspecified)) (set! ia36@build-sequence (unspecified)) (set! ia38@build-void (unspecified)) (set! ia3a@build-letrec (unspecified)) (set! ia3c@build-let (unspecified)) (set! ia3e@build-named-let (unspecified)) (set! ia40@build-letrec* (unspecified)) (set! ia42@build-library-letrec* (unspecified)) (set! ia44@build-receive (unspecified)) (set! i995@build-global-define (lambda (ia45@x) (ia38@build-void))) (set! iad3@i995@build-global-define i995@build-global-define) (set! ia06@build-lambda (lambda (ia47@ae ia48@vars ia49@exp) (list 'lambda ia48@vars ia49@exp))) (set! iad4@ia06@build-lambda ia06@build-lambda) (set! ia08@build-case-lambda (lambda (ia4d@ae ia4e@vars* ia4f@exp*) (letrec* ((ia54@build-error (lambda (ia8b@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (ia56@build-pred (lambda (ia73@ae ia74@n ia75@vars) (call-with-values (lambda () (let ia81@f ((ia7d@vars ia75@vars) (ia7e@count '0)) (if (pair? ia7d@vars) (ia81@f (cdr ia7d@vars) (+ ia7e@count '1)) (if (null? ia7d@vars) (values ia7e@count '=) (values ia7e@count '>=))))) (lambda (ia83@ia7a ia84@ia7c) (let ((ia87@pred ia84@ia7c) (ia88@count ia83@ia7a)) (list (list 'primitive ia87@pred) ia74@n (list 'quote ia88@count))))))) (ia58@build-apply (lambda (ia6b@ae ia6c@g ia6d@vars ia6e@exp) (list '(primitive apply) (ia06@build-lambda ia6b@ae ia6d@vars ia6e@exp) ia6c@g))) (ia5a@expand-case-lambda (lambda (ia5b@ae ia5c@vars ia5d@exp*) (let ((ia61@g (gensym)) (ia62@n (gensym))) (list 'lambda ia61@g (ia3c@build-let ia5b@ae (list ia62@n) (list (list '(primitive length) ia61@g)) (let ia69@f ((ia65@vars* ia4e@vars*) (ia66@exp* ia5d@exp*)) (if (null? ia65@vars*) (ia54@build-error ia5b@ae) (list 'if (ia56@build-pred ia5b@ae ia62@n (car ia65@vars*)) (ia58@build-apply ia5b@ae ia61@g (car ia65@vars*) (car ia66@exp*)) (ia69@f (cdr ia65@vars*) (cdr ia66@exp*))))))))))) (if (= (length ia4f@exp*) '1) (ia06@build-lambda ia4d@ae (car ia4e@vars*) (car ia4f@exp*)) (ia5a@expand-case-lambda ia4d@ae ia4e@vars* ia4f@exp*))))) (set! iad5@ia08@build-case-lambda ia08@build-case-lambda) (set! ia36@build-sequence (lambda (ia8d@ae ia8e@exps) (let ia93@loop ((ia91@exps ia8e@exps)) (if (null? (cdr ia91@exps)) (car ia91@exps) (if (equal? (car ia91@exps) (ia38@build-void)) (ia93@loop (cdr ia91@exps)) (cons 'begin ia91@exps)))))) (set! iad6@ia36@build-sequence ia36@build-sequence) (set! ia38@build-void (lambda () '((primitive void)))) (set! iad7@ia38@build-void ia38@build-void) (set! ia3a@build-letrec (lambda (ia95@ae ia96@vars ia97@val-exps ia98@body-exp) (if (null? ia96@vars) ia98@body-exp (list 'letrec (map list ia96@vars ia97@val-exps) ia98@body-exp)))) (set! iad8@ia3a@build-letrec ia3a@build-letrec) (set! ia3c@build-let (lambda (ia9d@ae ia9e@vars ia9f@val-exps iaa0@body-exp) (if (null? ia9e@vars) iaa0@body-exp (list 'let (map list ia9e@vars ia9f@val-exps) iaa0@body-exp)))) (set! iad9@ia3c@build-let ia3c@build-let) (set! ia3e@build-named-let (lambda (iaa5@ae iaa6@name iaa7@vars iaa8@val-exps iaa9@body-exp) (list 'let iaa6@name (map list iaa7@vars iaa8@val-exps) iaa9@body-exp))) (set! iada@ia3e@build-named-let ia3e@build-named-let) (set! ia40@build-letrec* (lambda (iaaf@ae iab0@vars iab1@val-exps iab2@body-exp) (if (null? iab0@vars) iab2@body-exp (list 'letrec* (map list iab0@vars iab1@val-exps) iab2@body-exp)))) (set! iadb@ia40@build-letrec* ia40@build-letrec*) (set! ia42@build-library-letrec* (lambda (iab7@ae iab8@name iab9@vars iaba@locs iabb@val-exps iabc@body-exp) (cons 'begin (append (map (lambda (iac3@var) (cons 'set! (cons iac3@var '((unspecified))))) iab9@vars) (append (apply append (map (lambda (iac5@var iac6@loc iac7@val-exp) (list (list 'set! iac5@var iac7@val-exp) (list 'set! iac6@loc iac5@var))) iab9@vars iaba@locs iabb@val-exps)) (list iabc@body-exp)))))) (set! iadc@ia42@build-library-letrec* ia42@build-library-letrec*) (set! ia44@build-receive (lambda (iacb@ae iacc@vars iacd@producer iace@body*) (begin (display '"************** in ") (cons 'receive (cons iacc@vars (cons iacd@producer iace@body*)))))) (set! iadd@ia44@build-receive ia44@build-receive) (void))
(begin (set! iaec@file-options-macro (unspecified)) (set! iaee@set-cons (unspecified)) (set! iaf0@set-union (unspecified)) (set! iaf5@top-mark* (unspecified)) (set! iaf7@top-marked? (unspecified)) (set! iaf9@gen-lexical (unspecified)) (set! iafb@gen-global (unspecified)) (set! iafd@gen-label (unspecified)) (set! iaff@gen-top-level-label (unspecified)) (set! ib01@gen-define-label+loc (unspecified)) (set! ib03@gen-define-label (unspecified)) (set! ib0d@rib? (unspecified)) (set! ib0f@rib-sym* (unspecified)) (set! ib11@set-rib-sym*! (unspecified)) (set! ib13@rib-mark** (unspecified)) (set! ib15@set-rib-mark**! (unspecified)) (set! ib17@rib-label* (unspecified)) (set! ib19@set-rib-label*! (unspecified)) (set! ib1b@rib-sealed/freq (unspecified)) (set! ib1d@set-rib-sealed/freq! (unspecified)) (set! ib1f@rib-cache (unspecified)) (set! ib21@set-rib-cache! (unspecified)) (set! ib23@dummy (unspecified)) (set! ib25@make-empty-rib (unspecified)) (set! ib27@extend-rib! (unspecified)) (set! ib29@extend-rib/nc! (unspecified)) (set! ib2b@make-rib-map (unspecified)) (set! ib2d@seal-rib! (unspecified)) (set! ib2f@unseal-rib! (unspecified)) (set! ib31@make-full-rib (unspecified)) (set! ib33@rp (unspecified)) (set! ib3d@stx? (unspecified)) (set! ib3f@stx-expr (unspecified)) (set! ib41@set-stx-expr! (unspecified)) (set! ib43@stx-mark* (unspecified)) (set! ib45@set-stx-mark*! (unspecified)) (set! ib47@stx-subst* (unspecified)) (set! ib49@set-stx-subst*! (unspecified)) (set! ib4b@stx-ae* (unspecified)) (set! ib4d@set-stx-ae*! (unspecified)) (set! ib4f@dummy (unspecified)) (set! ib51@datum->stx (unspecified)) (set! ib53@gen-mark (unspecified)) (set! ib55@anti-mark (unspecified)) (set! ib57@anti-mark? (unspecified)) (set! ib59@mkstx (unspecified)) (set! ib5b@add-mark (unspecified)) (set! ib5d@add-subst (unspecified)) (set! ib5f@syntax-kind? (unspecified)) (set! ib61@syntax-vector->list (unspecified)) (set! ib63@syntax-pair? (unspecified)) (set! ib65@syntax-vector? (unspecified)) (set! ib67@syntax-null? (unspecified)) (set! ib69@syntax-list? (unspecified)) (set! ib6b@syntax-car (unspecified)) (set! ib6d@syntax-cdr (unspecified)) (set! ib6f@syntax->list (unspecified)) (set! ib71@id? (unspecified)) (set! ib73@id->sym (unspecified)) (set! ib75@bound-id=? (unspecified)) (set! ib77@free-id=? (unspecified)) (set! ib79@valid-bound-ids? (unspecified)) (set! ib7b@distinct-bound-ids? (unspecified)) (set! ib7d@bound-id-member? (unspecified)) (set! ib7f@self-evaluating? (unspecified)) (set! ib81@strip-annotations (unspecified)) (set! ib83@strip (unspecified)) (set! ib85@stx->datum (unspecified)) (set! ib87@id->label (unspecified)) (set! ib89@label->binding (unspecified)) (set! ib8b@make-binding (unspecified)) (set! ib8d@binding-type (unspecified)) (set! ib8f@binding-value (unspecified)) (set! ib91@raise-unbound-error (unspecified)) (set! ib93@syntax-type (unspecified)) (set! iba1@sanitize-binding (unspecified)) (set! iba3@make-variable-transformer (unspecified)) (set! iba5@variable-transformer? (unspecified)) (set! iba7@variable-transformer-procedure (unspecified)) (set! iba9@make-eval-transformer (unspecified)) (set! icfa@parse-define (unspecified)) (set! icfc@parse-define-syntax (unspecified)) (set! icfe@scheme-stx-hashtable (unspecified)) (set! id00@scheme-stx (unspecified)) (set! id02@lexical-var (unspecified)) (set! id04@lexical-mutable? (unspecified)) (set! id06@set-lexical-mutable! (unspecified)) (set! id08@add-lexical (unspecified)) (set! id0a@add-lexicals (unspecified)) (set! id0c@letrec-helper (unspecified)) (set! id0e@let-transformer (unspecified)) (set! id10@letrec-transformer (unspecified)) (set! id12@letrec*-transformer (unspecified)) (set! id14@fluid-let-syntax-transformer (unspecified)) (set! id16@type-descriptor-transformer (unspecified)) (set! id18@record-type-descriptor-transformer (unspecified)) (set! id1a@record-constructor-descriptor-transformer (unspecified)) (set! id1c@when-macro (unspecified)) (set! id1e@unless-macro (unspecified)) (set! id20@if-transformer (unspecified)) (set! id22@and-transformer (unspecified)) (set! id24@or-transformer (unspecified)) (set! id26@case-macro (unspecified)) (set! id28@quote-transformer (unspecified)) (set! id2a@case-lambda-transformer (unspecified)) (set! id2c@lambda-transformer (unspecified)) (set! id2e@bless (unspecified)) (set! id30@with-syntax-macro (unspecified)) (set! id32@invalid-fmls-error (unspecified)) (set! id34@let-macro (unspecified)) (set! id36@let-values-macro (unspecified)) (set! id38@let*-values-macro (unspecified)) (set! id3a@trace-lambda-macro (unspecified)) (set! id3c@trace-define-macro (unspecified)) (set! id3e@trace-define-syntax-macro (unspecified)) (set! id40@trace-let/rec-syntax (unspecified)) (set! id42@trace-let-syntax-macro (unspecified)) (set! id44@trace-letrec-syntax-macro (unspecified)) (set! id46@guard-macro (unspecified)) (set! id48@define-enumeration-macro (unspecified)) (set! id4a@time-macro (unspecified)) (set! id4c@delay-macro (unspecified)) (set! id4e@assert-macro (unspecified)) (set! id50@endianness-macro (unspecified)) (set! id52@identifier-syntax-macro (unspecified)) (set! id54@do-macro (unspecified)) (set! id56@let*-macro (unspecified)) (set! id58@or-macro (unspecified)) (set! id5a@and-macro (unspecified)) (set! id5c@cond-macro (unspecified)) (set! id5e@do-include (unspecified)) (set! id60@include-macro (unspecified)) (set! id62@include-into-macro (unspecified)) (set! id64@syntax-rules-macro (unspecified)) (set! id66@quasiquote-macro (unspecified)) (set! id68@quasisyntax-macro (unspecified)) (set! id6a@define-struct-macro (unspecified)) (set! id6c@define-record-type-macro (unspecified)) (set! id6e@define-condition-type-macro (unspecified)) (set! id70@incorrect-usage-macro (unspecified)) (set! id72@parameterize-macro (unspecified)) (set! id74@foreign-call-transformer (unspecified)) (set! id76@convert-pattern (unspecified)) (set! id78@syntax-dispatch (unspecified)) (set! id7a@ellipsis? (unspecified)) (set! id7c@underscore? (unspecified)) (set! id7e@verify-literals (unspecified)) (set! id80@syntax-case-transformer (unspecified)) (set! id82@ellipsis-map (unspecified)) (set! id84@syntax-transformer (unspecified)) (set! id86@core-macro-transformer (unspecified)) (set! id88@symbol-macro (unspecified)) (set! id8a@macro-transformer (unspecified)) (set! id8c@local-macro-transformer (unspecified)) (set! id8e@do-macro-call (unspecified)) (set! id90@chi-macro (unspecified)) (set! id92@chi-local-macro (unspecified)) (set! id94@chi-global-macro (unspecified)) (set! id96@chi-expr* (unspecified)) (set! id98@chi-application (unspecified)) (set! id9a@chi-expr (unspecified)) (set! id9c@chi-set! (unspecified)) (set! id9e@verify-formals (unspecified)) (set! ida0@chi-lambda-clause (unspecified)) (set! ida2@chi-lambda-clause* (unspecified)) (set! ida4@chi-defun (unspecified)) (set! ida6@chi-rhs (unspecified)) (set! ida8@expand-interaction-rhs*/init* (unspecified)) (set! idaa@chi-rhs* (unspecified)) (set! idac@find-bound=? (unspecified)) (set! idae@find-dups (unspecified)) (set! idb0@chi-internal (unspecified)) (set! idb2@parse-module (unspecified)) (set! idbc@module-interface? (unspecified)) (set! idbe@module-interface-first-mark (unspecified)) (set! idc0@set-module-interface-first-mark! (unspecified)) (set! idc2@module-interface-exp-id-vec (unspecified)) (set! idc4@set-module-interface-exp-id-vec! (unspecified)) (set! idc6@module-interface-exp-lab-vec (unspecified)) (set! idc8@set-module-interface-exp-lab-vec! (unspecified)) (set! idca@dummy (unspecified)) (set! idcc@module-interface-exp-id* (unspecified)) (set! idce@chi-internal-module (unspecified)) (set! idd0@chi-body* (unspecified)) (set! idd2@expand-transformer (unspecified)) (set! idd4@parse-exports (unspecified)) (set! idd6@parse-library-name (unspecified)) (set! idd8@parse-library (unspecified)) (set! idda@parse-import-spec* (unspecified)) (set! iddc@make-top-rib (unspecified)) (set! idde@make-collector (unspecified)) (set! ide0@inv-collector (unspecified)) (set! ide2@vis-collector (unspecified)) (set! ide4@imp-collector (unspecified)) (set! ide6@chi-library-internal (unspecified)) (set! ide8@chi-interaction-expr (unspecified)) (set! idea@library-body-expander (unspecified)) (set! idec@core-library-expander (unspecified)) (set! idee@parse-top-level-program (unspecified)) (set! idf0@top-level-expander (unspecified)) (set! idf2@rp (unspecified)) (set! idfc@env? (unspecified)) (set! idfe@env-names (unspecified)) (set! ie00@set-env-names! (unspecified)) (set! ie02@env-labels (unspecified)) (set! ie04@set-env-labels! (unspecified)) (set! ie06@env-itc (unspecified)) (set! ie08@set-env-itc! (unspecified)) (set! ie0a@dummy (unspecified)) (set! ie0c@rp (unspecified)) (set! ie16@interaction-env? (unspecified)) (set! ie18@interaction-env-rib (unspecified)) (set! ie1a@set-interaction-env-rib! (unspecified)) (set! ie1c@interaction-env-r (unspecified)) (set! ie1e@set-interaction-env-r! (unspecified)) (set! ie20@interaction-env-locs (unspecified)) (set! ie22@set-interaction-env-locs! (unspecified)) (set! ie24@dummy (unspecified)) (set! ie26@interaction-environment-symbols (unspecified)) (set! ie28@environment-bindings (unspecified)) (set! ie2a@parse-binding (unspecified)) (set! ie2c@environment? (unspecified)) (set! ie2e@environment-symbols (unspecified)) (set! ie30@environment (unspecified)) (set! ie32@null-environment (unspecified)) (set! ie34@scheme-report-environment (unspecified)) (set! ie36@expand (unspecified)) (set! ie38@eval (unspecified)) (set! ie3a@library-expander (unspecified)) (set! ie3c@boot-library-expand (unspecified)) (set! ie3e@rev-map-append (unspecified)) (set! ie40@build-exports (unspecified)) (set! ie42@make-export-subst (unspecified)) (set! ie44@make-export-env/macros (unspecified)) (set! ie46@generate-temporaries (unspecified)) (set! ie48@free-identifier=? (unspecified)) (set! ie4a@bound-identifier=? (unspecified)) (set! ie4c@make-source-condition (unspecified)) (set! ie4e@extract-position-condition (unspecified)) (set! ie50@expression-position (unspecified)) (set! ie52@assertion-error (unspecified)) (set! ie54@syntax-error (unspecified)) (set! ie56@syntax-violation* (unspecified)) (set! ie58@syntax-violation (unspecified)) (set! ie5a@identifier? (unspecified)) (set! ie5c@datum->syntax (unspecified)) (set! ie5e@syntax->datum (unspecified)) (set! ie60@ungensym-all (unspecified)) (set! ie62@compile-r6rs-top-level (unspecified)) (set! ie64@pre-compile-r6rs-top-level (unspecified)) (set! ie66@interaction-environment (unspecified)) (set! ie68@top-level-context (unspecified)) (set! iaec@file-options-macro (lambda (ie69@x) (letrec* ((ie6c@valid-option? (lambda (ie75@x) (and (ib71@id? ie75@x) (memq (ib73@id->sym ie75@x) '(no-fail no-create no-truncate)))))) (let ((ie6d@t ie69@x)) (let ((ie6f@ls/false (id78@syntax-dispatch ie6d@t '(_ . each-any)))) (if (and ie6f@ls/false (apply (lambda (ie71@opt*) (for-all ie6c@valid-option? ie71@opt*)) ie6f@ls/false)) (apply (lambda (ie73@opt*) (id2e@bless (list 'make-file-options (list 'quote ie73@opt*)))) ie6f@ls/false) (ie58@syntax-violation '#f '"invalid syntax" ie6d@t))))))) (set! i27bf@iaec@file-options-macro iaec@file-options-macro) (set! iaee@set-cons (lambda (ie77@x ie78@ls) (if (memq ie77@x ie78@ls) ie78@ls (cons ie77@x ie78@ls)))) (set! i27c0@iaee@set-cons iaee@set-cons) (set! iaf0@set-union (lambda (ie7b@ls1 ie7c@ls2) (if (null? ie7b@ls1) ie7c@ls2 (if (memq (car ie7b@ls1) ie7c@ls2) (iaf0@set-union (cdr ie7b@ls1) ie7c@ls2) (cons (car ie7b@ls1) (iaf0@set-union (cdr ie7b@ls1) ie7c@ls2)))))) (set! i27c1@iaf0@set-union iaf0@set-union) (set! iaf5@top-mark* '(top)) (set! i27c2@iaf5@top-mark* iaf5@top-mark*) (set! iaf7@top-marked? (lambda (ie7f@m*) (memq 'top ie7f@m*))) (set! i27c3@iaf7@top-marked? iaf7@top-marked?) (set! iaf9@gen-lexical (lambda (ie81@sym) (if (symbol? ie81@sym) (gensym ie81@sym) (if (ib3d@stx? ie81@sym) (iaf9@gen-lexical (ib73@id->sym ie81@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" ie81@sym))))) (set! i27c4@iaf9@gen-lexical iaf9@gen-lexical) (set! iafb@gen-global (lambda (ie83@x) (iaf9@gen-lexical ie83@x))) (set! i27c5@iafb@gen-global iafb@gen-global) (set! iafd@gen-label (lambda (ie85@_) (gensym))) (set! i27c6@iafd@gen-label iafd@gen-label) (set! iaff@gen-top-level-label (lambda (ie87@id ie88@rib) (letrec* ((ie8c@find (lambda (ie97@sym ie98@mark* ie99@sym* ie9a@mark** ie9b@label*) (and (pair? ie99@sym*) (if (and (eq? ie97@sym (car ie99@sym*)) (same-marks? ie98@mark* (car ie9a@mark**))) (car ie9b@label*) (ie8c@find ie97@sym ie98@mark* (cdr ie99@sym*) (cdr ie9a@mark**) (cdr ie9b@label*))))))) (let ((ie8d@sym (ib73@id->sym ie87@id)) (ie8e@mark* (ib43@stx-mark* ie87@id))) (let ((ie91@sym* (ib0f@rib-sym* ie88@rib))) (let ((ie93@t (and (memq ie8d@sym (ib0f@rib-sym* ie88@rib)) (ie8c@find ie8d@sym ie8e@mark* ie91@sym* (ib13@rib-mark** ie88@rib) (ib17@rib-label* ie88@rib))))) (if ie93@t ((lambda (ie95@label) (if (i98c@i7d9@imported-label->binding ie95@label) (gensym) ie95@label)) ie93@t) (gensym)))))))) (set! i27c7@iaff@gen-top-level-label iaff@gen-top-level-label) (set! ib01@gen-define-label+loc (lambda (iea1@id iea2@rib) (let ((iea5@t (ie68@top-level-context))) (if iea5@t ((lambda (iea7@env) (let ((iea9@label (iaff@gen-top-level-label iea1@id iea2@rib)) (ieaa@locs (ie20@interaction-env-locs iea7@env))) (values iea9@label (let ((iead@t (assq iea9@label ieaa@locs))) (if iead@t (cdr iead@t) (let ((ieaf@loc (iaf9@gen-lexical iea1@id))) (begin (ie22@set-interaction-env-locs! iea7@env (cons (cons iea9@label ieaf@loc) ieaa@locs)) ieaf@loc))))))) iea5@t) (values (gensym) (iaf9@gen-lexical iea1@id)))))) (set! i27c8@ib01@gen-define-label+loc ib01@gen-define-label+loc) (set! ib03@gen-define-label (lambda (ieb1@id ieb2@rib) (if (ie68@top-level-context) (iaff@gen-top-level-label ieb1@id ieb2@rib) (gensym)))) (set! i27c9@ib03@gen-define-label ib03@gen-define-label) (set! ib0d@rib? (lambda (ieb5@x) (and (simple-struct? ieb5@x) (eq? (simple-struct-name ieb5@x) 'rib)))) (set! i27ca@ib0d@rib? ib0d@rib?) (set! ib0f@rib-sym* (lambda (ieb7@x) (simple-struct-ref ieb7@x '0))) (set! i27cb@ib0f@rib-sym* ib0f@rib-sym*) (set! ib11@set-rib-sym*! (lambda (ieb9@x ieba@val) (simple-struct-set! ieb9@x '0 ieba@val))) (set! i27cc@ib11@set-rib-sym*! ib11@set-rib-sym*!) (set! ib13@rib-mark** (lambda (iebd@x) (simple-struct-ref iebd@x '1))) (set! i27cd@ib13@rib-mark** ib13@rib-mark**) (set! ib15@set-rib-mark**! (lambda (iebf@x iec0@val) (simple-struct-set! iebf@x '1 iec0@val))) (set! i27ce@ib15@set-rib-mark**! ib15@set-rib-mark**!) (set! ib17@rib-label* (lambda (iec3@x) (simple-struct-ref iec3@x '2))) (set! i27cf@ib17@rib-label* ib17@rib-label*) (set! ib19@set-rib-label*! (lambda (iec5@x iec6@val) (simple-struct-set! iec5@x '2 iec6@val))) (set! i27d0@ib19@set-rib-label*! ib19@set-rib-label*!) (set! ib1b@rib-sealed/freq (lambda (iec9@x) (simple-struct-ref iec9@x '3))) (set! i27d1@ib1b@rib-sealed/freq ib1b@rib-sealed/freq) (set! ib1d@set-rib-sealed/freq! (lambda (iecb@x iecc@val) (simple-struct-set! iecb@x '3 iecc@val))) (set! i27d2@ib1d@set-rib-sealed/freq! ib1d@set-rib-sealed/freq!) (set! ib1f@rib-cache (lambda (iecf@x) (simple-struct-ref iecf@x '4))) (set! i27d3@ib1f@rib-cache ib1f@rib-cache) (set! ib21@set-rib-cache! (lambda (ied1@x ied2@val) (simple-struct-set! ied1@x '4 ied2@val))) (set! i27d4@ib21@set-rib-cache! ib21@set-rib-cache!) (set! ib23@dummy '3) (set! i27d5@ib23@dummy ib23@dummy) (set! ib25@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! i27d6@ib25@make-empty-rib ib25@make-empty-rib) (set! ib27@extend-rib! (lambda (ied5@rib ied6@id ied7@label) (letrec* ((iedc@find (lambda (iee9@sym ieea@mark* ieeb@sym* ieec@mark** ieed@label*) (and (pair? ieeb@sym*) (if (and (eq? iee9@sym (car ieeb@sym*)) (same-marks? ieea@mark* (car ieec@mark**))) ieed@label* (iedc@find iee9@sym ieea@mark* (cdr ieeb@sym*) (cdr ieec@mark**) (cdr ieed@label*))))))) (begin (if (ib1b@rib-sealed/freq ied5@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" ied5@rib) (void)) (let ((iedd@sym (ib73@id->sym ied6@id)) (iede@mark* (ib43@stx-mark* ied6@id))) (let ((iee1@sym* (ib0f@rib-sym* ied5@rib))) (let ((iee3@t (and (memq iedd@sym (ib0f@rib-sym* ied5@rib)) (iedc@find iedd@sym iede@mark* iee1@sym* (ib13@rib-mark** ied5@rib) (ib17@rib-label* ied5@rib))))) (if iee3@t ((lambda (iee5@p) (if (not (eq? ied7@label (car iee5@p))) (if (ie68@top-level-context) (set-car! iee5@p ied7@label) (ie58@syntax-violation '#f '"multiple definitions of identifier" ied6@id)) (void))) iee3@t) (begin (if (ib1f@rib-cache ied5@rib) (hashtable-update! (ib1f@rib-cache ied5@rib) iedd@sym (lambda (iee7@e) (cons (cons iede@mark* ied7@label) iee7@e)) '()) (void)) (ib11@set-rib-sym*! ied5@rib (cons iedd@sym iee1@sym*)) (ib15@set-rib-mark**! ied5@rib (cons iede@mark* (ib13@rib-mark** ied5@rib))) (ib19@set-rib-label*! ied5@rib (cons ied7@label (ib17@rib-label* ied5@rib)))))))))))) (set! i27d7@ib27@extend-rib! ib27@extend-rib!) (set! ib29@extend-rib/nc! (lambda (ief3@rib ief4@id ief5@label) (let ((ief9@sym (ib73@id->sym ief4@id)) (iefa@mark* (ib43@stx-mark* ief4@id))) (let ((iefd@sym* (ib0f@rib-sym* ief3@rib))) (begin (if (ib1f@rib-cache ief3@rib) (hashtable-update! (ib1f@rib-cache ief3@rib) ief9@sym (lambda (ieff@e) (cons (cons iefa@mark* ief5@label) ieff@e)) '()) (void)) (ib11@set-rib-sym*! ief3@rib (cons ief9@sym iefd@sym*)) (ib15@set-rib-mark**! ief3@rib (cons iefa@mark* (ib13@rib-mark** ief3@rib))) (ib19@set-rib-label*! ief3@rib (cons ief5@label (ib17@rib-label* ief3@rib)))))))) (set! i27d8@ib29@extend-rib/nc! ib29@extend-rib/nc!) (set! ib2b@make-rib-map (lambda (if01@sym*) (let ((if03@ht (make-eq-hashtable))) (let if09@f ((if05@i '0) (if06@sym* if01@sym*)) (if (null? if06@sym*) if03@ht (begin (hashtable-update! if03@ht (car if06@sym*) (lambda (if0b@x) (cons if05@i if0b@x)) '()) (if09@f (+ if05@i '1) (cdr if06@sym*)))))))) (set! i27d9@ib2b@make-rib-map ib2b@make-rib-map) (set! ib2d@seal-rib! (lambda (if0d@rib) (let ((if0f@sym* (ib0f@rib-sym* if0d@rib))) (if (not (null? if0f@sym*)) (begin (ib11@set-rib-sym*! if0d@rib (list->vector if0f@sym*)) (ib15@set-rib-mark**! if0d@rib (list->vector (ib13@rib-mark** if0d@rib))) (ib19@set-rib-label*! if0d@rib (list->vector (ib17@rib-label* if0d@rib))) (ib1d@set-rib-sealed/freq! if0d@rib (ib2b@make-rib-map if0f@sym*))) (void))))) (set! i27da@ib2d@seal-rib! ib2d@seal-rib!) (set! ib2f@unseal-rib! (lambda (if11@rib) (if (ib1b@rib-sealed/freq if11@rib) (begin (ib1d@set-rib-sealed/freq! if11@rib '#f) (ib11@set-rib-sym*! if11@rib (vector->list (ib0f@rib-sym* if11@rib))) (ib15@set-rib-mark**! if11@rib (vector->list (ib13@rib-mark** if11@rib))) (ib19@set-rib-label*! if11@rib (vector->list (ib17@rib-label* if11@rib)))) (void)))) (set! i27db@ib2f@unseal-rib! ib2f@unseal-rib!) (set! ib31@make-full-rib (lambda (if13@id* if14@label*) (let ((if17@r (make-simple-struct 'rib '6 (list (map ib73@id->sym if13@id*) (map ib43@stx-mark* if13@id*) if14@label* '#f '#f)))) (begin (ib2d@seal-rib! if17@r) if17@r)))) (set! i27dc@ib31@make-full-rib ib31@make-full-rib) (set! ib33@rp (i6be@i599@make-record-printer 'stx (lambda (if19@x if1a@p if1b@wr) (begin (display '"#<syntax " if1a@p) (write (ib85@stx->datum if19@x) if1a@p) (let ((if1f@expr (ib3f@stx-expr if19@x))) (if (i6b5@i587@annotation? if1f@expr) (let ((if21@src (i6b6@i589@annotation-source if1f@expr))) (if (pair? if21@src) (begin (display '" [" if1a@p) (display (cdr if21@src) if1a@p) (display '" of " if1a@p) (display (car if21@src) if1a@p) (display '"]" if1a@p)) (void))) (void))) (display '">" if1a@p))))) (set! i27dd@ib33@rp ib33@rp) (set! ib3d@stx? (lambda (if23@x) (and (simple-struct? if23@x) (eq? (simple-struct-name if23@x) 'stx)))) (set! i27de@ib3d@stx? ib3d@stx?) (set! ib3f@stx-expr (lambda (if25@x) (simple-struct-ref if25@x '0))) (set! i27df@ib3f@stx-expr ib3f@stx-expr) (set! ib41@set-stx-expr! (lambda (if27@x if28@val) (simple-struct-set! if27@x '0 if28@val))) (set! i27e0@ib41@set-stx-expr! ib41@set-stx-expr!) (set! ib43@stx-mark* (lambda (if2b@x) (simple-struct-ref if2b@x '1))) (set! i27e1@ib43@stx-mark* ib43@stx-mark*) (set! ib45@set-stx-mark*! (lambda (if2d@x if2e@val) (simple-struct-set! if2d@x '1 if2e@val))) (set! i27e2@ib45@set-stx-mark*! ib45@set-stx-mark*!) (set! ib47@stx-subst* (lambda (if31@x) (simple-struct-ref if31@x '2))) (set! i27e3@ib47@stx-subst* ib47@stx-subst*) (set! ib49@set-stx-subst*! (lambda (if33@x if34@val) (simple-struct-set! if33@x '2 if34@val))) (set! i27e4@ib49@set-stx-subst*! ib49@set-stx-subst*!) (set! ib4b@stx-ae* (lambda (if37@x) (simple-struct-ref if37@x '3))) (set! i27e5@ib4b@stx-ae* ib4b@stx-ae*) (set! ib4d@set-stx-ae*! (lambda (if39@x if3a@val) (simple-struct-set! if39@x '3 if3a@val))) (set! i27e6@ib4d@set-stx-ae*! ib4d@set-stx-ae*!) (set! ib4f@dummy '3) (set! i27e7@ib4f@dummy ib4f@dummy) (set! ib51@datum->stx (lambda (if3d@id if3e@datum) (make-simple-struct 'stx '5 (list if3e@datum (ib43@stx-mark* if3d@id) (ib47@stx-subst* if3d@id) (ib4b@stx-ae* if3d@id))))) (set! i27e8@ib51@datum->stx ib51@datum->stx) (set! ib53@gen-mark (lambda () (string '#\m))) (set! i27e9@ib53@gen-mark ib53@gen-mark) (set! ib55@anti-mark '#f) (set! i27ea@ib55@anti-mark ib55@anti-mark) (set! ib57@anti-mark? not) (set! i27eb@ib57@anti-mark? ib57@anti-mark?) (set! ib59@mkstx (lambda (if41@e if42@m* if43@s* if44@ae*) (if (and (ib3d@stx? if41@e) (not (iaf7@top-marked? if42@m*))) (call-with-values (lambda () (join-wraps if42@m* if43@s* if44@ae* if41@e)) (lambda (if4f@if4a if50@if4c if51@if4e) (let ((if55@ae* if51@if4e) (if56@s* if50@if4c) (if57@m* if4f@if4a)) (make-simple-struct 'stx '5 (list (ib3f@stx-expr if41@e) if57@m* if56@s* if55@ae*))))) (make-simple-struct 'stx '5 (list if41@e if42@m* if43@s* if44@ae*))))) (set! i27ec@ib59@mkstx ib59@mkstx) (set! ib5b@add-mark (lambda (if5b@m if5c@e if5d@ae) (ib59@mkstx if5c@e (list if5b@m) '(shift) (list if5d@ae)))) (set! i27ed@ib5b@add-mark ib5b@add-mark) (set! ib5d@add-subst (lambda (if61@subst if62@e) (ib59@mkstx if62@e '() (list if61@subst) '()))) (set! i27ee@ib5d@add-subst ib5d@add-subst) (set! ib5f@syntax-kind? (lambda (if65@x if66@p?) (if (ib3d@stx? if65@x) (ib5f@syntax-kind? (ib3f@stx-expr if65@x) if66@p?) (if (i6b5@i587@annotation? if65@x) (ib5f@syntax-kind? (i6b7@i58b@annotation-expression if65@x) if66@p?) (if66@p? if65@x))))) (set! i27ef@ib5f@syntax-kind? ib5f@syntax-kind?) (set! ib61@syntax-vector->list (lambda (if69@x) (if (ib3d@stx? if69@x) (let ((if6b@ls (ib61@syntax-vector->list (ib3f@stx-expr if69@x))) (if6c@m* (ib43@stx-mark* if69@x)) (if6d@s* (ib47@stx-subst* if69@x)) (if6e@ae* (ib4b@stx-ae* if69@x))) (map (lambda (if73@x) (ib59@mkstx if73@x if6c@m* if6d@s* if6e@ae*)) if6b@ls)) (if (i6b5@i587@annotation? if69@x) (ib61@syntax-vector->list (i6b7@i58b@annotation-expression if69@x)) (if (vector? if69@x) (vector->list if69@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" if69@x)))))) (set! i27f0@ib61@syntax-vector->list ib61@syntax-vector->list) (set! ib63@syntax-pair? (lambda (if75@x) (ib5f@syntax-kind? if75@x pair?))) (set! i27f1@ib63@syntax-pair? ib63@syntax-pair?) (set! ib65@syntax-vector? (lambda (if77@x) (ib5f@syntax-kind? if77@x vector?))) (set! i27f2@ib65@syntax-vector? ib65@syntax-vector?) (set! ib67@syntax-null? (lambda (if79@x) (ib5f@syntax-kind? if79@x null?))) (set! i27f3@ib67@syntax-null? ib67@syntax-null?) (set! ib69@syntax-list? (lambda (if7b@x) (or (ib67@syntax-null? if7b@x) (and (ib63@syntax-pair? if7b@x) (ib69@syntax-list? (ib6d@syntax-cdr if7b@x)))))) (set! i27f4@ib69@syntax-list? ib69@syntax-list?) (set! ib6b@syntax-car (lambda (if7d@x) (if (ib3d@stx? if7d@x) (ib59@mkstx (ib6b@syntax-car (ib3f@stx-expr if7d@x)) (ib43@stx-mark* if7d@x) (ib47@stx-subst* if7d@x) (ib4b@stx-ae* if7d@x)) (if (i6b5@i587@annotation? if7d@x) (ib6b@syntax-car (i6b7@i58b@annotation-expression if7d@x)) (if (pair? if7d@x) (car if7d@x) (assertion-violation 'syntax-car '"BUG: not a pair" if7d@x)))))) (set! i27f5@ib6b@syntax-car ib6b@syntax-car) (set! ib6d@syntax-cdr (lambda (if7f@x) (if (ib3d@stx? if7f@x) (ib59@mkstx (ib6d@syntax-cdr (ib3f@stx-expr if7f@x)) (ib43@stx-mark* if7f@x) (ib47@stx-subst* if7f@x) (ib4b@stx-ae* if7f@x)) (if (i6b5@i587@annotation? if7f@x) (ib6d@syntax-cdr (i6b7@i58b@annotation-expression if7f@x)) (if (pair? if7f@x) (cdr if7f@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" if7f@x)))))) (set! i27f6@ib6d@syntax-cdr ib6d@syntax-cdr) (set! ib6f@syntax->list (lambda (if81@x) (if (ib63@syntax-pair? if81@x) (cons (ib6b@syntax-car if81@x) (ib6f@syntax->list (ib6d@syntax-cdr if81@x))) (if (ib67@syntax-null? if81@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" if81@x))))) (set! i27f7@ib6f@syntax->list ib6f@syntax->list) (set! ib71@id? (lambda (if83@x) (and (ib3d@stx? if83@x) (symbol? (ib3f@stx-expr if83@x))))) (set! i27f8@ib71@id? ib71@id?) (set! ib73@id->sym (lambda (if85@x) (ib3f@stx-expr if85@x))) (set! i27f9@ib73@id->sym ib73@id->sym) (set! ib75@bound-id=? (lambda (if87@x if88@y) (and (eq? (ib73@id->sym if87@x) (ib73@id->sym if88@y)) (same-marks? (ib43@stx-mark* if87@x) (ib43@stx-mark* if88@y))))) (set! i27fa@ib75@bound-id=? ib75@bound-id=?) (set! ib77@free-id=? (lambda (if8b@i if8c@j) (let ((if8f@t0 (id->real-label if8b@i)) (if90@t1 (id->real-label if8c@j))) (if (or if8f@t0 if90@t1) (eq? if8f@t0 if90@t1) (eq? (ib73@id->sym if8b@i) (ib73@id->sym if8c@j)))))) (set! i27fb@ib77@free-id=? ib77@free-id=?) (set! ib79@valid-bound-ids? (lambda (if93@id*) (and (for-all ib71@id? if93@id*) (ib7b@distinct-bound-ids? if93@id*)))) (set! i27fc@ib79@valid-bound-ids? ib79@valid-bound-ids?) (set! ib7b@distinct-bound-ids? (lambda (if95@id*) (or (null? if95@id*) (and (not (ib7d@bound-id-member? (car if95@id*) (cdr if95@id*))) (ib7b@distinct-bound-ids? (cdr if95@id*)))))) (set! i27fd@ib7b@distinct-bound-ids? ib7b@distinct-bound-ids?) (set! ib7d@bound-id-member? (lambda (if97@id if98@id*) (and (pair? if98@id*) (or (ib75@bound-id=? if97@id (car if98@id*)) (ib7d@bound-id-member? if97@id (cdr if98@id*)))))) (set! i27fe@ib7d@bound-id-member? ib7d@bound-id-member?) (set! ib7f@self-evaluating? (lambda (if9b@x) (or (number? if9b@x) (string? if9b@x) (char? if9b@x) (boolean? if9b@x) (regexp? if9b@x) (bytevector? if9b@x)))) (set! i27ff@ib7f@self-evaluating? ib7f@self-evaluating?) (set! ib81@strip-annotations (lambda (if9d@x) (if (pair? if9d@x) (cons (ib81@strip-annotations (car if9d@x)) (ib81@strip-annotations (cdr if9d@x))) (if (vector? if9d@x) (vector-map ib81@strip-annotations if9d@x) (if (i6b5@i587@annotation? if9d@x) (i6b4@i585@annotation-stripped if9d@x) if9d@x))))) (set! i2800@ib81@strip-annotations ib81@strip-annotations) (set! ib83@strip (lambda (if9f@x ifa0@m*) (if (iaf7@top-marked? ifa0@m*) (if (or (i6b5@i587@annotation? if9f@x) (and (pair? if9f@x) (i6b5@i587@annotation? (car if9f@x))) (and (vector? if9f@x) (> (vector-length if9f@x) '0) (i6b5@i587@annotation? (vector-ref if9f@x '0)))) (ib81@strip-annotations if9f@x) if9f@x) (let ifa5@f ((ifa3@x if9f@x)) (if (ib3d@stx? ifa3@x) (begin (if (pair? (ib3f@stx-expr ifa3@x)) (begin (set-source-info! (ib3f@stx-expr ifa3@x) '#f) (set-source-info! (cdr (ib3f@stx-expr ifa3@x)) '#f) (set-source-info! (car (ib3f@stx-expr ifa3@x)) '#f)) (void)) (ib83@strip (ib3f@stx-expr ifa3@x) (ib43@stx-mark* ifa3@x))) (if (i6b5@i587@annotation? ifa3@x) (i6b4@i585@annotation-stripped ifa3@x) (if (pair? ifa3@x) (let ((ifa7@a (ifa5@f (car ifa3@x))) (ifa8@d (ifa5@f (cdr ifa3@x)))) (if (and (eq? ifa7@a (car ifa3@x)) (eq? ifa8@d (cdr ifa3@x))) ifa3@x (cons ifa7@a ifa8@d))) (if (vector? ifa3@x) (let ((ifab@old (vector->list ifa3@x))) (let ((ifad@new (map ifa5@f ifab@old))) (if (for-all eq? ifab@old ifad@new) ifa3@x (list->vector ifad@new)))) ifa3@x)))))))) (set! i2801@ib83@strip ib83@strip) (set! ib85@stx->datum (lambda (ifaf@x) (ib83@strip ifaf@x '()))) (set! i2802@ib85@stx->datum ib85@stx->datum) (set! ib87@id->label (lambda (ifb1@id) (or (id->real-label ifb1@id) (let ((ifb3@t (ie68@top-level-context))) (if ifb3@t ((lambda (ifb5@env) (let ((ifb7@rib (ie18@interaction-env-rib ifb5@env))) (call-with-values (lambda () (ib01@gen-define-label+loc ifb1@id ifb7@rib)) (lambda (ifbd@ifba ifbe@ifbc) (let ((ifc1@loc_ ifbe@ifbc) (ifc2@lab ifbd@ifba)) (begin (ib27@extend-rib! ifb7@rib ifb1@id ifc2@lab) ifc2@lab)))))) ifb3@t) '#f))))) (set! i2803@ib87@id->label ib87@id->label) (set! ib89@label->binding (lambda (ifc5@x ifc6@r) (let ((ifc9@t (i98c@i7d9@imported-label->binding ifc5@x))) (if ifc9@t ((lambda (ifcb@b) (if (and (pair? ifcb@b) (eq? (car ifcb@b) '$core-rtd)) (cons '$rtd (map id2e@bless (cdr ifcb@b))) (if (and (pair? ifcb@b) (eq? (car ifcb@b) 'global-rtd)) (let ((ifcd@lib (cadr ifcb@b)) (ifce@loc (cddr ifcb@b))) (cons '$rtd (symbol-value ifce@loc))) ifcb@b))) ifc9@t) (let ((ifd1@t (assq ifc5@x ifc6@r))) (if ifd1@t (cdr ifd1@t) (let ((ifd3@t (ie68@top-level-context))) (if ifd3@t ((lambda (ifd5@env) (let ((ifd7@t (assq ifc5@x (ie20@interaction-env-locs ifd5@env)))) (if ifd7@t ((lambda (ifd9@p) (cons* 'lexical (cdr ifd9@p) '#f)) ifd7@t) '(displaced-lexical . #f)))) ifd3@t) '(displaced-lexical . #f))))))))) (set! i2804@ib89@label->binding ib89@label->binding) (set! ib8b@make-binding cons) (set! i2805@ib8b@make-binding ib8b@make-binding) (set! ib8d@binding-type car) (set! i2806@ib8d@binding-type ib8d@binding-type) (set! ib8f@binding-value cdr) (set! i2807@ib8f@binding-value ib8f@binding-value) (set! ib91@raise-unbound-error (lambda (ifdb@id) (ie56@syntax-violation* '#f '"unbound identifier" ifdb@id (make-undefined-violation)))) (set! i2808@ib91@raise-unbound-error ib91@raise-unbound-error) (set! ib93@syntax-type (lambda (ifdd@e ifde@r) (if (ib71@id? ifdd@e) (let ((ife1@id ifdd@e)) (let ((ife3@label (ib87@id->label ife1@id))) (let ((ife5@b (ib89@label->binding ife3@label ifde@r))) (let ((ife7@type (ib8d@binding-type ife5@b))) (begin (if (not ife3@label) (ib91@raise-unbound-error ife1@id) (void)) (let ((ife9@t ife7@type)) (if (memv ife9@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values ife7@type (ib8f@binding-value ife5@b) ife1@id) (values 'other '#f '#f)))))))) (if (ib63@syntax-pair? ifdd@e) (let ((ifeb@id (ib6b@syntax-car ifdd@e))) (if (ib71@id? ifeb@id) (let ((ifed@label (ib87@id->label ifeb@id))) (let ((ifef@b (ib89@label->binding ifed@label ifde@r))) (let ((iff1@type (ib8d@binding-type ifef@b))) (begin (if (not ifed@label) (ib91@raise-unbound-error ifeb@id) (void)) (let ((iff3@t iff1@type)) (if (memv iff3@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values iff1@type (ib8f@binding-value ifef@b) ifeb@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((iff5@d (ib85@stx->datum ifdd@e))) (if (ib7f@self-evaluating? iff5@d) (values 'constant iff5@d '#f) (values 'other '#f '#f))))))) (set! i2809@ib93@syntax-type ib93@syntax-type) (set! iba1@sanitize-binding (lambda (iff7@x iff8@src) (if (procedure? iff7@x) (cons* 'local-macro iff7@x iff8@src) (if (and (pair? iff7@x) (eq? (car iff7@x) 'macro!) (procedure? (cdr iff7@x))) (cons* 'local-macro! (cdr iff7@x) iff8@src) (if (and (pair? iff7@x) (eq? (car iff7@x) '$rtd)) iff7@x (assertion-violation 'expand '"invalid transformer" iff7@x)))))) (set! i280a@iba1@sanitize-binding iba1@sanitize-binding) (set! iba3@make-variable-transformer (lambda (iffb@x) (if (procedure? iffb@x) (cons 'macro! iffb@x) (assertion-violation 'make-variable-transformer '"not a procedure" iffb@x)))) (set! i280b@iba3@make-variable-transformer iba3@make-variable-transformer) (set! iba5@variable-transformer? (lambda (iffd@x) (and (pair? iffd@x) (eq? (car iffd@x) 'macro!) (procedure? (cdr iffd@x))))) (set! i280c@iba5@variable-transformer? iba5@variable-transformer?) (set! iba7@variable-transformer-procedure (lambda (ifff@x) (if (iba5@variable-transformer? ifff@x) (cdr ifff@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" ifff@x)))) (set! i280d@iba7@variable-transformer-procedure iba7@variable-transformer-procedure) (set! iba9@make-eval-transformer (lambda (i1001@x) (iba1@sanitize-binding (eval-core (i717@i6cf@expanded->core i1001@x)) i1001@x))) (set! i280e@iba9@make-eval-transformer iba9@make-eval-transformer) (set! icfa@parse-define (lambda (i1003@x) (let ((i1005@t i1003@x)) (let ((i1007@ls/false (id78@syntax-dispatch i1005@t '(_ (any . any) any . each-any)))) (if (and i1007@ls/false (apply (lambda (i1009@id i100a@fmls i100b@b i100c@b*) (ib71@id? i1009@id)) i1007@ls/false)) (apply (lambda (i1011@id i1012@fmls i1013@b i1014@b*) (begin (id9e@verify-formals i1012@fmls i1003@x) (values i1011@id (cons 'defun (cons i1012@fmls (cons i1013@b i1014@b*)))))) i1007@ls/false) (let ((i1019@t i1005@t)) (let ((i101b@ls/false (id78@syntax-dispatch i1019@t '(_ any any)))) (if (and i101b@ls/false (apply (lambda (i101d@id i101e@val) (ib71@id? i101d@id)) i101b@ls/false)) (apply (lambda (i1021@id i1022@val) (values i1021@id (cons 'expr i1022@val))) i101b@ls/false) (let ((i1025@t i1019@t)) (let ((i1027@ls/false (id78@syntax-dispatch i1025@t '(_ any)))) (if (and i1027@ls/false (apply (lambda (i1029@id) (ib71@id? i1029@id)) i1027@ls/false)) (apply (lambda (i102b@id) (values i102b@id (cons 'expr (id2e@bless '(void))))) i1027@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1025@t)))))))))))) (set! i280f@icfa@parse-define icfa@parse-define) (set! icfc@parse-define-syntax (lambda (i102d@x) (let ((i102f@t i102d@x)) (let ((i1031@ls/false (id78@syntax-dispatch i102f@t '(_ any any)))) (if (and i1031@ls/false (apply (lambda (i1033@id i1034@val) (ib71@id? i1033@id)) i1031@ls/false)) (apply (lambda (i1037@id i1038@val) (values i1037@id i1038@val)) i1031@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i102f@t)))))) (set! i2810@icfc@parse-define-syntax icfc@parse-define-syntax) (set! icfe@scheme-stx-hashtable (make-eq-hashtable)) (set! i2811@icfe@scheme-stx-hashtable icfe@scheme-stx-hashtable) (set! id00@scheme-stx (lambda (i103b@sym) (or (hashtable-ref icfe@scheme-stx-hashtable i103b@sym '#f) (let ((i103d@subst (i968@i791@library-subst (i986@i7cd@find-library-by-name '(psyntax system $all))))) (let ((i103f@stx (make-simple-struct 'stx '5 (list i103b@sym iaf5@top-mark* '() '())))) (let ((i1041@stx (let ((i1043@t (assq i103b@sym i103d@subst))) (if i1043@t ((lambda (i1045@x) (let ((i1047@name (car i1045@x)) (i1048@label (cdr i1045@x))) (ib5d@add-subst (make-simple-struct 'rib '6 (list (list i1047@name) (list iaf5@top-mark*) (list i1048@label) '#f '#f)) i103f@stx))) i1043@t) i103f@stx)))) (begin (hashtable-set! icfe@scheme-stx-hashtable i103b@sym i1041@stx) i1041@stx))))))) (set! i2812@id00@scheme-stx id00@scheme-stx) (set! id02@lexical-var car) (set! i2813@id02@lexical-var id02@lexical-var) (set! id04@lexical-mutable? cdr) (set! i2814@id04@lexical-mutable? id04@lexical-mutable?) (set! id06@set-lexical-mutable! set-cdr!) (set! i2815@id06@set-lexical-mutable! id06@set-lexical-mutable!) (set! id08@add-lexical (lambda (i104b@lab i104c@lex i104d@r) (cons (cons* i104b@lab 'lexical i104c@lex '#f) i104d@r))) (set! i2816@id08@add-lexical id08@add-lexical) (set! id0a@add-lexicals (lambda (i1051@lab* i1052@lex* i1053@r) (if (null? i1051@lab*) i1053@r (id0a@add-lexicals (cdr i1051@lab*) (cdr i1052@lex*) (id08@add-lexical (car i1051@lab*) (car i1052@lex*) i1053@r))))) (set! i2817@id0a@add-lexicals id0a@add-lexicals) (set! id0c@letrec-helper (lambda (i1057@e i1058@r i1059@mr i105a@build) (let ((i105f@t i1057@e)) (let ((i1061@ls/false (id78@syntax-dispatch i105f@t '(_ #(each (any any)) any . each-any)))) (if i1061@ls/false (apply (lambda (i1063@lhs* i1064@rhs* i1065@b i1066@b*) (if (not (ib79@valid-bound-ids? i1063@lhs*)) (id32@invalid-fmls-error i1057@e i1063@lhs*) (let ((i106b@lex* (map iaf9@gen-lexical i1063@lhs*)) (i106c@lab* (map iafd@gen-label i1063@lhs*))) (let ((i106f@rib (ib31@make-full-rib i1063@lhs* i106c@lab*)) (i1070@r (id0a@add-lexicals i106c@lab* i106b@lex* i1058@r))) (let ((i1073@body (idb0@chi-internal (ib5d@add-subst i106f@rib (cons i1065@b i1066@b*)) i1070@r i1059@mr)) (i1074@rhs* (id96@chi-expr* (map (lambda (i1077@x) (ib5d@add-subst i106f@rib i1077@x)) i1064@rhs*) i1070@r i1059@mr))) (i105a@build '#f i106b@lex* i1074@rhs* i1073@body)))))) i1061@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i105f@t)))))) (set! i2818@id0c@letrec-helper id0c@letrec-helper) (set! id0e@let-transformer (lambda (i1079@e i107a@r i107b@mr) (let ((i107f@t i1079@e)) (let ((i1081@ls/false (id78@syntax-dispatch i107f@t '(_ #(each (any any)) any . each-any)))) (if i1081@ls/false (apply (lambda (i1083@lhs* i1084@rhs* i1085@b i1086@b*) (if (not (ib79@valid-bound-ids? i1083@lhs*)) (id32@invalid-fmls-error i1079@e i1083@lhs*) (let ((i108b@lex* (map iaf9@gen-lexical i1083@lhs*)) (i108c@lab* (map iafd@gen-label i1083@lhs*)) (i108d@rhs* (id96@chi-expr* i1084@rhs* i107a@r i107b@mr))) (let ((i1091@rib (ib31@make-full-rib i1083@lhs* i108c@lab*)) (i1092@r (id0a@add-lexicals i108c@lab* i108b@lex* i107a@r))) (let ((i1095@body (idb0@chi-internal (ib5d@add-subst i1091@rib (cons i1085@b i1086@b*)) i1092@r i107b@mr))) (iad9@ia3c@build-let '#f i108b@lex* i108d@rhs* i1095@body)))))) i1081@ls/false) (let ((i1097@t i107f@t)) (let ((i1099@ls/false (id78@syntax-dispatch i1097@t '(_ any #(each (any any)) any . each-any)))) (if i1099@ls/false (apply (lambda (i109b@loop i109c@lhs* i109d@rhs* i109e@b i109f@b*) (if (not (ib79@valid-bound-ids? i109c@lhs*)) (id32@invalid-fmls-error i1079@e i109c@lhs*) (let ((i10a5@lex* (map iaf9@gen-lexical i109c@lhs*)) (i10a6@lab* (map iafd@gen-label i109c@lhs*)) (i10a7@rhs* (id96@chi-expr* i109d@rhs* i107a@r i107b@mr)) (i10a8@loop-lex (iaf9@gen-lexical i109b@loop)) (i10a9@loop-lab (iafd@gen-label i109b@loop))) (let ((i10af@loop-rib (ib31@make-full-rib (list i109b@loop) (list i10a9@loop-lab))) (i10b0@rib (ib31@make-full-rib i109c@lhs* i10a6@lab*)) (i10b1@r (id0a@add-lexicals (cons i10a9@loop-lab i10a6@lab*) (cons i10a8@loop-lex i10a5@lex*) i107a@r))) (let ((i10b5@body (idb0@chi-internal (ib5d@add-subst i10af@loop-rib (ib5d@add-subst i10b0@rib (cons i109e@b i109f@b*))) i10b1@r i107b@mr))) (iada@ia3e@build-named-let '#f i10a8@loop-lex i10a5@lex* i10a7@rhs* i10b5@body)))))) i1099@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1097@t))))))))) (set! i2819@id0e@let-transformer id0e@let-transformer) (set! id10@letrec-transformer (lambda (i10b7@e i10b8@r i10b9@mr) (id0c@letrec-helper i10b7@e i10b8@r i10b9@mr iad8@ia3a@build-letrec))) (set! i281a@id10@letrec-transformer id10@letrec-transformer) (set! id12@letrec*-transformer (lambda (i10bd@e i10be@r i10bf@mr) (id0c@letrec-helper i10bd@e i10be@r i10bf@mr iadb@ia40@build-letrec*))) (set! i281b@id12@letrec*-transformer id12@letrec*-transformer) (set! id14@fluid-let-syntax-transformer (lambda (i10c3@e i10c4@r i10c5@mr) (letrec* ((i10ca@lookup (lambda (i10dd@x) (or (ib87@id->label i10dd@x) (ie58@syntax-violation '#f '"unbound identifier" i10c3@e i10dd@x))))) (let ((i10cb@t i10c3@e)) (let ((i10cd@ls/false (id78@syntax-dispatch i10cb@t '(_ #(each (any any)) any . each-any)))) (if i10cd@ls/false (apply (lambda (i10cf@lhs* i10d0@rhs* i10d1@b i10d2@b*) (if (not (ib79@valid-bound-ids? i10cf@lhs*)) (id32@invalid-fmls-error i10c3@e i10cf@lhs*) (let ((i10d7@lab* (map i10ca@lookup i10cf@lhs*)) (i10d8@rhs* (map (lambda (i10db@x) (iba9@make-eval-transformer (idd2@expand-transformer i10db@x i10c5@mr))) i10d0@rhs*))) (idb0@chi-internal (cons i10d1@b i10d2@b*) (append (map cons i10d7@lab* i10d8@rhs*) i10c4@r) (append (map cons i10d7@lab* i10d8@rhs*) i10c5@mr))))) i10cd@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i10cb@t))))))) (set! i281c@id14@fluid-let-syntax-transformer id14@fluid-let-syntax-transformer) (set! id16@type-descriptor-transformer (lambda (i10df@e i10e0@r i10e1@mr) (let ((i10e5@t i10df@e)) (let ((i10e7@ls/false (id78@syntax-dispatch i10e5@t '(_ any)))) (if (and i10e7@ls/false (apply (lambda (i10e9@id) (ib71@id? i10e9@id)) i10e7@ls/false)) (apply (lambda (i10eb@id) (let ((i10ed@lab (ib87@id->label i10eb@id))) (let ((i10ef@b (ib89@label->binding i10ed@lab i10e0@r))) (let ((i10f1@type (ib8d@binding-type i10ef@b))) (begin (if (not i10ed@lab) (ib91@raise-unbound-error i10eb@id) (void)) (if (not (and (eq? i10f1@type '$rtd) (not (list? (ib8f@binding-value i10ef@b))))) (ie58@syntax-violation '#f '"not a record type" i10df@e) (void)) (list 'quote (ib8f@binding-value i10ef@b))))))) i10e7@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i10e5@t)))))) (set! i281d@id16@type-descriptor-transformer id16@type-descriptor-transformer) (set! id18@record-type-descriptor-transformer (lambda (i10f3@e i10f4@r i10f5@mr) (let ((i10f9@t i10f3@e)) (let ((i10fb@ls/false (id78@syntax-dispatch i10f9@t '(_ any)))) (if (and i10fb@ls/false (apply (lambda (i10fd@id) (ib71@id? i10fd@id)) i10fb@ls/false)) (apply (lambda (i10ff@id) (let ((i1101@lab (ib87@id->label i10ff@id))) (let ((i1103@b (ib89@label->binding i1101@lab i10f4@r))) (let ((i1105@type (ib8d@binding-type i1103@b))) (begin (if (not i1101@lab) (ib91@raise-unbound-error i10ff@id) (void)) (if (not (and (eq? i1105@type '$rtd) (list? (ib8f@binding-value i1103@b)))) (ie58@syntax-violation '#f '"not a record type" i10f3@e) (void)) (id9a@chi-expr (car (ib8f@binding-value i1103@b)) i10f4@r i10f5@mr)))))) i10fb@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i10f9@t)))))) (set! i281e@id18@record-type-descriptor-transformer id18@record-type-descriptor-transformer) (set! id1a@record-constructor-descriptor-transformer (lambda (i1107@e i1108@r i1109@mr) (let ((i110d@t i1107@e)) (let ((i110f@ls/false (id78@syntax-dispatch i110d@t '(_ any)))) (if (and i110f@ls/false (apply (lambda (i1111@id) (ib71@id? i1111@id)) i110f@ls/false)) (apply (lambda (i1113@id) (let ((i1115@lab (ib87@id->label i1113@id))) (let ((i1117@b (ib89@label->binding i1115@lab i1108@r))) (let ((i1119@type (ib8d@binding-type i1117@b))) (begin (if (not i1115@lab) (ib91@raise-unbound-error i1113@id) (void)) (if (not (and (eq? i1119@type '$rtd) (list? (ib8f@binding-value i1117@b)))) (ie58@syntax-violation '#f '"invalid type" i1107@e) (void)) (id9a@chi-expr (cadr (ib8f@binding-value i1117@b)) i1108@r i1109@mr)))))) i110f@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i110d@t)))))) (set! i281f@id1a@record-constructor-descriptor-transformer id1a@record-constructor-descriptor-transformer) (set! id1c@when-macro (lambda (i111b@e) (let ((i111d@t i111b@e)) (let ((i111f@ls/false (id78@syntax-dispatch i111d@t '(_ any any . each-any)))) (if i111f@ls/false (apply (lambda (i1121@test i1122@e i1123@e*) (id2e@bless (list 'if i1121@test (cons 'begin (cons i1122@e i1123@e*))))) i111f@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i111d@t)))))) (set! i2820@id1c@when-macro id1c@when-macro) (set! id1e@unless-macro (lambda (i1127@e) (let ((i1129@t i1127@e)) (let ((i112b@ls/false (id78@syntax-dispatch i1129@t '(_ any any . each-any)))) (if i112b@ls/false (apply (lambda (i112d@test i112e@e i112f@e*) (id2e@bless (list 'if (list 'not i112d@test) (cons 'begin (cons i112e@e i112f@e*))))) i112b@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1129@t)))))) (set! i2821@id1e@unless-macro id1e@unless-macro) (set! id20@if-transformer (lambda (i1133@e i1134@r i1135@mr) (let ((i1139@t i1133@e)) (let ((i113b@ls/false (id78@syntax-dispatch i1139@t '(_ any any any)))) (if i113b@ls/false (apply (lambda (i113d@e0 i113e@e1 i113f@e2) (list 'if (id9a@chi-expr i113d@e0 i1134@r i1135@mr) (id9a@chi-expr i113e@e1 i1134@r i1135@mr) (id9a@chi-expr i113f@e2 i1134@r i1135@mr))) i113b@ls/false) (let ((i1143@t i1139@t)) (let ((i1145@ls/false (id78@syntax-dispatch i1143@t '(_ any any)))) (if i1145@ls/false (apply (lambda (i1147@e0 i1148@e1) (list 'if (id9a@chi-expr i1147@e0 i1134@r i1135@mr) (id9a@chi-expr i1148@e1 i1134@r i1135@mr) (iad7@ia38@build-void))) i1145@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1143@t))))))))) (set! i2822@id20@if-transformer id20@if-transformer) (set! id22@and-transformer (lambda (i114b@e i114c@r i114d@mr) (let ((i1151@t i114b@e)) (let ((i1153@ls/false (id78@syntax-dispatch i1151@t '(_ . each-any)))) (if i1153@ls/false (apply (lambda (i1155@e*) (cons 'and (id96@chi-expr* i1155@e* i114c@r i114d@mr))) i1153@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1151@t)))))) (set! i2823@id22@and-transformer id22@and-transformer) (set! id24@or-transformer (lambda (i1157@e i1158@r i1159@mr) (let ((i115d@t i1157@e)) (let ((i115f@ls/false (id78@syntax-dispatch i115d@t '(_ . each-any)))) (if i115f@ls/false (apply (lambda (i1161@e*) (cons 'or (id96@chi-expr* i1161@e* i1158@r i1159@mr))) i115f@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i115d@t)))))) (set! i2824@id24@or-transformer id24@or-transformer) (set! id26@case-macro (lambda (i1163@e) (letrec* ((i1166@build-last (lambda (i118d@cls) (let ((i118f@t i118d@cls)) (let ((i1191@ls/false (id78@syntax-dispatch i118f@t '(#(scheme-id else) any . each-any)))) (if i1191@ls/false (apply (lambda (i1193@e i1194@e*) (cons 'begin (cons i1193@e i1194@e*))) i1191@ls/false) (let ((i1197@t i118f@t)) (let ((i1199@ls/false (id78@syntax-dispatch i1197@t '_))) (if i1199@ls/false (apply (lambda () (i1168@build-one i118d@cls '(if #f #f))) i1199@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1197@t))))))))) (i1168@build-one (lambda (i117f@cls i1180@k) (let ((i1183@t i117f@cls)) (let ((i1185@ls/false (id78@syntax-dispatch i1183@t '(each-any any . each-any)))) (if i1185@ls/false (apply (lambda (i1187@d* i1188@e i1189@e*) (list 'if (list 'memv 't (list 'quote i1187@d*)) (cons 'begin (cons i1188@e i1189@e*)) i1180@k)) i1185@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1183@t))))))) (let ((i1169@t i1163@e)) (let ((i116b@ls/false (id78@syntax-dispatch i1169@t '(_ any)))) (if i116b@ls/false (apply (lambda (i116d@expr) (id2e@bless (cons 'let (cons (list (list 't i116d@expr)) '((if #f #f)))))) i116b@ls/false) (let ((i116f@t i1169@t)) (let ((i1171@ls/false (id78@syntax-dispatch i116f@t '(_ any any . each-any)))) (if i1171@ls/false (apply (lambda (i1173@expr i1174@cls i1175@cls*) (id2e@bless (list 'let (list (list 't i1173@expr)) (let i117d@f ((i1179@cls i1174@cls) (i117a@cls* i1175@cls*)) (if (null? i117a@cls*) (i1166@build-last i1179@cls) (i1168@build-one i1179@cls (i117d@f (car i117a@cls*) (cdr i117a@cls*)))))))) i1171@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i116f@t)))))))))) (set! i2825@id26@case-macro id26@case-macro) (set! id28@quote-transformer (lambda (i119b@e i119c@r i119d@mr) (let ((i11a1@t i119b@e)) (let ((i11a3@ls/false (id78@syntax-dispatch i11a1@t '(_ any)))) (if i11a3@ls/false (apply (lambda (i11a5@datum) (list 'quote (ib85@stx->datum i11a5@datum))) i11a3@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i11a1@t)))))) (set! i2826@id28@quote-transformer id28@quote-transformer) (set! id2a@case-lambda-transformer (lambda (i11a7@e i11a8@r i11a9@mr) (let ((i11ad@t i11a7@e)) (let ((i11af@ls/false (id78@syntax-dispatch i11ad@t '(_ . #(each (any any . each-any)))))) (if i11af@ls/false (apply (lambda (i11b1@fmls* i11b2@b* i11b3@b**) (call-with-values (lambda () (ida2@chi-lambda-clause* i11a7@e i11b1@fmls* (map cons i11b2@b* i11b3@b**) i11a8@r i11a9@mr)) (lambda (i11bb@i11b8 i11bc@i11ba) (let ((i11bf@body* i11bc@i11ba) (i11c0@fmls* i11bb@i11b8)) (iad5@ia08@build-case-lambda '#f i11c0@fmls* i11bf@body*))))) i11af@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i11ad@t)))))) (set! i2827@id2a@case-lambda-transformer id2a@case-lambda-transformer) (set! id2c@lambda-transformer (lambda (i11c3@e i11c4@r i11c5@mr) (let ((i11c9@t i11c3@e)) (let ((i11cb@ls/false (id78@syntax-dispatch i11c9@t '(_ any any . each-any)))) (if i11cb@ls/false (apply (lambda (i11cd@fmls i11ce@b i11cf@b*) (call-with-values (lambda () (ida0@chi-lambda-clause i11c3@e i11cd@fmls (cons i11ce@b i11cf@b*) i11c4@r i11c5@mr)) (lambda (i11d7@i11d4 i11d8@i11d6) (let ((i11db@body i11d8@i11d6) (i11dc@fmls i11d7@i11d4)) (iad4@ia06@build-lambda '#f i11dc@fmls i11db@body))))) i11cb@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i11c9@t)))))) (set! i2828@id2c@lambda-transformer id2c@lambda-transformer) (set! id2e@bless (lambda (i11df@x) (ib59@mkstx (let i11e3@f ((i11e1@x i11df@x)) (if (ib3d@stx? i11e1@x) i11e1@x (if (pair? i11e1@x) (cons (i11e3@f (car i11e1@x)) (i11e3@f (cdr i11e1@x))) (if (symbol? i11e1@x) (id00@scheme-stx i11e1@x) (if (vector? i11e1@x) (vector-map i11e3@f i11e1@x) i11e1@x))))) '() '() '()))) (set! i2829@id2e@bless id2e@bless) (set! id30@with-syntax-macro (lambda (i11e5@e) (let ((i11e7@t i11e5@e)) (let ((i11e9@ls/false (id78@syntax-dispatch i11e7@t '(_ #(each (any any)) any . each-any)))) (if i11e9@ls/false (apply (lambda (i11eb@pat* i11ec@expr* i11ed@b i11ee@b*) (let ((i11f3@idn* (let i11f7@f ((i11f5@pat* i11eb@pat*)) (if (null? i11f5@pat*) '() (call-with-values (lambda () (id76@convert-pattern (car i11f5@pat*) '())) (lambda (i11fd@i11fa i11fe@i11fc) (let ((i1201@idn* i11fe@i11fc) (i1202@pat i11fd@i11fa)) (append i1201@idn* (i11f7@f (cdr i11f5@pat*)))))))))) (begin (id9e@verify-formals (map car i11f3@idn*) i11e5@e) (let ((i1205@t* (ie46@generate-temporaries i11ec@expr*))) (id2e@bless (list 'let (map list i1205@t* i11ec@expr*) (let i120b@f ((i1207@pat* i11eb@pat*) (i1208@t* i1205@t*)) (if (null? i1207@pat*) (cons 'begin (cons '#f (cons i11ed@b i11ee@b*))) (list 'syntax-case (car i1208@t*) '() (list (car i1207@pat*) (i120b@f (cdr i1207@pat*) (cdr i1208@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car i1207@pat*)) (car i1208@t*)))))))))))) i11e9@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i11e7@t)))))) (set! i282a@id30@with-syntax-macro id30@with-syntax-macro) (set! id32@invalid-fmls-error (lambda (i120d@stx i120e@fmls) (let ((i1211@t i120e@fmls)) (let ((i1213@ls/false (id78@syntax-dispatch i1211@t '#(each+ any () any)))) (if i1213@ls/false (apply (lambda (i1215@id* i1216@last) (let i121b@f ((i1219@id* (if (ib71@id? i1216@last) (cons i1216@last i1215@id*) (if (ib67@syntax-null? i1216@last) i1215@id* (ie58@syntax-violation '#f '"not an identifier" i120d@stx i1216@last))))) (if (null? i1219@id*) (values) (if (not (ib71@id? (car i1219@id*))) (ie58@syntax-violation '#f '"not an identifier" i120d@stx (car i1219@id*)) (begin (i121b@f (cdr i1219@id*)) (if (ib7d@bound-id-member? (car i1219@id*) (cdr i1219@id*)) (ie58@syntax-violation '#f '"duplicate binding" i120d@stx (car i1219@id*)) (void))))))) i1213@ls/false) (let ((i121d@t i1211@t)) (let ((i121f@ls/false (id78@syntax-dispatch i121d@t '_))) (if i121f@ls/false (apply (lambda () (ie58@syntax-violation '#f '"malformed binding form" i120d@stx i120e@fmls)) i121f@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i121d@t))))))))) (set! i282b@id32@invalid-fmls-error id32@invalid-fmls-error) (set! id34@let-macro (lambda (i1221@stx) (let ((i1223@t i1221@stx)) (let ((i1225@ls/false (id78@syntax-dispatch i1223@t '(_ #(each (any any)) any . each-any)))) (if i1225@ls/false (apply (lambda (i1227@lhs* i1228@rhs* i1229@b i122a@b*) (if (ib79@valid-bound-ids? i1227@lhs*) (id2e@bless (cons (cons 'lambda (cons i1227@lhs* (cons i1229@b i122a@b*))) i1228@rhs*)) (id32@invalid-fmls-error i1221@stx i1227@lhs*))) i1225@ls/false) (let ((i122f@t i1223@t)) (let ((i1231@ls/false (id78@syntax-dispatch i122f@t '(_ any #(each (any any)) any . each-any)))) (if (and i1231@ls/false (apply (lambda (i1233@f i1234@lhs* i1235@rhs* i1236@b i1237@b*) (ib71@id? i1233@f)) i1231@ls/false)) (apply (lambda (i123d@f i123e@lhs* i123f@rhs* i1240@b i1241@b*) (if (ib79@valid-bound-ids? i123e@lhs*) (id2e@bless (cons (list 'letrec (list (list i123d@f (cons 'lambda (cons i123e@lhs* (cons i1240@b i1241@b*))))) i123d@f) i123f@rhs*)) (id32@invalid-fmls-error i1221@stx i123e@lhs*))) i1231@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i122f@t))))))))) (set! i282c@id34@let-macro id34@let-macro) (set! id36@let-values-macro (lambda (i1247@stx) (letrec* ((i124a@rename (lambda (i12af@x i12b0@old* i12b1@new*) (begin (if (not (ib71@id? i12af@x)) (ie58@syntax-violation '#f '"not an indentifier" i1247@stx i12af@x) (void)) (if (ib7d@bound-id-member? i12af@x i12b0@old*) (ie58@syntax-violation '#f '"duplicate binding" i1247@stx i12af@x) (void)) (let ((i12b5@y (gensym (ie5e@syntax->datum i12af@x)))) (values i12b5@y (cons i12af@x i12b0@old*) (cons i12b5@y i12b1@new*)))))) (i124c@rename* (lambda (i129d@x* i129e@old* i129f@new*) (if (null? i129d@x*) (values '() i129e@old* i129f@new*) (call-with-values (lambda () (i124a@rename (car i129d@x*) i129e@old* i129f@new*)) (lambda (i12a3@x i12a4@old* i12a5@new*) (call-with-values (lambda () (i124c@rename* (cdr i129d@x*) i12a4@old* i12a5@new*)) (lambda (i12a9@x* i12aa@old* i12ab@new*) (values (cons i12a3@x i12a9@x*) i12aa@old* i12ab@new*))))))))) (let ((i124d@t i1247@stx)) (let ((i124f@ls/false (id78@syntax-dispatch i124d@t '(_ () any . each-any)))) (if i124f@ls/false (apply (lambda (i1251@b i1252@b*) (cons* (id2e@bless 'let) '() i1251@b i1252@b*)) i124f@ls/false) (let ((i1255@t i124d@t)) (let ((i1257@ls/false (id78@syntax-dispatch i1255@t '(_ #(each (any any)) any . each-any)))) (if i1257@ls/false (apply (lambda (i1259@lhs* i125a@rhs* i125b@b i125c@b*) (id2e@bless (let i1269@f ((i1261@lhs* i1259@lhs*) (i1262@rhs* i125a@rhs*) (i1263@old* '()) (i1264@new* '())) (if (null? i1261@lhs*) (cons 'let (cons (map list i1263@old* i1264@new*) (cons i125b@b i125c@b*))) (let ((i126b@t (car i1261@lhs*))) (let ((i126d@ls/false (id78@syntax-dispatch i126b@t 'each-any))) (if i126d@ls/false (apply (lambda (i126f@x*) (call-with-values (lambda () (i124c@rename* i126f@x* i1263@old* i1264@new*)) (lambda (i1277@i1272 i1278@i1274 i1279@i1276) (let ((i127d@new* i1279@i1276) (i127e@old* i1278@i1274) (i127f@y* i1277@i1272)) (list 'call-with-values (list 'lambda '() (car i1262@rhs*)) (list 'lambda i127f@y* (i1269@f (cdr i1261@lhs*) (cdr i1262@rhs*) i127e@old* i127d@new*))))))) i126d@ls/false) (let ((i1283@t i126b@t)) (let ((i1285@ls/false (id78@syntax-dispatch i1283@t '#(each+ any () any)))) (if i1285@ls/false (apply (lambda (i1287@x* i1288@x) (call-with-values (lambda () (i124a@rename i1288@x i1263@old* i1264@new*)) (lambda (i128b@y i128c@old* i128d@new*) (call-with-values (lambda () (i124c@rename* i1287@x* i128c@old* i128d@new*)) (lambda (i1291@y* i1292@old* i1293@new*) (list 'call-with-values (list 'lambda '() (car i1262@rhs*)) (list 'lambda (append i1291@y* i128b@y) (i1269@f (cdr i1261@lhs*) (cdr i1262@rhs*) i1292@old* i1293@new*)))))))) i1285@ls/false) (let ((i1297@t i1283@t)) (let ((i1299@ls/false (id78@syntax-dispatch i1297@t 'any))) (if i1299@ls/false (apply (lambda (i129b@others) (ie58@syntax-violation '#f '"malformed bindings" i1247@stx i129b@others)) i1299@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1297@t)))))))))))))) i1257@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1255@t)))))))))) (set! i282d@id36@let-values-macro id36@let-values-macro) (set! id38@let*-values-macro (lambda (i12b7@stx) (letrec* ((i12ba@check (lambda (i12e9@x*) (if (not (null? i12e9@x*)) (let ((i12eb@x (car i12e9@x*))) (begin (if (not (ib71@id? i12eb@x)) (ie58@syntax-violation '#f '"not an identifier" i12b7@stx i12eb@x) (void)) (i12ba@check (cdr i12e9@x*)) (if (ib7d@bound-id-member? i12eb@x (cdr i12e9@x*)) (ie58@syntax-violation '#f '"duplicate identifier" i12b7@stx i12eb@x) (void)))) (void))))) (let ((i12bb@t i12b7@stx)) (let ((i12bd@ls/false (id78@syntax-dispatch i12bb@t '(_ () any . each-any)))) (if i12bd@ls/false (apply (lambda (i12bf@b i12c0@b*) (cons* (id2e@bless 'let) '() i12bf@b i12c0@b*)) i12bd@ls/false) (let ((i12c3@t i12bb@t)) (let ((i12c5@ls/false (id78@syntax-dispatch i12c3@t '(_ #(each (any any)) any . each-any)))) (if i12c5@ls/false (apply (lambda (i12c7@lhs* i12c8@rhs* i12c9@b i12ca@b*) (id2e@bless (let i12d3@f ((i12cf@lhs* i12c7@lhs*) (i12d0@rhs* i12c8@rhs*)) (if (null? i12cf@lhs*) (cons 'begin (cons i12c9@b i12ca@b*)) (let ((i12d5@t (car i12cf@lhs*))) (let ((i12d7@ls/false (id78@syntax-dispatch i12d5@t 'each-any))) (if i12d7@ls/false (apply (lambda (i12d9@x*) (begin (i12ba@check i12d9@x*) (list 'call-with-values (list 'lambda '() (car i12d0@rhs*)) (list 'lambda i12d9@x* (i12d3@f (cdr i12cf@lhs*) (cdr i12d0@rhs*)))))) i12d7@ls/false) (let ((i12db@t i12d5@t)) (let ((i12dd@ls/false (id78@syntax-dispatch i12db@t '#(each+ any () any)))) (if i12dd@ls/false (apply (lambda (i12df@x* i12e0@x) (begin (i12ba@check (cons i12e0@x i12df@x*)) (list 'call-with-values (list 'lambda '() (car i12d0@rhs*)) (list 'lambda (append i12df@x* i12e0@x) (i12d3@f (cdr i12cf@lhs*) (cdr i12d0@rhs*)))))) i12dd@ls/false) (let ((i12e3@t i12db@t)) (let ((i12e5@ls/false (id78@syntax-dispatch i12e3@t 'any))) (if i12e5@ls/false (apply (lambda (i12e7@others) (ie58@syntax-violation '#f '"malformed bindings" i12b7@stx i12e7@others)) i12e5@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i12e3@t)))))))))))))) i12c5@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i12c3@t)))))))))) (set! i282e@id38@let*-values-macro id38@let*-values-macro) (set! id3a@trace-lambda-macro (lambda (i12ed@stx) (let ((i12ef@t i12ed@stx)) (let ((i12f1@ls/false (id78@syntax-dispatch i12ef@t '(_ any each-any any . each-any)))) (if i12f1@ls/false (apply (lambda (i12f3@who i12f4@fmls i12f5@b i12f6@b*) (if (ib79@valid-bound-ids? i12f4@fmls) (id2e@bless (list 'make-traced-procedure (list 'quote i12f3@who) (cons 'lambda (cons i12f4@fmls (cons i12f5@b i12f6@b*))))) (id32@invalid-fmls-error i12ed@stx i12f4@fmls))) i12f1@ls/false) (let ((i12fb@t i12ef@t)) (let ((i12fd@ls/false (id78@syntax-dispatch i12fb@t '(_ any #(each+ any () any) any . each-any)))) (if i12fd@ls/false (apply (lambda (i12ff@who i1300@fmls i1301@last i1302@b i1303@b*) (if (ib79@valid-bound-ids? (cons i1301@last i1300@fmls)) (id2e@bless (list 'make-traced-procedure (list 'quote i12ff@who) (cons 'lambda (cons (append i1300@fmls i1301@last) (cons i1302@b i1303@b*))))) (id32@invalid-fmls-error i12ed@stx (append i1300@fmls i1301@last)))) i12fd@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i12fb@t))))))))) (set! i282f@id3a@trace-lambda-macro id3a@trace-lambda-macro) (set! id3c@trace-define-macro (lambda (i1309@stx) (let ((i130b@t i1309@stx)) (let ((i130d@ls/false (id78@syntax-dispatch i130b@t '(_ (any . each-any) any . each-any)))) (if i130d@ls/false (apply (lambda (i130f@who i1310@fmls i1311@b i1312@b*) (if (ib79@valid-bound-ids? i1310@fmls) (id2e@bless (list 'define i130f@who (list 'make-traced-procedure (list 'quote i130f@who) (cons 'lambda (cons i1310@fmls (cons i1311@b i1312@b*)))))) (id32@invalid-fmls-error i1309@stx i1310@fmls))) i130d@ls/false) (let ((i1317@t i130b@t)) (let ((i1319@ls/false (id78@syntax-dispatch i1317@t '(_ (any . #(each+ any () any)) any . each-any)))) (if i1319@ls/false (apply (lambda (i131b@who i131c@fmls i131d@last i131e@b i131f@b*) (if (ib79@valid-bound-ids? (cons i131d@last i131c@fmls)) (id2e@bless (list 'define i131b@who (list 'make-traced-procedure (list 'quote i131b@who) (cons 'lambda (cons (append i131c@fmls i131d@last) (cons i131e@b i131f@b*)))))) (id32@invalid-fmls-error i1309@stx (append i131c@fmls i131d@last)))) i1319@ls/false) (let ((i1325@t i1317@t)) (let ((i1327@ls/false (id78@syntax-dispatch i1325@t '(_ any any)))) (if i1327@ls/false (apply (lambda (i1329@who i132a@expr) (if (ib71@id? i1329@who) (id2e@bless (list 'define i1329@who (list 'let (list (list 'v i132a@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote i1329@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (ie58@syntax-violation '#f '"invalid name" i1309@stx))) i1327@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1325@t)))))))))))) (set! i2830@id3c@trace-define-macro id3c@trace-define-macro) (set! id3e@trace-define-syntax-macro (lambda (i132d@stx) (let ((i132f@t i132d@stx)) (let ((i1331@ls/false (id78@syntax-dispatch i132f@t '(_ any any)))) (if i1331@ls/false (apply (lambda (i1333@who i1334@expr) (if (ib71@id? i1333@who) (id2e@bless (list 'define-syntax i1333@who (list 'make-traced-macro (list 'quote i1333@who) i1334@expr))) (ie58@syntax-violation '#f '"invalid name" i132d@stx))) i1331@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i132f@t)))))) (set! i2831@id3e@trace-define-syntax-macro id3e@trace-define-syntax-macro) (set! id40@trace-let/rec-syntax (lambda (i1337@who) (lambda (i1339@stx) (let ((i133b@t i1339@stx)) (let ((i133d@ls/false (id78@syntax-dispatch i133b@t '(_ #(each (any any)) any . each-any)))) (if i133d@ls/false (apply (lambda (i133f@lhs* i1340@rhs* i1341@b i1342@b*) (if (ib79@valid-bound-ids? i133f@lhs*) (let ((i1347@rhs* (map (lambda (i1349@lhs i134a@rhs) (list 'make-traced-macro (list 'quote i1349@lhs) i134a@rhs)) i133f@lhs* i1340@rhs*))) (id2e@bless (cons i1337@who (cons (map list i133f@lhs* i1347@rhs*) (cons i1341@b i1342@b*))))) (id32@invalid-fmls-error i1339@stx i133f@lhs*))) i133d@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i133b@t))))))) (set! i2832@id40@trace-let/rec-syntax id40@trace-let/rec-syntax) (set! id42@trace-let-syntax-macro (id40@trace-let/rec-syntax 'let-syntax)) (set! i2833@id42@trace-let-syntax-macro id42@trace-let-syntax-macro) (set! id44@trace-letrec-syntax-macro (id40@trace-let/rec-syntax 'letrec-syntax)) (set! i2834@id44@trace-letrec-syntax-macro id44@trace-letrec-syntax-macro) (set! id46@guard-macro (lambda (i134d@x) (letrec* ((i1350@gen-clauses (lambda (i1367@con i1368@outerk i1369@clause*) (letrec* ((i136e@f (lambda (i13a7@x i13a8@k) (let ((i13ab@t i13a7@x)) (let ((i13ad@ls/false (id78@syntax-dispatch i13ab@t '(any #(scheme-id =>) any)))) (if i13ad@ls/false (apply (lambda (i13af@e i13b0@p) (let ((i13b3@t (gensym))) (list 'let (list (list i13b3@t i13af@e)) (list 'if i13b3@t (list i13b0@p i13b3@t) i13a8@k)))) i13ad@ls/false) (let ((i13b5@t i13ab@t)) (let ((i13b7@ls/false (id78@syntax-dispatch i13b5@t '(any)))) (if i13b7@ls/false (apply (lambda (i13b9@e) (let ((i13bb@t (gensym))) (list 'let (list (list i13bb@t i13b9@e)) (list 'if i13bb@t i13bb@t i13a8@k)))) i13b7@ls/false) (let ((i13bd@t i13b5@t)) (let ((i13bf@ls/false (id78@syntax-dispatch i13bd@t '(any any . each-any)))) (if i13bf@ls/false (apply (lambda (i13c1@e i13c2@v i13c3@v*) (list 'if i13c1@e (cons 'begin (cons i13c2@v i13c3@v*)) i13a8@k)) i13bf@ls/false) (let ((i13c7@t i13bd@t)) (let ((i13c9@ls/false (id78@syntax-dispatch i13c7@t '_))) (if i13c9@ls/false (apply (lambda () (ie58@syntax-violation '#f '"invalid guard clause" i13a7@x)) i13c9@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i13c7@t))))))))))))))) (i1370@f* (lambda (i137d@x*) (let ((i137f@t i137d@x*)) (let ((i1381@ls/false (id78@syntax-dispatch i137f@t '()))) (if i1381@ls/false (apply (lambda () (let ((i1383@g (gensym))) (values (list i1383@g (list 'lambda '() (list 'raise-continuable i1367@con))) i1383@g))) i1381@ls/false) (let ((i1385@t i137f@t)) (let ((i1387@ls/false (id78@syntax-dispatch i1385@t '((#(scheme-id else) any . each-any))))) (if i1387@ls/false (apply (lambda (i1389@e i138a@e*) (values (cons 'begin (cons i1389@e i138a@e*)) '#f)) i1387@ls/false) (let ((i138d@t i1385@t)) (let ((i138f@ls/false (id78@syntax-dispatch i138d@t '(any . any)))) (if i138f@ls/false (apply (lambda (i1391@cls i1392@cls*) (call-with-values (lambda () (i1370@f* i1392@cls*)) (lambda (i1399@i1396 i139a@i1398) (let ((i139d@g i139a@i1398) (i139e@e i1399@i1396)) (values (i136e@f i1391@cls i139e@e) i139d@g))))) i138f@ls/false) (let ((i13a1@t i138d@t)) (let ((i13a3@ls/false (id78@syntax-dispatch i13a1@t 'any))) (if i13a3@ls/false (apply (lambda (i13a5@others) (ie58@syntax-violation '#f '"invalid guard clause" i13a5@others)) i13a3@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i13a1@t)))))))))))))))) (call-with-values (lambda () (i1370@f* i1369@clause*)) (lambda (i1375@i1372 i1376@i1374) (let ((i1379@raisek i1376@i1374) (i137a@code i1375@i1372)) (if i1379@raisek (list (list 'call/cc (list 'lambda (list i1379@raisek) (list i1368@outerk (list 'lambda '() i137a@code))))) (list i1368@outerk (list 'lambda '() i137a@code)))))))))) (let ((i1351@t i134d@x)) (let ((i1353@ls/false (id78@syntax-dispatch i1351@t '(_ (any . each-any) any . each-any)))) (if (and i1353@ls/false (apply (lambda (i1355@con i1356@clause* i1357@b i1358@b*) (ib71@id? i1355@con)) i1353@ls/false)) (apply (lambda (i135d@con i135e@clause* i135f@b i1360@b*) (let ((i1365@outerk (gensym))) (id2e@bless (list (list 'call/cc (list 'lambda (list i1365@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list i135d@con) (i1350@gen-clauses i135d@con i1365@outerk i135e@clause*)) (cons 'lambda (cons '() (cons i135f@b i1360@b*))))))))))) i1353@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1351@t))))))) (set! i2835@id46@guard-macro id46@guard-macro) (set! id48@define-enumeration-macro (lambda (i13cb@stx) (letrec* ((i13ce@set? (lambda (i13e7@x) (or (null? i13e7@x) (and (not (memq (car i13e7@x) (cdr i13e7@x))) (i13ce@set? (cdr i13e7@x)))))) (i13d0@remove-dups (lambda (i13e5@ls) (if (null? i13e5@ls) '() (cons (car i13e5@ls) (i13d0@remove-dups (remq (car i13e5@ls) (cdr i13e5@ls)))))))) (let ((i13d1@t i13cb@stx)) (let ((i13d3@ls/false (id78@syntax-dispatch i13d1@t '(_ any each-any any)))) (if (and i13d3@ls/false (apply (lambda (i13d5@name i13d6@id* i13d7@maker) (and (ib71@id? i13d5@name) (ib71@id? i13d7@maker) (for-all ib71@id? i13d6@id*))) i13d3@ls/false)) (apply (lambda (i13db@name i13dc@id* i13dd@maker) (let ((i13e1@name* (i13d0@remove-dups (ie5e@syntax->datum i13dc@id*))) (i13e2@mk (gensym))) (id2e@bless (list 'begin (list 'define i13e2@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote i13e1@name*)))) (list 'define-syntax i13db@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote i13e1@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote i13db@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax i13dd@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote i13dd@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote i13e1@name*)) (cons 'syntax-violation (cons (list 'quote i13dd@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons i13e2@mk '('(n* ...))))))))))))) i13d3@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i13d1@t))))))) (set! i2836@id48@define-enumeration-macro id48@define-enumeration-macro) (set! id4a@time-macro (lambda (i13e9@stx) (let ((i13eb@t i13e9@stx)) (let ((i13ed@ls/false (id78@syntax-dispatch i13eb@t '(_ any)))) (if i13ed@ls/false (apply (lambda (i13ef@expr) (id2e@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() i13ef@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) i13ed@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i13eb@t)))))) (set! i2837@id4a@time-macro id4a@time-macro) (set! id4c@delay-macro (lambda (i13f1@stx) (let ((i13f3@t i13f1@stx)) (let ((i13f5@ls/false (id78@syntax-dispatch i13f3@t '(_ any)))) (if i13f5@ls/false (apply (lambda (i13f7@expr) (id2e@bless (list 'make-promise (list 'lambda '() i13f7@expr)))) i13f5@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i13f3@t)))))) (set! i2838@id4c@delay-macro id4c@delay-macro) (set! id4e@assert-macro (lambda (i13f9@stx) (let ((i13fb@t i13f9@stx)) (let ((i13fd@ls/false (id78@syntax-dispatch i13fb@t '(_ any)))) (if i13fd@ls/false (apply (lambda (i13ff@expr) (let ((i1401@pos (or (ie50@expression-position i13f9@stx) (ie50@expression-position i13ff@expr)))) (id2e@bless (list 'let (list (list 'x i13ff@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote i13ff@expr) (list 'quote i1401@pos))))))) i13fd@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i13fb@t)))))) (set! i2839@id4e@assert-macro id4e@assert-macro) (set! id50@endianness-macro (lambda (i1403@stx) (let ((i1405@t i1403@stx)) (let ((i1407@ls/false (id78@syntax-dispatch i1405@t '(_ any)))) (if i1407@ls/false (apply (lambda (i1409@e) (let ((i140b@t (ie5e@syntax->datum i1409@e))) (if (memv i140b@t '(little)) (id2e@bless ''little) (if (memv i140b@t '(big)) (id2e@bless ''big) (ie58@syntax-violation '#f '"endianness must be big or little" i1403@stx))))) i1407@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1405@t)))))) (set! i283a@id50@endianness-macro id50@endianness-macro) (set! id52@identifier-syntax-macro (lambda (i140d@stx) (let ((i140f@t i140d@stx)) (let ((i1411@ls/false (id78@syntax-dispatch i140f@t '(_ any)))) (if i1411@ls/false (apply (lambda (i1413@expr) (id2e@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax i1413@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax i1413@expr) '((syntax (e* ...)))))))))) i1411@ls/false) (let ((i1415@t i140f@t)) (let ((i1417@ls/false (id78@syntax-dispatch i1415@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and i1417@ls/false (apply (lambda (i1419@id1 i141a@expr1 i141b@id2 i141c@expr2 i141d@expr3) (and (ib71@id? i1419@id1) (ib71@id? i141b@id2) (ib71@id? i141c@expr2))) i1417@ls/false)) (apply (lambda (i1423@id1 i1424@expr1 i1425@id2 i1426@expr2 i1427@expr3) (id2e@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax i1424@expr1)) (list (list 'set! 'id i1426@expr2) (list 'syntax i1427@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons i1424@expr1 '(e* ...))))))))) i1417@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1415@t))))))))) (set! i283b@id52@identifier-syntax-macro id52@identifier-syntax-macro) (set! id54@do-macro (lambda (i142d@stx) (letrec* ((i1430@bind (lambda (i1447@x) (let ((i1449@t i1447@x)) (let ((i144b@ls/false (id78@syntax-dispatch i1449@t '(any any)))) (if i144b@ls/false (apply (lambda (i144d@x i144e@init) (list i144d@x i144e@init i144d@x)) i144b@ls/false) (let ((i1451@t i1449@t)) (let ((i1453@ls/false (id78@syntax-dispatch i1451@t '(any any any)))) (if i1453@ls/false (apply (lambda (i1455@x i1456@init i1457@step) (list i1455@x i1456@init i1457@step)) i1453@ls/false) (let ((i145b@t i1451@t)) (let ((i145d@ls/false (id78@syntax-dispatch i145b@t '_))) (if i145d@ls/false (apply (lambda () (ie58@syntax-violation '#f '"invalid binding" i142d@stx)) i145d@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i145b@t))))))))))))) (let ((i1431@t i142d@stx)) (let ((i1433@ls/false (id78@syntax-dispatch i1431@t '(_ each-any (any . each-any) . each-any)))) (if i1433@ls/false (apply (lambda (i1435@binding* i1436@test i1437@expr* i1438@command*) (let ((i143d@t (map i1430@bind i1435@binding*))) (let ((i143f@ls/false (id78@syntax-dispatch i143d@t '#(each (any any any))))) (if i143f@ls/false (apply (lambda (i1441@x* i1442@init* i1443@step*) (if (ib79@valid-bound-ids? i1441@x*) (id2e@bless (list 'letrec (list (list 'loop (list 'lambda i1441@x* (list 'if i1436@test (cons 'begin (cons '(if #f #f) i1437@expr*)) (cons 'begin (append i1438@command* (list (cons 'loop i1443@step*)))))))) (cons 'loop i1442@init*))) (ie58@syntax-violation '#f '"invalid bindings" i142d@stx))) i143f@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i143d@t))))) i1433@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1431@t))))))) (set! i283c@id54@do-macro id54@do-macro) (set! id56@let*-macro (lambda (i145f@stx) (let ((i1461@t i145f@stx)) (let ((i1463@ls/false (id78@syntax-dispatch i1461@t '(_ #(each (any any)) any . each-any)))) (if (and i1463@ls/false (apply (lambda (i1465@lhs* i1466@rhs* i1467@b i1468@b*) (for-all ib71@id? i1465@lhs*)) i1463@ls/false)) (apply (lambda (i146d@lhs* i146e@rhs* i146f@b i1470@b*) (id2e@bless (let i1477@f ((i1475@x* (map list i146d@lhs* i146e@rhs*))) (if (null? i1475@x*) (cons 'let (cons '() (cons i146f@b i1470@b*))) (list 'let (list (car i1475@x*)) (i1477@f (cdr i1475@x*))))))) i1463@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1461@t)))))) (set! i283d@id56@let*-macro id56@let*-macro) (set! id58@or-macro (lambda (i1479@stx) (let ((i147b@t i1479@stx)) (let ((i147d@ls/false (id78@syntax-dispatch i147b@t '(_)))) (if i147d@ls/false (apply (lambda () '#f) i147d@ls/false) (let ((i147f@t i147b@t)) (let ((i1481@ls/false (id78@syntax-dispatch i147f@t '(_ any . each-any)))) (if i1481@ls/false (apply (lambda (i1483@e i1484@e*) (id2e@bless (let i148b@f ((i1487@e i1483@e) (i1488@e* i1484@e*)) (if (null? i1488@e*) (list 'begin '#f i1487@e) (list 'let (list (list 't i1487@e)) (list 'if 't 't (i148b@f (car i1488@e*) (cdr i1488@e*)))))))) i1481@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i147f@t))))))))) (set! i283e@id58@or-macro id58@or-macro) (set! id5a@and-macro (lambda (i148d@stx) (let ((i148f@t i148d@stx)) (let ((i1491@ls/false (id78@syntax-dispatch i148f@t '(_)))) (if i1491@ls/false (apply (lambda () '#t) i1491@ls/false) (let ((i1493@t i148f@t)) (let ((i1495@ls/false (id78@syntax-dispatch i1493@t '(_ any . each-any)))) (if i1495@ls/false (apply (lambda (i1497@e i1498@e*) (id2e@bless (let i149f@f ((i149b@e i1497@e) (i149c@e* i1498@e*)) (if (null? i149c@e*) (list 'begin '#f i149b@e) (cons 'if (cons i149b@e (cons (i149f@f (car i149c@e*) (cdr i149c@e*)) '(#f)))))))) i1495@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1493@t))))))))) (set! i283f@id5a@and-macro id5a@and-macro) (set! id5c@cond-macro (lambda (i14a1@stx) (let ((i14a3@t i14a1@stx)) (let ((i14a5@ls/false (id78@syntax-dispatch i14a3@t '(_ any . each-any)))) (if i14a5@ls/false (apply (lambda (i14a7@cls i14a8@cls*) (id2e@bless (let i14af@f ((i14ab@cls i14a7@cls) (i14ac@cls* i14a8@cls*)) (if (null? i14ac@cls*) (let ((i14b1@t i14ab@cls)) (let ((i14b3@ls/false (id78@syntax-dispatch i14b1@t '(#(scheme-id else) any . each-any)))) (if i14b3@ls/false (apply (lambda (i14b5@e i14b6@e*) (cons 'begin (cons i14b5@e i14b6@e*))) i14b3@ls/false) (let ((i14b9@t i14b1@t)) (let ((i14bb@ls/false (id78@syntax-dispatch i14b9@t '(any #(scheme-id =>) any)))) (if i14bb@ls/false (apply (lambda (i14bd@e i14be@p) (list 'let (list (list 't i14bd@e)) (list 'if 't (cons i14be@p '(t))))) i14bb@ls/false) (let ((i14c1@t i14b9@t)) (let ((i14c3@ls/false (id78@syntax-dispatch i14c1@t '(any)))) (if i14c3@ls/false (apply (lambda (i14c5@e) (cons 'or (cons i14c5@e '((if #f #f))))) i14c3@ls/false) (let ((i14c7@t i14c1@t)) (let ((i14c9@ls/false (id78@syntax-dispatch i14c7@t '(any . each-any)))) (if i14c9@ls/false (apply (lambda (i14cb@e i14cc@e*) (list 'if i14cb@e (cons 'begin i14cc@e*))) i14c9@ls/false) (let ((i14cf@t i14c7@t)) (let ((i14d1@ls/false (id78@syntax-dispatch i14cf@t '_))) (if i14d1@ls/false (apply (lambda () (ie58@syntax-violation '#f '"invalid last clause" i14a1@stx)) i14d1@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i14cf@t)))))))))))))))) (let ((i14d3@t i14ab@cls)) (let ((i14d5@ls/false (id78@syntax-dispatch i14d3@t '(#(scheme-id else) any . each-any)))) (if i14d5@ls/false (apply (lambda (i14d7@e i14d8@e*) (ie58@syntax-violation '#f '"incorrect position of keyword else" i14a1@stx)) i14d5@ls/false) (let ((i14db@t i14d3@t)) (let ((i14dd@ls/false (id78@syntax-dispatch i14db@t '(any #(scheme-id =>) any)))) (if i14dd@ls/false (apply (lambda (i14df@e i14e0@p) (list 'let (list (list 't i14df@e)) (list 'if 't (cons i14e0@p '(t)) (i14af@f (car i14ac@cls*) (cdr i14ac@cls*))))) i14dd@ls/false) (let ((i14e3@t i14db@t)) (let ((i14e5@ls/false (id78@syntax-dispatch i14e3@t '(any)))) (if i14e5@ls/false (apply (lambda (i14e7@e) (list 'or i14e7@e (i14af@f (car i14ac@cls*) (cdr i14ac@cls*)))) i14e5@ls/false) (let ((i14e9@t i14e3@t)) (let ((i14eb@ls/false (id78@syntax-dispatch i14e9@t '(any . each-any)))) (if i14eb@ls/false (apply (lambda (i14ed@e i14ee@e*) (list 'if i14ed@e (cons 'begin i14ee@e*) (i14af@f (car i14ac@cls*) (cdr i14ac@cls*)))) i14eb@ls/false) (let ((i14f1@t i14e9@t)) (let ((i14f3@ls/false (id78@syntax-dispatch i14f1@t '_))) (if i14f3@ls/false (apply (lambda () (ie58@syntax-violation '#f '"invalid last clause" i14a1@stx)) i14f3@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i14f1@t)))))))))))))))))))) i14a5@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i14a3@t)))))) (set! i2840@id5c@cond-macro id5c@cond-macro) (set! id5e@do-include (lambda (i14f5@stx i14f6@id i14f7@filename) (let ((i14fb@filename (ib85@stx->datum i14f7@filename))) (begin (if (not (and (string? i14fb@filename) (ib71@id? i14f6@id))) (ie58@syntax-violation '#f '"invalid syntax" i14f5@stx) (void)) (cons (id2e@bless 'begin) (with-input-from-file i14fb@filename (lambda () (let i14ff@f ((i14fd@ls '())) (let ((i1501@x (i6b3@i583@read-annotated))) (if (eof-object? i1501@x) (reverse i14fd@ls) (i14ff@f (cons (ib51@datum->stx i14f6@id i1501@x) i14fd@ls)))))))))))) (set! i2841@id5e@do-include id5e@do-include) (set! id60@include-macro (lambda (i1503@e) (let ((i1505@t i1503@e)) (let ((i1507@ls/false (id78@syntax-dispatch i1505@t '(any any)))) (if i1507@ls/false (apply (lambda (i1509@id i150a@filename) (id5e@do-include i1503@e i1509@id i150a@filename)) i1507@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1505@t)))))) (set! i2842@id60@include-macro id60@include-macro) (set! id62@include-into-macro (lambda (i150d@e) (let ((i150f@t i150d@e)) (let ((i1511@ls/false (id78@syntax-dispatch i150f@t '(_ any any)))) (if i1511@ls/false (apply (lambda (i1513@id i1514@filename) (id5e@do-include i150d@e i1513@id i1514@filename)) i1511@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i150f@t)))))) (set! i2843@id62@include-into-macro id62@include-into-macro) (set! id64@syntax-rules-macro (lambda (i1517@e) (let ((i1519@t i1517@e)) (let ((i151b@ls/false (id78@syntax-dispatch i1519@t '(_ each-any . #(each (any any)))))) (if i151b@ls/false (apply (lambda (i151d@lits i151e@pat* i151f@tmp*) (begin (id7e@verify-literals i151d@lits i1517@e) (id2e@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons i151d@lits (map (lambda (i1523@pat i1524@tmp) (let ((i1527@t i1523@pat)) (let ((i1529@ls/false (id78@syntax-dispatch i1527@t '(_ . any)))) (if i1529@ls/false (apply (lambda (i152b@rest) (list (cons 'g i152b@rest) (list 'syntax i1524@tmp))) i1529@ls/false) (let ((i152d@t i1527@t)) (let ((i152f@ls/false (id78@syntax-dispatch i152d@t '_))) (if i152f@ls/false (apply (lambda () (ie58@syntax-violation '#f '"invalid syntax-rules pattern" i1517@e i1523@pat)) i152f@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i152d@t)))))))) i151e@pat* i151f@tmp*)))))))) i151b@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1519@t)))))) (set! i2844@id64@syntax-rules-macro id64@syntax-rules-macro) (set! id66@quasiquote-macro (letrec* ((i1532@datum (lambda (i1633@x) (list (id00@scheme-stx 'quote) (ib59@mkstx i1633@x '() '() '())))) (i154e@quasicons* (lambda (i162b@x i162c@y) (let i1631@f ((i162f@x i162b@x)) (if (null? i162f@x) i162c@y (i1550@quasicons (car i162f@x) (i1631@f (cdr i162f@x))))))) (i1550@quasicons (lambda (i1605@x i1606@y) (let ((i1609@t i1606@y)) (let ((i160b@ls/false (id78@syntax-dispatch i1609@t '(#(scheme-id quote) any)))) (if i160b@ls/false (apply (lambda (i160d@dy) (let ((i160f@t i1605@x)) (let ((i1611@ls/false (id78@syntax-dispatch i160f@t '(#(scheme-id quote) any)))) (if i1611@ls/false (apply (lambda (i1613@dx) (list (id00@scheme-stx 'quote) (cons i1613@dx i160d@dy))) i1611@ls/false) (let ((i1615@t i160f@t)) (let ((i1617@ls/false (id78@syntax-dispatch i1615@t '_))) (if i1617@ls/false (apply (lambda () (let ((i1619@t i160d@dy)) (let ((i161b@ls/false (id78@syntax-dispatch i1619@t '()))) (if i161b@ls/false (apply (lambda () (list (id00@scheme-stx 'list) i1605@x)) i161b@ls/false) (let ((i161d@t i1619@t)) (let ((i161f@ls/false (id78@syntax-dispatch i161d@t '_))) (if i161f@ls/false (apply (lambda () (list (id00@scheme-stx 'cons) i1605@x i1606@y)) i161f@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i161d@t)))))))) i1617@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1615@t)))))))) i160b@ls/false) (let ((i1621@t i1609@t)) (let ((i1623@ls/false (id78@syntax-dispatch i1621@t '(#(scheme-id list) . each-any)))) (if i1623@ls/false (apply (lambda (i1625@stuff) (cons* (id00@scheme-stx 'list) i1605@x i1625@stuff)) i1623@ls/false) (let ((i1627@t i1621@t)) (let ((i1629@ls/false (id78@syntax-dispatch i1627@t '_))) (if i1629@ls/false (apply (lambda () (list (id00@scheme-stx 'cons) i1605@x i1606@y)) i1629@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1627@t)))))))))))) (i1552@quasiappend (lambda (i15eb@x i15ec@y) (let ((i15ef@ls (let i15f3@f ((i15f1@x i15eb@x)) (if (null? i15f1@x) (let ((i15f5@t i15ec@y)) (let ((i15f7@ls/false (id78@syntax-dispatch i15f5@t '(#(scheme-id quote) ())))) (if i15f7@ls/false (apply (lambda () '()) i15f7@ls/false) (let ((i15f9@t i15f5@t)) (let ((i15fb@ls/false (id78@syntax-dispatch i15f9@t '_))) (if i15fb@ls/false (apply (lambda () (list i15ec@y)) i15fb@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i15f9@t))))))) (let ((i15fd@t (car i15f1@x))) (let ((i15ff@ls/false (id78@syntax-dispatch i15fd@t '(#(scheme-id quote) ())))) (if i15ff@ls/false (apply (lambda () (i15f3@f (cdr i15f1@x))) i15ff@ls/false) (let ((i1601@t i15fd@t)) (let ((i1603@ls/false (id78@syntax-dispatch i1601@t '_))) (if i1603@ls/false (apply (lambda () (cons (car i15f1@x) (i15f3@f (cdr i15f1@x)))) i1603@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1601@t))))))))))) (if (null? i15ef@ls) (list (id00@scheme-stx 'quote) '()) (if (null? (cdr i15ef@ls)) (car i15ef@ls) (cons* (id00@scheme-stx 'append) i15ef@ls)))))) (i1554@quasivector (lambda (i15b9@x) (let ((i15bb@pat-x i15b9@x)) (let ((i15bd@t i15bb@pat-x)) (let ((i15bf@ls/false (id78@syntax-dispatch i15bd@t '(#(scheme-id quote) each-any)))) (if i15bf@ls/false (apply (lambda (i15c1@x*) (list (id00@scheme-stx 'quote) (list->vector i15c1@x*))) i15bf@ls/false) (let ((i15c3@t i15bd@t)) (let ((i15c5@ls/false (id78@syntax-dispatch i15c3@t '_))) (if i15c5@ls/false (apply (lambda () (let i15cd@f ((i15c7@x i15b9@x) (i15c8@k (lambda (i15cb@ls) (cons* (id00@scheme-stx 'vector) i15cb@ls)))) (let ((i15cf@t i15c7@x)) (let ((i15d1@ls/false (id78@syntax-dispatch i15cf@t '(#(scheme-id quote) each-any)))) (if i15d1@ls/false (apply (lambda (i15d3@x*) (i15c8@k (map (lambda (i15d5@x) (list (id00@scheme-stx 'quote) i15d5@x)) i15d3@x*))) i15d1@ls/false) (let ((i15d7@t i15cf@t)) (let ((i15d9@ls/false (id78@syntax-dispatch i15d7@t '(#(scheme-id list) . each-any)))) (if i15d9@ls/false (apply (lambda (i15db@x*) (i15c8@k i15db@x*)) i15d9@ls/false) (let ((i15dd@t i15d7@t)) (let ((i15df@ls/false (id78@syntax-dispatch i15dd@t '(#(scheme-id cons) any any)))) (if i15df@ls/false (apply (lambda (i15e1@x i15e2@y) (i15cd@f i15e2@y (lambda (i15e5@ls) (i15c8@k (cons i15e1@x i15e5@ls))))) i15df@ls/false) (let ((i15e7@t i15dd@t)) (let ((i15e9@ls/false (id78@syntax-dispatch i15e7@t '_))) (if i15e9@ls/false (apply (lambda () (list (id00@scheme-stx 'list->vector) i15bb@pat-x)) i15e9@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i15e7@t))))))))))))))) i15c5@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i15c3@t)))))))))) (i1556@vquasi (lambda (i1597@p i1598@lev) (let ((i159b@t i1597@p)) (let ((i159d@ls/false (id78@syntax-dispatch i159b@t '(any . any)))) (if i159d@ls/false (apply (lambda (i159f@p i15a0@q) (let ((i15a3@t i159f@p)) (let ((i15a5@ls/false (id78@syntax-dispatch i15a3@t '(#(scheme-id unquote) . each-any)))) (if i15a5@ls/false (apply (lambda (i15a7@p) (if (= i1598@lev '0) (i154e@quasicons* i15a7@p (i1556@vquasi i15a0@q i1598@lev)) (i1550@quasicons (i1550@quasicons (i1532@datum 'unquote) (i1558@quasi i15a7@p (- i1598@lev '1))) (i1556@vquasi i15a0@q i1598@lev)))) i15a5@ls/false) (let ((i15a9@t i15a3@t)) (let ((i15ab@ls/false (id78@syntax-dispatch i15a9@t '(#(scheme-id unquote-splicing) . each-any)))) (if i15ab@ls/false (apply (lambda (i15ad@p) (if (= i1598@lev '0) (i1552@quasiappend i15ad@p (i1556@vquasi i15a0@q i1598@lev)) (i1550@quasicons (i1550@quasicons (i1532@datum 'unquote-splicing) (i1558@quasi i15ad@p (- i1598@lev '1))) (i1556@vquasi i15a0@q i1598@lev)))) i15ab@ls/false) (let ((i15af@t i15a9@t)) (let ((i15b1@ls/false (id78@syntax-dispatch i15af@t 'any))) (if i15b1@ls/false (apply (lambda (i15b3@p) (i1550@quasicons (i1558@quasi i15b3@p i1598@lev) (i1556@vquasi i15a0@q i1598@lev))) i15b1@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i15af@t))))))))))) i159d@ls/false) (let ((i15b5@t i159b@t)) (let ((i15b7@ls/false (id78@syntax-dispatch i15b5@t '()))) (if i15b7@ls/false (apply (lambda () (list (id00@scheme-stx 'quote) '())) i15b7@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i15b5@t))))))))) (i1558@quasi (lambda (i1561@p i1562@lev) (let ((i1565@t i1561@p)) (let ((i1567@ls/false (id78@syntax-dispatch i1565@t '(#(scheme-id unquote) any)))) (if i1567@ls/false (apply (lambda (i1569@p) (if (= i1562@lev '0) i1569@p (i1550@quasicons (i1532@datum 'unquote) (i1558@quasi (list i1569@p) (- i1562@lev '1))))) i1567@ls/false) (let ((i156b@t i1565@t)) (let ((i156d@ls/false (id78@syntax-dispatch i156b@t '((#(scheme-id unquote) . each-any) . any)))) (if i156d@ls/false (apply (lambda (i156f@p i1570@q) (if (= i1562@lev '0) (i154e@quasicons* i156f@p (i1558@quasi i1570@q i1562@lev)) (i1550@quasicons (i1550@quasicons (i1532@datum 'unquote) (i1558@quasi i156f@p (- i1562@lev '1))) (i1558@quasi i1570@q i1562@lev)))) i156d@ls/false) (let ((i1573@t i156b@t)) (let ((i1575@ls/false (id78@syntax-dispatch i1573@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if i1575@ls/false (apply (lambda (i1577@p i1578@q) (if (= i1562@lev '0) (i1552@quasiappend i1577@p (i1558@quasi i1578@q i1562@lev)) (i1550@quasicons (i1550@quasicons (i1532@datum 'unquote-splicing) (i1558@quasi i1577@p (- i1562@lev '1))) (i1558@quasi i1578@q i1562@lev)))) i1575@ls/false) (let ((i157b@t i1573@t)) (let ((i157d@ls/false (id78@syntax-dispatch i157b@t '(#(scheme-id quasiquote) any)))) (if i157d@ls/false (apply (lambda (i157f@p) (i1550@quasicons (i1532@datum 'quasiquote) (i1558@quasi (list i157f@p) (+ i1562@lev '1)))) i157d@ls/false) (let ((i1581@t i157b@t)) (let ((i1583@ls/false (id78@syntax-dispatch i1581@t '(any . any)))) (if i1583@ls/false (apply (lambda (i1585@p i1586@q) (i1550@quasicons (i1558@quasi i1585@p i1562@lev) (i1558@quasi i1586@q i1562@lev))) i1583@ls/false) (let ((i1589@t i1581@t)) (let ((i158b@ls/false (id78@syntax-dispatch i1589@t '#(vector each-any)))) (if (and i158b@ls/false (apply (lambda (i158d@x) (not (ib3d@stx? i158d@x))) i158b@ls/false)) (apply (lambda (i158f@x) (i1554@quasivector (i1556@vquasi i158f@x i1562@lev))) i158b@ls/false) (let ((i1591@t i1589@t)) (let ((i1593@ls/false (id78@syntax-dispatch i1591@t 'any))) (if i1593@ls/false (apply (lambda (i1595@p) (list (id00@scheme-stx 'quote) i1595@p)) i1593@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1591@t))))))))))))))))))))))))) (lambda (i1559@x) (let ((i155b@t i1559@x)) (let ((i155d@ls/false (id78@syntax-dispatch i155b@t '(_ any)))) (if i155d@ls/false (apply (lambda (i155f@e) (i1558@quasi i155f@e '0)) i155d@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i155b@t))))))) (set! i2845@id66@quasiquote-macro id66@quasiquote-macro) (set! id68@quasisyntax-macro (letrec* ((i1636@quasi (lambda (i1651@p i1652@lev) (let ((i1655@t i1651@p)) (let ((i1657@ls/false (id78@syntax-dispatch i1655@t '(#(scheme-id unsyntax) any)))) (if i1657@ls/false (apply (lambda (i1659@p) (if (= i1652@lev '0) (let ((i165b@g (gensym))) (values (list i165b@g) (list i1659@p) i165b@g)) (call-with-values (lambda () (i1636@quasi i1659@p (- i1652@lev '1))) (lambda (i1663@i165e i1664@i1660 i1665@i1662) (let ((i1669@p i1665@i1662) (i166a@rhs* i1664@i1660) (i166b@lhs* i1663@i165e)) (values i166b@lhs* i166a@rhs* (list 'unsyntax i1669@p))))))) i1657@ls/false) (let ((i166f@t i1655@t)) (let ((i1671@ls/false (id78@syntax-dispatch i166f@t '#(scheme-id unsyntax)))) (if (and i1671@ls/false (apply (lambda () (= i1652@lev '0)) i1671@ls/false)) (apply (lambda () (ie58@syntax-violation '#f '"incorrect use of unsyntax" i1651@p)) i1671@ls/false) (let ((i1673@t i166f@t)) (let ((i1675@ls/false (id78@syntax-dispatch i1673@t '((#(scheme-id unsyntax) . each-any) . any)))) (if i1675@ls/false (apply (lambda (i1677@p* i1678@q) (call-with-values (lambda () (i1636@quasi i1678@q i1652@lev)) (lambda (i1681@i167c i1682@i167e i1683@i1680) (let ((i1687@q i1683@i1680) (i1688@rhs* i1682@i167e) (i1689@lhs* i1681@i167c)) (if (= i1652@lev '0) (let ((i168d@g* (map (lambda (i168f@x) (gensym)) i1677@p*))) (values (append i168d@g* i1689@lhs*) (append i1677@p* i1688@rhs*) (append i168d@g* i1687@q))) (call-with-values (lambda () (i1636@quasi i1677@p* (- i1652@lev '1))) (lambda (i1697@i1692 i1698@i1694 i1699@i1696) (let ((i169d@p* i1699@i1696) (i169e@rhs2* i1698@i1694) (i169f@lhs2* i1697@i1692)) (values (append i169f@lhs2* i1689@lhs*) (append i169e@rhs2* i1688@rhs*) (cons (cons 'unsyntax i169d@p*) i1687@q)))))))))) i1675@ls/false) (let ((i16a3@t i1673@t)) (let ((i16a5@ls/false (id78@syntax-dispatch i16a3@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if i16a5@ls/false (apply (lambda (i16a7@p* i16a8@q) (call-with-values (lambda () (i1636@quasi i16a8@q i1652@lev)) (lambda (i16b1@i16ac i16b2@i16ae i16b3@i16b0) (let ((i16b7@q i16b3@i16b0) (i16b8@rhs* i16b2@i16ae) (i16b9@lhs* i16b1@i16ac)) (if (= i1652@lev '0) (let ((i16bd@g* (map (lambda (i16bf@x) (gensym)) i16a7@p*))) (values (append (map (lambda (i16c1@g) (cons i16c1@g '(...))) i16bd@g*) i16b9@lhs*) (append i16a7@p* i16b8@rhs*) (append (apply append (map (lambda (i16c3@g) (cons i16c3@g '(...))) i16bd@g*)) i16b7@q))) (call-with-values (lambda () (i1636@quasi i16a7@p* (- i1652@lev '1))) (lambda (i16cb@i16c6 i16cc@i16c8 i16cd@i16ca) (let ((i16d1@p* i16cd@i16ca) (i16d2@rhs2* i16cc@i16c8) (i16d3@lhs2* i16cb@i16c6)) (values (append i16d3@lhs2* i16b9@lhs*) (append i16d2@rhs2* i16b8@rhs*) (cons (cons 'unsyntax-splicing i16d1@p*) i16b7@q)))))))))) i16a5@ls/false) (let ((i16d7@t i16a3@t)) (let ((i16d9@ls/false (id78@syntax-dispatch i16d7@t '#(scheme-id unsyntax-splicing)))) (if (and i16d9@ls/false (apply (lambda () (= i1652@lev '0)) i16d9@ls/false)) (apply (lambda () (ie58@syntax-violation '#f '"incorrect use of unsyntax-splicing" i1651@p)) i16d9@ls/false) (let ((i16db@t i16d7@t)) (let ((i16dd@ls/false (id78@syntax-dispatch i16db@t '(#(scheme-id quasisyntax) any)))) (if i16dd@ls/false (apply (lambda (i16df@p) (call-with-values (lambda () (i1636@quasi i16df@p (+ i1652@lev '1))) (lambda (i16e7@i16e2 i16e8@i16e4 i16e9@i16e6) (let ((i16ed@p i16e9@i16e6) (i16ee@rhs* i16e8@i16e4) (i16ef@lhs* i16e7@i16e2)) (values i16ef@lhs* i16ee@rhs* (list 'quasisyntax i16ed@p)))))) i16dd@ls/false) (let ((i16f3@t i16db@t)) (let ((i16f5@ls/false (id78@syntax-dispatch i16f3@t '(any . any)))) (if i16f5@ls/false (apply (lambda (i16f7@p i16f8@q) (call-with-values (lambda () (i1636@quasi i16f7@p i1652@lev)) (lambda (i1707@i16fc i1708@i16fe i1709@i1700) (call-with-values (lambda () (i1636@quasi i16f8@q i1652@lev)) (lambda (i170d@i1702 i170e@i1704 i170f@i1706) (let ((i1713@q i170f@i1706) (i1714@rhs2* i170e@i1704) (i1715@lhs2* i170d@i1702) (i1716@p i1709@i1700) (i1717@rhs* i1708@i16fe) (i1718@lhs* i1707@i16fc)) (values (append i1715@lhs2* i1718@lhs*) (append i1714@rhs2* i1717@rhs*) (cons i1716@p i1713@q)))))))) i16f5@ls/false) (let ((i171f@t i16f3@t)) (let ((i1721@ls/false (id78@syntax-dispatch i171f@t '#(vector each-any)))) (if i1721@ls/false (apply (lambda (i1723@x*) (call-with-values (lambda () (i1636@quasi i1723@x* i1652@lev)) (lambda (i172b@i1726 i172c@i1728 i172d@i172a) (let ((i1731@x* i172d@i172a) (i1732@rhs* i172c@i1728) (i1733@lhs* i172b@i1726)) (values i1733@lhs* i1732@rhs* (list->vector i1731@x*)))))) i1721@ls/false) (let ((i1737@t i171f@t)) (let ((i1739@ls/false (id78@syntax-dispatch i1737@t '_))) (if i1739@ls/false (apply (lambda () (values '() '() i1651@p)) i1739@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1737@t))))))))))))))))))))))))))))))) (lambda (i1637@x) (let ((i1639@t i1637@x)) (let ((i163b@ls/false (id78@syntax-dispatch i1639@t '(_ any)))) (if i163b@ls/false (apply (lambda (i163d@e) (call-with-values (lambda () (i1636@quasi i163d@e '0)) (lambda (i1645@i1640 i1646@i1642 i1647@i1644) (let ((i164b@v i1647@i1644) (i164c@rhs* i1646@i1642) (i164d@lhs* i1645@i1640)) (id2e@bless (list 'syntax-case (cons 'list i164c@rhs*) '() (list i164d@lhs* (list 'syntax i164b@v)))))))) i163b@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1639@t))))))) (set! i2846@id68@quasisyntax-macro id68@quasisyntax-macro) (set! id6a@define-struct-macro (lambda (i173b@stx) (ie58@syntax-violation '#f '"define-struct not supported" i173b@stx))) (set! i2847@id6a@define-struct-macro id6a@define-struct-macro) (set! id6c@define-record-type-macro (lambda (i173d@x) (letrec* ((i1740@id (lambda (i1933@ctxt . i1935@str*) (ie5c@datum->syntax i1933@ctxt (string->symbol (apply string-append (map (lambda (i1937@x) (if (symbol? i1937@x) (symbol->string i1937@x) (if (string? i1937@x) i1937@x (assertion-violation 'define-record-type '"BUG")))) i1935@str*)))))) (i1742@get-record-name (lambda (i1921@spec) (let ((i1923@t i1921@spec)) (let ((i1925@ls/false (id78@syntax-dispatch i1923@t '(any any any)))) (if i1925@ls/false (apply (lambda (i1927@foo i1928@make-foo i1929@foo?) i1927@foo) i1925@ls/false) (let ((i192d@t i1923@t)) (let ((i192f@ls/false (id78@syntax-dispatch i192d@t 'any))) (if i192f@ls/false (apply (lambda (i1931@foo) i1931@foo) i192f@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i192d@t))))))))) (i1744@get-record-constructor-name (lambda (i190d@spec) (let ((i190f@t i190d@spec)) (let ((i1911@ls/false (id78@syntax-dispatch i190f@t '(any any any)))) (if i1911@ls/false (apply (lambda (i1913@foo i1914@make-foo i1915@foo?) i1914@make-foo) i1911@ls/false) (let ((i1919@t i190f@t)) (let ((i191b@ls/false (id78@syntax-dispatch i1919@t 'any))) (if (and i191b@ls/false (apply (lambda (i191d@foo) (ib71@id? i191d@foo)) i191b@ls/false)) (apply (lambda (i191f@foo) (i1740@id i191f@foo '"make-" (ib85@stx->datum i191f@foo))) i191b@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1919@t))))))))) (i1746@get-record-predicate-name (lambda (i18f9@spec) (let ((i18fb@t i18f9@spec)) (let ((i18fd@ls/false (id78@syntax-dispatch i18fb@t '(any any any)))) (if i18fd@ls/false (apply (lambda (i18ff@foo i1900@make-foo i1901@foo?) i1901@foo?) i18fd@ls/false) (let ((i1905@t i18fb@t)) (let ((i1907@ls/false (id78@syntax-dispatch i1905@t 'any))) (if (and i1907@ls/false (apply (lambda (i1909@foo) (ib71@id? i1909@foo)) i1907@ls/false)) (apply (lambda (i190b@foo) (i1740@id i190b@foo (ib85@stx->datum i190b@foo) '"?")) i1907@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1905@t))))))))) (i1748@get-clause (lambda (i18e7@id i18e8@ls) (let ((i18eb@t i18e8@ls)) (let ((i18ed@ls/false (id78@syntax-dispatch i18eb@t '()))) (if i18ed@ls/false (apply (lambda () '#f) i18ed@ls/false) (let ((i18ef@t i18eb@t)) (let ((i18f1@ls/false (id78@syntax-dispatch i18ef@t '((any . any) . any)))) (if i18f1@ls/false (apply (lambda (i18f3@x i18f4@rest i18f5@ls) (if (ib77@free-id=? (id2e@bless i18e7@id) i18f3@x) (cons i18f3@x i18f4@rest) (i1748@get-clause i18e7@id i18f5@ls))) i18f1@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i18ef@t))))))))) (i174a@foo-rtd-code (lambda (i1895@name i1896@clause* i1897@parent-rtd-code) (letrec* ((i189c@convert-field-spec* (lambda (i18cd@ls) (list->vector (map (lambda (i18cf@x) (let ((i18d1@t i18cf@x)) (let ((i18d3@ls/false (id78@syntax-dispatch i18d1@t '(#(scheme-id mutable) any . any)))) (if i18d3@ls/false (apply (lambda (i18d5@name i18d6@rest) (list 'mutable i18d5@name)) i18d3@ls/false) (let ((i18d9@t i18d1@t)) (let ((i18db@ls/false (id78@syntax-dispatch i18d9@t '(#(scheme-id immutable) any . any)))) (if i18db@ls/false (apply (lambda (i18dd@name i18de@rest) (list 'immutable i18dd@name)) i18db@ls/false) (let ((i18e1@t i18d9@t)) (let ((i18e3@ls/false (id78@syntax-dispatch i18e1@t 'any))) (if i18e3@ls/false (apply (lambda (i18e5@name) (list 'immutable i18e5@name)) i18e3@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i18e1@t))))))))))) i18cd@ls))))) (let ((i189d@uid-code (let ((i18a5@t (i1748@get-clause 'nongenerative i1896@clause*))) (let ((i18a7@ls/false (id78@syntax-dispatch i18a5@t '(_)))) (if i18a7@ls/false (apply (lambda () (list 'quote (gensym))) i18a7@ls/false) (let ((i18a9@t i18a5@t)) (let ((i18ab@ls/false (id78@syntax-dispatch i18a9@t '(_ any)))) (if i18ab@ls/false (apply (lambda (i18ad@uid) (list 'quote i18ad@uid)) i18ab@ls/false) (let ((i18af@t i18a9@t)) (let ((i18b1@ls/false (id78@syntax-dispatch i18af@t '_))) (if i18b1@ls/false (apply (lambda () '#f) i18b1@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i18af@t))))))))))) (i189e@sealed? (let ((i18b3@t (i1748@get-clause 'sealed i1896@clause*))) (let ((i18b5@ls/false (id78@syntax-dispatch i18b3@t '(_ #(atom #t))))) (if i18b5@ls/false (apply (lambda () '#t) i18b5@ls/false) (let ((i18b7@t i18b3@t)) (let ((i18b9@ls/false (id78@syntax-dispatch i18b7@t '_))) (if i18b9@ls/false (apply (lambda () '#f) i18b9@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i18b7@t)))))))) (i189f@opaque? (let ((i18bb@t (i1748@get-clause 'opaque i1896@clause*))) (let ((i18bd@ls/false (id78@syntax-dispatch i18bb@t '(_ #(atom #t))))) (if i18bd@ls/false (apply (lambda () '#t) i18bd@ls/false) (let ((i18bf@t i18bb@t)) (let ((i18c1@ls/false (id78@syntax-dispatch i18bf@t '_))) (if i18c1@ls/false (apply (lambda () '#f) i18c1@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i18bf@t)))))))) (i18a0@fields (let ((i18c3@t (i1748@get-clause 'fields i1896@clause*))) (let ((i18c5@ls/false (id78@syntax-dispatch i18c3@t '(_ . each-any)))) (if i18c5@ls/false (apply (lambda (i18c7@field-spec*) (list 'quote (i189c@convert-field-spec* i18c7@field-spec*))) i18c5@ls/false) (let ((i18c9@t i18c3@t)) (let ((i18cb@ls/false (id78@syntax-dispatch i18c9@t '_))) (if i18cb@ls/false (apply (lambda () ''#()) i18cb@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i18c9@t))))))))) (id2e@bless (list 'make-record-type-descriptor (list 'quote i1895@name) i1897@parent-rtd-code i189d@uid-code i189e@sealed? i189f@opaque? i18a0@fields)))))) (i174c@parent-rtd-code (lambda (i187d@clause*) (let ((i187f@t (i1748@get-clause 'parent i187d@clause*))) (let ((i1881@ls/false (id78@syntax-dispatch i187f@t '(_ any)))) (if i1881@ls/false (apply (lambda (i1883@name) (list 'record-type-descriptor i1883@name)) i1881@ls/false) (let ((i1885@t i187f@t)) (let ((i1887@ls/false (id78@syntax-dispatch i1885@t '#(atom #f)))) (if i1887@ls/false (apply (lambda () (let ((i1889@t (i1748@get-clause 'parent-rtd i187d@clause*))) (let ((i188b@ls/false (id78@syntax-dispatch i1889@t '(_ any any)))) (if i188b@ls/false (apply (lambda (i188d@rtd i188e@rcd) i188d@rtd) i188b@ls/false) (let ((i1891@t i1889@t)) (let ((i1893@ls/false (id78@syntax-dispatch i1891@t '#(atom #f)))) (if i1893@ls/false (apply (lambda () '#f) i1893@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1891@t)))))))) i1887@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1885@t))))))))) (i174e@parent-rcd-code (lambda (i1865@clause*) (let ((i1867@t (i1748@get-clause 'parent i1865@clause*))) (let ((i1869@ls/false (id78@syntax-dispatch i1867@t '(_ any)))) (if i1869@ls/false (apply (lambda (i186b@name) (list 'record-constructor-descriptor i186b@name)) i1869@ls/false) (let ((i186d@t i1867@t)) (let ((i186f@ls/false (id78@syntax-dispatch i186d@t '#(atom #f)))) (if i186f@ls/false (apply (lambda () (let ((i1871@t (i1748@get-clause 'parent-rtd i1865@clause*))) (let ((i1873@ls/false (id78@syntax-dispatch i1871@t '(_ any any)))) (if i1873@ls/false (apply (lambda (i1875@rtd i1876@rcd) i1876@rcd) i1873@ls/false) (let ((i1879@t i1871@t)) (let ((i187b@ls/false (id78@syntax-dispatch i1879@t '#(atom #f)))) (if i187b@ls/false (apply (lambda () '#f) i187b@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1879@t)))))))) i186f@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i186d@t))))))))) (i1750@foo-rcd-code (lambda (i185d@clause* i185e@foo-rtd i185f@protocol i1860@parent-rcd-code) (list 'make-record-constructor-descriptor i185e@foo-rtd i1860@parent-rcd-code i185f@protocol))) (i1752@get-protocol-code (lambda (i1851@clause*) (let ((i1853@t (i1748@get-clause 'protocol i1851@clause*))) (let ((i1855@ls/false (id78@syntax-dispatch i1853@t '(_ any)))) (if i1855@ls/false (apply (lambda (i1857@expr) i1857@expr) i1855@ls/false) (let ((i1859@t i1853@t)) (let ((i185b@ls/false (id78@syntax-dispatch i1859@t '_))) (if i185b@ls/false (apply (lambda () '#f) i185b@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1859@t))))))))) (i1754@get-fields (lambda (i183f@clause*) (let ((i1841@t i183f@clause*)) (let ((i1843@ls/false (id78@syntax-dispatch i1841@t '()))) (if i1843@ls/false (apply (lambda () '()) i1843@ls/false) (let ((i1845@t i1841@t)) (let ((i1847@ls/false (id78@syntax-dispatch i1845@t '((#(scheme-id fields) . each-any) . _)))) (if i1847@ls/false (apply (lambda (i1849@f*) i1849@f*) i1847@ls/false) (let ((i184b@t i1845@t)) (let ((i184d@ls/false (id78@syntax-dispatch i184b@t '(_ . any)))) (if i184d@ls/false (apply (lambda (i184f@rest) (i1754@get-fields i184f@rest)) i184d@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i184b@t)))))))))))) (i1756@get-mutator-indices (lambda (i1827@fields) (let i182d@f ((i1829@fields i1827@fields) (i182a@i '0)) (let ((i182f@t i1829@fields)) (let ((i1831@ls/false (id78@syntax-dispatch i182f@t '()))) (if i1831@ls/false (apply (lambda () '()) i1831@ls/false) (let ((i1833@t i182f@t)) (let ((i1835@ls/false (id78@syntax-dispatch i1833@t '((#(scheme-id mutable) . _) . any)))) (if i1835@ls/false (apply (lambda (i1837@rest) (cons i182a@i (i182d@f i1837@rest (+ i182a@i '1)))) i1835@ls/false) (let ((i1839@t i1833@t)) (let ((i183b@ls/false (id78@syntax-dispatch i1839@t '(_ . any)))) (if i183b@ls/false (apply (lambda (i183d@rest) (i182d@f i183d@rest (+ i182a@i '1))) i183b@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1839@t))))))))))))) (i1758@get-mutators (lambda (i17fd@foo i17fe@fields) (letrec* ((i1802@gen-name (lambda (i1825@x) (ie5c@datum->syntax i17fd@foo (string->symbol (string-append (symbol->string (ie5e@syntax->datum i17fd@foo)) '"-" (symbol->string (ie5e@syntax->datum i1825@x)) '"-set!")))))) (let i1805@f ((i1803@fields i17fe@fields)) (let ((i1807@t i1803@fields)) (let ((i1809@ls/false (id78@syntax-dispatch i1807@t '()))) (if i1809@ls/false (apply (lambda () '()) i1809@ls/false) (let ((i180b@t i1807@t)) (let ((i180d@ls/false (id78@syntax-dispatch i180b@t '((#(scheme-id mutable) any any any) . any)))) (if i180d@ls/false (apply (lambda (i180f@name i1810@accessor i1811@mutator i1812@rest) (cons i1811@mutator (i1805@f i1812@rest))) i180d@ls/false) (let ((i1817@t i180b@t)) (let ((i1819@ls/false (id78@syntax-dispatch i1817@t '((#(scheme-id mutable) any) . any)))) (if i1819@ls/false (apply (lambda (i181b@name i181c@rest) (cons (i1802@gen-name i181b@name) (i1805@f i181c@rest))) i1819@ls/false) (let ((i181f@t i1817@t)) (let ((i1821@ls/false (id78@syntax-dispatch i181f@t '(_ . any)))) (if i1821@ls/false (apply (lambda (i1823@rest) (i1805@f i1823@rest)) i1821@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i181f@t))))))))))))))))) (i175a@get-accessors (lambda (i17b9@foo i17ba@fields) (letrec* ((i17be@gen-name (lambda (i17fb@x) (ie5c@datum->syntax i17b9@foo (string->symbol (string-append (symbol->string (ie5e@syntax->datum i17b9@foo)) '"-" (symbol->string (ie5e@syntax->datum i17fb@x)))))))) (map (lambda (i17bf@field) (let ((i17c1@t i17bf@field)) (let ((i17c3@ls/false (id78@syntax-dispatch i17c1@t '(#(scheme-id mutable) any any any)))) (if (and i17c3@ls/false (apply (lambda (i17c5@name i17c6@accessor i17c7@mutator) (ib71@id? i17c6@accessor)) i17c3@ls/false)) (apply (lambda (i17cb@name i17cc@accessor i17cd@mutator) i17cc@accessor) i17c3@ls/false) (let ((i17d1@t i17c1@t)) (let ((i17d3@ls/false (id78@syntax-dispatch i17d1@t '(#(scheme-id immutable) any any)))) (if (and i17d3@ls/false (apply (lambda (i17d5@name i17d6@accessor) (ib71@id? i17d6@accessor)) i17d3@ls/false)) (apply (lambda (i17d9@name i17da@accessor) i17da@accessor) i17d3@ls/false) (let ((i17dd@t i17d1@t)) (let ((i17df@ls/false (id78@syntax-dispatch i17dd@t '(#(scheme-id mutable) any)))) (if (and i17df@ls/false (apply (lambda (i17e1@name) (ib71@id? i17e1@name)) i17df@ls/false)) (apply (lambda (i17e3@name) (i17be@gen-name i17e3@name)) i17df@ls/false) (let ((i17e5@t i17dd@t)) (let ((i17e7@ls/false (id78@syntax-dispatch i17e5@t '(#(scheme-id immutable) any)))) (if (and i17e7@ls/false (apply (lambda (i17e9@name) (ib71@id? i17e9@name)) i17e7@ls/false)) (apply (lambda (i17eb@name) (i17be@gen-name i17eb@name)) i17e7@ls/false) (let ((i17ed@t i17e5@t)) (let ((i17ef@ls/false (id78@syntax-dispatch i17ed@t 'any))) (if (and i17ef@ls/false (apply (lambda (i17f1@name) (ib71@id? i17f1@name)) i17ef@ls/false)) (apply (lambda (i17f3@name) (i17be@gen-name i17f3@name)) i17ef@ls/false) (let ((i17f5@t i17ed@t)) (let ((i17f7@ls/false (id78@syntax-dispatch i17f5@t 'any))) (if i17f7@ls/false (apply (lambda (i17f9@others) (ie58@syntax-violation '#f '"invalid field spec" i17bf@field)) i17f7@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i17f5@t)))))))))))))))))))) i17ba@fields)))) (i175c@enumerate (lambda (i17b1@ls) (let i17b7@f ((i17b3@ls i17b1@ls) (i17b4@i '0)) (if (null? i17b3@ls) '() (cons i17b4@i (i17b7@f (cdr i17b3@ls) (+ i17b4@i '1))))))) (i175e@do-define-record (lambda (i1789@namespec i178a@clause*) (let ((i178d@foo (i1742@get-record-name i1789@namespec))) (let ((i178f@foo-rtd (gensym))) (let ((i1791@foo-rcd (gensym))) (let ((i1793@protocol (gensym))) (let ((i1795@make-foo (i1744@get-record-constructor-name i1789@namespec))) (let ((i1797@fields (i1754@get-fields i178a@clause*))) (let ((i1799@idx* (i175c@enumerate i1797@fields))) (let ((i179b@foo-x* (i175a@get-accessors i178d@foo i1797@fields))) (let ((i179d@set-foo-x!* (i1758@get-mutators i178d@foo i1797@fields))) (let ((i179f@set-foo-idx* (i1756@get-mutator-indices i1797@fields))) (let ((i17a1@foo? (i1746@get-record-predicate-name i1789@namespec))) (let ((i17a3@foo-rtd-code (i174a@foo-rtd-code i178d@foo i178a@clause* (i174c@parent-rtd-code i178a@clause*)))) (let ((i17a5@foo-rcd-code (i1750@foo-rcd-code i178a@clause* i178f@foo-rtd i1793@protocol (i174e@parent-rcd-code i178a@clause*)))) (let ((i17a7@protocol-code (i1752@get-protocol-code i178a@clause*))) (id2e@bless (cons 'begin (cons (list 'define i178f@foo-rtd i17a3@foo-rtd-code) (cons (list 'define i1793@protocol i17a7@protocol-code) (cons (list 'define i1791@foo-rcd i17a5@foo-rcd-code) (cons (list 'define-syntax i178d@foo (list 'list ''$rtd (list 'syntax i178f@foo-rtd) (list 'syntax i1791@foo-rcd))) (cons (list 'define i17a1@foo? (list 'record-predicate i178f@foo-rtd)) (cons (list 'define i1795@make-foo (list 'record-constructor i1791@foo-rcd)) (append (map (lambda (i17a9@foo-x i17aa@idx) (list 'define i17a9@foo-x (list 'record-accessor i178f@foo-rtd i17aa@idx))) i179b@foo-x* i1799@idx*) (map (lambda (i17ad@set-foo-x! i17ae@idx) (list 'define i17ad@set-foo-x! (list 'record-mutator i178f@foo-rtd i17ae@idx))) i179d@set-foo-x!* i179f@set-foo-idx*)))))))))))))))))))))))))) (i1760@verify-clauses (lambda (i1769@x i176a@cls*) (letrec* ((i176e@valid-kwds (map id2e@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (i1770@free-id-member? (lambda (i1785@x i1786@ls) (and (pair? i1786@ls) (or (ib77@free-id=? i1785@x (car i1786@ls)) (i1770@free-id-member? i1785@x (cdr i1786@ls))))))) (let i1775@f ((i1771@cls* i176a@cls*) (i1772@seen* '())) (if (not (null? i1771@cls*)) (let ((i1777@t (car i1771@cls*))) (let ((i1779@ls/false (id78@syntax-dispatch i1777@t '(any . any)))) (if i1779@ls/false (apply (lambda (i177b@kwd i177c@rest) (if (or (not (ib71@id? i177b@kwd)) (not (i1770@free-id-member? i177b@kwd i176e@valid-kwds))) (ie58@syntax-violation '#f '"not a valid define-record-type keyword" i177b@kwd) (if (ib7d@bound-id-member? i177b@kwd i1772@seen*) (ie58@syntax-violation '#f '"duplicate use of keyword " i1769@x i177b@kwd) (i1775@f (cdr i1771@cls*) (cons i177b@kwd i1772@seen*))))) i1779@ls/false) (let ((i177f@t i1777@t)) (let ((i1781@ls/false (id78@syntax-dispatch i177f@t 'any))) (if i1781@ls/false (apply (lambda (i1783@cls) (ie58@syntax-violation '#f '"malformed define-record-type clause" i1783@cls)) i1781@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i177f@t))))))) (void))))))) (let ((i1761@t i173d@x)) (let ((i1763@ls/false (id78@syntax-dispatch i1761@t '(_ any . each-any)))) (if i1763@ls/false (apply (lambda (i1765@namespec i1766@clause*) (begin (i1760@verify-clauses i173d@x i1766@clause*) (i175e@do-define-record i1765@namespec i1766@clause*))) i1763@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1761@t))))))) (set! i2848@id6c@define-record-type-macro id6c@define-record-type-macro) (set! id6e@define-condition-type-macro (lambda (i1939@x) (letrec* ((i193c@mkname (lambda (i1969@name i196a@suffix) (ie5c@datum->syntax i1969@name (string->symbol (string-append (symbol->string (ie5e@syntax->datum i1969@name)) i196a@suffix)))))) (let ((i193d@t i1939@x)) (let ((i193f@ls/false (id78@syntax-dispatch i193d@t '(any any any any any . #(each (any any)))))) (if (and i193f@ls/false (apply (lambda (i1941@ctxt i1942@name i1943@super i1944@constructor i1945@predicate i1946@field* i1947@accessor*) (and (ib71@id? i1942@name) (ib71@id? i1943@super) (ib71@id? i1944@constructor) (ib71@id? i1945@predicate) (for-all ib71@id? i1946@field*) (for-all ib71@id? i1947@accessor*))) i193f@ls/false)) (apply (lambda (i194f@ctxt i1950@name i1951@super i1952@constructor i1953@predicate i1954@field* i1955@accessor*) (let ((i195d@aux-accessor* (map (lambda (i195f@x) (gensym)) i1955@accessor*))) (id2e@bless (cons 'begin (cons (cons 'define-record-type (cons (list i1950@name i1952@constructor (gensym)) (cons (list 'parent i1951@super) (cons (cons 'fields (map (lambda (i1961@field i1962@aux) (list 'immutable i1961@field i1962@aux)) i1954@field* i195d@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define i1953@predicate (list 'condition-predicate (list 'record-type-descriptor i1950@name))) (map (lambda (i1965@accessor i1966@aux) (list 'define i1965@accessor (list 'condition-accessor (list 'record-type-descriptor i1950@name) i1966@aux))) i1955@accessor* i195d@aux-accessor*))))))) i193f@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i193d@t))))))) (set! i2849@id6e@define-condition-type-macro id6e@define-condition-type-macro) (set! id70@incorrect-usage-macro (lambda (i196d@e) (ie58@syntax-violation '#f '"incorrect usage of auxiliary keyword" i196d@e))) (set! i284a@id70@incorrect-usage-macro id70@incorrect-usage-macro) (set! id72@parameterize-macro (lambda (i196f@e) (let ((i1971@t i196f@e)) (let ((i1973@ls/false (id78@syntax-dispatch i1971@t '(_ () any . each-any)))) (if i1973@ls/false (apply (lambda (i1975@b i1976@b*) (id2e@bless (cons 'let (cons '() (cons i1975@b i1976@b*))))) i1973@ls/false) (let ((i1979@t i1971@t)) (let ((i197b@ls/false (id78@syntax-dispatch i1979@t '(_ #(each (any any)) any . each-any)))) (if i197b@ls/false (apply (lambda (i197d@olhs* i197e@orhs* i197f@b i1980@b*) (let ((i1985@lhs* (ie46@generate-temporaries i197d@olhs*)) (i1986@rhs* (ie46@generate-temporaries i197e@orhs*))) (id2e@bless (cons (list 'lambda (append i1985@lhs* i1986@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (i1989@lhs i198a@rhs) (list 'let (list (list 't (list i1989@lhs))) (list i1989@lhs i198a@rhs) (cons 'set! (cons i198a@rhs '(t))))) i1985@lhs* i1986@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons i197f@b i1980@b*))) '(swap)))))) (append i197d@olhs* i197e@orhs*))))) i197b@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1979@t))))))))) (set! i284b@id72@parameterize-macro id72@parameterize-macro) (set! id74@foreign-call-transformer (lambda (i198d@e i198e@r i198f@mr) (let ((i1993@t i198d@e)) (let ((i1995@ls/false (id78@syntax-dispatch i1993@t '(_ any . each-any)))) (if i1995@ls/false (apply (lambda (i1997@name i1998@arg*) (cons 'foreign-call (cons (id9a@chi-expr i1997@name i198e@r i198f@mr) (id96@chi-expr* i1998@arg* i198e@r i198f@mr)))) i1995@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1993@t)))))) (set! i284c@id74@foreign-call-transformer id74@foreign-call-transformer) (set! id76@convert-pattern (lambda (i199b@pattern i199c@keys) (letrec* ((i19a0@cvt* (lambda (i1a3f@p* i1a40@n i1a41@ids) (if (null? i1a3f@p*) (values '() i1a41@ids) (call-with-values (lambda () (i19a0@cvt* (cdr i1a3f@p*) i1a40@n i1a41@ids)) (lambda (i1a49@i1a46 i1a4a@i1a48) (let ((i1a4d@ids i1a4a@i1a48) (i1a4e@y i1a49@i1a46)) (call-with-values (lambda () (i19a2@cvt (car i1a3f@p*) i1a40@n i1a4d@ids)) (lambda (i1a55@i1a52 i1a56@i1a54) (let ((i1a59@ids i1a56@i1a54) (i1a5a@x i1a55@i1a52)) (values (cons i1a5a@x i1a4e@y) i1a59@ids)))))))))) (i19a2@cvt (lambda (i19a3@p i19a4@n i19a5@ids) (let ((i19a9@t i19a3@p)) (let ((i19ab@ls/false (id78@syntax-dispatch i19a9@t 'any))) (if (and i19ab@ls/false (apply (lambda (i19ad@id) (ib71@id? i19ad@id)) i19ab@ls/false)) (apply (lambda (i19af@id) (if (ib7d@bound-id-member? i19a3@p i199c@keys) (values (vector 'free-id i19a3@p) i19a5@ids) (if (ib77@free-id=? i19a3@p (id00@scheme-stx '_)) (values '_ i19a5@ids) (values 'any (cons (cons i19a3@p i19a4@n) i19a5@ids))))) i19ab@ls/false) (let ((i19b1@t i19a9@t)) (let ((i19b3@ls/false (id78@syntax-dispatch i19b1@t '(any any)))) (if (and i19b3@ls/false (apply (lambda (i19b5@p i19b6@dots) (id7a@ellipsis? i19b6@dots)) i19b3@ls/false)) (apply (lambda (i19b9@p i19ba@dots) (call-with-values (lambda () (i19a2@cvt i19b9@p (+ i19a4@n '1) i19a5@ids)) (lambda (i19c1@i19be i19c2@i19c0) (let ((i19c5@ids i19c2@i19c0) (i19c6@p i19c1@i19be)) (values (if (eq? i19c6@p 'any) 'each-any (vector 'each i19c6@p)) i19c5@ids))))) i19b3@ls/false) (let ((i19c9@t i19b1@t)) (let ((i19cb@ls/false (id78@syntax-dispatch i19c9@t '(any any . #(each+ any () any))))) (if (and i19cb@ls/false (apply (lambda (i19cd@x i19ce@dots i19cf@ys i19d0@z) (id7a@ellipsis? i19ce@dots)) i19cb@ls/false)) (apply (lambda (i19d5@x i19d6@dots i19d7@ys i19d8@z) (call-with-values (lambda () (i19a2@cvt i19d8@z i19a4@n i19a5@ids)) (lambda (i19e1@i19de i19e2@i19e0) (let ((i19e5@ids i19e2@i19e0) (i19e6@z i19e1@i19de)) (call-with-values (lambda () (i19a0@cvt* i19d7@ys i19a4@n i19e5@ids)) (lambda (i19ed@i19ea i19ee@i19ec) (let ((i19f1@ids i19ee@i19ec) (i19f2@ys i19ed@i19ea)) (call-with-values (lambda () (i19a2@cvt i19d5@x (+ i19a4@n '1) i19f1@ids)) (lambda (i19f9@i19f6 i19fa@i19f8) (let ((i19fd@ids i19fa@i19f8) (i19fe@x i19f9@i19f6)) (values (vector 'each+ i19fe@x (reverse i19f2@ys) i19e6@z) i19fd@ids))))))))))) i19cb@ls/false) (let ((i1a01@t i19c9@t)) (let ((i1a03@ls/false (id78@syntax-dispatch i1a01@t '(any . any)))) (if i1a03@ls/false (apply (lambda (i1a05@x i1a06@y) (call-with-values (lambda () (i19a2@cvt i1a06@y i19a4@n i19a5@ids)) (lambda (i1a0d@i1a0a i1a0e@i1a0c) (let ((i1a11@ids i1a0e@i1a0c) (i1a12@y i1a0d@i1a0a)) (call-with-values (lambda () (i19a2@cvt i1a05@x i19a4@n i1a11@ids)) (lambda (i1a19@i1a16 i1a1a@i1a18) (let ((i1a1d@ids i1a1a@i1a18) (i1a1e@x i1a19@i1a16)) (values (cons i1a1e@x i1a12@y) i1a1d@ids)))))))) i1a03@ls/false) (let ((i1a21@t i1a01@t)) (let ((i1a23@ls/false (id78@syntax-dispatch i1a21@t '()))) (if i1a23@ls/false (apply (lambda () (values '() i19a5@ids)) i1a23@ls/false) (let ((i1a25@t i1a21@t)) (let ((i1a27@ls/false (id78@syntax-dispatch i1a25@t '#(vector each-any)))) (if (and i1a27@ls/false (apply (lambda (i1a29@p) (not (ib3d@stx? i1a29@p))) i1a27@ls/false)) (apply (lambda (i1a2b@p) (call-with-values (lambda () (i19a2@cvt i1a2b@p i19a4@n i19a5@ids)) (lambda (i1a31@i1a2e i1a32@i1a30) (let ((i1a35@ids i1a32@i1a30) (i1a36@p i1a31@i1a2e)) (values (vector 'vector i1a36@p) i1a35@ids))))) i1a27@ls/false) (let ((i1a39@t i1a25@t)) (let ((i1a3b@ls/false (id78@syntax-dispatch i1a39@t 'any))) (if i1a3b@ls/false (apply (lambda (i1a3d@datum) (values (vector 'atom (ib85@stx->datum i1a3d@datum)) i19a5@ids)) i1a3b@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1a39@t))))))))))))))))))))))))) (i19a2@cvt i199b@pattern '0 '())))) (set! i284d@id76@convert-pattern id76@convert-pattern) (set! id78@syntax-dispatch (letrec* ((i1a5e@stx^ (lambda (i1b39@e i1b3a@m* i1b3b@s* i1b3c@ae*) (if (and (null? i1b3a@m*) (null? i1b3b@s*) (null? i1b3c@ae*)) i1b39@e (ib59@mkstx i1b39@e i1b3a@m* i1b3b@s* i1b3c@ae*)))) (i1a60@match-each (lambda (i1b19@e i1b1a@p i1b1b@m* i1b1c@s* i1b1d@ae*) (if (pair? i1b19@e) (let ((i1b23@first (i1a6c@match (car i1b19@e) i1b1a@p i1b1b@m* i1b1c@s* i1b1d@ae* '()))) (and i1b23@first (let ((i1b25@rest (i1a60@match-each (cdr i1b19@e) i1b1a@p i1b1b@m* i1b1c@s* i1b1d@ae*))) (and i1b25@rest (cons i1b23@first i1b25@rest))))) (if (null? i1b19@e) '() (if (ib3d@stx? i1b19@e) (and (not (iaf7@top-marked? i1b1b@m*)) (call-with-values (lambda () (join-wraps i1b1b@m* i1b1c@s* i1b1d@ae* i1b19@e)) (lambda (i1b2d@i1b28 i1b2e@i1b2a i1b2f@i1b2c) (let ((i1b33@ae* i1b2f@i1b2c) (i1b34@s* i1b2e@i1b2a) (i1b35@m* i1b2d@i1b28)) (i1a60@match-each (ib3f@stx-expr i1b19@e) i1b1a@p i1b35@m* i1b34@s* i1b33@ae*))))) (if (i6b5@i587@annotation? i1b19@e) (i1a60@match-each (i6b7@i58b@annotation-expression i1b19@e) i1b1a@p i1b1b@m* i1b1c@s* i1b1d@ae*) '#f)))))) (i1a62@match-each+ (lambda (i1ad9@e i1ada@x-pat i1adb@y-pat i1adc@z-pat i1add@m* i1ade@s* i1adf@ae* i1ae0@r) (let i1af1@f ((i1ae9@e i1ad9@e) (i1aea@m* i1add@m*) (i1aeb@s* i1ade@s*) (i1aec@ae* i1adf@ae*)) (if (pair? i1ae9@e) (call-with-values (lambda () (i1af1@f (cdr i1ae9@e) i1aea@m* i1aeb@s* i1aec@ae*)) (lambda (i1af9@i1af4 i1afa@i1af6 i1afb@i1af8) (let ((i1aff@r i1afb@i1af8) (i1b00@y-pat i1afa@i1af6) (i1b01@xr* i1af9@i1af4)) (if i1aff@r (if (null? i1b00@y-pat) (let ((i1b05@xr (i1a6c@match (car i1ae9@e) i1ada@x-pat i1aea@m* i1aeb@s* i1aec@ae* '()))) (if i1b05@xr (values (cons i1b05@xr i1b01@xr*) i1b00@y-pat i1aff@r) (values '#f '#f '#f))) (values '() (cdr i1b00@y-pat) (i1a6c@match (car i1ae9@e) (car i1b00@y-pat) i1aea@m* i1aeb@s* i1aec@ae* i1aff@r))) (values '#f '#f '#f))))) (if (ib3d@stx? i1ae9@e) (if (iaf7@top-marked? i1aea@m*) (values '() i1adb@y-pat (i1a6c@match i1ae9@e i1adc@z-pat i1aea@m* i1aeb@s* i1aec@ae* i1ae0@r)) (call-with-values (lambda () (join-wraps i1aea@m* i1aeb@s* i1aec@ae* i1ae9@e)) (lambda (i1b0d@i1b08 i1b0e@i1b0a i1b0f@i1b0c) (let ((i1b13@ae* i1b0f@i1b0c) (i1b14@s* i1b0e@i1b0a) (i1b15@m* i1b0d@i1b08)) (i1af1@f (ib3f@stx-expr i1ae9@e) i1b15@m* i1b14@s* i1b13@ae*))))) (if (i6b5@i587@annotation? i1ae9@e) (i1af1@f (i6b7@i58b@annotation-expression i1ae9@e) i1aea@m* i1aeb@s* i1aec@ae*) (values '() i1adb@y-pat (i1a6c@match i1ae9@e i1adc@z-pat i1aea@m* i1aeb@s* i1aec@ae* i1ae0@r)))))))) (i1a64@match-each-any (lambda (i1abd@e i1abe@m* i1abf@s* i1ac0@ae*) (if (pair? i1abd@e) (let ((i1ac5@l (i1a64@match-each-any (cdr i1abd@e) i1abe@m* i1abf@s* i1ac0@ae*))) (and i1ac5@l (cons (i1a5e@stx^ (car i1abd@e) i1abe@m* i1abf@s* i1ac0@ae*) i1ac5@l))) (if (null? i1abd@e) '() (if (ib3d@stx? i1abd@e) (and (not (iaf7@top-marked? i1abe@m*)) (call-with-values (lambda () (join-wraps i1abe@m* i1abf@s* i1ac0@ae* i1abd@e)) (lambda (i1acd@i1ac8 i1ace@i1aca i1acf@i1acc) (let ((i1ad3@ae* i1acf@i1acc) (i1ad4@s* i1ace@i1aca) (i1ad5@m* i1acd@i1ac8)) (i1a64@match-each-any (ib3f@stx-expr i1abd@e) i1ad5@m* i1ad4@s* i1ad3@ae*))))) (if (i6b5@i587@annotation? i1abd@e) (i1a64@match-each-any (i6b7@i58b@annotation-expression i1abd@e) i1abe@m* i1abf@s* i1ac0@ae*) '#f)))))) (i1a66@match-empty (lambda (i1ab7@p i1ab8@r) (if (null? i1ab7@p) i1ab8@r (if (eq? i1ab7@p '_) i1ab8@r (if (eq? i1ab7@p 'any) (cons '() i1ab8@r) (if (pair? i1ab7@p) (i1a66@match-empty (car i1ab7@p) (i1a66@match-empty (cdr i1ab7@p) i1ab8@r)) (if (eq? i1ab7@p 'each-any) (cons '() i1ab8@r) (let ((i1abb@t (vector-ref i1ab7@p '0))) (if (memv i1abb@t '(each)) (i1a66@match-empty (vector-ref i1ab7@p '1) i1ab8@r) (if (memv i1abb@t '(each+)) (i1a66@match-empty (vector-ref i1ab7@p '1) (i1a66@match-empty (reverse (vector-ref i1ab7@p '2)) (i1a66@match-empty (vector-ref i1ab7@p '3) i1ab8@r))) (if (memv i1abb@t '(free-id atom)) i1ab8@r (if (memv i1abb@t '(scheme-id atom)) i1ab8@r (if (memv i1abb@t '(vector)) (i1a66@match-empty (vector-ref i1ab7@p '1) i1ab8@r) (assertion-violation 'syntax-dispatch '"invalid pattern" i1ab7@p)))))))))))))) (i1a68@combine (lambda (i1ab3@r* i1ab4@r) (if (null? (car i1ab3@r*)) i1ab4@r (cons (map car i1ab3@r*) (i1a68@combine (map cdr i1ab3@r*) i1ab4@r))))) (i1a6a@match* (lambda (i1a8f@e i1a90@p i1a91@m* i1a92@s* i1a93@ae* i1a94@r) (if (null? i1a90@p) (and (null? i1a8f@e) i1a94@r) (if (pair? i1a90@p) (and (pair? i1a8f@e) (i1a6c@match (car i1a8f@e) (car i1a90@p) i1a91@m* i1a92@s* i1a93@ae* (i1a6c@match (cdr i1a8f@e) (cdr i1a90@p) i1a91@m* i1a92@s* i1a93@ae* i1a94@r))) (if (eq? i1a90@p 'each-any) (let ((i1a9b@l (i1a64@match-each-any i1a8f@e i1a91@m* i1a92@s* i1a93@ae*))) (and i1a9b@l (cons i1a9b@l i1a94@r))) (let ((i1a9d@t (vector-ref i1a90@p '0))) (if (memv i1a9d@t '(each)) (if (null? i1a8f@e) (i1a66@match-empty (vector-ref i1a90@p '1) i1a94@r) (let ((i1a9f@r* (i1a60@match-each i1a8f@e (vector-ref i1a90@p '1) i1a91@m* i1a92@s* i1a93@ae*))) (and i1a9f@r* (i1a68@combine i1a9f@r* i1a94@r)))) (if (memv i1a9d@t '(free-id)) (and (symbol? i1a8f@e) (iaf7@top-marked? i1a91@m*) (ib77@free-id=? (i1a5e@stx^ i1a8f@e i1a91@m* i1a92@s* i1a93@ae*) (vector-ref i1a90@p '1)) i1a94@r) (if (memv i1a9d@t '(scheme-id)) (and (symbol? i1a8f@e) (iaf7@top-marked? i1a91@m*) (ib77@free-id=? (i1a5e@stx^ i1a8f@e i1a91@m* i1a92@s* i1a93@ae*) (id00@scheme-stx (vector-ref i1a90@p '1))) i1a94@r) (if (memv i1a9d@t '(each+)) (call-with-values (lambda () (i1a62@match-each+ i1a8f@e (vector-ref i1a90@p '1) (vector-ref i1a90@p '2) (vector-ref i1a90@p '3) i1a91@m* i1a92@s* i1a93@ae* i1a94@r)) (lambda (i1aa7@i1aa2 i1aa8@i1aa4 i1aa9@i1aa6) (let ((i1aad@r i1aa9@i1aa6) (i1aae@y-pat i1aa8@i1aa4) (i1aaf@xr* i1aa7@i1aa2)) (and i1aad@r (null? i1aae@y-pat) (if (null? i1aaf@xr*) (i1a66@match-empty (vector-ref i1a90@p '1) i1aad@r) (i1a68@combine i1aaf@xr* i1aad@r)))))) (if (memv i1a9d@t '(atom)) (and (fast-equal? (vector-ref i1a90@p '1) (ib83@strip i1a8f@e i1a91@m*)) i1a94@r) (if (memv i1a9d@t '(vector)) (and (vector? i1a8f@e) (i1a6c@match (vector->list i1a8f@e) (vector-ref i1a90@p '1) i1a91@m* i1a92@s* i1a93@ae* i1a94@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" i1a90@p))))))))))))) (i1a6c@match (lambda (i1a71@e i1a72@p i1a73@m* i1a74@s* i1a75@ae* i1a76@r) (if (not i1a76@r) '#f (if (eq? i1a72@p '_) i1a76@r (if (eq? i1a72@p 'any) (cons (i1a5e@stx^ i1a71@e i1a73@m* i1a74@s* i1a75@ae*) i1a76@r) (if (ib3d@stx? i1a71@e) (and (not (iaf7@top-marked? i1a73@m*)) (call-with-values (lambda () (join-wraps i1a73@m* i1a74@s* i1a75@ae* i1a71@e)) (lambda (i1a83@i1a7e i1a84@i1a80 i1a85@i1a82) (let ((i1a89@ae* i1a85@i1a82) (i1a8a@s* i1a84@i1a80) (i1a8b@m* i1a83@i1a7e)) (i1a6c@match (ib3f@stx-expr i1a71@e) i1a72@p i1a8b@m* i1a8a@s* i1a89@ae* i1a76@r))))) (if (i6b5@i587@annotation? i1a71@e) (i1a6c@match (i6b7@i58b@annotation-expression i1a71@e) i1a72@p i1a73@m* i1a74@s* i1a75@ae* i1a76@r) (i1a6a@match* i1a71@e i1a72@p i1a73@m* i1a74@s* i1a75@ae* i1a76@r))))))))) (lambda (i1a6d@e i1a6e@p) (i1a6c@match i1a6d@e i1a6e@p '() '() '() '())))) (set! i284e@id78@syntax-dispatch id78@syntax-dispatch) (set! id7a@ellipsis? (lambda (i1b41@x) (and (ib71@id? i1b41@x) (ib77@free-id=? i1b41@x (id00@scheme-stx '...))))) (set! i284f@id7a@ellipsis? id7a@ellipsis?) (set! id7c@underscore? (lambda (i1b43@x) (and (ib71@id? i1b43@x) (ib77@free-id=? i1b43@x (id00@scheme-stx '_))))) (set! i2850@id7c@underscore? id7c@underscore?) (set! id7e@verify-literals (lambda (i1b45@lits i1b46@expr) (for-each (lambda (i1b49@x) (if (or (not (ib71@id? i1b49@x)) (id7a@ellipsis? i1b49@x) (id7c@underscore? i1b49@x)) (ie58@syntax-violation '#f '"invalid literal" i1b46@expr i1b49@x) (void))) i1b45@lits))) (set! i2851@id7e@verify-literals id7e@verify-literals) (set! id80@syntax-case-transformer (letrec* ((i1b4c@build-dispatch-call (lambda (i1bbd@pvars i1bbe@expr i1bbf@y i1bc0@r i1bc1@mr) (let ((i1bc7@ids (map car i1bbd@pvars)) (i1bc8@levels (map cdr i1bbd@pvars))) (let ((i1bcb@labels (map iafd@gen-label i1bc7@ids)) (i1bcc@new-vars (map iaf9@gen-lexical i1bc7@ids))) (let ((i1bcf@body (id9a@chi-expr (ib5d@add-subst (ib31@make-full-rib i1bc7@ids i1bcb@labels) i1bbe@expr) (append (map (lambda (i1bd1@label i1bd2@var i1bd3@level) (cons i1bd1@label (ib8b@make-binding 'syntax (cons i1bd2@var i1bd3@level)))) i1bcb@labels i1bcc@new-vars (map cdr i1bbd@pvars)) i1bc0@r) i1bc1@mr))) (list '(primitive apply) (iad4@ia06@build-lambda '#f i1bcc@new-vars i1bcf@body) i1bbf@y)))))) (i1b4e@invalid-ids-error (lambda (i1bb1@id* i1bb2@e i1bb3@class) (let i1bbb@find ((i1bb7@id* i1bb1@id*) (i1bb8@ok* '())) (if (null? i1bb7@id*) (ie58@syntax-violation '#f '"invalid syntax" i1bb2@e) (if (ib71@id? (car i1bb7@id*)) (if (ib7d@bound-id-member? (car i1bb7@id*) i1bb8@ok*) (ie54@syntax-error (car i1bb7@id*) '"duplicate " i1bb3@class) (i1bbb@find (cdr i1bb7@id*) (cons (car i1bb7@id*) i1bb8@ok*))) (ie54@syntax-error (car i1bb7@id*) '"invalid " i1bb3@class)))))) (i1b50@gen-clause (lambda (i1b89@x i1b8a@keys i1b8b@clauses i1b8c@r i1b8d@mr i1b8e@pat i1b8f@fender i1b90@expr) (call-with-values (lambda () (id76@convert-pattern i1b8e@pat i1b8a@keys)) (lambda (i1b9d@i1b9a i1b9e@i1b9c) (let ((i1ba1@pvars i1b9e@i1b9c) (i1ba2@p i1b9d@i1b9a)) (if (not (ib7b@distinct-bound-ids? (map car i1ba1@pvars))) (i1b4e@invalid-ids-error (map car i1ba1@pvars) i1b8e@pat '"pattern variable") (if (not (for-all (lambda (i1ba5@x) (not (id7a@ellipsis? (car i1ba5@x)))) i1ba1@pvars)) (ie58@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" i1b8e@pat) (let ((i1ba7@y (iaf9@gen-lexical 'tmp))) (let ((i1ba9@test (if (eq? i1b8f@fender '#t) i1ba7@y (let ((i1bab@call (i1b4c@build-dispatch-call i1ba1@pvars i1b8f@fender i1ba7@y i1b8c@r i1b8d@mr))) (list 'if i1ba7@y i1bab@call (list 'quote '#f)))))) (let ((i1bad@conseq (i1b4c@build-dispatch-call i1ba1@pvars i1b90@expr i1ba7@y i1b8c@r i1b8d@mr))) (let ((i1baf@altern (i1b52@gen-syntax-case i1b89@x i1b8a@keys i1b8b@clauses i1b8c@r i1b8d@mr))) (list (iad4@ia06@build-lambda '#f (list i1ba7@y) (list 'if i1ba9@test i1bad@conseq i1baf@altern)) (list '(primitive syntax-dispatch) i1b89@x (list 'quote i1ba2@p)))))))))))))) (i1b52@gen-syntax-case (lambda (i1b67@x i1b68@keys i1b69@clauses i1b6a@r i1b6b@mr) (if (null? i1b69@clauses) (list '(primitive syntax-error) i1b67@x) (let ((i1b71@t (car i1b69@clauses))) (let ((i1b73@ls/false (id78@syntax-dispatch i1b71@t '(any any)))) (if i1b73@ls/false (apply (lambda (i1b75@pat i1b76@expr) (if (and (ib71@id? i1b75@pat) (not (ib7d@bound-id-member? i1b75@pat i1b68@keys)) (not (id7a@ellipsis? i1b75@pat))) (if (ib77@free-id=? i1b75@pat (id00@scheme-stx '_)) (id9a@chi-expr i1b76@expr i1b6a@r i1b6b@mr) (let ((i1b79@lab (iafd@gen-label i1b75@pat)) (i1b7a@lex (iaf9@gen-lexical i1b75@pat))) (let ((i1b7d@body (id9a@chi-expr (ib5d@add-subst (ib31@make-full-rib (list i1b75@pat) (list i1b79@lab)) i1b76@expr) (cons (cons i1b79@lab (ib8b@make-binding 'syntax (cons i1b7a@lex '0))) i1b6a@r) i1b6b@mr))) (list (iad4@ia06@build-lambda '#f (list i1b7a@lex) i1b7d@body) i1b67@x)))) (i1b50@gen-clause i1b67@x i1b68@keys (cdr i1b69@clauses) i1b6a@r i1b6b@mr i1b75@pat '#t i1b76@expr))) i1b73@ls/false) (let ((i1b7f@t i1b71@t)) (let ((i1b81@ls/false (id78@syntax-dispatch i1b7f@t '(any any any)))) (if i1b81@ls/false (apply (lambda (i1b83@pat i1b84@fender i1b85@expr) (i1b50@gen-clause i1b67@x i1b68@keys (cdr i1b69@clauses) i1b6a@r i1b6b@mr i1b83@pat i1b84@fender i1b85@expr)) i1b81@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1b7f@t))))))))))) (lambda (i1b53@e i1b54@r i1b55@mr) (let ((i1b59@t i1b53@e)) (let ((i1b5b@ls/false (id78@syntax-dispatch i1b59@t '(_ any each-any . each-any)))) (if i1b5b@ls/false (apply (lambda (i1b5d@expr i1b5e@keys i1b5f@clauses) (begin (id7e@verify-literals i1b5e@keys i1b53@e) (let ((i1b63@x (iaf9@gen-lexical 'tmp))) (let ((i1b65@body (i1b52@gen-syntax-case i1b63@x i1b5e@keys i1b5f@clauses i1b54@r i1b55@mr))) (list (iad4@ia06@build-lambda '#f (list i1b63@x) i1b65@body) (id9a@chi-expr i1b5d@expr i1b54@r i1b55@mr)))))) i1b5b@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1b59@t))))))) (set! i2852@id80@syntax-case-transformer id80@syntax-case-transformer) (set! id82@ellipsis-map (lambda (i1bd7@proc i1bd8@ls . i1bdb@ls*) (letrec* ((i1bde@who '...)) (begin (if (not (list? i1bd8@ls)) (assertion-violation i1bde@who '"not a list" i1bd8@ls) (void)) (if (not (null? i1bdb@ls*)) (let ((i1bdf@n (length i1bd8@ls))) (for-each (lambda (i1be1@x) (begin (if (not (list? i1be1@x)) (assertion-violation i1bde@who '"not a list" i1be1@x) (void)) (if (not (= (length i1be1@x) i1bdf@n)) (assertion-violation i1bde@who '"length mismatch" i1bd8@ls i1be1@x) (void)))) i1bdb@ls*)) (void)) (apply map i1bd7@proc i1bd8@ls i1bdb@ls*))))) (set! i2853@id82@ellipsis-map id82@ellipsis-map) (set! id84@syntax-transformer (letrec* ((i1be4@gen-syntax (lambda (i1c5b@src i1c5c@e i1c5d@r i1c5e@maps i1c5f@ellipsis? i1c60@vec?) (let ((i1c67@t i1c5c@e)) (let ((i1c69@ls/false (id78@syntax-dispatch i1c67@t 'any))) (if (and i1c69@ls/false (apply (lambda (i1c6b@dots) (i1c5f@ellipsis? i1c6b@dots)) i1c69@ls/false)) (apply (lambda (i1c6d@dots) (ie58@syntax-violation '#f '"misplaced ellipsis in syntax form" i1c5b@src)) i1c69@ls/false) (let ((i1c6f@t i1c67@t)) (let ((i1c71@ls/false (id78@syntax-dispatch i1c6f@t 'any))) (if (and i1c71@ls/false (apply (lambda (i1c73@id) (ib71@id? i1c73@id)) i1c71@ls/false)) (apply (lambda (i1c75@id) (let ((i1c77@label (ib87@id->label i1c5c@e))) (let ((i1c79@b (ib89@label->binding i1c77@label i1c5d@r))) (if (eq? (ib8d@binding-type i1c79@b) 'syntax) (call-with-values (lambda () (let ((i1c7f@var.lev (ib8f@binding-value i1c79@b))) (i1be6@gen-ref i1c5b@src (car i1c7f@var.lev) (cdr i1c7f@var.lev) i1c5e@maps))) (lambda (i1c81@i1c7c i1c82@i1c7e) (let ((i1c85@maps i1c82@i1c7e) (i1c86@var i1c81@i1c7c)) (values (list 'ref i1c86@var) i1c85@maps)))) (values (list 'quote i1c5c@e) i1c5e@maps))))) i1c71@ls/false) (let ((i1c89@t i1c6f@t)) (let ((i1c8b@ls/false (id78@syntax-dispatch i1c89@t '(any any)))) (if (and i1c8b@ls/false (apply (lambda (i1c8d@dots i1c8e@e) (i1c5f@ellipsis? i1c8d@dots)) i1c8b@ls/false)) (apply (lambda (i1c91@dots i1c92@e) (if i1c60@vec? (ie58@syntax-violation '#f '"misplaced ellipsis in syntax form" i1c5b@src) (i1be4@gen-syntax i1c5b@src i1c92@e i1c5d@r i1c5e@maps (lambda (i1c95@x) '#f) '#f))) i1c8b@ls/false) (let ((i1c97@t i1c89@t)) (let ((i1c99@ls/false (id78@syntax-dispatch i1c97@t '(any any . any)))) (if (and i1c99@ls/false (apply (lambda (i1c9b@x i1c9c@dots i1c9d@y) (i1c5f@ellipsis? i1c9c@dots)) i1c99@ls/false)) (apply (lambda (i1ca1@x i1ca2@dots i1ca3@y) (let i1cb9@f ((i1ca7@y i1ca3@y) (i1ca8@k (lambda (i1cab@maps) (call-with-values (lambda () (i1be4@gen-syntax i1c5b@src i1ca1@x i1c5d@r (cons '() i1cab@maps) i1c5f@ellipsis? '#f)) (lambda (i1cb1@i1cae i1cb2@i1cb0) (let ((i1cb5@maps i1cb2@i1cb0) (i1cb6@x i1cb1@i1cae)) (if (null? (car i1cb5@maps)) (ie58@syntax-violation '#f '"extra ellipsis in syntax form" i1c5b@src) (values (i1bec@gen-map i1cb6@x (car i1cb5@maps)) (cdr i1cb5@maps))))))))) (let ((i1cbb@t i1ca7@y)) (let ((i1cbd@ls/false (id78@syntax-dispatch i1cbb@t '()))) (if i1cbd@ls/false (apply (lambda () (i1ca8@k i1c5e@maps)) i1cbd@ls/false) (let ((i1cbf@t i1cbb@t)) (let ((i1cc1@ls/false (id78@syntax-dispatch i1cbf@t '(any . any)))) (if (and i1cc1@ls/false (apply (lambda (i1cc3@dots i1cc4@y) (i1c5f@ellipsis? i1cc3@dots)) i1cc1@ls/false)) (apply (lambda (i1cc7@dots i1cc8@y) (i1cb9@f i1cc8@y (lambda (i1ccb@maps) (call-with-values (lambda () (i1ca8@k (cons '() i1ccb@maps))) (lambda (i1cd1@i1cce i1cd2@i1cd0) (let ((i1cd5@maps i1cd2@i1cd0) (i1cd6@x i1cd1@i1cce)) (if (null? (car i1cd5@maps)) (ie58@syntax-violation '#f '"extra ellipsis in syntax form" i1c5b@src) (values (i1bea@gen-mappend i1cd6@x (car i1cd5@maps)) (cdr i1cd5@maps))))))))) i1cc1@ls/false) (let ((i1cd9@t i1cbf@t)) (let ((i1cdb@ls/false (id78@syntax-dispatch i1cd9@t '_))) (if i1cdb@ls/false (apply (lambda () (call-with-values (lambda () (i1be4@gen-syntax i1c5b@src i1ca7@y i1c5d@r i1c5e@maps i1c5f@ellipsis? i1c60@vec?)) (lambda (i1ce1@i1cde i1ce2@i1ce0) (let ((i1ce5@maps i1ce2@i1ce0) (i1ce6@y i1ce1@i1cde)) (call-with-values (lambda () (i1ca8@k i1ce5@maps)) (lambda (i1ced@i1cea i1cee@i1cec) (let ((i1cf1@maps i1cee@i1cec) (i1cf2@x i1ced@i1cea)) (values (i1be8@gen-append i1cf2@x i1ce6@y) i1cf1@maps)))))))) i1cdb@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1cd9@t)))))))))))) i1c99@ls/false) (let ((i1cf5@t i1c97@t)) (let ((i1cf7@ls/false (id78@syntax-dispatch i1cf5@t '(any . any)))) (if i1cf7@ls/false (apply (lambda (i1cf9@x i1cfa@y) (call-with-values (lambda () (i1be4@gen-syntax i1c5b@src i1cf9@x i1c5d@r i1c5e@maps i1c5f@ellipsis? '#f)) (lambda (i1d01@i1cfe i1d02@i1d00) (let ((i1d05@maps i1d02@i1d00) (i1d06@xnew i1d01@i1cfe)) (call-with-values (lambda () (i1be4@gen-syntax i1c5b@src i1cfa@y i1c5d@r i1d05@maps i1c5f@ellipsis? i1c60@vec?)) (lambda (i1d0d@i1d0a i1d0e@i1d0c) (let ((i1d11@maps i1d0e@i1d0c) (i1d12@ynew i1d0d@i1d0a)) (values (i1bee@gen-cons i1c5c@e i1cf9@x i1cfa@y i1d06@xnew i1d12@ynew) i1d11@maps)))))))) i1cf7@ls/false) (let ((i1d15@t i1cf5@t)) (let ((i1d17@ls/false (id78@syntax-dispatch i1d15@t '#(vector each-any)))) (if i1d17@ls/false (apply (lambda (i1d19@ls) (call-with-values (lambda () (i1be4@gen-syntax i1c5b@src i1d19@ls i1c5d@r i1c5e@maps i1c5f@ellipsis? '#t)) (lambda (i1d1f@i1d1c i1d20@i1d1e) (let ((i1d23@maps i1d20@i1d1e) (i1d24@lsnew i1d1f@i1d1c)) (values (i1bf0@gen-vector i1c5c@e i1d19@ls i1d24@lsnew) i1d23@maps))))) i1d17@ls/false) (let ((i1d27@t i1d15@t)) (let ((i1d29@ls/false (id78@syntax-dispatch i1d27@t '_))) (if i1d29@ls/false (apply (lambda () (values (list 'quote i1c5c@e) i1c5e@maps)) i1d29@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1d27@t)))))))))))))))))))))))) (i1be6@gen-ref (lambda (i1c41@src i1c42@var i1c43@level i1c44@maps) (if (= i1c43@level '0) (values i1c42@var i1c44@maps) (if (null? i1c44@maps) (ie58@syntax-violation '#f '"missing ellipsis in syntax form" i1c41@src) (call-with-values (lambda () (i1be6@gen-ref i1c41@src i1c42@var (- i1c43@level '1) (cdr i1c44@maps))) (lambda (i1c4d@i1c4a i1c4e@i1c4c) (let ((i1c51@outer-maps i1c4e@i1c4c) (i1c52@outer-var i1c4d@i1c4a)) (let ((i1c55@t (assq i1c52@outer-var (car i1c44@maps)))) (if i1c55@t ((lambda (i1c57@b) (values (cdr i1c57@b) i1c44@maps)) i1c55@t) (let ((i1c59@inner-var (iaf9@gen-lexical 'tmp))) (values i1c59@inner-var (cons (cons (cons i1c52@outer-var i1c59@inner-var) (car i1c44@maps)) i1c51@outer-maps)))))))))))) (i1be8@gen-append (lambda (i1c3d@x i1c3e@y) (if (fast-equal? i1c3e@y ''()) i1c3d@x (list 'append i1c3d@x i1c3e@y)))) (i1bea@gen-mappend (lambda (i1c39@e i1c3a@map-env) (list 'apply '(primitive append) (i1bec@gen-map i1c39@e i1c3a@map-env)))) (i1bec@gen-map (lambda (i1c27@e i1c28@map-env) (let ((i1c2b@formals (map cdr i1c28@map-env)) (i1c2c@actuals (map (lambda (i1c2f@x) (list 'ref (car i1c2f@x))) i1c28@map-env))) (if (eq? (car i1c27@e) 'ref) (car i1c2c@actuals) (if (for-all (lambda (i1c31@x) (and (eq? (car i1c31@x) 'ref) (memq (cadr i1c31@x) i1c2b@formals))) (cdr i1c27@e)) (let ((i1c33@args (map (let ((i1c35@r (map cons i1c2b@formals i1c2c@actuals))) (lambda (i1c37@x) (cdr (assq (cadr i1c37@x) i1c35@r)))) (cdr i1c27@e)))) (cons 'map (cons (list 'primitive (car i1c27@e)) i1c33@args))) (cons* 'map (list 'lambda i1c2b@formals i1c27@e) i1c2c@actuals)))))) (i1bee@gen-cons (lambda (i1c17@e i1c18@x i1c19@y i1c1a@xnew i1c1b@ynew) (let ((i1c21@t (car i1c1b@ynew))) (if (memv i1c21@t '(quote)) (if (eq? (car i1c1a@xnew) 'quote) (let ((i1c23@xnew (cadr i1c1a@xnew)) (i1c24@ynew (cadr i1c1b@ynew))) (if (and (eq? i1c23@xnew i1c18@x) (eq? i1c24@ynew i1c19@y)) (list 'quote i1c17@e) (list 'quote (cons i1c23@xnew i1c24@ynew)))) (if (null? (cadr i1c1b@ynew)) (list 'list i1c1a@xnew) (list 'cons i1c1a@xnew i1c1b@ynew))) (if (memv i1c21@t '(list)) (cons 'list (cons i1c1a@xnew (cdr i1c1b@ynew))) (list 'cons i1c1a@xnew i1c1b@ynew)))))) (i1bf0@gen-vector (lambda (i1c11@e i1c12@ls i1c13@lsnew) (if (eq? (car i1c13@lsnew) 'quote) (if (eq? (cadr i1c13@lsnew) i1c12@ls) (list 'quote i1c11@e) (list 'quote (list->vector (cadr i1c13@lsnew)))) (if (eq? (car i1c13@lsnew) 'list) (cons 'vector (cdr i1c13@lsnew)) (list 'list->vector i1c13@lsnew))))) (i1bf2@regen (lambda (i1c0b@x) (let ((i1c0d@t (car i1c0b@x))) (if (memv i1c0d@t '(ref)) (cadr i1c0b@x) (if (memv i1c0d@t '(primitive)) (list 'primitive (cadr i1c0b@x)) (if (memv i1c0d@t '(quote)) (list 'quote (cadr i1c0b@x)) (if (memv i1c0d@t '(lambda)) (iad4@ia06@build-lambda '#f (cadr i1c0b@x) (i1bf2@regen (caddr i1c0b@x))) (if (memv i1c0d@t '(map)) (let ((i1c0f@ls (map i1bf2@regen (cdr i1c0b@x)))) (cons '(primitive ellipsis-map) i1c0f@ls)) (cons (list 'primitive (car i1c0b@x)) (map i1bf2@regen (cdr i1c0b@x)))))))))))) (lambda (i1bf3@e i1bf4@r i1bf5@mr) (let ((i1bf9@t i1bf3@e)) (let ((i1bfb@ls/false (id78@syntax-dispatch i1bf9@t '(_ any)))) (if i1bfb@ls/false (apply (lambda (i1bfd@x) (call-with-values (lambda () (i1be4@gen-syntax i1bf3@e i1bfd@x i1bf4@r '() id7a@ellipsis? '#f)) (lambda (i1c03@i1c00 i1c04@i1c02) (let ((i1c07@maps i1c04@i1c02) (i1c08@e i1c03@i1c00)) (i1bf2@regen i1c08@e))))) i1bfb@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1bf9@t))))))) (set! i2854@id84@syntax-transformer id84@syntax-transformer) (set! id86@core-macro-transformer (lambda (i1d2b@name) (let ((i1d2d@t i1d2b@name)) (if (memv i1d2d@t '(quote)) id28@quote-transformer (if (memv i1d2d@t '(lambda)) id2c@lambda-transformer (if (memv i1d2d@t '(case-lambda)) id2a@case-lambda-transformer (if (memv i1d2d@t '(letrec)) id10@letrec-transformer (if (memv i1d2d@t '(letrec*)) id12@letrec*-transformer (if (memv i1d2d@t '(let)) id0e@let-transformer (if (memv i1d2d@t '(if)) id20@if-transformer (if (memv i1d2d@t '(and)) id22@and-transformer (if (memv i1d2d@t '(or)) id24@or-transformer (if (memv i1d2d@t '(foreign-call)) id74@foreign-call-transformer (if (memv i1d2d@t '(syntax-case)) id80@syntax-case-transformer (if (memv i1d2d@t '(syntax)) id84@syntax-transformer (if (memv i1d2d@t '(type-descriptor)) id16@type-descriptor-transformer (if (memv i1d2d@t '(record-type-descriptor)) id18@record-type-descriptor-transformer (if (memv i1d2d@t '(record-constructor-descriptor)) id1a@record-constructor-descriptor-transformer (if (memv i1d2d@t '(fluid-let-syntax)) id14@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" i1d2b@name)))))))))))))))))))) (set! i2855@id86@core-macro-transformer id86@core-macro-transformer) (set! id88@symbol-macro (lambda (i1d2f@x i1d30@set) (let ((i1d33@t i1d2f@x)) (let ((i1d35@ls/false (id78@syntax-dispatch i1d33@t '(_ any)))) (if (and i1d35@ls/false (apply (lambda (i1d37@name) (and (ib71@id? i1d37@name) (memq (ib73@id->sym i1d37@name) i1d30@set))) i1d35@ls/false)) (apply (lambda (i1d39@name) (id2e@bless (list 'quote i1d39@name))) i1d35@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1d33@t)))))) (set! i2856@id88@symbol-macro id88@symbol-macro) (set! id8a@macro-transformer (lambda (i1d3b@x) (if (procedure? i1d3b@x) i1d3b@x (if (symbol? i1d3b@x) (let ((i1d3d@t i1d3b@x)) (if (memv i1d3d@t '(define-record-type)) id6c@define-record-type-macro (if (memv i1d3d@t '(define-struct)) id6a@define-struct-macro (if (memv i1d3d@t '(include)) id60@include-macro (if (memv i1d3d@t '(cond)) id5c@cond-macro (if (memv i1d3d@t '(let)) id34@let-macro (if (memv i1d3d@t '(do)) id54@do-macro (if (memv i1d3d@t '(or)) id58@or-macro (if (memv i1d3d@t '(and)) id5a@and-macro (if (memv i1d3d@t '(let*)) id56@let*-macro (if (memv i1d3d@t '(let-values)) id36@let-values-macro (if (memv i1d3d@t '(let*-values)) id38@let*-values-macro (if (memv i1d3d@t '(syntax-rules)) id64@syntax-rules-macro (if (memv i1d3d@t '(quasiquote)) id66@quasiquote-macro (if (memv i1d3d@t '(quasisyntax)) id68@quasisyntax-macro (if (memv i1d3d@t '(with-syntax)) id30@with-syntax-macro (if (memv i1d3d@t '(when)) id1c@when-macro (if (memv i1d3d@t '(unless)) id1e@unless-macro (if (memv i1d3d@t '(case)) id26@case-macro (if (memv i1d3d@t '(identifier-syntax)) id52@identifier-syntax-macro (if (memv i1d3d@t '(time)) id4a@time-macro (if (memv i1d3d@t '(delay)) id4c@delay-macro (if (memv i1d3d@t '(assert)) id4e@assert-macro (if (memv i1d3d@t '(endianness)) id50@endianness-macro (if (memv i1d3d@t '(guard)) id46@guard-macro (if (memv i1d3d@t '(define-enumeration)) id48@define-enumeration-macro (if (memv i1d3d@t '(trace-lambda)) id3a@trace-lambda-macro (if (memv i1d3d@t '(trace-define)) id3c@trace-define-macro (if (memv i1d3d@t '(trace-define-syntax)) id3e@trace-define-syntax-macro (if (memv i1d3d@t '(trace-let-syntax)) id42@trace-let-syntax-macro (if (memv i1d3d@t '(trace-letrec-syntax)) id44@trace-letrec-syntax-macro (if (memv i1d3d@t '(define-condition-type)) id6e@define-condition-type-macro (if (memv i1d3d@t '(parameterize)) id72@parameterize-macro (if (memv i1d3d@t '(include-into)) id62@include-into-macro (if (memv i1d3d@t '(eol-style)) (lambda (i1d3f@x) (id88@symbol-macro i1d3f@x '(none lf cr crlf nel crnel ls))) (if (memv i1d3d@t '(error-handling-mode)) (lambda (i1d41@x) (id88@symbol-macro i1d41@x '(ignore raise replace))) (if (memv i1d3d@t '(buffer-mode)) (lambda (i1d43@x) (id88@symbol-macro i1d43@x '(none line block))) (if (memv i1d3d@t '(file-options)) iaec@file-options-macro (if (memv i1d3d@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) id70@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" i1d3b@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" i1d3b@x))))) (set! i2857@id8a@macro-transformer id8a@macro-transformer) (set! id8c@local-macro-transformer (lambda (i1d45@x) (car i1d45@x))) (set! i2858@id8c@local-macro-transformer id8c@local-macro-transformer) (set! id8e@do-macro-call (lambda (i1d47@transformer i1d48@expr) (let ((i1d4b@out (i1d47@transformer (ib5b@add-mark ib55@anti-mark i1d48@expr '#f)))) (begin (let i1d4f@f ((i1d4d@x i1d4b@out)) (if (not (ib3d@stx? i1d4d@x)) (if (pair? i1d4d@x) (begin (i1d4f@f (car i1d4d@x)) (i1d4f@f (cdr i1d4d@x))) (if (vector? i1d4d@x) (vector-for-each i1d4f@f i1d4d@x) (if (symbol? i1d4d@x) (ie58@syntax-violation '#f '"raw symbol encountered in output of macro" i1d48@expr i1d4d@x) (void)))) (void))) (ib5b@add-mark (ib53@gen-mark) i1d4b@out i1d48@expr))))) (set! i2859@id8e@do-macro-call id8e@do-macro-call) (set! id90@chi-macro (lambda (i1d51@p i1d52@e) (id8e@do-macro-call (id8a@macro-transformer i1d51@p) i1d52@e))) (set! i285a@id90@chi-macro id90@chi-macro) (set! id92@chi-local-macro (lambda (i1d55@p i1d56@e) (id8e@do-macro-call (id8c@local-macro-transformer i1d55@p) i1d56@e))) (set! i285b@id92@chi-local-macro id92@chi-local-macro) (set! id94@chi-global-macro (lambda (i1d59@p i1d5a@e) (let ((i1d5d@lib (car i1d59@p)) (i1d5e@loc (cdr i1d59@p))) (begin (i98e@i7dd@visit-library i1d5d@lib) (let ((i1d61@x (symbol-value i1d5e@loc))) (let ((i1d63@transformer (if (procedure? i1d61@x) i1d61@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" i1d61@x)))) (id8e@do-macro-call i1d63@transformer i1d5a@e))))))) (set! i285c@id94@chi-global-macro id94@chi-global-macro) (set! id96@chi-expr* (lambda (i1d65@e* i1d66@r i1d67@mr) (if (null? i1d65@e*) '() (let ((i1d6b@e (id9a@chi-expr (car i1d65@e*) i1d66@r i1d67@mr))) (cons i1d6b@e (id96@chi-expr* (cdr i1d65@e*) i1d66@r i1d67@mr)))))) (set! i285d@id96@chi-expr* id96@chi-expr*) (set! id98@chi-application (lambda (i1d6d@e i1d6e@r i1d6f@mr) (let ((i1d73@t i1d6d@e)) (let ((i1d75@ls/false (id78@syntax-dispatch i1d73@t '(any . each-any)))) (if i1d75@ls/false (apply (lambda (i1d77@rator i1d78@rands) (let ((i1d7b@rator (id9a@chi-expr i1d77@rator i1d6e@r i1d6f@mr))) (cons i1d7b@rator (id96@chi-expr* i1d78@rands i1d6e@r i1d6f@mr)))) i1d75@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1d73@t)))))) (set! i285e@id98@chi-application id98@chi-application) (set! id9a@chi-expr (lambda (i1d7d@e i1d7e@r i1d7f@mr) (call-with-values (lambda () (ib93@syntax-type i1d7d@e i1d7e@r)) (lambda (i1d89@i1d84 i1d8a@i1d86 i1d8b@i1d88) (let ((i1d8f@kwd i1d8b@i1d88) (i1d90@value i1d8a@i1d86) (i1d91@type i1d89@i1d84)) (let ((i1d95@t i1d91@type)) (if (memv i1d95@t '(core-macro)) (let ((i1d97@transformer (id86@core-macro-transformer i1d90@value))) (i1d97@transformer i1d7d@e i1d7e@r i1d7f@mr)) (if (memv i1d95@t '(global)) (let ((i1d99@lib (car i1d90@value))) (let ((i1d9b@loc (cdr i1d90@value))) (begin ((ide0@inv-collector) i1d99@lib) i1d9b@loc))) (if (memv i1d95@t '(core-prim)) (let ((i1d9d@name i1d90@value)) (list 'primitive i1d9d@name)) (if (memv i1d95@t '(call)) (id98@chi-application i1d7d@e i1d7e@r i1d7f@mr) (if (memv i1d95@t '(lexical)) (let ((i1d9f@lex (id02@lexical-var i1d90@value))) i1d9f@lex) (if (memv i1d95@t '(global-macro global-macro!)) (id9a@chi-expr (id94@chi-global-macro i1d90@value i1d7d@e) i1d7e@r i1d7f@mr) (if (memv i1d95@t '(local-macro local-macro!)) (id9a@chi-expr (id92@chi-local-macro i1d90@value i1d7d@e) i1d7e@r i1d7f@mr) (if (memv i1d95@t '(macro macro!)) (id9a@chi-expr (id90@chi-macro i1d90@value i1d7d@e) i1d7e@r i1d7f@mr) (if (memv i1d95@t '(constant)) (let ((i1da1@datum i1d90@value)) (list 'quote i1da1@datum)) (if (memv i1d95@t '(set!)) (id9c@chi-set! i1d7d@e i1d7e@r i1d7f@mr) (if (memv i1d95@t '(begin)) (let ((i1da3@t i1d7d@e)) (let ((i1da5@ls/false (id78@syntax-dispatch i1da3@t '(_ any . each-any)))) (if i1da5@ls/false (apply (lambda (i1da7@x i1da8@x*) (iad6@ia36@build-sequence '#f (id96@chi-expr* (cons i1da7@x i1da8@x*) i1d7e@r i1d7f@mr))) i1da5@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1da3@t)))) (if (memv i1d95@t '(let-syntax letrec-syntax)) (let ((i1dab@t i1d7d@e)) (let ((i1dad@ls/false (id78@syntax-dispatch i1dab@t '(_ #(each (any any)) any . each-any)))) (if (and i1dad@ls/false (apply (lambda (i1daf@xlhs* i1db0@xrhs* i1db1@xbody i1db2@xbody*) (if (not (ib79@valid-bound-ids? i1daf@xlhs*)) (ie58@syntax-violation '#f '"invalid identifiers" i1d7d@e) (void))) i1dad@ls/false)) (apply (lambda (i1db7@xlhs* i1db8@xrhs* i1db9@xbody i1dba@xbody*) (let ((i1dbf@xlab* (map iafd@gen-label i1db7@xlhs*))) (let ((i1dc1@xrib (ib31@make-full-rib i1db7@xlhs* i1dbf@xlab*))) (let ((i1dc3@xb* (map (lambda (i1dc5@x) (iba9@make-eval-transformer (idd2@expand-transformer (if (eq? i1d91@type 'let-syntax) i1dc5@x (ib5d@add-subst i1dc1@xrib i1dc5@x)) i1d7f@mr))) i1db8@xrhs*))) (iad6@ia36@build-sequence '#f (id96@chi-expr* (map (lambda (i1dc7@x) (ib5d@add-subst i1dc1@xrib i1dc7@x)) (cons i1db9@xbody i1dba@xbody*)) (append (map cons i1dbf@xlab* i1dc3@xb*) i1d7e@r) (append (map cons i1dbf@xlab* i1dc3@xb*) i1d7f@mr))))))) i1dad@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1dab@t)))) (if (memv i1d95@t '(displaced-lexical)) (ie58@syntax-violation '#f '"identifier out of context" i1d7d@e) (if (memv i1d95@t '(syntax)) (ie58@syntax-violation '#f '"reference to pattern variable outside a syntax form" i1d7d@e) (if (memv i1d95@t '(define define-syntax module import library)) (ie58@syntax-violation '#f (string-append (let ((i1dc9@t i1d91@type)) (if (memv i1dc9@t '(define)) '"a definition" (if (memv i1dc9@t '(define-syntax)) '"a define-syntax" (if (memv i1dc9@t '(module)) '"a module definition" (if (memv i1dc9@t '(library)) '"a library definition" (if (memv i1dc9@t '(import)) '"an import declaration" (if (memv i1dc9@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") i1d7d@e) (if (memv i1d95@t '(mutable)) (ie58@syntax-violation '#f '"attempt to reference an unexportable variable" i1d7d@e) (ie58@syntax-violation '#f '"invalid expression" i1d7d@e))))))))))))))))))))))) (set! i285f@id9a@chi-expr id9a@chi-expr) (set! id9c@chi-set! (lambda (i1dcb@e i1dcc@r i1dcd@mr) (let ((i1dd1@t i1dcb@e)) (let ((i1dd3@ls/false (id78@syntax-dispatch i1dd1@t '(_ any any)))) (if (and i1dd3@ls/false (apply (lambda (i1dd5@x i1dd6@v) (ib71@id? i1dd5@x)) i1dd3@ls/false)) (apply (lambda (i1dd9@x i1dda@v) (call-with-values (lambda () (ib93@syntax-type i1dd9@x i1dcc@r)) (lambda (i1de3@i1dde i1de4@i1de0 i1de5@i1de2) (let ((i1de9@kwd i1de5@i1de2) (i1dea@value i1de4@i1de0) (i1deb@type i1de3@i1dde)) (let ((i1def@t i1deb@type)) (if (memv i1def@t '(lexical)) (begin (id06@set-lexical-mutable! i1dea@value '#t) (list 'set! (id02@lexical-var i1dea@value) (id9a@chi-expr i1dda@v i1dcc@r i1dcd@mr))) (if (memv i1def@t '(core-prim)) (ie58@syntax-violation '#f '"cannot modify imported core primitive" i1dcb@e) (if (memv i1def@t '(global)) (ie58@syntax-violation '#f '"attempt to modify imported binding" i1dcb@e) (if (memv i1def@t '(global-macro!)) (id9a@chi-expr (id94@chi-global-macro i1dea@value i1dcb@e) i1dcc@r i1dcd@mr) (if (memv i1def@t '(local-macro!)) (id9a@chi-expr (id92@chi-local-macro i1dea@value i1dcb@e) i1dcc@r i1dcd@mr) (if (memv i1def@t '(mutable)) (ie58@syntax-violation '#f '"attempt to assign to an unexportable variable" i1dcb@e) (ie58@syntax-violation '#f '"invalid syntax" i1dcb@e)))))))))))) i1dd3@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1dd1@t)))))) (set! i2860@id9c@chi-set! id9c@chi-set!) (set! id9e@verify-formals (lambda (i1df1@fmls i1df2@stx) (let ((i1df5@t i1df1@fmls)) (let ((i1df7@ls/false (id78@syntax-dispatch i1df5@t 'each-any))) (if i1df7@ls/false (apply (lambda (i1df9@x*) (if (not (ib79@valid-bound-ids? i1df9@x*)) (id32@invalid-fmls-error i1df2@stx i1df1@fmls) (void))) i1df7@ls/false) (let ((i1dfb@t i1df5@t)) (let ((i1dfd@ls/false (id78@syntax-dispatch i1dfb@t '#(each+ any () any)))) (if i1dfd@ls/false (apply (lambda (i1dff@x* i1e00@x) (if (not (ib79@valid-bound-ids? (cons i1e00@x i1dff@x*))) (id32@invalid-fmls-error i1df2@stx i1df1@fmls) (void))) i1dfd@ls/false) (let ((i1e03@t i1dfb@t)) (let ((i1e05@ls/false (id78@syntax-dispatch i1e03@t '_))) (if i1e05@ls/false (apply (lambda () (ie58@syntax-violation '#f '"invalid syntax" i1df2@stx)) i1e05@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1e03@t)))))))))))) (set! i2861@id9e@verify-formals id9e@verify-formals) (set! ida0@chi-lambda-clause (lambda (i1e07@stx i1e08@fmls i1e09@body* i1e0a@r i1e0b@mr) (let ((i1e11@t i1e08@fmls)) (let ((i1e13@ls/false (id78@syntax-dispatch i1e11@t 'each-any))) (if i1e13@ls/false (apply (lambda (i1e15@x*) (begin (id9e@verify-formals i1e08@fmls i1e07@stx) (let ((i1e17@lex* (map iaf9@gen-lexical i1e15@x*)) (i1e18@lab* (map iafd@gen-label i1e15@x*))) (values i1e17@lex* (idb0@chi-internal (ib5d@add-subst (ib31@make-full-rib i1e15@x* i1e18@lab*) i1e09@body*) (id0a@add-lexicals i1e18@lab* i1e17@lex* i1e0a@r) i1e0b@mr))))) i1e13@ls/false) (let ((i1e1b@t i1e11@t)) (let ((i1e1d@ls/false (id78@syntax-dispatch i1e1b@t '#(each+ any () any)))) (if i1e1d@ls/false (apply (lambda (i1e1f@x* i1e20@x) (begin (id9e@verify-formals i1e08@fmls i1e07@stx) (let ((i1e23@lex* (map iaf9@gen-lexical i1e1f@x*)) (i1e24@lab* (map iafd@gen-label i1e1f@x*)) (i1e25@lex (iaf9@gen-lexical i1e20@x)) (i1e26@lab (iafd@gen-label i1e20@x))) (values (append i1e23@lex* i1e25@lex) (idb0@chi-internal (ib5d@add-subst (ib31@make-full-rib (cons i1e20@x i1e1f@x*) (cons i1e26@lab i1e24@lab*)) i1e09@body*) (id0a@add-lexicals (cons i1e26@lab i1e24@lab*) (cons i1e25@lex i1e23@lex*) i1e0a@r) i1e0b@mr))))) i1e1d@ls/false) (let ((i1e2b@t i1e1b@t)) (let ((i1e2d@ls/false (id78@syntax-dispatch i1e2b@t '_))) (if i1e2d@ls/false (apply (lambda () (ie58@syntax-violation '#f '"invalid syntax" i1e08@fmls)) i1e2d@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1e2b@t)))))))))))) (set! i2862@ida0@chi-lambda-clause ida0@chi-lambda-clause) (set! ida2@chi-lambda-clause* (lambda (i1e2f@stx i1e30@fmls* i1e31@body** i1e32@r i1e33@mr) (if (null? i1e30@fmls*) (values '() '()) (call-with-values (lambda () (ida0@chi-lambda-clause i1e2f@stx (car i1e30@fmls*) (car i1e31@body**) i1e32@r i1e33@mr)) (lambda (i1e3d@i1e3a i1e3e@i1e3c) (let ((i1e41@b i1e3e@i1e3c) (i1e42@a i1e3d@i1e3a)) (call-with-values (lambda () (ida2@chi-lambda-clause* i1e2f@stx (cdr i1e30@fmls*) (cdr i1e31@body**) i1e32@r i1e33@mr)) (lambda (i1e49@i1e46 i1e4a@i1e48) (let ((i1e4d@b* i1e4a@i1e48) (i1e4e@a* i1e49@i1e46)) (values (cons i1e42@a i1e4e@a*) (cons i1e41@b i1e4d@b*))))))))))) (set! i2863@ida2@chi-lambda-clause* ida2@chi-lambda-clause*) (set! ida4@chi-defun (lambda (i1e51@x i1e52@r i1e53@mr) (let ((i1e57@fmls (car i1e51@x)) (i1e58@body* (cdr i1e51@x))) (call-with-values (lambda () (ida0@chi-lambda-clause i1e57@fmls i1e57@fmls i1e58@body* i1e52@r i1e53@mr)) (lambda (i1e5f@i1e5c i1e60@i1e5e) (let ((i1e63@body i1e60@i1e5e) (i1e64@fmls i1e5f@i1e5c)) (iad4@ia06@build-lambda '#f i1e64@fmls i1e63@body))))))) (set! i2864@ida4@chi-defun ida4@chi-defun) (set! ida6@chi-rhs (lambda (i1e67@rhs i1e68@r i1e69@mr) (let ((i1e6d@t (car i1e67@rhs))) (if (memv i1e6d@t '(defun)) (ida4@chi-defun (cdr i1e67@rhs) i1e68@r i1e69@mr) (if (memv i1e6d@t '(expr)) (let ((i1e6f@expr (cdr i1e67@rhs))) (id9a@chi-expr i1e6f@expr i1e68@r i1e69@mr)) (if (memv i1e6d@t '(top-expr)) (let ((i1e71@expr (cdr i1e67@rhs))) (iad6@ia36@build-sequence '#f (list (id9a@chi-expr i1e71@expr i1e68@r i1e69@mr) (iad7@ia38@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" i1e67@rhs))))))) (set! i2865@ida6@chi-rhs ida6@chi-rhs) (set! ida8@expand-interaction-rhs*/init* (lambda (i1e73@lhs* i1e74@rhs* i1e75@init* i1e76@r i1e77@mr) (let i1e81@f ((i1e7d@lhs* i1e73@lhs*) (i1e7e@rhs* i1e74@rhs*)) (if (null? i1e7d@lhs*) (map (lambda (i1e83@x) (id9a@chi-expr i1e83@x i1e76@r i1e77@mr)) i1e75@init*) (let ((i1e85@lhs (car i1e7d@lhs*)) (i1e86@rhs (car i1e7e@rhs*))) (let ((i1e89@t (car i1e86@rhs))) (if (memv i1e89@t '(defun)) (let ((i1e8b@rhs (ida4@chi-defun (cdr i1e86@rhs) i1e76@r i1e77@mr))) (cons (list 'set! i1e85@lhs i1e8b@rhs) (i1e81@f (cdr i1e7d@lhs*) (cdr i1e7e@rhs*)))) (if (memv i1e89@t '(expr)) (let ((i1e8d@rhs (id9a@chi-expr (cdr i1e86@rhs) i1e76@r i1e77@mr))) (cons (list 'set! i1e85@lhs i1e8d@rhs) (i1e81@f (cdr i1e7d@lhs*) (cdr i1e7e@rhs*)))) (if (memv i1e89@t '(top-expr)) (let ((i1e8f@e (id9a@chi-expr (cdr i1e86@rhs) i1e76@r i1e77@mr))) (cons i1e8f@e (i1e81@f (cdr i1e7d@lhs*) (cdr i1e7e@rhs*)))) (error 'expand-interaction '"invallid" i1e86@rhs)))))))))) (set! i2866@ida8@expand-interaction-rhs*/init* ida8@expand-interaction-rhs*/init*) (set! idaa@chi-rhs* (lambda (i1e91@rhs* i1e92@r i1e93@mr) (let i1e99@f ((i1e97@ls i1e91@rhs*)) (if (null? i1e97@ls) '() (let ((i1e9b@a (ida6@chi-rhs (car i1e97@ls) i1e92@r i1e93@mr))) (cons i1e9b@a (i1e99@f (cdr i1e97@ls)))))))) (set! i2867@idaa@chi-rhs* idaa@chi-rhs*) (set! idac@find-bound=? (lambda (i1e9d@x i1e9e@lhs* i1e9f@rhs*) (if (null? i1e9e@lhs*) '#f (if (ib75@bound-id=? i1e9d@x (car i1e9e@lhs*)) (car i1e9f@rhs*) (idac@find-bound=? i1e9d@x (cdr i1e9e@lhs*) (cdr i1e9f@rhs*)))))) (set! i2868@idac@find-bound=? idac@find-bound=?) (set! idae@find-dups (lambda (i1ea3@ls) (let i1ea9@f ((i1ea5@ls i1ea3@ls) (i1ea6@dups '())) (if (null? i1ea5@ls) i1ea6@dups (let ((i1eab@t (idac@find-bound=? (car i1ea5@ls) (cdr i1ea5@ls) (cdr i1ea5@ls)))) (if i1eab@t ((lambda (i1ead@x) (i1ea9@f (cdr i1ea5@ls) (cons (list (car i1ea5@ls) i1ead@x) i1ea6@dups))) i1eab@t) (i1ea9@f (cdr i1ea5@ls) i1ea6@dups))))))) (set! i2869@idae@find-dups idae@find-dups) (set! idb0@chi-internal (lambda (i1eaf@e* i1eb0@r i1eb1@mr) (let ((i1eb5@rib (ib25@make-empty-rib))) (call-with-values (lambda () (idd0@chi-body* (map (lambda (i1ec7@x) (ib5d@add-subst i1eb5@rib i1ec7@x)) (ib6f@syntax->list i1eaf@e*)) i1eb0@r i1eb1@mr '() '() '() '() '() i1eb5@rib '#f)) (lambda (i1ec9@i1eb8 i1eca@i1eba i1ecb@i1ebc i1ecc@i1ebe i1ecd@i1ec0 i1ece@i1ec2 i1ecf@i1ec4 i1ed0@i1ec6) (let ((i1ed9@_exp* i1ed0@i1ec6) (i1eda@kwd* i1ecf@i1ec4) (i1edb@mod** i1ece@i1ec2) (i1edc@rhs* i1ecd@i1ec0) (i1edd@lex* i1ecc@i1ebe) (i1ede@mr i1ecb@i1ebc) (i1edf@r i1eca@i1eba) (i1ee0@e* i1ec9@i1eb8)) (begin (if (null? i1ee0@e*) (ie58@syntax-violation '#f '"no expression in body" i1ee0@e*) (void)) (let ((i1ee9@init* (id96@chi-expr* (append (apply append (reverse i1edb@mod**)) i1ee0@e*) i1edf@r i1ede@mr))) (let ((i1eeb@rhs* (idaa@chi-rhs* i1edc@rhs* i1edf@r i1ede@mr))) (iadb@ia40@build-letrec* '#f (reverse i1edd@lex*) (reverse i1eeb@rhs*) (iad6@ia36@build-sequence '#f i1ee9@init*))))))))))) (set! i286a@idb0@chi-internal idb0@chi-internal) (set! idb2@parse-module (lambda (i1eed@e) (let ((i1eef@t i1eed@e)) (let ((i1ef1@ls/false (id78@syntax-dispatch i1eef@t '(_ each-any . each-any)))) (if i1ef1@ls/false (apply (lambda (i1ef3@export* i1ef4@b*) (begin (if (not (for-all ib71@id? i1ef3@export*)) (ie58@syntax-violation '#f '"module exports must be identifiers" i1eed@e) (void)) (values '#f (list->vector i1ef3@export*) i1ef4@b*))) i1ef1@ls/false) (let ((i1ef7@t i1eef@t)) (let ((i1ef9@ls/false (id78@syntax-dispatch i1ef7@t '(_ any each-any . each-any)))) (if i1ef9@ls/false (apply (lambda (i1efb@name i1efc@export* i1efd@b*) (begin (if (not (ib71@id? i1efb@name)) (ie58@syntax-violation '#f '"module name must be an identifier" i1eed@e) (void)) (if (not (for-all ib71@id? i1efc@export*)) (ie58@syntax-violation '#f '"module exports must be identifiers" i1eed@e) (void)) (values i1efb@name (list->vector i1efc@export*) i1efd@b*))) i1ef9@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1ef7@t))))))))) (set! i286b@idb2@parse-module idb2@parse-module) (set! idbc@module-interface? (lambda (i1f01@x) (and (simple-struct? i1f01@x) (eq? (simple-struct-name i1f01@x) 'module-interface)))) (set! i286c@idbc@module-interface? idbc@module-interface?) (set! idbe@module-interface-first-mark (lambda (i1f03@x) (simple-struct-ref i1f03@x '0))) (set! i286d@idbe@module-interface-first-mark idbe@module-interface-first-mark) (set! idc0@set-module-interface-first-mark! (lambda (i1f05@x i1f06@val) (simple-struct-set! i1f05@x '0 i1f06@val))) (set! i286e@idc0@set-module-interface-first-mark! idc0@set-module-interface-first-mark!) (set! idc2@module-interface-exp-id-vec (lambda (i1f09@x) (simple-struct-ref i1f09@x '1))) (set! i286f@idc2@module-interface-exp-id-vec idc2@module-interface-exp-id-vec) (set! idc4@set-module-interface-exp-id-vec! (lambda (i1f0b@x i1f0c@val) (simple-struct-set! i1f0b@x '1 i1f0c@val))) (set! i2870@idc4@set-module-interface-exp-id-vec! idc4@set-module-interface-exp-id-vec!) (set! idc6@module-interface-exp-lab-vec (lambda (i1f0f@x) (simple-struct-ref i1f0f@x '2))) (set! i2871@idc6@module-interface-exp-lab-vec idc6@module-interface-exp-lab-vec) (set! idc8@set-module-interface-exp-lab-vec! (lambda (i1f11@x i1f12@val) (simple-struct-set! i1f11@x '2 i1f12@val))) (set! i2872@idc8@set-module-interface-exp-lab-vec! idc8@set-module-interface-exp-lab-vec!) (set! idca@dummy '3) (set! i2873@idca@dummy idca@dummy) (set! idcc@module-interface-exp-id* (lambda (i1f15@iface i1f16@id) (letrec* ((i1f1a@diff-marks (lambda (i1f21@ls i1f22@x) (begin (if (null? i1f21@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((i1f25@a (car i1f21@ls))) (if (eq? i1f25@a i1f22@x) '() (cons i1f25@a (i1f1a@diff-marks (cdr i1f21@ls) i1f22@x)))))))) (let ((i1f1b@diff (i1f1a@diff-marks (ib43@stx-mark* i1f16@id) (idbe@module-interface-first-mark i1f15@iface))) (i1f1c@id-vec (idc2@module-interface-exp-id-vec i1f15@iface))) (if (null? i1f1b@diff) i1f1c@id-vec (vector-map (lambda (i1f1f@x) (make-simple-struct 'stx '5 (list (ib3f@stx-expr i1f1f@x) (append i1f1b@diff (ib43@stx-mark* i1f1f@x)) '() '()))) i1f1c@id-vec)))))) (set! i2874@idcc@module-interface-exp-id* idcc@module-interface-exp-id*) (set! idce@chi-internal-module (lambda (i1f27@e i1f28@r i1f29@mr i1f2a@lex* i1f2b@rhs* i1f2c@mod** i1f2d@kwd*) (call-with-values (lambda () (idb2@parse-module i1f27@e)) (lambda (i1f3b@i1f36 i1f3c@i1f38 i1f3d@i1f3a) (let ((i1f41@e* i1f3d@i1f3a) (i1f42@exp-id* i1f3c@i1f38) (i1f43@name i1f3b@i1f36)) (let ((i1f47@rib (ib25@make-empty-rib))) (let ((i1f49@e* (map (lambda (i1f4b@x) (ib5d@add-subst i1f47@rib i1f4b@x)) (ib6f@syntax->list i1f41@e*)))) (call-with-values (lambda () (idd0@chi-body* i1f49@e* i1f28@r i1f29@mr i1f2a@lex* i1f2b@rhs* i1f2c@mod** i1f2d@kwd* '() i1f47@rib '#f)) (lambda (i1f5d@i1f4e i1f5e@i1f50 i1f5f@i1f52 i1f60@i1f54 i1f61@i1f56 i1f62@i1f58 i1f63@i1f5a i1f64@i1f5c) (let ((i1f6d@_exp* i1f64@i1f5c) (i1f6e@kwd* i1f63@i1f5a) (i1f6f@mod** i1f62@i1f58) (i1f70@rhs* i1f61@i1f56) (i1f71@lex* i1f60@i1f54) (i1f72@mr i1f5f@i1f52) (i1f73@r i1f5e@i1f50) (i1f74@e* i1f5d@i1f4e)) (let ((i1f7d@exp-lab* (vector-map (lambda (i1f81@x) (or (ib87@id->label (make-simple-struct 'stx '5 (list (ib73@id->sym i1f81@x) (ib43@stx-mark* i1f81@x) (list i1f47@rib) '()))) (ie58@syntax-violation '#f '"cannot find module export" i1f81@x))) i1f42@exp-id*)) (i1f7e@mod** (cons i1f74@e* i1f6f@mod**))) (if (not i1f43@name) (values i1f71@lex* i1f70@rhs* i1f42@exp-id* i1f7d@exp-lab* i1f73@r i1f72@mr i1f7e@mod** i1f6e@kwd*) (let ((i1f83@lab (iafd@gen-label 'module)) (i1f84@iface (make-simple-struct 'module-interface '4 (list (car (ib43@stx-mark* i1f43@name)) (vector-map (lambda (i1f87@x) (make-simple-struct 'stx '5 (list (ib3f@stx-expr i1f87@x) (ib43@stx-mark* i1f87@x) '() '()))) i1f42@exp-id*) i1f7d@exp-lab*)))) (values i1f71@lex* i1f70@rhs* (vector i1f43@name) (vector i1f83@lab) (cons (cons i1f83@lab (cons '$module i1f84@iface)) i1f73@r) (cons (cons i1f83@lab (cons '$module i1f84@iface)) i1f72@mr) i1f7e@mod** i1f6e@kwd*)))))))))))))) (set! i2875@idce@chi-internal-module idce@chi-internal-module) (set! idd0@chi-body* (lambda (i1f89@e* i1f8a@r i1f8b@mr i1f8c@lex* i1f8d@rhs* i1f8e@mod** i1f8f@kwd* i1f90@exp* i1f91@rib i1f92@top?) (if (null? i1f89@e*) (values i1f89@e* i1f8a@r i1f8b@mr i1f8c@lex* i1f8d@rhs* i1f8e@mod** i1f8f@kwd* i1f90@exp*) (let ((i1f9d@e (car i1f89@e*))) (call-with-values (lambda () (ib93@syntax-type i1f9d@e i1f8a@r)) (lambda (i1fa5@i1fa0 i1fa6@i1fa2 i1fa7@i1fa4) (let ((i1fab@kwd i1fa7@i1fa4) (i1fac@value i1fa6@i1fa2) (i1fad@type i1fa5@i1fa0)) (let ((i1fb1@kwd* (if (ib71@id? i1fab@kwd) (cons i1fab@kwd i1f8f@kwd*) i1f8f@kwd*))) (let ((i1fb3@t i1fad@type)) (if (memv i1fb3@t '(define)) (call-with-values (lambda () (icfa@parse-define i1f9d@e)) (lambda (i1fb9@i1fb6 i1fba@i1fb8) (let ((i1fbd@rhs i1fba@i1fb8) (i1fbe@id i1fb9@i1fb6)) (begin (if (ib7d@bound-id-member? i1fbe@id i1fb1@kwd*) (ie58@syntax-violation '#f '"cannot redefine keyword" i1f9d@e) (void)) (call-with-values (lambda () (ib01@gen-define-label+loc i1fbe@id i1f91@rib)) (lambda (i1fc5@i1fc2 i1fc6@i1fc4) (let ((i1fc9@lex i1fc6@i1fc4) (i1fca@lab i1fc5@i1fc2)) (begin (ib27@extend-rib! i1f91@rib i1fbe@id i1fca@lab) (idd0@chi-body* (cdr i1f89@e*) (id08@add-lexical i1fca@lab i1fc9@lex i1f8a@r) i1f8b@mr (cons i1fc9@lex i1f8c@lex*) (cons i1fbd@rhs i1f8d@rhs*) i1f8e@mod** i1fb1@kwd* i1f90@exp* i1f91@rib i1f92@top?))))))))) (if (memv i1fb3@t '(define-syntax)) (call-with-values (lambda () (icfc@parse-define-syntax i1f9d@e)) (lambda (i1fd1@i1fce i1fd2@i1fd0) (let ((i1fd5@rhs i1fd2@i1fd0) (i1fd6@id i1fd1@i1fce)) (begin (if (ib7d@bound-id-member? i1fd6@id i1fb1@kwd*) (ie58@syntax-violation '#f '"cannot redefine keyword" i1f9d@e) (void)) (let ((i1fd9@lab (ib03@gen-define-label i1fd6@id i1f91@rib)) (i1fda@expanded-rhs (idd2@expand-transformer i1fd5@rhs i1f8b@mr))) (begin (ib27@extend-rib! i1f91@rib i1fd6@id i1fd9@lab) (let ((i1fdd@b (iba9@make-eval-transformer i1fda@expanded-rhs))) (idd0@chi-body* (cdr i1f89@e*) (cons (cons i1fd9@lab i1fdd@b) i1f8a@r) (cons (cons i1fd9@lab i1fdd@b) i1f8b@mr) i1f8c@lex* i1f8d@rhs* i1f8e@mod** i1fb1@kwd* i1f90@exp* i1f91@rib i1f92@top?)))))))) (if (memv i1fb3@t '(let-syntax letrec-syntax)) (let ((i1fdf@t i1f9d@e)) (let ((i1fe1@ls/false (id78@syntax-dispatch i1fdf@t '(_ #(each (any any)) . each-any)))) (if (and i1fe1@ls/false (apply (lambda (i1fe3@xlhs* i1fe4@xrhs* i1fe5@xbody*) (if (not (ib79@valid-bound-ids? i1fe3@xlhs*)) (ie58@syntax-violation '#f '"invalid identifiers" i1f9d@e) (void))) i1fe1@ls/false)) (apply (lambda (i1fe9@xlhs* i1fea@xrhs* i1feb@xbody*) (let ((i1fef@xlab* (map iafd@gen-label i1fe9@xlhs*))) (let ((i1ff1@xrib (ib31@make-full-rib i1fe9@xlhs* i1fef@xlab*))) (let ((i1ff3@xb* (map (lambda (i1ff5@x) (iba9@make-eval-transformer (idd2@expand-transformer (if (eq? i1fad@type 'let-syntax) i1ff5@x (ib5d@add-subst i1ff1@xrib i1ff5@x)) i1f8b@mr))) i1fea@xrhs*))) (idd0@chi-body* (append (map (lambda (i1ff7@x) (ib5d@add-subst i1ff1@xrib i1ff7@x)) i1feb@xbody*) (cdr i1f89@e*)) (append (map cons i1fef@xlab* i1ff3@xb*) i1f8a@r) (append (map cons i1fef@xlab* i1ff3@xb*) i1f8b@mr) i1f8c@lex* i1f8d@rhs* i1f8e@mod** i1fb1@kwd* i1f90@exp* i1f91@rib i1f92@top?))))) i1fe1@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1fdf@t)))) (if (memv i1fb3@t '(begin)) (let ((i1ff9@t i1f9d@e)) (let ((i1ffb@ls/false (id78@syntax-dispatch i1ff9@t '(_ . each-any)))) (if i1ffb@ls/false (apply (lambda (i1ffd@x*) (idd0@chi-body* (append i1ffd@x* (cdr i1f89@e*)) i1f8a@r i1f8b@mr i1f8c@lex* i1f8d@rhs* i1f8e@mod** i1fb1@kwd* i1f90@exp* i1f91@rib i1f92@top?)) i1ffb@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i1ff9@t)))) (if (memv i1fb3@t '(global-macro global-macro!)) (idd0@chi-body* (cons (ib5d@add-subst i1f91@rib (id94@chi-global-macro i1fac@value i1f9d@e)) (cdr i1f89@e*)) i1f8a@r i1f8b@mr i1f8c@lex* i1f8d@rhs* i1f8e@mod** i1fb1@kwd* i1f90@exp* i1f91@rib i1f92@top?) (if (memv i1fb3@t '(local-macro local-macro!)) (idd0@chi-body* (cons (ib5d@add-subst i1f91@rib (id92@chi-local-macro i1fac@value i1f9d@e)) (cdr i1f89@e*)) i1f8a@r i1f8b@mr i1f8c@lex* i1f8d@rhs* i1f8e@mod** i1fb1@kwd* i1f90@exp* i1f91@rib i1f92@top?) (if (memv i1fb3@t '(macro macro!)) (idd0@chi-body* (cons (ib5d@add-subst i1f91@rib (id90@chi-macro i1fac@value i1f9d@e)) (cdr i1f89@e*)) i1f8a@r i1f8b@mr i1f8c@lex* i1f8d@rhs* i1f8e@mod** i1fb1@kwd* i1f90@exp* i1f91@rib i1f92@top?) (if (memv i1fb3@t '(module)) (call-with-values (lambda () (idce@chi-internal-module i1f9d@e i1f8a@r i1f8b@mr i1f8c@lex* i1f8d@rhs* i1f8e@mod** i1fb1@kwd*)) (lambda (i200f@i2000 i2010@i2002 i2011@i2004 i2012@i2006 i2013@i2008 i2014@i200a i2015@i200c i2016@i200e) (let ((i201f@kwd* i2016@i200e) (i2020@mod** i2015@i200c) (i2021@mr i2014@i200a) (i2022@r i2013@i2008) (i2023@m-exp-lab* i2012@i2006) (i2024@m-exp-id* i2011@i2004) (i2025@rhs* i2010@i2002) (i2026@lex* i200f@i2000)) (begin (vector-for-each (lambda (i202f@id i2030@lab) (ib27@extend-rib! i1f91@rib i202f@id i2030@lab)) i2024@m-exp-id* i2023@m-exp-lab*) (idd0@chi-body* (cdr i1f89@e*) i2022@r i2021@mr i2026@lex* i2025@rhs* i2020@mod** i201f@kwd* i1f90@exp* i1f91@rib i1f92@top?))))) (if (memv i1fb3@t '(library)) (begin (ie3a@library-expander (ib85@stx->datum i1f9d@e)) (idd0@chi-body* (cdr i1f89@e*) i1f8a@r i1f8b@mr i1f8c@lex* i1f8d@rhs* i1f8e@mod** i1fb1@kwd* i1f90@exp* i1f91@rib i1f92@top?)) (if (memv i1fb3@t '(export)) (let ((i2033@t i1f9d@e)) (let ((i2035@ls/false (id78@syntax-dispatch i2033@t '(_ . each-any)))) (if i2035@ls/false (apply (lambda (i2037@exp-decl*) (idd0@chi-body* (cdr i1f89@e*) i1f8a@r i1f8b@mr i1f8c@lex* i1f8d@rhs* i1f8e@mod** i1fb1@kwd* (append i2037@exp-decl* i1f90@exp*) i1f91@rib i1f92@top?)) i2035@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i2033@t)))) (if (memv i1fb3@t '(import)) (letrec* ((i203a@module-import? (lambda (i208d@e) (let ((i208f@t i208d@e)) (let ((i2091@ls/false (id78@syntax-dispatch i208f@t '(_ any)))) (if (and i2091@ls/false (apply (lambda (i2093@id) (ib71@id? i2093@id)) i2091@ls/false)) (apply (lambda (i2095@id) '#t) i2091@ls/false) (let ((i2097@t i208f@t)) (let ((i2099@ls/false (id78@syntax-dispatch i2097@t '(_ . each-any)))) (if i2099@ls/false (apply (lambda (i209b@imp*) '#f) i2099@ls/false) (let ((i209d@t i2097@t)) (let ((i209f@ls/false (id78@syntax-dispatch i209d@t '_))) (if i209f@ls/false (apply (lambda () (ie58@syntax-violation '#f '"malformed import form" i208d@e)) i209f@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i209d@t)))))))))))) (i203c@module-import (lambda (i206b@e i206c@r) (let ((i206f@t i206b@e)) (let ((i2071@ls/false (id78@syntax-dispatch i206f@t '(_ any)))) (if (and i2071@ls/false (apply (lambda (i2073@id) (ib71@id? i2073@id)) i2071@ls/false)) (apply (lambda (i2075@id) (call-with-values (lambda () (ib93@syntax-type i2075@id i206c@r)) (lambda (i207d@i2078 i207e@i207a i207f@i207c) (let ((i2083@kwd i207f@i207c) (i2084@value i207e@i207a) (i2085@type i207d@i2078)) (let ((i2089@t i2085@type)) (if (memv i2089@t '($module)) (let ((i208b@iface i2084@value)) (values (idcc@module-interface-exp-id* i208b@iface i2075@id) (idc6@module-interface-exp-lab-vec i208b@iface))) (ie58@syntax-violation '#f '"invalid import" i206b@e))))))) i2071@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i206f@t)))))) (i203e@library-import (lambda (i204f@e) (let ((i2051@t i204f@e)) (let ((i2053@ls/false (id78@syntax-dispatch i2051@t '(any . each-any)))) (if i2053@ls/false (apply (lambda (i2055@ctxt i2056@imp*) (call-with-values (lambda () (idda@parse-import-spec* (ie5e@syntax->datum i2056@imp*))) (lambda (i205d@i205a i205e@i205c) (let ((i2061@subst-labels i205e@i205c) (i2062@subst-names i205d@i205a)) (values (vector-map (lambda (i2065@name) (ib51@datum->stx i2055@ctxt i2065@name)) i2062@subst-names) i2061@subst-labels))))) i2053@ls/false) (let ((i2067@t i2051@t)) (let ((i2069@ls/false (id78@syntax-dispatch i2067@t '_))) (if i2069@ls/false (apply (lambda () (ie58@syntax-violation '#f '"invalid import form" i204f@e)) i2069@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i2067@t)))))))))) (begin (call-with-values (lambda () (if (i203a@module-import? i1f9d@e) (i203c@module-import i1f9d@e i1f8a@r) (i203e@library-import i1f9d@e))) (lambda (i2043@i2040 i2044@i2042) (let ((i2047@lab* i2044@i2042) (i2048@id* i2043@i2040)) (vector-for-each (lambda (i204b@id i204c@lab) (ib27@extend-rib! i1f91@rib i204b@id i204c@lab)) i2048@id* i2047@lab*)))) (idd0@chi-body* (cdr i1f89@e*) i1f8a@r i1f8b@mr i1f8c@lex* i1f8d@rhs* i1f8e@mod** i1fb1@kwd* i1f90@exp* i1f91@rib i1f92@top?))) (if i1f92@top? (idd0@chi-body* (cdr i1f89@e*) i1f8a@r i1f8b@mr (cons (iaf9@gen-lexical 'dummy) i1f8c@lex*) (cons (cons 'top-expr i1f9d@e) i1f8d@rhs*) i1f8e@mod** i1fb1@kwd* i1f90@exp* i1f91@rib i1f92@top?) (values i1f89@e* i1f8a@r i1f8b@mr i1f8c@lex* i1f8d@rhs* i1f8e@mod** i1fb1@kwd* i1f90@exp*)))))))))))))))))))))) (set! i2876@idd0@chi-body* idd0@chi-body*) (set! idd2@expand-transformer (lambda (i20a1@expr i20a2@r) (let ((i20a5@rtc (idde@make-collector))) (let ((i20a7@expanded-rhs (let ((i20b1@i20aa ide0@inv-collector) (i20b2@i20ac ide2@vis-collector) (i20b3@i20ae i20a5@rtc) (i20b4@i20b0 (lambda (i20b9@x) (values)))) (let ((i20bb@swap (lambda () (begin (let ((i20bd@t (i20b1@i20aa))) (begin (i20b1@i20aa i20b3@i20ae) (set! i20b3@i20ae i20bd@t))) (let ((i20bf@t (i20b2@i20ac))) (begin (i20b2@i20ac i20b4@i20b0) (set! i20b4@i20b0 i20bf@t))))))) (dynamic-wind i20bb@swap (lambda () (id9a@chi-expr i20a1@expr i20a2@r i20a2@r)) i20bb@swap))))) (begin (for-each (let ((i20c1@mark-visit (ide2@vis-collector))) (lambda (i20c3@x) (begin (i98d@i7db@invoke-library i20c3@x) (i20c1@mark-visit i20c3@x)))) (i20a5@rtc)) i20a7@expanded-rhs))))) (set! i2877@idd2@expand-transformer idd2@expand-transformer) (set! idd4@parse-exports (lambda (i20c5@exp*) (let i20cd@f ((i20c7@exp* i20c5@exp*) (i20c8@int* '()) (i20c9@ext* '())) (if (null? i20c7@exp*) (begin (if (not (ib79@valid-bound-ids? i20c9@ext*)) (ie58@syntax-violation 'export '"invalid exports" (idae@find-dups i20c9@ext*)) (void)) (values (map ie5e@syntax->datum i20c9@ext*) i20c8@int*)) (let ((i20cf@t (car i20c7@exp*))) (let ((i20d1@ls/false (id78@syntax-dispatch i20cf@t '(any . #(each (any any)))))) (if i20d1@ls/false (apply (lambda (i20d3@rename i20d4@i* i20d5@e*) (begin (if (not (and (eq? (ie5e@syntax->datum i20d3@rename) 'rename) (for-all ib71@id? i20d4@i*) (for-all ib71@id? i20d5@e*))) (ie58@syntax-violation 'export '"invalid export specifier" (car i20c7@exp*)) (void)) (i20cd@f (cdr i20c7@exp*) (append i20d4@i* i20c8@int*) (append i20d5@e* i20c9@ext*)))) i20d1@ls/false) (let ((i20d9@t i20cf@t)) (let ((i20db@ls/false (id78@syntax-dispatch i20d9@t 'any))) (if i20db@ls/false (apply (lambda (i20dd@ie) (begin (if (not (ib71@id? i20dd@ie)) (ie58@syntax-violation 'export '"invalid export" i20dd@ie) (void)) (i20cd@f (cdr i20c7@exp*) (cons i20dd@ie i20c8@int*) (cons i20dd@ie i20c9@ext*)))) i20db@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i20d9@t))))))))))) (set! i2878@idd4@parse-exports idd4@parse-exports) (set! idd6@parse-library-name (lambda (i20df@spec) (letrec* ((i20e2@parse (lambda (i20ef@x) (let ((i20f1@t i20ef@x)) (let ((i20f3@ls/false (id78@syntax-dispatch i20f1@t '(each-any)))) (if (and i20f3@ls/false (apply (lambda (i20f5@v*) (for-all (lambda (i20f7@x) (let ((i20f9@x (ie5e@syntax->datum i20f7@x))) (and (integer? i20f9@x) (exact? i20f9@x)))) i20f5@v*)) i20f3@ls/false)) (apply (lambda (i20fb@v*) (values '() (map ie5e@syntax->datum i20fb@v*))) i20f3@ls/false) (let ((i20fd@t i20f1@t)) (let ((i20ff@ls/false (id78@syntax-dispatch i20fd@t '(any . any)))) (if (and i20ff@ls/false (apply (lambda (i2101@x i2102@rest) (symbol? (ie5e@syntax->datum i2101@x))) i20ff@ls/false)) (apply (lambda (i2105@x i2106@rest) (call-with-values (lambda () (i20e2@parse i2106@rest)) (lambda (i210d@i210a i210e@i210c) (let ((i2111@v* i210e@i210c) (i2112@x* i210d@i210a)) (values (cons (ie5e@syntax->datum i2105@x) i2112@x*) i2111@v*))))) i20ff@ls/false) (let ((i2115@t i20fd@t)) (let ((i2117@ls/false (id78@syntax-dispatch i2115@t '()))) (if i2117@ls/false (apply (lambda () (values '() '())) i2117@ls/false) (let ((i2119@t i2115@t)) (let ((i211b@ls/false (id78@syntax-dispatch i2119@t '_))) (if i211b@ls/false (apply (lambda () (ie58@syntax-violation '#f '"invalid library name" i20df@spec)) i211b@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i2119@t)))))))))))))))) (call-with-values (lambda () (i20e2@parse i20df@spec)) (lambda (i20e7@i20e4 i20e8@i20e6) (let ((i20eb@ver* i20e8@i20e6) (i20ec@name* i20e7@i20e4)) (begin (if (null? i20ec@name*) (ie58@syntax-violation '#f '"empty library name" i20df@spec) (void)) (values i20ec@name* i20eb@ver*)))))))) (set! i2879@idd6@parse-library-name idd6@parse-library-name) (set! idd8@parse-library (lambda (i211d@e) (let ((i211f@t i211d@e)) (let ((i2121@ls/false (id78@syntax-dispatch i211f@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and i2121@ls/false (apply (lambda (i2123@library i2124@name* i2125@export i2126@exp* i2127@import i2128@imp* i2129@b*) (and (eq? (ie5e@syntax->datum i2125@export) 'export) (eq? (ie5e@syntax->datum i2127@import) 'import) (eq? (ie5e@syntax->datum i2123@library) 'library))) i2121@ls/false)) (apply (lambda (i2131@library i2132@name* i2133@export i2134@exp* i2135@import i2136@imp* i2137@b*) (values i2132@name* i2134@exp* i2136@imp* i2137@b*)) i2121@ls/false) (let ((i213f@t i211f@t)) (let ((i2141@ls/false (id78@syntax-dispatch i213f@t '_))) (if i2141@ls/false (apply (lambda () (ie58@syntax-violation '#f '"malformed library" i211d@e)) i2141@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i213f@t))))))))) (set! i287a@idd8@parse-library idd8@parse-library) (set! idda@parse-import-spec* (letrec* ((i2144@idsyn? (lambda (i234d@x) (symbol? (ie5e@syntax->datum i234d@x)))) (i2146@dup-error (lambda (i234b@name) (ie58@syntax-violation 'import '"two imports with different bindings" i234b@name))) (i2148@merge-substs (lambda (i2339@s i233a@subst) (letrec* ((i233e@insert-to-subst (lambda (i233f@a i2340@subst) (let ((i2343@name (car i233f@a)) (i2344@label (cdr i233f@a))) (let ((i2347@t (assq i2343@name i2340@subst))) (if i2347@t ((lambda (i2349@x) (if (eq? (cdr i2349@x) i2344@label) i2340@subst (i2146@dup-error i2343@name))) i2347@t) (cons i233f@a i2340@subst))))))) (if (null? i2339@s) i233a@subst (i233e@insert-to-subst (car i2339@s) (i2148@merge-substs (cdr i2339@s) i233a@subst)))))) (i214a@exclude* (lambda (i2309@sym* i230a@subst) (letrec* ((i230e@exclude (lambda (i2327@sym i2328@subst) (if (null? i2328@subst) (ie58@syntax-violation 'import '"cannot rename unbound identifier" i2327@sym) (if (eq? i2327@sym (caar i2328@subst)) (values (cdar i2328@subst) (cdr i2328@subst)) (let ((i232b@a (car i2328@subst))) (call-with-values (lambda () (i230e@exclude i2327@sym (cdr i2328@subst))) (lambda (i2331@i232e i2332@i2330) (let ((i2335@subst i2332@i2330) (i2336@old i2331@i232e)) (values i2336@old (cons i232b@a i2335@subst))))))))))) (if (null? i2309@sym*) (values '() i230a@subst) (call-with-values (lambda () (i230e@exclude (car i2309@sym*) i230a@subst)) (lambda (i2313@i2310 i2314@i2312) (let ((i2317@subst i2314@i2312) (i2318@old i2313@i2310)) (call-with-values (lambda () (i214a@exclude* (cdr i2309@sym*) i2317@subst)) (lambda (i231f@i231c i2320@i231e) (let ((i2323@subst i2320@i231e) (i2324@old* i231f@i231c)) (values (cons i2318@old i2324@old*) i2323@subst))))))))))) (i214c@find* (lambda (i2301@sym* i2302@subst) (map (lambda (i2305@x) (let ((i2307@t (assq i2305@x i2302@subst))) (if i2307@t (cdr i2307@t) (ie58@syntax-violation 'import '"cannot find identifier" i2305@x)))) i2301@sym*))) (i214e@rem* (lambda (i22f9@sym* i22fa@subst) (let i22ff@f ((i22fd@subst i22fa@subst)) (if (null? i22fd@subst) '() (if (memq (caar i22fd@subst) i22f9@sym*) (i22ff@f (cdr i22fd@subst)) (cons (car i22fd@subst) (i22ff@f (cdr i22fd@subst)))))))) (i2150@remove-dups (lambda (i22f7@ls) (if (null? i22f7@ls) '() (if (memq (car i22f7@ls) (cdr i22f7@ls)) (i2150@remove-dups (cdr i22f7@ls)) (cons (car i22f7@ls) (i2150@remove-dups (cdr i22f7@ls))))))) (i2152@parse-library-name (lambda (i220f@spec) (letrec* ((i2212@subversion? (lambda (i22f3@x) (let ((i22f5@x (ie5e@syntax->datum i22f3@x))) (and (integer? i22f5@x) (exact? i22f5@x) (>= i22f5@x '0))))) (i2214@subversion-pred (lambda (i2293@x*) (let ((i2295@t i2293@x*)) (let ((i2297@ls/false (id78@syntax-dispatch i2295@t 'any))) (if (and i2297@ls/false (apply (lambda (i2299@n) (i2212@subversion? i2299@n)) i2297@ls/false)) (apply (lambda (i229b@n) (lambda (i229d@x) (= i229d@x (ie5e@syntax->datum i229b@n)))) i2297@ls/false) (let ((i229f@t i2295@t)) (let ((i22a1@ls/false (id78@syntax-dispatch i229f@t '(any . each-any)))) (if (and i22a1@ls/false (apply (lambda (i22a3@p? i22a4@sub*) (eq? (ie5e@syntax->datum i22a3@p?) 'and)) i22a1@ls/false)) (apply (lambda (i22a7@p? i22a8@sub*) (let ((i22ab@p* (map i2214@subversion-pred i22a8@sub*))) (lambda (i22ad@x) (for-all (lambda (i22af@p) (i22af@p i22ad@x)) i22ab@p*)))) i22a1@ls/false) (let ((i22b1@t i229f@t)) (let ((i22b3@ls/false (id78@syntax-dispatch i22b1@t '(any . each-any)))) (if (and i22b3@ls/false (apply (lambda (i22b5@p? i22b6@sub*) (eq? (ie5e@syntax->datum i22b5@p?) 'or)) i22b3@ls/false)) (apply (lambda (i22b9@p? i22ba@sub*) (let ((i22bd@p* (map i2214@subversion-pred i22ba@sub*))) (lambda (i22bf@x) (exists (lambda (i22c1@p) (i22c1@p i22bf@x)) i22bd@p*)))) i22b3@ls/false) (let ((i22c3@t i22b1@t)) (let ((i22c5@ls/false (id78@syntax-dispatch i22c3@t '(any any)))) (if (and i22c5@ls/false (apply (lambda (i22c7@p? i22c8@sub) (eq? (ie5e@syntax->datum i22c7@p?) 'not)) i22c5@ls/false)) (apply (lambda (i22cb@p? i22cc@sub) (let ((i22cf@p (i2214@subversion-pred i22cc@sub))) (lambda (i22d1@x) (not (i22cf@p i22d1@x))))) i22c5@ls/false) (let ((i22d3@t i22c3@t)) (let ((i22d5@ls/false (id78@syntax-dispatch i22d3@t '(any any)))) (if (and i22d5@ls/false (apply (lambda (i22d7@p? i22d8@n) (and (eq? (ie5e@syntax->datum i22d7@p?) '<=) (i2212@subversion? i22d8@n))) i22d5@ls/false)) (apply (lambda (i22db@p? i22dc@n) (lambda (i22df@x) (<= i22df@x (ie5e@syntax->datum i22dc@n)))) i22d5@ls/false) (let ((i22e1@t i22d3@t)) (let ((i22e3@ls/false (id78@syntax-dispatch i22e1@t '(any any)))) (if (and i22e3@ls/false (apply (lambda (i22e5@p? i22e6@n) (and (eq? (ie5e@syntax->datum i22e5@p?) '>=) (i2212@subversion? i22e6@n))) i22e3@ls/false)) (apply (lambda (i22e9@p? i22ea@n) (lambda (i22ed@x) (>= i22ed@x (ie5e@syntax->datum i22ea@n)))) i22e3@ls/false) (let ((i22ef@t i22e1@t)) (let ((i22f1@ls/false (id78@syntax-dispatch i22ef@t '_))) (if i22f1@ls/false (apply (lambda () (ie58@syntax-violation 'import '"invalid sub-version spec" i220f@spec i2293@x*)) i22f1@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i22ef@t)))))))))))))))))))))))) (i2216@version-pred (lambda (i2243@x*) (let ((i2245@t i2243@x*)) (let ((i2247@ls/false (id78@syntax-dispatch i2245@t '()))) (if i2247@ls/false (apply (lambda () (lambda (i2249@x) '#t)) i2247@ls/false) (let ((i224b@t i2245@t)) (let ((i224d@ls/false (id78@syntax-dispatch i224b@t '(any . each-any)))) (if (and i224d@ls/false (apply (lambda (i224f@c i2250@ver*) (eq? (ie5e@syntax->datum i224f@c) 'and)) i224d@ls/false)) (apply (lambda (i2253@c i2254@ver*) (let ((i2257@p* (map i2216@version-pred i2254@ver*))) (lambda (i2259@x) (for-all (lambda (i225b@p) (i225b@p i2259@x)) i2257@p*)))) i224d@ls/false) (let ((i225d@t i224b@t)) (let ((i225f@ls/false (id78@syntax-dispatch i225d@t '(any . each-any)))) (if (and i225f@ls/false (apply (lambda (i2261@c i2262@ver*) (eq? (ie5e@syntax->datum i2261@c) 'or)) i225f@ls/false)) (apply (lambda (i2265@c i2266@ver*) (let ((i2269@p* (map i2216@version-pred i2266@ver*))) (lambda (i226b@x) (exists (lambda (i226d@p) (i226d@p i226b@x)) i2269@p*)))) i225f@ls/false) (let ((i226f@t i225d@t)) (let ((i2271@ls/false (id78@syntax-dispatch i226f@t '(any any)))) (if (and i2271@ls/false (apply (lambda (i2273@c i2274@ver) (eq? (ie5e@syntax->datum i2273@c) 'not)) i2271@ls/false)) (apply (lambda (i2277@c i2278@ver) (let ((i227b@p (i2216@version-pred i2278@ver))) (lambda (i227d@x) (not (i227b@p i227d@x))))) i2271@ls/false) (let ((i227f@t i226f@t)) (let ((i2281@ls/false (id78@syntax-dispatch i227f@t 'each-any))) (if i2281@ls/false (apply (lambda (i2283@sub*) (let ((i2285@p* (map i2214@subversion-pred i2283@sub*))) (lambda (i2287@x) (let i228d@f ((i2289@p* i2285@p*) (i228a@x i2287@x)) (if (null? i2289@p*) '#t (if (null? i228a@x) '#f (and ((car i2289@p*) (car i228a@x)) (i228d@f (cdr i2289@p*) (cdr i228a@x))))))))) i2281@ls/false) (let ((i228f@t i227f@t)) (let ((i2291@ls/false (id78@syntax-dispatch i228f@t '_))) (if i2291@ls/false (apply (lambda () (ie58@syntax-violation 'import '"invalid version spec" i220f@spec i2243@x*)) i2291@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i228f@t)))))))))))))))))))))) (let i2219@f ((i2217@x i220f@spec)) (let ((i221b@t i2217@x)) (let ((i221d@ls/false (id78@syntax-dispatch i221b@t '(each-any)))) (if i221d@ls/false (apply (lambda (i221f@version-spec*) (values '() (i2216@version-pred i221f@version-spec*))) i221d@ls/false) (let ((i2221@t i221b@t)) (let ((i2223@ls/false (id78@syntax-dispatch i2221@t '(any . any)))) (if (and i2223@ls/false (apply (lambda (i2225@x i2226@x*) (i2144@idsyn? i2225@x)) i2223@ls/false)) (apply (lambda (i2229@x i222a@x*) (call-with-values (lambda () (i2219@f i222a@x*)) (lambda (i2231@i222e i2232@i2230) (let ((i2235@pred i2232@i2230) (i2236@name i2231@i222e)) (values (cons (ie5e@syntax->datum i2229@x) i2236@name) i2235@pred))))) i2223@ls/false) (let ((i2239@t i2221@t)) (let ((i223b@ls/false (id78@syntax-dispatch i2239@t '()))) (if i223b@ls/false (apply (lambda () (values '() (lambda (i223d@x) '#t))) i223b@ls/false) (let ((i223f@t i2239@t)) (let ((i2241@ls/false (id78@syntax-dispatch i223f@t '_))) (if i2241@ls/false (apply (lambda () (ie58@syntax-violation '#f '"invalid import spec" i220f@spec)) i2241@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i223f@t))))))))))))))))) (i2154@import-library (lambda (i21ff@spec*) (call-with-values (lambda () (i2152@parse-library-name i21ff@spec*)) (lambda (i2205@i2202 i2206@i2204) (let ((i2209@pred i2206@i2204) (i220a@name i2205@i2202)) (begin (if (null? i220a@name) (ie58@syntax-violation 'import '"empty library name" i21ff@spec*) (void)) (let ((i220d@lib (i986@i7cd@find-library-by-name i220a@name))) (begin (if (not i220d@lib) (ie58@syntax-violation 'import '"cannot find library with required name" i220a@name) (void)) (if (not (i2209@pred (i960@i781@library-version i220d@lib))) (ie58@syntax-violation 'import '"library does not satisfy version specification" i21ff@spec* i220d@lib) (void)) ((ide4@imp-collector) i220d@lib) (i968@i791@library-subst i220d@lib))))))))) (i2156@get-import (lambda (i2171@spec) (let ((i2173@t i2171@spec)) (let ((i2175@ls/false (id78@syntax-dispatch i2173@t '(any . each-any)))) (if (and i2175@ls/false (apply (lambda (i2177@x i2178@x*) (not (memq (ie5e@syntax->datum i2177@x) '(for rename except only prefix library)))) i2175@ls/false)) (apply (lambda (i217b@x i217c@x*) (i2154@import-library (cons i217b@x i217c@x*))) i2175@ls/false) (let ((i217f@t i2173@t)) (let ((i2181@ls/false (id78@syntax-dispatch i217f@t '(any any . #(each (any any)))))) (if (and i2181@ls/false (apply (lambda (i2183@rename i2184@isp i2185@old* i2186@new*) (and (eq? (ie5e@syntax->datum i2183@rename) 'rename) (for-all i2144@idsyn? i2185@old*) (for-all i2144@idsyn? i2186@new*))) i2181@ls/false)) (apply (lambda (i218b@rename i218c@isp i218d@old* i218e@new*) (let ((i2193@subst (i2156@get-import i218c@isp)) (i2194@old* (map ie5e@syntax->datum i218d@old*)) (i2195@new* (map ie5e@syntax->datum i218e@new*))) (let ((i2199@old-label* (i214c@find* i2194@old* i2193@subst))) (let ((i219b@subst (i214e@rem* i2194@old* i2193@subst))) (i2148@merge-substs (map cons i2195@new* i2199@old-label*) i219b@subst))))) i2181@ls/false) (let ((i219d@t i217f@t)) (let ((i219f@ls/false (id78@syntax-dispatch i219d@t '(any any . each-any)))) (if (and i219f@ls/false (apply (lambda (i21a1@except i21a2@isp i21a3@sym*) (and (eq? (ie5e@syntax->datum i21a1@except) 'except) (for-all i2144@idsyn? i21a3@sym*))) i219f@ls/false)) (apply (lambda (i21a7@except i21a8@isp i21a9@sym*) (let ((i21ad@subst (i2156@get-import i21a8@isp))) (i214e@rem* (map ie5e@syntax->datum i21a9@sym*) i21ad@subst))) i219f@ls/false) (let ((i21af@t i219d@t)) (let ((i21b1@ls/false (id78@syntax-dispatch i21af@t '(any any . each-any)))) (if (and i21b1@ls/false (apply (lambda (i21b3@only i21b4@isp i21b5@sym*) (and (eq? (ie5e@syntax->datum i21b3@only) 'only) (for-all i2144@idsyn? i21b5@sym*))) i21b1@ls/false)) (apply (lambda (i21b9@only i21ba@isp i21bb@sym*) (let ((i21bf@subst (i2156@get-import i21ba@isp)) (i21c0@sym* (map ie5e@syntax->datum i21bb@sym*))) (let ((i21c3@sym* (i2150@remove-dups i21c0@sym*))) (let ((i21c5@lab* (i214c@find* i21c3@sym* i21bf@subst))) (map cons i21c3@sym* i21c5@lab*))))) i21b1@ls/false) (let ((i21c7@t i21af@t)) (let ((i21c9@ls/false (id78@syntax-dispatch i21c7@t '(any any any)))) (if (and i21c9@ls/false (apply (lambda (i21cb@prefix i21cc@isp i21cd@p) (and (eq? (ie5e@syntax->datum i21cb@prefix) 'prefix) (i2144@idsyn? i21cd@p))) i21c9@ls/false)) (apply (lambda (i21d1@prefix i21d2@isp i21d3@p) (let ((i21d7@subst (i2156@get-import i21d2@isp)) (i21d8@prefix (symbol->string (ie5e@syntax->datum i21d3@p)))) (map (lambda (i21db@x) (cons (string->symbol (string-append i21d8@prefix (symbol->string (car i21db@x)))) (cdr i21db@x))) i21d7@subst))) i21c9@ls/false) (let ((i21dd@t i21c7@t)) (let ((i21df@ls/false (id78@syntax-dispatch i21dd@t '(any each-any)))) (if (and i21df@ls/false (apply (lambda (i21e1@library i21e2@spec*) (eq? (ie5e@syntax->datum i21e1@library) 'library)) i21df@ls/false)) (apply (lambda (i21e5@library i21e6@spec*) (i2154@import-library i21e6@spec*)) i21df@ls/false) (let ((i21e9@t i21dd@t)) (let ((i21eb@ls/false (id78@syntax-dispatch i21e9@t '(any any . any)))) (if (and i21eb@ls/false (apply (lambda (i21ed@for i21ee@isp i21ef@rest) (eq? (ie5e@syntax->datum i21ed@for) 'for)) i21eb@ls/false)) (apply (lambda (i21f3@for i21f4@isp i21f5@rest) (i2156@get-import i21f4@isp)) i21eb@ls/false) (let ((i21f9@t i21e9@t)) (let ((i21fb@ls/false (id78@syntax-dispatch i21f9@t 'any))) (if i21fb@ls/false (apply (lambda (i21fd@spec) (ie58@syntax-violation 'import '"invalid import spec" i21fd@spec)) i21fb@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i21f9@t))))))))))))))))))))))))))) (i2158@add-imports! (lambda (i2161@imp i2162@h) (let ((i2165@subst (i2156@get-import i2161@imp))) (for-each (lambda (i2167@x) (let ((i2169@name (car i2167@x)) (i216a@label (cdr i2167@x))) (let ((i216d@t (hashtable-ref i2162@h i2169@name '#f))) (if i216d@t ((lambda (i216f@l) (if (not (eq? i216f@l i216a@label)) (i2146@dup-error i2169@name) (void))) i216d@t) (hashtable-set! i2162@h i2169@name i216a@label))))) i2165@subst))))) (lambda (i2159@imp*) (let i215f@f ((i215b@imp* i2159@imp*) (i215c@h (make-eq-hashtable))) (if (null? i215b@imp*) (hashtable-entries i215c@h) (begin (i2158@add-imports! (car i215b@imp*) i215c@h) (i215f@f (cdr i215b@imp*) i215c@h))))))) (set! i287b@idda@parse-import-spec* idda@parse-import-spec*) (set! iddc@make-top-rib (lambda (i234f@names i2350@labels) (let ((i2353@rib (ib25@make-empty-rib))) (begin (vector-for-each (lambda (i2355@name i2356@label) (begin (if (not (symbol? i2355@name)) (error 'make-top-rib '"BUG: not a symbol" i2355@name) (void)) (ib29@extend-rib/nc! i2353@rib (make-simple-struct 'stx '5 (list i2355@name iaf5@top-mark* '() '())) i2356@label))) i234f@names i2350@labels) i2353@rib)))) (set! i287c@iddc@make-top-rib iddc@make-top-rib) (set! idde@make-collector (lambda () (let ((i2359@ls '())) (lambda i235d (let ((i235e (length i235d))) (if (= i235e '0) (apply (lambda () i2359@ls) i235d) (if (= i235e '1) (apply (lambda (i235b@x) (set! i2359@ls (iaee@set-cons i235b@x i2359@ls))) i235d) (error 'apply '"invalid arg count")))))))) (set! i287d@idde@make-collector idde@make-collector) (set! ide0@inv-collector (i6c1@i59f@make-parameter (lambda i235f@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (i2361@x) (begin (if (not (procedure? i2361@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" i2361@x) (void)) i2361@x)))) (set! i287e@ide0@inv-collector ide0@inv-collector) (set! ide2@vis-collector (i6c1@i59f@make-parameter (lambda i2363@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (i2365@x) (begin (if (not (procedure? i2365@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" i2365@x) (void)) i2365@x)))) (set! i287f@ide2@vis-collector ide2@vis-collector) (set! ide4@imp-collector (i6c1@i59f@make-parameter (lambda i2367@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (i2369@x) (begin (if (not (procedure? i2369@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" i2369@x) (void)) i2369@x)))) (set! i2880@ide4@imp-collector ide4@imp-collector) (set! ide6@chi-library-internal (lambda (i236b@e* i236c@rib i236d@top?) (call-with-values (lambda () (idd0@chi-body* i236b@e* '() '() '() '() '() '() '() i236c@rib i236d@top?)) (lambda (i2381@i2372 i2382@i2374 i2383@i2376 i2384@i2378 i2385@i237a i2386@i237c i2387@i237e i2388@i2380) (let ((i2391@exp* i2388@i2380) (i2392@_kwd* i2387@i237e) (i2393@mod** i2386@i237c) (i2394@rhs* i2385@i237a) (i2395@lex* i2384@i2378) (i2396@mr i2383@i2376) (i2397@r i2382@i2374) (i2398@e* i2381@i2372)) (values (append (apply append (reverse i2393@mod**)) i2398@e*) i2397@r i2396@mr (reverse i2395@lex*) (reverse i2394@rhs*) i2391@exp*)))))) (set! i2881@ide6@chi-library-internal ide6@chi-library-internal) (set! ide8@chi-interaction-expr (lambda (i23a1@e i23a2@rib i23a3@r) (call-with-values (lambda () (idd0@chi-body* (list i23a1@e) i23a3@r i23a3@r '() '() '() '() '() i23a2@rib '#t)) (lambda (i23b7@i23a8 i23b8@i23aa i23b9@i23ac i23ba@i23ae i23bb@i23b0 i23bc@i23b2 i23bd@i23b4 i23be@i23b6) (let ((i23c7@_exp* i23be@i23b6) (i23c8@_kwd* i23bd@i23b4) (i23c9@mod** i23bc@i23b2) (i23ca@rhs* i23bb@i23b0) (i23cb@lex* i23ba@i23ae) (i23cc@mr i23b9@i23ac) (i23cd@r i23b8@i23aa) (i23ce@e* i23b7@i23a8)) (let ((i23d7@e* (ida8@expand-interaction-rhs*/init* (reverse i23cb@lex*) (reverse i23ca@rhs*) (append (apply append (reverse i23c9@mod**)) i23ce@e*) i23cd@r i23cc@mr))) (let ((i23d9@e (if (null? i23d7@e*) (iad7@ia38@build-void) (if (null? (cdr i23d7@e*)) (car i23d7@e*) (iad6@ia36@build-sequence '#f i23d7@e*))))) (values i23d9@e i23cd@r)))))))) (set! i2882@ide8@chi-interaction-expr ide8@chi-interaction-expr) (set! idea@library-body-expander (lambda (i23db@name i23dc@main-exp* i23dd@imp* i23de@b* i23df@top?) (letrec* ((i23e6@itc (idde@make-collector))) (let ((i23ef@i23e8 ide4@imp-collector) (i23f0@i23ea ie68@top-level-context) (i23f1@i23ec i23e6@itc) (i23f2@i23ee '#f)) (let ((i23f7@swap (lambda () (begin (let ((i23f9@t (i23ef@i23e8))) (begin (i23ef@i23e8 i23f1@i23ec) (set! i23f1@i23ec i23f9@t))) (let ((i23fb@t (i23f0@i23ea))) (begin (i23f0@i23ea i23f2@i23ee) (set! i23f2@i23ee i23fb@t))))))) (dynamic-wind i23f7@swap (lambda () (call-with-values (lambda () (idda@parse-import-spec* i23dd@imp*)) (lambda (i2401@i23fe i2402@i2400) (let ((i2405@subst-labels i2402@i2400) (i2406@subst-names i2401@i23fe)) (let ((i2409@rib (iddc@make-top-rib i2406@subst-names i2405@subst-labels))) (letrec* ((i240c@wrap (lambda (i2487@x) (make-simple-struct 'stx '5 (list i2487@x iaf5@top-mark* (list i2409@rib) '()))))) (let ((i240d@b* (map i240c@wrap i23de@b*)) (i240e@main-exp* (map i240c@wrap i23dc@main-exp*)) (i240f@rtc (idde@make-collector)) (i2410@vtc (idde@make-collector))) (let ((i241d@i2416 ide0@inv-collector) (i241e@i2418 ide2@vis-collector) (i241f@i241a i240f@rtc) (i2420@i241c i2410@vtc)) (let ((i2425@swap (lambda () (begin (let ((i2427@t (i241d@i2416))) (begin (i241d@i2416 i241f@i241a) (set! i241f@i241a i2427@t))) (let ((i2429@t (i241e@i2418))) (begin (i241e@i2418 i2420@i241c) (set! i2420@i241c i2429@t))))))) (dynamic-wind i2425@swap (lambda () (call-with-values (lambda () (ide6@chi-library-internal i240d@b* i2409@rib i23df@top?)) (lambda (i2437@i242c i2438@i242e i2439@i2430 i243a@i2432 i243b@i2434 i243c@i2436) (let ((i2443@internal-exp* i243c@i2436) (i2444@rhs* i243b@i2434) (i2445@lex* i243a@i2432) (i2446@mr i2439@i2430) (i2447@r i2438@i242e) (i2448@init* i2437@i242c)) (call-with-values (lambda () (idd4@parse-exports (append i240e@main-exp* i2443@internal-exp*))) (lambda (i2453@i2450 i2454@i2452) (let ((i2457@exp-id* i2454@i2452) (i2458@exp-name* i2453@i2450)) (begin (ib2d@seal-rib! i2409@rib) (let ((i245b@init* (id96@chi-expr* i2448@init* i2447@r i2446@mr))) (let ((i245d@rhs* (idaa@chi-rhs* i2444@rhs* i2447@r i2446@mr))) (begin (ib2f@unseal-rib! i2409@rib) (let ((i245f@loc* (map iafb@gen-global i2445@lex*)) (i2460@export-subst (ie42@make-export-subst i2458@exp-name* i2457@exp-id*))) (letrec* ((i2464@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (ie44@make-export-env/macros i2445@lex* i245f@loc* i2447@r)) (lambda (i246b@i2466 i246c@i2468 i246d@i246a) (let ((i2471@macro* i246d@i246a) (i2472@global* i246c@i2468) (i2473@export-env i246b@i2466)) (begin (for-each (lambda (i2477@s) (let ((i2479@name (car i2477@s)) (i247a@label (cdr i2477@s))) (let ((i247d@p (assq i247a@label i2473@export-env))) (if i247d@p (let ((i247f@b (cdr i247d@p))) (let ((i2481@type (car i247f@b))) (if (eq? i2481@type 'mutable) (ie58@syntax-violation 'export i2464@errstr i2479@name) (void)))) (void))))) i2460@export-subst) (let ((i2483@invoke-body (iadc@ia42@build-library-letrec* '#f i23db@name i2445@lex* i245f@loc* i245d@rhs* (if (null? i245b@init*) (iad7@ia38@build-void) (iad6@ia36@build-sequence '#f i245b@init*)))) (i2484@invoke-definitions (map iad3@i995@build-global-define (map cdr i2472@global*)))) (values (i23e6@itc) (i240f@rtc) (i2410@vtc) (iad6@ia36@build-sequence '#f (append i2484@invoke-definitions (list i2483@invoke-body))) i2471@macro* i2460@export-subst i2473@export-env))))))))))))))))))) i2425@swap)))))))))) i23f7@swap)))))) (set! i2883@idea@library-body-expander idea@library-body-expander) (set! idec@core-library-expander (lambda (i2489@e i248a@verify-name) (call-with-values (lambda () (idd8@parse-library i2489@e)) (lambda (i2495@i248e i2496@i2490 i2497@i2492 i2498@i2494) (let ((i249d@b* i2498@i2494) (i249e@imp* i2497@i2492) (i249f@exp* i2496@i2490) (i24a0@name* i2495@i248e)) (call-with-values (lambda () (idd6@parse-library-name i24a0@name*)) (lambda (i24a9@i24a6 i24aa@i24a8) (let ((i24ad@ver i24aa@i24a8) (i24ae@name i24a9@i24a6)) (begin (i248a@verify-name i24ae@name) (call-with-values (lambda () (idea@library-body-expander i24ae@name i249f@exp* i249e@imp* i249d@b* '#f)) (lambda (i24bf@i24b2 i24c0@i24b4 i24c1@i24b6 i24c2@i24b8 i24c3@i24ba i24c4@i24bc i24c5@i24be) (let ((i24cd@export-env i24c5@i24be) (i24ce@export-subst i24c4@i24bc) (i24cf@visit-code i24c3@i24ba) (i24d0@invoke-code i24c2@i24b8) (i24d1@visit-req* i24c1@i24b6) (i24d2@invoke-req* i24c0@i24b4) (i24d3@imp* i24bf@i24b2)) (values i24ae@name i24ad@ver i24d3@imp* i24d2@invoke-req* i24d1@visit-req* i24d0@invoke-code i24cf@visit-code i24ce@export-subst i24cd@export-env))))))))))))) (set! i2884@idec@core-library-expander idec@core-library-expander) (set! idee@parse-top-level-program (lambda (i24db@e*) (let ((i24dd@t i24db@e*)) (let ((i24df@ls/false (id78@syntax-dispatch i24dd@t '((any . each-any) . each-any)))) (if (and i24df@ls/false (apply (lambda (i24e1@import i24e2@imp* i24e3@b*) (eq? (ie5e@syntax->datum i24e1@import) 'import)) i24df@ls/false)) (apply (lambda (i24e7@import i24e8@imp* i24e9@b*) (values i24e8@imp* i24e9@b*)) i24df@ls/false) (let ((i24ed@t i24dd@t)) (let ((i24ef@ls/false (id78@syntax-dispatch i24ed@t '((any . any) . any)))) (if (and i24ef@ls/false (apply (lambda (i24f1@import i24f2@x i24f3@y) (eq? (ie5e@syntax->datum i24f1@import) 'import)) i24ef@ls/false)) (apply (lambda (i24f7@import i24f8@x i24f9@y) (ie58@syntax-violation 'expander '"invalid syntax of top-level program" (ib6b@syntax-car i24db@e*))) i24ef@ls/false) (let ((i24fd@t i24ed@t)) (let ((i24ff@ls/false (id78@syntax-dispatch i24fd@t '_))) (if i24ff@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) i24ff@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i24fd@t)))))))))))) (set! i2885@idee@parse-top-level-program idee@parse-top-level-program) (set! idf0@top-level-expander (lambda (i2501@e*) (call-with-values (lambda () (idee@parse-top-level-program i2501@e*)) (lambda (i2507@i2504 i2508@i2506) (let ((i250b@b* i2508@i2506) (i250c@imp* i2507@i2504)) (call-with-values (lambda () (idea@library-body-expander '() '() i250c@imp* i250b@b* '#t)) (lambda (i251d@i2510 i251e@i2512 i251f@i2514 i2520@i2516 i2521@i2518 i2522@i251a i2523@i251c) (let ((i252b@export-env i2523@i251c) (i252c@export-subst i2522@i251a) (i252d@visit-code i2521@i2518) (i252e@invoke-code i2520@i2516) (i252f@visit-req* i251f@i2514) (i2530@invoke-req* i251e@i2512) (i2531@imp* i251d@i2510)) (values i2530@invoke-req* i252e@invoke-code))))))))) (set! i2886@idf0@top-level-expander idf0@top-level-expander) (set! idf2@rp (i6be@i599@make-record-printer 'env (lambda (i2539@x i253a@p i253b@wr) (display '"#<environment>" i253a@p)))) (set! i2887@idf2@rp idf2@rp) (set! idfc@env? (lambda (i253f@x) (and (simple-struct? i253f@x) (eq? (simple-struct-name i253f@x) 'env)))) (set! i2888@idfc@env? idfc@env?) (set! idfe@env-names (lambda (i2541@x) (simple-struct-ref i2541@x '0))) (set! i2889@idfe@env-names idfe@env-names) (set! ie00@set-env-names! (lambda (i2543@x i2544@val) (simple-struct-set! i2543@x '0 i2544@val))) (set! i288a@ie00@set-env-names! ie00@set-env-names!) (set! ie02@env-labels (lambda (i2547@x) (simple-struct-ref i2547@x '1))) (set! i288b@ie02@env-labels ie02@env-labels) (set! ie04@set-env-labels! (lambda (i2549@x i254a@val) (simple-struct-set! i2549@x '1 i254a@val))) (set! i288c@ie04@set-env-labels! ie04@set-env-labels!) (set! ie06@env-itc (lambda (i254d@x) (simple-struct-ref i254d@x '2))) (set! i288d@ie06@env-itc ie06@env-itc) (set! ie08@set-env-itc! (lambda (i254f@x i2550@val) (simple-struct-set! i254f@x '2 i2550@val))) (set! i288e@ie08@set-env-itc! ie08@set-env-itc!) (set! ie0a@dummy '3) (set! i288f@ie0a@dummy ie0a@dummy) (set! ie0c@rp (i6be@i599@make-record-printer 'interaction-env (lambda (i2553@x i2554@p i2555@wr) (display '"#<environment>" i2554@p)))) (set! i2890@ie0c@rp ie0c@rp) (set! ie16@interaction-env? (lambda (i2559@x) (and (simple-struct? i2559@x) (eq? (simple-struct-name i2559@x) 'interaction-env)))) (set! i2891@ie16@interaction-env? ie16@interaction-env?) (set! ie18@interaction-env-rib (lambda (i255b@x) (simple-struct-ref i255b@x '0))) (set! i2892@ie18@interaction-env-rib ie18@interaction-env-rib) (set! ie1a@set-interaction-env-rib! (lambda (i255d@x i255e@val) (simple-struct-set! i255d@x '0 i255e@val))) (set! i2893@ie1a@set-interaction-env-rib! ie1a@set-interaction-env-rib!) (set! ie1c@interaction-env-r (lambda (i2561@x) (simple-struct-ref i2561@x '1))) (set! i2894@ie1c@interaction-env-r ie1c@interaction-env-r) (set! ie1e@set-interaction-env-r! (lambda (i2563@x i2564@val) (simple-struct-set! i2563@x '1 i2564@val))) (set! i2895@ie1e@set-interaction-env-r! ie1e@set-interaction-env-r!) (set! ie20@interaction-env-locs (lambda (i2567@x) (simple-struct-ref i2567@x '2))) (set! i2896@ie20@interaction-env-locs ie20@interaction-env-locs) (set! ie22@set-interaction-env-locs! (lambda (i2569@x i256a@val) (simple-struct-set! i2569@x '2 i256a@val))) (set! i2897@ie22@set-interaction-env-locs! ie22@set-interaction-env-locs!) (set! ie24@dummy '3) (set! i2898@ie24@dummy ie24@dummy) (set! ie26@interaction-environment-symbols (lambda () (ie2e@environment-symbols (ie66@interaction-environment)))) (set! i2899@ie26@interaction-environment-symbols ie26@interaction-environment-symbols) (set! ie28@environment-bindings (lambda (i256d@e) (vector->list (vector-map (lambda (i256f@name i2570@label) (ie2a@parse-binding (cons i256f@name (i98c@i7d9@imported-label->binding i2570@label)))) (idfe@env-names i256d@e) (ie02@env-labels i256d@e))))) (set! i289a@ie28@environment-bindings ie28@environment-bindings) (set! ie2a@parse-binding (lambda (i2573@b) (cons (car i2573@b) (let ((i2575@t (cadr i2573@b))) (if (memv i2575@t '(core-prim global)) 'procedure (if (memv i2575@t '(core-macro macro global-macro)) 'syntax (if (memv i2575@t '($core-rtd)) 'record (if (eq? (car i2573@b) (cadr i2573@b)) 'syntax 'unknown)))))))) (set! i289b@ie2a@parse-binding ie2a@parse-binding) (set! ie2c@environment? (lambda (i2577@x) (or (idfc@env? i2577@x) (ie16@interaction-env? i2577@x)))) (set! i289c@ie2c@environment? ie2c@environment?) (set! ie2e@environment-symbols (lambda (i2579@x) (if (idfc@env? i2579@x) (vector->list (idfe@env-names i2579@x)) (if (ie16@interaction-env? i2579@x) (map values (ib0f@rib-sym* (ie18@interaction-env-rib i2579@x))) (assertion-violation 'environment-symbols '"not an environment" i2579@x))))) (set! i289d@ie2e@environment-symbols ie2e@environment-symbols) (set! ie30@environment (lambda i257b@imp* (let ((i257d@itc (idde@make-collector))) (let ((i2583@i2580 ide4@imp-collector) (i2584@i2582 i257d@itc)) (let ((i2587@swap (lambda () (let ((i2589@t (i2583@i2580))) (begin (i2583@i2580 i2584@i2582) (set! i2584@i2582 i2589@t)))))) (dynamic-wind i2587@swap (lambda () (call-with-values (lambda () (idda@parse-import-spec* i257b@imp*)) (lambda (i258f@i258c i2590@i258e) (let ((i2593@subst-labels i2590@i258e) (i2594@subst-names i258f@i258c)) (make-simple-struct 'env '4 (list i2594@subst-names i2593@subst-labels i257d@itc)))))) i2587@swap)))))) (set! i289e@ie30@environment ie30@environment) (set! ie32@null-environment (lambda (i2597@n) (begin (if (not (eqv? i2597@n '5)) (assertion-violation 'null-environment '"not 5" i2597@n) (void)) (ie30@environment '(psyntax null-environment-5))))) (set! i289f@ie32@null-environment ie32@null-environment) (set! ie34@scheme-report-environment (lambda (i2599@n) (begin (if (not (eqv? i2599@n '5)) (assertion-violation 'scheme-report-environment '"not 5" i2599@n) (void)) (ie30@environment '(psyntax scheme-report-environment-5))))) (set! i28a0@ie34@scheme-report-environment ie34@scheme-report-environment) (set! ie36@expand (lambda (i259b@x i259c@env) (if (idfc@env? i259c@env) (let ((i259f@rib (iddc@make-top-rib (idfe@env-names i259c@env) (ie02@env-labels i259c@env)))) (let ((i25a1@x (make-simple-struct 'stx '5 (list i259b@x iaf5@top-mark* (list i259f@rib) '()))) (i25a2@itc (ie06@env-itc i259c@env)) (i25a3@rtc (idde@make-collector)) (i25a4@vtc (idde@make-collector))) (let ((i25a9@x (let ((i25bb@i25ac ie68@top-level-context) (i25bc@i25ae ide0@inv-collector) (i25bd@i25b0 ide2@vis-collector) (i25be@i25b2 ide4@imp-collector) (i25bf@i25b4 '#f) (i25c0@i25b6 i25a3@rtc) (i25c1@i25b8 i25a4@vtc) (i25c2@i25ba i25a2@itc)) (let ((i25cb@swap (lambda () (begin (let ((i25cd@t (i25bb@i25ac))) (begin (i25bb@i25ac i25bf@i25b4) (set! i25bf@i25b4 i25cd@t))) (let ((i25cf@t (i25bc@i25ae))) (begin (i25bc@i25ae i25c0@i25b6) (set! i25c0@i25b6 i25cf@t))) (let ((i25d1@t (i25bd@i25b0))) (begin (i25bd@i25b0 i25c1@i25b8) (set! i25c1@i25b8 i25d1@t))) (let ((i25d3@t (i25be@i25b2))) (begin (i25be@i25b2 i25c2@i25ba) (set! i25c2@i25ba i25d3@t))))))) (dynamic-wind i25cb@swap (lambda () (id9a@chi-expr i25a1@x '() '())) i25cb@swap))))) (begin (ib2d@seal-rib! i259f@rib) (values i25a9@x (i25a3@rtc)))))) (if (ie16@interaction-env? i259c@env) (let ((i25d5@rib (ie18@interaction-env-rib i259c@env)) (i25d6@r (ie1c@interaction-env-r i259c@env)) (i25d7@rtc (idde@make-collector))) (let ((i25db@x (make-simple-struct 'stx '5 (list i259b@x iaf5@top-mark* (list i25d5@rib) '())))) (call-with-values (lambda () (let ((i25f1@i25e2 ie68@top-level-context) (i25f2@i25e4 ide0@inv-collector) (i25f3@i25e6 ide2@vis-collector) (i25f4@i25e8 ide4@imp-collector) (i25f5@i25ea i259c@env) (i25f6@i25ec i25d7@rtc) (i25f7@i25ee (idde@make-collector)) (i25f8@i25f0 (idde@make-collector))) (let ((i2601@swap (lambda () (begin (let ((i2603@t (i25f1@i25e2))) (begin (i25f1@i25e2 i25f5@i25ea) (set! i25f5@i25ea i2603@t))) (let ((i2605@t (i25f2@i25e4))) (begin (i25f2@i25e4 i25f6@i25ec) (set! i25f6@i25ec i2605@t))) (let ((i2607@t (i25f3@i25e6))) (begin (i25f3@i25e6 i25f7@i25ee) (set! i25f7@i25ee i2607@t))) (let ((i2609@t (i25f4@i25e8))) (begin (i25f4@i25e8 i25f8@i25f0) (set! i25f8@i25f0 i2609@t))))))) (dynamic-wind i2601@swap (lambda () (ide8@chi-interaction-expr i25db@x i25d5@rib i25d6@r)) i2601@swap)))) (lambda (i260b@i25de i260c@i25e0) (let ((i260f@r^ i260c@i25e0) (i2610@e i260b@i25de)) (begin (ie1e@set-interaction-env-r! i259c@env i260f@r^) (values i2610@e (i25d7@rtc)))))))) (assertion-violation 'expand '"not an environment" i259c@env))))) (set! i28a1@ie36@expand ie36@expand) (set! ie38@eval (lambda (i2613@x i2614@env) (begin (if (not (ie2c@environment? i2614@env)) (error 'eval '"not an environment" i2614@env) (void)) (call-with-values (lambda () (ie36@expand i2613@x i2614@env)) (lambda (i261b@i2618 i261c@i261a) (let ((i261f@invoke-req* i261c@i261a) (i2620@x i261b@i2618)) (begin (for-each i98d@i7db@invoke-library i261f@invoke-req*) (eval-core (i717@i6cf@expanded->core i2620@x))))))))) (set! i28a2@ie38@eval ie38@eval) (set! ie3a@library-expander (lambda i2691 (let ((i2692 (length i2691))) (if (= i2692 '3) (apply (lambda (i2623@x i2624@filename i2625@verify-name) (letrec* ((i262a@build-visit-code (lambda (i267f@macro*) (if (null? i267f@macro*) (iad7@ia38@build-void) (iad6@ia36@build-sequence '#f (map (lambda (i2681@x) (let ((i2683@loc (car i2681@x)) (i2684@src (cddr i2681@x))) (list 'set! i2683@loc i2684@src))) i267f@macro*))))) (i262c@visit! (lambda (i2677@macro*) (for-each (lambda (i2679@x) (let ((i267b@loc (car i2679@x)) (i267c@proc (cadr i2679@x))) (set-symbol-value! i267b@loc i267c@proc))) i2677@macro*)))) (call-with-values (lambda () (idec@core-library-expander i2623@x i2625@verify-name)) (lambda (i263f@i262e i2640@i2630 i2641@i2632 i2642@i2634 i2643@i2636 i2644@i2638 i2645@i263a i2646@i263c i2647@i263e) (let ((i2651@export-env i2647@i263e) (i2652@export-subst i2646@i263c) (i2653@macro* i2645@i263a) (i2654@invoke-code i2644@i2638) (i2655@vis* i2643@i2636) (i2656@inv* i2642@i2634) (i2657@imp* i2641@i2632) (i2658@ver i2640@i2630) (i2659@name i263f@i262e)) (let ((i2663@id (gensym)) (i2664@name i2659@name) (i2665@ver i2658@ver) (i2666@imp* (map i991@i7e3@library-spec i2657@imp*)) (i2667@vis* (map i991@i7e3@library-spec i2655@vis*)) (i2668@inv* (map i991@i7e3@library-spec i2656@inv*)) (i2669@visit-proc (lambda () (i262c@visit! i2653@macro*))) (i266a@invoke-proc (lambda () (eval-core (i717@i6cf@expanded->core i2654@invoke-code)))) (i266b@visit-code (i262a@build-visit-code i2653@macro*)) (i266c@invoke-code i2654@invoke-code)) (begin (i98b@i7d7@install-library i2663@id i2664@name i2665@ver i2666@imp* i2667@vis* i2668@inv* i2652@export-subst i2651@export-env i2669@visit-proc i266a@invoke-proc i266b@visit-code i266c@invoke-code '#t i2624@filename) (values i2663@id i2664@name i2665@ver i2666@imp* i2667@vis* i2668@inv* i266c@invoke-code i266b@visit-code i2652@export-subst i2651@export-env)))))))) i2691) (if (= i2692 '2) (apply (lambda (i2687@x i2688@filename) (ie3a@library-expander i2687@x i2688@filename (lambda (i268b@x) (values)))) i2691) (if (= i2692 '1) (apply (lambda (i268d@x) (ie3a@library-expander i268d@x '#f (lambda (i268f@x) (values)))) i2691) (error 'apply '"invalid arg count"))))))) (set! i28a3@ie3a@library-expander ie3a@library-expander) (set! ie3c@boot-library-expand (lambda (i2693@x) (call-with-values (lambda () (ie3a@library-expander i2693@x)) (lambda (i26a9@i2696 i26aa@i2698 i26ab@i269a i26ac@i269c i26ad@i269e i26ae@i26a0 i26af@i26a2 i26b0@i26a4 i26b1@i26a6 i26b2@i26a8) (let ((i26bd@export-env i26b2@i26a8) (i26be@export-subst i26b1@i26a6) (i26bf@visit-code i26b0@i26a4) (i26c0@invoke-code i26af@i26a2) (i26c1@inv* i26ae@i26a0) (i26c2@vis* i26ad@i269e) (i26c3@imp* i26ac@i269c) (i26c4@ver i26ab@i269a) (i26c5@name i26aa@i2698) (i26c6@id i26a9@i2696)) (values i26c5@name i26c0@invoke-code i26be@export-subst i26bd@export-env)))))) (set! i28a4@ie3c@boot-library-expand ie3c@boot-library-expand) (set! ie3e@rev-map-append (lambda (i26d1@f i26d2@ls i26d3@ac) (if (null? i26d2@ls) i26d3@ac (ie3e@rev-map-append i26d1@f (cdr i26d2@ls) (cons (i26d1@f (car i26d2@ls)) i26d3@ac))))) (set! i28a5@ie3e@rev-map-append ie3e@rev-map-append) (set! ie40@build-exports (lambda (i26d7@lex*+loc* i26d8@init*) (iad6@ia36@build-sequence '#f (cons (iad7@ia38@build-void) (ie3e@rev-map-append (lambda (i26db@x) (list 'set! (cdr i26db@x) (car i26db@x))) i26d7@lex*+loc* i26d8@init*))))) (set! i28a6@ie40@build-exports ie40@build-exports) (set! ie42@make-export-subst (lambda (i26dd@name* i26de@id*) (map (lambda (i26e1@name i26e2@id) (let ((i26e5@label (ib87@id->label i26e2@id))) (begin (if (not i26e5@label) (ie58@syntax-violation '#f '"cannot export unbound identifier" i26e2@id) (void)) (cons i26e1@name i26e5@label)))) i26dd@name* i26de@id*))) (set! i28a7@ie42@make-export-subst ie42@make-export-subst) (set! ie44@make-export-env/macros (lambda (i26e7@lex* i26e8@loc* i26e9@r) (letrec* ((i26ee@lookup (lambda (i270b@x) (let i2713@f ((i270d@x i270b@x) (i270e@lex* i26e7@lex*) (i270f@loc* i26e8@loc*)) (if (pair? i270e@lex*) (if (eq? i270d@x (car i270e@lex*)) (car i270f@loc*) (i2713@f i270d@x (cdr i270e@lex*) (cdr i270f@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let i26f7@f ((i26ef@r i26e9@r) (i26f0@env '()) (i26f1@global* '()) (i26f2@macro* '())) (if (null? i26ef@r) (values i26f0@env i26f1@global* i26f2@macro*) (let ((i26f9@x (car i26ef@r))) (let ((i26fb@label (car i26f9@x)) (i26fc@b (cdr i26f9@x))) (let ((i26ff@t (ib8d@binding-type i26fc@b))) (if (memv i26ff@t '(lexical)) (let ((i2701@v (ib8f@binding-value i26fc@b))) (let ((i2703@loc (i26ee@lookup (id02@lexical-var i2701@v))) (i2704@type (if (id04@lexical-mutable? i2701@v) 'mutable 'global))) (i26f7@f (cdr i26ef@r) (cons (cons* i26fb@label i2704@type i2703@loc) i26f0@env) (cons (cons (id02@lexical-var i2701@v) i2703@loc) i26f1@global*) i26f2@macro*))) (if (memv i26ff@t '(local-macro)) (let ((i2707@loc (gensym))) (i26f7@f (cdr i26ef@r) (cons (cons* i26fb@label 'global-macro i2707@loc) i26f0@env) i26f1@global* (cons (cons i2707@loc (ib8f@binding-value i26fc@b)) i26f2@macro*))) (if (memv i26ff@t '(local-macro!)) (let ((i2709@loc (gensym))) (i26f7@f (cdr i26ef@r) (cons (cons* i26fb@label 'global-macro! i2709@loc) i26f0@env) i26f1@global* (cons (cons i2709@loc (ib8f@binding-value i26fc@b)) i26f2@macro*))) (if (memv i26ff@t '($rtd $module)) (i26f7@f (cdr i26ef@r) (cons i26f9@x i26f0@env) i26f1@global* i26f2@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (ib8d@binding-type i26fc@b) (ib8f@binding-value i26fc@b)))))))))))))) (set! i28a8@ie44@make-export-env/macros ie44@make-export-env/macros) (set! ie46@generate-temporaries (lambda (i2715@ls) (let ((i2717@t i2715@ls)) (let ((i2719@ls/false (id78@syntax-dispatch i2717@t 'each-any))) (if i2719@ls/false (apply (lambda (i271b@ls) (map (lambda (i271d@x) (make-simple-struct 'stx '5 (list (let ((i271f@x (ie5e@syntax->datum i271d@x))) (if (or (symbol? i271f@x) (string? i271f@x)) (gensym i271f@x) (gensym 't))) iaf5@top-mark* '() '()))) i271b@ls)) i2719@ls/false) (let ((i2721@t i2717@t)) (let ((i2723@ls/false (id78@syntax-dispatch i2721@t '_))) (if i2723@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) i2723@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i2721@t))))))))) (set! i28a9@ie46@generate-temporaries ie46@generate-temporaries) (set! ie48@free-identifier=? (lambda (i2725@x i2726@y) (if (ib71@id? i2725@x) (if (ib71@id? i2726@y) (ib77@free-id=? i2725@x i2726@y) (assertion-violation 'free-identifier=? '"not an identifier" i2726@y)) (assertion-violation 'free-identifier=? '"not an identifier" i2725@x)))) (set! i28aa@ie48@free-identifier=? ie48@free-identifier=?) (set! ie4a@bound-identifier=? (lambda (i2729@x i272a@y) (if (ib71@id? i2729@x) (if (ib71@id? i272a@y) (ib75@bound-id=? i2729@x i272a@y) (assertion-violation 'bound-identifier=? '"not an identifier" i272a@y)) (assertion-violation 'bound-identifier=? '"not an identifier" i2729@x)))) (set! i28ab@ie4a@bound-identifier=? ie4a@bound-identifier=?) (set! ie4c@make-source-condition (lambda (i272d@x) (letrec* ((i2737@i2732 (make-record-type-descriptor '&source-information &condition-rtd 'i2735 '#f '#f '#((immutable file-name) (immutable line)))) (i2739@i2734 '#f) (i273b@i2733 (make-record-constructor-descriptor i2737@i2732 &condition-rcd i2739@i2734)) (i273e@i2731 (record-predicate i2737@i2732)) (i2740@make-source-condition (record-constructor i273b@i2733)) (i2742@i272f (record-accessor i2737@i2732 '0)) (i2744@i2730 (record-accessor i2737@i2732 '1)) (i2746@source-condition? (condition-predicate i2737@i2732)) (i2748@source-filename (condition-accessor i2737@i2732 i2742@i272f)) (i274a@source-character (condition-accessor i2737@i2732 i2744@i2730))) (if (and (pair? i272d@x) (pair? (cdr i272d@x))) (i2740@make-source-condition (car i272d@x) (cadr i272d@x)) (condition))))) (set! i28ac@ie4c@make-source-condition ie4c@make-source-condition) (set! ie4e@extract-position-condition (lambda (i274b@x) (ie4c@make-source-condition (ie50@expression-position i274b@x)))) (set! i28ad@ie4e@extract-position-condition ie4e@extract-position-condition) (set! ie50@expression-position (lambda (i274d@x) (and (ib3d@stx? i274d@x) (let ((i274f@x (ib3f@stx-expr i274d@x))) (and (i6b5@i587@annotation? i274f@x) (i6b6@i589@annotation-source i274f@x)))))) (set! i28ae@ie50@expression-position ie50@expression-position) (set! ie52@assertion-error (lambda (i2751@expr i2752@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list i2751@expr)) (ie4c@make-source-condition i2752@pos))))) (set! i28af@ie52@assertion-error ie52@assertion-error) (set! ie54@syntax-error (lambda (i2755@x . i2757@args) (begin (if (not (for-all string? i2757@args)) (assertion-violation 'syntax-error '"invalid argument" i2757@args) (void)) (raise (condition (make-message-condition (if (null? i2757@args) '"invalid syntax" (apply string-append i2757@args))) (make-syntax-violation (ie5e@syntax->datum i2755@x) '#f) (ie4e@extract-position-condition i2755@x)))))) (set! i28b0@ie54@syntax-error ie54@syntax-error) (set! ie56@syntax-violation* (lambda (i2759@who i275a@msg i275b@form i275c@condition-object) (begin (if (not (string? i275a@msg)) (assertion-violation 'syntax-violation '"message is not a string" i275a@msg) (void)) (let ((i2761@who (if (or (string? i2759@who) (symbol? i2759@who)) i2759@who (if (not i2759@who) (let ((i2763@t i275b@form)) (let ((i2765@ls/false (id78@syntax-dispatch i2763@t 'any))) (if (and i2765@ls/false (apply (lambda (i2767@id) (ib71@id? i2767@id)) i2765@ls/false)) (apply (lambda (i2769@id) (ie5e@syntax->datum i2769@id)) i2765@ls/false) (let ((i276b@t i2763@t)) (let ((i276d@ls/false (id78@syntax-dispatch i276b@t '(any . any)))) (if (and i276d@ls/false (apply (lambda (i276f@id i2770@rest) (ib71@id? i276f@id)) i276d@ls/false)) (apply (lambda (i2773@id i2774@rest) (ie5e@syntax->datum i2773@id)) i276d@ls/false) (let ((i2777@t i276b@t)) (let ((i2779@ls/false (id78@syntax-dispatch i2777@t '_))) (if i2779@ls/false (apply (lambda () '#f) i2779@ls/false) (ie58@syntax-violation '#f '"invalid syntax" i2777@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" i2759@who))))) (raise (condition (if i2761@who (make-who-condition i2761@who) (condition)) (make-message-condition i275a@msg) i275c@condition-object (ie4e@extract-position-condition i275b@form))))))) (set! i28b1@ie56@syntax-violation* ie56@syntax-violation*) (set! ie58@syntax-violation (lambda i2789 (let ((i278a (length i2789))) (if (= i278a '3) (apply (lambda (i277b@who i277c@msg i277d@form) (ie58@syntax-violation i277b@who i277c@msg i277d@form '#f)) i2789) (if (= i278a '4) (apply (lambda (i2781@who i2782@msg i2783@form i2784@subform) (ie56@syntax-violation* i2781@who i2782@msg i2783@form (make-syntax-violation (ie5e@syntax->datum i2783@form) (ie5e@syntax->datum i2784@subform)))) i2789) (error 'apply '"invalid arg count")))))) (set! i28b2@ie58@syntax-violation ie58@syntax-violation) (set! ie5a@identifier? (lambda (i278b@x) (ib71@id? i278b@x))) (set! i28b3@ie5a@identifier? ie5a@identifier?) (set! ie5c@datum->syntax (lambda (i278d@id i278e@datum) (if (ib71@id? i278d@id) (ib51@datum->stx i278d@id i278e@datum) (assertion-violation 'datum->syntax '"not an identifier" i278d@id)))) (set! i28b4@ie5c@datum->syntax ie5c@datum->syntax) (set! ie5e@syntax->datum (lambda (i2791@x) (ib85@stx->datum i2791@x))) (set! i28b5@ie5e@syntax->datum ie5e@syntax->datum) (set! ie60@ungensym-all (lambda (i2793@code) (if (pair? i2793@code) (cons (ie60@ungensym-all (car i2793@code)) (ie60@ungensym-all (cdr i2793@code))) (if (symbol? i2793@code) (ungensym i2793@code) i2793@code)))) (set! i28b6@ie60@ungensym-all ie60@ungensym-all) (set! ie62@compile-r6rs-top-level (lambda (i2795@x*) (call-with-values (lambda () (idf0@top-level-expander i2795@x*)) (lambda (i279b@i2798 i279c@i279a) (let ((i279f@invoke-code i279c@i279a) (i27a0@lib* i279b@i2798)) (lambda () (begin (for-each i98d@i7db@invoke-library i27a0@lib*) (let ((i27a3@expanded (i717@i6cf@expanded->core i279f@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (ie60@ungensym-all i27a3@expanded)) (void)) (eval-core i27a3@expanded)))))))))) (set! i28b7@ie62@compile-r6rs-top-level ie62@compile-r6rs-top-level) (set! ie64@pre-compile-r6rs-top-level (lambda (i27a5@x*) (call-with-values (lambda () (idf0@top-level-expander i27a5@x*)) (lambda (i27ab@i27a8 i27ac@i27aa) (let ((i27af@invoke-code i27ac@i27aa) (i27b0@lib* i27ab@i27a8)) (begin (for-each i98d@i7db@invoke-library i27b0@lib*) (i6bf@i59b@compile-core (i717@i6cf@expanded->core i27af@invoke-code)))))))) (set! i28b8@ie64@pre-compile-r6rs-top-level ie64@pre-compile-r6rs-top-level) (set! ie66@interaction-environment (let ((i27b3@the-env '#f)) (lambda () (or i27b3@the-env (let ((i27b5@lib (i986@i7cd@find-library-by-name '(mosh interaction))) (i27b6@rib (ib25@make-empty-rib))) (begin (let ((i27b9@subst (i968@i791@library-subst i27b5@lib))) (begin (ib11@set-rib-sym*! i27b6@rib (map car i27b9@subst)) (ib15@set-rib-mark**! i27b6@rib (map (lambda (i27bb@x) iaf5@top-mark*) i27b9@subst)) (ib19@set-rib-label*! i27b6@rib (map cdr i27b9@subst)))) (let ((i27bd@env (make-simple-struct 'interaction-env '4 (list i27b6@rib '() '())))) (begin (set! i27b3@the-env i27bd@env) i27bd@env)))))))) (set! i28b9@ie66@interaction-environment ie66@interaction-environment) (set! ie68@top-level-context (i6c1@i59f@make-parameter '#f)) (set! i28ba@ie68@top-level-context ie68@top-level-context) (i983@i7c7@current-library-expander ie3a@library-expander))
(begin (begin (i714@i6c9@current-primitive-locations (lambda (i2e05@x) (let ((i2e07@t (assq i2e05@x '((syntax-error . i28b0@ie54@syntax-error) (syntax-dispatch . i284e@id78@syntax-dispatch) (load . i2a36@i28e1@load) (interaction-environment . i28b9@ie66@interaction-environment) (library-path . i97b@i7b7@library-path) (mosh-cache-dir . i6c2@i5a1@mosh-cache-dir) (make-parameter . i6c1@i59f@make-parameter) (make-variable-transformer . i280b@iba3@make-variable-transformer) (identifier? . i28b3@ie5a@identifier?) (generate-temporaries . i28a9@ie46@generate-temporaries) (free-identifier=? . i28aa@ie48@free-identifier=?) (syntax->datum . i28b5@ie5e@syntax->datum) (datum->syntax . i28b4@ie5c@datum->syntax) (bound-identifier=? . i28ab@ie4a@bound-identifier=?) (scheme-report-environment . i28a0@ie34@scheme-report-environment) (null-environment . i289f@ie32@null-environment) (command-line . i2a33@i28db@command-line) (eval . i28a2@ie38@eval) (environment . i289e@ie30@environment) (syntax-violation . i28b2@ie58@syntax-violation) (assertion-error . i28af@ie52@assertion-error))))) (if i2e07@t (cdr i2e07@t) '#f)))) (i98b@i7d7@install-library 'i2de2 '(mosh interaction) '() '() '() '() '((regexp? . i2da2) (alist->eq-hash-table . i2d9e) (format . i2d9b) (string-split . i2d90) (call-process . i2d8a) (set-current-directory! . i2d86) (expand-path . i2d85) (current-directory . i2d84) (%spawn . i2d83) (%waitpid . i2d82) (simple-struct-name . i2d81) (simple-struct-set! . i2d80) (simple-struct-ref . i2d7f) (make-simple-struct . i2d7e) (simple-struct? . i2d7d) (pointer-ref-c-int64 . i2d7c) (pointer-ref-c-int32 . i2d7b) (pointer-ref-c-int16 . i2d7a) (pointer-ref-c-int8 . i2d79) (pointer-ref-c-uint64 . i2d78) (pointer-ref-c-uint32 . i2d77) (pointer-ref-c-uint16 . i2d76) (pointer-ref-c-uint8 . i2d75) (pointer-set-c-uint64! . i2d74) (pointer-set-c-uint32! . i2d73) (pointer-set-c-uint16! . i2d72) (pointer-set-c-uint8! . i2d71) (pointer-set-c-int64! . i2d70) (pointer-set-c-int32! . i2d6f) (pointer-set-c-int16! . i2d6e) (pointer-set-c-int8! . i2d6d) (pointer-set-c-pointer! . i2d6c) (pointer-set-c-double! . i2d6b) (pointer-set-c-float! . i2d6a) (pointer-set-c-long-long! . i2d69) (pointer-set-c-long! . i2d68) (pointer-set-c-int! . i2d67) (pointer-set-c-short! . i2d66) (pointer-set-c-char! . i2d65) (pointer-ref-c-pointer . i2d64) (pointer-ref-c-double . i2d63) (pointer-ref-c-float . i2d62) (pointer-ref-c-unsigned-long-long . i2d61) (pointer-ref-c-signed-long-long . i2d60) (pointer-ref-c-unsigned-long . i2d5f) (pointer-ref-c-signed-long . i2d5e) (pointer-ref-c-unsigned-int . i2d5d) (pointer-ref-c-signed-int . i2d5c) (pointer-ref-c-unsigned-short . i2d5b) (pointer-ref-c-signed-short . i2d5a) (pointer-ref-c-unsigned-char . i2d59) (pointer-ref-c-signed-char . i2d58) (pointer->integer . i2d57) (integer->pointer . i2d56) (pointer? . i2d55) (shared-errno . i2d54) (%ffi-supported? . i2d4f) (%ffi-pointer->string . i2d4e) (%ffi-call . i2d4d) (%ffi-lookup . i2d4c) (%ffi-open . i2d4b) (null-terminated-utf8->string . i2d4a) (null-terminated-bytevector->string . i2d49) (%exec . i2d48) (%fork . i2d47) (%pipe . i2d46) (p . i2d45) (whereis . i2d29) (register . i2d28) (vm-join! . i2d27) (vm-set-value! . i2d26) (vm? . i2d25) (main-vm? . i2d24) (vm-eval . i2d23) (vm-self . i2d22) (vm-start! . i2d21) (make-vm . i2d20) (mutex-try-lock! . i2d1f) (mutex-unlock! . i2d1e) (mutex-lock! . i2d1d) (mutex? . i2d1c) (make-mutex . i2d1b) (condition-variable-notify-all! . i2d1a) (condition-variable-notify! . i2d19) (condition-variable-wait! . i2d18) (make-condition-variable . i2d17) (write/ss . i2d16) (string-upcase . i2cfe) (string-titlecase . i2cfd) (string-normalize-nfkd . i2cfc) (string-normalize-nfkc . i2cfb) (string-normalize-nfd . i2cfa) (string-normalize-nfc . i2cf9) (string-foldcase . i2cf8) (string-downcase . i2cf7) (string-ci>? . i2cf6) (string-ci>=? . i2cf5) (string-ci=? . i2cf4) (string-ci<? . i2cf3) (string-ci<=? . i2cf2) (char-whitespace? . i2cf1) (char-upper-case? . i2cf0) (char-title-case? . i2cef) (char-numeric? . i2cee) (char-lower-case? . i2ced) (char-general-category . i2cec) (char-upcase . i2ceb) (char-titlecase . i2cea) (char-foldcase . i2ce9) (char-downcase . i2ce8) (char-ci>? . i2ce7) (char-ci>=? . i2ce6) (char-ci=? . i2ce5) (char-ci<? . i2ce4) (char-ci<=? . i2ce3) (char-alphabetic? . i2ce2) (make-variable-transformer . iba2) (identifier? . ie59) (generate-temporaries . ie45) (free-identifier=? . ie47) (syntax->datum . ie5d) (datum->syntax . ie5b) (bound-identifier=? . ie49) (record-type-descriptor? . i2ce1) (record-predicate . i2ce0) (record-mutator . i2cdf) (record-constructor . i2cde) (record-accessor . i2cdd) (make-record-type-descriptor . i2cdc) (make-record-constructor-descriptor . i2cdb) (record? . i2cda) (record-type-uid . i2cd9) (record-type-sealed? . i2cd8) (record-type-parent . i2cd7) (record-type-opaque? . i2cd6) (record-type-name . i2cd5) (record-type-generative? . i2cd4) (record-type-field-names . i2cd3) (record-rtd . i2cd2) (record-field-mutable? . i2cd1) (delete-file . i2cd0) (file-exists? . i2ccf) (vector-sort! . i2cce) (vector-sort . i2ccd) (list-sort . i2ccc) (symbol-hash . i2ccb) (string-ci-hash . i2cca) (string-hash . i2cc9) (equal-hash . i2cc8) (hashtable-equivalence-function . i2cc7) (make-hashtable . i2cc6) (hashtable-hash-function . i2cc5) (make-eqv-hashtable . i2cc4) (make-eq-hashtable . i2cc3) (hashtable? . i2cc2) (hashtable-update! . i2cc1) (hashtable-size . i2cc0) (hashtable-set! . i2cbf) (hashtable-ref . i2cbe) (hashtable-mutable? . i2cbd) (hashtable-keys . i2cbc) (hashtable-entries . i2cbb) (hashtable-delete! . i2cba) (hashtable-copy . i2cb9) (hashtable-contains? . i2cb8) (hashtable-clear! . i2cb7) (call-with-output-file . i2cb6) (call-with-input-file . i2cb5) (write-char . i2cb4) (write . i2cb3) (with-output-to-file . i2cb2) (with-input-from-file . i2cb1) (read-char . i2cb0) (read . i2caf) (peek-char . i2cae) (open-output-file . i2cad) (open-input-file . i2cac) (newline . i2cab) (display . i2caa) (close-output-port . i2ca9) (close-input-port . i2ca8) (eof-object? . i2ca7) (eof-object . i2ca6) (current-error-port . i2ca5) (current-output-port . i2ca4) (current-input-port . i2ca3) (output-port? . i2ca2) (input-port? . i2ca1) (utf-8-codec . i2ca0) (utf-16-codec . i2c9f) (transcoder-error-handling-mode . i2c9e) (transcoder-eol-style . i2c9d) (transcoder-codec . i2c9c) (transcoded-port . i2c9b) (textual-port? . i2c9a) (string->bytevector . i2c99) (standard-output-port . i2c98) (standard-input-port . i2c97) (standard-error-port . i2c96) (set-port-position! . i2c95) (put-u8 . i2c94) (put-string . i2c93) (put-datum . i2c92) (put-char . i2c91) (put-bytevector . i2c90) (port? . i2c8f) (port-transcoder . i2c8e) (port-position . i2c8d) (port-has-set-port-position!? . i2c8c) (port-has-port-position? . i2c8b) (port-eof? . i2c8a) (output-port-buffer-mode . i2c89) (open-string-output-port . i2c88) (open-string-input-port . i2c87) (open-file-output-port . i2c86) (open-file-input/output-port . i2c85) (open-file-input-port . i2c84) (open-bytevector-output-port . i2c83) (open-bytevector-input-port . i2c82) (native-transcoder . i2c81) (native-eol-style . i2c80) (make-transcoder . i2c7f) (latin-1-codec . i2c7e) (make-i/o-write-error . i2c7d) (make-i/o-read-error . i2c7c) (make-i/o-port-error . i2c7b) (make-i/o-invalid-position-error . i2c7a) (make-i/o-filename-error . i2c79) (make-i/o-file-protection-error . i2c78) (make-i/o-file-is-read-only-error . i2c77) (make-i/o-file-does-not-exist-error . i2c76) (make-i/o-file-already-exists-error . i2c75) (make-i/o-error . i2c74) (make-i/o-encoding-error . i2c73) (make-i/o-decoding-error . i2c72) (make-custom-textual-output-port . i2c71) (make-custom-textual-input/output-port . i2c70) (make-custom-textual-input-port . i2c6f) (make-custom-binary-output-port . i2c6e) (make-custom-binary-input/output-port . i2c6d) (make-custom-binary-input-port . i2c6c) (make-bytevector . i2c6b) (lookahead-u8 . i2c6a) (lookahead-char . i2c69) (i/o-write-error? . i2c68) (i/o-read-error? . i2c67) (i/o-port-error? . i2c66) (i/o-invalid-position-error? . i2c65) (i/o-filename-error? . i2c64) (i/o-file-protection-error? . i2c63) (i/o-file-is-read-only-error? . i2c62) (i/o-file-does-not-exist-error? . i2c61) (i/o-file-already-exists-error? . i2c60) (i/o-error? . i2c5f) (i/o-error-position . i2c5e) (i/o-error-port . i2c5d) (i/o-error-filename . i2c5c) (i/o-encoding-error? . i2c5b) (i/o-encoding-error-char . i2c5a) (i/o-decoding-error? . i2c59) (get-u8 . i2c58) (get-string-n! . i2c57) (get-string-n . i2c56) (get-string-all . i2c55) (get-line . i2c54) (get-datum . i2c53) (get-char . i2c52) (get-bytevector-some . i2c51) (get-bytevector-n! . i2c50) (get-bytevector-n . i2c4f) (get-bytevector-all . i2c4e) (flush-output-port . i2c4d) (close-port . i2c4c) (exit . i2c44) (command-line . i28da) (string-fill! . i2c43) (string-set! . i2c42) (set-cdr! . i2c41) (set-car! . i2c40) (remove . i2c3f) (remv . i2c3e) (remp . i2c3d) (remq . i2c3c) (partition . i2c3b) (memv . i2c3a) (memq . i2c39) (memp . i2c38) (member . i2c37) (exists . i2c36) (for-all . i2c35) (fold-right . i2c34) (fold-left . i2c33) (find . i2c32) (filter . i2c31) (cons* . i2c30) (assv . i2c2f) (assq . i2c2e) (assp . i2c2d) (assoc . i2c2c) (call-with-string-output-port . i2c2b) (call-with-port . i2c2a) (call-with-bytevector-output-port . i2c29) (bytevector->string . i2c28) (buffer-mode? . i2c27) (binary-port? . i2c26) (with-exception-handler . i2c25) (raise-continuable . i2c24) (raise . i2c23) (eval . ie37) (environment . ie2f) (make-enumeration . i2c22) (enum-set=? . i2c21) (enum-set-universe . i2c20) (enum-set-union . i2c1f) (enum-set-subset? . i2c1e) (enum-set-projection . i2c1d) (enum-set-member? . i2c1c) (enum-set-intersection . i2c1b) (enum-set-indexer . i2c1a) (enum-set-difference . i2c19) (enum-set-constructor . i2c18) (enum-set-complement . i2c17) (enum-set->list . i2c16) (who-condition? . i2c15) (warning? . i2c14) (violation? . i2c13) (undefined-violation? . i2c12) (syntax-violation? . i2c11) (syntax-violation-subform . i2c10) (syntax-violation-form . i2c0f) (syntax-violation . ie57) (simple-conditions . i2c0e) (serious-condition? . i2c0d) (non-continuable-violation? . i2c0c) (message-condition? . i2c0b) (make-who-condition . i2c0a) (make-warning . i2c09) (make-violation . i2c08) (make-undefined-violation . i2c07) (make-syntax-violation . i2c06) (make-serious-condition . i2c05) (make-non-continuable-violation . i2c04) (make-message-condition . i2c03) (make-lexical-violation . i2c02) (make-irritants-condition . i2c01) (make-implementation-restriction-violation . i2c00) (make-error . i2bff) (make-assertion-violation . i2bfe) (lexical-violation? . i2bfd) (irritants-condition? . i2bfc) (implementation-restriction-violation? . i2bfb) (error? . i2bfa) (condition-who . i2bf9) (condition-predicate . i2bf8) (condition-message . i2bf7) (condition-irritants . i2bf6) (condition-accessor . i2bf5) (condition . i2bf4) (assertion-violation? . i2bf3) (condition? . i2bf2) (utf32->string . i2bf1) (utf16->string . i2bf0) (utf8->string . i2bef) (uint-list->bytevector . i2bee) (u8-list->bytevector . i2bed) (string->utf8 . i2bec) (string->utf32 . i2beb) (string->utf16 . i2bea) (sint-list->bytevector . i2be9) (native-endianness . i2be8) (bytevector? . i2be7) (bytevector=? . i2be6) (bytevector-uint-set! . i2be5) (bytevector-uint-ref . i2be4) (bytevector-u8-set! . i2be3) (bytevector-u8-ref . i2be2) (bytevector-u64-set! . i2be1) (bytevector-u64-ref . i2be0) (bytevector-u64-native-set! . i2bdf) (bytevector-u64-native-ref . i2bde) (bytevector-u32-set! . i2bdd) (bytevector-u32-ref . i2bdc) (bytevector-u32-native-set! . i2bdb) (bytevector-u32-native-ref . i2bda) (bytevector-u16-set! . i2bd9) (bytevector-u16-ref . i2bd8) (bytevector-u16-native-set! . i2bd7) (bytevector-u16-native-ref . i2bd6) (bytevector-sint-set! . i2bd5) (bytevector-sint-ref . i2bd4) (bytevector-s8-set! . i2bd3) (bytevector-s8-ref . i2bd2) (bytevector-s64-set! . i2bd1) (bytevector-s64-ref . i2bd0) (bytevector-s64-native-set! . i2bcf) (bytevector-s64-native-ref . i2bce) (bytevector-s32-set! . i2bcd) (bytevector-s32-ref . i2bcc) (bytevector-s32-native-set! . i2bcb) (bytevector-s32-native-ref . i2bca) (bytevector-s16-set! . i2bc9) (bytevector-s16-ref . i2bc8) (bytevector-s16-native-set! . i2bc7) (bytevector-s16-native-ref . i2bc6) (bytevector-length . i2bc5) (bytevector-ieee-single-ref . i2bc4) (bytevector-ieee-single-set! . i2bc3) (bytevector-ieee-single-native-set! . i2bc2) (bytevector-ieee-single-native-ref . i2bc1) (bytevector-ieee-double-set! . i2bc0) (bytevector-ieee-double-ref . i2bbf) (bytevector-ieee-double-native-set! . i2bbe) (bytevector-ieee-double-native-ref . i2bbd) (bytevector-fill! . i2bbc) (bytevector-copy! . i2bbb) (bytevector-copy . i2bba) (bytevector->uint-list . i2bb9) (bytevector->u8-list . i2bb8) (bytevector->sint-list . i2bb7) (no-nans-violation? . i2bb6) (no-infinities-violation? . i2bb5) (make-no-nans-violation . i2bb4) (make-no-infinities-violation . i2bb3) (real->flonum . i2bb2) (flzero? . i2bb1) (fltruncate . i2bb0) (fltan . i2baf) (flsqrt . i2bae) (flsin . i2bad) (flround . i2bac) (flpositive? . i2bab) (flonum? . i2baa) (flodd? . i2ba9) (flnumerator . i2ba8) (flnegative? . i2ba7) (flnan? . i2ba6) (flmod0 . i2ba5) (flmod . i2ba4) (flmin . i2ba3) (flmax . i2ba2) (fllog . i2ba1) (flinteger? . i2ba0) (flinfinite? . i2b9f) (flfloor . i2b9e) (flfinite? . i2b9d) (flexpt . i2b9c) (flexp . i2b9b) (fleven? . i2b9a) (fldiv0-and-mod0 . i2b99) (fldiv0 . i2b98) (fldiv-and-mod . i2b97) (fldiv . i2b96) (fldenominator . i2b95) (flcos . i2b94) (flceiling . i2b93) (flatan . i2b92) (flasin . i2b91) (flacos . i2b90) (flabs . i2b8f) (fl>? . i2b8e) (fl>=? . i2b8d) (fl=? . i2b8c) (fl<? . i2b8b) (fl<=? . i2b8a) (fl/ . i2b89) (fl- . i2b88) (fl+ . i2b87) (fl* . i2b86) (fixnum->flonum . i2b85) (fxzero? . i2b84) (fxxor . i2b83) (fxrotate-bit-field . i2b82) (fxreverse-bit-field . i2b81) (fxpositive? . i2b80) (fxodd? . i2b7f) (fxnot . i2b7e) (fxnegative? . i2b7d) (fxmod0 . i2b7c) (fxmod . i2b7b) (fxmin . i2b7a) (fxmax . i2b79) (fxlength . i2b78) (fxior . i2b77) (fxif . i2b76) (fxfirst-bit-set . i2b75) (fxeven? . i2b74) (fxdiv0-and-mod0 . i2b73) (fxdiv0 . i2b72) (fxdiv-and-mod . i2b71) (fxdiv . i2b70) (fxcopy-bit-field . i2b6f) (fxcopy-bit . i2b6e) (fxbit-set? . i2b6d) (fxbit-field . i2b6c) (fxbit-count . i2b6b) (fxarithmetic-shift-right . i2b6a) (fxarithmetic-shift-left . i2b69) (fxarithmetic-shift . i2b68) (fxand . i2b67) (fx>? . i2b66) (fx>=? . i2b65) (fx=? . i2b64) (fx<? . i2b63) (fx<=? . i2b62) (fx-/carry . i2b61) (fx- . i2b60) (fx+/carry . i2b5f) (fx+ . i2b5e) (fx*/carry . i2b5d) (fx* . i2b5c) (greatest-fixnum . i2b5b) (least-fixnum . i2b5a) (fixnum-width . i2b59) (fixnum? . i2b58) (bitwise-rotate-bit-field . i2b57) (bitwise-reverse-bit-field . i2b56) (bitwise-length . i2b55) (bitwise-if . i2b54) (bitwise-first-bit-set . i2b53) (bitwise-copy-bit-field . i2b52) (bitwise-copy-bit . i2b51) (bitwise-bit-set? . i2b50) (bitwise-bit-field . i2b4f) (bitwise-bit-count . i2b4e) (bitwise-xor . i2b4d) (bitwise-ior . i2b4c) (bitwise-and . i2b4b) (bitwise-not . i2b4a) (bitwise-arithmetic-shift-right . i2b49) (bitwise-arithmetic-shift-left . i2b48) (bitwise-arithmetic-shift . i2b47) (zero? . i2b46) (vector? . i2b45) (vector-set! . i2b44) (vector-ref . i2b43) (vector-map . i2b42) (vector-length . i2b41) (vector-for-each . i2b40) (vector-fill! . i2b3f) (vector->list . i2b3e) (vector . i2b3d) (values . i2b3c) (truncate . i2b3b) (tan . i2b3a) (symbol? . i2b39) (symbol=? . i2b38) (symbol->string . i2b37) (substring . i2b36) (string? . i2b35) (string>? . i2b34) (string>=? . i2b33) (string=? . i2b32) (string<? . i2b31) (string<=? . i2b30) (string-ref . i2b2f) (string-length . i2b2e) (string-for-each . i2b2d) (string-copy . i2b2c) (string-append . i2b2b) (string->symbol . i2b2a) (string->number . i2b29) (string->list . i2b28) (string . i2b27) (sqrt . i2b26) (sin . i2b25) (round . i2b24) (reverse . i2b23) (real? . i2b22) (real-valued? . i2b21) (real-part . i2b20) (rationalize . i2b1f) (rational? . i2b1e) (rational-valued? . i2b1d) (procedure? . i2b1c) (positive? . i2b1b) (pair? . i2b1a) (odd? . i2b19) (numerator . i2b18) (number? . i2b17) (number->string . i2b16) (null? . i2b15) (not . i2b14) (negative? . i2b13) (nan? . i2b12) (min . i2b11) (max . i2b10) (map . i2b0f) (make-vector . i2b0e) (make-string . i2b0d) (make-rectangular . i2b0c) (make-polar . i2b0b) (magnitude . i2b0a) (log . i2b09) (list? . i2b08) (list-tail . i2b07) (list-ref . i2b06) (list->vector . i2b05) (list->string . i2b04) (list . i2b03) (length . i2b02) (lcm . i2b01) (integer? . i2b00) (integer-valued? . i2aff) (integer->char . i2afe) (infinite? . i2afd) (inexact? . i2afc) (inexact . i2afb) (imag-part . i2afa) (gcd . i2af9) (for-each . i2af8) (floor . i2af7) (finite? . i2af6) (expt . i2af5) (exp . i2af4) (exact? . i2af3) (exact-integer-sqrt . i2af2) (exact . i2af1) (even? . i2af0) (error . i2aef) (eqv? . i2aee) (equal? . i2aed) (eq? . i2aec) (dynamic-wind . i2aeb) (div0-and-mod0 . i2aea) (mod0 . i2ae9) (div0 . i2ae8) (div-and-mod . i2ae7) (mod . i2ae6) (div . i2ae5) (denominator . i2ae4) (cos . i2ae3) (cons . i2ae2) (complex? . i2ae1) (char? . i2ae0) (char>? . i2adf) (char>=? . i2ade) (char=? . i2add) (char<? . i2adc) (char<=? . i2adb) (char->integer . i2ada) (ceiling . i2ad9) (call-with-values . i2ad8) (call/cc . i2ad7) (call-with-current-continuation . i2ad6) (cddddr . i2ad5) (cdddar . i2ad4) (cddadr . i2ad3) (cddaar . i2ad2) (cdaddr . i2ad1) (cdadar . i2ad0) (cdaadr . i2acf) (cdaaar . i2ace) (cadddr . i2acd) (caddar . i2acc) (cadadr . i2acb) (cadaar . i2aca) (caaddr . i2ac9) (caadar . i2ac8) (caaadr . i2ac7) (caaaar . i2ac6) (cdddr . i2ac5) (cddar . i2ac4) (cdadr . i2ac3) (cdaar . i2ac2) (caddr . i2ac1) (cadar . i2ac0) (caadr . i2abf) (caaar . i2abe) (cddr . i2abd) (cdar . i2abc) (cadr . i2abb) (caar . i2aba) (cdr . i2ab9) (car . i2ab8) (boolean? . i2ab7) (boolean=? . i2ab6) (atan . i2ab5) (assertion-violation . i2ab4) (asin . i2ab3) (apply . i2ab2) (append . i2ab1) (angle . i2ab0) (acos . i2aaf) (abs . i2aae) (/ . i2aad) (* . i2aac) (- . i2aab) (+ . i2aaa) (>= . i2aa9) (> . i2aa8) (= . i2aa7) (<= . i2aa6) (< . i2aa5) (library . i2aa4) (&no-nans . i2aa3) (&no-infinities . i2aa2) (&i/o-encoding . i2aa1) (&i/o-decoding . i2aa0) (&i/o-port . i2a9f) (&i/o-file-does-not-exist . i2a9e) (&i/o-file-already-exists . i2a9d) (&i/o-file-is-read-only . i2a9c) (&i/o-file-protection . i2a9b) (&i/o-filename . i2a9a) (&i/o-invalid-position . i2a99) (&i/o-write . i2a98) (&i/o-read . i2a97) (&i/o . i2a96) (&undefined . i2a95) (&syntax . i2a94) (&lexical . i2a93) (&implementation-restriction . i2a92) (&non-continuable . i2a91) (&who . i2a90) (&irritants . i2a8f) (&assertion . i2a8e) (&violation . i2a8d) (&error . i2a8c) (&serious . i2a8b) (&warning . i2a8a) (&message . i2a89) (&condition . i2a88) (define-condition-type . i2a87) (define-enumeration . i2a86) (define-record-type . i2a85) (parent-rtd . i2a84) (nongenerative . i2a83) (opaque . i2a82) (sealed . i2a81) (protocol . i2a80) (parent . i2a7f) (immutable . i2a7e) (mutable . i2a7d) (fields . i2a7c) (error-handling-mode . i2a7b) (file-options . i2a7a) (buffer-mode . i2a79) (eol-style . i2a78) (guard . i2a77) (unsyntax-splicing . i2a74) (unsyntax . i2a73) (unquote-splicing . i2a72) (unquote . i2a71) (_ . i2a70) (else . i2a6f) (=> . i2a6e) (... . i2a6d) (assert . i2a6c) (endianness . i2a6b) (time . i2a69) (do . i2a68) (cond . i2a67) (let* . i2a66) (let*-values . i2a65) (let-values . i2a64) (identifier-syntax . i2a63) (with-syntax . i2a62) (quasisyntax . i2a61) (quasiquote . i2a60) (syntax-rules . i2a5f) (include . i2a5e) (record-constructor-descriptor . i2a5c) (record-type-descriptor . i2a5b) (case . i2a5a) (unless . i2a58) (when . i2a57) (or . i2a56) (and . i2a55) (if . i2a54) (let . i2a53) (letrec* . i2a52) (letrec . i2a51) (case-lambda . i2a4f) (lambda . i2a4e) (syntax . i2a4d) (syntax-case . i2a4c) (quote . i2a4b) (letrec-syntax . i2a49) (let-syntax . i2a48) (set! . i2a47) (import . i2a46) (begin . i2a45) (define-syntax . i2a43) (define . i2a42)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2de3 '(psyntax null-environment-5) '() '() '() '() '((make-promise . i2c45) (unquote-splicing . i2a72) (unquote . i2a71) (_ . i2a70) (else . i2a6f) (=> . i2a6e) (... . i2a6d) (delay . i2a6a) (do . i2a68) (cond . i2a67) (let* . i2a66) (quasiquote . i2a60) (syntax-rules . i2a5f) (case . i2a5a) (or . i2a56) (and . i2a55) (if . i2a54) (let . i2a53) (letrec . i2a51) (lambda . i2a4e) (quote . i2a4b) (letrec-syntax . i2a49) (let-syntax . i2a48) (set! . i2a47) (begin . i2a45) (define-syntax . i2a43) (define . i2a42)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2de4 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . i2cf6) (string-ci>=? . i2cf5) (string-ci=? . i2cf4) (string-ci<? . i2cf3) (string-ci<=? . i2cf2) (char-whitespace? . i2cf1) (char-upper-case? . i2cf0) (char-numeric? . i2cee) (char-lower-case? . i2ced) (char-upcase . i2ceb) (char-downcase . i2ce8) (char-ci>? . i2ce7) (char-ci>=? . i2ce6) (char-ci=? . i2ce5) (char-ci<? . i2ce4) (char-ci<=? . i2ce3) (char-alphabetic? . i2ce2) (call-with-output-file . i2cb6) (call-with-input-file . i2cb5) (write-char . i2cb4) (write . i2cb3) (with-output-to-file . i2cb2) (with-input-from-file . i2cb1) (read-char . i2cb0) (read . i2caf) (peek-char . i2cae) (open-output-file . i2cad) (open-input-file . i2cac) (newline . i2cab) (display . i2caa) (close-output-port . i2ca9) (close-input-port . i2ca8) (eof-object . i2ca6) (current-output-port . i2ca4) (current-input-port . i2ca3) (output-port? . i2ca2) (input-port? . i2ca1) (scheme-report-environment . ie33) (quotient . i2c4b) (null-environment . ie31) (remainder . i2c4a) (modulo . i2c49) (inexact->exact . i2c48) (force . i2c47) (exact->inexact . i2c46) (make-promise . i2c45) (string-fill! . i2c43) (string-set! . i2c42) (set-cdr! . i2c41) (set-car! . i2c40) (memv . i2c3a) (memq . i2c39) (member . i2c37) (assv . i2c2f) (assq . i2c2e) (assoc . i2c2c) (eval . ie37) (zero? . i2b46) (vector? . i2b45) (vector-set! . i2b44) (vector-ref . i2b43) (vector-length . i2b41) (vector-fill! . i2b3f) (vector->list . i2b3e) (vector . i2b3d) (values . i2b3c) (truncate . i2b3b) (tan . i2b3a) (symbol? . i2b39) (symbol->string . i2b37) (substring . i2b36) (string? . i2b35) (string>? . i2b34) (string>=? . i2b33) (string=? . i2b32) (string<? . i2b31) (string<=? . i2b30) (string-ref . i2b2f) (string-length . i2b2e) (string-copy . i2b2c) (string-append . i2b2b) (string->symbol . i2b2a) (string->number . i2b29) (string->list . i2b28) (string . i2b27) (sqrt . i2b26) (sin . i2b25) (round . i2b24) (reverse . i2b23) (real? . i2b22) (real-part . i2b20) (rationalize . i2b1f) (rational? . i2b1e) (procedure? . i2b1c) (positive? . i2b1b) (pair? . i2b1a) (odd? . i2b19) (numerator . i2b18) (number? . i2b17) (number->string . i2b16) (not . i2b14) (negative? . i2b13) (min . i2b11) (max . i2b10) (map . i2b0f) (make-vector . i2b0e) (make-string . i2b0d) (make-rectangular . i2b0c) (make-polar . i2b0b) (magnitude . i2b0a) (log . i2b09) (list? . i2b08) (list-tail . i2b07) (list-ref . i2b06) (list->vector . i2b05) (list->string . i2b04) (list . i2b03) (length . i2b02) (lcm . i2b01) (integer? . i2b00) (integer->char . i2afe) (inexact? . i2afc) (imag-part . i2afa) (gcd . i2af9) (for-each . i2af8) (floor . i2af7) (expt . i2af5) (exp . i2af4) (exact? . i2af3) (even? . i2af0) (eqv? . i2aee) (equal? . i2aed) (eq? . i2aec) (dynamic-wind . i2aeb) (denominator . i2ae4) (cos . i2ae3) (cons . i2ae2) (complex? . i2ae1) (char? . i2ae0) (char>? . i2adf) (char>=? . i2ade) (char=? . i2add) (char<? . i2adc) (char<=? . i2adb) (char->integer . i2ada) (ceiling . i2ad9) (call-with-values . i2ad8) (call-with-current-continuation . i2ad6) (cddddr . i2ad5) (cdddar . i2ad4) (cddadr . i2ad3) (cddaar . i2ad2) (cdaddr . i2ad1) (cdadar . i2ad0) (cdaadr . i2acf) (cdaaar . i2ace) (cadddr . i2acd) (caddar . i2acc) (cadadr . i2acb) (cadaar . i2aca) (caaddr . i2ac9) (caadar . i2ac8) (caaadr . i2ac7) (caaaar . i2ac6) (cdddr . i2ac5) (cddar . i2ac4) (cdadr . i2ac3) (cdaar . i2ac2) (caddr . i2ac1) (cadar . i2ac0) (caadr . i2abf) (caaar . i2abe) (cddr . i2abd) (cdar . i2abc) (cadr . i2abb) (caar . i2aba) (cdr . i2ab9) (car . i2ab8) (boolean? . i2ab7) (atan . i2ab5) (asin . i2ab3) (apply . i2ab2) (append . i2ab1) (angle . i2ab0) (acos . i2aaf) (abs . i2aae) (/ . i2aad) (* . i2aac) (- . i2aab) (+ . i2aaa) (>= . i2aa9) (> . i2aa8) (= . i2aa7) (<= . i2aa6) (< . i2aa5) (unquote-splicing . i2a72) (unquote . i2a71) (else . i2a6f) (=> . i2a6e) (... . i2a6d) (delay . i2a6a) (do . i2a68) (cond . i2a67) (let* . i2a66) (quasiquote . i2a60) (syntax-rules . i2a5f) (case . i2a5a) (or . i2a56) (and . i2a55) (if . i2a54) (let . i2a53) (letrec . i2a51) (lambda . i2a4e) (quote . i2a4b) (letrec-syntax . i2a49) (let-syntax . i2a48) (set! . i2a47) (begin . i2a45) (define-syntax . i2a43) (define . i2a42)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2de5 '(psyntax modules) '() '() '() '() '((module . i2a44)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2de6 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2de7 '(rnrs) '(6) '() '() '() '((regexp? . i2da2) (string-upcase . i2cfe) (string-titlecase . i2cfd) (string-normalize-nfkd . i2cfc) (string-normalize-nfkc . i2cfb) (string-normalize-nfd . i2cfa) (string-normalize-nfc . i2cf9) (string-foldcase . i2cf8) (string-downcase . i2cf7) (string-ci>? . i2cf6) (string-ci>=? . i2cf5) (string-ci=? . i2cf4) (string-ci<? . i2cf3) (string-ci<=? . i2cf2) (char-whitespace? . i2cf1) (char-upper-case? . i2cf0) (char-title-case? . i2cef) (char-numeric? . i2cee) (char-lower-case? . i2ced) (char-general-category . i2cec) (char-upcase . i2ceb) (char-titlecase . i2cea) (char-foldcase . i2ce9) (char-downcase . i2ce8) (char-ci>? . i2ce7) (char-ci>=? . i2ce6) (char-ci=? . i2ce5) (char-ci<? . i2ce4) (char-ci<=? . i2ce3) (char-alphabetic? . i2ce2) (make-variable-transformer . iba2) (identifier? . ie59) (generate-temporaries . ie45) (free-identifier=? . ie47) (syntax->datum . ie5d) (datum->syntax . ie5b) (bound-identifier=? . ie49) (record-type-descriptor? . i2ce1) (record-predicate . i2ce0) (record-mutator . i2cdf) (record-constructor . i2cde) (record-accessor . i2cdd) (make-record-type-descriptor . i2cdc) (make-record-constructor-descriptor . i2cdb) (record? . i2cda) (record-type-uid . i2cd9) (record-type-sealed? . i2cd8) (record-type-parent . i2cd7) (record-type-opaque? . i2cd6) (record-type-name . i2cd5) (record-type-generative? . i2cd4) (record-type-field-names . i2cd3) (record-rtd . i2cd2) (record-field-mutable? . i2cd1) (delete-file . i2cd0) (file-exists? . i2ccf) (vector-sort! . i2cce) (vector-sort . i2ccd) (list-sort . i2ccc) (symbol-hash . i2ccb) (string-ci-hash . i2cca) (string-hash . i2cc9) (equal-hash . i2cc8) (hashtable-equivalence-function . i2cc7) (make-hashtable . i2cc6) (hashtable-hash-function . i2cc5) (make-eqv-hashtable . i2cc4) (make-eq-hashtable . i2cc3) (hashtable? . i2cc2) (hashtable-update! . i2cc1) (hashtable-size . i2cc0) (hashtable-set! . i2cbf) (hashtable-ref . i2cbe) (hashtable-mutable? . i2cbd) (hashtable-keys . i2cbc) (hashtable-entries . i2cbb) (hashtable-delete! . i2cba) (hashtable-copy . i2cb9) (hashtable-contains? . i2cb8) (hashtable-clear! . i2cb7) (call-with-output-file . i2cb6) (call-with-input-file . i2cb5) (write-char . i2cb4) (write . i2cb3) (with-output-to-file . i2cb2) (with-input-from-file . i2cb1) (read-char . i2cb0) (read . i2caf) (peek-char . i2cae) (open-output-file . i2cad) (open-input-file . i2cac) (newline . i2cab) (display . i2caa) (close-output-port . i2ca9) (close-input-port . i2ca8) (eof-object? . i2ca7) (eof-object . i2ca6) (current-error-port . i2ca5) (current-output-port . i2ca4) (current-input-port . i2ca3) (output-port? . i2ca2) (input-port? . i2ca1) (utf-8-codec . i2ca0) (utf-16-codec . i2c9f) (transcoder-error-handling-mode . i2c9e) (transcoder-eol-style . i2c9d) (transcoder-codec . i2c9c) (transcoded-port . i2c9b) (textual-port? . i2c9a) (string->bytevector . i2c99) (standard-output-port . i2c98) (standard-input-port . i2c97) (standard-error-port . i2c96) (set-port-position! . i2c95) (put-u8 . i2c94) (put-string . i2c93) (put-datum . i2c92) (put-char . i2c91) (put-bytevector . i2c90) (port? . i2c8f) (port-transcoder . i2c8e) (port-position . i2c8d) (port-has-set-port-position!? . i2c8c) (port-has-port-position? . i2c8b) (port-eof? . i2c8a) (output-port-buffer-mode . i2c89) (open-string-output-port . i2c88) (open-string-input-port . i2c87) (open-file-output-port . i2c86) (open-file-input/output-port . i2c85) (open-file-input-port . i2c84) (open-bytevector-output-port . i2c83) (open-bytevector-input-port . i2c82) (native-transcoder . i2c81) (native-eol-style . i2c80) (make-transcoder . i2c7f) (latin-1-codec . i2c7e) (make-i/o-write-error . i2c7d) (make-i/o-read-error . i2c7c) (make-i/o-port-error . i2c7b) (make-i/o-invalid-position-error . i2c7a) (make-i/o-filename-error . i2c79) (make-i/o-file-protection-error . i2c78) (make-i/o-file-is-read-only-error . i2c77) (make-i/o-file-does-not-exist-error . i2c76) (make-i/o-file-already-exists-error . i2c75) (make-i/o-error . i2c74) (make-i/o-encoding-error . i2c73) (make-i/o-decoding-error . i2c72) (make-custom-textual-output-port . i2c71) (make-custom-textual-input/output-port . i2c70) (make-custom-textual-input-port . i2c6f) (make-custom-binary-output-port . i2c6e) (make-custom-binary-input/output-port . i2c6d) (make-custom-binary-input-port . i2c6c) (make-bytevector . i2c6b) (lookahead-u8 . i2c6a) (lookahead-char . i2c69) (i/o-write-error? . i2c68) (i/o-read-error? . i2c67) (i/o-port-error? . i2c66) (i/o-invalid-position-error? . i2c65) (i/o-filename-error? . i2c64) (i/o-file-protection-error? . i2c63) (i/o-file-is-read-only-error? . i2c62) (i/o-file-does-not-exist-error? . i2c61) (i/o-file-already-exists-error? . i2c60) (i/o-error? . i2c5f) (i/o-error-position . i2c5e) (i/o-error-port . i2c5d) (i/o-error-filename . i2c5c) (i/o-encoding-error? . i2c5b) (i/o-encoding-error-char . i2c5a) (i/o-decoding-error? . i2c59) (get-u8 . i2c58) (get-string-n! . i2c57) (get-string-n . i2c56) (get-string-all . i2c55) (get-line . i2c54) (get-datum . i2c53) (get-char . i2c52) (get-bytevector-some . i2c51) (get-bytevector-n! . i2c50) (get-bytevector-n . i2c4f) (get-bytevector-all . i2c4e) (flush-output-port . i2c4d) (close-port . i2c4c) (exit . i2c44) (command-line . i28da) (remove . i2c3f) (remv . i2c3e) (remp . i2c3d) (remq . i2c3c) (partition . i2c3b) (memv . i2c3a) (memq . i2c39) (memp . i2c38) (member . i2c37) (exists . i2c36) (for-all . i2c35) (fold-right . i2c34) (fold-left . i2c33) (find . i2c32) (filter . i2c31) (cons* . i2c30) (assv . i2c2f) (assq . i2c2e) (assp . i2c2d) (assoc . i2c2c) (call-with-string-output-port . i2c2b) (call-with-port . i2c2a) (call-with-bytevector-output-port . i2c29) (bytevector->string . i2c28) (buffer-mode? . i2c27) (binary-port? . i2c26) (with-exception-handler . i2c25) (raise-continuable . i2c24) (raise . i2c23) (make-enumeration . i2c22) (enum-set=? . i2c21) (enum-set-universe . i2c20) (enum-set-union . i2c1f) (enum-set-subset? . i2c1e) (enum-set-projection . i2c1d) (enum-set-member? . i2c1c) (enum-set-intersection . i2c1b) (enum-set-indexer . i2c1a) (enum-set-difference . i2c19) (enum-set-constructor . i2c18) (enum-set-complement . i2c17) (enum-set->list . i2c16) (who-condition? . i2c15) (warning? . i2c14) (violation? . i2c13) (undefined-violation? . i2c12) (syntax-violation? . i2c11) (syntax-violation-subform . i2c10) (syntax-violation-form . i2c0f) (syntax-violation . ie57) (simple-conditions . i2c0e) (serious-condition? . i2c0d) (non-continuable-violation? . i2c0c) (message-condition? . i2c0b) (make-who-condition . i2c0a) (make-warning . i2c09) (make-violation . i2c08) (make-undefined-violation . i2c07) (make-syntax-violation . i2c06) (make-serious-condition . i2c05) (make-non-continuable-violation . i2c04) (make-message-condition . i2c03) (make-lexical-violation . i2c02) (make-irritants-condition . i2c01) (make-implementation-restriction-violation . i2c00) (make-error . i2bff) (make-assertion-violation . i2bfe) (lexical-violation? . i2bfd) (irritants-condition? . i2bfc) (implementation-restriction-violation? . i2bfb) (error? . i2bfa) (condition-who . i2bf9) (condition-predicate . i2bf8) (condition-message . i2bf7) (condition-irritants . i2bf6) (condition-accessor . i2bf5) (condition . i2bf4) (assertion-violation? . i2bf3) (condition? . i2bf2) (utf32->string . i2bf1) (utf16->string . i2bf0) (utf8->string . i2bef) (uint-list->bytevector . i2bee) (u8-list->bytevector . i2bed) (string->utf8 . i2bec) (string->utf32 . i2beb) (string->utf16 . i2bea) (sint-list->bytevector . i2be9) (native-endianness . i2be8) (bytevector? . i2be7) (bytevector=? . i2be6) (bytevector-uint-set! . i2be5) (bytevector-uint-ref . i2be4) (bytevector-u8-set! . i2be3) (bytevector-u8-ref . i2be2) (bytevector-u64-set! . i2be1) (bytevector-u64-ref . i2be0) (bytevector-u64-native-set! . i2bdf) (bytevector-u64-native-ref . i2bde) (bytevector-u32-set! . i2bdd) (bytevector-u32-ref . i2bdc) (bytevector-u32-native-set! . i2bdb) (bytevector-u32-native-ref . i2bda) (bytevector-u16-set! . i2bd9) (bytevector-u16-ref . i2bd8) (bytevector-u16-native-set! . i2bd7) (bytevector-u16-native-ref . i2bd6) (bytevector-sint-set! . i2bd5) (bytevector-sint-ref . i2bd4) (bytevector-s8-set! . i2bd3) (bytevector-s8-ref . i2bd2) (bytevector-s64-set! . i2bd1) (bytevector-s64-ref . i2bd0) (bytevector-s64-native-set! . i2bcf) (bytevector-s64-native-ref . i2bce) (bytevector-s32-set! . i2bcd) (bytevector-s32-ref . i2bcc) (bytevector-s32-native-set! . i2bcb) (bytevector-s32-native-ref . i2bca) (bytevector-s16-set! . i2bc9) (bytevector-s16-ref . i2bc8) (bytevector-s16-native-set! . i2bc7) (bytevector-s16-native-ref . i2bc6) (bytevector-length . i2bc5) (bytevector-ieee-single-ref . i2bc4) (bytevector-ieee-single-set! . i2bc3) (bytevector-ieee-single-native-set! . i2bc2) (bytevector-ieee-single-native-ref . i2bc1) (bytevector-ieee-double-set! . i2bc0) (bytevector-ieee-double-ref . i2bbf) (bytevector-ieee-double-native-set! . i2bbe) (bytevector-ieee-double-native-ref . i2bbd) (bytevector-fill! . i2bbc) (bytevector-copy! . i2bbb) (bytevector-copy . i2bba) (bytevector->uint-list . i2bb9) (bytevector->u8-list . i2bb8) (bytevector->sint-list . i2bb7) (no-nans-violation? . i2bb6) (no-infinities-violation? . i2bb5) (make-no-nans-violation . i2bb4) (make-no-infinities-violation . i2bb3) (real->flonum . i2bb2) (flzero? . i2bb1) (fltruncate . i2bb0) (fltan . i2baf) (flsqrt . i2bae) (flsin . i2bad) (flround . i2bac) (flpositive? . i2bab) (flonum? . i2baa) (flodd? . i2ba9) (flnumerator . i2ba8) (flnegative? . i2ba7) (flnan? . i2ba6) (flmod0 . i2ba5) (flmod . i2ba4) (flmin . i2ba3) (flmax . i2ba2) (fllog . i2ba1) (flinteger? . i2ba0) (flinfinite? . i2b9f) (flfloor . i2b9e) (flfinite? . i2b9d) (flexpt . i2b9c) (flexp . i2b9b) (fleven? . i2b9a) (fldiv0-and-mod0 . i2b99) (fldiv0 . i2b98) (fldiv-and-mod . i2b97) (fldiv . i2b96) (fldenominator . i2b95) (flcos . i2b94) (flceiling . i2b93) (flatan . i2b92) (flasin . i2b91) (flacos . i2b90) (flabs . i2b8f) (fl>? . i2b8e) (fl>=? . i2b8d) (fl=? . i2b8c) (fl<? . i2b8b) (fl<=? . i2b8a) (fl/ . i2b89) (fl- . i2b88) (fl+ . i2b87) (fl* . i2b86) (fixnum->flonum . i2b85) (fxzero? . i2b84) (fxxor . i2b83) (fxrotate-bit-field . i2b82) (fxreverse-bit-field . i2b81) (fxpositive? . i2b80) (fxodd? . i2b7f) (fxnot . i2b7e) (fxnegative? . i2b7d) (fxmod0 . i2b7c) (fxmod . i2b7b) (fxmin . i2b7a) (fxmax . i2b79) (fxlength . i2b78) (fxior . i2b77) (fxif . i2b76) (fxfirst-bit-set . i2b75) (fxeven? . i2b74) (fxdiv0-and-mod0 . i2b73) (fxdiv0 . i2b72) (fxdiv-and-mod . i2b71) (fxdiv . i2b70) (fxcopy-bit-field . i2b6f) (fxcopy-bit . i2b6e) (fxbit-set? . i2b6d) (fxbit-field . i2b6c) (fxbit-count . i2b6b) (fxarithmetic-shift-right . i2b6a) (fxarithmetic-shift-left . i2b69) (fxarithmetic-shift . i2b68) (fxand . i2b67) (fx>? . i2b66) (fx>=? . i2b65) (fx=? . i2b64) (fx<? . i2b63) (fx<=? . i2b62) (fx-/carry . i2b61) (fx- . i2b60) (fx+/carry . i2b5f) (fx+ . i2b5e) (fx*/carry . i2b5d) (fx* . i2b5c) (greatest-fixnum . i2b5b) (least-fixnum . i2b5a) (fixnum-width . i2b59) (fixnum? . i2b58) (bitwise-rotate-bit-field . i2b57) (bitwise-reverse-bit-field . i2b56) (bitwise-length . i2b55) (bitwise-if . i2b54) (bitwise-first-bit-set . i2b53) (bitwise-copy-bit-field . i2b52) (bitwise-copy-bit . i2b51) (bitwise-bit-set? . i2b50) (bitwise-bit-field . i2b4f) (bitwise-bit-count . i2b4e) (bitwise-xor . i2b4d) (bitwise-ior . i2b4c) (bitwise-and . i2b4b) (bitwise-not . i2b4a) (bitwise-arithmetic-shift-right . i2b49) (bitwise-arithmetic-shift-left . i2b48) (bitwise-arithmetic-shift . i2b47) (zero? . i2b46) (vector? . i2b45) (vector-set! . i2b44) (vector-ref . i2b43) (vector-map . i2b42) (vector-length . i2b41) (vector-for-each . i2b40) (vector-fill! . i2b3f) (vector->list . i2b3e) (vector . i2b3d) (values . i2b3c) (truncate . i2b3b) (tan . i2b3a) (symbol? . i2b39) (symbol=? . i2b38) (symbol->string . i2b37) (substring . i2b36) (string? . i2b35) (string>? . i2b34) (string>=? . i2b33) (string=? . i2b32) (string<? . i2b31) (string<=? . i2b30) (string-ref . i2b2f) (string-length . i2b2e) (string-for-each . i2b2d) (string-copy . i2b2c) (string-append . i2b2b) (string->symbol . i2b2a) (string->number . i2b29) (string->list . i2b28) (string . i2b27) (sqrt . i2b26) (sin . i2b25) (round . i2b24) (reverse . i2b23) (real? . i2b22) (real-valued? . i2b21) (real-part . i2b20) (rationalize . i2b1f) (rational? . i2b1e) (rational-valued? . i2b1d) (procedure? . i2b1c) (positive? . i2b1b) (pair? . i2b1a) (odd? . i2b19) (numerator . i2b18) (number? . i2b17) (number->string . i2b16) (null? . i2b15) (not . i2b14) (negative? . i2b13) (nan? . i2b12) (min . i2b11) (max . i2b10) (map . i2b0f) (make-vector . i2b0e) (make-string . i2b0d) (make-rectangular . i2b0c) (make-polar . i2b0b) (magnitude . i2b0a) (log . i2b09) (list? . i2b08) (list-tail . i2b07) (list-ref . i2b06) (list->vector . i2b05) (list->string . i2b04) (list . i2b03) (length . i2b02) (lcm . i2b01) (integer? . i2b00) (integer-valued? . i2aff) (integer->char . i2afe) (infinite? . i2afd) (inexact? . i2afc) (inexact . i2afb) (imag-part . i2afa) (gcd . i2af9) (for-each . i2af8) (floor . i2af7) (finite? . i2af6) (expt . i2af5) (exp . i2af4) (exact? . i2af3) (exact-integer-sqrt . i2af2) (exact . i2af1) (even? . i2af0) (error . i2aef) (eqv? . i2aee) (equal? . i2aed) (eq? . i2aec) (dynamic-wind . i2aeb) (div0-and-mod0 . i2aea) (mod0 . i2ae9) (div0 . i2ae8) (div-and-mod . i2ae7) (mod . i2ae6) (div . i2ae5) (denominator . i2ae4) (cos . i2ae3) (cons . i2ae2) (complex? . i2ae1) (char? . i2ae0) (char>? . i2adf) (char>=? . i2ade) (char=? . i2add) (char<? . i2adc) (char<=? . i2adb) (char->integer . i2ada) (ceiling . i2ad9) (call-with-values . i2ad8) (call/cc . i2ad7) (call-with-current-continuation . i2ad6) (cddddr . i2ad5) (cdddar . i2ad4) (cddadr . i2ad3) (cddaar . i2ad2) (cdaddr . i2ad1) (cdadar . i2ad0) (cdaadr . i2acf) (cdaaar . i2ace) (cadddr . i2acd) (caddar . i2acc) (cadadr . i2acb) (cadaar . i2aca) (caaddr . i2ac9) (caadar . i2ac8) (caaadr . i2ac7) (caaaar . i2ac6) (cdddr . i2ac5) (cddar . i2ac4) (cdadr . i2ac3) (cdaar . i2ac2) (caddr . i2ac1) (cadar . i2ac0) (caadr . i2abf) (caaar . i2abe) (cddr . i2abd) (cdar . i2abc) (cadr . i2abb) (caar . i2aba) (cdr . i2ab9) (car . i2ab8) (boolean? . i2ab7) (boolean=? . i2ab6) (atan . i2ab5) (assertion-violation . i2ab4) (asin . i2ab3) (apply . i2ab2) (append . i2ab1) (angle . i2ab0) (acos . i2aaf) (abs . i2aae) (/ . i2aad) (* . i2aac) (- . i2aab) (+ . i2aaa) (>= . i2aa9) (> . i2aa8) (= . i2aa7) (<= . i2aa6) (< . i2aa5) (&no-nans . i2aa3) (&no-infinities . i2aa2) (&i/o-encoding . i2aa1) (&i/o-decoding . i2aa0) (&i/o-port . i2a9f) (&i/o-file-does-not-exist . i2a9e) (&i/o-file-already-exists . i2a9d) (&i/o-file-is-read-only . i2a9c) (&i/o-file-protection . i2a9b) (&i/o-filename . i2a9a) (&i/o-invalid-position . i2a99) (&i/o-write . i2a98) (&i/o-read . i2a97) (&i/o . i2a96) (&undefined . i2a95) (&syntax . i2a94) (&lexical . i2a93) (&implementation-restriction . i2a92) (&non-continuable . i2a91) (&who . i2a90) (&irritants . i2a8f) (&assertion . i2a8e) (&violation . i2a8d) (&error . i2a8c) (&serious . i2a8b) (&warning . i2a8a) (&message . i2a89) (&condition . i2a88) (define-condition-type . i2a87) (define-enumeration . i2a86) (define-record-type . i2a85) (parent-rtd . i2a84) (nongenerative . i2a83) (opaque . i2a82) (sealed . i2a81) (protocol . i2a80) (parent . i2a7f) (immutable . i2a7e) (mutable . i2a7d) (fields . i2a7c) (error-handling-mode . i2a7b) (file-options . i2a7a) (buffer-mode . i2a79) (eol-style . i2a78) (guard . i2a77) (unsyntax-splicing . i2a74) (unsyntax . i2a73) (unquote-splicing . i2a72) (unquote . i2a71) (_ . i2a70) (else . i2a6f) (=> . i2a6e) (... . i2a6d) (assert . i2a6c) (endianness . i2a6b) (do . i2a68) (cond . i2a67) (let* . i2a66) (let*-values . i2a65) (let-values . i2a64) (identifier-syntax . i2a63) (with-syntax . i2a62) (quasisyntax . i2a61) (quasiquote . i2a60) (syntax-rules . i2a5f) (record-constructor-descriptor . i2a5c) (record-type-descriptor . i2a5b) (case . i2a5a) (unless . i2a58) (when . i2a57) (or . i2a56) (and . i2a55) (if . i2a54) (let . i2a53) (letrec* . i2a52) (letrec . i2a51) (case-lambda . i2a4f) (lambda . i2a4e) (syntax . i2a4d) (syntax-case . i2a4c) (quote . i2a4b) (letrec-syntax . i2a49) (let-syntax . i2a48) (set! . i2a47) (begin . i2a45) (define-syntax . i2a43) (define . i2a42)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2de8 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . ie33) (quotient . i2c4b) (null-environment . ie31) (remainder . i2c4a) (modulo . i2c49) (inexact->exact . i2c48) (force . i2c47) (exact->inexact . i2c46) (make-promise . i2c45) (delay . i2a6a)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2de9 '(rnrs control) '(6) '() '() '() '((do . i2a68) (unless . i2a58) (when . i2a57) (case-lambda . i2a4f)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2dea '(rnrs eval) '(6) '() '() '() '((eval . ie37) (environment . ie2f)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2deb '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . i2c41) (set-car! . i2c40)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2dec '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . i2c43) (string-set! . i2c42)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2ded '(rnrs programs) '(6) '() '() '() '((exit . i2c44) (command-line . i28da)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2dee '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . iba2) (identifier? . ie59) (generate-temporaries . ie45) (free-identifier=? . ie47) (syntax->datum . ie5d) (datum->syntax . ie5b) (bound-identifier=? . ie49) (syntax-violation . ie57) (unsyntax-splicing . i2a74) (unsyntax . i2a73) (_ . i2a70) (... . i2a6d) (with-syntax . i2a62) (quasisyntax . i2a61) (syntax . i2a4d) (syntax-case . i2a4c)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2def '(rnrs files) '(6) '() '() '() '((delete-file . i2cd0) (file-exists? . i2ccf) (make-i/o-write-error . i2c7d) (make-i/o-read-error . i2c7c) (make-i/o-port-error . i2c7b) (make-i/o-invalid-position-error . i2c7a) (make-i/o-filename-error . i2c79) (make-i/o-file-protection-error . i2c78) (make-i/o-file-is-read-only-error . i2c77) (make-i/o-file-does-not-exist-error . i2c76) (make-i/o-file-already-exists-error . i2c75) (make-i/o-error . i2c74) (i/o-write-error? . i2c68) (i/o-read-error? . i2c67) (i/o-port-error? . i2c66) (i/o-invalid-position-error? . i2c65) (i/o-filename-error? . i2c64) (i/o-file-protection-error? . i2c63) (i/o-file-is-read-only-error? . i2c62) (i/o-file-does-not-exist-error? . i2c61) (i/o-file-already-exists-error? . i2c60) (i/o-error? . i2c5f) (i/o-error-position . i2c5e) (i/o-error-port . i2c5d) (i/o-error-filename . i2c5c) (&i/o-port . i2a9f) (&i/o-file-does-not-exist . i2a9e) (&i/o-file-already-exists . i2a9d) (&i/o-file-is-read-only . i2a9c) (&i/o-file-protection . i2a9b) (&i/o-filename . i2a9a) (&i/o-invalid-position . i2a99) (&i/o-write . i2a98) (&i/o-read . i2a97) (&i/o . i2a96)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2df0 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . i2cce) (vector-sort . i2ccd) (list-sort . i2ccc)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2df1 '(rnrs base) '(6) '() '() '() '((zero? . i2b46) (vector? . i2b45) (vector-set! . i2b44) (vector-ref . i2b43) (vector-map . i2b42) (vector-length . i2b41) (vector-for-each . i2b40) (vector-fill! . i2b3f) (vector->list . i2b3e) (vector . i2b3d) (values . i2b3c) (truncate . i2b3b) (tan . i2b3a) (symbol? . i2b39) (symbol=? . i2b38) (symbol->string . i2b37) (substring . i2b36) (string? . i2b35) (string>? . i2b34) (string>=? . i2b33) (string=? . i2b32) (string<? . i2b31) (string<=? . i2b30) (string-ref . i2b2f) (string-length . i2b2e) (string-for-each . i2b2d) (string-copy . i2b2c) (string-append . i2b2b) (string->symbol . i2b2a) (string->number . i2b29) (string->list . i2b28) (string . i2b27) (sqrt . i2b26) (sin . i2b25) (round . i2b24) (reverse . i2b23) (real? . i2b22) (real-valued? . i2b21) (real-part . i2b20) (rationalize . i2b1f) (rational? . i2b1e) (rational-valued? . i2b1d) (procedure? . i2b1c) (positive? . i2b1b) (pair? . i2b1a) (odd? . i2b19) (numerator . i2b18) (number? . i2b17) (number->string . i2b16) (null? . i2b15) (not . i2b14) (negative? . i2b13) (nan? . i2b12) (min . i2b11) (max . i2b10) (map . i2b0f) (make-vector . i2b0e) (make-string . i2b0d) (make-rectangular . i2b0c) (make-polar . i2b0b) (magnitude . i2b0a) (log . i2b09) (list? . i2b08) (list-tail . i2b07) (list-ref . i2b06) (list->vector . i2b05) (list->string . i2b04) (list . i2b03) (length . i2b02) (lcm . i2b01) (integer? . i2b00) (integer-valued? . i2aff) (integer->char . i2afe) (infinite? . i2afd) (inexact? . i2afc) (inexact . i2afb) (imag-part . i2afa) (gcd . i2af9) (for-each . i2af8) (floor . i2af7) (finite? . i2af6) (expt . i2af5) (exp . i2af4) (exact? . i2af3) (exact-integer-sqrt . i2af2) (exact . i2af1) (even? . i2af0) (error . i2aef) (eqv? . i2aee) (equal? . i2aed) (eq? . i2aec) (dynamic-wind . i2aeb) (div0-and-mod0 . i2aea) (mod0 . i2ae9) (div0 . i2ae8) (div-and-mod . i2ae7) (mod . i2ae6) (div . i2ae5) (denominator . i2ae4) (cos . i2ae3) (cons . i2ae2) (complex? . i2ae1) (char? . i2ae0) (char>? . i2adf) (char>=? . i2ade) (char=? . i2add) (char<? . i2adc) (char<=? . i2adb) (char->integer . i2ada) (ceiling . i2ad9) (call-with-values . i2ad8) (call/cc . i2ad7) (call-with-current-continuation . i2ad6) (cddddr . i2ad5) (cdddar . i2ad4) (cddadr . i2ad3) (cddaar . i2ad2) (cdaddr . i2ad1) (cdadar . i2ad0) (cdaadr . i2acf) (cdaaar . i2ace) (cadddr . i2acd) (caddar . i2acc) (cadadr . i2acb) (cadaar . i2aca) (caaddr . i2ac9) (caadar . i2ac8) (caaadr . i2ac7) (caaaar . i2ac6) (cdddr . i2ac5) (cddar . i2ac4) (cdadr . i2ac3) (cdaar . i2ac2) (caddr . i2ac1) (cadar . i2ac0) (caadr . i2abf) (caaar . i2abe) (cddr . i2abd) (cdar . i2abc) (cadr . i2abb) (caar . i2aba) (cdr . i2ab9) (car . i2ab8) (boolean? . i2ab7) (boolean=? . i2ab6) (atan . i2ab5) (assertion-violation . i2ab4) (asin . i2ab3) (apply . i2ab2) (append . i2ab1) (angle . i2ab0) (acos . i2aaf) (abs . i2aae) (/ . i2aad) (* . i2aac) (- . i2aab) (+ . i2aaa) (>= . i2aa9) (> . i2aa8) (= . i2aa7) (<= . i2aa6) (< . i2aa5) (unquote-splicing . i2a72) (unquote . i2a71) (_ . i2a70) (else . i2a6f) (=> . i2a6e) (... . i2a6d) (assert . i2a6c) (cond . i2a67) (let* . i2a66) (let*-values . i2a65) (let-values . i2a64) (identifier-syntax . i2a63) (quasiquote . i2a60) (syntax-rules . i2a5f) (case . i2a5a) (or . i2a56) (and . i2a55) (if . i2a54) (let . i2a53) (letrec* . i2a52) (letrec . i2a51) (lambda . i2a4e) (quote . i2a4b) (letrec-syntax . i2a49) (let-syntax . i2a48) (set! . i2a47) (begin . i2a45) (define-syntax . i2a43) (define . i2a42)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2df2 '(rnrs lists) '(6) '() '() '() '((remove . i2c3f) (remv . i2c3e) (remp . i2c3d) (remq . i2c3c) (partition . i2c3b) (memv . i2c3a) (memq . i2c39) (memp . i2c38) (member . i2c37) (exists . i2c36) (for-all . i2c35) (fold-right . i2c34) (fold-left . i2c33) (find . i2c32) (filter . i2c31) (cons* . i2c30) (assv . i2c2f) (assq . i2c2e) (assp . i2c2d) (assoc . i2c2c)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2df3 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . i2cb6) (call-with-input-file . i2cb5) (write-char . i2cb4) (write . i2cb3) (with-output-to-file . i2cb2) (with-input-from-file . i2cb1) (read-char . i2cb0) (read . i2caf) (peek-char . i2cae) (open-output-file . i2cad) (open-input-file . i2cac) (newline . i2cab) (display . i2caa) (close-output-port . i2ca9) (close-input-port . i2ca8) (eof-object? . i2ca7) (eof-object . i2ca6) (current-error-port . i2ca5) (current-output-port . i2ca4) (current-input-port . i2ca3) (output-port? . i2ca2) (input-port? . i2ca1) (make-i/o-write-error . i2c7d) (make-i/o-read-error . i2c7c) (make-i/o-port-error . i2c7b) (make-i/o-invalid-position-error . i2c7a) (make-i/o-filename-error . i2c79) (make-i/o-file-protection-error . i2c78) (make-i/o-file-is-read-only-error . i2c77) (make-i/o-file-does-not-exist-error . i2c76) (make-i/o-file-already-exists-error . i2c75) (make-i/o-error . i2c74) (i/o-write-error? . i2c68) (i/o-read-error? . i2c67) (i/o-port-error? . i2c66) (i/o-invalid-position-error? . i2c65) (i/o-filename-error? . i2c64) (i/o-file-protection-error? . i2c63) (i/o-file-is-read-only-error? . i2c62) (i/o-file-does-not-exist-error? . i2c61) (i/o-file-already-exists-error? . i2c60) (i/o-error? . i2c5f) (i/o-error-position . i2c5e) (i/o-error-port . i2c5d) (i/o-error-filename . i2c5c) (&i/o-port . i2a9f) (&i/o-file-does-not-exist . i2a9e) (&i/o-file-already-exists . i2a9d) (&i/o-file-is-read-only . i2a9c) (&i/o-file-protection . i2a9b) (&i/o-filename . i2a9a) (&i/o-invalid-position . i2a99) (&i/o-write . i2a98) (&i/o-read . i2a97) (&i/o . i2a96)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2df4 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . i2c6b) (utf32->string . i2bf1) (utf16->string . i2bf0) (utf8->string . i2bef) (uint-list->bytevector . i2bee) (u8-list->bytevector . i2bed) (string->utf8 . i2bec) (string->utf32 . i2beb) (string->utf16 . i2bea) (sint-list->bytevector . i2be9) (native-endianness . i2be8) (bytevector? . i2be7) (bytevector=? . i2be6) (bytevector-uint-set! . i2be5) (bytevector-uint-ref . i2be4) (bytevector-u8-set! . i2be3) (bytevector-u8-ref . i2be2) (bytevector-u64-set! . i2be1) (bytevector-u64-ref . i2be0) (bytevector-u64-native-set! . i2bdf) (bytevector-u64-native-ref . i2bde) (bytevector-u32-set! . i2bdd) (bytevector-u32-ref . i2bdc) (bytevector-u32-native-set! . i2bdb) (bytevector-u32-native-ref . i2bda) (bytevector-u16-set! . i2bd9) (bytevector-u16-ref . i2bd8) (bytevector-u16-native-set! . i2bd7) (bytevector-u16-native-ref . i2bd6) (bytevector-sint-set! . i2bd5) (bytevector-sint-ref . i2bd4) (bytevector-s8-set! . i2bd3) (bytevector-s8-ref . i2bd2) (bytevector-s64-set! . i2bd1) (bytevector-s64-ref . i2bd0) (bytevector-s64-native-set! . i2bcf) (bytevector-s64-native-ref . i2bce) (bytevector-s32-set! . i2bcd) (bytevector-s32-ref . i2bcc) (bytevector-s32-native-set! . i2bcb) (bytevector-s32-native-ref . i2bca) (bytevector-s16-set! . i2bc9) (bytevector-s16-ref . i2bc8) (bytevector-s16-native-set! . i2bc7) (bytevector-s16-native-ref . i2bc6) (bytevector-length . i2bc5) (bytevector-ieee-single-ref . i2bc4) (bytevector-ieee-single-set! . i2bc3) (bytevector-ieee-single-native-set! . i2bc2) (bytevector-ieee-single-native-ref . i2bc1) (bytevector-ieee-double-set! . i2bc0) (bytevector-ieee-double-ref . i2bbf) (bytevector-ieee-double-native-set! . i2bbe) (bytevector-ieee-double-native-ref . i2bbd) (bytevector-fill! . i2bbc) (bytevector-copy! . i2bbb) (bytevector-copy . i2bba) (bytevector->uint-list . i2bb9) (bytevector->u8-list . i2bb8) (bytevector->sint-list . i2bb7) (endianness . i2a6b)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2df5 '(rnrs unicode) '(6) '() '() '() '((string-upcase . i2cfe) (string-titlecase . i2cfd) (string-normalize-nfkd . i2cfc) (string-normalize-nfkc . i2cfb) (string-normalize-nfd . i2cfa) (string-normalize-nfc . i2cf9) (string-foldcase . i2cf8) (string-downcase . i2cf7) (string-ci>? . i2cf6) (string-ci>=? . i2cf5) (string-ci=? . i2cf4) (string-ci<? . i2cf3) (string-ci<=? . i2cf2) (char-whitespace? . i2cf1) (char-upper-case? . i2cf0) (char-title-case? . i2cef) (char-numeric? . i2cee) (char-lower-case? . i2ced) (char-general-category . i2cec) (char-upcase . i2ceb) (char-titlecase . i2cea) (char-foldcase . i2ce9) (char-downcase . i2ce8) (char-ci>? . i2ce7) (char-ci>=? . i2ce6) (char-ci=? . i2ce5) (char-ci<? . i2ce4) (char-ci<=? . i2ce3) (char-alphabetic? . i2ce2)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2df6 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . i2c25) (raise-continuable . i2c24) (raise . i2c23) (guard . i2a77) (else . i2a6f) (=> . i2a6e)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2df7 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . i2b57) (bitwise-reverse-bit-field . i2b56) (bitwise-length . i2b55) (bitwise-if . i2b54) (bitwise-first-bit-set . i2b53) (bitwise-copy-bit-field . i2b52) (bitwise-copy-bit . i2b51) (bitwise-bit-set? . i2b50) (bitwise-bit-field . i2b4f) (bitwise-bit-count . i2b4e) (bitwise-xor . i2b4d) (bitwise-ior . i2b4c) (bitwise-and . i2b4b) (bitwise-not . i2b4a) (bitwise-arithmetic-shift-right . i2b49) (bitwise-arithmetic-shift-left . i2b48) (bitwise-arithmetic-shift . i2b47)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2df8 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . i2b84) (fxxor . i2b83) (fxrotate-bit-field . i2b82) (fxreverse-bit-field . i2b81) (fxpositive? . i2b80) (fxodd? . i2b7f) (fxnot . i2b7e) (fxnegative? . i2b7d) (fxmod0 . i2b7c) (fxmod . i2b7b) (fxmin . i2b7a) (fxmax . i2b79) (fxlength . i2b78) (fxior . i2b77) (fxif . i2b76) (fxfirst-bit-set . i2b75) (fxeven? . i2b74) (fxdiv0-and-mod0 . i2b73) (fxdiv0 . i2b72) (fxdiv-and-mod . i2b71) (fxdiv . i2b70) (fxcopy-bit-field . i2b6f) (fxcopy-bit . i2b6e) (fxbit-set? . i2b6d) (fxbit-field . i2b6c) (fxbit-count . i2b6b) (fxarithmetic-shift-right . i2b6a) (fxarithmetic-shift-left . i2b69) (fxarithmetic-shift . i2b68) (fxand . i2b67) (fx>? . i2b66) (fx>=? . i2b65) (fx=? . i2b64) (fx<? . i2b63) (fx<=? . i2b62) (fx-/carry . i2b61) (fx- . i2b60) (fx+/carry . i2b5f) (fx+ . i2b5e) (fx*/carry . i2b5d) (fx* . i2b5c) (greatest-fixnum . i2b5b) (least-fixnum . i2b5a) (fixnum-width . i2b59) (fixnum? . i2b58)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2df9 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . i2bb6) (no-infinities-violation? . i2bb5) (make-no-nans-violation . i2bb4) (make-no-infinities-violation . i2bb3) (real->flonum . i2bb2) (flzero? . i2bb1) (fltruncate . i2bb0) (fltan . i2baf) (flsqrt . i2bae) (flsin . i2bad) (flround . i2bac) (flpositive? . i2bab) (flonum? . i2baa) (flodd? . i2ba9) (flnumerator . i2ba8) (flnegative? . i2ba7) (flnan? . i2ba6) (flmod0 . i2ba5) (flmod . i2ba4) (flmin . i2ba3) (flmax . i2ba2) (fllog . i2ba1) (flinteger? . i2ba0) (flinfinite? . i2b9f) (flfloor . i2b9e) (flfinite? . i2b9d) (flexpt . i2b9c) (flexp . i2b9b) (fleven? . i2b9a) (fldiv0-and-mod0 . i2b99) (fldiv0 . i2b98) (fldiv-and-mod . i2b97) (fldiv . i2b96) (fldenominator . i2b95) (flcos . i2b94) (flceiling . i2b93) (flatan . i2b92) (flasin . i2b91) (flacos . i2b90) (flabs . i2b8f) (fl>? . i2b8e) (fl>=? . i2b8d) (fl=? . i2b8c) (fl<? . i2b8b) (fl<=? . i2b8a) (fl/ . i2b89) (fl- . i2b88) (fl+ . i2b87) (fl* . i2b86) (fixnum->flonum . i2b85) (&no-nans . i2aa3) (&no-infinities . i2aa2)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2dfa '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . i2ccb) (string-ci-hash . i2cca) (string-hash . i2cc9) (equal-hash . i2cc8) (hashtable-equivalence-function . i2cc7) (make-hashtable . i2cc6) (hashtable-hash-function . i2cc5) (make-eqv-hashtable . i2cc4) (make-eq-hashtable . i2cc3) (hashtable? . i2cc2) (hashtable-update! . i2cc1) (hashtable-size . i2cc0) (hashtable-set! . i2cbf) (hashtable-ref . i2cbe) (hashtable-mutable? . i2cbd) (hashtable-keys . i2cbc) (hashtable-entries . i2cbb) (hashtable-delete! . i2cba) (hashtable-copy . i2cb9) (hashtable-contains? . i2cb8) (hashtable-clear! . i2cb7)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2dfb '(rnrs io ports) '(6) '() '() '() '((eof-object? . i2ca7) (eof-object . i2ca6) (current-error-port . i2ca5) (current-output-port . i2ca4) (current-input-port . i2ca3) (output-port? . i2ca2) (input-port? . i2ca1) (utf-8-codec . i2ca0) (utf-16-codec . i2c9f) (transcoder-error-handling-mode . i2c9e) (transcoder-eol-style . i2c9d) (transcoder-codec . i2c9c) (transcoded-port . i2c9b) (textual-port? . i2c9a) (string->bytevector . i2c99) (standard-output-port . i2c98) (standard-input-port . i2c97) (standard-error-port . i2c96) (set-port-position! . i2c95) (put-u8 . i2c94) (put-string . i2c93) (put-datum . i2c92) (put-char . i2c91) (put-bytevector . i2c90) (port? . i2c8f) (port-transcoder . i2c8e) (port-position . i2c8d) (port-has-set-port-position!? . i2c8c) (port-has-port-position? . i2c8b) (port-eof? . i2c8a) (output-port-buffer-mode . i2c89) (open-string-output-port . i2c88) (open-string-input-port . i2c87) (open-file-output-port . i2c86) (open-file-input/output-port . i2c85) (open-file-input-port . i2c84) (open-bytevector-output-port . i2c83) (open-bytevector-input-port . i2c82) (native-transcoder . i2c81) (native-eol-style . i2c80) (make-transcoder . i2c7f) (latin-1-codec . i2c7e) (make-i/o-write-error . i2c7d) (make-i/o-read-error . i2c7c) (make-i/o-port-error . i2c7b) (make-i/o-invalid-position-error . i2c7a) (make-i/o-filename-error . i2c79) (make-i/o-file-protection-error . i2c78) (make-i/o-file-is-read-only-error . i2c77) (make-i/o-file-does-not-exist-error . i2c76) (make-i/o-file-already-exists-error . i2c75) (make-i/o-error . i2c74) (make-i/o-encoding-error . i2c73) (make-i/o-decoding-error . i2c72) (make-custom-textual-output-port . i2c71) (make-custom-textual-input/output-port . i2c70) (make-custom-textual-input-port . i2c6f) (make-custom-binary-output-port . i2c6e) (make-custom-binary-input/output-port . i2c6d) (make-custom-binary-input-port . i2c6c) (lookahead-u8 . i2c6a) (lookahead-char . i2c69) (i/o-write-error? . i2c68) (i/o-read-error? . i2c67) (i/o-port-error? . i2c66) (i/o-invalid-position-error? . i2c65) (i/o-filename-error? . i2c64) (i/o-file-protection-error? . i2c63) (i/o-file-is-read-only-error? . i2c62) (i/o-file-does-not-exist-error? . i2c61) (i/o-file-already-exists-error? . i2c60) (i/o-error? . i2c5f) (i/o-error-position . i2c5e) (i/o-error-port . i2c5d) (i/o-error-filename . i2c5c) (i/o-encoding-error? . i2c5b) (i/o-encoding-error-char . i2c5a) (i/o-decoding-error? . i2c59) (get-u8 . i2c58) (get-string-n! . i2c57) (get-string-n . i2c56) (get-string-all . i2c55) (get-line . i2c54) (get-datum . i2c53) (get-char . i2c52) (get-bytevector-some . i2c51) (get-bytevector-n! . i2c50) (get-bytevector-n . i2c4f) (get-bytevector-all . i2c4e) (flush-output-port . i2c4d) (close-port . i2c4c) (call-with-string-output-port . i2c2b) (call-with-port . i2c2a) (call-with-bytevector-output-port . i2c29) (bytevector->string . i2c28) (buffer-mode? . i2c27) (binary-port? . i2c26) (&i/o-encoding . i2aa1) (&i/o-decoding . i2aa0) (&i/o-port . i2a9f) (&i/o-file-does-not-exist . i2a9e) (&i/o-file-already-exists . i2a9d) (&i/o-file-is-read-only . i2a9c) (&i/o-file-protection . i2a9b) (&i/o-filename . i2a9a) (&i/o-invalid-position . i2a99) (&i/o-write . i2a98) (&i/o-read . i2a97) (&i/o . i2a96) (error-handling-mode . i2a7b) (file-options . i2a7a) (buffer-mode . i2a79) (eol-style . i2a78)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2dfc '(rnrs enums) '(6) '() '() '() '((make-enumeration . i2c22) (enum-set=? . i2c21) (enum-set-universe . i2c20) (enum-set-union . i2c1f) (enum-set-subset? . i2c1e) (enum-set-projection . i2c1d) (enum-set-member? . i2c1c) (enum-set-intersection . i2c1b) (enum-set-indexer . i2c1a) (enum-set-difference . i2c19) (enum-set-constructor . i2c18) (enum-set-complement . i2c17) (enum-set->list . i2c16) (define-enumeration . i2a86)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2dfd '(rnrs conditions) '(6) '() '() '() '((who-condition? . i2c15) (warning? . i2c14) (violation? . i2c13) (undefined-violation? . i2c12) (syntax-violation? . i2c11) (syntax-violation-subform . i2c10) (syntax-violation-form . i2c0f) (syntax-violation . ie57) (simple-conditions . i2c0e) (serious-condition? . i2c0d) (non-continuable-violation? . i2c0c) (message-condition? . i2c0b) (make-who-condition . i2c0a) (make-warning . i2c09) (make-violation . i2c08) (make-undefined-violation . i2c07) (make-syntax-violation . i2c06) (make-serious-condition . i2c05) (make-non-continuable-violation . i2c04) (make-message-condition . i2c03) (make-lexical-violation . i2c02) (make-irritants-condition . i2c01) (make-implementation-restriction-violation . i2c00) (make-error . i2bff) (make-assertion-violation . i2bfe) (lexical-violation? . i2bfd) (irritants-condition? . i2bfc) (implementation-restriction-violation? . i2bfb) (error? . i2bfa) (condition-who . i2bf9) (condition-predicate . i2bf8) (condition-message . i2bf7) (condition-irritants . i2bf6) (condition-accessor . i2bf5) (condition . i2bf4) (assertion-violation? . i2bf3) (condition? . i2bf2) (&undefined . i2a95) (&syntax . i2a94) (&lexical . i2a93) (&implementation-restriction . i2a92) (&non-continuable . i2a91) (&who . i2a90) (&irritants . i2a8f) (&assertion . i2a8e) (&violation . i2a8d) (&error . i2a8c) (&serious . i2a8b) (&warning . i2a8a) (&message . i2a89) (&condition . i2a88) (define-condition-type . i2a87)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2dfe '(rnrs records inspection) '(6) '() '() '() '((record? . i2cda) (record-type-uid . i2cd9) (record-type-sealed? . i2cd8) (record-type-parent . i2cd7) (record-type-opaque? . i2cd6) (record-type-name . i2cd5) (record-type-generative? . i2cd4) (record-type-field-names . i2cd3) (record-rtd . i2cd2) (record-field-mutable? . i2cd1)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2dff '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . i2ce1) (record-predicate . i2ce0) (record-mutator . i2cdf) (record-constructor . i2cde) (record-accessor . i2cdd) (make-record-type-descriptor . i2cdc) (make-record-constructor-descriptor . i2cdb)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2e00 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . i2a85) (parent-rtd . i2a84) (nongenerative . i2a83) (opaque . i2a82) (sealed . i2a81) (protocol . i2a80) (parent . i2a7f) (immutable . i2a7e) (mutable . i2a7d) (fields . i2a7c) (record-constructor-descriptor . i2a5c) (record-type-descriptor . i2a5b)) '() values values '#f '#f '#t '#f) (i98b@i7d7@install-library 'i2e01 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . i2de1) (&no-nans-rtd . i2de0) (&no-infinities-rcd . i2ddf) (&no-infinities-rtd . i2dde) (&i/o-encoding-rcd . i2ddd) (&i/o-encoding-rtd . i2ddc) (&i/o-decoding-rcd . i2ddb) (&i/o-decoding-rtd . i2dda) (&i/o-port-rcd . i2dd9) (&i/o-port-rtd . i2dd8) (&i/o-file-does-not-exist-rcd . i2dd7) (&i/o-file-does-not-exist-rtd . i2dd6) (&i/o-file-already-exists-rcd . i2dd5) (&i/o-file-already-exists-rtd . i2dd4) (&i/o-file-is-read-only-rcd . i2dd3) (&i/o-file-is-read-only-rtd . i2dd2) (&i/o-file-protection-rcd . i2dd1) (&i/o-file-protection-rtd . i2dd0) (&i/o-filename-rcd . i2dcf) (&i/o-filename-rtd . i2dce) (&i/o-invalid-position-rcd . i2dcd) (&i/o-invalid-position-rtd . i2dcc) (&i/o-write-rcd . i2dcb) (&i/o-write-rtd . i2dca) (&i/o-read-rcd . i2dc9) (&i/o-read-rtd . i2dc8) (&i/o-rcd . i2dc7) (&i/o-rtd . i2dc6) (&undefined-rcd . i2dc5) (&undefined-rtd . i2dc4) (&syntax-rcd . i2dc3) (&syntax-rtd . i2dc2) (&lexical-rcd . i2dc1) (&lexical-rtd . i2dc0) (&implementation-restriction-rcd . i2dbf) (&implementation-restriction-rtd . i2dbe) (&non-continuable-rcd . i2dbd) (&non-continuable-rtd . i2dbc) (&who-rcd . i2dbb) (&who-rtd . i2dba) (&irritants-rcd . i2db9) (&irritants-rtd . i2db8) (&assertion-rcd . i2db7) (&assertion-rtd . i2db6) (&violation-rcd . i2db5) (&violation-rtd . i2db4) (&error-rcd . i2db3) (&error-rtd . i2db2) (&serious-rcd . i2db1) (&serious-rtd . i2db0) (&warning-rcd . i2daf) (&warning-rtd . i2dae) (&message-rcd . i2dad) (&message-rtd . i2dac) (&condition-rcd . i2dab) (&condition-rtd . i2daa) (syntax-error . ie53) (syntax-dispatch . id77) (pretty-print . i2da9) (eval-core . i2da8) (set-symbol-value! . i2da7) (symbol-value . i2da6) (gensym . i2da5) (void . i2da4) (load . i28e0) (interaction-environment . ie65) (char-ready? . i2da3) (regexp? . i2da2) (read-line . i2da1) (gensym-prefix-set! . i2da0) (ungensym . i2d9f) (alist->eq-hash-table . i2d9e) (assoc-ref . i2d9d) (print . i2d9c) (format . i2d9b) (host-os . i2d9a) (library-path . i7b6) (standard-library-path . i2d99) (file-newer? . i2d98) (stat-mtime . i2d97) (write-to-file . i2d96) (file->list . i2d95) (file->string . i2d94) (digit->integer . i2d93) (call-with-string-input-port . i2d92) (call-with-string-io . i2d91) (string-split . i2d90) (bytevector-for-each . i2d8f) (string->regexp . i2d8e) (rxmatch . i2d8d) (regexp-replace-all . i2d8c) (hashtable-for-each . i2d8b) (mosh-cache-dir . i5a0) (call-process . i2d8a) (local-tz-offset . i2d89) (microseconds . i2d88) (directory-list . i2d87) (set-current-directory! . i2d86) (expand-path . i2d85) (current-directory . i2d84) (%spawn . i2d83) (%waitpid . i2d82) (simple-struct-name . i2d81) (simple-struct-set! . i2d80) (simple-struct-ref . i2d7f) (make-simple-struct . i2d7e) (simple-struct? . i2d7d) (pointer-ref-c-int64 . i2d7c) (pointer-ref-c-int32 . i2d7b) (pointer-ref-c-int16 . i2d7a) (pointer-ref-c-int8 . i2d79) (pointer-ref-c-uint64 . i2d78) (pointer-ref-c-uint32 . i2d77) (pointer-ref-c-uint16 . i2d76) (pointer-ref-c-uint8 . i2d75) (pointer-set-c-uint64! . i2d74) (pointer-set-c-uint32! . i2d73) (pointer-set-c-uint16! . i2d72) (pointer-set-c-uint8! . i2d71) (pointer-set-c-int64! . i2d70) (pointer-set-c-int32! . i2d6f) (pointer-set-c-int16! . i2d6e) (pointer-set-c-int8! . i2d6d) (pointer-set-c-pointer! . i2d6c) (pointer-set-c-double! . i2d6b) (pointer-set-c-float! . i2d6a) (pointer-set-c-long-long! . i2d69) (pointer-set-c-long! . i2d68) (pointer-set-c-int! . i2d67) (pointer-set-c-short! . i2d66) (pointer-set-c-char! . i2d65) (pointer-ref-c-pointer . i2d64) (pointer-ref-c-double . i2d63) (pointer-ref-c-float . i2d62) (pointer-ref-c-unsigned-long-long . i2d61) (pointer-ref-c-signed-long-long . i2d60) (pointer-ref-c-unsigned-long . i2d5f) (pointer-ref-c-signed-long . i2d5e) (pointer-ref-c-unsigned-int . i2d5d) (pointer-ref-c-signed-int . i2d5c) (pointer-ref-c-unsigned-short . i2d5b) (pointer-ref-c-signed-short . i2d5a) (pointer-ref-c-unsigned-char . i2d59) (pointer-ref-c-signed-char . i2d58) (pointer->integer . i2d57) (integer->pointer . i2d56) (pointer? . i2d55) (shared-errno . i2d54) (%ffi-free-c-callback-trampoline . i2d53) (%ffi-make-c-callback-trampoline . i2d52) (%ffi-free . i2d51) (%ffi-malloc . i2d50) (%ffi-supported? . i2d4f) (%ffi-pointer->string . i2d4e) (%ffi-call . i2d4d) (%ffi-lookup . i2d4c) (%ffi-open . i2d4b) (null-terminated-utf8->string . i2d4a) (null-terminated-bytevector->string . i2d49) (%exec . i2d48) (%fork . i2d47) (%pipe . i2d46) (p . i2d45) (open-output-string . i2d44) (get-output-string . i2d43) (file-stat-ctime . i2d42) (file-stat-atime . i2d41) (file-stat-mtime . i2d40) (file-size-in-bytes . i2d3f) (file-writable? . i2d3e) (file-executable? . i2d3d) (file-readable? . i2d3c) (file-regular? . i2d3b) (file-symbolic-link? . i2d3a) (file-directory? . i2d39) (create-symbolic-link . i2d38) (rename-file . i2d37) (delete-directory . i2d36) (create-directory . i2d35) (create-mosh-cache-dir . i2d34) (get-environment-variables . i2d33) (current-exception-handler . i2d32) (get-environment-variable . i2d31) (join-wraps . i2d30) (id->real-label . i2d2f) (same-marks? . i2d2e) (same-marks*? . i2d2d) (get-timeofday . i2d2c) (get-command-line . i2d2b) (sys-display . i2d2a) (whereis . i2d29) (register . i2d28) (vm-join! . i2d27) (vm-set-value! . i2d26) (vm? . i2d25) (main-vm? . i2d24) (vm-eval . i2d23) (vm-self . i2d22) (vm-start! . i2d21) (make-vm . i2d20) (mutex-try-lock! . i2d1f) (mutex-unlock! . i2d1e) (mutex-lock! . i2d1d) (mutex? . i2d1c) (make-mutex . i2d1b) (condition-variable-notify-all! . i2d1a) (condition-variable-notify! . i2d19) (condition-variable-wait! . i2d18) (make-condition-variable . i2d17) (write/ss . i2d16) (mosh-executable-path . i2d15) (make-file-options . i2d14) (source-info . i2d13) (make-compiler-instruction . i2d12) (make-instruction . i2d11) (set-source-info! . i2d10) (bignum? . i2d0f) (fast-equal? . i2d0e) (fasl-read . i2d0d) (fasl-write . i2d0c) (time-usage . i2d0b) (os-constant . i2d0a) (disasm . i2d09) (make-parameter . i59e) (socket-port . i2d08) (socket-shutdown . i2d07) (socket-close . i2d06) (socket-send . i2d05) (socket-recv! . i2d04) (socket-recv . i2d03) (make-server-socket . i2d02) (make-client-socket . i2d01) (socket-accept . i2d00) (socket? . i2cff) (string-upcase . i2cfe) (string-titlecase . i2cfd) (string-normalize-nfkd . i2cfc) (string-normalize-nfkc . i2cfb) (string-normalize-nfd . i2cfa) (string-normalize-nfc . i2cf9) (string-foldcase . i2cf8) (string-downcase . i2cf7) (string-ci>? . i2cf6) (string-ci>=? . i2cf5) (string-ci=? . i2cf4) (string-ci<? . i2cf3) (string-ci<=? . i2cf2) (char-whitespace? . i2cf1) (char-upper-case? . i2cf0) (char-title-case? . i2cef) (char-numeric? . i2cee) (char-lower-case? . i2ced) (char-general-category . i2cec) (char-upcase . i2ceb) (char-titlecase . i2cea) (char-foldcase . i2ce9) (char-downcase . i2ce8) (char-ci>? . i2ce7) (char-ci>=? . i2ce6) (char-ci=? . i2ce5) (char-ci<? . i2ce4) (char-ci<=? . i2ce3) (char-alphabetic? . i2ce2) (make-variable-transformer . iba2) (identifier? . ie59) (generate-temporaries . ie45) (free-identifier=? . ie47) (syntax->datum . ie5d) (datum->syntax . ie5b) (bound-identifier=? . ie49) (record-type-descriptor? . i2ce1) (record-predicate . i2ce0) (record-mutator . i2cdf) (record-constructor . i2cde) (record-accessor . i2cdd) (make-record-type-descriptor . i2cdc) (make-record-constructor-descriptor . i2cdb) (record? . i2cda) (record-type-uid . i2cd9) (record-type-sealed? . i2cd8) (record-type-parent . i2cd7) (record-type-opaque? . i2cd6) (record-type-name . i2cd5) (record-type-generative? . i2cd4) (record-type-field-names . i2cd3) (record-rtd . i2cd2) (record-field-mutable? . i2cd1) (delete-file . i2cd0) (file-exists? . i2ccf) (vector-sort! . i2cce) (vector-sort . i2ccd) (list-sort . i2ccc) (symbol-hash . i2ccb) (string-ci-hash . i2cca) (string-hash . i2cc9) (equal-hash . i2cc8) (hashtable-equivalence-function . i2cc7) (make-hashtable . i2cc6) (hashtable-hash-function . i2cc5) (make-eqv-hashtable . i2cc4) (make-eq-hashtable . i2cc3) (hashtable? . i2cc2) (hashtable-update! . i2cc1) (hashtable-size . i2cc0) (hashtable-set! . i2cbf) (hashtable-ref . i2cbe) (hashtable-mutable? . i2cbd) (hashtable-keys . i2cbc) (hashtable-entries . i2cbb) (hashtable-delete! . i2cba) (hashtable-copy . i2cb9) (hashtable-contains? . i2cb8) (hashtable-clear! . i2cb7) (call-with-output-file . i2cb6) (call-with-input-file . i2cb5) (write-char . i2cb4) (write . i2cb3) (with-output-to-file . i2cb2) (with-input-from-file . i2cb1) (read-char . i2cb0) (read . i2caf) (peek-char . i2cae) (open-output-file . i2cad) (open-input-file . i2cac) (newline . i2cab) (display . i2caa) (close-output-port . i2ca9) (close-input-port . i2ca8) (eof-object? . i2ca7) (eof-object . i2ca6) (current-error-port . i2ca5) (current-output-port . i2ca4) (current-input-port . i2ca3) (output-port? . i2ca2) (input-port? . i2ca1) (utf-8-codec . i2ca0) (utf-16-codec . i2c9f) (transcoder-error-handling-mode . i2c9e) (transcoder-eol-style . i2c9d) (transcoder-codec . i2c9c) (transcoded-port . i2c9b) (textual-port? . i2c9a) (string->bytevector . i2c99) (standard-output-port . i2c98) (standard-input-port . i2c97) (standard-error-port . i2c96) (set-port-position! . i2c95) (put-u8 . i2c94) (put-string . i2c93) (put-datum . i2c92) (put-char . i2c91) (put-bytevector . i2c90) (port? . i2c8f) (port-transcoder . i2c8e) (port-position . i2c8d) (port-has-set-port-position!? . i2c8c) (port-has-port-position? . i2c8b) (port-eof? . i2c8a) (output-port-buffer-mode . i2c89) (open-string-output-port . i2c88) (open-string-input-port . i2c87) (open-file-output-port . i2c86) (open-file-input/output-port . i2c85) (open-file-input-port . i2c84) (open-bytevector-output-port . i2c83) (open-bytevector-input-port . i2c82) (native-transcoder . i2c81) (native-eol-style . i2c80) (make-transcoder . i2c7f) (latin-1-codec . i2c7e) (make-i/o-write-error . i2c7d) (make-i/o-read-error . i2c7c) (make-i/o-port-error . i2c7b) (make-i/o-invalid-position-error . i2c7a) (make-i/o-filename-error . i2c79) (make-i/o-file-protection-error . i2c78) (make-i/o-file-is-read-only-error . i2c77) (make-i/o-file-does-not-exist-error . i2c76) (make-i/o-file-already-exists-error . i2c75) (make-i/o-error . i2c74) (make-i/o-encoding-error . i2c73) (make-i/o-decoding-error . i2c72) (make-custom-textual-output-port . i2c71) (make-custom-textual-input/output-port . i2c70) (make-custom-textual-input-port . i2c6f) (make-custom-binary-output-port . i2c6e) (make-custom-binary-input/output-port . i2c6d) (make-custom-binary-input-port . i2c6c) (make-bytevector . i2c6b) (lookahead-u8 . i2c6a) (lookahead-char . i2c69) (i/o-write-error? . i2c68) (i/o-read-error? . i2c67) (i/o-port-error? . i2c66) (i/o-invalid-position-error? . i2c65) (i/o-filename-error? . i2c64) (i/o-file-protection-error? . i2c63) (i/o-file-is-read-only-error? . i2c62) (i/o-file-does-not-exist-error? . i2c61) (i/o-file-already-exists-error? . i2c60) (i/o-error? . i2c5f) (i/o-error-position . i2c5e) (i/o-error-port . i2c5d) (i/o-error-filename . i2c5c) (i/o-encoding-error? . i2c5b) (i/o-encoding-error-char . i2c5a) (i/o-decoding-error? . i2c59) (get-u8 . i2c58) (get-string-n! . i2c57) (get-string-n . i2c56) (get-string-all . i2c55) (get-line . i2c54) (get-datum . i2c53) (get-char . i2c52) (get-bytevector-some . i2c51) (get-bytevector-n! . i2c50) (get-bytevector-n . i2c4f) (get-bytevector-all . i2c4e) (flush-output-port . i2c4d) (close-port . i2c4c) (scheme-report-environment . ie33) (quotient . i2c4b) (null-environment . ie31) (remainder . i2c4a) (modulo . i2c49) (inexact->exact . i2c48) (force . i2c47) (exact->inexact . i2c46) (make-promise . i2c45) (exit . i2c44) (command-line . i28da) (string-fill! . i2c43) (string-set! . i2c42) (set-cdr! . i2c41) (set-car! . i2c40) (remove . i2c3f) (remv . i2c3e) (remp . i2c3d) (remq . i2c3c) (partition . i2c3b) (memv . i2c3a) (memq . i2c39) (memp . i2c38) (member . i2c37) (exists . i2c36) (for-all . i2c35) (fold-right . i2c34) (fold-left . i2c33) (find . i2c32) (filter . i2c31) (cons* . i2c30) (assv . i2c2f) (assq . i2c2e) (assp . i2c2d) (assoc . i2c2c) (call-with-string-output-port . i2c2b) (call-with-port . i2c2a) (call-with-bytevector-output-port . i2c29) (bytevector->string . i2c28) (buffer-mode? . i2c27) (binary-port? . i2c26) (with-exception-handler . i2c25) (raise-continuable . i2c24) (raise . i2c23) (eval . ie37) (environment . ie2f) (make-enumeration . i2c22) (enum-set=? . i2c21) (enum-set-universe . i2c20) (enum-set-union . i2c1f) (enum-set-subset? . i2c1e) (enum-set-projection . i2c1d) (enum-set-member? . i2c1c) (enum-set-intersection . i2c1b) (enum-set-indexer . i2c1a) (enum-set-difference . i2c19) (enum-set-constructor . i2c18) (enum-set-complement . i2c17) (enum-set->list . i2c16) (who-condition? . i2c15) (warning? . i2c14) (violation? . i2c13) (undefined-violation? . i2c12) (syntax-violation? . i2c11) (syntax-violation-subform . i2c10) (syntax-violation-form . i2c0f) (syntax-violation . ie57) (simple-conditions . i2c0e) (serious-condition? . i2c0d) (non-continuable-violation? . i2c0c) (message-condition? . i2c0b) (make-who-condition . i2c0a) (make-warning . i2c09) (make-violation . i2c08) (make-undefined-violation . i2c07) (make-syntax-violation . i2c06) (make-serious-condition . i2c05) (make-non-continuable-violation . i2c04) (make-message-condition . i2c03) (make-lexical-violation . i2c02) (make-irritants-condition . i2c01) (make-implementation-restriction-violation . i2c00) (make-error . i2bff) (make-assertion-violation . i2bfe) (lexical-violation? . i2bfd) (irritants-condition? . i2bfc) (implementation-restriction-violation? . i2bfb) (error? . i2bfa) (condition-who . i2bf9) (condition-predicate . i2bf8) (condition-message . i2bf7) (condition-irritants . i2bf6) (condition-accessor . i2bf5) (condition . i2bf4) (assertion-violation? . i2bf3) (condition? . i2bf2) (utf32->string . i2bf1) (utf16->string . i2bf0) (utf8->string . i2bef) (uint-list->bytevector . i2bee) (u8-list->bytevector . i2bed) (string->utf8 . i2bec) (string->utf32 . i2beb) (string->utf16 . i2bea) (sint-list->bytevector . i2be9) (native-endianness . i2be8) (bytevector? . i2be7) (bytevector=? . i2be6) (bytevector-uint-set! . i2be5) (bytevector-uint-ref . i2be4) (bytevector-u8-set! . i2be3) (bytevector-u8-ref . i2be2) (bytevector-u64-set! . i2be1) (bytevector-u64-ref . i2be0) (bytevector-u64-native-set! . i2bdf) (bytevector-u64-native-ref . i2bde) (bytevector-u32-set! . i2bdd) (bytevector-u32-ref . i2bdc) (bytevector-u32-native-set! . i2bdb) (bytevector-u32-native-ref . i2bda) (bytevector-u16-set! . i2bd9) (bytevector-u16-ref . i2bd8) (bytevector-u16-native-set! . i2bd7) (bytevector-u16-native-ref . i2bd6) (bytevector-sint-set! . i2bd5) (bytevector-sint-ref . i2bd4) (bytevector-s8-set! . i2bd3) (bytevector-s8-ref . i2bd2) (bytevector-s64-set! . i2bd1) (bytevector-s64-ref . i2bd0) (bytevector-s64-native-set! . i2bcf) (bytevector-s64-native-ref . i2bce) (bytevector-s32-set! . i2bcd) (bytevector-s32-ref . i2bcc) (bytevector-s32-native-set! . i2bcb) (bytevector-s32-native-ref . i2bca) (bytevector-s16-set! . i2bc9) (bytevector-s16-ref . i2bc8) (bytevector-s16-native-set! . i2bc7) (bytevector-s16-native-ref . i2bc6) (bytevector-length . i2bc5) (bytevector-ieee-single-ref . i2bc4) (bytevector-ieee-single-set! . i2bc3) (bytevector-ieee-single-native-set! . i2bc2) (bytevector-ieee-single-native-ref . i2bc1) (bytevector-ieee-double-set! . i2bc0) (bytevector-ieee-double-ref . i2bbf) (bytevector-ieee-double-native-set! . i2bbe) (bytevector-ieee-double-native-ref . i2bbd) (bytevector-fill! . i2bbc) (bytevector-copy! . i2bbb) (bytevector-copy . i2bba) (bytevector->uint-list . i2bb9) (bytevector->u8-list . i2bb8) (bytevector->sint-list . i2bb7) (no-nans-violation? . i2bb6) (no-infinities-violation? . i2bb5) (make-no-nans-violation . i2bb4) (make-no-infinities-violation . i2bb3) (real->flonum . i2bb2) (flzero? . i2bb1) (fltruncate . i2bb0) (fltan . i2baf) (flsqrt . i2bae) (flsin . i2bad) (flround . i2bac) (flpositive? . i2bab) (flonum? . i2baa) (flodd? . i2ba9) (flnumerator . i2ba8) (flnegative? . i2ba7) (flnan? . i2ba6) (flmod0 . i2ba5) (flmod . i2ba4) (flmin . i2ba3) (flmax . i2ba2) (fllog . i2ba1) (flinteger? . i2ba0) (flinfinite? . i2b9f) (flfloor . i2b9e) (flfinite? . i2b9d) (flexpt . i2b9c) (flexp . i2b9b) (fleven? . i2b9a) (fldiv0-and-mod0 . i2b99) (fldiv0 . i2b98) (fldiv-and-mod . i2b97) (fldiv . i2b96) (fldenominator . i2b95) (flcos . i2b94) (flceiling . i2b93) (flatan . i2b92) (flasin . i2b91) (flacos . i2b90) (flabs . i2b8f) (fl>? . i2b8e) (fl>=? . i2b8d) (fl=? . i2b8c) (fl<? . i2b8b) (fl<=? . i2b8a) (fl/ . i2b89) (fl- . i2b88) (fl+ . i2b87) (fl* . i2b86) (fixnum->flonum . i2b85) (fxzero? . i2b84) (fxxor . i2b83) (fxrotate-bit-field . i2b82) (fxreverse-bit-field . i2b81) (fxpositive? . i2b80) (fxodd? . i2b7f) (fxnot . i2b7e) (fxnegative? . i2b7d) (fxmod0 . i2b7c) (fxmod . i2b7b) (fxmin . i2b7a) (fxmax . i2b79) (fxlength . i2b78) (fxior . i2b77) (fxif . i2b76) (fxfirst-bit-set . i2b75) (fxeven? . i2b74) (fxdiv0-and-mod0 . i2b73) (fxdiv0 . i2b72) (fxdiv-and-mod . i2b71) (fxdiv . i2b70) (fxcopy-bit-field . i2b6f) (fxcopy-bit . i2b6e) (fxbit-set? . i2b6d) (fxbit-field . i2b6c) (fxbit-count . i2b6b) (fxarithmetic-shift-right . i2b6a) (fxarithmetic-shift-left . i2b69) (fxarithmetic-shift . i2b68) (fxand . i2b67) (fx>? . i2b66) (fx>=? . i2b65) (fx=? . i2b64) (fx<? . i2b63) (fx<=? . i2b62) (fx-/carry . i2b61) (fx- . i2b60) (fx+/carry . i2b5f) (fx+ . i2b5e) (fx*/carry . i2b5d) (fx* . i2b5c) (greatest-fixnum . i2b5b) (least-fixnum . i2b5a) (fixnum-width . i2b59) (fixnum? . i2b58) (bitwise-rotate-bit-field . i2b57) (bitwise-reverse-bit-field . i2b56) (bitwise-length . i2b55) (bitwise-if . i2b54) (bitwise-first-bit-set . i2b53) (bitwise-copy-bit-field . i2b52) (bitwise-copy-bit . i2b51) (bitwise-bit-set? . i2b50) (bitwise-bit-field . i2b4f) (bitwise-bit-count . i2b4e) (bitwise-xor . i2b4d) (bitwise-ior . i2b4c) (bitwise-and . i2b4b) (bitwise-not . i2b4a) (bitwise-arithmetic-shift-right . i2b49) (bitwise-arithmetic-shift-left . i2b48) (bitwise-arithmetic-shift . i2b47) (zero? . i2b46) (vector? . i2b45) (vector-set! . i2b44) (vector-ref . i2b43) (vector-map . i2b42) (vector-length . i2b41) (vector-for-each . i2b40) (vector-fill! . i2b3f) (vector->list . i2b3e) (vector . i2b3d) (values . i2b3c) (truncate . i2b3b) (tan . i2b3a) (symbol? . i2b39) (symbol=? . i2b38) (symbol->string . i2b37) (substring . i2b36) (string? . i2b35) (string>? . i2b34) (string>=? . i2b33) (string=? . i2b32) (string<? . i2b31) (string<=? . i2b30) (string-ref . i2b2f) (string-length . i2b2e) (string-for-each . i2b2d) (string-copy . i2b2c) (string-append . i2b2b) (string->symbol . i2b2a) (string->number . i2b29) (string->list . i2b28) (string . i2b27) (sqrt . i2b26) (sin . i2b25) (round . i2b24) (reverse . i2b23) (real? . i2b22) (real-valued? . i2b21) (real-part . i2b20) (rationalize . i2b1f) (rational? . i2b1e) (rational-valued? . i2b1d) (procedure? . i2b1c) (positive? . i2b1b) (pair? . i2b1a) (odd? . i2b19) (numerator . i2b18) (number? . i2b17) (number->string . i2b16) (null? . i2b15) (not . i2b14) (negative? . i2b13) (nan? . i2b12) (min . i2b11) (max . i2b10) (map . i2b0f) (make-vector . i2b0e) (make-string . i2b0d) (make-rectangular . i2b0c) (make-polar . i2b0b) (magnitude . i2b0a) (log . i2b09) (list? . i2b08) (list-tail . i2b07) (list-ref . i2b06) (list->vector . i2b05) (list->string . i2b04) (list . i2b03) (length . i2b02) (lcm . i2b01) (integer? . i2b00) (integer-valued? . i2aff) (integer->char . i2afe) (infinite? . i2afd) (inexact? . i2afc) (inexact . i2afb) (imag-part . i2afa) (gcd . i2af9) (for-each . i2af8) (floor . i2af7) (finite? . i2af6) (expt . i2af5) (exp . i2af4) (exact? . i2af3) (exact-integer-sqrt . i2af2) (exact . i2af1) (even? . i2af0) (error . i2aef) (eqv? . i2aee) (equal? . i2aed) (eq? . i2aec) (dynamic-wind . i2aeb) (div0-and-mod0 . i2aea) (mod0 . i2ae9) (div0 . i2ae8) (div-and-mod . i2ae7) (mod . i2ae6) (div . i2ae5) (denominator . i2ae4) (cos . i2ae3) (cons . i2ae2) (complex? . i2ae1) (char? . i2ae0) (char>? . i2adf) (char>=? . i2ade) (char=? . i2add) (char<? . i2adc) (char<=? . i2adb) (char->integer . i2ada) (ceiling . i2ad9) (call-with-values . i2ad8) (call/cc . i2ad7) (call-with-current-continuation . i2ad6) (cddddr . i2ad5) (cdddar . i2ad4) (cddadr . i2ad3) (cddaar . i2ad2) (cdaddr . i2ad1) (cdadar . i2ad0) (cdaadr . i2acf) (cdaaar . i2ace) (cadddr . i2acd) (caddar . i2acc) (cadadr . i2acb) (cadaar . i2aca) (caaddr . i2ac9) (caadar . i2ac8) (caaadr . i2ac7) (caaaar . i2ac6) (cdddr . i2ac5) (cddar . i2ac4) (cdadr . i2ac3) (cdaar . i2ac2) (caddr . i2ac1) (cadar . i2ac0) (caadr . i2abf) (caaar . i2abe) (cddr . i2abd) (cdar . i2abc) (cadr . i2abb) (caar . i2aba) (cdr . i2ab9) (car . i2ab8) (boolean? . i2ab7) (boolean=? . i2ab6) (atan . i2ab5) (assertion-violation . i2ab4) (assertion-error . ie51) (asin . i2ab3) (apply . i2ab2) (append . i2ab1) (angle . i2ab0) (acos . i2aaf) (abs . i2aae) (/ . i2aad) (* . i2aac) (- . i2aab) (+ . i2aaa) (>= . i2aa9) (> . i2aa8) (= . i2aa7) (<= . i2aa6) (< . i2aa5) (library . i2aa4) (&no-nans . i2aa3) (&no-infinities . i2aa2) (&i/o-encoding . i2aa1) (&i/o-decoding . i2aa0) (&i/o-port . i2a9f) (&i/o-file-does-not-exist . i2a9e) (&i/o-file-already-exists . i2a9d) (&i/o-file-is-read-only . i2a9c) (&i/o-file-protection . i2a9b) (&i/o-filename . i2a9a) (&i/o-invalid-position . i2a99) (&i/o-write . i2a98) (&i/o-read . i2a97) (&i/o . i2a96) (&undefined . i2a95) (&syntax . i2a94) (&lexical . i2a93) (&implementation-restriction . i2a92) (&non-continuable . i2a91) (&who . i2a90) (&irritants . i2a8f) (&assertion . i2a8e) (&violation . i2a8d) (&error . i2a8c) (&serious . i2a8b) (&warning . i2a8a) (&message . i2a89) (&condition . i2a88) (define-condition-type . i2a87) (define-enumeration . i2a86) (define-record-type . i2a85) (parent-rtd . i2a84) (nongenerative . i2a83) (opaque . i2a82) (sealed . i2a81) (protocol . i2a80) (parent . i2a7f) (immutable . i2a7e) (mutable . i2a7d) (fields . i2a7c) (error-handling-mode . i2a7b) (file-options . i2a7a) (buffer-mode . i2a79) (eol-style . i2a78) (guard . i2a77) (trace-define . i2a76) (trace-lambda . i2a75) (unsyntax-splicing . i2a74) (unsyntax . i2a73) (unquote-splicing . i2a72) (unquote . i2a71) (_ . i2a70) (else . i2a6f) (=> . i2a6e) (... . i2a6d) (assert . i2a6c) (endianness . i2a6b) (delay . i2a6a) (time . i2a69) (do . i2a68) (cond . i2a67) (let* . i2a66) (let*-values . i2a65) (let-values . i2a64) (identifier-syntax . i2a63) (with-syntax . i2a62) (quasisyntax . i2a61) (quasiquote . i2a60) (syntax-rules . i2a5f) (include . i2a5e) (define-struct . i2a5d) (record-constructor-descriptor . i2a5c) (record-type-descriptor . i2a5b) (case . i2a5a) (parameterize . i2a59) (unless . i2a58) (when . i2a57) (or . i2a56) (and . i2a55) (if . i2a54) (let . i2a53) (letrec* . i2a52) (letrec . i2a51) (type-descriptor . i2a50) (case-lambda . i2a4f) (lambda . i2a4e) (syntax . i2a4d) (syntax-case . i2a4c) (quote . i2a4b) (foreign-call . i2a4a) (letrec-syntax . i2a49) (let-syntax . i2a48) (set! . i2a47) (import . i2a46) (begin . i2a45) (module . i2a44) (define-syntax . i2a43) (define . i2a42)) '((i2de1 core-prim . &no-nans-rcd) (i2de0 core-prim . &no-nans-rtd) (i2ddf core-prim . &no-infinities-rcd) (i2dde core-prim . &no-infinities-rtd) (i2ddd core-prim . &i/o-encoding-rcd) (i2ddc core-prim . &i/o-encoding-rtd) (i2ddb core-prim . &i/o-decoding-rcd) (i2dda core-prim . &i/o-decoding-rtd) (i2dd9 core-prim . &i/o-port-rcd) (i2dd8 core-prim . &i/o-port-rtd) (i2dd7 core-prim . &i/o-file-does-not-exist-rcd) (i2dd6 core-prim . &i/o-file-does-not-exist-rtd) (i2dd5 core-prim . &i/o-file-already-exists-rcd) (i2dd4 core-prim . &i/o-file-already-exists-rtd) (i2dd3 core-prim . &i/o-file-is-read-only-rcd) (i2dd2 core-prim . &i/o-file-is-read-only-rtd) (i2dd1 core-prim . &i/o-file-protection-rcd) (i2dd0 core-prim . &i/o-file-protection-rtd) (i2dcf core-prim . &i/o-filename-rcd) (i2dce core-prim . &i/o-filename-rtd) (i2dcd core-prim . &i/o-invalid-position-rcd) (i2dcc core-prim . &i/o-invalid-position-rtd) (i2dcb core-prim . &i/o-write-rcd) (i2dca core-prim . &i/o-write-rtd) (i2dc9 core-prim . &i/o-read-rcd) (i2dc8 core-prim . &i/o-read-rtd) (i2dc7 core-prim . &i/o-rcd) (i2dc6 core-prim . &i/o-rtd) (i2dc5 core-prim . &undefined-rcd) (i2dc4 core-prim . &undefined-rtd) (i2dc3 core-prim . &syntax-rcd) (i2dc2 core-prim . &syntax-rtd) (i2dc1 core-prim . &lexical-rcd) (i2dc0 core-prim . &lexical-rtd) (i2dbf core-prim . &implementation-restriction-rcd) (i2dbe core-prim . &implementation-restriction-rtd) (i2dbd core-prim . &non-continuable-rcd) (i2dbc core-prim . &non-continuable-rtd) (i2dbb core-prim . &who-rcd) (i2dba core-prim . &who-rtd) (i2db9 core-prim . &irritants-rcd) (i2db8 core-prim . &irritants-rtd) (i2db7 core-prim . &assertion-rcd) (i2db6 core-prim . &assertion-rtd) (i2db5 core-prim . &violation-rcd) (i2db4 core-prim . &violation-rtd) (i2db3 core-prim . &error-rcd) (i2db2 core-prim . &error-rtd) (i2db1 core-prim . &serious-rcd) (i2db0 core-prim . &serious-rtd) (i2daf core-prim . &warning-rcd) (i2dae core-prim . &warning-rtd) (i2dad core-prim . &message-rcd) (i2dac core-prim . &message-rtd) (i2dab core-prim . &condition-rcd) (i2daa core-prim . &condition-rtd) (ie53 core-prim . syntax-error) (id77 core-prim . syntax-dispatch) (i2da9 core-prim . pretty-print) (i2da8 core-prim . eval-core) (i2da7 core-prim . set-symbol-value!) (i2da6 core-prim . symbol-value) (i2da5 core-prim . gensym) (i2da4 core-prim . void) (i28e0 core-prim . load) (ie65 core-prim . interaction-environment) (i2da3 core-prim . char-ready?) (i2da2 core-prim . regexp?) (i2da1 core-prim . read-line) (i2da0 core-prim . gensym-prefix-set!) (i2d9f core-prim . ungensym) (i2d9e core-prim . alist->eq-hash-table) (i2d9d core-prim . assoc-ref) (i2d9c core-prim . print) (i2d9b core-prim . format) (i2d9a core-prim . host-os) (i7b6 core-prim . library-path) (i2d99 core-prim . standard-library-path) (i2d98 core-prim . file-newer?) (i2d97 core-prim . stat-mtime) (i2d96 core-prim . write-to-file) (i2d95 core-prim . file->list) (i2d94 core-prim . file->string) (i2d93 core-prim . digit->integer) (i2d92 core-prim . call-with-string-input-port) (i2d91 core-prim . call-with-string-io) (i2d90 core-prim . string-split) (i2d8f core-prim . bytevector-for-each) (i2d8e core-prim . string->regexp) (i2d8d core-prim . rxmatch) (i2d8c core-prim . regexp-replace-all) (i2d8b core-prim . hashtable-for-each) (i5a0 core-prim . mosh-cache-dir) (i2d8a core-prim . call-process) (i2d89 core-prim . local-tz-offset) (i2d88 core-prim . microseconds) (i2d87 core-prim . directory-list) (i2d86 core-prim . set-current-directory!) (i2d85 core-prim . expand-path) (i2d84 core-prim . current-directory) (i2d83 core-prim . %spawn) (i2d82 core-prim . %waitpid) (i2d81 core-prim . simple-struct-name) (i2d80 core-prim . simple-struct-set!) (i2d7f core-prim . simple-struct-ref) (i2d7e core-prim . make-simple-struct) (i2d7d core-prim . simple-struct?) (i2d7c core-prim . pointer-ref-c-int64) (i2d7b core-prim . pointer-ref-c-int32) (i2d7a core-prim . pointer-ref-c-int16) (i2d79 core-prim . pointer-ref-c-int8) (i2d78 core-prim . pointer-ref-c-uint64) (i2d77 core-prim . pointer-ref-c-uint32) (i2d76 core-prim . pointer-ref-c-uint16) (i2d75 core-prim . pointer-ref-c-uint8) (i2d74 core-prim . pointer-set-c-uint64!) (i2d73 core-prim . pointer-set-c-uint32!) (i2d72 core-prim . pointer-set-c-uint16!) (i2d71 core-prim . pointer-set-c-uint8!) (i2d70 core-prim . pointer-set-c-int64!) (i2d6f core-prim . pointer-set-c-int32!) (i2d6e core-prim . pointer-set-c-int16!) (i2d6d core-prim . pointer-set-c-int8!) (i2d6c core-prim . pointer-set-c-pointer!) (i2d6b core-prim . pointer-set-c-double!) (i2d6a core-prim . pointer-set-c-float!) (i2d69 core-prim . pointer-set-c-long-long!) (i2d68 core-prim . pointer-set-c-long!) (i2d67 core-prim . pointer-set-c-int!) (i2d66 core-prim . pointer-set-c-short!) (i2d65 core-prim . pointer-set-c-char!) (i2d64 core-prim . pointer-ref-c-pointer) (i2d63 core-prim . pointer-ref-c-double) (i2d62 core-prim . pointer-ref-c-float) (i2d61 core-prim . pointer-ref-c-unsigned-long-long) (i2d60 core-prim . pointer-ref-c-signed-long-long) (i2d5f core-prim . pointer-ref-c-unsigned-long) (i2d5e core-prim . pointer-ref-c-signed-long) (i2d5d core-prim . pointer-ref-c-unsigned-int) (i2d5c core-prim . pointer-ref-c-signed-int) (i2d5b core-prim . pointer-ref-c-unsigned-short) (i2d5a core-prim . pointer-ref-c-signed-short) (i2d59 core-prim . pointer-ref-c-unsigned-char) (i2d58 core-prim . pointer-ref-c-signed-char) (i2d57 core-prim . pointer->integer) (i2d56 core-prim . integer->pointer) (i2d55 core-prim . pointer?) (i2d54 core-prim . shared-errno) (i2d53 core-prim . %ffi-free-c-callback-trampoline) (i2d52 core-prim . %ffi-make-c-callback-trampoline) (i2d51 core-prim . %ffi-free) (i2d50 core-prim . %ffi-malloc) (i2d4f core-prim . %ffi-supported?) (i2d4e core-prim . %ffi-pointer->string) (i2d4d core-prim . %ffi-call) (i2d4c core-prim . %ffi-lookup) (i2d4b core-prim . %ffi-open) (i2d4a core-prim . null-terminated-utf8->string) (i2d49 core-prim . null-terminated-bytevector->string) (i2d48 core-prim . %exec) (i2d47 core-prim . %fork) (i2d46 core-prim . %pipe) (i2d45 core-prim . p) (i2d44 core-prim . open-output-string) (i2d43 core-prim . get-output-string) (i2d42 core-prim . file-stat-ctime) (i2d41 core-prim . file-stat-atime) (i2d40 core-prim . file-stat-mtime) (i2d3f core-prim . file-size-in-bytes) (i2d3e core-prim . file-writable?) (i2d3d core-prim . file-executable?) (i2d3c core-prim . file-readable?) (i2d3b core-prim . file-regular?) (i2d3a core-prim . file-symbolic-link?) (i2d39 core-prim . file-directory?) (i2d38 core-prim . create-symbolic-link) (i2d37 core-prim . rename-file) (i2d36 core-prim . delete-directory) (i2d35 core-prim . create-directory) (i2d34 core-prim . create-mosh-cache-dir) (i2d33 core-prim . get-environment-variables) (i2d32 core-prim . current-exception-handler) (i2d31 core-prim . get-environment-variable) (i2d30 core-prim . join-wraps) (i2d2f core-prim . id->real-label) (i2d2e core-prim . same-marks?) (i2d2d core-prim . same-marks*?) (i2d2c core-prim . get-timeofday) (i2d2b core-prim . get-command-line) (i2d2a core-prim . sys-display) (i2d29 core-prim . whereis) (i2d28 core-prim . register) (i2d27 core-prim . vm-join!) (i2d26 core-prim . vm-set-value!) (i2d25 core-prim . vm?) (i2d24 core-prim . main-vm?) (i2d23 core-prim . vm-eval) (i2d22 core-prim . vm-self) (i2d21 core-prim . vm-start!) (i2d20 core-prim . make-vm) (i2d1f core-prim . mutex-try-lock!) (i2d1e core-prim . mutex-unlock!) (i2d1d core-prim . mutex-lock!) (i2d1c core-prim . mutex?) (i2d1b core-prim . make-mutex) (i2d1a core-prim . condition-variable-notify-all!) (i2d19 core-prim . condition-variable-notify!) (i2d18 core-prim . condition-variable-wait!) (i2d17 core-prim . make-condition-variable) (i2d16 core-prim . write/ss) (i2d15 core-prim . mosh-executable-path) (i2d14 core-prim . make-file-options) (i2d13 core-prim . source-info) (i2d12 core-prim . make-compiler-instruction) (i2d11 core-prim . make-instruction) (i2d10 core-prim . set-source-info!) (i2d0f core-prim . bignum?) (i2d0e core-prim . fast-equal?) (i2d0d core-prim . fasl-read) (i2d0c core-prim . fasl-write) (i2d0b core-prim . time-usage) (i2d0a core-prim . os-constant) (i2d09 core-prim . disasm) (i59e core-prim . make-parameter) (i2d08 core-prim . socket-port) (i2d07 core-prim . socket-shutdown) (i2d06 core-prim . socket-close) (i2d05 core-prim . socket-send) (i2d04 core-prim . socket-recv!) (i2d03 core-prim . socket-recv) (i2d02 core-prim . make-server-socket) (i2d01 core-prim . make-client-socket) (i2d00 core-prim . socket-accept) (i2cff core-prim . socket?) (i2cfe core-prim . string-upcase) (i2cfd core-prim . string-titlecase) (i2cfc core-prim . string-normalize-nfkd) (i2cfb core-prim . string-normalize-nfkc) (i2cfa core-prim . string-normalize-nfd) (i2cf9 core-prim . string-normalize-nfc) (i2cf8 core-prim . string-foldcase) (i2cf7 core-prim . string-downcase) (i2cf6 core-prim . string-ci>?) (i2cf5 core-prim . string-ci>=?) (i2cf4 core-prim . string-ci=?) (i2cf3 core-prim . string-ci<?) (i2cf2 core-prim . string-ci<=?) (i2cf1 core-prim . char-whitespace?) (i2cf0 core-prim . char-upper-case?) (i2cef core-prim . char-title-case?) (i2cee core-prim . char-numeric?) (i2ced core-prim . char-lower-case?) (i2cec core-prim . char-general-category) (i2ceb core-prim . char-upcase) (i2cea core-prim . char-titlecase) (i2ce9 core-prim . char-foldcase) (i2ce8 core-prim . char-downcase) (i2ce7 core-prim . char-ci>?) (i2ce6 core-prim . char-ci>=?) (i2ce5 core-prim . char-ci=?) (i2ce4 core-prim . char-ci<?) (i2ce3 core-prim . char-ci<=?) (i2ce2 core-prim . char-alphabetic?) (iba2 core-prim . make-variable-transformer) (ie59 core-prim . identifier?) (ie45 core-prim . generate-temporaries) (ie47 core-prim . free-identifier=?) (ie5d core-prim . syntax->datum) (ie5b core-prim . datum->syntax) (ie49 core-prim . bound-identifier=?) (i2ce1 core-prim . record-type-descriptor?) (i2ce0 core-prim . record-predicate) (i2cdf core-prim . record-mutator) (i2cde core-prim . record-constructor) (i2cdd core-prim . record-accessor) (i2cdc core-prim . make-record-type-descriptor) (i2cdb core-prim . make-record-constructor-descriptor) (i2cda core-prim . record?) (i2cd9 core-prim . record-type-uid) (i2cd8 core-prim . record-type-sealed?) (i2cd7 core-prim . record-type-parent) (i2cd6 core-prim . record-type-opaque?) (i2cd5 core-prim . record-type-name) (i2cd4 core-prim . record-type-generative?) (i2cd3 core-prim . record-type-field-names) (i2cd2 core-prim . record-rtd) (i2cd1 core-prim . record-field-mutable?) (i2cd0 core-prim . delete-file) (i2ccf core-prim . file-exists?) (i2cce core-prim . vector-sort!) (i2ccd core-prim . vector-sort) (i2ccc core-prim . list-sort) (i2ccb core-prim . symbol-hash) (i2cca core-prim . string-ci-hash) (i2cc9 core-prim . string-hash) (i2cc8 core-prim . equal-hash) (i2cc7 core-prim . hashtable-equivalence-function) (i2cc6 core-prim . make-hashtable) (i2cc5 core-prim . hashtable-hash-function) (i2cc4 core-prim . make-eqv-hashtable) (i2cc3 core-prim . make-eq-hashtable) (i2cc2 core-prim . hashtable?) (i2cc1 core-prim . hashtable-update!) (i2cc0 core-prim . hashtable-size) (i2cbf core-prim . hashtable-set!) (i2cbe core-prim . hashtable-ref) (i2cbd core-prim . hashtable-mutable?) (i2cbc core-prim . hashtable-keys) (i2cbb core-prim . hashtable-entries) (i2cba core-prim . hashtable-delete!) (i2cb9 core-prim . hashtable-copy) (i2cb8 core-prim . hashtable-contains?) (i2cb7 core-prim . hashtable-clear!) (i2cb6 core-prim . call-with-output-file) (i2cb5 core-prim . call-with-input-file) (i2cb4 core-prim . write-char) (i2cb3 core-prim . write) (i2cb2 core-prim . with-output-to-file) (i2cb1 core-prim . with-input-from-file) (i2cb0 core-prim . read-char) (i2caf core-prim . read) (i2cae core-prim . peek-char) (i2cad core-prim . open-output-file) (i2cac core-prim . open-input-file) (i2cab core-prim . newline) (i2caa core-prim . display) (i2ca9 core-prim . close-output-port) (i2ca8 core-prim . close-input-port) (i2ca7 core-prim . eof-object?) (i2ca6 core-prim . eof-object) (i2ca5 core-prim . current-error-port) (i2ca4 core-prim . current-output-port) (i2ca3 core-prim . current-input-port) (i2ca2 core-prim . output-port?) (i2ca1 core-prim . input-port?) (i2ca0 core-prim . utf-8-codec) (i2c9f core-prim . utf-16-codec) (i2c9e core-prim . transcoder-error-handling-mode) (i2c9d core-prim . transcoder-eol-style) (i2c9c core-prim . transcoder-codec) (i2c9b core-prim . transcoded-port) (i2c9a core-prim . textual-port?) (i2c99 core-prim . string->bytevector) (i2c98 core-prim . standard-output-port) (i2c97 core-prim . standard-input-port) (i2c96 core-prim . standard-error-port) (i2c95 core-prim . set-port-position!) (i2c94 core-prim . put-u8) (i2c93 core-prim . put-string) (i2c92 core-prim . put-datum) (i2c91 core-prim . put-char) (i2c90 core-prim . put-bytevector) (i2c8f core-prim . port?) (i2c8e core-prim . port-transcoder) (i2c8d core-prim . port-position) (i2c8c core-prim . port-has-set-port-position!?) (i2c8b core-prim . port-has-port-position?) (i2c8a core-prim . port-eof?) (i2c89 core-prim . output-port-buffer-mode) (i2c88 core-prim . open-string-output-port) (i2c87 core-prim . open-string-input-port) (i2c86 core-prim . open-file-output-port) (i2c85 core-prim . open-file-input/output-port) (i2c84 core-prim . open-file-input-port) (i2c83 core-prim . open-bytevector-output-port) (i2c82 core-prim . open-bytevector-input-port) (i2c81 core-prim . native-transcoder) (i2c80 core-prim . native-eol-style) (i2c7f core-prim . make-transcoder) (i2c7e core-prim . latin-1-codec) (i2c7d core-prim . make-i/o-write-error) (i2c7c core-prim . make-i/o-read-error) (i2c7b core-prim . make-i/o-port-error) (i2c7a core-prim . make-i/o-invalid-position-error) (i2c79 core-prim . make-i/o-filename-error) (i2c78 core-prim . make-i/o-file-protection-error) (i2c77 core-prim . make-i/o-file-is-read-only-error) (i2c76 core-prim . make-i/o-file-does-not-exist-error) (i2c75 core-prim . make-i/o-file-already-exists-error) (i2c74 core-prim . make-i/o-error) (i2c73 core-prim . make-i/o-encoding-error) (i2c72 core-prim . make-i/o-decoding-error) (i2c71 core-prim . make-custom-textual-output-port) (i2c70 core-prim . make-custom-textual-input/output-port) (i2c6f core-prim . make-custom-textual-input-port) (i2c6e core-prim . make-custom-binary-output-port) (i2c6d core-prim . make-custom-binary-input/output-port) (i2c6c core-prim . make-custom-binary-input-port) (i2c6b core-prim . make-bytevector) (i2c6a core-prim . lookahead-u8) (i2c69 core-prim . lookahead-char) (i2c68 core-prim . i/o-write-error?) (i2c67 core-prim . i/o-read-error?) (i2c66 core-prim . i/o-port-error?) (i2c65 core-prim . i/o-invalid-position-error?) (i2c64 core-prim . i/o-filename-error?) (i2c63 core-prim . i/o-file-protection-error?) (i2c62 core-prim . i/o-file-is-read-only-error?) (i2c61 core-prim . i/o-file-does-not-exist-error?) (i2c60 core-prim . i/o-file-already-exists-error?) (i2c5f core-prim . i/o-error?) (i2c5e core-prim . i/o-error-position) (i2c5d core-prim . i/o-error-port) (i2c5c core-prim . i/o-error-filename) (i2c5b core-prim . i/o-encoding-error?) (i2c5a core-prim . i/o-encoding-error-char) (i2c59 core-prim . i/o-decoding-error?) (i2c58 core-prim . get-u8) (i2c57 core-prim . get-string-n!) (i2c56 core-prim . get-string-n) (i2c55 core-prim . get-string-all) (i2c54 core-prim . get-line) (i2c53 core-prim . get-datum) (i2c52 core-prim . get-char) (i2c51 core-prim . get-bytevector-some) (i2c50 core-prim . get-bytevector-n!) (i2c4f core-prim . get-bytevector-n) (i2c4e core-prim . get-bytevector-all) (i2c4d core-prim . flush-output-port) (i2c4c core-prim . close-port) (ie33 core-prim . scheme-report-environment) (i2c4b core-prim . quotient) (ie31 core-prim . null-environment) (i2c4a core-prim . remainder) (i2c49 core-prim . modulo) (i2c48 core-prim . inexact->exact) (i2c47 core-prim . force) (i2c46 core-prim . exact->inexact) (i2c45 core-prim . make-promise) (i2c44 core-prim . exit) (i28da core-prim . command-line) (i2c43 core-prim . string-fill!) (i2c42 core-prim . string-set!) (i2c41 core-prim . set-cdr!) (i2c40 core-prim . set-car!) (i2c3f core-prim . remove) (i2c3e core-prim . remv) (i2c3d core-prim . remp) (i2c3c core-prim . remq) (i2c3b core-prim . partition) (i2c3a core-prim . memv) (i2c39 core-prim . memq) (i2c38 core-prim . memp) (i2c37 core-prim . member) (i2c36 core-prim . exists) (i2c35 core-prim . for-all) (i2c34 core-prim . fold-right) (i2c33 core-prim . fold-left) (i2c32 core-prim . find) (i2c31 core-prim . filter) (i2c30 core-prim . cons*) (i2c2f core-prim . assv) (i2c2e core-prim . assq) (i2c2d core-prim . assp) (i2c2c core-prim . assoc) (i2c2b core-prim . call-with-string-output-port) (i2c2a core-prim . call-with-port) (i2c29 core-prim . call-with-bytevector-output-port) (i2c28 core-prim . bytevector->string) (i2c27 core-prim . buffer-mode?) (i2c26 core-prim . binary-port?) (i2c25 core-prim . with-exception-handler) (i2c24 core-prim . raise-continuable) (i2c23 core-prim . raise) (ie37 core-prim . eval) (ie2f core-prim . environment) (i2c22 core-prim . make-enumeration) (i2c21 core-prim . enum-set=?) (i2c20 core-prim . enum-set-universe) (i2c1f core-prim . enum-set-union) (i2c1e core-prim . enum-set-subset?) (i2c1d core-prim . enum-set-projection) (i2c1c core-prim . enum-set-member?) (i2c1b core-prim . enum-set-intersection) (i2c1a core-prim . enum-set-indexer) (i2c19 core-prim . enum-set-difference) (i2c18 core-prim . enum-set-constructor) (i2c17 core-prim . enum-set-complement) (i2c16 core-prim . enum-set->list) (i2c15 core-prim . who-condition?) (i2c14 core-prim . warning?) (i2c13 core-prim . violation?) (i2c12 core-prim . undefined-violation?) (i2c11 core-prim . syntax-violation?) (i2c10 core-prim . syntax-violation-subform) (i2c0f core-prim . syntax-violation-form) (ie57 core-prim . syntax-violation) (i2c0e core-prim . simple-conditions) (i2c0d core-prim . serious-condition?) (i2c0c core-prim . non-continuable-violation?) (i2c0b core-prim . message-condition?) (i2c0a core-prim . make-who-condition) (i2c09 core-prim . make-warning) (i2c08 core-prim . make-violation) (i2c07 core-prim . make-undefined-violation) (i2c06 core-prim . make-syntax-violation) (i2c05 core-prim . make-serious-condition) (i2c04 core-prim . make-non-continuable-violation) (i2c03 core-prim . make-message-condition) (i2c02 core-prim . make-lexical-violation) (i2c01 core-prim . make-irritants-condition) (i2c00 core-prim . make-implementation-restriction-violation) (i2bff core-prim . make-error) (i2bfe core-prim . make-assertion-violation) (i2bfd core-prim . lexical-violation?) (i2bfc core-prim . irritants-condition?) (i2bfb core-prim . implementation-restriction-violation?) (i2bfa core-prim . error?) (i2bf9 core-prim . condition-who) (i2bf8 core-prim . condition-predicate) (i2bf7 core-prim . condition-message) (i2bf6 core-prim . condition-irritants) (i2bf5 core-prim . condition-accessor) (i2bf4 core-prim . condition) (i2bf3 core-prim . assertion-violation?) (i2bf2 core-prim . condition?) (i2bf1 core-prim . utf32->string) (i2bf0 core-prim . utf16->string) (i2bef core-prim . utf8->string) (i2bee core-prim . uint-list->bytevector) (i2bed core-prim . u8-list->bytevector) (i2bec core-prim . string->utf8) (i2beb core-prim . string->utf32) (i2bea core-prim . string->utf16) (i2be9 core-prim . sint-list->bytevector) (i2be8 core-prim . native-endianness) (i2be7 core-prim . bytevector?) (i2be6 core-prim . bytevector=?) (i2be5 core-prim . bytevector-uint-set!) (i2be4 core-prim . bytevector-uint-ref) (i2be3 core-prim . bytevector-u8-set!) (i2be2 core-prim . bytevector-u8-ref) (i2be1 core-prim . bytevector-u64-set!) (i2be0 core-prim . bytevector-u64-ref) (i2bdf core-prim . bytevector-u64-native-set!) (i2bde core-prim . bytevector-u64-native-ref) (i2bdd core-prim . bytevector-u32-set!) (i2bdc core-prim . bytevector-u32-ref) (i2bdb core-prim . bytevector-u32-native-set!) (i2bda core-prim . bytevector-u32-native-ref) (i2bd9 core-prim . bytevector-u16-set!) (i2bd8 core-prim . bytevector-u16-ref) (i2bd7 core-prim . bytevector-u16-native-set!) (i2bd6 core-prim . bytevector-u16-native-ref) (i2bd5 core-prim . bytevector-sint-set!) (i2bd4 core-prim . bytevector-sint-ref) (i2bd3 core-prim . bytevector-s8-set!) (i2bd2 core-prim . bytevector-s8-ref) (i2bd1 core-prim . bytevector-s64-set!) (i2bd0 core-prim . bytevector-s64-ref) (i2bcf core-prim . bytevector-s64-native-set!) (i2bce core-prim . bytevector-s64-native-ref) (i2bcd core-prim . bytevector-s32-set!) (i2bcc core-prim . bytevector-s32-ref) (i2bcb core-prim . bytevector-s32-native-set!) (i2bca core-prim . bytevector-s32-native-ref) (i2bc9 core-prim . bytevector-s16-set!) (i2bc8 core-prim . bytevector-s16-ref) (i2bc7 core-prim . bytevector-s16-native-set!) (i2bc6 core-prim . bytevector-s16-native-ref) (i2bc5 core-prim . bytevector-length) (i2bc4 core-prim . bytevector-ieee-single-ref) (i2bc3 core-prim . bytevector-ieee-single-set!) (i2bc2 core-prim . bytevector-ieee-single-native-set!) (i2bc1 core-prim . bytevector-ieee-single-native-ref) (i2bc0 core-prim . bytevector-ieee-double-set!) (i2bbf core-prim . bytevector-ieee-double-ref) (i2bbe core-prim . bytevector-ieee-double-native-set!) (i2bbd core-prim . bytevector-ieee-double-native-ref) (i2bbc core-prim . bytevector-fill!) (i2bbb core-prim . bytevector-copy!) (i2bba core-prim . bytevector-copy) (i2bb9 core-prim . bytevector->uint-list) (i2bb8 core-prim . bytevector->u8-list) (i2bb7 core-prim . bytevector->sint-list) (i2bb6 core-prim . no-nans-violation?) (i2bb5 core-prim . no-infinities-violation?) (i2bb4 core-prim . make-no-nans-violation) (i2bb3 core-prim . make-no-infinities-violation) (i2bb2 core-prim . real->flonum) (i2bb1 core-prim . flzero?) (i2bb0 core-prim . fltruncate) (i2baf core-prim . fltan) (i2bae core-prim . flsqrt) (i2bad core-prim . flsin) (i2bac core-prim . flround) (i2bab core-prim . flpositive?) (i2baa core-prim . flonum?) (i2ba9 core-prim . flodd?) (i2ba8 core-prim . flnumerator) (i2ba7 core-prim . flnegative?) (i2ba6 core-prim . flnan?) (i2ba5 core-prim . flmod0) (i2ba4 core-prim . flmod) (i2ba3 core-prim . flmin) (i2ba2 core-prim . flmax) (i2ba1 core-prim . fllog) (i2ba0 core-prim . flinteger?) (i2b9f core-prim . flinfinite?) (i2b9e core-prim . flfloor) (i2b9d core-prim . flfinite?) (i2b9c core-prim . flexpt) (i2b9b core-prim . flexp) (i2b9a core-prim . fleven?) (i2b99 core-prim . fldiv0-and-mod0) (i2b98 core-prim . fldiv0) (i2b97 core-prim . fldiv-and-mod) (i2b96 core-prim . fldiv) (i2b95 core-prim . fldenominator) (i2b94 core-prim . flcos) (i2b93 core-prim . flceiling) (i2b92 core-prim . flatan) (i2b91 core-prim . flasin) (i2b90 core-prim . flacos) (i2b8f core-prim . flabs) (i2b8e core-prim . fl>?) (i2b8d core-prim . fl>=?) (i2b8c core-prim . fl=?) (i2b8b core-prim . fl<?) (i2b8a core-prim . fl<=?) (i2b89 core-prim . fl/) (i2b88 core-prim . fl-) (i2b87 core-prim . fl+) (i2b86 core-prim . fl*) (i2b85 core-prim . fixnum->flonum) (i2b84 core-prim . fxzero?) (i2b83 core-prim . fxxor) (i2b82 core-prim . fxrotate-bit-field) (i2b81 core-prim . fxreverse-bit-field) (i2b80 core-prim . fxpositive?) (i2b7f core-prim . fxodd?) (i2b7e core-prim . fxnot) (i2b7d core-prim . fxnegative?) (i2b7c core-prim . fxmod0) (i2b7b core-prim . fxmod) (i2b7a core-prim . fxmin) (i2b79 core-prim . fxmax) (i2b78 core-prim . fxlength) (i2b77 core-prim . fxior) (i2b76 core-prim . fxif) (i2b75 core-prim . fxfirst-bit-set) (i2b74 core-prim . fxeven?) (i2b73 core-prim . fxdiv0-and-mod0) (i2b72 core-prim . fxdiv0) (i2b71 core-prim . fxdiv-and-mod) (i2b70 core-prim . fxdiv) (i2b6f core-prim . fxcopy-bit-field) (i2b6e core-prim . fxcopy-bit) (i2b6d core-prim . fxbit-set?) (i2b6c core-prim . fxbit-field) (i2b6b core-prim . fxbit-count) (i2b6a core-prim . fxarithmetic-shift-right) (i2b69 core-prim . fxarithmetic-shift-left) (i2b68 core-prim . fxarithmetic-shift) (i2b67 core-prim . fxand) (i2b66 core-prim . fx>?) (i2b65 core-prim . fx>=?) (i2b64 core-prim . fx=?) (i2b63 core-prim . fx<?) (i2b62 core-prim . fx<=?) (i2b61 core-prim . fx-/carry) (i2b60 core-prim . fx-) (i2b5f core-prim . fx+/carry) (i2b5e core-prim . fx+) (i2b5d core-prim . fx*/carry) (i2b5c core-prim . fx*) (i2b5b core-prim . greatest-fixnum) (i2b5a core-prim . least-fixnum) (i2b59 core-prim . fixnum-width) (i2b58 core-prim . fixnum?) (i2b57 core-prim . bitwise-rotate-bit-field) (i2b56 core-prim . bitwise-reverse-bit-field) (i2b55 core-prim . bitwise-length) (i2b54 core-prim . bitwise-if) (i2b53 core-prim . bitwise-first-bit-set) (i2b52 core-prim . bitwise-copy-bit-field) (i2b51 core-prim . bitwise-copy-bit) (i2b50 core-prim . bitwise-bit-set?) (i2b4f core-prim . bitwise-bit-field) (i2b4e core-prim . bitwise-bit-count) (i2b4d core-prim . bitwise-xor) (i2b4c core-prim . bitwise-ior) (i2b4b core-prim . bitwise-and) (i2b4a core-prim . bitwise-not) (i2b49 core-prim . bitwise-arithmetic-shift-right) (i2b48 core-prim . bitwise-arithmetic-shift-left) (i2b47 core-prim . bitwise-arithmetic-shift) (i2b46 core-prim . zero?) (i2b45 core-prim . vector?) (i2b44 core-prim . vector-set!) (i2b43 core-prim . vector-ref) (i2b42 core-prim . vector-map) (i2b41 core-prim . vector-length) (i2b40 core-prim . vector-for-each) (i2b3f core-prim . vector-fill!) (i2b3e core-prim . vector->list) (i2b3d core-prim . vector) (i2b3c core-prim . values) (i2b3b core-prim . truncate) (i2b3a core-prim . tan) (i2b39 core-prim . symbol?) (i2b38 core-prim . symbol=?) (i2b37 core-prim . symbol->string) (i2b36 core-prim . substring) (i2b35 core-prim . string?) (i2b34 core-prim . string>?) (i2b33 core-prim . string>=?) (i2b32 core-prim . string=?) (i2b31 core-prim . string<?) (i2b30 core-prim . string<=?) (i2b2f core-prim . string-ref) (i2b2e core-prim . string-length) (i2b2d core-prim . string-for-each) (i2b2c core-prim . string-copy) (i2b2b core-prim . string-append) (i2b2a core-prim . string->symbol) (i2b29 core-prim . string->number) (i2b28 core-prim . string->list) (i2b27 core-prim . string) (i2b26 core-prim . sqrt) (i2b25 core-prim . sin) (i2b24 core-prim . round) (i2b23 core-prim . reverse) (i2b22 core-prim . real?) (i2b21 core-prim . real-valued?) (i2b20 core-prim . real-part) (i2b1f core-prim . rationalize) (i2b1e core-prim . rational?) (i2b1d core-prim . rational-valued?) (i2b1c core-prim . procedure?) (i2b1b core-prim . positive?) (i2b1a core-prim . pair?) (i2b19 core-prim . odd?) (i2b18 core-prim . numerator) (i2b17 core-prim . number?) (i2b16 core-prim . number->string) (i2b15 core-prim . null?) (i2b14 core-prim . not) (i2b13 core-prim . negative?) (i2b12 core-prim . nan?) (i2b11 core-prim . min) (i2b10 core-prim . max) (i2b0f core-prim . map) (i2b0e core-prim . make-vector) (i2b0d core-prim . make-string) (i2b0c core-prim . make-rectangular) (i2b0b core-prim . make-polar) (i2b0a core-prim . magnitude) (i2b09 core-prim . log) (i2b08 core-prim . list?) (i2b07 core-prim . list-tail) (i2b06 core-prim . list-ref) (i2b05 core-prim . list->vector) (i2b04 core-prim . list->string) (i2b03 core-prim . list) (i2b02 core-prim . length) (i2b01 core-prim . lcm) (i2b00 core-prim . integer?) (i2aff core-prim . integer-valued?) (i2afe core-prim . integer->char) (i2afd core-prim . infinite?) (i2afc core-prim . inexact?) (i2afb core-prim . inexact) (i2afa core-prim . imag-part) (i2af9 core-prim . gcd) (i2af8 core-prim . for-each) (i2af7 core-prim . floor) (i2af6 core-prim . finite?) (i2af5 core-prim . expt) (i2af4 core-prim . exp) (i2af3 core-prim . exact?) (i2af2 core-prim . exact-integer-sqrt) (i2af1 core-prim . exact) (i2af0 core-prim . even?) (i2aef core-prim . error) (i2aee core-prim . eqv?) (i2aed core-prim . equal?) (i2aec core-prim . eq?) (i2aeb core-prim . dynamic-wind) (i2aea core-prim . div0-and-mod0) (i2ae9 core-prim . mod0) (i2ae8 core-prim . div0) (i2ae7 core-prim . div-and-mod) (i2ae6 core-prim . mod) (i2ae5 core-prim . div) (i2ae4 core-prim . denominator) (i2ae3 core-prim . cos) (i2ae2 core-prim . cons) (i2ae1 core-prim . complex?) (i2ae0 core-prim . char?) (i2adf core-prim . char>?) (i2ade core-prim . char>=?) (i2add core-prim . char=?) (i2adc core-prim . char<?) (i2adb core-prim . char<=?) (i2ada core-prim . char->integer) (i2ad9 core-prim . ceiling) (i2ad8 core-prim . call-with-values) (i2ad7 core-prim . call/cc) (i2ad6 core-prim . call-with-current-continuation) (i2ad5 core-prim . cddddr) (i2ad4 core-prim . cdddar) (i2ad3 core-prim . cddadr) (i2ad2 core-prim . cddaar) (i2ad1 core-prim . cdaddr) (i2ad0 core-prim . cdadar) (i2acf core-prim . cdaadr) (i2ace core-prim . cdaaar) (i2acd core-prim . cadddr) (i2acc core-prim . caddar) (i2acb core-prim . cadadr) (i2aca core-prim . cadaar) (i2ac9 core-prim . caaddr) (i2ac8 core-prim . caadar) (i2ac7 core-prim . caaadr) (i2ac6 core-prim . caaaar) (i2ac5 core-prim . cdddr) (i2ac4 core-prim . cddar) (i2ac3 core-prim . cdadr) (i2ac2 core-prim . cdaar) (i2ac1 core-prim . caddr) (i2ac0 core-prim . cadar) (i2abf core-prim . caadr) (i2abe core-prim . caaar) (i2abd core-prim . cddr) (i2abc core-prim . cdar) (i2abb core-prim . cadr) (i2aba core-prim . caar) (i2ab9 core-prim . cdr) (i2ab8 core-prim . car) (i2ab7 core-prim . boolean?) (i2ab6 core-prim . boolean=?) (i2ab5 core-prim . atan) (i2ab4 core-prim . assertion-violation) (ie51 core-prim . assertion-error) (i2ab3 core-prim . asin) (i2ab2 core-prim . apply) (i2ab1 core-prim . append) (i2ab0 core-prim . angle) (i2aaf core-prim . acos) (i2aae core-prim . abs) (i2aad core-prim . /) (i2aac core-prim . *) (i2aab core-prim . -) (i2aaa core-prim . +) (i2aa9 core-prim . >=) (i2aa8 core-prim . >) (i2aa7 core-prim . =) (i2aa6 core-prim . <=) (i2aa5 core-prim . <) (i2aa4 core-prim . library) (i2aa3 $core-rtd &no-nans-rtd &no-nans-rcd) (i2aa2 $core-rtd &no-infinities-rtd &no-infinities-rcd) (i2aa1 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (i2aa0 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (i2a9f $core-rtd &i/o-port-rtd &i/o-port-rcd) (i2a9e $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (i2a9d $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (i2a9c $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (i2a9b $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (i2a9a $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (i2a99 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (i2a98 $core-rtd &i/o-write-rtd &i/o-write-rcd) (i2a97 $core-rtd &i/o-read-rtd &i/o-read-rcd) (i2a96 $core-rtd &i/o-rtd &i/o-rcd) (i2a95 $core-rtd &undefined-rtd &undefined-rcd) (i2a94 $core-rtd &syntax-rtd &syntax-rcd) (i2a93 $core-rtd &lexical-rtd &lexical-rcd) (i2a92 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (i2a91 $core-rtd &non-continuable-rtd &non-continuable-rcd) (i2a90 $core-rtd &who-rtd &who-rcd) (i2a8f $core-rtd &irritants-rtd &irritants-rcd) (i2a8e $core-rtd &assertion-rtd &assertion-rcd) (i2a8d $core-rtd &violation-rtd &violation-rcd) (i2a8c $core-rtd &error-rtd &error-rcd) (i2a8b $core-rtd &serious-rtd &serious-rcd) (i2a8a $core-rtd &warning-rtd &warning-rcd) (i2a89 $core-rtd &message-rtd &message-rcd) (i2a88 $core-rtd &condition-rtd &condition-rcd) (i2a87 macro . define-condition-type) (i2a86 macro . define-enumeration) (i2a85 macro . define-record-type) (i2a84 macro . parent-rtd) (i2a83 macro . nongenerative) (i2a82 macro . opaque) (i2a81 macro . sealed) (i2a80 macro . protocol) (i2a7f macro . parent) (i2a7e macro . immutable) (i2a7d macro . mutable) (i2a7c macro . fields) (i2a7b macro . error-handling-mode) (i2a7a macro . file-options) (i2a79 macro . buffer-mode) (i2a78 macro . eol-style) (i2a77 macro . guard) (i2a76 macro . trace-define) (i2a75 macro . trace-lambda) (i2a74 macro . unsyntax-splicing) (i2a73 macro . unsyntax) (i2a72 macro . unquote-splicing) (i2a71 macro . unquote) (i2a70 macro . _) (i2a6f macro . else) (i2a6e macro . =>) (i2a6d macro . ...) (i2a6c macro . assert) (i2a6b macro . endianness) (i2a6a macro . delay) (i2a69 macro . time) (i2a68 macro . do) (i2a67 macro . cond) (i2a66 macro . let*) (i2a65 macro . let*-values) (i2a64 macro . let-values) (i2a63 macro . identifier-syntax) (i2a62 macro . with-syntax) (i2a61 macro . quasisyntax) (i2a60 macro . quasiquote) (i2a5f macro . syntax-rules) (i2a5e macro . include) (i2a5d macro . define-struct) (i2a5c core-macro . record-constructor-descriptor) (i2a5b core-macro . record-type-descriptor) (i2a5a macro . case) (i2a59 macro . parameterize) (i2a58 macro . unless) (i2a57 macro . when) (i2a56 core-macro . or) (i2a55 core-macro . and) (i2a54 core-macro . if) (i2a53 core-macro . let) (i2a52 core-macro . letrec*) (i2a51 core-macro . letrec) (i2a50 core-macro . type-descriptor) (i2a4f core-macro . case-lambda) (i2a4e core-macro . lambda) (i2a4d core-macro . syntax) (i2a4c core-macro . syntax-case) (i2a4b core-macro . quote) (i2a4a core-macro . foreign-call) (i2a49 letrec-syntax) (i2a48 let-syntax) (i2a47 set!) (i2a46 import) (i2a45 begin) (i2a44 module) (i2a43 define-syntax) (i2a42 define)) values values '#f '#f '#f '#f) (i98b@i7d7@install-library 'i2e02 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . i2da9) (eval-core . i2da8) (set-symbol-value! . i2da7) (symbol-value . i2da6) (gensym . i2da5) (void . i2da4)) '() values values '#f '#f '#f '#f) (i98b@i7d7@install-library 'i2e03 '(mosh) '() '() '() '() '((set-symbol-value! . i2da7) (symbol-value . i2da6) (regexp? . i2da2) (read-line . i2da1) (ungensym . i2d9f) (alist->eq-hash-table . i2d9e) (assoc-ref . i2d9d) (print . i2d9c) (format . i2d9b) (host-os . i2d9a) (library-path . i7b6) (standard-library-path . i2d99) (file-newer? . i2d98) (stat-mtime . i2d97) (digit->integer . i2d93) (call-with-string-input-port . i2d92) (call-with-string-io . i2d91) (string-split . i2d90) (bytevector-for-each . i2d8f) (string->regexp . i2d8e) (rxmatch . i2d8d) (regexp-replace-all . i2d8c) (hashtable-for-each . i2d8b) (set-current-directory! . i2d86) (expand-path . i2d85) (current-directory . i2d84) (p . i2d45) (get-timeofday . i2d2c) (get-command-line . i2d2b) (sys-display . i2d2a) (whereis . i2d29) (register . i2d28) (vm-join! . i2d27) (vm-set-value! . i2d26) (vm? . i2d25) (main-vm? . i2d24) (vm-eval . i2d23) (vm-self . i2d22) (vm-start! . i2d21) (make-vm . i2d20) (mutex-try-lock! . i2d1f) (mutex-unlock! . i2d1e) (mutex-lock! . i2d1d) (mutex? . i2d1c) (make-mutex . i2d1b) (condition-variable-notify-all! . i2d1a) (condition-variable-notify! . i2d19) (condition-variable-wait! . i2d18) (make-condition-variable . i2d17) (write/ss . i2d16) (mosh-executable-path . i2d15) (make-file-options . i2d14) (source-info . i2d13) (make-compiler-instruction . i2d12) (make-instruction . i2d11) (set-source-info! . i2d10) (bignum? . i2d0f) (fast-equal? . i2d0e) (fasl-read . i2d0d) (fasl-write . i2d0c) (time-usage . i2d0b) (os-constant . i2d0a) (time . i2a69) (include . i2a5e)) '() values values '#f '#f '#f '#f) (i98b@i7d7@install-library 'i2e04 '(system) '() '() '() '() '((gensym-prefix-set! . i2da0) (write-to-file . i2d96) (file->list . i2d95) (file->string . i2d94) (mosh-cache-dir . i5a0) (call-process . i2d8a) (local-tz-offset . i2d89) (microseconds . i2d88) (directory-list . i2d87) (expand-path . i2d85) (%spawn . i2d83) (%waitpid . i2d82) (simple-struct-name . i2d81) (simple-struct-set! . i2d80) (simple-struct-ref . i2d7f) (make-simple-struct . i2d7e) (simple-struct? . i2d7d) (pointer-ref-c-int64 . i2d7c) (pointer-ref-c-int32 . i2d7b) (pointer-ref-c-int16 . i2d7a) (pointer-ref-c-int8 . i2d79) (pointer-ref-c-uint64 . i2d78) (pointer-ref-c-uint32 . i2d77) (pointer-ref-c-uint16 . i2d76) (pointer-ref-c-uint8 . i2d75) (pointer-set-c-uint64! . i2d74) (pointer-set-c-uint32! . i2d73) (pointer-set-c-uint16! . i2d72) (pointer-set-c-uint8! . i2d71) (pointer-set-c-int64! . i2d70) (pointer-set-c-int32! . i2d6f) (pointer-set-c-int16! . i2d6e) (pointer-set-c-int8! . i2d6d) (pointer-set-c-pointer! . i2d6c) (pointer-set-c-double! . i2d6b) (pointer-set-c-float! . i2d6a) (pointer-set-c-long-long! . i2d69) (pointer-set-c-long! . i2d68) (pointer-set-c-int! . i2d67) (pointer-set-c-short! . i2d66) (pointer-set-c-char! . i2d65) (pointer-ref-c-pointer . i2d64) (pointer-ref-c-double . i2d63) (pointer-ref-c-float . i2d62) (pointer-ref-c-unsigned-long-long . i2d61) (pointer-ref-c-signed-long-long . i2d60) (pointer-ref-c-unsigned-long . i2d5f) (pointer-ref-c-signed-long . i2d5e) (pointer-ref-c-unsigned-int . i2d5d) (pointer-ref-c-signed-int . i2d5c) (pointer-ref-c-unsigned-short . i2d5b) (pointer-ref-c-signed-short . i2d5a) (pointer-ref-c-unsigned-char . i2d59) (pointer-ref-c-signed-char . i2d58) (pointer->integer . i2d57) (integer->pointer . i2d56) (pointer? . i2d55) (shared-errno . i2d54) (%ffi-free-c-callback-trampoline . i2d53) (%ffi-make-c-callback-trampoline . i2d52) (%ffi-free . i2d51) (%ffi-malloc . i2d50) (%ffi-supported? . i2d4f) (%ffi-pointer->string . i2d4e) (%ffi-call . i2d4d) (%ffi-lookup . i2d4c) (%ffi-open . i2d4b) (null-terminated-utf8->string . i2d4a) (null-terminated-bytevector->string . i2d49) (%exec . i2d48) (%fork . i2d47) (%pipe . i2d46) (open-output-string . i2d44) (get-output-string . i2d43) (file-stat-ctime . i2d42) (file-stat-atime . i2d41) (file-stat-mtime . i2d40) (file-size-in-bytes . i2d3f) (file-writable? . i2d3e) (file-executable? . i2d3d) (file-readable? . i2d3c) (file-regular? . i2d3b) (file-symbolic-link? . i2d3a) (file-directory? . i2d39) (create-symbolic-link . i2d38) (rename-file . i2d37) (delete-directory . i2d36) (create-directory . i2d35) (create-mosh-cache-dir . i2d34) (get-environment-variables . i2d33) (current-exception-handler . i2d32) (get-environment-variable . i2d31) (join-wraps . i2d30) (id->real-label . i2d2f) (same-marks? . i2d2e) (same-marks*? . i2d2d) (disasm . i2d09) (make-parameter . i59e) (socket-port . i2d08) (socket-shutdown . i2d07) (socket-close . i2d06) (socket-send . i2d05) (socket-recv! . i2d04) (socket-recv . i2d03) (make-server-socket . i2d02) (make-client-socket . i2d01) (socket-accept . i2d00) (socket? . i2cff) (parameterize . i2a59)) '() values values '#f '#f '#f '#f)))
(begin (set! i28c5@ref (unspecified)) (set! i28c7@x* (unspecified)) (set! i28c9@add-library-path! (unspecified)) (set! i28cb@parse-and-add-library-path (unspecified)) (set! i28cd@for-each-with-index (unspecified)) (set! i28cf@rpad (unspecified)) (set! i28d1@condition-printer (unspecified)) (set! i28d3@record->field-alist (unspecified)) (set! i28d5@map-with-index (unspecified)) (set! i28d7@repl (unspecified)) (set! i28d9@trace-printer (unspecified)) (set! i28db@command-line (unspecified)) (set! i28dd@local-library-path (unspecified)) (set! i28df@load/args (unspecified)) (set! i28e1@load (unspecified)) (set! i28e3@ironscheme-build (unspecified)) (set! i28e5@eval-top-level (unspecified)) (set! i28e7@compile-system-libraries (unspecified)) (set! i28e9@compile (unspecified)) (set! i28eb@compile->closure (unspecified)) (set! i28ed@pre-compile-r6rs-file (unspecified)) (set! i28ef@load-r6rs-top-level (unspecified)) (set! i28f1@load-r6rs-top-level-sexp (unspecified)) (set! i28f3@prefix-inc (unspecified)) (set! i28f5@prefix-inc! (unspecified)) (set! i28c5@ref (lambda (i2930@rtd i2931@i i2932@x) (let ((i2936@val ((record-accessor i2930@rtd i2931@i) i2932@x))) (if (symbol? i2936@val) (ungensym i2936@val) i2936@val)))) (set! i2a28@i28c5@ref i28c5@ref) (set! i28c7@x* '()) (set! i2a29@i28c7@x* i28c7@x*) (set! i28c9@add-library-path! (lambda (i2938@path) (i97b@i7b7@library-path (append (i97b@i7b7@library-path) (list i2938@path))))) (set! i2a2a@i28c9@add-library-path! i28c9@add-library-path!) (set! i28cb@parse-and-add-library-path (lambda (i293a@paths i293b@message) (letrec* ((i293f@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((i2940@t i293a@paths)) (if i2940@t ((lambda (i2942@paths) (for-each (lambda (i2944@path) (if (file-exists? i2944@path) (i28c9@add-library-path! (expand-path i2944@path)) (format (current-error-port) i293b@message i2944@path))) (string-split i2942@paths i293f@separator))) i2940@t) (void)))))) (set! i2a2b@i28cb@parse-and-add-library-path i28cb@parse-and-add-library-path) (set! i28cd@for-each-with-index (lambda (i2946@proc i2947@lst) (letrec ((i294a@loop (lambda (i294c@i i294d@lst) (if (null? i294d@lst) (if '#f '#f (void)) (begin (i2946@proc i294c@i (car i294d@lst)) (i294a@loop (+ i294c@i '1) (cdr i294d@lst))))))) (i294a@loop '1 i2947@lst)))) (set! i2a2c@i28cd@for-each-with-index i28cd@for-each-with-index) (set! i28cf@rpad (lambda (i2950@str i2951@pad i2952@n) (let ((i2956@rest (- i2952@n (string-length (format '"~a" i2950@str))))) (let i295c@loop ((i2958@rest i2956@rest) (i2959@ret (format '"~a" i2950@str))) (if (<= i2958@rest '0) i2959@ret (i295c@loop (- i2958@rest '1) (string-append i2959@ret i2951@pad))))))) (set! i2a2d@i28cf@rpad i28cf@rpad) (set! i28d1@condition-printer (lambda (i295e@e i295f@port) (letrec* ((i2963@max-condition-len (apply max (map (lambda (i2974@c) (string-length (symbol->string (record-type-name (record-rtd i2974@c))))) (simple-conditions i295e@e))))) (begin (display '" Condition components:\n" i295f@port) (i28cd@for-each-with-index (lambda (i2964@i i2965@x) (let ((i2968@rtd (record-rtd i2965@x)) (i2969@fields-alist (i28d3@record->field-alist i2965@x))) (begin (format i295f@port '" ~d. ~a" i2964@i (i28cf@rpad (symbol->string (record-type-name i2968@rtd)) '" " i2963@max-condition-len)) (if (null? i2969@fields-alist) (newline i295f@port) (void)) (let i2970@loop ((i296c@first '#t) (i296d@fields-alist i2969@fields-alist)) (if (null? i296d@fields-alist) '() (let ((i2972@field (car i296d@fields-alist))) (begin (if (not i296c@first) (display (i28cf@rpad '"" '" " (+ '4 i2963@max-condition-len)) i295f@port) (void)) (display '"       " i295f@port) (display (car i2972@field) i295f@port) (display '": " i295f@port) (write (cdr i2972@field) i295f@port) (newline i295f@port) (i2970@loop '#f (cdr i296d@fields-alist))))))))) (simple-conditions i295e@e)))))) (set! i2a2e@i28d1@condition-printer i28d1@condition-printer) (set! i28d3@record->field-alist (lambda (i2976@r) (letrec* ((i2979@ref (lambda (i2984@rtd i2985@i i2986@x) (let ((i298a@val ((record-accessor i2984@rtd i2985@i) i2986@x))) (if (symbol? i298a@val) (ungensym i298a@val) i298a@val))))) (let i297e@loop ((i297a@ret '()) (i297b@rtd (record-rtd i2976@r))) (if i297b@rtd (i297e@loop (append i297a@ret (i28d5@map-with-index (lambda (i2980@i i2981@field) (cons i2981@field (i2979@ref i297b@rtd i2980@i i2976@r))) (vector->list (record-type-field-names i297b@rtd)))) (record-type-parent i297b@rtd)) i297a@ret))))) (set! i2a2f@i28d3@record->field-alist i28d3@record->field-alist) (set! i28d5@map-with-index (lambda (i298c@proc i298d@lst) (let i2996@loop ((i2990@i '0) (i2991@lst i298d@lst) (i2992@ret '())) (if (null? i2991@lst) (reverse i2992@ret) (i2996@loop (+ i2990@i '1) (cdr i2991@lst) (cons (i298c@proc i2990@i (car i2991@lst)) i2992@ret)))))) (set! i2a30@i28d5@map-with-index i28d5@map-with-index) (set! i28d7@repl (lambda i2998@x (letrec* ((i299b@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (i299e@i299c) (lambda () (with-exception-handler (lambda (i29a0@e) ((call/cc (lambda (i29a2@i299d) (i299e@i299c (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? i29a0@e) (i28d1@condition-printer i29a0@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" i29a0@e))) (i29a2@i299d (lambda () (raise-continuable i29a0@e)))))))))) (lambda () (let i29a8@loop ((i29a4@line (get-line (current-input-port))) (i29a5@accum '"")) (letrec* ((i29ab@parentheses-ok? (lambda (i29b2@text) (let i29ba@loop ((i29b4@chars (string->list i29b2@text)) (i29b5@p0 '0) (i29b6@p1 '0)) (if (null? i29b4@chars) (= '0 i29b5@p0 i29b6@p1) (let ((i29bc@t (car i29b4@chars))) (if (memv i29bc@t '(#\()) (i29ba@loop (cdr i29b4@chars) (+ i29b5@p0 '1) i29b6@p1) (if (memv i29bc@t '(#\))) (i29ba@loop (cdr i29b4@chars) (- i29b5@p0 '1) i29b6@p1) (if (memv i29bc@t '(#\[)) (i29ba@loop (cdr i29b4@chars) i29b5@p0 (+ i29b6@p1 '1)) (if (memv i29bc@t '(#\])) (i29ba@loop (cdr i29b4@chars) i29b5@p0 (- i29b6@p1 '1)) (i29ba@loop (cdr i29b4@chars) i29b5@p0 i29b6@p1)))))))))) (i29ad@eval-string-print (lambda (i29b0@text) (if (not (or (string=? '"\n" i29b0@text) (= '0 (string-length i29b0@text)))) (write (i28e5@eval-top-level (call-with-port (open-string-input-port i29b0@text) read))) (void))))) (if (eof-object? i29a4@line) (begin (i29ad@eval-string-print i29a5@accum) (exit)) (let ((i29ae@current (string-append i29a5@accum i29a4@line))) (if (i29ab@parentheses-ok? i29ae@current) (i29ad@eval-string-print i29ae@current) (i29a8@loop (get-line (current-input-port)) i29ae@current)))))))))))) (newline) (i299b@rec))))) (i299b@rec)))) (set! i2a31@i28d7@repl i28d7@repl) (set! i28d9@trace-printer (i6c1@i59f@make-parameter write)) (set! i2a32@i28d9@trace-printer i28d9@trace-printer) (set! i28db@command-line (i6c1@i59f@make-parameter (get-command-line))) (set! i2a33@i28db@command-line i28db@command-line) (set! i28dd@local-library-path (lambda (i29be@filename) (i97b@i7b7@library-path))) (set! i2a34@i28dd@local-library-path i28dd@local-library-path) (set! i28df@load/args (lambda (i29c0@filename . i29c2@args) (begin (apply i28ef@load-r6rs-top-level i29c0@filename 'load i29c2@args) (void)))) (set! i2a35@i28df@load/args i28df@load/args) (set! i28e1@load (lambda (i29c4@filename) (begin (apply i28ef@load-r6rs-top-level i29c4@filename 'load (i28db@command-line)) (void)))) (set! i2a36@i28e1@load i28e1@load) (set! i28e3@ironscheme-build (lambda () (i28e1@load '"ironscheme-buildscript.ss"))) (set! i2a37@i28e3@ironscheme-build i28e3@ironscheme-build) (set! i28e5@eval-top-level (lambda (i29c6@x) (i28a2@ie38@eval i29c6@x (i28b9@ie66@interaction-environment)))) (set! i2a38@i28e5@eval-top-level i28e5@eval-top-level) (set! i28e7@compile-system-libraries (lambda () (i28e5@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! i2a39@i28e7@compile-system-libraries i28e7@compile-system-libraries) (set! i28e9@compile (lambda (i29c8@filename) (i28ef@load-r6rs-top-level i29c8@filename 'compile))) (set! i2a3a@i28e9@compile i28e9@compile) (set! i28eb@compile->closure (lambda (i29ca@filename) (i28ef@load-r6rs-top-level i29ca@filename 'closure))) (set! i2a3b@i28eb@compile->closure i28eb@compile->closure) (set! i28ed@pre-compile-r6rs-file (lambda (i29cc@filename) (i28ef@load-r6rs-top-level i29cc@filename 'compile))) (set! i2a3c@i28ed@pre-compile-r6rs-file i28ed@pre-compile-r6rs-file) (set! i28ef@load-r6rs-top-level (lambda (i29ce@filename i29cf@how . i29d2@args) (begin (i97b@i7b7@library-path (i28dd@local-library-path i29ce@filename)) (let ((i29d4@x* (with-input-from-file i29ce@filename (lambda () (let i29d6@f () (let ((i29d8@x (i6b3@i583@read-annotated))) (if (eof-object? i29d8@x) '() (cons i29d8@x (i29d6@f))))))))) (let ((i29da@t i29cf@how)) (if (memv i29da@t '(closure)) (i28b8@ie64@pre-compile-r6rs-top-level i29d4@x*) (if (memv i29da@t '(load)) (begin (i28db@command-line (cons i29ce@filename (car i29d2@args))) (i6c2@i5a1@mosh-cache-dir (create-mosh-cache-dir)) (if (i6c2@i5a1@mosh-cache-dir) (gensym-prefix-set! (i28f5@prefix-inc! (string-append (i6c2@i5a1@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (i29dc@file) ((call/cc (lambda (i29e0@i29de) (lambda () (with-exception-handler (lambda (i29e2@c) ((call/cc (lambda (i29e4@i29df) (i29e0@i29de (lambda () (if '#t '#t (i29e4@i29df (lambda () (raise-continuable i29e2@c)))))))))) (lambda () (delete-file (string-append (i6c2@i5a1@mosh-cache-dir) '"/" i29dc@file))))))))) (directory-list (i6c2@i5a1@mosh-cache-dir))) (void)) (let ((i29e6@compiled (i28b7@ie62@compile-r6rs-top-level i29d4@x*))) (begin (if (and (i6c2@i5a1@mosh-cache-dir) (not (symbol-value '%disable-acc))) (i97f@i7bf@serialize-all i6bc@i595@serialize-library i718@i6d1@compile-core-expr) (void)) (i29e6@compiled)))) (if (memv i29da@t '(compile)) (begin (i28b7@ie62@compile-r6rs-top-level i29d4@x*) (i97f@i7bf@serialize-all i6bc@i595@serialize-library i718@i6d1@compile-core-expr)) (if '#f '#f (void)))))))))) (set! i2a3d@i28ef@load-r6rs-top-level i28ef@load-r6rs-top-level) (set! i28f1@load-r6rs-top-level-sexp (lambda (i29e8@import-spec i29e9@thunk) (let ((i29f4@i29ed i97b@i7b7@library-path) (i29f5@i29ef i6c2@i5a1@mosh-cache-dir) (i29f6@i29f1 (i28dd@local-library-path '"")) (i29f7@i29f3 (create-mosh-cache-dir))) (let ((i29fc@swap (lambda () (begin (let ((i29fe@t (i29f4@i29ed))) (begin (i29f4@i29ed i29f6@i29f1) (set! i29f6@i29f1 i29fe@t))) (let ((i2a00@t (i29f5@i29ef))) (begin (i29f5@i29ef i29f7@i29f3) (set! i29f7@i29f3 i2a00@t))))))) (dynamic-wind i29fc@swap (lambda () (begin (if (i6c2@i5a1@mosh-cache-dir) (gensym-prefix-set! (i28f5@prefix-inc! (string-append (i6c2@i5a1@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((i2a06@i2a03 i28db@command-line) (i2a07@i2a05 '())) (let ((i2a0a@swap (lambda () (let ((i2a0c@t (i2a06@i2a03))) (begin (i2a06@i2a03 i2a07@i2a05) (set! i2a07@i2a05 i2a0c@t)))))) (dynamic-wind i2a0a@swap (lambda () ((i28b7@ie62@compile-r6rs-top-level (list (cons 'import i29e8@import-spec) (list i29e9@thunk))))) i2a0a@swap))))) i29fc@swap))))) (set! i2a3e@i28f1@load-r6rs-top-level-sexp i28f1@load-r6rs-top-level-sexp) (set! i28f3@prefix-inc (lambda (i2a0e@prefix-string) (let ((i2a10@prefix (symbol->string i2a0e@prefix-string))) (let ((i2a12@len (string-length i2a10@prefix))) (let i2a1a@loop ((i2a14@i (- i2a12@len '1)) (i2a15@carry? '#t) (i2a16@accum '())) (if (< i2a14@i '0) (string->symbol (list->string (if i2a15@carry? (cons '#\a i2a16@accum) i2a16@accum))) (if i2a15@carry? (let ((i2a1c@next-integer (+ '1 (char->integer (string-ref i2a10@prefix i2a14@i))))) (if (= i2a1c@next-integer '123) (i2a1a@loop (- i2a14@i '1) '#f (cons '#\A i2a16@accum)) (if (= i2a1c@next-integer '91) (i2a1a@loop (- i2a14@i '1) '#t (cons '#\a i2a16@accum)) (i2a1a@loop (- i2a14@i '1) '#f (cons (integer->char i2a1c@next-integer) i2a16@accum))))) (i2a1a@loop (- i2a14@i '1) '#f (cons (string-ref i2a10@prefix i2a14@i) i2a16@accum))))))))) (set! i2a3f@i28f3@prefix-inc i28f3@prefix-inc) (set! i28f5@prefix-inc! (lambda (i2a1e@file) (begin (if (not (file-exists? i2a1e@file)) (call-with-output-file i2a1e@file (lambda (i2a20@port) (write 'd i2a20@port))) (void)) (let ((i2a22@prefix (call-with-input-file i2a1e@file read))) (if (main-vm?) (let ((i2a24@next-prefix (i28f3@prefix-inc i2a22@prefix))) (begin (call-with-port (open-file-output-port i2a1e@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (i2a26@port) (write i2a24@next-prefix i2a26@port))) i2a22@prefix)) i2a22@prefix))))) (set! i2a40@i28f5@prefix-inc! i28f5@prefix-inc!) (begin (i980@i7c1@current-precompiled-library-loader i6bd@i597@load-serialized-library) (set-symbol-value! 'load i28e1@load) (set-symbol-value! 'pre-compile-r6rs-file i28ed@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs i28e5@eval-top-level) (set-symbol-value! 'int-env-syms i2899@ie26@interaction-environment-symbols) (set-symbol-value! 'expanded2core i717@i6cf@expanded->core) (set-symbol-value! 'trace-printer i28d9@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (i28f6@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list i28f6@c))))) (i28cb@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (i28cb@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (i28c9@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (i28c9@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (i28c9@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((i28f8@prefix (lambda (i28fa@ext i28fb@ls) (append (map (lambda (i28fe@x) (string-append i28fa@ext i28fe@x)) i28fb@ls) i28fb@ls)))) (i97c@i7b9@library-extensions (i28f8@prefix '".mosh" (i97c@i7b9@library-extensions)))) (current-exception-handler (lambda (i2900@c) (begin (if (condition? i2900@c) (i28d1@condition-printer i2900@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" i2900@c)) i2900@c))) (if ((call/cc (lambda (i2904@i2902) (lambda () (with-exception-handler (lambda (i2906@c) ((call/cc (lambda (i2908@i2903) (i2904@i2902 (lambda () (if '#t '#f (i2908@i2903 (lambda () (raise-continuable i2906@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (i28f1@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (i28db@command-line)) (let ((i2912@i290b i28db@command-line) (i2913@i290d i6c2@i5a1@mosh-cache-dir) (i2914@i290f '()) (i2915@i2911 (create-mosh-cache-dir))) (let ((i291a@swap (lambda () (begin (let ((i291c@t (i2912@i290b))) (begin (i2912@i290b i2914@i290f) (set! i2914@i290f i291c@t))) (let ((i291e@t (i2913@i290d))) (begin (i2913@i290d i2915@i2911) (set! i2915@i2911 i291e@t))))))) (dynamic-wind i291a@swap (lambda () (begin (if (i6c2@i5a1@mosh-cache-dir) (gensym-prefix-set! (i28f5@prefix-inc! (string-append (i6c2@i5a1@mosh-cache-dir) '"/prefix.txt"))) (void)) (i28d7@repl))) i291a@swap))) (begin (i97b@i7b7@library-path (i28dd@local-library-path (car (i28db@command-line)))) (set! i28c7@x* (with-input-from-file (car (i28db@command-line)) (lambda () (let i2920@f () (let ((i2922@x (i6b3@i583@read-annotated))) (if (eof-object? i2922@x) '() (cons i2922@x (i2920@f)))))))) (i28db@command-line (cons (car (i28db@command-line)) (cdr (i28db@command-line)))) (i6c2@i5a1@mosh-cache-dir (create-mosh-cache-dir)) (if (i6c2@i5a1@mosh-cache-dir) (gensym-prefix-set! (i28f5@prefix-inc! (string-append (i6c2@i5a1@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (i2924@file) ((call/cc (lambda (i2928@i2926) (lambda () (with-exception-handler (lambda (i292a@c) ((call/cc (lambda (i292c@i2927) (i2928@i2926 (lambda () (if '#t '#t (i292c@i2927 (lambda () (raise-continuable i292a@c)))))))))) (lambda () (delete-file (string-append (i6c2@i5a1@mosh-cache-dir) '"/" i2924@file))))))))) (directory-list (i6c2@i5a1@mosh-cache-dir))) (void)) (let ((i292e@compiled (i28b7@ie62@compile-r6rs-top-level i28c7@x*))) (begin (if (and (i6c2@i5a1@mosh-cache-dir) (not (symbol-value '%disable-acc))) (i97f@i7bf@serialize-all i6bc@i595@serialize-library i718@i6d1@compile-core-expr) (void)) (i292e@compiled))))))))
