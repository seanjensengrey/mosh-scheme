;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! bj57f@library-file-path->cache-path (unspecified)) (set! bj581@read-annotated (unspecified)) (set! bj583@annotation-stripped (unspecified)) (set! bj585@annotation? (unspecified)) (set! bj587@annotation-source (unspecified)) (set! bj589@annotation-expression (unspecified)) (set! bj58b@scm->fasl (unspecified)) (set! bj58d@fasl-save (unspecified)) (set! bj58f@fasl-load (unspecified)) (set! bj591@verbose? (unspecified)) (set! bj593@serialize-library (unspecified)) (set! bj595@load-serialized-library (unspecified)) (set! bj597@make-record-printer (unspecified)) (set! bj599@compile-core (unspecified)) (set! bj59b@read-library-source-file (unspecified)) (set! bj59d@make-parameter (unspecified)) (set! bj59f@mosh-cache-dir (unspecified)) (set! bj635@file-options-spec (unspecified)) (set! bj57f@library-file-path->cache-path (lambda (bj636@x) (call-with-values (lambda () (open-string-output-port)) (lambda (bj63c@bj639 bj63d@bj63b) (let ((bj640@extract bj63d@bj63b) (bj641@p bj63c@bj639)) (let ((bj645@display-hex '#f)) (begin (set! bj645@display-hex (lambda (bj64e@n) (if (<= '0 bj64e@n '9) (display bj64e@n bj641@p) (display (integer->char (+ (char->integer '#\a) (- bj64e@n '10))) bj641@p)))) (begin (let bj648@f ((bj646@ls (string-split bj636@x '#\/))) (if (not (null? bj646@ls)) (begin (display '"_" bj641@p) (for-each (lambda (bj64a@c) (if (or (char<=? '#\a bj64a@c '#\z) (char<=? '#\A bj64a@c '#\Z) (char<=? '#\0 bj64a@c '#\9) (memv bj64a@c '(#\- #\. #\_ #\~))) (display bj64a@c bj641@p) (begin (display '"%" bj641@p) (let ((bj64c@n (char->integer bj64a@c))) (begin (bj645@display-hex (quotient bj64c@n '16)) (bj645@display-hex (remainder bj64c@n '16))))))) (string->list (car bj646@ls))) (bj648@f (cdr bj646@ls))) (void))) (bj640@extract))))))))) (set! bj6b0@bj57f@library-file-path->cache-path bj57f@library-file-path->cache-path) (set! bj581@read-annotated read) (set! bj6b1@bj581@read-annotated bj581@read-annotated) (set! bj583@annotation-stripped (lambda (bj650@x) (bj589@annotation-expression bj650@x))) (set! bj6b2@bj583@annotation-stripped bj583@annotation-stripped) (set! bj585@annotation? (lambda (bj652@x) (source-info bj652@x))) (set! bj6b3@bj585@annotation? bj585@annotation?) (set! bj587@annotation-source (lambda (bj654@x) (source-info bj654@x))) (set! bj6b4@bj587@annotation-source bj587@annotation-source) (set! bj589@annotation-expression (lambda (bj656@x) (if (pair? bj656@x) (cons (car bj656@x) (cdr bj656@x)) (if (procedure? bj656@x) (set-source-info! bj656@x '#f) bj656@x)))) (set! bj6b5@bj589@annotation-expression bj589@annotation-expression) (set! bj58b@scm->fasl (lambda (bj658@filename) (string-append (bj59f@mosh-cache-dir) '"/" (bj57f@library-file-path->cache-path bj658@filename) '".mosh-fasl"))) (set! bj6b6@bj58b@scm->fasl bj58b@scm->fasl) (set! bj58d@fasl-save (lambda (bj65a@filename bj65b@obj) (call-with-port (open-file-output-port bj65a@filename) (lambda (bj65e@port) ((symbol-value 'fasl-write!) bj65b@obj bj65e@port))))) (set! bj6b7@bj58d@fasl-save bj58d@fasl-save) (set! bj58f@fasl-load (lambda (bj660@filename) (call-with-port (open-file-input-port bj660@filename) (symbol-value 'fasl-read!)))) (set! bj6b8@bj58f@fasl-load bj58f@fasl-load) (set! bj591@verbose? (symbol-value '%verbose)) (set! bj6b9@bj591@verbose? bj591@verbose?) (set! bj593@serialize-library (lambda (bj662@filename bj663@obj) (begin (if bj591@verbose? (format (current-error-port) '"serialize-library ~a\n..." bj662@filename) (void)) (let ((bj666@expanded2core (symbol-value 'expanded2core))) (let ((bj668@compile (symbol-value 'compile-w/o-halt))) (let ((bj66a@code bj663@obj)) (let ((bj66c@pivot (cddddr (cddddr bj66a@code)))) (let ((bj66e@visit (bj668@compile (bj666@expanded2core (car bj66c@pivot))))) (begin (set-car! bj66c@pivot bj66e@visit) (let ((bj670@pivot (cdr bj66c@pivot))) (let ((bj672@invoke (bj668@compile (bj666@expanded2core (car bj670@pivot))))) (set-car! bj670@pivot bj672@invoke))))))))) (let ((bj674@fasl-file (bj58b@scm->fasl bj662@filename))) (begin (if (file-exists? bj674@fasl-file) (delete-file bj674@fasl-file) (void)) ((call/cc (lambda (bj678@bj676) (lambda () (with-exception-handler (lambda (bj67a@c) ((call/cc (lambda (bj67c@bj677) (bj678@bj676 (lambda () (if '#t (begin (if bj591@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" bj662@filename) (void)) (if (file-exists? bj674@fasl-file) (delete-file bj674@fasl-file) (void)) '#f) (bj67c@bj677 (lambda () (raise-continuable bj67a@c)))))))))) (lambda () (bj58d@fasl-save bj674@fasl-file bj663@obj)))))))))))) (set! bj6ba@bj593@serialize-library bj593@serialize-library) (set! bj595@load-serialized-library (lambda (bj67e@filename bj67f@obj) (and (bj59f@mosh-cache-dir) (let ((bj682@fasl-file (bj58b@scm->fasl bj67e@filename))) (if (and (file-exists? bj682@fasl-file) ((symbol-value 'file-newer?) bj682@fasl-file bj67e@filename)) (let ((bj684@expanded2core (symbol-value 'expanded2core))) (let ((bj686@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((bj688@code (bj58f@fasl-load bj682@fasl-file))) (let ((bj68a@pivot (cddddr (cddddr bj688@code)))) (let ((bj68c@visit (car bj68a@pivot))) (let ((bj68e@visit-proc (lambda () (bj686@eval-compiled-core bj68c@visit)))) (begin (set-car! bj68a@pivot bj68e@visit-proc) (let ((bj690@pivot (cdr bj68a@pivot))) (let ((bj692@invoke (car bj690@pivot))) (begin (set-car! bj690@pivot (lambda () (bj686@eval-compiled-core bj692@invoke))) (apply bj67f@obj bj688@code))))))))))) '#f))))) (set! bj6bb@bj595@load-serialized-library bj595@load-serialized-library) (set! bj597@make-record-printer (lambda (bj694@name bj695@printer) (lambda bj698@x (begin (display '"record printer") (for-each display bj698@x))))) (set! bj6bc@bj597@make-record-printer bj597@make-record-printer) (set! bj599@compile-core (lambda bj69a@x (apply error 'comile-core '"not implementated" bj69a@x))) (set! bj6bd@bj599@compile-core bj599@compile-core) (set! bj59b@read-library-source-file (lambda (bj69c@file-name) (with-input-from-file bj69c@file-name bj581@read-annotated))) (set! bj6be@bj59b@read-library-source-file bj59b@read-library-source-file) (set! bj59d@make-parameter (lambda bj6ac (let ((bj6ad (length bj6ac))) (if (= bj6ad '1) (apply (lambda (bj69e@x) (bj59d@make-parameter bj69e@x (lambda (bj6a0@x) bj6a0@x))) bj6ac) (if (= bj6ad '2) (apply (lambda (bj6a2@x bj6a3@fender) (let ((bj6a6@x (bj6a3@fender bj6a2@x))) (lambda bj6aa (let ((bj6ab (length bj6aa))) (if (= bj6ab '0) (apply (lambda () bj6a6@x) bj6aa) (if (= bj6ab '1) (apply (lambda (bj6a8@v) (set! bj6a6@x (bj6a3@fender bj6a8@v))) bj6aa) (error 'apply '"invalid arg count"))))))) bj6ac) (error 'apply '"invalid arg count")))))) (set! bj6bf@bj59d@make-parameter bj59d@make-parameter) (set! bj59f@mosh-cache-dir (bj59d@make-parameter '#f)) (set! bj6c0@bj59f@mosh-cache-dir bj59f@mosh-cache-dir) (set! bj635@file-options-spec (lambda (bj6ae@x) bj6ae@x)) (set! bj6c1@bj635@file-options-spec bj635@file-options-spec) (void))
(begin (set! bj6c7@current-primitive-locations (unspecified)) (set! bj6c9@mutable? (unspecified)) (set! bj6cb@rewriter (unspecified)) (set! bj6cd@expanded->core (unspecified)) (set! bj6cf@compile-core-expr (unspecified)) (set! bj6d1@pretty-print (unspecified)) (set! bj6d3@compile-core-expr-to-port (unspecified)) (set! bj6c7@current-primitive-locations (bj6bf@bj59d@make-parameter (lambda (bj6d4@x) '#f) (lambda (bj6d6@p) bj6d6@p))) (set! bj712@bj6c7@current-primitive-locations bj6c7@current-primitive-locations) (set! bj6c9@mutable? (lambda (bj6d8@x) (or (pair? bj6d8@x) (vector? bj6d8@x) (hashtable? bj6d8@x)))) (set! bj713@bj6c9@mutable? bj6c9@mutable?) (set! bj6cb@rewriter (lambda (bj6da@quote-hack?) (let ((bj6dd@f '#f)) (begin (set! bj6dd@f (lambda (bj6de@x) (if (pair? bj6de@x) (let ((bj6e0@t (car bj6de@x))) (if (memv bj6e0@t '(quote)) (if (and bj6da@quote-hack? (bj6c9@mutable? (cadr bj6de@x))) (let ((bj6e2@g (gensym))) (begin (set-symbol-value! bj6e2@g (cadr bj6de@x)) bj6e2@g)) bj6de@x) (if (memv bj6e0@t '(case-lambda)) (cons 'case-lambda (map (lambda (bj6e4@x) (cons (car bj6e4@x) (map bj6dd@f (cdr bj6e4@x)))) (cdr bj6de@x))) (if (memv bj6e0@t '(lambda)) (cons* 'lambda (cadr bj6de@x) (map bj6dd@f (cddr bj6de@x))) (if (memv bj6e0@t '(letrec)) (let ((bj6e6@bindings (cadr bj6de@x)) (bj6e7@body* (cddr bj6de@x))) (let ((bj6ea@lhs* (map car bj6e6@bindings)) (bj6eb@rhs* (map cadr bj6e6@bindings))) (cons* 'letrec (map list bj6ea@lhs* (map bj6dd@f bj6eb@rhs*)) (map bj6dd@f bj6e7@body*)))) (if (memv bj6e0@t '(letrec*)) (let ((bj6ee@bindings (cadr bj6de@x)) (bj6ef@body* (cddr bj6de@x))) (let ((bj6f2@lhs* (map car bj6ee@bindings)) (bj6f3@rhs* (map cadr bj6ee@bindings))) (cons* 'letrec* (map list bj6f2@lhs* (map bj6dd@f bj6f3@rhs*)) (map bj6dd@f bj6ef@body*)))) (if (memv bj6e0@t '(library-letrec*)) (let ((bj6f6@name (cadr bj6de@x)) (bj6f7@x (cdr bj6de@x))) (let ((bj6fa@bindings (cadr bj6f7@x)) (bj6fb@body* (cddr bj6f7@x))) (let ((bj6fe@lhs* (map car bj6fa@bindings)) (bj6ff@lhs** (map cadr bj6fa@bindings)) (bj700@rhs* (map caddr bj6fa@bindings))) (cons* 'library-letrec* bj6f6@name (map list bj6fe@lhs* bj6ff@lhs** (map bj6dd@f bj700@rhs*)) (map bj6dd@f bj6fb@body*))))) (if (memv bj6e0@t '(begin)) (cons 'begin (map bj6dd@f (cdr bj6de@x))) (if (memv bj6e0@t '(set!)) (list 'set! (cadr bj6de@x) (bj6dd@f (caddr bj6de@x))) (if (memv bj6e0@t '(primitive)) (let ((bj704@op (cadr bj6de@x))) (let ((bj706@t ((bj6c7@current-primitive-locations) bj704@op))) (if bj706@t ((lambda (bj708@loc) bj708@loc) bj706@t) bj704@op))) (if (memv bj6e0@t '(define)) bj6de@x (if (list? bj6de@x) (map bj6dd@f bj6de@x) (error 'rewrite '"invalid form ~s ~s" bj6de@x (list? bj6de@x)))))))))))))) bj6de@x))) bj6dd@f)))) (set! bj714@bj6cb@rewriter bj6cb@rewriter) (set! bj6cd@expanded->core (lambda (bj70a@x) ((bj6cb@rewriter '#f) bj70a@x))) (set! bj715@bj6cd@expanded->core bj6cd@expanded->core) (set! bj6cf@compile-core-expr (lambda (bj70c@x) ((bj6cb@rewriter '#f) bj70c@x))) (set! bj716@bj6cf@compile-core-expr bj6cf@compile-core-expr) (set! bj6d1@pretty-print write) (set! bj717@bj6d1@pretty-print bj6d1@pretty-print) (set! bj6d3@compile-core-expr-to-port (lambda (bj70e@x bj70f@p) (bj6d1@pretty-print ((bj6cb@rewriter '#f) bj70e@x) bj70f@p))) (set! bj718@bj6d3@compile-core-expr-to-port bj6d3@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! bj767@make-collection (unspecified)) (set! bj769@current-library-collection (unspecified)) (set! bj76b@rp (unspecified)) (set! bj775@library? (unspecified)) (set! bj777@library-id (unspecified)) (set! bj779@set-library-id! (unspecified)) (set! bj77b@library-name (unspecified)) (set! bj77d@set-library-name! (unspecified)) (set! bj77f@library-version (unspecified)) (set! bj781@set-library-version! (unspecified)) (set! bj783@library-imp* (unspecified)) (set! bj785@set-library-imp*! (unspecified)) (set! bj787@library-vis* (unspecified)) (set! bj789@set-library-vis*! (unspecified)) (set! bj78b@library-inv* (unspecified)) (set! bj78d@set-library-inv*! (unspecified)) (set! bj78f@library-subst (unspecified)) (set! bj791@set-library-subst! (unspecified)) (set! bj793@library-env (unspecified)) (set! bj795@set-library-env! (unspecified)) (set! bj797@library-visit-state (unspecified)) (set! bj799@set-library-visit-state! (unspecified)) (set! bj79b@library-invoke-state (unspecified)) (set! bj79d@set-library-invoke-state! (unspecified)) (set! bj79f@library-visit-code (unspecified)) (set! bj7a1@set-library-visit-code! (unspecified)) (set! bj7a3@library-invoke-code (unspecified)) (set! bj7a5@set-library-invoke-code! (unspecified)) (set! bj7a7@library-visible? (unspecified)) (set! bj7a9@set-library-visible?! (unspecified)) (set! bj7ab@library-source-file-name (unspecified)) (set! bj7ad@set-library-source-file-name! (unspecified)) (set! bj7af@dummy (unspecified)) (set! bj7b1@find-dependencies (unspecified)) (set! bj7b3@find-library-by (unspecified)) (set! bj7b5@library-path (unspecified)) (set! bj7b7@library-extensions (unspecified)) (set! bj7b9@library-name->file-name (unspecified)) (set! bj7bb@file-locator (unspecified)) (set! bj7bd@serialize-all (unspecified)) (set! bj7bf@current-precompiled-library-loader (unspecified)) (set! bj7c1@try-load-from-file (unspecified)) (set! bj7c3@library-loader (unspecified)) (set! bj7c5@current-library-expander (unspecified)) (set! bj7c7@external-pending-libraries (unspecified)) (set! bj7c9@find-external-library (unspecified)) (set! bj7cb@find-library-by-name (unspecified)) (set! bj7cd@library-exists? (unspecified)) (set! bj7cf@find-library-by-spec/die (unspecified)) (set! bj7d1@label->binding-table (unspecified)) (set! bj7d3@install-library-record (unspecified)) (set! bj7d5@install-library (unspecified)) (set! bj7d7@imported-label->binding (unspecified)) (set! bj7d9@invoke-library (unspecified)) (set! bj7db@visit-library (unspecified)) (set! bj7dd@invoke-library-by-spec (unspecified)) (set! bj7df@installed-libraries (unspecified)) (set! bj7e1@library-spec (unspecified)) (set! bj767@make-collection (lambda () (let ((bj7e2@set '())) (let ((bj7e5@set-cons '#f)) (begin (set! bj7e5@set-cons (lambda (bj7ea@x bj7eb@ls) (if (memq bj7ea@x bj7eb@ls) bj7eb@ls (cons bj7ea@x bj7eb@ls)))) (lambda bj7e8 (let ((bj7e9 (length bj7e8))) (if (= bj7e9 '0) (apply (lambda () bj7e2@set) bj7e8) (if (= bj7e9 '1) (apply (lambda (bj7e6@x) (set! bj7e2@set (bj7e5@set-cons bj7e6@x bj7e2@set))) bj7e8) (error 'apply '"invalid arg count")))))))))) (set! bj956@bj767@make-collection bj767@make-collection) (set! bj769@current-library-collection (bj6bf@bj59d@make-parameter (bj767@make-collection) (lambda (bj7ee@x) (begin (if (not (procedure? bj7ee@x)) (assertion-violation 'current-library-collection '"not a procedure" bj7ee@x) (void)) bj7ee@x)))) (set! bj957@bj769@current-library-collection bj769@current-library-collection) (set! bj76b@rp (bj6bc@bj597@make-record-printer 'library (lambda (bj7f0@x bj7f1@p bj7f2@wr) (begin (if (not (bj775@library? bj7f0@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (bj77f@library-version bj7f0@x)) (bj77b@library-name bj7f0@x) (append (bj77b@library-name bj7f0@x) (list (bj77f@library-version bj7f0@x))))) bj7f1@p))))) (set! bj958@bj76b@rp bj76b@rp) (set! bj775@library? (lambda (bj7f6@x) (and (simple-struct? bj7f6@x) (eq? (simple-struct-name bj7f6@x) 'library)))) (set! bj959@bj775@library? bj775@library?) (set! bj777@library-id (lambda (bj7f8@x) (simple-struct-ref bj7f8@x '0))) (set! bj95a@bj777@library-id bj777@library-id) (set! bj779@set-library-id! (lambda (bj7fa@x bj7fb@val) (simple-struct-set! bj7fa@x '0 bj7fb@val))) (set! bj95b@bj779@set-library-id! bj779@set-library-id!) (set! bj77b@library-name (lambda (bj7fe@x) (simple-struct-ref bj7fe@x '1))) (set! bj95c@bj77b@library-name bj77b@library-name) (set! bj77d@set-library-name! (lambda (bj800@x bj801@val) (simple-struct-set! bj800@x '1 bj801@val))) (set! bj95d@bj77d@set-library-name! bj77d@set-library-name!) (set! bj77f@library-version (lambda (bj804@x) (simple-struct-ref bj804@x '2))) (set! bj95e@bj77f@library-version bj77f@library-version) (set! bj781@set-library-version! (lambda (bj806@x bj807@val) (simple-struct-set! bj806@x '2 bj807@val))) (set! bj95f@bj781@set-library-version! bj781@set-library-version!) (set! bj783@library-imp* (lambda (bj80a@x) (simple-struct-ref bj80a@x '3))) (set! bj960@bj783@library-imp* bj783@library-imp*) (set! bj785@set-library-imp*! (lambda (bj80c@x bj80d@val) (simple-struct-set! bj80c@x '3 bj80d@val))) (set! bj961@bj785@set-library-imp*! bj785@set-library-imp*!) (set! bj787@library-vis* (lambda (bj810@x) (simple-struct-ref bj810@x '4))) (set! bj962@bj787@library-vis* bj787@library-vis*) (set! bj789@set-library-vis*! (lambda (bj812@x bj813@val) (simple-struct-set! bj812@x '4 bj813@val))) (set! bj963@bj789@set-library-vis*! bj789@set-library-vis*!) (set! bj78b@library-inv* (lambda (bj816@x) (simple-struct-ref bj816@x '5))) (set! bj964@bj78b@library-inv* bj78b@library-inv*) (set! bj78d@set-library-inv*! (lambda (bj818@x bj819@val) (simple-struct-set! bj818@x '5 bj819@val))) (set! bj965@bj78d@set-library-inv*! bj78d@set-library-inv*!) (set! bj78f@library-subst (lambda (bj81c@x) (simple-struct-ref bj81c@x '6))) (set! bj966@bj78f@library-subst bj78f@library-subst) (set! bj791@set-library-subst! (lambda (bj81e@x bj81f@val) (simple-struct-set! bj81e@x '6 bj81f@val))) (set! bj967@bj791@set-library-subst! bj791@set-library-subst!) (set! bj793@library-env (lambda (bj822@x) (simple-struct-ref bj822@x '7))) (set! bj968@bj793@library-env bj793@library-env) (set! bj795@set-library-env! (lambda (bj824@x bj825@val) (simple-struct-set! bj824@x '7 bj825@val))) (set! bj969@bj795@set-library-env! bj795@set-library-env!) (set! bj797@library-visit-state (lambda (bj828@x) (simple-struct-ref bj828@x '8))) (set! bj96a@bj797@library-visit-state bj797@library-visit-state) (set! bj799@set-library-visit-state! (lambda (bj82a@x bj82b@val) (simple-struct-set! bj82a@x '8 bj82b@val))) (set! bj96b@bj799@set-library-visit-state! bj799@set-library-visit-state!) (set! bj79b@library-invoke-state (lambda (bj82e@x) (simple-struct-ref bj82e@x '9))) (set! bj96c@bj79b@library-invoke-state bj79b@library-invoke-state) (set! bj79d@set-library-invoke-state! (lambda (bj830@x bj831@val) (simple-struct-set! bj830@x '9 bj831@val))) (set! bj96d@bj79d@set-library-invoke-state! bj79d@set-library-invoke-state!) (set! bj79f@library-visit-code (lambda (bj834@x) (simple-struct-ref bj834@x '10))) (set! bj96e@bj79f@library-visit-code bj79f@library-visit-code) (set! bj7a1@set-library-visit-code! (lambda (bj836@x bj837@val) (simple-struct-set! bj836@x '10 bj837@val))) (set! bj96f@bj7a1@set-library-visit-code! bj7a1@set-library-visit-code!) (set! bj7a3@library-invoke-code (lambda (bj83a@x) (simple-struct-ref bj83a@x '11))) (set! bj970@bj7a3@library-invoke-code bj7a3@library-invoke-code) (set! bj7a5@set-library-invoke-code! (lambda (bj83c@x bj83d@val) (simple-struct-set! bj83c@x '11 bj83d@val))) (set! bj971@bj7a5@set-library-invoke-code! bj7a5@set-library-invoke-code!) (set! bj7a7@library-visible? (lambda (bj840@x) (simple-struct-ref bj840@x '12))) (set! bj972@bj7a7@library-visible? bj7a7@library-visible?) (set! bj7a9@set-library-visible?! (lambda (bj842@x bj843@val) (simple-struct-set! bj842@x '12 bj843@val))) (set! bj973@bj7a9@set-library-visible?! bj7a9@set-library-visible?!) (set! bj7ab@library-source-file-name (lambda (bj846@x) (simple-struct-ref bj846@x '13))) (set! bj974@bj7ab@library-source-file-name bj7ab@library-source-file-name) (set! bj7ad@set-library-source-file-name! (lambda (bj848@x bj849@val) (simple-struct-set! bj848@x '13 bj849@val))) (set! bj975@bj7ad@set-library-source-file-name! bj7ad@set-library-source-file-name!) (set! bj7af@dummy '3) (set! bj976@bj7af@dummy bj7af@dummy) (set! bj7b1@find-dependencies (lambda (bj84c@ls) (if (null? bj84c@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! bj977@bj7b1@find-dependencies bj7b1@find-dependencies) (set! bj7b3@find-library-by (lambda (bj84e@pred) (let bj852@f ((bj850@ls ((bj769@current-library-collection)))) (if (null? bj850@ls) '#f (if (bj84e@pred (car bj850@ls)) (car bj850@ls) (bj852@f (cdr bj850@ls))))))) (set! bj978@bj7b3@find-library-by bj7b3@find-library-by) (set! bj7b5@library-path (bj6bf@bj59d@make-parameter '(".") (lambda (bj854@x) (if (and (list? bj854@x) (for-all string? bj854@x)) (map (lambda (bj856@x) bj856@x) bj854@x) (assertion-violation 'library-path '"not a list of strings" bj854@x))))) (set! bj979@bj7b5@library-path bj7b5@library-path) (set! bj7b7@library-extensions (bj6bf@bj59d@make-parameter '(".sls" ".ss" ".scm") (lambda (bj858@x) (if (and (list? bj858@x) (for-all string? bj858@x)) (map (lambda (bj85a@x) bj85a@x) bj858@x) (assertion-violation 'library-extensions '"not a list of strings" bj858@x))))) (set! bj97a@bj7b7@library-extensions bj7b7@library-extensions) (set! bj7b9@library-name->file-name (lambda (bj85c@x) (call-with-values (lambda () (open-string-output-port)) (lambda (bj862@bj85f bj863@bj861) (let ((bj866@extract bj863@bj861) (bj867@p bj862@bj85f)) (let ((bj86b@display-hex '#f)) (begin (set! bj86b@display-hex (lambda (bj874@n) (if (<= '0 bj874@n '9) (display bj874@n bj867@p) (display (integer->char (+ (char->integer '#\a) (- bj874@n '10))) bj867@p)))) (begin (let bj86e@f ((bj86c@ls bj85c@x)) (if (not (null? bj86c@ls)) (begin (display '"/" bj867@p) (for-each (lambda (bj870@c) (if (or (char<=? '#\a bj870@c '#\z) (char<=? '#\A bj870@c '#\Z) (char<=? '#\0 bj870@c '#\9) (memv bj870@c '(#\- #\. #\_ #\~))) (display bj870@c bj867@p) (begin (display '"%" bj867@p) (let ((bj872@n (char->integer bj870@c))) (begin (bj86b@display-hex (quotient bj872@n '16)) (bj86b@display-hex (remainder bj872@n '16))))))) (string->list (symbol->string (car bj86c@ls)))) (bj86e@f (cdr bj86c@ls))) (void))) (bj866@extract))))))))) (set! bj97b@bj7b9@library-name->file-name bj7b9@library-name->file-name) (set! bj7bb@file-locator (bj6bf@bj59d@make-parameter (lambda (bj876@x) (let ((bj878@str (bj7b9@library-name->file-name bj876@x))) (let bj880@f ((bj87a@ls (bj7b5@library-path)) (bj87b@exts (bj7b7@library-extensions)) (bj87c@failed-list '())) (if (null? bj87a@ls) (let ((bj88a@bj885 '#f) (bj88c@bj887 '#f) (bj88e@bj886 '#f) (bj891@bj884 '#f) (bj893@make-library-resolution-condition '#f) (bj895@bj882 '#f) (bj897@bj883 '#f) (bj899@library-resolution-condition? '#f) (bj89b@condition-library '#f) (bj89d@condition-files '#f)) (begin (set! bj88a@bj885 (make-record-type-descriptor '&library-resolution bj2b91@bj28d8@&condition-rtd 'bj888 '#f '#f '#((immutable library) (immutable files)))) (set! bj88c@bj887 '#f) (set! bj88e@bj886 (make-record-constructor-descriptor bj88a@bj885 bj2b92@bj28da@&condition-rcd bj88c@bj887)) (set! bj891@bj884 (record-predicate bj88a@bj885)) (set! bj893@make-library-resolution-condition (record-constructor bj88e@bj886)) (set! bj895@bj882 (record-accessor bj88a@bj885 '0)) (set! bj897@bj883 (record-accessor bj88a@bj885 '1)) (set! bj899@library-resolution-condition? (condition-predicate bj88a@bj885)) (set! bj89b@condition-library (condition-accessor bj88a@bj885 bj895@bj882)) (set! bj89d@condition-files (condition-accessor bj88a@bj885 bj897@bj883)) (raise (condition (bj2bb1@bj2972@make-error) (bj2bd3@bj29ce@make-who-condition 'expander) (bj2b97@bj292f@make-message-condition '"cannot locate library in library-path") (bj893@make-library-resolution-condition bj876@x (reverse bj87c@failed-list)))))) (if (null? bj87b@exts) (bj880@f (cdr bj87a@ls) (bj7b7@library-extensions) bj87c@failed-list) (let ((bj89e@name (string-append (car bj87a@ls) bj878@str (car bj87b@exts)))) (if (file-exists? bj89e@name) bj89e@name (bj880@f bj87a@ls (cdr bj87b@exts) (cons bj89e@name bj87c@failed-list))))))))) (lambda (bj8a0@f) (if (procedure? bj8a0@f) bj8a0@f (assertion-violation 'file-locator '"not a procedure" bj8a0@f))))) (set! bj97c@bj7bb@file-locator bj7bb@file-locator) (set! bj7bd@serialize-all (lambda (bj8a2@serialize bj8a3@compile) (let ((bj8a7@library-desc '#f)) (begin (set! bj8a7@library-desc (lambda (bj8aa@x) (list (bj777@library-id bj8aa@x) (bj77b@library-name bj8aa@x)))) (for-each (lambda (bj8a8@x) (if (bj7ab@library-source-file-name bj8a8@x) (bj8a2@serialize (bj7ab@library-source-file-name bj8a8@x) (list (bj777@library-id bj8a8@x) (bj77b@library-name bj8a8@x) (bj77f@library-version bj8a8@x) (map bj8a7@library-desc (bj783@library-imp* bj8a8@x)) (map bj8a7@library-desc (bj787@library-vis* bj8a8@x)) (map bj8a7@library-desc (bj78b@library-inv* bj8a8@x)) (bj78f@library-subst bj8a8@x) (bj793@library-env bj8a8@x) (bj8a3@compile (bj79f@library-visit-code bj8a8@x)) (bj8a3@compile (bj7a3@library-invoke-code bj8a8@x)) (bj7a7@library-visible? bj8a8@x))) (void))) ((bj769@current-library-collection))))))) (set! bj97d@bj7bd@serialize-all bj7bd@serialize-all) (set! bj7bf@current-precompiled-library-loader (bj6bf@bj59d@make-parameter (lambda (bj8ac@filename bj8ad@sk) '#f))) (set! bj97e@bj7bf@current-precompiled-library-loader bj7bf@current-precompiled-library-loader) (set! bj7c1@try-load-from-file (lambda (bj8b0@filename) ((bj7bf@current-precompiled-library-loader) bj8b0@filename (lambda bj8d6 (let ((bj8d7 (length bj8d6))) (if (= bj8d7 '11) (apply (lambda (bj8b2@id bj8b3@name bj8b4@ver bj8b5@imp* bj8b6@vis* bj8b7@inv* bj8b8@exp-subst bj8b9@exp-env bj8ba@visit-proc bj8bb@invoke-proc bj8bc@visible?) (let bj8ca@f ((bj8c8@deps (append bj8b5@imp* bj8b6@vis* bj8b7@inv*))) (if (null? bj8c8@deps) (begin (bj7d5@install-library bj8b2@id bj8b3@name bj8b4@ver bj8b5@imp* bj8b6@vis* bj8b7@inv* bj8b8@exp-subst bj8b9@exp-env bj8ba@visit-proc bj8bb@invoke-proc '#f '#f bj8bc@visible? '#f) '#t) (let ((bj8cc@d (car bj8c8@deps))) (let ((bj8ce@label (car bj8cc@d)) (bj8cf@dname (cadr bj8cc@d))) (let ((bj8d2@l (bj7cb@find-library-by-name bj8cf@dname))) (if (and (bj775@library? bj8d2@l) (eq? bj8ce@label (bj777@library-id bj8d2@l))) (bj8ca@f (cdr bj8c8@deps)) (begin (if bj6b9@bj591@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" bj8b3@name bj8cf@dname bj8b0@filename bj8d2@l bj8ce@label (bj777@library-id bj8d2@l)) (void)) '#f)))))))) bj8d6) (if (>= bj8d7 '0) (apply (lambda bj8d4@others '#f) bj8d6) (error 'apply '"invalid arg count")))))))) (set! bj97f@bj7c1@try-load-from-file bj7c1@try-load-from-file) (set! bj7c3@library-loader (bj6bf@bj59d@make-parameter (lambda (bj8d8@x) (let ((bj8da@file-name ((bj7bb@file-locator) bj8d8@x))) (if (not bj8da@file-name) (assertion-violation '#f '"cannot file library" bj8d8@x) (or (bj7c1@try-load-from-file bj8da@file-name) ((bj7c5@current-library-expander) (bj6be@bj59b@read-library-source-file bj8da@file-name) bj8da@file-name (lambda (bj8dc@name) (if (not (fast-equal? bj8dc@name bj8d8@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (bj8e2@bj8df bj8e3@bj8e1) (let ((bj8e6@e bj8e3@bj8e1) (bj8e7@p bj8e2@bj8df)) (begin (display '"expected to find library " bj8e7@p) (write bj8d8@x bj8e7@p) (display '" in file " bj8e7@p) (display bj8da@file-name bj8e7@p) (display '", found " bj8e7@p) (write bj8dc@name bj8e7@p) (display '" instead" bj8e7@p) (bj8e6@e)))))) (void)))))))) (lambda (bj8ea@f) (if (procedure? bj8ea@f) bj8ea@f (assertion-violation 'library-locator '"not a procedure" bj8ea@f))))) (set! bj980@bj7c3@library-loader bj7c3@library-loader) (set! bj7c5@current-library-expander (bj6bf@bj59d@make-parameter (lambda (bj8ec@x) (assertion-violation 'library-expander '"not initialized")) (lambda (bj8ee@f) (if (procedure? bj8ee@f) bj8ee@f (assertion-violation 'library-expander '"not a procedure" bj8ee@f))))) (set! bj981@bj7c5@current-library-expander bj7c5@current-library-expander) (set! bj7c7@external-pending-libraries (bj6bf@bj59d@make-parameter '())) (set! bj982@bj7c7@external-pending-libraries bj7c7@external-pending-libraries) (set! bj7c9@find-external-library (lambda (bj8f0@name) (begin (if (member bj8f0@name (bj7c7@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" bj8f0@name) (void)) (let ((bj8f6@bj8f3 bj7c7@external-pending-libraries) (bj8f7@bj8f5 (cons bj8f0@name (bj7c7@external-pending-libraries)))) (let ((bj8fa@swap (lambda () (let ((bj8fc@t (bj8f6@bj8f3))) (begin (bj8f6@bj8f3 bj8f7@bj8f5) (set! bj8f7@bj8f5 bj8fc@t)))))) (dynamic-wind bj8fa@swap (lambda () (begin ((bj7c3@library-loader) bj8f0@name) (or (bj7b3@find-library-by (lambda (bj8fe@x) (fast-equal? (bj77b@library-name bj8fe@x) bj8f0@name))) (assertion-violation '#f '"handling external library did not yield the correct library" bj8f0@name)))) bj8fa@swap)))))) (set! bj983@bj7c9@find-external-library bj7c9@find-external-library) (set! bj7cb@find-library-by-name (lambda (bj900@name) (or (bj7b3@find-library-by (lambda (bj902@x) (fast-equal? (bj77b@library-name bj902@x) bj900@name))) (bj7c9@find-external-library bj900@name)))) (set! bj984@bj7cb@find-library-by-name bj7cb@find-library-by-name) (set! bj7cd@library-exists? (lambda (bj904@name) (and (bj7b3@find-library-by (lambda (bj906@x) (fast-equal? (bj77b@library-name bj906@x) bj904@name))) '#t))) (set! bj985@bj7cd@library-exists? bj7cd@library-exists?) (set! bj7cf@find-library-by-spec/die (lambda (bj908@spec) (let ((bj90a@id (car bj908@spec))) (or (bj7b3@find-library-by (lambda (bj90c@x) (eq? bj90a@id (bj777@library-id bj90c@x)))) (assertion-violation '#f '"cannot find library with required spec" bj908@spec))))) (set! bj986@bj7cf@find-library-by-spec/die bj7cf@find-library-by-spec/die) (set! bj7d1@label->binding-table (make-eq-hashtable)) (set! bj987@bj7d1@label->binding-table bj7d1@label->binding-table) (set! bj7d3@install-library-record (lambda (bj90e@lib) (begin (let ((bj910@exp-env (bj793@library-env bj90e@lib))) (for-each (lambda (bj912@x) (let ((bj914@label (car bj912@x)) (bj915@binding (cdr bj912@x))) (let ((bj918@binding (let ((bj91a@t (car bj915@binding))) (if (memv bj91a@t '(global)) (cons 'global (cons bj90e@lib (cdr bj915@binding))) (if (memv bj91a@t '(global-macro)) (cons 'global-macro (cons bj90e@lib (cdr bj915@binding))) (if (memv bj91a@t '(global-macro!)) (cons 'global-macro! (cons bj90e@lib (cdr bj915@binding))) bj915@binding)))))) (begin (if (hashtable-ref bj7d1@label->binding-table bj914@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" bj914@label (hashtable-ref bj7d1@label->binding-table bj914@label '#f) bj918@binding) (exit)) (void)) (hashtable-set! bj7d1@label->binding-table bj914@label bj918@binding))))) bj910@exp-env)) ((bj769@current-library-collection) bj90e@lib)))) (set! bj988@bj7d3@install-library-record bj7d3@install-library-record) (set! bj7d5@install-library (lambda (bj91c@id bj91d@name bj91e@ver bj91f@imp* bj920@vis* bj921@inv* bj922@exp-subst bj923@exp-env bj924@visit-proc bj925@invoke-proc bj926@visit-code bj927@invoke-code bj928@visible? bj929@source-file-name) (let ((bj938@imp-lib* (map bj7cf@find-library-by-spec/die bj91f@imp*)) (bj939@vis-lib* (map bj7cf@find-library-by-spec/die bj920@vis*)) (bj93a@inv-lib* (map bj7cf@find-library-by-spec/die bj921@inv*))) (begin (if (not (and (symbol? bj91c@id) (list? bj91d@name) (list? bj91e@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" bj91c@id bj91d@name bj91e@ver) (void)) (if (bj7cd@library-exists? bj91d@name) (assertion-violation 'install-library '"library is already installed" bj91d@name) (void)) (let ((bj93e@lib (make-simple-struct 'library '15 (list bj91c@id bj91d@name bj91e@ver bj938@imp-lib* bj939@vis-lib* bj93a@inv-lib* bj922@exp-subst bj923@exp-env bj924@visit-proc bj925@invoke-proc bj926@visit-code bj927@invoke-code bj928@visible? bj929@source-file-name)))) (bj7d3@install-library-record bj93e@lib)))))) (set! bj989@bj7d5@install-library bj7d5@install-library) (set! bj7d7@imported-label->binding (lambda (bj940@lab) (hashtable-ref bj7d1@label->binding-table bj940@lab '#f))) (set! bj98a@bj7d7@imported-label->binding bj7d7@imported-label->binding) (set! bj7d9@invoke-library (lambda (bj942@lib) (let ((bj944@invoke (bj79b@library-invoke-state bj942@lib))) (if (procedure? bj944@invoke) (begin (bj79d@set-library-invoke-state! bj942@lib (lambda () (assertion-violation 'invoke '"circularity detected" bj942@lib))) (for-each bj7d9@invoke-library (bj78b@library-inv* bj942@lib)) (bj79d@set-library-invoke-state! bj942@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" bj942@lib))) (bj944@invoke) (bj79d@set-library-invoke-state! bj942@lib '#t)) (void))))) (set! bj98b@bj7d9@invoke-library bj7d9@invoke-library) (set! bj7db@visit-library (lambda (bj946@lib) (let ((bj948@visit (bj797@library-visit-state bj946@lib))) (if (procedure? bj948@visit) (begin (bj799@set-library-visit-state! bj946@lib (lambda () (assertion-violation 'visit '"circularity detected" bj946@lib))) (for-each bj7d9@invoke-library (bj787@library-vis* bj946@lib)) (bj799@set-library-visit-state! bj946@lib (lambda () (assertion-violation 'invoke '"first visit did not return" bj946@lib))) (bj948@visit) (bj799@set-library-visit-state! bj946@lib '#t)) (void))))) (set! bj98c@bj7db@visit-library bj7db@visit-library) (set! bj7dd@invoke-library-by-spec (lambda (bj94a@spec) (bj7d9@invoke-library (bj7cf@find-library-by-spec/die bj94a@spec)))) (set! bj98d@bj7dd@invoke-library-by-spec bj7dd@invoke-library-by-spec) (set! bj7df@installed-libraries (lambda bj952 (let ((bj953 (length bj952))) (if (= bj953 '1) (apply (lambda (bj94c@all?) (let bj950@f ((bj94e@ls ((bj769@current-library-collection)))) (if (null? bj94e@ls) '() (if (or bj94c@all? (bj7a7@library-visible? (car bj94e@ls))) (cons (car bj94e@ls) (bj950@f (cdr bj94e@ls))) (bj950@f (cdr bj94e@ls)))))) bj952) (if (= bj953 '0) (apply (lambda () (bj7df@installed-libraries '#f)) bj952) (error 'apply '"invalid arg count")))))) (set! bj98e@bj7df@installed-libraries bj7df@installed-libraries) (set! bj7e1@library-spec (lambda (bj954@x) (begin (if (not (bj775@library? bj954@x)) (assertion-violation 'library-spec '"not a library" bj954@x) (void)) (list (bj777@library-id bj954@x) (bj77b@library-name bj954@x) (bj77f@library-version bj954@x))))) (set! bj98f@bj7e1@library-spec bj7e1@library-spec) (void))
(begin (set! bj993@build-global-define (unspecified)) (set! bja04@build-lambda (unspecified)) (set! bja06@build-case-lambda (unspecified)) (set! bja34@build-sequence (unspecified)) (set! bja36@build-void (unspecified)) (set! bja38@build-letrec (unspecified)) (set! bja3a@build-let (unspecified)) (set! bja3c@build-named-let (unspecified)) (set! bja3e@build-letrec* (unspecified)) (set! bja40@build-library-letrec* (unspecified)) (set! bja42@build-receive (unspecified)) (set! bj993@build-global-define (lambda (bja43@x) (bja36@build-void))) (set! bjad7@bj993@build-global-define bj993@build-global-define) (set! bja04@build-lambda (lambda (bja45@ae bja46@vars bja47@exp) (list 'lambda bja46@vars bja47@exp))) (set! bjad8@bja04@build-lambda bja04@build-lambda) (set! bja06@build-case-lambda (lambda (bja4b@ae bja4c@vars* bja4d@exp*) (let ((bja52@build-error '#f) (bja54@build-pred '#f) (bja56@build-apply '#f) (bja58@expand-case-lambda '#f)) (begin (set! bja52@build-error (lambda (bja89@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! bja54@build-pred (lambda (bja71@ae bja72@n bja73@vars) (call-with-values (lambda () (let bja7f@f ((bja7b@vars bja73@vars) (bja7c@count '0)) (if (pair? bja7b@vars) (bja7f@f (cdr bja7b@vars) (+ bja7c@count '1)) (if (null? bja7b@vars) (values bja7c@count '=) (values bja7c@count '>=))))) (lambda (bja81@bja78 bja82@bja7a) (let ((bja85@pred bja82@bja7a) (bja86@count bja81@bja78)) (list (list 'primitive bja85@pred) bja72@n (list 'quote bja86@count))))))) (set! bja56@build-apply (lambda (bja69@ae bja6a@g bja6b@vars bja6c@exp) (list '(primitive apply) (bja04@build-lambda bja69@ae bja6b@vars bja6c@exp) bja6a@g))) (set! bja58@expand-case-lambda (lambda (bja59@ae bja5a@vars bja5b@exp*) (let ((bja5f@g (gensym)) (bja60@n (gensym))) (list 'lambda bja5f@g (bja3a@build-let bja59@ae (list bja60@n) (list (list '(primitive length) bja5f@g)) (let bja67@f ((bja63@vars* bja4c@vars*) (bja64@exp* bja5b@exp*)) (if (null? bja63@vars*) (bja52@build-error bja59@ae) (list 'if (bja54@build-pred bja59@ae bja60@n (car bja63@vars*)) (bja56@build-apply bja59@ae bja5f@g (car bja63@vars*) (car bja64@exp*)) (bja67@f (cdr bja63@vars*) (cdr bja64@exp*)))))))))) (if (= (length bja4d@exp*) '1) (bja04@build-lambda bja4b@ae (car bja4c@vars*) (car bja4d@exp*)) (bja58@expand-case-lambda bja4b@ae bja4c@vars* bja4d@exp*)))))) (set! bjad9@bja06@build-case-lambda bja06@build-case-lambda) (set! bja34@build-sequence (lambda (bja8b@ae bja8c@exps) (let bja91@loop ((bja8f@exps bja8c@exps)) (if (null? (cdr bja8f@exps)) (car bja8f@exps) (if (equal? (car bja8f@exps) (bja36@build-void)) (bja91@loop (cdr bja8f@exps)) (cons 'begin bja8f@exps)))))) (set! bjada@bja34@build-sequence bja34@build-sequence) (set! bja36@build-void (lambda () '((primitive void)))) (set! bjadb@bja36@build-void bja36@build-void) (set! bja38@build-letrec (lambda (bja93@ae bja94@vars bja95@val-exps bja96@body-exp) (if (null? bja94@vars) bja96@body-exp (list 'letrec (map list bja94@vars bja95@val-exps) bja96@body-exp)))) (set! bjadc@bja38@build-letrec bja38@build-letrec) (set! bja3a@build-let (lambda (bja9b@ae bja9c@vars bja9d@val-exps bja9e@body-exp) (if (null? bja9c@vars) bja9e@body-exp (list 'let (map list bja9c@vars bja9d@val-exps) bja9e@body-exp)))) (set! bjadd@bja3a@build-let bja3a@build-let) (set! bja3c@build-named-let (lambda (bjaa3@ae bjaa4@name bjaa5@vars bjaa6@val-exps bjaa7@body-exp) (list 'let bjaa4@name (map list bjaa5@vars bjaa6@val-exps) bjaa7@body-exp))) (set! bjade@bja3c@build-named-let bja3c@build-named-let) (set! bja3e@build-letrec* (lambda (bjaad@ae bjaae@vars bjaaf@val-exps bjab0@body-exp) (if (null? bjaae@vars) bjab0@body-exp (bja3a@build-let bjaad@ae bjaae@vars (map (lambda (bjab5@x) (list 'quote '#f)) bjaae@vars) (bja34@build-sequence bjaad@ae (append (map (lambda (bjab7@lhs bjab8@rhs) (list 'set! bjab7@lhs bjab8@rhs)) bjaae@vars bjaaf@val-exps) (list bjab0@body-exp))))))) (set! bjadf@bja3e@build-letrec* bja3e@build-letrec*) (set! bja40@build-library-letrec* (lambda (bjabb@ae bjabc@name bjabd@vars bjabe@locs bjabf@val-exps bjac0@body-exp) (cons 'begin (append (map (lambda (bjac7@var) (cons 'set! (cons bjac7@var '((unspecified))))) bjabd@vars) (append (apply append (map (lambda (bjac9@var bjaca@loc bjacb@val-exp) (list (list 'set! bjac9@var bjacb@val-exp) (list 'set! bjaca@loc bjac9@var))) bjabd@vars bjabe@locs bjabf@val-exps)) (list bjac0@body-exp)))))) (set! bjae0@bja40@build-library-letrec* bja40@build-library-letrec*) (set! bja42@build-receive (lambda (bjacf@ae bjad0@vars bjad1@producer bjad2@body*) (begin (display '"************** in ") (cons 'receive (cons bjad0@vars (cons bjad1@producer bjad2@body*)))))) (set! bjae1@bja42@build-receive bja42@build-receive) (void))
(begin (set! bjaf0@file-options-macro (unspecified)) (set! bjaf2@set-cons (unspecified)) (set! bjaf4@set-union (unspecified)) (set! bjaf9@top-mark* (unspecified)) (set! bjafb@top-marked? (unspecified)) (set! bjafd@gen-lexical (unspecified)) (set! bjaff@gen-global (unspecified)) (set! bjb01@gen-label (unspecified)) (set! bjb03@gen-top-level-label (unspecified)) (set! bjb05@gen-define-label+loc (unspecified)) (set! bjb07@gen-define-label (unspecified)) (set! bjb11@rib? (unspecified)) (set! bjb13@rib-sym* (unspecified)) (set! bjb15@set-rib-sym*! (unspecified)) (set! bjb17@rib-mark** (unspecified)) (set! bjb19@set-rib-mark**! (unspecified)) (set! bjb1b@rib-label* (unspecified)) (set! bjb1d@set-rib-label*! (unspecified)) (set! bjb1f@rib-sealed/freq (unspecified)) (set! bjb21@set-rib-sealed/freq! (unspecified)) (set! bjb23@rib-cache (unspecified)) (set! bjb25@set-rib-cache! (unspecified)) (set! bjb27@dummy (unspecified)) (set! bjb29@make-empty-rib (unspecified)) (set! bjb2b@extend-rib! (unspecified)) (set! bjb2d@extend-rib/nc! (unspecified)) (set! bjb2f@make-rib-map (unspecified)) (set! bjb31@seal-rib! (unspecified)) (set! bjb33@unseal-rib! (unspecified)) (set! bjb35@make-full-rib (unspecified)) (set! bjb37@rp (unspecified)) (set! bjb41@stx? (unspecified)) (set! bjb43@stx-expr (unspecified)) (set! bjb45@set-stx-expr! (unspecified)) (set! bjb47@stx-mark* (unspecified)) (set! bjb49@set-stx-mark*! (unspecified)) (set! bjb4b@stx-subst* (unspecified)) (set! bjb4d@set-stx-subst*! (unspecified)) (set! bjb4f@stx-ae* (unspecified)) (set! bjb51@set-stx-ae*! (unspecified)) (set! bjb53@dummy (unspecified)) (set! bjb55@datum->stx (unspecified)) (set! bjb57@gen-mark (unspecified)) (set! bjb59@anti-mark (unspecified)) (set! bjb5b@anti-mark? (unspecified)) (set! bjb5d@mkstx (unspecified)) (set! bjb5f@add-mark (unspecified)) (set! bjb61@add-subst (unspecified)) (set! bjb63@syntax-kind? (unspecified)) (set! bjb65@syntax-vector->list (unspecified)) (set! bjb67@syntax-pair? (unspecified)) (set! bjb69@syntax-vector? (unspecified)) (set! bjb6b@syntax-null? (unspecified)) (set! bjb6d@syntax-list? (unspecified)) (set! bjb6f@syntax-car (unspecified)) (set! bjb71@syntax-cdr (unspecified)) (set! bjb73@syntax->list (unspecified)) (set! bjb75@id? (unspecified)) (set! bjb77@id->sym (unspecified)) (set! bjb79@bound-id=? (unspecified)) (set! bjb7b@free-id=? (unspecified)) (set! bjb7d@valid-bound-ids? (unspecified)) (set! bjb7f@distinct-bound-ids? (unspecified)) (set! bjb81@bound-id-member? (unspecified)) (set! bjb83@self-evaluating? (unspecified)) (set! bjb85@strip-annotations (unspecified)) (set! bjb87@strip (unspecified)) (set! bjb89@stx->datum (unspecified)) (set! bjb8b@id->label (unspecified)) (set! bjb8d@label->binding (unspecified)) (set! bjb8f@make-binding (unspecified)) (set! bjb91@binding-type (unspecified)) (set! bjb93@binding-value (unspecified)) (set! bjb95@raise-unbound-error (unspecified)) (set! bjb97@syntax-type (unspecified)) (set! bjba5@sanitize-binding (unspecified)) (set! bjba7@make-variable-transformer (unspecified)) (set! bjba9@variable-transformer? (unspecified)) (set! bjbab@variable-transformer-procedure (unspecified)) (set! bjbad@make-eval-transformer (unspecified)) (set! bjcfe@parse-define (unspecified)) (set! bjd00@parse-define-syntax (unspecified)) (set! bjd02@scheme-stx-hashtable (unspecified)) (set! bjd04@scheme-stx (unspecified)) (set! bjd06@lexical-var (unspecified)) (set! bjd08@lexical-mutable? (unspecified)) (set! bjd0a@set-lexical-mutable! (unspecified)) (set! bjd0c@add-lexical (unspecified)) (set! bjd0e@add-lexicals (unspecified)) (set! bjd10@letrec-helper (unspecified)) (set! bjd12@let-transformer (unspecified)) (set! bjd14@letrec-transformer (unspecified)) (set! bjd16@letrec*-transformer (unspecified)) (set! bjd18@fluid-let-syntax-transformer (unspecified)) (set! bjd1a@type-descriptor-transformer (unspecified)) (set! bjd1c@record-type-descriptor-transformer (unspecified)) (set! bjd1e@record-constructor-descriptor-transformer (unspecified)) (set! bjd20@when-macro (unspecified)) (set! bjd22@unless-macro (unspecified)) (set! bjd24@if-transformer (unspecified)) (set! bjd26@and-transformer (unspecified)) (set! bjd28@or-transformer (unspecified)) (set! bjd2a@case-macro (unspecified)) (set! bjd2c@quote-transformer (unspecified)) (set! bjd2e@case-lambda-transformer (unspecified)) (set! bjd30@lambda-transformer (unspecified)) (set! bjd32@bless (unspecified)) (set! bjd34@with-syntax-macro (unspecified)) (set! bjd36@invalid-fmls-error (unspecified)) (set! bjd38@let-macro (unspecified)) (set! bjd3a@let-values-macro (unspecified)) (set! bjd3c@let*-values-macro (unspecified)) (set! bjd3e@trace-lambda-macro (unspecified)) (set! bjd40@trace-define-macro (unspecified)) (set! bjd42@trace-define-syntax-macro (unspecified)) (set! bjd44@trace-let/rec-syntax (unspecified)) (set! bjd46@trace-let-syntax-macro (unspecified)) (set! bjd48@trace-letrec-syntax-macro (unspecified)) (set! bjd4a@guard-macro (unspecified)) (set! bjd4c@define-enumeration-macro (unspecified)) (set! bjd4e@time-macro (unspecified)) (set! bjd50@delay-macro (unspecified)) (set! bjd52@assert-macro (unspecified)) (set! bjd54@endianness-macro (unspecified)) (set! bjd56@identifier-syntax-macro (unspecified)) (set! bjd58@do-macro (unspecified)) (set! bjd5a@let*-macro (unspecified)) (set! bjd5c@or-macro (unspecified)) (set! bjd5e@and-macro (unspecified)) (set! bjd60@cond-macro (unspecified)) (set! bjd62@do-include (unspecified)) (set! bjd64@include-macro (unspecified)) (set! bjd66@include-into-macro (unspecified)) (set! bjd68@syntax-rules-macro (unspecified)) (set! bjd6a@quasiquote-macro (unspecified)) (set! bjd6c@quasisyntax-macro (unspecified)) (set! bjd6e@define-struct-macro (unspecified)) (set! bjd70@define-record-type-macro (unspecified)) (set! bjd72@define-condition-type-macro (unspecified)) (set! bjd74@incorrect-usage-macro (unspecified)) (set! bjd76@parameterize-macro (unspecified)) (set! bjd78@foreign-call-transformer (unspecified)) (set! bjd7a@convert-pattern (unspecified)) (set! bjd7c@syntax-dispatch (unspecified)) (set! bjd7e@ellipsis? (unspecified)) (set! bjd80@underscore? (unspecified)) (set! bjd82@verify-literals (unspecified)) (set! bjd84@syntax-case-transformer (unspecified)) (set! bjd86@ellipsis-map (unspecified)) (set! bjd88@syntax-transformer (unspecified)) (set! bjd8a@core-macro-transformer (unspecified)) (set! bjd8c@symbol-macro (unspecified)) (set! bjd8e@macro-transformer (unspecified)) (set! bjd90@local-macro-transformer (unspecified)) (set! bjd92@do-macro-call (unspecified)) (set! bjd94@chi-macro (unspecified)) (set! bjd96@chi-local-macro (unspecified)) (set! bjd98@chi-global-macro (unspecified)) (set! bjd9a@chi-expr* (unspecified)) (set! bjd9c@chi-application (unspecified)) (set! bjd9e@chi-expr (unspecified)) (set! bjda0@chi-set! (unspecified)) (set! bjda2@verify-formals (unspecified)) (set! bjda4@chi-lambda-clause (unspecified)) (set! bjda6@chi-lambda-clause* (unspecified)) (set! bjda8@chi-defun (unspecified)) (set! bjdaa@chi-rhs (unspecified)) (set! bjdac@expand-interaction-rhs*/init* (unspecified)) (set! bjdae@chi-rhs* (unspecified)) (set! bjdb0@find-bound=? (unspecified)) (set! bjdb2@find-dups (unspecified)) (set! bjdb4@chi-internal (unspecified)) (set! bjdb6@parse-module (unspecified)) (set! bjdc0@module-interface? (unspecified)) (set! bjdc2@module-interface-first-mark (unspecified)) (set! bjdc4@set-module-interface-first-mark! (unspecified)) (set! bjdc6@module-interface-exp-id-vec (unspecified)) (set! bjdc8@set-module-interface-exp-id-vec! (unspecified)) (set! bjdca@module-interface-exp-lab-vec (unspecified)) (set! bjdcc@set-module-interface-exp-lab-vec! (unspecified)) (set! bjdce@dummy (unspecified)) (set! bjdd0@module-interface-exp-id* (unspecified)) (set! bjdd2@chi-internal-module (unspecified)) (set! bjdd4@chi-body* (unspecified)) (set! bjdd6@expand-transformer (unspecified)) (set! bjdd8@parse-exports (unspecified)) (set! bjdda@parse-library-name (unspecified)) (set! bjddc@parse-library (unspecified)) (set! bjdde@parse-import-spec* (unspecified)) (set! bjde0@make-top-rib (unspecified)) (set! bjde2@make-collector (unspecified)) (set! bjde4@inv-collector (unspecified)) (set! bjde6@vis-collector (unspecified)) (set! bjde8@imp-collector (unspecified)) (set! bjdea@chi-library-internal (unspecified)) (set! bjdec@chi-interaction-expr (unspecified)) (set! bjdee@library-body-expander (unspecified)) (set! bjdf0@core-library-expander (unspecified)) (set! bjdf2@parse-top-level-program (unspecified)) (set! bjdf4@top-level-expander (unspecified)) (set! bjdf6@rp (unspecified)) (set! bje00@env? (unspecified)) (set! bje02@env-names (unspecified)) (set! bje04@set-env-names! (unspecified)) (set! bje06@env-labels (unspecified)) (set! bje08@set-env-labels! (unspecified)) (set! bje0a@env-itc (unspecified)) (set! bje0c@set-env-itc! (unspecified)) (set! bje0e@dummy (unspecified)) (set! bje10@rp (unspecified)) (set! bje1a@interaction-env? (unspecified)) (set! bje1c@interaction-env-rib (unspecified)) (set! bje1e@set-interaction-env-rib! (unspecified)) (set! bje20@interaction-env-r (unspecified)) (set! bje22@set-interaction-env-r! (unspecified)) (set! bje24@interaction-env-locs (unspecified)) (set! bje26@set-interaction-env-locs! (unspecified)) (set! bje28@dummy (unspecified)) (set! bje2a@interaction-environment-symbols (unspecified)) (set! bje2c@environment-bindings (unspecified)) (set! bje2e@parse-binding (unspecified)) (set! bje30@environment? (unspecified)) (set! bje32@environment-symbols (unspecified)) (set! bje34@environment (unspecified)) (set! bje36@null-environment (unspecified)) (set! bje38@scheme-report-environment (unspecified)) (set! bje3a@expand (unspecified)) (set! bje3c@eval (unspecified)) (set! bje3e@library-expander (unspecified)) (set! bje40@boot-library-expand (unspecified)) (set! bje42@rev-map-append (unspecified)) (set! bje44@build-exports (unspecified)) (set! bje46@make-export-subst (unspecified)) (set! bje48@make-export-env/macros (unspecified)) (set! bje4a@generate-temporaries (unspecified)) (set! bje4c@free-identifier=? (unspecified)) (set! bje4e@bound-identifier=? (unspecified)) (set! bje50@make-source-condition (unspecified)) (set! bje52@extract-position-condition (unspecified)) (set! bje54@expression-position (unspecified)) (set! bje56@assertion-error (unspecified)) (set! bje58@syntax-error (unspecified)) (set! bje5a@syntax-violation* (unspecified)) (set! bje5c@syntax-violation (unspecified)) (set! bje5e@identifier? (unspecified)) (set! bje60@datum->syntax (unspecified)) (set! bje62@syntax->datum (unspecified)) (set! bje64@ungensym-all (unspecified)) (set! bje66@compile-r6rs-top-level (unspecified)) (set! bje68@pre-compile-r6rs-top-level (unspecified)) (set! bje6a@interaction-environment (unspecified)) (set! bje6c@top-level-context (unspecified)) (set! bjaf0@file-options-macro (lambda (bje6d@x) (let ((bje70@valid-option? '#f)) (begin (set! bje70@valid-option? (lambda (bje79@x) (and (bjb75@id? bje79@x) (memq (bjb77@id->sym bje79@x) '(no-fail no-create no-truncate))))) (let ((bje71@t bje6d@x)) (let ((bje73@ls/false (bjd7c@syntax-dispatch bje71@t '(_ . each-any)))) (if (and bje73@ls/false (apply (lambda (bje75@opt*) (for-all bje70@valid-option? bje75@opt*)) bje73@ls/false)) (apply (lambda (bje77@opt*) (bjd32@bless (list 'make-file-options (list 'quote bje77@opt*)))) bje73@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bje71@t)))))))) (set! bj27c3@bjaf0@file-options-macro bjaf0@file-options-macro) (set! bjaf2@set-cons (lambda (bje7b@x bje7c@ls) (if (memq bje7b@x bje7c@ls) bje7c@ls (cons bje7b@x bje7c@ls)))) (set! bj27c4@bjaf2@set-cons bjaf2@set-cons) (set! bjaf4@set-union (lambda (bje7f@ls1 bje80@ls2) (if (null? bje7f@ls1) bje80@ls2 (if (memq (car bje7f@ls1) bje80@ls2) (bjaf4@set-union (cdr bje7f@ls1) bje80@ls2) (cons (car bje7f@ls1) (bjaf4@set-union (cdr bje7f@ls1) bje80@ls2)))))) (set! bj27c5@bjaf4@set-union bjaf4@set-union) (set! bjaf9@top-mark* '(top)) (set! bj27c6@bjaf9@top-mark* bjaf9@top-mark*) (set! bjafb@top-marked? (lambda (bje83@m*) (memq 'top bje83@m*))) (set! bj27c7@bjafb@top-marked? bjafb@top-marked?) (set! bjafd@gen-lexical (lambda (bje85@sym) (if (symbol? bje85@sym) (gensym bje85@sym) (if (bjb41@stx? bje85@sym) (bjafd@gen-lexical (bjb77@id->sym bje85@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" bje85@sym))))) (set! bj27c8@bjafd@gen-lexical bjafd@gen-lexical) (set! bjaff@gen-global (lambda (bje87@x) (bjafd@gen-lexical bje87@x))) (set! bj27c9@bjaff@gen-global bjaff@gen-global) (set! bjb01@gen-label (lambda (bje89@_) (gensym))) (set! bj27ca@bjb01@gen-label bjb01@gen-label) (set! bjb03@gen-top-level-label (lambda (bje8b@id bje8c@rib) (let ((bje90@find '#f)) (begin (set! bje90@find (lambda (bje9b@sym bje9c@mark* bje9d@sym* bje9e@mark** bje9f@label*) (and (pair? bje9d@sym*) (if (and (eq? bje9b@sym (car bje9d@sym*)) (same-marks? bje9c@mark* (car bje9e@mark**))) (car bje9f@label*) (bje90@find bje9b@sym bje9c@mark* (cdr bje9d@sym*) (cdr bje9e@mark**) (cdr bje9f@label*)))))) (let ((bje91@sym (bjb77@id->sym bje8b@id)) (bje92@mark* (bjb47@stx-mark* bje8b@id))) (let ((bje95@sym* (bjb13@rib-sym* bje8c@rib))) (let ((bje97@t (and (memq bje91@sym (bjb13@rib-sym* bje8c@rib)) (bje90@find bje91@sym bje92@mark* bje95@sym* (bjb17@rib-mark** bje8c@rib) (bjb1b@rib-label* bje8c@rib))))) (if bje97@t ((lambda (bje99@label) (if (bj98a@bj7d7@imported-label->binding bje99@label) (gensym) bje99@label)) bje97@t) (gensym))))))))) (set! bj27cb@bjb03@gen-top-level-label bjb03@gen-top-level-label) (set! bjb05@gen-define-label+loc (lambda (bjea5@id bjea6@rib) (let ((bjea9@t (bje6c@top-level-context))) (if bjea9@t ((lambda (bjeab@env) (let ((bjead@label (bjb03@gen-top-level-label bjea5@id bjea6@rib)) (bjeae@locs (bje24@interaction-env-locs bjeab@env))) (values bjead@label (let ((bjeb1@t (assq bjead@label bjeae@locs))) (if bjeb1@t (cdr bjeb1@t) (let ((bjeb3@loc (bjafd@gen-lexical bjea5@id))) (begin (bje26@set-interaction-env-locs! bjeab@env (cons (cons bjead@label bjeb3@loc) bjeae@locs)) bjeb3@loc))))))) bjea9@t) (values (gensym) (bjafd@gen-lexical bjea5@id)))))) (set! bj27cc@bjb05@gen-define-label+loc bjb05@gen-define-label+loc) (set! bjb07@gen-define-label (lambda (bjeb5@id bjeb6@rib) (if (bje6c@top-level-context) (bjb03@gen-top-level-label bjeb5@id bjeb6@rib) (gensym)))) (set! bj27cd@bjb07@gen-define-label bjb07@gen-define-label) (set! bjb11@rib? (lambda (bjeb9@x) (and (simple-struct? bjeb9@x) (eq? (simple-struct-name bjeb9@x) 'rib)))) (set! bj27ce@bjb11@rib? bjb11@rib?) (set! bjb13@rib-sym* (lambda (bjebb@x) (simple-struct-ref bjebb@x '0))) (set! bj27cf@bjb13@rib-sym* bjb13@rib-sym*) (set! bjb15@set-rib-sym*! (lambda (bjebd@x bjebe@val) (simple-struct-set! bjebd@x '0 bjebe@val))) (set! bj27d0@bjb15@set-rib-sym*! bjb15@set-rib-sym*!) (set! bjb17@rib-mark** (lambda (bjec1@x) (simple-struct-ref bjec1@x '1))) (set! bj27d1@bjb17@rib-mark** bjb17@rib-mark**) (set! bjb19@set-rib-mark**! (lambda (bjec3@x bjec4@val) (simple-struct-set! bjec3@x '1 bjec4@val))) (set! bj27d2@bjb19@set-rib-mark**! bjb19@set-rib-mark**!) (set! bjb1b@rib-label* (lambda (bjec7@x) (simple-struct-ref bjec7@x '2))) (set! bj27d3@bjb1b@rib-label* bjb1b@rib-label*) (set! bjb1d@set-rib-label*! (lambda (bjec9@x bjeca@val) (simple-struct-set! bjec9@x '2 bjeca@val))) (set! bj27d4@bjb1d@set-rib-label*! bjb1d@set-rib-label*!) (set! bjb1f@rib-sealed/freq (lambda (bjecd@x) (simple-struct-ref bjecd@x '3))) (set! bj27d5@bjb1f@rib-sealed/freq bjb1f@rib-sealed/freq) (set! bjb21@set-rib-sealed/freq! (lambda (bjecf@x bjed0@val) (simple-struct-set! bjecf@x '3 bjed0@val))) (set! bj27d6@bjb21@set-rib-sealed/freq! bjb21@set-rib-sealed/freq!) (set! bjb23@rib-cache (lambda (bjed3@x) (simple-struct-ref bjed3@x '4))) (set! bj27d7@bjb23@rib-cache bjb23@rib-cache) (set! bjb25@set-rib-cache! (lambda (bjed5@x bjed6@val) (simple-struct-set! bjed5@x '4 bjed6@val))) (set! bj27d8@bjb25@set-rib-cache! bjb25@set-rib-cache!) (set! bjb27@dummy '3) (set! bj27d9@bjb27@dummy bjb27@dummy) (set! bjb29@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! bj27da@bjb29@make-empty-rib bjb29@make-empty-rib) (set! bjb2b@extend-rib! (lambda (bjed9@rib bjeda@id bjedb@label) (let ((bjee0@find '#f)) (begin (set! bjee0@find (lambda (bjeed@sym bjeee@mark* bjeef@sym* bjef0@mark** bjef1@label*) (and (pair? bjeef@sym*) (if (and (eq? bjeed@sym (car bjeef@sym*)) (same-marks? bjeee@mark* (car bjef0@mark**))) bjef1@label* (bjee0@find bjeed@sym bjeee@mark* (cdr bjeef@sym*) (cdr bjef0@mark**) (cdr bjef1@label*)))))) (begin (if (bjb1f@rib-sealed/freq bjed9@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" bjed9@rib) (void)) (let ((bjee1@sym (bjb77@id->sym bjeda@id)) (bjee2@mark* (bjb47@stx-mark* bjeda@id))) (let ((bjee5@sym* (bjb13@rib-sym* bjed9@rib))) (let ((bjee7@t (and (memq bjee1@sym (bjb13@rib-sym* bjed9@rib)) (bjee0@find bjee1@sym bjee2@mark* bjee5@sym* (bjb17@rib-mark** bjed9@rib) (bjb1b@rib-label* bjed9@rib))))) (if bjee7@t ((lambda (bjee9@p) (if (not (eq? bjedb@label (car bjee9@p))) (if (bje6c@top-level-context) (set-car! bjee9@p bjedb@label) (bje5c@syntax-violation '#f '"multiple definitions of identifier" bjeda@id)) (void))) bjee7@t) (begin (if (bjb23@rib-cache bjed9@rib) (hashtable-update! (bjb23@rib-cache bjed9@rib) bjee1@sym (lambda (bjeeb@e) (cons (cons bjee2@mark* bjedb@label) bjeeb@e)) '()) (void)) (bjb15@set-rib-sym*! bjed9@rib (cons bjee1@sym bjee5@sym*)) (bjb19@set-rib-mark**! bjed9@rib (cons bjee2@mark* (bjb17@rib-mark** bjed9@rib))) (bjb1d@set-rib-label*! bjed9@rib (cons bjedb@label (bjb1b@rib-label* bjed9@rib))))))))))))) (set! bj27db@bjb2b@extend-rib! bjb2b@extend-rib!) (set! bjb2d@extend-rib/nc! (lambda (bjef7@rib bjef8@id bjef9@label) (let ((bjefd@sym (bjb77@id->sym bjef8@id)) (bjefe@mark* (bjb47@stx-mark* bjef8@id))) (let ((bjf01@sym* (bjb13@rib-sym* bjef7@rib))) (begin (if (bjb23@rib-cache bjef7@rib) (hashtable-update! (bjb23@rib-cache bjef7@rib) bjefd@sym (lambda (bjf03@e) (cons (cons bjefe@mark* bjef9@label) bjf03@e)) '()) (void)) (bjb15@set-rib-sym*! bjef7@rib (cons bjefd@sym bjf01@sym*)) (bjb19@set-rib-mark**! bjef7@rib (cons bjefe@mark* (bjb17@rib-mark** bjef7@rib))) (bjb1d@set-rib-label*! bjef7@rib (cons bjef9@label (bjb1b@rib-label* bjef7@rib)))))))) (set! bj27dc@bjb2d@extend-rib/nc! bjb2d@extend-rib/nc!) (set! bjb2f@make-rib-map (lambda (bjf05@sym*) (let ((bjf07@ht (make-eq-hashtable))) (let bjf0d@f ((bjf09@i '0) (bjf0a@sym* bjf05@sym*)) (if (null? bjf0a@sym*) bjf07@ht (begin (hashtable-update! bjf07@ht (car bjf0a@sym*) (lambda (bjf0f@x) (cons bjf09@i bjf0f@x)) '()) (bjf0d@f (+ bjf09@i '1) (cdr bjf0a@sym*)))))))) (set! bj27dd@bjb2f@make-rib-map bjb2f@make-rib-map) (set! bjb31@seal-rib! (lambda (bjf11@rib) (let ((bjf13@sym* (bjb13@rib-sym* bjf11@rib))) (if (not (null? bjf13@sym*)) (begin (bjb15@set-rib-sym*! bjf11@rib (list->vector bjf13@sym*)) (bjb19@set-rib-mark**! bjf11@rib (list->vector (bjb17@rib-mark** bjf11@rib))) (bjb1d@set-rib-label*! bjf11@rib (list->vector (bjb1b@rib-label* bjf11@rib))) (bjb21@set-rib-sealed/freq! bjf11@rib (bjb2f@make-rib-map bjf13@sym*))) (void))))) (set! bj27de@bjb31@seal-rib! bjb31@seal-rib!) (set! bjb33@unseal-rib! (lambda (bjf15@rib) (if (bjb1f@rib-sealed/freq bjf15@rib) (begin (bjb21@set-rib-sealed/freq! bjf15@rib '#f) (bjb15@set-rib-sym*! bjf15@rib (vector->list (bjb13@rib-sym* bjf15@rib))) (bjb19@set-rib-mark**! bjf15@rib (vector->list (bjb17@rib-mark** bjf15@rib))) (bjb1d@set-rib-label*! bjf15@rib (vector->list (bjb1b@rib-label* bjf15@rib)))) (void)))) (set! bj27df@bjb33@unseal-rib! bjb33@unseal-rib!) (set! bjb35@make-full-rib (lambda (bjf17@id* bjf18@label*) (let ((bjf1b@r (make-simple-struct 'rib '6 (list (map bjb77@id->sym bjf17@id*) (map bjb47@stx-mark* bjf17@id*) bjf18@label* '#f '#f)))) (begin (bjb31@seal-rib! bjf1b@r) bjf1b@r)))) (set! bj27e0@bjb35@make-full-rib bjb35@make-full-rib) (set! bjb37@rp (bj6bc@bj597@make-record-printer 'stx (lambda (bjf1d@x bjf1e@p bjf1f@wr) (begin (display '"#<syntax " bjf1e@p) (write (bjb89@stx->datum bjf1d@x) bjf1e@p) (let ((bjf23@expr (bjb43@stx-expr bjf1d@x))) (if (bj6b3@bj585@annotation? bjf23@expr) (let ((bjf25@src (bj6b4@bj587@annotation-source bjf23@expr))) (if (pair? bjf25@src) (begin (display '" [" bjf1e@p) (display (cdr bjf25@src) bjf1e@p) (display '" of " bjf1e@p) (display (car bjf25@src) bjf1e@p) (display '"]" bjf1e@p)) (void))) (void))) (display '">" bjf1e@p))))) (set! bj27e1@bjb37@rp bjb37@rp) (set! bjb41@stx? (lambda (bjf27@x) (and (simple-struct? bjf27@x) (eq? (simple-struct-name bjf27@x) 'stx)))) (set! bj27e2@bjb41@stx? bjb41@stx?) (set! bjb43@stx-expr (lambda (bjf29@x) (simple-struct-ref bjf29@x '0))) (set! bj27e3@bjb43@stx-expr bjb43@stx-expr) (set! bjb45@set-stx-expr! (lambda (bjf2b@x bjf2c@val) (simple-struct-set! bjf2b@x '0 bjf2c@val))) (set! bj27e4@bjb45@set-stx-expr! bjb45@set-stx-expr!) (set! bjb47@stx-mark* (lambda (bjf2f@x) (simple-struct-ref bjf2f@x '1))) (set! bj27e5@bjb47@stx-mark* bjb47@stx-mark*) (set! bjb49@set-stx-mark*! (lambda (bjf31@x bjf32@val) (simple-struct-set! bjf31@x '1 bjf32@val))) (set! bj27e6@bjb49@set-stx-mark*! bjb49@set-stx-mark*!) (set! bjb4b@stx-subst* (lambda (bjf35@x) (simple-struct-ref bjf35@x '2))) (set! bj27e7@bjb4b@stx-subst* bjb4b@stx-subst*) (set! bjb4d@set-stx-subst*! (lambda (bjf37@x bjf38@val) (simple-struct-set! bjf37@x '2 bjf38@val))) (set! bj27e8@bjb4d@set-stx-subst*! bjb4d@set-stx-subst*!) (set! bjb4f@stx-ae* (lambda (bjf3b@x) (simple-struct-ref bjf3b@x '3))) (set! bj27e9@bjb4f@stx-ae* bjb4f@stx-ae*) (set! bjb51@set-stx-ae*! (lambda (bjf3d@x bjf3e@val) (simple-struct-set! bjf3d@x '3 bjf3e@val))) (set! bj27ea@bjb51@set-stx-ae*! bjb51@set-stx-ae*!) (set! bjb53@dummy '3) (set! bj27eb@bjb53@dummy bjb53@dummy) (set! bjb55@datum->stx (lambda (bjf41@id bjf42@datum) (make-simple-struct 'stx '5 (list bjf42@datum (bjb47@stx-mark* bjf41@id) (bjb4b@stx-subst* bjf41@id) (bjb4f@stx-ae* bjf41@id))))) (set! bj27ec@bjb55@datum->stx bjb55@datum->stx) (set! bjb57@gen-mark (lambda () (string '#\m))) (set! bj27ed@bjb57@gen-mark bjb57@gen-mark) (set! bjb59@anti-mark '#f) (set! bj27ee@bjb59@anti-mark bjb59@anti-mark) (set! bjb5b@anti-mark? not) (set! bj27ef@bjb5b@anti-mark? bjb5b@anti-mark?) (set! bjb5d@mkstx (lambda (bjf45@e bjf46@m* bjf47@s* bjf48@ae*) (if (and (bjb41@stx? bjf45@e) (not (bjafb@top-marked? bjf46@m*))) (call-with-values (lambda () (join-wraps bjf46@m* bjf47@s* bjf48@ae* bjf45@e)) (lambda (bjf53@bjf4e bjf54@bjf50 bjf55@bjf52) (let ((bjf59@ae* bjf55@bjf52) (bjf5a@s* bjf54@bjf50) (bjf5b@m* bjf53@bjf4e)) (make-simple-struct 'stx '5 (list (bjb43@stx-expr bjf45@e) bjf5b@m* bjf5a@s* bjf59@ae*))))) (make-simple-struct 'stx '5 (list bjf45@e bjf46@m* bjf47@s* bjf48@ae*))))) (set! bj27f0@bjb5d@mkstx bjb5d@mkstx) (set! bjb5f@add-mark (lambda (bjf5f@m bjf60@e bjf61@ae) (bjb5d@mkstx bjf60@e (list bjf5f@m) '(shift) (list bjf61@ae)))) (set! bj27f1@bjb5f@add-mark bjb5f@add-mark) (set! bjb61@add-subst (lambda (bjf65@subst bjf66@e) (bjb5d@mkstx bjf66@e '() (list bjf65@subst) '()))) (set! bj27f2@bjb61@add-subst bjb61@add-subst) (set! bjb63@syntax-kind? (lambda (bjf69@x bjf6a@p?) (if (bjb41@stx? bjf69@x) (bjb63@syntax-kind? (bjb43@stx-expr bjf69@x) bjf6a@p?) (if (bj6b3@bj585@annotation? bjf69@x) (bjb63@syntax-kind? (bj6b5@bj589@annotation-expression bjf69@x) bjf6a@p?) (bjf6a@p? bjf69@x))))) (set! bj27f3@bjb63@syntax-kind? bjb63@syntax-kind?) (set! bjb65@syntax-vector->list (lambda (bjf6d@x) (if (bjb41@stx? bjf6d@x) (let ((bjf6f@ls (bjb65@syntax-vector->list (bjb43@stx-expr bjf6d@x))) (bjf70@m* (bjb47@stx-mark* bjf6d@x)) (bjf71@s* (bjb4b@stx-subst* bjf6d@x)) (bjf72@ae* (bjb4f@stx-ae* bjf6d@x))) (map (lambda (bjf77@x) (bjb5d@mkstx bjf77@x bjf70@m* bjf71@s* bjf72@ae*)) bjf6f@ls)) (if (bj6b3@bj585@annotation? bjf6d@x) (bjb65@syntax-vector->list (bj6b5@bj589@annotation-expression bjf6d@x)) (if (vector? bjf6d@x) (vector->list bjf6d@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" bjf6d@x)))))) (set! bj27f4@bjb65@syntax-vector->list bjb65@syntax-vector->list) (set! bjb67@syntax-pair? (lambda (bjf79@x) (bjb63@syntax-kind? bjf79@x pair?))) (set! bj27f5@bjb67@syntax-pair? bjb67@syntax-pair?) (set! bjb69@syntax-vector? (lambda (bjf7b@x) (bjb63@syntax-kind? bjf7b@x vector?))) (set! bj27f6@bjb69@syntax-vector? bjb69@syntax-vector?) (set! bjb6b@syntax-null? (lambda (bjf7d@x) (bjb63@syntax-kind? bjf7d@x null?))) (set! bj27f7@bjb6b@syntax-null? bjb6b@syntax-null?) (set! bjb6d@syntax-list? (lambda (bjf7f@x) (or (bjb6b@syntax-null? bjf7f@x) (and (bjb67@syntax-pair? bjf7f@x) (bjb6d@syntax-list? (bjb71@syntax-cdr bjf7f@x)))))) (set! bj27f8@bjb6d@syntax-list? bjb6d@syntax-list?) (set! bjb6f@syntax-car (lambda (bjf81@x) (if (bjb41@stx? bjf81@x) (bjb5d@mkstx (bjb6f@syntax-car (bjb43@stx-expr bjf81@x)) (bjb47@stx-mark* bjf81@x) (bjb4b@stx-subst* bjf81@x) (bjb4f@stx-ae* bjf81@x)) (if (bj6b3@bj585@annotation? bjf81@x) (bjb6f@syntax-car (bj6b5@bj589@annotation-expression bjf81@x)) (if (pair? bjf81@x) (car bjf81@x) (assertion-violation 'syntax-car '"BUG: not a pair" bjf81@x)))))) (set! bj27f9@bjb6f@syntax-car bjb6f@syntax-car) (set! bjb71@syntax-cdr (lambda (bjf83@x) (if (bjb41@stx? bjf83@x) (bjb5d@mkstx (bjb71@syntax-cdr (bjb43@stx-expr bjf83@x)) (bjb47@stx-mark* bjf83@x) (bjb4b@stx-subst* bjf83@x) (bjb4f@stx-ae* bjf83@x)) (if (bj6b3@bj585@annotation? bjf83@x) (bjb71@syntax-cdr (bj6b5@bj589@annotation-expression bjf83@x)) (if (pair? bjf83@x) (cdr bjf83@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" bjf83@x)))))) (set! bj27fa@bjb71@syntax-cdr bjb71@syntax-cdr) (set! bjb73@syntax->list (lambda (bjf85@x) (if (bjb67@syntax-pair? bjf85@x) (cons (bjb6f@syntax-car bjf85@x) (bjb73@syntax->list (bjb71@syntax-cdr bjf85@x))) (if (bjb6b@syntax-null? bjf85@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" bjf85@x))))) (set! bj27fb@bjb73@syntax->list bjb73@syntax->list) (set! bjb75@id? (lambda (bjf87@x) (and (bjb41@stx? bjf87@x) (symbol? (bjb43@stx-expr bjf87@x))))) (set! bj27fc@bjb75@id? bjb75@id?) (set! bjb77@id->sym (lambda (bjf89@x) (bjb43@stx-expr bjf89@x))) (set! bj27fd@bjb77@id->sym bjb77@id->sym) (set! bjb79@bound-id=? (lambda (bjf8b@x bjf8c@y) (and (eq? (bjb77@id->sym bjf8b@x) (bjb77@id->sym bjf8c@y)) (same-marks? (bjb47@stx-mark* bjf8b@x) (bjb47@stx-mark* bjf8c@y))))) (set! bj27fe@bjb79@bound-id=? bjb79@bound-id=?) (set! bjb7b@free-id=? (lambda (bjf8f@i bjf90@j) (let ((bjf93@t0 (id->real-label bjf8f@i)) (bjf94@t1 (id->real-label bjf90@j))) (if (or bjf93@t0 bjf94@t1) (eq? bjf93@t0 bjf94@t1) (eq? (bjb77@id->sym bjf8f@i) (bjb77@id->sym bjf90@j)))))) (set! bj27ff@bjb7b@free-id=? bjb7b@free-id=?) (set! bjb7d@valid-bound-ids? (lambda (bjf97@id*) (and (for-all bjb75@id? bjf97@id*) (bjb7f@distinct-bound-ids? bjf97@id*)))) (set! bj2800@bjb7d@valid-bound-ids? bjb7d@valid-bound-ids?) (set! bjb7f@distinct-bound-ids? (lambda (bjf99@id*) (or (null? bjf99@id*) (and (not (bjb81@bound-id-member? (car bjf99@id*) (cdr bjf99@id*))) (bjb7f@distinct-bound-ids? (cdr bjf99@id*)))))) (set! bj2801@bjb7f@distinct-bound-ids? bjb7f@distinct-bound-ids?) (set! bjb81@bound-id-member? (lambda (bjf9b@id bjf9c@id*) (and (pair? bjf9c@id*) (or (bjb79@bound-id=? bjf9b@id (car bjf9c@id*)) (bjb81@bound-id-member? bjf9b@id (cdr bjf9c@id*)))))) (set! bj2802@bjb81@bound-id-member? bjb81@bound-id-member?) (set! bjb83@self-evaluating? (lambda (bjf9f@x) (or (number? bjf9f@x) (string? bjf9f@x) (char? bjf9f@x) (boolean? bjf9f@x) (regexp? bjf9f@x) (bytevector? bjf9f@x)))) (set! bj2803@bjb83@self-evaluating? bjb83@self-evaluating?) (set! bjb85@strip-annotations (lambda (bjfa1@x) (if (pair? bjfa1@x) (cons (bjb85@strip-annotations (car bjfa1@x)) (bjb85@strip-annotations (cdr bjfa1@x))) (if (vector? bjfa1@x) (vector-map bjb85@strip-annotations bjfa1@x) (if (bj6b3@bj585@annotation? bjfa1@x) (bj6b2@bj583@annotation-stripped bjfa1@x) bjfa1@x))))) (set! bj2804@bjb85@strip-annotations bjb85@strip-annotations) (set! bjb87@strip (lambda (bjfa3@x bjfa4@m*) (if (bjafb@top-marked? bjfa4@m*) (if (or (bj6b3@bj585@annotation? bjfa3@x) (and (pair? bjfa3@x) (bj6b3@bj585@annotation? (car bjfa3@x))) (and (vector? bjfa3@x) (> (vector-length bjfa3@x) '0) (bj6b3@bj585@annotation? (vector-ref bjfa3@x '0)))) (bjb85@strip-annotations bjfa3@x) bjfa3@x) (let bjfa9@f ((bjfa7@x bjfa3@x)) (if (bjb41@stx? bjfa7@x) (bjb87@strip (bjb43@stx-expr bjfa7@x) (bjb47@stx-mark* bjfa7@x)) (if (bj6b3@bj585@annotation? bjfa7@x) (bj6b2@bj583@annotation-stripped bjfa7@x) (if (pair? bjfa7@x) (let ((bjfab@a (bjfa9@f (car bjfa7@x))) (bjfac@d (bjfa9@f (cdr bjfa7@x)))) (if (and (eq? bjfab@a (car bjfa7@x)) (eq? bjfac@d (cdr bjfa7@x))) bjfa7@x (cons bjfab@a bjfac@d))) (if (vector? bjfa7@x) (let ((bjfaf@old (vector->list bjfa7@x))) (let ((bjfb1@new (map bjfa9@f bjfaf@old))) (if (for-all eq? bjfaf@old bjfb1@new) bjfa7@x (list->vector bjfb1@new)))) bjfa7@x)))))))) (set! bj2805@bjb87@strip bjb87@strip) (set! bjb89@stx->datum (lambda (bjfb3@x) (bjb87@strip bjfb3@x '()))) (set! bj2806@bjb89@stx->datum bjb89@stx->datum) (set! bjb8b@id->label (lambda (bjfb5@id) (or (id->real-label bjfb5@id) (let ((bjfb7@t (bje6c@top-level-context))) (if bjfb7@t ((lambda (bjfb9@env) (let ((bjfbb@rib (bje1c@interaction-env-rib bjfb9@env))) (call-with-values (lambda () (bjb05@gen-define-label+loc bjfb5@id bjfbb@rib)) (lambda (bjfc1@bjfbe bjfc2@bjfc0) (let ((bjfc5@loc_ bjfc2@bjfc0) (bjfc6@lab bjfc1@bjfbe)) (begin (bjb2b@extend-rib! bjfbb@rib bjfb5@id bjfc6@lab) bjfc6@lab)))))) bjfb7@t) '#f))))) (set! bj2807@bjb8b@id->label bjb8b@id->label) (set! bjb8d@label->binding (lambda (bjfc9@x bjfca@r) (let ((bjfcd@t (bj98a@bj7d7@imported-label->binding bjfc9@x))) (if bjfcd@t ((lambda (bjfcf@b) (if (and (pair? bjfcf@b) (eq? (car bjfcf@b) '$core-rtd)) (cons '$rtd (map bjd32@bless (cdr bjfcf@b))) (if (and (pair? bjfcf@b) (eq? (car bjfcf@b) 'global-rtd)) (let ((bjfd1@lib (cadr bjfcf@b)) (bjfd2@loc (cddr bjfcf@b))) (cons '$rtd (symbol-value bjfd2@loc))) bjfcf@b))) bjfcd@t) (let ((bjfd5@t (assq bjfc9@x bjfca@r))) (if bjfd5@t (cdr bjfd5@t) (let ((bjfd7@t (bje6c@top-level-context))) (if bjfd7@t ((lambda (bjfd9@env) (let ((bjfdb@t (assq bjfc9@x (bje24@interaction-env-locs bjfd9@env)))) (if bjfdb@t ((lambda (bjfdd@p) (cons* 'lexical (cdr bjfdd@p) '#f)) bjfdb@t) '(displaced-lexical . #f)))) bjfd7@t) '(displaced-lexical . #f))))))))) (set! bj2808@bjb8d@label->binding bjb8d@label->binding) (set! bjb8f@make-binding cons) (set! bj2809@bjb8f@make-binding bjb8f@make-binding) (set! bjb91@binding-type car) (set! bj280a@bjb91@binding-type bjb91@binding-type) (set! bjb93@binding-value cdr) (set! bj280b@bjb93@binding-value bjb93@binding-value) (set! bjb95@raise-unbound-error (lambda (bjfdf@id) (bje5a@syntax-violation* '#f '"unbound identifier" bjfdf@id (bj2c01@bj2a47@make-undefined-violation)))) (set! bj280c@bjb95@raise-unbound-error bjb95@raise-unbound-error) (set! bjb97@syntax-type (lambda (bjfe1@e bjfe2@r) (if (bjb75@id? bjfe1@e) (let ((bjfe5@id bjfe1@e)) (let ((bjfe7@label (bjb8b@id->label bjfe5@id))) (let ((bjfe9@b (bjb8d@label->binding bjfe7@label bjfe2@r))) (let ((bjfeb@type (bjb91@binding-type bjfe9@b))) (begin (if (not bjfe7@label) (bjb95@raise-unbound-error bjfe5@id) (void)) (let ((bjfed@t bjfeb@type)) (if (memv bjfed@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values bjfeb@type (bjb93@binding-value bjfe9@b) bjfe5@id) (values 'other '#f '#f)))))))) (if (bjb67@syntax-pair? bjfe1@e) (let ((bjfef@id (bjb6f@syntax-car bjfe1@e))) (if (bjb75@id? bjfef@id) (let ((bjff1@label (bjb8b@id->label bjfef@id))) (let ((bjff3@b (bjb8d@label->binding bjff1@label bjfe2@r))) (let ((bjff5@type (bjb91@binding-type bjff3@b))) (begin (if (not bjff1@label) (bjb95@raise-unbound-error bjfef@id) (void)) (let ((bjff7@t bjff5@type)) (if (memv bjff7@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values bjff5@type (bjb93@binding-value bjff3@b) bjfef@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((bjff9@d (bjb89@stx->datum bjfe1@e))) (if (bjb83@self-evaluating? bjff9@d) (values 'constant bjff9@d '#f) (values 'other '#f '#f))))))) (set! bj280d@bjb97@syntax-type bjb97@syntax-type) (set! bjba5@sanitize-binding (lambda (bjffb@x bjffc@src) (if (procedure? bjffb@x) (cons* 'local-macro bjffb@x bjffc@src) (if (and (pair? bjffb@x) (eq? (car bjffb@x) 'macro!) (procedure? (cdr bjffb@x))) (cons* 'local-macro! (cdr bjffb@x) bjffc@src) (if (and (pair? bjffb@x) (eq? (car bjffb@x) '$rtd)) bjffb@x (assertion-violation 'expand '"invalid transformer" bjffb@x)))))) (set! bj280e@bjba5@sanitize-binding bjba5@sanitize-binding) (set! bjba7@make-variable-transformer (lambda (bjfff@x) (if (procedure? bjfff@x) (cons 'macro! bjfff@x) (assertion-violation 'make-variable-transformer '"not a procedure" bjfff@x)))) (set! bj280f@bjba7@make-variable-transformer bjba7@make-variable-transformer) (set! bjba9@variable-transformer? (lambda (bj1001@x) (and (pair? bj1001@x) (eq? (car bj1001@x) 'macro!) (procedure? (cdr bj1001@x))))) (set! bj2810@bjba9@variable-transformer? bjba9@variable-transformer?) (set! bjbab@variable-transformer-procedure (lambda (bj1003@x) (if (bjba9@variable-transformer? bj1003@x) (cdr bj1003@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" bj1003@x)))) (set! bj2811@bjbab@variable-transformer-procedure bjbab@variable-transformer-procedure) (set! bjbad@make-eval-transformer (lambda (bj1005@x) (bjba5@sanitize-binding (eval-core (bj715@bj6cd@expanded->core bj1005@x)) bj1005@x))) (set! bj2812@bjbad@make-eval-transformer bjbad@make-eval-transformer) (set! bjcfe@parse-define (lambda (bj1007@x) (let ((bj1009@t bj1007@x)) (let ((bj100b@ls/false (bjd7c@syntax-dispatch bj1009@t '(_ (any . any) any . each-any)))) (if (and bj100b@ls/false (apply (lambda (bj100d@id bj100e@fmls bj100f@b bj1010@b*) (bjb75@id? bj100d@id)) bj100b@ls/false)) (apply (lambda (bj1015@id bj1016@fmls bj1017@b bj1018@b*) (begin (bjda2@verify-formals bj1016@fmls bj1007@x) (values bj1015@id (cons 'defun (cons bj1016@fmls (cons bj1017@b bj1018@b*)))))) bj100b@ls/false) (let ((bj101d@t bj1009@t)) (let ((bj101f@ls/false (bjd7c@syntax-dispatch bj101d@t '(_ any any)))) (if (and bj101f@ls/false (apply (lambda (bj1021@id bj1022@val) (bjb75@id? bj1021@id)) bj101f@ls/false)) (apply (lambda (bj1025@id bj1026@val) (values bj1025@id (cons 'expr bj1026@val))) bj101f@ls/false) (let ((bj1029@t bj101d@t)) (let ((bj102b@ls/false (bjd7c@syntax-dispatch bj1029@t '(_ any)))) (if (and bj102b@ls/false (apply (lambda (bj102d@id) (bjb75@id? bj102d@id)) bj102b@ls/false)) (apply (lambda (bj102f@id) (values bj102f@id (cons 'expr (bjd32@bless '(void))))) bj102b@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1029@t)))))))))))) (set! bj2813@bjcfe@parse-define bjcfe@parse-define) (set! bjd00@parse-define-syntax (lambda (bj1031@x) (let ((bj1033@t bj1031@x)) (let ((bj1035@ls/false (bjd7c@syntax-dispatch bj1033@t '(_ any any)))) (if (and bj1035@ls/false (apply (lambda (bj1037@id bj1038@val) (bjb75@id? bj1037@id)) bj1035@ls/false)) (apply (lambda (bj103b@id bj103c@val) (values bj103b@id bj103c@val)) bj1035@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1033@t)))))) (set! bj2814@bjd00@parse-define-syntax bjd00@parse-define-syntax) (set! bjd02@scheme-stx-hashtable (make-eq-hashtable)) (set! bj2815@bjd02@scheme-stx-hashtable bjd02@scheme-stx-hashtable) (set! bjd04@scheme-stx (lambda (bj103f@sym) (or (hashtable-ref bjd02@scheme-stx-hashtable bj103f@sym '#f) (let ((bj1041@subst (bj966@bj78f@library-subst (bj984@bj7cb@find-library-by-name '(psyntax system $all))))) (let ((bj1043@stx (make-simple-struct 'stx '5 (list bj103f@sym bjaf9@top-mark* '() '())))) (let ((bj1045@stx (let ((bj1047@t (assq bj103f@sym bj1041@subst))) (if bj1047@t ((lambda (bj1049@x) (let ((bj104b@name (car bj1049@x)) (bj104c@label (cdr bj1049@x))) (bjb61@add-subst (make-simple-struct 'rib '6 (list (list bj104b@name) (list bjaf9@top-mark*) (list bj104c@label) '#f '#f)) bj1043@stx))) bj1047@t) bj1043@stx)))) (begin (hashtable-set! bjd02@scheme-stx-hashtable bj103f@sym bj1045@stx) bj1045@stx))))))) (set! bj2816@bjd04@scheme-stx bjd04@scheme-stx) (set! bjd06@lexical-var car) (set! bj2817@bjd06@lexical-var bjd06@lexical-var) (set! bjd08@lexical-mutable? cdr) (set! bj2818@bjd08@lexical-mutable? bjd08@lexical-mutable?) (set! bjd0a@set-lexical-mutable! set-cdr!) (set! bj2819@bjd0a@set-lexical-mutable! bjd0a@set-lexical-mutable!) (set! bjd0c@add-lexical (lambda (bj104f@lab bj1050@lex bj1051@r) (cons (cons* bj104f@lab 'lexical bj1050@lex '#f) bj1051@r))) (set! bj281a@bjd0c@add-lexical bjd0c@add-lexical) (set! bjd0e@add-lexicals (lambda (bj1055@lab* bj1056@lex* bj1057@r) (if (null? bj1055@lab*) bj1057@r (bjd0e@add-lexicals (cdr bj1055@lab*) (cdr bj1056@lex*) (bjd0c@add-lexical (car bj1055@lab*) (car bj1056@lex*) bj1057@r))))) (set! bj281b@bjd0e@add-lexicals bjd0e@add-lexicals) (set! bjd10@letrec-helper (lambda (bj105b@e bj105c@r bj105d@mr bj105e@build) (let ((bj1063@t bj105b@e)) (let ((bj1065@ls/false (bjd7c@syntax-dispatch bj1063@t '(_ #(each (any any)) any . each-any)))) (if bj1065@ls/false (apply (lambda (bj1067@lhs* bj1068@rhs* bj1069@b bj106a@b*) (if (not (bjb7d@valid-bound-ids? bj1067@lhs*)) (bjd36@invalid-fmls-error bj105b@e bj1067@lhs*) (let ((bj106f@lex* (map bjafd@gen-lexical bj1067@lhs*)) (bj1070@lab* (map bjb01@gen-label bj1067@lhs*))) (let ((bj1073@rib (bjb35@make-full-rib bj1067@lhs* bj1070@lab*)) (bj1074@r (bjd0e@add-lexicals bj1070@lab* bj106f@lex* bj105c@r))) (let ((bj1077@body (bjdb4@chi-internal (bjb61@add-subst bj1073@rib (cons bj1069@b bj106a@b*)) bj1074@r bj105d@mr)) (bj1078@rhs* (bjd9a@chi-expr* (map (lambda (bj107b@x) (bjb61@add-subst bj1073@rib bj107b@x)) bj1068@rhs*) bj1074@r bj105d@mr))) (bj105e@build '#f bj106f@lex* bj1078@rhs* bj1077@body)))))) bj1065@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1063@t)))))) (set! bj281c@bjd10@letrec-helper bjd10@letrec-helper) (set! bjd12@let-transformer (lambda (bj107d@e bj107e@r bj107f@mr) (let ((bj1083@t bj107d@e)) (let ((bj1085@ls/false (bjd7c@syntax-dispatch bj1083@t '(_ #(each (any any)) any . each-any)))) (if bj1085@ls/false (apply (lambda (bj1087@lhs* bj1088@rhs* bj1089@b bj108a@b*) (if (not (bjb7d@valid-bound-ids? bj1087@lhs*)) (bjd36@invalid-fmls-error bj107d@e bj1087@lhs*) (let ((bj108f@lex* (map bjafd@gen-lexical bj1087@lhs*)) (bj1090@lab* (map bjb01@gen-label bj1087@lhs*)) (bj1091@rhs* (bjd9a@chi-expr* bj1088@rhs* bj107e@r bj107f@mr))) (let ((bj1095@rib (bjb35@make-full-rib bj1087@lhs* bj1090@lab*)) (bj1096@r (bjd0e@add-lexicals bj1090@lab* bj108f@lex* bj107e@r))) (let ((bj1099@body (bjdb4@chi-internal (bjb61@add-subst bj1095@rib (cons bj1089@b bj108a@b*)) bj1096@r bj107f@mr))) (bjadd@bja3a@build-let '#f bj108f@lex* bj1091@rhs* bj1099@body)))))) bj1085@ls/false) (let ((bj109b@t bj1083@t)) (let ((bj109d@ls/false (bjd7c@syntax-dispatch bj109b@t '(_ any #(each (any any)) any . each-any)))) (if bj109d@ls/false (apply (lambda (bj109f@loop bj10a0@lhs* bj10a1@rhs* bj10a2@b bj10a3@b*) (if (not (bjb7d@valid-bound-ids? bj10a0@lhs*)) (bjd36@invalid-fmls-error bj107d@e bj10a0@lhs*) (let ((bj10a9@lex* (map bjafd@gen-lexical bj10a0@lhs*)) (bj10aa@lab* (map bjb01@gen-label bj10a0@lhs*)) (bj10ab@rhs* (bjd9a@chi-expr* bj10a1@rhs* bj107e@r bj107f@mr)) (bj10ac@loop-lex (bjafd@gen-lexical bj109f@loop)) (bj10ad@loop-lab (bjb01@gen-label bj109f@loop))) (let ((bj10b3@loop-rib (bjb35@make-full-rib (list bj109f@loop) (list bj10ad@loop-lab))) (bj10b4@rib (bjb35@make-full-rib bj10a0@lhs* bj10aa@lab*)) (bj10b5@r (bjd0e@add-lexicals (cons bj10ad@loop-lab bj10aa@lab*) (cons bj10ac@loop-lex bj10a9@lex*) bj107e@r))) (let ((bj10b9@body (bjdb4@chi-internal (bjb61@add-subst bj10b3@loop-rib (bjb61@add-subst bj10b4@rib (cons bj10a2@b bj10a3@b*))) bj10b5@r bj107f@mr))) (bjade@bja3c@build-named-let '#f bj10ac@loop-lex bj10a9@lex* bj10ab@rhs* bj10b9@body)))))) bj109d@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj109b@t))))))))) (set! bj281d@bjd12@let-transformer bjd12@let-transformer) (set! bjd14@letrec-transformer (lambda (bj10bb@e bj10bc@r bj10bd@mr) (bjd10@letrec-helper bj10bb@e bj10bc@r bj10bd@mr bjadc@bja38@build-letrec))) (set! bj281e@bjd14@letrec-transformer bjd14@letrec-transformer) (set! bjd16@letrec*-transformer (lambda (bj10c1@e bj10c2@r bj10c3@mr) (bjd10@letrec-helper bj10c1@e bj10c2@r bj10c3@mr bjadf@bja3e@build-letrec*))) (set! bj281f@bjd16@letrec*-transformer bjd16@letrec*-transformer) (set! bjd18@fluid-let-syntax-transformer (lambda (bj10c7@e bj10c8@r bj10c9@mr) (let ((bj10ce@lookup '#f)) (begin (set! bj10ce@lookup (lambda (bj10e1@x) (or (bjb8b@id->label bj10e1@x) (bje5c@syntax-violation '#f '"unbound identifier" bj10c7@e bj10e1@x)))) (let ((bj10cf@t bj10c7@e)) (let ((bj10d1@ls/false (bjd7c@syntax-dispatch bj10cf@t '(_ #(each (any any)) any . each-any)))) (if bj10d1@ls/false (apply (lambda (bj10d3@lhs* bj10d4@rhs* bj10d5@b bj10d6@b*) (if (not (bjb7d@valid-bound-ids? bj10d3@lhs*)) (bjd36@invalid-fmls-error bj10c7@e bj10d3@lhs*) (let ((bj10db@lab* (map bj10ce@lookup bj10d3@lhs*)) (bj10dc@rhs* (map (lambda (bj10df@x) (bjbad@make-eval-transformer (bjdd6@expand-transformer bj10df@x bj10c9@mr))) bj10d4@rhs*))) (bjdb4@chi-internal (cons bj10d5@b bj10d6@b*) (append (map cons bj10db@lab* bj10dc@rhs*) bj10c8@r) (append (map cons bj10db@lab* bj10dc@rhs*) bj10c9@mr))))) bj10d1@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj10cf@t)))))))) (set! bj2820@bjd18@fluid-let-syntax-transformer bjd18@fluid-let-syntax-transformer) (set! bjd1a@type-descriptor-transformer (lambda (bj10e3@e bj10e4@r bj10e5@mr) (let ((bj10e9@t bj10e3@e)) (let ((bj10eb@ls/false (bjd7c@syntax-dispatch bj10e9@t '(_ any)))) (if (and bj10eb@ls/false (apply (lambda (bj10ed@id) (bjb75@id? bj10ed@id)) bj10eb@ls/false)) (apply (lambda (bj10ef@id) (let ((bj10f1@lab (bjb8b@id->label bj10ef@id))) (let ((bj10f3@b (bjb8d@label->binding bj10f1@lab bj10e4@r))) (let ((bj10f5@type (bjb91@binding-type bj10f3@b))) (begin (if (not bj10f1@lab) (bjb95@raise-unbound-error bj10ef@id) (void)) (if (not (and (eq? bj10f5@type '$rtd) (not (list? (bjb93@binding-value bj10f3@b))))) (bje5c@syntax-violation '#f '"not a record type" bj10e3@e) (void)) (list 'quote (bjb93@binding-value bj10f3@b))))))) bj10eb@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj10e9@t)))))) (set! bj2821@bjd1a@type-descriptor-transformer bjd1a@type-descriptor-transformer) (set! bjd1c@record-type-descriptor-transformer (lambda (bj10f7@e bj10f8@r bj10f9@mr) (let ((bj10fd@t bj10f7@e)) (let ((bj10ff@ls/false (bjd7c@syntax-dispatch bj10fd@t '(_ any)))) (if (and bj10ff@ls/false (apply (lambda (bj1101@id) (bjb75@id? bj1101@id)) bj10ff@ls/false)) (apply (lambda (bj1103@id) (let ((bj1105@lab (bjb8b@id->label bj1103@id))) (let ((bj1107@b (bjb8d@label->binding bj1105@lab bj10f8@r))) (let ((bj1109@type (bjb91@binding-type bj1107@b))) (begin (if (not bj1105@lab) (bjb95@raise-unbound-error bj1103@id) (void)) (if (not (and (eq? bj1109@type '$rtd) (list? (bjb93@binding-value bj1107@b)))) (bje5c@syntax-violation '#f '"not a record type" bj10f7@e) (void)) (bjd9e@chi-expr (car (bjb93@binding-value bj1107@b)) bj10f8@r bj10f9@mr)))))) bj10ff@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj10fd@t)))))) (set! bj2822@bjd1c@record-type-descriptor-transformer bjd1c@record-type-descriptor-transformer) (set! bjd1e@record-constructor-descriptor-transformer (lambda (bj110b@e bj110c@r bj110d@mr) (let ((bj1111@t bj110b@e)) (let ((bj1113@ls/false (bjd7c@syntax-dispatch bj1111@t '(_ any)))) (if (and bj1113@ls/false (apply (lambda (bj1115@id) (bjb75@id? bj1115@id)) bj1113@ls/false)) (apply (lambda (bj1117@id) (let ((bj1119@lab (bjb8b@id->label bj1117@id))) (let ((bj111b@b (bjb8d@label->binding bj1119@lab bj110c@r))) (let ((bj111d@type (bjb91@binding-type bj111b@b))) (begin (if (not bj1119@lab) (bjb95@raise-unbound-error bj1117@id) (void)) (if (not (and (eq? bj111d@type '$rtd) (list? (bjb93@binding-value bj111b@b)))) (bje5c@syntax-violation '#f '"invalid type" bj110b@e) (void)) (bjd9e@chi-expr (cadr (bjb93@binding-value bj111b@b)) bj110c@r bj110d@mr)))))) bj1113@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1111@t)))))) (set! bj2823@bjd1e@record-constructor-descriptor-transformer bjd1e@record-constructor-descriptor-transformer) (set! bjd20@when-macro (lambda (bj111f@e) (let ((bj1121@t bj111f@e)) (let ((bj1123@ls/false (bjd7c@syntax-dispatch bj1121@t '(_ any any . each-any)))) (if bj1123@ls/false (apply (lambda (bj1125@test bj1126@e bj1127@e*) (bjd32@bless (list 'if bj1125@test (cons 'begin (cons bj1126@e bj1127@e*))))) bj1123@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1121@t)))))) (set! bj2824@bjd20@when-macro bjd20@when-macro) (set! bjd22@unless-macro (lambda (bj112b@e) (let ((bj112d@t bj112b@e)) (let ((bj112f@ls/false (bjd7c@syntax-dispatch bj112d@t '(_ any any . each-any)))) (if bj112f@ls/false (apply (lambda (bj1131@test bj1132@e bj1133@e*) (bjd32@bless (list 'if (list 'not bj1131@test) (cons 'begin (cons bj1132@e bj1133@e*))))) bj112f@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj112d@t)))))) (set! bj2825@bjd22@unless-macro bjd22@unless-macro) (set! bjd24@if-transformer (lambda (bj1137@e bj1138@r bj1139@mr) (let ((bj113d@t bj1137@e)) (let ((bj113f@ls/false (bjd7c@syntax-dispatch bj113d@t '(_ any any any)))) (if bj113f@ls/false (apply (lambda (bj1141@e0 bj1142@e1 bj1143@e2) (list 'if (bjd9e@chi-expr bj1141@e0 bj1138@r bj1139@mr) (bjd9e@chi-expr bj1142@e1 bj1138@r bj1139@mr) (bjd9e@chi-expr bj1143@e2 bj1138@r bj1139@mr))) bj113f@ls/false) (let ((bj1147@t bj113d@t)) (let ((bj1149@ls/false (bjd7c@syntax-dispatch bj1147@t '(_ any any)))) (if bj1149@ls/false (apply (lambda (bj114b@e0 bj114c@e1) (list 'if (bjd9e@chi-expr bj114b@e0 bj1138@r bj1139@mr) (bjd9e@chi-expr bj114c@e1 bj1138@r bj1139@mr) (bjadb@bja36@build-void))) bj1149@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1147@t))))))))) (set! bj2826@bjd24@if-transformer bjd24@if-transformer) (set! bjd26@and-transformer (lambda (bj114f@e bj1150@r bj1151@mr) (let ((bj1155@t bj114f@e)) (let ((bj1157@ls/false (bjd7c@syntax-dispatch bj1155@t '(_ . each-any)))) (if bj1157@ls/false (apply (lambda (bj1159@e*) (cons 'and (bjd9a@chi-expr* bj1159@e* bj1150@r bj1151@mr))) bj1157@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1155@t)))))) (set! bj2827@bjd26@and-transformer bjd26@and-transformer) (set! bjd28@or-transformer (lambda (bj115b@e bj115c@r bj115d@mr) (let ((bj1161@t bj115b@e)) (let ((bj1163@ls/false (bjd7c@syntax-dispatch bj1161@t '(_ . each-any)))) (if bj1163@ls/false (apply (lambda (bj1165@e*) (cons 'or (bjd9a@chi-expr* bj1165@e* bj115c@r bj115d@mr))) bj1163@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1161@t)))))) (set! bj2828@bjd28@or-transformer bjd28@or-transformer) (set! bjd2a@case-macro (lambda (bj1167@e) (let ((bj116a@build-last '#f) (bj116c@build-one '#f)) (begin (set! bj116a@build-last (lambda (bj1191@cls) (let ((bj1193@t bj1191@cls)) (let ((bj1195@ls/false (bjd7c@syntax-dispatch bj1193@t '(#(scheme-id else) any . each-any)))) (if bj1195@ls/false (apply (lambda (bj1197@e bj1198@e*) (cons 'begin (cons bj1197@e bj1198@e*))) bj1195@ls/false) (let ((bj119b@t bj1193@t)) (let ((bj119d@ls/false (bjd7c@syntax-dispatch bj119b@t '_))) (if bj119d@ls/false (apply (lambda () (bj116c@build-one bj1191@cls '(if #f #f))) bj119d@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj119b@t))))))))) (set! bj116c@build-one (lambda (bj1183@cls bj1184@k) (let ((bj1187@t bj1183@cls)) (let ((bj1189@ls/false (bjd7c@syntax-dispatch bj1187@t '(each-any any . each-any)))) (if bj1189@ls/false (apply (lambda (bj118b@d* bj118c@e bj118d@e*) (list 'if (list 'memv 't (list 'quote bj118b@d*)) (cons 'begin (cons bj118c@e bj118d@e*)) bj1184@k)) bj1189@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1187@t)))))) (let ((bj116d@t bj1167@e)) (let ((bj116f@ls/false (bjd7c@syntax-dispatch bj116d@t '(_ any)))) (if bj116f@ls/false (apply (lambda (bj1171@expr) (bjd32@bless (cons 'let (cons (list (list 't bj1171@expr)) '((if #f #f)))))) bj116f@ls/false) (let ((bj1173@t bj116d@t)) (let ((bj1175@ls/false (bjd7c@syntax-dispatch bj1173@t '(_ any any . each-any)))) (if bj1175@ls/false (apply (lambda (bj1177@expr bj1178@cls bj1179@cls*) (bjd32@bless (list 'let (list (list 't bj1177@expr)) (let bj1181@f ((bj117d@cls bj1178@cls) (bj117e@cls* bj1179@cls*)) (if (null? bj117e@cls*) (bj116a@build-last bj117d@cls) (bj116c@build-one bj117d@cls (bj1181@f (car bj117e@cls*) (cdr bj117e@cls*)))))))) bj1175@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1173@t))))))))))) (set! bj2829@bjd2a@case-macro bjd2a@case-macro) (set! bjd2c@quote-transformer (lambda (bj119f@e bj11a0@r bj11a1@mr) (let ((bj11a5@t bj119f@e)) (let ((bj11a7@ls/false (bjd7c@syntax-dispatch bj11a5@t '(_ any)))) (if bj11a7@ls/false (apply (lambda (bj11a9@datum) (list 'quote (bjb89@stx->datum bj11a9@datum))) bj11a7@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj11a5@t)))))) (set! bj282a@bjd2c@quote-transformer bjd2c@quote-transformer) (set! bjd2e@case-lambda-transformer (lambda (bj11ab@e bj11ac@r bj11ad@mr) (let ((bj11b1@t bj11ab@e)) (let ((bj11b3@ls/false (bjd7c@syntax-dispatch bj11b1@t '(_ . #(each (any any . each-any)))))) (if bj11b3@ls/false (apply (lambda (bj11b5@fmls* bj11b6@b* bj11b7@b**) (call-with-values (lambda () (bjda6@chi-lambda-clause* bj11ab@e bj11b5@fmls* (map cons bj11b6@b* bj11b7@b**) bj11ac@r bj11ad@mr)) (lambda (bj11bf@bj11bc bj11c0@bj11be) (let ((bj11c3@body* bj11c0@bj11be) (bj11c4@fmls* bj11bf@bj11bc)) (bjad9@bja06@build-case-lambda '#f bj11c4@fmls* bj11c3@body*))))) bj11b3@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj11b1@t)))))) (set! bj282b@bjd2e@case-lambda-transformer bjd2e@case-lambda-transformer) (set! bjd30@lambda-transformer (lambda (bj11c7@e bj11c8@r bj11c9@mr) (let ((bj11cd@t bj11c7@e)) (let ((bj11cf@ls/false (bjd7c@syntax-dispatch bj11cd@t '(_ any any . each-any)))) (if bj11cf@ls/false (apply (lambda (bj11d1@fmls bj11d2@b bj11d3@b*) (call-with-values (lambda () (bjda4@chi-lambda-clause bj11c7@e bj11d1@fmls (cons bj11d2@b bj11d3@b*) bj11c8@r bj11c9@mr)) (lambda (bj11db@bj11d8 bj11dc@bj11da) (let ((bj11df@body bj11dc@bj11da) (bj11e0@fmls bj11db@bj11d8)) (bjad8@bja04@build-lambda '#f bj11e0@fmls bj11df@body))))) bj11cf@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj11cd@t)))))) (set! bj282c@bjd30@lambda-transformer bjd30@lambda-transformer) (set! bjd32@bless (lambda (bj11e3@x) (bjb5d@mkstx (let bj11e7@f ((bj11e5@x bj11e3@x)) (if (bjb41@stx? bj11e5@x) bj11e5@x (if (pair? bj11e5@x) (cons (bj11e7@f (car bj11e5@x)) (bj11e7@f (cdr bj11e5@x))) (if (symbol? bj11e5@x) (bjd04@scheme-stx bj11e5@x) (if (vector? bj11e5@x) (vector-map bj11e7@f bj11e5@x) bj11e5@x))))) '() '() '()))) (set! bj282d@bjd32@bless bjd32@bless) (set! bjd34@with-syntax-macro (lambda (bj11e9@e) (let ((bj11eb@t bj11e9@e)) (let ((bj11ed@ls/false (bjd7c@syntax-dispatch bj11eb@t '(_ #(each (any any)) any . each-any)))) (if bj11ed@ls/false (apply (lambda (bj11ef@pat* bj11f0@expr* bj11f1@b bj11f2@b*) (let ((bj11f7@idn* (let bj11fb@f ((bj11f9@pat* bj11ef@pat*)) (if (null? bj11f9@pat*) '() (call-with-values (lambda () (bjd7a@convert-pattern (car bj11f9@pat*) '())) (lambda (bj1201@bj11fe bj1202@bj1200) (let ((bj1205@idn* bj1202@bj1200) (bj1206@pat bj1201@bj11fe)) (append bj1205@idn* (bj11fb@f (cdr bj11f9@pat*)))))))))) (begin (bjda2@verify-formals (map car bj11f7@idn*) bj11e9@e) (let ((bj1209@t* (bje4a@generate-temporaries bj11f0@expr*))) (bjd32@bless (list 'let (map list bj1209@t* bj11f0@expr*) (let bj120f@f ((bj120b@pat* bj11ef@pat*) (bj120c@t* bj1209@t*)) (if (null? bj120b@pat*) (cons 'begin (cons '#f (cons bj11f1@b bj11f2@b*))) (list 'syntax-case (car bj120c@t*) '() (list (car bj120b@pat*) (bj120f@f (cdr bj120b@pat*) (cdr bj120c@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car bj120b@pat*)) (car bj120c@t*)))))))))))) bj11ed@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj11eb@t)))))) (set! bj282e@bjd34@with-syntax-macro bjd34@with-syntax-macro) (set! bjd36@invalid-fmls-error (lambda (bj1211@stx bj1212@fmls) (let ((bj1215@t bj1212@fmls)) (let ((bj1217@ls/false (bjd7c@syntax-dispatch bj1215@t '#(each+ any () any)))) (if bj1217@ls/false (apply (lambda (bj1219@id* bj121a@last) (let bj121f@f ((bj121d@id* (if (bjb75@id? bj121a@last) (cons bj121a@last bj1219@id*) (if (bjb6b@syntax-null? bj121a@last) bj1219@id* (bje5c@syntax-violation '#f '"not an identifier" bj1211@stx bj121a@last))))) (if (null? bj121d@id*) (values) (if (not (bjb75@id? (car bj121d@id*))) (bje5c@syntax-violation '#f '"not an identifier" bj1211@stx (car bj121d@id*)) (begin (bj121f@f (cdr bj121d@id*)) (if (bjb81@bound-id-member? (car bj121d@id*) (cdr bj121d@id*)) (bje5c@syntax-violation '#f '"duplicate binding" bj1211@stx (car bj121d@id*)) (void))))))) bj1217@ls/false) (let ((bj1221@t bj1215@t)) (let ((bj1223@ls/false (bjd7c@syntax-dispatch bj1221@t '_))) (if bj1223@ls/false (apply (lambda () (bje5c@syntax-violation '#f '"malformed binding form" bj1211@stx bj1212@fmls)) bj1223@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1221@t))))))))) (set! bj282f@bjd36@invalid-fmls-error bjd36@invalid-fmls-error) (set! bjd38@let-macro (lambda (bj1225@stx) (let ((bj1227@t bj1225@stx)) (let ((bj1229@ls/false (bjd7c@syntax-dispatch bj1227@t '(_ #(each (any any)) any . each-any)))) (if bj1229@ls/false (apply (lambda (bj122b@lhs* bj122c@rhs* bj122d@b bj122e@b*) (if (bjb7d@valid-bound-ids? bj122b@lhs*) (bjd32@bless (cons (cons 'lambda (cons bj122b@lhs* (cons bj122d@b bj122e@b*))) bj122c@rhs*)) (bjd36@invalid-fmls-error bj1225@stx bj122b@lhs*))) bj1229@ls/false) (let ((bj1233@t bj1227@t)) (let ((bj1235@ls/false (bjd7c@syntax-dispatch bj1233@t '(_ any #(each (any any)) any . each-any)))) (if (and bj1235@ls/false (apply (lambda (bj1237@f bj1238@lhs* bj1239@rhs* bj123a@b bj123b@b*) (bjb75@id? bj1237@f)) bj1235@ls/false)) (apply (lambda (bj1241@f bj1242@lhs* bj1243@rhs* bj1244@b bj1245@b*) (if (bjb7d@valid-bound-ids? bj1242@lhs*) (bjd32@bless (cons (list 'letrec (list (list bj1241@f (cons 'lambda (cons bj1242@lhs* (cons bj1244@b bj1245@b*))))) bj1241@f) bj1243@rhs*)) (bjd36@invalid-fmls-error bj1225@stx bj1242@lhs*))) bj1235@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1233@t))))))))) (set! bj2830@bjd38@let-macro bjd38@let-macro) (set! bjd3a@let-values-macro (lambda (bj124b@stx) (let ((bj124e@rename '#f) (bj1250@rename* '#f)) (begin (set! bj124e@rename (lambda (bj12b3@x bj12b4@old* bj12b5@new*) (begin (if (not (bjb75@id? bj12b3@x)) (bje5c@syntax-violation '#f '"not an indentifier" bj124b@stx bj12b3@x) (void)) (if (bjb81@bound-id-member? bj12b3@x bj12b4@old*) (bje5c@syntax-violation '#f '"duplicate binding" bj124b@stx bj12b3@x) (void)) (let ((bj12b9@y (gensym (bje62@syntax->datum bj12b3@x)))) (values bj12b9@y (cons bj12b3@x bj12b4@old*) (cons bj12b9@y bj12b5@new*)))))) (set! bj1250@rename* (lambda (bj12a1@x* bj12a2@old* bj12a3@new*) (if (null? bj12a1@x*) (values '() bj12a2@old* bj12a3@new*) (call-with-values (lambda () (bj124e@rename (car bj12a1@x*) bj12a2@old* bj12a3@new*)) (lambda (bj12a7@x bj12a8@old* bj12a9@new*) (call-with-values (lambda () (bj1250@rename* (cdr bj12a1@x*) bj12a8@old* bj12a9@new*)) (lambda (bj12ad@x* bj12ae@old* bj12af@new*) (values (cons bj12a7@x bj12ad@x*) bj12ae@old* bj12af@new*)))))))) (let ((bj1251@t bj124b@stx)) (let ((bj1253@ls/false (bjd7c@syntax-dispatch bj1251@t '(_ () any . each-any)))) (if bj1253@ls/false (apply (lambda (bj1255@b bj1256@b*) (cons* (bjd32@bless 'let) '() bj1255@b bj1256@b*)) bj1253@ls/false) (let ((bj1259@t bj1251@t)) (let ((bj125b@ls/false (bjd7c@syntax-dispatch bj1259@t '(_ #(each (any any)) any . each-any)))) (if bj125b@ls/false (apply (lambda (bj125d@lhs* bj125e@rhs* bj125f@b bj1260@b*) (bjd32@bless (let bj126d@f ((bj1265@lhs* bj125d@lhs*) (bj1266@rhs* bj125e@rhs*) (bj1267@old* '()) (bj1268@new* '())) (if (null? bj1265@lhs*) (cons 'let (cons (map list bj1267@old* bj1268@new*) (cons bj125f@b bj1260@b*))) (let ((bj126f@t (car bj1265@lhs*))) (let ((bj1271@ls/false (bjd7c@syntax-dispatch bj126f@t 'each-any))) (if bj1271@ls/false (apply (lambda (bj1273@x*) (call-with-values (lambda () (bj1250@rename* bj1273@x* bj1267@old* bj1268@new*)) (lambda (bj127b@bj1276 bj127c@bj1278 bj127d@bj127a) (let ((bj1281@new* bj127d@bj127a) (bj1282@old* bj127c@bj1278) (bj1283@y* bj127b@bj1276)) (list 'call-with-values (list 'lambda '() (car bj1266@rhs*)) (list 'lambda bj1283@y* (bj126d@f (cdr bj1265@lhs*) (cdr bj1266@rhs*) bj1282@old* bj1281@new*))))))) bj1271@ls/false) (let ((bj1287@t bj126f@t)) (let ((bj1289@ls/false (bjd7c@syntax-dispatch bj1287@t '#(each+ any () any)))) (if bj1289@ls/false (apply (lambda (bj128b@x* bj128c@x) (call-with-values (lambda () (bj124e@rename bj128c@x bj1267@old* bj1268@new*)) (lambda (bj128f@y bj1290@old* bj1291@new*) (call-with-values (lambda () (bj1250@rename* bj128b@x* bj1290@old* bj1291@new*)) (lambda (bj1295@y* bj1296@old* bj1297@new*) (list 'call-with-values (list 'lambda '() (car bj1266@rhs*)) (list 'lambda (append bj1295@y* bj128f@y) (bj126d@f (cdr bj1265@lhs*) (cdr bj1266@rhs*) bj1296@old* bj1297@new*)))))))) bj1289@ls/false) (let ((bj129b@t bj1287@t)) (let ((bj129d@ls/false (bjd7c@syntax-dispatch bj129b@t 'any))) (if bj129d@ls/false (apply (lambda (bj129f@others) (bje5c@syntax-violation '#f '"malformed bindings" bj124b@stx bj129f@others)) bj129d@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj129b@t)))))))))))))) bj125b@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1259@t))))))))))) (set! bj2831@bjd3a@let-values-macro bjd3a@let-values-macro) (set! bjd3c@let*-values-macro (lambda (bj12bb@stx) (let ((bj12be@check '#f)) (begin (set! bj12be@check (lambda (bj12ed@x*) (if (not (null? bj12ed@x*)) (let ((bj12ef@x (car bj12ed@x*))) (begin (if (not (bjb75@id? bj12ef@x)) (bje5c@syntax-violation '#f '"not an identifier" bj12bb@stx bj12ef@x) (void)) (bj12be@check (cdr bj12ed@x*)) (if (bjb81@bound-id-member? bj12ef@x (cdr bj12ed@x*)) (bje5c@syntax-violation '#f '"duplicate identifier" bj12bb@stx bj12ef@x) (void)))) (void)))) (let ((bj12bf@t bj12bb@stx)) (let ((bj12c1@ls/false (bjd7c@syntax-dispatch bj12bf@t '(_ () any . each-any)))) (if bj12c1@ls/false (apply (lambda (bj12c3@b bj12c4@b*) (cons* (bjd32@bless 'let) '() bj12c3@b bj12c4@b*)) bj12c1@ls/false) (let ((bj12c7@t bj12bf@t)) (let ((bj12c9@ls/false (bjd7c@syntax-dispatch bj12c7@t '(_ #(each (any any)) any . each-any)))) (if bj12c9@ls/false (apply (lambda (bj12cb@lhs* bj12cc@rhs* bj12cd@b bj12ce@b*) (bjd32@bless (let bj12d7@f ((bj12d3@lhs* bj12cb@lhs*) (bj12d4@rhs* bj12cc@rhs*)) (if (null? bj12d3@lhs*) (cons 'begin (cons bj12cd@b bj12ce@b*)) (let ((bj12d9@t (car bj12d3@lhs*))) (let ((bj12db@ls/false (bjd7c@syntax-dispatch bj12d9@t 'each-any))) (if bj12db@ls/false (apply (lambda (bj12dd@x*) (begin (bj12be@check bj12dd@x*) (list 'call-with-values (list 'lambda '() (car bj12d4@rhs*)) (list 'lambda bj12dd@x* (bj12d7@f (cdr bj12d3@lhs*) (cdr bj12d4@rhs*)))))) bj12db@ls/false) (let ((bj12df@t bj12d9@t)) (let ((bj12e1@ls/false (bjd7c@syntax-dispatch bj12df@t '#(each+ any () any)))) (if bj12e1@ls/false (apply (lambda (bj12e3@x* bj12e4@x) (begin (bj12be@check (cons bj12e4@x bj12e3@x*)) (list 'call-with-values (list 'lambda '() (car bj12d4@rhs*)) (list 'lambda (append bj12e3@x* bj12e4@x) (bj12d7@f (cdr bj12d3@lhs*) (cdr bj12d4@rhs*)))))) bj12e1@ls/false) (let ((bj12e7@t bj12df@t)) (let ((bj12e9@ls/false (bjd7c@syntax-dispatch bj12e7@t 'any))) (if bj12e9@ls/false (apply (lambda (bj12eb@others) (bje5c@syntax-violation '#f '"malformed bindings" bj12bb@stx bj12eb@others)) bj12e9@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj12e7@t)))))))))))))) bj12c9@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj12c7@t))))))))))) (set! bj2832@bjd3c@let*-values-macro bjd3c@let*-values-macro) (set! bjd3e@trace-lambda-macro (lambda (bj12f1@stx) (let ((bj12f3@t bj12f1@stx)) (let ((bj12f5@ls/false (bjd7c@syntax-dispatch bj12f3@t '(_ any each-any any . each-any)))) (if bj12f5@ls/false (apply (lambda (bj12f7@who bj12f8@fmls bj12f9@b bj12fa@b*) (if (bjb7d@valid-bound-ids? bj12f8@fmls) (bjd32@bless (list 'make-traced-procedure (list 'quote bj12f7@who) (cons 'lambda (cons bj12f8@fmls (cons bj12f9@b bj12fa@b*))))) (bjd36@invalid-fmls-error bj12f1@stx bj12f8@fmls))) bj12f5@ls/false) (let ((bj12ff@t bj12f3@t)) (let ((bj1301@ls/false (bjd7c@syntax-dispatch bj12ff@t '(_ any #(each+ any () any) any . each-any)))) (if bj1301@ls/false (apply (lambda (bj1303@who bj1304@fmls bj1305@last bj1306@b bj1307@b*) (if (bjb7d@valid-bound-ids? (cons bj1305@last bj1304@fmls)) (bjd32@bless (list 'make-traced-procedure (list 'quote bj1303@who) (cons 'lambda (cons (append bj1304@fmls bj1305@last) (cons bj1306@b bj1307@b*))))) (bjd36@invalid-fmls-error bj12f1@stx (append bj1304@fmls bj1305@last)))) bj1301@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj12ff@t))))))))) (set! bj2833@bjd3e@trace-lambda-macro bjd3e@trace-lambda-macro) (set! bjd40@trace-define-macro (lambda (bj130d@stx) (let ((bj130f@t bj130d@stx)) (let ((bj1311@ls/false (bjd7c@syntax-dispatch bj130f@t '(_ (any . each-any) any . each-any)))) (if bj1311@ls/false (apply (lambda (bj1313@who bj1314@fmls bj1315@b bj1316@b*) (if (bjb7d@valid-bound-ids? bj1314@fmls) (bjd32@bless (list 'define bj1313@who (list 'make-traced-procedure (list 'quote bj1313@who) (cons 'lambda (cons bj1314@fmls (cons bj1315@b bj1316@b*)))))) (bjd36@invalid-fmls-error bj130d@stx bj1314@fmls))) bj1311@ls/false) (let ((bj131b@t bj130f@t)) (let ((bj131d@ls/false (bjd7c@syntax-dispatch bj131b@t '(_ (any . #(each+ any () any)) any . each-any)))) (if bj131d@ls/false (apply (lambda (bj131f@who bj1320@fmls bj1321@last bj1322@b bj1323@b*) (if (bjb7d@valid-bound-ids? (cons bj1321@last bj1320@fmls)) (bjd32@bless (list 'define bj131f@who (list 'make-traced-procedure (list 'quote bj131f@who) (cons 'lambda (cons (append bj1320@fmls bj1321@last) (cons bj1322@b bj1323@b*)))))) (bjd36@invalid-fmls-error bj130d@stx (append bj1320@fmls bj1321@last)))) bj131d@ls/false) (let ((bj1329@t bj131b@t)) (let ((bj132b@ls/false (bjd7c@syntax-dispatch bj1329@t '(_ any any)))) (if bj132b@ls/false (apply (lambda (bj132d@who bj132e@expr) (if (bjb75@id? bj132d@who) (bjd32@bless (list 'define bj132d@who (list 'let (list (list 'v bj132e@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote bj132d@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (bje5c@syntax-violation '#f '"invalid name" bj130d@stx))) bj132b@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1329@t)))))))))))) (set! bj2834@bjd40@trace-define-macro bjd40@trace-define-macro) (set! bjd42@trace-define-syntax-macro (lambda (bj1331@stx) (let ((bj1333@t bj1331@stx)) (let ((bj1335@ls/false (bjd7c@syntax-dispatch bj1333@t '(_ any any)))) (if bj1335@ls/false (apply (lambda (bj1337@who bj1338@expr) (if (bjb75@id? bj1337@who) (bjd32@bless (list 'define-syntax bj1337@who (list 'make-traced-macro (list 'quote bj1337@who) bj1338@expr))) (bje5c@syntax-violation '#f '"invalid name" bj1331@stx))) bj1335@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1333@t)))))) (set! bj2835@bjd42@trace-define-syntax-macro bjd42@trace-define-syntax-macro) (set! bjd44@trace-let/rec-syntax (lambda (bj133b@who) (lambda (bj133d@stx) (let ((bj133f@t bj133d@stx)) (let ((bj1341@ls/false (bjd7c@syntax-dispatch bj133f@t '(_ #(each (any any)) any . each-any)))) (if bj1341@ls/false (apply (lambda (bj1343@lhs* bj1344@rhs* bj1345@b bj1346@b*) (if (bjb7d@valid-bound-ids? bj1343@lhs*) (let ((bj134b@rhs* (map (lambda (bj134d@lhs bj134e@rhs) (list 'make-traced-macro (list 'quote bj134d@lhs) bj134e@rhs)) bj1343@lhs* bj1344@rhs*))) (bjd32@bless (cons bj133b@who (cons (map list bj1343@lhs* bj134b@rhs*) (cons bj1345@b bj1346@b*))))) (bjd36@invalid-fmls-error bj133d@stx bj1343@lhs*))) bj1341@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj133f@t))))))) (set! bj2836@bjd44@trace-let/rec-syntax bjd44@trace-let/rec-syntax) (set! bjd46@trace-let-syntax-macro (bjd44@trace-let/rec-syntax 'let-syntax)) (set! bj2837@bjd46@trace-let-syntax-macro bjd46@trace-let-syntax-macro) (set! bjd48@trace-letrec-syntax-macro (bjd44@trace-let/rec-syntax 'letrec-syntax)) (set! bj2838@bjd48@trace-letrec-syntax-macro bjd48@trace-letrec-syntax-macro) (set! bjd4a@guard-macro (lambda (bj1351@x) (let ((bj1354@gen-clauses '#f)) (begin (set! bj1354@gen-clauses (lambda (bj136b@con bj136c@outerk bj136d@clause*) (let ((bj1372@f '#f) (bj1374@f* '#f)) (begin (set! bj1372@f (lambda (bj13ab@x bj13ac@k) (let ((bj13af@t bj13ab@x)) (let ((bj13b1@ls/false (bjd7c@syntax-dispatch bj13af@t '(any #(scheme-id =>) any)))) (if bj13b1@ls/false (apply (lambda (bj13b3@e bj13b4@p) (let ((bj13b7@t (gensym))) (list 'let (list (list bj13b7@t bj13b3@e)) (list 'if bj13b7@t (list bj13b4@p bj13b7@t) bj13ac@k)))) bj13b1@ls/false) (let ((bj13b9@t bj13af@t)) (let ((bj13bb@ls/false (bjd7c@syntax-dispatch bj13b9@t '(any)))) (if bj13bb@ls/false (apply (lambda (bj13bd@e) (let ((bj13bf@t (gensym))) (list 'let (list (list bj13bf@t bj13bd@e)) (list 'if bj13bf@t bj13bf@t bj13ac@k)))) bj13bb@ls/false) (let ((bj13c1@t bj13b9@t)) (let ((bj13c3@ls/false (bjd7c@syntax-dispatch bj13c1@t '(any any . each-any)))) (if bj13c3@ls/false (apply (lambda (bj13c5@e bj13c6@v bj13c7@v*) (list 'if bj13c5@e (cons 'begin (cons bj13c6@v bj13c7@v*)) bj13ac@k)) bj13c3@ls/false) (let ((bj13cb@t bj13c1@t)) (let ((bj13cd@ls/false (bjd7c@syntax-dispatch bj13cb@t '_))) (if bj13cd@ls/false (apply (lambda () (bje5c@syntax-violation '#f '"invalid guard clause" bj13ab@x)) bj13cd@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj13cb@t))))))))))))))) (set! bj1374@f* (lambda (bj1381@x*) (let ((bj1383@t bj1381@x*)) (let ((bj1385@ls/false (bjd7c@syntax-dispatch bj1383@t '()))) (if bj1385@ls/false (apply (lambda () (let ((bj1387@g (gensym))) (values (list bj1387@g (list 'lambda '() (list 'raise-continuable bj136b@con))) bj1387@g))) bj1385@ls/false) (let ((bj1389@t bj1383@t)) (let ((bj138b@ls/false (bjd7c@syntax-dispatch bj1389@t '((#(scheme-id else) any . each-any))))) (if bj138b@ls/false (apply (lambda (bj138d@e bj138e@e*) (values (cons 'begin (cons bj138d@e bj138e@e*)) '#f)) bj138b@ls/false) (let ((bj1391@t bj1389@t)) (let ((bj1393@ls/false (bjd7c@syntax-dispatch bj1391@t '(any . any)))) (if bj1393@ls/false (apply (lambda (bj1395@cls bj1396@cls*) (call-with-values (lambda () (bj1374@f* bj1396@cls*)) (lambda (bj139d@bj139a bj139e@bj139c) (let ((bj13a1@g bj139e@bj139c) (bj13a2@e bj139d@bj139a)) (values (bj1372@f bj1395@cls bj13a2@e) bj13a1@g))))) bj1393@ls/false) (let ((bj13a5@t bj1391@t)) (let ((bj13a7@ls/false (bjd7c@syntax-dispatch bj13a5@t 'any))) (if bj13a7@ls/false (apply (lambda (bj13a9@others) (bje5c@syntax-violation '#f '"invalid guard clause" bj13a9@others)) bj13a7@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj13a5@t))))))))))))))) (call-with-values (lambda () (bj1374@f* bj136d@clause*)) (lambda (bj1379@bj1376 bj137a@bj1378) (let ((bj137d@raisek bj137a@bj1378) (bj137e@code bj1379@bj1376)) (if bj137d@raisek (list (list 'call/cc (list 'lambda (list bj137d@raisek) (list bj136c@outerk (list 'lambda '() bj137e@code))))) (list bj136c@outerk (list 'lambda '() bj137e@code)))))))))) (let ((bj1355@t bj1351@x)) (let ((bj1357@ls/false (bjd7c@syntax-dispatch bj1355@t '(_ (any . each-any) any . each-any)))) (if (and bj1357@ls/false (apply (lambda (bj1359@con bj135a@clause* bj135b@b bj135c@b*) (bjb75@id? bj1359@con)) bj1357@ls/false)) (apply (lambda (bj1361@con bj1362@clause* bj1363@b bj1364@b*) (let ((bj1369@outerk (gensym))) (bjd32@bless (list (list 'call/cc (list 'lambda (list bj1369@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list bj1361@con) (bj1354@gen-clauses bj1361@con bj1369@outerk bj1362@clause*)) (cons 'lambda (cons '() (cons bj1363@b bj1364@b*))))))))))) bj1357@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1355@t)))))))) (set! bj2839@bjd4a@guard-macro bjd4a@guard-macro) (set! bjd4c@define-enumeration-macro (lambda (bj13cf@stx) (let ((bj13d2@set? '#f) (bj13d4@remove-dups '#f)) (begin (set! bj13d2@set? (lambda (bj13eb@x) (or (null? bj13eb@x) (and (not (memq (car bj13eb@x) (cdr bj13eb@x))) (bj13d2@set? (cdr bj13eb@x)))))) (set! bj13d4@remove-dups (lambda (bj13e9@ls) (if (null? bj13e9@ls) '() (cons (car bj13e9@ls) (bj13d4@remove-dups (remq (car bj13e9@ls) (cdr bj13e9@ls))))))) (let ((bj13d5@t bj13cf@stx)) (let ((bj13d7@ls/false (bjd7c@syntax-dispatch bj13d5@t '(_ any each-any any)))) (if (and bj13d7@ls/false (apply (lambda (bj13d9@name bj13da@id* bj13db@maker) (and (bjb75@id? bj13d9@name) (bjb75@id? bj13db@maker) (for-all bjb75@id? bj13da@id*))) bj13d7@ls/false)) (apply (lambda (bj13df@name bj13e0@id* bj13e1@maker) (let ((bj13e5@name* (bj13d4@remove-dups (bje62@syntax->datum bj13e0@id*))) (bj13e6@mk (gensym))) (bjd32@bless (list 'begin (list 'define bj13e6@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote bj13e5@name*)))) (list 'define-syntax bj13df@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote bj13e5@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote bj13df@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax bj13e1@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote bj13e1@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote bj13e5@name*)) (cons 'syntax-violation (cons (list 'quote bj13e1@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons bj13e6@mk '('(n* ...))))))))))))) bj13d7@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj13d5@t)))))))) (set! bj283a@bjd4c@define-enumeration-macro bjd4c@define-enumeration-macro) (set! bjd4e@time-macro (lambda (bj13ed@stx) (let ((bj13ef@t bj13ed@stx)) (let ((bj13f1@ls/false (bjd7c@syntax-dispatch bj13ef@t '(_ any)))) (if bj13f1@ls/false (apply (lambda (bj13f3@expr) (bjd32@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() bj13f3@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) bj13f1@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj13ef@t)))))) (set! bj283b@bjd4e@time-macro bjd4e@time-macro) (set! bjd50@delay-macro (lambda (bj13f5@stx) (let ((bj13f7@t bj13f5@stx)) (let ((bj13f9@ls/false (bjd7c@syntax-dispatch bj13f7@t '(_ any)))) (if bj13f9@ls/false (apply (lambda (bj13fb@expr) (bjd32@bless (list 'make-promise (list 'lambda '() bj13fb@expr)))) bj13f9@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj13f7@t)))))) (set! bj283c@bjd50@delay-macro bjd50@delay-macro) (set! bjd52@assert-macro (lambda (bj13fd@stx) (let ((bj13ff@t bj13fd@stx)) (let ((bj1401@ls/false (bjd7c@syntax-dispatch bj13ff@t '(_ any)))) (if bj1401@ls/false (apply (lambda (bj1403@expr) (let ((bj1405@pos (or (bje54@expression-position bj13fd@stx) (bje54@expression-position bj1403@expr)))) (bjd32@bless (list 'let (list (list 'x bj1403@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote bj1403@expr) (list 'quote bj1405@pos))))))) bj1401@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj13ff@t)))))) (set! bj283d@bjd52@assert-macro bjd52@assert-macro) (set! bjd54@endianness-macro (lambda (bj1407@stx) (let ((bj1409@t bj1407@stx)) (let ((bj140b@ls/false (bjd7c@syntax-dispatch bj1409@t '(_ any)))) (if bj140b@ls/false (apply (lambda (bj140d@e) (let ((bj140f@t (bje62@syntax->datum bj140d@e))) (if (memv bj140f@t '(little)) (bjd32@bless ''little) (if (memv bj140f@t '(big)) (bjd32@bless ''big) (bje5c@syntax-violation '#f '"endianness must be big or little" bj1407@stx))))) bj140b@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1409@t)))))) (set! bj283e@bjd54@endianness-macro bjd54@endianness-macro) (set! bjd56@identifier-syntax-macro (lambda (bj1411@stx) (let ((bj1413@t bj1411@stx)) (let ((bj1415@ls/false (bjd7c@syntax-dispatch bj1413@t '(_ any)))) (if bj1415@ls/false (apply (lambda (bj1417@expr) (bjd32@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax bj1417@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax bj1417@expr) '((syntax (e* ...)))))))))) bj1415@ls/false) (let ((bj1419@t bj1413@t)) (let ((bj141b@ls/false (bjd7c@syntax-dispatch bj1419@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and bj141b@ls/false (apply (lambda (bj141d@id1 bj141e@expr1 bj141f@id2 bj1420@expr2 bj1421@expr3) (and (bjb75@id? bj141d@id1) (bjb75@id? bj141f@id2) (bjb75@id? bj1420@expr2))) bj141b@ls/false)) (apply (lambda (bj1427@id1 bj1428@expr1 bj1429@id2 bj142a@expr2 bj142b@expr3) (bjd32@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax bj1428@expr1)) (list (list 'set! 'id bj142a@expr2) (list 'syntax bj142b@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons bj1428@expr1 '(e* ...))))))))) bj141b@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1419@t))))))))) (set! bj283f@bjd56@identifier-syntax-macro bjd56@identifier-syntax-macro) (set! bjd58@do-macro (lambda (bj1431@stx) (let ((bj1434@bind '#f)) (begin (set! bj1434@bind (lambda (bj144b@x) (let ((bj144d@t bj144b@x)) (let ((bj144f@ls/false (bjd7c@syntax-dispatch bj144d@t '(any any)))) (if bj144f@ls/false (apply (lambda (bj1451@x bj1452@init) (list bj1451@x bj1452@init bj1451@x)) bj144f@ls/false) (let ((bj1455@t bj144d@t)) (let ((bj1457@ls/false (bjd7c@syntax-dispatch bj1455@t '(any any any)))) (if bj1457@ls/false (apply (lambda (bj1459@x bj145a@init bj145b@step) (list bj1459@x bj145a@init bj145b@step)) bj1457@ls/false) (let ((bj145f@t bj1455@t)) (let ((bj1461@ls/false (bjd7c@syntax-dispatch bj145f@t '_))) (if bj1461@ls/false (apply (lambda () (bje5c@syntax-violation '#f '"invalid binding" bj1431@stx)) bj1461@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj145f@t)))))))))))) (let ((bj1435@t bj1431@stx)) (let ((bj1437@ls/false (bjd7c@syntax-dispatch bj1435@t '(_ each-any (any . each-any) . each-any)))) (if bj1437@ls/false (apply (lambda (bj1439@binding* bj143a@test bj143b@expr* bj143c@command*) (let ((bj1441@t (map bj1434@bind bj1439@binding*))) (let ((bj1443@ls/false (bjd7c@syntax-dispatch bj1441@t '#(each (any any any))))) (if bj1443@ls/false (apply (lambda (bj1445@x* bj1446@init* bj1447@step*) (if (bjb7d@valid-bound-ids? bj1445@x*) (bjd32@bless (list 'letrec (list (list 'loop (list 'lambda bj1445@x* (list 'if bj143a@test (cons 'begin (cons '(if #f #f) bj143b@expr*)) (cons 'begin (append bj143c@command* (list (cons 'loop bj1447@step*)))))))) (cons 'loop bj1446@init*))) (bje5c@syntax-violation '#f '"invalid bindings" bj1431@stx))) bj1443@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1441@t))))) bj1437@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1435@t)))))))) (set! bj2840@bjd58@do-macro bjd58@do-macro) (set! bjd5a@let*-macro (lambda (bj1463@stx) (let ((bj1465@t bj1463@stx)) (let ((bj1467@ls/false (bjd7c@syntax-dispatch bj1465@t '(_ #(each (any any)) any . each-any)))) (if (and bj1467@ls/false (apply (lambda (bj1469@lhs* bj146a@rhs* bj146b@b bj146c@b*) (for-all bjb75@id? bj1469@lhs*)) bj1467@ls/false)) (apply (lambda (bj1471@lhs* bj1472@rhs* bj1473@b bj1474@b*) (bjd32@bless (let bj147b@f ((bj1479@x* (map list bj1471@lhs* bj1472@rhs*))) (if (null? bj1479@x*) (cons 'let (cons '() (cons bj1473@b bj1474@b*))) (list 'let (list (car bj1479@x*)) (bj147b@f (cdr bj1479@x*))))))) bj1467@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1465@t)))))) (set! bj2841@bjd5a@let*-macro bjd5a@let*-macro) (set! bjd5c@or-macro (lambda (bj147d@stx) (let ((bj147f@t bj147d@stx)) (let ((bj1481@ls/false (bjd7c@syntax-dispatch bj147f@t '(_)))) (if bj1481@ls/false (apply (lambda () '#f) bj1481@ls/false) (let ((bj1483@t bj147f@t)) (let ((bj1485@ls/false (bjd7c@syntax-dispatch bj1483@t '(_ any . each-any)))) (if bj1485@ls/false (apply (lambda (bj1487@e bj1488@e*) (bjd32@bless (let bj148f@f ((bj148b@e bj1487@e) (bj148c@e* bj1488@e*)) (if (null? bj148c@e*) (list 'begin '#f bj148b@e) (list 'let (list (list 't bj148b@e)) (list 'if 't 't (bj148f@f (car bj148c@e*) (cdr bj148c@e*)))))))) bj1485@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1483@t))))))))) (set! bj2842@bjd5c@or-macro bjd5c@or-macro) (set! bjd5e@and-macro (lambda (bj1491@stx) (let ((bj1493@t bj1491@stx)) (let ((bj1495@ls/false (bjd7c@syntax-dispatch bj1493@t '(_)))) (if bj1495@ls/false (apply (lambda () '#t) bj1495@ls/false) (let ((bj1497@t bj1493@t)) (let ((bj1499@ls/false (bjd7c@syntax-dispatch bj1497@t '(_ any . each-any)))) (if bj1499@ls/false (apply (lambda (bj149b@e bj149c@e*) (bjd32@bless (let bj14a3@f ((bj149f@e bj149b@e) (bj14a0@e* bj149c@e*)) (if (null? bj14a0@e*) (list 'begin '#f bj149f@e) (cons 'if (cons bj149f@e (cons (bj14a3@f (car bj14a0@e*) (cdr bj14a0@e*)) '(#f)))))))) bj1499@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1497@t))))))))) (set! bj2843@bjd5e@and-macro bjd5e@and-macro) (set! bjd60@cond-macro (lambda (bj14a5@stx) (let ((bj14a7@t bj14a5@stx)) (let ((bj14a9@ls/false (bjd7c@syntax-dispatch bj14a7@t '(_ any . each-any)))) (if bj14a9@ls/false (apply (lambda (bj14ab@cls bj14ac@cls*) (bjd32@bless (let bj14b3@f ((bj14af@cls bj14ab@cls) (bj14b0@cls* bj14ac@cls*)) (if (null? bj14b0@cls*) (let ((bj14b5@t bj14af@cls)) (let ((bj14b7@ls/false (bjd7c@syntax-dispatch bj14b5@t '(#(scheme-id else) any . each-any)))) (if bj14b7@ls/false (apply (lambda (bj14b9@e bj14ba@e*) (cons 'begin (cons bj14b9@e bj14ba@e*))) bj14b7@ls/false) (let ((bj14bd@t bj14b5@t)) (let ((bj14bf@ls/false (bjd7c@syntax-dispatch bj14bd@t '(any #(scheme-id =>) any)))) (if bj14bf@ls/false (apply (lambda (bj14c1@e bj14c2@p) (list 'let (list (list 't bj14c1@e)) (list 'if 't (cons bj14c2@p '(t))))) bj14bf@ls/false) (let ((bj14c5@t bj14bd@t)) (let ((bj14c7@ls/false (bjd7c@syntax-dispatch bj14c5@t '(any)))) (if bj14c7@ls/false (apply (lambda (bj14c9@e) (cons 'or (cons bj14c9@e '((if #f #f))))) bj14c7@ls/false) (let ((bj14cb@t bj14c5@t)) (let ((bj14cd@ls/false (bjd7c@syntax-dispatch bj14cb@t '(any . each-any)))) (if bj14cd@ls/false (apply (lambda (bj14cf@e bj14d0@e*) (list 'if bj14cf@e (cons 'begin bj14d0@e*))) bj14cd@ls/false) (let ((bj14d3@t bj14cb@t)) (let ((bj14d5@ls/false (bjd7c@syntax-dispatch bj14d3@t '_))) (if bj14d5@ls/false (apply (lambda () (bje5c@syntax-violation '#f '"invalid last clause" bj14a5@stx)) bj14d5@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj14d3@t)))))))))))))))) (let ((bj14d7@t bj14af@cls)) (let ((bj14d9@ls/false (bjd7c@syntax-dispatch bj14d7@t '(#(scheme-id else) any . each-any)))) (if bj14d9@ls/false (apply (lambda (bj14db@e bj14dc@e*) (bje5c@syntax-violation '#f '"incorrect position of keyword else" bj14a5@stx)) bj14d9@ls/false) (let ((bj14df@t bj14d7@t)) (let ((bj14e1@ls/false (bjd7c@syntax-dispatch bj14df@t '(any #(scheme-id =>) any)))) (if bj14e1@ls/false (apply (lambda (bj14e3@e bj14e4@p) (list 'let (list (list 't bj14e3@e)) (list 'if 't (cons bj14e4@p '(t)) (bj14b3@f (car bj14b0@cls*) (cdr bj14b0@cls*))))) bj14e1@ls/false) (let ((bj14e7@t bj14df@t)) (let ((bj14e9@ls/false (bjd7c@syntax-dispatch bj14e7@t '(any)))) (if bj14e9@ls/false (apply (lambda (bj14eb@e) (list 'or bj14eb@e (bj14b3@f (car bj14b0@cls*) (cdr bj14b0@cls*)))) bj14e9@ls/false) (let ((bj14ed@t bj14e7@t)) (let ((bj14ef@ls/false (bjd7c@syntax-dispatch bj14ed@t '(any . each-any)))) (if bj14ef@ls/false (apply (lambda (bj14f1@e bj14f2@e*) (list 'if bj14f1@e (cons 'begin bj14f2@e*) (bj14b3@f (car bj14b0@cls*) (cdr bj14b0@cls*)))) bj14ef@ls/false) (let ((bj14f5@t bj14ed@t)) (let ((bj14f7@ls/false (bjd7c@syntax-dispatch bj14f5@t '_))) (if bj14f7@ls/false (apply (lambda () (bje5c@syntax-violation '#f '"invalid last clause" bj14a5@stx)) bj14f7@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj14f5@t)))))))))))))))))))) bj14a9@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj14a7@t)))))) (set! bj2844@bjd60@cond-macro bjd60@cond-macro) (set! bjd62@do-include (lambda (bj14f9@stx bj14fa@id bj14fb@filename) (let ((bj14ff@filename (bjb89@stx->datum bj14fb@filename))) (begin (if (not (and (string? bj14ff@filename) (bjb75@id? bj14fa@id))) (bje5c@syntax-violation '#f '"invalid syntax" bj14f9@stx) (void)) (cons (bjd32@bless 'begin) (with-input-from-file bj14ff@filename (lambda () (let bj1503@f ((bj1501@ls '())) (let ((bj1505@x (bj6b1@bj581@read-annotated))) (if (eof-object? bj1505@x) (reverse bj1501@ls) (bj1503@f (cons (bjb55@datum->stx bj14fa@id bj1505@x) bj1501@ls)))))))))))) (set! bj2845@bjd62@do-include bjd62@do-include) (set! bjd64@include-macro (lambda (bj1507@e) (let ((bj1509@t bj1507@e)) (let ((bj150b@ls/false (bjd7c@syntax-dispatch bj1509@t '(any any)))) (if bj150b@ls/false (apply (lambda (bj150d@id bj150e@filename) (bjd62@do-include bj1507@e bj150d@id bj150e@filename)) bj150b@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1509@t)))))) (set! bj2846@bjd64@include-macro bjd64@include-macro) (set! bjd66@include-into-macro (lambda (bj1511@e) (let ((bj1513@t bj1511@e)) (let ((bj1515@ls/false (bjd7c@syntax-dispatch bj1513@t '(_ any any)))) (if bj1515@ls/false (apply (lambda (bj1517@id bj1518@filename) (bjd62@do-include bj1511@e bj1517@id bj1518@filename)) bj1515@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1513@t)))))) (set! bj2847@bjd66@include-into-macro bjd66@include-into-macro) (set! bjd68@syntax-rules-macro (lambda (bj151b@e) (let ((bj151d@t bj151b@e)) (let ((bj151f@ls/false (bjd7c@syntax-dispatch bj151d@t '(_ each-any . #(each (any any)))))) (if bj151f@ls/false (apply (lambda (bj1521@lits bj1522@pat* bj1523@tmp*) (begin (bjd82@verify-literals bj1521@lits bj151b@e) (bjd32@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons bj1521@lits (map (lambda (bj1527@pat bj1528@tmp) (let ((bj152b@t bj1527@pat)) (let ((bj152d@ls/false (bjd7c@syntax-dispatch bj152b@t '(_ . any)))) (if bj152d@ls/false (apply (lambda (bj152f@rest) (list (cons 'g bj152f@rest) (list 'syntax bj1528@tmp))) bj152d@ls/false) (let ((bj1531@t bj152b@t)) (let ((bj1533@ls/false (bjd7c@syntax-dispatch bj1531@t '_))) (if bj1533@ls/false (apply (lambda () (bje5c@syntax-violation '#f '"invalid syntax-rules pattern" bj151b@e bj1527@pat)) bj1533@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1531@t)))))))) bj1522@pat* bj1523@tmp*)))))))) bj151f@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj151d@t)))))) (set! bj2848@bjd68@syntax-rules-macro bjd68@syntax-rules-macro) (set! bjd6a@quasiquote-macro (let ((bj1536@datum '#f) (bj1552@quasicons* '#f) (bj1554@quasicons '#f) (bj1556@quasiappend '#f) (bj1558@quasivector '#f) (bj155a@vquasi '#f) (bj155c@quasi '#f)) (begin (set! bj1536@datum (lambda (bj1637@x) (list (bjd04@scheme-stx 'quote) (bjb5d@mkstx bj1637@x '() '() '())))) (set! bj1552@quasicons* (lambda (bj162f@x bj1630@y) (let bj1635@f ((bj1633@x bj162f@x)) (if (null? bj1633@x) bj1630@y (bj1554@quasicons (car bj1633@x) (bj1635@f (cdr bj1633@x))))))) (set! bj1554@quasicons (lambda (bj1609@x bj160a@y) (let ((bj160d@t bj160a@y)) (let ((bj160f@ls/false (bjd7c@syntax-dispatch bj160d@t '(#(scheme-id quote) any)))) (if bj160f@ls/false (apply (lambda (bj1611@dy) (let ((bj1613@t bj1609@x)) (let ((bj1615@ls/false (bjd7c@syntax-dispatch bj1613@t '(#(scheme-id quote) any)))) (if bj1615@ls/false (apply (lambda (bj1617@dx) (list (bjd04@scheme-stx 'quote) (cons bj1617@dx bj1611@dy))) bj1615@ls/false) (let ((bj1619@t bj1613@t)) (let ((bj161b@ls/false (bjd7c@syntax-dispatch bj1619@t '_))) (if bj161b@ls/false (apply (lambda () (let ((bj161d@t bj1611@dy)) (let ((bj161f@ls/false (bjd7c@syntax-dispatch bj161d@t '()))) (if bj161f@ls/false (apply (lambda () (list (bjd04@scheme-stx 'list) bj1609@x)) bj161f@ls/false) (let ((bj1621@t bj161d@t)) (let ((bj1623@ls/false (bjd7c@syntax-dispatch bj1621@t '_))) (if bj1623@ls/false (apply (lambda () (list (bjd04@scheme-stx 'cons) bj1609@x bj160a@y)) bj1623@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1621@t)))))))) bj161b@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1619@t)))))))) bj160f@ls/false) (let ((bj1625@t bj160d@t)) (let ((bj1627@ls/false (bjd7c@syntax-dispatch bj1625@t '(#(scheme-id list) . each-any)))) (if bj1627@ls/false (apply (lambda (bj1629@stuff) (cons* (bjd04@scheme-stx 'list) bj1609@x bj1629@stuff)) bj1627@ls/false) (let ((bj162b@t bj1625@t)) (let ((bj162d@ls/false (bjd7c@syntax-dispatch bj162b@t '_))) (if bj162d@ls/false (apply (lambda () (list (bjd04@scheme-stx 'cons) bj1609@x bj160a@y)) bj162d@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj162b@t)))))))))))) (set! bj1556@quasiappend (lambda (bj15ef@x bj15f0@y) (let ((bj15f3@ls (let bj15f7@f ((bj15f5@x bj15ef@x)) (if (null? bj15f5@x) (let ((bj15f9@t bj15f0@y)) (let ((bj15fb@ls/false (bjd7c@syntax-dispatch bj15f9@t '(#(scheme-id quote) ())))) (if bj15fb@ls/false (apply (lambda () '()) bj15fb@ls/false) (let ((bj15fd@t bj15f9@t)) (let ((bj15ff@ls/false (bjd7c@syntax-dispatch bj15fd@t '_))) (if bj15ff@ls/false (apply (lambda () (list bj15f0@y)) bj15ff@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj15fd@t))))))) (let ((bj1601@t (car bj15f5@x))) (let ((bj1603@ls/false (bjd7c@syntax-dispatch bj1601@t '(#(scheme-id quote) ())))) (if bj1603@ls/false (apply (lambda () (bj15f7@f (cdr bj15f5@x))) bj1603@ls/false) (let ((bj1605@t bj1601@t)) (let ((bj1607@ls/false (bjd7c@syntax-dispatch bj1605@t '_))) (if bj1607@ls/false (apply (lambda () (cons (car bj15f5@x) (bj15f7@f (cdr bj15f5@x)))) bj1607@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1605@t))))))))))) (if (null? bj15f3@ls) (list (bjd04@scheme-stx 'quote) '()) (if (null? (cdr bj15f3@ls)) (car bj15f3@ls) (cons* (bjd04@scheme-stx 'append) bj15f3@ls)))))) (set! bj1558@quasivector (lambda (bj15bd@x) (let ((bj15bf@pat-x bj15bd@x)) (let ((bj15c1@t bj15bf@pat-x)) (let ((bj15c3@ls/false (bjd7c@syntax-dispatch bj15c1@t '(#(scheme-id quote) each-any)))) (if bj15c3@ls/false (apply (lambda (bj15c5@x*) (list (bjd04@scheme-stx 'quote) (list->vector bj15c5@x*))) bj15c3@ls/false) (let ((bj15c7@t bj15c1@t)) (let ((bj15c9@ls/false (bjd7c@syntax-dispatch bj15c7@t '_))) (if bj15c9@ls/false (apply (lambda () (let bj15d1@f ((bj15cb@x bj15bd@x) (bj15cc@k (lambda (bj15cf@ls) (cons* (bjd04@scheme-stx 'vector) bj15cf@ls)))) (let ((bj15d3@t bj15cb@x)) (let ((bj15d5@ls/false (bjd7c@syntax-dispatch bj15d3@t '(#(scheme-id quote) each-any)))) (if bj15d5@ls/false (apply (lambda (bj15d7@x*) (bj15cc@k (map (lambda (bj15d9@x) (list (bjd04@scheme-stx 'quote) bj15d9@x)) bj15d7@x*))) bj15d5@ls/false) (let ((bj15db@t bj15d3@t)) (let ((bj15dd@ls/false (bjd7c@syntax-dispatch bj15db@t '(#(scheme-id list) . each-any)))) (if bj15dd@ls/false (apply (lambda (bj15df@x*) (bj15cc@k bj15df@x*)) bj15dd@ls/false) (let ((bj15e1@t bj15db@t)) (let ((bj15e3@ls/false (bjd7c@syntax-dispatch bj15e1@t '(#(scheme-id cons) any any)))) (if bj15e3@ls/false (apply (lambda (bj15e5@x bj15e6@y) (bj15d1@f bj15e6@y (lambda (bj15e9@ls) (bj15cc@k (cons bj15e5@x bj15e9@ls))))) bj15e3@ls/false) (let ((bj15eb@t bj15e1@t)) (let ((bj15ed@ls/false (bjd7c@syntax-dispatch bj15eb@t '_))) (if bj15ed@ls/false (apply (lambda () (list (bjd04@scheme-stx 'list->vector) bj15bf@pat-x)) bj15ed@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj15eb@t))))))))))))))) bj15c9@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj15c7@t)))))))))) (set! bj155a@vquasi (lambda (bj159b@p bj159c@lev) (let ((bj159f@t bj159b@p)) (let ((bj15a1@ls/false (bjd7c@syntax-dispatch bj159f@t '(any . any)))) (if bj15a1@ls/false (apply (lambda (bj15a3@p bj15a4@q) (let ((bj15a7@t bj15a3@p)) (let ((bj15a9@ls/false (bjd7c@syntax-dispatch bj15a7@t '(#(scheme-id unquote) . each-any)))) (if bj15a9@ls/false (apply (lambda (bj15ab@p) (if (= bj159c@lev '0) (bj1552@quasicons* bj15ab@p (bj155a@vquasi bj15a4@q bj159c@lev)) (bj1554@quasicons (bj1554@quasicons (bj1536@datum 'unquote) (bj155c@quasi bj15ab@p (- bj159c@lev '1))) (bj155a@vquasi bj15a4@q bj159c@lev)))) bj15a9@ls/false) (let ((bj15ad@t bj15a7@t)) (let ((bj15af@ls/false (bjd7c@syntax-dispatch bj15ad@t '(#(scheme-id unquote-splicing) . each-any)))) (if bj15af@ls/false (apply (lambda (bj15b1@p) (if (= bj159c@lev '0) (bj1556@quasiappend bj15b1@p (bj155a@vquasi bj15a4@q bj159c@lev)) (bj1554@quasicons (bj1554@quasicons (bj1536@datum 'unquote-splicing) (bj155c@quasi bj15b1@p (- bj159c@lev '1))) (bj155a@vquasi bj15a4@q bj159c@lev)))) bj15af@ls/false) (let ((bj15b3@t bj15ad@t)) (let ((bj15b5@ls/false (bjd7c@syntax-dispatch bj15b3@t 'any))) (if bj15b5@ls/false (apply (lambda (bj15b7@p) (bj1554@quasicons (bj155c@quasi bj15b7@p bj159c@lev) (bj155a@vquasi bj15a4@q bj159c@lev))) bj15b5@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj15b3@t))))))))))) bj15a1@ls/false) (let ((bj15b9@t bj159f@t)) (let ((bj15bb@ls/false (bjd7c@syntax-dispatch bj15b9@t '()))) (if bj15bb@ls/false (apply (lambda () (list (bjd04@scheme-stx 'quote) '())) bj15bb@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj15b9@t))))))))) (set! bj155c@quasi (lambda (bj1565@p bj1566@lev) (let ((bj1569@t bj1565@p)) (let ((bj156b@ls/false (bjd7c@syntax-dispatch bj1569@t '(#(scheme-id unquote) any)))) (if bj156b@ls/false (apply (lambda (bj156d@p) (if (= bj1566@lev '0) bj156d@p (bj1554@quasicons (bj1536@datum 'unquote) (bj155c@quasi (list bj156d@p) (- bj1566@lev '1))))) bj156b@ls/false) (let ((bj156f@t bj1569@t)) (let ((bj1571@ls/false (bjd7c@syntax-dispatch bj156f@t '((#(scheme-id unquote) . each-any) . any)))) (if bj1571@ls/false (apply (lambda (bj1573@p bj1574@q) (if (= bj1566@lev '0) (bj1552@quasicons* bj1573@p (bj155c@quasi bj1574@q bj1566@lev)) (bj1554@quasicons (bj1554@quasicons (bj1536@datum 'unquote) (bj155c@quasi bj1573@p (- bj1566@lev '1))) (bj155c@quasi bj1574@q bj1566@lev)))) bj1571@ls/false) (let ((bj1577@t bj156f@t)) (let ((bj1579@ls/false (bjd7c@syntax-dispatch bj1577@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if bj1579@ls/false (apply (lambda (bj157b@p bj157c@q) (if (= bj1566@lev '0) (bj1556@quasiappend bj157b@p (bj155c@quasi bj157c@q bj1566@lev)) (bj1554@quasicons (bj1554@quasicons (bj1536@datum 'unquote-splicing) (bj155c@quasi bj157b@p (- bj1566@lev '1))) (bj155c@quasi bj157c@q bj1566@lev)))) bj1579@ls/false) (let ((bj157f@t bj1577@t)) (let ((bj1581@ls/false (bjd7c@syntax-dispatch bj157f@t '(#(scheme-id quasiquote) any)))) (if bj1581@ls/false (apply (lambda (bj1583@p) (bj1554@quasicons (bj1536@datum 'quasiquote) (bj155c@quasi (list bj1583@p) (+ bj1566@lev '1)))) bj1581@ls/false) (let ((bj1585@t bj157f@t)) (let ((bj1587@ls/false (bjd7c@syntax-dispatch bj1585@t '(any . any)))) (if bj1587@ls/false (apply (lambda (bj1589@p bj158a@q) (bj1554@quasicons (bj155c@quasi bj1589@p bj1566@lev) (bj155c@quasi bj158a@q bj1566@lev))) bj1587@ls/false) (let ((bj158d@t bj1585@t)) (let ((bj158f@ls/false (bjd7c@syntax-dispatch bj158d@t '#(vector each-any)))) (if (and bj158f@ls/false (apply (lambda (bj1591@x) (not (bjb41@stx? bj1591@x))) bj158f@ls/false)) (apply (lambda (bj1593@x) (bj1558@quasivector (bj155a@vquasi bj1593@x bj1566@lev))) bj158f@ls/false) (let ((bj1595@t bj158d@t)) (let ((bj1597@ls/false (bjd7c@syntax-dispatch bj1595@t 'any))) (if bj1597@ls/false (apply (lambda (bj1599@p) (list (bjd04@scheme-stx 'quote) bj1599@p)) bj1597@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1595@t)))))))))))))))))))))))) (lambda (bj155d@x) (let ((bj155f@t bj155d@x)) (let ((bj1561@ls/false (bjd7c@syntax-dispatch bj155f@t '(_ any)))) (if bj1561@ls/false (apply (lambda (bj1563@e) (bj155c@quasi bj1563@e '0)) bj1561@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj155f@t)))))))) (set! bj2849@bjd6a@quasiquote-macro bjd6a@quasiquote-macro) (set! bjd6c@quasisyntax-macro (let ((bj163a@quasi '#f)) (begin (set! bj163a@quasi (lambda (bj1655@p bj1656@lev) (let ((bj1659@t bj1655@p)) (let ((bj165b@ls/false (bjd7c@syntax-dispatch bj1659@t '(#(scheme-id unsyntax) any)))) (if bj165b@ls/false (apply (lambda (bj165d@p) (if (= bj1656@lev '0) (let ((bj165f@g (gensym))) (values (list bj165f@g) (list bj165d@p) bj165f@g)) (call-with-values (lambda () (bj163a@quasi bj165d@p (- bj1656@lev '1))) (lambda (bj1667@bj1662 bj1668@bj1664 bj1669@bj1666) (let ((bj166d@p bj1669@bj1666) (bj166e@rhs* bj1668@bj1664) (bj166f@lhs* bj1667@bj1662)) (values bj166f@lhs* bj166e@rhs* (list 'unsyntax bj166d@p))))))) bj165b@ls/false) (let ((bj1673@t bj1659@t)) (let ((bj1675@ls/false (bjd7c@syntax-dispatch bj1673@t '#(scheme-id unsyntax)))) (if (and bj1675@ls/false (apply (lambda () (= bj1656@lev '0)) bj1675@ls/false)) (apply (lambda () (bje5c@syntax-violation '#f '"incorrect use of unsyntax" bj1655@p)) bj1675@ls/false) (let ((bj1677@t bj1673@t)) (let ((bj1679@ls/false (bjd7c@syntax-dispatch bj1677@t '((#(scheme-id unsyntax) . each-any) . any)))) (if bj1679@ls/false (apply (lambda (bj167b@p* bj167c@q) (call-with-values (lambda () (bj163a@quasi bj167c@q bj1656@lev)) (lambda (bj1685@bj1680 bj1686@bj1682 bj1687@bj1684) (let ((bj168b@q bj1687@bj1684) (bj168c@rhs* bj1686@bj1682) (bj168d@lhs* bj1685@bj1680)) (if (= bj1656@lev '0) (let ((bj1691@g* (map (lambda (bj1693@x) (gensym)) bj167b@p*))) (values (append bj1691@g* bj168d@lhs*) (append bj167b@p* bj168c@rhs*) (append bj1691@g* bj168b@q))) (call-with-values (lambda () (bj163a@quasi bj167b@p* (- bj1656@lev '1))) (lambda (bj169b@bj1696 bj169c@bj1698 bj169d@bj169a) (let ((bj16a1@p* bj169d@bj169a) (bj16a2@rhs2* bj169c@bj1698) (bj16a3@lhs2* bj169b@bj1696)) (values (append bj16a3@lhs2* bj168d@lhs*) (append bj16a2@rhs2* bj168c@rhs*) (cons (cons 'unsyntax bj16a1@p*) bj168b@q)))))))))) bj1679@ls/false) (let ((bj16a7@t bj1677@t)) (let ((bj16a9@ls/false (bjd7c@syntax-dispatch bj16a7@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if bj16a9@ls/false (apply (lambda (bj16ab@p* bj16ac@q) (call-with-values (lambda () (bj163a@quasi bj16ac@q bj1656@lev)) (lambda (bj16b5@bj16b0 bj16b6@bj16b2 bj16b7@bj16b4) (let ((bj16bb@q bj16b7@bj16b4) (bj16bc@rhs* bj16b6@bj16b2) (bj16bd@lhs* bj16b5@bj16b0)) (if (= bj1656@lev '0) (let ((bj16c1@g* (map (lambda (bj16c3@x) (gensym)) bj16ab@p*))) (values (append (map (lambda (bj16c5@g) (cons bj16c5@g '(...))) bj16c1@g*) bj16bd@lhs*) (append bj16ab@p* bj16bc@rhs*) (append (apply append (map (lambda (bj16c7@g) (cons bj16c7@g '(...))) bj16c1@g*)) bj16bb@q))) (call-with-values (lambda () (bj163a@quasi bj16ab@p* (- bj1656@lev '1))) (lambda (bj16cf@bj16ca bj16d0@bj16cc bj16d1@bj16ce) (let ((bj16d5@p* bj16d1@bj16ce) (bj16d6@rhs2* bj16d0@bj16cc) (bj16d7@lhs2* bj16cf@bj16ca)) (values (append bj16d7@lhs2* bj16bd@lhs*) (append bj16d6@rhs2* bj16bc@rhs*) (cons (cons 'unsyntax-splicing bj16d5@p*) bj16bb@q)))))))))) bj16a9@ls/false) (let ((bj16db@t bj16a7@t)) (let ((bj16dd@ls/false (bjd7c@syntax-dispatch bj16db@t '#(scheme-id unsyntax-splicing)))) (if (and bj16dd@ls/false (apply (lambda () (= bj1656@lev '0)) bj16dd@ls/false)) (apply (lambda () (bje5c@syntax-violation '#f '"incorrect use of unsyntax-splicing" bj1655@p)) bj16dd@ls/false) (let ((bj16df@t bj16db@t)) (let ((bj16e1@ls/false (bjd7c@syntax-dispatch bj16df@t '(#(scheme-id quasisyntax) any)))) (if bj16e1@ls/false (apply (lambda (bj16e3@p) (call-with-values (lambda () (bj163a@quasi bj16e3@p (+ bj1656@lev '1))) (lambda (bj16eb@bj16e6 bj16ec@bj16e8 bj16ed@bj16ea) (let ((bj16f1@p bj16ed@bj16ea) (bj16f2@rhs* bj16ec@bj16e8) (bj16f3@lhs* bj16eb@bj16e6)) (values bj16f3@lhs* bj16f2@rhs* (list 'quasisyntax bj16f1@p)))))) bj16e1@ls/false) (let ((bj16f7@t bj16df@t)) (let ((bj16f9@ls/false (bjd7c@syntax-dispatch bj16f7@t '(any . any)))) (if bj16f9@ls/false (apply (lambda (bj16fb@p bj16fc@q) (call-with-values (lambda () (bj163a@quasi bj16fb@p bj1656@lev)) (lambda (bj170b@bj1700 bj170c@bj1702 bj170d@bj1704) (call-with-values (lambda () (bj163a@quasi bj16fc@q bj1656@lev)) (lambda (bj1711@bj1706 bj1712@bj1708 bj1713@bj170a) (let ((bj1717@q bj1713@bj170a) (bj1718@rhs2* bj1712@bj1708) (bj1719@lhs2* bj1711@bj1706) (bj171a@p bj170d@bj1704) (bj171b@rhs* bj170c@bj1702) (bj171c@lhs* bj170b@bj1700)) (values (append bj1719@lhs2* bj171c@lhs*) (append bj1718@rhs2* bj171b@rhs*) (cons bj171a@p bj1717@q)))))))) bj16f9@ls/false) (let ((bj1723@t bj16f7@t)) (let ((bj1725@ls/false (bjd7c@syntax-dispatch bj1723@t '#(vector each-any)))) (if bj1725@ls/false (apply (lambda (bj1727@x*) (call-with-values (lambda () (bj163a@quasi bj1727@x* bj1656@lev)) (lambda (bj172f@bj172a bj1730@bj172c bj1731@bj172e) (let ((bj1735@x* bj1731@bj172e) (bj1736@rhs* bj1730@bj172c) (bj1737@lhs* bj172f@bj172a)) (values bj1737@lhs* bj1736@rhs* (list->vector bj1735@x*)))))) bj1725@ls/false) (let ((bj173b@t bj1723@t)) (let ((bj173d@ls/false (bjd7c@syntax-dispatch bj173b@t '_))) (if bj173d@ls/false (apply (lambda () (values '() '() bj1655@p)) bj173d@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj173b@t)))))))))))))))))))))))))))))) (lambda (bj163b@x) (let ((bj163d@t bj163b@x)) (let ((bj163f@ls/false (bjd7c@syntax-dispatch bj163d@t '(_ any)))) (if bj163f@ls/false (apply (lambda (bj1641@e) (call-with-values (lambda () (bj163a@quasi bj1641@e '0)) (lambda (bj1649@bj1644 bj164a@bj1646 bj164b@bj1648) (let ((bj164f@v bj164b@bj1648) (bj1650@rhs* bj164a@bj1646) (bj1651@lhs* bj1649@bj1644)) (bjd32@bless (list 'syntax-case (cons 'list bj1650@rhs*) '() (list bj1651@lhs* (list 'syntax bj164f@v)))))))) bj163f@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj163d@t)))))))) (set! bj284a@bjd6c@quasisyntax-macro bjd6c@quasisyntax-macro) (set! bjd6e@define-struct-macro (lambda (bj173f@stx) (bje5c@syntax-violation '#f '"define-struct not supported" bj173f@stx))) (set! bj284b@bjd6e@define-struct-macro bjd6e@define-struct-macro) (set! bjd70@define-record-type-macro (lambda (bj1741@x) (let ((bj1744@id '#f) (bj1746@get-record-name '#f) (bj1748@get-record-constructor-name '#f) (bj174a@get-record-predicate-name '#f) (bj174c@get-clause '#f) (bj174e@foo-rtd-code '#f) (bj1750@parent-rtd-code '#f) (bj1752@parent-rcd-code '#f) (bj1754@foo-rcd-code '#f) (bj1756@get-protocol-code '#f) (bj1758@get-fields '#f) (bj175a@get-mutator-indices '#f) (bj175c@get-mutators '#f) (bj175e@get-accessors '#f) (bj1760@enumerate '#f) (bj1762@do-define-record '#f) (bj1764@verify-clauses '#f)) (begin (set! bj1744@id (lambda (bj1937@ctxt . bj1939@str*) (bje60@datum->syntax bj1937@ctxt (string->symbol (apply string-append (map (lambda (bj193b@x) (if (symbol? bj193b@x) (symbol->string bj193b@x) (if (string? bj193b@x) bj193b@x (assertion-violation 'define-record-type '"BUG")))) bj1939@str*)))))) (set! bj1746@get-record-name (lambda (bj1925@spec) (let ((bj1927@t bj1925@spec)) (let ((bj1929@ls/false (bjd7c@syntax-dispatch bj1927@t '(any any any)))) (if bj1929@ls/false (apply (lambda (bj192b@foo bj192c@make-foo bj192d@foo?) bj192b@foo) bj1929@ls/false) (let ((bj1931@t bj1927@t)) (let ((bj1933@ls/false (bjd7c@syntax-dispatch bj1931@t 'any))) (if bj1933@ls/false (apply (lambda (bj1935@foo) bj1935@foo) bj1933@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1931@t))))))))) (set! bj1748@get-record-constructor-name (lambda (bj1911@spec) (let ((bj1913@t bj1911@spec)) (let ((bj1915@ls/false (bjd7c@syntax-dispatch bj1913@t '(any any any)))) (if bj1915@ls/false (apply (lambda (bj1917@foo bj1918@make-foo bj1919@foo?) bj1918@make-foo) bj1915@ls/false) (let ((bj191d@t bj1913@t)) (let ((bj191f@ls/false (bjd7c@syntax-dispatch bj191d@t 'any))) (if (and bj191f@ls/false (apply (lambda (bj1921@foo) (bjb75@id? bj1921@foo)) bj191f@ls/false)) (apply (lambda (bj1923@foo) (bj1744@id bj1923@foo '"make-" (bjb89@stx->datum bj1923@foo))) bj191f@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj191d@t))))))))) (set! bj174a@get-record-predicate-name (lambda (bj18fd@spec) (let ((bj18ff@t bj18fd@spec)) (let ((bj1901@ls/false (bjd7c@syntax-dispatch bj18ff@t '(any any any)))) (if bj1901@ls/false (apply (lambda (bj1903@foo bj1904@make-foo bj1905@foo?) bj1905@foo?) bj1901@ls/false) (let ((bj1909@t bj18ff@t)) (let ((bj190b@ls/false (bjd7c@syntax-dispatch bj1909@t 'any))) (if (and bj190b@ls/false (apply (lambda (bj190d@foo) (bjb75@id? bj190d@foo)) bj190b@ls/false)) (apply (lambda (bj190f@foo) (bj1744@id bj190f@foo (bjb89@stx->datum bj190f@foo) '"?")) bj190b@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1909@t))))))))) (set! bj174c@get-clause (lambda (bj18eb@id bj18ec@ls) (let ((bj18ef@t bj18ec@ls)) (let ((bj18f1@ls/false (bjd7c@syntax-dispatch bj18ef@t '()))) (if bj18f1@ls/false (apply (lambda () '#f) bj18f1@ls/false) (let ((bj18f3@t bj18ef@t)) (let ((bj18f5@ls/false (bjd7c@syntax-dispatch bj18f3@t '((any . any) . any)))) (if bj18f5@ls/false (apply (lambda (bj18f7@x bj18f8@rest bj18f9@ls) (if (bjb7b@free-id=? (bjd32@bless bj18eb@id) bj18f7@x) (cons bj18f7@x bj18f8@rest) (bj174c@get-clause bj18eb@id bj18f9@ls))) bj18f5@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj18f3@t))))))))) (set! bj174e@foo-rtd-code (lambda (bj1899@name bj189a@clause* bj189b@parent-rtd-code) (let ((bj18a0@convert-field-spec* '#f)) (begin (set! bj18a0@convert-field-spec* (lambda (bj18d1@ls) (list->vector (map (lambda (bj18d3@x) (let ((bj18d5@t bj18d3@x)) (let ((bj18d7@ls/false (bjd7c@syntax-dispatch bj18d5@t '(#(scheme-id mutable) any . any)))) (if bj18d7@ls/false (apply (lambda (bj18d9@name bj18da@rest) (list 'mutable bj18d9@name)) bj18d7@ls/false) (let ((bj18dd@t bj18d5@t)) (let ((bj18df@ls/false (bjd7c@syntax-dispatch bj18dd@t '(#(scheme-id immutable) any . any)))) (if bj18df@ls/false (apply (lambda (bj18e1@name bj18e2@rest) (list 'immutable bj18e1@name)) bj18df@ls/false) (let ((bj18e5@t bj18dd@t)) (let ((bj18e7@ls/false (bjd7c@syntax-dispatch bj18e5@t 'any))) (if bj18e7@ls/false (apply (lambda (bj18e9@name) (list 'immutable bj18e9@name)) bj18e7@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj18e5@t))))))))))) bj18d1@ls)))) (let ((bj18a1@uid-code (let ((bj18a9@t (bj174c@get-clause 'nongenerative bj189a@clause*))) (let ((bj18ab@ls/false (bjd7c@syntax-dispatch bj18a9@t '(_)))) (if bj18ab@ls/false (apply (lambda () (list 'quote (gensym))) bj18ab@ls/false) (let ((bj18ad@t bj18a9@t)) (let ((bj18af@ls/false (bjd7c@syntax-dispatch bj18ad@t '(_ any)))) (if bj18af@ls/false (apply (lambda (bj18b1@uid) (list 'quote bj18b1@uid)) bj18af@ls/false) (let ((bj18b3@t bj18ad@t)) (let ((bj18b5@ls/false (bjd7c@syntax-dispatch bj18b3@t '_))) (if bj18b5@ls/false (apply (lambda () '#f) bj18b5@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj18b3@t))))))))))) (bj18a2@sealed? (let ((bj18b7@t (bj174c@get-clause 'sealed bj189a@clause*))) (let ((bj18b9@ls/false (bjd7c@syntax-dispatch bj18b7@t '(_ #(atom #t))))) (if bj18b9@ls/false (apply (lambda () '#t) bj18b9@ls/false) (let ((bj18bb@t bj18b7@t)) (let ((bj18bd@ls/false (bjd7c@syntax-dispatch bj18bb@t '_))) (if bj18bd@ls/false (apply (lambda () '#f) bj18bd@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj18bb@t)))))))) (bj18a3@opaque? (let ((bj18bf@t (bj174c@get-clause 'opaque bj189a@clause*))) (let ((bj18c1@ls/false (bjd7c@syntax-dispatch bj18bf@t '(_ #(atom #t))))) (if bj18c1@ls/false (apply (lambda () '#t) bj18c1@ls/false) (let ((bj18c3@t bj18bf@t)) (let ((bj18c5@ls/false (bjd7c@syntax-dispatch bj18c3@t '_))) (if bj18c5@ls/false (apply (lambda () '#f) bj18c5@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj18c3@t)))))))) (bj18a4@fields (let ((bj18c7@t (bj174c@get-clause 'fields bj189a@clause*))) (let ((bj18c9@ls/false (bjd7c@syntax-dispatch bj18c7@t '(_ . each-any)))) (if bj18c9@ls/false (apply (lambda (bj18cb@field-spec*) (list 'quote (bj18a0@convert-field-spec* bj18cb@field-spec*))) bj18c9@ls/false) (let ((bj18cd@t bj18c7@t)) (let ((bj18cf@ls/false (bjd7c@syntax-dispatch bj18cd@t '_))) (if bj18cf@ls/false (apply (lambda () ''#()) bj18cf@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj18cd@t))))))))) (bjd32@bless (list 'make-record-type-descriptor (list 'quote bj1899@name) bj189b@parent-rtd-code bj18a1@uid-code bj18a2@sealed? bj18a3@opaque? bj18a4@fields))))))) (set! bj1750@parent-rtd-code (lambda (bj1881@clause*) (let ((bj1883@t (bj174c@get-clause 'parent bj1881@clause*))) (let ((bj1885@ls/false (bjd7c@syntax-dispatch bj1883@t '(_ any)))) (if bj1885@ls/false (apply (lambda (bj1887@name) (list 'record-type-descriptor bj1887@name)) bj1885@ls/false) (let ((bj1889@t bj1883@t)) (let ((bj188b@ls/false (bjd7c@syntax-dispatch bj1889@t '#(atom #f)))) (if bj188b@ls/false (apply (lambda () (let ((bj188d@t (bj174c@get-clause 'parent-rtd bj1881@clause*))) (let ((bj188f@ls/false (bjd7c@syntax-dispatch bj188d@t '(_ any any)))) (if bj188f@ls/false (apply (lambda (bj1891@rtd bj1892@rcd) bj1891@rtd) bj188f@ls/false) (let ((bj1895@t bj188d@t)) (let ((bj1897@ls/false (bjd7c@syntax-dispatch bj1895@t '#(atom #f)))) (if bj1897@ls/false (apply (lambda () '#f) bj1897@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1895@t)))))))) bj188b@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1889@t))))))))) (set! bj1752@parent-rcd-code (lambda (bj1869@clause*) (let ((bj186b@t (bj174c@get-clause 'parent bj1869@clause*))) (let ((bj186d@ls/false (bjd7c@syntax-dispatch bj186b@t '(_ any)))) (if bj186d@ls/false (apply (lambda (bj186f@name) (list 'record-constructor-descriptor bj186f@name)) bj186d@ls/false) (let ((bj1871@t bj186b@t)) (let ((bj1873@ls/false (bjd7c@syntax-dispatch bj1871@t '#(atom #f)))) (if bj1873@ls/false (apply (lambda () (let ((bj1875@t (bj174c@get-clause 'parent-rtd bj1869@clause*))) (let ((bj1877@ls/false (bjd7c@syntax-dispatch bj1875@t '(_ any any)))) (if bj1877@ls/false (apply (lambda (bj1879@rtd bj187a@rcd) bj187a@rcd) bj1877@ls/false) (let ((bj187d@t bj1875@t)) (let ((bj187f@ls/false (bjd7c@syntax-dispatch bj187d@t '#(atom #f)))) (if bj187f@ls/false (apply (lambda () '#f) bj187f@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj187d@t)))))))) bj1873@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1871@t))))))))) (set! bj1754@foo-rcd-code (lambda (bj1861@clause* bj1862@foo-rtd bj1863@protocol bj1864@parent-rcd-code) (list 'make-record-constructor-descriptor bj1862@foo-rtd bj1864@parent-rcd-code bj1863@protocol))) (set! bj1756@get-protocol-code (lambda (bj1855@clause*) (let ((bj1857@t (bj174c@get-clause 'protocol bj1855@clause*))) (let ((bj1859@ls/false (bjd7c@syntax-dispatch bj1857@t '(_ any)))) (if bj1859@ls/false (apply (lambda (bj185b@expr) bj185b@expr) bj1859@ls/false) (let ((bj185d@t bj1857@t)) (let ((bj185f@ls/false (bjd7c@syntax-dispatch bj185d@t '_))) (if bj185f@ls/false (apply (lambda () '#f) bj185f@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj185d@t))))))))) (set! bj1758@get-fields (lambda (bj1843@clause*) (let ((bj1845@t bj1843@clause*)) (let ((bj1847@ls/false (bjd7c@syntax-dispatch bj1845@t '()))) (if bj1847@ls/false (apply (lambda () '()) bj1847@ls/false) (let ((bj1849@t bj1845@t)) (let ((bj184b@ls/false (bjd7c@syntax-dispatch bj1849@t '((#(scheme-id fields) . each-any) . _)))) (if bj184b@ls/false (apply (lambda (bj184d@f*) bj184d@f*) bj184b@ls/false) (let ((bj184f@t bj1849@t)) (let ((bj1851@ls/false (bjd7c@syntax-dispatch bj184f@t '(_ . any)))) (if bj1851@ls/false (apply (lambda (bj1853@rest) (bj1758@get-fields bj1853@rest)) bj1851@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj184f@t)))))))))))) (set! bj175a@get-mutator-indices (lambda (bj182b@fields) (let bj1831@f ((bj182d@fields bj182b@fields) (bj182e@i '0)) (let ((bj1833@t bj182d@fields)) (let ((bj1835@ls/false (bjd7c@syntax-dispatch bj1833@t '()))) (if bj1835@ls/false (apply (lambda () '()) bj1835@ls/false) (let ((bj1837@t bj1833@t)) (let ((bj1839@ls/false (bjd7c@syntax-dispatch bj1837@t '((#(scheme-id mutable) . _) . any)))) (if bj1839@ls/false (apply (lambda (bj183b@rest) (cons bj182e@i (bj1831@f bj183b@rest (+ bj182e@i '1)))) bj1839@ls/false) (let ((bj183d@t bj1837@t)) (let ((bj183f@ls/false (bjd7c@syntax-dispatch bj183d@t '(_ . any)))) (if bj183f@ls/false (apply (lambda (bj1841@rest) (bj1831@f bj1841@rest (+ bj182e@i '1))) bj183f@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj183d@t))))))))))))) (set! bj175c@get-mutators (lambda (bj1801@foo bj1802@fields) (let ((bj1806@gen-name '#f)) (begin (set! bj1806@gen-name (lambda (bj1829@x) (bje60@datum->syntax bj1801@foo (string->symbol (string-append (symbol->string (bje62@syntax->datum bj1801@foo)) '"-" (symbol->string (bje62@syntax->datum bj1829@x)) '"-set!"))))) (let bj1809@f ((bj1807@fields bj1802@fields)) (let ((bj180b@t bj1807@fields)) (let ((bj180d@ls/false (bjd7c@syntax-dispatch bj180b@t '()))) (if bj180d@ls/false (apply (lambda () '()) bj180d@ls/false) (let ((bj180f@t bj180b@t)) (let ((bj1811@ls/false (bjd7c@syntax-dispatch bj180f@t '((#(scheme-id mutable) any any any) . any)))) (if bj1811@ls/false (apply (lambda (bj1813@name bj1814@accessor bj1815@mutator bj1816@rest) (cons bj1815@mutator (bj1809@f bj1816@rest))) bj1811@ls/false) (let ((bj181b@t bj180f@t)) (let ((bj181d@ls/false (bjd7c@syntax-dispatch bj181b@t '((#(scheme-id mutable) any) . any)))) (if bj181d@ls/false (apply (lambda (bj181f@name bj1820@rest) (cons (bj1806@gen-name bj181f@name) (bj1809@f bj1820@rest))) bj181d@ls/false) (let ((bj1823@t bj181b@t)) (let ((bj1825@ls/false (bjd7c@syntax-dispatch bj1823@t '(_ . any)))) (if bj1825@ls/false (apply (lambda (bj1827@rest) (bj1809@f bj1827@rest)) bj1825@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1823@t)))))))))))))))))) (set! bj175e@get-accessors (lambda (bj17bd@foo bj17be@fields) (let ((bj17c2@gen-name '#f)) (begin (set! bj17c2@gen-name (lambda (bj17ff@x) (bje60@datum->syntax bj17bd@foo (string->symbol (string-append (symbol->string (bje62@syntax->datum bj17bd@foo)) '"-" (symbol->string (bje62@syntax->datum bj17ff@x))))))) (map (lambda (bj17c3@field) (let ((bj17c5@t bj17c3@field)) (let ((bj17c7@ls/false (bjd7c@syntax-dispatch bj17c5@t '(#(scheme-id mutable) any any any)))) (if (and bj17c7@ls/false (apply (lambda (bj17c9@name bj17ca@accessor bj17cb@mutator) (bjb75@id? bj17ca@accessor)) bj17c7@ls/false)) (apply (lambda (bj17cf@name bj17d0@accessor bj17d1@mutator) bj17d0@accessor) bj17c7@ls/false) (let ((bj17d5@t bj17c5@t)) (let ((bj17d7@ls/false (bjd7c@syntax-dispatch bj17d5@t '(#(scheme-id immutable) any any)))) (if (and bj17d7@ls/false (apply (lambda (bj17d9@name bj17da@accessor) (bjb75@id? bj17da@accessor)) bj17d7@ls/false)) (apply (lambda (bj17dd@name bj17de@accessor) bj17de@accessor) bj17d7@ls/false) (let ((bj17e1@t bj17d5@t)) (let ((bj17e3@ls/false (bjd7c@syntax-dispatch bj17e1@t '(#(scheme-id mutable) any)))) (if (and bj17e3@ls/false (apply (lambda (bj17e5@name) (bjb75@id? bj17e5@name)) bj17e3@ls/false)) (apply (lambda (bj17e7@name) (bj17c2@gen-name bj17e7@name)) bj17e3@ls/false) (let ((bj17e9@t bj17e1@t)) (let ((bj17eb@ls/false (bjd7c@syntax-dispatch bj17e9@t '(#(scheme-id immutable) any)))) (if (and bj17eb@ls/false (apply (lambda (bj17ed@name) (bjb75@id? bj17ed@name)) bj17eb@ls/false)) (apply (lambda (bj17ef@name) (bj17c2@gen-name bj17ef@name)) bj17eb@ls/false) (let ((bj17f1@t bj17e9@t)) (let ((bj17f3@ls/false (bjd7c@syntax-dispatch bj17f1@t 'any))) (if (and bj17f3@ls/false (apply (lambda (bj17f5@name) (bjb75@id? bj17f5@name)) bj17f3@ls/false)) (apply (lambda (bj17f7@name) (bj17c2@gen-name bj17f7@name)) bj17f3@ls/false) (let ((bj17f9@t bj17f1@t)) (let ((bj17fb@ls/false (bjd7c@syntax-dispatch bj17f9@t 'any))) (if bj17fb@ls/false (apply (lambda (bj17fd@others) (bje5c@syntax-violation '#f '"invalid field spec" bj17c3@field)) bj17fb@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj17f9@t)))))))))))))))))))) bj17be@fields))))) (set! bj1760@enumerate (lambda (bj17b5@ls) (let bj17bb@f ((bj17b7@ls bj17b5@ls) (bj17b8@i '0)) (if (null? bj17b7@ls) '() (cons bj17b8@i (bj17bb@f (cdr bj17b7@ls) (+ bj17b8@i '1))))))) (set! bj1762@do-define-record (lambda (bj178d@namespec bj178e@clause*) (let ((bj1791@foo (bj1746@get-record-name bj178d@namespec))) (let ((bj1793@foo-rtd (gensym))) (let ((bj1795@foo-rcd (gensym))) (let ((bj1797@protocol (gensym))) (let ((bj1799@make-foo (bj1748@get-record-constructor-name bj178d@namespec))) (let ((bj179b@fields (bj1758@get-fields bj178e@clause*))) (let ((bj179d@idx* (bj1760@enumerate bj179b@fields))) (let ((bj179f@foo-x* (bj175e@get-accessors bj1791@foo bj179b@fields))) (let ((bj17a1@set-foo-x!* (bj175c@get-mutators bj1791@foo bj179b@fields))) (let ((bj17a3@set-foo-idx* (bj175a@get-mutator-indices bj179b@fields))) (let ((bj17a5@foo? (bj174a@get-record-predicate-name bj178d@namespec))) (let ((bj17a7@foo-rtd-code (bj174e@foo-rtd-code bj1791@foo bj178e@clause* (bj1750@parent-rtd-code bj178e@clause*)))) (let ((bj17a9@foo-rcd-code (bj1754@foo-rcd-code bj178e@clause* bj1793@foo-rtd bj1797@protocol (bj1752@parent-rcd-code bj178e@clause*)))) (let ((bj17ab@protocol-code (bj1756@get-protocol-code bj178e@clause*))) (bjd32@bless (cons 'begin (cons (list 'define bj1793@foo-rtd bj17a7@foo-rtd-code) (cons (list 'define bj1797@protocol bj17ab@protocol-code) (cons (list 'define bj1795@foo-rcd bj17a9@foo-rcd-code) (cons (list 'define-syntax bj1791@foo (list 'list ''$rtd (list 'syntax bj1793@foo-rtd) (list 'syntax bj1795@foo-rcd))) (cons (list 'define bj17a5@foo? (list 'record-predicate bj1793@foo-rtd)) (cons (list 'define bj1799@make-foo (list 'record-constructor bj1795@foo-rcd)) (append (map (lambda (bj17ad@foo-x bj17ae@idx) (list 'define bj17ad@foo-x (list 'record-accessor bj1793@foo-rtd bj17ae@idx))) bj179f@foo-x* bj179d@idx*) (map (lambda (bj17b1@set-foo-x! bj17b2@idx) (list 'define bj17b1@set-foo-x! (list 'record-mutator bj1793@foo-rtd bj17b2@idx))) bj17a1@set-foo-x!* bj17a3@set-foo-idx*)))))))))))))))))))))))))) (set! bj1764@verify-clauses (lambda (bj176d@x bj176e@cls*) (let ((bj1772@valid-kwds '#f) (bj1774@free-id-member? '#f)) (begin (set! bj1772@valid-kwds (map bjd32@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! bj1774@free-id-member? (lambda (bj1789@x bj178a@ls) (and (pair? bj178a@ls) (or (bjb7b@free-id=? bj1789@x (car bj178a@ls)) (bj1774@free-id-member? bj1789@x (cdr bj178a@ls)))))) (let bj1779@f ((bj1775@cls* bj176e@cls*) (bj1776@seen* '())) (if (not (null? bj1775@cls*)) (let ((bj177b@t (car bj1775@cls*))) (let ((bj177d@ls/false (bjd7c@syntax-dispatch bj177b@t '(any . any)))) (if bj177d@ls/false (apply (lambda (bj177f@kwd bj1780@rest) (if (or (not (bjb75@id? bj177f@kwd)) (not (bj1774@free-id-member? bj177f@kwd bj1772@valid-kwds))) (bje5c@syntax-violation '#f '"not a valid define-record-type keyword" bj177f@kwd) (if (bjb81@bound-id-member? bj177f@kwd bj1776@seen*) (bje5c@syntax-violation '#f '"duplicate use of keyword " bj176d@x bj177f@kwd) (bj1779@f (cdr bj1775@cls*) (cons bj177f@kwd bj1776@seen*))))) bj177d@ls/false) (let ((bj1783@t bj177b@t)) (let ((bj1785@ls/false (bjd7c@syntax-dispatch bj1783@t 'any))) (if bj1785@ls/false (apply (lambda (bj1787@cls) (bje5c@syntax-violation '#f '"malformed define-record-type clause" bj1787@cls)) bj1785@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1783@t))))))) (void))))))) (let ((bj1765@t bj1741@x)) (let ((bj1767@ls/false (bjd7c@syntax-dispatch bj1765@t '(_ any . each-any)))) (if bj1767@ls/false (apply (lambda (bj1769@namespec bj176a@clause*) (begin (bj1764@verify-clauses bj1741@x bj176a@clause*) (bj1762@do-define-record bj1769@namespec bj176a@clause*))) bj1767@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1765@t)))))))) (set! bj284c@bjd70@define-record-type-macro bjd70@define-record-type-macro) (set! bjd72@define-condition-type-macro (lambda (bj193d@x) (let ((bj1940@mkname '#f)) (begin (set! bj1940@mkname (lambda (bj196d@name bj196e@suffix) (bje60@datum->syntax bj196d@name (string->symbol (string-append (symbol->string (bje62@syntax->datum bj196d@name)) bj196e@suffix))))) (let ((bj1941@t bj193d@x)) (let ((bj1943@ls/false (bjd7c@syntax-dispatch bj1941@t '(any any any any any . #(each (any any)))))) (if (and bj1943@ls/false (apply (lambda (bj1945@ctxt bj1946@name bj1947@super bj1948@constructor bj1949@predicate bj194a@field* bj194b@accessor*) (and (bjb75@id? bj1946@name) (bjb75@id? bj1947@super) (bjb75@id? bj1948@constructor) (bjb75@id? bj1949@predicate) (for-all bjb75@id? bj194a@field*) (for-all bjb75@id? bj194b@accessor*))) bj1943@ls/false)) (apply (lambda (bj1953@ctxt bj1954@name bj1955@super bj1956@constructor bj1957@predicate bj1958@field* bj1959@accessor*) (let ((bj1961@aux-accessor* (map (lambda (bj1963@x) (gensym)) bj1959@accessor*))) (bjd32@bless (cons 'begin (cons (cons 'define-record-type (cons (list bj1954@name bj1956@constructor (gensym)) (cons (list 'parent bj1955@super) (cons (cons 'fields (map (lambda (bj1965@field bj1966@aux) (list 'immutable bj1965@field bj1966@aux)) bj1958@field* bj1961@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define bj1957@predicate (list 'condition-predicate (list 'record-type-descriptor bj1954@name))) (map (lambda (bj1969@accessor bj196a@aux) (list 'define bj1969@accessor (list 'condition-accessor (list 'record-type-descriptor bj1954@name) bj196a@aux))) bj1959@accessor* bj1961@aux-accessor*))))))) bj1943@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1941@t)))))))) (set! bj284d@bjd72@define-condition-type-macro bjd72@define-condition-type-macro) (set! bjd74@incorrect-usage-macro (lambda (bj1971@e) (bje5c@syntax-violation '#f '"incorrect usage of auxiliary keyword" bj1971@e))) (set! bj284e@bjd74@incorrect-usage-macro bjd74@incorrect-usage-macro) (set! bjd76@parameterize-macro (lambda (bj1973@e) (let ((bj1975@t bj1973@e)) (let ((bj1977@ls/false (bjd7c@syntax-dispatch bj1975@t '(_ () any . each-any)))) (if bj1977@ls/false (apply (lambda (bj1979@b bj197a@b*) (bjd32@bless (cons 'let (cons '() (cons bj1979@b bj197a@b*))))) bj1977@ls/false) (let ((bj197d@t bj1975@t)) (let ((bj197f@ls/false (bjd7c@syntax-dispatch bj197d@t '(_ #(each (any any)) any . each-any)))) (if bj197f@ls/false (apply (lambda (bj1981@olhs* bj1982@orhs* bj1983@b bj1984@b*) (let ((bj1989@lhs* (bje4a@generate-temporaries bj1981@olhs*)) (bj198a@rhs* (bje4a@generate-temporaries bj1982@orhs*))) (bjd32@bless (cons (list 'lambda (append bj1989@lhs* bj198a@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (bj198d@lhs bj198e@rhs) (list 'let (list (list 't (list bj198d@lhs))) (list bj198d@lhs bj198e@rhs) (cons 'set! (cons bj198e@rhs '(t))))) bj1989@lhs* bj198a@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons bj1983@b bj1984@b*))) '(swap)))))) (append bj1981@olhs* bj1982@orhs*))))) bj197f@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj197d@t))))))))) (set! bj284f@bjd76@parameterize-macro bjd76@parameterize-macro) (set! bjd78@foreign-call-transformer (lambda (bj1991@e bj1992@r bj1993@mr) (let ((bj1997@t bj1991@e)) (let ((bj1999@ls/false (bjd7c@syntax-dispatch bj1997@t '(_ any . each-any)))) (if bj1999@ls/false (apply (lambda (bj199b@name bj199c@arg*) (cons 'foreign-call (cons (bjd9e@chi-expr bj199b@name bj1992@r bj1993@mr) (bjd9a@chi-expr* bj199c@arg* bj1992@r bj1993@mr)))) bj1999@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1997@t)))))) (set! bj2850@bjd78@foreign-call-transformer bjd78@foreign-call-transformer) (set! bjd7a@convert-pattern (lambda (bj199f@pattern bj19a0@keys) (let ((bj19a4@cvt* '#f) (bj19a6@cvt '#f)) (begin (set! bj19a4@cvt* (lambda (bj1a43@p* bj1a44@n bj1a45@ids) (if (null? bj1a43@p*) (values '() bj1a45@ids) (call-with-values (lambda () (bj19a4@cvt* (cdr bj1a43@p*) bj1a44@n bj1a45@ids)) (lambda (bj1a4d@bj1a4a bj1a4e@bj1a4c) (let ((bj1a51@ids bj1a4e@bj1a4c) (bj1a52@y bj1a4d@bj1a4a)) (call-with-values (lambda () (bj19a6@cvt (car bj1a43@p*) bj1a44@n bj1a51@ids)) (lambda (bj1a59@bj1a56 bj1a5a@bj1a58) (let ((bj1a5d@ids bj1a5a@bj1a58) (bj1a5e@x bj1a59@bj1a56)) (values (cons bj1a5e@x bj1a52@y) bj1a5d@ids)))))))))) (set! bj19a6@cvt (lambda (bj19a7@p bj19a8@n bj19a9@ids) (let ((bj19ad@t bj19a7@p)) (let ((bj19af@ls/false (bjd7c@syntax-dispatch bj19ad@t 'any))) (if (and bj19af@ls/false (apply (lambda (bj19b1@id) (bjb75@id? bj19b1@id)) bj19af@ls/false)) (apply (lambda (bj19b3@id) (if (bjb81@bound-id-member? bj19a7@p bj19a0@keys) (values (vector 'free-id bj19a7@p) bj19a9@ids) (if (bjb7b@free-id=? bj19a7@p (bjd04@scheme-stx '_)) (values '_ bj19a9@ids) (values 'any (cons (cons bj19a7@p bj19a8@n) bj19a9@ids))))) bj19af@ls/false) (let ((bj19b5@t bj19ad@t)) (let ((bj19b7@ls/false (bjd7c@syntax-dispatch bj19b5@t '(any any)))) (if (and bj19b7@ls/false (apply (lambda (bj19b9@p bj19ba@dots) (bjd7e@ellipsis? bj19ba@dots)) bj19b7@ls/false)) (apply (lambda (bj19bd@p bj19be@dots) (call-with-values (lambda () (bj19a6@cvt bj19bd@p (+ bj19a8@n '1) bj19a9@ids)) (lambda (bj19c5@bj19c2 bj19c6@bj19c4) (let ((bj19c9@ids bj19c6@bj19c4) (bj19ca@p bj19c5@bj19c2)) (values (if (eq? bj19ca@p 'any) 'each-any (vector 'each bj19ca@p)) bj19c9@ids))))) bj19b7@ls/false) (let ((bj19cd@t bj19b5@t)) (let ((bj19cf@ls/false (bjd7c@syntax-dispatch bj19cd@t '(any any . #(each+ any () any))))) (if (and bj19cf@ls/false (apply (lambda (bj19d1@x bj19d2@dots bj19d3@ys bj19d4@z) (bjd7e@ellipsis? bj19d2@dots)) bj19cf@ls/false)) (apply (lambda (bj19d9@x bj19da@dots bj19db@ys bj19dc@z) (call-with-values (lambda () (bj19a6@cvt bj19dc@z bj19a8@n bj19a9@ids)) (lambda (bj19e5@bj19e2 bj19e6@bj19e4) (let ((bj19e9@ids bj19e6@bj19e4) (bj19ea@z bj19e5@bj19e2)) (call-with-values (lambda () (bj19a4@cvt* bj19db@ys bj19a8@n bj19e9@ids)) (lambda (bj19f1@bj19ee bj19f2@bj19f0) (let ((bj19f5@ids bj19f2@bj19f0) (bj19f6@ys bj19f1@bj19ee)) (call-with-values (lambda () (bj19a6@cvt bj19d9@x (+ bj19a8@n '1) bj19f5@ids)) (lambda (bj19fd@bj19fa bj19fe@bj19fc) (let ((bj1a01@ids bj19fe@bj19fc) (bj1a02@x bj19fd@bj19fa)) (values (vector 'each+ bj1a02@x (reverse bj19f6@ys) bj19ea@z) bj1a01@ids))))))))))) bj19cf@ls/false) (let ((bj1a05@t bj19cd@t)) (let ((bj1a07@ls/false (bjd7c@syntax-dispatch bj1a05@t '(any . any)))) (if bj1a07@ls/false (apply (lambda (bj1a09@x bj1a0a@y) (call-with-values (lambda () (bj19a6@cvt bj1a0a@y bj19a8@n bj19a9@ids)) (lambda (bj1a11@bj1a0e bj1a12@bj1a10) (let ((bj1a15@ids bj1a12@bj1a10) (bj1a16@y bj1a11@bj1a0e)) (call-with-values (lambda () (bj19a6@cvt bj1a09@x bj19a8@n bj1a15@ids)) (lambda (bj1a1d@bj1a1a bj1a1e@bj1a1c) (let ((bj1a21@ids bj1a1e@bj1a1c) (bj1a22@x bj1a1d@bj1a1a)) (values (cons bj1a22@x bj1a16@y) bj1a21@ids)))))))) bj1a07@ls/false) (let ((bj1a25@t bj1a05@t)) (let ((bj1a27@ls/false (bjd7c@syntax-dispatch bj1a25@t '()))) (if bj1a27@ls/false (apply (lambda () (values '() bj19a9@ids)) bj1a27@ls/false) (let ((bj1a29@t bj1a25@t)) (let ((bj1a2b@ls/false (bjd7c@syntax-dispatch bj1a29@t '#(vector each-any)))) (if (and bj1a2b@ls/false (apply (lambda (bj1a2d@p) (not (bjb41@stx? bj1a2d@p))) bj1a2b@ls/false)) (apply (lambda (bj1a2f@p) (call-with-values (lambda () (bj19a6@cvt bj1a2f@p bj19a8@n bj19a9@ids)) (lambda (bj1a35@bj1a32 bj1a36@bj1a34) (let ((bj1a39@ids bj1a36@bj1a34) (bj1a3a@p bj1a35@bj1a32)) (values (vector 'vector bj1a3a@p) bj1a39@ids))))) bj1a2b@ls/false) (let ((bj1a3d@t bj1a29@t)) (let ((bj1a3f@ls/false (bjd7c@syntax-dispatch bj1a3d@t 'any))) (if bj1a3f@ls/false (apply (lambda (bj1a41@datum) (values (vector 'atom (bjb89@stx->datum bj1a41@datum)) bj19a9@ids)) bj1a3f@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1a3d@t)))))))))))))))))))))))) (bj19a6@cvt bj199f@pattern '0 '()))))) (set! bj2851@bjd7a@convert-pattern bjd7a@convert-pattern) (set! bjd7c@syntax-dispatch (let ((bj1a62@stx^ '#f) (bj1a64@match-each '#f) (bj1a66@match-each+ '#f) (bj1a68@match-each-any '#f) (bj1a6a@match-empty '#f) (bj1a6c@combine '#f) (bj1a6e@match* '#f) (bj1a70@match '#f)) (begin (set! bj1a62@stx^ (lambda (bj1b3d@e bj1b3e@m* bj1b3f@s* bj1b40@ae*) (if (and (null? bj1b3e@m*) (null? bj1b3f@s*) (null? bj1b40@ae*)) bj1b3d@e (bjb5d@mkstx bj1b3d@e bj1b3e@m* bj1b3f@s* bj1b40@ae*)))) (set! bj1a64@match-each (lambda (bj1b1d@e bj1b1e@p bj1b1f@m* bj1b20@s* bj1b21@ae*) (if (pair? bj1b1d@e) (let ((bj1b27@first (bj1a70@match (car bj1b1d@e) bj1b1e@p bj1b1f@m* bj1b20@s* bj1b21@ae* '()))) (and bj1b27@first (let ((bj1b29@rest (bj1a64@match-each (cdr bj1b1d@e) bj1b1e@p bj1b1f@m* bj1b20@s* bj1b21@ae*))) (and bj1b29@rest (cons bj1b27@first bj1b29@rest))))) (if (null? bj1b1d@e) '() (if (bjb41@stx? bj1b1d@e) (and (not (bjafb@top-marked? bj1b1f@m*)) (call-with-values (lambda () (join-wraps bj1b1f@m* bj1b20@s* bj1b21@ae* bj1b1d@e)) (lambda (bj1b31@bj1b2c bj1b32@bj1b2e bj1b33@bj1b30) (let ((bj1b37@ae* bj1b33@bj1b30) (bj1b38@s* bj1b32@bj1b2e) (bj1b39@m* bj1b31@bj1b2c)) (bj1a64@match-each (bjb43@stx-expr bj1b1d@e) bj1b1e@p bj1b39@m* bj1b38@s* bj1b37@ae*))))) (if (bj6b3@bj585@annotation? bj1b1d@e) (bj1a64@match-each (bj6b5@bj589@annotation-expression bj1b1d@e) bj1b1e@p bj1b1f@m* bj1b20@s* bj1b21@ae*) '#f)))))) (set! bj1a66@match-each+ (lambda (bj1add@e bj1ade@x-pat bj1adf@y-pat bj1ae0@z-pat bj1ae1@m* bj1ae2@s* bj1ae3@ae* bj1ae4@r) (let bj1af5@f ((bj1aed@e bj1add@e) (bj1aee@m* bj1ae1@m*) (bj1aef@s* bj1ae2@s*) (bj1af0@ae* bj1ae3@ae*)) (if (pair? bj1aed@e) (call-with-values (lambda () (bj1af5@f (cdr bj1aed@e) bj1aee@m* bj1aef@s* bj1af0@ae*)) (lambda (bj1afd@bj1af8 bj1afe@bj1afa bj1aff@bj1afc) (let ((bj1b03@r bj1aff@bj1afc) (bj1b04@y-pat bj1afe@bj1afa) (bj1b05@xr* bj1afd@bj1af8)) (if bj1b03@r (if (null? bj1b04@y-pat) (let ((bj1b09@xr (bj1a70@match (car bj1aed@e) bj1ade@x-pat bj1aee@m* bj1aef@s* bj1af0@ae* '()))) (if bj1b09@xr (values (cons bj1b09@xr bj1b05@xr*) bj1b04@y-pat bj1b03@r) (values '#f '#f '#f))) (values '() (cdr bj1b04@y-pat) (bj1a70@match (car bj1aed@e) (car bj1b04@y-pat) bj1aee@m* bj1aef@s* bj1af0@ae* bj1b03@r))) (values '#f '#f '#f))))) (if (bjb41@stx? bj1aed@e) (if (bjafb@top-marked? bj1aee@m*) (values '() bj1adf@y-pat (bj1a70@match bj1aed@e bj1ae0@z-pat bj1aee@m* bj1aef@s* bj1af0@ae* bj1ae4@r)) (call-with-values (lambda () (join-wraps bj1aee@m* bj1aef@s* bj1af0@ae* bj1aed@e)) (lambda (bj1b11@bj1b0c bj1b12@bj1b0e bj1b13@bj1b10) (let ((bj1b17@ae* bj1b13@bj1b10) (bj1b18@s* bj1b12@bj1b0e) (bj1b19@m* bj1b11@bj1b0c)) (bj1af5@f (bjb43@stx-expr bj1aed@e) bj1b19@m* bj1b18@s* bj1b17@ae*))))) (if (bj6b3@bj585@annotation? bj1aed@e) (bj1af5@f (bj6b5@bj589@annotation-expression bj1aed@e) bj1aee@m* bj1aef@s* bj1af0@ae*) (values '() bj1adf@y-pat (bj1a70@match bj1aed@e bj1ae0@z-pat bj1aee@m* bj1aef@s* bj1af0@ae* bj1ae4@r)))))))) (set! bj1a68@match-each-any (lambda (bj1ac1@e bj1ac2@m* bj1ac3@s* bj1ac4@ae*) (if (pair? bj1ac1@e) (let ((bj1ac9@l (bj1a68@match-each-any (cdr bj1ac1@e) bj1ac2@m* bj1ac3@s* bj1ac4@ae*))) (and bj1ac9@l (cons (bj1a62@stx^ (car bj1ac1@e) bj1ac2@m* bj1ac3@s* bj1ac4@ae*) bj1ac9@l))) (if (null? bj1ac1@e) '() (if (bjb41@stx? bj1ac1@e) (and (not (bjafb@top-marked? bj1ac2@m*)) (call-with-values (lambda () (join-wraps bj1ac2@m* bj1ac3@s* bj1ac4@ae* bj1ac1@e)) (lambda (bj1ad1@bj1acc bj1ad2@bj1ace bj1ad3@bj1ad0) (let ((bj1ad7@ae* bj1ad3@bj1ad0) (bj1ad8@s* bj1ad2@bj1ace) (bj1ad9@m* bj1ad1@bj1acc)) (bj1a68@match-each-any (bjb43@stx-expr bj1ac1@e) bj1ad9@m* bj1ad8@s* bj1ad7@ae*))))) (if (bj6b3@bj585@annotation? bj1ac1@e) (bj1a68@match-each-any (bj6b5@bj589@annotation-expression bj1ac1@e) bj1ac2@m* bj1ac3@s* bj1ac4@ae*) '#f)))))) (set! bj1a6a@match-empty (lambda (bj1abb@p bj1abc@r) (if (null? bj1abb@p) bj1abc@r (if (eq? bj1abb@p '_) bj1abc@r (if (eq? bj1abb@p 'any) (cons '() bj1abc@r) (if (pair? bj1abb@p) (bj1a6a@match-empty (car bj1abb@p) (bj1a6a@match-empty (cdr bj1abb@p) bj1abc@r)) (if (eq? bj1abb@p 'each-any) (cons '() bj1abc@r) (let ((bj1abf@t (vector-ref bj1abb@p '0))) (if (memv bj1abf@t '(each)) (bj1a6a@match-empty (vector-ref bj1abb@p '1) bj1abc@r) (if (memv bj1abf@t '(each+)) (bj1a6a@match-empty (vector-ref bj1abb@p '1) (bj1a6a@match-empty (reverse (vector-ref bj1abb@p '2)) (bj1a6a@match-empty (vector-ref bj1abb@p '3) bj1abc@r))) (if (memv bj1abf@t '(free-id atom)) bj1abc@r (if (memv bj1abf@t '(scheme-id atom)) bj1abc@r (if (memv bj1abf@t '(vector)) (bj1a6a@match-empty (vector-ref bj1abb@p '1) bj1abc@r) (assertion-violation 'syntax-dispatch '"invalid pattern" bj1abb@p)))))))))))))) (set! bj1a6c@combine (lambda (bj1ab7@r* bj1ab8@r) (if (null? (car bj1ab7@r*)) bj1ab8@r (cons (map car bj1ab7@r*) (bj1a6c@combine (map cdr bj1ab7@r*) bj1ab8@r))))) (set! bj1a6e@match* (lambda (bj1a93@e bj1a94@p bj1a95@m* bj1a96@s* bj1a97@ae* bj1a98@r) (if (null? bj1a94@p) (and (null? bj1a93@e) bj1a98@r) (if (pair? bj1a94@p) (and (pair? bj1a93@e) (bj1a70@match (car bj1a93@e) (car bj1a94@p) bj1a95@m* bj1a96@s* bj1a97@ae* (bj1a70@match (cdr bj1a93@e) (cdr bj1a94@p) bj1a95@m* bj1a96@s* bj1a97@ae* bj1a98@r))) (if (eq? bj1a94@p 'each-any) (let ((bj1a9f@l (bj1a68@match-each-any bj1a93@e bj1a95@m* bj1a96@s* bj1a97@ae*))) (and bj1a9f@l (cons bj1a9f@l bj1a98@r))) (let ((bj1aa1@t (vector-ref bj1a94@p '0))) (if (memv bj1aa1@t '(each)) (if (null? bj1a93@e) (bj1a6a@match-empty (vector-ref bj1a94@p '1) bj1a98@r) (let ((bj1aa3@r* (bj1a64@match-each bj1a93@e (vector-ref bj1a94@p '1) bj1a95@m* bj1a96@s* bj1a97@ae*))) (and bj1aa3@r* (bj1a6c@combine bj1aa3@r* bj1a98@r)))) (if (memv bj1aa1@t '(free-id)) (and (symbol? bj1a93@e) (bjafb@top-marked? bj1a95@m*) (bjb7b@free-id=? (bj1a62@stx^ bj1a93@e bj1a95@m* bj1a96@s* bj1a97@ae*) (vector-ref bj1a94@p '1)) bj1a98@r) (if (memv bj1aa1@t '(scheme-id)) (and (symbol? bj1a93@e) (bjafb@top-marked? bj1a95@m*) (bjb7b@free-id=? (bj1a62@stx^ bj1a93@e bj1a95@m* bj1a96@s* bj1a97@ae*) (bjd04@scheme-stx (vector-ref bj1a94@p '1))) bj1a98@r) (if (memv bj1aa1@t '(each+)) (call-with-values (lambda () (bj1a66@match-each+ bj1a93@e (vector-ref bj1a94@p '1) (vector-ref bj1a94@p '2) (vector-ref bj1a94@p '3) bj1a95@m* bj1a96@s* bj1a97@ae* bj1a98@r)) (lambda (bj1aab@bj1aa6 bj1aac@bj1aa8 bj1aad@bj1aaa) (let ((bj1ab1@r bj1aad@bj1aaa) (bj1ab2@y-pat bj1aac@bj1aa8) (bj1ab3@xr* bj1aab@bj1aa6)) (and bj1ab1@r (null? bj1ab2@y-pat) (if (null? bj1ab3@xr*) (bj1a6a@match-empty (vector-ref bj1a94@p '1) bj1ab1@r) (bj1a6c@combine bj1ab3@xr* bj1ab1@r)))))) (if (memv bj1aa1@t '(atom)) (and (fast-equal? (vector-ref bj1a94@p '1) (bjb87@strip bj1a93@e bj1a95@m*)) bj1a98@r) (if (memv bj1aa1@t '(vector)) (and (vector? bj1a93@e) (bj1a70@match (vector->list bj1a93@e) (vector-ref bj1a94@p '1) bj1a95@m* bj1a96@s* bj1a97@ae* bj1a98@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" bj1a94@p))))))))))))) (set! bj1a70@match (lambda (bj1a75@e bj1a76@p bj1a77@m* bj1a78@s* bj1a79@ae* bj1a7a@r) (if (not bj1a7a@r) '#f (if (eq? bj1a76@p '_) bj1a7a@r (if (eq? bj1a76@p 'any) (cons (bj1a62@stx^ bj1a75@e bj1a77@m* bj1a78@s* bj1a79@ae*) bj1a7a@r) (if (bjb41@stx? bj1a75@e) (and (not (bjafb@top-marked? bj1a77@m*)) (call-with-values (lambda () (join-wraps bj1a77@m* bj1a78@s* bj1a79@ae* bj1a75@e)) (lambda (bj1a87@bj1a82 bj1a88@bj1a84 bj1a89@bj1a86) (let ((bj1a8d@ae* bj1a89@bj1a86) (bj1a8e@s* bj1a88@bj1a84) (bj1a8f@m* bj1a87@bj1a82)) (bj1a70@match (bjb43@stx-expr bj1a75@e) bj1a76@p bj1a8f@m* bj1a8e@s* bj1a8d@ae* bj1a7a@r))))) (if (bj6b3@bj585@annotation? bj1a75@e) (bj1a70@match (bj6b5@bj589@annotation-expression bj1a75@e) bj1a76@p bj1a77@m* bj1a78@s* bj1a79@ae* bj1a7a@r) (bj1a6e@match* bj1a75@e bj1a76@p bj1a77@m* bj1a78@s* bj1a79@ae* bj1a7a@r)))))))) (lambda (bj1a71@e bj1a72@p) (bj1a70@match bj1a71@e bj1a72@p '() '() '() '()))))) (set! bj2852@bjd7c@syntax-dispatch bjd7c@syntax-dispatch) (set! bjd7e@ellipsis? (lambda (bj1b45@x) (and (bjb75@id? bj1b45@x) (bjb7b@free-id=? bj1b45@x (bjd04@scheme-stx '...))))) (set! bj2853@bjd7e@ellipsis? bjd7e@ellipsis?) (set! bjd80@underscore? (lambda (bj1b47@x) (and (bjb75@id? bj1b47@x) (bjb7b@free-id=? bj1b47@x (bjd04@scheme-stx '_))))) (set! bj2854@bjd80@underscore? bjd80@underscore?) (set! bjd82@verify-literals (lambda (bj1b49@lits bj1b4a@expr) (for-each (lambda (bj1b4d@x) (if (or (not (bjb75@id? bj1b4d@x)) (bjd7e@ellipsis? bj1b4d@x) (bjd80@underscore? bj1b4d@x)) (bje5c@syntax-violation '#f '"invalid literal" bj1b4a@expr bj1b4d@x) (void))) bj1b49@lits))) (set! bj2855@bjd82@verify-literals bjd82@verify-literals) (set! bjd84@syntax-case-transformer (let ((bj1b50@build-dispatch-call '#f) (bj1b52@invalid-ids-error '#f) (bj1b54@gen-clause '#f) (bj1b56@gen-syntax-case '#f)) (begin (set! bj1b50@build-dispatch-call (lambda (bj1bc1@pvars bj1bc2@expr bj1bc3@y bj1bc4@r bj1bc5@mr) (let ((bj1bcb@ids (map car bj1bc1@pvars)) (bj1bcc@levels (map cdr bj1bc1@pvars))) (let ((bj1bcf@labels (map bjb01@gen-label bj1bcb@ids)) (bj1bd0@new-vars (map bjafd@gen-lexical bj1bcb@ids))) (let ((bj1bd3@body (bjd9e@chi-expr (bjb61@add-subst (bjb35@make-full-rib bj1bcb@ids bj1bcf@labels) bj1bc2@expr) (append (map (lambda (bj1bd5@label bj1bd6@var bj1bd7@level) (cons bj1bd5@label (bjb8f@make-binding 'syntax (cons bj1bd6@var bj1bd7@level)))) bj1bcf@labels bj1bd0@new-vars (map cdr bj1bc1@pvars)) bj1bc4@r) bj1bc5@mr))) (list '(primitive apply) (bjad8@bja04@build-lambda '#f bj1bd0@new-vars bj1bd3@body) bj1bc3@y)))))) (set! bj1b52@invalid-ids-error (lambda (bj1bb5@id* bj1bb6@e bj1bb7@class) (let bj1bbf@find ((bj1bbb@id* bj1bb5@id*) (bj1bbc@ok* '())) (if (null? bj1bbb@id*) (bje5c@syntax-violation '#f '"invalid syntax" bj1bb6@e) (if (bjb75@id? (car bj1bbb@id*)) (if (bjb81@bound-id-member? (car bj1bbb@id*) bj1bbc@ok*) (bje58@syntax-error (car bj1bbb@id*) '"duplicate " bj1bb7@class) (bj1bbf@find (cdr bj1bbb@id*) (cons (car bj1bbb@id*) bj1bbc@ok*))) (bje58@syntax-error (car bj1bbb@id*) '"invalid " bj1bb7@class)))))) (set! bj1b54@gen-clause (lambda (bj1b8d@x bj1b8e@keys bj1b8f@clauses bj1b90@r bj1b91@mr bj1b92@pat bj1b93@fender bj1b94@expr) (call-with-values (lambda () (bjd7a@convert-pattern bj1b92@pat bj1b8e@keys)) (lambda (bj1ba1@bj1b9e bj1ba2@bj1ba0) (let ((bj1ba5@pvars bj1ba2@bj1ba0) (bj1ba6@p bj1ba1@bj1b9e)) (if (not (bjb7f@distinct-bound-ids? (map car bj1ba5@pvars))) (bj1b52@invalid-ids-error (map car bj1ba5@pvars) bj1b92@pat '"pattern variable") (if (not (for-all (lambda (bj1ba9@x) (not (bjd7e@ellipsis? (car bj1ba9@x)))) bj1ba5@pvars)) (bje5c@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" bj1b92@pat) (let ((bj1bab@y (bjafd@gen-lexical 'tmp))) (let ((bj1bad@test (if (eq? bj1b93@fender '#t) bj1bab@y (let ((bj1baf@call (bj1b50@build-dispatch-call bj1ba5@pvars bj1b93@fender bj1bab@y bj1b90@r bj1b91@mr))) (list 'if bj1bab@y bj1baf@call (list 'quote '#f)))))) (let ((bj1bb1@conseq (bj1b50@build-dispatch-call bj1ba5@pvars bj1b94@expr bj1bab@y bj1b90@r bj1b91@mr))) (let ((bj1bb3@altern (bj1b56@gen-syntax-case bj1b8d@x bj1b8e@keys bj1b8f@clauses bj1b90@r bj1b91@mr))) (list (bjad8@bja04@build-lambda '#f (list bj1bab@y) (list 'if bj1bad@test bj1bb1@conseq bj1bb3@altern)) (list '(primitive syntax-dispatch) bj1b8d@x (list 'quote bj1ba6@p)))))))))))))) (set! bj1b56@gen-syntax-case (lambda (bj1b6b@x bj1b6c@keys bj1b6d@clauses bj1b6e@r bj1b6f@mr) (if (null? bj1b6d@clauses) (list '(primitive syntax-error) bj1b6b@x) (let ((bj1b75@t (car bj1b6d@clauses))) (let ((bj1b77@ls/false (bjd7c@syntax-dispatch bj1b75@t '(any any)))) (if bj1b77@ls/false (apply (lambda (bj1b79@pat bj1b7a@expr) (if (and (bjb75@id? bj1b79@pat) (not (bjb81@bound-id-member? bj1b79@pat bj1b6c@keys)) (not (bjd7e@ellipsis? bj1b79@pat))) (if (bjb7b@free-id=? bj1b79@pat (bjd04@scheme-stx '_)) (bjd9e@chi-expr bj1b7a@expr bj1b6e@r bj1b6f@mr) (let ((bj1b7d@lab (bjb01@gen-label bj1b79@pat)) (bj1b7e@lex (bjafd@gen-lexical bj1b79@pat))) (let ((bj1b81@body (bjd9e@chi-expr (bjb61@add-subst (bjb35@make-full-rib (list bj1b79@pat) (list bj1b7d@lab)) bj1b7a@expr) (cons (cons bj1b7d@lab (bjb8f@make-binding 'syntax (cons bj1b7e@lex '0))) bj1b6e@r) bj1b6f@mr))) (list (bjad8@bja04@build-lambda '#f (list bj1b7e@lex) bj1b81@body) bj1b6b@x)))) (bj1b54@gen-clause bj1b6b@x bj1b6c@keys (cdr bj1b6d@clauses) bj1b6e@r bj1b6f@mr bj1b79@pat '#t bj1b7a@expr))) bj1b77@ls/false) (let ((bj1b83@t bj1b75@t)) (let ((bj1b85@ls/false (bjd7c@syntax-dispatch bj1b83@t '(any any any)))) (if bj1b85@ls/false (apply (lambda (bj1b87@pat bj1b88@fender bj1b89@expr) (bj1b54@gen-clause bj1b6b@x bj1b6c@keys (cdr bj1b6d@clauses) bj1b6e@r bj1b6f@mr bj1b87@pat bj1b88@fender bj1b89@expr)) bj1b85@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1b83@t)))))))))) (lambda (bj1b57@e bj1b58@r bj1b59@mr) (let ((bj1b5d@t bj1b57@e)) (let ((bj1b5f@ls/false (bjd7c@syntax-dispatch bj1b5d@t '(_ any each-any . each-any)))) (if bj1b5f@ls/false (apply (lambda (bj1b61@expr bj1b62@keys bj1b63@clauses) (begin (bjd82@verify-literals bj1b62@keys bj1b57@e) (let ((bj1b67@x (bjafd@gen-lexical 'tmp))) (let ((bj1b69@body (bj1b56@gen-syntax-case bj1b67@x bj1b62@keys bj1b63@clauses bj1b58@r bj1b59@mr))) (list (bjad8@bja04@build-lambda '#f (list bj1b67@x) bj1b69@body) (bjd9e@chi-expr bj1b61@expr bj1b58@r bj1b59@mr)))))) bj1b5f@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1b5d@t)))))))) (set! bj2856@bjd84@syntax-case-transformer bjd84@syntax-case-transformer) (set! bjd86@ellipsis-map (lambda (bj1bdb@proc bj1bdc@ls . bj1bdf@ls*) (let ((bj1be2@who '#f)) (begin (set! bj1be2@who '...) (begin (if (not (list? bj1bdc@ls)) (assertion-violation bj1be2@who '"not a list" bj1bdc@ls) (void)) (if (not (null? bj1bdf@ls*)) (let ((bj1be3@n (length bj1bdc@ls))) (for-each (lambda (bj1be5@x) (begin (if (not (list? bj1be5@x)) (assertion-violation bj1be2@who '"not a list" bj1be5@x) (void)) (if (not (= (length bj1be5@x) bj1be3@n)) (assertion-violation bj1be2@who '"length mismatch" bj1bdc@ls bj1be5@x) (void)))) bj1bdf@ls*)) (void)) (apply map bj1bdb@proc bj1bdc@ls bj1bdf@ls*)))))) (set! bj2857@bjd86@ellipsis-map bjd86@ellipsis-map) (set! bjd88@syntax-transformer (let ((bj1be8@gen-syntax '#f) (bj1bea@gen-ref '#f) (bj1bec@gen-append '#f) (bj1bee@gen-mappend '#f) (bj1bf0@gen-map '#f) (bj1bf2@gen-cons '#f) (bj1bf4@gen-vector '#f) (bj1bf6@regen '#f)) (begin (set! bj1be8@gen-syntax (lambda (bj1c5f@src bj1c60@e bj1c61@r bj1c62@maps bj1c63@ellipsis? bj1c64@vec?) (let ((bj1c6b@t bj1c60@e)) (let ((bj1c6d@ls/false (bjd7c@syntax-dispatch bj1c6b@t 'any))) (if (and bj1c6d@ls/false (apply (lambda (bj1c6f@dots) (bj1c63@ellipsis? bj1c6f@dots)) bj1c6d@ls/false)) (apply (lambda (bj1c71@dots) (bje5c@syntax-violation '#f '"misplaced ellipsis in syntax form" bj1c5f@src)) bj1c6d@ls/false) (let ((bj1c73@t bj1c6b@t)) (let ((bj1c75@ls/false (bjd7c@syntax-dispatch bj1c73@t 'any))) (if (and bj1c75@ls/false (apply (lambda (bj1c77@id) (bjb75@id? bj1c77@id)) bj1c75@ls/false)) (apply (lambda (bj1c79@id) (let ((bj1c7b@label (bjb8b@id->label bj1c60@e))) (let ((bj1c7d@b (bjb8d@label->binding bj1c7b@label bj1c61@r))) (if (eq? (bjb91@binding-type bj1c7d@b) 'syntax) (call-with-values (lambda () (let ((bj1c83@var.lev (bjb93@binding-value bj1c7d@b))) (bj1bea@gen-ref bj1c5f@src (car bj1c83@var.lev) (cdr bj1c83@var.lev) bj1c62@maps))) (lambda (bj1c85@bj1c80 bj1c86@bj1c82) (let ((bj1c89@maps bj1c86@bj1c82) (bj1c8a@var bj1c85@bj1c80)) (values (list 'ref bj1c8a@var) bj1c89@maps)))) (values (list 'quote bj1c60@e) bj1c62@maps))))) bj1c75@ls/false) (let ((bj1c8d@t bj1c73@t)) (let ((bj1c8f@ls/false (bjd7c@syntax-dispatch bj1c8d@t '(any any)))) (if (and bj1c8f@ls/false (apply (lambda (bj1c91@dots bj1c92@e) (bj1c63@ellipsis? bj1c91@dots)) bj1c8f@ls/false)) (apply (lambda (bj1c95@dots bj1c96@e) (if bj1c64@vec? (bje5c@syntax-violation '#f '"misplaced ellipsis in syntax form" bj1c5f@src) (bj1be8@gen-syntax bj1c5f@src bj1c96@e bj1c61@r bj1c62@maps (lambda (bj1c99@x) '#f) '#f))) bj1c8f@ls/false) (let ((bj1c9b@t bj1c8d@t)) (let ((bj1c9d@ls/false (bjd7c@syntax-dispatch bj1c9b@t '(any any . any)))) (if (and bj1c9d@ls/false (apply (lambda (bj1c9f@x bj1ca0@dots bj1ca1@y) (bj1c63@ellipsis? bj1ca0@dots)) bj1c9d@ls/false)) (apply (lambda (bj1ca5@x bj1ca6@dots bj1ca7@y) (let bj1cbd@f ((bj1cab@y bj1ca7@y) (bj1cac@k (lambda (bj1caf@maps) (call-with-values (lambda () (bj1be8@gen-syntax bj1c5f@src bj1ca5@x bj1c61@r (cons '() bj1caf@maps) bj1c63@ellipsis? '#f)) (lambda (bj1cb5@bj1cb2 bj1cb6@bj1cb4) (let ((bj1cb9@maps bj1cb6@bj1cb4) (bj1cba@x bj1cb5@bj1cb2)) (if (null? (car bj1cb9@maps)) (bje5c@syntax-violation '#f '"extra ellipsis in syntax form" bj1c5f@src) (values (bj1bf0@gen-map bj1cba@x (car bj1cb9@maps)) (cdr bj1cb9@maps))))))))) (let ((bj1cbf@t bj1cab@y)) (let ((bj1cc1@ls/false (bjd7c@syntax-dispatch bj1cbf@t '()))) (if bj1cc1@ls/false (apply (lambda () (bj1cac@k bj1c62@maps)) bj1cc1@ls/false) (let ((bj1cc3@t bj1cbf@t)) (let ((bj1cc5@ls/false (bjd7c@syntax-dispatch bj1cc3@t '(any . any)))) (if (and bj1cc5@ls/false (apply (lambda (bj1cc7@dots bj1cc8@y) (bj1c63@ellipsis? bj1cc7@dots)) bj1cc5@ls/false)) (apply (lambda (bj1ccb@dots bj1ccc@y) (bj1cbd@f bj1ccc@y (lambda (bj1ccf@maps) (call-with-values (lambda () (bj1cac@k (cons '() bj1ccf@maps))) (lambda (bj1cd5@bj1cd2 bj1cd6@bj1cd4) (let ((bj1cd9@maps bj1cd6@bj1cd4) (bj1cda@x bj1cd5@bj1cd2)) (if (null? (car bj1cd9@maps)) (bje5c@syntax-violation '#f '"extra ellipsis in syntax form" bj1c5f@src) (values (bj1bee@gen-mappend bj1cda@x (car bj1cd9@maps)) (cdr bj1cd9@maps))))))))) bj1cc5@ls/false) (let ((bj1cdd@t bj1cc3@t)) (let ((bj1cdf@ls/false (bjd7c@syntax-dispatch bj1cdd@t '_))) (if bj1cdf@ls/false (apply (lambda () (call-with-values (lambda () (bj1be8@gen-syntax bj1c5f@src bj1cab@y bj1c61@r bj1c62@maps bj1c63@ellipsis? bj1c64@vec?)) (lambda (bj1ce5@bj1ce2 bj1ce6@bj1ce4) (let ((bj1ce9@maps bj1ce6@bj1ce4) (bj1cea@y bj1ce5@bj1ce2)) (call-with-values (lambda () (bj1cac@k bj1ce9@maps)) (lambda (bj1cf1@bj1cee bj1cf2@bj1cf0) (let ((bj1cf5@maps bj1cf2@bj1cf0) (bj1cf6@x bj1cf1@bj1cee)) (values (bj1bec@gen-append bj1cf6@x bj1cea@y) bj1cf5@maps)))))))) bj1cdf@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1cdd@t)))))))))))) bj1c9d@ls/false) (let ((bj1cf9@t bj1c9b@t)) (let ((bj1cfb@ls/false (bjd7c@syntax-dispatch bj1cf9@t '(any . any)))) (if bj1cfb@ls/false (apply (lambda (bj1cfd@x bj1cfe@y) (call-with-values (lambda () (bj1be8@gen-syntax bj1c5f@src bj1cfd@x bj1c61@r bj1c62@maps bj1c63@ellipsis? '#f)) (lambda (bj1d05@bj1d02 bj1d06@bj1d04) (let ((bj1d09@maps bj1d06@bj1d04) (bj1d0a@xnew bj1d05@bj1d02)) (call-with-values (lambda () (bj1be8@gen-syntax bj1c5f@src bj1cfe@y bj1c61@r bj1d09@maps bj1c63@ellipsis? bj1c64@vec?)) (lambda (bj1d11@bj1d0e bj1d12@bj1d10) (let ((bj1d15@maps bj1d12@bj1d10) (bj1d16@ynew bj1d11@bj1d0e)) (values (bj1bf2@gen-cons bj1c60@e bj1cfd@x bj1cfe@y bj1d0a@xnew bj1d16@ynew) bj1d15@maps)))))))) bj1cfb@ls/false) (let ((bj1d19@t bj1cf9@t)) (let ((bj1d1b@ls/false (bjd7c@syntax-dispatch bj1d19@t '#(vector each-any)))) (if bj1d1b@ls/false (apply (lambda (bj1d1d@ls) (call-with-values (lambda () (bj1be8@gen-syntax bj1c5f@src bj1d1d@ls bj1c61@r bj1c62@maps bj1c63@ellipsis? '#t)) (lambda (bj1d23@bj1d20 bj1d24@bj1d22) (let ((bj1d27@maps bj1d24@bj1d22) (bj1d28@lsnew bj1d23@bj1d20)) (values (bj1bf4@gen-vector bj1c60@e bj1d1d@ls bj1d28@lsnew) bj1d27@maps))))) bj1d1b@ls/false) (let ((bj1d2b@t bj1d19@t)) (let ((bj1d2d@ls/false (bjd7c@syntax-dispatch bj1d2b@t '_))) (if bj1d2d@ls/false (apply (lambda () (values (list 'quote bj1c60@e) bj1c62@maps)) bj1d2d@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1d2b@t)))))))))))))))))))))))) (set! bj1bea@gen-ref (lambda (bj1c45@src bj1c46@var bj1c47@level bj1c48@maps) (if (= bj1c47@level '0) (values bj1c46@var bj1c48@maps) (if (null? bj1c48@maps) (bje5c@syntax-violation '#f '"missing ellipsis in syntax form" bj1c45@src) (call-with-values (lambda () (bj1bea@gen-ref bj1c45@src bj1c46@var (- bj1c47@level '1) (cdr bj1c48@maps))) (lambda (bj1c51@bj1c4e bj1c52@bj1c50) (let ((bj1c55@outer-maps bj1c52@bj1c50) (bj1c56@outer-var bj1c51@bj1c4e)) (let ((bj1c59@t (assq bj1c56@outer-var (car bj1c48@maps)))) (if bj1c59@t ((lambda (bj1c5b@b) (values (cdr bj1c5b@b) bj1c48@maps)) bj1c59@t) (let ((bj1c5d@inner-var (bjafd@gen-lexical 'tmp))) (values bj1c5d@inner-var (cons (cons (cons bj1c56@outer-var bj1c5d@inner-var) (car bj1c48@maps)) bj1c55@outer-maps)))))))))))) (set! bj1bec@gen-append (lambda (bj1c41@x bj1c42@y) (if (fast-equal? bj1c42@y ''()) bj1c41@x (list 'append bj1c41@x bj1c42@y)))) (set! bj1bee@gen-mappend (lambda (bj1c3d@e bj1c3e@map-env) (list 'apply '(primitive append) (bj1bf0@gen-map bj1c3d@e bj1c3e@map-env)))) (set! bj1bf0@gen-map (lambda (bj1c2b@e bj1c2c@map-env) (let ((bj1c2f@formals (map cdr bj1c2c@map-env)) (bj1c30@actuals (map (lambda (bj1c33@x) (list 'ref (car bj1c33@x))) bj1c2c@map-env))) (if (eq? (car bj1c2b@e) 'ref) (car bj1c30@actuals) (if (for-all (lambda (bj1c35@x) (and (eq? (car bj1c35@x) 'ref) (memq (cadr bj1c35@x) bj1c2f@formals))) (cdr bj1c2b@e)) (let ((bj1c37@args (map (let ((bj1c39@r (map cons bj1c2f@formals bj1c30@actuals))) (lambda (bj1c3b@x) (cdr (assq (cadr bj1c3b@x) bj1c39@r)))) (cdr bj1c2b@e)))) (cons 'map (cons (list 'primitive (car bj1c2b@e)) bj1c37@args))) (cons* 'map (list 'lambda bj1c2f@formals bj1c2b@e) bj1c30@actuals)))))) (set! bj1bf2@gen-cons (lambda (bj1c1b@e bj1c1c@x bj1c1d@y bj1c1e@xnew bj1c1f@ynew) (let ((bj1c25@t (car bj1c1f@ynew))) (if (memv bj1c25@t '(quote)) (if (eq? (car bj1c1e@xnew) 'quote) (let ((bj1c27@xnew (cadr bj1c1e@xnew)) (bj1c28@ynew (cadr bj1c1f@ynew))) (if (and (eq? bj1c27@xnew bj1c1c@x) (eq? bj1c28@ynew bj1c1d@y)) (list 'quote bj1c1b@e) (list 'quote (cons bj1c27@xnew bj1c28@ynew)))) (if (null? (cadr bj1c1f@ynew)) (list 'list bj1c1e@xnew) (list 'cons bj1c1e@xnew bj1c1f@ynew))) (if (memv bj1c25@t '(list)) (cons 'list (cons bj1c1e@xnew (cdr bj1c1f@ynew))) (list 'cons bj1c1e@xnew bj1c1f@ynew)))))) (set! bj1bf4@gen-vector (lambda (bj1c15@e bj1c16@ls bj1c17@lsnew) (if (eq? (car bj1c17@lsnew) 'quote) (if (eq? (cadr bj1c17@lsnew) bj1c16@ls) (list 'quote bj1c15@e) (list 'quote (list->vector (cadr bj1c17@lsnew)))) (if (eq? (car bj1c17@lsnew) 'list) (cons 'vector (cdr bj1c17@lsnew)) (list 'list->vector bj1c17@lsnew))))) (set! bj1bf6@regen (lambda (bj1c0f@x) (let ((bj1c11@t (car bj1c0f@x))) (if (memv bj1c11@t '(ref)) (cadr bj1c0f@x) (if (memv bj1c11@t '(primitive)) (list 'primitive (cadr bj1c0f@x)) (if (memv bj1c11@t '(quote)) (list 'quote (cadr bj1c0f@x)) (if (memv bj1c11@t '(lambda)) (bjad8@bja04@build-lambda '#f (cadr bj1c0f@x) (bj1bf6@regen (caddr bj1c0f@x))) (if (memv bj1c11@t '(map)) (let ((bj1c13@ls (map bj1bf6@regen (cdr bj1c0f@x)))) (cons '(primitive ellipsis-map) bj1c13@ls)) (cons (list 'primitive (car bj1c0f@x)) (map bj1bf6@regen (cdr bj1c0f@x))))))))))) (lambda (bj1bf7@e bj1bf8@r bj1bf9@mr) (let ((bj1bfd@t bj1bf7@e)) (let ((bj1bff@ls/false (bjd7c@syntax-dispatch bj1bfd@t '(_ any)))) (if bj1bff@ls/false (apply (lambda (bj1c01@x) (call-with-values (lambda () (bj1be8@gen-syntax bj1bf7@e bj1c01@x bj1bf8@r '() bjd7e@ellipsis? '#f)) (lambda (bj1c07@bj1c04 bj1c08@bj1c06) (let ((bj1c0b@maps bj1c08@bj1c06) (bj1c0c@e bj1c07@bj1c04)) (bj1bf6@regen bj1c0c@e))))) bj1bff@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1bfd@t)))))))) (set! bj2858@bjd88@syntax-transformer bjd88@syntax-transformer) (set! bjd8a@core-macro-transformer (lambda (bj1d2f@name) (let ((bj1d31@t bj1d2f@name)) (if (memv bj1d31@t '(quote)) bjd2c@quote-transformer (if (memv bj1d31@t '(lambda)) bjd30@lambda-transformer (if (memv bj1d31@t '(case-lambda)) bjd2e@case-lambda-transformer (if (memv bj1d31@t '(letrec)) bjd14@letrec-transformer (if (memv bj1d31@t '(letrec*)) bjd16@letrec*-transformer (if (memv bj1d31@t '(let)) bjd12@let-transformer (if (memv bj1d31@t '(if)) bjd24@if-transformer (if (memv bj1d31@t '(and)) bjd26@and-transformer (if (memv bj1d31@t '(or)) bjd28@or-transformer (if (memv bj1d31@t '(foreign-call)) bjd78@foreign-call-transformer (if (memv bj1d31@t '(syntax-case)) bjd84@syntax-case-transformer (if (memv bj1d31@t '(syntax)) bjd88@syntax-transformer (if (memv bj1d31@t '(type-descriptor)) bjd1a@type-descriptor-transformer (if (memv bj1d31@t '(record-type-descriptor)) bjd1c@record-type-descriptor-transformer (if (memv bj1d31@t '(record-constructor-descriptor)) bjd1e@record-constructor-descriptor-transformer (if (memv bj1d31@t '(fluid-let-syntax)) bjd18@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" bj1d2f@name)))))))))))))))))))) (set! bj2859@bjd8a@core-macro-transformer bjd8a@core-macro-transformer) (set! bjd8c@symbol-macro (lambda (bj1d33@x bj1d34@set) (let ((bj1d37@t bj1d33@x)) (let ((bj1d39@ls/false (bjd7c@syntax-dispatch bj1d37@t '(_ any)))) (if (and bj1d39@ls/false (apply (lambda (bj1d3b@name) (and (bjb75@id? bj1d3b@name) (memq (bjb77@id->sym bj1d3b@name) bj1d34@set))) bj1d39@ls/false)) (apply (lambda (bj1d3d@name) (bjd32@bless (list 'quote bj1d3d@name))) bj1d39@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1d37@t)))))) (set! bj285a@bjd8c@symbol-macro bjd8c@symbol-macro) (set! bjd8e@macro-transformer (lambda (bj1d3f@x) (if (procedure? bj1d3f@x) bj1d3f@x (if (symbol? bj1d3f@x) (let ((bj1d41@t bj1d3f@x)) (if (memv bj1d41@t '(define-record-type)) bjd70@define-record-type-macro (if (memv bj1d41@t '(define-struct)) bjd6e@define-struct-macro (if (memv bj1d41@t '(include)) bjd64@include-macro (if (memv bj1d41@t '(cond)) bjd60@cond-macro (if (memv bj1d41@t '(let)) bjd38@let-macro (if (memv bj1d41@t '(do)) bjd58@do-macro (if (memv bj1d41@t '(or)) bjd5c@or-macro (if (memv bj1d41@t '(and)) bjd5e@and-macro (if (memv bj1d41@t '(let*)) bjd5a@let*-macro (if (memv bj1d41@t '(let-values)) bjd3a@let-values-macro (if (memv bj1d41@t '(let*-values)) bjd3c@let*-values-macro (if (memv bj1d41@t '(syntax-rules)) bjd68@syntax-rules-macro (if (memv bj1d41@t '(quasiquote)) bjd6a@quasiquote-macro (if (memv bj1d41@t '(quasisyntax)) bjd6c@quasisyntax-macro (if (memv bj1d41@t '(with-syntax)) bjd34@with-syntax-macro (if (memv bj1d41@t '(when)) bjd20@when-macro (if (memv bj1d41@t '(unless)) bjd22@unless-macro (if (memv bj1d41@t '(case)) bjd2a@case-macro (if (memv bj1d41@t '(identifier-syntax)) bjd56@identifier-syntax-macro (if (memv bj1d41@t '(time)) bjd4e@time-macro (if (memv bj1d41@t '(delay)) bjd50@delay-macro (if (memv bj1d41@t '(assert)) bjd52@assert-macro (if (memv bj1d41@t '(endianness)) bjd54@endianness-macro (if (memv bj1d41@t '(guard)) bjd4a@guard-macro (if (memv bj1d41@t '(define-enumeration)) bjd4c@define-enumeration-macro (if (memv bj1d41@t '(trace-lambda)) bjd3e@trace-lambda-macro (if (memv bj1d41@t '(trace-define)) bjd40@trace-define-macro (if (memv bj1d41@t '(trace-define-syntax)) bjd42@trace-define-syntax-macro (if (memv bj1d41@t '(trace-let-syntax)) bjd46@trace-let-syntax-macro (if (memv bj1d41@t '(trace-letrec-syntax)) bjd48@trace-letrec-syntax-macro (if (memv bj1d41@t '(define-condition-type)) bjd72@define-condition-type-macro (if (memv bj1d41@t '(parameterize)) bjd76@parameterize-macro (if (memv bj1d41@t '(include-into)) bjd66@include-into-macro (if (memv bj1d41@t '(eol-style)) (lambda (bj1d43@x) (bjd8c@symbol-macro bj1d43@x '(none lf cr crlf nel crnel ls))) (if (memv bj1d41@t '(error-handling-mode)) (lambda (bj1d45@x) (bjd8c@symbol-macro bj1d45@x '(ignore raise replace))) (if (memv bj1d41@t '(buffer-mode)) (lambda (bj1d47@x) (bjd8c@symbol-macro bj1d47@x '(none line block))) (if (memv bj1d41@t '(file-options)) bjaf0@file-options-macro (if (memv bj1d41@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) bjd74@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" bj1d3f@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" bj1d3f@x))))) (set! bj285b@bjd8e@macro-transformer bjd8e@macro-transformer) (set! bjd90@local-macro-transformer (lambda (bj1d49@x) (car bj1d49@x))) (set! bj285c@bjd90@local-macro-transformer bjd90@local-macro-transformer) (set! bjd92@do-macro-call (lambda (bj1d4b@transformer bj1d4c@expr) (let ((bj1d4f@out (bj1d4b@transformer (bjb5f@add-mark bjb59@anti-mark bj1d4c@expr '#f)))) (begin (let bj1d53@f ((bj1d51@x bj1d4f@out)) (if (not (bjb41@stx? bj1d51@x)) (if (pair? bj1d51@x) (begin (bj1d53@f (car bj1d51@x)) (bj1d53@f (cdr bj1d51@x))) (if (vector? bj1d51@x) (vector-for-each bj1d53@f bj1d51@x) (if (symbol? bj1d51@x) (bje5c@syntax-violation '#f '"raw symbol encountered in output of macro" bj1d4c@expr bj1d51@x) (void)))) (void))) (bjb5f@add-mark (bjb57@gen-mark) bj1d4f@out bj1d4c@expr))))) (set! bj285d@bjd92@do-macro-call bjd92@do-macro-call) (set! bjd94@chi-macro (lambda (bj1d55@p bj1d56@e) (bjd92@do-macro-call (bjd8e@macro-transformer bj1d55@p) bj1d56@e))) (set! bj285e@bjd94@chi-macro bjd94@chi-macro) (set! bjd96@chi-local-macro (lambda (bj1d59@p bj1d5a@e) (bjd92@do-macro-call (bjd90@local-macro-transformer bj1d59@p) bj1d5a@e))) (set! bj285f@bjd96@chi-local-macro bjd96@chi-local-macro) (set! bjd98@chi-global-macro (lambda (bj1d5d@p bj1d5e@e) (let ((bj1d61@lib (car bj1d5d@p)) (bj1d62@loc (cdr bj1d5d@p))) (begin (bj98c@bj7db@visit-library bj1d61@lib) (let ((bj1d65@x (symbol-value bj1d62@loc))) (let ((bj1d67@transformer (if (procedure? bj1d65@x) bj1d65@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" bj1d65@x)))) (bjd92@do-macro-call bj1d67@transformer bj1d5e@e))))))) (set! bj2860@bjd98@chi-global-macro bjd98@chi-global-macro) (set! bjd9a@chi-expr* (lambda (bj1d69@e* bj1d6a@r bj1d6b@mr) (if (null? bj1d69@e*) '() (let ((bj1d6f@e (bjd9e@chi-expr (car bj1d69@e*) bj1d6a@r bj1d6b@mr))) (cons bj1d6f@e (bjd9a@chi-expr* (cdr bj1d69@e*) bj1d6a@r bj1d6b@mr)))))) (set! bj2861@bjd9a@chi-expr* bjd9a@chi-expr*) (set! bjd9c@chi-application (lambda (bj1d71@e bj1d72@r bj1d73@mr) (let ((bj1d77@t bj1d71@e)) (let ((bj1d79@ls/false (bjd7c@syntax-dispatch bj1d77@t '(any . each-any)))) (if bj1d79@ls/false (apply (lambda (bj1d7b@rator bj1d7c@rands) (let ((bj1d7f@rator (bjd9e@chi-expr bj1d7b@rator bj1d72@r bj1d73@mr))) (cons bj1d7f@rator (bjd9a@chi-expr* bj1d7c@rands bj1d72@r bj1d73@mr)))) bj1d79@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1d77@t)))))) (set! bj2862@bjd9c@chi-application bjd9c@chi-application) (set! bjd9e@chi-expr (lambda (bj1d81@e bj1d82@r bj1d83@mr) (call-with-values (lambda () (bjb97@syntax-type bj1d81@e bj1d82@r)) (lambda (bj1d8d@bj1d88 bj1d8e@bj1d8a bj1d8f@bj1d8c) (let ((bj1d93@kwd bj1d8f@bj1d8c) (bj1d94@value bj1d8e@bj1d8a) (bj1d95@type bj1d8d@bj1d88)) (let ((bj1d99@t bj1d95@type)) (if (memv bj1d99@t '(core-macro)) (let ((bj1d9b@transformer (bjd8a@core-macro-transformer bj1d94@value))) (bj1d9b@transformer bj1d81@e bj1d82@r bj1d83@mr)) (if (memv bj1d99@t '(global)) (let ((bj1d9d@lib (car bj1d94@value))) (let ((bj1d9f@loc (cdr bj1d94@value))) (begin ((bjde4@inv-collector) bj1d9d@lib) bj1d9f@loc))) (if (memv bj1d99@t '(core-prim)) (let ((bj1da1@name bj1d94@value)) (list 'primitive bj1da1@name)) (if (memv bj1d99@t '(call)) (bjd9c@chi-application bj1d81@e bj1d82@r bj1d83@mr) (if (memv bj1d99@t '(lexical)) (let ((bj1da3@lex (bjd06@lexical-var bj1d94@value))) bj1da3@lex) (if (memv bj1d99@t '(global-macro global-macro!)) (bjd9e@chi-expr (bjd98@chi-global-macro bj1d94@value bj1d81@e) bj1d82@r bj1d83@mr) (if (memv bj1d99@t '(local-macro local-macro!)) (bjd9e@chi-expr (bjd96@chi-local-macro bj1d94@value bj1d81@e) bj1d82@r bj1d83@mr) (if (memv bj1d99@t '(macro macro!)) (bjd9e@chi-expr (bjd94@chi-macro bj1d94@value bj1d81@e) bj1d82@r bj1d83@mr) (if (memv bj1d99@t '(constant)) (let ((bj1da5@datum bj1d94@value)) (list 'quote bj1da5@datum)) (if (memv bj1d99@t '(set!)) (bjda0@chi-set! bj1d81@e bj1d82@r bj1d83@mr) (if (memv bj1d99@t '(begin)) (let ((bj1da7@t bj1d81@e)) (let ((bj1da9@ls/false (bjd7c@syntax-dispatch bj1da7@t '(_ any . each-any)))) (if bj1da9@ls/false (apply (lambda (bj1dab@x bj1dac@x*) (bjada@bja34@build-sequence '#f (bjd9a@chi-expr* (cons bj1dab@x bj1dac@x*) bj1d82@r bj1d83@mr))) bj1da9@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1da7@t)))) (if (memv bj1d99@t '(let-syntax letrec-syntax)) (let ((bj1daf@t bj1d81@e)) (let ((bj1db1@ls/false (bjd7c@syntax-dispatch bj1daf@t '(_ #(each (any any)) any . each-any)))) (if (and bj1db1@ls/false (apply (lambda (bj1db3@xlhs* bj1db4@xrhs* bj1db5@xbody bj1db6@xbody*) (if (not (bjb7d@valid-bound-ids? bj1db3@xlhs*)) (bje5c@syntax-violation '#f '"invalid identifiers" bj1d81@e) (void))) bj1db1@ls/false)) (apply (lambda (bj1dbb@xlhs* bj1dbc@xrhs* bj1dbd@xbody bj1dbe@xbody*) (let ((bj1dc3@xlab* (map bjb01@gen-label bj1dbb@xlhs*))) (let ((bj1dc5@xrib (bjb35@make-full-rib bj1dbb@xlhs* bj1dc3@xlab*))) (let ((bj1dc7@xb* (map (lambda (bj1dc9@x) (bjbad@make-eval-transformer (bjdd6@expand-transformer (if (eq? bj1d95@type 'let-syntax) bj1dc9@x (bjb61@add-subst bj1dc5@xrib bj1dc9@x)) bj1d83@mr))) bj1dbc@xrhs*))) (bjada@bja34@build-sequence '#f (bjd9a@chi-expr* (map (lambda (bj1dcb@x) (bjb61@add-subst bj1dc5@xrib bj1dcb@x)) (cons bj1dbd@xbody bj1dbe@xbody*)) (append (map cons bj1dc3@xlab* bj1dc7@xb*) bj1d82@r) (append (map cons bj1dc3@xlab* bj1dc7@xb*) bj1d83@mr))))))) bj1db1@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1daf@t)))) (if (memv bj1d99@t '(displaced-lexical)) (bje5c@syntax-violation '#f '"identifier out of context" bj1d81@e) (if (memv bj1d99@t '(syntax)) (bje5c@syntax-violation '#f '"reference to pattern variable outside a syntax form" bj1d81@e) (if (memv bj1d99@t '(define define-syntax module import library)) (bje5c@syntax-violation '#f (string-append (let ((bj1dcd@t bj1d95@type)) (if (memv bj1dcd@t '(define)) '"a definition" (if (memv bj1dcd@t '(define-syntax)) '"a define-syntax" (if (memv bj1dcd@t '(module)) '"a module definition" (if (memv bj1dcd@t '(library)) '"a library definition" (if (memv bj1dcd@t '(import)) '"an import declaration" (if (memv bj1dcd@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") bj1d81@e) (if (memv bj1d99@t '(mutable)) (bje5c@syntax-violation '#f '"attempt to reference an unexportable variable" bj1d81@e) (bje5c@syntax-violation '#f '"invalid expression" bj1d81@e))))))))))))))))))))))) (set! bj2863@bjd9e@chi-expr bjd9e@chi-expr) (set! bjda0@chi-set! (lambda (bj1dcf@e bj1dd0@r bj1dd1@mr) (let ((bj1dd5@t bj1dcf@e)) (let ((bj1dd7@ls/false (bjd7c@syntax-dispatch bj1dd5@t '(_ any any)))) (if (and bj1dd7@ls/false (apply (lambda (bj1dd9@x bj1dda@v) (bjb75@id? bj1dd9@x)) bj1dd7@ls/false)) (apply (lambda (bj1ddd@x bj1dde@v) (call-with-values (lambda () (bjb97@syntax-type bj1ddd@x bj1dd0@r)) (lambda (bj1de7@bj1de2 bj1de8@bj1de4 bj1de9@bj1de6) (let ((bj1ded@kwd bj1de9@bj1de6) (bj1dee@value bj1de8@bj1de4) (bj1def@type bj1de7@bj1de2)) (let ((bj1df3@t bj1def@type)) (if (memv bj1df3@t '(lexical)) (begin (bjd0a@set-lexical-mutable! bj1dee@value '#t) (list 'set! (bjd06@lexical-var bj1dee@value) (bjd9e@chi-expr bj1dde@v bj1dd0@r bj1dd1@mr))) (if (memv bj1df3@t '(core-prim)) (bje5c@syntax-violation '#f '"cannot modify imported core primitive" bj1dcf@e) (if (memv bj1df3@t '(global)) (bje5c@syntax-violation '#f '"attempt to modify imported binding" bj1dcf@e) (if (memv bj1df3@t '(global-macro!)) (bjd9e@chi-expr (bjd98@chi-global-macro bj1dee@value bj1dcf@e) bj1dd0@r bj1dd1@mr) (if (memv bj1df3@t '(local-macro!)) (bjd9e@chi-expr (bjd96@chi-local-macro bj1dee@value bj1dcf@e) bj1dd0@r bj1dd1@mr) (if (memv bj1df3@t '(mutable)) (bje5c@syntax-violation '#f '"attempt to assign to an unexportable variable" bj1dcf@e) (bje5c@syntax-violation '#f '"invalid syntax" bj1dcf@e)))))))))))) bj1dd7@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1dd5@t)))))) (set! bj2864@bjda0@chi-set! bjda0@chi-set!) (set! bjda2@verify-formals (lambda (bj1df5@fmls bj1df6@stx) (let ((bj1df9@t bj1df5@fmls)) (let ((bj1dfb@ls/false (bjd7c@syntax-dispatch bj1df9@t 'each-any))) (if bj1dfb@ls/false (apply (lambda (bj1dfd@x*) (if (not (bjb7d@valid-bound-ids? bj1dfd@x*)) (bjd36@invalid-fmls-error bj1df6@stx bj1df5@fmls) (void))) bj1dfb@ls/false) (let ((bj1dff@t bj1df9@t)) (let ((bj1e01@ls/false (bjd7c@syntax-dispatch bj1dff@t '#(each+ any () any)))) (if bj1e01@ls/false (apply (lambda (bj1e03@x* bj1e04@x) (if (not (bjb7d@valid-bound-ids? (cons bj1e04@x bj1e03@x*))) (bjd36@invalid-fmls-error bj1df6@stx bj1df5@fmls) (void))) bj1e01@ls/false) (let ((bj1e07@t bj1dff@t)) (let ((bj1e09@ls/false (bjd7c@syntax-dispatch bj1e07@t '_))) (if bj1e09@ls/false (apply (lambda () (bje5c@syntax-violation '#f '"invalid syntax" bj1df6@stx)) bj1e09@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1e07@t)))))))))))) (set! bj2865@bjda2@verify-formals bjda2@verify-formals) (set! bjda4@chi-lambda-clause (lambda (bj1e0b@stx bj1e0c@fmls bj1e0d@body* bj1e0e@r bj1e0f@mr) (let ((bj1e15@t bj1e0c@fmls)) (let ((bj1e17@ls/false (bjd7c@syntax-dispatch bj1e15@t 'each-any))) (if bj1e17@ls/false (apply (lambda (bj1e19@x*) (begin (bjda2@verify-formals bj1e0c@fmls bj1e0b@stx) (let ((bj1e1b@lex* (map bjafd@gen-lexical bj1e19@x*)) (bj1e1c@lab* (map bjb01@gen-label bj1e19@x*))) (values bj1e1b@lex* (bjdb4@chi-internal (bjb61@add-subst (bjb35@make-full-rib bj1e19@x* bj1e1c@lab*) bj1e0d@body*) (bjd0e@add-lexicals bj1e1c@lab* bj1e1b@lex* bj1e0e@r) bj1e0f@mr))))) bj1e17@ls/false) (let ((bj1e1f@t bj1e15@t)) (let ((bj1e21@ls/false (bjd7c@syntax-dispatch bj1e1f@t '#(each+ any () any)))) (if bj1e21@ls/false (apply (lambda (bj1e23@x* bj1e24@x) (begin (bjda2@verify-formals bj1e0c@fmls bj1e0b@stx) (let ((bj1e27@lex* (map bjafd@gen-lexical bj1e23@x*)) (bj1e28@lab* (map bjb01@gen-label bj1e23@x*)) (bj1e29@lex (bjafd@gen-lexical bj1e24@x)) (bj1e2a@lab (bjb01@gen-label bj1e24@x))) (values (append bj1e27@lex* bj1e29@lex) (bjdb4@chi-internal (bjb61@add-subst (bjb35@make-full-rib (cons bj1e24@x bj1e23@x*) (cons bj1e2a@lab bj1e28@lab*)) bj1e0d@body*) (bjd0e@add-lexicals (cons bj1e2a@lab bj1e28@lab*) (cons bj1e29@lex bj1e27@lex*) bj1e0e@r) bj1e0f@mr))))) bj1e21@ls/false) (let ((bj1e2f@t bj1e1f@t)) (let ((bj1e31@ls/false (bjd7c@syntax-dispatch bj1e2f@t '_))) (if bj1e31@ls/false (apply (lambda () (bje5c@syntax-violation '#f '"invalid syntax" bj1e0c@fmls)) bj1e31@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1e2f@t)))))))))))) (set! bj2866@bjda4@chi-lambda-clause bjda4@chi-lambda-clause) (set! bjda6@chi-lambda-clause* (lambda (bj1e33@stx bj1e34@fmls* bj1e35@body** bj1e36@r bj1e37@mr) (if (null? bj1e34@fmls*) (values '() '()) (call-with-values (lambda () (bjda4@chi-lambda-clause bj1e33@stx (car bj1e34@fmls*) (car bj1e35@body**) bj1e36@r bj1e37@mr)) (lambda (bj1e41@bj1e3e bj1e42@bj1e40) (let ((bj1e45@b bj1e42@bj1e40) (bj1e46@a bj1e41@bj1e3e)) (call-with-values (lambda () (bjda6@chi-lambda-clause* bj1e33@stx (cdr bj1e34@fmls*) (cdr bj1e35@body**) bj1e36@r bj1e37@mr)) (lambda (bj1e4d@bj1e4a bj1e4e@bj1e4c) (let ((bj1e51@b* bj1e4e@bj1e4c) (bj1e52@a* bj1e4d@bj1e4a)) (values (cons bj1e46@a bj1e52@a*) (cons bj1e45@b bj1e51@b*))))))))))) (set! bj2867@bjda6@chi-lambda-clause* bjda6@chi-lambda-clause*) (set! bjda8@chi-defun (lambda (bj1e55@x bj1e56@r bj1e57@mr) (let ((bj1e5b@fmls (car bj1e55@x)) (bj1e5c@body* (cdr bj1e55@x))) (call-with-values (lambda () (bjda4@chi-lambda-clause bj1e5b@fmls bj1e5b@fmls bj1e5c@body* bj1e56@r bj1e57@mr)) (lambda (bj1e63@bj1e60 bj1e64@bj1e62) (let ((bj1e67@body bj1e64@bj1e62) (bj1e68@fmls bj1e63@bj1e60)) (bjad8@bja04@build-lambda '#f bj1e68@fmls bj1e67@body))))))) (set! bj2868@bjda8@chi-defun bjda8@chi-defun) (set! bjdaa@chi-rhs (lambda (bj1e6b@rhs bj1e6c@r bj1e6d@mr) (let ((bj1e71@t (car bj1e6b@rhs))) (if (memv bj1e71@t '(defun)) (bjda8@chi-defun (cdr bj1e6b@rhs) bj1e6c@r bj1e6d@mr) (if (memv bj1e71@t '(expr)) (let ((bj1e73@expr (cdr bj1e6b@rhs))) (bjd9e@chi-expr bj1e73@expr bj1e6c@r bj1e6d@mr)) (if (memv bj1e71@t '(top-expr)) (let ((bj1e75@expr (cdr bj1e6b@rhs))) (bjada@bja34@build-sequence '#f (list (bjd9e@chi-expr bj1e75@expr bj1e6c@r bj1e6d@mr) (bjadb@bja36@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" bj1e6b@rhs))))))) (set! bj2869@bjdaa@chi-rhs bjdaa@chi-rhs) (set! bjdac@expand-interaction-rhs*/init* (lambda (bj1e77@lhs* bj1e78@rhs* bj1e79@init* bj1e7a@r bj1e7b@mr) (let bj1e85@f ((bj1e81@lhs* bj1e77@lhs*) (bj1e82@rhs* bj1e78@rhs*)) (if (null? bj1e81@lhs*) (map (lambda (bj1e87@x) (bjd9e@chi-expr bj1e87@x bj1e7a@r bj1e7b@mr)) bj1e79@init*) (let ((bj1e89@lhs (car bj1e81@lhs*)) (bj1e8a@rhs (car bj1e82@rhs*))) (let ((bj1e8d@t (car bj1e8a@rhs))) (if (memv bj1e8d@t '(defun)) (let ((bj1e8f@rhs (bjda8@chi-defun (cdr bj1e8a@rhs) bj1e7a@r bj1e7b@mr))) (cons (list 'set! bj1e89@lhs bj1e8f@rhs) (bj1e85@f (cdr bj1e81@lhs*) (cdr bj1e82@rhs*)))) (if (memv bj1e8d@t '(expr)) (let ((bj1e91@rhs (bjd9e@chi-expr (cdr bj1e8a@rhs) bj1e7a@r bj1e7b@mr))) (cons (list 'set! bj1e89@lhs bj1e91@rhs) (bj1e85@f (cdr bj1e81@lhs*) (cdr bj1e82@rhs*)))) (if (memv bj1e8d@t '(top-expr)) (let ((bj1e93@e (bjd9e@chi-expr (cdr bj1e8a@rhs) bj1e7a@r bj1e7b@mr))) (cons bj1e93@e (bj1e85@f (cdr bj1e81@lhs*) (cdr bj1e82@rhs*)))) (error 'expand-interaction '"invallid" bj1e8a@rhs)))))))))) (set! bj286a@bjdac@expand-interaction-rhs*/init* bjdac@expand-interaction-rhs*/init*) (set! bjdae@chi-rhs* (lambda (bj1e95@rhs* bj1e96@r bj1e97@mr) (let bj1e9d@f ((bj1e9b@ls bj1e95@rhs*)) (if (null? bj1e9b@ls) '() (let ((bj1e9f@a (bjdaa@chi-rhs (car bj1e9b@ls) bj1e96@r bj1e97@mr))) (cons bj1e9f@a (bj1e9d@f (cdr bj1e9b@ls)))))))) (set! bj286b@bjdae@chi-rhs* bjdae@chi-rhs*) (set! bjdb0@find-bound=? (lambda (bj1ea1@x bj1ea2@lhs* bj1ea3@rhs*) (if (null? bj1ea2@lhs*) '#f (if (bjb79@bound-id=? bj1ea1@x (car bj1ea2@lhs*)) (car bj1ea3@rhs*) (bjdb0@find-bound=? bj1ea1@x (cdr bj1ea2@lhs*) (cdr bj1ea3@rhs*)))))) (set! bj286c@bjdb0@find-bound=? bjdb0@find-bound=?) (set! bjdb2@find-dups (lambda (bj1ea7@ls) (let bj1ead@f ((bj1ea9@ls bj1ea7@ls) (bj1eaa@dups '())) (if (null? bj1ea9@ls) bj1eaa@dups (let ((bj1eaf@t (bjdb0@find-bound=? (car bj1ea9@ls) (cdr bj1ea9@ls) (cdr bj1ea9@ls)))) (if bj1eaf@t ((lambda (bj1eb1@x) (bj1ead@f (cdr bj1ea9@ls) (cons (list (car bj1ea9@ls) bj1eb1@x) bj1eaa@dups))) bj1eaf@t) (bj1ead@f (cdr bj1ea9@ls) bj1eaa@dups))))))) (set! bj286d@bjdb2@find-dups bjdb2@find-dups) (set! bjdb4@chi-internal (lambda (bj1eb3@e* bj1eb4@r bj1eb5@mr) (let ((bj1eb9@rib (bjb29@make-empty-rib))) (call-with-values (lambda () (bjdd4@chi-body* (map (lambda (bj1ecb@x) (bjb61@add-subst bj1eb9@rib bj1ecb@x)) (bjb73@syntax->list bj1eb3@e*)) bj1eb4@r bj1eb5@mr '() '() '() '() '() bj1eb9@rib '#f)) (lambda (bj1ecd@bj1ebc bj1ece@bj1ebe bj1ecf@bj1ec0 bj1ed0@bj1ec2 bj1ed1@bj1ec4 bj1ed2@bj1ec6 bj1ed3@bj1ec8 bj1ed4@bj1eca) (let ((bj1edd@_exp* bj1ed4@bj1eca) (bj1ede@kwd* bj1ed3@bj1ec8) (bj1edf@mod** bj1ed2@bj1ec6) (bj1ee0@rhs* bj1ed1@bj1ec4) (bj1ee1@lex* bj1ed0@bj1ec2) (bj1ee2@mr bj1ecf@bj1ec0) (bj1ee3@r bj1ece@bj1ebe) (bj1ee4@e* bj1ecd@bj1ebc)) (begin (if (null? bj1ee4@e*) (bje5c@syntax-violation '#f '"no expression in body" bj1ee4@e*) (void)) (let ((bj1eed@init* (bjd9a@chi-expr* (append (apply append (reverse bj1edf@mod**)) bj1ee4@e*) bj1ee3@r bj1ee2@mr))) (let ((bj1eef@rhs* (bjdae@chi-rhs* bj1ee0@rhs* bj1ee3@r bj1ee2@mr))) (bjadf@bja3e@build-letrec* '#f (reverse bj1ee1@lex*) (reverse bj1eef@rhs*) (bjada@bja34@build-sequence '#f bj1eed@init*))))))))))) (set! bj286e@bjdb4@chi-internal bjdb4@chi-internal) (set! bjdb6@parse-module (lambda (bj1ef1@e) (let ((bj1ef3@t bj1ef1@e)) (let ((bj1ef5@ls/false (bjd7c@syntax-dispatch bj1ef3@t '(_ each-any . each-any)))) (if bj1ef5@ls/false (apply (lambda (bj1ef7@export* bj1ef8@b*) (begin (if (not (for-all bjb75@id? bj1ef7@export*)) (bje5c@syntax-violation '#f '"module exports must be identifiers" bj1ef1@e) (void)) (values '#f (list->vector bj1ef7@export*) bj1ef8@b*))) bj1ef5@ls/false) (let ((bj1efb@t bj1ef3@t)) (let ((bj1efd@ls/false (bjd7c@syntax-dispatch bj1efb@t '(_ any each-any . each-any)))) (if bj1efd@ls/false (apply (lambda (bj1eff@name bj1f00@export* bj1f01@b*) (begin (if (not (bjb75@id? bj1eff@name)) (bje5c@syntax-violation '#f '"module name must be an identifier" bj1ef1@e) (void)) (if (not (for-all bjb75@id? bj1f00@export*)) (bje5c@syntax-violation '#f '"module exports must be identifiers" bj1ef1@e) (void)) (values bj1eff@name (list->vector bj1f00@export*) bj1f01@b*))) bj1efd@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1efb@t))))))))) (set! bj286f@bjdb6@parse-module bjdb6@parse-module) (set! bjdc0@module-interface? (lambda (bj1f05@x) (and (simple-struct? bj1f05@x) (eq? (simple-struct-name bj1f05@x) 'module-interface)))) (set! bj2870@bjdc0@module-interface? bjdc0@module-interface?) (set! bjdc2@module-interface-first-mark (lambda (bj1f07@x) (simple-struct-ref bj1f07@x '0))) (set! bj2871@bjdc2@module-interface-first-mark bjdc2@module-interface-first-mark) (set! bjdc4@set-module-interface-first-mark! (lambda (bj1f09@x bj1f0a@val) (simple-struct-set! bj1f09@x '0 bj1f0a@val))) (set! bj2872@bjdc4@set-module-interface-first-mark! bjdc4@set-module-interface-first-mark!) (set! bjdc6@module-interface-exp-id-vec (lambda (bj1f0d@x) (simple-struct-ref bj1f0d@x '1))) (set! bj2873@bjdc6@module-interface-exp-id-vec bjdc6@module-interface-exp-id-vec) (set! bjdc8@set-module-interface-exp-id-vec! (lambda (bj1f0f@x bj1f10@val) (simple-struct-set! bj1f0f@x '1 bj1f10@val))) (set! bj2874@bjdc8@set-module-interface-exp-id-vec! bjdc8@set-module-interface-exp-id-vec!) (set! bjdca@module-interface-exp-lab-vec (lambda (bj1f13@x) (simple-struct-ref bj1f13@x '2))) (set! bj2875@bjdca@module-interface-exp-lab-vec bjdca@module-interface-exp-lab-vec) (set! bjdcc@set-module-interface-exp-lab-vec! (lambda (bj1f15@x bj1f16@val) (simple-struct-set! bj1f15@x '2 bj1f16@val))) (set! bj2876@bjdcc@set-module-interface-exp-lab-vec! bjdcc@set-module-interface-exp-lab-vec!) (set! bjdce@dummy '3) (set! bj2877@bjdce@dummy bjdce@dummy) (set! bjdd0@module-interface-exp-id* (lambda (bj1f19@iface bj1f1a@id) (let ((bj1f1e@diff-marks '#f)) (begin (set! bj1f1e@diff-marks (lambda (bj1f25@ls bj1f26@x) (begin (if (null? bj1f25@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((bj1f29@a (car bj1f25@ls))) (if (eq? bj1f29@a bj1f26@x) '() (cons bj1f29@a (bj1f1e@diff-marks (cdr bj1f25@ls) bj1f26@x))))))) (let ((bj1f1f@diff (bj1f1e@diff-marks (bjb47@stx-mark* bj1f1a@id) (bjdc2@module-interface-first-mark bj1f19@iface))) (bj1f20@id-vec (bjdc6@module-interface-exp-id-vec bj1f19@iface))) (if (null? bj1f1f@diff) bj1f20@id-vec (vector-map (lambda (bj1f23@x) (make-simple-struct 'stx '5 (list (bjb43@stx-expr bj1f23@x) (append bj1f1f@diff (bjb47@stx-mark* bj1f23@x)) '() '()))) bj1f20@id-vec))))))) (set! bj2878@bjdd0@module-interface-exp-id* bjdd0@module-interface-exp-id*) (set! bjdd2@chi-internal-module (lambda (bj1f2b@e bj1f2c@r bj1f2d@mr bj1f2e@lex* bj1f2f@rhs* bj1f30@mod** bj1f31@kwd*) (call-with-values (lambda () (bjdb6@parse-module bj1f2b@e)) (lambda (bj1f3f@bj1f3a bj1f40@bj1f3c bj1f41@bj1f3e) (let ((bj1f45@e* bj1f41@bj1f3e) (bj1f46@exp-id* bj1f40@bj1f3c) (bj1f47@name bj1f3f@bj1f3a)) (let ((bj1f4b@rib (bjb29@make-empty-rib))) (let ((bj1f4d@e* (map (lambda (bj1f4f@x) (bjb61@add-subst bj1f4b@rib bj1f4f@x)) (bjb73@syntax->list bj1f45@e*)))) (call-with-values (lambda () (bjdd4@chi-body* bj1f4d@e* bj1f2c@r bj1f2d@mr bj1f2e@lex* bj1f2f@rhs* bj1f30@mod** bj1f31@kwd* '() bj1f4b@rib '#f)) (lambda (bj1f61@bj1f52 bj1f62@bj1f54 bj1f63@bj1f56 bj1f64@bj1f58 bj1f65@bj1f5a bj1f66@bj1f5c bj1f67@bj1f5e bj1f68@bj1f60) (let ((bj1f71@_exp* bj1f68@bj1f60) (bj1f72@kwd* bj1f67@bj1f5e) (bj1f73@mod** bj1f66@bj1f5c) (bj1f74@rhs* bj1f65@bj1f5a) (bj1f75@lex* bj1f64@bj1f58) (bj1f76@mr bj1f63@bj1f56) (bj1f77@r bj1f62@bj1f54) (bj1f78@e* bj1f61@bj1f52)) (let ((bj1f81@exp-lab* (vector-map (lambda (bj1f85@x) (or (bjb8b@id->label (make-simple-struct 'stx '5 (list (bjb77@id->sym bj1f85@x) (bjb47@stx-mark* bj1f85@x) (list bj1f4b@rib) '()))) (bje5c@syntax-violation '#f '"cannot find module export" bj1f85@x))) bj1f46@exp-id*)) (bj1f82@mod** (cons bj1f78@e* bj1f73@mod**))) (if (not bj1f47@name) (values bj1f75@lex* bj1f74@rhs* bj1f46@exp-id* bj1f81@exp-lab* bj1f77@r bj1f76@mr bj1f82@mod** bj1f72@kwd*) (let ((bj1f87@lab (bjb01@gen-label 'module)) (bj1f88@iface (make-simple-struct 'module-interface '4 (list (car (bjb47@stx-mark* bj1f47@name)) (vector-map (lambda (bj1f8b@x) (make-simple-struct 'stx '5 (list (bjb43@stx-expr bj1f8b@x) (bjb47@stx-mark* bj1f8b@x) '() '()))) bj1f46@exp-id*) bj1f81@exp-lab*)))) (values bj1f75@lex* bj1f74@rhs* (vector bj1f47@name) (vector bj1f87@lab) (cons (cons bj1f87@lab (cons '$module bj1f88@iface)) bj1f77@r) (cons (cons bj1f87@lab (cons '$module bj1f88@iface)) bj1f76@mr) bj1f82@mod** bj1f72@kwd*)))))))))))))) (set! bj2879@bjdd2@chi-internal-module bjdd2@chi-internal-module) (set! bjdd4@chi-body* (lambda (bj1f8d@e* bj1f8e@r bj1f8f@mr bj1f90@lex* bj1f91@rhs* bj1f92@mod** bj1f93@kwd* bj1f94@exp* bj1f95@rib bj1f96@top?) (if (null? bj1f8d@e*) (values bj1f8d@e* bj1f8e@r bj1f8f@mr bj1f90@lex* bj1f91@rhs* bj1f92@mod** bj1f93@kwd* bj1f94@exp*) (let ((bj1fa1@e (car bj1f8d@e*))) (call-with-values (lambda () (bjb97@syntax-type bj1fa1@e bj1f8e@r)) (lambda (bj1fa9@bj1fa4 bj1faa@bj1fa6 bj1fab@bj1fa8) (let ((bj1faf@kwd bj1fab@bj1fa8) (bj1fb0@value bj1faa@bj1fa6) (bj1fb1@type bj1fa9@bj1fa4)) (let ((bj1fb5@kwd* (if (bjb75@id? bj1faf@kwd) (cons bj1faf@kwd bj1f93@kwd*) bj1f93@kwd*))) (let ((bj1fb7@t bj1fb1@type)) (if (memv bj1fb7@t '(define)) (call-with-values (lambda () (bjcfe@parse-define bj1fa1@e)) (lambda (bj1fbd@bj1fba bj1fbe@bj1fbc) (let ((bj1fc1@rhs bj1fbe@bj1fbc) (bj1fc2@id bj1fbd@bj1fba)) (begin (if (bjb81@bound-id-member? bj1fc2@id bj1fb5@kwd*) (bje5c@syntax-violation '#f '"cannot redefine keyword" bj1fa1@e) (void)) (call-with-values (lambda () (bjb05@gen-define-label+loc bj1fc2@id bj1f95@rib)) (lambda (bj1fc9@bj1fc6 bj1fca@bj1fc8) (let ((bj1fcd@lex bj1fca@bj1fc8) (bj1fce@lab bj1fc9@bj1fc6)) (begin (bjb2b@extend-rib! bj1f95@rib bj1fc2@id bj1fce@lab) (bjdd4@chi-body* (cdr bj1f8d@e*) (bjd0c@add-lexical bj1fce@lab bj1fcd@lex bj1f8e@r) bj1f8f@mr (cons bj1fcd@lex bj1f90@lex*) (cons bj1fc1@rhs bj1f91@rhs*) bj1f92@mod** bj1fb5@kwd* bj1f94@exp* bj1f95@rib bj1f96@top?))))))))) (if (memv bj1fb7@t '(define-syntax)) (call-with-values (lambda () (bjd00@parse-define-syntax bj1fa1@e)) (lambda (bj1fd5@bj1fd2 bj1fd6@bj1fd4) (let ((bj1fd9@rhs bj1fd6@bj1fd4) (bj1fda@id bj1fd5@bj1fd2)) (begin (if (bjb81@bound-id-member? bj1fda@id bj1fb5@kwd*) (bje5c@syntax-violation '#f '"cannot redefine keyword" bj1fa1@e) (void)) (let ((bj1fdd@lab (bjb07@gen-define-label bj1fda@id bj1f95@rib)) (bj1fde@expanded-rhs (bjdd6@expand-transformer bj1fd9@rhs bj1f8f@mr))) (begin (bjb2b@extend-rib! bj1f95@rib bj1fda@id bj1fdd@lab) (let ((bj1fe1@b (bjbad@make-eval-transformer bj1fde@expanded-rhs))) (bjdd4@chi-body* (cdr bj1f8d@e*) (cons (cons bj1fdd@lab bj1fe1@b) bj1f8e@r) (cons (cons bj1fdd@lab bj1fe1@b) bj1f8f@mr) bj1f90@lex* bj1f91@rhs* bj1f92@mod** bj1fb5@kwd* bj1f94@exp* bj1f95@rib bj1f96@top?)))))))) (if (memv bj1fb7@t '(let-syntax letrec-syntax)) (let ((bj1fe3@t bj1fa1@e)) (let ((bj1fe5@ls/false (bjd7c@syntax-dispatch bj1fe3@t '(_ #(each (any any)) . each-any)))) (if (and bj1fe5@ls/false (apply (lambda (bj1fe7@xlhs* bj1fe8@xrhs* bj1fe9@xbody*) (if (not (bjb7d@valid-bound-ids? bj1fe7@xlhs*)) (bje5c@syntax-violation '#f '"invalid identifiers" bj1fa1@e) (void))) bj1fe5@ls/false)) (apply (lambda (bj1fed@xlhs* bj1fee@xrhs* bj1fef@xbody*) (let ((bj1ff3@xlab* (map bjb01@gen-label bj1fed@xlhs*))) (let ((bj1ff5@xrib (bjb35@make-full-rib bj1fed@xlhs* bj1ff3@xlab*))) (let ((bj1ff7@xb* (map (lambda (bj1ff9@x) (bjbad@make-eval-transformer (bjdd6@expand-transformer (if (eq? bj1fb1@type 'let-syntax) bj1ff9@x (bjb61@add-subst bj1ff5@xrib bj1ff9@x)) bj1f8f@mr))) bj1fee@xrhs*))) (bjdd4@chi-body* (append (map (lambda (bj1ffb@x) (bjb61@add-subst bj1ff5@xrib bj1ffb@x)) bj1fef@xbody*) (cdr bj1f8d@e*)) (append (map cons bj1ff3@xlab* bj1ff7@xb*) bj1f8e@r) (append (map cons bj1ff3@xlab* bj1ff7@xb*) bj1f8f@mr) bj1f90@lex* bj1f91@rhs* bj1f92@mod** bj1fb5@kwd* bj1f94@exp* bj1f95@rib bj1f96@top?))))) bj1fe5@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1fe3@t)))) (if (memv bj1fb7@t '(begin)) (let ((bj1ffd@t bj1fa1@e)) (let ((bj1fff@ls/false (bjd7c@syntax-dispatch bj1ffd@t '(_ . each-any)))) (if bj1fff@ls/false (apply (lambda (bj2001@x*) (bjdd4@chi-body* (append bj2001@x* (cdr bj1f8d@e*)) bj1f8e@r bj1f8f@mr bj1f90@lex* bj1f91@rhs* bj1f92@mod** bj1fb5@kwd* bj1f94@exp* bj1f95@rib bj1f96@top?)) bj1fff@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj1ffd@t)))) (if (memv bj1fb7@t '(global-macro global-macro!)) (bjdd4@chi-body* (cons (bjb61@add-subst bj1f95@rib (bjd98@chi-global-macro bj1fb0@value bj1fa1@e)) (cdr bj1f8d@e*)) bj1f8e@r bj1f8f@mr bj1f90@lex* bj1f91@rhs* bj1f92@mod** bj1fb5@kwd* bj1f94@exp* bj1f95@rib bj1f96@top?) (if (memv bj1fb7@t '(local-macro local-macro!)) (bjdd4@chi-body* (cons (bjb61@add-subst bj1f95@rib (bjd96@chi-local-macro bj1fb0@value bj1fa1@e)) (cdr bj1f8d@e*)) bj1f8e@r bj1f8f@mr bj1f90@lex* bj1f91@rhs* bj1f92@mod** bj1fb5@kwd* bj1f94@exp* bj1f95@rib bj1f96@top?) (if (memv bj1fb7@t '(macro macro!)) (bjdd4@chi-body* (cons (bjb61@add-subst bj1f95@rib (bjd94@chi-macro bj1fb0@value bj1fa1@e)) (cdr bj1f8d@e*)) bj1f8e@r bj1f8f@mr bj1f90@lex* bj1f91@rhs* bj1f92@mod** bj1fb5@kwd* bj1f94@exp* bj1f95@rib bj1f96@top?) (if (memv bj1fb7@t '(module)) (call-with-values (lambda () (bjdd2@chi-internal-module bj1fa1@e bj1f8e@r bj1f8f@mr bj1f90@lex* bj1f91@rhs* bj1f92@mod** bj1fb5@kwd*)) (lambda (bj2013@bj2004 bj2014@bj2006 bj2015@bj2008 bj2016@bj200a bj2017@bj200c bj2018@bj200e bj2019@bj2010 bj201a@bj2012) (let ((bj2023@kwd* bj201a@bj2012) (bj2024@mod** bj2019@bj2010) (bj2025@mr bj2018@bj200e) (bj2026@r bj2017@bj200c) (bj2027@m-exp-lab* bj2016@bj200a) (bj2028@m-exp-id* bj2015@bj2008) (bj2029@rhs* bj2014@bj2006) (bj202a@lex* bj2013@bj2004)) (begin (vector-for-each (lambda (bj2033@id bj2034@lab) (bjb2b@extend-rib! bj1f95@rib bj2033@id bj2034@lab)) bj2028@m-exp-id* bj2027@m-exp-lab*) (bjdd4@chi-body* (cdr bj1f8d@e*) bj2026@r bj2025@mr bj202a@lex* bj2029@rhs* bj2024@mod** bj2023@kwd* bj1f94@exp* bj1f95@rib bj1f96@top?))))) (if (memv bj1fb7@t '(library)) (begin (bje3e@library-expander (bjb89@stx->datum bj1fa1@e)) (bjdd4@chi-body* (cdr bj1f8d@e*) bj1f8e@r bj1f8f@mr bj1f90@lex* bj1f91@rhs* bj1f92@mod** bj1fb5@kwd* bj1f94@exp* bj1f95@rib bj1f96@top?)) (if (memv bj1fb7@t '(export)) (let ((bj2037@t bj1fa1@e)) (let ((bj2039@ls/false (bjd7c@syntax-dispatch bj2037@t '(_ . each-any)))) (if bj2039@ls/false (apply (lambda (bj203b@exp-decl*) (bjdd4@chi-body* (cdr bj1f8d@e*) bj1f8e@r bj1f8f@mr bj1f90@lex* bj1f91@rhs* bj1f92@mod** bj1fb5@kwd* (append bj203b@exp-decl* bj1f94@exp*) bj1f95@rib bj1f96@top?)) bj2039@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj2037@t)))) (if (memv bj1fb7@t '(import)) (let ((bj203e@module-import? '#f) (bj2040@module-import '#f) (bj2042@library-import '#f)) (begin (set! bj203e@module-import? (lambda (bj2091@e) (let ((bj2093@t bj2091@e)) (let ((bj2095@ls/false (bjd7c@syntax-dispatch bj2093@t '(_ any)))) (if (and bj2095@ls/false (apply (lambda (bj2097@id) (bjb75@id? bj2097@id)) bj2095@ls/false)) (apply (lambda (bj2099@id) '#t) bj2095@ls/false) (let ((bj209b@t bj2093@t)) (let ((bj209d@ls/false (bjd7c@syntax-dispatch bj209b@t '(_ . each-any)))) (if bj209d@ls/false (apply (lambda (bj209f@imp*) '#f) bj209d@ls/false) (let ((bj20a1@t bj209b@t)) (let ((bj20a3@ls/false (bjd7c@syntax-dispatch bj20a1@t '_))) (if bj20a3@ls/false (apply (lambda () (bje5c@syntax-violation '#f '"malformed import form" bj2091@e)) bj20a3@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj20a1@t)))))))))))) (set! bj2040@module-import (lambda (bj206f@e bj2070@r) (let ((bj2073@t bj206f@e)) (let ((bj2075@ls/false (bjd7c@syntax-dispatch bj2073@t '(_ any)))) (if (and bj2075@ls/false (apply (lambda (bj2077@id) (bjb75@id? bj2077@id)) bj2075@ls/false)) (apply (lambda (bj2079@id) (call-with-values (lambda () (bjb97@syntax-type bj2079@id bj2070@r)) (lambda (bj2081@bj207c bj2082@bj207e bj2083@bj2080) (let ((bj2087@kwd bj2083@bj2080) (bj2088@value bj2082@bj207e) (bj2089@type bj2081@bj207c)) (let ((bj208d@t bj2089@type)) (if (memv bj208d@t '($module)) (let ((bj208f@iface bj2088@value)) (values (bjdd0@module-interface-exp-id* bj208f@iface bj2079@id) (bjdca@module-interface-exp-lab-vec bj208f@iface))) (bje5c@syntax-violation '#f '"invalid import" bj206f@e))))))) bj2075@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj2073@t)))))) (set! bj2042@library-import (lambda (bj2053@e) (let ((bj2055@t bj2053@e)) (let ((bj2057@ls/false (bjd7c@syntax-dispatch bj2055@t '(any . each-any)))) (if bj2057@ls/false (apply (lambda (bj2059@ctxt bj205a@imp*) (call-with-values (lambda () (bjdde@parse-import-spec* (bje62@syntax->datum bj205a@imp*))) (lambda (bj2061@bj205e bj2062@bj2060) (let ((bj2065@subst-labels bj2062@bj2060) (bj2066@subst-names bj2061@bj205e)) (values (vector-map (lambda (bj2069@name) (bjb55@datum->stx bj2059@ctxt bj2069@name)) bj2066@subst-names) bj2065@subst-labels))))) bj2057@ls/false) (let ((bj206b@t bj2055@t)) (let ((bj206d@ls/false (bjd7c@syntax-dispatch bj206b@t '_))) (if bj206d@ls/false (apply (lambda () (bje5c@syntax-violation '#f '"invalid import form" bj2053@e)) bj206d@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj206b@t))))))))) (begin (call-with-values (lambda () (if (bj203e@module-import? bj1fa1@e) (bj2040@module-import bj1fa1@e bj1f8e@r) (bj2042@library-import bj1fa1@e))) (lambda (bj2047@bj2044 bj2048@bj2046) (let ((bj204b@lab* bj2048@bj2046) (bj204c@id* bj2047@bj2044)) (vector-for-each (lambda (bj204f@id bj2050@lab) (bjb2b@extend-rib! bj1f95@rib bj204f@id bj2050@lab)) bj204c@id* bj204b@lab*)))) (bjdd4@chi-body* (cdr bj1f8d@e*) bj1f8e@r bj1f8f@mr bj1f90@lex* bj1f91@rhs* bj1f92@mod** bj1fb5@kwd* bj1f94@exp* bj1f95@rib bj1f96@top?)))) (if bj1f96@top? (bjdd4@chi-body* (cdr bj1f8d@e*) bj1f8e@r bj1f8f@mr (cons (bjafd@gen-lexical 'dummy) bj1f90@lex*) (cons (cons 'top-expr bj1fa1@e) bj1f91@rhs*) bj1f92@mod** bj1fb5@kwd* bj1f94@exp* bj1f95@rib bj1f96@top?) (values bj1f8d@e* bj1f8e@r bj1f8f@mr bj1f90@lex* bj1f91@rhs* bj1f92@mod** bj1fb5@kwd* bj1f94@exp*)))))))))))))))))))))) (set! bj287a@bjdd4@chi-body* bjdd4@chi-body*) (set! bjdd6@expand-transformer (lambda (bj20a5@expr bj20a6@r) (let ((bj20a9@rtc (bjde2@make-collector))) (let ((bj20ab@expanded-rhs (let ((bj20b5@bj20ae bjde4@inv-collector) (bj20b6@bj20b0 bjde6@vis-collector) (bj20b7@bj20b2 bj20a9@rtc) (bj20b8@bj20b4 (lambda (bj20bd@x) (values)))) (let ((bj20bf@swap (lambda () (begin (let ((bj20c1@t (bj20b5@bj20ae))) (begin (bj20b5@bj20ae bj20b7@bj20b2) (set! bj20b7@bj20b2 bj20c1@t))) (let ((bj20c3@t (bj20b6@bj20b0))) (begin (bj20b6@bj20b0 bj20b8@bj20b4) (set! bj20b8@bj20b4 bj20c3@t))))))) (dynamic-wind bj20bf@swap (lambda () (bjd9e@chi-expr bj20a5@expr bj20a6@r bj20a6@r)) bj20bf@swap))))) (begin (for-each (let ((bj20c5@mark-visit (bjde6@vis-collector))) (lambda (bj20c7@x) (begin (bj98b@bj7d9@invoke-library bj20c7@x) (bj20c5@mark-visit bj20c7@x)))) (bj20a9@rtc)) bj20ab@expanded-rhs))))) (set! bj287b@bjdd6@expand-transformer bjdd6@expand-transformer) (set! bjdd8@parse-exports (lambda (bj20c9@exp*) (let bj20d1@f ((bj20cb@exp* bj20c9@exp*) (bj20cc@int* '()) (bj20cd@ext* '())) (if (null? bj20cb@exp*) (begin (if (not (bjb7d@valid-bound-ids? bj20cd@ext*)) (bje5c@syntax-violation 'export '"invalid exports" (bjdb2@find-dups bj20cd@ext*)) (void)) (values (map bje62@syntax->datum bj20cd@ext*) bj20cc@int*)) (let ((bj20d3@t (car bj20cb@exp*))) (let ((bj20d5@ls/false (bjd7c@syntax-dispatch bj20d3@t '(any . #(each (any any)))))) (if bj20d5@ls/false (apply (lambda (bj20d7@rename bj20d8@i* bj20d9@e*) (begin (if (not (and (eq? (bje62@syntax->datum bj20d7@rename) 'rename) (for-all bjb75@id? bj20d8@i*) (for-all bjb75@id? bj20d9@e*))) (bje5c@syntax-violation 'export '"invalid export specifier" (car bj20cb@exp*)) (void)) (bj20d1@f (cdr bj20cb@exp*) (append bj20d8@i* bj20cc@int*) (append bj20d9@e* bj20cd@ext*)))) bj20d5@ls/false) (let ((bj20dd@t bj20d3@t)) (let ((bj20df@ls/false (bjd7c@syntax-dispatch bj20dd@t 'any))) (if bj20df@ls/false (apply (lambda (bj20e1@ie) (begin (if (not (bjb75@id? bj20e1@ie)) (bje5c@syntax-violation 'export '"invalid export" bj20e1@ie) (void)) (bj20d1@f (cdr bj20cb@exp*) (cons bj20e1@ie bj20cc@int*) (cons bj20e1@ie bj20cd@ext*)))) bj20df@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj20dd@t))))))))))) (set! bj287c@bjdd8@parse-exports bjdd8@parse-exports) (set! bjdda@parse-library-name (lambda (bj20e3@spec) (let ((bj20e6@parse '#f)) (begin (set! bj20e6@parse (lambda (bj20f3@x) (let ((bj20f5@t bj20f3@x)) (let ((bj20f7@ls/false (bjd7c@syntax-dispatch bj20f5@t '(each-any)))) (if (and bj20f7@ls/false (apply (lambda (bj20f9@v*) (for-all (lambda (bj20fb@x) (let ((bj20fd@x (bje62@syntax->datum bj20fb@x))) (and (integer? bj20fd@x) (exact? bj20fd@x)))) bj20f9@v*)) bj20f7@ls/false)) (apply (lambda (bj20ff@v*) (values '() (map bje62@syntax->datum bj20ff@v*))) bj20f7@ls/false) (let ((bj2101@t bj20f5@t)) (let ((bj2103@ls/false (bjd7c@syntax-dispatch bj2101@t '(any . any)))) (if (and bj2103@ls/false (apply (lambda (bj2105@x bj2106@rest) (symbol? (bje62@syntax->datum bj2105@x))) bj2103@ls/false)) (apply (lambda (bj2109@x bj210a@rest) (call-with-values (lambda () (bj20e6@parse bj210a@rest)) (lambda (bj2111@bj210e bj2112@bj2110) (let ((bj2115@v* bj2112@bj2110) (bj2116@x* bj2111@bj210e)) (values (cons (bje62@syntax->datum bj2109@x) bj2116@x*) bj2115@v*))))) bj2103@ls/false) (let ((bj2119@t bj2101@t)) (let ((bj211b@ls/false (bjd7c@syntax-dispatch bj2119@t '()))) (if bj211b@ls/false (apply (lambda () (values '() '())) bj211b@ls/false) (let ((bj211d@t bj2119@t)) (let ((bj211f@ls/false (bjd7c@syntax-dispatch bj211d@t '_))) (if bj211f@ls/false (apply (lambda () (bje5c@syntax-violation '#f '"invalid library name" bj20e3@spec)) bj211f@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj211d@t))))))))))))))) (call-with-values (lambda () (bj20e6@parse bj20e3@spec)) (lambda (bj20eb@bj20e8 bj20ec@bj20ea) (let ((bj20ef@ver* bj20ec@bj20ea) (bj20f0@name* bj20eb@bj20e8)) (begin (if (null? bj20f0@name*) (bje5c@syntax-violation '#f '"empty library name" bj20e3@spec) (void)) (values bj20f0@name* bj20ef@ver*))))))))) (set! bj287d@bjdda@parse-library-name bjdda@parse-library-name) (set! bjddc@parse-library (lambda (bj2121@e) (let ((bj2123@t bj2121@e)) (let ((bj2125@ls/false (bjd7c@syntax-dispatch bj2123@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and bj2125@ls/false (apply (lambda (bj2127@library bj2128@name* bj2129@export bj212a@exp* bj212b@import bj212c@imp* bj212d@b*) (and (eq? (bje62@syntax->datum bj2129@export) 'export) (eq? (bje62@syntax->datum bj212b@import) 'import) (eq? (bje62@syntax->datum bj2127@library) 'library))) bj2125@ls/false)) (apply (lambda (bj2135@library bj2136@name* bj2137@export bj2138@exp* bj2139@import bj213a@imp* bj213b@b*) (values bj2136@name* bj2138@exp* bj213a@imp* bj213b@b*)) bj2125@ls/false) (let ((bj2143@t bj2123@t)) (let ((bj2145@ls/false (bjd7c@syntax-dispatch bj2143@t '_))) (if bj2145@ls/false (apply (lambda () (bje5c@syntax-violation '#f '"malformed library" bj2121@e)) bj2145@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj2143@t))))))))) (set! bj287e@bjddc@parse-library bjddc@parse-library) (set! bjdde@parse-import-spec* (let ((bj2148@idsyn? '#f) (bj214a@dup-error '#f) (bj214c@merge-substs '#f) (bj214e@exclude* '#f) (bj2150@find* '#f) (bj2152@rem* '#f) (bj2154@remove-dups '#f) (bj2156@parse-library-name '#f) (bj2158@import-library '#f) (bj215a@get-import '#f) (bj215c@add-imports! '#f)) (begin (set! bj2148@idsyn? (lambda (bj2351@x) (symbol? (bje62@syntax->datum bj2351@x)))) (set! bj214a@dup-error (lambda (bj234f@name) (bje5c@syntax-violation 'import '"two imports with different bindings" bj234f@name))) (set! bj214c@merge-substs (lambda (bj233d@s bj233e@subst) (let ((bj2342@insert-to-subst '#f)) (begin (set! bj2342@insert-to-subst (lambda (bj2343@a bj2344@subst) (let ((bj2347@name (car bj2343@a)) (bj2348@label (cdr bj2343@a))) (let ((bj234b@t (assq bj2347@name bj2344@subst))) (if bj234b@t ((lambda (bj234d@x) (if (eq? (cdr bj234d@x) bj2348@label) bj2344@subst (bj214a@dup-error bj2347@name))) bj234b@t) (cons bj2343@a bj2344@subst)))))) (if (null? bj233d@s) bj233e@subst (bj2342@insert-to-subst (car bj233d@s) (bj214c@merge-substs (cdr bj233d@s) bj233e@subst))))))) (set! bj214e@exclude* (lambda (bj230d@sym* bj230e@subst) (let ((bj2312@exclude '#f)) (begin (set! bj2312@exclude (lambda (bj232b@sym bj232c@subst) (if (null? bj232c@subst) (bje5c@syntax-violation 'import '"cannot rename unbound identifier" bj232b@sym) (if (eq? bj232b@sym (caar bj232c@subst)) (values (cdar bj232c@subst) (cdr bj232c@subst)) (let ((bj232f@a (car bj232c@subst))) (call-with-values (lambda () (bj2312@exclude bj232b@sym (cdr bj232c@subst))) (lambda (bj2335@bj2332 bj2336@bj2334) (let ((bj2339@subst bj2336@bj2334) (bj233a@old bj2335@bj2332)) (values bj233a@old (cons bj232f@a bj2339@subst)))))))))) (if (null? bj230d@sym*) (values '() bj230e@subst) (call-with-values (lambda () (bj2312@exclude (car bj230d@sym*) bj230e@subst)) (lambda (bj2317@bj2314 bj2318@bj2316) (let ((bj231b@subst bj2318@bj2316) (bj231c@old bj2317@bj2314)) (call-with-values (lambda () (bj214e@exclude* (cdr bj230d@sym*) bj231b@subst)) (lambda (bj2323@bj2320 bj2324@bj2322) (let ((bj2327@subst bj2324@bj2322) (bj2328@old* bj2323@bj2320)) (values (cons bj231c@old bj2328@old*) bj2327@subst)))))))))))) (set! bj2150@find* (lambda (bj2305@sym* bj2306@subst) (map (lambda (bj2309@x) (let ((bj230b@t (assq bj2309@x bj2306@subst))) (if bj230b@t (cdr bj230b@t) (bje5c@syntax-violation 'import '"cannot find identifier" bj2309@x)))) bj2305@sym*))) (set! bj2152@rem* (lambda (bj22fd@sym* bj22fe@subst) (let bj2303@f ((bj2301@subst bj22fe@subst)) (if (null? bj2301@subst) '() (if (memq (caar bj2301@subst) bj22fd@sym*) (bj2303@f (cdr bj2301@subst)) (cons (car bj2301@subst) (bj2303@f (cdr bj2301@subst)))))))) (set! bj2154@remove-dups (lambda (bj22fb@ls) (if (null? bj22fb@ls) '() (if (memq (car bj22fb@ls) (cdr bj22fb@ls)) (bj2154@remove-dups (cdr bj22fb@ls)) (cons (car bj22fb@ls) (bj2154@remove-dups (cdr bj22fb@ls))))))) (set! bj2156@parse-library-name (lambda (bj2213@spec) (let ((bj2216@subversion? '#f) (bj2218@subversion-pred '#f) (bj221a@version-pred '#f)) (begin (set! bj2216@subversion? (lambda (bj22f7@x) (let ((bj22f9@x (bje62@syntax->datum bj22f7@x))) (and (integer? bj22f9@x) (exact? bj22f9@x) (>= bj22f9@x '0))))) (set! bj2218@subversion-pred (lambda (bj2297@x*) (let ((bj2299@t bj2297@x*)) (let ((bj229b@ls/false (bjd7c@syntax-dispatch bj2299@t 'any))) (if (and bj229b@ls/false (apply (lambda (bj229d@n) (bj2216@subversion? bj229d@n)) bj229b@ls/false)) (apply (lambda (bj229f@n) (lambda (bj22a1@x) (= bj22a1@x (bje62@syntax->datum bj229f@n)))) bj229b@ls/false) (let ((bj22a3@t bj2299@t)) (let ((bj22a5@ls/false (bjd7c@syntax-dispatch bj22a3@t '(any . each-any)))) (if (and bj22a5@ls/false (apply (lambda (bj22a7@p? bj22a8@sub*) (eq? (bje62@syntax->datum bj22a7@p?) 'and)) bj22a5@ls/false)) (apply (lambda (bj22ab@p? bj22ac@sub*) (let ((bj22af@p* (map bj2218@subversion-pred bj22ac@sub*))) (lambda (bj22b1@x) (for-all (lambda (bj22b3@p) (bj22b3@p bj22b1@x)) bj22af@p*)))) bj22a5@ls/false) (let ((bj22b5@t bj22a3@t)) (let ((bj22b7@ls/false (bjd7c@syntax-dispatch bj22b5@t '(any . each-any)))) (if (and bj22b7@ls/false (apply (lambda (bj22b9@p? bj22ba@sub*) (eq? (bje62@syntax->datum bj22b9@p?) 'or)) bj22b7@ls/false)) (apply (lambda (bj22bd@p? bj22be@sub*) (let ((bj22c1@p* (map bj2218@subversion-pred bj22be@sub*))) (lambda (bj22c3@x) (exists (lambda (bj22c5@p) (bj22c5@p bj22c3@x)) bj22c1@p*)))) bj22b7@ls/false) (let ((bj22c7@t bj22b5@t)) (let ((bj22c9@ls/false (bjd7c@syntax-dispatch bj22c7@t '(any any)))) (if (and bj22c9@ls/false (apply (lambda (bj22cb@p? bj22cc@sub) (eq? (bje62@syntax->datum bj22cb@p?) 'not)) bj22c9@ls/false)) (apply (lambda (bj22cf@p? bj22d0@sub) (let ((bj22d3@p (bj2218@subversion-pred bj22d0@sub))) (lambda (bj22d5@x) (not (bj22d3@p bj22d5@x))))) bj22c9@ls/false) (let ((bj22d7@t bj22c7@t)) (let ((bj22d9@ls/false (bjd7c@syntax-dispatch bj22d7@t '(any any)))) (if (and bj22d9@ls/false (apply (lambda (bj22db@p? bj22dc@n) (and (eq? (bje62@syntax->datum bj22db@p?) '<=) (bj2216@subversion? bj22dc@n))) bj22d9@ls/false)) (apply (lambda (bj22df@p? bj22e0@n) (lambda (bj22e3@x) (<= bj22e3@x (bje62@syntax->datum bj22e0@n)))) bj22d9@ls/false) (let ((bj22e5@t bj22d7@t)) (let ((bj22e7@ls/false (bjd7c@syntax-dispatch bj22e5@t '(any any)))) (if (and bj22e7@ls/false (apply (lambda (bj22e9@p? bj22ea@n) (and (eq? (bje62@syntax->datum bj22e9@p?) '>=) (bj2216@subversion? bj22ea@n))) bj22e7@ls/false)) (apply (lambda (bj22ed@p? bj22ee@n) (lambda (bj22f1@x) (>= bj22f1@x (bje62@syntax->datum bj22ee@n)))) bj22e7@ls/false) (let ((bj22f3@t bj22e5@t)) (let ((bj22f5@ls/false (bjd7c@syntax-dispatch bj22f3@t '_))) (if bj22f5@ls/false (apply (lambda () (bje5c@syntax-violation 'import '"invalid sub-version spec" bj2213@spec bj2297@x*)) bj22f5@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj22f3@t)))))))))))))))))))))))) (set! bj221a@version-pred (lambda (bj2247@x*) (let ((bj2249@t bj2247@x*)) (let ((bj224b@ls/false (bjd7c@syntax-dispatch bj2249@t '()))) (if bj224b@ls/false (apply (lambda () (lambda (bj224d@x) '#t)) bj224b@ls/false) (let ((bj224f@t bj2249@t)) (let ((bj2251@ls/false (bjd7c@syntax-dispatch bj224f@t '(any . each-any)))) (if (and bj2251@ls/false (apply (lambda (bj2253@c bj2254@ver*) (eq? (bje62@syntax->datum bj2253@c) 'and)) bj2251@ls/false)) (apply (lambda (bj2257@c bj2258@ver*) (let ((bj225b@p* (map bj221a@version-pred bj2258@ver*))) (lambda (bj225d@x) (for-all (lambda (bj225f@p) (bj225f@p bj225d@x)) bj225b@p*)))) bj2251@ls/false) (let ((bj2261@t bj224f@t)) (let ((bj2263@ls/false (bjd7c@syntax-dispatch bj2261@t '(any . each-any)))) (if (and bj2263@ls/false (apply (lambda (bj2265@c bj2266@ver*) (eq? (bje62@syntax->datum bj2265@c) 'or)) bj2263@ls/false)) (apply (lambda (bj2269@c bj226a@ver*) (let ((bj226d@p* (map bj221a@version-pred bj226a@ver*))) (lambda (bj226f@x) (exists (lambda (bj2271@p) (bj2271@p bj226f@x)) bj226d@p*)))) bj2263@ls/false) (let ((bj2273@t bj2261@t)) (let ((bj2275@ls/false (bjd7c@syntax-dispatch bj2273@t '(any any)))) (if (and bj2275@ls/false (apply (lambda (bj2277@c bj2278@ver) (eq? (bje62@syntax->datum bj2277@c) 'not)) bj2275@ls/false)) (apply (lambda (bj227b@c bj227c@ver) (let ((bj227f@p (bj221a@version-pred bj227c@ver))) (lambda (bj2281@x) (not (bj227f@p bj2281@x))))) bj2275@ls/false) (let ((bj2283@t bj2273@t)) (let ((bj2285@ls/false (bjd7c@syntax-dispatch bj2283@t 'each-any))) (if bj2285@ls/false (apply (lambda (bj2287@sub*) (let ((bj2289@p* (map bj2218@subversion-pred bj2287@sub*))) (lambda (bj228b@x) (let bj2291@f ((bj228d@p* bj2289@p*) (bj228e@x bj228b@x)) (if (null? bj228d@p*) '#t (if (null? bj228e@x) '#f (and ((car bj228d@p*) (car bj228e@x)) (bj2291@f (cdr bj228d@p*) (cdr bj228e@x))))))))) bj2285@ls/false) (let ((bj2293@t bj2283@t)) (let ((bj2295@ls/false (bjd7c@syntax-dispatch bj2293@t '_))) (if bj2295@ls/false (apply (lambda () (bje5c@syntax-violation 'import '"invalid version spec" bj2213@spec bj2247@x*)) bj2295@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj2293@t))))))))))))))))))))) (let bj221d@f ((bj221b@x bj2213@spec)) (let ((bj221f@t bj221b@x)) (let ((bj2221@ls/false (bjd7c@syntax-dispatch bj221f@t '(each-any)))) (if bj2221@ls/false (apply (lambda (bj2223@version-spec*) (values '() (bj221a@version-pred bj2223@version-spec*))) bj2221@ls/false) (let ((bj2225@t bj221f@t)) (let ((bj2227@ls/false (bjd7c@syntax-dispatch bj2225@t '(any . any)))) (if (and bj2227@ls/false (apply (lambda (bj2229@x bj222a@x*) (bj2148@idsyn? bj2229@x)) bj2227@ls/false)) (apply (lambda (bj222d@x bj222e@x*) (call-with-values (lambda () (bj221d@f bj222e@x*)) (lambda (bj2235@bj2232 bj2236@bj2234) (let ((bj2239@pred bj2236@bj2234) (bj223a@name bj2235@bj2232)) (values (cons (bje62@syntax->datum bj222d@x) bj223a@name) bj2239@pred))))) bj2227@ls/false) (let ((bj223d@t bj2225@t)) (let ((bj223f@ls/false (bjd7c@syntax-dispatch bj223d@t '()))) (if bj223f@ls/false (apply (lambda () (values '() (lambda (bj2241@x) '#t))) bj223f@ls/false) (let ((bj2243@t bj223d@t)) (let ((bj2245@ls/false (bjd7c@syntax-dispatch bj2243@t '_))) (if bj2245@ls/false (apply (lambda () (bje5c@syntax-violation '#f '"invalid import spec" bj2213@spec)) bj2245@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj2243@t)))))))))))))))))) (set! bj2158@import-library (lambda (bj2203@spec*) (call-with-values (lambda () (bj2156@parse-library-name bj2203@spec*)) (lambda (bj2209@bj2206 bj220a@bj2208) (let ((bj220d@pred bj220a@bj2208) (bj220e@name bj2209@bj2206)) (begin (if (null? bj220e@name) (bje5c@syntax-violation 'import '"empty library name" bj2203@spec*) (void)) (let ((bj2211@lib (bj984@bj7cb@find-library-by-name bj220e@name))) (begin (if (not bj2211@lib) (bje5c@syntax-violation 'import '"cannot find library with required name" bj220e@name) (void)) (if (not (bj220d@pred (bj95e@bj77f@library-version bj2211@lib))) (bje5c@syntax-violation 'import '"library does not satisfy version specification" bj2203@spec* bj2211@lib) (void)) ((bjde8@imp-collector) bj2211@lib) (bj966@bj78f@library-subst bj2211@lib))))))))) (set! bj215a@get-import (lambda (bj2175@spec) (let ((bj2177@t bj2175@spec)) (let ((bj2179@ls/false (bjd7c@syntax-dispatch bj2177@t '(any . each-any)))) (if (and bj2179@ls/false (apply (lambda (bj217b@x bj217c@x*) (not (memq (bje62@syntax->datum bj217b@x) '(for rename except only prefix library)))) bj2179@ls/false)) (apply (lambda (bj217f@x bj2180@x*) (bj2158@import-library (cons bj217f@x bj2180@x*))) bj2179@ls/false) (let ((bj2183@t bj2177@t)) (let ((bj2185@ls/false (bjd7c@syntax-dispatch bj2183@t '(any any . #(each (any any)))))) (if (and bj2185@ls/false (apply (lambda (bj2187@rename bj2188@isp bj2189@old* bj218a@new*) (and (eq? (bje62@syntax->datum bj2187@rename) 'rename) (for-all bj2148@idsyn? bj2189@old*) (for-all bj2148@idsyn? bj218a@new*))) bj2185@ls/false)) (apply (lambda (bj218f@rename bj2190@isp bj2191@old* bj2192@new*) (let ((bj2197@subst (bj215a@get-import bj2190@isp)) (bj2198@old* (map bje62@syntax->datum bj2191@old*)) (bj2199@new* (map bje62@syntax->datum bj2192@new*))) (let ((bj219d@old-label* (bj2150@find* bj2198@old* bj2197@subst))) (let ((bj219f@subst (bj2152@rem* bj2198@old* bj2197@subst))) (bj214c@merge-substs (map cons bj2199@new* bj219d@old-label*) bj219f@subst))))) bj2185@ls/false) (let ((bj21a1@t bj2183@t)) (let ((bj21a3@ls/false (bjd7c@syntax-dispatch bj21a1@t '(any any . each-any)))) (if (and bj21a3@ls/false (apply (lambda (bj21a5@except bj21a6@isp bj21a7@sym*) (and (eq? (bje62@syntax->datum bj21a5@except) 'except) (for-all bj2148@idsyn? bj21a7@sym*))) bj21a3@ls/false)) (apply (lambda (bj21ab@except bj21ac@isp bj21ad@sym*) (let ((bj21b1@subst (bj215a@get-import bj21ac@isp))) (bj2152@rem* (map bje62@syntax->datum bj21ad@sym*) bj21b1@subst))) bj21a3@ls/false) (let ((bj21b3@t bj21a1@t)) (let ((bj21b5@ls/false (bjd7c@syntax-dispatch bj21b3@t '(any any . each-any)))) (if (and bj21b5@ls/false (apply (lambda (bj21b7@only bj21b8@isp bj21b9@sym*) (and (eq? (bje62@syntax->datum bj21b7@only) 'only) (for-all bj2148@idsyn? bj21b9@sym*))) bj21b5@ls/false)) (apply (lambda (bj21bd@only bj21be@isp bj21bf@sym*) (let ((bj21c3@subst (bj215a@get-import bj21be@isp)) (bj21c4@sym* (map bje62@syntax->datum bj21bf@sym*))) (let ((bj21c7@sym* (bj2154@remove-dups bj21c4@sym*))) (let ((bj21c9@lab* (bj2150@find* bj21c7@sym* bj21c3@subst))) (map cons bj21c7@sym* bj21c9@lab*))))) bj21b5@ls/false) (let ((bj21cb@t bj21b3@t)) (let ((bj21cd@ls/false (bjd7c@syntax-dispatch bj21cb@t '(any any any)))) (if (and bj21cd@ls/false (apply (lambda (bj21cf@prefix bj21d0@isp bj21d1@p) (and (eq? (bje62@syntax->datum bj21cf@prefix) 'prefix) (bj2148@idsyn? bj21d1@p))) bj21cd@ls/false)) (apply (lambda (bj21d5@prefix bj21d6@isp bj21d7@p) (let ((bj21db@subst (bj215a@get-import bj21d6@isp)) (bj21dc@prefix (symbol->string (bje62@syntax->datum bj21d7@p)))) (map (lambda (bj21df@x) (cons (string->symbol (string-append bj21dc@prefix (symbol->string (car bj21df@x)))) (cdr bj21df@x))) bj21db@subst))) bj21cd@ls/false) (let ((bj21e1@t bj21cb@t)) (let ((bj21e3@ls/false (bjd7c@syntax-dispatch bj21e1@t '(any each-any)))) (if (and bj21e3@ls/false (apply (lambda (bj21e5@library bj21e6@spec*) (eq? (bje62@syntax->datum bj21e5@library) 'library)) bj21e3@ls/false)) (apply (lambda (bj21e9@library bj21ea@spec*) (bj2158@import-library bj21ea@spec*)) bj21e3@ls/false) (let ((bj21ed@t bj21e1@t)) (let ((bj21ef@ls/false (bjd7c@syntax-dispatch bj21ed@t '(any any . any)))) (if (and bj21ef@ls/false (apply (lambda (bj21f1@for bj21f2@isp bj21f3@rest) (eq? (bje62@syntax->datum bj21f1@for) 'for)) bj21ef@ls/false)) (apply (lambda (bj21f7@for bj21f8@isp bj21f9@rest) (bj215a@get-import bj21f8@isp)) bj21ef@ls/false) (let ((bj21fd@t bj21ed@t)) (let ((bj21ff@ls/false (bjd7c@syntax-dispatch bj21fd@t 'any))) (if bj21ff@ls/false (apply (lambda (bj2201@spec) (bje5c@syntax-violation 'import '"invalid import spec" bj2201@spec)) bj21ff@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj21fd@t))))))))))))))))))))))))))) (set! bj215c@add-imports! (lambda (bj2165@imp bj2166@h) (let ((bj2169@subst (bj215a@get-import bj2165@imp))) (for-each (lambda (bj216b@x) (let ((bj216d@name (car bj216b@x)) (bj216e@label (cdr bj216b@x))) (let ((bj2171@t (hashtable-ref bj2166@h bj216d@name '#f))) (if bj2171@t ((lambda (bj2173@l) (if (not (eq? bj2173@l bj216e@label)) (bj214a@dup-error bj216d@name) (void))) bj2171@t) (hashtable-set! bj2166@h bj216d@name bj216e@label))))) bj2169@subst)))) (lambda (bj215d@imp*) (let bj2163@f ((bj215f@imp* bj215d@imp*) (bj2160@h (make-eq-hashtable))) (if (null? bj215f@imp*) (hashtable-entries bj2160@h) (begin (bj215c@add-imports! (car bj215f@imp*) bj2160@h) (bj2163@f (cdr bj215f@imp*) bj2160@h)))))))) (set! bj287f@bjdde@parse-import-spec* bjdde@parse-import-spec*) (set! bjde0@make-top-rib (lambda (bj2353@names bj2354@labels) (let ((bj2357@rib (bjb29@make-empty-rib))) (begin (vector-for-each (lambda (bj2359@name bj235a@label) (begin (if (not (symbol? bj2359@name)) (error 'make-top-rib '"BUG: not a symbol" bj2359@name) (void)) (bjb2d@extend-rib/nc! bj2357@rib (make-simple-struct 'stx '5 (list bj2359@name bjaf9@top-mark* '() '())) bj235a@label))) bj2353@names bj2354@labels) bj2357@rib)))) (set! bj2880@bjde0@make-top-rib bjde0@make-top-rib) (set! bjde2@make-collector (lambda () (let ((bj235d@ls '())) (lambda bj2361 (let ((bj2362 (length bj2361))) (if (= bj2362 '0) (apply (lambda () bj235d@ls) bj2361) (if (= bj2362 '1) (apply (lambda (bj235f@x) (set! bj235d@ls (bjaf2@set-cons bj235f@x bj235d@ls))) bj2361) (error 'apply '"invalid arg count")))))))) (set! bj2881@bjde2@make-collector bjde2@make-collector) (set! bjde4@inv-collector (bj6bf@bj59d@make-parameter (lambda bj2363@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (bj2365@x) (begin (if (not (procedure? bj2365@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" bj2365@x) (void)) bj2365@x)))) (set! bj2882@bjde4@inv-collector bjde4@inv-collector) (set! bjde6@vis-collector (bj6bf@bj59d@make-parameter (lambda bj2367@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (bj2369@x) (begin (if (not (procedure? bj2369@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" bj2369@x) (void)) bj2369@x)))) (set! bj2883@bjde6@vis-collector bjde6@vis-collector) (set! bjde8@imp-collector (bj6bf@bj59d@make-parameter (lambda bj236b@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (bj236d@x) (begin (if (not (procedure? bj236d@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" bj236d@x) (void)) bj236d@x)))) (set! bj2884@bjde8@imp-collector bjde8@imp-collector) (set! bjdea@chi-library-internal (lambda (bj236f@e* bj2370@rib bj2371@top?) (call-with-values (lambda () (bjdd4@chi-body* bj236f@e* '() '() '() '() '() '() '() bj2370@rib bj2371@top?)) (lambda (bj2385@bj2376 bj2386@bj2378 bj2387@bj237a bj2388@bj237c bj2389@bj237e bj238a@bj2380 bj238b@bj2382 bj238c@bj2384) (let ((bj2395@exp* bj238c@bj2384) (bj2396@_kwd* bj238b@bj2382) (bj2397@mod** bj238a@bj2380) (bj2398@rhs* bj2389@bj237e) (bj2399@lex* bj2388@bj237c) (bj239a@mr bj2387@bj237a) (bj239b@r bj2386@bj2378) (bj239c@e* bj2385@bj2376)) (values (append (apply append (reverse bj2397@mod**)) bj239c@e*) bj239b@r bj239a@mr (reverse bj2399@lex*) (reverse bj2398@rhs*) bj2395@exp*)))))) (set! bj2885@bjdea@chi-library-internal bjdea@chi-library-internal) (set! bjdec@chi-interaction-expr (lambda (bj23a5@e bj23a6@rib bj23a7@r) (call-with-values (lambda () (bjdd4@chi-body* (list bj23a5@e) bj23a7@r bj23a7@r '() '() '() '() '() bj23a6@rib '#t)) (lambda (bj23bb@bj23ac bj23bc@bj23ae bj23bd@bj23b0 bj23be@bj23b2 bj23bf@bj23b4 bj23c0@bj23b6 bj23c1@bj23b8 bj23c2@bj23ba) (let ((bj23cb@_exp* bj23c2@bj23ba) (bj23cc@_kwd* bj23c1@bj23b8) (bj23cd@mod** bj23c0@bj23b6) (bj23ce@rhs* bj23bf@bj23b4) (bj23cf@lex* bj23be@bj23b2) (bj23d0@mr bj23bd@bj23b0) (bj23d1@r bj23bc@bj23ae) (bj23d2@e* bj23bb@bj23ac)) (let ((bj23db@e* (bjdac@expand-interaction-rhs*/init* (reverse bj23cf@lex*) (reverse bj23ce@rhs*) (append (apply append (reverse bj23cd@mod**)) bj23d2@e*) bj23d1@r bj23d0@mr))) (let ((bj23dd@e (if (null? bj23db@e*) (bjadb@bja36@build-void) (if (null? (cdr bj23db@e*)) (car bj23db@e*) (bjada@bja34@build-sequence '#f bj23db@e*))))) (values bj23dd@e bj23d1@r)))))))) (set! bj2886@bjdec@chi-interaction-expr bjdec@chi-interaction-expr) (set! bjdee@library-body-expander (lambda (bj23df@name bj23e0@main-exp* bj23e1@imp* bj23e2@b* bj23e3@top?) (let ((bj23ea@itc '#f)) (begin (set! bj23ea@itc (bjde2@make-collector)) (let ((bj23f3@bj23ec bjde8@imp-collector) (bj23f4@bj23ee bje6c@top-level-context) (bj23f5@bj23f0 bj23ea@itc) (bj23f6@bj23f2 '#f)) (let ((bj23fb@swap (lambda () (begin (let ((bj23fd@t (bj23f3@bj23ec))) (begin (bj23f3@bj23ec bj23f5@bj23f0) (set! bj23f5@bj23f0 bj23fd@t))) (let ((bj23ff@t (bj23f4@bj23ee))) (begin (bj23f4@bj23ee bj23f6@bj23f2) (set! bj23f6@bj23f2 bj23ff@t))))))) (dynamic-wind bj23fb@swap (lambda () (call-with-values (lambda () (bjdde@parse-import-spec* bj23e1@imp*)) (lambda (bj2405@bj2402 bj2406@bj2404) (let ((bj2409@subst-labels bj2406@bj2404) (bj240a@subst-names bj2405@bj2402)) (let ((bj240d@rib (bjde0@make-top-rib bj240a@subst-names bj2409@subst-labels))) (let ((bj2410@wrap '#f)) (begin (set! bj2410@wrap (lambda (bj248b@x) (make-simple-struct 'stx '5 (list bj248b@x bjaf9@top-mark* (list bj240d@rib) '())))) (let ((bj2411@b* (map bj2410@wrap bj23e2@b*)) (bj2412@main-exp* (map bj2410@wrap bj23e0@main-exp*)) (bj2413@rtc (bjde2@make-collector)) (bj2414@vtc (bjde2@make-collector))) (let ((bj2421@bj241a bjde4@inv-collector) (bj2422@bj241c bjde6@vis-collector) (bj2423@bj241e bj2413@rtc) (bj2424@bj2420 bj2414@vtc)) (let ((bj2429@swap (lambda () (begin (let ((bj242b@t (bj2421@bj241a))) (begin (bj2421@bj241a bj2423@bj241e) (set! bj2423@bj241e bj242b@t))) (let ((bj242d@t (bj2422@bj241c))) (begin (bj2422@bj241c bj2424@bj2420) (set! bj2424@bj2420 bj242d@t))))))) (dynamic-wind bj2429@swap (lambda () (call-with-values (lambda () (bjdea@chi-library-internal bj2411@b* bj240d@rib bj23e3@top?)) (lambda (bj243b@bj2430 bj243c@bj2432 bj243d@bj2434 bj243e@bj2436 bj243f@bj2438 bj2440@bj243a) (let ((bj2447@internal-exp* bj2440@bj243a) (bj2448@rhs* bj243f@bj2438) (bj2449@lex* bj243e@bj2436) (bj244a@mr bj243d@bj2434) (bj244b@r bj243c@bj2432) (bj244c@init* bj243b@bj2430)) (call-with-values (lambda () (bjdd8@parse-exports (append bj2412@main-exp* bj2447@internal-exp*))) (lambda (bj2457@bj2454 bj2458@bj2456) (let ((bj245b@exp-id* bj2458@bj2456) (bj245c@exp-name* bj2457@bj2454)) (begin (bjb31@seal-rib! bj240d@rib) (let ((bj245f@init* (bjd9a@chi-expr* bj244c@init* bj244b@r bj244a@mr))) (let ((bj2461@rhs* (bjdae@chi-rhs* bj2448@rhs* bj244b@r bj244a@mr))) (begin (bjb33@unseal-rib! bj240d@rib) (let ((bj2463@loc* (map bjaff@gen-global bj2449@lex*)) (bj2464@export-subst (bje46@make-export-subst bj245c@exp-name* bj245b@exp-id*))) (let ((bj2468@errstr '#f)) (begin (set! bj2468@errstr '"attempt to export mutated variable") (call-with-values (lambda () (bje48@make-export-env/macros bj2449@lex* bj2463@loc* bj244b@r)) (lambda (bj246f@bj246a bj2470@bj246c bj2471@bj246e) (let ((bj2475@macro* bj2471@bj246e) (bj2476@global* bj2470@bj246c) (bj2477@export-env bj246f@bj246a)) (begin (for-each (lambda (bj247b@s) (let ((bj247d@name (car bj247b@s)) (bj247e@label (cdr bj247b@s))) (let ((bj2481@p (assq bj247e@label bj2477@export-env))) (if bj2481@p (let ((bj2483@b (cdr bj2481@p))) (let ((bj2485@type (car bj2483@b))) (if (eq? bj2485@type 'mutable) (bje5c@syntax-violation 'export bj2468@errstr bj247d@name) (void)))) (void))))) bj2464@export-subst) (let ((bj2487@invoke-body (bjae0@bja40@build-library-letrec* '#f bj23df@name bj2449@lex* bj2463@loc* bj2461@rhs* (if (null? bj245f@init*) (bjadb@bja36@build-void) (bjada@bja34@build-sequence '#f bj245f@init*)))) (bj2488@invoke-definitions (map bjad7@bj993@build-global-define (map cdr bj2476@global*)))) (values (bj23ea@itc) (bj2413@rtc) (bj2414@vtc) (bjada@bja34@build-sequence '#f (append bj2488@invoke-definitions (list bj2487@invoke-body))) bj2475@macro* bj2464@export-subst bj2477@export-env)))))))))))))))))))) bj2429@swap))))))))))) bj23fb@swap))))))) (set! bj2887@bjdee@library-body-expander bjdee@library-body-expander) (set! bjdf0@core-library-expander (lambda (bj248d@e bj248e@verify-name) (call-with-values (lambda () (bjddc@parse-library bj248d@e)) (lambda (bj2499@bj2492 bj249a@bj2494 bj249b@bj2496 bj249c@bj2498) (let ((bj24a1@b* bj249c@bj2498) (bj24a2@imp* bj249b@bj2496) (bj24a3@exp* bj249a@bj2494) (bj24a4@name* bj2499@bj2492)) (call-with-values (lambda () (bjdda@parse-library-name bj24a4@name*)) (lambda (bj24ad@bj24aa bj24ae@bj24ac) (let ((bj24b1@ver bj24ae@bj24ac) (bj24b2@name bj24ad@bj24aa)) (begin (bj248e@verify-name bj24b2@name) (call-with-values (lambda () (bjdee@library-body-expander bj24b2@name bj24a3@exp* bj24a2@imp* bj24a1@b* '#f)) (lambda (bj24c3@bj24b6 bj24c4@bj24b8 bj24c5@bj24ba bj24c6@bj24bc bj24c7@bj24be bj24c8@bj24c0 bj24c9@bj24c2) (let ((bj24d1@export-env bj24c9@bj24c2) (bj24d2@export-subst bj24c8@bj24c0) (bj24d3@visit-code bj24c7@bj24be) (bj24d4@invoke-code bj24c6@bj24bc) (bj24d5@visit-req* bj24c5@bj24ba) (bj24d6@invoke-req* bj24c4@bj24b8) (bj24d7@imp* bj24c3@bj24b6)) (values bj24b2@name bj24b1@ver bj24d7@imp* bj24d6@invoke-req* bj24d5@visit-req* bj24d4@invoke-code bj24d3@visit-code bj24d2@export-subst bj24d1@export-env))))))))))))) (set! bj2888@bjdf0@core-library-expander bjdf0@core-library-expander) (set! bjdf2@parse-top-level-program (lambda (bj24df@e*) (let ((bj24e1@t bj24df@e*)) (let ((bj24e3@ls/false (bjd7c@syntax-dispatch bj24e1@t '((any . each-any) . each-any)))) (if (and bj24e3@ls/false (apply (lambda (bj24e5@import bj24e6@imp* bj24e7@b*) (eq? (bje62@syntax->datum bj24e5@import) 'import)) bj24e3@ls/false)) (apply (lambda (bj24eb@import bj24ec@imp* bj24ed@b*) (values bj24ec@imp* bj24ed@b*)) bj24e3@ls/false) (let ((bj24f1@t bj24e1@t)) (let ((bj24f3@ls/false (bjd7c@syntax-dispatch bj24f1@t '((any . any) . any)))) (if (and bj24f3@ls/false (apply (lambda (bj24f5@import bj24f6@x bj24f7@y) (eq? (bje62@syntax->datum bj24f5@import) 'import)) bj24f3@ls/false)) (apply (lambda (bj24fb@import bj24fc@x bj24fd@y) (bje5c@syntax-violation 'expander '"invalid syntax of top-level program" (bjb6f@syntax-car bj24df@e*))) bj24f3@ls/false) (let ((bj2501@t bj24f1@t)) (let ((bj2503@ls/false (bjd7c@syntax-dispatch bj2501@t '_))) (if bj2503@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) bj2503@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj2501@t)))))))))))) (set! bj2889@bjdf2@parse-top-level-program bjdf2@parse-top-level-program) (set! bjdf4@top-level-expander (lambda (bj2505@e*) (call-with-values (lambda () (bjdf2@parse-top-level-program bj2505@e*)) (lambda (bj250b@bj2508 bj250c@bj250a) (let ((bj250f@b* bj250c@bj250a) (bj2510@imp* bj250b@bj2508)) (call-with-values (lambda () (bjdee@library-body-expander '() '() bj2510@imp* bj250f@b* '#t)) (lambda (bj2521@bj2514 bj2522@bj2516 bj2523@bj2518 bj2524@bj251a bj2525@bj251c bj2526@bj251e bj2527@bj2520) (let ((bj252f@export-env bj2527@bj2520) (bj2530@export-subst bj2526@bj251e) (bj2531@visit-code bj2525@bj251c) (bj2532@invoke-code bj2524@bj251a) (bj2533@visit-req* bj2523@bj2518) (bj2534@invoke-req* bj2522@bj2516) (bj2535@imp* bj2521@bj2514)) (values bj2534@invoke-req* bj2532@invoke-code))))))))) (set! bj288a@bjdf4@top-level-expander bjdf4@top-level-expander) (set! bjdf6@rp (bj6bc@bj597@make-record-printer 'env (lambda (bj253d@x bj253e@p bj253f@wr) (display '"#<environment>" bj253e@p)))) (set! bj288b@bjdf6@rp bjdf6@rp) (set! bje00@env? (lambda (bj2543@x) (and (simple-struct? bj2543@x) (eq? (simple-struct-name bj2543@x) 'env)))) (set! bj288c@bje00@env? bje00@env?) (set! bje02@env-names (lambda (bj2545@x) (simple-struct-ref bj2545@x '0))) (set! bj288d@bje02@env-names bje02@env-names) (set! bje04@set-env-names! (lambda (bj2547@x bj2548@val) (simple-struct-set! bj2547@x '0 bj2548@val))) (set! bj288e@bje04@set-env-names! bje04@set-env-names!) (set! bje06@env-labels (lambda (bj254b@x) (simple-struct-ref bj254b@x '1))) (set! bj288f@bje06@env-labels bje06@env-labels) (set! bje08@set-env-labels! (lambda (bj254d@x bj254e@val) (simple-struct-set! bj254d@x '1 bj254e@val))) (set! bj2890@bje08@set-env-labels! bje08@set-env-labels!) (set! bje0a@env-itc (lambda (bj2551@x) (simple-struct-ref bj2551@x '2))) (set! bj2891@bje0a@env-itc bje0a@env-itc) (set! bje0c@set-env-itc! (lambda (bj2553@x bj2554@val) (simple-struct-set! bj2553@x '2 bj2554@val))) (set! bj2892@bje0c@set-env-itc! bje0c@set-env-itc!) (set! bje0e@dummy '3) (set! bj2893@bje0e@dummy bje0e@dummy) (set! bje10@rp (bj6bc@bj597@make-record-printer 'interaction-env (lambda (bj2557@x bj2558@p bj2559@wr) (display '"#<environment>" bj2558@p)))) (set! bj2894@bje10@rp bje10@rp) (set! bje1a@interaction-env? (lambda (bj255d@x) (and (simple-struct? bj255d@x) (eq? (simple-struct-name bj255d@x) 'interaction-env)))) (set! bj2895@bje1a@interaction-env? bje1a@interaction-env?) (set! bje1c@interaction-env-rib (lambda (bj255f@x) (simple-struct-ref bj255f@x '0))) (set! bj2896@bje1c@interaction-env-rib bje1c@interaction-env-rib) (set! bje1e@set-interaction-env-rib! (lambda (bj2561@x bj2562@val) (simple-struct-set! bj2561@x '0 bj2562@val))) (set! bj2897@bje1e@set-interaction-env-rib! bje1e@set-interaction-env-rib!) (set! bje20@interaction-env-r (lambda (bj2565@x) (simple-struct-ref bj2565@x '1))) (set! bj2898@bje20@interaction-env-r bje20@interaction-env-r) (set! bje22@set-interaction-env-r! (lambda (bj2567@x bj2568@val) (simple-struct-set! bj2567@x '1 bj2568@val))) (set! bj2899@bje22@set-interaction-env-r! bje22@set-interaction-env-r!) (set! bje24@interaction-env-locs (lambda (bj256b@x) (simple-struct-ref bj256b@x '2))) (set! bj289a@bje24@interaction-env-locs bje24@interaction-env-locs) (set! bje26@set-interaction-env-locs! (lambda (bj256d@x bj256e@val) (simple-struct-set! bj256d@x '2 bj256e@val))) (set! bj289b@bje26@set-interaction-env-locs! bje26@set-interaction-env-locs!) (set! bje28@dummy '3) (set! bj289c@bje28@dummy bje28@dummy) (set! bje2a@interaction-environment-symbols (lambda () (bje32@environment-symbols (bje6a@interaction-environment)))) (set! bj289d@bje2a@interaction-environment-symbols bje2a@interaction-environment-symbols) (set! bje2c@environment-bindings (lambda (bj2571@e) (vector->list (vector-map (lambda (bj2573@name bj2574@label) (bje2e@parse-binding (cons bj2573@name (bj98a@bj7d7@imported-label->binding bj2574@label)))) (bje02@env-names bj2571@e) (bje06@env-labels bj2571@e))))) (set! bj289e@bje2c@environment-bindings bje2c@environment-bindings) (set! bje2e@parse-binding (lambda (bj2577@b) (cons (car bj2577@b) (let ((bj2579@t (cadr bj2577@b))) (if (memv bj2579@t '(core-prim global)) 'procedure (if (memv bj2579@t '(core-macro macro global-macro)) 'syntax (if (memv bj2579@t '($core-rtd)) 'record (if (eq? (car bj2577@b) (cadr bj2577@b)) 'syntax 'unknown)))))))) (set! bj289f@bje2e@parse-binding bje2e@parse-binding) (set! bje30@environment? (lambda (bj257b@x) (or (bje00@env? bj257b@x) (bje1a@interaction-env? bj257b@x)))) (set! bj28a0@bje30@environment? bje30@environment?) (set! bje32@environment-symbols (lambda (bj257d@x) (if (bje00@env? bj257d@x) (vector->list (bje02@env-names bj257d@x)) (if (bje1a@interaction-env? bj257d@x) (map values (bjb13@rib-sym* (bje1c@interaction-env-rib bj257d@x))) (assertion-violation 'environment-symbols '"not an environment" bj257d@x))))) (set! bj28a1@bje32@environment-symbols bje32@environment-symbols) (set! bje34@environment (lambda bj257f@imp* (let ((bj2581@itc (bjde2@make-collector))) (let ((bj2587@bj2584 bjde8@imp-collector) (bj2588@bj2586 bj2581@itc)) (let ((bj258b@swap (lambda () (let ((bj258d@t (bj2587@bj2584))) (begin (bj2587@bj2584 bj2588@bj2586) (set! bj2588@bj2586 bj258d@t)))))) (dynamic-wind bj258b@swap (lambda () (call-with-values (lambda () (bjdde@parse-import-spec* bj257f@imp*)) (lambda (bj2593@bj2590 bj2594@bj2592) (let ((bj2597@subst-labels bj2594@bj2592) (bj2598@subst-names bj2593@bj2590)) (make-simple-struct 'env '4 (list bj2598@subst-names bj2597@subst-labels bj2581@itc)))))) bj258b@swap)))))) (set! bj28a2@bje34@environment bje34@environment) (set! bje36@null-environment (lambda (bj259b@n) (begin (if (not (eqv? bj259b@n '5)) (assertion-violation 'null-environment '"not 5" bj259b@n) (void)) (bje34@environment '(psyntax null-environment-5))))) (set! bj28a3@bje36@null-environment bje36@null-environment) (set! bje38@scheme-report-environment (lambda (bj259d@n) (begin (if (not (eqv? bj259d@n '5)) (assertion-violation 'scheme-report-environment '"not 5" bj259d@n) (void)) (bje34@environment '(psyntax scheme-report-environment-5))))) (set! bj28a4@bje38@scheme-report-environment bje38@scheme-report-environment) (set! bje3a@expand (lambda (bj259f@x bj25a0@env) (if (bje00@env? bj25a0@env) (let ((bj25a3@rib (bjde0@make-top-rib (bje02@env-names bj25a0@env) (bje06@env-labels bj25a0@env)))) (let ((bj25a5@x (make-simple-struct 'stx '5 (list bj259f@x bjaf9@top-mark* (list bj25a3@rib) '()))) (bj25a6@itc (bje0a@env-itc bj25a0@env)) (bj25a7@rtc (bjde2@make-collector)) (bj25a8@vtc (bjde2@make-collector))) (let ((bj25ad@x (let ((bj25bf@bj25b0 bje6c@top-level-context) (bj25c0@bj25b2 bjde4@inv-collector) (bj25c1@bj25b4 bjde6@vis-collector) (bj25c2@bj25b6 bjde8@imp-collector) (bj25c3@bj25b8 '#f) (bj25c4@bj25ba bj25a7@rtc) (bj25c5@bj25bc bj25a8@vtc) (bj25c6@bj25be bj25a6@itc)) (let ((bj25cf@swap (lambda () (begin (let ((bj25d1@t (bj25bf@bj25b0))) (begin (bj25bf@bj25b0 bj25c3@bj25b8) (set! bj25c3@bj25b8 bj25d1@t))) (let ((bj25d3@t (bj25c0@bj25b2))) (begin (bj25c0@bj25b2 bj25c4@bj25ba) (set! bj25c4@bj25ba bj25d3@t))) (let ((bj25d5@t (bj25c1@bj25b4))) (begin (bj25c1@bj25b4 bj25c5@bj25bc) (set! bj25c5@bj25bc bj25d5@t))) (let ((bj25d7@t (bj25c2@bj25b6))) (begin (bj25c2@bj25b6 bj25c6@bj25be) (set! bj25c6@bj25be bj25d7@t))))))) (dynamic-wind bj25cf@swap (lambda () (bjd9e@chi-expr bj25a5@x '() '())) bj25cf@swap))))) (begin (bjb31@seal-rib! bj25a3@rib) (values bj25ad@x (bj25a7@rtc)))))) (if (bje1a@interaction-env? bj25a0@env) (let ((bj25d9@rib (bje1c@interaction-env-rib bj25a0@env)) (bj25da@r (bje20@interaction-env-r bj25a0@env)) (bj25db@rtc (bjde2@make-collector))) (let ((bj25df@x (make-simple-struct 'stx '5 (list bj259f@x bjaf9@top-mark* (list bj25d9@rib) '())))) (call-with-values (lambda () (let ((bj25f5@bj25e6 bje6c@top-level-context) (bj25f6@bj25e8 bjde4@inv-collector) (bj25f7@bj25ea bjde6@vis-collector) (bj25f8@bj25ec bjde8@imp-collector) (bj25f9@bj25ee bj25a0@env) (bj25fa@bj25f0 bj25db@rtc) (bj25fb@bj25f2 (bjde2@make-collector)) (bj25fc@bj25f4 (bjde2@make-collector))) (let ((bj2605@swap (lambda () (begin (let ((bj2607@t (bj25f5@bj25e6))) (begin (bj25f5@bj25e6 bj25f9@bj25ee) (set! bj25f9@bj25ee bj2607@t))) (let ((bj2609@t (bj25f6@bj25e8))) (begin (bj25f6@bj25e8 bj25fa@bj25f0) (set! bj25fa@bj25f0 bj2609@t))) (let ((bj260b@t (bj25f7@bj25ea))) (begin (bj25f7@bj25ea bj25fb@bj25f2) (set! bj25fb@bj25f2 bj260b@t))) (let ((bj260d@t (bj25f8@bj25ec))) (begin (bj25f8@bj25ec bj25fc@bj25f4) (set! bj25fc@bj25f4 bj260d@t))))))) (dynamic-wind bj2605@swap (lambda () (bjdec@chi-interaction-expr bj25df@x bj25d9@rib bj25da@r)) bj2605@swap)))) (lambda (bj260f@bj25e2 bj2610@bj25e4) (let ((bj2613@r^ bj2610@bj25e4) (bj2614@e bj260f@bj25e2)) (begin (bje22@set-interaction-env-r! bj25a0@env bj2613@r^) (values bj2614@e (bj25db@rtc)))))))) (assertion-violation 'expand '"not an environment" bj25a0@env))))) (set! bj28a5@bje3a@expand bje3a@expand) (set! bje3c@eval (lambda (bj2617@x bj2618@env) (begin (if (not (bje30@environment? bj2618@env)) (error 'eval '"not an environment" bj2618@env) (void)) (call-with-values (lambda () (bje3a@expand bj2617@x bj2618@env)) (lambda (bj261f@bj261c bj2620@bj261e) (let ((bj2623@invoke-req* bj2620@bj261e) (bj2624@x bj261f@bj261c)) (begin (for-each bj98b@bj7d9@invoke-library bj2623@invoke-req*) (eval-core (bj715@bj6cd@expanded->core bj2624@x))))))))) (set! bj28a6@bje3c@eval bje3c@eval) (set! bje3e@library-expander (lambda bj2695 (let ((bj2696 (length bj2695))) (if (= bj2696 '3) (apply (lambda (bj2627@x bj2628@filename bj2629@verify-name) (let ((bj262e@build-visit-code '#f) (bj2630@visit! '#f)) (begin (set! bj262e@build-visit-code (lambda (bj2683@macro*) (if (null? bj2683@macro*) (bjadb@bja36@build-void) (bjada@bja34@build-sequence '#f (map (lambda (bj2685@x) (let ((bj2687@loc (car bj2685@x)) (bj2688@src (cddr bj2685@x))) (list 'set! bj2687@loc bj2688@src))) bj2683@macro*))))) (set! bj2630@visit! (lambda (bj267b@macro*) (for-each (lambda (bj267d@x) (let ((bj267f@loc (car bj267d@x)) (bj2680@proc (cadr bj267d@x))) (set-symbol-value! bj267f@loc bj2680@proc))) bj267b@macro*))) (call-with-values (lambda () (bjdf0@core-library-expander bj2627@x bj2629@verify-name)) (lambda (bj2643@bj2632 bj2644@bj2634 bj2645@bj2636 bj2646@bj2638 bj2647@bj263a bj2648@bj263c bj2649@bj263e bj264a@bj2640 bj264b@bj2642) (let ((bj2655@export-env bj264b@bj2642) (bj2656@export-subst bj264a@bj2640) (bj2657@macro* bj2649@bj263e) (bj2658@invoke-code bj2648@bj263c) (bj2659@vis* bj2647@bj263a) (bj265a@inv* bj2646@bj2638) (bj265b@imp* bj2645@bj2636) (bj265c@ver bj2644@bj2634) (bj265d@name bj2643@bj2632)) (let ((bj2667@id (gensym)) (bj2668@name bj265d@name) (bj2669@ver bj265c@ver) (bj266a@imp* (map bj98f@bj7e1@library-spec bj265b@imp*)) (bj266b@vis* (map bj98f@bj7e1@library-spec bj2659@vis*)) (bj266c@inv* (map bj98f@bj7e1@library-spec bj265a@inv*)) (bj266d@visit-proc (lambda () (bj2630@visit! bj2657@macro*))) (bj266e@invoke-proc (lambda () (eval-core (bj715@bj6cd@expanded->core bj2658@invoke-code)))) (bj266f@visit-code (bj262e@build-visit-code bj2657@macro*)) (bj2670@invoke-code bj2658@invoke-code)) (begin (bj989@bj7d5@install-library bj2667@id bj2668@name bj2669@ver bj266a@imp* bj266b@vis* bj266c@inv* bj2656@export-subst bj2655@export-env bj266d@visit-proc bj266e@invoke-proc bj266f@visit-code bj2670@invoke-code '#t bj2628@filename) (values bj2667@id bj2668@name bj2669@ver bj266a@imp* bj266b@vis* bj266c@inv* bj2670@invoke-code bj266f@visit-code bj2656@export-subst bj2655@export-env))))))))) bj2695) (if (= bj2696 '2) (apply (lambda (bj268b@x bj268c@filename) (bje3e@library-expander bj268b@x bj268c@filename (lambda (bj268f@x) (values)))) bj2695) (if (= bj2696 '1) (apply (lambda (bj2691@x) (bje3e@library-expander bj2691@x '#f (lambda (bj2693@x) (values)))) bj2695) (error 'apply '"invalid arg count"))))))) (set! bj28a7@bje3e@library-expander bje3e@library-expander) (set! bje40@boot-library-expand (lambda (bj2697@x) (call-with-values (lambda () (bje3e@library-expander bj2697@x)) (lambda (bj26ad@bj269a bj26ae@bj269c bj26af@bj269e bj26b0@bj26a0 bj26b1@bj26a2 bj26b2@bj26a4 bj26b3@bj26a6 bj26b4@bj26a8 bj26b5@bj26aa bj26b6@bj26ac) (let ((bj26c1@export-env bj26b6@bj26ac) (bj26c2@export-subst bj26b5@bj26aa) (bj26c3@visit-code bj26b4@bj26a8) (bj26c4@invoke-code bj26b3@bj26a6) (bj26c5@inv* bj26b2@bj26a4) (bj26c6@vis* bj26b1@bj26a2) (bj26c7@imp* bj26b0@bj26a0) (bj26c8@ver bj26af@bj269e) (bj26c9@name bj26ae@bj269c) (bj26ca@id bj26ad@bj269a)) (values bj26c9@name bj26c4@invoke-code bj26c2@export-subst bj26c1@export-env)))))) (set! bj28a8@bje40@boot-library-expand bje40@boot-library-expand) (set! bje42@rev-map-append (lambda (bj26d5@f bj26d6@ls bj26d7@ac) (if (null? bj26d6@ls) bj26d7@ac (bje42@rev-map-append bj26d5@f (cdr bj26d6@ls) (cons (bj26d5@f (car bj26d6@ls)) bj26d7@ac))))) (set! bj28a9@bje42@rev-map-append bje42@rev-map-append) (set! bje44@build-exports (lambda (bj26db@lex*+loc* bj26dc@init*) (bjada@bja34@build-sequence '#f (cons (bjadb@bja36@build-void) (bje42@rev-map-append (lambda (bj26df@x) (list 'set! (cdr bj26df@x) (car bj26df@x))) bj26db@lex*+loc* bj26dc@init*))))) (set! bj28aa@bje44@build-exports bje44@build-exports) (set! bje46@make-export-subst (lambda (bj26e1@name* bj26e2@id*) (map (lambda (bj26e5@name bj26e6@id) (let ((bj26e9@label (bjb8b@id->label bj26e6@id))) (begin (if (not bj26e9@label) (bje5c@syntax-violation '#f '"cannot export unbound identifier" bj26e6@id) (void)) (cons bj26e5@name bj26e9@label)))) bj26e1@name* bj26e2@id*))) (set! bj28ab@bje46@make-export-subst bje46@make-export-subst) (set! bje48@make-export-env/macros (lambda (bj26eb@lex* bj26ec@loc* bj26ed@r) (let ((bj26f2@lookup '#f)) (begin (set! bj26f2@lookup (lambda (bj270f@x) (let bj2717@f ((bj2711@x bj270f@x) (bj2712@lex* bj26eb@lex*) (bj2713@loc* bj26ec@loc*)) (if (pair? bj2712@lex*) (if (eq? bj2711@x (car bj2712@lex*)) (car bj2713@loc*) (bj2717@f bj2711@x (cdr bj2712@lex*) (cdr bj2713@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let bj26fb@f ((bj26f3@r bj26ed@r) (bj26f4@env '()) (bj26f5@global* '()) (bj26f6@macro* '())) (if (null? bj26f3@r) (values bj26f4@env bj26f5@global* bj26f6@macro*) (let ((bj26fd@x (car bj26f3@r))) (let ((bj26ff@label (car bj26fd@x)) (bj2700@b (cdr bj26fd@x))) (let ((bj2703@t (bjb91@binding-type bj2700@b))) (if (memv bj2703@t '(lexical)) (let ((bj2705@v (bjb93@binding-value bj2700@b))) (let ((bj2707@loc (bj26f2@lookup (bjd06@lexical-var bj2705@v))) (bj2708@type (if (bjd08@lexical-mutable? bj2705@v) 'mutable 'global))) (bj26fb@f (cdr bj26f3@r) (cons (cons* bj26ff@label bj2708@type bj2707@loc) bj26f4@env) (cons (cons (bjd06@lexical-var bj2705@v) bj2707@loc) bj26f5@global*) bj26f6@macro*))) (if (memv bj2703@t '(local-macro)) (let ((bj270b@loc (gensym))) (bj26fb@f (cdr bj26f3@r) (cons (cons* bj26ff@label 'global-macro bj270b@loc) bj26f4@env) bj26f5@global* (cons (cons bj270b@loc (bjb93@binding-value bj2700@b)) bj26f6@macro*))) (if (memv bj2703@t '(local-macro!)) (let ((bj270d@loc (gensym))) (bj26fb@f (cdr bj26f3@r) (cons (cons* bj26ff@label 'global-macro! bj270d@loc) bj26f4@env) bj26f5@global* (cons (cons bj270d@loc (bjb93@binding-value bj2700@b)) bj26f6@macro*))) (if (memv bj2703@t '($rtd $module)) (bj26fb@f (cdr bj26f3@r) (cons bj26fd@x bj26f4@env) bj26f5@global* bj26f6@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (bjb91@binding-type bj2700@b) (bjb93@binding-value bj2700@b))))))))))))))) (set! bj28ac@bje48@make-export-env/macros bje48@make-export-env/macros) (set! bje4a@generate-temporaries (lambda (bj2719@ls) (let ((bj271b@t bj2719@ls)) (let ((bj271d@ls/false (bjd7c@syntax-dispatch bj271b@t 'each-any))) (if bj271d@ls/false (apply (lambda (bj271f@ls) (map (lambda (bj2721@x) (make-simple-struct 'stx '5 (list (let ((bj2723@x (bje62@syntax->datum bj2721@x))) (if (or (symbol? bj2723@x) (string? bj2723@x)) (gensym bj2723@x) (gensym 't))) bjaf9@top-mark* '() '()))) bj271f@ls)) bj271d@ls/false) (let ((bj2725@t bj271b@t)) (let ((bj2727@ls/false (bjd7c@syntax-dispatch bj2725@t '_))) (if bj2727@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) bj2727@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj2725@t))))))))) (set! bj28ad@bje4a@generate-temporaries bje4a@generate-temporaries) (set! bje4c@free-identifier=? (lambda (bj2729@x bj272a@y) (if (bjb75@id? bj2729@x) (if (bjb75@id? bj272a@y) (bjb7b@free-id=? bj2729@x bj272a@y) (assertion-violation 'free-identifier=? '"not an identifier" bj272a@y)) (assertion-violation 'free-identifier=? '"not an identifier" bj2729@x)))) (set! bj28ae@bje4c@free-identifier=? bje4c@free-identifier=?) (set! bje4e@bound-identifier=? (lambda (bj272d@x bj272e@y) (if (bjb75@id? bj272d@x) (if (bjb75@id? bj272e@y) (bjb79@bound-id=? bj272d@x bj272e@y) (assertion-violation 'bound-identifier=? '"not an identifier" bj272e@y)) (assertion-violation 'bound-identifier=? '"not an identifier" bj272d@x)))) (set! bj28af@bje4e@bound-identifier=? bje4e@bound-identifier=?) (set! bje50@make-source-condition (lambda (bj2731@x) (let ((bj273b@bj2736 '#f) (bj273d@bj2738 '#f) (bj273f@bj2737 '#f) (bj2742@bj2735 '#f) (bj2744@make-source-condition '#f) (bj2746@bj2733 '#f) (bj2748@bj2734 '#f) (bj274a@source-condition? '#f) (bj274c@source-filename '#f) (bj274e@source-character '#f)) (begin (set! bj273b@bj2736 (make-record-type-descriptor '&source-information bj2b91@bj28d8@&condition-rtd 'bj2739 '#f '#f '#((immutable file-name) (immutable character)))) (set! bj273d@bj2738 '#f) (set! bj273f@bj2737 (make-record-constructor-descriptor bj273b@bj2736 bj2b92@bj28da@&condition-rcd bj273d@bj2738)) (set! bj2742@bj2735 (record-predicate bj273b@bj2736)) (set! bj2744@make-source-condition (record-constructor bj273f@bj2737)) (set! bj2746@bj2733 (record-accessor bj273b@bj2736 '0)) (set! bj2748@bj2734 (record-accessor bj273b@bj2736 '1)) (set! bj274a@source-condition? (condition-predicate bj273b@bj2736)) (set! bj274c@source-filename (condition-accessor bj273b@bj2736 bj2746@bj2733)) (set! bj274e@source-character (condition-accessor bj273b@bj2736 bj2748@bj2734)) (if (pair? bj2731@x) (bj2744@make-source-condition (car bj2731@x) (cdr bj2731@x)) (condition)))))) (set! bj28b0@bje50@make-source-condition bje50@make-source-condition) (set! bje52@extract-position-condition (lambda (bj274f@x) (bje50@make-source-condition (bje54@expression-position bj274f@x)))) (set! bj28b1@bje52@extract-position-condition bje52@extract-position-condition) (set! bje54@expression-position (lambda (bj2751@x) (and (bjb41@stx? bj2751@x) (let ((bj2753@x (bjb43@stx-expr bj2751@x))) (and (bj6b3@bj585@annotation? bj2753@x) (bj6b4@bj587@annotation-source bj2753@x)))))) (set! bj28b2@bje54@expression-position bje54@expression-position) (set! bje56@assertion-error (lambda (bj2755@expr bj2756@pos) (raise (condition (bj2bc1@bj299c@make-assertion-violation) (bj2bd3@bj29ce@make-who-condition 'assert) (bj2b97@bj292f@make-message-condition '"assertion failed") (bj2bc9@bj29b3@make-irritants-condition (list bj2755@expr)) (bje50@make-source-condition bj2756@pos))))) (set! bj28b3@bje56@assertion-error bje56@assertion-error) (set! bje58@syntax-error (lambda (bj2759@x . bj275b@args) (begin (if (not (for-all string? bj275b@args)) (assertion-violation 'syntax-error '"invalid argument" bj275b@args) (void)) (raise (condition (bj2b97@bj292f@make-message-condition (if (null? bj275b@args) '"invalid syntax" (apply string-append bj275b@args))) (bj2bf5@bj2a2a@make-syntax-violation (bje62@syntax->datum bj2759@x) '#f) (bje52@extract-position-condition bj2759@x)))))) (set! bj28b4@bje58@syntax-error bje58@syntax-error) (set! bje5a@syntax-violation* (lambda (bj275d@who bj275e@msg bj275f@form bj2760@condition-object) (begin (if (not (string? bj275e@msg)) (assertion-violation 'syntax-violation '"message is not a string" bj275e@msg) (void)) (let ((bj2765@who (if (or (string? bj275d@who) (symbol? bj275d@who)) bj275d@who (if (not bj275d@who) (let ((bj2767@t bj275f@form)) (let ((bj2769@ls/false (bjd7c@syntax-dispatch bj2767@t 'any))) (if (and bj2769@ls/false (apply (lambda (bj276b@id) (bjb75@id? bj276b@id)) bj2769@ls/false)) (apply (lambda (bj276d@id) (bje62@syntax->datum bj276d@id)) bj2769@ls/false) (let ((bj276f@t bj2767@t)) (let ((bj2771@ls/false (bjd7c@syntax-dispatch bj276f@t '(any . any)))) (if (and bj2771@ls/false (apply (lambda (bj2773@id bj2774@rest) (bjb75@id? bj2773@id)) bj2771@ls/false)) (apply (lambda (bj2777@id bj2778@rest) (bje62@syntax->datum bj2777@id)) bj2771@ls/false) (let ((bj277b@t bj276f@t)) (let ((bj277d@ls/false (bjd7c@syntax-dispatch bj277b@t '_))) (if bj277d@ls/false (apply (lambda () '#f) bj277d@ls/false) (bje5c@syntax-violation '#f '"invalid syntax" bj277b@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" bj275d@who))))) (raise (condition (if bj2765@who (bj2bd3@bj29ce@make-who-condition bj2765@who) (condition)) (bj2b97@bj292f@make-message-condition bj275e@msg) bj2760@condition-object (bje52@extract-position-condition bj275f@form))))))) (set! bj28b5@bje5a@syntax-violation* bje5a@syntax-violation*) (set! bje5c@syntax-violation (lambda bj278d (let ((bj278e (length bj278d))) (if (= bj278e '3) (apply (lambda (bj277f@who bj2780@msg bj2781@form) (bje5c@syntax-violation bj277f@who bj2780@msg bj2781@form '#f)) bj278d) (if (= bj278e '4) (apply (lambda (bj2785@who bj2786@msg bj2787@form bj2788@subform) (bje5a@syntax-violation* bj2785@who bj2786@msg bj2787@form (bj2bf5@bj2a2a@make-syntax-violation (bje62@syntax->datum bj2787@form) (bje62@syntax->datum bj2788@subform)))) bj278d) (error 'apply '"invalid arg count")))))) (set! bj28b6@bje5c@syntax-violation bje5c@syntax-violation) (set! bje5e@identifier? (lambda (bj278f@x) (bjb75@id? bj278f@x))) (set! bj28b7@bje5e@identifier? bje5e@identifier?) (set! bje60@datum->syntax (lambda (bj2791@id bj2792@datum) (if (bjb75@id? bj2791@id) (bjb55@datum->stx bj2791@id bj2792@datum) (assertion-violation 'datum->syntax '"not an identifier" bj2791@id)))) (set! bj28b8@bje60@datum->syntax bje60@datum->syntax) (set! bje62@syntax->datum (lambda (bj2795@x) (bjb89@stx->datum bj2795@x))) (set! bj28b9@bje62@syntax->datum bje62@syntax->datum) (set! bje64@ungensym-all (lambda (bj2797@code) (if (pair? bj2797@code) (cons (bje64@ungensym-all (car bj2797@code)) (bje64@ungensym-all (cdr bj2797@code))) (if (symbol? bj2797@code) (ungensym bj2797@code) bj2797@code)))) (set! bj28ba@bje64@ungensym-all bje64@ungensym-all) (set! bje66@compile-r6rs-top-level (lambda (bj2799@x*) (call-with-values (lambda () (bjdf4@top-level-expander bj2799@x*)) (lambda (bj279f@bj279c bj27a0@bj279e) (let ((bj27a3@invoke-code bj27a0@bj279e) (bj27a4@lib* bj279f@bj279c)) (lambda () (begin (for-each bj98b@bj7d9@invoke-library bj27a4@lib*) (let ((bj27a7@expanded (bj715@bj6cd@expanded->core bj27a3@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (bje64@ungensym-all bj27a7@expanded)) (void)) (eval-core bj27a7@expanded)))))))))) (set! bj28bb@bje66@compile-r6rs-top-level bje66@compile-r6rs-top-level) (set! bje68@pre-compile-r6rs-top-level (lambda (bj27a9@x*) (call-with-values (lambda () (bjdf4@top-level-expander bj27a9@x*)) (lambda (bj27af@bj27ac bj27b0@bj27ae) (let ((bj27b3@invoke-code bj27b0@bj27ae) (bj27b4@lib* bj27af@bj27ac)) (begin (for-each bj98b@bj7d9@invoke-library bj27b4@lib*) (bj6bd@bj599@compile-core (bj715@bj6cd@expanded->core bj27b3@invoke-code)))))))) (set! bj28bc@bje68@pre-compile-r6rs-top-level bje68@pre-compile-r6rs-top-level) (set! bje6a@interaction-environment (let ((bj27b7@the-env '#f)) (lambda () (or bj27b7@the-env (let ((bj27b9@lib (bj984@bj7cb@find-library-by-name '(mosh interaction))) (bj27ba@rib (bjb29@make-empty-rib))) (begin (let ((bj27bd@subst (bj966@bj78f@library-subst bj27b9@lib))) (begin (bjb15@set-rib-sym*! bj27ba@rib (map car bj27bd@subst)) (bjb19@set-rib-mark**! bj27ba@rib (map (lambda (bj27bf@x) bjaf9@top-mark*) bj27bd@subst)) (bjb1d@set-rib-label*! bj27ba@rib (map cdr bj27bd@subst)))) (let ((bj27c1@env (make-simple-struct 'interaction-env '4 (list bj27ba@rib '() '())))) (begin (set! bj27b7@the-env bj27c1@env) bj27c1@env)))))))) (set! bj28bd@bje6a@interaction-environment bje6a@interaction-environment) (set! bje6c@top-level-context (bj6bf@bj59d@make-parameter '#f)) (set! bj28be@bje6c@top-level-context bje6c@top-level-context) (bj981@bj7c5@current-library-expander bje3e@library-expander))
(begin (set! bj28cd@bj28c8 (unspecified)) (set! bj28cf@bj28ca (unspecified)) (set! bj28d1@bj28c9 (unspecified)) (set! bj28d4@&condition? (unspecified)) (set! bj28d6@make-&condition (unspecified)) (set! bj28d8@&condition-rtd (unspecified)) (set! bj28da@&condition-rcd (unspecified)) (set! bj2926@bj2921 (unspecified)) (set! bj2928@bj2923 (unspecified)) (set! bj292a@bj2922 (unspecified)) (set! bj292d@p? (unspecified)) (set! bj292f@make-message-condition (unspecified)) (set! bj2931@bj2920 (unspecified)) (set! bj2933@message-condition? (unspecified)) (set! bj2935@condition-message (unspecified)) (set! bj2937@&message-rtd (unspecified)) (set! bj2939@&message-rcd (unspecified)) (set! bj293f@bj293a (unspecified)) (set! bj2941@bj293c (unspecified)) (set! bj2943@bj293b (unspecified)) (set! bj2946@p? (unspecified)) (set! bj2948@make-warning (unspecified)) (set! bj294a@warning? (unspecified)) (set! bj294c@&warning-rtd (unspecified)) (set! bj294e@&warning-rcd (unspecified)) (set! bj2954@bj294f (unspecified)) (set! bj2956@bj2951 (unspecified)) (set! bj2958@bj2950 (unspecified)) (set! bj295b@p? (unspecified)) (set! bj295d@make-serious-condition (unspecified)) (set! bj295f@serious-condition? (unspecified)) (set! bj2961@&serious-rtd (unspecified)) (set! bj2963@&serious-rcd (unspecified)) (set! bj2969@bj2964 (unspecified)) (set! bj296b@bj2966 (unspecified)) (set! bj296d@bj2965 (unspecified)) (set! bj2970@p? (unspecified)) (set! bj2972@make-error (unspecified)) (set! bj2974@error? (unspecified)) (set! bj2976@&error-rtd (unspecified)) (set! bj2978@&error-rcd (unspecified)) (set! bj297e@bj2979 (unspecified)) (set! bj2980@bj297b (unspecified)) (set! bj2982@bj297a (unspecified)) (set! bj2985@p? (unspecified)) (set! bj2987@make-violation (unspecified)) (set! bj2989@violation? (unspecified)) (set! bj298b@&violation-rtd (unspecified)) (set! bj298d@&violation-rcd (unspecified)) (set! bj2993@bj298e (unspecified)) (set! bj2995@bj2990 (unspecified)) (set! bj2997@bj298f (unspecified)) (set! bj299a@p? (unspecified)) (set! bj299c@make-assertion-violation (unspecified)) (set! bj299e@assertion-violation? (unspecified)) (set! bj29a0@&assertion-rtd (unspecified)) (set! bj29a2@&assertion-rcd (unspecified)) (set! bj29aa@bj29a5 (unspecified)) (set! bj29ac@bj29a7 (unspecified)) (set! bj29ae@bj29a6 (unspecified)) (set! bj29b1@p? (unspecified)) (set! bj29b3@make-irritants-condition (unspecified)) (set! bj29b5@bj29a4 (unspecified)) (set! bj29b7@irritants-condition? (unspecified)) (set! bj29b9@condition-irritants (unspecified)) (set! bj29bb@&irritants-rtd (unspecified)) (set! bj29bd@&irritants-rcd (unspecified)) (set! bj29c5@bj29c0 (unspecified)) (set! bj29c7@bj29c2 (unspecified)) (set! bj29c9@bj29c1 (unspecified)) (set! bj29cc@p? (unspecified)) (set! bj29ce@make-who-condition (unspecified)) (set! bj29d0@bj29bf (unspecified)) (set! bj29d2@who-condition? (unspecified)) (set! bj29d4@condition-who (unspecified)) (set! bj29d6@&who-rtd (unspecified)) (set! bj29d8@&who-rcd (unspecified)) (set! bj29de@bj29d9 (unspecified)) (set! bj29e0@bj29db (unspecified)) (set! bj29e2@bj29da (unspecified)) (set! bj29e5@p? (unspecified)) (set! bj29e7@make-non-continuable-violation (unspecified)) (set! bj29e9@non-continuable-violation? (unspecified)) (set! bj29eb@&non-continuable-rtd (unspecified)) (set! bj29ed@&non-continuable-rcd (unspecified)) (set! bj29f3@bj29ee (unspecified)) (set! bj29f5@bj29f0 (unspecified)) (set! bj29f7@bj29ef (unspecified)) (set! bj29fa@p? (unspecified)) (set! bj29fc@make-implementation-restriction-violation (unspecified)) (set! bj29fe@implementation-restriction-violation? (unspecified)) (set! bj2a00@&implementation-restriction-rtd (unspecified)) (set! bj2a02@&implementation-restriction-rcd (unspecified)) (set! bj2a08@bj2a03 (unspecified)) (set! bj2a0a@bj2a05 (unspecified)) (set! bj2a0c@bj2a04 (unspecified)) (set! bj2a0f@p? (unspecified)) (set! bj2a11@make-lexical-violation (unspecified)) (set! bj2a13@lexical-violation? (unspecified)) (set! bj2a15@&lexical-rtd (unspecified)) (set! bj2a17@&lexical-rcd (unspecified)) (set! bj2a21@bj2a1c (unspecified)) (set! bj2a23@bj2a1e (unspecified)) (set! bj2a25@bj2a1d (unspecified)) (set! bj2a28@p? (unspecified)) (set! bj2a2a@make-syntax-violation (unspecified)) (set! bj2a2c@bj2a19 (unspecified)) (set! bj2a2e@bj2a1b (unspecified)) (set! bj2a30@syntax-violation? (unspecified)) (set! bj2a32@syntax-violation-form (unspecified)) (set! bj2a34@syntax-violation-subform (unspecified)) (set! bj2a36@&syntax-rtd (unspecified)) (set! bj2a38@&syntax-rcd (unspecified)) (set! bj2a3e@bj2a39 (unspecified)) (set! bj2a40@bj2a3b (unspecified)) (set! bj2a42@bj2a3a (unspecified)) (set! bj2a45@p? (unspecified)) (set! bj2a47@make-undefined-violation (unspecified)) (set! bj2a49@undefined-violation? (unspecified)) (set! bj2a4b@&undefined-rtd (unspecified)) (set! bj2a4d@&undefined-rcd (unspecified)) (set! bj2a53@bj2a4e (unspecified)) (set! bj2a55@bj2a50 (unspecified)) (set! bj2a57@bj2a4f (unspecified)) (set! bj2a5a@p? (unspecified)) (set! bj2a5c@make-i/o-error (unspecified)) (set! bj2a5e@i/o-error? (unspecified)) (set! bj2a60@&i/o-rtd (unspecified)) (set! bj2a62@&i/o-rcd (unspecified)) (set! bj2a68@bj2a63 (unspecified)) (set! bj2a6a@bj2a65 (unspecified)) (set! bj2a6c@bj2a64 (unspecified)) (set! bj2a6f@p? (unspecified)) (set! bj2a71@make-i/o-read-error (unspecified)) (set! bj2a73@i/o-read-error? (unspecified)) (set! bj2a75@&i/o-read-rtd (unspecified)) (set! bj2a77@&i/o-read-rcd (unspecified)) (set! bj2a7d@bj2a78 (unspecified)) (set! bj2a7f@bj2a7a (unspecified)) (set! bj2a81@bj2a79 (unspecified)) (set! bj2a84@p? (unspecified)) (set! bj2a86@make-i/o-write-error (unspecified)) (set! bj2a88@i/o-write-error? (unspecified)) (set! bj2a8a@&i/o-write-rtd (unspecified)) (set! bj2a8c@&i/o-write-rcd (unspecified)) (set! bj2a94@bj2a8f (unspecified)) (set! bj2a96@bj2a91 (unspecified)) (set! bj2a98@bj2a90 (unspecified)) (set! bj2a9b@p? (unspecified)) (set! bj2a9d@make-i/o-invalid-position-error (unspecified)) (set! bj2a9f@bj2a8e (unspecified)) (set! bj2aa1@i/o-invalid-position-error? (unspecified)) (set! bj2aa3@i/o-error-position (unspecified)) (set! bj2aa5@&i/o-invalid-position-rtd (unspecified)) (set! bj2aa7@&i/o-invalid-position-rcd (unspecified)) (set! bj2aaf@bj2aaa (unspecified)) (set! bj2ab1@bj2aac (unspecified)) (set! bj2ab3@bj2aab (unspecified)) (set! bj2ab6@p? (unspecified)) (set! bj2ab8@make-i/o-filename-error (unspecified)) (set! bj2aba@bj2aa9 (unspecified)) (set! bj2abc@i/o-filename-error? (unspecified)) (set! bj2abe@i/o-error-filename (unspecified)) (set! bj2ac0@&i/o-filename-rtd (unspecified)) (set! bj2ac2@&i/o-filename-rcd (unspecified)) (set! bj2ac8@bj2ac3 (unspecified)) (set! bj2aca@bj2ac5 (unspecified)) (set! bj2acc@bj2ac4 (unspecified)) (set! bj2acf@p? (unspecified)) (set! bj2ad1@make-i/o-file-protection-error (unspecified)) (set! bj2ad3@i/o-file-protection-error? (unspecified)) (set! bj2ad5@&i/o-file-protection-rtd (unspecified)) (set! bj2ad7@&i/o-file-protection-rcd (unspecified)) (set! bj2add@bj2ad8 (unspecified)) (set! bj2adf@bj2ada (unspecified)) (set! bj2ae1@bj2ad9 (unspecified)) (set! bj2ae4@p? (unspecified)) (set! bj2ae6@make-i/o-file-is-read-only-error (unspecified)) (set! bj2ae8@i/o-file-is-read-only-error? (unspecified)) (set! bj2aea@&i/o-file-is-read-only-rtd (unspecified)) (set! bj2aec@&i/o-file-is-read-only-rcd (unspecified)) (set! bj2af2@bj2aed (unspecified)) (set! bj2af4@bj2aef (unspecified)) (set! bj2af6@bj2aee (unspecified)) (set! bj2af9@p? (unspecified)) (set! bj2afb@make-i/o-file-already-exists-error (unspecified)) (set! bj2afd@i/o-file-already-exists-error? (unspecified)) (set! bj2aff@&i/o-file-already-exists-rtd (unspecified)) (set! bj2b01@&i/o-file-already-exists-rcd (unspecified)) (set! bj2b07@bj2b02 (unspecified)) (set! bj2b09@bj2b04 (unspecified)) (set! bj2b0b@bj2b03 (unspecified)) (set! bj2b0e@p? (unspecified)) (set! bj2b10@make-i/o-file-does-not-exist-error (unspecified)) (set! bj2b12@i/o-file-does-not-exist-error? (unspecified)) (set! bj2b14@&i/o-file-does-not-exist-rtd (unspecified)) (set! bj2b16@&i/o-file-does-not-exist-rcd (unspecified)) (set! bj2b1e@bj2b19 (unspecified)) (set! bj2b20@bj2b1b (unspecified)) (set! bj2b22@bj2b1a (unspecified)) (set! bj2b25@p? (unspecified)) (set! bj2b27@make-i/o-port-error (unspecified)) (set! bj2b29@bj2b18 (unspecified)) (set! bj2b2b@i/o-port-error? (unspecified)) (set! bj2b2d@i/o-error-port (unspecified)) (set! bj2b2f@&i/o-port-rtd (unspecified)) (set! bj2b31@&i/o-port-rcd (unspecified)) (set! bj2b37@bj2b32 (unspecified)) (set! bj2b39@bj2b34 (unspecified)) (set! bj2b3b@bj2b33 (unspecified)) (set! bj2b3e@p? (unspecified)) (set! bj2b40@make-i/o-decoding-error (unspecified)) (set! bj2b42@i/o-decoding-error? (unspecified)) (set! bj2b44@&i/o-decoding-rtd (unspecified)) (set! bj2b46@&i/o-decoding-rcd (unspecified)) (set! bj2b4e@bj2b49 (unspecified)) (set! bj2b50@bj2b4b (unspecified)) (set! bj2b52@bj2b4a (unspecified)) (set! bj2b55@p? (unspecified)) (set! bj2b57@make-i/o-encoding-error (unspecified)) (set! bj2b59@bj2b48 (unspecified)) (set! bj2b5b@i/o-encoding-error? (unspecified)) (set! bj2b5d@i/o-encoding-error-char (unspecified)) (set! bj2b5f@&i/o-encoding-rtd (unspecified)) (set! bj2b61@&i/o-encoding-rcd (unspecified)) (set! bj2b67@bj2b62 (unspecified)) (set! bj2b69@bj2b64 (unspecified)) (set! bj2b6b@bj2b63 (unspecified)) (set! bj2b6e@p? (unspecified)) (set! bj2b70@make-no-infinities-violation (unspecified)) (set! bj2b72@no-infinities-violation? (unspecified)) (set! bj2b74@&no-infinities-rtd (unspecified)) (set! bj2b76@&no-infinities-rcd (unspecified)) (set! bj2b7c@bj2b77 (unspecified)) (set! bj2b7e@bj2b79 (unspecified)) (set! bj2b80@bj2b78 (unspecified)) (set! bj2b83@p? (unspecified)) (set! bj2b85@make-no-nans-violation (unspecified)) (set! bj2b87@no-nans-violation? (unspecified)) (set! bj2b89@&no-nans-rtd (unspecified)) (set! bj2b8b@&no-nans-rcd (unspecified)) (set! bj28cd@bj28c8 (make-record-type-descriptor '&condition '#f 'bj28cb '#f '#f '#())) (set! bj2b8c@bj28cd@bj28c8 bj28cd@bj28c8) (set! bj28cf@bj28ca '#f) (set! bj2b8d@bj28cf@bj28ca bj28cf@bj28ca) (set! bj28d1@bj28c9 (make-record-constructor-descriptor bj28cd@bj28c8 '#f bj28cf@bj28ca)) (set! bj2b8e@bj28d1@bj28c9 bj28d1@bj28c9) (set! bj28d4@&condition? (record-predicate bj28cd@bj28c8)) (set! bj2b8f@bj28d4@&condition? bj28d4@&condition?) (set! bj28d6@make-&condition (record-constructor bj28d1@bj28c9)) (set! bj2b90@bj28d6@make-&condition bj28d6@make-&condition) (set! bj28d8@&condition-rtd bj28cd@bj28c8) (set! bj2b91@bj28d8@&condition-rtd bj28d8@&condition-rtd) (set! bj28da@&condition-rcd bj28d1@bj28c9) (set! bj2b92@bj28da@&condition-rcd bj28da@&condition-rcd) (set! bj2926@bj2921 (make-record-type-descriptor '&message bj28cd@bj28c8 'bj2924 '#f '#f '#((immutable message)))) (set! bj2b93@bj2926@bj2921 bj2926@bj2921) (set! bj2928@bj2923 '#f) (set! bj2b94@bj2928@bj2923 bj2928@bj2923) (set! bj292a@bj2922 (make-record-constructor-descriptor bj2926@bj2921 bj28d1@bj28c9 bj2928@bj2923)) (set! bj2b95@bj292a@bj2922 bj292a@bj2922) (set! bj292d@p? (record-predicate bj2926@bj2921)) (set! bj2b96@bj292d@p? bj292d@p?) (set! bj292f@make-message-condition (record-constructor bj292a@bj2922)) (set! bj2b97@bj292f@make-message-condition bj292f@make-message-condition) (set! bj2931@bj2920 (record-accessor bj2926@bj2921 '0)) (set! bj2b98@bj2931@bj2920 bj2931@bj2920) (set! bj2933@message-condition? (condition-predicate bj2926@bj2921)) (set! bj2b99@bj2933@message-condition? bj2933@message-condition?) (set! bj2935@condition-message (condition-accessor bj2926@bj2921 bj2931@bj2920)) (set! bj2b9a@bj2935@condition-message bj2935@condition-message) (set! bj2937@&message-rtd bj2926@bj2921) (set! bj2b9b@bj2937@&message-rtd bj2937@&message-rtd) (set! bj2939@&message-rcd bj292a@bj2922) (set! bj2b9c@bj2939@&message-rcd bj2939@&message-rcd) (set! bj293f@bj293a (make-record-type-descriptor '&warning bj28cd@bj28c8 'bj293d '#f '#f '#())) (set! bj2b9d@bj293f@bj293a bj293f@bj293a) (set! bj2941@bj293c '#f) (set! bj2b9e@bj2941@bj293c bj2941@bj293c) (set! bj2943@bj293b (make-record-constructor-descriptor bj293f@bj293a bj28d1@bj28c9 bj2941@bj293c)) (set! bj2b9f@bj2943@bj293b bj2943@bj293b) (set! bj2946@p? (record-predicate bj293f@bj293a)) (set! bj2ba0@bj2946@p? bj2946@p?) (set! bj2948@make-warning (record-constructor bj2943@bj293b)) (set! bj2ba1@bj2948@make-warning bj2948@make-warning) (set! bj294a@warning? (condition-predicate bj293f@bj293a)) (set! bj2ba2@bj294a@warning? bj294a@warning?) (set! bj294c@&warning-rtd bj293f@bj293a) (set! bj2ba3@bj294c@&warning-rtd bj294c@&warning-rtd) (set! bj294e@&warning-rcd bj2943@bj293b) (set! bj2ba4@bj294e@&warning-rcd bj294e@&warning-rcd) (set! bj2954@bj294f (make-record-type-descriptor '&serious bj28cd@bj28c8 'bj2952 '#f '#f '#())) (set! bj2ba5@bj2954@bj294f bj2954@bj294f) (set! bj2956@bj2951 '#f) (set! bj2ba6@bj2956@bj2951 bj2956@bj2951) (set! bj2958@bj2950 (make-record-constructor-descriptor bj2954@bj294f bj28d1@bj28c9 bj2956@bj2951)) (set! bj2ba7@bj2958@bj2950 bj2958@bj2950) (set! bj295b@p? (record-predicate bj2954@bj294f)) (set! bj2ba8@bj295b@p? bj295b@p?) (set! bj295d@make-serious-condition (record-constructor bj2958@bj2950)) (set! bj2ba9@bj295d@make-serious-condition bj295d@make-serious-condition) (set! bj295f@serious-condition? (condition-predicate bj2954@bj294f)) (set! bj2baa@bj295f@serious-condition? bj295f@serious-condition?) (set! bj2961@&serious-rtd bj2954@bj294f) (set! bj2bab@bj2961@&serious-rtd bj2961@&serious-rtd) (set! bj2963@&serious-rcd bj2958@bj2950) (set! bj2bac@bj2963@&serious-rcd bj2963@&serious-rcd) (set! bj2969@bj2964 (make-record-type-descriptor '&error bj2954@bj294f 'bj2967 '#f '#f '#())) (set! bj2bad@bj2969@bj2964 bj2969@bj2964) (set! bj296b@bj2966 '#f) (set! bj2bae@bj296b@bj2966 bj296b@bj2966) (set! bj296d@bj2965 (make-record-constructor-descriptor bj2969@bj2964 bj2958@bj2950 bj296b@bj2966)) (set! bj2baf@bj296d@bj2965 bj296d@bj2965) (set! bj2970@p? (record-predicate bj2969@bj2964)) (set! bj2bb0@bj2970@p? bj2970@p?) (set! bj2972@make-error (record-constructor bj296d@bj2965)) (set! bj2bb1@bj2972@make-error bj2972@make-error) (set! bj2974@error? (condition-predicate bj2969@bj2964)) (set! bj2bb2@bj2974@error? bj2974@error?) (set! bj2976@&error-rtd bj2969@bj2964) (set! bj2bb3@bj2976@&error-rtd bj2976@&error-rtd) (set! bj2978@&error-rcd bj296d@bj2965) (set! bj2bb4@bj2978@&error-rcd bj2978@&error-rcd) (set! bj297e@bj2979 (make-record-type-descriptor '&violation bj2954@bj294f 'bj297c '#f '#f '#())) (set! bj2bb5@bj297e@bj2979 bj297e@bj2979) (set! bj2980@bj297b '#f) (set! bj2bb6@bj2980@bj297b bj2980@bj297b) (set! bj2982@bj297a (make-record-constructor-descriptor bj297e@bj2979 bj2958@bj2950 bj2980@bj297b)) (set! bj2bb7@bj2982@bj297a bj2982@bj297a) (set! bj2985@p? (record-predicate bj297e@bj2979)) (set! bj2bb8@bj2985@p? bj2985@p?) (set! bj2987@make-violation (record-constructor bj2982@bj297a)) (set! bj2bb9@bj2987@make-violation bj2987@make-violation) (set! bj2989@violation? (condition-predicate bj297e@bj2979)) (set! bj2bba@bj2989@violation? bj2989@violation?) (set! bj298b@&violation-rtd bj297e@bj2979) (set! bj2bbb@bj298b@&violation-rtd bj298b@&violation-rtd) (set! bj298d@&violation-rcd bj2982@bj297a) (set! bj2bbc@bj298d@&violation-rcd bj298d@&violation-rcd) (set! bj2993@bj298e (make-record-type-descriptor '&assertion bj297e@bj2979 'bj2991 '#f '#f '#())) (set! bj2bbd@bj2993@bj298e bj2993@bj298e) (set! bj2995@bj2990 '#f) (set! bj2bbe@bj2995@bj2990 bj2995@bj2990) (set! bj2997@bj298f (make-record-constructor-descriptor bj2993@bj298e bj2982@bj297a bj2995@bj2990)) (set! bj2bbf@bj2997@bj298f bj2997@bj298f) (set! bj299a@p? (record-predicate bj2993@bj298e)) (set! bj2bc0@bj299a@p? bj299a@p?) (set! bj299c@make-assertion-violation (record-constructor bj2997@bj298f)) (set! bj2bc1@bj299c@make-assertion-violation bj299c@make-assertion-violation) (set! bj299e@assertion-violation? (condition-predicate bj2993@bj298e)) (set! bj2bc2@bj299e@assertion-violation? bj299e@assertion-violation?) (set! bj29a0@&assertion-rtd bj2993@bj298e) (set! bj2bc3@bj29a0@&assertion-rtd bj29a0@&assertion-rtd) (set! bj29a2@&assertion-rcd bj2997@bj298f) (set! bj2bc4@bj29a2@&assertion-rcd bj29a2@&assertion-rcd) (set! bj29aa@bj29a5 (make-record-type-descriptor '&irritants bj28cd@bj28c8 'bj29a8 '#f '#f '#((immutable irritants)))) (set! bj2bc5@bj29aa@bj29a5 bj29aa@bj29a5) (set! bj29ac@bj29a7 '#f) (set! bj2bc6@bj29ac@bj29a7 bj29ac@bj29a7) (set! bj29ae@bj29a6 (make-record-constructor-descriptor bj29aa@bj29a5 bj28d1@bj28c9 bj29ac@bj29a7)) (set! bj2bc7@bj29ae@bj29a6 bj29ae@bj29a6) (set! bj29b1@p? (record-predicate bj29aa@bj29a5)) (set! bj2bc8@bj29b1@p? bj29b1@p?) (set! bj29b3@make-irritants-condition (record-constructor bj29ae@bj29a6)) (set! bj2bc9@bj29b3@make-irritants-condition bj29b3@make-irritants-condition) (set! bj29b5@bj29a4 (record-accessor bj29aa@bj29a5 '0)) (set! bj2bca@bj29b5@bj29a4 bj29b5@bj29a4) (set! bj29b7@irritants-condition? (condition-predicate bj29aa@bj29a5)) (set! bj2bcb@bj29b7@irritants-condition? bj29b7@irritants-condition?) (set! bj29b9@condition-irritants (condition-accessor bj29aa@bj29a5 bj29b5@bj29a4)) (set! bj2bcc@bj29b9@condition-irritants bj29b9@condition-irritants) (set! bj29bb@&irritants-rtd bj29aa@bj29a5) (set! bj2bcd@bj29bb@&irritants-rtd bj29bb@&irritants-rtd) (set! bj29bd@&irritants-rcd bj29ae@bj29a6) (set! bj2bce@bj29bd@&irritants-rcd bj29bd@&irritants-rcd) (set! bj29c5@bj29c0 (make-record-type-descriptor '&who bj28cd@bj28c8 'bj29c3 '#f '#f '#((immutable who)))) (set! bj2bcf@bj29c5@bj29c0 bj29c5@bj29c0) (set! bj29c7@bj29c2 '#f) (set! bj2bd0@bj29c7@bj29c2 bj29c7@bj29c2) (set! bj29c9@bj29c1 (make-record-constructor-descriptor bj29c5@bj29c0 bj28d1@bj28c9 bj29c7@bj29c2)) (set! bj2bd1@bj29c9@bj29c1 bj29c9@bj29c1) (set! bj29cc@p? (record-predicate bj29c5@bj29c0)) (set! bj2bd2@bj29cc@p? bj29cc@p?) (set! bj29ce@make-who-condition (record-constructor bj29c9@bj29c1)) (set! bj2bd3@bj29ce@make-who-condition bj29ce@make-who-condition) (set! bj29d0@bj29bf (record-accessor bj29c5@bj29c0 '0)) (set! bj2bd4@bj29d0@bj29bf bj29d0@bj29bf) (set! bj29d2@who-condition? (condition-predicate bj29c5@bj29c0)) (set! bj2bd5@bj29d2@who-condition? bj29d2@who-condition?) (set! bj29d4@condition-who (condition-accessor bj29c5@bj29c0 bj29d0@bj29bf)) (set! bj2bd6@bj29d4@condition-who bj29d4@condition-who) (set! bj29d6@&who-rtd bj29c5@bj29c0) (set! bj2bd7@bj29d6@&who-rtd bj29d6@&who-rtd) (set! bj29d8@&who-rcd bj29c9@bj29c1) (set! bj2bd8@bj29d8@&who-rcd bj29d8@&who-rcd) (set! bj29de@bj29d9 (make-record-type-descriptor '&non-continuable bj297e@bj2979 'bj29dc '#f '#f '#())) (set! bj2bd9@bj29de@bj29d9 bj29de@bj29d9) (set! bj29e0@bj29db '#f) (set! bj2bda@bj29e0@bj29db bj29e0@bj29db) (set! bj29e2@bj29da (make-record-constructor-descriptor bj29de@bj29d9 bj2982@bj297a bj29e0@bj29db)) (set! bj2bdb@bj29e2@bj29da bj29e2@bj29da) (set! bj29e5@p? (record-predicate bj29de@bj29d9)) (set! bj2bdc@bj29e5@p? bj29e5@p?) (set! bj29e7@make-non-continuable-violation (record-constructor bj29e2@bj29da)) (set! bj2bdd@bj29e7@make-non-continuable-violation bj29e7@make-non-continuable-violation) (set! bj29e9@non-continuable-violation? (condition-predicate bj29de@bj29d9)) (set! bj2bde@bj29e9@non-continuable-violation? bj29e9@non-continuable-violation?) (set! bj29eb@&non-continuable-rtd bj29de@bj29d9) (set! bj2bdf@bj29eb@&non-continuable-rtd bj29eb@&non-continuable-rtd) (set! bj29ed@&non-continuable-rcd bj29e2@bj29da) (set! bj2be0@bj29ed@&non-continuable-rcd bj29ed@&non-continuable-rcd) (set! bj29f3@bj29ee (make-record-type-descriptor '&implementation-restriction bj297e@bj2979 'bj29f1 '#f '#f '#())) (set! bj2be1@bj29f3@bj29ee bj29f3@bj29ee) (set! bj29f5@bj29f0 '#f) (set! bj2be2@bj29f5@bj29f0 bj29f5@bj29f0) (set! bj29f7@bj29ef (make-record-constructor-descriptor bj29f3@bj29ee bj2982@bj297a bj29f5@bj29f0)) (set! bj2be3@bj29f7@bj29ef bj29f7@bj29ef) (set! bj29fa@p? (record-predicate bj29f3@bj29ee)) (set! bj2be4@bj29fa@p? bj29fa@p?) (set! bj29fc@make-implementation-restriction-violation (record-constructor bj29f7@bj29ef)) (set! bj2be5@bj29fc@make-implementation-restriction-violation bj29fc@make-implementation-restriction-violation) (set! bj29fe@implementation-restriction-violation? (condition-predicate bj29f3@bj29ee)) (set! bj2be6@bj29fe@implementation-restriction-violation? bj29fe@implementation-restriction-violation?) (set! bj2a00@&implementation-restriction-rtd bj29f3@bj29ee) (set! bj2be7@bj2a00@&implementation-restriction-rtd bj2a00@&implementation-restriction-rtd) (set! bj2a02@&implementation-restriction-rcd bj29f7@bj29ef) (set! bj2be8@bj2a02@&implementation-restriction-rcd bj2a02@&implementation-restriction-rcd) (set! bj2a08@bj2a03 (make-record-type-descriptor '&lexical bj297e@bj2979 'bj2a06 '#f '#f '#())) (set! bj2be9@bj2a08@bj2a03 bj2a08@bj2a03) (set! bj2a0a@bj2a05 '#f) (set! bj2bea@bj2a0a@bj2a05 bj2a0a@bj2a05) (set! bj2a0c@bj2a04 (make-record-constructor-descriptor bj2a08@bj2a03 bj2982@bj297a bj2a0a@bj2a05)) (set! bj2beb@bj2a0c@bj2a04 bj2a0c@bj2a04) (set! bj2a0f@p? (record-predicate bj2a08@bj2a03)) (set! bj2bec@bj2a0f@p? bj2a0f@p?) (set! bj2a11@make-lexical-violation (record-constructor bj2a0c@bj2a04)) (set! bj2bed@bj2a11@make-lexical-violation bj2a11@make-lexical-violation) (set! bj2a13@lexical-violation? (condition-predicate bj2a08@bj2a03)) (set! bj2bee@bj2a13@lexical-violation? bj2a13@lexical-violation?) (set! bj2a15@&lexical-rtd bj2a08@bj2a03) (set! bj2bef@bj2a15@&lexical-rtd bj2a15@&lexical-rtd) (set! bj2a17@&lexical-rcd bj2a0c@bj2a04) (set! bj2bf0@bj2a17@&lexical-rcd bj2a17@&lexical-rcd) (set! bj2a21@bj2a1c (make-record-type-descriptor '&syntax bj297e@bj2979 'bj2a1f '#f '#f '#((immutable form) (immutable subform)))) (set! bj2bf1@bj2a21@bj2a1c bj2a21@bj2a1c) (set! bj2a23@bj2a1e '#f) (set! bj2bf2@bj2a23@bj2a1e bj2a23@bj2a1e) (set! bj2a25@bj2a1d (make-record-constructor-descriptor bj2a21@bj2a1c bj2982@bj297a bj2a23@bj2a1e)) (set! bj2bf3@bj2a25@bj2a1d bj2a25@bj2a1d) (set! bj2a28@p? (record-predicate bj2a21@bj2a1c)) (set! bj2bf4@bj2a28@p? bj2a28@p?) (set! bj2a2a@make-syntax-violation (record-constructor bj2a25@bj2a1d)) (set! bj2bf5@bj2a2a@make-syntax-violation bj2a2a@make-syntax-violation) (set! bj2a2c@bj2a19 (record-accessor bj2a21@bj2a1c '0)) (set! bj2bf6@bj2a2c@bj2a19 bj2a2c@bj2a19) (set! bj2a2e@bj2a1b (record-accessor bj2a21@bj2a1c '1)) (set! bj2bf7@bj2a2e@bj2a1b bj2a2e@bj2a1b) (set! bj2a30@syntax-violation? (condition-predicate bj2a21@bj2a1c)) (set! bj2bf8@bj2a30@syntax-violation? bj2a30@syntax-violation?) (set! bj2a32@syntax-violation-form (condition-accessor bj2a21@bj2a1c bj2a2c@bj2a19)) (set! bj2bf9@bj2a32@syntax-violation-form bj2a32@syntax-violation-form) (set! bj2a34@syntax-violation-subform (condition-accessor bj2a21@bj2a1c bj2a2e@bj2a1b)) (set! bj2bfa@bj2a34@syntax-violation-subform bj2a34@syntax-violation-subform) (set! bj2a36@&syntax-rtd bj2a21@bj2a1c) (set! bj2bfb@bj2a36@&syntax-rtd bj2a36@&syntax-rtd) (set! bj2a38@&syntax-rcd bj2a25@bj2a1d) (set! bj2bfc@bj2a38@&syntax-rcd bj2a38@&syntax-rcd) (set! bj2a3e@bj2a39 (make-record-type-descriptor '&undefined bj297e@bj2979 'bj2a3c '#f '#f '#())) (set! bj2bfd@bj2a3e@bj2a39 bj2a3e@bj2a39) (set! bj2a40@bj2a3b '#f) (set! bj2bfe@bj2a40@bj2a3b bj2a40@bj2a3b) (set! bj2a42@bj2a3a (make-record-constructor-descriptor bj2a3e@bj2a39 bj2982@bj297a bj2a40@bj2a3b)) (set! bj2bff@bj2a42@bj2a3a bj2a42@bj2a3a) (set! bj2a45@p? (record-predicate bj2a3e@bj2a39)) (set! bj2c00@bj2a45@p? bj2a45@p?) (set! bj2a47@make-undefined-violation (record-constructor bj2a42@bj2a3a)) (set! bj2c01@bj2a47@make-undefined-violation bj2a47@make-undefined-violation) (set! bj2a49@undefined-violation? (condition-predicate bj2a3e@bj2a39)) (set! bj2c02@bj2a49@undefined-violation? bj2a49@undefined-violation?) (set! bj2a4b@&undefined-rtd bj2a3e@bj2a39) (set! bj2c03@bj2a4b@&undefined-rtd bj2a4b@&undefined-rtd) (set! bj2a4d@&undefined-rcd bj2a42@bj2a3a) (set! bj2c04@bj2a4d@&undefined-rcd bj2a4d@&undefined-rcd) (set! bj2a53@bj2a4e (make-record-type-descriptor '&i/o bj2969@bj2964 'bj2a51 '#f '#f '#())) (set! bj2c05@bj2a53@bj2a4e bj2a53@bj2a4e) (set! bj2a55@bj2a50 '#f) (set! bj2c06@bj2a55@bj2a50 bj2a55@bj2a50) (set! bj2a57@bj2a4f (make-record-constructor-descriptor bj2a53@bj2a4e bj296d@bj2965 bj2a55@bj2a50)) (set! bj2c07@bj2a57@bj2a4f bj2a57@bj2a4f) (set! bj2a5a@p? (record-predicate bj2a53@bj2a4e)) (set! bj2c08@bj2a5a@p? bj2a5a@p?) (set! bj2a5c@make-i/o-error (record-constructor bj2a57@bj2a4f)) (set! bj2c09@bj2a5c@make-i/o-error bj2a5c@make-i/o-error) (set! bj2a5e@i/o-error? (condition-predicate bj2a53@bj2a4e)) (set! bj2c0a@bj2a5e@i/o-error? bj2a5e@i/o-error?) (set! bj2a60@&i/o-rtd bj2a53@bj2a4e) (set! bj2c0b@bj2a60@&i/o-rtd bj2a60@&i/o-rtd) (set! bj2a62@&i/o-rcd bj2a57@bj2a4f) (set! bj2c0c@bj2a62@&i/o-rcd bj2a62@&i/o-rcd) (set! bj2a68@bj2a63 (make-record-type-descriptor '&i/o-read bj2a53@bj2a4e 'bj2a66 '#f '#f '#())) (set! bj2c0d@bj2a68@bj2a63 bj2a68@bj2a63) (set! bj2a6a@bj2a65 '#f) (set! bj2c0e@bj2a6a@bj2a65 bj2a6a@bj2a65) (set! bj2a6c@bj2a64 (make-record-constructor-descriptor bj2a68@bj2a63 bj2a57@bj2a4f bj2a6a@bj2a65)) (set! bj2c0f@bj2a6c@bj2a64 bj2a6c@bj2a64) (set! bj2a6f@p? (record-predicate bj2a68@bj2a63)) (set! bj2c10@bj2a6f@p? bj2a6f@p?) (set! bj2a71@make-i/o-read-error (record-constructor bj2a6c@bj2a64)) (set! bj2c11@bj2a71@make-i/o-read-error bj2a71@make-i/o-read-error) (set! bj2a73@i/o-read-error? (condition-predicate bj2a68@bj2a63)) (set! bj2c12@bj2a73@i/o-read-error? bj2a73@i/o-read-error?) (set! bj2a75@&i/o-read-rtd bj2a68@bj2a63) (set! bj2c13@bj2a75@&i/o-read-rtd bj2a75@&i/o-read-rtd) (set! bj2a77@&i/o-read-rcd bj2a6c@bj2a64) (set! bj2c14@bj2a77@&i/o-read-rcd bj2a77@&i/o-read-rcd) (set! bj2a7d@bj2a78 (make-record-type-descriptor '&i/o-write bj2a53@bj2a4e 'bj2a7b '#f '#f '#())) (set! bj2c15@bj2a7d@bj2a78 bj2a7d@bj2a78) (set! bj2a7f@bj2a7a '#f) (set! bj2c16@bj2a7f@bj2a7a bj2a7f@bj2a7a) (set! bj2a81@bj2a79 (make-record-constructor-descriptor bj2a7d@bj2a78 bj2a57@bj2a4f bj2a7f@bj2a7a)) (set! bj2c17@bj2a81@bj2a79 bj2a81@bj2a79) (set! bj2a84@p? (record-predicate bj2a7d@bj2a78)) (set! bj2c18@bj2a84@p? bj2a84@p?) (set! bj2a86@make-i/o-write-error (record-constructor bj2a81@bj2a79)) (set! bj2c19@bj2a86@make-i/o-write-error bj2a86@make-i/o-write-error) (set! bj2a88@i/o-write-error? (condition-predicate bj2a7d@bj2a78)) (set! bj2c1a@bj2a88@i/o-write-error? bj2a88@i/o-write-error?) (set! bj2a8a@&i/o-write-rtd bj2a7d@bj2a78) (set! bj2c1b@bj2a8a@&i/o-write-rtd bj2a8a@&i/o-write-rtd) (set! bj2a8c@&i/o-write-rcd bj2a81@bj2a79) (set! bj2c1c@bj2a8c@&i/o-write-rcd bj2a8c@&i/o-write-rcd) (set! bj2a94@bj2a8f (make-record-type-descriptor '&i/o-invalid-position bj2a53@bj2a4e 'bj2a92 '#f '#f '#((immutable position)))) (set! bj2c1d@bj2a94@bj2a8f bj2a94@bj2a8f) (set! bj2a96@bj2a91 '#f) (set! bj2c1e@bj2a96@bj2a91 bj2a96@bj2a91) (set! bj2a98@bj2a90 (make-record-constructor-descriptor bj2a94@bj2a8f bj2a57@bj2a4f bj2a96@bj2a91)) (set! bj2c1f@bj2a98@bj2a90 bj2a98@bj2a90) (set! bj2a9b@p? (record-predicate bj2a94@bj2a8f)) (set! bj2c20@bj2a9b@p? bj2a9b@p?) (set! bj2a9d@make-i/o-invalid-position-error (record-constructor bj2a98@bj2a90)) (set! bj2c21@bj2a9d@make-i/o-invalid-position-error bj2a9d@make-i/o-invalid-position-error) (set! bj2a9f@bj2a8e (record-accessor bj2a94@bj2a8f '0)) (set! bj2c22@bj2a9f@bj2a8e bj2a9f@bj2a8e) (set! bj2aa1@i/o-invalid-position-error? (condition-predicate bj2a94@bj2a8f)) (set! bj2c23@bj2aa1@i/o-invalid-position-error? bj2aa1@i/o-invalid-position-error?) (set! bj2aa3@i/o-error-position (condition-accessor bj2a94@bj2a8f bj2a9f@bj2a8e)) (set! bj2c24@bj2aa3@i/o-error-position bj2aa3@i/o-error-position) (set! bj2aa5@&i/o-invalid-position-rtd bj2a94@bj2a8f) (set! bj2c25@bj2aa5@&i/o-invalid-position-rtd bj2aa5@&i/o-invalid-position-rtd) (set! bj2aa7@&i/o-invalid-position-rcd bj2a98@bj2a90) (set! bj2c26@bj2aa7@&i/o-invalid-position-rcd bj2aa7@&i/o-invalid-position-rcd) (set! bj2aaf@bj2aaa (make-record-type-descriptor '&i/o-filename bj2a53@bj2a4e 'bj2aad '#f '#f '#((immutable filename)))) (set! bj2c27@bj2aaf@bj2aaa bj2aaf@bj2aaa) (set! bj2ab1@bj2aac '#f) (set! bj2c28@bj2ab1@bj2aac bj2ab1@bj2aac) (set! bj2ab3@bj2aab (make-record-constructor-descriptor bj2aaf@bj2aaa bj2a57@bj2a4f bj2ab1@bj2aac)) (set! bj2c29@bj2ab3@bj2aab bj2ab3@bj2aab) (set! bj2ab6@p? (record-predicate bj2aaf@bj2aaa)) (set! bj2c2a@bj2ab6@p? bj2ab6@p?) (set! bj2ab8@make-i/o-filename-error (record-constructor bj2ab3@bj2aab)) (set! bj2c2b@bj2ab8@make-i/o-filename-error bj2ab8@make-i/o-filename-error) (set! bj2aba@bj2aa9 (record-accessor bj2aaf@bj2aaa '0)) (set! bj2c2c@bj2aba@bj2aa9 bj2aba@bj2aa9) (set! bj2abc@i/o-filename-error? (condition-predicate bj2aaf@bj2aaa)) (set! bj2c2d@bj2abc@i/o-filename-error? bj2abc@i/o-filename-error?) (set! bj2abe@i/o-error-filename (condition-accessor bj2aaf@bj2aaa bj2aba@bj2aa9)) (set! bj2c2e@bj2abe@i/o-error-filename bj2abe@i/o-error-filename) (set! bj2ac0@&i/o-filename-rtd bj2aaf@bj2aaa) (set! bj2c2f@bj2ac0@&i/o-filename-rtd bj2ac0@&i/o-filename-rtd) (set! bj2ac2@&i/o-filename-rcd bj2ab3@bj2aab) (set! bj2c30@bj2ac2@&i/o-filename-rcd bj2ac2@&i/o-filename-rcd) (set! bj2ac8@bj2ac3 (make-record-type-descriptor '&i/o-file-protection bj2aaf@bj2aaa 'bj2ac6 '#f '#f '#())) (set! bj2c31@bj2ac8@bj2ac3 bj2ac8@bj2ac3) (set! bj2aca@bj2ac5 '#f) (set! bj2c32@bj2aca@bj2ac5 bj2aca@bj2ac5) (set! bj2acc@bj2ac4 (make-record-constructor-descriptor bj2ac8@bj2ac3 bj2ab3@bj2aab bj2aca@bj2ac5)) (set! bj2c33@bj2acc@bj2ac4 bj2acc@bj2ac4) (set! bj2acf@p? (record-predicate bj2ac8@bj2ac3)) (set! bj2c34@bj2acf@p? bj2acf@p?) (set! bj2ad1@make-i/o-file-protection-error (record-constructor bj2acc@bj2ac4)) (set! bj2c35@bj2ad1@make-i/o-file-protection-error bj2ad1@make-i/o-file-protection-error) (set! bj2ad3@i/o-file-protection-error? (condition-predicate bj2ac8@bj2ac3)) (set! bj2c36@bj2ad3@i/o-file-protection-error? bj2ad3@i/o-file-protection-error?) (set! bj2ad5@&i/o-file-protection-rtd bj2ac8@bj2ac3) (set! bj2c37@bj2ad5@&i/o-file-protection-rtd bj2ad5@&i/o-file-protection-rtd) (set! bj2ad7@&i/o-file-protection-rcd bj2acc@bj2ac4) (set! bj2c38@bj2ad7@&i/o-file-protection-rcd bj2ad7@&i/o-file-protection-rcd) (set! bj2add@bj2ad8 (make-record-type-descriptor '&i/o-file-is-read-only bj2ac8@bj2ac3 'bj2adb '#f '#f '#())) (set! bj2c39@bj2add@bj2ad8 bj2add@bj2ad8) (set! bj2adf@bj2ada '#f) (set! bj2c3a@bj2adf@bj2ada bj2adf@bj2ada) (set! bj2ae1@bj2ad9 (make-record-constructor-descriptor bj2add@bj2ad8 bj2acc@bj2ac4 bj2adf@bj2ada)) (set! bj2c3b@bj2ae1@bj2ad9 bj2ae1@bj2ad9) (set! bj2ae4@p? (record-predicate bj2add@bj2ad8)) (set! bj2c3c@bj2ae4@p? bj2ae4@p?) (set! bj2ae6@make-i/o-file-is-read-only-error (record-constructor bj2ae1@bj2ad9)) (set! bj2c3d@bj2ae6@make-i/o-file-is-read-only-error bj2ae6@make-i/o-file-is-read-only-error) (set! bj2ae8@i/o-file-is-read-only-error? (condition-predicate bj2add@bj2ad8)) (set! bj2c3e@bj2ae8@i/o-file-is-read-only-error? bj2ae8@i/o-file-is-read-only-error?) (set! bj2aea@&i/o-file-is-read-only-rtd bj2add@bj2ad8) (set! bj2c3f@bj2aea@&i/o-file-is-read-only-rtd bj2aea@&i/o-file-is-read-only-rtd) (set! bj2aec@&i/o-file-is-read-only-rcd bj2ae1@bj2ad9) (set! bj2c40@bj2aec@&i/o-file-is-read-only-rcd bj2aec@&i/o-file-is-read-only-rcd) (set! bj2af2@bj2aed (make-record-type-descriptor '&i/o-file-already-exists bj2aaf@bj2aaa 'bj2af0 '#f '#f '#())) (set! bj2c41@bj2af2@bj2aed bj2af2@bj2aed) (set! bj2af4@bj2aef '#f) (set! bj2c42@bj2af4@bj2aef bj2af4@bj2aef) (set! bj2af6@bj2aee (make-record-constructor-descriptor bj2af2@bj2aed bj2ab3@bj2aab bj2af4@bj2aef)) (set! bj2c43@bj2af6@bj2aee bj2af6@bj2aee) (set! bj2af9@p? (record-predicate bj2af2@bj2aed)) (set! bj2c44@bj2af9@p? bj2af9@p?) (set! bj2afb@make-i/o-file-already-exists-error (record-constructor bj2af6@bj2aee)) (set! bj2c45@bj2afb@make-i/o-file-already-exists-error bj2afb@make-i/o-file-already-exists-error) (set! bj2afd@i/o-file-already-exists-error? (condition-predicate bj2af2@bj2aed)) (set! bj2c46@bj2afd@i/o-file-already-exists-error? bj2afd@i/o-file-already-exists-error?) (set! bj2aff@&i/o-file-already-exists-rtd bj2af2@bj2aed) (set! bj2c47@bj2aff@&i/o-file-already-exists-rtd bj2aff@&i/o-file-already-exists-rtd) (set! bj2b01@&i/o-file-already-exists-rcd bj2af6@bj2aee) (set! bj2c48@bj2b01@&i/o-file-already-exists-rcd bj2b01@&i/o-file-already-exists-rcd) (set! bj2b07@bj2b02 (make-record-type-descriptor '&i/o-file-does-not-exist bj2aaf@bj2aaa 'bj2b05 '#f '#f '#())) (set! bj2c49@bj2b07@bj2b02 bj2b07@bj2b02) (set! bj2b09@bj2b04 '#f) (set! bj2c4a@bj2b09@bj2b04 bj2b09@bj2b04) (set! bj2b0b@bj2b03 (make-record-constructor-descriptor bj2b07@bj2b02 bj2ab3@bj2aab bj2b09@bj2b04)) (set! bj2c4b@bj2b0b@bj2b03 bj2b0b@bj2b03) (set! bj2b0e@p? (record-predicate bj2b07@bj2b02)) (set! bj2c4c@bj2b0e@p? bj2b0e@p?) (set! bj2b10@make-i/o-file-does-not-exist-error (record-constructor bj2b0b@bj2b03)) (set! bj2c4d@bj2b10@make-i/o-file-does-not-exist-error bj2b10@make-i/o-file-does-not-exist-error) (set! bj2b12@i/o-file-does-not-exist-error? (condition-predicate bj2b07@bj2b02)) (set! bj2c4e@bj2b12@i/o-file-does-not-exist-error? bj2b12@i/o-file-does-not-exist-error?) (set! bj2b14@&i/o-file-does-not-exist-rtd bj2b07@bj2b02) (set! bj2c4f@bj2b14@&i/o-file-does-not-exist-rtd bj2b14@&i/o-file-does-not-exist-rtd) (set! bj2b16@&i/o-file-does-not-exist-rcd bj2b0b@bj2b03) (set! bj2c50@bj2b16@&i/o-file-does-not-exist-rcd bj2b16@&i/o-file-does-not-exist-rcd) (set! bj2b1e@bj2b19 (make-record-type-descriptor '&i/o-port bj2a53@bj2a4e 'bj2b1c '#f '#f '#((immutable port)))) (set! bj2c51@bj2b1e@bj2b19 bj2b1e@bj2b19) (set! bj2b20@bj2b1b '#f) (set! bj2c52@bj2b20@bj2b1b bj2b20@bj2b1b) (set! bj2b22@bj2b1a (make-record-constructor-descriptor bj2b1e@bj2b19 bj2a57@bj2a4f bj2b20@bj2b1b)) (set! bj2c53@bj2b22@bj2b1a bj2b22@bj2b1a) (set! bj2b25@p? (record-predicate bj2b1e@bj2b19)) (set! bj2c54@bj2b25@p? bj2b25@p?) (set! bj2b27@make-i/o-port-error (record-constructor bj2b22@bj2b1a)) (set! bj2c55@bj2b27@make-i/o-port-error bj2b27@make-i/o-port-error) (set! bj2b29@bj2b18 (record-accessor bj2b1e@bj2b19 '0)) (set! bj2c56@bj2b29@bj2b18 bj2b29@bj2b18) (set! bj2b2b@i/o-port-error? (condition-predicate bj2b1e@bj2b19)) (set! bj2c57@bj2b2b@i/o-port-error? bj2b2b@i/o-port-error?) (set! bj2b2d@i/o-error-port (condition-accessor bj2b1e@bj2b19 bj2b29@bj2b18)) (set! bj2c58@bj2b2d@i/o-error-port bj2b2d@i/o-error-port) (set! bj2b2f@&i/o-port-rtd bj2b1e@bj2b19) (set! bj2c59@bj2b2f@&i/o-port-rtd bj2b2f@&i/o-port-rtd) (set! bj2b31@&i/o-port-rcd bj2b22@bj2b1a) (set! bj2c5a@bj2b31@&i/o-port-rcd bj2b31@&i/o-port-rcd) (set! bj2b37@bj2b32 (make-record-type-descriptor '&i/o-decoding bj2b1e@bj2b19 'bj2b35 '#f '#f '#())) (set! bj2c5b@bj2b37@bj2b32 bj2b37@bj2b32) (set! bj2b39@bj2b34 '#f) (set! bj2c5c@bj2b39@bj2b34 bj2b39@bj2b34) (set! bj2b3b@bj2b33 (make-record-constructor-descriptor bj2b37@bj2b32 bj2b22@bj2b1a bj2b39@bj2b34)) (set! bj2c5d@bj2b3b@bj2b33 bj2b3b@bj2b33) (set! bj2b3e@p? (record-predicate bj2b37@bj2b32)) (set! bj2c5e@bj2b3e@p? bj2b3e@p?) (set! bj2b40@make-i/o-decoding-error (record-constructor bj2b3b@bj2b33)) (set! bj2c5f@bj2b40@make-i/o-decoding-error bj2b40@make-i/o-decoding-error) (set! bj2b42@i/o-decoding-error? (condition-predicate bj2b37@bj2b32)) (set! bj2c60@bj2b42@i/o-decoding-error? bj2b42@i/o-decoding-error?) (set! bj2b44@&i/o-decoding-rtd bj2b37@bj2b32) (set! bj2c61@bj2b44@&i/o-decoding-rtd bj2b44@&i/o-decoding-rtd) (set! bj2b46@&i/o-decoding-rcd bj2b3b@bj2b33) (set! bj2c62@bj2b46@&i/o-decoding-rcd bj2b46@&i/o-decoding-rcd) (set! bj2b4e@bj2b49 (make-record-type-descriptor '&i/o-encoding bj2b1e@bj2b19 'bj2b4c '#f '#f '#((immutable char)))) (set! bj2c63@bj2b4e@bj2b49 bj2b4e@bj2b49) (set! bj2b50@bj2b4b '#f) (set! bj2c64@bj2b50@bj2b4b bj2b50@bj2b4b) (set! bj2b52@bj2b4a (make-record-constructor-descriptor bj2b4e@bj2b49 bj2b22@bj2b1a bj2b50@bj2b4b)) (set! bj2c65@bj2b52@bj2b4a bj2b52@bj2b4a) (set! bj2b55@p? (record-predicate bj2b4e@bj2b49)) (set! bj2c66@bj2b55@p? bj2b55@p?) (set! bj2b57@make-i/o-encoding-error (record-constructor bj2b52@bj2b4a)) (set! bj2c67@bj2b57@make-i/o-encoding-error bj2b57@make-i/o-encoding-error) (set! bj2b59@bj2b48 (record-accessor bj2b4e@bj2b49 '0)) (set! bj2c68@bj2b59@bj2b48 bj2b59@bj2b48) (set! bj2b5b@i/o-encoding-error? (condition-predicate bj2b4e@bj2b49)) (set! bj2c69@bj2b5b@i/o-encoding-error? bj2b5b@i/o-encoding-error?) (set! bj2b5d@i/o-encoding-error-char (condition-accessor bj2b4e@bj2b49 bj2b59@bj2b48)) (set! bj2c6a@bj2b5d@i/o-encoding-error-char bj2b5d@i/o-encoding-error-char) (set! bj2b5f@&i/o-encoding-rtd bj2b4e@bj2b49) (set! bj2c6b@bj2b5f@&i/o-encoding-rtd bj2b5f@&i/o-encoding-rtd) (set! bj2b61@&i/o-encoding-rcd bj2b52@bj2b4a) (set! bj2c6c@bj2b61@&i/o-encoding-rcd bj2b61@&i/o-encoding-rcd) (set! bj2b67@bj2b62 (make-record-type-descriptor '&no-infinities bj29f3@bj29ee 'bj2b65 '#f '#f '#())) (set! bj2c6d@bj2b67@bj2b62 bj2b67@bj2b62) (set! bj2b69@bj2b64 '#f) (set! bj2c6e@bj2b69@bj2b64 bj2b69@bj2b64) (set! bj2b6b@bj2b63 (make-record-constructor-descriptor bj2b67@bj2b62 bj29f7@bj29ef bj2b69@bj2b64)) (set! bj2c6f@bj2b6b@bj2b63 bj2b6b@bj2b63) (set! bj2b6e@p? (record-predicate bj2b67@bj2b62)) (set! bj2c70@bj2b6e@p? bj2b6e@p?) (set! bj2b70@make-no-infinities-violation (record-constructor bj2b6b@bj2b63)) (set! bj2c71@bj2b70@make-no-infinities-violation bj2b70@make-no-infinities-violation) (set! bj2b72@no-infinities-violation? (condition-predicate bj2b67@bj2b62)) (set! bj2c72@bj2b72@no-infinities-violation? bj2b72@no-infinities-violation?) (set! bj2b74@&no-infinities-rtd bj2b67@bj2b62) (set! bj2c73@bj2b74@&no-infinities-rtd bj2b74@&no-infinities-rtd) (set! bj2b76@&no-infinities-rcd bj2b6b@bj2b63) (set! bj2c74@bj2b76@&no-infinities-rcd bj2b76@&no-infinities-rcd) (set! bj2b7c@bj2b77 (make-record-type-descriptor '&no-nans bj29f3@bj29ee 'bj2b7a '#f '#f '#())) (set! bj2c75@bj2b7c@bj2b77 bj2b7c@bj2b77) (set! bj2b7e@bj2b79 '#f) (set! bj2c76@bj2b7e@bj2b79 bj2b7e@bj2b79) (set! bj2b80@bj2b78 (make-record-constructor-descriptor bj2b7c@bj2b77 bj29f7@bj29ef bj2b7e@bj2b79)) (set! bj2c77@bj2b80@bj2b78 bj2b80@bj2b78) (set! bj2b83@p? (record-predicate bj2b7c@bj2b77)) (set! bj2c78@bj2b83@p? bj2b83@p?) (set! bj2b85@make-no-nans-violation (record-constructor bj2b80@bj2b78)) (set! bj2c79@bj2b85@make-no-nans-violation bj2b85@make-no-nans-violation) (set! bj2b87@no-nans-violation? (condition-predicate bj2b7c@bj2b77)) (set! bj2c7a@bj2b87@no-nans-violation? bj2b87@no-nans-violation?) (set! bj2b89@&no-nans-rtd bj2b7c@bj2b77) (set! bj2c7b@bj2b89@&no-nans-rtd bj2b89@&no-nans-rtd) (set! bj2b8b@&no-nans-rcd bj2b80@bj2b78) (set! bj2c7c@bj2b8b@&no-nans-rcd bj2b8b@&no-nans-rcd) (void))
(begin (begin (bj712@bj6c7@current-primitive-locations (lambda (bj3147@x) (let ((bj3149@t (assq bj3147@x '((&no-nans-rcd . bj2c7c@bj2b8b@&no-nans-rcd) (&no-nans-rtd . bj2c7b@bj2b89@&no-nans-rtd) (&no-infinities-rcd . bj2c74@bj2b76@&no-infinities-rcd) (&no-infinities-rtd . bj2c73@bj2b74@&no-infinities-rtd) (&i/o-encoding-rcd . bj2c6c@bj2b61@&i/o-encoding-rcd) (&i/o-encoding-rtd . bj2c6b@bj2b5f@&i/o-encoding-rtd) (&i/o-decoding-rcd . bj2c62@bj2b46@&i/o-decoding-rcd) (&i/o-decoding-rtd . bj2c61@bj2b44@&i/o-decoding-rtd) (&i/o-port-rcd . bj2c5a@bj2b31@&i/o-port-rcd) (&i/o-port-rtd . bj2c59@bj2b2f@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . bj2c50@bj2b16@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . bj2c4f@bj2b14@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . bj2c48@bj2b01@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . bj2c47@bj2aff@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . bj2c40@bj2aec@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . bj2c3f@bj2aea@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . bj2c38@bj2ad7@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . bj2c37@bj2ad5@&i/o-file-protection-rtd) (&i/o-filename-rcd . bj2c30@bj2ac2@&i/o-filename-rcd) (&i/o-filename-rtd . bj2c2f@bj2ac0@&i/o-filename-rtd) (&i/o-invalid-position-rcd . bj2c26@bj2aa7@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . bj2c25@bj2aa5@&i/o-invalid-position-rtd) (&i/o-write-rcd . bj2c1c@bj2a8c@&i/o-write-rcd) (&i/o-write-rtd . bj2c1b@bj2a8a@&i/o-write-rtd) (&i/o-read-rcd . bj2c14@bj2a77@&i/o-read-rcd) (&i/o-read-rtd . bj2c13@bj2a75@&i/o-read-rtd) (&i/o-rcd . bj2c0c@bj2a62@&i/o-rcd) (&i/o-rtd . bj2c0b@bj2a60@&i/o-rtd) (&undefined-rcd . bj2c04@bj2a4d@&undefined-rcd) (&undefined-rtd . bj2c03@bj2a4b@&undefined-rtd) (&syntax-rcd . bj2bfc@bj2a38@&syntax-rcd) (&syntax-rtd . bj2bfb@bj2a36@&syntax-rtd) (&lexical-rcd . bj2bf0@bj2a17@&lexical-rcd) (&lexical-rtd . bj2bef@bj2a15@&lexical-rtd) (&implementation-restriction-rcd . bj2be8@bj2a02@&implementation-restriction-rcd) (&implementation-restriction-rtd . bj2be7@bj2a00@&implementation-restriction-rtd) (&non-continuable-rcd . bj2be0@bj29ed@&non-continuable-rcd) (&non-continuable-rtd . bj2bdf@bj29eb@&non-continuable-rtd) (&who-rcd . bj2bd8@bj29d8@&who-rcd) (&who-rtd . bj2bd7@bj29d6@&who-rtd) (&irritants-rcd . bj2bce@bj29bd@&irritants-rcd) (&irritants-rtd . bj2bcd@bj29bb@&irritants-rtd) (&assertion-rcd . bj2bc4@bj29a2@&assertion-rcd) (&assertion-rtd . bj2bc3@bj29a0@&assertion-rtd) (&violation-rcd . bj2bbc@bj298d@&violation-rcd) (&violation-rtd . bj2bbb@bj298b@&violation-rtd) (&error-rcd . bj2bb4@bj2978@&error-rcd) (&error-rtd . bj2bb3@bj2976@&error-rtd) (&serious-rcd . bj2bac@bj2963@&serious-rcd) (&serious-rtd . bj2bab@bj2961@&serious-rtd) (&warning-rcd . bj2ba4@bj294e@&warning-rcd) (&warning-rtd . bj2ba3@bj294c@&warning-rtd) (&message-rcd . bj2b9c@bj2939@&message-rcd) (&message-rtd . bj2b9b@bj2937@&message-rtd) (&condition-rcd . bj2b92@bj28da@&condition-rcd) (&condition-rtd . bj2b91@bj28d8@&condition-rtd) (syntax-error . bj28b4@bje58@syntax-error) (syntax-dispatch . bj2852@bjd7c@syntax-dispatch) (load . bj2df1@bj2c9c@load) (interaction-environment . bj28bd@bje6a@interaction-environment) (library-path . bj979@bj7b5@library-path) (mosh-cache-dir . bj6c0@bj59f@mosh-cache-dir) (make-parameter . bj6bf@bj59d@make-parameter) (make-variable-transformer . bj280f@bjba7@make-variable-transformer) (identifier? . bj28b7@bje5e@identifier?) (generate-temporaries . bj28ad@bje4a@generate-temporaries) (free-identifier=? . bj28ae@bje4c@free-identifier=?) (syntax->datum . bj28b9@bje62@syntax->datum) (datum->syntax . bj28b8@bje60@datum->syntax) (bound-identifier=? . bj28af@bje4e@bound-identifier=?) (make-i/o-write-error . bj2c19@bj2a86@make-i/o-write-error) (make-i/o-read-error . bj2c11@bj2a71@make-i/o-read-error) (make-i/o-port-error . bj2c55@bj2b27@make-i/o-port-error) (make-i/o-invalid-position-error . bj2c21@bj2a9d@make-i/o-invalid-position-error) (make-i/o-filename-error . bj2c2b@bj2ab8@make-i/o-filename-error) (make-i/o-file-protection-error . bj2c35@bj2ad1@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . bj2c3d@bj2ae6@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . bj2c4d@bj2b10@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . bj2c45@bj2afb@make-i/o-file-already-exists-error) (make-i/o-error . bj2c09@bj2a5c@make-i/o-error) (make-i/o-encoding-error . bj2c67@bj2b57@make-i/o-encoding-error) (make-i/o-decoding-error . bj2c5f@bj2b40@make-i/o-decoding-error) (i/o-write-error? . bj2c1a@bj2a88@i/o-write-error?) (i/o-read-error? . bj2c12@bj2a73@i/o-read-error?) (i/o-port-error? . bj2c57@bj2b2b@i/o-port-error?) (i/o-invalid-position-error? . bj2c23@bj2aa1@i/o-invalid-position-error?) (i/o-filename-error? . bj2c2d@bj2abc@i/o-filename-error?) (i/o-file-protection-error? . bj2c36@bj2ad3@i/o-file-protection-error?) (i/o-file-is-read-only-error? . bj2c3e@bj2ae8@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . bj2c4e@bj2b12@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . bj2c46@bj2afd@i/o-file-already-exists-error?) (i/o-error? . bj2c0a@bj2a5e@i/o-error?) (i/o-error-position . bj2c24@bj2aa3@i/o-error-position) (i/o-error-port . bj2c58@bj2b2d@i/o-error-port) (i/o-error-filename . bj2c2e@bj2abe@i/o-error-filename) (i/o-encoding-error? . bj2c69@bj2b5b@i/o-encoding-error?) (i/o-encoding-error-char . bj2c6a@bj2b5d@i/o-encoding-error-char) (i/o-decoding-error? . bj2c60@bj2b42@i/o-decoding-error?) (scheme-report-environment . bj28a4@bje38@scheme-report-environment) (null-environment . bj28a3@bje36@null-environment) (command-line . bj2dee@bj2c96@command-line) (eval . bj28a6@bje3c@eval) (environment . bj28a2@bje34@environment) (who-condition? . bj2bd5@bj29d2@who-condition?) (warning? . bj2ba2@bj294a@warning?) (violation? . bj2bba@bj2989@violation?) (undefined-violation? . bj2c02@bj2a49@undefined-violation?) (syntax-violation? . bj2bf8@bj2a30@syntax-violation?) (syntax-violation-subform . bj2bfa@bj2a34@syntax-violation-subform) (syntax-violation-form . bj2bf9@bj2a32@syntax-violation-form) (syntax-violation . bj28b6@bje5c@syntax-violation) (serious-condition? . bj2baa@bj295f@serious-condition?) (non-continuable-violation? . bj2bde@bj29e9@non-continuable-violation?) (message-condition? . bj2b99@bj2933@message-condition?) (make-who-condition . bj2bd3@bj29ce@make-who-condition) (make-warning . bj2ba1@bj2948@make-warning) (make-violation . bj2bb9@bj2987@make-violation) (make-undefined-violation . bj2c01@bj2a47@make-undefined-violation) (make-syntax-violation . bj2bf5@bj2a2a@make-syntax-violation) (make-serious-condition . bj2ba9@bj295d@make-serious-condition) (make-non-continuable-violation . bj2bdd@bj29e7@make-non-continuable-violation) (make-message-condition . bj2b97@bj292f@make-message-condition) (make-lexical-violation . bj2bed@bj2a11@make-lexical-violation) (make-irritants-condition . bj2bc9@bj29b3@make-irritants-condition) (make-implementation-restriction-violation . bj2be5@bj29fc@make-implementation-restriction-violation) (make-error . bj2bb1@bj2972@make-error) (make-assertion-violation . bj2bc1@bj299c@make-assertion-violation) (lexical-violation? . bj2bee@bj2a13@lexical-violation?) (irritants-condition? . bj2bcb@bj29b7@irritants-condition?) (implementation-restriction-violation? . bj2be6@bj29fe@implementation-restriction-violation?) (error? . bj2bb2@bj2974@error?) (condition-who . bj2bd6@bj29d4@condition-who) (condition-message . bj2b9a@bj2935@condition-message) (condition-irritants . bj2bcc@bj29b9@condition-irritants) (assertion-violation? . bj2bc2@bj299e@assertion-violation?) (no-nans-violation? . bj2c7a@bj2b87@no-nans-violation?) (no-infinities-violation? . bj2c72@bj2b72@no-infinities-violation?) (make-no-nans-violation . bj2c79@bj2b85@make-no-nans-violation) (make-no-infinities-violation . bj2c71@bj2b70@make-no-infinities-violation) (assertion-error . bj28b3@bje56@assertion-error))))) (if bj3149@t (cdr bj3149@t) '#f)))) (bj989@bj7d5@install-library 'bj3124 '(mosh interaction) '() '() '() '() '((regexp? . bj311c) (alist->eq-hash-table . bj3118) (format . bj3115) (string-split . bj310a) (call-process . bj3104) (set-current-directory! . bj3100) (expand-path . bj30ff) (current-directory . bj30fe) (%spawn . bj30fd) (%waitpid . bj30fc) (simple-struct-name . bj30fb) (simple-struct-set! . bj30fa) (simple-struct-ref . bj30f9) (make-simple-struct . bj30f8) (simple-struct? . bj30f7) (pointer-ref-c-int64 . bj30f6) (pointer-ref-c-int32 . bj30f5) (pointer-ref-c-int16 . bj30f4) (pointer-ref-c-int8 . bj30f3) (pointer-ref-c-uint64 . bj30f2) (pointer-ref-c-uint32 . bj30f1) (pointer-ref-c-uint16 . bj30f0) (pointer-ref-c-uint8 . bj30ef) (pointer-set-c-uint64! . bj30ee) (pointer-set-c-uint32! . bj30ed) (pointer-set-c-uint16! . bj30ec) (pointer-set-c-uint8! . bj30eb) (pointer-set-c-int64! . bj30ea) (pointer-set-c-int32! . bj30e9) (pointer-set-c-int16! . bj30e8) (pointer-set-c-int8! . bj30e7) (pointer-set-c-pointer! . bj30e6) (pointer-set-c-double! . bj30e5) (pointer-set-c-float! . bj30e4) (pointer-set-c-long-long! . bj30e3) (pointer-set-c-long! . bj30e2) (pointer-set-c-int! . bj30e1) (pointer-set-c-short! . bj30e0) (pointer-set-c-char! . bj30df) (pointer-ref-c-pointer . bj30de) (pointer-ref-c-double . bj30dd) (pointer-ref-c-float . bj30dc) (pointer-ref-c-unsigned-long-long . bj30db) (pointer-ref-c-signed-long-long . bj30da) (pointer-ref-c-unsigned-long . bj30d9) (pointer-ref-c-signed-long . bj30d8) (pointer-ref-c-unsigned-int . bj30d7) (pointer-ref-c-signed-int . bj30d6) (pointer-ref-c-unsigned-short . bj30d5) (pointer-ref-c-signed-short . bj30d4) (pointer-ref-c-unsigned-char . bj30d3) (pointer-ref-c-signed-char . bj30d2) (pointer->integer . bj30d1) (integer->pointer . bj30d0) (pointer? . bj30cf) (shared-errno . bj30ce) (%ffi-supported? . bj30c9) (%ffi-pointer->string . bj30c8) (%ffi-call . bj30c7) (%ffi-lookup . bj30c6) (%ffi-open . bj30c5) (null-terminated-utf8->string . bj30c4) (null-terminated-bytevector->string . bj30c3) (%fork . bj30c2) (%pipe . bj30c1) (p . bj30c0) (whereis . bj30a4) (register . bj30a3) (vm-join! . bj30a2) (vm-set-value! . bj30a1) (vm? . bj30a0) (main-vm? . bj309f) (vm-eval . bj309e) (vm-self . bj309d) (vm-start! . bj309c) (make-vm . bj309b) (mutex-try-lock! . bj309a) (mutex-unlock! . bj3099) (mutex-lock! . bj3098) (mutex? . bj3097) (make-mutex . bj3096) (condition-variable-notify-all! . bj3095) (condition-variable-notify! . bj3094) (condition-variable-wait! . bj3093) (make-condition-variable . bj3092) (string-upcase . bj307a) (string-titlecase . bj3079) (string-normalize-nfkd . bj3078) (string-normalize-nfkc . bj3077) (string-normalize-nfd . bj3076) (string-normalize-nfc . bj3075) (string-foldcase . bj3074) (string-downcase . bj3073) (string-ci>? . bj3072) (string-ci>=? . bj3071) (string-ci=? . bj3070) (string-ci<? . bj306f) (string-ci<=? . bj306e) (char-whitespace? . bj306d) (char-upper-case? . bj306c) (char-title-case? . bj306b) (char-numeric? . bj306a) (char-lower-case? . bj3069) (char-general-category . bj3068) (char-upcase . bj3067) (char-titlecase . bj3066) (char-foldcase . bj3065) (char-downcase . bj3064) (char-ci>? . bj3063) (char-ci>=? . bj3062) (char-ci=? . bj3061) (char-ci<? . bj3060) (char-ci<=? . bj305f) (char-alphabetic? . bj305e) (make-variable-transformer . bjba6) (identifier? . bje5d) (generate-temporaries . bje49) (free-identifier=? . bje4b) (syntax->datum . bje61) (datum->syntax . bje5f) (bound-identifier=? . bje4d) (record-type-descriptor? . bj305d) (record-predicate . bj305c) (record-mutator . bj305b) (record-constructor . bj305a) (record-accessor . bj3059) (make-record-type-descriptor . bj3058) (make-record-constructor-descriptor . bj3057) (record? . bj3056) (record-type-uid . bj3055) (record-type-sealed? . bj3054) (record-type-parent . bj3053) (record-type-opaque? . bj3052) (record-type-name . bj3051) (record-type-generative? . bj3050) (record-type-field-names . bj304f) (record-rtd . bj304e) (record-field-mutable? . bj304d) (delete-file . bj304c) (file-exists? . bj304b) (vector-sort! . bj304a) (vector-sort . bj3049) (list-sort . bj3048) (symbol-hash . bj3047) (string-ci-hash . bj3046) (string-hash . bj3045) (equal-hash . bj3044) (hashtable-equivalence-function . bj3043) (make-hashtable . bj3042) (hashtable-hash-function . bj3041) (make-eqv-hashtable . bj3040) (make-eq-hashtable . bj303f) (hashtable? . bj303e) (hashtable-update! . bj303d) (hashtable-size . bj303c) (hashtable-set! . bj303b) (hashtable-ref . bj303a) (hashtable-mutable? . bj3039) (hashtable-keys . bj3038) (hashtable-entries . bj3037) (hashtable-delete! . bj3036) (hashtable-copy . bj3035) (hashtable-contains? . bj3034) (hashtable-clear! . bj3033) (call-with-output-file . bj3032) (call-with-input-file . bj3031) (write-char . bj3030) (write . bj302f) (with-output-to-file . bj302e) (with-input-from-file . bj302d) (read-char . bj302c) (read . bj302b) (peek-char . bj302a) (open-output-file . bj3029) (open-input-file . bj3028) (newline . bj3027) (display . bj3026) (close-output-port . bj3025) (close-input-port . bj3024) (eof-object? . bj3023) (eof-object . bj3022) (current-error-port . bj3021) (current-output-port . bj3020) (current-input-port . bj301f) (output-port? . bj301e) (input-port? . bj301d) (utf-8-codec . bj301c) (utf-16-codec . bj301b) (transcoder-error-handling-mode . bj301a) (transcoder-eol-style . bj3019) (transcoder-codec . bj3018) (transcoded-port . bj3017) (textual-port? . bj3016) (string->bytevector . bj3015) (standard-output-port . bj3014) (standard-input-port . bj3013) (standard-error-port . bj3012) (set-port-position! . bj3011) (put-u8 . bj3010) (put-string . bj300f) (put-datum . bj300e) (put-char . bj300d) (put-bytevector . bj300c) (port? . bj300b) (port-transcoder . bj300a) (port-position . bj3009) (port-has-set-port-position!? . bj3008) (port-has-port-position? . bj3007) (port-eof? . bj3006) (output-port-buffer-mode . bj3005) (open-string-output-port . bj3004) (open-string-input-port . bj3003) (open-file-output-port . bj3002) (open-file-input/output-port . bj3001) (open-file-input-port . bj3000) (open-bytevector-output-port . bj2fff) (open-bytevector-input-port . bj2ffe) (native-transcoder . bj2ffd) (native-eol-style . bj2ffc) (make-transcoder . bj2ffb) (latin-1-codec . bj2ffa) (make-i/o-write-error . bj2a85) (make-i/o-read-error . bj2a70) (make-i/o-port-error . bj2b26) (make-i/o-invalid-position-error . bj2a9c) (make-i/o-filename-error . bj2ab7) (make-i/o-file-protection-error . bj2ad0) (make-i/o-file-is-read-only-error . bj2ae5) (make-i/o-file-does-not-exist-error . bj2b0f) (make-i/o-file-already-exists-error . bj2afa) (make-i/o-error . bj2a5b) (make-i/o-encoding-error . bj2b56) (make-i/o-decoding-error . bj2b3f) (make-custom-textual-output-port . bj2ff9) (make-custom-textual-input/output-port . bj2ff8) (make-custom-textual-input-port . bj2ff7) (make-custom-binary-output-port . bj2ff6) (make-custom-binary-input/output-port . bj2ff5) (make-custom-binary-input-port . bj2ff4) (make-bytevector . bj2ff3) (lookahead-u8 . bj2ff2) (lookahead-char . bj2ff1) (i/o-write-error? . bj2a87) (i/o-read-error? . bj2a72) (i/o-port-error? . bj2b2a) (i/o-invalid-position-error? . bj2aa0) (i/o-filename-error? . bj2abb) (i/o-file-protection-error? . bj2ad2) (i/o-file-is-read-only-error? . bj2ae7) (i/o-file-does-not-exist-error? . bj2b11) (i/o-file-already-exists-error? . bj2afc) (i/o-error? . bj2a5d) (i/o-error-position . bj2aa2) (i/o-error-port . bj2b2c) (i/o-error-filename . bj2abd) (i/o-encoding-error? . bj2b5a) (i/o-encoding-error-char . bj2b5c) (i/o-decoding-error? . bj2b41) (get-u8 . bj2ff0) (get-string-n! . bj2fef) (get-string-n . bj2fee) (get-string-all . bj2fed) (get-line . bj2fec) (get-datum . bj2feb) (get-char . bj2fea) (get-bytevector-some . bj2fe9) (get-bytevector-n! . bj2fe8) (get-bytevector-n . bj2fe7) (get-bytevector-all . bj2fe6) (flush-output-port . bj2fe5) (close-port . bj2fe4) (exit . bj2fdc) (command-line . bj2c95) (string-fill! . bj2fdb) (string-set! . bj2fda) (set-cdr! . bj2fd9) (set-car! . bj2fd8) (remove . bj2fd7) (remv . bj2fd6) (remp . bj2fd5) (remq . bj2fd4) (partition . bj2fd3) (memv . bj2fd2) (memq . bj2fd1) (memp . bj2fd0) (member . bj2fcf) (exists . bj2fce) (for-all . bj2fcd) (fold-right . bj2fcc) (fold-left . bj2fcb) (find . bj2fca) (filter . bj2fc9) (cons* . bj2fc8) (assv . bj2fc7) (assq . bj2fc6) (assp . bj2fc5) (assoc . bj2fc4) (call-with-string-output-port . bj2fc3) (call-with-port . bj2fc2) (call-with-bytevector-output-port . bj2fc1) (bytevector->string . bj2fc0) (buffer-mode? . bj2fbf) (binary-port? . bj2fbe) (with-exception-handler . bj2fbd) (raise-continuable . bj2fbc) (raise . bj2fbb) (eval . bje3b) (environment . bje33) (make-enumeration . bj2fba) (enum-set=? . bj2fb9) (enum-set-universe . bj2fb8) (enum-set-union . bj2fb7) (enum-set-subset? . bj2fb6) (enum-set-projection . bj2fb5) (enum-set-member? . bj2fb4) (enum-set-intersection . bj2fb3) (enum-set-indexer . bj2fb2) (enum-set-difference . bj2fb1) (enum-set-constructor . bj2fb0) (enum-set-complement . bj2faf) (enum-set->list . bj2fae) (who-condition? . bj29d1) (warning? . bj2949) (violation? . bj2988) (undefined-violation? . bj2a48) (syntax-violation? . bj2a2f) (syntax-violation-subform . bj2a33) (syntax-violation-form . bj2a31) (syntax-violation . bje5b) (simple-conditions . bj2fad) (serious-condition? . bj295e) (non-continuable-violation? . bj29e8) (message-condition? . bj2932) (make-who-condition . bj29cd) (make-warning . bj2947) (make-violation . bj2986) (make-undefined-violation . bj2a46) (make-syntax-violation . bj2a29) (make-serious-condition . bj295c) (make-non-continuable-violation . bj29e6) (make-message-condition . bj292e) (make-lexical-violation . bj2a10) (make-irritants-condition . bj29b2) (make-implementation-restriction-violation . bj29fb) (make-error . bj2971) (make-assertion-violation . bj299b) (lexical-violation? . bj2a12) (irritants-condition? . bj29b6) (implementation-restriction-violation? . bj29fd) (error? . bj2973) (condition-who . bj29d3) (condition-predicate . bj2fac) (condition-message . bj2934) (condition-irritants . bj29b8) (condition-accessor . bj2fab) (condition . bj2faa) (assertion-violation? . bj299d) (condition? . bj2fa9) (utf32->string . bj2fa8) (utf16->string . bj2fa7) (utf8->string . bj2fa6) (uint-list->bytevector . bj2fa5) (u8-list->bytevector . bj2fa4) (string->utf8 . bj2fa3) (string->utf32 . bj2fa2) (string->utf16 . bj2fa1) (sint-list->bytevector . bj2fa0) (native-endianness . bj2f9f) (bytevector? . bj2f9e) (bytevector=? . bj2f9d) (bytevector-uint-set! . bj2f9c) (bytevector-uint-ref . bj2f9b) (bytevector-u8-set! . bj2f9a) (bytevector-u8-ref . bj2f99) (bytevector-u64-set! . bj2f98) (bytevector-u64-ref . bj2f97) (bytevector-u64-native-set! . bj2f96) (bytevector-u64-native-ref . bj2f95) (bytevector-u32-set! . bj2f94) (bytevector-u32-ref . bj2f93) (bytevector-u32-native-set! . bj2f92) (bytevector-u32-native-ref . bj2f91) (bytevector-u16-set! . bj2f90) (bytevector-u16-ref . bj2f8f) (bytevector-u16-native-set! . bj2f8e) (bytevector-u16-native-ref . bj2f8d) (bytevector-sint-set! . bj2f8c) (bytevector-sint-ref . bj2f8b) (bytevector-s8-set! . bj2f8a) (bytevector-s8-ref . bj2f89) (bytevector-s64-set! . bj2f88) (bytevector-s64-ref . bj2f87) (bytevector-s64-native-set! . bj2f86) (bytevector-s64-native-ref . bj2f85) (bytevector-s32-set! . bj2f84) (bytevector-s32-ref . bj2f83) (bytevector-s32-native-set! . bj2f82) (bytevector-s32-native-ref . bj2f81) (bytevector-s16-set! . bj2f80) (bytevector-s16-ref . bj2f7f) (bytevector-s16-native-set! . bj2f7e) (bytevector-s16-native-ref . bj2f7d) (bytevector-length . bj2f7c) (bytevector-ieee-single-ref . bj2f7b) (bytevector-ieee-single-set! . bj2f7a) (bytevector-ieee-single-native-set! . bj2f79) (bytevector-ieee-single-native-ref . bj2f78) (bytevector-ieee-double-set! . bj2f77) (bytevector-ieee-double-ref . bj2f76) (bytevector-ieee-double-native-set! . bj2f75) (bytevector-ieee-double-native-ref . bj2f74) (bytevector-fill! . bj2f73) (bytevector-copy! . bj2f72) (bytevector-copy . bj2f71) (bytevector->uint-list . bj2f70) (bytevector->u8-list . bj2f6f) (bytevector->sint-list . bj2f6e) (no-nans-violation? . bj2b86) (no-infinities-violation? . bj2b71) (make-no-nans-violation . bj2b84) (make-no-infinities-violation . bj2b6f) (real->flonum . bj2f6d) (flzero? . bj2f6c) (fltruncate . bj2f6b) (fltan . bj2f6a) (flsqrt . bj2f69) (flsin . bj2f68) (flround . bj2f67) (flpositive? . bj2f66) (flonum? . bj2f65) (flodd? . bj2f64) (flnumerator . bj2f63) (flnegative? . bj2f62) (flnan? . bj2f61) (flmod0 . bj2f60) (flmod . bj2f5f) (flmin . bj2f5e) (flmax . bj2f5d) (fllog . bj2f5c) (flinteger? . bj2f5b) (flinfinite? . bj2f5a) (flfloor . bj2f59) (flfinite? . bj2f58) (flexpt . bj2f57) (flexp . bj2f56) (fleven? . bj2f55) (fldiv0-and-mod0 . bj2f54) (fldiv0 . bj2f53) (fldiv-and-mod . bj2f52) (fldiv . bj2f51) (fldenominator . bj2f50) (flcos . bj2f4f) (flceiling . bj2f4e) (flatan . bj2f4d) (flasin . bj2f4c) (flacos . bj2f4b) (flabs . bj2f4a) (fl>? . bj2f49) (fl>=? . bj2f48) (fl=? . bj2f47) (fl<? . bj2f46) (fl<=? . bj2f45) (fl/ . bj2f44) (fl- . bj2f43) (fl+ . bj2f42) (fl* . bj2f41) (fixnum->flonum . bj2f40) (fxzero? . bj2f3f) (fxxor . bj2f3e) (fxrotate-bit-field . bj2f3d) (fxreverse-bit-field . bj2f3c) (fxpositive? . bj2f3b) (fxodd? . bj2f3a) (fxnot . bj2f39) (fxnegative? . bj2f38) (fxmod0 . bj2f37) (fxmod . bj2f36) (fxmin . bj2f35) (fxmax . bj2f34) (fxlength . bj2f33) (fxior . bj2f32) (fxif . bj2f31) (fxfirst-bit-set . bj2f30) (fxeven? . bj2f2f) (fxdiv0-and-mod0 . bj2f2e) (fxdiv0 . bj2f2d) (fxdiv-and-mod . bj2f2c) (fxdiv . bj2f2b) (fxcopy-bit-field . bj2f2a) (fxcopy-bit . bj2f29) (fxbit-set? . bj2f28) (fxbit-field . bj2f27) (fxbit-count . bj2f26) (fxarithmetic-shift-right . bj2f25) (fxarithmetic-shift-left . bj2f24) (fxarithmetic-shift . bj2f23) (fxand . bj2f22) (fx>? . bj2f21) (fx>=? . bj2f20) (fx=? . bj2f1f) (fx<? . bj2f1e) (fx<=? . bj2f1d) (fx-/carry . bj2f1c) (fx- . bj2f1b) (fx+/carry . bj2f1a) (fx+ . bj2f19) (fx*/carry . bj2f18) (fx* . bj2f17) (greatest-fixnum . bj2f16) (least-fixnum . bj2f15) (fixnum-width . bj2f14) (fixnum? . bj2f13) (bitwise-rotate-bit-field . bj2f12) (bitwise-reverse-bit-field . bj2f11) (bitwise-length . bj2f10) (bitwise-if . bj2f0f) (bitwise-first-bit-set . bj2f0e) (bitwise-copy-bit-field . bj2f0d) (bitwise-copy-bit . bj2f0c) (bitwise-bit-set? . bj2f0b) (bitwise-bit-field . bj2f0a) (bitwise-bit-count . bj2f09) (bitwise-xor . bj2f08) (bitwise-ior . bj2f07) (bitwise-and . bj2f06) (bitwise-not . bj2f05) (bitwise-arithmetic-shift-right . bj2f04) (bitwise-arithmetic-shift-left . bj2f03) (bitwise-arithmetic-shift . bj2f02) (zero? . bj2f01) (vector? . bj2f00) (vector-set! . bj2eff) (vector-ref . bj2efe) (vector-map . bj2efd) (vector-length . bj2efc) (vector-for-each . bj2efb) (vector-fill! . bj2efa) (vector->list . bj2ef9) (vector . bj2ef8) (values . bj2ef7) (truncate . bj2ef6) (tan . bj2ef5) (symbol? . bj2ef4) (symbol=? . bj2ef3) (symbol->string . bj2ef2) (substring . bj2ef1) (string? . bj2ef0) (string>? . bj2eef) (string>=? . bj2eee) (string=? . bj2eed) (string<? . bj2eec) (string<=? . bj2eeb) (string-ref . bj2eea) (string-length . bj2ee9) (string-for-each . bj2ee8) (string-copy . bj2ee7) (string-append . bj2ee6) (string->symbol . bj2ee5) (string->number . bj2ee4) (string->list . bj2ee3) (string . bj2ee2) (sqrt . bj2ee1) (sin . bj2ee0) (round . bj2edf) (reverse . bj2ede) (real? . bj2edd) (real-valued? . bj2edc) (real-part . bj2edb) (rationalize . bj2eda) (rational? . bj2ed9) (rational-valued? . bj2ed8) (procedure? . bj2ed7) (positive? . bj2ed6) (pair? . bj2ed5) (odd? . bj2ed4) (numerator . bj2ed3) (number? . bj2ed2) (number->string . bj2ed1) (null? . bj2ed0) (not . bj2ecf) (negative? . bj2ece) (nan? . bj2ecd) (min . bj2ecc) (max . bj2ecb) (map . bj2eca) (make-vector . bj2ec9) (make-string . bj2ec8) (make-rectangular . bj2ec7) (make-polar . bj2ec6) (magnitude . bj2ec5) (log . bj2ec4) (list? . bj2ec3) (list-tail . bj2ec2) (list-ref . bj2ec1) (list->vector . bj2ec0) (list->string . bj2ebf) (list . bj2ebe) (length . bj2ebd) (lcm . bj2ebc) (integer? . bj2ebb) (integer-valued? . bj2eba) (integer->char . bj2eb9) (infinite? . bj2eb8) (inexact? . bj2eb7) (inexact . bj2eb6) (imag-part . bj2eb5) (gcd . bj2eb4) (for-each . bj2eb3) (floor . bj2eb2) (finite? . bj2eb1) (expt . bj2eb0) (exp . bj2eaf) (exact? . bj2eae) (exact-integer-sqrt . bj2ead) (exact . bj2eac) (even? . bj2eab) (error . bj2eaa) (eqv? . bj2ea9) (equal? . bj2ea8) (eq? . bj2ea7) (dynamic-wind . bj2ea6) (div0-and-mod0 . bj2ea5) (mod0 . bj2ea4) (div0 . bj2ea3) (div-and-mod . bj2ea2) (mod . bj2ea1) (div . bj2ea0) (denominator . bj2e9f) (cos . bj2e9e) (cons . bj2e9d) (complex? . bj2e9c) (char? . bj2e9b) (char>? . bj2e9a) (char>=? . bj2e99) (char=? . bj2e98) (char<? . bj2e97) (char<=? . bj2e96) (char->integer . bj2e95) (ceiling . bj2e94) (call-with-values . bj2e93) (call/cc . bj2e92) (call-with-current-continuation . bj2e91) (cddddr . bj2e90) (cdddar . bj2e8f) (cddadr . bj2e8e) (cddaar . bj2e8d) (cdaddr . bj2e8c) (cdadar . bj2e8b) (cdaadr . bj2e8a) (cdaaar . bj2e89) (cadddr . bj2e88) (caddar . bj2e87) (cadadr . bj2e86) (cadaar . bj2e85) (caaddr . bj2e84) (caadar . bj2e83) (caaadr . bj2e82) (caaaar . bj2e81) (cdddr . bj2e80) (cddar . bj2e7f) (cdadr . bj2e7e) (cdaar . bj2e7d) (caddr . bj2e7c) (cadar . bj2e7b) (caadr . bj2e7a) (caaar . bj2e79) (cddr . bj2e78) (cdar . bj2e77) (cadr . bj2e76) (caar . bj2e75) (cdr . bj2e74) (car . bj2e73) (boolean? . bj2e72) (boolean=? . bj2e71) (atan . bj2e70) (assertion-violation . bj2e6f) (asin . bj2e6e) (apply . bj2e6d) (append . bj2e6c) (angle . bj2e6b) (acos . bj2e6a) (abs . bj2e69) (/ . bj2e68) (* . bj2e67) (- . bj2e66) (+ . bj2e65) (>= . bj2e64) (> . bj2e63) (= . bj2e62) (<= . bj2e61) (< . bj2e60) (library . bj2e5f) (&no-nans . bj2e5e) (&no-infinities . bj2e5d) (&i/o-encoding . bj2e5c) (&i/o-decoding . bj2e5b) (&i/o-port . bj2e5a) (&i/o-file-does-not-exist . bj2e59) (&i/o-file-already-exists . bj2e58) (&i/o-file-is-read-only . bj2e57) (&i/o-file-protection . bj2e56) (&i/o-filename . bj2e55) (&i/o-invalid-position . bj2e54) (&i/o-write . bj2e53) (&i/o-read . bj2e52) (&i/o . bj2e51) (&undefined . bj2e50) (&syntax . bj2e4f) (&lexical . bj2e4e) (&implementation-restriction . bj2e4d) (&non-continuable . bj2e4c) (&who . bj2e4b) (&irritants . bj2e4a) (&assertion . bj2e49) (&violation . bj2e48) (&error . bj2e47) (&serious . bj2e46) (&warning . bj2e45) (&message . bj2e44) (&condition . bj2e43) (define-condition-type . bj2e42) (define-enumeration . bj2e41) (define-record-type . bj2e40) (parent-rtd . bj2e3f) (nongenerative . bj2e3e) (opaque . bj2e3d) (sealed . bj2e3c) (protocol . bj2e3b) (parent . bj2e3a) (immutable . bj2e39) (mutable . bj2e38) (fields . bj2e37) (error-handling-mode . bj2e36) (file-options . bj2e35) (buffer-mode . bj2e34) (eol-style . bj2e33) (guard . bj2e32) (unsyntax-splicing . bj2e2f) (unsyntax . bj2e2e) (unquote-splicing . bj2e2d) (unquote . bj2e2c) (_ . bj2e2b) (else . bj2e2a) (=> . bj2e29) (... . bj2e28) (assert . bj2e27) (endianness . bj2e26) (time . bj2e24) (do . bj2e23) (cond . bj2e22) (let* . bj2e21) (let*-values . bj2e20) (let-values . bj2e1f) (identifier-syntax . bj2e1e) (with-syntax . bj2e1d) (quasisyntax . bj2e1c) (quasiquote . bj2e1b) (syntax-rules . bj2e1a) (include . bj2e19) (record-constructor-descriptor . bj2e17) (record-type-descriptor . bj2e16) (case . bj2e15) (unless . bj2e13) (when . bj2e12) (or . bj2e11) (and . bj2e10) (if . bj2e0f) (let . bj2e0e) (letrec* . bj2e0d) (letrec . bj2e0c) (case-lambda . bj2e0a) (lambda . bj2e09) (syntax . bj2e08) (syntax-case . bj2e07) (quote . bj2e06) (letrec-syntax . bj2e04) (let-syntax . bj2e03) (set! . bj2e02) (import . bj2e01) (begin . bj2e00) (define-syntax . bj2dfe) (define . bj2dfd)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj3125 '(psyntax null-environment-5) '() '() '() '() '((make-promise . bj2fdd) (unquote-splicing . bj2e2d) (unquote . bj2e2c) (_ . bj2e2b) (else . bj2e2a) (=> . bj2e29) (... . bj2e28) (delay . bj2e25) (do . bj2e23) (cond . bj2e22) (let* . bj2e21) (quasiquote . bj2e1b) (syntax-rules . bj2e1a) (case . bj2e15) (or . bj2e11) (and . bj2e10) (if . bj2e0f) (let . bj2e0e) (letrec . bj2e0c) (lambda . bj2e09) (quote . bj2e06) (letrec-syntax . bj2e04) (let-syntax . bj2e03) (set! . bj2e02) (begin . bj2e00) (define-syntax . bj2dfe) (define . bj2dfd)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj3126 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . bj3072) (string-ci>=? . bj3071) (string-ci=? . bj3070) (string-ci<? . bj306f) (string-ci<=? . bj306e) (char-whitespace? . bj306d) (char-upper-case? . bj306c) (char-numeric? . bj306a) (char-lower-case? . bj3069) (char-upcase . bj3067) (char-downcase . bj3064) (char-ci>? . bj3063) (char-ci>=? . bj3062) (char-ci=? . bj3061) (char-ci<? . bj3060) (char-ci<=? . bj305f) (char-alphabetic? . bj305e) (call-with-output-file . bj3032) (call-with-input-file . bj3031) (write-char . bj3030) (write . bj302f) (with-output-to-file . bj302e) (with-input-from-file . bj302d) (read-char . bj302c) (read . bj302b) (peek-char . bj302a) (open-output-file . bj3029) (open-input-file . bj3028) (newline . bj3027) (display . bj3026) (close-output-port . bj3025) (close-input-port . bj3024) (eof-object . bj3022) (current-output-port . bj3020) (current-input-port . bj301f) (output-port? . bj301e) (input-port? . bj301d) (scheme-report-environment . bje37) (quotient . bj2fe3) (null-environment . bje35) (remainder . bj2fe2) (modulo . bj2fe1) (inexact->exact . bj2fe0) (force . bj2fdf) (exact->inexact . bj2fde) (make-promise . bj2fdd) (string-fill! . bj2fdb) (string-set! . bj2fda) (set-cdr! . bj2fd9) (set-car! . bj2fd8) (memv . bj2fd2) (memq . bj2fd1) (member . bj2fcf) (assv . bj2fc7) (assq . bj2fc6) (assoc . bj2fc4) (eval . bje3b) (zero? . bj2f01) (vector? . bj2f00) (vector-set! . bj2eff) (vector-ref . bj2efe) (vector-length . bj2efc) (vector-fill! . bj2efa) (vector->list . bj2ef9) (vector . bj2ef8) (values . bj2ef7) (truncate . bj2ef6) (tan . bj2ef5) (symbol? . bj2ef4) (symbol->string . bj2ef2) (substring . bj2ef1) (string? . bj2ef0) (string>? . bj2eef) (string>=? . bj2eee) (string=? . bj2eed) (string<? . bj2eec) (string<=? . bj2eeb) (string-ref . bj2eea) (string-length . bj2ee9) (string-copy . bj2ee7) (string-append . bj2ee6) (string->symbol . bj2ee5) (string->number . bj2ee4) (string->list . bj2ee3) (string . bj2ee2) (sqrt . bj2ee1) (sin . bj2ee0) (round . bj2edf) (reverse . bj2ede) (real? . bj2edd) (real-part . bj2edb) (rationalize . bj2eda) (rational? . bj2ed9) (procedure? . bj2ed7) (positive? . bj2ed6) (pair? . bj2ed5) (odd? . bj2ed4) (numerator . bj2ed3) (number? . bj2ed2) (number->string . bj2ed1) (not . bj2ecf) (negative? . bj2ece) (min . bj2ecc) (max . bj2ecb) (map . bj2eca) (make-vector . bj2ec9) (make-string . bj2ec8) (make-rectangular . bj2ec7) (make-polar . bj2ec6) (magnitude . bj2ec5) (log . bj2ec4) (list? . bj2ec3) (list-tail . bj2ec2) (list-ref . bj2ec1) (list->vector . bj2ec0) (list->string . bj2ebf) (list . bj2ebe) (length . bj2ebd) (lcm . bj2ebc) (integer? . bj2ebb) (integer->char . bj2eb9) (inexact? . bj2eb7) (imag-part . bj2eb5) (gcd . bj2eb4) (for-each . bj2eb3) (floor . bj2eb2) (expt . bj2eb0) (exp . bj2eaf) (exact? . bj2eae) (even? . bj2eab) (eqv? . bj2ea9) (equal? . bj2ea8) (eq? . bj2ea7) (dynamic-wind . bj2ea6) (denominator . bj2e9f) (cos . bj2e9e) (cons . bj2e9d) (complex? . bj2e9c) (char? . bj2e9b) (char>? . bj2e9a) (char>=? . bj2e99) (char=? . bj2e98) (char<? . bj2e97) (char<=? . bj2e96) (char->integer . bj2e95) (ceiling . bj2e94) (call-with-values . bj2e93) (call-with-current-continuation . bj2e91) (cddddr . bj2e90) (cdddar . bj2e8f) (cddadr . bj2e8e) (cddaar . bj2e8d) (cdaddr . bj2e8c) (cdadar . bj2e8b) (cdaadr . bj2e8a) (cdaaar . bj2e89) (cadddr . bj2e88) (caddar . bj2e87) (cadadr . bj2e86) (cadaar . bj2e85) (caaddr . bj2e84) (caadar . bj2e83) (caaadr . bj2e82) (caaaar . bj2e81) (cdddr . bj2e80) (cddar . bj2e7f) (cdadr . bj2e7e) (cdaar . bj2e7d) (caddr . bj2e7c) (cadar . bj2e7b) (caadr . bj2e7a) (caaar . bj2e79) (cddr . bj2e78) (cdar . bj2e77) (cadr . bj2e76) (caar . bj2e75) (cdr . bj2e74) (car . bj2e73) (boolean? . bj2e72) (atan . bj2e70) (asin . bj2e6e) (apply . bj2e6d) (append . bj2e6c) (angle . bj2e6b) (acos . bj2e6a) (abs . bj2e69) (/ . bj2e68) (* . bj2e67) (- . bj2e66) (+ . bj2e65) (>= . bj2e64) (> . bj2e63) (= . bj2e62) (<= . bj2e61) (< . bj2e60) (unquote-splicing . bj2e2d) (unquote . bj2e2c) (else . bj2e2a) (=> . bj2e29) (... . bj2e28) (delay . bj2e25) (do . bj2e23) (cond . bj2e22) (let* . bj2e21) (quasiquote . bj2e1b) (syntax-rules . bj2e1a) (case . bj2e15) (or . bj2e11) (and . bj2e10) (if . bj2e0f) (let . bj2e0e) (letrec . bj2e0c) (lambda . bj2e09) (quote . bj2e06) (letrec-syntax . bj2e04) (let-syntax . bj2e03) (set! . bj2e02) (begin . bj2e00) (define-syntax . bj2dfe) (define . bj2dfd)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj3127 '(psyntax modules) '() '() '() '() '((module . bj2dff)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj3128 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj3129 '(rnrs) '(6) '() '() '() '((regexp? . bj311c) (string-upcase . bj307a) (string-titlecase . bj3079) (string-normalize-nfkd . bj3078) (string-normalize-nfkc . bj3077) (string-normalize-nfd . bj3076) (string-normalize-nfc . bj3075) (string-foldcase . bj3074) (string-downcase . bj3073) (string-ci>? . bj3072) (string-ci>=? . bj3071) (string-ci=? . bj3070) (string-ci<? . bj306f) (string-ci<=? . bj306e) (char-whitespace? . bj306d) (char-upper-case? . bj306c) (char-title-case? . bj306b) (char-numeric? . bj306a) (char-lower-case? . bj3069) (char-general-category . bj3068) (char-upcase . bj3067) (char-titlecase . bj3066) (char-foldcase . bj3065) (char-downcase . bj3064) (char-ci>? . bj3063) (char-ci>=? . bj3062) (char-ci=? . bj3061) (char-ci<? . bj3060) (char-ci<=? . bj305f) (char-alphabetic? . bj305e) (make-variable-transformer . bjba6) (identifier? . bje5d) (generate-temporaries . bje49) (free-identifier=? . bje4b) (syntax->datum . bje61) (datum->syntax . bje5f) (bound-identifier=? . bje4d) (record-type-descriptor? . bj305d) (record-predicate . bj305c) (record-mutator . bj305b) (record-constructor . bj305a) (record-accessor . bj3059) (make-record-type-descriptor . bj3058) (make-record-constructor-descriptor . bj3057) (record? . bj3056) (record-type-uid . bj3055) (record-type-sealed? . bj3054) (record-type-parent . bj3053) (record-type-opaque? . bj3052) (record-type-name . bj3051) (record-type-generative? . bj3050) (record-type-field-names . bj304f) (record-rtd . bj304e) (record-field-mutable? . bj304d) (delete-file . bj304c) (file-exists? . bj304b) (vector-sort! . bj304a) (vector-sort . bj3049) (list-sort . bj3048) (symbol-hash . bj3047) (string-ci-hash . bj3046) (string-hash . bj3045) (equal-hash . bj3044) (hashtable-equivalence-function . bj3043) (make-hashtable . bj3042) (hashtable-hash-function . bj3041) (make-eqv-hashtable . bj3040) (make-eq-hashtable . bj303f) (hashtable? . bj303e) (hashtable-update! . bj303d) (hashtable-size . bj303c) (hashtable-set! . bj303b) (hashtable-ref . bj303a) (hashtable-mutable? . bj3039) (hashtable-keys . bj3038) (hashtable-entries . bj3037) (hashtable-delete! . bj3036) (hashtable-copy . bj3035) (hashtable-contains? . bj3034) (hashtable-clear! . bj3033) (call-with-output-file . bj3032) (call-with-input-file . bj3031) (write-char . bj3030) (write . bj302f) (with-output-to-file . bj302e) (with-input-from-file . bj302d) (read-char . bj302c) (read . bj302b) (peek-char . bj302a) (open-output-file . bj3029) (open-input-file . bj3028) (newline . bj3027) (display . bj3026) (close-output-port . bj3025) (close-input-port . bj3024) (eof-object? . bj3023) (eof-object . bj3022) (current-error-port . bj3021) (current-output-port . bj3020) (current-input-port . bj301f) (output-port? . bj301e) (input-port? . bj301d) (utf-8-codec . bj301c) (utf-16-codec . bj301b) (transcoder-error-handling-mode . bj301a) (transcoder-eol-style . bj3019) (transcoder-codec . bj3018) (transcoded-port . bj3017) (textual-port? . bj3016) (string->bytevector . bj3015) (standard-output-port . bj3014) (standard-input-port . bj3013) (standard-error-port . bj3012) (set-port-position! . bj3011) (put-u8 . bj3010) (put-string . bj300f) (put-datum . bj300e) (put-char . bj300d) (put-bytevector . bj300c) (port? . bj300b) (port-transcoder . bj300a) (port-position . bj3009) (port-has-set-port-position!? . bj3008) (port-has-port-position? . bj3007) (port-eof? . bj3006) (output-port-buffer-mode . bj3005) (open-string-output-port . bj3004) (open-string-input-port . bj3003) (open-file-output-port . bj3002) (open-file-input/output-port . bj3001) (open-file-input-port . bj3000) (open-bytevector-output-port . bj2fff) (open-bytevector-input-port . bj2ffe) (native-transcoder . bj2ffd) (native-eol-style . bj2ffc) (make-transcoder . bj2ffb) (latin-1-codec . bj2ffa) (make-i/o-write-error . bj2a85) (make-i/o-read-error . bj2a70) (make-i/o-port-error . bj2b26) (make-i/o-invalid-position-error . bj2a9c) (make-i/o-filename-error . bj2ab7) (make-i/o-file-protection-error . bj2ad0) (make-i/o-file-is-read-only-error . bj2ae5) (make-i/o-file-does-not-exist-error . bj2b0f) (make-i/o-file-already-exists-error . bj2afa) (make-i/o-error . bj2a5b) (make-i/o-encoding-error . bj2b56) (make-i/o-decoding-error . bj2b3f) (make-custom-textual-output-port . bj2ff9) (make-custom-textual-input/output-port . bj2ff8) (make-custom-textual-input-port . bj2ff7) (make-custom-binary-output-port . bj2ff6) (make-custom-binary-input/output-port . bj2ff5) (make-custom-binary-input-port . bj2ff4) (make-bytevector . bj2ff3) (lookahead-u8 . bj2ff2) (lookahead-char . bj2ff1) (i/o-write-error? . bj2a87) (i/o-read-error? . bj2a72) (i/o-port-error? . bj2b2a) (i/o-invalid-position-error? . bj2aa0) (i/o-filename-error? . bj2abb) (i/o-file-protection-error? . bj2ad2) (i/o-file-is-read-only-error? . bj2ae7) (i/o-file-does-not-exist-error? . bj2b11) (i/o-file-already-exists-error? . bj2afc) (i/o-error? . bj2a5d) (i/o-error-position . bj2aa2) (i/o-error-port . bj2b2c) (i/o-error-filename . bj2abd) (i/o-encoding-error? . bj2b5a) (i/o-encoding-error-char . bj2b5c) (i/o-decoding-error? . bj2b41) (get-u8 . bj2ff0) (get-string-n! . bj2fef) (get-string-n . bj2fee) (get-string-all . bj2fed) (get-line . bj2fec) (get-datum . bj2feb) (get-char . bj2fea) (get-bytevector-some . bj2fe9) (get-bytevector-n! . bj2fe8) (get-bytevector-n . bj2fe7) (get-bytevector-all . bj2fe6) (flush-output-port . bj2fe5) (close-port . bj2fe4) (exit . bj2fdc) (command-line . bj2c95) (remove . bj2fd7) (remv . bj2fd6) (remp . bj2fd5) (remq . bj2fd4) (partition . bj2fd3) (memv . bj2fd2) (memq . bj2fd1) (memp . bj2fd0) (member . bj2fcf) (exists . bj2fce) (for-all . bj2fcd) (fold-right . bj2fcc) (fold-left . bj2fcb) (find . bj2fca) (filter . bj2fc9) (cons* . bj2fc8) (assv . bj2fc7) (assq . bj2fc6) (assp . bj2fc5) (assoc . bj2fc4) (call-with-string-output-port . bj2fc3) (call-with-port . bj2fc2) (call-with-bytevector-output-port . bj2fc1) (bytevector->string . bj2fc0) (buffer-mode? . bj2fbf) (binary-port? . bj2fbe) (with-exception-handler . bj2fbd) (raise-continuable . bj2fbc) (raise . bj2fbb) (make-enumeration . bj2fba) (enum-set=? . bj2fb9) (enum-set-universe . bj2fb8) (enum-set-union . bj2fb7) (enum-set-subset? . bj2fb6) (enum-set-projection . bj2fb5) (enum-set-member? . bj2fb4) (enum-set-intersection . bj2fb3) (enum-set-indexer . bj2fb2) (enum-set-difference . bj2fb1) (enum-set-constructor . bj2fb0) (enum-set-complement . bj2faf) (enum-set->list . bj2fae) (who-condition? . bj29d1) (warning? . bj2949) (violation? . bj2988) (undefined-violation? . bj2a48) (syntax-violation? . bj2a2f) (syntax-violation-subform . bj2a33) (syntax-violation-form . bj2a31) (syntax-violation . bje5b) (simple-conditions . bj2fad) (serious-condition? . bj295e) (non-continuable-violation? . bj29e8) (message-condition? . bj2932) (make-who-condition . bj29cd) (make-warning . bj2947) (make-violation . bj2986) (make-undefined-violation . bj2a46) (make-syntax-violation . bj2a29) (make-serious-condition . bj295c) (make-non-continuable-violation . bj29e6) (make-message-condition . bj292e) (make-lexical-violation . bj2a10) (make-irritants-condition . bj29b2) (make-implementation-restriction-violation . bj29fb) (make-error . bj2971) (make-assertion-violation . bj299b) (lexical-violation? . bj2a12) (irritants-condition? . bj29b6) (implementation-restriction-violation? . bj29fd) (error? . bj2973) (condition-who . bj29d3) (condition-predicate . bj2fac) (condition-message . bj2934) (condition-irritants . bj29b8) (condition-accessor . bj2fab) (condition . bj2faa) (assertion-violation? . bj299d) (condition? . bj2fa9) (utf32->string . bj2fa8) (utf16->string . bj2fa7) (utf8->string . bj2fa6) (uint-list->bytevector . bj2fa5) (u8-list->bytevector . bj2fa4) (string->utf8 . bj2fa3) (string->utf32 . bj2fa2) (string->utf16 . bj2fa1) (sint-list->bytevector . bj2fa0) (native-endianness . bj2f9f) (bytevector? . bj2f9e) (bytevector=? . bj2f9d) (bytevector-uint-set! . bj2f9c) (bytevector-uint-ref . bj2f9b) (bytevector-u8-set! . bj2f9a) (bytevector-u8-ref . bj2f99) (bytevector-u64-set! . bj2f98) (bytevector-u64-ref . bj2f97) (bytevector-u64-native-set! . bj2f96) (bytevector-u64-native-ref . bj2f95) (bytevector-u32-set! . bj2f94) (bytevector-u32-ref . bj2f93) (bytevector-u32-native-set! . bj2f92) (bytevector-u32-native-ref . bj2f91) (bytevector-u16-set! . bj2f90) (bytevector-u16-ref . bj2f8f) (bytevector-u16-native-set! . bj2f8e) (bytevector-u16-native-ref . bj2f8d) (bytevector-sint-set! . bj2f8c) (bytevector-sint-ref . bj2f8b) (bytevector-s8-set! . bj2f8a) (bytevector-s8-ref . bj2f89) (bytevector-s64-set! . bj2f88) (bytevector-s64-ref . bj2f87) (bytevector-s64-native-set! . bj2f86) (bytevector-s64-native-ref . bj2f85) (bytevector-s32-set! . bj2f84) (bytevector-s32-ref . bj2f83) (bytevector-s32-native-set! . bj2f82) (bytevector-s32-native-ref . bj2f81) (bytevector-s16-set! . bj2f80) (bytevector-s16-ref . bj2f7f) (bytevector-s16-native-set! . bj2f7e) (bytevector-s16-native-ref . bj2f7d) (bytevector-length . bj2f7c) (bytevector-ieee-single-ref . bj2f7b) (bytevector-ieee-single-set! . bj2f7a) (bytevector-ieee-single-native-set! . bj2f79) (bytevector-ieee-single-native-ref . bj2f78) (bytevector-ieee-double-set! . bj2f77) (bytevector-ieee-double-ref . bj2f76) (bytevector-ieee-double-native-set! . bj2f75) (bytevector-ieee-double-native-ref . bj2f74) (bytevector-fill! . bj2f73) (bytevector-copy! . bj2f72) (bytevector-copy . bj2f71) (bytevector->uint-list . bj2f70) (bytevector->u8-list . bj2f6f) (bytevector->sint-list . bj2f6e) (no-nans-violation? . bj2b86) (no-infinities-violation? . bj2b71) (make-no-nans-violation . bj2b84) (make-no-infinities-violation . bj2b6f) (real->flonum . bj2f6d) (flzero? . bj2f6c) (fltruncate . bj2f6b) (fltan . bj2f6a) (flsqrt . bj2f69) (flsin . bj2f68) (flround . bj2f67) (flpositive? . bj2f66) (flonum? . bj2f65) (flodd? . bj2f64) (flnumerator . bj2f63) (flnegative? . bj2f62) (flnan? . bj2f61) (flmod0 . bj2f60) (flmod . bj2f5f) (flmin . bj2f5e) (flmax . bj2f5d) (fllog . bj2f5c) (flinteger? . bj2f5b) (flinfinite? . bj2f5a) (flfloor . bj2f59) (flfinite? . bj2f58) (flexpt . bj2f57) (flexp . bj2f56) (fleven? . bj2f55) (fldiv0-and-mod0 . bj2f54) (fldiv0 . bj2f53) (fldiv-and-mod . bj2f52) (fldiv . bj2f51) (fldenominator . bj2f50) (flcos . bj2f4f) (flceiling . bj2f4e) (flatan . bj2f4d) (flasin . bj2f4c) (flacos . bj2f4b) (flabs . bj2f4a) (fl>? . bj2f49) (fl>=? . bj2f48) (fl=? . bj2f47) (fl<? . bj2f46) (fl<=? . bj2f45) (fl/ . bj2f44) (fl- . bj2f43) (fl+ . bj2f42) (fl* . bj2f41) (fixnum->flonum . bj2f40) (fxzero? . bj2f3f) (fxxor . bj2f3e) (fxrotate-bit-field . bj2f3d) (fxreverse-bit-field . bj2f3c) (fxpositive? . bj2f3b) (fxodd? . bj2f3a) (fxnot . bj2f39) (fxnegative? . bj2f38) (fxmod0 . bj2f37) (fxmod . bj2f36) (fxmin . bj2f35) (fxmax . bj2f34) (fxlength . bj2f33) (fxior . bj2f32) (fxif . bj2f31) (fxfirst-bit-set . bj2f30) (fxeven? . bj2f2f) (fxdiv0-and-mod0 . bj2f2e) (fxdiv0 . bj2f2d) (fxdiv-and-mod . bj2f2c) (fxdiv . bj2f2b) (fxcopy-bit-field . bj2f2a) (fxcopy-bit . bj2f29) (fxbit-set? . bj2f28) (fxbit-field . bj2f27) (fxbit-count . bj2f26) (fxarithmetic-shift-right . bj2f25) (fxarithmetic-shift-left . bj2f24) (fxarithmetic-shift . bj2f23) (fxand . bj2f22) (fx>? . bj2f21) (fx>=? . bj2f20) (fx=? . bj2f1f) (fx<? . bj2f1e) (fx<=? . bj2f1d) (fx-/carry . bj2f1c) (fx- . bj2f1b) (fx+/carry . bj2f1a) (fx+ . bj2f19) (fx*/carry . bj2f18) (fx* . bj2f17) (greatest-fixnum . bj2f16) (least-fixnum . bj2f15) (fixnum-width . bj2f14) (fixnum? . bj2f13) (bitwise-rotate-bit-field . bj2f12) (bitwise-reverse-bit-field . bj2f11) (bitwise-length . bj2f10) (bitwise-if . bj2f0f) (bitwise-first-bit-set . bj2f0e) (bitwise-copy-bit-field . bj2f0d) (bitwise-copy-bit . bj2f0c) (bitwise-bit-set? . bj2f0b) (bitwise-bit-field . bj2f0a) (bitwise-bit-count . bj2f09) (bitwise-xor . bj2f08) (bitwise-ior . bj2f07) (bitwise-and . bj2f06) (bitwise-not . bj2f05) (bitwise-arithmetic-shift-right . bj2f04) (bitwise-arithmetic-shift-left . bj2f03) (bitwise-arithmetic-shift . bj2f02) (zero? . bj2f01) (vector? . bj2f00) (vector-set! . bj2eff) (vector-ref . bj2efe) (vector-map . bj2efd) (vector-length . bj2efc) (vector-for-each . bj2efb) (vector-fill! . bj2efa) (vector->list . bj2ef9) (vector . bj2ef8) (values . bj2ef7) (truncate . bj2ef6) (tan . bj2ef5) (symbol? . bj2ef4) (symbol=? . bj2ef3) (symbol->string . bj2ef2) (substring . bj2ef1) (string? . bj2ef0) (string>? . bj2eef) (string>=? . bj2eee) (string=? . bj2eed) (string<? . bj2eec) (string<=? . bj2eeb) (string-ref . bj2eea) (string-length . bj2ee9) (string-for-each . bj2ee8) (string-copy . bj2ee7) (string-append . bj2ee6) (string->symbol . bj2ee5) (string->number . bj2ee4) (string->list . bj2ee3) (string . bj2ee2) (sqrt . bj2ee1) (sin . bj2ee0) (round . bj2edf) (reverse . bj2ede) (real? . bj2edd) (real-valued? . bj2edc) (real-part . bj2edb) (rationalize . bj2eda) (rational? . bj2ed9) (rational-valued? . bj2ed8) (procedure? . bj2ed7) (positive? . bj2ed6) (pair? . bj2ed5) (odd? . bj2ed4) (numerator . bj2ed3) (number? . bj2ed2) (number->string . bj2ed1) (null? . bj2ed0) (not . bj2ecf) (negative? . bj2ece) (nan? . bj2ecd) (min . bj2ecc) (max . bj2ecb) (map . bj2eca) (make-vector . bj2ec9) (make-string . bj2ec8) (make-rectangular . bj2ec7) (make-polar . bj2ec6) (magnitude . bj2ec5) (log . bj2ec4) (list? . bj2ec3) (list-tail . bj2ec2) (list-ref . bj2ec1) (list->vector . bj2ec0) (list->string . bj2ebf) (list . bj2ebe) (length . bj2ebd) (lcm . bj2ebc) (integer? . bj2ebb) (integer-valued? . bj2eba) (integer->char . bj2eb9) (infinite? . bj2eb8) (inexact? . bj2eb7) (inexact . bj2eb6) (imag-part . bj2eb5) (gcd . bj2eb4) (for-each . bj2eb3) (floor . bj2eb2) (finite? . bj2eb1) (expt . bj2eb0) (exp . bj2eaf) (exact? . bj2eae) (exact-integer-sqrt . bj2ead) (exact . bj2eac) (even? . bj2eab) (error . bj2eaa) (eqv? . bj2ea9) (equal? . bj2ea8) (eq? . bj2ea7) (dynamic-wind . bj2ea6) (div0-and-mod0 . bj2ea5) (mod0 . bj2ea4) (div0 . bj2ea3) (div-and-mod . bj2ea2) (mod . bj2ea1) (div . bj2ea0) (denominator . bj2e9f) (cos . bj2e9e) (cons . bj2e9d) (complex? . bj2e9c) (char? . bj2e9b) (char>? . bj2e9a) (char>=? . bj2e99) (char=? . bj2e98) (char<? . bj2e97) (char<=? . bj2e96) (char->integer . bj2e95) (ceiling . bj2e94) (call-with-values . bj2e93) (call/cc . bj2e92) (call-with-current-continuation . bj2e91) (cddddr . bj2e90) (cdddar . bj2e8f) (cddadr . bj2e8e) (cddaar . bj2e8d) (cdaddr . bj2e8c) (cdadar . bj2e8b) (cdaadr . bj2e8a) (cdaaar . bj2e89) (cadddr . bj2e88) (caddar . bj2e87) (cadadr . bj2e86) (cadaar . bj2e85) (caaddr . bj2e84) (caadar . bj2e83) (caaadr . bj2e82) (caaaar . bj2e81) (cdddr . bj2e80) (cddar . bj2e7f) (cdadr . bj2e7e) (cdaar . bj2e7d) (caddr . bj2e7c) (cadar . bj2e7b) (caadr . bj2e7a) (caaar . bj2e79) (cddr . bj2e78) (cdar . bj2e77) (cadr . bj2e76) (caar . bj2e75) (cdr . bj2e74) (car . bj2e73) (boolean? . bj2e72) (boolean=? . bj2e71) (atan . bj2e70) (assertion-violation . bj2e6f) (asin . bj2e6e) (apply . bj2e6d) (append . bj2e6c) (angle . bj2e6b) (acos . bj2e6a) (abs . bj2e69) (/ . bj2e68) (* . bj2e67) (- . bj2e66) (+ . bj2e65) (>= . bj2e64) (> . bj2e63) (= . bj2e62) (<= . bj2e61) (< . bj2e60) (&no-nans . bj2e5e) (&no-infinities . bj2e5d) (&i/o-encoding . bj2e5c) (&i/o-decoding . bj2e5b) (&i/o-port . bj2e5a) (&i/o-file-does-not-exist . bj2e59) (&i/o-file-already-exists . bj2e58) (&i/o-file-is-read-only . bj2e57) (&i/o-file-protection . bj2e56) (&i/o-filename . bj2e55) (&i/o-invalid-position . bj2e54) (&i/o-write . bj2e53) (&i/o-read . bj2e52) (&i/o . bj2e51) (&undefined . bj2e50) (&syntax . bj2e4f) (&lexical . bj2e4e) (&implementation-restriction . bj2e4d) (&non-continuable . bj2e4c) (&who . bj2e4b) (&irritants . bj2e4a) (&assertion . bj2e49) (&violation . bj2e48) (&error . bj2e47) (&serious . bj2e46) (&warning . bj2e45) (&message . bj2e44) (&condition . bj2e43) (define-condition-type . bj2e42) (define-enumeration . bj2e41) (define-record-type . bj2e40) (parent-rtd . bj2e3f) (nongenerative . bj2e3e) (opaque . bj2e3d) (sealed . bj2e3c) (protocol . bj2e3b) (parent . bj2e3a) (immutable . bj2e39) (mutable . bj2e38) (fields . bj2e37) (error-handling-mode . bj2e36) (file-options . bj2e35) (buffer-mode . bj2e34) (eol-style . bj2e33) (guard . bj2e32) (unsyntax-splicing . bj2e2f) (unsyntax . bj2e2e) (unquote-splicing . bj2e2d) (unquote . bj2e2c) (_ . bj2e2b) (else . bj2e2a) (=> . bj2e29) (... . bj2e28) (assert . bj2e27) (endianness . bj2e26) (do . bj2e23) (cond . bj2e22) (let* . bj2e21) (let*-values . bj2e20) (let-values . bj2e1f) (identifier-syntax . bj2e1e) (with-syntax . bj2e1d) (quasisyntax . bj2e1c) (quasiquote . bj2e1b) (syntax-rules . bj2e1a) (record-constructor-descriptor . bj2e17) (record-type-descriptor . bj2e16) (case . bj2e15) (unless . bj2e13) (when . bj2e12) (or . bj2e11) (and . bj2e10) (if . bj2e0f) (let . bj2e0e) (letrec* . bj2e0d) (letrec . bj2e0c) (case-lambda . bj2e0a) (lambda . bj2e09) (syntax . bj2e08) (syntax-case . bj2e07) (quote . bj2e06) (letrec-syntax . bj2e04) (let-syntax . bj2e03) (set! . bj2e02) (begin . bj2e00) (define-syntax . bj2dfe) (define . bj2dfd)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj312a '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . bje37) (quotient . bj2fe3) (null-environment . bje35) (remainder . bj2fe2) (modulo . bj2fe1) (inexact->exact . bj2fe0) (force . bj2fdf) (exact->inexact . bj2fde) (make-promise . bj2fdd) (delay . bj2e25)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj312b '(rnrs control) '(6) '() '() '() '((do . bj2e23) (unless . bj2e13) (when . bj2e12) (case-lambda . bj2e0a)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj312c '(rnrs eval) '(6) '() '() '() '((eval . bje3b) (environment . bje33)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj312d '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . bj2fd9) (set-car! . bj2fd8)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj312e '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . bj2fdb) (string-set! . bj2fda)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj312f '(rnrs programs) '(6) '() '() '() '((exit . bj2fdc) (command-line . bj2c95)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj3130 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . bjba6) (identifier? . bje5d) (generate-temporaries . bje49) (free-identifier=? . bje4b) (syntax->datum . bje61) (datum->syntax . bje5f) (bound-identifier=? . bje4d) (syntax-violation . bje5b) (unsyntax-splicing . bj2e2f) (unsyntax . bj2e2e) (_ . bj2e2b) (... . bj2e28) (with-syntax . bj2e1d) (quasisyntax . bj2e1c) (syntax . bj2e08) (syntax-case . bj2e07)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj3131 '(rnrs files) '(6) '() '() '() '((delete-file . bj304c) (file-exists? . bj304b) (make-i/o-write-error . bj2a85) (make-i/o-read-error . bj2a70) (make-i/o-port-error . bj2b26) (make-i/o-invalid-position-error . bj2a9c) (make-i/o-filename-error . bj2ab7) (make-i/o-file-protection-error . bj2ad0) (make-i/o-file-is-read-only-error . bj2ae5) (make-i/o-file-does-not-exist-error . bj2b0f) (make-i/o-file-already-exists-error . bj2afa) (make-i/o-error . bj2a5b) (i/o-write-error? . bj2a87) (i/o-read-error? . bj2a72) (i/o-port-error? . bj2b2a) (i/o-invalid-position-error? . bj2aa0) (i/o-filename-error? . bj2abb) (i/o-file-protection-error? . bj2ad2) (i/o-file-is-read-only-error? . bj2ae7) (i/o-file-does-not-exist-error? . bj2b11) (i/o-file-already-exists-error? . bj2afc) (i/o-error? . bj2a5d) (i/o-error-position . bj2aa2) (i/o-error-port . bj2b2c) (i/o-error-filename . bj2abd) (&i/o-port . bj2e5a) (&i/o-file-does-not-exist . bj2e59) (&i/o-file-already-exists . bj2e58) (&i/o-file-is-read-only . bj2e57) (&i/o-file-protection . bj2e56) (&i/o-filename . bj2e55) (&i/o-invalid-position . bj2e54) (&i/o-write . bj2e53) (&i/o-read . bj2e52) (&i/o . bj2e51)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj3132 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . bj304a) (vector-sort . bj3049) (list-sort . bj3048)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj3133 '(rnrs base) '(6) '() '() '() '((zero? . bj2f01) (vector? . bj2f00) (vector-set! . bj2eff) (vector-ref . bj2efe) (vector-map . bj2efd) (vector-length . bj2efc) (vector-for-each . bj2efb) (vector-fill! . bj2efa) (vector->list . bj2ef9) (vector . bj2ef8) (values . bj2ef7) (truncate . bj2ef6) (tan . bj2ef5) (symbol? . bj2ef4) (symbol=? . bj2ef3) (symbol->string . bj2ef2) (substring . bj2ef1) (string? . bj2ef0) (string>? . bj2eef) (string>=? . bj2eee) (string=? . bj2eed) (string<? . bj2eec) (string<=? . bj2eeb) (string-ref . bj2eea) (string-length . bj2ee9) (string-for-each . bj2ee8) (string-copy . bj2ee7) (string-append . bj2ee6) (string->symbol . bj2ee5) (string->number . bj2ee4) (string->list . bj2ee3) (string . bj2ee2) (sqrt . bj2ee1) (sin . bj2ee0) (round . bj2edf) (reverse . bj2ede) (real? . bj2edd) (real-valued? . bj2edc) (real-part . bj2edb) (rationalize . bj2eda) (rational? . bj2ed9) (rational-valued? . bj2ed8) (procedure? . bj2ed7) (positive? . bj2ed6) (pair? . bj2ed5) (odd? . bj2ed4) (numerator . bj2ed3) (number? . bj2ed2) (number->string . bj2ed1) (null? . bj2ed0) (not . bj2ecf) (negative? . bj2ece) (nan? . bj2ecd) (min . bj2ecc) (max . bj2ecb) (map . bj2eca) (make-vector . bj2ec9) (make-string . bj2ec8) (make-rectangular . bj2ec7) (make-polar . bj2ec6) (magnitude . bj2ec5) (log . bj2ec4) (list? . bj2ec3) (list-tail . bj2ec2) (list-ref . bj2ec1) (list->vector . bj2ec0) (list->string . bj2ebf) (list . bj2ebe) (length . bj2ebd) (lcm . bj2ebc) (integer? . bj2ebb) (integer-valued? . bj2eba) (integer->char . bj2eb9) (infinite? . bj2eb8) (inexact? . bj2eb7) (inexact . bj2eb6) (imag-part . bj2eb5) (gcd . bj2eb4) (for-each . bj2eb3) (floor . bj2eb2) (finite? . bj2eb1) (expt . bj2eb0) (exp . bj2eaf) (exact? . bj2eae) (exact-integer-sqrt . bj2ead) (exact . bj2eac) (even? . bj2eab) (error . bj2eaa) (eqv? . bj2ea9) (equal? . bj2ea8) (eq? . bj2ea7) (dynamic-wind . bj2ea6) (div0-and-mod0 . bj2ea5) (mod0 . bj2ea4) (div0 . bj2ea3) (div-and-mod . bj2ea2) (mod . bj2ea1) (div . bj2ea0) (denominator . bj2e9f) (cos . bj2e9e) (cons . bj2e9d) (complex? . bj2e9c) (char? . bj2e9b) (char>? . bj2e9a) (char>=? . bj2e99) (char=? . bj2e98) (char<? . bj2e97) (char<=? . bj2e96) (char->integer . bj2e95) (ceiling . bj2e94) (call-with-values . bj2e93) (call/cc . bj2e92) (call-with-current-continuation . bj2e91) (cddddr . bj2e90) (cdddar . bj2e8f) (cddadr . bj2e8e) (cddaar . bj2e8d) (cdaddr . bj2e8c) (cdadar . bj2e8b) (cdaadr . bj2e8a) (cdaaar . bj2e89) (cadddr . bj2e88) (caddar . bj2e87) (cadadr . bj2e86) (cadaar . bj2e85) (caaddr . bj2e84) (caadar . bj2e83) (caaadr . bj2e82) (caaaar . bj2e81) (cdddr . bj2e80) (cddar . bj2e7f) (cdadr . bj2e7e) (cdaar . bj2e7d) (caddr . bj2e7c) (cadar . bj2e7b) (caadr . bj2e7a) (caaar . bj2e79) (cddr . bj2e78) (cdar . bj2e77) (cadr . bj2e76) (caar . bj2e75) (cdr . bj2e74) (car . bj2e73) (boolean? . bj2e72) (boolean=? . bj2e71) (atan . bj2e70) (assertion-violation . bj2e6f) (asin . bj2e6e) (apply . bj2e6d) (append . bj2e6c) (angle . bj2e6b) (acos . bj2e6a) (abs . bj2e69) (/ . bj2e68) (* . bj2e67) (- . bj2e66) (+ . bj2e65) (>= . bj2e64) (> . bj2e63) (= . bj2e62) (<= . bj2e61) (< . bj2e60) (unquote-splicing . bj2e2d) (unquote . bj2e2c) (_ . bj2e2b) (else . bj2e2a) (=> . bj2e29) (... . bj2e28) (assert . bj2e27) (cond . bj2e22) (let* . bj2e21) (let*-values . bj2e20) (let-values . bj2e1f) (identifier-syntax . bj2e1e) (quasiquote . bj2e1b) (syntax-rules . bj2e1a) (case . bj2e15) (or . bj2e11) (and . bj2e10) (if . bj2e0f) (let . bj2e0e) (letrec* . bj2e0d) (letrec . bj2e0c) (lambda . bj2e09) (quote . bj2e06) (letrec-syntax . bj2e04) (let-syntax . bj2e03) (set! . bj2e02) (begin . bj2e00) (define-syntax . bj2dfe) (define . bj2dfd)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj3134 '(rnrs lists) '(6) '() '() '() '((remove . bj2fd7) (remv . bj2fd6) (remp . bj2fd5) (remq . bj2fd4) (partition . bj2fd3) (memv . bj2fd2) (memq . bj2fd1) (memp . bj2fd0) (member . bj2fcf) (exists . bj2fce) (for-all . bj2fcd) (fold-right . bj2fcc) (fold-left . bj2fcb) (find . bj2fca) (filter . bj2fc9) (cons* . bj2fc8) (assv . bj2fc7) (assq . bj2fc6) (assp . bj2fc5) (assoc . bj2fc4)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj3135 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . bj3032) (call-with-input-file . bj3031) (write-char . bj3030) (write . bj302f) (with-output-to-file . bj302e) (with-input-from-file . bj302d) (read-char . bj302c) (read . bj302b) (peek-char . bj302a) (open-output-file . bj3029) (open-input-file . bj3028) (newline . bj3027) (display . bj3026) (close-output-port . bj3025) (close-input-port . bj3024) (eof-object? . bj3023) (eof-object . bj3022) (current-error-port . bj3021) (current-output-port . bj3020) (current-input-port . bj301f) (output-port? . bj301e) (input-port? . bj301d) (make-i/o-write-error . bj2a85) (make-i/o-read-error . bj2a70) (make-i/o-port-error . bj2b26) (make-i/o-invalid-position-error . bj2a9c) (make-i/o-filename-error . bj2ab7) (make-i/o-file-protection-error . bj2ad0) (make-i/o-file-is-read-only-error . bj2ae5) (make-i/o-file-does-not-exist-error . bj2b0f) (make-i/o-file-already-exists-error . bj2afa) (make-i/o-error . bj2a5b) (i/o-write-error? . bj2a87) (i/o-read-error? . bj2a72) (i/o-port-error? . bj2b2a) (i/o-invalid-position-error? . bj2aa0) (i/o-filename-error? . bj2abb) (i/o-file-protection-error? . bj2ad2) (i/o-file-is-read-only-error? . bj2ae7) (i/o-file-does-not-exist-error? . bj2b11) (i/o-file-already-exists-error? . bj2afc) (i/o-error? . bj2a5d) (i/o-error-position . bj2aa2) (i/o-error-port . bj2b2c) (i/o-error-filename . bj2abd) (&i/o-port . bj2e5a) (&i/o-file-does-not-exist . bj2e59) (&i/o-file-already-exists . bj2e58) (&i/o-file-is-read-only . bj2e57) (&i/o-file-protection . bj2e56) (&i/o-filename . bj2e55) (&i/o-invalid-position . bj2e54) (&i/o-write . bj2e53) (&i/o-read . bj2e52) (&i/o . bj2e51)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj3136 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . bj2ff3) (utf32->string . bj2fa8) (utf16->string . bj2fa7) (utf8->string . bj2fa6) (uint-list->bytevector . bj2fa5) (u8-list->bytevector . bj2fa4) (string->utf8 . bj2fa3) (string->utf32 . bj2fa2) (string->utf16 . bj2fa1) (sint-list->bytevector . bj2fa0) (native-endianness . bj2f9f) (bytevector? . bj2f9e) (bytevector=? . bj2f9d) (bytevector-uint-set! . bj2f9c) (bytevector-uint-ref . bj2f9b) (bytevector-u8-set! . bj2f9a) (bytevector-u8-ref . bj2f99) (bytevector-u64-set! . bj2f98) (bytevector-u64-ref . bj2f97) (bytevector-u64-native-set! . bj2f96) (bytevector-u64-native-ref . bj2f95) (bytevector-u32-set! . bj2f94) (bytevector-u32-ref . bj2f93) (bytevector-u32-native-set! . bj2f92) (bytevector-u32-native-ref . bj2f91) (bytevector-u16-set! . bj2f90) (bytevector-u16-ref . bj2f8f) (bytevector-u16-native-set! . bj2f8e) (bytevector-u16-native-ref . bj2f8d) (bytevector-sint-set! . bj2f8c) (bytevector-sint-ref . bj2f8b) (bytevector-s8-set! . bj2f8a) (bytevector-s8-ref . bj2f89) (bytevector-s64-set! . bj2f88) (bytevector-s64-ref . bj2f87) (bytevector-s64-native-set! . bj2f86) (bytevector-s64-native-ref . bj2f85) (bytevector-s32-set! . bj2f84) (bytevector-s32-ref . bj2f83) (bytevector-s32-native-set! . bj2f82) (bytevector-s32-native-ref . bj2f81) (bytevector-s16-set! . bj2f80) (bytevector-s16-ref . bj2f7f) (bytevector-s16-native-set! . bj2f7e) (bytevector-s16-native-ref . bj2f7d) (bytevector-length . bj2f7c) (bytevector-ieee-single-ref . bj2f7b) (bytevector-ieee-single-set! . bj2f7a) (bytevector-ieee-single-native-set! . bj2f79) (bytevector-ieee-single-native-ref . bj2f78) (bytevector-ieee-double-set! . bj2f77) (bytevector-ieee-double-ref . bj2f76) (bytevector-ieee-double-native-set! . bj2f75) (bytevector-ieee-double-native-ref . bj2f74) (bytevector-fill! . bj2f73) (bytevector-copy! . bj2f72) (bytevector-copy . bj2f71) (bytevector->uint-list . bj2f70) (bytevector->u8-list . bj2f6f) (bytevector->sint-list . bj2f6e) (endianness . bj2e26)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj3137 '(rnrs unicode) '(6) '() '() '() '((string-upcase . bj307a) (string-titlecase . bj3079) (string-normalize-nfkd . bj3078) (string-normalize-nfkc . bj3077) (string-normalize-nfd . bj3076) (string-normalize-nfc . bj3075) (string-foldcase . bj3074) (string-downcase . bj3073) (string-ci>? . bj3072) (string-ci>=? . bj3071) (string-ci=? . bj3070) (string-ci<? . bj306f) (string-ci<=? . bj306e) (char-whitespace? . bj306d) (char-upper-case? . bj306c) (char-title-case? . bj306b) (char-numeric? . bj306a) (char-lower-case? . bj3069) (char-general-category . bj3068) (char-upcase . bj3067) (char-titlecase . bj3066) (char-foldcase . bj3065) (char-downcase . bj3064) (char-ci>? . bj3063) (char-ci>=? . bj3062) (char-ci=? . bj3061) (char-ci<? . bj3060) (char-ci<=? . bj305f) (char-alphabetic? . bj305e)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj3138 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . bj2fbd) (raise-continuable . bj2fbc) (raise . bj2fbb) (guard . bj2e32) (else . bj2e2a) (=> . bj2e29)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj3139 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . bj2f12) (bitwise-reverse-bit-field . bj2f11) (bitwise-length . bj2f10) (bitwise-if . bj2f0f) (bitwise-first-bit-set . bj2f0e) (bitwise-copy-bit-field . bj2f0d) (bitwise-copy-bit . bj2f0c) (bitwise-bit-set? . bj2f0b) (bitwise-bit-field . bj2f0a) (bitwise-bit-count . bj2f09) (bitwise-xor . bj2f08) (bitwise-ior . bj2f07) (bitwise-and . bj2f06) (bitwise-not . bj2f05) (bitwise-arithmetic-shift-right . bj2f04) (bitwise-arithmetic-shift-left . bj2f03) (bitwise-arithmetic-shift . bj2f02)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj313a '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . bj2f3f) (fxxor . bj2f3e) (fxrotate-bit-field . bj2f3d) (fxreverse-bit-field . bj2f3c) (fxpositive? . bj2f3b) (fxodd? . bj2f3a) (fxnot . bj2f39) (fxnegative? . bj2f38) (fxmod0 . bj2f37) (fxmod . bj2f36) (fxmin . bj2f35) (fxmax . bj2f34) (fxlength . bj2f33) (fxior . bj2f32) (fxif . bj2f31) (fxfirst-bit-set . bj2f30) (fxeven? . bj2f2f) (fxdiv0-and-mod0 . bj2f2e) (fxdiv0 . bj2f2d) (fxdiv-and-mod . bj2f2c) (fxdiv . bj2f2b) (fxcopy-bit-field . bj2f2a) (fxcopy-bit . bj2f29) (fxbit-set? . bj2f28) (fxbit-field . bj2f27) (fxbit-count . bj2f26) (fxarithmetic-shift-right . bj2f25) (fxarithmetic-shift-left . bj2f24) (fxarithmetic-shift . bj2f23) (fxand . bj2f22) (fx>? . bj2f21) (fx>=? . bj2f20) (fx=? . bj2f1f) (fx<? . bj2f1e) (fx<=? . bj2f1d) (fx-/carry . bj2f1c) (fx- . bj2f1b) (fx+/carry . bj2f1a) (fx+ . bj2f19) (fx*/carry . bj2f18) (fx* . bj2f17) (greatest-fixnum . bj2f16) (least-fixnum . bj2f15) (fixnum-width . bj2f14) (fixnum? . bj2f13)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj313b '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . bj2b86) (no-infinities-violation? . bj2b71) (make-no-nans-violation . bj2b84) (make-no-infinities-violation . bj2b6f) (real->flonum . bj2f6d) (flzero? . bj2f6c) (fltruncate . bj2f6b) (fltan . bj2f6a) (flsqrt . bj2f69) (flsin . bj2f68) (flround . bj2f67) (flpositive? . bj2f66) (flonum? . bj2f65) (flodd? . bj2f64) (flnumerator . bj2f63) (flnegative? . bj2f62) (flnan? . bj2f61) (flmod0 . bj2f60) (flmod . bj2f5f) (flmin . bj2f5e) (flmax . bj2f5d) (fllog . bj2f5c) (flinteger? . bj2f5b) (flinfinite? . bj2f5a) (flfloor . bj2f59) (flfinite? . bj2f58) (flexpt . bj2f57) (flexp . bj2f56) (fleven? . bj2f55) (fldiv0-and-mod0 . bj2f54) (fldiv0 . bj2f53) (fldiv-and-mod . bj2f52) (fldiv . bj2f51) (fldenominator . bj2f50) (flcos . bj2f4f) (flceiling . bj2f4e) (flatan . bj2f4d) (flasin . bj2f4c) (flacos . bj2f4b) (flabs . bj2f4a) (fl>? . bj2f49) (fl>=? . bj2f48) (fl=? . bj2f47) (fl<? . bj2f46) (fl<=? . bj2f45) (fl/ . bj2f44) (fl- . bj2f43) (fl+ . bj2f42) (fl* . bj2f41) (fixnum->flonum . bj2f40) (&no-nans . bj2e5e) (&no-infinities . bj2e5d)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj313c '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . bj3047) (string-ci-hash . bj3046) (string-hash . bj3045) (equal-hash . bj3044) (hashtable-equivalence-function . bj3043) (make-hashtable . bj3042) (hashtable-hash-function . bj3041) (make-eqv-hashtable . bj3040) (make-eq-hashtable . bj303f) (hashtable? . bj303e) (hashtable-update! . bj303d) (hashtable-size . bj303c) (hashtable-set! . bj303b) (hashtable-ref . bj303a) (hashtable-mutable? . bj3039) (hashtable-keys . bj3038) (hashtable-entries . bj3037) (hashtable-delete! . bj3036) (hashtable-copy . bj3035) (hashtable-contains? . bj3034) (hashtable-clear! . bj3033)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj313d '(rnrs io ports) '(6) '() '() '() '((eof-object? . bj3023) (eof-object . bj3022) (current-error-port . bj3021) (current-output-port . bj3020) (current-input-port . bj301f) (output-port? . bj301e) (input-port? . bj301d) (utf-8-codec . bj301c) (utf-16-codec . bj301b) (transcoder-error-handling-mode . bj301a) (transcoder-eol-style . bj3019) (transcoder-codec . bj3018) (transcoded-port . bj3017) (textual-port? . bj3016) (string->bytevector . bj3015) (standard-output-port . bj3014) (standard-input-port . bj3013) (standard-error-port . bj3012) (set-port-position! . bj3011) (put-u8 . bj3010) (put-string . bj300f) (put-datum . bj300e) (put-char . bj300d) (put-bytevector . bj300c) (port? . bj300b) (port-transcoder . bj300a) (port-position . bj3009) (port-has-set-port-position!? . bj3008) (port-has-port-position? . bj3007) (port-eof? . bj3006) (output-port-buffer-mode . bj3005) (open-string-output-port . bj3004) (open-string-input-port . bj3003) (open-file-output-port . bj3002) (open-file-input/output-port . bj3001) (open-file-input-port . bj3000) (open-bytevector-output-port . bj2fff) (open-bytevector-input-port . bj2ffe) (native-transcoder . bj2ffd) (native-eol-style . bj2ffc) (make-transcoder . bj2ffb) (latin-1-codec . bj2ffa) (make-i/o-write-error . bj2a85) (make-i/o-read-error . bj2a70) (make-i/o-port-error . bj2b26) (make-i/o-invalid-position-error . bj2a9c) (make-i/o-filename-error . bj2ab7) (make-i/o-file-protection-error . bj2ad0) (make-i/o-file-is-read-only-error . bj2ae5) (make-i/o-file-does-not-exist-error . bj2b0f) (make-i/o-file-already-exists-error . bj2afa) (make-i/o-error . bj2a5b) (make-i/o-encoding-error . bj2b56) (make-i/o-decoding-error . bj2b3f) (make-custom-textual-output-port . bj2ff9) (make-custom-textual-input/output-port . bj2ff8) (make-custom-textual-input-port . bj2ff7) (make-custom-binary-output-port . bj2ff6) (make-custom-binary-input/output-port . bj2ff5) (make-custom-binary-input-port . bj2ff4) (lookahead-u8 . bj2ff2) (lookahead-char . bj2ff1) (i/o-write-error? . bj2a87) (i/o-read-error? . bj2a72) (i/o-port-error? . bj2b2a) (i/o-invalid-position-error? . bj2aa0) (i/o-filename-error? . bj2abb) (i/o-file-protection-error? . bj2ad2) (i/o-file-is-read-only-error? . bj2ae7) (i/o-file-does-not-exist-error? . bj2b11) (i/o-file-already-exists-error? . bj2afc) (i/o-error? . bj2a5d) (i/o-error-position . bj2aa2) (i/o-error-port . bj2b2c) (i/o-error-filename . bj2abd) (i/o-encoding-error? . bj2b5a) (i/o-encoding-error-char . bj2b5c) (i/o-decoding-error? . bj2b41) (get-u8 . bj2ff0) (get-string-n! . bj2fef) (get-string-n . bj2fee) (get-string-all . bj2fed) (get-line . bj2fec) (get-datum . bj2feb) (get-char . bj2fea) (get-bytevector-some . bj2fe9) (get-bytevector-n! . bj2fe8) (get-bytevector-n . bj2fe7) (get-bytevector-all . bj2fe6) (flush-output-port . bj2fe5) (close-port . bj2fe4) (call-with-string-output-port . bj2fc3) (call-with-port . bj2fc2) (call-with-bytevector-output-port . bj2fc1) (bytevector->string . bj2fc0) (buffer-mode? . bj2fbf) (binary-port? . bj2fbe) (&i/o-encoding . bj2e5c) (&i/o-decoding . bj2e5b) (&i/o-port . bj2e5a) (&i/o-file-does-not-exist . bj2e59) (&i/o-file-already-exists . bj2e58) (&i/o-file-is-read-only . bj2e57) (&i/o-file-protection . bj2e56) (&i/o-filename . bj2e55) (&i/o-invalid-position . bj2e54) (&i/o-write . bj2e53) (&i/o-read . bj2e52) (&i/o . bj2e51) (error-handling-mode . bj2e36) (file-options . bj2e35) (buffer-mode . bj2e34) (eol-style . bj2e33)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj313e '(rnrs enums) '(6) '() '() '() '((make-enumeration . bj2fba) (enum-set=? . bj2fb9) (enum-set-universe . bj2fb8) (enum-set-union . bj2fb7) (enum-set-subset? . bj2fb6) (enum-set-projection . bj2fb5) (enum-set-member? . bj2fb4) (enum-set-intersection . bj2fb3) (enum-set-indexer . bj2fb2) (enum-set-difference . bj2fb1) (enum-set-constructor . bj2fb0) (enum-set-complement . bj2faf) (enum-set->list . bj2fae) (define-enumeration . bj2e41)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj313f '(rnrs conditions) '(6) '() '() '() '((who-condition? . bj29d1) (warning? . bj2949) (violation? . bj2988) (undefined-violation? . bj2a48) (syntax-violation? . bj2a2f) (syntax-violation-subform . bj2a33) (syntax-violation-form . bj2a31) (syntax-violation . bje5b) (simple-conditions . bj2fad) (serious-condition? . bj295e) (non-continuable-violation? . bj29e8) (message-condition? . bj2932) (make-who-condition . bj29cd) (make-warning . bj2947) (make-violation . bj2986) (make-undefined-violation . bj2a46) (make-syntax-violation . bj2a29) (make-serious-condition . bj295c) (make-non-continuable-violation . bj29e6) (make-message-condition . bj292e) (make-lexical-violation . bj2a10) (make-irritants-condition . bj29b2) (make-implementation-restriction-violation . bj29fb) (make-error . bj2971) (make-assertion-violation . bj299b) (lexical-violation? . bj2a12) (irritants-condition? . bj29b6) (implementation-restriction-violation? . bj29fd) (error? . bj2973) (condition-who . bj29d3) (condition-predicate . bj2fac) (condition-message . bj2934) (condition-irritants . bj29b8) (condition-accessor . bj2fab) (condition . bj2faa) (assertion-violation? . bj299d) (condition? . bj2fa9) (&undefined . bj2e50) (&syntax . bj2e4f) (&lexical . bj2e4e) (&implementation-restriction . bj2e4d) (&non-continuable . bj2e4c) (&who . bj2e4b) (&irritants . bj2e4a) (&assertion . bj2e49) (&violation . bj2e48) (&error . bj2e47) (&serious . bj2e46) (&warning . bj2e45) (&message . bj2e44) (&condition . bj2e43) (define-condition-type . bj2e42)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj3140 '(rnrs records inspection) '(6) '() '() '() '((record? . bj3056) (record-type-uid . bj3055) (record-type-sealed? . bj3054) (record-type-parent . bj3053) (record-type-opaque? . bj3052) (record-type-name . bj3051) (record-type-generative? . bj3050) (record-type-field-names . bj304f) (record-rtd . bj304e) (record-field-mutable? . bj304d)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj3141 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . bj305d) (record-predicate . bj305c) (record-mutator . bj305b) (record-constructor . bj305a) (record-accessor . bj3059) (make-record-type-descriptor . bj3058) (make-record-constructor-descriptor . bj3057)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj3142 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . bj2e40) (parent-rtd . bj2e3f) (nongenerative . bj2e3e) (opaque . bj2e3d) (sealed . bj2e3c) (protocol . bj2e3b) (parent . bj2e3a) (immutable . bj2e39) (mutable . bj2e38) (fields . bj2e37) (record-constructor-descriptor . bj2e17) (record-type-descriptor . bj2e16)) '() values values '#f '#f '#t '#f) (bj989@bj7d5@install-library 'bj3143 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . bj2b8a) (&no-nans-rtd . bj2b88) (&no-infinities-rcd . bj2b75) (&no-infinities-rtd . bj2b73) (&i/o-encoding-rcd . bj2b60) (&i/o-encoding-rtd . bj2b5e) (&i/o-decoding-rcd . bj2b45) (&i/o-decoding-rtd . bj2b43) (&i/o-port-rcd . bj2b30) (&i/o-port-rtd . bj2b2e) (&i/o-file-does-not-exist-rcd . bj2b15) (&i/o-file-does-not-exist-rtd . bj2b13) (&i/o-file-already-exists-rcd . bj2b00) (&i/o-file-already-exists-rtd . bj2afe) (&i/o-file-is-read-only-rcd . bj2aeb) (&i/o-file-is-read-only-rtd . bj2ae9) (&i/o-file-protection-rcd . bj2ad6) (&i/o-file-protection-rtd . bj2ad4) (&i/o-filename-rcd . bj2ac1) (&i/o-filename-rtd . bj2abf) (&i/o-invalid-position-rcd . bj2aa6) (&i/o-invalid-position-rtd . bj2aa4) (&i/o-write-rcd . bj2a8b) (&i/o-write-rtd . bj2a89) (&i/o-read-rcd . bj2a76) (&i/o-read-rtd . bj2a74) (&i/o-rcd . bj2a61) (&i/o-rtd . bj2a5f) (&undefined-rcd . bj2a4c) (&undefined-rtd . bj2a4a) (&syntax-rcd . bj2a37) (&syntax-rtd . bj2a35) (&lexical-rcd . bj2a16) (&lexical-rtd . bj2a14) (&implementation-restriction-rcd . bj2a01) (&implementation-restriction-rtd . bj29ff) (&non-continuable-rcd . bj29ec) (&non-continuable-rtd . bj29ea) (&who-rcd . bj29d7) (&who-rtd . bj29d5) (&irritants-rcd . bj29bc) (&irritants-rtd . bj29ba) (&assertion-rcd . bj29a1) (&assertion-rtd . bj299f) (&violation-rcd . bj298c) (&violation-rtd . bj298a) (&error-rcd . bj2977) (&error-rtd . bj2975) (&serious-rcd . bj2962) (&serious-rtd . bj2960) (&warning-rcd . bj294d) (&warning-rtd . bj294b) (&message-rcd . bj2938) (&message-rtd . bj2936) (&condition-rcd . bj28d9) (&condition-rtd . bj28d7) (syntax-error . bje57) (syntax-dispatch . bjd7b) (pretty-print . bj3123) (eval-core . bj3122) (set-symbol-value! . bj3121) (symbol-value . bj3120) (gensym . bj311f) (void . bj311e) (load . bj2c9b) (interaction-environment . bje69) (char-ready? . bj311d) (regexp? . bj311c) (read-line . bj311b) (gensym-prefix-set! . bj311a) (ungensym . bj3119) (alist->eq-hash-table . bj3118) (assoc-ref . bj3117) (print . bj3116) (format . bj3115) (host-os . bj3114) (library-path . bj7b4) (standard-library-path . bj3113) (file-newer? . bj3112) (stat-mtime . bj3111) (write-to-file . bj3110) (file->list . bj310f) (file->string . bj310e) (digit->integer . bj310d) (call-with-string-input-port . bj310c) (call-with-string-io . bj310b) (string-split . bj310a) (bytevector-for-each . bj3109) (string->regexp . bj3108) (rxmatch . bj3107) (regexp-replace-all . bj3106) (hashtable-for-each . bj3105) (mosh-cache-dir . bj59e) (call-process . bj3104) (local-tz-offset . bj3103) (microseconds . bj3102) (directory-list . bj3101) (set-current-directory! . bj3100) (expand-path . bj30ff) (current-directory . bj30fe) (%spawn . bj30fd) (%waitpid . bj30fc) (simple-struct-name . bj30fb) (simple-struct-set! . bj30fa) (simple-struct-ref . bj30f9) (make-simple-struct . bj30f8) (simple-struct? . bj30f7) (pointer-ref-c-int64 . bj30f6) (pointer-ref-c-int32 . bj30f5) (pointer-ref-c-int16 . bj30f4) (pointer-ref-c-int8 . bj30f3) (pointer-ref-c-uint64 . bj30f2) (pointer-ref-c-uint32 . bj30f1) (pointer-ref-c-uint16 . bj30f0) (pointer-ref-c-uint8 . bj30ef) (pointer-set-c-uint64! . bj30ee) (pointer-set-c-uint32! . bj30ed) (pointer-set-c-uint16! . bj30ec) (pointer-set-c-uint8! . bj30eb) (pointer-set-c-int64! . bj30ea) (pointer-set-c-int32! . bj30e9) (pointer-set-c-int16! . bj30e8) (pointer-set-c-int8! . bj30e7) (pointer-set-c-pointer! . bj30e6) (pointer-set-c-double! . bj30e5) (pointer-set-c-float! . bj30e4) (pointer-set-c-long-long! . bj30e3) (pointer-set-c-long! . bj30e2) (pointer-set-c-int! . bj30e1) (pointer-set-c-short! . bj30e0) (pointer-set-c-char! . bj30df) (pointer-ref-c-pointer . bj30de) (pointer-ref-c-double . bj30dd) (pointer-ref-c-float . bj30dc) (pointer-ref-c-unsigned-long-long . bj30db) (pointer-ref-c-signed-long-long . bj30da) (pointer-ref-c-unsigned-long . bj30d9) (pointer-ref-c-signed-long . bj30d8) (pointer-ref-c-unsigned-int . bj30d7) (pointer-ref-c-signed-int . bj30d6) (pointer-ref-c-unsigned-short . bj30d5) (pointer-ref-c-signed-short . bj30d4) (pointer-ref-c-unsigned-char . bj30d3) (pointer-ref-c-signed-char . bj30d2) (pointer->integer . bj30d1) (integer->pointer . bj30d0) (pointer? . bj30cf) (shared-errno . bj30ce) (%ffi-free-c-callback-trampoline . bj30cd) (%ffi-make-c-callback-trampoline . bj30cc) (%ffi-free . bj30cb) (%ffi-malloc . bj30ca) (%ffi-supported? . bj30c9) (%ffi-pointer->string . bj30c8) (%ffi-call . bj30c7) (%ffi-lookup . bj30c6) (%ffi-open . bj30c5) (null-terminated-utf8->string . bj30c4) (null-terminated-bytevector->string . bj30c3) (%fork . bj30c2) (%pipe . bj30c1) (p . bj30c0) (open-output-string . bj30bf) (get-output-string . bj30be) (file-stat-ctime . bj30bd) (file-stat-atime . bj30bc) (file-stat-mtime . bj30bb) (file-size-in-bytes . bj30ba) (file-writable? . bj30b9) (file-executable? . bj30b8) (file-readable? . bj30b7) (file-regular? . bj30b6) (file-symbolic-link? . bj30b5) (file-directory? . bj30b4) (create-symbolic-link . bj30b3) (rename-file . bj30b2) (delete-directory . bj30b1) (create-directory . bj30b0) (create-mosh-cache-dir . bj30af) (get-environment-variables . bj30ae) (current-exception-handler . bj30ad) (get-environment-variable . bj30ac) (join-wraps . bj30ab) (id->real-label . bj30aa) (same-marks? . bj30a9) (same-marks*? . bj30a8) (get-timeofday . bj30a7) (get-command-line . bj30a6) (sys-display . bj30a5) (whereis . bj30a4) (register . bj30a3) (vm-join! . bj30a2) (vm-set-value! . bj30a1) (vm? . bj30a0) (main-vm? . bj309f) (vm-eval . bj309e) (vm-self . bj309d) (vm-start! . bj309c) (make-vm . bj309b) (mutex-try-lock! . bj309a) (mutex-unlock! . bj3099) (mutex-lock! . bj3098) (mutex? . bj3097) (make-mutex . bj3096) (condition-variable-notify-all! . bj3095) (condition-variable-notify! . bj3094) (condition-variable-wait! . bj3093) (make-condition-variable . bj3092) (mosh-executable-path . bj3091) (make-file-options . bj3090) (source-info . bj308f) (make-compiler-instruction . bj308e) (make-instruction . bj308d) (set-source-info! . bj308c) (bignum? . bj308b) (fast-equal? . bj308a) (fasl-read . bj3089) (fasl-write . bj3088) (time-usage . bj3087) (os-constant . bj3086) (disasm . bj3085) (make-parameter . bj59c) (socket-port . bj3084) (socket-shutdown . bj3083) (socket-close . bj3082) (socket-send . bj3081) (socket-recv! . bj3080) (socket-recv . bj307f) (make-server-socket . bj307e) (make-client-socket . bj307d) (socket-accept . bj307c) (socket? . bj307b) (string-upcase . bj307a) (string-titlecase . bj3079) (string-normalize-nfkd . bj3078) (string-normalize-nfkc . bj3077) (string-normalize-nfd . bj3076) (string-normalize-nfc . bj3075) (string-foldcase . bj3074) (string-downcase . bj3073) (string-ci>? . bj3072) (string-ci>=? . bj3071) (string-ci=? . bj3070) (string-ci<? . bj306f) (string-ci<=? . bj306e) (char-whitespace? . bj306d) (char-upper-case? . bj306c) (char-title-case? . bj306b) (char-numeric? . bj306a) (char-lower-case? . bj3069) (char-general-category . bj3068) (char-upcase . bj3067) (char-titlecase . bj3066) (char-foldcase . bj3065) (char-downcase . bj3064) (char-ci>? . bj3063) (char-ci>=? . bj3062) (char-ci=? . bj3061) (char-ci<? . bj3060) (char-ci<=? . bj305f) (char-alphabetic? . bj305e) (make-variable-transformer . bjba6) (identifier? . bje5d) (generate-temporaries . bje49) (free-identifier=? . bje4b) (syntax->datum . bje61) (datum->syntax . bje5f) (bound-identifier=? . bje4d) (record-type-descriptor? . bj305d) (record-predicate . bj305c) (record-mutator . bj305b) (record-constructor . bj305a) (record-accessor . bj3059) (make-record-type-descriptor . bj3058) (make-record-constructor-descriptor . bj3057) (record? . bj3056) (record-type-uid . bj3055) (record-type-sealed? . bj3054) (record-type-parent . bj3053) (record-type-opaque? . bj3052) (record-type-name . bj3051) (record-type-generative? . bj3050) (record-type-field-names . bj304f) (record-rtd . bj304e) (record-field-mutable? . bj304d) (delete-file . bj304c) (file-exists? . bj304b) (vector-sort! . bj304a) (vector-sort . bj3049) (list-sort . bj3048) (symbol-hash . bj3047) (string-ci-hash . bj3046) (string-hash . bj3045) (equal-hash . bj3044) (hashtable-equivalence-function . bj3043) (make-hashtable . bj3042) (hashtable-hash-function . bj3041) (make-eqv-hashtable . bj3040) (make-eq-hashtable . bj303f) (hashtable? . bj303e) (hashtable-update! . bj303d) (hashtable-size . bj303c) (hashtable-set! . bj303b) (hashtable-ref . bj303a) (hashtable-mutable? . bj3039) (hashtable-keys . bj3038) (hashtable-entries . bj3037) (hashtable-delete! . bj3036) (hashtable-copy . bj3035) (hashtable-contains? . bj3034) (hashtable-clear! . bj3033) (call-with-output-file . bj3032) (call-with-input-file . bj3031) (write-char . bj3030) (write . bj302f) (with-output-to-file . bj302e) (with-input-from-file . bj302d) (read-char . bj302c) (read . bj302b) (peek-char . bj302a) (open-output-file . bj3029) (open-input-file . bj3028) (newline . bj3027) (display . bj3026) (close-output-port . bj3025) (close-input-port . bj3024) (eof-object? . bj3023) (eof-object . bj3022) (current-error-port . bj3021) (current-output-port . bj3020) (current-input-port . bj301f) (output-port? . bj301e) (input-port? . bj301d) (utf-8-codec . bj301c) (utf-16-codec . bj301b) (transcoder-error-handling-mode . bj301a) (transcoder-eol-style . bj3019) (transcoder-codec . bj3018) (transcoded-port . bj3017) (textual-port? . bj3016) (string->bytevector . bj3015) (standard-output-port . bj3014) (standard-input-port . bj3013) (standard-error-port . bj3012) (set-port-position! . bj3011) (put-u8 . bj3010) (put-string . bj300f) (put-datum . bj300e) (put-char . bj300d) (put-bytevector . bj300c) (port? . bj300b) (port-transcoder . bj300a) (port-position . bj3009) (port-has-set-port-position!? . bj3008) (port-has-port-position? . bj3007) (port-eof? . bj3006) (output-port-buffer-mode . bj3005) (open-string-output-port . bj3004) (open-string-input-port . bj3003) (open-file-output-port . bj3002) (open-file-input/output-port . bj3001) (open-file-input-port . bj3000) (open-bytevector-output-port . bj2fff) (open-bytevector-input-port . bj2ffe) (native-transcoder . bj2ffd) (native-eol-style . bj2ffc) (make-transcoder . bj2ffb) (latin-1-codec . bj2ffa) (make-i/o-write-error . bj2a85) (make-i/o-read-error . bj2a70) (make-i/o-port-error . bj2b26) (make-i/o-invalid-position-error . bj2a9c) (make-i/o-filename-error . bj2ab7) (make-i/o-file-protection-error . bj2ad0) (make-i/o-file-is-read-only-error . bj2ae5) (make-i/o-file-does-not-exist-error . bj2b0f) (make-i/o-file-already-exists-error . bj2afa) (make-i/o-error . bj2a5b) (make-i/o-encoding-error . bj2b56) (make-i/o-decoding-error . bj2b3f) (make-custom-textual-output-port . bj2ff9) (make-custom-textual-input/output-port . bj2ff8) (make-custom-textual-input-port . bj2ff7) (make-custom-binary-output-port . bj2ff6) (make-custom-binary-input/output-port . bj2ff5) (make-custom-binary-input-port . bj2ff4) (make-bytevector . bj2ff3) (lookahead-u8 . bj2ff2) (lookahead-char . bj2ff1) (i/o-write-error? . bj2a87) (i/o-read-error? . bj2a72) (i/o-port-error? . bj2b2a) (i/o-invalid-position-error? . bj2aa0) (i/o-filename-error? . bj2abb) (i/o-file-protection-error? . bj2ad2) (i/o-file-is-read-only-error? . bj2ae7) (i/o-file-does-not-exist-error? . bj2b11) (i/o-file-already-exists-error? . bj2afc) (i/o-error? . bj2a5d) (i/o-error-position . bj2aa2) (i/o-error-port . bj2b2c) (i/o-error-filename . bj2abd) (i/o-encoding-error? . bj2b5a) (i/o-encoding-error-char . bj2b5c) (i/o-decoding-error? . bj2b41) (get-u8 . bj2ff0) (get-string-n! . bj2fef) (get-string-n . bj2fee) (get-string-all . bj2fed) (get-line . bj2fec) (get-datum . bj2feb) (get-char . bj2fea) (get-bytevector-some . bj2fe9) (get-bytevector-n! . bj2fe8) (get-bytevector-n . bj2fe7) (get-bytevector-all . bj2fe6) (flush-output-port . bj2fe5) (close-port . bj2fe4) (scheme-report-environment . bje37) (quotient . bj2fe3) (null-environment . bje35) (remainder . bj2fe2) (modulo . bj2fe1) (inexact->exact . bj2fe0) (force . bj2fdf) (exact->inexact . bj2fde) (make-promise . bj2fdd) (exit . bj2fdc) (command-line . bj2c95) (string-fill! . bj2fdb) (string-set! . bj2fda) (set-cdr! . bj2fd9) (set-car! . bj2fd8) (remove . bj2fd7) (remv . bj2fd6) (remp . bj2fd5) (remq . bj2fd4) (partition . bj2fd3) (memv . bj2fd2) (memq . bj2fd1) (memp . bj2fd0) (member . bj2fcf) (exists . bj2fce) (for-all . bj2fcd) (fold-right . bj2fcc) (fold-left . bj2fcb) (find . bj2fca) (filter . bj2fc9) (cons* . bj2fc8) (assv . bj2fc7) (assq . bj2fc6) (assp . bj2fc5) (assoc . bj2fc4) (call-with-string-output-port . bj2fc3) (call-with-port . bj2fc2) (call-with-bytevector-output-port . bj2fc1) (bytevector->string . bj2fc0) (buffer-mode? . bj2fbf) (binary-port? . bj2fbe) (with-exception-handler . bj2fbd) (raise-continuable . bj2fbc) (raise . bj2fbb) (eval . bje3b) (environment . bje33) (make-enumeration . bj2fba) (enum-set=? . bj2fb9) (enum-set-universe . bj2fb8) (enum-set-union . bj2fb7) (enum-set-subset? . bj2fb6) (enum-set-projection . bj2fb5) (enum-set-member? . bj2fb4) (enum-set-intersection . bj2fb3) (enum-set-indexer . bj2fb2) (enum-set-difference . bj2fb1) (enum-set-constructor . bj2fb0) (enum-set-complement . bj2faf) (enum-set->list . bj2fae) (who-condition? . bj29d1) (warning? . bj2949) (violation? . bj2988) (undefined-violation? . bj2a48) (syntax-violation? . bj2a2f) (syntax-violation-subform . bj2a33) (syntax-violation-form . bj2a31) (syntax-violation . bje5b) (simple-conditions . bj2fad) (serious-condition? . bj295e) (non-continuable-violation? . bj29e8) (message-condition? . bj2932) (make-who-condition . bj29cd) (make-warning . bj2947) (make-violation . bj2986) (make-undefined-violation . bj2a46) (make-syntax-violation . bj2a29) (make-serious-condition . bj295c) (make-non-continuable-violation . bj29e6) (make-message-condition . bj292e) (make-lexical-violation . bj2a10) (make-irritants-condition . bj29b2) (make-implementation-restriction-violation . bj29fb) (make-error . bj2971) (make-assertion-violation . bj299b) (lexical-violation? . bj2a12) (irritants-condition? . bj29b6) (implementation-restriction-violation? . bj29fd) (error? . bj2973) (condition-who . bj29d3) (condition-predicate . bj2fac) (condition-message . bj2934) (condition-irritants . bj29b8) (condition-accessor . bj2fab) (condition . bj2faa) (assertion-violation? . bj299d) (condition? . bj2fa9) (utf32->string . bj2fa8) (utf16->string . bj2fa7) (utf8->string . bj2fa6) (uint-list->bytevector . bj2fa5) (u8-list->bytevector . bj2fa4) (string->utf8 . bj2fa3) (string->utf32 . bj2fa2) (string->utf16 . bj2fa1) (sint-list->bytevector . bj2fa0) (native-endianness . bj2f9f) (bytevector? . bj2f9e) (bytevector=? . bj2f9d) (bytevector-uint-set! . bj2f9c) (bytevector-uint-ref . bj2f9b) (bytevector-u8-set! . bj2f9a) (bytevector-u8-ref . bj2f99) (bytevector-u64-set! . bj2f98) (bytevector-u64-ref . bj2f97) (bytevector-u64-native-set! . bj2f96) (bytevector-u64-native-ref . bj2f95) (bytevector-u32-set! . bj2f94) (bytevector-u32-ref . bj2f93) (bytevector-u32-native-set! . bj2f92) (bytevector-u32-native-ref . bj2f91) (bytevector-u16-set! . bj2f90) (bytevector-u16-ref . bj2f8f) (bytevector-u16-native-set! . bj2f8e) (bytevector-u16-native-ref . bj2f8d) (bytevector-sint-set! . bj2f8c) (bytevector-sint-ref . bj2f8b) (bytevector-s8-set! . bj2f8a) (bytevector-s8-ref . bj2f89) (bytevector-s64-set! . bj2f88) (bytevector-s64-ref . bj2f87) (bytevector-s64-native-set! . bj2f86) (bytevector-s64-native-ref . bj2f85) (bytevector-s32-set! . bj2f84) (bytevector-s32-ref . bj2f83) (bytevector-s32-native-set! . bj2f82) (bytevector-s32-native-ref . bj2f81) (bytevector-s16-set! . bj2f80) (bytevector-s16-ref . bj2f7f) (bytevector-s16-native-set! . bj2f7e) (bytevector-s16-native-ref . bj2f7d) (bytevector-length . bj2f7c) (bytevector-ieee-single-ref . bj2f7b) (bytevector-ieee-single-set! . bj2f7a) (bytevector-ieee-single-native-set! . bj2f79) (bytevector-ieee-single-native-ref . bj2f78) (bytevector-ieee-double-set! . bj2f77) (bytevector-ieee-double-ref . bj2f76) (bytevector-ieee-double-native-set! . bj2f75) (bytevector-ieee-double-native-ref . bj2f74) (bytevector-fill! . bj2f73) (bytevector-copy! . bj2f72) (bytevector-copy . bj2f71) (bytevector->uint-list . bj2f70) (bytevector->u8-list . bj2f6f) (bytevector->sint-list . bj2f6e) (no-nans-violation? . bj2b86) (no-infinities-violation? . bj2b71) (make-no-nans-violation . bj2b84) (make-no-infinities-violation . bj2b6f) (real->flonum . bj2f6d) (flzero? . bj2f6c) (fltruncate . bj2f6b) (fltan . bj2f6a) (flsqrt . bj2f69) (flsin . bj2f68) (flround . bj2f67) (flpositive? . bj2f66) (flonum? . bj2f65) (flodd? . bj2f64) (flnumerator . bj2f63) (flnegative? . bj2f62) (flnan? . bj2f61) (flmod0 . bj2f60) (flmod . bj2f5f) (flmin . bj2f5e) (flmax . bj2f5d) (fllog . bj2f5c) (flinteger? . bj2f5b) (flinfinite? . bj2f5a) (flfloor . bj2f59) (flfinite? . bj2f58) (flexpt . bj2f57) (flexp . bj2f56) (fleven? . bj2f55) (fldiv0-and-mod0 . bj2f54) (fldiv0 . bj2f53) (fldiv-and-mod . bj2f52) (fldiv . bj2f51) (fldenominator . bj2f50) (flcos . bj2f4f) (flceiling . bj2f4e) (flatan . bj2f4d) (flasin . bj2f4c) (flacos . bj2f4b) (flabs . bj2f4a) (fl>? . bj2f49) (fl>=? . bj2f48) (fl=? . bj2f47) (fl<? . bj2f46) (fl<=? . bj2f45) (fl/ . bj2f44) (fl- . bj2f43) (fl+ . bj2f42) (fl* . bj2f41) (fixnum->flonum . bj2f40) (fxzero? . bj2f3f) (fxxor . bj2f3e) (fxrotate-bit-field . bj2f3d) (fxreverse-bit-field . bj2f3c) (fxpositive? . bj2f3b) (fxodd? . bj2f3a) (fxnot . bj2f39) (fxnegative? . bj2f38) (fxmod0 . bj2f37) (fxmod . bj2f36) (fxmin . bj2f35) (fxmax . bj2f34) (fxlength . bj2f33) (fxior . bj2f32) (fxif . bj2f31) (fxfirst-bit-set . bj2f30) (fxeven? . bj2f2f) (fxdiv0-and-mod0 . bj2f2e) (fxdiv0 . bj2f2d) (fxdiv-and-mod . bj2f2c) (fxdiv . bj2f2b) (fxcopy-bit-field . bj2f2a) (fxcopy-bit . bj2f29) (fxbit-set? . bj2f28) (fxbit-field . bj2f27) (fxbit-count . bj2f26) (fxarithmetic-shift-right . bj2f25) (fxarithmetic-shift-left . bj2f24) (fxarithmetic-shift . bj2f23) (fxand . bj2f22) (fx>? . bj2f21) (fx>=? . bj2f20) (fx=? . bj2f1f) (fx<? . bj2f1e) (fx<=? . bj2f1d) (fx-/carry . bj2f1c) (fx- . bj2f1b) (fx+/carry . bj2f1a) (fx+ . bj2f19) (fx*/carry . bj2f18) (fx* . bj2f17) (greatest-fixnum . bj2f16) (least-fixnum . bj2f15) (fixnum-width . bj2f14) (fixnum? . bj2f13) (bitwise-rotate-bit-field . bj2f12) (bitwise-reverse-bit-field . bj2f11) (bitwise-length . bj2f10) (bitwise-if . bj2f0f) (bitwise-first-bit-set . bj2f0e) (bitwise-copy-bit-field . bj2f0d) (bitwise-copy-bit . bj2f0c) (bitwise-bit-set? . bj2f0b) (bitwise-bit-field . bj2f0a) (bitwise-bit-count . bj2f09) (bitwise-xor . bj2f08) (bitwise-ior . bj2f07) (bitwise-and . bj2f06) (bitwise-not . bj2f05) (bitwise-arithmetic-shift-right . bj2f04) (bitwise-arithmetic-shift-left . bj2f03) (bitwise-arithmetic-shift . bj2f02) (zero? . bj2f01) (vector? . bj2f00) (vector-set! . bj2eff) (vector-ref . bj2efe) (vector-map . bj2efd) (vector-length . bj2efc) (vector-for-each . bj2efb) (vector-fill! . bj2efa) (vector->list . bj2ef9) (vector . bj2ef8) (values . bj2ef7) (truncate . bj2ef6) (tan . bj2ef5) (symbol? . bj2ef4) (symbol=? . bj2ef3) (symbol->string . bj2ef2) (substring . bj2ef1) (string? . bj2ef0) (string>? . bj2eef) (string>=? . bj2eee) (string=? . bj2eed) (string<? . bj2eec) (string<=? . bj2eeb) (string-ref . bj2eea) (string-length . bj2ee9) (string-for-each . bj2ee8) (string-copy . bj2ee7) (string-append . bj2ee6) (string->symbol . bj2ee5) (string->number . bj2ee4) (string->list . bj2ee3) (string . bj2ee2) (sqrt . bj2ee1) (sin . bj2ee0) (round . bj2edf) (reverse . bj2ede) (real? . bj2edd) (real-valued? . bj2edc) (real-part . bj2edb) (rationalize . bj2eda) (rational? . bj2ed9) (rational-valued? . bj2ed8) (procedure? . bj2ed7) (positive? . bj2ed6) (pair? . bj2ed5) (odd? . bj2ed4) (numerator . bj2ed3) (number? . bj2ed2) (number->string . bj2ed1) (null? . bj2ed0) (not . bj2ecf) (negative? . bj2ece) (nan? . bj2ecd) (min . bj2ecc) (max . bj2ecb) (map . bj2eca) (make-vector . bj2ec9) (make-string . bj2ec8) (make-rectangular . bj2ec7) (make-polar . bj2ec6) (magnitude . bj2ec5) (log . bj2ec4) (list? . bj2ec3) (list-tail . bj2ec2) (list-ref . bj2ec1) (list->vector . bj2ec0) (list->string . bj2ebf) (list . bj2ebe) (length . bj2ebd) (lcm . bj2ebc) (integer? . bj2ebb) (integer-valued? . bj2eba) (integer->char . bj2eb9) (infinite? . bj2eb8) (inexact? . bj2eb7) (inexact . bj2eb6) (imag-part . bj2eb5) (gcd . bj2eb4) (for-each . bj2eb3) (floor . bj2eb2) (finite? . bj2eb1) (expt . bj2eb0) (exp . bj2eaf) (exact? . bj2eae) (exact-integer-sqrt . bj2ead) (exact . bj2eac) (even? . bj2eab) (error . bj2eaa) (eqv? . bj2ea9) (equal? . bj2ea8) (eq? . bj2ea7) (dynamic-wind . bj2ea6) (div0-and-mod0 . bj2ea5) (mod0 . bj2ea4) (div0 . bj2ea3) (div-and-mod . bj2ea2) (mod . bj2ea1) (div . bj2ea0) (denominator . bj2e9f) (cos . bj2e9e) (cons . bj2e9d) (complex? . bj2e9c) (char? . bj2e9b) (char>? . bj2e9a) (char>=? . bj2e99) (char=? . bj2e98) (char<? . bj2e97) (char<=? . bj2e96) (char->integer . bj2e95) (ceiling . bj2e94) (call-with-values . bj2e93) (call/cc . bj2e92) (call-with-current-continuation . bj2e91) (cddddr . bj2e90) (cdddar . bj2e8f) (cddadr . bj2e8e) (cddaar . bj2e8d) (cdaddr . bj2e8c) (cdadar . bj2e8b) (cdaadr . bj2e8a) (cdaaar . bj2e89) (cadddr . bj2e88) (caddar . bj2e87) (cadadr . bj2e86) (cadaar . bj2e85) (caaddr . bj2e84) (caadar . bj2e83) (caaadr . bj2e82) (caaaar . bj2e81) (cdddr . bj2e80) (cddar . bj2e7f) (cdadr . bj2e7e) (cdaar . bj2e7d) (caddr . bj2e7c) (cadar . bj2e7b) (caadr . bj2e7a) (caaar . bj2e79) (cddr . bj2e78) (cdar . bj2e77) (cadr . bj2e76) (caar . bj2e75) (cdr . bj2e74) (car . bj2e73) (boolean? . bj2e72) (boolean=? . bj2e71) (atan . bj2e70) (assertion-violation . bj2e6f) (assertion-error . bje55) (asin . bj2e6e) (apply . bj2e6d) (append . bj2e6c) (angle . bj2e6b) (acos . bj2e6a) (abs . bj2e69) (/ . bj2e68) (* . bj2e67) (- . bj2e66) (+ . bj2e65) (>= . bj2e64) (> . bj2e63) (= . bj2e62) (<= . bj2e61) (< . bj2e60) (library . bj2e5f) (&no-nans . bj2e5e) (&no-infinities . bj2e5d) (&i/o-encoding . bj2e5c) (&i/o-decoding . bj2e5b) (&i/o-port . bj2e5a) (&i/o-file-does-not-exist . bj2e59) (&i/o-file-already-exists . bj2e58) (&i/o-file-is-read-only . bj2e57) (&i/o-file-protection . bj2e56) (&i/o-filename . bj2e55) (&i/o-invalid-position . bj2e54) (&i/o-write . bj2e53) (&i/o-read . bj2e52) (&i/o . bj2e51) (&undefined . bj2e50) (&syntax . bj2e4f) (&lexical . bj2e4e) (&implementation-restriction . bj2e4d) (&non-continuable . bj2e4c) (&who . bj2e4b) (&irritants . bj2e4a) (&assertion . bj2e49) (&violation . bj2e48) (&error . bj2e47) (&serious . bj2e46) (&warning . bj2e45) (&message . bj2e44) (&condition . bj2e43) (define-condition-type . bj2e42) (define-enumeration . bj2e41) (define-record-type . bj2e40) (parent-rtd . bj2e3f) (nongenerative . bj2e3e) (opaque . bj2e3d) (sealed . bj2e3c) (protocol . bj2e3b) (parent . bj2e3a) (immutable . bj2e39) (mutable . bj2e38) (fields . bj2e37) (error-handling-mode . bj2e36) (file-options . bj2e35) (buffer-mode . bj2e34) (eol-style . bj2e33) (guard . bj2e32) (trace-define . bj2e31) (trace-lambda . bj2e30) (unsyntax-splicing . bj2e2f) (unsyntax . bj2e2e) (unquote-splicing . bj2e2d) (unquote . bj2e2c) (_ . bj2e2b) (else . bj2e2a) (=> . bj2e29) (... . bj2e28) (assert . bj2e27) (endianness . bj2e26) (delay . bj2e25) (time . bj2e24) (do . bj2e23) (cond . bj2e22) (let* . bj2e21) (let*-values . bj2e20) (let-values . bj2e1f) (identifier-syntax . bj2e1e) (with-syntax . bj2e1d) (quasisyntax . bj2e1c) (quasiquote . bj2e1b) (syntax-rules . bj2e1a) (include . bj2e19) (define-struct . bj2e18) (record-constructor-descriptor . bj2e17) (record-type-descriptor . bj2e16) (case . bj2e15) (parameterize . bj2e14) (unless . bj2e13) (when . bj2e12) (or . bj2e11) (and . bj2e10) (if . bj2e0f) (let . bj2e0e) (letrec* . bj2e0d) (letrec . bj2e0c) (type-descriptor . bj2e0b) (case-lambda . bj2e0a) (lambda . bj2e09) (syntax . bj2e08) (syntax-case . bj2e07) (quote . bj2e06) (foreign-call . bj2e05) (letrec-syntax . bj2e04) (let-syntax . bj2e03) (set! . bj2e02) (import . bj2e01) (begin . bj2e00) (module . bj2dff) (define-syntax . bj2dfe) (define . bj2dfd)) '((bj2b8a core-prim . &no-nans-rcd) (bj2b88 core-prim . &no-nans-rtd) (bj2b75 core-prim . &no-infinities-rcd) (bj2b73 core-prim . &no-infinities-rtd) (bj2b60 core-prim . &i/o-encoding-rcd) (bj2b5e core-prim . &i/o-encoding-rtd) (bj2b45 core-prim . &i/o-decoding-rcd) (bj2b43 core-prim . &i/o-decoding-rtd) (bj2b30 core-prim . &i/o-port-rcd) (bj2b2e core-prim . &i/o-port-rtd) (bj2b15 core-prim . &i/o-file-does-not-exist-rcd) (bj2b13 core-prim . &i/o-file-does-not-exist-rtd) (bj2b00 core-prim . &i/o-file-already-exists-rcd) (bj2afe core-prim . &i/o-file-already-exists-rtd) (bj2aeb core-prim . &i/o-file-is-read-only-rcd) (bj2ae9 core-prim . &i/o-file-is-read-only-rtd) (bj2ad6 core-prim . &i/o-file-protection-rcd) (bj2ad4 core-prim . &i/o-file-protection-rtd) (bj2ac1 core-prim . &i/o-filename-rcd) (bj2abf core-prim . &i/o-filename-rtd) (bj2aa6 core-prim . &i/o-invalid-position-rcd) (bj2aa4 core-prim . &i/o-invalid-position-rtd) (bj2a8b core-prim . &i/o-write-rcd) (bj2a89 core-prim . &i/o-write-rtd) (bj2a76 core-prim . &i/o-read-rcd) (bj2a74 core-prim . &i/o-read-rtd) (bj2a61 core-prim . &i/o-rcd) (bj2a5f core-prim . &i/o-rtd) (bj2a4c core-prim . &undefined-rcd) (bj2a4a core-prim . &undefined-rtd) (bj2a37 core-prim . &syntax-rcd) (bj2a35 core-prim . &syntax-rtd) (bj2a16 core-prim . &lexical-rcd) (bj2a14 core-prim . &lexical-rtd) (bj2a01 core-prim . &implementation-restriction-rcd) (bj29ff core-prim . &implementation-restriction-rtd) (bj29ec core-prim . &non-continuable-rcd) (bj29ea core-prim . &non-continuable-rtd) (bj29d7 core-prim . &who-rcd) (bj29d5 core-prim . &who-rtd) (bj29bc core-prim . &irritants-rcd) (bj29ba core-prim . &irritants-rtd) (bj29a1 core-prim . &assertion-rcd) (bj299f core-prim . &assertion-rtd) (bj298c core-prim . &violation-rcd) (bj298a core-prim . &violation-rtd) (bj2977 core-prim . &error-rcd) (bj2975 core-prim . &error-rtd) (bj2962 core-prim . &serious-rcd) (bj2960 core-prim . &serious-rtd) (bj294d core-prim . &warning-rcd) (bj294b core-prim . &warning-rtd) (bj2938 core-prim . &message-rcd) (bj2936 core-prim . &message-rtd) (bj28d9 core-prim . &condition-rcd) (bj28d7 core-prim . &condition-rtd) (bje57 core-prim . syntax-error) (bjd7b core-prim . syntax-dispatch) (bj3123 core-prim . pretty-print) (bj3122 core-prim . eval-core) (bj3121 core-prim . set-symbol-value!) (bj3120 core-prim . symbol-value) (bj311f core-prim . gensym) (bj311e core-prim . void) (bj2c9b core-prim . load) (bje69 core-prim . interaction-environment) (bj311d core-prim . char-ready?) (bj311c core-prim . regexp?) (bj311b core-prim . read-line) (bj311a core-prim . gensym-prefix-set!) (bj3119 core-prim . ungensym) (bj3118 core-prim . alist->eq-hash-table) (bj3117 core-prim . assoc-ref) (bj3116 core-prim . print) (bj3115 core-prim . format) (bj3114 core-prim . host-os) (bj7b4 core-prim . library-path) (bj3113 core-prim . standard-library-path) (bj3112 core-prim . file-newer?) (bj3111 core-prim . stat-mtime) (bj3110 core-prim . write-to-file) (bj310f core-prim . file->list) (bj310e core-prim . file->string) (bj310d core-prim . digit->integer) (bj310c core-prim . call-with-string-input-port) (bj310b core-prim . call-with-string-io) (bj310a core-prim . string-split) (bj3109 core-prim . bytevector-for-each) (bj3108 core-prim . string->regexp) (bj3107 core-prim . rxmatch) (bj3106 core-prim . regexp-replace-all) (bj3105 core-prim . hashtable-for-each) (bj59e core-prim . mosh-cache-dir) (bj3104 core-prim . call-process) (bj3103 core-prim . local-tz-offset) (bj3102 core-prim . microseconds) (bj3101 core-prim . directory-list) (bj3100 core-prim . set-current-directory!) (bj30ff core-prim . expand-path) (bj30fe core-prim . current-directory) (bj30fd core-prim . %spawn) (bj30fc core-prim . %waitpid) (bj30fb core-prim . simple-struct-name) (bj30fa core-prim . simple-struct-set!) (bj30f9 core-prim . simple-struct-ref) (bj30f8 core-prim . make-simple-struct) (bj30f7 core-prim . simple-struct?) (bj30f6 core-prim . pointer-ref-c-int64) (bj30f5 core-prim . pointer-ref-c-int32) (bj30f4 core-prim . pointer-ref-c-int16) (bj30f3 core-prim . pointer-ref-c-int8) (bj30f2 core-prim . pointer-ref-c-uint64) (bj30f1 core-prim . pointer-ref-c-uint32) (bj30f0 core-prim . pointer-ref-c-uint16) (bj30ef core-prim . pointer-ref-c-uint8) (bj30ee core-prim . pointer-set-c-uint64!) (bj30ed core-prim . pointer-set-c-uint32!) (bj30ec core-prim . pointer-set-c-uint16!) (bj30eb core-prim . pointer-set-c-uint8!) (bj30ea core-prim . pointer-set-c-int64!) (bj30e9 core-prim . pointer-set-c-int32!) (bj30e8 core-prim . pointer-set-c-int16!) (bj30e7 core-prim . pointer-set-c-int8!) (bj30e6 core-prim . pointer-set-c-pointer!) (bj30e5 core-prim . pointer-set-c-double!) (bj30e4 core-prim . pointer-set-c-float!) (bj30e3 core-prim . pointer-set-c-long-long!) (bj30e2 core-prim . pointer-set-c-long!) (bj30e1 core-prim . pointer-set-c-int!) (bj30e0 core-prim . pointer-set-c-short!) (bj30df core-prim . pointer-set-c-char!) (bj30de core-prim . pointer-ref-c-pointer) (bj30dd core-prim . pointer-ref-c-double) (bj30dc core-prim . pointer-ref-c-float) (bj30db core-prim . pointer-ref-c-unsigned-long-long) (bj30da core-prim . pointer-ref-c-signed-long-long) (bj30d9 core-prim . pointer-ref-c-unsigned-long) (bj30d8 core-prim . pointer-ref-c-signed-long) (bj30d7 core-prim . pointer-ref-c-unsigned-int) (bj30d6 core-prim . pointer-ref-c-signed-int) (bj30d5 core-prim . pointer-ref-c-unsigned-short) (bj30d4 core-prim . pointer-ref-c-signed-short) (bj30d3 core-prim . pointer-ref-c-unsigned-char) (bj30d2 core-prim . pointer-ref-c-signed-char) (bj30d1 core-prim . pointer->integer) (bj30d0 core-prim . integer->pointer) (bj30cf core-prim . pointer?) (bj30ce core-prim . shared-errno) (bj30cd core-prim . %ffi-free-c-callback-trampoline) (bj30cc core-prim . %ffi-make-c-callback-trampoline) (bj30cb core-prim . %ffi-free) (bj30ca core-prim . %ffi-malloc) (bj30c9 core-prim . %ffi-supported?) (bj30c8 core-prim . %ffi-pointer->string) (bj30c7 core-prim . %ffi-call) (bj30c6 core-prim . %ffi-lookup) (bj30c5 core-prim . %ffi-open) (bj30c4 core-prim . null-terminated-utf8->string) (bj30c3 core-prim . null-terminated-bytevector->string) (bj30c2 core-prim . %fork) (bj30c1 core-prim . %pipe) (bj30c0 core-prim . p) (bj30bf core-prim . open-output-string) (bj30be core-prim . get-output-string) (bj30bd core-prim . file-stat-ctime) (bj30bc core-prim . file-stat-atime) (bj30bb core-prim . file-stat-mtime) (bj30ba core-prim . file-size-in-bytes) (bj30b9 core-prim . file-writable?) (bj30b8 core-prim . file-executable?) (bj30b7 core-prim . file-readable?) (bj30b6 core-prim . file-regular?) (bj30b5 core-prim . file-symbolic-link?) (bj30b4 core-prim . file-directory?) (bj30b3 core-prim . create-symbolic-link) (bj30b2 core-prim . rename-file) (bj30b1 core-prim . delete-directory) (bj30b0 core-prim . create-directory) (bj30af core-prim . create-mosh-cache-dir) (bj30ae core-prim . get-environment-variables) (bj30ad core-prim . current-exception-handler) (bj30ac core-prim . get-environment-variable) (bj30ab core-prim . join-wraps) (bj30aa core-prim . id->real-label) (bj30a9 core-prim . same-marks?) (bj30a8 core-prim . same-marks*?) (bj30a7 core-prim . get-timeofday) (bj30a6 core-prim . get-command-line) (bj30a5 core-prim . sys-display) (bj30a4 core-prim . whereis) (bj30a3 core-prim . register) (bj30a2 core-prim . vm-join!) (bj30a1 core-prim . vm-set-value!) (bj30a0 core-prim . vm?) (bj309f core-prim . main-vm?) (bj309e core-prim . vm-eval) (bj309d core-prim . vm-self) (bj309c core-prim . vm-start!) (bj309b core-prim . make-vm) (bj309a core-prim . mutex-try-lock!) (bj3099 core-prim . mutex-unlock!) (bj3098 core-prim . mutex-lock!) (bj3097 core-prim . mutex?) (bj3096 core-prim . make-mutex) (bj3095 core-prim . condition-variable-notify-all!) (bj3094 core-prim . condition-variable-notify!) (bj3093 core-prim . condition-variable-wait!) (bj3092 core-prim . make-condition-variable) (bj3091 core-prim . mosh-executable-path) (bj3090 core-prim . make-file-options) (bj308f core-prim . source-info) (bj308e core-prim . make-compiler-instruction) (bj308d core-prim . make-instruction) (bj308c core-prim . set-source-info!) (bj308b core-prim . bignum?) (bj308a core-prim . fast-equal?) (bj3089 core-prim . fasl-read) (bj3088 core-prim . fasl-write) (bj3087 core-prim . time-usage) (bj3086 core-prim . os-constant) (bj3085 core-prim . disasm) (bj59c core-prim . make-parameter) (bj3084 core-prim . socket-port) (bj3083 core-prim . socket-shutdown) (bj3082 core-prim . socket-close) (bj3081 core-prim . socket-send) (bj3080 core-prim . socket-recv!) (bj307f core-prim . socket-recv) (bj307e core-prim . make-server-socket) (bj307d core-prim . make-client-socket) (bj307c core-prim . socket-accept) (bj307b core-prim . socket?) (bj307a core-prim . string-upcase) (bj3079 core-prim . string-titlecase) (bj3078 core-prim . string-normalize-nfkd) (bj3077 core-prim . string-normalize-nfkc) (bj3076 core-prim . string-normalize-nfd) (bj3075 core-prim . string-normalize-nfc) (bj3074 core-prim . string-foldcase) (bj3073 core-prim . string-downcase) (bj3072 core-prim . string-ci>?) (bj3071 core-prim . string-ci>=?) (bj3070 core-prim . string-ci=?) (bj306f core-prim . string-ci<?) (bj306e core-prim . string-ci<=?) (bj306d core-prim . char-whitespace?) (bj306c core-prim . char-upper-case?) (bj306b core-prim . char-title-case?) (bj306a core-prim . char-numeric?) (bj3069 core-prim . char-lower-case?) (bj3068 core-prim . char-general-category) (bj3067 core-prim . char-upcase) (bj3066 core-prim . char-titlecase) (bj3065 core-prim . char-foldcase) (bj3064 core-prim . char-downcase) (bj3063 core-prim . char-ci>?) (bj3062 core-prim . char-ci>=?) (bj3061 core-prim . char-ci=?) (bj3060 core-prim . char-ci<?) (bj305f core-prim . char-ci<=?) (bj305e core-prim . char-alphabetic?) (bjba6 core-prim . make-variable-transformer) (bje5d core-prim . identifier?) (bje49 core-prim . generate-temporaries) (bje4b core-prim . free-identifier=?) (bje61 core-prim . syntax->datum) (bje5f core-prim . datum->syntax) (bje4d core-prim . bound-identifier=?) (bj305d core-prim . record-type-descriptor?) (bj305c core-prim . record-predicate) (bj305b core-prim . record-mutator) (bj305a core-prim . record-constructor) (bj3059 core-prim . record-accessor) (bj3058 core-prim . make-record-type-descriptor) (bj3057 core-prim . make-record-constructor-descriptor) (bj3056 core-prim . record?) (bj3055 core-prim . record-type-uid) (bj3054 core-prim . record-type-sealed?) (bj3053 core-prim . record-type-parent) (bj3052 core-prim . record-type-opaque?) (bj3051 core-prim . record-type-name) (bj3050 core-prim . record-type-generative?) (bj304f core-prim . record-type-field-names) (bj304e core-prim . record-rtd) (bj304d core-prim . record-field-mutable?) (bj304c core-prim . delete-file) (bj304b core-prim . file-exists?) (bj304a core-prim . vector-sort!) (bj3049 core-prim . vector-sort) (bj3048 core-prim . list-sort) (bj3047 core-prim . symbol-hash) (bj3046 core-prim . string-ci-hash) (bj3045 core-prim . string-hash) (bj3044 core-prim . equal-hash) (bj3043 core-prim . hashtable-equivalence-function) (bj3042 core-prim . make-hashtable) (bj3041 core-prim . hashtable-hash-function) (bj3040 core-prim . make-eqv-hashtable) (bj303f core-prim . make-eq-hashtable) (bj303e core-prim . hashtable?) (bj303d core-prim . hashtable-update!) (bj303c core-prim . hashtable-size) (bj303b core-prim . hashtable-set!) (bj303a core-prim . hashtable-ref) (bj3039 core-prim . hashtable-mutable?) (bj3038 core-prim . hashtable-keys) (bj3037 core-prim . hashtable-entries) (bj3036 core-prim . hashtable-delete!) (bj3035 core-prim . hashtable-copy) (bj3034 core-prim . hashtable-contains?) (bj3033 core-prim . hashtable-clear!) (bj3032 core-prim . call-with-output-file) (bj3031 core-prim . call-with-input-file) (bj3030 core-prim . write-char) (bj302f core-prim . write) (bj302e core-prim . with-output-to-file) (bj302d core-prim . with-input-from-file) (bj302c core-prim . read-char) (bj302b core-prim . read) (bj302a core-prim . peek-char) (bj3029 core-prim . open-output-file) (bj3028 core-prim . open-input-file) (bj3027 core-prim . newline) (bj3026 core-prim . display) (bj3025 core-prim . close-output-port) (bj3024 core-prim . close-input-port) (bj3023 core-prim . eof-object?) (bj3022 core-prim . eof-object) (bj3021 core-prim . current-error-port) (bj3020 core-prim . current-output-port) (bj301f core-prim . current-input-port) (bj301e core-prim . output-port?) (bj301d core-prim . input-port?) (bj301c core-prim . utf-8-codec) (bj301b core-prim . utf-16-codec) (bj301a core-prim . transcoder-error-handling-mode) (bj3019 core-prim . transcoder-eol-style) (bj3018 core-prim . transcoder-codec) (bj3017 core-prim . transcoded-port) (bj3016 core-prim . textual-port?) (bj3015 core-prim . string->bytevector) (bj3014 core-prim . standard-output-port) (bj3013 core-prim . standard-input-port) (bj3012 core-prim . standard-error-port) (bj3011 core-prim . set-port-position!) (bj3010 core-prim . put-u8) (bj300f core-prim . put-string) (bj300e core-prim . put-datum) (bj300d core-prim . put-char) (bj300c core-prim . put-bytevector) (bj300b core-prim . port?) (bj300a core-prim . port-transcoder) (bj3009 core-prim . port-position) (bj3008 core-prim . port-has-set-port-position!?) (bj3007 core-prim . port-has-port-position?) (bj3006 core-prim . port-eof?) (bj3005 core-prim . output-port-buffer-mode) (bj3004 core-prim . open-string-output-port) (bj3003 core-prim . open-string-input-port) (bj3002 core-prim . open-file-output-port) (bj3001 core-prim . open-file-input/output-port) (bj3000 core-prim . open-file-input-port) (bj2fff core-prim . open-bytevector-output-port) (bj2ffe core-prim . open-bytevector-input-port) (bj2ffd core-prim . native-transcoder) (bj2ffc core-prim . native-eol-style) (bj2ffb core-prim . make-transcoder) (bj2ffa core-prim . latin-1-codec) (bj2a85 core-prim . make-i/o-write-error) (bj2a70 core-prim . make-i/o-read-error) (bj2b26 core-prim . make-i/o-port-error) (bj2a9c core-prim . make-i/o-invalid-position-error) (bj2ab7 core-prim . make-i/o-filename-error) (bj2ad0 core-prim . make-i/o-file-protection-error) (bj2ae5 core-prim . make-i/o-file-is-read-only-error) (bj2b0f core-prim . make-i/o-file-does-not-exist-error) (bj2afa core-prim . make-i/o-file-already-exists-error) (bj2a5b core-prim . make-i/o-error) (bj2b56 core-prim . make-i/o-encoding-error) (bj2b3f core-prim . make-i/o-decoding-error) (bj2ff9 core-prim . make-custom-textual-output-port) (bj2ff8 core-prim . make-custom-textual-input/output-port) (bj2ff7 core-prim . make-custom-textual-input-port) (bj2ff6 core-prim . make-custom-binary-output-port) (bj2ff5 core-prim . make-custom-binary-input/output-port) (bj2ff4 core-prim . make-custom-binary-input-port) (bj2ff3 core-prim . make-bytevector) (bj2ff2 core-prim . lookahead-u8) (bj2ff1 core-prim . lookahead-char) (bj2a87 core-prim . i/o-write-error?) (bj2a72 core-prim . i/o-read-error?) (bj2b2a core-prim . i/o-port-error?) (bj2aa0 core-prim . i/o-invalid-position-error?) (bj2abb core-prim . i/o-filename-error?) (bj2ad2 core-prim . i/o-file-protection-error?) (bj2ae7 core-prim . i/o-file-is-read-only-error?) (bj2b11 core-prim . i/o-file-does-not-exist-error?) (bj2afc core-prim . i/o-file-already-exists-error?) (bj2a5d core-prim . i/o-error?) (bj2aa2 core-prim . i/o-error-position) (bj2b2c core-prim . i/o-error-port) (bj2abd core-prim . i/o-error-filename) (bj2b5a core-prim . i/o-encoding-error?) (bj2b5c core-prim . i/o-encoding-error-char) (bj2b41 core-prim . i/o-decoding-error?) (bj2ff0 core-prim . get-u8) (bj2fef core-prim . get-string-n!) (bj2fee core-prim . get-string-n) (bj2fed core-prim . get-string-all) (bj2fec core-prim . get-line) (bj2feb core-prim . get-datum) (bj2fea core-prim . get-char) (bj2fe9 core-prim . get-bytevector-some) (bj2fe8 core-prim . get-bytevector-n!) (bj2fe7 core-prim . get-bytevector-n) (bj2fe6 core-prim . get-bytevector-all) (bj2fe5 core-prim . flush-output-port) (bj2fe4 core-prim . close-port) (bje37 core-prim . scheme-report-environment) (bj2fe3 core-prim . quotient) (bje35 core-prim . null-environment) (bj2fe2 core-prim . remainder) (bj2fe1 core-prim . modulo) (bj2fe0 core-prim . inexact->exact) (bj2fdf core-prim . force) (bj2fde core-prim . exact->inexact) (bj2fdd core-prim . make-promise) (bj2fdc core-prim . exit) (bj2c95 core-prim . command-line) (bj2fdb core-prim . string-fill!) (bj2fda core-prim . string-set!) (bj2fd9 core-prim . set-cdr!) (bj2fd8 core-prim . set-car!) (bj2fd7 core-prim . remove) (bj2fd6 core-prim . remv) (bj2fd5 core-prim . remp) (bj2fd4 core-prim . remq) (bj2fd3 core-prim . partition) (bj2fd2 core-prim . memv) (bj2fd1 core-prim . memq) (bj2fd0 core-prim . memp) (bj2fcf core-prim . member) (bj2fce core-prim . exists) (bj2fcd core-prim . for-all) (bj2fcc core-prim . fold-right) (bj2fcb core-prim . fold-left) (bj2fca core-prim . find) (bj2fc9 core-prim . filter) (bj2fc8 core-prim . cons*) (bj2fc7 core-prim . assv) (bj2fc6 core-prim . assq) (bj2fc5 core-prim . assp) (bj2fc4 core-prim . assoc) (bj2fc3 core-prim . call-with-string-output-port) (bj2fc2 core-prim . call-with-port) (bj2fc1 core-prim . call-with-bytevector-output-port) (bj2fc0 core-prim . bytevector->string) (bj2fbf core-prim . buffer-mode?) (bj2fbe core-prim . binary-port?) (bj2fbd core-prim . with-exception-handler) (bj2fbc core-prim . raise-continuable) (bj2fbb core-prim . raise) (bje3b core-prim . eval) (bje33 core-prim . environment) (bj2fba core-prim . make-enumeration) (bj2fb9 core-prim . enum-set=?) (bj2fb8 core-prim . enum-set-universe) (bj2fb7 core-prim . enum-set-union) (bj2fb6 core-prim . enum-set-subset?) (bj2fb5 core-prim . enum-set-projection) (bj2fb4 core-prim . enum-set-member?) (bj2fb3 core-prim . enum-set-intersection) (bj2fb2 core-prim . enum-set-indexer) (bj2fb1 core-prim . enum-set-difference) (bj2fb0 core-prim . enum-set-constructor) (bj2faf core-prim . enum-set-complement) (bj2fae core-prim . enum-set->list) (bj29d1 core-prim . who-condition?) (bj2949 core-prim . warning?) (bj2988 core-prim . violation?) (bj2a48 core-prim . undefined-violation?) (bj2a2f core-prim . syntax-violation?) (bj2a33 core-prim . syntax-violation-subform) (bj2a31 core-prim . syntax-violation-form) (bje5b core-prim . syntax-violation) (bj2fad core-prim . simple-conditions) (bj295e core-prim . serious-condition?) (bj29e8 core-prim . non-continuable-violation?) (bj2932 core-prim . message-condition?) (bj29cd core-prim . make-who-condition) (bj2947 core-prim . make-warning) (bj2986 core-prim . make-violation) (bj2a46 core-prim . make-undefined-violation) (bj2a29 core-prim . make-syntax-violation) (bj295c core-prim . make-serious-condition) (bj29e6 core-prim . make-non-continuable-violation) (bj292e core-prim . make-message-condition) (bj2a10 core-prim . make-lexical-violation) (bj29b2 core-prim . make-irritants-condition) (bj29fb core-prim . make-implementation-restriction-violation) (bj2971 core-prim . make-error) (bj299b core-prim . make-assertion-violation) (bj2a12 core-prim . lexical-violation?) (bj29b6 core-prim . irritants-condition?) (bj29fd core-prim . implementation-restriction-violation?) (bj2973 core-prim . error?) (bj29d3 core-prim . condition-who) (bj2fac core-prim . condition-predicate) (bj2934 core-prim . condition-message) (bj29b8 core-prim . condition-irritants) (bj2fab core-prim . condition-accessor) (bj2faa core-prim . condition) (bj299d core-prim . assertion-violation?) (bj2fa9 core-prim . condition?) (bj2fa8 core-prim . utf32->string) (bj2fa7 core-prim . utf16->string) (bj2fa6 core-prim . utf8->string) (bj2fa5 core-prim . uint-list->bytevector) (bj2fa4 core-prim . u8-list->bytevector) (bj2fa3 core-prim . string->utf8) (bj2fa2 core-prim . string->utf32) (bj2fa1 core-prim . string->utf16) (bj2fa0 core-prim . sint-list->bytevector) (bj2f9f core-prim . native-endianness) (bj2f9e core-prim . bytevector?) (bj2f9d core-prim . bytevector=?) (bj2f9c core-prim . bytevector-uint-set!) (bj2f9b core-prim . bytevector-uint-ref) (bj2f9a core-prim . bytevector-u8-set!) (bj2f99 core-prim . bytevector-u8-ref) (bj2f98 core-prim . bytevector-u64-set!) (bj2f97 core-prim . bytevector-u64-ref) (bj2f96 core-prim . bytevector-u64-native-set!) (bj2f95 core-prim . bytevector-u64-native-ref) (bj2f94 core-prim . bytevector-u32-set!) (bj2f93 core-prim . bytevector-u32-ref) (bj2f92 core-prim . bytevector-u32-native-set!) (bj2f91 core-prim . bytevector-u32-native-ref) (bj2f90 core-prim . bytevector-u16-set!) (bj2f8f core-prim . bytevector-u16-ref) (bj2f8e core-prim . bytevector-u16-native-set!) (bj2f8d core-prim . bytevector-u16-native-ref) (bj2f8c core-prim . bytevector-sint-set!) (bj2f8b core-prim . bytevector-sint-ref) (bj2f8a core-prim . bytevector-s8-set!) (bj2f89 core-prim . bytevector-s8-ref) (bj2f88 core-prim . bytevector-s64-set!) (bj2f87 core-prim . bytevector-s64-ref) (bj2f86 core-prim . bytevector-s64-native-set!) (bj2f85 core-prim . bytevector-s64-native-ref) (bj2f84 core-prim . bytevector-s32-set!) (bj2f83 core-prim . bytevector-s32-ref) (bj2f82 core-prim . bytevector-s32-native-set!) (bj2f81 core-prim . bytevector-s32-native-ref) (bj2f80 core-prim . bytevector-s16-set!) (bj2f7f core-prim . bytevector-s16-ref) (bj2f7e core-prim . bytevector-s16-native-set!) (bj2f7d core-prim . bytevector-s16-native-ref) (bj2f7c core-prim . bytevector-length) (bj2f7b core-prim . bytevector-ieee-single-ref) (bj2f7a core-prim . bytevector-ieee-single-set!) (bj2f79 core-prim . bytevector-ieee-single-native-set!) (bj2f78 core-prim . bytevector-ieee-single-native-ref) (bj2f77 core-prim . bytevector-ieee-double-set!) (bj2f76 core-prim . bytevector-ieee-double-ref) (bj2f75 core-prim . bytevector-ieee-double-native-set!) (bj2f74 core-prim . bytevector-ieee-double-native-ref) (bj2f73 core-prim . bytevector-fill!) (bj2f72 core-prim . bytevector-copy!) (bj2f71 core-prim . bytevector-copy) (bj2f70 core-prim . bytevector->uint-list) (bj2f6f core-prim . bytevector->u8-list) (bj2f6e core-prim . bytevector->sint-list) (bj2b86 core-prim . no-nans-violation?) (bj2b71 core-prim . no-infinities-violation?) (bj2b84 core-prim . make-no-nans-violation) (bj2b6f core-prim . make-no-infinities-violation) (bj2f6d core-prim . real->flonum) (bj2f6c core-prim . flzero?) (bj2f6b core-prim . fltruncate) (bj2f6a core-prim . fltan) (bj2f69 core-prim . flsqrt) (bj2f68 core-prim . flsin) (bj2f67 core-prim . flround) (bj2f66 core-prim . flpositive?) (bj2f65 core-prim . flonum?) (bj2f64 core-prim . flodd?) (bj2f63 core-prim . flnumerator) (bj2f62 core-prim . flnegative?) (bj2f61 core-prim . flnan?) (bj2f60 core-prim . flmod0) (bj2f5f core-prim . flmod) (bj2f5e core-prim . flmin) (bj2f5d core-prim . flmax) (bj2f5c core-prim . fllog) (bj2f5b core-prim . flinteger?) (bj2f5a core-prim . flinfinite?) (bj2f59 core-prim . flfloor) (bj2f58 core-prim . flfinite?) (bj2f57 core-prim . flexpt) (bj2f56 core-prim . flexp) (bj2f55 core-prim . fleven?) (bj2f54 core-prim . fldiv0-and-mod0) (bj2f53 core-prim . fldiv0) (bj2f52 core-prim . fldiv-and-mod) (bj2f51 core-prim . fldiv) (bj2f50 core-prim . fldenominator) (bj2f4f core-prim . flcos) (bj2f4e core-prim . flceiling) (bj2f4d core-prim . flatan) (bj2f4c core-prim . flasin) (bj2f4b core-prim . flacos) (bj2f4a core-prim . flabs) (bj2f49 core-prim . fl>?) (bj2f48 core-prim . fl>=?) (bj2f47 core-prim . fl=?) (bj2f46 core-prim . fl<?) (bj2f45 core-prim . fl<=?) (bj2f44 core-prim . fl/) (bj2f43 core-prim . fl-) (bj2f42 core-prim . fl+) (bj2f41 core-prim . fl*) (bj2f40 core-prim . fixnum->flonum) (bj2f3f core-prim . fxzero?) (bj2f3e core-prim . fxxor) (bj2f3d core-prim . fxrotate-bit-field) (bj2f3c core-prim . fxreverse-bit-field) (bj2f3b core-prim . fxpositive?) (bj2f3a core-prim . fxodd?) (bj2f39 core-prim . fxnot) (bj2f38 core-prim . fxnegative?) (bj2f37 core-prim . fxmod0) (bj2f36 core-prim . fxmod) (bj2f35 core-prim . fxmin) (bj2f34 core-prim . fxmax) (bj2f33 core-prim . fxlength) (bj2f32 core-prim . fxior) (bj2f31 core-prim . fxif) (bj2f30 core-prim . fxfirst-bit-set) (bj2f2f core-prim . fxeven?) (bj2f2e core-prim . fxdiv0-and-mod0) (bj2f2d core-prim . fxdiv0) (bj2f2c core-prim . fxdiv-and-mod) (bj2f2b core-prim . fxdiv) (bj2f2a core-prim . fxcopy-bit-field) (bj2f29 core-prim . fxcopy-bit) (bj2f28 core-prim . fxbit-set?) (bj2f27 core-prim . fxbit-field) (bj2f26 core-prim . fxbit-count) (bj2f25 core-prim . fxarithmetic-shift-right) (bj2f24 core-prim . fxarithmetic-shift-left) (bj2f23 core-prim . fxarithmetic-shift) (bj2f22 core-prim . fxand) (bj2f21 core-prim . fx>?) (bj2f20 core-prim . fx>=?) (bj2f1f core-prim . fx=?) (bj2f1e core-prim . fx<?) (bj2f1d core-prim . fx<=?) (bj2f1c core-prim . fx-/carry) (bj2f1b core-prim . fx-) (bj2f1a core-prim . fx+/carry) (bj2f19 core-prim . fx+) (bj2f18 core-prim . fx*/carry) (bj2f17 core-prim . fx*) (bj2f16 core-prim . greatest-fixnum) (bj2f15 core-prim . least-fixnum) (bj2f14 core-prim . fixnum-width) (bj2f13 core-prim . fixnum?) (bj2f12 core-prim . bitwise-rotate-bit-field) (bj2f11 core-prim . bitwise-reverse-bit-field) (bj2f10 core-prim . bitwise-length) (bj2f0f core-prim . bitwise-if) (bj2f0e core-prim . bitwise-first-bit-set) (bj2f0d core-prim . bitwise-copy-bit-field) (bj2f0c core-prim . bitwise-copy-bit) (bj2f0b core-prim . bitwise-bit-set?) (bj2f0a core-prim . bitwise-bit-field) (bj2f09 core-prim . bitwise-bit-count) (bj2f08 core-prim . bitwise-xor) (bj2f07 core-prim . bitwise-ior) (bj2f06 core-prim . bitwise-and) (bj2f05 core-prim . bitwise-not) (bj2f04 core-prim . bitwise-arithmetic-shift-right) (bj2f03 core-prim . bitwise-arithmetic-shift-left) (bj2f02 core-prim . bitwise-arithmetic-shift) (bj2f01 core-prim . zero?) (bj2f00 core-prim . vector?) (bj2eff core-prim . vector-set!) (bj2efe core-prim . vector-ref) (bj2efd core-prim . vector-map) (bj2efc core-prim . vector-length) (bj2efb core-prim . vector-for-each) (bj2efa core-prim . vector-fill!) (bj2ef9 core-prim . vector->list) (bj2ef8 core-prim . vector) (bj2ef7 core-prim . values) (bj2ef6 core-prim . truncate) (bj2ef5 core-prim . tan) (bj2ef4 core-prim . symbol?) (bj2ef3 core-prim . symbol=?) (bj2ef2 core-prim . symbol->string) (bj2ef1 core-prim . substring) (bj2ef0 core-prim . string?) (bj2eef core-prim . string>?) (bj2eee core-prim . string>=?) (bj2eed core-prim . string=?) (bj2eec core-prim . string<?) (bj2eeb core-prim . string<=?) (bj2eea core-prim . string-ref) (bj2ee9 core-prim . string-length) (bj2ee8 core-prim . string-for-each) (bj2ee7 core-prim . string-copy) (bj2ee6 core-prim . string-append) (bj2ee5 core-prim . string->symbol) (bj2ee4 core-prim . string->number) (bj2ee3 core-prim . string->list) (bj2ee2 core-prim . string) (bj2ee1 core-prim . sqrt) (bj2ee0 core-prim . sin) (bj2edf core-prim . round) (bj2ede core-prim . reverse) (bj2edd core-prim . real?) (bj2edc core-prim . real-valued?) (bj2edb core-prim . real-part) (bj2eda core-prim . rationalize) (bj2ed9 core-prim . rational?) (bj2ed8 core-prim . rational-valued?) (bj2ed7 core-prim . procedure?) (bj2ed6 core-prim . positive?) (bj2ed5 core-prim . pair?) (bj2ed4 core-prim . odd?) (bj2ed3 core-prim . numerator) (bj2ed2 core-prim . number?) (bj2ed1 core-prim . number->string) (bj2ed0 core-prim . null?) (bj2ecf core-prim . not) (bj2ece core-prim . negative?) (bj2ecd core-prim . nan?) (bj2ecc core-prim . min) (bj2ecb core-prim . max) (bj2eca core-prim . map) (bj2ec9 core-prim . make-vector) (bj2ec8 core-prim . make-string) (bj2ec7 core-prim . make-rectangular) (bj2ec6 core-prim . make-polar) (bj2ec5 core-prim . magnitude) (bj2ec4 core-prim . log) (bj2ec3 core-prim . list?) (bj2ec2 core-prim . list-tail) (bj2ec1 core-prim . list-ref) (bj2ec0 core-prim . list->vector) (bj2ebf core-prim . list->string) (bj2ebe core-prim . list) (bj2ebd core-prim . length) (bj2ebc core-prim . lcm) (bj2ebb core-prim . integer?) (bj2eba core-prim . integer-valued?) (bj2eb9 core-prim . integer->char) (bj2eb8 core-prim . infinite?) (bj2eb7 core-prim . inexact?) (bj2eb6 core-prim . inexact) (bj2eb5 core-prim . imag-part) (bj2eb4 core-prim . gcd) (bj2eb3 core-prim . for-each) (bj2eb2 core-prim . floor) (bj2eb1 core-prim . finite?) (bj2eb0 core-prim . expt) (bj2eaf core-prim . exp) (bj2eae core-prim . exact?) (bj2ead core-prim . exact-integer-sqrt) (bj2eac core-prim . exact) (bj2eab core-prim . even?) (bj2eaa core-prim . error) (bj2ea9 core-prim . eqv?) (bj2ea8 core-prim . equal?) (bj2ea7 core-prim . eq?) (bj2ea6 core-prim . dynamic-wind) (bj2ea5 core-prim . div0-and-mod0) (bj2ea4 core-prim . mod0) (bj2ea3 core-prim . div0) (bj2ea2 core-prim . div-and-mod) (bj2ea1 core-prim . mod) (bj2ea0 core-prim . div) (bj2e9f core-prim . denominator) (bj2e9e core-prim . cos) (bj2e9d core-prim . cons) (bj2e9c core-prim . complex?) (bj2e9b core-prim . char?) (bj2e9a core-prim . char>?) (bj2e99 core-prim . char>=?) (bj2e98 core-prim . char=?) (bj2e97 core-prim . char<?) (bj2e96 core-prim . char<=?) (bj2e95 core-prim . char->integer) (bj2e94 core-prim . ceiling) (bj2e93 core-prim . call-with-values) (bj2e92 core-prim . call/cc) (bj2e91 core-prim . call-with-current-continuation) (bj2e90 core-prim . cddddr) (bj2e8f core-prim . cdddar) (bj2e8e core-prim . cddadr) (bj2e8d core-prim . cddaar) (bj2e8c core-prim . cdaddr) (bj2e8b core-prim . cdadar) (bj2e8a core-prim . cdaadr) (bj2e89 core-prim . cdaaar) (bj2e88 core-prim . cadddr) (bj2e87 core-prim . caddar) (bj2e86 core-prim . cadadr) (bj2e85 core-prim . cadaar) (bj2e84 core-prim . caaddr) (bj2e83 core-prim . caadar) (bj2e82 core-prim . caaadr) (bj2e81 core-prim . caaaar) (bj2e80 core-prim . cdddr) (bj2e7f core-prim . cddar) (bj2e7e core-prim . cdadr) (bj2e7d core-prim . cdaar) (bj2e7c core-prim . caddr) (bj2e7b core-prim . cadar) (bj2e7a core-prim . caadr) (bj2e79 core-prim . caaar) (bj2e78 core-prim . cddr) (bj2e77 core-prim . cdar) (bj2e76 core-prim . cadr) (bj2e75 core-prim . caar) (bj2e74 core-prim . cdr) (bj2e73 core-prim . car) (bj2e72 core-prim . boolean?) (bj2e71 core-prim . boolean=?) (bj2e70 core-prim . atan) (bj2e6f core-prim . assertion-violation) (bje55 core-prim . assertion-error) (bj2e6e core-prim . asin) (bj2e6d core-prim . apply) (bj2e6c core-prim . append) (bj2e6b core-prim . angle) (bj2e6a core-prim . acos) (bj2e69 core-prim . abs) (bj2e68 core-prim . /) (bj2e67 core-prim . *) (bj2e66 core-prim . -) (bj2e65 core-prim . +) (bj2e64 core-prim . >=) (bj2e63 core-prim . >) (bj2e62 core-prim . =) (bj2e61 core-prim . <=) (bj2e60 core-prim . <) (bj2e5f core-prim . library) (bj2e5e $core-rtd &no-nans-rtd &no-nans-rcd) (bj2e5d $core-rtd &no-infinities-rtd &no-infinities-rcd) (bj2e5c $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (bj2e5b $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (bj2e5a $core-rtd &i/o-port-rtd &i/o-port-rcd) (bj2e59 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (bj2e58 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (bj2e57 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (bj2e56 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (bj2e55 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (bj2e54 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (bj2e53 $core-rtd &i/o-write-rtd &i/o-write-rcd) (bj2e52 $core-rtd &i/o-read-rtd &i/o-read-rcd) (bj2e51 $core-rtd &i/o-rtd &i/o-rcd) (bj2e50 $core-rtd &undefined-rtd &undefined-rcd) (bj2e4f $core-rtd &syntax-rtd &syntax-rcd) (bj2e4e $core-rtd &lexical-rtd &lexical-rcd) (bj2e4d $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (bj2e4c $core-rtd &non-continuable-rtd &non-continuable-rcd) (bj2e4b $core-rtd &who-rtd &who-rcd) (bj2e4a $core-rtd &irritants-rtd &irritants-rcd) (bj2e49 $core-rtd &assertion-rtd &assertion-rcd) (bj2e48 $core-rtd &violation-rtd &violation-rcd) (bj2e47 $core-rtd &error-rtd &error-rcd) (bj2e46 $core-rtd &serious-rtd &serious-rcd) (bj2e45 $core-rtd &warning-rtd &warning-rcd) (bj2e44 $core-rtd &message-rtd &message-rcd) (bj2e43 $core-rtd &condition-rtd &condition-rcd) (bj2e42 macro . define-condition-type) (bj2e41 macro . define-enumeration) (bj2e40 macro . define-record-type) (bj2e3f macro . parent-rtd) (bj2e3e macro . nongenerative) (bj2e3d macro . opaque) (bj2e3c macro . sealed) (bj2e3b macro . protocol) (bj2e3a macro . parent) (bj2e39 macro . immutable) (bj2e38 macro . mutable) (bj2e37 macro . fields) (bj2e36 macro . error-handling-mode) (bj2e35 macro . file-options) (bj2e34 macro . buffer-mode) (bj2e33 macro . eol-style) (bj2e32 macro . guard) (bj2e31 macro . trace-define) (bj2e30 macro . trace-lambda) (bj2e2f macro . unsyntax-splicing) (bj2e2e macro . unsyntax) (bj2e2d macro . unquote-splicing) (bj2e2c macro . unquote) (bj2e2b macro . _) (bj2e2a macro . else) (bj2e29 macro . =>) (bj2e28 macro . ...) (bj2e27 macro . assert) (bj2e26 macro . endianness) (bj2e25 macro . delay) (bj2e24 macro . time) (bj2e23 macro . do) (bj2e22 macro . cond) (bj2e21 macro . let*) (bj2e20 macro . let*-values) (bj2e1f macro . let-values) (bj2e1e macro . identifier-syntax) (bj2e1d macro . with-syntax) (bj2e1c macro . quasisyntax) (bj2e1b macro . quasiquote) (bj2e1a macro . syntax-rules) (bj2e19 macro . include) (bj2e18 macro . define-struct) (bj2e17 core-macro . record-constructor-descriptor) (bj2e16 core-macro . record-type-descriptor) (bj2e15 macro . case) (bj2e14 macro . parameterize) (bj2e13 macro . unless) (bj2e12 macro . when) (bj2e11 core-macro . or) (bj2e10 core-macro . and) (bj2e0f core-macro . if) (bj2e0e core-macro . let) (bj2e0d core-macro . letrec*) (bj2e0c core-macro . letrec) (bj2e0b core-macro . type-descriptor) (bj2e0a core-macro . case-lambda) (bj2e09 core-macro . lambda) (bj2e08 core-macro . syntax) (bj2e07 core-macro . syntax-case) (bj2e06 core-macro . quote) (bj2e05 core-macro . foreign-call) (bj2e04 letrec-syntax) (bj2e03 let-syntax) (bj2e02 set!) (bj2e01 import) (bj2e00 begin) (bj2dff module) (bj2dfe define-syntax) (bj2dfd define)) values values '#f '#f '#f '#f) (bj989@bj7d5@install-library 'bj3144 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . bj3123) (eval-core . bj3122) (set-symbol-value! . bj3121) (symbol-value . bj3120) (gensym . bj311f) (void . bj311e)) '() values values '#f '#f '#f '#f) (bj989@bj7d5@install-library 'bj3145 '(mosh) '() '() '() '() '((set-symbol-value! . bj3121) (symbol-value . bj3120) (regexp? . bj311c) (read-line . bj311b) (ungensym . bj3119) (alist->eq-hash-table . bj3118) (assoc-ref . bj3117) (print . bj3116) (format . bj3115) (host-os . bj3114) (library-path . bj7b4) (standard-library-path . bj3113) (file-newer? . bj3112) (stat-mtime . bj3111) (digit->integer . bj310d) (call-with-string-input-port . bj310c) (call-with-string-io . bj310b) (string-split . bj310a) (bytevector-for-each . bj3109) (string->regexp . bj3108) (rxmatch . bj3107) (regexp-replace-all . bj3106) (hashtable-for-each . bj3105) (set-current-directory! . bj3100) (expand-path . bj30ff) (current-directory . bj30fe) (p . bj30c0) (get-timeofday . bj30a7) (get-command-line . bj30a6) (sys-display . bj30a5) (whereis . bj30a4) (register . bj30a3) (vm-join! . bj30a2) (vm-set-value! . bj30a1) (vm? . bj30a0) (main-vm? . bj309f) (vm-eval . bj309e) (vm-self . bj309d) (vm-start! . bj309c) (make-vm . bj309b) (mutex-try-lock! . bj309a) (mutex-unlock! . bj3099) (mutex-lock! . bj3098) (mutex? . bj3097) (make-mutex . bj3096) (condition-variable-notify-all! . bj3095) (condition-variable-notify! . bj3094) (condition-variable-wait! . bj3093) (make-condition-variable . bj3092) (mosh-executable-path . bj3091) (make-file-options . bj3090) (source-info . bj308f) (make-compiler-instruction . bj308e) (make-instruction . bj308d) (set-source-info! . bj308c) (bignum? . bj308b) (fast-equal? . bj308a) (fasl-read . bj3089) (fasl-write . bj3088) (time-usage . bj3087) (os-constant . bj3086) (time . bj2e24) (include . bj2e19)) '() values values '#f '#f '#f '#f) (bj989@bj7d5@install-library 'bj3146 '(system) '() '() '() '() '((gensym-prefix-set! . bj311a) (write-to-file . bj3110) (file->list . bj310f) (file->string . bj310e) (mosh-cache-dir . bj59e) (call-process . bj3104) (local-tz-offset . bj3103) (microseconds . bj3102) (directory-list . bj3101) (expand-path . bj30ff) (%spawn . bj30fd) (%waitpid . bj30fc) (simple-struct-name . bj30fb) (simple-struct-set! . bj30fa) (simple-struct-ref . bj30f9) (make-simple-struct . bj30f8) (simple-struct? . bj30f7) (pointer-ref-c-int64 . bj30f6) (pointer-ref-c-int32 . bj30f5) (pointer-ref-c-int16 . bj30f4) (pointer-ref-c-int8 . bj30f3) (pointer-ref-c-uint64 . bj30f2) (pointer-ref-c-uint32 . bj30f1) (pointer-ref-c-uint16 . bj30f0) (pointer-ref-c-uint8 . bj30ef) (pointer-set-c-uint64! . bj30ee) (pointer-set-c-uint32! . bj30ed) (pointer-set-c-uint16! . bj30ec) (pointer-set-c-uint8! . bj30eb) (pointer-set-c-int64! . bj30ea) (pointer-set-c-int32! . bj30e9) (pointer-set-c-int16! . bj30e8) (pointer-set-c-int8! . bj30e7) (pointer-set-c-pointer! . bj30e6) (pointer-set-c-double! . bj30e5) (pointer-set-c-float! . bj30e4) (pointer-set-c-long-long! . bj30e3) (pointer-set-c-long! . bj30e2) (pointer-set-c-int! . bj30e1) (pointer-set-c-short! . bj30e0) (pointer-set-c-char! . bj30df) (pointer-ref-c-pointer . bj30de) (pointer-ref-c-double . bj30dd) (pointer-ref-c-float . bj30dc) (pointer-ref-c-unsigned-long-long . bj30db) (pointer-ref-c-signed-long-long . bj30da) (pointer-ref-c-unsigned-long . bj30d9) (pointer-ref-c-signed-long . bj30d8) (pointer-ref-c-unsigned-int . bj30d7) (pointer-ref-c-signed-int . bj30d6) (pointer-ref-c-unsigned-short . bj30d5) (pointer-ref-c-signed-short . bj30d4) (pointer-ref-c-unsigned-char . bj30d3) (pointer-ref-c-signed-char . bj30d2) (pointer->integer . bj30d1) (integer->pointer . bj30d0) (pointer? . bj30cf) (shared-errno . bj30ce) (%ffi-free-c-callback-trampoline . bj30cd) (%ffi-make-c-callback-trampoline . bj30cc) (%ffi-free . bj30cb) (%ffi-malloc . bj30ca) (%ffi-supported? . bj30c9) (%ffi-pointer->string . bj30c8) (%ffi-call . bj30c7) (%ffi-lookup . bj30c6) (%ffi-open . bj30c5) (null-terminated-utf8->string . bj30c4) (null-terminated-bytevector->string . bj30c3) (%fork . bj30c2) (%pipe . bj30c1) (open-output-string . bj30bf) (get-output-string . bj30be) (file-stat-ctime . bj30bd) (file-stat-atime . bj30bc) (file-stat-mtime . bj30bb) (file-size-in-bytes . bj30ba) (file-writable? . bj30b9) (file-executable? . bj30b8) (file-readable? . bj30b7) (file-regular? . bj30b6) (file-symbolic-link? . bj30b5) (file-directory? . bj30b4) (create-symbolic-link . bj30b3) (rename-file . bj30b2) (delete-directory . bj30b1) (create-directory . bj30b0) (create-mosh-cache-dir . bj30af) (get-environment-variables . bj30ae) (current-exception-handler . bj30ad) (get-environment-variable . bj30ac) (join-wraps . bj30ab) (id->real-label . bj30aa) (same-marks? . bj30a9) (same-marks*? . bj30a8) (disasm . bj3085) (make-parameter . bj59c) (socket-port . bj3084) (socket-shutdown . bj3083) (socket-close . bj3082) (socket-send . bj3081) (socket-recv! . bj3080) (socket-recv . bj307f) (make-server-socket . bj307e) (make-client-socket . bj307d) (socket-accept . bj307c) (socket? . bj307b) (parameterize . bj2e14)) '() values values '#f '#f '#f '#f)))
(begin (set! bj2c80@ref (unspecified)) (set! bj2c82@x* (unspecified)) (set! bj2c84@add-library-path! (unspecified)) (set! bj2c86@parse-and-add-library-path (unspecified)) (set! bj2c88@for-each-with-index (unspecified)) (set! bj2c8a@rpad (unspecified)) (set! bj2c8c@condition-printer (unspecified)) (set! bj2c8e@record->field-alist (unspecified)) (set! bj2c90@map-with-index (unspecified)) (set! bj2c92@repl (unspecified)) (set! bj2c94@trace-printer (unspecified)) (set! bj2c96@command-line (unspecified)) (set! bj2c98@local-library-path (unspecified)) (set! bj2c9a@load/args (unspecified)) (set! bj2c9c@load (unspecified)) (set! bj2c9e@ironscheme-build (unspecified)) (set! bj2ca0@eval-top-level (unspecified)) (set! bj2ca2@compile-system-libraries (unspecified)) (set! bj2ca4@compile (unspecified)) (set! bj2ca6@compile->closure (unspecified)) (set! bj2ca8@pre-compile-r6rs-file (unspecified)) (set! bj2caa@load-r6rs-top-level (unspecified)) (set! bj2cac@load-r6rs-top-level-sexp (unspecified)) (set! bj2cae@prefix-inc (unspecified)) (set! bj2cb0@prefix-inc! (unspecified)) (set! bj2c80@ref (lambda (bj2ceb@rtd bj2cec@i bj2ced@x) (let ((bj2cf1@val ((record-accessor bj2ceb@rtd bj2cec@i) bj2ced@x))) (if (symbol? bj2cf1@val) (ungensym bj2cf1@val) bj2cf1@val)))) (set! bj2de3@bj2c80@ref bj2c80@ref) (set! bj2c82@x* '()) (set! bj2de4@bj2c82@x* bj2c82@x*) (set! bj2c84@add-library-path! (lambda (bj2cf3@path) (bj979@bj7b5@library-path (append (bj979@bj7b5@library-path) (list bj2cf3@path))))) (set! bj2de5@bj2c84@add-library-path! bj2c84@add-library-path!) (set! bj2c86@parse-and-add-library-path (lambda (bj2cf5@paths bj2cf6@message) (let ((bj2cfa@separator '#f)) (begin (set! bj2cfa@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((bj2cfb@t bj2cf5@paths)) (if bj2cfb@t ((lambda (bj2cfd@paths) (for-each (lambda (bj2cff@path) (if (file-exists? bj2cff@path) (bj2c84@add-library-path! (expand-path bj2cff@path)) (format (current-error-port) bj2cf6@message bj2cff@path))) (string-split bj2cfd@paths bj2cfa@separator))) bj2cfb@t) (void))))))) (set! bj2de6@bj2c86@parse-and-add-library-path bj2c86@parse-and-add-library-path) (set! bj2c88@for-each-with-index (lambda (bj2d01@proc bj2d02@lst) (letrec ((bj2d05@loop (lambda (bj2d07@i bj2d08@lst) (if (null? bj2d08@lst) (if '#f '#f (void)) (begin (bj2d01@proc bj2d07@i (car bj2d08@lst)) (bj2d05@loop (+ bj2d07@i '1) (cdr bj2d08@lst))))))) (bj2d05@loop '1 bj2d02@lst)))) (set! bj2de7@bj2c88@for-each-with-index bj2c88@for-each-with-index) (set! bj2c8a@rpad (lambda (bj2d0b@str bj2d0c@pad bj2d0d@n) (let ((bj2d11@rest (- bj2d0d@n (string-length (format '"~a" bj2d0b@str))))) (let bj2d17@loop ((bj2d13@rest bj2d11@rest) (bj2d14@ret (format '"~a" bj2d0b@str))) (if (<= bj2d13@rest '0) bj2d14@ret (bj2d17@loop (- bj2d13@rest '1) (string-append bj2d14@ret bj2d0c@pad))))))) (set! bj2de8@bj2c8a@rpad bj2c8a@rpad) (set! bj2c8c@condition-printer (lambda (bj2d19@e bj2d1a@port) (let ((bj2d1e@max-condition-len '#f)) (begin (set! bj2d1e@max-condition-len (apply max (map (lambda (bj2d2f@c) (string-length (symbol->string (record-type-name (record-rtd bj2d2f@c))))) (simple-conditions bj2d19@e)))) (begin (display '" Condition components:\n" bj2d1a@port) (bj2c88@for-each-with-index (lambda (bj2d1f@i bj2d20@x) (let ((bj2d23@rtd (record-rtd bj2d20@x)) (bj2d24@fields-alist (bj2c8e@record->field-alist bj2d20@x))) (begin (format bj2d1a@port '" ~d. ~a" bj2d1f@i (bj2c8a@rpad (symbol->string (record-type-name bj2d23@rtd)) '" " bj2d1e@max-condition-len)) (if (null? bj2d24@fields-alist) (newline bj2d1a@port) (void)) (let bj2d2b@loop ((bj2d27@first '#t) (bj2d28@fields-alist bj2d24@fields-alist)) (if (null? bj2d28@fields-alist) '() (let ((bj2d2d@field (car bj2d28@fields-alist))) (begin (if (not bj2d27@first) (display (bj2c8a@rpad '"" '" " (+ '4 bj2d1e@max-condition-len)) bj2d1a@port) (void)) (display '"       " bj2d1a@port) (display (car bj2d2d@field) bj2d1a@port) (display '": " bj2d1a@port) (write (cdr bj2d2d@field) bj2d1a@port) (newline bj2d1a@port) (bj2d2b@loop '#f (cdr bj2d28@fields-alist))))))))) (simple-conditions bj2d19@e))))))) (set! bj2de9@bj2c8c@condition-printer bj2c8c@condition-printer) (set! bj2c8e@record->field-alist (lambda (bj2d31@r) (let ((bj2d34@ref '#f)) (begin (set! bj2d34@ref (lambda (bj2d3f@rtd bj2d40@i bj2d41@x) (let ((bj2d45@val ((record-accessor bj2d3f@rtd bj2d40@i) bj2d41@x))) (if (symbol? bj2d45@val) (ungensym bj2d45@val) bj2d45@val)))) (let bj2d39@loop ((bj2d35@ret '()) (bj2d36@rtd (record-rtd bj2d31@r))) (if bj2d36@rtd (bj2d39@loop (append bj2d35@ret (bj2c90@map-with-index (lambda (bj2d3b@i bj2d3c@field) (cons bj2d3c@field (bj2d34@ref bj2d36@rtd bj2d3b@i bj2d31@r))) (vector->list (record-type-field-names bj2d36@rtd)))) (record-type-parent bj2d36@rtd)) bj2d35@ret)))))) (set! bj2dea@bj2c8e@record->field-alist bj2c8e@record->field-alist) (set! bj2c90@map-with-index (lambda (bj2d47@proc bj2d48@lst) (let bj2d51@loop ((bj2d4b@i '0) (bj2d4c@lst bj2d48@lst) (bj2d4d@ret '())) (if (null? bj2d4c@lst) (reverse bj2d4d@ret) (bj2d51@loop (+ bj2d4b@i '1) (cdr bj2d4c@lst) (cons (bj2d47@proc bj2d4b@i (car bj2d4c@lst)) bj2d4d@ret)))))) (set! bj2deb@bj2c90@map-with-index bj2c90@map-with-index) (set! bj2c92@repl (lambda bj2d53@x (let ((bj2d56@rec '#f)) (begin (set! bj2d56@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (bj2d59@bj2d57) (lambda () (with-exception-handler (lambda (bj2d5b@e) ((call/cc (lambda (bj2d5d@bj2d58) (bj2d59@bj2d57 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? bj2d5b@e) (bj2c8c@condition-printer bj2d5b@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" bj2d5b@e))) (bj2d5d@bj2d58 (lambda () (raise-continuable bj2d5b@e)))))))))) (lambda () (let bj2d63@loop ((bj2d5f@line (get-line (current-input-port))) (bj2d60@accum '"")) (let ((bj2d66@parentheses-ok? '#f) (bj2d68@eval-string-print '#f)) (begin (set! bj2d66@parentheses-ok? (lambda (bj2d6d@text) (let bj2d75@loop ((bj2d6f@chars (string->list bj2d6d@text)) (bj2d70@p0 '0) (bj2d71@p1 '0)) (if (null? bj2d6f@chars) (= '0 bj2d70@p0 bj2d71@p1) (let ((bj2d77@t (car bj2d6f@chars))) (if (memv bj2d77@t '(#\()) (bj2d75@loop (cdr bj2d6f@chars) (+ bj2d70@p0 '1) bj2d71@p1) (if (memv bj2d77@t '(#\))) (bj2d75@loop (cdr bj2d6f@chars) (- bj2d70@p0 '1) bj2d71@p1) (if (memv bj2d77@t '(#\[)) (bj2d75@loop (cdr bj2d6f@chars) bj2d70@p0 (+ bj2d71@p1 '1)) (if (memv bj2d77@t '(#\])) (bj2d75@loop (cdr bj2d6f@chars) bj2d70@p0 (- bj2d71@p1 '1)) (bj2d75@loop (cdr bj2d6f@chars) bj2d70@p0 bj2d71@p1)))))))))) (set! bj2d68@eval-string-print (lambda (bj2d6b@text) (if (not (or (string=? '"\n" bj2d6b@text) (= '0 (string-length bj2d6b@text)))) (write (bj2ca0@eval-top-level (call-with-port (open-string-input-port bj2d6b@text) read))) (void)))) (if (eof-object? bj2d5f@line) (begin (bj2d68@eval-string-print bj2d60@accum) (exit)) (let ((bj2d69@current (string-append bj2d60@accum bj2d5f@line))) (if (bj2d66@parentheses-ok? bj2d69@current) (bj2d68@eval-string-print bj2d69@current) (bj2d63@loop (get-line (current-input-port)) bj2d69@current))))))))))))) (newline) (bj2d56@rec)))) (bj2d56@rec))))) (set! bj2dec@bj2c92@repl bj2c92@repl) (set! bj2c94@trace-printer (bj6bf@bj59d@make-parameter write)) (set! bj2ded@bj2c94@trace-printer bj2c94@trace-printer) (set! bj2c96@command-line (bj6bf@bj59d@make-parameter (get-command-line))) (set! bj2dee@bj2c96@command-line bj2c96@command-line) (set! bj2c98@local-library-path (lambda (bj2d79@filename) (bj979@bj7b5@library-path))) (set! bj2def@bj2c98@local-library-path bj2c98@local-library-path) (set! bj2c9a@load/args (lambda (bj2d7b@filename . bj2d7d@args) (begin (apply bj2caa@load-r6rs-top-level bj2d7b@filename 'load bj2d7d@args) (void)))) (set! bj2df0@bj2c9a@load/args bj2c9a@load/args) (set! bj2c9c@load (lambda (bj2d7f@filename) (begin (apply bj2caa@load-r6rs-top-level bj2d7f@filename 'load (bj2c96@command-line)) (void)))) (set! bj2df1@bj2c9c@load bj2c9c@load) (set! bj2c9e@ironscheme-build (lambda () (bj2c9c@load '"ironscheme-buildscript.ss"))) (set! bj2df2@bj2c9e@ironscheme-build bj2c9e@ironscheme-build) (set! bj2ca0@eval-top-level (lambda (bj2d81@x) (bj28a6@bje3c@eval bj2d81@x (bj28bd@bje6a@interaction-environment)))) (set! bj2df3@bj2ca0@eval-top-level bj2ca0@eval-top-level) (set! bj2ca2@compile-system-libraries (lambda () (bj2ca0@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! bj2df4@bj2ca2@compile-system-libraries bj2ca2@compile-system-libraries) (set! bj2ca4@compile (lambda (bj2d83@filename) (bj2caa@load-r6rs-top-level bj2d83@filename 'compile))) (set! bj2df5@bj2ca4@compile bj2ca4@compile) (set! bj2ca6@compile->closure (lambda (bj2d85@filename) (bj2caa@load-r6rs-top-level bj2d85@filename 'closure))) (set! bj2df6@bj2ca6@compile->closure bj2ca6@compile->closure) (set! bj2ca8@pre-compile-r6rs-file (lambda (bj2d87@filename) (bj2caa@load-r6rs-top-level bj2d87@filename 'compile))) (set! bj2df7@bj2ca8@pre-compile-r6rs-file bj2ca8@pre-compile-r6rs-file) (set! bj2caa@load-r6rs-top-level (lambda (bj2d89@filename bj2d8a@how . bj2d8d@args) (begin (bj979@bj7b5@library-path (bj2c98@local-library-path bj2d89@filename)) (let ((bj2d8f@x* (with-input-from-file bj2d89@filename (lambda () (let bj2d91@f () (let ((bj2d93@x (bj6b1@bj581@read-annotated))) (if (eof-object? bj2d93@x) '() (cons bj2d93@x (bj2d91@f))))))))) (let ((bj2d95@t bj2d8a@how)) (if (memv bj2d95@t '(closure)) (bj28bc@bje68@pre-compile-r6rs-top-level bj2d8f@x*) (if (memv bj2d95@t '(load)) (begin (bj2c96@command-line (cons bj2d89@filename (car bj2d8d@args))) (bj6c0@bj59f@mosh-cache-dir (create-mosh-cache-dir)) (if (bj6c0@bj59f@mosh-cache-dir) (gensym-prefix-set! (bj2cb0@prefix-inc! (string-append (bj6c0@bj59f@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (bj2d97@file) ((call/cc (lambda (bj2d9b@bj2d99) (lambda () (with-exception-handler (lambda (bj2d9d@c) ((call/cc (lambda (bj2d9f@bj2d9a) (bj2d9b@bj2d99 (lambda () (if '#t '#t (bj2d9f@bj2d9a (lambda () (raise-continuable bj2d9d@c)))))))))) (lambda () (delete-file (string-append (bj6c0@bj59f@mosh-cache-dir) '"/" bj2d97@file))))))))) (directory-list (bj6c0@bj59f@mosh-cache-dir))) (void)) (let ((bj2da1@compiled (bj28bb@bje66@compile-r6rs-top-level bj2d8f@x*))) (begin (if (and (bj6c0@bj59f@mosh-cache-dir) (not (symbol-value '%disable-acc))) (bj97d@bj7bd@serialize-all bj6ba@bj593@serialize-library bj716@bj6cf@compile-core-expr) (void)) (bj2da1@compiled)))) (if (memv bj2d95@t '(compile)) (begin (bj28bb@bje66@compile-r6rs-top-level bj2d8f@x*) (bj97d@bj7bd@serialize-all bj6ba@bj593@serialize-library bj716@bj6cf@compile-core-expr)) (if '#f '#f (void)))))))))) (set! bj2df8@bj2caa@load-r6rs-top-level bj2caa@load-r6rs-top-level) (set! bj2cac@load-r6rs-top-level-sexp (lambda (bj2da3@import-spec bj2da4@thunk) (let ((bj2daf@bj2da8 bj979@bj7b5@library-path) (bj2db0@bj2daa bj6c0@bj59f@mosh-cache-dir) (bj2db1@bj2dac (bj2c98@local-library-path '"")) (bj2db2@bj2dae (create-mosh-cache-dir))) (let ((bj2db7@swap (lambda () (begin (let ((bj2db9@t (bj2daf@bj2da8))) (begin (bj2daf@bj2da8 bj2db1@bj2dac) (set! bj2db1@bj2dac bj2db9@t))) (let ((bj2dbb@t (bj2db0@bj2daa))) (begin (bj2db0@bj2daa bj2db2@bj2dae) (set! bj2db2@bj2dae bj2dbb@t))))))) (dynamic-wind bj2db7@swap (lambda () (begin (if (bj6c0@bj59f@mosh-cache-dir) (gensym-prefix-set! (bj2cb0@prefix-inc! (string-append (bj6c0@bj59f@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((bj2dc1@bj2dbe bj2c96@command-line) (bj2dc2@bj2dc0 '())) (let ((bj2dc5@swap (lambda () (let ((bj2dc7@t (bj2dc1@bj2dbe))) (begin (bj2dc1@bj2dbe bj2dc2@bj2dc0) (set! bj2dc2@bj2dc0 bj2dc7@t)))))) (dynamic-wind bj2dc5@swap (lambda () ((bj28bb@bje66@compile-r6rs-top-level (list (cons 'import bj2da3@import-spec) (list bj2da4@thunk))))) bj2dc5@swap))))) bj2db7@swap))))) (set! bj2df9@bj2cac@load-r6rs-top-level-sexp bj2cac@load-r6rs-top-level-sexp) (set! bj2cae@prefix-inc (lambda (bj2dc9@prefix-string) (let ((bj2dcb@prefix (symbol->string bj2dc9@prefix-string))) (let ((bj2dcd@len (string-length bj2dcb@prefix))) (let bj2dd5@loop ((bj2dcf@i (- bj2dcd@len '1)) (bj2dd0@carry? '#t) (bj2dd1@accum '())) (if (< bj2dcf@i '0) (string->symbol (list->string (if bj2dd0@carry? (cons '#\a bj2dd1@accum) bj2dd1@accum))) (if bj2dd0@carry? (let ((bj2dd7@next-integer (+ '1 (char->integer (string-ref bj2dcb@prefix bj2dcf@i))))) (if (= bj2dd7@next-integer '123) (bj2dd5@loop (- bj2dcf@i '1) '#f (cons '#\A bj2dd1@accum)) (if (= bj2dd7@next-integer '91) (bj2dd5@loop (- bj2dcf@i '1) '#t (cons '#\a bj2dd1@accum)) (bj2dd5@loop (- bj2dcf@i '1) '#f (cons (integer->char bj2dd7@next-integer) bj2dd1@accum))))) (bj2dd5@loop (- bj2dcf@i '1) '#f (cons (string-ref bj2dcb@prefix bj2dcf@i) bj2dd1@accum))))))))) (set! bj2dfa@bj2cae@prefix-inc bj2cae@prefix-inc) (set! bj2cb0@prefix-inc! (lambda (bj2dd9@file) (begin (if (not (file-exists? bj2dd9@file)) (call-with-output-file bj2dd9@file (lambda (bj2ddb@port) (write 'd bj2ddb@port))) (void)) (let ((bj2ddd@prefix (call-with-input-file bj2dd9@file read))) (if (main-vm?) (let ((bj2ddf@next-prefix (bj2cae@prefix-inc bj2ddd@prefix))) (begin (call-with-port (open-file-output-port bj2dd9@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (bj2de1@port) (write bj2ddf@next-prefix bj2de1@port))) bj2ddd@prefix)) bj2ddd@prefix))))) (set! bj2dfb@bj2cb0@prefix-inc! bj2cb0@prefix-inc!) (begin (bj97e@bj7bf@current-precompiled-library-loader bj6bb@bj595@load-serialized-library) (set-symbol-value! 'load bj2c9c@load) (set-symbol-value! 'pre-compile-r6rs-file bj2ca8@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs bj2ca0@eval-top-level) (set-symbol-value! 'int-env-syms bj289d@bje2a@interaction-environment-symbols) (set-symbol-value! 'expanded2core bj715@bj6cd@expanded->core) (set-symbol-value! 'trace-printer bj2c94@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (bj2cb1@c) (condition (bj2bdd@bj29e7@make-non-continuable-violation) (bj2bd3@bj29ce@make-who-condition 'raise) (bj2b97@bj292f@make-message-condition '"returned from non-continuable exception") (bj2bc9@bj29b3@make-irritants-condition (list bj2cb1@c))))) (bj2c86@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (bj2c86@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (bj2c84@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (bj2c84@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (bj2c84@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((bj2cb3@prefix (lambda (bj2cb5@ext bj2cb6@ls) (append (map (lambda (bj2cb9@x) (string-append bj2cb5@ext bj2cb9@x)) bj2cb6@ls) bj2cb6@ls)))) (bj97a@bj7b7@library-extensions (bj2cb3@prefix '".mosh" (bj97a@bj7b7@library-extensions)))) (current-exception-handler (lambda (bj2cbb@c) (if (condition? bj2cbb@c) (bj2c8c@condition-printer bj2cbb@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" bj2cbb@c)))) (if ((call/cc (lambda (bj2cbf@bj2cbd) (lambda () (with-exception-handler (lambda (bj2cc1@c) ((call/cc (lambda (bj2cc3@bj2cbe) (bj2cbf@bj2cbd (lambda () (if '#t '#f (bj2cc3@bj2cbe (lambda () (raise-continuable bj2cc1@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (bj2cac@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (bj2c96@command-line)) (let ((bj2ccd@bj2cc6 bj2c96@command-line) (bj2cce@bj2cc8 bj6c0@bj59f@mosh-cache-dir) (bj2ccf@bj2cca '()) (bj2cd0@bj2ccc (create-mosh-cache-dir))) (let ((bj2cd5@swap (lambda () (begin (let ((bj2cd7@t (bj2ccd@bj2cc6))) (begin (bj2ccd@bj2cc6 bj2ccf@bj2cca) (set! bj2ccf@bj2cca bj2cd7@t))) (let ((bj2cd9@t (bj2cce@bj2cc8))) (begin (bj2cce@bj2cc8 bj2cd0@bj2ccc) (set! bj2cd0@bj2ccc bj2cd9@t))))))) (dynamic-wind bj2cd5@swap (lambda () (begin (if (bj6c0@bj59f@mosh-cache-dir) (gensym-prefix-set! (bj2cb0@prefix-inc! (string-append (bj6c0@bj59f@mosh-cache-dir) '"/prefix.txt"))) (void)) (bj2c92@repl))) bj2cd5@swap))) (begin (bj979@bj7b5@library-path (bj2c98@local-library-path (car (bj2c96@command-line)))) (set! bj2c82@x* (with-input-from-file (car (bj2c96@command-line)) (lambda () (let bj2cdb@f () (let ((bj2cdd@x (bj6b1@bj581@read-annotated))) (if (eof-object? bj2cdd@x) '() (cons bj2cdd@x (bj2cdb@f)))))))) (bj2c96@command-line (cons (car (bj2c96@command-line)) (cdr (bj2c96@command-line)))) (bj6c0@bj59f@mosh-cache-dir (create-mosh-cache-dir)) (if (bj6c0@bj59f@mosh-cache-dir) (gensym-prefix-set! (bj2cb0@prefix-inc! (string-append (bj6c0@bj59f@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (bj2cdf@file) ((call/cc (lambda (bj2ce3@bj2ce1) (lambda () (with-exception-handler (lambda (bj2ce5@c) ((call/cc (lambda (bj2ce7@bj2ce2) (bj2ce3@bj2ce1 (lambda () (if '#t '#t (bj2ce7@bj2ce2 (lambda () (raise-continuable bj2ce5@c)))))))))) (lambda () (delete-file (string-append (bj6c0@bj59f@mosh-cache-dir) '"/" bj2cdf@file))))))))) (directory-list (bj6c0@bj59f@mosh-cache-dir))) (void)) (let ((bj2ce9@compiled (bj28bb@bje66@compile-r6rs-top-level bj2c82@x*))) (begin (if (and (bj6c0@bj59f@mosh-cache-dir) (not (symbol-value '%disable-acc))) (bj97d@bj7bd@serialize-all bj6ba@bj593@serialize-library bj716@bj6cf@compile-core-expr) (void)) (bj2ce9@compiled))))))))
