;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! Z28bb@library-file-path->cache-path (unspecified)) (set! Z28bd@read-annotated (unspecified)) (set! Z28bf@annotation-stripped (unspecified)) (set! Z28c1@annotation? (unspecified)) (set! Z28c3@annotation-source (unspecified)) (set! Z28c5@annotation-expression (unspecified)) (set! Z28c7@scm->fasl (unspecified)) (set! Z28c9@fasl-save (unspecified)) (set! Z28cb@fasl-load (unspecified)) (set! Z28cd@verbose? (unspecified)) (set! Z28cf@serialize-library (unspecified)) (set! Z28d1@load-serialized-library (unspecified)) (set! Z28d3@make-record-printer (unspecified)) (set! Z28d5@compile-core (unspecified)) (set! Z28d7@read-library-source-file (unspecified)) (set! Z28d9@make-parameter (unspecified)) (set! Z28db@mosh-cache-dir (unspecified)) (set! Z2971@file-options-spec (unspecified)) (set! Z28bb@library-file-path->cache-path (lambda (Z2972@x) (call-with-values (lambda () (open-string-output-port)) (lambda (Z2978@Z2975 Z2979@Z2977) (let ((Z297c@extract Z2979@Z2977) (Z297d@p Z2978@Z2975)) (letrec* ((Z2981@display-hex (lambda (Z298a@n) (if (<= '0 Z298a@n '9) (display Z298a@n Z297d@p) (display (integer->char (+ (char->integer '#\a) (- Z298a@n '10))) Z297d@p))))) (begin (let Z2984@f ((Z2982@ls (string-split Z2972@x '#\/))) (if (not (null? Z2982@ls)) (begin (display '"_" Z297d@p) (for-each (lambda (Z2986@c) (if (or (char<=? '#\a Z2986@c '#\z) (char<=? '#\A Z2986@c '#\Z) (char<=? '#\0 Z2986@c '#\9) (memv Z2986@c '(#\- #\. #\_ #\~))) (display Z2986@c Z297d@p) (begin (display '"%" Z297d@p) (let ((Z2988@n (char->integer Z2986@c))) (begin (Z2981@display-hex (quotient Z2988@n '16)) (Z2981@display-hex (remainder Z2988@n '16))))))) (string->list (car Z2982@ls))) (Z2984@f (cdr Z2982@ls))) (void))) (Z297c@extract)))))))) (set! Z29ec@Z28bb@library-file-path->cache-path Z28bb@library-file-path->cache-path) (set! Z28bd@read-annotated read) (set! Z29ed@Z28bd@read-annotated Z28bd@read-annotated) (set! Z28bf@annotation-stripped (lambda (Z298c@x) (if (pair? Z298c@x) (cons (Z28bf@annotation-stripped (car Z298c@x)) (Z28bf@annotation-stripped (cdr Z298c@x))) (if (procedure? Z298c@x) (set-source-info! Z298c@x '#f) Z298c@x)))) (set! Z29ee@Z28bf@annotation-stripped Z28bf@annotation-stripped) (set! Z28c1@annotation? (lambda (Z298e@x) (or (and (annotated-pair? Z298e@x) (source-info Z298e@x)) (and (procedure? Z298e@x) (source-info Z298e@x))))) (set! Z29ef@Z28c1@annotation? Z28c1@annotation?) (set! Z28c3@annotation-source (lambda (Z2990@x) (source-info Z2990@x))) (set! Z29f0@Z28c3@annotation-source Z28c3@annotation-source) (set! Z28c5@annotation-expression (lambda (Z2992@x) (if (annotated-pair? Z2992@x) (cons (car Z2992@x) (cdr Z2992@x)) (if (procedure? Z2992@x) (set-source-info! Z2992@x '#f) Z2992@x)))) (set! Z29f1@Z28c5@annotation-expression Z28c5@annotation-expression) (set! Z28c7@scm->fasl (lambda (Z2994@filename) (string-append (Z28db@mosh-cache-dir) '"/" (Z28bb@library-file-path->cache-path Z2994@filename) '".mosh-fasl"))) (set! Z29f2@Z28c7@scm->fasl Z28c7@scm->fasl) (set! Z28c9@fasl-save (lambda (Z2996@filename Z2997@obj) (call-with-port (open-file-output-port Z2996@filename) (lambda (Z299a@port) ((symbol-value 'fasl-write!) Z2997@obj Z299a@port))))) (set! Z29f3@Z28c9@fasl-save Z28c9@fasl-save) (set! Z28cb@fasl-load (lambda (Z299c@filename) (call-with-port (open-file-input-port Z299c@filename) (symbol-value 'fasl-read!)))) (set! Z29f4@Z28cb@fasl-load Z28cb@fasl-load) (set! Z28cd@verbose? (symbol-value '%verbose)) (set! Z29f5@Z28cd@verbose? Z28cd@verbose?) (set! Z28cf@serialize-library (lambda (Z299e@filename Z299f@obj) (begin (if Z28cd@verbose? (format (current-error-port) '"serialize-library ~a\n..." Z299e@filename) (void)) (let ((Z29a2@expanded2core (symbol-value 'expanded2core))) (let ((Z29a4@compile (symbol-value 'compile-w/o-halt))) (let ((Z29a6@code Z299f@obj)) (let ((Z29a8@pivot (cddddr (cddddr Z29a6@code)))) (let ((Z29aa@visit (Z29a4@compile (Z29a2@expanded2core (car Z29a8@pivot))))) (begin (set-car! Z29a8@pivot Z29aa@visit) (let ((Z29ac@pivot (cdr Z29a8@pivot))) (let ((Z29ae@invoke (Z29a4@compile (Z29a2@expanded2core (car Z29ac@pivot))))) (set-car! Z29ac@pivot Z29ae@invoke))))))))) (let ((Z29b0@fasl-file (Z28c7@scm->fasl Z299e@filename))) (begin (if (file-exists? Z29b0@fasl-file) (delete-file Z29b0@fasl-file) (void)) ((call/cc (lambda (Z29b4@Z29b2) (lambda () (with-exception-handler (lambda (Z29b6@c) ((call/cc (lambda (Z29b8@Z29b3) (Z29b4@Z29b2 (lambda () (if '#t (begin (if Z28cd@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" Z299e@filename) (void)) (if (file-exists? Z29b0@fasl-file) (delete-file Z29b0@fasl-file) (void)) '#f) (Z29b8@Z29b3 (lambda () (raise-continuable Z29b6@c)))))))))) (lambda () (Z28c9@fasl-save Z29b0@fasl-file Z299f@obj)))))))))))) (set! Z29f6@Z28cf@serialize-library Z28cf@serialize-library) (set! Z28d1@load-serialized-library (lambda (Z29ba@filename Z29bb@obj) (and (Z28db@mosh-cache-dir) (let ((Z29be@fasl-file (Z28c7@scm->fasl Z29ba@filename))) (if (and (file-exists? Z29be@fasl-file) ((symbol-value 'file-newer?) Z29be@fasl-file Z29ba@filename)) (let ((Z29c0@expanded2core (symbol-value 'expanded2core))) (let ((Z29c2@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((Z29c4@code (Z28cb@fasl-load Z29be@fasl-file))) (let ((Z29c6@pivot (cddddr (cddddr Z29c4@code)))) (let ((Z29c8@visit (car Z29c6@pivot))) (let ((Z29ca@visit-proc (lambda () (Z29c2@eval-compiled-core Z29c8@visit)))) (begin (set-car! Z29c6@pivot Z29ca@visit-proc) (let ((Z29cc@pivot (cdr Z29c6@pivot))) (let ((Z29ce@invoke (car Z29cc@pivot))) (begin (set-car! Z29cc@pivot (lambda () (Z29c2@eval-compiled-core Z29ce@invoke))) (apply Z29bb@obj Z29c4@code))))))))))) '#f))))) (set! Z29f7@Z28d1@load-serialized-library Z28d1@load-serialized-library) (set! Z28d3@make-record-printer (lambda (Z29d0@name Z29d1@printer) (lambda Z29d4@x (begin (display '"record printer") (for-each display Z29d4@x))))) (set! Z29f8@Z28d3@make-record-printer Z28d3@make-record-printer) (set! Z28d5@compile-core (lambda Z29d6@x (apply error 'comile-core '"not implementated" Z29d6@x))) (set! Z29f9@Z28d5@compile-core Z28d5@compile-core) (set! Z28d7@read-library-source-file (lambda (Z29d8@file-name) (with-input-from-file Z29d8@file-name Z28bd@read-annotated))) (set! Z29fa@Z28d7@read-library-source-file Z28d7@read-library-source-file) (set! Z28d9@make-parameter (lambda Z29e8 (let ((Z29e9 (length Z29e8))) (if (= Z29e9 '1) (apply (lambda (Z29da@x) (Z28d9@make-parameter Z29da@x (lambda (Z29dc@x) Z29dc@x))) Z29e8) (if (= Z29e9 '2) (apply (lambda (Z29de@x Z29df@fender) (let ((Z29e2@x (Z29df@fender Z29de@x))) (lambda Z29e6 (let ((Z29e7 (length Z29e6))) (if (= Z29e7 '0) (apply (lambda () Z29e2@x) Z29e6) (if (= Z29e7 '1) (apply (lambda (Z29e4@v) (set! Z29e2@x (Z29df@fender Z29e4@v))) Z29e6) (error 'apply '"invalid arg count"))))))) Z29e8) (error 'apply '"invalid arg count")))))) (set! Z29fb@Z28d9@make-parameter Z28d9@make-parameter) (set! Z28db@mosh-cache-dir (Z28d9@make-parameter '#f)) (set! Z29fc@Z28db@mosh-cache-dir Z28db@mosh-cache-dir) (set! Z2971@file-options-spec (lambda (Z29ea@x) Z29ea@x)) (set! Z29fd@Z2971@file-options-spec Z2971@file-options-spec) (void))
(begin (set! Z2a03@current-primitive-locations (unspecified)) (set! Z2a05@mutable? (unspecified)) (set! Z2a07@rewriter (unspecified)) (set! Z2a09@expanded->core (unspecified)) (set! Z2a0b@compile-core-expr (unspecified)) (set! Z2a0d@pretty-print (unspecified)) (set! Z2a0f@compile-core-expr-to-port (unspecified)) (set! Z2a03@current-primitive-locations (Z29fb@Z28d9@make-parameter (lambda (Z2a10@x) '#f) (lambda (Z2a12@p) Z2a12@p))) (set! Z2a4e@Z2a03@current-primitive-locations Z2a03@current-primitive-locations) (set! Z2a05@mutable? (lambda (Z2a14@x) (or (pair? Z2a14@x) (vector? Z2a14@x) (hashtable? Z2a14@x)))) (set! Z2a4f@Z2a05@mutable? Z2a05@mutable?) (set! Z2a07@rewriter (lambda (Z2a16@quote-hack?) (letrec* ((Z2a19@f (lambda (Z2a1a@x) (if (pair? Z2a1a@x) (let ((Z2a1c@t (car Z2a1a@x))) (if (memv Z2a1c@t '(quote)) (if (and Z2a16@quote-hack? (Z2a05@mutable? (cadr Z2a1a@x))) (let ((Z2a1e@g (gensym))) (begin (set-symbol-value! Z2a1e@g (cadr Z2a1a@x)) Z2a1e@g)) Z2a1a@x) (if (memv Z2a1c@t '(case-lambda)) (cons 'case-lambda (map (lambda (Z2a20@x) (cons (car Z2a20@x) (map Z2a19@f (cdr Z2a20@x)))) (cdr Z2a1a@x))) (if (memv Z2a1c@t '(lambda)) (cons* 'lambda (cadr Z2a1a@x) (map Z2a19@f (cddr Z2a1a@x))) (if (memv Z2a1c@t '(letrec)) (let ((Z2a22@bindings (cadr Z2a1a@x)) (Z2a23@body* (cddr Z2a1a@x))) (let ((Z2a26@lhs* (map car Z2a22@bindings)) (Z2a27@rhs* (map cadr Z2a22@bindings))) (cons* 'letrec (map list Z2a26@lhs* (map Z2a19@f Z2a27@rhs*)) (map Z2a19@f Z2a23@body*)))) (if (memv Z2a1c@t '(letrec*)) (let ((Z2a2a@bindings (cadr Z2a1a@x)) (Z2a2b@body* (cddr Z2a1a@x))) (let ((Z2a2e@lhs* (map car Z2a2a@bindings)) (Z2a2f@rhs* (map cadr Z2a2a@bindings))) (cons* 'letrec* (map list Z2a2e@lhs* (map Z2a19@f Z2a2f@rhs*)) (map Z2a19@f Z2a2b@body*)))) (if (memv Z2a1c@t '(library-letrec*)) (let ((Z2a32@name (cadr Z2a1a@x)) (Z2a33@x (cdr Z2a1a@x))) (let ((Z2a36@bindings (cadr Z2a33@x)) (Z2a37@body* (cddr Z2a33@x))) (let ((Z2a3a@lhs* (map car Z2a36@bindings)) (Z2a3b@lhs** (map cadr Z2a36@bindings)) (Z2a3c@rhs* (map caddr Z2a36@bindings))) (cons* 'library-letrec* Z2a32@name (map list Z2a3a@lhs* Z2a3b@lhs** (map Z2a19@f Z2a3c@rhs*)) (map Z2a19@f Z2a37@body*))))) (if (memv Z2a1c@t '(begin)) (cons 'begin (map Z2a19@f (cdr Z2a1a@x))) (if (memv Z2a1c@t '(set!)) (list 'set! (cadr Z2a1a@x) (Z2a19@f (caddr Z2a1a@x))) (if (memv Z2a1c@t '(primitive)) (let ((Z2a40@op (cadr Z2a1a@x))) (let ((Z2a42@t ((Z2a03@current-primitive-locations) Z2a40@op))) (if Z2a42@t ((lambda (Z2a44@loc) Z2a44@loc) Z2a42@t) Z2a40@op))) (if (memv Z2a1c@t '(define)) Z2a1a@x (if (list? Z2a1a@x) (map Z2a19@f Z2a1a@x) (error 'rewrite '"invalid form ~s ~s" Z2a1a@x (list? Z2a1a@x)))))))))))))) Z2a1a@x)))) Z2a19@f))) (set! Z2a50@Z2a07@rewriter Z2a07@rewriter) (set! Z2a09@expanded->core (lambda (Z2a46@x) ((Z2a07@rewriter '#f) Z2a46@x))) (set! Z2a51@Z2a09@expanded->core Z2a09@expanded->core) (set! Z2a0b@compile-core-expr (lambda (Z2a48@x) ((Z2a07@rewriter '#f) Z2a48@x))) (set! Z2a52@Z2a0b@compile-core-expr Z2a0b@compile-core-expr) (set! Z2a0d@pretty-print write) (set! Z2a53@Z2a0d@pretty-print Z2a0d@pretty-print) (set! Z2a0f@compile-core-expr-to-port (lambda (Z2a4a@x Z2a4b@p) (Z2a0d@pretty-print ((Z2a07@rewriter '#f) Z2a4a@x) Z2a4b@p))) (set! Z2a54@Z2a0f@compile-core-expr-to-port Z2a0f@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! Z2aa3@make-collection (unspecified)) (set! Z2aa5@current-library-collection (unspecified)) (set! Z2aa7@rp (unspecified)) (set! Z2ab1@library? (unspecified)) (set! Z2ab3@library-id (unspecified)) (set! Z2ab5@set-library-id! (unspecified)) (set! Z2ab7@library-name (unspecified)) (set! Z2ab9@set-library-name! (unspecified)) (set! Z2abb@library-version (unspecified)) (set! Z2abd@set-library-version! (unspecified)) (set! Z2abf@library-imp* (unspecified)) (set! Z2ac1@set-library-imp*! (unspecified)) (set! Z2ac3@library-vis* (unspecified)) (set! Z2ac5@set-library-vis*! (unspecified)) (set! Z2ac7@library-inv* (unspecified)) (set! Z2ac9@set-library-inv*! (unspecified)) (set! Z2acb@library-subst (unspecified)) (set! Z2acd@set-library-subst! (unspecified)) (set! Z2acf@library-env (unspecified)) (set! Z2ad1@set-library-env! (unspecified)) (set! Z2ad3@library-visit-state (unspecified)) (set! Z2ad5@set-library-visit-state! (unspecified)) (set! Z2ad7@library-invoke-state (unspecified)) (set! Z2ad9@set-library-invoke-state! (unspecified)) (set! Z2adb@library-visit-code (unspecified)) (set! Z2add@set-library-visit-code! (unspecified)) (set! Z2adf@library-invoke-code (unspecified)) (set! Z2ae1@set-library-invoke-code! (unspecified)) (set! Z2ae3@library-visible? (unspecified)) (set! Z2ae5@set-library-visible?! (unspecified)) (set! Z2ae7@library-source-file-name (unspecified)) (set! Z2ae9@set-library-source-file-name! (unspecified)) (set! Z2aeb@dummy (unspecified)) (set! Z2aed@find-dependencies (unspecified)) (set! Z2aef@find-library-by (unspecified)) (set! Z2af1@library-path (unspecified)) (set! Z2af3@library-extensions (unspecified)) (set! Z2af5@library-name->file-name (unspecified)) (set! Z2af7@file-locator (unspecified)) (set! Z2af9@serialize-all (unspecified)) (set! Z2afb@current-precompiled-library-loader (unspecified)) (set! Z2afd@try-load-from-file (unspecified)) (set! Z2aff@library-loader (unspecified)) (set! Z2b01@current-library-expander (unspecified)) (set! Z2b03@external-pending-libraries (unspecified)) (set! Z2b05@find-external-library (unspecified)) (set! Z2b07@find-library-by-name (unspecified)) (set! Z2b09@library-exists? (unspecified)) (set! Z2b0b@find-library-by-spec/die (unspecified)) (set! Z2b0d@label->binding-table (unspecified)) (set! Z2b0f@install-library-record (unspecified)) (set! Z2b11@install-library (unspecified)) (set! Z2b13@imported-label->binding (unspecified)) (set! Z2b15@invoke-library (unspecified)) (set! Z2b17@visit-library (unspecified)) (set! Z2b19@invoke-library-by-spec (unspecified)) (set! Z2b1b@installed-libraries (unspecified)) (set! Z2b1d@library-spec (unspecified)) (set! Z2aa3@make-collection (lambda () (let ((Z2b1e@set '())) (letrec* ((Z2b21@set-cons (lambda (Z2b26@x Z2b27@ls) (if (memq Z2b26@x Z2b27@ls) Z2b27@ls (cons Z2b26@x Z2b27@ls))))) (lambda Z2b24 (let ((Z2b25 (length Z2b24))) (if (= Z2b25 '0) (apply (lambda () Z2b1e@set) Z2b24) (if (= Z2b25 '1) (apply (lambda (Z2b22@x) (set! Z2b1e@set (Z2b21@set-cons Z2b22@x Z2b1e@set))) Z2b24) (error 'apply '"invalid arg count"))))))))) (set! Z2c92@Z2aa3@make-collection Z2aa3@make-collection) (set! Z2aa5@current-library-collection (Z29fb@Z28d9@make-parameter (Z2aa3@make-collection) (lambda (Z2b2a@x) (begin (if (not (procedure? Z2b2a@x)) (assertion-violation 'current-library-collection '"not a procedure" Z2b2a@x) (void)) Z2b2a@x)))) (set! Z2c93@Z2aa5@current-library-collection Z2aa5@current-library-collection) (set! Z2aa7@rp (Z29f8@Z28d3@make-record-printer 'library (lambda (Z2b2c@x Z2b2d@p Z2b2e@wr) (begin (if (not (Z2ab1@library? Z2b2c@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (Z2abb@library-version Z2b2c@x)) (Z2ab7@library-name Z2b2c@x) (append (Z2ab7@library-name Z2b2c@x) (list (Z2abb@library-version Z2b2c@x))))) Z2b2d@p))))) (set! Z2c94@Z2aa7@rp Z2aa7@rp) (set! Z2ab1@library? (lambda (Z2b32@x) (and (simple-struct? Z2b32@x) (eq? (simple-struct-name Z2b32@x) 'library)))) (set! Z2c95@Z2ab1@library? Z2ab1@library?) (set! Z2ab3@library-id (lambda (Z2b34@x) (simple-struct-ref Z2b34@x '0))) (set! Z2c96@Z2ab3@library-id Z2ab3@library-id) (set! Z2ab5@set-library-id! (lambda (Z2b36@x Z2b37@val) (simple-struct-set! Z2b36@x '0 Z2b37@val))) (set! Z2c97@Z2ab5@set-library-id! Z2ab5@set-library-id!) (set! Z2ab7@library-name (lambda (Z2b3a@x) (simple-struct-ref Z2b3a@x '1))) (set! Z2c98@Z2ab7@library-name Z2ab7@library-name) (set! Z2ab9@set-library-name! (lambda (Z2b3c@x Z2b3d@val) (simple-struct-set! Z2b3c@x '1 Z2b3d@val))) (set! Z2c99@Z2ab9@set-library-name! Z2ab9@set-library-name!) (set! Z2abb@library-version (lambda (Z2b40@x) (simple-struct-ref Z2b40@x '2))) (set! Z2c9a@Z2abb@library-version Z2abb@library-version) (set! Z2abd@set-library-version! (lambda (Z2b42@x Z2b43@val) (simple-struct-set! Z2b42@x '2 Z2b43@val))) (set! Z2c9b@Z2abd@set-library-version! Z2abd@set-library-version!) (set! Z2abf@library-imp* (lambda (Z2b46@x) (simple-struct-ref Z2b46@x '3))) (set! Z2c9c@Z2abf@library-imp* Z2abf@library-imp*) (set! Z2ac1@set-library-imp*! (lambda (Z2b48@x Z2b49@val) (simple-struct-set! Z2b48@x '3 Z2b49@val))) (set! Z2c9d@Z2ac1@set-library-imp*! Z2ac1@set-library-imp*!) (set! Z2ac3@library-vis* (lambda (Z2b4c@x) (simple-struct-ref Z2b4c@x '4))) (set! Z2c9e@Z2ac3@library-vis* Z2ac3@library-vis*) (set! Z2ac5@set-library-vis*! (lambda (Z2b4e@x Z2b4f@val) (simple-struct-set! Z2b4e@x '4 Z2b4f@val))) (set! Z2c9f@Z2ac5@set-library-vis*! Z2ac5@set-library-vis*!) (set! Z2ac7@library-inv* (lambda (Z2b52@x) (simple-struct-ref Z2b52@x '5))) (set! Z2ca0@Z2ac7@library-inv* Z2ac7@library-inv*) (set! Z2ac9@set-library-inv*! (lambda (Z2b54@x Z2b55@val) (simple-struct-set! Z2b54@x '5 Z2b55@val))) (set! Z2ca1@Z2ac9@set-library-inv*! Z2ac9@set-library-inv*!) (set! Z2acb@library-subst (lambda (Z2b58@x) (simple-struct-ref Z2b58@x '6))) (set! Z2ca2@Z2acb@library-subst Z2acb@library-subst) (set! Z2acd@set-library-subst! (lambda (Z2b5a@x Z2b5b@val) (simple-struct-set! Z2b5a@x '6 Z2b5b@val))) (set! Z2ca3@Z2acd@set-library-subst! Z2acd@set-library-subst!) (set! Z2acf@library-env (lambda (Z2b5e@x) (simple-struct-ref Z2b5e@x '7))) (set! Z2ca4@Z2acf@library-env Z2acf@library-env) (set! Z2ad1@set-library-env! (lambda (Z2b60@x Z2b61@val) (simple-struct-set! Z2b60@x '7 Z2b61@val))) (set! Z2ca5@Z2ad1@set-library-env! Z2ad1@set-library-env!) (set! Z2ad3@library-visit-state (lambda (Z2b64@x) (simple-struct-ref Z2b64@x '8))) (set! Z2ca6@Z2ad3@library-visit-state Z2ad3@library-visit-state) (set! Z2ad5@set-library-visit-state! (lambda (Z2b66@x Z2b67@val) (simple-struct-set! Z2b66@x '8 Z2b67@val))) (set! Z2ca7@Z2ad5@set-library-visit-state! Z2ad5@set-library-visit-state!) (set! Z2ad7@library-invoke-state (lambda (Z2b6a@x) (simple-struct-ref Z2b6a@x '9))) (set! Z2ca8@Z2ad7@library-invoke-state Z2ad7@library-invoke-state) (set! Z2ad9@set-library-invoke-state! (lambda (Z2b6c@x Z2b6d@val) (simple-struct-set! Z2b6c@x '9 Z2b6d@val))) (set! Z2ca9@Z2ad9@set-library-invoke-state! Z2ad9@set-library-invoke-state!) (set! Z2adb@library-visit-code (lambda (Z2b70@x) (simple-struct-ref Z2b70@x '10))) (set! Z2caa@Z2adb@library-visit-code Z2adb@library-visit-code) (set! Z2add@set-library-visit-code! (lambda (Z2b72@x Z2b73@val) (simple-struct-set! Z2b72@x '10 Z2b73@val))) (set! Z2cab@Z2add@set-library-visit-code! Z2add@set-library-visit-code!) (set! Z2adf@library-invoke-code (lambda (Z2b76@x) (simple-struct-ref Z2b76@x '11))) (set! Z2cac@Z2adf@library-invoke-code Z2adf@library-invoke-code) (set! Z2ae1@set-library-invoke-code! (lambda (Z2b78@x Z2b79@val) (simple-struct-set! Z2b78@x '11 Z2b79@val))) (set! Z2cad@Z2ae1@set-library-invoke-code! Z2ae1@set-library-invoke-code!) (set! Z2ae3@library-visible? (lambda (Z2b7c@x) (simple-struct-ref Z2b7c@x '12))) (set! Z2cae@Z2ae3@library-visible? Z2ae3@library-visible?) (set! Z2ae5@set-library-visible?! (lambda (Z2b7e@x Z2b7f@val) (simple-struct-set! Z2b7e@x '12 Z2b7f@val))) (set! Z2caf@Z2ae5@set-library-visible?! Z2ae5@set-library-visible?!) (set! Z2ae7@library-source-file-name (lambda (Z2b82@x) (simple-struct-ref Z2b82@x '13))) (set! Z2cb0@Z2ae7@library-source-file-name Z2ae7@library-source-file-name) (set! Z2ae9@set-library-source-file-name! (lambda (Z2b84@x Z2b85@val) (simple-struct-set! Z2b84@x '13 Z2b85@val))) (set! Z2cb1@Z2ae9@set-library-source-file-name! Z2ae9@set-library-source-file-name!) (set! Z2aeb@dummy '3) (set! Z2cb2@Z2aeb@dummy Z2aeb@dummy) (set! Z2aed@find-dependencies (lambda (Z2b88@ls) (if (null? Z2b88@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! Z2cb3@Z2aed@find-dependencies Z2aed@find-dependencies) (set! Z2aef@find-library-by (lambda (Z2b8a@pred) (let Z2b8e@f ((Z2b8c@ls ((Z2aa5@current-library-collection)))) (if (null? Z2b8c@ls) '#f (if (Z2b8a@pred (car Z2b8c@ls)) (car Z2b8c@ls) (Z2b8e@f (cdr Z2b8c@ls))))))) (set! Z2cb4@Z2aef@find-library-by Z2aef@find-library-by) (set! Z2af1@library-path (Z29fb@Z28d9@make-parameter '(".") (lambda (Z2b90@x) (if (and (list? Z2b90@x) (for-all string? Z2b90@x)) (map (lambda (Z2b92@x) Z2b92@x) Z2b90@x) (assertion-violation 'library-path '"not a list of strings" Z2b90@x))))) (set! Z2cb5@Z2af1@library-path Z2af1@library-path) (set! Z2af3@library-extensions (Z29fb@Z28d9@make-parameter '(".sls" ".ss" ".scm") (lambda (Z2b94@x) (if (and (list? Z2b94@x) (for-all string? Z2b94@x)) (map (lambda (Z2b96@x) Z2b96@x) Z2b94@x) (assertion-violation 'library-extensions '"not a list of strings" Z2b94@x))))) (set! Z2cb6@Z2af3@library-extensions Z2af3@library-extensions) (set! Z2af5@library-name->file-name (lambda (Z2b98@x) (call-with-values (lambda () (open-string-output-port)) (lambda (Z2b9e@Z2b9b Z2b9f@Z2b9d) (let ((Z2ba2@extract Z2b9f@Z2b9d) (Z2ba3@p Z2b9e@Z2b9b)) (letrec* ((Z2ba7@display-hex (lambda (Z2bb0@n) (if (<= '0 Z2bb0@n '9) (display Z2bb0@n Z2ba3@p) (display (integer->char (+ (char->integer '#\a) (- Z2bb0@n '10))) Z2ba3@p))))) (begin (let Z2baa@f ((Z2ba8@ls Z2b98@x)) (if (not (null? Z2ba8@ls)) (begin (display '"/" Z2ba3@p) (for-each (lambda (Z2bac@c) (if (or (char<=? '#\a Z2bac@c '#\z) (char<=? '#\A Z2bac@c '#\Z) (char<=? '#\0 Z2bac@c '#\9) (memv Z2bac@c '(#\- #\. #\_ #\~))) (display Z2bac@c Z2ba3@p) (begin (display '"%" Z2ba3@p) (let ((Z2bae@n (char->integer Z2bac@c))) (begin (Z2ba7@display-hex (quotient Z2bae@n '16)) (Z2ba7@display-hex (remainder Z2bae@n '16))))))) (string->list (symbol->string (car Z2ba8@ls)))) (Z2baa@f (cdr Z2ba8@ls))) (void))) (Z2ba2@extract)))))))) (set! Z2cb7@Z2af5@library-name->file-name Z2af5@library-name->file-name) (set! Z2af7@file-locator (Z29fb@Z28d9@make-parameter (lambda (Z2bb2@x) (let ((Z2bb4@str (Z2af5@library-name->file-name Z2bb2@x))) (let Z2bbc@f ((Z2bb6@ls (Z2af1@library-path)) (Z2bb7@exts (Z2af3@library-extensions)) (Z2bb8@failed-list '())) (if (null? Z2bb6@ls) (letrec* ((Z2bc6@Z2bc1 (make-record-type-descriptor '&library-resolution &condition-rtd 'Z2bc4 '#f '#f '#((immutable library) (immutable files)))) (Z2bc8@Z2bc3 '#f) (Z2bca@Z2bc2 (make-record-constructor-descriptor Z2bc6@Z2bc1 &condition-rcd Z2bc8@Z2bc3)) (Z2bcd@Z2bc0 (record-predicate Z2bc6@Z2bc1)) (Z2bcf@make-library-resolution-condition (record-constructor Z2bca@Z2bc2)) (Z2bd1@Z2bbe (record-accessor Z2bc6@Z2bc1 '0)) (Z2bd3@Z2bbf (record-accessor Z2bc6@Z2bc1 '1)) (Z2bd5@library-resolution-condition? (condition-predicate Z2bc6@Z2bc1)) (Z2bd7@condition-library (condition-accessor Z2bc6@Z2bc1 Z2bd1@Z2bbe)) (Z2bd9@condition-files (condition-accessor Z2bc6@Z2bc1 Z2bd3@Z2bbf))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (Z2bcf@make-library-resolution-condition Z2bb2@x (reverse Z2bb8@failed-list))))) (if (null? Z2bb7@exts) (Z2bbc@f (cdr Z2bb6@ls) (Z2af3@library-extensions) Z2bb8@failed-list) (let ((Z2bda@name (string-append (car Z2bb6@ls) Z2bb4@str (car Z2bb7@exts)))) (if (file-exists? Z2bda@name) Z2bda@name (Z2bbc@f Z2bb6@ls (cdr Z2bb7@exts) (cons Z2bda@name Z2bb8@failed-list))))))))) (lambda (Z2bdc@f) (if (procedure? Z2bdc@f) Z2bdc@f (assertion-violation 'file-locator '"not a procedure" Z2bdc@f))))) (set! Z2cb8@Z2af7@file-locator Z2af7@file-locator) (set! Z2af9@serialize-all (lambda (Z2bde@serialize Z2bdf@compile) (letrec* ((Z2be3@library-desc (lambda (Z2be6@x) (list (Z2ab3@library-id Z2be6@x) (Z2ab7@library-name Z2be6@x))))) (for-each (lambda (Z2be4@x) (if (Z2ae7@library-source-file-name Z2be4@x) (Z2bde@serialize (Z2ae7@library-source-file-name Z2be4@x) (list (Z2ab3@library-id Z2be4@x) (Z2ab7@library-name Z2be4@x) (Z2abb@library-version Z2be4@x) (map Z2be3@library-desc (Z2abf@library-imp* Z2be4@x)) (map Z2be3@library-desc (Z2ac3@library-vis* Z2be4@x)) (map Z2be3@library-desc (Z2ac7@library-inv* Z2be4@x)) (Z2acb@library-subst Z2be4@x) (Z2acf@library-env Z2be4@x) (Z2bdf@compile (Z2adb@library-visit-code Z2be4@x)) (Z2bdf@compile (Z2adf@library-invoke-code Z2be4@x)) (Z2ae3@library-visible? Z2be4@x))) (void))) ((Z2aa5@current-library-collection)))))) (set! Z2cb9@Z2af9@serialize-all Z2af9@serialize-all) (set! Z2afb@current-precompiled-library-loader (Z29fb@Z28d9@make-parameter (lambda (Z2be8@filename Z2be9@sk) '#f))) (set! Z2cba@Z2afb@current-precompiled-library-loader Z2afb@current-precompiled-library-loader) (set! Z2afd@try-load-from-file (lambda (Z2bec@filename) ((Z2afb@current-precompiled-library-loader) Z2bec@filename (lambda Z2c12 (let ((Z2c13 (length Z2c12))) (if (= Z2c13 '11) (apply (lambda (Z2bee@id Z2bef@name Z2bf0@ver Z2bf1@imp* Z2bf2@vis* Z2bf3@inv* Z2bf4@exp-subst Z2bf5@exp-env Z2bf6@visit-proc Z2bf7@invoke-proc Z2bf8@visible?) (let Z2c06@f ((Z2c04@deps (append Z2bf1@imp* Z2bf2@vis* Z2bf3@inv*))) (if (null? Z2c04@deps) (begin (Z2b11@install-library Z2bee@id Z2bef@name Z2bf0@ver Z2bf1@imp* Z2bf2@vis* Z2bf3@inv* Z2bf4@exp-subst Z2bf5@exp-env Z2bf6@visit-proc Z2bf7@invoke-proc '#f '#f Z2bf8@visible? '#f) '#t) (let ((Z2c08@d (car Z2c04@deps))) (let ((Z2c0a@label (car Z2c08@d)) (Z2c0b@dname (cadr Z2c08@d))) (let ((Z2c0e@l (Z2b07@find-library-by-name Z2c0b@dname))) (if (and (Z2ab1@library? Z2c0e@l) (eq? Z2c0a@label (Z2ab3@library-id Z2c0e@l))) (Z2c06@f (cdr Z2c04@deps)) (begin (if Z29f5@Z28cd@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" Z2bef@name Z2c0b@dname Z2bec@filename) (void)) '#f)))))))) Z2c12) (if (>= Z2c13 '0) (apply (lambda Z2c10@others '#f) Z2c12) (error 'apply '"invalid arg count")))))))) (set! Z2cbb@Z2afd@try-load-from-file Z2afd@try-load-from-file) (set! Z2aff@library-loader (Z29fb@Z28d9@make-parameter (lambda (Z2c14@x) (let ((Z2c16@file-name ((Z2af7@file-locator) Z2c14@x))) (if (not Z2c16@file-name) (assertion-violation '#f '"cannot file library" Z2c14@x) (or (Z2afd@try-load-from-file Z2c16@file-name) ((Z2b01@current-library-expander) (Z29fa@Z28d7@read-library-source-file Z2c16@file-name) Z2c16@file-name (lambda (Z2c18@name) (if (not (fast-equal? Z2c18@name Z2c14@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (Z2c1e@Z2c1b Z2c1f@Z2c1d) (let ((Z2c22@e Z2c1f@Z2c1d) (Z2c23@p Z2c1e@Z2c1b)) (begin (display '"expected to find library " Z2c23@p) (write Z2c14@x Z2c23@p) (display '" in file " Z2c23@p) (display Z2c16@file-name Z2c23@p) (display '", found " Z2c23@p) (write Z2c18@name Z2c23@p) (display '" instead" Z2c23@p) (Z2c22@e)))))) (void)))))))) (lambda (Z2c26@f) (if (procedure? Z2c26@f) Z2c26@f (assertion-violation 'library-locator '"not a procedure" Z2c26@f))))) (set! Z2cbc@Z2aff@library-loader Z2aff@library-loader) (set! Z2b01@current-library-expander (Z29fb@Z28d9@make-parameter (lambda (Z2c28@x) (assertion-violation 'library-expander '"not initialized")) (lambda (Z2c2a@f) (if (procedure? Z2c2a@f) Z2c2a@f (assertion-violation 'library-expander '"not a procedure" Z2c2a@f))))) (set! Z2cbd@Z2b01@current-library-expander Z2b01@current-library-expander) (set! Z2b03@external-pending-libraries (Z29fb@Z28d9@make-parameter '())) (set! Z2cbe@Z2b03@external-pending-libraries Z2b03@external-pending-libraries) (set! Z2b05@find-external-library (lambda (Z2c2c@name) (begin (if (member Z2c2c@name (Z2b03@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" Z2c2c@name) (void)) (let ((Z2c32@Z2c2f Z2b03@external-pending-libraries) (Z2c33@Z2c31 (cons Z2c2c@name (Z2b03@external-pending-libraries)))) (let ((Z2c36@swap (lambda () (let ((Z2c38@t (Z2c32@Z2c2f))) (begin (Z2c32@Z2c2f Z2c33@Z2c31) (set! Z2c33@Z2c31 Z2c38@t)))))) (dynamic-wind Z2c36@swap (lambda () (begin ((Z2aff@library-loader) Z2c2c@name) (or (Z2aef@find-library-by (lambda (Z2c3a@x) (fast-equal? (Z2ab7@library-name Z2c3a@x) Z2c2c@name))) (assertion-violation '#f '"handling external library did not yield the correct library" Z2c2c@name)))) Z2c36@swap)))))) (set! Z2cbf@Z2b05@find-external-library Z2b05@find-external-library) (set! Z2b07@find-library-by-name (lambda (Z2c3c@name) (or (Z2aef@find-library-by (lambda (Z2c3e@x) (fast-equal? (Z2ab7@library-name Z2c3e@x) Z2c3c@name))) (Z2b05@find-external-library Z2c3c@name)))) (set! Z2cc0@Z2b07@find-library-by-name Z2b07@find-library-by-name) (set! Z2b09@library-exists? (lambda (Z2c40@name) (and (Z2aef@find-library-by (lambda (Z2c42@x) (fast-equal? (Z2ab7@library-name Z2c42@x) Z2c40@name))) '#t))) (set! Z2cc1@Z2b09@library-exists? Z2b09@library-exists?) (set! Z2b0b@find-library-by-spec/die (lambda (Z2c44@spec) (let ((Z2c46@id (car Z2c44@spec))) (or (Z2aef@find-library-by (lambda (Z2c48@x) (eq? Z2c46@id (Z2ab3@library-id Z2c48@x)))) (assertion-violation '#f '"cannot find library with required spec" Z2c44@spec))))) (set! Z2cc2@Z2b0b@find-library-by-spec/die Z2b0b@find-library-by-spec/die) (set! Z2b0d@label->binding-table (make-eq-hashtable)) (set! Z2cc3@Z2b0d@label->binding-table Z2b0d@label->binding-table) (set! Z2b0f@install-library-record (lambda (Z2c4a@lib) (begin (let ((Z2c4c@exp-env (Z2acf@library-env Z2c4a@lib))) (for-each (lambda (Z2c4e@x) (let ((Z2c50@label (car Z2c4e@x)) (Z2c51@binding (cdr Z2c4e@x))) (let ((Z2c54@binding (let ((Z2c56@t (car Z2c51@binding))) (if (memv Z2c56@t '(global)) (cons 'global (cons Z2c4a@lib (cdr Z2c51@binding))) (if (memv Z2c56@t '(global-macro)) (cons 'global-macro (cons Z2c4a@lib (cdr Z2c51@binding))) (if (memv Z2c56@t '(global-macro!)) (cons 'global-macro! (cons Z2c4a@lib (cdr Z2c51@binding))) Z2c51@binding)))))) (begin (if (hashtable-ref Z2b0d@label->binding-table Z2c50@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" Z2c50@label (hashtable-ref Z2b0d@label->binding-table Z2c50@label '#f) Z2c54@binding) (exit)) (void)) (hashtable-set! Z2b0d@label->binding-table Z2c50@label Z2c54@binding))))) Z2c4c@exp-env)) ((Z2aa5@current-library-collection) Z2c4a@lib)))) (set! Z2cc4@Z2b0f@install-library-record Z2b0f@install-library-record) (set! Z2b11@install-library (lambda (Z2c58@id Z2c59@name Z2c5a@ver Z2c5b@imp* Z2c5c@vis* Z2c5d@inv* Z2c5e@exp-subst Z2c5f@exp-env Z2c60@visit-proc Z2c61@invoke-proc Z2c62@visit-code Z2c63@invoke-code Z2c64@visible? Z2c65@source-file-name) (let ((Z2c74@imp-lib* (map Z2b0b@find-library-by-spec/die Z2c5b@imp*)) (Z2c75@vis-lib* (map Z2b0b@find-library-by-spec/die Z2c5c@vis*)) (Z2c76@inv-lib* (map Z2b0b@find-library-by-spec/die Z2c5d@inv*))) (begin (if (not (and (symbol? Z2c58@id) (list? Z2c59@name) (list? Z2c5a@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" Z2c58@id Z2c59@name Z2c5a@ver) (void)) (if (Z2b09@library-exists? Z2c59@name) (assertion-violation 'install-library '"library is already installed" Z2c59@name) (void)) (let ((Z2c7a@lib (make-simple-struct 'library '15 (list Z2c58@id Z2c59@name Z2c5a@ver Z2c74@imp-lib* Z2c75@vis-lib* Z2c76@inv-lib* Z2c5e@exp-subst Z2c5f@exp-env Z2c60@visit-proc Z2c61@invoke-proc Z2c62@visit-code Z2c63@invoke-code Z2c64@visible? Z2c65@source-file-name)))) (Z2b0f@install-library-record Z2c7a@lib)))))) (set! Z2cc5@Z2b11@install-library Z2b11@install-library) (set! Z2b13@imported-label->binding (lambda (Z2c7c@lab) (hashtable-ref Z2b0d@label->binding-table Z2c7c@lab '#f))) (set! Z2cc6@Z2b13@imported-label->binding Z2b13@imported-label->binding) (set! Z2b15@invoke-library (lambda (Z2c7e@lib) (let ((Z2c80@invoke (Z2ad7@library-invoke-state Z2c7e@lib))) (if (procedure? Z2c80@invoke) (begin (Z2ad9@set-library-invoke-state! Z2c7e@lib (lambda () (assertion-violation 'invoke '"circularity detected" Z2c7e@lib))) (for-each Z2b15@invoke-library (Z2ac7@library-inv* Z2c7e@lib)) (Z2ad9@set-library-invoke-state! Z2c7e@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" Z2c7e@lib))) (Z2c80@invoke) (Z2ad9@set-library-invoke-state! Z2c7e@lib '#t)) (void))))) (set! Z2cc7@Z2b15@invoke-library Z2b15@invoke-library) (set! Z2b17@visit-library (lambda (Z2c82@lib) (let ((Z2c84@visit (Z2ad3@library-visit-state Z2c82@lib))) (if (procedure? Z2c84@visit) (begin (Z2ad5@set-library-visit-state! Z2c82@lib (lambda () (assertion-violation 'visit '"circularity detected" Z2c82@lib))) (for-each Z2b15@invoke-library (Z2ac3@library-vis* Z2c82@lib)) (Z2ad5@set-library-visit-state! Z2c82@lib (lambda () (assertion-violation 'invoke '"first visit did not return" Z2c82@lib))) (Z2c84@visit) (Z2ad5@set-library-visit-state! Z2c82@lib '#t)) (void))))) (set! Z2cc8@Z2b17@visit-library Z2b17@visit-library) (set! Z2b19@invoke-library-by-spec (lambda (Z2c86@spec) (Z2b15@invoke-library (Z2b0b@find-library-by-spec/die Z2c86@spec)))) (set! Z2cc9@Z2b19@invoke-library-by-spec Z2b19@invoke-library-by-spec) (set! Z2b1b@installed-libraries (lambda Z2c8e (let ((Z2c8f (length Z2c8e))) (if (= Z2c8f '1) (apply (lambda (Z2c88@all?) (let Z2c8c@f ((Z2c8a@ls ((Z2aa5@current-library-collection)))) (if (null? Z2c8a@ls) '() (if (or Z2c88@all? (Z2ae3@library-visible? (car Z2c8a@ls))) (cons (car Z2c8a@ls) (Z2c8c@f (cdr Z2c8a@ls))) (Z2c8c@f (cdr Z2c8a@ls)))))) Z2c8e) (if (= Z2c8f '0) (apply (lambda () (Z2b1b@installed-libraries '#f)) Z2c8e) (error 'apply '"invalid arg count")))))) (set! Z2cca@Z2b1b@installed-libraries Z2b1b@installed-libraries) (set! Z2b1d@library-spec (lambda (Z2c90@x) (begin (if (not (Z2ab1@library? Z2c90@x)) (assertion-violation 'library-spec '"not a library" Z2c90@x) (void)) (list (Z2ab3@library-id Z2c90@x) (Z2ab7@library-name Z2c90@x) (Z2abb@library-version Z2c90@x))))) (set! Z2ccb@Z2b1d@library-spec Z2b1d@library-spec) (void))
(begin (set! Z2ccf@build-global-define (unspecified)) (set! Z2d40@build-lambda (unspecified)) (set! Z2d42@build-case-lambda (unspecified)) (set! Z2d70@build-sequence (unspecified)) (set! Z2d72@build-void (unspecified)) (set! Z2d74@build-letrec (unspecified)) (set! Z2d76@build-let (unspecified)) (set! Z2d78@build-named-let (unspecified)) (set! Z2d7a@build-letrec* (unspecified)) (set! Z2d7c@build-library-letrec* (unspecified)) (set! Z2d7e@build-receive (unspecified)) (set! Z2ccf@build-global-define (lambda (Z2d7f@x) (Z2d72@build-void))) (set! Z2e0d@Z2ccf@build-global-define Z2ccf@build-global-define) (set! Z2d40@build-lambda (lambda (Z2d81@ae Z2d82@vars Z2d83@exp) (list 'lambda Z2d82@vars Z2d83@exp))) (set! Z2e0e@Z2d40@build-lambda Z2d40@build-lambda) (set! Z2d42@build-case-lambda (lambda (Z2d87@ae Z2d88@vars* Z2d89@exp*) (letrec* ((Z2d8e@build-error (lambda (Z2dc5@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (Z2d90@build-pred (lambda (Z2dad@ae Z2dae@n Z2daf@vars) (call-with-values (lambda () (let Z2dbb@f ((Z2db7@vars Z2daf@vars) (Z2db8@count '0)) (if (pair? Z2db7@vars) (Z2dbb@f (cdr Z2db7@vars) (+ Z2db8@count '1)) (if (null? Z2db7@vars) (values Z2db8@count '=) (values Z2db8@count '>=))))) (lambda (Z2dbd@Z2db4 Z2dbe@Z2db6) (let ((Z2dc1@pred Z2dbe@Z2db6) (Z2dc2@count Z2dbd@Z2db4)) (list (list 'primitive Z2dc1@pred) Z2dae@n (list 'quote Z2dc2@count))))))) (Z2d92@build-apply (lambda (Z2da5@ae Z2da6@g Z2da7@vars Z2da8@exp) (list '(primitive apply) (Z2d40@build-lambda Z2da5@ae Z2da7@vars Z2da8@exp) Z2da6@g))) (Z2d94@expand-case-lambda (lambda (Z2d95@ae Z2d96@vars Z2d97@exp*) (let ((Z2d9b@g (gensym)) (Z2d9c@n (gensym))) (list 'lambda Z2d9b@g (Z2d76@build-let Z2d95@ae (list Z2d9c@n) (list (list '(primitive length) Z2d9b@g)) (let Z2da3@f ((Z2d9f@vars* Z2d88@vars*) (Z2da0@exp* Z2d97@exp*)) (if (null? Z2d9f@vars*) (Z2d8e@build-error Z2d95@ae) (list 'if (Z2d90@build-pred Z2d95@ae Z2d9c@n (car Z2d9f@vars*)) (Z2d92@build-apply Z2d95@ae Z2d9b@g (car Z2d9f@vars*) (car Z2da0@exp*)) (Z2da3@f (cdr Z2d9f@vars*) (cdr Z2da0@exp*))))))))))) (if (= (length Z2d89@exp*) '1) (Z2d40@build-lambda Z2d87@ae (car Z2d88@vars*) (car Z2d89@exp*)) (Z2d94@expand-case-lambda Z2d87@ae Z2d88@vars* Z2d89@exp*))))) (set! Z2e0f@Z2d42@build-case-lambda Z2d42@build-case-lambda) (set! Z2d70@build-sequence (lambda (Z2dc7@ae Z2dc8@exps) (let Z2dcd@loop ((Z2dcb@exps Z2dc8@exps)) (if (null? (cdr Z2dcb@exps)) (car Z2dcb@exps) (if (equal? (car Z2dcb@exps) (Z2d72@build-void)) (Z2dcd@loop (cdr Z2dcb@exps)) (cons 'begin Z2dcb@exps)))))) (set! Z2e10@Z2d70@build-sequence Z2d70@build-sequence) (set! Z2d72@build-void (lambda () '((primitive void)))) (set! Z2e11@Z2d72@build-void Z2d72@build-void) (set! Z2d74@build-letrec (lambda (Z2dcf@ae Z2dd0@vars Z2dd1@val-exps Z2dd2@body-exp) (if (null? Z2dd0@vars) Z2dd2@body-exp (list 'letrec (map list Z2dd0@vars Z2dd1@val-exps) Z2dd2@body-exp)))) (set! Z2e12@Z2d74@build-letrec Z2d74@build-letrec) (set! Z2d76@build-let (lambda (Z2dd7@ae Z2dd8@vars Z2dd9@val-exps Z2dda@body-exp) (if (null? Z2dd8@vars) Z2dda@body-exp (list 'let (map list Z2dd8@vars Z2dd9@val-exps) Z2dda@body-exp)))) (set! Z2e13@Z2d76@build-let Z2d76@build-let) (set! Z2d78@build-named-let (lambda (Z2ddf@ae Z2de0@name Z2de1@vars Z2de2@val-exps Z2de3@body-exp) (list 'let Z2de0@name (map list Z2de1@vars Z2de2@val-exps) Z2de3@body-exp))) (set! Z2e14@Z2d78@build-named-let Z2d78@build-named-let) (set! Z2d7a@build-letrec* (lambda (Z2de9@ae Z2dea@vars Z2deb@val-exps Z2dec@body-exp) (if (null? Z2dea@vars) Z2dec@body-exp (list 'letrec* (map list Z2dea@vars Z2deb@val-exps) Z2dec@body-exp)))) (set! Z2e15@Z2d7a@build-letrec* Z2d7a@build-letrec*) (set! Z2d7c@build-library-letrec* (lambda (Z2df1@ae Z2df2@name Z2df3@vars Z2df4@locs Z2df5@val-exps Z2df6@body-exp) (cons 'begin (append (map (lambda (Z2dfd@var) (cons 'set! (cons Z2dfd@var '((unspecified))))) Z2df3@vars) (append (apply append (map (lambda (Z2dff@var Z2e00@loc Z2e01@val-exp) (list (list 'set! Z2dff@var Z2e01@val-exp) (list 'set! Z2e00@loc Z2dff@var))) Z2df3@vars Z2df4@locs Z2df5@val-exps)) (list Z2df6@body-exp)))))) (set! Z2e16@Z2d7c@build-library-letrec* Z2d7c@build-library-letrec*) (set! Z2d7e@build-receive (lambda (Z2e05@ae Z2e06@vars Z2e07@producer Z2e08@body*) (begin (display '"************** in ") (cons 'receive (cons Z2e06@vars (cons Z2e07@producer Z2e08@body*)))))) (set! Z2e17@Z2d7e@build-receive Z2d7e@build-receive) (void))
(begin (set! Z2e26@file-options-macro (unspecified)) (set! Z2e28@set-cons (unspecified)) (set! Z2e2a@set-union (unspecified)) (set! Z2e2f@top-mark* (unspecified)) (set! Z2e31@top-marked? (unspecified)) (set! Z2e33@gen-lexical (unspecified)) (set! Z2e35@gen-global (unspecified)) (set! Z2e37@gen-label (unspecified)) (set! Z2e39@gen-top-level-label (unspecified)) (set! Z2e3b@gen-define-label+loc (unspecified)) (set! Z2e3d@gen-define-label (unspecified)) (set! Z2e47@rib? (unspecified)) (set! Z2e49@rib-sym* (unspecified)) (set! Z2e4b@set-rib-sym*! (unspecified)) (set! Z2e4d@rib-mark** (unspecified)) (set! Z2e4f@set-rib-mark**! (unspecified)) (set! Z2e51@rib-label* (unspecified)) (set! Z2e53@set-rib-label*! (unspecified)) (set! Z2e55@rib-sealed/freq (unspecified)) (set! Z2e57@set-rib-sealed/freq! (unspecified)) (set! Z2e59@rib-cache (unspecified)) (set! Z2e5b@set-rib-cache! (unspecified)) (set! Z2e5d@dummy (unspecified)) (set! Z2e5f@make-empty-rib (unspecified)) (set! Z2e61@extend-rib! (unspecified)) (set! Z2e63@extend-rib/nc! (unspecified)) (set! Z2e65@make-rib-map (unspecified)) (set! Z2e67@seal-rib! (unspecified)) (set! Z2e69@unseal-rib! (unspecified)) (set! Z2e6b@make-full-rib (unspecified)) (set! Z2e6d@rp (unspecified)) (set! Z2e77@stx? (unspecified)) (set! Z2e79@stx-expr (unspecified)) (set! Z2e7b@set-stx-expr! (unspecified)) (set! Z2e7d@stx-mark* (unspecified)) (set! Z2e7f@set-stx-mark*! (unspecified)) (set! Z2e81@stx-subst* (unspecified)) (set! Z2e83@set-stx-subst*! (unspecified)) (set! Z2e85@stx-ae* (unspecified)) (set! Z2e87@set-stx-ae*! (unspecified)) (set! Z2e89@dummy (unspecified)) (set! Z2e8b@datum->stx (unspecified)) (set! Z2e8d@gen-mark (unspecified)) (set! Z2e8f@anti-mark (unspecified)) (set! Z2e91@anti-mark? (unspecified)) (set! Z2e93@mkstx (unspecified)) (set! Z2e95@add-subst (unspecified)) (set! Z2e97@add-mark (unspecified)) (set! Z2e99@syntax-kind? (unspecified)) (set! Z2e9b@syntax-vector->list (unspecified)) (set! Z2e9d@syntax-pair? (unspecified)) (set! Z2e9f@syntax-vector? (unspecified)) (set! Z2ea1@syntax-null? (unspecified)) (set! Z2ea3@syntax-list? (unspecified)) (set! Z2ea5@syntax-car (unspecified)) (set! Z2ea7@syntax-cdr (unspecified)) (set! Z2ea9@syntax->list (unspecified)) (set! Z2eab@id? (unspecified)) (set! Z2ead@id->sym (unspecified)) (set! Z2eaf@bound-id=? (unspecified)) (set! Z2eb1@free-id=? (unspecified)) (set! Z2eb3@valid-bound-ids? (unspecified)) (set! Z2eb5@distinct-bound-ids? (unspecified)) (set! Z2eb7@bound-id-member? (unspecified)) (set! Z2eb9@self-evaluating? (unspecified)) (set! Z2ebb@strip-annotations (unspecified)) (set! Z2ebd@strip (unspecified)) (set! Z2ebf@stx->datum (unspecified)) (set! Z2ec1@id->label (unspecified)) (set! Z2ec3@label->binding (unspecified)) (set! Z2ec5@make-binding (unspecified)) (set! Z2ec7@binding-type (unspecified)) (set! Z2ec9@binding-value (unspecified)) (set! Z2ecb@raise-unbound-error (unspecified)) (set! Z2ecd@syntax-type (unspecified)) (set! Z2edb@sanitize-binding (unspecified)) (set! Z2edd@make-variable-transformer (unspecified)) (set! Z2edf@variable-transformer? (unspecified)) (set! Z2ee1@variable-transformer-procedure (unspecified)) (set! Z2ee3@make-eval-transformer (unspecified)) (set! Z3034@parse-define (unspecified)) (set! Z3036@parse-define-syntax (unspecified)) (set! Z3038@scheme-stx-hashtable (unspecified)) (set! Z303a@scheme-stx (unspecified)) (set! Z303c@lexical-var (unspecified)) (set! Z303e@lexical-mutable? (unspecified)) (set! Z3040@set-lexical-mutable! (unspecified)) (set! Z3042@add-lexical (unspecified)) (set! Z3044@add-lexicals (unspecified)) (set! Z3046@letrec-helper (unspecified)) (set! Z3048@let-transformer (unspecified)) (set! Z304a@letrec-transformer (unspecified)) (set! Z304c@letrec*-transformer (unspecified)) (set! Z304e@fluid-let-syntax-transformer (unspecified)) (set! Z3050@type-descriptor-transformer (unspecified)) (set! Z3052@record-type-descriptor-transformer (unspecified)) (set! Z3054@record-constructor-descriptor-transformer (unspecified)) (set! Z3056@when-macro (unspecified)) (set! Z3058@unless-macro (unspecified)) (set! Z305a@if-transformer (unspecified)) (set! Z305c@and-transformer (unspecified)) (set! Z305e@or-transformer (unspecified)) (set! Z3060@case-macro (unspecified)) (set! Z3062@quote-transformer (unspecified)) (set! Z3064@case-lambda-transformer (unspecified)) (set! Z3066@lambda-transformer (unspecified)) (set! Z3068@bless (unspecified)) (set! Z306a@with-syntax-macro (unspecified)) (set! Z306c@invalid-fmls-error (unspecified)) (set! Z306e@let-macro (unspecified)) (set! Z3070@let-values-macro (unspecified)) (set! Z3072@let*-values-macro (unspecified)) (set! Z3074@trace-lambda-macro (unspecified)) (set! Z3076@trace-define-macro (unspecified)) (set! Z3078@trace-define-syntax-macro (unspecified)) (set! Z307a@trace-let/rec-syntax (unspecified)) (set! Z307c@trace-let-syntax-macro (unspecified)) (set! Z307e@trace-letrec-syntax-macro (unspecified)) (set! Z3080@guard-macro (unspecified)) (set! Z3082@define-enumeration-macro (unspecified)) (set! Z3084@time-macro (unspecified)) (set! Z3086@delay-macro (unspecified)) (set! Z3088@assert-macro (unspecified)) (set! Z308a@endianness-macro (unspecified)) (set! Z308c@identifier-syntax-macro (unspecified)) (set! Z308e@do-macro (unspecified)) (set! Z3090@let*-macro (unspecified)) (set! Z3092@or-macro (unspecified)) (set! Z3094@and-macro (unspecified)) (set! Z3096@cond-macro (unspecified)) (set! Z3098@do-include (unspecified)) (set! Z309a@include-macro (unspecified)) (set! Z309c@include-into-macro (unspecified)) (set! Z309e@syntax-rules-macro (unspecified)) (set! Z30a0@quasiquote-macro (unspecified)) (set! Z30a2@quasisyntax-macro (unspecified)) (set! Z30a4@define-struct-macro (unspecified)) (set! Z30a6@define-record-type-macro (unspecified)) (set! Z30a8@define-condition-type-macro (unspecified)) (set! Z30aa@incorrect-usage-macro (unspecified)) (set! Z30ac@parameterize-macro (unspecified)) (set! Z30ae@foreign-call-transformer (unspecified)) (set! Z30b0@convert-pattern (unspecified)) (set! Z30b2@syntax-dispatch (unspecified)) (set! Z30b4@ellipsis? (unspecified)) (set! Z30b6@underscore? (unspecified)) (set! Z30b8@verify-literals (unspecified)) (set! Z30ba@syntax-case-transformer (unspecified)) (set! Z30bc@ellipsis-map (unspecified)) (set! Z30be@syntax-transformer (unspecified)) (set! Z30c0@core-macro-transformer (unspecified)) (set! Z30c2@symbol-macro (unspecified)) (set! Z30c4@macro-transformer (unspecified)) (set! Z30c6@local-macro-transformer (unspecified)) (set! Z30c8@do-macro-call (unspecified)) (set! Z30ca@chi-macro (unspecified)) (set! Z30cc@chi-local-macro (unspecified)) (set! Z30ce@chi-global-macro (unspecified)) (set! Z30d0@chi-expr* (unspecified)) (set! Z30d2@chi-application (unspecified)) (set! Z30d4@chi-expr (unspecified)) (set! Z30d6@chi-set! (unspecified)) (set! Z30d8@verify-formals (unspecified)) (set! Z30da@chi-lambda-clause (unspecified)) (set! Z30dc@chi-lambda-clause* (unspecified)) (set! Z30de@chi-defun (unspecified)) (set! Z30e0@chi-rhs (unspecified)) (set! Z30e2@expand-interaction-rhs*/init* (unspecified)) (set! Z30e4@chi-rhs* (unspecified)) (set! Z30e6@find-bound=? (unspecified)) (set! Z30e8@find-dups (unspecified)) (set! Z30ea@chi-internal (unspecified)) (set! Z30ec@parse-module (unspecified)) (set! Z30f6@module-interface? (unspecified)) (set! Z30f8@module-interface-first-mark (unspecified)) (set! Z30fa@set-module-interface-first-mark! (unspecified)) (set! Z30fc@module-interface-exp-id-vec (unspecified)) (set! Z30fe@set-module-interface-exp-id-vec! (unspecified)) (set! Z3100@module-interface-exp-lab-vec (unspecified)) (set! Z3102@set-module-interface-exp-lab-vec! (unspecified)) (set! Z3104@dummy (unspecified)) (set! Z3106@module-interface-exp-id* (unspecified)) (set! Z3108@chi-internal-module (unspecified)) (set! Z310a@chi-body* (unspecified)) (set! Z310c@expand-transformer (unspecified)) (set! Z310e@parse-exports (unspecified)) (set! Z3110@parse-library-name (unspecified)) (set! Z3112@parse-library (unspecified)) (set! Z3114@parse-import-spec* (unspecified)) (set! Z3116@make-top-rib (unspecified)) (set! Z3118@make-collector (unspecified)) (set! Z311a@inv-collector (unspecified)) (set! Z311c@vis-collector (unspecified)) (set! Z311e@imp-collector (unspecified)) (set! Z3120@chi-library-internal (unspecified)) (set! Z3122@chi-interaction-expr (unspecified)) (set! Z3124@library-body-expander (unspecified)) (set! Z3126@core-library-expander (unspecified)) (set! Z3128@parse-top-level-program (unspecified)) (set! Z312a@top-level-expander (unspecified)) (set! Z312c@rp (unspecified)) (set! Z3136@env? (unspecified)) (set! Z3138@env-names (unspecified)) (set! Z313a@set-env-names! (unspecified)) (set! Z313c@env-labels (unspecified)) (set! Z313e@set-env-labels! (unspecified)) (set! Z3140@env-itc (unspecified)) (set! Z3142@set-env-itc! (unspecified)) (set! Z3144@dummy (unspecified)) (set! Z3146@rp (unspecified)) (set! Z3150@interaction-env? (unspecified)) (set! Z3152@interaction-env-rib (unspecified)) (set! Z3154@set-interaction-env-rib! (unspecified)) (set! Z3156@interaction-env-r (unspecified)) (set! Z3158@set-interaction-env-r! (unspecified)) (set! Z315a@interaction-env-locs (unspecified)) (set! Z315c@set-interaction-env-locs! (unspecified)) (set! Z315e@dummy (unspecified)) (set! Z3160@interaction-environment-symbols (unspecified)) (set! Z3162@environment-bindings (unspecified)) (set! Z3164@parse-binding (unspecified)) (set! Z3166@environment? (unspecified)) (set! Z3168@environment-symbols (unspecified)) (set! Z316a@environment (unspecified)) (set! Z316c@null-environment (unspecified)) (set! Z316e@scheme-report-environment (unspecified)) (set! Z3170@expand (unspecified)) (set! Z3172@eval (unspecified)) (set! Z3174@library-expander (unspecified)) (set! Z3176@boot-library-expand (unspecified)) (set! Z3178@rev-map-append (unspecified)) (set! Z317a@build-exports (unspecified)) (set! Z317c@make-export-subst (unspecified)) (set! Z317e@make-export-env/macros (unspecified)) (set! Z3180@generate-temporaries (unspecified)) (set! Z3182@free-identifier=? (unspecified)) (set! Z3184@bound-identifier=? (unspecified)) (set! Z3186@make-source-condition (unspecified)) (set! Z3188@extract-position-condition (unspecified)) (set! Z318a@expression-position (unspecified)) (set! Z318c@assertion-error (unspecified)) (set! Z318e@syntax-error (unspecified)) (set! Z3190@syntax-violation* (unspecified)) (set! Z3192@syntax-violation (unspecified)) (set! Z3194@identifier? (unspecified)) (set! Z3196@datum->syntax (unspecified)) (set! Z3198@syntax->datum (unspecified)) (set! Z319a@ungensym-all (unspecified)) (set! Z319c@compile-r6rs-top-level (unspecified)) (set! Z319e@pre-compile-r6rs-top-level (unspecified)) (set! Z31a0@interaction-environment (unspecified)) (set! Z31a2@top-level-context (unspecified)) (set! Z2e26@file-options-macro (lambda (Z31a3@x) (letrec* ((Z31a6@valid-option? (lambda (Z31af@x) (and (Z2eab@id? Z31af@x) (memq (Z2ead@id->sym Z31af@x) '(no-fail no-create no-truncate)))))) (let ((Z31a7@t Z31a3@x)) (let ((Z31a9@ls/false (Z30b2@syntax-dispatch Z31a7@t '(_ . each-any)))) (if (and Z31a9@ls/false (apply (lambda (Z31ab@opt*) (for-all Z31a6@valid-option? Z31ab@opt*)) Z31a9@ls/false)) (apply (lambda (Z31ad@opt*) (Z3068@bless (list 'make-file-options (list 'quote Z31ad@opt*)))) Z31a9@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z31a7@t))))))) (set! Z4b2f@Z2e26@file-options-macro Z2e26@file-options-macro) (set! Z2e28@set-cons (lambda (Z31b1@x Z31b2@ls) (if (memq Z31b1@x Z31b2@ls) Z31b2@ls (cons Z31b1@x Z31b2@ls)))) (set! Z4b30@Z2e28@set-cons Z2e28@set-cons) (set! Z2e2a@set-union (lambda (Z31b5@ls1 Z31b6@ls2) (if (null? Z31b5@ls1) Z31b6@ls2 (if (memq (car Z31b5@ls1) Z31b6@ls2) (Z2e2a@set-union (cdr Z31b5@ls1) Z31b6@ls2) (cons (car Z31b5@ls1) (Z2e2a@set-union (cdr Z31b5@ls1) Z31b6@ls2)))))) (set! Z4b31@Z2e2a@set-union Z2e2a@set-union) (set! Z2e2f@top-mark* '(top)) (set! Z4b32@Z2e2f@top-mark* Z2e2f@top-mark*) (set! Z2e31@top-marked? (lambda (Z31b9@m*) (memq 'top Z31b9@m*))) (set! Z4b33@Z2e31@top-marked? Z2e31@top-marked?) (set! Z2e33@gen-lexical (lambda (Z31bb@sym) (if (symbol? Z31bb@sym) (gensym Z31bb@sym) (if (Z2e77@stx? Z31bb@sym) (Z2e33@gen-lexical (Z2ead@id->sym Z31bb@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" Z31bb@sym))))) (set! Z4b34@Z2e33@gen-lexical Z2e33@gen-lexical) (set! Z2e35@gen-global (lambda (Z31bd@x) (Z2e33@gen-lexical Z31bd@x))) (set! Z4b35@Z2e35@gen-global Z2e35@gen-global) (set! Z2e37@gen-label (lambda (Z31bf@_) (gensym))) (set! Z4b36@Z2e37@gen-label Z2e37@gen-label) (set! Z2e39@gen-top-level-label (lambda (Z31c1@id Z31c2@rib) (letrec* ((Z31c6@find (lambda (Z31d1@sym Z31d2@mark* Z31d3@sym* Z31d4@mark** Z31d5@label*) (and (pair? Z31d3@sym*) (if (and (eq? Z31d1@sym (car Z31d3@sym*)) (same-marks? Z31d2@mark* (car Z31d4@mark**))) (car Z31d5@label*) (Z31c6@find Z31d1@sym Z31d2@mark* (cdr Z31d3@sym*) (cdr Z31d4@mark**) (cdr Z31d5@label*))))))) (let ((Z31c7@sym (Z2ead@id->sym Z31c1@id)) (Z31c8@mark* (Z2e7d@stx-mark* Z31c1@id))) (let ((Z31cb@sym* (Z2e49@rib-sym* Z31c2@rib))) (let ((Z31cd@t (and (memq Z31c7@sym (Z2e49@rib-sym* Z31c2@rib)) (Z31c6@find Z31c7@sym Z31c8@mark* Z31cb@sym* (Z2e4d@rib-mark** Z31c2@rib) (Z2e51@rib-label* Z31c2@rib))))) (if Z31cd@t ((lambda (Z31cf@label) (if (Z2cc6@Z2b13@imported-label->binding Z31cf@label) (gensym) Z31cf@label)) Z31cd@t) (gensym)))))))) (set! Z4b37@Z2e39@gen-top-level-label Z2e39@gen-top-level-label) (set! Z2e3b@gen-define-label+loc (lambda (Z31db@id Z31dc@rib) (let ((Z31df@t (Z31a2@top-level-context))) (if Z31df@t ((lambda (Z31e1@env) (let ((Z31e3@label (Z2e39@gen-top-level-label Z31db@id Z31dc@rib)) (Z31e4@locs (Z315a@interaction-env-locs Z31e1@env))) (values Z31e3@label (let ((Z31e7@t (assq Z31e3@label Z31e4@locs))) (if Z31e7@t (cdr Z31e7@t) (let ((Z31e9@loc (Z2e33@gen-lexical Z31db@id))) (begin (Z315c@set-interaction-env-locs! Z31e1@env (cons (cons Z31e3@label Z31e9@loc) Z31e4@locs)) Z31e9@loc))))))) Z31df@t) (values (gensym) (Z2e33@gen-lexical Z31db@id)))))) (set! Z4b38@Z2e3b@gen-define-label+loc Z2e3b@gen-define-label+loc) (set! Z2e3d@gen-define-label (lambda (Z31eb@id Z31ec@rib) (if (Z31a2@top-level-context) (Z2e39@gen-top-level-label Z31eb@id Z31ec@rib) (gensym)))) (set! Z4b39@Z2e3d@gen-define-label Z2e3d@gen-define-label) (set! Z2e47@rib? (lambda (Z31ef@x) (and (simple-struct? Z31ef@x) (eq? (simple-struct-name Z31ef@x) 'rib)))) (set! Z4b3a@Z2e47@rib? Z2e47@rib?) (set! Z2e49@rib-sym* (lambda (Z31f1@x) (simple-struct-ref Z31f1@x '0))) (set! Z4b3b@Z2e49@rib-sym* Z2e49@rib-sym*) (set! Z2e4b@set-rib-sym*! (lambda (Z31f3@x Z31f4@val) (simple-struct-set! Z31f3@x '0 Z31f4@val))) (set! Z4b3c@Z2e4b@set-rib-sym*! Z2e4b@set-rib-sym*!) (set! Z2e4d@rib-mark** (lambda (Z31f7@x) (simple-struct-ref Z31f7@x '1))) (set! Z4b3d@Z2e4d@rib-mark** Z2e4d@rib-mark**) (set! Z2e4f@set-rib-mark**! (lambda (Z31f9@x Z31fa@val) (simple-struct-set! Z31f9@x '1 Z31fa@val))) (set! Z4b3e@Z2e4f@set-rib-mark**! Z2e4f@set-rib-mark**!) (set! Z2e51@rib-label* (lambda (Z31fd@x) (simple-struct-ref Z31fd@x '2))) (set! Z4b3f@Z2e51@rib-label* Z2e51@rib-label*) (set! Z2e53@set-rib-label*! (lambda (Z31ff@x Z3200@val) (simple-struct-set! Z31ff@x '2 Z3200@val))) (set! Z4b40@Z2e53@set-rib-label*! Z2e53@set-rib-label*!) (set! Z2e55@rib-sealed/freq (lambda (Z3203@x) (simple-struct-ref Z3203@x '3))) (set! Z4b41@Z2e55@rib-sealed/freq Z2e55@rib-sealed/freq) (set! Z2e57@set-rib-sealed/freq! (lambda (Z3205@x Z3206@val) (simple-struct-set! Z3205@x '3 Z3206@val))) (set! Z4b42@Z2e57@set-rib-sealed/freq! Z2e57@set-rib-sealed/freq!) (set! Z2e59@rib-cache (lambda (Z3209@x) (simple-struct-ref Z3209@x '4))) (set! Z4b43@Z2e59@rib-cache Z2e59@rib-cache) (set! Z2e5b@set-rib-cache! (lambda (Z320b@x Z320c@val) (simple-struct-set! Z320b@x '4 Z320c@val))) (set! Z4b44@Z2e5b@set-rib-cache! Z2e5b@set-rib-cache!) (set! Z2e5d@dummy '3) (set! Z4b45@Z2e5d@dummy Z2e5d@dummy) (set! Z2e5f@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! Z4b46@Z2e5f@make-empty-rib Z2e5f@make-empty-rib) (set! Z2e61@extend-rib! (lambda (Z320f@rib Z3210@id Z3211@label) (letrec* ((Z3216@find (lambda (Z3223@sym Z3224@mark* Z3225@sym* Z3226@mark** Z3227@label*) (and (pair? Z3225@sym*) (if (and (eq? Z3223@sym (car Z3225@sym*)) (same-marks? Z3224@mark* (car Z3226@mark**))) Z3227@label* (Z3216@find Z3223@sym Z3224@mark* (cdr Z3225@sym*) (cdr Z3226@mark**) (cdr Z3227@label*))))))) (begin (if (Z2e55@rib-sealed/freq Z320f@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" Z320f@rib) (void)) (let ((Z3217@sym (Z2ead@id->sym Z3210@id)) (Z3218@mark* (Z2e7d@stx-mark* Z3210@id))) (let ((Z321b@sym* (Z2e49@rib-sym* Z320f@rib))) (let ((Z321d@t (and (memq Z3217@sym (Z2e49@rib-sym* Z320f@rib)) (Z3216@find Z3217@sym Z3218@mark* Z321b@sym* (Z2e4d@rib-mark** Z320f@rib) (Z2e51@rib-label* Z320f@rib))))) (if Z321d@t ((lambda (Z321f@p) (if (not (eq? Z3211@label (car Z321f@p))) (if (Z31a2@top-level-context) (set-car! Z321f@p Z3211@label) (Z3192@syntax-violation '#f '"multiple definitions of identifier" Z3210@id)) (void))) Z321d@t) (begin (if (Z2e59@rib-cache Z320f@rib) (hashtable-update! (Z2e59@rib-cache Z320f@rib) Z3217@sym (lambda (Z3221@e) (cons (cons Z3218@mark* Z3211@label) Z3221@e)) '()) (void)) (Z2e4b@set-rib-sym*! Z320f@rib (cons Z3217@sym Z321b@sym*)) (Z2e4f@set-rib-mark**! Z320f@rib (cons Z3218@mark* (Z2e4d@rib-mark** Z320f@rib))) (Z2e53@set-rib-label*! Z320f@rib (cons Z3211@label (Z2e51@rib-label* Z320f@rib)))))))))))) (set! Z4b47@Z2e61@extend-rib! Z2e61@extend-rib!) (set! Z2e63@extend-rib/nc! (lambda (Z322d@rib Z322e@id Z322f@label) (let ((Z3233@sym (Z2ead@id->sym Z322e@id)) (Z3234@mark* (Z2e7d@stx-mark* Z322e@id))) (let ((Z3237@sym* (Z2e49@rib-sym* Z322d@rib))) (begin (if (Z2e59@rib-cache Z322d@rib) (hashtable-update! (Z2e59@rib-cache Z322d@rib) Z3233@sym (lambda (Z3239@e) (cons (cons Z3234@mark* Z322f@label) Z3239@e)) '()) (void)) (Z2e4b@set-rib-sym*! Z322d@rib (cons Z3233@sym Z3237@sym*)) (Z2e4f@set-rib-mark**! Z322d@rib (cons Z3234@mark* (Z2e4d@rib-mark** Z322d@rib))) (Z2e53@set-rib-label*! Z322d@rib (cons Z322f@label (Z2e51@rib-label* Z322d@rib)))))))) (set! Z4b48@Z2e63@extend-rib/nc! Z2e63@extend-rib/nc!) (set! Z2e65@make-rib-map (lambda (Z323b@sym*) (let ((Z323d@ht (make-eq-hashtable))) (let Z3243@f ((Z323f@i '0) (Z3240@sym* Z323b@sym*)) (if (null? Z3240@sym*) Z323d@ht (begin (hashtable-update! Z323d@ht (car Z3240@sym*) (lambda (Z3245@x) (cons Z323f@i Z3245@x)) '()) (Z3243@f (+ Z323f@i '1) (cdr Z3240@sym*)))))))) (set! Z4b49@Z2e65@make-rib-map Z2e65@make-rib-map) (set! Z2e67@seal-rib! (lambda (Z3247@rib) (let ((Z3249@sym* (Z2e49@rib-sym* Z3247@rib))) (if (not (null? Z3249@sym*)) (begin (Z2e4b@set-rib-sym*! Z3247@rib (list->vector Z3249@sym*)) (Z2e4f@set-rib-mark**! Z3247@rib (list->vector (Z2e4d@rib-mark** Z3247@rib))) (Z2e53@set-rib-label*! Z3247@rib (list->vector (Z2e51@rib-label* Z3247@rib))) (Z2e57@set-rib-sealed/freq! Z3247@rib (Z2e65@make-rib-map Z3249@sym*))) (void))))) (set! Z4b4a@Z2e67@seal-rib! Z2e67@seal-rib!) (set! Z2e69@unseal-rib! (lambda (Z324b@rib) (if (Z2e55@rib-sealed/freq Z324b@rib) (begin (Z2e57@set-rib-sealed/freq! Z324b@rib '#f) (Z2e4b@set-rib-sym*! Z324b@rib (vector->list (Z2e49@rib-sym* Z324b@rib))) (Z2e4f@set-rib-mark**! Z324b@rib (vector->list (Z2e4d@rib-mark** Z324b@rib))) (Z2e53@set-rib-label*! Z324b@rib (vector->list (Z2e51@rib-label* Z324b@rib)))) (void)))) (set! Z4b4b@Z2e69@unseal-rib! Z2e69@unseal-rib!) (set! Z2e6b@make-full-rib (lambda (Z324d@id* Z324e@label*) (let ((Z3251@r (make-simple-struct 'rib '6 (list (map Z2ead@id->sym Z324d@id*) (map Z2e7d@stx-mark* Z324d@id*) Z324e@label* '#f '#f)))) (begin (Z2e67@seal-rib! Z3251@r) Z3251@r)))) (set! Z4b4c@Z2e6b@make-full-rib Z2e6b@make-full-rib) (set! Z2e6d@rp (Z29f8@Z28d3@make-record-printer 'stx (lambda (Z3253@x Z3254@p Z3255@wr) (begin (display '"#<syntax " Z3254@p) (write (Z2ebf@stx->datum Z3253@x) Z3254@p) (let ((Z3259@expr (Z2e79@stx-expr Z3253@x))) (if (Z29ef@Z28c1@annotation? Z3259@expr) (let ((Z325b@src (Z29f0@Z28c3@annotation-source Z3259@expr))) (if (pair? Z325b@src) (begin (display '" [" Z3254@p) (display (cdr Z325b@src) Z3254@p) (display '" of " Z3254@p) (display (car Z325b@src) Z3254@p) (display '"]" Z3254@p)) (void))) (void))) (display '">" Z3254@p))))) (set! Z4b4d@Z2e6d@rp Z2e6d@rp) (set! Z2e77@stx? (lambda (Z325d@x) (and (simple-struct? Z325d@x) (eq? (simple-struct-name Z325d@x) 'stx)))) (set! Z4b4e@Z2e77@stx? Z2e77@stx?) (set! Z2e79@stx-expr (lambda (Z325f@x) (simple-struct-ref Z325f@x '0))) (set! Z4b4f@Z2e79@stx-expr Z2e79@stx-expr) (set! Z2e7b@set-stx-expr! (lambda (Z3261@x Z3262@val) (simple-struct-set! Z3261@x '0 Z3262@val))) (set! Z4b50@Z2e7b@set-stx-expr! Z2e7b@set-stx-expr!) (set! Z2e7d@stx-mark* (lambda (Z3265@x) (simple-struct-ref Z3265@x '1))) (set! Z4b51@Z2e7d@stx-mark* Z2e7d@stx-mark*) (set! Z2e7f@set-stx-mark*! (lambda (Z3267@x Z3268@val) (simple-struct-set! Z3267@x '1 Z3268@val))) (set! Z4b52@Z2e7f@set-stx-mark*! Z2e7f@set-stx-mark*!) (set! Z2e81@stx-subst* (lambda (Z326b@x) (simple-struct-ref Z326b@x '2))) (set! Z4b53@Z2e81@stx-subst* Z2e81@stx-subst*) (set! Z2e83@set-stx-subst*! (lambda (Z326d@x Z326e@val) (simple-struct-set! Z326d@x '2 Z326e@val))) (set! Z4b54@Z2e83@set-stx-subst*! Z2e83@set-stx-subst*!) (set! Z2e85@stx-ae* (lambda (Z3271@x) (simple-struct-ref Z3271@x '3))) (set! Z4b55@Z2e85@stx-ae* Z2e85@stx-ae*) (set! Z2e87@set-stx-ae*! (lambda (Z3273@x Z3274@val) (simple-struct-set! Z3273@x '3 Z3274@val))) (set! Z4b56@Z2e87@set-stx-ae*! Z2e87@set-stx-ae*!) (set! Z2e89@dummy '3) (set! Z4b57@Z2e89@dummy Z2e89@dummy) (set! Z2e8b@datum->stx (lambda (Z3277@id Z3278@datum) (make-simple-struct 'stx '5 (list Z3278@datum (Z2e7d@stx-mark* Z3277@id) (Z2e81@stx-subst* Z3277@id) (Z2e85@stx-ae* Z3277@id))))) (set! Z4b58@Z2e8b@datum->stx Z2e8b@datum->stx) (set! Z2e8d@gen-mark (lambda () (string '#\m))) (set! Z4b59@Z2e8d@gen-mark Z2e8d@gen-mark) (set! Z2e8f@anti-mark '#f) (set! Z4b5a@Z2e8f@anti-mark Z2e8f@anti-mark) (set! Z2e91@anti-mark? not) (set! Z4b5b@Z2e91@anti-mark? Z2e91@anti-mark?) (set! Z2e93@mkstx (lambda (Z327b@e Z327c@m* Z327d@s* Z327e@ae*) (if (and (Z2e77@stx? Z327b@e) (not (Z2e31@top-marked? Z327c@m*))) (call-with-values (lambda () (join-wraps Z327c@m* Z327d@s* Z327e@ae* Z327b@e)) (lambda (Z3289@Z3284 Z328a@Z3286 Z328b@Z3288) (let ((Z328f@ae* Z328b@Z3288) (Z3290@s* Z328a@Z3286) (Z3291@m* Z3289@Z3284)) (make-simple-struct 'stx '5 (list (Z2e79@stx-expr Z327b@e) Z3291@m* Z3290@s* Z328f@ae*))))) (make-simple-struct 'stx '5 (list Z327b@e Z327c@m* Z327d@s* Z327e@ae*))))) (set! Z4b5c@Z2e93@mkstx Z2e93@mkstx) (set! Z2e95@add-subst (lambda (Z3295@subst Z3296@e) (Z2e93@mkstx Z3296@e '() (list Z3295@subst) '()))) (set! Z4b5d@Z2e95@add-subst Z2e95@add-subst) (set! Z2e97@add-mark (lambda (Z3299@mark Z329a@subst Z329b@expr Z329c@ae) (letrec* ((Z32a2@merge-ae* (lambda (Z32c9@ls1 Z32ca@ls2) (if (and (pair? Z32c9@ls1) (pair? Z32ca@ls2) (not (car Z32ca@ls2))) (Z32a4@cancel Z32c9@ls1 Z32ca@ls2) (append Z32c9@ls1 Z32ca@ls2)))) (Z32a4@cancel (lambda (Z32bf@ls1 Z32c0@ls2) (let Z32c7@f ((Z32c3@x (car Z32bf@ls1)) (Z32c4@ls1 (cdr Z32bf@ls1))) (if (null? Z32c4@ls1) (cdr Z32c0@ls2) (cons Z32c3@x (Z32c7@f (car Z32c4@ls1) (cdr Z32c4@ls1))))))) (Z32a6@f (lambda (Z32a7@e Z32a8@m Z32a9@s1* Z32aa@ae*) (if (pair? Z32a7@e) (let ((Z32af@a (Z32a6@f (car Z32a7@e) Z32a8@m Z32a9@s1* Z32aa@ae*)) (Z32b0@d (Z32a6@f (cdr Z32a7@e) Z32a8@m Z32a9@s1* Z32aa@ae*))) (if (eq? Z32af@a Z32b0@d) Z32a7@e (cons Z32af@a Z32b0@d))) (if (vector? Z32a7@e) (let ((Z32b3@ls1 (vector->list Z32a7@e))) (let ((Z32b5@ls2 (map (lambda (Z32b7@x) (Z32a6@f Z32b7@x Z32a8@m Z32a9@s1* Z32aa@ae*)) Z32b3@ls1))) (if (for-all eq? Z32b3@ls1 Z32b5@ls2) Z32a7@e (list->vector Z32b5@ls2)))) (if (Z2e77@stx? Z32a7@e) (let ((Z32b9@m* (Z2e7d@stx-mark* Z32a7@e)) (Z32ba@s2* (Z2e81@stx-subst* Z32a7@e))) (if (null? Z32b9@m*) (Z32a6@f (Z2e79@stx-expr Z32a7@e) Z32a8@m (append Z32a9@s1* Z32ba@s2*) (Z32a2@merge-ae* Z32aa@ae* (Z2e85@stx-ae* Z32a7@e))) (if (eq? (car Z32b9@m*) Z2e8f@anti-mark) (make-simple-struct 'stx '5 (list (Z2e79@stx-expr Z32a7@e) (cdr Z32b9@m*) (cdr (append Z32a9@s1* Z32ba@s2*)) (Z32a2@merge-ae* Z32aa@ae* (Z2e85@stx-ae* Z32a7@e)))) (make-simple-struct 'stx '5 (list (Z2e79@stx-expr Z32a7@e) (cons Z32a8@m Z32b9@m*) (let ((Z32bd@s* (cons 'shift (append Z32a9@s1* Z32ba@s2*)))) (if Z329a@subst (cons Z329a@subst Z32bd@s*) Z32bd@s*)) (Z32a2@merge-ae* Z32aa@ae* (Z2e85@stx-ae* Z32a7@e))))))) (if (symbol? Z32a7@e) (Z3192@syntax-violation '#f '"raw symbol encountered in output of macro" Z329b@expr Z32a7@e) (make-simple-struct 'stx '5 (list Z32a7@e (list Z32a8@m) Z32a9@s1* Z32aa@ae*))))))))) (Z2e93@mkstx (Z32a6@f Z329b@expr Z3299@mark '() '()) '() '() (list Z329c@ae))))) (set! Z4b5e@Z2e97@add-mark Z2e97@add-mark) (set! Z2e99@syntax-kind? (lambda (Z32cd@x Z32ce@p?) (if (Z2e77@stx? Z32cd@x) (Z2e99@syntax-kind? (Z2e79@stx-expr Z32cd@x) Z32ce@p?) (if (Z29ef@Z28c1@annotation? Z32cd@x) (Z2e99@syntax-kind? (Z29f1@Z28c5@annotation-expression Z32cd@x) Z32ce@p?) (Z32ce@p? Z32cd@x))))) (set! Z4b5f@Z2e99@syntax-kind? Z2e99@syntax-kind?) (set! Z2e9b@syntax-vector->list (lambda (Z32d1@x) (if (Z2e77@stx? Z32d1@x) (let ((Z32d3@ls (Z2e9b@syntax-vector->list (Z2e79@stx-expr Z32d1@x))) (Z32d4@m* (Z2e7d@stx-mark* Z32d1@x)) (Z32d5@s* (Z2e81@stx-subst* Z32d1@x)) (Z32d6@ae* (Z2e85@stx-ae* Z32d1@x))) (map (lambda (Z32db@x) (Z2e93@mkstx Z32db@x Z32d4@m* Z32d5@s* Z32d6@ae*)) Z32d3@ls)) (if (Z29ef@Z28c1@annotation? Z32d1@x) (Z2e9b@syntax-vector->list (Z29f1@Z28c5@annotation-expression Z32d1@x)) (if (vector? Z32d1@x) (vector->list Z32d1@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" Z32d1@x)))))) (set! Z4b60@Z2e9b@syntax-vector->list Z2e9b@syntax-vector->list) (set! Z2e9d@syntax-pair? (lambda (Z32dd@x) (Z2e99@syntax-kind? Z32dd@x pair?))) (set! Z4b61@Z2e9d@syntax-pair? Z2e9d@syntax-pair?) (set! Z2e9f@syntax-vector? (lambda (Z32df@x) (Z2e99@syntax-kind? Z32df@x vector?))) (set! Z4b62@Z2e9f@syntax-vector? Z2e9f@syntax-vector?) (set! Z2ea1@syntax-null? (lambda (Z32e1@x) (Z2e99@syntax-kind? Z32e1@x null?))) (set! Z4b63@Z2ea1@syntax-null? Z2ea1@syntax-null?) (set! Z2ea3@syntax-list? (lambda (Z32e3@x) (or (Z2ea1@syntax-null? Z32e3@x) (and (Z2e9d@syntax-pair? Z32e3@x) (Z2ea3@syntax-list? (Z2ea7@syntax-cdr Z32e3@x)))))) (set! Z4b64@Z2ea3@syntax-list? Z2ea3@syntax-list?) (set! Z2ea5@syntax-car (lambda (Z32e5@x) (if (Z2e77@stx? Z32e5@x) (Z2e93@mkstx (Z2ea5@syntax-car (Z2e79@stx-expr Z32e5@x)) (Z2e7d@stx-mark* Z32e5@x) (Z2e81@stx-subst* Z32e5@x) (Z2e85@stx-ae* Z32e5@x)) (if (Z29ef@Z28c1@annotation? Z32e5@x) (Z2ea5@syntax-car (Z29f1@Z28c5@annotation-expression Z32e5@x)) (if (pair? Z32e5@x) (car Z32e5@x) (assertion-violation 'syntax-car '"BUG: not a pair" Z32e5@x)))))) (set! Z4b65@Z2ea5@syntax-car Z2ea5@syntax-car) (set! Z2ea7@syntax-cdr (lambda (Z32e7@x) (if (Z2e77@stx? Z32e7@x) (Z2e93@mkstx (Z2ea7@syntax-cdr (Z2e79@stx-expr Z32e7@x)) (Z2e7d@stx-mark* Z32e7@x) (Z2e81@stx-subst* Z32e7@x) (Z2e85@stx-ae* Z32e7@x)) (if (Z29ef@Z28c1@annotation? Z32e7@x) (Z2ea7@syntax-cdr (Z29f1@Z28c5@annotation-expression Z32e7@x)) (if (pair? Z32e7@x) (cdr Z32e7@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" Z32e7@x)))))) (set! Z4b66@Z2ea7@syntax-cdr Z2ea7@syntax-cdr) (set! Z2ea9@syntax->list (lambda (Z32e9@x) (if (Z2e9d@syntax-pair? Z32e9@x) (cons (Z2ea5@syntax-car Z32e9@x) (Z2ea9@syntax->list (Z2ea7@syntax-cdr Z32e9@x))) (if (Z2ea1@syntax-null? Z32e9@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" Z32e9@x))))) (set! Z4b67@Z2ea9@syntax->list Z2ea9@syntax->list) (set! Z2eab@id? (lambda (Z32eb@x) (and (Z2e77@stx? Z32eb@x) (symbol? (Z2e79@stx-expr Z32eb@x))))) (set! Z4b68@Z2eab@id? Z2eab@id?) (set! Z2ead@id->sym (lambda (Z32ed@x) (Z2e79@stx-expr Z32ed@x))) (set! Z4b69@Z2ead@id->sym Z2ead@id->sym) (set! Z2eaf@bound-id=? (lambda (Z32ef@x Z32f0@y) (and (eq? (Z2ead@id->sym Z32ef@x) (Z2ead@id->sym Z32f0@y)) (same-marks? (Z2e7d@stx-mark* Z32ef@x) (Z2e7d@stx-mark* Z32f0@y))))) (set! Z4b6a@Z2eaf@bound-id=? Z2eaf@bound-id=?) (set! Z2eb1@free-id=? (lambda (Z32f3@i Z32f4@j) (let ((Z32f7@t0 (id->real-label Z32f3@i)) (Z32f8@t1 (id->real-label Z32f4@j))) (if (or Z32f7@t0 Z32f8@t1) (eq? Z32f7@t0 Z32f8@t1) (eq? (Z2ead@id->sym Z32f3@i) (Z2ead@id->sym Z32f4@j)))))) (set! Z4b6b@Z2eb1@free-id=? Z2eb1@free-id=?) (set! Z2eb3@valid-bound-ids? (lambda (Z32fb@id*) (and (for-all Z2eab@id? Z32fb@id*) (Z2eb5@distinct-bound-ids? Z32fb@id*)))) (set! Z4b6c@Z2eb3@valid-bound-ids? Z2eb3@valid-bound-ids?) (set! Z2eb5@distinct-bound-ids? (lambda (Z32fd@id*) (or (null? Z32fd@id*) (and (not (Z2eb7@bound-id-member? (car Z32fd@id*) (cdr Z32fd@id*))) (Z2eb5@distinct-bound-ids? (cdr Z32fd@id*)))))) (set! Z4b6d@Z2eb5@distinct-bound-ids? Z2eb5@distinct-bound-ids?) (set! Z2eb7@bound-id-member? (lambda (Z32ff@id Z3300@id*) (and (pair? Z3300@id*) (or (Z2eaf@bound-id=? Z32ff@id (car Z3300@id*)) (Z2eb7@bound-id-member? Z32ff@id (cdr Z3300@id*)))))) (set! Z4b6e@Z2eb7@bound-id-member? Z2eb7@bound-id-member?) (set! Z2eb9@self-evaluating? (lambda (Z3303@x) (or (number? Z3303@x) (string? Z3303@x) (char? Z3303@x) (boolean? Z3303@x) (regexp? Z3303@x) (bytevector? Z3303@x)))) (set! Z4b6f@Z2eb9@self-evaluating? Z2eb9@self-evaluating?) (set! Z2ebb@strip-annotations (lambda (Z3305@x) (if (pair? Z3305@x) (cons (Z2ebb@strip-annotations (car Z3305@x)) (Z2ebb@strip-annotations (cdr Z3305@x))) (if (vector? Z3305@x) (vector-map Z2ebb@strip-annotations Z3305@x) (if (Z29ef@Z28c1@annotation? Z3305@x) (Z29ee@Z28bf@annotation-stripped Z3305@x) Z3305@x))))) (set! Z4b70@Z2ebb@strip-annotations Z2ebb@strip-annotations) (set! Z2ebd@strip (lambda (Z3307@x Z3308@m*) (if (Z2e31@top-marked? Z3308@m*) (if (or (Z29ef@Z28c1@annotation? Z3307@x) (and (pair? Z3307@x) (Z29ef@Z28c1@annotation? (car Z3307@x))) (and (vector? Z3307@x) (> (vector-length Z3307@x) '0) (Z29ef@Z28c1@annotation? (vector-ref Z3307@x '0)))) (Z2ebb@strip-annotations Z3307@x) Z3307@x) (let Z330d@f ((Z330b@x Z3307@x)) (if (Z2e77@stx? Z330b@x) (begin (if (pair? (Z2e79@stx-expr Z330b@x)) (begin (set-source-info! (Z2e79@stx-expr Z330b@x) '#f) (set-source-info! (cdr (Z2e79@stx-expr Z330b@x)) '#f) (set-source-info! (car (Z2e79@stx-expr Z330b@x)) '#f)) (void)) (Z2ebd@strip (Z2e79@stx-expr Z330b@x) (Z2e7d@stx-mark* Z330b@x))) (if (Z29ef@Z28c1@annotation? Z330b@x) (Z29ee@Z28bf@annotation-stripped Z330b@x) (if (pair? Z330b@x) (let ((Z330f@a (Z330d@f (car Z330b@x))) (Z3310@d (Z330d@f (cdr Z330b@x)))) (if (and (eq? Z330f@a (car Z330b@x)) (eq? Z3310@d (cdr Z330b@x))) Z330b@x (cons Z330f@a Z3310@d))) (if (vector? Z330b@x) (let ((Z3313@old (vector->list Z330b@x))) (let ((Z3315@new (map Z330d@f Z3313@old))) (if (for-all eq? Z3313@old Z3315@new) Z330b@x (list->vector Z3315@new)))) Z330b@x)))))))) (set! Z4b71@Z2ebd@strip Z2ebd@strip) (set! Z2ebf@stx->datum (lambda (Z3317@x) (Z2ebd@strip Z3317@x '()))) (set! Z4b72@Z2ebf@stx->datum Z2ebf@stx->datum) (set! Z2ec1@id->label (lambda (Z3319@id) (or (id->real-label Z3319@id) (let ((Z331b@t (Z31a2@top-level-context))) (if Z331b@t ((lambda (Z331d@env) (let ((Z331f@rib (Z3152@interaction-env-rib Z331d@env))) (call-with-values (lambda () (Z2e3b@gen-define-label+loc Z3319@id Z331f@rib)) (lambda (Z3325@Z3322 Z3326@Z3324) (let ((Z3329@loc_ Z3326@Z3324) (Z332a@lab Z3325@Z3322)) (begin (Z2e61@extend-rib! Z331f@rib Z3319@id Z332a@lab) Z332a@lab)))))) Z331b@t) '#f))))) (set! Z4b73@Z2ec1@id->label Z2ec1@id->label) (set! Z2ec3@label->binding (lambda (Z332d@x Z332e@r) (let ((Z3331@t (Z2cc6@Z2b13@imported-label->binding Z332d@x))) (if Z3331@t ((lambda (Z3333@b) (if (and (pair? Z3333@b) (eq? (car Z3333@b) '$core-rtd)) (cons '$rtd (map Z3068@bless (cdr Z3333@b))) (if (and (pair? Z3333@b) (eq? (car Z3333@b) 'global-rtd)) (let ((Z3335@lib (cadr Z3333@b)) (Z3336@loc (cddr Z3333@b))) (cons '$rtd (symbol-value Z3336@loc))) Z3333@b))) Z3331@t) (let ((Z3339@t (assq Z332d@x Z332e@r))) (if Z3339@t (cdr Z3339@t) (let ((Z333b@t (Z31a2@top-level-context))) (if Z333b@t ((lambda (Z333d@env) (let ((Z333f@t (assq Z332d@x (Z315a@interaction-env-locs Z333d@env)))) (if Z333f@t ((lambda (Z3341@p) (cons* 'lexical (cdr Z3341@p) '#f)) Z333f@t) '(displaced-lexical . #f)))) Z333b@t) '(displaced-lexical . #f))))))))) (set! Z4b74@Z2ec3@label->binding Z2ec3@label->binding) (set! Z2ec5@make-binding cons) (set! Z4b75@Z2ec5@make-binding Z2ec5@make-binding) (set! Z2ec7@binding-type car) (set! Z4b76@Z2ec7@binding-type Z2ec7@binding-type) (set! Z2ec9@binding-value cdr) (set! Z4b77@Z2ec9@binding-value Z2ec9@binding-value) (set! Z2ecb@raise-unbound-error (lambda (Z3343@id) (Z3190@syntax-violation* '#f '"unbound identifier" Z3343@id (make-undefined-violation)))) (set! Z4b78@Z2ecb@raise-unbound-error Z2ecb@raise-unbound-error) (set! Z2ecd@syntax-type (lambda (Z3345@e Z3346@r) (if (Z2eab@id? Z3345@e) (let ((Z3349@id Z3345@e)) (let ((Z334b@label (Z2ec1@id->label Z3349@id))) (let ((Z334d@b (Z2ec3@label->binding Z334b@label Z3346@r))) (let ((Z334f@type (Z2ec7@binding-type Z334d@b))) (begin (if (not Z334b@label) (Z2ecb@raise-unbound-error Z3349@id) (void)) (let ((Z3351@t Z334f@type)) (if (memv Z3351@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values Z334f@type (Z2ec9@binding-value Z334d@b) Z3349@id) (values 'other '#f '#f)))))))) (if (Z2e9d@syntax-pair? Z3345@e) (let ((Z3353@id (Z2ea5@syntax-car Z3345@e))) (if (Z2eab@id? Z3353@id) (let ((Z3355@label (Z2ec1@id->label Z3353@id))) (let ((Z3357@b (Z2ec3@label->binding Z3355@label Z3346@r))) (let ((Z3359@type (Z2ec7@binding-type Z3357@b))) (begin (if (not Z3355@label) (Z2ecb@raise-unbound-error Z3353@id) (void)) (let ((Z335b@t Z3359@type)) (if (memv Z335b@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values Z3359@type (Z2ec9@binding-value Z3357@b) Z3353@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((Z335d@d (Z2ebf@stx->datum Z3345@e))) (if (Z2eb9@self-evaluating? Z335d@d) (values 'constant Z335d@d '#f) (values 'other '#f '#f))))))) (set! Z4b79@Z2ecd@syntax-type Z2ecd@syntax-type) (set! Z2edb@sanitize-binding (lambda (Z335f@x Z3360@src) (if (procedure? Z335f@x) (cons* 'local-macro Z335f@x Z3360@src) (if (and (pair? Z335f@x) (eq? (car Z335f@x) 'macro!) (procedure? (cdr Z335f@x))) (cons* 'local-macro! (cdr Z335f@x) Z3360@src) (if (and (pair? Z335f@x) (eq? (car Z335f@x) '$rtd)) Z335f@x (assertion-violation 'expand '"invalid transformer" Z335f@x)))))) (set! Z4b7a@Z2edb@sanitize-binding Z2edb@sanitize-binding) (set! Z2edd@make-variable-transformer (lambda (Z3363@x) (if (procedure? Z3363@x) (cons 'macro! Z3363@x) (assertion-violation 'make-variable-transformer '"not a procedure" Z3363@x)))) (set! Z4b7b@Z2edd@make-variable-transformer Z2edd@make-variable-transformer) (set! Z2edf@variable-transformer? (lambda (Z3365@x) (and (pair? Z3365@x) (eq? (car Z3365@x) 'macro!) (procedure? (cdr Z3365@x))))) (set! Z4b7c@Z2edf@variable-transformer? Z2edf@variable-transformer?) (set! Z2ee1@variable-transformer-procedure (lambda (Z3367@x) (if (Z2edf@variable-transformer? Z3367@x) (cdr Z3367@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" Z3367@x)))) (set! Z4b7d@Z2ee1@variable-transformer-procedure Z2ee1@variable-transformer-procedure) (set! Z2ee3@make-eval-transformer (lambda (Z3369@x) (Z2edb@sanitize-binding (eval-core (Z2a51@Z2a09@expanded->core Z3369@x)) Z3369@x))) (set! Z4b7e@Z2ee3@make-eval-transformer Z2ee3@make-eval-transformer) (set! Z3034@parse-define (lambda (Z336b@x) (let ((Z336d@t Z336b@x)) (let ((Z336f@ls/false (Z30b2@syntax-dispatch Z336d@t '(_ (any . any) any . each-any)))) (if (and Z336f@ls/false (apply (lambda (Z3371@id Z3372@fmls Z3373@b Z3374@b*) (Z2eab@id? Z3371@id)) Z336f@ls/false)) (apply (lambda (Z3379@id Z337a@fmls Z337b@b Z337c@b*) (begin (Z30d8@verify-formals Z337a@fmls Z336b@x) (values Z3379@id (cons 'defun (cons Z337a@fmls (cons Z337b@b Z337c@b*)))))) Z336f@ls/false) (let ((Z3381@t Z336d@t)) (let ((Z3383@ls/false (Z30b2@syntax-dispatch Z3381@t '(_ any any)))) (if (and Z3383@ls/false (apply (lambda (Z3385@id Z3386@val) (Z2eab@id? Z3385@id)) Z3383@ls/false)) (apply (lambda (Z3389@id Z338a@val) (values Z3389@id (cons 'expr Z338a@val))) Z3383@ls/false) (let ((Z338d@t Z3381@t)) (let ((Z338f@ls/false (Z30b2@syntax-dispatch Z338d@t '(_ any)))) (if (and Z338f@ls/false (apply (lambda (Z3391@id) (Z2eab@id? Z3391@id)) Z338f@ls/false)) (apply (lambda (Z3393@id) (values Z3393@id (cons 'expr (Z3068@bless '(void))))) Z338f@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z338d@t)))))))))))) (set! Z4b7f@Z3034@parse-define Z3034@parse-define) (set! Z3036@parse-define-syntax (lambda (Z3395@x) (let ((Z3397@t Z3395@x)) (let ((Z3399@ls/false (Z30b2@syntax-dispatch Z3397@t '(_ any any)))) (if (and Z3399@ls/false (apply (lambda (Z339b@id Z339c@val) (Z2eab@id? Z339b@id)) Z3399@ls/false)) (apply (lambda (Z339f@id Z33a0@val) (values Z339f@id Z33a0@val)) Z3399@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3397@t)))))) (set! Z4b80@Z3036@parse-define-syntax Z3036@parse-define-syntax) (set! Z3038@scheme-stx-hashtable (make-eq-hashtable)) (set! Z4b81@Z3038@scheme-stx-hashtable Z3038@scheme-stx-hashtable) (set! Z303a@scheme-stx (lambda (Z33a3@sym) (or (hashtable-ref Z3038@scheme-stx-hashtable Z33a3@sym '#f) (let ((Z33a5@subst (Z2ca2@Z2acb@library-subst (Z2cc0@Z2b07@find-library-by-name '(psyntax system $all))))) (let ((Z33a7@stx (make-simple-struct 'stx '5 (list Z33a3@sym Z2e2f@top-mark* '() '())))) (let ((Z33a9@stx (let ((Z33ab@t (assq Z33a3@sym Z33a5@subst))) (if Z33ab@t ((lambda (Z33ad@x) (let ((Z33af@name (car Z33ad@x)) (Z33b0@label (cdr Z33ad@x))) (Z2e95@add-subst (make-simple-struct 'rib '6 (list (list Z33af@name) (list Z2e2f@top-mark*) (list Z33b0@label) '#f '#f)) Z33a7@stx))) Z33ab@t) Z33a7@stx)))) (begin (hashtable-set! Z3038@scheme-stx-hashtable Z33a3@sym Z33a9@stx) Z33a9@stx))))))) (set! Z4b82@Z303a@scheme-stx Z303a@scheme-stx) (set! Z303c@lexical-var car) (set! Z4b83@Z303c@lexical-var Z303c@lexical-var) (set! Z303e@lexical-mutable? cdr) (set! Z4b84@Z303e@lexical-mutable? Z303e@lexical-mutable?) (set! Z3040@set-lexical-mutable! set-cdr!) (set! Z4b85@Z3040@set-lexical-mutable! Z3040@set-lexical-mutable!) (set! Z3042@add-lexical (lambda (Z33b3@lab Z33b4@lex Z33b5@r) (cons (cons* Z33b3@lab 'lexical Z33b4@lex '#f) Z33b5@r))) (set! Z4b86@Z3042@add-lexical Z3042@add-lexical) (set! Z3044@add-lexicals (lambda (Z33b9@lab* Z33ba@lex* Z33bb@r) (if (null? Z33b9@lab*) Z33bb@r (Z3044@add-lexicals (cdr Z33b9@lab*) (cdr Z33ba@lex*) (Z3042@add-lexical (car Z33b9@lab*) (car Z33ba@lex*) Z33bb@r))))) (set! Z4b87@Z3044@add-lexicals Z3044@add-lexicals) (set! Z3046@letrec-helper (lambda (Z33bf@e Z33c0@r Z33c1@mr Z33c2@build) (let ((Z33c7@t Z33bf@e)) (let ((Z33c9@ls/false (Z30b2@syntax-dispatch Z33c7@t '(_ #(each (any any)) any . each-any)))) (if Z33c9@ls/false (apply (lambda (Z33cb@lhs* Z33cc@rhs* Z33cd@b Z33ce@b*) (if (not (Z2eb3@valid-bound-ids? Z33cb@lhs*)) (Z306c@invalid-fmls-error Z33bf@e Z33cb@lhs*) (let ((Z33d3@lex* (map Z2e33@gen-lexical Z33cb@lhs*)) (Z33d4@lab* (map Z2e37@gen-label Z33cb@lhs*))) (let ((Z33d7@rib (Z2e6b@make-full-rib Z33cb@lhs* Z33d4@lab*)) (Z33d8@r (Z3044@add-lexicals Z33d4@lab* Z33d3@lex* Z33c0@r))) (let ((Z33db@body (Z30ea@chi-internal (Z2e95@add-subst Z33d7@rib (cons Z33cd@b Z33ce@b*)) Z33d8@r Z33c1@mr)) (Z33dc@rhs* (Z30d0@chi-expr* (map (lambda (Z33df@x) (Z2e95@add-subst Z33d7@rib Z33df@x)) Z33cc@rhs*) Z33d8@r Z33c1@mr))) (Z33c2@build '#f Z33d3@lex* Z33dc@rhs* Z33db@body)))))) Z33c9@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z33c7@t)))))) (set! Z4b88@Z3046@letrec-helper Z3046@letrec-helper) (set! Z3048@let-transformer (lambda (Z33e1@e Z33e2@r Z33e3@mr) (let ((Z33e7@t Z33e1@e)) (let ((Z33e9@ls/false (Z30b2@syntax-dispatch Z33e7@t '(_ #(each (any any)) any . each-any)))) (if Z33e9@ls/false (apply (lambda (Z33eb@lhs* Z33ec@rhs* Z33ed@b Z33ee@b*) (if (not (Z2eb3@valid-bound-ids? Z33eb@lhs*)) (Z306c@invalid-fmls-error Z33e1@e Z33eb@lhs*) (let ((Z33f3@lex* (map Z2e33@gen-lexical Z33eb@lhs*)) (Z33f4@lab* (map Z2e37@gen-label Z33eb@lhs*)) (Z33f5@rhs* (Z30d0@chi-expr* Z33ec@rhs* Z33e2@r Z33e3@mr))) (let ((Z33f9@rib (Z2e6b@make-full-rib Z33eb@lhs* Z33f4@lab*)) (Z33fa@r (Z3044@add-lexicals Z33f4@lab* Z33f3@lex* Z33e2@r))) (let ((Z33fd@body (Z30ea@chi-internal (Z2e95@add-subst Z33f9@rib (cons Z33ed@b Z33ee@b*)) Z33fa@r Z33e3@mr))) (Z2e13@Z2d76@build-let '#f Z33f3@lex* Z33f5@rhs* Z33fd@body)))))) Z33e9@ls/false) (let ((Z33ff@t Z33e7@t)) (let ((Z3401@ls/false (Z30b2@syntax-dispatch Z33ff@t '(_ any #(each (any any)) any . each-any)))) (if Z3401@ls/false (apply (lambda (Z3403@loop Z3404@lhs* Z3405@rhs* Z3406@b Z3407@b*) (if (not (Z2eb3@valid-bound-ids? Z3404@lhs*)) (Z306c@invalid-fmls-error Z33e1@e Z3404@lhs*) (let ((Z340d@lex* (map Z2e33@gen-lexical Z3404@lhs*)) (Z340e@lab* (map Z2e37@gen-label Z3404@lhs*)) (Z340f@rhs* (Z30d0@chi-expr* Z3405@rhs* Z33e2@r Z33e3@mr)) (Z3410@loop-lex (Z2e33@gen-lexical Z3403@loop)) (Z3411@loop-lab (Z2e37@gen-label Z3403@loop))) (let ((Z3417@loop-rib (Z2e6b@make-full-rib (list Z3403@loop) (list Z3411@loop-lab))) (Z3418@rib (Z2e6b@make-full-rib Z3404@lhs* Z340e@lab*)) (Z3419@r (Z3044@add-lexicals (cons Z3411@loop-lab Z340e@lab*) (cons Z3410@loop-lex Z340d@lex*) Z33e2@r))) (let ((Z341d@body (Z30ea@chi-internal (Z2e95@add-subst Z3417@loop-rib (Z2e95@add-subst Z3418@rib (cons Z3406@b Z3407@b*))) Z3419@r Z33e3@mr))) (Z2e14@Z2d78@build-named-let '#f Z3410@loop-lex Z340d@lex* Z340f@rhs* Z341d@body)))))) Z3401@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z33ff@t))))))))) (set! Z4b89@Z3048@let-transformer Z3048@let-transformer) (set! Z304a@letrec-transformer (lambda (Z341f@e Z3420@r Z3421@mr) (Z3046@letrec-helper Z341f@e Z3420@r Z3421@mr Z2e12@Z2d74@build-letrec))) (set! Z4b8a@Z304a@letrec-transformer Z304a@letrec-transformer) (set! Z304c@letrec*-transformer (lambda (Z3425@e Z3426@r Z3427@mr) (Z3046@letrec-helper Z3425@e Z3426@r Z3427@mr Z2e15@Z2d7a@build-letrec*))) (set! Z4b8b@Z304c@letrec*-transformer Z304c@letrec*-transformer) (set! Z304e@fluid-let-syntax-transformer (lambda (Z342b@e Z342c@r Z342d@mr) (letrec* ((Z3432@lookup (lambda (Z3445@x) (or (Z2ec1@id->label Z3445@x) (Z3192@syntax-violation '#f '"unbound identifier" Z342b@e Z3445@x))))) (let ((Z3433@t Z342b@e)) (let ((Z3435@ls/false (Z30b2@syntax-dispatch Z3433@t '(_ #(each (any any)) any . each-any)))) (if Z3435@ls/false (apply (lambda (Z3437@lhs* Z3438@rhs* Z3439@b Z343a@b*) (if (not (Z2eb3@valid-bound-ids? Z3437@lhs*)) (Z306c@invalid-fmls-error Z342b@e Z3437@lhs*) (let ((Z343f@lab* (map Z3432@lookup Z3437@lhs*)) (Z3440@rhs* (map (lambda (Z3443@x) (Z2ee3@make-eval-transformer (Z310c@expand-transformer Z3443@x Z342d@mr))) Z3438@rhs*))) (Z30ea@chi-internal (cons Z3439@b Z343a@b*) (append (map cons Z343f@lab* Z3440@rhs*) Z342c@r) (append (map cons Z343f@lab* Z3440@rhs*) Z342d@mr))))) Z3435@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3433@t))))))) (set! Z4b8c@Z304e@fluid-let-syntax-transformer Z304e@fluid-let-syntax-transformer) (set! Z3050@type-descriptor-transformer (lambda (Z3447@e Z3448@r Z3449@mr) (let ((Z344d@t Z3447@e)) (let ((Z344f@ls/false (Z30b2@syntax-dispatch Z344d@t '(_ any)))) (if (and Z344f@ls/false (apply (lambda (Z3451@id) (Z2eab@id? Z3451@id)) Z344f@ls/false)) (apply (lambda (Z3453@id) (let ((Z3455@lab (Z2ec1@id->label Z3453@id))) (let ((Z3457@b (Z2ec3@label->binding Z3455@lab Z3448@r))) (let ((Z3459@type (Z2ec7@binding-type Z3457@b))) (begin (if (not Z3455@lab) (Z2ecb@raise-unbound-error Z3453@id) (void)) (if (not (and (eq? Z3459@type '$rtd) (not (list? (Z2ec9@binding-value Z3457@b))))) (Z3192@syntax-violation '#f '"not a record type" Z3447@e) (void)) (list 'quote (Z2ec9@binding-value Z3457@b))))))) Z344f@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z344d@t)))))) (set! Z4b8d@Z3050@type-descriptor-transformer Z3050@type-descriptor-transformer) (set! Z3052@record-type-descriptor-transformer (lambda (Z345b@e Z345c@r Z345d@mr) (let ((Z3461@t Z345b@e)) (let ((Z3463@ls/false (Z30b2@syntax-dispatch Z3461@t '(_ any)))) (if (and Z3463@ls/false (apply (lambda (Z3465@id) (Z2eab@id? Z3465@id)) Z3463@ls/false)) (apply (lambda (Z3467@id) (let ((Z3469@lab (Z2ec1@id->label Z3467@id))) (let ((Z346b@b (Z2ec3@label->binding Z3469@lab Z345c@r))) (let ((Z346d@type (Z2ec7@binding-type Z346b@b))) (begin (if (not Z3469@lab) (Z2ecb@raise-unbound-error Z3467@id) (void)) (if (not (and (eq? Z346d@type '$rtd) (list? (Z2ec9@binding-value Z346b@b)))) (Z3192@syntax-violation '#f '"not a record type" Z345b@e) (void)) (Z30d4@chi-expr (car (Z2ec9@binding-value Z346b@b)) Z345c@r Z345d@mr)))))) Z3463@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3461@t)))))) (set! Z4b8e@Z3052@record-type-descriptor-transformer Z3052@record-type-descriptor-transformer) (set! Z3054@record-constructor-descriptor-transformer (lambda (Z346f@e Z3470@r Z3471@mr) (let ((Z3475@t Z346f@e)) (let ((Z3477@ls/false (Z30b2@syntax-dispatch Z3475@t '(_ any)))) (if (and Z3477@ls/false (apply (lambda (Z3479@id) (Z2eab@id? Z3479@id)) Z3477@ls/false)) (apply (lambda (Z347b@id) (let ((Z347d@lab (Z2ec1@id->label Z347b@id))) (let ((Z347f@b (Z2ec3@label->binding Z347d@lab Z3470@r))) (let ((Z3481@type (Z2ec7@binding-type Z347f@b))) (begin (if (not Z347d@lab) (Z2ecb@raise-unbound-error Z347b@id) (void)) (if (not (and (eq? Z3481@type '$rtd) (list? (Z2ec9@binding-value Z347f@b)))) (Z3192@syntax-violation '#f '"invalid type" Z346f@e) (void)) (Z30d4@chi-expr (cadr (Z2ec9@binding-value Z347f@b)) Z3470@r Z3471@mr)))))) Z3477@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3475@t)))))) (set! Z4b8f@Z3054@record-constructor-descriptor-transformer Z3054@record-constructor-descriptor-transformer) (set! Z3056@when-macro (lambda (Z3483@e) (let ((Z3485@t Z3483@e)) (let ((Z3487@ls/false (Z30b2@syntax-dispatch Z3485@t '(_ any any . each-any)))) (if Z3487@ls/false (apply (lambda (Z3489@test Z348a@e Z348b@e*) (Z3068@bless (list 'if Z3489@test (cons 'begin (cons Z348a@e Z348b@e*))))) Z3487@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3485@t)))))) (set! Z4b90@Z3056@when-macro Z3056@when-macro) (set! Z3058@unless-macro (lambda (Z348f@e) (let ((Z3491@t Z348f@e)) (let ((Z3493@ls/false (Z30b2@syntax-dispatch Z3491@t '(_ any any . each-any)))) (if Z3493@ls/false (apply (lambda (Z3495@test Z3496@e Z3497@e*) (Z3068@bless (list 'if (list 'not Z3495@test) (cons 'begin (cons Z3496@e Z3497@e*))))) Z3493@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3491@t)))))) (set! Z4b91@Z3058@unless-macro Z3058@unless-macro) (set! Z305a@if-transformer (lambda (Z349b@e Z349c@r Z349d@mr) (let ((Z34a1@t Z349b@e)) (let ((Z34a3@ls/false (Z30b2@syntax-dispatch Z34a1@t '(_ any any any)))) (if Z34a3@ls/false (apply (lambda (Z34a5@e0 Z34a6@e1 Z34a7@e2) (list 'if (Z30d4@chi-expr Z34a5@e0 Z349c@r Z349d@mr) (Z30d4@chi-expr Z34a6@e1 Z349c@r Z349d@mr) (Z30d4@chi-expr Z34a7@e2 Z349c@r Z349d@mr))) Z34a3@ls/false) (let ((Z34ab@t Z34a1@t)) (let ((Z34ad@ls/false (Z30b2@syntax-dispatch Z34ab@t '(_ any any)))) (if Z34ad@ls/false (apply (lambda (Z34af@e0 Z34b0@e1) (list 'if (Z30d4@chi-expr Z34af@e0 Z349c@r Z349d@mr) (Z30d4@chi-expr Z34b0@e1 Z349c@r Z349d@mr) (Z2e11@Z2d72@build-void))) Z34ad@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z34ab@t))))))))) (set! Z4b92@Z305a@if-transformer Z305a@if-transformer) (set! Z305c@and-transformer (lambda (Z34b3@e Z34b4@r Z34b5@mr) (let ((Z34b9@t Z34b3@e)) (let ((Z34bb@ls/false (Z30b2@syntax-dispatch Z34b9@t '(_ . each-any)))) (if Z34bb@ls/false (apply (lambda (Z34bd@e*) (cons 'and (Z30d0@chi-expr* Z34bd@e* Z34b4@r Z34b5@mr))) Z34bb@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z34b9@t)))))) (set! Z4b93@Z305c@and-transformer Z305c@and-transformer) (set! Z305e@or-transformer (lambda (Z34bf@e Z34c0@r Z34c1@mr) (let ((Z34c5@t Z34bf@e)) (let ((Z34c7@ls/false (Z30b2@syntax-dispatch Z34c5@t '(_ . each-any)))) (if Z34c7@ls/false (apply (lambda (Z34c9@e*) (cons 'or (Z30d0@chi-expr* Z34c9@e* Z34c0@r Z34c1@mr))) Z34c7@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z34c5@t)))))) (set! Z4b94@Z305e@or-transformer Z305e@or-transformer) (set! Z3060@case-macro (lambda (Z34cb@e) (letrec* ((Z34ce@build-last (lambda (Z34f5@cls) (let ((Z34f7@t Z34f5@cls)) (let ((Z34f9@ls/false (Z30b2@syntax-dispatch Z34f7@t '(#(scheme-id else) any . each-any)))) (if Z34f9@ls/false (apply (lambda (Z34fb@e Z34fc@e*) (cons 'begin (cons Z34fb@e Z34fc@e*))) Z34f9@ls/false) (let ((Z34ff@t Z34f7@t)) (let ((Z3501@ls/false (Z30b2@syntax-dispatch Z34ff@t '_))) (if Z3501@ls/false (apply (lambda () (Z34d0@build-one Z34f5@cls '(if #f #f))) Z3501@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z34ff@t))))))))) (Z34d0@build-one (lambda (Z34e7@cls Z34e8@k) (let ((Z34eb@t Z34e7@cls)) (let ((Z34ed@ls/false (Z30b2@syntax-dispatch Z34eb@t '(each-any any . each-any)))) (if Z34ed@ls/false (apply (lambda (Z34ef@d* Z34f0@e Z34f1@e*) (list 'if (list 'memv 't (list 'quote Z34ef@d*)) (cons 'begin (cons Z34f0@e Z34f1@e*)) Z34e8@k)) Z34ed@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z34eb@t))))))) (let ((Z34d1@t Z34cb@e)) (let ((Z34d3@ls/false (Z30b2@syntax-dispatch Z34d1@t '(_ any)))) (if Z34d3@ls/false (apply (lambda (Z34d5@expr) (Z3068@bless (cons 'let (cons (list (list 't Z34d5@expr)) '((if #f #f)))))) Z34d3@ls/false) (let ((Z34d7@t Z34d1@t)) (let ((Z34d9@ls/false (Z30b2@syntax-dispatch Z34d7@t '(_ any any . each-any)))) (if Z34d9@ls/false (apply (lambda (Z34db@expr Z34dc@cls Z34dd@cls*) (Z3068@bless (list 'let (list (list 't Z34db@expr)) (let Z34e5@f ((Z34e1@cls Z34dc@cls) (Z34e2@cls* Z34dd@cls*)) (if (null? Z34e2@cls*) (Z34ce@build-last Z34e1@cls) (Z34d0@build-one Z34e1@cls (Z34e5@f (car Z34e2@cls*) (cdr Z34e2@cls*)))))))) Z34d9@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z34d7@t)))))))))) (set! Z4b95@Z3060@case-macro Z3060@case-macro) (set! Z3062@quote-transformer (lambda (Z3503@e Z3504@r Z3505@mr) (let ((Z3509@t Z3503@e)) (let ((Z350b@ls/false (Z30b2@syntax-dispatch Z3509@t '(_ any)))) (if Z350b@ls/false (apply (lambda (Z350d@datum) (list 'quote (Z2ebf@stx->datum Z350d@datum))) Z350b@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3509@t)))))) (set! Z4b96@Z3062@quote-transformer Z3062@quote-transformer) (set! Z3064@case-lambda-transformer (lambda (Z350f@e Z3510@r Z3511@mr) (let ((Z3515@t Z350f@e)) (let ((Z3517@ls/false (Z30b2@syntax-dispatch Z3515@t '(_ . #(each (any any . each-any)))))) (if Z3517@ls/false (apply (lambda (Z3519@fmls* Z351a@b* Z351b@b**) (call-with-values (lambda () (Z30dc@chi-lambda-clause* Z350f@e Z3519@fmls* (map cons Z351a@b* Z351b@b**) Z3510@r Z3511@mr)) (lambda (Z3523@Z3520 Z3524@Z3522) (let ((Z3527@body* Z3524@Z3522) (Z3528@fmls* Z3523@Z3520)) (Z2e0f@Z2d42@build-case-lambda '#f Z3528@fmls* Z3527@body*))))) Z3517@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3515@t)))))) (set! Z4b97@Z3064@case-lambda-transformer Z3064@case-lambda-transformer) (set! Z3066@lambda-transformer (lambda (Z352b@e Z352c@r Z352d@mr) (let ((Z3531@t Z352b@e)) (let ((Z3533@ls/false (Z30b2@syntax-dispatch Z3531@t '(_ any any . each-any)))) (if Z3533@ls/false (apply (lambda (Z3535@fmls Z3536@b Z3537@b*) (call-with-values (lambda () (Z30da@chi-lambda-clause Z352b@e Z3535@fmls (cons Z3536@b Z3537@b*) Z352c@r Z352d@mr)) (lambda (Z353f@Z353c Z3540@Z353e) (let ((Z3543@body Z3540@Z353e) (Z3544@fmls Z353f@Z353c)) (Z2e0e@Z2d40@build-lambda '#f Z3544@fmls Z3543@body))))) Z3533@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3531@t)))))) (set! Z4b98@Z3066@lambda-transformer Z3066@lambda-transformer) (set! Z3068@bless (lambda (Z3547@x) (Z2e93@mkstx (let Z354b@f ((Z3549@x Z3547@x)) (if (Z2e77@stx? Z3549@x) Z3549@x (if (pair? Z3549@x) (cons (Z354b@f (car Z3549@x)) (Z354b@f (cdr Z3549@x))) (if (symbol? Z3549@x) (Z303a@scheme-stx Z3549@x) (if (vector? Z3549@x) (vector-map Z354b@f Z3549@x) Z3549@x))))) '() '() '()))) (set! Z4b99@Z3068@bless Z3068@bless) (set! Z306a@with-syntax-macro (lambda (Z354d@e) (let ((Z354f@t Z354d@e)) (let ((Z3551@ls/false (Z30b2@syntax-dispatch Z354f@t '(_ #(each (any any)) any . each-any)))) (if Z3551@ls/false (apply (lambda (Z3553@pat* Z3554@expr* Z3555@b Z3556@b*) (let ((Z355b@idn* (let Z355f@f ((Z355d@pat* Z3553@pat*)) (if (null? Z355d@pat*) '() (call-with-values (lambda () (Z30b0@convert-pattern (car Z355d@pat*) '())) (lambda (Z3565@Z3562 Z3566@Z3564) (let ((Z3569@idn* Z3566@Z3564) (Z356a@pat Z3565@Z3562)) (append Z3569@idn* (Z355f@f (cdr Z355d@pat*)))))))))) (begin (Z30d8@verify-formals (map car Z355b@idn*) Z354d@e) (let ((Z356d@t* (Z3180@generate-temporaries Z3554@expr*))) (Z3068@bless (list 'let (map list Z356d@t* Z3554@expr*) (let Z3573@f ((Z356f@pat* Z3553@pat*) (Z3570@t* Z356d@t*)) (if (null? Z356f@pat*) (cons 'let (cons '() (cons Z3555@b Z3556@b*))) (list 'syntax-case (car Z3570@t*) '() (list (car Z356f@pat*) (Z3573@f (cdr Z356f@pat*) (cdr Z3570@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car Z356f@pat*)) (car Z3570@t*)))))))))))) Z3551@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z354f@t)))))) (set! Z4b9a@Z306a@with-syntax-macro Z306a@with-syntax-macro) (set! Z306c@invalid-fmls-error (lambda (Z3575@stx Z3576@fmls) (let ((Z3579@t Z3576@fmls)) (let ((Z357b@ls/false (Z30b2@syntax-dispatch Z3579@t '#(each+ any () any)))) (if Z357b@ls/false (apply (lambda (Z357d@id* Z357e@last) (let Z3583@f ((Z3581@id* (if (Z2eab@id? Z357e@last) (cons Z357e@last Z357d@id*) (if (Z2ea1@syntax-null? Z357e@last) Z357d@id* (Z3192@syntax-violation '#f '"not an identifier" Z3575@stx Z357e@last))))) (if (null? Z3581@id*) (values) (if (not (Z2eab@id? (car Z3581@id*))) (Z3192@syntax-violation '#f '"not an identifier" Z3575@stx (car Z3581@id*)) (begin (Z3583@f (cdr Z3581@id*)) (if (Z2eb7@bound-id-member? (car Z3581@id*) (cdr Z3581@id*)) (Z3192@syntax-violation '#f '"duplicate binding" Z3575@stx (car Z3581@id*)) (void))))))) Z357b@ls/false) (let ((Z3585@t Z3579@t)) (let ((Z3587@ls/false (Z30b2@syntax-dispatch Z3585@t '_))) (if Z3587@ls/false (apply (lambda () (Z3192@syntax-violation '#f '"malformed binding form" Z3575@stx Z3576@fmls)) Z3587@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3585@t))))))))) (set! Z4b9b@Z306c@invalid-fmls-error Z306c@invalid-fmls-error) (set! Z306e@let-macro (lambda (Z3589@stx) (let ((Z358b@t Z3589@stx)) (let ((Z358d@ls/false (Z30b2@syntax-dispatch Z358b@t '(_ #(each (any any)) any . each-any)))) (if Z358d@ls/false (apply (lambda (Z358f@lhs* Z3590@rhs* Z3591@b Z3592@b*) (if (Z2eb3@valid-bound-ids? Z358f@lhs*) (Z3068@bless (cons (cons 'lambda (cons Z358f@lhs* (cons Z3591@b Z3592@b*))) Z3590@rhs*)) (Z306c@invalid-fmls-error Z3589@stx Z358f@lhs*))) Z358d@ls/false) (let ((Z3597@t Z358b@t)) (let ((Z3599@ls/false (Z30b2@syntax-dispatch Z3597@t '(_ any #(each (any any)) any . each-any)))) (if (and Z3599@ls/false (apply (lambda (Z359b@f Z359c@lhs* Z359d@rhs* Z359e@b Z359f@b*) (Z2eab@id? Z359b@f)) Z3599@ls/false)) (apply (lambda (Z35a5@f Z35a6@lhs* Z35a7@rhs* Z35a8@b Z35a9@b*) (if (Z2eb3@valid-bound-ids? Z35a6@lhs*) (Z3068@bless (cons (list 'letrec (list (list Z35a5@f (cons 'lambda (cons Z35a6@lhs* (cons Z35a8@b Z35a9@b*))))) Z35a5@f) Z35a7@rhs*)) (Z306c@invalid-fmls-error Z3589@stx Z35a6@lhs*))) Z3599@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3597@t))))))))) (set! Z4b9c@Z306e@let-macro Z306e@let-macro) (set! Z3070@let-values-macro (lambda (Z35af@stx) (letrec* ((Z35b2@rename (lambda (Z3617@x Z3618@old* Z3619@new*) (begin (if (not (Z2eab@id? Z3617@x)) (Z3192@syntax-violation '#f '"not an indentifier" Z35af@stx Z3617@x) (void)) (if (Z2eb7@bound-id-member? Z3617@x Z3618@old*) (Z3192@syntax-violation '#f '"duplicate binding" Z35af@stx Z3617@x) (void)) (let ((Z361d@y (gensym (Z3198@syntax->datum Z3617@x)))) (values Z361d@y (cons Z3617@x Z3618@old*) (cons Z361d@y Z3619@new*)))))) (Z35b4@rename* (lambda (Z3605@x* Z3606@old* Z3607@new*) (if (null? Z3605@x*) (values '() Z3606@old* Z3607@new*) (call-with-values (lambda () (Z35b2@rename (car Z3605@x*) Z3606@old* Z3607@new*)) (lambda (Z360b@x Z360c@old* Z360d@new*) (call-with-values (lambda () (Z35b4@rename* (cdr Z3605@x*) Z360c@old* Z360d@new*)) (lambda (Z3611@x* Z3612@old* Z3613@new*) (values (cons Z360b@x Z3611@x*) Z3612@old* Z3613@new*))))))))) (let ((Z35b5@t Z35af@stx)) (let ((Z35b7@ls/false (Z30b2@syntax-dispatch Z35b5@t '(_ () any . each-any)))) (if Z35b7@ls/false (apply (lambda (Z35b9@b Z35ba@b*) (cons* (Z3068@bless 'let) '() Z35b9@b Z35ba@b*)) Z35b7@ls/false) (let ((Z35bd@t Z35b5@t)) (let ((Z35bf@ls/false (Z30b2@syntax-dispatch Z35bd@t '(_ #(each (any any)) any . each-any)))) (if Z35bf@ls/false (apply (lambda (Z35c1@lhs* Z35c2@rhs* Z35c3@b Z35c4@b*) (Z3068@bless (let Z35d1@f ((Z35c9@lhs* Z35c1@lhs*) (Z35ca@rhs* Z35c2@rhs*) (Z35cb@old* '()) (Z35cc@new* '())) (if (null? Z35c9@lhs*) (cons 'let (cons (map list Z35cb@old* Z35cc@new*) (cons Z35c3@b Z35c4@b*))) (let ((Z35d3@t (car Z35c9@lhs*))) (let ((Z35d5@ls/false (Z30b2@syntax-dispatch Z35d3@t 'each-any))) (if Z35d5@ls/false (apply (lambda (Z35d7@x*) (call-with-values (lambda () (Z35b4@rename* Z35d7@x* Z35cb@old* Z35cc@new*)) (lambda (Z35df@Z35da Z35e0@Z35dc Z35e1@Z35de) (let ((Z35e5@new* Z35e1@Z35de) (Z35e6@old* Z35e0@Z35dc) (Z35e7@y* Z35df@Z35da)) (list 'call-with-values (list 'lambda '() (car Z35ca@rhs*)) (list 'lambda Z35e7@y* (Z35d1@f (cdr Z35c9@lhs*) (cdr Z35ca@rhs*) Z35e6@old* Z35e5@new*))))))) Z35d5@ls/false) (let ((Z35eb@t Z35d3@t)) (let ((Z35ed@ls/false (Z30b2@syntax-dispatch Z35eb@t '#(each+ any () any)))) (if Z35ed@ls/false (apply (lambda (Z35ef@x* Z35f0@x) (call-with-values (lambda () (Z35b2@rename Z35f0@x Z35cb@old* Z35cc@new*)) (lambda (Z35f3@y Z35f4@old* Z35f5@new*) (call-with-values (lambda () (Z35b4@rename* Z35ef@x* Z35f4@old* Z35f5@new*)) (lambda (Z35f9@y* Z35fa@old* Z35fb@new*) (list 'call-with-values (list 'lambda '() (car Z35ca@rhs*)) (list 'lambda (append Z35f9@y* Z35f3@y) (Z35d1@f (cdr Z35c9@lhs*) (cdr Z35ca@rhs*) Z35fa@old* Z35fb@new*)))))))) Z35ed@ls/false) (let ((Z35ff@t Z35eb@t)) (let ((Z3601@ls/false (Z30b2@syntax-dispatch Z35ff@t 'any))) (if Z3601@ls/false (apply (lambda (Z3603@others) (Z3192@syntax-violation '#f '"malformed bindings" Z35af@stx Z3603@others)) Z3601@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z35ff@t)))))))))))))) Z35bf@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z35bd@t)))))))))) (set! Z4b9d@Z3070@let-values-macro Z3070@let-values-macro) (set! Z3072@let*-values-macro (lambda (Z361f@stx) (letrec* ((Z3622@check (lambda (Z3651@x*) (if (not (null? Z3651@x*)) (let ((Z3653@x (car Z3651@x*))) (begin (if (not (Z2eab@id? Z3653@x)) (Z3192@syntax-violation '#f '"not an identifier" Z361f@stx Z3653@x) (void)) (Z3622@check (cdr Z3651@x*)) (if (Z2eb7@bound-id-member? Z3653@x (cdr Z3651@x*)) (Z3192@syntax-violation '#f '"duplicate identifier" Z361f@stx Z3653@x) (void)))) (void))))) (let ((Z3623@t Z361f@stx)) (let ((Z3625@ls/false (Z30b2@syntax-dispatch Z3623@t '(_ () any . each-any)))) (if Z3625@ls/false (apply (lambda (Z3627@b Z3628@b*) (cons* (Z3068@bless 'let) '() Z3627@b Z3628@b*)) Z3625@ls/false) (let ((Z362b@t Z3623@t)) (let ((Z362d@ls/false (Z30b2@syntax-dispatch Z362b@t '(_ #(each (any any)) any . each-any)))) (if Z362d@ls/false (apply (lambda (Z362f@lhs* Z3630@rhs* Z3631@b Z3632@b*) (Z3068@bless (let Z363b@f ((Z3637@lhs* Z362f@lhs*) (Z3638@rhs* Z3630@rhs*)) (if (null? Z3637@lhs*) (cons 'begin (cons Z3631@b Z3632@b*)) (let ((Z363d@t (car Z3637@lhs*))) (let ((Z363f@ls/false (Z30b2@syntax-dispatch Z363d@t 'each-any))) (if Z363f@ls/false (apply (lambda (Z3641@x*) (begin (Z3622@check Z3641@x*) (list 'call-with-values (list 'lambda '() (car Z3638@rhs*)) (list 'lambda Z3641@x* (Z363b@f (cdr Z3637@lhs*) (cdr Z3638@rhs*)))))) Z363f@ls/false) (let ((Z3643@t Z363d@t)) (let ((Z3645@ls/false (Z30b2@syntax-dispatch Z3643@t '#(each+ any () any)))) (if Z3645@ls/false (apply (lambda (Z3647@x* Z3648@x) (begin (Z3622@check (cons Z3648@x Z3647@x*)) (list 'call-with-values (list 'lambda '() (car Z3638@rhs*)) (list 'lambda (append Z3647@x* Z3648@x) (Z363b@f (cdr Z3637@lhs*) (cdr Z3638@rhs*)))))) Z3645@ls/false) (let ((Z364b@t Z3643@t)) (let ((Z364d@ls/false (Z30b2@syntax-dispatch Z364b@t 'any))) (if Z364d@ls/false (apply (lambda (Z364f@others) (Z3192@syntax-violation '#f '"malformed bindings" Z361f@stx Z364f@others)) Z364d@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z364b@t)))))))))))))) Z362d@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z362b@t)))))))))) (set! Z4b9e@Z3072@let*-values-macro Z3072@let*-values-macro) (set! Z3074@trace-lambda-macro (lambda (Z3655@stx) (let ((Z3657@t Z3655@stx)) (let ((Z3659@ls/false (Z30b2@syntax-dispatch Z3657@t '(_ any each-any any . each-any)))) (if Z3659@ls/false (apply (lambda (Z365b@who Z365c@fmls Z365d@b Z365e@b*) (if (Z2eb3@valid-bound-ids? Z365c@fmls) (Z3068@bless (list 'make-traced-procedure (list 'quote Z365b@who) (cons 'lambda (cons Z365c@fmls (cons Z365d@b Z365e@b*))))) (Z306c@invalid-fmls-error Z3655@stx Z365c@fmls))) Z3659@ls/false) (let ((Z3663@t Z3657@t)) (let ((Z3665@ls/false (Z30b2@syntax-dispatch Z3663@t '(_ any #(each+ any () any) any . each-any)))) (if Z3665@ls/false (apply (lambda (Z3667@who Z3668@fmls Z3669@last Z366a@b Z366b@b*) (if (Z2eb3@valid-bound-ids? (cons Z3669@last Z3668@fmls)) (Z3068@bless (list 'make-traced-procedure (list 'quote Z3667@who) (cons 'lambda (cons (append Z3668@fmls Z3669@last) (cons Z366a@b Z366b@b*))))) (Z306c@invalid-fmls-error Z3655@stx (append Z3668@fmls Z3669@last)))) Z3665@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3663@t))))))))) (set! Z4b9f@Z3074@trace-lambda-macro Z3074@trace-lambda-macro) (set! Z3076@trace-define-macro (lambda (Z3671@stx) (let ((Z3673@t Z3671@stx)) (let ((Z3675@ls/false (Z30b2@syntax-dispatch Z3673@t '(_ (any . each-any) any . each-any)))) (if Z3675@ls/false (apply (lambda (Z3677@who Z3678@fmls Z3679@b Z367a@b*) (if (Z2eb3@valid-bound-ids? Z3678@fmls) (Z3068@bless (list 'define Z3677@who (list 'make-traced-procedure (list 'quote Z3677@who) (cons 'lambda (cons Z3678@fmls (cons Z3679@b Z367a@b*)))))) (Z306c@invalid-fmls-error Z3671@stx Z3678@fmls))) Z3675@ls/false) (let ((Z367f@t Z3673@t)) (let ((Z3681@ls/false (Z30b2@syntax-dispatch Z367f@t '(_ (any . #(each+ any () any)) any . each-any)))) (if Z3681@ls/false (apply (lambda (Z3683@who Z3684@fmls Z3685@last Z3686@b Z3687@b*) (if (Z2eb3@valid-bound-ids? (cons Z3685@last Z3684@fmls)) (Z3068@bless (list 'define Z3683@who (list 'make-traced-procedure (list 'quote Z3683@who) (cons 'lambda (cons (append Z3684@fmls Z3685@last) (cons Z3686@b Z3687@b*)))))) (Z306c@invalid-fmls-error Z3671@stx (append Z3684@fmls Z3685@last)))) Z3681@ls/false) (let ((Z368d@t Z367f@t)) (let ((Z368f@ls/false (Z30b2@syntax-dispatch Z368d@t '(_ any any)))) (if Z368f@ls/false (apply (lambda (Z3691@who Z3692@expr) (if (Z2eab@id? Z3691@who) (Z3068@bless (list 'define Z3691@who (list 'let (list (list 'v Z3692@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote Z3691@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (Z3192@syntax-violation '#f '"invalid name" Z3671@stx))) Z368f@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z368d@t)))))))))))) (set! Z4ba0@Z3076@trace-define-macro Z3076@trace-define-macro) (set! Z3078@trace-define-syntax-macro (lambda (Z3695@stx) (let ((Z3697@t Z3695@stx)) (let ((Z3699@ls/false (Z30b2@syntax-dispatch Z3697@t '(_ any any)))) (if Z3699@ls/false (apply (lambda (Z369b@who Z369c@expr) (if (Z2eab@id? Z369b@who) (Z3068@bless (list 'define-syntax Z369b@who (list 'make-traced-macro (list 'quote Z369b@who) Z369c@expr))) (Z3192@syntax-violation '#f '"invalid name" Z3695@stx))) Z3699@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3697@t)))))) (set! Z4ba1@Z3078@trace-define-syntax-macro Z3078@trace-define-syntax-macro) (set! Z307a@trace-let/rec-syntax (lambda (Z369f@who) (lambda (Z36a1@stx) (let ((Z36a3@t Z36a1@stx)) (let ((Z36a5@ls/false (Z30b2@syntax-dispatch Z36a3@t '(_ #(each (any any)) any . each-any)))) (if Z36a5@ls/false (apply (lambda (Z36a7@lhs* Z36a8@rhs* Z36a9@b Z36aa@b*) (if (Z2eb3@valid-bound-ids? Z36a7@lhs*) (let ((Z36af@rhs* (map (lambda (Z36b1@lhs Z36b2@rhs) (list 'make-traced-macro (list 'quote Z36b1@lhs) Z36b2@rhs)) Z36a7@lhs* Z36a8@rhs*))) (Z3068@bless (cons Z369f@who (cons (map list Z36a7@lhs* Z36af@rhs*) (cons Z36a9@b Z36aa@b*))))) (Z306c@invalid-fmls-error Z36a1@stx Z36a7@lhs*))) Z36a5@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z36a3@t))))))) (set! Z4ba2@Z307a@trace-let/rec-syntax Z307a@trace-let/rec-syntax) (set! Z307c@trace-let-syntax-macro (Z307a@trace-let/rec-syntax 'let-syntax)) (set! Z4ba3@Z307c@trace-let-syntax-macro Z307c@trace-let-syntax-macro) (set! Z307e@trace-letrec-syntax-macro (Z307a@trace-let/rec-syntax 'letrec-syntax)) (set! Z4ba4@Z307e@trace-letrec-syntax-macro Z307e@trace-letrec-syntax-macro) (set! Z3080@guard-macro (lambda (Z36b5@x) (letrec* ((Z36b8@gen-clauses (lambda (Z36cf@con Z36d0@outerk Z36d1@clause*) (letrec* ((Z36d6@f (lambda (Z370f@x Z3710@k) (let ((Z3713@t Z370f@x)) (let ((Z3715@ls/false (Z30b2@syntax-dispatch Z3713@t '(any #(scheme-id =>) any)))) (if Z3715@ls/false (apply (lambda (Z3717@e Z3718@p) (let ((Z371b@t (gensym))) (list 'let (list (list Z371b@t Z3717@e)) (list 'if Z371b@t (list Z3718@p Z371b@t) Z3710@k)))) Z3715@ls/false) (let ((Z371d@t Z3713@t)) (let ((Z371f@ls/false (Z30b2@syntax-dispatch Z371d@t '(any)))) (if Z371f@ls/false (apply (lambda (Z3721@e) (let ((Z3723@t (gensym))) (list 'let (list (list Z3723@t Z3721@e)) (list 'if Z3723@t Z3723@t Z3710@k)))) Z371f@ls/false) (let ((Z3725@t Z371d@t)) (let ((Z3727@ls/false (Z30b2@syntax-dispatch Z3725@t '(any any . each-any)))) (if Z3727@ls/false (apply (lambda (Z3729@e Z372a@v Z372b@v*) (list 'if Z3729@e (cons 'begin (cons Z372a@v Z372b@v*)) Z3710@k)) Z3727@ls/false) (let ((Z372f@t Z3725@t)) (let ((Z3731@ls/false (Z30b2@syntax-dispatch Z372f@t '_))) (if Z3731@ls/false (apply (lambda () (Z3192@syntax-violation '#f '"invalid guard clause" Z370f@x)) Z3731@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z372f@t))))))))))))))) (Z36d8@f* (lambda (Z36e5@x*) (let ((Z36e7@t Z36e5@x*)) (let ((Z36e9@ls/false (Z30b2@syntax-dispatch Z36e7@t '()))) (if Z36e9@ls/false (apply (lambda () (let ((Z36eb@g (gensym))) (values (list Z36eb@g (list 'lambda '() (list 'raise-continuable Z36cf@con))) Z36eb@g))) Z36e9@ls/false) (let ((Z36ed@t Z36e7@t)) (let ((Z36ef@ls/false (Z30b2@syntax-dispatch Z36ed@t '((#(scheme-id else) any . each-any))))) (if Z36ef@ls/false (apply (lambda (Z36f1@e Z36f2@e*) (values (cons 'begin (cons Z36f1@e Z36f2@e*)) '#f)) Z36ef@ls/false) (let ((Z36f5@t Z36ed@t)) (let ((Z36f7@ls/false (Z30b2@syntax-dispatch Z36f5@t '(any . any)))) (if Z36f7@ls/false (apply (lambda (Z36f9@cls Z36fa@cls*) (call-with-values (lambda () (Z36d8@f* Z36fa@cls*)) (lambda (Z3701@Z36fe Z3702@Z3700) (let ((Z3705@g Z3702@Z3700) (Z3706@e Z3701@Z36fe)) (values (Z36d6@f Z36f9@cls Z3706@e) Z3705@g))))) Z36f7@ls/false) (let ((Z3709@t Z36f5@t)) (let ((Z370b@ls/false (Z30b2@syntax-dispatch Z3709@t 'any))) (if Z370b@ls/false (apply (lambda (Z370d@others) (Z3192@syntax-violation '#f '"invalid guard clause" Z370d@others)) Z370b@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3709@t)))))))))))))))) (call-with-values (lambda () (Z36d8@f* Z36d1@clause*)) (lambda (Z36dd@Z36da Z36de@Z36dc) (let ((Z36e1@raisek Z36de@Z36dc) (Z36e2@code Z36dd@Z36da)) (if Z36e1@raisek (list (list 'call/cc (list 'lambda (list Z36e1@raisek) (list Z36d0@outerk (list 'lambda '() Z36e2@code))))) (list Z36d0@outerk (list 'lambda '() Z36e2@code)))))))))) (let ((Z36b9@t Z36b5@x)) (let ((Z36bb@ls/false (Z30b2@syntax-dispatch Z36b9@t '(_ (any . each-any) any . each-any)))) (if (and Z36bb@ls/false (apply (lambda (Z36bd@con Z36be@clause* Z36bf@b Z36c0@b*) (Z2eab@id? Z36bd@con)) Z36bb@ls/false)) (apply (lambda (Z36c5@con Z36c6@clause* Z36c7@b Z36c8@b*) (let ((Z36cd@outerk (gensym))) (Z3068@bless (list (list 'call/cc (list 'lambda (list Z36cd@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list Z36c5@con) (Z36b8@gen-clauses Z36c5@con Z36cd@outerk Z36c6@clause*)) (cons 'lambda (cons '() (cons Z36c7@b Z36c8@b*))))))))))) Z36bb@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z36b9@t))))))) (set! Z4ba5@Z3080@guard-macro Z3080@guard-macro) (set! Z3082@define-enumeration-macro (lambda (Z3733@stx) (letrec* ((Z3736@set? (lambda (Z374f@x) (or (null? Z374f@x) (and (not (memq (car Z374f@x) (cdr Z374f@x))) (Z3736@set? (cdr Z374f@x)))))) (Z3738@remove-dups (lambda (Z374d@ls) (if (null? Z374d@ls) '() (cons (car Z374d@ls) (Z3738@remove-dups (remq (car Z374d@ls) (cdr Z374d@ls)))))))) (let ((Z3739@t Z3733@stx)) (let ((Z373b@ls/false (Z30b2@syntax-dispatch Z3739@t '(_ any each-any any)))) (if (and Z373b@ls/false (apply (lambda (Z373d@name Z373e@id* Z373f@maker) (and (Z2eab@id? Z373d@name) (Z2eab@id? Z373f@maker) (for-all Z2eab@id? Z373e@id*))) Z373b@ls/false)) (apply (lambda (Z3743@name Z3744@id* Z3745@maker) (let ((Z3749@name* (Z3738@remove-dups (Z3198@syntax->datum Z3744@id*))) (Z374a@mk (gensym))) (Z3068@bless (list 'begin (list 'define Z374a@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote Z3749@name*)))) (list 'define-syntax Z3743@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote Z3749@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote Z3743@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax Z3745@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote Z3745@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote Z3749@name*)) (cons 'syntax-violation (cons (list 'quote Z3745@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons Z374a@mk '('(n* ...))))))))))))) Z373b@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3739@t))))))) (set! Z4ba6@Z3082@define-enumeration-macro Z3082@define-enumeration-macro) (set! Z3084@time-macro (lambda (Z3751@stx) (let ((Z3753@t Z3751@stx)) (let ((Z3755@ls/false (Z30b2@syntax-dispatch Z3753@t '(_ any)))) (if Z3755@ls/false (apply (lambda (Z3757@expr) (Z3068@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() Z3757@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) Z3755@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3753@t)))))) (set! Z4ba7@Z3084@time-macro Z3084@time-macro) (set! Z3086@delay-macro (lambda (Z3759@stx) (let ((Z375b@t Z3759@stx)) (let ((Z375d@ls/false (Z30b2@syntax-dispatch Z375b@t '(_ any)))) (if Z375d@ls/false (apply (lambda (Z375f@expr) (Z3068@bless (list 'make-promise (list 'lambda '() Z375f@expr)))) Z375d@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z375b@t)))))) (set! Z4ba8@Z3086@delay-macro Z3086@delay-macro) (set! Z3088@assert-macro (lambda (Z3761@stx) (let ((Z3763@t Z3761@stx)) (let ((Z3765@ls/false (Z30b2@syntax-dispatch Z3763@t '(_ any)))) (if Z3765@ls/false (apply (lambda (Z3767@expr) (let ((Z3769@pos (or (Z318a@expression-position Z3761@stx) (Z318a@expression-position Z3767@expr)))) (Z3068@bless (list 'let (list (list 'x Z3767@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote Z3767@expr) (list 'quote Z3769@pos))))))) Z3765@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3763@t)))))) (set! Z4ba9@Z3088@assert-macro Z3088@assert-macro) (set! Z308a@endianness-macro (lambda (Z376b@stx) (let ((Z376d@t Z376b@stx)) (let ((Z376f@ls/false (Z30b2@syntax-dispatch Z376d@t '(_ any)))) (if Z376f@ls/false (apply (lambda (Z3771@e) (let ((Z3773@t (Z3198@syntax->datum Z3771@e))) (if (memv Z3773@t '(little)) (Z3068@bless ''little) (if (memv Z3773@t '(big)) (Z3068@bless ''big) (Z3192@syntax-violation '#f '"endianness must be big or little" Z376b@stx))))) Z376f@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z376d@t)))))) (set! Z4baa@Z308a@endianness-macro Z308a@endianness-macro) (set! Z308c@identifier-syntax-macro (lambda (Z3775@stx) (let ((Z3777@t Z3775@stx)) (let ((Z3779@ls/false (Z30b2@syntax-dispatch Z3777@t '(_ any)))) (if Z3779@ls/false (apply (lambda (Z377b@expr) (Z3068@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax Z377b@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax Z377b@expr) '((syntax (e* ...)))))))))) Z3779@ls/false) (let ((Z377d@t Z3777@t)) (let ((Z377f@ls/false (Z30b2@syntax-dispatch Z377d@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and Z377f@ls/false (apply (lambda (Z3781@id1 Z3782@expr1 Z3783@id2 Z3784@expr2 Z3785@expr3) (and (Z2eab@id? Z3781@id1) (Z2eab@id? Z3783@id2) (Z2eab@id? Z3784@expr2))) Z377f@ls/false)) (apply (lambda (Z378b@id1 Z378c@expr1 Z378d@id2 Z378e@expr2 Z378f@expr3) (Z3068@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax Z378c@expr1)) (list (list 'set! 'id Z378e@expr2) (list 'syntax Z378f@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons Z378c@expr1 '(e* ...))))))))) Z377f@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z377d@t))))))))) (set! Z4bab@Z308c@identifier-syntax-macro Z308c@identifier-syntax-macro) (set! Z308e@do-macro (lambda (Z3795@stx) (letrec* ((Z3798@bind (lambda (Z37af@x) (let ((Z37b1@t Z37af@x)) (let ((Z37b3@ls/false (Z30b2@syntax-dispatch Z37b1@t '(any any)))) (if Z37b3@ls/false (apply (lambda (Z37b5@x Z37b6@init) (list Z37b5@x Z37b6@init Z37b5@x)) Z37b3@ls/false) (let ((Z37b9@t Z37b1@t)) (let ((Z37bb@ls/false (Z30b2@syntax-dispatch Z37b9@t '(any any any)))) (if Z37bb@ls/false (apply (lambda (Z37bd@x Z37be@init Z37bf@step) (list Z37bd@x Z37be@init Z37bf@step)) Z37bb@ls/false) (let ((Z37c3@t Z37b9@t)) (let ((Z37c5@ls/false (Z30b2@syntax-dispatch Z37c3@t '_))) (if Z37c5@ls/false (apply (lambda () (Z3192@syntax-violation '#f '"invalid binding" Z3795@stx)) Z37c5@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z37c3@t))))))))))))) (let ((Z3799@t Z3795@stx)) (let ((Z379b@ls/false (Z30b2@syntax-dispatch Z3799@t '(_ each-any (any . each-any) . each-any)))) (if Z379b@ls/false (apply (lambda (Z379d@binding* Z379e@test Z379f@expr* Z37a0@command*) (let ((Z37a5@t (map Z3798@bind Z379d@binding*))) (let ((Z37a7@ls/false (Z30b2@syntax-dispatch Z37a5@t '#(each (any any any))))) (if Z37a7@ls/false (apply (lambda (Z37a9@x* Z37aa@init* Z37ab@step*) (if (Z2eb3@valid-bound-ids? Z37a9@x*) (Z3068@bless (list 'letrec (list (list 'loop (list 'lambda Z37a9@x* (list 'if Z379e@test (cons 'begin (cons '(if #f #f) Z379f@expr*)) (cons 'begin (append Z37a0@command* (list (cons 'loop Z37ab@step*)))))))) (cons 'loop Z37aa@init*))) (Z3192@syntax-violation '#f '"invalid bindings" Z3795@stx))) Z37a7@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z37a5@t))))) Z379b@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3799@t))))))) (set! Z4bac@Z308e@do-macro Z308e@do-macro) (set! Z3090@let*-macro (lambda (Z37c7@stx) (let ((Z37c9@t Z37c7@stx)) (let ((Z37cb@ls/false (Z30b2@syntax-dispatch Z37c9@t '(_ #(each (any any)) any . each-any)))) (if (and Z37cb@ls/false (apply (lambda (Z37cd@lhs* Z37ce@rhs* Z37cf@b Z37d0@b*) (for-all Z2eab@id? Z37cd@lhs*)) Z37cb@ls/false)) (apply (lambda (Z37d5@lhs* Z37d6@rhs* Z37d7@b Z37d8@b*) (Z3068@bless (let Z37df@f ((Z37dd@x* (map list Z37d5@lhs* Z37d6@rhs*))) (if (null? Z37dd@x*) (cons 'let (cons '() (cons Z37d7@b Z37d8@b*))) (list 'let (list (car Z37dd@x*)) (Z37df@f (cdr Z37dd@x*))))))) Z37cb@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z37c9@t)))))) (set! Z4bad@Z3090@let*-macro Z3090@let*-macro) (set! Z3092@or-macro (lambda (Z37e1@stx) (let ((Z37e3@t Z37e1@stx)) (let ((Z37e5@ls/false (Z30b2@syntax-dispatch Z37e3@t '(_)))) (if Z37e5@ls/false (apply (lambda () '#f) Z37e5@ls/false) (let ((Z37e7@t Z37e3@t)) (let ((Z37e9@ls/false (Z30b2@syntax-dispatch Z37e7@t '(_ any . each-any)))) (if Z37e9@ls/false (apply (lambda (Z37eb@e Z37ec@e*) (Z3068@bless (let Z37f3@f ((Z37ef@e Z37eb@e) (Z37f0@e* Z37ec@e*)) (if (null? Z37f0@e*) (list 'begin '#f Z37ef@e) (list 'let (list (list 't Z37ef@e)) (list 'if 't 't (Z37f3@f (car Z37f0@e*) (cdr Z37f0@e*)))))))) Z37e9@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z37e7@t))))))))) (set! Z4bae@Z3092@or-macro Z3092@or-macro) (set! Z3094@and-macro (lambda (Z37f5@stx) (let ((Z37f7@t Z37f5@stx)) (let ((Z37f9@ls/false (Z30b2@syntax-dispatch Z37f7@t '(_)))) (if Z37f9@ls/false (apply (lambda () '#t) Z37f9@ls/false) (let ((Z37fb@t Z37f7@t)) (let ((Z37fd@ls/false (Z30b2@syntax-dispatch Z37fb@t '(_ any . each-any)))) (if Z37fd@ls/false (apply (lambda (Z37ff@e Z3800@e*) (Z3068@bless (let Z3807@f ((Z3803@e Z37ff@e) (Z3804@e* Z3800@e*)) (if (null? Z3804@e*) (list 'begin '#f Z3803@e) (cons 'if (cons Z3803@e (cons (Z3807@f (car Z3804@e*) (cdr Z3804@e*)) '(#f)))))))) Z37fd@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z37fb@t))))))))) (set! Z4baf@Z3094@and-macro Z3094@and-macro) (set! Z3096@cond-macro (lambda (Z3809@stx) (let ((Z380b@t Z3809@stx)) (let ((Z380d@ls/false (Z30b2@syntax-dispatch Z380b@t '(_ any . each-any)))) (if Z380d@ls/false (apply (lambda (Z380f@cls Z3810@cls*) (Z3068@bless (let Z3817@f ((Z3813@cls Z380f@cls) (Z3814@cls* Z3810@cls*)) (if (null? Z3814@cls*) (let ((Z3819@t Z3813@cls)) (let ((Z381b@ls/false (Z30b2@syntax-dispatch Z3819@t '(#(scheme-id else) any . each-any)))) (if Z381b@ls/false (apply (lambda (Z381d@e Z381e@e*) (cons 'begin (cons Z381d@e Z381e@e*))) Z381b@ls/false) (let ((Z3821@t Z3819@t)) (let ((Z3823@ls/false (Z30b2@syntax-dispatch Z3821@t '(any #(scheme-id =>) any)))) (if Z3823@ls/false (apply (lambda (Z3825@e Z3826@p) (list 'let (list (list 't Z3825@e)) (list 'if 't (cons Z3826@p '(t))))) Z3823@ls/false) (let ((Z3829@t Z3821@t)) (let ((Z382b@ls/false (Z30b2@syntax-dispatch Z3829@t '(any)))) (if Z382b@ls/false (apply (lambda (Z382d@e) (cons 'or (cons Z382d@e '((if #f #f))))) Z382b@ls/false) (let ((Z382f@t Z3829@t)) (let ((Z3831@ls/false (Z30b2@syntax-dispatch Z382f@t '(any . each-any)))) (if Z3831@ls/false (apply (lambda (Z3833@e Z3834@e*) (list 'if Z3833@e (cons 'begin Z3834@e*))) Z3831@ls/false) (let ((Z3837@t Z382f@t)) (let ((Z3839@ls/false (Z30b2@syntax-dispatch Z3837@t '_))) (if Z3839@ls/false (apply (lambda () (Z3192@syntax-violation '#f '"invalid last clause" Z3809@stx)) Z3839@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3837@t)))))))))))))))) (let ((Z383b@t Z3813@cls)) (let ((Z383d@ls/false (Z30b2@syntax-dispatch Z383b@t '(#(scheme-id else) any . each-any)))) (if Z383d@ls/false (apply (lambda (Z383f@e Z3840@e*) (Z3192@syntax-violation '#f '"incorrect position of keyword else" Z3809@stx)) Z383d@ls/false) (let ((Z3843@t Z383b@t)) (let ((Z3845@ls/false (Z30b2@syntax-dispatch Z3843@t '(any #(scheme-id =>) any)))) (if Z3845@ls/false (apply (lambda (Z3847@e Z3848@p) (list 'let (list (list 't Z3847@e)) (list 'if 't (cons Z3848@p '(t)) (Z3817@f (car Z3814@cls*) (cdr Z3814@cls*))))) Z3845@ls/false) (let ((Z384b@t Z3843@t)) (let ((Z384d@ls/false (Z30b2@syntax-dispatch Z384b@t '(any)))) (if Z384d@ls/false (apply (lambda (Z384f@e) (list 'or Z384f@e (Z3817@f (car Z3814@cls*) (cdr Z3814@cls*)))) Z384d@ls/false) (let ((Z3851@t Z384b@t)) (let ((Z3853@ls/false (Z30b2@syntax-dispatch Z3851@t '(any . each-any)))) (if Z3853@ls/false (apply (lambda (Z3855@e Z3856@e*) (list 'if Z3855@e (cons 'begin Z3856@e*) (Z3817@f (car Z3814@cls*) (cdr Z3814@cls*)))) Z3853@ls/false) (let ((Z3859@t Z3851@t)) (let ((Z385b@ls/false (Z30b2@syntax-dispatch Z3859@t '_))) (if Z385b@ls/false (apply (lambda () (Z3192@syntax-violation '#f '"invalid last clause" Z3809@stx)) Z385b@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3859@t)))))))))))))))))))) Z380d@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z380b@t)))))) (set! Z4bb0@Z3096@cond-macro Z3096@cond-macro) (set! Z3098@do-include (lambda (Z385d@stx Z385e@id Z385f@filename) (let ((Z3863@filename (Z2ebf@stx->datum Z385f@filename))) (begin (if (not (and (string? Z3863@filename) (Z2eab@id? Z385e@id))) (Z3192@syntax-violation '#f '"invalid syntax" Z385d@stx) (void)) (cons (Z3068@bless 'begin) (with-input-from-file Z3863@filename (lambda () (let Z3867@f ((Z3865@ls '())) (let ((Z3869@x (Z29ed@Z28bd@read-annotated))) (if (eof-object? Z3869@x) (reverse Z3865@ls) (Z3867@f (cons (Z2e8b@datum->stx Z385e@id Z3869@x) Z3865@ls)))))))))))) (set! Z4bb1@Z3098@do-include Z3098@do-include) (set! Z309a@include-macro (lambda (Z386b@e) (let ((Z386d@t Z386b@e)) (let ((Z386f@ls/false (Z30b2@syntax-dispatch Z386d@t '(any any)))) (if Z386f@ls/false (apply (lambda (Z3871@id Z3872@filename) (Z3098@do-include Z386b@e Z3871@id Z3872@filename)) Z386f@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z386d@t)))))) (set! Z4bb2@Z309a@include-macro Z309a@include-macro) (set! Z309c@include-into-macro (lambda (Z3875@e) (let ((Z3877@t Z3875@e)) (let ((Z3879@ls/false (Z30b2@syntax-dispatch Z3877@t '(_ any any)))) (if Z3879@ls/false (apply (lambda (Z387b@id Z387c@filename) (Z3098@do-include Z3875@e Z387b@id Z387c@filename)) Z3879@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3877@t)))))) (set! Z4bb3@Z309c@include-into-macro Z309c@include-into-macro) (set! Z309e@syntax-rules-macro (lambda (Z387f@e) (let ((Z3881@t Z387f@e)) (let ((Z3883@ls/false (Z30b2@syntax-dispatch Z3881@t '(_ each-any . #(each (any any)))))) (if Z3883@ls/false (apply (lambda (Z3885@lits Z3886@pat* Z3887@tmp*) (begin (Z30b8@verify-literals Z3885@lits Z387f@e) (Z3068@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons Z3885@lits (map (lambda (Z388b@pat Z388c@tmp) (let ((Z388f@t Z388b@pat)) (let ((Z3891@ls/false (Z30b2@syntax-dispatch Z388f@t '(_ . any)))) (if Z3891@ls/false (apply (lambda (Z3893@rest) (list (cons 'g Z3893@rest) (list 'syntax Z388c@tmp))) Z3891@ls/false) (let ((Z3895@t Z388f@t)) (let ((Z3897@ls/false (Z30b2@syntax-dispatch Z3895@t '_))) (if Z3897@ls/false (apply (lambda () (Z3192@syntax-violation '#f '"invalid syntax-rules pattern" Z387f@e Z388b@pat)) Z3897@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3895@t)))))))) Z3886@pat* Z3887@tmp*)))))))) Z3883@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3881@t)))))) (set! Z4bb4@Z309e@syntax-rules-macro Z309e@syntax-rules-macro) (set! Z30a0@quasiquote-macro (letrec* ((Z389a@datum (lambda (Z399b@x) (list (Z303a@scheme-stx 'quote) (Z2e93@mkstx Z399b@x Z2e2f@top-mark* '() '())))) (Z38b6@quasicons* (lambda (Z3993@x Z3994@y) (let Z3999@f ((Z3997@x Z3993@x)) (if (null? Z3997@x) Z3994@y (Z38b8@quasicons (car Z3997@x) (Z3999@f (cdr Z3997@x))))))) (Z38b8@quasicons (lambda (Z396d@x Z396e@y) (let ((Z3971@t Z396e@y)) (let ((Z3973@ls/false (Z30b2@syntax-dispatch Z3971@t '(#(scheme-id quote) any)))) (if Z3973@ls/false (apply (lambda (Z3975@dy) (let ((Z3977@t Z396d@x)) (let ((Z3979@ls/false (Z30b2@syntax-dispatch Z3977@t '(#(scheme-id quote) any)))) (if Z3979@ls/false (apply (lambda (Z397b@dx) (list (Z303a@scheme-stx 'quote) (cons Z397b@dx Z3975@dy))) Z3979@ls/false) (let ((Z397d@t Z3977@t)) (let ((Z397f@ls/false (Z30b2@syntax-dispatch Z397d@t '_))) (if Z397f@ls/false (apply (lambda () (let ((Z3981@t Z3975@dy)) (let ((Z3983@ls/false (Z30b2@syntax-dispatch Z3981@t '()))) (if Z3983@ls/false (apply (lambda () (list (Z303a@scheme-stx 'list) Z396d@x)) Z3983@ls/false) (let ((Z3985@t Z3981@t)) (let ((Z3987@ls/false (Z30b2@syntax-dispatch Z3985@t '_))) (if Z3987@ls/false (apply (lambda () (list (Z303a@scheme-stx 'cons) Z396d@x Z396e@y)) Z3987@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3985@t)))))))) Z397f@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z397d@t)))))))) Z3973@ls/false) (let ((Z3989@t Z3971@t)) (let ((Z398b@ls/false (Z30b2@syntax-dispatch Z3989@t '(#(scheme-id list) . each-any)))) (if Z398b@ls/false (apply (lambda (Z398d@stuff) (cons* (Z303a@scheme-stx 'list) Z396d@x Z398d@stuff)) Z398b@ls/false) (let ((Z398f@t Z3989@t)) (let ((Z3991@ls/false (Z30b2@syntax-dispatch Z398f@t '_))) (if Z3991@ls/false (apply (lambda () (list (Z303a@scheme-stx 'cons) Z396d@x Z396e@y)) Z3991@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z398f@t)))))))))))) (Z38ba@quasiappend (lambda (Z3953@x Z3954@y) (let ((Z3957@ls (let Z395b@f ((Z3959@x Z3953@x)) (if (null? Z3959@x) (let ((Z395d@t Z3954@y)) (let ((Z395f@ls/false (Z30b2@syntax-dispatch Z395d@t '(#(scheme-id quote) ())))) (if Z395f@ls/false (apply (lambda () '()) Z395f@ls/false) (let ((Z3961@t Z395d@t)) (let ((Z3963@ls/false (Z30b2@syntax-dispatch Z3961@t '_))) (if Z3963@ls/false (apply (lambda () (list Z3954@y)) Z3963@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3961@t))))))) (let ((Z3965@t (car Z3959@x))) (let ((Z3967@ls/false (Z30b2@syntax-dispatch Z3965@t '(#(scheme-id quote) ())))) (if Z3967@ls/false (apply (lambda () (Z395b@f (cdr Z3959@x))) Z3967@ls/false) (let ((Z3969@t Z3965@t)) (let ((Z396b@ls/false (Z30b2@syntax-dispatch Z3969@t '_))) (if Z396b@ls/false (apply (lambda () (cons (car Z3959@x) (Z395b@f (cdr Z3959@x)))) Z396b@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3969@t))))))))))) (if (null? Z3957@ls) (list (Z303a@scheme-stx 'quote) '()) (if (null? (cdr Z3957@ls)) (car Z3957@ls) (cons* (Z303a@scheme-stx 'append) Z3957@ls)))))) (Z38bc@quasivector (lambda (Z3921@x) (let ((Z3923@pat-x Z3921@x)) (let ((Z3925@t Z3923@pat-x)) (let ((Z3927@ls/false (Z30b2@syntax-dispatch Z3925@t '(#(scheme-id quote) each-any)))) (if Z3927@ls/false (apply (lambda (Z3929@x*) (list (Z303a@scheme-stx 'quote) (list->vector Z3929@x*))) Z3927@ls/false) (let ((Z392b@t Z3925@t)) (let ((Z392d@ls/false (Z30b2@syntax-dispatch Z392b@t '_))) (if Z392d@ls/false (apply (lambda () (let Z3935@f ((Z392f@x Z3921@x) (Z3930@k (lambda (Z3933@ls) (cons* (Z303a@scheme-stx 'vector) Z3933@ls)))) (let ((Z3937@t Z392f@x)) (let ((Z3939@ls/false (Z30b2@syntax-dispatch Z3937@t '(#(scheme-id quote) each-any)))) (if Z3939@ls/false (apply (lambda (Z393b@x*) (Z3930@k (map (lambda (Z393d@x) (list (Z303a@scheme-stx 'quote) Z393d@x)) Z393b@x*))) Z3939@ls/false) (let ((Z393f@t Z3937@t)) (let ((Z3941@ls/false (Z30b2@syntax-dispatch Z393f@t '(#(scheme-id list) . each-any)))) (if Z3941@ls/false (apply (lambda (Z3943@x*) (Z3930@k Z3943@x*)) Z3941@ls/false) (let ((Z3945@t Z393f@t)) (let ((Z3947@ls/false (Z30b2@syntax-dispatch Z3945@t '(#(scheme-id cons) any any)))) (if Z3947@ls/false (apply (lambda (Z3949@x Z394a@y) (Z3935@f Z394a@y (lambda (Z394d@ls) (Z3930@k (cons Z3949@x Z394d@ls))))) Z3947@ls/false) (let ((Z394f@t Z3945@t)) (let ((Z3951@ls/false (Z30b2@syntax-dispatch Z394f@t '_))) (if Z3951@ls/false (apply (lambda () (list (Z303a@scheme-stx 'list->vector) Z3923@pat-x)) Z3951@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z394f@t))))))))))))))) Z392d@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z392b@t)))))))))) (Z38be@vquasi (lambda (Z38ff@p Z3900@lev) (let ((Z3903@t Z38ff@p)) (let ((Z3905@ls/false (Z30b2@syntax-dispatch Z3903@t '(any . any)))) (if Z3905@ls/false (apply (lambda (Z3907@p Z3908@q) (let ((Z390b@t Z3907@p)) (let ((Z390d@ls/false (Z30b2@syntax-dispatch Z390b@t '(#(scheme-id unquote) . each-any)))) (if Z390d@ls/false (apply (lambda (Z390f@p) (if (= Z3900@lev '0) (Z38b6@quasicons* Z390f@p (Z38be@vquasi Z3908@q Z3900@lev)) (Z38b8@quasicons (Z38b8@quasicons (Z389a@datum 'unquote) (Z38c0@quasi Z390f@p (- Z3900@lev '1))) (Z38be@vquasi Z3908@q Z3900@lev)))) Z390d@ls/false) (let ((Z3911@t Z390b@t)) (let ((Z3913@ls/false (Z30b2@syntax-dispatch Z3911@t '(#(scheme-id unquote-splicing) . each-any)))) (if Z3913@ls/false (apply (lambda (Z3915@p) (if (= Z3900@lev '0) (Z38ba@quasiappend Z3915@p (Z38be@vquasi Z3908@q Z3900@lev)) (Z38b8@quasicons (Z38b8@quasicons (Z389a@datum 'unquote-splicing) (Z38c0@quasi Z3915@p (- Z3900@lev '1))) (Z38be@vquasi Z3908@q Z3900@lev)))) Z3913@ls/false) (let ((Z3917@t Z3911@t)) (let ((Z3919@ls/false (Z30b2@syntax-dispatch Z3917@t 'any))) (if Z3919@ls/false (apply (lambda (Z391b@p) (Z38b8@quasicons (Z38c0@quasi Z391b@p Z3900@lev) (Z38be@vquasi Z3908@q Z3900@lev))) Z3919@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3917@t))))))))))) Z3905@ls/false) (let ((Z391d@t Z3903@t)) (let ((Z391f@ls/false (Z30b2@syntax-dispatch Z391d@t '()))) (if Z391f@ls/false (apply (lambda () (list (Z303a@scheme-stx 'quote) '())) Z391f@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z391d@t))))))))) (Z38c0@quasi (lambda (Z38c9@p Z38ca@lev) (let ((Z38cd@t Z38c9@p)) (let ((Z38cf@ls/false (Z30b2@syntax-dispatch Z38cd@t '(#(scheme-id unquote) any)))) (if Z38cf@ls/false (apply (lambda (Z38d1@p) (if (= Z38ca@lev '0) Z38d1@p (Z38b8@quasicons (Z389a@datum 'unquote) (Z38c0@quasi (list Z38d1@p) (- Z38ca@lev '1))))) Z38cf@ls/false) (let ((Z38d3@t Z38cd@t)) (let ((Z38d5@ls/false (Z30b2@syntax-dispatch Z38d3@t '((#(scheme-id unquote) . each-any) . any)))) (if Z38d5@ls/false (apply (lambda (Z38d7@p Z38d8@q) (if (= Z38ca@lev '0) (Z38b6@quasicons* Z38d7@p (Z38c0@quasi Z38d8@q Z38ca@lev)) (Z38b8@quasicons (Z38b8@quasicons (Z389a@datum 'unquote) (Z38c0@quasi Z38d7@p (- Z38ca@lev '1))) (Z38c0@quasi Z38d8@q Z38ca@lev)))) Z38d5@ls/false) (let ((Z38db@t Z38d3@t)) (let ((Z38dd@ls/false (Z30b2@syntax-dispatch Z38db@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if Z38dd@ls/false (apply (lambda (Z38df@p Z38e0@q) (if (= Z38ca@lev '0) (Z38ba@quasiappend Z38df@p (Z38c0@quasi Z38e0@q Z38ca@lev)) (Z38b8@quasicons (Z38b8@quasicons (Z389a@datum 'unquote-splicing) (Z38c0@quasi Z38df@p (- Z38ca@lev '1))) (Z38c0@quasi Z38e0@q Z38ca@lev)))) Z38dd@ls/false) (let ((Z38e3@t Z38db@t)) (let ((Z38e5@ls/false (Z30b2@syntax-dispatch Z38e3@t '(#(scheme-id quasiquote) any)))) (if Z38e5@ls/false (apply (lambda (Z38e7@p) (Z38b8@quasicons (Z389a@datum 'quasiquote) (Z38c0@quasi (list Z38e7@p) (+ Z38ca@lev '1)))) Z38e5@ls/false) (let ((Z38e9@t Z38e3@t)) (let ((Z38eb@ls/false (Z30b2@syntax-dispatch Z38e9@t '(any . any)))) (if Z38eb@ls/false (apply (lambda (Z38ed@p Z38ee@q) (Z38b8@quasicons (Z38c0@quasi Z38ed@p Z38ca@lev) (Z38c0@quasi Z38ee@q Z38ca@lev))) Z38eb@ls/false) (let ((Z38f1@t Z38e9@t)) (let ((Z38f3@ls/false (Z30b2@syntax-dispatch Z38f1@t '#(vector each-any)))) (if (and Z38f3@ls/false (apply (lambda (Z38f5@x) (not (Z2e77@stx? Z38f5@x))) Z38f3@ls/false)) (apply (lambda (Z38f7@x) (Z38bc@quasivector (Z38be@vquasi Z38f7@x Z38ca@lev))) Z38f3@ls/false) (let ((Z38f9@t Z38f1@t)) (let ((Z38fb@ls/false (Z30b2@syntax-dispatch Z38f9@t 'any))) (if Z38fb@ls/false (apply (lambda (Z38fd@p) (list (Z303a@scheme-stx 'quote) Z38fd@p)) Z38fb@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z38f9@t))))))))))))))))))))))))) (lambda (Z38c1@x) (let ((Z38c3@t Z38c1@x)) (let ((Z38c5@ls/false (Z30b2@syntax-dispatch Z38c3@t '(_ any)))) (if Z38c5@ls/false (apply (lambda (Z38c7@e) (Z38c0@quasi Z38c7@e '0)) Z38c5@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z38c3@t))))))) (set! Z4bb5@Z30a0@quasiquote-macro Z30a0@quasiquote-macro) (set! Z30a2@quasisyntax-macro (letrec* ((Z399e@quasi (lambda (Z39b9@p Z39ba@lev) (let ((Z39bd@t Z39b9@p)) (let ((Z39bf@ls/false (Z30b2@syntax-dispatch Z39bd@t '(#(scheme-id unsyntax) any)))) (if Z39bf@ls/false (apply (lambda (Z39c1@p) (if (= Z39ba@lev '0) (let ((Z39c3@g (gensym))) (values (list Z39c3@g) (list Z39c1@p) Z39c3@g)) (call-with-values (lambda () (Z399e@quasi Z39c1@p (- Z39ba@lev '1))) (lambda (Z39cb@Z39c6 Z39cc@Z39c8 Z39cd@Z39ca) (let ((Z39d1@p Z39cd@Z39ca) (Z39d2@rhs* Z39cc@Z39c8) (Z39d3@lhs* Z39cb@Z39c6)) (values Z39d3@lhs* Z39d2@rhs* (list 'unsyntax Z39d1@p))))))) Z39bf@ls/false) (let ((Z39d7@t Z39bd@t)) (let ((Z39d9@ls/false (Z30b2@syntax-dispatch Z39d7@t '#(scheme-id unsyntax)))) (if (and Z39d9@ls/false (apply (lambda () (= Z39ba@lev '0)) Z39d9@ls/false)) (apply (lambda () (Z3192@syntax-violation '#f '"incorrect use of unsyntax" Z39b9@p)) Z39d9@ls/false) (let ((Z39db@t Z39d7@t)) (let ((Z39dd@ls/false (Z30b2@syntax-dispatch Z39db@t '((#(scheme-id unsyntax) . each-any) . any)))) (if Z39dd@ls/false (apply (lambda (Z39df@p* Z39e0@q) (call-with-values (lambda () (Z399e@quasi Z39e0@q Z39ba@lev)) (lambda (Z39e9@Z39e4 Z39ea@Z39e6 Z39eb@Z39e8) (let ((Z39ef@q Z39eb@Z39e8) (Z39f0@rhs* Z39ea@Z39e6) (Z39f1@lhs* Z39e9@Z39e4)) (if (= Z39ba@lev '0) (let ((Z39f5@g* (map (lambda (Z39f7@x) (gensym)) Z39df@p*))) (values (append Z39f5@g* Z39f1@lhs*) (append Z39df@p* Z39f0@rhs*) (append Z39f5@g* Z39ef@q))) (call-with-values (lambda () (Z399e@quasi Z39df@p* (- Z39ba@lev '1))) (lambda (Z39ff@Z39fa Z3a00@Z39fc Z3a01@Z39fe) (let ((Z3a05@p* Z3a01@Z39fe) (Z3a06@rhs2* Z3a00@Z39fc) (Z3a07@lhs2* Z39ff@Z39fa)) (values (append Z3a07@lhs2* Z39f1@lhs*) (append Z3a06@rhs2* Z39f0@rhs*) (cons (cons 'unsyntax Z3a05@p*) Z39ef@q)))))))))) Z39dd@ls/false) (let ((Z3a0b@t Z39db@t)) (let ((Z3a0d@ls/false (Z30b2@syntax-dispatch Z3a0b@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if Z3a0d@ls/false (apply (lambda (Z3a0f@p* Z3a10@q) (call-with-values (lambda () (Z399e@quasi Z3a10@q Z39ba@lev)) (lambda (Z3a19@Z3a14 Z3a1a@Z3a16 Z3a1b@Z3a18) (let ((Z3a1f@q Z3a1b@Z3a18) (Z3a20@rhs* Z3a1a@Z3a16) (Z3a21@lhs* Z3a19@Z3a14)) (if (= Z39ba@lev '0) (let ((Z3a25@g* (map (lambda (Z3a27@x) (gensym)) Z3a0f@p*))) (values (append (map (lambda (Z3a29@g) (cons Z3a29@g '(...))) Z3a25@g*) Z3a21@lhs*) (append Z3a0f@p* Z3a20@rhs*) (append (apply append (map (lambda (Z3a2b@g) (cons Z3a2b@g '(...))) Z3a25@g*)) Z3a1f@q))) (call-with-values (lambda () (Z399e@quasi Z3a0f@p* (- Z39ba@lev '1))) (lambda (Z3a33@Z3a2e Z3a34@Z3a30 Z3a35@Z3a32) (let ((Z3a39@p* Z3a35@Z3a32) (Z3a3a@rhs2* Z3a34@Z3a30) (Z3a3b@lhs2* Z3a33@Z3a2e)) (values (append Z3a3b@lhs2* Z3a21@lhs*) (append Z3a3a@rhs2* Z3a20@rhs*) (cons (cons 'unsyntax-splicing Z3a39@p*) Z3a1f@q)))))))))) Z3a0d@ls/false) (let ((Z3a3f@t Z3a0b@t)) (let ((Z3a41@ls/false (Z30b2@syntax-dispatch Z3a3f@t '#(scheme-id unsyntax-splicing)))) (if (and Z3a41@ls/false (apply (lambda () (= Z39ba@lev '0)) Z3a41@ls/false)) (apply (lambda () (Z3192@syntax-violation '#f '"incorrect use of unsyntax-splicing" Z39b9@p)) Z3a41@ls/false) (let ((Z3a43@t Z3a3f@t)) (let ((Z3a45@ls/false (Z30b2@syntax-dispatch Z3a43@t '(#(scheme-id quasisyntax) any)))) (if Z3a45@ls/false (apply (lambda (Z3a47@p) (call-with-values (lambda () (Z399e@quasi Z3a47@p (+ Z39ba@lev '1))) (lambda (Z3a4f@Z3a4a Z3a50@Z3a4c Z3a51@Z3a4e) (let ((Z3a55@p Z3a51@Z3a4e) (Z3a56@rhs* Z3a50@Z3a4c) (Z3a57@lhs* Z3a4f@Z3a4a)) (values Z3a57@lhs* Z3a56@rhs* (list 'quasisyntax Z3a55@p)))))) Z3a45@ls/false) (let ((Z3a5b@t Z3a43@t)) (let ((Z3a5d@ls/false (Z30b2@syntax-dispatch Z3a5b@t '(any . any)))) (if Z3a5d@ls/false (apply (lambda (Z3a5f@p Z3a60@q) (call-with-values (lambda () (Z399e@quasi Z3a5f@p Z39ba@lev)) (lambda (Z3a6f@Z3a64 Z3a70@Z3a66 Z3a71@Z3a68) (call-with-values (lambda () (Z399e@quasi Z3a60@q Z39ba@lev)) (lambda (Z3a75@Z3a6a Z3a76@Z3a6c Z3a77@Z3a6e) (let ((Z3a7b@q Z3a77@Z3a6e) (Z3a7c@rhs2* Z3a76@Z3a6c) (Z3a7d@lhs2* Z3a75@Z3a6a) (Z3a7e@p Z3a71@Z3a68) (Z3a7f@rhs* Z3a70@Z3a66) (Z3a80@lhs* Z3a6f@Z3a64)) (values (append Z3a7d@lhs2* Z3a80@lhs*) (append Z3a7c@rhs2* Z3a7f@rhs*) (cons Z3a7e@p Z3a7b@q)))))))) Z3a5d@ls/false) (let ((Z3a87@t Z3a5b@t)) (let ((Z3a89@ls/false (Z30b2@syntax-dispatch Z3a87@t '#(vector each-any)))) (if Z3a89@ls/false (apply (lambda (Z3a8b@x*) (call-with-values (lambda () (Z399e@quasi Z3a8b@x* Z39ba@lev)) (lambda (Z3a93@Z3a8e Z3a94@Z3a90 Z3a95@Z3a92) (let ((Z3a99@x* Z3a95@Z3a92) (Z3a9a@rhs* Z3a94@Z3a90) (Z3a9b@lhs* Z3a93@Z3a8e)) (values Z3a9b@lhs* Z3a9a@rhs* (list->vector Z3a99@x*)))))) Z3a89@ls/false) (let ((Z3a9f@t Z3a87@t)) (let ((Z3aa1@ls/false (Z30b2@syntax-dispatch Z3a9f@t '_))) (if Z3aa1@ls/false (apply (lambda () (values '() '() Z39b9@p)) Z3aa1@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3a9f@t))))))))))))))))))))))))))))))) (lambda (Z399f@x) (let ((Z39a1@t Z399f@x)) (let ((Z39a3@ls/false (Z30b2@syntax-dispatch Z39a1@t '(_ any)))) (if Z39a3@ls/false (apply (lambda (Z39a5@e) (call-with-values (lambda () (Z399e@quasi Z39a5@e '0)) (lambda (Z39ad@Z39a8 Z39ae@Z39aa Z39af@Z39ac) (let ((Z39b3@v Z39af@Z39ac) (Z39b4@rhs* Z39ae@Z39aa) (Z39b5@lhs* Z39ad@Z39a8)) (Z3068@bless (list 'syntax-case (cons 'list Z39b4@rhs*) '() (list Z39b5@lhs* (list 'syntax Z39b3@v)))))))) Z39a3@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z39a1@t))))))) (set! Z4bb6@Z30a2@quasisyntax-macro Z30a2@quasisyntax-macro) (set! Z30a4@define-struct-macro (lambda (Z3aa3@stx) (Z3192@syntax-violation '#f '"define-struct not supported" Z3aa3@stx))) (set! Z4bb7@Z30a4@define-struct-macro Z30a4@define-struct-macro) (set! Z30a6@define-record-type-macro (lambda (Z3aa5@x) (letrec* ((Z3aa8@id (lambda (Z3c9b@ctxt . Z3c9d@str*) (Z3196@datum->syntax Z3c9b@ctxt (string->symbol (apply string-append (map (lambda (Z3c9f@x) (if (symbol? Z3c9f@x) (symbol->string Z3c9f@x) (if (string? Z3c9f@x) Z3c9f@x (assertion-violation 'define-record-type '"BUG")))) Z3c9d@str*)))))) (Z3aaa@get-record-name (lambda (Z3c89@spec) (let ((Z3c8b@t Z3c89@spec)) (let ((Z3c8d@ls/false (Z30b2@syntax-dispatch Z3c8b@t '(any any any)))) (if Z3c8d@ls/false (apply (lambda (Z3c8f@foo Z3c90@make-foo Z3c91@foo?) Z3c8f@foo) Z3c8d@ls/false) (let ((Z3c95@t Z3c8b@t)) (let ((Z3c97@ls/false (Z30b2@syntax-dispatch Z3c95@t 'any))) (if Z3c97@ls/false (apply (lambda (Z3c99@foo) Z3c99@foo) Z3c97@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3c95@t))))))))) (Z3aac@get-record-constructor-name (lambda (Z3c75@spec) (let ((Z3c77@t Z3c75@spec)) (let ((Z3c79@ls/false (Z30b2@syntax-dispatch Z3c77@t '(any any any)))) (if Z3c79@ls/false (apply (lambda (Z3c7b@foo Z3c7c@make-foo Z3c7d@foo?) Z3c7c@make-foo) Z3c79@ls/false) (let ((Z3c81@t Z3c77@t)) (let ((Z3c83@ls/false (Z30b2@syntax-dispatch Z3c81@t 'any))) (if (and Z3c83@ls/false (apply (lambda (Z3c85@foo) (Z2eab@id? Z3c85@foo)) Z3c83@ls/false)) (apply (lambda (Z3c87@foo) (Z3aa8@id Z3c87@foo '"make-" (Z2ebf@stx->datum Z3c87@foo))) Z3c83@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3c81@t))))))))) (Z3aae@get-record-predicate-name (lambda (Z3c61@spec) (let ((Z3c63@t Z3c61@spec)) (let ((Z3c65@ls/false (Z30b2@syntax-dispatch Z3c63@t '(any any any)))) (if Z3c65@ls/false (apply (lambda (Z3c67@foo Z3c68@make-foo Z3c69@foo?) Z3c69@foo?) Z3c65@ls/false) (let ((Z3c6d@t Z3c63@t)) (let ((Z3c6f@ls/false (Z30b2@syntax-dispatch Z3c6d@t 'any))) (if (and Z3c6f@ls/false (apply (lambda (Z3c71@foo) (Z2eab@id? Z3c71@foo)) Z3c6f@ls/false)) (apply (lambda (Z3c73@foo) (Z3aa8@id Z3c73@foo (Z2ebf@stx->datum Z3c73@foo) '"?")) Z3c6f@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3c6d@t))))))))) (Z3ab0@get-clause (lambda (Z3c4f@id Z3c50@ls) (let ((Z3c53@t Z3c50@ls)) (let ((Z3c55@ls/false (Z30b2@syntax-dispatch Z3c53@t '()))) (if Z3c55@ls/false (apply (lambda () '#f) Z3c55@ls/false) (let ((Z3c57@t Z3c53@t)) (let ((Z3c59@ls/false (Z30b2@syntax-dispatch Z3c57@t '((any . any) . any)))) (if Z3c59@ls/false (apply (lambda (Z3c5b@x Z3c5c@rest Z3c5d@ls) (if (Z2eb1@free-id=? (Z3068@bless Z3c4f@id) Z3c5b@x) (cons Z3c5b@x Z3c5c@rest) (Z3ab0@get-clause Z3c4f@id Z3c5d@ls))) Z3c59@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3c57@t))))))))) (Z3ab2@foo-rtd-code (lambda (Z3bfd@name Z3bfe@clause* Z3bff@parent-rtd-code) (letrec* ((Z3c04@convert-field-spec* (lambda (Z3c35@ls) (list->vector (map (lambda (Z3c37@x) (let ((Z3c39@t Z3c37@x)) (let ((Z3c3b@ls/false (Z30b2@syntax-dispatch Z3c39@t '(#(scheme-id mutable) any . any)))) (if Z3c3b@ls/false (apply (lambda (Z3c3d@name Z3c3e@rest) (list 'mutable Z3c3d@name)) Z3c3b@ls/false) (let ((Z3c41@t Z3c39@t)) (let ((Z3c43@ls/false (Z30b2@syntax-dispatch Z3c41@t '(#(scheme-id immutable) any . any)))) (if Z3c43@ls/false (apply (lambda (Z3c45@name Z3c46@rest) (list 'immutable Z3c45@name)) Z3c43@ls/false) (let ((Z3c49@t Z3c41@t)) (let ((Z3c4b@ls/false (Z30b2@syntax-dispatch Z3c49@t 'any))) (if Z3c4b@ls/false (apply (lambda (Z3c4d@name) (list 'immutable Z3c4d@name)) Z3c4b@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3c49@t))))))))))) Z3c35@ls))))) (let ((Z3c05@uid-code (let ((Z3c0d@t (Z3ab0@get-clause 'nongenerative Z3bfe@clause*))) (let ((Z3c0f@ls/false (Z30b2@syntax-dispatch Z3c0d@t '(_)))) (if Z3c0f@ls/false (apply (lambda () (list 'quote (gensym))) Z3c0f@ls/false) (let ((Z3c11@t Z3c0d@t)) (let ((Z3c13@ls/false (Z30b2@syntax-dispatch Z3c11@t '(_ any)))) (if Z3c13@ls/false (apply (lambda (Z3c15@uid) (list 'quote Z3c15@uid)) Z3c13@ls/false) (let ((Z3c17@t Z3c11@t)) (let ((Z3c19@ls/false (Z30b2@syntax-dispatch Z3c17@t '_))) (if Z3c19@ls/false (apply (lambda () '#f) Z3c19@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3c17@t))))))))))) (Z3c06@sealed? (let ((Z3c1b@t (Z3ab0@get-clause 'sealed Z3bfe@clause*))) (let ((Z3c1d@ls/false (Z30b2@syntax-dispatch Z3c1b@t '(_ #(atom #t))))) (if Z3c1d@ls/false (apply (lambda () '#t) Z3c1d@ls/false) (let ((Z3c1f@t Z3c1b@t)) (let ((Z3c21@ls/false (Z30b2@syntax-dispatch Z3c1f@t '_))) (if Z3c21@ls/false (apply (lambda () '#f) Z3c21@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3c1f@t)))))))) (Z3c07@opaque? (let ((Z3c23@t (Z3ab0@get-clause 'opaque Z3bfe@clause*))) (let ((Z3c25@ls/false (Z30b2@syntax-dispatch Z3c23@t '(_ #(atom #t))))) (if Z3c25@ls/false (apply (lambda () '#t) Z3c25@ls/false) (let ((Z3c27@t Z3c23@t)) (let ((Z3c29@ls/false (Z30b2@syntax-dispatch Z3c27@t '_))) (if Z3c29@ls/false (apply (lambda () '#f) Z3c29@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3c27@t)))))))) (Z3c08@fields (let ((Z3c2b@t (Z3ab0@get-clause 'fields Z3bfe@clause*))) (let ((Z3c2d@ls/false (Z30b2@syntax-dispatch Z3c2b@t '(_ . each-any)))) (if Z3c2d@ls/false (apply (lambda (Z3c2f@field-spec*) (list 'quote (Z3c04@convert-field-spec* Z3c2f@field-spec*))) Z3c2d@ls/false) (let ((Z3c31@t Z3c2b@t)) (let ((Z3c33@ls/false (Z30b2@syntax-dispatch Z3c31@t '_))) (if Z3c33@ls/false (apply (lambda () ''#()) Z3c33@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3c31@t))))))))) (Z3068@bless (list 'make-record-type-descriptor (list 'quote Z3bfd@name) Z3bff@parent-rtd-code Z3c05@uid-code Z3c06@sealed? Z3c07@opaque? Z3c08@fields)))))) (Z3ab4@parent-rtd-code (lambda (Z3be5@clause*) (let ((Z3be7@t (Z3ab0@get-clause 'parent Z3be5@clause*))) (let ((Z3be9@ls/false (Z30b2@syntax-dispatch Z3be7@t '(_ any)))) (if Z3be9@ls/false (apply (lambda (Z3beb@name) (list 'record-type-descriptor Z3beb@name)) Z3be9@ls/false) (let ((Z3bed@t Z3be7@t)) (let ((Z3bef@ls/false (Z30b2@syntax-dispatch Z3bed@t '#(atom #f)))) (if Z3bef@ls/false (apply (lambda () (let ((Z3bf1@t (Z3ab0@get-clause 'parent-rtd Z3be5@clause*))) (let ((Z3bf3@ls/false (Z30b2@syntax-dispatch Z3bf1@t '(_ any any)))) (if Z3bf3@ls/false (apply (lambda (Z3bf5@rtd Z3bf6@rcd) Z3bf5@rtd) Z3bf3@ls/false) (let ((Z3bf9@t Z3bf1@t)) (let ((Z3bfb@ls/false (Z30b2@syntax-dispatch Z3bf9@t '#(atom #f)))) (if Z3bfb@ls/false (apply (lambda () '#f) Z3bfb@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3bf9@t)))))))) Z3bef@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3bed@t))))))))) (Z3ab6@parent-rcd-code (lambda (Z3bcd@clause*) (let ((Z3bcf@t (Z3ab0@get-clause 'parent Z3bcd@clause*))) (let ((Z3bd1@ls/false (Z30b2@syntax-dispatch Z3bcf@t '(_ any)))) (if Z3bd1@ls/false (apply (lambda (Z3bd3@name) (list 'record-constructor-descriptor Z3bd3@name)) Z3bd1@ls/false) (let ((Z3bd5@t Z3bcf@t)) (let ((Z3bd7@ls/false (Z30b2@syntax-dispatch Z3bd5@t '#(atom #f)))) (if Z3bd7@ls/false (apply (lambda () (let ((Z3bd9@t (Z3ab0@get-clause 'parent-rtd Z3bcd@clause*))) (let ((Z3bdb@ls/false (Z30b2@syntax-dispatch Z3bd9@t '(_ any any)))) (if Z3bdb@ls/false (apply (lambda (Z3bdd@rtd Z3bde@rcd) Z3bde@rcd) Z3bdb@ls/false) (let ((Z3be1@t Z3bd9@t)) (let ((Z3be3@ls/false (Z30b2@syntax-dispatch Z3be1@t '#(atom #f)))) (if Z3be3@ls/false (apply (lambda () '#f) Z3be3@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3be1@t)))))))) Z3bd7@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3bd5@t))))))))) (Z3ab8@foo-rcd-code (lambda (Z3bc5@clause* Z3bc6@foo-rtd Z3bc7@protocol Z3bc8@parent-rcd-code) (list 'make-record-constructor-descriptor Z3bc6@foo-rtd Z3bc8@parent-rcd-code Z3bc7@protocol))) (Z3aba@get-protocol-code (lambda (Z3bb9@clause*) (let ((Z3bbb@t (Z3ab0@get-clause 'protocol Z3bb9@clause*))) (let ((Z3bbd@ls/false (Z30b2@syntax-dispatch Z3bbb@t '(_ any)))) (if Z3bbd@ls/false (apply (lambda (Z3bbf@expr) Z3bbf@expr) Z3bbd@ls/false) (let ((Z3bc1@t Z3bbb@t)) (let ((Z3bc3@ls/false (Z30b2@syntax-dispatch Z3bc1@t '_))) (if Z3bc3@ls/false (apply (lambda () '#f) Z3bc3@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3bc1@t))))))))) (Z3abc@get-fields (lambda (Z3ba7@clause*) (let ((Z3ba9@t Z3ba7@clause*)) (let ((Z3bab@ls/false (Z30b2@syntax-dispatch Z3ba9@t '()))) (if Z3bab@ls/false (apply (lambda () '()) Z3bab@ls/false) (let ((Z3bad@t Z3ba9@t)) (let ((Z3baf@ls/false (Z30b2@syntax-dispatch Z3bad@t '((#(scheme-id fields) . each-any) . _)))) (if Z3baf@ls/false (apply (lambda (Z3bb1@f*) Z3bb1@f*) Z3baf@ls/false) (let ((Z3bb3@t Z3bad@t)) (let ((Z3bb5@ls/false (Z30b2@syntax-dispatch Z3bb3@t '(_ . any)))) (if Z3bb5@ls/false (apply (lambda (Z3bb7@rest) (Z3abc@get-fields Z3bb7@rest)) Z3bb5@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3bb3@t)))))))))))) (Z3abe@get-mutator-indices (lambda (Z3b8f@fields) (let Z3b95@f ((Z3b91@fields Z3b8f@fields) (Z3b92@i '0)) (let ((Z3b97@t Z3b91@fields)) (let ((Z3b99@ls/false (Z30b2@syntax-dispatch Z3b97@t '()))) (if Z3b99@ls/false (apply (lambda () '()) Z3b99@ls/false) (let ((Z3b9b@t Z3b97@t)) (let ((Z3b9d@ls/false (Z30b2@syntax-dispatch Z3b9b@t '((#(scheme-id mutable) . _) . any)))) (if Z3b9d@ls/false (apply (lambda (Z3b9f@rest) (cons Z3b92@i (Z3b95@f Z3b9f@rest (+ Z3b92@i '1)))) Z3b9d@ls/false) (let ((Z3ba1@t Z3b9b@t)) (let ((Z3ba3@ls/false (Z30b2@syntax-dispatch Z3ba1@t '(_ . any)))) (if Z3ba3@ls/false (apply (lambda (Z3ba5@rest) (Z3b95@f Z3ba5@rest (+ Z3b92@i '1))) Z3ba3@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3ba1@t))))))))))))) (Z3ac0@get-mutators (lambda (Z3b65@foo Z3b66@fields) (letrec* ((Z3b6a@gen-name (lambda (Z3b8d@x) (Z3196@datum->syntax Z3b65@foo (string->symbol (string-append (symbol->string (Z3198@syntax->datum Z3b65@foo)) '"-" (symbol->string (Z3198@syntax->datum Z3b8d@x)) '"-set!")))))) (let Z3b6d@f ((Z3b6b@fields Z3b66@fields)) (let ((Z3b6f@t Z3b6b@fields)) (let ((Z3b71@ls/false (Z30b2@syntax-dispatch Z3b6f@t '()))) (if Z3b71@ls/false (apply (lambda () '()) Z3b71@ls/false) (let ((Z3b73@t Z3b6f@t)) (let ((Z3b75@ls/false (Z30b2@syntax-dispatch Z3b73@t '((#(scheme-id mutable) any any any) . any)))) (if Z3b75@ls/false (apply (lambda (Z3b77@name Z3b78@accessor Z3b79@mutator Z3b7a@rest) (cons Z3b79@mutator (Z3b6d@f Z3b7a@rest))) Z3b75@ls/false) (let ((Z3b7f@t Z3b73@t)) (let ((Z3b81@ls/false (Z30b2@syntax-dispatch Z3b7f@t '((#(scheme-id mutable) any) . any)))) (if Z3b81@ls/false (apply (lambda (Z3b83@name Z3b84@rest) (cons (Z3b6a@gen-name Z3b83@name) (Z3b6d@f Z3b84@rest))) Z3b81@ls/false) (let ((Z3b87@t Z3b7f@t)) (let ((Z3b89@ls/false (Z30b2@syntax-dispatch Z3b87@t '(_ . any)))) (if Z3b89@ls/false (apply (lambda (Z3b8b@rest) (Z3b6d@f Z3b8b@rest)) Z3b89@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3b87@t))))))))))))))))) (Z3ac2@get-accessors (lambda (Z3b21@foo Z3b22@fields) (letrec* ((Z3b26@gen-name (lambda (Z3b63@x) (Z3196@datum->syntax Z3b21@foo (string->symbol (string-append (symbol->string (Z3198@syntax->datum Z3b21@foo)) '"-" (symbol->string (Z3198@syntax->datum Z3b63@x)))))))) (map (lambda (Z3b27@field) (let ((Z3b29@t Z3b27@field)) (let ((Z3b2b@ls/false (Z30b2@syntax-dispatch Z3b29@t '(#(scheme-id mutable) any any any)))) (if (and Z3b2b@ls/false (apply (lambda (Z3b2d@name Z3b2e@accessor Z3b2f@mutator) (Z2eab@id? Z3b2e@accessor)) Z3b2b@ls/false)) (apply (lambda (Z3b33@name Z3b34@accessor Z3b35@mutator) Z3b34@accessor) Z3b2b@ls/false) (let ((Z3b39@t Z3b29@t)) (let ((Z3b3b@ls/false (Z30b2@syntax-dispatch Z3b39@t '(#(scheme-id immutable) any any)))) (if (and Z3b3b@ls/false (apply (lambda (Z3b3d@name Z3b3e@accessor) (Z2eab@id? Z3b3e@accessor)) Z3b3b@ls/false)) (apply (lambda (Z3b41@name Z3b42@accessor) Z3b42@accessor) Z3b3b@ls/false) (let ((Z3b45@t Z3b39@t)) (let ((Z3b47@ls/false (Z30b2@syntax-dispatch Z3b45@t '(#(scheme-id mutable) any)))) (if (and Z3b47@ls/false (apply (lambda (Z3b49@name) (Z2eab@id? Z3b49@name)) Z3b47@ls/false)) (apply (lambda (Z3b4b@name) (Z3b26@gen-name Z3b4b@name)) Z3b47@ls/false) (let ((Z3b4d@t Z3b45@t)) (let ((Z3b4f@ls/false (Z30b2@syntax-dispatch Z3b4d@t '(#(scheme-id immutable) any)))) (if (and Z3b4f@ls/false (apply (lambda (Z3b51@name) (Z2eab@id? Z3b51@name)) Z3b4f@ls/false)) (apply (lambda (Z3b53@name) (Z3b26@gen-name Z3b53@name)) Z3b4f@ls/false) (let ((Z3b55@t Z3b4d@t)) (let ((Z3b57@ls/false (Z30b2@syntax-dispatch Z3b55@t 'any))) (if (and Z3b57@ls/false (apply (lambda (Z3b59@name) (Z2eab@id? Z3b59@name)) Z3b57@ls/false)) (apply (lambda (Z3b5b@name) (Z3b26@gen-name Z3b5b@name)) Z3b57@ls/false) (let ((Z3b5d@t Z3b55@t)) (let ((Z3b5f@ls/false (Z30b2@syntax-dispatch Z3b5d@t 'any))) (if Z3b5f@ls/false (apply (lambda (Z3b61@others) (Z3192@syntax-violation '#f '"invalid field spec" Z3b27@field)) Z3b5f@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3b5d@t)))))))))))))))))))) Z3b22@fields)))) (Z3ac4@enumerate (lambda (Z3b19@ls) (let Z3b1f@f ((Z3b1b@ls Z3b19@ls) (Z3b1c@i '0)) (if (null? Z3b1b@ls) '() (cons Z3b1c@i (Z3b1f@f (cdr Z3b1b@ls) (+ Z3b1c@i '1))))))) (Z3ac6@do-define-record (lambda (Z3af1@namespec Z3af2@clause*) (let ((Z3af5@foo (Z3aaa@get-record-name Z3af1@namespec))) (let ((Z3af7@foo-rtd (gensym))) (let ((Z3af9@foo-rcd (gensym))) (let ((Z3afb@protocol (gensym))) (let ((Z3afd@make-foo (Z3aac@get-record-constructor-name Z3af1@namespec))) (let ((Z3aff@fields (Z3abc@get-fields Z3af2@clause*))) (let ((Z3b01@idx* (Z3ac4@enumerate Z3aff@fields))) (let ((Z3b03@foo-x* (Z3ac2@get-accessors Z3af5@foo Z3aff@fields))) (let ((Z3b05@set-foo-x!* (Z3ac0@get-mutators Z3af5@foo Z3aff@fields))) (let ((Z3b07@set-foo-idx* (Z3abe@get-mutator-indices Z3aff@fields))) (let ((Z3b09@foo? (Z3aae@get-record-predicate-name Z3af1@namespec))) (let ((Z3b0b@foo-rtd-code (Z3ab2@foo-rtd-code Z3af5@foo Z3af2@clause* (Z3ab4@parent-rtd-code Z3af2@clause*)))) (let ((Z3b0d@foo-rcd-code (Z3ab8@foo-rcd-code Z3af2@clause* Z3af7@foo-rtd Z3afb@protocol (Z3ab6@parent-rcd-code Z3af2@clause*)))) (let ((Z3b0f@protocol-code (Z3aba@get-protocol-code Z3af2@clause*))) (Z3068@bless (cons 'begin (cons (list 'define Z3af7@foo-rtd Z3b0b@foo-rtd-code) (cons (list 'define Z3afb@protocol Z3b0f@protocol-code) (cons (list 'define Z3af9@foo-rcd Z3b0d@foo-rcd-code) (cons (list 'define-syntax Z3af5@foo (list 'list ''$rtd (list 'syntax Z3af7@foo-rtd) (list 'syntax Z3af9@foo-rcd))) (cons (list 'define Z3b09@foo? (list 'record-predicate Z3af7@foo-rtd)) (cons (list 'define Z3afd@make-foo (list 'record-constructor Z3af9@foo-rcd)) (append (map (lambda (Z3b11@foo-x Z3b12@idx) (list 'define Z3b11@foo-x (list 'record-accessor Z3af7@foo-rtd Z3b12@idx))) Z3b03@foo-x* Z3b01@idx*) (map (lambda (Z3b15@set-foo-x! Z3b16@idx) (list 'define Z3b15@set-foo-x! (list 'record-mutator Z3af7@foo-rtd Z3b16@idx))) Z3b05@set-foo-x!* Z3b07@set-foo-idx*)))))))))))))))))))))))))) (Z3ac8@verify-clauses (lambda (Z3ad1@x Z3ad2@cls*) (letrec* ((Z3ad6@valid-kwds (map Z3068@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (Z3ad8@free-id-member? (lambda (Z3aed@x Z3aee@ls) (and (pair? Z3aee@ls) (or (Z2eb1@free-id=? Z3aed@x (car Z3aee@ls)) (Z3ad8@free-id-member? Z3aed@x (cdr Z3aee@ls))))))) (let Z3add@f ((Z3ad9@cls* Z3ad2@cls*) (Z3ada@seen* '())) (if (not (null? Z3ad9@cls*)) (let ((Z3adf@t (car Z3ad9@cls*))) (let ((Z3ae1@ls/false (Z30b2@syntax-dispatch Z3adf@t '(any . any)))) (if Z3ae1@ls/false (apply (lambda (Z3ae3@kwd Z3ae4@rest) (if (or (not (Z2eab@id? Z3ae3@kwd)) (not (Z3ad8@free-id-member? Z3ae3@kwd Z3ad6@valid-kwds))) (Z3192@syntax-violation '#f '"not a valid define-record-type keyword" Z3ae3@kwd) (if (Z2eb7@bound-id-member? Z3ae3@kwd Z3ada@seen*) (Z3192@syntax-violation '#f '"duplicate use of keyword " Z3ad1@x Z3ae3@kwd) (Z3add@f (cdr Z3ad9@cls*) (cons Z3ae3@kwd Z3ada@seen*))))) Z3ae1@ls/false) (let ((Z3ae7@t Z3adf@t)) (let ((Z3ae9@ls/false (Z30b2@syntax-dispatch Z3ae7@t 'any))) (if Z3ae9@ls/false (apply (lambda (Z3aeb@cls) (Z3192@syntax-violation '#f '"malformed define-record-type clause" Z3aeb@cls)) Z3ae9@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3ae7@t))))))) (void))))))) (let ((Z3ac9@t Z3aa5@x)) (let ((Z3acb@ls/false (Z30b2@syntax-dispatch Z3ac9@t '(_ any . each-any)))) (if Z3acb@ls/false (apply (lambda (Z3acd@namespec Z3ace@clause*) (begin (Z3ac8@verify-clauses Z3aa5@x Z3ace@clause*) (Z3ac6@do-define-record Z3acd@namespec Z3ace@clause*))) Z3acb@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3ac9@t))))))) (set! Z4bb8@Z30a6@define-record-type-macro Z30a6@define-record-type-macro) (set! Z30a8@define-condition-type-macro (lambda (Z3ca1@x) (letrec* ((Z3ca4@mkname (lambda (Z3cd1@name Z3cd2@suffix) (Z3196@datum->syntax Z3cd1@name (string->symbol (string-append (symbol->string (Z3198@syntax->datum Z3cd1@name)) Z3cd2@suffix)))))) (let ((Z3ca5@t Z3ca1@x)) (let ((Z3ca7@ls/false (Z30b2@syntax-dispatch Z3ca5@t '(any any any any any . #(each (any any)))))) (if (and Z3ca7@ls/false (apply (lambda (Z3ca9@ctxt Z3caa@name Z3cab@super Z3cac@constructor Z3cad@predicate Z3cae@field* Z3caf@accessor*) (and (Z2eab@id? Z3caa@name) (Z2eab@id? Z3cab@super) (Z2eab@id? Z3cac@constructor) (Z2eab@id? Z3cad@predicate) (for-all Z2eab@id? Z3cae@field*) (for-all Z2eab@id? Z3caf@accessor*))) Z3ca7@ls/false)) (apply (lambda (Z3cb7@ctxt Z3cb8@name Z3cb9@super Z3cba@constructor Z3cbb@predicate Z3cbc@field* Z3cbd@accessor*) (let ((Z3cc5@aux-accessor* (map (lambda (Z3cc7@x) (gensym)) Z3cbd@accessor*))) (Z3068@bless (cons 'begin (cons (cons 'define-record-type (cons (list Z3cb8@name Z3cba@constructor (gensym)) (cons (list 'parent Z3cb9@super) (cons (cons 'fields (map (lambda (Z3cc9@field Z3cca@aux) (list 'immutable Z3cc9@field Z3cca@aux)) Z3cbc@field* Z3cc5@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define Z3cbb@predicate (list 'condition-predicate (list 'record-type-descriptor Z3cb8@name))) (map (lambda (Z3ccd@accessor Z3cce@aux) (list 'define Z3ccd@accessor (list 'condition-accessor (list 'record-type-descriptor Z3cb8@name) Z3cce@aux))) Z3cbd@accessor* Z3cc5@aux-accessor*))))))) Z3ca7@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3ca5@t))))))) (set! Z4bb9@Z30a8@define-condition-type-macro Z30a8@define-condition-type-macro) (set! Z30aa@incorrect-usage-macro (lambda (Z3cd5@e) (Z3192@syntax-violation '#f '"incorrect usage of auxiliary keyword" Z3cd5@e))) (set! Z4bba@Z30aa@incorrect-usage-macro Z30aa@incorrect-usage-macro) (set! Z30ac@parameterize-macro (lambda (Z3cd7@e) (let ((Z3cd9@t Z3cd7@e)) (let ((Z3cdb@ls/false (Z30b2@syntax-dispatch Z3cd9@t '(_ () any . each-any)))) (if Z3cdb@ls/false (apply (lambda (Z3cdd@b Z3cde@b*) (Z3068@bless (cons 'let (cons '() (cons Z3cdd@b Z3cde@b*))))) Z3cdb@ls/false) (let ((Z3ce1@t Z3cd9@t)) (let ((Z3ce3@ls/false (Z30b2@syntax-dispatch Z3ce1@t '(_ #(each (any any)) any . each-any)))) (if Z3ce3@ls/false (apply (lambda (Z3ce5@olhs* Z3ce6@orhs* Z3ce7@b Z3ce8@b*) (let ((Z3ced@lhs* (Z3180@generate-temporaries Z3ce5@olhs*)) (Z3cee@rhs* (Z3180@generate-temporaries Z3ce6@orhs*))) (Z3068@bless (cons (list 'lambda (append Z3ced@lhs* Z3cee@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (Z3cf1@lhs Z3cf2@rhs) (list 'let (list (list 't (list Z3cf1@lhs))) (list Z3cf1@lhs Z3cf2@rhs) (cons 'set! (cons Z3cf2@rhs '(t))))) Z3ced@lhs* Z3cee@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons Z3ce7@b Z3ce8@b*))) '(swap)))))) (append Z3ce5@olhs* Z3ce6@orhs*))))) Z3ce3@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3ce1@t))))))))) (set! Z4bbb@Z30ac@parameterize-macro Z30ac@parameterize-macro) (set! Z30ae@foreign-call-transformer (lambda (Z3cf5@e Z3cf6@r Z3cf7@mr) (let ((Z3cfb@t Z3cf5@e)) (let ((Z3cfd@ls/false (Z30b2@syntax-dispatch Z3cfb@t '(_ any . each-any)))) (if Z3cfd@ls/false (apply (lambda (Z3cff@name Z3d00@arg*) (cons 'foreign-call (cons (Z30d4@chi-expr Z3cff@name Z3cf6@r Z3cf7@mr) (Z30d0@chi-expr* Z3d00@arg* Z3cf6@r Z3cf7@mr)))) Z3cfd@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3cfb@t)))))) (set! Z4bbc@Z30ae@foreign-call-transformer Z30ae@foreign-call-transformer) (set! Z30b0@convert-pattern (lambda (Z3d03@pattern Z3d04@keys) (letrec* ((Z3d08@cvt* (lambda (Z3da7@p* Z3da8@n Z3da9@ids) (if (null? Z3da7@p*) (values '() Z3da9@ids) (call-with-values (lambda () (Z3d08@cvt* (cdr Z3da7@p*) Z3da8@n Z3da9@ids)) (lambda (Z3db1@Z3dae Z3db2@Z3db0) (let ((Z3db5@ids Z3db2@Z3db0) (Z3db6@y Z3db1@Z3dae)) (call-with-values (lambda () (Z3d0a@cvt (car Z3da7@p*) Z3da8@n Z3db5@ids)) (lambda (Z3dbd@Z3dba Z3dbe@Z3dbc) (let ((Z3dc1@ids Z3dbe@Z3dbc) (Z3dc2@x Z3dbd@Z3dba)) (values (cons Z3dc2@x Z3db6@y) Z3dc1@ids)))))))))) (Z3d0a@cvt (lambda (Z3d0b@p Z3d0c@n Z3d0d@ids) (let ((Z3d11@t Z3d0b@p)) (let ((Z3d13@ls/false (Z30b2@syntax-dispatch Z3d11@t 'any))) (if (and Z3d13@ls/false (apply (lambda (Z3d15@id) (Z2eab@id? Z3d15@id)) Z3d13@ls/false)) (apply (lambda (Z3d17@id) (if (Z2eb7@bound-id-member? Z3d0b@p Z3d04@keys) (values (vector 'free-id Z3d0b@p) Z3d0d@ids) (if (Z2eb1@free-id=? Z3d0b@p (Z303a@scheme-stx '_)) (values '_ Z3d0d@ids) (values 'any (cons (cons Z3d0b@p Z3d0c@n) Z3d0d@ids))))) Z3d13@ls/false) (let ((Z3d19@t Z3d11@t)) (let ((Z3d1b@ls/false (Z30b2@syntax-dispatch Z3d19@t '(any any)))) (if (and Z3d1b@ls/false (apply (lambda (Z3d1d@p Z3d1e@dots) (Z30b4@ellipsis? Z3d1e@dots)) Z3d1b@ls/false)) (apply (lambda (Z3d21@p Z3d22@dots) (call-with-values (lambda () (Z3d0a@cvt Z3d21@p (+ Z3d0c@n '1) Z3d0d@ids)) (lambda (Z3d29@Z3d26 Z3d2a@Z3d28) (let ((Z3d2d@ids Z3d2a@Z3d28) (Z3d2e@p Z3d29@Z3d26)) (values (if (eq? Z3d2e@p 'any) 'each-any (vector 'each Z3d2e@p)) Z3d2d@ids))))) Z3d1b@ls/false) (let ((Z3d31@t Z3d19@t)) (let ((Z3d33@ls/false (Z30b2@syntax-dispatch Z3d31@t '(any any . #(each+ any () any))))) (if (and Z3d33@ls/false (apply (lambda (Z3d35@x Z3d36@dots Z3d37@ys Z3d38@z) (Z30b4@ellipsis? Z3d36@dots)) Z3d33@ls/false)) (apply (lambda (Z3d3d@x Z3d3e@dots Z3d3f@ys Z3d40@z) (call-with-values (lambda () (Z3d0a@cvt Z3d40@z Z3d0c@n Z3d0d@ids)) (lambda (Z3d49@Z3d46 Z3d4a@Z3d48) (let ((Z3d4d@ids Z3d4a@Z3d48) (Z3d4e@z Z3d49@Z3d46)) (call-with-values (lambda () (Z3d08@cvt* Z3d3f@ys Z3d0c@n Z3d4d@ids)) (lambda (Z3d55@Z3d52 Z3d56@Z3d54) (let ((Z3d59@ids Z3d56@Z3d54) (Z3d5a@ys Z3d55@Z3d52)) (call-with-values (lambda () (Z3d0a@cvt Z3d3d@x (+ Z3d0c@n '1) Z3d59@ids)) (lambda (Z3d61@Z3d5e Z3d62@Z3d60) (let ((Z3d65@ids Z3d62@Z3d60) (Z3d66@x Z3d61@Z3d5e)) (values (vector 'each+ Z3d66@x (reverse Z3d5a@ys) Z3d4e@z) Z3d65@ids))))))))))) Z3d33@ls/false) (let ((Z3d69@t Z3d31@t)) (let ((Z3d6b@ls/false (Z30b2@syntax-dispatch Z3d69@t '(any . any)))) (if Z3d6b@ls/false (apply (lambda (Z3d6d@x Z3d6e@y) (call-with-values (lambda () (Z3d0a@cvt Z3d6e@y Z3d0c@n Z3d0d@ids)) (lambda (Z3d75@Z3d72 Z3d76@Z3d74) (let ((Z3d79@ids Z3d76@Z3d74) (Z3d7a@y Z3d75@Z3d72)) (call-with-values (lambda () (Z3d0a@cvt Z3d6d@x Z3d0c@n Z3d79@ids)) (lambda (Z3d81@Z3d7e Z3d82@Z3d80) (let ((Z3d85@ids Z3d82@Z3d80) (Z3d86@x Z3d81@Z3d7e)) (values (cons Z3d86@x Z3d7a@y) Z3d85@ids)))))))) Z3d6b@ls/false) (let ((Z3d89@t Z3d69@t)) (let ((Z3d8b@ls/false (Z30b2@syntax-dispatch Z3d89@t '()))) (if Z3d8b@ls/false (apply (lambda () (values '() Z3d0d@ids)) Z3d8b@ls/false) (let ((Z3d8d@t Z3d89@t)) (let ((Z3d8f@ls/false (Z30b2@syntax-dispatch Z3d8d@t '#(vector each-any)))) (if (and Z3d8f@ls/false (apply (lambda (Z3d91@p) (not (Z2e77@stx? Z3d91@p))) Z3d8f@ls/false)) (apply (lambda (Z3d93@p) (call-with-values (lambda () (Z3d0a@cvt Z3d93@p Z3d0c@n Z3d0d@ids)) (lambda (Z3d99@Z3d96 Z3d9a@Z3d98) (let ((Z3d9d@ids Z3d9a@Z3d98) (Z3d9e@p Z3d99@Z3d96)) (values (vector 'vector Z3d9e@p) Z3d9d@ids))))) Z3d8f@ls/false) (let ((Z3da1@t Z3d8d@t)) (let ((Z3da3@ls/false (Z30b2@syntax-dispatch Z3da1@t 'any))) (if Z3da3@ls/false (apply (lambda (Z3da5@datum) (values (vector 'atom (Z2ebf@stx->datum Z3da5@datum)) Z3d0d@ids)) Z3da3@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3da1@t))))))))))))))))))))))))) (Z3d0a@cvt Z3d03@pattern '0 '())))) (set! Z4bbd@Z30b0@convert-pattern Z30b0@convert-pattern) (set! Z30b2@syntax-dispatch (letrec* ((Z3dc6@stx^ (lambda (Z3ea1@e Z3ea2@m* Z3ea3@s* Z3ea4@ae*) (if (and (null? Z3ea2@m*) (null? Z3ea3@s*) (null? Z3ea4@ae*)) Z3ea1@e (Z2e93@mkstx Z3ea1@e Z3ea2@m* Z3ea3@s* Z3ea4@ae*)))) (Z3dc8@match-each (lambda (Z3e81@e Z3e82@p Z3e83@m* Z3e84@s* Z3e85@ae*) (if (pair? Z3e81@e) (let ((Z3e8b@first (Z3dd4@match (car Z3e81@e) Z3e82@p Z3e83@m* Z3e84@s* Z3e85@ae* '()))) (and Z3e8b@first (let ((Z3e8d@rest (Z3dc8@match-each (cdr Z3e81@e) Z3e82@p Z3e83@m* Z3e84@s* Z3e85@ae*))) (and Z3e8d@rest (cons Z3e8b@first Z3e8d@rest))))) (if (null? Z3e81@e) '() (if (Z2e77@stx? Z3e81@e) (and (not (Z2e31@top-marked? Z3e83@m*)) (call-with-values (lambda () (join-wraps Z3e83@m* Z3e84@s* Z3e85@ae* Z3e81@e)) (lambda (Z3e95@Z3e90 Z3e96@Z3e92 Z3e97@Z3e94) (let ((Z3e9b@ae* Z3e97@Z3e94) (Z3e9c@s* Z3e96@Z3e92) (Z3e9d@m* Z3e95@Z3e90)) (Z3dc8@match-each (Z2e79@stx-expr Z3e81@e) Z3e82@p Z3e9d@m* Z3e9c@s* Z3e9b@ae*))))) (if (Z29ef@Z28c1@annotation? Z3e81@e) (Z3dc8@match-each (Z29f1@Z28c5@annotation-expression Z3e81@e) Z3e82@p Z3e83@m* Z3e84@s* Z3e85@ae*) '#f)))))) (Z3dca@match-each+ (lambda (Z3e41@e Z3e42@x-pat Z3e43@y-pat Z3e44@z-pat Z3e45@m* Z3e46@s* Z3e47@ae* Z3e48@r) (let Z3e59@f ((Z3e51@e Z3e41@e) (Z3e52@m* Z3e45@m*) (Z3e53@s* Z3e46@s*) (Z3e54@ae* Z3e47@ae*)) (if (pair? Z3e51@e) (call-with-values (lambda () (Z3e59@f (cdr Z3e51@e) Z3e52@m* Z3e53@s* Z3e54@ae*)) (lambda (Z3e61@Z3e5c Z3e62@Z3e5e Z3e63@Z3e60) (let ((Z3e67@r Z3e63@Z3e60) (Z3e68@y-pat Z3e62@Z3e5e) (Z3e69@xr* Z3e61@Z3e5c)) (if Z3e67@r (if (null? Z3e68@y-pat) (let ((Z3e6d@xr (Z3dd4@match (car Z3e51@e) Z3e42@x-pat Z3e52@m* Z3e53@s* Z3e54@ae* '()))) (if Z3e6d@xr (values (cons Z3e6d@xr Z3e69@xr*) Z3e68@y-pat Z3e67@r) (values '#f '#f '#f))) (values '() (cdr Z3e68@y-pat) (Z3dd4@match (car Z3e51@e) (car Z3e68@y-pat) Z3e52@m* Z3e53@s* Z3e54@ae* Z3e67@r))) (values '#f '#f '#f))))) (if (Z2e77@stx? Z3e51@e) (if (Z2e31@top-marked? Z3e52@m*) (values '() Z3e43@y-pat (Z3dd4@match Z3e51@e Z3e44@z-pat Z3e52@m* Z3e53@s* Z3e54@ae* Z3e48@r)) (call-with-values (lambda () (join-wraps Z3e52@m* Z3e53@s* Z3e54@ae* Z3e51@e)) (lambda (Z3e75@Z3e70 Z3e76@Z3e72 Z3e77@Z3e74) (let ((Z3e7b@ae* Z3e77@Z3e74) (Z3e7c@s* Z3e76@Z3e72) (Z3e7d@m* Z3e75@Z3e70)) (Z3e59@f (Z2e79@stx-expr Z3e51@e) Z3e7d@m* Z3e7c@s* Z3e7b@ae*))))) (if (Z29ef@Z28c1@annotation? Z3e51@e) (Z3e59@f (Z29f1@Z28c5@annotation-expression Z3e51@e) Z3e52@m* Z3e53@s* Z3e54@ae*) (values '() Z3e43@y-pat (Z3dd4@match Z3e51@e Z3e44@z-pat Z3e52@m* Z3e53@s* Z3e54@ae* Z3e48@r)))))))) (Z3dcc@match-each-any (lambda (Z3e25@e Z3e26@m* Z3e27@s* Z3e28@ae*) (if (pair? Z3e25@e) (let ((Z3e2d@l (Z3dcc@match-each-any (cdr Z3e25@e) Z3e26@m* Z3e27@s* Z3e28@ae*))) (and Z3e2d@l (cons (Z3dc6@stx^ (car Z3e25@e) Z3e26@m* Z3e27@s* Z3e28@ae*) Z3e2d@l))) (if (null? Z3e25@e) '() (if (Z2e77@stx? Z3e25@e) (and (not (Z2e31@top-marked? Z3e26@m*)) (call-with-values (lambda () (join-wraps Z3e26@m* Z3e27@s* Z3e28@ae* Z3e25@e)) (lambda (Z3e35@Z3e30 Z3e36@Z3e32 Z3e37@Z3e34) (let ((Z3e3b@ae* Z3e37@Z3e34) (Z3e3c@s* Z3e36@Z3e32) (Z3e3d@m* Z3e35@Z3e30)) (Z3dcc@match-each-any (Z2e79@stx-expr Z3e25@e) Z3e3d@m* Z3e3c@s* Z3e3b@ae*))))) (if (Z29ef@Z28c1@annotation? Z3e25@e) (Z3dcc@match-each-any (Z29f1@Z28c5@annotation-expression Z3e25@e) Z3e26@m* Z3e27@s* Z3e28@ae*) '#f)))))) (Z3dce@match-empty (lambda (Z3e1f@p Z3e20@r) (if (null? Z3e1f@p) Z3e20@r (if (eq? Z3e1f@p '_) Z3e20@r (if (eq? Z3e1f@p 'any) (cons '() Z3e20@r) (if (pair? Z3e1f@p) (Z3dce@match-empty (car Z3e1f@p) (Z3dce@match-empty (cdr Z3e1f@p) Z3e20@r)) (if (eq? Z3e1f@p 'each-any) (cons '() Z3e20@r) (let ((Z3e23@t (vector-ref Z3e1f@p '0))) (if (memv Z3e23@t '(each)) (Z3dce@match-empty (vector-ref Z3e1f@p '1) Z3e20@r) (if (memv Z3e23@t '(each+)) (Z3dce@match-empty (vector-ref Z3e1f@p '1) (Z3dce@match-empty (reverse (vector-ref Z3e1f@p '2)) (Z3dce@match-empty (vector-ref Z3e1f@p '3) Z3e20@r))) (if (memv Z3e23@t '(free-id atom)) Z3e20@r (if (memv Z3e23@t '(scheme-id atom)) Z3e20@r (if (memv Z3e23@t '(vector)) (Z3dce@match-empty (vector-ref Z3e1f@p '1) Z3e20@r) (assertion-violation 'syntax-dispatch '"invalid pattern" Z3e1f@p)))))))))))))) (Z3dd0@combine (lambda (Z3e1b@r* Z3e1c@r) (if (null? (car Z3e1b@r*)) Z3e1c@r (cons (map car Z3e1b@r*) (Z3dd0@combine (map cdr Z3e1b@r*) Z3e1c@r))))) (Z3dd2@match* (lambda (Z3df7@e Z3df8@p Z3df9@m* Z3dfa@s* Z3dfb@ae* Z3dfc@r) (if (null? Z3df8@p) (and (null? Z3df7@e) Z3dfc@r) (if (pair? Z3df8@p) (and (pair? Z3df7@e) (Z3dd4@match (car Z3df7@e) (car Z3df8@p) Z3df9@m* Z3dfa@s* Z3dfb@ae* (Z3dd4@match (cdr Z3df7@e) (cdr Z3df8@p) Z3df9@m* Z3dfa@s* Z3dfb@ae* Z3dfc@r))) (if (eq? Z3df8@p 'each-any) (let ((Z3e03@l (Z3dcc@match-each-any Z3df7@e Z3df9@m* Z3dfa@s* Z3dfb@ae*))) (and Z3e03@l (cons Z3e03@l Z3dfc@r))) (let ((Z3e05@t (vector-ref Z3df8@p '0))) (if (memv Z3e05@t '(each)) (if (null? Z3df7@e) (Z3dce@match-empty (vector-ref Z3df8@p '1) Z3dfc@r) (let ((Z3e07@r* (Z3dc8@match-each Z3df7@e (vector-ref Z3df8@p '1) Z3df9@m* Z3dfa@s* Z3dfb@ae*))) (and Z3e07@r* (Z3dd0@combine Z3e07@r* Z3dfc@r)))) (if (memv Z3e05@t '(free-id)) (and (symbol? Z3df7@e) (Z2e31@top-marked? Z3df9@m*) (Z2eb1@free-id=? (Z3dc6@stx^ Z3df7@e Z3df9@m* Z3dfa@s* Z3dfb@ae*) (vector-ref Z3df8@p '1)) Z3dfc@r) (if (memv Z3e05@t '(scheme-id)) (and (symbol? Z3df7@e) (Z2e31@top-marked? Z3df9@m*) (Z2eb1@free-id=? (Z3dc6@stx^ Z3df7@e Z3df9@m* Z3dfa@s* Z3dfb@ae*) (Z303a@scheme-stx (vector-ref Z3df8@p '1))) Z3dfc@r) (if (memv Z3e05@t '(each+)) (call-with-values (lambda () (Z3dca@match-each+ Z3df7@e (vector-ref Z3df8@p '1) (vector-ref Z3df8@p '2) (vector-ref Z3df8@p '3) Z3df9@m* Z3dfa@s* Z3dfb@ae* Z3dfc@r)) (lambda (Z3e0f@Z3e0a Z3e10@Z3e0c Z3e11@Z3e0e) (let ((Z3e15@r Z3e11@Z3e0e) (Z3e16@y-pat Z3e10@Z3e0c) (Z3e17@xr* Z3e0f@Z3e0a)) (and Z3e15@r (null? Z3e16@y-pat) (if (null? Z3e17@xr*) (Z3dce@match-empty (vector-ref Z3df8@p '1) Z3e15@r) (Z3dd0@combine Z3e17@xr* Z3e15@r)))))) (if (memv Z3e05@t '(atom)) (and (fast-equal? (vector-ref Z3df8@p '1) (Z2ebd@strip Z3df7@e Z3df9@m*)) Z3dfc@r) (if (memv Z3e05@t '(vector)) (and (vector? Z3df7@e) (Z3dd4@match (vector->list Z3df7@e) (vector-ref Z3df8@p '1) Z3df9@m* Z3dfa@s* Z3dfb@ae* Z3dfc@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" Z3df8@p))))))))))))) (Z3dd4@match (lambda (Z3dd9@e Z3dda@p Z3ddb@m* Z3ddc@s* Z3ddd@ae* Z3dde@r) (if (not Z3dde@r) '#f (if (eq? Z3dda@p '_) Z3dde@r (if (eq? Z3dda@p 'any) (cons (Z3dc6@stx^ Z3dd9@e Z3ddb@m* Z3ddc@s* Z3ddd@ae*) Z3dde@r) (if (Z2e77@stx? Z3dd9@e) (and (not (Z2e31@top-marked? Z3ddb@m*)) (call-with-values (lambda () (join-wraps Z3ddb@m* Z3ddc@s* Z3ddd@ae* Z3dd9@e)) (lambda (Z3deb@Z3de6 Z3dec@Z3de8 Z3ded@Z3dea) (let ((Z3df1@ae* Z3ded@Z3dea) (Z3df2@s* Z3dec@Z3de8) (Z3df3@m* Z3deb@Z3de6)) (Z3dd4@match (Z2e79@stx-expr Z3dd9@e) Z3dda@p Z3df3@m* Z3df2@s* Z3df1@ae* Z3dde@r))))) (if (Z29ef@Z28c1@annotation? Z3dd9@e) (Z3dd4@match (Z29f1@Z28c5@annotation-expression Z3dd9@e) Z3dda@p Z3ddb@m* Z3ddc@s* Z3ddd@ae* Z3dde@r) (Z3dd2@match* Z3dd9@e Z3dda@p Z3ddb@m* Z3ddc@s* Z3ddd@ae* Z3dde@r))))))))) (lambda (Z3dd5@e Z3dd6@p) (Z3dd4@match Z3dd5@e Z3dd6@p '() '() '() '())))) (set! Z4bbe@Z30b2@syntax-dispatch Z30b2@syntax-dispatch) (set! Z30b4@ellipsis? (lambda (Z3ea9@x) (and (Z2eab@id? Z3ea9@x) (Z2eb1@free-id=? Z3ea9@x (Z303a@scheme-stx '...))))) (set! Z4bbf@Z30b4@ellipsis? Z30b4@ellipsis?) (set! Z30b6@underscore? (lambda (Z3eab@x) (and (Z2eab@id? Z3eab@x) (Z2eb1@free-id=? Z3eab@x (Z303a@scheme-stx '_))))) (set! Z4bc0@Z30b6@underscore? Z30b6@underscore?) (set! Z30b8@verify-literals (lambda (Z3ead@lits Z3eae@expr) (for-each (lambda (Z3eb1@x) (if (or (not (Z2eab@id? Z3eb1@x)) (Z30b4@ellipsis? Z3eb1@x) (Z30b6@underscore? Z3eb1@x)) (Z3192@syntax-violation '#f '"invalid literal" Z3eae@expr Z3eb1@x) (void))) Z3ead@lits))) (set! Z4bc1@Z30b8@verify-literals Z30b8@verify-literals) (set! Z30ba@syntax-case-transformer (letrec* ((Z3eb4@build-dispatch-call (lambda (Z3f25@pvars Z3f26@expr Z3f27@y Z3f28@r Z3f29@mr) (let ((Z3f2f@ids (map car Z3f25@pvars)) (Z3f30@levels (map cdr Z3f25@pvars))) (let ((Z3f33@labels (map Z2e37@gen-label Z3f2f@ids)) (Z3f34@new-vars (map Z2e33@gen-lexical Z3f2f@ids))) (let ((Z3f37@body (Z30d4@chi-expr (Z2e95@add-subst (Z2e6b@make-full-rib Z3f2f@ids Z3f33@labels) Z3f26@expr) (append (map (lambda (Z3f39@label Z3f3a@var Z3f3b@level) (cons Z3f39@label (Z2ec5@make-binding 'syntax (cons Z3f3a@var Z3f3b@level)))) Z3f33@labels Z3f34@new-vars (map cdr Z3f25@pvars)) Z3f28@r) Z3f29@mr))) (list '(primitive apply) (Z2e0e@Z2d40@build-lambda '#f Z3f34@new-vars Z3f37@body) Z3f27@y)))))) (Z3eb6@invalid-ids-error (lambda (Z3f19@id* Z3f1a@e Z3f1b@class) (let Z3f23@find ((Z3f1f@id* Z3f19@id*) (Z3f20@ok* '())) (if (null? Z3f1f@id*) (Z3192@syntax-violation '#f '"invalid syntax" Z3f1a@e) (if (Z2eab@id? (car Z3f1f@id*)) (if (Z2eb7@bound-id-member? (car Z3f1f@id*) Z3f20@ok*) (Z318e@syntax-error (car Z3f1f@id*) '"duplicate " Z3f1b@class) (Z3f23@find (cdr Z3f1f@id*) (cons (car Z3f1f@id*) Z3f20@ok*))) (Z318e@syntax-error (car Z3f1f@id*) '"invalid " Z3f1b@class)))))) (Z3eb8@gen-clause (lambda (Z3ef1@x Z3ef2@keys Z3ef3@clauses Z3ef4@r Z3ef5@mr Z3ef6@pat Z3ef7@fender Z3ef8@expr) (call-with-values (lambda () (Z30b0@convert-pattern Z3ef6@pat Z3ef2@keys)) (lambda (Z3f05@Z3f02 Z3f06@Z3f04) (let ((Z3f09@pvars Z3f06@Z3f04) (Z3f0a@p Z3f05@Z3f02)) (if (not (Z2eb5@distinct-bound-ids? (map car Z3f09@pvars))) (Z3eb6@invalid-ids-error (map car Z3f09@pvars) Z3ef6@pat '"pattern variable") (if (not (for-all (lambda (Z3f0d@x) (not (Z30b4@ellipsis? (car Z3f0d@x)))) Z3f09@pvars)) (Z3192@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" Z3ef6@pat) (let ((Z3f0f@y (Z2e33@gen-lexical 'tmp))) (let ((Z3f11@test (if (eq? Z3ef7@fender '#t) Z3f0f@y (let ((Z3f13@call (Z3eb4@build-dispatch-call Z3f09@pvars Z3ef7@fender Z3f0f@y Z3ef4@r Z3ef5@mr))) (list 'if Z3f0f@y Z3f13@call (list 'quote '#f)))))) (let ((Z3f15@conseq (Z3eb4@build-dispatch-call Z3f09@pvars Z3ef8@expr Z3f0f@y Z3ef4@r Z3ef5@mr))) (let ((Z3f17@altern (Z3eba@gen-syntax-case Z3ef1@x Z3ef2@keys Z3ef3@clauses Z3ef4@r Z3ef5@mr))) (list (Z2e0e@Z2d40@build-lambda '#f (list Z3f0f@y) (list 'if Z3f11@test Z3f15@conseq Z3f17@altern)) (list '(primitive syntax-dispatch) Z3ef1@x (list 'quote Z3f0a@p)))))))))))))) (Z3eba@gen-syntax-case (lambda (Z3ecf@x Z3ed0@keys Z3ed1@clauses Z3ed2@r Z3ed3@mr) (if (null? Z3ed1@clauses) (list '(primitive syntax-error) Z3ecf@x) (let ((Z3ed9@t (car Z3ed1@clauses))) (let ((Z3edb@ls/false (Z30b2@syntax-dispatch Z3ed9@t '(any any)))) (if Z3edb@ls/false (apply (lambda (Z3edd@pat Z3ede@expr) (if (and (Z2eab@id? Z3edd@pat) (not (Z2eb7@bound-id-member? Z3edd@pat Z3ed0@keys)) (not (Z30b4@ellipsis? Z3edd@pat))) (if (Z2eb1@free-id=? Z3edd@pat (Z303a@scheme-stx '_)) (Z30d4@chi-expr Z3ede@expr Z3ed2@r Z3ed3@mr) (let ((Z3ee1@lab (Z2e37@gen-label Z3edd@pat)) (Z3ee2@lex (Z2e33@gen-lexical Z3edd@pat))) (let ((Z3ee5@body (Z30d4@chi-expr (Z2e95@add-subst (Z2e6b@make-full-rib (list Z3edd@pat) (list Z3ee1@lab)) Z3ede@expr) (cons (cons Z3ee1@lab (Z2ec5@make-binding 'syntax (cons Z3ee2@lex '0))) Z3ed2@r) Z3ed3@mr))) (list (Z2e0e@Z2d40@build-lambda '#f (list Z3ee2@lex) Z3ee5@body) Z3ecf@x)))) (Z3eb8@gen-clause Z3ecf@x Z3ed0@keys (cdr Z3ed1@clauses) Z3ed2@r Z3ed3@mr Z3edd@pat '#t Z3ede@expr))) Z3edb@ls/false) (let ((Z3ee7@t Z3ed9@t)) (let ((Z3ee9@ls/false (Z30b2@syntax-dispatch Z3ee7@t '(any any any)))) (if Z3ee9@ls/false (apply (lambda (Z3eeb@pat Z3eec@fender Z3eed@expr) (Z3eb8@gen-clause Z3ecf@x Z3ed0@keys (cdr Z3ed1@clauses) Z3ed2@r Z3ed3@mr Z3eeb@pat Z3eec@fender Z3eed@expr)) Z3ee9@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3ee7@t))))))))))) (lambda (Z3ebb@e Z3ebc@r Z3ebd@mr) (let ((Z3ec1@t Z3ebb@e)) (let ((Z3ec3@ls/false (Z30b2@syntax-dispatch Z3ec1@t '(_ any each-any . each-any)))) (if Z3ec3@ls/false (apply (lambda (Z3ec5@expr Z3ec6@keys Z3ec7@clauses) (begin (Z30b8@verify-literals Z3ec6@keys Z3ebb@e) (let ((Z3ecb@x (Z2e33@gen-lexical 'tmp))) (let ((Z3ecd@body (Z3eba@gen-syntax-case Z3ecb@x Z3ec6@keys Z3ec7@clauses Z3ebc@r Z3ebd@mr))) (list (Z2e0e@Z2d40@build-lambda '#f (list Z3ecb@x) Z3ecd@body) (Z30d4@chi-expr Z3ec5@expr Z3ebc@r Z3ebd@mr)))))) Z3ec3@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3ec1@t))))))) (set! Z4bc2@Z30ba@syntax-case-transformer Z30ba@syntax-case-transformer) (set! Z30bc@ellipsis-map (lambda (Z3f3f@proc Z3f40@ls . Z3f43@ls*) (letrec* ((Z3f46@who '...)) (begin (if (not (list? Z3f40@ls)) (assertion-violation Z3f46@who '"not a list" Z3f40@ls) (void)) (if (not (null? Z3f43@ls*)) (let ((Z3f47@n (length Z3f40@ls))) (for-each (lambda (Z3f49@x) (begin (if (not (list? Z3f49@x)) (assertion-violation Z3f46@who '"not a list" Z3f49@x) (void)) (if (not (= (length Z3f49@x) Z3f47@n)) (assertion-violation Z3f46@who '"length mismatch" Z3f40@ls Z3f49@x) (void)))) Z3f43@ls*)) (void)) (apply map Z3f3f@proc Z3f40@ls Z3f43@ls*))))) (set! Z4bc3@Z30bc@ellipsis-map Z30bc@ellipsis-map) (set! Z30be@syntax-transformer (letrec* ((Z3f4c@gen-syntax (lambda (Z3fc3@src Z3fc4@e Z3fc5@r Z3fc6@maps Z3fc7@ellipsis? Z3fc8@vec?) (let ((Z3fcf@t Z3fc4@e)) (let ((Z3fd1@ls/false (Z30b2@syntax-dispatch Z3fcf@t 'any))) (if (and Z3fd1@ls/false (apply (lambda (Z3fd3@dots) (Z3fc7@ellipsis? Z3fd3@dots)) Z3fd1@ls/false)) (apply (lambda (Z3fd5@dots) (Z3192@syntax-violation '#f '"misplaced ellipsis in syntax form" Z3fc3@src)) Z3fd1@ls/false) (let ((Z3fd7@t Z3fcf@t)) (let ((Z3fd9@ls/false (Z30b2@syntax-dispatch Z3fd7@t 'any))) (if (and Z3fd9@ls/false (apply (lambda (Z3fdb@id) (Z2eab@id? Z3fdb@id)) Z3fd9@ls/false)) (apply (lambda (Z3fdd@id) (let ((Z3fdf@label (Z2ec1@id->label Z3fc4@e))) (let ((Z3fe1@b (Z2ec3@label->binding Z3fdf@label Z3fc5@r))) (if (eq? (Z2ec7@binding-type Z3fe1@b) 'syntax) (call-with-values (lambda () (let ((Z3fe7@var.lev (Z2ec9@binding-value Z3fe1@b))) (Z3f4e@gen-ref Z3fc3@src (car Z3fe7@var.lev) (cdr Z3fe7@var.lev) Z3fc6@maps))) (lambda (Z3fe9@Z3fe4 Z3fea@Z3fe6) (let ((Z3fed@maps Z3fea@Z3fe6) (Z3fee@var Z3fe9@Z3fe4)) (values (list 'ref Z3fee@var) Z3fed@maps)))) (values (list 'quote Z3fc4@e) Z3fc6@maps))))) Z3fd9@ls/false) (let ((Z3ff1@t Z3fd7@t)) (let ((Z3ff3@ls/false (Z30b2@syntax-dispatch Z3ff1@t '(any any)))) (if (and Z3ff3@ls/false (apply (lambda (Z3ff5@dots Z3ff6@e) (Z3fc7@ellipsis? Z3ff5@dots)) Z3ff3@ls/false)) (apply (lambda (Z3ff9@dots Z3ffa@e) (if Z3fc8@vec? (Z3192@syntax-violation '#f '"misplaced ellipsis in syntax form" Z3fc3@src) (Z3f4c@gen-syntax Z3fc3@src Z3ffa@e Z3fc5@r Z3fc6@maps (lambda (Z3ffd@x) '#f) '#f))) Z3ff3@ls/false) (let ((Z3fff@t Z3ff1@t)) (let ((Z4001@ls/false (Z30b2@syntax-dispatch Z3fff@t '(any any . any)))) (if (and Z4001@ls/false (apply (lambda (Z4003@x Z4004@dots Z4005@y) (Z3fc7@ellipsis? Z4004@dots)) Z4001@ls/false)) (apply (lambda (Z4009@x Z400a@dots Z400b@y) (let Z4021@f ((Z400f@y Z400b@y) (Z4010@k (lambda (Z4013@maps) (call-with-values (lambda () (Z3f4c@gen-syntax Z3fc3@src Z4009@x Z3fc5@r (cons '() Z4013@maps) Z3fc7@ellipsis? '#f)) (lambda (Z4019@Z4016 Z401a@Z4018) (let ((Z401d@maps Z401a@Z4018) (Z401e@x Z4019@Z4016)) (if (null? (car Z401d@maps)) (Z3192@syntax-violation '#f '"extra ellipsis in syntax form" Z3fc3@src) (values (Z3f54@gen-map Z401e@x (car Z401d@maps)) (cdr Z401d@maps))))))))) (let ((Z4023@t Z400f@y)) (let ((Z4025@ls/false (Z30b2@syntax-dispatch Z4023@t '()))) (if Z4025@ls/false (apply (lambda () (Z4010@k Z3fc6@maps)) Z4025@ls/false) (let ((Z4027@t Z4023@t)) (let ((Z4029@ls/false (Z30b2@syntax-dispatch Z4027@t '(any . any)))) (if (and Z4029@ls/false (apply (lambda (Z402b@dots Z402c@y) (Z3fc7@ellipsis? Z402b@dots)) Z4029@ls/false)) (apply (lambda (Z402f@dots Z4030@y) (Z4021@f Z4030@y (lambda (Z4033@maps) (call-with-values (lambda () (Z4010@k (cons '() Z4033@maps))) (lambda (Z4039@Z4036 Z403a@Z4038) (let ((Z403d@maps Z403a@Z4038) (Z403e@x Z4039@Z4036)) (if (null? (car Z403d@maps)) (Z3192@syntax-violation '#f '"extra ellipsis in syntax form" Z3fc3@src) (values (Z3f52@gen-mappend Z403e@x (car Z403d@maps)) (cdr Z403d@maps))))))))) Z4029@ls/false) (let ((Z4041@t Z4027@t)) (let ((Z4043@ls/false (Z30b2@syntax-dispatch Z4041@t '_))) (if Z4043@ls/false (apply (lambda () (call-with-values (lambda () (Z3f4c@gen-syntax Z3fc3@src Z400f@y Z3fc5@r Z3fc6@maps Z3fc7@ellipsis? Z3fc8@vec?)) (lambda (Z4049@Z4046 Z404a@Z4048) (let ((Z404d@maps Z404a@Z4048) (Z404e@y Z4049@Z4046)) (call-with-values (lambda () (Z4010@k Z404d@maps)) (lambda (Z4055@Z4052 Z4056@Z4054) (let ((Z4059@maps Z4056@Z4054) (Z405a@x Z4055@Z4052)) (values (Z3f50@gen-append Z405a@x Z404e@y) Z4059@maps)))))))) Z4043@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z4041@t)))))))))))) Z4001@ls/false) (let ((Z405d@t Z3fff@t)) (let ((Z405f@ls/false (Z30b2@syntax-dispatch Z405d@t '(any . any)))) (if Z405f@ls/false (apply (lambda (Z4061@x Z4062@y) (call-with-values (lambda () (Z3f4c@gen-syntax Z3fc3@src Z4061@x Z3fc5@r Z3fc6@maps Z3fc7@ellipsis? '#f)) (lambda (Z4069@Z4066 Z406a@Z4068) (let ((Z406d@maps Z406a@Z4068) (Z406e@xnew Z4069@Z4066)) (call-with-values (lambda () (Z3f4c@gen-syntax Z3fc3@src Z4062@y Z3fc5@r Z406d@maps Z3fc7@ellipsis? Z3fc8@vec?)) (lambda (Z4075@Z4072 Z4076@Z4074) (let ((Z4079@maps Z4076@Z4074) (Z407a@ynew Z4075@Z4072)) (values (Z3f56@gen-cons Z3fc4@e Z4061@x Z4062@y Z406e@xnew Z407a@ynew) Z4079@maps)))))))) Z405f@ls/false) (let ((Z407d@t Z405d@t)) (let ((Z407f@ls/false (Z30b2@syntax-dispatch Z407d@t '#(vector each-any)))) (if Z407f@ls/false (apply (lambda (Z4081@ls) (call-with-values (lambda () (Z3f4c@gen-syntax Z3fc3@src Z4081@ls Z3fc5@r Z3fc6@maps Z3fc7@ellipsis? '#t)) (lambda (Z4087@Z4084 Z4088@Z4086) (let ((Z408b@maps Z4088@Z4086) (Z408c@lsnew Z4087@Z4084)) (values (Z3f58@gen-vector Z3fc4@e Z4081@ls Z408c@lsnew) Z408b@maps))))) Z407f@ls/false) (let ((Z408f@t Z407d@t)) (let ((Z4091@ls/false (Z30b2@syntax-dispatch Z408f@t '_))) (if Z4091@ls/false (apply (lambda () (values (list 'quote Z3fc4@e) Z3fc6@maps)) Z4091@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z408f@t)))))))))))))))))))))))) (Z3f4e@gen-ref (lambda (Z3fa9@src Z3faa@var Z3fab@level Z3fac@maps) (if (= Z3fab@level '0) (values Z3faa@var Z3fac@maps) (if (null? Z3fac@maps) (Z3192@syntax-violation '#f '"missing ellipsis in syntax form" Z3fa9@src) (call-with-values (lambda () (Z3f4e@gen-ref Z3fa9@src Z3faa@var (- Z3fab@level '1) (cdr Z3fac@maps))) (lambda (Z3fb5@Z3fb2 Z3fb6@Z3fb4) (let ((Z3fb9@outer-maps Z3fb6@Z3fb4) (Z3fba@outer-var Z3fb5@Z3fb2)) (let ((Z3fbd@t (assq Z3fba@outer-var (car Z3fac@maps)))) (if Z3fbd@t ((lambda (Z3fbf@b) (values (cdr Z3fbf@b) Z3fac@maps)) Z3fbd@t) (let ((Z3fc1@inner-var (Z2e33@gen-lexical 'tmp))) (values Z3fc1@inner-var (cons (cons (cons Z3fba@outer-var Z3fc1@inner-var) (car Z3fac@maps)) Z3fb9@outer-maps)))))))))))) (Z3f50@gen-append (lambda (Z3fa5@x Z3fa6@y) (if (fast-equal? Z3fa6@y ''()) Z3fa5@x (list 'append Z3fa5@x Z3fa6@y)))) (Z3f52@gen-mappend (lambda (Z3fa1@e Z3fa2@map-env) (list 'apply '(primitive append) (Z3f54@gen-map Z3fa1@e Z3fa2@map-env)))) (Z3f54@gen-map (lambda (Z3f8f@e Z3f90@map-env) (let ((Z3f93@formals (map cdr Z3f90@map-env)) (Z3f94@actuals (map (lambda (Z3f97@x) (list 'ref (car Z3f97@x))) Z3f90@map-env))) (if (eq? (car Z3f8f@e) 'ref) (car Z3f94@actuals) (if (for-all (lambda (Z3f99@x) (and (eq? (car Z3f99@x) 'ref) (memq (cadr Z3f99@x) Z3f93@formals))) (cdr Z3f8f@e)) (let ((Z3f9b@args (map (let ((Z3f9d@r (map cons Z3f93@formals Z3f94@actuals))) (lambda (Z3f9f@x) (cdr (assq (cadr Z3f9f@x) Z3f9d@r)))) (cdr Z3f8f@e)))) (cons 'map (cons (list 'primitive (car Z3f8f@e)) Z3f9b@args))) (cons* 'map (list 'lambda Z3f93@formals Z3f8f@e) Z3f94@actuals)))))) (Z3f56@gen-cons (lambda (Z3f7f@e Z3f80@x Z3f81@y Z3f82@xnew Z3f83@ynew) (let ((Z3f89@t (car Z3f83@ynew))) (if (memv Z3f89@t '(quote)) (if (eq? (car Z3f82@xnew) 'quote) (let ((Z3f8b@xnew (cadr Z3f82@xnew)) (Z3f8c@ynew (cadr Z3f83@ynew))) (if (and (eq? Z3f8b@xnew Z3f80@x) (eq? Z3f8c@ynew Z3f81@y)) (list 'quote Z3f7f@e) (list 'quote (cons Z3f8b@xnew Z3f8c@ynew)))) (if (null? (cadr Z3f83@ynew)) (list 'list Z3f82@xnew) (list 'cons Z3f82@xnew Z3f83@ynew))) (if (memv Z3f89@t '(list)) (cons 'list (cons Z3f82@xnew (cdr Z3f83@ynew))) (list 'cons Z3f82@xnew Z3f83@ynew)))))) (Z3f58@gen-vector (lambda (Z3f79@e Z3f7a@ls Z3f7b@lsnew) (if (eq? (car Z3f7b@lsnew) 'quote) (if (eq? (cadr Z3f7b@lsnew) Z3f7a@ls) (list 'quote Z3f79@e) (list 'quote (list->vector (cadr Z3f7b@lsnew)))) (if (eq? (car Z3f7b@lsnew) 'list) (cons 'vector (cdr Z3f7b@lsnew)) (list 'list->vector Z3f7b@lsnew))))) (Z3f5a@regen (lambda (Z3f73@x) (let ((Z3f75@t (car Z3f73@x))) (if (memv Z3f75@t '(ref)) (cadr Z3f73@x) (if (memv Z3f75@t '(primitive)) (list 'primitive (cadr Z3f73@x)) (if (memv Z3f75@t '(quote)) (list 'quote (cadr Z3f73@x)) (if (memv Z3f75@t '(lambda)) (Z2e0e@Z2d40@build-lambda '#f (cadr Z3f73@x) (Z3f5a@regen (caddr Z3f73@x))) (if (memv Z3f75@t '(map)) (let ((Z3f77@ls (map Z3f5a@regen (cdr Z3f73@x)))) (cons '(primitive ellipsis-map) Z3f77@ls)) (cons (list 'primitive (car Z3f73@x)) (map Z3f5a@regen (cdr Z3f73@x)))))))))))) (lambda (Z3f5b@e Z3f5c@r Z3f5d@mr) (let ((Z3f61@t Z3f5b@e)) (let ((Z3f63@ls/false (Z30b2@syntax-dispatch Z3f61@t '(_ any)))) (if Z3f63@ls/false (apply (lambda (Z3f65@x) (call-with-values (lambda () (Z3f4c@gen-syntax Z3f5b@e Z3f65@x Z3f5c@r '() Z30b4@ellipsis? '#f)) (lambda (Z3f6b@Z3f68 Z3f6c@Z3f6a) (let ((Z3f6f@maps Z3f6c@Z3f6a) (Z3f70@e Z3f6b@Z3f68)) (Z3f5a@regen Z3f70@e))))) Z3f63@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z3f61@t))))))) (set! Z4bc4@Z30be@syntax-transformer Z30be@syntax-transformer) (set! Z30c0@core-macro-transformer (lambda (Z4093@name) (let ((Z4095@t Z4093@name)) (if (memv Z4095@t '(quote)) Z3062@quote-transformer (if (memv Z4095@t '(lambda)) Z3066@lambda-transformer (if (memv Z4095@t '(case-lambda)) Z3064@case-lambda-transformer (if (memv Z4095@t '(letrec)) Z304a@letrec-transformer (if (memv Z4095@t '(letrec*)) Z304c@letrec*-transformer (if (memv Z4095@t '(let)) Z3048@let-transformer (if (memv Z4095@t '(if)) Z305a@if-transformer (if (memv Z4095@t '(and)) Z305c@and-transformer (if (memv Z4095@t '(or)) Z305e@or-transformer (if (memv Z4095@t '(foreign-call)) Z30ae@foreign-call-transformer (if (memv Z4095@t '(syntax-case)) Z30ba@syntax-case-transformer (if (memv Z4095@t '(syntax)) Z30be@syntax-transformer (if (memv Z4095@t '(type-descriptor)) Z3050@type-descriptor-transformer (if (memv Z4095@t '(record-type-descriptor)) Z3052@record-type-descriptor-transformer (if (memv Z4095@t '(record-constructor-descriptor)) Z3054@record-constructor-descriptor-transformer (if (memv Z4095@t '(fluid-let-syntax)) Z304e@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" Z4093@name)))))))))))))))))))) (set! Z4bc5@Z30c0@core-macro-transformer Z30c0@core-macro-transformer) (set! Z30c2@symbol-macro (lambda (Z4097@x Z4098@set) (let ((Z409b@t Z4097@x)) (let ((Z409d@ls/false (Z30b2@syntax-dispatch Z409b@t '(_ any)))) (if (and Z409d@ls/false (apply (lambda (Z409f@name) (and (Z2eab@id? Z409f@name) (memq (Z2ead@id->sym Z409f@name) Z4098@set))) Z409d@ls/false)) (apply (lambda (Z40a1@name) (Z3068@bless (list 'quote Z40a1@name))) Z409d@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z409b@t)))))) (set! Z4bc6@Z30c2@symbol-macro Z30c2@symbol-macro) (set! Z30c4@macro-transformer (lambda (Z40a3@x) (if (procedure? Z40a3@x) Z40a3@x (if (symbol? Z40a3@x) (let ((Z40a5@t Z40a3@x)) (if (memv Z40a5@t '(define-record-type)) Z30a6@define-record-type-macro (if (memv Z40a5@t '(define-struct)) Z30a4@define-struct-macro (if (memv Z40a5@t '(include)) Z309a@include-macro (if (memv Z40a5@t '(cond)) Z3096@cond-macro (if (memv Z40a5@t '(let)) Z306e@let-macro (if (memv Z40a5@t '(do)) Z308e@do-macro (if (memv Z40a5@t '(or)) Z3092@or-macro (if (memv Z40a5@t '(and)) Z3094@and-macro (if (memv Z40a5@t '(let*)) Z3090@let*-macro (if (memv Z40a5@t '(let-values)) Z3070@let-values-macro (if (memv Z40a5@t '(let*-values)) Z3072@let*-values-macro (if (memv Z40a5@t '(syntax-rules)) Z309e@syntax-rules-macro (if (memv Z40a5@t '(quasiquote)) Z30a0@quasiquote-macro (if (memv Z40a5@t '(quasisyntax)) Z30a2@quasisyntax-macro (if (memv Z40a5@t '(with-syntax)) Z306a@with-syntax-macro (if (memv Z40a5@t '(when)) Z3056@when-macro (if (memv Z40a5@t '(unless)) Z3058@unless-macro (if (memv Z40a5@t '(case)) Z3060@case-macro (if (memv Z40a5@t '(identifier-syntax)) Z308c@identifier-syntax-macro (if (memv Z40a5@t '(time)) Z3084@time-macro (if (memv Z40a5@t '(delay)) Z3086@delay-macro (if (memv Z40a5@t '(assert)) Z3088@assert-macro (if (memv Z40a5@t '(endianness)) Z308a@endianness-macro (if (memv Z40a5@t '(guard)) Z3080@guard-macro (if (memv Z40a5@t '(define-enumeration)) Z3082@define-enumeration-macro (if (memv Z40a5@t '(trace-lambda)) Z3074@trace-lambda-macro (if (memv Z40a5@t '(trace-define)) Z3076@trace-define-macro (if (memv Z40a5@t '(trace-define-syntax)) Z3078@trace-define-syntax-macro (if (memv Z40a5@t '(trace-let-syntax)) Z307c@trace-let-syntax-macro (if (memv Z40a5@t '(trace-letrec-syntax)) Z307e@trace-letrec-syntax-macro (if (memv Z40a5@t '(define-condition-type)) Z30a8@define-condition-type-macro (if (memv Z40a5@t '(parameterize)) Z30ac@parameterize-macro (if (memv Z40a5@t '(include-into)) Z309c@include-into-macro (if (memv Z40a5@t '(eol-style)) (lambda (Z40a7@x) (Z30c2@symbol-macro Z40a7@x '(none lf cr crlf nel crnel ls))) (if (memv Z40a5@t '(error-handling-mode)) (lambda (Z40a9@x) (Z30c2@symbol-macro Z40a9@x '(ignore raise replace))) (if (memv Z40a5@t '(buffer-mode)) (lambda (Z40ab@x) (Z30c2@symbol-macro Z40ab@x '(none line block))) (if (memv Z40a5@t '(file-options)) Z2e26@file-options-macro (if (memv Z40a5@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) Z30aa@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" Z40a3@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" Z40a3@x))))) (set! Z4bc7@Z30c4@macro-transformer Z30c4@macro-transformer) (set! Z30c6@local-macro-transformer (lambda (Z40ad@x) (car Z40ad@x))) (set! Z4bc8@Z30c6@local-macro-transformer Z30c6@local-macro-transformer) (set! Z30c8@do-macro-call (lambda (Z40af@transformer Z40b0@expr Z40b1@rib) (let ((Z40b5@out (Z40af@transformer (Z2e97@add-mark Z2e8f@anti-mark '#f Z40b0@expr '#f)))) (begin (let Z40b9@f ((Z40b7@x Z40b5@out)) (if (not (Z2e77@stx? Z40b7@x)) (if (pair? Z40b7@x) (begin (Z40b9@f (car Z40b7@x)) (Z40b9@f (cdr Z40b7@x))) (if (vector? Z40b7@x) (vector-for-each Z40b9@f Z40b7@x) (if (symbol? Z40b7@x) (Z3192@syntax-violation '#f '"raw symbol encountered in output of macro" Z40b0@expr Z40b7@x) (void)))) (void))) (Z2e97@add-mark (Z2e8d@gen-mark) Z40b1@rib Z40b5@out Z40b0@expr))))) (set! Z4bc9@Z30c8@do-macro-call Z30c8@do-macro-call) (set! Z30ca@chi-macro (lambda (Z40bb@p Z40bc@e Z40bd@rib) (Z30c8@do-macro-call (Z30c4@macro-transformer Z40bb@p) Z40bc@e Z40bd@rib))) (set! Z4bca@Z30ca@chi-macro Z30ca@chi-macro) (set! Z30cc@chi-local-macro (lambda (Z40c1@p Z40c2@e Z40c3@rib) (Z30c8@do-macro-call (Z30c6@local-macro-transformer Z40c1@p) Z40c2@e Z40c3@rib))) (set! Z4bcb@Z30cc@chi-local-macro Z30cc@chi-local-macro) (set! Z30ce@chi-global-macro (lambda (Z40c7@p Z40c8@e Z40c9@rib) (let ((Z40cd@lib (car Z40c7@p)) (Z40ce@loc (cdr Z40c7@p))) (begin (Z2cc8@Z2b17@visit-library Z40cd@lib) (let ((Z40d1@x (symbol-value Z40ce@loc))) (let ((Z40d3@transformer (if (procedure? Z40d1@x) Z40d1@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" Z40d1@x)))) (Z30c8@do-macro-call Z40d3@transformer Z40c8@e Z40c9@rib))))))) (set! Z4bcc@Z30ce@chi-global-macro Z30ce@chi-global-macro) (set! Z30d0@chi-expr* (lambda (Z40d5@e* Z40d6@r Z40d7@mr) (if (null? Z40d5@e*) '() (let ((Z40db@e (Z30d4@chi-expr (car Z40d5@e*) Z40d6@r Z40d7@mr))) (cons Z40db@e (Z30d0@chi-expr* (cdr Z40d5@e*) Z40d6@r Z40d7@mr)))))) (set! Z4bcd@Z30d0@chi-expr* Z30d0@chi-expr*) (set! Z30d2@chi-application (lambda (Z40dd@e Z40de@r Z40df@mr) (let ((Z40e3@t Z40dd@e)) (let ((Z40e5@ls/false (Z30b2@syntax-dispatch Z40e3@t '(any . each-any)))) (if Z40e5@ls/false (apply (lambda (Z40e7@rator Z40e8@rands) (let ((Z40eb@rator (Z30d4@chi-expr Z40e7@rator Z40de@r Z40df@mr))) (cons Z40eb@rator (Z30d0@chi-expr* Z40e8@rands Z40de@r Z40df@mr)))) Z40e5@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z40e3@t)))))) (set! Z4bce@Z30d2@chi-application Z30d2@chi-application) (set! Z30d4@chi-expr (lambda (Z40ed@e Z40ee@r Z40ef@mr) (call-with-values (lambda () (Z2ecd@syntax-type Z40ed@e Z40ee@r)) (lambda (Z40f9@Z40f4 Z40fa@Z40f6 Z40fb@Z40f8) (let ((Z40ff@kwd Z40fb@Z40f8) (Z4100@value Z40fa@Z40f6) (Z4101@type Z40f9@Z40f4)) (let ((Z4105@t Z4101@type)) (if (memv Z4105@t '(core-macro)) (let ((Z4107@transformer (Z30c0@core-macro-transformer Z4100@value))) (Z4107@transformer Z40ed@e Z40ee@r Z40ef@mr)) (if (memv Z4105@t '(global)) (let ((Z4109@lib (car Z4100@value))) (let ((Z410b@loc (cdr Z4100@value))) (begin ((Z311a@inv-collector) Z4109@lib) Z410b@loc))) (if (memv Z4105@t '(core-prim)) (let ((Z410d@name Z4100@value)) (list 'primitive Z410d@name)) (if (memv Z4105@t '(call)) (Z30d2@chi-application Z40ed@e Z40ee@r Z40ef@mr) (if (memv Z4105@t '(lexical)) (let ((Z410f@lex (Z303c@lexical-var Z4100@value))) Z410f@lex) (if (memv Z4105@t '(global-macro global-macro!)) (Z30d4@chi-expr (Z30ce@chi-global-macro Z4100@value Z40ed@e '#f) Z40ee@r Z40ef@mr) (if (memv Z4105@t '(local-macro local-macro!)) (Z30d4@chi-expr (Z30cc@chi-local-macro Z4100@value Z40ed@e '#f) Z40ee@r Z40ef@mr) (if (memv Z4105@t '(macro macro!)) (Z30d4@chi-expr (Z30ca@chi-macro Z4100@value Z40ed@e '#f) Z40ee@r Z40ef@mr) (if (memv Z4105@t '(constant)) (let ((Z4111@datum Z4100@value)) (list 'quote Z4111@datum)) (if (memv Z4105@t '(set!)) (Z30d6@chi-set! Z40ed@e Z40ee@r Z40ef@mr) (if (memv Z4105@t '(begin)) (let ((Z4113@t Z40ed@e)) (let ((Z4115@ls/false (Z30b2@syntax-dispatch Z4113@t '(_ any . each-any)))) (if Z4115@ls/false (apply (lambda (Z4117@x Z4118@x*) (Z2e10@Z2d70@build-sequence '#f (Z30d0@chi-expr* (cons Z4117@x Z4118@x*) Z40ee@r Z40ef@mr))) Z4115@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z4113@t)))) (if (memv Z4105@t '(let-syntax letrec-syntax)) (let ((Z411b@t Z40ed@e)) (let ((Z411d@ls/false (Z30b2@syntax-dispatch Z411b@t '(_ #(each (any any)) any . each-any)))) (if (and Z411d@ls/false (apply (lambda (Z411f@xlhs* Z4120@xrhs* Z4121@xbody Z4122@xbody*) (if (not (Z2eb3@valid-bound-ids? Z411f@xlhs*)) (Z3192@syntax-violation '#f '"invalid identifiers" Z40ed@e) (void))) Z411d@ls/false)) (apply (lambda (Z4127@xlhs* Z4128@xrhs* Z4129@xbody Z412a@xbody*) (let ((Z412f@xlab* (map Z2e37@gen-label Z4127@xlhs*))) (let ((Z4131@xrib (Z2e6b@make-full-rib Z4127@xlhs* Z412f@xlab*))) (let ((Z4133@xb* (map (lambda (Z4135@x) (Z2ee3@make-eval-transformer (Z310c@expand-transformer (if (eq? Z4101@type 'let-syntax) Z4135@x (Z2e95@add-subst Z4131@xrib Z4135@x)) Z40ef@mr))) Z4128@xrhs*))) (Z2e10@Z2d70@build-sequence '#f (Z30d0@chi-expr* (map (lambda (Z4137@x) (Z2e95@add-subst Z4131@xrib Z4137@x)) (cons Z4129@xbody Z412a@xbody*)) (append (map cons Z412f@xlab* Z4133@xb*) Z40ee@r) (append (map cons Z412f@xlab* Z4133@xb*) Z40ef@mr))))))) Z411d@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z411b@t)))) (if (memv Z4105@t '(displaced-lexical)) (Z3192@syntax-violation '#f '"identifier out of context" Z40ed@e) (if (memv Z4105@t '(syntax)) (Z3192@syntax-violation '#f '"reference to pattern variable outside a syntax form" Z40ed@e) (if (memv Z4105@t '(define define-syntax module import library)) (Z3192@syntax-violation '#f (string-append (let ((Z4139@t Z4101@type)) (if (memv Z4139@t '(define)) '"a definition" (if (memv Z4139@t '(define-syntax)) '"a define-syntax" (if (memv Z4139@t '(module)) '"a module definition" (if (memv Z4139@t '(library)) '"a library definition" (if (memv Z4139@t '(import)) '"an import declaration" (if (memv Z4139@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") Z40ed@e) (if (memv Z4105@t '(mutable)) (Z3192@syntax-violation '#f '"attempt to reference an unexportable variable" Z40ed@e) (Z3192@syntax-violation '#f '"invalid expression" Z40ed@e))))))))))))))))))))))) (set! Z4bcf@Z30d4@chi-expr Z30d4@chi-expr) (set! Z30d6@chi-set! (lambda (Z413b@e Z413c@r Z413d@mr) (let ((Z4141@t Z413b@e)) (let ((Z4143@ls/false (Z30b2@syntax-dispatch Z4141@t '(_ any any)))) (if (and Z4143@ls/false (apply (lambda (Z4145@x Z4146@v) (Z2eab@id? Z4145@x)) Z4143@ls/false)) (apply (lambda (Z4149@x Z414a@v) (call-with-values (lambda () (Z2ecd@syntax-type Z4149@x Z413c@r)) (lambda (Z4153@Z414e Z4154@Z4150 Z4155@Z4152) (let ((Z4159@kwd Z4155@Z4152) (Z415a@value Z4154@Z4150) (Z415b@type Z4153@Z414e)) (let ((Z415f@t Z415b@type)) (if (memv Z415f@t '(lexical)) (begin (Z3040@set-lexical-mutable! Z415a@value '#t) (list 'set! (Z303c@lexical-var Z415a@value) (Z30d4@chi-expr Z414a@v Z413c@r Z413d@mr))) (if (memv Z415f@t '(core-prim)) (Z3192@syntax-violation '#f '"cannot modify imported core primitive" Z413b@e) (if (memv Z415f@t '(global)) (Z3192@syntax-violation '#f '"attempt to modify imported binding" Z413b@e) (if (memv Z415f@t '(global-macro!)) (Z30d4@chi-expr (Z30ce@chi-global-macro Z415a@value Z413b@e '#f) Z413c@r Z413d@mr) (if (memv Z415f@t '(local-macro!)) (Z30d4@chi-expr (Z30cc@chi-local-macro Z415a@value Z413b@e '#f) Z413c@r Z413d@mr) (if (memv Z415f@t '(mutable)) (Z3192@syntax-violation '#f '"attempt to assign to an unexportable variable" Z413b@e) (Z3192@syntax-violation '#f '"invalid syntax" Z413b@e)))))))))))) Z4143@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z4141@t)))))) (set! Z4bd0@Z30d6@chi-set! Z30d6@chi-set!) (set! Z30d8@verify-formals (lambda (Z4161@fmls Z4162@stx) (let ((Z4165@t Z4161@fmls)) (let ((Z4167@ls/false (Z30b2@syntax-dispatch Z4165@t 'each-any))) (if Z4167@ls/false (apply (lambda (Z4169@x*) (if (not (Z2eb3@valid-bound-ids? Z4169@x*)) (Z306c@invalid-fmls-error Z4162@stx Z4161@fmls) (void))) Z4167@ls/false) (let ((Z416b@t Z4165@t)) (let ((Z416d@ls/false (Z30b2@syntax-dispatch Z416b@t '#(each+ any () any)))) (if Z416d@ls/false (apply (lambda (Z416f@x* Z4170@x) (if (not (Z2eb3@valid-bound-ids? (cons Z4170@x Z416f@x*))) (Z306c@invalid-fmls-error Z4162@stx Z4161@fmls) (void))) Z416d@ls/false) (let ((Z4173@t Z416b@t)) (let ((Z4175@ls/false (Z30b2@syntax-dispatch Z4173@t '_))) (if Z4175@ls/false (apply (lambda () (Z3192@syntax-violation '#f '"invalid syntax" Z4162@stx)) Z4175@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z4173@t)))))))))))) (set! Z4bd1@Z30d8@verify-formals Z30d8@verify-formals) (set! Z30da@chi-lambda-clause (lambda (Z4177@stx Z4178@fmls Z4179@body* Z417a@r Z417b@mr) (let ((Z4181@t Z4178@fmls)) (let ((Z4183@ls/false (Z30b2@syntax-dispatch Z4181@t 'each-any))) (if Z4183@ls/false (apply (lambda (Z4185@x*) (begin (Z30d8@verify-formals Z4178@fmls Z4177@stx) (let ((Z4187@lex* (map Z2e33@gen-lexical Z4185@x*)) (Z4188@lab* (map Z2e37@gen-label Z4185@x*))) (values Z4187@lex* (Z30ea@chi-internal (Z2e95@add-subst (Z2e6b@make-full-rib Z4185@x* Z4188@lab*) Z4179@body*) (Z3044@add-lexicals Z4188@lab* Z4187@lex* Z417a@r) Z417b@mr))))) Z4183@ls/false) (let ((Z418b@t Z4181@t)) (let ((Z418d@ls/false (Z30b2@syntax-dispatch Z418b@t '#(each+ any () any)))) (if Z418d@ls/false (apply (lambda (Z418f@x* Z4190@x) (begin (Z30d8@verify-formals Z4178@fmls Z4177@stx) (let ((Z4193@lex* (map Z2e33@gen-lexical Z418f@x*)) (Z4194@lab* (map Z2e37@gen-label Z418f@x*)) (Z4195@lex (Z2e33@gen-lexical Z4190@x)) (Z4196@lab (Z2e37@gen-label Z4190@x))) (values (append Z4193@lex* Z4195@lex) (Z30ea@chi-internal (Z2e95@add-subst (Z2e6b@make-full-rib (cons Z4190@x Z418f@x*) (cons Z4196@lab Z4194@lab*)) Z4179@body*) (Z3044@add-lexicals (cons Z4196@lab Z4194@lab*) (cons Z4195@lex Z4193@lex*) Z417a@r) Z417b@mr))))) Z418d@ls/false) (let ((Z419b@t Z418b@t)) (let ((Z419d@ls/false (Z30b2@syntax-dispatch Z419b@t '_))) (if Z419d@ls/false (apply (lambda () (Z3192@syntax-violation '#f '"invalid syntax" Z4178@fmls)) Z419d@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z419b@t)))))))))))) (set! Z4bd2@Z30da@chi-lambda-clause Z30da@chi-lambda-clause) (set! Z30dc@chi-lambda-clause* (lambda (Z419f@stx Z41a0@fmls* Z41a1@body** Z41a2@r Z41a3@mr) (if (null? Z41a0@fmls*) (values '() '()) (call-with-values (lambda () (Z30da@chi-lambda-clause Z419f@stx (car Z41a0@fmls*) (car Z41a1@body**) Z41a2@r Z41a3@mr)) (lambda (Z41ad@Z41aa Z41ae@Z41ac) (let ((Z41b1@b Z41ae@Z41ac) (Z41b2@a Z41ad@Z41aa)) (call-with-values (lambda () (Z30dc@chi-lambda-clause* Z419f@stx (cdr Z41a0@fmls*) (cdr Z41a1@body**) Z41a2@r Z41a3@mr)) (lambda (Z41b9@Z41b6 Z41ba@Z41b8) (let ((Z41bd@b* Z41ba@Z41b8) (Z41be@a* Z41b9@Z41b6)) (values (cons Z41b2@a Z41be@a*) (cons Z41b1@b Z41bd@b*))))))))))) (set! Z4bd3@Z30dc@chi-lambda-clause* Z30dc@chi-lambda-clause*) (set! Z30de@chi-defun (lambda (Z41c1@x Z41c2@r Z41c3@mr) (let ((Z41c7@fmls (car Z41c1@x)) (Z41c8@body* (cdr Z41c1@x))) (call-with-values (lambda () (Z30da@chi-lambda-clause Z41c7@fmls Z41c7@fmls Z41c8@body* Z41c2@r Z41c3@mr)) (lambda (Z41cf@Z41cc Z41d0@Z41ce) (let ((Z41d3@body Z41d0@Z41ce) (Z41d4@fmls Z41cf@Z41cc)) (Z2e0e@Z2d40@build-lambda '#f Z41d4@fmls Z41d3@body))))))) (set! Z4bd4@Z30de@chi-defun Z30de@chi-defun) (set! Z30e0@chi-rhs (lambda (Z41d7@rhs Z41d8@r Z41d9@mr) (let ((Z41dd@t (car Z41d7@rhs))) (if (memv Z41dd@t '(defun)) (Z30de@chi-defun (cdr Z41d7@rhs) Z41d8@r Z41d9@mr) (if (memv Z41dd@t '(expr)) (let ((Z41df@expr (cdr Z41d7@rhs))) (Z30d4@chi-expr Z41df@expr Z41d8@r Z41d9@mr)) (if (memv Z41dd@t '(top-expr)) (let ((Z41e1@expr (cdr Z41d7@rhs))) (Z2e10@Z2d70@build-sequence '#f (list (Z30d4@chi-expr Z41e1@expr Z41d8@r Z41d9@mr) (Z2e11@Z2d72@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" Z41d7@rhs))))))) (set! Z4bd5@Z30e0@chi-rhs Z30e0@chi-rhs) (set! Z30e2@expand-interaction-rhs*/init* (lambda (Z41e3@lhs* Z41e4@rhs* Z41e5@init* Z41e6@r Z41e7@mr) (let Z41f1@f ((Z41ed@lhs* Z41e3@lhs*) (Z41ee@rhs* Z41e4@rhs*)) (if (null? Z41ed@lhs*) (map (lambda (Z41f3@x) (Z30d4@chi-expr Z41f3@x Z41e6@r Z41e7@mr)) Z41e5@init*) (let ((Z41f5@lhs (car Z41ed@lhs*)) (Z41f6@rhs (car Z41ee@rhs*))) (let ((Z41f9@t (car Z41f6@rhs))) (if (memv Z41f9@t '(defun)) (let ((Z41fb@rhs (Z30de@chi-defun (cdr Z41f6@rhs) Z41e6@r Z41e7@mr))) (cons (list 'set! Z41f5@lhs Z41fb@rhs) (Z41f1@f (cdr Z41ed@lhs*) (cdr Z41ee@rhs*)))) (if (memv Z41f9@t '(expr)) (let ((Z41fd@rhs (Z30d4@chi-expr (cdr Z41f6@rhs) Z41e6@r Z41e7@mr))) (cons (list 'set! Z41f5@lhs Z41fd@rhs) (Z41f1@f (cdr Z41ed@lhs*) (cdr Z41ee@rhs*)))) (if (memv Z41f9@t '(top-expr)) (let ((Z41ff@e (Z30d4@chi-expr (cdr Z41f6@rhs) Z41e6@r Z41e7@mr))) (cons Z41ff@e (Z41f1@f (cdr Z41ed@lhs*) (cdr Z41ee@rhs*)))) (error 'expand-interaction '"invallid" Z41f6@rhs)))))))))) (set! Z4bd6@Z30e2@expand-interaction-rhs*/init* Z30e2@expand-interaction-rhs*/init*) (set! Z30e4@chi-rhs* (lambda (Z4201@rhs* Z4202@r Z4203@mr) (let Z4209@f ((Z4207@ls Z4201@rhs*)) (if (null? Z4207@ls) '() (let ((Z420b@a (Z30e0@chi-rhs (car Z4207@ls) Z4202@r Z4203@mr))) (cons Z420b@a (Z4209@f (cdr Z4207@ls)))))))) (set! Z4bd7@Z30e4@chi-rhs* Z30e4@chi-rhs*) (set! Z30e6@find-bound=? (lambda (Z420d@x Z420e@lhs* Z420f@rhs*) (if (null? Z420e@lhs*) '#f (if (Z2eaf@bound-id=? Z420d@x (car Z420e@lhs*)) (car Z420f@rhs*) (Z30e6@find-bound=? Z420d@x (cdr Z420e@lhs*) (cdr Z420f@rhs*)))))) (set! Z4bd8@Z30e6@find-bound=? Z30e6@find-bound=?) (set! Z30e8@find-dups (lambda (Z4213@ls) (let Z4219@f ((Z4215@ls Z4213@ls) (Z4216@dups '())) (if (null? Z4215@ls) Z4216@dups (let ((Z421b@t (Z30e6@find-bound=? (car Z4215@ls) (cdr Z4215@ls) (cdr Z4215@ls)))) (if Z421b@t ((lambda (Z421d@x) (Z4219@f (cdr Z4215@ls) (cons (list (car Z4215@ls) Z421d@x) Z4216@dups))) Z421b@t) (Z4219@f (cdr Z4215@ls) Z4216@dups))))))) (set! Z4bd9@Z30e8@find-dups Z30e8@find-dups) (set! Z30ea@chi-internal (lambda (Z421f@e* Z4220@r Z4221@mr) (let ((Z4225@rib (Z2e5f@make-empty-rib))) (call-with-values (lambda () (Z310a@chi-body* (map (lambda (Z4237@x) (Z2e95@add-subst Z4225@rib Z4237@x)) (Z2ea9@syntax->list Z421f@e*)) Z4220@r Z4221@mr '() '() '() '() '() Z4225@rib '#f)) (lambda (Z4239@Z4228 Z423a@Z422a Z423b@Z422c Z423c@Z422e Z423d@Z4230 Z423e@Z4232 Z423f@Z4234 Z4240@Z4236) (let ((Z4249@_exp* Z4240@Z4236) (Z424a@kwd* Z423f@Z4234) (Z424b@mod** Z423e@Z4232) (Z424c@rhs* Z423d@Z4230) (Z424d@lex* Z423c@Z422e) (Z424e@mr Z423b@Z422c) (Z424f@r Z423a@Z422a) (Z4250@e* Z4239@Z4228)) (begin (if (null? Z4250@e*) (Z3192@syntax-violation '#f '"no expression in body" Z4250@e*) (void)) (let ((Z4259@init* (Z30d0@chi-expr* (append (apply append (reverse Z424b@mod**)) Z4250@e*) Z424f@r Z424e@mr))) (let ((Z425b@rhs* (Z30e4@chi-rhs* Z424c@rhs* Z424f@r Z424e@mr))) (Z2e15@Z2d7a@build-letrec* '#f (reverse Z424d@lex*) (reverse Z425b@rhs*) (Z2e10@Z2d70@build-sequence '#f Z4259@init*))))))))))) (set! Z4bda@Z30ea@chi-internal Z30ea@chi-internal) (set! Z30ec@parse-module (lambda (Z425d@e) (let ((Z425f@t Z425d@e)) (let ((Z4261@ls/false (Z30b2@syntax-dispatch Z425f@t '(_ each-any . each-any)))) (if Z4261@ls/false (apply (lambda (Z4263@export* Z4264@b*) (begin (if (not (for-all Z2eab@id? Z4263@export*)) (Z3192@syntax-violation '#f '"module exports must be identifiers" Z425d@e) (void)) (values '#f (list->vector Z4263@export*) Z4264@b*))) Z4261@ls/false) (let ((Z4267@t Z425f@t)) (let ((Z4269@ls/false (Z30b2@syntax-dispatch Z4267@t '(_ any each-any . each-any)))) (if Z4269@ls/false (apply (lambda (Z426b@name Z426c@export* Z426d@b*) (begin (if (not (Z2eab@id? Z426b@name)) (Z3192@syntax-violation '#f '"module name must be an identifier" Z425d@e) (void)) (if (not (for-all Z2eab@id? Z426c@export*)) (Z3192@syntax-violation '#f '"module exports must be identifiers" Z425d@e) (void)) (values Z426b@name (list->vector Z426c@export*) Z426d@b*))) Z4269@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z4267@t))))))))) (set! Z4bdb@Z30ec@parse-module Z30ec@parse-module) (set! Z30f6@module-interface? (lambda (Z4271@x) (and (simple-struct? Z4271@x) (eq? (simple-struct-name Z4271@x) 'module-interface)))) (set! Z4bdc@Z30f6@module-interface? Z30f6@module-interface?) (set! Z30f8@module-interface-first-mark (lambda (Z4273@x) (simple-struct-ref Z4273@x '0))) (set! Z4bdd@Z30f8@module-interface-first-mark Z30f8@module-interface-first-mark) (set! Z30fa@set-module-interface-first-mark! (lambda (Z4275@x Z4276@val) (simple-struct-set! Z4275@x '0 Z4276@val))) (set! Z4bde@Z30fa@set-module-interface-first-mark! Z30fa@set-module-interface-first-mark!) (set! Z30fc@module-interface-exp-id-vec (lambda (Z4279@x) (simple-struct-ref Z4279@x '1))) (set! Z4bdf@Z30fc@module-interface-exp-id-vec Z30fc@module-interface-exp-id-vec) (set! Z30fe@set-module-interface-exp-id-vec! (lambda (Z427b@x Z427c@val) (simple-struct-set! Z427b@x '1 Z427c@val))) (set! Z4be0@Z30fe@set-module-interface-exp-id-vec! Z30fe@set-module-interface-exp-id-vec!) (set! Z3100@module-interface-exp-lab-vec (lambda (Z427f@x) (simple-struct-ref Z427f@x '2))) (set! Z4be1@Z3100@module-interface-exp-lab-vec Z3100@module-interface-exp-lab-vec) (set! Z3102@set-module-interface-exp-lab-vec! (lambda (Z4281@x Z4282@val) (simple-struct-set! Z4281@x '2 Z4282@val))) (set! Z4be2@Z3102@set-module-interface-exp-lab-vec! Z3102@set-module-interface-exp-lab-vec!) (set! Z3104@dummy '3) (set! Z4be3@Z3104@dummy Z3104@dummy) (set! Z3106@module-interface-exp-id* (lambda (Z4285@iface Z4286@id) (letrec* ((Z428a@diff-marks (lambda (Z4291@ls Z4292@x) (begin (if (null? Z4291@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((Z4295@a (car Z4291@ls))) (if (eq? Z4295@a Z4292@x) '() (cons Z4295@a (Z428a@diff-marks (cdr Z4291@ls) Z4292@x)))))))) (let ((Z428b@diff (Z428a@diff-marks (Z2e7d@stx-mark* Z4286@id) (Z30f8@module-interface-first-mark Z4285@iface))) (Z428c@id-vec (Z30fc@module-interface-exp-id-vec Z4285@iface))) (if (null? Z428b@diff) Z428c@id-vec (vector-map (lambda (Z428f@x) (make-simple-struct 'stx '5 (list (Z2e79@stx-expr Z428f@x) (append Z428b@diff (Z2e7d@stx-mark* Z428f@x)) '() '()))) Z428c@id-vec)))))) (set! Z4be4@Z3106@module-interface-exp-id* Z3106@module-interface-exp-id*) (set! Z3108@chi-internal-module (lambda (Z4297@e Z4298@r Z4299@mr Z429a@lex* Z429b@rhs* Z429c@mod** Z429d@kwd*) (call-with-values (lambda () (Z30ec@parse-module Z4297@e)) (lambda (Z42ab@Z42a6 Z42ac@Z42a8 Z42ad@Z42aa) (let ((Z42b1@e* Z42ad@Z42aa) (Z42b2@exp-id* Z42ac@Z42a8) (Z42b3@name Z42ab@Z42a6)) (let ((Z42b7@rib (Z2e5f@make-empty-rib))) (let ((Z42b9@e* (map (lambda (Z42bb@x) (Z2e95@add-subst Z42b7@rib Z42bb@x)) (Z2ea9@syntax->list Z42b1@e*)))) (call-with-values (lambda () (Z310a@chi-body* Z42b9@e* Z4298@r Z4299@mr Z429a@lex* Z429b@rhs* Z429c@mod** Z429d@kwd* '() Z42b7@rib '#f)) (lambda (Z42cd@Z42be Z42ce@Z42c0 Z42cf@Z42c2 Z42d0@Z42c4 Z42d1@Z42c6 Z42d2@Z42c8 Z42d3@Z42ca Z42d4@Z42cc) (let ((Z42dd@_exp* Z42d4@Z42cc) (Z42de@kwd* Z42d3@Z42ca) (Z42df@mod** Z42d2@Z42c8) (Z42e0@rhs* Z42d1@Z42c6) (Z42e1@lex* Z42d0@Z42c4) (Z42e2@mr Z42cf@Z42c2) (Z42e3@r Z42ce@Z42c0) (Z42e4@e* Z42cd@Z42be)) (let ((Z42ed@exp-lab* (vector-map (lambda (Z42f1@x) (or (Z2ec1@id->label (make-simple-struct 'stx '5 (list (Z2ead@id->sym Z42f1@x) (Z2e7d@stx-mark* Z42f1@x) (list Z42b7@rib) '()))) (Z3192@syntax-violation '#f '"cannot find module export" Z42f1@x))) Z42b2@exp-id*)) (Z42ee@mod** (cons Z42e4@e* Z42df@mod**))) (if (not Z42b3@name) (values Z42e1@lex* Z42e0@rhs* Z42b2@exp-id* Z42ed@exp-lab* Z42e3@r Z42e2@mr Z42ee@mod** Z42de@kwd*) (let ((Z42f3@lab (Z2e37@gen-label 'module)) (Z42f4@iface (make-simple-struct 'module-interface '4 (list (car (Z2e7d@stx-mark* Z42b3@name)) (vector-map (lambda (Z42f7@x) (make-simple-struct 'stx '5 (list (Z2e79@stx-expr Z42f7@x) (Z2e7d@stx-mark* Z42f7@x) '() '()))) Z42b2@exp-id*) Z42ed@exp-lab*)))) (values Z42e1@lex* Z42e0@rhs* (vector Z42b3@name) (vector Z42f3@lab) (cons (cons Z42f3@lab (cons '$module Z42f4@iface)) Z42e3@r) (cons (cons Z42f3@lab (cons '$module Z42f4@iface)) Z42e2@mr) Z42ee@mod** Z42de@kwd*)))))))))))))) (set! Z4be5@Z3108@chi-internal-module Z3108@chi-internal-module) (set! Z310a@chi-body* (lambda (Z42f9@e* Z42fa@r Z42fb@mr Z42fc@lex* Z42fd@rhs* Z42fe@mod** Z42ff@kwd* Z4300@exp* Z4301@rib Z4302@top?) (if (null? Z42f9@e*) (values Z42f9@e* Z42fa@r Z42fb@mr Z42fc@lex* Z42fd@rhs* Z42fe@mod** Z42ff@kwd* Z4300@exp*) (let ((Z430d@e (car Z42f9@e*))) (call-with-values (lambda () (Z2ecd@syntax-type Z430d@e Z42fa@r)) (lambda (Z4315@Z4310 Z4316@Z4312 Z4317@Z4314) (let ((Z431b@kwd Z4317@Z4314) (Z431c@value Z4316@Z4312) (Z431d@type Z4315@Z4310)) (let ((Z4321@kwd* (if (Z2eab@id? Z431b@kwd) (cons Z431b@kwd Z42ff@kwd*) Z42ff@kwd*))) (let ((Z4323@t Z431d@type)) (if (memv Z4323@t '(define)) (call-with-values (lambda () (Z3034@parse-define Z430d@e)) (lambda (Z4329@Z4326 Z432a@Z4328) (let ((Z432d@rhs Z432a@Z4328) (Z432e@id Z4329@Z4326)) (begin (if (Z2eb7@bound-id-member? Z432e@id Z4321@kwd*) (Z3192@syntax-violation '#f '"cannot redefine keyword" Z430d@e) (void)) (call-with-values (lambda () (Z2e3b@gen-define-label+loc Z432e@id Z4301@rib)) (lambda (Z4335@Z4332 Z4336@Z4334) (let ((Z4339@lex Z4336@Z4334) (Z433a@lab Z4335@Z4332)) (begin (Z2e61@extend-rib! Z4301@rib Z432e@id Z433a@lab) (Z310a@chi-body* (cdr Z42f9@e*) (Z3042@add-lexical Z433a@lab Z4339@lex Z42fa@r) Z42fb@mr (cons Z4339@lex Z42fc@lex*) (cons Z432d@rhs Z42fd@rhs*) Z42fe@mod** Z4321@kwd* Z4300@exp* Z4301@rib Z4302@top?))))))))) (if (memv Z4323@t '(define-syntax)) (call-with-values (lambda () (Z3036@parse-define-syntax Z430d@e)) (lambda (Z4341@Z433e Z4342@Z4340) (let ((Z4345@rhs Z4342@Z4340) (Z4346@id Z4341@Z433e)) (begin (if (Z2eb7@bound-id-member? Z4346@id Z4321@kwd*) (Z3192@syntax-violation '#f '"cannot redefine keyword" Z430d@e) (void)) (let ((Z4349@lab (Z2e3d@gen-define-label Z4346@id Z4301@rib)) (Z434a@expanded-rhs (Z310c@expand-transformer Z4345@rhs Z42fb@mr))) (begin (Z2e61@extend-rib! Z4301@rib Z4346@id Z4349@lab) (let ((Z434d@b (Z2ee3@make-eval-transformer Z434a@expanded-rhs))) (Z310a@chi-body* (cdr Z42f9@e*) (cons (cons Z4349@lab Z434d@b) Z42fa@r) (cons (cons Z4349@lab Z434d@b) Z42fb@mr) Z42fc@lex* Z42fd@rhs* Z42fe@mod** Z4321@kwd* Z4300@exp* Z4301@rib Z4302@top?)))))))) (if (memv Z4323@t '(let-syntax letrec-syntax)) (let ((Z434f@t Z430d@e)) (let ((Z4351@ls/false (Z30b2@syntax-dispatch Z434f@t '(_ #(each (any any)) . each-any)))) (if (and Z4351@ls/false (apply (lambda (Z4353@xlhs* Z4354@xrhs* Z4355@xbody*) (if (not (Z2eb3@valid-bound-ids? Z4353@xlhs*)) (Z3192@syntax-violation '#f '"invalid identifiers" Z430d@e) (void))) Z4351@ls/false)) (apply (lambda (Z4359@xlhs* Z435a@xrhs* Z435b@xbody*) (let ((Z435f@xlab* (map Z2e37@gen-label Z4359@xlhs*))) (let ((Z4361@xrib (Z2e6b@make-full-rib Z4359@xlhs* Z435f@xlab*))) (let ((Z4363@xb* (map (lambda (Z4365@x) (Z2ee3@make-eval-transformer (Z310c@expand-transformer (if (eq? Z431d@type 'let-syntax) Z4365@x (Z2e95@add-subst Z4361@xrib Z4365@x)) Z42fb@mr))) Z435a@xrhs*))) (Z310a@chi-body* (append (map (lambda (Z4367@x) (Z2e95@add-subst Z4361@xrib Z4367@x)) Z435b@xbody*) (cdr Z42f9@e*)) (append (map cons Z435f@xlab* Z4363@xb*) Z42fa@r) (append (map cons Z435f@xlab* Z4363@xb*) Z42fb@mr) Z42fc@lex* Z42fd@rhs* Z42fe@mod** Z4321@kwd* Z4300@exp* Z4301@rib Z4302@top?))))) Z4351@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z434f@t)))) (if (memv Z4323@t '(begin)) (let ((Z4369@t Z430d@e)) (let ((Z436b@ls/false (Z30b2@syntax-dispatch Z4369@t '(_ . each-any)))) (if Z436b@ls/false (apply (lambda (Z436d@x*) (Z310a@chi-body* (append Z436d@x* (cdr Z42f9@e*)) Z42fa@r Z42fb@mr Z42fc@lex* Z42fd@rhs* Z42fe@mod** Z4321@kwd* Z4300@exp* Z4301@rib Z4302@top?)) Z436b@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z4369@t)))) (if (memv Z4323@t '(global-macro global-macro!)) (Z310a@chi-body* (cons (Z30ce@chi-global-macro Z431c@value Z430d@e Z4301@rib) (cdr Z42f9@e*)) Z42fa@r Z42fb@mr Z42fc@lex* Z42fd@rhs* Z42fe@mod** Z4321@kwd* Z4300@exp* Z4301@rib Z4302@top?) (if (memv Z4323@t '(local-macro local-macro!)) (Z310a@chi-body* (cons (Z30cc@chi-local-macro Z431c@value Z430d@e Z4301@rib) (cdr Z42f9@e*)) Z42fa@r Z42fb@mr Z42fc@lex* Z42fd@rhs* Z42fe@mod** Z4321@kwd* Z4300@exp* Z4301@rib Z4302@top?) (if (memv Z4323@t '(macro macro!)) (Z310a@chi-body* (cons (Z30ca@chi-macro Z431c@value Z430d@e Z4301@rib) (cdr Z42f9@e*)) Z42fa@r Z42fb@mr Z42fc@lex* Z42fd@rhs* Z42fe@mod** Z4321@kwd* Z4300@exp* Z4301@rib Z4302@top?) (if (memv Z4323@t '(module)) (call-with-values (lambda () (Z3108@chi-internal-module Z430d@e Z42fa@r Z42fb@mr Z42fc@lex* Z42fd@rhs* Z42fe@mod** Z4321@kwd*)) (lambda (Z437f@Z4370 Z4380@Z4372 Z4381@Z4374 Z4382@Z4376 Z4383@Z4378 Z4384@Z437a Z4385@Z437c Z4386@Z437e) (let ((Z438f@kwd* Z4386@Z437e) (Z4390@mod** Z4385@Z437c) (Z4391@mr Z4384@Z437a) (Z4392@r Z4383@Z4378) (Z4393@m-exp-lab* Z4382@Z4376) (Z4394@m-exp-id* Z4381@Z4374) (Z4395@rhs* Z4380@Z4372) (Z4396@lex* Z437f@Z4370)) (begin (vector-for-each (lambda (Z439f@id Z43a0@lab) (Z2e61@extend-rib! Z4301@rib Z439f@id Z43a0@lab)) Z4394@m-exp-id* Z4393@m-exp-lab*) (Z310a@chi-body* (cdr Z42f9@e*) Z4392@r Z4391@mr Z4396@lex* Z4395@rhs* Z4390@mod** Z438f@kwd* Z4300@exp* Z4301@rib Z4302@top?))))) (if (memv Z4323@t '(library)) (begin (Z3174@library-expander (Z2ebf@stx->datum Z430d@e)) (Z310a@chi-body* (cdr Z42f9@e*) Z42fa@r Z42fb@mr Z42fc@lex* Z42fd@rhs* Z42fe@mod** Z4321@kwd* Z4300@exp* Z4301@rib Z4302@top?)) (if (memv Z4323@t '(export)) (let ((Z43a3@t Z430d@e)) (let ((Z43a5@ls/false (Z30b2@syntax-dispatch Z43a3@t '(_ . each-any)))) (if Z43a5@ls/false (apply (lambda (Z43a7@exp-decl*) (Z310a@chi-body* (cdr Z42f9@e*) Z42fa@r Z42fb@mr Z42fc@lex* Z42fd@rhs* Z42fe@mod** Z4321@kwd* (append Z43a7@exp-decl* Z4300@exp*) Z4301@rib Z4302@top?)) Z43a5@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z43a3@t)))) (if (memv Z4323@t '(import)) (letrec* ((Z43aa@module-import? (lambda (Z43fd@e) (let ((Z43ff@t Z43fd@e)) (let ((Z4401@ls/false (Z30b2@syntax-dispatch Z43ff@t '(_ any)))) (if (and Z4401@ls/false (apply (lambda (Z4403@id) (Z2eab@id? Z4403@id)) Z4401@ls/false)) (apply (lambda (Z4405@id) '#t) Z4401@ls/false) (let ((Z4407@t Z43ff@t)) (let ((Z4409@ls/false (Z30b2@syntax-dispatch Z4407@t '(_ . each-any)))) (if Z4409@ls/false (apply (lambda (Z440b@imp*) '#f) Z4409@ls/false) (let ((Z440d@t Z4407@t)) (let ((Z440f@ls/false (Z30b2@syntax-dispatch Z440d@t '_))) (if Z440f@ls/false (apply (lambda () (Z3192@syntax-violation '#f '"malformed import form" Z43fd@e)) Z440f@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z440d@t)))))))))))) (Z43ac@module-import (lambda (Z43db@e Z43dc@r) (let ((Z43df@t Z43db@e)) (let ((Z43e1@ls/false (Z30b2@syntax-dispatch Z43df@t '(_ any)))) (if (and Z43e1@ls/false (apply (lambda (Z43e3@id) (Z2eab@id? Z43e3@id)) Z43e1@ls/false)) (apply (lambda (Z43e5@id) (call-with-values (lambda () (Z2ecd@syntax-type Z43e5@id Z43dc@r)) (lambda (Z43ed@Z43e8 Z43ee@Z43ea Z43ef@Z43ec) (let ((Z43f3@kwd Z43ef@Z43ec) (Z43f4@value Z43ee@Z43ea) (Z43f5@type Z43ed@Z43e8)) (let ((Z43f9@t Z43f5@type)) (if (memv Z43f9@t '($module)) (let ((Z43fb@iface Z43f4@value)) (values (Z3106@module-interface-exp-id* Z43fb@iface Z43e5@id) (Z3100@module-interface-exp-lab-vec Z43fb@iface))) (Z3192@syntax-violation '#f '"invalid import" Z43db@e))))))) Z43e1@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z43df@t)))))) (Z43ae@library-import (lambda (Z43bf@e) (let ((Z43c1@t Z43bf@e)) (let ((Z43c3@ls/false (Z30b2@syntax-dispatch Z43c1@t '(any . each-any)))) (if Z43c3@ls/false (apply (lambda (Z43c5@ctxt Z43c6@imp*) (call-with-values (lambda () (Z3114@parse-import-spec* (Z3198@syntax->datum Z43c6@imp*))) (lambda (Z43cd@Z43ca Z43ce@Z43cc) (let ((Z43d1@subst-labels Z43ce@Z43cc) (Z43d2@subst-names Z43cd@Z43ca)) (values (vector-map (lambda (Z43d5@name) (Z2e8b@datum->stx Z43c5@ctxt Z43d5@name)) Z43d2@subst-names) Z43d1@subst-labels))))) Z43c3@ls/false) (let ((Z43d7@t Z43c1@t)) (let ((Z43d9@ls/false (Z30b2@syntax-dispatch Z43d7@t '_))) (if Z43d9@ls/false (apply (lambda () (Z3192@syntax-violation '#f '"invalid import form" Z43bf@e)) Z43d9@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z43d7@t)))))))))) (begin (call-with-values (lambda () (if (Z43aa@module-import? Z430d@e) (Z43ac@module-import Z430d@e Z42fa@r) (Z43ae@library-import Z430d@e))) (lambda (Z43b3@Z43b0 Z43b4@Z43b2) (let ((Z43b7@lab* Z43b4@Z43b2) (Z43b8@id* Z43b3@Z43b0)) (vector-for-each (lambda (Z43bb@id Z43bc@lab) (Z2e61@extend-rib! Z4301@rib Z43bb@id Z43bc@lab)) Z43b8@id* Z43b7@lab*)))) (Z310a@chi-body* (cdr Z42f9@e*) Z42fa@r Z42fb@mr Z42fc@lex* Z42fd@rhs* Z42fe@mod** Z4321@kwd* Z4300@exp* Z4301@rib Z4302@top?))) (if Z4302@top? (Z310a@chi-body* (cdr Z42f9@e*) Z42fa@r Z42fb@mr (cons (Z2e33@gen-lexical 'dummy) Z42fc@lex*) (cons (cons 'top-expr Z430d@e) Z42fd@rhs*) Z42fe@mod** Z4321@kwd* Z4300@exp* Z4301@rib Z4302@top?) (values Z42f9@e* Z42fa@r Z42fb@mr Z42fc@lex* Z42fd@rhs* Z42fe@mod** Z4321@kwd* Z4300@exp*)))))))))))))))))))))) (set! Z4be6@Z310a@chi-body* Z310a@chi-body*) (set! Z310c@expand-transformer (lambda (Z4411@expr Z4412@r) (let ((Z4415@rtc (Z3118@make-collector))) (let ((Z4417@expanded-rhs (let ((Z4421@Z441a Z311a@inv-collector) (Z4422@Z441c Z311c@vis-collector) (Z4423@Z441e Z4415@rtc) (Z4424@Z4420 (lambda (Z4429@x) (values)))) (let ((Z442b@swap (lambda () (begin (let ((Z442d@t (Z4421@Z441a))) (begin (Z4421@Z441a Z4423@Z441e) (set! Z4423@Z441e Z442d@t))) (let ((Z442f@t (Z4422@Z441c))) (begin (Z4422@Z441c Z4424@Z4420) (set! Z4424@Z4420 Z442f@t))))))) (dynamic-wind Z442b@swap (lambda () (Z30d4@chi-expr Z4411@expr Z4412@r Z4412@r)) Z442b@swap))))) (begin (for-each (let ((Z4431@mark-visit (Z311c@vis-collector))) (lambda (Z4433@x) (begin (Z2cc7@Z2b15@invoke-library Z4433@x) (Z4431@mark-visit Z4433@x)))) (Z4415@rtc)) Z4417@expanded-rhs))))) (set! Z4be7@Z310c@expand-transformer Z310c@expand-transformer) (set! Z310e@parse-exports (lambda (Z4435@exp*) (let Z443d@f ((Z4437@exp* Z4435@exp*) (Z4438@int* '()) (Z4439@ext* '())) (if (null? Z4437@exp*) (begin (if (not (Z2eb3@valid-bound-ids? Z4439@ext*)) (Z3192@syntax-violation 'export '"invalid exports" (Z30e8@find-dups Z4439@ext*)) (void)) (values (map Z3198@syntax->datum Z4439@ext*) Z4438@int*)) (let ((Z443f@t (car Z4437@exp*))) (let ((Z4441@ls/false (Z30b2@syntax-dispatch Z443f@t '(any . #(each (any any)))))) (if Z4441@ls/false (apply (lambda (Z4443@rename Z4444@i* Z4445@e*) (begin (if (not (and (eq? (Z3198@syntax->datum Z4443@rename) 'rename) (for-all Z2eab@id? Z4444@i*) (for-all Z2eab@id? Z4445@e*))) (Z3192@syntax-violation 'export '"invalid export specifier" (car Z4437@exp*)) (void)) (Z443d@f (cdr Z4437@exp*) (append Z4444@i* Z4438@int*) (append Z4445@e* Z4439@ext*)))) Z4441@ls/false) (let ((Z4449@t Z443f@t)) (let ((Z444b@ls/false (Z30b2@syntax-dispatch Z4449@t 'any))) (if Z444b@ls/false (apply (lambda (Z444d@ie) (begin (if (not (Z2eab@id? Z444d@ie)) (Z3192@syntax-violation 'export '"invalid export" Z444d@ie) (void)) (Z443d@f (cdr Z4437@exp*) (cons Z444d@ie Z4438@int*) (cons Z444d@ie Z4439@ext*)))) Z444b@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z4449@t))))))))))) (set! Z4be8@Z310e@parse-exports Z310e@parse-exports) (set! Z3110@parse-library-name (lambda (Z444f@spec) (letrec* ((Z4452@parse (lambda (Z445f@x) (let ((Z4461@t Z445f@x)) (let ((Z4463@ls/false (Z30b2@syntax-dispatch Z4461@t '(each-any)))) (if (and Z4463@ls/false (apply (lambda (Z4465@v*) (for-all (lambda (Z4467@x) (let ((Z4469@x (Z3198@syntax->datum Z4467@x))) (and (integer? Z4469@x) (exact? Z4469@x)))) Z4465@v*)) Z4463@ls/false)) (apply (lambda (Z446b@v*) (values '() (map Z3198@syntax->datum Z446b@v*))) Z4463@ls/false) (let ((Z446d@t Z4461@t)) (let ((Z446f@ls/false (Z30b2@syntax-dispatch Z446d@t '(any . any)))) (if (and Z446f@ls/false (apply (lambda (Z4471@x Z4472@rest) (symbol? (Z3198@syntax->datum Z4471@x))) Z446f@ls/false)) (apply (lambda (Z4475@x Z4476@rest) (call-with-values (lambda () (Z4452@parse Z4476@rest)) (lambda (Z447d@Z447a Z447e@Z447c) (let ((Z4481@v* Z447e@Z447c) (Z4482@x* Z447d@Z447a)) (values (cons (Z3198@syntax->datum Z4475@x) Z4482@x*) Z4481@v*))))) Z446f@ls/false) (let ((Z4485@t Z446d@t)) (let ((Z4487@ls/false (Z30b2@syntax-dispatch Z4485@t '()))) (if Z4487@ls/false (apply (lambda () (values '() '())) Z4487@ls/false) (let ((Z4489@t Z4485@t)) (let ((Z448b@ls/false (Z30b2@syntax-dispatch Z4489@t '_))) (if Z448b@ls/false (apply (lambda () (Z3192@syntax-violation '#f '"invalid library name" Z444f@spec)) Z448b@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z4489@t)))))))))))))))) (call-with-values (lambda () (Z4452@parse Z444f@spec)) (lambda (Z4457@Z4454 Z4458@Z4456) (let ((Z445b@ver* Z4458@Z4456) (Z445c@name* Z4457@Z4454)) (begin (if (null? Z445c@name*) (Z3192@syntax-violation '#f '"empty library name" Z444f@spec) (void)) (values Z445c@name* Z445b@ver*)))))))) (set! Z4be9@Z3110@parse-library-name Z3110@parse-library-name) (set! Z3112@parse-library (lambda (Z448d@e) (let ((Z448f@t Z448d@e)) (let ((Z4491@ls/false (Z30b2@syntax-dispatch Z448f@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and Z4491@ls/false (apply (lambda (Z4493@library Z4494@name* Z4495@export Z4496@exp* Z4497@import Z4498@imp* Z4499@b*) (and (eq? (Z3198@syntax->datum Z4495@export) 'export) (eq? (Z3198@syntax->datum Z4497@import) 'import) (eq? (Z3198@syntax->datum Z4493@library) 'library))) Z4491@ls/false)) (apply (lambda (Z44a1@library Z44a2@name* Z44a3@export Z44a4@exp* Z44a5@import Z44a6@imp* Z44a7@b*) (values Z44a2@name* Z44a4@exp* Z44a6@imp* Z44a7@b*)) Z4491@ls/false) (let ((Z44af@t Z448f@t)) (let ((Z44b1@ls/false (Z30b2@syntax-dispatch Z44af@t '_))) (if Z44b1@ls/false (apply (lambda () (Z3192@syntax-violation '#f '"malformed library" Z448d@e)) Z44b1@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z44af@t))))))))) (set! Z4bea@Z3112@parse-library Z3112@parse-library) (set! Z3114@parse-import-spec* (letrec* ((Z44b4@idsyn? (lambda (Z46bd@x) (symbol? (Z3198@syntax->datum Z46bd@x)))) (Z44b6@dup-error (lambda (Z46bb@name) (Z3192@syntax-violation 'import '"two imports with different bindings" Z46bb@name))) (Z44b8@merge-substs (lambda (Z46a9@s Z46aa@subst) (letrec* ((Z46ae@insert-to-subst (lambda (Z46af@a Z46b0@subst) (let ((Z46b3@name (car Z46af@a)) (Z46b4@label (cdr Z46af@a))) (let ((Z46b7@t (assq Z46b3@name Z46b0@subst))) (if Z46b7@t ((lambda (Z46b9@x) (if (eq? (cdr Z46b9@x) Z46b4@label) Z46b0@subst (Z44b6@dup-error Z46b3@name))) Z46b7@t) (cons Z46af@a Z46b0@subst))))))) (if (null? Z46a9@s) Z46aa@subst (Z46ae@insert-to-subst (car Z46a9@s) (Z44b8@merge-substs (cdr Z46a9@s) Z46aa@subst)))))) (Z44ba@exclude* (lambda (Z4679@sym* Z467a@subst) (letrec* ((Z467e@exclude (lambda (Z4697@sym Z4698@subst) (if (null? Z4698@subst) (Z3192@syntax-violation 'import '"cannot rename unbound identifier" Z4697@sym) (if (eq? Z4697@sym (caar Z4698@subst)) (values (cdar Z4698@subst) (cdr Z4698@subst)) (let ((Z469b@a (car Z4698@subst))) (call-with-values (lambda () (Z467e@exclude Z4697@sym (cdr Z4698@subst))) (lambda (Z46a1@Z469e Z46a2@Z46a0) (let ((Z46a5@subst Z46a2@Z46a0) (Z46a6@old Z46a1@Z469e)) (values Z46a6@old (cons Z469b@a Z46a5@subst))))))))))) (if (null? Z4679@sym*) (values '() Z467a@subst) (call-with-values (lambda () (Z467e@exclude (car Z4679@sym*) Z467a@subst)) (lambda (Z4683@Z4680 Z4684@Z4682) (let ((Z4687@subst Z4684@Z4682) (Z4688@old Z4683@Z4680)) (call-with-values (lambda () (Z44ba@exclude* (cdr Z4679@sym*) Z4687@subst)) (lambda (Z468f@Z468c Z4690@Z468e) (let ((Z4693@subst Z4690@Z468e) (Z4694@old* Z468f@Z468c)) (values (cons Z4688@old Z4694@old*) Z4693@subst))))))))))) (Z44bc@find* (lambda (Z4671@sym* Z4672@subst) (map (lambda (Z4675@x) (let ((Z4677@t (assq Z4675@x Z4672@subst))) (if Z4677@t (cdr Z4677@t) (Z3192@syntax-violation 'import '"cannot find identifier" Z4675@x)))) Z4671@sym*))) (Z44be@rem* (lambda (Z4669@sym* Z466a@subst) (let Z466f@f ((Z466d@subst Z466a@subst)) (if (null? Z466d@subst) '() (if (memq (caar Z466d@subst) Z4669@sym*) (Z466f@f (cdr Z466d@subst)) (cons (car Z466d@subst) (Z466f@f (cdr Z466d@subst)))))))) (Z44c0@remove-dups (lambda (Z4667@ls) (if (null? Z4667@ls) '() (if (memq (car Z4667@ls) (cdr Z4667@ls)) (Z44c0@remove-dups (cdr Z4667@ls)) (cons (car Z4667@ls) (Z44c0@remove-dups (cdr Z4667@ls))))))) (Z44c2@parse-library-name (lambda (Z457f@spec) (letrec* ((Z4582@subversion? (lambda (Z4663@x) (let ((Z4665@x (Z3198@syntax->datum Z4663@x))) (and (integer? Z4665@x) (exact? Z4665@x) (>= Z4665@x '0))))) (Z4584@subversion-pred (lambda (Z4603@x*) (let ((Z4605@t Z4603@x*)) (let ((Z4607@ls/false (Z30b2@syntax-dispatch Z4605@t 'any))) (if (and Z4607@ls/false (apply (lambda (Z4609@n) (Z4582@subversion? Z4609@n)) Z4607@ls/false)) (apply (lambda (Z460b@n) (lambda (Z460d@x) (= Z460d@x (Z3198@syntax->datum Z460b@n)))) Z4607@ls/false) (let ((Z460f@t Z4605@t)) (let ((Z4611@ls/false (Z30b2@syntax-dispatch Z460f@t '(any . each-any)))) (if (and Z4611@ls/false (apply (lambda (Z4613@p? Z4614@sub*) (eq? (Z3198@syntax->datum Z4613@p?) 'and)) Z4611@ls/false)) (apply (lambda (Z4617@p? Z4618@sub*) (let ((Z461b@p* (map Z4584@subversion-pred Z4618@sub*))) (lambda (Z461d@x) (for-all (lambda (Z461f@p) (Z461f@p Z461d@x)) Z461b@p*)))) Z4611@ls/false) (let ((Z4621@t Z460f@t)) (let ((Z4623@ls/false (Z30b2@syntax-dispatch Z4621@t '(any . each-any)))) (if (and Z4623@ls/false (apply (lambda (Z4625@p? Z4626@sub*) (eq? (Z3198@syntax->datum Z4625@p?) 'or)) Z4623@ls/false)) (apply (lambda (Z4629@p? Z462a@sub*) (let ((Z462d@p* (map Z4584@subversion-pred Z462a@sub*))) (lambda (Z462f@x) (exists (lambda (Z4631@p) (Z4631@p Z462f@x)) Z462d@p*)))) Z4623@ls/false) (let ((Z4633@t Z4621@t)) (let ((Z4635@ls/false (Z30b2@syntax-dispatch Z4633@t '(any any)))) (if (and Z4635@ls/false (apply (lambda (Z4637@p? Z4638@sub) (eq? (Z3198@syntax->datum Z4637@p?) 'not)) Z4635@ls/false)) (apply (lambda (Z463b@p? Z463c@sub) (let ((Z463f@p (Z4584@subversion-pred Z463c@sub))) (lambda (Z4641@x) (not (Z463f@p Z4641@x))))) Z4635@ls/false) (let ((Z4643@t Z4633@t)) (let ((Z4645@ls/false (Z30b2@syntax-dispatch Z4643@t '(any any)))) (if (and Z4645@ls/false (apply (lambda (Z4647@p? Z4648@n) (and (eq? (Z3198@syntax->datum Z4647@p?) '<=) (Z4582@subversion? Z4648@n))) Z4645@ls/false)) (apply (lambda (Z464b@p? Z464c@n) (lambda (Z464f@x) (<= Z464f@x (Z3198@syntax->datum Z464c@n)))) Z4645@ls/false) (let ((Z4651@t Z4643@t)) (let ((Z4653@ls/false (Z30b2@syntax-dispatch Z4651@t '(any any)))) (if (and Z4653@ls/false (apply (lambda (Z4655@p? Z4656@n) (and (eq? (Z3198@syntax->datum Z4655@p?) '>=) (Z4582@subversion? Z4656@n))) Z4653@ls/false)) (apply (lambda (Z4659@p? Z465a@n) (lambda (Z465d@x) (>= Z465d@x (Z3198@syntax->datum Z465a@n)))) Z4653@ls/false) (let ((Z465f@t Z4651@t)) (let ((Z4661@ls/false (Z30b2@syntax-dispatch Z465f@t '_))) (if Z4661@ls/false (apply (lambda () (Z3192@syntax-violation 'import '"invalid sub-version spec" Z457f@spec Z4603@x*)) Z4661@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z465f@t)))))))))))))))))))))))) (Z4586@version-pred (lambda (Z45b3@x*) (let ((Z45b5@t Z45b3@x*)) (let ((Z45b7@ls/false (Z30b2@syntax-dispatch Z45b5@t '()))) (if Z45b7@ls/false (apply (lambda () (lambda (Z45b9@x) '#t)) Z45b7@ls/false) (let ((Z45bb@t Z45b5@t)) (let ((Z45bd@ls/false (Z30b2@syntax-dispatch Z45bb@t '(any . each-any)))) (if (and Z45bd@ls/false (apply (lambda (Z45bf@c Z45c0@ver*) (eq? (Z3198@syntax->datum Z45bf@c) 'and)) Z45bd@ls/false)) (apply (lambda (Z45c3@c Z45c4@ver*) (let ((Z45c7@p* (map Z4586@version-pred Z45c4@ver*))) (lambda (Z45c9@x) (for-all (lambda (Z45cb@p) (Z45cb@p Z45c9@x)) Z45c7@p*)))) Z45bd@ls/false) (let ((Z45cd@t Z45bb@t)) (let ((Z45cf@ls/false (Z30b2@syntax-dispatch Z45cd@t '(any . each-any)))) (if (and Z45cf@ls/false (apply (lambda (Z45d1@c Z45d2@ver*) (eq? (Z3198@syntax->datum Z45d1@c) 'or)) Z45cf@ls/false)) (apply (lambda (Z45d5@c Z45d6@ver*) (let ((Z45d9@p* (map Z4586@version-pred Z45d6@ver*))) (lambda (Z45db@x) (exists (lambda (Z45dd@p) (Z45dd@p Z45db@x)) Z45d9@p*)))) Z45cf@ls/false) (let ((Z45df@t Z45cd@t)) (let ((Z45e1@ls/false (Z30b2@syntax-dispatch Z45df@t '(any any)))) (if (and Z45e1@ls/false (apply (lambda (Z45e3@c Z45e4@ver) (eq? (Z3198@syntax->datum Z45e3@c) 'not)) Z45e1@ls/false)) (apply (lambda (Z45e7@c Z45e8@ver) (let ((Z45eb@p (Z4586@version-pred Z45e8@ver))) (lambda (Z45ed@x) (not (Z45eb@p Z45ed@x))))) Z45e1@ls/false) (let ((Z45ef@t Z45df@t)) (let ((Z45f1@ls/false (Z30b2@syntax-dispatch Z45ef@t 'each-any))) (if Z45f1@ls/false (apply (lambda (Z45f3@sub*) (let ((Z45f5@p* (map Z4584@subversion-pred Z45f3@sub*))) (lambda (Z45f7@x) (let Z45fd@f ((Z45f9@p* Z45f5@p*) (Z45fa@x Z45f7@x)) (if (null? Z45f9@p*) '#t (if (null? Z45fa@x) '#f (and ((car Z45f9@p*) (car Z45fa@x)) (Z45fd@f (cdr Z45f9@p*) (cdr Z45fa@x))))))))) Z45f1@ls/false) (let ((Z45ff@t Z45ef@t)) (let ((Z4601@ls/false (Z30b2@syntax-dispatch Z45ff@t '_))) (if Z4601@ls/false (apply (lambda () (Z3192@syntax-violation 'import '"invalid version spec" Z457f@spec Z45b3@x*)) Z4601@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z45ff@t)))))))))))))))))))))) (let Z4589@f ((Z4587@x Z457f@spec)) (let ((Z458b@t Z4587@x)) (let ((Z458d@ls/false (Z30b2@syntax-dispatch Z458b@t '(each-any)))) (if Z458d@ls/false (apply (lambda (Z458f@version-spec*) (values '() (Z4586@version-pred Z458f@version-spec*))) Z458d@ls/false) (let ((Z4591@t Z458b@t)) (let ((Z4593@ls/false (Z30b2@syntax-dispatch Z4591@t '(any . any)))) (if (and Z4593@ls/false (apply (lambda (Z4595@x Z4596@x*) (Z44b4@idsyn? Z4595@x)) Z4593@ls/false)) (apply (lambda (Z4599@x Z459a@x*) (call-with-values (lambda () (Z4589@f Z459a@x*)) (lambda (Z45a1@Z459e Z45a2@Z45a0) (let ((Z45a5@pred Z45a2@Z45a0) (Z45a6@name Z45a1@Z459e)) (values (cons (Z3198@syntax->datum Z4599@x) Z45a6@name) Z45a5@pred))))) Z4593@ls/false) (let ((Z45a9@t Z4591@t)) (let ((Z45ab@ls/false (Z30b2@syntax-dispatch Z45a9@t '()))) (if Z45ab@ls/false (apply (lambda () (values '() (lambda (Z45ad@x) '#t))) Z45ab@ls/false) (let ((Z45af@t Z45a9@t)) (let ((Z45b1@ls/false (Z30b2@syntax-dispatch Z45af@t '_))) (if Z45b1@ls/false (apply (lambda () (Z3192@syntax-violation '#f '"invalid import spec" Z457f@spec)) Z45b1@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z45af@t))))))))))))))))) (Z44c4@import-library (lambda (Z456f@spec*) (call-with-values (lambda () (Z44c2@parse-library-name Z456f@spec*)) (lambda (Z4575@Z4572 Z4576@Z4574) (let ((Z4579@pred Z4576@Z4574) (Z457a@name Z4575@Z4572)) (begin (if (null? Z457a@name) (Z3192@syntax-violation 'import '"empty library name" Z456f@spec*) (void)) (let ((Z457d@lib (Z2cc0@Z2b07@find-library-by-name Z457a@name))) (begin (if (not Z457d@lib) (Z3192@syntax-violation 'import '"cannot find library with required name" Z457a@name) (void)) (if (not (Z4579@pred (Z2c9a@Z2abb@library-version Z457d@lib))) (Z3192@syntax-violation 'import '"library does not satisfy version specification" Z456f@spec* Z457d@lib) (void)) ((Z311e@imp-collector) Z457d@lib) (Z2ca2@Z2acb@library-subst Z457d@lib))))))))) (Z44c6@get-import (lambda (Z44e1@spec) (let ((Z44e3@t Z44e1@spec)) (let ((Z44e5@ls/false (Z30b2@syntax-dispatch Z44e3@t '(any . each-any)))) (if (and Z44e5@ls/false (apply (lambda (Z44e7@x Z44e8@x*) (not (memq (Z3198@syntax->datum Z44e7@x) '(for rename except only prefix library)))) Z44e5@ls/false)) (apply (lambda (Z44eb@x Z44ec@x*) (Z44c4@import-library (cons Z44eb@x Z44ec@x*))) Z44e5@ls/false) (let ((Z44ef@t Z44e3@t)) (let ((Z44f1@ls/false (Z30b2@syntax-dispatch Z44ef@t '(any any . #(each (any any)))))) (if (and Z44f1@ls/false (apply (lambda (Z44f3@rename Z44f4@isp Z44f5@old* Z44f6@new*) (and (eq? (Z3198@syntax->datum Z44f3@rename) 'rename) (for-all Z44b4@idsyn? Z44f5@old*) (for-all Z44b4@idsyn? Z44f6@new*))) Z44f1@ls/false)) (apply (lambda (Z44fb@rename Z44fc@isp Z44fd@old* Z44fe@new*) (let ((Z4503@subst (Z44c6@get-import Z44fc@isp)) (Z4504@old* (map Z3198@syntax->datum Z44fd@old*)) (Z4505@new* (map Z3198@syntax->datum Z44fe@new*))) (let ((Z4509@old-label* (Z44bc@find* Z4504@old* Z4503@subst))) (let ((Z450b@subst (Z44be@rem* Z4504@old* Z4503@subst))) (Z44b8@merge-substs (map cons Z4505@new* Z4509@old-label*) Z450b@subst))))) Z44f1@ls/false) (let ((Z450d@t Z44ef@t)) (let ((Z450f@ls/false (Z30b2@syntax-dispatch Z450d@t '(any any . each-any)))) (if (and Z450f@ls/false (apply (lambda (Z4511@except Z4512@isp Z4513@sym*) (and (eq? (Z3198@syntax->datum Z4511@except) 'except) (for-all Z44b4@idsyn? Z4513@sym*))) Z450f@ls/false)) (apply (lambda (Z4517@except Z4518@isp Z4519@sym*) (let ((Z451d@subst (Z44c6@get-import Z4518@isp))) (Z44be@rem* (map Z3198@syntax->datum Z4519@sym*) Z451d@subst))) Z450f@ls/false) (let ((Z451f@t Z450d@t)) (let ((Z4521@ls/false (Z30b2@syntax-dispatch Z451f@t '(any any . each-any)))) (if (and Z4521@ls/false (apply (lambda (Z4523@only Z4524@isp Z4525@sym*) (and (eq? (Z3198@syntax->datum Z4523@only) 'only) (for-all Z44b4@idsyn? Z4525@sym*))) Z4521@ls/false)) (apply (lambda (Z4529@only Z452a@isp Z452b@sym*) (let ((Z452f@subst (Z44c6@get-import Z452a@isp)) (Z4530@sym* (map Z3198@syntax->datum Z452b@sym*))) (let ((Z4533@sym* (Z44c0@remove-dups Z4530@sym*))) (let ((Z4535@lab* (Z44bc@find* Z4533@sym* Z452f@subst))) (map cons Z4533@sym* Z4535@lab*))))) Z4521@ls/false) (let ((Z4537@t Z451f@t)) (let ((Z4539@ls/false (Z30b2@syntax-dispatch Z4537@t '(any any any)))) (if (and Z4539@ls/false (apply (lambda (Z453b@prefix Z453c@isp Z453d@p) (and (eq? (Z3198@syntax->datum Z453b@prefix) 'prefix) (Z44b4@idsyn? Z453d@p))) Z4539@ls/false)) (apply (lambda (Z4541@prefix Z4542@isp Z4543@p) (let ((Z4547@subst (Z44c6@get-import Z4542@isp)) (Z4548@prefix (symbol->string (Z3198@syntax->datum Z4543@p)))) (map (lambda (Z454b@x) (cons (string->symbol (string-append Z4548@prefix (symbol->string (car Z454b@x)))) (cdr Z454b@x))) Z4547@subst))) Z4539@ls/false) (let ((Z454d@t Z4537@t)) (let ((Z454f@ls/false (Z30b2@syntax-dispatch Z454d@t '(any each-any)))) (if (and Z454f@ls/false (apply (lambda (Z4551@library Z4552@spec*) (eq? (Z3198@syntax->datum Z4551@library) 'library)) Z454f@ls/false)) (apply (lambda (Z4555@library Z4556@spec*) (Z44c4@import-library Z4556@spec*)) Z454f@ls/false) (let ((Z4559@t Z454d@t)) (let ((Z455b@ls/false (Z30b2@syntax-dispatch Z4559@t '(any any . any)))) (if (and Z455b@ls/false (apply (lambda (Z455d@for Z455e@isp Z455f@rest) (eq? (Z3198@syntax->datum Z455d@for) 'for)) Z455b@ls/false)) (apply (lambda (Z4563@for Z4564@isp Z4565@rest) (Z44c6@get-import Z4564@isp)) Z455b@ls/false) (let ((Z4569@t Z4559@t)) (let ((Z456b@ls/false (Z30b2@syntax-dispatch Z4569@t 'any))) (if Z456b@ls/false (apply (lambda (Z456d@spec) (Z3192@syntax-violation 'import '"invalid import spec" Z456d@spec)) Z456b@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z4569@t))))))))))))))))))))))))))) (Z44c8@add-imports! (lambda (Z44d1@imp Z44d2@h) (let ((Z44d5@subst (Z44c6@get-import Z44d1@imp))) (for-each (lambda (Z44d7@x) (let ((Z44d9@name (car Z44d7@x)) (Z44da@label (cdr Z44d7@x))) (let ((Z44dd@t (hashtable-ref Z44d2@h Z44d9@name '#f))) (if Z44dd@t ((lambda (Z44df@l) (if (not (eq? Z44df@l Z44da@label)) (Z44b6@dup-error Z44d9@name) (void))) Z44dd@t) (hashtable-set! Z44d2@h Z44d9@name Z44da@label))))) Z44d5@subst))))) (lambda (Z44c9@imp*) (let Z44cf@f ((Z44cb@imp* Z44c9@imp*) (Z44cc@h (make-eq-hashtable))) (if (null? Z44cb@imp*) (hashtable-entries Z44cc@h) (begin (Z44c8@add-imports! (car Z44cb@imp*) Z44cc@h) (Z44cf@f (cdr Z44cb@imp*) Z44cc@h))))))) (set! Z4beb@Z3114@parse-import-spec* Z3114@parse-import-spec*) (set! Z3116@make-top-rib (lambda (Z46bf@names Z46c0@labels) (let ((Z46c3@rib (Z2e5f@make-empty-rib))) (begin (vector-for-each (lambda (Z46c5@name Z46c6@label) (begin (if (not (symbol? Z46c5@name)) (error 'make-top-rib '"BUG: not a symbol" Z46c5@name) (void)) (Z2e63@extend-rib/nc! Z46c3@rib (make-simple-struct 'stx '5 (list Z46c5@name Z2e2f@top-mark* '() '())) Z46c6@label))) Z46bf@names Z46c0@labels) Z46c3@rib)))) (set! Z4bec@Z3116@make-top-rib Z3116@make-top-rib) (set! Z3118@make-collector (lambda () (let ((Z46c9@ls '())) (lambda Z46cd (let ((Z46ce (length Z46cd))) (if (= Z46ce '0) (apply (lambda () Z46c9@ls) Z46cd) (if (= Z46ce '1) (apply (lambda (Z46cb@x) (set! Z46c9@ls (Z2e28@set-cons Z46cb@x Z46c9@ls))) Z46cd) (error 'apply '"invalid arg count")))))))) (set! Z4bed@Z3118@make-collector Z3118@make-collector) (set! Z311a@inv-collector (Z29fb@Z28d9@make-parameter (lambda Z46cf@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (Z46d1@x) (begin (if (not (procedure? Z46d1@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" Z46d1@x) (void)) Z46d1@x)))) (set! Z4bee@Z311a@inv-collector Z311a@inv-collector) (set! Z311c@vis-collector (Z29fb@Z28d9@make-parameter (lambda Z46d3@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (Z46d5@x) (begin (if (not (procedure? Z46d5@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" Z46d5@x) (void)) Z46d5@x)))) (set! Z4bef@Z311c@vis-collector Z311c@vis-collector) (set! Z311e@imp-collector (Z29fb@Z28d9@make-parameter (lambda Z46d7@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (Z46d9@x) (begin (if (not (procedure? Z46d9@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" Z46d9@x) (void)) Z46d9@x)))) (set! Z4bf0@Z311e@imp-collector Z311e@imp-collector) (set! Z3120@chi-library-internal (lambda (Z46db@e* Z46dc@rib Z46dd@top?) (call-with-values (lambda () (Z310a@chi-body* Z46db@e* '() '() '() '() '() '() '() Z46dc@rib Z46dd@top?)) (lambda (Z46f1@Z46e2 Z46f2@Z46e4 Z46f3@Z46e6 Z46f4@Z46e8 Z46f5@Z46ea Z46f6@Z46ec Z46f7@Z46ee Z46f8@Z46f0) (let ((Z4701@exp* Z46f8@Z46f0) (Z4702@_kwd* Z46f7@Z46ee) (Z4703@mod** Z46f6@Z46ec) (Z4704@rhs* Z46f5@Z46ea) (Z4705@lex* Z46f4@Z46e8) (Z4706@mr Z46f3@Z46e6) (Z4707@r Z46f2@Z46e4) (Z4708@e* Z46f1@Z46e2)) (values (append (apply append (reverse Z4703@mod**)) Z4708@e*) Z4707@r Z4706@mr (reverse Z4705@lex*) (reverse Z4704@rhs*) Z4701@exp*)))))) (set! Z4bf1@Z3120@chi-library-internal Z3120@chi-library-internal) (set! Z3122@chi-interaction-expr (lambda (Z4711@e Z4712@rib Z4713@r) (call-with-values (lambda () (Z310a@chi-body* (list Z4711@e) Z4713@r Z4713@r '() '() '() '() '() Z4712@rib '#t)) (lambda (Z4727@Z4718 Z4728@Z471a Z4729@Z471c Z472a@Z471e Z472b@Z4720 Z472c@Z4722 Z472d@Z4724 Z472e@Z4726) (let ((Z4737@_exp* Z472e@Z4726) (Z4738@_kwd* Z472d@Z4724) (Z4739@mod** Z472c@Z4722) (Z473a@rhs* Z472b@Z4720) (Z473b@lex* Z472a@Z471e) (Z473c@mr Z4729@Z471c) (Z473d@r Z4728@Z471a) (Z473e@e* Z4727@Z4718)) (let ((Z4747@e* (Z30e2@expand-interaction-rhs*/init* (reverse Z473b@lex*) (reverse Z473a@rhs*) (append (apply append (reverse Z4739@mod**)) Z473e@e*) Z473d@r Z473c@mr))) (let ((Z4749@e (if (null? Z4747@e*) (Z2e11@Z2d72@build-void) (if (null? (cdr Z4747@e*)) (car Z4747@e*) (Z2e10@Z2d70@build-sequence '#f Z4747@e*))))) (values Z4749@e Z473d@r)))))))) (set! Z4bf2@Z3122@chi-interaction-expr Z3122@chi-interaction-expr) (set! Z3124@library-body-expander (lambda (Z474b@name Z474c@main-exp* Z474d@imp* Z474e@b* Z474f@top?) (letrec* ((Z4756@itc (Z3118@make-collector))) (let ((Z475f@Z4758 Z311e@imp-collector) (Z4760@Z475a Z31a2@top-level-context) (Z4761@Z475c Z4756@itc) (Z4762@Z475e '#f)) (let ((Z4767@swap (lambda () (begin (let ((Z4769@t (Z475f@Z4758))) (begin (Z475f@Z4758 Z4761@Z475c) (set! Z4761@Z475c Z4769@t))) (let ((Z476b@t (Z4760@Z475a))) (begin (Z4760@Z475a Z4762@Z475e) (set! Z4762@Z475e Z476b@t))))))) (dynamic-wind Z4767@swap (lambda () (call-with-values (lambda () (Z3114@parse-import-spec* Z474d@imp*)) (lambda (Z4771@Z476e Z4772@Z4770) (let ((Z4775@subst-labels Z4772@Z4770) (Z4776@subst-names Z4771@Z476e)) (let ((Z4779@rib (Z3116@make-top-rib Z4776@subst-names Z4775@subst-labels))) (letrec* ((Z477c@wrap (lambda (Z47f7@x) (make-simple-struct 'stx '5 (list Z47f7@x Z2e2f@top-mark* (list Z4779@rib) '()))))) (let ((Z477d@b* (map Z477c@wrap Z474e@b*)) (Z477e@main-exp* (map Z477c@wrap Z474c@main-exp*)) (Z477f@rtc (Z3118@make-collector)) (Z4780@vtc (Z3118@make-collector))) (let ((Z478d@Z4786 Z311a@inv-collector) (Z478e@Z4788 Z311c@vis-collector) (Z478f@Z478a Z477f@rtc) (Z4790@Z478c Z4780@vtc)) (let ((Z4795@swap (lambda () (begin (let ((Z4797@t (Z478d@Z4786))) (begin (Z478d@Z4786 Z478f@Z478a) (set! Z478f@Z478a Z4797@t))) (let ((Z4799@t (Z478e@Z4788))) (begin (Z478e@Z4788 Z4790@Z478c) (set! Z4790@Z478c Z4799@t))))))) (dynamic-wind Z4795@swap (lambda () (call-with-values (lambda () (Z3120@chi-library-internal Z477d@b* Z4779@rib Z474f@top?)) (lambda (Z47a7@Z479c Z47a8@Z479e Z47a9@Z47a0 Z47aa@Z47a2 Z47ab@Z47a4 Z47ac@Z47a6) (let ((Z47b3@internal-exp* Z47ac@Z47a6) (Z47b4@rhs* Z47ab@Z47a4) (Z47b5@lex* Z47aa@Z47a2) (Z47b6@mr Z47a9@Z47a0) (Z47b7@r Z47a8@Z479e) (Z47b8@init* Z47a7@Z479c)) (call-with-values (lambda () (Z310e@parse-exports (append Z477e@main-exp* Z47b3@internal-exp*))) (lambda (Z47c3@Z47c0 Z47c4@Z47c2) (let ((Z47c7@exp-id* Z47c4@Z47c2) (Z47c8@exp-name* Z47c3@Z47c0)) (begin (Z2e67@seal-rib! Z4779@rib) (let ((Z47cb@init* (Z30d0@chi-expr* Z47b8@init* Z47b7@r Z47b6@mr))) (let ((Z47cd@rhs* (Z30e4@chi-rhs* Z47b4@rhs* Z47b7@r Z47b6@mr))) (begin (Z2e69@unseal-rib! Z4779@rib) (let ((Z47cf@loc* (map Z2e35@gen-global Z47b5@lex*)) (Z47d0@export-subst (Z317c@make-export-subst Z47c8@exp-name* Z47c7@exp-id*))) (letrec* ((Z47d4@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (Z317e@make-export-env/macros Z47b5@lex* Z47cf@loc* Z47b7@r)) (lambda (Z47db@Z47d6 Z47dc@Z47d8 Z47dd@Z47da) (let ((Z47e1@macro* Z47dd@Z47da) (Z47e2@global* Z47dc@Z47d8) (Z47e3@export-env Z47db@Z47d6)) (begin (for-each (lambda (Z47e7@s) (let ((Z47e9@name (car Z47e7@s)) (Z47ea@label (cdr Z47e7@s))) (let ((Z47ed@p (assq Z47ea@label Z47e3@export-env))) (if Z47ed@p (let ((Z47ef@b (cdr Z47ed@p))) (let ((Z47f1@type (car Z47ef@b))) (if (eq? Z47f1@type 'mutable) (Z3192@syntax-violation 'export Z47d4@errstr Z47e9@name) (void)))) (void))))) Z47d0@export-subst) (let ((Z47f3@invoke-body (Z2e16@Z2d7c@build-library-letrec* '#f Z474b@name Z47b5@lex* Z47cf@loc* Z47cd@rhs* (if (null? Z47cb@init*) (Z2e11@Z2d72@build-void) (Z2e10@Z2d70@build-sequence '#f Z47cb@init*)))) (Z47f4@invoke-definitions (map Z2e0d@Z2ccf@build-global-define (map cdr Z47e2@global*)))) (values (Z4756@itc) (Z477f@rtc) (Z4780@vtc) (Z2e10@Z2d70@build-sequence '#f (append Z47f4@invoke-definitions (list Z47f3@invoke-body))) Z47e1@macro* Z47d0@export-subst Z47e3@export-env))))))))))))))))))) Z4795@swap)))))))))) Z4767@swap)))))) (set! Z4bf3@Z3124@library-body-expander Z3124@library-body-expander) (set! Z3126@core-library-expander (lambda (Z47f9@e Z47fa@verify-name) (call-with-values (lambda () (Z3112@parse-library Z47f9@e)) (lambda (Z4805@Z47fe Z4806@Z4800 Z4807@Z4802 Z4808@Z4804) (let ((Z480d@b* Z4808@Z4804) (Z480e@imp* Z4807@Z4802) (Z480f@exp* Z4806@Z4800) (Z4810@name* Z4805@Z47fe)) (call-with-values (lambda () (Z3110@parse-library-name Z4810@name*)) (lambda (Z4819@Z4816 Z481a@Z4818) (let ((Z481d@ver Z481a@Z4818) (Z481e@name Z4819@Z4816)) (begin (Z47fa@verify-name Z481e@name) (call-with-values (lambda () (Z3124@library-body-expander Z481e@name Z480f@exp* Z480e@imp* Z480d@b* '#f)) (lambda (Z482f@Z4822 Z4830@Z4824 Z4831@Z4826 Z4832@Z4828 Z4833@Z482a Z4834@Z482c Z4835@Z482e) (let ((Z483d@export-env Z4835@Z482e) (Z483e@export-subst Z4834@Z482c) (Z483f@visit-code Z4833@Z482a) (Z4840@invoke-code Z4832@Z4828) (Z4841@visit-req* Z4831@Z4826) (Z4842@invoke-req* Z4830@Z4824) (Z4843@imp* Z482f@Z4822)) (values Z481e@name Z481d@ver Z4843@imp* Z4842@invoke-req* Z4841@visit-req* Z4840@invoke-code Z483f@visit-code Z483e@export-subst Z483d@export-env))))))))))))) (set! Z4bf4@Z3126@core-library-expander Z3126@core-library-expander) (set! Z3128@parse-top-level-program (lambda (Z484b@e*) (let ((Z484d@t Z484b@e*)) (let ((Z484f@ls/false (Z30b2@syntax-dispatch Z484d@t '((any . each-any) . each-any)))) (if (and Z484f@ls/false (apply (lambda (Z4851@import Z4852@imp* Z4853@b*) (eq? (Z3198@syntax->datum Z4851@import) 'import)) Z484f@ls/false)) (apply (lambda (Z4857@import Z4858@imp* Z4859@b*) (values Z4858@imp* Z4859@b*)) Z484f@ls/false) (let ((Z485d@t Z484d@t)) (let ((Z485f@ls/false (Z30b2@syntax-dispatch Z485d@t '((any . any) . any)))) (if (and Z485f@ls/false (apply (lambda (Z4861@import Z4862@x Z4863@y) (eq? (Z3198@syntax->datum Z4861@import) 'import)) Z485f@ls/false)) (apply (lambda (Z4867@import Z4868@x Z4869@y) (Z3192@syntax-violation 'expander '"invalid syntax of top-level program" (Z2ea5@syntax-car Z484b@e*))) Z485f@ls/false) (let ((Z486d@t Z485d@t)) (let ((Z486f@ls/false (Z30b2@syntax-dispatch Z486d@t '_))) (if Z486f@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) Z486f@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z486d@t)))))))))))) (set! Z4bf5@Z3128@parse-top-level-program Z3128@parse-top-level-program) (set! Z312a@top-level-expander (lambda (Z4871@e*) (call-with-values (lambda () (Z3128@parse-top-level-program Z4871@e*)) (lambda (Z4877@Z4874 Z4878@Z4876) (let ((Z487b@b* Z4878@Z4876) (Z487c@imp* Z4877@Z4874)) (call-with-values (lambda () (Z3124@library-body-expander '() '() Z487c@imp* Z487b@b* '#t)) (lambda (Z488d@Z4880 Z488e@Z4882 Z488f@Z4884 Z4890@Z4886 Z4891@Z4888 Z4892@Z488a Z4893@Z488c) (let ((Z489b@export-env Z4893@Z488c) (Z489c@export-subst Z4892@Z488a) (Z489d@visit-code Z4891@Z4888) (Z489e@invoke-code Z4890@Z4886) (Z489f@visit-req* Z488f@Z4884) (Z48a0@invoke-req* Z488e@Z4882) (Z48a1@imp* Z488d@Z4880)) (values Z48a0@invoke-req* Z489e@invoke-code))))))))) (set! Z4bf6@Z312a@top-level-expander Z312a@top-level-expander) (set! Z312c@rp (Z29f8@Z28d3@make-record-printer 'env (lambda (Z48a9@x Z48aa@p Z48ab@wr) (display '"#<environment>" Z48aa@p)))) (set! Z4bf7@Z312c@rp Z312c@rp) (set! Z3136@env? (lambda (Z48af@x) (and (simple-struct? Z48af@x) (eq? (simple-struct-name Z48af@x) 'env)))) (set! Z4bf8@Z3136@env? Z3136@env?) (set! Z3138@env-names (lambda (Z48b1@x) (simple-struct-ref Z48b1@x '0))) (set! Z4bf9@Z3138@env-names Z3138@env-names) (set! Z313a@set-env-names! (lambda (Z48b3@x Z48b4@val) (simple-struct-set! Z48b3@x '0 Z48b4@val))) (set! Z4bfa@Z313a@set-env-names! Z313a@set-env-names!) (set! Z313c@env-labels (lambda (Z48b7@x) (simple-struct-ref Z48b7@x '1))) (set! Z4bfb@Z313c@env-labels Z313c@env-labels) (set! Z313e@set-env-labels! (lambda (Z48b9@x Z48ba@val) (simple-struct-set! Z48b9@x '1 Z48ba@val))) (set! Z4bfc@Z313e@set-env-labels! Z313e@set-env-labels!) (set! Z3140@env-itc (lambda (Z48bd@x) (simple-struct-ref Z48bd@x '2))) (set! Z4bfd@Z3140@env-itc Z3140@env-itc) (set! Z3142@set-env-itc! (lambda (Z48bf@x Z48c0@val) (simple-struct-set! Z48bf@x '2 Z48c0@val))) (set! Z4bfe@Z3142@set-env-itc! Z3142@set-env-itc!) (set! Z3144@dummy '3) (set! Z4bff@Z3144@dummy Z3144@dummy) (set! Z3146@rp (Z29f8@Z28d3@make-record-printer 'interaction-env (lambda (Z48c3@x Z48c4@p Z48c5@wr) (display '"#<environment>" Z48c4@p)))) (set! Z4c00@Z3146@rp Z3146@rp) (set! Z3150@interaction-env? (lambda (Z48c9@x) (and (simple-struct? Z48c9@x) (eq? (simple-struct-name Z48c9@x) 'interaction-env)))) (set! Z4c01@Z3150@interaction-env? Z3150@interaction-env?) (set! Z3152@interaction-env-rib (lambda (Z48cb@x) (simple-struct-ref Z48cb@x '0))) (set! Z4c02@Z3152@interaction-env-rib Z3152@interaction-env-rib) (set! Z3154@set-interaction-env-rib! (lambda (Z48cd@x Z48ce@val) (simple-struct-set! Z48cd@x '0 Z48ce@val))) (set! Z4c03@Z3154@set-interaction-env-rib! Z3154@set-interaction-env-rib!) (set! Z3156@interaction-env-r (lambda (Z48d1@x) (simple-struct-ref Z48d1@x '1))) (set! Z4c04@Z3156@interaction-env-r Z3156@interaction-env-r) (set! Z3158@set-interaction-env-r! (lambda (Z48d3@x Z48d4@val) (simple-struct-set! Z48d3@x '1 Z48d4@val))) (set! Z4c05@Z3158@set-interaction-env-r! Z3158@set-interaction-env-r!) (set! Z315a@interaction-env-locs (lambda (Z48d7@x) (simple-struct-ref Z48d7@x '2))) (set! Z4c06@Z315a@interaction-env-locs Z315a@interaction-env-locs) (set! Z315c@set-interaction-env-locs! (lambda (Z48d9@x Z48da@val) (simple-struct-set! Z48d9@x '2 Z48da@val))) (set! Z4c07@Z315c@set-interaction-env-locs! Z315c@set-interaction-env-locs!) (set! Z315e@dummy '3) (set! Z4c08@Z315e@dummy Z315e@dummy) (set! Z3160@interaction-environment-symbols (lambda () (Z3168@environment-symbols (Z31a0@interaction-environment)))) (set! Z4c09@Z3160@interaction-environment-symbols Z3160@interaction-environment-symbols) (set! Z3162@environment-bindings (lambda (Z48dd@e) (vector->list (vector-map (lambda (Z48df@name Z48e0@label) (Z3164@parse-binding (cons Z48df@name (Z2cc6@Z2b13@imported-label->binding Z48e0@label)))) (Z3138@env-names Z48dd@e) (Z313c@env-labels Z48dd@e))))) (set! Z4c0a@Z3162@environment-bindings Z3162@environment-bindings) (set! Z3164@parse-binding (lambda (Z48e3@b) (cons (car Z48e3@b) (let ((Z48e5@t (cadr Z48e3@b))) (if (memv Z48e5@t '(core-prim global)) 'procedure (if (memv Z48e5@t '(core-macro macro global-macro)) 'syntax (if (memv Z48e5@t '($core-rtd)) 'record (if (eq? (car Z48e3@b) (cadr Z48e3@b)) 'syntax 'unknown)))))))) (set! Z4c0b@Z3164@parse-binding Z3164@parse-binding) (set! Z3166@environment? (lambda (Z48e7@x) (or (Z3136@env? Z48e7@x) (Z3150@interaction-env? Z48e7@x)))) (set! Z4c0c@Z3166@environment? Z3166@environment?) (set! Z3168@environment-symbols (lambda (Z48e9@x) (if (Z3136@env? Z48e9@x) (vector->list (Z3138@env-names Z48e9@x)) (if (Z3150@interaction-env? Z48e9@x) (map values (Z2e49@rib-sym* (Z3152@interaction-env-rib Z48e9@x))) (assertion-violation 'environment-symbols '"not an environment" Z48e9@x))))) (set! Z4c0d@Z3168@environment-symbols Z3168@environment-symbols) (set! Z316a@environment (lambda Z48eb@imp* (let ((Z48ed@itc (Z3118@make-collector))) (let ((Z48f3@Z48f0 Z311e@imp-collector) (Z48f4@Z48f2 Z48ed@itc)) (let ((Z48f7@swap (lambda () (let ((Z48f9@t (Z48f3@Z48f0))) (begin (Z48f3@Z48f0 Z48f4@Z48f2) (set! Z48f4@Z48f2 Z48f9@t)))))) (dynamic-wind Z48f7@swap (lambda () (call-with-values (lambda () (Z3114@parse-import-spec* Z48eb@imp*)) (lambda (Z48ff@Z48fc Z4900@Z48fe) (let ((Z4903@subst-labels Z4900@Z48fe) (Z4904@subst-names Z48ff@Z48fc)) (make-simple-struct 'env '4 (list Z4904@subst-names Z4903@subst-labels Z48ed@itc)))))) Z48f7@swap)))))) (set! Z4c0e@Z316a@environment Z316a@environment) (set! Z316c@null-environment (lambda (Z4907@n) (begin (if (not (eqv? Z4907@n '5)) (assertion-violation 'null-environment '"not 5" Z4907@n) (void)) (Z316a@environment '(psyntax null-environment-5))))) (set! Z4c0f@Z316c@null-environment Z316c@null-environment) (set! Z316e@scheme-report-environment (lambda (Z4909@n) (begin (if (not (eqv? Z4909@n '5)) (assertion-violation 'scheme-report-environment '"not 5" Z4909@n) (void)) (Z316a@environment '(psyntax scheme-report-environment-5))))) (set! Z4c10@Z316e@scheme-report-environment Z316e@scheme-report-environment) (set! Z3170@expand (lambda (Z490b@x Z490c@env) (if (Z3136@env? Z490c@env) (let ((Z490f@rib (Z3116@make-top-rib (Z3138@env-names Z490c@env) (Z313c@env-labels Z490c@env)))) (let ((Z4911@x (make-simple-struct 'stx '5 (list Z490b@x Z2e2f@top-mark* (list Z490f@rib) '()))) (Z4912@itc (Z3140@env-itc Z490c@env)) (Z4913@rtc (Z3118@make-collector)) (Z4914@vtc (Z3118@make-collector))) (let ((Z4919@x (let ((Z492b@Z491c Z31a2@top-level-context) (Z492c@Z491e Z311a@inv-collector) (Z492d@Z4920 Z311c@vis-collector) (Z492e@Z4922 Z311e@imp-collector) (Z492f@Z4924 '#f) (Z4930@Z4926 Z4913@rtc) (Z4931@Z4928 Z4914@vtc) (Z4932@Z492a Z4912@itc)) (let ((Z493b@swap (lambda () (begin (let ((Z493d@t (Z492b@Z491c))) (begin (Z492b@Z491c Z492f@Z4924) (set! Z492f@Z4924 Z493d@t))) (let ((Z493f@t (Z492c@Z491e))) (begin (Z492c@Z491e Z4930@Z4926) (set! Z4930@Z4926 Z493f@t))) (let ((Z4941@t (Z492d@Z4920))) (begin (Z492d@Z4920 Z4931@Z4928) (set! Z4931@Z4928 Z4941@t))) (let ((Z4943@t (Z492e@Z4922))) (begin (Z492e@Z4922 Z4932@Z492a) (set! Z4932@Z492a Z4943@t))))))) (dynamic-wind Z493b@swap (lambda () (Z30d4@chi-expr Z4911@x '() '())) Z493b@swap))))) (begin (Z2e67@seal-rib! Z490f@rib) (values Z4919@x (Z4913@rtc)))))) (if (Z3150@interaction-env? Z490c@env) (let ((Z4945@rib (Z3152@interaction-env-rib Z490c@env)) (Z4946@r (Z3156@interaction-env-r Z490c@env)) (Z4947@rtc (Z3118@make-collector))) (let ((Z494b@x (make-simple-struct 'stx '5 (list Z490b@x Z2e2f@top-mark* (list Z4945@rib) '())))) (call-with-values (lambda () (let ((Z4961@Z4952 Z31a2@top-level-context) (Z4962@Z4954 Z311a@inv-collector) (Z4963@Z4956 Z311c@vis-collector) (Z4964@Z4958 Z311e@imp-collector) (Z4965@Z495a Z490c@env) (Z4966@Z495c Z4947@rtc) (Z4967@Z495e (Z3118@make-collector)) (Z4968@Z4960 (Z3118@make-collector))) (let ((Z4971@swap (lambda () (begin (let ((Z4973@t (Z4961@Z4952))) (begin (Z4961@Z4952 Z4965@Z495a) (set! Z4965@Z495a Z4973@t))) (let ((Z4975@t (Z4962@Z4954))) (begin (Z4962@Z4954 Z4966@Z495c) (set! Z4966@Z495c Z4975@t))) (let ((Z4977@t (Z4963@Z4956))) (begin (Z4963@Z4956 Z4967@Z495e) (set! Z4967@Z495e Z4977@t))) (let ((Z4979@t (Z4964@Z4958))) (begin (Z4964@Z4958 Z4968@Z4960) (set! Z4968@Z4960 Z4979@t))))))) (dynamic-wind Z4971@swap (lambda () (Z3122@chi-interaction-expr Z494b@x Z4945@rib Z4946@r)) Z4971@swap)))) (lambda (Z497b@Z494e Z497c@Z4950) (let ((Z497f@r^ Z497c@Z4950) (Z4980@e Z497b@Z494e)) (begin (Z3158@set-interaction-env-r! Z490c@env Z497f@r^) (values Z4980@e (Z4947@rtc)))))))) (assertion-violation 'expand '"not an environment" Z490c@env))))) (set! Z4c11@Z3170@expand Z3170@expand) (set! Z3172@eval (lambda (Z4983@x Z4984@env) (begin (if (not (Z3166@environment? Z4984@env)) (error 'eval '"not an environment" Z4984@env) (void)) (call-with-values (lambda () (Z3170@expand Z4983@x Z4984@env)) (lambda (Z498b@Z4988 Z498c@Z498a) (let ((Z498f@invoke-req* Z498c@Z498a) (Z4990@x Z498b@Z4988)) (begin (for-each Z2cc7@Z2b15@invoke-library Z498f@invoke-req*) (eval-core (Z2a51@Z2a09@expanded->core Z4990@x))))))))) (set! Z4c12@Z3172@eval Z3172@eval) (set! Z3174@library-expander (lambda Z4a01 (let ((Z4a02 (length Z4a01))) (if (= Z4a02 '3) (apply (lambda (Z4993@x Z4994@filename Z4995@verify-name) (letrec* ((Z499a@build-visit-code (lambda (Z49ef@macro*) (if (null? Z49ef@macro*) (Z2e11@Z2d72@build-void) (Z2e10@Z2d70@build-sequence '#f (map (lambda (Z49f1@x) (let ((Z49f3@loc (car Z49f1@x)) (Z49f4@src (cddr Z49f1@x))) (list 'set! Z49f3@loc Z49f4@src))) Z49ef@macro*))))) (Z499c@visit! (lambda (Z49e7@macro*) (for-each (lambda (Z49e9@x) (let ((Z49eb@loc (car Z49e9@x)) (Z49ec@proc (cadr Z49e9@x))) (set-symbol-value! Z49eb@loc Z49ec@proc))) Z49e7@macro*)))) (call-with-values (lambda () (Z3126@core-library-expander Z4993@x Z4995@verify-name)) (lambda (Z49af@Z499e Z49b0@Z49a0 Z49b1@Z49a2 Z49b2@Z49a4 Z49b3@Z49a6 Z49b4@Z49a8 Z49b5@Z49aa Z49b6@Z49ac Z49b7@Z49ae) (let ((Z49c1@export-env Z49b7@Z49ae) (Z49c2@export-subst Z49b6@Z49ac) (Z49c3@macro* Z49b5@Z49aa) (Z49c4@invoke-code Z49b4@Z49a8) (Z49c5@vis* Z49b3@Z49a6) (Z49c6@inv* Z49b2@Z49a4) (Z49c7@imp* Z49b1@Z49a2) (Z49c8@ver Z49b0@Z49a0) (Z49c9@name Z49af@Z499e)) (let ((Z49d3@id (gensym)) (Z49d4@name Z49c9@name) (Z49d5@ver Z49c8@ver) (Z49d6@imp* (map Z2ccb@Z2b1d@library-spec Z49c7@imp*)) (Z49d7@vis* (map Z2ccb@Z2b1d@library-spec Z49c5@vis*)) (Z49d8@inv* (map Z2ccb@Z2b1d@library-spec Z49c6@inv*)) (Z49d9@visit-proc (lambda () (Z499c@visit! Z49c3@macro*))) (Z49da@invoke-proc (lambda () (eval-core (Z2a51@Z2a09@expanded->core Z49c4@invoke-code)))) (Z49db@visit-code (Z499a@build-visit-code Z49c3@macro*)) (Z49dc@invoke-code Z49c4@invoke-code)) (begin (Z2cc5@Z2b11@install-library Z49d3@id Z49d4@name Z49d5@ver Z49d6@imp* Z49d7@vis* Z49d8@inv* Z49c2@export-subst Z49c1@export-env Z49d9@visit-proc Z49da@invoke-proc Z49db@visit-code Z49dc@invoke-code '#t Z4994@filename) (values Z49d3@id Z49d4@name Z49d5@ver Z49d6@imp* Z49d7@vis* Z49d8@inv* Z49dc@invoke-code Z49db@visit-code Z49c2@export-subst Z49c1@export-env)))))))) Z4a01) (if (= Z4a02 '2) (apply (lambda (Z49f7@x Z49f8@filename) (Z3174@library-expander Z49f7@x Z49f8@filename (lambda (Z49fb@x) (values)))) Z4a01) (if (= Z4a02 '1) (apply (lambda (Z49fd@x) (Z3174@library-expander Z49fd@x '#f (lambda (Z49ff@x) (values)))) Z4a01) (error 'apply '"invalid arg count"))))))) (set! Z4c13@Z3174@library-expander Z3174@library-expander) (set! Z3176@boot-library-expand (lambda (Z4a03@x) (call-with-values (lambda () (Z3174@library-expander Z4a03@x)) (lambda (Z4a19@Z4a06 Z4a1a@Z4a08 Z4a1b@Z4a0a Z4a1c@Z4a0c Z4a1d@Z4a0e Z4a1e@Z4a10 Z4a1f@Z4a12 Z4a20@Z4a14 Z4a21@Z4a16 Z4a22@Z4a18) (let ((Z4a2d@export-env Z4a22@Z4a18) (Z4a2e@export-subst Z4a21@Z4a16) (Z4a2f@visit-code Z4a20@Z4a14) (Z4a30@invoke-code Z4a1f@Z4a12) (Z4a31@inv* Z4a1e@Z4a10) (Z4a32@vis* Z4a1d@Z4a0e) (Z4a33@imp* Z4a1c@Z4a0c) (Z4a34@ver Z4a1b@Z4a0a) (Z4a35@name Z4a1a@Z4a08) (Z4a36@id Z4a19@Z4a06)) (values Z4a35@name Z4a30@invoke-code Z4a2e@export-subst Z4a2d@export-env)))))) (set! Z4c14@Z3176@boot-library-expand Z3176@boot-library-expand) (set! Z3178@rev-map-append (lambda (Z4a41@f Z4a42@ls Z4a43@ac) (if (null? Z4a42@ls) Z4a43@ac (Z3178@rev-map-append Z4a41@f (cdr Z4a42@ls) (cons (Z4a41@f (car Z4a42@ls)) Z4a43@ac))))) (set! Z4c15@Z3178@rev-map-append Z3178@rev-map-append) (set! Z317a@build-exports (lambda (Z4a47@lex*+loc* Z4a48@init*) (Z2e10@Z2d70@build-sequence '#f (cons (Z2e11@Z2d72@build-void) (Z3178@rev-map-append (lambda (Z4a4b@x) (list 'set! (cdr Z4a4b@x) (car Z4a4b@x))) Z4a47@lex*+loc* Z4a48@init*))))) (set! Z4c16@Z317a@build-exports Z317a@build-exports) (set! Z317c@make-export-subst (lambda (Z4a4d@name* Z4a4e@id*) (map (lambda (Z4a51@name Z4a52@id) (let ((Z4a55@label (Z2ec1@id->label Z4a52@id))) (begin (if (not Z4a55@label) (Z3192@syntax-violation '#f '"cannot export unbound identifier" Z4a52@id) (void)) (cons Z4a51@name Z4a55@label)))) Z4a4d@name* Z4a4e@id*))) (set! Z4c17@Z317c@make-export-subst Z317c@make-export-subst) (set! Z317e@make-export-env/macros (lambda (Z4a57@lex* Z4a58@loc* Z4a59@r) (letrec* ((Z4a5e@lookup (lambda (Z4a7b@x) (let Z4a83@f ((Z4a7d@x Z4a7b@x) (Z4a7e@lex* Z4a57@lex*) (Z4a7f@loc* Z4a58@loc*)) (if (pair? Z4a7e@lex*) (if (eq? Z4a7d@x (car Z4a7e@lex*)) (car Z4a7f@loc*) (Z4a83@f Z4a7d@x (cdr Z4a7e@lex*) (cdr Z4a7f@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let Z4a67@f ((Z4a5f@r Z4a59@r) (Z4a60@env '()) (Z4a61@global* '()) (Z4a62@macro* '())) (if (null? Z4a5f@r) (values Z4a60@env Z4a61@global* Z4a62@macro*) (let ((Z4a69@x (car Z4a5f@r))) (let ((Z4a6b@label (car Z4a69@x)) (Z4a6c@b (cdr Z4a69@x))) (let ((Z4a6f@t (Z2ec7@binding-type Z4a6c@b))) (if (memv Z4a6f@t '(lexical)) (let ((Z4a71@v (Z2ec9@binding-value Z4a6c@b))) (let ((Z4a73@loc (Z4a5e@lookup (Z303c@lexical-var Z4a71@v))) (Z4a74@type (if (Z303e@lexical-mutable? Z4a71@v) 'mutable 'global))) (Z4a67@f (cdr Z4a5f@r) (cons (cons* Z4a6b@label Z4a74@type Z4a73@loc) Z4a60@env) (cons (cons (Z303c@lexical-var Z4a71@v) Z4a73@loc) Z4a61@global*) Z4a62@macro*))) (if (memv Z4a6f@t '(local-macro)) (let ((Z4a77@loc (gensym))) (Z4a67@f (cdr Z4a5f@r) (cons (cons* Z4a6b@label 'global-macro Z4a77@loc) Z4a60@env) Z4a61@global* (cons (cons Z4a77@loc (Z2ec9@binding-value Z4a6c@b)) Z4a62@macro*))) (if (memv Z4a6f@t '(local-macro!)) (let ((Z4a79@loc (gensym))) (Z4a67@f (cdr Z4a5f@r) (cons (cons* Z4a6b@label 'global-macro! Z4a79@loc) Z4a60@env) Z4a61@global* (cons (cons Z4a79@loc (Z2ec9@binding-value Z4a6c@b)) Z4a62@macro*))) (if (memv Z4a6f@t '($rtd $module)) (Z4a67@f (cdr Z4a5f@r) (cons Z4a69@x Z4a60@env) Z4a61@global* Z4a62@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (Z2ec7@binding-type Z4a6c@b) (Z2ec9@binding-value Z4a6c@b)))))))))))))) (set! Z4c18@Z317e@make-export-env/macros Z317e@make-export-env/macros) (set! Z3180@generate-temporaries (lambda (Z4a85@ls) (let ((Z4a87@t Z4a85@ls)) (let ((Z4a89@ls/false (Z30b2@syntax-dispatch Z4a87@t 'each-any))) (if Z4a89@ls/false (apply (lambda (Z4a8b@ls) (map (lambda (Z4a8d@x) (make-simple-struct 'stx '5 (list (let ((Z4a8f@x (Z3198@syntax->datum Z4a8d@x))) (if (or (symbol? Z4a8f@x) (string? Z4a8f@x)) (gensym Z4a8f@x) (gensym 't))) Z2e2f@top-mark* '() '()))) Z4a8b@ls)) Z4a89@ls/false) (let ((Z4a91@t Z4a87@t)) (let ((Z4a93@ls/false (Z30b2@syntax-dispatch Z4a91@t '_))) (if Z4a93@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) Z4a93@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z4a91@t))))))))) (set! Z4c19@Z3180@generate-temporaries Z3180@generate-temporaries) (set! Z3182@free-identifier=? (lambda (Z4a95@x Z4a96@y) (if (Z2eab@id? Z4a95@x) (if (Z2eab@id? Z4a96@y) (Z2eb1@free-id=? Z4a95@x Z4a96@y) (assertion-violation 'free-identifier=? '"not an identifier" Z4a96@y)) (assertion-violation 'free-identifier=? '"not an identifier" Z4a95@x)))) (set! Z4c1a@Z3182@free-identifier=? Z3182@free-identifier=?) (set! Z3184@bound-identifier=? (lambda (Z4a99@x Z4a9a@y) (if (Z2eab@id? Z4a99@x) (if (Z2eab@id? Z4a9a@y) (Z2eaf@bound-id=? Z4a99@x Z4a9a@y) (assertion-violation 'bound-identifier=? '"not an identifier" Z4a9a@y)) (assertion-violation 'bound-identifier=? '"not an identifier" Z4a99@x)))) (set! Z4c1b@Z3184@bound-identifier=? Z3184@bound-identifier=?) (set! Z3186@make-source-condition (lambda (Z4a9d@x) (letrec* ((Z4aa7@Z4aa2 (make-record-type-descriptor '&source-information &condition-rtd 'Z4aa5 '#f '#f '#((immutable file-name) (immutable line)))) (Z4aa9@Z4aa4 '#f) (Z4aab@Z4aa3 (make-record-constructor-descriptor Z4aa7@Z4aa2 &condition-rcd Z4aa9@Z4aa4)) (Z4aae@Z4aa1 (record-predicate Z4aa7@Z4aa2)) (Z4ab0@make-source-condition (record-constructor Z4aab@Z4aa3)) (Z4ab2@Z4a9f (record-accessor Z4aa7@Z4aa2 '0)) (Z4ab4@Z4aa0 (record-accessor Z4aa7@Z4aa2 '1)) (Z4ab6@source-condition? (condition-predicate Z4aa7@Z4aa2)) (Z4ab8@source-filename (condition-accessor Z4aa7@Z4aa2 Z4ab2@Z4a9f)) (Z4aba@source-character (condition-accessor Z4aa7@Z4aa2 Z4ab4@Z4aa0))) (if (and (pair? Z4a9d@x) (pair? (cdr Z4a9d@x))) (Z4ab0@make-source-condition (car Z4a9d@x) (cadr Z4a9d@x)) (condition))))) (set! Z4c1c@Z3186@make-source-condition Z3186@make-source-condition) (set! Z3188@extract-position-condition (lambda (Z4abb@x) (Z3186@make-source-condition (Z318a@expression-position Z4abb@x)))) (set! Z4c1d@Z3188@extract-position-condition Z3188@extract-position-condition) (set! Z318a@expression-position (lambda (Z4abd@x) (and (Z2e77@stx? Z4abd@x) (let ((Z4abf@x (Z2e79@stx-expr Z4abd@x))) (and (Z29ef@Z28c1@annotation? Z4abf@x) (Z29f0@Z28c3@annotation-source Z4abf@x)))))) (set! Z4c1e@Z318a@expression-position Z318a@expression-position) (set! Z318c@assertion-error (lambda (Z4ac1@expr Z4ac2@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list Z4ac1@expr)) (Z3186@make-source-condition Z4ac2@pos))))) (set! Z4c1f@Z318c@assertion-error Z318c@assertion-error) (set! Z318e@syntax-error (lambda (Z4ac5@x . Z4ac7@args) (begin (if (not (for-all string? Z4ac7@args)) (assertion-violation 'syntax-error '"invalid argument" Z4ac7@args) (void)) (raise (condition (make-message-condition (if (null? Z4ac7@args) '"invalid syntax" (apply string-append Z4ac7@args))) (make-syntax-violation (Z3198@syntax->datum Z4ac5@x) '#f) (Z3188@extract-position-condition Z4ac5@x)))))) (set! Z4c20@Z318e@syntax-error Z318e@syntax-error) (set! Z3190@syntax-violation* (lambda (Z4ac9@who Z4aca@msg Z4acb@form Z4acc@condition-object) (begin (if (not (string? Z4aca@msg)) (assertion-violation 'syntax-violation '"message is not a string" Z4aca@msg) (void)) (let ((Z4ad1@who (if (or (string? Z4ac9@who) (symbol? Z4ac9@who)) Z4ac9@who (if (not Z4ac9@who) (let ((Z4ad3@t Z4acb@form)) (let ((Z4ad5@ls/false (Z30b2@syntax-dispatch Z4ad3@t 'any))) (if (and Z4ad5@ls/false (apply (lambda (Z4ad7@id) (Z2eab@id? Z4ad7@id)) Z4ad5@ls/false)) (apply (lambda (Z4ad9@id) (Z3198@syntax->datum Z4ad9@id)) Z4ad5@ls/false) (let ((Z4adb@t Z4ad3@t)) (let ((Z4add@ls/false (Z30b2@syntax-dispatch Z4adb@t '(any . any)))) (if (and Z4add@ls/false (apply (lambda (Z4adf@id Z4ae0@rest) (Z2eab@id? Z4adf@id)) Z4add@ls/false)) (apply (lambda (Z4ae3@id Z4ae4@rest) (Z3198@syntax->datum Z4ae3@id)) Z4add@ls/false) (let ((Z4ae7@t Z4adb@t)) (let ((Z4ae9@ls/false (Z30b2@syntax-dispatch Z4ae7@t '_))) (if Z4ae9@ls/false (apply (lambda () '#f) Z4ae9@ls/false) (Z3192@syntax-violation '#f '"invalid syntax" Z4ae7@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" Z4ac9@who))))) (raise (condition (if Z4ad1@who (make-who-condition Z4ad1@who) (condition)) (make-message-condition Z4aca@msg) Z4acc@condition-object (Z3188@extract-position-condition Z4acb@form))))))) (set! Z4c21@Z3190@syntax-violation* Z3190@syntax-violation*) (set! Z3192@syntax-violation (lambda Z4af9 (let ((Z4afa (length Z4af9))) (if (= Z4afa '3) (apply (lambda (Z4aeb@who Z4aec@msg Z4aed@form) (Z3192@syntax-violation Z4aeb@who Z4aec@msg Z4aed@form '#f)) Z4af9) (if (= Z4afa '4) (apply (lambda (Z4af1@who Z4af2@msg Z4af3@form Z4af4@subform) (Z3190@syntax-violation* Z4af1@who Z4af2@msg Z4af3@form (make-syntax-violation (Z3198@syntax->datum Z4af3@form) (Z3198@syntax->datum Z4af4@subform)))) Z4af9) (error 'apply '"invalid arg count")))))) (set! Z4c22@Z3192@syntax-violation Z3192@syntax-violation) (set! Z3194@identifier? (lambda (Z4afb@x) (Z2eab@id? Z4afb@x))) (set! Z4c23@Z3194@identifier? Z3194@identifier?) (set! Z3196@datum->syntax (lambda (Z4afd@id Z4afe@datum) (if (Z2eab@id? Z4afd@id) (Z2e8b@datum->stx Z4afd@id Z4afe@datum) (assertion-violation 'datum->syntax '"not an identifier" Z4afd@id)))) (set! Z4c24@Z3196@datum->syntax Z3196@datum->syntax) (set! Z3198@syntax->datum (lambda (Z4b01@x) (Z2ebf@stx->datum Z4b01@x))) (set! Z4c25@Z3198@syntax->datum Z3198@syntax->datum) (set! Z319a@ungensym-all (lambda (Z4b03@code) (if (pair? Z4b03@code) (cons (Z319a@ungensym-all (car Z4b03@code)) (Z319a@ungensym-all (cdr Z4b03@code))) (if (symbol? Z4b03@code) (ungensym Z4b03@code) Z4b03@code)))) (set! Z4c26@Z319a@ungensym-all Z319a@ungensym-all) (set! Z319c@compile-r6rs-top-level (lambda (Z4b05@x*) (call-with-values (lambda () (Z312a@top-level-expander Z4b05@x*)) (lambda (Z4b0b@Z4b08 Z4b0c@Z4b0a) (let ((Z4b0f@invoke-code Z4b0c@Z4b0a) (Z4b10@lib* Z4b0b@Z4b08)) (lambda () (begin (for-each Z2cc7@Z2b15@invoke-library Z4b10@lib*) (let ((Z4b13@expanded (Z2a51@Z2a09@expanded->core Z4b0f@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (Z319a@ungensym-all Z4b13@expanded)) (void)) (eval-core Z4b13@expanded)))))))))) (set! Z4c27@Z319c@compile-r6rs-top-level Z319c@compile-r6rs-top-level) (set! Z319e@pre-compile-r6rs-top-level (lambda (Z4b15@x*) (call-with-values (lambda () (Z312a@top-level-expander Z4b15@x*)) (lambda (Z4b1b@Z4b18 Z4b1c@Z4b1a) (let ((Z4b1f@invoke-code Z4b1c@Z4b1a) (Z4b20@lib* Z4b1b@Z4b18)) (begin (for-each Z2cc7@Z2b15@invoke-library Z4b20@lib*) (Z29f9@Z28d5@compile-core (Z2a51@Z2a09@expanded->core Z4b1f@invoke-code)))))))) (set! Z4c28@Z319e@pre-compile-r6rs-top-level Z319e@pre-compile-r6rs-top-level) (set! Z31a0@interaction-environment (let ((Z4b23@the-env '#f)) (lambda () (or Z4b23@the-env (let ((Z4b25@lib (Z2cc0@Z2b07@find-library-by-name '(mosh interaction))) (Z4b26@rib (Z2e5f@make-empty-rib))) (begin (let ((Z4b29@subst (Z2ca2@Z2acb@library-subst Z4b25@lib))) (begin (Z2e4b@set-rib-sym*! Z4b26@rib (map car Z4b29@subst)) (Z2e4f@set-rib-mark**! Z4b26@rib (map (lambda (Z4b2b@x) Z2e2f@top-mark*) Z4b29@subst)) (Z2e53@set-rib-label*! Z4b26@rib (map cdr Z4b29@subst)))) (let ((Z4b2d@env (make-simple-struct 'interaction-env '4 (list Z4b26@rib '() '())))) (begin (set! Z4b23@the-env Z4b2d@env) Z4b2d@env)))))))) (set! Z4c29@Z31a0@interaction-environment Z31a0@interaction-environment) (set! Z31a2@top-level-context (Z29fb@Z28d9@make-parameter '#f)) (set! Z4c2a@Z31a2@top-level-context Z31a2@top-level-context) (Z2cbd@Z2b01@current-library-expander Z3174@library-expander))
(begin (begin (Z2a4e@Z2a03@current-primitive-locations (lambda (Z5185@x) (let ((Z5187@t (assq Z5185@x '((syntax-error . Z4c20@Z318e@syntax-error) (syntax-dispatch . Z4bbe@Z30b2@syntax-dispatch) (load . Z4daa@Z4c51@load) (interaction-environment . Z4c29@Z31a0@interaction-environment) (library-path . Z2cb5@Z2af1@library-path) (mosh-cache-dir . Z29fc@Z28db@mosh-cache-dir) (make-parameter . Z29fb@Z28d9@make-parameter) (make-variable-transformer . Z4b7b@Z2edd@make-variable-transformer) (identifier? . Z4c23@Z3194@identifier?) (generate-temporaries . Z4c19@Z3180@generate-temporaries) (free-identifier=? . Z4c1a@Z3182@free-identifier=?) (syntax->datum . Z4c25@Z3198@syntax->datum) (datum->syntax . Z4c24@Z3196@datum->syntax) (bound-identifier=? . Z4c1b@Z3184@bound-identifier=?) (scheme-report-environment . Z4c10@Z316e@scheme-report-environment) (null-environment . Z4c0f@Z316c@null-environment) (command-line . Z4da7@Z4c4b@command-line) (eval . Z4c12@Z3172@eval) (environment . Z4c0e@Z316a@environment) (syntax-violation . Z4c22@Z3192@syntax-violation) (assertion-error . Z4c1f@Z318c@assertion-error))))) (if Z5187@t (cdr Z5187@t) '#f)))) (Z2cc5@Z2b11@install-library 'Z5162 '(mosh interaction) '() '() '() '() '((regexp? . Z5122) (alist->eq-hash-table . Z511e) (format . Z511b) (string-split . Z510b) (call-process . Z5104) (set-current-directory! . Z5100) (expand-path . Z50ff) (current-directory . Z50fe) (%getpid . Z50fd) (%spawn . Z50fc) (%waitpid . Z50fb) (simple-struct-name . Z50fa) (simple-struct-set! . Z50f9) (simple-struct-ref . Z50f8) (make-simple-struct . Z50f7) (simple-struct? . Z50f6) (pointer-ref-c-int64 . Z50f5) (pointer-ref-c-int32 . Z50f4) (pointer-ref-c-int16 . Z50f3) (pointer-ref-c-int8 . Z50f2) (pointer-ref-c-uint64 . Z50f1) (pointer-ref-c-uint32 . Z50f0) (pointer-ref-c-uint16 . Z50ef) (pointer-ref-c-uint8 . Z50ee) (pointer-set-c-uint64! . Z50ed) (pointer-set-c-uint32! . Z50ec) (pointer-set-c-uint16! . Z50eb) (pointer-set-c-uint8! . Z50ea) (pointer-set-c-int64! . Z50e9) (pointer-set-c-int32! . Z50e8) (pointer-set-c-int16! . Z50e7) (pointer-set-c-int8! . Z50e6) (pointer-set-c-pointer! . Z50e5) (pointer-set-c-double! . Z50e4) (pointer-set-c-float! . Z50e3) (pointer-set-c-long-long! . Z50e2) (pointer-set-c-long! . Z50e1) (pointer-set-c-int! . Z50e0) (pointer-set-c-short! . Z50df) (pointer-set-c-char! . Z50de) (pointer-ref-c-pointer . Z50dd) (pointer-ref-c-double . Z50dc) (pointer-ref-c-float . Z50db) (pointer-ref-c-unsigned-long-long . Z50da) (pointer-ref-c-signed-long-long . Z50d9) (pointer-ref-c-unsigned-long . Z50d8) (pointer-ref-c-signed-long . Z50d7) (pointer-ref-c-unsigned-int . Z50d6) (pointer-ref-c-signed-int . Z50d5) (pointer-ref-c-unsigned-short . Z50d4) (pointer-ref-c-signed-short . Z50d3) (pointer-ref-c-unsigned-char . Z50d2) (pointer-ref-c-signed-char . Z50d1) (pointer->integer . Z50d0) (integer->pointer . Z50cf) (pointer? . Z50ce) (shared-errno . Z50cd) (%ffi-supported? . Z50c8) (%ffi-pointer->string . Z50c7) (%ffi-call . Z50c6) (%ffi-lookup . Z50c5) (%ffi-open . Z50c4) (null-terminated-utf8->string . Z50c3) (null-terminated-bytevector->string . Z50c2) (%exec . Z50c1) (%fork . Z50c0) (%pipe . Z50bf) (p . Z50be) (whereis . Z50a2) (register . Z50a1) (vm-join! . Z50a0) (vm-set-value! . Z509f) (vm? . Z509e) (main-vm? . Z509d) (vm-eval . Z509c) (vm-self . Z509b) (vm-start! . Z509a) (make-vm . Z5099) (mutex-try-lock! . Z5098) (mutex-unlock! . Z5097) (mutex-lock! . Z5096) (mutex? . Z5095) (make-mutex . Z5094) (condition-variable-notify-all! . Z5093) (condition-variable-notify! . Z5092) (condition-variable-wait! . Z5091) (make-condition-variable . Z5090) (write/ss . Z508f) (string-upcase . Z5072) (string-titlecase . Z5071) (string-normalize-nfkd . Z5070) (string-normalize-nfkc . Z506f) (string-normalize-nfd . Z506e) (string-normalize-nfc . Z506d) (string-foldcase . Z506c) (string-downcase . Z506b) (string-ci>? . Z506a) (string-ci>=? . Z5069) (string-ci=? . Z5068) (string-ci<? . Z5067) (string-ci<=? . Z5066) (char-whitespace? . Z5065) (char-upper-case? . Z5064) (char-title-case? . Z5063) (char-numeric? . Z5062) (char-lower-case? . Z5061) (char-general-category . Z5060) (char-upcase . Z505f) (char-titlecase . Z505e) (char-foldcase . Z505d) (char-downcase . Z505c) (char-ci>? . Z505b) (char-ci>=? . Z505a) (char-ci=? . Z5059) (char-ci<? . Z5058) (char-ci<=? . Z5057) (char-alphabetic? . Z5056) (make-variable-transformer . Z2edc) (identifier? . Z3193) (generate-temporaries . Z317f) (free-identifier=? . Z3181) (syntax->datum . Z3197) (datum->syntax . Z3195) (bound-identifier=? . Z3183) (record-type-descriptor? . Z5055) (record-predicate . Z5054) (record-mutator . Z5053) (record-constructor . Z5052) (record-accessor . Z5051) (make-record-type-descriptor . Z5050) (make-record-constructor-descriptor . Z504f) (record? . Z504e) (record-type-uid . Z504d) (record-type-sealed? . Z504c) (record-type-parent . Z504b) (record-type-opaque? . Z504a) (record-type-name . Z5049) (record-type-generative? . Z5048) (record-type-field-names . Z5047) (record-rtd . Z5046) (record-field-mutable? . Z5045) (delete-file . Z5044) (file-exists? . Z5043) (vector-sort! . Z5042) (vector-sort . Z5041) (list-sort . Z5040) (symbol-hash . Z503f) (string-ci-hash . Z503e) (string-hash . Z503d) (equal-hash . Z503c) (hashtable-equivalence-function . Z503b) (make-hashtable . Z503a) (hashtable-hash-function . Z5039) (make-eqv-hashtable . Z5038) (make-eq-hashtable . Z5037) (hashtable? . Z5036) (hashtable-update! . Z5035) (hashtable-size . Z5034) (hashtable-set! . Z5033) (hashtable-ref . Z5032) (hashtable-mutable? . Z5031) (hashtable-keys . Z5030) (hashtable-entries . Z502f) (hashtable-delete! . Z502e) (hashtable-copy . Z502d) (hashtable-contains? . Z502c) (hashtable-clear! . Z502b) (call-with-output-file . Z502a) (call-with-input-file . Z5029) (write-char . Z5028) (write . Z5027) (with-output-to-file . Z5026) (with-input-from-file . Z5025) (read-char . Z5024) (read . Z5023) (peek-char . Z5022) (open-output-file . Z5021) (open-input-file . Z5020) (newline . Z501f) (display . Z501e) (close-output-port . Z501d) (close-input-port . Z501c) (eof-object? . Z501b) (eof-object . Z501a) (current-error-port . Z5019) (current-output-port . Z5018) (current-input-port . Z5017) (output-port? . Z5016) (input-port? . Z5015) (utf-8-codec . Z5014) (utf-16-codec . Z5013) (transcoder-error-handling-mode . Z5012) (transcoder-eol-style . Z5011) (transcoder-codec . Z5010) (transcoded-port . Z500f) (textual-port? . Z500e) (string->bytevector . Z500d) (standard-output-port . Z500c) (standard-input-port . Z500b) (standard-error-port . Z500a) (set-port-position! . Z5009) (put-u8 . Z5008) (put-string . Z5007) (put-datum . Z5006) (put-char . Z5005) (put-bytevector . Z5004) (port? . Z5003) (port-transcoder . Z5002) (port-position . Z5001) (port-has-set-port-position!? . Z5000) (port-has-port-position? . Z4fff) (port-eof? . Z4ffe) (output-port-buffer-mode . Z4ffd) (open-string-output-port . Z4ffc) (open-string-input-port . Z4ffb) (open-file-output-port . Z4ffa) (open-file-input/output-port . Z4ff9) (open-file-input-port . Z4ff8) (open-bytevector-output-port . Z4ff7) (open-bytevector-input-port . Z4ff6) (native-transcoder . Z4ff5) (native-eol-style . Z4ff4) (make-transcoder . Z4ff3) (latin-1-codec . Z4ff2) (make-i/o-write-error . Z4ff1) (make-i/o-read-error . Z4ff0) (make-i/o-port-error . Z4fef) (make-i/o-invalid-position-error . Z4fee) (make-i/o-filename-error . Z4fed) (make-i/o-file-protection-error . Z4fec) (make-i/o-file-is-read-only-error . Z4feb) (make-i/o-file-does-not-exist-error . Z4fea) (make-i/o-file-already-exists-error . Z4fe9) (make-i/o-error . Z4fe8) (make-i/o-encoding-error . Z4fe7) (make-i/o-decoding-error . Z4fe6) (make-custom-textual-output-port . Z4fe5) (make-custom-textual-input/output-port . Z4fe4) (make-custom-textual-input-port . Z4fe3) (make-custom-binary-output-port . Z4fe2) (make-custom-binary-input/output-port . Z4fe1) (make-custom-binary-input-port . Z4fe0) (make-bytevector . Z4fdf) (lookahead-u8 . Z4fde) (lookahead-char . Z4fdd) (i/o-write-error? . Z4fdc) (i/o-read-error? . Z4fdb) (i/o-port-error? . Z4fda) (i/o-invalid-position-error? . Z4fd9) (i/o-filename-error? . Z4fd8) (i/o-file-protection-error? . Z4fd7) (i/o-file-is-read-only-error? . Z4fd6) (i/o-file-does-not-exist-error? . Z4fd5) (i/o-file-already-exists-error? . Z4fd4) (i/o-error? . Z4fd3) (i/o-error-position . Z4fd2) (i/o-error-port . Z4fd1) (i/o-error-filename . Z4fd0) (i/o-encoding-error? . Z4fcf) (i/o-encoding-error-char . Z4fce) (i/o-decoding-error? . Z4fcd) (get-u8 . Z4fcc) (get-string-n! . Z4fcb) (get-string-n . Z4fca) (get-string-all . Z4fc9) (get-line . Z4fc8) (get-datum . Z4fc7) (get-char . Z4fc6) (get-bytevector-some . Z4fc5) (get-bytevector-n! . Z4fc4) (get-bytevector-n . Z4fc3) (get-bytevector-all . Z4fc2) (flush-output-port . Z4fc1) (close-port . Z4fc0) (exit . Z4fb8) (command-line . Z4c4a) (string-fill! . Z4fb7) (string-set! . Z4fb6) (set-cdr! . Z4fb5) (set-car! . Z4fb4) (remove . Z4fb3) (remv . Z4fb2) (remp . Z4fb1) (remq . Z4fb0) (partition . Z4faf) (memv . Z4fae) (memq . Z4fad) (memp . Z4fac) (member . Z4fab) (exists . Z4faa) (for-all . Z4fa9) (fold-right . Z4fa8) (fold-left . Z4fa7) (find . Z4fa6) (filter . Z4fa5) (cons* . Z4fa4) (assv . Z4fa3) (assq . Z4fa2) (assp . Z4fa1) (assoc . Z4fa0) (call-with-string-output-port . Z4f9f) (call-with-port . Z4f9e) (call-with-bytevector-output-port . Z4f9d) (bytevector->string . Z4f9c) (buffer-mode? . Z4f9b) (binary-port? . Z4f9a) (with-exception-handler . Z4f99) (raise-continuable . Z4f98) (raise . Z4f97) (eval . Z3171) (environment . Z3169) (make-enumeration . Z4f96) (enum-set=? . Z4f95) (enum-set-universe . Z4f94) (enum-set-union . Z4f93) (enum-set-subset? . Z4f92) (enum-set-projection . Z4f91) (enum-set-member? . Z4f90) (enum-set-intersection . Z4f8f) (enum-set-indexer . Z4f8e) (enum-set-difference . Z4f8d) (enum-set-constructor . Z4f8c) (enum-set-complement . Z4f8b) (enum-set->list . Z4f8a) (who-condition? . Z4f89) (warning? . Z4f88) (violation? . Z4f87) (undefined-violation? . Z4f86) (syntax-violation? . Z4f85) (syntax-violation-subform . Z4f84) (syntax-violation-form . Z4f83) (syntax-violation . Z3191) (simple-conditions . Z4f82) (serious-condition? . Z4f81) (non-continuable-violation? . Z4f80) (message-condition? . Z4f7f) (make-who-condition . Z4f7e) (make-warning . Z4f7d) (make-violation . Z4f7c) (make-undefined-violation . Z4f7b) (make-syntax-violation . Z4f7a) (make-serious-condition . Z4f79) (make-non-continuable-violation . Z4f78) (make-message-condition . Z4f77) (make-lexical-violation . Z4f76) (make-irritants-condition . Z4f75) (make-implementation-restriction-violation . Z4f74) (make-error . Z4f73) (make-assertion-violation . Z4f72) (lexical-violation? . Z4f71) (irritants-condition? . Z4f70) (implementation-restriction-violation? . Z4f6f) (error? . Z4f6e) (condition-who . Z4f6d) (condition-predicate . Z4f6c) (condition-message . Z4f6b) (condition-irritants . Z4f6a) (condition-accessor . Z4f69) (condition . Z4f68) (assertion-violation? . Z4f67) (condition? . Z4f66) (utf32->string . Z4f65) (utf16->string . Z4f64) (utf8->string . Z4f63) (uint-list->bytevector . Z4f62) (u8-list->bytevector . Z4f61) (string->utf8 . Z4f60) (string->utf32 . Z4f5f) (string->utf16 . Z4f5e) (sint-list->bytevector . Z4f5d) (native-endianness . Z4f5c) (bytevector? . Z4f5b) (bytevector=? . Z4f5a) (bytevector-uint-set! . Z4f59) (bytevector-uint-ref . Z4f58) (bytevector-u8-set! . Z4f57) (bytevector-u8-ref . Z4f56) (bytevector-u64-set! . Z4f55) (bytevector-u64-ref . Z4f54) (bytevector-u64-native-set! . Z4f53) (bytevector-u64-native-ref . Z4f52) (bytevector-u32-set! . Z4f51) (bytevector-u32-ref . Z4f50) (bytevector-u32-native-set! . Z4f4f) (bytevector-u32-native-ref . Z4f4e) (bytevector-u16-set! . Z4f4d) (bytevector-u16-ref . Z4f4c) (bytevector-u16-native-set! . Z4f4b) (bytevector-u16-native-ref . Z4f4a) (bytevector-sint-set! . Z4f49) (bytevector-sint-ref . Z4f48) (bytevector-s8-set! . Z4f47) (bytevector-s8-ref . Z4f46) (bytevector-s64-set! . Z4f45) (bytevector-s64-ref . Z4f44) (bytevector-s64-native-set! . Z4f43) (bytevector-s64-native-ref . Z4f42) (bytevector-s32-set! . Z4f41) (bytevector-s32-ref . Z4f40) (bytevector-s32-native-set! . Z4f3f) (bytevector-s32-native-ref . Z4f3e) (bytevector-s16-set! . Z4f3d) (bytevector-s16-ref . Z4f3c) (bytevector-s16-native-set! . Z4f3b) (bytevector-s16-native-ref . Z4f3a) (bytevector-length . Z4f39) (bytevector-ieee-single-ref . Z4f38) (bytevector-ieee-single-set! . Z4f37) (bytevector-ieee-single-native-set! . Z4f36) (bytevector-ieee-single-native-ref . Z4f35) (bytevector-ieee-double-set! . Z4f34) (bytevector-ieee-double-ref . Z4f33) (bytevector-ieee-double-native-set! . Z4f32) (bytevector-ieee-double-native-ref . Z4f31) (bytevector-fill! . Z4f30) (bytevector-copy! . Z4f2f) (bytevector-copy . Z4f2e) (bytevector->uint-list . Z4f2d) (bytevector->u8-list . Z4f2c) (bytevector->sint-list . Z4f2b) (no-nans-violation? . Z4f2a) (no-infinities-violation? . Z4f29) (make-no-nans-violation . Z4f28) (make-no-infinities-violation . Z4f27) (real->flonum . Z4f26) (flzero? . Z4f25) (fltruncate . Z4f24) (fltan . Z4f23) (flsqrt . Z4f22) (flsin . Z4f21) (flround . Z4f20) (flpositive? . Z4f1f) (flonum? . Z4f1e) (flodd? . Z4f1d) (flnumerator . Z4f1c) (flnegative? . Z4f1b) (flnan? . Z4f1a) (flmod0 . Z4f19) (flmod . Z4f18) (flmin . Z4f17) (flmax . Z4f16) (fllog . Z4f15) (flinteger? . Z4f14) (flinfinite? . Z4f13) (flfloor . Z4f12) (flfinite? . Z4f11) (flexpt . Z4f10) (flexp . Z4f0f) (fleven? . Z4f0e) (fldiv0-and-mod0 . Z4f0d) (fldiv0 . Z4f0c) (fldiv-and-mod . Z4f0b) (fldiv . Z4f0a) (fldenominator . Z4f09) (flcos . Z4f08) (flceiling . Z4f07) (flatan . Z4f06) (flasin . Z4f05) (flacos . Z4f04) (flabs . Z4f03) (fl>? . Z4f02) (fl>=? . Z4f01) (fl=? . Z4f00) (fl<? . Z4eff) (fl<=? . Z4efe) (fl/ . Z4efd) (fl- . Z4efc) (fl+ . Z4efb) (fl* . Z4efa) (fixnum->flonum . Z4ef9) (fxzero? . Z4ef8) (fxxor . Z4ef7) (fxrotate-bit-field . Z4ef6) (fxreverse-bit-field . Z4ef5) (fxpositive? . Z4ef4) (fxodd? . Z4ef3) (fxnot . Z4ef2) (fxnegative? . Z4ef1) (fxmod0 . Z4ef0) (fxmod . Z4eef) (fxmin . Z4eee) (fxmax . Z4eed) (fxlength . Z4eec) (fxior . Z4eeb) (fxif . Z4eea) (fxfirst-bit-set . Z4ee9) (fxeven? . Z4ee8) (fxdiv0-and-mod0 . Z4ee7) (fxdiv0 . Z4ee6) (fxdiv-and-mod . Z4ee5) (fxdiv . Z4ee4) (fxcopy-bit-field . Z4ee3) (fxcopy-bit . Z4ee2) (fxbit-set? . Z4ee1) (fxbit-field . Z4ee0) (fxbit-count . Z4edf) (fxarithmetic-shift-right . Z4ede) (fxarithmetic-shift-left . Z4edd) (fxarithmetic-shift . Z4edc) (fxand . Z4edb) (fx>? . Z4eda) (fx>=? . Z4ed9) (fx=? . Z4ed8) (fx<? . Z4ed7) (fx<=? . Z4ed6) (fx-/carry . Z4ed5) (fx- . Z4ed4) (fx+/carry . Z4ed3) (fx+ . Z4ed2) (fx*/carry . Z4ed1) (fx* . Z4ed0) (greatest-fixnum . Z4ecf) (least-fixnum . Z4ece) (fixnum-width . Z4ecd) (fixnum? . Z4ecc) (bitwise-rotate-bit-field . Z4ecb) (bitwise-reverse-bit-field . Z4eca) (bitwise-length . Z4ec9) (bitwise-if . Z4ec8) (bitwise-first-bit-set . Z4ec7) (bitwise-copy-bit-field . Z4ec6) (bitwise-copy-bit . Z4ec5) (bitwise-bit-set? . Z4ec4) (bitwise-bit-field . Z4ec3) (bitwise-bit-count . Z4ec2) (bitwise-xor . Z4ec1) (bitwise-ior . Z4ec0) (bitwise-and . Z4ebf) (bitwise-not . Z4ebe) (bitwise-arithmetic-shift-right . Z4ebd) (bitwise-arithmetic-shift-left . Z4ebc) (bitwise-arithmetic-shift . Z4ebb) (zero? . Z4eba) (vector? . Z4eb9) (vector-set! . Z4eb8) (vector-ref . Z4eb7) (vector-map . Z4eb6) (vector-length . Z4eb5) (vector-for-each . Z4eb4) (vector-fill! . Z4eb3) (vector->list . Z4eb2) (vector . Z4eb1) (values . Z4eb0) (truncate . Z4eaf) (tan . Z4eae) (symbol? . Z4ead) (symbol=? . Z4eac) (symbol->string . Z4eab) (substring . Z4eaa) (string? . Z4ea9) (string>? . Z4ea8) (string>=? . Z4ea7) (string=? . Z4ea6) (string<? . Z4ea5) (string<=? . Z4ea4) (string-ref . Z4ea3) (string-length . Z4ea2) (string-for-each . Z4ea1) (string-copy . Z4ea0) (string-append . Z4e9f) (string->symbol . Z4e9e) (string->number . Z4e9d) (string->list . Z4e9c) (string . Z4e9b) (sqrt . Z4e9a) (sin . Z4e99) (round . Z4e98) (reverse . Z4e97) (real? . Z4e96) (real-valued? . Z4e95) (real-part . Z4e94) (rationalize . Z4e93) (rational? . Z4e92) (rational-valued? . Z4e91) (procedure? . Z4e90) (positive? . Z4e8f) (pair? . Z4e8e) (odd? . Z4e8d) (numerator . Z4e8c) (number? . Z4e8b) (number->string . Z4e8a) (null? . Z4e89) (not . Z4e88) (negative? . Z4e87) (nan? . Z4e86) (min . Z4e85) (max . Z4e84) (map . Z4e83) (make-vector . Z4e82) (make-string . Z4e81) (make-rectangular . Z4e80) (make-polar . Z4e7f) (magnitude . Z4e7e) (log . Z4e7d) (list? . Z4e7c) (list-tail . Z4e7b) (list-ref . Z4e7a) (list->vector . Z4e79) (list->string . Z4e78) (list . Z4e77) (length . Z4e76) (lcm . Z4e75) (integer? . Z4e74) (integer-valued? . Z4e73) (integer->char . Z4e72) (infinite? . Z4e71) (inexact? . Z4e70) (inexact . Z4e6f) (imag-part . Z4e6e) (gcd . Z4e6d) (for-each . Z4e6c) (floor . Z4e6b) (finite? . Z4e6a) (expt . Z4e69) (exp . Z4e68) (exact? . Z4e67) (exact-integer-sqrt . Z4e66) (exact . Z4e65) (even? . Z4e64) (error . Z4e63) (eqv? . Z4e62) (equal? . Z4e61) (eq? . Z4e60) (dynamic-wind . Z4e5f) (div0-and-mod0 . Z4e5e) (mod0 . Z4e5d) (div0 . Z4e5c) (div-and-mod . Z4e5b) (mod . Z4e5a) (div . Z4e59) (denominator . Z4e58) (cos . Z4e57) (cons . Z4e56) (complex? . Z4e55) (char? . Z4e54) (char>? . Z4e53) (char>=? . Z4e52) (char=? . Z4e51) (char<? . Z4e50) (char<=? . Z4e4f) (char->integer . Z4e4e) (ceiling . Z4e4d) (call-with-values . Z4e4c) (call/cc . Z4e4b) (call-with-current-continuation . Z4e4a) (cddddr . Z4e49) (cdddar . Z4e48) (cddadr . Z4e47) (cddaar . Z4e46) (cdaddr . Z4e45) (cdadar . Z4e44) (cdaadr . Z4e43) (cdaaar . Z4e42) (cadddr . Z4e41) (caddar . Z4e40) (cadadr . Z4e3f) (cadaar . Z4e3e) (caaddr . Z4e3d) (caadar . Z4e3c) (caaadr . Z4e3b) (caaaar . Z4e3a) (cdddr . Z4e39) (cddar . Z4e38) (cdadr . Z4e37) (cdaar . Z4e36) (caddr . Z4e35) (cadar . Z4e34) (caadr . Z4e33) (caaar . Z4e32) (cddr . Z4e31) (cdar . Z4e30) (cadr . Z4e2f) (caar . Z4e2e) (cdr . Z4e2d) (car . Z4e2c) (boolean? . Z4e2b) (boolean=? . Z4e2a) (atan . Z4e29) (assertion-violation . Z4e28) (asin . Z4e27) (apply . Z4e26) (append . Z4e25) (angle . Z4e24) (acos . Z4e23) (abs . Z4e22) (/ . Z4e21) (* . Z4e20) (- . Z4e1f) (+ . Z4e1e) (>= . Z4e1d) (> . Z4e1c) (= . Z4e1b) (<= . Z4e1a) (< . Z4e19) (library . Z4e18) (&no-nans . Z4e17) (&no-infinities . Z4e16) (&i/o-encoding . Z4e15) (&i/o-decoding . Z4e14) (&i/o-port . Z4e13) (&i/o-file-does-not-exist . Z4e12) (&i/o-file-already-exists . Z4e11) (&i/o-file-is-read-only . Z4e10) (&i/o-file-protection . Z4e0f) (&i/o-filename . Z4e0e) (&i/o-invalid-position . Z4e0d) (&i/o-write . Z4e0c) (&i/o-read . Z4e0b) (&i/o . Z4e0a) (&undefined . Z4e09) (&syntax . Z4e08) (&lexical . Z4e07) (&implementation-restriction . Z4e06) (&non-continuable . Z4e05) (&who . Z4e04) (&irritants . Z4e03) (&assertion . Z4e02) (&violation . Z4e01) (&error . Z4e00) (&serious . Z4dff) (&warning . Z4dfe) (&message . Z4dfd) (&condition . Z4dfc) (define-condition-type . Z4dfb) (define-enumeration . Z4dfa) (define-record-type . Z4df9) (parent-rtd . Z4df8) (nongenerative . Z4df7) (opaque . Z4df6) (sealed . Z4df5) (protocol . Z4df4) (parent . Z4df3) (immutable . Z4df2) (mutable . Z4df1) (fields . Z4df0) (error-handling-mode . Z4def) (file-options . Z4dee) (buffer-mode . Z4ded) (eol-style . Z4dec) (guard . Z4deb) (unsyntax-splicing . Z4de8) (unsyntax . Z4de7) (unquote-splicing . Z4de6) (unquote . Z4de5) (_ . Z4de4) (else . Z4de3) (=> . Z4de2) (... . Z4de1) (assert . Z4de0) (endianness . Z4ddf) (time . Z4ddd) (do . Z4ddc) (cond . Z4ddb) (let* . Z4dda) (let*-values . Z4dd9) (let-values . Z4dd8) (identifier-syntax . Z4dd7) (with-syntax . Z4dd6) (quasisyntax . Z4dd5) (quasiquote . Z4dd4) (syntax-rules . Z4dd3) (include . Z4dd2) (record-constructor-descriptor . Z4dd0) (record-type-descriptor . Z4dcf) (case . Z4dce) (unless . Z4dcc) (when . Z4dcb) (or . Z4dca) (and . Z4dc9) (if . Z4dc8) (let . Z4dc7) (letrec* . Z4dc6) (letrec . Z4dc5) (case-lambda . Z4dc3) (lambda . Z4dc2) (syntax . Z4dc1) (syntax-case . Z4dc0) (quote . Z4dbf) (letrec-syntax . Z4dbd) (let-syntax . Z4dbc) (set! . Z4dbb) (import . Z4dba) (begin . Z4db9) (define-syntax . Z4db7) (define . Z4db6)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z5163 '(psyntax null-environment-5) '() '() '() '() '((make-promise . Z4fb9) (unquote-splicing . Z4de6) (unquote . Z4de5) (_ . Z4de4) (else . Z4de3) (=> . Z4de2) (... . Z4de1) (delay . Z4dde) (do . Z4ddc) (cond . Z4ddb) (let* . Z4dda) (quasiquote . Z4dd4) (syntax-rules . Z4dd3) (case . Z4dce) (or . Z4dca) (and . Z4dc9) (if . Z4dc8) (let . Z4dc7) (letrec . Z4dc5) (lambda . Z4dc2) (quote . Z4dbf) (letrec-syntax . Z4dbd) (let-syntax . Z4dbc) (set! . Z4dbb) (begin . Z4db9) (define-syntax . Z4db7) (define . Z4db6)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z5164 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . Z506a) (string-ci>=? . Z5069) (string-ci=? . Z5068) (string-ci<? . Z5067) (string-ci<=? . Z5066) (char-whitespace? . Z5065) (char-upper-case? . Z5064) (char-numeric? . Z5062) (char-lower-case? . Z5061) (char-upcase . Z505f) (char-downcase . Z505c) (char-ci>? . Z505b) (char-ci>=? . Z505a) (char-ci=? . Z5059) (char-ci<? . Z5058) (char-ci<=? . Z5057) (char-alphabetic? . Z5056) (call-with-output-file . Z502a) (call-with-input-file . Z5029) (write-char . Z5028) (write . Z5027) (with-output-to-file . Z5026) (with-input-from-file . Z5025) (read-char . Z5024) (read . Z5023) (peek-char . Z5022) (open-output-file . Z5021) (open-input-file . Z5020) (newline . Z501f) (display . Z501e) (close-output-port . Z501d) (close-input-port . Z501c) (eof-object . Z501a) (current-output-port . Z5018) (current-input-port . Z5017) (output-port? . Z5016) (input-port? . Z5015) (scheme-report-environment . Z316d) (quotient . Z4fbf) (null-environment . Z316b) (remainder . Z4fbe) (modulo . Z4fbd) (inexact->exact . Z4fbc) (force . Z4fbb) (exact->inexact . Z4fba) (make-promise . Z4fb9) (string-fill! . Z4fb7) (string-set! . Z4fb6) (set-cdr! . Z4fb5) (set-car! . Z4fb4) (memv . Z4fae) (memq . Z4fad) (member . Z4fab) (assv . Z4fa3) (assq . Z4fa2) (assoc . Z4fa0) (eval . Z3171) (zero? . Z4eba) (vector? . Z4eb9) (vector-set! . Z4eb8) (vector-ref . Z4eb7) (vector-length . Z4eb5) (vector-fill! . Z4eb3) (vector->list . Z4eb2) (vector . Z4eb1) (values . Z4eb0) (truncate . Z4eaf) (tan . Z4eae) (symbol? . Z4ead) (symbol->string . Z4eab) (substring . Z4eaa) (string? . Z4ea9) (string>? . Z4ea8) (string>=? . Z4ea7) (string=? . Z4ea6) (string<? . Z4ea5) (string<=? . Z4ea4) (string-ref . Z4ea3) (string-length . Z4ea2) (string-copy . Z4ea0) (string-append . Z4e9f) (string->symbol . Z4e9e) (string->number . Z4e9d) (string->list . Z4e9c) (string . Z4e9b) (sqrt . Z4e9a) (sin . Z4e99) (round . Z4e98) (reverse . Z4e97) (real? . Z4e96) (real-part . Z4e94) (rationalize . Z4e93) (rational? . Z4e92) (procedure? . Z4e90) (positive? . Z4e8f) (pair? . Z4e8e) (odd? . Z4e8d) (numerator . Z4e8c) (number? . Z4e8b) (number->string . Z4e8a) (not . Z4e88) (negative? . Z4e87) (min . Z4e85) (max . Z4e84) (map . Z4e83) (make-vector . Z4e82) (make-string . Z4e81) (make-rectangular . Z4e80) (make-polar . Z4e7f) (magnitude . Z4e7e) (log . Z4e7d) (list? . Z4e7c) (list-tail . Z4e7b) (list-ref . Z4e7a) (list->vector . Z4e79) (list->string . Z4e78) (list . Z4e77) (length . Z4e76) (lcm . Z4e75) (integer? . Z4e74) (integer->char . Z4e72) (inexact? . Z4e70) (imag-part . Z4e6e) (gcd . Z4e6d) (for-each . Z4e6c) (floor . Z4e6b) (expt . Z4e69) (exp . Z4e68) (exact? . Z4e67) (even? . Z4e64) (eqv? . Z4e62) (equal? . Z4e61) (eq? . Z4e60) (dynamic-wind . Z4e5f) (denominator . Z4e58) (cos . Z4e57) (cons . Z4e56) (complex? . Z4e55) (char? . Z4e54) (char>? . Z4e53) (char>=? . Z4e52) (char=? . Z4e51) (char<? . Z4e50) (char<=? . Z4e4f) (char->integer . Z4e4e) (ceiling . Z4e4d) (call-with-values . Z4e4c) (call-with-current-continuation . Z4e4a) (cddddr . Z4e49) (cdddar . Z4e48) (cddadr . Z4e47) (cddaar . Z4e46) (cdaddr . Z4e45) (cdadar . Z4e44) (cdaadr . Z4e43) (cdaaar . Z4e42) (cadddr . Z4e41) (caddar . Z4e40) (cadadr . Z4e3f) (cadaar . Z4e3e) (caaddr . Z4e3d) (caadar . Z4e3c) (caaadr . Z4e3b) (caaaar . Z4e3a) (cdddr . Z4e39) (cddar . Z4e38) (cdadr . Z4e37) (cdaar . Z4e36) (caddr . Z4e35) (cadar . Z4e34) (caadr . Z4e33) (caaar . Z4e32) (cddr . Z4e31) (cdar . Z4e30) (cadr . Z4e2f) (caar . Z4e2e) (cdr . Z4e2d) (car . Z4e2c) (boolean? . Z4e2b) (atan . Z4e29) (asin . Z4e27) (apply . Z4e26) (append . Z4e25) (angle . Z4e24) (acos . Z4e23) (abs . Z4e22) (/ . Z4e21) (* . Z4e20) (- . Z4e1f) (+ . Z4e1e) (>= . Z4e1d) (> . Z4e1c) (= . Z4e1b) (<= . Z4e1a) (< . Z4e19) (unquote-splicing . Z4de6) (unquote . Z4de5) (else . Z4de3) (=> . Z4de2) (... . Z4de1) (delay . Z4dde) (do . Z4ddc) (cond . Z4ddb) (let* . Z4dda) (quasiquote . Z4dd4) (syntax-rules . Z4dd3) (case . Z4dce) (or . Z4dca) (and . Z4dc9) (if . Z4dc8) (let . Z4dc7) (letrec . Z4dc5) (lambda . Z4dc2) (quote . Z4dbf) (letrec-syntax . Z4dbd) (let-syntax . Z4dbc) (set! . Z4dbb) (begin . Z4db9) (define-syntax . Z4db7) (define . Z4db6)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z5165 '(psyntax modules) '() '() '() '() '((module . Z4db8)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z5166 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z5167 '(rnrs) '(6) '() '() '() '((regexp? . Z5122) (string-upcase . Z5072) (string-titlecase . Z5071) (string-normalize-nfkd . Z5070) (string-normalize-nfkc . Z506f) (string-normalize-nfd . Z506e) (string-normalize-nfc . Z506d) (string-foldcase . Z506c) (string-downcase . Z506b) (string-ci>? . Z506a) (string-ci>=? . Z5069) (string-ci=? . Z5068) (string-ci<? . Z5067) (string-ci<=? . Z5066) (char-whitespace? . Z5065) (char-upper-case? . Z5064) (char-title-case? . Z5063) (char-numeric? . Z5062) (char-lower-case? . Z5061) (char-general-category . Z5060) (char-upcase . Z505f) (char-titlecase . Z505e) (char-foldcase . Z505d) (char-downcase . Z505c) (char-ci>? . Z505b) (char-ci>=? . Z505a) (char-ci=? . Z5059) (char-ci<? . Z5058) (char-ci<=? . Z5057) (char-alphabetic? . Z5056) (make-variable-transformer . Z2edc) (identifier? . Z3193) (generate-temporaries . Z317f) (free-identifier=? . Z3181) (syntax->datum . Z3197) (datum->syntax . Z3195) (bound-identifier=? . Z3183) (record-type-descriptor? . Z5055) (record-predicate . Z5054) (record-mutator . Z5053) (record-constructor . Z5052) (record-accessor . Z5051) (make-record-type-descriptor . Z5050) (make-record-constructor-descriptor . Z504f) (record? . Z504e) (record-type-uid . Z504d) (record-type-sealed? . Z504c) (record-type-parent . Z504b) (record-type-opaque? . Z504a) (record-type-name . Z5049) (record-type-generative? . Z5048) (record-type-field-names . Z5047) (record-rtd . Z5046) (record-field-mutable? . Z5045) (delete-file . Z5044) (file-exists? . Z5043) (vector-sort! . Z5042) (vector-sort . Z5041) (list-sort . Z5040) (symbol-hash . Z503f) (string-ci-hash . Z503e) (string-hash . Z503d) (equal-hash . Z503c) (hashtable-equivalence-function . Z503b) (make-hashtable . Z503a) (hashtable-hash-function . Z5039) (make-eqv-hashtable . Z5038) (make-eq-hashtable . Z5037) (hashtable? . Z5036) (hashtable-update! . Z5035) (hashtable-size . Z5034) (hashtable-set! . Z5033) (hashtable-ref . Z5032) (hashtable-mutable? . Z5031) (hashtable-keys . Z5030) (hashtable-entries . Z502f) (hashtable-delete! . Z502e) (hashtable-copy . Z502d) (hashtable-contains? . Z502c) (hashtable-clear! . Z502b) (call-with-output-file . Z502a) (call-with-input-file . Z5029) (write-char . Z5028) (write . Z5027) (with-output-to-file . Z5026) (with-input-from-file . Z5025) (read-char . Z5024) (read . Z5023) (peek-char . Z5022) (open-output-file . Z5021) (open-input-file . Z5020) (newline . Z501f) (display . Z501e) (close-output-port . Z501d) (close-input-port . Z501c) (eof-object? . Z501b) (eof-object . Z501a) (current-error-port . Z5019) (current-output-port . Z5018) (current-input-port . Z5017) (output-port? . Z5016) (input-port? . Z5015) (utf-8-codec . Z5014) (utf-16-codec . Z5013) (transcoder-error-handling-mode . Z5012) (transcoder-eol-style . Z5011) (transcoder-codec . Z5010) (transcoded-port . Z500f) (textual-port? . Z500e) (string->bytevector . Z500d) (standard-output-port . Z500c) (standard-input-port . Z500b) (standard-error-port . Z500a) (set-port-position! . Z5009) (put-u8 . Z5008) (put-string . Z5007) (put-datum . Z5006) (put-char . Z5005) (put-bytevector . Z5004) (port? . Z5003) (port-transcoder . Z5002) (port-position . Z5001) (port-has-set-port-position!? . Z5000) (port-has-port-position? . Z4fff) (port-eof? . Z4ffe) (output-port-buffer-mode . Z4ffd) (open-string-output-port . Z4ffc) (open-string-input-port . Z4ffb) (open-file-output-port . Z4ffa) (open-file-input/output-port . Z4ff9) (open-file-input-port . Z4ff8) (open-bytevector-output-port . Z4ff7) (open-bytevector-input-port . Z4ff6) (native-transcoder . Z4ff5) (native-eol-style . Z4ff4) (make-transcoder . Z4ff3) (latin-1-codec . Z4ff2) (make-i/o-write-error . Z4ff1) (make-i/o-read-error . Z4ff0) (make-i/o-port-error . Z4fef) (make-i/o-invalid-position-error . Z4fee) (make-i/o-filename-error . Z4fed) (make-i/o-file-protection-error . Z4fec) (make-i/o-file-is-read-only-error . Z4feb) (make-i/o-file-does-not-exist-error . Z4fea) (make-i/o-file-already-exists-error . Z4fe9) (make-i/o-error . Z4fe8) (make-i/o-encoding-error . Z4fe7) (make-i/o-decoding-error . Z4fe6) (make-custom-textual-output-port . Z4fe5) (make-custom-textual-input/output-port . Z4fe4) (make-custom-textual-input-port . Z4fe3) (make-custom-binary-output-port . Z4fe2) (make-custom-binary-input/output-port . Z4fe1) (make-custom-binary-input-port . Z4fe0) (make-bytevector . Z4fdf) (lookahead-u8 . Z4fde) (lookahead-char . Z4fdd) (i/o-write-error? . Z4fdc) (i/o-read-error? . Z4fdb) (i/o-port-error? . Z4fda) (i/o-invalid-position-error? . Z4fd9) (i/o-filename-error? . Z4fd8) (i/o-file-protection-error? . Z4fd7) (i/o-file-is-read-only-error? . Z4fd6) (i/o-file-does-not-exist-error? . Z4fd5) (i/o-file-already-exists-error? . Z4fd4) (i/o-error? . Z4fd3) (i/o-error-position . Z4fd2) (i/o-error-port . Z4fd1) (i/o-error-filename . Z4fd0) (i/o-encoding-error? . Z4fcf) (i/o-encoding-error-char . Z4fce) (i/o-decoding-error? . Z4fcd) (get-u8 . Z4fcc) (get-string-n! . Z4fcb) (get-string-n . Z4fca) (get-string-all . Z4fc9) (get-line . Z4fc8) (get-datum . Z4fc7) (get-char . Z4fc6) (get-bytevector-some . Z4fc5) (get-bytevector-n! . Z4fc4) (get-bytevector-n . Z4fc3) (get-bytevector-all . Z4fc2) (flush-output-port . Z4fc1) (close-port . Z4fc0) (exit . Z4fb8) (command-line . Z4c4a) (remove . Z4fb3) (remv . Z4fb2) (remp . Z4fb1) (remq . Z4fb0) (partition . Z4faf) (memv . Z4fae) (memq . Z4fad) (memp . Z4fac) (member . Z4fab) (exists . Z4faa) (for-all . Z4fa9) (fold-right . Z4fa8) (fold-left . Z4fa7) (find . Z4fa6) (filter . Z4fa5) (cons* . Z4fa4) (assv . Z4fa3) (assq . Z4fa2) (assp . Z4fa1) (assoc . Z4fa0) (call-with-string-output-port . Z4f9f) (call-with-port . Z4f9e) (call-with-bytevector-output-port . Z4f9d) (bytevector->string . Z4f9c) (buffer-mode? . Z4f9b) (binary-port? . Z4f9a) (with-exception-handler . Z4f99) (raise-continuable . Z4f98) (raise . Z4f97) (make-enumeration . Z4f96) (enum-set=? . Z4f95) (enum-set-universe . Z4f94) (enum-set-union . Z4f93) (enum-set-subset? . Z4f92) (enum-set-projection . Z4f91) (enum-set-member? . Z4f90) (enum-set-intersection . Z4f8f) (enum-set-indexer . Z4f8e) (enum-set-difference . Z4f8d) (enum-set-constructor . Z4f8c) (enum-set-complement . Z4f8b) (enum-set->list . Z4f8a) (who-condition? . Z4f89) (warning? . Z4f88) (violation? . Z4f87) (undefined-violation? . Z4f86) (syntax-violation? . Z4f85) (syntax-violation-subform . Z4f84) (syntax-violation-form . Z4f83) (syntax-violation . Z3191) (simple-conditions . Z4f82) (serious-condition? . Z4f81) (non-continuable-violation? . Z4f80) (message-condition? . Z4f7f) (make-who-condition . Z4f7e) (make-warning . Z4f7d) (make-violation . Z4f7c) (make-undefined-violation . Z4f7b) (make-syntax-violation . Z4f7a) (make-serious-condition . Z4f79) (make-non-continuable-violation . Z4f78) (make-message-condition . Z4f77) (make-lexical-violation . Z4f76) (make-irritants-condition . Z4f75) (make-implementation-restriction-violation . Z4f74) (make-error . Z4f73) (make-assertion-violation . Z4f72) (lexical-violation? . Z4f71) (irritants-condition? . Z4f70) (implementation-restriction-violation? . Z4f6f) (error? . Z4f6e) (condition-who . Z4f6d) (condition-predicate . Z4f6c) (condition-message . Z4f6b) (condition-irritants . Z4f6a) (condition-accessor . Z4f69) (condition . Z4f68) (assertion-violation? . Z4f67) (condition? . Z4f66) (utf32->string . Z4f65) (utf16->string . Z4f64) (utf8->string . Z4f63) (uint-list->bytevector . Z4f62) (u8-list->bytevector . Z4f61) (string->utf8 . Z4f60) (string->utf32 . Z4f5f) (string->utf16 . Z4f5e) (sint-list->bytevector . Z4f5d) (native-endianness . Z4f5c) (bytevector? . Z4f5b) (bytevector=? . Z4f5a) (bytevector-uint-set! . Z4f59) (bytevector-uint-ref . Z4f58) (bytevector-u8-set! . Z4f57) (bytevector-u8-ref . Z4f56) (bytevector-u64-set! . Z4f55) (bytevector-u64-ref . Z4f54) (bytevector-u64-native-set! . Z4f53) (bytevector-u64-native-ref . Z4f52) (bytevector-u32-set! . Z4f51) (bytevector-u32-ref . Z4f50) (bytevector-u32-native-set! . Z4f4f) (bytevector-u32-native-ref . Z4f4e) (bytevector-u16-set! . Z4f4d) (bytevector-u16-ref . Z4f4c) (bytevector-u16-native-set! . Z4f4b) (bytevector-u16-native-ref . Z4f4a) (bytevector-sint-set! . Z4f49) (bytevector-sint-ref . Z4f48) (bytevector-s8-set! . Z4f47) (bytevector-s8-ref . Z4f46) (bytevector-s64-set! . Z4f45) (bytevector-s64-ref . Z4f44) (bytevector-s64-native-set! . Z4f43) (bytevector-s64-native-ref . Z4f42) (bytevector-s32-set! . Z4f41) (bytevector-s32-ref . Z4f40) (bytevector-s32-native-set! . Z4f3f) (bytevector-s32-native-ref . Z4f3e) (bytevector-s16-set! . Z4f3d) (bytevector-s16-ref . Z4f3c) (bytevector-s16-native-set! . Z4f3b) (bytevector-s16-native-ref . Z4f3a) (bytevector-length . Z4f39) (bytevector-ieee-single-ref . Z4f38) (bytevector-ieee-single-set! . Z4f37) (bytevector-ieee-single-native-set! . Z4f36) (bytevector-ieee-single-native-ref . Z4f35) (bytevector-ieee-double-set! . Z4f34) (bytevector-ieee-double-ref . Z4f33) (bytevector-ieee-double-native-set! . Z4f32) (bytevector-ieee-double-native-ref . Z4f31) (bytevector-fill! . Z4f30) (bytevector-copy! . Z4f2f) (bytevector-copy . Z4f2e) (bytevector->uint-list . Z4f2d) (bytevector->u8-list . Z4f2c) (bytevector->sint-list . Z4f2b) (no-nans-violation? . Z4f2a) (no-infinities-violation? . Z4f29) (make-no-nans-violation . Z4f28) (make-no-infinities-violation . Z4f27) (real->flonum . Z4f26) (flzero? . Z4f25) (fltruncate . Z4f24) (fltan . Z4f23) (flsqrt . Z4f22) (flsin . Z4f21) (flround . Z4f20) (flpositive? . Z4f1f) (flonum? . Z4f1e) (flodd? . Z4f1d) (flnumerator . Z4f1c) (flnegative? . Z4f1b) (flnan? . Z4f1a) (flmod0 . Z4f19) (flmod . Z4f18) (flmin . Z4f17) (flmax . Z4f16) (fllog . Z4f15) (flinteger? . Z4f14) (flinfinite? . Z4f13) (flfloor . Z4f12) (flfinite? . Z4f11) (flexpt . Z4f10) (flexp . Z4f0f) (fleven? . Z4f0e) (fldiv0-and-mod0 . Z4f0d) (fldiv0 . Z4f0c) (fldiv-and-mod . Z4f0b) (fldiv . Z4f0a) (fldenominator . Z4f09) (flcos . Z4f08) (flceiling . Z4f07) (flatan . Z4f06) (flasin . Z4f05) (flacos . Z4f04) (flabs . Z4f03) (fl>? . Z4f02) (fl>=? . Z4f01) (fl=? . Z4f00) (fl<? . Z4eff) (fl<=? . Z4efe) (fl/ . Z4efd) (fl- . Z4efc) (fl+ . Z4efb) (fl* . Z4efa) (fixnum->flonum . Z4ef9) (fxzero? . Z4ef8) (fxxor . Z4ef7) (fxrotate-bit-field . Z4ef6) (fxreverse-bit-field . Z4ef5) (fxpositive? . Z4ef4) (fxodd? . Z4ef3) (fxnot . Z4ef2) (fxnegative? . Z4ef1) (fxmod0 . Z4ef0) (fxmod . Z4eef) (fxmin . Z4eee) (fxmax . Z4eed) (fxlength . Z4eec) (fxior . Z4eeb) (fxif . Z4eea) (fxfirst-bit-set . Z4ee9) (fxeven? . Z4ee8) (fxdiv0-and-mod0 . Z4ee7) (fxdiv0 . Z4ee6) (fxdiv-and-mod . Z4ee5) (fxdiv . Z4ee4) (fxcopy-bit-field . Z4ee3) (fxcopy-bit . Z4ee2) (fxbit-set? . Z4ee1) (fxbit-field . Z4ee0) (fxbit-count . Z4edf) (fxarithmetic-shift-right . Z4ede) (fxarithmetic-shift-left . Z4edd) (fxarithmetic-shift . Z4edc) (fxand . Z4edb) (fx>? . Z4eda) (fx>=? . Z4ed9) (fx=? . Z4ed8) (fx<? . Z4ed7) (fx<=? . Z4ed6) (fx-/carry . Z4ed5) (fx- . Z4ed4) (fx+/carry . Z4ed3) (fx+ . Z4ed2) (fx*/carry . Z4ed1) (fx* . Z4ed0) (greatest-fixnum . Z4ecf) (least-fixnum . Z4ece) (fixnum-width . Z4ecd) (fixnum? . Z4ecc) (bitwise-rotate-bit-field . Z4ecb) (bitwise-reverse-bit-field . Z4eca) (bitwise-length . Z4ec9) (bitwise-if . Z4ec8) (bitwise-first-bit-set . Z4ec7) (bitwise-copy-bit-field . Z4ec6) (bitwise-copy-bit . Z4ec5) (bitwise-bit-set? . Z4ec4) (bitwise-bit-field . Z4ec3) (bitwise-bit-count . Z4ec2) (bitwise-xor . Z4ec1) (bitwise-ior . Z4ec0) (bitwise-and . Z4ebf) (bitwise-not . Z4ebe) (bitwise-arithmetic-shift-right . Z4ebd) (bitwise-arithmetic-shift-left . Z4ebc) (bitwise-arithmetic-shift . Z4ebb) (zero? . Z4eba) (vector? . Z4eb9) (vector-set! . Z4eb8) (vector-ref . Z4eb7) (vector-map . Z4eb6) (vector-length . Z4eb5) (vector-for-each . Z4eb4) (vector-fill! . Z4eb3) (vector->list . Z4eb2) (vector . Z4eb1) (values . Z4eb0) (truncate . Z4eaf) (tan . Z4eae) (symbol? . Z4ead) (symbol=? . Z4eac) (symbol->string . Z4eab) (substring . Z4eaa) (string? . Z4ea9) (string>? . Z4ea8) (string>=? . Z4ea7) (string=? . Z4ea6) (string<? . Z4ea5) (string<=? . Z4ea4) (string-ref . Z4ea3) (string-length . Z4ea2) (string-for-each . Z4ea1) (string-copy . Z4ea0) (string-append . Z4e9f) (string->symbol . Z4e9e) (string->number . Z4e9d) (string->list . Z4e9c) (string . Z4e9b) (sqrt . Z4e9a) (sin . Z4e99) (round . Z4e98) (reverse . Z4e97) (real? . Z4e96) (real-valued? . Z4e95) (real-part . Z4e94) (rationalize . Z4e93) (rational? . Z4e92) (rational-valued? . Z4e91) (procedure? . Z4e90) (positive? . Z4e8f) (pair? . Z4e8e) (odd? . Z4e8d) (numerator . Z4e8c) (number? . Z4e8b) (number->string . Z4e8a) (null? . Z4e89) (not . Z4e88) (negative? . Z4e87) (nan? . Z4e86) (min . Z4e85) (max . Z4e84) (map . Z4e83) (make-vector . Z4e82) (make-string . Z4e81) (make-rectangular . Z4e80) (make-polar . Z4e7f) (magnitude . Z4e7e) (log . Z4e7d) (list? . Z4e7c) (list-tail . Z4e7b) (list-ref . Z4e7a) (list->vector . Z4e79) (list->string . Z4e78) (list . Z4e77) (length . Z4e76) (lcm . Z4e75) (integer? . Z4e74) (integer-valued? . Z4e73) (integer->char . Z4e72) (infinite? . Z4e71) (inexact? . Z4e70) (inexact . Z4e6f) (imag-part . Z4e6e) (gcd . Z4e6d) (for-each . Z4e6c) (floor . Z4e6b) (finite? . Z4e6a) (expt . Z4e69) (exp . Z4e68) (exact? . Z4e67) (exact-integer-sqrt . Z4e66) (exact . Z4e65) (even? . Z4e64) (error . Z4e63) (eqv? . Z4e62) (equal? . Z4e61) (eq? . Z4e60) (dynamic-wind . Z4e5f) (div0-and-mod0 . Z4e5e) (mod0 . Z4e5d) (div0 . Z4e5c) (div-and-mod . Z4e5b) (mod . Z4e5a) (div . Z4e59) (denominator . Z4e58) (cos . Z4e57) (cons . Z4e56) (complex? . Z4e55) (char? . Z4e54) (char>? . Z4e53) (char>=? . Z4e52) (char=? . Z4e51) (char<? . Z4e50) (char<=? . Z4e4f) (char->integer . Z4e4e) (ceiling . Z4e4d) (call-with-values . Z4e4c) (call/cc . Z4e4b) (call-with-current-continuation . Z4e4a) (cddddr . Z4e49) (cdddar . Z4e48) (cddadr . Z4e47) (cddaar . Z4e46) (cdaddr . Z4e45) (cdadar . Z4e44) (cdaadr . Z4e43) (cdaaar . Z4e42) (cadddr . Z4e41) (caddar . Z4e40) (cadadr . Z4e3f) (cadaar . Z4e3e) (caaddr . Z4e3d) (caadar . Z4e3c) (caaadr . Z4e3b) (caaaar . Z4e3a) (cdddr . Z4e39) (cddar . Z4e38) (cdadr . Z4e37) (cdaar . Z4e36) (caddr . Z4e35) (cadar . Z4e34) (caadr . Z4e33) (caaar . Z4e32) (cddr . Z4e31) (cdar . Z4e30) (cadr . Z4e2f) (caar . Z4e2e) (cdr . Z4e2d) (car . Z4e2c) (boolean? . Z4e2b) (boolean=? . Z4e2a) (atan . Z4e29) (assertion-violation . Z4e28) (asin . Z4e27) (apply . Z4e26) (append . Z4e25) (angle . Z4e24) (acos . Z4e23) (abs . Z4e22) (/ . Z4e21) (* . Z4e20) (- . Z4e1f) (+ . Z4e1e) (>= . Z4e1d) (> . Z4e1c) (= . Z4e1b) (<= . Z4e1a) (< . Z4e19) (&no-nans . Z4e17) (&no-infinities . Z4e16) (&i/o-encoding . Z4e15) (&i/o-decoding . Z4e14) (&i/o-port . Z4e13) (&i/o-file-does-not-exist . Z4e12) (&i/o-file-already-exists . Z4e11) (&i/o-file-is-read-only . Z4e10) (&i/o-file-protection . Z4e0f) (&i/o-filename . Z4e0e) (&i/o-invalid-position . Z4e0d) (&i/o-write . Z4e0c) (&i/o-read . Z4e0b) (&i/o . Z4e0a) (&undefined . Z4e09) (&syntax . Z4e08) (&lexical . Z4e07) (&implementation-restriction . Z4e06) (&non-continuable . Z4e05) (&who . Z4e04) (&irritants . Z4e03) (&assertion . Z4e02) (&violation . Z4e01) (&error . Z4e00) (&serious . Z4dff) (&warning . Z4dfe) (&message . Z4dfd) (&condition . Z4dfc) (define-condition-type . Z4dfb) (define-enumeration . Z4dfa) (define-record-type . Z4df9) (parent-rtd . Z4df8) (nongenerative . Z4df7) (opaque . Z4df6) (sealed . Z4df5) (protocol . Z4df4) (parent . Z4df3) (immutable . Z4df2) (mutable . Z4df1) (fields . Z4df0) (error-handling-mode . Z4def) (file-options . Z4dee) (buffer-mode . Z4ded) (eol-style . Z4dec) (guard . Z4deb) (unsyntax-splicing . Z4de8) (unsyntax . Z4de7) (unquote-splicing . Z4de6) (unquote . Z4de5) (_ . Z4de4) (else . Z4de3) (=> . Z4de2) (... . Z4de1) (assert . Z4de0) (endianness . Z4ddf) (do . Z4ddc) (cond . Z4ddb) (let* . Z4dda) (let*-values . Z4dd9) (let-values . Z4dd8) (identifier-syntax . Z4dd7) (with-syntax . Z4dd6) (quasisyntax . Z4dd5) (quasiquote . Z4dd4) (syntax-rules . Z4dd3) (record-constructor-descriptor . Z4dd0) (record-type-descriptor . Z4dcf) (case . Z4dce) (unless . Z4dcc) (when . Z4dcb) (or . Z4dca) (and . Z4dc9) (if . Z4dc8) (let . Z4dc7) (letrec* . Z4dc6) (letrec . Z4dc5) (case-lambda . Z4dc3) (lambda . Z4dc2) (syntax . Z4dc1) (syntax-case . Z4dc0) (quote . Z4dbf) (letrec-syntax . Z4dbd) (let-syntax . Z4dbc) (set! . Z4dbb) (begin . Z4db9) (define-syntax . Z4db7) (define . Z4db6)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z5168 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . Z316d) (quotient . Z4fbf) (null-environment . Z316b) (remainder . Z4fbe) (modulo . Z4fbd) (inexact->exact . Z4fbc) (force . Z4fbb) (exact->inexact . Z4fba) (make-promise . Z4fb9) (delay . Z4dde)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z5169 '(rnrs control) '(6) '() '() '() '((do . Z4ddc) (unless . Z4dcc) (when . Z4dcb) (case-lambda . Z4dc3)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z516a '(rnrs eval) '(6) '() '() '() '((eval . Z3171) (environment . Z3169)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z516b '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . Z4fb5) (set-car! . Z4fb4)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z516c '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . Z4fb7) (string-set! . Z4fb6)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z516d '(rnrs programs) '(6) '() '() '() '((exit . Z4fb8) (command-line . Z4c4a)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z516e '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . Z2edc) (identifier? . Z3193) (generate-temporaries . Z317f) (free-identifier=? . Z3181) (syntax->datum . Z3197) (datum->syntax . Z3195) (bound-identifier=? . Z3183) (syntax-violation . Z3191) (unsyntax-splicing . Z4de8) (unsyntax . Z4de7) (_ . Z4de4) (... . Z4de1) (with-syntax . Z4dd6) (quasisyntax . Z4dd5) (syntax . Z4dc1) (syntax-case . Z4dc0)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z516f '(rnrs files) '(6) '() '() '() '((delete-file . Z5044) (file-exists? . Z5043) (make-i/o-write-error . Z4ff1) (make-i/o-read-error . Z4ff0) (make-i/o-port-error . Z4fef) (make-i/o-invalid-position-error . Z4fee) (make-i/o-filename-error . Z4fed) (make-i/o-file-protection-error . Z4fec) (make-i/o-file-is-read-only-error . Z4feb) (make-i/o-file-does-not-exist-error . Z4fea) (make-i/o-file-already-exists-error . Z4fe9) (make-i/o-error . Z4fe8) (i/o-write-error? . Z4fdc) (i/o-read-error? . Z4fdb) (i/o-port-error? . Z4fda) (i/o-invalid-position-error? . Z4fd9) (i/o-filename-error? . Z4fd8) (i/o-file-protection-error? . Z4fd7) (i/o-file-is-read-only-error? . Z4fd6) (i/o-file-does-not-exist-error? . Z4fd5) (i/o-file-already-exists-error? . Z4fd4) (i/o-error? . Z4fd3) (i/o-error-position . Z4fd2) (i/o-error-port . Z4fd1) (i/o-error-filename . Z4fd0) (&i/o-port . Z4e13) (&i/o-file-does-not-exist . Z4e12) (&i/o-file-already-exists . Z4e11) (&i/o-file-is-read-only . Z4e10) (&i/o-file-protection . Z4e0f) (&i/o-filename . Z4e0e) (&i/o-invalid-position . Z4e0d) (&i/o-write . Z4e0c) (&i/o-read . Z4e0b) (&i/o . Z4e0a)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z5170 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . Z5042) (vector-sort . Z5041) (list-sort . Z5040)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z5171 '(rnrs base) '(6) '() '() '() '((zero? . Z4eba) (vector? . Z4eb9) (vector-set! . Z4eb8) (vector-ref . Z4eb7) (vector-map . Z4eb6) (vector-length . Z4eb5) (vector-for-each . Z4eb4) (vector-fill! . Z4eb3) (vector->list . Z4eb2) (vector . Z4eb1) (values . Z4eb0) (truncate . Z4eaf) (tan . Z4eae) (symbol? . Z4ead) (symbol=? . Z4eac) (symbol->string . Z4eab) (substring . Z4eaa) (string? . Z4ea9) (string>? . Z4ea8) (string>=? . Z4ea7) (string=? . Z4ea6) (string<? . Z4ea5) (string<=? . Z4ea4) (string-ref . Z4ea3) (string-length . Z4ea2) (string-for-each . Z4ea1) (string-copy . Z4ea0) (string-append . Z4e9f) (string->symbol . Z4e9e) (string->number . Z4e9d) (string->list . Z4e9c) (string . Z4e9b) (sqrt . Z4e9a) (sin . Z4e99) (round . Z4e98) (reverse . Z4e97) (real? . Z4e96) (real-valued? . Z4e95) (real-part . Z4e94) (rationalize . Z4e93) (rational? . Z4e92) (rational-valued? . Z4e91) (procedure? . Z4e90) (positive? . Z4e8f) (pair? . Z4e8e) (odd? . Z4e8d) (numerator . Z4e8c) (number? . Z4e8b) (number->string . Z4e8a) (null? . Z4e89) (not . Z4e88) (negative? . Z4e87) (nan? . Z4e86) (min . Z4e85) (max . Z4e84) (map . Z4e83) (make-vector . Z4e82) (make-string . Z4e81) (make-rectangular . Z4e80) (make-polar . Z4e7f) (magnitude . Z4e7e) (log . Z4e7d) (list? . Z4e7c) (list-tail . Z4e7b) (list-ref . Z4e7a) (list->vector . Z4e79) (list->string . Z4e78) (list . Z4e77) (length . Z4e76) (lcm . Z4e75) (integer? . Z4e74) (integer-valued? . Z4e73) (integer->char . Z4e72) (infinite? . Z4e71) (inexact? . Z4e70) (inexact . Z4e6f) (imag-part . Z4e6e) (gcd . Z4e6d) (for-each . Z4e6c) (floor . Z4e6b) (finite? . Z4e6a) (expt . Z4e69) (exp . Z4e68) (exact? . Z4e67) (exact-integer-sqrt . Z4e66) (exact . Z4e65) (even? . Z4e64) (error . Z4e63) (eqv? . Z4e62) (equal? . Z4e61) (eq? . Z4e60) (dynamic-wind . Z4e5f) (div0-and-mod0 . Z4e5e) (mod0 . Z4e5d) (div0 . Z4e5c) (div-and-mod . Z4e5b) (mod . Z4e5a) (div . Z4e59) (denominator . Z4e58) (cos . Z4e57) (cons . Z4e56) (complex? . Z4e55) (char? . Z4e54) (char>? . Z4e53) (char>=? . Z4e52) (char=? . Z4e51) (char<? . Z4e50) (char<=? . Z4e4f) (char->integer . Z4e4e) (ceiling . Z4e4d) (call-with-values . Z4e4c) (call/cc . Z4e4b) (call-with-current-continuation . Z4e4a) (cddddr . Z4e49) (cdddar . Z4e48) (cddadr . Z4e47) (cddaar . Z4e46) (cdaddr . Z4e45) (cdadar . Z4e44) (cdaadr . Z4e43) (cdaaar . Z4e42) (cadddr . Z4e41) (caddar . Z4e40) (cadadr . Z4e3f) (cadaar . Z4e3e) (caaddr . Z4e3d) (caadar . Z4e3c) (caaadr . Z4e3b) (caaaar . Z4e3a) (cdddr . Z4e39) (cddar . Z4e38) (cdadr . Z4e37) (cdaar . Z4e36) (caddr . Z4e35) (cadar . Z4e34) (caadr . Z4e33) (caaar . Z4e32) (cddr . Z4e31) (cdar . Z4e30) (cadr . Z4e2f) (caar . Z4e2e) (cdr . Z4e2d) (car . Z4e2c) (boolean? . Z4e2b) (boolean=? . Z4e2a) (atan . Z4e29) (assertion-violation . Z4e28) (asin . Z4e27) (apply . Z4e26) (append . Z4e25) (angle . Z4e24) (acos . Z4e23) (abs . Z4e22) (/ . Z4e21) (* . Z4e20) (- . Z4e1f) (+ . Z4e1e) (>= . Z4e1d) (> . Z4e1c) (= . Z4e1b) (<= . Z4e1a) (< . Z4e19) (unquote-splicing . Z4de6) (unquote . Z4de5) (_ . Z4de4) (else . Z4de3) (=> . Z4de2) (... . Z4de1) (assert . Z4de0) (cond . Z4ddb) (let* . Z4dda) (let*-values . Z4dd9) (let-values . Z4dd8) (identifier-syntax . Z4dd7) (quasiquote . Z4dd4) (syntax-rules . Z4dd3) (case . Z4dce) (or . Z4dca) (and . Z4dc9) (if . Z4dc8) (let . Z4dc7) (letrec* . Z4dc6) (letrec . Z4dc5) (lambda . Z4dc2) (quote . Z4dbf) (letrec-syntax . Z4dbd) (let-syntax . Z4dbc) (set! . Z4dbb) (begin . Z4db9) (define-syntax . Z4db7) (define . Z4db6)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z5172 '(rnrs lists) '(6) '() '() '() '((remove . Z4fb3) (remv . Z4fb2) (remp . Z4fb1) (remq . Z4fb0) (partition . Z4faf) (memv . Z4fae) (memq . Z4fad) (memp . Z4fac) (member . Z4fab) (exists . Z4faa) (for-all . Z4fa9) (fold-right . Z4fa8) (fold-left . Z4fa7) (find . Z4fa6) (filter . Z4fa5) (cons* . Z4fa4) (assv . Z4fa3) (assq . Z4fa2) (assp . Z4fa1) (assoc . Z4fa0)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z5173 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . Z502a) (call-with-input-file . Z5029) (write-char . Z5028) (write . Z5027) (with-output-to-file . Z5026) (with-input-from-file . Z5025) (read-char . Z5024) (read . Z5023) (peek-char . Z5022) (open-output-file . Z5021) (open-input-file . Z5020) (newline . Z501f) (display . Z501e) (close-output-port . Z501d) (close-input-port . Z501c) (eof-object? . Z501b) (eof-object . Z501a) (current-error-port . Z5019) (current-output-port . Z5018) (current-input-port . Z5017) (output-port? . Z5016) (input-port? . Z5015) (make-i/o-write-error . Z4ff1) (make-i/o-read-error . Z4ff0) (make-i/o-port-error . Z4fef) (make-i/o-invalid-position-error . Z4fee) (make-i/o-filename-error . Z4fed) (make-i/o-file-protection-error . Z4fec) (make-i/o-file-is-read-only-error . Z4feb) (make-i/o-file-does-not-exist-error . Z4fea) (make-i/o-file-already-exists-error . Z4fe9) (make-i/o-error . Z4fe8) (i/o-write-error? . Z4fdc) (i/o-read-error? . Z4fdb) (i/o-port-error? . Z4fda) (i/o-invalid-position-error? . Z4fd9) (i/o-filename-error? . Z4fd8) (i/o-file-protection-error? . Z4fd7) (i/o-file-is-read-only-error? . Z4fd6) (i/o-file-does-not-exist-error? . Z4fd5) (i/o-file-already-exists-error? . Z4fd4) (i/o-error? . Z4fd3) (i/o-error-position . Z4fd2) (i/o-error-port . Z4fd1) (i/o-error-filename . Z4fd0) (&i/o-port . Z4e13) (&i/o-file-does-not-exist . Z4e12) (&i/o-file-already-exists . Z4e11) (&i/o-file-is-read-only . Z4e10) (&i/o-file-protection . Z4e0f) (&i/o-filename . Z4e0e) (&i/o-invalid-position . Z4e0d) (&i/o-write . Z4e0c) (&i/o-read . Z4e0b) (&i/o . Z4e0a)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z5174 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . Z4fdf) (utf32->string . Z4f65) (utf16->string . Z4f64) (utf8->string . Z4f63) (uint-list->bytevector . Z4f62) (u8-list->bytevector . Z4f61) (string->utf8 . Z4f60) (string->utf32 . Z4f5f) (string->utf16 . Z4f5e) (sint-list->bytevector . Z4f5d) (native-endianness . Z4f5c) (bytevector? . Z4f5b) (bytevector=? . Z4f5a) (bytevector-uint-set! . Z4f59) (bytevector-uint-ref . Z4f58) (bytevector-u8-set! . Z4f57) (bytevector-u8-ref . Z4f56) (bytevector-u64-set! . Z4f55) (bytevector-u64-ref . Z4f54) (bytevector-u64-native-set! . Z4f53) (bytevector-u64-native-ref . Z4f52) (bytevector-u32-set! . Z4f51) (bytevector-u32-ref . Z4f50) (bytevector-u32-native-set! . Z4f4f) (bytevector-u32-native-ref . Z4f4e) (bytevector-u16-set! . Z4f4d) (bytevector-u16-ref . Z4f4c) (bytevector-u16-native-set! . Z4f4b) (bytevector-u16-native-ref . Z4f4a) (bytevector-sint-set! . Z4f49) (bytevector-sint-ref . Z4f48) (bytevector-s8-set! . Z4f47) (bytevector-s8-ref . Z4f46) (bytevector-s64-set! . Z4f45) (bytevector-s64-ref . Z4f44) (bytevector-s64-native-set! . Z4f43) (bytevector-s64-native-ref . Z4f42) (bytevector-s32-set! . Z4f41) (bytevector-s32-ref . Z4f40) (bytevector-s32-native-set! . Z4f3f) (bytevector-s32-native-ref . Z4f3e) (bytevector-s16-set! . Z4f3d) (bytevector-s16-ref . Z4f3c) (bytevector-s16-native-set! . Z4f3b) (bytevector-s16-native-ref . Z4f3a) (bytevector-length . Z4f39) (bytevector-ieee-single-ref . Z4f38) (bytevector-ieee-single-set! . Z4f37) (bytevector-ieee-single-native-set! . Z4f36) (bytevector-ieee-single-native-ref . Z4f35) (bytevector-ieee-double-set! . Z4f34) (bytevector-ieee-double-ref . Z4f33) (bytevector-ieee-double-native-set! . Z4f32) (bytevector-ieee-double-native-ref . Z4f31) (bytevector-fill! . Z4f30) (bytevector-copy! . Z4f2f) (bytevector-copy . Z4f2e) (bytevector->uint-list . Z4f2d) (bytevector->u8-list . Z4f2c) (bytevector->sint-list . Z4f2b) (endianness . Z4ddf)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z5175 '(rnrs unicode) '(6) '() '() '() '((string-upcase . Z5072) (string-titlecase . Z5071) (string-normalize-nfkd . Z5070) (string-normalize-nfkc . Z506f) (string-normalize-nfd . Z506e) (string-normalize-nfc . Z506d) (string-foldcase . Z506c) (string-downcase . Z506b) (string-ci>? . Z506a) (string-ci>=? . Z5069) (string-ci=? . Z5068) (string-ci<? . Z5067) (string-ci<=? . Z5066) (char-whitespace? . Z5065) (char-upper-case? . Z5064) (char-title-case? . Z5063) (char-numeric? . Z5062) (char-lower-case? . Z5061) (char-general-category . Z5060) (char-upcase . Z505f) (char-titlecase . Z505e) (char-foldcase . Z505d) (char-downcase . Z505c) (char-ci>? . Z505b) (char-ci>=? . Z505a) (char-ci=? . Z5059) (char-ci<? . Z5058) (char-ci<=? . Z5057) (char-alphabetic? . Z5056)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z5176 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . Z4f99) (raise-continuable . Z4f98) (raise . Z4f97) (guard . Z4deb) (else . Z4de3) (=> . Z4de2)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z5177 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . Z4ecb) (bitwise-reverse-bit-field . Z4eca) (bitwise-length . Z4ec9) (bitwise-if . Z4ec8) (bitwise-first-bit-set . Z4ec7) (bitwise-copy-bit-field . Z4ec6) (bitwise-copy-bit . Z4ec5) (bitwise-bit-set? . Z4ec4) (bitwise-bit-field . Z4ec3) (bitwise-bit-count . Z4ec2) (bitwise-xor . Z4ec1) (bitwise-ior . Z4ec0) (bitwise-and . Z4ebf) (bitwise-not . Z4ebe) (bitwise-arithmetic-shift-right . Z4ebd) (bitwise-arithmetic-shift-left . Z4ebc) (bitwise-arithmetic-shift . Z4ebb)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z5178 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . Z4ef8) (fxxor . Z4ef7) (fxrotate-bit-field . Z4ef6) (fxreverse-bit-field . Z4ef5) (fxpositive? . Z4ef4) (fxodd? . Z4ef3) (fxnot . Z4ef2) (fxnegative? . Z4ef1) (fxmod0 . Z4ef0) (fxmod . Z4eef) (fxmin . Z4eee) (fxmax . Z4eed) (fxlength . Z4eec) (fxior . Z4eeb) (fxif . Z4eea) (fxfirst-bit-set . Z4ee9) (fxeven? . Z4ee8) (fxdiv0-and-mod0 . Z4ee7) (fxdiv0 . Z4ee6) (fxdiv-and-mod . Z4ee5) (fxdiv . Z4ee4) (fxcopy-bit-field . Z4ee3) (fxcopy-bit . Z4ee2) (fxbit-set? . Z4ee1) (fxbit-field . Z4ee0) (fxbit-count . Z4edf) (fxarithmetic-shift-right . Z4ede) (fxarithmetic-shift-left . Z4edd) (fxarithmetic-shift . Z4edc) (fxand . Z4edb) (fx>? . Z4eda) (fx>=? . Z4ed9) (fx=? . Z4ed8) (fx<? . Z4ed7) (fx<=? . Z4ed6) (fx-/carry . Z4ed5) (fx- . Z4ed4) (fx+/carry . Z4ed3) (fx+ . Z4ed2) (fx*/carry . Z4ed1) (fx* . Z4ed0) (greatest-fixnum . Z4ecf) (least-fixnum . Z4ece) (fixnum-width . Z4ecd) (fixnum? . Z4ecc)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z5179 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . Z4f2a) (no-infinities-violation? . Z4f29) (make-no-nans-violation . Z4f28) (make-no-infinities-violation . Z4f27) (real->flonum . Z4f26) (flzero? . Z4f25) (fltruncate . Z4f24) (fltan . Z4f23) (flsqrt . Z4f22) (flsin . Z4f21) (flround . Z4f20) (flpositive? . Z4f1f) (flonum? . Z4f1e) (flodd? . Z4f1d) (flnumerator . Z4f1c) (flnegative? . Z4f1b) (flnan? . Z4f1a) (flmod0 . Z4f19) (flmod . Z4f18) (flmin . Z4f17) (flmax . Z4f16) (fllog . Z4f15) (flinteger? . Z4f14) (flinfinite? . Z4f13) (flfloor . Z4f12) (flfinite? . Z4f11) (flexpt . Z4f10) (flexp . Z4f0f) (fleven? . Z4f0e) (fldiv0-and-mod0 . Z4f0d) (fldiv0 . Z4f0c) (fldiv-and-mod . Z4f0b) (fldiv . Z4f0a) (fldenominator . Z4f09) (flcos . Z4f08) (flceiling . Z4f07) (flatan . Z4f06) (flasin . Z4f05) (flacos . Z4f04) (flabs . Z4f03) (fl>? . Z4f02) (fl>=? . Z4f01) (fl=? . Z4f00) (fl<? . Z4eff) (fl<=? . Z4efe) (fl/ . Z4efd) (fl- . Z4efc) (fl+ . Z4efb) (fl* . Z4efa) (fixnum->flonum . Z4ef9) (&no-nans . Z4e17) (&no-infinities . Z4e16)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z517a '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . Z503f) (string-ci-hash . Z503e) (string-hash . Z503d) (equal-hash . Z503c) (hashtable-equivalence-function . Z503b) (make-hashtable . Z503a) (hashtable-hash-function . Z5039) (make-eqv-hashtable . Z5038) (make-eq-hashtable . Z5037) (hashtable? . Z5036) (hashtable-update! . Z5035) (hashtable-size . Z5034) (hashtable-set! . Z5033) (hashtable-ref . Z5032) (hashtable-mutable? . Z5031) (hashtable-keys . Z5030) (hashtable-entries . Z502f) (hashtable-delete! . Z502e) (hashtable-copy . Z502d) (hashtable-contains? . Z502c) (hashtable-clear! . Z502b)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z517b '(rnrs io ports) '(6) '() '() '() '((eof-object? . Z501b) (eof-object . Z501a) (current-error-port . Z5019) (current-output-port . Z5018) (current-input-port . Z5017) (output-port? . Z5016) (input-port? . Z5015) (utf-8-codec . Z5014) (utf-16-codec . Z5013) (transcoder-error-handling-mode . Z5012) (transcoder-eol-style . Z5011) (transcoder-codec . Z5010) (transcoded-port . Z500f) (textual-port? . Z500e) (string->bytevector . Z500d) (standard-output-port . Z500c) (standard-input-port . Z500b) (standard-error-port . Z500a) (set-port-position! . Z5009) (put-u8 . Z5008) (put-string . Z5007) (put-datum . Z5006) (put-char . Z5005) (put-bytevector . Z5004) (port? . Z5003) (port-transcoder . Z5002) (port-position . Z5001) (port-has-set-port-position!? . Z5000) (port-has-port-position? . Z4fff) (port-eof? . Z4ffe) (output-port-buffer-mode . Z4ffd) (open-string-output-port . Z4ffc) (open-string-input-port . Z4ffb) (open-file-output-port . Z4ffa) (open-file-input/output-port . Z4ff9) (open-file-input-port . Z4ff8) (open-bytevector-output-port . Z4ff7) (open-bytevector-input-port . Z4ff6) (native-transcoder . Z4ff5) (native-eol-style . Z4ff4) (make-transcoder . Z4ff3) (latin-1-codec . Z4ff2) (make-i/o-write-error . Z4ff1) (make-i/o-read-error . Z4ff0) (make-i/o-port-error . Z4fef) (make-i/o-invalid-position-error . Z4fee) (make-i/o-filename-error . Z4fed) (make-i/o-file-protection-error . Z4fec) (make-i/o-file-is-read-only-error . Z4feb) (make-i/o-file-does-not-exist-error . Z4fea) (make-i/o-file-already-exists-error . Z4fe9) (make-i/o-error . Z4fe8) (make-i/o-encoding-error . Z4fe7) (make-i/o-decoding-error . Z4fe6) (make-custom-textual-output-port . Z4fe5) (make-custom-textual-input/output-port . Z4fe4) (make-custom-textual-input-port . Z4fe3) (make-custom-binary-output-port . Z4fe2) (make-custom-binary-input/output-port . Z4fe1) (make-custom-binary-input-port . Z4fe0) (lookahead-u8 . Z4fde) (lookahead-char . Z4fdd) (i/o-write-error? . Z4fdc) (i/o-read-error? . Z4fdb) (i/o-port-error? . Z4fda) (i/o-invalid-position-error? . Z4fd9) (i/o-filename-error? . Z4fd8) (i/o-file-protection-error? . Z4fd7) (i/o-file-is-read-only-error? . Z4fd6) (i/o-file-does-not-exist-error? . Z4fd5) (i/o-file-already-exists-error? . Z4fd4) (i/o-error? . Z4fd3) (i/o-error-position . Z4fd2) (i/o-error-port . Z4fd1) (i/o-error-filename . Z4fd0) (i/o-encoding-error? . Z4fcf) (i/o-encoding-error-char . Z4fce) (i/o-decoding-error? . Z4fcd) (get-u8 . Z4fcc) (get-string-n! . Z4fcb) (get-string-n . Z4fca) (get-string-all . Z4fc9) (get-line . Z4fc8) (get-datum . Z4fc7) (get-char . Z4fc6) (get-bytevector-some . Z4fc5) (get-bytevector-n! . Z4fc4) (get-bytevector-n . Z4fc3) (get-bytevector-all . Z4fc2) (flush-output-port . Z4fc1) (close-port . Z4fc0) (call-with-string-output-port . Z4f9f) (call-with-port . Z4f9e) (call-with-bytevector-output-port . Z4f9d) (bytevector->string . Z4f9c) (buffer-mode? . Z4f9b) (binary-port? . Z4f9a) (&i/o-encoding . Z4e15) (&i/o-decoding . Z4e14) (&i/o-port . Z4e13) (&i/o-file-does-not-exist . Z4e12) (&i/o-file-already-exists . Z4e11) (&i/o-file-is-read-only . Z4e10) (&i/o-file-protection . Z4e0f) (&i/o-filename . Z4e0e) (&i/o-invalid-position . Z4e0d) (&i/o-write . Z4e0c) (&i/o-read . Z4e0b) (&i/o . Z4e0a) (error-handling-mode . Z4def) (file-options . Z4dee) (buffer-mode . Z4ded) (eol-style . Z4dec)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z517c '(rnrs enums) '(6) '() '() '() '((make-enumeration . Z4f96) (enum-set=? . Z4f95) (enum-set-universe . Z4f94) (enum-set-union . Z4f93) (enum-set-subset? . Z4f92) (enum-set-projection . Z4f91) (enum-set-member? . Z4f90) (enum-set-intersection . Z4f8f) (enum-set-indexer . Z4f8e) (enum-set-difference . Z4f8d) (enum-set-constructor . Z4f8c) (enum-set-complement . Z4f8b) (enum-set->list . Z4f8a) (define-enumeration . Z4dfa)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z517d '(rnrs conditions) '(6) '() '() '() '((who-condition? . Z4f89) (warning? . Z4f88) (violation? . Z4f87) (undefined-violation? . Z4f86) (syntax-violation? . Z4f85) (syntax-violation-subform . Z4f84) (syntax-violation-form . Z4f83) (syntax-violation . Z3191) (simple-conditions . Z4f82) (serious-condition? . Z4f81) (non-continuable-violation? . Z4f80) (message-condition? . Z4f7f) (make-who-condition . Z4f7e) (make-warning . Z4f7d) (make-violation . Z4f7c) (make-undefined-violation . Z4f7b) (make-syntax-violation . Z4f7a) (make-serious-condition . Z4f79) (make-non-continuable-violation . Z4f78) (make-message-condition . Z4f77) (make-lexical-violation . Z4f76) (make-irritants-condition . Z4f75) (make-implementation-restriction-violation . Z4f74) (make-error . Z4f73) (make-assertion-violation . Z4f72) (lexical-violation? . Z4f71) (irritants-condition? . Z4f70) (implementation-restriction-violation? . Z4f6f) (error? . Z4f6e) (condition-who . Z4f6d) (condition-predicate . Z4f6c) (condition-message . Z4f6b) (condition-irritants . Z4f6a) (condition-accessor . Z4f69) (condition . Z4f68) (assertion-violation? . Z4f67) (condition? . Z4f66) (&undefined . Z4e09) (&syntax . Z4e08) (&lexical . Z4e07) (&implementation-restriction . Z4e06) (&non-continuable . Z4e05) (&who . Z4e04) (&irritants . Z4e03) (&assertion . Z4e02) (&violation . Z4e01) (&error . Z4e00) (&serious . Z4dff) (&warning . Z4dfe) (&message . Z4dfd) (&condition . Z4dfc) (define-condition-type . Z4dfb)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z517e '(rnrs records inspection) '(6) '() '() '() '((record? . Z504e) (record-type-uid . Z504d) (record-type-sealed? . Z504c) (record-type-parent . Z504b) (record-type-opaque? . Z504a) (record-type-name . Z5049) (record-type-generative? . Z5048) (record-type-field-names . Z5047) (record-rtd . Z5046) (record-field-mutable? . Z5045)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z517f '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . Z5055) (record-predicate . Z5054) (record-mutator . Z5053) (record-constructor . Z5052) (record-accessor . Z5051) (make-record-type-descriptor . Z5050) (make-record-constructor-descriptor . Z504f)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z5180 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . Z4df9) (parent-rtd . Z4df8) (nongenerative . Z4df7) (opaque . Z4df6) (sealed . Z4df5) (protocol . Z4df4) (parent . Z4df3) (immutable . Z4df2) (mutable . Z4df1) (fields . Z4df0) (record-constructor-descriptor . Z4dd0) (record-type-descriptor . Z4dcf)) '() values values '#f '#f '#t '#f) (Z2cc5@Z2b11@install-library 'Z5181 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . Z5161) (&no-nans-rtd . Z5160) (&no-infinities-rcd . Z515f) (&no-infinities-rtd . Z515e) (&i/o-encoding-rcd . Z515d) (&i/o-encoding-rtd . Z515c) (&i/o-decoding-rcd . Z515b) (&i/o-decoding-rtd . Z515a) (&i/o-port-rcd . Z5159) (&i/o-port-rtd . Z5158) (&i/o-file-does-not-exist-rcd . Z5157) (&i/o-file-does-not-exist-rtd . Z5156) (&i/o-file-already-exists-rcd . Z5155) (&i/o-file-already-exists-rtd . Z5154) (&i/o-file-is-read-only-rcd . Z5153) (&i/o-file-is-read-only-rtd . Z5152) (&i/o-file-protection-rcd . Z5151) (&i/o-file-protection-rtd . Z5150) (&i/o-filename-rcd . Z514f) (&i/o-filename-rtd . Z514e) (&i/o-invalid-position-rcd . Z514d) (&i/o-invalid-position-rtd . Z514c) (&i/o-write-rcd . Z514b) (&i/o-write-rtd . Z514a) (&i/o-read-rcd . Z5149) (&i/o-read-rtd . Z5148) (&i/o-rcd . Z5147) (&i/o-rtd . Z5146) (&undefined-rcd . Z5145) (&undefined-rtd . Z5144) (&syntax-rcd . Z5143) (&syntax-rtd . Z5142) (&lexical-rcd . Z5141) (&lexical-rtd . Z5140) (&implementation-restriction-rcd . Z513f) (&implementation-restriction-rtd . Z513e) (&non-continuable-rcd . Z513d) (&non-continuable-rtd . Z513c) (&who-rcd . Z513b) (&who-rtd . Z513a) (&irritants-rcd . Z5139) (&irritants-rtd . Z5138) (&assertion-rcd . Z5137) (&assertion-rtd . Z5136) (&violation-rcd . Z5135) (&violation-rtd . Z5134) (&error-rcd . Z5133) (&error-rtd . Z5132) (&serious-rcd . Z5131) (&serious-rtd . Z5130) (&warning-rcd . Z512f) (&warning-rtd . Z512e) (&message-rcd . Z512d) (&message-rtd . Z512c) (&condition-rcd . Z512b) (&condition-rtd . Z512a) (syntax-error . Z318d) (syntax-dispatch . Z30b1) (pretty-print . Z5129) (eval-core . Z5128) (set-symbol-value! . Z5127) (symbol-value . Z5126) (gensym . Z5125) (void . Z5124) (load . Z4c50) (interaction-environment . Z319f) (char-ready? . Z5123) (regexp? . Z5122) (read-line . Z5121) (gensym-prefix-set! . Z5120) (ungensym . Z511f) (alist->eq-hash-table . Z511e) (assoc-ref . Z511d) (print . Z511c) (format . Z511b) (host-os . Z511a) (library-path . Z2af0) (standard-library-path . Z5119) (ssl-supported? . Z5118) (ssl-socket? . Z5117) (socket-sslize! . Z5116) (%monapi-name-whereis . Z5115) (%monapi-message-send . Z5114) (file-newer? . Z5113) (stat-mtime . Z5112) (write-to-file . Z5111) (file->list . Z5110) (file->string . Z510f) (digit->integer . Z510e) (call-with-string-input-port . Z510d) (call-with-string-io . Z510c) (string-split . Z510b) (bytevector-for-each . Z510a) (string->regexp . Z5109) (rxmatch . Z5108) (regexp-replace-all . Z5107) (hashtable-fold-left . Z5106) (hashtable-for-each . Z5105) (mosh-cache-dir . Z28da) (call-process . Z5104) (local-tz-offset . Z5103) (microseconds . Z5102) (directory-list . Z5101) (set-current-directory! . Z5100) (expand-path . Z50ff) (current-directory . Z50fe) (%getpid . Z50fd) (%spawn . Z50fc) (%waitpid . Z50fb) (simple-struct-name . Z50fa) (simple-struct-set! . Z50f9) (simple-struct-ref . Z50f8) (make-simple-struct . Z50f7) (simple-struct? . Z50f6) (pointer-ref-c-int64 . Z50f5) (pointer-ref-c-int32 . Z50f4) (pointer-ref-c-int16 . Z50f3) (pointer-ref-c-int8 . Z50f2) (pointer-ref-c-uint64 . Z50f1) (pointer-ref-c-uint32 . Z50f0) (pointer-ref-c-uint16 . Z50ef) (pointer-ref-c-uint8 . Z50ee) (pointer-set-c-uint64! . Z50ed) (pointer-set-c-uint32! . Z50ec) (pointer-set-c-uint16! . Z50eb) (pointer-set-c-uint8! . Z50ea) (pointer-set-c-int64! . Z50e9) (pointer-set-c-int32! . Z50e8) (pointer-set-c-int16! . Z50e7) (pointer-set-c-int8! . Z50e6) (pointer-set-c-pointer! . Z50e5) (pointer-set-c-double! . Z50e4) (pointer-set-c-float! . Z50e3) (pointer-set-c-long-long! . Z50e2) (pointer-set-c-long! . Z50e1) (pointer-set-c-int! . Z50e0) (pointer-set-c-short! . Z50df) (pointer-set-c-char! . Z50de) (pointer-ref-c-pointer . Z50dd) (pointer-ref-c-double . Z50dc) (pointer-ref-c-float . Z50db) (pointer-ref-c-unsigned-long-long . Z50da) (pointer-ref-c-signed-long-long . Z50d9) (pointer-ref-c-unsigned-long . Z50d8) (pointer-ref-c-signed-long . Z50d7) (pointer-ref-c-unsigned-int . Z50d6) (pointer-ref-c-signed-int . Z50d5) (pointer-ref-c-unsigned-short . Z50d4) (pointer-ref-c-signed-short . Z50d3) (pointer-ref-c-unsigned-char . Z50d2) (pointer-ref-c-signed-char . Z50d1) (pointer->integer . Z50d0) (integer->pointer . Z50cf) (pointer? . Z50ce) (shared-errno . Z50cd) (%ffi-free-c-callback-trampoline . Z50cc) (%ffi-make-c-callback-trampoline . Z50cb) (%ffi-free . Z50ca) (%ffi-malloc . Z50c9) (%ffi-supported? . Z50c8) (%ffi-pointer->string . Z50c7) (%ffi-call . Z50c6) (%ffi-lookup . Z50c5) (%ffi-open . Z50c4) (null-terminated-utf8->string . Z50c3) (null-terminated-bytevector->string . Z50c2) (%exec . Z50c1) (%fork . Z50c0) (%pipe . Z50bf) (p . Z50be) (open-output-string . Z50bd) (get-output-string . Z50bc) (file-stat-ctime . Z50bb) (file-stat-atime . Z50ba) (file-stat-mtime . Z50b9) (file-size-in-bytes . Z50b8) (file-writable? . Z50b7) (file-executable? . Z50b6) (file-readable? . Z50b5) (file-regular? . Z50b4) (file-symbolic-link? . Z50b3) (file-directory? . Z50b2) (create-symbolic-link . Z50b1) (rename-file . Z50b0) (delete-directory . Z50af) (create-directory . Z50ae) (create-mosh-cache-dir . Z50ad) (get-environment-variables . Z50ac) (current-exception-handler . Z50ab) (get-environment-variable . Z50aa) (join-wraps . Z50a9) (id->real-label . Z50a8) (same-marks? . Z50a7) (same-marks*? . Z50a6) (get-timeofday . Z50a5) (get-command-line . Z50a4) (sys-display . Z50a3) (whereis . Z50a2) (register . Z50a1) (vm-join! . Z50a0) (vm-set-value! . Z509f) (vm? . Z509e) (main-vm? . Z509d) (vm-eval . Z509c) (vm-self . Z509b) (vm-start! . Z509a) (make-vm . Z5099) (mutex-try-lock! . Z5098) (mutex-unlock! . Z5097) (mutex-lock! . Z5096) (mutex? . Z5095) (make-mutex . Z5094) (condition-variable-notify-all! . Z5093) (condition-variable-notify! . Z5092) (condition-variable-wait! . Z5091) (make-condition-variable . Z5090) (write/ss . Z508f) (mosh-executable-path . Z508e) (make-file-options . Z508d) (source-info . Z508c) (make-compiler-instruction . Z508b) (make-instruction . Z508a) (set-annotation! . Z5089) (get-annotation . Z5088) (annotated-pair? . Z5087) (annotated-cons . Z5086) (set-source-info! . Z5085) (bignum? . Z5084) (fast-equal? . Z5083) (fasl-read . Z5082) (fasl-write . Z5081) (time-usage . Z5080) (os-constant . Z507f) (condition-printer . Z507e) (disasm . Z507d) (make-parameter . Z28d8) (socket-port . Z507c) (socket-shutdown . Z507b) (socket-close . Z507a) (socket-send . Z5079) (socket-recv! . Z5078) (socket-recv . Z5077) (make-server-socket . Z5076) (make-client-socket . Z5075) (socket-accept . Z5074) (socket? . Z5073) (string-upcase . Z5072) (string-titlecase . Z5071) (string-normalize-nfkd . Z5070) (string-normalize-nfkc . Z506f) (string-normalize-nfd . Z506e) (string-normalize-nfc . Z506d) (string-foldcase . Z506c) (string-downcase . Z506b) (string-ci>? . Z506a) (string-ci>=? . Z5069) (string-ci=? . Z5068) (string-ci<? . Z5067) (string-ci<=? . Z5066) (char-whitespace? . Z5065) (char-upper-case? . Z5064) (char-title-case? . Z5063) (char-numeric? . Z5062) (char-lower-case? . Z5061) (char-general-category . Z5060) (char-upcase . Z505f) (char-titlecase . Z505e) (char-foldcase . Z505d) (char-downcase . Z505c) (char-ci>? . Z505b) (char-ci>=? . Z505a) (char-ci=? . Z5059) (char-ci<? . Z5058) (char-ci<=? . Z5057) (char-alphabetic? . Z5056) (make-variable-transformer . Z2edc) (identifier? . Z3193) (generate-temporaries . Z317f) (free-identifier=? . Z3181) (syntax->datum . Z3197) (datum->syntax . Z3195) (bound-identifier=? . Z3183) (record-type-descriptor? . Z5055) (record-predicate . Z5054) (record-mutator . Z5053) (record-constructor . Z5052) (record-accessor . Z5051) (make-record-type-descriptor . Z5050) (make-record-constructor-descriptor . Z504f) (record? . Z504e) (record-type-uid . Z504d) (record-type-sealed? . Z504c) (record-type-parent . Z504b) (record-type-opaque? . Z504a) (record-type-name . Z5049) (record-type-generative? . Z5048) (record-type-field-names . Z5047) (record-rtd . Z5046) (record-field-mutable? . Z5045) (delete-file . Z5044) (file-exists? . Z5043) (vector-sort! . Z5042) (vector-sort . Z5041) (list-sort . Z5040) (symbol-hash . Z503f) (string-ci-hash . Z503e) (string-hash . Z503d) (equal-hash . Z503c) (hashtable-equivalence-function . Z503b) (make-hashtable . Z503a) (hashtable-hash-function . Z5039) (make-eqv-hashtable . Z5038) (make-eq-hashtable . Z5037) (hashtable? . Z5036) (hashtable-update! . Z5035) (hashtable-size . Z5034) (hashtable-set! . Z5033) (hashtable-ref . Z5032) (hashtable-mutable? . Z5031) (hashtable-keys . Z5030) (hashtable-entries . Z502f) (hashtable-delete! . Z502e) (hashtable-copy . Z502d) (hashtable-contains? . Z502c) (hashtable-clear! . Z502b) (call-with-output-file . Z502a) (call-with-input-file . Z5029) (write-char . Z5028) (write . Z5027) (with-output-to-file . Z5026) (with-input-from-file . Z5025) (read-char . Z5024) (read . Z5023) (peek-char . Z5022) (open-output-file . Z5021) (open-input-file . Z5020) (newline . Z501f) (display . Z501e) (close-output-port . Z501d) (close-input-port . Z501c) (eof-object? . Z501b) (eof-object . Z501a) (current-error-port . Z5019) (current-output-port . Z5018) (current-input-port . Z5017) (output-port? . Z5016) (input-port? . Z5015) (utf-8-codec . Z5014) (utf-16-codec . Z5013) (transcoder-error-handling-mode . Z5012) (transcoder-eol-style . Z5011) (transcoder-codec . Z5010) (transcoded-port . Z500f) (textual-port? . Z500e) (string->bytevector . Z500d) (standard-output-port . Z500c) (standard-input-port . Z500b) (standard-error-port . Z500a) (set-port-position! . Z5009) (put-u8 . Z5008) (put-string . Z5007) (put-datum . Z5006) (put-char . Z5005) (put-bytevector . Z5004) (port? . Z5003) (port-transcoder . Z5002) (port-position . Z5001) (port-has-set-port-position!? . Z5000) (port-has-port-position? . Z4fff) (port-eof? . Z4ffe) (output-port-buffer-mode . Z4ffd) (open-string-output-port . Z4ffc) (open-string-input-port . Z4ffb) (open-file-output-port . Z4ffa) (open-file-input/output-port . Z4ff9) (open-file-input-port . Z4ff8) (open-bytevector-output-port . Z4ff7) (open-bytevector-input-port . Z4ff6) (native-transcoder . Z4ff5) (native-eol-style . Z4ff4) (make-transcoder . Z4ff3) (latin-1-codec . Z4ff2) (make-i/o-write-error . Z4ff1) (make-i/o-read-error . Z4ff0) (make-i/o-port-error . Z4fef) (make-i/o-invalid-position-error . Z4fee) (make-i/o-filename-error . Z4fed) (make-i/o-file-protection-error . Z4fec) (make-i/o-file-is-read-only-error . Z4feb) (make-i/o-file-does-not-exist-error . Z4fea) (make-i/o-file-already-exists-error . Z4fe9) (make-i/o-error . Z4fe8) (make-i/o-encoding-error . Z4fe7) (make-i/o-decoding-error . Z4fe6) (make-custom-textual-output-port . Z4fe5) (make-custom-textual-input/output-port . Z4fe4) (make-custom-textual-input-port . Z4fe3) (make-custom-binary-output-port . Z4fe2) (make-custom-binary-input/output-port . Z4fe1) (make-custom-binary-input-port . Z4fe0) (make-bytevector . Z4fdf) (lookahead-u8 . Z4fde) (lookahead-char . Z4fdd) (i/o-write-error? . Z4fdc) (i/o-read-error? . Z4fdb) (i/o-port-error? . Z4fda) (i/o-invalid-position-error? . Z4fd9) (i/o-filename-error? . Z4fd8) (i/o-file-protection-error? . Z4fd7) (i/o-file-is-read-only-error? . Z4fd6) (i/o-file-does-not-exist-error? . Z4fd5) (i/o-file-already-exists-error? . Z4fd4) (i/o-error? . Z4fd3) (i/o-error-position . Z4fd2) (i/o-error-port . Z4fd1) (i/o-error-filename . Z4fd0) (i/o-encoding-error? . Z4fcf) (i/o-encoding-error-char . Z4fce) (i/o-decoding-error? . Z4fcd) (get-u8 . Z4fcc) (get-string-n! . Z4fcb) (get-string-n . Z4fca) (get-string-all . Z4fc9) (get-line . Z4fc8) (get-datum . Z4fc7) (get-char . Z4fc6) (get-bytevector-some . Z4fc5) (get-bytevector-n! . Z4fc4) (get-bytevector-n . Z4fc3) (get-bytevector-all . Z4fc2) (flush-output-port . Z4fc1) (close-port . Z4fc0) (scheme-report-environment . Z316d) (quotient . Z4fbf) (null-environment . Z316b) (remainder . Z4fbe) (modulo . Z4fbd) (inexact->exact . Z4fbc) (force . Z4fbb) (exact->inexact . Z4fba) (make-promise . Z4fb9) (exit . Z4fb8) (command-line . Z4c4a) (string-fill! . Z4fb7) (string-set! . Z4fb6) (set-cdr! . Z4fb5) (set-car! . Z4fb4) (remove . Z4fb3) (remv . Z4fb2) (remp . Z4fb1) (remq . Z4fb0) (partition . Z4faf) (memv . Z4fae) (memq . Z4fad) (memp . Z4fac) (member . Z4fab) (exists . Z4faa) (for-all . Z4fa9) (fold-right . Z4fa8) (fold-left . Z4fa7) (find . Z4fa6) (filter . Z4fa5) (cons* . Z4fa4) (assv . Z4fa3) (assq . Z4fa2) (assp . Z4fa1) (assoc . Z4fa0) (call-with-string-output-port . Z4f9f) (call-with-port . Z4f9e) (call-with-bytevector-output-port . Z4f9d) (bytevector->string . Z4f9c) (buffer-mode? . Z4f9b) (binary-port? . Z4f9a) (with-exception-handler . Z4f99) (raise-continuable . Z4f98) (raise . Z4f97) (eval . Z3171) (environment . Z3169) (make-enumeration . Z4f96) (enum-set=? . Z4f95) (enum-set-universe . Z4f94) (enum-set-union . Z4f93) (enum-set-subset? . Z4f92) (enum-set-projection . Z4f91) (enum-set-member? . Z4f90) (enum-set-intersection . Z4f8f) (enum-set-indexer . Z4f8e) (enum-set-difference . Z4f8d) (enum-set-constructor . Z4f8c) (enum-set-complement . Z4f8b) (enum-set->list . Z4f8a) (who-condition? . Z4f89) (warning? . Z4f88) (violation? . Z4f87) (undefined-violation? . Z4f86) (syntax-violation? . Z4f85) (syntax-violation-subform . Z4f84) (syntax-violation-form . Z4f83) (syntax-violation . Z3191) (simple-conditions . Z4f82) (serious-condition? . Z4f81) (non-continuable-violation? . Z4f80) (message-condition? . Z4f7f) (make-who-condition . Z4f7e) (make-warning . Z4f7d) (make-violation . Z4f7c) (make-undefined-violation . Z4f7b) (make-syntax-violation . Z4f7a) (make-serious-condition . Z4f79) (make-non-continuable-violation . Z4f78) (make-message-condition . Z4f77) (make-lexical-violation . Z4f76) (make-irritants-condition . Z4f75) (make-implementation-restriction-violation . Z4f74) (make-error . Z4f73) (make-assertion-violation . Z4f72) (lexical-violation? . Z4f71) (irritants-condition? . Z4f70) (implementation-restriction-violation? . Z4f6f) (error? . Z4f6e) (condition-who . Z4f6d) (condition-predicate . Z4f6c) (condition-message . Z4f6b) (condition-irritants . Z4f6a) (condition-accessor . Z4f69) (condition . Z4f68) (assertion-violation? . Z4f67) (condition? . Z4f66) (utf32->string . Z4f65) (utf16->string . Z4f64) (utf8->string . Z4f63) (uint-list->bytevector . Z4f62) (u8-list->bytevector . Z4f61) (string->utf8 . Z4f60) (string->utf32 . Z4f5f) (string->utf16 . Z4f5e) (sint-list->bytevector . Z4f5d) (native-endianness . Z4f5c) (bytevector? . Z4f5b) (bytevector=? . Z4f5a) (bytevector-uint-set! . Z4f59) (bytevector-uint-ref . Z4f58) (bytevector-u8-set! . Z4f57) (bytevector-u8-ref . Z4f56) (bytevector-u64-set! . Z4f55) (bytevector-u64-ref . Z4f54) (bytevector-u64-native-set! . Z4f53) (bytevector-u64-native-ref . Z4f52) (bytevector-u32-set! . Z4f51) (bytevector-u32-ref . Z4f50) (bytevector-u32-native-set! . Z4f4f) (bytevector-u32-native-ref . Z4f4e) (bytevector-u16-set! . Z4f4d) (bytevector-u16-ref . Z4f4c) (bytevector-u16-native-set! . Z4f4b) (bytevector-u16-native-ref . Z4f4a) (bytevector-sint-set! . Z4f49) (bytevector-sint-ref . Z4f48) (bytevector-s8-set! . Z4f47) (bytevector-s8-ref . Z4f46) (bytevector-s64-set! . Z4f45) (bytevector-s64-ref . Z4f44) (bytevector-s64-native-set! . Z4f43) (bytevector-s64-native-ref . Z4f42) (bytevector-s32-set! . Z4f41) (bytevector-s32-ref . Z4f40) (bytevector-s32-native-set! . Z4f3f) (bytevector-s32-native-ref . Z4f3e) (bytevector-s16-set! . Z4f3d) (bytevector-s16-ref . Z4f3c) (bytevector-s16-native-set! . Z4f3b) (bytevector-s16-native-ref . Z4f3a) (bytevector-length . Z4f39) (bytevector-ieee-single-ref . Z4f38) (bytevector-ieee-single-set! . Z4f37) (bytevector-ieee-single-native-set! . Z4f36) (bytevector-ieee-single-native-ref . Z4f35) (bytevector-ieee-double-set! . Z4f34) (bytevector-ieee-double-ref . Z4f33) (bytevector-ieee-double-native-set! . Z4f32) (bytevector-ieee-double-native-ref . Z4f31) (bytevector-fill! . Z4f30) (bytevector-copy! . Z4f2f) (bytevector-copy . Z4f2e) (bytevector->uint-list . Z4f2d) (bytevector->u8-list . Z4f2c) (bytevector->sint-list . Z4f2b) (no-nans-violation? . Z4f2a) (no-infinities-violation? . Z4f29) (make-no-nans-violation . Z4f28) (make-no-infinities-violation . Z4f27) (real->flonum . Z4f26) (flzero? . Z4f25) (fltruncate . Z4f24) (fltan . Z4f23) (flsqrt . Z4f22) (flsin . Z4f21) (flround . Z4f20) (flpositive? . Z4f1f) (flonum? . Z4f1e) (flodd? . Z4f1d) (flnumerator . Z4f1c) (flnegative? . Z4f1b) (flnan? . Z4f1a) (flmod0 . Z4f19) (flmod . Z4f18) (flmin . Z4f17) (flmax . Z4f16) (fllog . Z4f15) (flinteger? . Z4f14) (flinfinite? . Z4f13) (flfloor . Z4f12) (flfinite? . Z4f11) (flexpt . Z4f10) (flexp . Z4f0f) (fleven? . Z4f0e) (fldiv0-and-mod0 . Z4f0d) (fldiv0 . Z4f0c) (fldiv-and-mod . Z4f0b) (fldiv . Z4f0a) (fldenominator . Z4f09) (flcos . Z4f08) (flceiling . Z4f07) (flatan . Z4f06) (flasin . Z4f05) (flacos . Z4f04) (flabs . Z4f03) (fl>? . Z4f02) (fl>=? . Z4f01) (fl=? . Z4f00) (fl<? . Z4eff) (fl<=? . Z4efe) (fl/ . Z4efd) (fl- . Z4efc) (fl+ . Z4efb) (fl* . Z4efa) (fixnum->flonum . Z4ef9) (fxzero? . Z4ef8) (fxxor . Z4ef7) (fxrotate-bit-field . Z4ef6) (fxreverse-bit-field . Z4ef5) (fxpositive? . Z4ef4) (fxodd? . Z4ef3) (fxnot . Z4ef2) (fxnegative? . Z4ef1) (fxmod0 . Z4ef0) (fxmod . Z4eef) (fxmin . Z4eee) (fxmax . Z4eed) (fxlength . Z4eec) (fxior . Z4eeb) (fxif . Z4eea) (fxfirst-bit-set . Z4ee9) (fxeven? . Z4ee8) (fxdiv0-and-mod0 . Z4ee7) (fxdiv0 . Z4ee6) (fxdiv-and-mod . Z4ee5) (fxdiv . Z4ee4) (fxcopy-bit-field . Z4ee3) (fxcopy-bit . Z4ee2) (fxbit-set? . Z4ee1) (fxbit-field . Z4ee0) (fxbit-count . Z4edf) (fxarithmetic-shift-right . Z4ede) (fxarithmetic-shift-left . Z4edd) (fxarithmetic-shift . Z4edc) (fxand . Z4edb) (fx>? . Z4eda) (fx>=? . Z4ed9) (fx=? . Z4ed8) (fx<? . Z4ed7) (fx<=? . Z4ed6) (fx-/carry . Z4ed5) (fx- . Z4ed4) (fx+/carry . Z4ed3) (fx+ . Z4ed2) (fx*/carry . Z4ed1) (fx* . Z4ed0) (greatest-fixnum . Z4ecf) (least-fixnum . Z4ece) (fixnum-width . Z4ecd) (fixnum? . Z4ecc) (bitwise-rotate-bit-field . Z4ecb) (bitwise-reverse-bit-field . Z4eca) (bitwise-length . Z4ec9) (bitwise-if . Z4ec8) (bitwise-first-bit-set . Z4ec7) (bitwise-copy-bit-field . Z4ec6) (bitwise-copy-bit . Z4ec5) (bitwise-bit-set? . Z4ec4) (bitwise-bit-field . Z4ec3) (bitwise-bit-count . Z4ec2) (bitwise-xor . Z4ec1) (bitwise-ior . Z4ec0) (bitwise-and . Z4ebf) (bitwise-not . Z4ebe) (bitwise-arithmetic-shift-right . Z4ebd) (bitwise-arithmetic-shift-left . Z4ebc) (bitwise-arithmetic-shift . Z4ebb) (zero? . Z4eba) (vector? . Z4eb9) (vector-set! . Z4eb8) (vector-ref . Z4eb7) (vector-map . Z4eb6) (vector-length . Z4eb5) (vector-for-each . Z4eb4) (vector-fill! . Z4eb3) (vector->list . Z4eb2) (vector . Z4eb1) (values . Z4eb0) (truncate . Z4eaf) (tan . Z4eae) (symbol? . Z4ead) (symbol=? . Z4eac) (symbol->string . Z4eab) (substring . Z4eaa) (string? . Z4ea9) (string>? . Z4ea8) (string>=? . Z4ea7) (string=? . Z4ea6) (string<? . Z4ea5) (string<=? . Z4ea4) (string-ref . Z4ea3) (string-length . Z4ea2) (string-for-each . Z4ea1) (string-copy . Z4ea0) (string-append . Z4e9f) (string->symbol . Z4e9e) (string->number . Z4e9d) (string->list . Z4e9c) (string . Z4e9b) (sqrt . Z4e9a) (sin . Z4e99) (round . Z4e98) (reverse . Z4e97) (real? . Z4e96) (real-valued? . Z4e95) (real-part . Z4e94) (rationalize . Z4e93) (rational? . Z4e92) (rational-valued? . Z4e91) (procedure? . Z4e90) (positive? . Z4e8f) (pair? . Z4e8e) (odd? . Z4e8d) (numerator . Z4e8c) (number? . Z4e8b) (number->string . Z4e8a) (null? . Z4e89) (not . Z4e88) (negative? . Z4e87) (nan? . Z4e86) (min . Z4e85) (max . Z4e84) (map . Z4e83) (make-vector . Z4e82) (make-string . Z4e81) (make-rectangular . Z4e80) (make-polar . Z4e7f) (magnitude . Z4e7e) (log . Z4e7d) (list? . Z4e7c) (list-tail . Z4e7b) (list-ref . Z4e7a) (list->vector . Z4e79) (list->string . Z4e78) (list . Z4e77) (length . Z4e76) (lcm . Z4e75) (integer? . Z4e74) (integer-valued? . Z4e73) (integer->char . Z4e72) (infinite? . Z4e71) (inexact? . Z4e70) (inexact . Z4e6f) (imag-part . Z4e6e) (gcd . Z4e6d) (for-each . Z4e6c) (floor . Z4e6b) (finite? . Z4e6a) (expt . Z4e69) (exp . Z4e68) (exact? . Z4e67) (exact-integer-sqrt . Z4e66) (exact . Z4e65) (even? . Z4e64) (error . Z4e63) (eqv? . Z4e62) (equal? . Z4e61) (eq? . Z4e60) (dynamic-wind . Z4e5f) (div0-and-mod0 . Z4e5e) (mod0 . Z4e5d) (div0 . Z4e5c) (div-and-mod . Z4e5b) (mod . Z4e5a) (div . Z4e59) (denominator . Z4e58) (cos . Z4e57) (cons . Z4e56) (complex? . Z4e55) (char? . Z4e54) (char>? . Z4e53) (char>=? . Z4e52) (char=? . Z4e51) (char<? . Z4e50) (char<=? . Z4e4f) (char->integer . Z4e4e) (ceiling . Z4e4d) (call-with-values . Z4e4c) (call/cc . Z4e4b) (call-with-current-continuation . Z4e4a) (cddddr . Z4e49) (cdddar . Z4e48) (cddadr . Z4e47) (cddaar . Z4e46) (cdaddr . Z4e45) (cdadar . Z4e44) (cdaadr . Z4e43) (cdaaar . Z4e42) (cadddr . Z4e41) (caddar . Z4e40) (cadadr . Z4e3f) (cadaar . Z4e3e) (caaddr . Z4e3d) (caadar . Z4e3c) (caaadr . Z4e3b) (caaaar . Z4e3a) (cdddr . Z4e39) (cddar . Z4e38) (cdadr . Z4e37) (cdaar . Z4e36) (caddr . Z4e35) (cadar . Z4e34) (caadr . Z4e33) (caaar . Z4e32) (cddr . Z4e31) (cdar . Z4e30) (cadr . Z4e2f) (caar . Z4e2e) (cdr . Z4e2d) (car . Z4e2c) (boolean? . Z4e2b) (boolean=? . Z4e2a) (atan . Z4e29) (assertion-violation . Z4e28) (assertion-error . Z318b) (asin . Z4e27) (apply . Z4e26) (append . Z4e25) (angle . Z4e24) (acos . Z4e23) (abs . Z4e22) (/ . Z4e21) (* . Z4e20) (- . Z4e1f) (+ . Z4e1e) (>= . Z4e1d) (> . Z4e1c) (= . Z4e1b) (<= . Z4e1a) (< . Z4e19) (library . Z4e18) (&no-nans . Z4e17) (&no-infinities . Z4e16) (&i/o-encoding . Z4e15) (&i/o-decoding . Z4e14) (&i/o-port . Z4e13) (&i/o-file-does-not-exist . Z4e12) (&i/o-file-already-exists . Z4e11) (&i/o-file-is-read-only . Z4e10) (&i/o-file-protection . Z4e0f) (&i/o-filename . Z4e0e) (&i/o-invalid-position . Z4e0d) (&i/o-write . Z4e0c) (&i/o-read . Z4e0b) (&i/o . Z4e0a) (&undefined . Z4e09) (&syntax . Z4e08) (&lexical . Z4e07) (&implementation-restriction . Z4e06) (&non-continuable . Z4e05) (&who . Z4e04) (&irritants . Z4e03) (&assertion . Z4e02) (&violation . Z4e01) (&error . Z4e00) (&serious . Z4dff) (&warning . Z4dfe) (&message . Z4dfd) (&condition . Z4dfc) (define-condition-type . Z4dfb) (define-enumeration . Z4dfa) (define-record-type . Z4df9) (parent-rtd . Z4df8) (nongenerative . Z4df7) (opaque . Z4df6) (sealed . Z4df5) (protocol . Z4df4) (parent . Z4df3) (immutable . Z4df2) (mutable . Z4df1) (fields . Z4df0) (error-handling-mode . Z4def) (file-options . Z4dee) (buffer-mode . Z4ded) (eol-style . Z4dec) (guard . Z4deb) (trace-define . Z4dea) (trace-lambda . Z4de9) (unsyntax-splicing . Z4de8) (unsyntax . Z4de7) (unquote-splicing . Z4de6) (unquote . Z4de5) (_ . Z4de4) (else . Z4de3) (=> . Z4de2) (... . Z4de1) (assert . Z4de0) (endianness . Z4ddf) (delay . Z4dde) (time . Z4ddd) (do . Z4ddc) (cond . Z4ddb) (let* . Z4dda) (let*-values . Z4dd9) (let-values . Z4dd8) (identifier-syntax . Z4dd7) (with-syntax . Z4dd6) (quasisyntax . Z4dd5) (quasiquote . Z4dd4) (syntax-rules . Z4dd3) (include . Z4dd2) (define-struct . Z4dd1) (record-constructor-descriptor . Z4dd0) (record-type-descriptor . Z4dcf) (case . Z4dce) (parameterize . Z4dcd) (unless . Z4dcc) (when . Z4dcb) (or . Z4dca) (and . Z4dc9) (if . Z4dc8) (let . Z4dc7) (letrec* . Z4dc6) (letrec . Z4dc5) (type-descriptor . Z4dc4) (case-lambda . Z4dc3) (lambda . Z4dc2) (syntax . Z4dc1) (syntax-case . Z4dc0) (quote . Z4dbf) (foreign-call . Z4dbe) (letrec-syntax . Z4dbd) (let-syntax . Z4dbc) (set! . Z4dbb) (import . Z4dba) (begin . Z4db9) (module . Z4db8) (define-syntax . Z4db7) (define . Z4db6)) '((Z5161 core-prim . &no-nans-rcd) (Z5160 core-prim . &no-nans-rtd) (Z515f core-prim . &no-infinities-rcd) (Z515e core-prim . &no-infinities-rtd) (Z515d core-prim . &i/o-encoding-rcd) (Z515c core-prim . &i/o-encoding-rtd) (Z515b core-prim . &i/o-decoding-rcd) (Z515a core-prim . &i/o-decoding-rtd) (Z5159 core-prim . &i/o-port-rcd) (Z5158 core-prim . &i/o-port-rtd) (Z5157 core-prim . &i/o-file-does-not-exist-rcd) (Z5156 core-prim . &i/o-file-does-not-exist-rtd) (Z5155 core-prim . &i/o-file-already-exists-rcd) (Z5154 core-prim . &i/o-file-already-exists-rtd) (Z5153 core-prim . &i/o-file-is-read-only-rcd) (Z5152 core-prim . &i/o-file-is-read-only-rtd) (Z5151 core-prim . &i/o-file-protection-rcd) (Z5150 core-prim . &i/o-file-protection-rtd) (Z514f core-prim . &i/o-filename-rcd) (Z514e core-prim . &i/o-filename-rtd) (Z514d core-prim . &i/o-invalid-position-rcd) (Z514c core-prim . &i/o-invalid-position-rtd) (Z514b core-prim . &i/o-write-rcd) (Z514a core-prim . &i/o-write-rtd) (Z5149 core-prim . &i/o-read-rcd) (Z5148 core-prim . &i/o-read-rtd) (Z5147 core-prim . &i/o-rcd) (Z5146 core-prim . &i/o-rtd) (Z5145 core-prim . &undefined-rcd) (Z5144 core-prim . &undefined-rtd) (Z5143 core-prim . &syntax-rcd) (Z5142 core-prim . &syntax-rtd) (Z5141 core-prim . &lexical-rcd) (Z5140 core-prim . &lexical-rtd) (Z513f core-prim . &implementation-restriction-rcd) (Z513e core-prim . &implementation-restriction-rtd) (Z513d core-prim . &non-continuable-rcd) (Z513c core-prim . &non-continuable-rtd) (Z513b core-prim . &who-rcd) (Z513a core-prim . &who-rtd) (Z5139 core-prim . &irritants-rcd) (Z5138 core-prim . &irritants-rtd) (Z5137 core-prim . &assertion-rcd) (Z5136 core-prim . &assertion-rtd) (Z5135 core-prim . &violation-rcd) (Z5134 core-prim . &violation-rtd) (Z5133 core-prim . &error-rcd) (Z5132 core-prim . &error-rtd) (Z5131 core-prim . &serious-rcd) (Z5130 core-prim . &serious-rtd) (Z512f core-prim . &warning-rcd) (Z512e core-prim . &warning-rtd) (Z512d core-prim . &message-rcd) (Z512c core-prim . &message-rtd) (Z512b core-prim . &condition-rcd) (Z512a core-prim . &condition-rtd) (Z318d core-prim . syntax-error) (Z30b1 core-prim . syntax-dispatch) (Z5129 core-prim . pretty-print) (Z5128 core-prim . eval-core) (Z5127 core-prim . set-symbol-value!) (Z5126 core-prim . symbol-value) (Z5125 core-prim . gensym) (Z5124 core-prim . void) (Z4c50 core-prim . load) (Z319f core-prim . interaction-environment) (Z5123 core-prim . char-ready?) (Z5122 core-prim . regexp?) (Z5121 core-prim . read-line) (Z5120 core-prim . gensym-prefix-set!) (Z511f core-prim . ungensym) (Z511e core-prim . alist->eq-hash-table) (Z511d core-prim . assoc-ref) (Z511c core-prim . print) (Z511b core-prim . format) (Z511a core-prim . host-os) (Z2af0 core-prim . library-path) (Z5119 core-prim . standard-library-path) (Z5118 core-prim . ssl-supported?) (Z5117 core-prim . ssl-socket?) (Z5116 core-prim . socket-sslize!) (Z5115 core-prim . %monapi-name-whereis) (Z5114 core-prim . %monapi-message-send) (Z5113 core-prim . file-newer?) (Z5112 core-prim . stat-mtime) (Z5111 core-prim . write-to-file) (Z5110 core-prim . file->list) (Z510f core-prim . file->string) (Z510e core-prim . digit->integer) (Z510d core-prim . call-with-string-input-port) (Z510c core-prim . call-with-string-io) (Z510b core-prim . string-split) (Z510a core-prim . bytevector-for-each) (Z5109 core-prim . string->regexp) (Z5108 core-prim . rxmatch) (Z5107 core-prim . regexp-replace-all) (Z5106 core-prim . hashtable-fold-left) (Z5105 core-prim . hashtable-for-each) (Z28da core-prim . mosh-cache-dir) (Z5104 core-prim . call-process) (Z5103 core-prim . local-tz-offset) (Z5102 core-prim . microseconds) (Z5101 core-prim . directory-list) (Z5100 core-prim . set-current-directory!) (Z50ff core-prim . expand-path) (Z50fe core-prim . current-directory) (Z50fd core-prim . %getpid) (Z50fc core-prim . %spawn) (Z50fb core-prim . %waitpid) (Z50fa core-prim . simple-struct-name) (Z50f9 core-prim . simple-struct-set!) (Z50f8 core-prim . simple-struct-ref) (Z50f7 core-prim . make-simple-struct) (Z50f6 core-prim . simple-struct?) (Z50f5 core-prim . pointer-ref-c-int64) (Z50f4 core-prim . pointer-ref-c-int32) (Z50f3 core-prim . pointer-ref-c-int16) (Z50f2 core-prim . pointer-ref-c-int8) (Z50f1 core-prim . pointer-ref-c-uint64) (Z50f0 core-prim . pointer-ref-c-uint32) (Z50ef core-prim . pointer-ref-c-uint16) (Z50ee core-prim . pointer-ref-c-uint8) (Z50ed core-prim . pointer-set-c-uint64!) (Z50ec core-prim . pointer-set-c-uint32!) (Z50eb core-prim . pointer-set-c-uint16!) (Z50ea core-prim . pointer-set-c-uint8!) (Z50e9 core-prim . pointer-set-c-int64!) (Z50e8 core-prim . pointer-set-c-int32!) (Z50e7 core-prim . pointer-set-c-int16!) (Z50e6 core-prim . pointer-set-c-int8!) (Z50e5 core-prim . pointer-set-c-pointer!) (Z50e4 core-prim . pointer-set-c-double!) (Z50e3 core-prim . pointer-set-c-float!) (Z50e2 core-prim . pointer-set-c-long-long!) (Z50e1 core-prim . pointer-set-c-long!) (Z50e0 core-prim . pointer-set-c-int!) (Z50df core-prim . pointer-set-c-short!) (Z50de core-prim . pointer-set-c-char!) (Z50dd core-prim . pointer-ref-c-pointer) (Z50dc core-prim . pointer-ref-c-double) (Z50db core-prim . pointer-ref-c-float) (Z50da core-prim . pointer-ref-c-unsigned-long-long) (Z50d9 core-prim . pointer-ref-c-signed-long-long) (Z50d8 core-prim . pointer-ref-c-unsigned-long) (Z50d7 core-prim . pointer-ref-c-signed-long) (Z50d6 core-prim . pointer-ref-c-unsigned-int) (Z50d5 core-prim . pointer-ref-c-signed-int) (Z50d4 core-prim . pointer-ref-c-unsigned-short) (Z50d3 core-prim . pointer-ref-c-signed-short) (Z50d2 core-prim . pointer-ref-c-unsigned-char) (Z50d1 core-prim . pointer-ref-c-signed-char) (Z50d0 core-prim . pointer->integer) (Z50cf core-prim . integer->pointer) (Z50ce core-prim . pointer?) (Z50cd core-prim . shared-errno) (Z50cc core-prim . %ffi-free-c-callback-trampoline) (Z50cb core-prim . %ffi-make-c-callback-trampoline) (Z50ca core-prim . %ffi-free) (Z50c9 core-prim . %ffi-malloc) (Z50c8 core-prim . %ffi-supported?) (Z50c7 core-prim . %ffi-pointer->string) (Z50c6 core-prim . %ffi-call) (Z50c5 core-prim . %ffi-lookup) (Z50c4 core-prim . %ffi-open) (Z50c3 core-prim . null-terminated-utf8->string) (Z50c2 core-prim . null-terminated-bytevector->string) (Z50c1 core-prim . %exec) (Z50c0 core-prim . %fork) (Z50bf core-prim . %pipe) (Z50be core-prim . p) (Z50bd core-prim . open-output-string) (Z50bc core-prim . get-output-string) (Z50bb core-prim . file-stat-ctime) (Z50ba core-prim . file-stat-atime) (Z50b9 core-prim . file-stat-mtime) (Z50b8 core-prim . file-size-in-bytes) (Z50b7 core-prim . file-writable?) (Z50b6 core-prim . file-executable?) (Z50b5 core-prim . file-readable?) (Z50b4 core-prim . file-regular?) (Z50b3 core-prim . file-symbolic-link?) (Z50b2 core-prim . file-directory?) (Z50b1 core-prim . create-symbolic-link) (Z50b0 core-prim . rename-file) (Z50af core-prim . delete-directory) (Z50ae core-prim . create-directory) (Z50ad core-prim . create-mosh-cache-dir) (Z50ac core-prim . get-environment-variables) (Z50ab core-prim . current-exception-handler) (Z50aa core-prim . get-environment-variable) (Z50a9 core-prim . join-wraps) (Z50a8 core-prim . id->real-label) (Z50a7 core-prim . same-marks?) (Z50a6 core-prim . same-marks*?) (Z50a5 core-prim . get-timeofday) (Z50a4 core-prim . get-command-line) (Z50a3 core-prim . sys-display) (Z50a2 core-prim . whereis) (Z50a1 core-prim . register) (Z50a0 core-prim . vm-join!) (Z509f core-prim . vm-set-value!) (Z509e core-prim . vm?) (Z509d core-prim . main-vm?) (Z509c core-prim . vm-eval) (Z509b core-prim . vm-self) (Z509a core-prim . vm-start!) (Z5099 core-prim . make-vm) (Z5098 core-prim . mutex-try-lock!) (Z5097 core-prim . mutex-unlock!) (Z5096 core-prim . mutex-lock!) (Z5095 core-prim . mutex?) (Z5094 core-prim . make-mutex) (Z5093 core-prim . condition-variable-notify-all!) (Z5092 core-prim . condition-variable-notify!) (Z5091 core-prim . condition-variable-wait!) (Z5090 core-prim . make-condition-variable) (Z508f core-prim . write/ss) (Z508e core-prim . mosh-executable-path) (Z508d core-prim . make-file-options) (Z508c core-prim . source-info) (Z508b core-prim . make-compiler-instruction) (Z508a core-prim . make-instruction) (Z5089 core-prim . set-annotation!) (Z5088 core-prim . get-annotation) (Z5087 core-prim . annotated-pair?) (Z5086 core-prim . annotated-cons) (Z5085 core-prim . set-source-info!) (Z5084 core-prim . bignum?) (Z5083 core-prim . fast-equal?) (Z5082 core-prim . fasl-read) (Z5081 core-prim . fasl-write) (Z5080 core-prim . time-usage) (Z507f core-prim . os-constant) (Z507e core-prim . condition-printer) (Z507d core-prim . disasm) (Z28d8 core-prim . make-parameter) (Z507c core-prim . socket-port) (Z507b core-prim . socket-shutdown) (Z507a core-prim . socket-close) (Z5079 core-prim . socket-send) (Z5078 core-prim . socket-recv!) (Z5077 core-prim . socket-recv) (Z5076 core-prim . make-server-socket) (Z5075 core-prim . make-client-socket) (Z5074 core-prim . socket-accept) (Z5073 core-prim . socket?) (Z5072 core-prim . string-upcase) (Z5071 core-prim . string-titlecase) (Z5070 core-prim . string-normalize-nfkd) (Z506f core-prim . string-normalize-nfkc) (Z506e core-prim . string-normalize-nfd) (Z506d core-prim . string-normalize-nfc) (Z506c core-prim . string-foldcase) (Z506b core-prim . string-downcase) (Z506a core-prim . string-ci>?) (Z5069 core-prim . string-ci>=?) (Z5068 core-prim . string-ci=?) (Z5067 core-prim . string-ci<?) (Z5066 core-prim . string-ci<=?) (Z5065 core-prim . char-whitespace?) (Z5064 core-prim . char-upper-case?) (Z5063 core-prim . char-title-case?) (Z5062 core-prim . char-numeric?) (Z5061 core-prim . char-lower-case?) (Z5060 core-prim . char-general-category) (Z505f core-prim . char-upcase) (Z505e core-prim . char-titlecase) (Z505d core-prim . char-foldcase) (Z505c core-prim . char-downcase) (Z505b core-prim . char-ci>?) (Z505a core-prim . char-ci>=?) (Z5059 core-prim . char-ci=?) (Z5058 core-prim . char-ci<?) (Z5057 core-prim . char-ci<=?) (Z5056 core-prim . char-alphabetic?) (Z2edc core-prim . make-variable-transformer) (Z3193 core-prim . identifier?) (Z317f core-prim . generate-temporaries) (Z3181 core-prim . free-identifier=?) (Z3197 core-prim . syntax->datum) (Z3195 core-prim . datum->syntax) (Z3183 core-prim . bound-identifier=?) (Z5055 core-prim . record-type-descriptor?) (Z5054 core-prim . record-predicate) (Z5053 core-prim . record-mutator) (Z5052 core-prim . record-constructor) (Z5051 core-prim . record-accessor) (Z5050 core-prim . make-record-type-descriptor) (Z504f core-prim . make-record-constructor-descriptor) (Z504e core-prim . record?) (Z504d core-prim . record-type-uid) (Z504c core-prim . record-type-sealed?) (Z504b core-prim . record-type-parent) (Z504a core-prim . record-type-opaque?) (Z5049 core-prim . record-type-name) (Z5048 core-prim . record-type-generative?) (Z5047 core-prim . record-type-field-names) (Z5046 core-prim . record-rtd) (Z5045 core-prim . record-field-mutable?) (Z5044 core-prim . delete-file) (Z5043 core-prim . file-exists?) (Z5042 core-prim . vector-sort!) (Z5041 core-prim . vector-sort) (Z5040 core-prim . list-sort) (Z503f core-prim . symbol-hash) (Z503e core-prim . string-ci-hash) (Z503d core-prim . string-hash) (Z503c core-prim . equal-hash) (Z503b core-prim . hashtable-equivalence-function) (Z503a core-prim . make-hashtable) (Z5039 core-prim . hashtable-hash-function) (Z5038 core-prim . make-eqv-hashtable) (Z5037 core-prim . make-eq-hashtable) (Z5036 core-prim . hashtable?) (Z5035 core-prim . hashtable-update!) (Z5034 core-prim . hashtable-size) (Z5033 core-prim . hashtable-set!) (Z5032 core-prim . hashtable-ref) (Z5031 core-prim . hashtable-mutable?) (Z5030 core-prim . hashtable-keys) (Z502f core-prim . hashtable-entries) (Z502e core-prim . hashtable-delete!) (Z502d core-prim . hashtable-copy) (Z502c core-prim . hashtable-contains?) (Z502b core-prim . hashtable-clear!) (Z502a core-prim . call-with-output-file) (Z5029 core-prim . call-with-input-file) (Z5028 core-prim . write-char) (Z5027 core-prim . write) (Z5026 core-prim . with-output-to-file) (Z5025 core-prim . with-input-from-file) (Z5024 core-prim . read-char) (Z5023 core-prim . read) (Z5022 core-prim . peek-char) (Z5021 core-prim . open-output-file) (Z5020 core-prim . open-input-file) (Z501f core-prim . newline) (Z501e core-prim . display) (Z501d core-prim . close-output-port) (Z501c core-prim . close-input-port) (Z501b core-prim . eof-object?) (Z501a core-prim . eof-object) (Z5019 core-prim . current-error-port) (Z5018 core-prim . current-output-port) (Z5017 core-prim . current-input-port) (Z5016 core-prim . output-port?) (Z5015 core-prim . input-port?) (Z5014 core-prim . utf-8-codec) (Z5013 core-prim . utf-16-codec) (Z5012 core-prim . transcoder-error-handling-mode) (Z5011 core-prim . transcoder-eol-style) (Z5010 core-prim . transcoder-codec) (Z500f core-prim . transcoded-port) (Z500e core-prim . textual-port?) (Z500d core-prim . string->bytevector) (Z500c core-prim . standard-output-port) (Z500b core-prim . standard-input-port) (Z500a core-prim . standard-error-port) (Z5009 core-prim . set-port-position!) (Z5008 core-prim . put-u8) (Z5007 core-prim . put-string) (Z5006 core-prim . put-datum) (Z5005 core-prim . put-char) (Z5004 core-prim . put-bytevector) (Z5003 core-prim . port?) (Z5002 core-prim . port-transcoder) (Z5001 core-prim . port-position) (Z5000 core-prim . port-has-set-port-position!?) (Z4fff core-prim . port-has-port-position?) (Z4ffe core-prim . port-eof?) (Z4ffd core-prim . output-port-buffer-mode) (Z4ffc core-prim . open-string-output-port) (Z4ffb core-prim . open-string-input-port) (Z4ffa core-prim . open-file-output-port) (Z4ff9 core-prim . open-file-input/output-port) (Z4ff8 core-prim . open-file-input-port) (Z4ff7 core-prim . open-bytevector-output-port) (Z4ff6 core-prim . open-bytevector-input-port) (Z4ff5 core-prim . native-transcoder) (Z4ff4 core-prim . native-eol-style) (Z4ff3 core-prim . make-transcoder) (Z4ff2 core-prim . latin-1-codec) (Z4ff1 core-prim . make-i/o-write-error) (Z4ff0 core-prim . make-i/o-read-error) (Z4fef core-prim . make-i/o-port-error) (Z4fee core-prim . make-i/o-invalid-position-error) (Z4fed core-prim . make-i/o-filename-error) (Z4fec core-prim . make-i/o-file-protection-error) (Z4feb core-prim . make-i/o-file-is-read-only-error) (Z4fea core-prim . make-i/o-file-does-not-exist-error) (Z4fe9 core-prim . make-i/o-file-already-exists-error) (Z4fe8 core-prim . make-i/o-error) (Z4fe7 core-prim . make-i/o-encoding-error) (Z4fe6 core-prim . make-i/o-decoding-error) (Z4fe5 core-prim . make-custom-textual-output-port) (Z4fe4 core-prim . make-custom-textual-input/output-port) (Z4fe3 core-prim . make-custom-textual-input-port) (Z4fe2 core-prim . make-custom-binary-output-port) (Z4fe1 core-prim . make-custom-binary-input/output-port) (Z4fe0 core-prim . make-custom-binary-input-port) (Z4fdf core-prim . make-bytevector) (Z4fde core-prim . lookahead-u8) (Z4fdd core-prim . lookahead-char) (Z4fdc core-prim . i/o-write-error?) (Z4fdb core-prim . i/o-read-error?) (Z4fda core-prim . i/o-port-error?) (Z4fd9 core-prim . i/o-invalid-position-error?) (Z4fd8 core-prim . i/o-filename-error?) (Z4fd7 core-prim . i/o-file-protection-error?) (Z4fd6 core-prim . i/o-file-is-read-only-error?) (Z4fd5 core-prim . i/o-file-does-not-exist-error?) (Z4fd4 core-prim . i/o-file-already-exists-error?) (Z4fd3 core-prim . i/o-error?) (Z4fd2 core-prim . i/o-error-position) (Z4fd1 core-prim . i/o-error-port) (Z4fd0 core-prim . i/o-error-filename) (Z4fcf core-prim . i/o-encoding-error?) (Z4fce core-prim . i/o-encoding-error-char) (Z4fcd core-prim . i/o-decoding-error?) (Z4fcc core-prim . get-u8) (Z4fcb core-prim . get-string-n!) (Z4fca core-prim . get-string-n) (Z4fc9 core-prim . get-string-all) (Z4fc8 core-prim . get-line) (Z4fc7 core-prim . get-datum) (Z4fc6 core-prim . get-char) (Z4fc5 core-prim . get-bytevector-some) (Z4fc4 core-prim . get-bytevector-n!) (Z4fc3 core-prim . get-bytevector-n) (Z4fc2 core-prim . get-bytevector-all) (Z4fc1 core-prim . flush-output-port) (Z4fc0 core-prim . close-port) (Z316d core-prim . scheme-report-environment) (Z4fbf core-prim . quotient) (Z316b core-prim . null-environment) (Z4fbe core-prim . remainder) (Z4fbd core-prim . modulo) (Z4fbc core-prim . inexact->exact) (Z4fbb core-prim . force) (Z4fba core-prim . exact->inexact) (Z4fb9 core-prim . make-promise) (Z4fb8 core-prim . exit) (Z4c4a core-prim . command-line) (Z4fb7 core-prim . string-fill!) (Z4fb6 core-prim . string-set!) (Z4fb5 core-prim . set-cdr!) (Z4fb4 core-prim . set-car!) (Z4fb3 core-prim . remove) (Z4fb2 core-prim . remv) (Z4fb1 core-prim . remp) (Z4fb0 core-prim . remq) (Z4faf core-prim . partition) (Z4fae core-prim . memv) (Z4fad core-prim . memq) (Z4fac core-prim . memp) (Z4fab core-prim . member) (Z4faa core-prim . exists) (Z4fa9 core-prim . for-all) (Z4fa8 core-prim . fold-right) (Z4fa7 core-prim . fold-left) (Z4fa6 core-prim . find) (Z4fa5 core-prim . filter) (Z4fa4 core-prim . cons*) (Z4fa3 core-prim . assv) (Z4fa2 core-prim . assq) (Z4fa1 core-prim . assp) (Z4fa0 core-prim . assoc) (Z4f9f core-prim . call-with-string-output-port) (Z4f9e core-prim . call-with-port) (Z4f9d core-prim . call-with-bytevector-output-port) (Z4f9c core-prim . bytevector->string) (Z4f9b core-prim . buffer-mode?) (Z4f9a core-prim . binary-port?) (Z4f99 core-prim . with-exception-handler) (Z4f98 core-prim . raise-continuable) (Z4f97 core-prim . raise) (Z3171 core-prim . eval) (Z3169 core-prim . environment) (Z4f96 core-prim . make-enumeration) (Z4f95 core-prim . enum-set=?) (Z4f94 core-prim . enum-set-universe) (Z4f93 core-prim . enum-set-union) (Z4f92 core-prim . enum-set-subset?) (Z4f91 core-prim . enum-set-projection) (Z4f90 core-prim . enum-set-member?) (Z4f8f core-prim . enum-set-intersection) (Z4f8e core-prim . enum-set-indexer) (Z4f8d core-prim . enum-set-difference) (Z4f8c core-prim . enum-set-constructor) (Z4f8b core-prim . enum-set-complement) (Z4f8a core-prim . enum-set->list) (Z4f89 core-prim . who-condition?) (Z4f88 core-prim . warning?) (Z4f87 core-prim . violation?) (Z4f86 core-prim . undefined-violation?) (Z4f85 core-prim . syntax-violation?) (Z4f84 core-prim . syntax-violation-subform) (Z4f83 core-prim . syntax-violation-form) (Z3191 core-prim . syntax-violation) (Z4f82 core-prim . simple-conditions) (Z4f81 core-prim . serious-condition?) (Z4f80 core-prim . non-continuable-violation?) (Z4f7f core-prim . message-condition?) (Z4f7e core-prim . make-who-condition) (Z4f7d core-prim . make-warning) (Z4f7c core-prim . make-violation) (Z4f7b core-prim . make-undefined-violation) (Z4f7a core-prim . make-syntax-violation) (Z4f79 core-prim . make-serious-condition) (Z4f78 core-prim . make-non-continuable-violation) (Z4f77 core-prim . make-message-condition) (Z4f76 core-prim . make-lexical-violation) (Z4f75 core-prim . make-irritants-condition) (Z4f74 core-prim . make-implementation-restriction-violation) (Z4f73 core-prim . make-error) (Z4f72 core-prim . make-assertion-violation) (Z4f71 core-prim . lexical-violation?) (Z4f70 core-prim . irritants-condition?) (Z4f6f core-prim . implementation-restriction-violation?) (Z4f6e core-prim . error?) (Z4f6d core-prim . condition-who) (Z4f6c core-prim . condition-predicate) (Z4f6b core-prim . condition-message) (Z4f6a core-prim . condition-irritants) (Z4f69 core-prim . condition-accessor) (Z4f68 core-prim . condition) (Z4f67 core-prim . assertion-violation?) (Z4f66 core-prim . condition?) (Z4f65 core-prim . utf32->string) (Z4f64 core-prim . utf16->string) (Z4f63 core-prim . utf8->string) (Z4f62 core-prim . uint-list->bytevector) (Z4f61 core-prim . u8-list->bytevector) (Z4f60 core-prim . string->utf8) (Z4f5f core-prim . string->utf32) (Z4f5e core-prim . string->utf16) (Z4f5d core-prim . sint-list->bytevector) (Z4f5c core-prim . native-endianness) (Z4f5b core-prim . bytevector?) (Z4f5a core-prim . bytevector=?) (Z4f59 core-prim . bytevector-uint-set!) (Z4f58 core-prim . bytevector-uint-ref) (Z4f57 core-prim . bytevector-u8-set!) (Z4f56 core-prim . bytevector-u8-ref) (Z4f55 core-prim . bytevector-u64-set!) (Z4f54 core-prim . bytevector-u64-ref) (Z4f53 core-prim . bytevector-u64-native-set!) (Z4f52 core-prim . bytevector-u64-native-ref) (Z4f51 core-prim . bytevector-u32-set!) (Z4f50 core-prim . bytevector-u32-ref) (Z4f4f core-prim . bytevector-u32-native-set!) (Z4f4e core-prim . bytevector-u32-native-ref) (Z4f4d core-prim . bytevector-u16-set!) (Z4f4c core-prim . bytevector-u16-ref) (Z4f4b core-prim . bytevector-u16-native-set!) (Z4f4a core-prim . bytevector-u16-native-ref) (Z4f49 core-prim . bytevector-sint-set!) (Z4f48 core-prim . bytevector-sint-ref) (Z4f47 core-prim . bytevector-s8-set!) (Z4f46 core-prim . bytevector-s8-ref) (Z4f45 core-prim . bytevector-s64-set!) (Z4f44 core-prim . bytevector-s64-ref) (Z4f43 core-prim . bytevector-s64-native-set!) (Z4f42 core-prim . bytevector-s64-native-ref) (Z4f41 core-prim . bytevector-s32-set!) (Z4f40 core-prim . bytevector-s32-ref) (Z4f3f core-prim . bytevector-s32-native-set!) (Z4f3e core-prim . bytevector-s32-native-ref) (Z4f3d core-prim . bytevector-s16-set!) (Z4f3c core-prim . bytevector-s16-ref) (Z4f3b core-prim . bytevector-s16-native-set!) (Z4f3a core-prim . bytevector-s16-native-ref) (Z4f39 core-prim . bytevector-length) (Z4f38 core-prim . bytevector-ieee-single-ref) (Z4f37 core-prim . bytevector-ieee-single-set!) (Z4f36 core-prim . bytevector-ieee-single-native-set!) (Z4f35 core-prim . bytevector-ieee-single-native-ref) (Z4f34 core-prim . bytevector-ieee-double-set!) (Z4f33 core-prim . bytevector-ieee-double-ref) (Z4f32 core-prim . bytevector-ieee-double-native-set!) (Z4f31 core-prim . bytevector-ieee-double-native-ref) (Z4f30 core-prim . bytevector-fill!) (Z4f2f core-prim . bytevector-copy!) (Z4f2e core-prim . bytevector-copy) (Z4f2d core-prim . bytevector->uint-list) (Z4f2c core-prim . bytevector->u8-list) (Z4f2b core-prim . bytevector->sint-list) (Z4f2a core-prim . no-nans-violation?) (Z4f29 core-prim . no-infinities-violation?) (Z4f28 core-prim . make-no-nans-violation) (Z4f27 core-prim . make-no-infinities-violation) (Z4f26 core-prim . real->flonum) (Z4f25 core-prim . flzero?) (Z4f24 core-prim . fltruncate) (Z4f23 core-prim . fltan) (Z4f22 core-prim . flsqrt) (Z4f21 core-prim . flsin) (Z4f20 core-prim . flround) (Z4f1f core-prim . flpositive?) (Z4f1e core-prim . flonum?) (Z4f1d core-prim . flodd?) (Z4f1c core-prim . flnumerator) (Z4f1b core-prim . flnegative?) (Z4f1a core-prim . flnan?) (Z4f19 core-prim . flmod0) (Z4f18 core-prim . flmod) (Z4f17 core-prim . flmin) (Z4f16 core-prim . flmax) (Z4f15 core-prim . fllog) (Z4f14 core-prim . flinteger?) (Z4f13 core-prim . flinfinite?) (Z4f12 core-prim . flfloor) (Z4f11 core-prim . flfinite?) (Z4f10 core-prim . flexpt) (Z4f0f core-prim . flexp) (Z4f0e core-prim . fleven?) (Z4f0d core-prim . fldiv0-and-mod0) (Z4f0c core-prim . fldiv0) (Z4f0b core-prim . fldiv-and-mod) (Z4f0a core-prim . fldiv) (Z4f09 core-prim . fldenominator) (Z4f08 core-prim . flcos) (Z4f07 core-prim . flceiling) (Z4f06 core-prim . flatan) (Z4f05 core-prim . flasin) (Z4f04 core-prim . flacos) (Z4f03 core-prim . flabs) (Z4f02 core-prim . fl>?) (Z4f01 core-prim . fl>=?) (Z4f00 core-prim . fl=?) (Z4eff core-prim . fl<?) (Z4efe core-prim . fl<=?) (Z4efd core-prim . fl/) (Z4efc core-prim . fl-) (Z4efb core-prim . fl+) (Z4efa core-prim . fl*) (Z4ef9 core-prim . fixnum->flonum) (Z4ef8 core-prim . fxzero?) (Z4ef7 core-prim . fxxor) (Z4ef6 core-prim . fxrotate-bit-field) (Z4ef5 core-prim . fxreverse-bit-field) (Z4ef4 core-prim . fxpositive?) (Z4ef3 core-prim . fxodd?) (Z4ef2 core-prim . fxnot) (Z4ef1 core-prim . fxnegative?) (Z4ef0 core-prim . fxmod0) (Z4eef core-prim . fxmod) (Z4eee core-prim . fxmin) (Z4eed core-prim . fxmax) (Z4eec core-prim . fxlength) (Z4eeb core-prim . fxior) (Z4eea core-prim . fxif) (Z4ee9 core-prim . fxfirst-bit-set) (Z4ee8 core-prim . fxeven?) (Z4ee7 core-prim . fxdiv0-and-mod0) (Z4ee6 core-prim . fxdiv0) (Z4ee5 core-prim . fxdiv-and-mod) (Z4ee4 core-prim . fxdiv) (Z4ee3 core-prim . fxcopy-bit-field) (Z4ee2 core-prim . fxcopy-bit) (Z4ee1 core-prim . fxbit-set?) (Z4ee0 core-prim . fxbit-field) (Z4edf core-prim . fxbit-count) (Z4ede core-prim . fxarithmetic-shift-right) (Z4edd core-prim . fxarithmetic-shift-left) (Z4edc core-prim . fxarithmetic-shift) (Z4edb core-prim . fxand) (Z4eda core-prim . fx>?) (Z4ed9 core-prim . fx>=?) (Z4ed8 core-prim . fx=?) (Z4ed7 core-prim . fx<?) (Z4ed6 core-prim . fx<=?) (Z4ed5 core-prim . fx-/carry) (Z4ed4 core-prim . fx-) (Z4ed3 core-prim . fx+/carry) (Z4ed2 core-prim . fx+) (Z4ed1 core-prim . fx*/carry) (Z4ed0 core-prim . fx*) (Z4ecf core-prim . greatest-fixnum) (Z4ece core-prim . least-fixnum) (Z4ecd core-prim . fixnum-width) (Z4ecc core-prim . fixnum?) (Z4ecb core-prim . bitwise-rotate-bit-field) (Z4eca core-prim . bitwise-reverse-bit-field) (Z4ec9 core-prim . bitwise-length) (Z4ec8 core-prim . bitwise-if) (Z4ec7 core-prim . bitwise-first-bit-set) (Z4ec6 core-prim . bitwise-copy-bit-field) (Z4ec5 core-prim . bitwise-copy-bit) (Z4ec4 core-prim . bitwise-bit-set?) (Z4ec3 core-prim . bitwise-bit-field) (Z4ec2 core-prim . bitwise-bit-count) (Z4ec1 core-prim . bitwise-xor) (Z4ec0 core-prim . bitwise-ior) (Z4ebf core-prim . bitwise-and) (Z4ebe core-prim . bitwise-not) (Z4ebd core-prim . bitwise-arithmetic-shift-right) (Z4ebc core-prim . bitwise-arithmetic-shift-left) (Z4ebb core-prim . bitwise-arithmetic-shift) (Z4eba core-prim . zero?) (Z4eb9 core-prim . vector?) (Z4eb8 core-prim . vector-set!) (Z4eb7 core-prim . vector-ref) (Z4eb6 core-prim . vector-map) (Z4eb5 core-prim . vector-length) (Z4eb4 core-prim . vector-for-each) (Z4eb3 core-prim . vector-fill!) (Z4eb2 core-prim . vector->list) (Z4eb1 core-prim . vector) (Z4eb0 core-prim . values) (Z4eaf core-prim . truncate) (Z4eae core-prim . tan) (Z4ead core-prim . symbol?) (Z4eac core-prim . symbol=?) (Z4eab core-prim . symbol->string) (Z4eaa core-prim . substring) (Z4ea9 core-prim . string?) (Z4ea8 core-prim . string>?) (Z4ea7 core-prim . string>=?) (Z4ea6 core-prim . string=?) (Z4ea5 core-prim . string<?) (Z4ea4 core-prim . string<=?) (Z4ea3 core-prim . string-ref) (Z4ea2 core-prim . string-length) (Z4ea1 core-prim . string-for-each) (Z4ea0 core-prim . string-copy) (Z4e9f core-prim . string-append) (Z4e9e core-prim . string->symbol) (Z4e9d core-prim . string->number) (Z4e9c core-prim . string->list) (Z4e9b core-prim . string) (Z4e9a core-prim . sqrt) (Z4e99 core-prim . sin) (Z4e98 core-prim . round) (Z4e97 core-prim . reverse) (Z4e96 core-prim . real?) (Z4e95 core-prim . real-valued?) (Z4e94 core-prim . real-part) (Z4e93 core-prim . rationalize) (Z4e92 core-prim . rational?) (Z4e91 core-prim . rational-valued?) (Z4e90 core-prim . procedure?) (Z4e8f core-prim . positive?) (Z4e8e core-prim . pair?) (Z4e8d core-prim . odd?) (Z4e8c core-prim . numerator) (Z4e8b core-prim . number?) (Z4e8a core-prim . number->string) (Z4e89 core-prim . null?) (Z4e88 core-prim . not) (Z4e87 core-prim . negative?) (Z4e86 core-prim . nan?) (Z4e85 core-prim . min) (Z4e84 core-prim . max) (Z4e83 core-prim . map) (Z4e82 core-prim . make-vector) (Z4e81 core-prim . make-string) (Z4e80 core-prim . make-rectangular) (Z4e7f core-prim . make-polar) (Z4e7e core-prim . magnitude) (Z4e7d core-prim . log) (Z4e7c core-prim . list?) (Z4e7b core-prim . list-tail) (Z4e7a core-prim . list-ref) (Z4e79 core-prim . list->vector) (Z4e78 core-prim . list->string) (Z4e77 core-prim . list) (Z4e76 core-prim . length) (Z4e75 core-prim . lcm) (Z4e74 core-prim . integer?) (Z4e73 core-prim . integer-valued?) (Z4e72 core-prim . integer->char) (Z4e71 core-prim . infinite?) (Z4e70 core-prim . inexact?) (Z4e6f core-prim . inexact) (Z4e6e core-prim . imag-part) (Z4e6d core-prim . gcd) (Z4e6c core-prim . for-each) (Z4e6b core-prim . floor) (Z4e6a core-prim . finite?) (Z4e69 core-prim . expt) (Z4e68 core-prim . exp) (Z4e67 core-prim . exact?) (Z4e66 core-prim . exact-integer-sqrt) (Z4e65 core-prim . exact) (Z4e64 core-prim . even?) (Z4e63 core-prim . error) (Z4e62 core-prim . eqv?) (Z4e61 core-prim . equal?) (Z4e60 core-prim . eq?) (Z4e5f core-prim . dynamic-wind) (Z4e5e core-prim . div0-and-mod0) (Z4e5d core-prim . mod0) (Z4e5c core-prim . div0) (Z4e5b core-prim . div-and-mod) (Z4e5a core-prim . mod) (Z4e59 core-prim . div) (Z4e58 core-prim . denominator) (Z4e57 core-prim . cos) (Z4e56 core-prim . cons) (Z4e55 core-prim . complex?) (Z4e54 core-prim . char?) (Z4e53 core-prim . char>?) (Z4e52 core-prim . char>=?) (Z4e51 core-prim . char=?) (Z4e50 core-prim . char<?) (Z4e4f core-prim . char<=?) (Z4e4e core-prim . char->integer) (Z4e4d core-prim . ceiling) (Z4e4c core-prim . call-with-values) (Z4e4b core-prim . call/cc) (Z4e4a core-prim . call-with-current-continuation) (Z4e49 core-prim . cddddr) (Z4e48 core-prim . cdddar) (Z4e47 core-prim . cddadr) (Z4e46 core-prim . cddaar) (Z4e45 core-prim . cdaddr) (Z4e44 core-prim . cdadar) (Z4e43 core-prim . cdaadr) (Z4e42 core-prim . cdaaar) (Z4e41 core-prim . cadddr) (Z4e40 core-prim . caddar) (Z4e3f core-prim . cadadr) (Z4e3e core-prim . cadaar) (Z4e3d core-prim . caaddr) (Z4e3c core-prim . caadar) (Z4e3b core-prim . caaadr) (Z4e3a core-prim . caaaar) (Z4e39 core-prim . cdddr) (Z4e38 core-prim . cddar) (Z4e37 core-prim . cdadr) (Z4e36 core-prim . cdaar) (Z4e35 core-prim . caddr) (Z4e34 core-prim . cadar) (Z4e33 core-prim . caadr) (Z4e32 core-prim . caaar) (Z4e31 core-prim . cddr) (Z4e30 core-prim . cdar) (Z4e2f core-prim . cadr) (Z4e2e core-prim . caar) (Z4e2d core-prim . cdr) (Z4e2c core-prim . car) (Z4e2b core-prim . boolean?) (Z4e2a core-prim . boolean=?) (Z4e29 core-prim . atan) (Z4e28 core-prim . assertion-violation) (Z318b core-prim . assertion-error) (Z4e27 core-prim . asin) (Z4e26 core-prim . apply) (Z4e25 core-prim . append) (Z4e24 core-prim . angle) (Z4e23 core-prim . acos) (Z4e22 core-prim . abs) (Z4e21 core-prim . /) (Z4e20 core-prim . *) (Z4e1f core-prim . -) (Z4e1e core-prim . +) (Z4e1d core-prim . >=) (Z4e1c core-prim . >) (Z4e1b core-prim . =) (Z4e1a core-prim . <=) (Z4e19 core-prim . <) (Z4e18 core-prim . library) (Z4e17 $core-rtd &no-nans-rtd &no-nans-rcd) (Z4e16 $core-rtd &no-infinities-rtd &no-infinities-rcd) (Z4e15 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (Z4e14 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (Z4e13 $core-rtd &i/o-port-rtd &i/o-port-rcd) (Z4e12 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (Z4e11 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (Z4e10 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (Z4e0f $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (Z4e0e $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (Z4e0d $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (Z4e0c $core-rtd &i/o-write-rtd &i/o-write-rcd) (Z4e0b $core-rtd &i/o-read-rtd &i/o-read-rcd) (Z4e0a $core-rtd &i/o-rtd &i/o-rcd) (Z4e09 $core-rtd &undefined-rtd &undefined-rcd) (Z4e08 $core-rtd &syntax-rtd &syntax-rcd) (Z4e07 $core-rtd &lexical-rtd &lexical-rcd) (Z4e06 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (Z4e05 $core-rtd &non-continuable-rtd &non-continuable-rcd) (Z4e04 $core-rtd &who-rtd &who-rcd) (Z4e03 $core-rtd &irritants-rtd &irritants-rcd) (Z4e02 $core-rtd &assertion-rtd &assertion-rcd) (Z4e01 $core-rtd &violation-rtd &violation-rcd) (Z4e00 $core-rtd &error-rtd &error-rcd) (Z4dff $core-rtd &serious-rtd &serious-rcd) (Z4dfe $core-rtd &warning-rtd &warning-rcd) (Z4dfd $core-rtd &message-rtd &message-rcd) (Z4dfc $core-rtd &condition-rtd &condition-rcd) (Z4dfb macro . define-condition-type) (Z4dfa macro . define-enumeration) (Z4df9 macro . define-record-type) (Z4df8 macro . parent-rtd) (Z4df7 macro . nongenerative) (Z4df6 macro . opaque) (Z4df5 macro . sealed) (Z4df4 macro . protocol) (Z4df3 macro . parent) (Z4df2 macro . immutable) (Z4df1 macro . mutable) (Z4df0 macro . fields) (Z4def macro . error-handling-mode) (Z4dee macro . file-options) (Z4ded macro . buffer-mode) (Z4dec macro . eol-style) (Z4deb macro . guard) (Z4dea macro . trace-define) (Z4de9 macro . trace-lambda) (Z4de8 macro . unsyntax-splicing) (Z4de7 macro . unsyntax) (Z4de6 macro . unquote-splicing) (Z4de5 macro . unquote) (Z4de4 macro . _) (Z4de3 macro . else) (Z4de2 macro . =>) (Z4de1 macro . ...) (Z4de0 macro . assert) (Z4ddf macro . endianness) (Z4dde macro . delay) (Z4ddd macro . time) (Z4ddc macro . do) (Z4ddb macro . cond) (Z4dda macro . let*) (Z4dd9 macro . let*-values) (Z4dd8 macro . let-values) (Z4dd7 macro . identifier-syntax) (Z4dd6 macro . with-syntax) (Z4dd5 macro . quasisyntax) (Z4dd4 macro . quasiquote) (Z4dd3 macro . syntax-rules) (Z4dd2 macro . include) (Z4dd1 macro . define-struct) (Z4dd0 core-macro . record-constructor-descriptor) (Z4dcf core-macro . record-type-descriptor) (Z4dce macro . case) (Z4dcd macro . parameterize) (Z4dcc macro . unless) (Z4dcb macro . when) (Z4dca core-macro . or) (Z4dc9 core-macro . and) (Z4dc8 core-macro . if) (Z4dc7 core-macro . let) (Z4dc6 core-macro . letrec*) (Z4dc5 core-macro . letrec) (Z4dc4 core-macro . type-descriptor) (Z4dc3 core-macro . case-lambda) (Z4dc2 core-macro . lambda) (Z4dc1 core-macro . syntax) (Z4dc0 core-macro . syntax-case) (Z4dbf core-macro . quote) (Z4dbe core-macro . foreign-call) (Z4dbd letrec-syntax) (Z4dbc let-syntax) (Z4dbb set!) (Z4dba import) (Z4db9 begin) (Z4db8 module) (Z4db7 define-syntax) (Z4db6 define)) values values '#f '#f '#f '#f) (Z2cc5@Z2b11@install-library 'Z5182 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . Z5129) (eval-core . Z5128) (set-symbol-value! . Z5127) (symbol-value . Z5126) (gensym . Z5125) (void . Z5124)) '() values values '#f '#f '#f '#f) (Z2cc5@Z2b11@install-library 'Z5183 '(mosh) '() '() '() '() '((set-symbol-value! . Z5127) (symbol-value . Z5126) (regexp? . Z5122) (read-line . Z5121) (ungensym . Z511f) (alist->eq-hash-table . Z511e) (assoc-ref . Z511d) (print . Z511c) (format . Z511b) (host-os . Z511a) (library-path . Z2af0) (standard-library-path . Z5119) (file-newer? . Z5113) (stat-mtime . Z5112) (digit->integer . Z510e) (call-with-string-input-port . Z510d) (call-with-string-io . Z510c) (string-split . Z510b) (bytevector-for-each . Z510a) (string->regexp . Z5109) (rxmatch . Z5108) (regexp-replace-all . Z5107) (hashtable-fold-left . Z5106) (hashtable-for-each . Z5105) (set-current-directory! . Z5100) (expand-path . Z50ff) (current-directory . Z50fe) (p . Z50be) (get-timeofday . Z50a5) (get-command-line . Z50a4) (sys-display . Z50a3) (whereis . Z50a2) (register . Z50a1) (vm-join! . Z50a0) (vm-set-value! . Z509f) (vm? . Z509e) (main-vm? . Z509d) (vm-eval . Z509c) (vm-self . Z509b) (vm-start! . Z509a) (make-vm . Z5099) (mutex-try-lock! . Z5098) (mutex-unlock! . Z5097) (mutex-lock! . Z5096) (mutex? . Z5095) (make-mutex . Z5094) (condition-variable-notify-all! . Z5093) (condition-variable-notify! . Z5092) (condition-variable-wait! . Z5091) (make-condition-variable . Z5090) (write/ss . Z508f) (mosh-executable-path . Z508e) (make-file-options . Z508d) (source-info . Z508c) (make-compiler-instruction . Z508b) (make-instruction . Z508a) (set-annotation! . Z5089) (get-annotation . Z5088) (annotated-pair? . Z5087) (annotated-cons . Z5086) (set-source-info! . Z5085) (bignum? . Z5084) (fast-equal? . Z5083) (fasl-read . Z5082) (fasl-write . Z5081) (time-usage . Z5080) (os-constant . Z507f) (condition-printer . Z507e) (time . Z4ddd) (include . Z4dd2)) '() values values '#f '#f '#f '#f) (Z2cc5@Z2b11@install-library 'Z5184 '(system) '() '() '() '() '((gensym-prefix-set! . Z5120) (ssl-supported? . Z5118) (ssl-socket? . Z5117) (socket-sslize! . Z5116) (%monapi-name-whereis . Z5115) (%monapi-message-send . Z5114) (write-to-file . Z5111) (file->list . Z5110) (file->string . Z510f) (mosh-cache-dir . Z28da) (call-process . Z5104) (local-tz-offset . Z5103) (microseconds . Z5102) (directory-list . Z5101) (expand-path . Z50ff) (%getpid . Z50fd) (%spawn . Z50fc) (%waitpid . Z50fb) (simple-struct-name . Z50fa) (simple-struct-set! . Z50f9) (simple-struct-ref . Z50f8) (make-simple-struct . Z50f7) (simple-struct? . Z50f6) (pointer-ref-c-int64 . Z50f5) (pointer-ref-c-int32 . Z50f4) (pointer-ref-c-int16 . Z50f3) (pointer-ref-c-int8 . Z50f2) (pointer-ref-c-uint64 . Z50f1) (pointer-ref-c-uint32 . Z50f0) (pointer-ref-c-uint16 . Z50ef) (pointer-ref-c-uint8 . Z50ee) (pointer-set-c-uint64! . Z50ed) (pointer-set-c-uint32! . Z50ec) (pointer-set-c-uint16! . Z50eb) (pointer-set-c-uint8! . Z50ea) (pointer-set-c-int64! . Z50e9) (pointer-set-c-int32! . Z50e8) (pointer-set-c-int16! . Z50e7) (pointer-set-c-int8! . Z50e6) (pointer-set-c-pointer! . Z50e5) (pointer-set-c-double! . Z50e4) (pointer-set-c-float! . Z50e3) (pointer-set-c-long-long! . Z50e2) (pointer-set-c-long! . Z50e1) (pointer-set-c-int! . Z50e0) (pointer-set-c-short! . Z50df) (pointer-set-c-char! . Z50de) (pointer-ref-c-pointer . Z50dd) (pointer-ref-c-double . Z50dc) (pointer-ref-c-float . Z50db) (pointer-ref-c-unsigned-long-long . Z50da) (pointer-ref-c-signed-long-long . Z50d9) (pointer-ref-c-unsigned-long . Z50d8) (pointer-ref-c-signed-long . Z50d7) (pointer-ref-c-unsigned-int . Z50d6) (pointer-ref-c-signed-int . Z50d5) (pointer-ref-c-unsigned-short . Z50d4) (pointer-ref-c-signed-short . Z50d3) (pointer-ref-c-unsigned-char . Z50d2) (pointer-ref-c-signed-char . Z50d1) (pointer->integer . Z50d0) (integer->pointer . Z50cf) (pointer? . Z50ce) (shared-errno . Z50cd) (%ffi-free-c-callback-trampoline . Z50cc) (%ffi-make-c-callback-trampoline . Z50cb) (%ffi-free . Z50ca) (%ffi-malloc . Z50c9) (%ffi-supported? . Z50c8) (%ffi-pointer->string . Z50c7) (%ffi-call . Z50c6) (%ffi-lookup . Z50c5) (%ffi-open . Z50c4) (null-terminated-utf8->string . Z50c3) (null-terminated-bytevector->string . Z50c2) (%exec . Z50c1) (%fork . Z50c0) (%pipe . Z50bf) (open-output-string . Z50bd) (get-output-string . Z50bc) (file-stat-ctime . Z50bb) (file-stat-atime . Z50ba) (file-stat-mtime . Z50b9) (file-size-in-bytes . Z50b8) (file-writable? . Z50b7) (file-executable? . Z50b6) (file-readable? . Z50b5) (file-regular? . Z50b4) (file-symbolic-link? . Z50b3) (file-directory? . Z50b2) (create-symbolic-link . Z50b1) (rename-file . Z50b0) (delete-directory . Z50af) (create-directory . Z50ae) (create-mosh-cache-dir . Z50ad) (get-environment-variables . Z50ac) (current-exception-handler . Z50ab) (get-environment-variable . Z50aa) (join-wraps . Z50a9) (id->real-label . Z50a8) (same-marks? . Z50a7) (same-marks*? . Z50a6) (disasm . Z507d) (make-parameter . Z28d8) (socket-port . Z507c) (socket-shutdown . Z507b) (socket-close . Z507a) (socket-send . Z5079) (socket-recv! . Z5078) (socket-recv . Z5077) (make-server-socket . Z5076) (make-client-socket . Z5075) (socket-accept . Z5074) (socket? . Z5073) (parameterize . Z4dcd)) '() values values '#f '#f '#f '#f)))
(begin (set! Z4c35@ref (unspecified)) (set! Z4c37@x* (unspecified)) (set! Z4c39@add-library-path! (unspecified)) (set! Z4c3b@parse-and-add-library-path (unspecified)) (set! Z4c3d@for-each-with-index (unspecified)) (set! Z4c3f@rpad (unspecified)) (set! Z4c41@condition-printer/p (unspecified)) (set! Z4c43@record->field-alist (unspecified)) (set! Z4c45@map-with-index (unspecified)) (set! Z4c47@repl (unspecified)) (set! Z4c49@trace-printer (unspecified)) (set! Z4c4b@command-line (unspecified)) (set! Z4c4d@local-library-path (unspecified)) (set! Z4c4f@load/args (unspecified)) (set! Z4c51@load (unspecified)) (set! Z4c53@ironscheme-build (unspecified)) (set! Z4c55@eval-top-level (unspecified)) (set! Z4c57@compile-system-libraries (unspecified)) (set! Z4c59@compile (unspecified)) (set! Z4c5b@compile->closure (unspecified)) (set! Z4c5d@pre-compile-r6rs-file (unspecified)) (set! Z4c5f@load-r6rs-top-level (unspecified)) (set! Z4c61@load-r6rs-top-level-sexp (unspecified)) (set! Z4c63@prefix-inc (unspecified)) (set! Z4c65@prefix-inc! (unspecified)) (set! Z4c35@ref (lambda (Z4ca0@rtd Z4ca1@i Z4ca2@x) (let ((Z4ca6@val ((record-accessor Z4ca0@rtd Z4ca1@i) Z4ca2@x))) (if (symbol? Z4ca6@val) (ungensym Z4ca6@val) Z4ca6@val)))) (set! Z4d9c@Z4c35@ref Z4c35@ref) (set! Z4c37@x* '()) (set! Z4d9d@Z4c37@x* Z4c37@x*) (set! Z4c39@add-library-path! (lambda (Z4ca8@path) (Z2cb5@Z2af1@library-path (append (Z2cb5@Z2af1@library-path) (list Z4ca8@path))))) (set! Z4d9e@Z4c39@add-library-path! Z4c39@add-library-path!) (set! Z4c3b@parse-and-add-library-path (lambda (Z4caa@paths Z4cab@message) (letrec* ((Z4caf@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((Z4cb0@t Z4caa@paths)) (if Z4cb0@t ((lambda (Z4cb2@paths) (for-each (lambda (Z4cb4@path) (if (file-exists? Z4cb4@path) (Z4c39@add-library-path! (expand-path Z4cb4@path)) (format (current-error-port) Z4cab@message Z4cb4@path))) (string-split Z4cb2@paths Z4caf@separator))) Z4cb0@t) (void)))))) (set! Z4d9f@Z4c3b@parse-and-add-library-path Z4c3b@parse-and-add-library-path) (set! Z4c3d@for-each-with-index (lambda (Z4cb6@proc Z4cb7@lst) (letrec ((Z4cba@loop (lambda (Z4cbc@i Z4cbd@lst) (if (null? Z4cbd@lst) (if '#f '#f (void)) (begin (Z4cb6@proc Z4cbc@i (car Z4cbd@lst)) (Z4cba@loop (+ Z4cbc@i '1) (cdr Z4cbd@lst))))))) (Z4cba@loop '1 Z4cb7@lst)))) (set! Z4da0@Z4c3d@for-each-with-index Z4c3d@for-each-with-index) (set! Z4c3f@rpad (lambda (Z4cc0@str Z4cc1@pad Z4cc2@n) (let ((Z4cc6@rest (- Z4cc2@n (string-length (format '"~a" Z4cc0@str))))) (let Z4ccc@loop ((Z4cc8@rest Z4cc6@rest) (Z4cc9@ret (format '"~a" Z4cc0@str))) (if (<= Z4cc8@rest '0) Z4cc9@ret (Z4ccc@loop (- Z4cc8@rest '1) (string-append Z4cc9@ret Z4cc1@pad))))))) (set! Z4da1@Z4c3f@rpad Z4c3f@rpad) (set! Z4c41@condition-printer/p (lambda (Z4cce@e Z4ccf@port) (letrec* ((Z4cd3@max-condition-len (apply max (map (lambda (Z4ce4@c) (string-length (symbol->string (record-type-name (record-rtd Z4ce4@c))))) (simple-conditions Z4cce@e))))) (begin (display '" Condition components:\n" Z4ccf@port) (Z4c3d@for-each-with-index (lambda (Z4cd4@i Z4cd5@x) (let ((Z4cd8@rtd (record-rtd Z4cd5@x)) (Z4cd9@fields-alist (Z4c43@record->field-alist Z4cd5@x))) (begin (format Z4ccf@port '" ~d. ~a" Z4cd4@i (Z4c3f@rpad (symbol->string (record-type-name Z4cd8@rtd)) '" " Z4cd3@max-condition-len)) (if (null? Z4cd9@fields-alist) (newline Z4ccf@port) (void)) (let Z4ce0@loop ((Z4cdc@first '#t) (Z4cdd@fields-alist Z4cd9@fields-alist)) (if (null? Z4cdd@fields-alist) '() (let ((Z4ce2@field (car Z4cdd@fields-alist))) (begin (if (not Z4cdc@first) (display (Z4c3f@rpad '"" '" " (+ '4 Z4cd3@max-condition-len)) Z4ccf@port) (void)) (display '"       " Z4ccf@port) (display (car Z4ce2@field) Z4ccf@port) (display '": " Z4ccf@port) (write (cdr Z4ce2@field) Z4ccf@port) (newline Z4ccf@port) (Z4ce0@loop '#f (cdr Z4cdd@fields-alist))))))))) (simple-conditions Z4cce@e)))))) (set! Z4da2@Z4c41@condition-printer/p Z4c41@condition-printer/p) (set! Z4c43@record->field-alist (lambda (Z4ce6@r) (letrec* ((Z4ce9@ref (lambda (Z4cf4@rtd Z4cf5@i Z4cf6@x) (let ((Z4cfa@val ((record-accessor Z4cf4@rtd Z4cf5@i) Z4cf6@x))) (if (symbol? Z4cfa@val) (ungensym Z4cfa@val) Z4cfa@val))))) (let Z4cee@loop ((Z4cea@ret '()) (Z4ceb@rtd (record-rtd Z4ce6@r))) (if Z4ceb@rtd (Z4cee@loop (append Z4cea@ret (Z4c45@map-with-index (lambda (Z4cf0@i Z4cf1@field) (cons Z4cf1@field (Z4ce9@ref Z4ceb@rtd Z4cf0@i Z4ce6@r))) (vector->list (record-type-field-names Z4ceb@rtd)))) (record-type-parent Z4ceb@rtd)) Z4cea@ret))))) (set! Z4da3@Z4c43@record->field-alist Z4c43@record->field-alist) (set! Z4c45@map-with-index (lambda (Z4cfc@proc Z4cfd@lst) (let Z4d06@loop ((Z4d00@i '0) (Z4d01@lst Z4cfd@lst) (Z4d02@ret '())) (if (null? Z4d01@lst) (reverse Z4d02@ret) (Z4d06@loop (+ Z4d00@i '1) (cdr Z4d01@lst) (cons (Z4cfc@proc Z4d00@i (car Z4d01@lst)) Z4d02@ret)))))) (set! Z4da4@Z4c45@map-with-index Z4c45@map-with-index) (set! Z4c47@repl (lambda Z4d08@x (letrec* ((Z4d0b@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (Z4d0e@Z4d0c) (lambda () (with-exception-handler (lambda (Z4d10@e) ((call/cc (lambda (Z4d12@Z4d0d) (Z4d0e@Z4d0c (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? Z4d10@e) (Z4c41@condition-printer/p Z4d10@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" Z4d10@e))) (Z4d12@Z4d0d (lambda () (raise-continuable Z4d10@e)))))))))) (lambda () (let Z4d18@loop ((Z4d14@line (get-line (current-input-port))) (Z4d15@accum '"")) (letrec* ((Z4d1b@parentheses-ok? (lambda (Z4d26@text) (let Z4d2e@loop ((Z4d28@chars (string->list Z4d26@text)) (Z4d29@p0 '0) (Z4d2a@p1 '0)) (if (null? Z4d28@chars) (= '0 Z4d29@p0 Z4d2a@p1) (let ((Z4d30@t (car Z4d28@chars))) (if (memv Z4d30@t '(#\()) (Z4d2e@loop (cdr Z4d28@chars) (+ Z4d29@p0 '1) Z4d2a@p1) (if (memv Z4d30@t '(#\))) (Z4d2e@loop (cdr Z4d28@chars) (- Z4d29@p0 '1) Z4d2a@p1) (if (memv Z4d30@t '(#\[)) (Z4d2e@loop (cdr Z4d28@chars) Z4d29@p0 (+ Z4d2a@p1 '1)) (if (memv Z4d30@t '(#\])) (Z4d2e@loop (cdr Z4d28@chars) Z4d29@p0 (- Z4d2a@p1 '1)) (Z4d2e@loop (cdr Z4d28@chars) Z4d29@p0 Z4d2a@p1)))))))))) (Z4d1d@eval-string-print (lambda (Z4d20@text) (if (not (or (string=? '"\n" Z4d20@text) (= '0 (string-length Z4d20@text)))) (call-with-values (lambda () (Z4c55@eval-top-level (call-with-port (open-string-input-port Z4d20@text) read))) (lambda Z4d22@out* (for-each (lambda (Z4d24@out) (begin (write/ss Z4d24@out) (newline))) Z4d22@out*))) (void))))) (if (eof-object? Z4d14@line) (begin (Z4d1d@eval-string-print Z4d15@accum) (exit)) (let ((Z4d1e@current (string-append Z4d15@accum Z4d14@line))) (if (Z4d1b@parentheses-ok? Z4d1e@current) (Z4d1d@eval-string-print Z4d1e@current) (Z4d18@loop (get-line (current-input-port)) Z4d1e@current)))))))))))) (newline) (Z4d0b@rec))))) (Z4d0b@rec)))) (set! Z4da5@Z4c47@repl Z4c47@repl) (set! Z4c49@trace-printer (Z29fb@Z28d9@make-parameter write)) (set! Z4da6@Z4c49@trace-printer Z4c49@trace-printer) (set! Z4c4b@command-line (Z29fb@Z28d9@make-parameter (get-command-line))) (set! Z4da7@Z4c4b@command-line Z4c4b@command-line) (set! Z4c4d@local-library-path (lambda (Z4d32@filename) (Z2cb5@Z2af1@library-path))) (set! Z4da8@Z4c4d@local-library-path Z4c4d@local-library-path) (set! Z4c4f@load/args (lambda (Z4d34@filename . Z4d36@args) (begin (apply Z4c5f@load-r6rs-top-level Z4d34@filename 'load Z4d36@args) (void)))) (set! Z4da9@Z4c4f@load/args Z4c4f@load/args) (set! Z4c51@load (lambda (Z4d38@filename) (begin (apply Z4c5f@load-r6rs-top-level Z4d38@filename 'load (Z4c4b@command-line)) (void)))) (set! Z4daa@Z4c51@load Z4c51@load) (set! Z4c53@ironscheme-build (lambda () (Z4c51@load '"ironscheme-buildscript.ss"))) (set! Z4dab@Z4c53@ironscheme-build Z4c53@ironscheme-build) (set! Z4c55@eval-top-level (lambda (Z4d3a@x) (Z4c12@Z3172@eval Z4d3a@x (Z4c29@Z31a0@interaction-environment)))) (set! Z4dac@Z4c55@eval-top-level Z4c55@eval-top-level) (set! Z4c57@compile-system-libraries (lambda () (Z4c55@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! Z4dad@Z4c57@compile-system-libraries Z4c57@compile-system-libraries) (set! Z4c59@compile (lambda (Z4d3c@filename) (Z4c5f@load-r6rs-top-level Z4d3c@filename 'compile))) (set! Z4dae@Z4c59@compile Z4c59@compile) (set! Z4c5b@compile->closure (lambda (Z4d3e@filename) (Z4c5f@load-r6rs-top-level Z4d3e@filename 'closure))) (set! Z4daf@Z4c5b@compile->closure Z4c5b@compile->closure) (set! Z4c5d@pre-compile-r6rs-file (lambda (Z4d40@filename) (Z4c5f@load-r6rs-top-level Z4d40@filename 'compile))) (set! Z4db0@Z4c5d@pre-compile-r6rs-file Z4c5d@pre-compile-r6rs-file) (set! Z4c5f@load-r6rs-top-level (lambda (Z4d42@filename Z4d43@how . Z4d46@args) (begin (Z2cb5@Z2af1@library-path (Z4c4d@local-library-path Z4d42@filename)) (let ((Z4d48@x* (with-input-from-file Z4d42@filename (lambda () (let Z4d4a@f () (let ((Z4d4c@x (Z29ed@Z28bd@read-annotated))) (if (eof-object? Z4d4c@x) '() (cons Z4d4c@x (Z4d4a@f))))))))) (let ((Z4d4e@t Z4d43@how)) (if (memv Z4d4e@t '(closure)) (Z4c28@Z319e@pre-compile-r6rs-top-level Z4d48@x*) (if (memv Z4d4e@t '(load)) (begin (Z4c4b@command-line (cons Z4d42@filename (car Z4d46@args))) (Z29fc@Z28db@mosh-cache-dir (create-mosh-cache-dir)) (if (Z29fc@Z28db@mosh-cache-dir) (gensym-prefix-set! (Z4c65@prefix-inc! (string-append (Z29fc@Z28db@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (Z4d50@file) ((call/cc (lambda (Z4d54@Z4d52) (lambda () (with-exception-handler (lambda (Z4d56@c) ((call/cc (lambda (Z4d58@Z4d53) (Z4d54@Z4d52 (lambda () (if '#t '#t (Z4d58@Z4d53 (lambda () (raise-continuable Z4d56@c)))))))))) (lambda () (delete-file (string-append (Z29fc@Z28db@mosh-cache-dir) '"/" Z4d50@file))))))))) (directory-list (Z29fc@Z28db@mosh-cache-dir))) (void)) (let ((Z4d5a@compiled (Z4c27@Z319c@compile-r6rs-top-level Z4d48@x*))) (begin (if (and (Z29fc@Z28db@mosh-cache-dir) (not (symbol-value '%disable-acc))) (Z2cb9@Z2af9@serialize-all Z29f6@Z28cf@serialize-library Z2a52@Z2a0b@compile-core-expr) (void)) (Z4d5a@compiled)))) (if (memv Z4d4e@t '(compile)) (begin (Z4c27@Z319c@compile-r6rs-top-level Z4d48@x*) (Z2cb9@Z2af9@serialize-all Z29f6@Z28cf@serialize-library Z2a52@Z2a0b@compile-core-expr)) (if '#f '#f (void)))))))))) (set! Z4db1@Z4c5f@load-r6rs-top-level Z4c5f@load-r6rs-top-level) (set! Z4c61@load-r6rs-top-level-sexp (lambda (Z4d5c@import-spec Z4d5d@thunk) (let ((Z4d68@Z4d61 Z2cb5@Z2af1@library-path) (Z4d69@Z4d63 Z29fc@Z28db@mosh-cache-dir) (Z4d6a@Z4d65 (Z4c4d@local-library-path '"")) (Z4d6b@Z4d67 (create-mosh-cache-dir))) (let ((Z4d70@swap (lambda () (begin (let ((Z4d72@t (Z4d68@Z4d61))) (begin (Z4d68@Z4d61 Z4d6a@Z4d65) (set! Z4d6a@Z4d65 Z4d72@t))) (let ((Z4d74@t (Z4d69@Z4d63))) (begin (Z4d69@Z4d63 Z4d6b@Z4d67) (set! Z4d6b@Z4d67 Z4d74@t))))))) (dynamic-wind Z4d70@swap (lambda () (begin (if (Z29fc@Z28db@mosh-cache-dir) (gensym-prefix-set! (Z4c65@prefix-inc! (string-append (Z29fc@Z28db@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((Z4d7a@Z4d77 Z4c4b@command-line) (Z4d7b@Z4d79 '())) (let ((Z4d7e@swap (lambda () (let ((Z4d80@t (Z4d7a@Z4d77))) (begin (Z4d7a@Z4d77 Z4d7b@Z4d79) (set! Z4d7b@Z4d79 Z4d80@t)))))) (dynamic-wind Z4d7e@swap (lambda () ((Z4c27@Z319c@compile-r6rs-top-level (list (cons 'import Z4d5c@import-spec) (list Z4d5d@thunk))))) Z4d7e@swap))))) Z4d70@swap))))) (set! Z4db2@Z4c61@load-r6rs-top-level-sexp Z4c61@load-r6rs-top-level-sexp) (set! Z4c63@prefix-inc (lambda (Z4d82@prefix-string) (let ((Z4d84@prefix (symbol->string Z4d82@prefix-string))) (let ((Z4d86@len (string-length Z4d84@prefix))) (let Z4d8e@loop ((Z4d88@i (- Z4d86@len '1)) (Z4d89@carry? '#t) (Z4d8a@accum '())) (if (< Z4d88@i '0) (string->symbol (list->string (if Z4d89@carry? (cons '#\a Z4d8a@accum) Z4d8a@accum))) (if Z4d89@carry? (let ((Z4d90@next-integer (+ '1 (char->integer (string-ref Z4d84@prefix Z4d88@i))))) (if (= Z4d90@next-integer '123) (Z4d8e@loop (- Z4d88@i '1) '#f (cons '#\A Z4d8a@accum)) (if (= Z4d90@next-integer '91) (Z4d8e@loop (- Z4d88@i '1) '#t (cons '#\a Z4d8a@accum)) (Z4d8e@loop (- Z4d88@i '1) '#f (cons (integer->char Z4d90@next-integer) Z4d8a@accum))))) (Z4d8e@loop (- Z4d88@i '1) '#f (cons (string-ref Z4d84@prefix Z4d88@i) Z4d8a@accum))))))))) (set! Z4db3@Z4c63@prefix-inc Z4c63@prefix-inc) (set! Z4c65@prefix-inc! (lambda (Z4d92@file) (begin (if (not (file-exists? Z4d92@file)) (call-with-output-file Z4d92@file (lambda (Z4d94@port) (write 'd Z4d94@port))) (void)) (let ((Z4d96@prefix (call-with-input-file Z4d92@file read))) (if (main-vm?) (let ((Z4d98@next-prefix (Z4c63@prefix-inc Z4d96@prefix))) (begin (call-with-port (open-file-output-port Z4d92@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (Z4d9a@port) (write Z4d98@next-prefix Z4d9a@port))) Z4d96@prefix)) Z4d96@prefix))))) (set! Z4db4@Z4c65@prefix-inc! Z4c65@prefix-inc!) (begin (Z2cba@Z2afb@current-precompiled-library-loader Z29f7@Z28d1@load-serialized-library) (set-symbol-value! 'load Z4c51@load) (set-symbol-value! 'pre-compile-r6rs-file Z4c5d@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs Z4c55@eval-top-level) (set-symbol-value! 'int-env-syms Z4c09@Z3160@interaction-environment-symbols) (set-symbol-value! 'expanded2core Z2a51@Z2a09@expanded->core) (set-symbol-value! 'trace-printer Z4c49@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (Z4c66@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list Z4c66@c))))) (Z4c3b@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (Z4c3b@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (Z4c39@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (Z4c39@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (Z4c39@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((Z4c68@prefix (lambda (Z4c6a@ext Z4c6b@ls) (append (map (lambda (Z4c6e@x) (string-append Z4c6a@ext Z4c6e@x)) Z4c6b@ls) Z4c6b@ls)))) (Z2cb6@Z2af3@library-extensions (Z4c68@prefix '".mosh" (Z2cb6@Z2af3@library-extensions)))) (current-exception-handler (lambda (Z4c70@c) (begin (if (condition? Z4c70@c) (Z4c41@condition-printer/p Z4c70@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" Z4c70@c)) Z4c70@c))) (if ((call/cc (lambda (Z4c74@Z4c72) (lambda () (with-exception-handler (lambda (Z4c76@c) ((call/cc (lambda (Z4c78@Z4c73) (Z4c74@Z4c72 (lambda () (if '#t '#f (Z4c78@Z4c73 (lambda () (raise-continuable Z4c76@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (Z4c61@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (Z4c4b@command-line)) (let ((Z4c82@Z4c7b Z4c4b@command-line) (Z4c83@Z4c7d Z29fc@Z28db@mosh-cache-dir) (Z4c84@Z4c7f '()) (Z4c85@Z4c81 (create-mosh-cache-dir))) (let ((Z4c8a@swap (lambda () (begin (let ((Z4c8c@t (Z4c82@Z4c7b))) (begin (Z4c82@Z4c7b Z4c84@Z4c7f) (set! Z4c84@Z4c7f Z4c8c@t))) (let ((Z4c8e@t (Z4c83@Z4c7d))) (begin (Z4c83@Z4c7d Z4c85@Z4c81) (set! Z4c85@Z4c81 Z4c8e@t))))))) (dynamic-wind Z4c8a@swap (lambda () (begin (if (Z29fc@Z28db@mosh-cache-dir) (gensym-prefix-set! (Z4c65@prefix-inc! (string-append (Z29fc@Z28db@mosh-cache-dir) '"/prefix.txt"))) (void)) (Z4c47@repl))) Z4c8a@swap))) (begin (Z2cb5@Z2af1@library-path (Z4c4d@local-library-path (car (Z4c4b@command-line)))) (set! Z4c37@x* (with-input-from-file (car (Z4c4b@command-line)) (lambda () (let Z4c90@f () (let ((Z4c92@x (Z29ed@Z28bd@read-annotated))) (if (eof-object? Z4c92@x) '() (cons Z4c92@x (Z4c90@f)))))))) (Z4c4b@command-line (cons (car (Z4c4b@command-line)) (cdr (Z4c4b@command-line)))) (Z29fc@Z28db@mosh-cache-dir (create-mosh-cache-dir)) (if (Z29fc@Z28db@mosh-cache-dir) (gensym-prefix-set! (Z4c65@prefix-inc! (string-append (Z29fc@Z28db@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (Z4c94@file) ((call/cc (lambda (Z4c98@Z4c96) (lambda () (with-exception-handler (lambda (Z4c9a@c) ((call/cc (lambda (Z4c9c@Z4c97) (Z4c98@Z4c96 (lambda () (if '#t '#t (Z4c9c@Z4c97 (lambda () (raise-continuable Z4c9a@c)))))))))) (lambda () (delete-file (string-append (Z29fc@Z28db@mosh-cache-dir) '"/" Z4c94@file))))))))) (directory-list (Z29fc@Z28db@mosh-cache-dir))) (void)) (let ((Z4c9e@compiled (Z4c27@Z319c@compile-r6rs-top-level Z4c37@x*))) (begin (if (and (Z29fc@Z28db@mosh-cache-dir) (not (symbol-value '%disable-acc))) (Z2cb9@Z2af9@serialize-all Z29f6@Z28cf@serialize-library Z2a52@Z2a0b@compile-core-expr) (void)) (Z4c9e@compiled))))))))
