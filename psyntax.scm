;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! lU28d2@library-file-path->cache-path (unspecified)) (set! lU28d4@read-annotated (unspecified)) (set! lU28d6@annotation-stripped (unspecified)) (set! lU28d8@annotation? (unspecified)) (set! lU28da@annotation-source (unspecified)) (set! lU28dc@annotation-expression (unspecified)) (set! lU28de@scm->fasl (unspecified)) (set! lU28e0@fasl-save (unspecified)) (set! lU28e2@fasl-load (unspecified)) (set! lU28e4@verbose? (unspecified)) (set! lU28e6@serialize-library (unspecified)) (set! lU28e8@load-serialized-library (unspecified)) (set! lU28ea@make-record-printer (unspecified)) (set! lU28ec@compile-core (unspecified)) (set! lU28ee@read-library-source-file (unspecified)) (set! lU28f0@make-parameter (unspecified)) (set! lU28f2@mosh-cache-dir (unspecified)) (set! lU2988@file-options-spec (unspecified)) (set! lU28d2@library-file-path->cache-path (lambda (lU2989@x) (call-with-values (lambda () (open-string-output-port)) (lambda (lU298f@lU298c lU2990@lU298e) (let ((lU2993@extract lU2990@lU298e) (lU2994@p lU298f@lU298c)) (let ((lU2998@display-hex '#f)) (begin (set! lU2998@display-hex (lambda (lU29a1@n) (if (<= '0 lU29a1@n '9) (display lU29a1@n lU2994@p) (display (integer->char (+ (char->integer '#\a) (- lU29a1@n '10))) lU2994@p)))) (begin (let lU299b@f ((lU2999@ls (string-split lU2989@x '#\/))) (if (not (null? lU2999@ls)) (begin (display '"_" lU2994@p) (for-each (lambda (lU299d@c) (if (or (char<=? '#\a lU299d@c '#\z) (char<=? '#\A lU299d@c '#\Z) (char<=? '#\0 lU299d@c '#\9) (memv lU299d@c '(#\- #\. #\_ #\~))) (display lU299d@c lU2994@p) (begin (display '"%" lU2994@p) (let ((lU299f@n (char->integer lU299d@c))) (begin (lU2998@display-hex (quotient lU299f@n '16)) (lU2998@display-hex (remainder lU299f@n '16))))))) (string->list (car lU2999@ls))) (lU299b@f (cdr lU2999@ls))) (void))) (lU2993@extract))))))))) (set! lU2a03@lU28d2@library-file-path->cache-path lU28d2@library-file-path->cache-path) (set! lU28d4@read-annotated read) (set! lU2a04@lU28d4@read-annotated lU28d4@read-annotated) (set! lU28d6@annotation-stripped (lambda (lU29a3@x) (lU28dc@annotation-expression lU29a3@x))) (set! lU2a05@lU28d6@annotation-stripped lU28d6@annotation-stripped) (set! lU28d8@annotation? (lambda (lU29a5@x) (source-info lU29a5@x))) (set! lU2a06@lU28d8@annotation? lU28d8@annotation?) (set! lU28da@annotation-source (lambda (lU29a7@x) (source-info lU29a7@x))) (set! lU2a07@lU28da@annotation-source lU28da@annotation-source) (set! lU28dc@annotation-expression (lambda (lU29a9@x) (if (pair? lU29a9@x) (cons (car lU29a9@x) (cdr lU29a9@x)) (if (procedure? lU29a9@x) (set-source-info! lU29a9@x '#f) lU29a9@x)))) (set! lU2a08@lU28dc@annotation-expression lU28dc@annotation-expression) (set! lU28de@scm->fasl (lambda (lU29ab@filename) (string-append (lU28f2@mosh-cache-dir) '"/" (lU28d2@library-file-path->cache-path lU29ab@filename) '".mosh-fasl"))) (set! lU2a09@lU28de@scm->fasl lU28de@scm->fasl) (set! lU28e0@fasl-save (lambda (lU29ad@filename lU29ae@obj) (call-with-port (open-file-output-port lU29ad@filename) (lambda (lU29b1@port) ((symbol-value 'fasl-write!) lU29ae@obj lU29b1@port))))) (set! lU2a0a@lU28e0@fasl-save lU28e0@fasl-save) (set! lU28e2@fasl-load (lambda (lU29b3@filename) (call-with-port (open-file-input-port lU29b3@filename) (symbol-value 'fasl-read!)))) (set! lU2a0b@lU28e2@fasl-load lU28e2@fasl-load) (set! lU28e4@verbose? (symbol-value '%verbose)) (set! lU2a0c@lU28e4@verbose? lU28e4@verbose?) (set! lU28e6@serialize-library (lambda (lU29b5@filename lU29b6@obj) (begin (if lU28e4@verbose? (format (current-error-port) '"serialize-library ~a\n..." lU29b5@filename) (void)) (let ((lU29b9@expanded2core (symbol-value 'expanded2core))) (let ((lU29bb@compile (symbol-value 'compile-w/o-halt))) (let ((lU29bd@code lU29b6@obj)) (let ((lU29bf@pivot (cddddr (cddddr lU29bd@code)))) (let ((lU29c1@visit (lU29bb@compile (lU29b9@expanded2core (car lU29bf@pivot))))) (begin (set-car! lU29bf@pivot lU29c1@visit) (let ((lU29c3@pivot (cdr lU29bf@pivot))) (let ((lU29c5@invoke (lU29bb@compile (lU29b9@expanded2core (car lU29c3@pivot))))) (set-car! lU29c3@pivot lU29c5@invoke))))))))) (let ((lU29c7@fasl-file (lU28de@scm->fasl lU29b5@filename))) (begin (if (file-exists? lU29c7@fasl-file) (delete-file lU29c7@fasl-file) (void)) ((call/cc (lambda (lU29cb@lU29c9) (lambda () (with-exception-handler (lambda (lU29cd@c) ((call/cc (lambda (lU29cf@lU29ca) (lU29cb@lU29c9 (lambda () (if '#t (begin (if lU28e4@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" lU29b5@filename) (void)) (if (file-exists? lU29c7@fasl-file) (delete-file lU29c7@fasl-file) (void)) '#f) (lU29cf@lU29ca (lambda () (raise-continuable lU29cd@c)))))))))) (lambda () (lU28e0@fasl-save lU29c7@fasl-file lU29b6@obj)))))))))))) (set! lU2a0d@lU28e6@serialize-library lU28e6@serialize-library) (set! lU28e8@load-serialized-library (lambda (lU29d1@filename lU29d2@obj) (and (lU28f2@mosh-cache-dir) (let ((lU29d5@fasl-file (lU28de@scm->fasl lU29d1@filename))) (if (and (file-exists? lU29d5@fasl-file) ((symbol-value 'file-newer?) lU29d5@fasl-file lU29d1@filename)) (let ((lU29d7@expanded2core (symbol-value 'expanded2core))) (let ((lU29d9@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((lU29db@code (lU28e2@fasl-load lU29d5@fasl-file))) (let ((lU29dd@pivot (cddddr (cddddr lU29db@code)))) (let ((lU29df@visit (car lU29dd@pivot))) (let ((lU29e1@visit-proc (lambda () (lU29d9@eval-compiled-core lU29df@visit)))) (begin (set-car! lU29dd@pivot lU29e1@visit-proc) (let ((lU29e3@pivot (cdr lU29dd@pivot))) (let ((lU29e5@invoke (car lU29e3@pivot))) (begin (set-car! lU29e3@pivot (lambda () (lU29d9@eval-compiled-core lU29e5@invoke))) (apply lU29d2@obj lU29db@code))))))))))) '#f))))) (set! lU2a0e@lU28e8@load-serialized-library lU28e8@load-serialized-library) (set! lU28ea@make-record-printer (lambda (lU29e7@name lU29e8@printer) (lambda lU29eb@x (begin (display '"record printer") (for-each display lU29eb@x))))) (set! lU2a0f@lU28ea@make-record-printer lU28ea@make-record-printer) (set! lU28ec@compile-core (lambda lU29ed@x (apply error 'comile-core '"not implementated" lU29ed@x))) (set! lU2a10@lU28ec@compile-core lU28ec@compile-core) (set! lU28ee@read-library-source-file (lambda (lU29ef@file-name) (with-input-from-file lU29ef@file-name lU28d4@read-annotated))) (set! lU2a11@lU28ee@read-library-source-file lU28ee@read-library-source-file) (set! lU28f0@make-parameter (lambda lU29ff (let ((lU2a00 (length lU29ff))) (if (= lU2a00 '1) (apply (lambda (lU29f1@x) (lU28f0@make-parameter lU29f1@x (lambda (lU29f3@x) lU29f3@x))) lU29ff) (if (= lU2a00 '2) (apply (lambda (lU29f5@x lU29f6@fender) (let ((lU29f9@x (lU29f6@fender lU29f5@x))) (lambda lU29fd (let ((lU29fe (length lU29fd))) (if (= lU29fe '0) (apply (lambda () lU29f9@x) lU29fd) (if (= lU29fe '1) (apply (lambda (lU29fb@v) (set! lU29f9@x (lU29f6@fender lU29fb@v))) lU29fd) (error 'apply '"invalid arg count"))))))) lU29ff) (error 'apply '"invalid arg count")))))) (set! lU2a12@lU28f0@make-parameter lU28f0@make-parameter) (set! lU28f2@mosh-cache-dir (lU28f0@make-parameter '#f)) (set! lU2a13@lU28f2@mosh-cache-dir lU28f2@mosh-cache-dir) (set! lU2988@file-options-spec (lambda (lU2a01@x) lU2a01@x)) (set! lU2a14@lU2988@file-options-spec lU2988@file-options-spec) (void))
(begin (set! lU2a1a@current-primitive-locations (unspecified)) (set! lU2a1c@mutable? (unspecified)) (set! lU2a1e@rewriter (unspecified)) (set! lU2a20@expanded->core (unspecified)) (set! lU2a22@compile-core-expr (unspecified)) (set! lU2a24@pretty-print (unspecified)) (set! lU2a26@compile-core-expr-to-port (unspecified)) (set! lU2a1a@current-primitive-locations (lU2a12@lU28f0@make-parameter (lambda (lU2a27@x) '#f) (lambda (lU2a29@p) lU2a29@p))) (set! lU2a65@lU2a1a@current-primitive-locations lU2a1a@current-primitive-locations) (set! lU2a1c@mutable? (lambda (lU2a2b@x) (or (pair? lU2a2b@x) (vector? lU2a2b@x) (hashtable? lU2a2b@x)))) (set! lU2a66@lU2a1c@mutable? lU2a1c@mutable?) (set! lU2a1e@rewriter (lambda (lU2a2d@quote-hack?) (let ((lU2a30@f '#f)) (begin (set! lU2a30@f (lambda (lU2a31@x) (if (pair? lU2a31@x) (let ((lU2a33@t (car lU2a31@x))) (if (memv lU2a33@t '(quote)) (if (and lU2a2d@quote-hack? (lU2a1c@mutable? (cadr lU2a31@x))) (let ((lU2a35@g (gensym))) (begin (set-symbol-value! lU2a35@g (cadr lU2a31@x)) lU2a35@g)) lU2a31@x) (if (memv lU2a33@t '(case-lambda)) (cons 'case-lambda (map (lambda (lU2a37@x) (cons (car lU2a37@x) (map lU2a30@f (cdr lU2a37@x)))) (cdr lU2a31@x))) (if (memv lU2a33@t '(lambda)) (cons* 'lambda (cadr lU2a31@x) (map lU2a30@f (cddr lU2a31@x))) (if (memv lU2a33@t '(letrec)) (let ((lU2a39@bindings (cadr lU2a31@x)) (lU2a3a@body* (cddr lU2a31@x))) (let ((lU2a3d@lhs* (map car lU2a39@bindings)) (lU2a3e@rhs* (map cadr lU2a39@bindings))) (cons* 'letrec (map list lU2a3d@lhs* (map lU2a30@f lU2a3e@rhs*)) (map lU2a30@f lU2a3a@body*)))) (if (memv lU2a33@t '(letrec*)) (let ((lU2a41@bindings (cadr lU2a31@x)) (lU2a42@body* (cddr lU2a31@x))) (let ((lU2a45@lhs* (map car lU2a41@bindings)) (lU2a46@rhs* (map cadr lU2a41@bindings))) (cons* 'letrec* (map list lU2a45@lhs* (map lU2a30@f lU2a46@rhs*)) (map lU2a30@f lU2a42@body*)))) (if (memv lU2a33@t '(library-letrec*)) (let ((lU2a49@name (cadr lU2a31@x)) (lU2a4a@x (cdr lU2a31@x))) (let ((lU2a4d@bindings (cadr lU2a4a@x)) (lU2a4e@body* (cddr lU2a4a@x))) (let ((lU2a51@lhs* (map car lU2a4d@bindings)) (lU2a52@lhs** (map cadr lU2a4d@bindings)) (lU2a53@rhs* (map caddr lU2a4d@bindings))) (cons* 'library-letrec* lU2a49@name (map list lU2a51@lhs* lU2a52@lhs** (map lU2a30@f lU2a53@rhs*)) (map lU2a30@f lU2a4e@body*))))) (if (memv lU2a33@t '(begin)) (cons 'begin (map lU2a30@f (cdr lU2a31@x))) (if (memv lU2a33@t '(set!)) (list 'set! (cadr lU2a31@x) (lU2a30@f (caddr lU2a31@x))) (if (memv lU2a33@t '(primitive)) (let ((lU2a57@op (cadr lU2a31@x))) (let ((lU2a59@t ((lU2a1a@current-primitive-locations) lU2a57@op))) (if lU2a59@t ((lambda (lU2a5b@loc) lU2a5b@loc) lU2a59@t) lU2a57@op))) (if (memv lU2a33@t '(define)) lU2a31@x (if (list? lU2a31@x) (map lU2a30@f lU2a31@x) (error 'rewrite '"invalid form ~s ~s" lU2a31@x (list? lU2a31@x)))))))))))))) lU2a31@x))) lU2a30@f)))) (set! lU2a67@lU2a1e@rewriter lU2a1e@rewriter) (set! lU2a20@expanded->core (lambda (lU2a5d@x) ((lU2a1e@rewriter '#f) lU2a5d@x))) (set! lU2a68@lU2a20@expanded->core lU2a20@expanded->core) (set! lU2a22@compile-core-expr (lambda (lU2a5f@x) ((lU2a1e@rewriter '#f) lU2a5f@x))) (set! lU2a69@lU2a22@compile-core-expr lU2a22@compile-core-expr) (set! lU2a24@pretty-print write) (set! lU2a6a@lU2a24@pretty-print lU2a24@pretty-print) (set! lU2a26@compile-core-expr-to-port (lambda (lU2a61@x lU2a62@p) (lU2a24@pretty-print ((lU2a1e@rewriter '#f) lU2a61@x) lU2a62@p))) (set! lU2a6b@lU2a26@compile-core-expr-to-port lU2a26@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! lU2aba@make-collection (unspecified)) (set! lU2abc@current-library-collection (unspecified)) (set! lU2abe@rp (unspecified)) (set! lU2ac8@library? (unspecified)) (set! lU2aca@library-id (unspecified)) (set! lU2acc@set-library-id! (unspecified)) (set! lU2ace@library-name (unspecified)) (set! lU2ad0@set-library-name! (unspecified)) (set! lU2ad2@library-version (unspecified)) (set! lU2ad4@set-library-version! (unspecified)) (set! lU2ad6@library-imp* (unspecified)) (set! lU2ad8@set-library-imp*! (unspecified)) (set! lU2ada@library-vis* (unspecified)) (set! lU2adc@set-library-vis*! (unspecified)) (set! lU2ade@library-inv* (unspecified)) (set! lU2ae0@set-library-inv*! (unspecified)) (set! lU2ae2@library-subst (unspecified)) (set! lU2ae4@set-library-subst! (unspecified)) (set! lU2ae6@library-env (unspecified)) (set! lU2ae8@set-library-env! (unspecified)) (set! lU2aea@library-visit-state (unspecified)) (set! lU2aec@set-library-visit-state! (unspecified)) (set! lU2aee@library-invoke-state (unspecified)) (set! lU2af0@set-library-invoke-state! (unspecified)) (set! lU2af2@library-visit-code (unspecified)) (set! lU2af4@set-library-visit-code! (unspecified)) (set! lU2af6@library-invoke-code (unspecified)) (set! lU2af8@set-library-invoke-code! (unspecified)) (set! lU2afa@library-visible? (unspecified)) (set! lU2afc@set-library-visible?! (unspecified)) (set! lU2afe@library-source-file-name (unspecified)) (set! lU2b00@set-library-source-file-name! (unspecified)) (set! lU2b02@dummy (unspecified)) (set! lU2b04@find-dependencies (unspecified)) (set! lU2b06@find-library-by (unspecified)) (set! lU2b08@library-path (unspecified)) (set! lU2b0a@library-extensions (unspecified)) (set! lU2b0c@library-name->file-name (unspecified)) (set! lU2b0e@file-locator (unspecified)) (set! lU2b10@serialize-all (unspecified)) (set! lU2b12@current-precompiled-library-loader (unspecified)) (set! lU2b14@try-load-from-file (unspecified)) (set! lU2b16@library-loader (unspecified)) (set! lU2b18@current-library-expander (unspecified)) (set! lU2b1a@external-pending-libraries (unspecified)) (set! lU2b1c@find-external-library (unspecified)) (set! lU2b1e@find-library-by-name (unspecified)) (set! lU2b20@library-exists? (unspecified)) (set! lU2b22@find-library-by-spec/die (unspecified)) (set! lU2b24@label->binding-table (unspecified)) (set! lU2b26@install-library-record (unspecified)) (set! lU2b28@install-library (unspecified)) (set! lU2b2a@imported-label->binding (unspecified)) (set! lU2b2c@invoke-library (unspecified)) (set! lU2b2e@visit-library (unspecified)) (set! lU2b30@invoke-library-by-spec (unspecified)) (set! lU2b32@installed-libraries (unspecified)) (set! lU2b34@library-spec (unspecified)) (set! lU2aba@make-collection (lambda () (let ((lU2b35@set '())) (let ((lU2b38@set-cons '#f)) (begin (set! lU2b38@set-cons (lambda (lU2b3d@x lU2b3e@ls) (if (memq lU2b3d@x lU2b3e@ls) lU2b3e@ls (cons lU2b3d@x lU2b3e@ls)))) (lambda lU2b3b (let ((lU2b3c (length lU2b3b))) (if (= lU2b3c '0) (apply (lambda () lU2b35@set) lU2b3b) (if (= lU2b3c '1) (apply (lambda (lU2b39@x) (set! lU2b35@set (lU2b38@set-cons lU2b39@x lU2b35@set))) lU2b3b) (error 'apply '"invalid arg count")))))))))) (set! lU2ca9@lU2aba@make-collection lU2aba@make-collection) (set! lU2abc@current-library-collection (lU2a12@lU28f0@make-parameter (lU2aba@make-collection) (lambda (lU2b41@x) (begin (if (not (procedure? lU2b41@x)) (assertion-violation 'current-library-collection '"not a procedure" lU2b41@x) (void)) lU2b41@x)))) (set! lU2caa@lU2abc@current-library-collection lU2abc@current-library-collection) (set! lU2abe@rp (lU2a0f@lU28ea@make-record-printer 'library (lambda (lU2b43@x lU2b44@p lU2b45@wr) (begin (if (not (lU2ac8@library? lU2b43@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (lU2ad2@library-version lU2b43@x)) (lU2ace@library-name lU2b43@x) (append (lU2ace@library-name lU2b43@x) (list (lU2ad2@library-version lU2b43@x))))) lU2b44@p))))) (set! lU2cab@lU2abe@rp lU2abe@rp) (set! lU2ac8@library? (lambda (lU2b49@x) (and (simple-struct? lU2b49@x) (eq? (simple-struct-name lU2b49@x) 'library)))) (set! lU2cac@lU2ac8@library? lU2ac8@library?) (set! lU2aca@library-id (lambda (lU2b4b@x) (simple-struct-ref lU2b4b@x '0))) (set! lU2cad@lU2aca@library-id lU2aca@library-id) (set! lU2acc@set-library-id! (lambda (lU2b4d@x lU2b4e@val) (simple-struct-set! lU2b4d@x '0 lU2b4e@val))) (set! lU2cae@lU2acc@set-library-id! lU2acc@set-library-id!) (set! lU2ace@library-name (lambda (lU2b51@x) (simple-struct-ref lU2b51@x '1))) (set! lU2caf@lU2ace@library-name lU2ace@library-name) (set! lU2ad0@set-library-name! (lambda (lU2b53@x lU2b54@val) (simple-struct-set! lU2b53@x '1 lU2b54@val))) (set! lU2cb0@lU2ad0@set-library-name! lU2ad0@set-library-name!) (set! lU2ad2@library-version (lambda (lU2b57@x) (simple-struct-ref lU2b57@x '2))) (set! lU2cb1@lU2ad2@library-version lU2ad2@library-version) (set! lU2ad4@set-library-version! (lambda (lU2b59@x lU2b5a@val) (simple-struct-set! lU2b59@x '2 lU2b5a@val))) (set! lU2cb2@lU2ad4@set-library-version! lU2ad4@set-library-version!) (set! lU2ad6@library-imp* (lambda (lU2b5d@x) (simple-struct-ref lU2b5d@x '3))) (set! lU2cb3@lU2ad6@library-imp* lU2ad6@library-imp*) (set! lU2ad8@set-library-imp*! (lambda (lU2b5f@x lU2b60@val) (simple-struct-set! lU2b5f@x '3 lU2b60@val))) (set! lU2cb4@lU2ad8@set-library-imp*! lU2ad8@set-library-imp*!) (set! lU2ada@library-vis* (lambda (lU2b63@x) (simple-struct-ref lU2b63@x '4))) (set! lU2cb5@lU2ada@library-vis* lU2ada@library-vis*) (set! lU2adc@set-library-vis*! (lambda (lU2b65@x lU2b66@val) (simple-struct-set! lU2b65@x '4 lU2b66@val))) (set! lU2cb6@lU2adc@set-library-vis*! lU2adc@set-library-vis*!) (set! lU2ade@library-inv* (lambda (lU2b69@x) (simple-struct-ref lU2b69@x '5))) (set! lU2cb7@lU2ade@library-inv* lU2ade@library-inv*) (set! lU2ae0@set-library-inv*! (lambda (lU2b6b@x lU2b6c@val) (simple-struct-set! lU2b6b@x '5 lU2b6c@val))) (set! lU2cb8@lU2ae0@set-library-inv*! lU2ae0@set-library-inv*!) (set! lU2ae2@library-subst (lambda (lU2b6f@x) (simple-struct-ref lU2b6f@x '6))) (set! lU2cb9@lU2ae2@library-subst lU2ae2@library-subst) (set! lU2ae4@set-library-subst! (lambda (lU2b71@x lU2b72@val) (simple-struct-set! lU2b71@x '6 lU2b72@val))) (set! lU2cba@lU2ae4@set-library-subst! lU2ae4@set-library-subst!) (set! lU2ae6@library-env (lambda (lU2b75@x) (simple-struct-ref lU2b75@x '7))) (set! lU2cbb@lU2ae6@library-env lU2ae6@library-env) (set! lU2ae8@set-library-env! (lambda (lU2b77@x lU2b78@val) (simple-struct-set! lU2b77@x '7 lU2b78@val))) (set! lU2cbc@lU2ae8@set-library-env! lU2ae8@set-library-env!) (set! lU2aea@library-visit-state (lambda (lU2b7b@x) (simple-struct-ref lU2b7b@x '8))) (set! lU2cbd@lU2aea@library-visit-state lU2aea@library-visit-state) (set! lU2aec@set-library-visit-state! (lambda (lU2b7d@x lU2b7e@val) (simple-struct-set! lU2b7d@x '8 lU2b7e@val))) (set! lU2cbe@lU2aec@set-library-visit-state! lU2aec@set-library-visit-state!) (set! lU2aee@library-invoke-state (lambda (lU2b81@x) (simple-struct-ref lU2b81@x '9))) (set! lU2cbf@lU2aee@library-invoke-state lU2aee@library-invoke-state) (set! lU2af0@set-library-invoke-state! (lambda (lU2b83@x lU2b84@val) (simple-struct-set! lU2b83@x '9 lU2b84@val))) (set! lU2cc0@lU2af0@set-library-invoke-state! lU2af0@set-library-invoke-state!) (set! lU2af2@library-visit-code (lambda (lU2b87@x) (simple-struct-ref lU2b87@x '10))) (set! lU2cc1@lU2af2@library-visit-code lU2af2@library-visit-code) (set! lU2af4@set-library-visit-code! (lambda (lU2b89@x lU2b8a@val) (simple-struct-set! lU2b89@x '10 lU2b8a@val))) (set! lU2cc2@lU2af4@set-library-visit-code! lU2af4@set-library-visit-code!) (set! lU2af6@library-invoke-code (lambda (lU2b8d@x) (simple-struct-ref lU2b8d@x '11))) (set! lU2cc3@lU2af6@library-invoke-code lU2af6@library-invoke-code) (set! lU2af8@set-library-invoke-code! (lambda (lU2b8f@x lU2b90@val) (simple-struct-set! lU2b8f@x '11 lU2b90@val))) (set! lU2cc4@lU2af8@set-library-invoke-code! lU2af8@set-library-invoke-code!) (set! lU2afa@library-visible? (lambda (lU2b93@x) (simple-struct-ref lU2b93@x '12))) (set! lU2cc5@lU2afa@library-visible? lU2afa@library-visible?) (set! lU2afc@set-library-visible?! (lambda (lU2b95@x lU2b96@val) (simple-struct-set! lU2b95@x '12 lU2b96@val))) (set! lU2cc6@lU2afc@set-library-visible?! lU2afc@set-library-visible?!) (set! lU2afe@library-source-file-name (lambda (lU2b99@x) (simple-struct-ref lU2b99@x '13))) (set! lU2cc7@lU2afe@library-source-file-name lU2afe@library-source-file-name) (set! lU2b00@set-library-source-file-name! (lambda (lU2b9b@x lU2b9c@val) (simple-struct-set! lU2b9b@x '13 lU2b9c@val))) (set! lU2cc8@lU2b00@set-library-source-file-name! lU2b00@set-library-source-file-name!) (set! lU2b02@dummy '3) (set! lU2cc9@lU2b02@dummy lU2b02@dummy) (set! lU2b04@find-dependencies (lambda (lU2b9f@ls) (if (null? lU2b9f@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! lU2cca@lU2b04@find-dependencies lU2b04@find-dependencies) (set! lU2b06@find-library-by (lambda (lU2ba1@pred) (let lU2ba5@f ((lU2ba3@ls ((lU2abc@current-library-collection)))) (if (null? lU2ba3@ls) '#f (if (lU2ba1@pred (car lU2ba3@ls)) (car lU2ba3@ls) (lU2ba5@f (cdr lU2ba3@ls))))))) (set! lU2ccb@lU2b06@find-library-by lU2b06@find-library-by) (set! lU2b08@library-path (lU2a12@lU28f0@make-parameter '(".") (lambda (lU2ba7@x) (if (and (list? lU2ba7@x) (for-all string? lU2ba7@x)) (map (lambda (lU2ba9@x) lU2ba9@x) lU2ba7@x) (assertion-violation 'library-path '"not a list of strings" lU2ba7@x))))) (set! lU2ccc@lU2b08@library-path lU2b08@library-path) (set! lU2b0a@library-extensions (lU2a12@lU28f0@make-parameter '(".sls" ".ss" ".scm") (lambda (lU2bab@x) (if (and (list? lU2bab@x) (for-all string? lU2bab@x)) (map (lambda (lU2bad@x) lU2bad@x) lU2bab@x) (assertion-violation 'library-extensions '"not a list of strings" lU2bab@x))))) (set! lU2ccd@lU2b0a@library-extensions lU2b0a@library-extensions) (set! lU2b0c@library-name->file-name (lambda (lU2baf@x) (call-with-values (lambda () (open-string-output-port)) (lambda (lU2bb5@lU2bb2 lU2bb6@lU2bb4) (let ((lU2bb9@extract lU2bb6@lU2bb4) (lU2bba@p lU2bb5@lU2bb2)) (let ((lU2bbe@display-hex '#f)) (begin (set! lU2bbe@display-hex (lambda (lU2bc7@n) (if (<= '0 lU2bc7@n '9) (display lU2bc7@n lU2bba@p) (display (integer->char (+ (char->integer '#\a) (- lU2bc7@n '10))) lU2bba@p)))) (begin (let lU2bc1@f ((lU2bbf@ls lU2baf@x)) (if (not (null? lU2bbf@ls)) (begin (display '"/" lU2bba@p) (for-each (lambda (lU2bc3@c) (if (or (char<=? '#\a lU2bc3@c '#\z) (char<=? '#\A lU2bc3@c '#\Z) (char<=? '#\0 lU2bc3@c '#\9) (memv lU2bc3@c '(#\- #\. #\_ #\~))) (display lU2bc3@c lU2bba@p) (begin (display '"%" lU2bba@p) (let ((lU2bc5@n (char->integer lU2bc3@c))) (begin (lU2bbe@display-hex (quotient lU2bc5@n '16)) (lU2bbe@display-hex (remainder lU2bc5@n '16))))))) (string->list (symbol->string (car lU2bbf@ls)))) (lU2bc1@f (cdr lU2bbf@ls))) (void))) (lU2bb9@extract))))))))) (set! lU2cce@lU2b0c@library-name->file-name lU2b0c@library-name->file-name) (set! lU2b0e@file-locator (lU2a12@lU28f0@make-parameter (lambda (lU2bc9@x) (let ((lU2bcb@str (lU2b0c@library-name->file-name lU2bc9@x))) (let lU2bd3@f ((lU2bcd@ls (lU2b08@library-path)) (lU2bce@exts (lU2b0a@library-extensions)) (lU2bcf@failed-list '())) (if (null? lU2bcd@ls) (let ((lU2bdd@lU2bd8 '#f) (lU2bdf@lU2bda '#f) (lU2be1@lU2bd9 '#f) (lU2be4@lU2bd7 '#f) (lU2be6@make-library-resolution-condition '#f) (lU2be8@lU2bd5 '#f) (lU2bea@lU2bd6 '#f) (lU2bec@library-resolution-condition? '#f) (lU2bee@condition-library '#f) (lU2bf0@condition-files '#f)) (begin (set! lU2bdd@lU2bd8 (make-record-type-descriptor '&library-resolution lU4ee4@lU4c2b@&condition-rtd 'lU2bdb '#f '#f '#((immutable library) (immutable files)))) (set! lU2bdf@lU2bda '#f) (set! lU2be1@lU2bd9 (make-record-constructor-descriptor lU2bdd@lU2bd8 lU4ee5@lU4c2d@&condition-rcd lU2bdf@lU2bda)) (set! lU2be4@lU2bd7 (record-predicate lU2bdd@lU2bd8)) (set! lU2be6@make-library-resolution-condition (record-constructor lU2be1@lU2bd9)) (set! lU2be8@lU2bd5 (record-accessor lU2bdd@lU2bd8 '0)) (set! lU2bea@lU2bd6 (record-accessor lU2bdd@lU2bd8 '1)) (set! lU2bec@library-resolution-condition? (condition-predicate lU2bdd@lU2bd8)) (set! lU2bee@condition-library (condition-accessor lU2bdd@lU2bd8 lU2be8@lU2bd5)) (set! lU2bf0@condition-files (condition-accessor lU2bdd@lU2bd8 lU2bea@lU2bd6)) (raise (condition (lU4f04@lU4cc5@make-error) (lU4f26@lU4d21@make-who-condition 'expander) (lU4eea@lU4c82@make-message-condition '"cannot locate library in library-path") (lU2be6@make-library-resolution-condition lU2bc9@x (reverse lU2bcf@failed-list)))))) (if (null? lU2bce@exts) (lU2bd3@f (cdr lU2bcd@ls) (lU2b0a@library-extensions) lU2bcf@failed-list) (let ((lU2bf1@name (string-append (car lU2bcd@ls) lU2bcb@str (car lU2bce@exts)))) (if (file-exists? lU2bf1@name) lU2bf1@name (lU2bd3@f lU2bcd@ls (cdr lU2bce@exts) (cons lU2bf1@name lU2bcf@failed-list))))))))) (lambda (lU2bf3@f) (if (procedure? lU2bf3@f) lU2bf3@f (assertion-violation 'file-locator '"not a procedure" lU2bf3@f))))) (set! lU2ccf@lU2b0e@file-locator lU2b0e@file-locator) (set! lU2b10@serialize-all (lambda (lU2bf5@serialize lU2bf6@compile) (let ((lU2bfa@library-desc '#f)) (begin (set! lU2bfa@library-desc (lambda (lU2bfd@x) (list (lU2aca@library-id lU2bfd@x) (lU2ace@library-name lU2bfd@x)))) (for-each (lambda (lU2bfb@x) (if (lU2afe@library-source-file-name lU2bfb@x) (lU2bf5@serialize (lU2afe@library-source-file-name lU2bfb@x) (list (lU2aca@library-id lU2bfb@x) (lU2ace@library-name lU2bfb@x) (lU2ad2@library-version lU2bfb@x) (map lU2bfa@library-desc (lU2ad6@library-imp* lU2bfb@x)) (map lU2bfa@library-desc (lU2ada@library-vis* lU2bfb@x)) (map lU2bfa@library-desc (lU2ade@library-inv* lU2bfb@x)) (lU2ae2@library-subst lU2bfb@x) (lU2ae6@library-env lU2bfb@x) (lU2bf6@compile (lU2af2@library-visit-code lU2bfb@x)) (lU2bf6@compile (lU2af6@library-invoke-code lU2bfb@x)) (lU2afa@library-visible? lU2bfb@x))) (void))) ((lU2abc@current-library-collection))))))) (set! lU2cd0@lU2b10@serialize-all lU2b10@serialize-all) (set! lU2b12@current-precompiled-library-loader (lU2a12@lU28f0@make-parameter (lambda (lU2bff@filename lU2c00@sk) '#f))) (set! lU2cd1@lU2b12@current-precompiled-library-loader lU2b12@current-precompiled-library-loader) (set! lU2b14@try-load-from-file (lambda (lU2c03@filename) ((lU2b12@current-precompiled-library-loader) lU2c03@filename (lambda lU2c29 (let ((lU2c2a (length lU2c29))) (if (= lU2c2a '11) (apply (lambda (lU2c05@id lU2c06@name lU2c07@ver lU2c08@imp* lU2c09@vis* lU2c0a@inv* lU2c0b@exp-subst lU2c0c@exp-env lU2c0d@visit-proc lU2c0e@invoke-proc lU2c0f@visible?) (let lU2c1d@f ((lU2c1b@deps (append lU2c08@imp* lU2c09@vis* lU2c0a@inv*))) (if (null? lU2c1b@deps) (begin (lU2b28@install-library lU2c05@id lU2c06@name lU2c07@ver lU2c08@imp* lU2c09@vis* lU2c0a@inv* lU2c0b@exp-subst lU2c0c@exp-env lU2c0d@visit-proc lU2c0e@invoke-proc '#f '#f lU2c0f@visible? '#f) '#t) (let ((lU2c1f@d (car lU2c1b@deps))) (let ((lU2c21@label (car lU2c1f@d)) (lU2c22@dname (cadr lU2c1f@d))) (let ((lU2c25@l (lU2b1e@find-library-by-name lU2c22@dname))) (if (and (lU2ac8@library? lU2c25@l) (eq? lU2c21@label (lU2aca@library-id lU2c25@l))) (lU2c1d@f (cdr lU2c1b@deps)) (begin (if lU2a0c@lU28e4@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" lU2c06@name lU2c22@dname lU2c03@filename lU2c25@l lU2c21@label (lU2aca@library-id lU2c25@l)) (void)) '#f)))))))) lU2c29) (if (>= lU2c2a '0) (apply (lambda lU2c27@others '#f) lU2c29) (error 'apply '"invalid arg count")))))))) (set! lU2cd2@lU2b14@try-load-from-file lU2b14@try-load-from-file) (set! lU2b16@library-loader (lU2a12@lU28f0@make-parameter (lambda (lU2c2b@x) (let ((lU2c2d@file-name ((lU2b0e@file-locator) lU2c2b@x))) (if (not lU2c2d@file-name) (assertion-violation '#f '"cannot file library" lU2c2b@x) (or (lU2b14@try-load-from-file lU2c2d@file-name) ((lU2b18@current-library-expander) (lU2a11@lU28ee@read-library-source-file lU2c2d@file-name) lU2c2d@file-name (lambda (lU2c2f@name) (if (not (fast-equal? lU2c2f@name lU2c2b@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (lU2c35@lU2c32 lU2c36@lU2c34) (let ((lU2c39@e lU2c36@lU2c34) (lU2c3a@p lU2c35@lU2c32)) (begin (display '"expected to find library " lU2c3a@p) (write lU2c2b@x lU2c3a@p) (display '" in file " lU2c3a@p) (display lU2c2d@file-name lU2c3a@p) (display '", found " lU2c3a@p) (write lU2c2f@name lU2c3a@p) (display '" instead" lU2c3a@p) (lU2c39@e)))))) (void)))))))) (lambda (lU2c3d@f) (if (procedure? lU2c3d@f) lU2c3d@f (assertion-violation 'library-locator '"not a procedure" lU2c3d@f))))) (set! lU2cd3@lU2b16@library-loader lU2b16@library-loader) (set! lU2b18@current-library-expander (lU2a12@lU28f0@make-parameter (lambda (lU2c3f@x) (assertion-violation 'library-expander '"not initialized")) (lambda (lU2c41@f) (if (procedure? lU2c41@f) lU2c41@f (assertion-violation 'library-expander '"not a procedure" lU2c41@f))))) (set! lU2cd4@lU2b18@current-library-expander lU2b18@current-library-expander) (set! lU2b1a@external-pending-libraries (lU2a12@lU28f0@make-parameter '())) (set! lU2cd5@lU2b1a@external-pending-libraries lU2b1a@external-pending-libraries) (set! lU2b1c@find-external-library (lambda (lU2c43@name) (begin (if (member lU2c43@name (lU2b1a@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" lU2c43@name) (void)) (let ((lU2c49@lU2c46 lU2b1a@external-pending-libraries) (lU2c4a@lU2c48 (cons lU2c43@name (lU2b1a@external-pending-libraries)))) (let ((lU2c4d@swap (lambda () (let ((lU2c4f@t (lU2c49@lU2c46))) (begin (lU2c49@lU2c46 lU2c4a@lU2c48) (set! lU2c4a@lU2c48 lU2c4f@t)))))) (dynamic-wind lU2c4d@swap (lambda () (begin ((lU2b16@library-loader) lU2c43@name) (or (lU2b06@find-library-by (lambda (lU2c51@x) (fast-equal? (lU2ace@library-name lU2c51@x) lU2c43@name))) (assertion-violation '#f '"handling external library did not yield the correct library" lU2c43@name)))) lU2c4d@swap)))))) (set! lU2cd6@lU2b1c@find-external-library lU2b1c@find-external-library) (set! lU2b1e@find-library-by-name (lambda (lU2c53@name) (or (lU2b06@find-library-by (lambda (lU2c55@x) (fast-equal? (lU2ace@library-name lU2c55@x) lU2c53@name))) (lU2b1c@find-external-library lU2c53@name)))) (set! lU2cd7@lU2b1e@find-library-by-name lU2b1e@find-library-by-name) (set! lU2b20@library-exists? (lambda (lU2c57@name) (and (lU2b06@find-library-by (lambda (lU2c59@x) (fast-equal? (lU2ace@library-name lU2c59@x) lU2c57@name))) '#t))) (set! lU2cd8@lU2b20@library-exists? lU2b20@library-exists?) (set! lU2b22@find-library-by-spec/die (lambda (lU2c5b@spec) (let ((lU2c5d@id (car lU2c5b@spec))) (or (lU2b06@find-library-by (lambda (lU2c5f@x) (eq? lU2c5d@id (lU2aca@library-id lU2c5f@x)))) (assertion-violation '#f '"cannot find library with required spec" lU2c5b@spec))))) (set! lU2cd9@lU2b22@find-library-by-spec/die lU2b22@find-library-by-spec/die) (set! lU2b24@label->binding-table (make-eq-hashtable)) (set! lU2cda@lU2b24@label->binding-table lU2b24@label->binding-table) (set! lU2b26@install-library-record (lambda (lU2c61@lib) (begin (let ((lU2c63@exp-env (lU2ae6@library-env lU2c61@lib))) (for-each (lambda (lU2c65@x) (let ((lU2c67@label (car lU2c65@x)) (lU2c68@binding (cdr lU2c65@x))) (let ((lU2c6b@binding (let ((lU2c6d@t (car lU2c68@binding))) (if (memv lU2c6d@t '(global)) (cons 'global (cons lU2c61@lib (cdr lU2c68@binding))) (if (memv lU2c6d@t '(global-macro)) (cons 'global-macro (cons lU2c61@lib (cdr lU2c68@binding))) (if (memv lU2c6d@t '(global-macro!)) (cons 'global-macro! (cons lU2c61@lib (cdr lU2c68@binding))) lU2c68@binding)))))) (begin (if (hashtable-ref lU2b24@label->binding-table lU2c67@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" lU2c67@label (hashtable-ref lU2b24@label->binding-table lU2c67@label '#f) lU2c6b@binding) (exit)) (void)) (hashtable-set! lU2b24@label->binding-table lU2c67@label lU2c6b@binding))))) lU2c63@exp-env)) ((lU2abc@current-library-collection) lU2c61@lib)))) (set! lU2cdb@lU2b26@install-library-record lU2b26@install-library-record) (set! lU2b28@install-library (lambda (lU2c6f@id lU2c70@name lU2c71@ver lU2c72@imp* lU2c73@vis* lU2c74@inv* lU2c75@exp-subst lU2c76@exp-env lU2c77@visit-proc lU2c78@invoke-proc lU2c79@visit-code lU2c7a@invoke-code lU2c7b@visible? lU2c7c@source-file-name) (let ((lU2c8b@imp-lib* (map lU2b22@find-library-by-spec/die lU2c72@imp*)) (lU2c8c@vis-lib* (map lU2b22@find-library-by-spec/die lU2c73@vis*)) (lU2c8d@inv-lib* (map lU2b22@find-library-by-spec/die lU2c74@inv*))) (begin (if (not (and (symbol? lU2c6f@id) (list? lU2c70@name) (list? lU2c71@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" lU2c6f@id lU2c70@name lU2c71@ver) (void)) (if (lU2b20@library-exists? lU2c70@name) (assertion-violation 'install-library '"library is already installed" lU2c70@name) (void)) (let ((lU2c91@lib (make-simple-struct 'library '15 (list lU2c6f@id lU2c70@name lU2c71@ver lU2c8b@imp-lib* lU2c8c@vis-lib* lU2c8d@inv-lib* lU2c75@exp-subst lU2c76@exp-env lU2c77@visit-proc lU2c78@invoke-proc lU2c79@visit-code lU2c7a@invoke-code lU2c7b@visible? lU2c7c@source-file-name)))) (lU2b26@install-library-record lU2c91@lib)))))) (set! lU2cdc@lU2b28@install-library lU2b28@install-library) (set! lU2b2a@imported-label->binding (lambda (lU2c93@lab) (hashtable-ref lU2b24@label->binding-table lU2c93@lab '#f))) (set! lU2cdd@lU2b2a@imported-label->binding lU2b2a@imported-label->binding) (set! lU2b2c@invoke-library (lambda (lU2c95@lib) (let ((lU2c97@invoke (lU2aee@library-invoke-state lU2c95@lib))) (if (procedure? lU2c97@invoke) (begin (lU2af0@set-library-invoke-state! lU2c95@lib (lambda () (assertion-violation 'invoke '"circularity detected" lU2c95@lib))) (for-each lU2b2c@invoke-library (lU2ade@library-inv* lU2c95@lib)) (lU2af0@set-library-invoke-state! lU2c95@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" lU2c95@lib))) (lU2c97@invoke) (lU2af0@set-library-invoke-state! lU2c95@lib '#t)) (void))))) (set! lU2cde@lU2b2c@invoke-library lU2b2c@invoke-library) (set! lU2b2e@visit-library (lambda (lU2c99@lib) (let ((lU2c9b@visit (lU2aea@library-visit-state lU2c99@lib))) (if (procedure? lU2c9b@visit) (begin (lU2aec@set-library-visit-state! lU2c99@lib (lambda () (assertion-violation 'visit '"circularity detected" lU2c99@lib))) (for-each lU2b2c@invoke-library (lU2ada@library-vis* lU2c99@lib)) (lU2aec@set-library-visit-state! lU2c99@lib (lambda () (assertion-violation 'invoke '"first visit did not return" lU2c99@lib))) (lU2c9b@visit) (lU2aec@set-library-visit-state! lU2c99@lib '#t)) (void))))) (set! lU2cdf@lU2b2e@visit-library lU2b2e@visit-library) (set! lU2b30@invoke-library-by-spec (lambda (lU2c9d@spec) (lU2b2c@invoke-library (lU2b22@find-library-by-spec/die lU2c9d@spec)))) (set! lU2ce0@lU2b30@invoke-library-by-spec lU2b30@invoke-library-by-spec) (set! lU2b32@installed-libraries (lambda lU2ca5 (let ((lU2ca6 (length lU2ca5))) (if (= lU2ca6 '1) (apply (lambda (lU2c9f@all?) (let lU2ca3@f ((lU2ca1@ls ((lU2abc@current-library-collection)))) (if (null? lU2ca1@ls) '() (if (or lU2c9f@all? (lU2afa@library-visible? (car lU2ca1@ls))) (cons (car lU2ca1@ls) (lU2ca3@f (cdr lU2ca1@ls))) (lU2ca3@f (cdr lU2ca1@ls)))))) lU2ca5) (if (= lU2ca6 '0) (apply (lambda () (lU2b32@installed-libraries '#f)) lU2ca5) (error 'apply '"invalid arg count")))))) (set! lU2ce1@lU2b32@installed-libraries lU2b32@installed-libraries) (set! lU2b34@library-spec (lambda (lU2ca7@x) (begin (if (not (lU2ac8@library? lU2ca7@x)) (assertion-violation 'library-spec '"not a library" lU2ca7@x) (void)) (list (lU2aca@library-id lU2ca7@x) (lU2ace@library-name lU2ca7@x) (lU2ad2@library-version lU2ca7@x))))) (set! lU2ce2@lU2b34@library-spec lU2b34@library-spec) (void))
(begin (set! lU2ce6@build-global-define (unspecified)) (set! lU2d57@build-lambda (unspecified)) (set! lU2d59@build-case-lambda (unspecified)) (set! lU2d87@build-sequence (unspecified)) (set! lU2d89@build-void (unspecified)) (set! lU2d8b@build-letrec (unspecified)) (set! lU2d8d@build-let (unspecified)) (set! lU2d8f@build-named-let (unspecified)) (set! lU2d91@build-letrec* (unspecified)) (set! lU2d93@build-library-letrec* (unspecified)) (set! lU2d95@build-receive (unspecified)) (set! lU2ce6@build-global-define (lambda (lU2d96@x) (lU2d89@build-void))) (set! lU2e2a@lU2ce6@build-global-define lU2ce6@build-global-define) (set! lU2d57@build-lambda (lambda (lU2d98@ae lU2d99@vars lU2d9a@exp) (list 'lambda lU2d99@vars lU2d9a@exp))) (set! lU2e2b@lU2d57@build-lambda lU2d57@build-lambda) (set! lU2d59@build-case-lambda (lambda (lU2d9e@ae lU2d9f@vars* lU2da0@exp*) (let ((lU2da5@build-error '#f) (lU2da7@build-pred '#f) (lU2da9@build-apply '#f) (lU2dab@expand-case-lambda '#f)) (begin (set! lU2da5@build-error (lambda (lU2ddc@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! lU2da7@build-pred (lambda (lU2dc4@ae lU2dc5@n lU2dc6@vars) (call-with-values (lambda () (let lU2dd2@f ((lU2dce@vars lU2dc6@vars) (lU2dcf@count '0)) (if (pair? lU2dce@vars) (lU2dd2@f (cdr lU2dce@vars) (+ lU2dcf@count '1)) (if (null? lU2dce@vars) (values lU2dcf@count '=) (values lU2dcf@count '>=))))) (lambda (lU2dd4@lU2dcb lU2dd5@lU2dcd) (let ((lU2dd8@pred lU2dd5@lU2dcd) (lU2dd9@count lU2dd4@lU2dcb)) (list (list 'primitive lU2dd8@pred) lU2dc5@n (list 'quote lU2dd9@count))))))) (set! lU2da9@build-apply (lambda (lU2dbc@ae lU2dbd@g lU2dbe@vars lU2dbf@exp) (list '(primitive apply) (lU2d57@build-lambda lU2dbc@ae lU2dbe@vars lU2dbf@exp) lU2dbd@g))) (set! lU2dab@expand-case-lambda (lambda (lU2dac@ae lU2dad@vars lU2dae@exp*) (let ((lU2db2@g (gensym)) (lU2db3@n (gensym))) (list 'lambda lU2db2@g (lU2d8d@build-let lU2dac@ae (list lU2db3@n) (list (list '(primitive length) lU2db2@g)) (let lU2dba@f ((lU2db6@vars* lU2d9f@vars*) (lU2db7@exp* lU2dae@exp*)) (if (null? lU2db6@vars*) (lU2da5@build-error lU2dac@ae) (list 'if (lU2da7@build-pred lU2dac@ae lU2db3@n (car lU2db6@vars*)) (lU2da9@build-apply lU2dac@ae lU2db2@g (car lU2db6@vars*) (car lU2db7@exp*)) (lU2dba@f (cdr lU2db6@vars*) (cdr lU2db7@exp*)))))))))) (if (= (length lU2da0@exp*) '1) (lU2d57@build-lambda lU2d9e@ae (car lU2d9f@vars*) (car lU2da0@exp*)) (lU2dab@expand-case-lambda lU2d9e@ae lU2d9f@vars* lU2da0@exp*)))))) (set! lU2e2c@lU2d59@build-case-lambda lU2d59@build-case-lambda) (set! lU2d87@build-sequence (lambda (lU2dde@ae lU2ddf@exps) (let lU2de4@loop ((lU2de2@exps lU2ddf@exps)) (if (null? (cdr lU2de2@exps)) (car lU2de2@exps) (if (equal? (car lU2de2@exps) (lU2d89@build-void)) (lU2de4@loop (cdr lU2de2@exps)) (cons 'begin lU2de2@exps)))))) (set! lU2e2d@lU2d87@build-sequence lU2d87@build-sequence) (set! lU2d89@build-void (lambda () '((primitive void)))) (set! lU2e2e@lU2d89@build-void lU2d89@build-void) (set! lU2d8b@build-letrec (lambda (lU2de6@ae lU2de7@vars lU2de8@val-exps lU2de9@body-exp) (if (null? lU2de7@vars) lU2de9@body-exp (list 'letrec (map list lU2de7@vars lU2de8@val-exps) lU2de9@body-exp)))) (set! lU2e2f@lU2d8b@build-letrec lU2d8b@build-letrec) (set! lU2d8d@build-let (lambda (lU2dee@ae lU2def@vars lU2df0@val-exps lU2df1@body-exp) (if (null? lU2def@vars) lU2df1@body-exp (list 'let (map list lU2def@vars lU2df0@val-exps) lU2df1@body-exp)))) (set! lU2e30@lU2d8d@build-let lU2d8d@build-let) (set! lU2d8f@build-named-let (lambda (lU2df6@ae lU2df7@name lU2df8@vars lU2df9@val-exps lU2dfa@body-exp) (list 'let lU2df7@name (map list lU2df8@vars lU2df9@val-exps) lU2dfa@body-exp))) (set! lU2e31@lU2d8f@build-named-let lU2d8f@build-named-let) (set! lU2d91@build-letrec* (lambda (lU2e00@ae lU2e01@vars lU2e02@val-exps lU2e03@body-exp) (if (null? lU2e01@vars) lU2e03@body-exp (lU2d8d@build-let lU2e00@ae lU2e01@vars (map (lambda (lU2e08@x) (list 'quote '#f)) lU2e01@vars) (lU2d87@build-sequence lU2e00@ae (append (map (lambda (lU2e0a@lhs lU2e0b@rhs) (list 'set! lU2e0a@lhs lU2e0b@rhs)) lU2e01@vars lU2e02@val-exps) (list lU2e03@body-exp))))))) (set! lU2e32@lU2d91@build-letrec* lU2d91@build-letrec*) (set! lU2d93@build-library-letrec* (lambda (lU2e0e@ae lU2e0f@name lU2e10@vars lU2e11@locs lU2e12@val-exps lU2e13@body-exp) (cons 'begin (append (map (lambda (lU2e1a@var) (cons 'set! (cons lU2e1a@var '((unspecified))))) lU2e10@vars) (append (apply append (map (lambda (lU2e1c@var lU2e1d@loc lU2e1e@val-exp) (list (list 'set! lU2e1c@var lU2e1e@val-exp) (list 'set! lU2e1d@loc lU2e1c@var))) lU2e10@vars lU2e11@locs lU2e12@val-exps)) (list lU2e13@body-exp)))))) (set! lU2e33@lU2d93@build-library-letrec* lU2d93@build-library-letrec*) (set! lU2d95@build-receive (lambda (lU2e22@ae lU2e23@vars lU2e24@producer lU2e25@body*) (begin (display '"************** in ") (cons 'receive (cons lU2e23@vars (cons lU2e24@producer lU2e25@body*)))))) (set! lU2e34@lU2d95@build-receive lU2d95@build-receive) (void))
(begin (set! lU2e43@file-options-macro (unspecified)) (set! lU2e45@set-cons (unspecified)) (set! lU2e47@set-union (unspecified)) (set! lU2e4c@top-mark* (unspecified)) (set! lU2e4e@top-marked? (unspecified)) (set! lU2e50@gen-lexical (unspecified)) (set! lU2e52@gen-global (unspecified)) (set! lU2e54@gen-label (unspecified)) (set! lU2e56@gen-top-level-label (unspecified)) (set! lU2e58@gen-define-label+loc (unspecified)) (set! lU2e5a@gen-define-label (unspecified)) (set! lU2e64@rib? (unspecified)) (set! lU2e66@rib-sym* (unspecified)) (set! lU2e68@set-rib-sym*! (unspecified)) (set! lU2e6a@rib-mark** (unspecified)) (set! lU2e6c@set-rib-mark**! (unspecified)) (set! lU2e6e@rib-label* (unspecified)) (set! lU2e70@set-rib-label*! (unspecified)) (set! lU2e72@rib-sealed/freq (unspecified)) (set! lU2e74@set-rib-sealed/freq! (unspecified)) (set! lU2e76@rib-cache (unspecified)) (set! lU2e78@set-rib-cache! (unspecified)) (set! lU2e7a@dummy (unspecified)) (set! lU2e7c@make-empty-rib (unspecified)) (set! lU2e7e@extend-rib! (unspecified)) (set! lU2e80@extend-rib/nc! (unspecified)) (set! lU2e82@make-rib-map (unspecified)) (set! lU2e84@seal-rib! (unspecified)) (set! lU2e86@unseal-rib! (unspecified)) (set! lU2e88@make-full-rib (unspecified)) (set! lU2e8a@rp (unspecified)) (set! lU2e94@stx? (unspecified)) (set! lU2e96@stx-expr (unspecified)) (set! lU2e98@set-stx-expr! (unspecified)) (set! lU2e9a@stx-mark* (unspecified)) (set! lU2e9c@set-stx-mark*! (unspecified)) (set! lU2e9e@stx-subst* (unspecified)) (set! lU2ea0@set-stx-subst*! (unspecified)) (set! lU2ea2@stx-ae* (unspecified)) (set! lU2ea4@set-stx-ae*! (unspecified)) (set! lU2ea6@dummy (unspecified)) (set! lU2ea8@datum->stx (unspecified)) (set! lU2eaa@gen-mark (unspecified)) (set! lU2eac@anti-mark (unspecified)) (set! lU2eae@anti-mark? (unspecified)) (set! lU2eb0@mkstx (unspecified)) (set! lU2eb2@add-mark (unspecified)) (set! lU2eb4@add-subst (unspecified)) (set! lU2eb6@syntax-kind? (unspecified)) (set! lU2eb8@syntax-vector->list (unspecified)) (set! lU2eba@syntax-pair? (unspecified)) (set! lU2ebc@syntax-vector? (unspecified)) (set! lU2ebe@syntax-null? (unspecified)) (set! lU2ec0@syntax-list? (unspecified)) (set! lU2ec2@syntax-car (unspecified)) (set! lU2ec4@syntax-cdr (unspecified)) (set! lU2ec6@syntax->list (unspecified)) (set! lU2ec8@id? (unspecified)) (set! lU2eca@id->sym (unspecified)) (set! lU2ecc@bound-id=? (unspecified)) (set! lU2ece@free-id=? (unspecified)) (set! lU2ed0@valid-bound-ids? (unspecified)) (set! lU2ed2@distinct-bound-ids? (unspecified)) (set! lU2ed4@bound-id-member? (unspecified)) (set! lU2ed6@self-evaluating? (unspecified)) (set! lU2ed8@strip-annotations (unspecified)) (set! lU2eda@strip (unspecified)) (set! lU2edc@stx->datum (unspecified)) (set! lU2ede@id->label (unspecified)) (set! lU2ee0@label->binding (unspecified)) (set! lU2ee2@make-binding (unspecified)) (set! lU2ee4@binding-type (unspecified)) (set! lU2ee6@binding-value (unspecified)) (set! lU2ee8@raise-unbound-error (unspecified)) (set! lU2eea@syntax-type (unspecified)) (set! lU2ef8@sanitize-binding (unspecified)) (set! lU2efa@make-variable-transformer (unspecified)) (set! lU2efc@variable-transformer? (unspecified)) (set! lU2efe@variable-transformer-procedure (unspecified)) (set! lU2f00@make-eval-transformer (unspecified)) (set! lU3051@parse-define (unspecified)) (set! lU3053@parse-define-syntax (unspecified)) (set! lU3055@scheme-stx-hashtable (unspecified)) (set! lU3057@scheme-stx (unspecified)) (set! lU3059@lexical-var (unspecified)) (set! lU305b@lexical-mutable? (unspecified)) (set! lU305d@set-lexical-mutable! (unspecified)) (set! lU305f@add-lexical (unspecified)) (set! lU3061@add-lexicals (unspecified)) (set! lU3063@letrec-helper (unspecified)) (set! lU3065@let-transformer (unspecified)) (set! lU3067@letrec-transformer (unspecified)) (set! lU3069@letrec*-transformer (unspecified)) (set! lU306b@fluid-let-syntax-transformer (unspecified)) (set! lU306d@type-descriptor-transformer (unspecified)) (set! lU306f@record-type-descriptor-transformer (unspecified)) (set! lU3071@record-constructor-descriptor-transformer (unspecified)) (set! lU3073@when-macro (unspecified)) (set! lU3075@unless-macro (unspecified)) (set! lU3077@if-transformer (unspecified)) (set! lU3079@and-transformer (unspecified)) (set! lU307b@or-transformer (unspecified)) (set! lU307d@case-macro (unspecified)) (set! lU307f@quote-transformer (unspecified)) (set! lU3081@case-lambda-transformer (unspecified)) (set! lU3083@lambda-transformer (unspecified)) (set! lU3085@bless (unspecified)) (set! lU3087@with-syntax-macro (unspecified)) (set! lU3089@invalid-fmls-error (unspecified)) (set! lU308b@let-macro (unspecified)) (set! lU308d@let-values-macro (unspecified)) (set! lU308f@let*-values-macro (unspecified)) (set! lU3091@trace-lambda-macro (unspecified)) (set! lU3093@trace-define-macro (unspecified)) (set! lU3095@trace-define-syntax-macro (unspecified)) (set! lU3097@trace-let/rec-syntax (unspecified)) (set! lU3099@trace-let-syntax-macro (unspecified)) (set! lU309b@trace-letrec-syntax-macro (unspecified)) (set! lU309d@guard-macro (unspecified)) (set! lU309f@define-enumeration-macro (unspecified)) (set! lU30a1@time-macro (unspecified)) (set! lU30a3@delay-macro (unspecified)) (set! lU30a5@assert-macro (unspecified)) (set! lU30a7@endianness-macro (unspecified)) (set! lU30a9@identifier-syntax-macro (unspecified)) (set! lU30ab@do-macro (unspecified)) (set! lU30ad@let*-macro (unspecified)) (set! lU30af@or-macro (unspecified)) (set! lU30b1@and-macro (unspecified)) (set! lU30b3@cond-macro (unspecified)) (set! lU30b5@do-include (unspecified)) (set! lU30b7@include-macro (unspecified)) (set! lU30b9@include-into-macro (unspecified)) (set! lU30bb@syntax-rules-macro (unspecified)) (set! lU30bd@quasiquote-macro (unspecified)) (set! lU30bf@quasisyntax-macro (unspecified)) (set! lU30c1@define-struct-macro (unspecified)) (set! lU30c3@define-record-type-macro (unspecified)) (set! lU30c5@define-condition-type-macro (unspecified)) (set! lU30c7@incorrect-usage-macro (unspecified)) (set! lU30c9@parameterize-macro (unspecified)) (set! lU30cb@foreign-call-transformer (unspecified)) (set! lU30cd@convert-pattern (unspecified)) (set! lU30cf@syntax-dispatch (unspecified)) (set! lU30d1@ellipsis? (unspecified)) (set! lU30d3@underscore? (unspecified)) (set! lU30d5@verify-literals (unspecified)) (set! lU30d7@syntax-case-transformer (unspecified)) (set! lU30d9@ellipsis-map (unspecified)) (set! lU30db@syntax-transformer (unspecified)) (set! lU30dd@core-macro-transformer (unspecified)) (set! lU30df@symbol-macro (unspecified)) (set! lU30e1@macro-transformer (unspecified)) (set! lU30e3@local-macro-transformer (unspecified)) (set! lU30e5@do-macro-call (unspecified)) (set! lU30e7@chi-macro (unspecified)) (set! lU30e9@chi-local-macro (unspecified)) (set! lU30eb@chi-global-macro (unspecified)) (set! lU30ed@chi-expr* (unspecified)) (set! lU30ef@chi-application (unspecified)) (set! lU30f1@chi-expr (unspecified)) (set! lU30f3@chi-set! (unspecified)) (set! lU30f5@verify-formals (unspecified)) (set! lU30f7@chi-lambda-clause (unspecified)) (set! lU30f9@chi-lambda-clause* (unspecified)) (set! lU30fb@chi-defun (unspecified)) (set! lU30fd@chi-rhs (unspecified)) (set! lU30ff@expand-interaction-rhs*/init* (unspecified)) (set! lU3101@chi-rhs* (unspecified)) (set! lU3103@find-bound=? (unspecified)) (set! lU3105@find-dups (unspecified)) (set! lU3107@chi-internal (unspecified)) (set! lU3109@parse-module (unspecified)) (set! lU3113@module-interface? (unspecified)) (set! lU3115@module-interface-first-mark (unspecified)) (set! lU3117@set-module-interface-first-mark! (unspecified)) (set! lU3119@module-interface-exp-id-vec (unspecified)) (set! lU311b@set-module-interface-exp-id-vec! (unspecified)) (set! lU311d@module-interface-exp-lab-vec (unspecified)) (set! lU311f@set-module-interface-exp-lab-vec! (unspecified)) (set! lU3121@dummy (unspecified)) (set! lU3123@module-interface-exp-id* (unspecified)) (set! lU3125@chi-internal-module (unspecified)) (set! lU3127@chi-body* (unspecified)) (set! lU3129@expand-transformer (unspecified)) (set! lU312b@parse-exports (unspecified)) (set! lU312d@parse-library-name (unspecified)) (set! lU312f@parse-library (unspecified)) (set! lU3131@parse-import-spec* (unspecified)) (set! lU3133@make-top-rib (unspecified)) (set! lU3135@make-collector (unspecified)) (set! lU3137@inv-collector (unspecified)) (set! lU3139@vis-collector (unspecified)) (set! lU313b@imp-collector (unspecified)) (set! lU313d@chi-library-internal (unspecified)) (set! lU313f@chi-interaction-expr (unspecified)) (set! lU3141@library-body-expander (unspecified)) (set! lU3143@core-library-expander (unspecified)) (set! lU3145@parse-top-level-program (unspecified)) (set! lU3147@top-level-expander (unspecified)) (set! lU3149@rp (unspecified)) (set! lU3153@env? (unspecified)) (set! lU3155@env-names (unspecified)) (set! lU3157@set-env-names! (unspecified)) (set! lU3159@env-labels (unspecified)) (set! lU315b@set-env-labels! (unspecified)) (set! lU315d@env-itc (unspecified)) (set! lU315f@set-env-itc! (unspecified)) (set! lU3161@dummy (unspecified)) (set! lU3163@rp (unspecified)) (set! lU316d@interaction-env? (unspecified)) (set! lU316f@interaction-env-rib (unspecified)) (set! lU3171@set-interaction-env-rib! (unspecified)) (set! lU3173@interaction-env-r (unspecified)) (set! lU3175@set-interaction-env-r! (unspecified)) (set! lU3177@interaction-env-locs (unspecified)) (set! lU3179@set-interaction-env-locs! (unspecified)) (set! lU317b@dummy (unspecified)) (set! lU317d@interaction-environment-symbols (unspecified)) (set! lU317f@environment-bindings (unspecified)) (set! lU3181@parse-binding (unspecified)) (set! lU3183@environment? (unspecified)) (set! lU3185@environment-symbols (unspecified)) (set! lU3187@environment (unspecified)) (set! lU3189@null-environment (unspecified)) (set! lU318b@scheme-report-environment (unspecified)) (set! lU318d@expand (unspecified)) (set! lU318f@eval (unspecified)) (set! lU3191@library-expander (unspecified)) (set! lU3193@boot-library-expand (unspecified)) (set! lU3195@rev-map-append (unspecified)) (set! lU3197@build-exports (unspecified)) (set! lU3199@make-export-subst (unspecified)) (set! lU319b@make-export-env/macros (unspecified)) (set! lU319d@generate-temporaries (unspecified)) (set! lU319f@free-identifier=? (unspecified)) (set! lU31a1@bound-identifier=? (unspecified)) (set! lU31a3@make-source-condition (unspecified)) (set! lU31a5@extract-position-condition (unspecified)) (set! lU31a7@expression-position (unspecified)) (set! lU31a9@assertion-error (unspecified)) (set! lU31ab@syntax-error (unspecified)) (set! lU31ad@syntax-violation* (unspecified)) (set! lU31af@syntax-violation (unspecified)) (set! lU31b1@identifier? (unspecified)) (set! lU31b3@datum->syntax (unspecified)) (set! lU31b5@syntax->datum (unspecified)) (set! lU31b7@ungensym-all (unspecified)) (set! lU31b9@compile-r6rs-top-level (unspecified)) (set! lU31bb@pre-compile-r6rs-top-level (unspecified)) (set! lU31bd@interaction-environment (unspecified)) (set! lU31bf@top-level-context (unspecified)) (set! lU2e43@file-options-macro (lambda (lU31c0@x) (let ((lU31c3@valid-option? '#f)) (begin (set! lU31c3@valid-option? (lambda (lU31cc@x) (and (lU2ec8@id? lU31cc@x) (memq (lU2eca@id->sym lU31cc@x) '(no-fail no-create no-truncate))))) (let ((lU31c4@t lU31c0@x)) (let ((lU31c6@ls/false (lU30cf@syntax-dispatch lU31c4@t '(_ . each-any)))) (if (and lU31c6@ls/false (apply (lambda (lU31c8@opt*) (for-all lU31c3@valid-option? lU31c8@opt*)) lU31c6@ls/false)) (apply (lambda (lU31ca@opt*) (lU3085@bless (list 'make-file-options (list 'quote lU31ca@opt*)))) lU31c6@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU31c4@t)))))))) (set! lU4b16@lU2e43@file-options-macro lU2e43@file-options-macro) (set! lU2e45@set-cons (lambda (lU31ce@x lU31cf@ls) (if (memq lU31ce@x lU31cf@ls) lU31cf@ls (cons lU31ce@x lU31cf@ls)))) (set! lU4b17@lU2e45@set-cons lU2e45@set-cons) (set! lU2e47@set-union (lambda (lU31d2@ls1 lU31d3@ls2) (if (null? lU31d2@ls1) lU31d3@ls2 (if (memq (car lU31d2@ls1) lU31d3@ls2) (lU2e47@set-union (cdr lU31d2@ls1) lU31d3@ls2) (cons (car lU31d2@ls1) (lU2e47@set-union (cdr lU31d2@ls1) lU31d3@ls2)))))) (set! lU4b18@lU2e47@set-union lU2e47@set-union) (set! lU2e4c@top-mark* '(top)) (set! lU4b19@lU2e4c@top-mark* lU2e4c@top-mark*) (set! lU2e4e@top-marked? (lambda (lU31d6@m*) (memq 'top lU31d6@m*))) (set! lU4b1a@lU2e4e@top-marked? lU2e4e@top-marked?) (set! lU2e50@gen-lexical (lambda (lU31d8@sym) (if (symbol? lU31d8@sym) (gensym lU31d8@sym) (if (lU2e94@stx? lU31d8@sym) (lU2e50@gen-lexical (lU2eca@id->sym lU31d8@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" lU31d8@sym))))) (set! lU4b1b@lU2e50@gen-lexical lU2e50@gen-lexical) (set! lU2e52@gen-global (lambda (lU31da@x) (lU2e50@gen-lexical lU31da@x))) (set! lU4b1c@lU2e52@gen-global lU2e52@gen-global) (set! lU2e54@gen-label (lambda (lU31dc@_) (gensym))) (set! lU4b1d@lU2e54@gen-label lU2e54@gen-label) (set! lU2e56@gen-top-level-label (lambda (lU31de@id lU31df@rib) (let ((lU31e3@find '#f)) (begin (set! lU31e3@find (lambda (lU31ee@sym lU31ef@mark* lU31f0@sym* lU31f1@mark** lU31f2@label*) (and (pair? lU31f0@sym*) (if (and (eq? lU31ee@sym (car lU31f0@sym*)) (same-marks? lU31ef@mark* (car lU31f1@mark**))) (car lU31f2@label*) (lU31e3@find lU31ee@sym lU31ef@mark* (cdr lU31f0@sym*) (cdr lU31f1@mark**) (cdr lU31f2@label*)))))) (let ((lU31e4@sym (lU2eca@id->sym lU31de@id)) (lU31e5@mark* (lU2e9a@stx-mark* lU31de@id))) (let ((lU31e8@sym* (lU2e66@rib-sym* lU31df@rib))) (let ((lU31ea@t (and (memq lU31e4@sym (lU2e66@rib-sym* lU31df@rib)) (lU31e3@find lU31e4@sym lU31e5@mark* lU31e8@sym* (lU2e6a@rib-mark** lU31df@rib) (lU2e6e@rib-label* lU31df@rib))))) (if lU31ea@t ((lambda (lU31ec@label) (if (lU2cdd@lU2b2a@imported-label->binding lU31ec@label) (gensym) lU31ec@label)) lU31ea@t) (gensym))))))))) (set! lU4b1e@lU2e56@gen-top-level-label lU2e56@gen-top-level-label) (set! lU2e58@gen-define-label+loc (lambda (lU31f8@id lU31f9@rib) (let ((lU31fc@t (lU31bf@top-level-context))) (if lU31fc@t ((lambda (lU31fe@env) (let ((lU3200@label (lU2e56@gen-top-level-label lU31f8@id lU31f9@rib)) (lU3201@locs (lU3177@interaction-env-locs lU31fe@env))) (values lU3200@label (let ((lU3204@t (assq lU3200@label lU3201@locs))) (if lU3204@t (cdr lU3204@t) (let ((lU3206@loc (lU2e50@gen-lexical lU31f8@id))) (begin (lU3179@set-interaction-env-locs! lU31fe@env (cons (cons lU3200@label lU3206@loc) lU3201@locs)) lU3206@loc))))))) lU31fc@t) (values (gensym) (lU2e50@gen-lexical lU31f8@id)))))) (set! lU4b1f@lU2e58@gen-define-label+loc lU2e58@gen-define-label+loc) (set! lU2e5a@gen-define-label (lambda (lU3208@id lU3209@rib) (if (lU31bf@top-level-context) (lU2e56@gen-top-level-label lU3208@id lU3209@rib) (gensym)))) (set! lU4b20@lU2e5a@gen-define-label lU2e5a@gen-define-label) (set! lU2e64@rib? (lambda (lU320c@x) (and (simple-struct? lU320c@x) (eq? (simple-struct-name lU320c@x) 'rib)))) (set! lU4b21@lU2e64@rib? lU2e64@rib?) (set! lU2e66@rib-sym* (lambda (lU320e@x) (simple-struct-ref lU320e@x '0))) (set! lU4b22@lU2e66@rib-sym* lU2e66@rib-sym*) (set! lU2e68@set-rib-sym*! (lambda (lU3210@x lU3211@val) (simple-struct-set! lU3210@x '0 lU3211@val))) (set! lU4b23@lU2e68@set-rib-sym*! lU2e68@set-rib-sym*!) (set! lU2e6a@rib-mark** (lambda (lU3214@x) (simple-struct-ref lU3214@x '1))) (set! lU4b24@lU2e6a@rib-mark** lU2e6a@rib-mark**) (set! lU2e6c@set-rib-mark**! (lambda (lU3216@x lU3217@val) (simple-struct-set! lU3216@x '1 lU3217@val))) (set! lU4b25@lU2e6c@set-rib-mark**! lU2e6c@set-rib-mark**!) (set! lU2e6e@rib-label* (lambda (lU321a@x) (simple-struct-ref lU321a@x '2))) (set! lU4b26@lU2e6e@rib-label* lU2e6e@rib-label*) (set! lU2e70@set-rib-label*! (lambda (lU321c@x lU321d@val) (simple-struct-set! lU321c@x '2 lU321d@val))) (set! lU4b27@lU2e70@set-rib-label*! lU2e70@set-rib-label*!) (set! lU2e72@rib-sealed/freq (lambda (lU3220@x) (simple-struct-ref lU3220@x '3))) (set! lU4b28@lU2e72@rib-sealed/freq lU2e72@rib-sealed/freq) (set! lU2e74@set-rib-sealed/freq! (lambda (lU3222@x lU3223@val) (simple-struct-set! lU3222@x '3 lU3223@val))) (set! lU4b29@lU2e74@set-rib-sealed/freq! lU2e74@set-rib-sealed/freq!) (set! lU2e76@rib-cache (lambda (lU3226@x) (simple-struct-ref lU3226@x '4))) (set! lU4b2a@lU2e76@rib-cache lU2e76@rib-cache) (set! lU2e78@set-rib-cache! (lambda (lU3228@x lU3229@val) (simple-struct-set! lU3228@x '4 lU3229@val))) (set! lU4b2b@lU2e78@set-rib-cache! lU2e78@set-rib-cache!) (set! lU2e7a@dummy '3) (set! lU4b2c@lU2e7a@dummy lU2e7a@dummy) (set! lU2e7c@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! lU4b2d@lU2e7c@make-empty-rib lU2e7c@make-empty-rib) (set! lU2e7e@extend-rib! (lambda (lU322c@rib lU322d@id lU322e@label) (let ((lU3233@find '#f)) (begin (set! lU3233@find (lambda (lU3240@sym lU3241@mark* lU3242@sym* lU3243@mark** lU3244@label*) (and (pair? lU3242@sym*) (if (and (eq? lU3240@sym (car lU3242@sym*)) (same-marks? lU3241@mark* (car lU3243@mark**))) lU3244@label* (lU3233@find lU3240@sym lU3241@mark* (cdr lU3242@sym*) (cdr lU3243@mark**) (cdr lU3244@label*)))))) (begin (if (lU2e72@rib-sealed/freq lU322c@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" lU322c@rib) (void)) (let ((lU3234@sym (lU2eca@id->sym lU322d@id)) (lU3235@mark* (lU2e9a@stx-mark* lU322d@id))) (let ((lU3238@sym* (lU2e66@rib-sym* lU322c@rib))) (let ((lU323a@t (and (memq lU3234@sym (lU2e66@rib-sym* lU322c@rib)) (lU3233@find lU3234@sym lU3235@mark* lU3238@sym* (lU2e6a@rib-mark** lU322c@rib) (lU2e6e@rib-label* lU322c@rib))))) (if lU323a@t ((lambda (lU323c@p) (if (not (eq? lU322e@label (car lU323c@p))) (if (lU31bf@top-level-context) (set-car! lU323c@p lU322e@label) (lU31af@syntax-violation '#f '"multiple definitions of identifier" lU322d@id)) (void))) lU323a@t) (begin (if (lU2e76@rib-cache lU322c@rib) (hashtable-update! (lU2e76@rib-cache lU322c@rib) lU3234@sym (lambda (lU323e@e) (cons (cons lU3235@mark* lU322e@label) lU323e@e)) '()) (void)) (lU2e68@set-rib-sym*! lU322c@rib (cons lU3234@sym lU3238@sym*)) (lU2e6c@set-rib-mark**! lU322c@rib (cons lU3235@mark* (lU2e6a@rib-mark** lU322c@rib))) (lU2e70@set-rib-label*! lU322c@rib (cons lU322e@label (lU2e6e@rib-label* lU322c@rib))))))))))))) (set! lU4b2e@lU2e7e@extend-rib! lU2e7e@extend-rib!) (set! lU2e80@extend-rib/nc! (lambda (lU324a@rib lU324b@id lU324c@label) (let ((lU3250@sym (lU2eca@id->sym lU324b@id)) (lU3251@mark* (lU2e9a@stx-mark* lU324b@id))) (let ((lU3254@sym* (lU2e66@rib-sym* lU324a@rib))) (begin (if (lU2e76@rib-cache lU324a@rib) (hashtable-update! (lU2e76@rib-cache lU324a@rib) lU3250@sym (lambda (lU3256@e) (cons (cons lU3251@mark* lU324c@label) lU3256@e)) '()) (void)) (lU2e68@set-rib-sym*! lU324a@rib (cons lU3250@sym lU3254@sym*)) (lU2e6c@set-rib-mark**! lU324a@rib (cons lU3251@mark* (lU2e6a@rib-mark** lU324a@rib))) (lU2e70@set-rib-label*! lU324a@rib (cons lU324c@label (lU2e6e@rib-label* lU324a@rib)))))))) (set! lU4b2f@lU2e80@extend-rib/nc! lU2e80@extend-rib/nc!) (set! lU2e82@make-rib-map (lambda (lU3258@sym*) (let ((lU325a@ht (make-eq-hashtable))) (let lU3260@f ((lU325c@i '0) (lU325d@sym* lU3258@sym*)) (if (null? lU325d@sym*) lU325a@ht (begin (hashtable-update! lU325a@ht (car lU325d@sym*) (lambda (lU3262@x) (cons lU325c@i lU3262@x)) '()) (lU3260@f (+ lU325c@i '1) (cdr lU325d@sym*)))))))) (set! lU4b30@lU2e82@make-rib-map lU2e82@make-rib-map) (set! lU2e84@seal-rib! (lambda (lU3264@rib) (let ((lU3266@sym* (lU2e66@rib-sym* lU3264@rib))) (if (not (null? lU3266@sym*)) (begin (lU2e68@set-rib-sym*! lU3264@rib (list->vector lU3266@sym*)) (lU2e6c@set-rib-mark**! lU3264@rib (list->vector (lU2e6a@rib-mark** lU3264@rib))) (lU2e70@set-rib-label*! lU3264@rib (list->vector (lU2e6e@rib-label* lU3264@rib))) (lU2e74@set-rib-sealed/freq! lU3264@rib (lU2e82@make-rib-map lU3266@sym*))) (void))))) (set! lU4b31@lU2e84@seal-rib! lU2e84@seal-rib!) (set! lU2e86@unseal-rib! (lambda (lU3268@rib) (if (lU2e72@rib-sealed/freq lU3268@rib) (begin (lU2e74@set-rib-sealed/freq! lU3268@rib '#f) (lU2e68@set-rib-sym*! lU3268@rib (vector->list (lU2e66@rib-sym* lU3268@rib))) (lU2e6c@set-rib-mark**! lU3268@rib (vector->list (lU2e6a@rib-mark** lU3268@rib))) (lU2e70@set-rib-label*! lU3268@rib (vector->list (lU2e6e@rib-label* lU3268@rib)))) (void)))) (set! lU4b32@lU2e86@unseal-rib! lU2e86@unseal-rib!) (set! lU2e88@make-full-rib (lambda (lU326a@id* lU326b@label*) (let ((lU326e@r (make-simple-struct 'rib '6 (list (map lU2eca@id->sym lU326a@id*) (map lU2e9a@stx-mark* lU326a@id*) lU326b@label* '#f '#f)))) (begin (lU2e84@seal-rib! lU326e@r) lU326e@r)))) (set! lU4b33@lU2e88@make-full-rib lU2e88@make-full-rib) (set! lU2e8a@rp (lU2a0f@lU28ea@make-record-printer 'stx (lambda (lU3270@x lU3271@p lU3272@wr) (begin (display '"#<syntax " lU3271@p) (write (lU2edc@stx->datum lU3270@x) lU3271@p) (let ((lU3276@expr (lU2e96@stx-expr lU3270@x))) (if (lU2a06@lU28d8@annotation? lU3276@expr) (let ((lU3278@src (lU2a07@lU28da@annotation-source lU3276@expr))) (if (pair? lU3278@src) (begin (display '" [" lU3271@p) (display (cdr lU3278@src) lU3271@p) (display '" of " lU3271@p) (display (car lU3278@src) lU3271@p) (display '"]" lU3271@p)) (void))) (void))) (display '">" lU3271@p))))) (set! lU4b34@lU2e8a@rp lU2e8a@rp) (set! lU2e94@stx? (lambda (lU327a@x) (and (simple-struct? lU327a@x) (eq? (simple-struct-name lU327a@x) 'stx)))) (set! lU4b35@lU2e94@stx? lU2e94@stx?) (set! lU2e96@stx-expr (lambda (lU327c@x) (simple-struct-ref lU327c@x '0))) (set! lU4b36@lU2e96@stx-expr lU2e96@stx-expr) (set! lU2e98@set-stx-expr! (lambda (lU327e@x lU327f@val) (simple-struct-set! lU327e@x '0 lU327f@val))) (set! lU4b37@lU2e98@set-stx-expr! lU2e98@set-stx-expr!) (set! lU2e9a@stx-mark* (lambda (lU3282@x) (simple-struct-ref lU3282@x '1))) (set! lU4b38@lU2e9a@stx-mark* lU2e9a@stx-mark*) (set! lU2e9c@set-stx-mark*! (lambda (lU3284@x lU3285@val) (simple-struct-set! lU3284@x '1 lU3285@val))) (set! lU4b39@lU2e9c@set-stx-mark*! lU2e9c@set-stx-mark*!) (set! lU2e9e@stx-subst* (lambda (lU3288@x) (simple-struct-ref lU3288@x '2))) (set! lU4b3a@lU2e9e@stx-subst* lU2e9e@stx-subst*) (set! lU2ea0@set-stx-subst*! (lambda (lU328a@x lU328b@val) (simple-struct-set! lU328a@x '2 lU328b@val))) (set! lU4b3b@lU2ea0@set-stx-subst*! lU2ea0@set-stx-subst*!) (set! lU2ea2@stx-ae* (lambda (lU328e@x) (simple-struct-ref lU328e@x '3))) (set! lU4b3c@lU2ea2@stx-ae* lU2ea2@stx-ae*) (set! lU2ea4@set-stx-ae*! (lambda (lU3290@x lU3291@val) (simple-struct-set! lU3290@x '3 lU3291@val))) (set! lU4b3d@lU2ea4@set-stx-ae*! lU2ea4@set-stx-ae*!) (set! lU2ea6@dummy '3) (set! lU4b3e@lU2ea6@dummy lU2ea6@dummy) (set! lU2ea8@datum->stx (lambda (lU3294@id lU3295@datum) (make-simple-struct 'stx '5 (list lU3295@datum (lU2e9a@stx-mark* lU3294@id) (lU2e9e@stx-subst* lU3294@id) (lU2ea2@stx-ae* lU3294@id))))) (set! lU4b3f@lU2ea8@datum->stx lU2ea8@datum->stx) (set! lU2eaa@gen-mark (lambda () (string '#\m))) (set! lU4b40@lU2eaa@gen-mark lU2eaa@gen-mark) (set! lU2eac@anti-mark '#f) (set! lU4b41@lU2eac@anti-mark lU2eac@anti-mark) (set! lU2eae@anti-mark? not) (set! lU4b42@lU2eae@anti-mark? lU2eae@anti-mark?) (set! lU2eb0@mkstx (lambda (lU3298@e lU3299@m* lU329a@s* lU329b@ae*) (if (and (lU2e94@stx? lU3298@e) (not (lU2e4e@top-marked? lU3299@m*))) (call-with-values (lambda () (join-wraps lU3299@m* lU329a@s* lU329b@ae* lU3298@e)) (lambda (lU32a6@lU32a1 lU32a7@lU32a3 lU32a8@lU32a5) (let ((lU32ac@ae* lU32a8@lU32a5) (lU32ad@s* lU32a7@lU32a3) (lU32ae@m* lU32a6@lU32a1)) (make-simple-struct 'stx '5 (list (lU2e96@stx-expr lU3298@e) lU32ae@m* lU32ad@s* lU32ac@ae*))))) (make-simple-struct 'stx '5 (list lU3298@e lU3299@m* lU329a@s* lU329b@ae*))))) (set! lU4b43@lU2eb0@mkstx lU2eb0@mkstx) (set! lU2eb2@add-mark (lambda (lU32b2@m lU32b3@e lU32b4@ae) (lU2eb0@mkstx lU32b3@e (list lU32b2@m) '(shift) (list lU32b4@ae)))) (set! lU4b44@lU2eb2@add-mark lU2eb2@add-mark) (set! lU2eb4@add-subst (lambda (lU32b8@subst lU32b9@e) (lU2eb0@mkstx lU32b9@e '() (list lU32b8@subst) '()))) (set! lU4b45@lU2eb4@add-subst lU2eb4@add-subst) (set! lU2eb6@syntax-kind? (lambda (lU32bc@x lU32bd@p?) (if (lU2e94@stx? lU32bc@x) (lU2eb6@syntax-kind? (lU2e96@stx-expr lU32bc@x) lU32bd@p?) (if (lU2a06@lU28d8@annotation? lU32bc@x) (lU2eb6@syntax-kind? (lU2a08@lU28dc@annotation-expression lU32bc@x) lU32bd@p?) (lU32bd@p? lU32bc@x))))) (set! lU4b46@lU2eb6@syntax-kind? lU2eb6@syntax-kind?) (set! lU2eb8@syntax-vector->list (lambda (lU32c0@x) (if (lU2e94@stx? lU32c0@x) (let ((lU32c2@ls (lU2eb8@syntax-vector->list (lU2e96@stx-expr lU32c0@x))) (lU32c3@m* (lU2e9a@stx-mark* lU32c0@x)) (lU32c4@s* (lU2e9e@stx-subst* lU32c0@x)) (lU32c5@ae* (lU2ea2@stx-ae* lU32c0@x))) (map (lambda (lU32ca@x) (lU2eb0@mkstx lU32ca@x lU32c3@m* lU32c4@s* lU32c5@ae*)) lU32c2@ls)) (if (lU2a06@lU28d8@annotation? lU32c0@x) (lU2eb8@syntax-vector->list (lU2a08@lU28dc@annotation-expression lU32c0@x)) (if (vector? lU32c0@x) (vector->list lU32c0@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" lU32c0@x)))))) (set! lU4b47@lU2eb8@syntax-vector->list lU2eb8@syntax-vector->list) (set! lU2eba@syntax-pair? (lambda (lU32cc@x) (lU2eb6@syntax-kind? lU32cc@x pair?))) (set! lU4b48@lU2eba@syntax-pair? lU2eba@syntax-pair?) (set! lU2ebc@syntax-vector? (lambda (lU32ce@x) (lU2eb6@syntax-kind? lU32ce@x vector?))) (set! lU4b49@lU2ebc@syntax-vector? lU2ebc@syntax-vector?) (set! lU2ebe@syntax-null? (lambda (lU32d0@x) (lU2eb6@syntax-kind? lU32d0@x null?))) (set! lU4b4a@lU2ebe@syntax-null? lU2ebe@syntax-null?) (set! lU2ec0@syntax-list? (lambda (lU32d2@x) (or (lU2ebe@syntax-null? lU32d2@x) (and (lU2eba@syntax-pair? lU32d2@x) (lU2ec0@syntax-list? (lU2ec4@syntax-cdr lU32d2@x)))))) (set! lU4b4b@lU2ec0@syntax-list? lU2ec0@syntax-list?) (set! lU2ec2@syntax-car (lambda (lU32d4@x) (if (lU2e94@stx? lU32d4@x) (lU2eb0@mkstx (lU2ec2@syntax-car (lU2e96@stx-expr lU32d4@x)) (lU2e9a@stx-mark* lU32d4@x) (lU2e9e@stx-subst* lU32d4@x) (lU2ea2@stx-ae* lU32d4@x)) (if (lU2a06@lU28d8@annotation? lU32d4@x) (lU2ec2@syntax-car (lU2a08@lU28dc@annotation-expression lU32d4@x)) (if (pair? lU32d4@x) (car lU32d4@x) (assertion-violation 'syntax-car '"BUG: not a pair" lU32d4@x)))))) (set! lU4b4c@lU2ec2@syntax-car lU2ec2@syntax-car) (set! lU2ec4@syntax-cdr (lambda (lU32d6@x) (if (lU2e94@stx? lU32d6@x) (lU2eb0@mkstx (lU2ec4@syntax-cdr (lU2e96@stx-expr lU32d6@x)) (lU2e9a@stx-mark* lU32d6@x) (lU2e9e@stx-subst* lU32d6@x) (lU2ea2@stx-ae* lU32d6@x)) (if (lU2a06@lU28d8@annotation? lU32d6@x) (lU2ec4@syntax-cdr (lU2a08@lU28dc@annotation-expression lU32d6@x)) (if (pair? lU32d6@x) (cdr lU32d6@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" lU32d6@x)))))) (set! lU4b4d@lU2ec4@syntax-cdr lU2ec4@syntax-cdr) (set! lU2ec6@syntax->list (lambda (lU32d8@x) (if (lU2eba@syntax-pair? lU32d8@x) (cons (lU2ec2@syntax-car lU32d8@x) (lU2ec6@syntax->list (lU2ec4@syntax-cdr lU32d8@x))) (if (lU2ebe@syntax-null? lU32d8@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" lU32d8@x))))) (set! lU4b4e@lU2ec6@syntax->list lU2ec6@syntax->list) (set! lU2ec8@id? (lambda (lU32da@x) (and (lU2e94@stx? lU32da@x) (symbol? (lU2e96@stx-expr lU32da@x))))) (set! lU4b4f@lU2ec8@id? lU2ec8@id?) (set! lU2eca@id->sym (lambda (lU32dc@x) (lU2e96@stx-expr lU32dc@x))) (set! lU4b50@lU2eca@id->sym lU2eca@id->sym) (set! lU2ecc@bound-id=? (lambda (lU32de@x lU32df@y) (and (eq? (lU2eca@id->sym lU32de@x) (lU2eca@id->sym lU32df@y)) (same-marks? (lU2e9a@stx-mark* lU32de@x) (lU2e9a@stx-mark* lU32df@y))))) (set! lU4b51@lU2ecc@bound-id=? lU2ecc@bound-id=?) (set! lU2ece@free-id=? (lambda (lU32e2@i lU32e3@j) (let ((lU32e6@t0 (id->real-label lU32e2@i)) (lU32e7@t1 (id->real-label lU32e3@j))) (if (or lU32e6@t0 lU32e7@t1) (eq? lU32e6@t0 lU32e7@t1) (eq? (lU2eca@id->sym lU32e2@i) (lU2eca@id->sym lU32e3@j)))))) (set! lU4b52@lU2ece@free-id=? lU2ece@free-id=?) (set! lU2ed0@valid-bound-ids? (lambda (lU32ea@id*) (and (for-all lU2ec8@id? lU32ea@id*) (lU2ed2@distinct-bound-ids? lU32ea@id*)))) (set! lU4b53@lU2ed0@valid-bound-ids? lU2ed0@valid-bound-ids?) (set! lU2ed2@distinct-bound-ids? (lambda (lU32ec@id*) (or (null? lU32ec@id*) (and (not (lU2ed4@bound-id-member? (car lU32ec@id*) (cdr lU32ec@id*))) (lU2ed2@distinct-bound-ids? (cdr lU32ec@id*)))))) (set! lU4b54@lU2ed2@distinct-bound-ids? lU2ed2@distinct-bound-ids?) (set! lU2ed4@bound-id-member? (lambda (lU32ee@id lU32ef@id*) (and (pair? lU32ef@id*) (or (lU2ecc@bound-id=? lU32ee@id (car lU32ef@id*)) (lU2ed4@bound-id-member? lU32ee@id (cdr lU32ef@id*)))))) (set! lU4b55@lU2ed4@bound-id-member? lU2ed4@bound-id-member?) (set! lU2ed6@self-evaluating? (lambda (lU32f2@x) (or (number? lU32f2@x) (string? lU32f2@x) (char? lU32f2@x) (boolean? lU32f2@x) (regexp? lU32f2@x) (bytevector? lU32f2@x)))) (set! lU4b56@lU2ed6@self-evaluating? lU2ed6@self-evaluating?) (set! lU2ed8@strip-annotations (lambda (lU32f4@x) (if (pair? lU32f4@x) (cons (lU2ed8@strip-annotations (car lU32f4@x)) (lU2ed8@strip-annotations (cdr lU32f4@x))) (if (vector? lU32f4@x) (vector-map lU2ed8@strip-annotations lU32f4@x) (if (lU2a06@lU28d8@annotation? lU32f4@x) (lU2a05@lU28d6@annotation-stripped lU32f4@x) lU32f4@x))))) (set! lU4b57@lU2ed8@strip-annotations lU2ed8@strip-annotations) (set! lU2eda@strip (lambda (lU32f6@x lU32f7@m*) (if (lU2e4e@top-marked? lU32f7@m*) (if (or (lU2a06@lU28d8@annotation? lU32f6@x) (and (pair? lU32f6@x) (lU2a06@lU28d8@annotation? (car lU32f6@x))) (and (vector? lU32f6@x) (> (vector-length lU32f6@x) '0) (lU2a06@lU28d8@annotation? (vector-ref lU32f6@x '0)))) (lU2ed8@strip-annotations lU32f6@x) lU32f6@x) (let lU32fc@f ((lU32fa@x lU32f6@x)) (if (lU2e94@stx? lU32fa@x) (lU2eda@strip (lU2e96@stx-expr lU32fa@x) (lU2e9a@stx-mark* lU32fa@x)) (if (lU2a06@lU28d8@annotation? lU32fa@x) (lU2a05@lU28d6@annotation-stripped lU32fa@x) (if (pair? lU32fa@x) (let ((lU32fe@a (lU32fc@f (car lU32fa@x))) (lU32ff@d (lU32fc@f (cdr lU32fa@x)))) (if (and (eq? lU32fe@a (car lU32fa@x)) (eq? lU32ff@d (cdr lU32fa@x))) lU32fa@x (cons lU32fe@a lU32ff@d))) (if (vector? lU32fa@x) (let ((lU3302@old (vector->list lU32fa@x))) (let ((lU3304@new (map lU32fc@f lU3302@old))) (if (for-all eq? lU3302@old lU3304@new) lU32fa@x (list->vector lU3304@new)))) lU32fa@x)))))))) (set! lU4b58@lU2eda@strip lU2eda@strip) (set! lU2edc@stx->datum (lambda (lU3306@x) (lU2eda@strip lU3306@x '()))) (set! lU4b59@lU2edc@stx->datum lU2edc@stx->datum) (set! lU2ede@id->label (lambda (lU3308@id) (or (id->real-label lU3308@id) (let ((lU330a@t (lU31bf@top-level-context))) (if lU330a@t ((lambda (lU330c@env) (let ((lU330e@rib (lU316f@interaction-env-rib lU330c@env))) (call-with-values (lambda () (lU2e58@gen-define-label+loc lU3308@id lU330e@rib)) (lambda (lU3314@lU3311 lU3315@lU3313) (let ((lU3318@loc_ lU3315@lU3313) (lU3319@lab lU3314@lU3311)) (begin (lU2e7e@extend-rib! lU330e@rib lU3308@id lU3319@lab) lU3319@lab)))))) lU330a@t) '#f))))) (set! lU4b5a@lU2ede@id->label lU2ede@id->label) (set! lU2ee0@label->binding (lambda (lU331c@x lU331d@r) (let ((lU3320@t (lU2cdd@lU2b2a@imported-label->binding lU331c@x))) (if lU3320@t ((lambda (lU3322@b) (if (and (pair? lU3322@b) (eq? (car lU3322@b) '$core-rtd)) (cons '$rtd (map lU3085@bless (cdr lU3322@b))) (if (and (pair? lU3322@b) (eq? (car lU3322@b) 'global-rtd)) (let ((lU3324@lib (cadr lU3322@b)) (lU3325@loc (cddr lU3322@b))) (cons '$rtd (symbol-value lU3325@loc))) lU3322@b))) lU3320@t) (let ((lU3328@t (assq lU331c@x lU331d@r))) (if lU3328@t (cdr lU3328@t) (let ((lU332a@t (lU31bf@top-level-context))) (if lU332a@t ((lambda (lU332c@env) (let ((lU332e@t (assq lU331c@x (lU3177@interaction-env-locs lU332c@env)))) (if lU332e@t ((lambda (lU3330@p) (cons* 'lexical (cdr lU3330@p) '#f)) lU332e@t) '(displaced-lexical . #f)))) lU332a@t) '(displaced-lexical . #f))))))))) (set! lU4b5b@lU2ee0@label->binding lU2ee0@label->binding) (set! lU2ee2@make-binding cons) (set! lU4b5c@lU2ee2@make-binding lU2ee2@make-binding) (set! lU2ee4@binding-type car) (set! lU4b5d@lU2ee4@binding-type lU2ee4@binding-type) (set! lU2ee6@binding-value cdr) (set! lU4b5e@lU2ee6@binding-value lU2ee6@binding-value) (set! lU2ee8@raise-unbound-error (lambda (lU3332@id) (lU31ad@syntax-violation* '#f '"unbound identifier" lU3332@id (lU4f54@lU4d9a@make-undefined-violation)))) (set! lU4b5f@lU2ee8@raise-unbound-error lU2ee8@raise-unbound-error) (set! lU2eea@syntax-type (lambda (lU3334@e lU3335@r) (if (lU2ec8@id? lU3334@e) (let ((lU3338@id lU3334@e)) (let ((lU333a@label (lU2ede@id->label lU3338@id))) (let ((lU333c@b (lU2ee0@label->binding lU333a@label lU3335@r))) (let ((lU333e@type (lU2ee4@binding-type lU333c@b))) (begin (if (not lU333a@label) (lU2ee8@raise-unbound-error lU3338@id) (void)) (let ((lU3340@t lU333e@type)) (if (memv lU3340@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values lU333e@type (lU2ee6@binding-value lU333c@b) lU3338@id) (values 'other '#f '#f)))))))) (if (lU2eba@syntax-pair? lU3334@e) (let ((lU3342@id (lU2ec2@syntax-car lU3334@e))) (if (lU2ec8@id? lU3342@id) (let ((lU3344@label (lU2ede@id->label lU3342@id))) (let ((lU3346@b (lU2ee0@label->binding lU3344@label lU3335@r))) (let ((lU3348@type (lU2ee4@binding-type lU3346@b))) (begin (if (not lU3344@label) (lU2ee8@raise-unbound-error lU3342@id) (void)) (let ((lU334a@t lU3348@type)) (if (memv lU334a@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values lU3348@type (lU2ee6@binding-value lU3346@b) lU3342@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((lU334c@d (lU2edc@stx->datum lU3334@e))) (if (lU2ed6@self-evaluating? lU334c@d) (values 'constant lU334c@d '#f) (values 'other '#f '#f))))))) (set! lU4b60@lU2eea@syntax-type lU2eea@syntax-type) (set! lU2ef8@sanitize-binding (lambda (lU334e@x lU334f@src) (if (procedure? lU334e@x) (cons* 'local-macro lU334e@x lU334f@src) (if (and (pair? lU334e@x) (eq? (car lU334e@x) 'macro!) (procedure? (cdr lU334e@x))) (cons* 'local-macro! (cdr lU334e@x) lU334f@src) (if (and (pair? lU334e@x) (eq? (car lU334e@x) '$rtd)) lU334e@x (assertion-violation 'expand '"invalid transformer" lU334e@x)))))) (set! lU4b61@lU2ef8@sanitize-binding lU2ef8@sanitize-binding) (set! lU2efa@make-variable-transformer (lambda (lU3352@x) (if (procedure? lU3352@x) (cons 'macro! lU3352@x) (assertion-violation 'make-variable-transformer '"not a procedure" lU3352@x)))) (set! lU4b62@lU2efa@make-variable-transformer lU2efa@make-variable-transformer) (set! lU2efc@variable-transformer? (lambda (lU3354@x) (and (pair? lU3354@x) (eq? (car lU3354@x) 'macro!) (procedure? (cdr lU3354@x))))) (set! lU4b63@lU2efc@variable-transformer? lU2efc@variable-transformer?) (set! lU2efe@variable-transformer-procedure (lambda (lU3356@x) (if (lU2efc@variable-transformer? lU3356@x) (cdr lU3356@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" lU3356@x)))) (set! lU4b64@lU2efe@variable-transformer-procedure lU2efe@variable-transformer-procedure) (set! lU2f00@make-eval-transformer (lambda (lU3358@x) (lU2ef8@sanitize-binding (eval-core (lU2a68@lU2a20@expanded->core lU3358@x)) lU3358@x))) (set! lU4b65@lU2f00@make-eval-transformer lU2f00@make-eval-transformer) (set! lU3051@parse-define (lambda (lU335a@x) (let ((lU335c@t lU335a@x)) (let ((lU335e@ls/false (lU30cf@syntax-dispatch lU335c@t '(_ (any . any) any . each-any)))) (if (and lU335e@ls/false (apply (lambda (lU3360@id lU3361@fmls lU3362@b lU3363@b*) (lU2ec8@id? lU3360@id)) lU335e@ls/false)) (apply (lambda (lU3368@id lU3369@fmls lU336a@b lU336b@b*) (begin (lU30f5@verify-formals lU3369@fmls lU335a@x) (values lU3368@id (cons 'defun (cons lU3369@fmls (cons lU336a@b lU336b@b*)))))) lU335e@ls/false) (let ((lU3370@t lU335c@t)) (let ((lU3372@ls/false (lU30cf@syntax-dispatch lU3370@t '(_ any any)))) (if (and lU3372@ls/false (apply (lambda (lU3374@id lU3375@val) (lU2ec8@id? lU3374@id)) lU3372@ls/false)) (apply (lambda (lU3378@id lU3379@val) (values lU3378@id (cons 'expr lU3379@val))) lU3372@ls/false) (let ((lU337c@t lU3370@t)) (let ((lU337e@ls/false (lU30cf@syntax-dispatch lU337c@t '(_ any)))) (if (and lU337e@ls/false (apply (lambda (lU3380@id) (lU2ec8@id? lU3380@id)) lU337e@ls/false)) (apply (lambda (lU3382@id) (values lU3382@id (cons 'expr (lU3085@bless '(void))))) lU337e@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU337c@t)))))))))))) (set! lU4b66@lU3051@parse-define lU3051@parse-define) (set! lU3053@parse-define-syntax (lambda (lU3384@x) (let ((lU3386@t lU3384@x)) (let ((lU3388@ls/false (lU30cf@syntax-dispatch lU3386@t '(_ any any)))) (if (and lU3388@ls/false (apply (lambda (lU338a@id lU338b@val) (lU2ec8@id? lU338a@id)) lU3388@ls/false)) (apply (lambda (lU338e@id lU338f@val) (values lU338e@id lU338f@val)) lU3388@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3386@t)))))) (set! lU4b67@lU3053@parse-define-syntax lU3053@parse-define-syntax) (set! lU3055@scheme-stx-hashtable (make-eq-hashtable)) (set! lU4b68@lU3055@scheme-stx-hashtable lU3055@scheme-stx-hashtable) (set! lU3057@scheme-stx (lambda (lU3392@sym) (or (hashtable-ref lU3055@scheme-stx-hashtable lU3392@sym '#f) (let ((lU3394@subst (lU2cb9@lU2ae2@library-subst (lU2cd7@lU2b1e@find-library-by-name '(psyntax system $all))))) (let ((lU3396@stx (make-simple-struct 'stx '5 (list lU3392@sym lU2e4c@top-mark* '() '())))) (let ((lU3398@stx (let ((lU339a@t (assq lU3392@sym lU3394@subst))) (if lU339a@t ((lambda (lU339c@x) (let ((lU339e@name (car lU339c@x)) (lU339f@label (cdr lU339c@x))) (lU2eb4@add-subst (make-simple-struct 'rib '6 (list (list lU339e@name) (list lU2e4c@top-mark*) (list lU339f@label) '#f '#f)) lU3396@stx))) lU339a@t) lU3396@stx)))) (begin (hashtable-set! lU3055@scheme-stx-hashtable lU3392@sym lU3398@stx) lU3398@stx))))))) (set! lU4b69@lU3057@scheme-stx lU3057@scheme-stx) (set! lU3059@lexical-var car) (set! lU4b6a@lU3059@lexical-var lU3059@lexical-var) (set! lU305b@lexical-mutable? cdr) (set! lU4b6b@lU305b@lexical-mutable? lU305b@lexical-mutable?) (set! lU305d@set-lexical-mutable! set-cdr!) (set! lU4b6c@lU305d@set-lexical-mutable! lU305d@set-lexical-mutable!) (set! lU305f@add-lexical (lambda (lU33a2@lab lU33a3@lex lU33a4@r) (cons (cons* lU33a2@lab 'lexical lU33a3@lex '#f) lU33a4@r))) (set! lU4b6d@lU305f@add-lexical lU305f@add-lexical) (set! lU3061@add-lexicals (lambda (lU33a8@lab* lU33a9@lex* lU33aa@r) (if (null? lU33a8@lab*) lU33aa@r (lU3061@add-lexicals (cdr lU33a8@lab*) (cdr lU33a9@lex*) (lU305f@add-lexical (car lU33a8@lab*) (car lU33a9@lex*) lU33aa@r))))) (set! lU4b6e@lU3061@add-lexicals lU3061@add-lexicals) (set! lU3063@letrec-helper (lambda (lU33ae@e lU33af@r lU33b0@mr lU33b1@build) (let ((lU33b6@t lU33ae@e)) (let ((lU33b8@ls/false (lU30cf@syntax-dispatch lU33b6@t '(_ #(each (any any)) any . each-any)))) (if lU33b8@ls/false (apply (lambda (lU33ba@lhs* lU33bb@rhs* lU33bc@b lU33bd@b*) (if (not (lU2ed0@valid-bound-ids? lU33ba@lhs*)) (lU3089@invalid-fmls-error lU33ae@e lU33ba@lhs*) (let ((lU33c2@lex* (map lU2e50@gen-lexical lU33ba@lhs*)) (lU33c3@lab* (map lU2e54@gen-label lU33ba@lhs*))) (let ((lU33c6@rib (lU2e88@make-full-rib lU33ba@lhs* lU33c3@lab*)) (lU33c7@r (lU3061@add-lexicals lU33c3@lab* lU33c2@lex* lU33af@r))) (let ((lU33ca@body (lU3107@chi-internal (lU2eb4@add-subst lU33c6@rib (cons lU33bc@b lU33bd@b*)) lU33c7@r lU33b0@mr)) (lU33cb@rhs* (lU30ed@chi-expr* (map (lambda (lU33ce@x) (lU2eb4@add-subst lU33c6@rib lU33ce@x)) lU33bb@rhs*) lU33c7@r lU33b0@mr))) (lU33b1@build '#f lU33c2@lex* lU33cb@rhs* lU33ca@body)))))) lU33b8@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU33b6@t)))))) (set! lU4b6f@lU3063@letrec-helper lU3063@letrec-helper) (set! lU3065@let-transformer (lambda (lU33d0@e lU33d1@r lU33d2@mr) (let ((lU33d6@t lU33d0@e)) (let ((lU33d8@ls/false (lU30cf@syntax-dispatch lU33d6@t '(_ #(each (any any)) any . each-any)))) (if lU33d8@ls/false (apply (lambda (lU33da@lhs* lU33db@rhs* lU33dc@b lU33dd@b*) (if (not (lU2ed0@valid-bound-ids? lU33da@lhs*)) (lU3089@invalid-fmls-error lU33d0@e lU33da@lhs*) (let ((lU33e2@lex* (map lU2e50@gen-lexical lU33da@lhs*)) (lU33e3@lab* (map lU2e54@gen-label lU33da@lhs*)) (lU33e4@rhs* (lU30ed@chi-expr* lU33db@rhs* lU33d1@r lU33d2@mr))) (let ((lU33e8@rib (lU2e88@make-full-rib lU33da@lhs* lU33e3@lab*)) (lU33e9@r (lU3061@add-lexicals lU33e3@lab* lU33e2@lex* lU33d1@r))) (let ((lU33ec@body (lU3107@chi-internal (lU2eb4@add-subst lU33e8@rib (cons lU33dc@b lU33dd@b*)) lU33e9@r lU33d2@mr))) (lU2e30@lU2d8d@build-let '#f lU33e2@lex* lU33e4@rhs* lU33ec@body)))))) lU33d8@ls/false) (let ((lU33ee@t lU33d6@t)) (let ((lU33f0@ls/false (lU30cf@syntax-dispatch lU33ee@t '(_ any #(each (any any)) any . each-any)))) (if lU33f0@ls/false (apply (lambda (lU33f2@loop lU33f3@lhs* lU33f4@rhs* lU33f5@b lU33f6@b*) (if (not (lU2ed0@valid-bound-ids? lU33f3@lhs*)) (lU3089@invalid-fmls-error lU33d0@e lU33f3@lhs*) (let ((lU33fc@lex* (map lU2e50@gen-lexical lU33f3@lhs*)) (lU33fd@lab* (map lU2e54@gen-label lU33f3@lhs*)) (lU33fe@rhs* (lU30ed@chi-expr* lU33f4@rhs* lU33d1@r lU33d2@mr)) (lU33ff@loop-lex (lU2e50@gen-lexical lU33f2@loop)) (lU3400@loop-lab (lU2e54@gen-label lU33f2@loop))) (let ((lU3406@loop-rib (lU2e88@make-full-rib (list lU33f2@loop) (list lU3400@loop-lab))) (lU3407@rib (lU2e88@make-full-rib lU33f3@lhs* lU33fd@lab*)) (lU3408@r (lU3061@add-lexicals (cons lU3400@loop-lab lU33fd@lab*) (cons lU33ff@loop-lex lU33fc@lex*) lU33d1@r))) (let ((lU340c@body (lU3107@chi-internal (lU2eb4@add-subst lU3406@loop-rib (lU2eb4@add-subst lU3407@rib (cons lU33f5@b lU33f6@b*))) lU3408@r lU33d2@mr))) (lU2e31@lU2d8f@build-named-let '#f lU33ff@loop-lex lU33fc@lex* lU33fe@rhs* lU340c@body)))))) lU33f0@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU33ee@t))))))))) (set! lU4b70@lU3065@let-transformer lU3065@let-transformer) (set! lU3067@letrec-transformer (lambda (lU340e@e lU340f@r lU3410@mr) (lU3063@letrec-helper lU340e@e lU340f@r lU3410@mr lU2e2f@lU2d8b@build-letrec))) (set! lU4b71@lU3067@letrec-transformer lU3067@letrec-transformer) (set! lU3069@letrec*-transformer (lambda (lU3414@e lU3415@r lU3416@mr) (lU3063@letrec-helper lU3414@e lU3415@r lU3416@mr lU2e32@lU2d91@build-letrec*))) (set! lU4b72@lU3069@letrec*-transformer lU3069@letrec*-transformer) (set! lU306b@fluid-let-syntax-transformer (lambda (lU341a@e lU341b@r lU341c@mr) (let ((lU3421@lookup '#f)) (begin (set! lU3421@lookup (lambda (lU3434@x) (or (lU2ede@id->label lU3434@x) (lU31af@syntax-violation '#f '"unbound identifier" lU341a@e lU3434@x)))) (let ((lU3422@t lU341a@e)) (let ((lU3424@ls/false (lU30cf@syntax-dispatch lU3422@t '(_ #(each (any any)) any . each-any)))) (if lU3424@ls/false (apply (lambda (lU3426@lhs* lU3427@rhs* lU3428@b lU3429@b*) (if (not (lU2ed0@valid-bound-ids? lU3426@lhs*)) (lU3089@invalid-fmls-error lU341a@e lU3426@lhs*) (let ((lU342e@lab* (map lU3421@lookup lU3426@lhs*)) (lU342f@rhs* (map (lambda (lU3432@x) (lU2f00@make-eval-transformer (lU3129@expand-transformer lU3432@x lU341c@mr))) lU3427@rhs*))) (lU3107@chi-internal (cons lU3428@b lU3429@b*) (append (map cons lU342e@lab* lU342f@rhs*) lU341b@r) (append (map cons lU342e@lab* lU342f@rhs*) lU341c@mr))))) lU3424@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3422@t)))))))) (set! lU4b73@lU306b@fluid-let-syntax-transformer lU306b@fluid-let-syntax-transformer) (set! lU306d@type-descriptor-transformer (lambda (lU3436@e lU3437@r lU3438@mr) (let ((lU343c@t lU3436@e)) (let ((lU343e@ls/false (lU30cf@syntax-dispatch lU343c@t '(_ any)))) (if (and lU343e@ls/false (apply (lambda (lU3440@id) (lU2ec8@id? lU3440@id)) lU343e@ls/false)) (apply (lambda (lU3442@id) (let ((lU3444@lab (lU2ede@id->label lU3442@id))) (let ((lU3446@b (lU2ee0@label->binding lU3444@lab lU3437@r))) (let ((lU3448@type (lU2ee4@binding-type lU3446@b))) (begin (if (not lU3444@lab) (lU2ee8@raise-unbound-error lU3442@id) (void)) (if (not (and (eq? lU3448@type '$rtd) (not (list? (lU2ee6@binding-value lU3446@b))))) (lU31af@syntax-violation '#f '"not a record type" lU3436@e) (void)) (list 'quote (lU2ee6@binding-value lU3446@b))))))) lU343e@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU343c@t)))))) (set! lU4b74@lU306d@type-descriptor-transformer lU306d@type-descriptor-transformer) (set! lU306f@record-type-descriptor-transformer (lambda (lU344a@e lU344b@r lU344c@mr) (let ((lU3450@t lU344a@e)) (let ((lU3452@ls/false (lU30cf@syntax-dispatch lU3450@t '(_ any)))) (if (and lU3452@ls/false (apply (lambda (lU3454@id) (lU2ec8@id? lU3454@id)) lU3452@ls/false)) (apply (lambda (lU3456@id) (let ((lU3458@lab (lU2ede@id->label lU3456@id))) (let ((lU345a@b (lU2ee0@label->binding lU3458@lab lU344b@r))) (let ((lU345c@type (lU2ee4@binding-type lU345a@b))) (begin (if (not lU3458@lab) (lU2ee8@raise-unbound-error lU3456@id) (void)) (if (not (and (eq? lU345c@type '$rtd) (list? (lU2ee6@binding-value lU345a@b)))) (lU31af@syntax-violation '#f '"not a record type" lU344a@e) (void)) (lU30f1@chi-expr (car (lU2ee6@binding-value lU345a@b)) lU344b@r lU344c@mr)))))) lU3452@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3450@t)))))) (set! lU4b75@lU306f@record-type-descriptor-transformer lU306f@record-type-descriptor-transformer) (set! lU3071@record-constructor-descriptor-transformer (lambda (lU345e@e lU345f@r lU3460@mr) (let ((lU3464@t lU345e@e)) (let ((lU3466@ls/false (lU30cf@syntax-dispatch lU3464@t '(_ any)))) (if (and lU3466@ls/false (apply (lambda (lU3468@id) (lU2ec8@id? lU3468@id)) lU3466@ls/false)) (apply (lambda (lU346a@id) (let ((lU346c@lab (lU2ede@id->label lU346a@id))) (let ((lU346e@b (lU2ee0@label->binding lU346c@lab lU345f@r))) (let ((lU3470@type (lU2ee4@binding-type lU346e@b))) (begin (if (not lU346c@lab) (lU2ee8@raise-unbound-error lU346a@id) (void)) (if (not (and (eq? lU3470@type '$rtd) (list? (lU2ee6@binding-value lU346e@b)))) (lU31af@syntax-violation '#f '"invalid type" lU345e@e) (void)) (lU30f1@chi-expr (cadr (lU2ee6@binding-value lU346e@b)) lU345f@r lU3460@mr)))))) lU3466@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3464@t)))))) (set! lU4b76@lU3071@record-constructor-descriptor-transformer lU3071@record-constructor-descriptor-transformer) (set! lU3073@when-macro (lambda (lU3472@e) (let ((lU3474@t lU3472@e)) (let ((lU3476@ls/false (lU30cf@syntax-dispatch lU3474@t '(_ any any . each-any)))) (if lU3476@ls/false (apply (lambda (lU3478@test lU3479@e lU347a@e*) (lU3085@bless (list 'if lU3478@test (cons 'begin (cons lU3479@e lU347a@e*))))) lU3476@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3474@t)))))) (set! lU4b77@lU3073@when-macro lU3073@when-macro) (set! lU3075@unless-macro (lambda (lU347e@e) (let ((lU3480@t lU347e@e)) (let ((lU3482@ls/false (lU30cf@syntax-dispatch lU3480@t '(_ any any . each-any)))) (if lU3482@ls/false (apply (lambda (lU3484@test lU3485@e lU3486@e*) (lU3085@bless (list 'if (list 'not lU3484@test) (cons 'begin (cons lU3485@e lU3486@e*))))) lU3482@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3480@t)))))) (set! lU4b78@lU3075@unless-macro lU3075@unless-macro) (set! lU3077@if-transformer (lambda (lU348a@e lU348b@r lU348c@mr) (let ((lU3490@t lU348a@e)) (let ((lU3492@ls/false (lU30cf@syntax-dispatch lU3490@t '(_ any any any)))) (if lU3492@ls/false (apply (lambda (lU3494@e0 lU3495@e1 lU3496@e2) (list 'if (lU30f1@chi-expr lU3494@e0 lU348b@r lU348c@mr) (lU30f1@chi-expr lU3495@e1 lU348b@r lU348c@mr) (lU30f1@chi-expr lU3496@e2 lU348b@r lU348c@mr))) lU3492@ls/false) (let ((lU349a@t lU3490@t)) (let ((lU349c@ls/false (lU30cf@syntax-dispatch lU349a@t '(_ any any)))) (if lU349c@ls/false (apply (lambda (lU349e@e0 lU349f@e1) (list 'if (lU30f1@chi-expr lU349e@e0 lU348b@r lU348c@mr) (lU30f1@chi-expr lU349f@e1 lU348b@r lU348c@mr) (lU2e2e@lU2d89@build-void))) lU349c@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU349a@t))))))))) (set! lU4b79@lU3077@if-transformer lU3077@if-transformer) (set! lU3079@and-transformer (lambda (lU34a2@e lU34a3@r lU34a4@mr) (let ((lU34a8@t lU34a2@e)) (let ((lU34aa@ls/false (lU30cf@syntax-dispatch lU34a8@t '(_ . each-any)))) (if lU34aa@ls/false (apply (lambda (lU34ac@e*) (cons 'and (lU30ed@chi-expr* lU34ac@e* lU34a3@r lU34a4@mr))) lU34aa@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU34a8@t)))))) (set! lU4b7a@lU3079@and-transformer lU3079@and-transformer) (set! lU307b@or-transformer (lambda (lU34ae@e lU34af@r lU34b0@mr) (let ((lU34b4@t lU34ae@e)) (let ((lU34b6@ls/false (lU30cf@syntax-dispatch lU34b4@t '(_ . each-any)))) (if lU34b6@ls/false (apply (lambda (lU34b8@e*) (cons 'or (lU30ed@chi-expr* lU34b8@e* lU34af@r lU34b0@mr))) lU34b6@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU34b4@t)))))) (set! lU4b7b@lU307b@or-transformer lU307b@or-transformer) (set! lU307d@case-macro (lambda (lU34ba@e) (let ((lU34bd@build-last '#f) (lU34bf@build-one '#f)) (begin (set! lU34bd@build-last (lambda (lU34e4@cls) (let ((lU34e6@t lU34e4@cls)) (let ((lU34e8@ls/false (lU30cf@syntax-dispatch lU34e6@t '(#(scheme-id else) any . each-any)))) (if lU34e8@ls/false (apply (lambda (lU34ea@e lU34eb@e*) (cons 'begin (cons lU34ea@e lU34eb@e*))) lU34e8@ls/false) (let ((lU34ee@t lU34e6@t)) (let ((lU34f0@ls/false (lU30cf@syntax-dispatch lU34ee@t '_))) (if lU34f0@ls/false (apply (lambda () (lU34bf@build-one lU34e4@cls '(if #f #f))) lU34f0@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU34ee@t))))))))) (set! lU34bf@build-one (lambda (lU34d6@cls lU34d7@k) (let ((lU34da@t lU34d6@cls)) (let ((lU34dc@ls/false (lU30cf@syntax-dispatch lU34da@t '(each-any any . each-any)))) (if lU34dc@ls/false (apply (lambda (lU34de@d* lU34df@e lU34e0@e*) (list 'if (list 'memv 't (list 'quote lU34de@d*)) (cons 'begin (cons lU34df@e lU34e0@e*)) lU34d7@k)) lU34dc@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU34da@t)))))) (let ((lU34c0@t lU34ba@e)) (let ((lU34c2@ls/false (lU30cf@syntax-dispatch lU34c0@t '(_ any)))) (if lU34c2@ls/false (apply (lambda (lU34c4@expr) (lU3085@bless (cons 'let (cons (list (list 't lU34c4@expr)) '((if #f #f)))))) lU34c2@ls/false) (let ((lU34c6@t lU34c0@t)) (let ((lU34c8@ls/false (lU30cf@syntax-dispatch lU34c6@t '(_ any any . each-any)))) (if lU34c8@ls/false (apply (lambda (lU34ca@expr lU34cb@cls lU34cc@cls*) (lU3085@bless (list 'let (list (list 't lU34ca@expr)) (let lU34d4@f ((lU34d0@cls lU34cb@cls) (lU34d1@cls* lU34cc@cls*)) (if (null? lU34d1@cls*) (lU34bd@build-last lU34d0@cls) (lU34bf@build-one lU34d0@cls (lU34d4@f (car lU34d1@cls*) (cdr lU34d1@cls*)))))))) lU34c8@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU34c6@t))))))))))) (set! lU4b7c@lU307d@case-macro lU307d@case-macro) (set! lU307f@quote-transformer (lambda (lU34f2@e lU34f3@r lU34f4@mr) (let ((lU34f8@t lU34f2@e)) (let ((lU34fa@ls/false (lU30cf@syntax-dispatch lU34f8@t '(_ any)))) (if lU34fa@ls/false (apply (lambda (lU34fc@datum) (list 'quote (lU2edc@stx->datum lU34fc@datum))) lU34fa@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU34f8@t)))))) (set! lU4b7d@lU307f@quote-transformer lU307f@quote-transformer) (set! lU3081@case-lambda-transformer (lambda (lU34fe@e lU34ff@r lU3500@mr) (let ((lU3504@t lU34fe@e)) (let ((lU3506@ls/false (lU30cf@syntax-dispatch lU3504@t '(_ . #(each (any any . each-any)))))) (if lU3506@ls/false (apply (lambda (lU3508@fmls* lU3509@b* lU350a@b**) (call-with-values (lambda () (lU30f9@chi-lambda-clause* lU34fe@e lU3508@fmls* (map cons lU3509@b* lU350a@b**) lU34ff@r lU3500@mr)) (lambda (lU3512@lU350f lU3513@lU3511) (let ((lU3516@body* lU3513@lU3511) (lU3517@fmls* lU3512@lU350f)) (lU2e2c@lU2d59@build-case-lambda '#f lU3517@fmls* lU3516@body*))))) lU3506@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3504@t)))))) (set! lU4b7e@lU3081@case-lambda-transformer lU3081@case-lambda-transformer) (set! lU3083@lambda-transformer (lambda (lU351a@e lU351b@r lU351c@mr) (let ((lU3520@t lU351a@e)) (let ((lU3522@ls/false (lU30cf@syntax-dispatch lU3520@t '(_ any any . each-any)))) (if lU3522@ls/false (apply (lambda (lU3524@fmls lU3525@b lU3526@b*) (call-with-values (lambda () (lU30f7@chi-lambda-clause lU351a@e lU3524@fmls (cons lU3525@b lU3526@b*) lU351b@r lU351c@mr)) (lambda (lU352e@lU352b lU352f@lU352d) (let ((lU3532@body lU352f@lU352d) (lU3533@fmls lU352e@lU352b)) (lU2e2b@lU2d57@build-lambda '#f lU3533@fmls lU3532@body))))) lU3522@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3520@t)))))) (set! lU4b7f@lU3083@lambda-transformer lU3083@lambda-transformer) (set! lU3085@bless (lambda (lU3536@x) (lU2eb0@mkstx (let lU353a@f ((lU3538@x lU3536@x)) (if (lU2e94@stx? lU3538@x) lU3538@x (if (pair? lU3538@x) (cons (lU353a@f (car lU3538@x)) (lU353a@f (cdr lU3538@x))) (if (symbol? lU3538@x) (lU3057@scheme-stx lU3538@x) (if (vector? lU3538@x) (vector-map lU353a@f lU3538@x) lU3538@x))))) '() '() '()))) (set! lU4b80@lU3085@bless lU3085@bless) (set! lU3087@with-syntax-macro (lambda (lU353c@e) (let ((lU353e@t lU353c@e)) (let ((lU3540@ls/false (lU30cf@syntax-dispatch lU353e@t '(_ #(each (any any)) any . each-any)))) (if lU3540@ls/false (apply (lambda (lU3542@pat* lU3543@expr* lU3544@b lU3545@b*) (let ((lU354a@idn* (let lU354e@f ((lU354c@pat* lU3542@pat*)) (if (null? lU354c@pat*) '() (call-with-values (lambda () (lU30cd@convert-pattern (car lU354c@pat*) '())) (lambda (lU3554@lU3551 lU3555@lU3553) (let ((lU3558@idn* lU3555@lU3553) (lU3559@pat lU3554@lU3551)) (append lU3558@idn* (lU354e@f (cdr lU354c@pat*)))))))))) (begin (lU30f5@verify-formals (map car lU354a@idn*) lU353c@e) (let ((lU355c@t* (lU319d@generate-temporaries lU3543@expr*))) (lU3085@bless (list 'let (map list lU355c@t* lU3543@expr*) (let lU3562@f ((lU355e@pat* lU3542@pat*) (lU355f@t* lU355c@t*)) (if (null? lU355e@pat*) (cons 'begin (cons '#f (cons lU3544@b lU3545@b*))) (list 'syntax-case (car lU355f@t*) '() (list (car lU355e@pat*) (lU3562@f (cdr lU355e@pat*) (cdr lU355f@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car lU355e@pat*)) (car lU355f@t*)))))))))))) lU3540@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU353e@t)))))) (set! lU4b81@lU3087@with-syntax-macro lU3087@with-syntax-macro) (set! lU3089@invalid-fmls-error (lambda (lU3564@stx lU3565@fmls) (let ((lU3568@t lU3565@fmls)) (let ((lU356a@ls/false (lU30cf@syntax-dispatch lU3568@t '#(each+ any () any)))) (if lU356a@ls/false (apply (lambda (lU356c@id* lU356d@last) (let lU3572@f ((lU3570@id* (if (lU2ec8@id? lU356d@last) (cons lU356d@last lU356c@id*) (if (lU2ebe@syntax-null? lU356d@last) lU356c@id* (lU31af@syntax-violation '#f '"not an identifier" lU3564@stx lU356d@last))))) (if (null? lU3570@id*) (values) (if (not (lU2ec8@id? (car lU3570@id*))) (lU31af@syntax-violation '#f '"not an identifier" lU3564@stx (car lU3570@id*)) (begin (lU3572@f (cdr lU3570@id*)) (if (lU2ed4@bound-id-member? (car lU3570@id*) (cdr lU3570@id*)) (lU31af@syntax-violation '#f '"duplicate binding" lU3564@stx (car lU3570@id*)) (void))))))) lU356a@ls/false) (let ((lU3574@t lU3568@t)) (let ((lU3576@ls/false (lU30cf@syntax-dispatch lU3574@t '_))) (if lU3576@ls/false (apply (lambda () (lU31af@syntax-violation '#f '"malformed binding form" lU3564@stx lU3565@fmls)) lU3576@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3574@t))))))))) (set! lU4b82@lU3089@invalid-fmls-error lU3089@invalid-fmls-error) (set! lU308b@let-macro (lambda (lU3578@stx) (let ((lU357a@t lU3578@stx)) (let ((lU357c@ls/false (lU30cf@syntax-dispatch lU357a@t '(_ #(each (any any)) any . each-any)))) (if lU357c@ls/false (apply (lambda (lU357e@lhs* lU357f@rhs* lU3580@b lU3581@b*) (if (lU2ed0@valid-bound-ids? lU357e@lhs*) (lU3085@bless (cons (cons 'lambda (cons lU357e@lhs* (cons lU3580@b lU3581@b*))) lU357f@rhs*)) (lU3089@invalid-fmls-error lU3578@stx lU357e@lhs*))) lU357c@ls/false) (let ((lU3586@t lU357a@t)) (let ((lU3588@ls/false (lU30cf@syntax-dispatch lU3586@t '(_ any #(each (any any)) any . each-any)))) (if (and lU3588@ls/false (apply (lambda (lU358a@f lU358b@lhs* lU358c@rhs* lU358d@b lU358e@b*) (lU2ec8@id? lU358a@f)) lU3588@ls/false)) (apply (lambda (lU3594@f lU3595@lhs* lU3596@rhs* lU3597@b lU3598@b*) (if (lU2ed0@valid-bound-ids? lU3595@lhs*) (lU3085@bless (cons (list 'letrec (list (list lU3594@f (cons 'lambda (cons lU3595@lhs* (cons lU3597@b lU3598@b*))))) lU3594@f) lU3596@rhs*)) (lU3089@invalid-fmls-error lU3578@stx lU3595@lhs*))) lU3588@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3586@t))))))))) (set! lU4b83@lU308b@let-macro lU308b@let-macro) (set! lU308d@let-values-macro (lambda (lU359e@stx) (let ((lU35a1@rename '#f) (lU35a3@rename* '#f)) (begin (set! lU35a1@rename (lambda (lU3606@x lU3607@old* lU3608@new*) (begin (if (not (lU2ec8@id? lU3606@x)) (lU31af@syntax-violation '#f '"not an indentifier" lU359e@stx lU3606@x) (void)) (if (lU2ed4@bound-id-member? lU3606@x lU3607@old*) (lU31af@syntax-violation '#f '"duplicate binding" lU359e@stx lU3606@x) (void)) (let ((lU360c@y (gensym (lU31b5@syntax->datum lU3606@x)))) (values lU360c@y (cons lU3606@x lU3607@old*) (cons lU360c@y lU3608@new*)))))) (set! lU35a3@rename* (lambda (lU35f4@x* lU35f5@old* lU35f6@new*) (if (null? lU35f4@x*) (values '() lU35f5@old* lU35f6@new*) (call-with-values (lambda () (lU35a1@rename (car lU35f4@x*) lU35f5@old* lU35f6@new*)) (lambda (lU35fa@x lU35fb@old* lU35fc@new*) (call-with-values (lambda () (lU35a3@rename* (cdr lU35f4@x*) lU35fb@old* lU35fc@new*)) (lambda (lU3600@x* lU3601@old* lU3602@new*) (values (cons lU35fa@x lU3600@x*) lU3601@old* lU3602@new*)))))))) (let ((lU35a4@t lU359e@stx)) (let ((lU35a6@ls/false (lU30cf@syntax-dispatch lU35a4@t '(_ () any . each-any)))) (if lU35a6@ls/false (apply (lambda (lU35a8@b lU35a9@b*) (cons* (lU3085@bless 'let) '() lU35a8@b lU35a9@b*)) lU35a6@ls/false) (let ((lU35ac@t lU35a4@t)) (let ((lU35ae@ls/false (lU30cf@syntax-dispatch lU35ac@t '(_ #(each (any any)) any . each-any)))) (if lU35ae@ls/false (apply (lambda (lU35b0@lhs* lU35b1@rhs* lU35b2@b lU35b3@b*) (lU3085@bless (let lU35c0@f ((lU35b8@lhs* lU35b0@lhs*) (lU35b9@rhs* lU35b1@rhs*) (lU35ba@old* '()) (lU35bb@new* '())) (if (null? lU35b8@lhs*) (cons 'let (cons (map list lU35ba@old* lU35bb@new*) (cons lU35b2@b lU35b3@b*))) (let ((lU35c2@t (car lU35b8@lhs*))) (let ((lU35c4@ls/false (lU30cf@syntax-dispatch lU35c2@t 'each-any))) (if lU35c4@ls/false (apply (lambda (lU35c6@x*) (call-with-values (lambda () (lU35a3@rename* lU35c6@x* lU35ba@old* lU35bb@new*)) (lambda (lU35ce@lU35c9 lU35cf@lU35cb lU35d0@lU35cd) (let ((lU35d4@new* lU35d0@lU35cd) (lU35d5@old* lU35cf@lU35cb) (lU35d6@y* lU35ce@lU35c9)) (list 'call-with-values (list 'lambda '() (car lU35b9@rhs*)) (list 'lambda lU35d6@y* (lU35c0@f (cdr lU35b8@lhs*) (cdr lU35b9@rhs*) lU35d5@old* lU35d4@new*))))))) lU35c4@ls/false) (let ((lU35da@t lU35c2@t)) (let ((lU35dc@ls/false (lU30cf@syntax-dispatch lU35da@t '#(each+ any () any)))) (if lU35dc@ls/false (apply (lambda (lU35de@x* lU35df@x) (call-with-values (lambda () (lU35a1@rename lU35df@x lU35ba@old* lU35bb@new*)) (lambda (lU35e2@y lU35e3@old* lU35e4@new*) (call-with-values (lambda () (lU35a3@rename* lU35de@x* lU35e3@old* lU35e4@new*)) (lambda (lU35e8@y* lU35e9@old* lU35ea@new*) (list 'call-with-values (list 'lambda '() (car lU35b9@rhs*)) (list 'lambda (append lU35e8@y* lU35e2@y) (lU35c0@f (cdr lU35b8@lhs*) (cdr lU35b9@rhs*) lU35e9@old* lU35ea@new*)))))))) lU35dc@ls/false) (let ((lU35ee@t lU35da@t)) (let ((lU35f0@ls/false (lU30cf@syntax-dispatch lU35ee@t 'any))) (if lU35f0@ls/false (apply (lambda (lU35f2@others) (lU31af@syntax-violation '#f '"malformed bindings" lU359e@stx lU35f2@others)) lU35f0@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU35ee@t)))))))))))))) lU35ae@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU35ac@t))))))))))) (set! lU4b84@lU308d@let-values-macro lU308d@let-values-macro) (set! lU308f@let*-values-macro (lambda (lU360e@stx) (let ((lU3611@check '#f)) (begin (set! lU3611@check (lambda (lU3640@x*) (if (not (null? lU3640@x*)) (let ((lU3642@x (car lU3640@x*))) (begin (if (not (lU2ec8@id? lU3642@x)) (lU31af@syntax-violation '#f '"not an identifier" lU360e@stx lU3642@x) (void)) (lU3611@check (cdr lU3640@x*)) (if (lU2ed4@bound-id-member? lU3642@x (cdr lU3640@x*)) (lU31af@syntax-violation '#f '"duplicate identifier" lU360e@stx lU3642@x) (void)))) (void)))) (let ((lU3612@t lU360e@stx)) (let ((lU3614@ls/false (lU30cf@syntax-dispatch lU3612@t '(_ () any . each-any)))) (if lU3614@ls/false (apply (lambda (lU3616@b lU3617@b*) (cons* (lU3085@bless 'let) '() lU3616@b lU3617@b*)) lU3614@ls/false) (let ((lU361a@t lU3612@t)) (let ((lU361c@ls/false (lU30cf@syntax-dispatch lU361a@t '(_ #(each (any any)) any . each-any)))) (if lU361c@ls/false (apply (lambda (lU361e@lhs* lU361f@rhs* lU3620@b lU3621@b*) (lU3085@bless (let lU362a@f ((lU3626@lhs* lU361e@lhs*) (lU3627@rhs* lU361f@rhs*)) (if (null? lU3626@lhs*) (cons 'begin (cons lU3620@b lU3621@b*)) (let ((lU362c@t (car lU3626@lhs*))) (let ((lU362e@ls/false (lU30cf@syntax-dispatch lU362c@t 'each-any))) (if lU362e@ls/false (apply (lambda (lU3630@x*) (begin (lU3611@check lU3630@x*) (list 'call-with-values (list 'lambda '() (car lU3627@rhs*)) (list 'lambda lU3630@x* (lU362a@f (cdr lU3626@lhs*) (cdr lU3627@rhs*)))))) lU362e@ls/false) (let ((lU3632@t lU362c@t)) (let ((lU3634@ls/false (lU30cf@syntax-dispatch lU3632@t '#(each+ any () any)))) (if lU3634@ls/false (apply (lambda (lU3636@x* lU3637@x) (begin (lU3611@check (cons lU3637@x lU3636@x*)) (list 'call-with-values (list 'lambda '() (car lU3627@rhs*)) (list 'lambda (append lU3636@x* lU3637@x) (lU362a@f (cdr lU3626@lhs*) (cdr lU3627@rhs*)))))) lU3634@ls/false) (let ((lU363a@t lU3632@t)) (let ((lU363c@ls/false (lU30cf@syntax-dispatch lU363a@t 'any))) (if lU363c@ls/false (apply (lambda (lU363e@others) (lU31af@syntax-violation '#f '"malformed bindings" lU360e@stx lU363e@others)) lU363c@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU363a@t)))))))))))))) lU361c@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU361a@t))))))))))) (set! lU4b85@lU308f@let*-values-macro lU308f@let*-values-macro) (set! lU3091@trace-lambda-macro (lambda (lU3644@stx) (let ((lU3646@t lU3644@stx)) (let ((lU3648@ls/false (lU30cf@syntax-dispatch lU3646@t '(_ any each-any any . each-any)))) (if lU3648@ls/false (apply (lambda (lU364a@who lU364b@fmls lU364c@b lU364d@b*) (if (lU2ed0@valid-bound-ids? lU364b@fmls) (lU3085@bless (list 'make-traced-procedure (list 'quote lU364a@who) (cons 'lambda (cons lU364b@fmls (cons lU364c@b lU364d@b*))))) (lU3089@invalid-fmls-error lU3644@stx lU364b@fmls))) lU3648@ls/false) (let ((lU3652@t lU3646@t)) (let ((lU3654@ls/false (lU30cf@syntax-dispatch lU3652@t '(_ any #(each+ any () any) any . each-any)))) (if lU3654@ls/false (apply (lambda (lU3656@who lU3657@fmls lU3658@last lU3659@b lU365a@b*) (if (lU2ed0@valid-bound-ids? (cons lU3658@last lU3657@fmls)) (lU3085@bless (list 'make-traced-procedure (list 'quote lU3656@who) (cons 'lambda (cons (append lU3657@fmls lU3658@last) (cons lU3659@b lU365a@b*))))) (lU3089@invalid-fmls-error lU3644@stx (append lU3657@fmls lU3658@last)))) lU3654@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3652@t))))))))) (set! lU4b86@lU3091@trace-lambda-macro lU3091@trace-lambda-macro) (set! lU3093@trace-define-macro (lambda (lU3660@stx) (let ((lU3662@t lU3660@stx)) (let ((lU3664@ls/false (lU30cf@syntax-dispatch lU3662@t '(_ (any . each-any) any . each-any)))) (if lU3664@ls/false (apply (lambda (lU3666@who lU3667@fmls lU3668@b lU3669@b*) (if (lU2ed0@valid-bound-ids? lU3667@fmls) (lU3085@bless (list 'define lU3666@who (list 'make-traced-procedure (list 'quote lU3666@who) (cons 'lambda (cons lU3667@fmls (cons lU3668@b lU3669@b*)))))) (lU3089@invalid-fmls-error lU3660@stx lU3667@fmls))) lU3664@ls/false) (let ((lU366e@t lU3662@t)) (let ((lU3670@ls/false (lU30cf@syntax-dispatch lU366e@t '(_ (any . #(each+ any () any)) any . each-any)))) (if lU3670@ls/false (apply (lambda (lU3672@who lU3673@fmls lU3674@last lU3675@b lU3676@b*) (if (lU2ed0@valid-bound-ids? (cons lU3674@last lU3673@fmls)) (lU3085@bless (list 'define lU3672@who (list 'make-traced-procedure (list 'quote lU3672@who) (cons 'lambda (cons (append lU3673@fmls lU3674@last) (cons lU3675@b lU3676@b*)))))) (lU3089@invalid-fmls-error lU3660@stx (append lU3673@fmls lU3674@last)))) lU3670@ls/false) (let ((lU367c@t lU366e@t)) (let ((lU367e@ls/false (lU30cf@syntax-dispatch lU367c@t '(_ any any)))) (if lU367e@ls/false (apply (lambda (lU3680@who lU3681@expr) (if (lU2ec8@id? lU3680@who) (lU3085@bless (list 'define lU3680@who (list 'let (list (list 'v lU3681@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote lU3680@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (lU31af@syntax-violation '#f '"invalid name" lU3660@stx))) lU367e@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU367c@t)))))))))))) (set! lU4b87@lU3093@trace-define-macro lU3093@trace-define-macro) (set! lU3095@trace-define-syntax-macro (lambda (lU3684@stx) (let ((lU3686@t lU3684@stx)) (let ((lU3688@ls/false (lU30cf@syntax-dispatch lU3686@t '(_ any any)))) (if lU3688@ls/false (apply (lambda (lU368a@who lU368b@expr) (if (lU2ec8@id? lU368a@who) (lU3085@bless (list 'define-syntax lU368a@who (list 'make-traced-macro (list 'quote lU368a@who) lU368b@expr))) (lU31af@syntax-violation '#f '"invalid name" lU3684@stx))) lU3688@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3686@t)))))) (set! lU4b88@lU3095@trace-define-syntax-macro lU3095@trace-define-syntax-macro) (set! lU3097@trace-let/rec-syntax (lambda (lU368e@who) (lambda (lU3690@stx) (let ((lU3692@t lU3690@stx)) (let ((lU3694@ls/false (lU30cf@syntax-dispatch lU3692@t '(_ #(each (any any)) any . each-any)))) (if lU3694@ls/false (apply (lambda (lU3696@lhs* lU3697@rhs* lU3698@b lU3699@b*) (if (lU2ed0@valid-bound-ids? lU3696@lhs*) (let ((lU369e@rhs* (map (lambda (lU36a0@lhs lU36a1@rhs) (list 'make-traced-macro (list 'quote lU36a0@lhs) lU36a1@rhs)) lU3696@lhs* lU3697@rhs*))) (lU3085@bless (cons lU368e@who (cons (map list lU3696@lhs* lU369e@rhs*) (cons lU3698@b lU3699@b*))))) (lU3089@invalid-fmls-error lU3690@stx lU3696@lhs*))) lU3694@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3692@t))))))) (set! lU4b89@lU3097@trace-let/rec-syntax lU3097@trace-let/rec-syntax) (set! lU3099@trace-let-syntax-macro (lU3097@trace-let/rec-syntax 'let-syntax)) (set! lU4b8a@lU3099@trace-let-syntax-macro lU3099@trace-let-syntax-macro) (set! lU309b@trace-letrec-syntax-macro (lU3097@trace-let/rec-syntax 'letrec-syntax)) (set! lU4b8b@lU309b@trace-letrec-syntax-macro lU309b@trace-letrec-syntax-macro) (set! lU309d@guard-macro (lambda (lU36a4@x) (let ((lU36a7@gen-clauses '#f)) (begin (set! lU36a7@gen-clauses (lambda (lU36be@con lU36bf@outerk lU36c0@clause*) (let ((lU36c5@f '#f) (lU36c7@f* '#f)) (begin (set! lU36c5@f (lambda (lU36fe@x lU36ff@k) (let ((lU3702@t lU36fe@x)) (let ((lU3704@ls/false (lU30cf@syntax-dispatch lU3702@t '(any #(scheme-id =>) any)))) (if lU3704@ls/false (apply (lambda (lU3706@e lU3707@p) (let ((lU370a@t (gensym))) (list 'let (list (list lU370a@t lU3706@e)) (list 'if lU370a@t (list lU3707@p lU370a@t) lU36ff@k)))) lU3704@ls/false) (let ((lU370c@t lU3702@t)) (let ((lU370e@ls/false (lU30cf@syntax-dispatch lU370c@t '(any)))) (if lU370e@ls/false (apply (lambda (lU3710@e) (let ((lU3712@t (gensym))) (list 'let (list (list lU3712@t lU3710@e)) (list 'if lU3712@t lU3712@t lU36ff@k)))) lU370e@ls/false) (let ((lU3714@t lU370c@t)) (let ((lU3716@ls/false (lU30cf@syntax-dispatch lU3714@t '(any any . each-any)))) (if lU3716@ls/false (apply (lambda (lU3718@e lU3719@v lU371a@v*) (list 'if lU3718@e (cons 'begin (cons lU3719@v lU371a@v*)) lU36ff@k)) lU3716@ls/false) (let ((lU371e@t lU3714@t)) (let ((lU3720@ls/false (lU30cf@syntax-dispatch lU371e@t '_))) (if lU3720@ls/false (apply (lambda () (lU31af@syntax-violation '#f '"invalid guard clause" lU36fe@x)) lU3720@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU371e@t))))))))))))))) (set! lU36c7@f* (lambda (lU36d4@x*) (let ((lU36d6@t lU36d4@x*)) (let ((lU36d8@ls/false (lU30cf@syntax-dispatch lU36d6@t '()))) (if lU36d8@ls/false (apply (lambda () (let ((lU36da@g (gensym))) (values (list lU36da@g (list 'lambda '() (list 'raise-continuable lU36be@con))) lU36da@g))) lU36d8@ls/false) (let ((lU36dc@t lU36d6@t)) (let ((lU36de@ls/false (lU30cf@syntax-dispatch lU36dc@t '((#(scheme-id else) any . each-any))))) (if lU36de@ls/false (apply (lambda (lU36e0@e lU36e1@e*) (values (cons 'begin (cons lU36e0@e lU36e1@e*)) '#f)) lU36de@ls/false) (let ((lU36e4@t lU36dc@t)) (let ((lU36e6@ls/false (lU30cf@syntax-dispatch lU36e4@t '(any . any)))) (if lU36e6@ls/false (apply (lambda (lU36e8@cls lU36e9@cls*) (call-with-values (lambda () (lU36c7@f* lU36e9@cls*)) (lambda (lU36f0@lU36ed lU36f1@lU36ef) (let ((lU36f4@g lU36f1@lU36ef) (lU36f5@e lU36f0@lU36ed)) (values (lU36c5@f lU36e8@cls lU36f5@e) lU36f4@g))))) lU36e6@ls/false) (let ((lU36f8@t lU36e4@t)) (let ((lU36fa@ls/false (lU30cf@syntax-dispatch lU36f8@t 'any))) (if lU36fa@ls/false (apply (lambda (lU36fc@others) (lU31af@syntax-violation '#f '"invalid guard clause" lU36fc@others)) lU36fa@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU36f8@t))))))))))))))) (call-with-values (lambda () (lU36c7@f* lU36c0@clause*)) (lambda (lU36cc@lU36c9 lU36cd@lU36cb) (let ((lU36d0@raisek lU36cd@lU36cb) (lU36d1@code lU36cc@lU36c9)) (if lU36d0@raisek (list (list 'call/cc (list 'lambda (list lU36d0@raisek) (list lU36bf@outerk (list 'lambda '() lU36d1@code))))) (list lU36bf@outerk (list 'lambda '() lU36d1@code)))))))))) (let ((lU36a8@t lU36a4@x)) (let ((lU36aa@ls/false (lU30cf@syntax-dispatch lU36a8@t '(_ (any . each-any) any . each-any)))) (if (and lU36aa@ls/false (apply (lambda (lU36ac@con lU36ad@clause* lU36ae@b lU36af@b*) (lU2ec8@id? lU36ac@con)) lU36aa@ls/false)) (apply (lambda (lU36b4@con lU36b5@clause* lU36b6@b lU36b7@b*) (let ((lU36bc@outerk (gensym))) (lU3085@bless (list (list 'call/cc (list 'lambda (list lU36bc@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list lU36b4@con) (lU36a7@gen-clauses lU36b4@con lU36bc@outerk lU36b5@clause*)) (cons 'lambda (cons '() (cons lU36b6@b lU36b7@b*))))))))))) lU36aa@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU36a8@t)))))))) (set! lU4b8c@lU309d@guard-macro lU309d@guard-macro) (set! lU309f@define-enumeration-macro (lambda (lU3722@stx) (let ((lU3725@set? '#f) (lU3727@remove-dups '#f)) (begin (set! lU3725@set? (lambda (lU373e@x) (or (null? lU373e@x) (and (not (memq (car lU373e@x) (cdr lU373e@x))) (lU3725@set? (cdr lU373e@x)))))) (set! lU3727@remove-dups (lambda (lU373c@ls) (if (null? lU373c@ls) '() (cons (car lU373c@ls) (lU3727@remove-dups (remq (car lU373c@ls) (cdr lU373c@ls))))))) (let ((lU3728@t lU3722@stx)) (let ((lU372a@ls/false (lU30cf@syntax-dispatch lU3728@t '(_ any each-any any)))) (if (and lU372a@ls/false (apply (lambda (lU372c@name lU372d@id* lU372e@maker) (and (lU2ec8@id? lU372c@name) (lU2ec8@id? lU372e@maker) (for-all lU2ec8@id? lU372d@id*))) lU372a@ls/false)) (apply (lambda (lU3732@name lU3733@id* lU3734@maker) (let ((lU3738@name* (lU3727@remove-dups (lU31b5@syntax->datum lU3733@id*))) (lU3739@mk (gensym))) (lU3085@bless (list 'begin (list 'define lU3739@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote lU3738@name*)))) (list 'define-syntax lU3732@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote lU3738@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote lU3732@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax lU3734@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote lU3734@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote lU3738@name*)) (cons 'syntax-violation (cons (list 'quote lU3734@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons lU3739@mk '('(n* ...))))))))))))) lU372a@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3728@t)))))))) (set! lU4b8d@lU309f@define-enumeration-macro lU309f@define-enumeration-macro) (set! lU30a1@time-macro (lambda (lU3740@stx) (let ((lU3742@t lU3740@stx)) (let ((lU3744@ls/false (lU30cf@syntax-dispatch lU3742@t '(_ any)))) (if lU3744@ls/false (apply (lambda (lU3746@expr) (lU3085@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() lU3746@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) lU3744@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3742@t)))))) (set! lU4b8e@lU30a1@time-macro lU30a1@time-macro) (set! lU30a3@delay-macro (lambda (lU3748@stx) (let ((lU374a@t lU3748@stx)) (let ((lU374c@ls/false (lU30cf@syntax-dispatch lU374a@t '(_ any)))) (if lU374c@ls/false (apply (lambda (lU374e@expr) (lU3085@bless (list 'make-promise (list 'lambda '() lU374e@expr)))) lU374c@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU374a@t)))))) (set! lU4b8f@lU30a3@delay-macro lU30a3@delay-macro) (set! lU30a5@assert-macro (lambda (lU3750@stx) (let ((lU3752@t lU3750@stx)) (let ((lU3754@ls/false (lU30cf@syntax-dispatch lU3752@t '(_ any)))) (if lU3754@ls/false (apply (lambda (lU3756@expr) (let ((lU3758@pos (or (lU31a7@expression-position lU3750@stx) (lU31a7@expression-position lU3756@expr)))) (lU3085@bless (list 'let (list (list 'x lU3756@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote lU3756@expr) (list 'quote lU3758@pos))))))) lU3754@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3752@t)))))) (set! lU4b90@lU30a5@assert-macro lU30a5@assert-macro) (set! lU30a7@endianness-macro (lambda (lU375a@stx) (let ((lU375c@t lU375a@stx)) (let ((lU375e@ls/false (lU30cf@syntax-dispatch lU375c@t '(_ any)))) (if lU375e@ls/false (apply (lambda (lU3760@e) (let ((lU3762@t (lU31b5@syntax->datum lU3760@e))) (if (memv lU3762@t '(little)) (lU3085@bless ''little) (if (memv lU3762@t '(big)) (lU3085@bless ''big) (lU31af@syntax-violation '#f '"endianness must be big or little" lU375a@stx))))) lU375e@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU375c@t)))))) (set! lU4b91@lU30a7@endianness-macro lU30a7@endianness-macro) (set! lU30a9@identifier-syntax-macro (lambda (lU3764@stx) (let ((lU3766@t lU3764@stx)) (let ((lU3768@ls/false (lU30cf@syntax-dispatch lU3766@t '(_ any)))) (if lU3768@ls/false (apply (lambda (lU376a@expr) (lU3085@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax lU376a@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax lU376a@expr) '((syntax (e* ...)))))))))) lU3768@ls/false) (let ((lU376c@t lU3766@t)) (let ((lU376e@ls/false (lU30cf@syntax-dispatch lU376c@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and lU376e@ls/false (apply (lambda (lU3770@id1 lU3771@expr1 lU3772@id2 lU3773@expr2 lU3774@expr3) (and (lU2ec8@id? lU3770@id1) (lU2ec8@id? lU3772@id2) (lU2ec8@id? lU3773@expr2))) lU376e@ls/false)) (apply (lambda (lU377a@id1 lU377b@expr1 lU377c@id2 lU377d@expr2 lU377e@expr3) (lU3085@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax lU377b@expr1)) (list (list 'set! 'id lU377d@expr2) (list 'syntax lU377e@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons lU377b@expr1 '(e* ...))))))))) lU376e@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU376c@t))))))))) (set! lU4b92@lU30a9@identifier-syntax-macro lU30a9@identifier-syntax-macro) (set! lU30ab@do-macro (lambda (lU3784@stx) (let ((lU3787@bind '#f)) (begin (set! lU3787@bind (lambda (lU379e@x) (let ((lU37a0@t lU379e@x)) (let ((lU37a2@ls/false (lU30cf@syntax-dispatch lU37a0@t '(any any)))) (if lU37a2@ls/false (apply (lambda (lU37a4@x lU37a5@init) (list lU37a4@x lU37a5@init lU37a4@x)) lU37a2@ls/false) (let ((lU37a8@t lU37a0@t)) (let ((lU37aa@ls/false (lU30cf@syntax-dispatch lU37a8@t '(any any any)))) (if lU37aa@ls/false (apply (lambda (lU37ac@x lU37ad@init lU37ae@step) (list lU37ac@x lU37ad@init lU37ae@step)) lU37aa@ls/false) (let ((lU37b2@t lU37a8@t)) (let ((lU37b4@ls/false (lU30cf@syntax-dispatch lU37b2@t '_))) (if lU37b4@ls/false (apply (lambda () (lU31af@syntax-violation '#f '"invalid binding" lU3784@stx)) lU37b4@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU37b2@t)))))))))))) (let ((lU3788@t lU3784@stx)) (let ((lU378a@ls/false (lU30cf@syntax-dispatch lU3788@t '(_ each-any (any . each-any) . each-any)))) (if lU378a@ls/false (apply (lambda (lU378c@binding* lU378d@test lU378e@expr* lU378f@command*) (let ((lU3794@t (map lU3787@bind lU378c@binding*))) (let ((lU3796@ls/false (lU30cf@syntax-dispatch lU3794@t '#(each (any any any))))) (if lU3796@ls/false (apply (lambda (lU3798@x* lU3799@init* lU379a@step*) (if (lU2ed0@valid-bound-ids? lU3798@x*) (lU3085@bless (list 'letrec (list (list 'loop (list 'lambda lU3798@x* (list 'if lU378d@test (cons 'begin (cons '(if #f #f) lU378e@expr*)) (cons 'begin (append lU378f@command* (list (cons 'loop lU379a@step*)))))))) (cons 'loop lU3799@init*))) (lU31af@syntax-violation '#f '"invalid bindings" lU3784@stx))) lU3796@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3794@t))))) lU378a@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3788@t)))))))) (set! lU4b93@lU30ab@do-macro lU30ab@do-macro) (set! lU30ad@let*-macro (lambda (lU37b6@stx) (let ((lU37b8@t lU37b6@stx)) (let ((lU37ba@ls/false (lU30cf@syntax-dispatch lU37b8@t '(_ #(each (any any)) any . each-any)))) (if (and lU37ba@ls/false (apply (lambda (lU37bc@lhs* lU37bd@rhs* lU37be@b lU37bf@b*) (for-all lU2ec8@id? lU37bc@lhs*)) lU37ba@ls/false)) (apply (lambda (lU37c4@lhs* lU37c5@rhs* lU37c6@b lU37c7@b*) (lU3085@bless (let lU37ce@f ((lU37cc@x* (map list lU37c4@lhs* lU37c5@rhs*))) (if (null? lU37cc@x*) (cons 'let (cons '() (cons lU37c6@b lU37c7@b*))) (list 'let (list (car lU37cc@x*)) (lU37ce@f (cdr lU37cc@x*))))))) lU37ba@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU37b8@t)))))) (set! lU4b94@lU30ad@let*-macro lU30ad@let*-macro) (set! lU30af@or-macro (lambda (lU37d0@stx) (let ((lU37d2@t lU37d0@stx)) (let ((lU37d4@ls/false (lU30cf@syntax-dispatch lU37d2@t '(_)))) (if lU37d4@ls/false (apply (lambda () '#f) lU37d4@ls/false) (let ((lU37d6@t lU37d2@t)) (let ((lU37d8@ls/false (lU30cf@syntax-dispatch lU37d6@t '(_ any . each-any)))) (if lU37d8@ls/false (apply (lambda (lU37da@e lU37db@e*) (lU3085@bless (let lU37e2@f ((lU37de@e lU37da@e) (lU37df@e* lU37db@e*)) (if (null? lU37df@e*) (list 'begin '#f lU37de@e) (list 'let (list (list 't lU37de@e)) (list 'if 't 't (lU37e2@f (car lU37df@e*) (cdr lU37df@e*)))))))) lU37d8@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU37d6@t))))))))) (set! lU4b95@lU30af@or-macro lU30af@or-macro) (set! lU30b1@and-macro (lambda (lU37e4@stx) (let ((lU37e6@t lU37e4@stx)) (let ((lU37e8@ls/false (lU30cf@syntax-dispatch lU37e6@t '(_)))) (if lU37e8@ls/false (apply (lambda () '#t) lU37e8@ls/false) (let ((lU37ea@t lU37e6@t)) (let ((lU37ec@ls/false (lU30cf@syntax-dispatch lU37ea@t '(_ any . each-any)))) (if lU37ec@ls/false (apply (lambda (lU37ee@e lU37ef@e*) (lU3085@bless (let lU37f6@f ((lU37f2@e lU37ee@e) (lU37f3@e* lU37ef@e*)) (if (null? lU37f3@e*) (list 'begin '#f lU37f2@e) (cons 'if (cons lU37f2@e (cons (lU37f6@f (car lU37f3@e*) (cdr lU37f3@e*)) '(#f)))))))) lU37ec@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU37ea@t))))))))) (set! lU4b96@lU30b1@and-macro lU30b1@and-macro) (set! lU30b3@cond-macro (lambda (lU37f8@stx) (let ((lU37fa@t lU37f8@stx)) (let ((lU37fc@ls/false (lU30cf@syntax-dispatch lU37fa@t '(_ any . each-any)))) (if lU37fc@ls/false (apply (lambda (lU37fe@cls lU37ff@cls*) (lU3085@bless (let lU3806@f ((lU3802@cls lU37fe@cls) (lU3803@cls* lU37ff@cls*)) (if (null? lU3803@cls*) (let ((lU3808@t lU3802@cls)) (let ((lU380a@ls/false (lU30cf@syntax-dispatch lU3808@t '(#(scheme-id else) any . each-any)))) (if lU380a@ls/false (apply (lambda (lU380c@e lU380d@e*) (cons 'begin (cons lU380c@e lU380d@e*))) lU380a@ls/false) (let ((lU3810@t lU3808@t)) (let ((lU3812@ls/false (lU30cf@syntax-dispatch lU3810@t '(any #(scheme-id =>) any)))) (if lU3812@ls/false (apply (lambda (lU3814@e lU3815@p) (list 'let (list (list 't lU3814@e)) (list 'if 't (cons lU3815@p '(t))))) lU3812@ls/false) (let ((lU3818@t lU3810@t)) (let ((lU381a@ls/false (lU30cf@syntax-dispatch lU3818@t '(any)))) (if lU381a@ls/false (apply (lambda (lU381c@e) (cons 'or (cons lU381c@e '((if #f #f))))) lU381a@ls/false) (let ((lU381e@t lU3818@t)) (let ((lU3820@ls/false (lU30cf@syntax-dispatch lU381e@t '(any . each-any)))) (if lU3820@ls/false (apply (lambda (lU3822@e lU3823@e*) (list 'if lU3822@e (cons 'begin lU3823@e*))) lU3820@ls/false) (let ((lU3826@t lU381e@t)) (let ((lU3828@ls/false (lU30cf@syntax-dispatch lU3826@t '_))) (if lU3828@ls/false (apply (lambda () (lU31af@syntax-violation '#f '"invalid last clause" lU37f8@stx)) lU3828@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3826@t)))))))))))))))) (let ((lU382a@t lU3802@cls)) (let ((lU382c@ls/false (lU30cf@syntax-dispatch lU382a@t '(#(scheme-id else) any . each-any)))) (if lU382c@ls/false (apply (lambda (lU382e@e lU382f@e*) (lU31af@syntax-violation '#f '"incorrect position of keyword else" lU37f8@stx)) lU382c@ls/false) (let ((lU3832@t lU382a@t)) (let ((lU3834@ls/false (lU30cf@syntax-dispatch lU3832@t '(any #(scheme-id =>) any)))) (if lU3834@ls/false (apply (lambda (lU3836@e lU3837@p) (list 'let (list (list 't lU3836@e)) (list 'if 't (cons lU3837@p '(t)) (lU3806@f (car lU3803@cls*) (cdr lU3803@cls*))))) lU3834@ls/false) (let ((lU383a@t lU3832@t)) (let ((lU383c@ls/false (lU30cf@syntax-dispatch lU383a@t '(any)))) (if lU383c@ls/false (apply (lambda (lU383e@e) (list 'or lU383e@e (lU3806@f (car lU3803@cls*) (cdr lU3803@cls*)))) lU383c@ls/false) (let ((lU3840@t lU383a@t)) (let ((lU3842@ls/false (lU30cf@syntax-dispatch lU3840@t '(any . each-any)))) (if lU3842@ls/false (apply (lambda (lU3844@e lU3845@e*) (list 'if lU3844@e (cons 'begin lU3845@e*) (lU3806@f (car lU3803@cls*) (cdr lU3803@cls*)))) lU3842@ls/false) (let ((lU3848@t lU3840@t)) (let ((lU384a@ls/false (lU30cf@syntax-dispatch lU3848@t '_))) (if lU384a@ls/false (apply (lambda () (lU31af@syntax-violation '#f '"invalid last clause" lU37f8@stx)) lU384a@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3848@t)))))))))))))))))))) lU37fc@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU37fa@t)))))) (set! lU4b97@lU30b3@cond-macro lU30b3@cond-macro) (set! lU30b5@do-include (lambda (lU384c@stx lU384d@id lU384e@filename) (let ((lU3852@filename (lU2edc@stx->datum lU384e@filename))) (begin (if (not (and (string? lU3852@filename) (lU2ec8@id? lU384d@id))) (lU31af@syntax-violation '#f '"invalid syntax" lU384c@stx) (void)) (cons (lU3085@bless 'begin) (with-input-from-file lU3852@filename (lambda () (let lU3856@f ((lU3854@ls '())) (let ((lU3858@x (lU2a04@lU28d4@read-annotated))) (if (eof-object? lU3858@x) (reverse lU3854@ls) (lU3856@f (cons (lU2ea8@datum->stx lU384d@id lU3858@x) lU3854@ls)))))))))))) (set! lU4b98@lU30b5@do-include lU30b5@do-include) (set! lU30b7@include-macro (lambda (lU385a@e) (let ((lU385c@t lU385a@e)) (let ((lU385e@ls/false (lU30cf@syntax-dispatch lU385c@t '(any any)))) (if lU385e@ls/false (apply (lambda (lU3860@id lU3861@filename) (lU30b5@do-include lU385a@e lU3860@id lU3861@filename)) lU385e@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU385c@t)))))) (set! lU4b99@lU30b7@include-macro lU30b7@include-macro) (set! lU30b9@include-into-macro (lambda (lU3864@e) (let ((lU3866@t lU3864@e)) (let ((lU3868@ls/false (lU30cf@syntax-dispatch lU3866@t '(_ any any)))) (if lU3868@ls/false (apply (lambda (lU386a@id lU386b@filename) (lU30b5@do-include lU3864@e lU386a@id lU386b@filename)) lU3868@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3866@t)))))) (set! lU4b9a@lU30b9@include-into-macro lU30b9@include-into-macro) (set! lU30bb@syntax-rules-macro (lambda (lU386e@e) (let ((lU3870@t lU386e@e)) (let ((lU3872@ls/false (lU30cf@syntax-dispatch lU3870@t '(_ each-any . #(each (any any)))))) (if lU3872@ls/false (apply (lambda (lU3874@lits lU3875@pat* lU3876@tmp*) (begin (lU30d5@verify-literals lU3874@lits lU386e@e) (lU3085@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons lU3874@lits (map (lambda (lU387a@pat lU387b@tmp) (let ((lU387e@t lU387a@pat)) (let ((lU3880@ls/false (lU30cf@syntax-dispatch lU387e@t '(_ . any)))) (if lU3880@ls/false (apply (lambda (lU3882@rest) (list (cons 'g lU3882@rest) (list 'syntax lU387b@tmp))) lU3880@ls/false) (let ((lU3884@t lU387e@t)) (let ((lU3886@ls/false (lU30cf@syntax-dispatch lU3884@t '_))) (if lU3886@ls/false (apply (lambda () (lU31af@syntax-violation '#f '"invalid syntax-rules pattern" lU386e@e lU387a@pat)) lU3886@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3884@t)))))))) lU3875@pat* lU3876@tmp*)))))))) lU3872@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3870@t)))))) (set! lU4b9b@lU30bb@syntax-rules-macro lU30bb@syntax-rules-macro) (set! lU30bd@quasiquote-macro (let ((lU3889@datum '#f) (lU38a5@quasicons* '#f) (lU38a7@quasicons '#f) (lU38a9@quasiappend '#f) (lU38ab@quasivector '#f) (lU38ad@vquasi '#f) (lU38af@quasi '#f)) (begin (set! lU3889@datum (lambda (lU398a@x) (list (lU3057@scheme-stx 'quote) (lU2eb0@mkstx lU398a@x '() '() '())))) (set! lU38a5@quasicons* (lambda (lU3982@x lU3983@y) (let lU3988@f ((lU3986@x lU3982@x)) (if (null? lU3986@x) lU3983@y (lU38a7@quasicons (car lU3986@x) (lU3988@f (cdr lU3986@x))))))) (set! lU38a7@quasicons (lambda (lU395c@x lU395d@y) (let ((lU3960@t lU395d@y)) (let ((lU3962@ls/false (lU30cf@syntax-dispatch lU3960@t '(#(scheme-id quote) any)))) (if lU3962@ls/false (apply (lambda (lU3964@dy) (let ((lU3966@t lU395c@x)) (let ((lU3968@ls/false (lU30cf@syntax-dispatch lU3966@t '(#(scheme-id quote) any)))) (if lU3968@ls/false (apply (lambda (lU396a@dx) (list (lU3057@scheme-stx 'quote) (cons lU396a@dx lU3964@dy))) lU3968@ls/false) (let ((lU396c@t lU3966@t)) (let ((lU396e@ls/false (lU30cf@syntax-dispatch lU396c@t '_))) (if lU396e@ls/false (apply (lambda () (let ((lU3970@t lU3964@dy)) (let ((lU3972@ls/false (lU30cf@syntax-dispatch lU3970@t '()))) (if lU3972@ls/false (apply (lambda () (list (lU3057@scheme-stx 'list) lU395c@x)) lU3972@ls/false) (let ((lU3974@t lU3970@t)) (let ((lU3976@ls/false (lU30cf@syntax-dispatch lU3974@t '_))) (if lU3976@ls/false (apply (lambda () (list (lU3057@scheme-stx 'cons) lU395c@x lU395d@y)) lU3976@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3974@t)))))))) lU396e@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU396c@t)))))))) lU3962@ls/false) (let ((lU3978@t lU3960@t)) (let ((lU397a@ls/false (lU30cf@syntax-dispatch lU3978@t '(#(scheme-id list) . each-any)))) (if lU397a@ls/false (apply (lambda (lU397c@stuff) (cons* (lU3057@scheme-stx 'list) lU395c@x lU397c@stuff)) lU397a@ls/false) (let ((lU397e@t lU3978@t)) (let ((lU3980@ls/false (lU30cf@syntax-dispatch lU397e@t '_))) (if lU3980@ls/false (apply (lambda () (list (lU3057@scheme-stx 'cons) lU395c@x lU395d@y)) lU3980@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU397e@t)))))))))))) (set! lU38a9@quasiappend (lambda (lU3942@x lU3943@y) (let ((lU3946@ls (let lU394a@f ((lU3948@x lU3942@x)) (if (null? lU3948@x) (let ((lU394c@t lU3943@y)) (let ((lU394e@ls/false (lU30cf@syntax-dispatch lU394c@t '(#(scheme-id quote) ())))) (if lU394e@ls/false (apply (lambda () '()) lU394e@ls/false) (let ((lU3950@t lU394c@t)) (let ((lU3952@ls/false (lU30cf@syntax-dispatch lU3950@t '_))) (if lU3952@ls/false (apply (lambda () (list lU3943@y)) lU3952@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3950@t))))))) (let ((lU3954@t (car lU3948@x))) (let ((lU3956@ls/false (lU30cf@syntax-dispatch lU3954@t '(#(scheme-id quote) ())))) (if lU3956@ls/false (apply (lambda () (lU394a@f (cdr lU3948@x))) lU3956@ls/false) (let ((lU3958@t lU3954@t)) (let ((lU395a@ls/false (lU30cf@syntax-dispatch lU3958@t '_))) (if lU395a@ls/false (apply (lambda () (cons (car lU3948@x) (lU394a@f (cdr lU3948@x)))) lU395a@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3958@t))))))))))) (if (null? lU3946@ls) (list (lU3057@scheme-stx 'quote) '()) (if (null? (cdr lU3946@ls)) (car lU3946@ls) (cons* (lU3057@scheme-stx 'append) lU3946@ls)))))) (set! lU38ab@quasivector (lambda (lU3910@x) (let ((lU3912@pat-x lU3910@x)) (let ((lU3914@t lU3912@pat-x)) (let ((lU3916@ls/false (lU30cf@syntax-dispatch lU3914@t '(#(scheme-id quote) each-any)))) (if lU3916@ls/false (apply (lambda (lU3918@x*) (list (lU3057@scheme-stx 'quote) (list->vector lU3918@x*))) lU3916@ls/false) (let ((lU391a@t lU3914@t)) (let ((lU391c@ls/false (lU30cf@syntax-dispatch lU391a@t '_))) (if lU391c@ls/false (apply (lambda () (let lU3924@f ((lU391e@x lU3910@x) (lU391f@k (lambda (lU3922@ls) (cons* (lU3057@scheme-stx 'vector) lU3922@ls)))) (let ((lU3926@t lU391e@x)) (let ((lU3928@ls/false (lU30cf@syntax-dispatch lU3926@t '(#(scheme-id quote) each-any)))) (if lU3928@ls/false (apply (lambda (lU392a@x*) (lU391f@k (map (lambda (lU392c@x) (list (lU3057@scheme-stx 'quote) lU392c@x)) lU392a@x*))) lU3928@ls/false) (let ((lU392e@t lU3926@t)) (let ((lU3930@ls/false (lU30cf@syntax-dispatch lU392e@t '(#(scheme-id list) . each-any)))) (if lU3930@ls/false (apply (lambda (lU3932@x*) (lU391f@k lU3932@x*)) lU3930@ls/false) (let ((lU3934@t lU392e@t)) (let ((lU3936@ls/false (lU30cf@syntax-dispatch lU3934@t '(#(scheme-id cons) any any)))) (if lU3936@ls/false (apply (lambda (lU3938@x lU3939@y) (lU3924@f lU3939@y (lambda (lU393c@ls) (lU391f@k (cons lU3938@x lU393c@ls))))) lU3936@ls/false) (let ((lU393e@t lU3934@t)) (let ((lU3940@ls/false (lU30cf@syntax-dispatch lU393e@t '_))) (if lU3940@ls/false (apply (lambda () (list (lU3057@scheme-stx 'list->vector) lU3912@pat-x)) lU3940@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU393e@t))))))))))))))) lU391c@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU391a@t)))))))))) (set! lU38ad@vquasi (lambda (lU38ee@p lU38ef@lev) (let ((lU38f2@t lU38ee@p)) (let ((lU38f4@ls/false (lU30cf@syntax-dispatch lU38f2@t '(any . any)))) (if lU38f4@ls/false (apply (lambda (lU38f6@p lU38f7@q) (let ((lU38fa@t lU38f6@p)) (let ((lU38fc@ls/false (lU30cf@syntax-dispatch lU38fa@t '(#(scheme-id unquote) . each-any)))) (if lU38fc@ls/false (apply (lambda (lU38fe@p) (if (= lU38ef@lev '0) (lU38a5@quasicons* lU38fe@p (lU38ad@vquasi lU38f7@q lU38ef@lev)) (lU38a7@quasicons (lU38a7@quasicons (lU3889@datum 'unquote) (lU38af@quasi lU38fe@p (- lU38ef@lev '1))) (lU38ad@vquasi lU38f7@q lU38ef@lev)))) lU38fc@ls/false) (let ((lU3900@t lU38fa@t)) (let ((lU3902@ls/false (lU30cf@syntax-dispatch lU3900@t '(#(scheme-id unquote-splicing) . each-any)))) (if lU3902@ls/false (apply (lambda (lU3904@p) (if (= lU38ef@lev '0) (lU38a9@quasiappend lU3904@p (lU38ad@vquasi lU38f7@q lU38ef@lev)) (lU38a7@quasicons (lU38a7@quasicons (lU3889@datum 'unquote-splicing) (lU38af@quasi lU3904@p (- lU38ef@lev '1))) (lU38ad@vquasi lU38f7@q lU38ef@lev)))) lU3902@ls/false) (let ((lU3906@t lU3900@t)) (let ((lU3908@ls/false (lU30cf@syntax-dispatch lU3906@t 'any))) (if lU3908@ls/false (apply (lambda (lU390a@p) (lU38a7@quasicons (lU38af@quasi lU390a@p lU38ef@lev) (lU38ad@vquasi lU38f7@q lU38ef@lev))) lU3908@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3906@t))))))))))) lU38f4@ls/false) (let ((lU390c@t lU38f2@t)) (let ((lU390e@ls/false (lU30cf@syntax-dispatch lU390c@t '()))) (if lU390e@ls/false (apply (lambda () (list (lU3057@scheme-stx 'quote) '())) lU390e@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU390c@t))))))))) (set! lU38af@quasi (lambda (lU38b8@p lU38b9@lev) (let ((lU38bc@t lU38b8@p)) (let ((lU38be@ls/false (lU30cf@syntax-dispatch lU38bc@t '(#(scheme-id unquote) any)))) (if lU38be@ls/false (apply (lambda (lU38c0@p) (if (= lU38b9@lev '0) lU38c0@p (lU38a7@quasicons (lU3889@datum 'unquote) (lU38af@quasi (list lU38c0@p) (- lU38b9@lev '1))))) lU38be@ls/false) (let ((lU38c2@t lU38bc@t)) (let ((lU38c4@ls/false (lU30cf@syntax-dispatch lU38c2@t '((#(scheme-id unquote) . each-any) . any)))) (if lU38c4@ls/false (apply (lambda (lU38c6@p lU38c7@q) (if (= lU38b9@lev '0) (lU38a5@quasicons* lU38c6@p (lU38af@quasi lU38c7@q lU38b9@lev)) (lU38a7@quasicons (lU38a7@quasicons (lU3889@datum 'unquote) (lU38af@quasi lU38c6@p (- lU38b9@lev '1))) (lU38af@quasi lU38c7@q lU38b9@lev)))) lU38c4@ls/false) (let ((lU38ca@t lU38c2@t)) (let ((lU38cc@ls/false (lU30cf@syntax-dispatch lU38ca@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if lU38cc@ls/false (apply (lambda (lU38ce@p lU38cf@q) (if (= lU38b9@lev '0) (lU38a9@quasiappend lU38ce@p (lU38af@quasi lU38cf@q lU38b9@lev)) (lU38a7@quasicons (lU38a7@quasicons (lU3889@datum 'unquote-splicing) (lU38af@quasi lU38ce@p (- lU38b9@lev '1))) (lU38af@quasi lU38cf@q lU38b9@lev)))) lU38cc@ls/false) (let ((lU38d2@t lU38ca@t)) (let ((lU38d4@ls/false (lU30cf@syntax-dispatch lU38d2@t '(#(scheme-id quasiquote) any)))) (if lU38d4@ls/false (apply (lambda (lU38d6@p) (lU38a7@quasicons (lU3889@datum 'quasiquote) (lU38af@quasi (list lU38d6@p) (+ lU38b9@lev '1)))) lU38d4@ls/false) (let ((lU38d8@t lU38d2@t)) (let ((lU38da@ls/false (lU30cf@syntax-dispatch lU38d8@t '(any . any)))) (if lU38da@ls/false (apply (lambda (lU38dc@p lU38dd@q) (lU38a7@quasicons (lU38af@quasi lU38dc@p lU38b9@lev) (lU38af@quasi lU38dd@q lU38b9@lev))) lU38da@ls/false) (let ((lU38e0@t lU38d8@t)) (let ((lU38e2@ls/false (lU30cf@syntax-dispatch lU38e0@t '#(vector each-any)))) (if (and lU38e2@ls/false (apply (lambda (lU38e4@x) (not (lU2e94@stx? lU38e4@x))) lU38e2@ls/false)) (apply (lambda (lU38e6@x) (lU38ab@quasivector (lU38ad@vquasi lU38e6@x lU38b9@lev))) lU38e2@ls/false) (let ((lU38e8@t lU38e0@t)) (let ((lU38ea@ls/false (lU30cf@syntax-dispatch lU38e8@t 'any))) (if lU38ea@ls/false (apply (lambda (lU38ec@p) (list (lU3057@scheme-stx 'quote) lU38ec@p)) lU38ea@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU38e8@t)))))))))))))))))))))))) (lambda (lU38b0@x) (let ((lU38b2@t lU38b0@x)) (let ((lU38b4@ls/false (lU30cf@syntax-dispatch lU38b2@t '(_ any)))) (if lU38b4@ls/false (apply (lambda (lU38b6@e) (lU38af@quasi lU38b6@e '0)) lU38b4@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU38b2@t)))))))) (set! lU4b9c@lU30bd@quasiquote-macro lU30bd@quasiquote-macro) (set! lU30bf@quasisyntax-macro (let ((lU398d@quasi '#f)) (begin (set! lU398d@quasi (lambda (lU39a8@p lU39a9@lev) (let ((lU39ac@t lU39a8@p)) (let ((lU39ae@ls/false (lU30cf@syntax-dispatch lU39ac@t '(#(scheme-id unsyntax) any)))) (if lU39ae@ls/false (apply (lambda (lU39b0@p) (if (= lU39a9@lev '0) (let ((lU39b2@g (gensym))) (values (list lU39b2@g) (list lU39b0@p) lU39b2@g)) (call-with-values (lambda () (lU398d@quasi lU39b0@p (- lU39a9@lev '1))) (lambda (lU39ba@lU39b5 lU39bb@lU39b7 lU39bc@lU39b9) (let ((lU39c0@p lU39bc@lU39b9) (lU39c1@rhs* lU39bb@lU39b7) (lU39c2@lhs* lU39ba@lU39b5)) (values lU39c2@lhs* lU39c1@rhs* (list 'unsyntax lU39c0@p))))))) lU39ae@ls/false) (let ((lU39c6@t lU39ac@t)) (let ((lU39c8@ls/false (lU30cf@syntax-dispatch lU39c6@t '#(scheme-id unsyntax)))) (if (and lU39c8@ls/false (apply (lambda () (= lU39a9@lev '0)) lU39c8@ls/false)) (apply (lambda () (lU31af@syntax-violation '#f '"incorrect use of unsyntax" lU39a8@p)) lU39c8@ls/false) (let ((lU39ca@t lU39c6@t)) (let ((lU39cc@ls/false (lU30cf@syntax-dispatch lU39ca@t '((#(scheme-id unsyntax) . each-any) . any)))) (if lU39cc@ls/false (apply (lambda (lU39ce@p* lU39cf@q) (call-with-values (lambda () (lU398d@quasi lU39cf@q lU39a9@lev)) (lambda (lU39d8@lU39d3 lU39d9@lU39d5 lU39da@lU39d7) (let ((lU39de@q lU39da@lU39d7) (lU39df@rhs* lU39d9@lU39d5) (lU39e0@lhs* lU39d8@lU39d3)) (if (= lU39a9@lev '0) (let ((lU39e4@g* (map (lambda (lU39e6@x) (gensym)) lU39ce@p*))) (values (append lU39e4@g* lU39e0@lhs*) (append lU39ce@p* lU39df@rhs*) (append lU39e4@g* lU39de@q))) (call-with-values (lambda () (lU398d@quasi lU39ce@p* (- lU39a9@lev '1))) (lambda (lU39ee@lU39e9 lU39ef@lU39eb lU39f0@lU39ed) (let ((lU39f4@p* lU39f0@lU39ed) (lU39f5@rhs2* lU39ef@lU39eb) (lU39f6@lhs2* lU39ee@lU39e9)) (values (append lU39f6@lhs2* lU39e0@lhs*) (append lU39f5@rhs2* lU39df@rhs*) (cons (cons 'unsyntax lU39f4@p*) lU39de@q)))))))))) lU39cc@ls/false) (let ((lU39fa@t lU39ca@t)) (let ((lU39fc@ls/false (lU30cf@syntax-dispatch lU39fa@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if lU39fc@ls/false (apply (lambda (lU39fe@p* lU39ff@q) (call-with-values (lambda () (lU398d@quasi lU39ff@q lU39a9@lev)) (lambda (lU3a08@lU3a03 lU3a09@lU3a05 lU3a0a@lU3a07) (let ((lU3a0e@q lU3a0a@lU3a07) (lU3a0f@rhs* lU3a09@lU3a05) (lU3a10@lhs* lU3a08@lU3a03)) (if (= lU39a9@lev '0) (let ((lU3a14@g* (map (lambda (lU3a16@x) (gensym)) lU39fe@p*))) (values (append (map (lambda (lU3a18@g) (cons lU3a18@g '(...))) lU3a14@g*) lU3a10@lhs*) (append lU39fe@p* lU3a0f@rhs*) (append (apply append (map (lambda (lU3a1a@g) (cons lU3a1a@g '(...))) lU3a14@g*)) lU3a0e@q))) (call-with-values (lambda () (lU398d@quasi lU39fe@p* (- lU39a9@lev '1))) (lambda (lU3a22@lU3a1d lU3a23@lU3a1f lU3a24@lU3a21) (let ((lU3a28@p* lU3a24@lU3a21) (lU3a29@rhs2* lU3a23@lU3a1f) (lU3a2a@lhs2* lU3a22@lU3a1d)) (values (append lU3a2a@lhs2* lU3a10@lhs*) (append lU3a29@rhs2* lU3a0f@rhs*) (cons (cons 'unsyntax-splicing lU3a28@p*) lU3a0e@q)))))))))) lU39fc@ls/false) (let ((lU3a2e@t lU39fa@t)) (let ((lU3a30@ls/false (lU30cf@syntax-dispatch lU3a2e@t '#(scheme-id unsyntax-splicing)))) (if (and lU3a30@ls/false (apply (lambda () (= lU39a9@lev '0)) lU3a30@ls/false)) (apply (lambda () (lU31af@syntax-violation '#f '"incorrect use of unsyntax-splicing" lU39a8@p)) lU3a30@ls/false) (let ((lU3a32@t lU3a2e@t)) (let ((lU3a34@ls/false (lU30cf@syntax-dispatch lU3a32@t '(#(scheme-id quasisyntax) any)))) (if lU3a34@ls/false (apply (lambda (lU3a36@p) (call-with-values (lambda () (lU398d@quasi lU3a36@p (+ lU39a9@lev '1))) (lambda (lU3a3e@lU3a39 lU3a3f@lU3a3b lU3a40@lU3a3d) (let ((lU3a44@p lU3a40@lU3a3d) (lU3a45@rhs* lU3a3f@lU3a3b) (lU3a46@lhs* lU3a3e@lU3a39)) (values lU3a46@lhs* lU3a45@rhs* (list 'quasisyntax lU3a44@p)))))) lU3a34@ls/false) (let ((lU3a4a@t lU3a32@t)) (let ((lU3a4c@ls/false (lU30cf@syntax-dispatch lU3a4a@t '(any . any)))) (if lU3a4c@ls/false (apply (lambda (lU3a4e@p lU3a4f@q) (call-with-values (lambda () (lU398d@quasi lU3a4e@p lU39a9@lev)) (lambda (lU3a5e@lU3a53 lU3a5f@lU3a55 lU3a60@lU3a57) (call-with-values (lambda () (lU398d@quasi lU3a4f@q lU39a9@lev)) (lambda (lU3a64@lU3a59 lU3a65@lU3a5b lU3a66@lU3a5d) (let ((lU3a6a@q lU3a66@lU3a5d) (lU3a6b@rhs2* lU3a65@lU3a5b) (lU3a6c@lhs2* lU3a64@lU3a59) (lU3a6d@p lU3a60@lU3a57) (lU3a6e@rhs* lU3a5f@lU3a55) (lU3a6f@lhs* lU3a5e@lU3a53)) (values (append lU3a6c@lhs2* lU3a6f@lhs*) (append lU3a6b@rhs2* lU3a6e@rhs*) (cons lU3a6d@p lU3a6a@q)))))))) lU3a4c@ls/false) (let ((lU3a76@t lU3a4a@t)) (let ((lU3a78@ls/false (lU30cf@syntax-dispatch lU3a76@t '#(vector each-any)))) (if lU3a78@ls/false (apply (lambda (lU3a7a@x*) (call-with-values (lambda () (lU398d@quasi lU3a7a@x* lU39a9@lev)) (lambda (lU3a82@lU3a7d lU3a83@lU3a7f lU3a84@lU3a81) (let ((lU3a88@x* lU3a84@lU3a81) (lU3a89@rhs* lU3a83@lU3a7f) (lU3a8a@lhs* lU3a82@lU3a7d)) (values lU3a8a@lhs* lU3a89@rhs* (list->vector lU3a88@x*)))))) lU3a78@ls/false) (let ((lU3a8e@t lU3a76@t)) (let ((lU3a90@ls/false (lU30cf@syntax-dispatch lU3a8e@t '_))) (if lU3a90@ls/false (apply (lambda () (values '() '() lU39a8@p)) lU3a90@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3a8e@t)))))))))))))))))))))))))))))) (lambda (lU398e@x) (let ((lU3990@t lU398e@x)) (let ((lU3992@ls/false (lU30cf@syntax-dispatch lU3990@t '(_ any)))) (if lU3992@ls/false (apply (lambda (lU3994@e) (call-with-values (lambda () (lU398d@quasi lU3994@e '0)) (lambda (lU399c@lU3997 lU399d@lU3999 lU399e@lU399b) (let ((lU39a2@v lU399e@lU399b) (lU39a3@rhs* lU399d@lU3999) (lU39a4@lhs* lU399c@lU3997)) (lU3085@bless (list 'syntax-case (cons 'list lU39a3@rhs*) '() (list lU39a4@lhs* (list 'syntax lU39a2@v)))))))) lU3992@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3990@t)))))))) (set! lU4b9d@lU30bf@quasisyntax-macro lU30bf@quasisyntax-macro) (set! lU30c1@define-struct-macro (lambda (lU3a92@stx) (lU31af@syntax-violation '#f '"define-struct not supported" lU3a92@stx))) (set! lU4b9e@lU30c1@define-struct-macro lU30c1@define-struct-macro) (set! lU30c3@define-record-type-macro (lambda (lU3a94@x) (let ((lU3a97@id '#f) (lU3a99@get-record-name '#f) (lU3a9b@get-record-constructor-name '#f) (lU3a9d@get-record-predicate-name '#f) (lU3a9f@get-clause '#f) (lU3aa1@foo-rtd-code '#f) (lU3aa3@parent-rtd-code '#f) (lU3aa5@parent-rcd-code '#f) (lU3aa7@foo-rcd-code '#f) (lU3aa9@get-protocol-code '#f) (lU3aab@get-fields '#f) (lU3aad@get-mutator-indices '#f) (lU3aaf@get-mutators '#f) (lU3ab1@get-accessors '#f) (lU3ab3@enumerate '#f) (lU3ab5@do-define-record '#f) (lU3ab7@verify-clauses '#f)) (begin (set! lU3a97@id (lambda (lU3c8a@ctxt . lU3c8c@str*) (lU31b3@datum->syntax lU3c8a@ctxt (string->symbol (apply string-append (map (lambda (lU3c8e@x) (if (symbol? lU3c8e@x) (symbol->string lU3c8e@x) (if (string? lU3c8e@x) lU3c8e@x (assertion-violation 'define-record-type '"BUG")))) lU3c8c@str*)))))) (set! lU3a99@get-record-name (lambda (lU3c78@spec) (let ((lU3c7a@t lU3c78@spec)) (let ((lU3c7c@ls/false (lU30cf@syntax-dispatch lU3c7a@t '(any any any)))) (if lU3c7c@ls/false (apply (lambda (lU3c7e@foo lU3c7f@make-foo lU3c80@foo?) lU3c7e@foo) lU3c7c@ls/false) (let ((lU3c84@t lU3c7a@t)) (let ((lU3c86@ls/false (lU30cf@syntax-dispatch lU3c84@t 'any))) (if lU3c86@ls/false (apply (lambda (lU3c88@foo) lU3c88@foo) lU3c86@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3c84@t))))))))) (set! lU3a9b@get-record-constructor-name (lambda (lU3c64@spec) (let ((lU3c66@t lU3c64@spec)) (let ((lU3c68@ls/false (lU30cf@syntax-dispatch lU3c66@t '(any any any)))) (if lU3c68@ls/false (apply (lambda (lU3c6a@foo lU3c6b@make-foo lU3c6c@foo?) lU3c6b@make-foo) lU3c68@ls/false) (let ((lU3c70@t lU3c66@t)) (let ((lU3c72@ls/false (lU30cf@syntax-dispatch lU3c70@t 'any))) (if (and lU3c72@ls/false (apply (lambda (lU3c74@foo) (lU2ec8@id? lU3c74@foo)) lU3c72@ls/false)) (apply (lambda (lU3c76@foo) (lU3a97@id lU3c76@foo '"make-" (lU2edc@stx->datum lU3c76@foo))) lU3c72@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3c70@t))))))))) (set! lU3a9d@get-record-predicate-name (lambda (lU3c50@spec) (let ((lU3c52@t lU3c50@spec)) (let ((lU3c54@ls/false (lU30cf@syntax-dispatch lU3c52@t '(any any any)))) (if lU3c54@ls/false (apply (lambda (lU3c56@foo lU3c57@make-foo lU3c58@foo?) lU3c58@foo?) lU3c54@ls/false) (let ((lU3c5c@t lU3c52@t)) (let ((lU3c5e@ls/false (lU30cf@syntax-dispatch lU3c5c@t 'any))) (if (and lU3c5e@ls/false (apply (lambda (lU3c60@foo) (lU2ec8@id? lU3c60@foo)) lU3c5e@ls/false)) (apply (lambda (lU3c62@foo) (lU3a97@id lU3c62@foo (lU2edc@stx->datum lU3c62@foo) '"?")) lU3c5e@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3c5c@t))))))))) (set! lU3a9f@get-clause (lambda (lU3c3e@id lU3c3f@ls) (let ((lU3c42@t lU3c3f@ls)) (let ((lU3c44@ls/false (lU30cf@syntax-dispatch lU3c42@t '()))) (if lU3c44@ls/false (apply (lambda () '#f) lU3c44@ls/false) (let ((lU3c46@t lU3c42@t)) (let ((lU3c48@ls/false (lU30cf@syntax-dispatch lU3c46@t '((any . any) . any)))) (if lU3c48@ls/false (apply (lambda (lU3c4a@x lU3c4b@rest lU3c4c@ls) (if (lU2ece@free-id=? (lU3085@bless lU3c3e@id) lU3c4a@x) (cons lU3c4a@x lU3c4b@rest) (lU3a9f@get-clause lU3c3e@id lU3c4c@ls))) lU3c48@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3c46@t))))))))) (set! lU3aa1@foo-rtd-code (lambda (lU3bec@name lU3bed@clause* lU3bee@parent-rtd-code) (let ((lU3bf3@convert-field-spec* '#f)) (begin (set! lU3bf3@convert-field-spec* (lambda (lU3c24@ls) (list->vector (map (lambda (lU3c26@x) (let ((lU3c28@t lU3c26@x)) (let ((lU3c2a@ls/false (lU30cf@syntax-dispatch lU3c28@t '(#(scheme-id mutable) any . any)))) (if lU3c2a@ls/false (apply (lambda (lU3c2c@name lU3c2d@rest) (list 'mutable lU3c2c@name)) lU3c2a@ls/false) (let ((lU3c30@t lU3c28@t)) (let ((lU3c32@ls/false (lU30cf@syntax-dispatch lU3c30@t '(#(scheme-id immutable) any . any)))) (if lU3c32@ls/false (apply (lambda (lU3c34@name lU3c35@rest) (list 'immutable lU3c34@name)) lU3c32@ls/false) (let ((lU3c38@t lU3c30@t)) (let ((lU3c3a@ls/false (lU30cf@syntax-dispatch lU3c38@t 'any))) (if lU3c3a@ls/false (apply (lambda (lU3c3c@name) (list 'immutable lU3c3c@name)) lU3c3a@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3c38@t))))))))))) lU3c24@ls)))) (let ((lU3bf4@uid-code (let ((lU3bfc@t (lU3a9f@get-clause 'nongenerative lU3bed@clause*))) (let ((lU3bfe@ls/false (lU30cf@syntax-dispatch lU3bfc@t '(_)))) (if lU3bfe@ls/false (apply (lambda () (list 'quote (gensym))) lU3bfe@ls/false) (let ((lU3c00@t lU3bfc@t)) (let ((lU3c02@ls/false (lU30cf@syntax-dispatch lU3c00@t '(_ any)))) (if lU3c02@ls/false (apply (lambda (lU3c04@uid) (list 'quote lU3c04@uid)) lU3c02@ls/false) (let ((lU3c06@t lU3c00@t)) (let ((lU3c08@ls/false (lU30cf@syntax-dispatch lU3c06@t '_))) (if lU3c08@ls/false (apply (lambda () '#f) lU3c08@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3c06@t))))))))))) (lU3bf5@sealed? (let ((lU3c0a@t (lU3a9f@get-clause 'sealed lU3bed@clause*))) (let ((lU3c0c@ls/false (lU30cf@syntax-dispatch lU3c0a@t '(_ #(atom #t))))) (if lU3c0c@ls/false (apply (lambda () '#t) lU3c0c@ls/false) (let ((lU3c0e@t lU3c0a@t)) (let ((lU3c10@ls/false (lU30cf@syntax-dispatch lU3c0e@t '_))) (if lU3c10@ls/false (apply (lambda () '#f) lU3c10@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3c0e@t)))))))) (lU3bf6@opaque? (let ((lU3c12@t (lU3a9f@get-clause 'opaque lU3bed@clause*))) (let ((lU3c14@ls/false (lU30cf@syntax-dispatch lU3c12@t '(_ #(atom #t))))) (if lU3c14@ls/false (apply (lambda () '#t) lU3c14@ls/false) (let ((lU3c16@t lU3c12@t)) (let ((lU3c18@ls/false (lU30cf@syntax-dispatch lU3c16@t '_))) (if lU3c18@ls/false (apply (lambda () '#f) lU3c18@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3c16@t)))))))) (lU3bf7@fields (let ((lU3c1a@t (lU3a9f@get-clause 'fields lU3bed@clause*))) (let ((lU3c1c@ls/false (lU30cf@syntax-dispatch lU3c1a@t '(_ . each-any)))) (if lU3c1c@ls/false (apply (lambda (lU3c1e@field-spec*) (list 'quote (lU3bf3@convert-field-spec* lU3c1e@field-spec*))) lU3c1c@ls/false) (let ((lU3c20@t lU3c1a@t)) (let ((lU3c22@ls/false (lU30cf@syntax-dispatch lU3c20@t '_))) (if lU3c22@ls/false (apply (lambda () ''#()) lU3c22@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3c20@t))))))))) (lU3085@bless (list 'make-record-type-descriptor (list 'quote lU3bec@name) lU3bee@parent-rtd-code lU3bf4@uid-code lU3bf5@sealed? lU3bf6@opaque? lU3bf7@fields))))))) (set! lU3aa3@parent-rtd-code (lambda (lU3bd4@clause*) (let ((lU3bd6@t (lU3a9f@get-clause 'parent lU3bd4@clause*))) (let ((lU3bd8@ls/false (lU30cf@syntax-dispatch lU3bd6@t '(_ any)))) (if lU3bd8@ls/false (apply (lambda (lU3bda@name) (list 'record-type-descriptor lU3bda@name)) lU3bd8@ls/false) (let ((lU3bdc@t lU3bd6@t)) (let ((lU3bde@ls/false (lU30cf@syntax-dispatch lU3bdc@t '#(atom #f)))) (if lU3bde@ls/false (apply (lambda () (let ((lU3be0@t (lU3a9f@get-clause 'parent-rtd lU3bd4@clause*))) (let ((lU3be2@ls/false (lU30cf@syntax-dispatch lU3be0@t '(_ any any)))) (if lU3be2@ls/false (apply (lambda (lU3be4@rtd lU3be5@rcd) lU3be4@rtd) lU3be2@ls/false) (let ((lU3be8@t lU3be0@t)) (let ((lU3bea@ls/false (lU30cf@syntax-dispatch lU3be8@t '#(atom #f)))) (if lU3bea@ls/false (apply (lambda () '#f) lU3bea@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3be8@t)))))))) lU3bde@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3bdc@t))))))))) (set! lU3aa5@parent-rcd-code (lambda (lU3bbc@clause*) (let ((lU3bbe@t (lU3a9f@get-clause 'parent lU3bbc@clause*))) (let ((lU3bc0@ls/false (lU30cf@syntax-dispatch lU3bbe@t '(_ any)))) (if lU3bc0@ls/false (apply (lambda (lU3bc2@name) (list 'record-constructor-descriptor lU3bc2@name)) lU3bc0@ls/false) (let ((lU3bc4@t lU3bbe@t)) (let ((lU3bc6@ls/false (lU30cf@syntax-dispatch lU3bc4@t '#(atom #f)))) (if lU3bc6@ls/false (apply (lambda () (let ((lU3bc8@t (lU3a9f@get-clause 'parent-rtd lU3bbc@clause*))) (let ((lU3bca@ls/false (lU30cf@syntax-dispatch lU3bc8@t '(_ any any)))) (if lU3bca@ls/false (apply (lambda (lU3bcc@rtd lU3bcd@rcd) lU3bcd@rcd) lU3bca@ls/false) (let ((lU3bd0@t lU3bc8@t)) (let ((lU3bd2@ls/false (lU30cf@syntax-dispatch lU3bd0@t '#(atom #f)))) (if lU3bd2@ls/false (apply (lambda () '#f) lU3bd2@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3bd0@t)))))))) lU3bc6@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3bc4@t))))))))) (set! lU3aa7@foo-rcd-code (lambda (lU3bb4@clause* lU3bb5@foo-rtd lU3bb6@protocol lU3bb7@parent-rcd-code) (list 'make-record-constructor-descriptor lU3bb5@foo-rtd lU3bb7@parent-rcd-code lU3bb6@protocol))) (set! lU3aa9@get-protocol-code (lambda (lU3ba8@clause*) (let ((lU3baa@t (lU3a9f@get-clause 'protocol lU3ba8@clause*))) (let ((lU3bac@ls/false (lU30cf@syntax-dispatch lU3baa@t '(_ any)))) (if lU3bac@ls/false (apply (lambda (lU3bae@expr) lU3bae@expr) lU3bac@ls/false) (let ((lU3bb0@t lU3baa@t)) (let ((lU3bb2@ls/false (lU30cf@syntax-dispatch lU3bb0@t '_))) (if lU3bb2@ls/false (apply (lambda () '#f) lU3bb2@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3bb0@t))))))))) (set! lU3aab@get-fields (lambda (lU3b96@clause*) (let ((lU3b98@t lU3b96@clause*)) (let ((lU3b9a@ls/false (lU30cf@syntax-dispatch lU3b98@t '()))) (if lU3b9a@ls/false (apply (lambda () '()) lU3b9a@ls/false) (let ((lU3b9c@t lU3b98@t)) (let ((lU3b9e@ls/false (lU30cf@syntax-dispatch lU3b9c@t '((#(scheme-id fields) . each-any) . _)))) (if lU3b9e@ls/false (apply (lambda (lU3ba0@f*) lU3ba0@f*) lU3b9e@ls/false) (let ((lU3ba2@t lU3b9c@t)) (let ((lU3ba4@ls/false (lU30cf@syntax-dispatch lU3ba2@t '(_ . any)))) (if lU3ba4@ls/false (apply (lambda (lU3ba6@rest) (lU3aab@get-fields lU3ba6@rest)) lU3ba4@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3ba2@t)))))))))))) (set! lU3aad@get-mutator-indices (lambda (lU3b7e@fields) (let lU3b84@f ((lU3b80@fields lU3b7e@fields) (lU3b81@i '0)) (let ((lU3b86@t lU3b80@fields)) (let ((lU3b88@ls/false (lU30cf@syntax-dispatch lU3b86@t '()))) (if lU3b88@ls/false (apply (lambda () '()) lU3b88@ls/false) (let ((lU3b8a@t lU3b86@t)) (let ((lU3b8c@ls/false (lU30cf@syntax-dispatch lU3b8a@t '((#(scheme-id mutable) . _) . any)))) (if lU3b8c@ls/false (apply (lambda (lU3b8e@rest) (cons lU3b81@i (lU3b84@f lU3b8e@rest (+ lU3b81@i '1)))) lU3b8c@ls/false) (let ((lU3b90@t lU3b8a@t)) (let ((lU3b92@ls/false (lU30cf@syntax-dispatch lU3b90@t '(_ . any)))) (if lU3b92@ls/false (apply (lambda (lU3b94@rest) (lU3b84@f lU3b94@rest (+ lU3b81@i '1))) lU3b92@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3b90@t))))))))))))) (set! lU3aaf@get-mutators (lambda (lU3b54@foo lU3b55@fields) (let ((lU3b59@gen-name '#f)) (begin (set! lU3b59@gen-name (lambda (lU3b7c@x) (lU31b3@datum->syntax lU3b54@foo (string->symbol (string-append (symbol->string (lU31b5@syntax->datum lU3b54@foo)) '"-" (symbol->string (lU31b5@syntax->datum lU3b7c@x)) '"-set!"))))) (let lU3b5c@f ((lU3b5a@fields lU3b55@fields)) (let ((lU3b5e@t lU3b5a@fields)) (let ((lU3b60@ls/false (lU30cf@syntax-dispatch lU3b5e@t '()))) (if lU3b60@ls/false (apply (lambda () '()) lU3b60@ls/false) (let ((lU3b62@t lU3b5e@t)) (let ((lU3b64@ls/false (lU30cf@syntax-dispatch lU3b62@t '((#(scheme-id mutable) any any any) . any)))) (if lU3b64@ls/false (apply (lambda (lU3b66@name lU3b67@accessor lU3b68@mutator lU3b69@rest) (cons lU3b68@mutator (lU3b5c@f lU3b69@rest))) lU3b64@ls/false) (let ((lU3b6e@t lU3b62@t)) (let ((lU3b70@ls/false (lU30cf@syntax-dispatch lU3b6e@t '((#(scheme-id mutable) any) . any)))) (if lU3b70@ls/false (apply (lambda (lU3b72@name lU3b73@rest) (cons (lU3b59@gen-name lU3b72@name) (lU3b5c@f lU3b73@rest))) lU3b70@ls/false) (let ((lU3b76@t lU3b6e@t)) (let ((lU3b78@ls/false (lU30cf@syntax-dispatch lU3b76@t '(_ . any)))) (if lU3b78@ls/false (apply (lambda (lU3b7a@rest) (lU3b5c@f lU3b7a@rest)) lU3b78@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3b76@t)))))))))))))))))) (set! lU3ab1@get-accessors (lambda (lU3b10@foo lU3b11@fields) (let ((lU3b15@gen-name '#f)) (begin (set! lU3b15@gen-name (lambda (lU3b52@x) (lU31b3@datum->syntax lU3b10@foo (string->symbol (string-append (symbol->string (lU31b5@syntax->datum lU3b10@foo)) '"-" (symbol->string (lU31b5@syntax->datum lU3b52@x))))))) (map (lambda (lU3b16@field) (let ((lU3b18@t lU3b16@field)) (let ((lU3b1a@ls/false (lU30cf@syntax-dispatch lU3b18@t '(#(scheme-id mutable) any any any)))) (if (and lU3b1a@ls/false (apply (lambda (lU3b1c@name lU3b1d@accessor lU3b1e@mutator) (lU2ec8@id? lU3b1d@accessor)) lU3b1a@ls/false)) (apply (lambda (lU3b22@name lU3b23@accessor lU3b24@mutator) lU3b23@accessor) lU3b1a@ls/false) (let ((lU3b28@t lU3b18@t)) (let ((lU3b2a@ls/false (lU30cf@syntax-dispatch lU3b28@t '(#(scheme-id immutable) any any)))) (if (and lU3b2a@ls/false (apply (lambda (lU3b2c@name lU3b2d@accessor) (lU2ec8@id? lU3b2d@accessor)) lU3b2a@ls/false)) (apply (lambda (lU3b30@name lU3b31@accessor) lU3b31@accessor) lU3b2a@ls/false) (let ((lU3b34@t lU3b28@t)) (let ((lU3b36@ls/false (lU30cf@syntax-dispatch lU3b34@t '(#(scheme-id mutable) any)))) (if (and lU3b36@ls/false (apply (lambda (lU3b38@name) (lU2ec8@id? lU3b38@name)) lU3b36@ls/false)) (apply (lambda (lU3b3a@name) (lU3b15@gen-name lU3b3a@name)) lU3b36@ls/false) (let ((lU3b3c@t lU3b34@t)) (let ((lU3b3e@ls/false (lU30cf@syntax-dispatch lU3b3c@t '(#(scheme-id immutable) any)))) (if (and lU3b3e@ls/false (apply (lambda (lU3b40@name) (lU2ec8@id? lU3b40@name)) lU3b3e@ls/false)) (apply (lambda (lU3b42@name) (lU3b15@gen-name lU3b42@name)) lU3b3e@ls/false) (let ((lU3b44@t lU3b3c@t)) (let ((lU3b46@ls/false (lU30cf@syntax-dispatch lU3b44@t 'any))) (if (and lU3b46@ls/false (apply (lambda (lU3b48@name) (lU2ec8@id? lU3b48@name)) lU3b46@ls/false)) (apply (lambda (lU3b4a@name) (lU3b15@gen-name lU3b4a@name)) lU3b46@ls/false) (let ((lU3b4c@t lU3b44@t)) (let ((lU3b4e@ls/false (lU30cf@syntax-dispatch lU3b4c@t 'any))) (if lU3b4e@ls/false (apply (lambda (lU3b50@others) (lU31af@syntax-violation '#f '"invalid field spec" lU3b16@field)) lU3b4e@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3b4c@t)))))))))))))))))))) lU3b11@fields))))) (set! lU3ab3@enumerate (lambda (lU3b08@ls) (let lU3b0e@f ((lU3b0a@ls lU3b08@ls) (lU3b0b@i '0)) (if (null? lU3b0a@ls) '() (cons lU3b0b@i (lU3b0e@f (cdr lU3b0a@ls) (+ lU3b0b@i '1))))))) (set! lU3ab5@do-define-record (lambda (lU3ae0@namespec lU3ae1@clause*) (let ((lU3ae4@foo (lU3a99@get-record-name lU3ae0@namespec))) (let ((lU3ae6@foo-rtd (gensym))) (let ((lU3ae8@foo-rcd (gensym))) (let ((lU3aea@protocol (gensym))) (let ((lU3aec@make-foo (lU3a9b@get-record-constructor-name lU3ae0@namespec))) (let ((lU3aee@fields (lU3aab@get-fields lU3ae1@clause*))) (let ((lU3af0@idx* (lU3ab3@enumerate lU3aee@fields))) (let ((lU3af2@foo-x* (lU3ab1@get-accessors lU3ae4@foo lU3aee@fields))) (let ((lU3af4@set-foo-x!* (lU3aaf@get-mutators lU3ae4@foo lU3aee@fields))) (let ((lU3af6@set-foo-idx* (lU3aad@get-mutator-indices lU3aee@fields))) (let ((lU3af8@foo? (lU3a9d@get-record-predicate-name lU3ae0@namespec))) (let ((lU3afa@foo-rtd-code (lU3aa1@foo-rtd-code lU3ae4@foo lU3ae1@clause* (lU3aa3@parent-rtd-code lU3ae1@clause*)))) (let ((lU3afc@foo-rcd-code (lU3aa7@foo-rcd-code lU3ae1@clause* lU3ae6@foo-rtd lU3aea@protocol (lU3aa5@parent-rcd-code lU3ae1@clause*)))) (let ((lU3afe@protocol-code (lU3aa9@get-protocol-code lU3ae1@clause*))) (lU3085@bless (cons 'begin (cons (list 'define lU3ae6@foo-rtd lU3afa@foo-rtd-code) (cons (list 'define lU3aea@protocol lU3afe@protocol-code) (cons (list 'define lU3ae8@foo-rcd lU3afc@foo-rcd-code) (cons (list 'define-syntax lU3ae4@foo (list 'list ''$rtd (list 'syntax lU3ae6@foo-rtd) (list 'syntax lU3ae8@foo-rcd))) (cons (list 'define lU3af8@foo? (list 'record-predicate lU3ae6@foo-rtd)) (cons (list 'define lU3aec@make-foo (list 'record-constructor lU3ae8@foo-rcd)) (append (map (lambda (lU3b00@foo-x lU3b01@idx) (list 'define lU3b00@foo-x (list 'record-accessor lU3ae6@foo-rtd lU3b01@idx))) lU3af2@foo-x* lU3af0@idx*) (map (lambda (lU3b04@set-foo-x! lU3b05@idx) (list 'define lU3b04@set-foo-x! (list 'record-mutator lU3ae6@foo-rtd lU3b05@idx))) lU3af4@set-foo-x!* lU3af6@set-foo-idx*)))))))))))))))))))))))))) (set! lU3ab7@verify-clauses (lambda (lU3ac0@x lU3ac1@cls*) (let ((lU3ac5@valid-kwds '#f) (lU3ac7@free-id-member? '#f)) (begin (set! lU3ac5@valid-kwds (map lU3085@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! lU3ac7@free-id-member? (lambda (lU3adc@x lU3add@ls) (and (pair? lU3add@ls) (or (lU2ece@free-id=? lU3adc@x (car lU3add@ls)) (lU3ac7@free-id-member? lU3adc@x (cdr lU3add@ls)))))) (let lU3acc@f ((lU3ac8@cls* lU3ac1@cls*) (lU3ac9@seen* '())) (if (not (null? lU3ac8@cls*)) (let ((lU3ace@t (car lU3ac8@cls*))) (let ((lU3ad0@ls/false (lU30cf@syntax-dispatch lU3ace@t '(any . any)))) (if lU3ad0@ls/false (apply (lambda (lU3ad2@kwd lU3ad3@rest) (if (or (not (lU2ec8@id? lU3ad2@kwd)) (not (lU3ac7@free-id-member? lU3ad2@kwd lU3ac5@valid-kwds))) (lU31af@syntax-violation '#f '"not a valid define-record-type keyword" lU3ad2@kwd) (if (lU2ed4@bound-id-member? lU3ad2@kwd lU3ac9@seen*) (lU31af@syntax-violation '#f '"duplicate use of keyword " lU3ac0@x lU3ad2@kwd) (lU3acc@f (cdr lU3ac8@cls*) (cons lU3ad2@kwd lU3ac9@seen*))))) lU3ad0@ls/false) (let ((lU3ad6@t lU3ace@t)) (let ((lU3ad8@ls/false (lU30cf@syntax-dispatch lU3ad6@t 'any))) (if lU3ad8@ls/false (apply (lambda (lU3ada@cls) (lU31af@syntax-violation '#f '"malformed define-record-type clause" lU3ada@cls)) lU3ad8@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3ad6@t))))))) (void))))))) (let ((lU3ab8@t lU3a94@x)) (let ((lU3aba@ls/false (lU30cf@syntax-dispatch lU3ab8@t '(_ any . each-any)))) (if lU3aba@ls/false (apply (lambda (lU3abc@namespec lU3abd@clause*) (begin (lU3ab7@verify-clauses lU3a94@x lU3abd@clause*) (lU3ab5@do-define-record lU3abc@namespec lU3abd@clause*))) lU3aba@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3ab8@t)))))))) (set! lU4b9f@lU30c3@define-record-type-macro lU30c3@define-record-type-macro) (set! lU30c5@define-condition-type-macro (lambda (lU3c90@x) (let ((lU3c93@mkname '#f)) (begin (set! lU3c93@mkname (lambda (lU3cc0@name lU3cc1@suffix) (lU31b3@datum->syntax lU3cc0@name (string->symbol (string-append (symbol->string (lU31b5@syntax->datum lU3cc0@name)) lU3cc1@suffix))))) (let ((lU3c94@t lU3c90@x)) (let ((lU3c96@ls/false (lU30cf@syntax-dispatch lU3c94@t '(any any any any any . #(each (any any)))))) (if (and lU3c96@ls/false (apply (lambda (lU3c98@ctxt lU3c99@name lU3c9a@super lU3c9b@constructor lU3c9c@predicate lU3c9d@field* lU3c9e@accessor*) (and (lU2ec8@id? lU3c99@name) (lU2ec8@id? lU3c9a@super) (lU2ec8@id? lU3c9b@constructor) (lU2ec8@id? lU3c9c@predicate) (for-all lU2ec8@id? lU3c9d@field*) (for-all lU2ec8@id? lU3c9e@accessor*))) lU3c96@ls/false)) (apply (lambda (lU3ca6@ctxt lU3ca7@name lU3ca8@super lU3ca9@constructor lU3caa@predicate lU3cab@field* lU3cac@accessor*) (let ((lU3cb4@aux-accessor* (map (lambda (lU3cb6@x) (gensym)) lU3cac@accessor*))) (lU3085@bless (cons 'begin (cons (cons 'define-record-type (cons (list lU3ca7@name lU3ca9@constructor (gensym)) (cons (list 'parent lU3ca8@super) (cons (cons 'fields (map (lambda (lU3cb8@field lU3cb9@aux) (list 'immutable lU3cb8@field lU3cb9@aux)) lU3cab@field* lU3cb4@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define lU3caa@predicate (list 'condition-predicate (list 'record-type-descriptor lU3ca7@name))) (map (lambda (lU3cbc@accessor lU3cbd@aux) (list 'define lU3cbc@accessor (list 'condition-accessor (list 'record-type-descriptor lU3ca7@name) lU3cbd@aux))) lU3cac@accessor* lU3cb4@aux-accessor*))))))) lU3c96@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3c94@t)))))))) (set! lU4ba0@lU30c5@define-condition-type-macro lU30c5@define-condition-type-macro) (set! lU30c7@incorrect-usage-macro (lambda (lU3cc4@e) (lU31af@syntax-violation '#f '"incorrect usage of auxiliary keyword" lU3cc4@e))) (set! lU4ba1@lU30c7@incorrect-usage-macro lU30c7@incorrect-usage-macro) (set! lU30c9@parameterize-macro (lambda (lU3cc6@e) (let ((lU3cc8@t lU3cc6@e)) (let ((lU3cca@ls/false (lU30cf@syntax-dispatch lU3cc8@t '(_ () any . each-any)))) (if lU3cca@ls/false (apply (lambda (lU3ccc@b lU3ccd@b*) (lU3085@bless (cons 'let (cons '() (cons lU3ccc@b lU3ccd@b*))))) lU3cca@ls/false) (let ((lU3cd0@t lU3cc8@t)) (let ((lU3cd2@ls/false (lU30cf@syntax-dispatch lU3cd0@t '(_ #(each (any any)) any . each-any)))) (if lU3cd2@ls/false (apply (lambda (lU3cd4@olhs* lU3cd5@orhs* lU3cd6@b lU3cd7@b*) (let ((lU3cdc@lhs* (lU319d@generate-temporaries lU3cd4@olhs*)) (lU3cdd@rhs* (lU319d@generate-temporaries lU3cd5@orhs*))) (lU3085@bless (cons (list 'lambda (append lU3cdc@lhs* lU3cdd@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (lU3ce0@lhs lU3ce1@rhs) (list 'let (list (list 't (list lU3ce0@lhs))) (list lU3ce0@lhs lU3ce1@rhs) (cons 'set! (cons lU3ce1@rhs '(t))))) lU3cdc@lhs* lU3cdd@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons lU3cd6@b lU3cd7@b*))) '(swap)))))) (append lU3cd4@olhs* lU3cd5@orhs*))))) lU3cd2@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3cd0@t))))))))) (set! lU4ba2@lU30c9@parameterize-macro lU30c9@parameterize-macro) (set! lU30cb@foreign-call-transformer (lambda (lU3ce4@e lU3ce5@r lU3ce6@mr) (let ((lU3cea@t lU3ce4@e)) (let ((lU3cec@ls/false (lU30cf@syntax-dispatch lU3cea@t '(_ any . each-any)))) (if lU3cec@ls/false (apply (lambda (lU3cee@name lU3cef@arg*) (cons 'foreign-call (cons (lU30f1@chi-expr lU3cee@name lU3ce5@r lU3ce6@mr) (lU30ed@chi-expr* lU3cef@arg* lU3ce5@r lU3ce6@mr)))) lU3cec@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3cea@t)))))) (set! lU4ba3@lU30cb@foreign-call-transformer lU30cb@foreign-call-transformer) (set! lU30cd@convert-pattern (lambda (lU3cf2@pattern lU3cf3@keys) (let ((lU3cf7@cvt* '#f) (lU3cf9@cvt '#f)) (begin (set! lU3cf7@cvt* (lambda (lU3d96@p* lU3d97@n lU3d98@ids) (if (null? lU3d96@p*) (values '() lU3d98@ids) (call-with-values (lambda () (lU3cf7@cvt* (cdr lU3d96@p*) lU3d97@n lU3d98@ids)) (lambda (lU3da0@lU3d9d lU3da1@lU3d9f) (let ((lU3da4@ids lU3da1@lU3d9f) (lU3da5@y lU3da0@lU3d9d)) (call-with-values (lambda () (lU3cf9@cvt (car lU3d96@p*) lU3d97@n lU3da4@ids)) (lambda (lU3dac@lU3da9 lU3dad@lU3dab) (let ((lU3db0@ids lU3dad@lU3dab) (lU3db1@x lU3dac@lU3da9)) (values (cons lU3db1@x lU3da5@y) lU3db0@ids)))))))))) (set! lU3cf9@cvt (lambda (lU3cfa@p lU3cfb@n lU3cfc@ids) (let ((lU3d00@t lU3cfa@p)) (let ((lU3d02@ls/false (lU30cf@syntax-dispatch lU3d00@t 'any))) (if (and lU3d02@ls/false (apply (lambda (lU3d04@id) (lU2ec8@id? lU3d04@id)) lU3d02@ls/false)) (apply (lambda (lU3d06@id) (if (lU2ed4@bound-id-member? lU3cfa@p lU3cf3@keys) (values (vector 'free-id lU3cfa@p) lU3cfc@ids) (if (lU2ece@free-id=? lU3cfa@p (lU3057@scheme-stx '_)) (values '_ lU3cfc@ids) (values 'any (cons (cons lU3cfa@p lU3cfb@n) lU3cfc@ids))))) lU3d02@ls/false) (let ((lU3d08@t lU3d00@t)) (let ((lU3d0a@ls/false (lU30cf@syntax-dispatch lU3d08@t '(any any)))) (if (and lU3d0a@ls/false (apply (lambda (lU3d0c@p lU3d0d@dots) (lU30d1@ellipsis? lU3d0d@dots)) lU3d0a@ls/false)) (apply (lambda (lU3d10@p lU3d11@dots) (call-with-values (lambda () (lU3cf9@cvt lU3d10@p (+ lU3cfb@n '1) lU3cfc@ids)) (lambda (lU3d18@lU3d15 lU3d19@lU3d17) (let ((lU3d1c@ids lU3d19@lU3d17) (lU3d1d@p lU3d18@lU3d15)) (values (if (eq? lU3d1d@p 'any) 'each-any (vector 'each lU3d1d@p)) lU3d1c@ids))))) lU3d0a@ls/false) (let ((lU3d20@t lU3d08@t)) (let ((lU3d22@ls/false (lU30cf@syntax-dispatch lU3d20@t '(any any . #(each+ any () any))))) (if (and lU3d22@ls/false (apply (lambda (lU3d24@x lU3d25@dots lU3d26@ys lU3d27@z) (lU30d1@ellipsis? lU3d25@dots)) lU3d22@ls/false)) (apply (lambda (lU3d2c@x lU3d2d@dots lU3d2e@ys lU3d2f@z) (call-with-values (lambda () (lU3cf9@cvt lU3d2f@z lU3cfb@n lU3cfc@ids)) (lambda (lU3d38@lU3d35 lU3d39@lU3d37) (let ((lU3d3c@ids lU3d39@lU3d37) (lU3d3d@z lU3d38@lU3d35)) (call-with-values (lambda () (lU3cf7@cvt* lU3d2e@ys lU3cfb@n lU3d3c@ids)) (lambda (lU3d44@lU3d41 lU3d45@lU3d43) (let ((lU3d48@ids lU3d45@lU3d43) (lU3d49@ys lU3d44@lU3d41)) (call-with-values (lambda () (lU3cf9@cvt lU3d2c@x (+ lU3cfb@n '1) lU3d48@ids)) (lambda (lU3d50@lU3d4d lU3d51@lU3d4f) (let ((lU3d54@ids lU3d51@lU3d4f) (lU3d55@x lU3d50@lU3d4d)) (values (vector 'each+ lU3d55@x (reverse lU3d49@ys) lU3d3d@z) lU3d54@ids))))))))))) lU3d22@ls/false) (let ((lU3d58@t lU3d20@t)) (let ((lU3d5a@ls/false (lU30cf@syntax-dispatch lU3d58@t '(any . any)))) (if lU3d5a@ls/false (apply (lambda (lU3d5c@x lU3d5d@y) (call-with-values (lambda () (lU3cf9@cvt lU3d5d@y lU3cfb@n lU3cfc@ids)) (lambda (lU3d64@lU3d61 lU3d65@lU3d63) (let ((lU3d68@ids lU3d65@lU3d63) (lU3d69@y lU3d64@lU3d61)) (call-with-values (lambda () (lU3cf9@cvt lU3d5c@x lU3cfb@n lU3d68@ids)) (lambda (lU3d70@lU3d6d lU3d71@lU3d6f) (let ((lU3d74@ids lU3d71@lU3d6f) (lU3d75@x lU3d70@lU3d6d)) (values (cons lU3d75@x lU3d69@y) lU3d74@ids)))))))) lU3d5a@ls/false) (let ((lU3d78@t lU3d58@t)) (let ((lU3d7a@ls/false (lU30cf@syntax-dispatch lU3d78@t '()))) (if lU3d7a@ls/false (apply (lambda () (values '() lU3cfc@ids)) lU3d7a@ls/false) (let ((lU3d7c@t lU3d78@t)) (let ((lU3d7e@ls/false (lU30cf@syntax-dispatch lU3d7c@t '#(vector each-any)))) (if (and lU3d7e@ls/false (apply (lambda (lU3d80@p) (not (lU2e94@stx? lU3d80@p))) lU3d7e@ls/false)) (apply (lambda (lU3d82@p) (call-with-values (lambda () (lU3cf9@cvt lU3d82@p lU3cfb@n lU3cfc@ids)) (lambda (lU3d88@lU3d85 lU3d89@lU3d87) (let ((lU3d8c@ids lU3d89@lU3d87) (lU3d8d@p lU3d88@lU3d85)) (values (vector 'vector lU3d8d@p) lU3d8c@ids))))) lU3d7e@ls/false) (let ((lU3d90@t lU3d7c@t)) (let ((lU3d92@ls/false (lU30cf@syntax-dispatch lU3d90@t 'any))) (if lU3d92@ls/false (apply (lambda (lU3d94@datum) (values (vector 'atom (lU2edc@stx->datum lU3d94@datum)) lU3cfc@ids)) lU3d92@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3d90@t)))))))))))))))))))))))) (lU3cf9@cvt lU3cf2@pattern '0 '()))))) (set! lU4ba4@lU30cd@convert-pattern lU30cd@convert-pattern) (set! lU30cf@syntax-dispatch (let ((lU3db5@stx^ '#f) (lU3db7@match-each '#f) (lU3db9@match-each+ '#f) (lU3dbb@match-each-any '#f) (lU3dbd@match-empty '#f) (lU3dbf@combine '#f) (lU3dc1@match* '#f) (lU3dc3@match '#f)) (begin (set! lU3db5@stx^ (lambda (lU3e90@e lU3e91@m* lU3e92@s* lU3e93@ae*) (if (and (null? lU3e91@m*) (null? lU3e92@s*) (null? lU3e93@ae*)) lU3e90@e (lU2eb0@mkstx lU3e90@e lU3e91@m* lU3e92@s* lU3e93@ae*)))) (set! lU3db7@match-each (lambda (lU3e70@e lU3e71@p lU3e72@m* lU3e73@s* lU3e74@ae*) (if (pair? lU3e70@e) (let ((lU3e7a@first (lU3dc3@match (car lU3e70@e) lU3e71@p lU3e72@m* lU3e73@s* lU3e74@ae* '()))) (and lU3e7a@first (let ((lU3e7c@rest (lU3db7@match-each (cdr lU3e70@e) lU3e71@p lU3e72@m* lU3e73@s* lU3e74@ae*))) (and lU3e7c@rest (cons lU3e7a@first lU3e7c@rest))))) (if (null? lU3e70@e) '() (if (lU2e94@stx? lU3e70@e) (and (not (lU2e4e@top-marked? lU3e72@m*)) (call-with-values (lambda () (join-wraps lU3e72@m* lU3e73@s* lU3e74@ae* lU3e70@e)) (lambda (lU3e84@lU3e7f lU3e85@lU3e81 lU3e86@lU3e83) (let ((lU3e8a@ae* lU3e86@lU3e83) (lU3e8b@s* lU3e85@lU3e81) (lU3e8c@m* lU3e84@lU3e7f)) (lU3db7@match-each (lU2e96@stx-expr lU3e70@e) lU3e71@p lU3e8c@m* lU3e8b@s* lU3e8a@ae*))))) (if (lU2a06@lU28d8@annotation? lU3e70@e) (lU3db7@match-each (lU2a08@lU28dc@annotation-expression lU3e70@e) lU3e71@p lU3e72@m* lU3e73@s* lU3e74@ae*) '#f)))))) (set! lU3db9@match-each+ (lambda (lU3e30@e lU3e31@x-pat lU3e32@y-pat lU3e33@z-pat lU3e34@m* lU3e35@s* lU3e36@ae* lU3e37@r) (let lU3e48@f ((lU3e40@e lU3e30@e) (lU3e41@m* lU3e34@m*) (lU3e42@s* lU3e35@s*) (lU3e43@ae* lU3e36@ae*)) (if (pair? lU3e40@e) (call-with-values (lambda () (lU3e48@f (cdr lU3e40@e) lU3e41@m* lU3e42@s* lU3e43@ae*)) (lambda (lU3e50@lU3e4b lU3e51@lU3e4d lU3e52@lU3e4f) (let ((lU3e56@r lU3e52@lU3e4f) (lU3e57@y-pat lU3e51@lU3e4d) (lU3e58@xr* lU3e50@lU3e4b)) (if lU3e56@r (if (null? lU3e57@y-pat) (let ((lU3e5c@xr (lU3dc3@match (car lU3e40@e) lU3e31@x-pat lU3e41@m* lU3e42@s* lU3e43@ae* '()))) (if lU3e5c@xr (values (cons lU3e5c@xr lU3e58@xr*) lU3e57@y-pat lU3e56@r) (values '#f '#f '#f))) (values '() (cdr lU3e57@y-pat) (lU3dc3@match (car lU3e40@e) (car lU3e57@y-pat) lU3e41@m* lU3e42@s* lU3e43@ae* lU3e56@r))) (values '#f '#f '#f))))) (if (lU2e94@stx? lU3e40@e) (if (lU2e4e@top-marked? lU3e41@m*) (values '() lU3e32@y-pat (lU3dc3@match lU3e40@e lU3e33@z-pat lU3e41@m* lU3e42@s* lU3e43@ae* lU3e37@r)) (call-with-values (lambda () (join-wraps lU3e41@m* lU3e42@s* lU3e43@ae* lU3e40@e)) (lambda (lU3e64@lU3e5f lU3e65@lU3e61 lU3e66@lU3e63) (let ((lU3e6a@ae* lU3e66@lU3e63) (lU3e6b@s* lU3e65@lU3e61) (lU3e6c@m* lU3e64@lU3e5f)) (lU3e48@f (lU2e96@stx-expr lU3e40@e) lU3e6c@m* lU3e6b@s* lU3e6a@ae*))))) (if (lU2a06@lU28d8@annotation? lU3e40@e) (lU3e48@f (lU2a08@lU28dc@annotation-expression lU3e40@e) lU3e41@m* lU3e42@s* lU3e43@ae*) (values '() lU3e32@y-pat (lU3dc3@match lU3e40@e lU3e33@z-pat lU3e41@m* lU3e42@s* lU3e43@ae* lU3e37@r)))))))) (set! lU3dbb@match-each-any (lambda (lU3e14@e lU3e15@m* lU3e16@s* lU3e17@ae*) (if (pair? lU3e14@e) (let ((lU3e1c@l (lU3dbb@match-each-any (cdr lU3e14@e) lU3e15@m* lU3e16@s* lU3e17@ae*))) (and lU3e1c@l (cons (lU3db5@stx^ (car lU3e14@e) lU3e15@m* lU3e16@s* lU3e17@ae*) lU3e1c@l))) (if (null? lU3e14@e) '() (if (lU2e94@stx? lU3e14@e) (and (not (lU2e4e@top-marked? lU3e15@m*)) (call-with-values (lambda () (join-wraps lU3e15@m* lU3e16@s* lU3e17@ae* lU3e14@e)) (lambda (lU3e24@lU3e1f lU3e25@lU3e21 lU3e26@lU3e23) (let ((lU3e2a@ae* lU3e26@lU3e23) (lU3e2b@s* lU3e25@lU3e21) (lU3e2c@m* lU3e24@lU3e1f)) (lU3dbb@match-each-any (lU2e96@stx-expr lU3e14@e) lU3e2c@m* lU3e2b@s* lU3e2a@ae*))))) (if (lU2a06@lU28d8@annotation? lU3e14@e) (lU3dbb@match-each-any (lU2a08@lU28dc@annotation-expression lU3e14@e) lU3e15@m* lU3e16@s* lU3e17@ae*) '#f)))))) (set! lU3dbd@match-empty (lambda (lU3e0e@p lU3e0f@r) (if (null? lU3e0e@p) lU3e0f@r (if (eq? lU3e0e@p '_) lU3e0f@r (if (eq? lU3e0e@p 'any) (cons '() lU3e0f@r) (if (pair? lU3e0e@p) (lU3dbd@match-empty (car lU3e0e@p) (lU3dbd@match-empty (cdr lU3e0e@p) lU3e0f@r)) (if (eq? lU3e0e@p 'each-any) (cons '() lU3e0f@r) (let ((lU3e12@t (vector-ref lU3e0e@p '0))) (if (memv lU3e12@t '(each)) (lU3dbd@match-empty (vector-ref lU3e0e@p '1) lU3e0f@r) (if (memv lU3e12@t '(each+)) (lU3dbd@match-empty (vector-ref lU3e0e@p '1) (lU3dbd@match-empty (reverse (vector-ref lU3e0e@p '2)) (lU3dbd@match-empty (vector-ref lU3e0e@p '3) lU3e0f@r))) (if (memv lU3e12@t '(free-id atom)) lU3e0f@r (if (memv lU3e12@t '(scheme-id atom)) lU3e0f@r (if (memv lU3e12@t '(vector)) (lU3dbd@match-empty (vector-ref lU3e0e@p '1) lU3e0f@r) (assertion-violation 'syntax-dispatch '"invalid pattern" lU3e0e@p)))))))))))))) (set! lU3dbf@combine (lambda (lU3e0a@r* lU3e0b@r) (if (null? (car lU3e0a@r*)) lU3e0b@r (cons (map car lU3e0a@r*) (lU3dbf@combine (map cdr lU3e0a@r*) lU3e0b@r))))) (set! lU3dc1@match* (lambda (lU3de6@e lU3de7@p lU3de8@m* lU3de9@s* lU3dea@ae* lU3deb@r) (if (null? lU3de7@p) (and (null? lU3de6@e) lU3deb@r) (if (pair? lU3de7@p) (and (pair? lU3de6@e) (lU3dc3@match (car lU3de6@e) (car lU3de7@p) lU3de8@m* lU3de9@s* lU3dea@ae* (lU3dc3@match (cdr lU3de6@e) (cdr lU3de7@p) lU3de8@m* lU3de9@s* lU3dea@ae* lU3deb@r))) (if (eq? lU3de7@p 'each-any) (let ((lU3df2@l (lU3dbb@match-each-any lU3de6@e lU3de8@m* lU3de9@s* lU3dea@ae*))) (and lU3df2@l (cons lU3df2@l lU3deb@r))) (let ((lU3df4@t (vector-ref lU3de7@p '0))) (if (memv lU3df4@t '(each)) (if (null? lU3de6@e) (lU3dbd@match-empty (vector-ref lU3de7@p '1) lU3deb@r) (let ((lU3df6@r* (lU3db7@match-each lU3de6@e (vector-ref lU3de7@p '1) lU3de8@m* lU3de9@s* lU3dea@ae*))) (and lU3df6@r* (lU3dbf@combine lU3df6@r* lU3deb@r)))) (if (memv lU3df4@t '(free-id)) (and (symbol? lU3de6@e) (lU2e4e@top-marked? lU3de8@m*) (lU2ece@free-id=? (lU3db5@stx^ lU3de6@e lU3de8@m* lU3de9@s* lU3dea@ae*) (vector-ref lU3de7@p '1)) lU3deb@r) (if (memv lU3df4@t '(scheme-id)) (and (symbol? lU3de6@e) (lU2e4e@top-marked? lU3de8@m*) (lU2ece@free-id=? (lU3db5@stx^ lU3de6@e lU3de8@m* lU3de9@s* lU3dea@ae*) (lU3057@scheme-stx (vector-ref lU3de7@p '1))) lU3deb@r) (if (memv lU3df4@t '(each+)) (call-with-values (lambda () (lU3db9@match-each+ lU3de6@e (vector-ref lU3de7@p '1) (vector-ref lU3de7@p '2) (vector-ref lU3de7@p '3) lU3de8@m* lU3de9@s* lU3dea@ae* lU3deb@r)) (lambda (lU3dfe@lU3df9 lU3dff@lU3dfb lU3e00@lU3dfd) (let ((lU3e04@r lU3e00@lU3dfd) (lU3e05@y-pat lU3dff@lU3dfb) (lU3e06@xr* lU3dfe@lU3df9)) (and lU3e04@r (null? lU3e05@y-pat) (if (null? lU3e06@xr*) (lU3dbd@match-empty (vector-ref lU3de7@p '1) lU3e04@r) (lU3dbf@combine lU3e06@xr* lU3e04@r)))))) (if (memv lU3df4@t '(atom)) (and (fast-equal? (vector-ref lU3de7@p '1) (lU2eda@strip lU3de6@e lU3de8@m*)) lU3deb@r) (if (memv lU3df4@t '(vector)) (and (vector? lU3de6@e) (lU3dc3@match (vector->list lU3de6@e) (vector-ref lU3de7@p '1) lU3de8@m* lU3de9@s* lU3dea@ae* lU3deb@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" lU3de7@p))))))))))))) (set! lU3dc3@match (lambda (lU3dc8@e lU3dc9@p lU3dca@m* lU3dcb@s* lU3dcc@ae* lU3dcd@r) (if (not lU3dcd@r) '#f (if (eq? lU3dc9@p '_) lU3dcd@r (if (eq? lU3dc9@p 'any) (cons (lU3db5@stx^ lU3dc8@e lU3dca@m* lU3dcb@s* lU3dcc@ae*) lU3dcd@r) (if (lU2e94@stx? lU3dc8@e) (and (not (lU2e4e@top-marked? lU3dca@m*)) (call-with-values (lambda () (join-wraps lU3dca@m* lU3dcb@s* lU3dcc@ae* lU3dc8@e)) (lambda (lU3dda@lU3dd5 lU3ddb@lU3dd7 lU3ddc@lU3dd9) (let ((lU3de0@ae* lU3ddc@lU3dd9) (lU3de1@s* lU3ddb@lU3dd7) (lU3de2@m* lU3dda@lU3dd5)) (lU3dc3@match (lU2e96@stx-expr lU3dc8@e) lU3dc9@p lU3de2@m* lU3de1@s* lU3de0@ae* lU3dcd@r))))) (if (lU2a06@lU28d8@annotation? lU3dc8@e) (lU3dc3@match (lU2a08@lU28dc@annotation-expression lU3dc8@e) lU3dc9@p lU3dca@m* lU3dcb@s* lU3dcc@ae* lU3dcd@r) (lU3dc1@match* lU3dc8@e lU3dc9@p lU3dca@m* lU3dcb@s* lU3dcc@ae* lU3dcd@r)))))))) (lambda (lU3dc4@e lU3dc5@p) (lU3dc3@match lU3dc4@e lU3dc5@p '() '() '() '()))))) (set! lU4ba5@lU30cf@syntax-dispatch lU30cf@syntax-dispatch) (set! lU30d1@ellipsis? (lambda (lU3e98@x) (and (lU2ec8@id? lU3e98@x) (lU2ece@free-id=? lU3e98@x (lU3057@scheme-stx '...))))) (set! lU4ba6@lU30d1@ellipsis? lU30d1@ellipsis?) (set! lU30d3@underscore? (lambda (lU3e9a@x) (and (lU2ec8@id? lU3e9a@x) (lU2ece@free-id=? lU3e9a@x (lU3057@scheme-stx '_))))) (set! lU4ba7@lU30d3@underscore? lU30d3@underscore?) (set! lU30d5@verify-literals (lambda (lU3e9c@lits lU3e9d@expr) (for-each (lambda (lU3ea0@x) (if (or (not (lU2ec8@id? lU3ea0@x)) (lU30d1@ellipsis? lU3ea0@x) (lU30d3@underscore? lU3ea0@x)) (lU31af@syntax-violation '#f '"invalid literal" lU3e9d@expr lU3ea0@x) (void))) lU3e9c@lits))) (set! lU4ba8@lU30d5@verify-literals lU30d5@verify-literals) (set! lU30d7@syntax-case-transformer (let ((lU3ea3@build-dispatch-call '#f) (lU3ea5@invalid-ids-error '#f) (lU3ea7@gen-clause '#f) (lU3ea9@gen-syntax-case '#f)) (begin (set! lU3ea3@build-dispatch-call (lambda (lU3f14@pvars lU3f15@expr lU3f16@y lU3f17@r lU3f18@mr) (let ((lU3f1e@ids (map car lU3f14@pvars)) (lU3f1f@levels (map cdr lU3f14@pvars))) (let ((lU3f22@labels (map lU2e54@gen-label lU3f1e@ids)) (lU3f23@new-vars (map lU2e50@gen-lexical lU3f1e@ids))) (let ((lU3f26@body (lU30f1@chi-expr (lU2eb4@add-subst (lU2e88@make-full-rib lU3f1e@ids lU3f22@labels) lU3f15@expr) (append (map (lambda (lU3f28@label lU3f29@var lU3f2a@level) (cons lU3f28@label (lU2ee2@make-binding 'syntax (cons lU3f29@var lU3f2a@level)))) lU3f22@labels lU3f23@new-vars (map cdr lU3f14@pvars)) lU3f17@r) lU3f18@mr))) (list '(primitive apply) (lU2e2b@lU2d57@build-lambda '#f lU3f23@new-vars lU3f26@body) lU3f16@y)))))) (set! lU3ea5@invalid-ids-error (lambda (lU3f08@id* lU3f09@e lU3f0a@class) (let lU3f12@find ((lU3f0e@id* lU3f08@id*) (lU3f0f@ok* '())) (if (null? lU3f0e@id*) (lU31af@syntax-violation '#f '"invalid syntax" lU3f09@e) (if (lU2ec8@id? (car lU3f0e@id*)) (if (lU2ed4@bound-id-member? (car lU3f0e@id*) lU3f0f@ok*) (lU31ab@syntax-error (car lU3f0e@id*) '"duplicate " lU3f0a@class) (lU3f12@find (cdr lU3f0e@id*) (cons (car lU3f0e@id*) lU3f0f@ok*))) (lU31ab@syntax-error (car lU3f0e@id*) '"invalid " lU3f0a@class)))))) (set! lU3ea7@gen-clause (lambda (lU3ee0@x lU3ee1@keys lU3ee2@clauses lU3ee3@r lU3ee4@mr lU3ee5@pat lU3ee6@fender lU3ee7@expr) (call-with-values (lambda () (lU30cd@convert-pattern lU3ee5@pat lU3ee1@keys)) (lambda (lU3ef4@lU3ef1 lU3ef5@lU3ef3) (let ((lU3ef8@pvars lU3ef5@lU3ef3) (lU3ef9@p lU3ef4@lU3ef1)) (if (not (lU2ed2@distinct-bound-ids? (map car lU3ef8@pvars))) (lU3ea5@invalid-ids-error (map car lU3ef8@pvars) lU3ee5@pat '"pattern variable") (if (not (for-all (lambda (lU3efc@x) (not (lU30d1@ellipsis? (car lU3efc@x)))) lU3ef8@pvars)) (lU31af@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" lU3ee5@pat) (let ((lU3efe@y (lU2e50@gen-lexical 'tmp))) (let ((lU3f00@test (if (eq? lU3ee6@fender '#t) lU3efe@y (let ((lU3f02@call (lU3ea3@build-dispatch-call lU3ef8@pvars lU3ee6@fender lU3efe@y lU3ee3@r lU3ee4@mr))) (list 'if lU3efe@y lU3f02@call (list 'quote '#f)))))) (let ((lU3f04@conseq (lU3ea3@build-dispatch-call lU3ef8@pvars lU3ee7@expr lU3efe@y lU3ee3@r lU3ee4@mr))) (let ((lU3f06@altern (lU3ea9@gen-syntax-case lU3ee0@x lU3ee1@keys lU3ee2@clauses lU3ee3@r lU3ee4@mr))) (list (lU2e2b@lU2d57@build-lambda '#f (list lU3efe@y) (list 'if lU3f00@test lU3f04@conseq lU3f06@altern)) (list '(primitive syntax-dispatch) lU3ee0@x (list 'quote lU3ef9@p)))))))))))))) (set! lU3ea9@gen-syntax-case (lambda (lU3ebe@x lU3ebf@keys lU3ec0@clauses lU3ec1@r lU3ec2@mr) (if (null? lU3ec0@clauses) (list '(primitive syntax-error) lU3ebe@x) (let ((lU3ec8@t (car lU3ec0@clauses))) (let ((lU3eca@ls/false (lU30cf@syntax-dispatch lU3ec8@t '(any any)))) (if lU3eca@ls/false (apply (lambda (lU3ecc@pat lU3ecd@expr) (if (and (lU2ec8@id? lU3ecc@pat) (not (lU2ed4@bound-id-member? lU3ecc@pat lU3ebf@keys)) (not (lU30d1@ellipsis? lU3ecc@pat))) (if (lU2ece@free-id=? lU3ecc@pat (lU3057@scheme-stx '_)) (lU30f1@chi-expr lU3ecd@expr lU3ec1@r lU3ec2@mr) (let ((lU3ed0@lab (lU2e54@gen-label lU3ecc@pat)) (lU3ed1@lex (lU2e50@gen-lexical lU3ecc@pat))) (let ((lU3ed4@body (lU30f1@chi-expr (lU2eb4@add-subst (lU2e88@make-full-rib (list lU3ecc@pat) (list lU3ed0@lab)) lU3ecd@expr) (cons (cons lU3ed0@lab (lU2ee2@make-binding 'syntax (cons lU3ed1@lex '0))) lU3ec1@r) lU3ec2@mr))) (list (lU2e2b@lU2d57@build-lambda '#f (list lU3ed1@lex) lU3ed4@body) lU3ebe@x)))) (lU3ea7@gen-clause lU3ebe@x lU3ebf@keys (cdr lU3ec0@clauses) lU3ec1@r lU3ec2@mr lU3ecc@pat '#t lU3ecd@expr))) lU3eca@ls/false) (let ((lU3ed6@t lU3ec8@t)) (let ((lU3ed8@ls/false (lU30cf@syntax-dispatch lU3ed6@t '(any any any)))) (if lU3ed8@ls/false (apply (lambda (lU3eda@pat lU3edb@fender lU3edc@expr) (lU3ea7@gen-clause lU3ebe@x lU3ebf@keys (cdr lU3ec0@clauses) lU3ec1@r lU3ec2@mr lU3eda@pat lU3edb@fender lU3edc@expr)) lU3ed8@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3ed6@t)))))))))) (lambda (lU3eaa@e lU3eab@r lU3eac@mr) (let ((lU3eb0@t lU3eaa@e)) (let ((lU3eb2@ls/false (lU30cf@syntax-dispatch lU3eb0@t '(_ any each-any . each-any)))) (if lU3eb2@ls/false (apply (lambda (lU3eb4@expr lU3eb5@keys lU3eb6@clauses) (begin (lU30d5@verify-literals lU3eb5@keys lU3eaa@e) (let ((lU3eba@x (lU2e50@gen-lexical 'tmp))) (let ((lU3ebc@body (lU3ea9@gen-syntax-case lU3eba@x lU3eb5@keys lU3eb6@clauses lU3eab@r lU3eac@mr))) (list (lU2e2b@lU2d57@build-lambda '#f (list lU3eba@x) lU3ebc@body) (lU30f1@chi-expr lU3eb4@expr lU3eab@r lU3eac@mr)))))) lU3eb2@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3eb0@t)))))))) (set! lU4ba9@lU30d7@syntax-case-transformer lU30d7@syntax-case-transformer) (set! lU30d9@ellipsis-map (lambda (lU3f2e@proc lU3f2f@ls . lU3f32@ls*) (let ((lU3f35@who '#f)) (begin (set! lU3f35@who '...) (begin (if (not (list? lU3f2f@ls)) (assertion-violation lU3f35@who '"not a list" lU3f2f@ls) (void)) (if (not (null? lU3f32@ls*)) (let ((lU3f36@n (length lU3f2f@ls))) (for-each (lambda (lU3f38@x) (begin (if (not (list? lU3f38@x)) (assertion-violation lU3f35@who '"not a list" lU3f38@x) (void)) (if (not (= (length lU3f38@x) lU3f36@n)) (assertion-violation lU3f35@who '"length mismatch" lU3f2f@ls lU3f38@x) (void)))) lU3f32@ls*)) (void)) (apply map lU3f2e@proc lU3f2f@ls lU3f32@ls*)))))) (set! lU4baa@lU30d9@ellipsis-map lU30d9@ellipsis-map) (set! lU30db@syntax-transformer (let ((lU3f3b@gen-syntax '#f) (lU3f3d@gen-ref '#f) (lU3f3f@gen-append '#f) (lU3f41@gen-mappend '#f) (lU3f43@gen-map '#f) (lU3f45@gen-cons '#f) (lU3f47@gen-vector '#f) (lU3f49@regen '#f)) (begin (set! lU3f3b@gen-syntax (lambda (lU3fb2@src lU3fb3@e lU3fb4@r lU3fb5@maps lU3fb6@ellipsis? lU3fb7@vec?) (let ((lU3fbe@t lU3fb3@e)) (let ((lU3fc0@ls/false (lU30cf@syntax-dispatch lU3fbe@t 'any))) (if (and lU3fc0@ls/false (apply (lambda (lU3fc2@dots) (lU3fb6@ellipsis? lU3fc2@dots)) lU3fc0@ls/false)) (apply (lambda (lU3fc4@dots) (lU31af@syntax-violation '#f '"misplaced ellipsis in syntax form" lU3fb2@src)) lU3fc0@ls/false) (let ((lU3fc6@t lU3fbe@t)) (let ((lU3fc8@ls/false (lU30cf@syntax-dispatch lU3fc6@t 'any))) (if (and lU3fc8@ls/false (apply (lambda (lU3fca@id) (lU2ec8@id? lU3fca@id)) lU3fc8@ls/false)) (apply (lambda (lU3fcc@id) (let ((lU3fce@label (lU2ede@id->label lU3fb3@e))) (let ((lU3fd0@b (lU2ee0@label->binding lU3fce@label lU3fb4@r))) (if (eq? (lU2ee4@binding-type lU3fd0@b) 'syntax) (call-with-values (lambda () (let ((lU3fd6@var.lev (lU2ee6@binding-value lU3fd0@b))) (lU3f3d@gen-ref lU3fb2@src (car lU3fd6@var.lev) (cdr lU3fd6@var.lev) lU3fb5@maps))) (lambda (lU3fd8@lU3fd3 lU3fd9@lU3fd5) (let ((lU3fdc@maps lU3fd9@lU3fd5) (lU3fdd@var lU3fd8@lU3fd3)) (values (list 'ref lU3fdd@var) lU3fdc@maps)))) (values (list 'quote lU3fb3@e) lU3fb5@maps))))) lU3fc8@ls/false) (let ((lU3fe0@t lU3fc6@t)) (let ((lU3fe2@ls/false (lU30cf@syntax-dispatch lU3fe0@t '(any any)))) (if (and lU3fe2@ls/false (apply (lambda (lU3fe4@dots lU3fe5@e) (lU3fb6@ellipsis? lU3fe4@dots)) lU3fe2@ls/false)) (apply (lambda (lU3fe8@dots lU3fe9@e) (if lU3fb7@vec? (lU31af@syntax-violation '#f '"misplaced ellipsis in syntax form" lU3fb2@src) (lU3f3b@gen-syntax lU3fb2@src lU3fe9@e lU3fb4@r lU3fb5@maps (lambda (lU3fec@x) '#f) '#f))) lU3fe2@ls/false) (let ((lU3fee@t lU3fe0@t)) (let ((lU3ff0@ls/false (lU30cf@syntax-dispatch lU3fee@t '(any any . any)))) (if (and lU3ff0@ls/false (apply (lambda (lU3ff2@x lU3ff3@dots lU3ff4@y) (lU3fb6@ellipsis? lU3ff3@dots)) lU3ff0@ls/false)) (apply (lambda (lU3ff8@x lU3ff9@dots lU3ffa@y) (let lU4010@f ((lU3ffe@y lU3ffa@y) (lU3fff@k (lambda (lU4002@maps) (call-with-values (lambda () (lU3f3b@gen-syntax lU3fb2@src lU3ff8@x lU3fb4@r (cons '() lU4002@maps) lU3fb6@ellipsis? '#f)) (lambda (lU4008@lU4005 lU4009@lU4007) (let ((lU400c@maps lU4009@lU4007) (lU400d@x lU4008@lU4005)) (if (null? (car lU400c@maps)) (lU31af@syntax-violation '#f '"extra ellipsis in syntax form" lU3fb2@src) (values (lU3f43@gen-map lU400d@x (car lU400c@maps)) (cdr lU400c@maps))))))))) (let ((lU4012@t lU3ffe@y)) (let ((lU4014@ls/false (lU30cf@syntax-dispatch lU4012@t '()))) (if lU4014@ls/false (apply (lambda () (lU3fff@k lU3fb5@maps)) lU4014@ls/false) (let ((lU4016@t lU4012@t)) (let ((lU4018@ls/false (lU30cf@syntax-dispatch lU4016@t '(any . any)))) (if (and lU4018@ls/false (apply (lambda (lU401a@dots lU401b@y) (lU3fb6@ellipsis? lU401a@dots)) lU4018@ls/false)) (apply (lambda (lU401e@dots lU401f@y) (lU4010@f lU401f@y (lambda (lU4022@maps) (call-with-values (lambda () (lU3fff@k (cons '() lU4022@maps))) (lambda (lU4028@lU4025 lU4029@lU4027) (let ((lU402c@maps lU4029@lU4027) (lU402d@x lU4028@lU4025)) (if (null? (car lU402c@maps)) (lU31af@syntax-violation '#f '"extra ellipsis in syntax form" lU3fb2@src) (values (lU3f41@gen-mappend lU402d@x (car lU402c@maps)) (cdr lU402c@maps))))))))) lU4018@ls/false) (let ((lU4030@t lU4016@t)) (let ((lU4032@ls/false (lU30cf@syntax-dispatch lU4030@t '_))) (if lU4032@ls/false (apply (lambda () (call-with-values (lambda () (lU3f3b@gen-syntax lU3fb2@src lU3ffe@y lU3fb4@r lU3fb5@maps lU3fb6@ellipsis? lU3fb7@vec?)) (lambda (lU4038@lU4035 lU4039@lU4037) (let ((lU403c@maps lU4039@lU4037) (lU403d@y lU4038@lU4035)) (call-with-values (lambda () (lU3fff@k lU403c@maps)) (lambda (lU4044@lU4041 lU4045@lU4043) (let ((lU4048@maps lU4045@lU4043) (lU4049@x lU4044@lU4041)) (values (lU3f3f@gen-append lU4049@x lU403d@y) lU4048@maps)))))))) lU4032@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU4030@t)))))))))))) lU3ff0@ls/false) (let ((lU404c@t lU3fee@t)) (let ((lU404e@ls/false (lU30cf@syntax-dispatch lU404c@t '(any . any)))) (if lU404e@ls/false (apply (lambda (lU4050@x lU4051@y) (call-with-values (lambda () (lU3f3b@gen-syntax lU3fb2@src lU4050@x lU3fb4@r lU3fb5@maps lU3fb6@ellipsis? '#f)) (lambda (lU4058@lU4055 lU4059@lU4057) (let ((lU405c@maps lU4059@lU4057) (lU405d@xnew lU4058@lU4055)) (call-with-values (lambda () (lU3f3b@gen-syntax lU3fb2@src lU4051@y lU3fb4@r lU405c@maps lU3fb6@ellipsis? lU3fb7@vec?)) (lambda (lU4064@lU4061 lU4065@lU4063) (let ((lU4068@maps lU4065@lU4063) (lU4069@ynew lU4064@lU4061)) (values (lU3f45@gen-cons lU3fb3@e lU4050@x lU4051@y lU405d@xnew lU4069@ynew) lU4068@maps)))))))) lU404e@ls/false) (let ((lU406c@t lU404c@t)) (let ((lU406e@ls/false (lU30cf@syntax-dispatch lU406c@t '#(vector each-any)))) (if lU406e@ls/false (apply (lambda (lU4070@ls) (call-with-values (lambda () (lU3f3b@gen-syntax lU3fb2@src lU4070@ls lU3fb4@r lU3fb5@maps lU3fb6@ellipsis? '#t)) (lambda (lU4076@lU4073 lU4077@lU4075) (let ((lU407a@maps lU4077@lU4075) (lU407b@lsnew lU4076@lU4073)) (values (lU3f47@gen-vector lU3fb3@e lU4070@ls lU407b@lsnew) lU407a@maps))))) lU406e@ls/false) (let ((lU407e@t lU406c@t)) (let ((lU4080@ls/false (lU30cf@syntax-dispatch lU407e@t '_))) (if lU4080@ls/false (apply (lambda () (values (list 'quote lU3fb3@e) lU3fb5@maps)) lU4080@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU407e@t)))))))))))))))))))))))) (set! lU3f3d@gen-ref (lambda (lU3f98@src lU3f99@var lU3f9a@level lU3f9b@maps) (if (= lU3f9a@level '0) (values lU3f99@var lU3f9b@maps) (if (null? lU3f9b@maps) (lU31af@syntax-violation '#f '"missing ellipsis in syntax form" lU3f98@src) (call-with-values (lambda () (lU3f3d@gen-ref lU3f98@src lU3f99@var (- lU3f9a@level '1) (cdr lU3f9b@maps))) (lambda (lU3fa4@lU3fa1 lU3fa5@lU3fa3) (let ((lU3fa8@outer-maps lU3fa5@lU3fa3) (lU3fa9@outer-var lU3fa4@lU3fa1)) (let ((lU3fac@t (assq lU3fa9@outer-var (car lU3f9b@maps)))) (if lU3fac@t ((lambda (lU3fae@b) (values (cdr lU3fae@b) lU3f9b@maps)) lU3fac@t) (let ((lU3fb0@inner-var (lU2e50@gen-lexical 'tmp))) (values lU3fb0@inner-var (cons (cons (cons lU3fa9@outer-var lU3fb0@inner-var) (car lU3f9b@maps)) lU3fa8@outer-maps)))))))))))) (set! lU3f3f@gen-append (lambda (lU3f94@x lU3f95@y) (if (fast-equal? lU3f95@y ''()) lU3f94@x (list 'append lU3f94@x lU3f95@y)))) (set! lU3f41@gen-mappend (lambda (lU3f90@e lU3f91@map-env) (list 'apply '(primitive append) (lU3f43@gen-map lU3f90@e lU3f91@map-env)))) (set! lU3f43@gen-map (lambda (lU3f7e@e lU3f7f@map-env) (let ((lU3f82@formals (map cdr lU3f7f@map-env)) (lU3f83@actuals (map (lambda (lU3f86@x) (list 'ref (car lU3f86@x))) lU3f7f@map-env))) (if (eq? (car lU3f7e@e) 'ref) (car lU3f83@actuals) (if (for-all (lambda (lU3f88@x) (and (eq? (car lU3f88@x) 'ref) (memq (cadr lU3f88@x) lU3f82@formals))) (cdr lU3f7e@e)) (let ((lU3f8a@args (map (let ((lU3f8c@r (map cons lU3f82@formals lU3f83@actuals))) (lambda (lU3f8e@x) (cdr (assq (cadr lU3f8e@x) lU3f8c@r)))) (cdr lU3f7e@e)))) (cons 'map (cons (list 'primitive (car lU3f7e@e)) lU3f8a@args))) (cons* 'map (list 'lambda lU3f82@formals lU3f7e@e) lU3f83@actuals)))))) (set! lU3f45@gen-cons (lambda (lU3f6e@e lU3f6f@x lU3f70@y lU3f71@xnew lU3f72@ynew) (let ((lU3f78@t (car lU3f72@ynew))) (if (memv lU3f78@t '(quote)) (if (eq? (car lU3f71@xnew) 'quote) (let ((lU3f7a@xnew (cadr lU3f71@xnew)) (lU3f7b@ynew (cadr lU3f72@ynew))) (if (and (eq? lU3f7a@xnew lU3f6f@x) (eq? lU3f7b@ynew lU3f70@y)) (list 'quote lU3f6e@e) (list 'quote (cons lU3f7a@xnew lU3f7b@ynew)))) (if (null? (cadr lU3f72@ynew)) (list 'list lU3f71@xnew) (list 'cons lU3f71@xnew lU3f72@ynew))) (if (memv lU3f78@t '(list)) (cons 'list (cons lU3f71@xnew (cdr lU3f72@ynew))) (list 'cons lU3f71@xnew lU3f72@ynew)))))) (set! lU3f47@gen-vector (lambda (lU3f68@e lU3f69@ls lU3f6a@lsnew) (if (eq? (car lU3f6a@lsnew) 'quote) (if (eq? (cadr lU3f6a@lsnew) lU3f69@ls) (list 'quote lU3f68@e) (list 'quote (list->vector (cadr lU3f6a@lsnew)))) (if (eq? (car lU3f6a@lsnew) 'list) (cons 'vector (cdr lU3f6a@lsnew)) (list 'list->vector lU3f6a@lsnew))))) (set! lU3f49@regen (lambda (lU3f62@x) (let ((lU3f64@t (car lU3f62@x))) (if (memv lU3f64@t '(ref)) (cadr lU3f62@x) (if (memv lU3f64@t '(primitive)) (list 'primitive (cadr lU3f62@x)) (if (memv lU3f64@t '(quote)) (list 'quote (cadr lU3f62@x)) (if (memv lU3f64@t '(lambda)) (lU2e2b@lU2d57@build-lambda '#f (cadr lU3f62@x) (lU3f49@regen (caddr lU3f62@x))) (if (memv lU3f64@t '(map)) (let ((lU3f66@ls (map lU3f49@regen (cdr lU3f62@x)))) (cons '(primitive ellipsis-map) lU3f66@ls)) (cons (list 'primitive (car lU3f62@x)) (map lU3f49@regen (cdr lU3f62@x))))))))))) (lambda (lU3f4a@e lU3f4b@r lU3f4c@mr) (let ((lU3f50@t lU3f4a@e)) (let ((lU3f52@ls/false (lU30cf@syntax-dispatch lU3f50@t '(_ any)))) (if lU3f52@ls/false (apply (lambda (lU3f54@x) (call-with-values (lambda () (lU3f3b@gen-syntax lU3f4a@e lU3f54@x lU3f4b@r '() lU30d1@ellipsis? '#f)) (lambda (lU3f5a@lU3f57 lU3f5b@lU3f59) (let ((lU3f5e@maps lU3f5b@lU3f59) (lU3f5f@e lU3f5a@lU3f57)) (lU3f49@regen lU3f5f@e))))) lU3f52@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU3f50@t)))))))) (set! lU4bab@lU30db@syntax-transformer lU30db@syntax-transformer) (set! lU30dd@core-macro-transformer (lambda (lU4082@name) (let ((lU4084@t lU4082@name)) (if (memv lU4084@t '(quote)) lU307f@quote-transformer (if (memv lU4084@t '(lambda)) lU3083@lambda-transformer (if (memv lU4084@t '(case-lambda)) lU3081@case-lambda-transformer (if (memv lU4084@t '(letrec)) lU3067@letrec-transformer (if (memv lU4084@t '(letrec*)) lU3069@letrec*-transformer (if (memv lU4084@t '(let)) lU3065@let-transformer (if (memv lU4084@t '(if)) lU3077@if-transformer (if (memv lU4084@t '(and)) lU3079@and-transformer (if (memv lU4084@t '(or)) lU307b@or-transformer (if (memv lU4084@t '(foreign-call)) lU30cb@foreign-call-transformer (if (memv lU4084@t '(syntax-case)) lU30d7@syntax-case-transformer (if (memv lU4084@t '(syntax)) lU30db@syntax-transformer (if (memv lU4084@t '(type-descriptor)) lU306d@type-descriptor-transformer (if (memv lU4084@t '(record-type-descriptor)) lU306f@record-type-descriptor-transformer (if (memv lU4084@t '(record-constructor-descriptor)) lU3071@record-constructor-descriptor-transformer (if (memv lU4084@t '(fluid-let-syntax)) lU306b@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" lU4082@name)))))))))))))))))))) (set! lU4bac@lU30dd@core-macro-transformer lU30dd@core-macro-transformer) (set! lU30df@symbol-macro (lambda (lU4086@x lU4087@set) (let ((lU408a@t lU4086@x)) (let ((lU408c@ls/false (lU30cf@syntax-dispatch lU408a@t '(_ any)))) (if (and lU408c@ls/false (apply (lambda (lU408e@name) (and (lU2ec8@id? lU408e@name) (memq (lU2eca@id->sym lU408e@name) lU4087@set))) lU408c@ls/false)) (apply (lambda (lU4090@name) (lU3085@bless (list 'quote lU4090@name))) lU408c@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU408a@t)))))) (set! lU4bad@lU30df@symbol-macro lU30df@symbol-macro) (set! lU30e1@macro-transformer (lambda (lU4092@x) (if (procedure? lU4092@x) lU4092@x (if (symbol? lU4092@x) (let ((lU4094@t lU4092@x)) (if (memv lU4094@t '(define-record-type)) lU30c3@define-record-type-macro (if (memv lU4094@t '(define-struct)) lU30c1@define-struct-macro (if (memv lU4094@t '(include)) lU30b7@include-macro (if (memv lU4094@t '(cond)) lU30b3@cond-macro (if (memv lU4094@t '(let)) lU308b@let-macro (if (memv lU4094@t '(do)) lU30ab@do-macro (if (memv lU4094@t '(or)) lU30af@or-macro (if (memv lU4094@t '(and)) lU30b1@and-macro (if (memv lU4094@t '(let*)) lU30ad@let*-macro (if (memv lU4094@t '(let-values)) lU308d@let-values-macro (if (memv lU4094@t '(let*-values)) lU308f@let*-values-macro (if (memv lU4094@t '(syntax-rules)) lU30bb@syntax-rules-macro (if (memv lU4094@t '(quasiquote)) lU30bd@quasiquote-macro (if (memv lU4094@t '(quasisyntax)) lU30bf@quasisyntax-macro (if (memv lU4094@t '(with-syntax)) lU3087@with-syntax-macro (if (memv lU4094@t '(when)) lU3073@when-macro (if (memv lU4094@t '(unless)) lU3075@unless-macro (if (memv lU4094@t '(case)) lU307d@case-macro (if (memv lU4094@t '(identifier-syntax)) lU30a9@identifier-syntax-macro (if (memv lU4094@t '(time)) lU30a1@time-macro (if (memv lU4094@t '(delay)) lU30a3@delay-macro (if (memv lU4094@t '(assert)) lU30a5@assert-macro (if (memv lU4094@t '(endianness)) lU30a7@endianness-macro (if (memv lU4094@t '(guard)) lU309d@guard-macro (if (memv lU4094@t '(define-enumeration)) lU309f@define-enumeration-macro (if (memv lU4094@t '(trace-lambda)) lU3091@trace-lambda-macro (if (memv lU4094@t '(trace-define)) lU3093@trace-define-macro (if (memv lU4094@t '(trace-define-syntax)) lU3095@trace-define-syntax-macro (if (memv lU4094@t '(trace-let-syntax)) lU3099@trace-let-syntax-macro (if (memv lU4094@t '(trace-letrec-syntax)) lU309b@trace-letrec-syntax-macro (if (memv lU4094@t '(define-condition-type)) lU30c5@define-condition-type-macro (if (memv lU4094@t '(parameterize)) lU30c9@parameterize-macro (if (memv lU4094@t '(include-into)) lU30b9@include-into-macro (if (memv lU4094@t '(eol-style)) (lambda (lU4096@x) (lU30df@symbol-macro lU4096@x '(none lf cr crlf nel crnel ls))) (if (memv lU4094@t '(error-handling-mode)) (lambda (lU4098@x) (lU30df@symbol-macro lU4098@x '(ignore raise replace))) (if (memv lU4094@t '(buffer-mode)) (lambda (lU409a@x) (lU30df@symbol-macro lU409a@x '(none line block))) (if (memv lU4094@t '(file-options)) lU2e43@file-options-macro (if (memv lU4094@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) lU30c7@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" lU4092@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" lU4092@x))))) (set! lU4bae@lU30e1@macro-transformer lU30e1@macro-transformer) (set! lU30e3@local-macro-transformer (lambda (lU409c@x) (car lU409c@x))) (set! lU4baf@lU30e3@local-macro-transformer lU30e3@local-macro-transformer) (set! lU30e5@do-macro-call (lambda (lU409e@transformer lU409f@expr) (let ((lU40a2@out (lU409e@transformer (lU2eb2@add-mark lU2eac@anti-mark lU409f@expr '#f)))) (begin (let lU40a6@f ((lU40a4@x lU40a2@out)) (if (not (lU2e94@stx? lU40a4@x)) (if (pair? lU40a4@x) (begin (lU40a6@f (car lU40a4@x)) (lU40a6@f (cdr lU40a4@x))) (if (vector? lU40a4@x) (vector-for-each lU40a6@f lU40a4@x) (if (symbol? lU40a4@x) (lU31af@syntax-violation '#f '"raw symbol encountered in output of macro" lU409f@expr lU40a4@x) (void)))) (void))) (lU2eb2@add-mark (lU2eaa@gen-mark) lU40a2@out lU409f@expr))))) (set! lU4bb0@lU30e5@do-macro-call lU30e5@do-macro-call) (set! lU30e7@chi-macro (lambda (lU40a8@p lU40a9@e) (lU30e5@do-macro-call (lU30e1@macro-transformer lU40a8@p) lU40a9@e))) (set! lU4bb1@lU30e7@chi-macro lU30e7@chi-macro) (set! lU30e9@chi-local-macro (lambda (lU40ac@p lU40ad@e) (lU30e5@do-macro-call (lU30e3@local-macro-transformer lU40ac@p) lU40ad@e))) (set! lU4bb2@lU30e9@chi-local-macro lU30e9@chi-local-macro) (set! lU30eb@chi-global-macro (lambda (lU40b0@p lU40b1@e) (let ((lU40b4@lib (car lU40b0@p)) (lU40b5@loc (cdr lU40b0@p))) (begin (lU2cdf@lU2b2e@visit-library lU40b4@lib) (let ((lU40b8@x (symbol-value lU40b5@loc))) (let ((lU40ba@transformer (if (procedure? lU40b8@x) lU40b8@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" lU40b8@x)))) (lU30e5@do-macro-call lU40ba@transformer lU40b1@e))))))) (set! lU4bb3@lU30eb@chi-global-macro lU30eb@chi-global-macro) (set! lU30ed@chi-expr* (lambda (lU40bc@e* lU40bd@r lU40be@mr) (if (null? lU40bc@e*) '() (let ((lU40c2@e (lU30f1@chi-expr (car lU40bc@e*) lU40bd@r lU40be@mr))) (cons lU40c2@e (lU30ed@chi-expr* (cdr lU40bc@e*) lU40bd@r lU40be@mr)))))) (set! lU4bb4@lU30ed@chi-expr* lU30ed@chi-expr*) (set! lU30ef@chi-application (lambda (lU40c4@e lU40c5@r lU40c6@mr) (let ((lU40ca@t lU40c4@e)) (let ((lU40cc@ls/false (lU30cf@syntax-dispatch lU40ca@t '(any . each-any)))) (if lU40cc@ls/false (apply (lambda (lU40ce@rator lU40cf@rands) (let ((lU40d2@rator (lU30f1@chi-expr lU40ce@rator lU40c5@r lU40c6@mr))) (cons lU40d2@rator (lU30ed@chi-expr* lU40cf@rands lU40c5@r lU40c6@mr)))) lU40cc@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU40ca@t)))))) (set! lU4bb5@lU30ef@chi-application lU30ef@chi-application) (set! lU30f1@chi-expr (lambda (lU40d4@e lU40d5@r lU40d6@mr) (call-with-values (lambda () (lU2eea@syntax-type lU40d4@e lU40d5@r)) (lambda (lU40e0@lU40db lU40e1@lU40dd lU40e2@lU40df) (let ((lU40e6@kwd lU40e2@lU40df) (lU40e7@value lU40e1@lU40dd) (lU40e8@type lU40e0@lU40db)) (let ((lU40ec@t lU40e8@type)) (if (memv lU40ec@t '(core-macro)) (let ((lU40ee@transformer (lU30dd@core-macro-transformer lU40e7@value))) (lU40ee@transformer lU40d4@e lU40d5@r lU40d6@mr)) (if (memv lU40ec@t '(global)) (let ((lU40f0@lib (car lU40e7@value))) (let ((lU40f2@loc (cdr lU40e7@value))) (begin ((lU3137@inv-collector) lU40f0@lib) lU40f2@loc))) (if (memv lU40ec@t '(core-prim)) (let ((lU40f4@name lU40e7@value)) (list 'primitive lU40f4@name)) (if (memv lU40ec@t '(call)) (lU30ef@chi-application lU40d4@e lU40d5@r lU40d6@mr) (if (memv lU40ec@t '(lexical)) (let ((lU40f6@lex (lU3059@lexical-var lU40e7@value))) lU40f6@lex) (if (memv lU40ec@t '(global-macro global-macro!)) (lU30f1@chi-expr (lU30eb@chi-global-macro lU40e7@value lU40d4@e) lU40d5@r lU40d6@mr) (if (memv lU40ec@t '(local-macro local-macro!)) (lU30f1@chi-expr (lU30e9@chi-local-macro lU40e7@value lU40d4@e) lU40d5@r lU40d6@mr) (if (memv lU40ec@t '(macro macro!)) (lU30f1@chi-expr (lU30e7@chi-macro lU40e7@value lU40d4@e) lU40d5@r lU40d6@mr) (if (memv lU40ec@t '(constant)) (let ((lU40f8@datum lU40e7@value)) (list 'quote lU40f8@datum)) (if (memv lU40ec@t '(set!)) (lU30f3@chi-set! lU40d4@e lU40d5@r lU40d6@mr) (if (memv lU40ec@t '(begin)) (let ((lU40fa@t lU40d4@e)) (let ((lU40fc@ls/false (lU30cf@syntax-dispatch lU40fa@t '(_ any . each-any)))) (if lU40fc@ls/false (apply (lambda (lU40fe@x lU40ff@x*) (lU2e2d@lU2d87@build-sequence '#f (lU30ed@chi-expr* (cons lU40fe@x lU40ff@x*) lU40d5@r lU40d6@mr))) lU40fc@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU40fa@t)))) (if (memv lU40ec@t '(let-syntax letrec-syntax)) (let ((lU4102@t lU40d4@e)) (let ((lU4104@ls/false (lU30cf@syntax-dispatch lU4102@t '(_ #(each (any any)) any . each-any)))) (if (and lU4104@ls/false (apply (lambda (lU4106@xlhs* lU4107@xrhs* lU4108@xbody lU4109@xbody*) (if (not (lU2ed0@valid-bound-ids? lU4106@xlhs*)) (lU31af@syntax-violation '#f '"invalid identifiers" lU40d4@e) (void))) lU4104@ls/false)) (apply (lambda (lU410e@xlhs* lU410f@xrhs* lU4110@xbody lU4111@xbody*) (let ((lU4116@xlab* (map lU2e54@gen-label lU410e@xlhs*))) (let ((lU4118@xrib (lU2e88@make-full-rib lU410e@xlhs* lU4116@xlab*))) (let ((lU411a@xb* (map (lambda (lU411c@x) (lU2f00@make-eval-transformer (lU3129@expand-transformer (if (eq? lU40e8@type 'let-syntax) lU411c@x (lU2eb4@add-subst lU4118@xrib lU411c@x)) lU40d6@mr))) lU410f@xrhs*))) (lU2e2d@lU2d87@build-sequence '#f (lU30ed@chi-expr* (map (lambda (lU411e@x) (lU2eb4@add-subst lU4118@xrib lU411e@x)) (cons lU4110@xbody lU4111@xbody*)) (append (map cons lU4116@xlab* lU411a@xb*) lU40d5@r) (append (map cons lU4116@xlab* lU411a@xb*) lU40d6@mr))))))) lU4104@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU4102@t)))) (if (memv lU40ec@t '(displaced-lexical)) (lU31af@syntax-violation '#f '"identifier out of context" lU40d4@e) (if (memv lU40ec@t '(syntax)) (lU31af@syntax-violation '#f '"reference to pattern variable outside a syntax form" lU40d4@e) (if (memv lU40ec@t '(define define-syntax module import library)) (lU31af@syntax-violation '#f (string-append (let ((lU4120@t lU40e8@type)) (if (memv lU4120@t '(define)) '"a definition" (if (memv lU4120@t '(define-syntax)) '"a define-syntax" (if (memv lU4120@t '(module)) '"a module definition" (if (memv lU4120@t '(library)) '"a library definition" (if (memv lU4120@t '(import)) '"an import declaration" (if (memv lU4120@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") lU40d4@e) (if (memv lU40ec@t '(mutable)) (lU31af@syntax-violation '#f '"attempt to reference an unexportable variable" lU40d4@e) (lU31af@syntax-violation '#f '"invalid expression" lU40d4@e))))))))))))))))))))))) (set! lU4bb6@lU30f1@chi-expr lU30f1@chi-expr) (set! lU30f3@chi-set! (lambda (lU4122@e lU4123@r lU4124@mr) (let ((lU4128@t lU4122@e)) (let ((lU412a@ls/false (lU30cf@syntax-dispatch lU4128@t '(_ any any)))) (if (and lU412a@ls/false (apply (lambda (lU412c@x lU412d@v) (lU2ec8@id? lU412c@x)) lU412a@ls/false)) (apply (lambda (lU4130@x lU4131@v) (call-with-values (lambda () (lU2eea@syntax-type lU4130@x lU4123@r)) (lambda (lU413a@lU4135 lU413b@lU4137 lU413c@lU4139) (let ((lU4140@kwd lU413c@lU4139) (lU4141@value lU413b@lU4137) (lU4142@type lU413a@lU4135)) (let ((lU4146@t lU4142@type)) (if (memv lU4146@t '(lexical)) (begin (lU305d@set-lexical-mutable! lU4141@value '#t) (list 'set! (lU3059@lexical-var lU4141@value) (lU30f1@chi-expr lU4131@v lU4123@r lU4124@mr))) (if (memv lU4146@t '(core-prim)) (lU31af@syntax-violation '#f '"cannot modify imported core primitive" lU4122@e) (if (memv lU4146@t '(global)) (lU31af@syntax-violation '#f '"attempt to modify imported binding" lU4122@e) (if (memv lU4146@t '(global-macro!)) (lU30f1@chi-expr (lU30eb@chi-global-macro lU4141@value lU4122@e) lU4123@r lU4124@mr) (if (memv lU4146@t '(local-macro!)) (lU30f1@chi-expr (lU30e9@chi-local-macro lU4141@value lU4122@e) lU4123@r lU4124@mr) (if (memv lU4146@t '(mutable)) (lU31af@syntax-violation '#f '"attempt to assign to an unexportable variable" lU4122@e) (lU31af@syntax-violation '#f '"invalid syntax" lU4122@e)))))))))))) lU412a@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU4128@t)))))) (set! lU4bb7@lU30f3@chi-set! lU30f3@chi-set!) (set! lU30f5@verify-formals (lambda (lU4148@fmls lU4149@stx) (let ((lU414c@t lU4148@fmls)) (let ((lU414e@ls/false (lU30cf@syntax-dispatch lU414c@t 'each-any))) (if lU414e@ls/false (apply (lambda (lU4150@x*) (if (not (lU2ed0@valid-bound-ids? lU4150@x*)) (lU3089@invalid-fmls-error lU4149@stx lU4148@fmls) (void))) lU414e@ls/false) (let ((lU4152@t lU414c@t)) (let ((lU4154@ls/false (lU30cf@syntax-dispatch lU4152@t '#(each+ any () any)))) (if lU4154@ls/false (apply (lambda (lU4156@x* lU4157@x) (if (not (lU2ed0@valid-bound-ids? (cons lU4157@x lU4156@x*))) (lU3089@invalid-fmls-error lU4149@stx lU4148@fmls) (void))) lU4154@ls/false) (let ((lU415a@t lU4152@t)) (let ((lU415c@ls/false (lU30cf@syntax-dispatch lU415a@t '_))) (if lU415c@ls/false (apply (lambda () (lU31af@syntax-violation '#f '"invalid syntax" lU4149@stx)) lU415c@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU415a@t)))))))))))) (set! lU4bb8@lU30f5@verify-formals lU30f5@verify-formals) (set! lU30f7@chi-lambda-clause (lambda (lU415e@stx lU415f@fmls lU4160@body* lU4161@r lU4162@mr) (let ((lU4168@t lU415f@fmls)) (let ((lU416a@ls/false (lU30cf@syntax-dispatch lU4168@t 'each-any))) (if lU416a@ls/false (apply (lambda (lU416c@x*) (begin (lU30f5@verify-formals lU415f@fmls lU415e@stx) (let ((lU416e@lex* (map lU2e50@gen-lexical lU416c@x*)) (lU416f@lab* (map lU2e54@gen-label lU416c@x*))) (values lU416e@lex* (lU3107@chi-internal (lU2eb4@add-subst (lU2e88@make-full-rib lU416c@x* lU416f@lab*) lU4160@body*) (lU3061@add-lexicals lU416f@lab* lU416e@lex* lU4161@r) lU4162@mr))))) lU416a@ls/false) (let ((lU4172@t lU4168@t)) (let ((lU4174@ls/false (lU30cf@syntax-dispatch lU4172@t '#(each+ any () any)))) (if lU4174@ls/false (apply (lambda (lU4176@x* lU4177@x) (begin (lU30f5@verify-formals lU415f@fmls lU415e@stx) (let ((lU417a@lex* (map lU2e50@gen-lexical lU4176@x*)) (lU417b@lab* (map lU2e54@gen-label lU4176@x*)) (lU417c@lex (lU2e50@gen-lexical lU4177@x)) (lU417d@lab (lU2e54@gen-label lU4177@x))) (values (append lU417a@lex* lU417c@lex) (lU3107@chi-internal (lU2eb4@add-subst (lU2e88@make-full-rib (cons lU4177@x lU4176@x*) (cons lU417d@lab lU417b@lab*)) lU4160@body*) (lU3061@add-lexicals (cons lU417d@lab lU417b@lab*) (cons lU417c@lex lU417a@lex*) lU4161@r) lU4162@mr))))) lU4174@ls/false) (let ((lU4182@t lU4172@t)) (let ((lU4184@ls/false (lU30cf@syntax-dispatch lU4182@t '_))) (if lU4184@ls/false (apply (lambda () (lU31af@syntax-violation '#f '"invalid syntax" lU415f@fmls)) lU4184@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU4182@t)))))))))))) (set! lU4bb9@lU30f7@chi-lambda-clause lU30f7@chi-lambda-clause) (set! lU30f9@chi-lambda-clause* (lambda (lU4186@stx lU4187@fmls* lU4188@body** lU4189@r lU418a@mr) (if (null? lU4187@fmls*) (values '() '()) (call-with-values (lambda () (lU30f7@chi-lambda-clause lU4186@stx (car lU4187@fmls*) (car lU4188@body**) lU4189@r lU418a@mr)) (lambda (lU4194@lU4191 lU4195@lU4193) (let ((lU4198@b lU4195@lU4193) (lU4199@a lU4194@lU4191)) (call-with-values (lambda () (lU30f9@chi-lambda-clause* lU4186@stx (cdr lU4187@fmls*) (cdr lU4188@body**) lU4189@r lU418a@mr)) (lambda (lU41a0@lU419d lU41a1@lU419f) (let ((lU41a4@b* lU41a1@lU419f) (lU41a5@a* lU41a0@lU419d)) (values (cons lU4199@a lU41a5@a*) (cons lU4198@b lU41a4@b*))))))))))) (set! lU4bba@lU30f9@chi-lambda-clause* lU30f9@chi-lambda-clause*) (set! lU30fb@chi-defun (lambda (lU41a8@x lU41a9@r lU41aa@mr) (let ((lU41ae@fmls (car lU41a8@x)) (lU41af@body* (cdr lU41a8@x))) (call-with-values (lambda () (lU30f7@chi-lambda-clause lU41ae@fmls lU41ae@fmls lU41af@body* lU41a9@r lU41aa@mr)) (lambda (lU41b6@lU41b3 lU41b7@lU41b5) (let ((lU41ba@body lU41b7@lU41b5) (lU41bb@fmls lU41b6@lU41b3)) (lU2e2b@lU2d57@build-lambda '#f lU41bb@fmls lU41ba@body))))))) (set! lU4bbb@lU30fb@chi-defun lU30fb@chi-defun) (set! lU30fd@chi-rhs (lambda (lU41be@rhs lU41bf@r lU41c0@mr) (let ((lU41c4@t (car lU41be@rhs))) (if (memv lU41c4@t '(defun)) (lU30fb@chi-defun (cdr lU41be@rhs) lU41bf@r lU41c0@mr) (if (memv lU41c4@t '(expr)) (let ((lU41c6@expr (cdr lU41be@rhs))) (lU30f1@chi-expr lU41c6@expr lU41bf@r lU41c0@mr)) (if (memv lU41c4@t '(top-expr)) (let ((lU41c8@expr (cdr lU41be@rhs))) (lU2e2d@lU2d87@build-sequence '#f (list (lU30f1@chi-expr lU41c8@expr lU41bf@r lU41c0@mr) (lU2e2e@lU2d89@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" lU41be@rhs))))))) (set! lU4bbc@lU30fd@chi-rhs lU30fd@chi-rhs) (set! lU30ff@expand-interaction-rhs*/init* (lambda (lU41ca@lhs* lU41cb@rhs* lU41cc@init* lU41cd@r lU41ce@mr) (let lU41d8@f ((lU41d4@lhs* lU41ca@lhs*) (lU41d5@rhs* lU41cb@rhs*)) (if (null? lU41d4@lhs*) (map (lambda (lU41da@x) (lU30f1@chi-expr lU41da@x lU41cd@r lU41ce@mr)) lU41cc@init*) (let ((lU41dc@lhs (car lU41d4@lhs*)) (lU41dd@rhs (car lU41d5@rhs*))) (let ((lU41e0@t (car lU41dd@rhs))) (if (memv lU41e0@t '(defun)) (let ((lU41e2@rhs (lU30fb@chi-defun (cdr lU41dd@rhs) lU41cd@r lU41ce@mr))) (cons (list 'set! lU41dc@lhs lU41e2@rhs) (lU41d8@f (cdr lU41d4@lhs*) (cdr lU41d5@rhs*)))) (if (memv lU41e0@t '(expr)) (let ((lU41e4@rhs (lU30f1@chi-expr (cdr lU41dd@rhs) lU41cd@r lU41ce@mr))) (cons (list 'set! lU41dc@lhs lU41e4@rhs) (lU41d8@f (cdr lU41d4@lhs*) (cdr lU41d5@rhs*)))) (if (memv lU41e0@t '(top-expr)) (let ((lU41e6@e (lU30f1@chi-expr (cdr lU41dd@rhs) lU41cd@r lU41ce@mr))) (cons lU41e6@e (lU41d8@f (cdr lU41d4@lhs*) (cdr lU41d5@rhs*)))) (error 'expand-interaction '"invallid" lU41dd@rhs)))))))))) (set! lU4bbd@lU30ff@expand-interaction-rhs*/init* lU30ff@expand-interaction-rhs*/init*) (set! lU3101@chi-rhs* (lambda (lU41e8@rhs* lU41e9@r lU41ea@mr) (let lU41f0@f ((lU41ee@ls lU41e8@rhs*)) (if (null? lU41ee@ls) '() (let ((lU41f2@a (lU30fd@chi-rhs (car lU41ee@ls) lU41e9@r lU41ea@mr))) (cons lU41f2@a (lU41f0@f (cdr lU41ee@ls)))))))) (set! lU4bbe@lU3101@chi-rhs* lU3101@chi-rhs*) (set! lU3103@find-bound=? (lambda (lU41f4@x lU41f5@lhs* lU41f6@rhs*) (if (null? lU41f5@lhs*) '#f (if (lU2ecc@bound-id=? lU41f4@x (car lU41f5@lhs*)) (car lU41f6@rhs*) (lU3103@find-bound=? lU41f4@x (cdr lU41f5@lhs*) (cdr lU41f6@rhs*)))))) (set! lU4bbf@lU3103@find-bound=? lU3103@find-bound=?) (set! lU3105@find-dups (lambda (lU41fa@ls) (let lU4200@f ((lU41fc@ls lU41fa@ls) (lU41fd@dups '())) (if (null? lU41fc@ls) lU41fd@dups (let ((lU4202@t (lU3103@find-bound=? (car lU41fc@ls) (cdr lU41fc@ls) (cdr lU41fc@ls)))) (if lU4202@t ((lambda (lU4204@x) (lU4200@f (cdr lU41fc@ls) (cons (list (car lU41fc@ls) lU4204@x) lU41fd@dups))) lU4202@t) (lU4200@f (cdr lU41fc@ls) lU41fd@dups))))))) (set! lU4bc0@lU3105@find-dups lU3105@find-dups) (set! lU3107@chi-internal (lambda (lU4206@e* lU4207@r lU4208@mr) (let ((lU420c@rib (lU2e7c@make-empty-rib))) (call-with-values (lambda () (lU3127@chi-body* (map (lambda (lU421e@x) (lU2eb4@add-subst lU420c@rib lU421e@x)) (lU2ec6@syntax->list lU4206@e*)) lU4207@r lU4208@mr '() '() '() '() '() lU420c@rib '#f)) (lambda (lU4220@lU420f lU4221@lU4211 lU4222@lU4213 lU4223@lU4215 lU4224@lU4217 lU4225@lU4219 lU4226@lU421b lU4227@lU421d) (let ((lU4230@_exp* lU4227@lU421d) (lU4231@kwd* lU4226@lU421b) (lU4232@mod** lU4225@lU4219) (lU4233@rhs* lU4224@lU4217) (lU4234@lex* lU4223@lU4215) (lU4235@mr lU4222@lU4213) (lU4236@r lU4221@lU4211) (lU4237@e* lU4220@lU420f)) (begin (if (null? lU4237@e*) (lU31af@syntax-violation '#f '"no expression in body" lU4237@e*) (void)) (let ((lU4240@init* (lU30ed@chi-expr* (append (apply append (reverse lU4232@mod**)) lU4237@e*) lU4236@r lU4235@mr))) (let ((lU4242@rhs* (lU3101@chi-rhs* lU4233@rhs* lU4236@r lU4235@mr))) (lU2e32@lU2d91@build-letrec* '#f (reverse lU4234@lex*) (reverse lU4242@rhs*) (lU2e2d@lU2d87@build-sequence '#f lU4240@init*))))))))))) (set! lU4bc1@lU3107@chi-internal lU3107@chi-internal) (set! lU3109@parse-module (lambda (lU4244@e) (let ((lU4246@t lU4244@e)) (let ((lU4248@ls/false (lU30cf@syntax-dispatch lU4246@t '(_ each-any . each-any)))) (if lU4248@ls/false (apply (lambda (lU424a@export* lU424b@b*) (begin (if (not (for-all lU2ec8@id? lU424a@export*)) (lU31af@syntax-violation '#f '"module exports must be identifiers" lU4244@e) (void)) (values '#f (list->vector lU424a@export*) lU424b@b*))) lU4248@ls/false) (let ((lU424e@t lU4246@t)) (let ((lU4250@ls/false (lU30cf@syntax-dispatch lU424e@t '(_ any each-any . each-any)))) (if lU4250@ls/false (apply (lambda (lU4252@name lU4253@export* lU4254@b*) (begin (if (not (lU2ec8@id? lU4252@name)) (lU31af@syntax-violation '#f '"module name must be an identifier" lU4244@e) (void)) (if (not (for-all lU2ec8@id? lU4253@export*)) (lU31af@syntax-violation '#f '"module exports must be identifiers" lU4244@e) (void)) (values lU4252@name (list->vector lU4253@export*) lU4254@b*))) lU4250@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU424e@t))))))))) (set! lU4bc2@lU3109@parse-module lU3109@parse-module) (set! lU3113@module-interface? (lambda (lU4258@x) (and (simple-struct? lU4258@x) (eq? (simple-struct-name lU4258@x) 'module-interface)))) (set! lU4bc3@lU3113@module-interface? lU3113@module-interface?) (set! lU3115@module-interface-first-mark (lambda (lU425a@x) (simple-struct-ref lU425a@x '0))) (set! lU4bc4@lU3115@module-interface-first-mark lU3115@module-interface-first-mark) (set! lU3117@set-module-interface-first-mark! (lambda (lU425c@x lU425d@val) (simple-struct-set! lU425c@x '0 lU425d@val))) (set! lU4bc5@lU3117@set-module-interface-first-mark! lU3117@set-module-interface-first-mark!) (set! lU3119@module-interface-exp-id-vec (lambda (lU4260@x) (simple-struct-ref lU4260@x '1))) (set! lU4bc6@lU3119@module-interface-exp-id-vec lU3119@module-interface-exp-id-vec) (set! lU311b@set-module-interface-exp-id-vec! (lambda (lU4262@x lU4263@val) (simple-struct-set! lU4262@x '1 lU4263@val))) (set! lU4bc7@lU311b@set-module-interface-exp-id-vec! lU311b@set-module-interface-exp-id-vec!) (set! lU311d@module-interface-exp-lab-vec (lambda (lU4266@x) (simple-struct-ref lU4266@x '2))) (set! lU4bc8@lU311d@module-interface-exp-lab-vec lU311d@module-interface-exp-lab-vec) (set! lU311f@set-module-interface-exp-lab-vec! (lambda (lU4268@x lU4269@val) (simple-struct-set! lU4268@x '2 lU4269@val))) (set! lU4bc9@lU311f@set-module-interface-exp-lab-vec! lU311f@set-module-interface-exp-lab-vec!) (set! lU3121@dummy '3) (set! lU4bca@lU3121@dummy lU3121@dummy) (set! lU3123@module-interface-exp-id* (lambda (lU426c@iface lU426d@id) (let ((lU4271@diff-marks '#f)) (begin (set! lU4271@diff-marks (lambda (lU4278@ls lU4279@x) (begin (if (null? lU4278@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((lU427c@a (car lU4278@ls))) (if (eq? lU427c@a lU4279@x) '() (cons lU427c@a (lU4271@diff-marks (cdr lU4278@ls) lU4279@x))))))) (let ((lU4272@diff (lU4271@diff-marks (lU2e9a@stx-mark* lU426d@id) (lU3115@module-interface-first-mark lU426c@iface))) (lU4273@id-vec (lU3119@module-interface-exp-id-vec lU426c@iface))) (if (null? lU4272@diff) lU4273@id-vec (vector-map (lambda (lU4276@x) (make-simple-struct 'stx '5 (list (lU2e96@stx-expr lU4276@x) (append lU4272@diff (lU2e9a@stx-mark* lU4276@x)) '() '()))) lU4273@id-vec))))))) (set! lU4bcb@lU3123@module-interface-exp-id* lU3123@module-interface-exp-id*) (set! lU3125@chi-internal-module (lambda (lU427e@e lU427f@r lU4280@mr lU4281@lex* lU4282@rhs* lU4283@mod** lU4284@kwd*) (call-with-values (lambda () (lU3109@parse-module lU427e@e)) (lambda (lU4292@lU428d lU4293@lU428f lU4294@lU4291) (let ((lU4298@e* lU4294@lU4291) (lU4299@exp-id* lU4293@lU428f) (lU429a@name lU4292@lU428d)) (let ((lU429e@rib (lU2e7c@make-empty-rib))) (let ((lU42a0@e* (map (lambda (lU42a2@x) (lU2eb4@add-subst lU429e@rib lU42a2@x)) (lU2ec6@syntax->list lU4298@e*)))) (call-with-values (lambda () (lU3127@chi-body* lU42a0@e* lU427f@r lU4280@mr lU4281@lex* lU4282@rhs* lU4283@mod** lU4284@kwd* '() lU429e@rib '#f)) (lambda (lU42b4@lU42a5 lU42b5@lU42a7 lU42b6@lU42a9 lU42b7@lU42ab lU42b8@lU42ad lU42b9@lU42af lU42ba@lU42b1 lU42bb@lU42b3) (let ((lU42c4@_exp* lU42bb@lU42b3) (lU42c5@kwd* lU42ba@lU42b1) (lU42c6@mod** lU42b9@lU42af) (lU42c7@rhs* lU42b8@lU42ad) (lU42c8@lex* lU42b7@lU42ab) (lU42c9@mr lU42b6@lU42a9) (lU42ca@r lU42b5@lU42a7) (lU42cb@e* lU42b4@lU42a5)) (let ((lU42d4@exp-lab* (vector-map (lambda (lU42d8@x) (or (lU2ede@id->label (make-simple-struct 'stx '5 (list (lU2eca@id->sym lU42d8@x) (lU2e9a@stx-mark* lU42d8@x) (list lU429e@rib) '()))) (lU31af@syntax-violation '#f '"cannot find module export" lU42d8@x))) lU4299@exp-id*)) (lU42d5@mod** (cons lU42cb@e* lU42c6@mod**))) (if (not lU429a@name) (values lU42c8@lex* lU42c7@rhs* lU4299@exp-id* lU42d4@exp-lab* lU42ca@r lU42c9@mr lU42d5@mod** lU42c5@kwd*) (let ((lU42da@lab (lU2e54@gen-label 'module)) (lU42db@iface (make-simple-struct 'module-interface '4 (list (car (lU2e9a@stx-mark* lU429a@name)) (vector-map (lambda (lU42de@x) (make-simple-struct 'stx '5 (list (lU2e96@stx-expr lU42de@x) (lU2e9a@stx-mark* lU42de@x) '() '()))) lU4299@exp-id*) lU42d4@exp-lab*)))) (values lU42c8@lex* lU42c7@rhs* (vector lU429a@name) (vector lU42da@lab) (cons (cons lU42da@lab (cons '$module lU42db@iface)) lU42ca@r) (cons (cons lU42da@lab (cons '$module lU42db@iface)) lU42c9@mr) lU42d5@mod** lU42c5@kwd*)))))))))))))) (set! lU4bcc@lU3125@chi-internal-module lU3125@chi-internal-module) (set! lU3127@chi-body* (lambda (lU42e0@e* lU42e1@r lU42e2@mr lU42e3@lex* lU42e4@rhs* lU42e5@mod** lU42e6@kwd* lU42e7@exp* lU42e8@rib lU42e9@top?) (if (null? lU42e0@e*) (values lU42e0@e* lU42e1@r lU42e2@mr lU42e3@lex* lU42e4@rhs* lU42e5@mod** lU42e6@kwd* lU42e7@exp*) (let ((lU42f4@e (car lU42e0@e*))) (call-with-values (lambda () (lU2eea@syntax-type lU42f4@e lU42e1@r)) (lambda (lU42fc@lU42f7 lU42fd@lU42f9 lU42fe@lU42fb) (let ((lU4302@kwd lU42fe@lU42fb) (lU4303@value lU42fd@lU42f9) (lU4304@type lU42fc@lU42f7)) (let ((lU4308@kwd* (if (lU2ec8@id? lU4302@kwd) (cons lU4302@kwd lU42e6@kwd*) lU42e6@kwd*))) (let ((lU430a@t lU4304@type)) (if (memv lU430a@t '(define)) (call-with-values (lambda () (lU3051@parse-define lU42f4@e)) (lambda (lU4310@lU430d lU4311@lU430f) (let ((lU4314@rhs lU4311@lU430f) (lU4315@id lU4310@lU430d)) (begin (if (lU2ed4@bound-id-member? lU4315@id lU4308@kwd*) (lU31af@syntax-violation '#f '"cannot redefine keyword" lU42f4@e) (void)) (call-with-values (lambda () (lU2e58@gen-define-label+loc lU4315@id lU42e8@rib)) (lambda (lU431c@lU4319 lU431d@lU431b) (let ((lU4320@lex lU431d@lU431b) (lU4321@lab lU431c@lU4319)) (begin (lU2e7e@extend-rib! lU42e8@rib lU4315@id lU4321@lab) (lU3127@chi-body* (cdr lU42e0@e*) (lU305f@add-lexical lU4321@lab lU4320@lex lU42e1@r) lU42e2@mr (cons lU4320@lex lU42e3@lex*) (cons lU4314@rhs lU42e4@rhs*) lU42e5@mod** lU4308@kwd* lU42e7@exp* lU42e8@rib lU42e9@top?))))))))) (if (memv lU430a@t '(define-syntax)) (call-with-values (lambda () (lU3053@parse-define-syntax lU42f4@e)) (lambda (lU4328@lU4325 lU4329@lU4327) (let ((lU432c@rhs lU4329@lU4327) (lU432d@id lU4328@lU4325)) (begin (if (lU2ed4@bound-id-member? lU432d@id lU4308@kwd*) (lU31af@syntax-violation '#f '"cannot redefine keyword" lU42f4@e) (void)) (let ((lU4330@lab (lU2e5a@gen-define-label lU432d@id lU42e8@rib)) (lU4331@expanded-rhs (lU3129@expand-transformer lU432c@rhs lU42e2@mr))) (begin (lU2e7e@extend-rib! lU42e8@rib lU432d@id lU4330@lab) (let ((lU4334@b (lU2f00@make-eval-transformer lU4331@expanded-rhs))) (lU3127@chi-body* (cdr lU42e0@e*) (cons (cons lU4330@lab lU4334@b) lU42e1@r) (cons (cons lU4330@lab lU4334@b) lU42e2@mr) lU42e3@lex* lU42e4@rhs* lU42e5@mod** lU4308@kwd* lU42e7@exp* lU42e8@rib lU42e9@top?)))))))) (if (memv lU430a@t '(let-syntax letrec-syntax)) (let ((lU4336@t lU42f4@e)) (let ((lU4338@ls/false (lU30cf@syntax-dispatch lU4336@t '(_ #(each (any any)) . each-any)))) (if (and lU4338@ls/false (apply (lambda (lU433a@xlhs* lU433b@xrhs* lU433c@xbody*) (if (not (lU2ed0@valid-bound-ids? lU433a@xlhs*)) (lU31af@syntax-violation '#f '"invalid identifiers" lU42f4@e) (void))) lU4338@ls/false)) (apply (lambda (lU4340@xlhs* lU4341@xrhs* lU4342@xbody*) (let ((lU4346@xlab* (map lU2e54@gen-label lU4340@xlhs*))) (let ((lU4348@xrib (lU2e88@make-full-rib lU4340@xlhs* lU4346@xlab*))) (let ((lU434a@xb* (map (lambda (lU434c@x) (lU2f00@make-eval-transformer (lU3129@expand-transformer (if (eq? lU4304@type 'let-syntax) lU434c@x (lU2eb4@add-subst lU4348@xrib lU434c@x)) lU42e2@mr))) lU4341@xrhs*))) (lU3127@chi-body* (append (map (lambda (lU434e@x) (lU2eb4@add-subst lU4348@xrib lU434e@x)) lU4342@xbody*) (cdr lU42e0@e*)) (append (map cons lU4346@xlab* lU434a@xb*) lU42e1@r) (append (map cons lU4346@xlab* lU434a@xb*) lU42e2@mr) lU42e3@lex* lU42e4@rhs* lU42e5@mod** lU4308@kwd* lU42e7@exp* lU42e8@rib lU42e9@top?))))) lU4338@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU4336@t)))) (if (memv lU430a@t '(begin)) (let ((lU4350@t lU42f4@e)) (let ((lU4352@ls/false (lU30cf@syntax-dispatch lU4350@t '(_ . each-any)))) (if lU4352@ls/false (apply (lambda (lU4354@x*) (lU3127@chi-body* (append lU4354@x* (cdr lU42e0@e*)) lU42e1@r lU42e2@mr lU42e3@lex* lU42e4@rhs* lU42e5@mod** lU4308@kwd* lU42e7@exp* lU42e8@rib lU42e9@top?)) lU4352@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU4350@t)))) (if (memv lU430a@t '(global-macro global-macro!)) (lU3127@chi-body* (cons (lU2eb4@add-subst lU42e8@rib (lU30eb@chi-global-macro lU4303@value lU42f4@e)) (cdr lU42e0@e*)) lU42e1@r lU42e2@mr lU42e3@lex* lU42e4@rhs* lU42e5@mod** lU4308@kwd* lU42e7@exp* lU42e8@rib lU42e9@top?) (if (memv lU430a@t '(local-macro local-macro!)) (lU3127@chi-body* (cons (lU2eb4@add-subst lU42e8@rib (lU30e9@chi-local-macro lU4303@value lU42f4@e)) (cdr lU42e0@e*)) lU42e1@r lU42e2@mr lU42e3@lex* lU42e4@rhs* lU42e5@mod** lU4308@kwd* lU42e7@exp* lU42e8@rib lU42e9@top?) (if (memv lU430a@t '(macro macro!)) (lU3127@chi-body* (cons (lU2eb4@add-subst lU42e8@rib (lU30e7@chi-macro lU4303@value lU42f4@e)) (cdr lU42e0@e*)) lU42e1@r lU42e2@mr lU42e3@lex* lU42e4@rhs* lU42e5@mod** lU4308@kwd* lU42e7@exp* lU42e8@rib lU42e9@top?) (if (memv lU430a@t '(module)) (call-with-values (lambda () (lU3125@chi-internal-module lU42f4@e lU42e1@r lU42e2@mr lU42e3@lex* lU42e4@rhs* lU42e5@mod** lU4308@kwd*)) (lambda (lU4366@lU4357 lU4367@lU4359 lU4368@lU435b lU4369@lU435d lU436a@lU435f lU436b@lU4361 lU436c@lU4363 lU436d@lU4365) (let ((lU4376@kwd* lU436d@lU4365) (lU4377@mod** lU436c@lU4363) (lU4378@mr lU436b@lU4361) (lU4379@r lU436a@lU435f) (lU437a@m-exp-lab* lU4369@lU435d) (lU437b@m-exp-id* lU4368@lU435b) (lU437c@rhs* lU4367@lU4359) (lU437d@lex* lU4366@lU4357)) (begin (vector-for-each (lambda (lU4386@id lU4387@lab) (lU2e7e@extend-rib! lU42e8@rib lU4386@id lU4387@lab)) lU437b@m-exp-id* lU437a@m-exp-lab*) (lU3127@chi-body* (cdr lU42e0@e*) lU4379@r lU4378@mr lU437d@lex* lU437c@rhs* lU4377@mod** lU4376@kwd* lU42e7@exp* lU42e8@rib lU42e9@top?))))) (if (memv lU430a@t '(library)) (begin (lU3191@library-expander (lU2edc@stx->datum lU42f4@e)) (lU3127@chi-body* (cdr lU42e0@e*) lU42e1@r lU42e2@mr lU42e3@lex* lU42e4@rhs* lU42e5@mod** lU4308@kwd* lU42e7@exp* lU42e8@rib lU42e9@top?)) (if (memv lU430a@t '(export)) (let ((lU438a@t lU42f4@e)) (let ((lU438c@ls/false (lU30cf@syntax-dispatch lU438a@t '(_ . each-any)))) (if lU438c@ls/false (apply (lambda (lU438e@exp-decl*) (lU3127@chi-body* (cdr lU42e0@e*) lU42e1@r lU42e2@mr lU42e3@lex* lU42e4@rhs* lU42e5@mod** lU4308@kwd* (append lU438e@exp-decl* lU42e7@exp*) lU42e8@rib lU42e9@top?)) lU438c@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU438a@t)))) (if (memv lU430a@t '(import)) (let ((lU4391@module-import? '#f) (lU4393@module-import '#f) (lU4395@library-import '#f)) (begin (set! lU4391@module-import? (lambda (lU43e4@e) (let ((lU43e6@t lU43e4@e)) (let ((lU43e8@ls/false (lU30cf@syntax-dispatch lU43e6@t '(_ any)))) (if (and lU43e8@ls/false (apply (lambda (lU43ea@id) (lU2ec8@id? lU43ea@id)) lU43e8@ls/false)) (apply (lambda (lU43ec@id) '#t) lU43e8@ls/false) (let ((lU43ee@t lU43e6@t)) (let ((lU43f0@ls/false (lU30cf@syntax-dispatch lU43ee@t '(_ . each-any)))) (if lU43f0@ls/false (apply (lambda (lU43f2@imp*) '#f) lU43f0@ls/false) (let ((lU43f4@t lU43ee@t)) (let ((lU43f6@ls/false (lU30cf@syntax-dispatch lU43f4@t '_))) (if lU43f6@ls/false (apply (lambda () (lU31af@syntax-violation '#f '"malformed import form" lU43e4@e)) lU43f6@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU43f4@t)))))))))))) (set! lU4393@module-import (lambda (lU43c2@e lU43c3@r) (let ((lU43c6@t lU43c2@e)) (let ((lU43c8@ls/false (lU30cf@syntax-dispatch lU43c6@t '(_ any)))) (if (and lU43c8@ls/false (apply (lambda (lU43ca@id) (lU2ec8@id? lU43ca@id)) lU43c8@ls/false)) (apply (lambda (lU43cc@id) (call-with-values (lambda () (lU2eea@syntax-type lU43cc@id lU43c3@r)) (lambda (lU43d4@lU43cf lU43d5@lU43d1 lU43d6@lU43d3) (let ((lU43da@kwd lU43d6@lU43d3) (lU43db@value lU43d5@lU43d1) (lU43dc@type lU43d4@lU43cf)) (let ((lU43e0@t lU43dc@type)) (if (memv lU43e0@t '($module)) (let ((lU43e2@iface lU43db@value)) (values (lU3123@module-interface-exp-id* lU43e2@iface lU43cc@id) (lU311d@module-interface-exp-lab-vec lU43e2@iface))) (lU31af@syntax-violation '#f '"invalid import" lU43c2@e))))))) lU43c8@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU43c6@t)))))) (set! lU4395@library-import (lambda (lU43a6@e) (let ((lU43a8@t lU43a6@e)) (let ((lU43aa@ls/false (lU30cf@syntax-dispatch lU43a8@t '(any . each-any)))) (if lU43aa@ls/false (apply (lambda (lU43ac@ctxt lU43ad@imp*) (call-with-values (lambda () (lU3131@parse-import-spec* (lU31b5@syntax->datum lU43ad@imp*))) (lambda (lU43b4@lU43b1 lU43b5@lU43b3) (let ((lU43b8@subst-labels lU43b5@lU43b3) (lU43b9@subst-names lU43b4@lU43b1)) (values (vector-map (lambda (lU43bc@name) (lU2ea8@datum->stx lU43ac@ctxt lU43bc@name)) lU43b9@subst-names) lU43b8@subst-labels))))) lU43aa@ls/false) (let ((lU43be@t lU43a8@t)) (let ((lU43c0@ls/false (lU30cf@syntax-dispatch lU43be@t '_))) (if lU43c0@ls/false (apply (lambda () (lU31af@syntax-violation '#f '"invalid import form" lU43a6@e)) lU43c0@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU43be@t))))))))) (begin (call-with-values (lambda () (if (lU4391@module-import? lU42f4@e) (lU4393@module-import lU42f4@e lU42e1@r) (lU4395@library-import lU42f4@e))) (lambda (lU439a@lU4397 lU439b@lU4399) (let ((lU439e@lab* lU439b@lU4399) (lU439f@id* lU439a@lU4397)) (vector-for-each (lambda (lU43a2@id lU43a3@lab) (lU2e7e@extend-rib! lU42e8@rib lU43a2@id lU43a3@lab)) lU439f@id* lU439e@lab*)))) (lU3127@chi-body* (cdr lU42e0@e*) lU42e1@r lU42e2@mr lU42e3@lex* lU42e4@rhs* lU42e5@mod** lU4308@kwd* lU42e7@exp* lU42e8@rib lU42e9@top?)))) (if lU42e9@top? (lU3127@chi-body* (cdr lU42e0@e*) lU42e1@r lU42e2@mr (cons (lU2e50@gen-lexical 'dummy) lU42e3@lex*) (cons (cons 'top-expr lU42f4@e) lU42e4@rhs*) lU42e5@mod** lU4308@kwd* lU42e7@exp* lU42e8@rib lU42e9@top?) (values lU42e0@e* lU42e1@r lU42e2@mr lU42e3@lex* lU42e4@rhs* lU42e5@mod** lU4308@kwd* lU42e7@exp*)))))))))))))))))))))) (set! lU4bcd@lU3127@chi-body* lU3127@chi-body*) (set! lU3129@expand-transformer (lambda (lU43f8@expr lU43f9@r) (let ((lU43fc@rtc (lU3135@make-collector))) (let ((lU43fe@expanded-rhs (let ((lU4408@lU4401 lU3137@inv-collector) (lU4409@lU4403 lU3139@vis-collector) (lU440a@lU4405 lU43fc@rtc) (lU440b@lU4407 (lambda (lU4410@x) (values)))) (let ((lU4412@swap (lambda () (begin (let ((lU4414@t (lU4408@lU4401))) (begin (lU4408@lU4401 lU440a@lU4405) (set! lU440a@lU4405 lU4414@t))) (let ((lU4416@t (lU4409@lU4403))) (begin (lU4409@lU4403 lU440b@lU4407) (set! lU440b@lU4407 lU4416@t))))))) (dynamic-wind lU4412@swap (lambda () (lU30f1@chi-expr lU43f8@expr lU43f9@r lU43f9@r)) lU4412@swap))))) (begin (for-each (let ((lU4418@mark-visit (lU3139@vis-collector))) (lambda (lU441a@x) (begin (lU2cde@lU2b2c@invoke-library lU441a@x) (lU4418@mark-visit lU441a@x)))) (lU43fc@rtc)) lU43fe@expanded-rhs))))) (set! lU4bce@lU3129@expand-transformer lU3129@expand-transformer) (set! lU312b@parse-exports (lambda (lU441c@exp*) (let lU4424@f ((lU441e@exp* lU441c@exp*) (lU441f@int* '()) (lU4420@ext* '())) (if (null? lU441e@exp*) (begin (if (not (lU2ed0@valid-bound-ids? lU4420@ext*)) (lU31af@syntax-violation 'export '"invalid exports" (lU3105@find-dups lU4420@ext*)) (void)) (values (map lU31b5@syntax->datum lU4420@ext*) lU441f@int*)) (let ((lU4426@t (car lU441e@exp*))) (let ((lU4428@ls/false (lU30cf@syntax-dispatch lU4426@t '(any . #(each (any any)))))) (if lU4428@ls/false (apply (lambda (lU442a@rename lU442b@i* lU442c@e*) (begin (if (not (and (eq? (lU31b5@syntax->datum lU442a@rename) 'rename) (for-all lU2ec8@id? lU442b@i*) (for-all lU2ec8@id? lU442c@e*))) (lU31af@syntax-violation 'export '"invalid export specifier" (car lU441e@exp*)) (void)) (lU4424@f (cdr lU441e@exp*) (append lU442b@i* lU441f@int*) (append lU442c@e* lU4420@ext*)))) lU4428@ls/false) (let ((lU4430@t lU4426@t)) (let ((lU4432@ls/false (lU30cf@syntax-dispatch lU4430@t 'any))) (if lU4432@ls/false (apply (lambda (lU4434@ie) (begin (if (not (lU2ec8@id? lU4434@ie)) (lU31af@syntax-violation 'export '"invalid export" lU4434@ie) (void)) (lU4424@f (cdr lU441e@exp*) (cons lU4434@ie lU441f@int*) (cons lU4434@ie lU4420@ext*)))) lU4432@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU4430@t))))))))))) (set! lU4bcf@lU312b@parse-exports lU312b@parse-exports) (set! lU312d@parse-library-name (lambda (lU4436@spec) (let ((lU4439@parse '#f)) (begin (set! lU4439@parse (lambda (lU4446@x) (let ((lU4448@t lU4446@x)) (let ((lU444a@ls/false (lU30cf@syntax-dispatch lU4448@t '(each-any)))) (if (and lU444a@ls/false (apply (lambda (lU444c@v*) (for-all (lambda (lU444e@x) (let ((lU4450@x (lU31b5@syntax->datum lU444e@x))) (and (integer? lU4450@x) (exact? lU4450@x)))) lU444c@v*)) lU444a@ls/false)) (apply (lambda (lU4452@v*) (values '() (map lU31b5@syntax->datum lU4452@v*))) lU444a@ls/false) (let ((lU4454@t lU4448@t)) (let ((lU4456@ls/false (lU30cf@syntax-dispatch lU4454@t '(any . any)))) (if (and lU4456@ls/false (apply (lambda (lU4458@x lU4459@rest) (symbol? (lU31b5@syntax->datum lU4458@x))) lU4456@ls/false)) (apply (lambda (lU445c@x lU445d@rest) (call-with-values (lambda () (lU4439@parse lU445d@rest)) (lambda (lU4464@lU4461 lU4465@lU4463) (let ((lU4468@v* lU4465@lU4463) (lU4469@x* lU4464@lU4461)) (values (cons (lU31b5@syntax->datum lU445c@x) lU4469@x*) lU4468@v*))))) lU4456@ls/false) (let ((lU446c@t lU4454@t)) (let ((lU446e@ls/false (lU30cf@syntax-dispatch lU446c@t '()))) (if lU446e@ls/false (apply (lambda () (values '() '())) lU446e@ls/false) (let ((lU4470@t lU446c@t)) (let ((lU4472@ls/false (lU30cf@syntax-dispatch lU4470@t '_))) (if lU4472@ls/false (apply (lambda () (lU31af@syntax-violation '#f '"invalid library name" lU4436@spec)) lU4472@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU4470@t))))))))))))))) (call-with-values (lambda () (lU4439@parse lU4436@spec)) (lambda (lU443e@lU443b lU443f@lU443d) (let ((lU4442@ver* lU443f@lU443d) (lU4443@name* lU443e@lU443b)) (begin (if (null? lU4443@name*) (lU31af@syntax-violation '#f '"empty library name" lU4436@spec) (void)) (values lU4443@name* lU4442@ver*))))))))) (set! lU4bd0@lU312d@parse-library-name lU312d@parse-library-name) (set! lU312f@parse-library (lambda (lU4474@e) (let ((lU4476@t lU4474@e)) (let ((lU4478@ls/false (lU30cf@syntax-dispatch lU4476@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and lU4478@ls/false (apply (lambda (lU447a@library lU447b@name* lU447c@export lU447d@exp* lU447e@import lU447f@imp* lU4480@b*) (and (eq? (lU31b5@syntax->datum lU447c@export) 'export) (eq? (lU31b5@syntax->datum lU447e@import) 'import) (eq? (lU31b5@syntax->datum lU447a@library) 'library))) lU4478@ls/false)) (apply (lambda (lU4488@library lU4489@name* lU448a@export lU448b@exp* lU448c@import lU448d@imp* lU448e@b*) (values lU4489@name* lU448b@exp* lU448d@imp* lU448e@b*)) lU4478@ls/false) (let ((lU4496@t lU4476@t)) (let ((lU4498@ls/false (lU30cf@syntax-dispatch lU4496@t '_))) (if lU4498@ls/false (apply (lambda () (lU31af@syntax-violation '#f '"malformed library" lU4474@e)) lU4498@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU4496@t))))))))) (set! lU4bd1@lU312f@parse-library lU312f@parse-library) (set! lU3131@parse-import-spec* (let ((lU449b@idsyn? '#f) (lU449d@dup-error '#f) (lU449f@merge-substs '#f) (lU44a1@exclude* '#f) (lU44a3@find* '#f) (lU44a5@rem* '#f) (lU44a7@remove-dups '#f) (lU44a9@parse-library-name '#f) (lU44ab@import-library '#f) (lU44ad@get-import '#f) (lU44af@add-imports! '#f)) (begin (set! lU449b@idsyn? (lambda (lU46a4@x) (symbol? (lU31b5@syntax->datum lU46a4@x)))) (set! lU449d@dup-error (lambda (lU46a2@name) (lU31af@syntax-violation 'import '"two imports with different bindings" lU46a2@name))) (set! lU449f@merge-substs (lambda (lU4690@s lU4691@subst) (let ((lU4695@insert-to-subst '#f)) (begin (set! lU4695@insert-to-subst (lambda (lU4696@a lU4697@subst) (let ((lU469a@name (car lU4696@a)) (lU469b@label (cdr lU4696@a))) (let ((lU469e@t (assq lU469a@name lU4697@subst))) (if lU469e@t ((lambda (lU46a0@x) (if (eq? (cdr lU46a0@x) lU469b@label) lU4697@subst (lU449d@dup-error lU469a@name))) lU469e@t) (cons lU4696@a lU4697@subst)))))) (if (null? lU4690@s) lU4691@subst (lU4695@insert-to-subst (car lU4690@s) (lU449f@merge-substs (cdr lU4690@s) lU4691@subst))))))) (set! lU44a1@exclude* (lambda (lU4660@sym* lU4661@subst) (let ((lU4665@exclude '#f)) (begin (set! lU4665@exclude (lambda (lU467e@sym lU467f@subst) (if (null? lU467f@subst) (lU31af@syntax-violation 'import '"cannot rename unbound identifier" lU467e@sym) (if (eq? lU467e@sym (caar lU467f@subst)) (values (cdar lU467f@subst) (cdr lU467f@subst)) (let ((lU4682@a (car lU467f@subst))) (call-with-values (lambda () (lU4665@exclude lU467e@sym (cdr lU467f@subst))) (lambda (lU4688@lU4685 lU4689@lU4687) (let ((lU468c@subst lU4689@lU4687) (lU468d@old lU4688@lU4685)) (values lU468d@old (cons lU4682@a lU468c@subst)))))))))) (if (null? lU4660@sym*) (values '() lU4661@subst) (call-with-values (lambda () (lU4665@exclude (car lU4660@sym*) lU4661@subst)) (lambda (lU466a@lU4667 lU466b@lU4669) (let ((lU466e@subst lU466b@lU4669) (lU466f@old lU466a@lU4667)) (call-with-values (lambda () (lU44a1@exclude* (cdr lU4660@sym*) lU466e@subst)) (lambda (lU4676@lU4673 lU4677@lU4675) (let ((lU467a@subst lU4677@lU4675) (lU467b@old* lU4676@lU4673)) (values (cons lU466f@old lU467b@old*) lU467a@subst)))))))))))) (set! lU44a3@find* (lambda (lU4658@sym* lU4659@subst) (map (lambda (lU465c@x) (let ((lU465e@t (assq lU465c@x lU4659@subst))) (if lU465e@t (cdr lU465e@t) (lU31af@syntax-violation 'import '"cannot find identifier" lU465c@x)))) lU4658@sym*))) (set! lU44a5@rem* (lambda (lU4650@sym* lU4651@subst) (let lU4656@f ((lU4654@subst lU4651@subst)) (if (null? lU4654@subst) '() (if (memq (caar lU4654@subst) lU4650@sym*) (lU4656@f (cdr lU4654@subst)) (cons (car lU4654@subst) (lU4656@f (cdr lU4654@subst)))))))) (set! lU44a7@remove-dups (lambda (lU464e@ls) (if (null? lU464e@ls) '() (if (memq (car lU464e@ls) (cdr lU464e@ls)) (lU44a7@remove-dups (cdr lU464e@ls)) (cons (car lU464e@ls) (lU44a7@remove-dups (cdr lU464e@ls))))))) (set! lU44a9@parse-library-name (lambda (lU4566@spec) (let ((lU4569@subversion? '#f) (lU456b@subversion-pred '#f) (lU456d@version-pred '#f)) (begin (set! lU4569@subversion? (lambda (lU464a@x) (let ((lU464c@x (lU31b5@syntax->datum lU464a@x))) (and (integer? lU464c@x) (exact? lU464c@x) (>= lU464c@x '0))))) (set! lU456b@subversion-pred (lambda (lU45ea@x*) (let ((lU45ec@t lU45ea@x*)) (let ((lU45ee@ls/false (lU30cf@syntax-dispatch lU45ec@t 'any))) (if (and lU45ee@ls/false (apply (lambda (lU45f0@n) (lU4569@subversion? lU45f0@n)) lU45ee@ls/false)) (apply (lambda (lU45f2@n) (lambda (lU45f4@x) (= lU45f4@x (lU31b5@syntax->datum lU45f2@n)))) lU45ee@ls/false) (let ((lU45f6@t lU45ec@t)) (let ((lU45f8@ls/false (lU30cf@syntax-dispatch lU45f6@t '(any . each-any)))) (if (and lU45f8@ls/false (apply (lambda (lU45fa@p? lU45fb@sub*) (eq? (lU31b5@syntax->datum lU45fa@p?) 'and)) lU45f8@ls/false)) (apply (lambda (lU45fe@p? lU45ff@sub*) (let ((lU4602@p* (map lU456b@subversion-pred lU45ff@sub*))) (lambda (lU4604@x) (for-all (lambda (lU4606@p) (lU4606@p lU4604@x)) lU4602@p*)))) lU45f8@ls/false) (let ((lU4608@t lU45f6@t)) (let ((lU460a@ls/false (lU30cf@syntax-dispatch lU4608@t '(any . each-any)))) (if (and lU460a@ls/false (apply (lambda (lU460c@p? lU460d@sub*) (eq? (lU31b5@syntax->datum lU460c@p?) 'or)) lU460a@ls/false)) (apply (lambda (lU4610@p? lU4611@sub*) (let ((lU4614@p* (map lU456b@subversion-pred lU4611@sub*))) (lambda (lU4616@x) (exists (lambda (lU4618@p) (lU4618@p lU4616@x)) lU4614@p*)))) lU460a@ls/false) (let ((lU461a@t lU4608@t)) (let ((lU461c@ls/false (lU30cf@syntax-dispatch lU461a@t '(any any)))) (if (and lU461c@ls/false (apply (lambda (lU461e@p? lU461f@sub) (eq? (lU31b5@syntax->datum lU461e@p?) 'not)) lU461c@ls/false)) (apply (lambda (lU4622@p? lU4623@sub) (let ((lU4626@p (lU456b@subversion-pred lU4623@sub))) (lambda (lU4628@x) (not (lU4626@p lU4628@x))))) lU461c@ls/false) (let ((lU462a@t lU461a@t)) (let ((lU462c@ls/false (lU30cf@syntax-dispatch lU462a@t '(any any)))) (if (and lU462c@ls/false (apply (lambda (lU462e@p? lU462f@n) (and (eq? (lU31b5@syntax->datum lU462e@p?) '<=) (lU4569@subversion? lU462f@n))) lU462c@ls/false)) (apply (lambda (lU4632@p? lU4633@n) (lambda (lU4636@x) (<= lU4636@x (lU31b5@syntax->datum lU4633@n)))) lU462c@ls/false) (let ((lU4638@t lU462a@t)) (let ((lU463a@ls/false (lU30cf@syntax-dispatch lU4638@t '(any any)))) (if (and lU463a@ls/false (apply (lambda (lU463c@p? lU463d@n) (and (eq? (lU31b5@syntax->datum lU463c@p?) '>=) (lU4569@subversion? lU463d@n))) lU463a@ls/false)) (apply (lambda (lU4640@p? lU4641@n) (lambda (lU4644@x) (>= lU4644@x (lU31b5@syntax->datum lU4641@n)))) lU463a@ls/false) (let ((lU4646@t lU4638@t)) (let ((lU4648@ls/false (lU30cf@syntax-dispatch lU4646@t '_))) (if lU4648@ls/false (apply (lambda () (lU31af@syntax-violation 'import '"invalid sub-version spec" lU4566@spec lU45ea@x*)) lU4648@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU4646@t)))))))))))))))))))))))) (set! lU456d@version-pred (lambda (lU459a@x*) (let ((lU459c@t lU459a@x*)) (let ((lU459e@ls/false (lU30cf@syntax-dispatch lU459c@t '()))) (if lU459e@ls/false (apply (lambda () (lambda (lU45a0@x) '#t)) lU459e@ls/false) (let ((lU45a2@t lU459c@t)) (let ((lU45a4@ls/false (lU30cf@syntax-dispatch lU45a2@t '(any . each-any)))) (if (and lU45a4@ls/false (apply (lambda (lU45a6@c lU45a7@ver*) (eq? (lU31b5@syntax->datum lU45a6@c) 'and)) lU45a4@ls/false)) (apply (lambda (lU45aa@c lU45ab@ver*) (let ((lU45ae@p* (map lU456d@version-pred lU45ab@ver*))) (lambda (lU45b0@x) (for-all (lambda (lU45b2@p) (lU45b2@p lU45b0@x)) lU45ae@p*)))) lU45a4@ls/false) (let ((lU45b4@t lU45a2@t)) (let ((lU45b6@ls/false (lU30cf@syntax-dispatch lU45b4@t '(any . each-any)))) (if (and lU45b6@ls/false (apply (lambda (lU45b8@c lU45b9@ver*) (eq? (lU31b5@syntax->datum lU45b8@c) 'or)) lU45b6@ls/false)) (apply (lambda (lU45bc@c lU45bd@ver*) (let ((lU45c0@p* (map lU456d@version-pred lU45bd@ver*))) (lambda (lU45c2@x) (exists (lambda (lU45c4@p) (lU45c4@p lU45c2@x)) lU45c0@p*)))) lU45b6@ls/false) (let ((lU45c6@t lU45b4@t)) (let ((lU45c8@ls/false (lU30cf@syntax-dispatch lU45c6@t '(any any)))) (if (and lU45c8@ls/false (apply (lambda (lU45ca@c lU45cb@ver) (eq? (lU31b5@syntax->datum lU45ca@c) 'not)) lU45c8@ls/false)) (apply (lambda (lU45ce@c lU45cf@ver) (let ((lU45d2@p (lU456d@version-pred lU45cf@ver))) (lambda (lU45d4@x) (not (lU45d2@p lU45d4@x))))) lU45c8@ls/false) (let ((lU45d6@t lU45c6@t)) (let ((lU45d8@ls/false (lU30cf@syntax-dispatch lU45d6@t 'each-any))) (if lU45d8@ls/false (apply (lambda (lU45da@sub*) (let ((lU45dc@p* (map lU456b@subversion-pred lU45da@sub*))) (lambda (lU45de@x) (let lU45e4@f ((lU45e0@p* lU45dc@p*) (lU45e1@x lU45de@x)) (if (null? lU45e0@p*) '#t (if (null? lU45e1@x) '#f (and ((car lU45e0@p*) (car lU45e1@x)) (lU45e4@f (cdr lU45e0@p*) (cdr lU45e1@x))))))))) lU45d8@ls/false) (let ((lU45e6@t lU45d6@t)) (let ((lU45e8@ls/false (lU30cf@syntax-dispatch lU45e6@t '_))) (if lU45e8@ls/false (apply (lambda () (lU31af@syntax-violation 'import '"invalid version spec" lU4566@spec lU459a@x*)) lU45e8@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU45e6@t))))))))))))))))))))) (let lU4570@f ((lU456e@x lU4566@spec)) (let ((lU4572@t lU456e@x)) (let ((lU4574@ls/false (lU30cf@syntax-dispatch lU4572@t '(each-any)))) (if lU4574@ls/false (apply (lambda (lU4576@version-spec*) (values '() (lU456d@version-pred lU4576@version-spec*))) lU4574@ls/false) (let ((lU4578@t lU4572@t)) (let ((lU457a@ls/false (lU30cf@syntax-dispatch lU4578@t '(any . any)))) (if (and lU457a@ls/false (apply (lambda (lU457c@x lU457d@x*) (lU449b@idsyn? lU457c@x)) lU457a@ls/false)) (apply (lambda (lU4580@x lU4581@x*) (call-with-values (lambda () (lU4570@f lU4581@x*)) (lambda (lU4588@lU4585 lU4589@lU4587) (let ((lU458c@pred lU4589@lU4587) (lU458d@name lU4588@lU4585)) (values (cons (lU31b5@syntax->datum lU4580@x) lU458d@name) lU458c@pred))))) lU457a@ls/false) (let ((lU4590@t lU4578@t)) (let ((lU4592@ls/false (lU30cf@syntax-dispatch lU4590@t '()))) (if lU4592@ls/false (apply (lambda () (values '() (lambda (lU4594@x) '#t))) lU4592@ls/false) (let ((lU4596@t lU4590@t)) (let ((lU4598@ls/false (lU30cf@syntax-dispatch lU4596@t '_))) (if lU4598@ls/false (apply (lambda () (lU31af@syntax-violation '#f '"invalid import spec" lU4566@spec)) lU4598@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU4596@t)))))))))))))))))) (set! lU44ab@import-library (lambda (lU4556@spec*) (call-with-values (lambda () (lU44a9@parse-library-name lU4556@spec*)) (lambda (lU455c@lU4559 lU455d@lU455b) (let ((lU4560@pred lU455d@lU455b) (lU4561@name lU455c@lU4559)) (begin (if (null? lU4561@name) (lU31af@syntax-violation 'import '"empty library name" lU4556@spec*) (void)) (let ((lU4564@lib (lU2cd7@lU2b1e@find-library-by-name lU4561@name))) (begin (if (not lU4564@lib) (lU31af@syntax-violation 'import '"cannot find library with required name" lU4561@name) (void)) (if (not (lU4560@pred (lU2cb1@lU2ad2@library-version lU4564@lib))) (lU31af@syntax-violation 'import '"library does not satisfy version specification" lU4556@spec* lU4564@lib) (void)) ((lU313b@imp-collector) lU4564@lib) (lU2cb9@lU2ae2@library-subst lU4564@lib))))))))) (set! lU44ad@get-import (lambda (lU44c8@spec) (let ((lU44ca@t lU44c8@spec)) (let ((lU44cc@ls/false (lU30cf@syntax-dispatch lU44ca@t '(any . each-any)))) (if (and lU44cc@ls/false (apply (lambda (lU44ce@x lU44cf@x*) (not (memq (lU31b5@syntax->datum lU44ce@x) '(for rename except only prefix library)))) lU44cc@ls/false)) (apply (lambda (lU44d2@x lU44d3@x*) (lU44ab@import-library (cons lU44d2@x lU44d3@x*))) lU44cc@ls/false) (let ((lU44d6@t lU44ca@t)) (let ((lU44d8@ls/false (lU30cf@syntax-dispatch lU44d6@t '(any any . #(each (any any)))))) (if (and lU44d8@ls/false (apply (lambda (lU44da@rename lU44db@isp lU44dc@old* lU44dd@new*) (and (eq? (lU31b5@syntax->datum lU44da@rename) 'rename) (for-all lU449b@idsyn? lU44dc@old*) (for-all lU449b@idsyn? lU44dd@new*))) lU44d8@ls/false)) (apply (lambda (lU44e2@rename lU44e3@isp lU44e4@old* lU44e5@new*) (let ((lU44ea@subst (lU44ad@get-import lU44e3@isp)) (lU44eb@old* (map lU31b5@syntax->datum lU44e4@old*)) (lU44ec@new* (map lU31b5@syntax->datum lU44e5@new*))) (let ((lU44f0@old-label* (lU44a3@find* lU44eb@old* lU44ea@subst))) (let ((lU44f2@subst (lU44a5@rem* lU44eb@old* lU44ea@subst))) (lU449f@merge-substs (map cons lU44ec@new* lU44f0@old-label*) lU44f2@subst))))) lU44d8@ls/false) (let ((lU44f4@t lU44d6@t)) (let ((lU44f6@ls/false (lU30cf@syntax-dispatch lU44f4@t '(any any . each-any)))) (if (and lU44f6@ls/false (apply (lambda (lU44f8@except lU44f9@isp lU44fa@sym*) (and (eq? (lU31b5@syntax->datum lU44f8@except) 'except) (for-all lU449b@idsyn? lU44fa@sym*))) lU44f6@ls/false)) (apply (lambda (lU44fe@except lU44ff@isp lU4500@sym*) (let ((lU4504@subst (lU44ad@get-import lU44ff@isp))) (lU44a5@rem* (map lU31b5@syntax->datum lU4500@sym*) lU4504@subst))) lU44f6@ls/false) (let ((lU4506@t lU44f4@t)) (let ((lU4508@ls/false (lU30cf@syntax-dispatch lU4506@t '(any any . each-any)))) (if (and lU4508@ls/false (apply (lambda (lU450a@only lU450b@isp lU450c@sym*) (and (eq? (lU31b5@syntax->datum lU450a@only) 'only) (for-all lU449b@idsyn? lU450c@sym*))) lU4508@ls/false)) (apply (lambda (lU4510@only lU4511@isp lU4512@sym*) (let ((lU4516@subst (lU44ad@get-import lU4511@isp)) (lU4517@sym* (map lU31b5@syntax->datum lU4512@sym*))) (let ((lU451a@sym* (lU44a7@remove-dups lU4517@sym*))) (let ((lU451c@lab* (lU44a3@find* lU451a@sym* lU4516@subst))) (map cons lU451a@sym* lU451c@lab*))))) lU4508@ls/false) (let ((lU451e@t lU4506@t)) (let ((lU4520@ls/false (lU30cf@syntax-dispatch lU451e@t '(any any any)))) (if (and lU4520@ls/false (apply (lambda (lU4522@prefix lU4523@isp lU4524@p) (and (eq? (lU31b5@syntax->datum lU4522@prefix) 'prefix) (lU449b@idsyn? lU4524@p))) lU4520@ls/false)) (apply (lambda (lU4528@prefix lU4529@isp lU452a@p) (let ((lU452e@subst (lU44ad@get-import lU4529@isp)) (lU452f@prefix (symbol->string (lU31b5@syntax->datum lU452a@p)))) (map (lambda (lU4532@x) (cons (string->symbol (string-append lU452f@prefix (symbol->string (car lU4532@x)))) (cdr lU4532@x))) lU452e@subst))) lU4520@ls/false) (let ((lU4534@t lU451e@t)) (let ((lU4536@ls/false (lU30cf@syntax-dispatch lU4534@t '(any each-any)))) (if (and lU4536@ls/false (apply (lambda (lU4538@library lU4539@spec*) (eq? (lU31b5@syntax->datum lU4538@library) 'library)) lU4536@ls/false)) (apply (lambda (lU453c@library lU453d@spec*) (lU44ab@import-library lU453d@spec*)) lU4536@ls/false) (let ((lU4540@t lU4534@t)) (let ((lU4542@ls/false (lU30cf@syntax-dispatch lU4540@t '(any any . any)))) (if (and lU4542@ls/false (apply (lambda (lU4544@for lU4545@isp lU4546@rest) (eq? (lU31b5@syntax->datum lU4544@for) 'for)) lU4542@ls/false)) (apply (lambda (lU454a@for lU454b@isp lU454c@rest) (lU44ad@get-import lU454b@isp)) lU4542@ls/false) (let ((lU4550@t lU4540@t)) (let ((lU4552@ls/false (lU30cf@syntax-dispatch lU4550@t 'any))) (if lU4552@ls/false (apply (lambda (lU4554@spec) (lU31af@syntax-violation 'import '"invalid import spec" lU4554@spec)) lU4552@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU4550@t))))))))))))))))))))))))))) (set! lU44af@add-imports! (lambda (lU44b8@imp lU44b9@h) (let ((lU44bc@subst (lU44ad@get-import lU44b8@imp))) (for-each (lambda (lU44be@x) (let ((lU44c0@name (car lU44be@x)) (lU44c1@label (cdr lU44be@x))) (let ((lU44c4@t (hashtable-ref lU44b9@h lU44c0@name '#f))) (if lU44c4@t ((lambda (lU44c6@l) (if (not (eq? lU44c6@l lU44c1@label)) (lU449d@dup-error lU44c0@name) (void))) lU44c4@t) (hashtable-set! lU44b9@h lU44c0@name lU44c1@label))))) lU44bc@subst)))) (lambda (lU44b0@imp*) (let lU44b6@f ((lU44b2@imp* lU44b0@imp*) (lU44b3@h (make-eq-hashtable))) (if (null? lU44b2@imp*) (hashtable-entries lU44b3@h) (begin (lU44af@add-imports! (car lU44b2@imp*) lU44b3@h) (lU44b6@f (cdr lU44b2@imp*) lU44b3@h)))))))) (set! lU4bd2@lU3131@parse-import-spec* lU3131@parse-import-spec*) (set! lU3133@make-top-rib (lambda (lU46a6@names lU46a7@labels) (let ((lU46aa@rib (lU2e7c@make-empty-rib))) (begin (vector-for-each (lambda (lU46ac@name lU46ad@label) (begin (if (not (symbol? lU46ac@name)) (error 'make-top-rib '"BUG: not a symbol" lU46ac@name) (void)) (lU2e80@extend-rib/nc! lU46aa@rib (make-simple-struct 'stx '5 (list lU46ac@name lU2e4c@top-mark* '() '())) lU46ad@label))) lU46a6@names lU46a7@labels) lU46aa@rib)))) (set! lU4bd3@lU3133@make-top-rib lU3133@make-top-rib) (set! lU3135@make-collector (lambda () (let ((lU46b0@ls '())) (lambda lU46b4 (let ((lU46b5 (length lU46b4))) (if (= lU46b5 '0) (apply (lambda () lU46b0@ls) lU46b4) (if (= lU46b5 '1) (apply (lambda (lU46b2@x) (set! lU46b0@ls (lU2e45@set-cons lU46b2@x lU46b0@ls))) lU46b4) (error 'apply '"invalid arg count")))))))) (set! lU4bd4@lU3135@make-collector lU3135@make-collector) (set! lU3137@inv-collector (lU2a12@lU28f0@make-parameter (lambda lU46b6@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (lU46b8@x) (begin (if (not (procedure? lU46b8@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" lU46b8@x) (void)) lU46b8@x)))) (set! lU4bd5@lU3137@inv-collector lU3137@inv-collector) (set! lU3139@vis-collector (lU2a12@lU28f0@make-parameter (lambda lU46ba@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (lU46bc@x) (begin (if (not (procedure? lU46bc@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" lU46bc@x) (void)) lU46bc@x)))) (set! lU4bd6@lU3139@vis-collector lU3139@vis-collector) (set! lU313b@imp-collector (lU2a12@lU28f0@make-parameter (lambda lU46be@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (lU46c0@x) (begin (if (not (procedure? lU46c0@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" lU46c0@x) (void)) lU46c0@x)))) (set! lU4bd7@lU313b@imp-collector lU313b@imp-collector) (set! lU313d@chi-library-internal (lambda (lU46c2@e* lU46c3@rib lU46c4@top?) (call-with-values (lambda () (lU3127@chi-body* lU46c2@e* '() '() '() '() '() '() '() lU46c3@rib lU46c4@top?)) (lambda (lU46d8@lU46c9 lU46d9@lU46cb lU46da@lU46cd lU46db@lU46cf lU46dc@lU46d1 lU46dd@lU46d3 lU46de@lU46d5 lU46df@lU46d7) (let ((lU46e8@exp* lU46df@lU46d7) (lU46e9@_kwd* lU46de@lU46d5) (lU46ea@mod** lU46dd@lU46d3) (lU46eb@rhs* lU46dc@lU46d1) (lU46ec@lex* lU46db@lU46cf) (lU46ed@mr lU46da@lU46cd) (lU46ee@r lU46d9@lU46cb) (lU46ef@e* lU46d8@lU46c9)) (values (append (apply append (reverse lU46ea@mod**)) lU46ef@e*) lU46ee@r lU46ed@mr (reverse lU46ec@lex*) (reverse lU46eb@rhs*) lU46e8@exp*)))))) (set! lU4bd8@lU313d@chi-library-internal lU313d@chi-library-internal) (set! lU313f@chi-interaction-expr (lambda (lU46f8@e lU46f9@rib lU46fa@r) (call-with-values (lambda () (lU3127@chi-body* (list lU46f8@e) lU46fa@r lU46fa@r '() '() '() '() '() lU46f9@rib '#t)) (lambda (lU470e@lU46ff lU470f@lU4701 lU4710@lU4703 lU4711@lU4705 lU4712@lU4707 lU4713@lU4709 lU4714@lU470b lU4715@lU470d) (let ((lU471e@_exp* lU4715@lU470d) (lU471f@_kwd* lU4714@lU470b) (lU4720@mod** lU4713@lU4709) (lU4721@rhs* lU4712@lU4707) (lU4722@lex* lU4711@lU4705) (lU4723@mr lU4710@lU4703) (lU4724@r lU470f@lU4701) (lU4725@e* lU470e@lU46ff)) (let ((lU472e@e* (lU30ff@expand-interaction-rhs*/init* (reverse lU4722@lex*) (reverse lU4721@rhs*) (append (apply append (reverse lU4720@mod**)) lU4725@e*) lU4724@r lU4723@mr))) (let ((lU4730@e (if (null? lU472e@e*) (lU2e2e@lU2d89@build-void) (if (null? (cdr lU472e@e*)) (car lU472e@e*) (lU2e2d@lU2d87@build-sequence '#f lU472e@e*))))) (values lU4730@e lU4724@r)))))))) (set! lU4bd9@lU313f@chi-interaction-expr lU313f@chi-interaction-expr) (set! lU3141@library-body-expander (lambda (lU4732@name lU4733@main-exp* lU4734@imp* lU4735@b* lU4736@top?) (let ((lU473d@itc '#f)) (begin (set! lU473d@itc (lU3135@make-collector)) (let ((lU4746@lU473f lU313b@imp-collector) (lU4747@lU4741 lU31bf@top-level-context) (lU4748@lU4743 lU473d@itc) (lU4749@lU4745 '#f)) (let ((lU474e@swap (lambda () (begin (let ((lU4750@t (lU4746@lU473f))) (begin (lU4746@lU473f lU4748@lU4743) (set! lU4748@lU4743 lU4750@t))) (let ((lU4752@t (lU4747@lU4741))) (begin (lU4747@lU4741 lU4749@lU4745) (set! lU4749@lU4745 lU4752@t))))))) (dynamic-wind lU474e@swap (lambda () (call-with-values (lambda () (lU3131@parse-import-spec* lU4734@imp*)) (lambda (lU4758@lU4755 lU4759@lU4757) (let ((lU475c@subst-labels lU4759@lU4757) (lU475d@subst-names lU4758@lU4755)) (let ((lU4760@rib (lU3133@make-top-rib lU475d@subst-names lU475c@subst-labels))) (let ((lU4763@wrap '#f)) (begin (set! lU4763@wrap (lambda (lU47de@x) (make-simple-struct 'stx '5 (list lU47de@x lU2e4c@top-mark* (list lU4760@rib) '())))) (let ((lU4764@b* (map lU4763@wrap lU4735@b*)) (lU4765@main-exp* (map lU4763@wrap lU4733@main-exp*)) (lU4766@rtc (lU3135@make-collector)) (lU4767@vtc (lU3135@make-collector))) (let ((lU4774@lU476d lU3137@inv-collector) (lU4775@lU476f lU3139@vis-collector) (lU4776@lU4771 lU4766@rtc) (lU4777@lU4773 lU4767@vtc)) (let ((lU477c@swap (lambda () (begin (let ((lU477e@t (lU4774@lU476d))) (begin (lU4774@lU476d lU4776@lU4771) (set! lU4776@lU4771 lU477e@t))) (let ((lU4780@t (lU4775@lU476f))) (begin (lU4775@lU476f lU4777@lU4773) (set! lU4777@lU4773 lU4780@t))))))) (dynamic-wind lU477c@swap (lambda () (call-with-values (lambda () (lU313d@chi-library-internal lU4764@b* lU4760@rib lU4736@top?)) (lambda (lU478e@lU4783 lU478f@lU4785 lU4790@lU4787 lU4791@lU4789 lU4792@lU478b lU4793@lU478d) (let ((lU479a@internal-exp* lU4793@lU478d) (lU479b@rhs* lU4792@lU478b) (lU479c@lex* lU4791@lU4789) (lU479d@mr lU4790@lU4787) (lU479e@r lU478f@lU4785) (lU479f@init* lU478e@lU4783)) (call-with-values (lambda () (lU312b@parse-exports (append lU4765@main-exp* lU479a@internal-exp*))) (lambda (lU47aa@lU47a7 lU47ab@lU47a9) (let ((lU47ae@exp-id* lU47ab@lU47a9) (lU47af@exp-name* lU47aa@lU47a7)) (begin (lU2e84@seal-rib! lU4760@rib) (let ((lU47b2@init* (lU30ed@chi-expr* lU479f@init* lU479e@r lU479d@mr))) (let ((lU47b4@rhs* (lU3101@chi-rhs* lU479b@rhs* lU479e@r lU479d@mr))) (begin (lU2e86@unseal-rib! lU4760@rib) (let ((lU47b6@loc* (map lU2e52@gen-global lU479c@lex*)) (lU47b7@export-subst (lU3199@make-export-subst lU47af@exp-name* lU47ae@exp-id*))) (let ((lU47bb@errstr '#f)) (begin (set! lU47bb@errstr '"attempt to export mutated variable") (call-with-values (lambda () (lU319b@make-export-env/macros lU479c@lex* lU47b6@loc* lU479e@r)) (lambda (lU47c2@lU47bd lU47c3@lU47bf lU47c4@lU47c1) (let ((lU47c8@macro* lU47c4@lU47c1) (lU47c9@global* lU47c3@lU47bf) (lU47ca@export-env lU47c2@lU47bd)) (begin (for-each (lambda (lU47ce@s) (let ((lU47d0@name (car lU47ce@s)) (lU47d1@label (cdr lU47ce@s))) (let ((lU47d4@p (assq lU47d1@label lU47ca@export-env))) (if lU47d4@p (let ((lU47d6@b (cdr lU47d4@p))) (let ((lU47d8@type (car lU47d6@b))) (if (eq? lU47d8@type 'mutable) (lU31af@syntax-violation 'export lU47bb@errstr lU47d0@name) (void)))) (void))))) lU47b7@export-subst) (let ((lU47da@invoke-body (lU2e33@lU2d93@build-library-letrec* '#f lU4732@name lU479c@lex* lU47b6@loc* lU47b4@rhs* (if (null? lU47b2@init*) (lU2e2e@lU2d89@build-void) (lU2e2d@lU2d87@build-sequence '#f lU47b2@init*)))) (lU47db@invoke-definitions (map lU2e2a@lU2ce6@build-global-define (map cdr lU47c9@global*)))) (values (lU473d@itc) (lU4766@rtc) (lU4767@vtc) (lU2e2d@lU2d87@build-sequence '#f (append lU47db@invoke-definitions (list lU47da@invoke-body))) lU47c8@macro* lU47b7@export-subst lU47ca@export-env)))))))))))))))))))) lU477c@swap))))))))))) lU474e@swap))))))) (set! lU4bda@lU3141@library-body-expander lU3141@library-body-expander) (set! lU3143@core-library-expander (lambda (lU47e0@e lU47e1@verify-name) (call-with-values (lambda () (lU312f@parse-library lU47e0@e)) (lambda (lU47ec@lU47e5 lU47ed@lU47e7 lU47ee@lU47e9 lU47ef@lU47eb) (let ((lU47f4@b* lU47ef@lU47eb) (lU47f5@imp* lU47ee@lU47e9) (lU47f6@exp* lU47ed@lU47e7) (lU47f7@name* lU47ec@lU47e5)) (call-with-values (lambda () (lU312d@parse-library-name lU47f7@name*)) (lambda (lU4800@lU47fd lU4801@lU47ff) (let ((lU4804@ver lU4801@lU47ff) (lU4805@name lU4800@lU47fd)) (begin (lU47e1@verify-name lU4805@name) (call-with-values (lambda () (lU3141@library-body-expander lU4805@name lU47f6@exp* lU47f5@imp* lU47f4@b* '#f)) (lambda (lU4816@lU4809 lU4817@lU480b lU4818@lU480d lU4819@lU480f lU481a@lU4811 lU481b@lU4813 lU481c@lU4815) (let ((lU4824@export-env lU481c@lU4815) (lU4825@export-subst lU481b@lU4813) (lU4826@visit-code lU481a@lU4811) (lU4827@invoke-code lU4819@lU480f) (lU4828@visit-req* lU4818@lU480d) (lU4829@invoke-req* lU4817@lU480b) (lU482a@imp* lU4816@lU4809)) (values lU4805@name lU4804@ver lU482a@imp* lU4829@invoke-req* lU4828@visit-req* lU4827@invoke-code lU4826@visit-code lU4825@export-subst lU4824@export-env))))))))))))) (set! lU4bdb@lU3143@core-library-expander lU3143@core-library-expander) (set! lU3145@parse-top-level-program (lambda (lU4832@e*) (let ((lU4834@t lU4832@e*)) (let ((lU4836@ls/false (lU30cf@syntax-dispatch lU4834@t '((any . each-any) . each-any)))) (if (and lU4836@ls/false (apply (lambda (lU4838@import lU4839@imp* lU483a@b*) (eq? (lU31b5@syntax->datum lU4838@import) 'import)) lU4836@ls/false)) (apply (lambda (lU483e@import lU483f@imp* lU4840@b*) (values lU483f@imp* lU4840@b*)) lU4836@ls/false) (let ((lU4844@t lU4834@t)) (let ((lU4846@ls/false (lU30cf@syntax-dispatch lU4844@t '((any . any) . any)))) (if (and lU4846@ls/false (apply (lambda (lU4848@import lU4849@x lU484a@y) (eq? (lU31b5@syntax->datum lU4848@import) 'import)) lU4846@ls/false)) (apply (lambda (lU484e@import lU484f@x lU4850@y) (lU31af@syntax-violation 'expander '"invalid syntax of top-level program" (lU2ec2@syntax-car lU4832@e*))) lU4846@ls/false) (let ((lU4854@t lU4844@t)) (let ((lU4856@ls/false (lU30cf@syntax-dispatch lU4854@t '_))) (if lU4856@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) lU4856@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU4854@t)))))))))))) (set! lU4bdc@lU3145@parse-top-level-program lU3145@parse-top-level-program) (set! lU3147@top-level-expander (lambda (lU4858@e*) (call-with-values (lambda () (lU3145@parse-top-level-program lU4858@e*)) (lambda (lU485e@lU485b lU485f@lU485d) (let ((lU4862@b* lU485f@lU485d) (lU4863@imp* lU485e@lU485b)) (call-with-values (lambda () (lU3141@library-body-expander '() '() lU4863@imp* lU4862@b* '#t)) (lambda (lU4874@lU4867 lU4875@lU4869 lU4876@lU486b lU4877@lU486d lU4878@lU486f lU4879@lU4871 lU487a@lU4873) (let ((lU4882@export-env lU487a@lU4873) (lU4883@export-subst lU4879@lU4871) (lU4884@visit-code lU4878@lU486f) (lU4885@invoke-code lU4877@lU486d) (lU4886@visit-req* lU4876@lU486b) (lU4887@invoke-req* lU4875@lU4869) (lU4888@imp* lU4874@lU4867)) (values lU4887@invoke-req* lU4885@invoke-code))))))))) (set! lU4bdd@lU3147@top-level-expander lU3147@top-level-expander) (set! lU3149@rp (lU2a0f@lU28ea@make-record-printer 'env (lambda (lU4890@x lU4891@p lU4892@wr) (display '"#<environment>" lU4891@p)))) (set! lU4bde@lU3149@rp lU3149@rp) (set! lU3153@env? (lambda (lU4896@x) (and (simple-struct? lU4896@x) (eq? (simple-struct-name lU4896@x) 'env)))) (set! lU4bdf@lU3153@env? lU3153@env?) (set! lU3155@env-names (lambda (lU4898@x) (simple-struct-ref lU4898@x '0))) (set! lU4be0@lU3155@env-names lU3155@env-names) (set! lU3157@set-env-names! (lambda (lU489a@x lU489b@val) (simple-struct-set! lU489a@x '0 lU489b@val))) (set! lU4be1@lU3157@set-env-names! lU3157@set-env-names!) (set! lU3159@env-labels (lambda (lU489e@x) (simple-struct-ref lU489e@x '1))) (set! lU4be2@lU3159@env-labels lU3159@env-labels) (set! lU315b@set-env-labels! (lambda (lU48a0@x lU48a1@val) (simple-struct-set! lU48a0@x '1 lU48a1@val))) (set! lU4be3@lU315b@set-env-labels! lU315b@set-env-labels!) (set! lU315d@env-itc (lambda (lU48a4@x) (simple-struct-ref lU48a4@x '2))) (set! lU4be4@lU315d@env-itc lU315d@env-itc) (set! lU315f@set-env-itc! (lambda (lU48a6@x lU48a7@val) (simple-struct-set! lU48a6@x '2 lU48a7@val))) (set! lU4be5@lU315f@set-env-itc! lU315f@set-env-itc!) (set! lU3161@dummy '3) (set! lU4be6@lU3161@dummy lU3161@dummy) (set! lU3163@rp (lU2a0f@lU28ea@make-record-printer 'interaction-env (lambda (lU48aa@x lU48ab@p lU48ac@wr) (display '"#<environment>" lU48ab@p)))) (set! lU4be7@lU3163@rp lU3163@rp) (set! lU316d@interaction-env? (lambda (lU48b0@x) (and (simple-struct? lU48b0@x) (eq? (simple-struct-name lU48b0@x) 'interaction-env)))) (set! lU4be8@lU316d@interaction-env? lU316d@interaction-env?) (set! lU316f@interaction-env-rib (lambda (lU48b2@x) (simple-struct-ref lU48b2@x '0))) (set! lU4be9@lU316f@interaction-env-rib lU316f@interaction-env-rib) (set! lU3171@set-interaction-env-rib! (lambda (lU48b4@x lU48b5@val) (simple-struct-set! lU48b4@x '0 lU48b5@val))) (set! lU4bea@lU3171@set-interaction-env-rib! lU3171@set-interaction-env-rib!) (set! lU3173@interaction-env-r (lambda (lU48b8@x) (simple-struct-ref lU48b8@x '1))) (set! lU4beb@lU3173@interaction-env-r lU3173@interaction-env-r) (set! lU3175@set-interaction-env-r! (lambda (lU48ba@x lU48bb@val) (simple-struct-set! lU48ba@x '1 lU48bb@val))) (set! lU4bec@lU3175@set-interaction-env-r! lU3175@set-interaction-env-r!) (set! lU3177@interaction-env-locs (lambda (lU48be@x) (simple-struct-ref lU48be@x '2))) (set! lU4bed@lU3177@interaction-env-locs lU3177@interaction-env-locs) (set! lU3179@set-interaction-env-locs! (lambda (lU48c0@x lU48c1@val) (simple-struct-set! lU48c0@x '2 lU48c1@val))) (set! lU4bee@lU3179@set-interaction-env-locs! lU3179@set-interaction-env-locs!) (set! lU317b@dummy '3) (set! lU4bef@lU317b@dummy lU317b@dummy) (set! lU317d@interaction-environment-symbols (lambda () (lU3185@environment-symbols (lU31bd@interaction-environment)))) (set! lU4bf0@lU317d@interaction-environment-symbols lU317d@interaction-environment-symbols) (set! lU317f@environment-bindings (lambda (lU48c4@e) (vector->list (vector-map (lambda (lU48c6@name lU48c7@label) (lU3181@parse-binding (cons lU48c6@name (lU2cdd@lU2b2a@imported-label->binding lU48c7@label)))) (lU3155@env-names lU48c4@e) (lU3159@env-labels lU48c4@e))))) (set! lU4bf1@lU317f@environment-bindings lU317f@environment-bindings) (set! lU3181@parse-binding (lambda (lU48ca@b) (cons (car lU48ca@b) (let ((lU48cc@t (cadr lU48ca@b))) (if (memv lU48cc@t '(core-prim global)) 'procedure (if (memv lU48cc@t '(core-macro macro global-macro)) 'syntax (if (memv lU48cc@t '($core-rtd)) 'record (if (eq? (car lU48ca@b) (cadr lU48ca@b)) 'syntax 'unknown)))))))) (set! lU4bf2@lU3181@parse-binding lU3181@parse-binding) (set! lU3183@environment? (lambda (lU48ce@x) (or (lU3153@env? lU48ce@x) (lU316d@interaction-env? lU48ce@x)))) (set! lU4bf3@lU3183@environment? lU3183@environment?) (set! lU3185@environment-symbols (lambda (lU48d0@x) (if (lU3153@env? lU48d0@x) (vector->list (lU3155@env-names lU48d0@x)) (if (lU316d@interaction-env? lU48d0@x) (map values (lU2e66@rib-sym* (lU316f@interaction-env-rib lU48d0@x))) (assertion-violation 'environment-symbols '"not an environment" lU48d0@x))))) (set! lU4bf4@lU3185@environment-symbols lU3185@environment-symbols) (set! lU3187@environment (lambda lU48d2@imp* (let ((lU48d4@itc (lU3135@make-collector))) (let ((lU48da@lU48d7 lU313b@imp-collector) (lU48db@lU48d9 lU48d4@itc)) (let ((lU48de@swap (lambda () (let ((lU48e0@t (lU48da@lU48d7))) (begin (lU48da@lU48d7 lU48db@lU48d9) (set! lU48db@lU48d9 lU48e0@t)))))) (dynamic-wind lU48de@swap (lambda () (call-with-values (lambda () (lU3131@parse-import-spec* lU48d2@imp*)) (lambda (lU48e6@lU48e3 lU48e7@lU48e5) (let ((lU48ea@subst-labels lU48e7@lU48e5) (lU48eb@subst-names lU48e6@lU48e3)) (make-simple-struct 'env '4 (list lU48eb@subst-names lU48ea@subst-labels lU48d4@itc)))))) lU48de@swap)))))) (set! lU4bf5@lU3187@environment lU3187@environment) (set! lU3189@null-environment (lambda (lU48ee@n) (begin (if (not (eqv? lU48ee@n '5)) (assertion-violation 'null-environment '"not 5" lU48ee@n) (void)) (lU3187@environment '(psyntax null-environment-5))))) (set! lU4bf6@lU3189@null-environment lU3189@null-environment) (set! lU318b@scheme-report-environment (lambda (lU48f0@n) (begin (if (not (eqv? lU48f0@n '5)) (assertion-violation 'scheme-report-environment '"not 5" lU48f0@n) (void)) (lU3187@environment '(psyntax scheme-report-environment-5))))) (set! lU4bf7@lU318b@scheme-report-environment lU318b@scheme-report-environment) (set! lU318d@expand (lambda (lU48f2@x lU48f3@env) (if (lU3153@env? lU48f3@env) (let ((lU48f6@rib (lU3133@make-top-rib (lU3155@env-names lU48f3@env) (lU3159@env-labels lU48f3@env)))) (let ((lU48f8@x (make-simple-struct 'stx '5 (list lU48f2@x lU2e4c@top-mark* (list lU48f6@rib) '()))) (lU48f9@itc (lU315d@env-itc lU48f3@env)) (lU48fa@rtc (lU3135@make-collector)) (lU48fb@vtc (lU3135@make-collector))) (let ((lU4900@x (let ((lU4912@lU4903 lU31bf@top-level-context) (lU4913@lU4905 lU3137@inv-collector) (lU4914@lU4907 lU3139@vis-collector) (lU4915@lU4909 lU313b@imp-collector) (lU4916@lU490b '#f) (lU4917@lU490d lU48fa@rtc) (lU4918@lU490f lU48fb@vtc) (lU4919@lU4911 lU48f9@itc)) (let ((lU4922@swap (lambda () (begin (let ((lU4924@t (lU4912@lU4903))) (begin (lU4912@lU4903 lU4916@lU490b) (set! lU4916@lU490b lU4924@t))) (let ((lU4926@t (lU4913@lU4905))) (begin (lU4913@lU4905 lU4917@lU490d) (set! lU4917@lU490d lU4926@t))) (let ((lU4928@t (lU4914@lU4907))) (begin (lU4914@lU4907 lU4918@lU490f) (set! lU4918@lU490f lU4928@t))) (let ((lU492a@t (lU4915@lU4909))) (begin (lU4915@lU4909 lU4919@lU4911) (set! lU4919@lU4911 lU492a@t))))))) (dynamic-wind lU4922@swap (lambda () (lU30f1@chi-expr lU48f8@x '() '())) lU4922@swap))))) (begin (lU2e84@seal-rib! lU48f6@rib) (values lU4900@x (lU48fa@rtc)))))) (if (lU316d@interaction-env? lU48f3@env) (let ((lU492c@rib (lU316f@interaction-env-rib lU48f3@env)) (lU492d@r (lU3173@interaction-env-r lU48f3@env)) (lU492e@rtc (lU3135@make-collector))) (let ((lU4932@x (make-simple-struct 'stx '5 (list lU48f2@x lU2e4c@top-mark* (list lU492c@rib) '())))) (call-with-values (lambda () (let ((lU4948@lU4939 lU31bf@top-level-context) (lU4949@lU493b lU3137@inv-collector) (lU494a@lU493d lU3139@vis-collector) (lU494b@lU493f lU313b@imp-collector) (lU494c@lU4941 lU48f3@env) (lU494d@lU4943 lU492e@rtc) (lU494e@lU4945 (lU3135@make-collector)) (lU494f@lU4947 (lU3135@make-collector))) (let ((lU4958@swap (lambda () (begin (let ((lU495a@t (lU4948@lU4939))) (begin (lU4948@lU4939 lU494c@lU4941) (set! lU494c@lU4941 lU495a@t))) (let ((lU495c@t (lU4949@lU493b))) (begin (lU4949@lU493b lU494d@lU4943) (set! lU494d@lU4943 lU495c@t))) (let ((lU495e@t (lU494a@lU493d))) (begin (lU494a@lU493d lU494e@lU4945) (set! lU494e@lU4945 lU495e@t))) (let ((lU4960@t (lU494b@lU493f))) (begin (lU494b@lU493f lU494f@lU4947) (set! lU494f@lU4947 lU4960@t))))))) (dynamic-wind lU4958@swap (lambda () (lU313f@chi-interaction-expr lU4932@x lU492c@rib lU492d@r)) lU4958@swap)))) (lambda (lU4962@lU4935 lU4963@lU4937) (let ((lU4966@r^ lU4963@lU4937) (lU4967@e lU4962@lU4935)) (begin (lU3175@set-interaction-env-r! lU48f3@env lU4966@r^) (values lU4967@e (lU492e@rtc)))))))) (assertion-violation 'expand '"not an environment" lU48f3@env))))) (set! lU4bf8@lU318d@expand lU318d@expand) (set! lU318f@eval (lambda (lU496a@x lU496b@env) (begin (if (not (lU3183@environment? lU496b@env)) (error 'eval '"not an environment" lU496b@env) (void)) (call-with-values (lambda () (lU318d@expand lU496a@x lU496b@env)) (lambda (lU4972@lU496f lU4973@lU4971) (let ((lU4976@invoke-req* lU4973@lU4971) (lU4977@x lU4972@lU496f)) (begin (for-each lU2cde@lU2b2c@invoke-library lU4976@invoke-req*) (eval-core (lU2a68@lU2a20@expanded->core lU4977@x))))))))) (set! lU4bf9@lU318f@eval lU318f@eval) (set! lU3191@library-expander (lambda lU49e8 (let ((lU49e9 (length lU49e8))) (if (= lU49e9 '3) (apply (lambda (lU497a@x lU497b@filename lU497c@verify-name) (let ((lU4981@build-visit-code '#f) (lU4983@visit! '#f)) (begin (set! lU4981@build-visit-code (lambda (lU49d6@macro*) (if (null? lU49d6@macro*) (lU2e2e@lU2d89@build-void) (lU2e2d@lU2d87@build-sequence '#f (map (lambda (lU49d8@x) (let ((lU49da@loc (car lU49d8@x)) (lU49db@src (cddr lU49d8@x))) (list 'set! lU49da@loc lU49db@src))) lU49d6@macro*))))) (set! lU4983@visit! (lambda (lU49ce@macro*) (for-each (lambda (lU49d0@x) (let ((lU49d2@loc (car lU49d0@x)) (lU49d3@proc (cadr lU49d0@x))) (set-symbol-value! lU49d2@loc lU49d3@proc))) lU49ce@macro*))) (call-with-values (lambda () (lU3143@core-library-expander lU497a@x lU497c@verify-name)) (lambda (lU4996@lU4985 lU4997@lU4987 lU4998@lU4989 lU4999@lU498b lU499a@lU498d lU499b@lU498f lU499c@lU4991 lU499d@lU4993 lU499e@lU4995) (let ((lU49a8@export-env lU499e@lU4995) (lU49a9@export-subst lU499d@lU4993) (lU49aa@macro* lU499c@lU4991) (lU49ab@invoke-code lU499b@lU498f) (lU49ac@vis* lU499a@lU498d) (lU49ad@inv* lU4999@lU498b) (lU49ae@imp* lU4998@lU4989) (lU49af@ver lU4997@lU4987) (lU49b0@name lU4996@lU4985)) (let ((lU49ba@id (gensym)) (lU49bb@name lU49b0@name) (lU49bc@ver lU49af@ver) (lU49bd@imp* (map lU2ce2@lU2b34@library-spec lU49ae@imp*)) (lU49be@vis* (map lU2ce2@lU2b34@library-spec lU49ac@vis*)) (lU49bf@inv* (map lU2ce2@lU2b34@library-spec lU49ad@inv*)) (lU49c0@visit-proc (lambda () (lU4983@visit! lU49aa@macro*))) (lU49c1@invoke-proc (lambda () (eval-core (lU2a68@lU2a20@expanded->core lU49ab@invoke-code)))) (lU49c2@visit-code (lU4981@build-visit-code lU49aa@macro*)) (lU49c3@invoke-code lU49ab@invoke-code)) (begin (lU2cdc@lU2b28@install-library lU49ba@id lU49bb@name lU49bc@ver lU49bd@imp* lU49be@vis* lU49bf@inv* lU49a9@export-subst lU49a8@export-env lU49c0@visit-proc lU49c1@invoke-proc lU49c2@visit-code lU49c3@invoke-code '#t lU497b@filename) (values lU49ba@id lU49bb@name lU49bc@ver lU49bd@imp* lU49be@vis* lU49bf@inv* lU49c3@invoke-code lU49c2@visit-code lU49a9@export-subst lU49a8@export-env))))))))) lU49e8) (if (= lU49e9 '2) (apply (lambda (lU49de@x lU49df@filename) (lU3191@library-expander lU49de@x lU49df@filename (lambda (lU49e2@x) (values)))) lU49e8) (if (= lU49e9 '1) (apply (lambda (lU49e4@x) (lU3191@library-expander lU49e4@x '#f (lambda (lU49e6@x) (values)))) lU49e8) (error 'apply '"invalid arg count"))))))) (set! lU4bfa@lU3191@library-expander lU3191@library-expander) (set! lU3193@boot-library-expand (lambda (lU49ea@x) (call-with-values (lambda () (lU3191@library-expander lU49ea@x)) (lambda (lU4a00@lU49ed lU4a01@lU49ef lU4a02@lU49f1 lU4a03@lU49f3 lU4a04@lU49f5 lU4a05@lU49f7 lU4a06@lU49f9 lU4a07@lU49fb lU4a08@lU49fd lU4a09@lU49ff) (let ((lU4a14@export-env lU4a09@lU49ff) (lU4a15@export-subst lU4a08@lU49fd) (lU4a16@visit-code lU4a07@lU49fb) (lU4a17@invoke-code lU4a06@lU49f9) (lU4a18@inv* lU4a05@lU49f7) (lU4a19@vis* lU4a04@lU49f5) (lU4a1a@imp* lU4a03@lU49f3) (lU4a1b@ver lU4a02@lU49f1) (lU4a1c@name lU4a01@lU49ef) (lU4a1d@id lU4a00@lU49ed)) (values lU4a1c@name lU4a17@invoke-code lU4a15@export-subst lU4a14@export-env)))))) (set! lU4bfb@lU3193@boot-library-expand lU3193@boot-library-expand) (set! lU3195@rev-map-append (lambda (lU4a28@f lU4a29@ls lU4a2a@ac) (if (null? lU4a29@ls) lU4a2a@ac (lU3195@rev-map-append lU4a28@f (cdr lU4a29@ls) (cons (lU4a28@f (car lU4a29@ls)) lU4a2a@ac))))) (set! lU4bfc@lU3195@rev-map-append lU3195@rev-map-append) (set! lU3197@build-exports (lambda (lU4a2e@lex*+loc* lU4a2f@init*) (lU2e2d@lU2d87@build-sequence '#f (cons (lU2e2e@lU2d89@build-void) (lU3195@rev-map-append (lambda (lU4a32@x) (list 'set! (cdr lU4a32@x) (car lU4a32@x))) lU4a2e@lex*+loc* lU4a2f@init*))))) (set! lU4bfd@lU3197@build-exports lU3197@build-exports) (set! lU3199@make-export-subst (lambda (lU4a34@name* lU4a35@id*) (map (lambda (lU4a38@name lU4a39@id) (let ((lU4a3c@label (lU2ede@id->label lU4a39@id))) (begin (if (not lU4a3c@label) (lU31af@syntax-violation '#f '"cannot export unbound identifier" lU4a39@id) (void)) (cons lU4a38@name lU4a3c@label)))) lU4a34@name* lU4a35@id*))) (set! lU4bfe@lU3199@make-export-subst lU3199@make-export-subst) (set! lU319b@make-export-env/macros (lambda (lU4a3e@lex* lU4a3f@loc* lU4a40@r) (let ((lU4a45@lookup '#f)) (begin (set! lU4a45@lookup (lambda (lU4a62@x) (let lU4a6a@f ((lU4a64@x lU4a62@x) (lU4a65@lex* lU4a3e@lex*) (lU4a66@loc* lU4a3f@loc*)) (if (pair? lU4a65@lex*) (if (eq? lU4a64@x (car lU4a65@lex*)) (car lU4a66@loc*) (lU4a6a@f lU4a64@x (cdr lU4a65@lex*) (cdr lU4a66@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let lU4a4e@f ((lU4a46@r lU4a40@r) (lU4a47@env '()) (lU4a48@global* '()) (lU4a49@macro* '())) (if (null? lU4a46@r) (values lU4a47@env lU4a48@global* lU4a49@macro*) (let ((lU4a50@x (car lU4a46@r))) (let ((lU4a52@label (car lU4a50@x)) (lU4a53@b (cdr lU4a50@x))) (let ((lU4a56@t (lU2ee4@binding-type lU4a53@b))) (if (memv lU4a56@t '(lexical)) (let ((lU4a58@v (lU2ee6@binding-value lU4a53@b))) (let ((lU4a5a@loc (lU4a45@lookup (lU3059@lexical-var lU4a58@v))) (lU4a5b@type (if (lU305b@lexical-mutable? lU4a58@v) 'mutable 'global))) (lU4a4e@f (cdr lU4a46@r) (cons (cons* lU4a52@label lU4a5b@type lU4a5a@loc) lU4a47@env) (cons (cons (lU3059@lexical-var lU4a58@v) lU4a5a@loc) lU4a48@global*) lU4a49@macro*))) (if (memv lU4a56@t '(local-macro)) (let ((lU4a5e@loc (gensym))) (lU4a4e@f (cdr lU4a46@r) (cons (cons* lU4a52@label 'global-macro lU4a5e@loc) lU4a47@env) lU4a48@global* (cons (cons lU4a5e@loc (lU2ee6@binding-value lU4a53@b)) lU4a49@macro*))) (if (memv lU4a56@t '(local-macro!)) (let ((lU4a60@loc (gensym))) (lU4a4e@f (cdr lU4a46@r) (cons (cons* lU4a52@label 'global-macro! lU4a60@loc) lU4a47@env) lU4a48@global* (cons (cons lU4a60@loc (lU2ee6@binding-value lU4a53@b)) lU4a49@macro*))) (if (memv lU4a56@t '($rtd $module)) (lU4a4e@f (cdr lU4a46@r) (cons lU4a50@x lU4a47@env) lU4a48@global* lU4a49@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (lU2ee4@binding-type lU4a53@b) (lU2ee6@binding-value lU4a53@b))))))))))))))) (set! lU4bff@lU319b@make-export-env/macros lU319b@make-export-env/macros) (set! lU319d@generate-temporaries (lambda (lU4a6c@ls) (let ((lU4a6e@t lU4a6c@ls)) (let ((lU4a70@ls/false (lU30cf@syntax-dispatch lU4a6e@t 'each-any))) (if lU4a70@ls/false (apply (lambda (lU4a72@ls) (map (lambda (lU4a74@x) (make-simple-struct 'stx '5 (list (let ((lU4a76@x (lU31b5@syntax->datum lU4a74@x))) (if (or (symbol? lU4a76@x) (string? lU4a76@x)) (gensym lU4a76@x) (gensym 't))) lU2e4c@top-mark* '() '()))) lU4a72@ls)) lU4a70@ls/false) (let ((lU4a78@t lU4a6e@t)) (let ((lU4a7a@ls/false (lU30cf@syntax-dispatch lU4a78@t '_))) (if lU4a7a@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) lU4a7a@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU4a78@t))))))))) (set! lU4c00@lU319d@generate-temporaries lU319d@generate-temporaries) (set! lU319f@free-identifier=? (lambda (lU4a7c@x lU4a7d@y) (if (lU2ec8@id? lU4a7c@x) (if (lU2ec8@id? lU4a7d@y) (lU2ece@free-id=? lU4a7c@x lU4a7d@y) (assertion-violation 'free-identifier=? '"not an identifier" lU4a7d@y)) (assertion-violation 'free-identifier=? '"not an identifier" lU4a7c@x)))) (set! lU4c01@lU319f@free-identifier=? lU319f@free-identifier=?) (set! lU31a1@bound-identifier=? (lambda (lU4a80@x lU4a81@y) (if (lU2ec8@id? lU4a80@x) (if (lU2ec8@id? lU4a81@y) (lU2ecc@bound-id=? lU4a80@x lU4a81@y) (assertion-violation 'bound-identifier=? '"not an identifier" lU4a81@y)) (assertion-violation 'bound-identifier=? '"not an identifier" lU4a80@x)))) (set! lU4c02@lU31a1@bound-identifier=? lU31a1@bound-identifier=?) (set! lU31a3@make-source-condition (lambda (lU4a84@x) (let ((lU4a8e@lU4a89 '#f) (lU4a90@lU4a8b '#f) (lU4a92@lU4a8a '#f) (lU4a95@lU4a88 '#f) (lU4a97@make-source-condition '#f) (lU4a99@lU4a86 '#f) (lU4a9b@lU4a87 '#f) (lU4a9d@source-condition? '#f) (lU4a9f@source-filename '#f) (lU4aa1@source-character '#f)) (begin (set! lU4a8e@lU4a89 (make-record-type-descriptor '&source-information lU4ee4@lU4c2b@&condition-rtd 'lU4a8c '#f '#f '#((immutable file-name) (immutable character)))) (set! lU4a90@lU4a8b '#f) (set! lU4a92@lU4a8a (make-record-constructor-descriptor lU4a8e@lU4a89 lU4ee5@lU4c2d@&condition-rcd lU4a90@lU4a8b)) (set! lU4a95@lU4a88 (record-predicate lU4a8e@lU4a89)) (set! lU4a97@make-source-condition (record-constructor lU4a92@lU4a8a)) (set! lU4a99@lU4a86 (record-accessor lU4a8e@lU4a89 '0)) (set! lU4a9b@lU4a87 (record-accessor lU4a8e@lU4a89 '1)) (set! lU4a9d@source-condition? (condition-predicate lU4a8e@lU4a89)) (set! lU4a9f@source-filename (condition-accessor lU4a8e@lU4a89 lU4a99@lU4a86)) (set! lU4aa1@source-character (condition-accessor lU4a8e@lU4a89 lU4a9b@lU4a87)) (if (pair? lU4a84@x) (lU4a97@make-source-condition (car lU4a84@x) (cdr lU4a84@x)) (condition)))))) (set! lU4c03@lU31a3@make-source-condition lU31a3@make-source-condition) (set! lU31a5@extract-position-condition (lambda (lU4aa2@x) (lU31a3@make-source-condition (lU31a7@expression-position lU4aa2@x)))) (set! lU4c04@lU31a5@extract-position-condition lU31a5@extract-position-condition) (set! lU31a7@expression-position (lambda (lU4aa4@x) (and (lU2e94@stx? lU4aa4@x) (let ((lU4aa6@x (lU2e96@stx-expr lU4aa4@x))) (and (lU2a06@lU28d8@annotation? lU4aa6@x) (lU2a07@lU28da@annotation-source lU4aa6@x)))))) (set! lU4c05@lU31a7@expression-position lU31a7@expression-position) (set! lU31a9@assertion-error (lambda (lU4aa8@expr lU4aa9@pos) (raise (condition (lU4f14@lU4cef@make-assertion-violation) (lU4f26@lU4d21@make-who-condition 'assert) (lU4eea@lU4c82@make-message-condition '"assertion failed") (lU4f1c@lU4d06@make-irritants-condition (list lU4aa8@expr)) (lU31a3@make-source-condition lU4aa9@pos))))) (set! lU4c06@lU31a9@assertion-error lU31a9@assertion-error) (set! lU31ab@syntax-error (lambda (lU4aac@x . lU4aae@args) (begin (if (not (for-all string? lU4aae@args)) (assertion-violation 'syntax-error '"invalid argument" lU4aae@args) (void)) (raise (condition (lU4eea@lU4c82@make-message-condition (if (null? lU4aae@args) '"invalid syntax" (apply string-append lU4aae@args))) (lU4f48@lU4d7d@make-syntax-violation (lU31b5@syntax->datum lU4aac@x) '#f) (lU31a5@extract-position-condition lU4aac@x)))))) (set! lU4c07@lU31ab@syntax-error lU31ab@syntax-error) (set! lU31ad@syntax-violation* (lambda (lU4ab0@who lU4ab1@msg lU4ab2@form lU4ab3@condition-object) (begin (if (not (string? lU4ab1@msg)) (assertion-violation 'syntax-violation '"message is not a string" lU4ab1@msg) (void)) (let ((lU4ab8@who (if (or (string? lU4ab0@who) (symbol? lU4ab0@who)) lU4ab0@who (if (not lU4ab0@who) (let ((lU4aba@t lU4ab2@form)) (let ((lU4abc@ls/false (lU30cf@syntax-dispatch lU4aba@t 'any))) (if (and lU4abc@ls/false (apply (lambda (lU4abe@id) (lU2ec8@id? lU4abe@id)) lU4abc@ls/false)) (apply (lambda (lU4ac0@id) (lU31b5@syntax->datum lU4ac0@id)) lU4abc@ls/false) (let ((lU4ac2@t lU4aba@t)) (let ((lU4ac4@ls/false (lU30cf@syntax-dispatch lU4ac2@t '(any . any)))) (if (and lU4ac4@ls/false (apply (lambda (lU4ac6@id lU4ac7@rest) (lU2ec8@id? lU4ac6@id)) lU4ac4@ls/false)) (apply (lambda (lU4aca@id lU4acb@rest) (lU31b5@syntax->datum lU4aca@id)) lU4ac4@ls/false) (let ((lU4ace@t lU4ac2@t)) (let ((lU4ad0@ls/false (lU30cf@syntax-dispatch lU4ace@t '_))) (if lU4ad0@ls/false (apply (lambda () '#f) lU4ad0@ls/false) (lU31af@syntax-violation '#f '"invalid syntax" lU4ace@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" lU4ab0@who))))) (raise (condition (if lU4ab8@who (lU4f26@lU4d21@make-who-condition lU4ab8@who) (condition)) (lU4eea@lU4c82@make-message-condition lU4ab1@msg) lU4ab3@condition-object (lU31a5@extract-position-condition lU4ab2@form))))))) (set! lU4c08@lU31ad@syntax-violation* lU31ad@syntax-violation*) (set! lU31af@syntax-violation (lambda lU4ae0 (let ((lU4ae1 (length lU4ae0))) (if (= lU4ae1 '3) (apply (lambda (lU4ad2@who lU4ad3@msg lU4ad4@form) (lU31af@syntax-violation lU4ad2@who lU4ad3@msg lU4ad4@form '#f)) lU4ae0) (if (= lU4ae1 '4) (apply (lambda (lU4ad8@who lU4ad9@msg lU4ada@form lU4adb@subform) (lU31ad@syntax-violation* lU4ad8@who lU4ad9@msg lU4ada@form (lU4f48@lU4d7d@make-syntax-violation (lU31b5@syntax->datum lU4ada@form) (lU31b5@syntax->datum lU4adb@subform)))) lU4ae0) (error 'apply '"invalid arg count")))))) (set! lU4c09@lU31af@syntax-violation lU31af@syntax-violation) (set! lU31b1@identifier? (lambda (lU4ae2@x) (lU2ec8@id? lU4ae2@x))) (set! lU4c0a@lU31b1@identifier? lU31b1@identifier?) (set! lU31b3@datum->syntax (lambda (lU4ae4@id lU4ae5@datum) (if (lU2ec8@id? lU4ae4@id) (lU2ea8@datum->stx lU4ae4@id lU4ae5@datum) (assertion-violation 'datum->syntax '"not an identifier" lU4ae4@id)))) (set! lU4c0b@lU31b3@datum->syntax lU31b3@datum->syntax) (set! lU31b5@syntax->datum (lambda (lU4ae8@x) (lU2edc@stx->datum lU4ae8@x))) (set! lU4c0c@lU31b5@syntax->datum lU31b5@syntax->datum) (set! lU31b7@ungensym-all (lambda (lU4aea@code) (if (pair? lU4aea@code) (cons (lU31b7@ungensym-all (car lU4aea@code)) (lU31b7@ungensym-all (cdr lU4aea@code))) (if (symbol? lU4aea@code) (ungensym lU4aea@code) lU4aea@code)))) (set! lU4c0d@lU31b7@ungensym-all lU31b7@ungensym-all) (set! lU31b9@compile-r6rs-top-level (lambda (lU4aec@x*) (call-with-values (lambda () (lU3147@top-level-expander lU4aec@x*)) (lambda (lU4af2@lU4aef lU4af3@lU4af1) (let ((lU4af6@invoke-code lU4af3@lU4af1) (lU4af7@lib* lU4af2@lU4aef)) (lambda () (begin (for-each lU2cde@lU2b2c@invoke-library lU4af7@lib*) (let ((lU4afa@expanded (lU2a68@lU2a20@expanded->core lU4af6@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (lU31b7@ungensym-all lU4afa@expanded)) (void)) (eval-core lU4afa@expanded)))))))))) (set! lU4c0e@lU31b9@compile-r6rs-top-level lU31b9@compile-r6rs-top-level) (set! lU31bb@pre-compile-r6rs-top-level (lambda (lU4afc@x*) (call-with-values (lambda () (lU3147@top-level-expander lU4afc@x*)) (lambda (lU4b02@lU4aff lU4b03@lU4b01) (let ((lU4b06@invoke-code lU4b03@lU4b01) (lU4b07@lib* lU4b02@lU4aff)) (begin (for-each lU2cde@lU2b2c@invoke-library lU4b07@lib*) (lU2a10@lU28ec@compile-core (lU2a68@lU2a20@expanded->core lU4b06@invoke-code)))))))) (set! lU4c0f@lU31bb@pre-compile-r6rs-top-level lU31bb@pre-compile-r6rs-top-level) (set! lU31bd@interaction-environment (let ((lU4b0a@the-env '#f)) (lambda () (or lU4b0a@the-env (let ((lU4b0c@lib (lU2cd7@lU2b1e@find-library-by-name '(mosh interaction))) (lU4b0d@rib (lU2e7c@make-empty-rib))) (begin (let ((lU4b10@subst (lU2cb9@lU2ae2@library-subst lU4b0c@lib))) (begin (lU2e68@set-rib-sym*! lU4b0d@rib (map car lU4b10@subst)) (lU2e6c@set-rib-mark**! lU4b0d@rib (map (lambda (lU4b12@x) lU2e4c@top-mark*) lU4b10@subst)) (lU2e70@set-rib-label*! lU4b0d@rib (map cdr lU4b10@subst)))) (let ((lU4b14@env (make-simple-struct 'interaction-env '4 (list lU4b0d@rib '() '())))) (begin (set! lU4b0a@the-env lU4b14@env) lU4b14@env)))))))) (set! lU4c10@lU31bd@interaction-environment lU31bd@interaction-environment) (set! lU31bf@top-level-context (lU2a12@lU28f0@make-parameter '#f)) (set! lU4c11@lU31bf@top-level-context lU31bf@top-level-context) (lU2cd4@lU2b18@current-library-expander lU3191@library-expander))
(begin (set! lU4c20@lU4c1b (unspecified)) (set! lU4c22@lU4c1d (unspecified)) (set! lU4c24@lU4c1c (unspecified)) (set! lU4c27@&condition? (unspecified)) (set! lU4c29@make-&condition (unspecified)) (set! lU4c2b@&condition-rtd (unspecified)) (set! lU4c2d@&condition-rcd (unspecified)) (set! lU4c79@lU4c74 (unspecified)) (set! lU4c7b@lU4c76 (unspecified)) (set! lU4c7d@lU4c75 (unspecified)) (set! lU4c80@p? (unspecified)) (set! lU4c82@make-message-condition (unspecified)) (set! lU4c84@lU4c73 (unspecified)) (set! lU4c86@message-condition? (unspecified)) (set! lU4c88@condition-message (unspecified)) (set! lU4c8a@&message-rtd (unspecified)) (set! lU4c8c@&message-rcd (unspecified)) (set! lU4c92@lU4c8d (unspecified)) (set! lU4c94@lU4c8f (unspecified)) (set! lU4c96@lU4c8e (unspecified)) (set! lU4c99@p? (unspecified)) (set! lU4c9b@make-warning (unspecified)) (set! lU4c9d@warning? (unspecified)) (set! lU4c9f@&warning-rtd (unspecified)) (set! lU4ca1@&warning-rcd (unspecified)) (set! lU4ca7@lU4ca2 (unspecified)) (set! lU4ca9@lU4ca4 (unspecified)) (set! lU4cab@lU4ca3 (unspecified)) (set! lU4cae@p? (unspecified)) (set! lU4cb0@make-serious-condition (unspecified)) (set! lU4cb2@serious-condition? (unspecified)) (set! lU4cb4@&serious-rtd (unspecified)) (set! lU4cb6@&serious-rcd (unspecified)) (set! lU4cbc@lU4cb7 (unspecified)) (set! lU4cbe@lU4cb9 (unspecified)) (set! lU4cc0@lU4cb8 (unspecified)) (set! lU4cc3@p? (unspecified)) (set! lU4cc5@make-error (unspecified)) (set! lU4cc7@error? (unspecified)) (set! lU4cc9@&error-rtd (unspecified)) (set! lU4ccb@&error-rcd (unspecified)) (set! lU4cd1@lU4ccc (unspecified)) (set! lU4cd3@lU4cce (unspecified)) (set! lU4cd5@lU4ccd (unspecified)) (set! lU4cd8@p? (unspecified)) (set! lU4cda@make-violation (unspecified)) (set! lU4cdc@violation? (unspecified)) (set! lU4cde@&violation-rtd (unspecified)) (set! lU4ce0@&violation-rcd (unspecified)) (set! lU4ce6@lU4ce1 (unspecified)) (set! lU4ce8@lU4ce3 (unspecified)) (set! lU4cea@lU4ce2 (unspecified)) (set! lU4ced@p? (unspecified)) (set! lU4cef@make-assertion-violation (unspecified)) (set! lU4cf1@assertion-violation? (unspecified)) (set! lU4cf3@&assertion-rtd (unspecified)) (set! lU4cf5@&assertion-rcd (unspecified)) (set! lU4cfd@lU4cf8 (unspecified)) (set! lU4cff@lU4cfa (unspecified)) (set! lU4d01@lU4cf9 (unspecified)) (set! lU4d04@p? (unspecified)) (set! lU4d06@make-irritants-condition (unspecified)) (set! lU4d08@lU4cf7 (unspecified)) (set! lU4d0a@irritants-condition? (unspecified)) (set! lU4d0c@condition-irritants (unspecified)) (set! lU4d0e@&irritants-rtd (unspecified)) (set! lU4d10@&irritants-rcd (unspecified)) (set! lU4d18@lU4d13 (unspecified)) (set! lU4d1a@lU4d15 (unspecified)) (set! lU4d1c@lU4d14 (unspecified)) (set! lU4d1f@p? (unspecified)) (set! lU4d21@make-who-condition (unspecified)) (set! lU4d23@lU4d12 (unspecified)) (set! lU4d25@who-condition? (unspecified)) (set! lU4d27@condition-who (unspecified)) (set! lU4d29@&who-rtd (unspecified)) (set! lU4d2b@&who-rcd (unspecified)) (set! lU4d31@lU4d2c (unspecified)) (set! lU4d33@lU4d2e (unspecified)) (set! lU4d35@lU4d2d (unspecified)) (set! lU4d38@p? (unspecified)) (set! lU4d3a@make-non-continuable-violation (unspecified)) (set! lU4d3c@non-continuable-violation? (unspecified)) (set! lU4d3e@&non-continuable-rtd (unspecified)) (set! lU4d40@&non-continuable-rcd (unspecified)) (set! lU4d46@lU4d41 (unspecified)) (set! lU4d48@lU4d43 (unspecified)) (set! lU4d4a@lU4d42 (unspecified)) (set! lU4d4d@p? (unspecified)) (set! lU4d4f@make-implementation-restriction-violation (unspecified)) (set! lU4d51@implementation-restriction-violation? (unspecified)) (set! lU4d53@&implementation-restriction-rtd (unspecified)) (set! lU4d55@&implementation-restriction-rcd (unspecified)) (set! lU4d5b@lU4d56 (unspecified)) (set! lU4d5d@lU4d58 (unspecified)) (set! lU4d5f@lU4d57 (unspecified)) (set! lU4d62@p? (unspecified)) (set! lU4d64@make-lexical-violation (unspecified)) (set! lU4d66@lexical-violation? (unspecified)) (set! lU4d68@&lexical-rtd (unspecified)) (set! lU4d6a@&lexical-rcd (unspecified)) (set! lU4d74@lU4d6f (unspecified)) (set! lU4d76@lU4d71 (unspecified)) (set! lU4d78@lU4d70 (unspecified)) (set! lU4d7b@p? (unspecified)) (set! lU4d7d@make-syntax-violation (unspecified)) (set! lU4d7f@lU4d6c (unspecified)) (set! lU4d81@lU4d6e (unspecified)) (set! lU4d83@syntax-violation? (unspecified)) (set! lU4d85@syntax-violation-form (unspecified)) (set! lU4d87@syntax-violation-subform (unspecified)) (set! lU4d89@&syntax-rtd (unspecified)) (set! lU4d8b@&syntax-rcd (unspecified)) (set! lU4d91@lU4d8c (unspecified)) (set! lU4d93@lU4d8e (unspecified)) (set! lU4d95@lU4d8d (unspecified)) (set! lU4d98@p? (unspecified)) (set! lU4d9a@make-undefined-violation (unspecified)) (set! lU4d9c@undefined-violation? (unspecified)) (set! lU4d9e@&undefined-rtd (unspecified)) (set! lU4da0@&undefined-rcd (unspecified)) (set! lU4da6@lU4da1 (unspecified)) (set! lU4da8@lU4da3 (unspecified)) (set! lU4daa@lU4da2 (unspecified)) (set! lU4dad@p? (unspecified)) (set! lU4daf@make-i/o-error (unspecified)) (set! lU4db1@i/o-error? (unspecified)) (set! lU4db3@&i/o-rtd (unspecified)) (set! lU4db5@&i/o-rcd (unspecified)) (set! lU4dbb@lU4db6 (unspecified)) (set! lU4dbd@lU4db8 (unspecified)) (set! lU4dbf@lU4db7 (unspecified)) (set! lU4dc2@p? (unspecified)) (set! lU4dc4@make-i/o-read-error (unspecified)) (set! lU4dc6@i/o-read-error? (unspecified)) (set! lU4dc8@&i/o-read-rtd (unspecified)) (set! lU4dca@&i/o-read-rcd (unspecified)) (set! lU4dd0@lU4dcb (unspecified)) (set! lU4dd2@lU4dcd (unspecified)) (set! lU4dd4@lU4dcc (unspecified)) (set! lU4dd7@p? (unspecified)) (set! lU4dd9@make-i/o-write-error (unspecified)) (set! lU4ddb@i/o-write-error? (unspecified)) (set! lU4ddd@&i/o-write-rtd (unspecified)) (set! lU4ddf@&i/o-write-rcd (unspecified)) (set! lU4de7@lU4de2 (unspecified)) (set! lU4de9@lU4de4 (unspecified)) (set! lU4deb@lU4de3 (unspecified)) (set! lU4dee@p? (unspecified)) (set! lU4df0@make-i/o-invalid-position-error (unspecified)) (set! lU4df2@lU4de1 (unspecified)) (set! lU4df4@i/o-invalid-position-error? (unspecified)) (set! lU4df6@i/o-error-position (unspecified)) (set! lU4df8@&i/o-invalid-position-rtd (unspecified)) (set! lU4dfa@&i/o-invalid-position-rcd (unspecified)) (set! lU4e02@lU4dfd (unspecified)) (set! lU4e04@lU4dff (unspecified)) (set! lU4e06@lU4dfe (unspecified)) (set! lU4e09@p? (unspecified)) (set! lU4e0b@make-i/o-filename-error (unspecified)) (set! lU4e0d@lU4dfc (unspecified)) (set! lU4e0f@i/o-filename-error? (unspecified)) (set! lU4e11@i/o-error-filename (unspecified)) (set! lU4e13@&i/o-filename-rtd (unspecified)) (set! lU4e15@&i/o-filename-rcd (unspecified)) (set! lU4e1b@lU4e16 (unspecified)) (set! lU4e1d@lU4e18 (unspecified)) (set! lU4e1f@lU4e17 (unspecified)) (set! lU4e22@p? (unspecified)) (set! lU4e24@make-i/o-file-protection-error (unspecified)) (set! lU4e26@i/o-file-protection-error? (unspecified)) (set! lU4e28@&i/o-file-protection-rtd (unspecified)) (set! lU4e2a@&i/o-file-protection-rcd (unspecified)) (set! lU4e30@lU4e2b (unspecified)) (set! lU4e32@lU4e2d (unspecified)) (set! lU4e34@lU4e2c (unspecified)) (set! lU4e37@p? (unspecified)) (set! lU4e39@make-i/o-file-is-read-only-error (unspecified)) (set! lU4e3b@i/o-file-is-read-only-error? (unspecified)) (set! lU4e3d@&i/o-file-is-read-only-rtd (unspecified)) (set! lU4e3f@&i/o-file-is-read-only-rcd (unspecified)) (set! lU4e45@lU4e40 (unspecified)) (set! lU4e47@lU4e42 (unspecified)) (set! lU4e49@lU4e41 (unspecified)) (set! lU4e4c@p? (unspecified)) (set! lU4e4e@make-i/o-file-already-exists-error (unspecified)) (set! lU4e50@i/o-file-already-exists-error? (unspecified)) (set! lU4e52@&i/o-file-already-exists-rtd (unspecified)) (set! lU4e54@&i/o-file-already-exists-rcd (unspecified)) (set! lU4e5a@lU4e55 (unspecified)) (set! lU4e5c@lU4e57 (unspecified)) (set! lU4e5e@lU4e56 (unspecified)) (set! lU4e61@p? (unspecified)) (set! lU4e63@make-i/o-file-does-not-exist-error (unspecified)) (set! lU4e65@i/o-file-does-not-exist-error? (unspecified)) (set! lU4e67@&i/o-file-does-not-exist-rtd (unspecified)) (set! lU4e69@&i/o-file-does-not-exist-rcd (unspecified)) (set! lU4e71@lU4e6c (unspecified)) (set! lU4e73@lU4e6e (unspecified)) (set! lU4e75@lU4e6d (unspecified)) (set! lU4e78@p? (unspecified)) (set! lU4e7a@make-i/o-port-error (unspecified)) (set! lU4e7c@lU4e6b (unspecified)) (set! lU4e7e@i/o-port-error? (unspecified)) (set! lU4e80@i/o-error-port (unspecified)) (set! lU4e82@&i/o-port-rtd (unspecified)) (set! lU4e84@&i/o-port-rcd (unspecified)) (set! lU4e8a@lU4e85 (unspecified)) (set! lU4e8c@lU4e87 (unspecified)) (set! lU4e8e@lU4e86 (unspecified)) (set! lU4e91@p? (unspecified)) (set! lU4e93@make-i/o-decoding-error (unspecified)) (set! lU4e95@i/o-decoding-error? (unspecified)) (set! lU4e97@&i/o-decoding-rtd (unspecified)) (set! lU4e99@&i/o-decoding-rcd (unspecified)) (set! lU4ea1@lU4e9c (unspecified)) (set! lU4ea3@lU4e9e (unspecified)) (set! lU4ea5@lU4e9d (unspecified)) (set! lU4ea8@p? (unspecified)) (set! lU4eaa@make-i/o-encoding-error (unspecified)) (set! lU4eac@lU4e9b (unspecified)) (set! lU4eae@i/o-encoding-error? (unspecified)) (set! lU4eb0@i/o-encoding-error-char (unspecified)) (set! lU4eb2@&i/o-encoding-rtd (unspecified)) (set! lU4eb4@&i/o-encoding-rcd (unspecified)) (set! lU4eba@lU4eb5 (unspecified)) (set! lU4ebc@lU4eb7 (unspecified)) (set! lU4ebe@lU4eb6 (unspecified)) (set! lU4ec1@p? (unspecified)) (set! lU4ec3@make-no-infinities-violation (unspecified)) (set! lU4ec5@no-infinities-violation? (unspecified)) (set! lU4ec7@&no-infinities-rtd (unspecified)) (set! lU4ec9@&no-infinities-rcd (unspecified)) (set! lU4ecf@lU4eca (unspecified)) (set! lU4ed1@lU4ecc (unspecified)) (set! lU4ed3@lU4ecb (unspecified)) (set! lU4ed6@p? (unspecified)) (set! lU4ed8@make-no-nans-violation (unspecified)) (set! lU4eda@no-nans-violation? (unspecified)) (set! lU4edc@&no-nans-rtd (unspecified)) (set! lU4ede@&no-nans-rcd (unspecified)) (set! lU4c20@lU4c1b (make-record-type-descriptor '&condition '#f 'lU4c1e '#f '#f '#())) (set! lU4edf@lU4c20@lU4c1b lU4c20@lU4c1b) (set! lU4c22@lU4c1d '#f) (set! lU4ee0@lU4c22@lU4c1d lU4c22@lU4c1d) (set! lU4c24@lU4c1c (make-record-constructor-descriptor lU4c20@lU4c1b '#f lU4c22@lU4c1d)) (set! lU4ee1@lU4c24@lU4c1c lU4c24@lU4c1c) (set! lU4c27@&condition? (record-predicate lU4c20@lU4c1b)) (set! lU4ee2@lU4c27@&condition? lU4c27@&condition?) (set! lU4c29@make-&condition (record-constructor lU4c24@lU4c1c)) (set! lU4ee3@lU4c29@make-&condition lU4c29@make-&condition) (set! lU4c2b@&condition-rtd lU4c20@lU4c1b) (set! lU4ee4@lU4c2b@&condition-rtd lU4c2b@&condition-rtd) (set! lU4c2d@&condition-rcd lU4c24@lU4c1c) (set! lU4ee5@lU4c2d@&condition-rcd lU4c2d@&condition-rcd) (set! lU4c79@lU4c74 (make-record-type-descriptor '&message lU4c20@lU4c1b 'lU4c77 '#f '#f '#((immutable message)))) (set! lU4ee6@lU4c79@lU4c74 lU4c79@lU4c74) (set! lU4c7b@lU4c76 '#f) (set! lU4ee7@lU4c7b@lU4c76 lU4c7b@lU4c76) (set! lU4c7d@lU4c75 (make-record-constructor-descriptor lU4c79@lU4c74 lU4c24@lU4c1c lU4c7b@lU4c76)) (set! lU4ee8@lU4c7d@lU4c75 lU4c7d@lU4c75) (set! lU4c80@p? (record-predicate lU4c79@lU4c74)) (set! lU4ee9@lU4c80@p? lU4c80@p?) (set! lU4c82@make-message-condition (record-constructor lU4c7d@lU4c75)) (set! lU4eea@lU4c82@make-message-condition lU4c82@make-message-condition) (set! lU4c84@lU4c73 (record-accessor lU4c79@lU4c74 '0)) (set! lU4eeb@lU4c84@lU4c73 lU4c84@lU4c73) (set! lU4c86@message-condition? (condition-predicate lU4c79@lU4c74)) (set! lU4eec@lU4c86@message-condition? lU4c86@message-condition?) (set! lU4c88@condition-message (condition-accessor lU4c79@lU4c74 lU4c84@lU4c73)) (set! lU4eed@lU4c88@condition-message lU4c88@condition-message) (set! lU4c8a@&message-rtd lU4c79@lU4c74) (set! lU4eee@lU4c8a@&message-rtd lU4c8a@&message-rtd) (set! lU4c8c@&message-rcd lU4c7d@lU4c75) (set! lU4eef@lU4c8c@&message-rcd lU4c8c@&message-rcd) (set! lU4c92@lU4c8d (make-record-type-descriptor '&warning lU4c20@lU4c1b 'lU4c90 '#f '#f '#())) (set! lU4ef0@lU4c92@lU4c8d lU4c92@lU4c8d) (set! lU4c94@lU4c8f '#f) (set! lU4ef1@lU4c94@lU4c8f lU4c94@lU4c8f) (set! lU4c96@lU4c8e (make-record-constructor-descriptor lU4c92@lU4c8d lU4c24@lU4c1c lU4c94@lU4c8f)) (set! lU4ef2@lU4c96@lU4c8e lU4c96@lU4c8e) (set! lU4c99@p? (record-predicate lU4c92@lU4c8d)) (set! lU4ef3@lU4c99@p? lU4c99@p?) (set! lU4c9b@make-warning (record-constructor lU4c96@lU4c8e)) (set! lU4ef4@lU4c9b@make-warning lU4c9b@make-warning) (set! lU4c9d@warning? (condition-predicate lU4c92@lU4c8d)) (set! lU4ef5@lU4c9d@warning? lU4c9d@warning?) (set! lU4c9f@&warning-rtd lU4c92@lU4c8d) (set! lU4ef6@lU4c9f@&warning-rtd lU4c9f@&warning-rtd) (set! lU4ca1@&warning-rcd lU4c96@lU4c8e) (set! lU4ef7@lU4ca1@&warning-rcd lU4ca1@&warning-rcd) (set! lU4ca7@lU4ca2 (make-record-type-descriptor '&serious lU4c20@lU4c1b 'lU4ca5 '#f '#f '#())) (set! lU4ef8@lU4ca7@lU4ca2 lU4ca7@lU4ca2) (set! lU4ca9@lU4ca4 '#f) (set! lU4ef9@lU4ca9@lU4ca4 lU4ca9@lU4ca4) (set! lU4cab@lU4ca3 (make-record-constructor-descriptor lU4ca7@lU4ca2 lU4c24@lU4c1c lU4ca9@lU4ca4)) (set! lU4efa@lU4cab@lU4ca3 lU4cab@lU4ca3) (set! lU4cae@p? (record-predicate lU4ca7@lU4ca2)) (set! lU4efb@lU4cae@p? lU4cae@p?) (set! lU4cb0@make-serious-condition (record-constructor lU4cab@lU4ca3)) (set! lU4efc@lU4cb0@make-serious-condition lU4cb0@make-serious-condition) (set! lU4cb2@serious-condition? (condition-predicate lU4ca7@lU4ca2)) (set! lU4efd@lU4cb2@serious-condition? lU4cb2@serious-condition?) (set! lU4cb4@&serious-rtd lU4ca7@lU4ca2) (set! lU4efe@lU4cb4@&serious-rtd lU4cb4@&serious-rtd) (set! lU4cb6@&serious-rcd lU4cab@lU4ca3) (set! lU4eff@lU4cb6@&serious-rcd lU4cb6@&serious-rcd) (set! lU4cbc@lU4cb7 (make-record-type-descriptor '&error lU4ca7@lU4ca2 'lU4cba '#f '#f '#())) (set! lU4f00@lU4cbc@lU4cb7 lU4cbc@lU4cb7) (set! lU4cbe@lU4cb9 '#f) (set! lU4f01@lU4cbe@lU4cb9 lU4cbe@lU4cb9) (set! lU4cc0@lU4cb8 (make-record-constructor-descriptor lU4cbc@lU4cb7 lU4cab@lU4ca3 lU4cbe@lU4cb9)) (set! lU4f02@lU4cc0@lU4cb8 lU4cc0@lU4cb8) (set! lU4cc3@p? (record-predicate lU4cbc@lU4cb7)) (set! lU4f03@lU4cc3@p? lU4cc3@p?) (set! lU4cc5@make-error (record-constructor lU4cc0@lU4cb8)) (set! lU4f04@lU4cc5@make-error lU4cc5@make-error) (set! lU4cc7@error? (condition-predicate lU4cbc@lU4cb7)) (set! lU4f05@lU4cc7@error? lU4cc7@error?) (set! lU4cc9@&error-rtd lU4cbc@lU4cb7) (set! lU4f06@lU4cc9@&error-rtd lU4cc9@&error-rtd) (set! lU4ccb@&error-rcd lU4cc0@lU4cb8) (set! lU4f07@lU4ccb@&error-rcd lU4ccb@&error-rcd) (set! lU4cd1@lU4ccc (make-record-type-descriptor '&violation lU4ca7@lU4ca2 'lU4ccf '#f '#f '#())) (set! lU4f08@lU4cd1@lU4ccc lU4cd1@lU4ccc) (set! lU4cd3@lU4cce '#f) (set! lU4f09@lU4cd3@lU4cce lU4cd3@lU4cce) (set! lU4cd5@lU4ccd (make-record-constructor-descriptor lU4cd1@lU4ccc lU4cab@lU4ca3 lU4cd3@lU4cce)) (set! lU4f0a@lU4cd5@lU4ccd lU4cd5@lU4ccd) (set! lU4cd8@p? (record-predicate lU4cd1@lU4ccc)) (set! lU4f0b@lU4cd8@p? lU4cd8@p?) (set! lU4cda@make-violation (record-constructor lU4cd5@lU4ccd)) (set! lU4f0c@lU4cda@make-violation lU4cda@make-violation) (set! lU4cdc@violation? (condition-predicate lU4cd1@lU4ccc)) (set! lU4f0d@lU4cdc@violation? lU4cdc@violation?) (set! lU4cde@&violation-rtd lU4cd1@lU4ccc) (set! lU4f0e@lU4cde@&violation-rtd lU4cde@&violation-rtd) (set! lU4ce0@&violation-rcd lU4cd5@lU4ccd) (set! lU4f0f@lU4ce0@&violation-rcd lU4ce0@&violation-rcd) (set! lU4ce6@lU4ce1 (make-record-type-descriptor '&assertion lU4cd1@lU4ccc 'lU4ce4 '#f '#f '#())) (set! lU4f10@lU4ce6@lU4ce1 lU4ce6@lU4ce1) (set! lU4ce8@lU4ce3 '#f) (set! lU4f11@lU4ce8@lU4ce3 lU4ce8@lU4ce3) (set! lU4cea@lU4ce2 (make-record-constructor-descriptor lU4ce6@lU4ce1 lU4cd5@lU4ccd lU4ce8@lU4ce3)) (set! lU4f12@lU4cea@lU4ce2 lU4cea@lU4ce2) (set! lU4ced@p? (record-predicate lU4ce6@lU4ce1)) (set! lU4f13@lU4ced@p? lU4ced@p?) (set! lU4cef@make-assertion-violation (record-constructor lU4cea@lU4ce2)) (set! lU4f14@lU4cef@make-assertion-violation lU4cef@make-assertion-violation) (set! lU4cf1@assertion-violation? (condition-predicate lU4ce6@lU4ce1)) (set! lU4f15@lU4cf1@assertion-violation? lU4cf1@assertion-violation?) (set! lU4cf3@&assertion-rtd lU4ce6@lU4ce1) (set! lU4f16@lU4cf3@&assertion-rtd lU4cf3@&assertion-rtd) (set! lU4cf5@&assertion-rcd lU4cea@lU4ce2) (set! lU4f17@lU4cf5@&assertion-rcd lU4cf5@&assertion-rcd) (set! lU4cfd@lU4cf8 (make-record-type-descriptor '&irritants lU4c20@lU4c1b 'lU4cfb '#f '#f '#((immutable irritants)))) (set! lU4f18@lU4cfd@lU4cf8 lU4cfd@lU4cf8) (set! lU4cff@lU4cfa '#f) (set! lU4f19@lU4cff@lU4cfa lU4cff@lU4cfa) (set! lU4d01@lU4cf9 (make-record-constructor-descriptor lU4cfd@lU4cf8 lU4c24@lU4c1c lU4cff@lU4cfa)) (set! lU4f1a@lU4d01@lU4cf9 lU4d01@lU4cf9) (set! lU4d04@p? (record-predicate lU4cfd@lU4cf8)) (set! lU4f1b@lU4d04@p? lU4d04@p?) (set! lU4d06@make-irritants-condition (record-constructor lU4d01@lU4cf9)) (set! lU4f1c@lU4d06@make-irritants-condition lU4d06@make-irritants-condition) (set! lU4d08@lU4cf7 (record-accessor lU4cfd@lU4cf8 '0)) (set! lU4f1d@lU4d08@lU4cf7 lU4d08@lU4cf7) (set! lU4d0a@irritants-condition? (condition-predicate lU4cfd@lU4cf8)) (set! lU4f1e@lU4d0a@irritants-condition? lU4d0a@irritants-condition?) (set! lU4d0c@condition-irritants (condition-accessor lU4cfd@lU4cf8 lU4d08@lU4cf7)) (set! lU4f1f@lU4d0c@condition-irritants lU4d0c@condition-irritants) (set! lU4d0e@&irritants-rtd lU4cfd@lU4cf8) (set! lU4f20@lU4d0e@&irritants-rtd lU4d0e@&irritants-rtd) (set! lU4d10@&irritants-rcd lU4d01@lU4cf9) (set! lU4f21@lU4d10@&irritants-rcd lU4d10@&irritants-rcd) (set! lU4d18@lU4d13 (make-record-type-descriptor '&who lU4c20@lU4c1b 'lU4d16 '#f '#f '#((immutable who)))) (set! lU4f22@lU4d18@lU4d13 lU4d18@lU4d13) (set! lU4d1a@lU4d15 '#f) (set! lU4f23@lU4d1a@lU4d15 lU4d1a@lU4d15) (set! lU4d1c@lU4d14 (make-record-constructor-descriptor lU4d18@lU4d13 lU4c24@lU4c1c lU4d1a@lU4d15)) (set! lU4f24@lU4d1c@lU4d14 lU4d1c@lU4d14) (set! lU4d1f@p? (record-predicate lU4d18@lU4d13)) (set! lU4f25@lU4d1f@p? lU4d1f@p?) (set! lU4d21@make-who-condition (record-constructor lU4d1c@lU4d14)) (set! lU4f26@lU4d21@make-who-condition lU4d21@make-who-condition) (set! lU4d23@lU4d12 (record-accessor lU4d18@lU4d13 '0)) (set! lU4f27@lU4d23@lU4d12 lU4d23@lU4d12) (set! lU4d25@who-condition? (condition-predicate lU4d18@lU4d13)) (set! lU4f28@lU4d25@who-condition? lU4d25@who-condition?) (set! lU4d27@condition-who (condition-accessor lU4d18@lU4d13 lU4d23@lU4d12)) (set! lU4f29@lU4d27@condition-who lU4d27@condition-who) (set! lU4d29@&who-rtd lU4d18@lU4d13) (set! lU4f2a@lU4d29@&who-rtd lU4d29@&who-rtd) (set! lU4d2b@&who-rcd lU4d1c@lU4d14) (set! lU4f2b@lU4d2b@&who-rcd lU4d2b@&who-rcd) (set! lU4d31@lU4d2c (make-record-type-descriptor '&non-continuable lU4cd1@lU4ccc 'lU4d2f '#f '#f '#())) (set! lU4f2c@lU4d31@lU4d2c lU4d31@lU4d2c) (set! lU4d33@lU4d2e '#f) (set! lU4f2d@lU4d33@lU4d2e lU4d33@lU4d2e) (set! lU4d35@lU4d2d (make-record-constructor-descriptor lU4d31@lU4d2c lU4cd5@lU4ccd lU4d33@lU4d2e)) (set! lU4f2e@lU4d35@lU4d2d lU4d35@lU4d2d) (set! lU4d38@p? (record-predicate lU4d31@lU4d2c)) (set! lU4f2f@lU4d38@p? lU4d38@p?) (set! lU4d3a@make-non-continuable-violation (record-constructor lU4d35@lU4d2d)) (set! lU4f30@lU4d3a@make-non-continuable-violation lU4d3a@make-non-continuable-violation) (set! lU4d3c@non-continuable-violation? (condition-predicate lU4d31@lU4d2c)) (set! lU4f31@lU4d3c@non-continuable-violation? lU4d3c@non-continuable-violation?) (set! lU4d3e@&non-continuable-rtd lU4d31@lU4d2c) (set! lU4f32@lU4d3e@&non-continuable-rtd lU4d3e@&non-continuable-rtd) (set! lU4d40@&non-continuable-rcd lU4d35@lU4d2d) (set! lU4f33@lU4d40@&non-continuable-rcd lU4d40@&non-continuable-rcd) (set! lU4d46@lU4d41 (make-record-type-descriptor '&implementation-restriction lU4cd1@lU4ccc 'lU4d44 '#f '#f '#())) (set! lU4f34@lU4d46@lU4d41 lU4d46@lU4d41) (set! lU4d48@lU4d43 '#f) (set! lU4f35@lU4d48@lU4d43 lU4d48@lU4d43) (set! lU4d4a@lU4d42 (make-record-constructor-descriptor lU4d46@lU4d41 lU4cd5@lU4ccd lU4d48@lU4d43)) (set! lU4f36@lU4d4a@lU4d42 lU4d4a@lU4d42) (set! lU4d4d@p? (record-predicate lU4d46@lU4d41)) (set! lU4f37@lU4d4d@p? lU4d4d@p?) (set! lU4d4f@make-implementation-restriction-violation (record-constructor lU4d4a@lU4d42)) (set! lU4f38@lU4d4f@make-implementation-restriction-violation lU4d4f@make-implementation-restriction-violation) (set! lU4d51@implementation-restriction-violation? (condition-predicate lU4d46@lU4d41)) (set! lU4f39@lU4d51@implementation-restriction-violation? lU4d51@implementation-restriction-violation?) (set! lU4d53@&implementation-restriction-rtd lU4d46@lU4d41) (set! lU4f3a@lU4d53@&implementation-restriction-rtd lU4d53@&implementation-restriction-rtd) (set! lU4d55@&implementation-restriction-rcd lU4d4a@lU4d42) (set! lU4f3b@lU4d55@&implementation-restriction-rcd lU4d55@&implementation-restriction-rcd) (set! lU4d5b@lU4d56 (make-record-type-descriptor '&lexical lU4cd1@lU4ccc 'lU4d59 '#f '#f '#())) (set! lU4f3c@lU4d5b@lU4d56 lU4d5b@lU4d56) (set! lU4d5d@lU4d58 '#f) (set! lU4f3d@lU4d5d@lU4d58 lU4d5d@lU4d58) (set! lU4d5f@lU4d57 (make-record-constructor-descriptor lU4d5b@lU4d56 lU4cd5@lU4ccd lU4d5d@lU4d58)) (set! lU4f3e@lU4d5f@lU4d57 lU4d5f@lU4d57) (set! lU4d62@p? (record-predicate lU4d5b@lU4d56)) (set! lU4f3f@lU4d62@p? lU4d62@p?) (set! lU4d64@make-lexical-violation (record-constructor lU4d5f@lU4d57)) (set! lU4f40@lU4d64@make-lexical-violation lU4d64@make-lexical-violation) (set! lU4d66@lexical-violation? (condition-predicate lU4d5b@lU4d56)) (set! lU4f41@lU4d66@lexical-violation? lU4d66@lexical-violation?) (set! lU4d68@&lexical-rtd lU4d5b@lU4d56) (set! lU4f42@lU4d68@&lexical-rtd lU4d68@&lexical-rtd) (set! lU4d6a@&lexical-rcd lU4d5f@lU4d57) (set! lU4f43@lU4d6a@&lexical-rcd lU4d6a@&lexical-rcd) (set! lU4d74@lU4d6f (make-record-type-descriptor '&syntax lU4cd1@lU4ccc 'lU4d72 '#f '#f '#((immutable form) (immutable subform)))) (set! lU4f44@lU4d74@lU4d6f lU4d74@lU4d6f) (set! lU4d76@lU4d71 '#f) (set! lU4f45@lU4d76@lU4d71 lU4d76@lU4d71) (set! lU4d78@lU4d70 (make-record-constructor-descriptor lU4d74@lU4d6f lU4cd5@lU4ccd lU4d76@lU4d71)) (set! lU4f46@lU4d78@lU4d70 lU4d78@lU4d70) (set! lU4d7b@p? (record-predicate lU4d74@lU4d6f)) (set! lU4f47@lU4d7b@p? lU4d7b@p?) (set! lU4d7d@make-syntax-violation (record-constructor lU4d78@lU4d70)) (set! lU4f48@lU4d7d@make-syntax-violation lU4d7d@make-syntax-violation) (set! lU4d7f@lU4d6c (record-accessor lU4d74@lU4d6f '0)) (set! lU4f49@lU4d7f@lU4d6c lU4d7f@lU4d6c) (set! lU4d81@lU4d6e (record-accessor lU4d74@lU4d6f '1)) (set! lU4f4a@lU4d81@lU4d6e lU4d81@lU4d6e) (set! lU4d83@syntax-violation? (condition-predicate lU4d74@lU4d6f)) (set! lU4f4b@lU4d83@syntax-violation? lU4d83@syntax-violation?) (set! lU4d85@syntax-violation-form (condition-accessor lU4d74@lU4d6f lU4d7f@lU4d6c)) (set! lU4f4c@lU4d85@syntax-violation-form lU4d85@syntax-violation-form) (set! lU4d87@syntax-violation-subform (condition-accessor lU4d74@lU4d6f lU4d81@lU4d6e)) (set! lU4f4d@lU4d87@syntax-violation-subform lU4d87@syntax-violation-subform) (set! lU4d89@&syntax-rtd lU4d74@lU4d6f) (set! lU4f4e@lU4d89@&syntax-rtd lU4d89@&syntax-rtd) (set! lU4d8b@&syntax-rcd lU4d78@lU4d70) (set! lU4f4f@lU4d8b@&syntax-rcd lU4d8b@&syntax-rcd) (set! lU4d91@lU4d8c (make-record-type-descriptor '&undefined lU4cd1@lU4ccc 'lU4d8f '#f '#f '#())) (set! lU4f50@lU4d91@lU4d8c lU4d91@lU4d8c) (set! lU4d93@lU4d8e '#f) (set! lU4f51@lU4d93@lU4d8e lU4d93@lU4d8e) (set! lU4d95@lU4d8d (make-record-constructor-descriptor lU4d91@lU4d8c lU4cd5@lU4ccd lU4d93@lU4d8e)) (set! lU4f52@lU4d95@lU4d8d lU4d95@lU4d8d) (set! lU4d98@p? (record-predicate lU4d91@lU4d8c)) (set! lU4f53@lU4d98@p? lU4d98@p?) (set! lU4d9a@make-undefined-violation (record-constructor lU4d95@lU4d8d)) (set! lU4f54@lU4d9a@make-undefined-violation lU4d9a@make-undefined-violation) (set! lU4d9c@undefined-violation? (condition-predicate lU4d91@lU4d8c)) (set! lU4f55@lU4d9c@undefined-violation? lU4d9c@undefined-violation?) (set! lU4d9e@&undefined-rtd lU4d91@lU4d8c) (set! lU4f56@lU4d9e@&undefined-rtd lU4d9e@&undefined-rtd) (set! lU4da0@&undefined-rcd lU4d95@lU4d8d) (set! lU4f57@lU4da0@&undefined-rcd lU4da0@&undefined-rcd) (set! lU4da6@lU4da1 (make-record-type-descriptor '&i/o lU4cbc@lU4cb7 'lU4da4 '#f '#f '#())) (set! lU4f58@lU4da6@lU4da1 lU4da6@lU4da1) (set! lU4da8@lU4da3 '#f) (set! lU4f59@lU4da8@lU4da3 lU4da8@lU4da3) (set! lU4daa@lU4da2 (make-record-constructor-descriptor lU4da6@lU4da1 lU4cc0@lU4cb8 lU4da8@lU4da3)) (set! lU4f5a@lU4daa@lU4da2 lU4daa@lU4da2) (set! lU4dad@p? (record-predicate lU4da6@lU4da1)) (set! lU4f5b@lU4dad@p? lU4dad@p?) (set! lU4daf@make-i/o-error (record-constructor lU4daa@lU4da2)) (set! lU4f5c@lU4daf@make-i/o-error lU4daf@make-i/o-error) (set! lU4db1@i/o-error? (condition-predicate lU4da6@lU4da1)) (set! lU4f5d@lU4db1@i/o-error? lU4db1@i/o-error?) (set! lU4db3@&i/o-rtd lU4da6@lU4da1) (set! lU4f5e@lU4db3@&i/o-rtd lU4db3@&i/o-rtd) (set! lU4db5@&i/o-rcd lU4daa@lU4da2) (set! lU4f5f@lU4db5@&i/o-rcd lU4db5@&i/o-rcd) (set! lU4dbb@lU4db6 (make-record-type-descriptor '&i/o-read lU4da6@lU4da1 'lU4db9 '#f '#f '#())) (set! lU4f60@lU4dbb@lU4db6 lU4dbb@lU4db6) (set! lU4dbd@lU4db8 '#f) (set! lU4f61@lU4dbd@lU4db8 lU4dbd@lU4db8) (set! lU4dbf@lU4db7 (make-record-constructor-descriptor lU4dbb@lU4db6 lU4daa@lU4da2 lU4dbd@lU4db8)) (set! lU4f62@lU4dbf@lU4db7 lU4dbf@lU4db7) (set! lU4dc2@p? (record-predicate lU4dbb@lU4db6)) (set! lU4f63@lU4dc2@p? lU4dc2@p?) (set! lU4dc4@make-i/o-read-error (record-constructor lU4dbf@lU4db7)) (set! lU4f64@lU4dc4@make-i/o-read-error lU4dc4@make-i/o-read-error) (set! lU4dc6@i/o-read-error? (condition-predicate lU4dbb@lU4db6)) (set! lU4f65@lU4dc6@i/o-read-error? lU4dc6@i/o-read-error?) (set! lU4dc8@&i/o-read-rtd lU4dbb@lU4db6) (set! lU4f66@lU4dc8@&i/o-read-rtd lU4dc8@&i/o-read-rtd) (set! lU4dca@&i/o-read-rcd lU4dbf@lU4db7) (set! lU4f67@lU4dca@&i/o-read-rcd lU4dca@&i/o-read-rcd) (set! lU4dd0@lU4dcb (make-record-type-descriptor '&i/o-write lU4da6@lU4da1 'lU4dce '#f '#f '#())) (set! lU4f68@lU4dd0@lU4dcb lU4dd0@lU4dcb) (set! lU4dd2@lU4dcd '#f) (set! lU4f69@lU4dd2@lU4dcd lU4dd2@lU4dcd) (set! lU4dd4@lU4dcc (make-record-constructor-descriptor lU4dd0@lU4dcb lU4daa@lU4da2 lU4dd2@lU4dcd)) (set! lU4f6a@lU4dd4@lU4dcc lU4dd4@lU4dcc) (set! lU4dd7@p? (record-predicate lU4dd0@lU4dcb)) (set! lU4f6b@lU4dd7@p? lU4dd7@p?) (set! lU4dd9@make-i/o-write-error (record-constructor lU4dd4@lU4dcc)) (set! lU4f6c@lU4dd9@make-i/o-write-error lU4dd9@make-i/o-write-error) (set! lU4ddb@i/o-write-error? (condition-predicate lU4dd0@lU4dcb)) (set! lU4f6d@lU4ddb@i/o-write-error? lU4ddb@i/o-write-error?) (set! lU4ddd@&i/o-write-rtd lU4dd0@lU4dcb) (set! lU4f6e@lU4ddd@&i/o-write-rtd lU4ddd@&i/o-write-rtd) (set! lU4ddf@&i/o-write-rcd lU4dd4@lU4dcc) (set! lU4f6f@lU4ddf@&i/o-write-rcd lU4ddf@&i/o-write-rcd) (set! lU4de7@lU4de2 (make-record-type-descriptor '&i/o-invalid-position lU4da6@lU4da1 'lU4de5 '#f '#f '#((immutable position)))) (set! lU4f70@lU4de7@lU4de2 lU4de7@lU4de2) (set! lU4de9@lU4de4 '#f) (set! lU4f71@lU4de9@lU4de4 lU4de9@lU4de4) (set! lU4deb@lU4de3 (make-record-constructor-descriptor lU4de7@lU4de2 lU4daa@lU4da2 lU4de9@lU4de4)) (set! lU4f72@lU4deb@lU4de3 lU4deb@lU4de3) (set! lU4dee@p? (record-predicate lU4de7@lU4de2)) (set! lU4f73@lU4dee@p? lU4dee@p?) (set! lU4df0@make-i/o-invalid-position-error (record-constructor lU4deb@lU4de3)) (set! lU4f74@lU4df0@make-i/o-invalid-position-error lU4df0@make-i/o-invalid-position-error) (set! lU4df2@lU4de1 (record-accessor lU4de7@lU4de2 '0)) (set! lU4f75@lU4df2@lU4de1 lU4df2@lU4de1) (set! lU4df4@i/o-invalid-position-error? (condition-predicate lU4de7@lU4de2)) (set! lU4f76@lU4df4@i/o-invalid-position-error? lU4df4@i/o-invalid-position-error?) (set! lU4df6@i/o-error-position (condition-accessor lU4de7@lU4de2 lU4df2@lU4de1)) (set! lU4f77@lU4df6@i/o-error-position lU4df6@i/o-error-position) (set! lU4df8@&i/o-invalid-position-rtd lU4de7@lU4de2) (set! lU4f78@lU4df8@&i/o-invalid-position-rtd lU4df8@&i/o-invalid-position-rtd) (set! lU4dfa@&i/o-invalid-position-rcd lU4deb@lU4de3) (set! lU4f79@lU4dfa@&i/o-invalid-position-rcd lU4dfa@&i/o-invalid-position-rcd) (set! lU4e02@lU4dfd (make-record-type-descriptor '&i/o-filename lU4da6@lU4da1 'lU4e00 '#f '#f '#((immutable filename)))) (set! lU4f7a@lU4e02@lU4dfd lU4e02@lU4dfd) (set! lU4e04@lU4dff '#f) (set! lU4f7b@lU4e04@lU4dff lU4e04@lU4dff) (set! lU4e06@lU4dfe (make-record-constructor-descriptor lU4e02@lU4dfd lU4daa@lU4da2 lU4e04@lU4dff)) (set! lU4f7c@lU4e06@lU4dfe lU4e06@lU4dfe) (set! lU4e09@p? (record-predicate lU4e02@lU4dfd)) (set! lU4f7d@lU4e09@p? lU4e09@p?) (set! lU4e0b@make-i/o-filename-error (record-constructor lU4e06@lU4dfe)) (set! lU4f7e@lU4e0b@make-i/o-filename-error lU4e0b@make-i/o-filename-error) (set! lU4e0d@lU4dfc (record-accessor lU4e02@lU4dfd '0)) (set! lU4f7f@lU4e0d@lU4dfc lU4e0d@lU4dfc) (set! lU4e0f@i/o-filename-error? (condition-predicate lU4e02@lU4dfd)) (set! lU4f80@lU4e0f@i/o-filename-error? lU4e0f@i/o-filename-error?) (set! lU4e11@i/o-error-filename (condition-accessor lU4e02@lU4dfd lU4e0d@lU4dfc)) (set! lU4f81@lU4e11@i/o-error-filename lU4e11@i/o-error-filename) (set! lU4e13@&i/o-filename-rtd lU4e02@lU4dfd) (set! lU4f82@lU4e13@&i/o-filename-rtd lU4e13@&i/o-filename-rtd) (set! lU4e15@&i/o-filename-rcd lU4e06@lU4dfe) (set! lU4f83@lU4e15@&i/o-filename-rcd lU4e15@&i/o-filename-rcd) (set! lU4e1b@lU4e16 (make-record-type-descriptor '&i/o-file-protection lU4e02@lU4dfd 'lU4e19 '#f '#f '#())) (set! lU4f84@lU4e1b@lU4e16 lU4e1b@lU4e16) (set! lU4e1d@lU4e18 '#f) (set! lU4f85@lU4e1d@lU4e18 lU4e1d@lU4e18) (set! lU4e1f@lU4e17 (make-record-constructor-descriptor lU4e1b@lU4e16 lU4e06@lU4dfe lU4e1d@lU4e18)) (set! lU4f86@lU4e1f@lU4e17 lU4e1f@lU4e17) (set! lU4e22@p? (record-predicate lU4e1b@lU4e16)) (set! lU4f87@lU4e22@p? lU4e22@p?) (set! lU4e24@make-i/o-file-protection-error (record-constructor lU4e1f@lU4e17)) (set! lU4f88@lU4e24@make-i/o-file-protection-error lU4e24@make-i/o-file-protection-error) (set! lU4e26@i/o-file-protection-error? (condition-predicate lU4e1b@lU4e16)) (set! lU4f89@lU4e26@i/o-file-protection-error? lU4e26@i/o-file-protection-error?) (set! lU4e28@&i/o-file-protection-rtd lU4e1b@lU4e16) (set! lU4f8a@lU4e28@&i/o-file-protection-rtd lU4e28@&i/o-file-protection-rtd) (set! lU4e2a@&i/o-file-protection-rcd lU4e1f@lU4e17) (set! lU4f8b@lU4e2a@&i/o-file-protection-rcd lU4e2a@&i/o-file-protection-rcd) (set! lU4e30@lU4e2b (make-record-type-descriptor '&i/o-file-is-read-only lU4e1b@lU4e16 'lU4e2e '#f '#f '#())) (set! lU4f8c@lU4e30@lU4e2b lU4e30@lU4e2b) (set! lU4e32@lU4e2d '#f) (set! lU4f8d@lU4e32@lU4e2d lU4e32@lU4e2d) (set! lU4e34@lU4e2c (make-record-constructor-descriptor lU4e30@lU4e2b lU4e1f@lU4e17 lU4e32@lU4e2d)) (set! lU4f8e@lU4e34@lU4e2c lU4e34@lU4e2c) (set! lU4e37@p? (record-predicate lU4e30@lU4e2b)) (set! lU4f8f@lU4e37@p? lU4e37@p?) (set! lU4e39@make-i/o-file-is-read-only-error (record-constructor lU4e34@lU4e2c)) (set! lU4f90@lU4e39@make-i/o-file-is-read-only-error lU4e39@make-i/o-file-is-read-only-error) (set! lU4e3b@i/o-file-is-read-only-error? (condition-predicate lU4e30@lU4e2b)) (set! lU4f91@lU4e3b@i/o-file-is-read-only-error? lU4e3b@i/o-file-is-read-only-error?) (set! lU4e3d@&i/o-file-is-read-only-rtd lU4e30@lU4e2b) (set! lU4f92@lU4e3d@&i/o-file-is-read-only-rtd lU4e3d@&i/o-file-is-read-only-rtd) (set! lU4e3f@&i/o-file-is-read-only-rcd lU4e34@lU4e2c) (set! lU4f93@lU4e3f@&i/o-file-is-read-only-rcd lU4e3f@&i/o-file-is-read-only-rcd) (set! lU4e45@lU4e40 (make-record-type-descriptor '&i/o-file-already-exists lU4e02@lU4dfd 'lU4e43 '#f '#f '#())) (set! lU4f94@lU4e45@lU4e40 lU4e45@lU4e40) (set! lU4e47@lU4e42 '#f) (set! lU4f95@lU4e47@lU4e42 lU4e47@lU4e42) (set! lU4e49@lU4e41 (make-record-constructor-descriptor lU4e45@lU4e40 lU4e06@lU4dfe lU4e47@lU4e42)) (set! lU4f96@lU4e49@lU4e41 lU4e49@lU4e41) (set! lU4e4c@p? (record-predicate lU4e45@lU4e40)) (set! lU4f97@lU4e4c@p? lU4e4c@p?) (set! lU4e4e@make-i/o-file-already-exists-error (record-constructor lU4e49@lU4e41)) (set! lU4f98@lU4e4e@make-i/o-file-already-exists-error lU4e4e@make-i/o-file-already-exists-error) (set! lU4e50@i/o-file-already-exists-error? (condition-predicate lU4e45@lU4e40)) (set! lU4f99@lU4e50@i/o-file-already-exists-error? lU4e50@i/o-file-already-exists-error?) (set! lU4e52@&i/o-file-already-exists-rtd lU4e45@lU4e40) (set! lU4f9a@lU4e52@&i/o-file-already-exists-rtd lU4e52@&i/o-file-already-exists-rtd) (set! lU4e54@&i/o-file-already-exists-rcd lU4e49@lU4e41) (set! lU4f9b@lU4e54@&i/o-file-already-exists-rcd lU4e54@&i/o-file-already-exists-rcd) (set! lU4e5a@lU4e55 (make-record-type-descriptor '&i/o-file-does-not-exist lU4e02@lU4dfd 'lU4e58 '#f '#f '#())) (set! lU4f9c@lU4e5a@lU4e55 lU4e5a@lU4e55) (set! lU4e5c@lU4e57 '#f) (set! lU4f9d@lU4e5c@lU4e57 lU4e5c@lU4e57) (set! lU4e5e@lU4e56 (make-record-constructor-descriptor lU4e5a@lU4e55 lU4e06@lU4dfe lU4e5c@lU4e57)) (set! lU4f9e@lU4e5e@lU4e56 lU4e5e@lU4e56) (set! lU4e61@p? (record-predicate lU4e5a@lU4e55)) (set! lU4f9f@lU4e61@p? lU4e61@p?) (set! lU4e63@make-i/o-file-does-not-exist-error (record-constructor lU4e5e@lU4e56)) (set! lU4fa0@lU4e63@make-i/o-file-does-not-exist-error lU4e63@make-i/o-file-does-not-exist-error) (set! lU4e65@i/o-file-does-not-exist-error? (condition-predicate lU4e5a@lU4e55)) (set! lU4fa1@lU4e65@i/o-file-does-not-exist-error? lU4e65@i/o-file-does-not-exist-error?) (set! lU4e67@&i/o-file-does-not-exist-rtd lU4e5a@lU4e55) (set! lU4fa2@lU4e67@&i/o-file-does-not-exist-rtd lU4e67@&i/o-file-does-not-exist-rtd) (set! lU4e69@&i/o-file-does-not-exist-rcd lU4e5e@lU4e56) (set! lU4fa3@lU4e69@&i/o-file-does-not-exist-rcd lU4e69@&i/o-file-does-not-exist-rcd) (set! lU4e71@lU4e6c (make-record-type-descriptor '&i/o-port lU4da6@lU4da1 'lU4e6f '#f '#f '#((immutable port)))) (set! lU4fa4@lU4e71@lU4e6c lU4e71@lU4e6c) (set! lU4e73@lU4e6e '#f) (set! lU4fa5@lU4e73@lU4e6e lU4e73@lU4e6e) (set! lU4e75@lU4e6d (make-record-constructor-descriptor lU4e71@lU4e6c lU4daa@lU4da2 lU4e73@lU4e6e)) (set! lU4fa6@lU4e75@lU4e6d lU4e75@lU4e6d) (set! lU4e78@p? (record-predicate lU4e71@lU4e6c)) (set! lU4fa7@lU4e78@p? lU4e78@p?) (set! lU4e7a@make-i/o-port-error (record-constructor lU4e75@lU4e6d)) (set! lU4fa8@lU4e7a@make-i/o-port-error lU4e7a@make-i/o-port-error) (set! lU4e7c@lU4e6b (record-accessor lU4e71@lU4e6c '0)) (set! lU4fa9@lU4e7c@lU4e6b lU4e7c@lU4e6b) (set! lU4e7e@i/o-port-error? (condition-predicate lU4e71@lU4e6c)) (set! lU4faa@lU4e7e@i/o-port-error? lU4e7e@i/o-port-error?) (set! lU4e80@i/o-error-port (condition-accessor lU4e71@lU4e6c lU4e7c@lU4e6b)) (set! lU4fab@lU4e80@i/o-error-port lU4e80@i/o-error-port) (set! lU4e82@&i/o-port-rtd lU4e71@lU4e6c) (set! lU4fac@lU4e82@&i/o-port-rtd lU4e82@&i/o-port-rtd) (set! lU4e84@&i/o-port-rcd lU4e75@lU4e6d) (set! lU4fad@lU4e84@&i/o-port-rcd lU4e84@&i/o-port-rcd) (set! lU4e8a@lU4e85 (make-record-type-descriptor '&i/o-decoding lU4e71@lU4e6c 'lU4e88 '#f '#f '#())) (set! lU4fae@lU4e8a@lU4e85 lU4e8a@lU4e85) (set! lU4e8c@lU4e87 '#f) (set! lU4faf@lU4e8c@lU4e87 lU4e8c@lU4e87) (set! lU4e8e@lU4e86 (make-record-constructor-descriptor lU4e8a@lU4e85 lU4e75@lU4e6d lU4e8c@lU4e87)) (set! lU4fb0@lU4e8e@lU4e86 lU4e8e@lU4e86) (set! lU4e91@p? (record-predicate lU4e8a@lU4e85)) (set! lU4fb1@lU4e91@p? lU4e91@p?) (set! lU4e93@make-i/o-decoding-error (record-constructor lU4e8e@lU4e86)) (set! lU4fb2@lU4e93@make-i/o-decoding-error lU4e93@make-i/o-decoding-error) (set! lU4e95@i/o-decoding-error? (condition-predicate lU4e8a@lU4e85)) (set! lU4fb3@lU4e95@i/o-decoding-error? lU4e95@i/o-decoding-error?) (set! lU4e97@&i/o-decoding-rtd lU4e8a@lU4e85) (set! lU4fb4@lU4e97@&i/o-decoding-rtd lU4e97@&i/o-decoding-rtd) (set! lU4e99@&i/o-decoding-rcd lU4e8e@lU4e86) (set! lU4fb5@lU4e99@&i/o-decoding-rcd lU4e99@&i/o-decoding-rcd) (set! lU4ea1@lU4e9c (make-record-type-descriptor '&i/o-encoding lU4e71@lU4e6c 'lU4e9f '#f '#f '#((immutable char)))) (set! lU4fb6@lU4ea1@lU4e9c lU4ea1@lU4e9c) (set! lU4ea3@lU4e9e '#f) (set! lU4fb7@lU4ea3@lU4e9e lU4ea3@lU4e9e) (set! lU4ea5@lU4e9d (make-record-constructor-descriptor lU4ea1@lU4e9c lU4e75@lU4e6d lU4ea3@lU4e9e)) (set! lU4fb8@lU4ea5@lU4e9d lU4ea5@lU4e9d) (set! lU4ea8@p? (record-predicate lU4ea1@lU4e9c)) (set! lU4fb9@lU4ea8@p? lU4ea8@p?) (set! lU4eaa@make-i/o-encoding-error (record-constructor lU4ea5@lU4e9d)) (set! lU4fba@lU4eaa@make-i/o-encoding-error lU4eaa@make-i/o-encoding-error) (set! lU4eac@lU4e9b (record-accessor lU4ea1@lU4e9c '0)) (set! lU4fbb@lU4eac@lU4e9b lU4eac@lU4e9b) (set! lU4eae@i/o-encoding-error? (condition-predicate lU4ea1@lU4e9c)) (set! lU4fbc@lU4eae@i/o-encoding-error? lU4eae@i/o-encoding-error?) (set! lU4eb0@i/o-encoding-error-char (condition-accessor lU4ea1@lU4e9c lU4eac@lU4e9b)) (set! lU4fbd@lU4eb0@i/o-encoding-error-char lU4eb0@i/o-encoding-error-char) (set! lU4eb2@&i/o-encoding-rtd lU4ea1@lU4e9c) (set! lU4fbe@lU4eb2@&i/o-encoding-rtd lU4eb2@&i/o-encoding-rtd) (set! lU4eb4@&i/o-encoding-rcd lU4ea5@lU4e9d) (set! lU4fbf@lU4eb4@&i/o-encoding-rcd lU4eb4@&i/o-encoding-rcd) (set! lU4eba@lU4eb5 (make-record-type-descriptor '&no-infinities lU4d46@lU4d41 'lU4eb8 '#f '#f '#())) (set! lU4fc0@lU4eba@lU4eb5 lU4eba@lU4eb5) (set! lU4ebc@lU4eb7 '#f) (set! lU4fc1@lU4ebc@lU4eb7 lU4ebc@lU4eb7) (set! lU4ebe@lU4eb6 (make-record-constructor-descriptor lU4eba@lU4eb5 lU4d4a@lU4d42 lU4ebc@lU4eb7)) (set! lU4fc2@lU4ebe@lU4eb6 lU4ebe@lU4eb6) (set! lU4ec1@p? (record-predicate lU4eba@lU4eb5)) (set! lU4fc3@lU4ec1@p? lU4ec1@p?) (set! lU4ec3@make-no-infinities-violation (record-constructor lU4ebe@lU4eb6)) (set! lU4fc4@lU4ec3@make-no-infinities-violation lU4ec3@make-no-infinities-violation) (set! lU4ec5@no-infinities-violation? (condition-predicate lU4eba@lU4eb5)) (set! lU4fc5@lU4ec5@no-infinities-violation? lU4ec5@no-infinities-violation?) (set! lU4ec7@&no-infinities-rtd lU4eba@lU4eb5) (set! lU4fc6@lU4ec7@&no-infinities-rtd lU4ec7@&no-infinities-rtd) (set! lU4ec9@&no-infinities-rcd lU4ebe@lU4eb6) (set! lU4fc7@lU4ec9@&no-infinities-rcd lU4ec9@&no-infinities-rcd) (set! lU4ecf@lU4eca (make-record-type-descriptor '&no-nans lU4d46@lU4d41 'lU4ecd '#f '#f '#())) (set! lU4fc8@lU4ecf@lU4eca lU4ecf@lU4eca) (set! lU4ed1@lU4ecc '#f) (set! lU4fc9@lU4ed1@lU4ecc lU4ed1@lU4ecc) (set! lU4ed3@lU4ecb (make-record-constructor-descriptor lU4ecf@lU4eca lU4d4a@lU4d42 lU4ed1@lU4ecc)) (set! lU4fca@lU4ed3@lU4ecb lU4ed3@lU4ecb) (set! lU4ed6@p? (record-predicate lU4ecf@lU4eca)) (set! lU4fcb@lU4ed6@p? lU4ed6@p?) (set! lU4ed8@make-no-nans-violation (record-constructor lU4ed3@lU4ecb)) (set! lU4fcc@lU4ed8@make-no-nans-violation lU4ed8@make-no-nans-violation) (set! lU4eda@no-nans-violation? (condition-predicate lU4ecf@lU4eca)) (set! lU4fcd@lU4eda@no-nans-violation? lU4eda@no-nans-violation?) (set! lU4edc@&no-nans-rtd lU4ecf@lU4eca) (set! lU4fce@lU4edc@&no-nans-rtd lU4edc@&no-nans-rtd) (set! lU4ede@&no-nans-rcd lU4ed3@lU4ecb) (set! lU4fcf@lU4ede@&no-nans-rcd lU4ede@&no-nans-rcd) (void))
(begin (begin (lU2a65@lU2a1a@current-primitive-locations (lambda (lU5496@x) (let ((lU5498@t (assq lU5496@x '((&no-nans-rcd . lU4fcf@lU4ede@&no-nans-rcd) (&no-nans-rtd . lU4fce@lU4edc@&no-nans-rtd) (&no-infinities-rcd . lU4fc7@lU4ec9@&no-infinities-rcd) (&no-infinities-rtd . lU4fc6@lU4ec7@&no-infinities-rtd) (&i/o-encoding-rcd . lU4fbf@lU4eb4@&i/o-encoding-rcd) (&i/o-encoding-rtd . lU4fbe@lU4eb2@&i/o-encoding-rtd) (&i/o-decoding-rcd . lU4fb5@lU4e99@&i/o-decoding-rcd) (&i/o-decoding-rtd . lU4fb4@lU4e97@&i/o-decoding-rtd) (&i/o-port-rcd . lU4fad@lU4e84@&i/o-port-rcd) (&i/o-port-rtd . lU4fac@lU4e82@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . lU4fa3@lU4e69@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . lU4fa2@lU4e67@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . lU4f9b@lU4e54@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . lU4f9a@lU4e52@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . lU4f93@lU4e3f@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . lU4f92@lU4e3d@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . lU4f8b@lU4e2a@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . lU4f8a@lU4e28@&i/o-file-protection-rtd) (&i/o-filename-rcd . lU4f83@lU4e15@&i/o-filename-rcd) (&i/o-filename-rtd . lU4f82@lU4e13@&i/o-filename-rtd) (&i/o-invalid-position-rcd . lU4f79@lU4dfa@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . lU4f78@lU4df8@&i/o-invalid-position-rtd) (&i/o-write-rcd . lU4f6f@lU4ddf@&i/o-write-rcd) (&i/o-write-rtd . lU4f6e@lU4ddd@&i/o-write-rtd) (&i/o-read-rcd . lU4f67@lU4dca@&i/o-read-rcd) (&i/o-read-rtd . lU4f66@lU4dc8@&i/o-read-rtd) (&i/o-rcd . lU4f5f@lU4db5@&i/o-rcd) (&i/o-rtd . lU4f5e@lU4db3@&i/o-rtd) (&undefined-rcd . lU4f57@lU4da0@&undefined-rcd) (&undefined-rtd . lU4f56@lU4d9e@&undefined-rtd) (&syntax-rcd . lU4f4f@lU4d8b@&syntax-rcd) (&syntax-rtd . lU4f4e@lU4d89@&syntax-rtd) (&lexical-rcd . lU4f43@lU4d6a@&lexical-rcd) (&lexical-rtd . lU4f42@lU4d68@&lexical-rtd) (&implementation-restriction-rcd . lU4f3b@lU4d55@&implementation-restriction-rcd) (&implementation-restriction-rtd . lU4f3a@lU4d53@&implementation-restriction-rtd) (&non-continuable-rcd . lU4f33@lU4d40@&non-continuable-rcd) (&non-continuable-rtd . lU4f32@lU4d3e@&non-continuable-rtd) (&who-rcd . lU4f2b@lU4d2b@&who-rcd) (&who-rtd . lU4f2a@lU4d29@&who-rtd) (&irritants-rcd . lU4f21@lU4d10@&irritants-rcd) (&irritants-rtd . lU4f20@lU4d0e@&irritants-rtd) (&assertion-rcd . lU4f17@lU4cf5@&assertion-rcd) (&assertion-rtd . lU4f16@lU4cf3@&assertion-rtd) (&violation-rcd . lU4f0f@lU4ce0@&violation-rcd) (&violation-rtd . lU4f0e@lU4cde@&violation-rtd) (&error-rcd . lU4f07@lU4ccb@&error-rcd) (&error-rtd . lU4f06@lU4cc9@&error-rtd) (&serious-rcd . lU4eff@lU4cb6@&serious-rcd) (&serious-rtd . lU4efe@lU4cb4@&serious-rtd) (&warning-rcd . lU4ef7@lU4ca1@&warning-rcd) (&warning-rtd . lU4ef6@lU4c9f@&warning-rtd) (&message-rcd . lU4eef@lU4c8c@&message-rcd) (&message-rtd . lU4eee@lU4c8a@&message-rtd) (&condition-rcd . lU4ee5@lU4c2d@&condition-rcd) (&condition-rtd . lU4ee4@lU4c2b@&condition-rtd) (syntax-error . lU4c07@lU31ab@syntax-error) (syntax-dispatch . lU4ba5@lU30cf@syntax-dispatch) (load . lU5137@lU4fed@load) (interaction-environment . lU4c10@lU31bd@interaction-environment) (library-path . lU2ccc@lU2b08@library-path) (mosh-cache-dir . lU2a13@lU28f2@mosh-cache-dir) (make-parameter . lU2a12@lU28f0@make-parameter) (make-variable-transformer . lU4b62@lU2efa@make-variable-transformer) (identifier? . lU4c0a@lU31b1@identifier?) (generate-temporaries . lU4c00@lU319d@generate-temporaries) (free-identifier=? . lU4c01@lU319f@free-identifier=?) (syntax->datum . lU4c0c@lU31b5@syntax->datum) (datum->syntax . lU4c0b@lU31b3@datum->syntax) (bound-identifier=? . lU4c02@lU31a1@bound-identifier=?) (make-i/o-write-error . lU4f6c@lU4dd9@make-i/o-write-error) (make-i/o-read-error . lU4f64@lU4dc4@make-i/o-read-error) (make-i/o-port-error . lU4fa8@lU4e7a@make-i/o-port-error) (make-i/o-invalid-position-error . lU4f74@lU4df0@make-i/o-invalid-position-error) (make-i/o-filename-error . lU4f7e@lU4e0b@make-i/o-filename-error) (make-i/o-file-protection-error . lU4f88@lU4e24@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . lU4f90@lU4e39@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . lU4fa0@lU4e63@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . lU4f98@lU4e4e@make-i/o-file-already-exists-error) (make-i/o-error . lU4f5c@lU4daf@make-i/o-error) (make-i/o-encoding-error . lU4fba@lU4eaa@make-i/o-encoding-error) (make-i/o-decoding-error . lU4fb2@lU4e93@make-i/o-decoding-error) (i/o-write-error? . lU4f6d@lU4ddb@i/o-write-error?) (i/o-read-error? . lU4f65@lU4dc6@i/o-read-error?) (i/o-port-error? . lU4faa@lU4e7e@i/o-port-error?) (i/o-invalid-position-error? . lU4f76@lU4df4@i/o-invalid-position-error?) (i/o-filename-error? . lU4f80@lU4e0f@i/o-filename-error?) (i/o-file-protection-error? . lU4f89@lU4e26@i/o-file-protection-error?) (i/o-file-is-read-only-error? . lU4f91@lU4e3b@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . lU4fa1@lU4e65@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . lU4f99@lU4e50@i/o-file-already-exists-error?) (i/o-error? . lU4f5d@lU4db1@i/o-error?) (i/o-error-position . lU4f77@lU4df6@i/o-error-position) (i/o-error-port . lU4fab@lU4e80@i/o-error-port) (i/o-error-filename . lU4f81@lU4e11@i/o-error-filename) (i/o-encoding-error? . lU4fbc@lU4eae@i/o-encoding-error?) (i/o-encoding-error-char . lU4fbd@lU4eb0@i/o-encoding-error-char) (i/o-decoding-error? . lU4fb3@lU4e95@i/o-decoding-error?) (scheme-report-environment . lU4bf7@lU318b@scheme-report-environment) (null-environment . lU4bf6@lU3189@null-environment) (command-line . lU5134@lU4fe7@command-line) (eval . lU4bf9@lU318f@eval) (environment . lU4bf5@lU3187@environment) (who-condition? . lU4f28@lU4d25@who-condition?) (warning? . lU4ef5@lU4c9d@warning?) (violation? . lU4f0d@lU4cdc@violation?) (undefined-violation? . lU4f55@lU4d9c@undefined-violation?) (syntax-violation? . lU4f4b@lU4d83@syntax-violation?) (syntax-violation-subform . lU4f4d@lU4d87@syntax-violation-subform) (syntax-violation-form . lU4f4c@lU4d85@syntax-violation-form) (syntax-violation . lU4c09@lU31af@syntax-violation) (serious-condition? . lU4efd@lU4cb2@serious-condition?) (non-continuable-violation? . lU4f31@lU4d3c@non-continuable-violation?) (message-condition? . lU4eec@lU4c86@message-condition?) (make-who-condition . lU4f26@lU4d21@make-who-condition) (make-warning . lU4ef4@lU4c9b@make-warning) (make-violation . lU4f0c@lU4cda@make-violation) (make-undefined-violation . lU4f54@lU4d9a@make-undefined-violation) (make-syntax-violation . lU4f48@lU4d7d@make-syntax-violation) (make-serious-condition . lU4efc@lU4cb0@make-serious-condition) (make-non-continuable-violation . lU4f30@lU4d3a@make-non-continuable-violation) (make-message-condition . lU4eea@lU4c82@make-message-condition) (make-lexical-violation . lU4f40@lU4d64@make-lexical-violation) (make-irritants-condition . lU4f1c@lU4d06@make-irritants-condition) (make-implementation-restriction-violation . lU4f38@lU4d4f@make-implementation-restriction-violation) (make-error . lU4f04@lU4cc5@make-error) (make-assertion-violation . lU4f14@lU4cef@make-assertion-violation) (lexical-violation? . lU4f41@lU4d66@lexical-violation?) (irritants-condition? . lU4f1e@lU4d0a@irritants-condition?) (implementation-restriction-violation? . lU4f39@lU4d51@implementation-restriction-violation?) (error? . lU4f05@lU4cc7@error?) (condition-who . lU4f29@lU4d27@condition-who) (condition-message . lU4eed@lU4c88@condition-message) (condition-irritants . lU4f1f@lU4d0c@condition-irritants) (assertion-violation? . lU4f15@lU4cf1@assertion-violation?) (no-nans-violation? . lU4fcd@lU4eda@no-nans-violation?) (no-infinities-violation? . lU4fc5@lU4ec5@no-infinities-violation?) (make-no-nans-violation . lU4fcc@lU4ed8@make-no-nans-violation) (make-no-infinities-violation . lU4fc4@lU4ec3@make-no-infinities-violation) (assertion-error . lU4c06@lU31a9@assertion-error))))) (if lU5498@t (cdr lU5498@t) '#f)))) (lU2cdc@lU2b28@install-library 'lU5473 '(mosh interaction) '() '() '() '() '((regexp? . lU546b) (alist->eq-hash-table . lU5467) (format . lU5464) (string-split . lU5458) (call-process . lU5452) (set-current-directory! . lU544e) (expand-path . lU544d) (current-directory . lU544c) (%spawn . lU544b) (%waitpid . lU544a) (simple-struct-name . lU5449) (simple-struct-set! . lU5448) (simple-struct-ref . lU5447) (make-simple-struct . lU5446) (simple-struct? . lU5445) (pointer-ref-c-int64 . lU5444) (pointer-ref-c-int32 . lU5443) (pointer-ref-c-int16 . lU5442) (pointer-ref-c-int8 . lU5441) (pointer-ref-c-uint64 . lU5440) (pointer-ref-c-uint32 . lU543f) (pointer-ref-c-uint16 . lU543e) (pointer-ref-c-uint8 . lU543d) (pointer-set-c-uint64! . lU543c) (pointer-set-c-uint32! . lU543b) (pointer-set-c-uint16! . lU543a) (pointer-set-c-uint8! . lU5439) (pointer-set-c-int64! . lU5438) (pointer-set-c-int32! . lU5437) (pointer-set-c-int16! . lU5436) (pointer-set-c-int8! . lU5435) (pointer-set-c-pointer! . lU5434) (pointer-set-c-double! . lU5433) (pointer-set-c-float! . lU5432) (pointer-set-c-long-long! . lU5431) (pointer-set-c-long! . lU5430) (pointer-set-c-int! . lU542f) (pointer-set-c-short! . lU542e) (pointer-set-c-char! . lU542d) (pointer-ref-c-pointer . lU542c) (pointer-ref-c-double . lU542b) (pointer-ref-c-float . lU542a) (pointer-ref-c-unsigned-long-long . lU5429) (pointer-ref-c-signed-long-long . lU5428) (pointer-ref-c-unsigned-long . lU5427) (pointer-ref-c-signed-long . lU5426) (pointer-ref-c-unsigned-int . lU5425) (pointer-ref-c-signed-int . lU5424) (pointer-ref-c-unsigned-short . lU5423) (pointer-ref-c-signed-short . lU5422) (pointer-ref-c-unsigned-char . lU5421) (pointer-ref-c-signed-char . lU5420) (pointer->integer . lU541f) (integer->pointer . lU541e) (pointer? . lU541d) (shared-errno . lU541c) (%ffi-supported? . lU5414) (%ffi-pointer->string . lU5413) (%ffi-call . lU5412) (%ffi-lookup . lU5411) (%ffi-open . lU5410) (null-terminated-utf8->string . lU540f) (null-terminated-bytevector->string . lU540e) (%fork . lU540d) (%pipe . lU540c) (p . lU540b) (whereis . lU53ef) (register . lU53ee) (vm-join! . lU53ed) (vm-set-value! . lU53ec) (vm? . lU53eb) (main-vm? . lU53ea) (vm-eval . lU53e9) (vm-self . lU53e8) (vm-start! . lU53e7) (make-vm . lU53e6) (mutex-try-lock! . lU53e5) (mutex-unlock! . lU53e4) (mutex-lock! . lU53e3) (mutex? . lU53e2) (make-mutex . lU53e1) (condition-variable-notify-all! . lU53e0) (condition-variable-notify! . lU53df) (condition-variable-wait! . lU53de) (make-condition-variable . lU53dd) (string-upcase . lU53c0) (string-titlecase . lU53bf) (string-normalize-nfkd . lU53be) (string-normalize-nfkc . lU53bd) (string-normalize-nfd . lU53bc) (string-normalize-nfc . lU53bb) (string-foldcase . lU53ba) (string-downcase . lU53b9) (string-ci>? . lU53b8) (string-ci>=? . lU53b7) (string-ci=? . lU53b6) (string-ci<? . lU53b5) (string-ci<=? . lU53b4) (char-whitespace? . lU53b3) (char-upper-case? . lU53b2) (char-title-case? . lU53b1) (char-numeric? . lU53b0) (char-lower-case? . lU53af) (char-general-category . lU53ae) (char-upcase . lU53ad) (char-titlecase . lU53ac) (char-foldcase . lU53ab) (char-downcase . lU53aa) (char-ci>? . lU53a9) (char-ci>=? . lU53a8) (char-ci=? . lU53a7) (char-ci<? . lU53a6) (char-ci<=? . lU53a5) (char-alphabetic? . lU53a4) (make-variable-transformer . lU2ef9) (identifier? . lU31b0) (generate-temporaries . lU319c) (free-identifier=? . lU319e) (syntax->datum . lU31b4) (datum->syntax . lU31b2) (bound-identifier=? . lU31a0) (record-type-descriptor? . lU53a3) (record-predicate . lU53a2) (record-mutator . lU53a1) (record-constructor . lU53a0) (record-accessor . lU539f) (make-record-type-descriptor . lU539e) (make-record-constructor-descriptor . lU539d) (record? . lU539c) (record-type-uid . lU539b) (record-type-sealed? . lU539a) (record-type-parent . lU5399) (record-type-opaque? . lU5398) (record-type-name . lU5397) (record-type-generative? . lU5396) (record-type-field-names . lU5395) (record-rtd . lU5394) (record-field-mutable? . lU5393) (delete-file . lU5392) (file-exists? . lU5391) (vector-sort! . lU5390) (vector-sort . lU538f) (list-sort . lU538e) (symbol-hash . lU538d) (string-ci-hash . lU538c) (string-hash . lU538b) (equal-hash . lU538a) (hashtable-equivalence-function . lU5389) (make-hashtable . lU5388) (hashtable-hash-function . lU5387) (make-eqv-hashtable . lU5386) (make-eq-hashtable . lU5385) (hashtable? . lU5384) (hashtable-update! . lU5383) (hashtable-size . lU5382) (hashtable-set! . lU5381) (hashtable-ref . lU5380) (hashtable-mutable? . lU537f) (hashtable-keys . lU537e) (hashtable-entries . lU537d) (hashtable-delete! . lU537c) (hashtable-copy . lU537b) (hashtable-contains? . lU537a) (hashtable-clear! . lU5379) (call-with-output-file . lU5378) (call-with-input-file . lU5377) (write-char . lU5376) (write . lU5375) (with-output-to-file . lU5374) (with-input-from-file . lU5373) (read-char . lU5372) (read . lU5371) (peek-char . lU5370) (open-output-file . lU536f) (open-input-file . lU536e) (newline . lU536d) (display . lU536c) (close-output-port . lU536b) (close-input-port . lU536a) (eof-object? . lU5369) (eof-object . lU5368) (current-error-port . lU5367) (current-output-port . lU5366) (current-input-port . lU5365) (output-port? . lU5364) (input-port? . lU5363) (utf-8-codec . lU5362) (utf-16-codec . lU5361) (transcoder-error-handling-mode . lU5360) (transcoder-eol-style . lU535f) (transcoder-codec . lU535e) (transcoded-port . lU535d) (textual-port? . lU535c) (string->bytevector . lU535b) (standard-output-port . lU535a) (standard-input-port . lU5359) (standard-error-port . lU5358) (set-port-position! . lU5357) (put-u8 . lU5356) (put-string . lU5355) (put-datum . lU5354) (put-char . lU5353) (put-bytevector . lU5352) (port? . lU5351) (port-transcoder . lU5350) (port-position . lU534f) (port-has-set-port-position!? . lU534e) (port-has-port-position? . lU534d) (port-eof? . lU534c) (output-port-buffer-mode . lU534b) (open-string-output-port . lU534a) (open-string-input-port . lU5349) (open-file-output-port . lU5348) (open-file-input/output-port . lU5347) (open-file-input-port . lU5346) (open-bytevector-output-port . lU5345) (open-bytevector-input-port . lU5344) (native-transcoder . lU5343) (native-eol-style . lU5342) (make-transcoder . lU5341) (latin-1-codec . lU5340) (make-i/o-write-error . lU4dd8) (make-i/o-read-error . lU4dc3) (make-i/o-port-error . lU4e79) (make-i/o-invalid-position-error . lU4def) (make-i/o-filename-error . lU4e0a) (make-i/o-file-protection-error . lU4e23) (make-i/o-file-is-read-only-error . lU4e38) (make-i/o-file-does-not-exist-error . lU4e62) (make-i/o-file-already-exists-error . lU4e4d) (make-i/o-error . lU4dae) (make-i/o-encoding-error . lU4ea9) (make-i/o-decoding-error . lU4e92) (make-custom-textual-output-port . lU533f) (make-custom-textual-input/output-port . lU533e) (make-custom-textual-input-port . lU533d) (make-custom-binary-output-port . lU533c) (make-custom-binary-input/output-port . lU533b) (make-custom-binary-input-port . lU533a) (make-bytevector . lU5339) (lookahead-u8 . lU5338) (lookahead-char . lU5337) (i/o-write-error? . lU4dda) (i/o-read-error? . lU4dc5) (i/o-port-error? . lU4e7d) (i/o-invalid-position-error? . lU4df3) (i/o-filename-error? . lU4e0e) (i/o-file-protection-error? . lU4e25) (i/o-file-is-read-only-error? . lU4e3a) (i/o-file-does-not-exist-error? . lU4e64) (i/o-file-already-exists-error? . lU4e4f) (i/o-error? . lU4db0) (i/o-error-position . lU4df5) (i/o-error-port . lU4e7f) (i/o-error-filename . lU4e10) (i/o-encoding-error? . lU4ead) (i/o-encoding-error-char . lU4eaf) (i/o-decoding-error? . lU4e94) (get-u8 . lU5336) (get-string-n! . lU5335) (get-string-n . lU5334) (get-string-all . lU5333) (get-line . lU5332) (get-datum . lU5331) (get-char . lU5330) (get-bytevector-some . lU532f) (get-bytevector-n! . lU532e) (get-bytevector-n . lU532d) (get-bytevector-all . lU532c) (flush-output-port . lU532b) (close-port . lU532a) (exit . lU5322) (command-line . lU4fe6) (string-fill! . lU5321) (string-set! . lU5320) (set-cdr! . lU531f) (set-car! . lU531e) (remove . lU531d) (remv . lU531c) (remp . lU531b) (remq . lU531a) (partition . lU5319) (memv . lU5318) (memq . lU5317) (memp . lU5316) (member . lU5315) (exists . lU5314) (for-all . lU5313) (fold-right . lU5312) (fold-left . lU5311) (find . lU5310) (filter . lU530f) (cons* . lU530e) (assv . lU530d) (assq . lU530c) (assp . lU530b) (assoc . lU530a) (call-with-string-output-port . lU5309) (call-with-port . lU5308) (call-with-bytevector-output-port . lU5307) (bytevector->string . lU5306) (buffer-mode? . lU5305) (binary-port? . lU5304) (with-exception-handler . lU5303) (raise-continuable . lU5302) (raise . lU5301) (eval . lU318e) (environment . lU3186) (make-enumeration . lU5300) (enum-set=? . lU52ff) (enum-set-universe . lU52fe) (enum-set-union . lU52fd) (enum-set-subset? . lU52fc) (enum-set-projection . lU52fb) (enum-set-member? . lU52fa) (enum-set-intersection . lU52f9) (enum-set-indexer . lU52f8) (enum-set-difference . lU52f7) (enum-set-constructor . lU52f6) (enum-set-complement . lU52f5) (enum-set->list . lU52f4) (who-condition? . lU4d24) (warning? . lU4c9c) (violation? . lU4cdb) (undefined-violation? . lU4d9b) (syntax-violation? . lU4d82) (syntax-violation-subform . lU4d86) (syntax-violation-form . lU4d84) (syntax-violation . lU31ae) (simple-conditions . lU52f3) (serious-condition? . lU4cb1) (non-continuable-violation? . lU4d3b) (message-condition? . lU4c85) (make-who-condition . lU4d20) (make-warning . lU4c9a) (make-violation . lU4cd9) (make-undefined-violation . lU4d99) (make-syntax-violation . lU4d7c) (make-serious-condition . lU4caf) (make-non-continuable-violation . lU4d39) (make-message-condition . lU4c81) (make-lexical-violation . lU4d63) (make-irritants-condition . lU4d05) (make-implementation-restriction-violation . lU4d4e) (make-error . lU4cc4) (make-assertion-violation . lU4cee) (lexical-violation? . lU4d65) (irritants-condition? . lU4d09) (implementation-restriction-violation? . lU4d50) (error? . lU4cc6) (condition-who . lU4d26) (condition-predicate . lU52f2) (condition-message . lU4c87) (condition-irritants . lU4d0b) (condition-accessor . lU52f1) (condition . lU52f0) (assertion-violation? . lU4cf0) (condition? . lU52ef) (utf32->string . lU52ee) (utf16->string . lU52ed) (utf8->string . lU52ec) (uint-list->bytevector . lU52eb) (u8-list->bytevector . lU52ea) (string->utf8 . lU52e9) (string->utf32 . lU52e8) (string->utf16 . lU52e7) (sint-list->bytevector . lU52e6) (native-endianness . lU52e5) (bytevector? . lU52e4) (bytevector=? . lU52e3) (bytevector-uint-set! . lU52e2) (bytevector-uint-ref . lU52e1) (bytevector-u8-set! . lU52e0) (bytevector-u8-ref . lU52df) (bytevector-u64-set! . lU52de) (bytevector-u64-ref . lU52dd) (bytevector-u64-native-set! . lU52dc) (bytevector-u64-native-ref . lU52db) (bytevector-u32-set! . lU52da) (bytevector-u32-ref . lU52d9) (bytevector-u32-native-set! . lU52d8) (bytevector-u32-native-ref . lU52d7) (bytevector-u16-set! . lU52d6) (bytevector-u16-ref . lU52d5) (bytevector-u16-native-set! . lU52d4) (bytevector-u16-native-ref . lU52d3) (bytevector-sint-set! . lU52d2) (bytevector-sint-ref . lU52d1) (bytevector-s8-set! . lU52d0) (bytevector-s8-ref . lU52cf) (bytevector-s64-set! . lU52ce) (bytevector-s64-ref . lU52cd) (bytevector-s64-native-set! . lU52cc) (bytevector-s64-native-ref . lU52cb) (bytevector-s32-set! . lU52ca) (bytevector-s32-ref . lU52c9) (bytevector-s32-native-set! . lU52c8) (bytevector-s32-native-ref . lU52c7) (bytevector-s16-set! . lU52c6) (bytevector-s16-ref . lU52c5) (bytevector-s16-native-set! . lU52c4) (bytevector-s16-native-ref . lU52c3) (bytevector-length . lU52c2) (bytevector-ieee-single-ref . lU52c1) (bytevector-ieee-single-set! . lU52c0) (bytevector-ieee-single-native-set! . lU52bf) (bytevector-ieee-single-native-ref . lU52be) (bytevector-ieee-double-set! . lU52bd) (bytevector-ieee-double-ref . lU52bc) (bytevector-ieee-double-native-set! . lU52bb) (bytevector-ieee-double-native-ref . lU52ba) (bytevector-fill! . lU52b9) (bytevector-copy! . lU52b8) (bytevector-copy . lU52b7) (bytevector->uint-list . lU52b6) (bytevector->u8-list . lU52b5) (bytevector->sint-list . lU52b4) (no-nans-violation? . lU4ed9) (no-infinities-violation? . lU4ec4) (make-no-nans-violation . lU4ed7) (make-no-infinities-violation . lU4ec2) (real->flonum . lU52b3) (flzero? . lU52b2) (fltruncate . lU52b1) (fltan . lU52b0) (flsqrt . lU52af) (flsin . lU52ae) (flround . lU52ad) (flpositive? . lU52ac) (flonum? . lU52ab) (flodd? . lU52aa) (flnumerator . lU52a9) (flnegative? . lU52a8) (flnan? . lU52a7) (flmod0 . lU52a6) (flmod . lU52a5) (flmin . lU52a4) (flmax . lU52a3) (fllog . lU52a2) (flinteger? . lU52a1) (flinfinite? . lU52a0) (flfloor . lU529f) (flfinite? . lU529e) (flexpt . lU529d) (flexp . lU529c) (fleven? . lU529b) (fldiv0-and-mod0 . lU529a) (fldiv0 . lU5299) (fldiv-and-mod . lU5298) (fldiv . lU5297) (fldenominator . lU5296) (flcos . lU5295) (flceiling . lU5294) (flatan . lU5293) (flasin . lU5292) (flacos . lU5291) (flabs . lU5290) (fl>? . lU528f) (fl>=? . lU528e) (fl=? . lU528d) (fl<? . lU528c) (fl<=? . lU528b) (fl/ . lU528a) (fl- . lU5289) (fl+ . lU5288) (fl* . lU5287) (fixnum->flonum . lU5286) (fxzero? . lU5285) (fxxor . lU5284) (fxrotate-bit-field . lU5283) (fxreverse-bit-field . lU5282) (fxpositive? . lU5281) (fxodd? . lU5280) (fxnot . lU527f) (fxnegative? . lU527e) (fxmod0 . lU527d) (fxmod . lU527c) (fxmin . lU527b) (fxmax . lU527a) (fxlength . lU5279) (fxior . lU5278) (fxif . lU5277) (fxfirst-bit-set . lU5276) (fxeven? . lU5275) (fxdiv0-and-mod0 . lU5274) (fxdiv0 . lU5273) (fxdiv-and-mod . lU5272) (fxdiv . lU5271) (fxcopy-bit-field . lU5270) (fxcopy-bit . lU526f) (fxbit-set? . lU526e) (fxbit-field . lU526d) (fxbit-count . lU526c) (fxarithmetic-shift-right . lU526b) (fxarithmetic-shift-left . lU526a) (fxarithmetic-shift . lU5269) (fxand . lU5268) (fx>? . lU5267) (fx>=? . lU5266) (fx=? . lU5265) (fx<? . lU5264) (fx<=? . lU5263) (fx-/carry . lU5262) (fx- . lU5261) (fx+/carry . lU5260) (fx+ . lU525f) (fx*/carry . lU525e) (fx* . lU525d) (greatest-fixnum . lU525c) (least-fixnum . lU525b) (fixnum-width . lU525a) (fixnum? . lU5259) (bitwise-rotate-bit-field . lU5258) (bitwise-reverse-bit-field . lU5257) (bitwise-length . lU5256) (bitwise-if . lU5255) (bitwise-first-bit-set . lU5254) (bitwise-copy-bit-field . lU5253) (bitwise-copy-bit . lU5252) (bitwise-bit-set? . lU5251) (bitwise-bit-field . lU5250) (bitwise-bit-count . lU524f) (bitwise-xor . lU524e) (bitwise-ior . lU524d) (bitwise-and . lU524c) (bitwise-not . lU524b) (bitwise-arithmetic-shift-right . lU524a) (bitwise-arithmetic-shift-left . lU5249) (bitwise-arithmetic-shift . lU5248) (zero? . lU5247) (vector? . lU5246) (vector-set! . lU5245) (vector-ref . lU5244) (vector-map . lU5243) (vector-length . lU5242) (vector-for-each . lU5241) (vector-fill! . lU5240) (vector->list . lU523f) (vector . lU523e) (values . lU523d) (truncate . lU523c) (tan . lU523b) (symbol? . lU523a) (symbol=? . lU5239) (symbol->string . lU5238) (substring . lU5237) (string? . lU5236) (string>? . lU5235) (string>=? . lU5234) (string=? . lU5233) (string<? . lU5232) (string<=? . lU5231) (string-ref . lU5230) (string-length . lU522f) (string-for-each . lU522e) (string-copy . lU522d) (string-append . lU522c) (string->symbol . lU522b) (string->number . lU522a) (string->list . lU5229) (string . lU5228) (sqrt . lU5227) (sin . lU5226) (round . lU5225) (reverse . lU5224) (real? . lU5223) (real-valued? . lU5222) (real-part . lU5221) (rationalize . lU5220) (rational? . lU521f) (rational-valued? . lU521e) (procedure? . lU521d) (positive? . lU521c) (pair? . lU521b) (odd? . lU521a) (numerator . lU5219) (number? . lU5218) (number->string . lU5217) (null? . lU5216) (not . lU5215) (negative? . lU5214) (nan? . lU5213) (min . lU5212) (max . lU5211) (map . lU5210) (make-vector . lU520f) (make-string . lU520e) (make-rectangular . lU520d) (make-polar . lU520c) (magnitude . lU520b) (log . lU520a) (list? . lU5209) (list-tail . lU5208) (list-ref . lU5207) (list->vector . lU5206) (list->string . lU5205) (list . lU5204) (length . lU5203) (lcm . lU5202) (integer? . lU5201) (integer-valued? . lU5200) (integer->char . lU51ff) (infinite? . lU51fe) (inexact? . lU51fd) (inexact . lU51fc) (imag-part . lU51fb) (gcd . lU51fa) (for-each . lU51f9) (floor . lU51f8) (finite? . lU51f7) (expt . lU51f6) (exp . lU51f5) (exact? . lU51f4) (exact-integer-sqrt . lU51f3) (exact . lU51f2) (even? . lU51f1) (error . lU51f0) (eqv? . lU51ef) (equal? . lU51ee) (eq? . lU51ed) (dynamic-wind . lU51ec) (div0-and-mod0 . lU51eb) (mod0 . lU51ea) (div0 . lU51e9) (div-and-mod . lU51e8) (mod . lU51e7) (div . lU51e6) (denominator . lU51e5) (cos . lU51e4) (cons . lU51e3) (complex? . lU51e2) (char? . lU51e1) (char>? . lU51e0) (char>=? . lU51df) (char=? . lU51de) (char<? . lU51dd) (char<=? . lU51dc) (char->integer . lU51db) (ceiling . lU51da) (call-with-values . lU51d9) (call/cc . lU51d8) (call-with-current-continuation . lU51d7) (cddddr . lU51d6) (cdddar . lU51d5) (cddadr . lU51d4) (cddaar . lU51d3) (cdaddr . lU51d2) (cdadar . lU51d1) (cdaadr . lU51d0) (cdaaar . lU51cf) (cadddr . lU51ce) (caddar . lU51cd) (cadadr . lU51cc) (cadaar . lU51cb) (caaddr . lU51ca) (caadar . lU51c9) (caaadr . lU51c8) (caaaar . lU51c7) (cdddr . lU51c6) (cddar . lU51c5) (cdadr . lU51c4) (cdaar . lU51c3) (caddr . lU51c2) (cadar . lU51c1) (caadr . lU51c0) (caaar . lU51bf) (cddr . lU51be) (cdar . lU51bd) (cadr . lU51bc) (caar . lU51bb) (cdr . lU51ba) (car . lU51b9) (boolean? . lU51b8) (boolean=? . lU51b7) (atan . lU51b6) (assertion-violation . lU51b5) (asin . lU51b4) (apply . lU51b3) (append . lU51b2) (angle . lU51b1) (acos . lU51b0) (abs . lU51af) (/ . lU51ae) (* . lU51ad) (- . lU51ac) (+ . lU51ab) (>= . lU51aa) (> . lU51a9) (= . lU51a8) (<= . lU51a7) (< . lU51a6) (library . lU51a5) (&no-nans . lU51a4) (&no-infinities . lU51a3) (&i/o-encoding . lU51a2) (&i/o-decoding . lU51a1) (&i/o-port . lU51a0) (&i/o-file-does-not-exist . lU519f) (&i/o-file-already-exists . lU519e) (&i/o-file-is-read-only . lU519d) (&i/o-file-protection . lU519c) (&i/o-filename . lU519b) (&i/o-invalid-position . lU519a) (&i/o-write . lU5199) (&i/o-read . lU5198) (&i/o . lU5197) (&undefined . lU5196) (&syntax . lU5195) (&lexical . lU5194) (&implementation-restriction . lU5193) (&non-continuable . lU5192) (&who . lU5191) (&irritants . lU5190) (&assertion . lU518f) (&violation . lU518e) (&error . lU518d) (&serious . lU518c) (&warning . lU518b) (&message . lU518a) (&condition . lU5189) (define-condition-type . lU5188) (define-enumeration . lU5187) (define-record-type . lU5186) (parent-rtd . lU5185) (nongenerative . lU5184) (opaque . lU5183) (sealed . lU5182) (protocol . lU5181) (parent . lU5180) (immutable . lU517f) (mutable . lU517e) (fields . lU517d) (error-handling-mode . lU517c) (file-options . lU517b) (buffer-mode . lU517a) (eol-style . lU5179) (guard . lU5178) (unsyntax-splicing . lU5175) (unsyntax . lU5174) (unquote-splicing . lU5173) (unquote . lU5172) (_ . lU5171) (else . lU5170) (=> . lU516f) (... . lU516e) (assert . lU516d) (endianness . lU516c) (time . lU516a) (do . lU5169) (cond . lU5168) (let* . lU5167) (let*-values . lU5166) (let-values . lU5165) (identifier-syntax . lU5164) (with-syntax . lU5163) (quasisyntax . lU5162) (quasiquote . lU5161) (syntax-rules . lU5160) (include . lU515f) (record-constructor-descriptor . lU515d) (record-type-descriptor . lU515c) (case . lU515b) (unless . lU5159) (when . lU5158) (or . lU5157) (and . lU5156) (if . lU5155) (let . lU5154) (letrec* . lU5153) (letrec . lU5152) (case-lambda . lU5150) (lambda . lU514f) (syntax . lU514e) (syntax-case . lU514d) (quote . lU514c) (letrec-syntax . lU514a) (let-syntax . lU5149) (set! . lU5148) (import . lU5147) (begin . lU5146) (define-syntax . lU5144) (define . lU5143)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU5474 '(psyntax null-environment-5) '() '() '() '() '((make-promise . lU5323) (unquote-splicing . lU5173) (unquote . lU5172) (_ . lU5171) (else . lU5170) (=> . lU516f) (... . lU516e) (delay . lU516b) (do . lU5169) (cond . lU5168) (let* . lU5167) (quasiquote . lU5161) (syntax-rules . lU5160) (case . lU515b) (or . lU5157) (and . lU5156) (if . lU5155) (let . lU5154) (letrec . lU5152) (lambda . lU514f) (quote . lU514c) (letrec-syntax . lU514a) (let-syntax . lU5149) (set! . lU5148) (begin . lU5146) (define-syntax . lU5144) (define . lU5143)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU5475 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . lU53b8) (string-ci>=? . lU53b7) (string-ci=? . lU53b6) (string-ci<? . lU53b5) (string-ci<=? . lU53b4) (char-whitespace? . lU53b3) (char-upper-case? . lU53b2) (char-numeric? . lU53b0) (char-lower-case? . lU53af) (char-upcase . lU53ad) (char-downcase . lU53aa) (char-ci>? . lU53a9) (char-ci>=? . lU53a8) (char-ci=? . lU53a7) (char-ci<? . lU53a6) (char-ci<=? . lU53a5) (char-alphabetic? . lU53a4) (call-with-output-file . lU5378) (call-with-input-file . lU5377) (write-char . lU5376) (write . lU5375) (with-output-to-file . lU5374) (with-input-from-file . lU5373) (read-char . lU5372) (read . lU5371) (peek-char . lU5370) (open-output-file . lU536f) (open-input-file . lU536e) (newline . lU536d) (display . lU536c) (close-output-port . lU536b) (close-input-port . lU536a) (eof-object . lU5368) (current-output-port . lU5366) (current-input-port . lU5365) (output-port? . lU5364) (input-port? . lU5363) (scheme-report-environment . lU318a) (quotient . lU5329) (null-environment . lU3188) (remainder . lU5328) (modulo . lU5327) (inexact->exact . lU5326) (force . lU5325) (exact->inexact . lU5324) (make-promise . lU5323) (string-fill! . lU5321) (string-set! . lU5320) (set-cdr! . lU531f) (set-car! . lU531e) (memv . lU5318) (memq . lU5317) (member . lU5315) (assv . lU530d) (assq . lU530c) (assoc . lU530a) (eval . lU318e) (zero? . lU5247) (vector? . lU5246) (vector-set! . lU5245) (vector-ref . lU5244) (vector-length . lU5242) (vector-fill! . lU5240) (vector->list . lU523f) (vector . lU523e) (values . lU523d) (truncate . lU523c) (tan . lU523b) (symbol? . lU523a) (symbol->string . lU5238) (substring . lU5237) (string? . lU5236) (string>? . lU5235) (string>=? . lU5234) (string=? . lU5233) (string<? . lU5232) (string<=? . lU5231) (string-ref . lU5230) (string-length . lU522f) (string-copy . lU522d) (string-append . lU522c) (string->symbol . lU522b) (string->number . lU522a) (string->list . lU5229) (string . lU5228) (sqrt . lU5227) (sin . lU5226) (round . lU5225) (reverse . lU5224) (real? . lU5223) (real-part . lU5221) (rationalize . lU5220) (rational? . lU521f) (procedure? . lU521d) (positive? . lU521c) (pair? . lU521b) (odd? . lU521a) (numerator . lU5219) (number? . lU5218) (number->string . lU5217) (not . lU5215) (negative? . lU5214) (min . lU5212) (max . lU5211) (map . lU5210) (make-vector . lU520f) (make-string . lU520e) (make-rectangular . lU520d) (make-polar . lU520c) (magnitude . lU520b) (log . lU520a) (list? . lU5209) (list-tail . lU5208) (list-ref . lU5207) (list->vector . lU5206) (list->string . lU5205) (list . lU5204) (length . lU5203) (lcm . lU5202) (integer? . lU5201) (integer->char . lU51ff) (inexact? . lU51fd) (imag-part . lU51fb) (gcd . lU51fa) (for-each . lU51f9) (floor . lU51f8) (expt . lU51f6) (exp . lU51f5) (exact? . lU51f4) (even? . lU51f1) (eqv? . lU51ef) (equal? . lU51ee) (eq? . lU51ed) (dynamic-wind . lU51ec) (denominator . lU51e5) (cos . lU51e4) (cons . lU51e3) (complex? . lU51e2) (char? . lU51e1) (char>? . lU51e0) (char>=? . lU51df) (char=? . lU51de) (char<? . lU51dd) (char<=? . lU51dc) (char->integer . lU51db) (ceiling . lU51da) (call-with-values . lU51d9) (call-with-current-continuation . lU51d7) (cddddr . lU51d6) (cdddar . lU51d5) (cddadr . lU51d4) (cddaar . lU51d3) (cdaddr . lU51d2) (cdadar . lU51d1) (cdaadr . lU51d0) (cdaaar . lU51cf) (cadddr . lU51ce) (caddar . lU51cd) (cadadr . lU51cc) (cadaar . lU51cb) (caaddr . lU51ca) (caadar . lU51c9) (caaadr . lU51c8) (caaaar . lU51c7) (cdddr . lU51c6) (cddar . lU51c5) (cdadr . lU51c4) (cdaar . lU51c3) (caddr . lU51c2) (cadar . lU51c1) (caadr . lU51c0) (caaar . lU51bf) (cddr . lU51be) (cdar . lU51bd) (cadr . lU51bc) (caar . lU51bb) (cdr . lU51ba) (car . lU51b9) (boolean? . lU51b8) (atan . lU51b6) (asin . lU51b4) (apply . lU51b3) (append . lU51b2) (angle . lU51b1) (acos . lU51b0) (abs . lU51af) (/ . lU51ae) (* . lU51ad) (- . lU51ac) (+ . lU51ab) (>= . lU51aa) (> . lU51a9) (= . lU51a8) (<= . lU51a7) (< . lU51a6) (unquote-splicing . lU5173) (unquote . lU5172) (else . lU5170) (=> . lU516f) (... . lU516e) (delay . lU516b) (do . lU5169) (cond . lU5168) (let* . lU5167) (quasiquote . lU5161) (syntax-rules . lU5160) (case . lU515b) (or . lU5157) (and . lU5156) (if . lU5155) (let . lU5154) (letrec . lU5152) (lambda . lU514f) (quote . lU514c) (letrec-syntax . lU514a) (let-syntax . lU5149) (set! . lU5148) (begin . lU5146) (define-syntax . lU5144) (define . lU5143)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU5476 '(psyntax modules) '() '() '() '() '((module . lU5145)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU5477 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU5478 '(rnrs) '(6) '() '() '() '((regexp? . lU546b) (string-upcase . lU53c0) (string-titlecase . lU53bf) (string-normalize-nfkd . lU53be) (string-normalize-nfkc . lU53bd) (string-normalize-nfd . lU53bc) (string-normalize-nfc . lU53bb) (string-foldcase . lU53ba) (string-downcase . lU53b9) (string-ci>? . lU53b8) (string-ci>=? . lU53b7) (string-ci=? . lU53b6) (string-ci<? . lU53b5) (string-ci<=? . lU53b4) (char-whitespace? . lU53b3) (char-upper-case? . lU53b2) (char-title-case? . lU53b1) (char-numeric? . lU53b0) (char-lower-case? . lU53af) (char-general-category . lU53ae) (char-upcase . lU53ad) (char-titlecase . lU53ac) (char-foldcase . lU53ab) (char-downcase . lU53aa) (char-ci>? . lU53a9) (char-ci>=? . lU53a8) (char-ci=? . lU53a7) (char-ci<? . lU53a6) (char-ci<=? . lU53a5) (char-alphabetic? . lU53a4) (make-variable-transformer . lU2ef9) (identifier? . lU31b0) (generate-temporaries . lU319c) (free-identifier=? . lU319e) (syntax->datum . lU31b4) (datum->syntax . lU31b2) (bound-identifier=? . lU31a0) (record-type-descriptor? . lU53a3) (record-predicate . lU53a2) (record-mutator . lU53a1) (record-constructor . lU53a0) (record-accessor . lU539f) (make-record-type-descriptor . lU539e) (make-record-constructor-descriptor . lU539d) (record? . lU539c) (record-type-uid . lU539b) (record-type-sealed? . lU539a) (record-type-parent . lU5399) (record-type-opaque? . lU5398) (record-type-name . lU5397) (record-type-generative? . lU5396) (record-type-field-names . lU5395) (record-rtd . lU5394) (record-field-mutable? . lU5393) (delete-file . lU5392) (file-exists? . lU5391) (vector-sort! . lU5390) (vector-sort . lU538f) (list-sort . lU538e) (symbol-hash . lU538d) (string-ci-hash . lU538c) (string-hash . lU538b) (equal-hash . lU538a) (hashtable-equivalence-function . lU5389) (make-hashtable . lU5388) (hashtable-hash-function . lU5387) (make-eqv-hashtable . lU5386) (make-eq-hashtable . lU5385) (hashtable? . lU5384) (hashtable-update! . lU5383) (hashtable-size . lU5382) (hashtable-set! . lU5381) (hashtable-ref . lU5380) (hashtable-mutable? . lU537f) (hashtable-keys . lU537e) (hashtable-entries . lU537d) (hashtable-delete! . lU537c) (hashtable-copy . lU537b) (hashtable-contains? . lU537a) (hashtable-clear! . lU5379) (call-with-output-file . lU5378) (call-with-input-file . lU5377) (write-char . lU5376) (write . lU5375) (with-output-to-file . lU5374) (with-input-from-file . lU5373) (read-char . lU5372) (read . lU5371) (peek-char . lU5370) (open-output-file . lU536f) (open-input-file . lU536e) (newline . lU536d) (display . lU536c) (close-output-port . lU536b) (close-input-port . lU536a) (eof-object? . lU5369) (eof-object . lU5368) (current-error-port . lU5367) (current-output-port . lU5366) (current-input-port . lU5365) (output-port? . lU5364) (input-port? . lU5363) (utf-8-codec . lU5362) (utf-16-codec . lU5361) (transcoder-error-handling-mode . lU5360) (transcoder-eol-style . lU535f) (transcoder-codec . lU535e) (transcoded-port . lU535d) (textual-port? . lU535c) (string->bytevector . lU535b) (standard-output-port . lU535a) (standard-input-port . lU5359) (standard-error-port . lU5358) (set-port-position! . lU5357) (put-u8 . lU5356) (put-string . lU5355) (put-datum . lU5354) (put-char . lU5353) (put-bytevector . lU5352) (port? . lU5351) (port-transcoder . lU5350) (port-position . lU534f) (port-has-set-port-position!? . lU534e) (port-has-port-position? . lU534d) (port-eof? . lU534c) (output-port-buffer-mode . lU534b) (open-string-output-port . lU534a) (open-string-input-port . lU5349) (open-file-output-port . lU5348) (open-file-input/output-port . lU5347) (open-file-input-port . lU5346) (open-bytevector-output-port . lU5345) (open-bytevector-input-port . lU5344) (native-transcoder . lU5343) (native-eol-style . lU5342) (make-transcoder . lU5341) (latin-1-codec . lU5340) (make-i/o-write-error . lU4dd8) (make-i/o-read-error . lU4dc3) (make-i/o-port-error . lU4e79) (make-i/o-invalid-position-error . lU4def) (make-i/o-filename-error . lU4e0a) (make-i/o-file-protection-error . lU4e23) (make-i/o-file-is-read-only-error . lU4e38) (make-i/o-file-does-not-exist-error . lU4e62) (make-i/o-file-already-exists-error . lU4e4d) (make-i/o-error . lU4dae) (make-i/o-encoding-error . lU4ea9) (make-i/o-decoding-error . lU4e92) (make-custom-textual-output-port . lU533f) (make-custom-textual-input/output-port . lU533e) (make-custom-textual-input-port . lU533d) (make-custom-binary-output-port . lU533c) (make-custom-binary-input/output-port . lU533b) (make-custom-binary-input-port . lU533a) (make-bytevector . lU5339) (lookahead-u8 . lU5338) (lookahead-char . lU5337) (i/o-write-error? . lU4dda) (i/o-read-error? . lU4dc5) (i/o-port-error? . lU4e7d) (i/o-invalid-position-error? . lU4df3) (i/o-filename-error? . lU4e0e) (i/o-file-protection-error? . lU4e25) (i/o-file-is-read-only-error? . lU4e3a) (i/o-file-does-not-exist-error? . lU4e64) (i/o-file-already-exists-error? . lU4e4f) (i/o-error? . lU4db0) (i/o-error-position . lU4df5) (i/o-error-port . lU4e7f) (i/o-error-filename . lU4e10) (i/o-encoding-error? . lU4ead) (i/o-encoding-error-char . lU4eaf) (i/o-decoding-error? . lU4e94) (get-u8 . lU5336) (get-string-n! . lU5335) (get-string-n . lU5334) (get-string-all . lU5333) (get-line . lU5332) (get-datum . lU5331) (get-char . lU5330) (get-bytevector-some . lU532f) (get-bytevector-n! . lU532e) (get-bytevector-n . lU532d) (get-bytevector-all . lU532c) (flush-output-port . lU532b) (close-port . lU532a) (exit . lU5322) (command-line . lU4fe6) (remove . lU531d) (remv . lU531c) (remp . lU531b) (remq . lU531a) (partition . lU5319) (memv . lU5318) (memq . lU5317) (memp . lU5316) (member . lU5315) (exists . lU5314) (for-all . lU5313) (fold-right . lU5312) (fold-left . lU5311) (find . lU5310) (filter . lU530f) (cons* . lU530e) (assv . lU530d) (assq . lU530c) (assp . lU530b) (assoc . lU530a) (call-with-string-output-port . lU5309) (call-with-port . lU5308) (call-with-bytevector-output-port . lU5307) (bytevector->string . lU5306) (buffer-mode? . lU5305) (binary-port? . lU5304) (with-exception-handler . lU5303) (raise-continuable . lU5302) (raise . lU5301) (make-enumeration . lU5300) (enum-set=? . lU52ff) (enum-set-universe . lU52fe) (enum-set-union . lU52fd) (enum-set-subset? . lU52fc) (enum-set-projection . lU52fb) (enum-set-member? . lU52fa) (enum-set-intersection . lU52f9) (enum-set-indexer . lU52f8) (enum-set-difference . lU52f7) (enum-set-constructor . lU52f6) (enum-set-complement . lU52f5) (enum-set->list . lU52f4) (who-condition? . lU4d24) (warning? . lU4c9c) (violation? . lU4cdb) (undefined-violation? . lU4d9b) (syntax-violation? . lU4d82) (syntax-violation-subform . lU4d86) (syntax-violation-form . lU4d84) (syntax-violation . lU31ae) (simple-conditions . lU52f3) (serious-condition? . lU4cb1) (non-continuable-violation? . lU4d3b) (message-condition? . lU4c85) (make-who-condition . lU4d20) (make-warning . lU4c9a) (make-violation . lU4cd9) (make-undefined-violation . lU4d99) (make-syntax-violation . lU4d7c) (make-serious-condition . lU4caf) (make-non-continuable-violation . lU4d39) (make-message-condition . lU4c81) (make-lexical-violation . lU4d63) (make-irritants-condition . lU4d05) (make-implementation-restriction-violation . lU4d4e) (make-error . lU4cc4) (make-assertion-violation . lU4cee) (lexical-violation? . lU4d65) (irritants-condition? . lU4d09) (implementation-restriction-violation? . lU4d50) (error? . lU4cc6) (condition-who . lU4d26) (condition-predicate . lU52f2) (condition-message . lU4c87) (condition-irritants . lU4d0b) (condition-accessor . lU52f1) (condition . lU52f0) (assertion-violation? . lU4cf0) (condition? . lU52ef) (utf32->string . lU52ee) (utf16->string . lU52ed) (utf8->string . lU52ec) (uint-list->bytevector . lU52eb) (u8-list->bytevector . lU52ea) (string->utf8 . lU52e9) (string->utf32 . lU52e8) (string->utf16 . lU52e7) (sint-list->bytevector . lU52e6) (native-endianness . lU52e5) (bytevector? . lU52e4) (bytevector=? . lU52e3) (bytevector-uint-set! . lU52e2) (bytevector-uint-ref . lU52e1) (bytevector-u8-set! . lU52e0) (bytevector-u8-ref . lU52df) (bytevector-u64-set! . lU52de) (bytevector-u64-ref . lU52dd) (bytevector-u64-native-set! . lU52dc) (bytevector-u64-native-ref . lU52db) (bytevector-u32-set! . lU52da) (bytevector-u32-ref . lU52d9) (bytevector-u32-native-set! . lU52d8) (bytevector-u32-native-ref . lU52d7) (bytevector-u16-set! . lU52d6) (bytevector-u16-ref . lU52d5) (bytevector-u16-native-set! . lU52d4) (bytevector-u16-native-ref . lU52d3) (bytevector-sint-set! . lU52d2) (bytevector-sint-ref . lU52d1) (bytevector-s8-set! . lU52d0) (bytevector-s8-ref . lU52cf) (bytevector-s64-set! . lU52ce) (bytevector-s64-ref . lU52cd) (bytevector-s64-native-set! . lU52cc) (bytevector-s64-native-ref . lU52cb) (bytevector-s32-set! . lU52ca) (bytevector-s32-ref . lU52c9) (bytevector-s32-native-set! . lU52c8) (bytevector-s32-native-ref . lU52c7) (bytevector-s16-set! . lU52c6) (bytevector-s16-ref . lU52c5) (bytevector-s16-native-set! . lU52c4) (bytevector-s16-native-ref . lU52c3) (bytevector-length . lU52c2) (bytevector-ieee-single-ref . lU52c1) (bytevector-ieee-single-set! . lU52c0) (bytevector-ieee-single-native-set! . lU52bf) (bytevector-ieee-single-native-ref . lU52be) (bytevector-ieee-double-set! . lU52bd) (bytevector-ieee-double-ref . lU52bc) (bytevector-ieee-double-native-set! . lU52bb) (bytevector-ieee-double-native-ref . lU52ba) (bytevector-fill! . lU52b9) (bytevector-copy! . lU52b8) (bytevector-copy . lU52b7) (bytevector->uint-list . lU52b6) (bytevector->u8-list . lU52b5) (bytevector->sint-list . lU52b4) (no-nans-violation? . lU4ed9) (no-infinities-violation? . lU4ec4) (make-no-nans-violation . lU4ed7) (make-no-infinities-violation . lU4ec2) (real->flonum . lU52b3) (flzero? . lU52b2) (fltruncate . lU52b1) (fltan . lU52b0) (flsqrt . lU52af) (flsin . lU52ae) (flround . lU52ad) (flpositive? . lU52ac) (flonum? . lU52ab) (flodd? . lU52aa) (flnumerator . lU52a9) (flnegative? . lU52a8) (flnan? . lU52a7) (flmod0 . lU52a6) (flmod . lU52a5) (flmin . lU52a4) (flmax . lU52a3) (fllog . lU52a2) (flinteger? . lU52a1) (flinfinite? . lU52a0) (flfloor . lU529f) (flfinite? . lU529e) (flexpt . lU529d) (flexp . lU529c) (fleven? . lU529b) (fldiv0-and-mod0 . lU529a) (fldiv0 . lU5299) (fldiv-and-mod . lU5298) (fldiv . lU5297) (fldenominator . lU5296) (flcos . lU5295) (flceiling . lU5294) (flatan . lU5293) (flasin . lU5292) (flacos . lU5291) (flabs . lU5290) (fl>? . lU528f) (fl>=? . lU528e) (fl=? . lU528d) (fl<? . lU528c) (fl<=? . lU528b) (fl/ . lU528a) (fl- . lU5289) (fl+ . lU5288) (fl* . lU5287) (fixnum->flonum . lU5286) (fxzero? . lU5285) (fxxor . lU5284) (fxrotate-bit-field . lU5283) (fxreverse-bit-field . lU5282) (fxpositive? . lU5281) (fxodd? . lU5280) (fxnot . lU527f) (fxnegative? . lU527e) (fxmod0 . lU527d) (fxmod . lU527c) (fxmin . lU527b) (fxmax . lU527a) (fxlength . lU5279) (fxior . lU5278) (fxif . lU5277) (fxfirst-bit-set . lU5276) (fxeven? . lU5275) (fxdiv0-and-mod0 . lU5274) (fxdiv0 . lU5273) (fxdiv-and-mod . lU5272) (fxdiv . lU5271) (fxcopy-bit-field . lU5270) (fxcopy-bit . lU526f) (fxbit-set? . lU526e) (fxbit-field . lU526d) (fxbit-count . lU526c) (fxarithmetic-shift-right . lU526b) (fxarithmetic-shift-left . lU526a) (fxarithmetic-shift . lU5269) (fxand . lU5268) (fx>? . lU5267) (fx>=? . lU5266) (fx=? . lU5265) (fx<? . lU5264) (fx<=? . lU5263) (fx-/carry . lU5262) (fx- . lU5261) (fx+/carry . lU5260) (fx+ . lU525f) (fx*/carry . lU525e) (fx* . lU525d) (greatest-fixnum . lU525c) (least-fixnum . lU525b) (fixnum-width . lU525a) (fixnum? . lU5259) (bitwise-rotate-bit-field . lU5258) (bitwise-reverse-bit-field . lU5257) (bitwise-length . lU5256) (bitwise-if . lU5255) (bitwise-first-bit-set . lU5254) (bitwise-copy-bit-field . lU5253) (bitwise-copy-bit . lU5252) (bitwise-bit-set? . lU5251) (bitwise-bit-field . lU5250) (bitwise-bit-count . lU524f) (bitwise-xor . lU524e) (bitwise-ior . lU524d) (bitwise-and . lU524c) (bitwise-not . lU524b) (bitwise-arithmetic-shift-right . lU524a) (bitwise-arithmetic-shift-left . lU5249) (bitwise-arithmetic-shift . lU5248) (zero? . lU5247) (vector? . lU5246) (vector-set! . lU5245) (vector-ref . lU5244) (vector-map . lU5243) (vector-length . lU5242) (vector-for-each . lU5241) (vector-fill! . lU5240) (vector->list . lU523f) (vector . lU523e) (values . lU523d) (truncate . lU523c) (tan . lU523b) (symbol? . lU523a) (symbol=? . lU5239) (symbol->string . lU5238) (substring . lU5237) (string? . lU5236) (string>? . lU5235) (string>=? . lU5234) (string=? . lU5233) (string<? . lU5232) (string<=? . lU5231) (string-ref . lU5230) (string-length . lU522f) (string-for-each . lU522e) (string-copy . lU522d) (string-append . lU522c) (string->symbol . lU522b) (string->number . lU522a) (string->list . lU5229) (string . lU5228) (sqrt . lU5227) (sin . lU5226) (round . lU5225) (reverse . lU5224) (real? . lU5223) (real-valued? . lU5222) (real-part . lU5221) (rationalize . lU5220) (rational? . lU521f) (rational-valued? . lU521e) (procedure? . lU521d) (positive? . lU521c) (pair? . lU521b) (odd? . lU521a) (numerator . lU5219) (number? . lU5218) (number->string . lU5217) (null? . lU5216) (not . lU5215) (negative? . lU5214) (nan? . lU5213) (min . lU5212) (max . lU5211) (map . lU5210) (make-vector . lU520f) (make-string . lU520e) (make-rectangular . lU520d) (make-polar . lU520c) (magnitude . lU520b) (log . lU520a) (list? . lU5209) (list-tail . lU5208) (list-ref . lU5207) (list->vector . lU5206) (list->string . lU5205) (list . lU5204) (length . lU5203) (lcm . lU5202) (integer? . lU5201) (integer-valued? . lU5200) (integer->char . lU51ff) (infinite? . lU51fe) (inexact? . lU51fd) (inexact . lU51fc) (imag-part . lU51fb) (gcd . lU51fa) (for-each . lU51f9) (floor . lU51f8) (finite? . lU51f7) (expt . lU51f6) (exp . lU51f5) (exact? . lU51f4) (exact-integer-sqrt . lU51f3) (exact . lU51f2) (even? . lU51f1) (error . lU51f0) (eqv? . lU51ef) (equal? . lU51ee) (eq? . lU51ed) (dynamic-wind . lU51ec) (div0-and-mod0 . lU51eb) (mod0 . lU51ea) (div0 . lU51e9) (div-and-mod . lU51e8) (mod . lU51e7) (div . lU51e6) (denominator . lU51e5) (cos . lU51e4) (cons . lU51e3) (complex? . lU51e2) (char? . lU51e1) (char>? . lU51e0) (char>=? . lU51df) (char=? . lU51de) (char<? . lU51dd) (char<=? . lU51dc) (char->integer . lU51db) (ceiling . lU51da) (call-with-values . lU51d9) (call/cc . lU51d8) (call-with-current-continuation . lU51d7) (cddddr . lU51d6) (cdddar . lU51d5) (cddadr . lU51d4) (cddaar . lU51d3) (cdaddr . lU51d2) (cdadar . lU51d1) (cdaadr . lU51d0) (cdaaar . lU51cf) (cadddr . lU51ce) (caddar . lU51cd) (cadadr . lU51cc) (cadaar . lU51cb) (caaddr . lU51ca) (caadar . lU51c9) (caaadr . lU51c8) (caaaar . lU51c7) (cdddr . lU51c6) (cddar . lU51c5) (cdadr . lU51c4) (cdaar . lU51c3) (caddr . lU51c2) (cadar . lU51c1) (caadr . lU51c0) (caaar . lU51bf) (cddr . lU51be) (cdar . lU51bd) (cadr . lU51bc) (caar . lU51bb) (cdr . lU51ba) (car . lU51b9) (boolean? . lU51b8) (boolean=? . lU51b7) (atan . lU51b6) (assertion-violation . lU51b5) (asin . lU51b4) (apply . lU51b3) (append . lU51b2) (angle . lU51b1) (acos . lU51b0) (abs . lU51af) (/ . lU51ae) (* . lU51ad) (- . lU51ac) (+ . lU51ab) (>= . lU51aa) (> . lU51a9) (= . lU51a8) (<= . lU51a7) (< . lU51a6) (&no-nans . lU51a4) (&no-infinities . lU51a3) (&i/o-encoding . lU51a2) (&i/o-decoding . lU51a1) (&i/o-port . lU51a0) (&i/o-file-does-not-exist . lU519f) (&i/o-file-already-exists . lU519e) (&i/o-file-is-read-only . lU519d) (&i/o-file-protection . lU519c) (&i/o-filename . lU519b) (&i/o-invalid-position . lU519a) (&i/o-write . lU5199) (&i/o-read . lU5198) (&i/o . lU5197) (&undefined . lU5196) (&syntax . lU5195) (&lexical . lU5194) (&implementation-restriction . lU5193) (&non-continuable . lU5192) (&who . lU5191) (&irritants . lU5190) (&assertion . lU518f) (&violation . lU518e) (&error . lU518d) (&serious . lU518c) (&warning . lU518b) (&message . lU518a) (&condition . lU5189) (define-condition-type . lU5188) (define-enumeration . lU5187) (define-record-type . lU5186) (parent-rtd . lU5185) (nongenerative . lU5184) (opaque . lU5183) (sealed . lU5182) (protocol . lU5181) (parent . lU5180) (immutable . lU517f) (mutable . lU517e) (fields . lU517d) (error-handling-mode . lU517c) (file-options . lU517b) (buffer-mode . lU517a) (eol-style . lU5179) (guard . lU5178) (unsyntax-splicing . lU5175) (unsyntax . lU5174) (unquote-splicing . lU5173) (unquote . lU5172) (_ . lU5171) (else . lU5170) (=> . lU516f) (... . lU516e) (assert . lU516d) (endianness . lU516c) (do . lU5169) (cond . lU5168) (let* . lU5167) (let*-values . lU5166) (let-values . lU5165) (identifier-syntax . lU5164) (with-syntax . lU5163) (quasisyntax . lU5162) (quasiquote . lU5161) (syntax-rules . lU5160) (record-constructor-descriptor . lU515d) (record-type-descriptor . lU515c) (case . lU515b) (unless . lU5159) (when . lU5158) (or . lU5157) (and . lU5156) (if . lU5155) (let . lU5154) (letrec* . lU5153) (letrec . lU5152) (case-lambda . lU5150) (lambda . lU514f) (syntax . lU514e) (syntax-case . lU514d) (quote . lU514c) (letrec-syntax . lU514a) (let-syntax . lU5149) (set! . lU5148) (begin . lU5146) (define-syntax . lU5144) (define . lU5143)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU5479 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . lU318a) (quotient . lU5329) (null-environment . lU3188) (remainder . lU5328) (modulo . lU5327) (inexact->exact . lU5326) (force . lU5325) (exact->inexact . lU5324) (make-promise . lU5323) (delay . lU516b)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU547a '(rnrs control) '(6) '() '() '() '((do . lU5169) (unless . lU5159) (when . lU5158) (case-lambda . lU5150)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU547b '(rnrs eval) '(6) '() '() '() '((eval . lU318e) (environment . lU3186)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU547c '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . lU531f) (set-car! . lU531e)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU547d '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . lU5321) (string-set! . lU5320)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU547e '(rnrs programs) '(6) '() '() '() '((exit . lU5322) (command-line . lU4fe6)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU547f '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . lU2ef9) (identifier? . lU31b0) (generate-temporaries . lU319c) (free-identifier=? . lU319e) (syntax->datum . lU31b4) (datum->syntax . lU31b2) (bound-identifier=? . lU31a0) (syntax-violation . lU31ae) (unsyntax-splicing . lU5175) (unsyntax . lU5174) (_ . lU5171) (... . lU516e) (with-syntax . lU5163) (quasisyntax . lU5162) (syntax . lU514e) (syntax-case . lU514d)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU5480 '(rnrs files) '(6) '() '() '() '((delete-file . lU5392) (file-exists? . lU5391) (make-i/o-write-error . lU4dd8) (make-i/o-read-error . lU4dc3) (make-i/o-port-error . lU4e79) (make-i/o-invalid-position-error . lU4def) (make-i/o-filename-error . lU4e0a) (make-i/o-file-protection-error . lU4e23) (make-i/o-file-is-read-only-error . lU4e38) (make-i/o-file-does-not-exist-error . lU4e62) (make-i/o-file-already-exists-error . lU4e4d) (make-i/o-error . lU4dae) (i/o-write-error? . lU4dda) (i/o-read-error? . lU4dc5) (i/o-port-error? . lU4e7d) (i/o-invalid-position-error? . lU4df3) (i/o-filename-error? . lU4e0e) (i/o-file-protection-error? . lU4e25) (i/o-file-is-read-only-error? . lU4e3a) (i/o-file-does-not-exist-error? . lU4e64) (i/o-file-already-exists-error? . lU4e4f) (i/o-error? . lU4db0) (i/o-error-position . lU4df5) (i/o-error-port . lU4e7f) (i/o-error-filename . lU4e10) (&i/o-port . lU51a0) (&i/o-file-does-not-exist . lU519f) (&i/o-file-already-exists . lU519e) (&i/o-file-is-read-only . lU519d) (&i/o-file-protection . lU519c) (&i/o-filename . lU519b) (&i/o-invalid-position . lU519a) (&i/o-write . lU5199) (&i/o-read . lU5198) (&i/o . lU5197)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU5481 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . lU5390) (vector-sort . lU538f) (list-sort . lU538e)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU5482 '(rnrs base) '(6) '() '() '() '((zero? . lU5247) (vector? . lU5246) (vector-set! . lU5245) (vector-ref . lU5244) (vector-map . lU5243) (vector-length . lU5242) (vector-for-each . lU5241) (vector-fill! . lU5240) (vector->list . lU523f) (vector . lU523e) (values . lU523d) (truncate . lU523c) (tan . lU523b) (symbol? . lU523a) (symbol=? . lU5239) (symbol->string . lU5238) (substring . lU5237) (string? . lU5236) (string>? . lU5235) (string>=? . lU5234) (string=? . lU5233) (string<? . lU5232) (string<=? . lU5231) (string-ref . lU5230) (string-length . lU522f) (string-for-each . lU522e) (string-copy . lU522d) (string-append . lU522c) (string->symbol . lU522b) (string->number . lU522a) (string->list . lU5229) (string . lU5228) (sqrt . lU5227) (sin . lU5226) (round . lU5225) (reverse . lU5224) (real? . lU5223) (real-valued? . lU5222) (real-part . lU5221) (rationalize . lU5220) (rational? . lU521f) (rational-valued? . lU521e) (procedure? . lU521d) (positive? . lU521c) (pair? . lU521b) (odd? . lU521a) (numerator . lU5219) (number? . lU5218) (number->string . lU5217) (null? . lU5216) (not . lU5215) (negative? . lU5214) (nan? . lU5213) (min . lU5212) (max . lU5211) (map . lU5210) (make-vector . lU520f) (make-string . lU520e) (make-rectangular . lU520d) (make-polar . lU520c) (magnitude . lU520b) (log . lU520a) (list? . lU5209) (list-tail . lU5208) (list-ref . lU5207) (list->vector . lU5206) (list->string . lU5205) (list . lU5204) (length . lU5203) (lcm . lU5202) (integer? . lU5201) (integer-valued? . lU5200) (integer->char . lU51ff) (infinite? . lU51fe) (inexact? . lU51fd) (inexact . lU51fc) (imag-part . lU51fb) (gcd . lU51fa) (for-each . lU51f9) (floor . lU51f8) (finite? . lU51f7) (expt . lU51f6) (exp . lU51f5) (exact? . lU51f4) (exact-integer-sqrt . lU51f3) (exact . lU51f2) (even? . lU51f1) (error . lU51f0) (eqv? . lU51ef) (equal? . lU51ee) (eq? . lU51ed) (dynamic-wind . lU51ec) (div0-and-mod0 . lU51eb) (mod0 . lU51ea) (div0 . lU51e9) (div-and-mod . lU51e8) (mod . lU51e7) (div . lU51e6) (denominator . lU51e5) (cos . lU51e4) (cons . lU51e3) (complex? . lU51e2) (char? . lU51e1) (char>? . lU51e0) (char>=? . lU51df) (char=? . lU51de) (char<? . lU51dd) (char<=? . lU51dc) (char->integer . lU51db) (ceiling . lU51da) (call-with-values . lU51d9) (call/cc . lU51d8) (call-with-current-continuation . lU51d7) (cddddr . lU51d6) (cdddar . lU51d5) (cddadr . lU51d4) (cddaar . lU51d3) (cdaddr . lU51d2) (cdadar . lU51d1) (cdaadr . lU51d0) (cdaaar . lU51cf) (cadddr . lU51ce) (caddar . lU51cd) (cadadr . lU51cc) (cadaar . lU51cb) (caaddr . lU51ca) (caadar . lU51c9) (caaadr . lU51c8) (caaaar . lU51c7) (cdddr . lU51c6) (cddar . lU51c5) (cdadr . lU51c4) (cdaar . lU51c3) (caddr . lU51c2) (cadar . lU51c1) (caadr . lU51c0) (caaar . lU51bf) (cddr . lU51be) (cdar . lU51bd) (cadr . lU51bc) (caar . lU51bb) (cdr . lU51ba) (car . lU51b9) (boolean? . lU51b8) (boolean=? . lU51b7) (atan . lU51b6) (assertion-violation . lU51b5) (asin . lU51b4) (apply . lU51b3) (append . lU51b2) (angle . lU51b1) (acos . lU51b0) (abs . lU51af) (/ . lU51ae) (* . lU51ad) (- . lU51ac) (+ . lU51ab) (>= . lU51aa) (> . lU51a9) (= . lU51a8) (<= . lU51a7) (< . lU51a6) (unquote-splicing . lU5173) (unquote . lU5172) (_ . lU5171) (else . lU5170) (=> . lU516f) (... . lU516e) (assert . lU516d) (cond . lU5168) (let* . lU5167) (let*-values . lU5166) (let-values . lU5165) (identifier-syntax . lU5164) (quasiquote . lU5161) (syntax-rules . lU5160) (case . lU515b) (or . lU5157) (and . lU5156) (if . lU5155) (let . lU5154) (letrec* . lU5153) (letrec . lU5152) (lambda . lU514f) (quote . lU514c) (letrec-syntax . lU514a) (let-syntax . lU5149) (set! . lU5148) (begin . lU5146) (define-syntax . lU5144) (define . lU5143)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU5483 '(rnrs lists) '(6) '() '() '() '((remove . lU531d) (remv . lU531c) (remp . lU531b) (remq . lU531a) (partition . lU5319) (memv . lU5318) (memq . lU5317) (memp . lU5316) (member . lU5315) (exists . lU5314) (for-all . lU5313) (fold-right . lU5312) (fold-left . lU5311) (find . lU5310) (filter . lU530f) (cons* . lU530e) (assv . lU530d) (assq . lU530c) (assp . lU530b) (assoc . lU530a)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU5484 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . lU5378) (call-with-input-file . lU5377) (write-char . lU5376) (write . lU5375) (with-output-to-file . lU5374) (with-input-from-file . lU5373) (read-char . lU5372) (read . lU5371) (peek-char . lU5370) (open-output-file . lU536f) (open-input-file . lU536e) (newline . lU536d) (display . lU536c) (close-output-port . lU536b) (close-input-port . lU536a) (eof-object? . lU5369) (eof-object . lU5368) (current-error-port . lU5367) (current-output-port . lU5366) (current-input-port . lU5365) (output-port? . lU5364) (input-port? . lU5363) (make-i/o-write-error . lU4dd8) (make-i/o-read-error . lU4dc3) (make-i/o-port-error . lU4e79) (make-i/o-invalid-position-error . lU4def) (make-i/o-filename-error . lU4e0a) (make-i/o-file-protection-error . lU4e23) (make-i/o-file-is-read-only-error . lU4e38) (make-i/o-file-does-not-exist-error . lU4e62) (make-i/o-file-already-exists-error . lU4e4d) (make-i/o-error . lU4dae) (i/o-write-error? . lU4dda) (i/o-read-error? . lU4dc5) (i/o-port-error? . lU4e7d) (i/o-invalid-position-error? . lU4df3) (i/o-filename-error? . lU4e0e) (i/o-file-protection-error? . lU4e25) (i/o-file-is-read-only-error? . lU4e3a) (i/o-file-does-not-exist-error? . lU4e64) (i/o-file-already-exists-error? . lU4e4f) (i/o-error? . lU4db0) (i/o-error-position . lU4df5) (i/o-error-port . lU4e7f) (i/o-error-filename . lU4e10) (&i/o-port . lU51a0) (&i/o-file-does-not-exist . lU519f) (&i/o-file-already-exists . lU519e) (&i/o-file-is-read-only . lU519d) (&i/o-file-protection . lU519c) (&i/o-filename . lU519b) (&i/o-invalid-position . lU519a) (&i/o-write . lU5199) (&i/o-read . lU5198) (&i/o . lU5197)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU5485 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . lU5339) (utf32->string . lU52ee) (utf16->string . lU52ed) (utf8->string . lU52ec) (uint-list->bytevector . lU52eb) (u8-list->bytevector . lU52ea) (string->utf8 . lU52e9) (string->utf32 . lU52e8) (string->utf16 . lU52e7) (sint-list->bytevector . lU52e6) (native-endianness . lU52e5) (bytevector? . lU52e4) (bytevector=? . lU52e3) (bytevector-uint-set! . lU52e2) (bytevector-uint-ref . lU52e1) (bytevector-u8-set! . lU52e0) (bytevector-u8-ref . lU52df) (bytevector-u64-set! . lU52de) (bytevector-u64-ref . lU52dd) (bytevector-u64-native-set! . lU52dc) (bytevector-u64-native-ref . lU52db) (bytevector-u32-set! . lU52da) (bytevector-u32-ref . lU52d9) (bytevector-u32-native-set! . lU52d8) (bytevector-u32-native-ref . lU52d7) (bytevector-u16-set! . lU52d6) (bytevector-u16-ref . lU52d5) (bytevector-u16-native-set! . lU52d4) (bytevector-u16-native-ref . lU52d3) (bytevector-sint-set! . lU52d2) (bytevector-sint-ref . lU52d1) (bytevector-s8-set! . lU52d0) (bytevector-s8-ref . lU52cf) (bytevector-s64-set! . lU52ce) (bytevector-s64-ref . lU52cd) (bytevector-s64-native-set! . lU52cc) (bytevector-s64-native-ref . lU52cb) (bytevector-s32-set! . lU52ca) (bytevector-s32-ref . lU52c9) (bytevector-s32-native-set! . lU52c8) (bytevector-s32-native-ref . lU52c7) (bytevector-s16-set! . lU52c6) (bytevector-s16-ref . lU52c5) (bytevector-s16-native-set! . lU52c4) (bytevector-s16-native-ref . lU52c3) (bytevector-length . lU52c2) (bytevector-ieee-single-ref . lU52c1) (bytevector-ieee-single-set! . lU52c0) (bytevector-ieee-single-native-set! . lU52bf) (bytevector-ieee-single-native-ref . lU52be) (bytevector-ieee-double-set! . lU52bd) (bytevector-ieee-double-ref . lU52bc) (bytevector-ieee-double-native-set! . lU52bb) (bytevector-ieee-double-native-ref . lU52ba) (bytevector-fill! . lU52b9) (bytevector-copy! . lU52b8) (bytevector-copy . lU52b7) (bytevector->uint-list . lU52b6) (bytevector->u8-list . lU52b5) (bytevector->sint-list . lU52b4) (endianness . lU516c)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU5486 '(rnrs unicode) '(6) '() '() '() '((string-upcase . lU53c0) (string-titlecase . lU53bf) (string-normalize-nfkd . lU53be) (string-normalize-nfkc . lU53bd) (string-normalize-nfd . lU53bc) (string-normalize-nfc . lU53bb) (string-foldcase . lU53ba) (string-downcase . lU53b9) (string-ci>? . lU53b8) (string-ci>=? . lU53b7) (string-ci=? . lU53b6) (string-ci<? . lU53b5) (string-ci<=? . lU53b4) (char-whitespace? . lU53b3) (char-upper-case? . lU53b2) (char-title-case? . lU53b1) (char-numeric? . lU53b0) (char-lower-case? . lU53af) (char-general-category . lU53ae) (char-upcase . lU53ad) (char-titlecase . lU53ac) (char-foldcase . lU53ab) (char-downcase . lU53aa) (char-ci>? . lU53a9) (char-ci>=? . lU53a8) (char-ci=? . lU53a7) (char-ci<? . lU53a6) (char-ci<=? . lU53a5) (char-alphabetic? . lU53a4)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU5487 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . lU5303) (raise-continuable . lU5302) (raise . lU5301) (guard . lU5178) (else . lU5170) (=> . lU516f)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU5488 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . lU5258) (bitwise-reverse-bit-field . lU5257) (bitwise-length . lU5256) (bitwise-if . lU5255) (bitwise-first-bit-set . lU5254) (bitwise-copy-bit-field . lU5253) (bitwise-copy-bit . lU5252) (bitwise-bit-set? . lU5251) (bitwise-bit-field . lU5250) (bitwise-bit-count . lU524f) (bitwise-xor . lU524e) (bitwise-ior . lU524d) (bitwise-and . lU524c) (bitwise-not . lU524b) (bitwise-arithmetic-shift-right . lU524a) (bitwise-arithmetic-shift-left . lU5249) (bitwise-arithmetic-shift . lU5248)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU5489 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . lU5285) (fxxor . lU5284) (fxrotate-bit-field . lU5283) (fxreverse-bit-field . lU5282) (fxpositive? . lU5281) (fxodd? . lU5280) (fxnot . lU527f) (fxnegative? . lU527e) (fxmod0 . lU527d) (fxmod . lU527c) (fxmin . lU527b) (fxmax . lU527a) (fxlength . lU5279) (fxior . lU5278) (fxif . lU5277) (fxfirst-bit-set . lU5276) (fxeven? . lU5275) (fxdiv0-and-mod0 . lU5274) (fxdiv0 . lU5273) (fxdiv-and-mod . lU5272) (fxdiv . lU5271) (fxcopy-bit-field . lU5270) (fxcopy-bit . lU526f) (fxbit-set? . lU526e) (fxbit-field . lU526d) (fxbit-count . lU526c) (fxarithmetic-shift-right . lU526b) (fxarithmetic-shift-left . lU526a) (fxarithmetic-shift . lU5269) (fxand . lU5268) (fx>? . lU5267) (fx>=? . lU5266) (fx=? . lU5265) (fx<? . lU5264) (fx<=? . lU5263) (fx-/carry . lU5262) (fx- . lU5261) (fx+/carry . lU5260) (fx+ . lU525f) (fx*/carry . lU525e) (fx* . lU525d) (greatest-fixnum . lU525c) (least-fixnum . lU525b) (fixnum-width . lU525a) (fixnum? . lU5259)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU548a '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . lU4ed9) (no-infinities-violation? . lU4ec4) (make-no-nans-violation . lU4ed7) (make-no-infinities-violation . lU4ec2) (real->flonum . lU52b3) (flzero? . lU52b2) (fltruncate . lU52b1) (fltan . lU52b0) (flsqrt . lU52af) (flsin . lU52ae) (flround . lU52ad) (flpositive? . lU52ac) (flonum? . lU52ab) (flodd? . lU52aa) (flnumerator . lU52a9) (flnegative? . lU52a8) (flnan? . lU52a7) (flmod0 . lU52a6) (flmod . lU52a5) (flmin . lU52a4) (flmax . lU52a3) (fllog . lU52a2) (flinteger? . lU52a1) (flinfinite? . lU52a0) (flfloor . lU529f) (flfinite? . lU529e) (flexpt . lU529d) (flexp . lU529c) (fleven? . lU529b) (fldiv0-and-mod0 . lU529a) (fldiv0 . lU5299) (fldiv-and-mod . lU5298) (fldiv . lU5297) (fldenominator . lU5296) (flcos . lU5295) (flceiling . lU5294) (flatan . lU5293) (flasin . lU5292) (flacos . lU5291) (flabs . lU5290) (fl>? . lU528f) (fl>=? . lU528e) (fl=? . lU528d) (fl<? . lU528c) (fl<=? . lU528b) (fl/ . lU528a) (fl- . lU5289) (fl+ . lU5288) (fl* . lU5287) (fixnum->flonum . lU5286) (&no-nans . lU51a4) (&no-infinities . lU51a3)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU548b '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . lU538d) (string-ci-hash . lU538c) (string-hash . lU538b) (equal-hash . lU538a) (hashtable-equivalence-function . lU5389) (make-hashtable . lU5388) (hashtable-hash-function . lU5387) (make-eqv-hashtable . lU5386) (make-eq-hashtable . lU5385) (hashtable? . lU5384) (hashtable-update! . lU5383) (hashtable-size . lU5382) (hashtable-set! . lU5381) (hashtable-ref . lU5380) (hashtable-mutable? . lU537f) (hashtable-keys . lU537e) (hashtable-entries . lU537d) (hashtable-delete! . lU537c) (hashtable-copy . lU537b) (hashtable-contains? . lU537a) (hashtable-clear! . lU5379)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU548c '(rnrs io ports) '(6) '() '() '() '((eof-object? . lU5369) (eof-object . lU5368) (current-error-port . lU5367) (current-output-port . lU5366) (current-input-port . lU5365) (output-port? . lU5364) (input-port? . lU5363) (utf-8-codec . lU5362) (utf-16-codec . lU5361) (transcoder-error-handling-mode . lU5360) (transcoder-eol-style . lU535f) (transcoder-codec . lU535e) (transcoded-port . lU535d) (textual-port? . lU535c) (string->bytevector . lU535b) (standard-output-port . lU535a) (standard-input-port . lU5359) (standard-error-port . lU5358) (set-port-position! . lU5357) (put-u8 . lU5356) (put-string . lU5355) (put-datum . lU5354) (put-char . lU5353) (put-bytevector . lU5352) (port? . lU5351) (port-transcoder . lU5350) (port-position . lU534f) (port-has-set-port-position!? . lU534e) (port-has-port-position? . lU534d) (port-eof? . lU534c) (output-port-buffer-mode . lU534b) (open-string-output-port . lU534a) (open-string-input-port . lU5349) (open-file-output-port . lU5348) (open-file-input/output-port . lU5347) (open-file-input-port . lU5346) (open-bytevector-output-port . lU5345) (open-bytevector-input-port . lU5344) (native-transcoder . lU5343) (native-eol-style . lU5342) (make-transcoder . lU5341) (latin-1-codec . lU5340) (make-i/o-write-error . lU4dd8) (make-i/o-read-error . lU4dc3) (make-i/o-port-error . lU4e79) (make-i/o-invalid-position-error . lU4def) (make-i/o-filename-error . lU4e0a) (make-i/o-file-protection-error . lU4e23) (make-i/o-file-is-read-only-error . lU4e38) (make-i/o-file-does-not-exist-error . lU4e62) (make-i/o-file-already-exists-error . lU4e4d) (make-i/o-error . lU4dae) (make-i/o-encoding-error . lU4ea9) (make-i/o-decoding-error . lU4e92) (make-custom-textual-output-port . lU533f) (make-custom-textual-input/output-port . lU533e) (make-custom-textual-input-port . lU533d) (make-custom-binary-output-port . lU533c) (make-custom-binary-input/output-port . lU533b) (make-custom-binary-input-port . lU533a) (lookahead-u8 . lU5338) (lookahead-char . lU5337) (i/o-write-error? . lU4dda) (i/o-read-error? . lU4dc5) (i/o-port-error? . lU4e7d) (i/o-invalid-position-error? . lU4df3) (i/o-filename-error? . lU4e0e) (i/o-file-protection-error? . lU4e25) (i/o-file-is-read-only-error? . lU4e3a) (i/o-file-does-not-exist-error? . lU4e64) (i/o-file-already-exists-error? . lU4e4f) (i/o-error? . lU4db0) (i/o-error-position . lU4df5) (i/o-error-port . lU4e7f) (i/o-error-filename . lU4e10) (i/o-encoding-error? . lU4ead) (i/o-encoding-error-char . lU4eaf) (i/o-decoding-error? . lU4e94) (get-u8 . lU5336) (get-string-n! . lU5335) (get-string-n . lU5334) (get-string-all . lU5333) (get-line . lU5332) (get-datum . lU5331) (get-char . lU5330) (get-bytevector-some . lU532f) (get-bytevector-n! . lU532e) (get-bytevector-n . lU532d) (get-bytevector-all . lU532c) (flush-output-port . lU532b) (close-port . lU532a) (call-with-string-output-port . lU5309) (call-with-port . lU5308) (call-with-bytevector-output-port . lU5307) (bytevector->string . lU5306) (buffer-mode? . lU5305) (binary-port? . lU5304) (&i/o-encoding . lU51a2) (&i/o-decoding . lU51a1) (&i/o-port . lU51a0) (&i/o-file-does-not-exist . lU519f) (&i/o-file-already-exists . lU519e) (&i/o-file-is-read-only . lU519d) (&i/o-file-protection . lU519c) (&i/o-filename . lU519b) (&i/o-invalid-position . lU519a) (&i/o-write . lU5199) (&i/o-read . lU5198) (&i/o . lU5197) (error-handling-mode . lU517c) (file-options . lU517b) (buffer-mode . lU517a) (eol-style . lU5179)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU548d '(rnrs enums) '(6) '() '() '() '((make-enumeration . lU5300) (enum-set=? . lU52ff) (enum-set-universe . lU52fe) (enum-set-union . lU52fd) (enum-set-subset? . lU52fc) (enum-set-projection . lU52fb) (enum-set-member? . lU52fa) (enum-set-intersection . lU52f9) (enum-set-indexer . lU52f8) (enum-set-difference . lU52f7) (enum-set-constructor . lU52f6) (enum-set-complement . lU52f5) (enum-set->list . lU52f4) (define-enumeration . lU5187)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU548e '(rnrs conditions) '(6) '() '() '() '((who-condition? . lU4d24) (warning? . lU4c9c) (violation? . lU4cdb) (undefined-violation? . lU4d9b) (syntax-violation? . lU4d82) (syntax-violation-subform . lU4d86) (syntax-violation-form . lU4d84) (syntax-violation . lU31ae) (simple-conditions . lU52f3) (serious-condition? . lU4cb1) (non-continuable-violation? . lU4d3b) (message-condition? . lU4c85) (make-who-condition . lU4d20) (make-warning . lU4c9a) (make-violation . lU4cd9) (make-undefined-violation . lU4d99) (make-syntax-violation . lU4d7c) (make-serious-condition . lU4caf) (make-non-continuable-violation . lU4d39) (make-message-condition . lU4c81) (make-lexical-violation . lU4d63) (make-irritants-condition . lU4d05) (make-implementation-restriction-violation . lU4d4e) (make-error . lU4cc4) (make-assertion-violation . lU4cee) (lexical-violation? . lU4d65) (irritants-condition? . lU4d09) (implementation-restriction-violation? . lU4d50) (error? . lU4cc6) (condition-who . lU4d26) (condition-predicate . lU52f2) (condition-message . lU4c87) (condition-irritants . lU4d0b) (condition-accessor . lU52f1) (condition . lU52f0) (assertion-violation? . lU4cf0) (condition? . lU52ef) (&undefined . lU5196) (&syntax . lU5195) (&lexical . lU5194) (&implementation-restriction . lU5193) (&non-continuable . lU5192) (&who . lU5191) (&irritants . lU5190) (&assertion . lU518f) (&violation . lU518e) (&error . lU518d) (&serious . lU518c) (&warning . lU518b) (&message . lU518a) (&condition . lU5189) (define-condition-type . lU5188)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU548f '(rnrs records inspection) '(6) '() '() '() '((record? . lU539c) (record-type-uid . lU539b) (record-type-sealed? . lU539a) (record-type-parent . lU5399) (record-type-opaque? . lU5398) (record-type-name . lU5397) (record-type-generative? . lU5396) (record-type-field-names . lU5395) (record-rtd . lU5394) (record-field-mutable? . lU5393)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU5490 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . lU53a3) (record-predicate . lU53a2) (record-mutator . lU53a1) (record-constructor . lU53a0) (record-accessor . lU539f) (make-record-type-descriptor . lU539e) (make-record-constructor-descriptor . lU539d)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU5491 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . lU5186) (parent-rtd . lU5185) (nongenerative . lU5184) (opaque . lU5183) (sealed . lU5182) (protocol . lU5181) (parent . lU5180) (immutable . lU517f) (mutable . lU517e) (fields . lU517d) (record-constructor-descriptor . lU515d) (record-type-descriptor . lU515c)) '() values values '#f '#f '#t '#f) (lU2cdc@lU2b28@install-library 'lU5492 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . lU4edd) (&no-nans-rtd . lU4edb) (&no-infinities-rcd . lU4ec8) (&no-infinities-rtd . lU4ec6) (&i/o-encoding-rcd . lU4eb3) (&i/o-encoding-rtd . lU4eb1) (&i/o-decoding-rcd . lU4e98) (&i/o-decoding-rtd . lU4e96) (&i/o-port-rcd . lU4e83) (&i/o-port-rtd . lU4e81) (&i/o-file-does-not-exist-rcd . lU4e68) (&i/o-file-does-not-exist-rtd . lU4e66) (&i/o-file-already-exists-rcd . lU4e53) (&i/o-file-already-exists-rtd . lU4e51) (&i/o-file-is-read-only-rcd . lU4e3e) (&i/o-file-is-read-only-rtd . lU4e3c) (&i/o-file-protection-rcd . lU4e29) (&i/o-file-protection-rtd . lU4e27) (&i/o-filename-rcd . lU4e14) (&i/o-filename-rtd . lU4e12) (&i/o-invalid-position-rcd . lU4df9) (&i/o-invalid-position-rtd . lU4df7) (&i/o-write-rcd . lU4dde) (&i/o-write-rtd . lU4ddc) (&i/o-read-rcd . lU4dc9) (&i/o-read-rtd . lU4dc7) (&i/o-rcd . lU4db4) (&i/o-rtd . lU4db2) (&undefined-rcd . lU4d9f) (&undefined-rtd . lU4d9d) (&syntax-rcd . lU4d8a) (&syntax-rtd . lU4d88) (&lexical-rcd . lU4d69) (&lexical-rtd . lU4d67) (&implementation-restriction-rcd . lU4d54) (&implementation-restriction-rtd . lU4d52) (&non-continuable-rcd . lU4d3f) (&non-continuable-rtd . lU4d3d) (&who-rcd . lU4d2a) (&who-rtd . lU4d28) (&irritants-rcd . lU4d0f) (&irritants-rtd . lU4d0d) (&assertion-rcd . lU4cf4) (&assertion-rtd . lU4cf2) (&violation-rcd . lU4cdf) (&violation-rtd . lU4cdd) (&error-rcd . lU4cca) (&error-rtd . lU4cc8) (&serious-rcd . lU4cb5) (&serious-rtd . lU4cb3) (&warning-rcd . lU4ca0) (&warning-rtd . lU4c9e) (&message-rcd . lU4c8b) (&message-rtd . lU4c89) (&condition-rcd . lU4c2c) (&condition-rtd . lU4c2a) (syntax-error . lU31aa) (syntax-dispatch . lU30ce) (pretty-print . lU5472) (eval-core . lU5471) (set-symbol-value! . lU5470) (symbol-value . lU546f) (gensym . lU546e) (void . lU546d) (load . lU4fec) (interaction-environment . lU31bc) (char-ready? . lU546c) (regexp? . lU546b) (read-line . lU546a) (gensym-prefix-set! . lU5469) (ungensym . lU5468) (alist->eq-hash-table . lU5467) (assoc-ref . lU5466) (print . lU5465) (format . lU5464) (host-os . lU5463) (library-path . lU2b07) (standard-library-path . lU5462) (file-newer? . lU5461) (stat-mtime . lU5460) (write-to-file . lU545f) (file->sexp-list . lU545e) (file->list . lU545d) (file->string . lU545c) (digit->integer . lU545b) (call-with-string-input-port . lU545a) (call-with-string-io . lU5459) (string-split . lU5458) (bytevector-for-each . lU5457) (string->regexp . lU5456) (rxmatch . lU5455) (regexp-replace-all . lU5454) (hashtable-for-each . lU5453) (mosh-cache-dir . lU28f1) (call-process . lU5452) (local-tz-offset . lU5451) (microseconds . lU5450) (directory-list . lU544f) (set-current-directory! . lU544e) (expand-path . lU544d) (current-directory . lU544c) (%spawn . lU544b) (%waitpid . lU544a) (simple-struct-name . lU5449) (simple-struct-set! . lU5448) (simple-struct-ref . lU5447) (make-simple-struct . lU5446) (simple-struct? . lU5445) (pointer-ref-c-int64 . lU5444) (pointer-ref-c-int32 . lU5443) (pointer-ref-c-int16 . lU5442) (pointer-ref-c-int8 . lU5441) (pointer-ref-c-uint64 . lU5440) (pointer-ref-c-uint32 . lU543f) (pointer-ref-c-uint16 . lU543e) (pointer-ref-c-uint8 . lU543d) (pointer-set-c-uint64! . lU543c) (pointer-set-c-uint32! . lU543b) (pointer-set-c-uint16! . lU543a) (pointer-set-c-uint8! . lU5439) (pointer-set-c-int64! . lU5438) (pointer-set-c-int32! . lU5437) (pointer-set-c-int16! . lU5436) (pointer-set-c-int8! . lU5435) (pointer-set-c-pointer! . lU5434) (pointer-set-c-double! . lU5433) (pointer-set-c-float! . lU5432) (pointer-set-c-long-long! . lU5431) (pointer-set-c-long! . lU5430) (pointer-set-c-int! . lU542f) (pointer-set-c-short! . lU542e) (pointer-set-c-char! . lU542d) (pointer-ref-c-pointer . lU542c) (pointer-ref-c-double . lU542b) (pointer-ref-c-float . lU542a) (pointer-ref-c-unsigned-long-long . lU5429) (pointer-ref-c-signed-long-long . lU5428) (pointer-ref-c-unsigned-long . lU5427) (pointer-ref-c-signed-long . lU5426) (pointer-ref-c-unsigned-int . lU5425) (pointer-ref-c-signed-int . lU5424) (pointer-ref-c-unsigned-short . lU5423) (pointer-ref-c-signed-short . lU5422) (pointer-ref-c-unsigned-char . lU5421) (pointer-ref-c-signed-char . lU5420) (pointer->integer . lU541f) (integer->pointer . lU541e) (pointer? . lU541d) (shared-errno . lU541c) (get-c-address . lU541b) (obj->integer . lU541a) (u8-list->c-procedure . lU5419) (%ffi-free-c-callback-trampoline . lU5418) (%ffi-make-c-callback-trampoline . lU5417) (%ffi-free . lU5416) (%ffi-malloc . lU5415) (%ffi-supported? . lU5414) (%ffi-pointer->string . lU5413) (%ffi-call . lU5412) (%ffi-lookup . lU5411) (%ffi-open . lU5410) (null-terminated-utf8->string . lU540f) (null-terminated-bytevector->string . lU540e) (%fork . lU540d) (%pipe . lU540c) (p . lU540b) (open-output-string . lU540a) (get-output-string . lU5409) (file-stat-ctime . lU5408) (file-stat-atime . lU5407) (file-stat-mtime . lU5406) (file-size-in-bytes . lU5405) (file-writable? . lU5404) (file-executable? . lU5403) (file-readable? . lU5402) (file-regular? . lU5401) (file-symbolic-link? . lU5400) (file-directory? . lU53ff) (create-symbolic-link . lU53fe) (rename-file . lU53fd) (delete-directory . lU53fc) (create-directory . lU53fb) (create-mosh-cache-dir . lU53fa) (get-environment-variables . lU53f9) (current-exception-handler . lU53f8) (get-environment-variable . lU53f7) (join-wraps . lU53f6) (id->real-label . lU53f5) (same-marks? . lU53f4) (same-marks*? . lU53f3) (get-timeofday . lU53f2) (get-command-line . lU53f1) (sys-display . lU53f0) (whereis . lU53ef) (register . lU53ee) (vm-join! . lU53ed) (vm-set-value! . lU53ec) (vm? . lU53eb) (main-vm? . lU53ea) (vm-eval . lU53e9) (vm-self . lU53e8) (vm-start! . lU53e7) (make-vm . lU53e6) (mutex-try-lock! . lU53e5) (mutex-unlock! . lU53e4) (mutex-lock! . lU53e3) (mutex? . lU53e2) (make-mutex . lU53e1) (condition-variable-notify-all! . lU53e0) (condition-variable-notify! . lU53df) (condition-variable-wait! . lU53de) (make-condition-variable . lU53dd) (mosh-executable-path . lU53dc) (make-file-options . lU53db) (for-each-with-index . lU53da) (source-info . lU53d9) (instruction? . lU53d8) (instruction->integer . lU53d7) (instruction->symbol . lU53d6) (closure->list . lU53d5) (make-compiler-instruction . lU53d4) (make-instruction . lU53d3) (set-source-info! . lU53d2) (bignum? . lU53d1) (fast-equal? . lU53d0) (fasl-read . lU53cf) (fasl-write . lU53ce) (time-usage . lU53cd) (os-constant . lU53cc) (disasm . lU53cb) (make-parameter . lU28ef) (socket-port . lU53ca) (socket-shutdown . lU53c9) (socket-close . lU53c8) (socket-send . lU53c7) (socket-recv! . lU53c6) (socket-recv . lU53c5) (make-server-socket . lU53c4) (make-client-socket . lU53c3) (socket-accept . lU53c2) (socket? . lU53c1) (string-upcase . lU53c0) (string-titlecase . lU53bf) (string-normalize-nfkd . lU53be) (string-normalize-nfkc . lU53bd) (string-normalize-nfd . lU53bc) (string-normalize-nfc . lU53bb) (string-foldcase . lU53ba) (string-downcase . lU53b9) (string-ci>? . lU53b8) (string-ci>=? . lU53b7) (string-ci=? . lU53b6) (string-ci<? . lU53b5) (string-ci<=? . lU53b4) (char-whitespace? . lU53b3) (char-upper-case? . lU53b2) (char-title-case? . lU53b1) (char-numeric? . lU53b0) (char-lower-case? . lU53af) (char-general-category . lU53ae) (char-upcase . lU53ad) (char-titlecase . lU53ac) (char-foldcase . lU53ab) (char-downcase . lU53aa) (char-ci>? . lU53a9) (char-ci>=? . lU53a8) (char-ci=? . lU53a7) (char-ci<? . lU53a6) (char-ci<=? . lU53a5) (char-alphabetic? . lU53a4) (make-variable-transformer . lU2ef9) (identifier? . lU31b0) (generate-temporaries . lU319c) (free-identifier=? . lU319e) (syntax->datum . lU31b4) (datum->syntax . lU31b2) (bound-identifier=? . lU31a0) (record-type-descriptor? . lU53a3) (record-predicate . lU53a2) (record-mutator . lU53a1) (record-constructor . lU53a0) (record-accessor . lU539f) (make-record-type-descriptor . lU539e) (make-record-constructor-descriptor . lU539d) (record? . lU539c) (record-type-uid . lU539b) (record-type-sealed? . lU539a) (record-type-parent . lU5399) (record-type-opaque? . lU5398) (record-type-name . lU5397) (record-type-generative? . lU5396) (record-type-field-names . lU5395) (record-rtd . lU5394) (record-field-mutable? . lU5393) (delete-file . lU5392) (file-exists? . lU5391) (vector-sort! . lU5390) (vector-sort . lU538f) (list-sort . lU538e) (symbol-hash . lU538d) (string-ci-hash . lU538c) (string-hash . lU538b) (equal-hash . lU538a) (hashtable-equivalence-function . lU5389) (make-hashtable . lU5388) (hashtable-hash-function . lU5387) (make-eqv-hashtable . lU5386) (make-eq-hashtable . lU5385) (hashtable? . lU5384) (hashtable-update! . lU5383) (hashtable-size . lU5382) (hashtable-set! . lU5381) (hashtable-ref . lU5380) (hashtable-mutable? . lU537f) (hashtable-keys . lU537e) (hashtable-entries . lU537d) (hashtable-delete! . lU537c) (hashtable-copy . lU537b) (hashtable-contains? . lU537a) (hashtable-clear! . lU5379) (call-with-output-file . lU5378) (call-with-input-file . lU5377) (write-char . lU5376) (write . lU5375) (with-output-to-file . lU5374) (with-input-from-file . lU5373) (read-char . lU5372) (read . lU5371) (peek-char . lU5370) (open-output-file . lU536f) (open-input-file . lU536e) (newline . lU536d) (display . lU536c) (close-output-port . lU536b) (close-input-port . lU536a) (eof-object? . lU5369) (eof-object . lU5368) (current-error-port . lU5367) (current-output-port . lU5366) (current-input-port . lU5365) (output-port? . lU5364) (input-port? . lU5363) (utf-8-codec . lU5362) (utf-16-codec . lU5361) (transcoder-error-handling-mode . lU5360) (transcoder-eol-style . lU535f) (transcoder-codec . lU535e) (transcoded-port . lU535d) (textual-port? . lU535c) (string->bytevector . lU535b) (standard-output-port . lU535a) (standard-input-port . lU5359) (standard-error-port . lU5358) (set-port-position! . lU5357) (put-u8 . lU5356) (put-string . lU5355) (put-datum . lU5354) (put-char . lU5353) (put-bytevector . lU5352) (port? . lU5351) (port-transcoder . lU5350) (port-position . lU534f) (port-has-set-port-position!? . lU534e) (port-has-port-position? . lU534d) (port-eof? . lU534c) (output-port-buffer-mode . lU534b) (open-string-output-port . lU534a) (open-string-input-port . lU5349) (open-file-output-port . lU5348) (open-file-input/output-port . lU5347) (open-file-input-port . lU5346) (open-bytevector-output-port . lU5345) (open-bytevector-input-port . lU5344) (native-transcoder . lU5343) (native-eol-style . lU5342) (make-transcoder . lU5341) (latin-1-codec . lU5340) (make-i/o-write-error . lU4dd8) (make-i/o-read-error . lU4dc3) (make-i/o-port-error . lU4e79) (make-i/o-invalid-position-error . lU4def) (make-i/o-filename-error . lU4e0a) (make-i/o-file-protection-error . lU4e23) (make-i/o-file-is-read-only-error . lU4e38) (make-i/o-file-does-not-exist-error . lU4e62) (make-i/o-file-already-exists-error . lU4e4d) (make-i/o-error . lU4dae) (make-i/o-encoding-error . lU4ea9) (make-i/o-decoding-error . lU4e92) (make-custom-textual-output-port . lU533f) (make-custom-textual-input/output-port . lU533e) (make-custom-textual-input-port . lU533d) (make-custom-binary-output-port . lU533c) (make-custom-binary-input/output-port . lU533b) (make-custom-binary-input-port . lU533a) (make-bytevector . lU5339) (lookahead-u8 . lU5338) (lookahead-char . lU5337) (i/o-write-error? . lU4dda) (i/o-read-error? . lU4dc5) (i/o-port-error? . lU4e7d) (i/o-invalid-position-error? . lU4df3) (i/o-filename-error? . lU4e0e) (i/o-file-protection-error? . lU4e25) (i/o-file-is-read-only-error? . lU4e3a) (i/o-file-does-not-exist-error? . lU4e64) (i/o-file-already-exists-error? . lU4e4f) (i/o-error? . lU4db0) (i/o-error-position . lU4df5) (i/o-error-port . lU4e7f) (i/o-error-filename . lU4e10) (i/o-encoding-error? . lU4ead) (i/o-encoding-error-char . lU4eaf) (i/o-decoding-error? . lU4e94) (get-u8 . lU5336) (get-string-n! . lU5335) (get-string-n . lU5334) (get-string-all . lU5333) (get-line . lU5332) (get-datum . lU5331) (get-char . lU5330) (get-bytevector-some . lU532f) (get-bytevector-n! . lU532e) (get-bytevector-n . lU532d) (get-bytevector-all . lU532c) (flush-output-port . lU532b) (close-port . lU532a) (scheme-report-environment . lU318a) (quotient . lU5329) (null-environment . lU3188) (remainder . lU5328) (modulo . lU5327) (inexact->exact . lU5326) (force . lU5325) (exact->inexact . lU5324) (make-promise . lU5323) (exit . lU5322) (command-line . lU4fe6) (string-fill! . lU5321) (string-set! . lU5320) (set-cdr! . lU531f) (set-car! . lU531e) (remove . lU531d) (remv . lU531c) (remp . lU531b) (remq . lU531a) (partition . lU5319) (memv . lU5318) (memq . lU5317) (memp . lU5316) (member . lU5315) (exists . lU5314) (for-all . lU5313) (fold-right . lU5312) (fold-left . lU5311) (find . lU5310) (filter . lU530f) (cons* . lU530e) (assv . lU530d) (assq . lU530c) (assp . lU530b) (assoc . lU530a) (call-with-string-output-port . lU5309) (call-with-port . lU5308) (call-with-bytevector-output-port . lU5307) (bytevector->string . lU5306) (buffer-mode? . lU5305) (binary-port? . lU5304) (with-exception-handler . lU5303) (raise-continuable . lU5302) (raise . lU5301) (eval . lU318e) (environment . lU3186) (make-enumeration . lU5300) (enum-set=? . lU52ff) (enum-set-universe . lU52fe) (enum-set-union . lU52fd) (enum-set-subset? . lU52fc) (enum-set-projection . lU52fb) (enum-set-member? . lU52fa) (enum-set-intersection . lU52f9) (enum-set-indexer . lU52f8) (enum-set-difference . lU52f7) (enum-set-constructor . lU52f6) (enum-set-complement . lU52f5) (enum-set->list . lU52f4) (who-condition? . lU4d24) (warning? . lU4c9c) (violation? . lU4cdb) (undefined-violation? . lU4d9b) (syntax-violation? . lU4d82) (syntax-violation-subform . lU4d86) (syntax-violation-form . lU4d84) (syntax-violation . lU31ae) (simple-conditions . lU52f3) (serious-condition? . lU4cb1) (non-continuable-violation? . lU4d3b) (message-condition? . lU4c85) (make-who-condition . lU4d20) (make-warning . lU4c9a) (make-violation . lU4cd9) (make-undefined-violation . lU4d99) (make-syntax-violation . lU4d7c) (make-serious-condition . lU4caf) (make-non-continuable-violation . lU4d39) (make-message-condition . lU4c81) (make-lexical-violation . lU4d63) (make-irritants-condition . lU4d05) (make-implementation-restriction-violation . lU4d4e) (make-error . lU4cc4) (make-assertion-violation . lU4cee) (lexical-violation? . lU4d65) (irritants-condition? . lU4d09) (implementation-restriction-violation? . lU4d50) (error? . lU4cc6) (condition-who . lU4d26) (condition-predicate . lU52f2) (condition-message . lU4c87) (condition-irritants . lU4d0b) (condition-accessor . lU52f1) (condition . lU52f0) (assertion-violation? . lU4cf0) (condition? . lU52ef) (utf32->string . lU52ee) (utf16->string . lU52ed) (utf8->string . lU52ec) (uint-list->bytevector . lU52eb) (u8-list->bytevector . lU52ea) (string->utf8 . lU52e9) (string->utf32 . lU52e8) (string->utf16 . lU52e7) (sint-list->bytevector . lU52e6) (native-endianness . lU52e5) (bytevector? . lU52e4) (bytevector=? . lU52e3) (bytevector-uint-set! . lU52e2) (bytevector-uint-ref . lU52e1) (bytevector-u8-set! . lU52e0) (bytevector-u8-ref . lU52df) (bytevector-u64-set! . lU52de) (bytevector-u64-ref . lU52dd) (bytevector-u64-native-set! . lU52dc) (bytevector-u64-native-ref . lU52db) (bytevector-u32-set! . lU52da) (bytevector-u32-ref . lU52d9) (bytevector-u32-native-set! . lU52d8) (bytevector-u32-native-ref . lU52d7) (bytevector-u16-set! . lU52d6) (bytevector-u16-ref . lU52d5) (bytevector-u16-native-set! . lU52d4) (bytevector-u16-native-ref . lU52d3) (bytevector-sint-set! . lU52d2) (bytevector-sint-ref . lU52d1) (bytevector-s8-set! . lU52d0) (bytevector-s8-ref . lU52cf) (bytevector-s64-set! . lU52ce) (bytevector-s64-ref . lU52cd) (bytevector-s64-native-set! . lU52cc) (bytevector-s64-native-ref . lU52cb) (bytevector-s32-set! . lU52ca) (bytevector-s32-ref . lU52c9) (bytevector-s32-native-set! . lU52c8) (bytevector-s32-native-ref . lU52c7) (bytevector-s16-set! . lU52c6) (bytevector-s16-ref . lU52c5) (bytevector-s16-native-set! . lU52c4) (bytevector-s16-native-ref . lU52c3) (bytevector-length . lU52c2) (bytevector-ieee-single-ref . lU52c1) (bytevector-ieee-single-set! . lU52c0) (bytevector-ieee-single-native-set! . lU52bf) (bytevector-ieee-single-native-ref . lU52be) (bytevector-ieee-double-set! . lU52bd) (bytevector-ieee-double-ref . lU52bc) (bytevector-ieee-double-native-set! . lU52bb) (bytevector-ieee-double-native-ref . lU52ba) (bytevector-fill! . lU52b9) (bytevector-copy! . lU52b8) (bytevector-copy . lU52b7) (bytevector->uint-list . lU52b6) (bytevector->u8-list . lU52b5) (bytevector->sint-list . lU52b4) (no-nans-violation? . lU4ed9) (no-infinities-violation? . lU4ec4) (make-no-nans-violation . lU4ed7) (make-no-infinities-violation . lU4ec2) (real->flonum . lU52b3) (flzero? . lU52b2) (fltruncate . lU52b1) (fltan . lU52b0) (flsqrt . lU52af) (flsin . lU52ae) (flround . lU52ad) (flpositive? . lU52ac) (flonum? . lU52ab) (flodd? . lU52aa) (flnumerator . lU52a9) (flnegative? . lU52a8) (flnan? . lU52a7) (flmod0 . lU52a6) (flmod . lU52a5) (flmin . lU52a4) (flmax . lU52a3) (fllog . lU52a2) (flinteger? . lU52a1) (flinfinite? . lU52a0) (flfloor . lU529f) (flfinite? . lU529e) (flexpt . lU529d) (flexp . lU529c) (fleven? . lU529b) (fldiv0-and-mod0 . lU529a) (fldiv0 . lU5299) (fldiv-and-mod . lU5298) (fldiv . lU5297) (fldenominator . lU5296) (flcos . lU5295) (flceiling . lU5294) (flatan . lU5293) (flasin . lU5292) (flacos . lU5291) (flabs . lU5290) (fl>? . lU528f) (fl>=? . lU528e) (fl=? . lU528d) (fl<? . lU528c) (fl<=? . lU528b) (fl/ . lU528a) (fl- . lU5289) (fl+ . lU5288) (fl* . lU5287) (fixnum->flonum . lU5286) (fxzero? . lU5285) (fxxor . lU5284) (fxrotate-bit-field . lU5283) (fxreverse-bit-field . lU5282) (fxpositive? . lU5281) (fxodd? . lU5280) (fxnot . lU527f) (fxnegative? . lU527e) (fxmod0 . lU527d) (fxmod . lU527c) (fxmin . lU527b) (fxmax . lU527a) (fxlength . lU5279) (fxior . lU5278) (fxif . lU5277) (fxfirst-bit-set . lU5276) (fxeven? . lU5275) (fxdiv0-and-mod0 . lU5274) (fxdiv0 . lU5273) (fxdiv-and-mod . lU5272) (fxdiv . lU5271) (fxcopy-bit-field . lU5270) (fxcopy-bit . lU526f) (fxbit-set? . lU526e) (fxbit-field . lU526d) (fxbit-count . lU526c) (fxarithmetic-shift-right . lU526b) (fxarithmetic-shift-left . lU526a) (fxarithmetic-shift . lU5269) (fxand . lU5268) (fx>? . lU5267) (fx>=? . lU5266) (fx=? . lU5265) (fx<? . lU5264) (fx<=? . lU5263) (fx-/carry . lU5262) (fx- . lU5261) (fx+/carry . lU5260) (fx+ . lU525f) (fx*/carry . lU525e) (fx* . lU525d) (greatest-fixnum . lU525c) (least-fixnum . lU525b) (fixnum-width . lU525a) (fixnum? . lU5259) (bitwise-rotate-bit-field . lU5258) (bitwise-reverse-bit-field . lU5257) (bitwise-length . lU5256) (bitwise-if . lU5255) (bitwise-first-bit-set . lU5254) (bitwise-copy-bit-field . lU5253) (bitwise-copy-bit . lU5252) (bitwise-bit-set? . lU5251) (bitwise-bit-field . lU5250) (bitwise-bit-count . lU524f) (bitwise-xor . lU524e) (bitwise-ior . lU524d) (bitwise-and . lU524c) (bitwise-not . lU524b) (bitwise-arithmetic-shift-right . lU524a) (bitwise-arithmetic-shift-left . lU5249) (bitwise-arithmetic-shift . lU5248) (zero? . lU5247) (vector? . lU5246) (vector-set! . lU5245) (vector-ref . lU5244) (vector-map . lU5243) (vector-length . lU5242) (vector-for-each . lU5241) (vector-fill! . lU5240) (vector->list . lU523f) (vector . lU523e) (values . lU523d) (truncate . lU523c) (tan . lU523b) (symbol? . lU523a) (symbol=? . lU5239) (symbol->string . lU5238) (substring . lU5237) (string? . lU5236) (string>? . lU5235) (string>=? . lU5234) (string=? . lU5233) (string<? . lU5232) (string<=? . lU5231) (string-ref . lU5230) (string-length . lU522f) (string-for-each . lU522e) (string-copy . lU522d) (string-append . lU522c) (string->symbol . lU522b) (string->number . lU522a) (string->list . lU5229) (string . lU5228) (sqrt . lU5227) (sin . lU5226) (round . lU5225) (reverse . lU5224) (real? . lU5223) (real-valued? . lU5222) (real-part . lU5221) (rationalize . lU5220) (rational? . lU521f) (rational-valued? . lU521e) (procedure? . lU521d) (positive? . lU521c) (pair? . lU521b) (odd? . lU521a) (numerator . lU5219) (number? . lU5218) (number->string . lU5217) (null? . lU5216) (not . lU5215) (negative? . lU5214) (nan? . lU5213) (min . lU5212) (max . lU5211) (map . lU5210) (make-vector . lU520f) (make-string . lU520e) (make-rectangular . lU520d) (make-polar . lU520c) (magnitude . lU520b) (log . lU520a) (list? . lU5209) (list-tail . lU5208) (list-ref . lU5207) (list->vector . lU5206) (list->string . lU5205) (list . lU5204) (length . lU5203) (lcm . lU5202) (integer? . lU5201) (integer-valued? . lU5200) (integer->char . lU51ff) (infinite? . lU51fe) (inexact? . lU51fd) (inexact . lU51fc) (imag-part . lU51fb) (gcd . lU51fa) (for-each . lU51f9) (floor . lU51f8) (finite? . lU51f7) (expt . lU51f6) (exp . lU51f5) (exact? . lU51f4) (exact-integer-sqrt . lU51f3) (exact . lU51f2) (even? . lU51f1) (error . lU51f0) (eqv? . lU51ef) (equal? . lU51ee) (eq? . lU51ed) (dynamic-wind . lU51ec) (div0-and-mod0 . lU51eb) (mod0 . lU51ea) (div0 . lU51e9) (div-and-mod . lU51e8) (mod . lU51e7) (div . lU51e6) (denominator . lU51e5) (cos . lU51e4) (cons . lU51e3) (complex? . lU51e2) (char? . lU51e1) (char>? . lU51e0) (char>=? . lU51df) (char=? . lU51de) (char<? . lU51dd) (char<=? . lU51dc) (char->integer . lU51db) (ceiling . lU51da) (call-with-values . lU51d9) (call/cc . lU51d8) (call-with-current-continuation . lU51d7) (cddddr . lU51d6) (cdddar . lU51d5) (cddadr . lU51d4) (cddaar . lU51d3) (cdaddr . lU51d2) (cdadar . lU51d1) (cdaadr . lU51d0) (cdaaar . lU51cf) (cadddr . lU51ce) (caddar . lU51cd) (cadadr . lU51cc) (cadaar . lU51cb) (caaddr . lU51ca) (caadar . lU51c9) (caaadr . lU51c8) (caaaar . lU51c7) (cdddr . lU51c6) (cddar . lU51c5) (cdadr . lU51c4) (cdaar . lU51c3) (caddr . lU51c2) (cadar . lU51c1) (caadr . lU51c0) (caaar . lU51bf) (cddr . lU51be) (cdar . lU51bd) (cadr . lU51bc) (caar . lU51bb) (cdr . lU51ba) (car . lU51b9) (boolean? . lU51b8) (boolean=? . lU51b7) (atan . lU51b6) (assertion-violation . lU51b5) (assertion-error . lU31a8) (asin . lU51b4) (apply . lU51b3) (append . lU51b2) (angle . lU51b1) (acos . lU51b0) (abs . lU51af) (/ . lU51ae) (* . lU51ad) (- . lU51ac) (+ . lU51ab) (>= . lU51aa) (> . lU51a9) (= . lU51a8) (<= . lU51a7) (< . lU51a6) (library . lU51a5) (&no-nans . lU51a4) (&no-infinities . lU51a3) (&i/o-encoding . lU51a2) (&i/o-decoding . lU51a1) (&i/o-port . lU51a0) (&i/o-file-does-not-exist . lU519f) (&i/o-file-already-exists . lU519e) (&i/o-file-is-read-only . lU519d) (&i/o-file-protection . lU519c) (&i/o-filename . lU519b) (&i/o-invalid-position . lU519a) (&i/o-write . lU5199) (&i/o-read . lU5198) (&i/o . lU5197) (&undefined . lU5196) (&syntax . lU5195) (&lexical . lU5194) (&implementation-restriction . lU5193) (&non-continuable . lU5192) (&who . lU5191) (&irritants . lU5190) (&assertion . lU518f) (&violation . lU518e) (&error . lU518d) (&serious . lU518c) (&warning . lU518b) (&message . lU518a) (&condition . lU5189) (define-condition-type . lU5188) (define-enumeration . lU5187) (define-record-type . lU5186) (parent-rtd . lU5185) (nongenerative . lU5184) (opaque . lU5183) (sealed . lU5182) (protocol . lU5181) (parent . lU5180) (immutable . lU517f) (mutable . lU517e) (fields . lU517d) (error-handling-mode . lU517c) (file-options . lU517b) (buffer-mode . lU517a) (eol-style . lU5179) (guard . lU5178) (trace-define . lU5177) (trace-lambda . lU5176) (unsyntax-splicing . lU5175) (unsyntax . lU5174) (unquote-splicing . lU5173) (unquote . lU5172) (_ . lU5171) (else . lU5170) (=> . lU516f) (... . lU516e) (assert . lU516d) (endianness . lU516c) (delay . lU516b) (time . lU516a) (do . lU5169) (cond . lU5168) (let* . lU5167) (let*-values . lU5166) (let-values . lU5165) (identifier-syntax . lU5164) (with-syntax . lU5163) (quasisyntax . lU5162) (quasiquote . lU5161) (syntax-rules . lU5160) (include . lU515f) (define-struct . lU515e) (record-constructor-descriptor . lU515d) (record-type-descriptor . lU515c) (case . lU515b) (parameterize . lU515a) (unless . lU5159) (when . lU5158) (or . lU5157) (and . lU5156) (if . lU5155) (let . lU5154) (letrec* . lU5153) (letrec . lU5152) (type-descriptor . lU5151) (case-lambda . lU5150) (lambda . lU514f) (syntax . lU514e) (syntax-case . lU514d) (quote . lU514c) (foreign-call . lU514b) (letrec-syntax . lU514a) (let-syntax . lU5149) (set! . lU5148) (import . lU5147) (begin . lU5146) (module . lU5145) (define-syntax . lU5144) (define . lU5143)) '((lU4edd core-prim . &no-nans-rcd) (lU4edb core-prim . &no-nans-rtd) (lU4ec8 core-prim . &no-infinities-rcd) (lU4ec6 core-prim . &no-infinities-rtd) (lU4eb3 core-prim . &i/o-encoding-rcd) (lU4eb1 core-prim . &i/o-encoding-rtd) (lU4e98 core-prim . &i/o-decoding-rcd) (lU4e96 core-prim . &i/o-decoding-rtd) (lU4e83 core-prim . &i/o-port-rcd) (lU4e81 core-prim . &i/o-port-rtd) (lU4e68 core-prim . &i/o-file-does-not-exist-rcd) (lU4e66 core-prim . &i/o-file-does-not-exist-rtd) (lU4e53 core-prim . &i/o-file-already-exists-rcd) (lU4e51 core-prim . &i/o-file-already-exists-rtd) (lU4e3e core-prim . &i/o-file-is-read-only-rcd) (lU4e3c core-prim . &i/o-file-is-read-only-rtd) (lU4e29 core-prim . &i/o-file-protection-rcd) (lU4e27 core-prim . &i/o-file-protection-rtd) (lU4e14 core-prim . &i/o-filename-rcd) (lU4e12 core-prim . &i/o-filename-rtd) (lU4df9 core-prim . &i/o-invalid-position-rcd) (lU4df7 core-prim . &i/o-invalid-position-rtd) (lU4dde core-prim . &i/o-write-rcd) (lU4ddc core-prim . &i/o-write-rtd) (lU4dc9 core-prim . &i/o-read-rcd) (lU4dc7 core-prim . &i/o-read-rtd) (lU4db4 core-prim . &i/o-rcd) (lU4db2 core-prim . &i/o-rtd) (lU4d9f core-prim . &undefined-rcd) (lU4d9d core-prim . &undefined-rtd) (lU4d8a core-prim . &syntax-rcd) (lU4d88 core-prim . &syntax-rtd) (lU4d69 core-prim . &lexical-rcd) (lU4d67 core-prim . &lexical-rtd) (lU4d54 core-prim . &implementation-restriction-rcd) (lU4d52 core-prim . &implementation-restriction-rtd) (lU4d3f core-prim . &non-continuable-rcd) (lU4d3d core-prim . &non-continuable-rtd) (lU4d2a core-prim . &who-rcd) (lU4d28 core-prim . &who-rtd) (lU4d0f core-prim . &irritants-rcd) (lU4d0d core-prim . &irritants-rtd) (lU4cf4 core-prim . &assertion-rcd) (lU4cf2 core-prim . &assertion-rtd) (lU4cdf core-prim . &violation-rcd) (lU4cdd core-prim . &violation-rtd) (lU4cca core-prim . &error-rcd) (lU4cc8 core-prim . &error-rtd) (lU4cb5 core-prim . &serious-rcd) (lU4cb3 core-prim . &serious-rtd) (lU4ca0 core-prim . &warning-rcd) (lU4c9e core-prim . &warning-rtd) (lU4c8b core-prim . &message-rcd) (lU4c89 core-prim . &message-rtd) (lU4c2c core-prim . &condition-rcd) (lU4c2a core-prim . &condition-rtd) (lU31aa core-prim . syntax-error) (lU30ce core-prim . syntax-dispatch) (lU5472 core-prim . pretty-print) (lU5471 core-prim . eval-core) (lU5470 core-prim . set-symbol-value!) (lU546f core-prim . symbol-value) (lU546e core-prim . gensym) (lU546d core-prim . void) (lU4fec core-prim . load) (lU31bc core-prim . interaction-environment) (lU546c core-prim . char-ready?) (lU546b core-prim . regexp?) (lU546a core-prim . read-line) (lU5469 core-prim . gensym-prefix-set!) (lU5468 core-prim . ungensym) (lU5467 core-prim . alist->eq-hash-table) (lU5466 core-prim . assoc-ref) (lU5465 core-prim . print) (lU5464 core-prim . format) (lU5463 core-prim . host-os) (lU2b07 core-prim . library-path) (lU5462 core-prim . standard-library-path) (lU5461 core-prim . file-newer?) (lU5460 core-prim . stat-mtime) (lU545f core-prim . write-to-file) (lU545e core-prim . file->sexp-list) (lU545d core-prim . file->list) (lU545c core-prim . file->string) (lU545b core-prim . digit->integer) (lU545a core-prim . call-with-string-input-port) (lU5459 core-prim . call-with-string-io) (lU5458 core-prim . string-split) (lU5457 core-prim . bytevector-for-each) (lU5456 core-prim . string->regexp) (lU5455 core-prim . rxmatch) (lU5454 core-prim . regexp-replace-all) (lU5453 core-prim . hashtable-for-each) (lU28f1 core-prim . mosh-cache-dir) (lU5452 core-prim . call-process) (lU5451 core-prim . local-tz-offset) (lU5450 core-prim . microseconds) (lU544f core-prim . directory-list) (lU544e core-prim . set-current-directory!) (lU544d core-prim . expand-path) (lU544c core-prim . current-directory) (lU544b core-prim . %spawn) (lU544a core-prim . %waitpid) (lU5449 core-prim . simple-struct-name) (lU5448 core-prim . simple-struct-set!) (lU5447 core-prim . simple-struct-ref) (lU5446 core-prim . make-simple-struct) (lU5445 core-prim . simple-struct?) (lU5444 core-prim . pointer-ref-c-int64) (lU5443 core-prim . pointer-ref-c-int32) (lU5442 core-prim . pointer-ref-c-int16) (lU5441 core-prim . pointer-ref-c-int8) (lU5440 core-prim . pointer-ref-c-uint64) (lU543f core-prim . pointer-ref-c-uint32) (lU543e core-prim . pointer-ref-c-uint16) (lU543d core-prim . pointer-ref-c-uint8) (lU543c core-prim . pointer-set-c-uint64!) (lU543b core-prim . pointer-set-c-uint32!) (lU543a core-prim . pointer-set-c-uint16!) (lU5439 core-prim . pointer-set-c-uint8!) (lU5438 core-prim . pointer-set-c-int64!) (lU5437 core-prim . pointer-set-c-int32!) (lU5436 core-prim . pointer-set-c-int16!) (lU5435 core-prim . pointer-set-c-int8!) (lU5434 core-prim . pointer-set-c-pointer!) (lU5433 core-prim . pointer-set-c-double!) (lU5432 core-prim . pointer-set-c-float!) (lU5431 core-prim . pointer-set-c-long-long!) (lU5430 core-prim . pointer-set-c-long!) (lU542f core-prim . pointer-set-c-int!) (lU542e core-prim . pointer-set-c-short!) (lU542d core-prim . pointer-set-c-char!) (lU542c core-prim . pointer-ref-c-pointer) (lU542b core-prim . pointer-ref-c-double) (lU542a core-prim . pointer-ref-c-float) (lU5429 core-prim . pointer-ref-c-unsigned-long-long) (lU5428 core-prim . pointer-ref-c-signed-long-long) (lU5427 core-prim . pointer-ref-c-unsigned-long) (lU5426 core-prim . pointer-ref-c-signed-long) (lU5425 core-prim . pointer-ref-c-unsigned-int) (lU5424 core-prim . pointer-ref-c-signed-int) (lU5423 core-prim . pointer-ref-c-unsigned-short) (lU5422 core-prim . pointer-ref-c-signed-short) (lU5421 core-prim . pointer-ref-c-unsigned-char) (lU5420 core-prim . pointer-ref-c-signed-char) (lU541f core-prim . pointer->integer) (lU541e core-prim . integer->pointer) (lU541d core-prim . pointer?) (lU541c core-prim . shared-errno) (lU541b core-prim . get-c-address) (lU541a core-prim . obj->integer) (lU5419 core-prim . u8-list->c-procedure) (lU5418 core-prim . %ffi-free-c-callback-trampoline) (lU5417 core-prim . %ffi-make-c-callback-trampoline) (lU5416 core-prim . %ffi-free) (lU5415 core-prim . %ffi-malloc) (lU5414 core-prim . %ffi-supported?) (lU5413 core-prim . %ffi-pointer->string) (lU5412 core-prim . %ffi-call) (lU5411 core-prim . %ffi-lookup) (lU5410 core-prim . %ffi-open) (lU540f core-prim . null-terminated-utf8->string) (lU540e core-prim . null-terminated-bytevector->string) (lU540d core-prim . %fork) (lU540c core-prim . %pipe) (lU540b core-prim . p) (lU540a core-prim . open-output-string) (lU5409 core-prim . get-output-string) (lU5408 core-prim . file-stat-ctime) (lU5407 core-prim . file-stat-atime) (lU5406 core-prim . file-stat-mtime) (lU5405 core-prim . file-size-in-bytes) (lU5404 core-prim . file-writable?) (lU5403 core-prim . file-executable?) (lU5402 core-prim . file-readable?) (lU5401 core-prim . file-regular?) (lU5400 core-prim . file-symbolic-link?) (lU53ff core-prim . file-directory?) (lU53fe core-prim . create-symbolic-link) (lU53fd core-prim . rename-file) (lU53fc core-prim . delete-directory) (lU53fb core-prim . create-directory) (lU53fa core-prim . create-mosh-cache-dir) (lU53f9 core-prim . get-environment-variables) (lU53f8 core-prim . current-exception-handler) (lU53f7 core-prim . get-environment-variable) (lU53f6 core-prim . join-wraps) (lU53f5 core-prim . id->real-label) (lU53f4 core-prim . same-marks?) (lU53f3 core-prim . same-marks*?) (lU53f2 core-prim . get-timeofday) (lU53f1 core-prim . get-command-line) (lU53f0 core-prim . sys-display) (lU53ef core-prim . whereis) (lU53ee core-prim . register) (lU53ed core-prim . vm-join!) (lU53ec core-prim . vm-set-value!) (lU53eb core-prim . vm?) (lU53ea core-prim . main-vm?) (lU53e9 core-prim . vm-eval) (lU53e8 core-prim . vm-self) (lU53e7 core-prim . vm-start!) (lU53e6 core-prim . make-vm) (lU53e5 core-prim . mutex-try-lock!) (lU53e4 core-prim . mutex-unlock!) (lU53e3 core-prim . mutex-lock!) (lU53e2 core-prim . mutex?) (lU53e1 core-prim . make-mutex) (lU53e0 core-prim . condition-variable-notify-all!) (lU53df core-prim . condition-variable-notify!) (lU53de core-prim . condition-variable-wait!) (lU53dd core-prim . make-condition-variable) (lU53dc core-prim . mosh-executable-path) (lU53db core-prim . make-file-options) (lU53da core-prim . for-each-with-index) (lU53d9 core-prim . source-info) (lU53d8 core-prim . instruction?) (lU53d7 core-prim . instruction->integer) (lU53d6 core-prim . instruction->symbol) (lU53d5 core-prim . closure->list) (lU53d4 core-prim . make-compiler-instruction) (lU53d3 core-prim . make-instruction) (lU53d2 core-prim . set-source-info!) (lU53d1 core-prim . bignum?) (lU53d0 core-prim . fast-equal?) (lU53cf core-prim . fasl-read) (lU53ce core-prim . fasl-write) (lU53cd core-prim . time-usage) (lU53cc core-prim . os-constant) (lU53cb core-prim . disasm) (lU28ef core-prim . make-parameter) (lU53ca core-prim . socket-port) (lU53c9 core-prim . socket-shutdown) (lU53c8 core-prim . socket-close) (lU53c7 core-prim . socket-send) (lU53c6 core-prim . socket-recv!) (lU53c5 core-prim . socket-recv) (lU53c4 core-prim . make-server-socket) (lU53c3 core-prim . make-client-socket) (lU53c2 core-prim . socket-accept) (lU53c1 core-prim . socket?) (lU53c0 core-prim . string-upcase) (lU53bf core-prim . string-titlecase) (lU53be core-prim . string-normalize-nfkd) (lU53bd core-prim . string-normalize-nfkc) (lU53bc core-prim . string-normalize-nfd) (lU53bb core-prim . string-normalize-nfc) (lU53ba core-prim . string-foldcase) (lU53b9 core-prim . string-downcase) (lU53b8 core-prim . string-ci>?) (lU53b7 core-prim . string-ci>=?) (lU53b6 core-prim . string-ci=?) (lU53b5 core-prim . string-ci<?) (lU53b4 core-prim . string-ci<=?) (lU53b3 core-prim . char-whitespace?) (lU53b2 core-prim . char-upper-case?) (lU53b1 core-prim . char-title-case?) (lU53b0 core-prim . char-numeric?) (lU53af core-prim . char-lower-case?) (lU53ae core-prim . char-general-category) (lU53ad core-prim . char-upcase) (lU53ac core-prim . char-titlecase) (lU53ab core-prim . char-foldcase) (lU53aa core-prim . char-downcase) (lU53a9 core-prim . char-ci>?) (lU53a8 core-prim . char-ci>=?) (lU53a7 core-prim . char-ci=?) (lU53a6 core-prim . char-ci<?) (lU53a5 core-prim . char-ci<=?) (lU53a4 core-prim . char-alphabetic?) (lU2ef9 core-prim . make-variable-transformer) (lU31b0 core-prim . identifier?) (lU319c core-prim . generate-temporaries) (lU319e core-prim . free-identifier=?) (lU31b4 core-prim . syntax->datum) (lU31b2 core-prim . datum->syntax) (lU31a0 core-prim . bound-identifier=?) (lU53a3 core-prim . record-type-descriptor?) (lU53a2 core-prim . record-predicate) (lU53a1 core-prim . record-mutator) (lU53a0 core-prim . record-constructor) (lU539f core-prim . record-accessor) (lU539e core-prim . make-record-type-descriptor) (lU539d core-prim . make-record-constructor-descriptor) (lU539c core-prim . record?) (lU539b core-prim . record-type-uid) (lU539a core-prim . record-type-sealed?) (lU5399 core-prim . record-type-parent) (lU5398 core-prim . record-type-opaque?) (lU5397 core-prim . record-type-name) (lU5396 core-prim . record-type-generative?) (lU5395 core-prim . record-type-field-names) (lU5394 core-prim . record-rtd) (lU5393 core-prim . record-field-mutable?) (lU5392 core-prim . delete-file) (lU5391 core-prim . file-exists?) (lU5390 core-prim . vector-sort!) (lU538f core-prim . vector-sort) (lU538e core-prim . list-sort) (lU538d core-prim . symbol-hash) (lU538c core-prim . string-ci-hash) (lU538b core-prim . string-hash) (lU538a core-prim . equal-hash) (lU5389 core-prim . hashtable-equivalence-function) (lU5388 core-prim . make-hashtable) (lU5387 core-prim . hashtable-hash-function) (lU5386 core-prim . make-eqv-hashtable) (lU5385 core-prim . make-eq-hashtable) (lU5384 core-prim . hashtable?) (lU5383 core-prim . hashtable-update!) (lU5382 core-prim . hashtable-size) (lU5381 core-prim . hashtable-set!) (lU5380 core-prim . hashtable-ref) (lU537f core-prim . hashtable-mutable?) (lU537e core-prim . hashtable-keys) (lU537d core-prim . hashtable-entries) (lU537c core-prim . hashtable-delete!) (lU537b core-prim . hashtable-copy) (lU537a core-prim . hashtable-contains?) (lU5379 core-prim . hashtable-clear!) (lU5378 core-prim . call-with-output-file) (lU5377 core-prim . call-with-input-file) (lU5376 core-prim . write-char) (lU5375 core-prim . write) (lU5374 core-prim . with-output-to-file) (lU5373 core-prim . with-input-from-file) (lU5372 core-prim . read-char) (lU5371 core-prim . read) (lU5370 core-prim . peek-char) (lU536f core-prim . open-output-file) (lU536e core-prim . open-input-file) (lU536d core-prim . newline) (lU536c core-prim . display) (lU536b core-prim . close-output-port) (lU536a core-prim . close-input-port) (lU5369 core-prim . eof-object?) (lU5368 core-prim . eof-object) (lU5367 core-prim . current-error-port) (lU5366 core-prim . current-output-port) (lU5365 core-prim . current-input-port) (lU5364 core-prim . output-port?) (lU5363 core-prim . input-port?) (lU5362 core-prim . utf-8-codec) (lU5361 core-prim . utf-16-codec) (lU5360 core-prim . transcoder-error-handling-mode) (lU535f core-prim . transcoder-eol-style) (lU535e core-prim . transcoder-codec) (lU535d core-prim . transcoded-port) (lU535c core-prim . textual-port?) (lU535b core-prim . string->bytevector) (lU535a core-prim . standard-output-port) (lU5359 core-prim . standard-input-port) (lU5358 core-prim . standard-error-port) (lU5357 core-prim . set-port-position!) (lU5356 core-prim . put-u8) (lU5355 core-prim . put-string) (lU5354 core-prim . put-datum) (lU5353 core-prim . put-char) (lU5352 core-prim . put-bytevector) (lU5351 core-prim . port?) (lU5350 core-prim . port-transcoder) (lU534f core-prim . port-position) (lU534e core-prim . port-has-set-port-position!?) (lU534d core-prim . port-has-port-position?) (lU534c core-prim . port-eof?) (lU534b core-prim . output-port-buffer-mode) (lU534a core-prim . open-string-output-port) (lU5349 core-prim . open-string-input-port) (lU5348 core-prim . open-file-output-port) (lU5347 core-prim . open-file-input/output-port) (lU5346 core-prim . open-file-input-port) (lU5345 core-prim . open-bytevector-output-port) (lU5344 core-prim . open-bytevector-input-port) (lU5343 core-prim . native-transcoder) (lU5342 core-prim . native-eol-style) (lU5341 core-prim . make-transcoder) (lU5340 core-prim . latin-1-codec) (lU4dd8 core-prim . make-i/o-write-error) (lU4dc3 core-prim . make-i/o-read-error) (lU4e79 core-prim . make-i/o-port-error) (lU4def core-prim . make-i/o-invalid-position-error) (lU4e0a core-prim . make-i/o-filename-error) (lU4e23 core-prim . make-i/o-file-protection-error) (lU4e38 core-prim . make-i/o-file-is-read-only-error) (lU4e62 core-prim . make-i/o-file-does-not-exist-error) (lU4e4d core-prim . make-i/o-file-already-exists-error) (lU4dae core-prim . make-i/o-error) (lU4ea9 core-prim . make-i/o-encoding-error) (lU4e92 core-prim . make-i/o-decoding-error) (lU533f core-prim . make-custom-textual-output-port) (lU533e core-prim . make-custom-textual-input/output-port) (lU533d core-prim . make-custom-textual-input-port) (lU533c core-prim . make-custom-binary-output-port) (lU533b core-prim . make-custom-binary-input/output-port) (lU533a core-prim . make-custom-binary-input-port) (lU5339 core-prim . make-bytevector) (lU5338 core-prim . lookahead-u8) (lU5337 core-prim . lookahead-char) (lU4dda core-prim . i/o-write-error?) (lU4dc5 core-prim . i/o-read-error?) (lU4e7d core-prim . i/o-port-error?) (lU4df3 core-prim . i/o-invalid-position-error?) (lU4e0e core-prim . i/o-filename-error?) (lU4e25 core-prim . i/o-file-protection-error?) (lU4e3a core-prim . i/o-file-is-read-only-error?) (lU4e64 core-prim . i/o-file-does-not-exist-error?) (lU4e4f core-prim . i/o-file-already-exists-error?) (lU4db0 core-prim . i/o-error?) (lU4df5 core-prim . i/o-error-position) (lU4e7f core-prim . i/o-error-port) (lU4e10 core-prim . i/o-error-filename) (lU4ead core-prim . i/o-encoding-error?) (lU4eaf core-prim . i/o-encoding-error-char) (lU4e94 core-prim . i/o-decoding-error?) (lU5336 core-prim . get-u8) (lU5335 core-prim . get-string-n!) (lU5334 core-prim . get-string-n) (lU5333 core-prim . get-string-all) (lU5332 core-prim . get-line) (lU5331 core-prim . get-datum) (lU5330 core-prim . get-char) (lU532f core-prim . get-bytevector-some) (lU532e core-prim . get-bytevector-n!) (lU532d core-prim . get-bytevector-n) (lU532c core-prim . get-bytevector-all) (lU532b core-prim . flush-output-port) (lU532a core-prim . close-port) (lU318a core-prim . scheme-report-environment) (lU5329 core-prim . quotient) (lU3188 core-prim . null-environment) (lU5328 core-prim . remainder) (lU5327 core-prim . modulo) (lU5326 core-prim . inexact->exact) (lU5325 core-prim . force) (lU5324 core-prim . exact->inexact) (lU5323 core-prim . make-promise) (lU5322 core-prim . exit) (lU4fe6 core-prim . command-line) (lU5321 core-prim . string-fill!) (lU5320 core-prim . string-set!) (lU531f core-prim . set-cdr!) (lU531e core-prim . set-car!) (lU531d core-prim . remove) (lU531c core-prim . remv) (lU531b core-prim . remp) (lU531a core-prim . remq) (lU5319 core-prim . partition) (lU5318 core-prim . memv) (lU5317 core-prim . memq) (lU5316 core-prim . memp) (lU5315 core-prim . member) (lU5314 core-prim . exists) (lU5313 core-prim . for-all) (lU5312 core-prim . fold-right) (lU5311 core-prim . fold-left) (lU5310 core-prim . find) (lU530f core-prim . filter) (lU530e core-prim . cons*) (lU530d core-prim . assv) (lU530c core-prim . assq) (lU530b core-prim . assp) (lU530a core-prim . assoc) (lU5309 core-prim . call-with-string-output-port) (lU5308 core-prim . call-with-port) (lU5307 core-prim . call-with-bytevector-output-port) (lU5306 core-prim . bytevector->string) (lU5305 core-prim . buffer-mode?) (lU5304 core-prim . binary-port?) (lU5303 core-prim . with-exception-handler) (lU5302 core-prim . raise-continuable) (lU5301 core-prim . raise) (lU318e core-prim . eval) (lU3186 core-prim . environment) (lU5300 core-prim . make-enumeration) (lU52ff core-prim . enum-set=?) (lU52fe core-prim . enum-set-universe) (lU52fd core-prim . enum-set-union) (lU52fc core-prim . enum-set-subset?) (lU52fb core-prim . enum-set-projection) (lU52fa core-prim . enum-set-member?) (lU52f9 core-prim . enum-set-intersection) (lU52f8 core-prim . enum-set-indexer) (lU52f7 core-prim . enum-set-difference) (lU52f6 core-prim . enum-set-constructor) (lU52f5 core-prim . enum-set-complement) (lU52f4 core-prim . enum-set->list) (lU4d24 core-prim . who-condition?) (lU4c9c core-prim . warning?) (lU4cdb core-prim . violation?) (lU4d9b core-prim . undefined-violation?) (lU4d82 core-prim . syntax-violation?) (lU4d86 core-prim . syntax-violation-subform) (lU4d84 core-prim . syntax-violation-form) (lU31ae core-prim . syntax-violation) (lU52f3 core-prim . simple-conditions) (lU4cb1 core-prim . serious-condition?) (lU4d3b core-prim . non-continuable-violation?) (lU4c85 core-prim . message-condition?) (lU4d20 core-prim . make-who-condition) (lU4c9a core-prim . make-warning) (lU4cd9 core-prim . make-violation) (lU4d99 core-prim . make-undefined-violation) (lU4d7c core-prim . make-syntax-violation) (lU4caf core-prim . make-serious-condition) (lU4d39 core-prim . make-non-continuable-violation) (lU4c81 core-prim . make-message-condition) (lU4d63 core-prim . make-lexical-violation) (lU4d05 core-prim . make-irritants-condition) (lU4d4e core-prim . make-implementation-restriction-violation) (lU4cc4 core-prim . make-error) (lU4cee core-prim . make-assertion-violation) (lU4d65 core-prim . lexical-violation?) (lU4d09 core-prim . irritants-condition?) (lU4d50 core-prim . implementation-restriction-violation?) (lU4cc6 core-prim . error?) (lU4d26 core-prim . condition-who) (lU52f2 core-prim . condition-predicate) (lU4c87 core-prim . condition-message) (lU4d0b core-prim . condition-irritants) (lU52f1 core-prim . condition-accessor) (lU52f0 core-prim . condition) (lU4cf0 core-prim . assertion-violation?) (lU52ef core-prim . condition?) (lU52ee core-prim . utf32->string) (lU52ed core-prim . utf16->string) (lU52ec core-prim . utf8->string) (lU52eb core-prim . uint-list->bytevector) (lU52ea core-prim . u8-list->bytevector) (lU52e9 core-prim . string->utf8) (lU52e8 core-prim . string->utf32) (lU52e7 core-prim . string->utf16) (lU52e6 core-prim . sint-list->bytevector) (lU52e5 core-prim . native-endianness) (lU52e4 core-prim . bytevector?) (lU52e3 core-prim . bytevector=?) (lU52e2 core-prim . bytevector-uint-set!) (lU52e1 core-prim . bytevector-uint-ref) (lU52e0 core-prim . bytevector-u8-set!) (lU52df core-prim . bytevector-u8-ref) (lU52de core-prim . bytevector-u64-set!) (lU52dd core-prim . bytevector-u64-ref) (lU52dc core-prim . bytevector-u64-native-set!) (lU52db core-prim . bytevector-u64-native-ref) (lU52da core-prim . bytevector-u32-set!) (lU52d9 core-prim . bytevector-u32-ref) (lU52d8 core-prim . bytevector-u32-native-set!) (lU52d7 core-prim . bytevector-u32-native-ref) (lU52d6 core-prim . bytevector-u16-set!) (lU52d5 core-prim . bytevector-u16-ref) (lU52d4 core-prim . bytevector-u16-native-set!) (lU52d3 core-prim . bytevector-u16-native-ref) (lU52d2 core-prim . bytevector-sint-set!) (lU52d1 core-prim . bytevector-sint-ref) (lU52d0 core-prim . bytevector-s8-set!) (lU52cf core-prim . bytevector-s8-ref) (lU52ce core-prim . bytevector-s64-set!) (lU52cd core-prim . bytevector-s64-ref) (lU52cc core-prim . bytevector-s64-native-set!) (lU52cb core-prim . bytevector-s64-native-ref) (lU52ca core-prim . bytevector-s32-set!) (lU52c9 core-prim . bytevector-s32-ref) (lU52c8 core-prim . bytevector-s32-native-set!) (lU52c7 core-prim . bytevector-s32-native-ref) (lU52c6 core-prim . bytevector-s16-set!) (lU52c5 core-prim . bytevector-s16-ref) (lU52c4 core-prim . bytevector-s16-native-set!) (lU52c3 core-prim . bytevector-s16-native-ref) (lU52c2 core-prim . bytevector-length) (lU52c1 core-prim . bytevector-ieee-single-ref) (lU52c0 core-prim . bytevector-ieee-single-set!) (lU52bf core-prim . bytevector-ieee-single-native-set!) (lU52be core-prim . bytevector-ieee-single-native-ref) (lU52bd core-prim . bytevector-ieee-double-set!) (lU52bc core-prim . bytevector-ieee-double-ref) (lU52bb core-prim . bytevector-ieee-double-native-set!) (lU52ba core-prim . bytevector-ieee-double-native-ref) (lU52b9 core-prim . bytevector-fill!) (lU52b8 core-prim . bytevector-copy!) (lU52b7 core-prim . bytevector-copy) (lU52b6 core-prim . bytevector->uint-list) (lU52b5 core-prim . bytevector->u8-list) (lU52b4 core-prim . bytevector->sint-list) (lU4ed9 core-prim . no-nans-violation?) (lU4ec4 core-prim . no-infinities-violation?) (lU4ed7 core-prim . make-no-nans-violation) (lU4ec2 core-prim . make-no-infinities-violation) (lU52b3 core-prim . real->flonum) (lU52b2 core-prim . flzero?) (lU52b1 core-prim . fltruncate) (lU52b0 core-prim . fltan) (lU52af core-prim . flsqrt) (lU52ae core-prim . flsin) (lU52ad core-prim . flround) (lU52ac core-prim . flpositive?) (lU52ab core-prim . flonum?) (lU52aa core-prim . flodd?) (lU52a9 core-prim . flnumerator) (lU52a8 core-prim . flnegative?) (lU52a7 core-prim . flnan?) (lU52a6 core-prim . flmod0) (lU52a5 core-prim . flmod) (lU52a4 core-prim . flmin) (lU52a3 core-prim . flmax) (lU52a2 core-prim . fllog) (lU52a1 core-prim . flinteger?) (lU52a0 core-prim . flinfinite?) (lU529f core-prim . flfloor) (lU529e core-prim . flfinite?) (lU529d core-prim . flexpt) (lU529c core-prim . flexp) (lU529b core-prim . fleven?) (lU529a core-prim . fldiv0-and-mod0) (lU5299 core-prim . fldiv0) (lU5298 core-prim . fldiv-and-mod) (lU5297 core-prim . fldiv) (lU5296 core-prim . fldenominator) (lU5295 core-prim . flcos) (lU5294 core-prim . flceiling) (lU5293 core-prim . flatan) (lU5292 core-prim . flasin) (lU5291 core-prim . flacos) (lU5290 core-prim . flabs) (lU528f core-prim . fl>?) (lU528e core-prim . fl>=?) (lU528d core-prim . fl=?) (lU528c core-prim . fl<?) (lU528b core-prim . fl<=?) (lU528a core-prim . fl/) (lU5289 core-prim . fl-) (lU5288 core-prim . fl+) (lU5287 core-prim . fl*) (lU5286 core-prim . fixnum->flonum) (lU5285 core-prim . fxzero?) (lU5284 core-prim . fxxor) (lU5283 core-prim . fxrotate-bit-field) (lU5282 core-prim . fxreverse-bit-field) (lU5281 core-prim . fxpositive?) (lU5280 core-prim . fxodd?) (lU527f core-prim . fxnot) (lU527e core-prim . fxnegative?) (lU527d core-prim . fxmod0) (lU527c core-prim . fxmod) (lU527b core-prim . fxmin) (lU527a core-prim . fxmax) (lU5279 core-prim . fxlength) (lU5278 core-prim . fxior) (lU5277 core-prim . fxif) (lU5276 core-prim . fxfirst-bit-set) (lU5275 core-prim . fxeven?) (lU5274 core-prim . fxdiv0-and-mod0) (lU5273 core-prim . fxdiv0) (lU5272 core-prim . fxdiv-and-mod) (lU5271 core-prim . fxdiv) (lU5270 core-prim . fxcopy-bit-field) (lU526f core-prim . fxcopy-bit) (lU526e core-prim . fxbit-set?) (lU526d core-prim . fxbit-field) (lU526c core-prim . fxbit-count) (lU526b core-prim . fxarithmetic-shift-right) (lU526a core-prim . fxarithmetic-shift-left) (lU5269 core-prim . fxarithmetic-shift) (lU5268 core-prim . fxand) (lU5267 core-prim . fx>?) (lU5266 core-prim . fx>=?) (lU5265 core-prim . fx=?) (lU5264 core-prim . fx<?) (lU5263 core-prim . fx<=?) (lU5262 core-prim . fx-/carry) (lU5261 core-prim . fx-) (lU5260 core-prim . fx+/carry) (lU525f core-prim . fx+) (lU525e core-prim . fx*/carry) (lU525d core-prim . fx*) (lU525c core-prim . greatest-fixnum) (lU525b core-prim . least-fixnum) (lU525a core-prim . fixnum-width) (lU5259 core-prim . fixnum?) (lU5258 core-prim . bitwise-rotate-bit-field) (lU5257 core-prim . bitwise-reverse-bit-field) (lU5256 core-prim . bitwise-length) (lU5255 core-prim . bitwise-if) (lU5254 core-prim . bitwise-first-bit-set) (lU5253 core-prim . bitwise-copy-bit-field) (lU5252 core-prim . bitwise-copy-bit) (lU5251 core-prim . bitwise-bit-set?) (lU5250 core-prim . bitwise-bit-field) (lU524f core-prim . bitwise-bit-count) (lU524e core-prim . bitwise-xor) (lU524d core-prim . bitwise-ior) (lU524c core-prim . bitwise-and) (lU524b core-prim . bitwise-not) (lU524a core-prim . bitwise-arithmetic-shift-right) (lU5249 core-prim . bitwise-arithmetic-shift-left) (lU5248 core-prim . bitwise-arithmetic-shift) (lU5247 core-prim . zero?) (lU5246 core-prim . vector?) (lU5245 core-prim . vector-set!) (lU5244 core-prim . vector-ref) (lU5243 core-prim . vector-map) (lU5242 core-prim . vector-length) (lU5241 core-prim . vector-for-each) (lU5240 core-prim . vector-fill!) (lU523f core-prim . vector->list) (lU523e core-prim . vector) (lU523d core-prim . values) (lU523c core-prim . truncate) (lU523b core-prim . tan) (lU523a core-prim . symbol?) (lU5239 core-prim . symbol=?) (lU5238 core-prim . symbol->string) (lU5237 core-prim . substring) (lU5236 core-prim . string?) (lU5235 core-prim . string>?) (lU5234 core-prim . string>=?) (lU5233 core-prim . string=?) (lU5232 core-prim . string<?) (lU5231 core-prim . string<=?) (lU5230 core-prim . string-ref) (lU522f core-prim . string-length) (lU522e core-prim . string-for-each) (lU522d core-prim . string-copy) (lU522c core-prim . string-append) (lU522b core-prim . string->symbol) (lU522a core-prim . string->number) (lU5229 core-prim . string->list) (lU5228 core-prim . string) (lU5227 core-prim . sqrt) (lU5226 core-prim . sin) (lU5225 core-prim . round) (lU5224 core-prim . reverse) (lU5223 core-prim . real?) (lU5222 core-prim . real-valued?) (lU5221 core-prim . real-part) (lU5220 core-prim . rationalize) (lU521f core-prim . rational?) (lU521e core-prim . rational-valued?) (lU521d core-prim . procedure?) (lU521c core-prim . positive?) (lU521b core-prim . pair?) (lU521a core-prim . odd?) (lU5219 core-prim . numerator) (lU5218 core-prim . number?) (lU5217 core-prim . number->string) (lU5216 core-prim . null?) (lU5215 core-prim . not) (lU5214 core-prim . negative?) (lU5213 core-prim . nan?) (lU5212 core-prim . min) (lU5211 core-prim . max) (lU5210 core-prim . map) (lU520f core-prim . make-vector) (lU520e core-prim . make-string) (lU520d core-prim . make-rectangular) (lU520c core-prim . make-polar) (lU520b core-prim . magnitude) (lU520a core-prim . log) (lU5209 core-prim . list?) (lU5208 core-prim . list-tail) (lU5207 core-prim . list-ref) (lU5206 core-prim . list->vector) (lU5205 core-prim . list->string) (lU5204 core-prim . list) (lU5203 core-prim . length) (lU5202 core-prim . lcm) (lU5201 core-prim . integer?) (lU5200 core-prim . integer-valued?) (lU51ff core-prim . integer->char) (lU51fe core-prim . infinite?) (lU51fd core-prim . inexact?) (lU51fc core-prim . inexact) (lU51fb core-prim . imag-part) (lU51fa core-prim . gcd) (lU51f9 core-prim . for-each) (lU51f8 core-prim . floor) (lU51f7 core-prim . finite?) (lU51f6 core-prim . expt) (lU51f5 core-prim . exp) (lU51f4 core-prim . exact?) (lU51f3 core-prim . exact-integer-sqrt) (lU51f2 core-prim . exact) (lU51f1 core-prim . even?) (lU51f0 core-prim . error) (lU51ef core-prim . eqv?) (lU51ee core-prim . equal?) (lU51ed core-prim . eq?) (lU51ec core-prim . dynamic-wind) (lU51eb core-prim . div0-and-mod0) (lU51ea core-prim . mod0) (lU51e9 core-prim . div0) (lU51e8 core-prim . div-and-mod) (lU51e7 core-prim . mod) (lU51e6 core-prim . div) (lU51e5 core-prim . denominator) (lU51e4 core-prim . cos) (lU51e3 core-prim . cons) (lU51e2 core-prim . complex?) (lU51e1 core-prim . char?) (lU51e0 core-prim . char>?) (lU51df core-prim . char>=?) (lU51de core-prim . char=?) (lU51dd core-prim . char<?) (lU51dc core-prim . char<=?) (lU51db core-prim . char->integer) (lU51da core-prim . ceiling) (lU51d9 core-prim . call-with-values) (lU51d8 core-prim . call/cc) (lU51d7 core-prim . call-with-current-continuation) (lU51d6 core-prim . cddddr) (lU51d5 core-prim . cdddar) (lU51d4 core-prim . cddadr) (lU51d3 core-prim . cddaar) (lU51d2 core-prim . cdaddr) (lU51d1 core-prim . cdadar) (lU51d0 core-prim . cdaadr) (lU51cf core-prim . cdaaar) (lU51ce core-prim . cadddr) (lU51cd core-prim . caddar) (lU51cc core-prim . cadadr) (lU51cb core-prim . cadaar) (lU51ca core-prim . caaddr) (lU51c9 core-prim . caadar) (lU51c8 core-prim . caaadr) (lU51c7 core-prim . caaaar) (lU51c6 core-prim . cdddr) (lU51c5 core-prim . cddar) (lU51c4 core-prim . cdadr) (lU51c3 core-prim . cdaar) (lU51c2 core-prim . caddr) (lU51c1 core-prim . cadar) (lU51c0 core-prim . caadr) (lU51bf core-prim . caaar) (lU51be core-prim . cddr) (lU51bd core-prim . cdar) (lU51bc core-prim . cadr) (lU51bb core-prim . caar) (lU51ba core-prim . cdr) (lU51b9 core-prim . car) (lU51b8 core-prim . boolean?) (lU51b7 core-prim . boolean=?) (lU51b6 core-prim . atan) (lU51b5 core-prim . assertion-violation) (lU31a8 core-prim . assertion-error) (lU51b4 core-prim . asin) (lU51b3 core-prim . apply) (lU51b2 core-prim . append) (lU51b1 core-prim . angle) (lU51b0 core-prim . acos) (lU51af core-prim . abs) (lU51ae core-prim . /) (lU51ad core-prim . *) (lU51ac core-prim . -) (lU51ab core-prim . +) (lU51aa core-prim . >=) (lU51a9 core-prim . >) (lU51a8 core-prim . =) (lU51a7 core-prim . <=) (lU51a6 core-prim . <) (lU51a5 core-prim . library) (lU51a4 $core-rtd &no-nans-rtd &no-nans-rcd) (lU51a3 $core-rtd &no-infinities-rtd &no-infinities-rcd) (lU51a2 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (lU51a1 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (lU51a0 $core-rtd &i/o-port-rtd &i/o-port-rcd) (lU519f $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (lU519e $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (lU519d $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (lU519c $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (lU519b $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (lU519a $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (lU5199 $core-rtd &i/o-write-rtd &i/o-write-rcd) (lU5198 $core-rtd &i/o-read-rtd &i/o-read-rcd) (lU5197 $core-rtd &i/o-rtd &i/o-rcd) (lU5196 $core-rtd &undefined-rtd &undefined-rcd) (lU5195 $core-rtd &syntax-rtd &syntax-rcd) (lU5194 $core-rtd &lexical-rtd &lexical-rcd) (lU5193 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (lU5192 $core-rtd &non-continuable-rtd &non-continuable-rcd) (lU5191 $core-rtd &who-rtd &who-rcd) (lU5190 $core-rtd &irritants-rtd &irritants-rcd) (lU518f $core-rtd &assertion-rtd &assertion-rcd) (lU518e $core-rtd &violation-rtd &violation-rcd) (lU518d $core-rtd &error-rtd &error-rcd) (lU518c $core-rtd &serious-rtd &serious-rcd) (lU518b $core-rtd &warning-rtd &warning-rcd) (lU518a $core-rtd &message-rtd &message-rcd) (lU5189 $core-rtd &condition-rtd &condition-rcd) (lU5188 macro . define-condition-type) (lU5187 macro . define-enumeration) (lU5186 macro . define-record-type) (lU5185 macro . parent-rtd) (lU5184 macro . nongenerative) (lU5183 macro . opaque) (lU5182 macro . sealed) (lU5181 macro . protocol) (lU5180 macro . parent) (lU517f macro . immutable) (lU517e macro . mutable) (lU517d macro . fields) (lU517c macro . error-handling-mode) (lU517b macro . file-options) (lU517a macro . buffer-mode) (lU5179 macro . eol-style) (lU5178 macro . guard) (lU5177 macro . trace-define) (lU5176 macro . trace-lambda) (lU5175 macro . unsyntax-splicing) (lU5174 macro . unsyntax) (lU5173 macro . unquote-splicing) (lU5172 macro . unquote) (lU5171 macro . _) (lU5170 macro . else) (lU516f macro . =>) (lU516e macro . ...) (lU516d macro . assert) (lU516c macro . endianness) (lU516b macro . delay) (lU516a macro . time) (lU5169 macro . do) (lU5168 macro . cond) (lU5167 macro . let*) (lU5166 macro . let*-values) (lU5165 macro . let-values) (lU5164 macro . identifier-syntax) (lU5163 macro . with-syntax) (lU5162 macro . quasisyntax) (lU5161 macro . quasiquote) (lU5160 macro . syntax-rules) (lU515f macro . include) (lU515e macro . define-struct) (lU515d core-macro . record-constructor-descriptor) (lU515c core-macro . record-type-descriptor) (lU515b macro . case) (lU515a macro . parameterize) (lU5159 macro . unless) (lU5158 macro . when) (lU5157 core-macro . or) (lU5156 core-macro . and) (lU5155 core-macro . if) (lU5154 core-macro . let) (lU5153 core-macro . letrec*) (lU5152 core-macro . letrec) (lU5151 core-macro . type-descriptor) (lU5150 core-macro . case-lambda) (lU514f core-macro . lambda) (lU514e core-macro . syntax) (lU514d core-macro . syntax-case) (lU514c core-macro . quote) (lU514b core-macro . foreign-call) (lU514a letrec-syntax) (lU5149 let-syntax) (lU5148 set!) (lU5147 import) (lU5146 begin) (lU5145 module) (lU5144 define-syntax) (lU5143 define)) values values '#f '#f '#f '#f) (lU2cdc@lU2b28@install-library 'lU5493 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . lU5472) (eval-core . lU5471) (set-symbol-value! . lU5470) (symbol-value . lU546f) (gensym . lU546e) (void . lU546d)) '() values values '#f '#f '#f '#f) (lU2cdc@lU2b28@install-library 'lU5494 '(mosh) '() '() '() '() '((set-symbol-value! . lU5470) (symbol-value . lU546f) (gensym . lU546e) (regexp? . lU546b) (read-line . lU546a) (ungensym . lU5468) (alist->eq-hash-table . lU5467) (assoc-ref . lU5466) (print . lU5465) (format . lU5464) (host-os . lU5463) (library-path . lU2b07) (standard-library-path . lU5462) (file-newer? . lU5461) (stat-mtime . lU5460) (digit->integer . lU545b) (call-with-string-input-port . lU545a) (call-with-string-io . lU5459) (string-split . lU5458) (bytevector-for-each . lU5457) (string->regexp . lU5456) (rxmatch . lU5455) (regexp-replace-all . lU5454) (hashtable-for-each . lU5453) (set-current-directory! . lU544e) (expand-path . lU544d) (current-directory . lU544c) (p . lU540b) (get-timeofday . lU53f2) (get-command-line . lU53f1) (sys-display . lU53f0) (whereis . lU53ef) (register . lU53ee) (vm-join! . lU53ed) (vm-set-value! . lU53ec) (vm? . lU53eb) (main-vm? . lU53ea) (vm-eval . lU53e9) (vm-self . lU53e8) (vm-start! . lU53e7) (make-vm . lU53e6) (mutex-try-lock! . lU53e5) (mutex-unlock! . lU53e4) (mutex-lock! . lU53e3) (mutex? . lU53e2) (make-mutex . lU53e1) (condition-variable-notify-all! . lU53e0) (condition-variable-notify! . lU53df) (condition-variable-wait! . lU53de) (make-condition-variable . lU53dd) (mosh-executable-path . lU53dc) (make-file-options . lU53db) (for-each-with-index . lU53da) (source-info . lU53d9) (make-compiler-instruction . lU53d4) (make-instruction . lU53d3) (set-source-info! . lU53d2) (bignum? . lU53d1) (fast-equal? . lU53d0) (fasl-read . lU53cf) (fasl-write . lU53ce) (time-usage . lU53cd) (os-constant . lU53cc) (time . lU516a) (include . lU515f)) '() values values '#f '#f '#f '#f) (lU2cdc@lU2b28@install-library 'lU5495 '(system) '() '() '() '() '((gensym-prefix-set! . lU5469) (write-to-file . lU545f) (file->sexp-list . lU545e) (file->list . lU545d) (file->string . lU545c) (mosh-cache-dir . lU28f1) (call-process . lU5452) (local-tz-offset . lU5451) (microseconds . lU5450) (directory-list . lU544f) (expand-path . lU544d) (%spawn . lU544b) (%waitpid . lU544a) (simple-struct-name . lU5449) (simple-struct-set! . lU5448) (simple-struct-ref . lU5447) (make-simple-struct . lU5446) (simple-struct? . lU5445) (pointer-ref-c-int64 . lU5444) (pointer-ref-c-int32 . lU5443) (pointer-ref-c-int16 . lU5442) (pointer-ref-c-int8 . lU5441) (pointer-ref-c-uint64 . lU5440) (pointer-ref-c-uint32 . lU543f) (pointer-ref-c-uint16 . lU543e) (pointer-ref-c-uint8 . lU543d) (pointer-set-c-uint64! . lU543c) (pointer-set-c-uint32! . lU543b) (pointer-set-c-uint16! . lU543a) (pointer-set-c-uint8! . lU5439) (pointer-set-c-int64! . lU5438) (pointer-set-c-int32! . lU5437) (pointer-set-c-int16! . lU5436) (pointer-set-c-int8! . lU5435) (pointer-set-c-pointer! . lU5434) (pointer-set-c-double! . lU5433) (pointer-set-c-float! . lU5432) (pointer-set-c-long-long! . lU5431) (pointer-set-c-long! . lU5430) (pointer-set-c-int! . lU542f) (pointer-set-c-short! . lU542e) (pointer-set-c-char! . lU542d) (pointer-ref-c-pointer . lU542c) (pointer-ref-c-double . lU542b) (pointer-ref-c-float . lU542a) (pointer-ref-c-unsigned-long-long . lU5429) (pointer-ref-c-signed-long-long . lU5428) (pointer-ref-c-unsigned-long . lU5427) (pointer-ref-c-signed-long . lU5426) (pointer-ref-c-unsigned-int . lU5425) (pointer-ref-c-signed-int . lU5424) (pointer-ref-c-unsigned-short . lU5423) (pointer-ref-c-signed-short . lU5422) (pointer-ref-c-unsigned-char . lU5421) (pointer-ref-c-signed-char . lU5420) (pointer->integer . lU541f) (integer->pointer . lU541e) (pointer? . lU541d) (shared-errno . lU541c) (get-c-address . lU541b) (obj->integer . lU541a) (u8-list->c-procedure . lU5419) (%ffi-free-c-callback-trampoline . lU5418) (%ffi-make-c-callback-trampoline . lU5417) (%ffi-free . lU5416) (%ffi-malloc . lU5415) (%ffi-supported? . lU5414) (%ffi-pointer->string . lU5413) (%ffi-call . lU5412) (%ffi-lookup . lU5411) (%ffi-open . lU5410) (null-terminated-utf8->string . lU540f) (null-terminated-bytevector->string . lU540e) (%fork . lU540d) (%pipe . lU540c) (open-output-string . lU540a) (get-output-string . lU5409) (file-stat-ctime . lU5408) (file-stat-atime . lU5407) (file-stat-mtime . lU5406) (file-size-in-bytes . lU5405) (file-writable? . lU5404) (file-executable? . lU5403) (file-readable? . lU5402) (file-regular? . lU5401) (file-symbolic-link? . lU5400) (file-directory? . lU53ff) (create-symbolic-link . lU53fe) (rename-file . lU53fd) (delete-directory . lU53fc) (create-directory . lU53fb) (create-mosh-cache-dir . lU53fa) (get-environment-variables . lU53f9) (current-exception-handler . lU53f8) (get-environment-variable . lU53f7) (join-wraps . lU53f6) (id->real-label . lU53f5) (same-marks? . lU53f4) (same-marks*? . lU53f3) (instruction? . lU53d8) (instruction->integer . lU53d7) (instruction->symbol . lU53d6) (closure->list . lU53d5) (disasm . lU53cb) (make-parameter . lU28ef) (socket-port . lU53ca) (socket-shutdown . lU53c9) (socket-close . lU53c8) (socket-send . lU53c7) (socket-recv! . lU53c6) (socket-recv . lU53c5) (make-server-socket . lU53c4) (make-client-socket . lU53c3) (socket-accept . lU53c2) (socket? . lU53c1) (parameterize . lU515a)) '() values values '#f '#f '#f '#f)))
(begin (set! lU4fd3@ref (unspecified)) (set! lU4fd5@x* (unspecified)) (set! lU4fd7@add-library-path! (unspecified)) (set! lU4fd9@parse-and-add-library-path (unspecified)) (set! lU4fdb@rpad (unspecified)) (set! lU4fdd@condition-printer (unspecified)) (set! lU4fdf@record->field-alist (unspecified)) (set! lU4fe1@map-with-index (unspecified)) (set! lU4fe3@repl (unspecified)) (set! lU4fe5@trace-printer (unspecified)) (set! lU4fe7@command-line (unspecified)) (set! lU4fe9@local-library-path (unspecified)) (set! lU4feb@load/args (unspecified)) (set! lU4fed@load (unspecified)) (set! lU4fef@ironscheme-build (unspecified)) (set! lU4ff1@eval-top-level (unspecified)) (set! lU4ff3@compile-system-libraries (unspecified)) (set! lU4ff5@compile (unspecified)) (set! lU4ff7@compile->closure (unspecified)) (set! lU4ff9@pre-compile-r6rs-file (unspecified)) (set! lU4ffb@load-r6rs-top-level (unspecified)) (set! lU4ffd@load-r6rs-top-level-sexp (unspecified)) (set! lU4fff@prefix-inc (unspecified)) (set! lU5001@prefix-inc! (unspecified)) (set! lU4fd3@ref (lambda (lU503c@rtd lU503d@i lU503e@x) (let ((lU5042@val ((record-accessor lU503c@rtd lU503d@i) lU503e@x))) (if (symbol? lU5042@val) (ungensym lU5042@val) lU5042@val)))) (set! lU512a@lU4fd3@ref lU4fd3@ref) (set! lU4fd5@x* '()) (set! lU512b@lU4fd5@x* lU4fd5@x*) (set! lU4fd7@add-library-path! (lambda (lU5044@path) (lU2ccc@lU2b08@library-path (append (lU2ccc@lU2b08@library-path) (list lU5044@path))))) (set! lU512c@lU4fd7@add-library-path! lU4fd7@add-library-path!) (set! lU4fd9@parse-and-add-library-path (lambda (lU5046@paths lU5047@message) (let ((lU504b@separator '#f)) (begin (set! lU504b@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((lU504c@t lU5046@paths)) (if lU504c@t ((lambda (lU504e@paths) (for-each (lambda (lU5050@path) (if (file-exists? lU5050@path) (lU4fd7@add-library-path! (expand-path lU5050@path)) (format (current-error-port) lU5047@message lU5050@path))) (string-split lU504e@paths lU504b@separator))) lU504c@t) (void))))))) (set! lU512d@lU4fd9@parse-and-add-library-path lU4fd9@parse-and-add-library-path) (set! lU4fdb@rpad (lambda (lU5052@str lU5053@pad lU5054@n) (let ((lU5058@rest (- lU5054@n (string-length (format '"~a" lU5052@str))))) (let lU505e@loop ((lU505a@rest lU5058@rest) (lU505b@ret (format '"~a" lU5052@str))) (if (<= lU505a@rest '0) lU505b@ret (lU505e@loop (- lU505a@rest '1) (string-append lU505b@ret lU5053@pad))))))) (set! lU512e@lU4fdb@rpad lU4fdb@rpad) (set! lU4fdd@condition-printer (lambda (lU5060@e lU5061@port) (let ((lU5065@max-condition-len '#f)) (begin (set! lU5065@max-condition-len (apply max (map (lambda (lU5076@c) (string-length (symbol->string (record-type-name (record-rtd lU5076@c))))) (simple-conditions lU5060@e)))) (begin (display '" Condition components:\n" lU5061@port) (for-each-with-index (lambda (lU5066@i lU5067@x) (let ((lU506a@rtd (record-rtd lU5067@x)) (lU506b@fields-alist (lU4fdf@record->field-alist lU5067@x))) (begin (format lU5061@port '" ~d. ~a" (+ lU5066@i '1) (lU4fdb@rpad (symbol->string (record-type-name lU506a@rtd)) '" " lU5065@max-condition-len)) (if (null? lU506b@fields-alist) (newline lU5061@port) (void)) (let lU5072@loop ((lU506e@first '#t) (lU506f@fields-alist lU506b@fields-alist)) (if (null? lU506f@fields-alist) '() (let ((lU5074@field (car lU506f@fields-alist))) (begin (if (not lU506e@first) (display (lU4fdb@rpad '"" '" " (+ '4 lU5065@max-condition-len)) lU5061@port) (void)) (display '"       " lU5061@port) (display (car lU5074@field) lU5061@port) (display '": " lU5061@port) (write (cdr lU5074@field) lU5061@port) (newline lU5061@port) (lU5072@loop '#f (cdr lU506f@fields-alist))))))))) (simple-conditions lU5060@e))))))) (set! lU512f@lU4fdd@condition-printer lU4fdd@condition-printer) (set! lU4fdf@record->field-alist (lambda (lU5078@r) (let ((lU507b@ref '#f)) (begin (set! lU507b@ref (lambda (lU5086@rtd lU5087@i lU5088@x) (let ((lU508c@val ((record-accessor lU5086@rtd lU5087@i) lU5088@x))) (if (symbol? lU508c@val) (ungensym lU508c@val) lU508c@val)))) (let lU5080@loop ((lU507c@ret '()) (lU507d@rtd (record-rtd lU5078@r))) (if lU507d@rtd (lU5080@loop (append lU507c@ret (lU4fe1@map-with-index (lambda (lU5082@i lU5083@field) (cons lU5083@field (lU507b@ref lU507d@rtd lU5082@i lU5078@r))) (vector->list (record-type-field-names lU507d@rtd)))) (record-type-parent lU507d@rtd)) lU507c@ret)))))) (set! lU5130@lU4fdf@record->field-alist lU4fdf@record->field-alist) (set! lU4fe1@map-with-index (lambda (lU508e@proc lU508f@lst) (let lU5098@loop ((lU5092@i '0) (lU5093@lst lU508f@lst) (lU5094@ret '())) (if (null? lU5093@lst) (reverse lU5094@ret) (lU5098@loop (+ lU5092@i '1) (cdr lU5093@lst) (cons (lU508e@proc lU5092@i (car lU5093@lst)) lU5094@ret)))))) (set! lU5131@lU4fe1@map-with-index lU4fe1@map-with-index) (set! lU4fe3@repl (lambda lU509a@x (let ((lU509d@rec '#f)) (begin (set! lU509d@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (lU50a0@lU509e) (lambda () (with-exception-handler (lambda (lU50a2@e) ((call/cc (lambda (lU50a4@lU509f) (lU50a0@lU509e (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? lU50a2@e) (lU4fdd@condition-printer lU50a2@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" lU50a2@e))) (lU50a4@lU509f (lambda () (raise-continuable lU50a2@e)))))))))) (lambda () (let lU50aa@loop ((lU50a6@line (get-line (current-input-port))) (lU50a7@accum '"")) (let ((lU50ad@parentheses-ok? '#f) (lU50af@eval-string-print '#f)) (begin (set! lU50ad@parentheses-ok? (lambda (lU50b4@text) (let lU50bc@loop ((lU50b6@chars (string->list lU50b4@text)) (lU50b7@p0 '0) (lU50b8@p1 '0)) (if (null? lU50b6@chars) (= '0 lU50b7@p0 lU50b8@p1) (let ((lU50be@t (car lU50b6@chars))) (if (memv lU50be@t '(#\()) (lU50bc@loop (cdr lU50b6@chars) (+ lU50b7@p0 '1) lU50b8@p1) (if (memv lU50be@t '(#\))) (lU50bc@loop (cdr lU50b6@chars) (- lU50b7@p0 '1) lU50b8@p1) (if (memv lU50be@t '(#\[)) (lU50bc@loop (cdr lU50b6@chars) lU50b7@p0 (+ lU50b8@p1 '1)) (if (memv lU50be@t '(#\])) (lU50bc@loop (cdr lU50b6@chars) lU50b7@p0 (- lU50b8@p1 '1)) (lU50bc@loop (cdr lU50b6@chars) lU50b7@p0 lU50b8@p1)))))))))) (set! lU50af@eval-string-print (lambda (lU50b2@text) (if (not (or (string=? '"\n" lU50b2@text) (= '0 (string-length lU50b2@text)))) (write (lU4ff1@eval-top-level (call-with-port (open-string-input-port lU50b2@text) read))) (void)))) (if (eof-object? lU50a6@line) (begin (lU50af@eval-string-print lU50a7@accum) (exit)) (let ((lU50b0@current (string-append lU50a7@accum lU50a6@line))) (if (lU50ad@parentheses-ok? lU50b0@current) (lU50af@eval-string-print lU50b0@current) (lU50aa@loop (get-line (current-input-port)) lU50b0@current))))))))))))) (newline) (lU509d@rec)))) (lU509d@rec))))) (set! lU5132@lU4fe3@repl lU4fe3@repl) (set! lU4fe5@trace-printer (lU2a12@lU28f0@make-parameter write)) (set! lU5133@lU4fe5@trace-printer lU4fe5@trace-printer) (set! lU4fe7@command-line (lU2a12@lU28f0@make-parameter (get-command-line))) (set! lU5134@lU4fe7@command-line lU4fe7@command-line) (set! lU4fe9@local-library-path (lambda (lU50c0@filename) (lU2ccc@lU2b08@library-path))) (set! lU5135@lU4fe9@local-library-path lU4fe9@local-library-path) (set! lU4feb@load/args (lambda (lU50c2@filename . lU50c4@args) (begin (apply lU4ffb@load-r6rs-top-level lU50c2@filename 'load lU50c4@args) (void)))) (set! lU5136@lU4feb@load/args lU4feb@load/args) (set! lU4fed@load (lambda (lU50c6@filename) (begin (apply lU4ffb@load-r6rs-top-level lU50c6@filename 'load (lU4fe7@command-line)) (void)))) (set! lU5137@lU4fed@load lU4fed@load) (set! lU4fef@ironscheme-build (lambda () (lU4fed@load '"ironscheme-buildscript.ss"))) (set! lU5138@lU4fef@ironscheme-build lU4fef@ironscheme-build) (set! lU4ff1@eval-top-level (lambda (lU50c8@x) (lU4bf9@lU318f@eval lU50c8@x (lU4c10@lU31bd@interaction-environment)))) (set! lU5139@lU4ff1@eval-top-level lU4ff1@eval-top-level) (set! lU4ff3@compile-system-libraries (lambda () (lU4ff1@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! lU513a@lU4ff3@compile-system-libraries lU4ff3@compile-system-libraries) (set! lU4ff5@compile (lambda (lU50ca@filename) (lU4ffb@load-r6rs-top-level lU50ca@filename 'compile))) (set! lU513b@lU4ff5@compile lU4ff5@compile) (set! lU4ff7@compile->closure (lambda (lU50cc@filename) (lU4ffb@load-r6rs-top-level lU50cc@filename 'closure))) (set! lU513c@lU4ff7@compile->closure lU4ff7@compile->closure) (set! lU4ff9@pre-compile-r6rs-file (lambda (lU50ce@filename) (lU4ffb@load-r6rs-top-level lU50ce@filename 'compile))) (set! lU513d@lU4ff9@pre-compile-r6rs-file lU4ff9@pre-compile-r6rs-file) (set! lU4ffb@load-r6rs-top-level (lambda (lU50d0@filename lU50d1@how . lU50d4@args) (begin (lU2ccc@lU2b08@library-path (lU4fe9@local-library-path lU50d0@filename)) (let ((lU50d6@x* (with-input-from-file lU50d0@filename (lambda () (let lU50d8@f () (let ((lU50da@x (lU2a04@lU28d4@read-annotated))) (if (eof-object? lU50da@x) '() (cons lU50da@x (lU50d8@f))))))))) (let ((lU50dc@t lU50d1@how)) (if (memv lU50dc@t '(closure)) (lU4c0f@lU31bb@pre-compile-r6rs-top-level lU50d6@x*) (if (memv lU50dc@t '(load)) (begin (lU4fe7@command-line (cons lU50d0@filename (car lU50d4@args))) (lU2a13@lU28f2@mosh-cache-dir (create-mosh-cache-dir)) (if (lU2a13@lU28f2@mosh-cache-dir) (gensym-prefix-set! (lU5001@prefix-inc! (string-append (lU2a13@lU28f2@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (lU50de@file) ((call/cc (lambda (lU50e2@lU50e0) (lambda () (with-exception-handler (lambda (lU50e4@c) ((call/cc (lambda (lU50e6@lU50e1) (lU50e2@lU50e0 (lambda () (if '#t '#t (lU50e6@lU50e1 (lambda () (raise-continuable lU50e4@c)))))))))) (lambda () (delete-file (string-append (lU2a13@lU28f2@mosh-cache-dir) '"/" lU50de@file))))))))) (directory-list (lU2a13@lU28f2@mosh-cache-dir))) (void)) (let ((lU50e8@compiled (lU4c0e@lU31b9@compile-r6rs-top-level lU50d6@x*))) (begin (if (and (lU2a13@lU28f2@mosh-cache-dir) (not (symbol-value '%disable-acc))) (lU2cd0@lU2b10@serialize-all lU2a0d@lU28e6@serialize-library lU2a69@lU2a22@compile-core-expr) (void)) (lU50e8@compiled)))) (if (memv lU50dc@t '(compile)) (begin (lU4c0e@lU31b9@compile-r6rs-top-level lU50d6@x*) (lU2cd0@lU2b10@serialize-all lU2a0d@lU28e6@serialize-library lU2a69@lU2a22@compile-core-expr)) (if '#f '#f (void)))))))))) (set! lU513e@lU4ffb@load-r6rs-top-level lU4ffb@load-r6rs-top-level) (set! lU4ffd@load-r6rs-top-level-sexp (lambda (lU50ea@import-spec lU50eb@thunk) (let ((lU50f6@lU50ef lU2ccc@lU2b08@library-path) (lU50f7@lU50f1 lU2a13@lU28f2@mosh-cache-dir) (lU50f8@lU50f3 (lU4fe9@local-library-path '"")) (lU50f9@lU50f5 (create-mosh-cache-dir))) (let ((lU50fe@swap (lambda () (begin (let ((lU5100@t (lU50f6@lU50ef))) (begin (lU50f6@lU50ef lU50f8@lU50f3) (set! lU50f8@lU50f3 lU5100@t))) (let ((lU5102@t (lU50f7@lU50f1))) (begin (lU50f7@lU50f1 lU50f9@lU50f5) (set! lU50f9@lU50f5 lU5102@t))))))) (dynamic-wind lU50fe@swap (lambda () (begin (if (lU2a13@lU28f2@mosh-cache-dir) (gensym-prefix-set! (lU5001@prefix-inc! (string-append (lU2a13@lU28f2@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((lU5108@lU5105 lU4fe7@command-line) (lU5109@lU5107 '())) (let ((lU510c@swap (lambda () (let ((lU510e@t (lU5108@lU5105))) (begin (lU5108@lU5105 lU5109@lU5107) (set! lU5109@lU5107 lU510e@t)))))) (dynamic-wind lU510c@swap (lambda () ((lU4c0e@lU31b9@compile-r6rs-top-level (list (cons 'import lU50ea@import-spec) (list lU50eb@thunk))))) lU510c@swap))))) lU50fe@swap))))) (set! lU513f@lU4ffd@load-r6rs-top-level-sexp lU4ffd@load-r6rs-top-level-sexp) (set! lU4fff@prefix-inc (lambda (lU5110@prefix-string) (let ((lU5112@prefix (symbol->string lU5110@prefix-string))) (let ((lU5114@len (string-length lU5112@prefix))) (let lU511c@loop ((lU5116@i (- lU5114@len '1)) (lU5117@carry? '#t) (lU5118@accum '())) (if (< lU5116@i '0) (string->symbol (list->string (if lU5117@carry? (cons '#\a lU5118@accum) lU5118@accum))) (if lU5117@carry? (let ((lU511e@next-integer (+ '1 (char->integer (string-ref lU5112@prefix lU5116@i))))) (if (= lU511e@next-integer '123) (lU511c@loop (- lU5116@i '1) '#f (cons '#\A lU5118@accum)) (if (= lU511e@next-integer '91) (lU511c@loop (- lU5116@i '1) '#t (cons '#\a lU5118@accum)) (lU511c@loop (- lU5116@i '1) '#f (cons (integer->char lU511e@next-integer) lU5118@accum))))) (lU511c@loop (- lU5116@i '1) '#f (cons (string-ref lU5112@prefix lU5116@i) lU5118@accum))))))))) (set! lU5140@lU4fff@prefix-inc lU4fff@prefix-inc) (set! lU5001@prefix-inc! (lambda (lU5120@file) (begin (if (not (file-exists? lU5120@file)) (call-with-output-file lU5120@file (lambda (lU5122@port) (write 'd lU5122@port))) (void)) (let ((lU5124@prefix (call-with-input-file lU5120@file read))) (if (main-vm?) (let ((lU5126@next-prefix (lU4fff@prefix-inc lU5124@prefix))) (begin (call-with-port (open-file-output-port lU5120@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (lU5128@port) (write lU5126@next-prefix lU5128@port))) lU5124@prefix)) lU5124@prefix))))) (set! lU5141@lU5001@prefix-inc! lU5001@prefix-inc!) (begin (lU2cd1@lU2b12@current-precompiled-library-loader lU2a0e@lU28e8@load-serialized-library) (set-symbol-value! 'load lU4fed@load) (set-symbol-value! 'pre-compile-r6rs-file lU4ff9@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs lU4ff1@eval-top-level) (set-symbol-value! 'int-env-syms lU4bf0@lU317d@interaction-environment-symbols) (set-symbol-value! 'expanded2core lU2a68@lU2a20@expanded->core) (set-symbol-value! 'trace-printer lU4fe5@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (lU5002@c) (condition (lU4f30@lU4d3a@make-non-continuable-violation) (lU4f26@lU4d21@make-who-condition 'raise) (lU4eea@lU4c82@make-message-condition '"returned from non-continuable exception") (lU4f1c@lU4d06@make-irritants-condition (list lU5002@c))))) (set-symbol-value! 'invoke-library-by-spec lU2ce0@lU2b30@invoke-library-by-spec) (lU4fd9@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (lU4fd9@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (lU4fd7@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (lU4fd7@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (lU4fd7@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((lU5004@prefix (lambda (lU5006@ext lU5007@ls) (append (map (lambda (lU500a@x) (string-append lU5006@ext lU500a@x)) lU5007@ls) lU5007@ls)))) (lU2ccd@lU2b0a@library-extensions (lU5004@prefix '".mosh" (lU2ccd@lU2b0a@library-extensions)))) (current-exception-handler (lambda (lU500c@c) (if (condition? lU500c@c) (lU4fdd@condition-printer lU500c@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" lU500c@c)))) (if ((call/cc (lambda (lU5010@lU500e) (lambda () (with-exception-handler (lambda (lU5012@c) ((call/cc (lambda (lU5014@lU500f) (lU5010@lU500e (lambda () (if '#t '#f (lU5014@lU500f (lambda () (raise-continuable lU5012@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (lU4ffd@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (lU4fe7@command-line)) (let ((lU501e@lU5017 lU4fe7@command-line) (lU501f@lU5019 lU2a13@lU28f2@mosh-cache-dir) (lU5020@lU501b '()) (lU5021@lU501d (create-mosh-cache-dir))) (let ((lU5026@swap (lambda () (begin (let ((lU5028@t (lU501e@lU5017))) (begin (lU501e@lU5017 lU5020@lU501b) (set! lU5020@lU501b lU5028@t))) (let ((lU502a@t (lU501f@lU5019))) (begin (lU501f@lU5019 lU5021@lU501d) (set! lU5021@lU501d lU502a@t))))))) (dynamic-wind lU5026@swap (lambda () (begin (if (lU2a13@lU28f2@mosh-cache-dir) (gensym-prefix-set! (lU5001@prefix-inc! (string-append (lU2a13@lU28f2@mosh-cache-dir) '"/prefix.txt"))) (void)) (lU4fe3@repl))) lU5026@swap))) (begin (lU2ccc@lU2b08@library-path (lU4fe9@local-library-path (car (lU4fe7@command-line)))) (set! lU4fd5@x* (with-input-from-file (car (lU4fe7@command-line)) (lambda () (let lU502c@f () (let ((lU502e@x (lU2a04@lU28d4@read-annotated))) (if (eof-object? lU502e@x) '() (cons lU502e@x (lU502c@f)))))))) (lU4fe7@command-line (cons (car (lU4fe7@command-line)) (cdr (lU4fe7@command-line)))) (lU2a13@lU28f2@mosh-cache-dir (create-mosh-cache-dir)) (if (lU2a13@lU28f2@mosh-cache-dir) (gensym-prefix-set! (lU5001@prefix-inc! (string-append (lU2a13@lU28f2@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (lU5030@file) ((call/cc (lambda (lU5034@lU5032) (lambda () (with-exception-handler (lambda (lU5036@c) ((call/cc (lambda (lU5038@lU5033) (lU5034@lU5032 (lambda () (if '#t '#t (lU5038@lU5033 (lambda () (raise-continuable lU5036@c)))))))))) (lambda () (delete-file (string-append (lU2a13@lU28f2@mosh-cache-dir) '"/" lU5030@file))))))))) (directory-list (lU2a13@lU28f2@mosh-cache-dir))) (void)) (let ((lU503a@compiled (lU4c0e@lU31b9@compile-r6rs-top-level lU4fd5@x*))) (begin (if (and (lU2a13@lU28f2@mosh-cache-dir) (not (symbol-value '%disable-acc))) (lU2cd0@lU2b10@serialize-all lU2a0d@lU28e6@serialize-library lU2a69@lU2a22@compile-core-expr) (void)) (lU503a@compiled))))))))
