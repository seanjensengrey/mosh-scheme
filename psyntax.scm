;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! j28c3@library-file-path->cache-path (unspecified)) (set! j28c5@read-annotated (unspecified)) (set! j28c7@annotation-stripped (unspecified)) (set! j28c9@annotation? (unspecified)) (set! j28cb@annotation-source (unspecified)) (set! j28cd@annotation-expression (unspecified)) (set! j28cf@scm->fasl (unspecified)) (set! j28d1@fasl-save (unspecified)) (set! j28d3@fasl-load (unspecified)) (set! j28d5@verbose? (unspecified)) (set! j28d7@serialize-library (unspecified)) (set! j28d9@load-serialized-library (unspecified)) (set! j28db@make-record-printer (unspecified)) (set! j28dd@compile-core (unspecified)) (set! j28df@read-library-source-file (unspecified)) (set! j28e1@make-parameter (unspecified)) (set! j28e3@mosh-cache-dir (unspecified)) (set! j2979@file-options-spec (unspecified)) (set! j28c3@library-file-path->cache-path (lambda (j297a@x) (call-with-values (lambda () (open-string-output-port)) (lambda (j2980@j297d j2981@j297f) (let ((j2984@extract j2981@j297f) (j2985@p j2980@j297d)) (letrec* ((j2989@display-hex (lambda (j2992@n) (if (<= '0 j2992@n '9) (display j2992@n j2985@p) (display (integer->char (+ (char->integer '#\a) (- j2992@n '10))) j2985@p))))) (begin (let j298c@f ((j298a@ls (string-split j297a@x '#\/))) (if (not (null? j298a@ls)) (begin (display '"_" j2985@p) (for-each (lambda (j298e@c) (if (or (char<=? '#\a j298e@c '#\z) (char<=? '#\A j298e@c '#\Z) (char<=? '#\0 j298e@c '#\9) (memv j298e@c '(#\- #\. #\_ #\~))) (display j298e@c j2985@p) (begin (display '"%" j2985@p) (let ((j2990@n (char->integer j298e@c))) (begin (j2989@display-hex (quotient j2990@n '16)) (j2989@display-hex (remainder j2990@n '16))))))) (string->list (car j298a@ls))) (j298c@f (cdr j298a@ls))) (void))) (j2984@extract)))))))) (set! j29f4@j28c3@library-file-path->cache-path j28c3@library-file-path->cache-path) (set! j28c5@read-annotated read) (set! j29f5@j28c5@read-annotated j28c5@read-annotated) (set! j28c7@annotation-stripped (lambda (j2994@x) (j28cd@annotation-expression j2994@x))) (set! j29f6@j28c7@annotation-stripped j28c7@annotation-stripped) (set! j28c9@annotation? (lambda (j2996@x) (source-info j2996@x))) (set! j29f7@j28c9@annotation? j28c9@annotation?) (set! j28cb@annotation-source (lambda (j2998@x) (source-info j2998@x))) (set! j29f8@j28cb@annotation-source j28cb@annotation-source) (set! j28cd@annotation-expression (lambda (j299a@x) (if (pair? j299a@x) (cons (car j299a@x) (cdr j299a@x)) (if (procedure? j299a@x) (set-source-info! j299a@x '#f) j299a@x)))) (set! j29f9@j28cd@annotation-expression j28cd@annotation-expression) (set! j28cf@scm->fasl (lambda (j299c@filename) (string-append (j28e3@mosh-cache-dir) '"/" (j28c3@library-file-path->cache-path j299c@filename) '".mosh-fasl"))) (set! j29fa@j28cf@scm->fasl j28cf@scm->fasl) (set! j28d1@fasl-save (lambda (j299e@filename j299f@obj) (call-with-port (open-file-output-port j299e@filename) (lambda (j29a2@port) ((symbol-value 'fasl-write!) j299f@obj j29a2@port))))) (set! j29fb@j28d1@fasl-save j28d1@fasl-save) (set! j28d3@fasl-load (lambda (j29a4@filename) (call-with-port (open-file-input-port j29a4@filename) (symbol-value 'fasl-read!)))) (set! j29fc@j28d3@fasl-load j28d3@fasl-load) (set! j28d5@verbose? (symbol-value '%verbose)) (set! j29fd@j28d5@verbose? j28d5@verbose?) (set! j28d7@serialize-library (lambda (j29a6@filename j29a7@obj) (begin (if j28d5@verbose? (format (current-error-port) '"serialize-library ~a\n..." j29a6@filename) (void)) (let ((j29aa@expanded2core (symbol-value 'expanded2core))) (let ((j29ac@compile (symbol-value 'compile-w/o-halt))) (let ((j29ae@code j29a7@obj)) (let ((j29b0@pivot (cddddr (cddddr j29ae@code)))) (let ((j29b2@visit (j29ac@compile (j29aa@expanded2core (car j29b0@pivot))))) (begin (set-car! j29b0@pivot j29b2@visit) (let ((j29b4@pivot (cdr j29b0@pivot))) (let ((j29b6@invoke (j29ac@compile (j29aa@expanded2core (car j29b4@pivot))))) (set-car! j29b4@pivot j29b6@invoke))))))))) (let ((j29b8@fasl-file (j28cf@scm->fasl j29a6@filename))) (begin (if (file-exists? j29b8@fasl-file) (delete-file j29b8@fasl-file) (void)) ((call/cc (lambda (j29bc@j29ba) (lambda () (with-exception-handler (lambda (j29be@c) ((call/cc (lambda (j29c0@j29bb) (j29bc@j29ba (lambda () (if '#t (begin (if j28d5@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" j29a6@filename) (void)) (if (file-exists? j29b8@fasl-file) (delete-file j29b8@fasl-file) (void)) '#f) (j29c0@j29bb (lambda () (raise-continuable j29be@c)))))))))) (lambda () (j28d1@fasl-save j29b8@fasl-file j29a7@obj)))))))))))) (set! j29fe@j28d7@serialize-library j28d7@serialize-library) (set! j28d9@load-serialized-library (lambda (j29c2@filename j29c3@obj) (and (j28e3@mosh-cache-dir) (let ((j29c6@fasl-file (j28cf@scm->fasl j29c2@filename))) (if (and (file-exists? j29c6@fasl-file) ((symbol-value 'file-newer?) j29c6@fasl-file j29c2@filename)) (let ((j29c8@expanded2core (symbol-value 'expanded2core))) (let ((j29ca@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((j29cc@code (j28d3@fasl-load j29c6@fasl-file))) (let ((j29ce@pivot (cddddr (cddddr j29cc@code)))) (let ((j29d0@visit (car j29ce@pivot))) (let ((j29d2@visit-proc (lambda () (j29ca@eval-compiled-core j29d0@visit)))) (begin (set-car! j29ce@pivot j29d2@visit-proc) (let ((j29d4@pivot (cdr j29ce@pivot))) (let ((j29d6@invoke (car j29d4@pivot))) (begin (set-car! j29d4@pivot (lambda () (j29ca@eval-compiled-core j29d6@invoke))) (apply j29c3@obj j29cc@code))))))))))) '#f))))) (set! j29ff@j28d9@load-serialized-library j28d9@load-serialized-library) (set! j28db@make-record-printer (lambda (j29d8@name j29d9@printer) (lambda j29dc@x (begin (display '"record printer") (for-each display j29dc@x))))) (set! j2a00@j28db@make-record-printer j28db@make-record-printer) (set! j28dd@compile-core (lambda j29de@x (apply error 'comile-core '"not implementated" j29de@x))) (set! j2a01@j28dd@compile-core j28dd@compile-core) (set! j28df@read-library-source-file (lambda (j29e0@file-name) (with-input-from-file j29e0@file-name j28c5@read-annotated))) (set! j2a02@j28df@read-library-source-file j28df@read-library-source-file) (set! j28e1@make-parameter (lambda j29f0 (let ((j29f1 (length j29f0))) (if (= j29f1 '1) (apply (lambda (j29e2@x) (j28e1@make-parameter j29e2@x (lambda (j29e4@x) j29e4@x))) j29f0) (if (= j29f1 '2) (apply (lambda (j29e6@x j29e7@fender) (let ((j29ea@x (j29e7@fender j29e6@x))) (lambda j29ee (let ((j29ef (length j29ee))) (if (= j29ef '0) (apply (lambda () j29ea@x) j29ee) (if (= j29ef '1) (apply (lambda (j29ec@v) (set! j29ea@x (j29e7@fender j29ec@v))) j29ee) (error #1='apply '"invalid arg count"))))))) j29f0) (error #1# '"invalid arg count")))))) (set! j2a03@j28e1@make-parameter j28e1@make-parameter) (set! j28e3@mosh-cache-dir (j28e1@make-parameter '#f)) (set! j2a04@j28e3@mosh-cache-dir j28e3@mosh-cache-dir) (set! j2979@file-options-spec (lambda (j29f2@x) j29f2@x)) (set! j2a05@j2979@file-options-spec j2979@file-options-spec) (void))
(begin (set! j2a0b@current-primitive-locations (unspecified)) (set! j2a0d@mutable? (unspecified)) (set! j2a0f@rewriter (unspecified)) (set! j2a11@expanded->core (unspecified)) (set! j2a13@compile-core-expr (unspecified)) (set! j2a15@pretty-print (unspecified)) (set! j2a17@compile-core-expr-to-port (unspecified)) (set! j2a0b@current-primitive-locations (j2a03@j28e1@make-parameter (lambda (j2a18@x) '#f) (lambda (j2a1a@p) j2a1a@p))) (set! j2a56@j2a0b@current-primitive-locations j2a0b@current-primitive-locations) (set! j2a0d@mutable? (lambda (j2a1c@x) (or (pair? j2a1c@x) (vector? j2a1c@x) (hashtable? j2a1c@x)))) (set! j2a57@j2a0d@mutable? j2a0d@mutable?) (set! j2a0f@rewriter (lambda (j2a1e@quote-hack?) (letrec* ((j2a21@f (lambda (j2a22@x) (if (pair? j2a22@x) (let ((j2a24@t (car j2a22@x))) (if (memv j2a24@t '(quote)) (if (and j2a1e@quote-hack? (j2a0d@mutable? (cadr j2a22@x))) (let ((j2a26@g (gensym))) (begin (set-symbol-value! j2a26@g (cadr j2a22@x)) j2a26@g)) j2a22@x) (if (memv j2a24@t '(case-lambda)) (cons 'case-lambda (map (lambda (j2a28@x) (cons (car j2a28@x) (map j2a21@f (cdr j2a28@x)))) (cdr j2a22@x))) (if (memv j2a24@t '(lambda)) (cons* 'lambda (cadr j2a22@x) (map j2a21@f (cddr j2a22@x))) (if (memv j2a24@t '(letrec)) (let ((j2a2a@bindings (cadr j2a22@x)) (j2a2b@body* (cddr j2a22@x))) (let ((j2a2e@lhs* (map car j2a2a@bindings)) (j2a2f@rhs* (map cadr j2a2a@bindings))) (cons* 'letrec (map list j2a2e@lhs* (map j2a21@f j2a2f@rhs*)) (map j2a21@f j2a2b@body*)))) (if (memv j2a24@t '(letrec*)) (let ((j2a32@bindings (cadr j2a22@x)) (j2a33@body* (cddr j2a22@x))) (let ((j2a36@lhs* (map car j2a32@bindings)) (j2a37@rhs* (map cadr j2a32@bindings))) (cons* 'letrec* (map list j2a36@lhs* (map j2a21@f j2a37@rhs*)) (map j2a21@f j2a33@body*)))) (if (memv j2a24@t '(library-letrec*)) (let ((j2a3a@name (cadr j2a22@x)) (j2a3b@x (cdr j2a22@x))) (let ((j2a3e@bindings (cadr j2a3b@x)) (j2a3f@body* (cddr j2a3b@x))) (let ((j2a42@lhs* (map car j2a3e@bindings)) (j2a43@lhs** (map cadr j2a3e@bindings)) (j2a44@rhs* (map caddr j2a3e@bindings))) (cons* 'library-letrec* j2a3a@name (map list j2a42@lhs* j2a43@lhs** (map j2a21@f j2a44@rhs*)) (map j2a21@f j2a3f@body*))))) (if (memv j2a24@t '(begin)) (cons 'begin (map j2a21@f (cdr j2a22@x))) (if (memv j2a24@t '(set!)) (list 'set! (cadr j2a22@x) (j2a21@f (caddr j2a22@x))) (if (memv j2a24@t '(primitive)) (let ((j2a48@op (cadr j2a22@x))) (let ((j2a4a@t ((j2a0b@current-primitive-locations) j2a48@op))) (if j2a4a@t ((lambda (j2a4c@loc) j2a4c@loc) j2a4a@t) j2a48@op))) (if (memv j2a24@t '(define)) j2a22@x (if (list? j2a22@x) (map j2a21@f j2a22@x) (error 'rewrite '"invalid form ~s ~s" j2a22@x (list? j2a22@x)))))))))))))) j2a22@x)))) j2a21@f))) (set! j2a58@j2a0f@rewriter j2a0f@rewriter) (set! j2a11@expanded->core (lambda (j2a4e@x) ((j2a0f@rewriter '#f) j2a4e@x))) (set! j2a59@j2a11@expanded->core j2a11@expanded->core) (set! j2a13@compile-core-expr (lambda (j2a50@x) ((j2a0f@rewriter '#f) j2a50@x))) (set! j2a5a@j2a13@compile-core-expr j2a13@compile-core-expr) (set! j2a15@pretty-print write) (set! j2a5b@j2a15@pretty-print j2a15@pretty-print) (set! j2a17@compile-core-expr-to-port (lambda (j2a52@x j2a53@p) (j2a15@pretty-print ((j2a0f@rewriter '#f) j2a52@x) j2a53@p))) (set! j2a5c@j2a17@compile-core-expr-to-port j2a17@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! j2aab@make-collection (unspecified)) (set! j2aad@current-library-collection (unspecified)) (set! j2aaf@rp (unspecified)) (set! j2ab9@library? (unspecified)) (set! j2abb@library-id (unspecified)) (set! j2abd@set-library-id! (unspecified)) (set! j2abf@library-name (unspecified)) (set! j2ac1@set-library-name! (unspecified)) (set! j2ac3@library-version (unspecified)) (set! j2ac5@set-library-version! (unspecified)) (set! j2ac7@library-imp* (unspecified)) (set! j2ac9@set-library-imp*! (unspecified)) (set! j2acb@library-vis* (unspecified)) (set! j2acd@set-library-vis*! (unspecified)) (set! j2acf@library-inv* (unspecified)) (set! j2ad1@set-library-inv*! (unspecified)) (set! j2ad3@library-subst (unspecified)) (set! j2ad5@set-library-subst! (unspecified)) (set! j2ad7@library-env (unspecified)) (set! j2ad9@set-library-env! (unspecified)) (set! j2adb@library-visit-state (unspecified)) (set! j2add@set-library-visit-state! (unspecified)) (set! j2adf@library-invoke-state (unspecified)) (set! j2ae1@set-library-invoke-state! (unspecified)) (set! j2ae3@library-visit-code (unspecified)) (set! j2ae5@set-library-visit-code! (unspecified)) (set! j2ae7@library-invoke-code (unspecified)) (set! j2ae9@set-library-invoke-code! (unspecified)) (set! j2aeb@library-visible? (unspecified)) (set! j2aed@set-library-visible?! (unspecified)) (set! j2aef@library-source-file-name (unspecified)) (set! j2af1@set-library-source-file-name! (unspecified)) (set! j2af3@dummy (unspecified)) (set! j2af5@find-dependencies (unspecified)) (set! j2af7@find-library-by (unspecified)) (set! j2af9@library-path (unspecified)) (set! j2afb@library-extensions (unspecified)) (set! j2afd@library-name->file-name (unspecified)) (set! j2aff@file-locator (unspecified)) (set! j2b01@serialize-all (unspecified)) (set! j2b03@current-precompiled-library-loader (unspecified)) (set! j2b05@try-load-from-file (unspecified)) (set! j2b07@library-loader (unspecified)) (set! j2b09@current-library-expander (unspecified)) (set! j2b0b@external-pending-libraries (unspecified)) (set! j2b0d@find-external-library (unspecified)) (set! j2b0f@find-library-by-name (unspecified)) (set! j2b11@library-exists? (unspecified)) (set! j2b13@find-library-by-spec/die (unspecified)) (set! j2b15@label->binding-table (unspecified)) (set! j2b17@install-library-record (unspecified)) (set! j2b19@install-library (unspecified)) (set! j2b1b@imported-label->binding (unspecified)) (set! j2b1d@invoke-library (unspecified)) (set! j2b1f@visit-library (unspecified)) (set! j2b21@invoke-library-by-spec (unspecified)) (set! j2b23@installed-libraries (unspecified)) (set! j2b25@library-spec (unspecified)) (set! j2aab@make-collection (lambda () (let ((j2b26@set '())) (letrec* ((j2b29@set-cons (lambda (j2b2e@x j2b2f@ls) (if (memq j2b2e@x j2b2f@ls) j2b2f@ls (cons j2b2e@x j2b2f@ls))))) (lambda j2b2c (let ((j2b2d (length j2b2c))) (if (= j2b2d '0) (apply (lambda () j2b26@set) j2b2c) (if (= j2b2d '1) (apply (lambda (j2b2a@x) (set! j2b26@set (j2b29@set-cons j2b2a@x j2b26@set))) j2b2c) (error #1='apply '"invalid arg count"))))))))) (set! j2c9a@j2aab@make-collection j2aab@make-collection) (set! j2aad@current-library-collection (j2a03@j28e1@make-parameter (j2aab@make-collection) (lambda (j2b32@x) (begin (if (not (procedure? j2b32@x)) (assertion-violation 'current-library-collection '"not a procedure" j2b32@x) (void)) j2b32@x)))) (set! j2c9b@j2aad@current-library-collection j2aad@current-library-collection) (set! j2aaf@rp (j2a00@j28db@make-record-printer 'library (lambda (j2b34@x j2b35@p j2b36@wr) (begin (if (not (j2ab9@library? j2b34@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (j2ac3@library-version j2b34@x)) (j2abf@library-name j2b34@x) (append (j2abf@library-name j2b34@x) (list (j2ac3@library-version j2b34@x))))) j2b35@p))))) (set! j2c9c@j2aaf@rp j2aaf@rp) (set! j2ab9@library? (lambda (j2b3a@x) (and (simple-struct? j2b3a@x) (eq? (simple-struct-name j2b3a@x) 'library)))) (set! j2c9d@j2ab9@library? j2ab9@library?) (set! j2abb@library-id (lambda (j2b3c@x) (simple-struct-ref j2b3c@x '0))) (set! j2c9e@j2abb@library-id j2abb@library-id) (set! j2abd@set-library-id! (lambda (j2b3e@x j2b3f@val) (simple-struct-set! j2b3e@x '0 j2b3f@val))) (set! j2c9f@j2abd@set-library-id! j2abd@set-library-id!) (set! j2abf@library-name (lambda (j2b42@x) (simple-struct-ref j2b42@x '1))) (set! j2ca0@j2abf@library-name j2abf@library-name) (set! j2ac1@set-library-name! (lambda (j2b44@x j2b45@val) (simple-struct-set! j2b44@x '1 j2b45@val))) (set! j2ca1@j2ac1@set-library-name! j2ac1@set-library-name!) (set! j2ac3@library-version (lambda (j2b48@x) (simple-struct-ref j2b48@x '2))) (set! j2ca2@j2ac3@library-version j2ac3@library-version) (set! j2ac5@set-library-version! (lambda (j2b4a@x j2b4b@val) (simple-struct-set! j2b4a@x '2 j2b4b@val))) (set! j2ca3@j2ac5@set-library-version! j2ac5@set-library-version!) (set! j2ac7@library-imp* (lambda (j2b4e@x) (simple-struct-ref j2b4e@x '3))) (set! j2ca4@j2ac7@library-imp* j2ac7@library-imp*) (set! j2ac9@set-library-imp*! (lambda (j2b50@x j2b51@val) (simple-struct-set! j2b50@x '3 j2b51@val))) (set! j2ca5@j2ac9@set-library-imp*! j2ac9@set-library-imp*!) (set! j2acb@library-vis* (lambda (j2b54@x) (simple-struct-ref j2b54@x '4))) (set! j2ca6@j2acb@library-vis* j2acb@library-vis*) (set! j2acd@set-library-vis*! (lambda (j2b56@x j2b57@val) (simple-struct-set! j2b56@x '4 j2b57@val))) (set! j2ca7@j2acd@set-library-vis*! j2acd@set-library-vis*!) (set! j2acf@library-inv* (lambda (j2b5a@x) (simple-struct-ref j2b5a@x '5))) (set! j2ca8@j2acf@library-inv* j2acf@library-inv*) (set! j2ad1@set-library-inv*! (lambda (j2b5c@x j2b5d@val) (simple-struct-set! j2b5c@x '5 j2b5d@val))) (set! j2ca9@j2ad1@set-library-inv*! j2ad1@set-library-inv*!) (set! j2ad3@library-subst (lambda (j2b60@x) (simple-struct-ref j2b60@x '6))) (set! j2caa@j2ad3@library-subst j2ad3@library-subst) (set! j2ad5@set-library-subst! (lambda (j2b62@x j2b63@val) (simple-struct-set! j2b62@x '6 j2b63@val))) (set! j2cab@j2ad5@set-library-subst! j2ad5@set-library-subst!) (set! j2ad7@library-env (lambda (j2b66@x) (simple-struct-ref j2b66@x '7))) (set! j2cac@j2ad7@library-env j2ad7@library-env) (set! j2ad9@set-library-env! (lambda (j2b68@x j2b69@val) (simple-struct-set! j2b68@x '7 j2b69@val))) (set! j2cad@j2ad9@set-library-env! j2ad9@set-library-env!) (set! j2adb@library-visit-state (lambda (j2b6c@x) (simple-struct-ref j2b6c@x '8))) (set! j2cae@j2adb@library-visit-state j2adb@library-visit-state) (set! j2add@set-library-visit-state! (lambda (j2b6e@x j2b6f@val) (simple-struct-set! j2b6e@x '8 j2b6f@val))) (set! j2caf@j2add@set-library-visit-state! j2add@set-library-visit-state!) (set! j2adf@library-invoke-state (lambda (j2b72@x) (simple-struct-ref j2b72@x '9))) (set! j2cb0@j2adf@library-invoke-state j2adf@library-invoke-state) (set! j2ae1@set-library-invoke-state! (lambda (j2b74@x j2b75@val) (simple-struct-set! j2b74@x '9 j2b75@val))) (set! j2cb1@j2ae1@set-library-invoke-state! j2ae1@set-library-invoke-state!) (set! j2ae3@library-visit-code (lambda (j2b78@x) (simple-struct-ref j2b78@x '10))) (set! j2cb2@j2ae3@library-visit-code j2ae3@library-visit-code) (set! j2ae5@set-library-visit-code! (lambda (j2b7a@x j2b7b@val) (simple-struct-set! j2b7a@x '10 j2b7b@val))) (set! j2cb3@j2ae5@set-library-visit-code! j2ae5@set-library-visit-code!) (set! j2ae7@library-invoke-code (lambda (j2b7e@x) (simple-struct-ref j2b7e@x '11))) (set! j2cb4@j2ae7@library-invoke-code j2ae7@library-invoke-code) (set! j2ae9@set-library-invoke-code! (lambda (j2b80@x j2b81@val) (simple-struct-set! j2b80@x '11 j2b81@val))) (set! j2cb5@j2ae9@set-library-invoke-code! j2ae9@set-library-invoke-code!) (set! j2aeb@library-visible? (lambda (j2b84@x) (simple-struct-ref j2b84@x '12))) (set! j2cb6@j2aeb@library-visible? j2aeb@library-visible?) (set! j2aed@set-library-visible?! (lambda (j2b86@x j2b87@val) (simple-struct-set! j2b86@x '12 j2b87@val))) (set! j2cb7@j2aed@set-library-visible?! j2aed@set-library-visible?!) (set! j2aef@library-source-file-name (lambda (j2b8a@x) (simple-struct-ref j2b8a@x '13))) (set! j2cb8@j2aef@library-source-file-name j2aef@library-source-file-name) (set! j2af1@set-library-source-file-name! (lambda (j2b8c@x j2b8d@val) (simple-struct-set! j2b8c@x '13 j2b8d@val))) (set! j2cb9@j2af1@set-library-source-file-name! j2af1@set-library-source-file-name!) (set! j2af3@dummy '3) (set! j2cba@j2af3@dummy j2af3@dummy) (set! j2af5@find-dependencies (lambda (j2b90@ls) (if (null? j2b90@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! j2cbb@j2af5@find-dependencies j2af5@find-dependencies) (set! j2af7@find-library-by (lambda (j2b92@pred) (let j2b96@f ((j2b94@ls ((j2aad@current-library-collection)))) (if (null? j2b94@ls) '#f (if (j2b92@pred (car j2b94@ls)) (car j2b94@ls) (j2b96@f (cdr j2b94@ls))))))) (set! j2cbc@j2af7@find-library-by j2af7@find-library-by) (set! j2af9@library-path (j2a03@j28e1@make-parameter '(".") (lambda (j2b98@x) (if (and (list? j2b98@x) (for-all string? j2b98@x)) (map (lambda (j2b9a@x) j2b9a@x) j2b98@x) (assertion-violation 'library-path '"not a list of strings" j2b98@x))))) (set! j2cbd@j2af9@library-path j2af9@library-path) (set! j2afb@library-extensions (j2a03@j28e1@make-parameter '(".sls" ".ss" ".scm") (lambda (j2b9c@x) (if (and (list? j2b9c@x) (for-all string? j2b9c@x)) (map (lambda (j2b9e@x) j2b9e@x) j2b9c@x) (assertion-violation 'library-extensions '"not a list of strings" j2b9c@x))))) (set! j2cbe@j2afb@library-extensions j2afb@library-extensions) (set! j2afd@library-name->file-name (lambda (j2ba0@x) (call-with-values (lambda () (open-string-output-port)) (lambda (j2ba6@j2ba3 j2ba7@j2ba5) (let ((j2baa@extract j2ba7@j2ba5) (j2bab@p j2ba6@j2ba3)) (letrec* ((j2baf@display-hex (lambda (j2bb8@n) (if (<= '0 j2bb8@n '9) (display j2bb8@n j2bab@p) (display (integer->char (+ (char->integer '#\a) (- j2bb8@n '10))) j2bab@p))))) (begin (let j2bb2@f ((j2bb0@ls j2ba0@x)) (if (not (null? j2bb0@ls)) (begin (display '"/" j2bab@p) (for-each (lambda (j2bb4@c) (if (or (char<=? '#\a j2bb4@c '#\z) (char<=? '#\A j2bb4@c '#\Z) (char<=? '#\0 j2bb4@c '#\9) (memv j2bb4@c '(#\- #\. #\_ #\~))) (display j2bb4@c j2bab@p) (begin (display '"%" j2bab@p) (let ((j2bb6@n (char->integer j2bb4@c))) (begin (j2baf@display-hex (quotient j2bb6@n '16)) (j2baf@display-hex (remainder j2bb6@n '16))))))) (string->list (symbol->string (car j2bb0@ls)))) (j2bb2@f (cdr j2bb0@ls))) (void))) (j2baa@extract)))))))) (set! j2cbf@j2afd@library-name->file-name j2afd@library-name->file-name) (set! j2aff@file-locator (j2a03@j28e1@make-parameter (lambda (j2bba@x) (let ((j2bbc@str (j2afd@library-name->file-name j2bba@x))) (let j2bc4@f ((j2bbe@ls (j2af9@library-path)) (j2bbf@exts (j2afb@library-extensions)) (j2bc0@failed-list '())) (if (null? j2bbe@ls) (letrec* ((j2bce@j2bc9 (make-record-type-descriptor '&library-resolution &condition-rtd 'j2bcc '#f '#f '#((immutable library) (immutable files)))) (j2bd0@j2bcb '#f) (j2bd2@j2bca (make-record-constructor-descriptor j2bce@j2bc9 &condition-rcd j2bd0@j2bcb)) (j2bd5@j2bc8 (record-predicate j2bce@j2bc9)) (j2bd7@make-library-resolution-condition (record-constructor j2bd2@j2bca)) (j2bd9@j2bc6 (record-accessor j2bce@j2bc9 '0)) (j2bdb@j2bc7 (record-accessor j2bce@j2bc9 '1)) (j2bdd@library-resolution-condition? (condition-predicate j2bce@j2bc9)) (j2bdf@condition-library (condition-accessor j2bce@j2bc9 j2bd9@j2bc6)) (j2be1@condition-files (condition-accessor j2bce@j2bc9 j2bdb@j2bc7))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (j2bd7@make-library-resolution-condition j2bba@x (reverse j2bc0@failed-list))))) (if (null? j2bbf@exts) (j2bc4@f (cdr j2bbe@ls) (j2afb@library-extensions) j2bc0@failed-list) (let ((j2be2@name (string-append (car j2bbe@ls) j2bbc@str (car j2bbf@exts)))) (if (file-exists? j2be2@name) j2be2@name (j2bc4@f j2bbe@ls (cdr j2bbf@exts) (cons j2be2@name j2bc0@failed-list))))))))) (lambda (j2be4@f) (if (procedure? j2be4@f) j2be4@f (assertion-violation 'file-locator '"not a procedure" j2be4@f))))) (set! j2cc0@j2aff@file-locator j2aff@file-locator) (set! j2b01@serialize-all (lambda (j2be6@serialize j2be7@compile) (letrec* ((j2beb@library-desc (lambda (j2bee@x) (list (j2abb@library-id j2bee@x) (j2abf@library-name j2bee@x))))) (for-each (lambda (j2bec@x) (if (j2aef@library-source-file-name j2bec@x) (j2be6@serialize (j2aef@library-source-file-name j2bec@x) (list (j2abb@library-id j2bec@x) (j2abf@library-name j2bec@x) (j2ac3@library-version j2bec@x) (map j2beb@library-desc (j2ac7@library-imp* j2bec@x)) (map j2beb@library-desc (j2acb@library-vis* j2bec@x)) (map j2beb@library-desc (j2acf@library-inv* j2bec@x)) (j2ad3@library-subst j2bec@x) (j2ad7@library-env j2bec@x) (j2be7@compile (j2ae3@library-visit-code j2bec@x)) (j2be7@compile (j2ae7@library-invoke-code j2bec@x)) (j2aeb@library-visible? j2bec@x))) (void))) ((j2aad@current-library-collection)))))) (set! j2cc1@j2b01@serialize-all j2b01@serialize-all) (set! j2b03@current-precompiled-library-loader (j2a03@j28e1@make-parameter (lambda (j2bf0@filename j2bf1@sk) '#f))) (set! j2cc2@j2b03@current-precompiled-library-loader j2b03@current-precompiled-library-loader) (set! j2b05@try-load-from-file (lambda (j2bf4@filename) ((j2b03@current-precompiled-library-loader) j2bf4@filename (lambda j2c1a (let ((j2c1b (length j2c1a))) (if (= j2c1b '11) (apply (lambda (j2bf6@id j2bf7@name j2bf8@ver j2bf9@imp* j2bfa@vis* j2bfb@inv* j2bfc@exp-subst j2bfd@exp-env j2bfe@visit-proc j2bff@invoke-proc j2c00@visible?) (let j2c0e@f ((j2c0c@deps (append j2bf9@imp* j2bfa@vis* j2bfb@inv*))) (if (null? j2c0c@deps) (begin (j2b19@install-library j2bf6@id j2bf7@name j2bf8@ver j2bf9@imp* j2bfa@vis* j2bfb@inv* j2bfc@exp-subst j2bfd@exp-env j2bfe@visit-proc j2bff@invoke-proc '#f '#f j2c00@visible? '#f) '#t) (let ((j2c10@d (car j2c0c@deps))) (let ((j2c12@label (car j2c10@d)) (j2c13@dname (cadr j2c10@d))) (let ((j2c16@l (j2b0f@find-library-by-name j2c13@dname))) (if (and (j2ab9@library? j2c16@l) (eq? j2c12@label (j2abb@library-id j2c16@l))) (j2c0e@f (cdr j2c0c@deps)) (begin (if j29fd@j28d5@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" j2bf7@name j2c13@dname j2bf4@filename j2c16@l j2c12@label (j2abb@library-id j2c16@l)) (void)) '#f)))))))) j2c1a) (if (>= j2c1b '0) (apply (lambda j2c18@others '#f) j2c1a) (error #1# '"invalid arg count")))))))) (set! j2cc3@j2b05@try-load-from-file j2b05@try-load-from-file) (set! j2b07@library-loader (j2a03@j28e1@make-parameter (lambda (j2c1c@x) (let ((j2c1e@file-name ((j2aff@file-locator) j2c1c@x))) (if (not j2c1e@file-name) (assertion-violation '#f '"cannot file library" j2c1c@x) (or (j2b05@try-load-from-file j2c1e@file-name) ((j2b09@current-library-expander) (j2a02@j28df@read-library-source-file j2c1e@file-name) j2c1e@file-name (lambda (j2c20@name) (if (not (fast-equal? j2c20@name j2c1c@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (j2c26@j2c23 j2c27@j2c25) (let ((j2c2a@e j2c27@j2c25) (j2c2b@p j2c26@j2c23)) (begin (display '"expected to find library " j2c2b@p) (write j2c1c@x j2c2b@p) (display '" in file " j2c2b@p) (display j2c1e@file-name j2c2b@p) (display '", found " j2c2b@p) (write j2c20@name j2c2b@p) (display '" instead" j2c2b@p) (j2c2a@e)))))) (void)))))))) (lambda (j2c2e@f) (if (procedure? j2c2e@f) j2c2e@f (assertion-violation 'library-locator '"not a procedure" j2c2e@f))))) (set! j2cc4@j2b07@library-loader j2b07@library-loader) (set! j2b09@current-library-expander (j2a03@j28e1@make-parameter (lambda (j2c30@x) (assertion-violation 'library-expander '"not initialized")) (lambda (j2c32@f) (if (procedure? j2c32@f) j2c32@f (assertion-violation 'library-expander '"not a procedure" j2c32@f))))) (set! j2cc5@j2b09@current-library-expander j2b09@current-library-expander) (set! j2b0b@external-pending-libraries (j2a03@j28e1@make-parameter '())) (set! j2cc6@j2b0b@external-pending-libraries j2b0b@external-pending-libraries) (set! j2b0d@find-external-library (lambda (j2c34@name) (begin (if (member j2c34@name (j2b0b@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" j2c34@name) (void)) (let ((j2c3a@j2c37 j2b0b@external-pending-libraries) (j2c3b@j2c39 (cons j2c34@name (j2b0b@external-pending-libraries)))) (let ((j2c3e@swap (lambda () (let ((j2c40@t (j2c3a@j2c37))) (begin (j2c3a@j2c37 j2c3b@j2c39) (set! j2c3b@j2c39 j2c40@t)))))) (dynamic-wind j2c3e@swap (lambda () (begin ((j2b07@library-loader) j2c34@name) (or (j2af7@find-library-by (lambda (j2c42@x) (fast-equal? (j2abf@library-name j2c42@x) j2c34@name))) (assertion-violation '#f '"handling external library did not yield the correct library" j2c34@name)))) j2c3e@swap)))))) (set! j2cc7@j2b0d@find-external-library j2b0d@find-external-library) (set! j2b0f@find-library-by-name (lambda (j2c44@name) (or (j2af7@find-library-by (lambda (j2c46@x) (fast-equal? (j2abf@library-name j2c46@x) j2c44@name))) (j2b0d@find-external-library j2c44@name)))) (set! j2cc8@j2b0f@find-library-by-name j2b0f@find-library-by-name) (set! j2b11@library-exists? (lambda (j2c48@name) (and (j2af7@find-library-by (lambda (j2c4a@x) (fast-equal? (j2abf@library-name j2c4a@x) j2c48@name))) '#t))) (set! j2cc9@j2b11@library-exists? j2b11@library-exists?) (set! j2b13@find-library-by-spec/die (lambda (j2c4c@spec) (let ((j2c4e@id (car j2c4c@spec))) (or (j2af7@find-library-by (lambda (j2c50@x) (eq? j2c4e@id (j2abb@library-id j2c50@x)))) (assertion-violation '#f '"cannot find library with required spec" j2c4c@spec))))) (set! j2cca@j2b13@find-library-by-spec/die j2b13@find-library-by-spec/die) (set! j2b15@label->binding-table (make-eq-hashtable)) (set! j2ccb@j2b15@label->binding-table j2b15@label->binding-table) (set! j2b17@install-library-record (lambda (j2c52@lib) (begin (let ((j2c54@exp-env (j2ad7@library-env j2c52@lib))) (for-each (lambda (j2c56@x) (let ((j2c58@label (car j2c56@x)) (j2c59@binding (cdr j2c56@x))) (let ((j2c5c@binding (let ((j2c5e@t (car j2c59@binding))) (if (memv j2c5e@t '(global)) (cons 'global (cons j2c52@lib (cdr j2c59@binding))) (if (memv j2c5e@t '(global-macro)) (cons 'global-macro (cons j2c52@lib (cdr j2c59@binding))) (if (memv j2c5e@t '(global-macro!)) (cons 'global-macro! (cons j2c52@lib (cdr j2c59@binding))) j2c59@binding)))))) (begin (if (hashtable-ref j2b15@label->binding-table j2c58@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" j2c58@label (hashtable-ref j2b15@label->binding-table j2c58@label '#f) j2c5c@binding) (exit)) (void)) (hashtable-set! j2b15@label->binding-table j2c58@label j2c5c@binding))))) j2c54@exp-env)) ((j2aad@current-library-collection) j2c52@lib)))) (set! j2ccc@j2b17@install-library-record j2b17@install-library-record) (set! j2b19@install-library (lambda (j2c60@id j2c61@name j2c62@ver j2c63@imp* j2c64@vis* j2c65@inv* j2c66@exp-subst j2c67@exp-env j2c68@visit-proc j2c69@invoke-proc j2c6a@visit-code j2c6b@invoke-code j2c6c@visible? j2c6d@source-file-name) (let ((j2c7c@imp-lib* (map j2b13@find-library-by-spec/die j2c63@imp*)) (j2c7d@vis-lib* (map j2b13@find-library-by-spec/die j2c64@vis*)) (j2c7e@inv-lib* (map j2b13@find-library-by-spec/die j2c65@inv*))) (begin (if (not (and (symbol? j2c60@id) (list? j2c61@name) (list? j2c62@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" j2c60@id j2c61@name j2c62@ver) (void)) (if (j2b11@library-exists? j2c61@name) (assertion-violation 'install-library '"library is already installed" j2c61@name) (void)) (let ((j2c82@lib (make-simple-struct 'library '15 (list j2c60@id j2c61@name j2c62@ver j2c7c@imp-lib* j2c7d@vis-lib* j2c7e@inv-lib* j2c66@exp-subst j2c67@exp-env j2c68@visit-proc j2c69@invoke-proc j2c6a@visit-code j2c6b@invoke-code j2c6c@visible? j2c6d@source-file-name)))) (j2b17@install-library-record j2c82@lib)))))) (set! j2ccd@j2b19@install-library j2b19@install-library) (set! j2b1b@imported-label->binding (lambda (j2c84@lab) (hashtable-ref j2b15@label->binding-table j2c84@lab '#f))) (set! j2cce@j2b1b@imported-label->binding j2b1b@imported-label->binding) (set! j2b1d@invoke-library (lambda (j2c86@lib) (let ((j2c88@invoke (j2adf@library-invoke-state j2c86@lib))) (if (procedure? j2c88@invoke) (begin (j2ae1@set-library-invoke-state! j2c86@lib (lambda () (assertion-violation 'invoke '"circularity detected" j2c86@lib))) (for-each j2b1d@invoke-library (j2acf@library-inv* j2c86@lib)) (j2ae1@set-library-invoke-state! j2c86@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" j2c86@lib))) (j2c88@invoke) (j2ae1@set-library-invoke-state! j2c86@lib '#t)) (void))))) (set! j2ccf@j2b1d@invoke-library j2b1d@invoke-library) (set! j2b1f@visit-library (lambda (j2c8a@lib) (let ((j2c8c@visit (j2adb@library-visit-state j2c8a@lib))) (if (procedure? j2c8c@visit) (begin (j2add@set-library-visit-state! j2c8a@lib (lambda () (assertion-violation 'visit '"circularity detected" j2c8a@lib))) (for-each j2b1d@invoke-library (j2acb@library-vis* j2c8a@lib)) (j2add@set-library-visit-state! j2c8a@lib (lambda () (assertion-violation 'invoke '"first visit did not return" j2c8a@lib))) (j2c8c@visit) (j2add@set-library-visit-state! j2c8a@lib '#t)) (void))))) (set! j2cd0@j2b1f@visit-library j2b1f@visit-library) (set! j2b21@invoke-library-by-spec (lambda (j2c8e@spec) (j2b1d@invoke-library (j2b13@find-library-by-spec/die j2c8e@spec)))) (set! j2cd1@j2b21@invoke-library-by-spec j2b21@invoke-library-by-spec) (set! j2b23@installed-libraries (lambda j2c96 (let ((j2c97 (length j2c96))) (if (= j2c97 '1) (apply (lambda (j2c90@all?) (let j2c94@f ((j2c92@ls ((j2aad@current-library-collection)))) (if (null? j2c92@ls) '() (if (or j2c90@all? (j2aeb@library-visible? (car j2c92@ls))) (cons (car j2c92@ls) (j2c94@f (cdr j2c92@ls))) (j2c94@f (cdr j2c92@ls)))))) j2c96) (if (= j2c97 '0) (apply (lambda () (j2b23@installed-libraries '#f)) j2c96) (error #1# '"invalid arg count")))))) (set! j2cd2@j2b23@installed-libraries j2b23@installed-libraries) (set! j2b25@library-spec (lambda (j2c98@x) (begin (if (not (j2ab9@library? j2c98@x)) (assertion-violation 'library-spec '"not a library" j2c98@x) (void)) (list (j2abb@library-id j2c98@x) (j2abf@library-name j2c98@x) (j2ac3@library-version j2c98@x))))) (set! j2cd3@j2b25@library-spec j2b25@library-spec) (void))
(begin (set! j2cd7@build-global-define (unspecified)) (set! j2d48@build-lambda (unspecified)) (set! j2d4a@build-case-lambda (unspecified)) (set! j2d78@build-sequence (unspecified)) (set! j2d7a@build-void (unspecified)) (set! j2d7c@build-letrec (unspecified)) (set! j2d7e@build-let (unspecified)) (set! j2d80@build-named-let (unspecified)) (set! j2d82@build-letrec* (unspecified)) (set! j2d84@build-library-letrec* (unspecified)) (set! j2d86@build-receive (unspecified)) (set! j2cd7@build-global-define (lambda (j2d87@x) (j2d7a@build-void))) (set! j2e15@j2cd7@build-global-define j2cd7@build-global-define) (set! j2d48@build-lambda (lambda (j2d89@ae j2d8a@vars j2d8b@exp) (list 'lambda j2d8a@vars j2d8b@exp))) (set! j2e16@j2d48@build-lambda j2d48@build-lambda) (set! j2d4a@build-case-lambda (lambda (j2d8f@ae j2d90@vars* j2d91@exp*) (letrec* ((j2d96@build-error (lambda (j2dcd@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (j2d98@build-pred (lambda (j2db5@ae j2db6@n j2db7@vars) (call-with-values (lambda () (let j2dc3@f ((j2dbf@vars j2db7@vars) (j2dc0@count '0)) (if (pair? j2dbf@vars) (j2dc3@f (cdr j2dbf@vars) (+ j2dc0@count '1)) (if (null? j2dbf@vars) (values j2dc0@count '=) (values j2dc0@count '>=))))) (lambda (j2dc5@j2dbc j2dc6@j2dbe) (let ((j2dc9@pred j2dc6@j2dbe) (j2dca@count j2dc5@j2dbc)) (list (list 'primitive j2dc9@pred) j2db6@n (list 'quote j2dca@count))))))) (j2d9a@build-apply (lambda (j2dad@ae j2dae@g j2daf@vars j2db0@exp) (list '(primitive apply) (j2d48@build-lambda j2dad@ae j2daf@vars j2db0@exp) j2dae@g))) (j2d9c@expand-case-lambda (lambda (j2d9d@ae j2d9e@vars j2d9f@exp*) (let ((j2da3@g (gensym)) (j2da4@n (gensym))) (list 'lambda j2da3@g (j2d7e@build-let j2d9d@ae (list j2da4@n) (list (list '(primitive length) j2da3@g)) (let j2dab@f ((j2da7@vars* j2d90@vars*) (j2da8@exp* j2d9f@exp*)) (if (null? j2da7@vars*) (j2d96@build-error j2d9d@ae) (list 'if (j2d98@build-pred j2d9d@ae j2da4@n (car j2da7@vars*)) (j2d9a@build-apply j2d9d@ae j2da3@g (car j2da7@vars*) (car j2da8@exp*)) (j2dab@f (cdr j2da7@vars*) (cdr j2da8@exp*))))))))))) (if (= (length j2d91@exp*) '1) (j2d48@build-lambda j2d8f@ae (car j2d90@vars*) (car j2d91@exp*)) (j2d9c@expand-case-lambda j2d8f@ae j2d90@vars* j2d91@exp*))))) (set! j2e17@j2d4a@build-case-lambda j2d4a@build-case-lambda) (set! j2d78@build-sequence (lambda (j2dcf@ae j2dd0@exps) (let j2dd5@loop ((j2dd3@exps j2dd0@exps)) (if (null? (cdr j2dd3@exps)) (car j2dd3@exps) (if (equal? (car j2dd3@exps) (j2d7a@build-void)) (j2dd5@loop (cdr j2dd3@exps)) (cons 'begin j2dd3@exps)))))) (set! j2e18@j2d78@build-sequence j2d78@build-sequence) (set! j2d7a@build-void (lambda () '((primitive void)))) (set! j2e19@j2d7a@build-void j2d7a@build-void) (set! j2d7c@build-letrec (lambda (j2dd7@ae j2dd8@vars j2dd9@val-exps j2dda@body-exp) (if (null? j2dd8@vars) j2dda@body-exp (list 'letrec (map list j2dd8@vars j2dd9@val-exps) j2dda@body-exp)))) (set! j2e1a@j2d7c@build-letrec j2d7c@build-letrec) (set! j2d7e@build-let (lambda (j2ddf@ae j2de0@vars j2de1@val-exps j2de2@body-exp) (if (null? j2de0@vars) j2de2@body-exp (list 'let (map list j2de0@vars j2de1@val-exps) j2de2@body-exp)))) (set! j2e1b@j2d7e@build-let j2d7e@build-let) (set! j2d80@build-named-let (lambda (j2de7@ae j2de8@name j2de9@vars j2dea@val-exps j2deb@body-exp) (list 'let j2de8@name (map list j2de9@vars j2dea@val-exps) j2deb@body-exp))) (set! j2e1c@j2d80@build-named-let j2d80@build-named-let) (set! j2d82@build-letrec* (lambda (j2df1@ae j2df2@vars j2df3@val-exps j2df4@body-exp) (if (null? j2df2@vars) j2df4@body-exp (list 'letrec* (map list j2df2@vars j2df3@val-exps) j2df4@body-exp)))) (set! j2e1d@j2d82@build-letrec* j2d82@build-letrec*) (set! j2d84@build-library-letrec* (lambda (j2df9@ae j2dfa@name j2dfb@vars j2dfc@locs j2dfd@val-exps j2dfe@body-exp) (cons 'begin (append (map (lambda (j2e05@var) (cons 'set! (cons j2e05@var '((unspecified))))) j2dfb@vars) (append (apply append (map (lambda (j2e07@var j2e08@loc j2e09@val-exp) (list (list 'set! j2e07@var j2e09@val-exp) (list 'set! j2e08@loc j2e07@var))) j2dfb@vars j2dfc@locs j2dfd@val-exps)) (list j2dfe@body-exp)))))) (set! j2e1e@j2d84@build-library-letrec* j2d84@build-library-letrec*) (set! j2d86@build-receive (lambda (j2e0d@ae j2e0e@vars j2e0f@producer j2e10@body*) (begin (display '"************** in ") (cons 'receive (cons j2e0e@vars (cons j2e0f@producer j2e10@body*)))))) (set! j2e1f@j2d86@build-receive j2d86@build-receive) (void))
(begin (set! j2e2e@file-options-macro (unspecified)) (set! j2e30@set-cons (unspecified)) (set! j2e32@set-union (unspecified)) (set! j2e37@top-mark* (unspecified)) (set! j2e39@top-marked? (unspecified)) (set! j2e3b@gen-lexical (unspecified)) (set! j2e3d@gen-global (unspecified)) (set! j2e3f@gen-label (unspecified)) (set! j2e41@gen-top-level-label (unspecified)) (set! j2e43@gen-define-label+loc (unspecified)) (set! j2e45@gen-define-label (unspecified)) (set! j2e4f@rib? (unspecified)) (set! j2e51@rib-sym* (unspecified)) (set! j2e53@set-rib-sym*! (unspecified)) (set! j2e55@rib-mark** (unspecified)) (set! j2e57@set-rib-mark**! (unspecified)) (set! j2e59@rib-label* (unspecified)) (set! j2e5b@set-rib-label*! (unspecified)) (set! j2e5d@rib-sealed/freq (unspecified)) (set! j2e5f@set-rib-sealed/freq! (unspecified)) (set! j2e61@rib-cache (unspecified)) (set! j2e63@set-rib-cache! (unspecified)) (set! j2e65@dummy (unspecified)) (set! j2e67@make-empty-rib (unspecified)) (set! j2e69@extend-rib! (unspecified)) (set! j2e6b@extend-rib/nc! (unspecified)) (set! j2e6d@make-rib-map (unspecified)) (set! j2e6f@seal-rib! (unspecified)) (set! j2e71@unseal-rib! (unspecified)) (set! j2e73@make-full-rib (unspecified)) (set! j2e75@rp (unspecified)) (set! j2e7f@stx? (unspecified)) (set! j2e81@stx-expr (unspecified)) (set! j2e83@set-stx-expr! (unspecified)) (set! j2e85@stx-mark* (unspecified)) (set! j2e87@set-stx-mark*! (unspecified)) (set! j2e89@stx-subst* (unspecified)) (set! j2e8b@set-stx-subst*! (unspecified)) (set! j2e8d@stx-ae* (unspecified)) (set! j2e8f@set-stx-ae*! (unspecified)) (set! j2e91@dummy (unspecified)) (set! j2e93@datum->stx (unspecified)) (set! j2e95@gen-mark (unspecified)) (set! j2e97@anti-mark (unspecified)) (set! j2e99@anti-mark? (unspecified)) (set! j2e9b@mkstx (unspecified)) (set! j2e9d@add-mark (unspecified)) (set! j2e9f@add-subst (unspecified)) (set! j2ea1@syntax-kind? (unspecified)) (set! j2ea3@syntax-vector->list (unspecified)) (set! j2ea5@syntax-pair? (unspecified)) (set! j2ea7@syntax-vector? (unspecified)) (set! j2ea9@syntax-null? (unspecified)) (set! j2eab@syntax-list? (unspecified)) (set! j2ead@syntax-car (unspecified)) (set! j2eaf@syntax-cdr (unspecified)) (set! j2eb1@syntax->list (unspecified)) (set! j2eb3@id? (unspecified)) (set! j2eb5@id->sym (unspecified)) (set! j2eb7@bound-id=? (unspecified)) (set! j2eb9@free-id=? (unspecified)) (set! j2ebb@valid-bound-ids? (unspecified)) (set! j2ebd@distinct-bound-ids? (unspecified)) (set! j2ebf@bound-id-member? (unspecified)) (set! j2ec1@self-evaluating? (unspecified)) (set! j2ec3@strip-annotations (unspecified)) (set! j2ec5@strip (unspecified)) (set! j2ec7@stx->datum (unspecified)) (set! j2ec9@id->label (unspecified)) (set! j2ecb@label->binding (unspecified)) (set! j2ecd@make-binding (unspecified)) (set! j2ecf@binding-type (unspecified)) (set! j2ed1@binding-value (unspecified)) (set! j2ed3@raise-unbound-error (unspecified)) (set! j2ed5@syntax-type (unspecified)) (set! j2ee3@sanitize-binding (unspecified)) (set! j2ee5@make-variable-transformer (unspecified)) (set! j2ee7@variable-transformer? (unspecified)) (set! j2ee9@variable-transformer-procedure (unspecified)) (set! j2eeb@make-eval-transformer (unspecified)) (set! j303c@parse-define (unspecified)) (set! j303e@parse-define-syntax (unspecified)) (set! j3040@scheme-stx-hashtable (unspecified)) (set! j3042@scheme-stx (unspecified)) (set! j3044@lexical-var (unspecified)) (set! j3046@lexical-mutable? (unspecified)) (set! j3048@set-lexical-mutable! (unspecified)) (set! j304a@add-lexical (unspecified)) (set! j304c@add-lexicals (unspecified)) (set! j304e@letrec-helper (unspecified)) (set! j3050@let-transformer (unspecified)) (set! j3052@letrec-transformer (unspecified)) (set! j3054@letrec*-transformer (unspecified)) (set! j3056@fluid-let-syntax-transformer (unspecified)) (set! j3058@type-descriptor-transformer (unspecified)) (set! j305a@record-type-descriptor-transformer (unspecified)) (set! j305c@record-constructor-descriptor-transformer (unspecified)) (set! j305e@when-macro (unspecified)) (set! j3060@unless-macro (unspecified)) (set! j3062@if-transformer (unspecified)) (set! j3064@and-transformer (unspecified)) (set! j3066@or-transformer (unspecified)) (set! j3068@case-macro (unspecified)) (set! j306a@quote-transformer (unspecified)) (set! j306c@case-lambda-transformer (unspecified)) (set! j306e@lambda-transformer (unspecified)) (set! j3070@bless (unspecified)) (set! j3072@with-syntax-macro (unspecified)) (set! j3074@invalid-fmls-error (unspecified)) (set! j3076@let-macro (unspecified)) (set! j3078@let-values-macro (unspecified)) (set! j307a@let*-values-macro (unspecified)) (set! j307c@trace-lambda-macro (unspecified)) (set! j307e@trace-define-macro (unspecified)) (set! j3080@trace-define-syntax-macro (unspecified)) (set! j3082@trace-let/rec-syntax (unspecified)) (set! j3084@trace-let-syntax-macro (unspecified)) (set! j3086@trace-letrec-syntax-macro (unspecified)) (set! j3088@guard-macro (unspecified)) (set! j308a@define-enumeration-macro (unspecified)) (set! j308c@time-macro (unspecified)) (set! j308e@delay-macro (unspecified)) (set! j3090@assert-macro (unspecified)) (set! j3092@endianness-macro (unspecified)) (set! j3094@identifier-syntax-macro (unspecified)) (set! j3096@do-macro (unspecified)) (set! j3098@let*-macro (unspecified)) (set! j309a@or-macro (unspecified)) (set! j309c@and-macro (unspecified)) (set! j309e@cond-macro (unspecified)) (set! j30a0@do-include (unspecified)) (set! j30a2@include-macro (unspecified)) (set! j30a4@include-into-macro (unspecified)) (set! j30a6@syntax-rules-macro (unspecified)) (set! j30a8@quasiquote-macro (unspecified)) (set! j30aa@quasisyntax-macro (unspecified)) (set! j30ac@define-struct-macro (unspecified)) (set! j30ae@define-record-type-macro (unspecified)) (set! j30b0@define-condition-type-macro (unspecified)) (set! j30b2@incorrect-usage-macro (unspecified)) (set! j30b4@parameterize-macro (unspecified)) (set! j30b6@foreign-call-transformer (unspecified)) (set! j30b8@convert-pattern (unspecified)) (set! j30ba@syntax-dispatch (unspecified)) (set! j30bc@ellipsis? (unspecified)) (set! j30be@underscore? (unspecified)) (set! j30c0@verify-literals (unspecified)) (set! j30c2@syntax-case-transformer (unspecified)) (set! j30c4@ellipsis-map (unspecified)) (set! j30c6@syntax-transformer (unspecified)) (set! j30c8@core-macro-transformer (unspecified)) (set! j30ca@symbol-macro (unspecified)) (set! j30cc@macro-transformer (unspecified)) (set! j30ce@local-macro-transformer (unspecified)) (set! j30d0@do-macro-call (unspecified)) (set! j30d2@chi-macro (unspecified)) (set! j30d4@chi-local-macro (unspecified)) (set! j30d6@chi-global-macro (unspecified)) (set! j30d8@chi-expr* (unspecified)) (set! j30da@chi-application (unspecified)) (set! j30dc@chi-expr (unspecified)) (set! j30de@chi-set! (unspecified)) (set! j30e0@verify-formals (unspecified)) (set! j30e2@chi-lambda-clause (unspecified)) (set! j30e4@chi-lambda-clause* (unspecified)) (set! j30e6@chi-defun (unspecified)) (set! j30e8@chi-rhs (unspecified)) (set! j30ea@expand-interaction-rhs*/init* (unspecified)) (set! j30ec@chi-rhs* (unspecified)) (set! j30ee@find-bound=? (unspecified)) (set! j30f0@find-dups (unspecified)) (set! j30f2@chi-internal (unspecified)) (set! j30f4@parse-module (unspecified)) (set! j30fe@module-interface? (unspecified)) (set! j3100@module-interface-first-mark (unspecified)) (set! j3102@set-module-interface-first-mark! (unspecified)) (set! j3104@module-interface-exp-id-vec (unspecified)) (set! j3106@set-module-interface-exp-id-vec! (unspecified)) (set! j3108@module-interface-exp-lab-vec (unspecified)) (set! j310a@set-module-interface-exp-lab-vec! (unspecified)) (set! j310c@dummy (unspecified)) (set! j310e@module-interface-exp-id* (unspecified)) (set! j3110@chi-internal-module (unspecified)) (set! j3112@chi-body* (unspecified)) (set! j3114@expand-transformer (unspecified)) (set! j3116@parse-exports (unspecified)) (set! j3118@parse-library-name (unspecified)) (set! j311a@parse-library (unspecified)) (set! j311c@parse-import-spec* (unspecified)) (set! j311e@make-top-rib (unspecified)) (set! j3120@make-collector (unspecified)) (set! j3122@inv-collector (unspecified)) (set! j3124@vis-collector (unspecified)) (set! j3126@imp-collector (unspecified)) (set! j3128@chi-library-internal (unspecified)) (set! j312a@chi-interaction-expr (unspecified)) (set! j312c@library-body-expander (unspecified)) (set! j312e@core-library-expander (unspecified)) (set! j3130@parse-top-level-program (unspecified)) (set! j3132@top-level-expander (unspecified)) (set! j3134@rp (unspecified)) (set! j313e@env? (unspecified)) (set! j3140@env-names (unspecified)) (set! j3142@set-env-names! (unspecified)) (set! j3144@env-labels (unspecified)) (set! j3146@set-env-labels! (unspecified)) (set! j3148@env-itc (unspecified)) (set! j314a@set-env-itc! (unspecified)) (set! j314c@dummy (unspecified)) (set! j314e@rp (unspecified)) (set! j3158@interaction-env? (unspecified)) (set! j315a@interaction-env-rib (unspecified)) (set! j315c@set-interaction-env-rib! (unspecified)) (set! j315e@interaction-env-r (unspecified)) (set! j3160@set-interaction-env-r! (unspecified)) (set! j3162@interaction-env-locs (unspecified)) (set! j3164@set-interaction-env-locs! (unspecified)) (set! j3166@dummy (unspecified)) (set! j3168@interaction-environment-symbols (unspecified)) (set! j316a@environment-bindings (unspecified)) (set! j316c@parse-binding (unspecified)) (set! j316e@environment? (unspecified)) (set! j3170@environment-symbols (unspecified)) (set! j3172@environment (unspecified)) (set! j3174@null-environment (unspecified)) (set! j3176@scheme-report-environment (unspecified)) (set! j3178@expand (unspecified)) (set! j317a@eval (unspecified)) (set! j317c@library-expander (unspecified)) (set! j317e@boot-library-expand (unspecified)) (set! j3180@rev-map-append (unspecified)) (set! j3182@build-exports (unspecified)) (set! j3184@make-export-subst (unspecified)) (set! j3186@make-export-env/macros (unspecified)) (set! j3188@generate-temporaries (unspecified)) (set! j318a@free-identifier=? (unspecified)) (set! j318c@bound-identifier=? (unspecified)) (set! j318e@make-source-condition (unspecified)) (set! j3190@extract-position-condition (unspecified)) (set! j3192@expression-position (unspecified)) (set! j3194@assertion-error (unspecified)) (set! j3196@syntax-error (unspecified)) (set! j3198@syntax-violation* (unspecified)) (set! j319a@syntax-violation (unspecified)) (set! j319c@identifier? (unspecified)) (set! j319e@datum->syntax (unspecified)) (set! j31a0@syntax->datum (unspecified)) (set! j31a2@ungensym-all (unspecified)) (set! j31a4@compile-r6rs-top-level (unspecified)) (set! j31a6@pre-compile-r6rs-top-level (unspecified)) (set! j31a8@interaction-environment (unspecified)) (set! j31aa@top-level-context (unspecified)) (set! j2e2e@file-options-macro (lambda (j31ab@x) (letrec* ((j31ae@valid-option? (lambda (j31b7@x) (and (j2eb3@id? j31b7@x) (memq (j2eb5@id->sym j31b7@x) '(no-fail no-create no-truncate)))))) (let ((j31af@t j31ab@x)) (let ((j31b1@ls/false (j30ba@syntax-dispatch j31af@t '(_ . each-any)))) (if (and j31b1@ls/false (apply (lambda (j31b3@opt*) (for-all j31ae@valid-option? j31b3@opt*)) j31b1@ls/false)) (apply (lambda (j31b5@opt*) (j3070@bless (list 'make-file-options (list 'quote j31b5@opt*)))) j31b1@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j31af@t))))))) (set! j4b01@j2e2e@file-options-macro j2e2e@file-options-macro) (set! j2e30@set-cons (lambda (j31b9@x j31ba@ls) (if (memq j31b9@x j31ba@ls) j31ba@ls (cons j31b9@x j31ba@ls)))) (set! j4b02@j2e30@set-cons j2e30@set-cons) (set! j2e32@set-union (lambda (j31bd@ls1 j31be@ls2) (if (null? j31bd@ls1) j31be@ls2 (if (memq (car j31bd@ls1) j31be@ls2) (j2e32@set-union (cdr j31bd@ls1) j31be@ls2) (cons (car j31bd@ls1) (j2e32@set-union (cdr j31bd@ls1) j31be@ls2)))))) (set! j4b03@j2e32@set-union j2e32@set-union) (set! j2e37@top-mark* '(top)) (set! j4b04@j2e37@top-mark* j2e37@top-mark*) (set! j2e39@top-marked? (lambda (j31c1@m*) (memq 'top j31c1@m*))) (set! j4b05@j2e39@top-marked? j2e39@top-marked?) (set! j2e3b@gen-lexical (lambda (j31c3@sym) (if (symbol? j31c3@sym) (gensym j31c3@sym) (if (j2e7f@stx? j31c3@sym) (j2e3b@gen-lexical (j2eb5@id->sym j31c3@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" j31c3@sym))))) (set! j4b06@j2e3b@gen-lexical j2e3b@gen-lexical) (set! j2e3d@gen-global (lambda (j31c5@x) (j2e3b@gen-lexical j31c5@x))) (set! j4b07@j2e3d@gen-global j2e3d@gen-global) (set! j2e3f@gen-label (lambda (j31c7@_) (gensym))) (set! j4b08@j2e3f@gen-label j2e3f@gen-label) (set! j2e41@gen-top-level-label (lambda (j31c9@id j31ca@rib) (letrec* ((j31ce@find (lambda (j31d9@sym j31da@mark* j31db@sym* j31dc@mark** j31dd@label*) (and (pair? j31db@sym*) (if (and (eq? j31d9@sym (car j31db@sym*)) (same-marks? j31da@mark* (car j31dc@mark**))) (car j31dd@label*) (j31ce@find j31d9@sym j31da@mark* (cdr j31db@sym*) (cdr j31dc@mark**) (cdr j31dd@label*))))))) (let ((j31cf@sym (j2eb5@id->sym j31c9@id)) (j31d0@mark* (j2e85@stx-mark* j31c9@id))) (let ((j31d3@sym* (j2e51@rib-sym* j31ca@rib))) (let ((j31d5@t (and (memq j31cf@sym (j2e51@rib-sym* j31ca@rib)) (j31ce@find j31cf@sym j31d0@mark* j31d3@sym* (j2e55@rib-mark** j31ca@rib) (j2e59@rib-label* j31ca@rib))))) (if j31d5@t ((lambda (j31d7@label) (if (j2cce@j2b1b@imported-label->binding j31d7@label) (gensym) j31d7@label)) j31d5@t) (gensym)))))))) (set! j4b09@j2e41@gen-top-level-label j2e41@gen-top-level-label) (set! j2e43@gen-define-label+loc (lambda (j31e3@id j31e4@rib) (let ((j31e7@t (j31aa@top-level-context))) (if j31e7@t ((lambda (j31e9@env) (let ((j31eb@label (j2e41@gen-top-level-label j31e3@id j31e4@rib)) (j31ec@locs (j3162@interaction-env-locs j31e9@env))) (values j31eb@label (let ((j31ef@t (assq j31eb@label j31ec@locs))) (if j31ef@t (cdr j31ef@t) (let ((j31f1@loc (j2e3b@gen-lexical j31e3@id))) (begin (j3164@set-interaction-env-locs! j31e9@env (cons (cons j31eb@label j31f1@loc) j31ec@locs)) j31f1@loc))))))) j31e7@t) (values (gensym) (j2e3b@gen-lexical j31e3@id)))))) (set! j4b0a@j2e43@gen-define-label+loc j2e43@gen-define-label+loc) (set! j2e45@gen-define-label (lambda (j31f3@id j31f4@rib) (if (j31aa@top-level-context) (j2e41@gen-top-level-label j31f3@id j31f4@rib) (gensym)))) (set! j4b0b@j2e45@gen-define-label j2e45@gen-define-label) (set! j2e4f@rib? (lambda (j31f7@x) (and (simple-struct? j31f7@x) (eq? (simple-struct-name j31f7@x) 'rib)))) (set! j4b0c@j2e4f@rib? j2e4f@rib?) (set! j2e51@rib-sym* (lambda (j31f9@x) (simple-struct-ref j31f9@x '0))) (set! j4b0d@j2e51@rib-sym* j2e51@rib-sym*) (set! j2e53@set-rib-sym*! (lambda (j31fb@x j31fc@val) (simple-struct-set! j31fb@x '0 j31fc@val))) (set! j4b0e@j2e53@set-rib-sym*! j2e53@set-rib-sym*!) (set! j2e55@rib-mark** (lambda (j31ff@x) (simple-struct-ref j31ff@x '1))) (set! j4b0f@j2e55@rib-mark** j2e55@rib-mark**) (set! j2e57@set-rib-mark**! (lambda (j3201@x j3202@val) (simple-struct-set! j3201@x '1 j3202@val))) (set! j4b10@j2e57@set-rib-mark**! j2e57@set-rib-mark**!) (set! j2e59@rib-label* (lambda (j3205@x) (simple-struct-ref j3205@x '2))) (set! j4b11@j2e59@rib-label* j2e59@rib-label*) (set! j2e5b@set-rib-label*! (lambda (j3207@x j3208@val) (simple-struct-set! j3207@x '2 j3208@val))) (set! j4b12@j2e5b@set-rib-label*! j2e5b@set-rib-label*!) (set! j2e5d@rib-sealed/freq (lambda (j320b@x) (simple-struct-ref j320b@x '3))) (set! j4b13@j2e5d@rib-sealed/freq j2e5d@rib-sealed/freq) (set! j2e5f@set-rib-sealed/freq! (lambda (j320d@x j320e@val) (simple-struct-set! j320d@x '3 j320e@val))) (set! j4b14@j2e5f@set-rib-sealed/freq! j2e5f@set-rib-sealed/freq!) (set! j2e61@rib-cache (lambda (j3211@x) (simple-struct-ref j3211@x '4))) (set! j4b15@j2e61@rib-cache j2e61@rib-cache) (set! j2e63@set-rib-cache! (lambda (j3213@x j3214@val) (simple-struct-set! j3213@x '4 j3214@val))) (set! j4b16@j2e63@set-rib-cache! j2e63@set-rib-cache!) (set! j2e65@dummy '3) (set! j4b17@j2e65@dummy j2e65@dummy) (set! j2e67@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! j4b18@j2e67@make-empty-rib j2e67@make-empty-rib) (set! j2e69@extend-rib! (lambda (j3217@rib j3218@id j3219@label) (letrec* ((j321e@find (lambda (j322b@sym j322c@mark* j322d@sym* j322e@mark** j322f@label*) (and (pair? j322d@sym*) (if (and (eq? j322b@sym (car j322d@sym*)) (same-marks? j322c@mark* (car j322e@mark**))) j322f@label* (j321e@find j322b@sym j322c@mark* (cdr j322d@sym*) (cdr j322e@mark**) (cdr j322f@label*))))))) (begin (if (j2e5d@rib-sealed/freq j3217@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" j3217@rib) (void)) (let ((j321f@sym (j2eb5@id->sym j3218@id)) (j3220@mark* (j2e85@stx-mark* j3218@id))) (let ((j3223@sym* (j2e51@rib-sym* j3217@rib))) (let ((j3225@t (and (memq j321f@sym (j2e51@rib-sym* j3217@rib)) (j321e@find j321f@sym j3220@mark* j3223@sym* (j2e55@rib-mark** j3217@rib) (j2e59@rib-label* j3217@rib))))) (if j3225@t ((lambda (j3227@p) (if (not (eq? j3219@label (car j3227@p))) (if (j31aa@top-level-context) (set-car! j3227@p j3219@label) (j319a@syntax-violation '#f '"multiple definitions of identifier" j3218@id)) (void))) j3225@t) (begin (if (j2e61@rib-cache j3217@rib) (hashtable-update! (j2e61@rib-cache j3217@rib) j321f@sym (lambda (j3229@e) (cons (cons j3220@mark* j3219@label) j3229@e)) '()) (void)) (j2e53@set-rib-sym*! j3217@rib (cons j321f@sym j3223@sym*)) (j2e57@set-rib-mark**! j3217@rib (cons j3220@mark* (j2e55@rib-mark** j3217@rib))) (j2e5b@set-rib-label*! j3217@rib (cons j3219@label (j2e59@rib-label* j3217@rib)))))))))))) (set! j4b19@j2e69@extend-rib! j2e69@extend-rib!) (set! j2e6b@extend-rib/nc! (lambda (j3235@rib j3236@id j3237@label) (let ((j323b@sym (j2eb5@id->sym j3236@id)) (j323c@mark* (j2e85@stx-mark* j3236@id))) (let ((j323f@sym* (j2e51@rib-sym* j3235@rib))) (begin (if (j2e61@rib-cache j3235@rib) (hashtable-update! (j2e61@rib-cache j3235@rib) j323b@sym (lambda (j3241@e) (cons (cons j323c@mark* j3237@label) j3241@e)) '()) (void)) (j2e53@set-rib-sym*! j3235@rib (cons j323b@sym j323f@sym*)) (j2e57@set-rib-mark**! j3235@rib (cons j323c@mark* (j2e55@rib-mark** j3235@rib))) (j2e5b@set-rib-label*! j3235@rib (cons j3237@label (j2e59@rib-label* j3235@rib)))))))) (set! j4b1a@j2e6b@extend-rib/nc! j2e6b@extend-rib/nc!) (set! j2e6d@make-rib-map (lambda (j3243@sym*) (let ((j3245@ht (make-eq-hashtable))) (let j324b@f ((j3247@i '0) (j3248@sym* j3243@sym*)) (if (null? j3248@sym*) j3245@ht (begin (hashtable-update! j3245@ht (car j3248@sym*) (lambda (j324d@x) (cons j3247@i j324d@x)) '()) (j324b@f (+ j3247@i '1) (cdr j3248@sym*)))))))) (set! j4b1b@j2e6d@make-rib-map j2e6d@make-rib-map) (set! j2e6f@seal-rib! (lambda (j324f@rib) (let ((j3251@sym* (j2e51@rib-sym* j324f@rib))) (if (not (null? j3251@sym*)) (begin (j2e53@set-rib-sym*! j324f@rib (list->vector j3251@sym*)) (j2e57@set-rib-mark**! j324f@rib (list->vector (j2e55@rib-mark** j324f@rib))) (j2e5b@set-rib-label*! j324f@rib (list->vector (j2e59@rib-label* j324f@rib))) (j2e5f@set-rib-sealed/freq! j324f@rib (j2e6d@make-rib-map j3251@sym*))) (void))))) (set! j4b1c@j2e6f@seal-rib! j2e6f@seal-rib!) (set! j2e71@unseal-rib! (lambda (j3253@rib) (if (j2e5d@rib-sealed/freq j3253@rib) (begin (j2e5f@set-rib-sealed/freq! j3253@rib '#f) (j2e53@set-rib-sym*! j3253@rib (vector->list (j2e51@rib-sym* j3253@rib))) (j2e57@set-rib-mark**! j3253@rib (vector->list (j2e55@rib-mark** j3253@rib))) (j2e5b@set-rib-label*! j3253@rib (vector->list (j2e59@rib-label* j3253@rib)))) (void)))) (set! j4b1d@j2e71@unseal-rib! j2e71@unseal-rib!) (set! j2e73@make-full-rib (lambda (j3255@id* j3256@label*) (let ((j3259@r (make-simple-struct 'rib '6 (list (map j2eb5@id->sym j3255@id*) (map j2e85@stx-mark* j3255@id*) j3256@label* '#f '#f)))) (begin (j2e6f@seal-rib! j3259@r) j3259@r)))) (set! j4b1e@j2e73@make-full-rib j2e73@make-full-rib) (set! j2e75@rp (j2a00@j28db@make-record-printer 'stx (lambda (j325b@x j325c@p j325d@wr) (begin (display '"#<syntax " j325c@p) (write (j2ec7@stx->datum j325b@x) j325c@p) (let ((j3261@expr (j2e81@stx-expr j325b@x))) (if (j29f7@j28c9@annotation? j3261@expr) (let ((j3263@src (j29f8@j28cb@annotation-source j3261@expr))) (if (pair? j3263@src) (begin (display '" [" j325c@p) (display (cdr j3263@src) j325c@p) (display '" of " j325c@p) (display (car j3263@src) j325c@p) (display '"]" j325c@p)) (void))) (void))) (display '">" j325c@p))))) (set! j4b1f@j2e75@rp j2e75@rp) (set! j2e7f@stx? (lambda (j3265@x) (and (simple-struct? j3265@x) (eq? (simple-struct-name j3265@x) 'stx)))) (set! j4b20@j2e7f@stx? j2e7f@stx?) (set! j2e81@stx-expr (lambda (j3267@x) (simple-struct-ref j3267@x '0))) (set! j4b21@j2e81@stx-expr j2e81@stx-expr) (set! j2e83@set-stx-expr! (lambda (j3269@x j326a@val) (simple-struct-set! j3269@x '0 j326a@val))) (set! j4b22@j2e83@set-stx-expr! j2e83@set-stx-expr!) (set! j2e85@stx-mark* (lambda (j326d@x) (simple-struct-ref j326d@x '1))) (set! j4b23@j2e85@stx-mark* j2e85@stx-mark*) (set! j2e87@set-stx-mark*! (lambda (j326f@x j3270@val) (simple-struct-set! j326f@x '1 j3270@val))) (set! j4b24@j2e87@set-stx-mark*! j2e87@set-stx-mark*!) (set! j2e89@stx-subst* (lambda (j3273@x) (simple-struct-ref j3273@x '2))) (set! j4b25@j2e89@stx-subst* j2e89@stx-subst*) (set! j2e8b@set-stx-subst*! (lambda (j3275@x j3276@val) (simple-struct-set! j3275@x '2 j3276@val))) (set! j4b26@j2e8b@set-stx-subst*! j2e8b@set-stx-subst*!) (set! j2e8d@stx-ae* (lambda (j3279@x) (simple-struct-ref j3279@x '3))) (set! j4b27@j2e8d@stx-ae* j2e8d@stx-ae*) (set! j2e8f@set-stx-ae*! (lambda (j327b@x j327c@val) (simple-struct-set! j327b@x '3 j327c@val))) (set! j4b28@j2e8f@set-stx-ae*! j2e8f@set-stx-ae*!) (set! j2e91@dummy '3) (set! j4b29@j2e91@dummy j2e91@dummy) (set! j2e93@datum->stx (lambda (j327f@id j3280@datum) (make-simple-struct 'stx '5 (list j3280@datum (j2e85@stx-mark* j327f@id) (j2e89@stx-subst* j327f@id) (j2e8d@stx-ae* j327f@id))))) (set! j4b2a@j2e93@datum->stx j2e93@datum->stx) (set! j2e95@gen-mark (lambda () (string '#\m))) (set! j4b2b@j2e95@gen-mark j2e95@gen-mark) (set! j2e97@anti-mark '#f) (set! j4b2c@j2e97@anti-mark j2e97@anti-mark) (set! j2e99@anti-mark? not) (set! j4b2d@j2e99@anti-mark? j2e99@anti-mark?) (set! j2e9b@mkstx (lambda (j3283@e j3284@m* j3285@s* j3286@ae*) (if (and (j2e7f@stx? j3283@e) (not (j2e39@top-marked? j3284@m*))) (call-with-values (lambda () (join-wraps j3284@m* j3285@s* j3286@ae* j3283@e)) (lambda (j3291@j328c j3292@j328e j3293@j3290) (let ((j3297@ae* j3293@j3290) (j3298@s* j3292@j328e) (j3299@m* j3291@j328c)) (make-simple-struct 'stx '5 (list (j2e81@stx-expr j3283@e) j3299@m* j3298@s* j3297@ae*))))) (make-simple-struct 'stx '5 (list j3283@e j3284@m* j3285@s* j3286@ae*))))) (set! j4b2e@j2e9b@mkstx j2e9b@mkstx) (set! j2e9d@add-mark (lambda (j329d@m j329e@e j329f@ae) (j2e9b@mkstx j329e@e (list j329d@m) '(shift) (list j329f@ae)))) (set! j4b2f@j2e9d@add-mark j2e9d@add-mark) (set! j2e9f@add-subst (lambda (j32a3@subst j32a4@e) (j2e9b@mkstx j32a4@e '() (list j32a3@subst) '()))) (set! j4b30@j2e9f@add-subst j2e9f@add-subst) (set! j2ea1@syntax-kind? (lambda (j32a7@x j32a8@p?) (if (j2e7f@stx? j32a7@x) (j2ea1@syntax-kind? (j2e81@stx-expr j32a7@x) j32a8@p?) (if (j29f7@j28c9@annotation? j32a7@x) (j2ea1@syntax-kind? (j29f9@j28cd@annotation-expression j32a7@x) j32a8@p?) (j32a8@p? j32a7@x))))) (set! j4b31@j2ea1@syntax-kind? j2ea1@syntax-kind?) (set! j2ea3@syntax-vector->list (lambda (j32ab@x) (if (j2e7f@stx? j32ab@x) (let ((j32ad@ls (j2ea3@syntax-vector->list (j2e81@stx-expr j32ab@x))) (j32ae@m* (j2e85@stx-mark* j32ab@x)) (j32af@s* (j2e89@stx-subst* j32ab@x)) (j32b0@ae* (j2e8d@stx-ae* j32ab@x))) (map (lambda (j32b5@x) (j2e9b@mkstx j32b5@x j32ae@m* j32af@s* j32b0@ae*)) j32ad@ls)) (if (j29f7@j28c9@annotation? j32ab@x) (j2ea3@syntax-vector->list (j29f9@j28cd@annotation-expression j32ab@x)) (if (vector? j32ab@x) (vector->list j32ab@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" j32ab@x)))))) (set! j4b32@j2ea3@syntax-vector->list j2ea3@syntax-vector->list) (set! j2ea5@syntax-pair? (lambda (j32b7@x) (j2ea1@syntax-kind? j32b7@x pair?))) (set! j4b33@j2ea5@syntax-pair? j2ea5@syntax-pair?) (set! j2ea7@syntax-vector? (lambda (j32b9@x) (j2ea1@syntax-kind? j32b9@x vector?))) (set! j4b34@j2ea7@syntax-vector? j2ea7@syntax-vector?) (set! j2ea9@syntax-null? (lambda (j32bb@x) (j2ea1@syntax-kind? j32bb@x null?))) (set! j4b35@j2ea9@syntax-null? j2ea9@syntax-null?) (set! j2eab@syntax-list? (lambda (j32bd@x) (or (j2ea9@syntax-null? j32bd@x) (and (j2ea5@syntax-pair? j32bd@x) (j2eab@syntax-list? (j2eaf@syntax-cdr j32bd@x)))))) (set! j4b36@j2eab@syntax-list? j2eab@syntax-list?) (set! j2ead@syntax-car (lambda (j32bf@x) (if (j2e7f@stx? j32bf@x) (j2e9b@mkstx (j2ead@syntax-car (j2e81@stx-expr j32bf@x)) (j2e85@stx-mark* j32bf@x) (j2e89@stx-subst* j32bf@x) (j2e8d@stx-ae* j32bf@x)) (if (j29f7@j28c9@annotation? j32bf@x) (j2ead@syntax-car (j29f9@j28cd@annotation-expression j32bf@x)) (if (pair? j32bf@x) (car j32bf@x) (assertion-violation 'syntax-car '"BUG: not a pair" j32bf@x)))))) (set! j4b37@j2ead@syntax-car j2ead@syntax-car) (set! j2eaf@syntax-cdr (lambda (j32c1@x) (if (j2e7f@stx? j32c1@x) (j2e9b@mkstx (j2eaf@syntax-cdr (j2e81@stx-expr j32c1@x)) (j2e85@stx-mark* j32c1@x) (j2e89@stx-subst* j32c1@x) (j2e8d@stx-ae* j32c1@x)) (if (j29f7@j28c9@annotation? j32c1@x) (j2eaf@syntax-cdr (j29f9@j28cd@annotation-expression j32c1@x)) (if (pair? j32c1@x) (cdr j32c1@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" j32c1@x)))))) (set! j4b38@j2eaf@syntax-cdr j2eaf@syntax-cdr) (set! j2eb1@syntax->list (lambda (j32c3@x) (if (j2ea5@syntax-pair? j32c3@x) (cons (j2ead@syntax-car j32c3@x) (j2eb1@syntax->list (j2eaf@syntax-cdr j32c3@x))) (if (j2ea9@syntax-null? j32c3@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" j32c3@x))))) (set! j4b39@j2eb1@syntax->list j2eb1@syntax->list) (set! j2eb3@id? (lambda (j32c5@x) (and (j2e7f@stx? j32c5@x) (symbol? (j2e81@stx-expr j32c5@x))))) (set! j4b3a@j2eb3@id? j2eb3@id?) (set! j2eb5@id->sym (lambda (j32c7@x) (j2e81@stx-expr j32c7@x))) (set! j4b3b@j2eb5@id->sym j2eb5@id->sym) (set! j2eb7@bound-id=? (lambda (j32c9@x j32ca@y) (and (eq? (j2eb5@id->sym j32c9@x) (j2eb5@id->sym j32ca@y)) (same-marks? (j2e85@stx-mark* j32c9@x) (j2e85@stx-mark* j32ca@y))))) (set! j4b3c@j2eb7@bound-id=? j2eb7@bound-id=?) (set! j2eb9@free-id=? (lambda (j32cd@i j32ce@j) (let ((j32d1@t0 (id->real-label j32cd@i)) (j32d2@t1 (id->real-label j32ce@j))) (if (or j32d1@t0 j32d2@t1) (eq? j32d1@t0 j32d2@t1) (eq? (j2eb5@id->sym j32cd@i) (j2eb5@id->sym j32ce@j)))))) (set! j4b3d@j2eb9@free-id=? j2eb9@free-id=?) (set! j2ebb@valid-bound-ids? (lambda (j32d5@id*) (and (for-all j2eb3@id? j32d5@id*) (j2ebd@distinct-bound-ids? j32d5@id*)))) (set! j4b3e@j2ebb@valid-bound-ids? j2ebb@valid-bound-ids?) (set! j2ebd@distinct-bound-ids? (lambda (j32d7@id*) (or (null? j32d7@id*) (and (not (j2ebf@bound-id-member? (car j32d7@id*) (cdr j32d7@id*))) (j2ebd@distinct-bound-ids? (cdr j32d7@id*)))))) (set! j4b3f@j2ebd@distinct-bound-ids? j2ebd@distinct-bound-ids?) (set! j2ebf@bound-id-member? (lambda (j32d9@id j32da@id*) (and (pair? j32da@id*) (or (j2eb7@bound-id=? j32d9@id (car j32da@id*)) (j2ebf@bound-id-member? j32d9@id (cdr j32da@id*)))))) (set! j4b40@j2ebf@bound-id-member? j2ebf@bound-id-member?) (set! j2ec1@self-evaluating? (lambda (j32dd@x) (or (number? j32dd@x) (string? j32dd@x) (char? j32dd@x) (boolean? j32dd@x) (regexp? j32dd@x) (bytevector? j32dd@x)))) (set! j4b41@j2ec1@self-evaluating? j2ec1@self-evaluating?) (set! j2ec3@strip-annotations (lambda (j32df@x) (if (pair? j32df@x) (cons (j2ec3@strip-annotations (car j32df@x)) (j2ec3@strip-annotations (cdr j32df@x))) (if (vector? j32df@x) (vector-map j2ec3@strip-annotations j32df@x) (if (j29f7@j28c9@annotation? j32df@x) (j29f6@j28c7@annotation-stripped j32df@x) j32df@x))))) (set! j4b42@j2ec3@strip-annotations j2ec3@strip-annotations) (set! j2ec5@strip (lambda (j32e1@x j32e2@m*) (if (j2e39@top-marked? j32e2@m*) (if (or (j29f7@j28c9@annotation? j32e1@x) (and (pair? j32e1@x) (j29f7@j28c9@annotation? (car j32e1@x))) (and (vector? j32e1@x) (> (vector-length j32e1@x) '0) (j29f7@j28c9@annotation? (vector-ref j32e1@x '0)))) (j2ec3@strip-annotations j32e1@x) j32e1@x) (let j32e7@f ((j32e5@x j32e1@x)) (if (j2e7f@stx? j32e5@x) (begin (if (pair? (j2e81@stx-expr j32e5@x)) (begin (set-source-info! (j2e81@stx-expr j32e5@x) '#f) (set-source-info! (cdr (j2e81@stx-expr j32e5@x)) '#f) (set-source-info! (car (j2e81@stx-expr j32e5@x)) '#f)) (void)) (j2ec5@strip (j2e81@stx-expr j32e5@x) (j2e85@stx-mark* j32e5@x))) (if (j29f7@j28c9@annotation? j32e5@x) (j29f6@j28c7@annotation-stripped j32e5@x) (if (pair? j32e5@x) (let ((j32e9@a (j32e7@f (car j32e5@x))) (j32ea@d (j32e7@f (cdr j32e5@x)))) (if (and (eq? j32e9@a (car j32e5@x)) (eq? j32ea@d (cdr j32e5@x))) j32e5@x (cons j32e9@a j32ea@d))) (if (vector? j32e5@x) (let ((j32ed@old (vector->list j32e5@x))) (let ((j32ef@new (map j32e7@f j32ed@old))) (if (for-all eq? j32ed@old j32ef@new) j32e5@x (list->vector j32ef@new)))) j32e5@x)))))))) (set! j4b43@j2ec5@strip j2ec5@strip) (set! j2ec7@stx->datum (lambda (j32f1@x) (j2ec5@strip j32f1@x '()))) (set! j4b44@j2ec7@stx->datum j2ec7@stx->datum) (set! j2ec9@id->label (lambda (j32f3@id) (or (id->real-label j32f3@id) (let ((j32f5@t (j31aa@top-level-context))) (if j32f5@t ((lambda (j32f7@env) (let ((j32f9@rib (j315a@interaction-env-rib j32f7@env))) (call-with-values (lambda () (j2e43@gen-define-label+loc j32f3@id j32f9@rib)) (lambda (j32ff@j32fc j3300@j32fe) (let ((j3303@loc_ j3300@j32fe) (j3304@lab j32ff@j32fc)) (begin (j2e69@extend-rib! j32f9@rib j32f3@id j3304@lab) j3304@lab)))))) j32f5@t) '#f))))) (set! j4b45@j2ec9@id->label j2ec9@id->label) (set! j2ecb@label->binding (lambda (j3307@x j3308@r) (let ((j330b@t (j2cce@j2b1b@imported-label->binding j3307@x))) (if j330b@t ((lambda (j330d@b) (if (and (pair? j330d@b) (eq? (car j330d@b) '$core-rtd)) (cons '$rtd (map j3070@bless (cdr j330d@b))) (if (and (pair? j330d@b) (eq? (car j330d@b) 'global-rtd)) (let ((j330f@lib (cadr j330d@b)) (j3310@loc (cddr j330d@b))) (cons '$rtd (symbol-value j3310@loc))) j330d@b))) j330b@t) (let ((j3313@t (assq j3307@x j3308@r))) (if j3313@t (cdr j3313@t) (let ((j3315@t (j31aa@top-level-context))) (if j3315@t ((lambda (j3317@env) (let ((j3319@t (assq j3307@x (j3162@interaction-env-locs j3317@env)))) (if j3319@t ((lambda (j331b@p) (cons* 'lexical (cdr j331b@p) '#f)) j3319@t) '(displaced-lexical . #f)))) j3315@t) '(displaced-lexical . #f))))))))) (set! j4b46@j2ecb@label->binding j2ecb@label->binding) (set! j2ecd@make-binding cons) (set! j4b47@j2ecd@make-binding j2ecd@make-binding) (set! j2ecf@binding-type car) (set! j4b48@j2ecf@binding-type j2ecf@binding-type) (set! j2ed1@binding-value cdr) (set! j4b49@j2ed1@binding-value j2ed1@binding-value) (set! j2ed3@raise-unbound-error (lambda (j331d@id) (j3198@syntax-violation* '#f '"unbound identifier" j331d@id (make-undefined-violation)))) (set! j4b4a@j2ed3@raise-unbound-error j2ed3@raise-unbound-error) (set! j2ed5@syntax-type (lambda (j331f@e j3320@r) (if (j2eb3@id? j331f@e) (let ((j3323@id j331f@e)) (let ((j3325@label (j2ec9@id->label j3323@id))) (let ((j3327@b (j2ecb@label->binding j3325@label j3320@r))) (let ((j3329@type (j2ecf@binding-type j3327@b))) (begin (if (not j3325@label) (j2ed3@raise-unbound-error j3323@id) (void)) (let ((j332b@t j3329@type)) (if (memv j332b@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values j3329@type (j2ed1@binding-value j3327@b) j3323@id) (values 'other '#f '#f)))))))) (if (j2ea5@syntax-pair? j331f@e) (let ((j332d@id (j2ead@syntax-car j331f@e))) (if (j2eb3@id? j332d@id) (let ((j332f@label (j2ec9@id->label j332d@id))) (let ((j3331@b (j2ecb@label->binding j332f@label j3320@r))) (let ((j3333@type (j2ecf@binding-type j3331@b))) (begin (if (not j332f@label) (j2ed3@raise-unbound-error j332d@id) (void)) (let ((j3335@t j3333@type)) (if (memv j3335@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values j3333@type (j2ed1@binding-value j3331@b) j332d@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((j3337@d (j2ec7@stx->datum j331f@e))) (if (j2ec1@self-evaluating? j3337@d) (values 'constant j3337@d '#f) (values 'other '#f '#f))))))) (set! j4b4b@j2ed5@syntax-type j2ed5@syntax-type) (set! j2ee3@sanitize-binding (lambda (j3339@x j333a@src) (if (procedure? j3339@x) (cons* 'local-macro j3339@x j333a@src) (if (and (pair? j3339@x) (eq? (car j3339@x) 'macro!) (procedure? (cdr j3339@x))) (cons* 'local-macro! (cdr j3339@x) j333a@src) (if (and (pair? j3339@x) (eq? (car j3339@x) '$rtd)) j3339@x (assertion-violation 'expand '"invalid transformer" j3339@x)))))) (set! j4b4c@j2ee3@sanitize-binding j2ee3@sanitize-binding) (set! j2ee5@make-variable-transformer (lambda (j333d@x) (if (procedure? j333d@x) (cons 'macro! j333d@x) (assertion-violation 'make-variable-transformer '"not a procedure" j333d@x)))) (set! j4b4d@j2ee5@make-variable-transformer j2ee5@make-variable-transformer) (set! j2ee7@variable-transformer? (lambda (j333f@x) (and (pair? j333f@x) (eq? (car j333f@x) 'macro!) (procedure? (cdr j333f@x))))) (set! j4b4e@j2ee7@variable-transformer? j2ee7@variable-transformer?) (set! j2ee9@variable-transformer-procedure (lambda (j3341@x) (if (j2ee7@variable-transformer? j3341@x) (cdr j3341@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" j3341@x)))) (set! j4b4f@j2ee9@variable-transformer-procedure j2ee9@variable-transformer-procedure) (set! j2eeb@make-eval-transformer (lambda (j3343@x) (j2ee3@sanitize-binding (eval-core (j2a59@j2a11@expanded->core j3343@x)) j3343@x))) (set! j4b50@j2eeb@make-eval-transformer j2eeb@make-eval-transformer) (set! j303c@parse-define (lambda (j3345@x) (let ((j3347@t j3345@x)) (let ((j3349@ls/false (j30ba@syntax-dispatch j3347@t '(_ (any . any) any . each-any)))) (if (and j3349@ls/false (apply (lambda (j334b@id j334c@fmls j334d@b j334e@b*) (j2eb3@id? j334b@id)) j3349@ls/false)) (apply (lambda (j3353@id j3354@fmls j3355@b j3356@b*) (begin (j30e0@verify-formals j3354@fmls j3345@x) (values j3353@id (cons 'defun (cons j3354@fmls (cons j3355@b j3356@b*)))))) j3349@ls/false) (let ((j335b@t j3347@t)) (let ((j335d@ls/false (j30ba@syntax-dispatch j335b@t '(_ any any)))) (if (and j335d@ls/false (apply (lambda (j335f@id j3360@val) (j2eb3@id? j335f@id)) j335d@ls/false)) (apply (lambda (j3363@id j3364@val) (values j3363@id (cons 'expr j3364@val))) j335d@ls/false) (let ((j3367@t j335b@t)) (let ((j3369@ls/false (j30ba@syntax-dispatch j3367@t '(_ any)))) (if (and j3369@ls/false (apply (lambda (j336b@id) (j2eb3@id? j336b@id)) j3369@ls/false)) (apply (lambda (j336d@id) (values j336d@id (cons 'expr (j3070@bless '(void))))) j3369@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3367@t)))))))))))) (set! j4b51@j303c@parse-define j303c@parse-define) (set! j303e@parse-define-syntax (lambda (j336f@x) (let ((j3371@t j336f@x)) (let ((j3373@ls/false (j30ba@syntax-dispatch j3371@t '(_ any any)))) (if (and j3373@ls/false (apply (lambda (j3375@id j3376@val) (j2eb3@id? j3375@id)) j3373@ls/false)) (apply (lambda (j3379@id j337a@val) (values j3379@id j337a@val)) j3373@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3371@t)))))) (set! j4b52@j303e@parse-define-syntax j303e@parse-define-syntax) (set! j3040@scheme-stx-hashtable (make-eq-hashtable)) (set! j4b53@j3040@scheme-stx-hashtable j3040@scheme-stx-hashtable) (set! j3042@scheme-stx (lambda (j337d@sym) (or (hashtable-ref j3040@scheme-stx-hashtable j337d@sym '#f) (let ((j337f@subst (j2caa@j2ad3@library-subst (j2cc8@j2b0f@find-library-by-name '(psyntax system $all))))) (let ((j3381@stx (make-simple-struct 'stx '5 (list j337d@sym j2e37@top-mark* '() '())))) (let ((j3383@stx (let ((j3385@t (assq j337d@sym j337f@subst))) (if j3385@t ((lambda (j3387@x) (let ((j3389@name (car j3387@x)) (j338a@label (cdr j3387@x))) (j2e9f@add-subst (make-simple-struct 'rib '6 (list (list j3389@name) (list j2e37@top-mark*) (list j338a@label) '#f '#f)) j3381@stx))) j3385@t) j3381@stx)))) (begin (hashtable-set! j3040@scheme-stx-hashtable j337d@sym j3383@stx) j3383@stx))))))) (set! j4b54@j3042@scheme-stx j3042@scheme-stx) (set! j3044@lexical-var car) (set! j4b55@j3044@lexical-var j3044@lexical-var) (set! j3046@lexical-mutable? cdr) (set! j4b56@j3046@lexical-mutable? j3046@lexical-mutable?) (set! j3048@set-lexical-mutable! set-cdr!) (set! j4b57@j3048@set-lexical-mutable! j3048@set-lexical-mutable!) (set! j304a@add-lexical (lambda (j338d@lab j338e@lex j338f@r) (cons (cons* j338d@lab 'lexical j338e@lex '#f) j338f@r))) (set! j4b58@j304a@add-lexical j304a@add-lexical) (set! j304c@add-lexicals (lambda (j3393@lab* j3394@lex* j3395@r) (if (null? j3393@lab*) j3395@r (j304c@add-lexicals (cdr j3393@lab*) (cdr j3394@lex*) (j304a@add-lexical (car j3393@lab*) (car j3394@lex*) j3395@r))))) (set! j4b59@j304c@add-lexicals j304c@add-lexicals) (set! j304e@letrec-helper (lambda (j3399@e j339a@r j339b@mr j339c@build) (let ((j33a1@t j3399@e)) (let ((j33a3@ls/false (j30ba@syntax-dispatch j33a1@t '(_ #(each (any any)) any . each-any)))) (if j33a3@ls/false (apply (lambda (j33a5@lhs* j33a6@rhs* j33a7@b j33a8@b*) (if (not (j2ebb@valid-bound-ids? j33a5@lhs*)) (j3074@invalid-fmls-error j3399@e j33a5@lhs*) (let ((j33ad@lex* (map j2e3b@gen-lexical j33a5@lhs*)) (j33ae@lab* (map j2e3f@gen-label j33a5@lhs*))) (let ((j33b1@rib (j2e73@make-full-rib j33a5@lhs* j33ae@lab*)) (j33b2@r (j304c@add-lexicals j33ae@lab* j33ad@lex* j339a@r))) (let ((j33b5@body (j30f2@chi-internal (j2e9f@add-subst j33b1@rib (cons j33a7@b j33a8@b*)) j33b2@r j339b@mr)) (j33b6@rhs* (j30d8@chi-expr* (map (lambda (j33b9@x) (j2e9f@add-subst j33b1@rib j33b9@x)) j33a6@rhs*) j33b2@r j339b@mr))) (j339c@build '#f j33ad@lex* j33b6@rhs* j33b5@body)))))) j33a3@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j33a1@t)))))) (set! j4b5a@j304e@letrec-helper j304e@letrec-helper) (set! j3050@let-transformer (lambda (j33bb@e j33bc@r j33bd@mr) (let ((j33c1@t j33bb@e)) (let ((j33c3@ls/false (j30ba@syntax-dispatch j33c1@t '(_ #(each (any any)) any . each-any)))) (if j33c3@ls/false (apply (lambda (j33c5@lhs* j33c6@rhs* j33c7@b j33c8@b*) (if (not (j2ebb@valid-bound-ids? j33c5@lhs*)) (j3074@invalid-fmls-error j33bb@e j33c5@lhs*) (let ((j33cd@lex* (map j2e3b@gen-lexical j33c5@lhs*)) (j33ce@lab* (map j2e3f@gen-label j33c5@lhs*)) (j33cf@rhs* (j30d8@chi-expr* j33c6@rhs* j33bc@r j33bd@mr))) (let ((j33d3@rib (j2e73@make-full-rib j33c5@lhs* j33ce@lab*)) (j33d4@r (j304c@add-lexicals j33ce@lab* j33cd@lex* j33bc@r))) (let ((j33d7@body (j30f2@chi-internal (j2e9f@add-subst j33d3@rib (cons j33c7@b j33c8@b*)) j33d4@r j33bd@mr))) (j2e1b@j2d7e@build-let '#f j33cd@lex* j33cf@rhs* j33d7@body)))))) j33c3@ls/false) (let ((j33d9@t j33c1@t)) (let ((j33db@ls/false (j30ba@syntax-dispatch j33d9@t '(_ any #(each (any any)) any . each-any)))) (if j33db@ls/false (apply (lambda (j33dd@loop j33de@lhs* j33df@rhs* j33e0@b j33e1@b*) (if (not (j2ebb@valid-bound-ids? j33de@lhs*)) (j3074@invalid-fmls-error j33bb@e j33de@lhs*) (let ((j33e7@lex* (map j2e3b@gen-lexical j33de@lhs*)) (j33e8@lab* (map j2e3f@gen-label j33de@lhs*)) (j33e9@rhs* (j30d8@chi-expr* j33df@rhs* j33bc@r j33bd@mr)) (j33ea@loop-lex (j2e3b@gen-lexical j33dd@loop)) (j33eb@loop-lab (j2e3f@gen-label j33dd@loop))) (let ((j33f1@loop-rib (j2e73@make-full-rib (list j33dd@loop) (list j33eb@loop-lab))) (j33f2@rib (j2e73@make-full-rib j33de@lhs* j33e8@lab*)) (j33f3@r (j304c@add-lexicals (cons j33eb@loop-lab j33e8@lab*) (cons j33ea@loop-lex j33e7@lex*) j33bc@r))) (let ((j33f7@body (j30f2@chi-internal (j2e9f@add-subst j33f1@loop-rib (j2e9f@add-subst j33f2@rib (cons j33e0@b j33e1@b*))) j33f3@r j33bd@mr))) (j2e1c@j2d80@build-named-let '#f j33ea@loop-lex j33e7@lex* j33e9@rhs* j33f7@body)))))) j33db@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j33d9@t))))))))) (set! j4b5b@j3050@let-transformer j3050@let-transformer) (set! j3052@letrec-transformer (lambda (j33f9@e j33fa@r j33fb@mr) (j304e@letrec-helper j33f9@e j33fa@r j33fb@mr j2e1a@j2d7c@build-letrec))) (set! j4b5c@j3052@letrec-transformer j3052@letrec-transformer) (set! j3054@letrec*-transformer (lambda (j33ff@e j3400@r j3401@mr) (j304e@letrec-helper j33ff@e j3400@r j3401@mr j2e1d@j2d82@build-letrec*))) (set! j4b5d@j3054@letrec*-transformer j3054@letrec*-transformer) (set! j3056@fluid-let-syntax-transformer (lambda (j3405@e j3406@r j3407@mr) (letrec* ((j340c@lookup (lambda (j341f@x) (or (j2ec9@id->label j341f@x) (j319a@syntax-violation '#f '"unbound identifier" j3405@e j341f@x))))) (let ((j340d@t j3405@e)) (let ((j340f@ls/false (j30ba@syntax-dispatch j340d@t '(_ #(each (any any)) any . each-any)))) (if j340f@ls/false (apply (lambda (j3411@lhs* j3412@rhs* j3413@b j3414@b*) (if (not (j2ebb@valid-bound-ids? j3411@lhs*)) (j3074@invalid-fmls-error j3405@e j3411@lhs*) (let ((j3419@lab* (map j340c@lookup j3411@lhs*)) (j341a@rhs* (map (lambda (j341d@x) (j2eeb@make-eval-transformer (j3114@expand-transformer j341d@x j3407@mr))) j3412@rhs*))) (j30f2@chi-internal (cons j3413@b j3414@b*) (append (map cons j3419@lab* j341a@rhs*) j3406@r) (append (map cons j3419@lab* j341a@rhs*) j3407@mr))))) j340f@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j340d@t))))))) (set! j4b5e@j3056@fluid-let-syntax-transformer j3056@fluid-let-syntax-transformer) (set! j3058@type-descriptor-transformer (lambda (j3421@e j3422@r j3423@mr) (let ((j3427@t j3421@e)) (let ((j3429@ls/false (j30ba@syntax-dispatch j3427@t '(_ any)))) (if (and j3429@ls/false (apply (lambda (j342b@id) (j2eb3@id? j342b@id)) j3429@ls/false)) (apply (lambda (j342d@id) (let ((j342f@lab (j2ec9@id->label j342d@id))) (let ((j3431@b (j2ecb@label->binding j342f@lab j3422@r))) (let ((j3433@type (j2ecf@binding-type j3431@b))) (begin (if (not j342f@lab) (j2ed3@raise-unbound-error j342d@id) (void)) (if (not (and (eq? j3433@type '$rtd) (not (list? (j2ed1@binding-value j3431@b))))) (j319a@syntax-violation '#f '"not a record type" j3421@e) (void)) (list 'quote (j2ed1@binding-value j3431@b))))))) j3429@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3427@t)))))) (set! j4b5f@j3058@type-descriptor-transformer j3058@type-descriptor-transformer) (set! j305a@record-type-descriptor-transformer (lambda (j3435@e j3436@r j3437@mr) (let ((j343b@t j3435@e)) (let ((j343d@ls/false (j30ba@syntax-dispatch j343b@t '(_ any)))) (if (and j343d@ls/false (apply (lambda (j343f@id) (j2eb3@id? j343f@id)) j343d@ls/false)) (apply (lambda (j3441@id) (let ((j3443@lab (j2ec9@id->label j3441@id))) (let ((j3445@b (j2ecb@label->binding j3443@lab j3436@r))) (let ((j3447@type (j2ecf@binding-type j3445@b))) (begin (if (not j3443@lab) (j2ed3@raise-unbound-error j3441@id) (void)) (if (not (and (eq? j3447@type '$rtd) (list? (j2ed1@binding-value j3445@b)))) (j319a@syntax-violation '#f '"not a record type" j3435@e) (void)) (j30dc@chi-expr (car (j2ed1@binding-value j3445@b)) j3436@r j3437@mr)))))) j343d@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j343b@t)))))) (set! j4b60@j305a@record-type-descriptor-transformer j305a@record-type-descriptor-transformer) (set! j305c@record-constructor-descriptor-transformer (lambda (j3449@e j344a@r j344b@mr) (let ((j344f@t j3449@e)) (let ((j3451@ls/false (j30ba@syntax-dispatch j344f@t '(_ any)))) (if (and j3451@ls/false (apply (lambda (j3453@id) (j2eb3@id? j3453@id)) j3451@ls/false)) (apply (lambda (j3455@id) (let ((j3457@lab (j2ec9@id->label j3455@id))) (let ((j3459@b (j2ecb@label->binding j3457@lab j344a@r))) (let ((j345b@type (j2ecf@binding-type j3459@b))) (begin (if (not j3457@lab) (j2ed3@raise-unbound-error j3455@id) (void)) (if (not (and (eq? j345b@type '$rtd) (list? (j2ed1@binding-value j3459@b)))) (j319a@syntax-violation '#f '"invalid type" j3449@e) (void)) (j30dc@chi-expr (cadr (j2ed1@binding-value j3459@b)) j344a@r j344b@mr)))))) j3451@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j344f@t)))))) (set! j4b61@j305c@record-constructor-descriptor-transformer j305c@record-constructor-descriptor-transformer) (set! j305e@when-macro (lambda (j345d@e) (let ((j345f@t j345d@e)) (let ((j3461@ls/false (j30ba@syntax-dispatch j345f@t '(_ any any . each-any)))) (if j3461@ls/false (apply (lambda (j3463@test j3464@e j3465@e*) (j3070@bless (list 'if j3463@test (cons 'begin (cons j3464@e j3465@e*))))) j3461@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j345f@t)))))) (set! j4b62@j305e@when-macro j305e@when-macro) (set! j3060@unless-macro (lambda (j3469@e) (let ((j346b@t j3469@e)) (let ((j346d@ls/false (j30ba@syntax-dispatch j346b@t '(_ any any . each-any)))) (if j346d@ls/false (apply (lambda (j346f@test j3470@e j3471@e*) (j3070@bless (list 'if (list 'not j346f@test) (cons 'begin (cons j3470@e j3471@e*))))) j346d@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j346b@t)))))) (set! j4b63@j3060@unless-macro j3060@unless-macro) (set! j3062@if-transformer (lambda (j3475@e j3476@r j3477@mr) (let ((j347b@t j3475@e)) (let ((j347d@ls/false (j30ba@syntax-dispatch j347b@t '(_ any any any)))) (if j347d@ls/false (apply (lambda (j347f@e0 j3480@e1 j3481@e2) (list 'if (j30dc@chi-expr j347f@e0 j3476@r j3477@mr) (j30dc@chi-expr j3480@e1 j3476@r j3477@mr) (j30dc@chi-expr j3481@e2 j3476@r j3477@mr))) j347d@ls/false) (let ((j3485@t j347b@t)) (let ((j3487@ls/false (j30ba@syntax-dispatch j3485@t '(_ any any)))) (if j3487@ls/false (apply (lambda (j3489@e0 j348a@e1) (list 'if (j30dc@chi-expr j3489@e0 j3476@r j3477@mr) (j30dc@chi-expr j348a@e1 j3476@r j3477@mr) (j2e19@j2d7a@build-void))) j3487@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3485@t))))))))) (set! j4b64@j3062@if-transformer j3062@if-transformer) (set! j3064@and-transformer (lambda (j348d@e j348e@r j348f@mr) (let ((j3493@t j348d@e)) (let ((j3495@ls/false (j30ba@syntax-dispatch j3493@t '(_ . each-any)))) (if j3495@ls/false (apply (lambda (j3497@e*) (cons 'and (j30d8@chi-expr* j3497@e* j348e@r j348f@mr))) j3495@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3493@t)))))) (set! j4b65@j3064@and-transformer j3064@and-transformer) (set! j3066@or-transformer (lambda (j3499@e j349a@r j349b@mr) (let ((j349f@t j3499@e)) (let ((j34a1@ls/false (j30ba@syntax-dispatch j349f@t '(_ . each-any)))) (if j34a1@ls/false (apply (lambda (j34a3@e*) (cons 'or (j30d8@chi-expr* j34a3@e* j349a@r j349b@mr))) j34a1@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j349f@t)))))) (set! j4b66@j3066@or-transformer j3066@or-transformer) (set! j3068@case-macro (lambda (j34a5@e) (letrec* ((j34a8@build-last (lambda (j34cf@cls) (let ((j34d1@t j34cf@cls)) (let ((j34d3@ls/false (j30ba@syntax-dispatch j34d1@t '(#(scheme-id else) any . each-any)))) (if j34d3@ls/false (apply (lambda (j34d5@e j34d6@e*) (cons 'begin (cons j34d5@e j34d6@e*))) j34d3@ls/false) (let ((j34d9@t j34d1@t)) (let ((j34db@ls/false (j30ba@syntax-dispatch j34d9@t '_))) (if j34db@ls/false (apply (lambda () (j34aa@build-one j34cf@cls '(if #f #f))) j34db@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j34d9@t))))))))) (j34aa@build-one (lambda (j34c1@cls j34c2@k) (let ((j34c5@t j34c1@cls)) (let ((j34c7@ls/false (j30ba@syntax-dispatch j34c5@t '(each-any any . each-any)))) (if j34c7@ls/false (apply (lambda (j34c9@d* j34ca@e j34cb@e*) (list 'if (list 'memv 't (list 'quote j34c9@d*)) (cons 'begin (cons j34ca@e j34cb@e*)) j34c2@k)) j34c7@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j34c5@t))))))) (let ((j34ab@t j34a5@e)) (let ((j34ad@ls/false (j30ba@syntax-dispatch j34ab@t '(_ any)))) (if j34ad@ls/false (apply (lambda (j34af@expr) (j3070@bless (cons 'let (cons (list (list 't j34af@expr)) '((if #f #f)))))) j34ad@ls/false) (let ((j34b1@t j34ab@t)) (let ((j34b3@ls/false (j30ba@syntax-dispatch j34b1@t '(_ any any . each-any)))) (if j34b3@ls/false (apply (lambda (j34b5@expr j34b6@cls j34b7@cls*) (j3070@bless (list 'let (list (list 't j34b5@expr)) (let j34bf@f ((j34bb@cls j34b6@cls) (j34bc@cls* j34b7@cls*)) (if (null? j34bc@cls*) (j34a8@build-last j34bb@cls) (j34aa@build-one j34bb@cls (j34bf@f (car j34bc@cls*) (cdr j34bc@cls*)))))))) j34b3@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j34b1@t)))))))))) (set! j4b67@j3068@case-macro j3068@case-macro) (set! j306a@quote-transformer (lambda (j34dd@e j34de@r j34df@mr) (let ((j34e3@t j34dd@e)) (let ((j34e5@ls/false (j30ba@syntax-dispatch j34e3@t '(_ any)))) (if j34e5@ls/false (apply (lambda (j34e7@datum) (list 'quote (j2ec7@stx->datum j34e7@datum))) j34e5@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j34e3@t)))))) (set! j4b68@j306a@quote-transformer j306a@quote-transformer) (set! j306c@case-lambda-transformer (lambda (j34e9@e j34ea@r j34eb@mr) (let ((j34ef@t j34e9@e)) (let ((j34f1@ls/false (j30ba@syntax-dispatch j34ef@t '(_ . #(each (any any . each-any)))))) (if j34f1@ls/false (apply (lambda (j34f3@fmls* j34f4@b* j34f5@b**) (call-with-values (lambda () (j30e4@chi-lambda-clause* j34e9@e j34f3@fmls* (map cons j34f4@b* j34f5@b**) j34ea@r j34eb@mr)) (lambda (j34fd@j34fa j34fe@j34fc) (let ((j3501@body* j34fe@j34fc) (j3502@fmls* j34fd@j34fa)) (j2e17@j2d4a@build-case-lambda '#f j3502@fmls* j3501@body*))))) j34f1@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j34ef@t)))))) (set! j4b69@j306c@case-lambda-transformer j306c@case-lambda-transformer) (set! j306e@lambda-transformer (lambda (j3505@e j3506@r j3507@mr) (let ((j350b@t j3505@e)) (let ((j350d@ls/false (j30ba@syntax-dispatch j350b@t '(_ any any . each-any)))) (if j350d@ls/false (apply (lambda (j350f@fmls j3510@b j3511@b*) (call-with-values (lambda () (j30e2@chi-lambda-clause j3505@e j350f@fmls (cons j3510@b j3511@b*) j3506@r j3507@mr)) (lambda (j3519@j3516 j351a@j3518) (let ((j351d@body j351a@j3518) (j351e@fmls j3519@j3516)) (j2e16@j2d48@build-lambda '#f j351e@fmls j351d@body))))) j350d@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j350b@t)))))) (set! j4b6a@j306e@lambda-transformer j306e@lambda-transformer) (set! j3070@bless (lambda (j3521@x) (j2e9b@mkstx (let j3525@f ((j3523@x j3521@x)) (if (j2e7f@stx? j3523@x) j3523@x (if (pair? j3523@x) (cons (j3525@f (car j3523@x)) (j3525@f (cdr j3523@x))) (if (symbol? j3523@x) (j3042@scheme-stx j3523@x) (if (vector? j3523@x) (vector-map j3525@f j3523@x) j3523@x))))) '() '() '()))) (set! j4b6b@j3070@bless j3070@bless) (set! j3072@with-syntax-macro (lambda (j3527@e) (let ((j3529@t j3527@e)) (let ((j352b@ls/false (j30ba@syntax-dispatch j3529@t '(_ #(each (any any)) any . each-any)))) (if j352b@ls/false (apply (lambda (j352d@pat* j352e@expr* j352f@b j3530@b*) (let ((j3535@idn* (let j3539@f ((j3537@pat* j352d@pat*)) (if (null? j3537@pat*) '() (call-with-values (lambda () (j30b8@convert-pattern (car j3537@pat*) '())) (lambda (j353f@j353c j3540@j353e) (let ((j3543@idn* j3540@j353e) (j3544@pat j353f@j353c)) (append j3543@idn* (j3539@f (cdr j3537@pat*)))))))))) (begin (j30e0@verify-formals (map car j3535@idn*) j3527@e) (let ((j3547@t* (j3188@generate-temporaries j352e@expr*))) (j3070@bless (list 'let (map list j3547@t* j352e@expr*) (let j354d@f ((j3549@pat* j352d@pat*) (j354a@t* j3547@t*)) (if (null? j3549@pat*) (cons 'begin (cons '#f (cons j352f@b j3530@b*))) (list 'syntax-case (car j354a@t*) '() (list (car j3549@pat*) (j354d@f (cdr j3549@pat*) (cdr j354a@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car j3549@pat*)) (car j354a@t*)))))))))))) j352b@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3529@t)))))) (set! j4b6c@j3072@with-syntax-macro j3072@with-syntax-macro) (set! j3074@invalid-fmls-error (lambda (j354f@stx j3550@fmls) (let ((j3553@t j3550@fmls)) (let ((j3555@ls/false (j30ba@syntax-dispatch j3553@t '#(each+ any () any)))) (if j3555@ls/false (apply (lambda (j3557@id* j3558@last) (let j355d@f ((j355b@id* (if (j2eb3@id? j3558@last) (cons j3558@last j3557@id*) (if (j2ea9@syntax-null? j3558@last) j3557@id* (j319a@syntax-violation '#f '"not an identifier" j354f@stx j3558@last))))) (if (null? j355b@id*) (values) (if (not (j2eb3@id? (car j355b@id*))) (j319a@syntax-violation '#f '"not an identifier" j354f@stx (car j355b@id*)) (begin (j355d@f (cdr j355b@id*)) (if (j2ebf@bound-id-member? (car j355b@id*) (cdr j355b@id*)) (j319a@syntax-violation '#f '"duplicate binding" j354f@stx (car j355b@id*)) (void))))))) j3555@ls/false) (let ((j355f@t j3553@t)) (let ((j3561@ls/false (j30ba@syntax-dispatch j355f@t '_))) (if j3561@ls/false (apply (lambda () (j319a@syntax-violation '#f '"malformed binding form" j354f@stx j3550@fmls)) j3561@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j355f@t))))))))) (set! j4b6d@j3074@invalid-fmls-error j3074@invalid-fmls-error) (set! j3076@let-macro (lambda (j3563@stx) (let ((j3565@t j3563@stx)) (let ((j3567@ls/false (j30ba@syntax-dispatch j3565@t '(_ #(each (any any)) any . each-any)))) (if j3567@ls/false (apply (lambda (j3569@lhs* j356a@rhs* j356b@b j356c@b*) (if (j2ebb@valid-bound-ids? j3569@lhs*) (j3070@bless (cons (cons 'lambda (cons j3569@lhs* (cons j356b@b j356c@b*))) j356a@rhs*)) (j3074@invalid-fmls-error j3563@stx j3569@lhs*))) j3567@ls/false) (let ((j3571@t j3565@t)) (let ((j3573@ls/false (j30ba@syntax-dispatch j3571@t '(_ any #(each (any any)) any . each-any)))) (if (and j3573@ls/false (apply (lambda (j3575@f j3576@lhs* j3577@rhs* j3578@b j3579@b*) (j2eb3@id? j3575@f)) j3573@ls/false)) (apply (lambda (j357f@f j3580@lhs* j3581@rhs* j3582@b j3583@b*) (if (j2ebb@valid-bound-ids? j3580@lhs*) (j3070@bless (cons (list 'letrec (list (list j357f@f (cons 'lambda (cons j3580@lhs* (cons j3582@b j3583@b*))))) j357f@f) j3581@rhs*)) (j3074@invalid-fmls-error j3563@stx j3580@lhs*))) j3573@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3571@t))))))))) (set! j4b6e@j3076@let-macro j3076@let-macro) (set! j3078@let-values-macro (lambda (j3589@stx) (letrec* ((j358c@rename (lambda (j35f1@x j35f2@old* j35f3@new*) (begin (if (not (j2eb3@id? j35f1@x)) (j319a@syntax-violation '#f '"not an indentifier" j3589@stx j35f1@x) (void)) (if (j2ebf@bound-id-member? j35f1@x j35f2@old*) (j319a@syntax-violation '#f '"duplicate binding" j3589@stx j35f1@x) (void)) (let ((j35f7@y (gensym (j31a0@syntax->datum j35f1@x)))) (values j35f7@y (cons j35f1@x j35f2@old*) (cons j35f7@y j35f3@new*)))))) (j358e@rename* (lambda (j35df@x* j35e0@old* j35e1@new*) (if (null? j35df@x*) (values '() j35e0@old* j35e1@new*) (call-with-values (lambda () (j358c@rename (car j35df@x*) j35e0@old* j35e1@new*)) (lambda (j35e5@x j35e6@old* j35e7@new*) (call-with-values (lambda () (j358e@rename* (cdr j35df@x*) j35e6@old* j35e7@new*)) (lambda (j35eb@x* j35ec@old* j35ed@new*) (values (cons j35e5@x j35eb@x*) j35ec@old* j35ed@new*))))))))) (let ((j358f@t j3589@stx)) (let ((j3591@ls/false (j30ba@syntax-dispatch j358f@t '(_ () any . each-any)))) (if j3591@ls/false (apply (lambda (j3593@b j3594@b*) (cons* (j3070@bless 'let) '() j3593@b j3594@b*)) j3591@ls/false) (let ((j3597@t j358f@t)) (let ((j3599@ls/false (j30ba@syntax-dispatch j3597@t '(_ #(each (any any)) any . each-any)))) (if j3599@ls/false (apply (lambda (j359b@lhs* j359c@rhs* j359d@b j359e@b*) (j3070@bless (let j35ab@f ((j35a3@lhs* j359b@lhs*) (j35a4@rhs* j359c@rhs*) (j35a5@old* '()) (j35a6@new* '())) (if (null? j35a3@lhs*) (cons 'let (cons (map list j35a5@old* j35a6@new*) (cons j359d@b j359e@b*))) (let ((j35ad@t (car j35a3@lhs*))) (let ((j35af@ls/false (j30ba@syntax-dispatch j35ad@t 'each-any))) (if j35af@ls/false (apply (lambda (j35b1@x*) (call-with-values (lambda () (j358e@rename* j35b1@x* j35a5@old* j35a6@new*)) (lambda (j35b9@j35b4 j35ba@j35b6 j35bb@j35b8) (let ((j35bf@new* j35bb@j35b8) (j35c0@old* j35ba@j35b6) (j35c1@y* j35b9@j35b4)) (list 'call-with-values (list 'lambda '() (car j35a4@rhs*)) (list 'lambda j35c1@y* (j35ab@f (cdr j35a3@lhs*) (cdr j35a4@rhs*) j35c0@old* j35bf@new*))))))) j35af@ls/false) (let ((j35c5@t j35ad@t)) (let ((j35c7@ls/false (j30ba@syntax-dispatch j35c5@t '#(each+ any () any)))) (if j35c7@ls/false (apply (lambda (j35c9@x* j35ca@x) (call-with-values (lambda () (j358c@rename j35ca@x j35a5@old* j35a6@new*)) (lambda (j35cd@y j35ce@old* j35cf@new*) (call-with-values (lambda () (j358e@rename* j35c9@x* j35ce@old* j35cf@new*)) (lambda (j35d3@y* j35d4@old* j35d5@new*) (list 'call-with-values (list 'lambda '() (car j35a4@rhs*)) (list 'lambda (append j35d3@y* j35cd@y) (j35ab@f (cdr j35a3@lhs*) (cdr j35a4@rhs*) j35d4@old* j35d5@new*)))))))) j35c7@ls/false) (let ((j35d9@t j35c5@t)) (let ((j35db@ls/false (j30ba@syntax-dispatch j35d9@t 'any))) (if j35db@ls/false (apply (lambda (j35dd@others) (j319a@syntax-violation '#f '"malformed bindings" j3589@stx j35dd@others)) j35db@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j35d9@t)))))))))))))) j3599@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3597@t)))))))))) (set! j4b6f@j3078@let-values-macro j3078@let-values-macro) (set! j307a@let*-values-macro (lambda (j35f9@stx) (letrec* ((j35fc@check (lambda (j362b@x*) (if (not (null? j362b@x*)) (let ((j362d@x (car j362b@x*))) (begin (if (not (j2eb3@id? j362d@x)) (j319a@syntax-violation '#f '"not an identifier" j35f9@stx j362d@x) (void)) (j35fc@check (cdr j362b@x*)) (if (j2ebf@bound-id-member? j362d@x (cdr j362b@x*)) (j319a@syntax-violation '#f '"duplicate identifier" j35f9@stx j362d@x) (void)))) (void))))) (let ((j35fd@t j35f9@stx)) (let ((j35ff@ls/false (j30ba@syntax-dispatch j35fd@t '(_ () any . each-any)))) (if j35ff@ls/false (apply (lambda (j3601@b j3602@b*) (cons* (j3070@bless 'let) '() j3601@b j3602@b*)) j35ff@ls/false) (let ((j3605@t j35fd@t)) (let ((j3607@ls/false (j30ba@syntax-dispatch j3605@t '(_ #(each (any any)) any . each-any)))) (if j3607@ls/false (apply (lambda (j3609@lhs* j360a@rhs* j360b@b j360c@b*) (j3070@bless (let j3615@f ((j3611@lhs* j3609@lhs*) (j3612@rhs* j360a@rhs*)) (if (null? j3611@lhs*) (cons 'begin (cons j360b@b j360c@b*)) (let ((j3617@t (car j3611@lhs*))) (let ((j3619@ls/false (j30ba@syntax-dispatch j3617@t 'each-any))) (if j3619@ls/false (apply (lambda (j361b@x*) (begin (j35fc@check j361b@x*) (list 'call-with-values (list 'lambda '() (car j3612@rhs*)) (list 'lambda j361b@x* (j3615@f (cdr j3611@lhs*) (cdr j3612@rhs*)))))) j3619@ls/false) (let ((j361d@t j3617@t)) (let ((j361f@ls/false (j30ba@syntax-dispatch j361d@t '#(each+ any () any)))) (if j361f@ls/false (apply (lambda (j3621@x* j3622@x) (begin (j35fc@check (cons j3622@x j3621@x*)) (list 'call-with-values (list 'lambda '() (car j3612@rhs*)) (list 'lambda (append j3621@x* j3622@x) (j3615@f (cdr j3611@lhs*) (cdr j3612@rhs*)))))) j361f@ls/false) (let ((j3625@t j361d@t)) (let ((j3627@ls/false (j30ba@syntax-dispatch j3625@t 'any))) (if j3627@ls/false (apply (lambda (j3629@others) (j319a@syntax-violation '#f '"malformed bindings" j35f9@stx j3629@others)) j3627@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3625@t)))))))))))))) j3607@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3605@t)))))))))) (set! j4b70@j307a@let*-values-macro j307a@let*-values-macro) (set! j307c@trace-lambda-macro (lambda (j362f@stx) (let ((j3631@t j362f@stx)) (let ((j3633@ls/false (j30ba@syntax-dispatch j3631@t '(_ any each-any any . each-any)))) (if j3633@ls/false (apply (lambda (j3635@who j3636@fmls j3637@b j3638@b*) (if (j2ebb@valid-bound-ids? j3636@fmls) (j3070@bless (list 'make-traced-procedure (list 'quote j3635@who) (cons 'lambda (cons j3636@fmls (cons j3637@b j3638@b*))))) (j3074@invalid-fmls-error j362f@stx j3636@fmls))) j3633@ls/false) (let ((j363d@t j3631@t)) (let ((j363f@ls/false (j30ba@syntax-dispatch j363d@t '(_ any #(each+ any () any) any . each-any)))) (if j363f@ls/false (apply (lambda (j3641@who j3642@fmls j3643@last j3644@b j3645@b*) (if (j2ebb@valid-bound-ids? (cons j3643@last j3642@fmls)) (j3070@bless (list 'make-traced-procedure (list 'quote j3641@who) (cons 'lambda (cons (append j3642@fmls j3643@last) (cons j3644@b j3645@b*))))) (j3074@invalid-fmls-error j362f@stx (append j3642@fmls j3643@last)))) j363f@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j363d@t))))))))) (set! j4b71@j307c@trace-lambda-macro j307c@trace-lambda-macro) (set! j307e@trace-define-macro (lambda (j364b@stx) (let ((j364d@t j364b@stx)) (let ((j364f@ls/false (j30ba@syntax-dispatch j364d@t '(_ (any . each-any) any . each-any)))) (if j364f@ls/false (apply (lambda (j3651@who j3652@fmls j3653@b j3654@b*) (if (j2ebb@valid-bound-ids? j3652@fmls) (j3070@bless (list 'define j3651@who (list 'make-traced-procedure (list 'quote j3651@who) (cons 'lambda (cons j3652@fmls (cons j3653@b j3654@b*)))))) (j3074@invalid-fmls-error j364b@stx j3652@fmls))) j364f@ls/false) (let ((j3659@t j364d@t)) (let ((j365b@ls/false (j30ba@syntax-dispatch j3659@t '(_ (any . #(each+ any () any)) any . each-any)))) (if j365b@ls/false (apply (lambda (j365d@who j365e@fmls j365f@last j3660@b j3661@b*) (if (j2ebb@valid-bound-ids? (cons j365f@last j365e@fmls)) (j3070@bless (list 'define j365d@who (list 'make-traced-procedure (list 'quote j365d@who) (cons 'lambda (cons (append j365e@fmls j365f@last) (cons j3660@b j3661@b*)))))) (j3074@invalid-fmls-error j364b@stx (append j365e@fmls j365f@last)))) j365b@ls/false) (let ((j3667@t j3659@t)) (let ((j3669@ls/false (j30ba@syntax-dispatch j3667@t '(_ any any)))) (if j3669@ls/false (apply (lambda (j366b@who j366c@expr) (if (j2eb3@id? j366b@who) (j3070@bless (list 'define j366b@who (list 'let (list (list 'v j366c@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote j366b@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (j319a@syntax-violation '#f '"invalid name" j364b@stx))) j3669@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3667@t)))))))))))) (set! j4b72@j307e@trace-define-macro j307e@trace-define-macro) (set! j3080@trace-define-syntax-macro (lambda (j366f@stx) (let ((j3671@t j366f@stx)) (let ((j3673@ls/false (j30ba@syntax-dispatch j3671@t '(_ any any)))) (if j3673@ls/false (apply (lambda (j3675@who j3676@expr) (if (j2eb3@id? j3675@who) (j3070@bless (list 'define-syntax j3675@who (list 'make-traced-macro (list 'quote j3675@who) j3676@expr))) (j319a@syntax-violation '#f '"invalid name" j366f@stx))) j3673@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3671@t)))))) (set! j4b73@j3080@trace-define-syntax-macro j3080@trace-define-syntax-macro) (set! j3082@trace-let/rec-syntax (lambda (j3679@who) (lambda (j367b@stx) (let ((j367d@t j367b@stx)) (let ((j367f@ls/false (j30ba@syntax-dispatch j367d@t '(_ #(each (any any)) any . each-any)))) (if j367f@ls/false (apply (lambda (j3681@lhs* j3682@rhs* j3683@b j3684@b*) (if (j2ebb@valid-bound-ids? j3681@lhs*) (let ((j3689@rhs* (map (lambda (j368b@lhs j368c@rhs) (list 'make-traced-macro (list 'quote j368b@lhs) j368c@rhs)) j3681@lhs* j3682@rhs*))) (j3070@bless (cons j3679@who (cons (map list j3681@lhs* j3689@rhs*) (cons j3683@b j3684@b*))))) (j3074@invalid-fmls-error j367b@stx j3681@lhs*))) j367f@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j367d@t))))))) (set! j4b74@j3082@trace-let/rec-syntax j3082@trace-let/rec-syntax) (set! j3084@trace-let-syntax-macro (j3082@trace-let/rec-syntax 'let-syntax)) (set! j4b75@j3084@trace-let-syntax-macro j3084@trace-let-syntax-macro) (set! j3086@trace-letrec-syntax-macro (j3082@trace-let/rec-syntax 'letrec-syntax)) (set! j4b76@j3086@trace-letrec-syntax-macro j3086@trace-letrec-syntax-macro) (set! j3088@guard-macro (lambda (j368f@x) (letrec* ((j3692@gen-clauses (lambda (j36a9@con j36aa@outerk j36ab@clause*) (letrec* ((j36b0@f (lambda (j36e9@x j36ea@k) (let ((j36ed@t j36e9@x)) (let ((j36ef@ls/false (j30ba@syntax-dispatch j36ed@t '(any #(scheme-id =>) any)))) (if j36ef@ls/false (apply (lambda (j36f1@e j36f2@p) (let ((j36f5@t (gensym))) (list 'let (list (list j36f5@t j36f1@e)) (list 'if j36f5@t (list j36f2@p j36f5@t) j36ea@k)))) j36ef@ls/false) (let ((j36f7@t j36ed@t)) (let ((j36f9@ls/false (j30ba@syntax-dispatch j36f7@t '(any)))) (if j36f9@ls/false (apply (lambda (j36fb@e) (let ((j36fd@t (gensym))) (list 'let (list (list j36fd@t j36fb@e)) (list 'if j36fd@t j36fd@t j36ea@k)))) j36f9@ls/false) (let ((j36ff@t j36f7@t)) (let ((j3701@ls/false (j30ba@syntax-dispatch j36ff@t '(any any . each-any)))) (if j3701@ls/false (apply (lambda (j3703@e j3704@v j3705@v*) (list 'if j3703@e (cons 'begin (cons j3704@v j3705@v*)) j36ea@k)) j3701@ls/false) (let ((j3709@t j36ff@t)) (let ((j370b@ls/false (j30ba@syntax-dispatch j3709@t '_))) (if j370b@ls/false (apply (lambda () (j319a@syntax-violation '#f '"invalid guard clause" j36e9@x)) j370b@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3709@t))))))))))))))) (j36b2@f* (lambda (j36bf@x*) (let ((j36c1@t j36bf@x*)) (let ((j36c3@ls/false (j30ba@syntax-dispatch j36c1@t '()))) (if j36c3@ls/false (apply (lambda () (let ((j36c5@g (gensym))) (values (list j36c5@g (list 'lambda '() (list 'raise-continuable j36a9@con))) j36c5@g))) j36c3@ls/false) (let ((j36c7@t j36c1@t)) (let ((j36c9@ls/false (j30ba@syntax-dispatch j36c7@t '((#(scheme-id else) any . each-any))))) (if j36c9@ls/false (apply (lambda (j36cb@e j36cc@e*) (values (cons 'begin (cons j36cb@e j36cc@e*)) '#f)) j36c9@ls/false) (let ((j36cf@t j36c7@t)) (let ((j36d1@ls/false (j30ba@syntax-dispatch j36cf@t '(any . any)))) (if j36d1@ls/false (apply (lambda (j36d3@cls j36d4@cls*) (call-with-values (lambda () (j36b2@f* j36d4@cls*)) (lambda (j36db@j36d8 j36dc@j36da) (let ((j36df@g j36dc@j36da) (j36e0@e j36db@j36d8)) (values (j36b0@f j36d3@cls j36e0@e) j36df@g))))) j36d1@ls/false) (let ((j36e3@t j36cf@t)) (let ((j36e5@ls/false (j30ba@syntax-dispatch j36e3@t 'any))) (if j36e5@ls/false (apply (lambda (j36e7@others) (j319a@syntax-violation '#f '"invalid guard clause" j36e7@others)) j36e5@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j36e3@t)))))))))))))))) (call-with-values (lambda () (j36b2@f* j36ab@clause*)) (lambda (j36b7@j36b4 j36b8@j36b6) (let ((j36bb@raisek j36b8@j36b6) (j36bc@code j36b7@j36b4)) (if j36bb@raisek (list (list 'call/cc (list 'lambda (list j36bb@raisek) (list j36aa@outerk (list 'lambda '() j36bc@code))))) (list j36aa@outerk (list 'lambda '() j36bc@code)))))))))) (let ((j3693@t j368f@x)) (let ((j3695@ls/false (j30ba@syntax-dispatch j3693@t '(_ (any . each-any) any . each-any)))) (if (and j3695@ls/false (apply (lambda (j3697@con j3698@clause* j3699@b j369a@b*) (j2eb3@id? j3697@con)) j3695@ls/false)) (apply (lambda (j369f@con j36a0@clause* j36a1@b j36a2@b*) (let ((j36a7@outerk (gensym))) (j3070@bless (list (list 'call/cc (list 'lambda (list j36a7@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list j369f@con) (j3692@gen-clauses j369f@con j36a7@outerk j36a0@clause*)) (cons 'lambda (cons '() (cons j36a1@b j36a2@b*))))))))))) j3695@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3693@t))))))) (set! j4b77@j3088@guard-macro j3088@guard-macro) (set! j308a@define-enumeration-macro (lambda (j370d@stx) (letrec* ((j3710@set? (lambda (j3729@x) (or (null? j3729@x) (and (not (memq (car j3729@x) (cdr j3729@x))) (j3710@set? (cdr j3729@x)))))) (j3712@remove-dups (lambda (j3727@ls) (if (null? j3727@ls) '() (cons (car j3727@ls) (j3712@remove-dups (remq (car j3727@ls) (cdr j3727@ls)))))))) (let ((j3713@t j370d@stx)) (let ((j3715@ls/false (j30ba@syntax-dispatch j3713@t '(_ any each-any any)))) (if (and j3715@ls/false (apply (lambda (j3717@name j3718@id* j3719@maker) (and (j2eb3@id? j3717@name) (j2eb3@id? j3719@maker) (for-all j2eb3@id? j3718@id*))) j3715@ls/false)) (apply (lambda (j371d@name j371e@id* j371f@maker) (let ((j3723@name* (j3712@remove-dups (j31a0@syntax->datum j371e@id*))) (j3724@mk (gensym))) (j3070@bless (list 'begin (list 'define j3724@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote j3723@name*)))) (list 'define-syntax j371d@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote j3723@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote j371d@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax j371f@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote j371f@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote j3723@name*)) (cons 'syntax-violation (cons (list 'quote j371f@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons j3724@mk '('(n* ...))))))))))))) j3715@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3713@t))))))) (set! j4b78@j308a@define-enumeration-macro j308a@define-enumeration-macro) (set! j308c@time-macro (lambda (j372b@stx) (let ((j372d@t j372b@stx)) (let ((j372f@ls/false (j30ba@syntax-dispatch j372d@t '(_ any)))) (if j372f@ls/false (apply (lambda (j3731@expr) (j3070@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() j3731@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) j372f@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j372d@t)))))) (set! j4b79@j308c@time-macro j308c@time-macro) (set! j308e@delay-macro (lambda (j3733@stx) (let ((j3735@t j3733@stx)) (let ((j3737@ls/false (j30ba@syntax-dispatch j3735@t '(_ any)))) (if j3737@ls/false (apply (lambda (j3739@expr) (j3070@bless (list 'make-promise (list 'lambda '() j3739@expr)))) j3737@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3735@t)))))) (set! j4b7a@j308e@delay-macro j308e@delay-macro) (set! j3090@assert-macro (lambda (j373b@stx) (let ((j373d@t j373b@stx)) (let ((j373f@ls/false (j30ba@syntax-dispatch j373d@t '(_ any)))) (if j373f@ls/false (apply (lambda (j3741@expr) (let ((j3743@pos (or (j3192@expression-position j373b@stx) (j3192@expression-position j3741@expr)))) (j3070@bless (list 'let (list (list 'x j3741@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote j3741@expr) (list 'quote j3743@pos))))))) j373f@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j373d@t)))))) (set! j4b7b@j3090@assert-macro j3090@assert-macro) (set! j3092@endianness-macro (lambda (j3745@stx) (let ((j3747@t j3745@stx)) (let ((j3749@ls/false (j30ba@syntax-dispatch j3747@t '(_ any)))) (if j3749@ls/false (apply (lambda (j374b@e) (let ((j374d@t (j31a0@syntax->datum j374b@e))) (if (memv j374d@t '(little)) (j3070@bless ''little) (if (memv j374d@t '(big)) (j3070@bless ''big) (j319a@syntax-violation '#f '"endianness must be big or little" j3745@stx))))) j3749@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3747@t)))))) (set! j4b7c@j3092@endianness-macro j3092@endianness-macro) (set! j3094@identifier-syntax-macro (lambda (j374f@stx) (let ((j3751@t j374f@stx)) (let ((j3753@ls/false (j30ba@syntax-dispatch j3751@t '(_ any)))) (if j3753@ls/false (apply (lambda (j3755@expr) (j3070@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax j3755@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax j3755@expr) '((syntax (e* ...)))))))))) j3753@ls/false) (let ((j3757@t j3751@t)) (let ((j3759@ls/false (j30ba@syntax-dispatch j3757@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and j3759@ls/false (apply (lambda (j375b@id1 j375c@expr1 j375d@id2 j375e@expr2 j375f@expr3) (and (j2eb3@id? j375b@id1) (j2eb3@id? j375d@id2) (j2eb3@id? j375e@expr2))) j3759@ls/false)) (apply (lambda (j3765@id1 j3766@expr1 j3767@id2 j3768@expr2 j3769@expr3) (j3070@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax j3766@expr1)) (list (list 'set! 'id j3768@expr2) (list 'syntax j3769@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons j3766@expr1 '(e* ...))))))))) j3759@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3757@t))))))))) (set! j4b7d@j3094@identifier-syntax-macro j3094@identifier-syntax-macro) (set! j3096@do-macro (lambda (j376f@stx) (letrec* ((j3772@bind (lambda (j3789@x) (let ((j378b@t j3789@x)) (let ((j378d@ls/false (j30ba@syntax-dispatch j378b@t '(any any)))) (if j378d@ls/false (apply (lambda (j378f@x j3790@init) (list j378f@x j3790@init j378f@x)) j378d@ls/false) (let ((j3793@t j378b@t)) (let ((j3795@ls/false (j30ba@syntax-dispatch j3793@t '(any any any)))) (if j3795@ls/false (apply (lambda (j3797@x j3798@init j3799@step) (list j3797@x j3798@init j3799@step)) j3795@ls/false) (let ((j379d@t j3793@t)) (let ((j379f@ls/false (j30ba@syntax-dispatch j379d@t '_))) (if j379f@ls/false (apply (lambda () (j319a@syntax-violation '#f '"invalid binding" j376f@stx)) j379f@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j379d@t))))))))))))) (let ((j3773@t j376f@stx)) (let ((j3775@ls/false (j30ba@syntax-dispatch j3773@t '(_ each-any (any . each-any) . each-any)))) (if j3775@ls/false (apply (lambda (j3777@binding* j3778@test j3779@expr* j377a@command*) (let ((j377f@t (map j3772@bind j3777@binding*))) (let ((j3781@ls/false (j30ba@syntax-dispatch j377f@t '#(each (any any any))))) (if j3781@ls/false (apply (lambda (j3783@x* j3784@init* j3785@step*) (if (j2ebb@valid-bound-ids? j3783@x*) (j3070@bless (list 'letrec (list (list 'loop (list 'lambda j3783@x* (list 'if j3778@test (cons 'begin (cons '(if #f #f) j3779@expr*)) (cons 'begin (append j377a@command* (list (cons 'loop j3785@step*)))))))) (cons 'loop j3784@init*))) (j319a@syntax-violation '#f '"invalid bindings" j376f@stx))) j3781@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j377f@t))))) j3775@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3773@t))))))) (set! j4b7e@j3096@do-macro j3096@do-macro) (set! j3098@let*-macro (lambda (j37a1@stx) (let ((j37a3@t j37a1@stx)) (let ((j37a5@ls/false (j30ba@syntax-dispatch j37a3@t '(_ #(each (any any)) any . each-any)))) (if (and j37a5@ls/false (apply (lambda (j37a7@lhs* j37a8@rhs* j37a9@b j37aa@b*) (for-all j2eb3@id? j37a7@lhs*)) j37a5@ls/false)) (apply (lambda (j37af@lhs* j37b0@rhs* j37b1@b j37b2@b*) (j3070@bless (let j37b9@f ((j37b7@x* (map list j37af@lhs* j37b0@rhs*))) (if (null? j37b7@x*) (cons 'let (cons '() (cons j37b1@b j37b2@b*))) (list 'let (list (car j37b7@x*)) (j37b9@f (cdr j37b7@x*))))))) j37a5@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j37a3@t)))))) (set! j4b7f@j3098@let*-macro j3098@let*-macro) (set! j309a@or-macro (lambda (j37bb@stx) (let ((j37bd@t j37bb@stx)) (let ((j37bf@ls/false (j30ba@syntax-dispatch j37bd@t '(_)))) (if j37bf@ls/false (apply (lambda () '#f) j37bf@ls/false) (let ((j37c1@t j37bd@t)) (let ((j37c3@ls/false (j30ba@syntax-dispatch j37c1@t '(_ any . each-any)))) (if j37c3@ls/false (apply (lambda (j37c5@e j37c6@e*) (j3070@bless (let j37cd@f ((j37c9@e j37c5@e) (j37ca@e* j37c6@e*)) (if (null? j37ca@e*) (list 'begin '#f j37c9@e) (list 'let (list (list 't j37c9@e)) (list 'if 't 't (j37cd@f (car j37ca@e*) (cdr j37ca@e*)))))))) j37c3@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j37c1@t))))))))) (set! j4b80@j309a@or-macro j309a@or-macro) (set! j309c@and-macro (lambda (j37cf@stx) (let ((j37d1@t j37cf@stx)) (let ((j37d3@ls/false (j30ba@syntax-dispatch j37d1@t '(_)))) (if j37d3@ls/false (apply (lambda () '#t) j37d3@ls/false) (let ((j37d5@t j37d1@t)) (let ((j37d7@ls/false (j30ba@syntax-dispatch j37d5@t '(_ any . each-any)))) (if j37d7@ls/false (apply (lambda (j37d9@e j37da@e*) (j3070@bless (let j37e1@f ((j37dd@e j37d9@e) (j37de@e* j37da@e*)) (if (null? j37de@e*) (list 'begin '#f j37dd@e) (cons 'if (cons j37dd@e (cons (j37e1@f (car j37de@e*) (cdr j37de@e*)) '(#f)))))))) j37d7@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j37d5@t))))))))) (set! j4b81@j309c@and-macro j309c@and-macro) (set! j309e@cond-macro (lambda (j37e3@stx) (let ((j37e5@t j37e3@stx)) (let ((j37e7@ls/false (j30ba@syntax-dispatch j37e5@t '(_ any . each-any)))) (if j37e7@ls/false (apply (lambda (j37e9@cls j37ea@cls*) (j3070@bless (let j37f1@f ((j37ed@cls j37e9@cls) (j37ee@cls* j37ea@cls*)) (if (null? j37ee@cls*) (let ((j37f3@t j37ed@cls)) (let ((j37f5@ls/false (j30ba@syntax-dispatch j37f3@t '(#(scheme-id else) any . each-any)))) (if j37f5@ls/false (apply (lambda (j37f7@e j37f8@e*) (cons 'begin (cons j37f7@e j37f8@e*))) j37f5@ls/false) (let ((j37fb@t j37f3@t)) (let ((j37fd@ls/false (j30ba@syntax-dispatch j37fb@t '(any #(scheme-id =>) any)))) (if j37fd@ls/false (apply (lambda (j37ff@e j3800@p) (list 'let (list (list 't j37ff@e)) (list 'if 't (cons j3800@p '(t))))) j37fd@ls/false) (let ((j3803@t j37fb@t)) (let ((j3805@ls/false (j30ba@syntax-dispatch j3803@t '(any)))) (if j3805@ls/false (apply (lambda (j3807@e) (cons 'or (cons j3807@e '((if #f #f))))) j3805@ls/false) (let ((j3809@t j3803@t)) (let ((j380b@ls/false (j30ba@syntax-dispatch j3809@t '(any . each-any)))) (if j380b@ls/false (apply (lambda (j380d@e j380e@e*) (list 'if j380d@e (cons 'begin j380e@e*))) j380b@ls/false) (let ((j3811@t j3809@t)) (let ((j3813@ls/false (j30ba@syntax-dispatch j3811@t '_))) (if j3813@ls/false (apply (lambda () (j319a@syntax-violation '#f '"invalid last clause" j37e3@stx)) j3813@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3811@t)))))))))))))))) (let ((j3815@t j37ed@cls)) (let ((j3817@ls/false (j30ba@syntax-dispatch j3815@t '(#(scheme-id else) any . each-any)))) (if j3817@ls/false (apply (lambda (j3819@e j381a@e*) (j319a@syntax-violation '#f '"incorrect position of keyword else" j37e3@stx)) j3817@ls/false) (let ((j381d@t j3815@t)) (let ((j381f@ls/false (j30ba@syntax-dispatch j381d@t '(any #(scheme-id =>) any)))) (if j381f@ls/false (apply (lambda (j3821@e j3822@p) (list 'let (list (list 't j3821@e)) (list 'if 't (cons j3822@p '(t)) (j37f1@f (car j37ee@cls*) (cdr j37ee@cls*))))) j381f@ls/false) (let ((j3825@t j381d@t)) (let ((j3827@ls/false (j30ba@syntax-dispatch j3825@t '(any)))) (if j3827@ls/false (apply (lambda (j3829@e) (list 'or j3829@e (j37f1@f (car j37ee@cls*) (cdr j37ee@cls*)))) j3827@ls/false) (let ((j382b@t j3825@t)) (let ((j382d@ls/false (j30ba@syntax-dispatch j382b@t '(any . each-any)))) (if j382d@ls/false (apply (lambda (j382f@e j3830@e*) (list 'if j382f@e (cons 'begin j3830@e*) (j37f1@f (car j37ee@cls*) (cdr j37ee@cls*)))) j382d@ls/false) (let ((j3833@t j382b@t)) (let ((j3835@ls/false (j30ba@syntax-dispatch j3833@t '_))) (if j3835@ls/false (apply (lambda () (j319a@syntax-violation '#f '"invalid last clause" j37e3@stx)) j3835@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3833@t)))))))))))))))))))) j37e7@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j37e5@t)))))) (set! j4b82@j309e@cond-macro j309e@cond-macro) (set! j30a0@do-include (lambda (j3837@stx j3838@id j3839@filename) (let ((j383d@filename (j2ec7@stx->datum j3839@filename))) (begin (if (not (and (string? j383d@filename) (j2eb3@id? j3838@id))) (j319a@syntax-violation '#f '"invalid syntax" j3837@stx) (void)) (cons (j3070@bless 'begin) (with-input-from-file j383d@filename (lambda () (let j3841@f ((j383f@ls '())) (let ((j3843@x (j29f5@j28c5@read-annotated))) (if (eof-object? j3843@x) (reverse j383f@ls) (j3841@f (cons (j2e93@datum->stx j3838@id j3843@x) j383f@ls)))))))))))) (set! j4b83@j30a0@do-include j30a0@do-include) (set! j30a2@include-macro (lambda (j3845@e) (let ((j3847@t j3845@e)) (let ((j3849@ls/false (j30ba@syntax-dispatch j3847@t '(any any)))) (if j3849@ls/false (apply (lambda (j384b@id j384c@filename) (j30a0@do-include j3845@e j384b@id j384c@filename)) j3849@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3847@t)))))) (set! j4b84@j30a2@include-macro j30a2@include-macro) (set! j30a4@include-into-macro (lambda (j384f@e) (let ((j3851@t j384f@e)) (let ((j3853@ls/false (j30ba@syntax-dispatch j3851@t '(_ any any)))) (if j3853@ls/false (apply (lambda (j3855@id j3856@filename) (j30a0@do-include j384f@e j3855@id j3856@filename)) j3853@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3851@t)))))) (set! j4b85@j30a4@include-into-macro j30a4@include-into-macro) (set! j30a6@syntax-rules-macro (lambda (j3859@e) (let ((j385b@t j3859@e)) (let ((j385d@ls/false (j30ba@syntax-dispatch j385b@t '(_ each-any . #(each (any any)))))) (if j385d@ls/false (apply (lambda (j385f@lits j3860@pat* j3861@tmp*) (begin (j30c0@verify-literals j385f@lits j3859@e) (j3070@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons j385f@lits (map (lambda (j3865@pat j3866@tmp) (let ((j3869@t j3865@pat)) (let ((j386b@ls/false (j30ba@syntax-dispatch j3869@t '(_ . any)))) (if j386b@ls/false (apply (lambda (j386d@rest) (list (cons 'g j386d@rest) (list 'syntax j3866@tmp))) j386b@ls/false) (let ((j386f@t j3869@t)) (let ((j3871@ls/false (j30ba@syntax-dispatch j386f@t '_))) (if j3871@ls/false (apply (lambda () (j319a@syntax-violation '#f '"invalid syntax-rules pattern" j3859@e j3865@pat)) j3871@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j386f@t)))))))) j3860@pat* j3861@tmp*)))))))) j385d@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j385b@t)))))) (set! j4b86@j30a6@syntax-rules-macro j30a6@syntax-rules-macro) (set! j30a8@quasiquote-macro (letrec* ((j3874@datum (lambda (j3975@x) (list (j3042@scheme-stx 'quote) (j2e9b@mkstx j3975@x '() '() '())))) (j3890@quasicons* (lambda (j396d@x j396e@y) (let j3973@f ((j3971@x j396d@x)) (if (null? j3971@x) j396e@y (j3892@quasicons (car j3971@x) (j3973@f (cdr j3971@x))))))) (j3892@quasicons (lambda (j3947@x j3948@y) (let ((j394b@t j3948@y)) (let ((j394d@ls/false (j30ba@syntax-dispatch j394b@t '(#(scheme-id quote) any)))) (if j394d@ls/false (apply (lambda (j394f@dy) (let ((j3951@t j3947@x)) (let ((j3953@ls/false (j30ba@syntax-dispatch j3951@t '(#(scheme-id quote) any)))) (if j3953@ls/false (apply (lambda (j3955@dx) (list (j3042@scheme-stx 'quote) (cons j3955@dx j394f@dy))) j3953@ls/false) (let ((j3957@t j3951@t)) (let ((j3959@ls/false (j30ba@syntax-dispatch j3957@t '_))) (if j3959@ls/false (apply (lambda () (let ((j395b@t j394f@dy)) (let ((j395d@ls/false (j30ba@syntax-dispatch j395b@t '()))) (if j395d@ls/false (apply (lambda () (list (j3042@scheme-stx 'list) j3947@x)) j395d@ls/false) (let ((j395f@t j395b@t)) (let ((j3961@ls/false (j30ba@syntax-dispatch j395f@t '_))) (if j3961@ls/false (apply (lambda () (list (j3042@scheme-stx 'cons) j3947@x j3948@y)) j3961@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j395f@t)))))))) j3959@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3957@t)))))))) j394d@ls/false) (let ((j3963@t j394b@t)) (let ((j3965@ls/false (j30ba@syntax-dispatch j3963@t '(#(scheme-id list) . each-any)))) (if j3965@ls/false (apply (lambda (j3967@stuff) (cons* (j3042@scheme-stx 'list) j3947@x j3967@stuff)) j3965@ls/false) (let ((j3969@t j3963@t)) (let ((j396b@ls/false (j30ba@syntax-dispatch j3969@t '_))) (if j396b@ls/false (apply (lambda () (list (j3042@scheme-stx 'cons) j3947@x j3948@y)) j396b@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3969@t)))))))))))) (j3894@quasiappend (lambda (j392d@x j392e@y) (let ((j3931@ls (let j3935@f ((j3933@x j392d@x)) (if (null? j3933@x) (let ((j3937@t j392e@y)) (let ((j3939@ls/false (j30ba@syntax-dispatch j3937@t '(#(scheme-id quote) ())))) (if j3939@ls/false (apply (lambda () '()) j3939@ls/false) (let ((j393b@t j3937@t)) (let ((j393d@ls/false (j30ba@syntax-dispatch j393b@t '_))) (if j393d@ls/false (apply (lambda () (list j392e@y)) j393d@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j393b@t))))))) (let ((j393f@t (car j3933@x))) (let ((j3941@ls/false (j30ba@syntax-dispatch j393f@t '(#(scheme-id quote) ())))) (if j3941@ls/false (apply (lambda () (j3935@f (cdr j3933@x))) j3941@ls/false) (let ((j3943@t j393f@t)) (let ((j3945@ls/false (j30ba@syntax-dispatch j3943@t '_))) (if j3945@ls/false (apply (lambda () (cons (car j3933@x) (j3935@f (cdr j3933@x)))) j3945@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3943@t))))))))))) (if (null? j3931@ls) (list (j3042@scheme-stx 'quote) '()) (if (null? (cdr j3931@ls)) (car j3931@ls) (cons* (j3042@scheme-stx 'append) j3931@ls)))))) (j3896@quasivector (lambda (j38fb@x) (let ((j38fd@pat-x j38fb@x)) (let ((j38ff@t j38fd@pat-x)) (let ((j3901@ls/false (j30ba@syntax-dispatch j38ff@t '(#(scheme-id quote) each-any)))) (if j3901@ls/false (apply (lambda (j3903@x*) (list (j3042@scheme-stx 'quote) (list->vector j3903@x*))) j3901@ls/false) (let ((j3905@t j38ff@t)) (let ((j3907@ls/false (j30ba@syntax-dispatch j3905@t '_))) (if j3907@ls/false (apply (lambda () (let j390f@f ((j3909@x j38fb@x) (j390a@k (lambda (j390d@ls) (cons* (j3042@scheme-stx 'vector) j390d@ls)))) (let ((j3911@t j3909@x)) (let ((j3913@ls/false (j30ba@syntax-dispatch j3911@t '(#(scheme-id quote) each-any)))) (if j3913@ls/false (apply (lambda (j3915@x*) (j390a@k (map (lambda (j3917@x) (list (j3042@scheme-stx 'quote) j3917@x)) j3915@x*))) j3913@ls/false) (let ((j3919@t j3911@t)) (let ((j391b@ls/false (j30ba@syntax-dispatch j3919@t '(#(scheme-id list) . each-any)))) (if j391b@ls/false (apply (lambda (j391d@x*) (j390a@k j391d@x*)) j391b@ls/false) (let ((j391f@t j3919@t)) (let ((j3921@ls/false (j30ba@syntax-dispatch j391f@t '(#(scheme-id cons) any any)))) (if j3921@ls/false (apply (lambda (j3923@x j3924@y) (j390f@f j3924@y (lambda (j3927@ls) (j390a@k (cons j3923@x j3927@ls))))) j3921@ls/false) (let ((j3929@t j391f@t)) (let ((j392b@ls/false (j30ba@syntax-dispatch j3929@t '_))) (if j392b@ls/false (apply (lambda () (list (j3042@scheme-stx 'list->vector) j38fd@pat-x)) j392b@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3929@t))))))))))))))) j3907@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3905@t)))))))))) (j3898@vquasi (lambda (j38d9@p j38da@lev) (let ((j38dd@t j38d9@p)) (let ((j38df@ls/false (j30ba@syntax-dispatch j38dd@t '(any . any)))) (if j38df@ls/false (apply (lambda (j38e1@p j38e2@q) (let ((j38e5@t j38e1@p)) (let ((j38e7@ls/false (j30ba@syntax-dispatch j38e5@t '(#(scheme-id unquote) . each-any)))) (if j38e7@ls/false (apply (lambda (j38e9@p) (if (= j38da@lev '0) (j3890@quasicons* j38e9@p (j3898@vquasi j38e2@q j38da@lev)) (j3892@quasicons (j3892@quasicons (j3874@datum 'unquote) (j389a@quasi j38e9@p (- j38da@lev '1))) (j3898@vquasi j38e2@q j38da@lev)))) j38e7@ls/false) (let ((j38eb@t j38e5@t)) (let ((j38ed@ls/false (j30ba@syntax-dispatch j38eb@t '(#(scheme-id unquote-splicing) . each-any)))) (if j38ed@ls/false (apply (lambda (j38ef@p) (if (= j38da@lev '0) (j3894@quasiappend j38ef@p (j3898@vquasi j38e2@q j38da@lev)) (j3892@quasicons (j3892@quasicons (j3874@datum 'unquote-splicing) (j389a@quasi j38ef@p (- j38da@lev '1))) (j3898@vquasi j38e2@q j38da@lev)))) j38ed@ls/false) (let ((j38f1@t j38eb@t)) (let ((j38f3@ls/false (j30ba@syntax-dispatch j38f1@t 'any))) (if j38f3@ls/false (apply (lambda (j38f5@p) (j3892@quasicons (j389a@quasi j38f5@p j38da@lev) (j3898@vquasi j38e2@q j38da@lev))) j38f3@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j38f1@t))))))))))) j38df@ls/false) (let ((j38f7@t j38dd@t)) (let ((j38f9@ls/false (j30ba@syntax-dispatch j38f7@t '()))) (if j38f9@ls/false (apply (lambda () (list (j3042@scheme-stx 'quote) '())) j38f9@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j38f7@t))))))))) (j389a@quasi (lambda (j38a3@p j38a4@lev) (let ((j38a7@t j38a3@p)) (let ((j38a9@ls/false (j30ba@syntax-dispatch j38a7@t '(#(scheme-id unquote) any)))) (if j38a9@ls/false (apply (lambda (j38ab@p) (if (= j38a4@lev '0) j38ab@p (j3892@quasicons (j3874@datum 'unquote) (j389a@quasi (list j38ab@p) (- j38a4@lev '1))))) j38a9@ls/false) (let ((j38ad@t j38a7@t)) (let ((j38af@ls/false (j30ba@syntax-dispatch j38ad@t '((#(scheme-id unquote) . each-any) . any)))) (if j38af@ls/false (apply (lambda (j38b1@p j38b2@q) (if (= j38a4@lev '0) (j3890@quasicons* j38b1@p (j389a@quasi j38b2@q j38a4@lev)) (j3892@quasicons (j3892@quasicons (j3874@datum 'unquote) (j389a@quasi j38b1@p (- j38a4@lev '1))) (j389a@quasi j38b2@q j38a4@lev)))) j38af@ls/false) (let ((j38b5@t j38ad@t)) (let ((j38b7@ls/false (j30ba@syntax-dispatch j38b5@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if j38b7@ls/false (apply (lambda (j38b9@p j38ba@q) (if (= j38a4@lev '0) (j3894@quasiappend j38b9@p (j389a@quasi j38ba@q j38a4@lev)) (j3892@quasicons (j3892@quasicons (j3874@datum 'unquote-splicing) (j389a@quasi j38b9@p (- j38a4@lev '1))) (j389a@quasi j38ba@q j38a4@lev)))) j38b7@ls/false) (let ((j38bd@t j38b5@t)) (let ((j38bf@ls/false (j30ba@syntax-dispatch j38bd@t '(#(scheme-id quasiquote) any)))) (if j38bf@ls/false (apply (lambda (j38c1@p) (j3892@quasicons (j3874@datum 'quasiquote) (j389a@quasi (list j38c1@p) (+ j38a4@lev '1)))) j38bf@ls/false) (let ((j38c3@t j38bd@t)) (let ((j38c5@ls/false (j30ba@syntax-dispatch j38c3@t '(any . any)))) (if j38c5@ls/false (apply (lambda (j38c7@p j38c8@q) (j3892@quasicons (j389a@quasi j38c7@p j38a4@lev) (j389a@quasi j38c8@q j38a4@lev))) j38c5@ls/false) (let ((j38cb@t j38c3@t)) (let ((j38cd@ls/false (j30ba@syntax-dispatch j38cb@t '#(vector each-any)))) (if (and j38cd@ls/false (apply (lambda (j38cf@x) (not (j2e7f@stx? j38cf@x))) j38cd@ls/false)) (apply (lambda (j38d1@x) (j3896@quasivector (j3898@vquasi j38d1@x j38a4@lev))) j38cd@ls/false) (let ((j38d3@t j38cb@t)) (let ((j38d5@ls/false (j30ba@syntax-dispatch j38d3@t 'any))) (if j38d5@ls/false (apply (lambda (j38d7@p) (list (j3042@scheme-stx 'quote) j38d7@p)) j38d5@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j38d3@t))))))))))))))))))))))))) (lambda (j389b@x) (let ((j389d@t j389b@x)) (let ((j389f@ls/false (j30ba@syntax-dispatch j389d@t '(_ any)))) (if j389f@ls/false (apply (lambda (j38a1@e) (j389a@quasi j38a1@e '0)) j389f@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j389d@t))))))) (set! j4b87@j30a8@quasiquote-macro j30a8@quasiquote-macro) (set! j30aa@quasisyntax-macro (letrec* ((j3978@quasi (lambda (j3993@p j3994@lev) (let ((j3997@t j3993@p)) (let ((j3999@ls/false (j30ba@syntax-dispatch j3997@t '(#(scheme-id unsyntax) any)))) (if j3999@ls/false (apply (lambda (j399b@p) (if (= j3994@lev '0) (let ((j399d@g (gensym))) (values (list j399d@g) (list j399b@p) j399d@g)) (call-with-values (lambda () (j3978@quasi j399b@p (- j3994@lev '1))) (lambda (j39a5@j39a0 j39a6@j39a2 j39a7@j39a4) (let ((j39ab@p j39a7@j39a4) (j39ac@rhs* j39a6@j39a2) (j39ad@lhs* j39a5@j39a0)) (values j39ad@lhs* j39ac@rhs* (list 'unsyntax j39ab@p))))))) j3999@ls/false) (let ((j39b1@t j3997@t)) (let ((j39b3@ls/false (j30ba@syntax-dispatch j39b1@t '#(scheme-id unsyntax)))) (if (and j39b3@ls/false (apply (lambda () (= j3994@lev '0)) j39b3@ls/false)) (apply (lambda () (j319a@syntax-violation '#f '"incorrect use of unsyntax" j3993@p)) j39b3@ls/false) (let ((j39b5@t j39b1@t)) (let ((j39b7@ls/false (j30ba@syntax-dispatch j39b5@t '((#(scheme-id unsyntax) . each-any) . any)))) (if j39b7@ls/false (apply (lambda (j39b9@p* j39ba@q) (call-with-values (lambda () (j3978@quasi j39ba@q j3994@lev)) (lambda (j39c3@j39be j39c4@j39c0 j39c5@j39c2) (let ((j39c9@q j39c5@j39c2) (j39ca@rhs* j39c4@j39c0) (j39cb@lhs* j39c3@j39be)) (if (= j3994@lev '0) (let ((j39cf@g* (map (lambda (j39d1@x) (gensym)) j39b9@p*))) (values (append j39cf@g* j39cb@lhs*) (append j39b9@p* j39ca@rhs*) (append j39cf@g* j39c9@q))) (call-with-values (lambda () (j3978@quasi j39b9@p* (- j3994@lev '1))) (lambda (j39d9@j39d4 j39da@j39d6 j39db@j39d8) (let ((j39df@p* j39db@j39d8) (j39e0@rhs2* j39da@j39d6) (j39e1@lhs2* j39d9@j39d4)) (values (append j39e1@lhs2* j39cb@lhs*) (append j39e0@rhs2* j39ca@rhs*) (cons (cons 'unsyntax j39df@p*) j39c9@q)))))))))) j39b7@ls/false) (let ((j39e5@t j39b5@t)) (let ((j39e7@ls/false (j30ba@syntax-dispatch j39e5@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if j39e7@ls/false (apply (lambda (j39e9@p* j39ea@q) (call-with-values (lambda () (j3978@quasi j39ea@q j3994@lev)) (lambda (j39f3@j39ee j39f4@j39f0 j39f5@j39f2) (let ((j39f9@q j39f5@j39f2) (j39fa@rhs* j39f4@j39f0) (j39fb@lhs* j39f3@j39ee)) (if (= j3994@lev '0) (let ((j39ff@g* (map (lambda (j3a01@x) (gensym)) j39e9@p*))) (values (append (map (lambda (j3a03@g) (cons j3a03@g '(...))) j39ff@g*) j39fb@lhs*) (append j39e9@p* j39fa@rhs*) (append (apply append (map (lambda (j3a05@g) (cons j3a05@g '(...))) j39ff@g*)) j39f9@q))) (call-with-values (lambda () (j3978@quasi j39e9@p* (- j3994@lev '1))) (lambda (j3a0d@j3a08 j3a0e@j3a0a j3a0f@j3a0c) (let ((j3a13@p* j3a0f@j3a0c) (j3a14@rhs2* j3a0e@j3a0a) (j3a15@lhs2* j3a0d@j3a08)) (values (append j3a15@lhs2* j39fb@lhs*) (append j3a14@rhs2* j39fa@rhs*) (cons (cons 'unsyntax-splicing j3a13@p*) j39f9@q)))))))))) j39e7@ls/false) (let ((j3a19@t j39e5@t)) (let ((j3a1b@ls/false (j30ba@syntax-dispatch j3a19@t '#(scheme-id unsyntax-splicing)))) (if (and j3a1b@ls/false (apply (lambda () (= j3994@lev '0)) j3a1b@ls/false)) (apply (lambda () (j319a@syntax-violation '#f '"incorrect use of unsyntax-splicing" j3993@p)) j3a1b@ls/false) (let ((j3a1d@t j3a19@t)) (let ((j3a1f@ls/false (j30ba@syntax-dispatch j3a1d@t '(#(scheme-id quasisyntax) any)))) (if j3a1f@ls/false (apply (lambda (j3a21@p) (call-with-values (lambda () (j3978@quasi j3a21@p (+ j3994@lev '1))) (lambda (j3a29@j3a24 j3a2a@j3a26 j3a2b@j3a28) (let ((j3a2f@p j3a2b@j3a28) (j3a30@rhs* j3a2a@j3a26) (j3a31@lhs* j3a29@j3a24)) (values j3a31@lhs* j3a30@rhs* (list 'quasisyntax j3a2f@p)))))) j3a1f@ls/false) (let ((j3a35@t j3a1d@t)) (let ((j3a37@ls/false (j30ba@syntax-dispatch j3a35@t '(any . any)))) (if j3a37@ls/false (apply (lambda (j3a39@p j3a3a@q) (call-with-values (lambda () (j3978@quasi j3a39@p j3994@lev)) (lambda (j3a49@j3a3e j3a4a@j3a40 j3a4b@j3a42) (call-with-values (lambda () (j3978@quasi j3a3a@q j3994@lev)) (lambda (j3a4f@j3a44 j3a50@j3a46 j3a51@j3a48) (let ((j3a55@q j3a51@j3a48) (j3a56@rhs2* j3a50@j3a46) (j3a57@lhs2* j3a4f@j3a44) (j3a58@p j3a4b@j3a42) (j3a59@rhs* j3a4a@j3a40) (j3a5a@lhs* j3a49@j3a3e)) (values (append j3a57@lhs2* j3a5a@lhs*) (append j3a56@rhs2* j3a59@rhs*) (cons j3a58@p j3a55@q)))))))) j3a37@ls/false) (let ((j3a61@t j3a35@t)) (let ((j3a63@ls/false (j30ba@syntax-dispatch j3a61@t '#(vector each-any)))) (if j3a63@ls/false (apply (lambda (j3a65@x*) (call-with-values (lambda () (j3978@quasi j3a65@x* j3994@lev)) (lambda (j3a6d@j3a68 j3a6e@j3a6a j3a6f@j3a6c) (let ((j3a73@x* j3a6f@j3a6c) (j3a74@rhs* j3a6e@j3a6a) (j3a75@lhs* j3a6d@j3a68)) (values j3a75@lhs* j3a74@rhs* (list->vector j3a73@x*)))))) j3a63@ls/false) (let ((j3a79@t j3a61@t)) (let ((j3a7b@ls/false (j30ba@syntax-dispatch j3a79@t '_))) (if j3a7b@ls/false (apply (lambda () (values '() '() j3993@p)) j3a7b@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3a79@t))))))))))))))))))))))))))))))) (lambda (j3979@x) (let ((j397b@t j3979@x)) (let ((j397d@ls/false (j30ba@syntax-dispatch j397b@t '(_ any)))) (if j397d@ls/false (apply (lambda (j397f@e) (call-with-values (lambda () (j3978@quasi j397f@e '0)) (lambda (j3987@j3982 j3988@j3984 j3989@j3986) (let ((j398d@v j3989@j3986) (j398e@rhs* j3988@j3984) (j398f@lhs* j3987@j3982)) (j3070@bless (list 'syntax-case (cons 'list j398e@rhs*) '() (list j398f@lhs* (list 'syntax j398d@v)))))))) j397d@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j397b@t))))))) (set! j4b88@j30aa@quasisyntax-macro j30aa@quasisyntax-macro) (set! j30ac@define-struct-macro (lambda (j3a7d@stx) (j319a@syntax-violation '#f '"define-struct not supported" j3a7d@stx))) (set! j4b89@j30ac@define-struct-macro j30ac@define-struct-macro) (set! j30ae@define-record-type-macro (lambda (j3a7f@x) (letrec* ((j3a82@id (lambda (j3c75@ctxt . j3c77@str*) (j319e@datum->syntax j3c75@ctxt (string->symbol (apply string-append (map (lambda (j3c79@x) (if (symbol? j3c79@x) (symbol->string j3c79@x) (if (string? j3c79@x) j3c79@x (assertion-violation 'define-record-type '"BUG")))) j3c77@str*)))))) (j3a84@get-record-name (lambda (j3c63@spec) (let ((j3c65@t j3c63@spec)) (let ((j3c67@ls/false (j30ba@syntax-dispatch j3c65@t '(any any any)))) (if j3c67@ls/false (apply (lambda (j3c69@foo j3c6a@make-foo j3c6b@foo?) j3c69@foo) j3c67@ls/false) (let ((j3c6f@t j3c65@t)) (let ((j3c71@ls/false (j30ba@syntax-dispatch j3c6f@t 'any))) (if j3c71@ls/false (apply (lambda (j3c73@foo) j3c73@foo) j3c71@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3c6f@t))))))))) (j3a86@get-record-constructor-name (lambda (j3c4f@spec) (let ((j3c51@t j3c4f@spec)) (let ((j3c53@ls/false (j30ba@syntax-dispatch j3c51@t '(any any any)))) (if j3c53@ls/false (apply (lambda (j3c55@foo j3c56@make-foo j3c57@foo?) j3c56@make-foo) j3c53@ls/false) (let ((j3c5b@t j3c51@t)) (let ((j3c5d@ls/false (j30ba@syntax-dispatch j3c5b@t 'any))) (if (and j3c5d@ls/false (apply (lambda (j3c5f@foo) (j2eb3@id? j3c5f@foo)) j3c5d@ls/false)) (apply (lambda (j3c61@foo) (j3a82@id j3c61@foo '"make-" (j2ec7@stx->datum j3c61@foo))) j3c5d@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3c5b@t))))))))) (j3a88@get-record-predicate-name (lambda (j3c3b@spec) (let ((j3c3d@t j3c3b@spec)) (let ((j3c3f@ls/false (j30ba@syntax-dispatch j3c3d@t '(any any any)))) (if j3c3f@ls/false (apply (lambda (j3c41@foo j3c42@make-foo j3c43@foo?) j3c43@foo?) j3c3f@ls/false) (let ((j3c47@t j3c3d@t)) (let ((j3c49@ls/false (j30ba@syntax-dispatch j3c47@t 'any))) (if (and j3c49@ls/false (apply (lambda (j3c4b@foo) (j2eb3@id? j3c4b@foo)) j3c49@ls/false)) (apply (lambda (j3c4d@foo) (j3a82@id j3c4d@foo (j2ec7@stx->datum j3c4d@foo) '"?")) j3c49@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3c47@t))))))))) (j3a8a@get-clause (lambda (j3c29@id j3c2a@ls) (let ((j3c2d@t j3c2a@ls)) (let ((j3c2f@ls/false (j30ba@syntax-dispatch j3c2d@t '()))) (if j3c2f@ls/false (apply (lambda () '#f) j3c2f@ls/false) (let ((j3c31@t j3c2d@t)) (let ((j3c33@ls/false (j30ba@syntax-dispatch j3c31@t '((any . any) . any)))) (if j3c33@ls/false (apply (lambda (j3c35@x j3c36@rest j3c37@ls) (if (j2eb9@free-id=? (j3070@bless j3c29@id) j3c35@x) (cons j3c35@x j3c36@rest) (j3a8a@get-clause j3c29@id j3c37@ls))) j3c33@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3c31@t))))))))) (j3a8c@foo-rtd-code (lambda (j3bd7@name j3bd8@clause* j3bd9@parent-rtd-code) (letrec* ((j3bde@convert-field-spec* (lambda (j3c0f@ls) (list->vector (map (lambda (j3c11@x) (let ((j3c13@t j3c11@x)) (let ((j3c15@ls/false (j30ba@syntax-dispatch j3c13@t '(#(scheme-id mutable) any . any)))) (if j3c15@ls/false (apply (lambda (j3c17@name j3c18@rest) (list 'mutable j3c17@name)) j3c15@ls/false) (let ((j3c1b@t j3c13@t)) (let ((j3c1d@ls/false (j30ba@syntax-dispatch j3c1b@t '(#(scheme-id immutable) any . any)))) (if j3c1d@ls/false (apply (lambda (j3c1f@name j3c20@rest) (list 'immutable j3c1f@name)) j3c1d@ls/false) (let ((j3c23@t j3c1b@t)) (let ((j3c25@ls/false (j30ba@syntax-dispatch j3c23@t 'any))) (if j3c25@ls/false (apply (lambda (j3c27@name) (list 'immutable j3c27@name)) j3c25@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3c23@t))))))))))) j3c0f@ls))))) (let ((j3bdf@uid-code (let ((j3be7@t (j3a8a@get-clause 'nongenerative j3bd8@clause*))) (let ((j3be9@ls/false (j30ba@syntax-dispatch j3be7@t '(_)))) (if j3be9@ls/false (apply (lambda () (list 'quote (gensym))) j3be9@ls/false) (let ((j3beb@t j3be7@t)) (let ((j3bed@ls/false (j30ba@syntax-dispatch j3beb@t '(_ any)))) (if j3bed@ls/false (apply (lambda (j3bef@uid) (list 'quote j3bef@uid)) j3bed@ls/false) (let ((j3bf1@t j3beb@t)) (let ((j3bf3@ls/false (j30ba@syntax-dispatch j3bf1@t '_))) (if j3bf3@ls/false (apply (lambda () '#f) j3bf3@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3bf1@t))))))))))) (j3be0@sealed? (let ((j3bf5@t (j3a8a@get-clause 'sealed j3bd8@clause*))) (let ((j3bf7@ls/false (j30ba@syntax-dispatch j3bf5@t '(_ #(atom #t))))) (if j3bf7@ls/false (apply (lambda () '#t) j3bf7@ls/false) (let ((j3bf9@t j3bf5@t)) (let ((j3bfb@ls/false (j30ba@syntax-dispatch j3bf9@t '_))) (if j3bfb@ls/false (apply (lambda () '#f) j3bfb@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3bf9@t)))))))) (j3be1@opaque? (let ((j3bfd@t (j3a8a@get-clause 'opaque j3bd8@clause*))) (let ((j3bff@ls/false (j30ba@syntax-dispatch j3bfd@t '(_ #(atom #t))))) (if j3bff@ls/false (apply (lambda () '#t) j3bff@ls/false) (let ((j3c01@t j3bfd@t)) (let ((j3c03@ls/false (j30ba@syntax-dispatch j3c01@t '_))) (if j3c03@ls/false (apply (lambda () '#f) j3c03@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3c01@t)))))))) (j3be2@fields (let ((j3c05@t (j3a8a@get-clause 'fields j3bd8@clause*))) (let ((j3c07@ls/false (j30ba@syntax-dispatch j3c05@t '(_ . each-any)))) (if j3c07@ls/false (apply (lambda (j3c09@field-spec*) (list 'quote (j3bde@convert-field-spec* j3c09@field-spec*))) j3c07@ls/false) (let ((j3c0b@t j3c05@t)) (let ((j3c0d@ls/false (j30ba@syntax-dispatch j3c0b@t '_))) (if j3c0d@ls/false (apply (lambda () ''#()) j3c0d@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3c0b@t))))))))) (j3070@bless (list 'make-record-type-descriptor (list 'quote j3bd7@name) j3bd9@parent-rtd-code j3bdf@uid-code j3be0@sealed? j3be1@opaque? j3be2@fields)))))) (j3a8e@parent-rtd-code (lambda (j3bbf@clause*) (let ((j3bc1@t (j3a8a@get-clause 'parent j3bbf@clause*))) (let ((j3bc3@ls/false (j30ba@syntax-dispatch j3bc1@t '(_ any)))) (if j3bc3@ls/false (apply (lambda (j3bc5@name) (list 'record-type-descriptor j3bc5@name)) j3bc3@ls/false) (let ((j3bc7@t j3bc1@t)) (let ((j3bc9@ls/false (j30ba@syntax-dispatch j3bc7@t '#(atom #f)))) (if j3bc9@ls/false (apply (lambda () (let ((j3bcb@t (j3a8a@get-clause 'parent-rtd j3bbf@clause*))) (let ((j3bcd@ls/false (j30ba@syntax-dispatch j3bcb@t '(_ any any)))) (if j3bcd@ls/false (apply (lambda (j3bcf@rtd j3bd0@rcd) j3bcf@rtd) j3bcd@ls/false) (let ((j3bd3@t j3bcb@t)) (let ((j3bd5@ls/false (j30ba@syntax-dispatch j3bd3@t '#(atom #f)))) (if j3bd5@ls/false (apply (lambda () '#f) j3bd5@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3bd3@t)))))))) j3bc9@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3bc7@t))))))))) (j3a90@parent-rcd-code (lambda (j3ba7@clause*) (let ((j3ba9@t (j3a8a@get-clause 'parent j3ba7@clause*))) (let ((j3bab@ls/false (j30ba@syntax-dispatch j3ba9@t '(_ any)))) (if j3bab@ls/false (apply (lambda (j3bad@name) (list 'record-constructor-descriptor j3bad@name)) j3bab@ls/false) (let ((j3baf@t j3ba9@t)) (let ((j3bb1@ls/false (j30ba@syntax-dispatch j3baf@t '#(atom #f)))) (if j3bb1@ls/false (apply (lambda () (let ((j3bb3@t (j3a8a@get-clause 'parent-rtd j3ba7@clause*))) (let ((j3bb5@ls/false (j30ba@syntax-dispatch j3bb3@t '(_ any any)))) (if j3bb5@ls/false (apply (lambda (j3bb7@rtd j3bb8@rcd) j3bb8@rcd) j3bb5@ls/false) (let ((j3bbb@t j3bb3@t)) (let ((j3bbd@ls/false (j30ba@syntax-dispatch j3bbb@t '#(atom #f)))) (if j3bbd@ls/false (apply (lambda () '#f) j3bbd@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3bbb@t)))))))) j3bb1@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3baf@t))))))))) (j3a92@foo-rcd-code (lambda (j3b9f@clause* j3ba0@foo-rtd j3ba1@protocol j3ba2@parent-rcd-code) (list 'make-record-constructor-descriptor j3ba0@foo-rtd j3ba2@parent-rcd-code j3ba1@protocol))) (j3a94@get-protocol-code (lambda (j3b93@clause*) (let ((j3b95@t (j3a8a@get-clause 'protocol j3b93@clause*))) (let ((j3b97@ls/false (j30ba@syntax-dispatch j3b95@t '(_ any)))) (if j3b97@ls/false (apply (lambda (j3b99@expr) j3b99@expr) j3b97@ls/false) (let ((j3b9b@t j3b95@t)) (let ((j3b9d@ls/false (j30ba@syntax-dispatch j3b9b@t '_))) (if j3b9d@ls/false (apply (lambda () '#f) j3b9d@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3b9b@t))))))))) (j3a96@get-fields (lambda (j3b81@clause*) (let ((j3b83@t j3b81@clause*)) (let ((j3b85@ls/false (j30ba@syntax-dispatch j3b83@t '()))) (if j3b85@ls/false (apply (lambda () '()) j3b85@ls/false) (let ((j3b87@t j3b83@t)) (let ((j3b89@ls/false (j30ba@syntax-dispatch j3b87@t '((#(scheme-id fields) . each-any) . _)))) (if j3b89@ls/false (apply (lambda (j3b8b@f*) j3b8b@f*) j3b89@ls/false) (let ((j3b8d@t j3b87@t)) (let ((j3b8f@ls/false (j30ba@syntax-dispatch j3b8d@t '(_ . any)))) (if j3b8f@ls/false (apply (lambda (j3b91@rest) (j3a96@get-fields j3b91@rest)) j3b8f@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3b8d@t)))))))))))) (j3a98@get-mutator-indices (lambda (j3b69@fields) (let j3b6f@f ((j3b6b@fields j3b69@fields) (j3b6c@i '0)) (let ((j3b71@t j3b6b@fields)) (let ((j3b73@ls/false (j30ba@syntax-dispatch j3b71@t '()))) (if j3b73@ls/false (apply (lambda () '()) j3b73@ls/false) (let ((j3b75@t j3b71@t)) (let ((j3b77@ls/false (j30ba@syntax-dispatch j3b75@t '((#(scheme-id mutable) . _) . any)))) (if j3b77@ls/false (apply (lambda (j3b79@rest) (cons j3b6c@i (j3b6f@f j3b79@rest (+ j3b6c@i '1)))) j3b77@ls/false) (let ((j3b7b@t j3b75@t)) (let ((j3b7d@ls/false (j30ba@syntax-dispatch j3b7b@t '(_ . any)))) (if j3b7d@ls/false (apply (lambda (j3b7f@rest) (j3b6f@f j3b7f@rest (+ j3b6c@i '1))) j3b7d@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3b7b@t))))))))))))) (j3a9a@get-mutators (lambda (j3b3f@foo j3b40@fields) (letrec* ((j3b44@gen-name (lambda (j3b67@x) (j319e@datum->syntax j3b3f@foo (string->symbol (string-append (symbol->string (j31a0@syntax->datum j3b3f@foo)) '"-" (symbol->string (j31a0@syntax->datum j3b67@x)) '"-set!")))))) (let j3b47@f ((j3b45@fields j3b40@fields)) (let ((j3b49@t j3b45@fields)) (let ((j3b4b@ls/false (j30ba@syntax-dispatch j3b49@t '()))) (if j3b4b@ls/false (apply (lambda () '()) j3b4b@ls/false) (let ((j3b4d@t j3b49@t)) (let ((j3b4f@ls/false (j30ba@syntax-dispatch j3b4d@t '((#(scheme-id mutable) any any any) . any)))) (if j3b4f@ls/false (apply (lambda (j3b51@name j3b52@accessor j3b53@mutator j3b54@rest) (cons j3b53@mutator (j3b47@f j3b54@rest))) j3b4f@ls/false) (let ((j3b59@t j3b4d@t)) (let ((j3b5b@ls/false (j30ba@syntax-dispatch j3b59@t '((#(scheme-id mutable) any) . any)))) (if j3b5b@ls/false (apply (lambda (j3b5d@name j3b5e@rest) (cons (j3b44@gen-name j3b5d@name) (j3b47@f j3b5e@rest))) j3b5b@ls/false) (let ((j3b61@t j3b59@t)) (let ((j3b63@ls/false (j30ba@syntax-dispatch j3b61@t '(_ . any)))) (if j3b63@ls/false (apply (lambda (j3b65@rest) (j3b47@f j3b65@rest)) j3b63@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3b61@t))))))))))))))))) (j3a9c@get-accessors (lambda (j3afb@foo j3afc@fields) (letrec* ((j3b00@gen-name (lambda (j3b3d@x) (j319e@datum->syntax j3afb@foo (string->symbol (string-append (symbol->string (j31a0@syntax->datum j3afb@foo)) '"-" (symbol->string (j31a0@syntax->datum j3b3d@x)))))))) (map (lambda (j3b01@field) (let ((j3b03@t j3b01@field)) (let ((j3b05@ls/false (j30ba@syntax-dispatch j3b03@t '(#(scheme-id mutable) any any any)))) (if (and j3b05@ls/false (apply (lambda (j3b07@name j3b08@accessor j3b09@mutator) (j2eb3@id? j3b08@accessor)) j3b05@ls/false)) (apply (lambda (j3b0d@name j3b0e@accessor j3b0f@mutator) j3b0e@accessor) j3b05@ls/false) (let ((j3b13@t j3b03@t)) (let ((j3b15@ls/false (j30ba@syntax-dispatch j3b13@t '(#(scheme-id immutable) any any)))) (if (and j3b15@ls/false (apply (lambda (j3b17@name j3b18@accessor) (j2eb3@id? j3b18@accessor)) j3b15@ls/false)) (apply (lambda (j3b1b@name j3b1c@accessor) j3b1c@accessor) j3b15@ls/false) (let ((j3b1f@t j3b13@t)) (let ((j3b21@ls/false (j30ba@syntax-dispatch j3b1f@t '(#(scheme-id mutable) any)))) (if (and j3b21@ls/false (apply (lambda (j3b23@name) (j2eb3@id? j3b23@name)) j3b21@ls/false)) (apply (lambda (j3b25@name) (j3b00@gen-name j3b25@name)) j3b21@ls/false) (let ((j3b27@t j3b1f@t)) (let ((j3b29@ls/false (j30ba@syntax-dispatch j3b27@t '(#(scheme-id immutable) any)))) (if (and j3b29@ls/false (apply (lambda (j3b2b@name) (j2eb3@id? j3b2b@name)) j3b29@ls/false)) (apply (lambda (j3b2d@name) (j3b00@gen-name j3b2d@name)) j3b29@ls/false) (let ((j3b2f@t j3b27@t)) (let ((j3b31@ls/false (j30ba@syntax-dispatch j3b2f@t 'any))) (if (and j3b31@ls/false (apply (lambda (j3b33@name) (j2eb3@id? j3b33@name)) j3b31@ls/false)) (apply (lambda (j3b35@name) (j3b00@gen-name j3b35@name)) j3b31@ls/false) (let ((j3b37@t j3b2f@t)) (let ((j3b39@ls/false (j30ba@syntax-dispatch j3b37@t 'any))) (if j3b39@ls/false (apply (lambda (j3b3b@others) (j319a@syntax-violation '#f '"invalid field spec" j3b01@field)) j3b39@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3b37@t)))))))))))))))))))) j3afc@fields)))) (j3a9e@enumerate (lambda (j3af3@ls) (let j3af9@f ((j3af5@ls j3af3@ls) (j3af6@i '0)) (if (null? j3af5@ls) '() (cons j3af6@i (j3af9@f (cdr j3af5@ls) (+ j3af6@i '1))))))) (j3aa0@do-define-record (lambda (j3acb@namespec j3acc@clause*) (let ((j3acf@foo (j3a84@get-record-name j3acb@namespec))) (let ((j3ad1@foo-rtd (gensym))) (let ((j3ad3@foo-rcd (gensym))) (let ((j3ad5@protocol (gensym))) (let ((j3ad7@make-foo (j3a86@get-record-constructor-name j3acb@namespec))) (let ((j3ad9@fields (j3a96@get-fields j3acc@clause*))) (let ((j3adb@idx* (j3a9e@enumerate j3ad9@fields))) (let ((j3add@foo-x* (j3a9c@get-accessors j3acf@foo j3ad9@fields))) (let ((j3adf@set-foo-x!* (j3a9a@get-mutators j3acf@foo j3ad9@fields))) (let ((j3ae1@set-foo-idx* (j3a98@get-mutator-indices j3ad9@fields))) (let ((j3ae3@foo? (j3a88@get-record-predicate-name j3acb@namespec))) (let ((j3ae5@foo-rtd-code (j3a8c@foo-rtd-code j3acf@foo j3acc@clause* (j3a8e@parent-rtd-code j3acc@clause*)))) (let ((j3ae7@foo-rcd-code (j3a92@foo-rcd-code j3acc@clause* j3ad1@foo-rtd j3ad5@protocol (j3a90@parent-rcd-code j3acc@clause*)))) (let ((j3ae9@protocol-code (j3a94@get-protocol-code j3acc@clause*))) (j3070@bless (cons 'begin (cons (list 'define j3ad1@foo-rtd j3ae5@foo-rtd-code) (cons (list 'define j3ad5@protocol j3ae9@protocol-code) (cons (list 'define j3ad3@foo-rcd j3ae7@foo-rcd-code) (cons (list 'define-syntax j3acf@foo (list 'list ''$rtd (list 'syntax j3ad1@foo-rtd) (list 'syntax j3ad3@foo-rcd))) (cons (list 'define j3ae3@foo? (list 'record-predicate j3ad1@foo-rtd)) (cons (list 'define j3ad7@make-foo (list 'record-constructor j3ad3@foo-rcd)) (append (map (lambda (j3aeb@foo-x j3aec@idx) (list 'define j3aeb@foo-x (list 'record-accessor j3ad1@foo-rtd j3aec@idx))) j3add@foo-x* j3adb@idx*) (map (lambda (j3aef@set-foo-x! j3af0@idx) (list 'define j3aef@set-foo-x! (list 'record-mutator j3ad1@foo-rtd j3af0@idx))) j3adf@set-foo-x!* j3ae1@set-foo-idx*)))))))))))))))))))))))))) (j3aa2@verify-clauses (lambda (j3aab@x j3aac@cls*) (letrec* ((j3ab0@valid-kwds (map j3070@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (j3ab2@free-id-member? (lambda (j3ac7@x j3ac8@ls) (and (pair? j3ac8@ls) (or (j2eb9@free-id=? j3ac7@x (car j3ac8@ls)) (j3ab2@free-id-member? j3ac7@x (cdr j3ac8@ls))))))) (let j3ab7@f ((j3ab3@cls* j3aac@cls*) (j3ab4@seen* '())) (if (not (null? j3ab3@cls*)) (let ((j3ab9@t (car j3ab3@cls*))) (let ((j3abb@ls/false (j30ba@syntax-dispatch j3ab9@t '(any . any)))) (if j3abb@ls/false (apply (lambda (j3abd@kwd j3abe@rest) (if (or (not (j2eb3@id? j3abd@kwd)) (not (j3ab2@free-id-member? j3abd@kwd j3ab0@valid-kwds))) (j319a@syntax-violation '#f '"not a valid define-record-type keyword" j3abd@kwd) (if (j2ebf@bound-id-member? j3abd@kwd j3ab4@seen*) (j319a@syntax-violation '#f '"duplicate use of keyword " j3aab@x j3abd@kwd) (j3ab7@f (cdr j3ab3@cls*) (cons j3abd@kwd j3ab4@seen*))))) j3abb@ls/false) (let ((j3ac1@t j3ab9@t)) (let ((j3ac3@ls/false (j30ba@syntax-dispatch j3ac1@t 'any))) (if j3ac3@ls/false (apply (lambda (j3ac5@cls) (j319a@syntax-violation '#f '"malformed define-record-type clause" j3ac5@cls)) j3ac3@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3ac1@t))))))) (void))))))) (let ((j3aa3@t j3a7f@x)) (let ((j3aa5@ls/false (j30ba@syntax-dispatch j3aa3@t '(_ any . each-any)))) (if j3aa5@ls/false (apply (lambda (j3aa7@namespec j3aa8@clause*) (begin (j3aa2@verify-clauses j3a7f@x j3aa8@clause*) (j3aa0@do-define-record j3aa7@namespec j3aa8@clause*))) j3aa5@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3aa3@t))))))) (set! j4b8a@j30ae@define-record-type-macro j30ae@define-record-type-macro) (set! j30b0@define-condition-type-macro (lambda (j3c7b@x) (letrec* ((j3c7e@mkname (lambda (j3cab@name j3cac@suffix) (j319e@datum->syntax j3cab@name (string->symbol (string-append (symbol->string (j31a0@syntax->datum j3cab@name)) j3cac@suffix)))))) (let ((j3c7f@t j3c7b@x)) (let ((j3c81@ls/false (j30ba@syntax-dispatch j3c7f@t '(any any any any any . #(each (any any)))))) (if (and j3c81@ls/false (apply (lambda (j3c83@ctxt j3c84@name j3c85@super j3c86@constructor j3c87@predicate j3c88@field* j3c89@accessor*) (and (j2eb3@id? j3c84@name) (j2eb3@id? j3c85@super) (j2eb3@id? j3c86@constructor) (j2eb3@id? j3c87@predicate) (for-all j2eb3@id? j3c88@field*) (for-all j2eb3@id? j3c89@accessor*))) j3c81@ls/false)) (apply (lambda (j3c91@ctxt j3c92@name j3c93@super j3c94@constructor j3c95@predicate j3c96@field* j3c97@accessor*) (let ((j3c9f@aux-accessor* (map (lambda (j3ca1@x) (gensym)) j3c97@accessor*))) (j3070@bless (cons 'begin (cons (cons 'define-record-type (cons (list j3c92@name j3c94@constructor (gensym)) (cons (list 'parent j3c93@super) (cons (cons 'fields (map (lambda (j3ca3@field j3ca4@aux) (list 'immutable j3ca3@field j3ca4@aux)) j3c96@field* j3c9f@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define j3c95@predicate (list 'condition-predicate (list 'record-type-descriptor j3c92@name))) (map (lambda (j3ca7@accessor j3ca8@aux) (list 'define j3ca7@accessor (list 'condition-accessor (list 'record-type-descriptor j3c92@name) j3ca8@aux))) j3c97@accessor* j3c9f@aux-accessor*))))))) j3c81@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3c7f@t))))))) (set! j4b8b@j30b0@define-condition-type-macro j30b0@define-condition-type-macro) (set! j30b2@incorrect-usage-macro (lambda (j3caf@e) (j319a@syntax-violation '#f '"incorrect usage of auxiliary keyword" j3caf@e))) (set! j4b8c@j30b2@incorrect-usage-macro j30b2@incorrect-usage-macro) (set! j30b4@parameterize-macro (lambda (j3cb1@e) (let ((j3cb3@t j3cb1@e)) (let ((j3cb5@ls/false (j30ba@syntax-dispatch j3cb3@t '(_ () any . each-any)))) (if j3cb5@ls/false (apply (lambda (j3cb7@b j3cb8@b*) (j3070@bless (cons 'let (cons '() (cons j3cb7@b j3cb8@b*))))) j3cb5@ls/false) (let ((j3cbb@t j3cb3@t)) (let ((j3cbd@ls/false (j30ba@syntax-dispatch j3cbb@t '(_ #(each (any any)) any . each-any)))) (if j3cbd@ls/false (apply (lambda (j3cbf@olhs* j3cc0@orhs* j3cc1@b j3cc2@b*) (let ((j3cc7@lhs* (j3188@generate-temporaries j3cbf@olhs*)) (j3cc8@rhs* (j3188@generate-temporaries j3cc0@orhs*))) (j3070@bless (cons (list 'lambda (append j3cc7@lhs* j3cc8@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (j3ccb@lhs j3ccc@rhs) (list 'let (list (list 't (list j3ccb@lhs))) (list j3ccb@lhs j3ccc@rhs) (cons 'set! (cons j3ccc@rhs '(t))))) j3cc7@lhs* j3cc8@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons j3cc1@b j3cc2@b*))) '(swap)))))) (append j3cbf@olhs* j3cc0@orhs*))))) j3cbd@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3cbb@t))))))))) (set! j4b8d@j30b4@parameterize-macro j30b4@parameterize-macro) (set! j30b6@foreign-call-transformer (lambda (j3ccf@e j3cd0@r j3cd1@mr) (let ((j3cd5@t j3ccf@e)) (let ((j3cd7@ls/false (j30ba@syntax-dispatch j3cd5@t '(_ any . each-any)))) (if j3cd7@ls/false (apply (lambda (j3cd9@name j3cda@arg*) (cons 'foreign-call (cons (j30dc@chi-expr j3cd9@name j3cd0@r j3cd1@mr) (j30d8@chi-expr* j3cda@arg* j3cd0@r j3cd1@mr)))) j3cd7@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3cd5@t)))))) (set! j4b8e@j30b6@foreign-call-transformer j30b6@foreign-call-transformer) (set! j30b8@convert-pattern (lambda (j3cdd@pattern j3cde@keys) (letrec* ((j3ce2@cvt* (lambda (j3d81@p* j3d82@n j3d83@ids) (if (null? j3d81@p*) (values '() j3d83@ids) (call-with-values (lambda () (j3ce2@cvt* (cdr j3d81@p*) j3d82@n j3d83@ids)) (lambda (j3d8b@j3d88 j3d8c@j3d8a) (let ((j3d8f@ids j3d8c@j3d8a) (j3d90@y j3d8b@j3d88)) (call-with-values (lambda () (j3ce4@cvt (car j3d81@p*) j3d82@n j3d8f@ids)) (lambda (j3d97@j3d94 j3d98@j3d96) (let ((j3d9b@ids j3d98@j3d96) (j3d9c@x j3d97@j3d94)) (values (cons j3d9c@x j3d90@y) j3d9b@ids)))))))))) (j3ce4@cvt (lambda (j3ce5@p j3ce6@n j3ce7@ids) (let ((j3ceb@t j3ce5@p)) (let ((j3ced@ls/false (j30ba@syntax-dispatch j3ceb@t 'any))) (if (and j3ced@ls/false (apply (lambda (j3cef@id) (j2eb3@id? j3cef@id)) j3ced@ls/false)) (apply (lambda (j3cf1@id) (if (j2ebf@bound-id-member? j3ce5@p j3cde@keys) (values (vector 'free-id j3ce5@p) j3ce7@ids) (if (j2eb9@free-id=? j3ce5@p (j3042@scheme-stx '_)) (values '_ j3ce7@ids) (values 'any (cons (cons j3ce5@p j3ce6@n) j3ce7@ids))))) j3ced@ls/false) (let ((j3cf3@t j3ceb@t)) (let ((j3cf5@ls/false (j30ba@syntax-dispatch j3cf3@t '(any any)))) (if (and j3cf5@ls/false (apply (lambda (j3cf7@p j3cf8@dots) (j30bc@ellipsis? j3cf8@dots)) j3cf5@ls/false)) (apply (lambda (j3cfb@p j3cfc@dots) (call-with-values (lambda () (j3ce4@cvt j3cfb@p (+ j3ce6@n '1) j3ce7@ids)) (lambda (j3d03@j3d00 j3d04@j3d02) (let ((j3d07@ids j3d04@j3d02) (j3d08@p j3d03@j3d00)) (values (if (eq? j3d08@p 'any) 'each-any (vector 'each j3d08@p)) j3d07@ids))))) j3cf5@ls/false) (let ((j3d0b@t j3cf3@t)) (let ((j3d0d@ls/false (j30ba@syntax-dispatch j3d0b@t '(any any . #(each+ any () any))))) (if (and j3d0d@ls/false (apply (lambda (j3d0f@x j3d10@dots j3d11@ys j3d12@z) (j30bc@ellipsis? j3d10@dots)) j3d0d@ls/false)) (apply (lambda (j3d17@x j3d18@dots j3d19@ys j3d1a@z) (call-with-values (lambda () (j3ce4@cvt j3d1a@z j3ce6@n j3ce7@ids)) (lambda (j3d23@j3d20 j3d24@j3d22) (let ((j3d27@ids j3d24@j3d22) (j3d28@z j3d23@j3d20)) (call-with-values (lambda () (j3ce2@cvt* j3d19@ys j3ce6@n j3d27@ids)) (lambda (j3d2f@j3d2c j3d30@j3d2e) (let ((j3d33@ids j3d30@j3d2e) (j3d34@ys j3d2f@j3d2c)) (call-with-values (lambda () (j3ce4@cvt j3d17@x (+ j3ce6@n '1) j3d33@ids)) (lambda (j3d3b@j3d38 j3d3c@j3d3a) (let ((j3d3f@ids j3d3c@j3d3a) (j3d40@x j3d3b@j3d38)) (values (vector 'each+ j3d40@x (reverse j3d34@ys) j3d28@z) j3d3f@ids))))))))))) j3d0d@ls/false) (let ((j3d43@t j3d0b@t)) (let ((j3d45@ls/false (j30ba@syntax-dispatch j3d43@t '(any . any)))) (if j3d45@ls/false (apply (lambda (j3d47@x j3d48@y) (call-with-values (lambda () (j3ce4@cvt j3d48@y j3ce6@n j3ce7@ids)) (lambda (j3d4f@j3d4c j3d50@j3d4e) (let ((j3d53@ids j3d50@j3d4e) (j3d54@y j3d4f@j3d4c)) (call-with-values (lambda () (j3ce4@cvt j3d47@x j3ce6@n j3d53@ids)) (lambda (j3d5b@j3d58 j3d5c@j3d5a) (let ((j3d5f@ids j3d5c@j3d5a) (j3d60@x j3d5b@j3d58)) (values (cons j3d60@x j3d54@y) j3d5f@ids)))))))) j3d45@ls/false) (let ((j3d63@t j3d43@t)) (let ((j3d65@ls/false (j30ba@syntax-dispatch j3d63@t '()))) (if j3d65@ls/false (apply (lambda () (values '() j3ce7@ids)) j3d65@ls/false) (let ((j3d67@t j3d63@t)) (let ((j3d69@ls/false (j30ba@syntax-dispatch j3d67@t '#(vector each-any)))) (if (and j3d69@ls/false (apply (lambda (j3d6b@p) (not (j2e7f@stx? j3d6b@p))) j3d69@ls/false)) (apply (lambda (j3d6d@p) (call-with-values (lambda () (j3ce4@cvt j3d6d@p j3ce6@n j3ce7@ids)) (lambda (j3d73@j3d70 j3d74@j3d72) (let ((j3d77@ids j3d74@j3d72) (j3d78@p j3d73@j3d70)) (values (vector 'vector j3d78@p) j3d77@ids))))) j3d69@ls/false) (let ((j3d7b@t j3d67@t)) (let ((j3d7d@ls/false (j30ba@syntax-dispatch j3d7b@t 'any))) (if j3d7d@ls/false (apply (lambda (j3d7f@datum) (values (vector 'atom (j2ec7@stx->datum j3d7f@datum)) j3ce7@ids)) j3d7d@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3d7b@t))))))))))))))))))))))))) (j3ce4@cvt j3cdd@pattern '0 '())))) (set! j4b8f@j30b8@convert-pattern j30b8@convert-pattern) (set! j30ba@syntax-dispatch (letrec* ((j3da0@stx^ (lambda (j3e7b@e j3e7c@m* j3e7d@s* j3e7e@ae*) (if (and (null? j3e7c@m*) (null? j3e7d@s*) (null? j3e7e@ae*)) j3e7b@e (j2e9b@mkstx j3e7b@e j3e7c@m* j3e7d@s* j3e7e@ae*)))) (j3da2@match-each (lambda (j3e5b@e j3e5c@p j3e5d@m* j3e5e@s* j3e5f@ae*) (if (pair? j3e5b@e) (let ((j3e65@first (j3dae@match (car j3e5b@e) j3e5c@p j3e5d@m* j3e5e@s* j3e5f@ae* '()))) (and j3e65@first (let ((j3e67@rest (j3da2@match-each (cdr j3e5b@e) j3e5c@p j3e5d@m* j3e5e@s* j3e5f@ae*))) (and j3e67@rest (cons j3e65@first j3e67@rest))))) (if (null? j3e5b@e) '() (if (j2e7f@stx? j3e5b@e) (and (not (j2e39@top-marked? j3e5d@m*)) (call-with-values (lambda () (join-wraps j3e5d@m* j3e5e@s* j3e5f@ae* j3e5b@e)) (lambda (j3e6f@j3e6a j3e70@j3e6c j3e71@j3e6e) (let ((j3e75@ae* j3e71@j3e6e) (j3e76@s* j3e70@j3e6c) (j3e77@m* j3e6f@j3e6a)) (j3da2@match-each (j2e81@stx-expr j3e5b@e) j3e5c@p j3e77@m* j3e76@s* j3e75@ae*))))) (if (j29f7@j28c9@annotation? j3e5b@e) (j3da2@match-each (j29f9@j28cd@annotation-expression j3e5b@e) j3e5c@p j3e5d@m* j3e5e@s* j3e5f@ae*) '#f)))))) (j3da4@match-each+ (lambda (j3e1b@e j3e1c@x-pat j3e1d@y-pat j3e1e@z-pat j3e1f@m* j3e20@s* j3e21@ae* j3e22@r) (let j3e33@f ((j3e2b@e j3e1b@e) (j3e2c@m* j3e1f@m*) (j3e2d@s* j3e20@s*) (j3e2e@ae* j3e21@ae*)) (if (pair? j3e2b@e) (call-with-values (lambda () (j3e33@f (cdr j3e2b@e) j3e2c@m* j3e2d@s* j3e2e@ae*)) (lambda (j3e3b@j3e36 j3e3c@j3e38 j3e3d@j3e3a) (let ((j3e41@r j3e3d@j3e3a) (j3e42@y-pat j3e3c@j3e38) (j3e43@xr* j3e3b@j3e36)) (if j3e41@r (if (null? j3e42@y-pat) (let ((j3e47@xr (j3dae@match (car j3e2b@e) j3e1c@x-pat j3e2c@m* j3e2d@s* j3e2e@ae* '()))) (if j3e47@xr (values (cons j3e47@xr j3e43@xr*) j3e42@y-pat j3e41@r) (values '#f '#f '#f))) (values '() (cdr j3e42@y-pat) (j3dae@match (car j3e2b@e) (car j3e42@y-pat) j3e2c@m* j3e2d@s* j3e2e@ae* j3e41@r))) (values '#f '#f '#f))))) (if (j2e7f@stx? j3e2b@e) (if (j2e39@top-marked? j3e2c@m*) (values '() j3e1d@y-pat (j3dae@match j3e2b@e j3e1e@z-pat j3e2c@m* j3e2d@s* j3e2e@ae* j3e22@r)) (call-with-values (lambda () (join-wraps j3e2c@m* j3e2d@s* j3e2e@ae* j3e2b@e)) (lambda (j3e4f@j3e4a j3e50@j3e4c j3e51@j3e4e) (let ((j3e55@ae* j3e51@j3e4e) (j3e56@s* j3e50@j3e4c) (j3e57@m* j3e4f@j3e4a)) (j3e33@f (j2e81@stx-expr j3e2b@e) j3e57@m* j3e56@s* j3e55@ae*))))) (if (j29f7@j28c9@annotation? j3e2b@e) (j3e33@f (j29f9@j28cd@annotation-expression j3e2b@e) j3e2c@m* j3e2d@s* j3e2e@ae*) (values '() j3e1d@y-pat (j3dae@match j3e2b@e j3e1e@z-pat j3e2c@m* j3e2d@s* j3e2e@ae* j3e22@r)))))))) (j3da6@match-each-any (lambda (j3dff@e j3e00@m* j3e01@s* j3e02@ae*) (if (pair? j3dff@e) (let ((j3e07@l (j3da6@match-each-any (cdr j3dff@e) j3e00@m* j3e01@s* j3e02@ae*))) (and j3e07@l (cons (j3da0@stx^ (car j3dff@e) j3e00@m* j3e01@s* j3e02@ae*) j3e07@l))) (if (null? j3dff@e) '() (if (j2e7f@stx? j3dff@e) (and (not (j2e39@top-marked? j3e00@m*)) (call-with-values (lambda () (join-wraps j3e00@m* j3e01@s* j3e02@ae* j3dff@e)) (lambda (j3e0f@j3e0a j3e10@j3e0c j3e11@j3e0e) (let ((j3e15@ae* j3e11@j3e0e) (j3e16@s* j3e10@j3e0c) (j3e17@m* j3e0f@j3e0a)) (j3da6@match-each-any (j2e81@stx-expr j3dff@e) j3e17@m* j3e16@s* j3e15@ae*))))) (if (j29f7@j28c9@annotation? j3dff@e) (j3da6@match-each-any (j29f9@j28cd@annotation-expression j3dff@e) j3e00@m* j3e01@s* j3e02@ae*) '#f)))))) (j3da8@match-empty (lambda (j3df9@p j3dfa@r) (if (null? j3df9@p) j3dfa@r (if (eq? j3df9@p '_) j3dfa@r (if (eq? j3df9@p 'any) (cons '() j3dfa@r) (if (pair? j3df9@p) (j3da8@match-empty (car j3df9@p) (j3da8@match-empty (cdr j3df9@p) j3dfa@r)) (if (eq? j3df9@p 'each-any) (cons '() j3dfa@r) (let ((j3dfd@t (vector-ref j3df9@p '0))) (if (memv j3dfd@t '(each)) (j3da8@match-empty (vector-ref j3df9@p '1) j3dfa@r) (if (memv j3dfd@t '(each+)) (j3da8@match-empty (vector-ref j3df9@p '1) (j3da8@match-empty (reverse (vector-ref j3df9@p '2)) (j3da8@match-empty (vector-ref j3df9@p '3) j3dfa@r))) (if (memv j3dfd@t '(free-id atom)) j3dfa@r (if (memv j3dfd@t '(scheme-id atom)) j3dfa@r (if (memv j3dfd@t '(vector)) (j3da8@match-empty (vector-ref j3df9@p '1) j3dfa@r) (assertion-violation 'syntax-dispatch '"invalid pattern" j3df9@p)))))))))))))) (j3daa@combine (lambda (j3df5@r* j3df6@r) (if (null? (car j3df5@r*)) j3df6@r (cons (map car j3df5@r*) (j3daa@combine (map cdr j3df5@r*) j3df6@r))))) (j3dac@match* (lambda (j3dd1@e j3dd2@p j3dd3@m* j3dd4@s* j3dd5@ae* j3dd6@r) (if (null? j3dd2@p) (and (null? j3dd1@e) j3dd6@r) (if (pair? j3dd2@p) (and (pair? j3dd1@e) (j3dae@match (car j3dd1@e) (car j3dd2@p) j3dd3@m* j3dd4@s* j3dd5@ae* (j3dae@match (cdr j3dd1@e) (cdr j3dd2@p) j3dd3@m* j3dd4@s* j3dd5@ae* j3dd6@r))) (if (eq? j3dd2@p 'each-any) (let ((j3ddd@l (j3da6@match-each-any j3dd1@e j3dd3@m* j3dd4@s* j3dd5@ae*))) (and j3ddd@l (cons j3ddd@l j3dd6@r))) (let ((j3ddf@t (vector-ref j3dd2@p '0))) (if (memv j3ddf@t '(each)) (if (null? j3dd1@e) (j3da8@match-empty (vector-ref j3dd2@p '1) j3dd6@r) (let ((j3de1@r* (j3da2@match-each j3dd1@e (vector-ref j3dd2@p '1) j3dd3@m* j3dd4@s* j3dd5@ae*))) (and j3de1@r* (j3daa@combine j3de1@r* j3dd6@r)))) (if (memv j3ddf@t '(free-id)) (and (symbol? j3dd1@e) (j2e39@top-marked? j3dd3@m*) (j2eb9@free-id=? (j3da0@stx^ j3dd1@e j3dd3@m* j3dd4@s* j3dd5@ae*) (vector-ref j3dd2@p '1)) j3dd6@r) (if (memv j3ddf@t '(scheme-id)) (and (symbol? j3dd1@e) (j2e39@top-marked? j3dd3@m*) (j2eb9@free-id=? (j3da0@stx^ j3dd1@e j3dd3@m* j3dd4@s* j3dd5@ae*) (j3042@scheme-stx (vector-ref j3dd2@p '1))) j3dd6@r) (if (memv j3ddf@t '(each+)) (call-with-values (lambda () (j3da4@match-each+ j3dd1@e (vector-ref j3dd2@p '1) (vector-ref j3dd2@p '2) (vector-ref j3dd2@p '3) j3dd3@m* j3dd4@s* j3dd5@ae* j3dd6@r)) (lambda (j3de9@j3de4 j3dea@j3de6 j3deb@j3de8) (let ((j3def@r j3deb@j3de8) (j3df0@y-pat j3dea@j3de6) (j3df1@xr* j3de9@j3de4)) (and j3def@r (null? j3df0@y-pat) (if (null? j3df1@xr*) (j3da8@match-empty (vector-ref j3dd2@p '1) j3def@r) (j3daa@combine j3df1@xr* j3def@r)))))) (if (memv j3ddf@t '(atom)) (and (fast-equal? (vector-ref j3dd2@p '1) (j2ec5@strip j3dd1@e j3dd3@m*)) j3dd6@r) (if (memv j3ddf@t '(vector)) (and (vector? j3dd1@e) (j3dae@match (vector->list j3dd1@e) (vector-ref j3dd2@p '1) j3dd3@m* j3dd4@s* j3dd5@ae* j3dd6@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" j3dd2@p))))))))))))) (j3dae@match (lambda (j3db3@e j3db4@p j3db5@m* j3db6@s* j3db7@ae* j3db8@r) (if (not j3db8@r) '#f (if (eq? j3db4@p '_) j3db8@r (if (eq? j3db4@p 'any) (cons (j3da0@stx^ j3db3@e j3db5@m* j3db6@s* j3db7@ae*) j3db8@r) (if (j2e7f@stx? j3db3@e) (and (not (j2e39@top-marked? j3db5@m*)) (call-with-values (lambda () (join-wraps j3db5@m* j3db6@s* j3db7@ae* j3db3@e)) (lambda (j3dc5@j3dc0 j3dc6@j3dc2 j3dc7@j3dc4) (let ((j3dcb@ae* j3dc7@j3dc4) (j3dcc@s* j3dc6@j3dc2) (j3dcd@m* j3dc5@j3dc0)) (j3dae@match (j2e81@stx-expr j3db3@e) j3db4@p j3dcd@m* j3dcc@s* j3dcb@ae* j3db8@r))))) (if (j29f7@j28c9@annotation? j3db3@e) (j3dae@match (j29f9@j28cd@annotation-expression j3db3@e) j3db4@p j3db5@m* j3db6@s* j3db7@ae* j3db8@r) (j3dac@match* j3db3@e j3db4@p j3db5@m* j3db6@s* j3db7@ae* j3db8@r))))))))) (lambda (j3daf@e j3db0@p) (j3dae@match j3daf@e j3db0@p '() '() '() '())))) (set! j4b90@j30ba@syntax-dispatch j30ba@syntax-dispatch) (set! j30bc@ellipsis? (lambda (j3e83@x) (and (j2eb3@id? j3e83@x) (j2eb9@free-id=? j3e83@x (j3042@scheme-stx '...))))) (set! j4b91@j30bc@ellipsis? j30bc@ellipsis?) (set! j30be@underscore? (lambda (j3e85@x) (and (j2eb3@id? j3e85@x) (j2eb9@free-id=? j3e85@x (j3042@scheme-stx '_))))) (set! j4b92@j30be@underscore? j30be@underscore?) (set! j30c0@verify-literals (lambda (j3e87@lits j3e88@expr) (for-each (lambda (j3e8b@x) (if (or (not (j2eb3@id? j3e8b@x)) (j30bc@ellipsis? j3e8b@x) (j30be@underscore? j3e8b@x)) (j319a@syntax-violation '#f '"invalid literal" j3e88@expr j3e8b@x) (void))) j3e87@lits))) (set! j4b93@j30c0@verify-literals j30c0@verify-literals) (set! j30c2@syntax-case-transformer (letrec* ((j3e8e@build-dispatch-call (lambda (j3eff@pvars j3f00@expr j3f01@y j3f02@r j3f03@mr) (let ((j3f09@ids (map car j3eff@pvars)) (j3f0a@levels (map cdr j3eff@pvars))) (let ((j3f0d@labels (map j2e3f@gen-label j3f09@ids)) (j3f0e@new-vars (map j2e3b@gen-lexical j3f09@ids))) (let ((j3f11@body (j30dc@chi-expr (j2e9f@add-subst (j2e73@make-full-rib j3f09@ids j3f0d@labels) j3f00@expr) (append (map (lambda (j3f13@label j3f14@var j3f15@level) (cons j3f13@label (j2ecd@make-binding 'syntax (cons j3f14@var j3f15@level)))) j3f0d@labels j3f0e@new-vars (map cdr j3eff@pvars)) j3f02@r) j3f03@mr))) (list '(primitive apply) (j2e16@j2d48@build-lambda '#f j3f0e@new-vars j3f11@body) j3f01@y)))))) (j3e90@invalid-ids-error (lambda (j3ef3@id* j3ef4@e j3ef5@class) (let j3efd@find ((j3ef9@id* j3ef3@id*) (j3efa@ok* '())) (if (null? j3ef9@id*) (j319a@syntax-violation '#f '"invalid syntax" j3ef4@e) (if (j2eb3@id? (car j3ef9@id*)) (if (j2ebf@bound-id-member? (car j3ef9@id*) j3efa@ok*) (j3196@syntax-error (car j3ef9@id*) '"duplicate " j3ef5@class) (j3efd@find (cdr j3ef9@id*) (cons (car j3ef9@id*) j3efa@ok*))) (j3196@syntax-error (car j3ef9@id*) '"invalid " j3ef5@class)))))) (j3e92@gen-clause (lambda (j3ecb@x j3ecc@keys j3ecd@clauses j3ece@r j3ecf@mr j3ed0@pat j3ed1@fender j3ed2@expr) (call-with-values (lambda () (j30b8@convert-pattern j3ed0@pat j3ecc@keys)) (lambda (j3edf@j3edc j3ee0@j3ede) (let ((j3ee3@pvars j3ee0@j3ede) (j3ee4@p j3edf@j3edc)) (if (not (j2ebd@distinct-bound-ids? (map car j3ee3@pvars))) (j3e90@invalid-ids-error (map car j3ee3@pvars) j3ed0@pat '"pattern variable") (if (not (for-all (lambda (j3ee7@x) (not (j30bc@ellipsis? (car j3ee7@x)))) j3ee3@pvars)) (j319a@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" j3ed0@pat) (let ((j3ee9@y (j2e3b@gen-lexical 'tmp))) (let ((j3eeb@test (if (eq? j3ed1@fender '#t) j3ee9@y (let ((j3eed@call (j3e8e@build-dispatch-call j3ee3@pvars j3ed1@fender j3ee9@y j3ece@r j3ecf@mr))) (list 'if j3ee9@y j3eed@call (list 'quote '#f)))))) (let ((j3eef@conseq (j3e8e@build-dispatch-call j3ee3@pvars j3ed2@expr j3ee9@y j3ece@r j3ecf@mr))) (let ((j3ef1@altern (j3e94@gen-syntax-case j3ecb@x j3ecc@keys j3ecd@clauses j3ece@r j3ecf@mr))) (list (j2e16@j2d48@build-lambda '#f (list j3ee9@y) (list 'if j3eeb@test j3eef@conseq j3ef1@altern)) (list '(primitive syntax-dispatch) j3ecb@x (list 'quote j3ee4@p)))))))))))))) (j3e94@gen-syntax-case (lambda (j3ea9@x j3eaa@keys j3eab@clauses j3eac@r j3ead@mr) (if (null? j3eab@clauses) (list '(primitive syntax-error) j3ea9@x) (let ((j3eb3@t (car j3eab@clauses))) (let ((j3eb5@ls/false (j30ba@syntax-dispatch j3eb3@t '(any any)))) (if j3eb5@ls/false (apply (lambda (j3eb7@pat j3eb8@expr) (if (and (j2eb3@id? j3eb7@pat) (not (j2ebf@bound-id-member? j3eb7@pat j3eaa@keys)) (not (j30bc@ellipsis? j3eb7@pat))) (if (j2eb9@free-id=? j3eb7@pat (j3042@scheme-stx '_)) (j30dc@chi-expr j3eb8@expr j3eac@r j3ead@mr) (let ((j3ebb@lab (j2e3f@gen-label j3eb7@pat)) (j3ebc@lex (j2e3b@gen-lexical j3eb7@pat))) (let ((j3ebf@body (j30dc@chi-expr (j2e9f@add-subst (j2e73@make-full-rib (list j3eb7@pat) (list j3ebb@lab)) j3eb8@expr) (cons (cons j3ebb@lab (j2ecd@make-binding 'syntax (cons j3ebc@lex '0))) j3eac@r) j3ead@mr))) (list (j2e16@j2d48@build-lambda '#f (list j3ebc@lex) j3ebf@body) j3ea9@x)))) (j3e92@gen-clause j3ea9@x j3eaa@keys (cdr j3eab@clauses) j3eac@r j3ead@mr j3eb7@pat '#t j3eb8@expr))) j3eb5@ls/false) (let ((j3ec1@t j3eb3@t)) (let ((j3ec3@ls/false (j30ba@syntax-dispatch j3ec1@t '(any any any)))) (if j3ec3@ls/false (apply (lambda (j3ec5@pat j3ec6@fender j3ec7@expr) (j3e92@gen-clause j3ea9@x j3eaa@keys (cdr j3eab@clauses) j3eac@r j3ead@mr j3ec5@pat j3ec6@fender j3ec7@expr)) j3ec3@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3ec1@t))))))))))) (lambda (j3e95@e j3e96@r j3e97@mr) (let ((j3e9b@t j3e95@e)) (let ((j3e9d@ls/false (j30ba@syntax-dispatch j3e9b@t '(_ any each-any . each-any)))) (if j3e9d@ls/false (apply (lambda (j3e9f@expr j3ea0@keys j3ea1@clauses) (begin (j30c0@verify-literals j3ea0@keys j3e95@e) (let ((j3ea5@x (j2e3b@gen-lexical 'tmp))) (let ((j3ea7@body (j3e94@gen-syntax-case j3ea5@x j3ea0@keys j3ea1@clauses j3e96@r j3e97@mr))) (list (j2e16@j2d48@build-lambda '#f (list j3ea5@x) j3ea7@body) (j30dc@chi-expr j3e9f@expr j3e96@r j3e97@mr)))))) j3e9d@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3e9b@t))))))) (set! j4b94@j30c2@syntax-case-transformer j30c2@syntax-case-transformer) (set! j30c4@ellipsis-map (lambda (j3f19@proc j3f1a@ls . j3f1d@ls*) (letrec* ((j3f20@who '...)) (begin (if (not (list? j3f1a@ls)) (assertion-violation j3f20@who '"not a list" j3f1a@ls) (void)) (if (not (null? j3f1d@ls*)) (let ((j3f21@n (length j3f1a@ls))) (for-each (lambda (j3f23@x) (begin (if (not (list? j3f23@x)) (assertion-violation j3f20@who '"not a list" j3f23@x) (void)) (if (not (= (length j3f23@x) j3f21@n)) (assertion-violation j3f20@who '"length mismatch" j3f1a@ls j3f23@x) (void)))) j3f1d@ls*)) (void)) (apply map j3f19@proc j3f1a@ls j3f1d@ls*))))) (set! j4b95@j30c4@ellipsis-map j30c4@ellipsis-map) (set! j30c6@syntax-transformer (letrec* ((j3f26@gen-syntax (lambda (j3f9d@src j3f9e@e j3f9f@r j3fa0@maps j3fa1@ellipsis? j3fa2@vec?) (let ((j3fa9@t j3f9e@e)) (let ((j3fab@ls/false (j30ba@syntax-dispatch j3fa9@t 'any))) (if (and j3fab@ls/false (apply (lambda (j3fad@dots) (j3fa1@ellipsis? j3fad@dots)) j3fab@ls/false)) (apply (lambda (j3faf@dots) (j319a@syntax-violation '#f '"misplaced ellipsis in syntax form" j3f9d@src)) j3fab@ls/false) (let ((j3fb1@t j3fa9@t)) (let ((j3fb3@ls/false (j30ba@syntax-dispatch j3fb1@t 'any))) (if (and j3fb3@ls/false (apply (lambda (j3fb5@id) (j2eb3@id? j3fb5@id)) j3fb3@ls/false)) (apply (lambda (j3fb7@id) (let ((j3fb9@label (j2ec9@id->label j3f9e@e))) (let ((j3fbb@b (j2ecb@label->binding j3fb9@label j3f9f@r))) (if (eq? (j2ecf@binding-type j3fbb@b) 'syntax) (call-with-values (lambda () (let ((j3fc1@var.lev (j2ed1@binding-value j3fbb@b))) (j3f28@gen-ref j3f9d@src (car j3fc1@var.lev) (cdr j3fc1@var.lev) j3fa0@maps))) (lambda (j3fc3@j3fbe j3fc4@j3fc0) (let ((j3fc7@maps j3fc4@j3fc0) (j3fc8@var j3fc3@j3fbe)) (values (list 'ref j3fc8@var) j3fc7@maps)))) (values (list 'quote j3f9e@e) j3fa0@maps))))) j3fb3@ls/false) (let ((j3fcb@t j3fb1@t)) (let ((j3fcd@ls/false (j30ba@syntax-dispatch j3fcb@t '(any any)))) (if (and j3fcd@ls/false (apply (lambda (j3fcf@dots j3fd0@e) (j3fa1@ellipsis? j3fcf@dots)) j3fcd@ls/false)) (apply (lambda (j3fd3@dots j3fd4@e) (if j3fa2@vec? (j319a@syntax-violation '#f '"misplaced ellipsis in syntax form" j3f9d@src) (j3f26@gen-syntax j3f9d@src j3fd4@e j3f9f@r j3fa0@maps (lambda (j3fd7@x) '#f) '#f))) j3fcd@ls/false) (let ((j3fd9@t j3fcb@t)) (let ((j3fdb@ls/false (j30ba@syntax-dispatch j3fd9@t '(any any . any)))) (if (and j3fdb@ls/false (apply (lambda (j3fdd@x j3fde@dots j3fdf@y) (j3fa1@ellipsis? j3fde@dots)) j3fdb@ls/false)) (apply (lambda (j3fe3@x j3fe4@dots j3fe5@y) (let j3ffb@f ((j3fe9@y j3fe5@y) (j3fea@k (lambda (j3fed@maps) (call-with-values (lambda () (j3f26@gen-syntax j3f9d@src j3fe3@x j3f9f@r (cons '() j3fed@maps) j3fa1@ellipsis? '#f)) (lambda (j3ff3@j3ff0 j3ff4@j3ff2) (let ((j3ff7@maps j3ff4@j3ff2) (j3ff8@x j3ff3@j3ff0)) (if (null? (car j3ff7@maps)) (j319a@syntax-violation '#f '"extra ellipsis in syntax form" j3f9d@src) (values (j3f2e@gen-map j3ff8@x (car j3ff7@maps)) (cdr j3ff7@maps))))))))) (let ((j3ffd@t j3fe9@y)) (let ((j3fff@ls/false (j30ba@syntax-dispatch j3ffd@t '()))) (if j3fff@ls/false (apply (lambda () (j3fea@k j3fa0@maps)) j3fff@ls/false) (let ((j4001@t j3ffd@t)) (let ((j4003@ls/false (j30ba@syntax-dispatch j4001@t '(any . any)))) (if (and j4003@ls/false (apply (lambda (j4005@dots j4006@y) (j3fa1@ellipsis? j4005@dots)) j4003@ls/false)) (apply (lambda (j4009@dots j400a@y) (j3ffb@f j400a@y (lambda (j400d@maps) (call-with-values (lambda () (j3fea@k (cons '() j400d@maps))) (lambda (j4013@j4010 j4014@j4012) (let ((j4017@maps j4014@j4012) (j4018@x j4013@j4010)) (if (null? (car j4017@maps)) (j319a@syntax-violation '#f '"extra ellipsis in syntax form" j3f9d@src) (values (j3f2c@gen-mappend j4018@x (car j4017@maps)) (cdr j4017@maps))))))))) j4003@ls/false) (let ((j401b@t j4001@t)) (let ((j401d@ls/false (j30ba@syntax-dispatch j401b@t '_))) (if j401d@ls/false (apply (lambda () (call-with-values (lambda () (j3f26@gen-syntax j3f9d@src j3fe9@y j3f9f@r j3fa0@maps j3fa1@ellipsis? j3fa2@vec?)) (lambda (j4023@j4020 j4024@j4022) (let ((j4027@maps j4024@j4022) (j4028@y j4023@j4020)) (call-with-values (lambda () (j3fea@k j4027@maps)) (lambda (j402f@j402c j4030@j402e) (let ((j4033@maps j4030@j402e) (j4034@x j402f@j402c)) (values (j3f2a@gen-append j4034@x j4028@y) j4033@maps)))))))) j401d@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j401b@t)))))))))))) j3fdb@ls/false) (let ((j4037@t j3fd9@t)) (let ((j4039@ls/false (j30ba@syntax-dispatch j4037@t '(any . any)))) (if j4039@ls/false (apply (lambda (j403b@x j403c@y) (call-with-values (lambda () (j3f26@gen-syntax j3f9d@src j403b@x j3f9f@r j3fa0@maps j3fa1@ellipsis? '#f)) (lambda (j4043@j4040 j4044@j4042) (let ((j4047@maps j4044@j4042) (j4048@xnew j4043@j4040)) (call-with-values (lambda () (j3f26@gen-syntax j3f9d@src j403c@y j3f9f@r j4047@maps j3fa1@ellipsis? j3fa2@vec?)) (lambda (j404f@j404c j4050@j404e) (let ((j4053@maps j4050@j404e) (j4054@ynew j404f@j404c)) (values (j3f30@gen-cons j3f9e@e j403b@x j403c@y j4048@xnew j4054@ynew) j4053@maps)))))))) j4039@ls/false) (let ((j4057@t j4037@t)) (let ((j4059@ls/false (j30ba@syntax-dispatch j4057@t '#(vector each-any)))) (if j4059@ls/false (apply (lambda (j405b@ls) (call-with-values (lambda () (j3f26@gen-syntax j3f9d@src j405b@ls j3f9f@r j3fa0@maps j3fa1@ellipsis? '#t)) (lambda (j4061@j405e j4062@j4060) (let ((j4065@maps j4062@j4060) (j4066@lsnew j4061@j405e)) (values (j3f32@gen-vector j3f9e@e j405b@ls j4066@lsnew) j4065@maps))))) j4059@ls/false) (let ((j4069@t j4057@t)) (let ((j406b@ls/false (j30ba@syntax-dispatch j4069@t '_))) (if j406b@ls/false (apply (lambda () (values (list 'quote j3f9e@e) j3fa0@maps)) j406b@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j4069@t)))))))))))))))))))))))) (j3f28@gen-ref (lambda (j3f83@src j3f84@var j3f85@level j3f86@maps) (if (= j3f85@level '0) (values j3f84@var j3f86@maps) (if (null? j3f86@maps) (j319a@syntax-violation '#f '"missing ellipsis in syntax form" j3f83@src) (call-with-values (lambda () (j3f28@gen-ref j3f83@src j3f84@var (- j3f85@level '1) (cdr j3f86@maps))) (lambda (j3f8f@j3f8c j3f90@j3f8e) (let ((j3f93@outer-maps j3f90@j3f8e) (j3f94@outer-var j3f8f@j3f8c)) (let ((j3f97@t (assq j3f94@outer-var (car j3f86@maps)))) (if j3f97@t ((lambda (j3f99@b) (values (cdr j3f99@b) j3f86@maps)) j3f97@t) (let ((j3f9b@inner-var (j2e3b@gen-lexical 'tmp))) (values j3f9b@inner-var (cons (cons (cons j3f94@outer-var j3f9b@inner-var) (car j3f86@maps)) j3f93@outer-maps)))))))))))) (j3f2a@gen-append (lambda (j3f7f@x j3f80@y) (if (fast-equal? j3f80@y ''()) j3f7f@x (list 'append j3f7f@x j3f80@y)))) (j3f2c@gen-mappend (lambda (j3f7b@e j3f7c@map-env) (list 'apply '(primitive append) (j3f2e@gen-map j3f7b@e j3f7c@map-env)))) (j3f2e@gen-map (lambda (j3f69@e j3f6a@map-env) (let ((j3f6d@formals (map cdr j3f6a@map-env)) (j3f6e@actuals (map (lambda (j3f71@x) (list 'ref (car j3f71@x))) j3f6a@map-env))) (if (eq? (car j3f69@e) 'ref) (car j3f6e@actuals) (if (for-all (lambda (j3f73@x) (and (eq? (car j3f73@x) 'ref) (memq (cadr j3f73@x) j3f6d@formals))) (cdr j3f69@e)) (let ((j3f75@args (map (let ((j3f77@r (map cons j3f6d@formals j3f6e@actuals))) (lambda (j3f79@x) (cdr (assq (cadr j3f79@x) j3f77@r)))) (cdr j3f69@e)))) (cons 'map (cons (list 'primitive (car j3f69@e)) j3f75@args))) (cons* 'map (list 'lambda j3f6d@formals j3f69@e) j3f6e@actuals)))))) (j3f30@gen-cons (lambda (j3f59@e j3f5a@x j3f5b@y j3f5c@xnew j3f5d@ynew) (let ((j3f63@t (car j3f5d@ynew))) (if (memv j3f63@t '(quote)) (if (eq? (car j3f5c@xnew) 'quote) (let ((j3f65@xnew (cadr j3f5c@xnew)) (j3f66@ynew (cadr j3f5d@ynew))) (if (and (eq? j3f65@xnew j3f5a@x) (eq? j3f66@ynew j3f5b@y)) (list 'quote j3f59@e) (list 'quote (cons j3f65@xnew j3f66@ynew)))) (if (null? (cadr j3f5d@ynew)) (list 'list j3f5c@xnew) (list 'cons j3f5c@xnew j3f5d@ynew))) (if (memv j3f63@t '(list)) (cons 'list (cons j3f5c@xnew (cdr j3f5d@ynew))) (list 'cons j3f5c@xnew j3f5d@ynew)))))) (j3f32@gen-vector (lambda (j3f53@e j3f54@ls j3f55@lsnew) (if (eq? (car j3f55@lsnew) 'quote) (if (eq? (cadr j3f55@lsnew) j3f54@ls) (list 'quote j3f53@e) (list 'quote (list->vector (cadr j3f55@lsnew)))) (if (eq? (car j3f55@lsnew) 'list) (cons 'vector (cdr j3f55@lsnew)) (list 'list->vector j3f55@lsnew))))) (j3f34@regen (lambda (j3f4d@x) (let ((j3f4f@t (car j3f4d@x))) (if (memv j3f4f@t '(ref)) (cadr j3f4d@x) (if (memv j3f4f@t '(primitive)) (list 'primitive (cadr j3f4d@x)) (if (memv j3f4f@t '(quote)) (list 'quote (cadr j3f4d@x)) (if (memv j3f4f@t '(lambda)) (j2e16@j2d48@build-lambda '#f (cadr j3f4d@x) (j3f34@regen (caddr j3f4d@x))) (if (memv j3f4f@t '(map)) (let ((j3f51@ls (map j3f34@regen (cdr j3f4d@x)))) (cons '(primitive ellipsis-map) j3f51@ls)) (cons (list 'primitive (car j3f4d@x)) (map j3f34@regen (cdr j3f4d@x)))))))))))) (lambda (j3f35@e j3f36@r j3f37@mr) (let ((j3f3b@t j3f35@e)) (let ((j3f3d@ls/false (j30ba@syntax-dispatch j3f3b@t '(_ any)))) (if j3f3d@ls/false (apply (lambda (j3f3f@x) (call-with-values (lambda () (j3f26@gen-syntax j3f35@e j3f3f@x j3f36@r '() j30bc@ellipsis? '#f)) (lambda (j3f45@j3f42 j3f46@j3f44) (let ((j3f49@maps j3f46@j3f44) (j3f4a@e j3f45@j3f42)) (j3f34@regen j3f4a@e))))) j3f3d@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j3f3b@t))))))) (set! j4b96@j30c6@syntax-transformer j30c6@syntax-transformer) (set! j30c8@core-macro-transformer (lambda (j406d@name) (let ((j406f@t j406d@name)) (if (memv j406f@t '(quote)) j306a@quote-transformer (if (memv j406f@t '(lambda)) j306e@lambda-transformer (if (memv j406f@t '(case-lambda)) j306c@case-lambda-transformer (if (memv j406f@t '(letrec)) j3052@letrec-transformer (if (memv j406f@t '(letrec*)) j3054@letrec*-transformer (if (memv j406f@t '(let)) j3050@let-transformer (if (memv j406f@t '(if)) j3062@if-transformer (if (memv j406f@t '(and)) j3064@and-transformer (if (memv j406f@t '(or)) j3066@or-transformer (if (memv j406f@t '(foreign-call)) j30b6@foreign-call-transformer (if (memv j406f@t '(syntax-case)) j30c2@syntax-case-transformer (if (memv j406f@t '(syntax)) j30c6@syntax-transformer (if (memv j406f@t '(type-descriptor)) j3058@type-descriptor-transformer (if (memv j406f@t '(record-type-descriptor)) j305a@record-type-descriptor-transformer (if (memv j406f@t '(record-constructor-descriptor)) j305c@record-constructor-descriptor-transformer (if (memv j406f@t '(fluid-let-syntax)) j3056@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" j406d@name)))))))))))))))))))) (set! j4b97@j30c8@core-macro-transformer j30c8@core-macro-transformer) (set! j30ca@symbol-macro (lambda (j4071@x j4072@set) (let ((j4075@t j4071@x)) (let ((j4077@ls/false (j30ba@syntax-dispatch j4075@t '(_ any)))) (if (and j4077@ls/false (apply (lambda (j4079@name) (and (j2eb3@id? j4079@name) (memq (j2eb5@id->sym j4079@name) j4072@set))) j4077@ls/false)) (apply (lambda (j407b@name) (j3070@bless (list 'quote j407b@name))) j4077@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j4075@t)))))) (set! j4b98@j30ca@symbol-macro j30ca@symbol-macro) (set! j30cc@macro-transformer (lambda (j407d@x) (if (procedure? j407d@x) j407d@x (if (symbol? j407d@x) (let ((j407f@t j407d@x)) (if (memv j407f@t '(define-record-type)) j30ae@define-record-type-macro (if (memv j407f@t '(define-struct)) j30ac@define-struct-macro (if (memv j407f@t '(include)) j30a2@include-macro (if (memv j407f@t '(cond)) j309e@cond-macro (if (memv j407f@t '(let)) j3076@let-macro (if (memv j407f@t '(do)) j3096@do-macro (if (memv j407f@t '(or)) j309a@or-macro (if (memv j407f@t '(and)) j309c@and-macro (if (memv j407f@t '(let*)) j3098@let*-macro (if (memv j407f@t '(let-values)) j3078@let-values-macro (if (memv j407f@t '(let*-values)) j307a@let*-values-macro (if (memv j407f@t '(syntax-rules)) j30a6@syntax-rules-macro (if (memv j407f@t '(quasiquote)) j30a8@quasiquote-macro (if (memv j407f@t '(quasisyntax)) j30aa@quasisyntax-macro (if (memv j407f@t '(with-syntax)) j3072@with-syntax-macro (if (memv j407f@t '(when)) j305e@when-macro (if (memv j407f@t '(unless)) j3060@unless-macro (if (memv j407f@t '(case)) j3068@case-macro (if (memv j407f@t '(identifier-syntax)) j3094@identifier-syntax-macro (if (memv j407f@t '(time)) j308c@time-macro (if (memv j407f@t '(delay)) j308e@delay-macro (if (memv j407f@t '(assert)) j3090@assert-macro (if (memv j407f@t '(endianness)) j3092@endianness-macro (if (memv j407f@t '(guard)) j3088@guard-macro (if (memv j407f@t '(define-enumeration)) j308a@define-enumeration-macro (if (memv j407f@t '(trace-lambda)) j307c@trace-lambda-macro (if (memv j407f@t '(trace-define)) j307e@trace-define-macro (if (memv j407f@t '(trace-define-syntax)) j3080@trace-define-syntax-macro (if (memv j407f@t '(trace-let-syntax)) j3084@trace-let-syntax-macro (if (memv j407f@t '(trace-letrec-syntax)) j3086@trace-letrec-syntax-macro (if (memv j407f@t '(define-condition-type)) j30b0@define-condition-type-macro (if (memv j407f@t '(parameterize)) j30b4@parameterize-macro (if (memv j407f@t '(include-into)) j30a4@include-into-macro (if (memv j407f@t '(eol-style)) (lambda (j4081@x) (j30ca@symbol-macro j4081@x '(none lf cr crlf nel crnel ls))) (if (memv j407f@t '(error-handling-mode)) (lambda (j4083@x) (j30ca@symbol-macro j4083@x '(ignore raise replace))) (if (memv j407f@t '(buffer-mode)) (lambda (j4085@x) (j30ca@symbol-macro j4085@x '(none line block))) (if (memv j407f@t '(file-options)) j2e2e@file-options-macro (if (memv j407f@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) j30b2@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" j407d@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" j407d@x))))) (set! j4b99@j30cc@macro-transformer j30cc@macro-transformer) (set! j30ce@local-macro-transformer (lambda (j4087@x) (car j4087@x))) (set! j4b9a@j30ce@local-macro-transformer j30ce@local-macro-transformer) (set! j30d0@do-macro-call (lambda (j4089@transformer j408a@expr) (let ((j408d@out (j4089@transformer (j2e9d@add-mark j2e97@anti-mark j408a@expr '#f)))) (begin (let j4091@f ((j408f@x j408d@out)) (if (not (j2e7f@stx? j408f@x)) (if (pair? j408f@x) (begin (j4091@f (car j408f@x)) (j4091@f (cdr j408f@x))) (if (vector? j408f@x) (vector-for-each j4091@f j408f@x) (if (symbol? j408f@x) (j319a@syntax-violation '#f '"raw symbol encountered in output of macro" j408a@expr j408f@x) (void)))) (void))) (j2e9d@add-mark (j2e95@gen-mark) j408d@out j408a@expr))))) (set! j4b9b@j30d0@do-macro-call j30d0@do-macro-call) (set! j30d2@chi-macro (lambda (j4093@p j4094@e) (j30d0@do-macro-call (j30cc@macro-transformer j4093@p) j4094@e))) (set! j4b9c@j30d2@chi-macro j30d2@chi-macro) (set! j30d4@chi-local-macro (lambda (j4097@p j4098@e) (j30d0@do-macro-call (j30ce@local-macro-transformer j4097@p) j4098@e))) (set! j4b9d@j30d4@chi-local-macro j30d4@chi-local-macro) (set! j30d6@chi-global-macro (lambda (j409b@p j409c@e) (let ((j409f@lib (car j409b@p)) (j40a0@loc (cdr j409b@p))) (begin (j2cd0@j2b1f@visit-library j409f@lib) (let ((j40a3@x (symbol-value j40a0@loc))) (let ((j40a5@transformer (if (procedure? j40a3@x) j40a3@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" j40a3@x)))) (j30d0@do-macro-call j40a5@transformer j409c@e))))))) (set! j4b9e@j30d6@chi-global-macro j30d6@chi-global-macro) (set! j30d8@chi-expr* (lambda (j40a7@e* j40a8@r j40a9@mr) (if (null? j40a7@e*) '() (let ((j40ad@e (j30dc@chi-expr (car j40a7@e*) j40a8@r j40a9@mr))) (cons j40ad@e (j30d8@chi-expr* (cdr j40a7@e*) j40a8@r j40a9@mr)))))) (set! j4b9f@j30d8@chi-expr* j30d8@chi-expr*) (set! j30da@chi-application (lambda (j40af@e j40b0@r j40b1@mr) (let ((j40b5@t j40af@e)) (let ((j40b7@ls/false (j30ba@syntax-dispatch j40b5@t '(any . each-any)))) (if j40b7@ls/false (apply (lambda (j40b9@rator j40ba@rands) (let ((j40bd@rator (j30dc@chi-expr j40b9@rator j40b0@r j40b1@mr))) (cons j40bd@rator (j30d8@chi-expr* j40ba@rands j40b0@r j40b1@mr)))) j40b7@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j40b5@t)))))) (set! j4ba0@j30da@chi-application j30da@chi-application) (set! j30dc@chi-expr (lambda (j40bf@e j40c0@r j40c1@mr) (call-with-values (lambda () (j2ed5@syntax-type j40bf@e j40c0@r)) (lambda (j40cb@j40c6 j40cc@j40c8 j40cd@j40ca) (let ((j40d1@kwd j40cd@j40ca) (j40d2@value j40cc@j40c8) (j40d3@type j40cb@j40c6)) (let ((j40d7@t j40d3@type)) (if (memv j40d7@t '(core-macro)) (let ((j40d9@transformer (j30c8@core-macro-transformer j40d2@value))) (j40d9@transformer j40bf@e j40c0@r j40c1@mr)) (if (memv j40d7@t '(global)) (let ((j40db@lib (car j40d2@value))) (let ((j40dd@loc (cdr j40d2@value))) (begin ((j3122@inv-collector) j40db@lib) j40dd@loc))) (if (memv j40d7@t '(core-prim)) (let ((j40df@name j40d2@value)) (list 'primitive j40df@name)) (if (memv j40d7@t '(call)) (j30da@chi-application j40bf@e j40c0@r j40c1@mr) (if (memv j40d7@t '(lexical)) (let ((j40e1@lex (j3044@lexical-var j40d2@value))) j40e1@lex) (if (memv j40d7@t '(global-macro global-macro!)) (j30dc@chi-expr (j30d6@chi-global-macro j40d2@value j40bf@e) j40c0@r j40c1@mr) (if (memv j40d7@t '(local-macro local-macro!)) (j30dc@chi-expr (j30d4@chi-local-macro j40d2@value j40bf@e) j40c0@r j40c1@mr) (if (memv j40d7@t '(macro macro!)) (j30dc@chi-expr (j30d2@chi-macro j40d2@value j40bf@e) j40c0@r j40c1@mr) (if (memv j40d7@t '(constant)) (let ((j40e3@datum j40d2@value)) (list 'quote j40e3@datum)) (if (memv j40d7@t '(set!)) (j30de@chi-set! j40bf@e j40c0@r j40c1@mr) (if (memv j40d7@t '(begin)) (let ((j40e5@t j40bf@e)) (let ((j40e7@ls/false (j30ba@syntax-dispatch j40e5@t '(_ any . each-any)))) (if j40e7@ls/false (apply (lambda (j40e9@x j40ea@x*) (j2e18@j2d78@build-sequence '#f (j30d8@chi-expr* (cons j40e9@x j40ea@x*) j40c0@r j40c1@mr))) j40e7@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j40e5@t)))) (if (memv j40d7@t '(let-syntax letrec-syntax)) (let ((j40ed@t j40bf@e)) (let ((j40ef@ls/false (j30ba@syntax-dispatch j40ed@t '(_ #(each (any any)) any . each-any)))) (if (and j40ef@ls/false (apply (lambda (j40f1@xlhs* j40f2@xrhs* j40f3@xbody j40f4@xbody*) (if (not (j2ebb@valid-bound-ids? j40f1@xlhs*)) (j319a@syntax-violation '#f '"invalid identifiers" j40bf@e) (void))) j40ef@ls/false)) (apply (lambda (j40f9@xlhs* j40fa@xrhs* j40fb@xbody j40fc@xbody*) (let ((j4101@xlab* (map j2e3f@gen-label j40f9@xlhs*))) (let ((j4103@xrib (j2e73@make-full-rib j40f9@xlhs* j4101@xlab*))) (let ((j4105@xb* (map (lambda (j4107@x) (j2eeb@make-eval-transformer (j3114@expand-transformer (if (eq? j40d3@type 'let-syntax) j4107@x (j2e9f@add-subst j4103@xrib j4107@x)) j40c1@mr))) j40fa@xrhs*))) (j2e18@j2d78@build-sequence '#f (j30d8@chi-expr* (map (lambda (j4109@x) (j2e9f@add-subst j4103@xrib j4109@x)) (cons j40fb@xbody j40fc@xbody*)) (append (map cons j4101@xlab* j4105@xb*) j40c0@r) (append (map cons j4101@xlab* j4105@xb*) j40c1@mr))))))) j40ef@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j40ed@t)))) (if (memv j40d7@t '(displaced-lexical)) (j319a@syntax-violation '#f '"identifier out of context" j40bf@e) (if (memv j40d7@t '(syntax)) (j319a@syntax-violation '#f '"reference to pattern variable outside a syntax form" j40bf@e) (if (memv j40d7@t '(define define-syntax module import library)) (j319a@syntax-violation '#f (string-append (let ((j410b@t j40d3@type)) (if (memv j410b@t '(define)) '"a definition" (if (memv j410b@t '(define-syntax)) '"a define-syntax" (if (memv j410b@t '(module)) '"a module definition" (if (memv j410b@t '(library)) '"a library definition" (if (memv j410b@t '(import)) '"an import declaration" (if (memv j410b@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") j40bf@e) (if (memv j40d7@t '(mutable)) (j319a@syntax-violation '#f '"attempt to reference an unexportable variable" j40bf@e) (j319a@syntax-violation '#f '"invalid expression" j40bf@e))))))))))))))))))))))) (set! j4ba1@j30dc@chi-expr j30dc@chi-expr) (set! j30de@chi-set! (lambda (j410d@e j410e@r j410f@mr) (let ((j4113@t j410d@e)) (let ((j4115@ls/false (j30ba@syntax-dispatch j4113@t '(_ any any)))) (if (and j4115@ls/false (apply (lambda (j4117@x j4118@v) (j2eb3@id? j4117@x)) j4115@ls/false)) (apply (lambda (j411b@x j411c@v) (call-with-values (lambda () (j2ed5@syntax-type j411b@x j410e@r)) (lambda (j4125@j4120 j4126@j4122 j4127@j4124) (let ((j412b@kwd j4127@j4124) (j412c@value j4126@j4122) (j412d@type j4125@j4120)) (let ((j4131@t j412d@type)) (if (memv j4131@t '(lexical)) (begin (j3048@set-lexical-mutable! j412c@value '#t) (list 'set! (j3044@lexical-var j412c@value) (j30dc@chi-expr j411c@v j410e@r j410f@mr))) (if (memv j4131@t '(core-prim)) (j319a@syntax-violation '#f '"cannot modify imported core primitive" j410d@e) (if (memv j4131@t '(global)) (j319a@syntax-violation '#f '"attempt to modify imported binding" j410d@e) (if (memv j4131@t '(global-macro!)) (j30dc@chi-expr (j30d6@chi-global-macro j412c@value j410d@e) j410e@r j410f@mr) (if (memv j4131@t '(local-macro!)) (j30dc@chi-expr (j30d4@chi-local-macro j412c@value j410d@e) j410e@r j410f@mr) (if (memv j4131@t '(mutable)) (j319a@syntax-violation '#f '"attempt to assign to an unexportable variable" j410d@e) (j319a@syntax-violation '#f '"invalid syntax" j410d@e)))))))))))) j4115@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j4113@t)))))) (set! j4ba2@j30de@chi-set! j30de@chi-set!) (set! j30e0@verify-formals (lambda (j4133@fmls j4134@stx) (let ((j4137@t j4133@fmls)) (let ((j4139@ls/false (j30ba@syntax-dispatch j4137@t 'each-any))) (if j4139@ls/false (apply (lambda (j413b@x*) (if (not (j2ebb@valid-bound-ids? j413b@x*)) (j3074@invalid-fmls-error j4134@stx j4133@fmls) (void))) j4139@ls/false) (let ((j413d@t j4137@t)) (let ((j413f@ls/false (j30ba@syntax-dispatch j413d@t '#(each+ any () any)))) (if j413f@ls/false (apply (lambda (j4141@x* j4142@x) (if (not (j2ebb@valid-bound-ids? (cons j4142@x j4141@x*))) (j3074@invalid-fmls-error j4134@stx j4133@fmls) (void))) j413f@ls/false) (let ((j4145@t j413d@t)) (let ((j4147@ls/false (j30ba@syntax-dispatch j4145@t '_))) (if j4147@ls/false (apply (lambda () (j319a@syntax-violation '#f '"invalid syntax" j4134@stx)) j4147@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j4145@t)))))))))))) (set! j4ba3@j30e0@verify-formals j30e0@verify-formals) (set! j30e2@chi-lambda-clause (lambda (j4149@stx j414a@fmls j414b@body* j414c@r j414d@mr) (let ((j4153@t j414a@fmls)) (let ((j4155@ls/false (j30ba@syntax-dispatch j4153@t 'each-any))) (if j4155@ls/false (apply (lambda (j4157@x*) (begin (j30e0@verify-formals j414a@fmls j4149@stx) (let ((j4159@lex* (map j2e3b@gen-lexical j4157@x*)) (j415a@lab* (map j2e3f@gen-label j4157@x*))) (values j4159@lex* (j30f2@chi-internal (j2e9f@add-subst (j2e73@make-full-rib j4157@x* j415a@lab*) j414b@body*) (j304c@add-lexicals j415a@lab* j4159@lex* j414c@r) j414d@mr))))) j4155@ls/false) (let ((j415d@t j4153@t)) (let ((j415f@ls/false (j30ba@syntax-dispatch j415d@t '#(each+ any () any)))) (if j415f@ls/false (apply (lambda (j4161@x* j4162@x) (begin (j30e0@verify-formals j414a@fmls j4149@stx) (let ((j4165@lex* (map j2e3b@gen-lexical j4161@x*)) (j4166@lab* (map j2e3f@gen-label j4161@x*)) (j4167@lex (j2e3b@gen-lexical j4162@x)) (j4168@lab (j2e3f@gen-label j4162@x))) (values (append j4165@lex* j4167@lex) (j30f2@chi-internal (j2e9f@add-subst (j2e73@make-full-rib (cons j4162@x j4161@x*) (cons j4168@lab j4166@lab*)) j414b@body*) (j304c@add-lexicals (cons j4168@lab j4166@lab*) (cons j4167@lex j4165@lex*) j414c@r) j414d@mr))))) j415f@ls/false) (let ((j416d@t j415d@t)) (let ((j416f@ls/false (j30ba@syntax-dispatch j416d@t '_))) (if j416f@ls/false (apply (lambda () (j319a@syntax-violation '#f '"invalid syntax" j414a@fmls)) j416f@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j416d@t)))))))))))) (set! j4ba4@j30e2@chi-lambda-clause j30e2@chi-lambda-clause) (set! j30e4@chi-lambda-clause* (lambda (j4171@stx j4172@fmls* j4173@body** j4174@r j4175@mr) (if (null? j4172@fmls*) (values '() '()) (call-with-values (lambda () (j30e2@chi-lambda-clause j4171@stx (car j4172@fmls*) (car j4173@body**) j4174@r j4175@mr)) (lambda (j417f@j417c j4180@j417e) (let ((j4183@b j4180@j417e) (j4184@a j417f@j417c)) (call-with-values (lambda () (j30e4@chi-lambda-clause* j4171@stx (cdr j4172@fmls*) (cdr j4173@body**) j4174@r j4175@mr)) (lambda (j418b@j4188 j418c@j418a) (let ((j418f@b* j418c@j418a) (j4190@a* j418b@j4188)) (values (cons j4184@a j4190@a*) (cons j4183@b j418f@b*))))))))))) (set! j4ba5@j30e4@chi-lambda-clause* j30e4@chi-lambda-clause*) (set! j30e6@chi-defun (lambda (j4193@x j4194@r j4195@mr) (let ((j4199@fmls (car j4193@x)) (j419a@body* (cdr j4193@x))) (call-with-values (lambda () (j30e2@chi-lambda-clause j4199@fmls j4199@fmls j419a@body* j4194@r j4195@mr)) (lambda (j41a1@j419e j41a2@j41a0) (let ((j41a5@body j41a2@j41a0) (j41a6@fmls j41a1@j419e)) (j2e16@j2d48@build-lambda '#f j41a6@fmls j41a5@body))))))) (set! j4ba6@j30e6@chi-defun j30e6@chi-defun) (set! j30e8@chi-rhs (lambda (j41a9@rhs j41aa@r j41ab@mr) (let ((j41af@t (car j41a9@rhs))) (if (memv j41af@t '(defun)) (j30e6@chi-defun (cdr j41a9@rhs) j41aa@r j41ab@mr) (if (memv j41af@t '(expr)) (let ((j41b1@expr (cdr j41a9@rhs))) (j30dc@chi-expr j41b1@expr j41aa@r j41ab@mr)) (if (memv j41af@t '(top-expr)) (let ((j41b3@expr (cdr j41a9@rhs))) (j2e18@j2d78@build-sequence '#f (list (j30dc@chi-expr j41b3@expr j41aa@r j41ab@mr) (j2e19@j2d7a@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" j41a9@rhs))))))) (set! j4ba7@j30e8@chi-rhs j30e8@chi-rhs) (set! j30ea@expand-interaction-rhs*/init* (lambda (j41b5@lhs* j41b6@rhs* j41b7@init* j41b8@r j41b9@mr) (let j41c3@f ((j41bf@lhs* j41b5@lhs*) (j41c0@rhs* j41b6@rhs*)) (if (null? j41bf@lhs*) (map (lambda (j41c5@x) (j30dc@chi-expr j41c5@x j41b8@r j41b9@mr)) j41b7@init*) (let ((j41c7@lhs (car j41bf@lhs*)) (j41c8@rhs (car j41c0@rhs*))) (let ((j41cb@t (car j41c8@rhs))) (if (memv j41cb@t '(defun)) (let ((j41cd@rhs (j30e6@chi-defun (cdr j41c8@rhs) j41b8@r j41b9@mr))) (cons (list 'set! j41c7@lhs j41cd@rhs) (j41c3@f (cdr j41bf@lhs*) (cdr j41c0@rhs*)))) (if (memv j41cb@t '(expr)) (let ((j41cf@rhs (j30dc@chi-expr (cdr j41c8@rhs) j41b8@r j41b9@mr))) (cons (list 'set! j41c7@lhs j41cf@rhs) (j41c3@f (cdr j41bf@lhs*) (cdr j41c0@rhs*)))) (if (memv j41cb@t '(top-expr)) (let ((j41d1@e (j30dc@chi-expr (cdr j41c8@rhs) j41b8@r j41b9@mr))) (cons j41d1@e (j41c3@f (cdr j41bf@lhs*) (cdr j41c0@rhs*)))) (error 'expand-interaction '"invallid" j41c8@rhs)))))))))) (set! j4ba8@j30ea@expand-interaction-rhs*/init* j30ea@expand-interaction-rhs*/init*) (set! j30ec@chi-rhs* (lambda (j41d3@rhs* j41d4@r j41d5@mr) (let j41db@f ((j41d9@ls j41d3@rhs*)) (if (null? j41d9@ls) '() (let ((j41dd@a (j30e8@chi-rhs (car j41d9@ls) j41d4@r j41d5@mr))) (cons j41dd@a (j41db@f (cdr j41d9@ls)))))))) (set! j4ba9@j30ec@chi-rhs* j30ec@chi-rhs*) (set! j30ee@find-bound=? (lambda (j41df@x j41e0@lhs* j41e1@rhs*) (if (null? j41e0@lhs*) '#f (if (j2eb7@bound-id=? j41df@x (car j41e0@lhs*)) (car j41e1@rhs*) (j30ee@find-bound=? j41df@x (cdr j41e0@lhs*) (cdr j41e1@rhs*)))))) (set! j4baa@j30ee@find-bound=? j30ee@find-bound=?) (set! j30f0@find-dups (lambda (j41e5@ls) (let j41eb@f ((j41e7@ls j41e5@ls) (j41e8@dups '())) (if (null? j41e7@ls) j41e8@dups (let ((j41ed@t (j30ee@find-bound=? (car j41e7@ls) (cdr j41e7@ls) (cdr j41e7@ls)))) (if j41ed@t ((lambda (j41ef@x) (j41eb@f (cdr j41e7@ls) (cons (list (car j41e7@ls) j41ef@x) j41e8@dups))) j41ed@t) (j41eb@f (cdr j41e7@ls) j41e8@dups))))))) (set! j4bab@j30f0@find-dups j30f0@find-dups) (set! j30f2@chi-internal (lambda (j41f1@e* j41f2@r j41f3@mr) (let ((j41f7@rib (j2e67@make-empty-rib))) (call-with-values (lambda () (j3112@chi-body* (map (lambda (j4209@x) (j2e9f@add-subst j41f7@rib j4209@x)) (j2eb1@syntax->list j41f1@e*)) j41f2@r j41f3@mr '() '() '() '() '() j41f7@rib '#f)) (lambda (j420b@j41fa j420c@j41fc j420d@j41fe j420e@j4200 j420f@j4202 j4210@j4204 j4211@j4206 j4212@j4208) (let ((j421b@_exp* j4212@j4208) (j421c@kwd* j4211@j4206) (j421d@mod** j4210@j4204) (j421e@rhs* j420f@j4202) (j421f@lex* j420e@j4200) (j4220@mr j420d@j41fe) (j4221@r j420c@j41fc) (j4222@e* j420b@j41fa)) (begin (if (null? j4222@e*) (j319a@syntax-violation '#f '"no expression in body" j4222@e*) (void)) (let ((j422b@init* (j30d8@chi-expr* (append (apply append (reverse j421d@mod**)) j4222@e*) j4221@r j4220@mr))) (let ((j422d@rhs* (j30ec@chi-rhs* j421e@rhs* j4221@r j4220@mr))) (j2e1d@j2d82@build-letrec* '#f (reverse j421f@lex*) (reverse j422d@rhs*) (j2e18@j2d78@build-sequence '#f j422b@init*))))))))))) (set! j4bac@j30f2@chi-internal j30f2@chi-internal) (set! j30f4@parse-module (lambda (j422f@e) (let ((j4231@t j422f@e)) (let ((j4233@ls/false (j30ba@syntax-dispatch j4231@t '(_ each-any . each-any)))) (if j4233@ls/false (apply (lambda (j4235@export* j4236@b*) (begin (if (not (for-all j2eb3@id? j4235@export*)) (j319a@syntax-violation '#f '"module exports must be identifiers" j422f@e) (void)) (values '#f (list->vector j4235@export*) j4236@b*))) j4233@ls/false) (let ((j4239@t j4231@t)) (let ((j423b@ls/false (j30ba@syntax-dispatch j4239@t '(_ any each-any . each-any)))) (if j423b@ls/false (apply (lambda (j423d@name j423e@export* j423f@b*) (begin (if (not (j2eb3@id? j423d@name)) (j319a@syntax-violation '#f '"module name must be an identifier" j422f@e) (void)) (if (not (for-all j2eb3@id? j423e@export*)) (j319a@syntax-violation '#f '"module exports must be identifiers" j422f@e) (void)) (values j423d@name (list->vector j423e@export*) j423f@b*))) j423b@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j4239@t))))))))) (set! j4bad@j30f4@parse-module j30f4@parse-module) (set! j30fe@module-interface? (lambda (j4243@x) (and (simple-struct? j4243@x) (eq? (simple-struct-name j4243@x) 'module-interface)))) (set! j4bae@j30fe@module-interface? j30fe@module-interface?) (set! j3100@module-interface-first-mark (lambda (j4245@x) (simple-struct-ref j4245@x '0))) (set! j4baf@j3100@module-interface-first-mark j3100@module-interface-first-mark) (set! j3102@set-module-interface-first-mark! (lambda (j4247@x j4248@val) (simple-struct-set! j4247@x '0 j4248@val))) (set! j4bb0@j3102@set-module-interface-first-mark! j3102@set-module-interface-first-mark!) (set! j3104@module-interface-exp-id-vec (lambda (j424b@x) (simple-struct-ref j424b@x '1))) (set! j4bb1@j3104@module-interface-exp-id-vec j3104@module-interface-exp-id-vec) (set! j3106@set-module-interface-exp-id-vec! (lambda (j424d@x j424e@val) (simple-struct-set! j424d@x '1 j424e@val))) (set! j4bb2@j3106@set-module-interface-exp-id-vec! j3106@set-module-interface-exp-id-vec!) (set! j3108@module-interface-exp-lab-vec (lambda (j4251@x) (simple-struct-ref j4251@x '2))) (set! j4bb3@j3108@module-interface-exp-lab-vec j3108@module-interface-exp-lab-vec) (set! j310a@set-module-interface-exp-lab-vec! (lambda (j4253@x j4254@val) (simple-struct-set! j4253@x '2 j4254@val))) (set! j4bb4@j310a@set-module-interface-exp-lab-vec! j310a@set-module-interface-exp-lab-vec!) (set! j310c@dummy '3) (set! j4bb5@j310c@dummy j310c@dummy) (set! j310e@module-interface-exp-id* (lambda (j4257@iface j4258@id) (letrec* ((j425c@diff-marks (lambda (j4263@ls j4264@x) (begin (if (null? j4263@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((j4267@a (car j4263@ls))) (if (eq? j4267@a j4264@x) '() (cons j4267@a (j425c@diff-marks (cdr j4263@ls) j4264@x)))))))) (let ((j425d@diff (j425c@diff-marks (j2e85@stx-mark* j4258@id) (j3100@module-interface-first-mark j4257@iface))) (j425e@id-vec (j3104@module-interface-exp-id-vec j4257@iface))) (if (null? j425d@diff) j425e@id-vec (vector-map (lambda (j4261@x) (make-simple-struct 'stx '5 (list (j2e81@stx-expr j4261@x) (append j425d@diff (j2e85@stx-mark* j4261@x)) '() '()))) j425e@id-vec)))))) (set! j4bb6@j310e@module-interface-exp-id* j310e@module-interface-exp-id*) (set! j3110@chi-internal-module (lambda (j4269@e j426a@r j426b@mr j426c@lex* j426d@rhs* j426e@mod** j426f@kwd*) (call-with-values (lambda () (j30f4@parse-module j4269@e)) (lambda (j427d@j4278 j427e@j427a j427f@j427c) (let ((j4283@e* j427f@j427c) (j4284@exp-id* j427e@j427a) (j4285@name j427d@j4278)) (let ((j4289@rib (j2e67@make-empty-rib))) (let ((j428b@e* (map (lambda (j428d@x) (j2e9f@add-subst j4289@rib j428d@x)) (j2eb1@syntax->list j4283@e*)))) (call-with-values (lambda () (j3112@chi-body* j428b@e* j426a@r j426b@mr j426c@lex* j426d@rhs* j426e@mod** j426f@kwd* '() j4289@rib '#f)) (lambda (j429f@j4290 j42a0@j4292 j42a1@j4294 j42a2@j4296 j42a3@j4298 j42a4@j429a j42a5@j429c j42a6@j429e) (let ((j42af@_exp* j42a6@j429e) (j42b0@kwd* j42a5@j429c) (j42b1@mod** j42a4@j429a) (j42b2@rhs* j42a3@j4298) (j42b3@lex* j42a2@j4296) (j42b4@mr j42a1@j4294) (j42b5@r j42a0@j4292) (j42b6@e* j429f@j4290)) (let ((j42bf@exp-lab* (vector-map (lambda (j42c3@x) (or (j2ec9@id->label (make-simple-struct 'stx '5 (list (j2eb5@id->sym j42c3@x) (j2e85@stx-mark* j42c3@x) (list j4289@rib) '()))) (j319a@syntax-violation '#f '"cannot find module export" j42c3@x))) j4284@exp-id*)) (j42c0@mod** (cons j42b6@e* j42b1@mod**))) (if (not j4285@name) (values j42b3@lex* j42b2@rhs* j4284@exp-id* j42bf@exp-lab* j42b5@r j42b4@mr j42c0@mod** j42b0@kwd*) (let ((j42c5@lab (j2e3f@gen-label 'module)) (j42c6@iface (make-simple-struct 'module-interface '4 (list (car (j2e85@stx-mark* j4285@name)) (vector-map (lambda (j42c9@x) (make-simple-struct 'stx '5 (list (j2e81@stx-expr j42c9@x) (j2e85@stx-mark* j42c9@x) '() '()))) j4284@exp-id*) j42bf@exp-lab*)))) (values j42b3@lex* j42b2@rhs* (vector j4285@name) (vector j42c5@lab) (cons (cons j42c5@lab (cons '$module j42c6@iface)) j42b5@r) (cons (cons j42c5@lab (cons '$module j42c6@iface)) j42b4@mr) j42c0@mod** j42b0@kwd*)))))))))))))) (set! j4bb7@j3110@chi-internal-module j3110@chi-internal-module) (set! j3112@chi-body* (lambda (j42cb@e* j42cc@r j42cd@mr j42ce@lex* j42cf@rhs* j42d0@mod** j42d1@kwd* j42d2@exp* j42d3@rib j42d4@top?) (if (null? j42cb@e*) (values j42cb@e* j42cc@r j42cd@mr j42ce@lex* j42cf@rhs* j42d0@mod** j42d1@kwd* j42d2@exp*) (let ((j42df@e (car j42cb@e*))) (call-with-values (lambda () (j2ed5@syntax-type j42df@e j42cc@r)) (lambda (j42e7@j42e2 j42e8@j42e4 j42e9@j42e6) (let ((j42ed@kwd j42e9@j42e6) (j42ee@value j42e8@j42e4) (j42ef@type j42e7@j42e2)) (let ((j42f3@kwd* (if (j2eb3@id? j42ed@kwd) (cons j42ed@kwd j42d1@kwd*) j42d1@kwd*))) (let ((j42f5@t j42ef@type)) (if (memv j42f5@t '(define)) (call-with-values (lambda () (j303c@parse-define j42df@e)) (lambda (j42fb@j42f8 j42fc@j42fa) (let ((j42ff@rhs j42fc@j42fa) (j4300@id j42fb@j42f8)) (begin (if (j2ebf@bound-id-member? j4300@id j42f3@kwd*) (j319a@syntax-violation '#f '"cannot redefine keyword" j42df@e) (void)) (call-with-values (lambda () (j2e43@gen-define-label+loc j4300@id j42d3@rib)) (lambda (j4307@j4304 j4308@j4306) (let ((j430b@lex j4308@j4306) (j430c@lab j4307@j4304)) (begin (j2e69@extend-rib! j42d3@rib j4300@id j430c@lab) (j3112@chi-body* (cdr j42cb@e*) (j304a@add-lexical j430c@lab j430b@lex j42cc@r) j42cd@mr (cons j430b@lex j42ce@lex*) (cons j42ff@rhs j42cf@rhs*) j42d0@mod** j42f3@kwd* j42d2@exp* j42d3@rib j42d4@top?))))))))) (if (memv j42f5@t '(define-syntax)) (call-with-values (lambda () (j303e@parse-define-syntax j42df@e)) (lambda (j4313@j4310 j4314@j4312) (let ((j4317@rhs j4314@j4312) (j4318@id j4313@j4310)) (begin (if (j2ebf@bound-id-member? j4318@id j42f3@kwd*) (j319a@syntax-violation '#f '"cannot redefine keyword" j42df@e) (void)) (let ((j431b@lab (j2e45@gen-define-label j4318@id j42d3@rib)) (j431c@expanded-rhs (j3114@expand-transformer j4317@rhs j42cd@mr))) (begin (j2e69@extend-rib! j42d3@rib j4318@id j431b@lab) (let ((j431f@b (j2eeb@make-eval-transformer j431c@expanded-rhs))) (j3112@chi-body* (cdr j42cb@e*) (cons (cons j431b@lab j431f@b) j42cc@r) (cons (cons j431b@lab j431f@b) j42cd@mr) j42ce@lex* j42cf@rhs* j42d0@mod** j42f3@kwd* j42d2@exp* j42d3@rib j42d4@top?)))))))) (if (memv j42f5@t '(let-syntax letrec-syntax)) (let ((j4321@t j42df@e)) (let ((j4323@ls/false (j30ba@syntax-dispatch j4321@t '(_ #(each (any any)) . each-any)))) (if (and j4323@ls/false (apply (lambda (j4325@xlhs* j4326@xrhs* j4327@xbody*) (if (not (j2ebb@valid-bound-ids? j4325@xlhs*)) (j319a@syntax-violation '#f '"invalid identifiers" j42df@e) (void))) j4323@ls/false)) (apply (lambda (j432b@xlhs* j432c@xrhs* j432d@xbody*) (let ((j4331@xlab* (map j2e3f@gen-label j432b@xlhs*))) (let ((j4333@xrib (j2e73@make-full-rib j432b@xlhs* j4331@xlab*))) (let ((j4335@xb* (map (lambda (j4337@x) (j2eeb@make-eval-transformer (j3114@expand-transformer (if (eq? j42ef@type 'let-syntax) j4337@x (j2e9f@add-subst j4333@xrib j4337@x)) j42cd@mr))) j432c@xrhs*))) (j3112@chi-body* (append (map (lambda (j4339@x) (j2e9f@add-subst j4333@xrib j4339@x)) j432d@xbody*) (cdr j42cb@e*)) (append (map cons j4331@xlab* j4335@xb*) j42cc@r) (append (map cons j4331@xlab* j4335@xb*) j42cd@mr) j42ce@lex* j42cf@rhs* j42d0@mod** j42f3@kwd* j42d2@exp* j42d3@rib j42d4@top?))))) j4323@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j4321@t)))) (if (memv j42f5@t '(begin)) (let ((j433b@t j42df@e)) (let ((j433d@ls/false (j30ba@syntax-dispatch j433b@t '(_ . each-any)))) (if j433d@ls/false (apply (lambda (j433f@x*) (j3112@chi-body* (append j433f@x* (cdr j42cb@e*)) j42cc@r j42cd@mr j42ce@lex* j42cf@rhs* j42d0@mod** j42f3@kwd* j42d2@exp* j42d3@rib j42d4@top?)) j433d@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j433b@t)))) (if (memv j42f5@t '(global-macro global-macro!)) (j3112@chi-body* (cons (j2e9f@add-subst j42d3@rib (j30d6@chi-global-macro j42ee@value j42df@e)) (cdr j42cb@e*)) j42cc@r j42cd@mr j42ce@lex* j42cf@rhs* j42d0@mod** j42f3@kwd* j42d2@exp* j42d3@rib j42d4@top?) (if (memv j42f5@t '(local-macro local-macro!)) (j3112@chi-body* (cons (j2e9f@add-subst j42d3@rib (j30d4@chi-local-macro j42ee@value j42df@e)) (cdr j42cb@e*)) j42cc@r j42cd@mr j42ce@lex* j42cf@rhs* j42d0@mod** j42f3@kwd* j42d2@exp* j42d3@rib j42d4@top?) (if (memv j42f5@t '(macro macro!)) (j3112@chi-body* (cons (j2e9f@add-subst j42d3@rib (j30d2@chi-macro j42ee@value j42df@e)) (cdr j42cb@e*)) j42cc@r j42cd@mr j42ce@lex* j42cf@rhs* j42d0@mod** j42f3@kwd* j42d2@exp* j42d3@rib j42d4@top?) (if (memv j42f5@t '(module)) (call-with-values (lambda () (j3110@chi-internal-module j42df@e j42cc@r j42cd@mr j42ce@lex* j42cf@rhs* j42d0@mod** j42f3@kwd*)) (lambda (j4351@j4342 j4352@j4344 j4353@j4346 j4354@j4348 j4355@j434a j4356@j434c j4357@j434e j4358@j4350) (let ((j4361@kwd* j4358@j4350) (j4362@mod** j4357@j434e) (j4363@mr j4356@j434c) (j4364@r j4355@j434a) (j4365@m-exp-lab* j4354@j4348) (j4366@m-exp-id* j4353@j4346) (j4367@rhs* j4352@j4344) (j4368@lex* j4351@j4342)) (begin (vector-for-each (lambda (j4371@id j4372@lab) (j2e69@extend-rib! j42d3@rib j4371@id j4372@lab)) j4366@m-exp-id* j4365@m-exp-lab*) (j3112@chi-body* (cdr j42cb@e*) j4364@r j4363@mr j4368@lex* j4367@rhs* j4362@mod** j4361@kwd* j42d2@exp* j42d3@rib j42d4@top?))))) (if (memv j42f5@t '(library)) (begin (j317c@library-expander (j2ec7@stx->datum j42df@e)) (j3112@chi-body* (cdr j42cb@e*) j42cc@r j42cd@mr j42ce@lex* j42cf@rhs* j42d0@mod** j42f3@kwd* j42d2@exp* j42d3@rib j42d4@top?)) (if (memv j42f5@t '(export)) (let ((j4375@t j42df@e)) (let ((j4377@ls/false (j30ba@syntax-dispatch j4375@t '(_ . each-any)))) (if j4377@ls/false (apply (lambda (j4379@exp-decl*) (j3112@chi-body* (cdr j42cb@e*) j42cc@r j42cd@mr j42ce@lex* j42cf@rhs* j42d0@mod** j42f3@kwd* (append j4379@exp-decl* j42d2@exp*) j42d3@rib j42d4@top?)) j4377@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j4375@t)))) (if (memv j42f5@t '(import)) (letrec* ((j437c@module-import? (lambda (j43cf@e) (let ((j43d1@t j43cf@e)) (let ((j43d3@ls/false (j30ba@syntax-dispatch j43d1@t '(_ any)))) (if (and j43d3@ls/false (apply (lambda (j43d5@id) (j2eb3@id? j43d5@id)) j43d3@ls/false)) (apply (lambda (j43d7@id) '#t) j43d3@ls/false) (let ((j43d9@t j43d1@t)) (let ((j43db@ls/false (j30ba@syntax-dispatch j43d9@t '(_ . each-any)))) (if j43db@ls/false (apply (lambda (j43dd@imp*) '#f) j43db@ls/false) (let ((j43df@t j43d9@t)) (let ((j43e1@ls/false (j30ba@syntax-dispatch j43df@t '_))) (if j43e1@ls/false (apply (lambda () (j319a@syntax-violation '#f '"malformed import form" j43cf@e)) j43e1@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j43df@t)))))))))))) (j437e@module-import (lambda (j43ad@e j43ae@r) (let ((j43b1@t j43ad@e)) (let ((j43b3@ls/false (j30ba@syntax-dispatch j43b1@t '(_ any)))) (if (and j43b3@ls/false (apply (lambda (j43b5@id) (j2eb3@id? j43b5@id)) j43b3@ls/false)) (apply (lambda (j43b7@id) (call-with-values (lambda () (j2ed5@syntax-type j43b7@id j43ae@r)) (lambda (j43bf@j43ba j43c0@j43bc j43c1@j43be) (let ((j43c5@kwd j43c1@j43be) (j43c6@value j43c0@j43bc) (j43c7@type j43bf@j43ba)) (let ((j43cb@t j43c7@type)) (if (memv j43cb@t '($module)) (let ((j43cd@iface j43c6@value)) (values (j310e@module-interface-exp-id* j43cd@iface j43b7@id) (j3108@module-interface-exp-lab-vec j43cd@iface))) (j319a@syntax-violation '#f '"invalid import" j43ad@e))))))) j43b3@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j43b1@t)))))) (j4380@library-import (lambda (j4391@e) (let ((j4393@t j4391@e)) (let ((j4395@ls/false (j30ba@syntax-dispatch j4393@t '(any . each-any)))) (if j4395@ls/false (apply (lambda (j4397@ctxt j4398@imp*) (call-with-values (lambda () (j311c@parse-import-spec* (j31a0@syntax->datum j4398@imp*))) (lambda (j439f@j439c j43a0@j439e) (let ((j43a3@subst-labels j43a0@j439e) (j43a4@subst-names j439f@j439c)) (values (vector-map (lambda (j43a7@name) (j2e93@datum->stx j4397@ctxt j43a7@name)) j43a4@subst-names) j43a3@subst-labels))))) j4395@ls/false) (let ((j43a9@t j4393@t)) (let ((j43ab@ls/false (j30ba@syntax-dispatch j43a9@t '_))) (if j43ab@ls/false (apply (lambda () (j319a@syntax-violation '#f '"invalid import form" j4391@e)) j43ab@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j43a9@t)))))))))) (begin (call-with-values (lambda () (if (j437c@module-import? j42df@e) (j437e@module-import j42df@e j42cc@r) (j4380@library-import j42df@e))) (lambda (j4385@j4382 j4386@j4384) (let ((j4389@lab* j4386@j4384) (j438a@id* j4385@j4382)) (vector-for-each (lambda (j438d@id j438e@lab) (j2e69@extend-rib! j42d3@rib j438d@id j438e@lab)) j438a@id* j4389@lab*)))) (j3112@chi-body* (cdr j42cb@e*) j42cc@r j42cd@mr j42ce@lex* j42cf@rhs* j42d0@mod** j42f3@kwd* j42d2@exp* j42d3@rib j42d4@top?))) (if j42d4@top? (j3112@chi-body* (cdr j42cb@e*) j42cc@r j42cd@mr (cons (j2e3b@gen-lexical 'dummy) j42ce@lex*) (cons (cons 'top-expr j42df@e) j42cf@rhs*) j42d0@mod** j42f3@kwd* j42d2@exp* j42d3@rib j42d4@top?) (values j42cb@e* j42cc@r j42cd@mr j42ce@lex* j42cf@rhs* j42d0@mod** j42f3@kwd* j42d2@exp*)))))))))))))))))))))) (set! j4bb8@j3112@chi-body* j3112@chi-body*) (set! j3114@expand-transformer (lambda (j43e3@expr j43e4@r) (let ((j43e7@rtc (j3120@make-collector))) (let ((j43e9@expanded-rhs (let ((j43f3@j43ec j3122@inv-collector) (j43f4@j43ee j3124@vis-collector) (j43f5@j43f0 j43e7@rtc) (j43f6@j43f2 (lambda (j43fb@x) (values)))) (let ((j43fd@swap (lambda () (begin (let ((j43ff@t (j43f3@j43ec))) (begin (j43f3@j43ec j43f5@j43f0) (set! j43f5@j43f0 j43ff@t))) (let ((j4401@t (j43f4@j43ee))) (begin (j43f4@j43ee j43f6@j43f2) (set! j43f6@j43f2 j4401@t))))))) (dynamic-wind j43fd@swap (lambda () (j30dc@chi-expr j43e3@expr j43e4@r j43e4@r)) j43fd@swap))))) (begin (for-each (let ((j4403@mark-visit (j3124@vis-collector))) (lambda (j4405@x) (begin (j2ccf@j2b1d@invoke-library j4405@x) (j4403@mark-visit j4405@x)))) (j43e7@rtc)) j43e9@expanded-rhs))))) (set! j4bb9@j3114@expand-transformer j3114@expand-transformer) (set! j3116@parse-exports (lambda (j4407@exp*) (let j440f@f ((j4409@exp* j4407@exp*) (j440a@int* '()) (j440b@ext* '())) (if (null? j4409@exp*) (begin (if (not (j2ebb@valid-bound-ids? j440b@ext*)) (j319a@syntax-violation 'export '"invalid exports" (j30f0@find-dups j440b@ext*)) (void)) (values (map j31a0@syntax->datum j440b@ext*) j440a@int*)) (let ((j4411@t (car j4409@exp*))) (let ((j4413@ls/false (j30ba@syntax-dispatch j4411@t '(any . #(each (any any)))))) (if j4413@ls/false (apply (lambda (j4415@rename j4416@i* j4417@e*) (begin (if (not (and (eq? (j31a0@syntax->datum j4415@rename) 'rename) (for-all j2eb3@id? j4416@i*) (for-all j2eb3@id? j4417@e*))) (j319a@syntax-violation 'export '"invalid export specifier" (car j4409@exp*)) (void)) (j440f@f (cdr j4409@exp*) (append j4416@i* j440a@int*) (append j4417@e* j440b@ext*)))) j4413@ls/false) (let ((j441b@t j4411@t)) (let ((j441d@ls/false (j30ba@syntax-dispatch j441b@t 'any))) (if j441d@ls/false (apply (lambda (j441f@ie) (begin (if (not (j2eb3@id? j441f@ie)) (j319a@syntax-violation 'export '"invalid export" j441f@ie) (void)) (j440f@f (cdr j4409@exp*) (cons j441f@ie j440a@int*) (cons j441f@ie j440b@ext*)))) j441d@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j441b@t))))))))))) (set! j4bba@j3116@parse-exports j3116@parse-exports) (set! j3118@parse-library-name (lambda (j4421@spec) (letrec* ((j4424@parse (lambda (j4431@x) (let ((j4433@t j4431@x)) (let ((j4435@ls/false (j30ba@syntax-dispatch j4433@t '(each-any)))) (if (and j4435@ls/false (apply (lambda (j4437@v*) (for-all (lambda (j4439@x) (let ((j443b@x (j31a0@syntax->datum j4439@x))) (and (integer? j443b@x) (exact? j443b@x)))) j4437@v*)) j4435@ls/false)) (apply (lambda (j443d@v*) (values '() (map j31a0@syntax->datum j443d@v*))) j4435@ls/false) (let ((j443f@t j4433@t)) (let ((j4441@ls/false (j30ba@syntax-dispatch j443f@t '(any . any)))) (if (and j4441@ls/false (apply (lambda (j4443@x j4444@rest) (symbol? (j31a0@syntax->datum j4443@x))) j4441@ls/false)) (apply (lambda (j4447@x j4448@rest) (call-with-values (lambda () (j4424@parse j4448@rest)) (lambda (j444f@j444c j4450@j444e) (let ((j4453@v* j4450@j444e) (j4454@x* j444f@j444c)) (values (cons (j31a0@syntax->datum j4447@x) j4454@x*) j4453@v*))))) j4441@ls/false) (let ((j4457@t j443f@t)) (let ((j4459@ls/false (j30ba@syntax-dispatch j4457@t '()))) (if j4459@ls/false (apply (lambda () (values '() '())) j4459@ls/false) (let ((j445b@t j4457@t)) (let ((j445d@ls/false (j30ba@syntax-dispatch j445b@t '_))) (if j445d@ls/false (apply (lambda () (j319a@syntax-violation '#f '"invalid library name" j4421@spec)) j445d@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j445b@t)))))))))))))))) (call-with-values (lambda () (j4424@parse j4421@spec)) (lambda (j4429@j4426 j442a@j4428) (let ((j442d@ver* j442a@j4428) (j442e@name* j4429@j4426)) (begin (if (null? j442e@name*) (j319a@syntax-violation '#f '"empty library name" j4421@spec) (void)) (values j442e@name* j442d@ver*)))))))) (set! j4bbb@j3118@parse-library-name j3118@parse-library-name) (set! j311a@parse-library (lambda (j445f@e) (let ((j4461@t j445f@e)) (let ((j4463@ls/false (j30ba@syntax-dispatch j4461@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and j4463@ls/false (apply (lambda (j4465@library j4466@name* j4467@export j4468@exp* j4469@import j446a@imp* j446b@b*) (and (eq? (j31a0@syntax->datum j4467@export) 'export) (eq? (j31a0@syntax->datum j4469@import) 'import) (eq? (j31a0@syntax->datum j4465@library) 'library))) j4463@ls/false)) (apply (lambda (j4473@library j4474@name* j4475@export j4476@exp* j4477@import j4478@imp* j4479@b*) (values j4474@name* j4476@exp* j4478@imp* j4479@b*)) j4463@ls/false) (let ((j4481@t j4461@t)) (let ((j4483@ls/false (j30ba@syntax-dispatch j4481@t '_))) (if j4483@ls/false (apply (lambda () (j319a@syntax-violation '#f '"malformed library" j445f@e)) j4483@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j4481@t))))))))) (set! j4bbc@j311a@parse-library j311a@parse-library) (set! j311c@parse-import-spec* (letrec* ((j4486@idsyn? (lambda (j468f@x) (symbol? (j31a0@syntax->datum j468f@x)))) (j4488@dup-error (lambda (j468d@name) (j319a@syntax-violation 'import '"two imports with different bindings" j468d@name))) (j448a@merge-substs (lambda (j467b@s j467c@subst) (letrec* ((j4680@insert-to-subst (lambda (j4681@a j4682@subst) (let ((j4685@name (car j4681@a)) (j4686@label (cdr j4681@a))) (let ((j4689@t (assq j4685@name j4682@subst))) (if j4689@t ((lambda (j468b@x) (if (eq? (cdr j468b@x) j4686@label) j4682@subst (j4488@dup-error j4685@name))) j4689@t) (cons j4681@a j4682@subst))))))) (if (null? j467b@s) j467c@subst (j4680@insert-to-subst (car j467b@s) (j448a@merge-substs (cdr j467b@s) j467c@subst)))))) (j448c@exclude* (lambda (j464b@sym* j464c@subst) (letrec* ((j4650@exclude (lambda (j4669@sym j466a@subst) (if (null? j466a@subst) (j319a@syntax-violation 'import '"cannot rename unbound identifier" j4669@sym) (if (eq? j4669@sym (caar j466a@subst)) (values (cdar j466a@subst) (cdr j466a@subst)) (let ((j466d@a (car j466a@subst))) (call-with-values (lambda () (j4650@exclude j4669@sym (cdr j466a@subst))) (lambda (j4673@j4670 j4674@j4672) (let ((j4677@subst j4674@j4672) (j4678@old j4673@j4670)) (values j4678@old (cons j466d@a j4677@subst))))))))))) (if (null? j464b@sym*) (values '() j464c@subst) (call-with-values (lambda () (j4650@exclude (car j464b@sym*) j464c@subst)) (lambda (j4655@j4652 j4656@j4654) (let ((j4659@subst j4656@j4654) (j465a@old j4655@j4652)) (call-with-values (lambda () (j448c@exclude* (cdr j464b@sym*) j4659@subst)) (lambda (j4661@j465e j4662@j4660) (let ((j4665@subst j4662@j4660) (j4666@old* j4661@j465e)) (values (cons j465a@old j4666@old*) j4665@subst))))))))))) (j448e@find* (lambda (j4643@sym* j4644@subst) (map (lambda (j4647@x) (let ((j4649@t (assq j4647@x j4644@subst))) (if j4649@t (cdr j4649@t) (j319a@syntax-violation 'import '"cannot find identifier" j4647@x)))) j4643@sym*))) (j4490@rem* (lambda (j463b@sym* j463c@subst) (let j4641@f ((j463f@subst j463c@subst)) (if (null? j463f@subst) '() (if (memq (caar j463f@subst) j463b@sym*) (j4641@f (cdr j463f@subst)) (cons (car j463f@subst) (j4641@f (cdr j463f@subst)))))))) (j4492@remove-dups (lambda (j4639@ls) (if (null? j4639@ls) '() (if (memq (car j4639@ls) (cdr j4639@ls)) (j4492@remove-dups (cdr j4639@ls)) (cons (car j4639@ls) (j4492@remove-dups (cdr j4639@ls))))))) (j4494@parse-library-name (lambda (j4551@spec) (letrec* ((j4554@subversion? (lambda (j4635@x) (let ((j4637@x (j31a0@syntax->datum j4635@x))) (and (integer? j4637@x) (exact? j4637@x) (>= j4637@x '0))))) (j4556@subversion-pred (lambda (j45d5@x*) (let ((j45d7@t j45d5@x*)) (let ((j45d9@ls/false (j30ba@syntax-dispatch j45d7@t 'any))) (if (and j45d9@ls/false (apply (lambda (j45db@n) (j4554@subversion? j45db@n)) j45d9@ls/false)) (apply (lambda (j45dd@n) (lambda (j45df@x) (= j45df@x (j31a0@syntax->datum j45dd@n)))) j45d9@ls/false) (let ((j45e1@t j45d7@t)) (let ((j45e3@ls/false (j30ba@syntax-dispatch j45e1@t '(any . each-any)))) (if (and j45e3@ls/false (apply (lambda (j45e5@p? j45e6@sub*) (eq? (j31a0@syntax->datum j45e5@p?) 'and)) j45e3@ls/false)) (apply (lambda (j45e9@p? j45ea@sub*) (let ((j45ed@p* (map j4556@subversion-pred j45ea@sub*))) (lambda (j45ef@x) (for-all (lambda (j45f1@p) (j45f1@p j45ef@x)) j45ed@p*)))) j45e3@ls/false) (let ((j45f3@t j45e1@t)) (let ((j45f5@ls/false (j30ba@syntax-dispatch j45f3@t '(any . each-any)))) (if (and j45f5@ls/false (apply (lambda (j45f7@p? j45f8@sub*) (eq? (j31a0@syntax->datum j45f7@p?) 'or)) j45f5@ls/false)) (apply (lambda (j45fb@p? j45fc@sub*) (let ((j45ff@p* (map j4556@subversion-pred j45fc@sub*))) (lambda (j4601@x) (exists (lambda (j4603@p) (j4603@p j4601@x)) j45ff@p*)))) j45f5@ls/false) (let ((j4605@t j45f3@t)) (let ((j4607@ls/false (j30ba@syntax-dispatch j4605@t '(any any)))) (if (and j4607@ls/false (apply (lambda (j4609@p? j460a@sub) (eq? (j31a0@syntax->datum j4609@p?) 'not)) j4607@ls/false)) (apply (lambda (j460d@p? j460e@sub) (let ((j4611@p (j4556@subversion-pred j460e@sub))) (lambda (j4613@x) (not (j4611@p j4613@x))))) j4607@ls/false) (let ((j4615@t j4605@t)) (let ((j4617@ls/false (j30ba@syntax-dispatch j4615@t '(any any)))) (if (and j4617@ls/false (apply (lambda (j4619@p? j461a@n) (and (eq? (j31a0@syntax->datum j4619@p?) '<=) (j4554@subversion? j461a@n))) j4617@ls/false)) (apply (lambda (j461d@p? j461e@n) (lambda (j4621@x) (<= j4621@x (j31a0@syntax->datum j461e@n)))) j4617@ls/false) (let ((j4623@t j4615@t)) (let ((j4625@ls/false (j30ba@syntax-dispatch j4623@t '(any any)))) (if (and j4625@ls/false (apply (lambda (j4627@p? j4628@n) (and (eq? (j31a0@syntax->datum j4627@p?) '>=) (j4554@subversion? j4628@n))) j4625@ls/false)) (apply (lambda (j462b@p? j462c@n) (lambda (j462f@x) (>= j462f@x (j31a0@syntax->datum j462c@n)))) j4625@ls/false) (let ((j4631@t j4623@t)) (let ((j4633@ls/false (j30ba@syntax-dispatch j4631@t '_))) (if j4633@ls/false (apply (lambda () (j319a@syntax-violation 'import '"invalid sub-version spec" j4551@spec j45d5@x*)) j4633@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j4631@t)))))))))))))))))))))))) (j4558@version-pred (lambda (j4585@x*) (let ((j4587@t j4585@x*)) (let ((j4589@ls/false (j30ba@syntax-dispatch j4587@t '()))) (if j4589@ls/false (apply (lambda () (lambda (j458b@x) '#t)) j4589@ls/false) (let ((j458d@t j4587@t)) (let ((j458f@ls/false (j30ba@syntax-dispatch j458d@t '(any . each-any)))) (if (and j458f@ls/false (apply (lambda (j4591@c j4592@ver*) (eq? (j31a0@syntax->datum j4591@c) 'and)) j458f@ls/false)) (apply (lambda (j4595@c j4596@ver*) (let ((j4599@p* (map j4558@version-pred j4596@ver*))) (lambda (j459b@x) (for-all (lambda (j459d@p) (j459d@p j459b@x)) j4599@p*)))) j458f@ls/false) (let ((j459f@t j458d@t)) (let ((j45a1@ls/false (j30ba@syntax-dispatch j459f@t '(any . each-any)))) (if (and j45a1@ls/false (apply (lambda (j45a3@c j45a4@ver*) (eq? (j31a0@syntax->datum j45a3@c) 'or)) j45a1@ls/false)) (apply (lambda (j45a7@c j45a8@ver*) (let ((j45ab@p* (map j4558@version-pred j45a8@ver*))) (lambda (j45ad@x) (exists (lambda (j45af@p) (j45af@p j45ad@x)) j45ab@p*)))) j45a1@ls/false) (let ((j45b1@t j459f@t)) (let ((j45b3@ls/false (j30ba@syntax-dispatch j45b1@t '(any any)))) (if (and j45b3@ls/false (apply (lambda (j45b5@c j45b6@ver) (eq? (j31a0@syntax->datum j45b5@c) 'not)) j45b3@ls/false)) (apply (lambda (j45b9@c j45ba@ver) (let ((j45bd@p (j4558@version-pred j45ba@ver))) (lambda (j45bf@x) (not (j45bd@p j45bf@x))))) j45b3@ls/false) (let ((j45c1@t j45b1@t)) (let ((j45c3@ls/false (j30ba@syntax-dispatch j45c1@t 'each-any))) (if j45c3@ls/false (apply (lambda (j45c5@sub*) (let ((j45c7@p* (map j4556@subversion-pred j45c5@sub*))) (lambda (j45c9@x) (let j45cf@f ((j45cb@p* j45c7@p*) (j45cc@x j45c9@x)) (if (null? j45cb@p*) '#t (if (null? j45cc@x) '#f (and ((car j45cb@p*) (car j45cc@x)) (j45cf@f (cdr j45cb@p*) (cdr j45cc@x))))))))) j45c3@ls/false) (let ((j45d1@t j45c1@t)) (let ((j45d3@ls/false (j30ba@syntax-dispatch j45d1@t '_))) (if j45d3@ls/false (apply (lambda () (j319a@syntax-violation 'import '"invalid version spec" j4551@spec j4585@x*)) j45d3@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j45d1@t)))))))))))))))))))))) (let j455b@f ((j4559@x j4551@spec)) (let ((j455d@t j4559@x)) (let ((j455f@ls/false (j30ba@syntax-dispatch j455d@t '(each-any)))) (if j455f@ls/false (apply (lambda (j4561@version-spec*) (values '() (j4558@version-pred j4561@version-spec*))) j455f@ls/false) (let ((j4563@t j455d@t)) (let ((j4565@ls/false (j30ba@syntax-dispatch j4563@t '(any . any)))) (if (and j4565@ls/false (apply (lambda (j4567@x j4568@x*) (j4486@idsyn? j4567@x)) j4565@ls/false)) (apply (lambda (j456b@x j456c@x*) (call-with-values (lambda () (j455b@f j456c@x*)) (lambda (j4573@j4570 j4574@j4572) (let ((j4577@pred j4574@j4572) (j4578@name j4573@j4570)) (values (cons (j31a0@syntax->datum j456b@x) j4578@name) j4577@pred))))) j4565@ls/false) (let ((j457b@t j4563@t)) (let ((j457d@ls/false (j30ba@syntax-dispatch j457b@t '()))) (if j457d@ls/false (apply (lambda () (values '() (lambda (j457f@x) '#t))) j457d@ls/false) (let ((j4581@t j457b@t)) (let ((j4583@ls/false (j30ba@syntax-dispatch j4581@t '_))) (if j4583@ls/false (apply (lambda () (j319a@syntax-violation '#f '"invalid import spec" j4551@spec)) j4583@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j4581@t))))))))))))))))) (j4496@import-library (lambda (j4541@spec*) (call-with-values (lambda () (j4494@parse-library-name j4541@spec*)) (lambda (j4547@j4544 j4548@j4546) (let ((j454b@pred j4548@j4546) (j454c@name j4547@j4544)) (begin (if (null? j454c@name) (j319a@syntax-violation 'import '"empty library name" j4541@spec*) (void)) (let ((j454f@lib (j2cc8@j2b0f@find-library-by-name j454c@name))) (begin (if (not j454f@lib) (j319a@syntax-violation 'import '"cannot find library with required name" j454c@name) (void)) (if (not (j454b@pred (j2ca2@j2ac3@library-version j454f@lib))) (j319a@syntax-violation 'import '"library does not satisfy version specification" j4541@spec* j454f@lib) (void)) ((j3126@imp-collector) j454f@lib) (j2caa@j2ad3@library-subst j454f@lib))))))))) (j4498@get-import (lambda (j44b3@spec) (let ((j44b5@t j44b3@spec)) (let ((j44b7@ls/false (j30ba@syntax-dispatch j44b5@t '(any . each-any)))) (if (and j44b7@ls/false (apply (lambda (j44b9@x j44ba@x*) (not (memq (j31a0@syntax->datum j44b9@x) '(for rename except only prefix library)))) j44b7@ls/false)) (apply (lambda (j44bd@x j44be@x*) (j4496@import-library (cons j44bd@x j44be@x*))) j44b7@ls/false) (let ((j44c1@t j44b5@t)) (let ((j44c3@ls/false (j30ba@syntax-dispatch j44c1@t '(any any . #(each (any any)))))) (if (and j44c3@ls/false (apply (lambda (j44c5@rename j44c6@isp j44c7@old* j44c8@new*) (and (eq? (j31a0@syntax->datum j44c5@rename) 'rename) (for-all j4486@idsyn? j44c7@old*) (for-all j4486@idsyn? j44c8@new*))) j44c3@ls/false)) (apply (lambda (j44cd@rename j44ce@isp j44cf@old* j44d0@new*) (let ((j44d5@subst (j4498@get-import j44ce@isp)) (j44d6@old* (map j31a0@syntax->datum j44cf@old*)) (j44d7@new* (map j31a0@syntax->datum j44d0@new*))) (let ((j44db@old-label* (j448e@find* j44d6@old* j44d5@subst))) (let ((j44dd@subst (j4490@rem* j44d6@old* j44d5@subst))) (j448a@merge-substs (map cons j44d7@new* j44db@old-label*) j44dd@subst))))) j44c3@ls/false) (let ((j44df@t j44c1@t)) (let ((j44e1@ls/false (j30ba@syntax-dispatch j44df@t '(any any . each-any)))) (if (and j44e1@ls/false (apply (lambda (j44e3@except j44e4@isp j44e5@sym*) (and (eq? (j31a0@syntax->datum j44e3@except) 'except) (for-all j4486@idsyn? j44e5@sym*))) j44e1@ls/false)) (apply (lambda (j44e9@except j44ea@isp j44eb@sym*) (let ((j44ef@subst (j4498@get-import j44ea@isp))) (j4490@rem* (map j31a0@syntax->datum j44eb@sym*) j44ef@subst))) j44e1@ls/false) (let ((j44f1@t j44df@t)) (let ((j44f3@ls/false (j30ba@syntax-dispatch j44f1@t '(any any . each-any)))) (if (and j44f3@ls/false (apply (lambda (j44f5@only j44f6@isp j44f7@sym*) (and (eq? (j31a0@syntax->datum j44f5@only) 'only) (for-all j4486@idsyn? j44f7@sym*))) j44f3@ls/false)) (apply (lambda (j44fb@only j44fc@isp j44fd@sym*) (let ((j4501@subst (j4498@get-import j44fc@isp)) (j4502@sym* (map j31a0@syntax->datum j44fd@sym*))) (let ((j4505@sym* (j4492@remove-dups j4502@sym*))) (let ((j4507@lab* (j448e@find* j4505@sym* j4501@subst))) (map cons j4505@sym* j4507@lab*))))) j44f3@ls/false) (let ((j4509@t j44f1@t)) (let ((j450b@ls/false (j30ba@syntax-dispatch j4509@t '(any any any)))) (if (and j450b@ls/false (apply (lambda (j450d@prefix j450e@isp j450f@p) (and (eq? (j31a0@syntax->datum j450d@prefix) 'prefix) (j4486@idsyn? j450f@p))) j450b@ls/false)) (apply (lambda (j4513@prefix j4514@isp j4515@p) (let ((j4519@subst (j4498@get-import j4514@isp)) (j451a@prefix (symbol->string (j31a0@syntax->datum j4515@p)))) (map (lambda (j451d@x) (cons (string->symbol (string-append j451a@prefix (symbol->string (car j451d@x)))) (cdr j451d@x))) j4519@subst))) j450b@ls/false) (let ((j451f@t j4509@t)) (let ((j4521@ls/false (j30ba@syntax-dispatch j451f@t '(any each-any)))) (if (and j4521@ls/false (apply (lambda (j4523@library j4524@spec*) (eq? (j31a0@syntax->datum j4523@library) 'library)) j4521@ls/false)) (apply (lambda (j4527@library j4528@spec*) (j4496@import-library j4528@spec*)) j4521@ls/false) (let ((j452b@t j451f@t)) (let ((j452d@ls/false (j30ba@syntax-dispatch j452b@t '(any any . any)))) (if (and j452d@ls/false (apply (lambda (j452f@for j4530@isp j4531@rest) (eq? (j31a0@syntax->datum j452f@for) 'for)) j452d@ls/false)) (apply (lambda (j4535@for j4536@isp j4537@rest) (j4498@get-import j4536@isp)) j452d@ls/false) (let ((j453b@t j452b@t)) (let ((j453d@ls/false (j30ba@syntax-dispatch j453b@t 'any))) (if j453d@ls/false (apply (lambda (j453f@spec) (j319a@syntax-violation 'import '"invalid import spec" j453f@spec)) j453d@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j453b@t))))))))))))))))))))))))))) (j449a@add-imports! (lambda (j44a3@imp j44a4@h) (let ((j44a7@subst (j4498@get-import j44a3@imp))) (for-each (lambda (j44a9@x) (let ((j44ab@name (car j44a9@x)) (j44ac@label (cdr j44a9@x))) (let ((j44af@t (hashtable-ref j44a4@h j44ab@name '#f))) (if j44af@t ((lambda (j44b1@l) (if (not (eq? j44b1@l j44ac@label)) (j4488@dup-error j44ab@name) (void))) j44af@t) (hashtable-set! j44a4@h j44ab@name j44ac@label))))) j44a7@subst))))) (lambda (j449b@imp*) (let j44a1@f ((j449d@imp* j449b@imp*) (j449e@h (make-eq-hashtable))) (if (null? j449d@imp*) (hashtable-entries j449e@h) (begin (j449a@add-imports! (car j449d@imp*) j449e@h) (j44a1@f (cdr j449d@imp*) j449e@h))))))) (set! j4bbd@j311c@parse-import-spec* j311c@parse-import-spec*) (set! j311e@make-top-rib (lambda (j4691@names j4692@labels) (let ((j4695@rib (j2e67@make-empty-rib))) (begin (vector-for-each (lambda (j4697@name j4698@label) (begin (if (not (symbol? j4697@name)) (error 'make-top-rib '"BUG: not a symbol" j4697@name) (void)) (j2e6b@extend-rib/nc! j4695@rib (make-simple-struct 'stx '5 (list j4697@name j2e37@top-mark* '() '())) j4698@label))) j4691@names j4692@labels) j4695@rib)))) (set! j4bbe@j311e@make-top-rib j311e@make-top-rib) (set! j3120@make-collector (lambda () (let ((j469b@ls '())) (lambda j469f (let ((j46a0 (length j469f))) (if (= j46a0 '0) (apply (lambda () j469b@ls) j469f) (if (= j46a0 '1) (apply (lambda (j469d@x) (set! j469b@ls (j2e30@set-cons j469d@x j469b@ls))) j469f) (error #1='apply '"invalid arg count")))))))) (set! j4bbf@j3120@make-collector j3120@make-collector) (set! j3122@inv-collector (j2a03@j28e1@make-parameter (lambda j46a1@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (j46a3@x) (begin (if (not (procedure? j46a3@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" j46a3@x) (void)) j46a3@x)))) (set! j4bc0@j3122@inv-collector j3122@inv-collector) (set! j3124@vis-collector (j2a03@j28e1@make-parameter (lambda j46a5@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (j46a7@x) (begin (if (not (procedure? j46a7@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" j46a7@x) (void)) j46a7@x)))) (set! j4bc1@j3124@vis-collector j3124@vis-collector) (set! j3126@imp-collector (j2a03@j28e1@make-parameter (lambda j46a9@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (j46ab@x) (begin (if (not (procedure? j46ab@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" j46ab@x) (void)) j46ab@x)))) (set! j4bc2@j3126@imp-collector j3126@imp-collector) (set! j3128@chi-library-internal (lambda (j46ad@e* j46ae@rib j46af@top?) (call-with-values (lambda () (j3112@chi-body* j46ad@e* '() '() '() '() '() '() '() j46ae@rib j46af@top?)) (lambda (j46c3@j46b4 j46c4@j46b6 j46c5@j46b8 j46c6@j46ba j46c7@j46bc j46c8@j46be j46c9@j46c0 j46ca@j46c2) (let ((j46d3@exp* j46ca@j46c2) (j46d4@_kwd* j46c9@j46c0) (j46d5@mod** j46c8@j46be) (j46d6@rhs* j46c7@j46bc) (j46d7@lex* j46c6@j46ba) (j46d8@mr j46c5@j46b8) (j46d9@r j46c4@j46b6) (j46da@e* j46c3@j46b4)) (values (append (apply append (reverse j46d5@mod**)) j46da@e*) j46d9@r j46d8@mr (reverse j46d7@lex*) (reverse j46d6@rhs*) j46d3@exp*)))))) (set! j4bc3@j3128@chi-library-internal j3128@chi-library-internal) (set! j312a@chi-interaction-expr (lambda (j46e3@e j46e4@rib j46e5@r) (call-with-values (lambda () (j3112@chi-body* (list j46e3@e) j46e5@r j46e5@r '() '() '() '() '() j46e4@rib '#t)) (lambda (j46f9@j46ea j46fa@j46ec j46fb@j46ee j46fc@j46f0 j46fd@j46f2 j46fe@j46f4 j46ff@j46f6 j4700@j46f8) (let ((j4709@_exp* j4700@j46f8) (j470a@_kwd* j46ff@j46f6) (j470b@mod** j46fe@j46f4) (j470c@rhs* j46fd@j46f2) (j470d@lex* j46fc@j46f0) (j470e@mr j46fb@j46ee) (j470f@r j46fa@j46ec) (j4710@e* j46f9@j46ea)) (let ((j4719@e* (j30ea@expand-interaction-rhs*/init* (reverse j470d@lex*) (reverse j470c@rhs*) (append (apply append (reverse j470b@mod**)) j4710@e*) j470f@r j470e@mr))) (let ((j471b@e (if (null? j4719@e*) (j2e19@j2d7a@build-void) (if (null? (cdr j4719@e*)) (car j4719@e*) (j2e18@j2d78@build-sequence '#f j4719@e*))))) (values j471b@e j470f@r)))))))) (set! j4bc4@j312a@chi-interaction-expr j312a@chi-interaction-expr) (set! j312c@library-body-expander (lambda (j471d@name j471e@main-exp* j471f@imp* j4720@b* j4721@top?) (letrec* ((j4728@itc (j3120@make-collector))) (let ((j4731@j472a j3126@imp-collector) (j4732@j472c j31aa@top-level-context) (j4733@j472e j4728@itc) (j4734@j4730 '#f)) (let ((j4739@swap (lambda () (begin (let ((j473b@t (j4731@j472a))) (begin (j4731@j472a j4733@j472e) (set! j4733@j472e j473b@t))) (let ((j473d@t (j4732@j472c))) (begin (j4732@j472c j4734@j4730) (set! j4734@j4730 j473d@t))))))) (dynamic-wind j4739@swap (lambda () (call-with-values (lambda () (j311c@parse-import-spec* j471f@imp*)) (lambda (j4743@j4740 j4744@j4742) (let ((j4747@subst-labels j4744@j4742) (j4748@subst-names j4743@j4740)) (let ((j474b@rib (j311e@make-top-rib j4748@subst-names j4747@subst-labels))) (letrec* ((j474e@wrap (lambda (j47c9@x) (make-simple-struct 'stx '5 (list j47c9@x j2e37@top-mark* (list j474b@rib) '()))))) (let ((j474f@b* (map j474e@wrap j4720@b*)) (j4750@main-exp* (map j474e@wrap j471e@main-exp*)) (j4751@rtc (j3120@make-collector)) (j4752@vtc (j3120@make-collector))) (let ((j475f@j4758 j3122@inv-collector) (j4760@j475a j3124@vis-collector) (j4761@j475c j4751@rtc) (j4762@j475e j4752@vtc)) (let ((j4767@swap (lambda () (begin (let ((j4769@t (j475f@j4758))) (begin (j475f@j4758 j4761@j475c) (set! j4761@j475c j4769@t))) (let ((j476b@t (j4760@j475a))) (begin (j4760@j475a j4762@j475e) (set! j4762@j475e j476b@t))))))) (dynamic-wind j4767@swap (lambda () (call-with-values (lambda () (j3128@chi-library-internal j474f@b* j474b@rib j4721@top?)) (lambda (j4779@j476e j477a@j4770 j477b@j4772 j477c@j4774 j477d@j4776 j477e@j4778) (let ((j4785@internal-exp* j477e@j4778) (j4786@rhs* j477d@j4776) (j4787@lex* j477c@j4774) (j4788@mr j477b@j4772) (j4789@r j477a@j4770) (j478a@init* j4779@j476e)) (call-with-values (lambda () (j3116@parse-exports (append j4750@main-exp* j4785@internal-exp*))) (lambda (j4795@j4792 j4796@j4794) (let ((j4799@exp-id* j4796@j4794) (j479a@exp-name* j4795@j4792)) (begin (j2e6f@seal-rib! j474b@rib) (let ((j479d@init* (j30d8@chi-expr* j478a@init* j4789@r j4788@mr))) (let ((j479f@rhs* (j30ec@chi-rhs* j4786@rhs* j4789@r j4788@mr))) (begin (j2e71@unseal-rib! j474b@rib) (let ((j47a1@loc* (map j2e3d@gen-global j4787@lex*)) (j47a2@export-subst (j3184@make-export-subst j479a@exp-name* j4799@exp-id*))) (letrec* ((j47a6@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (j3186@make-export-env/macros j4787@lex* j47a1@loc* j4789@r)) (lambda (j47ad@j47a8 j47ae@j47aa j47af@j47ac) (let ((j47b3@macro* j47af@j47ac) (j47b4@global* j47ae@j47aa) (j47b5@export-env j47ad@j47a8)) (begin (for-each (lambda (j47b9@s) (let ((j47bb@name (car j47b9@s)) (j47bc@label (cdr j47b9@s))) (let ((j47bf@p (assq j47bc@label j47b5@export-env))) (if j47bf@p (let ((j47c1@b (cdr j47bf@p))) (let ((j47c3@type (car j47c1@b))) (if (eq? j47c3@type 'mutable) (j319a@syntax-violation 'export j47a6@errstr j47bb@name) (void)))) (void))))) j47a2@export-subst) (let ((j47c5@invoke-body (j2e1e@j2d84@build-library-letrec* '#f j471d@name j4787@lex* j47a1@loc* j479f@rhs* (if (null? j479d@init*) (j2e19@j2d7a@build-void) (j2e18@j2d78@build-sequence '#f j479d@init*)))) (j47c6@invoke-definitions (map j2e15@j2cd7@build-global-define (map cdr j47b4@global*)))) (values (j4728@itc) (j4751@rtc) (j4752@vtc) (j2e18@j2d78@build-sequence '#f (append j47c6@invoke-definitions (list j47c5@invoke-body))) j47b3@macro* j47a2@export-subst j47b5@export-env))))))))))))))))))) j4767@swap)))))))))) j4739@swap)))))) (set! j4bc5@j312c@library-body-expander j312c@library-body-expander) (set! j312e@core-library-expander (lambda (j47cb@e j47cc@verify-name) (call-with-values (lambda () (j311a@parse-library j47cb@e)) (lambda (j47d7@j47d0 j47d8@j47d2 j47d9@j47d4 j47da@j47d6) (let ((j47df@b* j47da@j47d6) (j47e0@imp* j47d9@j47d4) (j47e1@exp* j47d8@j47d2) (j47e2@name* j47d7@j47d0)) (call-with-values (lambda () (j3118@parse-library-name j47e2@name*)) (lambda (j47eb@j47e8 j47ec@j47ea) (let ((j47ef@ver j47ec@j47ea) (j47f0@name j47eb@j47e8)) (begin (j47cc@verify-name j47f0@name) (call-with-values (lambda () (j312c@library-body-expander j47f0@name j47e1@exp* j47e0@imp* j47df@b* '#f)) (lambda (j4801@j47f4 j4802@j47f6 j4803@j47f8 j4804@j47fa j4805@j47fc j4806@j47fe j4807@j4800) (let ((j480f@export-env j4807@j4800) (j4810@export-subst j4806@j47fe) (j4811@visit-code j4805@j47fc) (j4812@invoke-code j4804@j47fa) (j4813@visit-req* j4803@j47f8) (j4814@invoke-req* j4802@j47f6) (j4815@imp* j4801@j47f4)) (values j47f0@name j47ef@ver j4815@imp* j4814@invoke-req* j4813@visit-req* j4812@invoke-code j4811@visit-code j4810@export-subst j480f@export-env))))))))))))) (set! j4bc6@j312e@core-library-expander j312e@core-library-expander) (set! j3130@parse-top-level-program (lambda (j481d@e*) (let ((j481f@t j481d@e*)) (let ((j4821@ls/false (j30ba@syntax-dispatch j481f@t '((any . each-any) . each-any)))) (if (and j4821@ls/false (apply (lambda (j4823@import j4824@imp* j4825@b*) (eq? (j31a0@syntax->datum j4823@import) 'import)) j4821@ls/false)) (apply (lambda (j4829@import j482a@imp* j482b@b*) (values j482a@imp* j482b@b*)) j4821@ls/false) (let ((j482f@t j481f@t)) (let ((j4831@ls/false (j30ba@syntax-dispatch j482f@t '((any . any) . any)))) (if (and j4831@ls/false (apply (lambda (j4833@import j4834@x j4835@y) (eq? (j31a0@syntax->datum j4833@import) 'import)) j4831@ls/false)) (apply (lambda (j4839@import j483a@x j483b@y) (j319a@syntax-violation 'expander '"invalid syntax of top-level program" (j2ead@syntax-car j481d@e*))) j4831@ls/false) (let ((j483f@t j482f@t)) (let ((j4841@ls/false (j30ba@syntax-dispatch j483f@t '_))) (if j4841@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) j4841@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j483f@t)))))))))))) (set! j4bc7@j3130@parse-top-level-program j3130@parse-top-level-program) (set! j3132@top-level-expander (lambda (j4843@e*) (call-with-values (lambda () (j3130@parse-top-level-program j4843@e*)) (lambda (j4849@j4846 j484a@j4848) (let ((j484d@b* j484a@j4848) (j484e@imp* j4849@j4846)) (call-with-values (lambda () (j312c@library-body-expander '() '() j484e@imp* j484d@b* '#t)) (lambda (j485f@j4852 j4860@j4854 j4861@j4856 j4862@j4858 j4863@j485a j4864@j485c j4865@j485e) (let ((j486d@export-env j4865@j485e) (j486e@export-subst j4864@j485c) (j486f@visit-code j4863@j485a) (j4870@invoke-code j4862@j4858) (j4871@visit-req* j4861@j4856) (j4872@invoke-req* j4860@j4854) (j4873@imp* j485f@j4852)) (values j4872@invoke-req* j4870@invoke-code))))))))) (set! j4bc8@j3132@top-level-expander j3132@top-level-expander) (set! j3134@rp (j2a00@j28db@make-record-printer 'env (lambda (j487b@x j487c@p j487d@wr) (display '"#<environment>" j487c@p)))) (set! j4bc9@j3134@rp j3134@rp) (set! j313e@env? (lambda (j4881@x) (and (simple-struct? j4881@x) (eq? (simple-struct-name j4881@x) 'env)))) (set! j4bca@j313e@env? j313e@env?) (set! j3140@env-names (lambda (j4883@x) (simple-struct-ref j4883@x '0))) (set! j4bcb@j3140@env-names j3140@env-names) (set! j3142@set-env-names! (lambda (j4885@x j4886@val) (simple-struct-set! j4885@x '0 j4886@val))) (set! j4bcc@j3142@set-env-names! j3142@set-env-names!) (set! j3144@env-labels (lambda (j4889@x) (simple-struct-ref j4889@x '1))) (set! j4bcd@j3144@env-labels j3144@env-labels) (set! j3146@set-env-labels! (lambda (j488b@x j488c@val) (simple-struct-set! j488b@x '1 j488c@val))) (set! j4bce@j3146@set-env-labels! j3146@set-env-labels!) (set! j3148@env-itc (lambda (j488f@x) (simple-struct-ref j488f@x '2))) (set! j4bcf@j3148@env-itc j3148@env-itc) (set! j314a@set-env-itc! (lambda (j4891@x j4892@val) (simple-struct-set! j4891@x '2 j4892@val))) (set! j4bd0@j314a@set-env-itc! j314a@set-env-itc!) (set! j314c@dummy '3) (set! j4bd1@j314c@dummy j314c@dummy) (set! j314e@rp (j2a00@j28db@make-record-printer 'interaction-env (lambda (j4895@x j4896@p j4897@wr) (display '"#<environment>" j4896@p)))) (set! j4bd2@j314e@rp j314e@rp) (set! j3158@interaction-env? (lambda (j489b@x) (and (simple-struct? j489b@x) (eq? (simple-struct-name j489b@x) 'interaction-env)))) (set! j4bd3@j3158@interaction-env? j3158@interaction-env?) (set! j315a@interaction-env-rib (lambda (j489d@x) (simple-struct-ref j489d@x '0))) (set! j4bd4@j315a@interaction-env-rib j315a@interaction-env-rib) (set! j315c@set-interaction-env-rib! (lambda (j489f@x j48a0@val) (simple-struct-set! j489f@x '0 j48a0@val))) (set! j4bd5@j315c@set-interaction-env-rib! j315c@set-interaction-env-rib!) (set! j315e@interaction-env-r (lambda (j48a3@x) (simple-struct-ref j48a3@x '1))) (set! j4bd6@j315e@interaction-env-r j315e@interaction-env-r) (set! j3160@set-interaction-env-r! (lambda (j48a5@x j48a6@val) (simple-struct-set! j48a5@x '1 j48a6@val))) (set! j4bd7@j3160@set-interaction-env-r! j3160@set-interaction-env-r!) (set! j3162@interaction-env-locs (lambda (j48a9@x) (simple-struct-ref j48a9@x '2))) (set! j4bd8@j3162@interaction-env-locs j3162@interaction-env-locs) (set! j3164@set-interaction-env-locs! (lambda (j48ab@x j48ac@val) (simple-struct-set! j48ab@x '2 j48ac@val))) (set! j4bd9@j3164@set-interaction-env-locs! j3164@set-interaction-env-locs!) (set! j3166@dummy '3) (set! j4bda@j3166@dummy j3166@dummy) (set! j3168@interaction-environment-symbols (lambda () (j3170@environment-symbols (j31a8@interaction-environment)))) (set! j4bdb@j3168@interaction-environment-symbols j3168@interaction-environment-symbols) (set! j316a@environment-bindings (lambda (j48af@e) (vector->list (vector-map (lambda (j48b1@name j48b2@label) (j316c@parse-binding (cons j48b1@name (j2cce@j2b1b@imported-label->binding j48b2@label)))) (j3140@env-names j48af@e) (j3144@env-labels j48af@e))))) (set! j4bdc@j316a@environment-bindings j316a@environment-bindings) (set! j316c@parse-binding (lambda (j48b5@b) (cons (car j48b5@b) (let ((j48b7@t (cadr j48b5@b))) (if (memv j48b7@t '(core-prim global)) 'procedure (if (memv j48b7@t '(core-macro macro global-macro)) 'syntax (if (memv j48b7@t '($core-rtd)) 'record (if (eq? (car j48b5@b) (cadr j48b5@b)) 'syntax 'unknown)))))))) (set! j4bdd@j316c@parse-binding j316c@parse-binding) (set! j316e@environment? (lambda (j48b9@x) (or (j313e@env? j48b9@x) (j3158@interaction-env? j48b9@x)))) (set! j4bde@j316e@environment? j316e@environment?) (set! j3170@environment-symbols (lambda (j48bb@x) (if (j313e@env? j48bb@x) (vector->list (j3140@env-names j48bb@x)) (if (j3158@interaction-env? j48bb@x) (map values (j2e51@rib-sym* (j315a@interaction-env-rib j48bb@x))) (assertion-violation 'environment-symbols '"not an environment" j48bb@x))))) (set! j4bdf@j3170@environment-symbols j3170@environment-symbols) (set! j3172@environment (lambda j48bd@imp* (let ((j48bf@itc (j3120@make-collector))) (let ((j48c5@j48c2 j3126@imp-collector) (j48c6@j48c4 j48bf@itc)) (let ((j48c9@swap (lambda () (let ((j48cb@t (j48c5@j48c2))) (begin (j48c5@j48c2 j48c6@j48c4) (set! j48c6@j48c4 j48cb@t)))))) (dynamic-wind j48c9@swap (lambda () (call-with-values (lambda () (j311c@parse-import-spec* j48bd@imp*)) (lambda (j48d1@j48ce j48d2@j48d0) (let ((j48d5@subst-labels j48d2@j48d0) (j48d6@subst-names j48d1@j48ce)) (make-simple-struct 'env '4 (list j48d6@subst-names j48d5@subst-labels j48bf@itc)))))) j48c9@swap)))))) (set! j4be0@j3172@environment j3172@environment) (set! j3174@null-environment (lambda (j48d9@n) (begin (if (not (eqv? j48d9@n '5)) (assertion-violation 'null-environment '"not 5" j48d9@n) (void)) (j3172@environment '(psyntax null-environment-5))))) (set! j4be1@j3174@null-environment j3174@null-environment) (set! j3176@scheme-report-environment (lambda (j48db@n) (begin (if (not (eqv? j48db@n '5)) (assertion-violation 'scheme-report-environment '"not 5" j48db@n) (void)) (j3172@environment '(psyntax scheme-report-environment-5))))) (set! j4be2@j3176@scheme-report-environment j3176@scheme-report-environment) (set! j3178@expand (lambda (j48dd@x j48de@env) (if (j313e@env? j48de@env) (let ((j48e1@rib (j311e@make-top-rib (j3140@env-names j48de@env) (j3144@env-labels j48de@env)))) (let ((j48e3@x (make-simple-struct 'stx '5 (list j48dd@x j2e37@top-mark* (list j48e1@rib) '()))) (j48e4@itc (j3148@env-itc j48de@env)) (j48e5@rtc (j3120@make-collector)) (j48e6@vtc (j3120@make-collector))) (let ((j48eb@x (let ((j48fd@j48ee j31aa@top-level-context) (j48fe@j48f0 j3122@inv-collector) (j48ff@j48f2 j3124@vis-collector) (j4900@j48f4 j3126@imp-collector) (j4901@j48f6 '#f) (j4902@j48f8 j48e5@rtc) (j4903@j48fa j48e6@vtc) (j4904@j48fc j48e4@itc)) (let ((j490d@swap (lambda () (begin (let ((j490f@t (j48fd@j48ee))) (begin (j48fd@j48ee j4901@j48f6) (set! j4901@j48f6 j490f@t))) (let ((j4911@t (j48fe@j48f0))) (begin (j48fe@j48f0 j4902@j48f8) (set! j4902@j48f8 j4911@t))) (let ((j4913@t (j48ff@j48f2))) (begin (j48ff@j48f2 j4903@j48fa) (set! j4903@j48fa j4913@t))) (let ((j4915@t (j4900@j48f4))) (begin (j4900@j48f4 j4904@j48fc) (set! j4904@j48fc j4915@t))))))) (dynamic-wind j490d@swap (lambda () (j30dc@chi-expr j48e3@x '() '())) j490d@swap))))) (begin (j2e6f@seal-rib! j48e1@rib) (values j48eb@x (j48e5@rtc)))))) (if (j3158@interaction-env? j48de@env) (let ((j4917@rib (j315a@interaction-env-rib j48de@env)) (j4918@r (j315e@interaction-env-r j48de@env)) (j4919@rtc (j3120@make-collector))) (let ((j491d@x (make-simple-struct 'stx '5 (list j48dd@x j2e37@top-mark* (list j4917@rib) '())))) (call-with-values (lambda () (let ((j4933@j4924 j31aa@top-level-context) (j4934@j4926 j3122@inv-collector) (j4935@j4928 j3124@vis-collector) (j4936@j492a j3126@imp-collector) (j4937@j492c j48de@env) (j4938@j492e j4919@rtc) (j4939@j4930 (j3120@make-collector)) (j493a@j4932 (j3120@make-collector))) (let ((j4943@swap (lambda () (begin (let ((j4945@t (j4933@j4924))) (begin (j4933@j4924 j4937@j492c) (set! j4937@j492c j4945@t))) (let ((j4947@t (j4934@j4926))) (begin (j4934@j4926 j4938@j492e) (set! j4938@j492e j4947@t))) (let ((j4949@t (j4935@j4928))) (begin (j4935@j4928 j4939@j4930) (set! j4939@j4930 j4949@t))) (let ((j494b@t (j4936@j492a))) (begin (j4936@j492a j493a@j4932) (set! j493a@j4932 j494b@t))))))) (dynamic-wind j4943@swap (lambda () (j312a@chi-interaction-expr j491d@x j4917@rib j4918@r)) j4943@swap)))) (lambda (j494d@j4920 j494e@j4922) (let ((j4951@r^ j494e@j4922) (j4952@e j494d@j4920)) (begin (j3160@set-interaction-env-r! j48de@env j4951@r^) (values j4952@e (j4919@rtc)))))))) (assertion-violation 'expand '"not an environment" j48de@env))))) (set! j4be3@j3178@expand j3178@expand) (set! j317a@eval (lambda (j4955@x j4956@env) (begin (if (not (j316e@environment? j4956@env)) (error 'eval '"not an environment" j4956@env) (void)) (call-with-values (lambda () (j3178@expand j4955@x j4956@env)) (lambda (j495d@j495a j495e@j495c) (let ((j4961@invoke-req* j495e@j495c) (j4962@x j495d@j495a)) (begin (for-each j2ccf@j2b1d@invoke-library j4961@invoke-req*) (eval-core (j2a59@j2a11@expanded->core j4962@x))))))))) (set! j4be4@j317a@eval j317a@eval) (set! j317c@library-expander (lambda j49d3 (let ((j49d4 (length j49d3))) (if (= j49d4 '3) (apply (lambda (j4965@x j4966@filename j4967@verify-name) (letrec* ((j496c@build-visit-code (lambda (j49c1@macro*) (if (null? j49c1@macro*) (j2e19@j2d7a@build-void) (j2e18@j2d78@build-sequence '#f (map (lambda (j49c3@x) (let ((j49c5@loc (car j49c3@x)) (j49c6@src (cddr j49c3@x))) (list 'set! j49c5@loc j49c6@src))) j49c1@macro*))))) (j496e@visit! (lambda (j49b9@macro*) (for-each (lambda (j49bb@x) (let ((j49bd@loc (car j49bb@x)) (j49be@proc (cadr j49bb@x))) (set-symbol-value! j49bd@loc j49be@proc))) j49b9@macro*)))) (call-with-values (lambda () (j312e@core-library-expander j4965@x j4967@verify-name)) (lambda (j4981@j4970 j4982@j4972 j4983@j4974 j4984@j4976 j4985@j4978 j4986@j497a j4987@j497c j4988@j497e j4989@j4980) (let ((j4993@export-env j4989@j4980) (j4994@export-subst j4988@j497e) (j4995@macro* j4987@j497c) (j4996@invoke-code j4986@j497a) (j4997@vis* j4985@j4978) (j4998@inv* j4984@j4976) (j4999@imp* j4983@j4974) (j499a@ver j4982@j4972) (j499b@name j4981@j4970)) (let ((j49a5@id (gensym)) (j49a6@name j499b@name) (j49a7@ver j499a@ver) (j49a8@imp* (map j2cd3@j2b25@library-spec j4999@imp*)) (j49a9@vis* (map j2cd3@j2b25@library-spec j4997@vis*)) (j49aa@inv* (map j2cd3@j2b25@library-spec j4998@inv*)) (j49ab@visit-proc (lambda () (j496e@visit! j4995@macro*))) (j49ac@invoke-proc (lambda () (eval-core (j2a59@j2a11@expanded->core j4996@invoke-code)))) (j49ad@visit-code (j496c@build-visit-code j4995@macro*)) (j49ae@invoke-code j4996@invoke-code)) (begin (j2ccd@j2b19@install-library j49a5@id j49a6@name j49a7@ver j49a8@imp* j49a9@vis* j49aa@inv* j4994@export-subst j4993@export-env j49ab@visit-proc j49ac@invoke-proc j49ad@visit-code j49ae@invoke-code '#t j4966@filename) (values j49a5@id j49a6@name j49a7@ver j49a8@imp* j49a9@vis* j49aa@inv* j49ae@invoke-code j49ad@visit-code j4994@export-subst j4993@export-env)))))))) j49d3) (if (= j49d4 '2) (apply (lambda (j49c9@x j49ca@filename) (j317c@library-expander j49c9@x j49ca@filename (lambda (j49cd@x) (values)))) j49d3) (if (= j49d4 '1) (apply (lambda (j49cf@x) (j317c@library-expander j49cf@x '#f (lambda (j49d1@x) (values)))) j49d3) (error #1# '"invalid arg count"))))))) (set! j4be5@j317c@library-expander j317c@library-expander) (set! j317e@boot-library-expand (lambda (j49d5@x) (call-with-values (lambda () (j317c@library-expander j49d5@x)) (lambda (j49eb@j49d8 j49ec@j49da j49ed@j49dc j49ee@j49de j49ef@j49e0 j49f0@j49e2 j49f1@j49e4 j49f2@j49e6 j49f3@j49e8 j49f4@j49ea) (let ((j49ff@export-env j49f4@j49ea) (j4a00@export-subst j49f3@j49e8) (j4a01@visit-code j49f2@j49e6) (j4a02@invoke-code j49f1@j49e4) (j4a03@inv* j49f0@j49e2) (j4a04@vis* j49ef@j49e0) (j4a05@imp* j49ee@j49de) (j4a06@ver j49ed@j49dc) (j4a07@name j49ec@j49da) (j4a08@id j49eb@j49d8)) (values j4a07@name j4a02@invoke-code j4a00@export-subst j49ff@export-env)))))) (set! j4be6@j317e@boot-library-expand j317e@boot-library-expand) (set! j3180@rev-map-append (lambda (j4a13@f j4a14@ls j4a15@ac) (if (null? j4a14@ls) j4a15@ac (j3180@rev-map-append j4a13@f (cdr j4a14@ls) (cons (j4a13@f (car j4a14@ls)) j4a15@ac))))) (set! j4be7@j3180@rev-map-append j3180@rev-map-append) (set! j3182@build-exports (lambda (j4a19@lex*+loc* j4a1a@init*) (j2e18@j2d78@build-sequence '#f (cons (j2e19@j2d7a@build-void) (j3180@rev-map-append (lambda (j4a1d@x) (list 'set! (cdr j4a1d@x) (car j4a1d@x))) j4a19@lex*+loc* j4a1a@init*))))) (set! j4be8@j3182@build-exports j3182@build-exports) (set! j3184@make-export-subst (lambda (j4a1f@name* j4a20@id*) (map (lambda (j4a23@name j4a24@id) (let ((j4a27@label (j2ec9@id->label j4a24@id))) (begin (if (not j4a27@label) (j319a@syntax-violation '#f '"cannot export unbound identifier" j4a24@id) (void)) (cons j4a23@name j4a27@label)))) j4a1f@name* j4a20@id*))) (set! j4be9@j3184@make-export-subst j3184@make-export-subst) (set! j3186@make-export-env/macros (lambda (j4a29@lex* j4a2a@loc* j4a2b@r) (letrec* ((j4a30@lookup (lambda (j4a4d@x) (let j4a55@f ((j4a4f@x j4a4d@x) (j4a50@lex* j4a29@lex*) (j4a51@loc* j4a2a@loc*)) (if (pair? j4a50@lex*) (if (eq? j4a4f@x (car j4a50@lex*)) (car j4a51@loc*) (j4a55@f j4a4f@x (cdr j4a50@lex*) (cdr j4a51@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let j4a39@f ((j4a31@r j4a2b@r) (j4a32@env '()) (j4a33@global* '()) (j4a34@macro* '())) (if (null? j4a31@r) (values j4a32@env j4a33@global* j4a34@macro*) (let ((j4a3b@x (car j4a31@r))) (let ((j4a3d@label (car j4a3b@x)) (j4a3e@b (cdr j4a3b@x))) (let ((j4a41@t (j2ecf@binding-type j4a3e@b))) (if (memv j4a41@t '(lexical)) (let ((j4a43@v (j2ed1@binding-value j4a3e@b))) (let ((j4a45@loc (j4a30@lookup (j3044@lexical-var j4a43@v))) (j4a46@type (if (j3046@lexical-mutable? j4a43@v) 'mutable 'global))) (j4a39@f (cdr j4a31@r) (cons (cons* j4a3d@label j4a46@type j4a45@loc) j4a32@env) (cons (cons (j3044@lexical-var j4a43@v) j4a45@loc) j4a33@global*) j4a34@macro*))) (if (memv j4a41@t '(local-macro)) (let ((j4a49@loc (gensym))) (j4a39@f (cdr j4a31@r) (cons (cons* j4a3d@label 'global-macro j4a49@loc) j4a32@env) j4a33@global* (cons (cons j4a49@loc (j2ed1@binding-value j4a3e@b)) j4a34@macro*))) (if (memv j4a41@t '(local-macro!)) (let ((j4a4b@loc (gensym))) (j4a39@f (cdr j4a31@r) (cons (cons* j4a3d@label 'global-macro! j4a4b@loc) j4a32@env) j4a33@global* (cons (cons j4a4b@loc (j2ed1@binding-value j4a3e@b)) j4a34@macro*))) (if (memv j4a41@t '($rtd $module)) (j4a39@f (cdr j4a31@r) (cons j4a3b@x j4a32@env) j4a33@global* j4a34@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (j2ecf@binding-type j4a3e@b) (j2ed1@binding-value j4a3e@b)))))))))))))) (set! j4bea@j3186@make-export-env/macros j3186@make-export-env/macros) (set! j3188@generate-temporaries (lambda (j4a57@ls) (let ((j4a59@t j4a57@ls)) (let ((j4a5b@ls/false (j30ba@syntax-dispatch j4a59@t 'each-any))) (if j4a5b@ls/false (apply (lambda (j4a5d@ls) (map (lambda (j4a5f@x) (make-simple-struct 'stx '5 (list (let ((j4a61@x (j31a0@syntax->datum j4a5f@x))) (if (or (symbol? j4a61@x) (string? j4a61@x)) (gensym j4a61@x) (gensym 't))) j2e37@top-mark* '() '()))) j4a5d@ls)) j4a5b@ls/false) (let ((j4a63@t j4a59@t)) (let ((j4a65@ls/false (j30ba@syntax-dispatch j4a63@t '_))) (if j4a65@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) j4a65@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j4a63@t))))))))) (set! j4beb@j3188@generate-temporaries j3188@generate-temporaries) (set! j318a@free-identifier=? (lambda (j4a67@x j4a68@y) (if (j2eb3@id? j4a67@x) (if (j2eb3@id? j4a68@y) (j2eb9@free-id=? j4a67@x j4a68@y) (assertion-violation 'free-identifier=? '"not an identifier" j4a68@y)) (assertion-violation 'free-identifier=? '"not an identifier" j4a67@x)))) (set! j4bec@j318a@free-identifier=? j318a@free-identifier=?) (set! j318c@bound-identifier=? (lambda (j4a6b@x j4a6c@y) (if (j2eb3@id? j4a6b@x) (if (j2eb3@id? j4a6c@y) (j2eb7@bound-id=? j4a6b@x j4a6c@y) (assertion-violation 'bound-identifier=? '"not an identifier" j4a6c@y)) (assertion-violation 'bound-identifier=? '"not an identifier" j4a6b@x)))) (set! j4bed@j318c@bound-identifier=? j318c@bound-identifier=?) (set! j318e@make-source-condition (lambda (j4a6f@x) (letrec* ((j4a79@j4a74 (make-record-type-descriptor '&source-information &condition-rtd 'j4a77 '#f '#f '#((immutable file-name) (immutable line)))) (j4a7b@j4a76 '#f) (j4a7d@j4a75 (make-record-constructor-descriptor j4a79@j4a74 &condition-rcd j4a7b@j4a76)) (j4a80@j4a73 (record-predicate j4a79@j4a74)) (j4a82@make-source-condition (record-constructor j4a7d@j4a75)) (j4a84@j4a71 (record-accessor j4a79@j4a74 '0)) (j4a86@j4a72 (record-accessor j4a79@j4a74 '1)) (j4a88@source-condition? (condition-predicate j4a79@j4a74)) (j4a8a@source-filename (condition-accessor j4a79@j4a74 j4a84@j4a71)) (j4a8c@source-character (condition-accessor j4a79@j4a74 j4a86@j4a72))) (if (and (pair? j4a6f@x) (pair? (cdr j4a6f@x))) (j4a82@make-source-condition (car j4a6f@x) (cadr j4a6f@x)) (condition))))) (set! j4bee@j318e@make-source-condition j318e@make-source-condition) (set! j3190@extract-position-condition (lambda (j4a8d@x) (j318e@make-source-condition (j3192@expression-position j4a8d@x)))) (set! j4bef@j3190@extract-position-condition j3190@extract-position-condition) (set! j3192@expression-position (lambda (j4a8f@x) (and (j2e7f@stx? j4a8f@x) (let ((j4a91@x (j2e81@stx-expr j4a8f@x))) (and (j29f7@j28c9@annotation? j4a91@x) (j29f8@j28cb@annotation-source j4a91@x)))))) (set! j4bf0@j3192@expression-position j3192@expression-position) (set! j3194@assertion-error (lambda (j4a93@expr j4a94@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list j4a93@expr)) (j318e@make-source-condition j4a94@pos))))) (set! j4bf1@j3194@assertion-error j3194@assertion-error) (set! j3196@syntax-error (lambda (j4a97@x . j4a99@args) (begin (if (not (for-all string? j4a99@args)) (assertion-violation 'syntax-error '"invalid argument" j4a99@args) (void)) (raise (condition (make-message-condition (if (null? j4a99@args) '"invalid syntax" (apply string-append j4a99@args))) (make-syntax-violation (j31a0@syntax->datum j4a97@x) '#f) (j3190@extract-position-condition j4a97@x)))))) (set! j4bf2@j3196@syntax-error j3196@syntax-error) (set! j3198@syntax-violation* (lambda (j4a9b@who j4a9c@msg j4a9d@form j4a9e@condition-object) (begin (if (not (string? j4a9c@msg)) (assertion-violation 'syntax-violation '"message is not a string" j4a9c@msg) (void)) (let ((j4aa3@who (if (or (string? j4a9b@who) (symbol? j4a9b@who)) j4a9b@who (if (not j4a9b@who) (let ((j4aa5@t j4a9d@form)) (let ((j4aa7@ls/false (j30ba@syntax-dispatch j4aa5@t 'any))) (if (and j4aa7@ls/false (apply (lambda (j4aa9@id) (j2eb3@id? j4aa9@id)) j4aa7@ls/false)) (apply (lambda (j4aab@id) (j31a0@syntax->datum j4aab@id)) j4aa7@ls/false) (let ((j4aad@t j4aa5@t)) (let ((j4aaf@ls/false (j30ba@syntax-dispatch j4aad@t '(any . any)))) (if (and j4aaf@ls/false (apply (lambda (j4ab1@id j4ab2@rest) (j2eb3@id? j4ab1@id)) j4aaf@ls/false)) (apply (lambda (j4ab5@id j4ab6@rest) (j31a0@syntax->datum j4ab5@id)) j4aaf@ls/false) (let ((j4ab9@t j4aad@t)) (let ((j4abb@ls/false (j30ba@syntax-dispatch j4ab9@t '_))) (if j4abb@ls/false (apply (lambda () '#f) j4abb@ls/false) (j319a@syntax-violation '#f '"invalid syntax" j4ab9@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" j4a9b@who))))) (raise (condition (if j4aa3@who (make-who-condition j4aa3@who) (condition)) (make-message-condition j4a9c@msg) j4a9e@condition-object (j3190@extract-position-condition j4a9d@form))))))) (set! j4bf3@j3198@syntax-violation* j3198@syntax-violation*) (set! j319a@syntax-violation (lambda j4acb (let ((j4acc (length j4acb))) (if (= j4acc '3) (apply (lambda (j4abd@who j4abe@msg j4abf@form) (j319a@syntax-violation j4abd@who j4abe@msg j4abf@form '#f)) j4acb) (if (= j4acc '4) (apply (lambda (j4ac3@who j4ac4@msg j4ac5@form j4ac6@subform) (j3198@syntax-violation* j4ac3@who j4ac4@msg j4ac5@form (make-syntax-violation (j31a0@syntax->datum j4ac5@form) (j31a0@syntax->datum j4ac6@subform)))) j4acb) (error #1# '"invalid arg count")))))) (set! j4bf4@j319a@syntax-violation j319a@syntax-violation) (set! j319c@identifier? (lambda (j4acd@x) (j2eb3@id? j4acd@x))) (set! j4bf5@j319c@identifier? j319c@identifier?) (set! j319e@datum->syntax (lambda (j4acf@id j4ad0@datum) (if (j2eb3@id? j4acf@id) (j2e93@datum->stx j4acf@id j4ad0@datum) (assertion-violation 'datum->syntax '"not an identifier" j4acf@id)))) (set! j4bf6@j319e@datum->syntax j319e@datum->syntax) (set! j31a0@syntax->datum (lambda (j4ad3@x) (j2ec7@stx->datum j4ad3@x))) (set! j4bf7@j31a0@syntax->datum j31a0@syntax->datum) (set! j31a2@ungensym-all (lambda (j4ad5@code) (if (pair? j4ad5@code) (cons (j31a2@ungensym-all (car j4ad5@code)) (j31a2@ungensym-all (cdr j4ad5@code))) (if (symbol? j4ad5@code) (ungensym j4ad5@code) j4ad5@code)))) (set! j4bf8@j31a2@ungensym-all j31a2@ungensym-all) (set! j31a4@compile-r6rs-top-level (lambda (j4ad7@x*) (call-with-values (lambda () (j3132@top-level-expander j4ad7@x*)) (lambda (j4add@j4ada j4ade@j4adc) (let ((j4ae1@invoke-code j4ade@j4adc) (j4ae2@lib* j4add@j4ada)) (lambda () (begin (for-each j2ccf@j2b1d@invoke-library j4ae2@lib*) (let ((j4ae5@expanded (j2a59@j2a11@expanded->core j4ae1@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (j31a2@ungensym-all j4ae5@expanded)) (void)) (eval-core j4ae5@expanded)))))))))) (set! j4bf9@j31a4@compile-r6rs-top-level j31a4@compile-r6rs-top-level) (set! j31a6@pre-compile-r6rs-top-level (lambda (j4ae7@x*) (call-with-values (lambda () (j3132@top-level-expander j4ae7@x*)) (lambda (j4aed@j4aea j4aee@j4aec) (let ((j4af1@invoke-code j4aee@j4aec) (j4af2@lib* j4aed@j4aea)) (begin (for-each j2ccf@j2b1d@invoke-library j4af2@lib*) (j2a01@j28dd@compile-core (j2a59@j2a11@expanded->core j4af1@invoke-code)))))))) (set! j4bfa@j31a6@pre-compile-r6rs-top-level j31a6@pre-compile-r6rs-top-level) (set! j31a8@interaction-environment (let ((j4af5@the-env '#f)) (lambda () (or j4af5@the-env (let ((j4af7@lib (j2cc8@j2b0f@find-library-by-name '(mosh interaction))) (j4af8@rib (j2e67@make-empty-rib))) (begin (let ((j4afb@subst (j2caa@j2ad3@library-subst j4af7@lib))) (begin (j2e53@set-rib-sym*! j4af8@rib (map car j4afb@subst)) (j2e57@set-rib-mark**! j4af8@rib (map (lambda (j4afd@x) j2e37@top-mark*) j4afb@subst)) (j2e5b@set-rib-label*! j4af8@rib (map cdr j4afb@subst)))) (let ((j4aff@env (make-simple-struct 'interaction-env '4 (list j4af8@rib '() '())))) (begin (set! j4af5@the-env j4aff@env) j4aff@env)))))))) (set! j4bfb@j31a8@interaction-environment j31a8@interaction-environment) (set! j31aa@top-level-context (j2a03@j28e1@make-parameter '#f)) (set! j4bfc@j31aa@top-level-context j31aa@top-level-context) (j2cc5@j2b09@current-library-expander j317c@library-expander))
(begin (begin (j2a56@j2a0b@current-primitive-locations (lambda (j5145@x) (let ((j5147@t (assq j5145@x '((syntax-error . j4bf2@j3196@syntax-error) (syntax-dispatch . j4b90@j30ba@syntax-dispatch) (load . j4d78@j4c23@load) (interaction-environment . j4bfb@j31a8@interaction-environment) (library-path . j2cbd@j2af9@library-path) (mosh-cache-dir . j2a04@j28e3@mosh-cache-dir) (make-parameter . j2a03@j28e1@make-parameter) (make-variable-transformer . j4b4d@j2ee5@make-variable-transformer) (identifier? . j4bf5@j319c@identifier?) (generate-temporaries . j4beb@j3188@generate-temporaries) (free-identifier=? . j4bec@j318a@free-identifier=?) (syntax->datum . j4bf7@j31a0@syntax->datum) (datum->syntax . j4bf6@j319e@datum->syntax) (bound-identifier=? . j4bed@j318c@bound-identifier=?) (scheme-report-environment . j4be2@j3176@scheme-report-environment) (null-environment . j4be1@j3174@null-environment) (command-line . j4d75@j4c1d@command-line) (eval . j4be4@j317a@eval) (environment . j4be0@j3172@environment) (syntax-violation . j4bf4@j319a@syntax-violation) (assertion-error . j4bf1@j3194@assertion-error))))) (if j5147@t (cdr j5147@t) '#f)))) (j2ccd@j2b19@install-library 'j5122 '(mosh interaction) '() '() '() '() '(#1=(regexp? . j50e2) #2=(alist->eq-hash-table . j50de) #3=(format . j50db) #4=(string-split . j50d0) #5=(call-process . j50ca) #6=(set-current-directory! . j50c6) #7=(expand-path . j50c5) #8=(current-directory . j50c4) #9=(%spawn . j50c3) #10=(%waitpid . j50c2) #11=(simple-struct-name . j50c1) #12=(simple-struct-set! . j50c0) #13=(simple-struct-ref . j50bf) #14=(make-simple-struct . j50be) #15=(simple-struct? . j50bd) #16=(pointer-ref-c-int64 . j50bc) #17=(pointer-ref-c-int32 . j50bb) #18=(pointer-ref-c-int16 . j50ba) #19=(pointer-ref-c-int8 . j50b9) #20=(pointer-ref-c-uint64 . j50b8) #21=(pointer-ref-c-uint32 . j50b7) #22=(pointer-ref-c-uint16 . j50b6) #23=(pointer-ref-c-uint8 . j50b5) #24=(pointer-set-c-uint64! . j50b4) #25=(pointer-set-c-uint32! . j50b3) #26=(pointer-set-c-uint16! . j50b2) #27=(pointer-set-c-uint8! . j50b1) #28=(pointer-set-c-int64! . j50b0) #29=(pointer-set-c-int32! . j50af) #30=(pointer-set-c-int16! . j50ae) #31=(pointer-set-c-int8! . j50ad) #32=(pointer-set-c-pointer! . j50ac) #33=(pointer-set-c-double! . j50ab) #34=(pointer-set-c-float! . j50aa) #35=(pointer-set-c-long-long! . j50a9) #36=(pointer-set-c-long! . j50a8) #37=(pointer-set-c-int! . j50a7) #38=(pointer-set-c-short! . j50a6) #39=(pointer-set-c-char! . j50a5) #40=(pointer-ref-c-pointer . j50a4) #41=(pointer-ref-c-double . j50a3) #42=(pointer-ref-c-float . j50a2) #43=(pointer-ref-c-unsigned-long-long . j50a1) #44=(pointer-ref-c-signed-long-long . j50a0) #45=(pointer-ref-c-unsigned-long . j509f) #46=(pointer-ref-c-signed-long . j509e) #47=(pointer-ref-c-unsigned-int . j509d) #48=(pointer-ref-c-signed-int . j509c) #49=(pointer-ref-c-unsigned-short . j509b) #50=(pointer-ref-c-signed-short . j509a) #51=(pointer-ref-c-unsigned-char . j5099) #52=(pointer-ref-c-signed-char . j5098) #53=(pointer->integer . j5097) #54=(integer->pointer . j5096) #55=(pointer? . j5095) #56=(shared-errno . j5094) #57=(%ffi-supported? . j508f) #58=(%ffi-pointer->string . j508e) #59=(%ffi-call . j508d) #60=(%ffi-lookup . j508c) #61=(%ffi-open . j508b) #62=(null-terminated-utf8->string . j508a) #63=(null-terminated-bytevector->string . j5089) #64=(%fork . j5088) #65=(%pipe . j5087) #66=(p . j5086) #67=(whereis . j506a) #68=(register . j5069) #69=(vm-join! . j5068) #70=(vm-set-value! . j5067) #71=(vm? . j5066) #72=(main-vm? . j5065) #73=(vm-eval . j5064) #74=(vm-self . j5063) #75=(vm-start! . j5062) #76=(make-vm . j5061) #77=(mutex-try-lock! . j5060) #78=(mutex-unlock! . j505f) #79=(mutex-lock! . j505e) #80=(mutex? . j505d) #81=(make-mutex . j505c) #82=(condition-variable-notify-all! . j505b) #83=(condition-variable-notify! . j505a) #84=(condition-variable-wait! . j5059) #85=(make-condition-variable . j5058) #86=(string-upcase . j5040) #87=(string-titlecase . j503f) #88=(string-normalize-nfkd . j503e) #89=(string-normalize-nfkc . j503d) #90=(string-normalize-nfd . j503c) #91=(string-normalize-nfc . j503b) #92=(string-foldcase . j503a) #93=(string-downcase . j5039) #94=(string-ci>? . j5038) #95=(string-ci>=? . j5037) #96=(string-ci=? . j5036) #97=(string-ci<? . j5035) #98=(string-ci<=? . j5034) #99=(char-whitespace? . j5033) #100=(char-upper-case? . j5032) #101=(char-title-case? . j5031) #102=(char-numeric? . j5030) #103=(char-lower-case? . j502f) #104=(char-general-category . j502e) #105=(char-upcase . j502d) #106=(char-titlecase . j502c) #107=(char-foldcase . j502b) #108=(char-downcase . j502a) #109=(char-ci>? . j5029) #110=(char-ci>=? . j5028) #111=(char-ci=? . j5027) #112=(char-ci<? . j5026) #113=(char-ci<=? . j5025) #114=(char-alphabetic? . j5024) #115=(make-variable-transformer . j2ee4) #116=(identifier? . j319b) #117=(generate-temporaries . j3187) #118=(free-identifier=? . j3189) #119=(syntax->datum . j319f) #120=(datum->syntax . j319d) #121=(bound-identifier=? . j318b) #122=(record-type-descriptor? . j5023) #123=(record-predicate . j5022) #124=(record-mutator . j5021) #125=(record-constructor . j5020) #126=(record-accessor . j501f) #127=(make-record-type-descriptor . j501e) #128=(make-record-constructor-descriptor . j501d) #129=(record? . j501c) #130=(record-type-uid . j501b) #131=(record-type-sealed? . j501a) #132=(record-type-parent . j5019) #133=(record-type-opaque? . j5018) #134=(record-type-name . j5017) #135=(record-type-generative? . j5016) #136=(record-type-field-names . j5015) #137=(record-rtd . j5014) #138=(record-field-mutable? . j5013) #139=(delete-file . j5012) #140=(file-exists? . j5011) #141=(vector-sort! . j5010) #142=(vector-sort . j500f) #143=(list-sort . j500e) #144=(symbol-hash . j500d) #145=(string-ci-hash . j500c) #146=(string-hash . j500b) #147=(equal-hash . j500a) #148=(hashtable-equivalence-function . j5009) #149=(make-hashtable . j5008) #150=(hashtable-hash-function . j5007) #151=(make-eqv-hashtable . j5006) #152=(make-eq-hashtable . j5005) #153=(hashtable? . j5004) #154=(hashtable-update! . j5003) #155=(hashtable-size . j5002) #156=(hashtable-set! . j5001) #157=(hashtable-ref . j5000) #158=(hashtable-mutable? . j4fff) #159=(hashtable-keys . j4ffe) #160=(hashtable-entries . j4ffd) #161=(hashtable-delete! . j4ffc) #162=(hashtable-copy . j4ffb) #163=(hashtable-contains? . j4ffa) #164=(hashtable-clear! . j4ff9) #165=(call-with-output-file . j4ff8) #166=(call-with-input-file . j4ff7) #167=(write-char . j4ff6) #168=(write . j4ff5) #169=(with-output-to-file . j4ff4) #170=(with-input-from-file . j4ff3) #171=(read-char . j4ff2) #172=(read . j4ff1) #173=(peek-char . j4ff0) #174=(open-output-file . j4fef) #175=(open-input-file . j4fee) #176=(newline . j4fed) #177=(display . j4fec) #178=(close-output-port . j4feb) #179=(close-input-port . j4fea) #180=(eof-object? . j4fe9) #181=(eof-object . j4fe8) #182=(current-error-port . j4fe7) #183=(current-output-port . j4fe6) #184=(current-input-port . j4fe5) #185=(output-port? . j4fe4) #186=(input-port? . j4fe3) #187=(utf-8-codec . j4fe2) #188=(utf-16-codec . j4fe1) #189=(transcoder-error-handling-mode . j4fe0) #190=(transcoder-eol-style . j4fdf) #191=(transcoder-codec . j4fde) #192=(transcoded-port . j4fdd) #193=(textual-port? . j4fdc) #194=(string->bytevector . j4fdb) #195=(standard-output-port . j4fda) #196=(standard-input-port . j4fd9) #197=(standard-error-port . j4fd8) #198=(set-port-position! . j4fd7) #199=(put-u8 . j4fd6) #200=(put-string . j4fd5) #201=(put-datum . j4fd4) #202=(put-char . j4fd3) #203=(put-bytevector . j4fd2) #204=(port? . j4fd1) #205=(port-transcoder . j4fd0) #206=(port-position . j4fcf) #207=(port-has-set-port-position!? . j4fce) #208=(port-has-port-position? . j4fcd) #209=(port-eof? . j4fcc) #210=(output-port-buffer-mode . j4fcb) #211=(open-string-output-port . j4fca) #212=(open-string-input-port . j4fc9) #213=(open-file-output-port . j4fc8) #214=(open-file-input/output-port . j4fc7) #215=(open-file-input-port . j4fc6) #216=(open-bytevector-output-port . j4fc5) #217=(open-bytevector-input-port . j4fc4) #218=(native-transcoder . j4fc3) #219=(native-eol-style . j4fc2) #220=(make-transcoder . j4fc1) #221=(latin-1-codec . j4fc0) #222=(make-i/o-write-error . j4fbf) #223=(make-i/o-read-error . j4fbe) #224=(make-i/o-port-error . j4fbd) #225=(make-i/o-invalid-position-error . j4fbc) #226=(make-i/o-filename-error . j4fbb) #227=(make-i/o-file-protection-error . j4fba) #228=(make-i/o-file-is-read-only-error . j4fb9) #229=(make-i/o-file-does-not-exist-error . j4fb8) #230=(make-i/o-file-already-exists-error . j4fb7) #231=(make-i/o-error . j4fb6) #232=(make-i/o-encoding-error . j4fb5) #233=(make-i/o-decoding-error . j4fb4) #234=(make-custom-textual-output-port . j4fb3) #235=(make-custom-textual-input/output-port . j4fb2) #236=(make-custom-textual-input-port . j4fb1) #237=(make-custom-binary-output-port . j4fb0) #238=(make-custom-binary-input/output-port . j4faf) #239=(make-custom-binary-input-port . j4fae) #240=(make-bytevector . j4fad) #241=(lookahead-u8 . j4fac) #242=(lookahead-char . j4fab) #243=(i/o-write-error? . j4faa) #244=(i/o-read-error? . j4fa9) #245=(i/o-port-error? . j4fa8) #246=(i/o-invalid-position-error? . j4fa7) #247=(i/o-filename-error? . j4fa6) #248=(i/o-file-protection-error? . j4fa5) #249=(i/o-file-is-read-only-error? . j4fa4) #250=(i/o-file-does-not-exist-error? . j4fa3) #251=(i/o-file-already-exists-error? . j4fa2) #252=(i/o-error? . j4fa1) #253=(i/o-error-position . j4fa0) #254=(i/o-error-port . j4f9f) #255=(i/o-error-filename . j4f9e) #256=(i/o-encoding-error? . j4f9d) #257=(i/o-encoding-error-char . j4f9c) #258=(i/o-decoding-error? . j4f9b) #259=(get-u8 . j4f9a) #260=(get-string-n! . j4f99) #261=(get-string-n . j4f98) #262=(get-string-all . j4f97) #263=(get-line . j4f96) #264=(get-datum . j4f95) #265=(get-char . j4f94) #266=(get-bytevector-some . j4f93) #267=(get-bytevector-n! . j4f92) #268=(get-bytevector-n . j4f91) #269=(get-bytevector-all . j4f90) #270=(flush-output-port . j4f8f) #271=(close-port . j4f8e) #272=(exit . j4f86) #273=(command-line . j4c1c) #274=(string-fill! . j4f85) #275=(string-set! . j4f84) #276=(set-cdr! . j4f83) #277=(set-car! . j4f82) #278=(remove . j4f81) #279=(remv . j4f80) #280=(remp . j4f7f) #281=(remq . j4f7e) #282=(partition . j4f7d) #283=(memv . j4f7c) #284=(memq . j4f7b) #285=(memp . j4f7a) #286=(member . j4f79) #287=(exists . j4f78) #288=(for-all . j4f77) #289=(fold-right . j4f76) #290=(fold-left . j4f75) #291=(find . j4f74) #292=(filter . j4f73) #293=(cons* . j4f72) #294=(assv . j4f71) #295=(assq . j4f70) #296=(assp . j4f6f) #297=(assoc . j4f6e) #298=(call-with-string-output-port . j4f6d) #299=(call-with-port . j4f6c) #300=(call-with-bytevector-output-port . j4f6b) #301=(bytevector->string . j4f6a) #302=(buffer-mode? . j4f69) #303=(binary-port? . j4f68) #304=(with-exception-handler . j4f67) #305=(raise-continuable . j4f66) #306=(raise . j4f65) #307=(eval . j3179) #308=(environment . j3171) #309=(make-enumeration . j4f64) #310=(enum-set=? . j4f63) #311=(enum-set-universe . j4f62) #312=(enum-set-union . j4f61) #313=(enum-set-subset? . j4f60) #314=(enum-set-projection . j4f5f) #315=(enum-set-member? . j4f5e) #316=(enum-set-intersection . j4f5d) #317=(enum-set-indexer . j4f5c) #318=(enum-set-difference . j4f5b) #319=(enum-set-constructor . j4f5a) #320=(enum-set-complement . j4f59) #321=(enum-set->list . j4f58) #322=(who-condition? . j4f57) #323=(warning? . j4f56) #324=(violation? . j4f55) #325=(undefined-violation? . j4f54) #326=(syntax-violation? . j4f53) #327=(syntax-violation-subform . j4f52) #328=(syntax-violation-form . j4f51) #329=(syntax-violation . j3199) #330=(simple-conditions . j4f50) #331=(serious-condition? . j4f4f) #332=(non-continuable-violation? . j4f4e) #333=(message-condition? . j4f4d) #334=(make-who-condition . j4f4c) #335=(make-warning . j4f4b) #336=(make-violation . j4f4a) #337=(make-undefined-violation . j4f49) #338=(make-syntax-violation . j4f48) #339=(make-serious-condition . j4f47) #340=(make-non-continuable-violation . j4f46) #341=(make-message-condition . j4f45) #342=(make-lexical-violation . j4f44) #343=(make-irritants-condition . j4f43) #344=(make-implementation-restriction-violation . j4f42) #345=(make-error . j4f41) #346=(make-assertion-violation . j4f40) #347=(lexical-violation? . j4f3f) #348=(irritants-condition? . j4f3e) #349=(implementation-restriction-violation? . j4f3d) #350=(error? . j4f3c) #351=(condition-who . j4f3b) #352=(condition-predicate . j4f3a) #353=(condition-message . j4f39) #354=(condition-irritants . j4f38) #355=(condition-accessor . j4f37) #356=(condition . j4f36) #357=(assertion-violation? . j4f35) #358=(condition? . j4f34) #359=(utf32->string . j4f33) #360=(utf16->string . j4f32) #361=(utf8->string . j4f31) #362=(uint-list->bytevector . j4f30) #363=(u8-list->bytevector . j4f2f) #364=(string->utf8 . j4f2e) #365=(string->utf32 . j4f2d) #366=(string->utf16 . j4f2c) #367=(sint-list->bytevector . j4f2b) #368=(native-endianness . j4f2a) #369=(bytevector? . j4f29) #370=(bytevector=? . j4f28) #371=(bytevector-uint-set! . j4f27) #372=(bytevector-uint-ref . j4f26) #373=(bytevector-u8-set! . j4f25) #374=(bytevector-u8-ref . j4f24) #375=(bytevector-u64-set! . j4f23) #376=(bytevector-u64-ref . j4f22) #377=(bytevector-u64-native-set! . j4f21) #378=(bytevector-u64-native-ref . j4f20) #379=(bytevector-u32-set! . j4f1f) #380=(bytevector-u32-ref . j4f1e) #381=(bytevector-u32-native-set! . j4f1d) #382=(bytevector-u32-native-ref . j4f1c) #383=(bytevector-u16-set! . j4f1b) #384=(bytevector-u16-ref . j4f1a) #385=(bytevector-u16-native-set! . j4f19) #386=(bytevector-u16-native-ref . j4f18) #387=(bytevector-sint-set! . j4f17) #388=(bytevector-sint-ref . j4f16) #389=(bytevector-s8-set! . j4f15) #390=(bytevector-s8-ref . j4f14) #391=(bytevector-s64-set! . j4f13) #392=(bytevector-s64-ref . j4f12) #393=(bytevector-s64-native-set! . j4f11) #394=(bytevector-s64-native-ref . j4f10) #395=(bytevector-s32-set! . j4f0f) #396=(bytevector-s32-ref . j4f0e) #397=(bytevector-s32-native-set! . j4f0d) #398=(bytevector-s32-native-ref . j4f0c) #399=(bytevector-s16-set! . j4f0b) #400=(bytevector-s16-ref . j4f0a) #401=(bytevector-s16-native-set! . j4f09) #402=(bytevector-s16-native-ref . j4f08) #403=(bytevector-length . j4f07) #404=(bytevector-ieee-single-ref . j4f06) #405=(bytevector-ieee-single-set! . j4f05) #406=(bytevector-ieee-single-native-set! . j4f04) #407=(bytevector-ieee-single-native-ref . j4f03) #408=(bytevector-ieee-double-set! . j4f02) #409=(bytevector-ieee-double-ref . j4f01) #410=(bytevector-ieee-double-native-set! . j4f00) #411=(bytevector-ieee-double-native-ref . j4eff) #412=(bytevector-fill! . j4efe) #413=(bytevector-copy! . j4efd) #414=(bytevector-copy . j4efc) #415=(bytevector->uint-list . j4efb) #416=(bytevector->u8-list . j4efa) #417=(bytevector->sint-list . j4ef9) #418=(no-nans-violation? . j4ef8) #419=(no-infinities-violation? . j4ef7) #420=(make-no-nans-violation . j4ef6) #421=(make-no-infinities-violation . j4ef5) #422=(real->flonum . j4ef4) #423=(flzero? . j4ef3) #424=(fltruncate . j4ef2) #425=(fltan . j4ef1) #426=(flsqrt . j4ef0) #427=(flsin . j4eef) #428=(flround . j4eee) #429=(flpositive? . j4eed) #430=(flonum? . j4eec) #431=(flodd? . j4eeb) #432=(flnumerator . j4eea) #433=(flnegative? . j4ee9) #434=(flnan? . j4ee8) #435=(flmod0 . j4ee7) #436=(flmod . j4ee6) #437=(flmin . j4ee5) #438=(flmax . j4ee4) #439=(fllog . j4ee3) #440=(flinteger? . j4ee2) #441=(flinfinite? . j4ee1) #442=(flfloor . j4ee0) #443=(flfinite? . j4edf) #444=(flexpt . j4ede) #445=(flexp . j4edd) #446=(fleven? . j4edc) #447=(fldiv0-and-mod0 . j4edb) #448=(fldiv0 . j4eda) #449=(fldiv-and-mod . j4ed9) #450=(fldiv . j4ed8) #451=(fldenominator . j4ed7) #452=(flcos . j4ed6) #453=(flceiling . j4ed5) #454=(flatan . j4ed4) #455=(flasin . j4ed3) #456=(flacos . j4ed2) #457=(flabs . j4ed1) #458=(fl>? . j4ed0) #459=(fl>=? . j4ecf) #460=(fl=? . j4ece) #461=(fl<? . j4ecd) #462=(fl<=? . j4ecc) #463=(fl/ . j4ecb) #464=(fl- . j4eca) #465=(fl+ . j4ec9) #466=(fl* . j4ec8) #467=(fixnum->flonum . j4ec7) #468=(fxzero? . j4ec6) #469=(fxxor . j4ec5) #470=(fxrotate-bit-field . j4ec4) #471=(fxreverse-bit-field . j4ec3) #472=(fxpositive? . j4ec2) #473=(fxodd? . j4ec1) #474=(fxnot . j4ec0) #475=(fxnegative? . j4ebf) #476=(fxmod0 . j4ebe) #477=(fxmod . j4ebd) #478=(fxmin . j4ebc) #479=(fxmax . j4ebb) #480=(fxlength . j4eba) #481=(fxior . j4eb9) #482=(fxif . j4eb8) #483=(fxfirst-bit-set . j4eb7) #484=(fxeven? . j4eb6) #485=(fxdiv0-and-mod0 . j4eb5) #486=(fxdiv0 . j4eb4) #487=(fxdiv-and-mod . j4eb3) #488=(fxdiv . j4eb2) #489=(fxcopy-bit-field . j4eb1) #490=(fxcopy-bit . j4eb0) #491=(fxbit-set? . j4eaf) #492=(fxbit-field . j4eae) #493=(fxbit-count . j4ead) #494=(fxarithmetic-shift-right . j4eac) #495=(fxarithmetic-shift-left . j4eab) #496=(fxarithmetic-shift . j4eaa) #497=(fxand . j4ea9) #498=(fx>? . j4ea8) #499=(fx>=? . j4ea7) #500=(fx=? . j4ea6) #501=(fx<? . j4ea5) #502=(fx<=? . j4ea4) #503=(fx-/carry . j4ea3) #504=(fx- . j4ea2) #505=(fx+/carry . j4ea1) #506=(fx+ . j4ea0) #507=(fx*/carry . j4e9f) #508=(fx* . j4e9e) #509=(greatest-fixnum . j4e9d) #510=(least-fixnum . j4e9c) #511=(fixnum-width . j4e9b) #512=(fixnum? . j4e9a) #513=(bitwise-rotate-bit-field . j4e99) #514=(bitwise-reverse-bit-field . j4e98) #515=(bitwise-length . j4e97) #516=(bitwise-if . j4e96) #517=(bitwise-first-bit-set . j4e95) #518=(bitwise-copy-bit-field . j4e94) #519=(bitwise-copy-bit . j4e93) #520=(bitwise-bit-set? . j4e92) #521=(bitwise-bit-field . j4e91) #522=(bitwise-bit-count . j4e90) #523=(bitwise-xor . j4e8f) #524=(bitwise-ior . j4e8e) #525=(bitwise-and . j4e8d) #526=(bitwise-not . j4e8c) #527=(bitwise-arithmetic-shift-right . j4e8b) #528=(bitwise-arithmetic-shift-left . j4e8a) #529=(bitwise-arithmetic-shift . j4e89) #530=(zero? . j4e88) #531=(vector? . j4e87) #532=(vector-set! . j4e86) #533=(vector-ref . j4e85) #534=(vector-map . j4e84) #535=(vector-length . j4e83) #536=(vector-for-each . j4e82) #537=(vector-fill! . j4e81) #538=(vector->list . j4e80) #539=(vector . j4e7f) #540=(values . j4e7e) #541=(truncate . j4e7d) #542=(tan . j4e7c) #543=(symbol? . j4e7b) #544=(symbol=? . j4e7a) #545=(symbol->string . j4e79) #546=(substring . j4e78) #547=(string? . j4e77) #548=(string>? . j4e76) #549=(string>=? . j4e75) #550=(string=? . j4e74) #551=(string<? . j4e73) #552=(string<=? . j4e72) #553=(string-ref . j4e71) #554=(string-length . j4e70) #555=(string-for-each . j4e6f) #556=(string-copy . j4e6e) #557=(string-append . j4e6d) #558=(string->symbol . j4e6c) #559=(string->number . j4e6b) #560=(string->list . j4e6a) #561=(string . j4e69) #562=(sqrt . j4e68) #563=(sin . j4e67) #564=(round . j4e66) #565=(reverse . j4e65) #566=(real? . j4e64) #567=(real-valued? . j4e63) #568=(real-part . j4e62) #569=(rationalize . j4e61) #570=(rational? . j4e60) #571=(rational-valued? . j4e5f) #572=(procedure? . j4e5e) #573=(positive? . j4e5d) #574=(pair? . j4e5c) #575=(odd? . j4e5b) #576=(numerator . j4e5a) #577=(number? . j4e59) #578=(number->string . j4e58) #579=(null? . j4e57) #580=(not . j4e56) #581=(negative? . j4e55) #582=(nan? . j4e54) #583=(min . j4e53) #584=(max . j4e52) #585=(map . j4e51) #586=(make-vector . j4e50) #587=(make-string . j4e4f) #588=(make-rectangular . j4e4e) #589=(make-polar . j4e4d) #590=(magnitude . j4e4c) #591=(log . j4e4b) #592=(list? . j4e4a) #593=(list-tail . j4e49) #594=(list-ref . j4e48) #595=(list->vector . j4e47) #596=(list->string . j4e46) #597=(list . j4e45) #598=(length . j4e44) #599=(lcm . j4e43) #600=(integer? . j4e42) #601=(integer-valued? . j4e41) #602=(integer->char . j4e40) #603=(infinite? . j4e3f) #604=(inexact? . j4e3e) #605=(inexact . j4e3d) #606=(imag-part . j4e3c) #607=(gcd . j4e3b) #608=(for-each . j4e3a) #609=(floor . j4e39) #610=(finite? . j4e38) #611=(expt . j4e37) #612=(exp . j4e36) #613=(exact? . j4e35) #614=(exact-integer-sqrt . j4e34) #615=(exact . j4e33) #616=(even? . j4e32) #617=(error . j4e31) #618=(eqv? . j4e30) #619=(equal? . j4e2f) #620=(eq? . j4e2e) #621=(dynamic-wind . j4e2d) #622=(div0-and-mod0 . j4e2c) #623=(mod0 . j4e2b) #624=(div0 . j4e2a) #625=(div-and-mod . j4e29) #626=(mod . j4e28) #627=(div . j4e27) #628=(denominator . j4e26) #629=(cos . j4e25) #630=(cons . j4e24) #631=(complex? . j4e23) #632=(char? . j4e22) #633=(char>? . j4e21) #634=(char>=? . j4e20) #635=(char=? . j4e1f) #636=(char<? . j4e1e) #637=(char<=? . j4e1d) #638=(char->integer . j4e1c) #639=(ceiling . j4e1b) #640=(call-with-values . j4e1a) #641=(call/cc . j4e19) #642=(call-with-current-continuation . j4e18) #643=(cddddr . j4e17) #644=(cdddar . j4e16) #645=(cddadr . j4e15) #646=(cddaar . j4e14) #647=(cdaddr . j4e13) #648=(cdadar . j4e12) #649=(cdaadr . j4e11) #650=(cdaaar . j4e10) #651=(cadddr . j4e0f) #652=(caddar . j4e0e) #653=(cadadr . j4e0d) #654=(cadaar . j4e0c) #655=(caaddr . j4e0b) #656=(caadar . j4e0a) #657=(caaadr . j4e09) #658=(caaaar . j4e08) #659=(cdddr . j4e07) #660=(cddar . j4e06) #661=(cdadr . j4e05) #662=(cdaar . j4e04) #663=(caddr . j4e03) #664=(cadar . j4e02) #665=(caadr . j4e01) #666=(caaar . j4e00) #667=(cddr . j4dff) #668=(cdar . j4dfe) #669=(cadr . j4dfd) #670=(caar . j4dfc) #671=(cdr . j4dfb) #672=(car . j4dfa) #673=(boolean? . j4df9) #674=(boolean=? . j4df8) #675=(atan . j4df7) #676=(assertion-violation . j4df6) #677=(asin . j4df5) #678=(apply . j4df4) #679=(append . j4df3) #680=(angle . j4df2) #681=(acos . j4df1) #682=(abs . j4df0) #683=(/ . j4def) #684=(* . j4dee) #685=(- . j4ded) #686=(+ . j4dec) #687=(>= . j4deb) #688=(> . j4dea) #689=(= . j4de9) #690=(<= . j4de8) #691=(< . j4de7) #692=(library . j4de6) #693=(&no-nans . j4de5) #694=(&no-infinities . j4de4) #695=(&i/o-encoding . j4de3) #696=(&i/o-decoding . j4de2) #697=(&i/o-port . j4de1) #698=(&i/o-file-does-not-exist . j4de0) #699=(&i/o-file-already-exists . j4ddf) #700=(&i/o-file-is-read-only . j4dde) #701=(&i/o-file-protection . j4ddd) #702=(&i/o-filename . j4ddc) #703=(&i/o-invalid-position . j4ddb) #704=(&i/o-write . j4dda) #705=(&i/o-read . j4dd9) #706=(&i/o . j4dd8) #707=(&undefined . j4dd7) #708=(&syntax . j4dd6) #709=(&lexical . j4dd5) #710=(&implementation-restriction . j4dd4) #711=(&non-continuable . j4dd3) #712=(&who . j4dd2) #713=(&irritants . j4dd1) #714=(&assertion . j4dd0) #715=(&violation . j4dcf) #716=(&error . j4dce) #717=(&serious . j4dcd) #718=(&warning . j4dcc) #719=(&message . j4dcb) #720=(&condition . j4dca) #721=(define-condition-type . j4dc9) #722=(define-enumeration . j4dc8) #723=(define-record-type . j4dc7) #724=(parent-rtd . j4dc6) #725=(nongenerative . j4dc5) #726=(opaque . j4dc4) #727=(sealed . j4dc3) #728=(protocol . j4dc2) #729=(parent . j4dc1) #730=(immutable . j4dc0) #731=(mutable . j4dbf) #732=(fields . j4dbe) #733=(error-handling-mode . j4dbd) #734=(file-options . j4dbc) #735=(buffer-mode . j4dbb) #736=(eol-style . j4dba) #737=(guard . j4db9) #738=(unsyntax-splicing . j4db6) #739=(unsyntax . j4db5) #740=(unquote-splicing . j4db4) #741=(unquote . j4db3) #742=(_ . j4db2) #743=(else . j4db1) #744=(=> . j4db0) #745=(... . j4daf) #746=(assert . j4dae) #747=(endianness . j4dad) #748=(time . j4dab) #749=(do . j4daa) #750=(cond . j4da9) #751=(let* . j4da8) #752=(let*-values . j4da7) #753=(let-values . j4da6) #754=(identifier-syntax . j4da5) #755=(with-syntax . j4da4) #756=(quasisyntax . j4da3) #757=(quasiquote . j4da2) #758=(syntax-rules . j4da1) #759=(include . j4da0) #760=(record-constructor-descriptor . j4d9e) #761=(record-type-descriptor . j4d9d) #762=(case . j4d9c) #763=(unless . j4d9a) #764=(when . j4d99) #765=(or . j4d98) #766=(and . j4d97) #767=(if . j4d96) #768=(let . j4d95) #769=(letrec* . j4d94) #770=(letrec . j4d93) #771=(case-lambda . j4d91) #772=(lambda . j4d90) #773=(syntax . j4d8f) #774=(syntax-case . j4d8e) #775=(quote . j4d8d) #776=(letrec-syntax . j4d8b) #777=(let-syntax . j4d8a) #778=(set! . j4d89) #779=(import . j4d88) #780=(begin . j4d87) #781=(define-syntax . j4d85) #782=(define . j4d84)) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j5123 '(psyntax null-environment-5) '() '() '() '() '(#783=(make-promise . j4f87) #740# #741# #742# #743# #744# #745# #784=(delay . j4dac) #749# #750# #751# #757# #758# #762# #765# #766# #767# #768# #770# #772# #775# #776# #777# #778# #780# #781# #782#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j5124 '(psyntax scheme-report-environment-5) '() '() '() '() '(#94# #95# #96# #97# #98# #99# #100# #102# #103# #105# #108# #109# #110# #111# #112# #113# #114# #165# #166# #167# #168# #169# #170# #171# #172# #173# #174# #175# #176# #177# #178# #179# #181# #183# #184# #185# #186# #785=(scheme-report-environment . j3175) #786=(quotient . j4f8d) #787=(null-environment . j3173) #788=(remainder . j4f8c) #789=(modulo . j4f8b) #790=(inexact->exact . j4f8a) #791=(force . j4f89) #792=(exact->inexact . j4f88) #783# #274# #275# #276# #277# #283# #284# #286# #294# #295# #297# #307# #530# #531# #532# #533# #535# #537# #538# #539# #540# #541# #542# #543# #545# #546# #547# #548# #549# #550# #551# #552# #553# #554# #556# #557# #558# #559# #560# #561# #562# #563# #564# #565# #566# #568# #569# #570# #572# #573# #574# #575# #576# #577# #578# #580# #581# #583# #584# #585# #586# #587# #588# #589# #590# #591# #592# #593# #594# #595# #596# #597# #598# #599# #600# #602# #604# #606# #607# #608# #609# #611# #612# #613# #616# #618# #619# #620# #621# #628# #629# #630# #631# #632# #633# #634# #635# #636# #637# #638# #639# #640# #642# #643# #644# #645# #646# #647# #648# #649# #650# #651# #652# #653# #654# #655# #656# #657# #658# #659# #660# #661# #662# #663# #664# #665# #666# #667# #668# #669# #670# #671# #672# #673# #675# #677# #678# #679# #680# #681# #682# #683# #684# #685# #686# #687# #688# #689# #690# #691# #740# #741# #743# #744# #745# #784# #749# #750# #751# #757# #758# #762# #765# #766# #767# #768# #770# #772# #775# #776# #777# #778# #780# #781# #782#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j5125 '(psyntax modules) '() '() '() '() '(#793=(module . j4d86)) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j5126 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j5127 '(rnrs) '#794=(6) '() '() '() '(#1# #86# #87# #88# #89# #90# #91# #92# #93# #94# #95# #96# #97# #98# #99# #100# #101# #102# #103# #104# #105# #106# #107# #108# #109# #110# #111# #112# #113# #114# #115# #116# #117# #118# #119# #120# #121# #122# #123# #124# #125# #126# #127# #128# #129# #130# #131# #132# #133# #134# #135# #136# #137# #138# #139# #140# #141# #142# #143# #144# #145# #146# #147# #148# #149# #150# #151# #152# #153# #154# #155# #156# #157# #158# #159# #160# #161# #162# #163# #164# #165# #166# #167# #168# #169# #170# #171# #172# #173# #174# #175# #176# #177# #178# #179# #180# #181# #182# #183# #184# #185# #186# #187# #188# #189# #190# #191# #192# #193# #194# #195# #196# #197# #198# #199# #200# #201# #202# #203# #204# #205# #206# #207# #208# #209# #210# #211# #212# #213# #214# #215# #216# #217# #218# #219# #220# #221# #222# #223# #224# #225# #226# #227# #228# #229# #230# #231# #232# #233# #234# #235# #236# #237# #238# #239# #240# #241# #242# #243# #244# #245# #246# #247# #248# #249# #250# #251# #252# #253# #254# #255# #256# #257# #258# #259# #260# #261# #262# #263# #264# #265# #266# #267# #268# #269# #270# #271# #272# #273# #278# #279# #280# #281# #282# #283# #284# #285# #286# #287# #288# #289# #290# #291# #292# #293# #294# #295# #296# #297# #298# #299# #300# #301# #302# #303# #304# #305# #306# #309# #310# #311# #312# #313# #314# #315# #316# #317# #318# #319# #320# #321# #322# #323# #324# #325# #326# #327# #328# #329# #330# #331# #332# #333# #334# #335# #336# #337# #338# #339# #340# #341# #342# #343# #344# #345# #346# #347# #348# #349# #350# #351# #352# #353# #354# #355# #356# #357# #358# #359# #360# #361# #362# #363# #364# #365# #366# #367# #368# #369# #370# #371# #372# #373# #374# #375# #376# #377# #378# #379# #380# #381# #382# #383# #384# #385# #386# #387# #388# #389# #390# #391# #392# #393# #394# #395# #396# #397# #398# #399# #400# #401# #402# #403# #404# #405# #406# #407# #408# #409# #410# #411# #412# #413# #414# #415# #416# #417# #418# #419# #420# #421# #422# #423# #424# #425# #426# #427# #428# #429# #430# #431# #432# #433# #434# #435# #436# #437# #438# #439# #440# #441# #442# #443# #444# #445# #446# #447# #448# #449# #450# #451# #452# #453# #454# #455# #456# #457# #458# #459# #460# #461# #462# #463# #464# #465# #466# #467# #468# #469# #470# #471# #472# #473# #474# #475# #476# #477# #478# #479# #480# #481# #482# #483# #484# #485# #486# #487# #488# #489# #490# #491# #492# #493# #494# #495# #496# #497# #498# #499# #500# #501# #502# #503# #504# #505# #506# #507# #508# #509# #510# #511# #512# #513# #514# #515# #516# #517# #518# #519# #520# #521# #522# #523# #524# #525# #526# #527# #528# #529# #530# #531# #532# #533# #534# #535# #536# #537# #538# #539# #540# #541# #542# #543# #544# #545# #546# #547# #548# #549# #550# #551# #552# #553# #554# #555# #556# #557# #558# #559# #560# #561# #562# #563# #564# #565# #566# #567# #568# #569# #570# #571# #572# #573# #574# #575# #576# #577# #578# #579# #580# #581# #582# #583# #584# #585# #586# #587# #588# #589# #590# #591# #592# #593# #594# #595# #596# #597# #598# #599# #600# #601# #602# #603# #604# #605# #606# #607# #608# #609# #610# #611# #612# #613# #614# #615# #616# #617# #618# #619# #620# #621# #622# #623# #624# #625# #626# #627# #628# #629# #630# #631# #632# #633# #634# #635# #636# #637# #638# #639# #640# #641# #642# #643# #644# #645# #646# #647# #648# #649# #650# #651# #652# #653# #654# #655# #656# #657# #658# #659# #660# #661# #662# #663# #664# #665# #666# #667# #668# #669# #670# #671# #672# #673# #674# #675# #676# #677# #678# #679# #680# #681# #682# #683# #684# #685# #686# #687# #688# #689# #690# #691# #693# #694# #695# #696# #697# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707# #708# #709# #710# #711# #712# #713# #714# #715# #716# #717# #718# #719# #720# #721# #722# #723# #724# #725# #726# #727# #728# #729# #730# #731# #732# #733# #734# #735# #736# #737# #738# #739# #740# #741# #742# #743# #744# #745# #746# #747# #749# #750# #751# #752# #753# #754# #755# #756# #757# #758# #760# #761# #762# #763# #764# #765# #766# #767# #768# #769# #770# #771# #772# #773# #774# #775# #776# #777# #778# #780# #781# #782#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j5128 '(rnrs r5rs) '#794# '() '() '() '(#785# #786# #787# #788# #789# #790# #791# #792# #783# #784#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j5129 '(rnrs control) '#794# '() '() '() '(#749# #763# #764# #771#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j512a '(rnrs eval) '#794# '() '() '() '(#307# #308#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j512b '(rnrs mutable-pairs) '#794# '() '() '() '(#276# #277#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j512c '(rnrs mutable-strings) '#794# '() '() '() '(#274# #275#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j512d '(rnrs programs) '#794# '() '() '() '(#272# #273#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j512e '(rnrs syntax-case) '#794# '() '() '() '(#115# #116# #117# #118# #119# #120# #121# #329# #738# #739# #742# #745# #755# #756# #773# #774#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j512f '(rnrs files) '#794# '() '() '() '(#139# #140# #222# #223# #224# #225# #226# #227# #228# #229# #230# #231# #243# #244# #245# #246# #247# #248# #249# #250# #251# #252# #253# #254# #255# #697# #698# #699# #700# #701# #702# #703# #704# #705# #706#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j5130 '(rnrs sorting) '#794# '() '() '() '(#141# #142# #143#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j5131 '(rnrs base) '#794# '() '() '() '(#530# #531# #532# #533# #534# #535# #536# #537# #538# #539# #540# #541# #542# #543# #544# #545# #546# #547# #548# #549# #550# #551# #552# #553# #554# #555# #556# #557# #558# #559# #560# #561# #562# #563# #564# #565# #566# #567# #568# #569# #570# #571# #572# #573# #574# #575# #576# #577# #578# #579# #580# #581# #582# #583# #584# #585# #586# #587# #588# #589# #590# #591# #592# #593# #594# #595# #596# #597# #598# #599# #600# #601# #602# #603# #604# #605# #606# #607# #608# #609# #610# #611# #612# #613# #614# #615# #616# #617# #618# #619# #620# #621# #622# #623# #624# #625# #626# #627# #628# #629# #630# #631# #632# #633# #634# #635# #636# #637# #638# #639# #640# #641# #642# #643# #644# #645# #646# #647# #648# #649# #650# #651# #652# #653# #654# #655# #656# #657# #658# #659# #660# #661# #662# #663# #664# #665# #666# #667# #668# #669# #670# #671# #672# #673# #674# #675# #676# #677# #678# #679# #680# #681# #682# #683# #684# #685# #686# #687# #688# #689# #690# #691# #740# #741# #742# #743# #744# #745# #746# #750# #751# #752# #753# #754# #757# #758# #762# #765# #766# #767# #768# #769# #770# #772# #775# #776# #777# #778# #780# #781# #782#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j5132 '(rnrs lists) '#794# '() '() '() '(#278# #279# #280# #281# #282# #283# #284# #285# #286# #287# #288# #289# #290# #291# #292# #293# #294# #295# #296# #297#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j5133 '(rnrs io simple) '#794# '() '() '() '(#165# #166# #167# #168# #169# #170# #171# #172# #173# #174# #175# #176# #177# #178# #179# #180# #181# #182# #183# #184# #185# #186# #222# #223# #224# #225# #226# #227# #228# #229# #230# #231# #243# #244# #245# #246# #247# #248# #249# #250# #251# #252# #253# #254# #255# #697# #698# #699# #700# #701# #702# #703# #704# #705# #706#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j5134 '(rnrs bytevectors) '#794# '() '() '() '(#240# #359# #360# #361# #362# #363# #364# #365# #366# #367# #368# #369# #370# #371# #372# #373# #374# #375# #376# #377# #378# #379# #380# #381# #382# #383# #384# #385# #386# #387# #388# #389# #390# #391# #392# #393# #394# #395# #396# #397# #398# #399# #400# #401# #402# #403# #404# #405# #406# #407# #408# #409# #410# #411# #412# #413# #414# #415# #416# #417# #747#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j5135 '(rnrs unicode) '#794# '() '() '() '(#86# #87# #88# #89# #90# #91# #92# #93# #94# #95# #96# #97# #98# #99# #100# #101# #102# #103# #104# #105# #106# #107# #108# #109# #110# #111# #112# #113# #114#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j5136 '(rnrs exceptions) '#794# '() '() '() '(#304# #305# #306# #737# #743# #744#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j5137 '(rnrs arithmetic bitwise) '#794# '() '() '() '(#513# #514# #515# #516# #517# #518# #519# #520# #521# #522# #523# #524# #525# #526# #527# #528# #529#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j5138 '(rnrs arithmetic fixnums) '#794# '() '() '() '(#468# #469# #470# #471# #472# #473# #474# #475# #476# #477# #478# #479# #480# #481# #482# #483# #484# #485# #486# #487# #488# #489# #490# #491# #492# #493# #494# #495# #496# #497# #498# #499# #500# #501# #502# #503# #504# #505# #506# #507# #508# #509# #510# #511# #512#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j5139 '(rnrs arithmetic flonums) '#794# '() '() '() '(#418# #419# #420# #421# #422# #423# #424# #425# #426# #427# #428# #429# #430# #431# #432# #433# #434# #435# #436# #437# #438# #439# #440# #441# #442# #443# #444# #445# #446# #447# #448# #449# #450# #451# #452# #453# #454# #455# #456# #457# #458# #459# #460# #461# #462# #463# #464# #465# #466# #467# #693# #694#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j513a '(rnrs hashtables) '#794# '() '() '() '(#144# #145# #146# #147# #148# #149# #150# #151# #152# #153# #154# #155# #156# #157# #158# #159# #160# #161# #162# #163# #164#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j513b '(rnrs io ports) '#794# '() '() '() '(#180# #181# #182# #183# #184# #185# #186# #187# #188# #189# #190# #191# #192# #193# #194# #195# #196# #197# #198# #199# #200# #201# #202# #203# #204# #205# #206# #207# #208# #209# #210# #211# #212# #213# #214# #215# #216# #217# #218# #219# #220# #221# #222# #223# #224# #225# #226# #227# #228# #229# #230# #231# #232# #233# #234# #235# #236# #237# #238# #239# #241# #242# #243# #244# #245# #246# #247# #248# #249# #250# #251# #252# #253# #254# #255# #256# #257# #258# #259# #260# #261# #262# #263# #264# #265# #266# #267# #268# #269# #270# #271# #298# #299# #300# #301# #302# #303# #695# #696# #697# #698# #699# #700# #701# #702# #703# #704# #705# #706# #733# #734# #735# #736#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j513c '(rnrs enums) '#794# '() '() '() '(#309# #310# #311# #312# #313# #314# #315# #316# #317# #318# #319# #320# #321# #722#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j513d '(rnrs conditions) '#794# '() '() '() '(#322# #323# #324# #325# #326# #327# #328# #329# #330# #331# #332# #333# #334# #335# #336# #337# #338# #339# #340# #341# #342# #343# #344# #345# #346# #347# #348# #349# #350# #351# #352# #353# #354# #355# #356# #357# #358# #707# #708# #709# #710# #711# #712# #713# #714# #715# #716# #717# #718# #719# #720# #721#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j513e '(rnrs records inspection) '#794# '() '() '() '(#129# #130# #131# #132# #133# #134# #135# #136# #137# #138#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j513f '(rnrs records procedural) '#794# '() '() '() '(#122# #123# #124# #125# #126# #127# #128#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j5140 '(rnrs records syntactic) '#794# '() '() '() '(#723# #724# #725# #726# #727# #728# #729# #730# #731# #732# #760# #761#) '() values values '#f '#f '#t '#f) (j2ccd@j2b19@install-library 'j5141 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . j5121) (&no-nans-rtd . j5120) (&no-infinities-rcd . j511f) (&no-infinities-rtd . j511e) (&i/o-encoding-rcd . j511d) (&i/o-encoding-rtd . j511c) (&i/o-decoding-rcd . j511b) (&i/o-decoding-rtd . j511a) (&i/o-port-rcd . j5119) (&i/o-port-rtd . j5118) (&i/o-file-does-not-exist-rcd . j5117) (&i/o-file-does-not-exist-rtd . j5116) (&i/o-file-already-exists-rcd . j5115) (&i/o-file-already-exists-rtd . j5114) (&i/o-file-is-read-only-rcd . j5113) (&i/o-file-is-read-only-rtd . j5112) (&i/o-file-protection-rcd . j5111) (&i/o-file-protection-rtd . j5110) (&i/o-filename-rcd . j510f) (&i/o-filename-rtd . j510e) (&i/o-invalid-position-rcd . j510d) (&i/o-invalid-position-rtd . j510c) (&i/o-write-rcd . j510b) (&i/o-write-rtd . j510a) (&i/o-read-rcd . j5109) (&i/o-read-rtd . j5108) (&i/o-rcd . j5107) (&i/o-rtd . j5106) (&undefined-rcd . j5105) (&undefined-rtd . j5104) (&syntax-rcd . j5103) (&syntax-rtd . j5102) (&lexical-rcd . j5101) (&lexical-rtd . j5100) (&implementation-restriction-rcd . j50ff) (&implementation-restriction-rtd . j50fe) (&non-continuable-rcd . j50fd) (&non-continuable-rtd . j50fc) (&who-rcd . j50fb) (&who-rtd . j50fa) (&irritants-rcd . j50f9) (&irritants-rtd . j50f8) (&assertion-rcd . j50f7) (&assertion-rtd . j50f6) (&violation-rcd . j50f5) (&violation-rtd . j50f4) (&error-rcd . j50f3) (&error-rtd . j50f2) (&serious-rcd . j50f1) (&serious-rtd . j50f0) (&warning-rcd . j50ef) (&warning-rtd . j50ee) (&message-rcd . j50ed) (&message-rtd . j50ec) (&condition-rcd . j50eb) (&condition-rtd . j50ea) (syntax-error . j3195) (syntax-dispatch . j30b9) #795=(pretty-print . j50e9) #796=(eval-core . j50e8) #797=(set-symbol-value! . j50e7) #798=(symbol-value . j50e6) #799=(gensym . j50e5) #800=(void . j50e4) (load . j4c22) (interaction-environment . j31a7) (char-ready? . j50e3) #1# #801=(read-line . j50e1) #802=(gensym-prefix-set! . j50e0) #803=(ungensym . j50df) #2# #804=(assoc-ref . j50dd) #805=(print . j50dc) #3# #806=(host-os . j50da) #807=(library-path . j2af8) #808=(standard-library-path . j50d9) #809=(file-newer? . j50d8) #810=(stat-mtime . j50d7) #811=(write-to-file . j50d6) #812=(file->list . j50d5) #813=(file->string . j50d4) #814=(digit->integer . j50d3) #815=(call-with-string-input-port . j50d2) #816=(call-with-string-io . j50d1) #4# #817=(bytevector-for-each . j50cf) #818=(string->regexp . j50ce) #819=(rxmatch . j50cd) #820=(regexp-replace-all . j50cc) #821=(hashtable-for-each . j50cb) #822=(mosh-cache-dir . j28e2) #5# #823=(local-tz-offset . j50c9) #824=(microseconds . j50c8) #825=(directory-list . j50c7) #6# #7# #8# #9# #10# #11# #12# #13# #14# #15# #16# #17# #18# #19# #20# #21# #22# #23# #24# #25# #26# #27# #28# #29# #30# #31# #32# #33# #34# #35# #36# #37# #38# #39# #40# #41# #42# #43# #44# #45# #46# #47# #48# #49# #50# #51# #52# #53# #54# #55# #56# #826=(%ffi-free-c-callback-trampoline . j5093) #827=(%ffi-make-c-callback-trampoline . j5092) #828=(%ffi-free . j5091) #829=(%ffi-malloc . j5090) #57# #58# #59# #60# #61# #62# #63# #64# #65# #66# #830=(open-output-string . j5085) #831=(get-output-string . j5084) #832=(file-stat-ctime . j5083) #833=(file-stat-atime . j5082) #834=(file-stat-mtime . j5081) #835=(file-size-in-bytes . j5080) #836=(file-writable? . j507f) #837=(file-executable? . j507e) #838=(file-readable? . j507d) #839=(file-regular? . j507c) #840=(file-symbolic-link? . j507b) #841=(file-directory? . j507a) #842=(create-symbolic-link . j5079) #843=(rename-file . j5078) #844=(delete-directory . j5077) #845=(create-directory . j5076) #846=(create-mosh-cache-dir . j5075) #847=(get-environment-variables . j5074) #848=(current-exception-handler . j5073) #849=(get-environment-variable . j5072) #850=(join-wraps . j5071) #851=(id->real-label . j5070) #852=(same-marks? . j506f) #853=(same-marks*? . j506e) #854=(get-timeofday . j506d) #855=(get-command-line . j506c) #856=(sys-display . j506b) #67# #68# #69# #70# #71# #72# #73# #74# #75# #76# #77# #78# #79# #80# #81# #82# #83# #84# #85# #857=(mosh-executable-path . j5057) #858=(make-file-options . j5056) #859=(source-info . j5055) #860=(make-compiler-instruction . j5054) #861=(make-instruction . j5053) #862=(set-source-info! . j5052) #863=(bignum? . j5051) #864=(fast-equal? . j5050) #865=(fasl-read . j504f) #866=(fasl-write . j504e) #867=(time-usage . j504d) #868=(os-constant . j504c) #869=(disasm . j504b) #870=(make-parameter . j28e0) #871=(socket-port . j504a) #872=(socket-shutdown . j5049) #873=(socket-close . j5048) #874=(socket-send . j5047) #875=(socket-recv! . j5046) #876=(socket-recv . j5045) #877=(make-server-socket . j5044) #878=(make-client-socket . j5043) #879=(socket-accept . j5042) #880=(socket? . jassertion-error . j3193) #677# #678# #679# #680# #681# #682# #683# #684# #685# #686# #687# #688# #689# #690# #691# #692# #693# #694# #695# #696# #697# #698# #699# #700# #701# #702# #703# #704# #705# #706# #707# #708# #709# #710# #711# #712# #713# #714# #715# #716# #717# #718# #719# #720# #721# #722# #723# #724# #725# #726# #727# #728# #729# #730# #731# #732# #733# #734# #735# #736# #737# (trace-define . j4db8) (trace-lambda . j4db7) #738# #739# #740# #741# #742# #743# #744# #745# #746# #747# #784# #748# #749# #750# #751# #752# #753# #754# #755# #756# #757# #758# #759# (define-struct . j4d9f) #760# #761# #762# #881=(parameterize . j4d9b) #763# #764# #765# #766# #767# #768# #769# #770# (type-descriptor . j4d92) #771# #772# #773# #774# #775# (foreign-call . j4d8c) #776# #777# #778# #779# #780# #793# #781# #782#) '((j5121 core-prim . &no-nans-rcd) (j5120 core-prim . &no-nans-rtd) (j511f core-prim . &no-infinities-rcd) (j511e core-prim . &no-infinities-rtd) (j511d core-prim . &i/o-encoding-rcd) (j511c core-prim . &i/o-encoding-rtd) (j511b core-prim . &i/o-decoding-rcd) (j511a core-prim . &i/o-decoding-rtd) (j5119 core-prim . &i/o-port-rcd) (j5118 core-prim . &i/o-port-rtd) (j5117 core-prim . &i/o-file-does-not-exist-rcd) (j5116 core-prim . &i/o-file-does-not-exist-rtd) (j5115 core-prim . &i/o-file-already-exists-rcd) (j5114 core-prim . &i/o-file-already-exists-rtd) (j5113 core-prim . &i/o-file-is-read-only-rcd) (j5112 core-prim . &i/o-file-is-read-only-rtd) (j5111 core-prim . &i/o-file-protection-rcd) (j5110 core-prim . &i/o-file-protection-rtd) (j510f core-prim . &i/o-filename-rcd) (j510e core-prim . &i/o-filename-rtd) (j510d core-prim . &i/o-invalid-position-rcd) (j510c core-prim . &i/o-invalid-position-rtd) (j510b core-prim . &i/o-write-rcd) (j510a core-prim . &i/o-write-rtd) (j5109 core-prim . &i/o-read-rcd) (j5108 core-prim . &i/o-read-rtd) (j5107 core-prim . &i/o-rcd) (j5106 core-prim . &i/o-rtd) (j5105 core-prim . &undefined-rcd) (j5104 core-prim . &undefined-rtd) (j5103 core-prim . &syntax-rcd) (j5102 core-prim . &syntax-rtd) (j5101 core-prim . &lexical-rcd) (j5100 core-prim . &lexical-rtd) (j50ff core-prim . &implementation-restriction-rcd) (j50fe core-prim . &implementation-restriction-rtd) (j50fd core-prim . &non-continuable-rcd) (j50fc core-prim . &non-continuable-rtd) (j50fb core-prim . &who-rcd) (j50fa core-prim . &who-rtd) (j50f9 core-prim . &irritants-rcd) (j50f8 core-prim . &irritants-rtd) (j50f7 core-prim . &assertion-rcd) (j50f6 core-prim . &assertion-rtd) (j50f5 core-prim . &violation-rcd) (j50f4 core-prim . &violation-rtd) (j50f3 core-prim . &error-rcd) (j50f2 core-prim . &error-rtd) (j50f1 core-prim . &serious-rcd) (j50f0 core-prim . &serious-rtd) (j50ef core-prim . &warning-rcd) (j50ee core-prim . &warning-rtd) (j50ed core-prim . &message-rcd) (j50ec core-prim . &message-rtd) (j50eb core-prim . &condition-rcd) (j50ea core-prim . &condition-rtd) (j3195 core-prim . syntax-error) (j30b9 core-prim . syntax-dispatch) (j50e9 core-prim . pretty-print) (j50e8 core-prim . eval-core) (j50e7 core-prim . set-symbol-value!) (j50e6 core-prim . symbol-value) (j50e5 core-prim . gensym) (j50e4 core-prim . void) (j4c22 core-prim . load) (j31a7 core-prim . interaction-environment) (j50e3 core-prim . char-ready?) (j50e2 core-prim . regexp?) (j50e1 core-prim . read-line) (j50e0 core-prim . gensym-prefix-set!) (j50df core-prim . ungensym) (j50de core-prim . alist->eq-hash-table) (j50dd core-prim . assoc-ref) (j50dc core-prim . print) (j50db core-prim . format) (j50da core-prim . host-os) (j2af8 core-prim . library-path) (j50d9 core-prim . standard-library-path) (j50d8 core-prim . file-newer?) (j50d7 core-prim . stat-mtime) (j50d6 core-prim . write-to-file) (j50d5 core-prim . file->list) (j50d4 core-prim . file->string) (j50d3 core-prim . digit->integer) (j50d2 core-prim . call-with-string-input-port) (j50d1 core-prim . call-with-string-io) (j50d0 core-prim . string-split) (j50cf core-prim . bytevector-for-each) (j50ce core-prim . string->regexp) (j50cd core-prim . rxmatch) (j50cc core-prim . regexp-replace-all) (j50cb core-prim . hashtable-for-each) (j28e2 core-prim . mosh-cache-dir) (j50ca core-prim . call-process) (j50c9 core-prim . local-tz-offset) (j50c8 core-prim . microseconds) (j50c7 core-prim . directory-list) (j50c6 core-prim . set-current-directory!) (j50c5 core-prim . expand-path) (j50c4 core-prim . current-directory) (j50c3 core-prim . %spawn) (j50c2 core-prim . %waitpid) (j50c1 core-prim . simple-struct-name) (j50c0 core-prim . simple-struct-set!) (j50bf core-prim . simple-struct-ref) (j50be core-prim . make-simple-struct) (j50bd core-prim . simple-struct?) (j50bc core-prim . pointer-ref-c-int64) (j50bb core-prim . pointer-ref-c-int32) (j50ba core-prim . pointer-ref-c-int16) (j50b9 core-prim . pointer-ref-c-int8) (j50b8 core-prim . pointer-ref-c-uint64) (j50b7 core-prim . pointer-ref-c-uint32) (j50b6 core-prim . pointer-ref-c-uint16) (j50b5 core-prim . pointer-ref-c-uint8) (j50b4 core-prim . pointer-set-c-uint64!) (j50b3 core-prim . pointer-set-c-uint32!) (j50b2 core-prim . pointer-set-c-uint16!) (j50b1 core-prim . pointer-set-c-uint8!) (j50b0 core-prim . pointer-set-c-int64!) (j50af core-prim . pointer-set-c-int32!) (j50ae core-prim . pointer-set-c-int16!) (j50ad core-prim . pointer-set-c-int8!) (j50ac core-prim . pointer-set-c-pointer!) (j50ab core-prim . pointer-set-c-double!) (j50aa core-prim . pointer-set-c-float!) (j50a9 core-prim . pointer-set-c-long-long!) (j50a8 core-prim . pointer-set-c-long!) (j50a7 core-prim . pointer-set-c-int!) (j50a6 core-prim . pointer-set-c-short!) (j50a5 core-prim . pointer-set-c-char!) (j50a4 core-prim . pointer-ref-c-pointer) (j50a3 core-prim . pointer-ref-c-double) (j50a2 core-prim . pointer-ref-c-float) (j50a1 core-prim . pointer-ref-c-unsigned-long-long) (j50a0 core-prim . pointer-ref-c-signed-long-long) (j509f core-prim . pointer-ref-c-unsigned-long) (j509e core-prim . pointer-ref-c-signed-long) (j509d core-prim . pointer-ref-c-unsigned-int) (j509c core-prim . pointer-ref-c-signed-int) (j509b core-prim . pointer-ref-c-unsigned-short) (j509a core-prim . pointer-ref-c-signed-short) (j5099 core-prim . pointer-ref-c-unsigned-char) (j5098 core-prim . pointer-ref-c-signed-char) (j5097 core-prim . pointer->integer) (j5096 core-prim . integer->pointer) (j5095 core-prim . pointer?) (j5094 core-prim . shared-errno) (j5093 core-prim . %ffi-free-c-callback-trampoline) (j5092 core-prim . %ffi-make-c-callback-trampoline) (j5091 core-prim . %ffi-free) (j5090 core-prim . %ffi-malloc) (j508f core-prim . %ffi-supported?) (j508e core-prim . %ffi-pointer->string) (j508d core-prim . %ffi-call) (j508c core-prim . %ffi-lookup) (j508b core-prim . %ffi-open) (j508a core-prim . null-terminated-utf8->string) (j5089 core-prim . null-terminated-bytevector->string) (j5088 core-prim . %fork) (j5087 core-prim . %pipe) (j5086 core-prim . p) (j5085 core-prim . open-output-string) (j5084 core-prim . get-output-string) (j5083 core-prim . file-stat-ctime) (j5082 core-prim . file-stat-atime) (j5081 core-prim . file-stat-mtime) (j5080 core-prim . file-size-in-bytes) (j507f core-prim . file-writable?) (j507e core-prim . file-executable?) (j507d core-prim . file-readable?) (j507c core-prim . file-regular?) (j507b core-prim . file-symbolic-link?) (j507a core-prim . file-directory?) (j5079 core-prim . create-symbolic-link) (j5078 core-prim . rename-file) (j5077 core-prim . delete-directory) (j5076 core-prim . create-directory) (j5075 core-prim . create-mosh-cache-dir) (j5074 core-prim . get-environment-variables) (j5073 core-prim . current-exception-handler) (j5072 core-prim . get-environment-variable) (j5071 core-prim . join-wraps) (j5070 core-prim . id->real-label) (j506f core-prim . same-marks?) (j506e core-prim . same-marks*?) (j506d core-prim . get-timeofday) (j506c core-prim . get-command-line) (j506b core-prim . sys-display) (j506a core-prim . whereis) (j5069 core-prim . register) (j5068 core-prim . vm-join!) (j5067 core-prim . vm-set-value!) (j5066 core-prim . vm?) (j5065 core-prim . main-vm?) (j5064 core-prim . vm-eval) (j5063 core-prim . vm-self) (j5062 core-prim . vm-start!) (j5061 core-prim . make-vm) (j5060 core-prim . mutex-try-lock!) (j505f core-prim . mutex-unlock!) (j505e core-prim . mutex-lock!) (j505d core-prim . mutex?) (j505c core-prim . make-mutex) (j505b core-prim . condition-variable-notify-all!) (j505a core-prim . condition-variable-notify!) (j5059 core-prim . condition-variable-wait!) (j5058 core-prim . make-condition-variable) (j5057 core-prim . mosh-executable-path) (j5056 core-prim . make-file-options) (j5055 core-prim . source-info) (j5054 core-prim . make-compiler-instruction) (j5053 core-prim . make-instruction) (j5052 core-prim . set-source-info!) (j5051 core-prim . bignum?) (j5050 core-prim . fast-equal?) (j504f core-prim . fasl-read) (j504e core-prim . fasl-write) (j504d core-prim . time-usage) (j504c core-prim . os-constant) (j504b core-prim . disasm) (j28e0 core-prim . make-parameter) (j504a core-prim . socket-port) (j5049 core-prim . socket-shutdown) (j5048 core-prim . socket-close) (j5047 core-prim . socket-send) (j5046 core-prim . socket-recv!) (j5045 core-prim . socket-recv) (j5044 core-prim . make-server-socket) (j5043 core-prim . make-client-socket) (j5042 core-prim . socket-accept) (j5041 core-prim . socket?) (j5040 core-prim . string-upcase) (j503f core-prim . string-titlecase) (j503e core-prim . string-normalize-nfkd) (j503d core-prim . string-normalize-nfkc) (j503c core-prim . string-normalize-nfd) (j503b core-prim . string-normalize-nfc) (j503a core-prim . string-foldcase) (j5039 core-prim . string-downcase) (j5038 core-prim . string-ci>?) (j5037 core-prim . string-ci>=?) (j5036 core-prim . string-ci=?) (j5035 core-prim . string-ci<?) (j5034 core-prim . string-ci<=?) (j5033 core-prim . char-whitespace?) (j5032 core-prim . char-upper-case?) (j5031 core-prim . char-title-case?) (j5030 core-prim . char-numeric?) (j502f core-prim . char-lower-case?) (j502e core-prim . char-general-category) (j502d core-prim . char-upcase) (j502c core-prim . char-titlecase) (j502b core-prim . char-foldcase) (j502a core-prim . char-downcase) (j5029 core-prim . char-ci>?) (j5028 core-prim . char-ci>=?) (j5027 core-prim . char-ci=?) (j5026 core-prim . char-ci<?) (j5025 core-prim . char-ci<=?) (j5024 core-prim . char-alphabetic?) (j2ee4 core-prim . make-variable-transformer) (j319b core-prim . identifier?) (j3187 core-prim . generate-temporaries) (j3189 core-prim . free-identifier=?) (j319f core-prim . syntax->datum) (j319d core-prim . datum->syntax) (j318b core-prim . bound-identifier=?) (j5023 core-prim . record-type-descriptor?) (j5022 core-prim . record-predicate) (j5021 core-prim . record-mutator) (j5020 core-prim . record-constructor) (j501f core-prim . record-accessor) (j501e core-prim . make-record-type-descriptor) (j501d core-prim . make-record-constructor-descriptor) (j501c core-prim . record?) (j501b core-prim . record-type-uid) (j501a core-prim . record-type-sealed?) (j5019 core-prim . record-type-parent) (j5018 core-prim . record-type-opaque?) (j5017 core-prim . record-type-name) (j5016 core-prim . record-type-generative?) (j5015 core-prim . record-type-field-names) (j5014 core-prim . record-rtd) (j5013 core-prim . record-field-mutable?) (j5012 core-prim . delete-file) (j5011 core-prim . file-exists?) (j5010 core-prim . vector-sort!) (j500f core-prim . vector-sort) (j500e core-prim . list-sort) (j500d core-prim . symbol-hash) (j500c core-prim . string-ci-hash) (j500b core-prim . string-hash) (j500a core-prim . equal-hash) (j5009 core-prim . hashtable-equivalence-function) (j5008 core-prim . make-hashtable) (j5007 core-prim . hashtable-hash-function) (j5006 core-prim . make-eqv-hashtable) (j5005 core-prim . make-eq-hashtable) (j5004 core-prim . hashtable?) (j5003 core-prim . hashtable-update!) (j5002 core-prim . hashtable-size) (j5001 core-prim . hashtable-set!) (j5000 core-prim . hashtable-ref) (j4fff core-prim . hashtable-mutable?) (j4ffe core-prim . hashtable-keys) (j4ffd core-prim . hashtable-entries) (j4ffc core-prim . hashtable-delete!) (j4ffb core-prim . hashtable-copy) (j4ffa core-prim . hashtable-contains?) (j4ff9 core-prim . hashtable-clear!) (j4ff8 core-prim . call-with-output-file) (j4ff7 core-prim . call-with-input-file) (j4ff6 core-prim . write-char) (j4ff5 core-prim . write) (j4ff4 core-prim . with-output-to-file) (j4ff3 core-prim . with-input-from-file) (j4ff2 core-prim . read-char) (j4ff1 core-prim . read) (j4ff0 core-prim . peek-char) (j4fef core-prim . open-output-file) (j4fee core-prim . open-input-file) (j4fed core-prim . newline) (j4fec core-prim . display) (j4feb core-prim . close-output-port) (j4fea core-prim . close-input-port) (j4fe9 core-prim . eof-object?) (j4fe8 core-prim . eof-object) (j4fe7 core-prim . current-error-port) (j4fe6 core-prim . current-output-port) (j4fe5 core-prim . current-input-port) (j4fe4 core-prim . output-port?) (j4fe3 core-prim . input-port?) (j4fe2 core-prim . utf-8-codec) (j4fe1 core-prim . utf-16-codec) (j4fe0 core-prim . transcoder-error-handling-mode) (j4fdf core-prim . transcoder-eol-style) (j4fde core-prim . transcoder-codec) (j4fdd core-prim . transcoded-port) (j4fdc core-prim . textual-port?) (j4fdb core-prim . string->bytevector) (j4fda core-prim . standard-output-port) (j4fd9 core-prim . standard-input-port) (j4fd8 core-prim . standard-error-port) (j4fd7 core-prim . set-port-position!) (j4fd6 core-prim . put-u8) (j4fd5 core-prim . put-string) (j4fd4 core-prim . put-datum) (j4fd3 core-prim . put-char) (j4fd2 core-prim . put-bytevector) (j4fd1 core-prim . port?) (j4fd0 core-prim . port-transcoder) (j4fcf core-prim . port-position) (j4fce core-prim . port-has-set-port-position!?) (j4fcd core-prim . port-has-port-position?) (j4fcc core-prim . port-eof?) (j4fcb core-prim . output-port-buffer-mode) (j4fca core-prim . open-string-output-port) (j4fc9 core-prim . open-string-input-port) (j4fc8 core-prim . open-file-output-port) (j4fc7 core-prim . open-file-input/output-port) (j4fc6 core-prim . open-file-input-port) (j4fc5 core-prim . open-bytevector-output-port) (j4fc4 core-prim . open-bytevector-input-port) (j4fc3 core-prim . native-transcoder) (j4fc2 core-prim . native-eol-style) (j4fc1 core-prim . make-transcoder) (j4fc0 core-prim . latin-1-codec) (j4fbf core-prim . make-i/o-write-error) (j4fbe core-prim . make-i/o-read-error) (j4fbd core-prim . make-i/o-port-error) (j4fbc core-prim . make-i/o-invalid-position-error) (j4fbb core-prim . make-i/o-filename-error) (j4fba core-prim . make-i/o-file-protection-error) (j4fb9 core-prim . make-i/o-file-is-read-only-error) (j4fb8 core-prim . make-i/o-file-does-not-exist-error) (j4fb7 core-prim . make-i/o-file-already-exists-error) (j4fb6 core-prim . make-i/o-error) (j4fb5 core-prim . make-i/o-encoding-error) (j4fb4 core-prim . make-i/o-decoding-error) (j4fb3 core-prim . make-custom-textual-output-port) (j4fb2 core-prim . make-custom-textual-input/output-port) (j4fb1 core-prim . make-custom-textual-input-port) (j4fb0 core-prim . make-custom-binary-output-port) (j4faf core-prim . make-custom-binary-input/output-port) (j4fae core-prim . make-custom-binary-input-port) (j4fad core-prim . make-bytevector) (j4fac core-prim . lookahead-u8) (j4fab core-prim . lookahead-char) (j4faa core-prim . i/o-write-error?) (j4fa9 core-prim . i/o-read-error?) (j4fa8 core-prim . i/o-port-error?) (j4fa7 core-prim . i/o-invalid-position-error?) (j4fa6 core-prim . i/o-filename-error?) (j4fa5 core-prim . i/o-file-protection-error?) (j4fa4 core-prim . i/o-file-is-read-only-error?) (j4fa3 core-prim . i/o-file-does-not-exist-error?) (j4fa2 core-prim . i/o-file-already-exists-error?) (j4fa1 core-prim . i/o-error?) (j4fa0 core-prim . i/o-error-position) (j4f9f core-prim . i/o-error-port) (j4f9e core-prim . i/o-error-filename) (j4f9d core-prim . i/o-encoding-error?) (j4f9c core-prim . i/o-encoding-error-char) (j4f9b core-prim . i/o-decoding-error?) (j4f9a core-prim . get-u8) (j4f99 core-prim . get-string-n!) (j4f98 core-prim . get-string-n) (j4f97 core-prim . get-string-all) (j4f96 core-prim . get-line) (j4f95 core-prim . get-datum) (j4f94 core-prim . get-char) (j4f93 core-prim . get-bytevector-some) (j4f92 core-prim . get-bytevector-n!) (j4f91 core-prim . get-bytevector-n) (j4f90 core-prim . get-bytevector-all) (j4f8f core-prim . flush-output-port) (j4f8e core-prim . close-port) (j3175 core-prim . scheme-report-environment) (j4f8d core-prim . quotient) (j3173 core-prim . null-environment) (j4f8c core-prim . remainder) (j4f8b core-prim . modulo) (j4f8a core-prim . inexact->exact) (j4f89 core-prim . force) (j4f88 core-prim . exact->inexact) (j4f87 core-prim . make-promise) (j4f86 core-prim . exit) (j4c1c core-prim . command-line) (j4f85 core-prim . string-fill!) (j4f84 core-prim . string-set!) (j4f83 core-prim . set-cdr!) (j4f82 core-prim . set-car!) (j4f81 core-prim . remove) (j4f80 core-prim . remv) (j4f7f core-prim . remp) (j4f7e core-prim . remq) (j4f7d core-prim . partition) (j4f7c core-prim . memv) (j4f7b core-prim . memq) (j4f7a core-prim . memp) (j4f79 core-prim . member) (j4f78 core-prim . exists) (j4f77 core-prim . for-all) (j4f76 core-prim . fold-right) (j4f75 core-prim . fold-left) (j4f74 core-prim . find) (j4f73 core-prim . filter) (j4f72 core-prim . cons*) (j4f71 core-prim . assv) (j4f70 core-prim . assq) (j4f6f core-prim . assp) (j4f6e core-prim . assoc) (j4f6d core-prim . call-with-string-output-port) (j4f6c core-prim . call-with-port) (j4f6b core-prim . call-with-bytevector-output-port) (j4f6a core-prim . bytevector->string) (j4f69 core-prim . buffer-mode?) (j4f68 core-prim . binary-port?) (j4f67 core-prim . with-exception-handler) (j4f66 core-prim . raise-continuable) (j4f65 core-prim . raise) (j3179 core-prim . eval) (j3171 core-prim . environment) (j4f64 core-prim . make-enumeration) (j4f63 core-prim . enum-set=?) (j4f62 core-prim . enum-set-universe) (j4f61 core-prim . enum-set-union) (j4f60 core-prim . enum-set-subset?) (j4f5f core-prim . enum-set-projection) (j4f5e core-prim . enum-set-member?) (j4f5d core-prim . enum-set-intersection) (j4f5c core-prim . enum-set-indexer) (j4f5b core-prim . enum-set-difference) (j4f5a core-prim . enum-set-constructor) (j4f59 core-prim . enum-set-complement) (j4f58 core-prim . enum-set->list) (j4f57 core-prim . who-condition?) (j4f56 core-prim . warning?) (j4f55 core-prim . violation?) (j4f54 core-prim . undefined-violation?) (j4f53 core-prim . syntax-violation?) (j4f52 core-prim . syntax-violation-subform) (j4f51 core-prim . syntax-violation-form) (j3199 core-prim . syntax-violation) (j4f50 core-prim . simple-conditions) (j4f4f core-prim . serious-condition?) (j4f4e core-prim . non-continuable-violation?) (j4f4d core-prim . message-condition?) (j4f4c core-prim . make-who-condition) (j4f4b core-prim . make-warning) (j4f4a core-prim . make-violation) (j4f49 core-prim . make-undefined-violation) (j4f48 core-prim . make-syntax-violation) (j4f47 core-prim . make-serious-condition) (j4f46 core-prim . make-non-continuable-violation) (j4f45 core-prim . make-message-condition) (j4f44 core-prim . make-lexical-violation) (j4f43 core-prim . make-irritants-condition) (j4f42 core-prim . make-implementation-restriction-violation) (j4f41 core-prim . make-error) (j4f40 core-prim . make-assertion-violation) (j4f3f core-prim . lexical-violation?) (j4f3e core-prim . irritants-condition?) (j4f3d core-prim . implementation-restriction-violation?) (j4f3c core-prim . error?) (j4f3b core-prim . condition-who) (j4f3a core-prim . condition-predicate) (j4f39 core-prim . condition-message) (j4f38 core-prim . condition-irritants) (j4f37 core-prim . condition-accessor) (j4f36 core-prim . condition) (j4f35 core-prim . assertion-violation?) (j4f34 core-prim . condition?) (j4f33 core-prim . utf32->string) (j4f32 core-prim . utf16->string) (j4f31 core-prim . utf8->string) (j4f30 core-prim . uint-list->bytevector) (j4f2f core-prim . u8-list->bytevector) (j4f2e core-prim . string->utf8) (j4f2d core-prim . string->utf32) (j4f2c core-prim . string->utf16) (j4f2b core-prim . sint-list->bytevector) (j4f2a core-prim . native-endianness) (j4f29 core-prim . bytevector?) (j4f28 core-prim . bytevector=?) (j4f27 core-prim . bytevector-uint-set!) (j4f26 core-prim . bytevector-uint-ref) (j4f25 core-prim . bytevector-u8-set!) (j4f24 core-prim . bytevector-u8-ref) (j4f23 core-prim . bytevector-u64-set!) (j4f22 core-prim . bytevector-u64-ref) (j4f21 core-prim . bytevector-u64-native-set!) (j4f20 core-prim . bytevector-u64-native-ref) (j4f1f core-prim . bytevector-u32-set!) (j4f1e core-prim . bytevector-u32-ref) (j4f1d core-prim . bytevector-u32-native-set!) (j4f1c core-prim . bytevector-u32-native-ref) (j4f1b core-prim . bytevector-u16-set!) (j4f1a core-prim . bytevector-u16-ref) (j4f19 core-prim . bytevector-u16-native-set!) (j4f18 core-prim . bytevector-u16-native-ref) (j4f17 core-prim . bytevector-sint-set!) (j4f16 core-prim . bytevector-sint-ref) (j4f15 core-prim . bytevector-s8-set!) (j4f14 core-prim . bytevector-s8-ref) (j4f13 core-prim . bytevector-s64-set!) (j4f12 core-prim . bytevector-s64-ref) (j4f11 core-prim . bytevector-s64-native-set!) (j4f10 core-prim . bytevector-s64-native-ref) (j4f0f core-prim . bytevector-s32-set!) (j4f0e core-prim . bytevector-s32-ref) (j4f0d core-prim . bytevector-s32-native-set!) (j4f0c core-prim . bytevector-s32-native-ref) (j4f0b core-prim . bytevector-s16-set!) (j4f0a core-prim . bytevector-s16-ref) (j4f09 core-prim . bytevector-s16-native-set!) (j4f08 core-prim . bytevector-s16-native-ref) (j4f07 core-prim . bytevector-length) (j4f06 core-prim . bytevector-ieee-single-ref) (j4f05 core-prim . bytevector-ieee-single-set!) (j4f04 core-prim . bytevector-ieee-single-native-set!) (j4f03 core-prim . bytevector-ieee-single-native-ref) (j4f02 core-prim . bytevector-ieee-double-set!) (j4f01 core-prim . bytevector-ieee-double-ref) (j4f00 core-prim . bytevector-ieee-double-native-set!) (j4eff core-prim . bytevector-ieee-double-native-ref) (j4efe core-prim . bytevector-fill!) (j4efd core-prim . bytevector-copy!) (j4efc core-prim . bytevector-copy) (j4efb core-prim . bytevector->uint-list) (j4efa core-prim . bytevector->u8-list) (j4ef9 core-prim . bytevector->sint-list) (j4ef8 core-prim . no-nans-violation?) (j4ef7 core-prim . no-infinities-violation?) (j4ef6 core-prim . make-no-nans-violation) (j4ef5 core-prim . make-no-infinities-violation) (j4ef4 core-prim . real->flonum) (j4ef3 core-prim . flzero?) (j4ef2 core-prim . fltruncate) (j4ef1 core-prim . fltan) (j4ef0 core-prim . flsqrt) (j4eef core-prim . flsin) (j4eee core-prim . flround) (j4eed core-prim . flpositive?) (j4eec core-prim . flonum?) (j4eeb core-prim . flodd?) (j4eea core-prim . flnumerator) (j4ee9 core-prim . flnegative?) (j4ee8 core-prim . flnan?) (j4ee7 core-prim . flmod0) (j4ee6 core-prim . flmod) (j4ee5 core-prim . flmin) (j4ee4 core-prim . flmax) (j4ee3 core-prim . fllog) (j4ee2 core-prim . flinteger?) (j4ee1 core-prim . flinfinite?) (j4ee0 core-prim . flfloor) (j4edf core-prim . flfinite?) (j4ede core-prim . flexpt) (j4edd core-prim . flexp) (j4edc core-prim . fleven?) (j4edb core-prim . fldiv0-and-mod0) (j4eda core-prim . fldiv0) (j4ed9 core-prim . fldiv-and-mod) (j4ed8 core-prim . fldiv) (j4ed7 core-prim . fldenominator) (j4ed6 core-prim . flcos) (j4ed5 core-prim . flceiling) (j4ed4 core-prim . flatan) (j4ed3 core-prim . flasin) (j4ed2 core-prim . flacos) (j4ed1 core-prim . flabs) (j4ed0 core-prim . fl>?) (j4ecf core-prim . fl>=?) (j4ece core-prim . fl=?) (j4ecd core-prim . fl<?) (j4ecc core-prim . fl<=?) (j4ecb core-prim . fl/) (j4eca core-prim . fl-) (j4ec9 core-prim . fl+) (j4ec8 core-prim . fl*) (j4ec7 core-prim . fixnum->flonum) (j4ec6 core-prim . fxzero?) (j4ec5 core-prim . fxxor) (j4ec4 core-prim . fxrotate-bit-field) (j4ec3 core-prim . fxreverse-bit-field) (j4ec2 core-prim . fxpositive?) (j4ec1 core-prim . fxodd?) (j4ec0 core-prim . fxnot) (j4ebf core-prim . fxnegative?) (j4ebe core-prim . fxmod0) (j4ebd core-prim . fxmod) (j4ebc core-prim . fxmin) (j4ebb core-prim . fxmax) (j4eba core-prim . fxlength) (j4eb9 core-prim . fxior) (j4eb8 core-prim . fxif) (j4eb7 core-prim . fxfirst-bit-set) (j4eb6 core-prim . fxeven?) (j4eb5 core-prim . fxdiv0-and-mod0) (j4eb4 core-prim . fxdiv0) (j4eb3 core-prim . fxdiv-and-mod) (j4eb2 core-prim . fxdiv) (j4eb1 core-prim . fxcopy-bit-field) (j4eb0 core-prim . fxcopy-bit) (j4eaf core-prim . fxbit-set?) (j4eae core-prim . fxbit-field) (j4ead core-prim . fxbit-count) (j4eac core-prim . fxarithmetic-shift-right) (j4eab core-prim . fxarithmetic-shift-left) (j4eaa core-prim . fxarithmetic-shift) (j4ea9 core-prim . fxand) (j4ea8 core-prim . fx>?) (j4ea7 core-prim . fx>=?) (j4ea6 core-prim . fx=?) (j4ea5 core-prim . fx<?) (j4ea4 core-prim . fx<=?) (j4ea3 core-prim . fx-/carry) (j4ea2 core-prim . fx-) (j4ea1 core-prim . fx+/carry) (j4ea0 core-prim . fx+) (j4e9f core-prim . fx*/carry) (j4e9e core-prim . fx*) (j4e9d core-prim . greatest-fixnum) (j4e9c core-prim . least-fixnum) (j4e9b core-prim . fixnum-width) (j4e9a core-prim . fixnum?) (j4e99 core-prim . bitwise-rotate-bit-field) (j4e98 core-prim . bitwise-reverse-bit-field) (j4e97 core-prim . bitwise-length) (j4e96 core-prim . bitwise-if) (j4e95 core-prim . bitwise-first-bit-set) (j4e94 core-prim . bitwise-copy-bit-field) (j4e93 core-prim . bitwise-copy-bit) (j4e92 core-prim . bitwise-bit-set?) (j4e91 core-prim . bitwise-bit-field) (j4e90 core-prim . bitwise-bit-count) (j4e8f core-prim . bitwise-xor) (j4e8e core-prim . bitwise-ior) (j4e8d core-prim . bitwise-and) (j4e8c core-prim . bitwise-not) (j4e8b core-prim . bitwise-arithmetic-shift-right) (j4e8a core-prim . bitwise-arithmetic-shift-left) (j4e89 core-prim . bitwise-arithmetic-shift) (j4e88 core-prim . zero?) (j4e87 core-prim . vector?) (j4e86 core-prim . vector-set!) (j4e85 core-prim . vector-ref) (j4e84 core-prim . vector-map) (j4e83 core-prim . vector-length) (j4e82 core-prim . vector-for-each) (j4e81 core-prim . vector-fill!) (j4e80 core-prim . vector->list) (j4e7f core-prim . vector) (j4e7e core-prim . values) (j4e7d core-prim . truncate) (j4e7c core-prim . tan) (j4e7b core-prim . symbol?) (j4e7a core-prim . symbol=?) (j4e79 core-prim . symbol->string) (j4e78 core-prim . substring) (j4e77 core-prim . string?) (j4e76 core-prim . string>?) (j4e75 core-prim . string>=?) (j4e74 core-prim . string=?) (j4e73 core-prim . string<?) (j4e72 core-prim . string<=?) (j4e71 core-prim . string-ref) (j4e70 core-prim . string-length) (j4e6f core-prim . string-for-each) (j4e6e core-prim . string-copy) (j4e6d core-prim . string-append) (j4e6c core-prim . string->symbol) (j4e6b core-prim . string->number) (j4e6a core-prim . string->list) (j4e69 core-prim . string) (j4e68 core-prim . sqrt) (j4e67 core-prim . sin) (j4e66 core-prim . round) (j4e65 core-prim . reverse) (j4e64 core-prim . real?) (j4e63 core-prim . real-valued?) (j4e62 core-prim . real-part) (j4e61 core-prim . rationalize) (j4e60 core-prim . rational?) (j4e5f core-prim . rational-valued?) (j4e5e core-prim . procedure?) (j4e5d core-prim . positive?) (j4e5c core-prim . pair?) (j4e5b core-prim . odd?) (j4e5a core-prim . numerator) (j4e59 core-prim . number?) (j4e58 core-prim . number->string) (j4e57 core-prim . null?) (j4e56 core-prim . not) (j4e55 core-prim . negative?) (j4e54 core-prim . nan?) (j4e53 core-prim . min) (j4e52 core-prim . max) (j4e51 core-prim . map) (j4e50 core-prim . make-vector) (j4e4f core-prim . make-string) (j4e4e core-prim . make-rectangular) (j4e4d core-prim . make-polar) (j4e4c core-prim . magnitude) (j4e4b core-prim . log) (j4e4a core-prim . list?) (j4e49 core-prim . list-tail) (j4e48 core-prim . list-ref) (j4e47 core-prim . list->vector) (j4e46 core-prim . list->string) (j4e45 core-prim . list) (j4e44 core-prim . length) (j4e43 core-prim . lcm) (j4e42 core-prim . integer?) (j4e41 core-prim . integer-valued?) (j4e40 core-prim . integer->char) (j4e3f core-prim . infinite?) (j4e3e core-prim . inexact?) (j4e3d core-prim . inexact) (j4e3c core-prim . imag-part) (j4e3b core-prim . gcd) (j4e3a core-prim . for-each) (j4e39 core-prim . floor) (j4e38 core-prim . finite?) (j4e37 core-prim . expt) (j4e36 core-prim . exp) (j4e35 core-prim . exact?) (j4e34 core-prim . exact-integer-sqrt) (j4e33 core-prim . exact) (j4e32 core-prim . even?) (j4e31 core-prim . error) (j4e30 core-prim . eqv?) (j4e2f core-prim . equal?) (j4e2e core-prim . eq?) (j4e2d core-prim . dynamic-wind) (j4e2c core-prim . div0-and-mod0) (j4e2b core-prim . mod0) (j4e2a core-prim . div0) (j4e29 core-prim . div-and-mod) (j4e28 core-prim . mod) (j4e27 core-prim . div) (j4e26 core-prim . denominator) (j4e25 core-prim . cos) (j4e24 core-prim . cons) (j4e23 core-prim . complex?) (j4e22 core-prim . char?) (j4e21 core-prim . char>?) (j4e20 core-prim . char>=?) (j4e1f core-prim . char=?) (j4e1e core-prim . char<?) (j4e1d core-prim . char<=?) (j4e1c core-prim . char->integer) (j4e1b core-prim . ceiling) (j4e1a core-prim . call-with-values) (j4e19 core-prim . call/cc) (j4e18 core-prim . call-with-current-continuation) (j4e17 core-prim . cddddr) (j4e16 core-prim . cdddar) (j4e15 core-prim . cddadr) (j4e14 core-prim . cddaar) (j4e13 core-prim . cdaddr) (j4e12 core-prim . cdadar) (j4e11 core-prim . cdaadr) (j4e10 core-prim . cdaaar) (j4e0f core-prim . cadddr) (j4e0e core-prim . caddar) (j4e0d core-prim . cadadr) (j4e0c core-prim . cadaar) (j4e0b core-prim . caaddr) (j4e0a core-prim . caadar) (j4e09 core-prim . caaadr) (j4e08 core-prim . caaaar) (j4e07 core-prim . cdddr) (j4e06 core-prim . cddar) (j4e05 core-prim . cdadr) (j4e04 core-prim . cdaar) (j4e03 core-prim . caddr) (j4e02 core-prim . cadar) (j4e01 core-prim . caadr) (j4e00 core-prim . caaar) (j4dff core-prim . cddr) (j4dfe core-prim . cdar) (j4dfd core-prim . cadr) (j4dfc core-prim . caar) (j4dfb core-prim . cdr) (j4dfa core-prim . car) (j4df9 core-prim . boolean?) (j4df8 core-prim . boolean=?) (j4df7 core-prim . atan) (j4df6 core-prim . assertion-violation) (j3193 core-prim . assertion-error) (j4df5 core-prim . asin) (j4df4 core-prim . apply) (j4df3 core-prim . append) (j4df2 core-prim . angle) (j4df1 core-prim . acos) (j4df0 core-prim . abs) (j4def core-prim . /) (j4dee core-prim . *) (j4ded core-prim . -) (j4dec core-prim . +) (j4deb core-prim . >=) (j4dea core-prim . >) (j4de9 core-prim . =) (j4de8 core-prim . <=) (j4de7 core-prim . <) (j4de6 core-prim . library) (j4de5 $core-rtd &no-nans-rtd &no-nans-rcd) (j4de4 $core-rtd &no-infinities-rtd &no-infinities-rcd) (j4de3 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (j4de2 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (j4de1 $core-rtd &i/o-port-rtd &i/o-port-rcd) (j4de0 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (j4ddf $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (j4dde $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (j4ddd $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (j4ddc $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (j4ddb $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (j4dda $core-rtd &i/o-write-rtd &i/o-write-rcd) (j4dd9 $core-rtd &i/o-read-rtd &i/o-read-rcd) (j4dd8 $core-rtd &i/o-rtd &i/o-rcd) (j4dd7 $core-rtd &undefined-rtd &undefined-rcd) (j4dd6 $core-rtd &syntax-rtd &syntax-rcd) (j4dd5 $core-rtd &lexical-rtd &lexical-rcd) (j4dd4 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (j4dd3 $core-rtd &non-continuable-rtd &non-continuable-rcd) (j4dd2 $core-rtd &who-rtd &who-rcd) (j4dd1 $core-rtd &irritants-rtd &irritants-rcd) (j4dd0 $core-rtd &assertion-rtd &assertion-rcd) (j4dcf $core-rtd &violation-rtd &violation-rcd) (j4dce $core-rtd &error-rtd &error-rcd) (j4dcd $core-rtd &serious-rtd &serious-rcd) (j4dcc $core-rtd &warning-rtd &warning-rcd) (j4dcb $core-rtd &message-rtd &message-rcd) (j4dca $core-rtd &condition-rtd &condition-rcd) (j4dc9 macro . define-condition-type) (j4dc8 macro . define-enumeration) (j4dc7 macro . define-record-type) (j4dc6 macro . parent-rtd) (j4dc5 macro . nongenerative) (j4dc4 macro . opaque) (j4dc3 macro . sealed) (j4dc2 macro . protocol) (j4dc1 macro . parent) (j4dc0 macro . immutable) (j4dbf macro . mutable) (j4dbe macro . fields) (j4dbd macro . error-handling-mode) (j4dbc macro . file-options) (j4dbb macro . buffer-mode) (j4dba macro . eol-style) (j4db9 macro . guard) (j4db8 macro . trace-define) (j4db7 macro . trace-lambda) (j4db6 macro . unsyntax-splicing) (j4db5 macro . unsyntax) (j4db4 macro . unquote-splicing) (j4db3 macro . unquote) (j4db2 macro . _) (j4db1 macro . else) (j4db0 macro . =>) (j4daf macro . ...) (j4dae macro . assert) (j4dad macro . endianness) (j4dac macro . delay) (j4dab macro . time) (j4daa macro . do) (j4da9 macro . cond) (j4da8 macro . let*) (j4da7 macro . let*-values) (j4da6 macro . let-values) (j4da5 macro . identifier-syntax) (j4da4 macro . with-syntax) (j4da3 macro . quasisyntax) (j4da2 macro . quasiquote) (j4da1 macro . syntax-rules) (j4da0 macro . include) (j4d9f macro . define-struct) (j4d9e core-macro . record-constructor-descriptor) (j4d9d core-macro . record-type-descriptor) (j4d9c macro . case) (j4d9b macro . parameterize) (j4d9a macro . unless) (j4d99 macro . when) (j4d98 core-macro . or) (j4d97 core-macro . and) (j4d96 core-macro . if) (j4d95 core-macro . let) (j4d94 core-macro . letrec*) (j4d93 core-macro . letrec) (j4d92 core-macro . type-descriptor) (j4d91 core-macro . case-lambda) (j4d90 core-macro . lambda) (j4d8f core-macro . syntax) (j4d8e core-macro . syntax-case) (j4d8d core-macro . quote) (j4d8c core-macro . foreign-call) (j4d8b letrec-syntax) (j4d8a let-syntax) (j4d89 set!) (j4d88 import) (j4d87 begin) (j4d86 module) (j4d85 define-syntax) (j4d84 define)) values values '#f '#f '#f '#f) (j2ccd@j2b19@install-library 'j5142 '(psyntax system $bootstrap) '() '() '() '() '(#795# #796# #797# #798# #799# #800#) '() values values '#f '#f '#f '#f) (j2ccd@j2b19@install-library 'j5143 '(mosh) '() '() '() '() '(#797# #798# #1# #801# #803# #2# #804# #805# #3# #806# #807# #808# #809# #810# #814# #815# #816# #4# #817# #818# #819# #820# #821# #6# #7# #8# #66# #854# #855# #856# #67# #68# #69# #70# #71# #72# #73# #74# #75# #76# #77# #78# #79# #80# #81# #82# #83# #84# #85# #857# #858# #859# #860# #861# #862# #863# #864# #865# #866# #867# #868# #748# #759#) '() values values '#f '#f '#f '#f) (j2ccd@j2b19@install-library 'j5144 '(system) '() '() '() '() '(#802# #811# #812# #813# #822# #5# #823# #824# #825# #7# #9# #10# #11# #12# #13# #14# #15# #16# #17# #18# #19# #20# #21# #22# #23# #24# #25# #26# #27# #28# #29# #30# #31# #32# #33# #34# #35# #36# #37# #38# #39# #40# #41# #42# #43# #44# #45# #46# #47# #48# #49# #50# #51# #52# #53# #54# #55# #56# #826# #827# #828# #829# #57# #58# #59# #60# #61# #62# #63# #64# #65# #830# #831# #832# #833# #834# #835# #836# #837# #838# #839# #840# #841# #842# #843# #844# #845# #846# #847# #848# #849# #850# #851# #852# #853# #869# #870# #871# #872# #873# #874# #875# #876# #877# #878# #879# #880# #881#) '() values values '#f '#f '#f '#f)))
(begin (set! j4c07@ref (unspecified)) (set! j4c09@x* (unspecified)) (set! j4c0b@add-library-path! (unspecified)) (set! j4c0d@parse-and-add-library-path (unspecified)) (set! j4c0f@for-each-with-index (unspecified)) (set! j4c11@rpad (unspecified)) (set! j4c13@condition-printer (unspecified)) (set! j4c15@record->field-alist (unspecified)) (set! j4c17@map-with-index (unspecified)) (set! j4c19@repl (unspecified)) (set! j4c1b@trace-printer (unspecified)) (set! j4c1d@command-line (unspecified)) (set! j4c1f@local-library-path (unspecified)) (set! j4c21@load/args (unspecified)) (set! j4c23@load (unspecified)) (set! j4c25@ironscheme-build (unspecified)) (set! j4c27@eval-top-level (unspecified)) (set! j4c29@compile-system-libraries (unspecified)) (set! j4c2b@compile (unspecified)) (set! j4c2d@compile->closure (unspecified)) (set! j4c2f@pre-compile-r6rs-file (unspecified)) (set! j4c31@load-r6rs-top-level (unspecified)) (set! j4c33@load-r6rs-top-level-sexp (unspecified)) (set! j4c35@prefix-inc (unspecified)) (set! j4c37@prefix-inc! (unspecified)) (set! j4c07@ref (lambda (j4c72@rtd j4c73@i j4c74@x) (let ((j4c78@val ((record-accessor j4c72@rtd j4c73@i) j4c74@x))) (if (symbol? j4c78@val) (ungensym j4c78@val) j4c78@val)))) (set! j4d6a@j4c07@ref j4c07@ref) (set! j4c09@x* '()) (set! j4d6b@j4c09@x* j4c09@x*) (set! j4c0b@add-library-path! (lambda (j4c7a@path) (j2cbd@j2af9@library-path (append (j2cbd@j2af9@library-path) (list j4c7a@path))))) (set! j4d6c@j4c0b@add-library-path! j4c0b@add-library-path!) (set! j4c0d@parse-and-add-library-path (lambda (j4c7c@paths j4c7d@message) (letrec* ((j4c81@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((j4c82@t j4c7c@paths)) (if j4c82@t ((lambda (j4c84@paths) (for-each (lambda (j4c86@path) (if (file-exists? j4c86@path) (j4c0b@add-library-path! (expand-path j4c86@path)) (format (current-error-port) j4c7d@message j4c86@path))) (string-split j4c84@paths j4c81@separator))) j4c82@t) (void)))))) (set! j4d6d@j4c0d@parse-and-add-library-path j4c0d@parse-and-add-library-path) (set! j4c0f@for-each-with-index (lambda (j4c88@proc j4c89@lst) (letrec ((j4c8c@loop (lambda (j4c8e@i j4c8f@lst) (if (null? j4c8f@lst) (if '#f '#f (void)) (begin (j4c88@proc j4c8e@i (car j4c8f@lst)) (j4c8c@loop (+ j4c8e@i '1) (cdr j4c8f@lst))))))) (j4c8c@loop '1 j4c89@lst)))) (set! j4d6e@j4c0f@for-each-with-index j4c0f@for-each-with-index) (set! j4c11@rpad (lambda (j4c92@str j4c93@pad j4c94@n) (let ((j4c98@rest (- j4c94@n (string-length (format '"~a" j4c92@str))))) (let j4c9e@loop ((j4c9a@rest j4c98@rest) (j4c9b@ret (format '"~a" j4c92@str))) (if (<= j4c9a@rest '0) j4c9b@ret (j4c9e@loop (- j4c9a@rest '1) (string-append j4c9b@ret j4c93@pad))))))) (set! j4d6f@j4c11@rpad j4c11@rpad) (set! j4c13@condition-printer (lambda (j4ca0@e j4ca1@port) (letrec* ((j4ca5@max-condition-len (apply max (map (lambda (j4cb6@c) (string-length (symbol->string (record-type-name (record-rtd j4cb6@c))))) (simple-conditions j4ca0@e))))) (begin (display '" Condition components:\n" j4ca1@port) (j4c0f@for-each-with-index (lambda (j4ca6@i j4ca7@x) (let ((j4caa@rtd (record-rtd j4ca7@x)) (j4cab@fields-alist (j4c15@record->field-alist j4ca7@x))) (begin (format j4ca1@port '" ~d. ~a" j4ca6@i (j4c11@rpad (symbol->string (record-type-name j4caa@rtd)) '" " j4ca5@max-condition-len)) (if (null? j4cab@fields-alist) (newline j4ca1@port) (void)) (let j4cb2@loop ((j4cae@first '#t) (j4caf@fields-alist j4cab@fields-alist)) (if (null? j4caf@fields-alist) '() (let ((j4cb4@field (car j4caf@fields-alist))) (begin (if (not j4cae@first) (display (j4c11@rpad '"" '" " (+ '4 j4ca5@max-condition-len)) j4ca1@port) (void)) (display '"       " j4ca1@port) (display (car j4cb4@field) j4ca1@port) (display '": " j4ca1@port) (write (cdr j4cb4@field) j4ca1@port) (newline j4ca1@port) (j4cb2@loop '#f (cdr j4caf@fields-alist))))))))) (simple-conditions j4ca0@e)))))) (set! j4d70@j4c13@condition-printer j4c13@condition-printer) (set! j4c15@record->field-alist (lambda (j4cb8@r) (letrec* ((j4cbb@ref (lambda (j4cc6@rtd j4cc7@i j4cc8@x) (let ((j4ccc@val ((record-accessor j4cc6@rtd j4cc7@i) j4cc8@x))) (if (symbol? j4ccc@val) (ungensym j4ccc@val) j4ccc@val))))) (let j4cc0@loop ((j4cbc@ret '()) (j4cbd@rtd (record-rtd j4cb8@r))) (if j4cbd@rtd (j4cc0@loop (append j4cbc@ret (j4c17@map-with-index (lambda (j4cc2@i j4cc3@field) (cons j4cc3@field (j4cbb@ref j4cbd@rtd j4cc2@i j4cb8@r))) (vector->list (record-type-field-names j4cbd@rtd)))) (record-type-parent j4cbd@rtd)) j4cbc@ret))))) (set! j4d71@j4c15@record->field-alist j4c15@record->field-alist) (set! j4c17@map-with-index (lambda (j4cce@proc j4ccf@lst) (let j4cd8@loop ((j4cd2@i '0) (j4cd3@lst j4ccf@lst) (j4cd4@ret '())) (if (null? j4cd3@lst) (reverse j4cd4@ret) (j4cd8@loop (+ j4cd2@i '1) (cdr j4cd3@lst) (cons (j4cce@proc j4cd2@i (car j4cd3@lst)) j4cd4@ret)))))) (set! j4d72@j4c17@map-with-index j4c17@map-with-index) (set! j4c19@repl (lambda j4cda@x (letrec* ((j4cdd@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (j4ce0@j4cde) (lambda () (with-exception-handler (lambda (j4ce2@e) ((call/cc (lambda (j4ce4@j4cdf) (j4ce0@j4cde (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? j4ce2@e) (j4c13@condition-printer j4ce2@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" j4ce2@e))) (j4ce4@j4cdf (lambda () (raise-continuable j4ce2@e)))))))))) (lambda () (let j4cea@loop ((j4ce6@line (get-line (current-input-port))) (j4ce7@accum '"")) (letrec* ((j4ced@parentheses-ok? (lambda (j4cf4@text) (let j4cfc@loop ((j4cf6@chars (string->list j4cf4@text)) (j4cf7@p0 '0) (j4cf8@p1 '0)) (if (null? j4cf6@chars) (= '0 j4cf7@p0 j4cf8@p1) (let ((j4cfe@t (car j4cf6@chars))) (if (memv j4cfe@t '(#\()) (j4cfc@loop (cdr j4cf6@chars) (+ j4cf7@p0 '1) j4cf8@p1) (if (memv j4cfe@t '(#\))) (j4cfc@loop (cdr j4cf6@chars) (- j4cf7@p0 '1) j4cf8@p1) (if (memv j4cfe@t '(#\[)) (j4cfc@loop (cdr j4cf6@chars) j4cf7@p0 (+ j4cf8@p1 '1)) (if (memv j4cfe@t '(#\])) (j4cfc@loop (cdr j4cf6@chars) j4cf7@p0 (- j4cf8@p1 '1)) (j4cfc@loop (cdr j4cf6@chars) j4cf7@p0 j4cf8@p1)))))))))) (j4cef@eval-string-print (lambda (j4cf2@text) (if (not (or (string=? '"\n" j4cf2@text) (= '0 (string-length j4cf2@text)))) (write (j4c27@eval-top-level (call-with-port (open-string-input-port j4cf2@text) read))) (void))))) (if (eof-object? j4ce6@line) (begin (j4cef@eval-string-print j4ce7@accum) (exit)) (let ((j4cf0@current (string-append j4ce7@accum j4ce6@line))) (if (j4ced@parentheses-ok? j4cf0@current) (j4cef@eval-string-print j4cf0@current) (j4cea@loop (get-line (current-input-port)) j4cf0@current)))))))))))) (newline) (j4cdd@rec))))) (j4cdd@rec)))) (set! j4d73@j4c19@repl j4c19@repl) (set! j4c1b@trace-printer (j2a03@j28e1@make-parameter write)) (set! j4d74@j4c1b@trace-printer j4c1b@trace-printer) (set! j4c1d@command-line (j2a03@j28e1@make-parameter (get-command-line))) (set! j4d75@j4c1d@command-line j4c1d@command-line) (set! j4c1f@local-library-path (lambda (j4d00@filename) (j2cbd@j2af9@library-path))) (set! j4d76@j4c1f@local-library-path j4c1f@local-library-path) (set! j4c21@load/args (lambda (j4d02@filename . j4d04@args) (begin (apply j4c31@load-r6rs-top-level j4d02@filename 'load j4d04@args) (void)))) (set! j4d77@j4c21@load/args j4c21@load/args) (set! j4c23@load (lambda (j4d06@filename) (begin (apply j4c31@load-r6rs-top-level j4d06@filename 'load (j4c1d@command-line)) (void)))) (set! j4d78@j4c23@load j4c23@load) (set! j4c25@ironscheme-build (lambda () (j4c23@load '"ironscheme-buildscript.ss"))) (set! j4d79@j4c25@ironscheme-build j4c25@ironscheme-build) (set! j4c27@eval-top-level (lambda (j4d08@x) (j4be4@j317a@eval j4d08@x (j4bfb@j31a8@interaction-environment)))) (set! j4d7a@j4c27@eval-top-level j4c27@eval-top-level) (set! j4c29@compile-system-libraries (lambda () (j4c27@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! j4d7b@j4c29@compile-system-libraries j4c29@compile-system-libraries) (set! j4c2b@compile (lambda (j4d0a@filename) (j4c31@load-r6rs-top-level j4d0a@filename 'compile))) (set! j4d7c@j4c2b@compile j4c2b@compile) (set! j4c2d@compile->closure (lambda (j4d0c@filename) (j4c31@load-r6rs-top-level j4d0c@filename 'closure))) (set! j4d7d@j4c2d@compile->closure j4c2d@compile->closure) (set! j4c2f@pre-compile-r6rs-file (lambda (j4d0e@filename) (j4c31@load-r6rs-top-level j4d0e@filename 'compile))) (set! j4d7e@j4c2f@pre-compile-r6rs-file j4c2f@pre-compile-r6rs-file) (set! j4c31@load-r6rs-top-level (lambda (j4d10@filename j4d11@how . j4d14@args) (begin (j2cbd@j2af9@library-path (j4c1f@local-library-path j4d10@filename)) (let ((j4d16@x* (with-input-from-file j4d10@filename (lambda () (let j4d18@f () (let ((j4d1a@x (j29f5@j28c5@read-annotated))) (if (eof-object? j4d1a@x) '() (cons j4d1a@x (j4d18@f))))))))) (let ((j4d1c@t j4d11@how)) (if (memv j4d1c@t '(closure)) (j4bfa@j31a6@pre-compile-r6rs-top-level j4d16@x*) (if (memv j4d1c@t '(load)) (begin (j4c1d@command-line (cons j4d10@filename (car j4d14@args))) (j2a04@j28e3@mosh-cache-dir (create-mosh-cache-dir)) (if (j2a04@j28e3@mosh-cache-dir) (gensym-prefix-set! (j4c37@prefix-inc! (string-append (j2a04@j28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (j4d1e@file) ((call/cc (lambda (j4d22@j4d20) (lambda () (with-exception-handler (lambda (j4d24@c) ((call/cc (lambda (j4d26@j4d21) (j4d22@j4d20 (lambda () (if '#t '#t (j4d26@j4d21 (lambda () (raise-continuable j4d24@c)))))))))) (lambda () (delete-file (string-append (j2a04@j28e3@mosh-cache-dir) '"/" j4d1e@file))))))))) (directory-list (j2a04@j28e3@mosh-cache-dir))) (void)) (let ((j4d28@compiled (j4bf9@j31a4@compile-r6rs-top-level j4d16@x*))) (begin (if (and (j2a04@j28e3@mosh-cache-dir) (not (symbol-value '%disable-acc))) (j2cc1@j2b01@serialize-all j29fe@j28d7@serialize-library j2a5a@j2a13@compile-core-expr) (void)) (j4d28@compiled)))) (if (memv j4d1c@t '(compile)) (begin (j4bf9@j31a4@compile-r6rs-top-level j4d16@x*) (j2cc1@j2b01@serialize-all j29fe@j28d7@serialize-library j2a5a@j2a13@compile-core-expr)) (if '#f '#f (void)))))))))) (set! j4d7f@j4c31@load-r6rs-top-level j4c31@load-r6rs-top-level) (set! j4c33@load-r6rs-top-level-sexp (lambda (j4d2a@import-spec j4d2b@thunk) (let ((j4d36@j4d2f j2cbd@j2af9@library-path) (j4d37@j4d31 j2a04@j28e3@mosh-cache-dir) (j4d38@j4d33 (j4c1f@local-library-path '"")) (j4d39@j4d35 (create-mosh-cache-dir))) (let ((j4d3e@swap (lambda () (begin (let ((j4d40@t (j4d36@j4d2f))) (begin (j4d36@j4d2f j4d38@j4d33) (set! j4d38@j4d33 j4d40@t))) (let ((j4d42@t (j4d37@j4d31))) (begin (j4d37@j4d31 j4d39@j4d35) (set! j4d39@j4d35 j4d42@t))))))) (dynamic-wind j4d3e@swap (lambda () (begin (if (j2a04@j28e3@mosh-cache-dir) (gensym-prefix-set! (j4c37@prefix-inc! (string-append (j2a04@j28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((j4d48@j4d45 j4c1d@command-line) (j4d49@j4d47 '())) (let ((j4d4c@swap (lambda () (let ((j4d4e@t (j4d48@j4d45))) (begin (j4d48@j4d45 j4d49@j4d47) (set! j4d49@j4d47 j4d4e@t)))))) (dynamic-wind j4d4c@swap (lambda () ((j4bf9@j31a4@compile-r6rs-top-level (list (cons 'import j4d2a@import-spec) (list j4d2b@thunk))))) j4d4c@swap))))) j4d3e@swap))))) (set! j4d80@j4c33@load-r6rs-top-level-sexp j4c33@load-r6rs-top-level-sexp) (set! j4c35@prefix-inc (lambda (j4d50@prefix-string) (let ((j4d52@prefix (symbol->string j4d50@prefix-string))) (let ((j4d54@len (string-length j4d52@prefix))) (let j4d5c@loop ((j4d56@i (- j4d54@len '1)) (j4d57@carry? '#t) (j4d58@accum '())) (if (< j4d56@i '0) (string->symbol (list->string (if j4d57@carry? (cons '#\a j4d58@accum) j4d58@accum))) (if j4d57@carry? (let ((j4d5e@next-integer (+ '1 (char->integer (string-ref j4d52@prefix j4d56@i))))) (if (= j4d5e@next-integer '123) (j4d5c@loop (- j4d56@i '1) '#f (cons '#\A j4d58@accum)) (if (= j4d5e@next-integer '91) (j4d5c@loop (- j4d56@i '1) '#t (cons '#\a j4d58@accum)) (j4d5c@loop (- j4d56@i '1) '#f (cons (integer->char j4d5e@next-integer) j4d58@accum))))) (j4d5c@loop (- j4d56@i '1) '#f (cons (string-ref j4d52@prefix j4d56@i) j4d58@accum))))))))) (set! j4d81@j4c35@prefix-inc j4c35@prefix-inc) (set! j4c37@prefix-inc! (lambda (j4d60@file) (begin (if (not (file-exists? j4d60@file)) (call-with-output-file j4d60@file (lambda (j4d62@port) (write 'd j4d62@port))) (void)) (let ((j4d64@prefix (call-with-input-file j4d60@file read))) (if (main-vm?) (let ((j4d66@next-prefix (j4c35@prefix-inc j4d64@prefix))) (begin (call-with-port (open-file-output-port j4d60@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (j4d68@port) (write j4d66@next-prefix j4d68@port))) j4d64@prefix)) j4d64@prefix))))) (set! j4d82@j4c37@prefix-inc! j4c37@prefix-inc!) (begin (j2cc2@j2b03@current-precompiled-library-loader j29ff@j28d9@load-serialized-library) (set-symbol-value! 'load j4c23@load) (set-symbol-value! 'pre-compile-r6rs-file j4c2f@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs j4c27@eval-top-level) (set-symbol-value! 'int-env-syms j4bdb@j3168@interaction-environment-symbols) (set-symbol-value! 'expanded2core j2a59@j2a11@expanded->core) (set-symbol-value! 'trace-printer j4c1b@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (j4c38@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list j4c38@c))))) (j4c0d@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (j4c0d@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (j4c0b@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (j4c0b@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (j4c0b@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((j4c3a@prefix (lambda (j4c3c@ext j4c3d@ls) (append (map (lambda (j4c40@x) (string-append j4c3c@ext j4c40@x)) j4c3d@ls) j4c3d@ls)))) (j2cbe@j2afb@library-extensions (j4c3a@prefix '".mosh" (j2cbe@j2afb@library-extensions)))) (current-exception-handler (lambda (j4c42@c) (begin (if (condition? j4c42@c) (j4c13@condition-printer j4c42@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" j4c42@c)) j4c42@c))) (if ((call/cc (lambda (j4c46@j4c44) (lambda () (with-exception-handler (lambda (j4c48@c) ((call/cc (lambda (j4c4a@j4c45) (j4c46@j4c44 (lambda () (if '#t '#f (j4c4a@j4c45 (lambda () (raise-continuable j4c48@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (j4c33@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (j4c1d@command-line)) (let ((j4c54@j4c4d j4c1d@command-line) (j4c55@j4c4f j2a04@j28e3@mosh-cache-dir) (j4c56@j4c51 '()) (j4c57@j4c53 (create-mosh-cache-dir))) (let ((j4c5c@swap (lambda () (begin (let ((j4c5e@t (j4c54@j4c4d))) (begin (j4c54@j4c4d j4c56@j4c51) (set! j4c56@j4c51 j4c5e@t))) (let ((j4c60@t (j4c55@j4c4f))) (begin (j4c55@j4c4f j4c57@j4c53) (set! j4c57@j4c53 j4c60@t))))))) (dynamic-wind j4c5c@swap (lambda () (begin (if (j2a04@j28e3@mosh-cache-dir) (gensym-prefix-set! (j4c37@prefix-inc! (string-append (j2a04@j28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (j4c19@repl))) j4c5c@swap))) (begin (j2cbd@j2af9@library-path (j4c1f@local-library-path (car (j4c1d@command-line)))) (set! j4c09@x* (with-input-from-file (car (j4c1d@command-line)) (lambda () (let j4c62@f () (let ((j4c64@x (j29f5@j28c5@read-annotated))) (if (eof-object? j4c64@x) '() (cons j4c64@x (j4c62@f)))))))) (j4c1d@command-line (cons (car (j4c1d@command-line)) (cdr (j4c1d@command-line)))) (j2a04@j28e3@mosh-cache-dir (create-mosh-cache-dir)) (if (j2a04@j28e3@mosh-cache-dir) (gensym-prefix-set! (j4c37@prefix-inc! (string-append (j2a04@j28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (j4c66@file) ((call/cc (lambda (j4c6a@j4c68) (lambda () (with-exception-handler (lambda (j4c6c@c) ((call/cc (lambda (j4c6e@j4c69) (j4c6a@j4c68 (lambda () (if '#t '#t (j4c6e@j4c69 (lambda () (raise-continuable j4c6c@c)))))))))) (lambda () (delete-file (string-append (j2a04@j28e3@mosh-cache-dir) '"/" j4c66@file))))))))) (directory-list (j2a04@j28e3@mosh-cache-dir))) (void)) (let ((j4c70@compiled (j4bf9@j31a4@compile-r6rs-top-level j4c09@x*))) (begin (if (and (j2a04@j28e3@mosh-cache-dir) (not (symbol-value '%disable-acc))) (j2cc1@j2b01@serialize-all j29fe@j28d7@serialize-library j2a5a@j2a13@compile-core-expr) (void)) (j4c70@compiled))))))))
