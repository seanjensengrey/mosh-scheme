;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! r58d@library-file-path->cache-path (unspecified)) (set! r58f@read-annotated (unspecified)) (set! r591@annotation-stripped (unspecified)) (set! r593@annotation? (unspecified)) (set! r595@annotation-source (unspecified)) (set! r597@annotation-expression (unspecified)) (set! r599@scm->fasl (unspecified)) (set! r59b@fasl-save (unspecified)) (set! r59d@fasl-load (unspecified)) (set! r59f@verbose? (unspecified)) (set! r5a1@serialize-library (unspecified)) (set! r5a3@load-serialized-library (unspecified)) (set! r5a5@make-record-printer (unspecified)) (set! r5a7@compile-core (unspecified)) (set! r5a9@read-library-source-file (unspecified)) (set! r5ab@make-parameter (unspecified)) (set! r5ad@mosh-cache-dir (unspecified)) (set! r643@file-options-spec (unspecified)) (set! r58d@library-file-path->cache-path (lambda (r644@x) (call-with-values (lambda () (open-string-output-port)) (lambda (r64a@r647 r64b@r649) (let ((r64e@extract r64b@r649) (r64f@p r64a@r647)) (letrec* ((r653@display-hex (lambda (r65c@n) (if (<= '0 r65c@n '9) (display r65c@n r64f@p) (display (integer->char (+ (char->integer '#\a) (- r65c@n '10))) r64f@p))))) (begin (let r656@f ((r654@ls (string-split r644@x '#\/))) (if (not (null? r654@ls)) (begin (display '"_" r64f@p) (for-each (lambda (r658@c) (if (or (char<=? '#\a r658@c '#\z) (char<=? '#\A r658@c '#\Z) (char<=? '#\0 r658@c '#\9) (memv r658@c '(#\- #\. #\_ #\~))) (display r658@c r64f@p) (begin (display '"%" r64f@p) (let ((r65a@n (char->integer r658@c))) (begin (r653@display-hex (quotient r65a@n '16)) (r653@display-hex (remainder r65a@n '16))))))) (string->list (car r654@ls))) (r656@f (cdr r654@ls))) (void))) (r64e@extract)))))))) (set! r6be@r58d@library-file-path->cache-path r58d@library-file-path->cache-path) (set! r58f@read-annotated read) (set! r6bf@r58f@read-annotated r58f@read-annotated) (set! r591@annotation-stripped (lambda (r65e@x) (r597@annotation-expression r65e@x))) (set! r6c0@r591@annotation-stripped r591@annotation-stripped) (set! r593@annotation? (lambda (r660@x) (source-info r660@x))) (set! r6c1@r593@annotation? r593@annotation?) (set! r595@annotation-source (lambda (r662@x) (source-info r662@x))) (set! r6c2@r595@annotation-source r595@annotation-source) (set! r597@annotation-expression (lambda (r664@x) (if (annotated-pair? r664@x) (cons (car r664@x) (cdr r664@x)) (if (procedure? r664@x) (set-source-info! r664@x '#f) r664@x)))) (set! r6c3@r597@annotation-expression r597@annotation-expression) (set! r599@scm->fasl (lambda (r666@filename) (string-append (r5ad@mosh-cache-dir) '"/" (r58d@library-file-path->cache-path r666@filename) '".mosh-fasl"))) (set! r6c4@r599@scm->fasl r599@scm->fasl) (set! r59b@fasl-save (lambda (r668@filename r669@obj) (call-with-port (open-file-output-port r668@filename) (lambda (r66c@port) ((symbol-value 'fasl-write!) r669@obj r66c@port))))) (set! r6c5@r59b@fasl-save r59b@fasl-save) (set! r59d@fasl-load (lambda (r66e@filename) (call-with-port (open-file-input-port r66e@filename) (symbol-value 'fasl-read!)))) (set! r6c6@r59d@fasl-load r59d@fasl-load) (set! r59f@verbose? (symbol-value '%verbose)) (set! r6c7@r59f@verbose? r59f@verbose?) (set! r5a1@serialize-library (lambda (r670@filename r671@obj) (begin (if r59f@verbose? (format (current-error-port) '"serialize-library ~a\n..." r670@filename) (void)) (let ((r674@expanded2core (symbol-value 'expanded2core))) (let ((r676@compile (symbol-value 'compile-w/o-halt))) (let ((r678@code r671@obj)) (let ((r67a@pivot (cddddr (cddddr r678@code)))) (let ((r67c@visit (r676@compile (r674@expanded2core (car r67a@pivot))))) (begin (set-car! r67a@pivot r67c@visit) (let ((r67e@pivot (cdr r67a@pivot))) (let ((r680@invoke (r676@compile (r674@expanded2core (car r67e@pivot))))) (set-car! r67e@pivot r680@invoke))))))))) (let ((r682@fasl-file (r599@scm->fasl r670@filename))) (begin (if (file-exists? r682@fasl-file) (delete-file r682@fasl-file) (void)) ((call/cc (lambda (r686@r684) (lambda () (with-exception-handler (lambda (r688@c) ((call/cc (lambda (r68a@r685) (r686@r684 (lambda () (if '#t (begin (if r59f@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" r670@filename) (void)) (if (file-exists? r682@fasl-file) (delete-file r682@fasl-file) (void)) '#f) (r68a@r685 (lambda () (raise-continuable r688@c)))))))))) (lambda () (r59b@fasl-save r682@fasl-file r671@obj)))))))))))) (set! r6c8@r5a1@serialize-library r5a1@serialize-library) (set! r5a3@load-serialized-library (lambda (r68c@filename r68d@obj) (and (r5ad@mosh-cache-dir) (let ((r690@fasl-file (r599@scm->fasl r68c@filename))) (if (and (file-exists? r690@fasl-file) ((symbol-value 'file-newer?) r690@fasl-file r68c@filename)) (let ((r692@expanded2core (symbol-value 'expanded2core))) (let ((r694@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((r696@code (r59d@fasl-load r690@fasl-file))) (let ((r698@pivot (cddddr (cddddr r696@code)))) (let ((r69a@visit (car r698@pivot))) (let ((r69c@visit-proc (lambda () (r694@eval-compiled-core r69a@visit)))) (begin (set-car! r698@pivot r69c@visit-proc) (let ((r69e@pivot (cdr r698@pivot))) (let ((r6a0@invoke (car r69e@pivot))) (begin (set-car! r69e@pivot (lambda () (r694@eval-compiled-core r6a0@invoke))) (apply r68d@obj r696@code))))))))))) '#f))))) (set! r6c9@r5a3@load-serialized-library r5a3@load-serialized-library) (set! r5a5@make-record-printer (lambda (r6a2@name r6a3@printer) (lambda r6a6@x (begin (display '"record printer") (for-each display r6a6@x))))) (set! r6ca@r5a5@make-record-printer r5a5@make-record-printer) (set! r5a7@compile-core (lambda r6a8@x (apply error 'comile-core '"not implementated" r6a8@x))) (set! r6cb@r5a7@compile-core r5a7@compile-core) (set! r5a9@read-library-source-file (lambda (r6aa@file-name) (with-input-from-file r6aa@file-name r58f@read-annotated))) (set! r6cc@r5a9@read-library-source-file r5a9@read-library-source-file) (set! r5ab@make-parameter (lambda r6ba (let ((r6bb (length r6ba))) (if (= r6bb '1) (apply (lambda (r6ac@x) (r5ab@make-parameter r6ac@x (lambda (r6ae@x) r6ae@x))) r6ba) (if (= r6bb '2) (apply (lambda (r6b0@x r6b1@fender) (let ((r6b4@x (r6b1@fender r6b0@x))) (lambda r6b8 (let ((r6b9 (length r6b8))) (if (= r6b9 '0) (apply (lambda () r6b4@x) r6b8) (if (= r6b9 '1) (apply (lambda (r6b6@v) (set! r6b4@x (r6b1@fender r6b6@v))) r6b8) (error 'apply '"invalid arg count"))))))) r6ba) (error 'apply '"invalid arg count")))))) (set! r6cd@r5ab@make-parameter r5ab@make-parameter) (set! r5ad@mosh-cache-dir (r5ab@make-parameter '#f)) (set! r6ce@r5ad@mosh-cache-dir r5ad@mosh-cache-dir) (set! r643@file-options-spec (lambda (r6bc@x) r6bc@x)) (set! r6cf@r643@file-options-spec r643@file-options-spec) (void))
(begin (set! r6d5@current-primitive-locations (unspecified)) (set! r6d7@mutable? (unspecified)) (set! r6d9@rewriter (unspecified)) (set! r6db@expanded->core (unspecified)) (set! r6dd@compile-core-expr (unspecified)) (set! r6df@pretty-print (unspecified)) (set! r6e1@compile-core-expr-to-port (unspecified)) (set! r6d5@current-primitive-locations (r6cd@r5ab@make-parameter (lambda (r6e2@x) '#f) (lambda (r6e4@p) r6e4@p))) (set! r720@r6d5@current-primitive-locations r6d5@current-primitive-locations) (set! r6d7@mutable? (lambda (r6e6@x) (or (pair? r6e6@x) (vector? r6e6@x) (hashtable? r6e6@x)))) (set! r721@r6d7@mutable? r6d7@mutable?) (set! r6d9@rewriter (lambda (r6e8@quote-hack?) (letrec* ((r6eb@f (lambda (r6ec@x) (if (pair? r6ec@x) (let ((r6ee@t (car r6ec@x))) (if (memv r6ee@t '(quote)) (if (and r6e8@quote-hack? (r6d7@mutable? (cadr r6ec@x))) (let ((r6f0@g (gensym))) (begin (set-symbol-value! r6f0@g (cadr r6ec@x)) r6f0@g)) r6ec@x) (if (memv r6ee@t '(case-lambda)) (cons 'case-lambda (map (lambda (r6f2@x) (cons (car r6f2@x) (map r6eb@f (cdr r6f2@x)))) (cdr r6ec@x))) (if (memv r6ee@t '(lambda)) (cons* 'lambda (cadr r6ec@x) (map r6eb@f (cddr r6ec@x))) (if (memv r6ee@t '(letrec)) (let ((r6f4@bindings (cadr r6ec@x)) (r6f5@body* (cddr r6ec@x))) (let ((r6f8@lhs* (map car r6f4@bindings)) (r6f9@rhs* (map cadr r6f4@bindings))) (cons* 'letrec (map list r6f8@lhs* (map r6eb@f r6f9@rhs*)) (map r6eb@f r6f5@body*)))) (if (memv r6ee@t '(letrec*)) (let ((r6fc@bindings (cadr r6ec@x)) (r6fd@body* (cddr r6ec@x))) (let ((r700@lhs* (map car r6fc@bindings)) (r701@rhs* (map cadr r6fc@bindings))) (cons* 'letrec* (map list r700@lhs* (map r6eb@f r701@rhs*)) (map r6eb@f r6fd@body*)))) (if (memv r6ee@t '(library-letrec*)) (let ((r704@name (cadr r6ec@x)) (r705@x (cdr r6ec@x))) (let ((r708@bindings (cadr r705@x)) (r709@body* (cddr r705@x))) (let ((r70c@lhs* (map car r708@bindings)) (r70d@lhs** (map cadr r708@bindings)) (r70e@rhs* (map caddr r708@bindings))) (cons* 'library-letrec* r704@name (map list r70c@lhs* r70d@lhs** (map r6eb@f r70e@rhs*)) (map r6eb@f r709@body*))))) (if (memv r6ee@t '(begin)) (cons 'begin (map r6eb@f (cdr r6ec@x))) (if (memv r6ee@t '(set!)) (list 'set! (cadr r6ec@x) (r6eb@f (caddr r6ec@x))) (if (memv r6ee@t '(primitive)) (let ((r712@op (cadr r6ec@x))) (let ((r714@t ((r6d5@current-primitive-locations) r712@op))) (if r714@t ((lambda (r716@loc) r716@loc) r714@t) r712@op))) (if (memv r6ee@t '(define)) r6ec@x (if (list? r6ec@x) (map r6eb@f r6ec@x) (error 'rewrite '"invalid form ~s ~s" r6ec@x (list? r6ec@x)))))))))))))) r6ec@x)))) r6eb@f))) (set! r722@r6d9@rewriter r6d9@rewriter) (set! r6db@expanded->core (lambda (r718@x) ((r6d9@rewriter '#f) r718@x))) (set! r723@r6db@expanded->core r6db@expanded->core) (set! r6dd@compile-core-expr (lambda (r71a@x) ((r6d9@rewriter '#f) r71a@x))) (set! r724@r6dd@compile-core-expr r6dd@compile-core-expr) (set! r6df@pretty-print write) (set! r725@r6df@pretty-print r6df@pretty-print) (set! r6e1@compile-core-expr-to-port (lambda (r71c@x r71d@p) (r6df@pretty-print ((r6d9@rewriter '#f) r71c@x) r71d@p))) (set! r726@r6e1@compile-core-expr-to-port r6e1@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! r775@make-collection (unspecified)) (set! r777@current-library-collection (unspecified)) (set! r779@rp (unspecified)) (set! r783@library? (unspecified)) (set! r785@library-id (unspecified)) (set! r787@set-library-id! (unspecified)) (set! r789@library-name (unspecified)) (set! r78b@set-library-name! (unspecified)) (set! r78d@library-version (unspecified)) (set! r78f@set-library-version! (unspecified)) (set! r791@library-imp* (unspecified)) (set! r793@set-library-imp*! (unspecified)) (set! r795@library-vis* (unspecified)) (set! r797@set-library-vis*! (unspecified)) (set! r799@library-inv* (unspecified)) (set! r79b@set-library-inv*! (unspecified)) (set! r79d@library-subst (unspecified)) (set! r79f@set-library-subst! (unspecified)) (set! r7a1@library-env (unspecified)) (set! r7a3@set-library-env! (unspecified)) (set! r7a5@library-visit-state (unspecified)) (set! r7a7@set-library-visit-state! (unspecified)) (set! r7a9@library-invoke-state (unspecified)) (set! r7ab@set-library-invoke-state! (unspecified)) (set! r7ad@library-visit-code (unspecified)) (set! r7af@set-library-visit-code! (unspecified)) (set! r7b1@library-invoke-code (unspecified)) (set! r7b3@set-library-invoke-code! (unspecified)) (set! r7b5@library-visible? (unspecified)) (set! r7b7@set-library-visible?! (unspecified)) (set! r7b9@library-source-file-name (unspecified)) (set! r7bb@set-library-source-file-name! (unspecified)) (set! r7bd@dummy (unspecified)) (set! r7bf@find-dependencies (unspecified)) (set! r7c1@find-library-by (unspecified)) (set! r7c3@library-path (unspecified)) (set! r7c5@library-extensions (unspecified)) (set! r7c7@library-name->file-name (unspecified)) (set! r7c9@file-locator (unspecified)) (set! r7cb@serialize-all (unspecified)) (set! r7cd@current-precompiled-library-loader (unspecified)) (set! r7cf@try-load-from-file (unspecified)) (set! r7d1@library-loader (unspecified)) (set! r7d3@current-library-expander (unspecified)) (set! r7d5@external-pending-libraries (unspecified)) (set! r7d7@find-external-library (unspecified)) (set! r7d9@find-library-by-name (unspecified)) (set! r7db@library-exists? (unspecified)) (set! r7dd@find-library-by-spec/die (unspecified)) (set! r7df@label->binding-table (unspecified)) (set! r7e1@install-library-record (unspecified)) (set! r7e3@install-library (unspecified)) (set! r7e5@imported-label->binding (unspecified)) (set! r7e7@invoke-library (unspecified)) (set! r7e9@visit-library (unspecified)) (set! r7eb@invoke-library-by-spec (unspecified)) (set! r7ed@installed-libraries (unspecified)) (set! r7ef@library-spec (unspecified)) (set! r775@make-collection (lambda () (let ((r7f0@set '())) (letrec* ((r7f3@set-cons (lambda (r7f8@x r7f9@ls) (if (memq r7f8@x r7f9@ls) r7f9@ls (cons r7f8@x r7f9@ls))))) (lambda r7f6 (let ((r7f7 (length r7f6))) (if (= r7f7 '0) (apply (lambda () r7f0@set) r7f6) (if (= r7f7 '1) (apply (lambda (r7f4@x) (set! r7f0@set (r7f3@set-cons r7f4@x r7f0@set))) r7f6) (error 'apply '"invalid arg count"))))))))) (set! r964@r775@make-collection r775@make-collection) (set! r777@current-library-collection (r6cd@r5ab@make-parameter (r775@make-collection) (lambda (r7fc@x) (begin (if (not (procedure? r7fc@x)) (assertion-violation 'current-library-collection '"not a procedure" r7fc@x) (void)) r7fc@x)))) (set! r965@r777@current-library-collection r777@current-library-collection) (set! r779@rp (r6ca@r5a5@make-record-printer 'library (lambda (r7fe@x r7ff@p r800@wr) (begin (if (not (r783@library? r7fe@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (r78d@library-version r7fe@x)) (r789@library-name r7fe@x) (append (r789@library-name r7fe@x) (list (r78d@library-version r7fe@x))))) r7ff@p))))) (set! r966@r779@rp r779@rp) (set! r783@library? (lambda (r804@x) (and (simple-struct? r804@x) (eq? (simple-struct-name r804@x) 'library)))) (set! r967@r783@library? r783@library?) (set! r785@library-id (lambda (r806@x) (simple-struct-ref r806@x '0))) (set! r968@r785@library-id r785@library-id) (set! r787@set-library-id! (lambda (r808@x r809@val) (simple-struct-set! r808@x '0 r809@val))) (set! r969@r787@set-library-id! r787@set-library-id!) (set! r789@library-name (lambda (r80c@x) (simple-struct-ref r80c@x '1))) (set! r96a@r789@library-name r789@library-name) (set! r78b@set-library-name! (lambda (r80e@x r80f@val) (simple-struct-set! r80e@x '1 r80f@val))) (set! r96b@r78b@set-library-name! r78b@set-library-name!) (set! r78d@library-version (lambda (r812@x) (simple-struct-ref r812@x '2))) (set! r96c@r78d@library-version r78d@library-version) (set! r78f@set-library-version! (lambda (r814@x r815@val) (simple-struct-set! r814@x '2 r815@val))) (set! r96d@r78f@set-library-version! r78f@set-library-version!) (set! r791@library-imp* (lambda (r818@x) (simple-struct-ref r818@x '3))) (set! r96e@r791@library-imp* r791@library-imp*) (set! r793@set-library-imp*! (lambda (r81a@x r81b@val) (simple-struct-set! r81a@x '3 r81b@val))) (set! r96f@r793@set-library-imp*! r793@set-library-imp*!) (set! r795@library-vis* (lambda (r81e@x) (simple-struct-ref r81e@x '4))) (set! r970@r795@library-vis* r795@library-vis*) (set! r797@set-library-vis*! (lambda (r820@x r821@val) (simple-struct-set! r820@x '4 r821@val))) (set! r971@r797@set-library-vis*! r797@set-library-vis*!) (set! r799@library-inv* (lambda (r824@x) (simple-struct-ref r824@x '5))) (set! r972@r799@library-inv* r799@library-inv*) (set! r79b@set-library-inv*! (lambda (r826@x r827@val) (simple-struct-set! r826@x '5 r827@val))) (set! r973@r79b@set-library-inv*! r79b@set-library-inv*!) (set! r79d@library-subst (lambda (r82a@x) (simple-struct-ref r82a@x '6))) (set! r974@r79d@library-subst r79d@library-subst) (set! r79f@set-library-subst! (lambda (r82c@x r82d@val) (simple-struct-set! r82c@x '6 r82d@val))) (set! r975@r79f@set-library-subst! r79f@set-library-subst!) (set! r7a1@library-env (lambda (r830@x) (simple-struct-ref r830@x '7))) (set! r976@r7a1@library-env r7a1@library-env) (set! r7a3@set-library-env! (lambda (r832@x r833@val) (simple-struct-set! r832@x '7 r833@val))) (set! r977@r7a3@set-library-env! r7a3@set-library-env!) (set! r7a5@library-visit-state (lambda (r836@x) (simple-struct-ref r836@x '8))) (set! r978@r7a5@library-visit-state r7a5@library-visit-state) (set! r7a7@set-library-visit-state! (lambda (r838@x r839@val) (simple-struct-set! r838@x '8 r839@val))) (set! r979@r7a7@set-library-visit-state! r7a7@set-library-visit-state!) (set! r7a9@library-invoke-state (lambda (r83c@x) (simple-struct-ref r83c@x '9))) (set! r97a@r7a9@library-invoke-state r7a9@library-invoke-state) (set! r7ab@set-library-invoke-state! (lambda (r83e@x r83f@val) (simple-struct-set! r83e@x '9 r83f@val))) (set! r97b@r7ab@set-library-invoke-state! r7ab@set-library-invoke-state!) (set! r7ad@library-visit-code (lambda (r842@x) (simple-struct-ref r842@x '10))) (set! r97c@r7ad@library-visit-code r7ad@library-visit-code) (set! r7af@set-library-visit-code! (lambda (r844@x r845@val) (simple-struct-set! r844@x '10 r845@val))) (set! r97d@r7af@set-library-visit-code! r7af@set-library-visit-code!) (set! r7b1@library-invoke-code (lambda (r848@x) (simple-struct-ref r848@x '11))) (set! r97e@r7b1@library-invoke-code r7b1@library-invoke-code) (set! r7b3@set-library-invoke-code! (lambda (r84a@x r84b@val) (simple-struct-set! r84a@x '11 r84b@val))) (set! r97f@r7b3@set-library-invoke-code! r7b3@set-library-invoke-code!) (set! r7b5@library-visible? (lambda (r84e@x) (simple-struct-ref r84e@x '12))) (set! r980@r7b5@library-visible? r7b5@library-visible?) (set! r7b7@set-library-visible?! (lambda (r850@x r851@val) (simple-struct-set! r850@x '12 r851@val))) (set! r981@r7b7@set-library-visible?! r7b7@set-library-visible?!) (set! r7b9@library-source-file-name (lambda (r854@x) (simple-struct-ref r854@x '13))) (set! r982@r7b9@library-source-file-name r7b9@library-source-file-name) (set! r7bb@set-library-source-file-name! (lambda (r856@x r857@val) (simple-struct-set! r856@x '13 r857@val))) (set! r983@r7bb@set-library-source-file-name! r7bb@set-library-source-file-name!) (set! r7bd@dummy '3) (set! r984@r7bd@dummy r7bd@dummy) (set! r7bf@find-dependencies (lambda (r85a@ls) (if (null? r85a@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! r985@r7bf@find-dependencies r7bf@find-dependencies) (set! r7c1@find-library-by (lambda (r85c@pred) (let r860@f ((r85e@ls ((r777@current-library-collection)))) (if (null? r85e@ls) '#f (if (r85c@pred (car r85e@ls)) (car r85e@ls) (r860@f (cdr r85e@ls))))))) (set! r986@r7c1@find-library-by r7c1@find-library-by) (set! r7c3@library-path (r6cd@r5ab@make-parameter '(".") (lambda (r862@x) (if (and (list? r862@x) (for-all string? r862@x)) (map (lambda (r864@x) r864@x) r862@x) (assertion-violation 'library-path '"not a list of strings" r862@x))))) (set! r987@r7c3@library-path r7c3@library-path) (set! r7c5@library-extensions (r6cd@r5ab@make-parameter '(".sls" ".ss" ".scm") (lambda (r866@x) (if (and (list? r866@x) (for-all string? r866@x)) (map (lambda (r868@x) r868@x) r866@x) (assertion-violation 'library-extensions '"not a list of strings" r866@x))))) (set! r988@r7c5@library-extensions r7c5@library-extensions) (set! r7c7@library-name->file-name (lambda (r86a@x) (call-with-values (lambda () (open-string-output-port)) (lambda (r870@r86d r871@r86f) (let ((r874@extract r871@r86f) (r875@p r870@r86d)) (letrec* ((r879@display-hex (lambda (r882@n) (if (<= '0 r882@n '9) (display r882@n r875@p) (display (integer->char (+ (char->integer '#\a) (- r882@n '10))) r875@p))))) (begin (let r87c@f ((r87a@ls r86a@x)) (if (not (null? r87a@ls)) (begin (display '"/" r875@p) (for-each (lambda (r87e@c) (if (or (char<=? '#\a r87e@c '#\z) (char<=? '#\A r87e@c '#\Z) (char<=? '#\0 r87e@c '#\9) (memv r87e@c '(#\- #\. #\_ #\~))) (display r87e@c r875@p) (begin (display '"%" r875@p) (let ((r880@n (char->integer r87e@c))) (begin (r879@display-hex (quotient r880@n '16)) (r879@display-hex (remainder r880@n '16))))))) (string->list (symbol->string (car r87a@ls)))) (r87c@f (cdr r87a@ls))) (void))) (r874@extract)))))))) (set! r989@r7c7@library-name->file-name r7c7@library-name->file-name) (set! r7c9@file-locator (r6cd@r5ab@make-parameter (lambda (r884@x) (let ((r886@str (r7c7@library-name->file-name r884@x))) (let r88e@f ((r888@ls (r7c3@library-path)) (r889@exts (r7c5@library-extensions)) (r88a@failed-list '())) (if (null? r888@ls) (letrec* ((r898@r893 (make-record-type-descriptor '&library-resolution &condition-rtd 'r896 '#f '#f '#((immutable library) (immutable files)))) (r89a@r895 '#f) (r89c@r894 (make-record-constructor-descriptor r898@r893 &condition-rcd r89a@r895)) (r89f@r892 (record-predicate r898@r893)) (r8a1@make-library-resolution-condition (record-constructor r89c@r894)) (r8a3@r890 (record-accessor r898@r893 '0)) (r8a5@r891 (record-accessor r898@r893 '1)) (r8a7@library-resolution-condition? (condition-predicate r898@r893)) (r8a9@condition-library (condition-accessor r898@r893 r8a3@r890)) (r8ab@condition-files (condition-accessor r898@r893 r8a5@r891))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (r8a1@make-library-resolution-condition r884@x (reverse r88a@failed-list))))) (if (null? r889@exts) (r88e@f (cdr r888@ls) (r7c5@library-extensions) r88a@failed-list) (let ((r8ac@name (string-append (car r888@ls) r886@str (car r889@exts)))) (if (file-exists? r8ac@name) r8ac@name (r88e@f r888@ls (cdr r889@exts) (cons r8ac@name r88a@failed-list))))))))) (lambda (r8ae@f) (if (procedure? r8ae@f) r8ae@f (assertion-violation 'file-locator '"not a procedure" r8ae@f))))) (set! r98a@r7c9@file-locator r7c9@file-locator) (set! r7cb@serialize-all (lambda (r8b0@serialize r8b1@compile) (letrec* ((r8b5@library-desc (lambda (r8b8@x) (list (r785@library-id r8b8@x) (r789@library-name r8b8@x))))) (for-each (lambda (r8b6@x) (if (r7b9@library-source-file-name r8b6@x) (r8b0@serialize (r7b9@library-source-file-name r8b6@x) (list (r785@library-id r8b6@x) (r789@library-name r8b6@x) (r78d@library-version r8b6@x) (map r8b5@library-desc (r791@library-imp* r8b6@x)) (map r8b5@library-desc (r795@library-vis* r8b6@x)) (map r8b5@library-desc (r799@library-inv* r8b6@x)) (r79d@library-subst r8b6@x) (r7a1@library-env r8b6@x) (r8b1@compile (r7ad@library-visit-code r8b6@x)) (r8b1@compile (r7b1@library-invoke-code r8b6@x)) (r7b5@library-visible? r8b6@x))) (void))) ((r777@current-library-collection)))))) (set! r98b@r7cb@serialize-all r7cb@serialize-all) (set! r7cd@current-precompiled-library-loader (r6cd@r5ab@make-parameter (lambda (r8ba@filename r8bb@sk) '#f))) (set! r98c@r7cd@current-precompiled-library-loader r7cd@current-precompiled-library-loader) (set! r7cf@try-load-from-file (lambda (r8be@filename) ((r7cd@current-precompiled-library-loader) r8be@filename (lambda r8e4 (let ((r8e5 (length r8e4))) (if (= r8e5 '11) (apply (lambda (r8c0@id r8c1@name r8c2@ver r8c3@imp* r8c4@vis* r8c5@inv* r8c6@exp-subst r8c7@exp-env r8c8@visit-proc r8c9@invoke-proc r8ca@visible?) (let r8d8@f ((r8d6@deps (append r8c3@imp* r8c4@vis* r8c5@inv*))) (if (null? r8d6@deps) (begin (r7e3@install-library r8c0@id r8c1@name r8c2@ver r8c3@imp* r8c4@vis* r8c5@inv* r8c6@exp-subst r8c7@exp-env r8c8@visit-proc r8c9@invoke-proc '#f '#f r8ca@visible? '#f) '#t) (let ((r8da@d (car r8d6@deps))) (let ((r8dc@label (car r8da@d)) (r8dd@dname (cadr r8da@d))) (let ((r8e0@l (r7d9@find-library-by-name r8dd@dname))) (if (and (r783@library? r8e0@l) (eq? r8dc@label (r785@library-id r8e0@l))) (r8d8@f (cdr r8d6@deps)) (begin (if r6c7@r59f@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" r8c1@name r8dd@dname r8be@filename) (void)) '#f)))))))) r8e4) (if (>= r8e5 '0) (apply (lambda r8e2@others '#f) r8e4) (error 'apply '"invalid arg count")))))))) (set! r98d@r7cf@try-load-from-file r7cf@try-load-from-file) (set! r7d1@library-loader (r6cd@r5ab@make-parameter (lambda (r8e6@x) (let ((r8e8@file-name ((r7c9@file-locator) r8e6@x))) (if (not r8e8@file-name) (assertion-violation '#f '"cannot file library" r8e6@x) (or (r7cf@try-load-from-file r8e8@file-name) ((r7d3@current-library-expander) (r6cc@r5a9@read-library-source-file r8e8@file-name) r8e8@file-name (lambda (r8ea@name) (if (not (fast-equal? r8ea@name r8e6@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (r8f0@r8ed r8f1@r8ef) (let ((r8f4@e r8f1@r8ef) (r8f5@p r8f0@r8ed)) (begin (display '"expected to find library " r8f5@p) (write r8e6@x r8f5@p) (display '" in file " r8f5@p) (display r8e8@file-name r8f5@p) (display '", found " r8f5@p) (write r8ea@name r8f5@p) (display '" instead" r8f5@p) (r8f4@e)))))) (void)))))))) (lambda (r8f8@f) (if (procedure? r8f8@f) r8f8@f (assertion-violation 'library-locator '"not a procedure" r8f8@f))))) (set! r98e@r7d1@library-loader r7d1@library-loader) (set! r7d3@current-library-expander (r6cd@r5ab@make-parameter (lambda (r8fa@x) (assertion-violation 'library-expander '"not initialized")) (lambda (r8fc@f) (if (procedure? r8fc@f) r8fc@f (assertion-violation 'library-expander '"not a procedure" r8fc@f))))) (set! r98f@r7d3@current-library-expander r7d3@current-library-expander) (set! r7d5@external-pending-libraries (r6cd@r5ab@make-parameter '())) (set! r990@r7d5@external-pending-libraries r7d5@external-pending-libraries) (set! r7d7@find-external-library (lambda (r8fe@name) (begin (if (member r8fe@name (r7d5@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" r8fe@name) (void)) (let ((r904@r901 r7d5@external-pending-libraries) (r905@r903 (cons r8fe@name (r7d5@external-pending-libraries)))) (let ((r908@swap (lambda () (let ((r90a@t (r904@r901))) (begin (r904@r901 r905@r903) (set! r905@r903 r90a@t)))))) (dynamic-wind r908@swap (lambda () (begin ((r7d1@library-loader) r8fe@name) (or (r7c1@find-library-by (lambda (r90c@x) (fast-equal? (r789@library-name r90c@x) r8fe@name))) (assertion-violation '#f '"handling external library did not yield the correct library" r8fe@name)))) r908@swap)))))) (set! r991@r7d7@find-external-library r7d7@find-external-library) (set! r7d9@find-library-by-name (lambda (r90e@name) (or (r7c1@find-library-by (lambda (r910@x) (fast-equal? (r789@library-name r910@x) r90e@name))) (r7d7@find-external-library r90e@name)))) (set! r992@r7d9@find-library-by-name r7d9@find-library-by-name) (set! r7db@library-exists? (lambda (r912@name) (and (r7c1@find-library-by (lambda (r914@x) (fast-equal? (r789@library-name r914@x) r912@name))) '#t))) (set! r993@r7db@library-exists? r7db@library-exists?) (set! r7dd@find-library-by-spec/die (lambda (r916@spec) (let ((r918@id (car r916@spec))) (or (r7c1@find-library-by (lambda (r91a@x) (eq? r918@id (r785@library-id r91a@x)))) (assertion-violation '#f '"cannot find library with required spec" r916@spec))))) (set! r994@r7dd@find-library-by-spec/die r7dd@find-library-by-spec/die) (set! r7df@label->binding-table (make-eq-hashtable)) (set! r995@r7df@label->binding-table r7df@label->binding-table) (set! r7e1@install-library-record (lambda (r91c@lib) (begin (let ((r91e@exp-env (r7a1@library-env r91c@lib))) (for-each (lambda (r920@x) (let ((r922@label (car r920@x)) (r923@binding (cdr r920@x))) (let ((r926@binding (let ((r928@t (car r923@binding))) (if (memv r928@t '(global)) (cons 'global (cons r91c@lib (cdr r923@binding))) (if (memv r928@t '(global-macro)) (cons 'global-macro (cons r91c@lib (cdr r923@binding))) (if (memv r928@t '(global-macro!)) (cons 'global-macro! (cons r91c@lib (cdr r923@binding))) r923@binding)))))) (begin (if (hashtable-ref r7df@label->binding-table r922@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" r922@label (hashtable-ref r7df@label->binding-table r922@label '#f) r926@binding) (exit)) (void)) (hashtable-set! r7df@label->binding-table r922@label r926@binding))))) r91e@exp-env)) ((r777@current-library-collection) r91c@lib)))) (set! r996@r7e1@install-library-record r7e1@install-library-record) (set! r7e3@install-library (lambda (r92a@id r92b@name r92c@ver r92d@imp* r92e@vis* r92f@inv* r930@exp-subst r931@exp-env r932@visit-proc r933@invoke-proc r934@visit-code r935@invoke-code r936@visible? r937@source-file-name) (let ((r946@imp-lib* (map r7dd@find-library-by-spec/die r92d@imp*)) (r947@vis-lib* (map r7dd@find-library-by-spec/die r92e@vis*)) (r948@inv-lib* (map r7dd@find-library-by-spec/die r92f@inv*))) (begin (if (not (and (symbol? r92a@id) (list? r92b@name) (list? r92c@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" r92a@id r92b@name r92c@ver) (void)) (if (r7db@library-exists? r92b@name) (assertion-violation 'install-library '"library is already installed" r92b@name) (void)) (let ((r94c@lib (make-simple-struct 'library '15 (list r92a@id r92b@name r92c@ver r946@imp-lib* r947@vis-lib* r948@inv-lib* r930@exp-subst r931@exp-env r932@visit-proc r933@invoke-proc r934@visit-code r935@invoke-code r936@visible? r937@source-file-name)))) (r7e1@install-library-record r94c@lib)))))) (set! r997@r7e3@install-library r7e3@install-library) (set! r7e5@imported-label->binding (lambda (r94e@lab) (hashtable-ref r7df@label->binding-table r94e@lab '#f))) (set! r998@r7e5@imported-label->binding r7e5@imported-label->binding) (set! r7e7@invoke-library (lambda (r950@lib) (let ((r952@invoke (r7a9@library-invoke-state r950@lib))) (if (procedure? r952@invoke) (begin (r7ab@set-library-invoke-state! r950@lib (lambda () (assertion-violation 'invoke '"circularity detected" r950@lib))) (for-each r7e7@invoke-library (r799@library-inv* r950@lib)) (r7ab@set-library-invoke-state! r950@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" r950@lib))) (r952@invoke) (r7ab@set-library-invoke-state! r950@lib '#t)) (void))))) (set! r999@r7e7@invoke-library r7e7@invoke-library) (set! r7e9@visit-library (lambda (r954@lib) (let ((r956@visit (r7a5@library-visit-state r954@lib))) (if (procedure? r956@visit) (begin (r7a7@set-library-visit-state! r954@lib (lambda () (assertion-violation 'visit '"circularity detected" r954@lib))) (for-each r7e7@invoke-library (r795@library-vis* r954@lib)) (r7a7@set-library-visit-state! r954@lib (lambda () (assertion-violation 'invoke '"first visit did not return" r954@lib))) (r956@visit) (r7a7@set-library-visit-state! r954@lib '#t)) (void))))) (set! r99a@r7e9@visit-library r7e9@visit-library) (set! r7eb@invoke-library-by-spec (lambda (r958@spec) (r7e7@invoke-library (r7dd@find-library-by-spec/die r958@spec)))) (set! r99b@r7eb@invoke-library-by-spec r7eb@invoke-library-by-spec) (set! r7ed@installed-libraries (lambda r960 (let ((r961 (length r960))) (if (= r961 '1) (apply (lambda (r95a@all?) (let r95e@f ((r95c@ls ((r777@current-library-collection)))) (if (null? r95c@ls) '() (if (or r95a@all? (r7b5@library-visible? (car r95c@ls))) (cons (car r95c@ls) (r95e@f (cdr r95c@ls))) (r95e@f (cdr r95c@ls)))))) r960) (if (= r961 '0) (apply (lambda () (r7ed@installed-libraries '#f)) r960) (error 'apply '"invalid arg count")))))) (set! r99c@r7ed@installed-libraries r7ed@installed-libraries) (set! r7ef@library-spec (lambda (r962@x) (begin (if (not (r783@library? r962@x)) (assertion-violation 'library-spec '"not a library" r962@x) (void)) (list (r785@library-id r962@x) (r789@library-name r962@x) (r78d@library-version r962@x))))) (set! r99d@r7ef@library-spec r7ef@library-spec) (void))
(begin (set! r9a1@build-global-define (unspecified)) (set! ra12@build-lambda (unspecified)) (set! ra14@build-case-lambda (unspecified)) (set! ra42@build-sequence (unspecified)) (set! ra44@build-void (unspecified)) (set! ra46@build-letrec (unspecified)) (set! ra48@build-let (unspecified)) (set! ra4a@build-named-let (unspecified)) (set! ra4c@build-letrec* (unspecified)) (set! ra4e@build-library-letrec* (unspecified)) (set! ra50@build-receive (unspecified)) (set! r9a1@build-global-define (lambda (ra51@x) (ra44@build-void))) (set! radf@r9a1@build-global-define r9a1@build-global-define) (set! ra12@build-lambda (lambda (ra53@ae ra54@vars ra55@exp) (list 'lambda ra54@vars ra55@exp))) (set! rae0@ra12@build-lambda ra12@build-lambda) (set! ra14@build-case-lambda (lambda (ra59@ae ra5a@vars* ra5b@exp*) (letrec* ((ra60@build-error (lambda (ra97@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (ra62@build-pred (lambda (ra7f@ae ra80@n ra81@vars) (call-with-values (lambda () (let ra8d@f ((ra89@vars ra81@vars) (ra8a@count '0)) (if (pair? ra89@vars) (ra8d@f (cdr ra89@vars) (+ ra8a@count '1)) (if (null? ra89@vars) (values ra8a@count '=) (values ra8a@count '>=))))) (lambda (ra8f@ra86 ra90@ra88) (let ((ra93@pred ra90@ra88) (ra94@count ra8f@ra86)) (list (list 'primitive ra93@pred) ra80@n (list 'quote ra94@count))))))) (ra64@build-apply (lambda (ra77@ae ra78@g ra79@vars ra7a@exp) (list '(primitive apply) (ra12@build-lambda ra77@ae ra79@vars ra7a@exp) ra78@g))) (ra66@expand-case-lambda (lambda (ra67@ae ra68@vars ra69@exp*) (let ((ra6d@g (gensym)) (ra6e@n (gensym))) (list 'lambda ra6d@g (ra48@build-let ra67@ae (list ra6e@n) (list (list '(primitive length) ra6d@g)) (let ra75@f ((ra71@vars* ra5a@vars*) (ra72@exp* ra69@exp*)) (if (null? ra71@vars*) (ra60@build-error ra67@ae) (list 'if (ra62@build-pred ra67@ae ra6e@n (car ra71@vars*)) (ra64@build-apply ra67@ae ra6d@g (car ra71@vars*) (car ra72@exp*)) (ra75@f (cdr ra71@vars*) (cdr ra72@exp*))))))))))) (if (= (length ra5b@exp*) '1) (ra12@build-lambda ra59@ae (car ra5a@vars*) (car ra5b@exp*)) (ra66@expand-case-lambda ra59@ae ra5a@vars* ra5b@exp*))))) (set! rae1@ra14@build-case-lambda ra14@build-case-lambda) (set! ra42@build-sequence (lambda (ra99@ae ra9a@exps) (let ra9f@loop ((ra9d@exps ra9a@exps)) (if (null? (cdr ra9d@exps)) (car ra9d@exps) (if (equal? (car ra9d@exps) (ra44@build-void)) (ra9f@loop (cdr ra9d@exps)) (cons 'begin ra9d@exps)))))) (set! rae2@ra42@build-sequence ra42@build-sequence) (set! ra44@build-void (lambda () '((primitive void)))) (set! rae3@ra44@build-void ra44@build-void) (set! ra46@build-letrec (lambda (raa1@ae raa2@vars raa3@val-exps raa4@body-exp) (if (null? raa2@vars) raa4@body-exp (list 'letrec (map list raa2@vars raa3@val-exps) raa4@body-exp)))) (set! rae4@ra46@build-letrec ra46@build-letrec) (set! ra48@build-let (lambda (raa9@ae raaa@vars raab@val-exps raac@body-exp) (if (null? raaa@vars) raac@body-exp (list 'let (map list raaa@vars raab@val-exps) raac@body-exp)))) (set! rae5@ra48@build-let ra48@build-let) (set! ra4a@build-named-let (lambda (rab1@ae rab2@name rab3@vars rab4@val-exps rab5@body-exp) (list 'let rab2@name (map list rab3@vars rab4@val-exps) rab5@body-exp))) (set! rae6@ra4a@build-named-let ra4a@build-named-let) (set! ra4c@build-letrec* (lambda (rabb@ae rabc@vars rabd@val-exps rabe@body-exp) (if (null? rabc@vars) rabe@body-exp (list 'letrec* (map list rabc@vars rabd@val-exps) rabe@body-exp)))) (set! rae7@ra4c@build-letrec* ra4c@build-letrec*) (set! ra4e@build-library-letrec* (lambda (rac3@ae rac4@name rac5@vars rac6@locs rac7@val-exps rac8@body-exp) (cons 'begin (append (map (lambda (racf@var) (cons 'set! (cons racf@var '((unspecified))))) rac5@vars) (append (apply append (map (lambda (rad1@var rad2@loc rad3@val-exp) (list (list 'set! rad1@var rad3@val-exp) (list 'set! rad2@loc rad1@var))) rac5@vars rac6@locs rac7@val-exps)) (list rac8@body-exp)))))) (set! rae8@ra4e@build-library-letrec* ra4e@build-library-letrec*) (set! ra50@build-receive (lambda (rad7@ae rad8@vars rad9@producer rada@body*) (begin (display '"************** in ") (cons 'receive (cons rad8@vars (cons rad9@producer rada@body*)))))) (set! rae9@ra50@build-receive ra50@build-receive) (void))
(begin (set! raf8@file-options-macro (unspecified)) (set! rafa@set-cons (unspecified)) (set! rafc@set-union (unspecified)) (set! rb01@top-mark* (unspecified)) (set! rb03@top-marked? (unspecified)) (set! rb05@gen-lexical (unspecified)) (set! rb07@gen-global (unspecified)) (set! rb09@gen-label (unspecified)) (set! rb0b@gen-top-level-label (unspecified)) (set! rb0d@gen-define-label+loc (unspecified)) (set! rb0f@gen-define-label (unspecified)) (set! rb19@rib? (unspecified)) (set! rb1b@rib-sym* (unspecified)) (set! rb1d@set-rib-sym*! (unspecified)) (set! rb1f@rib-mark** (unspecified)) (set! rb21@set-rib-mark**! (unspecified)) (set! rb23@rib-label* (unspecified)) (set! rb25@set-rib-label*! (unspecified)) (set! rb27@rib-sealed/freq (unspecified)) (set! rb29@set-rib-sealed/freq! (unspecified)) (set! rb2b@rib-cache (unspecified)) (set! rb2d@set-rib-cache! (unspecified)) (set! rb2f@dummy (unspecified)) (set! rb31@make-empty-rib (unspecified)) (set! rb33@extend-rib! (unspecified)) (set! rb35@extend-rib/nc! (unspecified)) (set! rb37@make-rib-map (unspecified)) (set! rb39@seal-rib! (unspecified)) (set! rb3b@unseal-rib! (unspecified)) (set! rb3d@make-full-rib (unspecified)) (set! rb3f@rp (unspecified)) (set! rb49@stx? (unspecified)) (set! rb4b@stx-expr (unspecified)) (set! rb4d@set-stx-expr! (unspecified)) (set! rb4f@stx-mark* (unspecified)) (set! rb51@set-stx-mark*! (unspecified)) (set! rb53@stx-subst* (unspecified)) (set! rb55@set-stx-subst*! (unspecified)) (set! rb57@stx-ae* (unspecified)) (set! rb59@set-stx-ae*! (unspecified)) (set! rb5b@dummy (unspecified)) (set! rb5d@datum->stx (unspecified)) (set! rb5f@gen-mark (unspecified)) (set! rb61@anti-mark (unspecified)) (set! rb63@anti-mark? (unspecified)) (set! rb65@mkstx (unspecified)) (set! rb67@add-subst (unspecified)) (set! rb69@add-mark (unspecified)) (set! rb6b@syntax-kind? (unspecified)) (set! rb6d@syntax-vector->list (unspecified)) (set! rb6f@syntax-pair? (unspecified)) (set! rb71@syntax-vector? (unspecified)) (set! rb73@syntax-null? (unspecified)) (set! rb75@syntax-list? (unspecified)) (set! rb77@syntax-car (unspecified)) (set! rb79@syntax-cdr (unspecified)) (set! rb7b@syntax->list (unspecified)) (set! rb7d@id? (unspecified)) (set! rb7f@id->sym (unspecified)) (set! rb81@bound-id=? (unspecified)) (set! rb83@free-id=? (unspecified)) (set! rb85@valid-bound-ids? (unspecified)) (set! rb87@distinct-bound-ids? (unspecified)) (set! rb89@bound-id-member? (unspecified)) (set! rb8b@self-evaluating? (unspecified)) (set! rb8d@strip-annotations (unspecified)) (set! rb8f@strip (unspecified)) (set! rb91@stx->datum (unspecified)) (set! rb93@id->label (unspecified)) (set! rb95@label->binding (unspecified)) (set! rb97@make-binding (unspecified)) (set! rb99@binding-type (unspecified)) (set! rb9b@binding-value (unspecified)) (set! rb9d@raise-unbound-error (unspecified)) (set! rb9f@syntax-type (unspecified)) (set! rbad@sanitize-binding (unspecified)) (set! rbaf@make-variable-transformer (unspecified)) (set! rbb1@variable-transformer? (unspecified)) (set! rbb3@variable-transformer-procedure (unspecified)) (set! rbb5@make-eval-transformer (unspecified)) (set! rd06@parse-define (unspecified)) (set! rd08@parse-define-syntax (unspecified)) (set! rd0a@scheme-stx-hashtable (unspecified)) (set! rd0c@scheme-stx (unspecified)) (set! rd0e@lexical-var (unspecified)) (set! rd10@lexical-mutable? (unspecified)) (set! rd12@set-lexical-mutable! (unspecified)) (set! rd14@add-lexical (unspecified)) (set! rd16@add-lexicals (unspecified)) (set! rd18@letrec-helper (unspecified)) (set! rd1a@let-transformer (unspecified)) (set! rd1c@letrec-transformer (unspecified)) (set! rd1e@letrec*-transformer (unspecified)) (set! rd20@fluid-let-syntax-transformer (unspecified)) (set! rd22@type-descriptor-transformer (unspecified)) (set! rd24@record-type-descriptor-transformer (unspecified)) (set! rd26@record-constructor-descriptor-transformer (unspecified)) (set! rd28@when-macro (unspecified)) (set! rd2a@unless-macro (unspecified)) (set! rd2c@if-transformer (unspecified)) (set! rd2e@and-transformer (unspecified)) (set! rd30@or-transformer (unspecified)) (set! rd32@case-macro (unspecified)) (set! rd34@quote-transformer (unspecified)) (set! rd36@case-lambda-transformer (unspecified)) (set! rd38@lambda-transformer (unspecified)) (set! rd3a@bless (unspecified)) (set! rd3c@with-syntax-macro (unspecified)) (set! rd3e@invalid-fmls-error (unspecified)) (set! rd40@let-macro (unspecified)) (set! rd42@let-values-macro (unspecified)) (set! rd44@let*-values-macro (unspecified)) (set! rd46@trace-lambda-macro (unspecified)) (set! rd48@trace-define-macro (unspecified)) (set! rd4a@trace-define-syntax-macro (unspecified)) (set! rd4c@trace-let/rec-syntax (unspecified)) (set! rd4e@trace-let-syntax-macro (unspecified)) (set! rd50@trace-letrec-syntax-macro (unspecified)) (set! rd52@guard-macro (unspecified)) (set! rd54@define-enumeration-macro (unspecified)) (set! rd56@time-macro (unspecified)) (set! rd58@delay-macro (unspecified)) (set! rd5a@assert-macro (unspecified)) (set! rd5c@endianness-macro (unspecified)) (set! rd5e@identifier-syntax-macro (unspecified)) (set! rd60@do-macro (unspecified)) (set! rd62@let*-macro (unspecified)) (set! rd64@or-macro (unspecified)) (set! rd66@and-macro (unspecified)) (set! rd68@cond-macro (unspecified)) (set! rd6a@do-include (unspecified)) (set! rd6c@include-macro (unspecified)) (set! rd6e@include-into-macro (unspecified)) (set! rd70@syntax-rules-macro (unspecified)) (set! rd72@quasiquote-macro (unspecified)) (set! rd74@quasisyntax-macro (unspecified)) (set! rd76@define-struct-macro (unspecified)) (set! rd78@define-record-type-macro (unspecified)) (set! rd7a@define-condition-type-macro (unspecified)) (set! rd7c@incorrect-usage-macro (unspecified)) (set! rd7e@parameterize-macro (unspecified)) (set! rd80@foreign-call-transformer (unspecified)) (set! rd82@convert-pattern (unspecified)) (set! rd84@syntax-dispatch (unspecified)) (set! rd86@ellipsis? (unspecified)) (set! rd88@underscore? (unspecified)) (set! rd8a@verify-literals (unspecified)) (set! rd8c@syntax-case-transformer (unspecified)) (set! rd8e@ellipsis-map (unspecified)) (set! rd90@syntax-transformer (unspecified)) (set! rd92@core-macro-transformer (unspecified)) (set! rd94@symbol-macro (unspecified)) (set! rd96@macro-transformer (unspecified)) (set! rd98@local-macro-transformer (unspecified)) (set! rd9a@do-macro-call (unspecified)) (set! rd9c@chi-macro (unspecified)) (set! rd9e@chi-local-macro (unspecified)) (set! rda0@chi-global-macro (unspecified)) (set! rda2@chi-expr* (unspecified)) (set! rda4@chi-application (unspecified)) (set! rda6@chi-expr (unspecified)) (set! rda8@chi-set! (unspecified)) (set! rdaa@verify-formals (unspecified)) (set! rdac@chi-lambda-clause (unspecified)) (set! rdae@chi-lambda-clause* (unspecified)) (set! rdb0@chi-defun (unspecified)) (set! rdb2@chi-rhs (unspecified)) (set! rdb4@expand-interaction-rhs*/init* (unspecified)) (set! rdb6@chi-rhs* (unspecified)) (set! rdb8@find-bound=? (unspecified)) (set! rdba@find-dups (unspecified)) (set! rdbc@chi-internal (unspecified)) (set! rdbe@parse-module (unspecified)) (set! rdc8@module-interface? (unspecified)) (set! rdca@module-interface-first-mark (unspecified)) (set! rdcc@set-module-interface-first-mark! (unspecified)) (set! rdce@module-interface-exp-id-vec (unspecified)) (set! rdd0@set-module-interface-exp-id-vec! (unspecified)) (set! rdd2@module-interface-exp-lab-vec (unspecified)) (set! rdd4@set-module-interface-exp-lab-vec! (unspecified)) (set! rdd6@dummy (unspecified)) (set! rdd8@module-interface-exp-id* (unspecified)) (set! rdda@chi-internal-module (unspecified)) (set! rddc@chi-body* (unspecified)) (set! rdde@expand-transformer (unspecified)) (set! rde0@parse-exports (unspecified)) (set! rde2@parse-library-name (unspecified)) (set! rde4@parse-library (unspecified)) (set! rde6@parse-import-spec* (unspecified)) (set! rde8@make-top-rib (unspecified)) (set! rdea@make-collector (unspecified)) (set! rdec@inv-collector (unspecified)) (set! rdee@vis-collector (unspecified)) (set! rdf0@imp-collector (unspecified)) (set! rdf2@chi-library-internal (unspecified)) (set! rdf4@chi-interaction-expr (unspecified)) (set! rdf6@library-body-expander (unspecified)) (set! rdf8@core-library-expander (unspecified)) (set! rdfa@parse-top-level-program (unspecified)) (set! rdfc@top-level-expander (unspecified)) (set! rdfe@rp (unspecified)) (set! re08@env? (unspecified)) (set! re0a@env-names (unspecified)) (set! re0c@set-env-names! (unspecified)) (set! re0e@env-labels (unspecified)) (set! re10@set-env-labels! (unspecified)) (set! re12@env-itc (unspecified)) (set! re14@set-env-itc! (unspecified)) (set! re16@dummy (unspecified)) (set! re18@rp (unspecified)) (set! re22@interaction-env? (unspecified)) (set! re24@interaction-env-rib (unspecified)) (set! re26@set-interaction-env-rib! (unspecified)) (set! re28@interaction-env-r (unspecified)) (set! re2a@set-interaction-env-r! (unspecified)) (set! re2c@interaction-env-locs (unspecified)) (set! re2e@set-interaction-env-locs! (unspecified)) (set! re30@dummy (unspecified)) (set! re32@interaction-environment-symbols (unspecified)) (set! re34@environment-bindings (unspecified)) (set! re36@parse-binding (unspecified)) (set! re38@environment? (unspecified)) (set! re3a@environment-symbols (unspecified)) (set! re3c@environment (unspecified)) (set! re3e@null-environment (unspecified)) (set! re40@scheme-report-environment (unspecified)) (set! re42@expand (unspecified)) (set! re44@eval (unspecified)) (set! re46@library-expander (unspecified)) (set! re48@boot-library-expand (unspecified)) (set! re4a@rev-map-append (unspecified)) (set! re4c@build-exports (unspecified)) (set! re4e@make-export-subst (unspecified)) (set! re50@make-export-env/macros (unspecified)) (set! re52@generate-temporaries (unspecified)) (set! re54@free-identifier=? (unspecified)) (set! re56@bound-identifier=? (unspecified)) (set! re58@make-source-condition (unspecified)) (set! re5a@extract-position-condition (unspecified)) (set! re5c@expression-position (unspecified)) (set! re5e@assertion-error (unspecified)) (set! re60@syntax-error (unspecified)) (set! re62@syntax-violation* (unspecified)) (set! re64@syntax-violation (unspecified)) (set! re66@identifier? (unspecified)) (set! re68@datum->syntax (unspecified)) (set! re6a@syntax->datum (unspecified)) (set! re6c@ungensym-all (unspecified)) (set! re6e@compile-r6rs-top-level (unspecified)) (set! re70@pre-compile-r6rs-top-level (unspecified)) (set! re72@interaction-environment (unspecified)) (set! re74@top-level-context (unspecified)) (set! raf8@file-options-macro (lambda (re75@x) (letrec* ((re78@valid-option? (lambda (re81@x) (and (rb7d@id? re81@x) (memq (rb7f@id->sym re81@x) '(no-fail no-create no-truncate)))))) (let ((re79@t re75@x)) (let ((re7b@ls/false (rd84@syntax-dispatch re79@t '(_ . each-any)))) (if (and re7b@ls/false (apply (lambda (re7d@opt*) (for-all re78@valid-option? re7d@opt*)) re7b@ls/false)) (apply (lambda (re7f@opt*) (rd3a@bless (list 'make-file-options (list 'quote re7f@opt*)))) re7b@ls/false) (re64@syntax-violation '#f '"invalid syntax" re79@t))))))) (set! r2801@raf8@file-options-macro raf8@file-options-macro) (set! rafa@set-cons (lambda (re83@x re84@ls) (if (memq re83@x re84@ls) re84@ls (cons re83@x re84@ls)))) (set! r2802@rafa@set-cons rafa@set-cons) (set! rafc@set-union (lambda (re87@ls1 re88@ls2) (if (null? re87@ls1) re88@ls2 (if (memq (car re87@ls1) re88@ls2) (rafc@set-union (cdr re87@ls1) re88@ls2) (cons (car re87@ls1) (rafc@set-union (cdr re87@ls1) re88@ls2)))))) (set! r2803@rafc@set-union rafc@set-union) (set! rb01@top-mark* '(top)) (set! r2804@rb01@top-mark* rb01@top-mark*) (set! rb03@top-marked? (lambda (re8b@m*) (memq 'top re8b@m*))) (set! r2805@rb03@top-marked? rb03@top-marked?) (set! rb05@gen-lexical (lambda (re8d@sym) (if (symbol? re8d@sym) (gensym re8d@sym) (if (rb49@stx? re8d@sym) (rb05@gen-lexical (rb7f@id->sym re8d@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" re8d@sym))))) (set! r2806@rb05@gen-lexical rb05@gen-lexical) (set! rb07@gen-global (lambda (re8f@x) (rb05@gen-lexical re8f@x))) (set! r2807@rb07@gen-global rb07@gen-global) (set! rb09@gen-label (lambda (re91@_) (gensym))) (set! r2808@rb09@gen-label rb09@gen-label) (set! rb0b@gen-top-level-label (lambda (re93@id re94@rib) (letrec* ((re98@find (lambda (rea3@sym rea4@mark* rea5@sym* rea6@mark** rea7@label*) (and (pair? rea5@sym*) (if (and (eq? rea3@sym (car rea5@sym*)) (same-marks? rea4@mark* (car rea6@mark**))) (car rea7@label*) (re98@find rea3@sym rea4@mark* (cdr rea5@sym*) (cdr rea6@mark**) (cdr rea7@label*))))))) (let ((re99@sym (rb7f@id->sym re93@id)) (re9a@mark* (rb4f@stx-mark* re93@id))) (let ((re9d@sym* (rb1b@rib-sym* re94@rib))) (let ((re9f@t (and (memq re99@sym (rb1b@rib-sym* re94@rib)) (re98@find re99@sym re9a@mark* re9d@sym* (rb1f@rib-mark** re94@rib) (rb23@rib-label* re94@rib))))) (if re9f@t ((lambda (rea1@label) (if (r998@r7e5@imported-label->binding rea1@label) (gensym) rea1@label)) re9f@t) (gensym)))))))) (set! r2809@rb0b@gen-top-level-label rb0b@gen-top-level-label) (set! rb0d@gen-define-label+loc (lambda (read@id reae@rib) (let ((reb1@t (re74@top-level-context))) (if reb1@t ((lambda (reb3@env) (let ((reb5@label (rb0b@gen-top-level-label read@id reae@rib)) (reb6@locs (re2c@interaction-env-locs reb3@env))) (values reb5@label (let ((reb9@t (assq reb5@label reb6@locs))) (if reb9@t (cdr reb9@t) (let ((rebb@loc (rb05@gen-lexical read@id))) (begin (re2e@set-interaction-env-locs! reb3@env (cons (cons reb5@label rebb@loc) reb6@locs)) rebb@loc))))))) reb1@t) (values (gensym) (rb05@gen-lexical read@id)))))) (set! r280a@rb0d@gen-define-label+loc rb0d@gen-define-label+loc) (set! rb0f@gen-define-label (lambda (rebd@id rebe@rib) (if (re74@top-level-context) (rb0b@gen-top-level-label rebd@id rebe@rib) (gensym)))) (set! r280b@rb0f@gen-define-label rb0f@gen-define-label) (set! rb19@rib? (lambda (rec1@x) (and (simple-struct? rec1@x) (eq? (simple-struct-name rec1@x) 'rib)))) (set! r280c@rb19@rib? rb19@rib?) (set! rb1b@rib-sym* (lambda (rec3@x) (simple-struct-ref rec3@x '0))) (set! r280d@rb1b@rib-sym* rb1b@rib-sym*) (set! rb1d@set-rib-sym*! (lambda (rec5@x rec6@val) (simple-struct-set! rec5@x '0 rec6@val))) (set! r280e@rb1d@set-rib-sym*! rb1d@set-rib-sym*!) (set! rb1f@rib-mark** (lambda (rec9@x) (simple-struct-ref rec9@x '1))) (set! r280f@rb1f@rib-mark** rb1f@rib-mark**) (set! rb21@set-rib-mark**! (lambda (recb@x recc@val) (simple-struct-set! recb@x '1 recc@val))) (set! r2810@rb21@set-rib-mark**! rb21@set-rib-mark**!) (set! rb23@rib-label* (lambda (recf@x) (simple-struct-ref recf@x '2))) (set! r2811@rb23@rib-label* rb23@rib-label*) (set! rb25@set-rib-label*! (lambda (red1@x red2@val) (simple-struct-set! red1@x '2 red2@val))) (set! r2812@rb25@set-rib-label*! rb25@set-rib-label*!) (set! rb27@rib-sealed/freq (lambda (red5@x) (simple-struct-ref red5@x '3))) (set! r2813@rb27@rib-sealed/freq rb27@rib-sealed/freq) (set! rb29@set-rib-sealed/freq! (lambda (red7@x red8@val) (simple-struct-set! red7@x '3 red8@val))) (set! r2814@rb29@set-rib-sealed/freq! rb29@set-rib-sealed/freq!) (set! rb2b@rib-cache (lambda (redb@x) (simple-struct-ref redb@x '4))) (set! r2815@rb2b@rib-cache rb2b@rib-cache) (set! rb2d@set-rib-cache! (lambda (redd@x rede@val) (simple-struct-set! redd@x '4 rede@val))) (set! r2816@rb2d@set-rib-cache! rb2d@set-rib-cache!) (set! rb2f@dummy '3) (set! r2817@rb2f@dummy rb2f@dummy) (set! rb31@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! r2818@rb31@make-empty-rib rb31@make-empty-rib) (set! rb33@extend-rib! (lambda (ree1@rib ree2@id ree3@label) (letrec* ((ree8@find (lambda (ref5@sym ref6@mark* ref7@sym* ref8@mark** ref9@label*) (and (pair? ref7@sym*) (if (and (eq? ref5@sym (car ref7@sym*)) (same-marks? ref6@mark* (car ref8@mark**))) ref9@label* (ree8@find ref5@sym ref6@mark* (cdr ref7@sym*) (cdr ref8@mark**) (cdr ref9@label*))))))) (begin (if (rb27@rib-sealed/freq ree1@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" ree1@rib) (void)) (let ((ree9@sym (rb7f@id->sym ree2@id)) (reea@mark* (rb4f@stx-mark* ree2@id))) (let ((reed@sym* (rb1b@rib-sym* ree1@rib))) (let ((reef@t (and (memq ree9@sym (rb1b@rib-sym* ree1@rib)) (ree8@find ree9@sym reea@mark* reed@sym* (rb1f@rib-mark** ree1@rib) (rb23@rib-label* ree1@rib))))) (if reef@t ((lambda (ref1@p) (if (not (eq? ree3@label (car ref1@p))) (if (re74@top-level-context) (set-car! ref1@p ree3@label) (re64@syntax-violation '#f '"multiple definitions of identifier" ree2@id)) (void))) reef@t) (begin (if (rb2b@rib-cache ree1@rib) (hashtable-update! (rb2b@rib-cache ree1@rib) ree9@sym (lambda (ref3@e) (cons (cons reea@mark* ree3@label) ref3@e)) '()) (void)) (rb1d@set-rib-sym*! ree1@rib (cons ree9@sym reed@sym*)) (rb21@set-rib-mark**! ree1@rib (cons reea@mark* (rb1f@rib-mark** ree1@rib))) (rb25@set-rib-label*! ree1@rib (cons ree3@label (rb23@rib-label* ree1@rib)))))))))))) (set! r2819@rb33@extend-rib! rb33@extend-rib!) (set! rb35@extend-rib/nc! (lambda (reff@rib rf00@id rf01@label) (let ((rf05@sym (rb7f@id->sym rf00@id)) (rf06@mark* (rb4f@stx-mark* rf00@id))) (let ((rf09@sym* (rb1b@rib-sym* reff@rib))) (begin (if (rb2b@rib-cache reff@rib) (hashtable-update! (rb2b@rib-cache reff@rib) rf05@sym (lambda (rf0b@e) (cons (cons rf06@mark* rf01@label) rf0b@e)) '()) (void)) (rb1d@set-rib-sym*! reff@rib (cons rf05@sym rf09@sym*)) (rb21@set-rib-mark**! reff@rib (cons rf06@mark* (rb1f@rib-mark** reff@rib))) (rb25@set-rib-label*! reff@rib (cons rf01@label (rb23@rib-label* reff@rib)))))))) (set! r281a@rb35@extend-rib/nc! rb35@extend-rib/nc!) (set! rb37@make-rib-map (lambda (rf0d@sym*) (let ((rf0f@ht (make-eq-hashtable))) (let rf15@f ((rf11@i '0) (rf12@sym* rf0d@sym*)) (if (null? rf12@sym*) rf0f@ht (begin (hashtable-update! rf0f@ht (car rf12@sym*) (lambda (rf17@x) (cons rf11@i rf17@x)) '()) (rf15@f (+ rf11@i '1) (cdr rf12@sym*)))))))) (set! r281b@rb37@make-rib-map rb37@make-rib-map) (set! rb39@seal-rib! (lambda (rf19@rib) (let ((rf1b@sym* (rb1b@rib-sym* rf19@rib))) (if (not (null? rf1b@sym*)) (begin (rb1d@set-rib-sym*! rf19@rib (list->vector rf1b@sym*)) (rb21@set-rib-mark**! rf19@rib (list->vector (rb1f@rib-mark** rf19@rib))) (rb25@set-rib-label*! rf19@rib (list->vector (rb23@rib-label* rf19@rib))) (rb29@set-rib-sealed/freq! rf19@rib (rb37@make-rib-map rf1b@sym*))) (void))))) (set! r281c@rb39@seal-rib! rb39@seal-rib!) (set! rb3b@unseal-rib! (lambda (rf1d@rib) (if (rb27@rib-sealed/freq rf1d@rib) (begin (rb29@set-rib-sealed/freq! rf1d@rib '#f) (rb1d@set-rib-sym*! rf1d@rib (vector->list (rb1b@rib-sym* rf1d@rib))) (rb21@set-rib-mark**! rf1d@rib (vector->list (rb1f@rib-mark** rf1d@rib))) (rb25@set-rib-label*! rf1d@rib (vector->list (rb23@rib-label* rf1d@rib)))) (void)))) (set! r281d@rb3b@unseal-rib! rb3b@unseal-rib!) (set! rb3d@make-full-rib (lambda (rf1f@id* rf20@label*) (let ((rf23@r (make-simple-struct 'rib '6 (list (map rb7f@id->sym rf1f@id*) (map rb4f@stx-mark* rf1f@id*) rf20@label* '#f '#f)))) (begin (rb39@seal-rib! rf23@r) rf23@r)))) (set! r281e@rb3d@make-full-rib rb3d@make-full-rib) (set! rb3f@rp (r6ca@r5a5@make-record-printer 'stx (lambda (rf25@x rf26@p rf27@wr) (begin (display '"#<syntax " rf26@p) (write (rb91@stx->datum rf25@x) rf26@p) (let ((rf2b@expr (rb4b@stx-expr rf25@x))) (if (r6c1@r593@annotation? rf2b@expr) (let ((rf2d@src (r6c2@r595@annotation-source rf2b@expr))) (if (pair? rf2d@src) (begin (display '" [" rf26@p) (display (cdr rf2d@src) rf26@p) (display '" of " rf26@p) (display (car rf2d@src) rf26@p) (display '"]" rf26@p)) (void))) (void))) (display '">" rf26@p))))) (set! r281f@rb3f@rp rb3f@rp) (set! rb49@stx? (lambda (rf2f@x) (and (simple-struct? rf2f@x) (eq? (simple-struct-name rf2f@x) 'stx)))) (set! r2820@rb49@stx? rb49@stx?) (set! rb4b@stx-expr (lambda (rf31@x) (simple-struct-ref rf31@x '0))) (set! r2821@rb4b@stx-expr rb4b@stx-expr) (set! rb4d@set-stx-expr! (lambda (rf33@x rf34@val) (simple-struct-set! rf33@x '0 rf34@val))) (set! r2822@rb4d@set-stx-expr! rb4d@set-stx-expr!) (set! rb4f@stx-mark* (lambda (rf37@x) (simple-struct-ref rf37@x '1))) (set! r2823@rb4f@stx-mark* rb4f@stx-mark*) (set! rb51@set-stx-mark*! (lambda (rf39@x rf3a@val) (simple-struct-set! rf39@x '1 rf3a@val))) (set! r2824@rb51@set-stx-mark*! rb51@set-stx-mark*!) (set! rb53@stx-subst* (lambda (rf3d@x) (simple-struct-ref rf3d@x '2))) (set! r2825@rb53@stx-subst* rb53@stx-subst*) (set! rb55@set-stx-subst*! (lambda (rf3f@x rf40@val) (simple-struct-set! rf3f@x '2 rf40@val))) (set! r2826@rb55@set-stx-subst*! rb55@set-stx-subst*!) (set! rb57@stx-ae* (lambda (rf43@x) (simple-struct-ref rf43@x '3))) (set! r2827@rb57@stx-ae* rb57@stx-ae*) (set! rb59@set-stx-ae*! (lambda (rf45@x rf46@val) (simple-struct-set! rf45@x '3 rf46@val))) (set! r2828@rb59@set-stx-ae*! rb59@set-stx-ae*!) (set! rb5b@dummy '3) (set! r2829@rb5b@dummy rb5b@dummy) (set! rb5d@datum->stx (lambda (rf49@id rf4a@datum) (make-simple-struct 'stx '5 (list rf4a@datum (rb4f@stx-mark* rf49@id) (rb53@stx-subst* rf49@id) (rb57@stx-ae* rf49@id))))) (set! r282a@rb5d@datum->stx rb5d@datum->stx) (set! rb5f@gen-mark (lambda () (string '#\m))) (set! r282b@rb5f@gen-mark rb5f@gen-mark) (set! rb61@anti-mark '#f) (set! r282c@rb61@anti-mark rb61@anti-mark) (set! rb63@anti-mark? not) (set! r282d@rb63@anti-mark? rb63@anti-mark?) (set! rb65@mkstx (lambda (rf4d@e rf4e@m* rf4f@s* rf50@ae*) (if (and (rb49@stx? rf4d@e) (not (rb03@top-marked? rf4e@m*))) (call-with-values (lambda () (join-wraps rf4e@m* rf4f@s* rf50@ae* rf4d@e)) (lambda (rf5b@rf56 rf5c@rf58 rf5d@rf5a) (let ((rf61@ae* rf5d@rf5a) (rf62@s* rf5c@rf58) (rf63@m* rf5b@rf56)) (make-simple-struct 'stx '5 (list (rb4b@stx-expr rf4d@e) rf63@m* rf62@s* rf61@ae*))))) (make-simple-struct 'stx '5 (list rf4d@e rf4e@m* rf4f@s* rf50@ae*))))) (set! r282e@rb65@mkstx rb65@mkstx) (set! rb67@add-subst (lambda (rf67@subst rf68@e) (rb65@mkstx rf68@e '() (list rf67@subst) '()))) (set! r282f@rb67@add-subst rb67@add-subst) (set! rb69@add-mark (lambda (rf6b@mark rf6c@subst rf6d@expr rf6e@ae) (letrec* ((rf74@merge-ae* (lambda (rf9b@ls1 rf9c@ls2) (if (and (pair? rf9b@ls1) (pair? rf9c@ls2) (not (car rf9c@ls2))) (rf76@cancel rf9b@ls1 rf9c@ls2) (append rf9b@ls1 rf9c@ls2)))) (rf76@cancel (lambda (rf91@ls1 rf92@ls2) (let rf99@f ((rf95@x (car rf91@ls1)) (rf96@ls1 (cdr rf91@ls1))) (if (null? rf96@ls1) (cdr rf92@ls2) (cons rf95@x (rf99@f (car rf96@ls1) (cdr rf96@ls1))))))) (rf78@f (lambda (rf79@e rf7a@m rf7b@s1* rf7c@ae*) (if (pair? rf79@e) (let ((rf81@a (rf78@f (car rf79@e) rf7a@m rf7b@s1* rf7c@ae*)) (rf82@d (rf78@f (cdr rf79@e) rf7a@m rf7b@s1* rf7c@ae*))) (if (eq? rf81@a rf82@d) rf79@e (cons rf81@a rf82@d))) (if (vector? rf79@e) (let ((rf85@ls1 (vector->list rf79@e))) (let ((rf87@ls2 (map (lambda (rf89@x) (rf78@f rf89@x rf7a@m rf7b@s1* rf7c@ae*)) rf85@ls1))) (if (for-all eq? rf85@ls1 rf87@ls2) rf79@e (list->vector rf87@ls2)))) (if (rb49@stx? rf79@e) (let ((rf8b@m* (rb4f@stx-mark* rf79@e)) (rf8c@s2* (rb53@stx-subst* rf79@e))) (if (null? rf8b@m*) (rf78@f (rb4b@stx-expr rf79@e) rf7a@m (append rf7b@s1* rf8c@s2*) (rf74@merge-ae* rf7c@ae* (rb57@stx-ae* rf79@e))) (if (eq? (car rf8b@m*) rb61@anti-mark) (make-simple-struct 'stx '5 (list (rb4b@stx-expr rf79@e) (cdr rf8b@m*) (cdr (append rf7b@s1* rf8c@s2*)) (rf74@merge-ae* rf7c@ae* (rb57@stx-ae* rf79@e)))) (make-simple-struct 'stx '5 (list (rb4b@stx-expr rf79@e) (cons rf7a@m rf8b@m*) (let ((rf8f@s* (cons 'shift (append rf7b@s1* rf8c@s2*)))) (if rf6c@subst (cons rf6c@subst rf8f@s*) rf8f@s*)) (rf74@merge-ae* rf7c@ae* (rb57@stx-ae* rf79@e))))))) (if (symbol? rf79@e) (re64@syntax-violation '#f '"raw symbol encountered in output of macro" rf6d@expr rf79@e) (make-simple-struct 'stx '5 (list rf79@e (list rf7a@m) rf7b@s1* rf7c@ae*))))))))) (rb65@mkstx (rf78@f rf6d@expr rf6b@mark '() '()) '() '() (list rf6e@ae))))) (set! r2830@rb69@add-mark rb69@add-mark) (set! rb6b@syntax-kind? (lambda (rf9f@x rfa0@p?) (if (rb49@stx? rf9f@x) (rb6b@syntax-kind? (rb4b@stx-expr rf9f@x) rfa0@p?) (if (r6c1@r593@annotation? rf9f@x) (rb6b@syntax-kind? (r6c3@r597@annotation-expression rf9f@x) rfa0@p?) (rfa0@p? rf9f@x))))) (set! r2831@rb6b@syntax-kind? rb6b@syntax-kind?) (set! rb6d@syntax-vector->list (lambda (rfa3@x) (if (rb49@stx? rfa3@x) (let ((rfa5@ls (rb6d@syntax-vector->list (rb4b@stx-expr rfa3@x))) (rfa6@m* (rb4f@stx-mark* rfa3@x)) (rfa7@s* (rb53@stx-subst* rfa3@x)) (rfa8@ae* (rb57@stx-ae* rfa3@x))) (map (lambda (rfad@x) (rb65@mkstx rfad@x rfa6@m* rfa7@s* rfa8@ae*)) rfa5@ls)) (if (r6c1@r593@annotation? rfa3@x) (rb6d@syntax-vector->list (r6c3@r597@annotation-expression rfa3@x)) (if (vector? rfa3@x) (vector->list rfa3@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" rfa3@x)))))) (set! r2832@rb6d@syntax-vector->list rb6d@syntax-vector->list) (set! rb6f@syntax-pair? (lambda (rfaf@x) (rb6b@syntax-kind? rfaf@x pair?))) (set! r2833@rb6f@syntax-pair? rb6f@syntax-pair?) (set! rb71@syntax-vector? (lambda (rfb1@x) (rb6b@syntax-kind? rfb1@x vector?))) (set! r2834@rb71@syntax-vector? rb71@syntax-vector?) (set! rb73@syntax-null? (lambda (rfb3@x) (rb6b@syntax-kind? rfb3@x null?))) (set! r2835@rb73@syntax-null? rb73@syntax-null?) (set! rb75@syntax-list? (lambda (rfb5@x) (or (rb73@syntax-null? rfb5@x) (and (rb6f@syntax-pair? rfb5@x) (rb75@syntax-list? (rb79@syntax-cdr rfb5@x)))))) (set! r2836@rb75@syntax-list? rb75@syntax-list?) (set! rb77@syntax-car (lambda (rfb7@x) (if (rb49@stx? rfb7@x) (rb65@mkstx (rb77@syntax-car (rb4b@stx-expr rfb7@x)) (rb4f@stx-mark* rfb7@x) (rb53@stx-subst* rfb7@x) (rb57@stx-ae* rfb7@x)) (if (r6c1@r593@annotation? rfb7@x) (rb77@syntax-car (r6c3@r597@annotation-expression rfb7@x)) (if (pair? rfb7@x) (car rfb7@x) (assertion-violation 'syntax-car '"BUG: not a pair" rfb7@x)))))) (set! r2837@rb77@syntax-car rb77@syntax-car) (set! rb79@syntax-cdr (lambda (rfb9@x) (if (rb49@stx? rfb9@x) (rb65@mkstx (rb79@syntax-cdr (rb4b@stx-expr rfb9@x)) (rb4f@stx-mark* rfb9@x) (rb53@stx-subst* rfb9@x) (rb57@stx-ae* rfb9@x)) (if (r6c1@r593@annotation? rfb9@x) (rb79@syntax-cdr (r6c3@r597@annotation-expression rfb9@x)) (if (pair? rfb9@x) (cdr rfb9@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" rfb9@x)))))) (set! r2838@rb79@syntax-cdr rb79@syntax-cdr) (set! rb7b@syntax->list (lambda (rfbb@x) (if (rb6f@syntax-pair? rfbb@x) (cons (rb77@syntax-car rfbb@x) (rb7b@syntax->list (rb79@syntax-cdr rfbb@x))) (if (rb73@syntax-null? rfbb@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" rfbb@x))))) (set! r2839@rb7b@syntax->list rb7b@syntax->list) (set! rb7d@id? (lambda (rfbd@x) (and (rb49@stx? rfbd@x) (symbol? (rb4b@stx-expr rfbd@x))))) (set! r283a@rb7d@id? rb7d@id?) (set! rb7f@id->sym (lambda (rfbf@x) (rb4b@stx-expr rfbf@x))) (set! r283b@rb7f@id->sym rb7f@id->sym) (set! rb81@bound-id=? (lambda (rfc1@x rfc2@y) (and (eq? (rb7f@id->sym rfc1@x) (rb7f@id->sym rfc2@y)) (same-marks? (rb4f@stx-mark* rfc1@x) (rb4f@stx-mark* rfc2@y))))) (set! r283c@rb81@bound-id=? rb81@bound-id=?) (set! rb83@free-id=? (lambda (rfc5@i rfc6@j) (let ((rfc9@t0 (id->real-label rfc5@i)) (rfca@t1 (id->real-label rfc6@j))) (if (or rfc9@t0 rfca@t1) (eq? rfc9@t0 rfca@t1) (eq? (rb7f@id->sym rfc5@i) (rb7f@id->sym rfc6@j)))))) (set! r283d@rb83@free-id=? rb83@free-id=?) (set! rb85@valid-bound-ids? (lambda (rfcd@id*) (and (for-all rb7d@id? rfcd@id*) (rb87@distinct-bound-ids? rfcd@id*)))) (set! r283e@rb85@valid-bound-ids? rb85@valid-bound-ids?) (set! rb87@distinct-bound-ids? (lambda (rfcf@id*) (or (null? rfcf@id*) (and (not (rb89@bound-id-member? (car rfcf@id*) (cdr rfcf@id*))) (rb87@distinct-bound-ids? (cdr rfcf@id*)))))) (set! r283f@rb87@distinct-bound-ids? rb87@distinct-bound-ids?) (set! rb89@bound-id-member? (lambda (rfd1@id rfd2@id*) (and (pair? rfd2@id*) (or (rb81@bound-id=? rfd1@id (car rfd2@id*)) (rb89@bound-id-member? rfd1@id (cdr rfd2@id*)))))) (set! r2840@rb89@bound-id-member? rb89@bound-id-member?) (set! rb8b@self-evaluating? (lambda (rfd5@x) (or (number? rfd5@x) (string? rfd5@x) (char? rfd5@x) (boolean? rfd5@x) (regexp? rfd5@x) (bytevector? rfd5@x)))) (set! r2841@rb8b@self-evaluating? rb8b@self-evaluating?) (set! rb8d@strip-annotations (lambda (rfd7@x) (if (pair? rfd7@x) (cons (rb8d@strip-annotations (car rfd7@x)) (rb8d@strip-annotations (cdr rfd7@x))) (if (vector? rfd7@x) (vector-map rb8d@strip-annotations rfd7@x) (if (r6c1@r593@annotation? rfd7@x) (r6c0@r591@annotation-stripped rfd7@x) rfd7@x))))) (set! r2842@rb8d@strip-annotations rb8d@strip-annotations) (set! rb8f@strip (lambda (rfd9@x rfda@m*) (if (rb03@top-marked? rfda@m*) (if (or (r6c1@r593@annotation? rfd9@x) (and (pair? rfd9@x) (r6c1@r593@annotation? (car rfd9@x))) (and (vector? rfd9@x) (> (vector-length rfd9@x) '0) (r6c1@r593@annotation? (vector-ref rfd9@x '0)))) (rb8d@strip-annotations rfd9@x) rfd9@x) (let rfdf@f ((rfdd@x rfd9@x)) (if (rb49@stx? rfdd@x) (begin (if (pair? (rb4b@stx-expr rfdd@x)) (begin (set-source-info! (rb4b@stx-expr rfdd@x) '#f) (set-source-info! (cdr (rb4b@stx-expr rfdd@x)) '#f) (set-source-info! (car (rb4b@stx-expr rfdd@x)) '#f)) (void)) (rb8f@strip (rb4b@stx-expr rfdd@x) (rb4f@stx-mark* rfdd@x))) (if (r6c1@r593@annotation? rfdd@x) (r6c0@r591@annotation-stripped rfdd@x) (if (pair? rfdd@x) (let ((rfe1@a (rfdf@f (car rfdd@x))) (rfe2@d (rfdf@f (cdr rfdd@x)))) (if (and (eq? rfe1@a (car rfdd@x)) (eq? rfe2@d (cdr rfdd@x))) rfdd@x (cons rfe1@a rfe2@d))) (if (vector? rfdd@x) (let ((rfe5@old (vector->list rfdd@x))) (let ((rfe7@new (map rfdf@f rfe5@old))) (if (for-all eq? rfe5@old rfe7@new) rfdd@x (list->vector rfe7@new)))) rfdd@x)))))))) (set! r2843@rb8f@strip rb8f@strip) (set! rb91@stx->datum (lambda (rfe9@x) (rb8f@strip rfe9@x '()))) (set! r2844@rb91@stx->datum rb91@stx->datum) (set! rb93@id->label (lambda (rfeb@id) (or (id->real-label rfeb@id) (let ((rfed@t (re74@top-level-context))) (if rfed@t ((lambda (rfef@env) (let ((rff1@rib (re24@interaction-env-rib rfef@env))) (call-with-values (lambda () (rb0d@gen-define-label+loc rfeb@id rff1@rib)) (lambda (rff7@rff4 rff8@rff6) (let ((rffb@loc_ rff8@rff6) (rffc@lab rff7@rff4)) (begin (rb33@extend-rib! rff1@rib rfeb@id rffc@lab) rffc@lab)))))) rfed@t) '#f))))) (set! r2845@rb93@id->label rb93@id->label) (set! rb95@label->binding (lambda (rfff@x r1000@r) (let ((r1003@t (r998@r7e5@imported-label->binding rfff@x))) (if r1003@t ((lambda (r1005@b) (if (and (pair? r1005@b) (eq? (car r1005@b) '$core-rtd)) (cons '$rtd (map rd3a@bless (cdr r1005@b))) (if (and (pair? r1005@b) (eq? (car r1005@b) 'global-rtd)) (let ((r1007@lib (cadr r1005@b)) (r1008@loc (cddr r1005@b))) (cons '$rtd (symbol-value r1008@loc))) r1005@b))) r1003@t) (let ((r100b@t (assq rfff@x r1000@r))) (if r100b@t (cdr r100b@t) (let ((r100d@t (re74@top-level-context))) (if r100d@t ((lambda (r100f@env) (let ((r1011@t (assq rfff@x (re2c@interaction-env-locs r100f@env)))) (if r1011@t ((lambda (r1013@p) (cons* 'lexical (cdr r1013@p) '#f)) r1011@t) '(displaced-lexical . #f)))) r100d@t) '(displaced-lexical . #f))))))))) (set! r2846@rb95@label->binding rb95@label->binding) (set! rb97@make-binding cons) (set! r2847@rb97@make-binding rb97@make-binding) (set! rb99@binding-type car) (set! r2848@rb99@binding-type rb99@binding-type) (set! rb9b@binding-value cdr) (set! r2849@rb9b@binding-value rb9b@binding-value) (set! rb9d@raise-unbound-error (lambda (r1015@id) (re62@syntax-violation* '#f '"unbound identifier" r1015@id (make-undefined-violation)))) (set! r284a@rb9d@raise-unbound-error rb9d@raise-unbound-error) (set! rb9f@syntax-type (lambda (r1017@e r1018@r) (if (rb7d@id? r1017@e) (let ((r101b@id r1017@e)) (let ((r101d@label (rb93@id->label r101b@id))) (let ((r101f@b (rb95@label->binding r101d@label r1018@r))) (let ((r1021@type (rb99@binding-type r101f@b))) (begin (if (not r101d@label) (rb9d@raise-unbound-error r101b@id) (void)) (let ((r1023@t r1021@type)) (if (memv r1023@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values r1021@type (rb9b@binding-value r101f@b) r101b@id) (values 'other '#f '#f)))))))) (if (rb6f@syntax-pair? r1017@e) (let ((r1025@id (rb77@syntax-car r1017@e))) (if (rb7d@id? r1025@id) (let ((r1027@label (rb93@id->label r1025@id))) (let ((r1029@b (rb95@label->binding r1027@label r1018@r))) (let ((r102b@type (rb99@binding-type r1029@b))) (begin (if (not r1027@label) (rb9d@raise-unbound-error r1025@id) (void)) (let ((r102d@t r102b@type)) (if (memv r102d@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values r102b@type (rb9b@binding-value r1029@b) r1025@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((r102f@d (rb91@stx->datum r1017@e))) (if (rb8b@self-evaluating? r102f@d) (values 'constant r102f@d '#f) (values 'other '#f '#f))))))) (set! r284b@rb9f@syntax-type rb9f@syntax-type) (set! rbad@sanitize-binding (lambda (r1031@x r1032@src) (if (procedure? r1031@x) (cons* 'local-macro r1031@x r1032@src) (if (and (pair? r1031@x) (eq? (car r1031@x) 'macro!) (procedure? (cdr r1031@x))) (cons* 'local-macro! (cdr r1031@x) r1032@src) (if (and (pair? r1031@x) (eq? (car r1031@x) '$rtd)) r1031@x (assertion-violation 'expand '"invalid transformer" r1031@x)))))) (set! r284c@rbad@sanitize-binding rbad@sanitize-binding) (set! rbaf@make-variable-transformer (lambda (r1035@x) (if (procedure? r1035@x) (cons 'macro! r1035@x) (assertion-violation 'make-variable-transformer '"not a procedure" r1035@x)))) (set! r284d@rbaf@make-variable-transformer rbaf@make-variable-transformer) (set! rbb1@variable-transformer? (lambda (r1037@x) (and (pair? r1037@x) (eq? (car r1037@x) 'macro!) (procedure? (cdr r1037@x))))) (set! r284e@rbb1@variable-transformer? rbb1@variable-transformer?) (set! rbb3@variable-transformer-procedure (lambda (r1039@x) (if (rbb1@variable-transformer? r1039@x) (cdr r1039@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" r1039@x)))) (set! r284f@rbb3@variable-transformer-procedure rbb3@variable-transformer-procedure) (set! rbb5@make-eval-transformer (lambda (r103b@x) (rbad@sanitize-binding (eval-core (r723@r6db@expanded->core r103b@x)) r103b@x))) (set! r2850@rbb5@make-eval-transformer rbb5@make-eval-transformer) (set! rd06@parse-define (lambda (r103d@x) (let ((r103f@t r103d@x)) (let ((r1041@ls/false (rd84@syntax-dispatch r103f@t '(_ (any . any) any . each-any)))) (if (and r1041@ls/false (apply (lambda (r1043@id r1044@fmls r1045@b r1046@b*) (rb7d@id? r1043@id)) r1041@ls/false)) (apply (lambda (r104b@id r104c@fmls r104d@b r104e@b*) (begin (rdaa@verify-formals r104c@fmls r103d@x) (values r104b@id (cons 'defun (cons r104c@fmls (cons r104d@b r104e@b*)))))) r1041@ls/false) (let ((r1053@t r103f@t)) (let ((r1055@ls/false (rd84@syntax-dispatch r1053@t '(_ any any)))) (if (and r1055@ls/false (apply (lambda (r1057@id r1058@val) (rb7d@id? r1057@id)) r1055@ls/false)) (apply (lambda (r105b@id r105c@val) (values r105b@id (cons 'expr r105c@val))) r1055@ls/false) (let ((r105f@t r1053@t)) (let ((r1061@ls/false (rd84@syntax-dispatch r105f@t '(_ any)))) (if (and r1061@ls/false (apply (lambda (r1063@id) (rb7d@id? r1063@id)) r1061@ls/false)) (apply (lambda (r1065@id) (values r1065@id (cons 'expr (rd3a@bless '(void))))) r1061@ls/false) (re64@syntax-violation '#f '"invalid syntax" r105f@t)))))))))))) (set! r2851@rd06@parse-define rd06@parse-define) (set! rd08@parse-define-syntax (lambda (r1067@x) (let ((r1069@t r1067@x)) (let ((r106b@ls/false (rd84@syntax-dispatch r1069@t '(_ any any)))) (if (and r106b@ls/false (apply (lambda (r106d@id r106e@val) (rb7d@id? r106d@id)) r106b@ls/false)) (apply (lambda (r1071@id r1072@val) (values r1071@id r1072@val)) r106b@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1069@t)))))) (set! r2852@rd08@parse-define-syntax rd08@parse-define-syntax) (set! rd0a@scheme-stx-hashtable (make-eq-hashtable)) (set! r2853@rd0a@scheme-stx-hashtable rd0a@scheme-stx-hashtable) (set! rd0c@scheme-stx (lambda (r1075@sym) (or (hashtable-ref rd0a@scheme-stx-hashtable r1075@sym '#f) (let ((r1077@subst (r974@r79d@library-subst (r992@r7d9@find-library-by-name '(psyntax system $all))))) (let ((r1079@stx (make-simple-struct 'stx '5 (list r1075@sym rb01@top-mark* '() '())))) (let ((r107b@stx (let ((r107d@t (assq r1075@sym r1077@subst))) (if r107d@t ((lambda (r107f@x) (let ((r1081@name (car r107f@x)) (r1082@label (cdr r107f@x))) (rb67@add-subst (make-simple-struct 'rib '6 (list (list r1081@name) (list rb01@top-mark*) (list r1082@label) '#f '#f)) r1079@stx))) r107d@t) r1079@stx)))) (begin (hashtable-set! rd0a@scheme-stx-hashtable r1075@sym r107b@stx) r107b@stx))))))) (set! r2854@rd0c@scheme-stx rd0c@scheme-stx) (set! rd0e@lexical-var car) (set! r2855@rd0e@lexical-var rd0e@lexical-var) (set! rd10@lexical-mutable? cdr) (set! r2856@rd10@lexical-mutable? rd10@lexical-mutable?) (set! rd12@set-lexical-mutable! set-cdr!) (set! r2857@rd12@set-lexical-mutable! rd12@set-lexical-mutable!) (set! rd14@add-lexical (lambda (r1085@lab r1086@lex r1087@r) (cons (cons* r1085@lab 'lexical r1086@lex '#f) r1087@r))) (set! r2858@rd14@add-lexical rd14@add-lexical) (set! rd16@add-lexicals (lambda (r108b@lab* r108c@lex* r108d@r) (if (null? r108b@lab*) r108d@r (rd16@add-lexicals (cdr r108b@lab*) (cdr r108c@lex*) (rd14@add-lexical (car r108b@lab*) (car r108c@lex*) r108d@r))))) (set! r2859@rd16@add-lexicals rd16@add-lexicals) (set! rd18@letrec-helper (lambda (r1091@e r1092@r r1093@mr r1094@build) (let ((r1099@t r1091@e)) (let ((r109b@ls/false (rd84@syntax-dispatch r1099@t '(_ #(each (any any)) any . each-any)))) (if r109b@ls/false (apply (lambda (r109d@lhs* r109e@rhs* r109f@b r10a0@b*) (if (not (rb85@valid-bound-ids? r109d@lhs*)) (rd3e@invalid-fmls-error r1091@e r109d@lhs*) (let ((r10a5@lex* (map rb05@gen-lexical r109d@lhs*)) (r10a6@lab* (map rb09@gen-label r109d@lhs*))) (let ((r10a9@rib (rb3d@make-full-rib r109d@lhs* r10a6@lab*)) (r10aa@r (rd16@add-lexicals r10a6@lab* r10a5@lex* r1092@r))) (let ((r10ad@body (rdbc@chi-internal (rb67@add-subst r10a9@rib (cons r109f@b r10a0@b*)) r10aa@r r1093@mr)) (r10ae@rhs* (rda2@chi-expr* (map (lambda (r10b1@x) (rb67@add-subst r10a9@rib r10b1@x)) r109e@rhs*) r10aa@r r1093@mr))) (r1094@build '#f r10a5@lex* r10ae@rhs* r10ad@body)))))) r109b@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1099@t)))))) (set! r285a@rd18@letrec-helper rd18@letrec-helper) (set! rd1a@let-transformer (lambda (r10b3@e r10b4@r r10b5@mr) (let ((r10b9@t r10b3@e)) (let ((r10bb@ls/false (rd84@syntax-dispatch r10b9@t '(_ #(each (any any)) any . each-any)))) (if r10bb@ls/false (apply (lambda (r10bd@lhs* r10be@rhs* r10bf@b r10c0@b*) (if (not (rb85@valid-bound-ids? r10bd@lhs*)) (rd3e@invalid-fmls-error r10b3@e r10bd@lhs*) (let ((r10c5@lex* (map rb05@gen-lexical r10bd@lhs*)) (r10c6@lab* (map rb09@gen-label r10bd@lhs*)) (r10c7@rhs* (rda2@chi-expr* r10be@rhs* r10b4@r r10b5@mr))) (let ((r10cb@rib (rb3d@make-full-rib r10bd@lhs* r10c6@lab*)) (r10cc@r (rd16@add-lexicals r10c6@lab* r10c5@lex* r10b4@r))) (let ((r10cf@body (rdbc@chi-internal (rb67@add-subst r10cb@rib (cons r10bf@b r10c0@b*)) r10cc@r r10b5@mr))) (rae5@ra48@build-let '#f r10c5@lex* r10c7@rhs* r10cf@body)))))) r10bb@ls/false) (let ((r10d1@t r10b9@t)) (let ((r10d3@ls/false (rd84@syntax-dispatch r10d1@t '(_ any #(each (any any)) any . each-any)))) (if r10d3@ls/false (apply (lambda (r10d5@loop r10d6@lhs* r10d7@rhs* r10d8@b r10d9@b*) (if (not (rb85@valid-bound-ids? r10d6@lhs*)) (rd3e@invalid-fmls-error r10b3@e r10d6@lhs*) (let ((r10df@lex* (map rb05@gen-lexical r10d6@lhs*)) (r10e0@lab* (map rb09@gen-label r10d6@lhs*)) (r10e1@rhs* (rda2@chi-expr* r10d7@rhs* r10b4@r r10b5@mr)) (r10e2@loop-lex (rb05@gen-lexical r10d5@loop)) (r10e3@loop-lab (rb09@gen-label r10d5@loop))) (let ((r10e9@loop-rib (rb3d@make-full-rib (list r10d5@loop) (list r10e3@loop-lab))) (r10ea@rib (rb3d@make-full-rib r10d6@lhs* r10e0@lab*)) (r10eb@r (rd16@add-lexicals (cons r10e3@loop-lab r10e0@lab*) (cons r10e2@loop-lex r10df@lex*) r10b4@r))) (let ((r10ef@body (rdbc@chi-internal (rb67@add-subst r10e9@loop-rib (rb67@add-subst r10ea@rib (cons r10d8@b r10d9@b*))) r10eb@r r10b5@mr))) (rae6@ra4a@build-named-let '#f r10e2@loop-lex r10df@lex* r10e1@rhs* r10ef@body)))))) r10d3@ls/false) (re64@syntax-violation '#f '"invalid syntax" r10d1@t))))))))) (set! r285b@rd1a@let-transformer rd1a@let-transformer) (set! rd1c@letrec-transformer (lambda (r10f1@e r10f2@r r10f3@mr) (rd18@letrec-helper r10f1@e r10f2@r r10f3@mr rae4@ra46@build-letrec))) (set! r285c@rd1c@letrec-transformer rd1c@letrec-transformer) (set! rd1e@letrec*-transformer (lambda (r10f7@e r10f8@r r10f9@mr) (rd18@letrec-helper r10f7@e r10f8@r r10f9@mr rae7@ra4c@build-letrec*))) (set! r285d@rd1e@letrec*-transformer rd1e@letrec*-transformer) (set! rd20@fluid-let-syntax-transformer (lambda (r10fd@e r10fe@r r10ff@mr) (letrec* ((r1104@lookup (lambda (r1117@x) (or (rb93@id->label r1117@x) (re64@syntax-violation '#f '"unbound identifier" r10fd@e r1117@x))))) (let ((r1105@t r10fd@e)) (let ((r1107@ls/false (rd84@syntax-dispatch r1105@t '(_ #(each (any any)) any . each-any)))) (if r1107@ls/false (apply (lambda (r1109@lhs* r110a@rhs* r110b@b r110c@b*) (if (not (rb85@valid-bound-ids? r1109@lhs*)) (rd3e@invalid-fmls-error r10fd@e r1109@lhs*) (let ((r1111@lab* (map r1104@lookup r1109@lhs*)) (r1112@rhs* (map (lambda (r1115@x) (rbb5@make-eval-transformer (rdde@expand-transformer r1115@x r10ff@mr))) r110a@rhs*))) (rdbc@chi-internal (cons r110b@b r110c@b*) (append (map cons r1111@lab* r1112@rhs*) r10fe@r) (append (map cons r1111@lab* r1112@rhs*) r10ff@mr))))) r1107@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1105@t))))))) (set! r285e@rd20@fluid-let-syntax-transformer rd20@fluid-let-syntax-transformer) (set! rd22@type-descriptor-transformer (lambda (r1119@e r111a@r r111b@mr) (let ((r111f@t r1119@e)) (let ((r1121@ls/false (rd84@syntax-dispatch r111f@t '(_ any)))) (if (and r1121@ls/false (apply (lambda (r1123@id) (rb7d@id? r1123@id)) r1121@ls/false)) (apply (lambda (r1125@id) (let ((r1127@lab (rb93@id->label r1125@id))) (let ((r1129@b (rb95@label->binding r1127@lab r111a@r))) (let ((r112b@type (rb99@binding-type r1129@b))) (begin (if (not r1127@lab) (rb9d@raise-unbound-error r1125@id) (void)) (if (not (and (eq? r112b@type '$rtd) (not (list? (rb9b@binding-value r1129@b))))) (re64@syntax-violation '#f '"not a record type" r1119@e) (void)) (list 'quote (rb9b@binding-value r1129@b))))))) r1121@ls/false) (re64@syntax-violation '#f '"invalid syntax" r111f@t)))))) (set! r285f@rd22@type-descriptor-transformer rd22@type-descriptor-transformer) (set! rd24@record-type-descriptor-transformer (lambda (r112d@e r112e@r r112f@mr) (let ((r1133@t r112d@e)) (let ((r1135@ls/false (rd84@syntax-dispatch r1133@t '(_ any)))) (if (and r1135@ls/false (apply (lambda (r1137@id) (rb7d@id? r1137@id)) r1135@ls/false)) (apply (lambda (r1139@id) (let ((r113b@lab (rb93@id->label r1139@id))) (let ((r113d@b (rb95@label->binding r113b@lab r112e@r))) (let ((r113f@type (rb99@binding-type r113d@b))) (begin (if (not r113b@lab) (rb9d@raise-unbound-error r1139@id) (void)) (if (not (and (eq? r113f@type '$rtd) (list? (rb9b@binding-value r113d@b)))) (re64@syntax-violation '#f '"not a record type" r112d@e) (void)) (rda6@chi-expr (car (rb9b@binding-value r113d@b)) r112e@r r112f@mr)))))) r1135@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1133@t)))))) (set! r2860@rd24@record-type-descriptor-transformer rd24@record-type-descriptor-transformer) (set! rd26@record-constructor-descriptor-transformer (lambda (r1141@e r1142@r r1143@mr) (let ((r1147@t r1141@e)) (let ((r1149@ls/false (rd84@syntax-dispatch r1147@t '(_ any)))) (if (and r1149@ls/false (apply (lambda (r114b@id) (rb7d@id? r114b@id)) r1149@ls/false)) (apply (lambda (r114d@id) (let ((r114f@lab (rb93@id->label r114d@id))) (let ((r1151@b (rb95@label->binding r114f@lab r1142@r))) (let ((r1153@type (rb99@binding-type r1151@b))) (begin (if (not r114f@lab) (rb9d@raise-unbound-error r114d@id) (void)) (if (not (and (eq? r1153@type '$rtd) (list? (rb9b@binding-value r1151@b)))) (re64@syntax-violation '#f '"invalid type" r1141@e) (void)) (rda6@chi-expr (cadr (rb9b@binding-value r1151@b)) r1142@r r1143@mr)))))) r1149@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1147@t)))))) (set! r2861@rd26@record-constructor-descriptor-transformer rd26@record-constructor-descriptor-transformer) (set! rd28@when-macro (lambda (r1155@e) (let ((r1157@t r1155@e)) (let ((r1159@ls/false (rd84@syntax-dispatch r1157@t '(_ any any . each-any)))) (if r1159@ls/false (apply (lambda (r115b@test r115c@e r115d@e*) (rd3a@bless (list 'if r115b@test (cons 'begin (cons r115c@e r115d@e*))))) r1159@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1157@t)))))) (set! r2862@rd28@when-macro rd28@when-macro) (set! rd2a@unless-macro (lambda (r1161@e) (let ((r1163@t r1161@e)) (let ((r1165@ls/false (rd84@syntax-dispatch r1163@t '(_ any any . each-any)))) (if r1165@ls/false (apply (lambda (r1167@test r1168@e r1169@e*) (rd3a@bless (list 'if (list 'not r1167@test) (cons 'begin (cons r1168@e r1169@e*))))) r1165@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1163@t)))))) (set! r2863@rd2a@unless-macro rd2a@unless-macro) (set! rd2c@if-transformer (lambda (r116d@e r116e@r r116f@mr) (let ((r1173@t r116d@e)) (let ((r1175@ls/false (rd84@syntax-dispatch r1173@t '(_ any any any)))) (if r1175@ls/false (apply (lambda (r1177@e0 r1178@e1 r1179@e2) (list 'if (rda6@chi-expr r1177@e0 r116e@r r116f@mr) (rda6@chi-expr r1178@e1 r116e@r r116f@mr) (rda6@chi-expr r1179@e2 r116e@r r116f@mr))) r1175@ls/false) (let ((r117d@t r1173@t)) (let ((r117f@ls/false (rd84@syntax-dispatch r117d@t '(_ any any)))) (if r117f@ls/false (apply (lambda (r1181@e0 r1182@e1) (list 'if (rda6@chi-expr r1181@e0 r116e@r r116f@mr) (rda6@chi-expr r1182@e1 r116e@r r116f@mr) (rae3@ra44@build-void))) r117f@ls/false) (re64@syntax-violation '#f '"invalid syntax" r117d@t))))))))) (set! r2864@rd2c@if-transformer rd2c@if-transformer) (set! rd2e@and-transformer (lambda (r1185@e r1186@r r1187@mr) (let ((r118b@t r1185@e)) (let ((r118d@ls/false (rd84@syntax-dispatch r118b@t '(_ . each-any)))) (if r118d@ls/false (apply (lambda (r118f@e*) (cons 'and (rda2@chi-expr* r118f@e* r1186@r r1187@mr))) r118d@ls/false) (re64@syntax-violation '#f '"invalid syntax" r118b@t)))))) (set! r2865@rd2e@and-transformer rd2e@and-transformer) (set! rd30@or-transformer (lambda (r1191@e r1192@r r1193@mr) (let ((r1197@t r1191@e)) (let ((r1199@ls/false (rd84@syntax-dispatch r1197@t '(_ . each-any)))) (if r1199@ls/false (apply (lambda (r119b@e*) (cons 'or (rda2@chi-expr* r119b@e* r1192@r r1193@mr))) r1199@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1197@t)))))) (set! r2866@rd30@or-transformer rd30@or-transformer) (set! rd32@case-macro (lambda (r119d@e) (letrec* ((r11a0@build-last (lambda (r11c7@cls) (let ((r11c9@t r11c7@cls)) (let ((r11cb@ls/false (rd84@syntax-dispatch r11c9@t '(#(scheme-id else) any . each-any)))) (if r11cb@ls/false (apply (lambda (r11cd@e r11ce@e*) (cons 'begin (cons r11cd@e r11ce@e*))) r11cb@ls/false) (let ((r11d1@t r11c9@t)) (let ((r11d3@ls/false (rd84@syntax-dispatch r11d1@t '_))) (if r11d3@ls/false (apply (lambda () (r11a2@build-one r11c7@cls '(if #f #f))) r11d3@ls/false) (re64@syntax-violation '#f '"invalid syntax" r11d1@t))))))))) (r11a2@build-one (lambda (r11b9@cls r11ba@k) (let ((r11bd@t r11b9@cls)) (let ((r11bf@ls/false (rd84@syntax-dispatch r11bd@t '(each-any any . each-any)))) (if r11bf@ls/false (apply (lambda (r11c1@d* r11c2@e r11c3@e*) (list 'if (list 'memv 't (list 'quote r11c1@d*)) (cons 'begin (cons r11c2@e r11c3@e*)) r11ba@k)) r11bf@ls/false) (re64@syntax-violation '#f '"invalid syntax" r11bd@t))))))) (let ((r11a3@t r119d@e)) (let ((r11a5@ls/false (rd84@syntax-dispatch r11a3@t '(_ any)))) (if r11a5@ls/false (apply (lambda (r11a7@expr) (rd3a@bless (cons 'let (cons (list (list 't r11a7@expr)) '((if #f #f)))))) r11a5@ls/false) (let ((r11a9@t r11a3@t)) (let ((r11ab@ls/false (rd84@syntax-dispatch r11a9@t '(_ any any . each-any)))) (if r11ab@ls/false (apply (lambda (r11ad@expr r11ae@cls r11af@cls*) (rd3a@bless (list 'let (list (list 't r11ad@expr)) (let r11b7@f ((r11b3@cls r11ae@cls) (r11b4@cls* r11af@cls*)) (if (null? r11b4@cls*) (r11a0@build-last r11b3@cls) (r11a2@build-one r11b3@cls (r11b7@f (car r11b4@cls*) (cdr r11b4@cls*)))))))) r11ab@ls/false) (re64@syntax-violation '#f '"invalid syntax" r11a9@t)))))))))) (set! r2867@rd32@case-macro rd32@case-macro) (set! rd34@quote-transformer (lambda (r11d5@e r11d6@r r11d7@mr) (let ((r11db@t r11d5@e)) (let ((r11dd@ls/false (rd84@syntax-dispatch r11db@t '(_ any)))) (if r11dd@ls/false (apply (lambda (r11df@datum) (list 'quote (rb91@stx->datum r11df@datum))) r11dd@ls/false) (re64@syntax-violation '#f '"invalid syntax" r11db@t)))))) (set! r2868@rd34@quote-transformer rd34@quote-transformer) (set! rd36@case-lambda-transformer (lambda (r11e1@e r11e2@r r11e3@mr) (let ((r11e7@t r11e1@e)) (let ((r11e9@ls/false (rd84@syntax-dispatch r11e7@t '(_ . #(each (any any . each-any)))))) (if r11e9@ls/false (apply (lambda (r11eb@fmls* r11ec@b* r11ed@b**) (call-with-values (lambda () (rdae@chi-lambda-clause* r11e1@e r11eb@fmls* (map cons r11ec@b* r11ed@b**) r11e2@r r11e3@mr)) (lambda (r11f5@r11f2 r11f6@r11f4) (let ((r11f9@body* r11f6@r11f4) (r11fa@fmls* r11f5@r11f2)) (rae1@ra14@build-case-lambda '#f r11fa@fmls* r11f9@body*))))) r11e9@ls/false) (re64@syntax-violation '#f '"invalid syntax" r11e7@t)))))) (set! r2869@rd36@case-lambda-transformer rd36@case-lambda-transformer) (set! rd38@lambda-transformer (lambda (r11fd@e r11fe@r r11ff@mr) (let ((r1203@t r11fd@e)) (let ((r1205@ls/false (rd84@syntax-dispatch r1203@t '(_ any any . each-any)))) (if r1205@ls/false (apply (lambda (r1207@fmls r1208@b r1209@b*) (call-with-values (lambda () (rdac@chi-lambda-clause r11fd@e r1207@fmls (cons r1208@b r1209@b*) r11fe@r r11ff@mr)) (lambda (r1211@r120e r1212@r1210) (let ((r1215@body r1212@r1210) (r1216@fmls r1211@r120e)) (rae0@ra12@build-lambda '#f r1216@fmls r1215@body))))) r1205@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1203@t)))))) (set! r286a@rd38@lambda-transformer rd38@lambda-transformer) (set! rd3a@bless (lambda (r1219@x) (rb65@mkstx (let r121d@f ((r121b@x r1219@x)) (if (rb49@stx? r121b@x) r121b@x (if (pair? r121b@x) (cons (r121d@f (car r121b@x)) (r121d@f (cdr r121b@x))) (if (symbol? r121b@x) (rd0c@scheme-stx r121b@x) (if (vector? r121b@x) (vector-map r121d@f r121b@x) r121b@x))))) '() '() '()))) (set! r286b@rd3a@bless rd3a@bless) (set! rd3c@with-syntax-macro (lambda (r121f@e) (let ((r1221@t r121f@e)) (let ((r1223@ls/false (rd84@syntax-dispatch r1221@t '(_ #(each (any any)) any . each-any)))) (if r1223@ls/false (apply (lambda (r1225@pat* r1226@expr* r1227@b r1228@b*) (let ((r122d@idn* (let r1231@f ((r122f@pat* r1225@pat*)) (if (null? r122f@pat*) '() (call-with-values (lambda () (rd82@convert-pattern (car r122f@pat*) '())) (lambda (r1237@r1234 r1238@r1236) (let ((r123b@idn* r1238@r1236) (r123c@pat r1237@r1234)) (append r123b@idn* (r1231@f (cdr r122f@pat*)))))))))) (begin (rdaa@verify-formals (map car r122d@idn*) r121f@e) (let ((r123f@t* (re52@generate-temporaries r1226@expr*))) (rd3a@bless (list 'let (map list r123f@t* r1226@expr*) (let r1245@f ((r1241@pat* r1225@pat*) (r1242@t* r123f@t*)) (if (null? r1241@pat*) (cons 'let (cons '() (cons r1227@b r1228@b*))) (list 'syntax-case (car r1242@t*) '() (list (car r1241@pat*) (r1245@f (cdr r1241@pat*) (cdr r1242@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car r1241@pat*)) (car r1242@t*)))))))))))) r1223@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1221@t)))))) (set! r286c@rd3c@with-syntax-macro rd3c@with-syntax-macro) (set! rd3e@invalid-fmls-error (lambda (r1247@stx r1248@fmls) (let ((r124b@t r1248@fmls)) (let ((r124d@ls/false (rd84@syntax-dispatch r124b@t '#(each+ any () any)))) (if r124d@ls/false (apply (lambda (r124f@id* r1250@last) (let r1255@f ((r1253@id* (if (rb7d@id? r1250@last) (cons r1250@last r124f@id*) (if (rb73@syntax-null? r1250@last) r124f@id* (re64@syntax-violation '#f '"not an identifier" r1247@stx r1250@last))))) (if (null? r1253@id*) (values) (if (not (rb7d@id? (car r1253@id*))) (re64@syntax-violation '#f '"not an identifier" r1247@stx (car r1253@id*)) (begin (r1255@f (cdr r1253@id*)) (if (rb89@bound-id-member? (car r1253@id*) (cdr r1253@id*)) (re64@syntax-violation '#f '"duplicate binding" r1247@stx (car r1253@id*)) (void))))))) r124d@ls/false) (let ((r1257@t r124b@t)) (let ((r1259@ls/false (rd84@syntax-dispatch r1257@t '_))) (if r1259@ls/false (apply (lambda () (re64@syntax-violation '#f '"malformed binding form" r1247@stx r1248@fmls)) r1259@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1257@t))))))))) (set! r286d@rd3e@invalid-fmls-error rd3e@invalid-fmls-error) (set! rd40@let-macro (lambda (r125b@stx) (let ((r125d@t r125b@stx)) (let ((r125f@ls/false (rd84@syntax-dispatch r125d@t '(_ #(each (any any)) any . each-any)))) (if r125f@ls/false (apply (lambda (r1261@lhs* r1262@rhs* r1263@b r1264@b*) (if (rb85@valid-bound-ids? r1261@lhs*) (rd3a@bless (cons (cons 'lambda (cons r1261@lhs* (cons r1263@b r1264@b*))) r1262@rhs*)) (rd3e@invalid-fmls-error r125b@stx r1261@lhs*))) r125f@ls/false) (let ((r1269@t r125d@t)) (let ((r126b@ls/false (rd84@syntax-dispatch r1269@t '(_ any #(each (any any)) any . each-any)))) (if (and r126b@ls/false (apply (lambda (r126d@f r126e@lhs* r126f@rhs* r1270@b r1271@b*) (rb7d@id? r126d@f)) r126b@ls/false)) (apply (lambda (r1277@f r1278@lhs* r1279@rhs* r127a@b r127b@b*) (if (rb85@valid-bound-ids? r1278@lhs*) (rd3a@bless (cons (list 'letrec (list (list r1277@f (cons 'lambda (cons r1278@lhs* (cons r127a@b r127b@b*))))) r1277@f) r1279@rhs*)) (rd3e@invalid-fmls-error r125b@stx r1278@lhs*))) r126b@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1269@t))))))))) (set! r286e@rd40@let-macro rd40@let-macro) (set! rd42@let-values-macro (lambda (r1281@stx) (letrec* ((r1284@rename (lambda (r12e9@x r12ea@old* r12eb@new*) (begin (if (not (rb7d@id? r12e9@x)) (re64@syntax-violation '#f '"not an indentifier" r1281@stx r12e9@x) (void)) (if (rb89@bound-id-member? r12e9@x r12ea@old*) (re64@syntax-violation '#f '"duplicate binding" r1281@stx r12e9@x) (void)) (let ((r12ef@y (gensym (re6a@syntax->datum r12e9@x)))) (values r12ef@y (cons r12e9@x r12ea@old*) (cons r12ef@y r12eb@new*)))))) (r1286@rename* (lambda (r12d7@x* r12d8@old* r12d9@new*) (if (null? r12d7@x*) (values '() r12d8@old* r12d9@new*) (call-with-values (lambda () (r1284@rename (car r12d7@x*) r12d8@old* r12d9@new*)) (lambda (r12dd@x r12de@old* r12df@new*) (call-with-values (lambda () (r1286@rename* (cdr r12d7@x*) r12de@old* r12df@new*)) (lambda (r12e3@x* r12e4@old* r12e5@new*) (values (cons r12dd@x r12e3@x*) r12e4@old* r12e5@new*))))))))) (let ((r1287@t r1281@stx)) (let ((r1289@ls/false (rd84@syntax-dispatch r1287@t '(_ () any . each-any)))) (if r1289@ls/false (apply (lambda (r128b@b r128c@b*) (cons* (rd3a@bless 'let) '() r128b@b r128c@b*)) r1289@ls/false) (let ((r128f@t r1287@t)) (let ((r1291@ls/false (rd84@syntax-dispatch r128f@t '(_ #(each (any any)) any . each-any)))) (if r1291@ls/false (apply (lambda (r1293@lhs* r1294@rhs* r1295@b r1296@b*) (rd3a@bless (let r12a3@f ((r129b@lhs* r1293@lhs*) (r129c@rhs* r1294@rhs*) (r129d@old* '()) (r129e@new* '())) (if (null? r129b@lhs*) (cons 'let (cons (map list r129d@old* r129e@new*) (cons r1295@b r1296@b*))) (let ((r12a5@t (car r129b@lhs*))) (let ((r12a7@ls/false (rd84@syntax-dispatch r12a5@t 'each-any))) (if r12a7@ls/false (apply (lambda (r12a9@x*) (call-with-values (lambda () (r1286@rename* r12a9@x* r129d@old* r129e@new*)) (lambda (r12b1@r12ac r12b2@r12ae r12b3@r12b0) (let ((r12b7@new* r12b3@r12b0) (r12b8@old* r12b2@r12ae) (r12b9@y* r12b1@r12ac)) (list 'call-with-values (list 'lambda '() (car r129c@rhs*)) (list 'lambda r12b9@y* (r12a3@f (cdr r129b@lhs*) (cdr r129c@rhs*) r12b8@old* r12b7@new*))))))) r12a7@ls/false) (let ((r12bd@t r12a5@t)) (let ((r12bf@ls/false (rd84@syntax-dispatch r12bd@t '#(each+ any () any)))) (if r12bf@ls/false (apply (lambda (r12c1@x* r12c2@x) (call-with-values (lambda () (r1284@rename r12c2@x r129d@old* r129e@new*)) (lambda (r12c5@y r12c6@old* r12c7@new*) (call-with-values (lambda () (r1286@rename* r12c1@x* r12c6@old* r12c7@new*)) (lambda (r12cb@y* r12cc@old* r12cd@new*) (list 'call-with-values (list 'lambda '() (car r129c@rhs*)) (list 'lambda (append r12cb@y* r12c5@y) (r12a3@f (cdr r129b@lhs*) (cdr r129c@rhs*) r12cc@old* r12cd@new*)))))))) r12bf@ls/false) (let ((r12d1@t r12bd@t)) (let ((r12d3@ls/false (rd84@syntax-dispatch r12d1@t 'any))) (if r12d3@ls/false (apply (lambda (r12d5@others) (re64@syntax-violation '#f '"malformed bindings" r1281@stx r12d5@others)) r12d3@ls/false) (re64@syntax-violation '#f '"invalid syntax" r12d1@t)))))))))))))) r1291@ls/false) (re64@syntax-violation '#f '"invalid syntax" r128f@t)))))))))) (set! r286f@rd42@let-values-macro rd42@let-values-macro) (set! rd44@let*-values-macro (lambda (r12f1@stx) (letrec* ((r12f4@check (lambda (r1323@x*) (if (not (null? r1323@x*)) (let ((r1325@x (car r1323@x*))) (begin (if (not (rb7d@id? r1325@x)) (re64@syntax-violation '#f '"not an identifier" r12f1@stx r1325@x) (void)) (r12f4@check (cdr r1323@x*)) (if (rb89@bound-id-member? r1325@x (cdr r1323@x*)) (re64@syntax-violation '#f '"duplicate identifier" r12f1@stx r1325@x) (void)))) (void))))) (let ((r12f5@t r12f1@stx)) (let ((r12f7@ls/false (rd84@syntax-dispatch r12f5@t '(_ () any . each-any)))) (if r12f7@ls/false (apply (lambda (r12f9@b r12fa@b*) (cons* (rd3a@bless 'let) '() r12f9@b r12fa@b*)) r12f7@ls/false) (let ((r12fd@t r12f5@t)) (let ((r12ff@ls/false (rd84@syntax-dispatch r12fd@t '(_ #(each (any any)) any . each-any)))) (if r12ff@ls/false (apply (lambda (r1301@lhs* r1302@rhs* r1303@b r1304@b*) (rd3a@bless (let r130d@f ((r1309@lhs* r1301@lhs*) (r130a@rhs* r1302@rhs*)) (if (null? r1309@lhs*) (cons 'begin (cons r1303@b r1304@b*)) (let ((r130f@t (car r1309@lhs*))) (let ((r1311@ls/false (rd84@syntax-dispatch r130f@t 'each-any))) (if r1311@ls/false (apply (lambda (r1313@x*) (begin (r12f4@check r1313@x*) (list 'call-with-values (list 'lambda '() (car r130a@rhs*)) (list 'lambda r1313@x* (r130d@f (cdr r1309@lhs*) (cdr r130a@rhs*)))))) r1311@ls/false) (let ((r1315@t r130f@t)) (let ((r1317@ls/false (rd84@syntax-dispatch r1315@t '#(each+ any () any)))) (if r1317@ls/false (apply (lambda (r1319@x* r131a@x) (begin (r12f4@check (cons r131a@x r1319@x*)) (list 'call-with-values (list 'lambda '() (car r130a@rhs*)) (list 'lambda (append r1319@x* r131a@x) (r130d@f (cdr r1309@lhs*) (cdr r130a@rhs*)))))) r1317@ls/false) (let ((r131d@t r1315@t)) (let ((r131f@ls/false (rd84@syntax-dispatch r131d@t 'any))) (if r131f@ls/false (apply (lambda (r1321@others) (re64@syntax-violation '#f '"malformed bindings" r12f1@stx r1321@others)) r131f@ls/false) (re64@syntax-violation '#f '"invalid syntax" r131d@t)))))))))))))) r12ff@ls/false) (re64@syntax-violation '#f '"invalid syntax" r12fd@t)))))))))) (set! r2870@rd44@let*-values-macro rd44@let*-values-macro) (set! rd46@trace-lambda-macro (lambda (r1327@stx) (let ((r1329@t r1327@stx)) (let ((r132b@ls/false (rd84@syntax-dispatch r1329@t '(_ any each-any any . each-any)))) (if r132b@ls/false (apply (lambda (r132d@who r132e@fmls r132f@b r1330@b*) (if (rb85@valid-bound-ids? r132e@fmls) (rd3a@bless (list 'make-traced-procedure (list 'quote r132d@who) (cons 'lambda (cons r132e@fmls (cons r132f@b r1330@b*))))) (rd3e@invalid-fmls-error r1327@stx r132e@fmls))) r132b@ls/false) (let ((r1335@t r1329@t)) (let ((r1337@ls/false (rd84@syntax-dispatch r1335@t '(_ any #(each+ any () any) any . each-any)))) (if r1337@ls/false (apply (lambda (r1339@who r133a@fmls r133b@last r133c@b r133d@b*) (if (rb85@valid-bound-ids? (cons r133b@last r133a@fmls)) (rd3a@bless (list 'make-traced-procedure (list 'quote r1339@who) (cons 'lambda (cons (append r133a@fmls r133b@last) (cons r133c@b r133d@b*))))) (rd3e@invalid-fmls-error r1327@stx (append r133a@fmls r133b@last)))) r1337@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1335@t))))))))) (set! r2871@rd46@trace-lambda-macro rd46@trace-lambda-macro) (set! rd48@trace-define-macro (lambda (r1343@stx) (let ((r1345@t r1343@stx)) (let ((r1347@ls/false (rd84@syntax-dispatch r1345@t '(_ (any . each-any) any . each-any)))) (if r1347@ls/false (apply (lambda (r1349@who r134a@fmls r134b@b r134c@b*) (if (rb85@valid-bound-ids? r134a@fmls) (rd3a@bless (list 'define r1349@who (list 'make-traced-procedure (list 'quote r1349@who) (cons 'lambda (cons r134a@fmls (cons r134b@b r134c@b*)))))) (rd3e@invalid-fmls-error r1343@stx r134a@fmls))) r1347@ls/false) (let ((r1351@t r1345@t)) (let ((r1353@ls/false (rd84@syntax-dispatch r1351@t '(_ (any . #(each+ any () any)) any . each-any)))) (if r1353@ls/false (apply (lambda (r1355@who r1356@fmls r1357@last r1358@b r1359@b*) (if (rb85@valid-bound-ids? (cons r1357@last r1356@fmls)) (rd3a@bless (list 'define r1355@who (list 'make-traced-procedure (list 'quote r1355@who) (cons 'lambda (cons (append r1356@fmls r1357@last) (cons r1358@b r1359@b*)))))) (rd3e@invalid-fmls-error r1343@stx (append r1356@fmls r1357@last)))) r1353@ls/false) (let ((r135f@t r1351@t)) (let ((r1361@ls/false (rd84@syntax-dispatch r135f@t '(_ any any)))) (if r1361@ls/false (apply (lambda (r1363@who r1364@expr) (if (rb7d@id? r1363@who) (rd3a@bless (list 'define r1363@who (list 'let (list (list 'v r1364@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote r1363@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (re64@syntax-violation '#f '"invalid name" r1343@stx))) r1361@ls/false) (re64@syntax-violation '#f '"invalid syntax" r135f@t)))))))))))) (set! r2872@rd48@trace-define-macro rd48@trace-define-macro) (set! rd4a@trace-define-syntax-macro (lambda (r1367@stx) (let ((r1369@t r1367@stx)) (let ((r136b@ls/false (rd84@syntax-dispatch r1369@t '(_ any any)))) (if r136b@ls/false (apply (lambda (r136d@who r136e@expr) (if (rb7d@id? r136d@who) (rd3a@bless (list 'define-syntax r136d@who (list 'make-traced-macro (list 'quote r136d@who) r136e@expr))) (re64@syntax-violation '#f '"invalid name" r1367@stx))) r136b@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1369@t)))))) (set! r2873@rd4a@trace-define-syntax-macro rd4a@trace-define-syntax-macro) (set! rd4c@trace-let/rec-syntax (lambda (r1371@who) (lambda (r1373@stx) (let ((r1375@t r1373@stx)) (let ((r1377@ls/false (rd84@syntax-dispatch r1375@t '(_ #(each (any any)) any . each-any)))) (if r1377@ls/false (apply (lambda (r1379@lhs* r137a@rhs* r137b@b r137c@b*) (if (rb85@valid-bound-ids? r1379@lhs*) (let ((r1381@rhs* (map (lambda (r1383@lhs r1384@rhs) (list 'make-traced-macro (list 'quote r1383@lhs) r1384@rhs)) r1379@lhs* r137a@rhs*))) (rd3a@bless (cons r1371@who (cons (map list r1379@lhs* r1381@rhs*) (cons r137b@b r137c@b*))))) (rd3e@invalid-fmls-error r1373@stx r1379@lhs*))) r1377@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1375@t))))))) (set! r2874@rd4c@trace-let/rec-syntax rd4c@trace-let/rec-syntax) (set! rd4e@trace-let-syntax-macro (rd4c@trace-let/rec-syntax 'let-syntax)) (set! r2875@rd4e@trace-let-syntax-macro rd4e@trace-let-syntax-macro) (set! rd50@trace-letrec-syntax-macro (rd4c@trace-let/rec-syntax 'letrec-syntax)) (set! r2876@rd50@trace-letrec-syntax-macro rd50@trace-letrec-syntax-macro) (set! rd52@guard-macro (lambda (r1387@x) (letrec* ((r138a@gen-clauses (lambda (r13a1@con r13a2@outerk r13a3@clause*) (letrec* ((r13a8@f (lambda (r13e1@x r13e2@k) (let ((r13e5@t r13e1@x)) (let ((r13e7@ls/false (rd84@syntax-dispatch r13e5@t '(any #(scheme-id =>) any)))) (if r13e7@ls/false (apply (lambda (r13e9@e r13ea@p) (let ((r13ed@t (gensym))) (list 'let (list (list r13ed@t r13e9@e)) (list 'if r13ed@t (list r13ea@p r13ed@t) r13e2@k)))) r13e7@ls/false) (let ((r13ef@t r13e5@t)) (let ((r13f1@ls/false (rd84@syntax-dispatch r13ef@t '(any)))) (if r13f1@ls/false (apply (lambda (r13f3@e) (let ((r13f5@t (gensym))) (list 'let (list (list r13f5@t r13f3@e)) (list 'if r13f5@t r13f5@t r13e2@k)))) r13f1@ls/false) (let ((r13f7@t r13ef@t)) (let ((r13f9@ls/false (rd84@syntax-dispatch r13f7@t '(any any . each-any)))) (if r13f9@ls/false (apply (lambda (r13fb@e r13fc@v r13fd@v*) (list 'if r13fb@e (cons 'begin (cons r13fc@v r13fd@v*)) r13e2@k)) r13f9@ls/false) (let ((r1401@t r13f7@t)) (let ((r1403@ls/false (rd84@syntax-dispatch r1401@t '_))) (if r1403@ls/false (apply (lambda () (re64@syntax-violation '#f '"invalid guard clause" r13e1@x)) r1403@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1401@t))))))))))))))) (r13aa@f* (lambda (r13b7@x*) (let ((r13b9@t r13b7@x*)) (let ((r13bb@ls/false (rd84@syntax-dispatch r13b9@t '()))) (if r13bb@ls/false (apply (lambda () (let ((r13bd@g (gensym))) (values (list r13bd@g (list 'lambda '() (list 'raise-continuable r13a1@con))) r13bd@g))) r13bb@ls/false) (let ((r13bf@t r13b9@t)) (let ((r13c1@ls/false (rd84@syntax-dispatch r13bf@t '((#(scheme-id else) any . each-any))))) (if r13c1@ls/false (apply (lambda (r13c3@e r13c4@e*) (values (cons 'begin (cons r13c3@e r13c4@e*)) '#f)) r13c1@ls/false) (let ((r13c7@t r13bf@t)) (let ((r13c9@ls/false (rd84@syntax-dispatch r13c7@t '(any . any)))) (if r13c9@ls/false (apply (lambda (r13cb@cls r13cc@cls*) (call-with-values (lambda () (r13aa@f* r13cc@cls*)) (lambda (r13d3@r13d0 r13d4@r13d2) (let ((r13d7@g r13d4@r13d2) (r13d8@e r13d3@r13d0)) (values (r13a8@f r13cb@cls r13d8@e) r13d7@g))))) r13c9@ls/false) (let ((r13db@t r13c7@t)) (let ((r13dd@ls/false (rd84@syntax-dispatch r13db@t 'any))) (if r13dd@ls/false (apply (lambda (r13df@others) (re64@syntax-violation '#f '"invalid guard clause" r13df@others)) r13dd@ls/false) (re64@syntax-violation '#f '"invalid syntax" r13db@t)))))))))))))))) (call-with-values (lambda () (r13aa@f* r13a3@clause*)) (lambda (r13af@r13ac r13b0@r13ae) (let ((r13b3@raisek r13b0@r13ae) (r13b4@code r13af@r13ac)) (if r13b3@raisek (list (list 'call/cc (list 'lambda (list r13b3@raisek) (list r13a2@outerk (list 'lambda '() r13b4@code))))) (list r13a2@outerk (list 'lambda '() r13b4@code)))))))))) (let ((r138b@t r1387@x)) (let ((r138d@ls/false (rd84@syntax-dispatch r138b@t '(_ (any . each-any) any . each-any)))) (if (and r138d@ls/false (apply (lambda (r138f@con r1390@clause* r1391@b r1392@b*) (rb7d@id? r138f@con)) r138d@ls/false)) (apply (lambda (r1397@con r1398@clause* r1399@b r139a@b*) (let ((r139f@outerk (gensym))) (rd3a@bless (list (list 'call/cc (list 'lambda (list r139f@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list r1397@con) (r138a@gen-clauses r1397@con r139f@outerk r1398@clause*)) (cons 'lambda (cons '() (cons r1399@b r139a@b*))))))))))) r138d@ls/false) (re64@syntax-violation '#f '"invalid syntax" r138b@t))))))) (set! r2877@rd52@guard-macro rd52@guard-macro) (set! rd54@define-enumeration-macro (lambda (r1405@stx) (letrec* ((r1408@set? (lambda (r1421@x) (or (null? r1421@x) (and (not (memq (car r1421@x) (cdr r1421@x))) (r1408@set? (cdr r1421@x)))))) (r140a@remove-dups (lambda (r141f@ls) (if (null? r141f@ls) '() (cons (car r141f@ls) (r140a@remove-dups (remq (car r141f@ls) (cdr r141f@ls)))))))) (let ((r140b@t r1405@stx)) (let ((r140d@ls/false (rd84@syntax-dispatch r140b@t '(_ any each-any any)))) (if (and r140d@ls/false (apply (lambda (r140f@name r1410@id* r1411@maker) (and (rb7d@id? r140f@name) (rb7d@id? r1411@maker) (for-all rb7d@id? r1410@id*))) r140d@ls/false)) (apply (lambda (r1415@name r1416@id* r1417@maker) (let ((r141b@name* (r140a@remove-dups (re6a@syntax->datum r1416@id*))) (r141c@mk (gensym))) (rd3a@bless (list 'begin (list 'define r141c@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote r141b@name*)))) (list 'define-syntax r1415@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote r141b@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote r1415@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax r1417@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote r1417@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote r141b@name*)) (cons 'syntax-violation (cons (list 'quote r1417@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons r141c@mk '('(n* ...))))))))))))) r140d@ls/false) (re64@syntax-violation '#f '"invalid syntax" r140b@t))))))) (set! r2878@rd54@define-enumeration-macro rd54@define-enumeration-macro) (set! rd56@time-macro (lambda (r1423@stx) (let ((r1425@t r1423@stx)) (let ((r1427@ls/false (rd84@syntax-dispatch r1425@t '(_ any)))) (if r1427@ls/false (apply (lambda (r1429@expr) (rd3a@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() r1429@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) r1427@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1425@t)))))) (set! r2879@rd56@time-macro rd56@time-macro) (set! rd58@delay-macro (lambda (r142b@stx) (let ((r142d@t r142b@stx)) (let ((r142f@ls/false (rd84@syntax-dispatch r142d@t '(_ any)))) (if r142f@ls/false (apply (lambda (r1431@expr) (rd3a@bless (list 'make-promise (list 'lambda '() r1431@expr)))) r142f@ls/false) (re64@syntax-violation '#f '"invalid syntax" r142d@t)))))) (set! r287a@rd58@delay-macro rd58@delay-macro) (set! rd5a@assert-macro (lambda (r1433@stx) (let ((r1435@t r1433@stx)) (let ((r1437@ls/false (rd84@syntax-dispatch r1435@t '(_ any)))) (if r1437@ls/false (apply (lambda (r1439@expr) (let ((r143b@pos (or (re5c@expression-position r1433@stx) (re5c@expression-position r1439@expr)))) (rd3a@bless (list 'let (list (list 'x r1439@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote r1439@expr) (list 'quote r143b@pos))))))) r1437@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1435@t)))))) (set! r287b@rd5a@assert-macro rd5a@assert-macro) (set! rd5c@endianness-macro (lambda (r143d@stx) (let ((r143f@t r143d@stx)) (let ((r1441@ls/false (rd84@syntax-dispatch r143f@t '(_ any)))) (if r1441@ls/false (apply (lambda (r1443@e) (let ((r1445@t (re6a@syntax->datum r1443@e))) (if (memv r1445@t '(little)) (rd3a@bless ''little) (if (memv r1445@t '(big)) (rd3a@bless ''big) (re64@syntax-violation '#f '"endianness must be big or little" r143d@stx))))) r1441@ls/false) (re64@syntax-violation '#f '"invalid syntax" r143f@t)))))) (set! r287c@rd5c@endianness-macro rd5c@endianness-macro) (set! rd5e@identifier-syntax-macro (lambda (r1447@stx) (let ((r1449@t r1447@stx)) (let ((r144b@ls/false (rd84@syntax-dispatch r1449@t '(_ any)))) (if r144b@ls/false (apply (lambda (r144d@expr) (rd3a@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax r144d@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax r144d@expr) '((syntax (e* ...)))))))))) r144b@ls/false) (let ((r144f@t r1449@t)) (let ((r1451@ls/false (rd84@syntax-dispatch r144f@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and r1451@ls/false (apply (lambda (r1453@id1 r1454@expr1 r1455@id2 r1456@expr2 r1457@expr3) (and (rb7d@id? r1453@id1) (rb7d@id? r1455@id2) (rb7d@id? r1456@expr2))) r1451@ls/false)) (apply (lambda (r145d@id1 r145e@expr1 r145f@id2 r1460@expr2 r1461@expr3) (rd3a@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax r145e@expr1)) (list (list 'set! 'id r1460@expr2) (list 'syntax r1461@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons r145e@expr1 '(e* ...))))))))) r1451@ls/false) (re64@syntax-violation '#f '"invalid syntax" r144f@t))))))))) (set! r287d@rd5e@identifier-syntax-macro rd5e@identifier-syntax-macro) (set! rd60@do-macro (lambda (r1467@stx) (letrec* ((r146a@bind (lambda (r1481@x) (let ((r1483@t r1481@x)) (let ((r1485@ls/false (rd84@syntax-dispatch r1483@t '(any any)))) (if r1485@ls/false (apply (lambda (r1487@x r1488@init) (list r1487@x r1488@init r1487@x)) r1485@ls/false) (let ((r148b@t r1483@t)) (let ((r148d@ls/false (rd84@syntax-dispatch r148b@t '(any any any)))) (if r148d@ls/false (apply (lambda (r148f@x r1490@init r1491@step) (list r148f@x r1490@init r1491@step)) r148d@ls/false) (let ((r1495@t r148b@t)) (let ((r1497@ls/false (rd84@syntax-dispatch r1495@t '_))) (if r1497@ls/false (apply (lambda () (re64@syntax-violation '#f '"invalid binding" r1467@stx)) r1497@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1495@t))))))))))))) (let ((r146b@t r1467@stx)) (let ((r146d@ls/false (rd84@syntax-dispatch r146b@t '(_ each-any (any . each-any) . each-any)))) (if r146d@ls/false (apply (lambda (r146f@binding* r1470@test r1471@expr* r1472@command*) (let ((r1477@t (map r146a@bind r146f@binding*))) (let ((r1479@ls/false (rd84@syntax-dispatch r1477@t '#(each (any any any))))) (if r1479@ls/false (apply (lambda (r147b@x* r147c@init* r147d@step*) (if (rb85@valid-bound-ids? r147b@x*) (rd3a@bless (list 'letrec (list (list 'loop (list 'lambda r147b@x* (list 'if r1470@test (cons 'begin (cons '(if #f #f) r1471@expr*)) (cons 'begin (append r1472@command* (list (cons 'loop r147d@step*)))))))) (cons 'loop r147c@init*))) (re64@syntax-violation '#f '"invalid bindings" r1467@stx))) r1479@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1477@t))))) r146d@ls/false) (re64@syntax-violation '#f '"invalid syntax" r146b@t))))))) (set! r287e@rd60@do-macro rd60@do-macro) (set! rd62@let*-macro (lambda (r1499@stx) (let ((r149b@t r1499@stx)) (let ((r149d@ls/false (rd84@syntax-dispatch r149b@t '(_ #(each (any any)) any . each-any)))) (if (and r149d@ls/false (apply (lambda (r149f@lhs* r14a0@rhs* r14a1@b r14a2@b*) (for-all rb7d@id? r149f@lhs*)) r149d@ls/false)) (apply (lambda (r14a7@lhs* r14a8@rhs* r14a9@b r14aa@b*) (rd3a@bless (let r14b1@f ((r14af@x* (map list r14a7@lhs* r14a8@rhs*))) (if (null? r14af@x*) (cons 'let (cons '() (cons r14a9@b r14aa@b*))) (list 'let (list (car r14af@x*)) (r14b1@f (cdr r14af@x*))))))) r149d@ls/false) (re64@syntax-violation '#f '"invalid syntax" r149b@t)))))) (set! r287f@rd62@let*-macro rd62@let*-macro) (set! rd64@or-macro (lambda (r14b3@stx) (let ((r14b5@t r14b3@stx)) (let ((r14b7@ls/false (rd84@syntax-dispatch r14b5@t '(_)))) (if r14b7@ls/false (apply (lambda () '#f) r14b7@ls/false) (let ((r14b9@t r14b5@t)) (let ((r14bb@ls/false (rd84@syntax-dispatch r14b9@t '(_ any . each-any)))) (if r14bb@ls/false (apply (lambda (r14bd@e r14be@e*) (rd3a@bless (let r14c5@f ((r14c1@e r14bd@e) (r14c2@e* r14be@e*)) (if (null? r14c2@e*) (list 'begin '#f r14c1@e) (list 'let (list (list 't r14c1@e)) (list 'if 't 't (r14c5@f (car r14c2@e*) (cdr r14c2@e*)))))))) r14bb@ls/false) (re64@syntax-violation '#f '"invalid syntax" r14b9@t))))))))) (set! r2880@rd64@or-macro rd64@or-macro) (set! rd66@and-macro (lambda (r14c7@stx) (let ((r14c9@t r14c7@stx)) (let ((r14cb@ls/false (rd84@syntax-dispatch r14c9@t '(_)))) (if r14cb@ls/false (apply (lambda () '#t) r14cb@ls/false) (let ((r14cd@t r14c9@t)) (let ((r14cf@ls/false (rd84@syntax-dispatch r14cd@t '(_ any . each-any)))) (if r14cf@ls/false (apply (lambda (r14d1@e r14d2@e*) (rd3a@bless (let r14d9@f ((r14d5@e r14d1@e) (r14d6@e* r14d2@e*)) (if (null? r14d6@e*) (list 'begin '#f r14d5@e) (cons 'if (cons r14d5@e (cons (r14d9@f (car r14d6@e*) (cdr r14d6@e*)) '(#f)))))))) r14cf@ls/false) (re64@syntax-violation '#f '"invalid syntax" r14cd@t))))))))) (set! r2881@rd66@and-macro rd66@and-macro) (set! rd68@cond-macro (lambda (r14db@stx) (let ((r14dd@t r14db@stx)) (let ((r14df@ls/false (rd84@syntax-dispatch r14dd@t '(_ any . each-any)))) (if r14df@ls/false (apply (lambda (r14e1@cls r14e2@cls*) (rd3a@bless (let r14e9@f ((r14e5@cls r14e1@cls) (r14e6@cls* r14e2@cls*)) (if (null? r14e6@cls*) (let ((r14eb@t r14e5@cls)) (let ((r14ed@ls/false (rd84@syntax-dispatch r14eb@t '(#(scheme-id else) any . each-any)))) (if r14ed@ls/false (apply (lambda (r14ef@e r14f0@e*) (cons 'begin (cons r14ef@e r14f0@e*))) r14ed@ls/false) (let ((r14f3@t r14eb@t)) (let ((r14f5@ls/false (rd84@syntax-dispatch r14f3@t '(any #(scheme-id =>) any)))) (if r14f5@ls/false (apply (lambda (r14f7@e r14f8@p) (list 'let (list (list 't r14f7@e)) (list 'if 't (cons r14f8@p '(t))))) r14f5@ls/false) (let ((r14fb@t r14f3@t)) (let ((r14fd@ls/false (rd84@syntax-dispatch r14fb@t '(any)))) (if r14fd@ls/false (apply (lambda (r14ff@e) (cons 'or (cons r14ff@e '((if #f #f))))) r14fd@ls/false) (let ((r1501@t r14fb@t)) (let ((r1503@ls/false (rd84@syntax-dispatch r1501@t '(any . each-any)))) (if r1503@ls/false (apply (lambda (r1505@e r1506@e*) (list 'if r1505@e (cons 'begin r1506@e*))) r1503@ls/false) (let ((r1509@t r1501@t)) (let ((r150b@ls/false (rd84@syntax-dispatch r1509@t '_))) (if r150b@ls/false (apply (lambda () (re64@syntax-violation '#f '"invalid last clause" r14db@stx)) r150b@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1509@t)))))))))))))))) (let ((r150d@t r14e5@cls)) (let ((r150f@ls/false (rd84@syntax-dispatch r150d@t '(#(scheme-id else) any . each-any)))) (if r150f@ls/false (apply (lambda (r1511@e r1512@e*) (re64@syntax-violation '#f '"incorrect position of keyword else" r14db@stx)) r150f@ls/false) (let ((r1515@t r150d@t)) (let ((r1517@ls/false (rd84@syntax-dispatch r1515@t '(any #(scheme-id =>) any)))) (if r1517@ls/false (apply (lambda (r1519@e r151a@p) (list 'let (list (list 't r1519@e)) (list 'if 't (cons r151a@p '(t)) (r14e9@f (car r14e6@cls*) (cdr r14e6@cls*))))) r1517@ls/false) (let ((r151d@t r1515@t)) (let ((r151f@ls/false (rd84@syntax-dispatch r151d@t '(any)))) (if r151f@ls/false (apply (lambda (r1521@e) (list 'or r1521@e (r14e9@f (car r14e6@cls*) (cdr r14e6@cls*)))) r151f@ls/false) (let ((r1523@t r151d@t)) (let ((r1525@ls/false (rd84@syntax-dispatch r1523@t '(any . each-any)))) (if r1525@ls/false (apply (lambda (r1527@e r1528@e*) (list 'if r1527@e (cons 'begin r1528@e*) (r14e9@f (car r14e6@cls*) (cdr r14e6@cls*)))) r1525@ls/false) (let ((r152b@t r1523@t)) (let ((r152d@ls/false (rd84@syntax-dispatch r152b@t '_))) (if r152d@ls/false (apply (lambda () (re64@syntax-violation '#f '"invalid last clause" r14db@stx)) r152d@ls/false) (re64@syntax-violation '#f '"invalid syntax" r152b@t)))))))))))))))))))) r14df@ls/false) (re64@syntax-violation '#f '"invalid syntax" r14dd@t)))))) (set! r2882@rd68@cond-macro rd68@cond-macro) (set! rd6a@do-include (lambda (r152f@stx r1530@id r1531@filename) (let ((r1535@filename (rb91@stx->datum r1531@filename))) (begin (if (not (and (string? r1535@filename) (rb7d@id? r1530@id))) (re64@syntax-violation '#f '"invalid syntax" r152f@stx) (void)) (cons (rd3a@bless 'begin) (with-input-from-file r1535@filename (lambda () (let r1539@f ((r1537@ls '())) (let ((r153b@x (r6bf@r58f@read-annotated))) (if (eof-object? r153b@x) (reverse r1537@ls) (r1539@f (cons (rb5d@datum->stx r1530@id r153b@x) r1537@ls)))))))))))) (set! r2883@rd6a@do-include rd6a@do-include) (set! rd6c@include-macro (lambda (r153d@e) (let ((r153f@t r153d@e)) (let ((r1541@ls/false (rd84@syntax-dispatch r153f@t '(any any)))) (if r1541@ls/false (apply (lambda (r1543@id r1544@filename) (rd6a@do-include r153d@e r1543@id r1544@filename)) r1541@ls/false) (re64@syntax-violation '#f '"invalid syntax" r153f@t)))))) (set! r2884@rd6c@include-macro rd6c@include-macro) (set! rd6e@include-into-macro (lambda (r1547@e) (let ((r1549@t r1547@e)) (let ((r154b@ls/false (rd84@syntax-dispatch r1549@t '(_ any any)))) (if r154b@ls/false (apply (lambda (r154d@id r154e@filename) (rd6a@do-include r1547@e r154d@id r154e@filename)) r154b@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1549@t)))))) (set! r2885@rd6e@include-into-macro rd6e@include-into-macro) (set! rd70@syntax-rules-macro (lambda (r1551@e) (let ((r1553@t r1551@e)) (let ((r1555@ls/false (rd84@syntax-dispatch r1553@t '(_ each-any . #(each (any any)))))) (if r1555@ls/false (apply (lambda (r1557@lits r1558@pat* r1559@tmp*) (begin (rd8a@verify-literals r1557@lits r1551@e) (rd3a@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons r1557@lits (map (lambda (r155d@pat r155e@tmp) (let ((r1561@t r155d@pat)) (let ((r1563@ls/false (rd84@syntax-dispatch r1561@t '(_ . any)))) (if r1563@ls/false (apply (lambda (r1565@rest) (list (cons 'g r1565@rest) (list 'syntax r155e@tmp))) r1563@ls/false) (let ((r1567@t r1561@t)) (let ((r1569@ls/false (rd84@syntax-dispatch r1567@t '_))) (if r1569@ls/false (apply (lambda () (re64@syntax-violation '#f '"invalid syntax-rules pattern" r1551@e r155d@pat)) r1569@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1567@t)))))))) r1558@pat* r1559@tmp*)))))))) r1555@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1553@t)))))) (set! r2886@rd70@syntax-rules-macro rd70@syntax-rules-macro) (set! rd72@quasiquote-macro (letrec* ((r156c@datum (lambda (r166d@x) (list (rd0c@scheme-stx 'quote) (rb65@mkstx r166d@x rb01@top-mark* '() '())))) (r1588@quasicons* (lambda (r1665@x r1666@y) (let r166b@f ((r1669@x r1665@x)) (if (null? r1669@x) r1666@y (r158a@quasicons (car r1669@x) (r166b@f (cdr r1669@x))))))) (r158a@quasicons (lambda (r163f@x r1640@y) (let ((r1643@t r1640@y)) (let ((r1645@ls/false (rd84@syntax-dispatch r1643@t '(#(scheme-id quote) any)))) (if r1645@ls/false (apply (lambda (r1647@dy) (let ((r1649@t r163f@x)) (let ((r164b@ls/false (rd84@syntax-dispatch r1649@t '(#(scheme-id quote) any)))) (if r164b@ls/false (apply (lambda (r164d@dx) (list (rd0c@scheme-stx 'quote) (cons r164d@dx r1647@dy))) r164b@ls/false) (let ((r164f@t r1649@t)) (let ((r1651@ls/false (rd84@syntax-dispatch r164f@t '_))) (if r1651@ls/false (apply (lambda () (let ((r1653@t r1647@dy)) (let ((r1655@ls/false (rd84@syntax-dispatch r1653@t '()))) (if r1655@ls/false (apply (lambda () (list (rd0c@scheme-stx 'list) r163f@x)) r1655@ls/false) (let ((r1657@t r1653@t)) (let ((r1659@ls/false (rd84@syntax-dispatch r1657@t '_))) (if r1659@ls/false (apply (lambda () (list (rd0c@scheme-stx 'cons) r163f@x r1640@y)) r1659@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1657@t)))))))) r1651@ls/false) (re64@syntax-violation '#f '"invalid syntax" r164f@t)))))))) r1645@ls/false) (let ((r165b@t r1643@t)) (let ((r165d@ls/false (rd84@syntax-dispatch r165b@t '(#(scheme-id list) . each-any)))) (if r165d@ls/false (apply (lambda (r165f@stuff) (cons* (rd0c@scheme-stx 'list) r163f@x r165f@stuff)) r165d@ls/false) (let ((r1661@t r165b@t)) (let ((r1663@ls/false (rd84@syntax-dispatch r1661@t '_))) (if r1663@ls/false (apply (lambda () (list (rd0c@scheme-stx 'cons) r163f@x r1640@y)) r1663@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1661@t)))))))))))) (r158c@quasiappend (lambda (r1625@x r1626@y) (let ((r1629@ls (let r162d@f ((r162b@x r1625@x)) (if (null? r162b@x) (let ((r162f@t r1626@y)) (let ((r1631@ls/false (rd84@syntax-dispatch r162f@t '(#(scheme-id quote) ())))) (if r1631@ls/false (apply (lambda () '()) r1631@ls/false) (let ((r1633@t r162f@t)) (let ((r1635@ls/false (rd84@syntax-dispatch r1633@t '_))) (if r1635@ls/false (apply (lambda () (list r1626@y)) r1635@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1633@t))))))) (let ((r1637@t (car r162b@x))) (let ((r1639@ls/false (rd84@syntax-dispatch r1637@t '(#(scheme-id quote) ())))) (if r1639@ls/false (apply (lambda () (r162d@f (cdr r162b@x))) r1639@ls/false) (let ((r163b@t r1637@t)) (let ((r163d@ls/false (rd84@syntax-dispatch r163b@t '_))) (if r163d@ls/false (apply (lambda () (cons (car r162b@x) (r162d@f (cdr r162b@x)))) r163d@ls/false) (re64@syntax-violation '#f '"invalid syntax" r163b@t))))))))))) (if (null? r1629@ls) (list (rd0c@scheme-stx 'quote) '()) (if (null? (cdr r1629@ls)) (car r1629@ls) (cons* (rd0c@scheme-stx 'append) r1629@ls)))))) (r158e@quasivector (lambda (r15f3@x) (let ((r15f5@pat-x r15f3@x)) (let ((r15f7@t r15f5@pat-x)) (let ((r15f9@ls/false (rd84@syntax-dispatch r15f7@t '(#(scheme-id quote) each-any)))) (if r15f9@ls/false (apply (lambda (r15fb@x*) (list (rd0c@scheme-stx 'quote) (list->vector r15fb@x*))) r15f9@ls/false) (let ((r15fd@t r15f7@t)) (let ((r15ff@ls/false (rd84@syntax-dispatch r15fd@t '_))) (if r15ff@ls/false (apply (lambda () (let r1607@f ((r1601@x r15f3@x) (r1602@k (lambda (r1605@ls) (cons* (rd0c@scheme-stx 'vector) r1605@ls)))) (let ((r1609@t r1601@x)) (let ((r160b@ls/false (rd84@syntax-dispatch r1609@t '(#(scheme-id quote) each-any)))) (if r160b@ls/false (apply (lambda (r160d@x*) (r1602@k (map (lambda (r160f@x) (list (rd0c@scheme-stx 'quote) r160f@x)) r160d@x*))) r160b@ls/false) (let ((r1611@t r1609@t)) (let ((r1613@ls/false (rd84@syntax-dispatch r1611@t '(#(scheme-id list) . each-any)))) (if r1613@ls/false (apply (lambda (r1615@x*) (r1602@k r1615@x*)) r1613@ls/false) (let ((r1617@t r1611@t)) (let ((r1619@ls/false (rd84@syntax-dispatch r1617@t '(#(scheme-id cons) any any)))) (if r1619@ls/false (apply (lambda (r161b@x r161c@y) (r1607@f r161c@y (lambda (r161f@ls) (r1602@k (cons r161b@x r161f@ls))))) r1619@ls/false) (let ((r1621@t r1617@t)) (let ((r1623@ls/false (rd84@syntax-dispatch r1621@t '_))) (if r1623@ls/false (apply (lambda () (list (rd0c@scheme-stx 'list->vector) r15f5@pat-x)) r1623@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1621@t))))))))))))))) r15ff@ls/false) (re64@syntax-violation '#f '"invalid syntax" r15fd@t)))))))))) (r1590@vquasi (lambda (r15d1@p r15d2@lev) (let ((r15d5@t r15d1@p)) (let ((r15d7@ls/false (rd84@syntax-dispatch r15d5@t '(any . any)))) (if r15d7@ls/false (apply (lambda (r15d9@p r15da@q) (let ((r15dd@t r15d9@p)) (let ((r15df@ls/false (rd84@syntax-dispatch r15dd@t '(#(scheme-id unquote) . each-any)))) (if r15df@ls/false (apply (lambda (r15e1@p) (if (= r15d2@lev '0) (r1588@quasicons* r15e1@p (r1590@vquasi r15da@q r15d2@lev)) (r158a@quasicons (r158a@quasicons (r156c@datum 'unquote) (r1592@quasi r15e1@p (- r15d2@lev '1))) (r1590@vquasi r15da@q r15d2@lev)))) r15df@ls/false) (let ((r15e3@t r15dd@t)) (let ((r15e5@ls/false (rd84@syntax-dispatch r15e3@t '(#(scheme-id unquote-splicing) . each-any)))) (if r15e5@ls/false (apply (lambda (r15e7@p) (if (= r15d2@lev '0) (r158c@quasiappend r15e7@p (r1590@vquasi r15da@q r15d2@lev)) (r158a@quasicons (r158a@quasicons (r156c@datum 'unquote-splicing) (r1592@quasi r15e7@p (- r15d2@lev '1))) (r1590@vquasi r15da@q r15d2@lev)))) r15e5@ls/false) (let ((r15e9@t r15e3@t)) (let ((r15eb@ls/false (rd84@syntax-dispatch r15e9@t 'any))) (if r15eb@ls/false (apply (lambda (r15ed@p) (r158a@quasicons (r1592@quasi r15ed@p r15d2@lev) (r1590@vquasi r15da@q r15d2@lev))) r15eb@ls/false) (re64@syntax-violation '#f '"invalid syntax" r15e9@t))))))))))) r15d7@ls/false) (let ((r15ef@t r15d5@t)) (let ((r15f1@ls/false (rd84@syntax-dispatch r15ef@t '()))) (if r15f1@ls/false (apply (lambda () (list (rd0c@scheme-stx 'quote) '())) r15f1@ls/false) (re64@syntax-violation '#f '"invalid syntax" r15ef@t))))))))) (r1592@quasi (lambda (r159b@p r159c@lev) (let ((r159f@t r159b@p)) (let ((r15a1@ls/false (rd84@syntax-dispatch r159f@t '(#(scheme-id unquote) any)))) (if r15a1@ls/false (apply (lambda (r15a3@p) (if (= r159c@lev '0) r15a3@p (r158a@quasicons (r156c@datum 'unquote) (r1592@quasi (list r15a3@p) (- r159c@lev '1))))) r15a1@ls/false) (let ((r15a5@t r159f@t)) (let ((r15a7@ls/false (rd84@syntax-dispatch r15a5@t '((#(scheme-id unquote) . each-any) . any)))) (if r15a7@ls/false (apply (lambda (r15a9@p r15aa@q) (if (= r159c@lev '0) (r1588@quasicons* r15a9@p (r1592@quasi r15aa@q r159c@lev)) (r158a@quasicons (r158a@quasicons (r156c@datum 'unquote) (r1592@quasi r15a9@p (- r159c@lev '1))) (r1592@quasi r15aa@q r159c@lev)))) r15a7@ls/false) (let ((r15ad@t r15a5@t)) (let ((r15af@ls/false (rd84@syntax-dispatch r15ad@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if r15af@ls/false (apply (lambda (r15b1@p r15b2@q) (if (= r159c@lev '0) (r158c@quasiappend r15b1@p (r1592@quasi r15b2@q r159c@lev)) (r158a@quasicons (r158a@quasicons (r156c@datum 'unquote-splicing) (r1592@quasi r15b1@p (- r159c@lev '1))) (r1592@quasi r15b2@q r159c@lev)))) r15af@ls/false) (let ((r15b5@t r15ad@t)) (let ((r15b7@ls/false (rd84@syntax-dispatch r15b5@t '(#(scheme-id quasiquote) any)))) (if r15b7@ls/false (apply (lambda (r15b9@p) (r158a@quasicons (r156c@datum 'quasiquote) (r1592@quasi (list r15b9@p) (+ r159c@lev '1)))) r15b7@ls/false) (let ((r15bb@t r15b5@t)) (let ((r15bd@ls/false (rd84@syntax-dispatch r15bb@t '(any . any)))) (if r15bd@ls/false (apply (lambda (r15bf@p r15c0@q) (r158a@quasicons (r1592@quasi r15bf@p r159c@lev) (r1592@quasi r15c0@q r159c@lev))) r15bd@ls/false) (let ((r15c3@t r15bb@t)) (let ((r15c5@ls/false (rd84@syntax-dispatch r15c3@t '#(vector each-any)))) (if (and r15c5@ls/false (apply (lambda (r15c7@x) (not (rb49@stx? r15c7@x))) r15c5@ls/false)) (apply (lambda (r15c9@x) (r158e@quasivector (r1590@vquasi r15c9@x r159c@lev))) r15c5@ls/false) (let ((r15cb@t r15c3@t)) (let ((r15cd@ls/false (rd84@syntax-dispatch r15cb@t 'any))) (if r15cd@ls/false (apply (lambda (r15cf@p) (list (rd0c@scheme-stx 'quote) r15cf@p)) r15cd@ls/false) (re64@syntax-violation '#f '"invalid syntax" r15cb@t))))))))))))))))))))))))) (lambda (r1593@x) (let ((r1595@t r1593@x)) (let ((r1597@ls/false (rd84@syntax-dispatch r1595@t '(_ any)))) (if r1597@ls/false (apply (lambda (r1599@e) (r1592@quasi r1599@e '0)) r1597@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1595@t))))))) (set! r2887@rd72@quasiquote-macro rd72@quasiquote-macro) (set! rd74@quasisyntax-macro (letrec* ((r1670@quasi (lambda (r168b@p r168c@lev) (let ((r168f@t r168b@p)) (let ((r1691@ls/false (rd84@syntax-dispatch r168f@t '(#(scheme-id unsyntax) any)))) (if r1691@ls/false (apply (lambda (r1693@p) (if (= r168c@lev '0) (let ((r1695@g (gensym))) (values (list r1695@g) (list r1693@p) r1695@g)) (call-with-values (lambda () (r1670@quasi r1693@p (- r168c@lev '1))) (lambda (r169d@r1698 r169e@r169a r169f@r169c) (let ((r16a3@p r169f@r169c) (r16a4@rhs* r169e@r169a) (r16a5@lhs* r169d@r1698)) (values r16a5@lhs* r16a4@rhs* (list 'unsyntax r16a3@p))))))) r1691@ls/false) (let ((r16a9@t r168f@t)) (let ((r16ab@ls/false (rd84@syntax-dispatch r16a9@t '#(scheme-id unsyntax)))) (if (and r16ab@ls/false (apply (lambda () (= r168c@lev '0)) r16ab@ls/false)) (apply (lambda () (re64@syntax-violation '#f '"incorrect use of unsyntax" r168b@p)) r16ab@ls/false) (let ((r16ad@t r16a9@t)) (let ((r16af@ls/false (rd84@syntax-dispatch r16ad@t '((#(scheme-id unsyntax) . each-any) . any)))) (if r16af@ls/false (apply (lambda (r16b1@p* r16b2@q) (call-with-values (lambda () (r1670@quasi r16b2@q r168c@lev)) (lambda (r16bb@r16b6 r16bc@r16b8 r16bd@r16ba) (let ((r16c1@q r16bd@r16ba) (r16c2@rhs* r16bc@r16b8) (r16c3@lhs* r16bb@r16b6)) (if (= r168c@lev '0) (let ((r16c7@g* (map (lambda (r16c9@x) (gensym)) r16b1@p*))) (values (append r16c7@g* r16c3@lhs*) (append r16b1@p* r16c2@rhs*) (append r16c7@g* r16c1@q))) (call-with-values (lambda () (r1670@quasi r16b1@p* (- r168c@lev '1))) (lambda (r16d1@r16cc r16d2@r16ce r16d3@r16d0) (let ((r16d7@p* r16d3@r16d0) (r16d8@rhs2* r16d2@r16ce) (r16d9@lhs2* r16d1@r16cc)) (values (append r16d9@lhs2* r16c3@lhs*) (append r16d8@rhs2* r16c2@rhs*) (cons (cons 'unsyntax r16d7@p*) r16c1@q)))))))))) r16af@ls/false) (let ((r16dd@t r16ad@t)) (let ((r16df@ls/false (rd84@syntax-dispatch r16dd@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if r16df@ls/false (apply (lambda (r16e1@p* r16e2@q) (call-with-values (lambda () (r1670@quasi r16e2@q r168c@lev)) (lambda (r16eb@r16e6 r16ec@r16e8 r16ed@r16ea) (let ((r16f1@q r16ed@r16ea) (r16f2@rhs* r16ec@r16e8) (r16f3@lhs* r16eb@r16e6)) (if (= r168c@lev '0) (let ((r16f7@g* (map (lambda (r16f9@x) (gensym)) r16e1@p*))) (values (append (map (lambda (r16fb@g) (cons r16fb@g '(...))) r16f7@g*) r16f3@lhs*) (append r16e1@p* r16f2@rhs*) (append (apply append (map (lambda (r16fd@g) (cons r16fd@g '(...))) r16f7@g*)) r16f1@q))) (call-with-values (lambda () (r1670@quasi r16e1@p* (- r168c@lev '1))) (lambda (r1705@r1700 r1706@r1702 r1707@r1704) (let ((r170b@p* r1707@r1704) (r170c@rhs2* r1706@r1702) (r170d@lhs2* r1705@r1700)) (values (append r170d@lhs2* r16f3@lhs*) (append r170c@rhs2* r16f2@rhs*) (cons (cons 'unsyntax-splicing r170b@p*) r16f1@q)))))))))) r16df@ls/false) (let ((r1711@t r16dd@t)) (let ((r1713@ls/false (rd84@syntax-dispatch r1711@t '#(scheme-id unsyntax-splicing)))) (if (and r1713@ls/false (apply (lambda () (= r168c@lev '0)) r1713@ls/false)) (apply (lambda () (re64@syntax-violation '#f '"incorrect use of unsyntax-splicing" r168b@p)) r1713@ls/false) (let ((r1715@t r1711@t)) (let ((r1717@ls/false (rd84@syntax-dispatch r1715@t '(#(scheme-id quasisyntax) any)))) (if r1717@ls/false (apply (lambda (r1719@p) (call-with-values (lambda () (r1670@quasi r1719@p (+ r168c@lev '1))) (lambda (r1721@r171c r1722@r171e r1723@r1720) (let ((r1727@p r1723@r1720) (r1728@rhs* r1722@r171e) (r1729@lhs* r1721@r171c)) (values r1729@lhs* r1728@rhs* (list 'quasisyntax r1727@p)))))) r1717@ls/false) (let ((r172d@t r1715@t)) (let ((r172f@ls/false (rd84@syntax-dispatch r172d@t '(any . any)))) (if r172f@ls/false (apply (lambda (r1731@p r1732@q) (call-with-values (lambda () (r1670@quasi r1731@p r168c@lev)) (lambda (r1741@r1736 r1742@r1738 r1743@r173a) (call-with-values (lambda () (r1670@quasi r1732@q r168c@lev)) (lambda (r1747@r173c r1748@r173e r1749@r1740) (let ((r174d@q r1749@r1740) (r174e@rhs2* r1748@r173e) (r174f@lhs2* r1747@r173c) (r1750@p r1743@r173a) (r1751@rhs* r1742@r1738) (r1752@lhs* r1741@r1736)) (values (append r174f@lhs2* r1752@lhs*) (append r174e@rhs2* r1751@rhs*) (cons r1750@p r174d@q)))))))) r172f@ls/false) (let ((r1759@t r172d@t)) (let ((r175b@ls/false (rd84@syntax-dispatch r1759@t '#(vector each-any)))) (if r175b@ls/false (apply (lambda (r175d@x*) (call-with-values (lambda () (r1670@quasi r175d@x* r168c@lev)) (lambda (r1765@r1760 r1766@r1762 r1767@r1764) (let ((r176b@x* r1767@r1764) (r176c@rhs* r1766@r1762) (r176d@lhs* r1765@r1760)) (values r176d@lhs* r176c@rhs* (list->vector r176b@x*)))))) r175b@ls/false) (let ((r1771@t r1759@t)) (let ((r1773@ls/false (rd84@syntax-dispatch r1771@t '_))) (if r1773@ls/false (apply (lambda () (values '() '() r168b@p)) r1773@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1771@t))))))))))))))))))))))))))))))) (lambda (r1671@x) (let ((r1673@t r1671@x)) (let ((r1675@ls/false (rd84@syntax-dispatch r1673@t '(_ any)))) (if r1675@ls/false (apply (lambda (r1677@e) (call-with-values (lambda () (r1670@quasi r1677@e '0)) (lambda (r167f@r167a r1680@r167c r1681@r167e) (let ((r1685@v r1681@r167e) (r1686@rhs* r1680@r167c) (r1687@lhs* r167f@r167a)) (rd3a@bless (list 'syntax-case (cons 'list r1686@rhs*) '() (list r1687@lhs* (list 'syntax r1685@v)))))))) r1675@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1673@t))))))) (set! r2888@rd74@quasisyntax-macro rd74@quasisyntax-macro) (set! rd76@define-struct-macro (lambda (r1775@stx) (re64@syntax-violation '#f '"define-struct not supported" r1775@stx))) (set! r2889@rd76@define-struct-macro rd76@define-struct-macro) (set! rd78@define-record-type-macro (lambda (r1777@x) (letrec* ((r177a@id (lambda (r196d@ctxt . r196f@str*) (re68@datum->syntax r196d@ctxt (string->symbol (apply string-append (map (lambda (r1971@x) (if (symbol? r1971@x) (symbol->string r1971@x) (if (string? r1971@x) r1971@x (assertion-violation 'define-record-type '"BUG")))) r196f@str*)))))) (r177c@get-record-name (lambda (r195b@spec) (let ((r195d@t r195b@spec)) (let ((r195f@ls/false (rd84@syntax-dispatch r195d@t '(any any any)))) (if r195f@ls/false (apply (lambda (r1961@foo r1962@make-foo r1963@foo?) r1961@foo) r195f@ls/false) (let ((r1967@t r195d@t)) (let ((r1969@ls/false (rd84@syntax-dispatch r1967@t 'any))) (if r1969@ls/false (apply (lambda (r196b@foo) r196b@foo) r1969@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1967@t))))))))) (r177e@get-record-constructor-name (lambda (r1947@spec) (let ((r1949@t r1947@spec)) (let ((r194b@ls/false (rd84@syntax-dispatch r1949@t '(any any any)))) (if r194b@ls/false (apply (lambda (r194d@foo r194e@make-foo r194f@foo?) r194e@make-foo) r194b@ls/false) (let ((r1953@t r1949@t)) (let ((r1955@ls/false (rd84@syntax-dispatch r1953@t 'any))) (if (and r1955@ls/false (apply (lambda (r1957@foo) (rb7d@id? r1957@foo)) r1955@ls/false)) (apply (lambda (r1959@foo) (r177a@id r1959@foo '"make-" (rb91@stx->datum r1959@foo))) r1955@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1953@t))))))))) (r1780@get-record-predicate-name (lambda (r1933@spec) (let ((r1935@t r1933@spec)) (let ((r1937@ls/false (rd84@syntax-dispatch r1935@t '(any any any)))) (if r1937@ls/false (apply (lambda (r1939@foo r193a@make-foo r193b@foo?) r193b@foo?) r1937@ls/false) (let ((r193f@t r1935@t)) (let ((r1941@ls/false (rd84@syntax-dispatch r193f@t 'any))) (if (and r1941@ls/false (apply (lambda (r1943@foo) (rb7d@id? r1943@foo)) r1941@ls/false)) (apply (lambda (r1945@foo) (r177a@id r1945@foo (rb91@stx->datum r1945@foo) '"?")) r1941@ls/false) (re64@syntax-violation '#f '"invalid syntax" r193f@t))))))))) (r1782@get-clause (lambda (r1921@id r1922@ls) (let ((r1925@t r1922@ls)) (let ((r1927@ls/false (rd84@syntax-dispatch r1925@t '()))) (if r1927@ls/false (apply (lambda () '#f) r1927@ls/false) (let ((r1929@t r1925@t)) (let ((r192b@ls/false (rd84@syntax-dispatch r1929@t '((any . any) . any)))) (if r192b@ls/false (apply (lambda (r192d@x r192e@rest r192f@ls) (if (rb83@free-id=? (rd3a@bless r1921@id) r192d@x) (cons r192d@x r192e@rest) (r1782@get-clause r1921@id r192f@ls))) r192b@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1929@t))))))))) (r1784@foo-rtd-code (lambda (r18cf@name r18d0@clause* r18d1@parent-rtd-code) (letrec* ((r18d6@convert-field-spec* (lambda (r1907@ls) (list->vector (map (lambda (r1909@x) (let ((r190b@t r1909@x)) (let ((r190d@ls/false (rd84@syntax-dispatch r190b@t '(#(scheme-id mutable) any . any)))) (if r190d@ls/false (apply (lambda (r190f@name r1910@rest) (list 'mutable r190f@name)) r190d@ls/false) (let ((r1913@t r190b@t)) (let ((r1915@ls/false (rd84@syntax-dispatch r1913@t '(#(scheme-id immutable) any . any)))) (if r1915@ls/false (apply (lambda (r1917@name r1918@rest) (list 'immutable r1917@name)) r1915@ls/false) (let ((r191b@t r1913@t)) (let ((r191d@ls/false (rd84@syntax-dispatch r191b@t 'any))) (if r191d@ls/false (apply (lambda (r191f@name) (list 'immutable r191f@name)) r191d@ls/false) (re64@syntax-violation '#f '"invalid syntax" r191b@t))))))))))) r1907@ls))))) (let ((r18d7@uid-code (let ((r18df@t (r1782@get-clause 'nongenerative r18d0@clause*))) (let ((r18e1@ls/false (rd84@syntax-dispatch r18df@t '(_)))) (if r18e1@ls/false (apply (lambda () (list 'quote (gensym))) r18e1@ls/false) (let ((r18e3@t r18df@t)) (let ((r18e5@ls/false (rd84@syntax-dispatch r18e3@t '(_ any)))) (if r18e5@ls/false (apply (lambda (r18e7@uid) (list 'quote r18e7@uid)) r18e5@ls/false) (let ((r18e9@t r18e3@t)) (let ((r18eb@ls/false (rd84@syntax-dispatch r18e9@t '_))) (if r18eb@ls/false (apply (lambda () '#f) r18eb@ls/false) (re64@syntax-violation '#f '"invalid syntax" r18e9@t))))))))))) (r18d8@sealed? (let ((r18ed@t (r1782@get-clause 'sealed r18d0@clause*))) (let ((r18ef@ls/false (rd84@syntax-dispatch r18ed@t '(_ #(atom #t))))) (if r18ef@ls/false (apply (lambda () '#t) r18ef@ls/false) (let ((r18f1@t r18ed@t)) (let ((r18f3@ls/false (rd84@syntax-dispatch r18f1@t '_))) (if r18f3@ls/false (apply (lambda () '#f) r18f3@ls/false) (re64@syntax-violation '#f '"invalid syntax" r18f1@t)))))))) (r18d9@opaque? (let ((r18f5@t (r1782@get-clause 'opaque r18d0@clause*))) (let ((r18f7@ls/false (rd84@syntax-dispatch r18f5@t '(_ #(atom #t))))) (if r18f7@ls/false (apply (lambda () '#t) r18f7@ls/false) (let ((r18f9@t r18f5@t)) (let ((r18fb@ls/false (rd84@syntax-dispatch r18f9@t '_))) (if r18fb@ls/false (apply (lambda () '#f) r18fb@ls/false) (re64@syntax-violation '#f '"invalid syntax" r18f9@t)))))))) (r18da@fields (let ((r18fd@t (r1782@get-clause 'fields r18d0@clause*))) (let ((r18ff@ls/false (rd84@syntax-dispatch r18fd@t '(_ . each-any)))) (if r18ff@ls/false (apply (lambda (r1901@field-spec*) (list 'quote (r18d6@convert-field-spec* r1901@field-spec*))) r18ff@ls/false) (let ((r1903@t r18fd@t)) (let ((r1905@ls/false (rd84@syntax-dispatch r1903@t '_))) (if r1905@ls/false (apply (lambda () ''#()) r1905@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1903@t))))))))) (rd3a@bless (list 'make-record-type-descriptor (list 'quote r18cf@name) r18d1@parent-rtd-code r18d7@uid-code r18d8@sealed? r18d9@opaque? r18da@fields)))))) (r1786@parent-rtd-code (lambda (r18b7@clause*) (let ((r18b9@t (r1782@get-clause 'parent r18b7@clause*))) (let ((r18bb@ls/false (rd84@syntax-dispatch r18b9@t '(_ any)))) (if r18bb@ls/false (apply (lambda (r18bd@name) (list 'record-type-descriptor r18bd@name)) r18bb@ls/false) (let ((r18bf@t r18b9@t)) (let ((r18c1@ls/false (rd84@syntax-dispatch r18bf@t '#(atom #f)))) (if r18c1@ls/false (apply (lambda () (let ((r18c3@t (r1782@get-clause 'parent-rtd r18b7@clause*))) (let ((r18c5@ls/false (rd84@syntax-dispatch r18c3@t '(_ any any)))) (if r18c5@ls/false (apply (lambda (r18c7@rtd r18c8@rcd) r18c7@rtd) r18c5@ls/false) (let ((r18cb@t r18c3@t)) (let ((r18cd@ls/false (rd84@syntax-dispatch r18cb@t '#(atom #f)))) (if r18cd@ls/false (apply (lambda () '#f) r18cd@ls/false) (re64@syntax-violation '#f '"invalid syntax" r18cb@t)))))))) r18c1@ls/false) (re64@syntax-violation '#f '"invalid syntax" r18bf@t))))))))) (r1788@parent-rcd-code (lambda (r189f@clause*) (let ((r18a1@t (r1782@get-clause 'parent r189f@clause*))) (let ((r18a3@ls/false (rd84@syntax-dispatch r18a1@t '(_ any)))) (if r18a3@ls/false (apply (lambda (r18a5@name) (list 'record-constructor-descriptor r18a5@name)) r18a3@ls/false) (let ((r18a7@t r18a1@t)) (let ((r18a9@ls/false (rd84@syntax-dispatch r18a7@t '#(atom #f)))) (if r18a9@ls/false (apply (lambda () (let ((r18ab@t (r1782@get-clause 'parent-rtd r189f@clause*))) (let ((r18ad@ls/false (rd84@syntax-dispatch r18ab@t '(_ any any)))) (if r18ad@ls/false (apply (lambda (r18af@rtd r18b0@rcd) r18b0@rcd) r18ad@ls/false) (let ((r18b3@t r18ab@t)) (let ((r18b5@ls/false (rd84@syntax-dispatch r18b3@t '#(atom #f)))) (if r18b5@ls/false (apply (lambda () '#f) r18b5@ls/false) (re64@syntax-violation '#f '"invalid syntax" r18b3@t)))))))) r18a9@ls/false) (re64@syntax-violation '#f '"invalid syntax" r18a7@t))))))))) (r178a@foo-rcd-code (lambda (r1897@clause* r1898@foo-rtd r1899@protocol r189a@parent-rcd-code) (list 'make-record-constructor-descriptor r1898@foo-rtd r189a@parent-rcd-code r1899@protocol))) (r178c@get-protocol-code (lambda (r188b@clause*) (let ((r188d@t (r1782@get-clause 'protocol r188b@clause*))) (let ((r188f@ls/false (rd84@syntax-dispatch r188d@t '(_ any)))) (if r188f@ls/false (apply (lambda (r1891@expr) r1891@expr) r188f@ls/false) (let ((r1893@t r188d@t)) (let ((r1895@ls/false (rd84@syntax-dispatch r1893@t '_))) (if r1895@ls/false (apply (lambda () '#f) r1895@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1893@t))))))))) (r178e@get-fields (lambda (r1879@clause*) (let ((r187b@t r1879@clause*)) (let ((r187d@ls/false (rd84@syntax-dispatch r187b@t '()))) (if r187d@ls/false (apply (lambda () '()) r187d@ls/false) (let ((r187f@t r187b@t)) (let ((r1881@ls/false (rd84@syntax-dispatch r187f@t '((#(scheme-id fields) . each-any) . _)))) (if r1881@ls/false (apply (lambda (r1883@f*) r1883@f*) r1881@ls/false) (let ((r1885@t r187f@t)) (let ((r1887@ls/false (rd84@syntax-dispatch r1885@t '(_ . any)))) (if r1887@ls/false (apply (lambda (r1889@rest) (r178e@get-fields r1889@rest)) r1887@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1885@t)))))))))))) (r1790@get-mutator-indices (lambda (r1861@fields) (let r1867@f ((r1863@fields r1861@fields) (r1864@i '0)) (let ((r1869@t r1863@fields)) (let ((r186b@ls/false (rd84@syntax-dispatch r1869@t '()))) (if r186b@ls/false (apply (lambda () '()) r186b@ls/false) (let ((r186d@t r1869@t)) (let ((r186f@ls/false (rd84@syntax-dispatch r186d@t '((#(scheme-id mutable) . _) . any)))) (if r186f@ls/false (apply (lambda (r1871@rest) (cons r1864@i (r1867@f r1871@rest (+ r1864@i '1)))) r186f@ls/false) (let ((r1873@t r186d@t)) (let ((r1875@ls/false (rd84@syntax-dispatch r1873@t '(_ . any)))) (if r1875@ls/false (apply (lambda (r1877@rest) (r1867@f r1877@rest (+ r1864@i '1))) r1875@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1873@t))))))))))))) (r1792@get-mutators (lambda (r1837@foo r1838@fields) (letrec* ((r183c@gen-name (lambda (r185f@x) (re68@datum->syntax r1837@foo (string->symbol (string-append (symbol->string (re6a@syntax->datum r1837@foo)) '"-" (symbol->string (re6a@syntax->datum r185f@x)) '"-set!")))))) (let r183f@f ((r183d@fields r1838@fields)) (let ((r1841@t r183d@fields)) (let ((r1843@ls/false (rd84@syntax-dispatch r1841@t '()))) (if r1843@ls/false (apply (lambda () '()) r1843@ls/false) (let ((r1845@t r1841@t)) (let ((r1847@ls/false (rd84@syntax-dispatch r1845@t '((#(scheme-id mutable) any any any) . any)))) (if r1847@ls/false (apply (lambda (r1849@name r184a@accessor r184b@mutator r184c@rest) (cons r184b@mutator (r183f@f r184c@rest))) r1847@ls/false) (let ((r1851@t r1845@t)) (let ((r1853@ls/false (rd84@syntax-dispatch r1851@t '((#(scheme-id mutable) any) . any)))) (if r1853@ls/false (apply (lambda (r1855@name r1856@rest) (cons (r183c@gen-name r1855@name) (r183f@f r1856@rest))) r1853@ls/false) (let ((r1859@t r1851@t)) (let ((r185b@ls/false (rd84@syntax-dispatch r1859@t '(_ . any)))) (if r185b@ls/false (apply (lambda (r185d@rest) (r183f@f r185d@rest)) r185b@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1859@t))))))))))))))))) (r1794@get-accessors (lambda (r17f3@foo r17f4@fields) (letrec* ((r17f8@gen-name (lambda (r1835@x) (re68@datum->syntax r17f3@foo (string->symbol (string-append (symbol->string (re6a@syntax->datum r17f3@foo)) '"-" (symbol->string (re6a@syntax->datum r1835@x)))))))) (map (lambda (r17f9@field) (let ((r17fb@t r17f9@field)) (let ((r17fd@ls/false (rd84@syntax-dispatch r17fb@t '(#(scheme-id mutable) any any any)))) (if (and r17fd@ls/false (apply (lambda (r17ff@name r1800@accessor r1801@mutator) (rb7d@id? r1800@accessor)) r17fd@ls/false)) (apply (lambda (r1805@name r1806@accessor r1807@mutator) r1806@accessor) r17fd@ls/false) (let ((r180b@t r17fb@t)) (let ((r180d@ls/false (rd84@syntax-dispatch r180b@t '(#(scheme-id immutable) any any)))) (if (and r180d@ls/false (apply (lambda (r180f@name r1810@accessor) (rb7d@id? r1810@accessor)) r180d@ls/false)) (apply (lambda (r1813@name r1814@accessor) r1814@accessor) r180d@ls/false) (let ((r1817@t r180b@t)) (let ((r1819@ls/false (rd84@syntax-dispatch r1817@t '(#(scheme-id mutable) any)))) (if (and r1819@ls/false (apply (lambda (r181b@name) (rb7d@id? r181b@name)) r1819@ls/false)) (apply (lambda (r181d@name) (r17f8@gen-name r181d@name)) r1819@ls/false) (let ((r181f@t r1817@t)) (let ((r1821@ls/false (rd84@syntax-dispatch r181f@t '(#(scheme-id immutable) any)))) (if (and r1821@ls/false (apply (lambda (r1823@name) (rb7d@id? r1823@name)) r1821@ls/false)) (apply (lambda (r1825@name) (r17f8@gen-name r1825@name)) r1821@ls/false) (let ((r1827@t r181f@t)) (let ((r1829@ls/false (rd84@syntax-dispatch r1827@t 'any))) (if (and r1829@ls/false (apply (lambda (r182b@name) (rb7d@id? r182b@name)) r1829@ls/false)) (apply (lambda (r182d@name) (r17f8@gen-name r182d@name)) r1829@ls/false) (let ((r182f@t r1827@t)) (let ((r1831@ls/false (rd84@syntax-dispatch r182f@t 'any))) (if r1831@ls/false (apply (lambda (r1833@others) (re64@syntax-violation '#f '"invalid field spec" r17f9@field)) r1831@ls/false) (re64@syntax-violation '#f '"invalid syntax" r182f@t)))))))))))))))))))) r17f4@fields)))) (r1796@enumerate (lambda (r17eb@ls) (let r17f1@f ((r17ed@ls r17eb@ls) (r17ee@i '0)) (if (null? r17ed@ls) '() (cons r17ee@i (r17f1@f (cdr r17ed@ls) (+ r17ee@i '1))))))) (r1798@do-define-record (lambda (r17c3@namespec r17c4@clause*) (let ((r17c7@foo (r177c@get-record-name r17c3@namespec))) (let ((r17c9@foo-rtd (gensym))) (let ((r17cb@foo-rcd (gensym))) (let ((r17cd@protocol (gensym))) (let ((r17cf@make-foo (r177e@get-record-constructor-name r17c3@namespec))) (let ((r17d1@fields (r178e@get-fields r17c4@clause*))) (let ((r17d3@idx* (r1796@enumerate r17d1@fields))) (let ((r17d5@foo-x* (r1794@get-accessors r17c7@foo r17d1@fields))) (let ((r17d7@set-foo-x!* (r1792@get-mutators r17c7@foo r17d1@fields))) (let ((r17d9@set-foo-idx* (r1790@get-mutator-indices r17d1@fields))) (let ((r17db@foo? (r1780@get-record-predicate-name r17c3@namespec))) (let ((r17dd@foo-rtd-code (r1784@foo-rtd-code r17c7@foo r17c4@clause* (r1786@parent-rtd-code r17c4@clause*)))) (let ((r17df@foo-rcd-code (r178a@foo-rcd-code r17c4@clause* r17c9@foo-rtd r17cd@protocol (r1788@parent-rcd-code r17c4@clause*)))) (let ((r17e1@protocol-code (r178c@get-protocol-code r17c4@clause*))) (rd3a@bless (cons 'begin (cons (list 'define r17c9@foo-rtd r17dd@foo-rtd-code) (cons (list 'define r17cd@protocol r17e1@protocol-code) (cons (list 'define r17cb@foo-rcd r17df@foo-rcd-code) (cons (list 'define-syntax r17c7@foo (list 'list ''$rtd (list 'syntax r17c9@foo-rtd) (list 'syntax r17cb@foo-rcd))) (cons (list 'define r17db@foo? (list 'record-predicate r17c9@foo-rtd)) (cons (list 'define r17cf@make-foo (list 'record-constructor r17cb@foo-rcd)) (append (map (lambda (r17e3@foo-x r17e4@idx) (list 'define r17e3@foo-x (list 'record-accessor r17c9@foo-rtd r17e4@idx))) r17d5@foo-x* r17d3@idx*) (map (lambda (r17e7@set-foo-x! r17e8@idx) (list 'define r17e7@set-foo-x! (list 'record-mutator r17c9@foo-rtd r17e8@idx))) r17d7@set-foo-x!* r17d9@set-foo-idx*)))))))))))))))))))))))))) (r179a@verify-clauses (lambda (r17a3@x r17a4@cls*) (letrec* ((r17a8@valid-kwds (map rd3a@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (r17aa@free-id-member? (lambda (r17bf@x r17c0@ls) (and (pair? r17c0@ls) (or (rb83@free-id=? r17bf@x (car r17c0@ls)) (r17aa@free-id-member? r17bf@x (cdr r17c0@ls))))))) (let r17af@f ((r17ab@cls* r17a4@cls*) (r17ac@seen* '())) (if (not (null? r17ab@cls*)) (let ((r17b1@t (car r17ab@cls*))) (let ((r17b3@ls/false (rd84@syntax-dispatch r17b1@t '(any . any)))) (if r17b3@ls/false (apply (lambda (r17b5@kwd r17b6@rest) (if (or (not (rb7d@id? r17b5@kwd)) (not (r17aa@free-id-member? r17b5@kwd r17a8@valid-kwds))) (re64@syntax-violation '#f '"not a valid define-record-type keyword" r17b5@kwd) (if (rb89@bound-id-member? r17b5@kwd r17ac@seen*) (re64@syntax-violation '#f '"duplicate use of keyword " r17a3@x r17b5@kwd) (r17af@f (cdr r17ab@cls*) (cons r17b5@kwd r17ac@seen*))))) r17b3@ls/false) (let ((r17b9@t r17b1@t)) (let ((r17bb@ls/false (rd84@syntax-dispatch r17b9@t 'any))) (if r17bb@ls/false (apply (lambda (r17bd@cls) (re64@syntax-violation '#f '"malformed define-record-type clause" r17bd@cls)) r17bb@ls/false) (re64@syntax-violation '#f '"invalid syntax" r17b9@t))))))) (void))))))) (let ((r179b@t r1777@x)) (let ((r179d@ls/false (rd84@syntax-dispatch r179b@t '(_ any . each-any)))) (if r179d@ls/false (apply (lambda (r179f@namespec r17a0@clause*) (begin (r179a@verify-clauses r1777@x r17a0@clause*) (r1798@do-define-record r179f@namespec r17a0@clause*))) r179d@ls/false) (re64@syntax-violation '#f '"invalid syntax" r179b@t))))))) (set! r288a@rd78@define-record-type-macro rd78@define-record-type-macro) (set! rd7a@define-condition-type-macro (lambda (r1973@x) (letrec* ((r1976@mkname (lambda (r19a3@name r19a4@suffix) (re68@datum->syntax r19a3@name (string->symbol (string-append (symbol->string (re6a@syntax->datum r19a3@name)) r19a4@suffix)))))) (let ((r1977@t r1973@x)) (let ((r1979@ls/false (rd84@syntax-dispatch r1977@t '(any any any any any . #(each (any any)))))) (if (and r1979@ls/false (apply (lambda (r197b@ctxt r197c@name r197d@super r197e@constructor r197f@predicate r1980@field* r1981@accessor*) (and (rb7d@id? r197c@name) (rb7d@id? r197d@super) (rb7d@id? r197e@constructor) (rb7d@id? r197f@predicate) (for-all rb7d@id? r1980@field*) (for-all rb7d@id? r1981@accessor*))) r1979@ls/false)) (apply (lambda (r1989@ctxt r198a@name r198b@super r198c@constructor r198d@predicate r198e@field* r198f@accessor*) (let ((r1997@aux-accessor* (map (lambda (r1999@x) (gensym)) r198f@accessor*))) (rd3a@bless (cons 'begin (cons (cons 'define-record-type (cons (list r198a@name r198c@constructor (gensym)) (cons (list 'parent r198b@super) (cons (cons 'fields (map (lambda (r199b@field r199c@aux) (list 'immutable r199b@field r199c@aux)) r198e@field* r1997@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define r198d@predicate (list 'condition-predicate (list 'record-type-descriptor r198a@name))) (map (lambda (r199f@accessor r19a0@aux) (list 'define r199f@accessor (list 'condition-accessor (list 'record-type-descriptor r198a@name) r19a0@aux))) r198f@accessor* r1997@aux-accessor*))))))) r1979@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1977@t))))))) (set! r288b@rd7a@define-condition-type-macro rd7a@define-condition-type-macro) (set! rd7c@incorrect-usage-macro (lambda (r19a7@e) (re64@syntax-violation '#f '"incorrect usage of auxiliary keyword" r19a7@e))) (set! r288c@rd7c@incorrect-usage-macro rd7c@incorrect-usage-macro) (set! rd7e@parameterize-macro (lambda (r19a9@e) (let ((r19ab@t r19a9@e)) (let ((r19ad@ls/false (rd84@syntax-dispatch r19ab@t '(_ () any . each-any)))) (if r19ad@ls/false (apply (lambda (r19af@b r19b0@b*) (rd3a@bless (cons 'let (cons '() (cons r19af@b r19b0@b*))))) r19ad@ls/false) (let ((r19b3@t r19ab@t)) (let ((r19b5@ls/false (rd84@syntax-dispatch r19b3@t '(_ #(each (any any)) any . each-any)))) (if r19b5@ls/false (apply (lambda (r19b7@olhs* r19b8@orhs* r19b9@b r19ba@b*) (let ((r19bf@lhs* (re52@generate-temporaries r19b7@olhs*)) (r19c0@rhs* (re52@generate-temporaries r19b8@orhs*))) (rd3a@bless (cons (list 'lambda (append r19bf@lhs* r19c0@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (r19c3@lhs r19c4@rhs) (list 'let (list (list 't (list r19c3@lhs))) (list r19c3@lhs r19c4@rhs) (cons 'set! (cons r19c4@rhs '(t))))) r19bf@lhs* r19c0@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons r19b9@b r19ba@b*))) '(swap)))))) (append r19b7@olhs* r19b8@orhs*))))) r19b5@ls/false) (re64@syntax-violation '#f '"invalid syntax" r19b3@t))))))))) (set! r288d@rd7e@parameterize-macro rd7e@parameterize-macro) (set! rd80@foreign-call-transformer (lambda (r19c7@e r19c8@r r19c9@mr) (let ((r19cd@t r19c7@e)) (let ((r19cf@ls/false (rd84@syntax-dispatch r19cd@t '(_ any . each-any)))) (if r19cf@ls/false (apply (lambda (r19d1@name r19d2@arg*) (cons 'foreign-call (cons (rda6@chi-expr r19d1@name r19c8@r r19c9@mr) (rda2@chi-expr* r19d2@arg* r19c8@r r19c9@mr)))) r19cf@ls/false) (re64@syntax-violation '#f '"invalid syntax" r19cd@t)))))) (set! r288e@rd80@foreign-call-transformer rd80@foreign-call-transformer) (set! rd82@convert-pattern (lambda (r19d5@pattern r19d6@keys) (letrec* ((r19da@cvt* (lambda (r1a79@p* r1a7a@n r1a7b@ids) (if (null? r1a79@p*) (values '() r1a7b@ids) (call-with-values (lambda () (r19da@cvt* (cdr r1a79@p*) r1a7a@n r1a7b@ids)) (lambda (r1a83@r1a80 r1a84@r1a82) (let ((r1a87@ids r1a84@r1a82) (r1a88@y r1a83@r1a80)) (call-with-values (lambda () (r19dc@cvt (car r1a79@p*) r1a7a@n r1a87@ids)) (lambda (r1a8f@r1a8c r1a90@r1a8e) (let ((r1a93@ids r1a90@r1a8e) (r1a94@x r1a8f@r1a8c)) (values (cons r1a94@x r1a88@y) r1a93@ids)))))))))) (r19dc@cvt (lambda (r19dd@p r19de@n r19df@ids) (let ((r19e3@t r19dd@p)) (let ((r19e5@ls/false (rd84@syntax-dispatch r19e3@t 'any))) (if (and r19e5@ls/false (apply (lambda (r19e7@id) (rb7d@id? r19e7@id)) r19e5@ls/false)) (apply (lambda (r19e9@id) (if (rb89@bound-id-member? r19dd@p r19d6@keys) (values (vector 'free-id r19dd@p) r19df@ids) (if (rb83@free-id=? r19dd@p (rd0c@scheme-stx '_)) (values '_ r19df@ids) (values 'any (cons (cons r19dd@p r19de@n) r19df@ids))))) r19e5@ls/false) (let ((r19eb@t r19e3@t)) (let ((r19ed@ls/false (rd84@syntax-dispatch r19eb@t '(any any)))) (if (and r19ed@ls/false (apply (lambda (r19ef@p r19f0@dots) (rd86@ellipsis? r19f0@dots)) r19ed@ls/false)) (apply (lambda (r19f3@p r19f4@dots) (call-with-values (lambda () (r19dc@cvt r19f3@p (+ r19de@n '1) r19df@ids)) (lambda (r19fb@r19f8 r19fc@r19fa) (let ((r19ff@ids r19fc@r19fa) (r1a00@p r19fb@r19f8)) (values (if (eq? r1a00@p 'any) 'each-any (vector 'each r1a00@p)) r19ff@ids))))) r19ed@ls/false) (let ((r1a03@t r19eb@t)) (let ((r1a05@ls/false (rd84@syntax-dispatch r1a03@t '(any any . #(each+ any () any))))) (if (and r1a05@ls/false (apply (lambda (r1a07@x r1a08@dots r1a09@ys r1a0a@z) (rd86@ellipsis? r1a08@dots)) r1a05@ls/false)) (apply (lambda (r1a0f@x r1a10@dots r1a11@ys r1a12@z) (call-with-values (lambda () (r19dc@cvt r1a12@z r19de@n r19df@ids)) (lambda (r1a1b@r1a18 r1a1c@r1a1a) (let ((r1a1f@ids r1a1c@r1a1a) (r1a20@z r1a1b@r1a18)) (call-with-values (lambda () (r19da@cvt* r1a11@ys r19de@n r1a1f@ids)) (lambda (r1a27@r1a24 r1a28@r1a26) (let ((r1a2b@ids r1a28@r1a26) (r1a2c@ys r1a27@r1a24)) (call-with-values (lambda () (r19dc@cvt r1a0f@x (+ r19de@n '1) r1a2b@ids)) (lambda (r1a33@r1a30 r1a34@r1a32) (let ((r1a37@ids r1a34@r1a32) (r1a38@x r1a33@r1a30)) (values (vector 'each+ r1a38@x (reverse r1a2c@ys) r1a20@z) r1a37@ids))))))))))) r1a05@ls/false) (let ((r1a3b@t r1a03@t)) (let ((r1a3d@ls/false (rd84@syntax-dispatch r1a3b@t '(any . any)))) (if r1a3d@ls/false (apply (lambda (r1a3f@x r1a40@y) (call-with-values (lambda () (r19dc@cvt r1a40@y r19de@n r19df@ids)) (lambda (r1a47@r1a44 r1a48@r1a46) (let ((r1a4b@ids r1a48@r1a46) (r1a4c@y r1a47@r1a44)) (call-with-values (lambda () (r19dc@cvt r1a3f@x r19de@n r1a4b@ids)) (lambda (r1a53@r1a50 r1a54@r1a52) (let ((r1a57@ids r1a54@r1a52) (r1a58@x r1a53@r1a50)) (values (cons r1a58@x r1a4c@y) r1a57@ids)))))))) r1a3d@ls/false) (let ((r1a5b@t r1a3b@t)) (let ((r1a5d@ls/false (rd84@syntax-dispatch r1a5b@t '()))) (if r1a5d@ls/false (apply (lambda () (values '() r19df@ids)) r1a5d@ls/false) (let ((r1a5f@t r1a5b@t)) (let ((r1a61@ls/false (rd84@syntax-dispatch r1a5f@t '#(vector each-any)))) (if (and r1a61@ls/false (apply (lambda (r1a63@p) (not (rb49@stx? r1a63@p))) r1a61@ls/false)) (apply (lambda (r1a65@p) (call-with-values (lambda () (r19dc@cvt r1a65@p r19de@n r19df@ids)) (lambda (r1a6b@r1a68 r1a6c@r1a6a) (let ((r1a6f@ids r1a6c@r1a6a) (r1a70@p r1a6b@r1a68)) (values (vector 'vector r1a70@p) r1a6f@ids))))) r1a61@ls/false) (let ((r1a73@t r1a5f@t)) (let ((r1a75@ls/false (rd84@syntax-dispatch r1a73@t 'any))) (if r1a75@ls/false (apply (lambda (r1a77@datum) (values (vector 'atom (rb91@stx->datum r1a77@datum)) r19df@ids)) r1a75@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1a73@t))))))))))))))))))))))))) (r19dc@cvt r19d5@pattern '0 '())))) (set! r288f@rd82@convert-pattern rd82@convert-pattern) (set! rd84@syntax-dispatch (letrec* ((r1a98@stx^ (lambda (r1b73@e r1b74@m* r1b75@s* r1b76@ae*) (if (and (null? r1b74@m*) (null? r1b75@s*) (null? r1b76@ae*)) r1b73@e (rb65@mkstx r1b73@e r1b74@m* r1b75@s* r1b76@ae*)))) (r1a9a@match-each (lambda (r1b53@e r1b54@p r1b55@m* r1b56@s* r1b57@ae*) (if (pair? r1b53@e) (let ((r1b5d@first (r1aa6@match (car r1b53@e) r1b54@p r1b55@m* r1b56@s* r1b57@ae* '()))) (and r1b5d@first (let ((r1b5f@rest (r1a9a@match-each (cdr r1b53@e) r1b54@p r1b55@m* r1b56@s* r1b57@ae*))) (and r1b5f@rest (cons r1b5d@first r1b5f@rest))))) (if (null? r1b53@e) '() (if (rb49@stx? r1b53@e) (and (not (rb03@top-marked? r1b55@m*)) (call-with-values (lambda () (join-wraps r1b55@m* r1b56@s* r1b57@ae* r1b53@e)) (lambda (r1b67@r1b62 r1b68@r1b64 r1b69@r1b66) (let ((r1b6d@ae* r1b69@r1b66) (r1b6e@s* r1b68@r1b64) (r1b6f@m* r1b67@r1b62)) (r1a9a@match-each (rb4b@stx-expr r1b53@e) r1b54@p r1b6f@m* r1b6e@s* r1b6d@ae*))))) (if (r6c1@r593@annotation? r1b53@e) (r1a9a@match-each (r6c3@r597@annotation-expression r1b53@e) r1b54@p r1b55@m* r1b56@s* r1b57@ae*) '#f)))))) (r1a9c@match-each+ (lambda (r1b13@e r1b14@x-pat r1b15@y-pat r1b16@z-pat r1b17@m* r1b18@s* r1b19@ae* r1b1a@r) (let r1b2b@f ((r1b23@e r1b13@e) (r1b24@m* r1b17@m*) (r1b25@s* r1b18@s*) (r1b26@ae* r1b19@ae*)) (if (pair? r1b23@e) (call-with-values (lambda () (r1b2b@f (cdr r1b23@e) r1b24@m* r1b25@s* r1b26@ae*)) (lambda (r1b33@r1b2e r1b34@r1b30 r1b35@r1b32) (let ((r1b39@r r1b35@r1b32) (r1b3a@y-pat r1b34@r1b30) (r1b3b@xr* r1b33@r1b2e)) (if r1b39@r (if (null? r1b3a@y-pat) (let ((r1b3f@xr (r1aa6@match (car r1b23@e) r1b14@x-pat r1b24@m* r1b25@s* r1b26@ae* '()))) (if r1b3f@xr (values (cons r1b3f@xr r1b3b@xr*) r1b3a@y-pat r1b39@r) (values '#f '#f '#f))) (values '() (cdr r1b3a@y-pat) (r1aa6@match (car r1b23@e) (car r1b3a@y-pat) r1b24@m* r1b25@s* r1b26@ae* r1b39@r))) (values '#f '#f '#f))))) (if (rb49@stx? r1b23@e) (if (rb03@top-marked? r1b24@m*) (values '() r1b15@y-pat (r1aa6@match r1b23@e r1b16@z-pat r1b24@m* r1b25@s* r1b26@ae* r1b1a@r)) (call-with-values (lambda () (join-wraps r1b24@m* r1b25@s* r1b26@ae* r1b23@e)) (lambda (r1b47@r1b42 r1b48@r1b44 r1b49@r1b46) (let ((r1b4d@ae* r1b49@r1b46) (r1b4e@s* r1b48@r1b44) (r1b4f@m* r1b47@r1b42)) (r1b2b@f (rb4b@stx-expr r1b23@e) r1b4f@m* r1b4e@s* r1b4d@ae*))))) (if (r6c1@r593@annotation? r1b23@e) (r1b2b@f (r6c3@r597@annotation-expression r1b23@e) r1b24@m* r1b25@s* r1b26@ae*) (values '() r1b15@y-pat (r1aa6@match r1b23@e r1b16@z-pat r1b24@m* r1b25@s* r1b26@ae* r1b1a@r)))))))) (r1a9e@match-each-any (lambda (r1af7@e r1af8@m* r1af9@s* r1afa@ae*) (if (pair? r1af7@e) (let ((r1aff@l (r1a9e@match-each-any (cdr r1af7@e) r1af8@m* r1af9@s* r1afa@ae*))) (and r1aff@l (cons (r1a98@stx^ (car r1af7@e) r1af8@m* r1af9@s* r1afa@ae*) r1aff@l))) (if (null? r1af7@e) '() (if (rb49@stx? r1af7@e) (and (not (rb03@top-marked? r1af8@m*)) (call-with-values (lambda () (join-wraps r1af8@m* r1af9@s* r1afa@ae* r1af7@e)) (lambda (r1b07@r1b02 r1b08@r1b04 r1b09@r1b06) (let ((r1b0d@ae* r1b09@r1b06) (r1b0e@s* r1b08@r1b04) (r1b0f@m* r1b07@r1b02)) (r1a9e@match-each-any (rb4b@stx-expr r1af7@e) r1b0f@m* r1b0e@s* r1b0d@ae*))))) (if (r6c1@r593@annotation? r1af7@e) (r1a9e@match-each-any (r6c3@r597@annotation-expression r1af7@e) r1af8@m* r1af9@s* r1afa@ae*) '#f)))))) (r1aa0@match-empty (lambda (r1af1@p r1af2@r) (if (null? r1af1@p) r1af2@r (if (eq? r1af1@p '_) r1af2@r (if (eq? r1af1@p 'any) (cons '() r1af2@r) (if (pair? r1af1@p) (r1aa0@match-empty (car r1af1@p) (r1aa0@match-empty (cdr r1af1@p) r1af2@r)) (if (eq? r1af1@p 'each-any) (cons '() r1af2@r) (let ((r1af5@t (vector-ref r1af1@p '0))) (if (memv r1af5@t '(each)) (r1aa0@match-empty (vector-ref r1af1@p '1) r1af2@r) (if (memv r1af5@t '(each+)) (r1aa0@match-empty (vector-ref r1af1@p '1) (r1aa0@match-empty (reverse (vector-ref r1af1@p '2)) (r1aa0@match-empty (vector-ref r1af1@p '3) r1af2@r))) (if (memv r1af5@t '(free-id atom)) r1af2@r (if (memv r1af5@t '(scheme-id atom)) r1af2@r (if (memv r1af5@t '(vector)) (r1aa0@match-empty (vector-ref r1af1@p '1) r1af2@r) (assertion-violation 'syntax-dispatch '"invalid pattern" r1af1@p)))))))))))))) (r1aa2@combine (lambda (r1aed@r* r1aee@r) (if (null? (car r1aed@r*)) r1aee@r (cons (map car r1aed@r*) (r1aa2@combine (map cdr r1aed@r*) r1aee@r))))) (r1aa4@match* (lambda (r1ac9@e r1aca@p r1acb@m* r1acc@s* r1acd@ae* r1ace@r) (if (null? r1aca@p) (and (null? r1ac9@e) r1ace@r) (if (pair? r1aca@p) (and (pair? r1ac9@e) (r1aa6@match (car r1ac9@e) (car r1aca@p) r1acb@m* r1acc@s* r1acd@ae* (r1aa6@match (cdr r1ac9@e) (cdr r1aca@p) r1acb@m* r1acc@s* r1acd@ae* r1ace@r))) (if (eq? r1aca@p 'each-any) (let ((r1ad5@l (r1a9e@match-each-any r1ac9@e r1acb@m* r1acc@s* r1acd@ae*))) (and r1ad5@l (cons r1ad5@l r1ace@r))) (let ((r1ad7@t (vector-ref r1aca@p '0))) (if (memv r1ad7@t '(each)) (if (null? r1ac9@e) (r1aa0@match-empty (vector-ref r1aca@p '1) r1ace@r) (let ((r1ad9@r* (r1a9a@match-each r1ac9@e (vector-ref r1aca@p '1) r1acb@m* r1acc@s* r1acd@ae*))) (and r1ad9@r* (r1aa2@combine r1ad9@r* r1ace@r)))) (if (memv r1ad7@t '(free-id)) (and (symbol? r1ac9@e) (rb03@top-marked? r1acb@m*) (rb83@free-id=? (r1a98@stx^ r1ac9@e r1acb@m* r1acc@s* r1acd@ae*) (vector-ref r1aca@p '1)) r1ace@r) (if (memv r1ad7@t '(scheme-id)) (and (symbol? r1ac9@e) (rb03@top-marked? r1acb@m*) (rb83@free-id=? (r1a98@stx^ r1ac9@e r1acb@m* r1acc@s* r1acd@ae*) (rd0c@scheme-stx (vector-ref r1aca@p '1))) r1ace@r) (if (memv r1ad7@t '(each+)) (call-with-values (lambda () (r1a9c@match-each+ r1ac9@e (vector-ref r1aca@p '1) (vector-ref r1aca@p '2) (vector-ref r1aca@p '3) r1acb@m* r1acc@s* r1acd@ae* r1ace@r)) (lambda (r1ae1@r1adc r1ae2@r1ade r1ae3@r1ae0) (let ((r1ae7@r r1ae3@r1ae0) (r1ae8@y-pat r1ae2@r1ade) (r1ae9@xr* r1ae1@r1adc)) (and r1ae7@r (null? r1ae8@y-pat) (if (null? r1ae9@xr*) (r1aa0@match-empty (vector-ref r1aca@p '1) r1ae7@r) (r1aa2@combine r1ae9@xr* r1ae7@r)))))) (if (memv r1ad7@t '(atom)) (and (fast-equal? (vector-ref r1aca@p '1) (rb8f@strip r1ac9@e r1acb@m*)) r1ace@r) (if (memv r1ad7@t '(vector)) (and (vector? r1ac9@e) (r1aa6@match (vector->list r1ac9@e) (vector-ref r1aca@p '1) r1acb@m* r1acc@s* r1acd@ae* r1ace@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" r1aca@p))))))))))))) (r1aa6@match (lambda (r1aab@e r1aac@p r1aad@m* r1aae@s* r1aaf@ae* r1ab0@r) (if (not r1ab0@r) '#f (if (eq? r1aac@p '_) r1ab0@r (if (eq? r1aac@p 'any) (cons (r1a98@stx^ r1aab@e r1aad@m* r1aae@s* r1aaf@ae*) r1ab0@r) (if (rb49@stx? r1aab@e) (and (not (rb03@top-marked? r1aad@m*)) (call-with-values (lambda () (join-wraps r1aad@m* r1aae@s* r1aaf@ae* r1aab@e)) (lambda (r1abd@r1ab8 r1abe@r1aba r1abf@r1abc) (let ((r1ac3@ae* r1abf@r1abc) (r1ac4@s* r1abe@r1aba) (r1ac5@m* r1abd@r1ab8)) (r1aa6@match (rb4b@stx-expr r1aab@e) r1aac@p r1ac5@m* r1ac4@s* r1ac3@ae* r1ab0@r))))) (if (r6c1@r593@annotation? r1aab@e) (r1aa6@match (r6c3@r597@annotation-expression r1aab@e) r1aac@p r1aad@m* r1aae@s* r1aaf@ae* r1ab0@r) (r1aa4@match* r1aab@e r1aac@p r1aad@m* r1aae@s* r1aaf@ae* r1ab0@r))))))))) (lambda (r1aa7@e r1aa8@p) (r1aa6@match r1aa7@e r1aa8@p '() '() '() '())))) (set! r2890@rd84@syntax-dispatch rd84@syntax-dispatch) (set! rd86@ellipsis? (lambda (r1b7b@x) (and (rb7d@id? r1b7b@x) (rb83@free-id=? r1b7b@x (rd0c@scheme-stx '...))))) (set! r2891@rd86@ellipsis? rd86@ellipsis?) (set! rd88@underscore? (lambda (r1b7d@x) (and (rb7d@id? r1b7d@x) (rb83@free-id=? r1b7d@x (rd0c@scheme-stx '_))))) (set! r2892@rd88@underscore? rd88@underscore?) (set! rd8a@verify-literals (lambda (r1b7f@lits r1b80@expr) (for-each (lambda (r1b83@x) (if (or (not (rb7d@id? r1b83@x)) (rd86@ellipsis? r1b83@x) (rd88@underscore? r1b83@x)) (re64@syntax-violation '#f '"invalid literal" r1b80@expr r1b83@x) (void))) r1b7f@lits))) (set! r2893@rd8a@verify-literals rd8a@verify-literals) (set! rd8c@syntax-case-transformer (letrec* ((r1b86@build-dispatch-call (lambda (r1bf7@pvars r1bf8@expr r1bf9@y r1bfa@r r1bfb@mr) (let ((r1c01@ids (map car r1bf7@pvars)) (r1c02@levels (map cdr r1bf7@pvars))) (let ((r1c05@labels (map rb09@gen-label r1c01@ids)) (r1c06@new-vars (map rb05@gen-lexical r1c01@ids))) (let ((r1c09@body (rda6@chi-expr (rb67@add-subst (rb3d@make-full-rib r1c01@ids r1c05@labels) r1bf8@expr) (append (map (lambda (r1c0b@label r1c0c@var r1c0d@level) (cons r1c0b@label (rb97@make-binding 'syntax (cons r1c0c@var r1c0d@level)))) r1c05@labels r1c06@new-vars (map cdr r1bf7@pvars)) r1bfa@r) r1bfb@mr))) (list '(primitive apply) (rae0@ra12@build-lambda '#f r1c06@new-vars r1c09@body) r1bf9@y)))))) (r1b88@invalid-ids-error (lambda (r1beb@id* r1bec@e r1bed@class) (let r1bf5@find ((r1bf1@id* r1beb@id*) (r1bf2@ok* '())) (if (null? r1bf1@id*) (re64@syntax-violation '#f '"invalid syntax" r1bec@e) (if (rb7d@id? (car r1bf1@id*)) (if (rb89@bound-id-member? (car r1bf1@id*) r1bf2@ok*) (re60@syntax-error (car r1bf1@id*) '"duplicate " r1bed@class) (r1bf5@find (cdr r1bf1@id*) (cons (car r1bf1@id*) r1bf2@ok*))) (re60@syntax-error (car r1bf1@id*) '"invalid " r1bed@class)))))) (r1b8a@gen-clause (lambda (r1bc3@x r1bc4@keys r1bc5@clauses r1bc6@r r1bc7@mr r1bc8@pat r1bc9@fender r1bca@expr) (call-with-values (lambda () (rd82@convert-pattern r1bc8@pat r1bc4@keys)) (lambda (r1bd7@r1bd4 r1bd8@r1bd6) (let ((r1bdb@pvars r1bd8@r1bd6) (r1bdc@p r1bd7@r1bd4)) (if (not (rb87@distinct-bound-ids? (map car r1bdb@pvars))) (r1b88@invalid-ids-error (map car r1bdb@pvars) r1bc8@pat '"pattern variable") (if (not (for-all (lambda (r1bdf@x) (not (rd86@ellipsis? (car r1bdf@x)))) r1bdb@pvars)) (re64@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" r1bc8@pat) (let ((r1be1@y (rb05@gen-lexical 'tmp))) (let ((r1be3@test (if (eq? r1bc9@fender '#t) r1be1@y (let ((r1be5@call (r1b86@build-dispatch-call r1bdb@pvars r1bc9@fender r1be1@y r1bc6@r r1bc7@mr))) (list 'if r1be1@y r1be5@call (list 'quote '#f)))))) (let ((r1be7@conseq (r1b86@build-dispatch-call r1bdb@pvars r1bca@expr r1be1@y r1bc6@r r1bc7@mr))) (let ((r1be9@altern (r1b8c@gen-syntax-case r1bc3@x r1bc4@keys r1bc5@clauses r1bc6@r r1bc7@mr))) (list (rae0@ra12@build-lambda '#f (list r1be1@y) (list 'if r1be3@test r1be7@conseq r1be9@altern)) (list '(primitive syntax-dispatch) r1bc3@x (list 'quote r1bdc@p)))))))))))))) (r1b8c@gen-syntax-case (lambda (r1ba1@x r1ba2@keys r1ba3@clauses r1ba4@r r1ba5@mr) (if (null? r1ba3@clauses) (list '(primitive syntax-error) r1ba1@x) (let ((r1bab@t (car r1ba3@clauses))) (let ((r1bad@ls/false (rd84@syntax-dispatch r1bab@t '(any any)))) (if r1bad@ls/false (apply (lambda (r1baf@pat r1bb0@expr) (if (and (rb7d@id? r1baf@pat) (not (rb89@bound-id-member? r1baf@pat r1ba2@keys)) (not (rd86@ellipsis? r1baf@pat))) (if (rb83@free-id=? r1baf@pat (rd0c@scheme-stx '_)) (rda6@chi-expr r1bb0@expr r1ba4@r r1ba5@mr) (let ((r1bb3@lab (rb09@gen-label r1baf@pat)) (r1bb4@lex (rb05@gen-lexical r1baf@pat))) (let ((r1bb7@body (rda6@chi-expr (rb67@add-subst (rb3d@make-full-rib (list r1baf@pat) (list r1bb3@lab)) r1bb0@expr) (cons (cons r1bb3@lab (rb97@make-binding 'syntax (cons r1bb4@lex '0))) r1ba4@r) r1ba5@mr))) (list (rae0@ra12@build-lambda '#f (list r1bb4@lex) r1bb7@body) r1ba1@x)))) (r1b8a@gen-clause r1ba1@x r1ba2@keys (cdr r1ba3@clauses) r1ba4@r r1ba5@mr r1baf@pat '#t r1bb0@expr))) r1bad@ls/false) (let ((r1bb9@t r1bab@t)) (let ((r1bbb@ls/false (rd84@syntax-dispatch r1bb9@t '(any any any)))) (if r1bbb@ls/false (apply (lambda (r1bbd@pat r1bbe@fender r1bbf@expr) (r1b8a@gen-clause r1ba1@x r1ba2@keys (cdr r1ba3@clauses) r1ba4@r r1ba5@mr r1bbd@pat r1bbe@fender r1bbf@expr)) r1bbb@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1bb9@t))))))))))) (lambda (r1b8d@e r1b8e@r r1b8f@mr) (let ((r1b93@t r1b8d@e)) (let ((r1b95@ls/false (rd84@syntax-dispatch r1b93@t '(_ any each-any . each-any)))) (if r1b95@ls/false (apply (lambda (r1b97@expr r1b98@keys r1b99@clauses) (begin (rd8a@verify-literals r1b98@keys r1b8d@e) (let ((r1b9d@x (rb05@gen-lexical 'tmp))) (let ((r1b9f@body (r1b8c@gen-syntax-case r1b9d@x r1b98@keys r1b99@clauses r1b8e@r r1b8f@mr))) (list (rae0@ra12@build-lambda '#f (list r1b9d@x) r1b9f@body) (rda6@chi-expr r1b97@expr r1b8e@r r1b8f@mr)))))) r1b95@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1b93@t))))))) (set! r2894@rd8c@syntax-case-transformer rd8c@syntax-case-transformer) (set! rd8e@ellipsis-map (lambda (r1c11@proc r1c12@ls . r1c15@ls*) (letrec* ((r1c18@who '...)) (begin (if (not (list? r1c12@ls)) (assertion-violation r1c18@who '"not a list" r1c12@ls) (void)) (if (not (null? r1c15@ls*)) (let ((r1c19@n (length r1c12@ls))) (for-each (lambda (r1c1b@x) (begin (if (not (list? r1c1b@x)) (assertion-violation r1c18@who '"not a list" r1c1b@x) (void)) (if (not (= (length r1c1b@x) r1c19@n)) (assertion-violation r1c18@who '"length mismatch" r1c12@ls r1c1b@x) (void)))) r1c15@ls*)) (void)) (apply map r1c11@proc r1c12@ls r1c15@ls*))))) (set! r2895@rd8e@ellipsis-map rd8e@ellipsis-map) (set! rd90@syntax-transformer (letrec* ((r1c1e@gen-syntax (lambda (r1c95@src r1c96@e r1c97@r r1c98@maps r1c99@ellipsis? r1c9a@vec?) (let ((r1ca1@t r1c96@e)) (let ((r1ca3@ls/false (rd84@syntax-dispatch r1ca1@t 'any))) (if (and r1ca3@ls/false (apply (lambda (r1ca5@dots) (r1c99@ellipsis? r1ca5@dots)) r1ca3@ls/false)) (apply (lambda (r1ca7@dots) (re64@syntax-violation '#f '"misplaced ellipsis in syntax form" r1c95@src)) r1ca3@ls/false) (let ((r1ca9@t r1ca1@t)) (let ((r1cab@ls/false (rd84@syntax-dispatch r1ca9@t 'any))) (if (and r1cab@ls/false (apply (lambda (r1cad@id) (rb7d@id? r1cad@id)) r1cab@ls/false)) (apply (lambda (r1caf@id) (let ((r1cb1@label (rb93@id->label r1c96@e))) (let ((r1cb3@b (rb95@label->binding r1cb1@label r1c97@r))) (if (eq? (rb99@binding-type r1cb3@b) 'syntax) (call-with-values (lambda () (let ((r1cb9@var.lev (rb9b@binding-value r1cb3@b))) (r1c20@gen-ref r1c95@src (car r1cb9@var.lev) (cdr r1cb9@var.lev) r1c98@maps))) (lambda (r1cbb@r1cb6 r1cbc@r1cb8) (let ((r1cbf@maps r1cbc@r1cb8) (r1cc0@var r1cbb@r1cb6)) (values (list 'ref r1cc0@var) r1cbf@maps)))) (values (list 'quote r1c96@e) r1c98@maps))))) r1cab@ls/false) (let ((r1cc3@t r1ca9@t)) (let ((r1cc5@ls/false (rd84@syntax-dispatch r1cc3@t '(any any)))) (if (and r1cc5@ls/false (apply (lambda (r1cc7@dots r1cc8@e) (r1c99@ellipsis? r1cc7@dots)) r1cc5@ls/false)) (apply (lambda (r1ccb@dots r1ccc@e) (if r1c9a@vec? (re64@syntax-violation '#f '"misplaced ellipsis in syntax form" r1c95@src) (r1c1e@gen-syntax r1c95@src r1ccc@e r1c97@r r1c98@maps (lambda (r1ccf@x) '#f) '#f))) r1cc5@ls/false) (let ((r1cd1@t r1cc3@t)) (let ((r1cd3@ls/false (rd84@syntax-dispatch r1cd1@t '(any any . any)))) (if (and r1cd3@ls/false (apply (lambda (r1cd5@x r1cd6@dots r1cd7@y) (r1c99@ellipsis? r1cd6@dots)) r1cd3@ls/false)) (apply (lambda (r1cdb@x r1cdc@dots r1cdd@y) (let r1cf3@f ((r1ce1@y r1cdd@y) (r1ce2@k (lambda (r1ce5@maps) (call-with-values (lambda () (r1c1e@gen-syntax r1c95@src r1cdb@x r1c97@r (cons '() r1ce5@maps) r1c99@ellipsis? '#f)) (lambda (r1ceb@r1ce8 r1cec@r1cea) (let ((r1cef@maps r1cec@r1cea) (r1cf0@x r1ceb@r1ce8)) (if (null? (car r1cef@maps)) (re64@syntax-violation '#f '"extra ellipsis in syntax form" r1c95@src) (values (r1c26@gen-map r1cf0@x (car r1cef@maps)) (cdr r1cef@maps))))))))) (let ((r1cf5@t r1ce1@y)) (let ((r1cf7@ls/false (rd84@syntax-dispatch r1cf5@t '()))) (if r1cf7@ls/false (apply (lambda () (r1ce2@k r1c98@maps)) r1cf7@ls/false) (let ((r1cf9@t r1cf5@t)) (let ((r1cfb@ls/false (rd84@syntax-dispatch r1cf9@t '(any . any)))) (if (and r1cfb@ls/false (apply (lambda (r1cfd@dots r1cfe@y) (r1c99@ellipsis? r1cfd@dots)) r1cfb@ls/false)) (apply (lambda (r1d01@dots r1d02@y) (r1cf3@f r1d02@y (lambda (r1d05@maps) (call-with-values (lambda () (r1ce2@k (cons '() r1d05@maps))) (lambda (r1d0b@r1d08 r1d0c@r1d0a) (let ((r1d0f@maps r1d0c@r1d0a) (r1d10@x r1d0b@r1d08)) (if (null? (car r1d0f@maps)) (re64@syntax-violation '#f '"extra ellipsis in syntax form" r1c95@src) (values (r1c24@gen-mappend r1d10@x (car r1d0f@maps)) (cdr r1d0f@maps))))))))) r1cfb@ls/false) (let ((r1d13@t r1cf9@t)) (let ((r1d15@ls/false (rd84@syntax-dispatch r1d13@t '_))) (if r1d15@ls/false (apply (lambda () (call-with-values (lambda () (r1c1e@gen-syntax r1c95@src r1ce1@y r1c97@r r1c98@maps r1c99@ellipsis? r1c9a@vec?)) (lambda (r1d1b@r1d18 r1d1c@r1d1a) (let ((r1d1f@maps r1d1c@r1d1a) (r1d20@y r1d1b@r1d18)) (call-with-values (lambda () (r1ce2@k r1d1f@maps)) (lambda (r1d27@r1d24 r1d28@r1d26) (let ((r1d2b@maps r1d28@r1d26) (r1d2c@x r1d27@r1d24)) (values (r1c22@gen-append r1d2c@x r1d20@y) r1d2b@maps)))))))) r1d15@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1d13@t)))))))))))) r1cd3@ls/false) (let ((r1d2f@t r1cd1@t)) (let ((r1d31@ls/false (rd84@syntax-dispatch r1d2f@t '(any . any)))) (if r1d31@ls/false (apply (lambda (r1d33@x r1d34@y) (call-with-values (lambda () (r1c1e@gen-syntax r1c95@src r1d33@x r1c97@r r1c98@maps r1c99@ellipsis? '#f)) (lambda (r1d3b@r1d38 r1d3c@r1d3a) (let ((r1d3f@maps r1d3c@r1d3a) (r1d40@xnew r1d3b@r1d38)) (call-with-values (lambda () (r1c1e@gen-syntax r1c95@src r1d34@y r1c97@r r1d3f@maps r1c99@ellipsis? r1c9a@vec?)) (lambda (r1d47@r1d44 r1d48@r1d46) (let ((r1d4b@maps r1d48@r1d46) (r1d4c@ynew r1d47@r1d44)) (values (r1c28@gen-cons r1c96@e r1d33@x r1d34@y r1d40@xnew r1d4c@ynew) r1d4b@maps)))))))) r1d31@ls/false) (let ((r1d4f@t r1d2f@t)) (let ((r1d51@ls/false (rd84@syntax-dispatch r1d4f@t '#(vector each-any)))) (if r1d51@ls/false (apply (lambda (r1d53@ls) (call-with-values (lambda () (r1c1e@gen-syntax r1c95@src r1d53@ls r1c97@r r1c98@maps r1c99@ellipsis? '#t)) (lambda (r1d59@r1d56 r1d5a@r1d58) (let ((r1d5d@maps r1d5a@r1d58) (r1d5e@lsnew r1d59@r1d56)) (values (r1c2a@gen-vector r1c96@e r1d53@ls r1d5e@lsnew) r1d5d@maps))))) r1d51@ls/false) (let ((r1d61@t r1d4f@t)) (let ((r1d63@ls/false (rd84@syntax-dispatch r1d61@t '_))) (if r1d63@ls/false (apply (lambda () (values (list 'quote r1c96@e) r1c98@maps)) r1d63@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1d61@t)))))))))))))))))))))))) (r1c20@gen-ref (lambda (r1c7b@src r1c7c@var r1c7d@level r1c7e@maps) (if (= r1c7d@level '0) (values r1c7c@var r1c7e@maps) (if (null? r1c7e@maps) (re64@syntax-violation '#f '"missing ellipsis in syntax form" r1c7b@src) (call-with-values (lambda () (r1c20@gen-ref r1c7b@src r1c7c@var (- r1c7d@level '1) (cdr r1c7e@maps))) (lambda (r1c87@r1c84 r1c88@r1c86) (let ((r1c8b@outer-maps r1c88@r1c86) (r1c8c@outer-var r1c87@r1c84)) (let ((r1c8f@t (assq r1c8c@outer-var (car r1c7e@maps)))) (if r1c8f@t ((lambda (r1c91@b) (values (cdr r1c91@b) r1c7e@maps)) r1c8f@t) (let ((r1c93@inner-var (rb05@gen-lexical 'tmp))) (values r1c93@inner-var (cons (cons (cons r1c8c@outer-var r1c93@inner-var) (car r1c7e@maps)) r1c8b@outer-maps)))))))))))) (r1c22@gen-append (lambda (r1c77@x r1c78@y) (if (fast-equal? r1c78@y ''()) r1c77@x (list 'append r1c77@x r1c78@y)))) (r1c24@gen-mappend (lambda (r1c73@e r1c74@map-env) (list 'apply '(primitive append) (r1c26@gen-map r1c73@e r1c74@map-env)))) (r1c26@gen-map (lambda (r1c61@e r1c62@map-env) (let ((r1c65@formals (map cdr r1c62@map-env)) (r1c66@actuals (map (lambda (r1c69@x) (list 'ref (car r1c69@x))) r1c62@map-env))) (if (eq? (car r1c61@e) 'ref) (car r1c66@actuals) (if (for-all (lambda (r1c6b@x) (and (eq? (car r1c6b@x) 'ref) (memq (cadr r1c6b@x) r1c65@formals))) (cdr r1c61@e)) (let ((r1c6d@args (map (let ((r1c6f@r (map cons r1c65@formals r1c66@actuals))) (lambda (r1c71@x) (cdr (assq (cadr r1c71@x) r1c6f@r)))) (cdr r1c61@e)))) (cons 'map (cons (list 'primitive (car r1c61@e)) r1c6d@args))) (cons* 'map (list 'lambda r1c65@formals r1c61@e) r1c66@actuals)))))) (r1c28@gen-cons (lambda (r1c51@e r1c52@x r1c53@y r1c54@xnew r1c55@ynew) (let ((r1c5b@t (car r1c55@ynew))) (if (memv r1c5b@t '(quote)) (if (eq? (car r1c54@xnew) 'quote) (let ((r1c5d@xnew (cadr r1c54@xnew)) (r1c5e@ynew (cadr r1c55@ynew))) (if (and (eq? r1c5d@xnew r1c52@x) (eq? r1c5e@ynew r1c53@y)) (list 'quote r1c51@e) (list 'quote (cons r1c5d@xnew r1c5e@ynew)))) (if (null? (cadr r1c55@ynew)) (list 'list r1c54@xnew) (list 'cons r1c54@xnew r1c55@ynew))) (if (memv r1c5b@t '(list)) (cons 'list (cons r1c54@xnew (cdr r1c55@ynew))) (list 'cons r1c54@xnew r1c55@ynew)))))) (r1c2a@gen-vector (lambda (r1c4b@e r1c4c@ls r1c4d@lsnew) (if (eq? (car r1c4d@lsnew) 'quote) (if (eq? (cadr r1c4d@lsnew) r1c4c@ls) (list 'quote r1c4b@e) (list 'quote (list->vector (cadr r1c4d@lsnew)))) (if (eq? (car r1c4d@lsnew) 'list) (cons 'vector (cdr r1c4d@lsnew)) (list 'list->vector r1c4d@lsnew))))) (r1c2c@regen (lambda (r1c45@x) (let ((r1c47@t (car r1c45@x))) (if (memv r1c47@t '(ref)) (cadr r1c45@x) (if (memv r1c47@t '(primitive)) (list 'primitive (cadr r1c45@x)) (if (memv r1c47@t '(quote)) (list 'quote (cadr r1c45@x)) (if (memv r1c47@t '(lambda)) (rae0@ra12@build-lambda '#f (cadr r1c45@x) (r1c2c@regen (caddr r1c45@x))) (if (memv r1c47@t '(map)) (let ((r1c49@ls (map r1c2c@regen (cdr r1c45@x)))) (cons '(primitive ellipsis-map) r1c49@ls)) (cons (list 'primitive (car r1c45@x)) (map r1c2c@regen (cdr r1c45@x)))))))))))) (lambda (r1c2d@e r1c2e@r r1c2f@mr) (let ((r1c33@t r1c2d@e)) (let ((r1c35@ls/false (rd84@syntax-dispatch r1c33@t '(_ any)))) (if r1c35@ls/false (apply (lambda (r1c37@x) (call-with-values (lambda () (r1c1e@gen-syntax r1c2d@e r1c37@x r1c2e@r '() rd86@ellipsis? '#f)) (lambda (r1c3d@r1c3a r1c3e@r1c3c) (let ((r1c41@maps r1c3e@r1c3c) (r1c42@e r1c3d@r1c3a)) (r1c2c@regen r1c42@e))))) r1c35@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1c33@t))))))) (set! r2896@rd90@syntax-transformer rd90@syntax-transformer) (set! rd92@core-macro-transformer (lambda (r1d65@name) (let ((r1d67@t r1d65@name)) (if (memv r1d67@t '(quote)) rd34@quote-transformer (if (memv r1d67@t '(lambda)) rd38@lambda-transformer (if (memv r1d67@t '(case-lambda)) rd36@case-lambda-transformer (if (memv r1d67@t '(letrec)) rd1c@letrec-transformer (if (memv r1d67@t '(letrec*)) rd1e@letrec*-transformer (if (memv r1d67@t '(let)) rd1a@let-transformer (if (memv r1d67@t '(if)) rd2c@if-transformer (if (memv r1d67@t '(and)) rd2e@and-transformer (if (memv r1d67@t '(or)) rd30@or-transformer (if (memv r1d67@t '(foreign-call)) rd80@foreign-call-transformer (if (memv r1d67@t '(syntax-case)) rd8c@syntax-case-transformer (if (memv r1d67@t '(syntax)) rd90@syntax-transformer (if (memv r1d67@t '(type-descriptor)) rd22@type-descriptor-transformer (if (memv r1d67@t '(record-type-descriptor)) rd24@record-type-descriptor-transformer (if (memv r1d67@t '(record-constructor-descriptor)) rd26@record-constructor-descriptor-transformer (if (memv r1d67@t '(fluid-let-syntax)) rd20@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" r1d65@name)))))))))))))))))))) (set! r2897@rd92@core-macro-transformer rd92@core-macro-transformer) (set! rd94@symbol-macro (lambda (r1d69@x r1d6a@set) (let ((r1d6d@t r1d69@x)) (let ((r1d6f@ls/false (rd84@syntax-dispatch r1d6d@t '(_ any)))) (if (and r1d6f@ls/false (apply (lambda (r1d71@name) (and (rb7d@id? r1d71@name) (memq (rb7f@id->sym r1d71@name) r1d6a@set))) r1d6f@ls/false)) (apply (lambda (r1d73@name) (rd3a@bless (list 'quote r1d73@name))) r1d6f@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1d6d@t)))))) (set! r2898@rd94@symbol-macro rd94@symbol-macro) (set! rd96@macro-transformer (lambda (r1d75@x) (if (procedure? r1d75@x) r1d75@x (if (symbol? r1d75@x) (let ((r1d77@t r1d75@x)) (if (memv r1d77@t '(define-record-type)) rd78@define-record-type-macro (if (memv r1d77@t '(define-struct)) rd76@define-struct-macro (if (memv r1d77@t '(include)) rd6c@include-macro (if (memv r1d77@t '(cond)) rd68@cond-macro (if (memv r1d77@t '(let)) rd40@let-macro (if (memv r1d77@t '(do)) rd60@do-macro (if (memv r1d77@t '(or)) rd64@or-macro (if (memv r1d77@t '(and)) rd66@and-macro (if (memv r1d77@t '(let*)) rd62@let*-macro (if (memv r1d77@t '(let-values)) rd42@let-values-macro (if (memv r1d77@t '(let*-values)) rd44@let*-values-macro (if (memv r1d77@t '(syntax-rules)) rd70@syntax-rules-macro (if (memv r1d77@t '(quasiquote)) rd72@quasiquote-macro (if (memv r1d77@t '(quasisyntax)) rd74@quasisyntax-macro (if (memv r1d77@t '(with-syntax)) rd3c@with-syntax-macro (if (memv r1d77@t '(when)) rd28@when-macro (if (memv r1d77@t '(unless)) rd2a@unless-macro (if (memv r1d77@t '(case)) rd32@case-macro (if (memv r1d77@t '(identifier-syntax)) rd5e@identifier-syntax-macro (if (memv r1d77@t '(time)) rd56@time-macro (if (memv r1d77@t '(delay)) rd58@delay-macro (if (memv r1d77@t '(assert)) rd5a@assert-macro (if (memv r1d77@t '(endianness)) rd5c@endianness-macro (if (memv r1d77@t '(guard)) rd52@guard-macro (if (memv r1d77@t '(define-enumeration)) rd54@define-enumeration-macro (if (memv r1d77@t '(trace-lambda)) rd46@trace-lambda-macro (if (memv r1d77@t '(trace-define)) rd48@trace-define-macro (if (memv r1d77@t '(trace-define-syntax)) rd4a@trace-define-syntax-macro (if (memv r1d77@t '(trace-let-syntax)) rd4e@trace-let-syntax-macro (if (memv r1d77@t '(trace-letrec-syntax)) rd50@trace-letrec-syntax-macro (if (memv r1d77@t '(define-condition-type)) rd7a@define-condition-type-macro (if (memv r1d77@t '(parameterize)) rd7e@parameterize-macro (if (memv r1d77@t '(include-into)) rd6e@include-into-macro (if (memv r1d77@t '(eol-style)) (lambda (r1d79@x) (rd94@symbol-macro r1d79@x '(none lf cr crlf nel crnel ls))) (if (memv r1d77@t '(error-handling-mode)) (lambda (r1d7b@x) (rd94@symbol-macro r1d7b@x '(ignore raise replace))) (if (memv r1d77@t '(buffer-mode)) (lambda (r1d7d@x) (rd94@symbol-macro r1d7d@x '(none line block))) (if (memv r1d77@t '(file-options)) raf8@file-options-macro (if (memv r1d77@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) rd7c@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" r1d75@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" r1d75@x))))) (set! r2899@rd96@macro-transformer rd96@macro-transformer) (set! rd98@local-macro-transformer (lambda (r1d7f@x) (car r1d7f@x))) (set! r289a@rd98@local-macro-transformer rd98@local-macro-transformer) (set! rd9a@do-macro-call (lambda (r1d81@transformer r1d82@expr r1d83@rib) (let ((r1d87@out (r1d81@transformer (rb69@add-mark rb61@anti-mark '#f r1d82@expr '#f)))) (begin (let r1d8b@f ((r1d89@x r1d87@out)) (if (not (rb49@stx? r1d89@x)) (if (pair? r1d89@x) (begin (r1d8b@f (car r1d89@x)) (r1d8b@f (cdr r1d89@x))) (if (vector? r1d89@x) (vector-for-each r1d8b@f r1d89@x) (if (symbol? r1d89@x) (re64@syntax-violation '#f '"raw symbol encountered in output of macro" r1d82@expr r1d89@x) (void)))) (void))) (rb69@add-mark (rb5f@gen-mark) r1d83@rib r1d87@out r1d82@expr))))) (set! r289b@rd9a@do-macro-call rd9a@do-macro-call) (set! rd9c@chi-macro (lambda (r1d8d@p r1d8e@e r1d8f@rib) (rd9a@do-macro-call (rd96@macro-transformer r1d8d@p) r1d8e@e r1d8f@rib))) (set! r289c@rd9c@chi-macro rd9c@chi-macro) (set! rd9e@chi-local-macro (lambda (r1d93@p r1d94@e r1d95@rib) (rd9a@do-macro-call (rd98@local-macro-transformer r1d93@p) r1d94@e r1d95@rib))) (set! r289d@rd9e@chi-local-macro rd9e@chi-local-macro) (set! rda0@chi-global-macro (lambda (r1d99@p r1d9a@e r1d9b@rib) (let ((r1d9f@lib (car r1d99@p)) (r1da0@loc (cdr r1d99@p))) (begin (r99a@r7e9@visit-library r1d9f@lib) (let ((r1da3@x (symbol-value r1da0@loc))) (let ((r1da5@transformer (if (procedure? r1da3@x) r1da3@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" r1da3@x)))) (rd9a@do-macro-call r1da5@transformer r1d9a@e r1d9b@rib))))))) (set! r289e@rda0@chi-global-macro rda0@chi-global-macro) (set! rda2@chi-expr* (lambda (r1da7@e* r1da8@r r1da9@mr) (if (null? r1da7@e*) '() (let ((r1dad@e (rda6@chi-expr (car r1da7@e*) r1da8@r r1da9@mr))) (cons r1dad@e (rda2@chi-expr* (cdr r1da7@e*) r1da8@r r1da9@mr)))))) (set! r289f@rda2@chi-expr* rda2@chi-expr*) (set! rda4@chi-application (lambda (r1daf@e r1db0@r r1db1@mr) (let ((r1db5@t r1daf@e)) (let ((r1db7@ls/false (rd84@syntax-dispatch r1db5@t '(any . each-any)))) (if r1db7@ls/false (apply (lambda (r1db9@rator r1dba@rands) (let ((r1dbd@rator (rda6@chi-expr r1db9@rator r1db0@r r1db1@mr))) (cons r1dbd@rator (rda2@chi-expr* r1dba@rands r1db0@r r1db1@mr)))) r1db7@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1db5@t)))))) (set! r28a0@rda4@chi-application rda4@chi-application) (set! rda6@chi-expr (lambda (r1dbf@e r1dc0@r r1dc1@mr) (call-with-values (lambda () (rb9f@syntax-type r1dbf@e r1dc0@r)) (lambda (r1dcb@r1dc6 r1dcc@r1dc8 r1dcd@r1dca) (let ((r1dd1@kwd r1dcd@r1dca) (r1dd2@value r1dcc@r1dc8) (r1dd3@type r1dcb@r1dc6)) (let ((r1dd7@t r1dd3@type)) (if (memv r1dd7@t '(core-macro)) (let ((r1dd9@transformer (rd92@core-macro-transformer r1dd2@value))) (r1dd9@transformer r1dbf@e r1dc0@r r1dc1@mr)) (if (memv r1dd7@t '(global)) (let ((r1ddb@lib (car r1dd2@value))) (let ((r1ddd@loc (cdr r1dd2@value))) (begin ((rdec@inv-collector) r1ddb@lib) r1ddd@loc))) (if (memv r1dd7@t '(core-prim)) (let ((r1ddf@name r1dd2@value)) (list 'primitive r1ddf@name)) (if (memv r1dd7@t '(call)) (rda4@chi-application r1dbf@e r1dc0@r r1dc1@mr) (if (memv r1dd7@t '(lexical)) (let ((r1de1@lex (rd0e@lexical-var r1dd2@value))) r1de1@lex) (if (memv r1dd7@t '(global-macro global-macro!)) (rda6@chi-expr (rda0@chi-global-macro r1dd2@value r1dbf@e '#f) r1dc0@r r1dc1@mr) (if (memv r1dd7@t '(local-macro local-macro!)) (rda6@chi-expr (rd9e@chi-local-macro r1dd2@value r1dbf@e '#f) r1dc0@r r1dc1@mr) (if (memv r1dd7@t '(macro macro!)) (rda6@chi-expr (rd9c@chi-macro r1dd2@value r1dbf@e '#f) r1dc0@r r1dc1@mr) (if (memv r1dd7@t '(constant)) (let ((r1de3@datum r1dd2@value)) (list 'quote r1de3@datum)) (if (memv r1dd7@t '(set!)) (rda8@chi-set! r1dbf@e r1dc0@r r1dc1@mr) (if (memv r1dd7@t '(begin)) (let ((r1de5@t r1dbf@e)) (let ((r1de7@ls/false (rd84@syntax-dispatch r1de5@t '(_ any . each-any)))) (if r1de7@ls/false (apply (lambda (r1de9@x r1dea@x*) (rae2@ra42@build-sequence '#f (rda2@chi-expr* (cons r1de9@x r1dea@x*) r1dc0@r r1dc1@mr))) r1de7@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1de5@t)))) (if (memv r1dd7@t '(let-syntax letrec-syntax)) (let ((r1ded@t r1dbf@e)) (let ((r1def@ls/false (rd84@syntax-dispatch r1ded@t '(_ #(each (any any)) any . each-any)))) (if (and r1def@ls/false (apply (lambda (r1df1@xlhs* r1df2@xrhs* r1df3@xbody r1df4@xbody*) (if (not (rb85@valid-bound-ids? r1df1@xlhs*)) (re64@syntax-violation '#f '"invalid identifiers" r1dbf@e) (void))) r1def@ls/false)) (apply (lambda (r1df9@xlhs* r1dfa@xrhs* r1dfb@xbody r1dfc@xbody*) (let ((r1e01@xlab* (map rb09@gen-label r1df9@xlhs*))) (let ((r1e03@xrib (rb3d@make-full-rib r1df9@xlhs* r1e01@xlab*))) (let ((r1e05@xb* (map (lambda (r1e07@x) (rbb5@make-eval-transformer (rdde@expand-transformer (if (eq? r1dd3@type 'let-syntax) r1e07@x (rb67@add-subst r1e03@xrib r1e07@x)) r1dc1@mr))) r1dfa@xrhs*))) (rae2@ra42@build-sequence '#f (rda2@chi-expr* (map (lambda (r1e09@x) (rb67@add-subst r1e03@xrib r1e09@x)) (cons r1dfb@xbody r1dfc@xbody*)) (append (map cons r1e01@xlab* r1e05@xb*) r1dc0@r) (append (map cons r1e01@xlab* r1e05@xb*) r1dc1@mr))))))) r1def@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1ded@t)))) (if (memv r1dd7@t '(displaced-lexical)) (re64@syntax-violation '#f '"identifier out of context" r1dbf@e) (if (memv r1dd7@t '(syntax)) (re64@syntax-violation '#f '"reference to pattern variable outside a syntax form" r1dbf@e) (if (memv r1dd7@t '(define define-syntax module import library)) (re64@syntax-violation '#f (string-append (let ((r1e0b@t r1dd3@type)) (if (memv r1e0b@t '(define)) '"a definition" (if (memv r1e0b@t '(define-syntax)) '"a define-syntax" (if (memv r1e0b@t '(module)) '"a module definition" (if (memv r1e0b@t '(library)) '"a library definition" (if (memv r1e0b@t '(import)) '"an import declaration" (if (memv r1e0b@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") r1dbf@e) (if (memv r1dd7@t '(mutable)) (re64@syntax-violation '#f '"attempt to reference an unexportable variable" r1dbf@e) (re64@syntax-violation '#f '"invalid expression" r1dbf@e))))))))))))))))))))))) (set! r28a1@rda6@chi-expr rda6@chi-expr) (set! rda8@chi-set! (lambda (r1e0d@e r1e0e@r r1e0f@mr) (let ((r1e13@t r1e0d@e)) (let ((r1e15@ls/false (rd84@syntax-dispatch r1e13@t '(_ any any)))) (if (and r1e15@ls/false (apply (lambda (r1e17@x r1e18@v) (rb7d@id? r1e17@x)) r1e15@ls/false)) (apply (lambda (r1e1b@x r1e1c@v) (call-with-values (lambda () (rb9f@syntax-type r1e1b@x r1e0e@r)) (lambda (r1e25@r1e20 r1e26@r1e22 r1e27@r1e24) (let ((r1e2b@kwd r1e27@r1e24) (r1e2c@value r1e26@r1e22) (r1e2d@type r1e25@r1e20)) (let ((r1e31@t r1e2d@type)) (if (memv r1e31@t '(lexical)) (begin (rd12@set-lexical-mutable! r1e2c@value '#t) (list 'set! (rd0e@lexical-var r1e2c@value) (rda6@chi-expr r1e1c@v r1e0e@r r1e0f@mr))) (if (memv r1e31@t '(core-prim)) (re64@syntax-violation '#f '"cannot modify imported core primitive" r1e0d@e) (if (memv r1e31@t '(global)) (re64@syntax-violation '#f '"attempt to modify imported binding" r1e0d@e) (if (memv r1e31@t '(global-macro!)) (rda6@chi-expr (rda0@chi-global-macro r1e2c@value r1e0d@e '#f) r1e0e@r r1e0f@mr) (if (memv r1e31@t '(local-macro!)) (rda6@chi-expr (rd9e@chi-local-macro r1e2c@value r1e0d@e '#f) r1e0e@r r1e0f@mr) (if (memv r1e31@t '(mutable)) (re64@syntax-violation '#f '"attempt to assign to an unexportable variable" r1e0d@e) (re64@syntax-violation '#f '"invalid syntax" r1e0d@e)))))))))))) r1e15@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1e13@t)))))) (set! r28a2@rda8@chi-set! rda8@chi-set!) (set! rdaa@verify-formals (lambda (r1e33@fmls r1e34@stx) (let ((r1e37@t r1e33@fmls)) (let ((r1e39@ls/false (rd84@syntax-dispatch r1e37@t 'each-any))) (if r1e39@ls/false (apply (lambda (r1e3b@x*) (if (not (rb85@valid-bound-ids? r1e3b@x*)) (rd3e@invalid-fmls-error r1e34@stx r1e33@fmls) (void))) r1e39@ls/false) (let ((r1e3d@t r1e37@t)) (let ((r1e3f@ls/false (rd84@syntax-dispatch r1e3d@t '#(each+ any () any)))) (if r1e3f@ls/false (apply (lambda (r1e41@x* r1e42@x) (if (not (rb85@valid-bound-ids? (cons r1e42@x r1e41@x*))) (rd3e@invalid-fmls-error r1e34@stx r1e33@fmls) (void))) r1e3f@ls/false) (let ((r1e45@t r1e3d@t)) (let ((r1e47@ls/false (rd84@syntax-dispatch r1e45@t '_))) (if r1e47@ls/false (apply (lambda () (re64@syntax-violation '#f '"invalid syntax" r1e34@stx)) r1e47@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1e45@t)))))))))))) (set! r28a3@rdaa@verify-formals rdaa@verify-formals) (set! rdac@chi-lambda-clause (lambda (r1e49@stx r1e4a@fmls r1e4b@body* r1e4c@r r1e4d@mr) (let ((r1e53@t r1e4a@fmls)) (let ((r1e55@ls/false (rd84@syntax-dispatch r1e53@t 'each-any))) (if r1e55@ls/false (apply (lambda (r1e57@x*) (begin (rdaa@verify-formals r1e4a@fmls r1e49@stx) (let ((r1e59@lex* (map rb05@gen-lexical r1e57@x*)) (r1e5a@lab* (map rb09@gen-label r1e57@x*))) (values r1e59@lex* (rdbc@chi-internal (rb67@add-subst (rb3d@make-full-rib r1e57@x* r1e5a@lab*) r1e4b@body*) (rd16@add-lexicals r1e5a@lab* r1e59@lex* r1e4c@r) r1e4d@mr))))) r1e55@ls/false) (let ((r1e5d@t r1e53@t)) (let ((r1e5f@ls/false (rd84@syntax-dispatch r1e5d@t '#(each+ any () any)))) (if r1e5f@ls/false (apply (lambda (r1e61@x* r1e62@x) (begin (rdaa@verify-formals r1e4a@fmls r1e49@stx) (let ((r1e65@lex* (map rb05@gen-lexical r1e61@x*)) (r1e66@lab* (map rb09@gen-label r1e61@x*)) (r1e67@lex (rb05@gen-lexical r1e62@x)) (r1e68@lab (rb09@gen-label r1e62@x))) (values (append r1e65@lex* r1e67@lex) (rdbc@chi-internal (rb67@add-subst (rb3d@make-full-rib (cons r1e62@x r1e61@x*) (cons r1e68@lab r1e66@lab*)) r1e4b@body*) (rd16@add-lexicals (cons r1e68@lab r1e66@lab*) (cons r1e67@lex r1e65@lex*) r1e4c@r) r1e4d@mr))))) r1e5f@ls/false) (let ((r1e6d@t r1e5d@t)) (let ((r1e6f@ls/false (rd84@syntax-dispatch r1e6d@t '_))) (if r1e6f@ls/false (apply (lambda () (re64@syntax-violation '#f '"invalid syntax" r1e4a@fmls)) r1e6f@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1e6d@t)))))))))))) (set! r28a4@rdac@chi-lambda-clause rdac@chi-lambda-clause) (set! rdae@chi-lambda-clause* (lambda (r1e71@stx r1e72@fmls* r1e73@body** r1e74@r r1e75@mr) (if (null? r1e72@fmls*) (values '() '()) (call-with-values (lambda () (rdac@chi-lambda-clause r1e71@stx (car r1e72@fmls*) (car r1e73@body**) r1e74@r r1e75@mr)) (lambda (r1e7f@r1e7c r1e80@r1e7e) (let ((r1e83@b r1e80@r1e7e) (r1e84@a r1e7f@r1e7c)) (call-with-values (lambda () (rdae@chi-lambda-clause* r1e71@stx (cdr r1e72@fmls*) (cdr r1e73@body**) r1e74@r r1e75@mr)) (lambda (r1e8b@r1e88 r1e8c@r1e8a) (let ((r1e8f@b* r1e8c@r1e8a) (r1e90@a* r1e8b@r1e88)) (values (cons r1e84@a r1e90@a*) (cons r1e83@b r1e8f@b*))))))))))) (set! r28a5@rdae@chi-lambda-clause* rdae@chi-lambda-clause*) (set! rdb0@chi-defun (lambda (r1e93@x r1e94@r r1e95@mr) (let ((r1e99@fmls (car r1e93@x)) (r1e9a@body* (cdr r1e93@x))) (call-with-values (lambda () (rdac@chi-lambda-clause r1e99@fmls r1e99@fmls r1e9a@body* r1e94@r r1e95@mr)) (lambda (r1ea1@r1e9e r1ea2@r1ea0) (let ((r1ea5@body r1ea2@r1ea0) (r1ea6@fmls r1ea1@r1e9e)) (rae0@ra12@build-lambda '#f r1ea6@fmls r1ea5@body))))))) (set! r28a6@rdb0@chi-defun rdb0@chi-defun) (set! rdb2@chi-rhs (lambda (r1ea9@rhs r1eaa@r r1eab@mr) (let ((r1eaf@t (car r1ea9@rhs))) (if (memv r1eaf@t '(defun)) (rdb0@chi-defun (cdr r1ea9@rhs) r1eaa@r r1eab@mr) (if (memv r1eaf@t '(expr)) (let ((r1eb1@expr (cdr r1ea9@rhs))) (rda6@chi-expr r1eb1@expr r1eaa@r r1eab@mr)) (if (memv r1eaf@t '(top-expr)) (let ((r1eb3@expr (cdr r1ea9@rhs))) (rae2@ra42@build-sequence '#f (list (rda6@chi-expr r1eb3@expr r1eaa@r r1eab@mr) (rae3@ra44@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" r1ea9@rhs))))))) (set! r28a7@rdb2@chi-rhs rdb2@chi-rhs) (set! rdb4@expand-interaction-rhs*/init* (lambda (r1eb5@lhs* r1eb6@rhs* r1eb7@init* r1eb8@r r1eb9@mr) (let r1ec3@f ((r1ebf@lhs* r1eb5@lhs*) (r1ec0@rhs* r1eb6@rhs*)) (if (null? r1ebf@lhs*) (map (lambda (r1ec5@x) (rda6@chi-expr r1ec5@x r1eb8@r r1eb9@mr)) r1eb7@init*) (let ((r1ec7@lhs (car r1ebf@lhs*)) (r1ec8@rhs (car r1ec0@rhs*))) (let ((r1ecb@t (car r1ec8@rhs))) (if (memv r1ecb@t '(defun)) (let ((r1ecd@rhs (rdb0@chi-defun (cdr r1ec8@rhs) r1eb8@r r1eb9@mr))) (cons (list 'set! r1ec7@lhs r1ecd@rhs) (r1ec3@f (cdr r1ebf@lhs*) (cdr r1ec0@rhs*)))) (if (memv r1ecb@t '(expr)) (let ((r1ecf@rhs (rda6@chi-expr (cdr r1ec8@rhs) r1eb8@r r1eb9@mr))) (cons (list 'set! r1ec7@lhs r1ecf@rhs) (r1ec3@f (cdr r1ebf@lhs*) (cdr r1ec0@rhs*)))) (if (memv r1ecb@t '(top-expr)) (let ((r1ed1@e (rda6@chi-expr (cdr r1ec8@rhs) r1eb8@r r1eb9@mr))) (cons r1ed1@e (r1ec3@f (cdr r1ebf@lhs*) (cdr r1ec0@rhs*)))) (error 'expand-interaction '"invallid" r1ec8@rhs)))))))))) (set! r28a8@rdb4@expand-interaction-rhs*/init* rdb4@expand-interaction-rhs*/init*) (set! rdb6@chi-rhs* (lambda (r1ed3@rhs* r1ed4@r r1ed5@mr) (let r1edb@f ((r1ed9@ls r1ed3@rhs*)) (if (null? r1ed9@ls) '() (let ((r1edd@a (rdb2@chi-rhs (car r1ed9@ls) r1ed4@r r1ed5@mr))) (cons r1edd@a (r1edb@f (cdr r1ed9@ls)))))))) (set! r28a9@rdb6@chi-rhs* rdb6@chi-rhs*) (set! rdb8@find-bound=? (lambda (r1edf@x r1ee0@lhs* r1ee1@rhs*) (if (null? r1ee0@lhs*) '#f (if (rb81@bound-id=? r1edf@x (car r1ee0@lhs*)) (car r1ee1@rhs*) (rdb8@find-bound=? r1edf@x (cdr r1ee0@lhs*) (cdr r1ee1@rhs*)))))) (set! r28aa@rdb8@find-bound=? rdb8@find-bound=?) (set! rdba@find-dups (lambda (r1ee5@ls) (let r1eeb@f ((r1ee7@ls r1ee5@ls) (r1ee8@dups '())) (if (null? r1ee7@ls) r1ee8@dups (let ((r1eed@t (rdb8@find-bound=? (car r1ee7@ls) (cdr r1ee7@ls) (cdr r1ee7@ls)))) (if r1eed@t ((lambda (r1eef@x) (r1eeb@f (cdr r1ee7@ls) (cons (list (car r1ee7@ls) r1eef@x) r1ee8@dups))) r1eed@t) (r1eeb@f (cdr r1ee7@ls) r1ee8@dups))))))) (set! r28ab@rdba@find-dups rdba@find-dups) (set! rdbc@chi-internal (lambda (r1ef1@e* r1ef2@r r1ef3@mr) (let ((r1ef7@rib (rb31@make-empty-rib))) (call-with-values (lambda () (rddc@chi-body* (map (lambda (r1f09@x) (rb67@add-subst r1ef7@rib r1f09@x)) (rb7b@syntax->list r1ef1@e*)) r1ef2@r r1ef3@mr '() '() '() '() '() r1ef7@rib '#f)) (lambda (r1f0b@r1efa r1f0c@r1efc r1f0d@r1efe r1f0e@r1f00 r1f0f@r1f02 r1f10@r1f04 r1f11@r1f06 r1f12@r1f08) (let ((r1f1b@_exp* r1f12@r1f08) (r1f1c@kwd* r1f11@r1f06) (r1f1d@mod** r1f10@r1f04) (r1f1e@rhs* r1f0f@r1f02) (r1f1f@lex* r1f0e@r1f00) (r1f20@mr r1f0d@r1efe) (r1f21@r r1f0c@r1efc) (r1f22@e* r1f0b@r1efa)) (begin (if (null? r1f22@e*) (re64@syntax-violation '#f '"no expression in body" r1f22@e*) (void)) (let ((r1f2b@init* (rda2@chi-expr* (append (apply append (reverse r1f1d@mod**)) r1f22@e*) r1f21@r r1f20@mr))) (let ((r1f2d@rhs* (rdb6@chi-rhs* r1f1e@rhs* r1f21@r r1f20@mr))) (rae7@ra4c@build-letrec* '#f (reverse r1f1f@lex*) (reverse r1f2d@rhs*) (rae2@ra42@build-sequence '#f r1f2b@init*))))))))))) (set! r28ac@rdbc@chi-internal rdbc@chi-internal) (set! rdbe@parse-module (lambda (r1f2f@e) (let ((r1f31@t r1f2f@e)) (let ((r1f33@ls/false (rd84@syntax-dispatch r1f31@t '(_ each-any . each-any)))) (if r1f33@ls/false (apply (lambda (r1f35@export* r1f36@b*) (begin (if (not (for-all rb7d@id? r1f35@export*)) (re64@syntax-violation '#f '"module exports must be identifiers" r1f2f@e) (void)) (values '#f (list->vector r1f35@export*) r1f36@b*))) r1f33@ls/false) (let ((r1f39@t r1f31@t)) (let ((r1f3b@ls/false (rd84@syntax-dispatch r1f39@t '(_ any each-any . each-any)))) (if r1f3b@ls/false (apply (lambda (r1f3d@name r1f3e@export* r1f3f@b*) (begin (if (not (rb7d@id? r1f3d@name)) (re64@syntax-violation '#f '"module name must be an identifier" r1f2f@e) (void)) (if (not (for-all rb7d@id? r1f3e@export*)) (re64@syntax-violation '#f '"module exports must be identifiers" r1f2f@e) (void)) (values r1f3d@name (list->vector r1f3e@export*) r1f3f@b*))) r1f3b@ls/false) (re64@syntax-violation '#f '"invalid syntax" r1f39@t))))))))) (set! r28ad@rdbe@parse-module rdbe@parse-module) (set! rdc8@module-interface? (lambda (r1f43@x) (and (simple-struct? r1f43@x) (eq? (simple-struct-name r1f43@x) 'module-interface)))) (set! r28ae@rdc8@module-interface? rdc8@module-interface?) (set! rdca@module-interface-first-mark (lambda (r1f45@x) (simple-struct-ref r1f45@x '0))) (set! r28af@rdca@module-interface-first-mark rdca@module-interface-first-mark) (set! rdcc@set-module-interface-first-mark! (lambda (r1f47@x r1f48@val) (simple-struct-set! r1f47@x '0 r1f48@val))) (set! r28b0@rdcc@set-module-interface-first-mark! rdcc@set-module-interface-first-mark!) (set! rdce@module-interface-exp-id-vec (lambda (r1f4b@x) (simple-struct-ref r1f4b@x '1))) (set! r28b1@rdce@module-interface-exp-id-vec rdce@module-interface-exp-id-vec) (set! rdd0@set-module-interface-exp-id-vec! (lambda (r1f4d@x r1f4e@val) (simple-struct-set! r1f4d@x '1 r1f4e@val))) (set! r28b2@rdd0@set-module-interface-exp-id-vec! rdd0@set-module-interface-exp-id-vec!) (set! rdd2@module-interface-exp-lab-vec (lambda (r1f51@x) (simple-struct-ref r1f51@x '2))) (set! r28b3@rdd2@module-interface-exp-lab-vec rdd2@module-interface-exp-lab-vec) (set! rdd4@set-module-interface-exp-lab-vec! (lambda (r1f53@x r1f54@val) (simple-struct-set! r1f53@x '2 r1f54@val))) (set! r28b4@rdd4@set-module-interface-exp-lab-vec! rdd4@set-module-interface-exp-lab-vec!) (set! rdd6@dummy '3) (set! r28b5@rdd6@dummy rdd6@dummy) (set! rdd8@module-interface-exp-id* (lambda (r1f57@iface r1f58@id) (letrec* ((r1f5c@diff-marks (lambda (r1f63@ls r1f64@x) (begin (if (null? r1f63@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((r1f67@a (car r1f63@ls))) (if (eq? r1f67@a r1f64@x) '() (cons r1f67@a (r1f5c@diff-marks (cdr r1f63@ls) r1f64@x)))))))) (let ((r1f5d@diff (r1f5c@diff-marks (rb4f@stx-mark* r1f58@id) (rdca@module-interface-first-mark r1f57@iface))) (r1f5e@id-vec (rdce@module-interface-exp-id-vec r1f57@iface))) (if (null? r1f5d@diff) r1f5e@id-vec (vector-map (lambda (r1f61@x) (make-simple-struct 'stx '5 (list (rb4b@stx-expr r1f61@x) (append r1f5d@diff (rb4f@stx-mark* r1f61@x)) '() '()))) r1f5e@id-vec)))))) (set! r28b6@rdd8@module-interface-exp-id* rdd8@module-interface-exp-id*) (set! rdda@chi-internal-module (lambda (r1f69@e r1f6a@r r1f6b@mr r1f6c@lex* r1f6d@rhs* r1f6e@mod** r1f6f@kwd*) (call-with-values (lambda () (rdbe@parse-module r1f69@e)) (lambda (r1f7d@r1f78 r1f7e@r1f7a r1f7f@r1f7c) (let ((r1f83@e* r1f7f@r1f7c) (r1f84@exp-id* r1f7e@r1f7a) (r1f85@name r1f7d@r1f78)) (let ((r1f89@rib (rb31@make-empty-rib))) (let ((r1f8b@e* (map (lambda (r1f8d@x) (rb67@add-subst r1f89@rib r1f8d@x)) (rb7b@syntax->list r1f83@e*)))) (call-with-values (lambda () (rddc@chi-body* r1f8b@e* r1f6a@r r1f6b@mr r1f6c@lex* r1f6d@rhs* r1f6e@mod** r1f6f@kwd* '() r1f89@rib '#f)) (lambda (r1f9f@r1f90 r1fa0@r1f92 r1fa1@r1f94 r1fa2@r1f96 r1fa3@r1f98 r1fa4@r1f9a r1fa5@r1f9c r1fa6@r1f9e) (let ((r1faf@_exp* r1fa6@r1f9e) (r1fb0@kwd* r1fa5@r1f9c) (r1fb1@mod** r1fa4@r1f9a) (r1fb2@rhs* r1fa3@r1f98) (r1fb3@lex* r1fa2@r1f96) (r1fb4@mr r1fa1@r1f94) (r1fb5@r r1fa0@r1f92) (r1fb6@e* r1f9f@r1f90)) (let ((r1fbf@exp-lab* (vector-map (lambda (r1fc3@x) (or (rb93@id->label (make-simple-struct 'stx '5 (list (rb7f@id->sym r1fc3@x) (rb4f@stx-mark* r1fc3@x) (list r1f89@rib) '()))) (re64@syntax-violation '#f '"cannot find module export" r1fc3@x))) r1f84@exp-id*)) (r1fc0@mod** (cons r1fb6@e* r1fb1@mod**))) (if (not r1f85@name) (values r1fb3@lex* r1fb2@rhs* r1f84@exp-id* r1fbf@exp-lab* r1fb5@r r1fb4@mr r1fc0@mod** r1fb0@kwd*) (let ((r1fc5@lab (rb09@gen-label 'module)) (r1fc6@iface (make-simple-struct 'module-interface '4 (list (car (rb4f@stx-mark* r1f85@name)) (vector-map (lambda (r1fc9@x) (make-simple-struct 'stx '5 (list (rb4b@stx-expr r1fc9@x) (rb4f@stx-mark* r1fc9@x) '() '()))) r1f84@exp-id*) r1fbf@exp-lab*)))) (values r1fb3@lex* r1fb2@rhs* (vector r1f85@name) (vector r1fc5@lab) (cons (cons r1fc5@lab (cons '$module r1fc6@iface)) r1fb5@r) (cons (cons r1fc5@lab (cons '$module r1fc6@iface)) r1fb4@mr) r1fc0@mod** r1fb0@kwd*)))))))))))))) (set! r28b7@rdda@chi-internal-module rdda@chi-internal-module) (set! rddc@chi-body* (lambda (r1fcb@e* r1fcc@r r1fcd@mr r1fce@lex* r1fcf@rhs* r1fd0@mod** r1fd1@kwd* r1fd2@exp* r1fd3@rib r1fd4@top?) (if (null? r1fcb@e*) (values r1fcb@e* r1fcc@r r1fcd@mr r1fce@lex* r1fcf@rhs* r1fd0@mod** r1fd1@kwd* r1fd2@exp*) (let ((r1fdf@e (car r1fcb@e*))) (call-with-values (lambda () (rb9f@syntax-type r1fdf@e r1fcc@r)) (lambda (r1fe7@r1fe2 r1fe8@r1fe4 r1fe9@r1fe6) (let ((r1fed@kwd r1fe9@r1fe6) (r1fee@value r1fe8@r1fe4) (r1fef@type r1fe7@r1fe2)) (let ((r1ff3@kwd* (if (rb7d@id? r1fed@kwd) (cons r1fed@kwd r1fd1@kwd*) r1fd1@kwd*))) (let ((r1ff5@t r1fef@type)) (if (memv r1ff5@t '(define)) (call-with-values (lambda () (rd06@parse-define r1fdf@e)) (lambda (r1ffb@r1ff8 r1ffc@r1ffa) (let ((r1fff@rhs r1ffc@r1ffa) (r2000@id r1ffb@r1ff8)) (begin (if (rb89@bound-id-member? r2000@id r1ff3@kwd*) (re64@syntax-violation '#f '"cannot redefine keyword" r1fdf@e) (void)) (call-with-values (lambda () (rb0d@gen-define-label+loc r2000@id r1fd3@rib)) (lambda (r2007@r2004 r2008@r2006) (let ((r200b@lex r2008@r2006) (r200c@lab r2007@r2004)) (begin (rb33@extend-rib! r1fd3@rib r2000@id r200c@lab) (rddc@chi-body* (cdr r1fcb@e*) (rd14@add-lexical r200c@lab r200b@lex r1fcc@r) r1fcd@mr (cons r200b@lex r1fce@lex*) (cons r1fff@rhs r1fcf@rhs*) r1fd0@mod** r1ff3@kwd* r1fd2@exp* r1fd3@rib r1fd4@top?))))))))) (if (memv r1ff5@t '(define-syntax)) (call-with-values (lambda () (rd08@parse-define-syntax r1fdf@e)) (lambda (r2013@r2010 r2014@r2012) (let ((r2017@rhs r2014@r2012) (r2018@id r2013@r2010)) (begin (if (rb89@bound-id-member? r2018@id r1ff3@kwd*) (re64@syntax-violation '#f '"cannot redefine keyword" r1fdf@e) (void)) (let ((r201b@lab (rb0f@gen-define-label r2018@id r1fd3@rib)) (r201c@expanded-rhs (rdde@expand-transformer r2017@rhs r1fcd@mr))) (begin (rb33@extend-rib! r1fd3@rib r2018@id r201b@lab) (let ((r201f@b (rbb5@make-eval-transformer r201c@expanded-rhs))) (rddc@chi-body* (cdr r1fcb@e*) (cons (cons r201b@lab r201f@b) r1fcc@r) (cons (cons r201b@lab r201f@b) r1fcd@mr) r1fce@lex* r1fcf@rhs* r1fd0@mod** r1ff3@kwd* r1fd2@exp* r1fd3@rib r1fd4@top?)))))))) (if (memv r1ff5@t '(let-syntax letrec-syntax)) (let ((r2021@t r1fdf@e)) (let ((r2023@ls/false (rd84@syntax-dispatch r2021@t '(_ #(each (any any)) . each-any)))) (if (and r2023@ls/false (apply (lambda (r2025@xlhs* r2026@xrhs* r2027@xbody*) (if (not (rb85@valid-bound-ids? r2025@xlhs*)) (re64@syntax-violation '#f '"invalid identifiers" r1fdf@e) (void))) r2023@ls/false)) (apply (lambda (r202b@xlhs* r202c@xrhs* r202d@xbody*) (let ((r2031@xlab* (map rb09@gen-label r202b@xlhs*))) (let ((r2033@xrib (rb3d@make-full-rib r202b@xlhs* r2031@xlab*))) (let ((r2035@xb* (map (lambda (r2037@x) (rbb5@make-eval-transformer (rdde@expand-transformer (if (eq? r1fef@type 'let-syntax) r2037@x (rb67@add-subst r2033@xrib r2037@x)) r1fcd@mr))) r202c@xrhs*))) (rddc@chi-body* (append (map (lambda (r2039@x) (rb67@add-subst r2033@xrib r2039@x)) r202d@xbody*) (cdr r1fcb@e*)) (append (map cons r2031@xlab* r2035@xb*) r1fcc@r) (append (map cons r2031@xlab* r2035@xb*) r1fcd@mr) r1fce@lex* r1fcf@rhs* r1fd0@mod** r1ff3@kwd* r1fd2@exp* r1fd3@rib r1fd4@top?))))) r2023@ls/false) (re64@syntax-violation '#f '"invalid syntax" r2021@t)))) (if (memv r1ff5@t '(begin)) (let ((r203b@t r1fdf@e)) (let ((r203d@ls/false (rd84@syntax-dispatch r203b@t '(_ . each-any)))) (if r203d@ls/false (apply (lambda (r203f@x*) (rddc@chi-body* (append r203f@x* (cdr r1fcb@e*)) r1fcc@r r1fcd@mr r1fce@lex* r1fcf@rhs* r1fd0@mod** r1ff3@kwd* r1fd2@exp* r1fd3@rib r1fd4@top?)) r203d@ls/false) (re64@syntax-violation '#f '"invalid syntax" r203b@t)))) (if (memv r1ff5@t '(global-macro global-macro!)) (rddc@chi-body* (cons (rda0@chi-global-macro r1fee@value r1fdf@e r1fd3@rib) (cdr r1fcb@e*)) r1fcc@r r1fcd@mr r1fce@lex* r1fcf@rhs* r1fd0@mod** r1ff3@kwd* r1fd2@exp* r1fd3@rib r1fd4@top?) (if (memv r1ff5@t '(local-macro local-macro!)) (rddc@chi-body* (cons (rd9e@chi-local-macro r1fee@value r1fdf@e r1fd3@rib) (cdr r1fcb@e*)) r1fcc@r r1fcd@mr r1fce@lex* r1fcf@rhs* r1fd0@mod** r1ff3@kwd* r1fd2@exp* r1fd3@rib r1fd4@top?) (if (memv r1ff5@t '(macro macro!)) (rddc@chi-body* (cons (rd9c@chi-macro r1fee@value r1fdf@e r1fd3@rib) (cdr r1fcb@e*)) r1fcc@r r1fcd@mr r1fce@lex* r1fcf@rhs* r1fd0@mod** r1ff3@kwd* r1fd2@exp* r1fd3@rib r1fd4@top?) (if (memv r1ff5@t '(module)) (call-with-values (lambda () (rdda@chi-internal-module r1fdf@e r1fcc@r r1fcd@mr r1fce@lex* r1fcf@rhs* r1fd0@mod** r1ff3@kwd*)) (lambda (r2051@r2042 r2052@r2044 r2053@r2046 r2054@r2048 r2055@r204a r2056@r204c r2057@r204e r2058@r2050) (let ((r2061@kwd* r2058@r2050) (r2062@mod** r2057@r204e) (r2063@mr r2056@r204c) (r2064@r r2055@r204a) (r2065@m-exp-lab* r2054@r2048) (r2066@m-exp-id* r2053@r2046) (r2067@rhs* r2052@r2044) (r2068@lex* r2051@r2042)) (begin (vector-for-each (lambda (r2071@id r2072@lab) (rb33@extend-rib! r1fd3@rib r2071@id r2072@lab)) r2066@m-exp-id* r2065@m-exp-lab*) (rddc@chi-body* (cdr r1fcb@e*) r2064@r r2063@mr r2068@lex* r2067@rhs* r2062@mod** r2061@kwd* r1fd2@exp* r1fd3@rib r1fd4@top?))))) (if (memv r1ff5@t '(library)) (begin (re46@library-expander (rb91@stx->datum r1fdf@e)) (rddc@chi-body* (cdr r1fcb@e*) r1fcc@r r1fcd@mr r1fce@lex* r1fcf@rhs* r1fd0@mod** r1ff3@kwd* r1fd2@exp* r1fd3@rib r1fd4@top?)) (if (memv r1ff5@t '(export)) (let ((r2075@t r1fdf@e)) (let ((r2077@ls/false (rd84@syntax-dispatch r2075@t '(_ . each-any)))) (if r2077@ls/false (apply (lambda (r2079@exp-decl*) (rddc@chi-body* (cdr r1fcb@e*) r1fcc@r r1fcd@mr r1fce@lex* r1fcf@rhs* r1fd0@mod** r1ff3@kwd* (append r2079@exp-decl* r1fd2@exp*) r1fd3@rib r1fd4@top?)) r2077@ls/false) (re64@syntax-violation '#f '"invalid syntax" r2075@t)))) (if (memv r1ff5@t '(import)) (letrec* ((r207c@module-import? (lambda (r20cf@e) (let ((r20d1@t r20cf@e)) (let ((r20d3@ls/false (rd84@syntax-dispatch r20d1@t '(_ any)))) (if (and r20d3@ls/false (apply (lambda (r20d5@id) (rb7d@id? r20d5@id)) r20d3@ls/false)) (apply (lambda (r20d7@id) '#t) r20d3@ls/false) (let ((r20d9@t r20d1@t)) (let ((r20db@ls/false (rd84@syntax-dispatch r20d9@t '(_ . each-any)))) (if r20db@ls/false (apply (lambda (r20dd@imp*) '#f) r20db@ls/false) (let ((r20df@t r20d9@t)) (let ((r20e1@ls/false (rd84@syntax-dispatch r20df@t '_))) (if r20e1@ls/false (apply (lambda () (re64@syntax-violation '#f '"malformed import form" r20cf@e)) r20e1@ls/false) (re64@syntax-violation '#f '"invalid syntax" r20df@t)))))))))))) (r207e@module-import (lambda (r20ad@e r20ae@r) (let ((r20b1@t r20ad@e)) (let ((r20b3@ls/false (rd84@syntax-dispatch r20b1@t '(_ any)))) (if (and r20b3@ls/false (apply (lambda (r20b5@id) (rb7d@id? r20b5@id)) r20b3@ls/false)) (apply (lambda (r20b7@id) (call-with-values (lambda () (rb9f@syntax-type r20b7@id r20ae@r)) (lambda (r20bf@r20ba r20c0@r20bc r20c1@r20be) (let ((r20c5@kwd r20c1@r20be) (r20c6@value r20c0@r20bc) (r20c7@type r20bf@r20ba)) (let ((r20cb@t r20c7@type)) (if (memv r20cb@t '($module)) (let ((r20cd@iface r20c6@value)) (values (rdd8@module-interface-exp-id* r20cd@iface r20b7@id) (rdd2@module-interface-exp-lab-vec r20cd@iface))) (re64@syntax-violation '#f '"invalid import" r20ad@e))))))) r20b3@ls/false) (re64@syntax-violation '#f '"invalid syntax" r20b1@t)))))) (r2080@library-import (lambda (r2091@e) (let ((r2093@t r2091@e)) (let ((r2095@ls/false (rd84@syntax-dispatch r2093@t '(any . each-any)))) (if r2095@ls/false (apply (lambda (r2097@ctxt r2098@imp*) (call-with-values (lambda () (rde6@parse-import-spec* (re6a@syntax->datum r2098@imp*))) (lambda (r209f@r209c r20a0@r209e) (let ((r20a3@subst-labels r20a0@r209e) (r20a4@subst-names r209f@r209c)) (values (vector-map (lambda (r20a7@name) (rb5d@datum->stx r2097@ctxt r20a7@name)) r20a4@subst-names) r20a3@subst-labels))))) r2095@ls/false) (let ((r20a9@t r2093@t)) (let ((r20ab@ls/false (rd84@syntax-dispatch r20a9@t '_))) (if r20ab@ls/false (apply (lambda () (re64@syntax-violation '#f '"invalid import form" r2091@e)) r20ab@ls/false) (re64@syntax-violation '#f '"invalid syntax" r20a9@t)))))))))) (begin (call-with-values (lambda () (if (r207c@module-import? r1fdf@e) (r207e@module-import r1fdf@e r1fcc@r) (r2080@library-import r1fdf@e))) (lambda (r2085@r2082 r2086@r2084) (let ((r2089@lab* r2086@r2084) (r208a@id* r2085@r2082)) (vector-for-each (lambda (r208d@id r208e@lab) (rb33@extend-rib! r1fd3@rib r208d@id r208e@lab)) r208a@id* r2089@lab*)))) (rddc@chi-body* (cdr r1fcb@e*) r1fcc@r r1fcd@mr r1fce@lex* r1fcf@rhs* r1fd0@mod** r1ff3@kwd* r1fd2@exp* r1fd3@rib r1fd4@top?))) (if r1fd4@top? (rddc@chi-body* (cdr r1fcb@e*) r1fcc@r r1fcd@mr (cons (rb05@gen-lexical 'dummy) r1fce@lex*) (cons (cons 'top-expr r1fdf@e) r1fcf@rhs*) r1fd0@mod** r1ff3@kwd* r1fd2@exp* r1fd3@rib r1fd4@top?) (values r1fcb@e* r1fcc@r r1fcd@mr r1fce@lex* r1fcf@rhs* r1fd0@mod** r1ff3@kwd* r1fd2@exp*)))))))))))))))))))))) (set! r28b8@rddc@chi-body* rddc@chi-body*) (set! rdde@expand-transformer (lambda (r20e3@expr r20e4@r) (let ((r20e7@rtc (rdea@make-collector))) (let ((r20e9@expanded-rhs (let ((r20f3@r20ec rdec@inv-collector) (r20f4@r20ee rdee@vis-collector) (r20f5@r20f0 r20e7@rtc) (r20f6@r20f2 (lambda (r20fb@x) (values)))) (let ((r20fd@swap (lambda () (begin (let ((r20ff@t (r20f3@r20ec))) (begin (r20f3@r20ec r20f5@r20f0) (set! r20f5@r20f0 r20ff@t))) (let ((r2101@t (r20f4@r20ee))) (begin (r20f4@r20ee r20f6@r20f2) (set! r20f6@r20f2 r2101@t))))))) (dynamic-wind r20fd@swap (lambda () (rda6@chi-expr r20e3@expr r20e4@r r20e4@r)) r20fd@swap))))) (begin (for-each (let ((r2103@mark-visit (rdee@vis-collector))) (lambda (r2105@x) (begin (r999@r7e7@invoke-library r2105@x) (r2103@mark-visit r2105@x)))) (r20e7@rtc)) r20e9@expanded-rhs))))) (set! r28b9@rdde@expand-transformer rdde@expand-transformer) (set! rde0@parse-exports (lambda (r2107@exp*) (let r210f@f ((r2109@exp* r2107@exp*) (r210a@int* '()) (r210b@ext* '())) (if (null? r2109@exp*) (begin (if (not (rb85@valid-bound-ids? r210b@ext*)) (re64@syntax-violation 'export '"invalid exports" (rdba@find-dups r210b@ext*)) (void)) (values (map re6a@syntax->datum r210b@ext*) r210a@int*)) (let ((r2111@t (car r2109@exp*))) (let ((r2113@ls/false (rd84@syntax-dispatch r2111@t '(any . #(each (any any)))))) (if r2113@ls/false (apply (lambda (r2115@rename r2116@i* r2117@e*) (begin (if (not (and (eq? (re6a@syntax->datum r2115@rename) 'rename) (for-all rb7d@id? r2116@i*) (for-all rb7d@id? r2117@e*))) (re64@syntax-violation 'export '"invalid export specifier" (car r2109@exp*)) (void)) (r210f@f (cdr r2109@exp*) (append r2116@i* r210a@int*) (append r2117@e* r210b@ext*)))) r2113@ls/false) (let ((r211b@t r2111@t)) (let ((r211d@ls/false (rd84@syntax-dispatch r211b@t 'any))) (if r211d@ls/false (apply (lambda (r211f@ie) (begin (if (not (rb7d@id? r211f@ie)) (re64@syntax-violation 'export '"invalid export" r211f@ie) (void)) (r210f@f (cdr r2109@exp*) (cons r211f@ie r210a@int*) (cons r211f@ie r210b@ext*)))) r211d@ls/false) (re64@syntax-violation '#f '"invalid syntax" r211b@t))))))))))) (set! r28ba@rde0@parse-exports rde0@parse-exports) (set! rde2@parse-library-name (lambda (r2121@spec) (letrec* ((r2124@parse (lambda (r2131@x) (let ((r2133@t r2131@x)) (let ((r2135@ls/false (rd84@syntax-dispatch r2133@t '(each-any)))) (if (and r2135@ls/false (apply (lambda (r2137@v*) (for-all (lambda (r2139@x) (let ((r213b@x (re6a@syntax->datum r2139@x))) (and (integer? r213b@x) (exact? r213b@x)))) r2137@v*)) r2135@ls/false)) (apply (lambda (r213d@v*) (values '() (map re6a@syntax->datum r213d@v*))) r2135@ls/false) (let ((r213f@t r2133@t)) (let ((r2141@ls/false (rd84@syntax-dispatch r213f@t '(any . any)))) (if (and r2141@ls/false (apply (lambda (r2143@x r2144@rest) (symbol? (re6a@syntax->datum r2143@x))) r2141@ls/false)) (apply (lambda (r2147@x r2148@rest) (call-with-values (lambda () (r2124@parse r2148@rest)) (lambda (r214f@r214c r2150@r214e) (let ((r2153@v* r2150@r214e) (r2154@x* r214f@r214c)) (values (cons (re6a@syntax->datum r2147@x) r2154@x*) r2153@v*))))) r2141@ls/false) (let ((r2157@t r213f@t)) (let ((r2159@ls/false (rd84@syntax-dispatch r2157@t '()))) (if r2159@ls/false (apply (lambda () (values '() '())) r2159@ls/false) (let ((r215b@t r2157@t)) (let ((r215d@ls/false (rd84@syntax-dispatch r215b@t '_))) (if r215d@ls/false (apply (lambda () (re64@syntax-violation '#f '"invalid library name" r2121@spec)) r215d@ls/false) (re64@syntax-violation '#f '"invalid syntax" r215b@t)))))))))))))))) (call-with-values (lambda () (r2124@parse r2121@spec)) (lambda (r2129@r2126 r212a@r2128) (let ((r212d@ver* r212a@r2128) (r212e@name* r2129@r2126)) (begin (if (null? r212e@name*) (re64@syntax-violation '#f '"empty library name" r2121@spec) (void)) (values r212e@name* r212d@ver*)))))))) (set! r28bb@rde2@parse-library-name rde2@parse-library-name) (set! rde4@parse-library (lambda (r215f@e) (let ((r2161@t r215f@e)) (let ((r2163@ls/false (rd84@syntax-dispatch r2161@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and r2163@ls/false (apply (lambda (r2165@library r2166@name* r2167@export r2168@exp* r2169@import r216a@imp* r216b@b*) (and (eq? (re6a@syntax->datum r2167@export) 'export) (eq? (re6a@syntax->datum r2169@import) 'import) (eq? (re6a@syntax->datum r2165@library) 'library))) r2163@ls/false)) (apply (lambda (r2173@library r2174@name* r2175@export r2176@exp* r2177@import r2178@imp* r2179@b*) (values r2174@name* r2176@exp* r2178@imp* r2179@b*)) r2163@ls/false) (let ((r2181@t r2161@t)) (let ((r2183@ls/false (rd84@syntax-dispatch r2181@t '_))) (if r2183@ls/false (apply (lambda () (re64@syntax-violation '#f '"malformed library" r215f@e)) r2183@ls/false) (re64@syntax-violation '#f '"invalid syntax" r2181@t))))))))) (set! r28bc@rde4@parse-library rde4@parse-library) (set! rde6@parse-import-spec* (letrec* ((r2186@idsyn? (lambda (r238f@x) (symbol? (re6a@syntax->datum r238f@x)))) (r2188@dup-error (lambda (r238d@name) (re64@syntax-violation 'import '"two imports with different bindings" r238d@name))) (r218a@merge-substs (lambda (r237b@s r237c@subst) (letrec* ((r2380@insert-to-subst (lambda (r2381@a r2382@subst) (let ((r2385@name (car r2381@a)) (r2386@label (cdr r2381@a))) (let ((r2389@t (assq r2385@name r2382@subst))) (if r2389@t ((lambda (r238b@x) (if (eq? (cdr r238b@x) r2386@label) r2382@subst (r2188@dup-error r2385@name))) r2389@t) (cons r2381@a r2382@subst))))))) (if (null? r237b@s) r237c@subst (r2380@insert-to-subst (car r237b@s) (r218a@merge-substs (cdr r237b@s) r237c@subst)))))) (r218c@exclude* (lambda (r234b@sym* r234c@subst) (letrec* ((r2350@exclude (lambda (r2369@sym r236a@subst) (if (null? r236a@subst) (re64@syntax-violation 'import '"cannot rename unbound identifier" r2369@sym) (if (eq? r2369@sym (caar r236a@subst)) (values (cdar r236a@subst) (cdr r236a@subst)) (let ((r236d@a (car r236a@subst))) (call-with-values (lambda () (r2350@exclude r2369@sym (cdr r236a@subst))) (lambda (r2373@r2370 r2374@r2372) (let ((r2377@subst r2374@r2372) (r2378@old r2373@r2370)) (values r2378@old (cons r236d@a r2377@subst))))))))))) (if (null? r234b@sym*) (values '() r234c@subst) (call-with-values (lambda () (r2350@exclude (car r234b@sym*) r234c@subst)) (lambda (r2355@r2352 r2356@r2354) (let ((r2359@subst r2356@r2354) (r235a@old r2355@r2352)) (call-with-values (lambda () (r218c@exclude* (cdr r234b@sym*) r2359@subst)) (lambda (r2361@r235e r2362@r2360) (let ((r2365@subst r2362@r2360) (r2366@old* r2361@r235e)) (values (cons r235a@old r2366@old*) r2365@subst))))))))))) (r218e@find* (lambda (r2343@sym* r2344@subst) (map (lambda (r2347@x) (let ((r2349@t (assq r2347@x r2344@subst))) (if r2349@t (cdr r2349@t) (re64@syntax-violation 'import '"cannot find identifier" r2347@x)))) r2343@sym*))) (r2190@rem* (lambda (r233b@sym* r233c@subst) (let r2341@f ((r233f@subst r233c@subst)) (if (null? r233f@subst) '() (if (memq (caar r233f@subst) r233b@sym*) (r2341@f (cdr r233f@subst)) (cons (car r233f@subst) (r2341@f (cdr r233f@subst)))))))) (r2192@remove-dups (lambda (r2339@ls) (if (null? r2339@ls) '() (if (memq (car r2339@ls) (cdr r2339@ls)) (r2192@remove-dups (cdr r2339@ls)) (cons (car r2339@ls) (r2192@remove-dups (cdr r2339@ls))))))) (r2194@parse-library-name (lambda (r2251@spec) (letrec* ((r2254@subversion? (lambda (r2335@x) (let ((r2337@x (re6a@syntax->datum r2335@x))) (and (integer? r2337@x) (exact? r2337@x) (>= r2337@x '0))))) (r2256@subversion-pred (lambda (r22d5@x*) (let ((r22d7@t r22d5@x*)) (let ((r22d9@ls/false (rd84@syntax-dispatch r22d7@t 'any))) (if (and r22d9@ls/false (apply (lambda (r22db@n) (r2254@subversion? r22db@n)) r22d9@ls/false)) (apply (lambda (r22dd@n) (lambda (r22df@x) (= r22df@x (re6a@syntax->datum r22dd@n)))) r22d9@ls/false) (let ((r22e1@t r22d7@t)) (let ((r22e3@ls/false (rd84@syntax-dispatch r22e1@t '(any . each-any)))) (if (and r22e3@ls/false (apply (lambda (r22e5@p? r22e6@sub*) (eq? (re6a@syntax->datum r22e5@p?) 'and)) r22e3@ls/false)) (apply (lambda (r22e9@p? r22ea@sub*) (let ((r22ed@p* (map r2256@subversion-pred r22ea@sub*))) (lambda (r22ef@x) (for-all (lambda (r22f1@p) (r22f1@p r22ef@x)) r22ed@p*)))) r22e3@ls/false) (let ((r22f3@t r22e1@t)) (let ((r22f5@ls/false (rd84@syntax-dispatch r22f3@t '(any . each-any)))) (if (and r22f5@ls/false (apply (lambda (r22f7@p? r22f8@sub*) (eq? (re6a@syntax->datum r22f7@p?) 'or)) r22f5@ls/false)) (apply (lambda (r22fb@p? r22fc@sub*) (let ((r22ff@p* (map r2256@subversion-pred r22fc@sub*))) (lambda (r2301@x) (exists (lambda (r2303@p) (r2303@p r2301@x)) r22ff@p*)))) r22f5@ls/false) (let ((r2305@t r22f3@t)) (let ((r2307@ls/false (rd84@syntax-dispatch r2305@t '(any any)))) (if (and r2307@ls/false (apply (lambda (r2309@p? r230a@sub) (eq? (re6a@syntax->datum r2309@p?) 'not)) r2307@ls/false)) (apply (lambda (r230d@p? r230e@sub) (let ((r2311@p (r2256@subversion-pred r230e@sub))) (lambda (r2313@x) (not (r2311@p r2313@x))))) r2307@ls/false) (let ((r2315@t r2305@t)) (let ((r2317@ls/false (rd84@syntax-dispatch r2315@t '(any any)))) (if (and r2317@ls/false (apply (lambda (r2319@p? r231a@n) (and (eq? (re6a@syntax->datum r2319@p?) '<=) (r2254@subversion? r231a@n))) r2317@ls/false)) (apply (lambda (r231d@p? r231e@n) (lambda (r2321@x) (<= r2321@x (re6a@syntax->datum r231e@n)))) r2317@ls/false) (let ((r2323@t r2315@t)) (let ((r2325@ls/false (rd84@syntax-dispatch r2323@t '(any any)))) (if (and r2325@ls/false (apply (lambda (r2327@p? r2328@n) (and (eq? (re6a@syntax->datum r2327@p?) '>=) (r2254@subversion? r2328@n))) r2325@ls/false)) (apply (lambda (r232b@p? r232c@n) (lambda (r232f@x) (>= r232f@x (re6a@syntax->datum r232c@n)))) r2325@ls/false) (let ((r2331@t r2323@t)) (let ((r2333@ls/false (rd84@syntax-dispatch r2331@t '_))) (if r2333@ls/false (apply (lambda () (re64@syntax-violation 'import '"invalid sub-version spec" r2251@spec r22d5@x*)) r2333@ls/false) (re64@syntax-violation '#f '"invalid syntax" r2331@t)))))))))))))))))))))))) (r2258@version-pred (lambda (r2285@x*) (let ((r2287@t r2285@x*)) (let ((r2289@ls/false (rd84@syntax-dispatch r2287@t '()))) (if r2289@ls/false (apply (lambda () (lambda (r228b@x) '#t)) r2289@ls/false) (let ((r228d@t r2287@t)) (let ((r228f@ls/false (rd84@syntax-dispatch r228d@t '(any . each-any)))) (if (and r228f@ls/false (apply (lambda (r2291@c r2292@ver*) (eq? (re6a@syntax->datum r2291@c) 'and)) r228f@ls/false)) (apply (lambda (r2295@c r2296@ver*) (let ((r2299@p* (map r2258@version-pred r2296@ver*))) (lambda (r229b@x) (for-all (lambda (r229d@p) (r229d@p r229b@x)) r2299@p*)))) r228f@ls/false) (let ((r229f@t r228d@t)) (let ((r22a1@ls/false (rd84@syntax-dispatch r229f@t '(any . each-any)))) (if (and r22a1@ls/false (apply (lambda (r22a3@c r22a4@ver*) (eq? (re6a@syntax->datum r22a3@c) 'or)) r22a1@ls/false)) (apply (lambda (r22a7@c r22a8@ver*) (let ((r22ab@p* (map r2258@version-pred r22a8@ver*))) (lambda (r22ad@x) (exists (lambda (r22af@p) (r22af@p r22ad@x)) r22ab@p*)))) r22a1@ls/false) (let ((r22b1@t r229f@t)) (let ((r22b3@ls/false (rd84@syntax-dispatch r22b1@t '(any any)))) (if (and r22b3@ls/false (apply (lambda (r22b5@c r22b6@ver) (eq? (re6a@syntax->datum r22b5@c) 'not)) r22b3@ls/false)) (apply (lambda (r22b9@c r22ba@ver) (let ((r22bd@p (r2258@version-pred r22ba@ver))) (lambda (r22bf@x) (not (r22bd@p r22bf@x))))) r22b3@ls/false) (let ((r22c1@t r22b1@t)) (let ((r22c3@ls/false (rd84@syntax-dispatch r22c1@t 'each-any))) (if r22c3@ls/false (apply (lambda (r22c5@sub*) (let ((r22c7@p* (map r2256@subversion-pred r22c5@sub*))) (lambda (r22c9@x) (let r22cf@f ((r22cb@p* r22c7@p*) (r22cc@x r22c9@x)) (if (null? r22cb@p*) '#t (if (null? r22cc@x) '#f (and ((car r22cb@p*) (car r22cc@x)) (r22cf@f (cdr r22cb@p*) (cdr r22cc@x))))))))) r22c3@ls/false) (let ((r22d1@t r22c1@t)) (let ((r22d3@ls/false (rd84@syntax-dispatch r22d1@t '_))) (if r22d3@ls/false (apply (lambda () (re64@syntax-violation 'import '"invalid version spec" r2251@spec r2285@x*)) r22d3@ls/false) (re64@syntax-violation '#f '"invalid syntax" r22d1@t)))))))))))))))))))))) (let r225b@f ((r2259@x r2251@spec)) (let ((r225d@t r2259@x)) (let ((r225f@ls/false (rd84@syntax-dispatch r225d@t '(each-any)))) (if r225f@ls/false (apply (lambda (r2261@version-spec*) (values '() (r2258@version-pred r2261@version-spec*))) r225f@ls/false) (let ((r2263@t r225d@t)) (let ((r2265@ls/false (rd84@syntax-dispatch r2263@t '(any . any)))) (if (and r2265@ls/false (apply (lambda (r2267@x r2268@x*) (r2186@idsyn? r2267@x)) r2265@ls/false)) (apply (lambda (r226b@x r226c@x*) (call-with-values (lambda () (r225b@f r226c@x*)) (lambda (r2273@r2270 r2274@r2272) (let ((r2277@pred r2274@r2272) (r2278@name r2273@r2270)) (values (cons (re6a@syntax->datum r226b@x) r2278@name) r2277@pred))))) r2265@ls/false) (let ((r227b@t r2263@t)) (let ((r227d@ls/false (rd84@syntax-dispatch r227b@t '()))) (if r227d@ls/false (apply (lambda () (values '() (lambda (r227f@x) '#t))) r227d@ls/false) (let ((r2281@t r227b@t)) (let ((r2283@ls/false (rd84@syntax-dispatch r2281@t '_))) (if r2283@ls/false (apply (lambda () (re64@syntax-violation '#f '"invalid import spec" r2251@spec)) r2283@ls/false) (re64@syntax-violation '#f '"invalid syntax" r2281@t))))))))))))))))) (r2196@import-library (lambda (r2241@spec*) (call-with-values (lambda () (r2194@parse-library-name r2241@spec*)) (lambda (r2247@r2244 r2248@r2246) (let ((r224b@pred r2248@r2246) (r224c@name r2247@r2244)) (begin (if (null? r224c@name) (re64@syntax-violation 'import '"empty library name" r2241@spec*) (void)) (let ((r224f@lib (r992@r7d9@find-library-by-name r224c@name))) (begin (if (not r224f@lib) (re64@syntax-violation 'import '"cannot find library with required name" r224c@name) (void)) (if (not (r224b@pred (r96c@r78d@library-version r224f@lib))) (re64@syntax-violation 'import '"library does not satisfy version specification" r2241@spec* r224f@lib) (void)) ((rdf0@imp-collector) r224f@lib) (r974@r79d@library-subst r224f@lib))))))))) (r2198@get-import (lambda (r21b3@spec) (let ((r21b5@t r21b3@spec)) (let ((r21b7@ls/false (rd84@syntax-dispatch r21b5@t '(any . each-any)))) (if (and r21b7@ls/false (apply (lambda (r21b9@x r21ba@x*) (not (memq (re6a@syntax->datum r21b9@x) '(for rename except only prefix library)))) r21b7@ls/false)) (apply (lambda (r21bd@x r21be@x*) (r2196@import-library (cons r21bd@x r21be@x*))) r21b7@ls/false) (let ((r21c1@t r21b5@t)) (let ((r21c3@ls/false (rd84@syntax-dispatch r21c1@t '(any any . #(each (any any)))))) (if (and r21c3@ls/false (apply (lambda (r21c5@rename r21c6@isp r21c7@old* r21c8@new*) (and (eq? (re6a@syntax->datum r21c5@rename) 'rename) (for-all r2186@idsyn? r21c7@old*) (for-all r2186@idsyn? r21c8@new*))) r21c3@ls/false)) (apply (lambda (r21cd@rename r21ce@isp r21cf@old* r21d0@new*) (let ((r21d5@subst (r2198@get-import r21ce@isp)) (r21d6@old* (map re6a@syntax->datum r21cf@old*)) (r21d7@new* (map re6a@syntax->datum r21d0@new*))) (let ((r21db@old-label* (r218e@find* r21d6@old* r21d5@subst))) (let ((r21dd@subst (r2190@rem* r21d6@old* r21d5@subst))) (r218a@merge-substs (map cons r21d7@new* r21db@old-label*) r21dd@subst))))) r21c3@ls/false) (let ((r21df@t r21c1@t)) (let ((r21e1@ls/false (rd84@syntax-dispatch r21df@t '(any any . each-any)))) (if (and r21e1@ls/false (apply (lambda (r21e3@except r21e4@isp r21e5@sym*) (and (eq? (re6a@syntax->datum r21e3@except) 'except) (for-all r2186@idsyn? r21e5@sym*))) r21e1@ls/false)) (apply (lambda (r21e9@except r21ea@isp r21eb@sym*) (let ((r21ef@subst (r2198@get-import r21ea@isp))) (r2190@rem* (map re6a@syntax->datum r21eb@sym*) r21ef@subst))) r21e1@ls/false) (let ((r21f1@t r21df@t)) (let ((r21f3@ls/false (rd84@syntax-dispatch r21f1@t '(any any . each-any)))) (if (and r21f3@ls/false (apply (lambda (r21f5@only r21f6@isp r21f7@sym*) (and (eq? (re6a@syntax->datum r21f5@only) 'only) (for-all r2186@idsyn? r21f7@sym*))) r21f3@ls/false)) (apply (lambda (r21fb@only r21fc@isp r21fd@sym*) (let ((r2201@subst (r2198@get-import r21fc@isp)) (r2202@sym* (map re6a@syntax->datum r21fd@sym*))) (let ((r2205@sym* (r2192@remove-dups r2202@sym*))) (let ((r2207@lab* (r218e@find* r2205@sym* r2201@subst))) (map cons r2205@sym* r2207@lab*))))) r21f3@ls/false) (let ((r2209@t r21f1@t)) (let ((r220b@ls/false (rd84@syntax-dispatch r2209@t '(any any any)))) (if (and r220b@ls/false (apply (lambda (r220d@prefix r220e@isp r220f@p) (and (eq? (re6a@syntax->datum r220d@prefix) 'prefix) (r2186@idsyn? r220f@p))) r220b@ls/false)) (apply (lambda (r2213@prefix r2214@isp r2215@p) (let ((r2219@subst (r2198@get-import r2214@isp)) (r221a@prefix (symbol->string (re6a@syntax->datum r2215@p)))) (map (lambda (r221d@x) (cons (string->symbol (string-append r221a@prefix (symbol->string (car r221d@x)))) (cdr r221d@x))) r2219@subst))) r220b@ls/false) (let ((r221f@t r2209@t)) (let ((r2221@ls/false (rd84@syntax-dispatch r221f@t '(any each-any)))) (if (and r2221@ls/false (apply (lambda (r2223@library r2224@spec*) (eq? (re6a@syntax->datum r2223@library) 'library)) r2221@ls/false)) (apply (lambda (r2227@library r2228@spec*) (r2196@import-library r2228@spec*)) r2221@ls/false) (let ((r222b@t r221f@t)) (let ((r222d@ls/false (rd84@syntax-dispatch r222b@t '(any any . any)))) (if (and r222d@ls/false (apply (lambda (r222f@for r2230@isp r2231@rest) (eq? (re6a@syntax->datum r222f@for) 'for)) r222d@ls/false)) (apply (lambda (r2235@for r2236@isp r2237@rest) (r2198@get-import r2236@isp)) r222d@ls/false) (let ((r223b@t r222b@t)) (let ((r223d@ls/false (rd84@syntax-dispatch r223b@t 'any))) (if r223d@ls/false (apply (lambda (r223f@spec) (re64@syntax-violation 'import '"invalid import spec" r223f@spec)) r223d@ls/false) (re64@syntax-violation '#f '"invalid syntax" r223b@t))))))))))))))))))))))))))) (r219a@add-imports! (lambda (r21a3@imp r21a4@h) (let ((r21a7@subst (r2198@get-import r21a3@imp))) (for-each (lambda (r21a9@x) (let ((r21ab@name (car r21a9@x)) (r21ac@label (cdr r21a9@x))) (let ((r21af@t (hashtable-ref r21a4@h r21ab@name '#f))) (if r21af@t ((lambda (r21b1@l) (if (not (eq? r21b1@l r21ac@label)) (r2188@dup-error r21ab@name) (void))) r21af@t) (hashtable-set! r21a4@h r21ab@name r21ac@label))))) r21a7@subst))))) (lambda (r219b@imp*) (let r21a1@f ((r219d@imp* r219b@imp*) (r219e@h (make-eq-hashtable))) (if (null? r219d@imp*) (hashtable-entries r219e@h) (begin (r219a@add-imports! (car r219d@imp*) r219e@h) (r21a1@f (cdr r219d@imp*) r219e@h))))))) (set! r28bd@rde6@parse-import-spec* rde6@parse-import-spec*) (set! rde8@make-top-rib (lambda (r2391@names r2392@labels) (let ((r2395@rib (rb31@make-empty-rib))) (begin (vector-for-each (lambda (r2397@name r2398@label) (begin (if (not (symbol? r2397@name)) (error 'make-top-rib '"BUG: not a symbol" r2397@name) (void)) (rb35@extend-rib/nc! r2395@rib (make-simple-struct 'stx '5 (list r2397@name rb01@top-mark* '() '())) r2398@label))) r2391@names r2392@labels) r2395@rib)))) (set! r28be@rde8@make-top-rib rde8@make-top-rib) (set! rdea@make-collector (lambda () (let ((r239b@ls '())) (lambda r239f (let ((r23a0 (length r239f))) (if (= r23a0 '0) (apply (lambda () r239b@ls) r239f) (if (= r23a0 '1) (apply (lambda (r239d@x) (set! r239b@ls (rafa@set-cons r239d@x r239b@ls))) r239f) (error 'apply '"invalid arg count")))))))) (set! r28bf@rdea@make-collector rdea@make-collector) (set! rdec@inv-collector (r6cd@r5ab@make-parameter (lambda r23a1@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (r23a3@x) (begin (if (not (procedure? r23a3@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" r23a3@x) (void)) r23a3@x)))) (set! r28c0@rdec@inv-collector rdec@inv-collector) (set! rdee@vis-collector (r6cd@r5ab@make-parameter (lambda r23a5@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (r23a7@x) (begin (if (not (procedure? r23a7@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" r23a7@x) (void)) r23a7@x)))) (set! r28c1@rdee@vis-collector rdee@vis-collector) (set! rdf0@imp-collector (r6cd@r5ab@make-parameter (lambda r23a9@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (r23ab@x) (begin (if (not (procedure? r23ab@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" r23ab@x) (void)) r23ab@x)))) (set! r28c2@rdf0@imp-collector rdf0@imp-collector) (set! rdf2@chi-library-internal (lambda (r23ad@e* r23ae@rib r23af@top?) (call-with-values (lambda () (rddc@chi-body* r23ad@e* '() '() '() '() '() '() '() r23ae@rib r23af@top?)) (lambda (r23c3@r23b4 r23c4@r23b6 r23c5@r23b8 r23c6@r23ba r23c7@r23bc r23c8@r23be r23c9@r23c0 r23ca@r23c2) (let ((r23d3@exp* r23ca@r23c2) (r23d4@_kwd* r23c9@r23c0) (r23d5@mod** r23c8@r23be) (r23d6@rhs* r23c7@r23bc) (r23d7@lex* r23c6@r23ba) (r23d8@mr r23c5@r23b8) (r23d9@r r23c4@r23b6) (r23da@e* r23c3@r23b4)) (values (append (apply append (reverse r23d5@mod**)) r23da@e*) r23d9@r r23d8@mr (reverse r23d7@lex*) (reverse r23d6@rhs*) r23d3@exp*)))))) (set! r28c3@rdf2@chi-library-internal rdf2@chi-library-internal) (set! rdf4@chi-interaction-expr (lambda (r23e3@e r23e4@rib r23e5@r) (call-with-values (lambda () (rddc@chi-body* (list r23e3@e) r23e5@r r23e5@r '() '() '() '() '() r23e4@rib '#t)) (lambda (r23f9@r23ea r23fa@r23ec r23fb@r23ee r23fc@r23f0 r23fd@r23f2 r23fe@r23f4 r23ff@r23f6 r2400@r23f8) (let ((r2409@_exp* r2400@r23f8) (r240a@_kwd* r23ff@r23f6) (r240b@mod** r23fe@r23f4) (r240c@rhs* r23fd@r23f2) (r240d@lex* r23fc@r23f0) (r240e@mr r23fb@r23ee) (r240f@r r23fa@r23ec) (r2410@e* r23f9@r23ea)) (let ((r2419@e* (rdb4@expand-interaction-rhs*/init* (reverse r240d@lex*) (reverse r240c@rhs*) (append (apply append (reverse r240b@mod**)) r2410@e*) r240f@r r240e@mr))) (let ((r241b@e (if (null? r2419@e*) (rae3@ra44@build-void) (if (null? (cdr r2419@e*)) (car r2419@e*) (rae2@ra42@build-sequence '#f r2419@e*))))) (values r241b@e r240f@r)))))))) (set! r28c4@rdf4@chi-interaction-expr rdf4@chi-interaction-expr) (set! rdf6@library-body-expander (lambda (r241d@name r241e@main-exp* r241f@imp* r2420@b* r2421@top?) (letrec* ((r2428@itc (rdea@make-collector))) (let ((r2431@r242a rdf0@imp-collector) (r2432@r242c re74@top-level-context) (r2433@r242e r2428@itc) (r2434@r2430 '#f)) (let ((r2439@swap (lambda () (begin (let ((r243b@t (r2431@r242a))) (begin (r2431@r242a r2433@r242e) (set! r2433@r242e r243b@t))) (let ((r243d@t (r2432@r242c))) (begin (r2432@r242c r2434@r2430) (set! r2434@r2430 r243d@t))))))) (dynamic-wind r2439@swap (lambda () (call-with-values (lambda () (rde6@parse-import-spec* r241f@imp*)) (lambda (r2443@r2440 r2444@r2442) (let ((r2447@subst-labels r2444@r2442) (r2448@subst-names r2443@r2440)) (let ((r244b@rib (rde8@make-top-rib r2448@subst-names r2447@subst-labels))) (letrec* ((r244e@wrap (lambda (r24c9@x) (make-simple-struct 'stx '5 (list r24c9@x rb01@top-mark* (list r244b@rib) '()))))) (let ((r244f@b* (map r244e@wrap r2420@b*)) (r2450@main-exp* (map r244e@wrap r241e@main-exp*)) (r2451@rtc (rdea@make-collector)) (r2452@vtc (rdea@make-collector))) (let ((r245f@r2458 rdec@inv-collector) (r2460@r245a rdee@vis-collector) (r2461@r245c r2451@rtc) (r2462@r245e r2452@vtc)) (let ((r2467@swap (lambda () (begin (let ((r2469@t (r245f@r2458))) (begin (r245f@r2458 r2461@r245c) (set! r2461@r245c r2469@t))) (let ((r246b@t (r2460@r245a))) (begin (r2460@r245a r2462@r245e) (set! r2462@r245e r246b@t))))))) (dynamic-wind r2467@swap (lambda () (call-with-values (lambda () (rdf2@chi-library-internal r244f@b* r244b@rib r2421@top?)) (lambda (r2479@r246e r247a@r2470 r247b@r2472 r247c@r2474 r247d@r2476 r247e@r2478) (let ((r2485@internal-exp* r247e@r2478) (r2486@rhs* r247d@r2476) (r2487@lex* r247c@r2474) (r2488@mr r247b@r2472) (r2489@r r247a@r2470) (r248a@init* r2479@r246e)) (call-with-values (lambda () (rde0@parse-exports (append r2450@main-exp* r2485@internal-exp*))) (lambda (r2495@r2492 r2496@r2494) (let ((r2499@exp-id* r2496@r2494) (r249a@exp-name* r2495@r2492)) (begin (rb39@seal-rib! r244b@rib) (let ((r249d@init* (rda2@chi-expr* r248a@init* r2489@r r2488@mr))) (let ((r249f@rhs* (rdb6@chi-rhs* r2486@rhs* r2489@r r2488@mr))) (begin (rb3b@unseal-rib! r244b@rib) (let ((r24a1@loc* (map rb07@gen-global r2487@lex*)) (r24a2@export-subst (re4e@make-export-subst r249a@exp-name* r2499@exp-id*))) (letrec* ((r24a6@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (re50@make-export-env/macros r2487@lex* r24a1@loc* r2489@r)) (lambda (r24ad@r24a8 r24ae@r24aa r24af@r24ac) (let ((r24b3@macro* r24af@r24ac) (r24b4@global* r24ae@r24aa) (r24b5@export-env r24ad@r24a8)) (begin (for-each (lambda (r24b9@s) (let ((r24bb@name (car r24b9@s)) (r24bc@label (cdr r24b9@s))) (let ((r24bf@p (assq r24bc@label r24b5@export-env))) (if r24bf@p (let ((r24c1@b (cdr r24bf@p))) (let ((r24c3@type (car r24c1@b))) (if (eq? r24c3@type 'mutable) (re64@syntax-violation 'export r24a6@errstr r24bb@name) (void)))) (void))))) r24a2@export-subst) (let ((r24c5@invoke-body (rae8@ra4e@build-library-letrec* '#f r241d@name r2487@lex* r24a1@loc* r249f@rhs* (if (null? r249d@init*) (rae3@ra44@build-void) (rae2@ra42@build-sequence '#f r249d@init*)))) (r24c6@invoke-definitions (map radf@r9a1@build-global-define (map cdr r24b4@global*)))) (values (r2428@itc) (r2451@rtc) (r2452@vtc) (rae2@ra42@build-sequence '#f (append r24c6@invoke-definitions (list r24c5@invoke-body))) r24b3@macro* r24a2@export-subst r24b5@export-env))))))))))))))))))) r2467@swap)))))))))) r2439@swap)))))) (set! r28c5@rdf6@library-body-expander rdf6@library-body-expander) (set! rdf8@core-library-expander (lambda (r24cb@e r24cc@verify-name) (call-with-values (lambda () (rde4@parse-library r24cb@e)) (lambda (r24d7@r24d0 r24d8@r24d2 r24d9@r24d4 r24da@r24d6) (let ((r24df@b* r24da@r24d6) (r24e0@imp* r24d9@r24d4) (r24e1@exp* r24d8@r24d2) (r24e2@name* r24d7@r24d0)) (call-with-values (lambda () (rde2@parse-library-name r24e2@name*)) (lambda (r24eb@r24e8 r24ec@r24ea) (let ((r24ef@ver r24ec@r24ea) (r24f0@name r24eb@r24e8)) (begin (r24cc@verify-name r24f0@name) (call-with-values (lambda () (rdf6@library-body-expander r24f0@name r24e1@exp* r24e0@imp* r24df@b* '#f)) (lambda (r2501@r24f4 r2502@r24f6 r2503@r24f8 r2504@r24fa r2505@r24fc r2506@r24fe r2507@r2500) (let ((r250f@export-env r2507@r2500) (r2510@export-subst r2506@r24fe) (r2511@visit-code r2505@r24fc) (r2512@invoke-code r2504@r24fa) (r2513@visit-req* r2503@r24f8) (r2514@invoke-req* r2502@r24f6) (r2515@imp* r2501@r24f4)) (values r24f0@name r24ef@ver r2515@imp* r2514@invoke-req* r2513@visit-req* r2512@invoke-code r2511@visit-code r2510@export-subst r250f@export-env))))))))))))) (set! r28c6@rdf8@core-library-expander rdf8@core-library-expander) (set! rdfa@parse-top-level-program (lambda (r251d@e*) (let ((r251f@t r251d@e*)) (let ((r2521@ls/false (rd84@syntax-dispatch r251f@t '((any . each-any) . each-any)))) (if (and r2521@ls/false (apply (lambda (r2523@import r2524@imp* r2525@b*) (eq? (re6a@syntax->datum r2523@import) 'import)) r2521@ls/false)) (apply (lambda (r2529@import r252a@imp* r252b@b*) (values r252a@imp* r252b@b*)) r2521@ls/false) (let ((r252f@t r251f@t)) (let ((r2531@ls/false (rd84@syntax-dispatch r252f@t '((any . any) . any)))) (if (and r2531@ls/false (apply (lambda (r2533@import r2534@x r2535@y) (eq? (re6a@syntax->datum r2533@import) 'import)) r2531@ls/false)) (apply (lambda (r2539@import r253a@x r253b@y) (re64@syntax-violation 'expander '"invalid syntax of top-level program" (rb77@syntax-car r251d@e*))) r2531@ls/false) (let ((r253f@t r252f@t)) (let ((r2541@ls/false (rd84@syntax-dispatch r253f@t '_))) (if r2541@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) r2541@ls/false) (re64@syntax-violation '#f '"invalid syntax" r253f@t)))))))))))) (set! r28c7@rdfa@parse-top-level-program rdfa@parse-top-level-program) (set! rdfc@top-level-expander (lambda (r2543@e*) (call-with-values (lambda () (rdfa@parse-top-level-program r2543@e*)) (lambda (r2549@r2546 r254a@r2548) (let ((r254d@b* r254a@r2548) (r254e@imp* r2549@r2546)) (call-with-values (lambda () (rdf6@library-body-expander '() '() r254e@imp* r254d@b* '#t)) (lambda (r255f@r2552 r2560@r2554 r2561@r2556 r2562@r2558 r2563@r255a r2564@r255c r2565@r255e) (let ((r256d@export-env r2565@r255e) (r256e@export-subst r2564@r255c) (r256f@visit-code r2563@r255a) (r2570@invoke-code r2562@r2558) (r2571@visit-req* r2561@r2556) (r2572@invoke-req* r2560@r2554) (r2573@imp* r255f@r2552)) (values r2572@invoke-req* r2570@invoke-code))))))))) (set! r28c8@rdfc@top-level-expander rdfc@top-level-expander) (set! rdfe@rp (r6ca@r5a5@make-record-printer 'env (lambda (r257b@x r257c@p r257d@wr) (display '"#<environment>" r257c@p)))) (set! r28c9@rdfe@rp rdfe@rp) (set! re08@env? (lambda (r2581@x) (and (simple-struct? r2581@x) (eq? (simple-struct-name r2581@x) 'env)))) (set! r28ca@re08@env? re08@env?) (set! re0a@env-names (lambda (r2583@x) (simple-struct-ref r2583@x '0))) (set! r28cb@re0a@env-names re0a@env-names) (set! re0c@set-env-names! (lambda (r2585@x r2586@val) (simple-struct-set! r2585@x '0 r2586@val))) (set! r28cc@re0c@set-env-names! re0c@set-env-names!) (set! re0e@env-labels (lambda (r2589@x) (simple-struct-ref r2589@x '1))) (set! r28cd@re0e@env-labels re0e@env-labels) (set! re10@set-env-labels! (lambda (r258b@x r258c@val) (simple-struct-set! r258b@x '1 r258c@val))) (set! r28ce@re10@set-env-labels! re10@set-env-labels!) (set! re12@env-itc (lambda (r258f@x) (simple-struct-ref r258f@x '2))) (set! r28cf@re12@env-itc re12@env-itc) (set! re14@set-env-itc! (lambda (r2591@x r2592@val) (simple-struct-set! r2591@x '2 r2592@val))) (set! r28d0@re14@set-env-itc! re14@set-env-itc!) (set! re16@dummy '3) (set! r28d1@re16@dummy re16@dummy) (set! re18@rp (r6ca@r5a5@make-record-printer 'interaction-env (lambda (r2595@x r2596@p r2597@wr) (display '"#<environment>" r2596@p)))) (set! r28d2@re18@rp re18@rp) (set! re22@interaction-env? (lambda (r259b@x) (and (simple-struct? r259b@x) (eq? (simple-struct-name r259b@x) 'interaction-env)))) (set! r28d3@re22@interaction-env? re22@interaction-env?) (set! re24@interaction-env-rib (lambda (r259d@x) (simple-struct-ref r259d@x '0))) (set! r28d4@re24@interaction-env-rib re24@interaction-env-rib) (set! re26@set-interaction-env-rib! (lambda (r259f@x r25a0@val) (simple-struct-set! r259f@x '0 r25a0@val))) (set! r28d5@re26@set-interaction-env-rib! re26@set-interaction-env-rib!) (set! re28@interaction-env-r (lambda (r25a3@x) (simple-struct-ref r25a3@x '1))) (set! r28d6@re28@interaction-env-r re28@interaction-env-r) (set! re2a@set-interaction-env-r! (lambda (r25a5@x r25a6@val) (simple-struct-set! r25a5@x '1 r25a6@val))) (set! r28d7@re2a@set-interaction-env-r! re2a@set-interaction-env-r!) (set! re2c@interaction-env-locs (lambda (r25a9@x) (simple-struct-ref r25a9@x '2))) (set! r28d8@re2c@interaction-env-locs re2c@interaction-env-locs) (set! re2e@set-interaction-env-locs! (lambda (r25ab@x r25ac@val) (simple-struct-set! r25ab@x '2 r25ac@val))) (set! r28d9@re2e@set-interaction-env-locs! re2e@set-interaction-env-locs!) (set! re30@dummy '3) (set! r28da@re30@dummy re30@dummy) (set! re32@interaction-environment-symbols (lambda () (re3a@environment-symbols (re72@interaction-environment)))) (set! r28db@re32@interaction-environment-symbols re32@interaction-environment-symbols) (set! re34@environment-bindings (lambda (r25af@e) (vector->list (vector-map (lambda (r25b1@name r25b2@label) (re36@parse-binding (cons r25b1@name (r998@r7e5@imported-label->binding r25b2@label)))) (re0a@env-names r25af@e) (re0e@env-labels r25af@e))))) (set! r28dc@re34@environment-bindings re34@environment-bindings) (set! re36@parse-binding (lambda (r25b5@b) (cons (car r25b5@b) (let ((r25b7@t (cadr r25b5@b))) (if (memv r25b7@t '(core-prim global)) 'procedure (if (memv r25b7@t '(core-macro macro global-macro)) 'syntax (if (memv r25b7@t '($core-rtd)) 'record (if (eq? (car r25b5@b) (cadr r25b5@b)) 'syntax 'unknown)))))))) (set! r28dd@re36@parse-binding re36@parse-binding) (set! re38@environment? (lambda (r25b9@x) (or (re08@env? r25b9@x) (re22@interaction-env? r25b9@x)))) (set! r28de@re38@environment? re38@environment?) (set! re3a@environment-symbols (lambda (r25bb@x) (if (re08@env? r25bb@x) (vector->list (re0a@env-names r25bb@x)) (if (re22@interaction-env? r25bb@x) (map values (rb1b@rib-sym* (re24@interaction-env-rib r25bb@x))) (assertion-violation 'environment-symbols '"not an environment" r25bb@x))))) (set! r28df@re3a@environment-symbols re3a@environment-symbols) (set! re3c@environment (lambda r25bd@imp* (let ((r25bf@itc (rdea@make-collector))) (let ((r25c5@r25c2 rdf0@imp-collector) (r25c6@r25c4 r25bf@itc)) (let ((r25c9@swap (lambda () (let ((r25cb@t (r25c5@r25c2))) (begin (r25c5@r25c2 r25c6@r25c4) (set! r25c6@r25c4 r25cb@t)))))) (dynamic-wind r25c9@swap (lambda () (call-with-values (lambda () (rde6@parse-import-spec* r25bd@imp*)) (lambda (r25d1@r25ce r25d2@r25d0) (let ((r25d5@subst-labels r25d2@r25d0) (r25d6@subst-names r25d1@r25ce)) (make-simple-struct 'env '4 (list r25d6@subst-names r25d5@subst-labels r25bf@itc)))))) r25c9@swap)))))) (set! r28e0@re3c@environment re3c@environment) (set! re3e@null-environment (lambda (r25d9@n) (begin (if (not (eqv? r25d9@n '5)) (assertion-violation 'null-environment '"not 5" r25d9@n) (void)) (re3c@environment '(psyntax null-environment-5))))) (set! r28e1@re3e@null-environment re3e@null-environment) (set! re40@scheme-report-environment (lambda (r25db@n) (begin (if (not (eqv? r25db@n '5)) (assertion-violation 'scheme-report-environment '"not 5" r25db@n) (void)) (re3c@environment '(psyntax scheme-report-environment-5))))) (set! r28e2@re40@scheme-report-environment re40@scheme-report-environment) (set! re42@expand (lambda (r25dd@x r25de@env) (if (re08@env? r25de@env) (let ((r25e1@rib (rde8@make-top-rib (re0a@env-names r25de@env) (re0e@env-labels r25de@env)))) (let ((r25e3@x (make-simple-struct 'stx '5 (list r25dd@x rb01@top-mark* (list r25e1@rib) '()))) (r25e4@itc (re12@env-itc r25de@env)) (r25e5@rtc (rdea@make-collector)) (r25e6@vtc (rdea@make-collector))) (let ((r25eb@x (let ((r25fd@r25ee re74@top-level-context) (r25fe@r25f0 rdec@inv-collector) (r25ff@r25f2 rdee@vis-collector) (r2600@r25f4 rdf0@imp-collector) (r2601@r25f6 '#f) (r2602@r25f8 r25e5@rtc) (r2603@r25fa r25e6@vtc) (r2604@r25fc r25e4@itc)) (let ((r260d@swap (lambda () (begin (let ((r260f@t (r25fd@r25ee))) (begin (r25fd@r25ee r2601@r25f6) (set! r2601@r25f6 r260f@t))) (let ((r2611@t (r25fe@r25f0))) (begin (r25fe@r25f0 r2602@r25f8) (set! r2602@r25f8 r2611@t))) (let ((r2613@t (r25ff@r25f2))) (begin (r25ff@r25f2 r2603@r25fa) (set! r2603@r25fa r2613@t))) (let ((r2615@t (r2600@r25f4))) (begin (r2600@r25f4 r2604@r25fc) (set! r2604@r25fc r2615@t))))))) (dynamic-wind r260d@swap (lambda () (rda6@chi-expr r25e3@x '() '())) r260d@swap))))) (begin (rb39@seal-rib! r25e1@rib) (values r25eb@x (r25e5@rtc)))))) (if (re22@interaction-env? r25de@env) (let ((r2617@rib (re24@interaction-env-rib r25de@env)) (r2618@r (re28@interaction-env-r r25de@env)) (r2619@rtc (rdea@make-collector))) (let ((r261d@x (make-simple-struct 'stx '5 (list r25dd@x rb01@top-mark* (list r2617@rib) '())))) (call-with-values (lambda () (let ((r2633@r2624 re74@top-level-context) (r2634@r2626 rdec@inv-collector) (r2635@r2628 rdee@vis-collector) (r2636@r262a rdf0@imp-collector) (r2637@r262c r25de@env) (r2638@r262e r2619@rtc) (r2639@r2630 (rdea@make-collector)) (r263a@r2632 (rdea@make-collector))) (let ((r2643@swap (lambda () (begin (let ((r2645@t (r2633@r2624))) (begin (r2633@r2624 r2637@r262c) (set! r2637@r262c r2645@t))) (let ((r2647@t (r2634@r2626))) (begin (r2634@r2626 r2638@r262e) (set! r2638@r262e r2647@t))) (let ((r2649@t (r2635@r2628))) (begin (r2635@r2628 r2639@r2630) (set! r2639@r2630 r2649@t))) (let ((r264b@t (r2636@r262a))) (begin (r2636@r262a r263a@r2632) (set! r263a@r2632 r264b@t))))))) (dynamic-wind r2643@swap (lambda () (rdf4@chi-interaction-expr r261d@x r2617@rib r2618@r)) r2643@swap)))) (lambda (r264d@r2620 r264e@r2622) (let ((r2651@r^ r264e@r2622) (r2652@e r264d@r2620)) (begin (re2a@set-interaction-env-r! r25de@env r2651@r^) (values r2652@e (r2619@rtc)))))))) (assertion-violation 'expand '"not an environment" r25de@env))))) (set! r28e3@re42@expand re42@expand) (set! re44@eval (lambda (r2655@x r2656@env) (begin (if (not (re38@environment? r2656@env)) (error 'eval '"not an environment" r2656@env) (void)) (call-with-values (lambda () (re42@expand r2655@x r2656@env)) (lambda (r265d@r265a r265e@r265c) (let ((r2661@invoke-req* r265e@r265c) (r2662@x r265d@r265a)) (begin (for-each r999@r7e7@invoke-library r2661@invoke-req*) (eval-core (r723@r6db@expanded->core r2662@x))))))))) (set! r28e4@re44@eval re44@eval) (set! re46@library-expander (lambda r26d3 (let ((r26d4 (length r26d3))) (if (= r26d4 '3) (apply (lambda (r2665@x r2666@filename r2667@verify-name) (letrec* ((r266c@build-visit-code (lambda (r26c1@macro*) (if (null? r26c1@macro*) (rae3@ra44@build-void) (rae2@ra42@build-sequence '#f (map (lambda (r26c3@x) (let ((r26c5@loc (car r26c3@x)) (r26c6@src (cddr r26c3@x))) (list 'set! r26c5@loc r26c6@src))) r26c1@macro*))))) (r266e@visit! (lambda (r26b9@macro*) (for-each (lambda (r26bb@x) (let ((r26bd@loc (car r26bb@x)) (r26be@proc (cadr r26bb@x))) (set-symbol-value! r26bd@loc r26be@proc))) r26b9@macro*)))) (call-with-values (lambda () (rdf8@core-library-expander r2665@x r2667@verify-name)) (lambda (r2681@r2670 r2682@r2672 r2683@r2674 r2684@r2676 r2685@r2678 r2686@r267a r2687@r267c r2688@r267e r2689@r2680) (let ((r2693@export-env r2689@r2680) (r2694@export-subst r2688@r267e) (r2695@macro* r2687@r267c) (r2696@invoke-code r2686@r267a) (r2697@vis* r2685@r2678) (r2698@inv* r2684@r2676) (r2699@imp* r2683@r2674) (r269a@ver r2682@r2672) (r269b@name r2681@r2670)) (let ((r26a5@id (gensym)) (r26a6@name r269b@name) (r26a7@ver r269a@ver) (r26a8@imp* (map r99d@r7ef@library-spec r2699@imp*)) (r26a9@vis* (map r99d@r7ef@library-spec r2697@vis*)) (r26aa@inv* (map r99d@r7ef@library-spec r2698@inv*)) (r26ab@visit-proc (lambda () (r266e@visit! r2695@macro*))) (r26ac@invoke-proc (lambda () (eval-core (r723@r6db@expanded->core r2696@invoke-code)))) (r26ad@visit-code (r266c@build-visit-code r2695@macro*)) (r26ae@invoke-code r2696@invoke-code)) (begin (r997@r7e3@install-library r26a5@id r26a6@name r26a7@ver r26a8@imp* r26a9@vis* r26aa@inv* r2694@export-subst r2693@export-env r26ab@visit-proc r26ac@invoke-proc r26ad@visit-code r26ae@invoke-code '#t r2666@filename) (values r26a5@id r26a6@name r26a7@ver r26a8@imp* r26a9@vis* r26aa@inv* r26ae@invoke-code r26ad@visit-code r2694@export-subst r2693@export-env)))))))) r26d3) (if (= r26d4 '2) (apply (lambda (r26c9@x r26ca@filename) (re46@library-expander r26c9@x r26ca@filename (lambda (r26cd@x) (values)))) r26d3) (if (= r26d4 '1) (apply (lambda (r26cf@x) (re46@library-expander r26cf@x '#f (lambda (r26d1@x) (values)))) r26d3) (error 'apply '"invalid arg count"))))))) (set! r28e5@re46@library-expander re46@library-expander) (set! re48@boot-library-expand (lambda (r26d5@x) (call-with-values (lambda () (re46@library-expander r26d5@x)) (lambda (r26eb@r26d8 r26ec@r26da r26ed@r26dc r26ee@r26de r26ef@r26e0 r26f0@r26e2 r26f1@r26e4 r26f2@r26e6 r26f3@r26e8 r26f4@r26ea) (let ((r26ff@export-env r26f4@r26ea) (r2700@export-subst r26f3@r26e8) (r2701@visit-code r26f2@r26e6) (r2702@invoke-code r26f1@r26e4) (r2703@inv* r26f0@r26e2) (r2704@vis* r26ef@r26e0) (r2705@imp* r26ee@r26de) (r2706@ver r26ed@r26dc) (r2707@name r26ec@r26da) (r2708@id r26eb@r26d8)) (values r2707@name r2702@invoke-code r2700@export-subst r26ff@export-env)))))) (set! r28e6@re48@boot-library-expand re48@boot-library-expand) (set! re4a@rev-map-append (lambda (r2713@f r2714@ls r2715@ac) (if (null? r2714@ls) r2715@ac (re4a@rev-map-append r2713@f (cdr r2714@ls) (cons (r2713@f (car r2714@ls)) r2715@ac))))) (set! r28e7@re4a@rev-map-append re4a@rev-map-append) (set! re4c@build-exports (lambda (r2719@lex*+loc* r271a@init*) (rae2@ra42@build-sequence '#f (cons (rae3@ra44@build-void) (re4a@rev-map-append (lambda (r271d@x) (list 'set! (cdr r271d@x) (car r271d@x))) r2719@lex*+loc* r271a@init*))))) (set! r28e8@re4c@build-exports re4c@build-exports) (set! re4e@make-export-subst (lambda (r271f@name* r2720@id*) (map (lambda (r2723@name r2724@id) (let ((r2727@label (rb93@id->label r2724@id))) (begin (if (not r2727@label) (re64@syntax-violation '#f '"cannot export unbound identifier" r2724@id) (void)) (cons r2723@name r2727@label)))) r271f@name* r2720@id*))) (set! r28e9@re4e@make-export-subst re4e@make-export-subst) (set! re50@make-export-env/macros (lambda (r2729@lex* r272a@loc* r272b@r) (letrec* ((r2730@lookup (lambda (r274d@x) (let r2755@f ((r274f@x r274d@x) (r2750@lex* r2729@lex*) (r2751@loc* r272a@loc*)) (if (pair? r2750@lex*) (if (eq? r274f@x (car r2750@lex*)) (car r2751@loc*) (r2755@f r274f@x (cdr r2750@lex*) (cdr r2751@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let r2739@f ((r2731@r r272b@r) (r2732@env '()) (r2733@global* '()) (r2734@macro* '())) (if (null? r2731@r) (values r2732@env r2733@global* r2734@macro*) (let ((r273b@x (car r2731@r))) (let ((r273d@label (car r273b@x)) (r273e@b (cdr r273b@x))) (let ((r2741@t (rb99@binding-type r273e@b))) (if (memv r2741@t '(lexical)) (let ((r2743@v (rb9b@binding-value r273e@b))) (let ((r2745@loc (r2730@lookup (rd0e@lexical-var r2743@v))) (r2746@type (if (rd10@lexical-mutable? r2743@v) 'mutable 'global))) (r2739@f (cdr r2731@r) (cons (cons* r273d@label r2746@type r2745@loc) r2732@env) (cons (cons (rd0e@lexical-var r2743@v) r2745@loc) r2733@global*) r2734@macro*))) (if (memv r2741@t '(local-macro)) (let ((r2749@loc (gensym))) (r2739@f (cdr r2731@r) (cons (cons* r273d@label 'global-macro r2749@loc) r2732@env) r2733@global* (cons (cons r2749@loc (rb9b@binding-value r273e@b)) r2734@macro*))) (if (memv r2741@t '(local-macro!)) (let ((r274b@loc (gensym))) (r2739@f (cdr r2731@r) (cons (cons* r273d@label 'global-macro! r274b@loc) r2732@env) r2733@global* (cons (cons r274b@loc (rb9b@binding-value r273e@b)) r2734@macro*))) (if (memv r2741@t '($rtd $module)) (r2739@f (cdr r2731@r) (cons r273b@x r2732@env) r2733@global* r2734@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (rb99@binding-type r273e@b) (rb9b@binding-value r273e@b)))))))))))))) (set! r28ea@re50@make-export-env/macros re50@make-export-env/macros) (set! re52@generate-temporaries (lambda (r2757@ls) (let ((r2759@t r2757@ls)) (let ((r275b@ls/false (rd84@syntax-dispatch r2759@t 'each-any))) (if r275b@ls/false (apply (lambda (r275d@ls) (map (lambda (r275f@x) (make-simple-struct 'stx '5 (list (let ((r2761@x (re6a@syntax->datum r275f@x))) (if (or (symbol? r2761@x) (string? r2761@x)) (gensym r2761@x) (gensym 't))) rb01@top-mark* '() '()))) r275d@ls)) r275b@ls/false) (let ((r2763@t r2759@t)) (let ((r2765@ls/false (rd84@syntax-dispatch r2763@t '_))) (if r2765@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) r2765@ls/false) (re64@syntax-violation '#f '"invalid syntax" r2763@t))))))))) (set! r28eb@re52@generate-temporaries re52@generate-temporaries) (set! re54@free-identifier=? (lambda (r2767@x r2768@y) (if (rb7d@id? r2767@x) (if (rb7d@id? r2768@y) (rb83@free-id=? r2767@x r2768@y) (assertion-violation 'free-identifier=? '"not an identifier" r2768@y)) (assertion-violation 'free-identifier=? '"not an identifier" r2767@x)))) (set! r28ec@re54@free-identifier=? re54@free-identifier=?) (set! re56@bound-identifier=? (lambda (r276b@x r276c@y) (if (rb7d@id? r276b@x) (if (rb7d@id? r276c@y) (rb81@bound-id=? r276b@x r276c@y) (assertion-violation 'bound-identifier=? '"not an identifier" r276c@y)) (assertion-violation 'bound-identifier=? '"not an identifier" r276b@x)))) (set! r28ed@re56@bound-identifier=? re56@bound-identifier=?) (set! re58@make-source-condition (lambda (r276f@x) (letrec* ((r2779@r2774 (make-record-type-descriptor '&source-information &condition-rtd 'r2777 '#f '#f '#((immutable file-name) (immutable line)))) (r277b@r2776 '#f) (r277d@r2775 (make-record-constructor-descriptor r2779@r2774 &condition-rcd r277b@r2776)) (r2780@r2773 (record-predicate r2779@r2774)) (r2782@make-source-condition (record-constructor r277d@r2775)) (r2784@r2771 (record-accessor r2779@r2774 '0)) (r2786@r2772 (record-accessor r2779@r2774 '1)) (r2788@source-condition? (condition-predicate r2779@r2774)) (r278a@source-filename (condition-accessor r2779@r2774 r2784@r2771)) (r278c@source-character (condition-accessor r2779@r2774 r2786@r2772))) (if (and (pair? r276f@x) (pair? (cdr r276f@x))) (r2782@make-source-condition (car r276f@x) (cadr r276f@x)) (condition))))) (set! r28ee@re58@make-source-condition re58@make-source-condition) (set! re5a@extract-position-condition (lambda (r278d@x) (re58@make-source-condition (re5c@expression-position r278d@x)))) (set! r28ef@re5a@extract-position-condition re5a@extract-position-condition) (set! re5c@expression-position (lambda (r278f@x) (and (rb49@stx? r278f@x) (let ((r2791@x (rb4b@stx-expr r278f@x))) (and (r6c1@r593@annotation? r2791@x) (r6c2@r595@annotation-source r2791@x)))))) (set! r28f0@re5c@expression-position re5c@expression-position) (set! re5e@assertion-error (lambda (r2793@expr r2794@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list r2793@expr)) (re58@make-source-condition r2794@pos))))) (set! r28f1@re5e@assertion-error re5e@assertion-error) (set! re60@syntax-error (lambda (r2797@x . r2799@args) (begin (if (not (for-all string? r2799@args)) (assertion-violation 'syntax-error '"invalid argument" r2799@args) (void)) (raise (condition (make-message-condition (if (null? r2799@args) '"invalid syntax" (apply string-append r2799@args))) (make-syntax-violation (re6a@syntax->datum r2797@x) '#f) (re5a@extract-position-condition r2797@x)))))) (set! r28f2@re60@syntax-error re60@syntax-error) (set! re62@syntax-violation* (lambda (r279b@who r279c@msg r279d@form r279e@condition-object) (begin (if (not (string? r279c@msg)) (assertion-violation 'syntax-violation '"message is not a string" r279c@msg) (void)) (let ((r27a3@who (if (or (string? r279b@who) (symbol? r279b@who)) r279b@who (if (not r279b@who) (let ((r27a5@t r279d@form)) (let ((r27a7@ls/false (rd84@syntax-dispatch r27a5@t 'any))) (if (and r27a7@ls/false (apply (lambda (r27a9@id) (rb7d@id? r27a9@id)) r27a7@ls/false)) (apply (lambda (r27ab@id) (re6a@syntax->datum r27ab@id)) r27a7@ls/false) (let ((r27ad@t r27a5@t)) (let ((r27af@ls/false (rd84@syntax-dispatch r27ad@t '(any . any)))) (if (and r27af@ls/false (apply (lambda (r27b1@id r27b2@rest) (rb7d@id? r27b1@id)) r27af@ls/false)) (apply (lambda (r27b5@id r27b6@rest) (re6a@syntax->datum r27b5@id)) r27af@ls/false) (let ((r27b9@t r27ad@t)) (let ((r27bb@ls/false (rd84@syntax-dispatch r27b9@t '_))) (if r27bb@ls/false (apply (lambda () '#f) r27bb@ls/false) (re64@syntax-violation '#f '"invalid syntax" r27b9@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" r279b@who))))) (raise (condition (if r27a3@who (make-who-condition r27a3@who) (condition)) (make-message-condition r279c@msg) r279e@condition-object (re5a@extract-position-condition r279d@form))))))) (set! r28f3@re62@syntax-violation* re62@syntax-violation*) (set! re64@syntax-violation (lambda r27cb (let ((r27cc (length r27cb))) (if (= r27cc '3) (apply (lambda (r27bd@who r27be@msg r27bf@form) (re64@syntax-violation r27bd@who r27be@msg r27bf@form '#f)) r27cb) (if (= r27cc '4) (apply (lambda (r27c3@who r27c4@msg r27c5@form r27c6@subform) (re62@syntax-violation* r27c3@who r27c4@msg r27c5@form (make-syntax-violation (re6a@syntax->datum r27c5@form) (re6a@syntax->datum r27c6@subform)))) r27cb) (error 'apply '"invalid arg count")))))) (set! r28f4@re64@syntax-violation re64@syntax-violation) (set! re66@identifier? (lambda (r27cd@x) (rb7d@id? r27cd@x))) (set! r28f5@re66@identifier? re66@identifier?) (set! re68@datum->syntax (lambda (r27cf@id r27d0@datum) (if (rb7d@id? r27cf@id) (rb5d@datum->stx r27cf@id r27d0@datum) (assertion-violation 'datum->syntax '"not an identifier" r27cf@id)))) (set! r28f6@re68@datum->syntax re68@datum->syntax) (set! re6a@syntax->datum (lambda (r27d3@x) (rb91@stx->datum r27d3@x))) (set! r28f7@re6a@syntax->datum re6a@syntax->datum) (set! re6c@ungensym-all (lambda (r27d5@code) (if (pair? r27d5@code) (cons (re6c@ungensym-all (car r27d5@code)) (re6c@ungensym-all (cdr r27d5@code))) (if (symbol? r27d5@code) (ungensym r27d5@code) r27d5@code)))) (set! r28f8@re6c@ungensym-all re6c@ungensym-all) (set! re6e@compile-r6rs-top-level (lambda (r27d7@x*) (call-with-values (lambda () (rdfc@top-level-expander r27d7@x*)) (lambda (r27dd@r27da r27de@r27dc) (let ((r27e1@invoke-code r27de@r27dc) (r27e2@lib* r27dd@r27da)) (lambda () (begin (for-each r999@r7e7@invoke-library r27e2@lib*) (let ((r27e5@expanded (r723@r6db@expanded->core r27e1@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (re6c@ungensym-all r27e5@expanded)) (void)) (eval-core r27e5@expanded)))))))))) (set! r28f9@re6e@compile-r6rs-top-level re6e@compile-r6rs-top-level) (set! re70@pre-compile-r6rs-top-level (lambda (r27e7@x*) (call-with-values (lambda () (rdfc@top-level-expander r27e7@x*)) (lambda (r27ed@r27ea r27ee@r27ec) (let ((r27f1@invoke-code r27ee@r27ec) (r27f2@lib* r27ed@r27ea)) (begin (for-each r999@r7e7@invoke-library r27f2@lib*) (r6cb@r5a7@compile-core (r723@r6db@expanded->core r27f1@invoke-code)))))))) (set! r28fa@re70@pre-compile-r6rs-top-level re70@pre-compile-r6rs-top-level) (set! re72@interaction-environment (let ((r27f5@the-env '#f)) (lambda () (or r27f5@the-env (let ((r27f7@lib (r992@r7d9@find-library-by-name '(mosh interaction))) (r27f8@rib (rb31@make-empty-rib))) (begin (let ((r27fb@subst (r974@r79d@library-subst r27f7@lib))) (begin (rb1d@set-rib-sym*! r27f8@rib (map car r27fb@subst)) (rb21@set-rib-mark**! r27f8@rib (map (lambda (r27fd@x) rb01@top-mark*) r27fb@subst)) (rb25@set-rib-label*! r27f8@rib (map cdr r27fb@subst)))) (let ((r27ff@env (make-simple-struct 'interaction-env '4 (list r27f8@rib '() '())))) (begin (set! r27f5@the-env r27ff@env) r27ff@env)))))))) (set! r28fb@re72@interaction-environment re72@interaction-environment) (set! re74@top-level-context (r6cd@r5ab@make-parameter '#f)) (set! r28fc@re74@top-level-context re74@top-level-context) (r98f@r7d3@current-library-expander re46@library-expander))
(begin (begin (r720@r6d5@current-primitive-locations (lambda (r2e57@x) (let ((r2e59@t (assq r2e57@x '((syntax-error . r28f2@re60@syntax-error) (syntax-dispatch . r2890@rd84@syntax-dispatch) (load . r2a7c@r2923@load) (interaction-environment . r28fb@re72@interaction-environment) (library-path . r987@r7c3@library-path) (mosh-cache-dir . r6ce@r5ad@mosh-cache-dir) (make-parameter . r6cd@r5ab@make-parameter) (make-variable-transformer . r284d@rbaf@make-variable-transformer) (identifier? . r28f5@re66@identifier?) (generate-temporaries . r28eb@re52@generate-temporaries) (free-identifier=? . r28ec@re54@free-identifier=?) (syntax->datum . r28f7@re6a@syntax->datum) (datum->syntax . r28f6@re68@datum->syntax) (bound-identifier=? . r28ed@re56@bound-identifier=?) (scheme-report-environment . r28e2@re40@scheme-report-environment) (null-environment . r28e1@re3e@null-environment) (command-line . r2a79@r291d@command-line) (eval . r28e4@re44@eval) (environment . r28e0@re3c@environment) (syntax-violation . r28f4@re64@syntax-violation) (assertion-error . r28f1@re5e@assertion-error))))) (if r2e59@t (cdr r2e59@t) '#f)))) (r997@r7e3@install-library 'r2e34 '(mosh interaction) '() '() '() '() '((regexp? . r2df4) (alist->eq-hash-table . r2df0) (format . r2ded) (string-split . r2ddd) (call-process . r2dd6) (set-current-directory! . r2dd2) (expand-path . r2dd1) (current-directory . r2dd0) (%getpid . r2dcf) (%spawn . r2dce) (%waitpid . r2dcd) (simple-struct-name . r2dcc) (simple-struct-set! . r2dcb) (simple-struct-ref . r2dca) (make-simple-struct . r2dc9) (simple-struct? . r2dc8) (pointer-ref-c-int64 . r2dc7) (pointer-ref-c-int32 . r2dc6) (pointer-ref-c-int16 . r2dc5) (pointer-ref-c-int8 . r2dc4) (pointer-ref-c-uint64 . r2dc3) (pointer-ref-c-uint32 . r2dc2) (pointer-ref-c-uint16 . r2dc1) (pointer-ref-c-uint8 . r2dc0) (pointer-set-c-uint64! . r2dbf) (pointer-set-c-uint32! . r2dbe) (pointer-set-c-uint16! . r2dbd) (pointer-set-c-uint8! . r2dbc) (pointer-set-c-int64! . r2dbb) (pointer-set-c-int32! . r2dba) (pointer-set-c-int16! . r2db9) (pointer-set-c-int8! . r2db8) (pointer-set-c-pointer! . r2db7) (pointer-set-c-double! . r2db6) (pointer-set-c-float! . r2db5) (pointer-set-c-long-long! . r2db4) (pointer-set-c-long! . r2db3) (pointer-set-c-int! . r2db2) (pointer-set-c-short! . r2db1) (pointer-set-c-char! . r2db0) (pointer-ref-c-pointer . r2daf) (pointer-ref-c-double . r2dae) (pointer-ref-c-float . r2dad) (pointer-ref-c-unsigned-long-long . r2dac) (pointer-ref-c-signed-long-long . r2dab) (pointer-ref-c-unsigned-long . r2daa) (pointer-ref-c-signed-long . r2da9) (pointer-ref-c-unsigned-int . r2da8) (pointer-ref-c-signed-int . r2da7) (pointer-ref-c-unsigned-short . r2da6) (pointer-ref-c-signed-short . r2da5) (pointer-ref-c-unsigned-char . r2da4) (pointer-ref-c-signed-char . r2da3) (pointer->integer . r2da2) (integer->pointer . r2da1) (pointer? . r2da0) (shared-errno . r2d9f) (%ffi-supported? . r2d9a) (%ffi-pointer->string . r2d99) (%ffi-call . r2d98) (%ffi-lookup . r2d97) (%ffi-open . r2d96) (null-terminated-utf8->string . r2d95) (null-terminated-bytevector->string . r2d94) (%exec . r2d93) (%fork . r2d92) (%pipe . r2d91) (p . r2d90) (whereis . r2d74) (register . r2d73) (vm-join! . r2d72) (vm-set-value! . r2d71) (vm? . r2d70) (main-vm? . r2d6f) (vm-eval . r2d6e) (vm-self . r2d6d) (vm-start! . r2d6c) (make-vm . r2d6b) (mutex-try-lock! . r2d6a) (mutex-unlock! . r2d69) (mutex-lock! . r2d68) (mutex? . r2d67) (make-mutex . r2d66) (condition-variable-notify-all! . r2d65) (condition-variable-notify! . r2d64) (condition-variable-wait! . r2d63) (make-condition-variable . r2d62) (write/ss . r2d61) (string-upcase . r2d44) (string-titlecase . r2d43) (string-normalize-nfkd . r2d42) (string-normalize-nfkc . r2d41) (string-normalize-nfd . r2d40) (string-normalize-nfc . r2d3f) (string-foldcase . r2d3e) (string-downcase . r2d3d) (string-ci>? . r2d3c) (string-ci>=? . r2d3b) (string-ci=? . r2d3a) (string-ci<? . r2d39) (string-ci<=? . r2d38) (char-whitespace? . r2d37) (char-upper-case? . r2d36) (char-title-case? . r2d35) (char-numeric? . r2d34) (char-lower-case? . r2d33) (char-general-category . r2d32) (char-upcase . r2d31) (char-titlecase . r2d30) (char-foldcase . r2d2f) (char-downcase . r2d2e) (char-ci>? . r2d2d) (char-ci>=? . r2d2c) (char-ci=? . r2d2b) (char-ci<? . r2d2a) (char-ci<=? . r2d29) (char-alphabetic? . r2d28) (make-variable-transformer . rbae) (identifier? . re65) (generate-temporaries . re51) (free-identifier=? . re53) (syntax->datum . re69) (datum->syntax . re67) (bound-identifier=? . re55) (record-type-descriptor? . r2d27) (record-predicate . r2d26) (record-mutator . r2d25) (record-constructor . r2d24) (record-accessor . r2d23) (make-record-type-descriptor . r2d22) (make-record-constructor-descriptor . r2d21) (record? . r2d20) (record-type-uid . r2d1f) (record-type-sealed? . r2d1e) (record-type-parent . r2d1d) (record-type-opaque? . r2d1c) (record-type-name . r2d1b) (record-type-generative? . r2d1a) (record-type-field-names . r2d19) (record-rtd . r2d18) (record-field-mutable? . r2d17) (delete-file . r2d16) (file-exists? . r2d15) (vector-sort! . r2d14) (vector-sort . r2d13) (list-sort . r2d12) (symbol-hash . r2d11) (string-ci-hash . r2d10) (string-hash . r2d0f) (equal-hash . r2d0e) (hashtable-equivalence-function . r2d0d) (make-hashtable . r2d0c) (hashtable-hash-function . r2d0b) (make-eqv-hashtable . r2d0a) (make-eq-hashtable . r2d09) (hashtable? . r2d08) (hashtable-update! . r2d07) (hashtable-size . r2d06) (hashtable-set! . r2d05) (hashtable-ref . r2d04) (hashtable-mutable? . r2d03) (hashtable-keys . r2d02) (hashtable-entries . r2d01) (hashtable-delete! . r2d00) (hashtable-copy . r2cff) (hashtable-contains? . r2cfe) (hashtable-clear! . r2cfd) (call-with-output-file . r2cfc) (call-with-input-file . r2cfb) (write-char . r2cfa) (write . r2cf9) (with-output-to-file . r2cf8) (with-input-from-file . r2cf7) (read-char . r2cf6) (read . r2cf5) (peek-char . r2cf4) (open-output-file . r2cf3) (open-input-file . r2cf2) (newline . r2cf1) (display . r2cf0) (close-output-port . r2cef) (close-input-port . r2cee) (eof-object? . r2ced) (eof-object . r2cec) (current-error-port . r2ceb) (current-output-port . r2cea) (current-input-port . r2ce9) (output-port? . r2ce8) (input-port? . r2ce7) (utf-8-codec . r2ce6) (utf-16-codec . r2ce5) (transcoder-error-handling-mode . r2ce4) (transcoder-eol-style . r2ce3) (transcoder-codec . r2ce2) (transcoded-port . r2ce1) (textual-port? . r2ce0) (string->bytevector . r2cdf) (standard-output-port . r2cde) (standard-input-port . r2cdd) (standard-error-port . r2cdc) (set-port-position! . r2cdb) (put-u8 . r2cda) (put-string . r2cd9) (put-datum . r2cd8) (put-char . r2cd7) (put-bytevector . r2cd6) (port? . r2cd5) (port-transcoder . r2cd4) (port-position . r2cd3) (port-has-set-port-position!? . r2cd2) (port-has-port-position? . r2cd1) (port-eof? . r2cd0) (output-port-buffer-mode . r2ccf) (open-string-output-port . r2cce) (open-string-input-port . r2ccd) (open-file-output-port . r2ccc) (open-file-input/output-port . r2ccb) (open-file-input-port . r2cca) (open-bytevector-output-port . r2cc9) (open-bytevector-input-port . r2cc8) (native-transcoder . r2cc7) (native-eol-style . r2cc6) (make-transcoder . r2cc5) (latin-1-codec . r2cc4) (make-i/o-write-error . r2cc3) (make-i/o-read-error . r2cc2) (make-i/o-port-error . r2cc1) (make-i/o-invalid-position-error . r2cc0) (make-i/o-filename-error . r2cbf) (make-i/o-file-protection-error . r2cbe) (make-i/o-file-is-read-only-error . r2cbd) (make-i/o-file-does-not-exist-error . r2cbc) (make-i/o-file-already-exists-error . r2cbb) (make-i/o-error . r2cba) (make-i/o-encoding-error . r2cb9) (make-i/o-decoding-error . r2cb8) (make-custom-textual-output-port . r2cb7) (make-custom-textual-input/output-port . r2cb6) (make-custom-textual-input-port . r2cb5) (make-custom-binary-output-port . r2cb4) (make-custom-binary-input/output-port . r2cb3) (make-custom-binary-input-port . r2cb2) (make-bytevector . r2cb1) (lookahead-u8 . r2cb0) (lookahead-char . r2caf) (i/o-write-error? . r2cae) (i/o-read-error? . r2cad) (i/o-port-error? . r2cac) (i/o-invalid-position-error? . r2cab) (i/o-filename-error? . r2caa) (i/o-file-protection-error? . r2ca9) (i/o-file-is-read-only-error? . r2ca8) (i/o-file-does-not-exist-error? . r2ca7) (i/o-file-already-exists-error? . r2ca6) (i/o-error? . r2ca5) (i/o-error-position . r2ca4) (i/o-error-port . r2ca3) (i/o-error-filename . r2ca2) (i/o-encoding-error? . r2ca1) (i/o-encoding-error-char . r2ca0) (i/o-decoding-error? . r2c9f) (get-u8 . r2c9e) (get-string-n! . r2c9d) (get-string-n . r2c9c) (get-string-all . r2c9b) (get-line . r2c9a) (get-datum . r2c99) (get-char . r2c98) (get-bytevector-some . r2c97) (get-bytevector-n! . r2c96) (get-bytevector-n . r2c95) (get-bytevector-all . r2c94) (flush-output-port . r2c93) (close-port . r2c92) (exit . r2c8a) (command-line . r291c) (string-fill! . r2c89) (string-set! . r2c88) (set-cdr! . r2c87) (set-car! . r2c86) (remove . r2c85) (remv . r2c84) (remp . r2c83) (remq . r2c82) (partition . r2c81) (memv . r2c80) (memq . r2c7f) (memp . r2c7e) (member . r2c7d) (exists . r2c7c) (for-all . r2c7b) (fold-right . r2c7a) (fold-left . r2c79) (find . r2c78) (filter . r2c77) (cons* . r2c76) (assv . r2c75) (assq . r2c74) (assp . r2c73) (assoc . r2c72) (call-with-string-output-port . r2c71) (call-with-port . r2c70) (call-with-bytevector-output-port . r2c6f) (bytevector->string . r2c6e) (buffer-mode? . r2c6d) (binary-port? . r2c6c) (with-exception-handler . r2c6b) (raise-continuable . r2c6a) (raise . r2c69) (eval . re43) (environment . re3b) (make-enumeration . r2c68) (enum-set=? . r2c67) (enum-set-universe . r2c66) (enum-set-union . r2c65) (enum-set-subset? . r2c64) (enum-set-projection . r2c63) (enum-set-member? . r2c62) (enum-set-intersection . r2c61) (enum-set-indexer . r2c60) (enum-set-difference . r2c5f) (enum-set-constructor . r2c5e) (enum-set-complement . r2c5d) (enum-set->list . r2c5c) (who-condition? . r2c5b) (warning? . r2c5a) (violation? . r2c59) (undefined-violation? . r2c58) (syntax-violation? . r2c57) (syntax-violation-subform . r2c56) (syntax-violation-form . r2c55) (syntax-violation . re63) (simple-conditions . r2c54) (serious-condition? . r2c53) (non-continuable-violation? . r2c52) (message-condition? . r2c51) (make-who-condition . r2c50) (make-warning . r2c4f) (make-violation . r2c4e) (make-undefined-violation . r2c4d) (make-syntax-violation . r2c4c) (make-serious-condition . r2c4b) (make-non-continuable-violation . r2c4a) (make-message-condition . r2c49) (make-lexical-violation . r2c48) (make-irritants-condition . r2c47) (make-implementation-restriction-violation . r2c46) (make-error . r2c45) (make-assertion-violation . r2c44) (lexical-violation? . r2c43) (irritants-condition? . r2c42) (implementation-restriction-violation? . r2c41) (error? . r2c40) (condition-who . r2c3f) (condition-predicate . r2c3e) (condition-message . r2c3d) (condition-irritants . r2c3c) (condition-accessor . r2c3b) (condition . r2c3a) (assertion-violation? . r2c39) (condition? . r2c38) (utf32->string . r2c37) (utf16->string . r2c36) (utf8->string . r2c35) (uint-list->bytevector . r2c34) (u8-list->bytevector . r2c33) (string->utf8 . r2c32) (string->utf32 . r2c31) (string->utf16 . r2c30) (sint-list->bytevector . r2c2f) (native-endianness . r2c2e) (bytevector? . r2c2d) (bytevector=? . r2c2c) (bytevector-uint-set! . r2c2b) (bytevector-uint-ref . r2c2a) (bytevector-u8-set! . r2c29) (bytevector-u8-ref . r2c28) (bytevector-u64-set! . r2c27) (bytevector-u64-ref . r2c26) (bytevector-u64-native-set! . r2c25) (bytevector-u64-native-ref . r2c24) (bytevector-u32-set! . r2c23) (bytevector-u32-ref . r2c22) (bytevector-u32-native-set! . r2c21) (bytevector-u32-native-ref . r2c20) (bytevector-u16-set! . r2c1f) (bytevector-u16-ref . r2c1e) (bytevector-u16-native-set! . r2c1d) (bytevector-u16-native-ref . r2c1c) (bytevector-sint-set! . r2c1b) (bytevector-sint-ref . r2c1a) (bytevector-s8-set! . r2c19) (bytevector-s8-ref . r2c18) (bytevector-s64-set! . r2c17) (bytevector-s64-ref . r2c16) (bytevector-s64-native-set! . r2c15) (bytevector-s64-native-ref . r2c14) (bytevector-s32-set! . r2c13) (bytevector-s32-ref . r2c12) (bytevector-s32-native-set! . r2c11) (bytevector-s32-native-ref . r2c10) (bytevector-s16-set! . r2c0f) (bytevector-s16-ref . r2c0e) (bytevector-s16-native-set! . r2c0d) (bytevector-s16-native-ref . r2c0c) (bytevector-length . r2c0b) (bytevector-ieee-single-ref . r2c0a) (bytevector-ieee-single-set! . r2c09) (bytevector-ieee-single-native-set! . r2c08) (bytevector-ieee-single-native-ref . r2c07) (bytevector-ieee-double-set! . r2c06) (bytevector-ieee-double-ref . r2c05) (bytevector-ieee-double-native-set! . r2c04) (bytevector-ieee-double-native-ref . r2c03) (bytevector-fill! . r2c02) (bytevector-copy! . r2c01) (bytevector-copy . r2c00) (bytevector->uint-list . r2bff) (bytevector->u8-list . r2bfe) (bytevector->sint-list . r2bfd) (no-nans-violation? . r2bfc) (no-infinities-violation? . r2bfb) (make-no-nans-violation . r2bfa) (make-no-infinities-violation . r2bf9) (real->flonum . r2bf8) (flzero? . r2bf7) (fltruncate . r2bf6) (fltan . r2bf5) (flsqrt . r2bf4) (flsin . r2bf3) (flround . r2bf2) (flpositive? . r2bf1) (flonum? . r2bf0) (flodd? . r2bef) (flnumerator . r2bee) (flnegative? . r2bed) (flnan? . r2bec) (flmod0 . r2beb) (flmod . r2bea) (flmin . r2be9) (flmax . r2be8) (fllog . r2be7) (flinteger? . r2be6) (flinfinite? . r2be5) (flfloor . r2be4) (flfinite? . r2be3) (flexpt . r2be2) (flexp . r2be1) (fleven? . r2be0) (fldiv0-and-mod0 . r2bdf) (fldiv0 . r2bde) (fldiv-and-mod . r2bdd) (fldiv . r2bdc) (fldenominator . r2bdb) (flcos . r2bda) (flceiling . r2bd9) (flatan . r2bd8) (flasin . r2bd7) (flacos . r2bd6) (flabs . r2bd5) (fl>? . r2bd4) (fl>=? . r2bd3) (fl=? . r2bd2) (fl<? . r2bd1) (fl<=? . r2bd0) (fl/ . r2bcf) (fl- . r2bce) (fl+ . r2bcd) (fl* . r2bcc) (fixnum->flonum . r2bcb) (fxzero? . r2bca) (fxxor . r2bc9) (fxrotate-bit-field . r2bc8) (fxreverse-bit-field . r2bc7) (fxpositive? . r2bc6) (fxodd? . r2bc5) (fxnot . r2bc4) (fxnegative? . r2bc3) (fxmod0 . r2bc2) (fxmod . r2bc1) (fxmin . r2bc0) (fxmax . r2bbf) (fxlength . r2bbe) (fxior . r2bbd) (fxif . r2bbc) (fxfirst-bit-set . r2bbb) (fxeven? . r2bba) (fxdiv0-and-mod0 . r2bb9) (fxdiv0 . r2bb8) (fxdiv-and-mod . r2bb7) (fxdiv . r2bb6) (fxcopy-bit-field . r2bb5) (fxcopy-bit . r2bb4) (fxbit-set? . r2bb3) (fxbit-field . r2bb2) (fxbit-count . r2bb1) (fxarithmetic-shift-right . r2bb0) (fxarithmetic-shift-left . r2baf) (fxarithmetic-shift . r2bae) (fxand . r2bad) (fx>? . r2bac) (fx>=? . r2bab) (fx=? . r2baa) (fx<? . r2ba9) (fx<=? . r2ba8) (fx-/carry . r2ba7) (fx- . r2ba6) (fx+/carry . r2ba5) (fx+ . r2ba4) (fx*/carry . r2ba3) (fx* . r2ba2) (greatest-fixnum . r2ba1) (least-fixnum . r2ba0) (fixnum-width . r2b9f) (fixnum? . r2b9e) (bitwise-rotate-bit-field . r2b9d) (bitwise-reverse-bit-field . r2b9c) (bitwise-length . r2b9b) (bitwise-if . r2b9a) (bitwise-first-bit-set . r2b99) (bitwise-copy-bit-field . r2b98) (bitwise-copy-bit . r2b97) (bitwise-bit-set? . r2b96) (bitwise-bit-field . r2b95) (bitwise-bit-count . r2b94) (bitwise-xor . r2b93) (bitwise-ior . r2b92) (bitwise-and . r2b91) (bitwise-not . r2b90) (bitwise-arithmetic-shift-right . r2b8f) (bitwise-arithmetic-shift-left . r2b8e) (bitwise-arithmetic-shift . r2b8d) (zero? . r2b8c) (vector? . r2b8b) (vector-set! . r2b8a) (vector-ref . r2b89) (vector-map . r2b88) (vector-length . r2b87) (vector-for-each . r2b86) (vector-fill! . r2b85) (vector->list . r2b84) (vector . r2b83) (values . r2b82) (truncate . r2b81) (tan . r2b80) (symbol? . r2b7f) (symbol=? . r2b7e) (symbol->string . r2b7d) (substring . r2b7c) (string? . r2b7b) (string>? . r2b7a) (string>=? . r2b79) (string=? . r2b78) (string<? . r2b77) (string<=? . r2b76) (string-ref . r2b75) (string-length . r2b74) (string-for-each . r2b73) (string-copy . r2b72) (string-append . r2b71) (string->symbol . r2b70) (string->number . r2b6f) (string->list . r2b6e) (string . r2b6d) (sqrt . r2b6c) (sin . r2b6b) (round . r2b6a) (reverse . r2b69) (real? . r2b68) (real-valued? . r2b67) (real-part . r2b66) (rationalize . r2b65) (rational? . r2b64) (rational-valued? . r2b63) (procedure? . r2b62) (positive? . r2b61) (pair? . r2b60) (odd? . r2b5f) (numerator . r2b5e) (number? . r2b5d) (number->string . r2b5c) (null? . r2b5b) (not . r2b5a) (negative? . r2b59) (nan? . r2b58) (min . r2b57) (max . r2b56) (map . r2b55) (make-vector . r2b54) (make-string . r2b53) (make-rectangular . r2b52) (make-polar . r2b51) (magnitude . r2b50) (log . r2b4f) (list? . r2b4e) (list-tail . r2b4d) (list-ref . r2b4c) (list->vector . r2b4b) (list->string . r2b4a) (list . r2b49) (length . r2b48) (lcm . r2b47) (integer? . r2b46) (integer-valued? . r2b45) (integer->char . r2b44) (infinite? . r2b43) (inexact? . r2b42) (inexact . r2b41) (imag-part . r2b40) (gcd . r2b3f) (for-each . r2b3e) (floor . r2b3d) (finite? . r2b3c) (expt . r2b3b) (exp . r2b3a) (exact? . r2b39) (exact-integer-sqrt . r2b38) (exact . r2b37) (even? . r2b36) (error . r2b35) (eqv? . r2b34) (equal? . r2b33) (eq? . r2b32) (dynamic-wind . r2b31) (div0-and-mod0 . r2b30) (mod0 . r2b2f) (div0 . r2b2e) (div-and-mod . r2b2d) (mod . r2b2c) (div . r2b2b) (denominator . r2b2a) (cos . r2b29) (cons . r2b28) (complex? . r2b27) (char? . r2b26) (char>? . r2b25) (char>=? . r2b24) (char=? . r2b23) (char<? . r2b22) (char<=? . r2b21) (char->integer . r2b20) (ceiling . r2b1f) (call-with-values . r2b1e) (call/cc . r2b1d) (call-with-current-continuation . r2b1c) (cddddr . r2b1b) (cdddar . r2b1a) (cddadr . r2b19) (cddaar . r2b18) (cdaddr . r2b17) (cdadar . r2b16) (cdaadr . r2b15) (cdaaar . r2b14) (cadddr . r2b13) (caddar . r2b12) (cadadr . r2b11) (cadaar . r2b10) (caaddr . r2b0f) (caadar . r2b0e) (caaadr . r2b0d) (caaaar . r2b0c) (cdddr . r2b0b) (cddar . r2b0a) (cdadr . r2b09) (cdaar . r2b08) (caddr . r2b07) (cadar . r2b06) (caadr . r2b05) (caaar . r2b04) (cddr . r2b03) (cdar . r2b02) (cadr . r2b01) (caar . r2b00) (cdr . r2aff) (car . r2afe) (boolean? . r2afd) (boolean=? . r2afc) (atan . r2afb) (assertion-violation . r2afa) (asin . r2af9) (apply . r2af8) (append . r2af7) (angle . r2af6) (acos . r2af5) (abs . r2af4) (/ . r2af3) (* . r2af2) (- . r2af1) (+ . r2af0) (>= . r2aef) (> . r2aee) (= . r2aed) (<= . r2aec) (< . r2aeb) (library . r2aea) (&no-nans . r2ae9) (&no-infinities . r2ae8) (&i/o-encoding . r2ae7) (&i/o-decoding . r2ae6) (&i/o-port . r2ae5) (&i/o-file-does-not-exist . r2ae4) (&i/o-file-already-exists . r2ae3) (&i/o-file-is-read-only . r2ae2) (&i/o-file-protection . r2ae1) (&i/o-filename . r2ae0) (&i/o-invalid-position . r2adf) (&i/o-write . r2ade) (&i/o-read . r2add) (&i/o . r2adc) (&undefined . r2adb) (&syntax . r2ada) (&lexical . r2ad9) (&implementation-restriction . r2ad8) (&non-continuable . r2ad7) (&who . r2ad6) (&irritants . r2ad5) (&assertion . r2ad4) (&violation . r2ad3) (&error . r2ad2) (&serious . r2ad1) (&warning . r2ad0) (&message . r2acf) (&condition . r2ace) (define-condition-type . r2acd) (define-enumeration . r2acc) (define-record-type . r2acb) (parent-rtd . r2aca) (nongenerative . r2ac9) (opaque . r2ac8) (sealed . r2ac7) (protocol . r2ac6) (parent . r2ac5) (immutable . r2ac4) (mutable . r2ac3) (fields . r2ac2) (error-handling-mode . r2ac1) (file-options . r2ac0) (buffer-mode . r2abf) (eol-style . r2abe) (guard . r2abd) (unsyntax-splicing . r2aba) (unsyntax . r2ab9) (unquote-splicing . r2ab8) (unquote . r2ab7) (_ . r2ab6) (else . r2ab5) (=> . r2ab4) (... . r2ab3) (assert . r2ab2) (endianness . r2ab1) (time . r2aaf) (do . r2aae) (cond . r2aad) (let* . r2aac) (let*-values . r2aab) (let-values . r2aaa) (identifier-syntax . r2aa9) (with-syntax . r2aa8) (quasisyntax . r2aa7) (quasiquote . r2aa6) (syntax-rules . r2aa5) (include . r2aa4) (record-constructor-descriptor . r2aa2) (record-type-descriptor . r2aa1) (case . r2aa0) (unless . r2a9e) (when . r2a9d) (or . r2a9c) (and . r2a9b) (if . r2a9a) (let . r2a99) (letrec* . r2a98) (letrec . r2a97) (case-lambda . r2a95) (lambda . r2a94) (syntax . r2a93) (syntax-case . r2a92) (quote . r2a91) (letrec-syntax . r2a8f) (let-syntax . r2a8e) (set! . r2a8d) (import . r2a8c) (begin . r2a8b) (define-syntax . r2a89) (define . r2a88)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e35 '(psyntax null-environment-5) '() '() '() '() '((make-promise . r2c8b) (unquote-splicing . r2ab8) (unquote . r2ab7) (_ . r2ab6) (else . r2ab5) (=> . r2ab4) (... . r2ab3) (delay . r2ab0) (do . r2aae) (cond . r2aad) (let* . r2aac) (quasiquote . r2aa6) (syntax-rules . r2aa5) (case . r2aa0) (or . r2a9c) (and . r2a9b) (if . r2a9a) (let . r2a99) (letrec . r2a97) (lambda . r2a94) (quote . r2a91) (letrec-syntax . r2a8f) (let-syntax . r2a8e) (set! . r2a8d) (begin . r2a8b) (define-syntax . r2a89) (define . r2a88)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e36 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . r2d3c) (string-ci>=? . r2d3b) (string-ci=? . r2d3a) (string-ci<? . r2d39) (string-ci<=? . r2d38) (char-whitespace? . r2d37) (char-upper-case? . r2d36) (char-numeric? . r2d34) (char-lower-case? . r2d33) (char-upcase . r2d31) (char-downcase . r2d2e) (char-ci>? . r2d2d) (char-ci>=? . r2d2c) (char-ci=? . r2d2b) (char-ci<? . r2d2a) (char-ci<=? . r2d29) (char-alphabetic? . r2d28) (call-with-output-file . r2cfc) (call-with-input-file . r2cfb) (write-char . r2cfa) (write . r2cf9) (with-output-to-file . r2cf8) (with-input-from-file . r2cf7) (read-char . r2cf6) (read . r2cf5) (peek-char . r2cf4) (open-output-file . r2cf3) (open-input-file . r2cf2) (newline . r2cf1) (display . r2cf0) (close-output-port . r2cef) (close-input-port . r2cee) (eof-object . r2cec) (current-output-port . r2cea) (current-input-port . r2ce9) (output-port? . r2ce8) (input-port? . r2ce7) (scheme-report-environment . re3f) (quotient . r2c91) (null-environment . re3d) (remainder . r2c90) (modulo . r2c8f) (inexact->exact . r2c8e) (force . r2c8d) (exact->inexact . r2c8c) (make-promise . r2c8b) (string-fill! . r2c89) (string-set! . r2c88) (set-cdr! . r2c87) (set-car! . r2c86) (memv . r2c80) (memq . r2c7f) (member . r2c7d) (assv . r2c75) (assq . r2c74) (assoc . r2c72) (eval . re43) (zero? . r2b8c) (vector? . r2b8b) (vector-set! . r2b8a) (vector-ref . r2b89) (vector-length . r2b87) (vector-fill! . r2b85) (vector->list . r2b84) (vector . r2b83) (values . r2b82) (truncate . r2b81) (tan . r2b80) (symbol? . r2b7f) (symbol->string . r2b7d) (substring . r2b7c) (string? . r2b7b) (string>? . r2b7a) (string>=? . r2b79) (string=? . r2b78) (string<? . r2b77) (string<=? . r2b76) (string-ref . r2b75) (string-length . r2b74) (string-copy . r2b72) (string-append . r2b71) (string->symbol . r2b70) (string->number . r2b6f) (string->list . r2b6e) (string . r2b6d) (sqrt . r2b6c) (sin . r2b6b) (round . r2b6a) (reverse . r2b69) (real? . r2b68) (real-part . r2b66) (rationalize . r2b65) (rational? . r2b64) (procedure? . r2b62) (positive? . r2b61) (pair? . r2b60) (odd? . r2b5f) (numerator . r2b5e) (number? . r2b5d) (number->string . r2b5c) (not . r2b5a) (negative? . r2b59) (min . r2b57) (max . r2b56) (map . r2b55) (make-vector . r2b54) (make-string . r2b53) (make-rectangular . r2b52) (make-polar . r2b51) (magnitude . r2b50) (log . r2b4f) (list? . r2b4e) (list-tail . r2b4d) (list-ref . r2b4c) (list->vector . r2b4b) (list->string . r2b4a) (list . r2b49) (length . r2b48) (lcm . r2b47) (integer? . r2b46) (integer->char . r2b44) (inexact? . r2b42) (imag-part . r2b40) (gcd . r2b3f) (for-each . r2b3e) (floor . r2b3d) (expt . r2b3b) (exp . r2b3a) (exact? . r2b39) (even? . r2b36) (eqv? . r2b34) (equal? . r2b33) (eq? . r2b32) (dynamic-wind . r2b31) (denominator . r2b2a) (cos . r2b29) (cons . r2b28) (complex? . r2b27) (char? . r2b26) (char>? . r2b25) (char>=? . r2b24) (char=? . r2b23) (char<? . r2b22) (char<=? . r2b21) (char->integer . r2b20) (ceiling . r2b1f) (call-with-values . r2b1e) (call-with-current-continuation . r2b1c) (cddddr . r2b1b) (cdddar . r2b1a) (cddadr . r2b19) (cddaar . r2b18) (cdaddr . r2b17) (cdadar . r2b16) (cdaadr . r2b15) (cdaaar . r2b14) (cadddr . r2b13) (caddar . r2b12) (cadadr . r2b11) (cadaar . r2b10) (caaddr . r2b0f) (caadar . r2b0e) (caaadr . r2b0d) (caaaar . r2b0c) (cdddr . r2b0b) (cddar . r2b0a) (cdadr . r2b09) (cdaar . r2b08) (caddr . r2b07) (cadar . r2b06) (caadr . r2b05) (caaar . r2b04) (cddr . r2b03) (cdar . r2b02) (cadr . r2b01) (caar . r2b00) (cdr . r2aff) (car . r2afe) (boolean? . r2afd) (atan . r2afb) (asin . r2af9) (apply . r2af8) (append . r2af7) (angle . r2af6) (acos . r2af5) (abs . r2af4) (/ . r2af3) (* . r2af2) (- . r2af1) (+ . r2af0) (>= . r2aef) (> . r2aee) (= . r2aed) (<= . r2aec) (< . r2aeb) (unquote-splicing . r2ab8) (unquote . r2ab7) (else . r2ab5) (=> . r2ab4) (... . r2ab3) (delay . r2ab0) (do . r2aae) (cond . r2aad) (let* . r2aac) (quasiquote . r2aa6) (syntax-rules . r2aa5) (case . r2aa0) (or . r2a9c) (and . r2a9b) (if . r2a9a) (let . r2a99) (letrec . r2a97) (lambda . r2a94) (quote . r2a91) (letrec-syntax . r2a8f) (let-syntax . r2a8e) (set! . r2a8d) (begin . r2a8b) (define-syntax . r2a89) (define . r2a88)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e37 '(psyntax modules) '() '() '() '() '((module . r2a8a)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e38 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e39 '(rnrs) '(6) '() '() '() '((regexp? . r2df4) (string-upcase . r2d44) (string-titlecase . r2d43) (string-normalize-nfkd . r2d42) (string-normalize-nfkc . r2d41) (string-normalize-nfd . r2d40) (string-normalize-nfc . r2d3f) (string-foldcase . r2d3e) (string-downcase . r2d3d) (string-ci>? . r2d3c) (string-ci>=? . r2d3b) (string-ci=? . r2d3a) (string-ci<? . r2d39) (string-ci<=? . r2d38) (char-whitespace? . r2d37) (char-upper-case? . r2d36) (char-title-case? . r2d35) (char-numeric? . r2d34) (char-lower-case? . r2d33) (char-general-category . r2d32) (char-upcase . r2d31) (char-titlecase . r2d30) (char-foldcase . r2d2f) (char-downcase . r2d2e) (char-ci>? . r2d2d) (char-ci>=? . r2d2c) (char-ci=? . r2d2b) (char-ci<? . r2d2a) (char-ci<=? . r2d29) (char-alphabetic? . r2d28) (make-variable-transformer . rbae) (identifier? . re65) (generate-temporaries . re51) (free-identifier=? . re53) (syntax->datum . re69) (datum->syntax . re67) (bound-identifier=? . re55) (record-type-descriptor? . r2d27) (record-predicate . r2d26) (record-mutator . r2d25) (record-constructor . r2d24) (record-accessor . r2d23) (make-record-type-descriptor . r2d22) (make-record-constructor-descriptor . r2d21) (record? . r2d20) (record-type-uid . r2d1f) (record-type-sealed? . r2d1e) (record-type-parent . r2d1d) (record-type-opaque? . r2d1c) (record-type-name . r2d1b) (record-type-generative? . r2d1a) (record-type-field-names . r2d19) (record-rtd . r2d18) (record-field-mutable? . r2d17) (delete-file . r2d16) (file-exists? . r2d15) (vector-sort! . r2d14) (vector-sort . r2d13) (list-sort . r2d12) (symbol-hash . r2d11) (string-ci-hash . r2d10) (string-hash . r2d0f) (equal-hash . r2d0e) (hashtable-equivalence-function . r2d0d) (make-hashtable . r2d0c) (hashtable-hash-function . r2d0b) (make-eqv-hashtable . r2d0a) (make-eq-hashtable . r2d09) (hashtable? . r2d08) (hashtable-update! . r2d07) (hashtable-size . r2d06) (hashtable-set! . r2d05) (hashtable-ref . r2d04) (hashtable-mutable? . r2d03) (hashtable-keys . r2d02) (hashtable-entries . r2d01) (hashtable-delete! . r2d00) (hashtable-copy . r2cff) (hashtable-contains? . r2cfe) (hashtable-clear! . r2cfd) (call-with-output-file . r2cfc) (call-with-input-file . r2cfb) (write-char . r2cfa) (write . r2cf9) (with-output-to-file . r2cf8) (with-input-from-file . r2cf7) (read-char . r2cf6) (read . r2cf5) (peek-char . r2cf4) (open-output-file . r2cf3) (open-input-file . r2cf2) (newline . r2cf1) (display . r2cf0) (close-output-port . r2cef) (close-input-port . r2cee) (eof-object? . r2ced) (eof-object . r2cec) (current-error-port . r2ceb) (current-output-port . r2cea) (current-input-port . r2ce9) (output-port? . r2ce8) (input-port? . r2ce7) (utf-8-codec . r2ce6) (utf-16-codec . r2ce5) (transcoder-error-handling-mode . r2ce4) (transcoder-eol-style . r2ce3) (transcoder-codec . r2ce2) (transcoded-port . r2ce1) (textual-port? . r2ce0) (string->bytevector . r2cdf) (standard-output-port . r2cde) (standard-input-port . r2cdd) (standard-error-port . r2cdc) (set-port-position! . r2cdb) (put-u8 . r2cda) (put-string . r2cd9) (put-datum . r2cd8) (put-char . r2cd7) (put-bytevector . r2cd6) (port? . r2cd5) (port-transcoder . r2cd4) (port-position . r2cd3) (port-has-set-port-position!? . r2cd2) (port-has-port-position? . r2cd1) (port-eof? . r2cd0) (output-port-buffer-mode . r2ccf) (open-string-output-port . r2cce) (open-string-input-port . r2ccd) (open-file-output-port . r2ccc) (open-file-input/output-port . r2ccb) (open-file-input-port . r2cca) (open-bytevector-output-port . r2cc9) (open-bytevector-input-port . r2cc8) (native-transcoder . r2cc7) (native-eol-style . r2cc6) (make-transcoder . r2cc5) (latin-1-codec . r2cc4) (make-i/o-write-error . r2cc3) (make-i/o-read-error . r2cc2) (make-i/o-port-error . r2cc1) (make-i/o-invalid-position-error . r2cc0) (make-i/o-filename-error . r2cbf) (make-i/o-file-protection-error . r2cbe) (make-i/o-file-is-read-only-error . r2cbd) (make-i/o-file-does-not-exist-error . r2cbc) (make-i/o-file-already-exists-error . r2cbb) (make-i/o-error . r2cba) (make-i/o-encoding-error . r2cb9) (make-i/o-decoding-error . r2cb8) (make-custom-textual-output-port . r2cb7) (make-custom-textual-input/output-port . r2cb6) (make-custom-textual-input-port . r2cb5) (make-custom-binary-output-port . r2cb4) (make-custom-binary-input/output-port . r2cb3) (make-custom-binary-input-port . r2cb2) (make-bytevector . r2cb1) (lookahead-u8 . r2cb0) (lookahead-char . r2caf) (i/o-write-error? . r2cae) (i/o-read-error? . r2cad) (i/o-port-error? . r2cac) (i/o-invalid-position-error? . r2cab) (i/o-filename-error? . r2caa) (i/o-file-protection-error? . r2ca9) (i/o-file-is-read-only-error? . r2ca8) (i/o-file-does-not-exist-error? . r2ca7) (i/o-file-already-exists-error? . r2ca6) (i/o-error? . r2ca5) (i/o-error-position . r2ca4) (i/o-error-port . r2ca3) (i/o-error-filename . r2ca2) (i/o-encoding-error? . r2ca1) (i/o-encoding-error-char . r2ca0) (i/o-decoding-error? . r2c9f) (get-u8 . r2c9e) (get-string-n! . r2c9d) (get-string-n . r2c9c) (get-string-all . r2c9b) (get-line . r2c9a) (get-datum . r2c99) (get-char . r2c98) (get-bytevector-some . r2c97) (get-bytevector-n! . r2c96) (get-bytevector-n . r2c95) (get-bytevector-all . r2c94) (flush-output-port . r2c93) (close-port . r2c92) (exit . r2c8a) (command-line . r291c) (remove . r2c85) (remv . r2c84) (remp . r2c83) (remq . r2c82) (partition . r2c81) (memv . r2c80) (memq . r2c7f) (memp . r2c7e) (member . r2c7d) (exists . r2c7c) (for-all . r2c7b) (fold-right . r2c7a) (fold-left . r2c79) (find . r2c78) (filter . r2c77) (cons* . r2c76) (assv . r2c75) (assq . r2c74) (assp . r2c73) (assoc . r2c72) (call-with-string-output-port . r2c71) (call-with-port . r2c70) (call-with-bytevector-output-port . r2c6f) (bytevector->string . r2c6e) (buffer-mode? . r2c6d) (binary-port? . r2c6c) (with-exception-handler . r2c6b) (raise-continuable . r2c6a) (raise . r2c69) (make-enumeration . r2c68) (enum-set=? . r2c67) (enum-set-universe . r2c66) (enum-set-union . r2c65) (enum-set-subset? . r2c64) (enum-set-projection . r2c63) (enum-set-member? . r2c62) (enum-set-intersection . r2c61) (enum-set-indexer . r2c60) (enum-set-difference . r2c5f) (enum-set-constructor . r2c5e) (enum-set-complement . r2c5d) (enum-set->list . r2c5c) (who-condition? . r2c5b) (warning? . r2c5a) (violation? . r2c59) (undefined-violation? . r2c58) (syntax-violation? . r2c57) (syntax-violation-subform . r2c56) (syntax-violation-form . r2c55) (syntax-violation . re63) (simple-conditions . r2c54) (serious-condition? . r2c53) (non-continuable-violation? . r2c52) (message-condition? . r2c51) (make-who-condition . r2c50) (make-warning . r2c4f) (make-violation . r2c4e) (make-undefined-violation . r2c4d) (make-syntax-violation . r2c4c) (make-serious-condition . r2c4b) (make-non-continuable-violation . r2c4a) (make-message-condition . r2c49) (make-lexical-violation . r2c48) (make-irritants-condition . r2c47) (make-implementation-restriction-violation . r2c46) (make-error . r2c45) (make-assertion-violation . r2c44) (lexical-violation? . r2c43) (irritants-condition? . r2c42) (implementation-restriction-violation? . r2c41) (error? . r2c40) (condition-who . r2c3f) (condition-predicate . r2c3e) (condition-message . r2c3d) (condition-irritants . r2c3c) (condition-accessor . r2c3b) (condition . r2c3a) (assertion-violation? . r2c39) (condition? . r2c38) (utf32->string . r2c37) (utf16->string . r2c36) (utf8->string . r2c35) (uint-list->bytevector . r2c34) (u8-list->bytevector . r2c33) (string->utf8 . r2c32) (string->utf32 . r2c31) (string->utf16 . r2c30) (sint-list->bytevector . r2c2f) (native-endianness . r2c2e) (bytevector? . r2c2d) (bytevector=? . r2c2c) (bytevector-uint-set! . r2c2b) (bytevector-uint-ref . r2c2a) (bytevector-u8-set! . r2c29) (bytevector-u8-ref . r2c28) (bytevector-u64-set! . r2c27) (bytevector-u64-ref . r2c26) (bytevector-u64-native-set! . r2c25) (bytevector-u64-native-ref . r2c24) (bytevector-u32-set! . r2c23) (bytevector-u32-ref . r2c22) (bytevector-u32-native-set! . r2c21) (bytevector-u32-native-ref . r2c20) (bytevector-u16-set! . r2c1f) (bytevector-u16-ref . r2c1e) (bytevector-u16-native-set! . r2c1d) (bytevector-u16-native-ref . r2c1c) (bytevector-sint-set! . r2c1b) (bytevector-sint-ref . r2c1a) (bytevector-s8-set! . r2c19) (bytevector-s8-ref . r2c18) (bytevector-s64-set! . r2c17) (bytevector-s64-ref . r2c16) (bytevector-s64-native-set! . r2c15) (bytevector-s64-native-ref . r2c14) (bytevector-s32-set! . r2c13) (bytevector-s32-ref . r2c12) (bytevector-s32-native-set! . r2c11) (bytevector-s32-native-ref . r2c10) (bytevector-s16-set! . r2c0f) (bytevector-s16-ref . r2c0e) (bytevector-s16-native-set! . r2c0d) (bytevector-s16-native-ref . r2c0c) (bytevector-length . r2c0b) (bytevector-ieee-single-ref . r2c0a) (bytevector-ieee-single-set! . r2c09) (bytevector-ieee-single-native-set! . r2c08) (bytevector-ieee-single-native-ref . r2c07) (bytevector-ieee-double-set! . r2c06) (bytevector-ieee-double-ref . r2c05) (bytevector-ieee-double-native-set! . r2c04) (bytevector-ieee-double-native-ref . r2c03) (bytevector-fill! . r2c02) (bytevector-copy! . r2c01) (bytevector-copy . r2c00) (bytevector->uint-list . r2bff) (bytevector->u8-list . r2bfe) (bytevector->sint-list . r2bfd) (no-nans-violation? . r2bfc) (no-infinities-violation? . r2bfb) (make-no-nans-violation . r2bfa) (make-no-infinities-violation . r2bf9) (real->flonum . r2bf8) (flzero? . r2bf7) (fltruncate . r2bf6) (fltan . r2bf5) (flsqrt . r2bf4) (flsin . r2bf3) (flround . r2bf2) (flpositive? . r2bf1) (flonum? . r2bf0) (flodd? . r2bef) (flnumerator . r2bee) (flnegative? . r2bed) (flnan? . r2bec) (flmod0 . r2beb) (flmod . r2bea) (flmin . r2be9) (flmax . r2be8) (fllog . r2be7) (flinteger? . r2be6) (flinfinite? . r2be5) (flfloor . r2be4) (flfinite? . r2be3) (flexpt . r2be2) (flexp . r2be1) (fleven? . r2be0) (fldiv0-and-mod0 . r2bdf) (fldiv0 . r2bde) (fldiv-and-mod . r2bdd) (fldiv . r2bdc) (fldenominator . r2bdb) (flcos . r2bda) (flceiling . r2bd9) (flatan . r2bd8) (flasin . r2bd7) (flacos . r2bd6) (flabs . r2bd5) (fl>? . r2bd4) (fl>=? . r2bd3) (fl=? . r2bd2) (fl<? . r2bd1) (fl<=? . r2bd0) (fl/ . r2bcf) (fl- . r2bce) (fl+ . r2bcd) (fl* . r2bcc) (fixnum->flonum . r2bcb) (fxzero? . r2bca) (fxxor . r2bc9) (fxrotate-bit-field . r2bc8) (fxreverse-bit-field . r2bc7) (fxpositive? . r2bc6) (fxodd? . r2bc5) (fxnot . r2bc4) (fxnegative? . r2bc3) (fxmod0 . r2bc2) (fxmod . r2bc1) (fxmin . r2bc0) (fxmax . r2bbf) (fxlength . r2bbe) (fxior . r2bbd) (fxif . r2bbc) (fxfirst-bit-set . r2bbb) (fxeven? . r2bba) (fxdiv0-and-mod0 . r2bb9) (fxdiv0 . r2bb8) (fxdiv-and-mod . r2bb7) (fxdiv . r2bb6) (fxcopy-bit-field . r2bb5) (fxcopy-bit . r2bb4) (fxbit-set? . r2bb3) (fxbit-field . r2bb2) (fxbit-count . r2bb1) (fxarithmetic-shift-right . r2bb0) (fxarithmetic-shift-left . r2baf) (fxarithmetic-shift . r2bae) (fxand . r2bad) (fx>? . r2bac) (fx>=? . r2bab) (fx=? . r2baa) (fx<? . r2ba9) (fx<=? . r2ba8) (fx-/carry . r2ba7) (fx- . r2ba6) (fx+/carry . r2ba5) (fx+ . r2ba4) (fx*/carry . r2ba3) (fx* . r2ba2) (greatest-fixnum . r2ba1) (least-fixnum . r2ba0) (fixnum-width . r2b9f) (fixnum? . r2b9e) (bitwise-rotate-bit-field . r2b9d) (bitwise-reverse-bit-field . r2b9c) (bitwise-length . r2b9b) (bitwise-if . r2b9a) (bitwise-first-bit-set . r2b99) (bitwise-copy-bit-field . r2b98) (bitwise-copy-bit . r2b97) (bitwise-bit-set? . r2b96) (bitwise-bit-field . r2b95) (bitwise-bit-count . r2b94) (bitwise-xor . r2b93) (bitwise-ior . r2b92) (bitwise-and . r2b91) (bitwise-not . r2b90) (bitwise-arithmetic-shift-right . r2b8f) (bitwise-arithmetic-shift-left . r2b8e) (bitwise-arithmetic-shift . r2b8d) (zero? . r2b8c) (vector? . r2b8b) (vector-set! . r2b8a) (vector-ref . r2b89) (vector-map . r2b88) (vector-length . r2b87) (vector-for-each . r2b86) (vector-fill! . r2b85) (vector->list . r2b84) (vector . r2b83) (values . r2b82) (truncate . r2b81) (tan . r2b80) (symbol? . r2b7f) (symbol=? . r2b7e) (symbol->string . r2b7d) (substring . r2b7c) (string? . r2b7b) (string>? . r2b7a) (string>=? . r2b79) (string=? . r2b78) (string<? . r2b77) (string<=? . r2b76) (string-ref . r2b75) (string-length . r2b74) (string-for-each . r2b73) (string-copy . r2b72) (string-append . r2b71) (string->symbol . r2b70) (string->number . r2b6f) (string->list . r2b6e) (string . r2b6d) (sqrt . r2b6c) (sin . r2b6b) (round . r2b6a) (reverse . r2b69) (real? . r2b68) (real-valued? . r2b67) (real-part . r2b66) (rationalize . r2b65) (rational? . r2b64) (rational-valued? . r2b63) (procedure? . r2b62) (positive? . r2b61) (pair? . r2b60) (odd? . r2b5f) (numerator . r2b5e) (number? . r2b5d) (number->string . r2b5c) (null? . r2b5b) (not . r2b5a) (negative? . r2b59) (nan? . r2b58) (min . r2b57) (max . r2b56) (map . r2b55) (make-vector . r2b54) (make-string . r2b53) (make-rectangular . r2b52) (make-polar . r2b51) (magnitude . r2b50) (log . r2b4f) (list? . r2b4e) (list-tail . r2b4d) (list-ref . r2b4c) (list->vector . r2b4b) (list->string . r2b4a) (list . r2b49) (length . r2b48) (lcm . r2b47) (integer? . r2b46) (integer-valued? . r2b45) (integer->char . r2b44) (infinite? . r2b43) (inexact? . r2b42) (inexact . r2b41) (imag-part . r2b40) (gcd . r2b3f) (for-each . r2b3e) (floor . r2b3d) (finite? . r2b3c) (expt . r2b3b) (exp . r2b3a) (exact? . r2b39) (exact-integer-sqrt . r2b38) (exact . r2b37) (even? . r2b36) (error . r2b35) (eqv? . r2b34) (equal? . r2b33) (eq? . r2b32) (dynamic-wind . r2b31) (div0-and-mod0 . r2b30) (mod0 . r2b2f) (div0 . r2b2e) (div-and-mod . r2b2d) (mod . r2b2c) (div . r2b2b) (denominator . r2b2a) (cos . r2b29) (cons . r2b28) (complex? . r2b27) (char? . r2b26) (char>? . r2b25) (char>=? . r2b24) (char=? . r2b23) (char<? . r2b22) (char<=? . r2b21) (char->integer . r2b20) (ceiling . r2b1f) (call-with-values . r2b1e) (call/cc . r2b1d) (call-with-current-continuation . r2b1c) (cddddr . r2b1b) (cdddar . r2b1a) (cddadr . r2b19) (cddaar . r2b18) (cdaddr . r2b17) (cdadar . r2b16) (cdaadr . r2b15) (cdaaar . r2b14) (cadddr . r2b13) (caddar . r2b12) (cadadr . r2b11) (cadaar . r2b10) (caaddr . r2b0f) (caadar . r2b0e) (caaadr . r2b0d) (caaaar . r2b0c) (cdddr . r2b0b) (cddar . r2b0a) (cdadr . r2b09) (cdaar . r2b08) (caddr . r2b07) (cadar . r2b06) (caadr . r2b05) (caaar . r2b04) (cddr . r2b03) (cdar . r2b02) (cadr . r2b01) (caar . r2b00) (cdr . r2aff) (car . r2afe) (boolean? . r2afd) (boolean=? . r2afc) (atan . r2afb) (assertion-violation . r2afa) (asin . r2af9) (apply . r2af8) (append . r2af7) (angle . r2af6) (acos . r2af5) (abs . r2af4) (/ . r2af3) (* . r2af2) (- . r2af1) (+ . r2af0) (>= . r2aef) (> . r2aee) (= . r2aed) (<= . r2aec) (< . r2aeb) (&no-nans . r2ae9) (&no-infinities . r2ae8) (&i/o-encoding . r2ae7) (&i/o-decoding . r2ae6) (&i/o-port . r2ae5) (&i/o-file-does-not-exist . r2ae4) (&i/o-file-already-exists . r2ae3) (&i/o-file-is-read-only . r2ae2) (&i/o-file-protection . r2ae1) (&i/o-filename . r2ae0) (&i/o-invalid-position . r2adf) (&i/o-write . r2ade) (&i/o-read . r2add) (&i/o . r2adc) (&undefined . r2adb) (&syntax . r2ada) (&lexical . r2ad9) (&implementation-restriction . r2ad8) (&non-continuable . r2ad7) (&who . r2ad6) (&irritants . r2ad5) (&assertion . r2ad4) (&violation . r2ad3) (&error . r2ad2) (&serious . r2ad1) (&warning . r2ad0) (&message . r2acf) (&condition . r2ace) (define-condition-type . r2acd) (define-enumeration . r2acc) (define-record-type . r2acb) (parent-rtd . r2aca) (nongenerative . r2ac9) (opaque . r2ac8) (sealed . r2ac7) (protocol . r2ac6) (parent . r2ac5) (immutable . r2ac4) (mutable . r2ac3) (fields . r2ac2) (error-handling-mode . r2ac1) (file-options . r2ac0) (buffer-mode . r2abf) (eol-style . r2abe) (guard . r2abd) (unsyntax-splicing . r2aba) (unsyntax . r2ab9) (unquote-splicing . r2ab8) (unquote . r2ab7) (_ . r2ab6) (else . r2ab5) (=> . r2ab4) (... . r2ab3) (assert . r2ab2) (endianness . r2ab1) (do . r2aae) (cond . r2aad) (let* . r2aac) (let*-values . r2aab) (let-values . r2aaa) (identifier-syntax . r2aa9) (with-syntax . r2aa8) (quasisyntax . r2aa7) (quasiquote . r2aa6) (syntax-rules . r2aa5) (record-constructor-descriptor . r2aa2) (record-type-descriptor . r2aa1) (case . r2aa0) (unless . r2a9e) (when . r2a9d) (or . r2a9c) (and . r2a9b) (if . r2a9a) (let . r2a99) (letrec* . r2a98) (letrec . r2a97) (case-lambda . r2a95) (lambda . r2a94) (syntax . r2a93) (syntax-case . r2a92) (quote . r2a91) (letrec-syntax . r2a8f) (let-syntax . r2a8e) (set! . r2a8d) (begin . r2a8b) (define-syntax . r2a89) (define . r2a88)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e3a '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . re3f) (quotient . r2c91) (null-environment . re3d) (remainder . r2c90) (modulo . r2c8f) (inexact->exact . r2c8e) (force . r2c8d) (exact->inexact . r2c8c) (make-promise . r2c8b) (delay . r2ab0)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e3b '(rnrs control) '(6) '() '() '() '((do . r2aae) (unless . r2a9e) (when . r2a9d) (case-lambda . r2a95)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e3c '(rnrs eval) '(6) '() '() '() '((eval . re43) (environment . re3b)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e3d '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . r2c87) (set-car! . r2c86)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e3e '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . r2c89) (string-set! . r2c88)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e3f '(rnrs programs) '(6) '() '() '() '((exit . r2c8a) (command-line . r291c)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e40 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . rbae) (identifier? . re65) (generate-temporaries . re51) (free-identifier=? . re53) (syntax->datum . re69) (datum->syntax . re67) (bound-identifier=? . re55) (syntax-violation . re63) (unsyntax-splicing . r2aba) (unsyntax . r2ab9) (_ . r2ab6) (... . r2ab3) (with-syntax . r2aa8) (quasisyntax . r2aa7) (syntax . r2a93) (syntax-case . r2a92)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e41 '(rnrs files) '(6) '() '() '() '((delete-file . r2d16) (file-exists? . r2d15) (make-i/o-write-error . r2cc3) (make-i/o-read-error . r2cc2) (make-i/o-port-error . r2cc1) (make-i/o-invalid-position-error . r2cc0) (make-i/o-filename-error . r2cbf) (make-i/o-file-protection-error . r2cbe) (make-i/o-file-is-read-only-error . r2cbd) (make-i/o-file-does-not-exist-error . r2cbc) (make-i/o-file-already-exists-error . r2cbb) (make-i/o-error . r2cba) (i/o-write-error? . r2cae) (i/o-read-error? . r2cad) (i/o-port-error? . r2cac) (i/o-invalid-position-error? . r2cab) (i/o-filename-error? . r2caa) (i/o-file-protection-error? . r2ca9) (i/o-file-is-read-only-error? . r2ca8) (i/o-file-does-not-exist-error? . r2ca7) (i/o-file-already-exists-error? . r2ca6) (i/o-error? . r2ca5) (i/o-error-position . r2ca4) (i/o-error-port . r2ca3) (i/o-error-filename . r2ca2) (&i/o-port . r2ae5) (&i/o-file-does-not-exist . r2ae4) (&i/o-file-already-exists . r2ae3) (&i/o-file-is-read-only . r2ae2) (&i/o-file-protection . r2ae1) (&i/o-filename . r2ae0) (&i/o-invalid-position . r2adf) (&i/o-write . r2ade) (&i/o-read . r2add) (&i/o . r2adc)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e42 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . r2d14) (vector-sort . r2d13) (list-sort . r2d12)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e43 '(rnrs base) '(6) '() '() '() '((zero? . r2b8c) (vector? . r2b8b) (vector-set! . r2b8a) (vector-ref . r2b89) (vector-map . r2b88) (vector-length . r2b87) (vector-for-each . r2b86) (vector-fill! . r2b85) (vector->list . r2b84) (vector . r2b83) (values . r2b82) (truncate . r2b81) (tan . r2b80) (symbol? . r2b7f) (symbol=? . r2b7e) (symbol->string . r2b7d) (substring . r2b7c) (string? . r2b7b) (string>? . r2b7a) (string>=? . r2b79) (string=? . r2b78) (string<? . r2b77) (string<=? . r2b76) (string-ref . r2b75) (string-length . r2b74) (string-for-each . r2b73) (string-copy . r2b72) (string-append . r2b71) (string->symbol . r2b70) (string->number . r2b6f) (string->list . r2b6e) (string . r2b6d) (sqrt . r2b6c) (sin . r2b6b) (round . r2b6a) (reverse . r2b69) (real? . r2b68) (real-valued? . r2b67) (real-part . r2b66) (rationalize . r2b65) (rational? . r2b64) (rational-valued? . r2b63) (procedure? . r2b62) (positive? . r2b61) (pair? . r2b60) (odd? . r2b5f) (numerator . r2b5e) (number? . r2b5d) (number->string . r2b5c) (null? . r2b5b) (not . r2b5a) (negative? . r2b59) (nan? . r2b58) (min . r2b57) (max . r2b56) (map . r2b55) (make-vector . r2b54) (make-string . r2b53) (make-rectangular . r2b52) (make-polar . r2b51) (magnitude . r2b50) (log . r2b4f) (list? . r2b4e) (list-tail . r2b4d) (list-ref . r2b4c) (list->vector . r2b4b) (list->string . r2b4a) (list . r2b49) (length . r2b48) (lcm . r2b47) (integer? . r2b46) (integer-valued? . r2b45) (integer->char . r2b44) (infinite? . r2b43) (inexact? . r2b42) (inexact . r2b41) (imag-part . r2b40) (gcd . r2b3f) (for-each . r2b3e) (floor . r2b3d) (finite? . r2b3c) (expt . r2b3b) (exp . r2b3a) (exact? . r2b39) (exact-integer-sqrt . r2b38) (exact . r2b37) (even? . r2b36) (error . r2b35) (eqv? . r2b34) (equal? . r2b33) (eq? . r2b32) (dynamic-wind . r2b31) (div0-and-mod0 . r2b30) (mod0 . r2b2f) (div0 . r2b2e) (div-and-mod . r2b2d) (mod . r2b2c) (div . r2b2b) (denominator . r2b2a) (cos . r2b29) (cons . r2b28) (complex? . r2b27) (char? . r2b26) (char>? . r2b25) (char>=? . r2b24) (char=? . r2b23) (char<? . r2b22) (char<=? . r2b21) (char->integer . r2b20) (ceiling . r2b1f) (call-with-values . r2b1e) (call/cc . r2b1d) (call-with-current-continuation . r2b1c) (cddddr . r2b1b) (cdddar . r2b1a) (cddadr . r2b19) (cddaar . r2b18) (cdaddr . r2b17) (cdadar . r2b16) (cdaadr . r2b15) (cdaaar . r2b14) (cadddr . r2b13) (caddar . r2b12) (cadadr . r2b11) (cadaar . r2b10) (caaddr . r2b0f) (caadar . r2b0e) (caaadr . r2b0d) (caaaar . r2b0c) (cdddr . r2b0b) (cddar . r2b0a) (cdadr . r2b09) (cdaar . r2b08) (caddr . r2b07) (cadar . r2b06) (caadr . r2b05) (caaar . r2b04) (cddr . r2b03) (cdar . r2b02) (cadr . r2b01) (caar . r2b00) (cdr . r2aff) (car . r2afe) (boolean? . r2afd) (boolean=? . r2afc) (atan . r2afb) (assertion-violation . r2afa) (asin . r2af9) (apply . r2af8) (append . r2af7) (angle . r2af6) (acos . r2af5) (abs . r2af4) (/ . r2af3) (* . r2af2) (- . r2af1) (+ . r2af0) (>= . r2aef) (> . r2aee) (= . r2aed) (<= . r2aec) (< . r2aeb) (unquote-splicing . r2ab8) (unquote . r2ab7) (_ . r2ab6) (else . r2ab5) (=> . r2ab4) (... . r2ab3) (assert . r2ab2) (cond . r2aad) (let* . r2aac) (let*-values . r2aab) (let-values . r2aaa) (identifier-syntax . r2aa9) (quasiquote . r2aa6) (syntax-rules . r2aa5) (case . r2aa0) (or . r2a9c) (and . r2a9b) (if . r2a9a) (let . r2a99) (letrec* . r2a98) (letrec . r2a97) (lambda . r2a94) (quote . r2a91) (letrec-syntax . r2a8f) (let-syntax . r2a8e) (set! . r2a8d) (begin . r2a8b) (define-syntax . r2a89) (define . r2a88)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e44 '(rnrs lists) '(6) '() '() '() '((remove . r2c85) (remv . r2c84) (remp . r2c83) (remq . r2c82) (partition . r2c81) (memv . r2c80) (memq . r2c7f) (memp . r2c7e) (member . r2c7d) (exists . r2c7c) (for-all . r2c7b) (fold-right . r2c7a) (fold-left . r2c79) (find . r2c78) (filter . r2c77) (cons* . r2c76) (assv . r2c75) (assq . r2c74) (assp . r2c73) (assoc . r2c72)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e45 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . r2cfc) (call-with-input-file . r2cfb) (write-char . r2cfa) (write . r2cf9) (with-output-to-file . r2cf8) (with-input-from-file . r2cf7) (read-char . r2cf6) (read . r2cf5) (peek-char . r2cf4) (open-output-file . r2cf3) (open-input-file . r2cf2) (newline . r2cf1) (display . r2cf0) (close-output-port . r2cef) (close-input-port . r2cee) (eof-object? . r2ced) (eof-object . r2cec) (current-error-port . r2ceb) (current-output-port . r2cea) (current-input-port . r2ce9) (output-port? . r2ce8) (input-port? . r2ce7) (make-i/o-write-error . r2cc3) (make-i/o-read-error . r2cc2) (make-i/o-port-error . r2cc1) (make-i/o-invalid-position-error . r2cc0) (make-i/o-filename-error . r2cbf) (make-i/o-file-protection-error . r2cbe) (make-i/o-file-is-read-only-error . r2cbd) (make-i/o-file-does-not-exist-error . r2cbc) (make-i/o-file-already-exists-error . r2cbb) (make-i/o-error . r2cba) (i/o-write-error? . r2cae) (i/o-read-error? . r2cad) (i/o-port-error? . r2cac) (i/o-invalid-position-error? . r2cab) (i/o-filename-error? . r2caa) (i/o-file-protection-error? . r2ca9) (i/o-file-is-read-only-error? . r2ca8) (i/o-file-does-not-exist-error? . r2ca7) (i/o-file-already-exists-error? . r2ca6) (i/o-error? . r2ca5) (i/o-error-position . r2ca4) (i/o-error-port . r2ca3) (i/o-error-filename . r2ca2) (&i/o-port . r2ae5) (&i/o-file-does-not-exist . r2ae4) (&i/o-file-already-exists . r2ae3) (&i/o-file-is-read-only . r2ae2) (&i/o-file-protection . r2ae1) (&i/o-filename . r2ae0) (&i/o-invalid-position . r2adf) (&i/o-write . r2ade) (&i/o-read . r2add) (&i/o . r2adc)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e46 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . r2cb1) (utf32->string . r2c37) (utf16->string . r2c36) (utf8->string . r2c35) (uint-list->bytevector . r2c34) (u8-list->bytevector . r2c33) (string->utf8 . r2c32) (string->utf32 . r2c31) (string->utf16 . r2c30) (sint-list->bytevector . r2c2f) (native-endianness . r2c2e) (bytevector? . r2c2d) (bytevector=? . r2c2c) (bytevector-uint-set! . r2c2b) (bytevector-uint-ref . r2c2a) (bytevector-u8-set! . r2c29) (bytevector-u8-ref . r2c28) (bytevector-u64-set! . r2c27) (bytevector-u64-ref . r2c26) (bytevector-u64-native-set! . r2c25) (bytevector-u64-native-ref . r2c24) (bytevector-u32-set! . r2c23) (bytevector-u32-ref . r2c22) (bytevector-u32-native-set! . r2c21) (bytevector-u32-native-ref . r2c20) (bytevector-u16-set! . r2c1f) (bytevector-u16-ref . r2c1e) (bytevector-u16-native-set! . r2c1d) (bytevector-u16-native-ref . r2c1c) (bytevector-sint-set! . r2c1b) (bytevector-sint-ref . r2c1a) (bytevector-s8-set! . r2c19) (bytevector-s8-ref . r2c18) (bytevector-s64-set! . r2c17) (bytevector-s64-ref . r2c16) (bytevector-s64-native-set! . r2c15) (bytevector-s64-native-ref . r2c14) (bytevector-s32-set! . r2c13) (bytevector-s32-ref . r2c12) (bytevector-s32-native-set! . r2c11) (bytevector-s32-native-ref . r2c10) (bytevector-s16-set! . r2c0f) (bytevector-s16-ref . r2c0e) (bytevector-s16-native-set! . r2c0d) (bytevector-s16-native-ref . r2c0c) (bytevector-length . r2c0b) (bytevector-ieee-single-ref . r2c0a) (bytevector-ieee-single-set! . r2c09) (bytevector-ieee-single-native-set! . r2c08) (bytevector-ieee-single-native-ref . r2c07) (bytevector-ieee-double-set! . r2c06) (bytevector-ieee-double-ref . r2c05) (bytevector-ieee-double-native-set! . r2c04) (bytevector-ieee-double-native-ref . r2c03) (bytevector-fill! . r2c02) (bytevector-copy! . r2c01) (bytevector-copy . r2c00) (bytevector->uint-list . r2bff) (bytevector->u8-list . r2bfe) (bytevector->sint-list . r2bfd) (endianness . r2ab1)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e47 '(rnrs unicode) '(6) '() '() '() '((string-upcase . r2d44) (string-titlecase . r2d43) (string-normalize-nfkd . r2d42) (string-normalize-nfkc . r2d41) (string-normalize-nfd . r2d40) (string-normalize-nfc . r2d3f) (string-foldcase . r2d3e) (string-downcase . r2d3d) (string-ci>? . r2d3c) (string-ci>=? . r2d3b) (string-ci=? . r2d3a) (string-ci<? . r2d39) (string-ci<=? . r2d38) (char-whitespace? . r2d37) (char-upper-case? . r2d36) (char-title-case? . r2d35) (char-numeric? . r2d34) (char-lower-case? . r2d33) (char-general-category . r2d32) (char-upcase . r2d31) (char-titlecase . r2d30) (char-foldcase . r2d2f) (char-downcase . r2d2e) (char-ci>? . r2d2d) (char-ci>=? . r2d2c) (char-ci=? . r2d2b) (char-ci<? . r2d2a) (char-ci<=? . r2d29) (char-alphabetic? . r2d28)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e48 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . r2c6b) (raise-continuable . r2c6a) (raise . r2c69) (guard . r2abd) (else . r2ab5) (=> . r2ab4)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e49 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . r2b9d) (bitwise-reverse-bit-field . r2b9c) (bitwise-length . r2b9b) (bitwise-if . r2b9a) (bitwise-first-bit-set . r2b99) (bitwise-copy-bit-field . r2b98) (bitwise-copy-bit . r2b97) (bitwise-bit-set? . r2b96) (bitwise-bit-field . r2b95) (bitwise-bit-count . r2b94) (bitwise-xor . r2b93) (bitwise-ior . r2b92) (bitwise-and . r2b91) (bitwise-not . r2b90) (bitwise-arithmetic-shift-right . r2b8f) (bitwise-arithmetic-shift-left . r2b8e) (bitwise-arithmetic-shift . r2b8d)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e4a '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . r2bca) (fxxor . r2bc9) (fxrotate-bit-field . r2bc8) (fxreverse-bit-field . r2bc7) (fxpositive? . r2bc6) (fxodd? . r2bc5) (fxnot . r2bc4) (fxnegative? . r2bc3) (fxmod0 . r2bc2) (fxmod . r2bc1) (fxmin . r2bc0) (fxmax . r2bbf) (fxlength . r2bbe) (fxior . r2bbd) (fxif . r2bbc) (fxfirst-bit-set . r2bbb) (fxeven? . r2bba) (fxdiv0-and-mod0 . r2bb9) (fxdiv0 . r2bb8) (fxdiv-and-mod . r2bb7) (fxdiv . r2bb6) (fxcopy-bit-field . r2bb5) (fxcopy-bit . r2bb4) (fxbit-set? . r2bb3) (fxbit-field . r2bb2) (fxbit-count . r2bb1) (fxarithmetic-shift-right . r2bb0) (fxarithmetic-shift-left . r2baf) (fxarithmetic-shift . r2bae) (fxand . r2bad) (fx>? . r2bac) (fx>=? . r2bab) (fx=? . r2baa) (fx<? . r2ba9) (fx<=? . r2ba8) (fx-/carry . r2ba7) (fx- . r2ba6) (fx+/carry . r2ba5) (fx+ . r2ba4) (fx*/carry . r2ba3) (fx* . r2ba2) (greatest-fixnum . r2ba1) (least-fixnum . r2ba0) (fixnum-width . r2b9f) (fixnum? . r2b9e)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e4b '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . r2bfc) (no-infinities-violation? . r2bfb) (make-no-nans-violation . r2bfa) (make-no-infinities-violation . r2bf9) (real->flonum . r2bf8) (flzero? . r2bf7) (fltruncate . r2bf6) (fltan . r2bf5) (flsqrt . r2bf4) (flsin . r2bf3) (flround . r2bf2) (flpositive? . r2bf1) (flonum? . r2bf0) (flodd? . r2bef) (flnumerator . r2bee) (flnegative? . r2bed) (flnan? . r2bec) (flmod0 . r2beb) (flmod . r2bea) (flmin . r2be9) (flmax . r2be8) (fllog . r2be7) (flinteger? . r2be6) (flinfinite? . r2be5) (flfloor . r2be4) (flfinite? . r2be3) (flexpt . r2be2) (flexp . r2be1) (fleven? . r2be0) (fldiv0-and-mod0 . r2bdf) (fldiv0 . r2bde) (fldiv-and-mod . r2bdd) (fldiv . r2bdc) (fldenominator . r2bdb) (flcos . r2bda) (flceiling . r2bd9) (flatan . r2bd8) (flasin . r2bd7) (flacos . r2bd6) (flabs . r2bd5) (fl>? . r2bd4) (fl>=? . r2bd3) (fl=? . r2bd2) (fl<? . r2bd1) (fl<=? . r2bd0) (fl/ . r2bcf) (fl- . r2bce) (fl+ . r2bcd) (fl* . r2bcc) (fixnum->flonum . r2bcb) (&no-nans . r2ae9) (&no-infinities . r2ae8)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e4c '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . r2d11) (string-ci-hash . r2d10) (string-hash . r2d0f) (equal-hash . r2d0e) (hashtable-equivalence-function . r2d0d) (make-hashtable . r2d0c) (hashtable-hash-function . r2d0b) (make-eqv-hashtable . r2d0a) (make-eq-hashtable . r2d09) (hashtable? . r2d08) (hashtable-update! . r2d07) (hashtable-size . r2d06) (hashtable-set! . r2d05) (hashtable-ref . r2d04) (hashtable-mutable? . r2d03) (hashtable-keys . r2d02) (hashtable-entries . r2d01) (hashtable-delete! . r2d00) (hashtable-copy . r2cff) (hashtable-contains? . r2cfe) (hashtable-clear! . r2cfd)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e4d '(rnrs io ports) '(6) '() '() '() '((eof-object? . r2ced) (eof-object . r2cec) (current-error-port . r2ceb) (current-output-port . r2cea) (current-input-port . r2ce9) (output-port? . r2ce8) (input-port? . r2ce7) (utf-8-codec . r2ce6) (utf-16-codec . r2ce5) (transcoder-error-handling-mode . r2ce4) (transcoder-eol-style . r2ce3) (transcoder-codec . r2ce2) (transcoded-port . r2ce1) (textual-port? . r2ce0) (string->bytevector . r2cdf) (standard-output-port . r2cde) (standard-input-port . r2cdd) (standard-error-port . r2cdc) (set-port-position! . r2cdb) (put-u8 . r2cda) (put-string . r2cd9) (put-datum . r2cd8) (put-char . r2cd7) (put-bytevector . r2cd6) (port? . r2cd5) (port-transcoder . r2cd4) (port-position . r2cd3) (port-has-set-port-position!? . r2cd2) (port-has-port-position? . r2cd1) (port-eof? . r2cd0) (output-port-buffer-mode . r2ccf) (open-string-output-port . r2cce) (open-string-input-port . r2ccd) (open-file-output-port . r2ccc) (open-file-input/output-port . r2ccb) (open-file-input-port . r2cca) (open-bytevector-output-port . r2cc9) (open-bytevector-input-port . r2cc8) (native-transcoder . r2cc7) (native-eol-style . r2cc6) (make-transcoder . r2cc5) (latin-1-codec . r2cc4) (make-i/o-write-error . r2cc3) (make-i/o-read-error . r2cc2) (make-i/o-port-error . r2cc1) (make-i/o-invalid-position-error . r2cc0) (make-i/o-filename-error . r2cbf) (make-i/o-file-protection-error . r2cbe) (make-i/o-file-is-read-only-error . r2cbd) (make-i/o-file-does-not-exist-error . r2cbc) (make-i/o-file-already-exists-error . r2cbb) (make-i/o-error . r2cba) (make-i/o-encoding-error . r2cb9) (make-i/o-decoding-error . r2cb8) (make-custom-textual-output-port . r2cb7) (make-custom-textual-input/output-port . r2cb6) (make-custom-textual-input-port . r2cb5) (make-custom-binary-output-port . r2cb4) (make-custom-binary-input/output-port . r2cb3) (make-custom-binary-input-port . r2cb2) (lookahead-u8 . r2cb0) (lookahead-char . r2caf) (i/o-write-error? . r2cae) (i/o-read-error? . r2cad) (i/o-port-error? . r2cac) (i/o-invalid-position-error? . r2cab) (i/o-filename-error? . r2caa) (i/o-file-protection-error? . r2ca9) (i/o-file-is-read-only-error? . r2ca8) (i/o-file-does-not-exist-error? . r2ca7) (i/o-file-already-exists-error? . r2ca6) (i/o-error? . r2ca5) (i/o-error-position . r2ca4) (i/o-error-port . r2ca3) (i/o-error-filename . r2ca2) (i/o-encoding-error? . r2ca1) (i/o-encoding-error-char . r2ca0) (i/o-decoding-error? . r2c9f) (get-u8 . r2c9e) (get-string-n! . r2c9d) (get-string-n . r2c9c) (get-string-all . r2c9b) (get-line . r2c9a) (get-datum . r2c99) (get-char . r2c98) (get-bytevector-some . r2c97) (get-bytevector-n! . r2c96) (get-bytevector-n . r2c95) (get-bytevector-all . r2c94) (flush-output-port . r2c93) (close-port . r2c92) (call-with-string-output-port . r2c71) (call-with-port . r2c70) (call-with-bytevector-output-port . r2c6f) (bytevector->string . r2c6e) (buffer-mode? . r2c6d) (binary-port? . r2c6c) (&i/o-encoding . r2ae7) (&i/o-decoding . r2ae6) (&i/o-port . r2ae5) (&i/o-file-does-not-exist . r2ae4) (&i/o-file-already-exists . r2ae3) (&i/o-file-is-read-only . r2ae2) (&i/o-file-protection . r2ae1) (&i/o-filename . r2ae0) (&i/o-invalid-position . r2adf) (&i/o-write . r2ade) (&i/o-read . r2add) (&i/o . r2adc) (error-handling-mode . r2ac1) (file-options . r2ac0) (buffer-mode . r2abf) (eol-style . r2abe)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e4e '(rnrs enums) '(6) '() '() '() '((make-enumeration . r2c68) (enum-set=? . r2c67) (enum-set-universe . r2c66) (enum-set-union . r2c65) (enum-set-subset? . r2c64) (enum-set-projection . r2c63) (enum-set-member? . r2c62) (enum-set-intersection . r2c61) (enum-set-indexer . r2c60) (enum-set-difference . r2c5f) (enum-set-constructor . r2c5e) (enum-set-complement . r2c5d) (enum-set->list . r2c5c) (define-enumeration . r2acc)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e4f '(rnrs conditions) '(6) '() '() '() '((who-condition? . r2c5b) (warning? . r2c5a) (violation? . r2c59) (undefined-violation? . r2c58) (syntax-violation? . r2c57) (syntax-violation-subform . r2c56) (syntax-violation-form . r2c55) (syntax-violation . re63) (simple-conditions . r2c54) (serious-condition? . r2c53) (non-continuable-violation? . r2c52) (message-condition? . r2c51) (make-who-condition . r2c50) (make-warning . r2c4f) (make-violation . r2c4e) (make-undefined-violation . r2c4d) (make-syntax-violation . r2c4c) (make-serious-condition . r2c4b) (make-non-continuable-violation . r2c4a) (make-message-condition . r2c49) (make-lexical-violation . r2c48) (make-irritants-condition . r2c47) (make-implementation-restriction-violation . r2c46) (make-error . r2c45) (make-assertion-violation . r2c44) (lexical-violation? . r2c43) (irritants-condition? . r2c42) (implementation-restriction-violation? . r2c41) (error? . r2c40) (condition-who . r2c3f) (condition-predicate . r2c3e) (condition-message . r2c3d) (condition-irritants . r2c3c) (condition-accessor . r2c3b) (condition . r2c3a) (assertion-violation? . r2c39) (condition? . r2c38) (&undefined . r2adb) (&syntax . r2ada) (&lexical . r2ad9) (&implementation-restriction . r2ad8) (&non-continuable . r2ad7) (&who . r2ad6) (&irritants . r2ad5) (&assertion . r2ad4) (&violation . r2ad3) (&error . r2ad2) (&serious . r2ad1) (&warning . r2ad0) (&message . r2acf) (&condition . r2ace) (define-condition-type . r2acd)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e50 '(rnrs records inspection) '(6) '() '() '() '((record? . r2d20) (record-type-uid . r2d1f) (record-type-sealed? . r2d1e) (record-type-parent . r2d1d) (record-type-opaque? . r2d1c) (record-type-name . r2d1b) (record-type-generative? . r2d1a) (record-type-field-names . r2d19) (record-rtd . r2d18) (record-field-mutable? . r2d17)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e51 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . r2d27) (record-predicate . r2d26) (record-mutator . r2d25) (record-constructor . r2d24) (record-accessor . r2d23) (make-record-type-descriptor . r2d22) (make-record-constructor-descriptor . r2d21)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e52 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . r2acb) (parent-rtd . r2aca) (nongenerative . r2ac9) (opaque . r2ac8) (sealed . r2ac7) (protocol . r2ac6) (parent . r2ac5) (immutable . r2ac4) (mutable . r2ac3) (fields . r2ac2) (record-constructor-descriptor . r2aa2) (record-type-descriptor . r2aa1)) '() values values '#f '#f '#t '#f) (r997@r7e3@install-library 'r2e53 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . r2e33) (&no-nans-rtd . r2e32) (&no-infinities-rcd . r2e31) (&no-infinities-rtd . r2e30) (&i/o-encoding-rcd . r2e2f) (&i/o-encoding-rtd . r2e2e) (&i/o-decoding-rcd . r2e2d) (&i/o-decoding-rtd . r2e2c) (&i/o-port-rcd . r2e2b) (&i/o-port-rtd . r2e2a) (&i/o-file-does-not-exist-rcd . r2e29) (&i/o-file-does-not-exist-rtd . r2e28) (&i/o-file-already-exists-rcd . r2e27) (&i/o-file-already-exists-rtd . r2e26) (&i/o-file-is-read-only-rcd . r2e25) (&i/o-file-is-read-only-rtd . r2e24) (&i/o-file-protection-rcd . r2e23) (&i/o-file-protection-rtd . r2e22) (&i/o-filename-rcd . r2e21) (&i/o-filename-rtd . r2e20) (&i/o-invalid-position-rcd . r2e1f) (&i/o-invalid-position-rtd . r2e1e) (&i/o-write-rcd . r2e1d) (&i/o-write-rtd . r2e1c) (&i/o-read-rcd . r2e1b) (&i/o-read-rtd . r2e1a) (&i/o-rcd . r2e19) (&i/o-rtd . r2e18) (&undefined-rcd . r2e17) (&undefined-rtd . r2e16) (&syntax-rcd . r2e15) (&syntax-rtd . r2e14) (&lexical-rcd . r2e13) (&lexical-rtd . r2e12) (&implementation-restriction-rcd . r2e11) (&implementation-restriction-rtd . r2e10) (&non-continuable-rcd . r2e0f) (&non-continuable-rtd . r2e0e) (&who-rcd . r2e0d) (&who-rtd . r2e0c) (&irritants-rcd . r2e0b) (&irritants-rtd . r2e0a) (&assertion-rcd . r2e09) (&assertion-rtd . r2e08) (&violation-rcd . r2e07) (&violation-rtd . r2e06) (&error-rcd . r2e05) (&error-rtd . r2e04) (&serious-rcd . r2e03) (&serious-rtd . r2e02) (&warning-rcd . r2e01) (&warning-rtd . r2e00) (&message-rcd . r2dff) (&message-rtd . r2dfe) (&condition-rcd . r2dfd) (&condition-rtd . r2dfc) (syntax-error . re5f) (syntax-dispatch . rd83) (pretty-print . r2dfb) (eval-core . r2dfa) (set-symbol-value! . r2df9) (symbol-value . r2df8) (gensym . r2df7) (void . r2df6) (load . r2922) (interaction-environment . re71) (char-ready? . r2df5) (regexp? . r2df4) (read-line . r2df3) (gensym-prefix-set! . r2df2) (ungensym . r2df1) (alist->eq-hash-table . r2df0) (assoc-ref . r2def) (print . r2dee) (format . r2ded) (host-os . r2dec) (library-path . r7c2) (standard-library-path . r2deb) (ssl-supported? . r2dea) (ssl-socket? . r2de9) (socket-sslize! . r2de8) (%monapi-name-whereis . r2de7) (%monapi-message-send . r2de6) (file-newer? . r2de5) (stat-mtime . r2de4) (write-to-file . r2de3) (file->list . r2de2) (file->string . r2de1) (digit->integer . r2de0) (call-with-string-input-port . r2ddf) (call-with-string-io . r2dde) (string-split . r2ddd) (bytevector-for-each . r2ddc) (string->regexp . r2ddb) (rxmatch . r2dda) (regexp-replace-all . r2dd9) (hashtable-fold-left . r2dd8) (hashtable-for-each . r2dd7) (mosh-cache-dir . r5ac) (call-process . r2dd6) (local-tz-offset . r2dd5) (microseconds . r2dd4) (directory-list . r2dd3) (set-current-directory! . r2dd2) (expand-path . r2dd1) (current-directory . r2dd0) (%getpid . r2dcf) (%spawn . r2dce) (%waitpid . r2dcd) (simple-struct-name . r2dcc) (simple-struct-set! . r2dcb) (simple-struct-ref . r2dca) (make-simple-struct . r2dc9) (simple-struct? . r2dc8) (pointer-ref-c-int64 . r2dc7) (pointer-ref-c-int32 . r2dc6) (pointer-ref-c-int16 . r2dc5) (pointer-ref-c-int8 . r2dc4) (pointer-ref-c-uint64 . r2dc3) (pointer-ref-c-uint32 . r2dc2) (pointer-ref-c-uint16 . r2dc1) (pointer-ref-c-uint8 . r2dc0) (pointer-set-c-uint64! . r2dbf) (pointer-set-c-uint32! . r2dbe) (pointer-set-c-uint16! . r2dbd) (pointer-set-c-uint8! . r2dbc) (pointer-set-c-int64! . r2dbb) (pointer-set-c-int32! . r2dba) (pointer-set-c-int16! . r2db9) (pointer-set-c-int8! . r2db8) (pointer-set-c-pointer! . r2db7) (pointer-set-c-double! . r2db6) (pointer-set-c-float! . r2db5) (pointer-set-c-long-long! . r2db4) (pointer-set-c-long! . r2db3) (pointer-set-c-int! . r2db2) (pointer-set-c-short! . r2db1) (pointer-set-c-char! . r2db0) (pointer-ref-c-pointer . r2daf) (pointer-ref-c-double . r2dae) (pointer-ref-c-float . r2dad) (pointer-ref-c-unsigned-long-long . r2dac) (pointer-ref-c-signed-long-long . r2dab) (pointer-ref-c-unsigned-long . r2daa) (pointer-ref-c-signed-long . r2da9) (pointer-ref-c-unsigned-int . r2da8) (pointer-ref-c-signed-int . r2da7) (pointer-ref-c-unsigned-short . r2da6) (pointer-ref-c-signed-short . r2da5) (pointer-ref-c-unsigned-char . r2da4) (pointer-ref-c-signed-char . r2da3) (pointer->integer . r2da2) (integer->pointer . r2da1) (pointer? . r2da0) (shared-errno . r2d9f) (%ffi-free-c-callback-trampoline . r2d9e) (%ffi-make-c-callback-trampoline . r2d9d) (%ffi-free . r2d9c) (%ffi-malloc . r2d9b) (%ffi-supported? . r2d9a) (%ffi-pointer->string . r2d99) (%ffi-call . r2d98) (%ffi-lookup . r2d97) (%ffi-open . r2d96) (null-terminated-utf8->string . r2d95) (null-terminated-bytevector->string . r2d94) (%exec . r2d93) (%fork . r2d92) (%pipe . r2d91) (p . r2d90) (open-output-string . r2d8f) (get-output-string . r2d8e) (file-stat-ctime . r2d8d) (file-stat-atime . r2d8c) (file-stat-mtime . r2d8b) (file-size-in-bytes . r2d8a) (file-writable? . r2d89) (file-executable? . r2d88) (file-readable? . r2d87) (file-regular? . r2d86) (file-symbolic-link? . r2d85) (file-directory? . r2d84) (create-symbolic-link . r2d83) (rename-file . r2d82) (delete-directory . r2d81) (create-directory . r2d80) (create-mosh-cache-dir . r2d7f) (get-environment-variables . r2d7e) (current-exception-handler . r2d7d) (get-environment-variable . r2d7c) (join-wraps . r2d7b) (id->real-label . r2d7a) (same-marks? . r2d79) (same-marks*? . r2d78) (get-timeofday . r2d77) (get-command-line . r2d76) (sys-display . r2d75) (whereis . r2d74) (register . r2d73) (vm-join! . r2d72) (vm-set-value! . r2d71) (vm? . r2d70) (main-vm? . r2d6f) (vm-eval . r2d6e) (vm-self . r2d6d) (vm-start! . r2d6c) (make-vm . r2d6b) (mutex-try-lock! . r2d6a) (mutex-unlock! . r2d69) (mutex-lock! . r2d68) (mutex? . r2d67) (make-mutex . r2d66) (condition-variable-notify-all! . r2d65) (condition-variable-notify! . r2d64) (condition-variable-wait! . r2d63) (make-condition-variable . r2d62) (write/ss . r2d61) (mosh-executable-path . r2d60) (make-file-options . r2d5f) (source-info . r2d5e) (make-compiler-instruction . r2d5d) (make-instruction . r2d5c) (set-annotation! . r2d5b) (get-annotation . r2d5a) (annotated-pair? . r2d59) (annotated-cons . r2d58) (set-source-info! . r2d57) (bignum? . r2d56) (fast-equal? . r2d55) (fasl-read . r2d54) (fasl-write . r2d53) (time-usage . r2d52) (os-constant . r2d51) (condition-printer . r2d50) (disasm . r2d4f) (make-parameter . r5aa) (socket-port . r2d4e) (socket-shutdown . r2d4d) (socket-close . r2d4c) (socket-send . r2d4b) (socket-recv! . r2d4a) (socket-recv . r2d49) (make-server-socket . r2d48) (make-client-socket . r2d47) (socket-accept . r2d46) (socket? . r2d45) (string-upcase . r2d44) (string-titlecase . r2d43) (string-normalize-nfkd . r2d42) (string-normalize-nfkc . r2d41) (string-normalize-nfd . r2d40) (string-normalize-nfc . r2d3f) (string-foldcase . r2d3e) (string-downcase . r2d3d) (string-ci>? . r2d3c) (string-ci>=? . r2d3b) (string-ci=? . r2d3a) (string-ci<? . r2d39) (string-ci<=? . r2d38) (char-whitespace? . r2d37) (char-upper-case? . r2d36) (char-title-case? . r2d35) (char-numeric? . r2d34) (char-lower-case? . r2d33) (char-general-category . r2d32) (char-upcase . r2d31) (char-titlecase . r2d30) (char-foldcase . r2d2f) (char-downcase . r2d2e) (char-ci>? . r2d2d) (char-ci>=? . r2d2c) (char-ci=? . r2d2b) (char-ci<? . r2d2a) (char-ci<=? . r2d29) (char-alphabetic? . r2d28) (make-variable-transformer . rbae) (identifier? . re65) (generate-temporaries . re51) (free-identifier=? . re53) (syntax->datum . re69) (datum->syntax . re67) (bound-identifier=? . re55) (record-type-descriptor? . r2d27) (record-predicate . r2d26) (record-mutator . r2d25) (record-constructor . r2d24) (record-accessor . r2d23) (make-record-type-descriptor . r2d22) (make-record-constructor-descriptor . r2d21) (record? . r2d20) (record-type-uid . r2d1f) (record-type-sealed? . r2d1e) (record-type-parent . r2d1d) (record-type-opaque? . r2d1c) (record-type-name . r2d1b) (record-type-generative? . r2d1a) (record-type-field-names . r2d19) (record-rtd . r2d18) (record-field-mutable? . r2d17) (delete-file . r2d16) (file-exists? . r2d15) (vector-sort! . r2d14) (vector-sort . r2d13) (list-sort . r2d12) (symbol-hash . r2d11) (string-ci-hash . r2d10) (string-hash . r2d0f) (equal-hash . r2d0e) (hashtable-equivalence-function . r2d0d) (make-hashtable . r2d0c) (hashtable-hash-function . r2d0b) (make-eqv-hashtable . r2d0a) (make-eq-hashtable . r2d09) (hashtable? . r2d08) (hashtable-update! . r2d07) (hashtable-size . r2d06) (hashtable-set! . r2d05) (hashtable-ref . r2d04) (hashtable-mutable? . r2d03) (hashtable-keys . r2d02) (hashtable-entries . r2d01) (hashtable-delete! . r2d00) (hashtable-copy . r2cff) (hashtable-contains? . r2cfe) (hashtable-clear! . r2cfd) (call-with-output-file . r2cfc) (call-with-input-file . r2cfb) (write-char . r2cfa) (write . r2cf9) (with-output-to-file . r2cf8) (with-input-from-file . r2cf7) (read-char . r2cf6) (read . r2cf5) (peek-char . r2cf4) (open-output-file . r2cf3) (open-input-file . r2cf2) (newline . r2cf1) (display . r2cf0) (close-output-port . r2cef) (close-input-port . r2cee) (eof-object? . r2ced) (eof-object . r2cec) (current-error-port . r2ceb) (current-output-port . r2cea) (current-input-port . r2ce9) (output-port? . r2ce8) (input-port? . r2ce7) (utf-8-codec . r2ce6) (utf-16-codec . r2ce5) (transcoder-error-handling-mode . r2ce4) (transcoder-eol-style . r2ce3) (transcoder-codec . r2ce2) (transcoded-port . r2ce1) (textual-port? . r2ce0) (string->bytevector . r2cdf) (standard-output-port . r2cde) (standard-input-port . r2cdd) (standard-error-port . r2cdc) (set-port-position! . r2cdb) (put-u8 . r2cda) (put-string . r2cd9) (put-datum . r2cd8) (put-char . r2cd7) (put-bytevector . r2cd6) (port? . r2cd5) (port-transcoder . r2cd4) (port-position . r2cd3) (port-has-set-port-position!? . r2cd2) (port-has-port-position? . r2cd1) (port-eof? . r2cd0) (output-port-buffer-mode . r2ccf) (open-string-output-port . r2cce) (open-string-input-port . r2ccd) (open-file-output-port . r2ccc) (open-file-input/output-port . r2ccb) (open-file-input-port . r2cca) (open-bytevector-output-port . r2cc9) (open-bytevector-input-port . r2cc8) (native-transcoder . r2cc7) (native-eol-style . r2cc6) (make-transcoder . r2cc5) (latin-1-codec . r2cc4) (make-i/o-write-error . r2cc3) (make-i/o-read-error . r2cc2) (make-i/o-port-error . r2cc1) (make-i/o-invalid-position-error . r2cc0) (make-i/o-filename-error . r2cbf) (make-i/o-file-protection-error . r2cbe) (make-i/o-file-is-read-only-error . r2cbd) (make-i/o-file-does-not-exist-error . r2cbc) (make-i/o-file-already-exists-error . r2cbb) (make-i/o-error . r2cba) (make-i/o-encoding-error . r2cb9) (make-i/o-decoding-error . r2cb8) (make-custom-textual-output-port . r2cb7) (make-custom-textual-input/output-port . r2cb6) (make-custom-textual-input-port . r2cb5) (make-custom-binary-output-port . r2cb4) (make-custom-binary-input/output-port . r2cb3) (make-custom-binary-input-port . r2cb2) (make-bytevector . r2cb1) (lookahead-u8 . r2cb0) (lookahead-char . r2caf) (i/o-write-error? . r2cae) (i/o-read-error? . r2cad) (i/o-port-error? . r2cac) (i/o-invalid-position-error? . r2cab) (i/o-filename-error? . r2caa) (i/o-file-protection-error? . r2ca9) (i/o-file-is-read-only-error? . r2ca8) (i/o-file-does-not-exist-error? . r2ca7) (i/o-file-already-exists-error? . r2ca6) (i/o-error? . r2ca5) (i/o-error-position . r2ca4) (i/o-error-port . r2ca3) (i/o-error-filename . r2ca2) (i/o-encoding-error? . r2ca1) (i/o-encoding-error-char . r2ca0) (i/o-decoding-error? . r2c9f) (get-u8 . r2c9e) (get-string-n! . r2c9d) (get-string-n . r2c9c) (get-string-all . r2c9b) (get-line . r2c9a) (get-datum . r2c99) (get-char . r2c98) (get-bytevector-some . r2c97) (get-bytevector-n! . r2c96) (get-bytevector-n . r2c95) (get-bytevector-all . r2c94) (flush-output-port . r2c93) (close-port . r2c92) (scheme-report-environment . re3f) (quotient . r2c91) (null-environment . re3d) (remainder . r2c90) (modulo . r2c8f) (inexact->exact . r2c8e) (force . r2c8d) (exact->inexact . r2c8c) (make-promise . r2c8b) (exit . r2c8a) (command-line . r291c) (string-fill! . r2c89) (string-set! . r2c88) (set-cdr! . r2c87) (set-car! . r2c86) (remove . r2c85) (remv . r2c84) (remp . r2c83) (remq . r2c82) (partition . r2c81) (memv . r2c80) (memq . r2c7f) (memp . r2c7e) (member . r2c7d) (exists . r2c7c) (for-all . r2c7b) (fold-right . r2c7a) (fold-left . r2c79) (find . r2c78) (filter . r2c77) (cons* . r2c76) (assv . r2c75) (assq . r2c74) (assp . r2c73) (assoc . r2c72) (call-with-string-output-port . r2c71) (call-with-port . r2c70) (call-with-bytevector-output-port . r2c6f) (bytevector->string . r2c6e) (buffer-mode? . r2c6d) (binary-port? . r2c6c) (with-exception-handler . r2c6b) (raise-continuable . r2c6a) (raise . r2c69) (eval . re43) (environment . re3b) (make-enumeration . r2c68) (enum-set=? . r2c67) (enum-set-universe . r2c66) (enum-set-union . r2c65) (enum-set-subset? . r2c64) (enum-set-projection . r2c63) (enum-set-member? . r2c62) (enum-set-intersection . r2c61) (enum-set-indexer . r2c60) (enum-set-difference . r2c5f) (enum-set-constructor . r2c5e) (enum-set-complement . r2c5d) (enum-set->list . r2c5c) (who-condition? . r2c5b) (warning? . r2c5a) (violation? . r2c59) (undefined-violation? . r2c58) (syntax-violation? . r2c57) (syntax-violation-subform . r2c56) (syntax-violation-form . r2c55) (syntax-violation . re63) (simple-conditions . r2c54) (serious-condition? . r2c53) (non-continuable-violation? . r2c52) (message-condition? . r2c51) (make-who-condition . r2c50) (make-warning . r2c4f) (make-violation . r2c4e) (make-undefined-violation . r2c4d) (make-syntax-violation . r2c4c) (make-serious-condition . r2c4b) (make-non-continuable-violation . r2c4a) (make-message-condition . r2c49) (make-lexical-violation . r2c48) (make-irritants-condition . r2c47) (make-implementation-restriction-violation . r2c46) (make-error . r2c45) (make-assertion-violation . r2c44) (lexical-violation? . r2c43) (irritants-condition? . r2c42) (implementation-restriction-violation? . r2c41) (error? . r2c40) (condition-who . r2c3f) (condition-predicate . r2c3e) (condition-message . r2c3d) (condition-irritants . r2c3c) (condition-accessor . r2c3b) (condition . r2c3a) (assertion-violation? . r2c39) (condition? . r2c38) (utf32->string . r2c37) (utf16->string . r2c36) (utf8->string . r2c35) (uint-list->bytevector . r2c34) (u8-list->bytevector . r2c33) (string->utf8 . r2c32) (string->utf32 . r2c31) (string->utf16 . r2c30) (sint-list->bytevector . r2c2f) (native-endianness . r2c2e) (bytevector? . r2c2d) (bytevector=? . r2c2c) (bytevector-uint-set! . r2c2b) (bytevector-uint-ref . r2c2a) (bytevector-u8-set! . r2c29) (bytevector-u8-ref . r2c28) (bytevector-u64-set! . r2c27) (bytevector-u64-ref . r2c26) (bytevector-u64-native-set! . r2c25) (bytevector-u64-native-ref . r2c24) (bytevector-u32-set! . r2c23) (bytevector-u32-ref . r2c22) (bytevector-u32-native-set! . r2c21) (bytevector-u32-native-ref . r2c20) (bytevector-u16-set! . r2c1f) (bytevector-u16-ref . r2c1e) (bytevector-u16-native-set! . r2c1d) (bytevector-u16-native-ref . r2c1c) (bytevector-sint-set! . r2c1b) (bytevector-sint-ref . r2c1a) (bytevector-s8-set! . r2c19) (bytevector-s8-ref . r2c18) (bytevector-s64-set! . r2c17) (bytevector-s64-ref . r2c16) (bytevector-s64-native-set! . r2c15) (bytevector-s64-native-ref . r2c14) (bytevector-s32-set! . r2c13) (bytevector-s32-ref . r2c12) (bytevector-s32-native-set! . r2c11) (bytevector-s32-native-ref . r2c10) (bytevector-s16-set! . r2c0f) (bytevector-s16-ref . r2c0e) (bytevector-s16-native-set! . r2c0d) (bytevector-s16-native-ref . r2c0c) (bytevector-length . r2c0b) (bytevector-ieee-single-ref . r2c0a) (bytevector-ieee-single-set! . r2c09) (bytevector-ieee-single-native-set! . r2c08) (bytevector-ieee-single-native-ref . r2c07) (bytevector-ieee-double-set! . r2c06) (bytevector-ieee-double-ref . r2c05) (bytevector-ieee-double-native-set! . r2c04) (bytevector-ieee-double-native-ref . r2c03) (bytevector-fill! . r2c02) (bytevector-copy! . r2c01) (bytevector-copy . r2c00) (bytevector->uint-list . r2bff) (bytevector->u8-list . r2bfe) (bytevector->sint-list . r2bfd) (no-nans-violation? . r2bfc) (no-infinities-violation? . r2bfb) (make-no-nans-violation . r2bfa) (make-no-infinities-violation . r2bf9) (real->flonum . r2bf8) (flzero? . r2bf7) (fltruncate . r2bf6) (fltan . r2bf5) (flsqrt . r2bf4) (flsin . r2bf3) (flround . r2bf2) (flpositive? . r2bf1) (flonum? . r2bf0) (flodd? . r2bef) (flnumerator . r2bee) (flnegative? . r2bed) (flnan? . r2bec) (flmod0 . r2beb) (flmod . r2bea) (flmin . r2be9) (flmax . r2be8) (fllog . r2be7) (flinteger? . r2be6) (flinfinite? . r2be5) (flfloor . r2be4) (flfinite? . r2be3) (flexpt . r2be2) (flexp . r2be1) (fleven? . r2be0) (fldiv0-and-mod0 . r2bdf) (fldiv0 . r2bde) (fldiv-and-mod . r2bdd) (fldiv . r2bdc) (fldenominator . r2bdb) (flcos . r2bda) (flceiling . r2bd9) (flatan . r2bd8) (flasin . r2bd7) (flacos . r2bd6) (flabs . r2bd5) (fl>? . r2bd4) (fl>=? . r2bd3) (fl=? . r2bd2) (fl<? . r2bd1) (fl<=? . r2bd0) (fl/ . r2bcf) (fl- . r2bce) (fl+ . r2bcd) (fl* . r2bcc) (fixnum->flonum . r2bcb) (fxzero? . r2bca) (fxxor . r2bc9) (fxrotate-bit-field . r2bc8) (fxreverse-bit-field . r2bc7) (fxpositive? . r2bc6) (fxodd? . r2bc5) (fxnot . r2bc4) (fxnegative? . r2bc3) (fxmod0 . r2bc2) (fxmod . r2bc1) (fxmin . r2bc0) (fxmax . r2bbf) (fxlength . r2bbe) (fxior . r2bbd) (fxif . r2bbc) (fxfirst-bit-set . r2bbb) (fxeven? . r2bba) (fxdiv0-and-mod0 . r2bb9) (fxdiv0 . r2bb8) (fxdiv-and-mod . r2bb7) (fxdiv . r2bb6) (fxcopy-bit-field . r2bb5) (fxcopy-bit . r2bb4) (fxbit-set? . r2bb3) (fxbit-field . r2bb2) (fxbit-count . r2bb1) (fxarithmetic-shift-right . r2bb0) (fxarithmetic-shift-left . r2baf) (fxarithmetic-shift . r2bae) (fxand . r2bad) (fx>? . r2bac) (fx>=? . r2bab) (fx=? . r2baa) (fx<? . r2ba9) (fx<=? . r2ba8) (fx-/carry . r2ba7) (fx- . r2ba6) (fx+/carry . r2ba5) (fx+ . r2ba4) (fx*/carry . r2ba3) (fx* . r2ba2) (greatest-fixnum . r2ba1) (least-fixnum . r2ba0) (fixnum-width . r2b9f) (fixnum? . r2b9e) (bitwise-rotate-bit-field . r2b9d) (bitwise-reverse-bit-field . r2b9c) (bitwise-length . r2b9b) (bitwise-if . r2b9a) (bitwise-first-bit-set . r2b99) (bitwise-copy-bit-field . r2b98) (bitwise-copy-bit . r2b97) (bitwise-bit-set? . r2b96) (bitwise-bit-field . r2b95) (bitwise-bit-count . r2b94) (bitwise-xor . r2b93) (bitwise-ior . r2b92) (bitwise-and . r2b91) (bitwise-not . r2b90) (bitwise-arithmetic-shift-right . r2b8f) (bitwise-arithmetic-shift-left . r2b8e) (bitwise-arithmetic-shift . r2b8d) (zero? . r2b8c) (vector? . r2b8b) (vector-set! . r2b8a) (vector-ref . r2b89) (vector-map . r2b88) (vector-length . r2b87) (vector-for-each . r2b86) (vector-fill! . r2b85) (vector->list . r2b84) (vector . r2b83) (values . r2b82) (truncate . r2b81) (tan . r2b80) (symbol? . r2b7f) (symbol=? . r2b7e) (symbol->string . r2b7d) (substring . r2b7c) (string? . r2b7b) (string>? . r2b7a) (string>=? . r2b79) (string=? . r2b78) (string<? . r2b77) (string<=? . r2b76) (string-ref . r2b75) (string-length . r2b74) (string-for-each . r2b73) (string-copy . r2b72) (string-append . r2b71) (string->symbol . r2b70) (string->number . r2b6f) (string->list . r2b6e) (string . r2b6d) (sqrt . r2b6c) (sin . r2b6b) (round . r2b6a) (reverse . r2b69) (real? . r2b68) (real-valued? . r2b67) (real-part . r2b66) (rationalize . r2b65) (rational? . r2b64) (rational-valued? . r2b63) (procedure? . r2b62) (positive? . r2b61) (pair? . r2b60) (odd? . r2b5f) (numerator . r2b5e) (number? . r2b5d) (number->string . r2b5c) (null? . r2b5b) (not . r2b5a) (negative? . r2b59) (nan? . r2b58) (min . r2b57) (max . r2b56) (map . r2b55) (make-vector . r2b54) (make-string . r2b53) (make-rectangular . r2b52) (make-polar . r2b51) (magnitude . r2b50) (log . r2b4f) (list? . r2b4e) (list-tail . r2b4d) (list-ref . r2b4c) (list->vector . r2b4b) (list->string . r2b4a) (list . r2b49) (length . r2b48) (lcm . r2b47) (integer? . r2b46) (integer-valued? . r2b45) (integer->char . r2b44) (infinite? . r2b43) (inexact? . r2b42) (inexact . r2b41) (imag-part . r2b40) (gcd . r2b3f) (for-each . r2b3e) (floor . r2b3d) (finite? . r2b3c) (expt . r2b3b) (exp . r2b3a) (exact? . r2b39) (exact-integer-sqrt . r2b38) (exact . r2b37) (even? . r2b36) (error . r2b35) (eqv? . r2b34) (equal? . r2b33) (eq? . r2b32) (dynamic-wind . r2b31) (div0-and-mod0 . r2b30) (mod0 . r2b2f) (div0 . r2b2e) (div-and-mod . r2b2d) (mod . r2b2c) (div . r2b2b) (denominator . r2b2a) (cos . r2b29) (cons . r2b28) (complex? . r2b27) (char? . r2b26) (char>? . r2b25) (char>=? . r2b24) (char=? . r2b23) (char<? . r2b22) (char<=? . r2b21) (char->integer . r2b20) (ceiling . r2b1f) (call-with-values . r2b1e) (call/cc . r2b1d) (call-with-current-continuation . r2b1c) (cddddr . r2b1b) (cdddar . r2b1a) (cddadr . r2b19) (cddaar . r2b18) (cdaddr . r2b17) (cdadar . r2b16) (cdaadr . r2b15) (cdaaar . r2b14) (cadddr . r2b13) (caddar . r2b12) (cadadr . r2b11) (cadaar . r2b10) (caaddr . r2b0f) (caadar . r2b0e) (caaadr . r2b0d) (caaaar . r2b0c) (cdddr . r2b0b) (cddar . r2b0a) (cdadr . r2b09) (cdaar . r2b08) (caddr . r2b07) (cadar . r2b06) (caadr . r2b05) (caaar . r2b04) (cddr . r2b03) (cdar . r2b02) (cadr . r2b01) (caar . r2b00) (cdr . r2aff) (car . r2afe) (boolean? . r2afd) (boolean=? . r2afc) (atan . r2afb) (assertion-violation . r2afa) (assertion-error . re5d) (asin . r2af9) (apply . r2af8) (append . r2af7) (angle . r2af6) (acos . r2af5) (abs . r2af4) (/ . r2af3) (* . r2af2) (- . r2af1) (+ . r2af0) (>= . r2aef) (> . r2aee) (= . r2aed) (<= . r2aec) (< . r2aeb) (library . r2aea) (&no-nans . r2ae9) (&no-infinities . r2ae8) (&i/o-encoding . r2ae7) (&i/o-decoding . r2ae6) (&i/o-port . r2ae5) (&i/o-file-does-not-exist . r2ae4) (&i/o-file-already-exists . r2ae3) (&i/o-file-is-read-only . r2ae2) (&i/o-file-protection . r2ae1) (&i/o-filename . r2ae0) (&i/o-invalid-position . r2adf) (&i/o-write . r2ade) (&i/o-read . r2add) (&i/o . r2adc) (&undefined . r2adb) (&syntax . r2ada) (&lexical . r2ad9) (&implementation-restriction . r2ad8) (&non-continuable . r2ad7) (&who . r2ad6) (&irritants . r2ad5) (&assertion . r2ad4) (&violation . r2ad3) (&error . r2ad2) (&serious . r2ad1) (&warning . r2ad0) (&message . r2acf) (&condition . r2ace) (define-condition-type . r2acd) (define-enumeration . r2acc) (define-record-type . r2acb) (parent-rtd . r2aca) (nongenerative . r2ac9) (opaque . r2ac8) (sealed . r2ac7) (protocol . r2ac6) (parent . r2ac5) (immutable . r2ac4) (mutable . r2ac3) (fields . r2ac2) (error-handling-mode . r2ac1) (file-options . r2ac0) (buffer-mode . r2abf) (eol-style . r2abe) (guard . r2abd) (trace-define . r2abc) (trace-lambda . r2abb) (unsyntax-splicing . r2aba) (unsyntax . r2ab9) (unquote-splicing . r2ab8) (unquote . r2ab7) (_ . r2ab6) (else . r2ab5) (=> . r2ab4) (... . r2ab3) (assert . r2ab2) (endianness . r2ab1) (delay . r2ab0) (time . r2aaf) (do . r2aae) (cond . r2aad) (let* . r2aac) (let*-values . r2aab) (let-values . r2aaa) (identifier-syntax . r2aa9) (with-syntax . r2aa8) (quasisyntax . r2aa7) (quasiquote . r2aa6) (syntax-rules . r2aa5) (include . r2aa4) (define-struct . r2aa3) (record-constructor-descriptor . r2aa2) (record-type-descriptor . r2aa1) (case . r2aa0) (parameterize . r2a9f) (unless . r2a9e) (when . r2a9d) (or . r2a9c) (and . r2a9b) (if . r2a9a) (let . r2a99) (letrec* . r2a98) (letrec . r2a97) (type-descriptor . r2a96) (case-lambda . r2a95) (lambda . r2a94) (syntax . r2a93) (syntax-case . r2a92) (quote . r2a91) (foreign-call . r2a90) (letrec-syntax . r2a8f) (let-syntax . r2a8e) (set! . r2a8d) (import . r2a8c) (begin . r2a8b) (module . r2a8a) (define-syntax . r2a89) (define . r2a88)) '((r2e33 core-prim . &no-nans-rcd) (r2e32 core-prim . &no-nans-rtd) (r2e31 core-prim . &no-infinities-rcd) (r2e30 core-prim . &no-infinities-rtd) (r2e2f core-prim . &i/o-encoding-rcd) (r2e2e core-prim . &i/o-encoding-rtd) (r2e2d core-prim . &i/o-decoding-rcd) (r2e2c core-prim . &i/o-decoding-rtd) (r2e2b core-prim . &i/o-port-rcd) (r2e2a core-prim . &i/o-port-rtd) (r2e29 core-prim . &i/o-file-does-not-exist-rcd) (r2e28 core-prim . &i/o-file-does-not-exist-rtd) (r2e27 core-prim . &i/o-file-already-exists-rcd) (r2e26 core-prim . &i/o-file-already-exists-rtd) (r2e25 core-prim . &i/o-file-is-read-only-rcd) (r2e24 core-prim . &i/o-file-is-read-only-rtd) (r2e23 core-prim . &i/o-file-protection-rcd) (r2e22 core-prim . &i/o-file-protection-rtd) (r2e21 core-prim . &i/o-filename-rcd) (r2e20 core-prim . &i/o-filename-rtd) (r2e1f core-prim . &i/o-invalid-position-rcd) (r2e1e core-prim . &i/o-invalid-position-rtd) (r2e1d core-prim . &i/o-write-rcd) (r2e1c core-prim . &i/o-write-rtd) (r2e1b core-prim . &i/o-read-rcd) (r2e1a core-prim . &i/o-read-rtd) (r2e19 core-prim . &i/o-rcd) (r2e18 core-prim . &i/o-rtd) (r2e17 core-prim . &undefined-rcd) (r2e16 core-prim . &undefined-rtd) (r2e15 core-prim . &syntax-rcd) (r2e14 core-prim . &syntax-rtd) (r2e13 core-prim . &lexical-rcd) (r2e12 core-prim . &lexical-rtd) (r2e11 core-prim . &implementation-restriction-rcd) (r2e10 core-prim . &implementation-restriction-rtd) (r2e0f core-prim . &non-continuable-rcd) (r2e0e core-prim . &non-continuable-rtd) (r2e0d core-prim . &who-rcd) (r2e0c core-prim . &who-rtd) (r2e0b core-prim . &irritants-rcd) (r2e0a core-prim . &irritants-rtd) (r2e09 core-prim . &assertion-rcd) (r2e08 core-prim . &assertion-rtd) (r2e07 core-prim . &violation-rcd) (r2e06 core-prim . &violation-rtd) (r2e05 core-prim . &error-rcd) (r2e04 core-prim . &error-rtd) (r2e03 core-prim . &serious-rcd) (r2e02 core-prim . &serious-rtd) (r2e01 core-prim . &warning-rcd) (r2e00 core-prim . &warning-rtd) (r2dff core-prim . &message-rcd) (r2dfe core-prim . &message-rtd) (r2dfd core-prim . &condition-rcd) (r2dfc core-prim . &condition-rtd) (re5f core-prim . syntax-error) (rd83 core-prim . syntax-dispatch) (r2dfb core-prim . pretty-print) (r2dfa core-prim . eval-core) (r2df9 core-prim . set-symbol-value!) (r2df8 core-prim . symbol-value) (r2df7 core-prim . gensym) (r2df6 core-prim . void) (r2922 core-prim . load) (re71 core-prim . interaction-environment) (r2df5 core-prim . char-ready?) (r2df4 core-prim . regexp?) (r2df3 core-prim . read-line) (r2df2 core-prim . gensym-prefix-set!) (r2df1 core-prim . ungensym) (r2df0 core-prim . alist->eq-hash-table) (r2def core-prim . assoc-ref) (r2dee core-prim . print) (r2ded core-prim . format) (r2dec core-prim . host-os) (r7c2 core-prim . library-path) (r2deb core-prim . standard-library-path) (r2dea core-prim . ssl-supported?) (r2de9 core-prim . ssl-socket?) (r2de8 core-prim . socket-sslize!) (r2de7 core-prim . %monapi-name-whereis) (r2de6 core-prim . %monapi-message-send) (r2de5 core-prim . file-newer?) (r2de4 core-prim . stat-mtime) (r2de3 core-prim . write-to-file) (r2de2 core-prim . file->list) (r2de1 core-prim . file->string) (r2de0 core-prim . digit->integer) (r2ddf core-prim . call-with-string-input-port) (r2dde core-prim . call-with-string-io) (r2ddd core-prim . string-split) (r2ddc core-prim . bytevector-for-each) (r2ddb core-prim . string->regexp) (r2dda core-prim . rxmatch) (r2dd9 core-prim . regexp-replace-all) (r2dd8 core-prim . hashtable-fold-left) (r2dd7 core-prim . hashtable-for-each) (r5ac core-prim . mosh-cache-dir) (r2dd6 core-prim . call-process) (r2dd5 core-prim . local-tz-offset) (r2dd4 core-prim . microseconds) (r2dd3 core-prim . directory-list) (r2dd2 core-prim . set-current-directory!) (r2dd1 core-prim . expand-path) (r2dd0 core-prim . current-directory) (r2dcf core-prim . %getpid) (r2dce core-prim . %spawn) (r2dcd core-prim . %waitpid) (r2dcc core-prim . simple-struct-name) (r2dcb core-prim . simple-struct-set!) (r2dca core-prim . simple-struct-ref) (r2dc9 core-prim . make-simple-struct) (r2dc8 core-prim . simple-struct?) (r2dc7 core-prim . pointer-ref-c-int64) (r2dc6 core-prim . pointer-ref-c-int32) (r2dc5 core-prim . pointer-ref-c-int16) (r2dc4 core-prim . pointer-ref-c-int8) (r2dc3 core-prim . pointer-ref-c-uint64) (r2dc2 core-prim . pointer-ref-c-uint32) (r2dc1 core-prim . pointer-ref-c-uint16) (r2dc0 core-prim . pointer-ref-c-uint8) (r2dbf core-prim . pointer-set-c-uint64!) (r2dbe core-prim . pointer-set-c-uint32!) (r2dbd core-prim . pointer-set-c-uint16!) (r2dbc core-prim . pointer-set-c-uint8!) (r2dbb core-prim . pointer-set-c-int64!) (r2dba core-prim . pointer-set-c-int32!) (r2db9 core-prim . pointer-set-c-int16!) (r2db8 core-prim . pointer-set-c-int8!) (r2db7 core-prim . pointer-set-c-pointer!) (r2db6 core-prim . pointer-set-c-double!) (r2db5 core-prim . pointer-set-c-float!) (r2db4 core-prim . pointer-set-c-long-long!) (r2db3 core-prim . pointer-set-c-long!) (r2db2 core-prim . pointer-set-c-int!) (r2db1 core-prim . pointer-set-c-short!) (r2db0 core-prim . pointer-set-c-char!) (r2daf core-prim . pointer-ref-c-pointer) (r2dae core-prim . pointer-ref-c-double) (r2dad core-prim . pointer-ref-c-float) (r2dac core-prim . pointer-ref-c-unsigned-long-long) (r2dab core-prim . pointer-ref-c-signed-long-long) (r2daa core-prim . pointer-ref-c-unsigned-long) (r2da9 core-prim . pointer-ref-c-signed-long) (r2da8 core-prim . pointer-ref-c-unsigned-int) (r2da7 core-prim . pointer-ref-c-signed-int) (r2da6 core-prim . pointer-ref-c-unsigned-short) (r2da5 core-prim . pointer-ref-c-signed-short) (r2da4 core-prim . pointer-ref-c-unsigned-char) (r2da3 core-prim . pointer-ref-c-signed-char) (r2da2 core-prim . pointer->integer) (r2da1 core-prim . integer->pointer) (r2da0 core-prim . pointer?) (r2d9f core-prim . shared-errno) (r2d9e core-prim . %ffi-free-c-callback-trampoline) (r2d9d core-prim . %ffi-make-c-callback-trampoline) (r2d9c core-prim . %ffi-free) (r2d9b core-prim . %ffi-malloc) (r2d9a core-prim . %ffi-supported?) (r2d99 core-prim . %ffi-pointer->string) (r2d98 core-prim . %ffi-call) (r2d97 core-prim . %ffi-lookup) (r2d96 core-prim . %ffi-open) (r2d95 core-prim . null-terminated-utf8->string) (r2d94 core-prim . null-terminated-bytevector->string) (r2d93 core-prim . %exec) (r2d92 core-prim . %fork) (r2d91 core-prim . %pipe) (r2d90 core-prim . p) (r2d8f core-prim . open-output-string) (r2d8e core-prim . get-output-string) (r2d8d core-prim . file-stat-ctime) (r2d8c core-prim . file-stat-atime) (r2d8b core-prim . file-stat-mtime) (r2d8a core-prim . file-size-in-bytes) (r2d89 core-prim . file-writable?) (r2d88 core-prim . file-executable?) (r2d87 core-prim . file-readable?) (r2d86 core-prim . file-regular?) (r2d85 core-prim . file-symbolic-link?) (r2d84 core-prim . file-directory?) (r2d83 core-prim . create-symbolic-link) (r2d82 core-prim . rename-file) (r2d81 core-prim . delete-directory) (r2d80 core-prim . create-directory) (r2d7f core-prim . create-mosh-cache-dir) (r2d7e core-prim . get-environment-variables) (r2d7d core-prim . current-exception-handler) (r2d7c core-prim . get-environment-variable) (r2d7b core-prim . join-wraps) (r2d7a core-prim . id->real-label) (r2d79 core-prim . same-marks?) (r2d78 core-prim . same-marks*?) (r2d77 core-prim . get-timeofday) (r2d76 core-prim . get-command-line) (r2d75 core-prim . sys-display) (r2d74 core-prim . whereis) (r2d73 core-prim . register) (r2d72 core-prim . vm-join!) (r2d71 core-prim . vm-set-value!) (r2d70 core-prim . vm?) (r2d6f core-prim . main-vm?) (r2d6e core-prim . vm-eval) (r2d6d core-prim . vm-self) (r2d6c core-prim . vm-start!) (r2d6b core-prim . make-vm) (r2d6a core-prim . mutex-try-lock!) (r2d69 core-prim . mutex-unlock!) (r2d68 core-prim . mutex-lock!) (r2d67 core-prim . mutex?) (r2d66 core-prim . make-mutex) (r2d65 core-prim . condition-variable-notify-all!) (r2d64 core-prim . condition-variable-notify!) (r2d63 core-prim . condition-variable-wait!) (r2d62 core-prim . make-condition-variable) (r2d61 core-prim . write/ss) (r2d60 core-prim . mosh-executable-path) (r2d5f core-prim . make-file-options) (r2d5e core-prim . source-info) (r2d5d core-prim . make-compiler-instruction) (r2d5c core-prim . make-instruction) (r2d5b core-prim . set-annotation!) (r2d5a core-prim . get-annotation) (r2d59 core-prim . annotated-pair?) (r2d58 core-prim . annotated-cons) (r2d57 core-prim . set-source-info!) (r2d56 core-prim . bignum?) (r2d55 core-prim . fast-equal?) (r2d54 core-prim . fasl-read) (r2d53 core-prim . fasl-write) (r2d52 core-prim . time-usage) (r2d51 core-prim . os-constant) (r2d50 core-prim . condition-printer) (r2d4f core-prim . disasm) (r5aa core-prim . make-parameter) (r2d4e core-prim . socket-port) (r2d4d core-prim . socket-shutdown) (r2d4c core-prim . socket-close) (r2d4b core-prim . socket-send) (r2d4a core-prim . socket-recv!) (r2d49 core-prim . socket-recv) (r2d48 core-prim . make-server-socket) (r2d47 core-prim . make-client-socket) (r2d46 core-prim . socket-accept) (r2d45 core-prim . socket?) (r2d44 core-prim . string-upcase) (r2d43 core-prim . string-titlecase) (r2d42 core-prim . string-normalize-nfkd) (r2d41 core-prim . string-normalize-nfkc) (r2d40 core-prim . string-normalize-nfd) (r2d3f core-prim . string-normalize-nfc) (r2d3e core-prim . string-foldcase) (r2d3d core-prim . string-downcase) (r2d3c core-prim . string-ci>?) (r2d3b core-prim . string-ci>=?) (r2d3a core-prim . string-ci=?) (r2d39 core-prim . string-ci<?) (r2d38 core-prim . string-ci<=?) (r2d37 core-prim . char-whitespace?) (r2d36 core-prim . char-upper-case?) (r2d35 core-prim . char-title-case?) (r2d34 core-prim . char-numeric?) (r2d33 core-prim . char-lower-case?) (r2d32 core-prim . char-general-category) (r2d31 core-prim . char-upcase) (r2d30 core-prim . char-titlecase) (r2d2f core-prim . char-foldcase) (r2d2e core-prim . char-downcase) (r2d2d core-prim . char-ci>?) (r2d2c core-prim . char-ci>=?) (r2d2b core-prim . char-ci=?) (r2d2a core-prim . char-ci<?) (r2d29 core-prim . char-ci<=?) (r2d28 core-prim . char-alphabetic?) (rbae core-prim . make-variable-transformer) (re65 core-prim . identifier?) (re51 core-prim . generate-temporaries) (re53 core-prim . free-identifier=?) (re69 core-prim . syntax->datum) (re67 core-prim . datum->syntax) (re55 core-prim . bound-identifier=?) (r2d27 core-prim . record-type-descriptor?) (r2d26 core-prim . record-predicate) (r2d25 core-prim . record-mutator) (r2d24 core-prim . record-constructor) (r2d23 core-prim . record-accessor) (r2d22 core-prim . make-record-type-descriptor) (r2d21 core-prim . make-record-constructor-descriptor) (r2d20 core-prim . record?) (r2d1f core-prim . record-type-uid) (r2d1e core-prim . record-type-sealed?) (r2d1d core-prim . record-type-parent) (r2d1c core-prim . record-type-opaque?) (r2d1b core-prim . record-type-name) (r2d1a core-prim . record-type-generative?) (r2d19 core-prim . record-type-field-names) (r2d18 core-prim . record-rtd) (r2d17 core-prim . record-field-mutable?) (r2d16 core-prim . delete-file) (r2d15 core-prim . file-exists?) (r2d14 core-prim . vector-sort!) (r2d13 core-prim . vector-sort) (r2d12 core-prim . list-sort) (r2d11 core-prim . symbol-hash) (r2d10 core-prim . string-ci-hash) (r2d0f core-prim . string-hash) (r2d0e core-prim . equal-hash) (r2d0d core-prim . hashtable-equivalence-function) (r2d0c core-prim . make-hashtable) (r2d0b core-prim . hashtable-hash-function) (r2d0a core-prim . make-eqv-hashtable) (r2d09 core-prim . make-eq-hashtable) (r2d08 core-prim . hashtable?) (r2d07 core-prim . hashtable-update!) (r2d06 core-prim . hashtable-size) (r2d05 core-prim . hashtable-set!) (r2d04 core-prim . hashtable-ref) (r2d03 core-prim . hashtable-mutable?) (r2d02 core-prim . hashtable-keys) (r2d01 core-prim . hashtable-entries) (r2d00 core-prim . hashtable-delete!) (r2cff core-prim . hashtable-copy) (r2cfe core-prim . hashtable-contains?) (r2cfd core-prim . hashtable-clear!) (r2cfc core-prim . call-with-output-file) (r2cfb core-prim . call-with-input-file) (r2cfa core-prim . write-char) (r2cf9 core-prim . write) (r2cf8 core-prim . with-output-to-file) (r2cf7 core-prim . with-input-from-file) (r2cf6 core-prim . read-char) (r2cf5 core-prim . read) (r2cf4 core-prim . peek-char) (r2cf3 core-prim . open-output-file) (r2cf2 core-prim . open-input-file) (r2cf1 core-prim . newline) (r2cf0 core-prim . display) (r2cef core-prim . close-output-port) (r2cee core-prim . close-input-port) (r2ced core-prim . eof-object?) (r2cec core-prim . eof-object) (r2ceb core-prim . current-error-port) (r2cea core-prim . current-output-port) (r2ce9 core-prim . current-input-port) (r2ce8 core-prim . output-port?) (r2ce7 core-prim . input-port?) (r2ce6 core-prim . utf-8-codec) (r2ce5 core-prim . utf-16-codec) (r2ce4 core-prim . transcoder-error-handling-mode) (r2ce3 core-prim . transcoder-eol-style) (r2ce2 core-prim . transcoder-codec) (r2ce1 core-prim . transcoded-port) (r2ce0 core-prim . textual-port?) (r2cdf core-prim . string->bytevector) (r2cde core-prim . standard-output-port) (r2cdd core-prim . standard-input-port) (r2cdc core-prim . standard-error-port) (r2cdb core-prim . set-port-position!) (r2cda core-prim . put-u8) (r2cd9 core-prim . put-string) (r2cd8 core-prim . put-datum) (r2cd7 core-prim . put-char) (r2cd6 core-prim . put-bytevector) (r2cd5 core-prim . port?) (r2cd4 core-prim . port-transcoder) (r2cd3 core-prim . port-position) (r2cd2 core-prim . port-has-set-port-position!?) (r2cd1 core-prim . port-has-port-position?) (r2cd0 core-prim . port-eof?) (r2ccf core-prim . output-port-buffer-mode) (r2cce core-prim . open-string-output-port) (r2ccd core-prim . open-string-input-port) (r2ccc core-prim . open-file-output-port) (r2ccb core-prim . open-file-input/output-port) (r2cca core-prim . open-file-input-port) (r2cc9 core-prim . open-bytevector-output-port) (r2cc8 core-prim . open-bytevector-input-port) (r2cc7 core-prim . native-transcoder) (r2cc6 core-prim . native-eol-style) (r2cc5 core-prim . make-transcoder) (r2cc4 core-prim . latin-1-codec) (r2cc3 core-prim . make-i/o-write-error) (r2cc2 core-prim . make-i/o-read-error) (r2cc1 core-prim . make-i/o-port-error) (r2cc0 core-prim . make-i/o-invalid-position-error) (r2cbf core-prim . make-i/o-filename-error) (r2cbe core-prim . make-i/o-file-protection-error) (r2cbd core-prim . make-i/o-file-is-read-only-error) (r2cbc core-prim . make-i/o-file-does-not-exist-error) (r2cbb core-prim . make-i/o-file-already-exists-error) (r2cba core-prim . make-i/o-error) (r2cb9 core-prim . make-i/o-encoding-error) (r2cb8 core-prim . make-i/o-decoding-error) (r2cb7 core-prim . make-custom-textual-output-port) (r2cb6 core-prim . make-custom-textual-input/output-port) (r2cb5 core-prim . make-custom-textual-input-port) (r2cb4 core-prim . make-custom-binary-output-port) (r2cb3 core-prim . make-custom-binary-input/output-port) (r2cb2 core-prim . make-custom-binary-input-port) (r2cb1 core-prim . make-bytevector) (r2cb0 core-prim . lookahead-u8) (r2caf core-prim . lookahead-char) (r2cae core-prim . i/o-write-error?) (r2cad core-prim . i/o-read-error?) (r2cac core-prim . i/o-port-error?) (r2cab core-prim . i/o-invalid-position-error?) (r2caa core-prim . i/o-filename-error?) (r2ca9 core-prim . i/o-file-protection-error?) (r2ca8 core-prim . i/o-file-is-read-only-error?) (r2ca7 core-prim . i/o-file-does-not-exist-error?) (r2ca6 core-prim . i/o-file-already-exists-error?) (r2ca5 core-prim . i/o-error?) (r2ca4 core-prim . i/o-error-position) (r2ca3 core-prim . i/o-error-port) (r2ca2 core-prim . i/o-error-filename) (r2ca1 core-prim . i/o-encoding-error?) (r2ca0 core-prim . i/o-encoding-error-char) (r2c9f core-prim . i/o-decoding-error?) (r2c9e core-prim . get-u8) (r2c9d core-prim . get-string-n!) (r2c9c core-prim . get-string-n) (r2c9b core-prim . get-string-all) (r2c9a core-prim . get-line) (r2c99 core-prim . get-datum) (r2c98 core-prim . get-char) (r2c97 core-prim . get-bytevector-some) (r2c96 core-prim . get-bytevector-n!) (r2c95 core-prim . get-bytevector-n) (r2c94 core-prim . get-bytevector-all) (r2c93 core-prim . flush-output-port) (r2c92 core-prim . close-port) (re3f core-prim . scheme-report-environment) (r2c91 core-prim . quotient) (re3d core-prim . null-environment) (r2c90 core-prim . remainder) (r2c8f core-prim . modulo) (r2c8e core-prim . inexact->exact) (r2c8d core-prim . force) (r2c8c core-prim . exact->inexact) (r2c8b core-prim . make-promise) (r2c8a core-prim . exit) (r291c core-prim . command-line) (r2c89 core-prim . string-fill!) (r2c88 core-prim . string-set!) (r2c87 core-prim . set-cdr!) (r2c86 core-prim . set-car!) (r2c85 core-prim . remove) (r2c84 core-prim . remv) (r2c83 core-prim . remp) (r2c82 core-prim . remq) (r2c81 core-prim . partition) (r2c80 core-prim . memv) (r2c7f core-prim . memq) (r2c7e core-prim . memp) (r2c7d core-prim . member) (r2c7c core-prim . exists) (r2c7b core-prim . for-all) (r2c7a core-prim . fold-right) (r2c79 core-prim . fold-left) (r2c78 core-prim . find) (r2c77 core-prim . filter) (r2c76 core-prim . cons*) (r2c75 core-prim . assv) (r2c74 core-prim . assq) (r2c73 core-prim . assp) (r2c72 core-prim . assoc) (r2c71 core-prim . call-with-string-output-port) (r2c70 core-prim . call-with-port) (r2c6f core-prim . call-with-bytevector-output-port) (r2c6e core-prim . bytevector->string) (r2c6d core-prim . buffer-mode?) (r2c6c core-prim . binary-port?) (r2c6b core-prim . with-exception-handler) (r2c6a core-prim . raise-continuable) (r2c69 core-prim . raise) (re43 core-prim . eval) (re3b core-prim . environment) (r2c68 core-prim . make-enumeration) (r2c67 core-prim . enum-set=?) (r2c66 core-prim . enum-set-universe) (r2c65 core-prim . enum-set-union) (r2c64 core-prim . enum-set-subset?) (r2c63 core-prim . enum-set-projection) (r2c62 core-prim . enum-set-member?) (r2c61 core-prim . enum-set-intersection) (r2c60 core-prim . enum-set-indexer) (r2c5f core-prim . enum-set-difference) (r2c5e core-prim . enum-set-constructor) (r2c5d core-prim . enum-set-complement) (r2c5c core-prim . enum-set->list) (r2c5b core-prim . who-condition?) (r2c5a core-prim . warning?) (r2c59 core-prim . violation?) (r2c58 core-prim . undefined-violation?) (r2c57 core-prim . syntax-violation?) (r2c56 core-prim . syntax-violation-subform) (r2c55 core-prim . syntax-violation-form) (re63 core-prim . syntax-violation) (r2c54 core-prim . simple-conditions) (r2c53 core-prim . serious-condition?) (r2c52 core-prim . non-continuable-violation?) (r2c51 core-prim . message-condition?) (r2c50 core-prim . make-who-condition) (r2c4f core-prim . make-warning) (r2c4e core-prim . make-violation) (r2c4d core-prim . make-undefined-violation) (r2c4c core-prim . make-syntax-violation) (r2c4b core-prim . make-serious-condition) (r2c4a core-prim . make-non-continuable-violation) (r2c49 core-prim . make-message-condition) (r2c48 core-prim . make-lexical-violation) (r2c47 core-prim . make-irritants-condition) (r2c46 core-prim . make-implementation-restriction-violation) (r2c45 core-prim . make-error) (r2c44 core-prim . make-assertion-violation) (r2c43 core-prim . lexical-violation?) (r2c42 core-prim . irritants-condition?) (r2c41 core-prim . implementation-restriction-violation?) (r2c40 core-prim . error?) (r2c3f core-prim . condition-who) (r2c3e core-prim . condition-predicate) (r2c3d core-prim . condition-message) (r2c3c core-prim . condition-irritants) (r2c3b core-prim . condition-accessor) (r2c3a core-prim . condition) (r2c39 core-prim . assertion-violation?) (r2c38 core-prim . condition?) (r2c37 core-prim . utf32->string) (r2c36 core-prim . utf16->string) (r2c35 core-prim . utf8->string) (r2c34 core-prim . uint-list->bytevector) (r2c33 core-prim . u8-list->bytevector) (r2c32 core-prim . string->utf8) (r2c31 core-prim . string->utf32) (r2c30 core-prim . string->utf16) (r2c2f core-prim . sint-list->bytevector) (r2c2e core-prim . native-endianness) (r2c2d core-prim . bytevector?) (r2c2c core-prim . bytevector=?) (r2c2b core-prim . bytevector-uint-set!) (r2c2a core-prim . bytevector-uint-ref) (r2c29 core-prim . bytevector-u8-set!) (r2c28 core-prim . bytevector-u8-ref) (r2c27 core-prim . bytevector-u64-set!) (r2c26 core-prim . bytevector-u64-ref) (r2c25 core-prim . bytevector-u64-native-set!) (r2c24 core-prim . bytevector-u64-native-ref) (r2c23 core-prim . bytevector-u32-set!) (r2c22 core-prim . bytevector-u32-ref) (r2c21 core-prim . bytevector-u32-native-set!) (r2c20 core-prim . bytevector-u32-native-ref) (r2c1f core-prim . bytevector-u16-set!) (r2c1e core-prim . bytevector-u16-ref) (r2c1d core-prim . bytevector-u16-native-set!) (r2c1c core-prim . bytevector-u16-native-ref) (r2c1b core-prim . bytevector-sint-set!) (r2c1a core-prim . bytevector-sint-ref) (r2c19 core-prim . bytevector-s8-set!) (r2c18 core-prim . bytevector-s8-ref) (r2c17 core-prim . bytevector-s64-set!) (r2c16 core-prim . bytevector-s64-ref) (r2c15 core-prim . bytevector-s64-native-set!) (r2c14 core-prim . bytevector-s64-native-ref) (r2c13 core-prim . bytevector-s32-set!) (r2c12 core-prim . bytevector-s32-ref) (r2c11 core-prim . bytevector-s32-native-set!) (r2c10 core-prim . bytevector-s32-native-ref) (r2c0f core-prim . bytevector-s16-set!) (r2c0e core-prim . bytevector-s16-ref) (r2c0d core-prim . bytevector-s16-native-set!) (r2c0c core-prim . bytevector-s16-native-ref) (r2c0b core-prim . bytevector-length) (r2c0a core-prim . bytevector-ieee-single-ref) (r2c09 core-prim . bytevector-ieee-single-set!) (r2c08 core-prim . bytevector-ieee-single-native-set!) (r2c07 core-prim . bytevector-ieee-single-native-ref) (r2c06 core-prim . bytevector-ieee-double-set!) (r2c05 core-prim . bytevector-ieee-double-ref) (r2c04 core-prim . bytevector-ieee-double-native-set!) (r2c03 core-prim . bytevector-ieee-double-native-ref) (r2c02 core-prim . bytevector-fill!) (r2c01 core-prim . bytevector-copy!) (r2c00 core-prim . bytevector-copy) (r2bff core-prim . bytevector->uint-list) (r2bfe core-prim . bytevector->u8-list) (r2bfd core-prim . bytevector->sint-list) (r2bfc core-prim . no-nans-violation?) (r2bfb core-prim . no-infinities-violation?) (r2bfa core-prim . make-no-nans-violation) (r2bf9 core-prim . make-no-infinities-violation) (r2bf8 core-prim . real->flonum) (r2bf7 core-prim . flzero?) (r2bf6 core-prim . fltruncate) (r2bf5 core-prim . fltan) (r2bf4 core-prim . flsqrt) (r2bf3 core-prim . flsin) (r2bf2 core-prim . flround) (r2bf1 core-prim . flpositive?) (r2bf0 core-prim . flonum?) (r2bef core-prim . flodd?) (r2bee core-prim . flnumerator) (r2bed core-prim . flnegative?) (r2bec core-prim . flnan?) (r2beb core-prim . flmod0) (r2bea core-prim . flmod) (r2be9 core-prim . flmin) (r2be8 core-prim . flmax) (r2be7 core-prim . fllog) (r2be6 core-prim . flinteger?) (r2be5 core-prim . flinfinite?) (r2be4 core-prim . flfloor) (r2be3 core-prim . flfinite?) (r2be2 core-prim . flexpt) (r2be1 core-prim . flexp) (r2be0 core-prim . fleven?) (r2bdf core-prim . fldiv0-and-mod0) (r2bde core-prim . fldiv0) (r2bdd core-prim . fldiv-and-mod) (r2bdc core-prim . fldiv) (r2bdb core-prim . fldenominator) (r2bda core-prim . flcos) (r2bd9 core-prim . flceiling) (r2bd8 core-prim . flatan) (r2bd7 core-prim . flasin) (r2bd6 core-prim . flacos) (r2bd5 core-prim . flabs) (r2bd4 core-prim . fl>?) (r2bd3 core-prim . fl>=?) (r2bd2 core-prim . fl=?) (r2bd1 core-prim . fl<?) (r2bd0 core-prim . fl<=?) (r2bcf core-prim . fl/) (r2bce core-prim . fl-) (r2bcd core-prim . fl+) (r2bcc core-prim . fl*) (r2bcb core-prim . fixnum->flonum) (r2bca core-prim . fxzero?) (r2bc9 core-prim . fxxor) (r2bc8 core-prim . fxrotate-bit-field) (r2bc7 core-prim . fxreverse-bit-field) (r2bc6 core-prim . fxpositive?) (r2bc5 core-prim . fxodd?) (r2bc4 core-prim . fxnot) (r2bc3 core-prim . fxnegative?) (r2bc2 core-prim . fxmod0) (r2bc1 core-prim . fxmod) (r2bc0 core-prim . fxmin) (r2bbf core-prim . fxmax) (r2bbe core-prim . fxlength) (r2bbd core-prim . fxior) (r2bbc core-prim . fxif) (r2bbb core-prim . fxfirst-bit-set) (r2bba core-prim . fxeven?) (r2bb9 core-prim . fxdiv0-and-mod0) (r2bb8 core-prim . fxdiv0) (r2bb7 core-prim . fxdiv-and-mod) (r2bb6 core-prim . fxdiv) (r2bb5 core-prim . fxcopy-bit-field) (r2bb4 core-prim . fxcopy-bit) (r2bb3 core-prim . fxbit-set?) (r2bb2 core-prim . fxbit-field) (r2bb1 core-prim . fxbit-count) (r2bb0 core-prim . fxarithmetic-shift-right) (r2baf core-prim . fxarithmetic-shift-left) (r2bae core-prim . fxarithmetic-shift) (r2bad core-prim . fxand) (r2bac core-prim . fx>?) (r2bab core-prim . fx>=?) (r2baa core-prim . fx=?) (r2ba9 core-prim . fx<?) (r2ba8 core-prim . fx<=?) (r2ba7 core-prim . fx-/carry) (r2ba6 core-prim . fx-) (r2ba5 core-prim . fx+/carry) (r2ba4 core-prim . fx+) (r2ba3 core-prim . fx*/carry) (r2ba2 core-prim . fx*) (r2ba1 core-prim . greatest-fixnum) (r2ba0 core-prim . least-fixnum) (r2b9f core-prim . fixnum-width) (r2b9e core-prim . fixnum?) (r2b9d core-prim . bitwise-rotate-bit-field) (r2b9c core-prim . bitwise-reverse-bit-field) (r2b9b core-prim . bitwise-length) (r2b9a core-prim . bitwise-if) (r2b99 core-prim . bitwise-first-bit-set) (r2b98 core-prim . bitwise-copy-bit-field) (r2b97 core-prim . bitwise-copy-bit) (r2b96 core-prim . bitwise-bit-set?) (r2b95 core-prim . bitwise-bit-field) (r2b94 core-prim . bitwise-bit-count) (r2b93 core-prim . bitwise-xor) (r2b92 core-prim . bitwise-ior) (r2b91 core-prim . bitwise-and) (r2b90 core-prim . bitwise-not) (r2b8f core-prim . bitwise-arithmetic-shift-right) (r2b8e core-prim . bitwise-arithmetic-shift-left) (r2b8d core-prim . bitwise-arithmetic-shift) (r2b8c core-prim . zero?) (r2b8b core-prim . vector?) (r2b8a core-prim . vector-set!) (r2b89 core-prim . vector-ref) (r2b88 core-prim . vector-map) (r2b87 core-prim . vector-length) (r2b86 core-prim . vector-for-each) (r2b85 core-prim . vector-fill!) (r2b84 core-prim . vector->list) (r2b83 core-prim . vector) (r2b82 core-prim . values) (r2b81 core-prim . truncate) (r2b80 core-prim . tan) (r2b7f core-prim . symbol?) (r2b7e core-prim . symbol=?) (r2b7d core-prim . symbol->string) (r2b7c core-prim . substring) (r2b7b core-prim . string?) (r2b7a core-prim . string>?) (r2b79 core-prim . string>=?) (r2b78 core-prim . string=?) (r2b77 core-prim . string<?) (r2b76 core-prim . string<=?) (r2b75 core-prim . string-ref) (r2b74 core-prim . string-length) (r2b73 core-prim . string-for-each) (r2b72 core-prim . string-copy) (r2b71 core-prim . string-append) (r2b70 core-prim . string->symbol) (r2b6f core-prim . string->number) (r2b6e core-prim . string->list) (r2b6d core-prim . string) (r2b6c core-prim . sqrt) (r2b6b core-prim . sin) (r2b6a core-prim . round) (r2b69 core-prim . reverse) (r2b68 core-prim . real?) (r2b67 core-prim . real-valued?) (r2b66 core-prim . real-part) (r2b65 core-prim . rationalize) (r2b64 core-prim . rational?) (r2b63 core-prim . rational-valued?) (r2b62 core-prim . procedure?) (r2b61 core-prim . positive?) (r2b60 core-prim . pair?) (r2b5f core-prim . odd?) (r2b5e core-prim . numerator) (r2b5d core-prim . number?) (r2b5c core-prim . number->string) (r2b5b core-prim . null?) (r2b5a core-prim . not) (r2b59 core-prim . negative?) (r2b58 core-prim . nan?) (r2b57 core-prim . min) (r2b56 core-prim . max) (r2b55 core-prim . map) (r2b54 core-prim . make-vector) (r2b53 core-prim . make-string) (r2b52 core-prim . make-rectangular) (r2b51 core-prim . make-polar) (r2b50 core-prim . magnitude) (r2b4f core-prim . log) (r2b4e core-prim . list?) (r2b4d core-prim . list-tail) (r2b4c core-prim . list-ref) (r2b4b core-prim . list->vector) (r2b4a core-prim . list->string) (r2b49 core-prim . list) (r2b48 core-prim . length) (r2b47 core-prim . lcm) (r2b46 core-prim . integer?) (r2b45 core-prim . integer-valued?) (r2b44 core-prim . integer->char) (r2b43 core-prim . infinite?) (r2b42 core-prim . inexact?) (r2b41 core-prim . inexact) (r2b40 core-prim . imag-part) (r2b3f core-prim . gcd) (r2b3e core-prim . for-each) (r2b3d core-prim . floor) (r2b3c core-prim . finite?) (r2b3b core-prim . expt) (r2b3a core-prim . exp) (r2b39 core-prim . exact?) (r2b38 core-prim . exact-integer-sqrt) (r2b37 core-prim . exact) (r2b36 core-prim . even?) (r2b35 core-prim . error) (r2b34 core-prim . eqv?) (r2b33 core-prim . equal?) (r2b32 core-prim . eq?) (r2b31 core-prim . dynamic-wind) (r2b30 core-prim . div0-and-mod0) (r2b2f core-prim . mod0) (r2b2e core-prim . div0) (r2b2d core-prim . div-and-mod) (r2b2c core-prim . mod) (r2b2b core-prim . div) (r2b2a core-prim . denominator) (r2b29 core-prim . cos) (r2b28 core-prim . cons) (r2b27 core-prim . complex?) (r2b26 core-prim . char?) (r2b25 core-prim . char>?) (r2b24 core-prim . char>=?) (r2b23 core-prim . char=?) (r2b22 core-prim . char<?) (r2b21 core-prim . char<=?) (r2b20 core-prim . char->integer) (r2b1f core-prim . ceiling) (r2b1e core-prim . call-with-values) (r2b1d core-prim . call/cc) (r2b1c core-prim . call-with-current-continuation) (r2b1b core-prim . cddddr) (r2b1a core-prim . cdddar) (r2b19 core-prim . cddadr) (r2b18 core-prim . cddaar) (r2b17 core-prim . cdaddr) (r2b16 core-prim . cdadar) (r2b15 core-prim . cdaadr) (r2b14 core-prim . cdaaar) (r2b13 core-prim . cadddr) (r2b12 core-prim . caddar) (r2b11 core-prim . cadadr) (r2b10 core-prim . cadaar) (r2b0f core-prim . caaddr) (r2b0e core-prim . caadar) (r2b0d core-prim . caaadr) (r2b0c core-prim . caaaar) (r2b0b core-prim . cdddr) (r2b0a core-prim . cddar) (r2b09 core-prim . cdadr) (r2b08 core-prim . cdaar) (r2b07 core-prim . caddr) (r2b06 core-prim . cadar) (r2b05 core-prim . caadr) (r2b04 core-prim . caaar) (r2b03 core-prim . cddr) (r2b02 core-prim . cdar) (r2b01 core-prim . cadr) (r2b00 core-prim . caar) (r2aff core-prim . cdr) (r2afe core-prim . car) (r2afd core-prim . boolean?) (r2afc core-prim . boolean=?) (r2afb core-prim . atan) (r2afa core-prim . assertion-violation) (re5d core-prim . assertion-error) (r2af9 core-prim . asin) (r2af8 core-prim . apply) (r2af7 core-prim . append) (r2af6 core-prim . angle) (r2af5 core-prim . acos) (r2af4 core-prim . abs) (r2af3 core-prim . /) (r2af2 core-prim . *) (r2af1 core-prim . -) (r2af0 core-prim . +) (r2aef core-prim . >=) (r2aee core-prim . >) (r2aed core-prim . =) (r2aec core-prim . <=) (r2aeb core-prim . <) (r2aea core-prim . library) (r2ae9 $core-rtd &no-nans-rtd &no-nans-rcd) (r2ae8 $core-rtd &no-infinities-rtd &no-infinities-rcd) (r2ae7 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (r2ae6 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (r2ae5 $core-rtd &i/o-port-rtd &i/o-port-rcd) (r2ae4 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (r2ae3 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (r2ae2 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (r2ae1 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (r2ae0 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (r2adf $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (r2ade $core-rtd &i/o-write-rtd &i/o-write-rcd) (r2add $core-rtd &i/o-read-rtd &i/o-read-rcd) (r2adc $core-rtd &i/o-rtd &i/o-rcd) (r2adb $core-rtd &undefined-rtd &undefined-rcd) (r2ada $core-rtd &syntax-rtd &syntax-rcd) (r2ad9 $core-rtd &lexical-rtd &lexical-rcd) (r2ad8 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (r2ad7 $core-rtd &non-continuable-rtd &non-continuable-rcd) (r2ad6 $core-rtd &who-rtd &who-rcd) (r2ad5 $core-rtd &irritants-rtd &irritants-rcd) (r2ad4 $core-rtd &assertion-rtd &assertion-rcd) (r2ad3 $core-rtd &violation-rtd &violation-rcd) (r2ad2 $core-rtd &error-rtd &error-rcd) (r2ad1 $core-rtd &serious-rtd &serious-rcd) (r2ad0 $core-rtd &warning-rtd &warning-rcd) (r2acf $core-rtd &message-rtd &message-rcd) (r2ace $core-rtd &condition-rtd &condition-rcd) (r2acd macro . define-condition-type) (r2acc macro . define-enumeration) (r2acb macro . define-record-type) (r2aca macro . parent-rtd) (r2ac9 macro . nongenerative) (r2ac8 macro . opaque) (r2ac7 macro . sealed) (r2ac6 macro . protocol) (r2ac5 macro . parent) (r2ac4 macro . immutable) (r2ac3 macro . mutable) (r2ac2 macro . fields) (r2ac1 macro . error-handling-mode) (r2ac0 macro . file-options) (r2abf macro . buffer-mode) (r2abe macro . eol-style) (r2abd macro . guard) (r2abc macro . trace-define) (r2abb macro . trace-lambda) (r2aba macro . unsyntax-splicing) (r2ab9 macro . unsyntax) (r2ab8 macro . unquote-splicing) (r2ab7 macro . unquote) (r2ab6 macro . _) (r2ab5 macro . else) (r2ab4 macro . =>) (r2ab3 macro . ...) (r2ab2 macro . assert) (r2ab1 macro . endianness) (r2ab0 macro . delay) (r2aaf macro . time) (r2aae macro . do) (r2aad macro . cond) (r2aac macro . let*) (r2aab macro . let*-values) (r2aaa macro . let-values) (r2aa9 macro . identifier-syntax) (r2aa8 macro . with-syntax) (r2aa7 macro . quasisyntax) (r2aa6 macro . quasiquote) (r2aa5 macro . syntax-rules) (r2aa4 macro . include) (r2aa3 macro . define-struct) (r2aa2 core-macro . record-constructor-descriptor) (r2aa1 core-macro . record-type-descriptor) (r2aa0 macro . case) (r2a9f macro . parameterize) (r2a9e macro . unless) (r2a9d macro . when) (r2a9c core-macro . or) (r2a9b core-macro . and) (r2a9a core-macro . if) (r2a99 core-macro . let) (r2a98 core-macro . letrec*) (r2a97 core-macro . letrec) (r2a96 core-macro . type-descriptor) (r2a95 core-macro . case-lambda) (r2a94 core-macro . lambda) (r2a93 core-macro . syntax) (r2a92 core-macro . syntax-case) (r2a91 core-macro . quote) (r2a90 core-macro . foreign-call) (r2a8f letrec-syntax) (r2a8e let-syntax) (r2a8d set!) (r2a8c import) (r2a8b begin) (r2a8a module) (r2a89 define-syntax) (r2a88 define)) values values '#f '#f '#f '#f) (r997@r7e3@install-library 'r2e54 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . r2dfb) (eval-core . r2dfa) (set-symbol-value! . r2df9) (symbol-value . r2df8) (gensym . r2df7) (void . r2df6)) '() values values '#f '#f '#f '#f) (r997@r7e3@install-library 'r2e55 '(mosh) '() '() '() '() '((set-symbol-value! . r2df9) (symbol-value . r2df8) (regexp? . r2df4) (read-line . r2df3) (ungensym . r2df1) (alist->eq-hash-table . r2df0) (assoc-ref . r2def) (print . r2dee) (format . r2ded) (host-os . r2dec) (library-path . r7c2) (standard-library-path . r2deb) (file-newer? . r2de5) (stat-mtime . r2de4) (digit->integer . r2de0) (call-with-string-input-port . r2ddf) (call-with-string-io . r2dde) (string-split . r2ddd) (bytevector-for-each . r2ddc) (string->regexp . r2ddb) (rxmatch . r2dda) (regexp-replace-all . r2dd9) (hashtable-fold-left . r2dd8) (hashtable-for-each . r2dd7) (set-current-directory! . r2dd2) (expand-path . r2dd1) (current-directory . r2dd0) (p . r2d90) (get-timeofday . r2d77) (get-command-line . r2d76) (sys-display . r2d75) (whereis . r2d74) (register . r2d73) (vm-join! . r2d72) (vm-set-value! . r2d71) (vm? . r2d70) (main-vm? . r2d6f) (vm-eval . r2d6e) (vm-self . r2d6d) (vm-start! . r2d6c) (make-vm . r2d6b) (mutex-try-lock! . r2d6a) (mutex-unlock! . r2d69) (mutex-lock! . r2d68) (mutex? . r2d67) (make-mutex . r2d66) (condition-variable-notify-all! . r2d65) (condition-variable-notify! . r2d64) (condition-variable-wait! . r2d63) (make-condition-variable . r2d62) (write/ss . r2d61) (mosh-executable-path . r2d60) (make-file-options . r2d5f) (source-info . r2d5e) (make-compiler-instruction . r2d5d) (make-instruction . r2d5c) (set-annotation! . r2d5b) (get-annotation . r2d5a) (annotated-pair? . r2d59) (annotated-cons . r2d58) (set-source-info! . r2d57) (bignum? . r2d56) (fast-equal? . r2d55) (fasl-read . r2d54) (fasl-write . r2d53) (time-usage . r2d52) (os-constant . r2d51) (condition-printer . r2d50) (time . r2aaf) (include . r2aa4)) '() values values '#f '#f '#f '#f) (r997@r7e3@install-library 'r2e56 '(system) '() '() '() '() '((gensym-prefix-set! . r2df2) (ssl-supported? . r2dea) (ssl-socket? . r2de9) (socket-sslize! . r2de8) (%monapi-name-whereis . r2de7) (%monapi-message-send . r2de6) (write-to-file . r2de3) (file->list . r2de2) (file->string . r2de1) (mosh-cache-dir . r5ac) (call-process . r2dd6) (local-tz-offset . r2dd5) (microseconds . r2dd4) (directory-list . r2dd3) (expand-path . r2dd1) (%getpid . r2dcf) (%spawn . r2dce) (%waitpid . r2dcd) (simple-struct-name . r2dcc) (simple-struct-set! . r2dcb) (simple-struct-ref . r2dca) (make-simple-struct . r2dc9) (simple-struct? . r2dc8) (pointer-ref-c-int64 . r2dc7) (pointer-ref-c-int32 . r2dc6) (pointer-ref-c-int16 . r2dc5) (pointer-ref-c-int8 . r2dc4) (pointer-ref-c-uint64 . r2dc3) (pointer-ref-c-uint32 . r2dc2) (pointer-ref-c-uint16 . r2dc1) (pointer-ref-c-uint8 . r2dc0) (pointer-set-c-uint64! . r2dbf) (pointer-set-c-uint32! . r2dbe) (pointer-set-c-uint16! . r2dbd) (pointer-set-c-uint8! . r2dbc) (pointer-set-c-int64! . r2dbb) (pointer-set-c-int32! . r2dba) (pointer-set-c-int16! . r2db9) (pointer-set-c-int8! . r2db8) (pointer-set-c-pointer! . r2db7) (pointer-set-c-double! . r2db6) (pointer-set-c-float! . r2db5) (pointer-set-c-long-long! . r2db4) (pointer-set-c-long! . r2db3) (pointer-set-c-int! . r2db2) (pointer-set-c-short! . r2db1) (pointer-set-c-char! . r2db0) (pointer-ref-c-pointer . r2daf) (pointer-ref-c-double . r2dae) (pointer-ref-c-float . r2dad) (pointer-ref-c-unsigned-long-long . r2dac) (pointer-ref-c-signed-long-long . r2dab) (pointer-ref-c-unsigned-long . r2daa) (pointer-ref-c-signed-long . r2da9) (pointer-ref-c-unsigned-int . r2da8) (pointer-ref-c-signed-int . r2da7) (pointer-ref-c-unsigned-short . r2da6) (pointer-ref-c-signed-short . r2da5) (pointer-ref-c-unsigned-char . r2da4) (pointer-ref-c-signed-char . r2da3) (pointer->integer . r2da2) (integer->pointer . r2da1) (pointer? . r2da0) (shared-errno . r2d9f) (%ffi-free-c-callback-trampoline . r2d9e) (%ffi-make-c-callback-trampoline . r2d9d) (%ffi-free . r2d9c) (%ffi-malloc . r2d9b) (%ffi-supported? . r2d9a) (%ffi-pointer->string . r2d99) (%ffi-call . r2d98) (%ffi-lookup . r2d97) (%ffi-open . r2d96) (null-terminated-utf8->string . r2d95) (null-terminated-bytevector->string . r2d94) (%exec . r2d93) (%fork . r2d92) (%pipe . r2d91) (open-output-string . r2d8f) (get-output-string . r2d8e) (file-stat-ctime . r2d8d) (file-stat-atime . r2d8c) (file-stat-mtime . r2d8b) (file-size-in-bytes . r2d8a) (file-writable? . r2d89) (file-executable? . r2d88) (file-readable? . r2d87) (file-regular? . r2d86) (file-symbolic-link? . r2d85) (file-directory? . r2d84) (create-symbolic-link . r2d83) (rename-file . r2d82) (delete-directory . r2d81) (create-directory . r2d80) (create-mosh-cache-dir . r2d7f) (get-environment-variables . r2d7e) (current-exception-handler . r2d7d) (get-environment-variable . r2d7c) (join-wraps . r2d7b) (id->real-label . r2d7a) (same-marks? . r2d79) (same-marks*? . r2d78) (disasm . r2d4f) (make-parameter . r5aa) (socket-port . r2d4e) (socket-shutdown . r2d4d) (socket-close . r2d4c) (socket-send . r2d4b) (socket-recv! . r2d4a) (socket-recv . r2d49) (make-server-socket . r2d48) (make-client-socket . r2d47) (socket-accept . r2d46) (socket? . r2d45) (parameterize . r2a9f)) '() values values '#f '#f '#f '#f)))
(begin (set! r2907@ref (unspecified)) (set! r2909@x* (unspecified)) (set! r290b@add-library-path! (unspecified)) (set! r290d@parse-and-add-library-path (unspecified)) (set! r290f@for-each-with-index (unspecified)) (set! r2911@rpad (unspecified)) (set! r2913@condition-printer/p (unspecified)) (set! r2915@record->field-alist (unspecified)) (set! r2917@map-with-index (unspecified)) (set! r2919@repl (unspecified)) (set! r291b@trace-printer (unspecified)) (set! r291d@command-line (unspecified)) (set! r291f@local-library-path (unspecified)) (set! r2921@load/args (unspecified)) (set! r2923@load (unspecified)) (set! r2925@ironscheme-build (unspecified)) (set! r2927@eval-top-level (unspecified)) (set! r2929@compile-system-libraries (unspecified)) (set! r292b@compile (unspecified)) (set! r292d@compile->closure (unspecified)) (set! r292f@pre-compile-r6rs-file (unspecified)) (set! r2931@load-r6rs-top-level (unspecified)) (set! r2933@load-r6rs-top-level-sexp (unspecified)) (set! r2935@prefix-inc (unspecified)) (set! r2937@prefix-inc! (unspecified)) (set! r2907@ref (lambda (r2972@rtd r2973@i r2974@x) (let ((r2978@val ((record-accessor r2972@rtd r2973@i) r2974@x))) (if (symbol? r2978@val) (ungensym r2978@val) r2978@val)))) (set! r2a6e@r2907@ref r2907@ref) (set! r2909@x* '()) (set! r2a6f@r2909@x* r2909@x*) (set! r290b@add-library-path! (lambda (r297a@path) (r987@r7c3@library-path (append (r987@r7c3@library-path) (list r297a@path))))) (set! r2a70@r290b@add-library-path! r290b@add-library-path!) (set! r290d@parse-and-add-library-path (lambda (r297c@paths r297d@message) (letrec* ((r2981@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((r2982@t r297c@paths)) (if r2982@t ((lambda (r2984@paths) (for-each (lambda (r2986@path) (if (file-exists? r2986@path) (r290b@add-library-path! (expand-path r2986@path)) (format (current-error-port) r297d@message r2986@path))) (string-split r2984@paths r2981@separator))) r2982@t) (void)))))) (set! r2a71@r290d@parse-and-add-library-path r290d@parse-and-add-library-path) (set! r290f@for-each-with-index (lambda (r2988@proc r2989@lst) (letrec ((r298c@loop (lambda (r298e@i r298f@lst) (if (null? r298f@lst) (if '#f '#f (void)) (begin (r2988@proc r298e@i (car r298f@lst)) (r298c@loop (+ r298e@i '1) (cdr r298f@lst))))))) (r298c@loop '1 r2989@lst)))) (set! r2a72@r290f@for-each-with-index r290f@for-each-with-index) (set! r2911@rpad (lambda (r2992@str r2993@pad r2994@n) (let ((r2998@rest (- r2994@n (string-length (format '"~a" r2992@str))))) (let r299e@loop ((r299a@rest r2998@rest) (r299b@ret (format '"~a" r2992@str))) (if (<= r299a@rest '0) r299b@ret (r299e@loop (- r299a@rest '1) (string-append r299b@ret r2993@pad))))))) (set! r2a73@r2911@rpad r2911@rpad) (set! r2913@condition-printer/p (lambda (r29a0@e r29a1@port) (letrec* ((r29a5@max-condition-len (apply max (map (lambda (r29b6@c) (string-length (symbol->string (record-type-name (record-rtd r29b6@c))))) (simple-conditions r29a0@e))))) (begin (display '" Condition components:\n" r29a1@port) (r290f@for-each-with-index (lambda (r29a6@i r29a7@x) (let ((r29aa@rtd (record-rtd r29a7@x)) (r29ab@fields-alist (r2915@record->field-alist r29a7@x))) (begin (format r29a1@port '" ~d. ~a" r29a6@i (r2911@rpad (symbol->string (record-type-name r29aa@rtd)) '" " r29a5@max-condition-len)) (if (null? r29ab@fields-alist) (newline r29a1@port) (void)) (let r29b2@loop ((r29ae@first '#t) (r29af@fields-alist r29ab@fields-alist)) (if (null? r29af@fields-alist) '() (let ((r29b4@field (car r29af@fields-alist))) (begin (if (not r29ae@first) (display (r2911@rpad '"" '" " (+ '4 r29a5@max-condition-len)) r29a1@port) (void)) (display '"       " r29a1@port) (display (car r29b4@field) r29a1@port) (display '": " r29a1@port) (write (cdr r29b4@field) r29a1@port) (newline r29a1@port) (r29b2@loop '#f (cdr r29af@fields-alist))))))))) (simple-conditions r29a0@e)))))) (set! r2a74@r2913@condition-printer/p r2913@condition-printer/p) (set! r2915@record->field-alist (lambda (r29b8@r) (letrec* ((r29bb@ref (lambda (r29c6@rtd r29c7@i r29c8@x) (let ((r29cc@val ((record-accessor r29c6@rtd r29c7@i) r29c8@x))) (if (symbol? r29cc@val) (ungensym r29cc@val) r29cc@val))))) (let r29c0@loop ((r29bc@ret '()) (r29bd@rtd (record-rtd r29b8@r))) (if r29bd@rtd (r29c0@loop (append r29bc@ret (r2917@map-with-index (lambda (r29c2@i r29c3@field) (cons r29c3@field (r29bb@ref r29bd@rtd r29c2@i r29b8@r))) (vector->list (record-type-field-names r29bd@rtd)))) (record-type-parent r29bd@rtd)) r29bc@ret))))) (set! r2a75@r2915@record->field-alist r2915@record->field-alist) (set! r2917@map-with-index (lambda (r29ce@proc r29cf@lst) (let r29d8@loop ((r29d2@i '0) (r29d3@lst r29cf@lst) (r29d4@ret '())) (if (null? r29d3@lst) (reverse r29d4@ret) (r29d8@loop (+ r29d2@i '1) (cdr r29d3@lst) (cons (r29ce@proc r29d2@i (car r29d3@lst)) r29d4@ret)))))) (set! r2a76@r2917@map-with-index r2917@map-with-index) (set! r2919@repl (lambda r29da@x (letrec* ((r29dd@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (r29e0@r29de) (lambda () (with-exception-handler (lambda (r29e2@e) ((call/cc (lambda (r29e4@r29df) (r29e0@r29de (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? r29e2@e) (r2913@condition-printer/p r29e2@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" r29e2@e))) (r29e4@r29df (lambda () (raise-continuable r29e2@e)))))))))) (lambda () (let r29ea@loop ((r29e6@line (get-line (current-input-port))) (r29e7@accum '"")) (letrec* ((r29ed@parentheses-ok? (lambda (r29f8@text) (let r2a00@loop ((r29fa@chars (string->list r29f8@text)) (r29fb@p0 '0) (r29fc@p1 '0)) (if (null? r29fa@chars) (= '0 r29fb@p0 r29fc@p1) (let ((r2a02@t (car r29fa@chars))) (if (memv r2a02@t '(#\()) (r2a00@loop (cdr r29fa@chars) (+ r29fb@p0 '1) r29fc@p1) (if (memv r2a02@t '(#\))) (r2a00@loop (cdr r29fa@chars) (- r29fb@p0 '1) r29fc@p1) (if (memv r2a02@t '(#\[)) (r2a00@loop (cdr r29fa@chars) r29fb@p0 (+ r29fc@p1 '1)) (if (memv r2a02@t '(#\])) (r2a00@loop (cdr r29fa@chars) r29fb@p0 (- r29fc@p1 '1)) (r2a00@loop (cdr r29fa@chars) r29fb@p0 r29fc@p1)))))))))) (r29ef@eval-string-print (lambda (r29f2@text) (if (not (or (string=? '"\n" r29f2@text) (= '0 (string-length r29f2@text)))) (call-with-values (lambda () (r2927@eval-top-level (call-with-port (open-string-input-port r29f2@text) read))) (lambda r29f4@out* (for-each (lambda (r29f6@out) (begin (write/ss r29f6@out) (newline))) r29f4@out*))) (void))))) (if (eof-object? r29e6@line) (begin (r29ef@eval-string-print r29e7@accum) (exit)) (let ((r29f0@current (string-append r29e7@accum r29e6@line))) (if (r29ed@parentheses-ok? r29f0@current) (r29ef@eval-string-print r29f0@current) (r29ea@loop (get-line (current-input-port)) r29f0@current)))))))))))) (newline) (r29dd@rec))))) (r29dd@rec)))) (set! r2a77@r2919@repl r2919@repl) (set! r291b@trace-printer (r6cd@r5ab@make-parameter write)) (set! r2a78@r291b@trace-printer r291b@trace-printer) (set! r291d@command-line (r6cd@r5ab@make-parameter (get-command-line))) (set! r2a79@r291d@command-line r291d@command-line) (set! r291f@local-library-path (lambda (r2a04@filename) (r987@r7c3@library-path))) (set! r2a7a@r291f@local-library-path r291f@local-library-path) (set! r2921@load/args (lambda (r2a06@filename . r2a08@args) (begin (apply r2931@load-r6rs-top-level r2a06@filename 'load r2a08@args) (void)))) (set! r2a7b@r2921@load/args r2921@load/args) (set! r2923@load (lambda (r2a0a@filename) (begin (apply r2931@load-r6rs-top-level r2a0a@filename 'load (r291d@command-line)) (void)))) (set! r2a7c@r2923@load r2923@load) (set! r2925@ironscheme-build (lambda () (r2923@load '"ironscheme-buildscript.ss"))) (set! r2a7d@r2925@ironscheme-build r2925@ironscheme-build) (set! r2927@eval-top-level (lambda (r2a0c@x) (r28e4@re44@eval r2a0c@x (r28fb@re72@interaction-environment)))) (set! r2a7e@r2927@eval-top-level r2927@eval-top-level) (set! r2929@compile-system-libraries (lambda () (r2927@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! r2a7f@r2929@compile-system-libraries r2929@compile-system-libraries) (set! r292b@compile (lambda (r2a0e@filename) (r2931@load-r6rs-top-level r2a0e@filename 'compile))) (set! r2a80@r292b@compile r292b@compile) (set! r292d@compile->closure (lambda (r2a10@filename) (r2931@load-r6rs-top-level r2a10@filename 'closure))) (set! r2a81@r292d@compile->closure r292d@compile->closure) (set! r292f@pre-compile-r6rs-file (lambda (r2a12@filename) (r2931@load-r6rs-top-level r2a12@filename 'compile))) (set! r2a82@r292f@pre-compile-r6rs-file r292f@pre-compile-r6rs-file) (set! r2931@load-r6rs-top-level (lambda (r2a14@filename r2a15@how . r2a18@args) (begin (r987@r7c3@library-path (r291f@local-library-path r2a14@filename)) (let ((r2a1a@x* (with-input-from-file r2a14@filename (lambda () (let r2a1c@f () (let ((r2a1e@x (r6bf@r58f@read-annotated))) (if (eof-object? r2a1e@x) '() (cons r2a1e@x (r2a1c@f))))))))) (let ((r2a20@t r2a15@how)) (if (memv r2a20@t '(closure)) (r28fa@re70@pre-compile-r6rs-top-level r2a1a@x*) (if (memv r2a20@t '(load)) (begin (r291d@command-line (cons r2a14@filename (car r2a18@args))) (r6ce@r5ad@mosh-cache-dir (create-mosh-cache-dir)) (if (r6ce@r5ad@mosh-cache-dir) (gensym-prefix-set! (r2937@prefix-inc! (string-append (r6ce@r5ad@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (r2a22@file) ((call/cc (lambda (r2a26@r2a24) (lambda () (with-exception-handler (lambda (r2a28@c) ((call/cc (lambda (r2a2a@r2a25) (r2a26@r2a24 (lambda () (if '#t '#t (r2a2a@r2a25 (lambda () (raise-continuable r2a28@c)))))))))) (lambda () (delete-file (string-append (r6ce@r5ad@mosh-cache-dir) '"/" r2a22@file))))))))) (directory-list (r6ce@r5ad@mosh-cache-dir))) (void)) (let ((r2a2c@compiled (r28f9@re6e@compile-r6rs-top-level r2a1a@x*))) (begin (if (and (r6ce@r5ad@mosh-cache-dir) (not (symbol-value '%disable-acc))) (r98b@r7cb@serialize-all r6c8@r5a1@serialize-library r724@r6dd@compile-core-expr) (void)) (r2a2c@compiled)))) (if (memv r2a20@t '(compile)) (begin (r28f9@re6e@compile-r6rs-top-level r2a1a@x*) (r98b@r7cb@serialize-all r6c8@r5a1@serialize-library r724@r6dd@compile-core-expr)) (if '#f '#f (void)))))))))) (set! r2a83@r2931@load-r6rs-top-level r2931@load-r6rs-top-level) (set! r2933@load-r6rs-top-level-sexp (lambda (r2a2e@import-spec r2a2f@thunk) (let ((r2a3a@r2a33 r987@r7c3@library-path) (r2a3b@r2a35 r6ce@r5ad@mosh-cache-dir) (r2a3c@r2a37 (r291f@local-library-path '"")) (r2a3d@r2a39 (create-mosh-cache-dir))) (let ((r2a42@swap (lambda () (begin (let ((r2a44@t (r2a3a@r2a33))) (begin (r2a3a@r2a33 r2a3c@r2a37) (set! r2a3c@r2a37 r2a44@t))) (let ((r2a46@t (r2a3b@r2a35))) (begin (r2a3b@r2a35 r2a3d@r2a39) (set! r2a3d@r2a39 r2a46@t))))))) (dynamic-wind r2a42@swap (lambda () (begin (if (r6ce@r5ad@mosh-cache-dir) (gensym-prefix-set! (r2937@prefix-inc! (string-append (r6ce@r5ad@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((r2a4c@r2a49 r291d@command-line) (r2a4d@r2a4b '())) (let ((r2a50@swap (lambda () (let ((r2a52@t (r2a4c@r2a49))) (begin (r2a4c@r2a49 r2a4d@r2a4b) (set! r2a4d@r2a4b r2a52@t)))))) (dynamic-wind r2a50@swap (lambda () ((r28f9@re6e@compile-r6rs-top-level (list (cons 'import r2a2e@import-spec) (list r2a2f@thunk))))) r2a50@swap))))) r2a42@swap))))) (set! r2a84@r2933@load-r6rs-top-level-sexp r2933@load-r6rs-top-level-sexp) (set! r2935@prefix-inc (lambda (r2a54@prefix-string) (let ((r2a56@prefix (symbol->string r2a54@prefix-string))) (let ((r2a58@len (string-length r2a56@prefix))) (let r2a60@loop ((r2a5a@i (- r2a58@len '1)) (r2a5b@carry? '#t) (r2a5c@accum '())) (if (< r2a5a@i '0) (string->symbol (list->string (if r2a5b@carry? (cons '#\a r2a5c@accum) r2a5c@accum))) (if r2a5b@carry? (let ((r2a62@next-integer (+ '1 (char->integer (string-ref r2a56@prefix r2a5a@i))))) (if (= r2a62@next-integer '123) (r2a60@loop (- r2a5a@i '1) '#f (cons '#\A r2a5c@accum)) (if (= r2a62@next-integer '91) (r2a60@loop (- r2a5a@i '1) '#t (cons '#\a r2a5c@accum)) (r2a60@loop (- r2a5a@i '1) '#f (cons (integer->char r2a62@next-integer) r2a5c@accum))))) (r2a60@loop (- r2a5a@i '1) '#f (cons (string-ref r2a56@prefix r2a5a@i) r2a5c@accum))))))))) (set! r2a85@r2935@prefix-inc r2935@prefix-inc) (set! r2937@prefix-inc! (lambda (r2a64@file) (begin (if (not (file-exists? r2a64@file)) (call-with-output-file r2a64@file (lambda (r2a66@port) (write 'd r2a66@port))) (void)) (let ((r2a68@prefix (call-with-input-file r2a64@file read))) (if (main-vm?) (let ((r2a6a@next-prefix (r2935@prefix-inc r2a68@prefix))) (begin (call-with-port (open-file-output-port r2a64@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (r2a6c@port) (write r2a6a@next-prefix r2a6c@port))) r2a68@prefix)) r2a68@prefix))))) (set! r2a86@r2937@prefix-inc! r2937@prefix-inc!) (begin (r98c@r7cd@current-precompiled-library-loader r6c9@r5a3@load-serialized-library) (set-symbol-value! 'load r2923@load) (set-symbol-value! 'pre-compile-r6rs-file r292f@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs r2927@eval-top-level) (set-symbol-value! 'int-env-syms r28db@re32@interaction-environment-symbols) (set-symbol-value! 'expanded2core r723@r6db@expanded->core) (set-symbol-value! 'trace-printer r291b@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (r2938@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list r2938@c))))) (r290d@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (r290d@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (r290b@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (r290b@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (r290b@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((r293a@prefix (lambda (r293c@ext r293d@ls) (append (map (lambda (r2940@x) (string-append r293c@ext r2940@x)) r293d@ls) r293d@ls)))) (r988@r7c5@library-extensions (r293a@prefix '".mosh" (r988@r7c5@library-extensions)))) (current-exception-handler (lambda (r2942@c) (begin (if (condition? r2942@c) (r2913@condition-printer/p r2942@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" r2942@c)) r2942@c))) (if ((call/cc (lambda (r2946@r2944) (lambda () (with-exception-handler (lambda (r2948@c) ((call/cc (lambda (r294a@r2945) (r2946@r2944 (lambda () (if '#t '#f (r294a@r2945 (lambda () (raise-continuable r2948@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (r2933@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (r291d@command-line)) (let ((r2954@r294d r291d@command-line) (r2955@r294f r6ce@r5ad@mosh-cache-dir) (r2956@r2951 '()) (r2957@r2953 (create-mosh-cache-dir))) (let ((r295c@swap (lambda () (begin (let ((r295e@t (r2954@r294d))) (begin (r2954@r294d r2956@r2951) (set! r2956@r2951 r295e@t))) (let ((r2960@t (r2955@r294f))) (begin (r2955@r294f r2957@r2953) (set! r2957@r2953 r2960@t))))))) (dynamic-wind r295c@swap (lambda () (begin (if (r6ce@r5ad@mosh-cache-dir) (gensym-prefix-set! (r2937@prefix-inc! (string-append (r6ce@r5ad@mosh-cache-dir) '"/prefix.txt"))) (void)) (r2919@repl))) r295c@swap))) (begin (r987@r7c3@library-path (r291f@local-library-path (car (r291d@command-line)))) (set! r2909@x* (with-input-from-file (car (r291d@command-line)) (lambda () (let r2962@f () (let ((r2964@x (r6bf@r58f@read-annotated))) (if (eof-object? r2964@x) '() (cons r2964@x (r2962@f)))))))) (r291d@command-line (cons (car (r291d@command-line)) (cdr (r291d@command-line)))) (r6ce@r5ad@mosh-cache-dir (create-mosh-cache-dir)) (if (r6ce@r5ad@mosh-cache-dir) (gensym-prefix-set! (r2937@prefix-inc! (string-append (r6ce@r5ad@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (r2966@file) ((call/cc (lambda (r296a@r2968) (lambda () (with-exception-handler (lambda (r296c@c) ((call/cc (lambda (r296e@r2969) (r296a@r2968 (lambda () (if '#t '#t (r296e@r2969 (lambda () (raise-continuable r296c@c)))))))))) (lambda () (delete-file (string-append (r6ce@r5ad@mosh-cache-dir) '"/" r2966@file))))))))) (directory-list (r6ce@r5ad@mosh-cache-dir))) (void)) (let ((r2970@compiled (r28f9@re6e@compile-r6rs-top-level r2909@x*))) (begin (if (and (r6ce@r5ad@mosh-cache-dir) (not (symbol-value '%disable-acc))) (r98b@r7cb@serialize-all r6c8@r5a1@serialize-library r724@r6dd@compile-core-expr) (void)) (r2970@compiled))))))))
