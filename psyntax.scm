;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! aq583@library-file-path->cache-path (unspecified)) (set! aq585@read-annotated (unspecified)) (set! aq587@annotation-stripped (unspecified)) (set! aq589@annotation? (unspecified)) (set! aq58b@annotation-source (unspecified)) (set! aq58d@annotation-expression (unspecified)) (set! aq58f@scm->fasl (unspecified)) (set! aq591@fasl-save (unspecified)) (set! aq593@fasl-load (unspecified)) (set! aq595@verbose? (unspecified)) (set! aq597@serialize-library (unspecified)) (set! aq599@load-serialized-library (unspecified)) (set! aq59b@make-record-printer (unspecified)) (set! aq59d@compile-core (unspecified)) (set! aq59f@read-library-source-file (unspecified)) (set! aq5a1@make-parameter (unspecified)) (set! aq5a3@mosh-cache-dir (unspecified)) (set! aq639@file-options-spec (unspecified)) (set! aq583@library-file-path->cache-path (lambda (aq63a@x) (call-with-values (lambda () (open-string-output-port)) (lambda (aq640@aq63d aq641@aq63f) (let ((aq644@extract aq641@aq63f) (aq645@p aq640@aq63d)) (letrec* ((aq649@display-hex (lambda (aq652@n) (if (<= '0 aq652@n '9) (display aq652@n aq645@p) (display (integer->char (+ (char->integer '#\a) (- aq652@n '10))) aq645@p))))) (begin (let aq64c@f ((aq64a@ls (string-split aq63a@x '#\/))) (if (not (null? aq64a@ls)) (begin (display '"_" aq645@p) (for-each (lambda (aq64e@c) (if (or (char<=? '#\a aq64e@c '#\z) (char<=? '#\A aq64e@c '#\Z) (char<=? '#\0 aq64e@c '#\9) (memv aq64e@c '(#\- #\. #\_ #\~))) (display aq64e@c aq645@p) (begin (display '"%" aq645@p) (let ((aq650@n (char->integer aq64e@c))) (begin (aq649@display-hex (quotient aq650@n '16)) (aq649@display-hex (remainder aq650@n '16))))))) (string->list (car aq64a@ls))) (aq64c@f (cdr aq64a@ls))) (void))) (aq644@extract)))))))) (set! aq6b4@aq583@library-file-path->cache-path aq583@library-file-path->cache-path) (set! aq585@read-annotated read) (set! aq6b5@aq585@read-annotated aq585@read-annotated) (set! aq587@annotation-stripped (lambda (aq654@x) (aq58d@annotation-expression aq654@x))) (set! aq6b6@aq587@annotation-stripped aq587@annotation-stripped) (set! aq589@annotation? (lambda (aq656@x) (source-info aq656@x))) (set! aq6b7@aq589@annotation? aq589@annotation?) (set! aq58b@annotation-source (lambda (aq658@x) (source-info aq658@x))) (set! aq6b8@aq58b@annotation-source aq58b@annotation-source) (set! aq58d@annotation-expression (lambda (aq65a@x) (if (pair? aq65a@x) (cons (car aq65a@x) (cdr aq65a@x)) (if (procedure? aq65a@x) (set-source-info! aq65a@x '#f) aq65a@x)))) (set! aq6b9@aq58d@annotation-expression aq58d@annotation-expression) (set! aq58f@scm->fasl (lambda (aq65c@filename) (string-append (aq5a3@mosh-cache-dir) '"/" (aq583@library-file-path->cache-path aq65c@filename) '".mosh-fasl"))) (set! aq6ba@aq58f@scm->fasl aq58f@scm->fasl) (set! aq591@fasl-save (lambda (aq65e@filename aq65f@obj) (call-with-port (open-file-output-port aq65e@filename) (lambda (aq662@port) ((symbol-value 'fasl-write!) aq65f@obj aq662@port))))) (set! aq6bb@aq591@fasl-save aq591@fasl-save) (set! aq593@fasl-load (lambda (aq664@filename) (call-with-port (open-file-input-port aq664@filename) (symbol-value 'fasl-read!)))) (set! aq6bc@aq593@fasl-load aq593@fasl-load) (set! aq595@verbose? (symbol-value '%verbose)) (set! aq6bd@aq595@verbose? aq595@verbose?) (set! aq597@serialize-library (lambda (aq666@filename aq667@obj) (begin (if aq595@verbose? (format (current-error-port) '"serialize-library ~a\n..." aq666@filename) (void)) (let ((aq66a@expanded2core (symbol-value 'expanded2core))) (let ((aq66c@compile (symbol-value 'compile-w/o-halt))) (let ((aq66e@code aq667@obj)) (let ((aq670@pivot (cddddr (cddddr aq66e@code)))) (let ((aq672@visit (aq66c@compile (aq66a@expanded2core (car aq670@pivot))))) (begin (set-car! aq670@pivot aq672@visit) (let ((aq674@pivot (cdr aq670@pivot))) (let ((aq676@invoke (aq66c@compile (aq66a@expanded2core (car aq674@pivot))))) (set-car! aq674@pivot aq676@invoke))))))))) (let ((aq678@fasl-file (aq58f@scm->fasl aq666@filename))) (begin (if (file-exists? aq678@fasl-file) (delete-file aq678@fasl-file) (void)) ((call/cc (lambda (aq67c@aq67a) (lambda () (with-exception-handler (lambda (aq67e@c) ((call/cc (lambda (aq680@aq67b) (aq67c@aq67a (lambda () (if '#t (begin (if aq595@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" aq666@filename) (void)) (if (file-exists? aq678@fasl-file) (delete-file aq678@fasl-file) (void)) '#f) (aq680@aq67b (lambda () (raise-continuable aq67e@c)))))))))) (lambda () (aq591@fasl-save aq678@fasl-file aq667@obj)))))))))))) (set! aq6be@aq597@serialize-library aq597@serialize-library) (set! aq599@load-serialized-library (lambda (aq682@filename aq683@obj) (and (aq5a3@mosh-cache-dir) (let ((aq686@fasl-file (aq58f@scm->fasl aq682@filename))) (if (and (file-exists? aq686@fasl-file) ((symbol-value 'file-newer?) aq686@fasl-file aq682@filename)) (let ((aq688@expanded2core (symbol-value 'expanded2core))) (let ((aq68a@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((aq68c@code (aq593@fasl-load aq686@fasl-file))) (let ((aq68e@pivot (cddddr (cddddr aq68c@code)))) (let ((aq690@visit (car aq68e@pivot))) (let ((aq692@visit-proc (lambda () (aq68a@eval-compiled-core aq690@visit)))) (begin (set-car! aq68e@pivot aq692@visit-proc) (let ((aq694@pivot (cdr aq68e@pivot))) (let ((aq696@invoke (car aq694@pivot))) (begin (set-car! aq694@pivot (lambda () (aq68a@eval-compiled-core aq696@invoke))) (apply aq683@obj aq68c@code))))))))))) '#f))))) (set! aq6bf@aq599@load-serialized-library aq599@load-serialized-library) (set! aq59b@make-record-printer (lambda (aq698@name aq699@printer) (lambda aq69c@x (begin (display '"record printer") (for-each display aq69c@x))))) (set! aq6c0@aq59b@make-record-printer aq59b@make-record-printer) (set! aq59d@compile-core (lambda aq69e@x (apply error 'comile-core '"not implementated" aq69e@x))) (set! aq6c1@aq59d@compile-core aq59d@compile-core) (set! aq59f@read-library-source-file (lambda (aq6a0@file-name) (with-input-from-file aq6a0@file-name aq585@read-annotated))) (set! aq6c2@aq59f@read-library-source-file aq59f@read-library-source-file) (set! aq5a1@make-parameter (lambda aq6b0 (let ((aq6b1 (length aq6b0))) (if (= aq6b1 '1) (apply (lambda (aq6a2@x) (aq5a1@make-parameter aq6a2@x (lambda (aq6a4@x) aq6a4@x))) aq6b0) (if (= aq6b1 '2) (apply (lambda (aq6a6@x aq6a7@fender) (let ((aq6aa@x (aq6a7@fender aq6a6@x))) (lambda aq6ae (let ((aq6af (length aq6ae))) (if (= aq6af '0) (apply (lambda () aq6aa@x) aq6ae) (if (= aq6af '1) (apply (lambda (aq6ac@v) (set! aq6aa@x (aq6a7@fender aq6ac@v))) aq6ae) (error 'apply '"invalid arg count"))))))) aq6b0) (error 'apply '"invalid arg count")))))) (set! aq6c3@aq5a1@make-parameter aq5a1@make-parameter) (set! aq5a3@mosh-cache-dir (aq5a1@make-parameter '#f)) (set! aq6c4@aq5a3@mosh-cache-dir aq5a3@mosh-cache-dir) (set! aq639@file-options-spec (lambda (aq6b2@x) aq6b2@x)) (set! aq6c5@aq639@file-options-spec aq639@file-options-spec) (void))
(begin (set! aq6cb@current-primitive-locations (unspecified)) (set! aq6cd@mutable? (unspecified)) (set! aq6cf@rewriter (unspecified)) (set! aq6d1@expanded->core (unspecified)) (set! aq6d3@compile-core-expr (unspecified)) (set! aq6d5@pretty-print (unspecified)) (set! aq6d7@compile-core-expr-to-port (unspecified)) (set! aq6cb@current-primitive-locations (aq6c3@aq5a1@make-parameter (lambda (aq6d8@x) '#f) (lambda (aq6da@p) aq6da@p))) (set! aq716@aq6cb@current-primitive-locations aq6cb@current-primitive-locations) (set! aq6cd@mutable? (lambda (aq6dc@x) (or (pair? aq6dc@x) (vector? aq6dc@x) (hashtable? aq6dc@x)))) (set! aq717@aq6cd@mutable? aq6cd@mutable?) (set! aq6cf@rewriter (lambda (aq6de@quote-hack?) (letrec* ((aq6e1@f (lambda (aq6e2@x) (if (pair? aq6e2@x) (let ((aq6e4@t (car aq6e2@x))) (if (memv aq6e4@t '(quote)) (if (and aq6de@quote-hack? (aq6cd@mutable? (cadr aq6e2@x))) (let ((aq6e6@g (gensym))) (begin (set-symbol-value! aq6e6@g (cadr aq6e2@x)) aq6e6@g)) aq6e2@x) (if (memv aq6e4@t '(case-lambda)) (cons 'case-lambda (map (lambda (aq6e8@x) (cons (car aq6e8@x) (map aq6e1@f (cdr aq6e8@x)))) (cdr aq6e2@x))) (if (memv aq6e4@t '(lambda)) (cons* 'lambda (cadr aq6e2@x) (map aq6e1@f (cddr aq6e2@x))) (if (memv aq6e4@t '(letrec)) (let ((aq6ea@bindings (cadr aq6e2@x)) (aq6eb@body* (cddr aq6e2@x))) (let ((aq6ee@lhs* (map car aq6ea@bindings)) (aq6ef@rhs* (map cadr aq6ea@bindings))) (cons* 'letrec (map list aq6ee@lhs* (map aq6e1@f aq6ef@rhs*)) (map aq6e1@f aq6eb@body*)))) (if (memv aq6e4@t '(letrec*)) (let ((aq6f2@bindings (cadr aq6e2@x)) (aq6f3@body* (cddr aq6e2@x))) (let ((aq6f6@lhs* (map car aq6f2@bindings)) (aq6f7@rhs* (map cadr aq6f2@bindings))) (cons* 'letrec* (map list aq6f6@lhs* (map aq6e1@f aq6f7@rhs*)) (map aq6e1@f aq6f3@body*)))) (if (memv aq6e4@t '(library-letrec*)) (let ((aq6fa@name (cadr aq6e2@x)) (aq6fb@x (cdr aq6e2@x))) (let ((aq6fe@bindings (cadr aq6fb@x)) (aq6ff@body* (cddr aq6fb@x))) (let ((aq702@lhs* (map car aq6fe@bindings)) (aq703@lhs** (map cadr aq6fe@bindings)) (aq704@rhs* (map caddr aq6fe@bindings))) (cons* 'library-letrec* aq6fa@name (map list aq702@lhs* aq703@lhs** (map aq6e1@f aq704@rhs*)) (map aq6e1@f aq6ff@body*))))) (if (memv aq6e4@t '(begin)) (cons 'begin (map aq6e1@f (cdr aq6e2@x))) (if (memv aq6e4@t '(set!)) (list 'set! (cadr aq6e2@x) (aq6e1@f (caddr aq6e2@x))) (if (memv aq6e4@t '(primitive)) (let ((aq708@op (cadr aq6e2@x))) (let ((aq70a@t ((aq6cb@current-primitive-locations) aq708@op))) (if aq70a@t ((lambda (aq70c@loc) aq70c@loc) aq70a@t) aq708@op))) (if (memv aq6e4@t '(define)) aq6e2@x (if (list? aq6e2@x) (map aq6e1@f aq6e2@x) (error 'rewrite '"invalid form ~s ~s" aq6e2@x (list? aq6e2@x)))))))))))))) aq6e2@x)))) aq6e1@f))) (set! aq718@aq6cf@rewriter aq6cf@rewriter) (set! aq6d1@expanded->core (lambda (aq70e@x) ((aq6cf@rewriter '#f) aq70e@x))) (set! aq719@aq6d1@expanded->core aq6d1@expanded->core) (set! aq6d3@compile-core-expr (lambda (aq710@x) ((aq6cf@rewriter '#f) aq710@x))) (set! aq71a@aq6d3@compile-core-expr aq6d3@compile-core-expr) (set! aq6d5@pretty-print write) (set! aq71b@aq6d5@pretty-print aq6d5@pretty-print) (set! aq6d7@compile-core-expr-to-port (lambda (aq712@x aq713@p) (aq6d5@pretty-print ((aq6cf@rewriter '#f) aq712@x) aq713@p))) (set! aq71c@aq6d7@compile-core-expr-to-port aq6d7@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! aq76b@make-collection (unspecified)) (set! aq76d@current-library-collection (unspecified)) (set! aq76f@rp (unspecified)) (set! aq779@library? (unspecified)) (set! aq77b@library-id (unspecified)) (set! aq77d@set-library-id! (unspecified)) (set! aq77f@library-name (unspecified)) (set! aq781@set-library-name! (unspecified)) (set! aq783@library-version (unspecified)) (set! aq785@set-library-version! (unspecified)) (set! aq787@library-imp* (unspecified)) (set! aq789@set-library-imp*! (unspecified)) (set! aq78b@library-vis* (unspecified)) (set! aq78d@set-library-vis*! (unspecified)) (set! aq78f@library-inv* (unspecified)) (set! aq791@set-library-inv*! (unspecified)) (set! aq793@library-subst (unspecified)) (set! aq795@set-library-subst! (unspecified)) (set! aq797@library-env (unspecified)) (set! aq799@set-library-env! (unspecified)) (set! aq79b@library-visit-state (unspecified)) (set! aq79d@set-library-visit-state! (unspecified)) (set! aq79f@library-invoke-state (unspecified)) (set! aq7a1@set-library-invoke-state! (unspecified)) (set! aq7a3@library-visit-code (unspecified)) (set! aq7a5@set-library-visit-code! (unspecified)) (set! aq7a7@library-invoke-code (unspecified)) (set! aq7a9@set-library-invoke-code! (unspecified)) (set! aq7ab@library-visible? (unspecified)) (set! aq7ad@set-library-visible?! (unspecified)) (set! aq7af@library-source-file-name (unspecified)) (set! aq7b1@set-library-source-file-name! (unspecified)) (set! aq7b3@dummy (unspecified)) (set! aq7b5@find-dependencies (unspecified)) (set! aq7b7@find-library-by (unspecified)) (set! aq7b9@library-path (unspecified)) (set! aq7bb@library-extensions (unspecified)) (set! aq7bd@library-name->file-name (unspecified)) (set! aq7bf@file-locator (unspecified)) (set! aq7c1@serialize-all (unspecified)) (set! aq7c3@current-precompiled-library-loader (unspecified)) (set! aq7c5@try-load-from-file (unspecified)) (set! aq7c7@library-loader (unspecified)) (set! aq7c9@current-library-expander (unspecified)) (set! aq7cb@external-pending-libraries (unspecified)) (set! aq7cd@find-external-library (unspecified)) (set! aq7cf@find-library-by-name (unspecified)) (set! aq7d1@library-exists? (unspecified)) (set! aq7d3@find-library-by-spec/die (unspecified)) (set! aq7d5@label->binding-table (unspecified)) (set! aq7d7@install-library-record (unspecified)) (set! aq7d9@install-library (unspecified)) (set! aq7db@imported-label->binding (unspecified)) (set! aq7dd@invoke-library (unspecified)) (set! aq7df@visit-library (unspecified)) (set! aq7e1@invoke-library-by-spec (unspecified)) (set! aq7e3@installed-libraries (unspecified)) (set! aq7e5@library-spec (unspecified)) (set! aq76b@make-collection (lambda () (let ((aq7e6@set '())) (letrec* ((aq7e9@set-cons (lambda (aq7ee@x aq7ef@ls) (if (memq aq7ee@x aq7ef@ls) aq7ef@ls (cons aq7ee@x aq7ef@ls))))) (lambda aq7ec (let ((aq7ed (length aq7ec))) (if (= aq7ed '0) (apply (lambda () aq7e6@set) aq7ec) (if (= aq7ed '1) (apply (lambda (aq7ea@x) (set! aq7e6@set (aq7e9@set-cons aq7ea@x aq7e6@set))) aq7ec) (error 'apply '"invalid arg count"))))))))) (set! aq95a@aq76b@make-collection aq76b@make-collection) (set! aq76d@current-library-collection (aq6c3@aq5a1@make-parameter (aq76b@make-collection) (lambda (aq7f2@x) (begin (if (not (procedure? aq7f2@x)) (assertion-violation 'current-library-collection '"not a procedure" aq7f2@x) (void)) aq7f2@x)))) (set! aq95b@aq76d@current-library-collection aq76d@current-library-collection) (set! aq76f@rp (aq6c0@aq59b@make-record-printer 'library (lambda (aq7f4@x aq7f5@p aq7f6@wr) (begin (if (not (aq779@library? aq7f4@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (aq783@library-version aq7f4@x)) (aq77f@library-name aq7f4@x) (append (aq77f@library-name aq7f4@x) (list (aq783@library-version aq7f4@x))))) aq7f5@p))))) (set! aq95c@aq76f@rp aq76f@rp) (set! aq779@library? (lambda (aq7fa@x) (and (simple-struct? aq7fa@x) (eq? (simple-struct-name aq7fa@x) 'library)))) (set! aq95d@aq779@library? aq779@library?) (set! aq77b@library-id (lambda (aq7fc@x) (simple-struct-ref aq7fc@x '0))) (set! aq95e@aq77b@library-id aq77b@library-id) (set! aq77d@set-library-id! (lambda (aq7fe@x aq7ff@val) (simple-struct-set! aq7fe@x '0 aq7ff@val))) (set! aq95f@aq77d@set-library-id! aq77d@set-library-id!) (set! aq77f@library-name (lambda (aq802@x) (simple-struct-ref aq802@x '1))) (set! aq960@aq77f@library-name aq77f@library-name) (set! aq781@set-library-name! (lambda (aq804@x aq805@val) (simple-struct-set! aq804@x '1 aq805@val))) (set! aq961@aq781@set-library-name! aq781@set-library-name!) (set! aq783@library-version (lambda (aq808@x) (simple-struct-ref aq808@x '2))) (set! aq962@aq783@library-version aq783@library-version) (set! aq785@set-library-version! (lambda (aq80a@x aq80b@val) (simple-struct-set! aq80a@x '2 aq80b@val))) (set! aq963@aq785@set-library-version! aq785@set-library-version!) (set! aq787@library-imp* (lambda (aq80e@x) (simple-struct-ref aq80e@x '3))) (set! aq964@aq787@library-imp* aq787@library-imp*) (set! aq789@set-library-imp*! (lambda (aq810@x aq811@val) (simple-struct-set! aq810@x '3 aq811@val))) (set! aq965@aq789@set-library-imp*! aq789@set-library-imp*!) (set! aq78b@library-vis* (lambda (aq814@x) (simple-struct-ref aq814@x '4))) (set! aq966@aq78b@library-vis* aq78b@library-vis*) (set! aq78d@set-library-vis*! (lambda (aq816@x aq817@val) (simple-struct-set! aq816@x '4 aq817@val))) (set! aq967@aq78d@set-library-vis*! aq78d@set-library-vis*!) (set! aq78f@library-inv* (lambda (aq81a@x) (simple-struct-ref aq81a@x '5))) (set! aq968@aq78f@library-inv* aq78f@library-inv*) (set! aq791@set-library-inv*! (lambda (aq81c@x aq81d@val) (simple-struct-set! aq81c@x '5 aq81d@val))) (set! aq969@aq791@set-library-inv*! aq791@set-library-inv*!) (set! aq793@library-subst (lambda (aq820@x) (simple-struct-ref aq820@x '6))) (set! aq96a@aq793@library-subst aq793@library-subst) (set! aq795@set-library-subst! (lambda (aq822@x aq823@val) (simple-struct-set! aq822@x '6 aq823@val))) (set! aq96b@aq795@set-library-subst! aq795@set-library-subst!) (set! aq797@library-env (lambda (aq826@x) (simple-struct-ref aq826@x '7))) (set! aq96c@aq797@library-env aq797@library-env) (set! aq799@set-library-env! (lambda (aq828@x aq829@val) (simple-struct-set! aq828@x '7 aq829@val))) (set! aq96d@aq799@set-library-env! aq799@set-library-env!) (set! aq79b@library-visit-state (lambda (aq82c@x) (simple-struct-ref aq82c@x '8))) (set! aq96e@aq79b@library-visit-state aq79b@library-visit-state) (set! aq79d@set-library-visit-state! (lambda (aq82e@x aq82f@val) (simple-struct-set! aq82e@x '8 aq82f@val))) (set! aq96f@aq79d@set-library-visit-state! aq79d@set-library-visit-state!) (set! aq79f@library-invoke-state (lambda (aq832@x) (simple-struct-ref aq832@x '9))) (set! aq970@aq79f@library-invoke-state aq79f@library-invoke-state) (set! aq7a1@set-library-invoke-state! (lambda (aq834@x aq835@val) (simple-struct-set! aq834@x '9 aq835@val))) (set! aq971@aq7a1@set-library-invoke-state! aq7a1@set-library-invoke-state!) (set! aq7a3@library-visit-code (lambda (aq838@x) (simple-struct-ref aq838@x '10))) (set! aq972@aq7a3@library-visit-code aq7a3@library-visit-code) (set! aq7a5@set-library-visit-code! (lambda (aq83a@x aq83b@val) (simple-struct-set! aq83a@x '10 aq83b@val))) (set! aq973@aq7a5@set-library-visit-code! aq7a5@set-library-visit-code!) (set! aq7a7@library-invoke-code (lambda (aq83e@x) (simple-struct-ref aq83e@x '11))) (set! aq974@aq7a7@library-invoke-code aq7a7@library-invoke-code) (set! aq7a9@set-library-invoke-code! (lambda (aq840@x aq841@val) (simple-struct-set! aq840@x '11 aq841@val))) (set! aq975@aq7a9@set-library-invoke-code! aq7a9@set-library-invoke-code!) (set! aq7ab@library-visible? (lambda (aq844@x) (simple-struct-ref aq844@x '12))) (set! aq976@aq7ab@library-visible? aq7ab@library-visible?) (set! aq7ad@set-library-visible?! (lambda (aq846@x aq847@val) (simple-struct-set! aq846@x '12 aq847@val))) (set! aq977@aq7ad@set-library-visible?! aq7ad@set-library-visible?!) (set! aq7af@library-source-file-name (lambda (aq84a@x) (simple-struct-ref aq84a@x '13))) (set! aq978@aq7af@library-source-file-name aq7af@library-source-file-name) (set! aq7b1@set-library-source-file-name! (lambda (aq84c@x aq84d@val) (simple-struct-set! aq84c@x '13 aq84d@val))) (set! aq979@aq7b1@set-library-source-file-name! aq7b1@set-library-source-file-name!) (set! aq7b3@dummy '3) (set! aq97a@aq7b3@dummy aq7b3@dummy) (set! aq7b5@find-dependencies (lambda (aq850@ls) (if (null? aq850@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! aq97b@aq7b5@find-dependencies aq7b5@find-dependencies) (set! aq7b7@find-library-by (lambda (aq852@pred) (let aq856@f ((aq854@ls ((aq76d@current-library-collection)))) (if (null? aq854@ls) '#f (if (aq852@pred (car aq854@ls)) (car aq854@ls) (aq856@f (cdr aq854@ls))))))) (set! aq97c@aq7b7@find-library-by aq7b7@find-library-by) (set! aq7b9@library-path (aq6c3@aq5a1@make-parameter '(".") (lambda (aq858@x) (if (and (list? aq858@x) (for-all string? aq858@x)) (map (lambda (aq85a@x) aq85a@x) aq858@x) (assertion-violation 'library-path '"not a list of strings" aq858@x))))) (set! aq97d@aq7b9@library-path aq7b9@library-path) (set! aq7bb@library-extensions (aq6c3@aq5a1@make-parameter '(".sls" ".ss" ".scm") (lambda (aq85c@x) (if (and (list? aq85c@x) (for-all string? aq85c@x)) (map (lambda (aq85e@x) aq85e@x) aq85c@x) (assertion-violation 'library-extensions '"not a list of strings" aq85c@x))))) (set! aq97e@aq7bb@library-extensions aq7bb@library-extensions) (set! aq7bd@library-name->file-name (lambda (aq860@x) (call-with-values (lambda () (open-string-output-port)) (lambda (aq866@aq863 aq867@aq865) (let ((aq86a@extract aq867@aq865) (aq86b@p aq866@aq863)) (letrec* ((aq86f@display-hex (lambda (aq878@n) (if (<= '0 aq878@n '9) (display aq878@n aq86b@p) (display (integer->char (+ (char->integer '#\a) (- aq878@n '10))) aq86b@p))))) (begin (let aq872@f ((aq870@ls aq860@x)) (if (not (null? aq870@ls)) (begin (display '"/" aq86b@p) (for-each (lambda (aq874@c) (if (or (char<=? '#\a aq874@c '#\z) (char<=? '#\A aq874@c '#\Z) (char<=? '#\0 aq874@c '#\9) (memv aq874@c '(#\- #\. #\_ #\~))) (display aq874@c aq86b@p) (begin (display '"%" aq86b@p) (let ((aq876@n (char->integer aq874@c))) (begin (aq86f@display-hex (quotient aq876@n '16)) (aq86f@display-hex (remainder aq876@n '16))))))) (string->list (symbol->string (car aq870@ls)))) (aq872@f (cdr aq870@ls))) (void))) (aq86a@extract)))))))) (set! aq97f@aq7bd@library-name->file-name aq7bd@library-name->file-name) (set! aq7bf@file-locator (aq6c3@aq5a1@make-parameter (lambda (aq87a@x) (let ((aq87c@str (aq7bd@library-name->file-name aq87a@x))) (let aq884@f ((aq87e@ls (aq7b9@library-path)) (aq87f@exts (aq7bb@library-extensions)) (aq880@failed-list '())) (if (null? aq87e@ls) (letrec* ((aq88e@aq889 (make-record-type-descriptor '&library-resolution &condition-rtd 'aq88c '#f '#f '#((immutable library) (immutable files)))) (aq890@aq88b '#f) (aq892@aq88a (make-record-constructor-descriptor aq88e@aq889 &condition-rcd aq890@aq88b)) (aq895@aq888 (record-predicate aq88e@aq889)) (aq897@make-library-resolution-condition (record-constructor aq892@aq88a)) (aq899@aq886 (record-accessor aq88e@aq889 '0)) (aq89b@aq887 (record-accessor aq88e@aq889 '1)) (aq89d@library-resolution-condition? (condition-predicate aq88e@aq889)) (aq89f@condition-library (condition-accessor aq88e@aq889 aq899@aq886)) (aq8a1@condition-files (condition-accessor aq88e@aq889 aq89b@aq887))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (aq897@make-library-resolution-condition aq87a@x (reverse aq880@failed-list))))) (if (null? aq87f@exts) (aq884@f (cdr aq87e@ls) (aq7bb@library-extensions) aq880@failed-list) (let ((aq8a2@name (string-append (car aq87e@ls) aq87c@str (car aq87f@exts)))) (if (file-exists? aq8a2@name) aq8a2@name (aq884@f aq87e@ls (cdr aq87f@exts) (cons aq8a2@name aq880@failed-list))))))))) (lambda (aq8a4@f) (if (procedure? aq8a4@f) aq8a4@f (assertion-violation 'file-locator '"not a procedure" aq8a4@f))))) (set! aq980@aq7bf@file-locator aq7bf@file-locator) (set! aq7c1@serialize-all (lambda (aq8a6@serialize aq8a7@compile) (letrec* ((aq8ab@library-desc (lambda (aq8ae@x) (list (aq77b@library-id aq8ae@x) (aq77f@library-name aq8ae@x))))) (for-each (lambda (aq8ac@x) (if (aq7af@library-source-file-name aq8ac@x) (aq8a6@serialize (aq7af@library-source-file-name aq8ac@x) (list (aq77b@library-id aq8ac@x) (aq77f@library-name aq8ac@x) (aq783@library-version aq8ac@x) (map aq8ab@library-desc (aq787@library-imp* aq8ac@x)) (map aq8ab@library-desc (aq78b@library-vis* aq8ac@x)) (map aq8ab@library-desc (aq78f@library-inv* aq8ac@x)) (aq793@library-subst aq8ac@x) (aq797@library-env aq8ac@x) (aq8a7@compile (aq7a3@library-visit-code aq8ac@x)) (aq8a7@compile (aq7a7@library-invoke-code aq8ac@x)) (aq7ab@library-visible? aq8ac@x))) (void))) ((aq76d@current-library-collection)))))) (set! aq981@aq7c1@serialize-all aq7c1@serialize-all) (set! aq7c3@current-precompiled-library-loader (aq6c3@aq5a1@make-parameter (lambda (aq8b0@filename aq8b1@sk) '#f))) (set! aq982@aq7c3@current-precompiled-library-loader aq7c3@current-precompiled-library-loader) (set! aq7c5@try-load-from-file (lambda (aq8b4@filename) ((aq7c3@current-precompiled-library-loader) aq8b4@filename (lambda aq8da (let ((aq8db (length aq8da))) (if (= aq8db '11) (apply (lambda (aq8b6@id aq8b7@name aq8b8@ver aq8b9@imp* aq8ba@vis* aq8bb@inv* aq8bc@exp-subst aq8bd@exp-env aq8be@visit-proc aq8bf@invoke-proc aq8c0@visible?) (let aq8ce@f ((aq8cc@deps (append aq8b9@imp* aq8ba@vis* aq8bb@inv*))) (if (null? aq8cc@deps) (begin (aq7d9@install-library aq8b6@id aq8b7@name aq8b8@ver aq8b9@imp* aq8ba@vis* aq8bb@inv* aq8bc@exp-subst aq8bd@exp-env aq8be@visit-proc aq8bf@invoke-proc '#f '#f aq8c0@visible? '#f) '#t) (let ((aq8d0@d (car aq8cc@deps))) (let ((aq8d2@label (car aq8d0@d)) (aq8d3@dname (cadr aq8d0@d))) (let ((aq8d6@l (aq7cf@find-library-by-name aq8d3@dname))) (if (and (aq779@library? aq8d6@l) (eq? aq8d2@label (aq77b@library-id aq8d6@l))) (aq8ce@f (cdr aq8cc@deps)) (begin (if aq6bd@aq595@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" aq8b7@name aq8d3@dname aq8b4@filename aq8d6@l aq8d2@label (aq77b@library-id aq8d6@l)) (void)) '#f)))))))) aq8da) (if (>= aq8db '0) (apply (lambda aq8d8@others '#f) aq8da) (error 'apply '"invalid arg count")))))))) (set! aq983@aq7c5@try-load-from-file aq7c5@try-load-from-file) (set! aq7c7@library-loader (aq6c3@aq5a1@make-parameter (lambda (aq8dc@x) (let ((aq8de@file-name ((aq7bf@file-locator) aq8dc@x))) (if (not aq8de@file-name) (assertion-violation '#f '"cannot file library" aq8dc@x) (or (aq7c5@try-load-from-file aq8de@file-name) ((aq7c9@current-library-expander) (aq6c2@aq59f@read-library-source-file aq8de@file-name) aq8de@file-name (lambda (aq8e0@name) (if (not (fast-equal? aq8e0@name aq8dc@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (aq8e6@aq8e3 aq8e7@aq8e5) (let ((aq8ea@e aq8e7@aq8e5) (aq8eb@p aq8e6@aq8e3)) (begin (display '"expected to find library " aq8eb@p) (write aq8dc@x aq8eb@p) (display '" in file " aq8eb@p) (display aq8de@file-name aq8eb@p) (display '", found " aq8eb@p) (write aq8e0@name aq8eb@p) (display '" instead" aq8eb@p) (aq8ea@e)))))) (void)))))))) (lambda (aq8ee@f) (if (procedure? aq8ee@f) aq8ee@f (assertion-violation 'library-locator '"not a procedure" aq8ee@f))))) (set! aq984@aq7c7@library-loader aq7c7@library-loader) (set! aq7c9@current-library-expander (aq6c3@aq5a1@make-parameter (lambda (aq8f0@x) (assertion-violation 'library-expander '"not initialized")) (lambda (aq8f2@f) (if (procedure? aq8f2@f) aq8f2@f (assertion-violation 'library-expander '"not a procedure" aq8f2@f))))) (set! aq985@aq7c9@current-library-expander aq7c9@current-library-expander) (set! aq7cb@external-pending-libraries (aq6c3@aq5a1@make-parameter '())) (set! aq986@aq7cb@external-pending-libraries aq7cb@external-pending-libraries) (set! aq7cd@find-external-library (lambda (aq8f4@name) (begin (if (member aq8f4@name (aq7cb@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" aq8f4@name) (void)) (let ((aq8fa@aq8f7 aq7cb@external-pending-libraries) (aq8fb@aq8f9 (cons aq8f4@name (aq7cb@external-pending-libraries)))) (let ((aq8fe@swap (lambda () (let ((aq900@t (aq8fa@aq8f7))) (begin (aq8fa@aq8f7 aq8fb@aq8f9) (set! aq8fb@aq8f9 aq900@t)))))) (dynamic-wind aq8fe@swap (lambda () (begin ((aq7c7@library-loader) aq8f4@name) (or (aq7b7@find-library-by (lambda (aq902@x) (fast-equal? (aq77f@library-name aq902@x) aq8f4@name))) (assertion-violation '#f '"handling external library did not yield the correct library" aq8f4@name)))) aq8fe@swap)))))) (set! aq987@aq7cd@find-external-library aq7cd@find-external-library) (set! aq7cf@find-library-by-name (lambda (aq904@name) (or (aq7b7@find-library-by (lambda (aq906@x) (fast-equal? (aq77f@library-name aq906@x) aq904@name))) (aq7cd@find-external-library aq904@name)))) (set! aq988@aq7cf@find-library-by-name aq7cf@find-library-by-name) (set! aq7d1@library-exists? (lambda (aq908@name) (and (aq7b7@find-library-by (lambda (aq90a@x) (fast-equal? (aq77f@library-name aq90a@x) aq908@name))) '#t))) (set! aq989@aq7d1@library-exists? aq7d1@library-exists?) (set! aq7d3@find-library-by-spec/die (lambda (aq90c@spec) (let ((aq90e@id (car aq90c@spec))) (or (aq7b7@find-library-by (lambda (aq910@x) (eq? aq90e@id (aq77b@library-id aq910@x)))) (assertion-violation '#f '"cannot find library with required spec" aq90c@spec))))) (set! aq98a@aq7d3@find-library-by-spec/die aq7d3@find-library-by-spec/die) (set! aq7d5@label->binding-table (make-eq-hashtable)) (set! aq98b@aq7d5@label->binding-table aq7d5@label->binding-table) (set! aq7d7@install-library-record (lambda (aq912@lib) (begin (let ((aq914@exp-env (aq797@library-env aq912@lib))) (for-each (lambda (aq916@x) (let ((aq918@label (car aq916@x)) (aq919@binding (cdr aq916@x))) (let ((aq91c@binding (let ((aq91e@t (car aq919@binding))) (if (memv aq91e@t '(global)) (cons 'global (cons aq912@lib (cdr aq919@binding))) (if (memv aq91e@t '(global-macro)) (cons 'global-macro (cons aq912@lib (cdr aq919@binding))) (if (memv aq91e@t '(global-macro!)) (cons 'global-macro! (cons aq912@lib (cdr aq919@binding))) aq919@binding)))))) (begin (if (hashtable-ref aq7d5@label->binding-table aq918@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" aq918@label (hashtable-ref aq7d5@label->binding-table aq918@label '#f) aq91c@binding) (exit)) (void)) (hashtable-set! aq7d5@label->binding-table aq918@label aq91c@binding))))) aq914@exp-env)) ((aq76d@current-library-collection) aq912@lib)))) (set! aq98c@aq7d7@install-library-record aq7d7@install-library-record) (set! aq7d9@install-library (lambda (aq920@id aq921@name aq922@ver aq923@imp* aq924@vis* aq925@inv* aq926@exp-subst aq927@exp-env aq928@visit-proc aq929@invoke-proc aq92a@visit-code aq92b@invoke-code aq92c@visible? aq92d@source-file-name) (let ((aq93c@imp-lib* (map aq7d3@find-library-by-spec/die aq923@imp*)) (aq93d@vis-lib* (map aq7d3@find-library-by-spec/die aq924@vis*)) (aq93e@inv-lib* (map aq7d3@find-library-by-spec/die aq925@inv*))) (begin (if (not (and (symbol? aq920@id) (list? aq921@name) (list? aq922@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" aq920@id aq921@name aq922@ver) (void)) (if (aq7d1@library-exists? aq921@name) (assertion-violation 'install-library '"library is already installed" aq921@name) (void)) (let ((aq942@lib (make-simple-struct 'library '15 (list aq920@id aq921@name aq922@ver aq93c@imp-lib* aq93d@vis-lib* aq93e@inv-lib* aq926@exp-subst aq927@exp-env aq928@visit-proc aq929@invoke-proc aq92a@visit-code aq92b@invoke-code aq92c@visible? aq92d@source-file-name)))) (aq7d7@install-library-record aq942@lib)))))) (set! aq98d@aq7d9@install-library aq7d9@install-library) (set! aq7db@imported-label->binding (lambda (aq944@lab) (hashtable-ref aq7d5@label->binding-table aq944@lab '#f))) (set! aq98e@aq7db@imported-label->binding aq7db@imported-label->binding) (set! aq7dd@invoke-library (lambda (aq946@lib) (let ((aq948@invoke (aq79f@library-invoke-state aq946@lib))) (if (procedure? aq948@invoke) (begin (aq7a1@set-library-invoke-state! aq946@lib (lambda () (assertion-violation 'invoke '"circularity detected" aq946@lib))) (for-each aq7dd@invoke-library (aq78f@library-inv* aq946@lib)) (aq7a1@set-library-invoke-state! aq946@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" aq946@lib))) (aq948@invoke) (aq7a1@set-library-invoke-state! aq946@lib '#t)) (void))))) (set! aq98f@aq7dd@invoke-library aq7dd@invoke-library) (set! aq7df@visit-library (lambda (aq94a@lib) (let ((aq94c@visit (aq79b@library-visit-state aq94a@lib))) (if (procedure? aq94c@visit) (begin (aq79d@set-library-visit-state! aq94a@lib (lambda () (assertion-violation 'visit '"circularity detected" aq94a@lib))) (for-each aq7dd@invoke-library (aq78b@library-vis* aq94a@lib)) (aq79d@set-library-visit-state! aq94a@lib (lambda () (assertion-violation 'invoke '"first visit did not return" aq94a@lib))) (aq94c@visit) (aq79d@set-library-visit-state! aq94a@lib '#t)) (void))))) (set! aq990@aq7df@visit-library aq7df@visit-library) (set! aq7e1@invoke-library-by-spec (lambda (aq94e@spec) (aq7dd@invoke-library (aq7d3@find-library-by-spec/die aq94e@spec)))) (set! aq991@aq7e1@invoke-library-by-spec aq7e1@invoke-library-by-spec) (set! aq7e3@installed-libraries (lambda aq956 (let ((aq957 (length aq956))) (if (= aq957 '1) (apply (lambda (aq950@all?) (let aq954@f ((aq952@ls ((aq76d@current-library-collection)))) (if (null? aq952@ls) '() (if (or aq950@all? (aq7ab@library-visible? (car aq952@ls))) (cons (car aq952@ls) (aq954@f (cdr aq952@ls))) (aq954@f (cdr aq952@ls)))))) aq956) (if (= aq957 '0) (apply (lambda () (aq7e3@installed-libraries '#f)) aq956) (error 'apply '"invalid arg count")))))) (set! aq992@aq7e3@installed-libraries aq7e3@installed-libraries) (set! aq7e5@library-spec (lambda (aq958@x) (begin (if (not (aq779@library? aq958@x)) (assertion-violation 'library-spec '"not a library" aq958@x) (void)) (list (aq77b@library-id aq958@x) (aq77f@library-name aq958@x) (aq783@library-version aq958@x))))) (set! aq993@aq7e5@library-spec aq7e5@library-spec) (void))
(begin (set! aq997@build-global-define (unspecified)) (set! aqa08@build-lambda (unspecified)) (set! aqa0a@build-case-lambda (unspecified)) (set! aqa38@build-sequence (unspecified)) (set! aqa3a@build-void (unspecified)) (set! aqa3c@build-letrec (unspecified)) (set! aqa3e@build-let (unspecified)) (set! aqa40@build-named-let (unspecified)) (set! aqa42@build-letrec* (unspecified)) (set! aqa44@build-library-letrec* (unspecified)) (set! aqa46@build-receive (unspecified)) (set! aq997@build-global-define (lambda (aqa47@x) (aqa3a@build-void))) (set! aqad5@aq997@build-global-define aq997@build-global-define) (set! aqa08@build-lambda (lambda (aqa49@ae aqa4a@vars aqa4b@exp) (list 'lambda aqa4a@vars aqa4b@exp))) (set! aqad6@aqa08@build-lambda aqa08@build-lambda) (set! aqa0a@build-case-lambda (lambda (aqa4f@ae aqa50@vars* aqa51@exp*) (letrec* ((aqa56@build-error (lambda (aqa8d@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (aqa58@build-pred (lambda (aqa75@ae aqa76@n aqa77@vars) (call-with-values (lambda () (let aqa83@f ((aqa7f@vars aqa77@vars) (aqa80@count '0)) (if (pair? aqa7f@vars) (aqa83@f (cdr aqa7f@vars) (+ aqa80@count '1)) (if (null? aqa7f@vars) (values aqa80@count '=) (values aqa80@count '>=))))) (lambda (aqa85@aqa7c aqa86@aqa7e) (let ((aqa89@pred aqa86@aqa7e) (aqa8a@count aqa85@aqa7c)) (list (list 'primitive aqa89@pred) aqa76@n (list 'quote aqa8a@count))))))) (aqa5a@build-apply (lambda (aqa6d@ae aqa6e@g aqa6f@vars aqa70@exp) (list '(primitive apply) (aqa08@build-lambda aqa6d@ae aqa6f@vars aqa70@exp) aqa6e@g))) (aqa5c@expand-case-lambda (lambda (aqa5d@ae aqa5e@vars aqa5f@exp*) (let ((aqa63@g (gensym)) (aqa64@n (gensym))) (list 'lambda aqa63@g (aqa3e@build-let aqa5d@ae (list aqa64@n) (list (list '(primitive length) aqa63@g)) (let aqa6b@f ((aqa67@vars* aqa50@vars*) (aqa68@exp* aqa5f@exp*)) (if (null? aqa67@vars*) (aqa56@build-error aqa5d@ae) (list 'if (aqa58@build-pred aqa5d@ae aqa64@n (car aqa67@vars*)) (aqa5a@build-apply aqa5d@ae aqa63@g (car aqa67@vars*) (car aqa68@exp*)) (aqa6b@f (cdr aqa67@vars*) (cdr aqa68@exp*))))))))))) (if (= (length aqa51@exp*) '1) (aqa08@build-lambda aqa4f@ae (car aqa50@vars*) (car aqa51@exp*)) (aqa5c@expand-case-lambda aqa4f@ae aqa50@vars* aqa51@exp*))))) (set! aqad7@aqa0a@build-case-lambda aqa0a@build-case-lambda) (set! aqa38@build-sequence (lambda (aqa8f@ae aqa90@exps) (let aqa95@loop ((aqa93@exps aqa90@exps)) (if (null? (cdr aqa93@exps)) (car aqa93@exps) (if (equal? (car aqa93@exps) (aqa3a@build-void)) (aqa95@loop (cdr aqa93@exps)) (cons 'begin aqa93@exps)))))) (set! aqad8@aqa38@build-sequence aqa38@build-sequence) (set! aqa3a@build-void (lambda () '((primitive void)))) (set! aqad9@aqa3a@build-void aqa3a@build-void) (set! aqa3c@build-letrec (lambda (aqa97@ae aqa98@vars aqa99@val-exps aqa9a@body-exp) (if (null? aqa98@vars) aqa9a@body-exp (list 'letrec (map list aqa98@vars aqa99@val-exps) aqa9a@body-exp)))) (set! aqada@aqa3c@build-letrec aqa3c@build-letrec) (set! aqa3e@build-let (lambda (aqa9f@ae aqaa0@vars aqaa1@val-exps aqaa2@body-exp) (if (null? aqaa0@vars) aqaa2@body-exp (list 'let (map list aqaa0@vars aqaa1@val-exps) aqaa2@body-exp)))) (set! aqadb@aqa3e@build-let aqa3e@build-let) (set! aqa40@build-named-let (lambda (aqaa7@ae aqaa8@name aqaa9@vars aqaaa@val-exps aqaab@body-exp) (list 'let aqaa8@name (map list aqaa9@vars aqaaa@val-exps) aqaab@body-exp))) (set! aqadc@aqa40@build-named-let aqa40@build-named-let) (set! aqa42@build-letrec* (lambda (aqab1@ae aqab2@vars aqab3@val-exps aqab4@body-exp) (if (null? aqab2@vars) aqab4@body-exp (list 'letrec* (map list aqab2@vars aqab3@val-exps) aqab4@body-exp)))) (set! aqadd@aqa42@build-letrec* aqa42@build-letrec*) (set! aqa44@build-library-letrec* (lambda (aqab9@ae aqaba@name aqabb@vars aqabc@locs aqabd@val-exps aqabe@body-exp) (cons 'begin (append (map (lambda (aqac5@var) (cons 'set! (cons aqac5@var '((unspecified))))) aqabb@vars) (append (apply append (map (lambda (aqac7@var aqac8@loc aqac9@val-exp) (list (list 'set! aqac7@var aqac9@val-exp) (list 'set! aqac8@loc aqac7@var))) aqabb@vars aqabc@locs aqabd@val-exps)) (list aqabe@body-exp)))))) (set! aqade@aqa44@build-library-letrec* aqa44@build-library-letrec*) (set! aqa46@build-receive (lambda (aqacd@ae aqace@vars aqacf@producer aqad0@body*) (begin (display '"************** in ") (cons 'receive (cons aqace@vars (cons aqacf@producer aqad0@body*)))))) (set! aqadf@aqa46@build-receive aqa46@build-receive) (void))
(begin (set! aqaee@file-options-macro (unspecified)) (set! aqaf0@set-cons (unspecified)) (set! aqaf2@set-union (unspecified)) (set! aqaf7@top-mark* (unspecified)) (set! aqaf9@top-marked? (unspecified)) (set! aqafb@gen-lexical (unspecified)) (set! aqafd@gen-global (unspecified)) (set! aqaff@gen-label (unspecified)) (set! aqb01@gen-top-level-label (unspecified)) (set! aqb03@gen-define-label+loc (unspecified)) (set! aqb05@gen-define-label (unspecified)) (set! aqb0f@rib? (unspecified)) (set! aqb11@rib-sym* (unspecified)) (set! aqb13@set-rib-sym*! (unspecified)) (set! aqb15@rib-mark** (unspecified)) (set! aqb17@set-rib-mark**! (unspecified)) (set! aqb19@rib-label* (unspecified)) (set! aqb1b@set-rib-label*! (unspecified)) (set! aqb1d@rib-sealed/freq (unspecified)) (set! aqb1f@set-rib-sealed/freq! (unspecified)) (set! aqb21@rib-cache (unspecified)) (set! aqb23@set-rib-cache! (unspecified)) (set! aqb25@dummy (unspecified)) (set! aqb27@make-empty-rib (unspecified)) (set! aqb29@extend-rib! (unspecified)) (set! aqb2b@extend-rib/nc! (unspecified)) (set! aqb2d@make-rib-map (unspecified)) (set! aqb2f@seal-rib! (unspecified)) (set! aqb31@unseal-rib! (unspecified)) (set! aqb33@make-full-rib (unspecified)) (set! aqb35@rp (unspecified)) (set! aqb3f@stx? (unspecified)) (set! aqb41@stx-expr (unspecified)) (set! aqb43@set-stx-expr! (unspecified)) (set! aqb45@stx-mark* (unspecified)) (set! aqb47@set-stx-mark*! (unspecified)) (set! aqb49@stx-subst* (unspecified)) (set! aqb4b@set-stx-subst*! (unspecified)) (set! aqb4d@stx-ae* (unspecified)) (set! aqb4f@set-stx-ae*! (unspecified)) (set! aqb51@dummy (unspecified)) (set! aqb53@datum->stx (unspecified)) (set! aqb55@gen-mark (unspecified)) (set! aqb57@anti-mark (unspecified)) (set! aqb59@anti-mark? (unspecified)) (set! aqb5b@mkstx (unspecified)) (set! aqb5d@add-mark (unspecified)) (set! aqb5f@add-subst (unspecified)) (set! aqb61@syntax-kind? (unspecified)) (set! aqb63@syntax-vector->list (unspecified)) (set! aqb65@syntax-pair? (unspecified)) (set! aqb67@syntax-vector? (unspecified)) (set! aqb69@syntax-null? (unspecified)) (set! aqb6b@syntax-list? (unspecified)) (set! aqb6d@syntax-car (unspecified)) (set! aqb6f@syntax-cdr (unspecified)) (set! aqb71@syntax->list (unspecified)) (set! aqb73@id? (unspecified)) (set! aqb75@id->sym (unspecified)) (set! aqb77@bound-id=? (unspecified)) (set! aqb79@free-id=? (unspecified)) (set! aqb7b@valid-bound-ids? (unspecified)) (set! aqb7d@distinct-bound-ids? (unspecified)) (set! aqb7f@bound-id-member? (unspecified)) (set! aqb81@self-evaluating? (unspecified)) (set! aqb83@strip-annotations (unspecified)) (set! aqb85@strip (unspecified)) (set! aqb87@stx->datum (unspecified)) (set! aqb89@id->label (unspecified)) (set! aqb8b@label->binding (unspecified)) (set! aqb8d@make-binding (unspecified)) (set! aqb8f@binding-type (unspecified)) (set! aqb91@binding-value (unspecified)) (set! aqb93@raise-unbound-error (unspecified)) (set! aqb95@syntax-type (unspecified)) (set! aqba3@sanitize-binding (unspecified)) (set! aqba5@make-variable-transformer (unspecified)) (set! aqba7@variable-transformer? (unspecified)) (set! aqba9@variable-transformer-procedure (unspecified)) (set! aqbab@make-eval-transformer (unspecified)) (set! aqcfc@parse-define (unspecified)) (set! aqcfe@parse-define-syntax (unspecified)) (set! aqd00@scheme-stx-hashtable (unspecified)) (set! aqd02@scheme-stx (unspecified)) (set! aqd04@lexical-var (unspecified)) (set! aqd06@lexical-mutable? (unspecified)) (set! aqd08@set-lexical-mutable! (unspecified)) (set! aqd0a@add-lexical (unspecified)) (set! aqd0c@add-lexicals (unspecified)) (set! aqd0e@letrec-helper (unspecified)) (set! aqd10@let-transformer (unspecified)) (set! aqd12@letrec-transformer (unspecified)) (set! aqd14@letrec*-transformer (unspecified)) (set! aqd16@fluid-let-syntax-transformer (unspecified)) (set! aqd18@type-descriptor-transformer (unspecified)) (set! aqd1a@record-type-descriptor-transformer (unspecified)) (set! aqd1c@record-constructor-descriptor-transformer (unspecified)) (set! aqd1e@when-macro (unspecified)) (set! aqd20@unless-macro (unspecified)) (set! aqd22@if-transformer (unspecified)) (set! aqd24@and-transformer (unspecified)) (set! aqd26@or-transformer (unspecified)) (set! aqd28@case-macro (unspecified)) (set! aqd2a@quote-transformer (unspecified)) (set! aqd2c@case-lambda-transformer (unspecified)) (set! aqd2e@lambda-transformer (unspecified)) (set! aqd30@bless (unspecified)) (set! aqd32@with-syntax-macro (unspecified)) (set! aqd34@invalid-fmls-error (unspecified)) (set! aqd36@let-macro (unspecified)) (set! aqd38@let-values-macro (unspecified)) (set! aqd3a@let*-values-macro (unspecified)) (set! aqd3c@trace-lambda-macro (unspecified)) (set! aqd3e@trace-define-macro (unspecified)) (set! aqd40@trace-define-syntax-macro (unspecified)) (set! aqd42@trace-let/rec-syntax (unspecified)) (set! aqd44@trace-let-syntax-macro (unspecified)) (set! aqd46@trace-letrec-syntax-macro (unspecified)) (set! aqd48@guard-macro (unspecified)) (set! aqd4a@define-enumeration-macro (unspecified)) (set! aqd4c@time-macro (unspecified)) (set! aqd4e@delay-macro (unspecified)) (set! aqd50@assert-macro (unspecified)) (set! aqd52@endianness-macro (unspecified)) (set! aqd54@identifier-syntax-macro (unspecified)) (set! aqd56@do-macro (unspecified)) (set! aqd58@let*-macro (unspecified)) (set! aqd5a@or-macro (unspecified)) (set! aqd5c@and-macro (unspecified)) (set! aqd5e@cond-macro (unspecified)) (set! aqd60@do-include (unspecified)) (set! aqd62@include-macro (unspecified)) (set! aqd64@include-into-macro (unspecified)) (set! aqd66@syntax-rules-macro (unspecified)) (set! aqd68@quasiquote-macro (unspecified)) (set! aqd6a@quasisyntax-macro (unspecified)) (set! aqd6c@define-struct-macro (unspecified)) (set! aqd6e@define-record-type-macro (unspecified)) (set! aqd70@define-condition-type-macro (unspecified)) (set! aqd72@incorrect-usage-macro (unspecified)) (set! aqd74@parameterize-macro (unspecified)) (set! aqd76@foreign-call-transformer (unspecified)) (set! aqd78@convert-pattern (unspecified)) (set! aqd7a@syntax-dispatch (unspecified)) (set! aqd7c@ellipsis? (unspecified)) (set! aqd7e@underscore? (unspecified)) (set! aqd80@verify-literals (unspecified)) (set! aqd82@syntax-case-transformer (unspecified)) (set! aqd84@ellipsis-map (unspecified)) (set! aqd86@syntax-transformer (unspecified)) (set! aqd88@core-macro-transformer (unspecified)) (set! aqd8a@symbol-macro (unspecified)) (set! aqd8c@macro-transformer (unspecified)) (set! aqd8e@local-macro-transformer (unspecified)) (set! aqd90@do-macro-call (unspecified)) (set! aqd92@chi-macro (unspecified)) (set! aqd94@chi-local-macro (unspecified)) (set! aqd96@chi-global-macro (unspecified)) (set! aqd98@chi-expr* (unspecified)) (set! aqd9a@chi-application (unspecified)) (set! aqd9c@chi-expr (unspecified)) (set! aqd9e@chi-set! (unspecified)) (set! aqda0@verify-formals (unspecified)) (set! aqda2@chi-lambda-clause (unspecified)) (set! aqda4@chi-lambda-clause* (unspecified)) (set! aqda6@chi-defun (unspecified)) (set! aqda8@chi-rhs (unspecified)) (set! aqdaa@expand-interaction-rhs*/init* (unspecified)) (set! aqdac@chi-rhs* (unspecified)) (set! aqdae@find-bound=? (unspecified)) (set! aqdb0@find-dups (unspecified)) (set! aqdb2@chi-internal (unspecified)) (set! aqdb4@parse-module (unspecified)) (set! aqdbe@module-interface? (unspecified)) (set! aqdc0@module-interface-first-mark (unspecified)) (set! aqdc2@set-module-interface-first-mark! (unspecified)) (set! aqdc4@module-interface-exp-id-vec (unspecified)) (set! aqdc6@set-module-interface-exp-id-vec! (unspecified)) (set! aqdc8@module-interface-exp-lab-vec (unspecified)) (set! aqdca@set-module-interface-exp-lab-vec! (unspecified)) (set! aqdcc@dummy (unspecified)) (set! aqdce@module-interface-exp-id* (unspecified)) (set! aqdd0@chi-internal-module (unspecified)) (set! aqdd2@chi-body* (unspecified)) (set! aqdd4@expand-transformer (unspecified)) (set! aqdd6@parse-exports (unspecified)) (set! aqdd8@parse-library-name (unspecified)) (set! aqdda@parse-library (unspecified)) (set! aqddc@parse-import-spec* (unspecified)) (set! aqdde@make-top-rib (unspecified)) (set! aqde0@make-collector (unspecified)) (set! aqde2@inv-collector (unspecified)) (set! aqde4@vis-collector (unspecified)) (set! aqde6@imp-collector (unspecified)) (set! aqde8@chi-library-internal (unspecified)) (set! aqdea@chi-interaction-expr (unspecified)) (set! aqdec@library-body-expander (unspecified)) (set! aqdee@core-library-expander (unspecified)) (set! aqdf0@parse-top-level-program (unspecified)) (set! aqdf2@top-level-expander (unspecified)) (set! aqdf4@rp (unspecified)) (set! aqdfe@env? (unspecified)) (set! aqe00@env-names (unspecified)) (set! aqe02@set-env-names! (unspecified)) (set! aqe04@env-labels (unspecified)) (set! aqe06@set-env-labels! (unspecified)) (set! aqe08@env-itc (unspecified)) (set! aqe0a@set-env-itc! (unspecified)) (set! aqe0c@dummy (unspecified)) (set! aqe0e@rp (unspecified)) (set! aqe18@interaction-env? (unspecified)) (set! aqe1a@interaction-env-rib (unspecified)) (set! aqe1c@set-interaction-env-rib! (unspecified)) (set! aqe1e@interaction-env-r (unspecified)) (set! aqe20@set-interaction-env-r! (unspecified)) (set! aqe22@interaction-env-locs (unspecified)) (set! aqe24@set-interaction-env-locs! (unspecified)) (set! aqe26@dummy (unspecified)) (set! aqe28@interaction-environment-symbols (unspecified)) (set! aqe2a@environment-bindings (unspecified)) (set! aqe2c@parse-binding (unspecified)) (set! aqe2e@environment? (unspecified)) (set! aqe30@environment-symbols (unspecified)) (set! aqe32@environment (unspecified)) (set! aqe34@null-environment (unspecified)) (set! aqe36@scheme-report-environment (unspecified)) (set! aqe38@expand (unspecified)) (set! aqe3a@eval (unspecified)) (set! aqe3c@library-expander (unspecified)) (set! aqe3e@boot-library-expand (unspecified)) (set! aqe40@rev-map-append (unspecified)) (set! aqe42@build-exports (unspecified)) (set! aqe44@make-export-subst (unspecified)) (set! aqe46@make-export-env/macros (unspecified)) (set! aqe48@generate-temporaries (unspecified)) (set! aqe4a@free-identifier=? (unspecified)) (set! aqe4c@bound-identifier=? (unspecified)) (set! aqe4e@make-source-condition (unspecified)) (set! aqe50@extract-position-condition (unspecified)) (set! aqe52@expression-position (unspecified)) (set! aqe54@assertion-error (unspecified)) (set! aqe56@syntax-error (unspecified)) (set! aqe58@syntax-violation* (unspecified)) (set! aqe5a@syntax-violation (unspecified)) (set! aqe5c@identifier? (unspecified)) (set! aqe5e@datum->syntax (unspecified)) (set! aqe60@syntax->datum (unspecified)) (set! aqe62@ungensym-all (unspecified)) (set! aqe64@compile-r6rs-top-level (unspecified)) (set! aqe66@pre-compile-r6rs-top-level (unspecified)) (set! aqe68@interaction-environment (unspecified)) (set! aqe6a@top-level-context (unspecified)) (set! aqaee@file-options-macro (lambda (aqe6b@x) (letrec* ((aqe6e@valid-option? (lambda (aqe77@x) (and (aqb73@id? aqe77@x) (memq (aqb75@id->sym aqe77@x) '(no-fail no-create no-truncate)))))) (let ((aqe6f@t aqe6b@x)) (let ((aqe71@ls/false (aqd7a@syntax-dispatch aqe6f@t '(_ . each-any)))) (if (and aqe71@ls/false (apply (lambda (aqe73@opt*) (for-all aqe6e@valid-option? aqe73@opt*)) aqe71@ls/false)) (apply (lambda (aqe75@opt*) (aqd30@bless (list 'make-file-options (list 'quote aqe75@opt*)))) aqe71@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aqe6f@t))))))) (set! aq27c1@aqaee@file-options-macro aqaee@file-options-macro) (set! aqaf0@set-cons (lambda (aqe79@x aqe7a@ls) (if (memq aqe79@x aqe7a@ls) aqe7a@ls (cons aqe79@x aqe7a@ls)))) (set! aq27c2@aqaf0@set-cons aqaf0@set-cons) (set! aqaf2@set-union (lambda (aqe7d@ls1 aqe7e@ls2) (if (null? aqe7d@ls1) aqe7e@ls2 (if (memq (car aqe7d@ls1) aqe7e@ls2) (aqaf2@set-union (cdr aqe7d@ls1) aqe7e@ls2) (cons (car aqe7d@ls1) (aqaf2@set-union (cdr aqe7d@ls1) aqe7e@ls2)))))) (set! aq27c3@aqaf2@set-union aqaf2@set-union) (set! aqaf7@top-mark* '(top)) (set! aq27c4@aqaf7@top-mark* aqaf7@top-mark*) (set! aqaf9@top-marked? (lambda (aqe81@m*) (memq 'top aqe81@m*))) (set! aq27c5@aqaf9@top-marked? aqaf9@top-marked?) (set! aqafb@gen-lexical (lambda (aqe83@sym) (if (symbol? aqe83@sym) (gensym aqe83@sym) (if (aqb3f@stx? aqe83@sym) (aqafb@gen-lexical (aqb75@id->sym aqe83@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" aqe83@sym))))) (set! aq27c6@aqafb@gen-lexical aqafb@gen-lexical) (set! aqafd@gen-global (lambda (aqe85@x) (aqafb@gen-lexical aqe85@x))) (set! aq27c7@aqafd@gen-global aqafd@gen-global) (set! aqaff@gen-label (lambda (aqe87@_) (gensym))) (set! aq27c8@aqaff@gen-label aqaff@gen-label) (set! aqb01@gen-top-level-label (lambda (aqe89@id aqe8a@rib) (letrec* ((aqe8e@find (lambda (aqe99@sym aqe9a@mark* aqe9b@sym* aqe9c@mark** aqe9d@label*) (and (pair? aqe9b@sym*) (if (and (eq? aqe99@sym (car aqe9b@sym*)) (same-marks? aqe9a@mark* (car aqe9c@mark**))) (car aqe9d@label*) (aqe8e@find aqe99@sym aqe9a@mark* (cdr aqe9b@sym*) (cdr aqe9c@mark**) (cdr aqe9d@label*))))))) (let ((aqe8f@sym (aqb75@id->sym aqe89@id)) (aqe90@mark* (aqb45@stx-mark* aqe89@id))) (let ((aqe93@sym* (aqb11@rib-sym* aqe8a@rib))) (let ((aqe95@t (and (memq aqe8f@sym (aqb11@rib-sym* aqe8a@rib)) (aqe8e@find aqe8f@sym aqe90@mark* aqe93@sym* (aqb15@rib-mark** aqe8a@rib) (aqb19@rib-label* aqe8a@rib))))) (if aqe95@t ((lambda (aqe97@label) (if (aq98e@aq7db@imported-label->binding aqe97@label) (gensym) aqe97@label)) aqe95@t) (gensym)))))))) (set! aq27c9@aqb01@gen-top-level-label aqb01@gen-top-level-label) (set! aqb03@gen-define-label+loc (lambda (aqea3@id aqea4@rib) (let ((aqea7@t (aqe6a@top-level-context))) (if aqea7@t ((lambda (aqea9@env) (let ((aqeab@label (aqb01@gen-top-level-label aqea3@id aqea4@rib)) (aqeac@locs (aqe22@interaction-env-locs aqea9@env))) (values aqeab@label (let ((aqeaf@t (assq aqeab@label aqeac@locs))) (if aqeaf@t (cdr aqeaf@t) (let ((aqeb1@loc (aqafb@gen-lexical aqea3@id))) (begin (aqe24@set-interaction-env-locs! aqea9@env (cons (cons aqeab@label aqeb1@loc) aqeac@locs)) aqeb1@loc))))))) aqea7@t) (values (gensym) (aqafb@gen-lexical aqea3@id)))))) (set! aq27ca@aqb03@gen-define-label+loc aqb03@gen-define-label+loc) (set! aqb05@gen-define-label (lambda (aqeb3@id aqeb4@rib) (if (aqe6a@top-level-context) (aqb01@gen-top-level-label aqeb3@id aqeb4@rib) (gensym)))) (set! aq27cb@aqb05@gen-define-label aqb05@gen-define-label) (set! aqb0f@rib? (lambda (aqeb7@x) (and (simple-struct? aqeb7@x) (eq? (simple-struct-name aqeb7@x) 'rib)))) (set! aq27cc@aqb0f@rib? aqb0f@rib?) (set! aqb11@rib-sym* (lambda (aqeb9@x) (simple-struct-ref aqeb9@x '0))) (set! aq27cd@aqb11@rib-sym* aqb11@rib-sym*) (set! aqb13@set-rib-sym*! (lambda (aqebb@x aqebc@val) (simple-struct-set! aqebb@x '0 aqebc@val))) (set! aq27ce@aqb13@set-rib-sym*! aqb13@set-rib-sym*!) (set! aqb15@rib-mark** (lambda (aqebf@x) (simple-struct-ref aqebf@x '1))) (set! aq27cf@aqb15@rib-mark** aqb15@rib-mark**) (set! aqb17@set-rib-mark**! (lambda (aqec1@x aqec2@val) (simple-struct-set! aqec1@x '1 aqec2@val))) (set! aq27d0@aqb17@set-rib-mark**! aqb17@set-rib-mark**!) (set! aqb19@rib-label* (lambda (aqec5@x) (simple-struct-ref aqec5@x '2))) (set! aq27d1@aqb19@rib-label* aqb19@rib-label*) (set! aqb1b@set-rib-label*! (lambda (aqec7@x aqec8@val) (simple-struct-set! aqec7@x '2 aqec8@val))) (set! aq27d2@aqb1b@set-rib-label*! aqb1b@set-rib-label*!) (set! aqb1d@rib-sealed/freq (lambda (aqecb@x) (simple-struct-ref aqecb@x '3))) (set! aq27d3@aqb1d@rib-sealed/freq aqb1d@rib-sealed/freq) (set! aqb1f@set-rib-sealed/freq! (lambda (aqecd@x aqece@val) (simple-struct-set! aqecd@x '3 aqece@val))) (set! aq27d4@aqb1f@set-rib-sealed/freq! aqb1f@set-rib-sealed/freq!) (set! aqb21@rib-cache (lambda (aqed1@x) (simple-struct-ref aqed1@x '4))) (set! aq27d5@aqb21@rib-cache aqb21@rib-cache) (set! aqb23@set-rib-cache! (lambda (aqed3@x aqed4@val) (simple-struct-set! aqed3@x '4 aqed4@val))) (set! aq27d6@aqb23@set-rib-cache! aqb23@set-rib-cache!) (set! aqb25@dummy '3) (set! aq27d7@aqb25@dummy aqb25@dummy) (set! aqb27@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! aq27d8@aqb27@make-empty-rib aqb27@make-empty-rib) (set! aqb29@extend-rib! (lambda (aqed7@rib aqed8@id aqed9@label) (letrec* ((aqede@find (lambda (aqeeb@sym aqeec@mark* aqeed@sym* aqeee@mark** aqeef@label*) (and (pair? aqeed@sym*) (if (and (eq? aqeeb@sym (car aqeed@sym*)) (same-marks? aqeec@mark* (car aqeee@mark**))) aqeef@label* (aqede@find aqeeb@sym aqeec@mark* (cdr aqeed@sym*) (cdr aqeee@mark**) (cdr aqeef@label*))))))) (begin (if (aqb1d@rib-sealed/freq aqed7@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" aqed7@rib) (void)) (let ((aqedf@sym (aqb75@id->sym aqed8@id)) (aqee0@mark* (aqb45@stx-mark* aqed8@id))) (let ((aqee3@sym* (aqb11@rib-sym* aqed7@rib))) (let ((aqee5@t (and (memq aqedf@sym (aqb11@rib-sym* aqed7@rib)) (aqede@find aqedf@sym aqee0@mark* aqee3@sym* (aqb15@rib-mark** aqed7@rib) (aqb19@rib-label* aqed7@rib))))) (if aqee5@t ((lambda (aqee7@p) (if (not (eq? aqed9@label (car aqee7@p))) (if (aqe6a@top-level-context) (set-car! aqee7@p aqed9@label) (aqe5a@syntax-violation '#f '"multiple definitions of identifier" aqed8@id)) (void))) aqee5@t) (begin (if (aqb21@rib-cache aqed7@rib) (hashtable-update! (aqb21@rib-cache aqed7@rib) aqedf@sym (lambda (aqee9@e) (cons (cons aqee0@mark* aqed9@label) aqee9@e)) '()) (void)) (aqb13@set-rib-sym*! aqed7@rib (cons aqedf@sym aqee3@sym*)) (aqb17@set-rib-mark**! aqed7@rib (cons aqee0@mark* (aqb15@rib-mark** aqed7@rib))) (aqb1b@set-rib-label*! aqed7@rib (cons aqed9@label (aqb19@rib-label* aqed7@rib)))))))))))) (set! aq27d9@aqb29@extend-rib! aqb29@extend-rib!) (set! aqb2b@extend-rib/nc! (lambda (aqef5@rib aqef6@id aqef7@label) (let ((aqefb@sym (aqb75@id->sym aqef6@id)) (aqefc@mark* (aqb45@stx-mark* aqef6@id))) (let ((aqeff@sym* (aqb11@rib-sym* aqef5@rib))) (begin (if (aqb21@rib-cache aqef5@rib) (hashtable-update! (aqb21@rib-cache aqef5@rib) aqefb@sym (lambda (aqf01@e) (cons (cons aqefc@mark* aqef7@label) aqf01@e)) '()) (void)) (aqb13@set-rib-sym*! aqef5@rib (cons aqefb@sym aqeff@sym*)) (aqb17@set-rib-mark**! aqef5@rib (cons aqefc@mark* (aqb15@rib-mark** aqef5@rib))) (aqb1b@set-rib-label*! aqef5@rib (cons aqef7@label (aqb19@rib-label* aqef5@rib)))))))) (set! aq27da@aqb2b@extend-rib/nc! aqb2b@extend-rib/nc!) (set! aqb2d@make-rib-map (lambda (aqf03@sym*) (let ((aqf05@ht (make-eq-hashtable))) (let aqf0b@f ((aqf07@i '0) (aqf08@sym* aqf03@sym*)) (if (null? aqf08@sym*) aqf05@ht (begin (hashtable-update! aqf05@ht (car aqf08@sym*) (lambda (aqf0d@x) (cons aqf07@i aqf0d@x)) '()) (aqf0b@f (+ aqf07@i '1) (cdr aqf08@sym*)))))))) (set! aq27db@aqb2d@make-rib-map aqb2d@make-rib-map) (set! aqb2f@seal-rib! (lambda (aqf0f@rib) (let ((aqf11@sym* (aqb11@rib-sym* aqf0f@rib))) (if (not (null? aqf11@sym*)) (begin (aqb13@set-rib-sym*! aqf0f@rib (list->vector aqf11@sym*)) (aqb17@set-rib-mark**! aqf0f@rib (list->vector (aqb15@rib-mark** aqf0f@rib))) (aqb1b@set-rib-label*! aqf0f@rib (list->vector (aqb19@rib-label* aqf0f@rib))) (aqb1f@set-rib-sealed/freq! aqf0f@rib (aqb2d@make-rib-map aqf11@sym*))) (void))))) (set! aq27dc@aqb2f@seal-rib! aqb2f@seal-rib!) (set! aqb31@unseal-rib! (lambda (aqf13@rib) (if (aqb1d@rib-sealed/freq aqf13@rib) (begin (aqb1f@set-rib-sealed/freq! aqf13@rib '#f) (aqb13@set-rib-sym*! aqf13@rib (vector->list (aqb11@rib-sym* aqf13@rib))) (aqb17@set-rib-mark**! aqf13@rib (vector->list (aqb15@rib-mark** aqf13@rib))) (aqb1b@set-rib-label*! aqf13@rib (vector->list (aqb19@rib-label* aqf13@rib)))) (void)))) (set! aq27dd@aqb31@unseal-rib! aqb31@unseal-rib!) (set! aqb33@make-full-rib (lambda (aqf15@id* aqf16@label*) (let ((aqf19@r (make-simple-struct 'rib '6 (list (map aqb75@id->sym aqf15@id*) (map aqb45@stx-mark* aqf15@id*) aqf16@label* '#f '#f)))) (begin (aqb2f@seal-rib! aqf19@r) aqf19@r)))) (set! aq27de@aqb33@make-full-rib aqb33@make-full-rib) (set! aqb35@rp (aq6c0@aq59b@make-record-printer 'stx (lambda (aqf1b@x aqf1c@p aqf1d@wr) (begin (display '"#<syntax " aqf1c@p) (write (aqb87@stx->datum aqf1b@x) aqf1c@p) (let ((aqf21@expr (aqb41@stx-expr aqf1b@x))) (if (aq6b7@aq589@annotation? aqf21@expr) (let ((aqf23@src (aq6b8@aq58b@annotation-source aqf21@expr))) (if (pair? aqf23@src) (begin (display '" [" aqf1c@p) (display (cdr aqf23@src) aqf1c@p) (display '" of " aqf1c@p) (display (car aqf23@src) aqf1c@p) (display '"]" aqf1c@p)) (void))) (void))) (display '">" aqf1c@p))))) (set! aq27df@aqb35@rp aqb35@rp) (set! aqb3f@stx? (lambda (aqf25@x) (and (simple-struct? aqf25@x) (eq? (simple-struct-name aqf25@x) 'stx)))) (set! aq27e0@aqb3f@stx? aqb3f@stx?) (set! aqb41@stx-expr (lambda (aqf27@x) (simple-struct-ref aqf27@x '0))) (set! aq27e1@aqb41@stx-expr aqb41@stx-expr) (set! aqb43@set-stx-expr! (lambda (aqf29@x aqf2a@val) (simple-struct-set! aqf29@x '0 aqf2a@val))) (set! aq27e2@aqb43@set-stx-expr! aqb43@set-stx-expr!) (set! aqb45@stx-mark* (lambda (aqf2d@x) (simple-struct-ref aqf2d@x '1))) (set! aq27e3@aqb45@stx-mark* aqb45@stx-mark*) (set! aqb47@set-stx-mark*! (lambda (aqf2f@x aqf30@val) (simple-struct-set! aqf2f@x '1 aqf30@val))) (set! aq27e4@aqb47@set-stx-mark*! aqb47@set-stx-mark*!) (set! aqb49@stx-subst* (lambda (aqf33@x) (simple-struct-ref aqf33@x '2))) (set! aq27e5@aqb49@stx-subst* aqb49@stx-subst*) (set! aqb4b@set-stx-subst*! (lambda (aqf35@x aqf36@val) (simple-struct-set! aqf35@x '2 aqf36@val))) (set! aq27e6@aqb4b@set-stx-subst*! aqb4b@set-stx-subst*!) (set! aqb4d@stx-ae* (lambda (aqf39@x) (simple-struct-ref aqf39@x '3))) (set! aq27e7@aqb4d@stx-ae* aqb4d@stx-ae*) (set! aqb4f@set-stx-ae*! (lambda (aqf3b@x aqf3c@val) (simple-struct-set! aqf3b@x '3 aqf3c@val))) (set! aq27e8@aqb4f@set-stx-ae*! aqb4f@set-stx-ae*!) (set! aqb51@dummy '3) (set! aq27e9@aqb51@dummy aqb51@dummy) (set! aqb53@datum->stx (lambda (aqf3f@id aqf40@datum) (make-simple-struct 'stx '5 (list aqf40@datum (aqb45@stx-mark* aqf3f@id) (aqb49@stx-subst* aqf3f@id) (aqb4d@stx-ae* aqf3f@id))))) (set! aq27ea@aqb53@datum->stx aqb53@datum->stx) (set! aqb55@gen-mark (lambda () (string '#\m))) (set! aq27eb@aqb55@gen-mark aqb55@gen-mark) (set! aqb57@anti-mark '#f) (set! aq27ec@aqb57@anti-mark aqb57@anti-mark) (set! aqb59@anti-mark? not) (set! aq27ed@aqb59@anti-mark? aqb59@anti-mark?) (set! aqb5b@mkstx (lambda (aqf43@e aqf44@m* aqf45@s* aqf46@ae*) (if (and (aqb3f@stx? aqf43@e) (not (aqaf9@top-marked? aqf44@m*))) (call-with-values (lambda () (join-wraps aqf44@m* aqf45@s* aqf46@ae* aqf43@e)) (lambda (aqf51@aqf4c aqf52@aqf4e aqf53@aqf50) (let ((aqf57@ae* aqf53@aqf50) (aqf58@s* aqf52@aqf4e) (aqf59@m* aqf51@aqf4c)) (make-simple-struct 'stx '5 (list (aqb41@stx-expr aqf43@e) aqf59@m* aqf58@s* aqf57@ae*))))) (make-simple-struct 'stx '5 (list aqf43@e aqf44@m* aqf45@s* aqf46@ae*))))) (set! aq27ee@aqb5b@mkstx aqb5b@mkstx) (set! aqb5d@add-mark (lambda (aqf5d@m aqf5e@e aqf5f@ae) (aqb5b@mkstx aqf5e@e (list aqf5d@m) '(shift) (list aqf5f@ae)))) (set! aq27ef@aqb5d@add-mark aqb5d@add-mark) (set! aqb5f@add-subst (lambda (aqf63@subst aqf64@e) (aqb5b@mkstx aqf64@e '() (list aqf63@subst) '()))) (set! aq27f0@aqb5f@add-subst aqb5f@add-subst) (set! aqb61@syntax-kind? (lambda (aqf67@x aqf68@p?) (if (aqb3f@stx? aqf67@x) (aqb61@syntax-kind? (aqb41@stx-expr aqf67@x) aqf68@p?) (if (aq6b7@aq589@annotation? aqf67@x) (aqb61@syntax-kind? (aq6b9@aq58d@annotation-expression aqf67@x) aqf68@p?) (aqf68@p? aqf67@x))))) (set! aq27f1@aqb61@syntax-kind? aqb61@syntax-kind?) (set! aqb63@syntax-vector->list (lambda (aqf6b@x) (if (aqb3f@stx? aqf6b@x) (let ((aqf6d@ls (aqb63@syntax-vector->list (aqb41@stx-expr aqf6b@x))) (aqf6e@m* (aqb45@stx-mark* aqf6b@x)) (aqf6f@s* (aqb49@stx-subst* aqf6b@x)) (aqf70@ae* (aqb4d@stx-ae* aqf6b@x))) (map (lambda (aqf75@x) (aqb5b@mkstx aqf75@x aqf6e@m* aqf6f@s* aqf70@ae*)) aqf6d@ls)) (if (aq6b7@aq589@annotation? aqf6b@x) (aqb63@syntax-vector->list (aq6b9@aq58d@annotation-expression aqf6b@x)) (if (vector? aqf6b@x) (vector->list aqf6b@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" aqf6b@x)))))) (set! aq27f2@aqb63@syntax-vector->list aqb63@syntax-vector->list) (set! aqb65@syntax-pair? (lambda (aqf77@x) (aqb61@syntax-kind? aqf77@x pair?))) (set! aq27f3@aqb65@syntax-pair? aqb65@syntax-pair?) (set! aqb67@syntax-vector? (lambda (aqf79@x) (aqb61@syntax-kind? aqf79@x vector?))) (set! aq27f4@aqb67@syntax-vector? aqb67@syntax-vector?) (set! aqb69@syntax-null? (lambda (aqf7b@x) (aqb61@syntax-kind? aqf7b@x null?))) (set! aq27f5@aqb69@syntax-null? aqb69@syntax-null?) (set! aqb6b@syntax-list? (lambda (aqf7d@x) (or (aqb69@syntax-null? aqf7d@x) (and (aqb65@syntax-pair? aqf7d@x) (aqb6b@syntax-list? (aqb6f@syntax-cdr aqf7d@x)))))) (set! aq27f6@aqb6b@syntax-list? aqb6b@syntax-list?) (set! aqb6d@syntax-car (lambda (aqf7f@x) (if (aqb3f@stx? aqf7f@x) (aqb5b@mkstx (aqb6d@syntax-car (aqb41@stx-expr aqf7f@x)) (aqb45@stx-mark* aqf7f@x) (aqb49@stx-subst* aqf7f@x) (aqb4d@stx-ae* aqf7f@x)) (if (aq6b7@aq589@annotation? aqf7f@x) (aqb6d@syntax-car (aq6b9@aq58d@annotation-expression aqf7f@x)) (if (pair? aqf7f@x) (car aqf7f@x) (assertion-violation 'syntax-car '"BUG: not a pair" aqf7f@x)))))) (set! aq27f7@aqb6d@syntax-car aqb6d@syntax-car) (set! aqb6f@syntax-cdr (lambda (aqf81@x) (if (aqb3f@stx? aqf81@x) (aqb5b@mkstx (aqb6f@syntax-cdr (aqb41@stx-expr aqf81@x)) (aqb45@stx-mark* aqf81@x) (aqb49@stx-subst* aqf81@x) (aqb4d@stx-ae* aqf81@x)) (if (aq6b7@aq589@annotation? aqf81@x) (aqb6f@syntax-cdr (aq6b9@aq58d@annotation-expression aqf81@x)) (if (pair? aqf81@x) (cdr aqf81@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" aqf81@x)))))) (set! aq27f8@aqb6f@syntax-cdr aqb6f@syntax-cdr) (set! aqb71@syntax->list (lambda (aqf83@x) (if (aqb65@syntax-pair? aqf83@x) (cons (aqb6d@syntax-car aqf83@x) (aqb71@syntax->list (aqb6f@syntax-cdr aqf83@x))) (if (aqb69@syntax-null? aqf83@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" aqf83@x))))) (set! aq27f9@aqb71@syntax->list aqb71@syntax->list) (set! aqb73@id? (lambda (aqf85@x) (and (aqb3f@stx? aqf85@x) (symbol? (aqb41@stx-expr aqf85@x))))) (set! aq27fa@aqb73@id? aqb73@id?) (set! aqb75@id->sym (lambda (aqf87@x) (aqb41@stx-expr aqf87@x))) (set! aq27fb@aqb75@id->sym aqb75@id->sym) (set! aqb77@bound-id=? (lambda (aqf89@x aqf8a@y) (and (eq? (aqb75@id->sym aqf89@x) (aqb75@id->sym aqf8a@y)) (same-marks? (aqb45@stx-mark* aqf89@x) (aqb45@stx-mark* aqf8a@y))))) (set! aq27fc@aqb77@bound-id=? aqb77@bound-id=?) (set! aqb79@free-id=? (lambda (aqf8d@i aqf8e@j) (let ((aqf91@t0 (id->real-label aqf8d@i)) (aqf92@t1 (id->real-label aqf8e@j))) (if (or aqf91@t0 aqf92@t1) (eq? aqf91@t0 aqf92@t1) (eq? (aqb75@id->sym aqf8d@i) (aqb75@id->sym aqf8e@j)))))) (set! aq27fd@aqb79@free-id=? aqb79@free-id=?) (set! aqb7b@valid-bound-ids? (lambda (aqf95@id*) (and (for-all aqb73@id? aqf95@id*) (aqb7d@distinct-bound-ids? aqf95@id*)))) (set! aq27fe@aqb7b@valid-bound-ids? aqb7b@valid-bound-ids?) (set! aqb7d@distinct-bound-ids? (lambda (aqf97@id*) (or (null? aqf97@id*) (and (not (aqb7f@bound-id-member? (car aqf97@id*) (cdr aqf97@id*))) (aqb7d@distinct-bound-ids? (cdr aqf97@id*)))))) (set! aq27ff@aqb7d@distinct-bound-ids? aqb7d@distinct-bound-ids?) (set! aqb7f@bound-id-member? (lambda (aqf99@id aqf9a@id*) (and (pair? aqf9a@id*) (or (aqb77@bound-id=? aqf99@id (car aqf9a@id*)) (aqb7f@bound-id-member? aqf99@id (cdr aqf9a@id*)))))) (set! aq2800@aqb7f@bound-id-member? aqb7f@bound-id-member?) (set! aqb81@self-evaluating? (lambda (aqf9d@x) (or (number? aqf9d@x) (string? aqf9d@x) (char? aqf9d@x) (boolean? aqf9d@x) (regexp? aqf9d@x) (bytevector? aqf9d@x)))) (set! aq2801@aqb81@self-evaluating? aqb81@self-evaluating?) (set! aqb83@strip-annotations (lambda (aqf9f@x) (if (pair? aqf9f@x) (cons (aqb83@strip-annotations (car aqf9f@x)) (aqb83@strip-annotations (cdr aqf9f@x))) (if (vector? aqf9f@x) (vector-map aqb83@strip-annotations aqf9f@x) (if (aq6b7@aq589@annotation? aqf9f@x) (aq6b6@aq587@annotation-stripped aqf9f@x) aqf9f@x))))) (set! aq2802@aqb83@strip-annotations aqb83@strip-annotations) (set! aqb85@strip (lambda (aqfa1@x aqfa2@m*) (if (aqaf9@top-marked? aqfa2@m*) (if (or (aq6b7@aq589@annotation? aqfa1@x) (and (pair? aqfa1@x) (aq6b7@aq589@annotation? (car aqfa1@x))) (and (vector? aqfa1@x) (> (vector-length aqfa1@x) '0) (aq6b7@aq589@annotation? (vector-ref aqfa1@x '0)))) (aqb83@strip-annotations aqfa1@x) aqfa1@x) (let aqfa7@f ((aqfa5@x aqfa1@x)) (if (aqb3f@stx? aqfa5@x) (begin (if (pair? (aqb41@stx-expr aqfa5@x)) (begin (set-source-info! (aqb41@stx-expr aqfa5@x) '#f) (set-source-info! (cdr (aqb41@stx-expr aqfa5@x)) '#f) (set-source-info! (car (aqb41@stx-expr aqfa5@x)) '#f)) (void)) (aqb85@strip (aqb41@stx-expr aqfa5@x) (aqb45@stx-mark* aqfa5@x))) (if (aq6b7@aq589@annotation? aqfa5@x) (aq6b6@aq587@annotation-stripped aqfa5@x) (if (pair? aqfa5@x) (let ((aqfa9@a (aqfa7@f (car aqfa5@x))) (aqfaa@d (aqfa7@f (cdr aqfa5@x)))) (if (and (eq? aqfa9@a (car aqfa5@x)) (eq? aqfaa@d (cdr aqfa5@x))) aqfa5@x (cons aqfa9@a aqfaa@d))) (if (vector? aqfa5@x) (let ((aqfad@old (vector->list aqfa5@x))) (let ((aqfaf@new (map aqfa7@f aqfad@old))) (if (for-all eq? aqfad@old aqfaf@new) aqfa5@x (list->vector aqfaf@new)))) aqfa5@x)))))))) (set! aq2803@aqb85@strip aqb85@strip) (set! aqb87@stx->datum (lambda (aqfb1@x) (aqb85@strip aqfb1@x '()))) (set! aq2804@aqb87@stx->datum aqb87@stx->datum) (set! aqb89@id->label (lambda (aqfb3@id) (or (id->real-label aqfb3@id) (let ((aqfb5@t (aqe6a@top-level-context))) (if aqfb5@t ((lambda (aqfb7@env) (let ((aqfb9@rib (aqe1a@interaction-env-rib aqfb7@env))) (call-with-values (lambda () (aqb03@gen-define-label+loc aqfb3@id aqfb9@rib)) (lambda (aqfbf@aqfbc aqfc0@aqfbe) (let ((aqfc3@loc_ aqfc0@aqfbe) (aqfc4@lab aqfbf@aqfbc)) (begin (aqb29@extend-rib! aqfb9@rib aqfb3@id aqfc4@lab) aqfc4@lab)))))) aqfb5@t) '#f))))) (set! aq2805@aqb89@id->label aqb89@id->label) (set! aqb8b@label->binding (lambda (aqfc7@x aqfc8@r) (let ((aqfcb@t (aq98e@aq7db@imported-label->binding aqfc7@x))) (if aqfcb@t ((lambda (aqfcd@b) (if (and (pair? aqfcd@b) (eq? (car aqfcd@b) '$core-rtd)) (cons '$rtd (map aqd30@bless (cdr aqfcd@b))) (if (and (pair? aqfcd@b) (eq? (car aqfcd@b) 'global-rtd)) (let ((aqfcf@lib (cadr aqfcd@b)) (aqfd0@loc (cddr aqfcd@b))) (cons '$rtd (symbol-value aqfd0@loc))) aqfcd@b))) aqfcb@t) (let ((aqfd3@t (assq aqfc7@x aqfc8@r))) (if aqfd3@t (cdr aqfd3@t) (let ((aqfd5@t (aqe6a@top-level-context))) (if aqfd5@t ((lambda (aqfd7@env) (let ((aqfd9@t (assq aqfc7@x (aqe22@interaction-env-locs aqfd7@env)))) (if aqfd9@t ((lambda (aqfdb@p) (cons* 'lexical (cdr aqfdb@p) '#f)) aqfd9@t) '(displaced-lexical . #f)))) aqfd5@t) '(displaced-lexical . #f))))))))) (set! aq2806@aqb8b@label->binding aqb8b@label->binding) (set! aqb8d@make-binding cons) (set! aq2807@aqb8d@make-binding aqb8d@make-binding) (set! aqb8f@binding-type car) (set! aq2808@aqb8f@binding-type aqb8f@binding-type) (set! aqb91@binding-value cdr) (set! aq2809@aqb91@binding-value aqb91@binding-value) (set! aqb93@raise-unbound-error (lambda (aqfdd@id) (aqe58@syntax-violation* '#f '"unbound identifier" aqfdd@id (make-undefined-violation)))) (set! aq280a@aqb93@raise-unbound-error aqb93@raise-unbound-error) (set! aqb95@syntax-type (lambda (aqfdf@e aqfe0@r) (if (aqb73@id? aqfdf@e) (let ((aqfe3@id aqfdf@e)) (let ((aqfe5@label (aqb89@id->label aqfe3@id))) (let ((aqfe7@b (aqb8b@label->binding aqfe5@label aqfe0@r))) (let ((aqfe9@type (aqb8f@binding-type aqfe7@b))) (begin (if (not aqfe5@label) (aqb93@raise-unbound-error aqfe3@id) (void)) (let ((aqfeb@t aqfe9@type)) (if (memv aqfeb@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values aqfe9@type (aqb91@binding-value aqfe7@b) aqfe3@id) (values 'other '#f '#f)))))))) (if (aqb65@syntax-pair? aqfdf@e) (let ((aqfed@id (aqb6d@syntax-car aqfdf@e))) (if (aqb73@id? aqfed@id) (let ((aqfef@label (aqb89@id->label aqfed@id))) (let ((aqff1@b (aqb8b@label->binding aqfef@label aqfe0@r))) (let ((aqff3@type (aqb8f@binding-type aqff1@b))) (begin (if (not aqfef@label) (aqb93@raise-unbound-error aqfed@id) (void)) (let ((aqff5@t aqff3@type)) (if (memv aqff5@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values aqff3@type (aqb91@binding-value aqff1@b) aqfed@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((aqff7@d (aqb87@stx->datum aqfdf@e))) (if (aqb81@self-evaluating? aqff7@d) (values 'constant aqff7@d '#f) (values 'other '#f '#f))))))) (set! aq280b@aqb95@syntax-type aqb95@syntax-type) (set! aqba3@sanitize-binding (lambda (aqff9@x aqffa@src) (if (procedure? aqff9@x) (cons* 'local-macro aqff9@x aqffa@src) (if (and (pair? aqff9@x) (eq? (car aqff9@x) 'macro!) (procedure? (cdr aqff9@x))) (cons* 'local-macro! (cdr aqff9@x) aqffa@src) (if (and (pair? aqff9@x) (eq? (car aqff9@x) '$rtd)) aqff9@x (assertion-violation 'expand '"invalid transformer" aqff9@x)))))) (set! aq280c@aqba3@sanitize-binding aqba3@sanitize-binding) (set! aqba5@make-variable-transformer (lambda (aqffd@x) (if (procedure? aqffd@x) (cons 'macro! aqffd@x) (assertion-violation 'make-variable-transformer '"not a procedure" aqffd@x)))) (set! aq280d@aqba5@make-variable-transformer aqba5@make-variable-transformer) (set! aqba7@variable-transformer? (lambda (aqfff@x) (and (pair? aqfff@x) (eq? (car aqfff@x) 'macro!) (procedure? (cdr aqfff@x))))) (set! aq280e@aqba7@variable-transformer? aqba7@variable-transformer?) (set! aqba9@variable-transformer-procedure (lambda (aq1001@x) (if (aqba7@variable-transformer? aq1001@x) (cdr aq1001@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" aq1001@x)))) (set! aq280f@aqba9@variable-transformer-procedure aqba9@variable-transformer-procedure) (set! aqbab@make-eval-transformer (lambda (aq1003@x) (aqba3@sanitize-binding (eval-core (aq719@aq6d1@expanded->core aq1003@x)) aq1003@x))) (set! aq2810@aqbab@make-eval-transformer aqbab@make-eval-transformer) (set! aqcfc@parse-define (lambda (aq1005@x) (let ((aq1007@t aq1005@x)) (let ((aq1009@ls/false (aqd7a@syntax-dispatch aq1007@t '(_ (any . any) any . each-any)))) (if (and aq1009@ls/false (apply (lambda (aq100b@id aq100c@fmls aq100d@b aq100e@b*) (aqb73@id? aq100b@id)) aq1009@ls/false)) (apply (lambda (aq1013@id aq1014@fmls aq1015@b aq1016@b*) (begin (aqda0@verify-formals aq1014@fmls aq1005@x) (values aq1013@id (cons 'defun (cons aq1014@fmls (cons aq1015@b aq1016@b*)))))) aq1009@ls/false) (let ((aq101b@t aq1007@t)) (let ((aq101d@ls/false (aqd7a@syntax-dispatch aq101b@t '(_ any any)))) (if (and aq101d@ls/false (apply (lambda (aq101f@id aq1020@val) (aqb73@id? aq101f@id)) aq101d@ls/false)) (apply (lambda (aq1023@id aq1024@val) (values aq1023@id (cons 'expr aq1024@val))) aq101d@ls/false) (let ((aq1027@t aq101b@t)) (let ((aq1029@ls/false (aqd7a@syntax-dispatch aq1027@t '(_ any)))) (if (and aq1029@ls/false (apply (lambda (aq102b@id) (aqb73@id? aq102b@id)) aq1029@ls/false)) (apply (lambda (aq102d@id) (values aq102d@id (cons 'expr (aqd30@bless '(void))))) aq1029@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1027@t)))))))))))) (set! aq2811@aqcfc@parse-define aqcfc@parse-define) (set! aqcfe@parse-define-syntax (lambda (aq102f@x) (let ((aq1031@t aq102f@x)) (let ((aq1033@ls/false (aqd7a@syntax-dispatch aq1031@t '(_ any any)))) (if (and aq1033@ls/false (apply (lambda (aq1035@id aq1036@val) (aqb73@id? aq1035@id)) aq1033@ls/false)) (apply (lambda (aq1039@id aq103a@val) (values aq1039@id aq103a@val)) aq1033@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1031@t)))))) (set! aq2812@aqcfe@parse-define-syntax aqcfe@parse-define-syntax) (set! aqd00@scheme-stx-hashtable (make-eq-hashtable)) (set! aq2813@aqd00@scheme-stx-hashtable aqd00@scheme-stx-hashtable) (set! aqd02@scheme-stx (lambda (aq103d@sym) (or (hashtable-ref aqd00@scheme-stx-hashtable aq103d@sym '#f) (let ((aq103f@subst (aq96a@aq793@library-subst (aq988@aq7cf@find-library-by-name '(psyntax system $all))))) (let ((aq1041@stx (make-simple-struct 'stx '5 (list aq103d@sym aqaf7@top-mark* '() '())))) (let ((aq1043@stx (let ((aq1045@t (assq aq103d@sym aq103f@subst))) (if aq1045@t ((lambda (aq1047@x) (let ((aq1049@name (car aq1047@x)) (aq104a@label (cdr aq1047@x))) (aqb5f@add-subst (make-simple-struct 'rib '6 (list (list aq1049@name) (list aqaf7@top-mark*) (list aq104a@label) '#f '#f)) aq1041@stx))) aq1045@t) aq1041@stx)))) (begin (hashtable-set! aqd00@scheme-stx-hashtable aq103d@sym aq1043@stx) aq1043@stx))))))) (set! aq2814@aqd02@scheme-stx aqd02@scheme-stx) (set! aqd04@lexical-var car) (set! aq2815@aqd04@lexical-var aqd04@lexical-var) (set! aqd06@lexical-mutable? cdr) (set! aq2816@aqd06@lexical-mutable? aqd06@lexical-mutable?) (set! aqd08@set-lexical-mutable! set-cdr!) (set! aq2817@aqd08@set-lexical-mutable! aqd08@set-lexical-mutable!) (set! aqd0a@add-lexical (lambda (aq104d@lab aq104e@lex aq104f@r) (cons (cons* aq104d@lab 'lexical aq104e@lex '#f) aq104f@r))) (set! aq2818@aqd0a@add-lexical aqd0a@add-lexical) (set! aqd0c@add-lexicals (lambda (aq1053@lab* aq1054@lex* aq1055@r) (if (null? aq1053@lab*) aq1055@r (aqd0c@add-lexicals (cdr aq1053@lab*) (cdr aq1054@lex*) (aqd0a@add-lexical (car aq1053@lab*) (car aq1054@lex*) aq1055@r))))) (set! aq2819@aqd0c@add-lexicals aqd0c@add-lexicals) (set! aqd0e@letrec-helper (lambda (aq1059@e aq105a@r aq105b@mr aq105c@build) (let ((aq1061@t aq1059@e)) (let ((aq1063@ls/false (aqd7a@syntax-dispatch aq1061@t '(_ #(each (any any)) any . each-any)))) (if aq1063@ls/false (apply (lambda (aq1065@lhs* aq1066@rhs* aq1067@b aq1068@b*) (if (not (aqb7b@valid-bound-ids? aq1065@lhs*)) (aqd34@invalid-fmls-error aq1059@e aq1065@lhs*) (let ((aq106d@lex* (map aqafb@gen-lexical aq1065@lhs*)) (aq106e@lab* (map aqaff@gen-label aq1065@lhs*))) (let ((aq1071@rib (aqb33@make-full-rib aq1065@lhs* aq106e@lab*)) (aq1072@r (aqd0c@add-lexicals aq106e@lab* aq106d@lex* aq105a@r))) (let ((aq1075@body (aqdb2@chi-internal (aqb5f@add-subst aq1071@rib (cons aq1067@b aq1068@b*)) aq1072@r aq105b@mr)) (aq1076@rhs* (aqd98@chi-expr* (map (lambda (aq1079@x) (aqb5f@add-subst aq1071@rib aq1079@x)) aq1066@rhs*) aq1072@r aq105b@mr))) (aq105c@build '#f aq106d@lex* aq1076@rhs* aq1075@body)))))) aq1063@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1061@t)))))) (set! aq281a@aqd0e@letrec-helper aqd0e@letrec-helper) (set! aqd10@let-transformer (lambda (aq107b@e aq107c@r aq107d@mr) (let ((aq1081@t aq107b@e)) (let ((aq1083@ls/false (aqd7a@syntax-dispatch aq1081@t '(_ #(each (any any)) any . each-any)))) (if aq1083@ls/false (apply (lambda (aq1085@lhs* aq1086@rhs* aq1087@b aq1088@b*) (if (not (aqb7b@valid-bound-ids? aq1085@lhs*)) (aqd34@invalid-fmls-error aq107b@e aq1085@lhs*) (let ((aq108d@lex* (map aqafb@gen-lexical aq1085@lhs*)) (aq108e@lab* (map aqaff@gen-label aq1085@lhs*)) (aq108f@rhs* (aqd98@chi-expr* aq1086@rhs* aq107c@r aq107d@mr))) (let ((aq1093@rib (aqb33@make-full-rib aq1085@lhs* aq108e@lab*)) (aq1094@r (aqd0c@add-lexicals aq108e@lab* aq108d@lex* aq107c@r))) (let ((aq1097@body (aqdb2@chi-internal (aqb5f@add-subst aq1093@rib (cons aq1087@b aq1088@b*)) aq1094@r aq107d@mr))) (aqadb@aqa3e@build-let '#f aq108d@lex* aq108f@rhs* aq1097@body)))))) aq1083@ls/false) (let ((aq1099@t aq1081@t)) (let ((aq109b@ls/false (aqd7a@syntax-dispatch aq1099@t '(_ any #(each (any any)) any . each-any)))) (if aq109b@ls/false (apply (lambda (aq109d@loop aq109e@lhs* aq109f@rhs* aq10a0@b aq10a1@b*) (if (not (aqb7b@valid-bound-ids? aq109e@lhs*)) (aqd34@invalid-fmls-error aq107b@e aq109e@lhs*) (let ((aq10a7@lex* (map aqafb@gen-lexical aq109e@lhs*)) (aq10a8@lab* (map aqaff@gen-label aq109e@lhs*)) (aq10a9@rhs* (aqd98@chi-expr* aq109f@rhs* aq107c@r aq107d@mr)) (aq10aa@loop-lex (aqafb@gen-lexical aq109d@loop)) (aq10ab@loop-lab (aqaff@gen-label aq109d@loop))) (let ((aq10b1@loop-rib (aqb33@make-full-rib (list aq109d@loop) (list aq10ab@loop-lab))) (aq10b2@rib (aqb33@make-full-rib aq109e@lhs* aq10a8@lab*)) (aq10b3@r (aqd0c@add-lexicals (cons aq10ab@loop-lab aq10a8@lab*) (cons aq10aa@loop-lex aq10a7@lex*) aq107c@r))) (let ((aq10b7@body (aqdb2@chi-internal (aqb5f@add-subst aq10b1@loop-rib (aqb5f@add-subst aq10b2@rib (cons aq10a0@b aq10a1@b*))) aq10b3@r aq107d@mr))) (aqadc@aqa40@build-named-let '#f aq10aa@loop-lex aq10a7@lex* aq10a9@rhs* aq10b7@body)))))) aq109b@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1099@t))))))))) (set! aq281b@aqd10@let-transformer aqd10@let-transformer) (set! aqd12@letrec-transformer (lambda (aq10b9@e aq10ba@r aq10bb@mr) (aqd0e@letrec-helper aq10b9@e aq10ba@r aq10bb@mr aqada@aqa3c@build-letrec))) (set! aq281c@aqd12@letrec-transformer aqd12@letrec-transformer) (set! aqd14@letrec*-transformer (lambda (aq10bf@e aq10c0@r aq10c1@mr) (aqd0e@letrec-helper aq10bf@e aq10c0@r aq10c1@mr aqadd@aqa42@build-letrec*))) (set! aq281d@aqd14@letrec*-transformer aqd14@letrec*-transformer) (set! aqd16@fluid-let-syntax-transformer (lambda (aq10c5@e aq10c6@r aq10c7@mr) (letrec* ((aq10cc@lookup (lambda (aq10df@x) (or (aqb89@id->label aq10df@x) (aqe5a@syntax-violation '#f '"unbound identifier" aq10c5@e aq10df@x))))) (let ((aq10cd@t aq10c5@e)) (let ((aq10cf@ls/false (aqd7a@syntax-dispatch aq10cd@t '(_ #(each (any any)) any . each-any)))) (if aq10cf@ls/false (apply (lambda (aq10d1@lhs* aq10d2@rhs* aq10d3@b aq10d4@b*) (if (not (aqb7b@valid-bound-ids? aq10d1@lhs*)) (aqd34@invalid-fmls-error aq10c5@e aq10d1@lhs*) (let ((aq10d9@lab* (map aq10cc@lookup aq10d1@lhs*)) (aq10da@rhs* (map (lambda (aq10dd@x) (aqbab@make-eval-transformer (aqdd4@expand-transformer aq10dd@x aq10c7@mr))) aq10d2@rhs*))) (aqdb2@chi-internal (cons aq10d3@b aq10d4@b*) (append (map cons aq10d9@lab* aq10da@rhs*) aq10c6@r) (append (map cons aq10d9@lab* aq10da@rhs*) aq10c7@mr))))) aq10cf@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq10cd@t))))))) (set! aq281e@aqd16@fluid-let-syntax-transformer aqd16@fluid-let-syntax-transformer) (set! aqd18@type-descriptor-transformer (lambda (aq10e1@e aq10e2@r aq10e3@mr) (let ((aq10e7@t aq10e1@e)) (let ((aq10e9@ls/false (aqd7a@syntax-dispatch aq10e7@t '(_ any)))) (if (and aq10e9@ls/false (apply (lambda (aq10eb@id) (aqb73@id? aq10eb@id)) aq10e9@ls/false)) (apply (lambda (aq10ed@id) (let ((aq10ef@lab (aqb89@id->label aq10ed@id))) (let ((aq10f1@b (aqb8b@label->binding aq10ef@lab aq10e2@r))) (let ((aq10f3@type (aqb8f@binding-type aq10f1@b))) (begin (if (not aq10ef@lab) (aqb93@raise-unbound-error aq10ed@id) (void)) (if (not (and (eq? aq10f3@type '$rtd) (not (list? (aqb91@binding-value aq10f1@b))))) (aqe5a@syntax-violation '#f '"not a record type" aq10e1@e) (void)) (list 'quote (aqb91@binding-value aq10f1@b))))))) aq10e9@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq10e7@t)))))) (set! aq281f@aqd18@type-descriptor-transformer aqd18@type-descriptor-transformer) (set! aqd1a@record-type-descriptor-transformer (lambda (aq10f5@e aq10f6@r aq10f7@mr) (let ((aq10fb@t aq10f5@e)) (let ((aq10fd@ls/false (aqd7a@syntax-dispatch aq10fb@t '(_ any)))) (if (and aq10fd@ls/false (apply (lambda (aq10ff@id) (aqb73@id? aq10ff@id)) aq10fd@ls/false)) (apply (lambda (aq1101@id) (let ((aq1103@lab (aqb89@id->label aq1101@id))) (let ((aq1105@b (aqb8b@label->binding aq1103@lab aq10f6@r))) (let ((aq1107@type (aqb8f@binding-type aq1105@b))) (begin (if (not aq1103@lab) (aqb93@raise-unbound-error aq1101@id) (void)) (if (not (and (eq? aq1107@type '$rtd) (list? (aqb91@binding-value aq1105@b)))) (aqe5a@syntax-violation '#f '"not a record type" aq10f5@e) (void)) (aqd9c@chi-expr (car (aqb91@binding-value aq1105@b)) aq10f6@r aq10f7@mr)))))) aq10fd@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq10fb@t)))))) (set! aq2820@aqd1a@record-type-descriptor-transformer aqd1a@record-type-descriptor-transformer) (set! aqd1c@record-constructor-descriptor-transformer (lambda (aq1109@e aq110a@r aq110b@mr) (let ((aq110f@t aq1109@e)) (let ((aq1111@ls/false (aqd7a@syntax-dispatch aq110f@t '(_ any)))) (if (and aq1111@ls/false (apply (lambda (aq1113@id) (aqb73@id? aq1113@id)) aq1111@ls/false)) (apply (lambda (aq1115@id) (let ((aq1117@lab (aqb89@id->label aq1115@id))) (let ((aq1119@b (aqb8b@label->binding aq1117@lab aq110a@r))) (let ((aq111b@type (aqb8f@binding-type aq1119@b))) (begin (if (not aq1117@lab) (aqb93@raise-unbound-error aq1115@id) (void)) (if (not (and (eq? aq111b@type '$rtd) (list? (aqb91@binding-value aq1119@b)))) (aqe5a@syntax-violation '#f '"invalid type" aq1109@e) (void)) (aqd9c@chi-expr (cadr (aqb91@binding-value aq1119@b)) aq110a@r aq110b@mr)))))) aq1111@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq110f@t)))))) (set! aq2821@aqd1c@record-constructor-descriptor-transformer aqd1c@record-constructor-descriptor-transformer) (set! aqd1e@when-macro (lambda (aq111d@e) (let ((aq111f@t aq111d@e)) (let ((aq1121@ls/false (aqd7a@syntax-dispatch aq111f@t '(_ any any . each-any)))) (if aq1121@ls/false (apply (lambda (aq1123@test aq1124@e aq1125@e*) (aqd30@bless (list 'if aq1123@test (cons 'begin (cons aq1124@e aq1125@e*))))) aq1121@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq111f@t)))))) (set! aq2822@aqd1e@when-macro aqd1e@when-macro) (set! aqd20@unless-macro (lambda (aq1129@e) (let ((aq112b@t aq1129@e)) (let ((aq112d@ls/false (aqd7a@syntax-dispatch aq112b@t '(_ any any . each-any)))) (if aq112d@ls/false (apply (lambda (aq112f@test aq1130@e aq1131@e*) (aqd30@bless (list 'if (list 'not aq112f@test) (cons 'begin (cons aq1130@e aq1131@e*))))) aq112d@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq112b@t)))))) (set! aq2823@aqd20@unless-macro aqd20@unless-macro) (set! aqd22@if-transformer (lambda (aq1135@e aq1136@r aq1137@mr) (let ((aq113b@t aq1135@e)) (let ((aq113d@ls/false (aqd7a@syntax-dispatch aq113b@t '(_ any any any)))) (if aq113d@ls/false (apply (lambda (aq113f@e0 aq1140@e1 aq1141@e2) (list 'if (aqd9c@chi-expr aq113f@e0 aq1136@r aq1137@mr) (aqd9c@chi-expr aq1140@e1 aq1136@r aq1137@mr) (aqd9c@chi-expr aq1141@e2 aq1136@r aq1137@mr))) aq113d@ls/false) (let ((aq1145@t aq113b@t)) (let ((aq1147@ls/false (aqd7a@syntax-dispatch aq1145@t '(_ any any)))) (if aq1147@ls/false (apply (lambda (aq1149@e0 aq114a@e1) (list 'if (aqd9c@chi-expr aq1149@e0 aq1136@r aq1137@mr) (aqd9c@chi-expr aq114a@e1 aq1136@r aq1137@mr) (aqad9@aqa3a@build-void))) aq1147@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1145@t))))))))) (set! aq2824@aqd22@if-transformer aqd22@if-transformer) (set! aqd24@and-transformer (lambda (aq114d@e aq114e@r aq114f@mr) (let ((aq1153@t aq114d@e)) (let ((aq1155@ls/false (aqd7a@syntax-dispatch aq1153@t '(_ . each-any)))) (if aq1155@ls/false (apply (lambda (aq1157@e*) (cons 'and (aqd98@chi-expr* aq1157@e* aq114e@r aq114f@mr))) aq1155@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1153@t)))))) (set! aq2825@aqd24@and-transformer aqd24@and-transformer) (set! aqd26@or-transformer (lambda (aq1159@e aq115a@r aq115b@mr) (let ((aq115f@t aq1159@e)) (let ((aq1161@ls/false (aqd7a@syntax-dispatch aq115f@t '(_ . each-any)))) (if aq1161@ls/false (apply (lambda (aq1163@e*) (cons 'or (aqd98@chi-expr* aq1163@e* aq115a@r aq115b@mr))) aq1161@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq115f@t)))))) (set! aq2826@aqd26@or-transformer aqd26@or-transformer) (set! aqd28@case-macro (lambda (aq1165@e) (letrec* ((aq1168@build-last (lambda (aq118f@cls) (let ((aq1191@t aq118f@cls)) (let ((aq1193@ls/false (aqd7a@syntax-dispatch aq1191@t '(#(scheme-id else) any . each-any)))) (if aq1193@ls/false (apply (lambda (aq1195@e aq1196@e*) (cons 'begin (cons aq1195@e aq1196@e*))) aq1193@ls/false) (let ((aq1199@t aq1191@t)) (let ((aq119b@ls/false (aqd7a@syntax-dispatch aq1199@t '_))) (if aq119b@ls/false (apply (lambda () (aq116a@build-one aq118f@cls '(if #f #f))) aq119b@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1199@t))))))))) (aq116a@build-one (lambda (aq1181@cls aq1182@k) (let ((aq1185@t aq1181@cls)) (let ((aq1187@ls/false (aqd7a@syntax-dispatch aq1185@t '(each-any any . each-any)))) (if aq1187@ls/false (apply (lambda (aq1189@d* aq118a@e aq118b@e*) (list 'if (list 'memv 't (list 'quote aq1189@d*)) (cons 'begin (cons aq118a@e aq118b@e*)) aq1182@k)) aq1187@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1185@t))))))) (let ((aq116b@t aq1165@e)) (let ((aq116d@ls/false (aqd7a@syntax-dispatch aq116b@t '(_ any)))) (if aq116d@ls/false (apply (lambda (aq116f@expr) (aqd30@bless (cons 'let (cons (list (list 't aq116f@expr)) '((if #f #f)))))) aq116d@ls/false) (let ((aq1171@t aq116b@t)) (let ((aq1173@ls/false (aqd7a@syntax-dispatch aq1171@t '(_ any any . each-any)))) (if aq1173@ls/false (apply (lambda (aq1175@expr aq1176@cls aq1177@cls*) (aqd30@bless (list 'let (list (list 't aq1175@expr)) (let aq117f@f ((aq117b@cls aq1176@cls) (aq117c@cls* aq1177@cls*)) (if (null? aq117c@cls*) (aq1168@build-last aq117b@cls) (aq116a@build-one aq117b@cls (aq117f@f (car aq117c@cls*) (cdr aq117c@cls*)))))))) aq1173@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1171@t)))))))))) (set! aq2827@aqd28@case-macro aqd28@case-macro) (set! aqd2a@quote-transformer (lambda (aq119d@e aq119e@r aq119f@mr) (let ((aq11a3@t aq119d@e)) (let ((aq11a5@ls/false (aqd7a@syntax-dispatch aq11a3@t '(_ any)))) (if aq11a5@ls/false (apply (lambda (aq11a7@datum) (list 'quote (aqb87@stx->datum aq11a7@datum))) aq11a5@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq11a3@t)))))) (set! aq2828@aqd2a@quote-transformer aqd2a@quote-transformer) (set! aqd2c@case-lambda-transformer (lambda (aq11a9@e aq11aa@r aq11ab@mr) (let ((aq11af@t aq11a9@e)) (let ((aq11b1@ls/false (aqd7a@syntax-dispatch aq11af@t '(_ . #(each (any any . each-any)))))) (if aq11b1@ls/false (apply (lambda (aq11b3@fmls* aq11b4@b* aq11b5@b**) (call-with-values (lambda () (aqda4@chi-lambda-clause* aq11a9@e aq11b3@fmls* (map cons aq11b4@b* aq11b5@b**) aq11aa@r aq11ab@mr)) (lambda (aq11bd@aq11ba aq11be@aq11bc) (let ((aq11c1@body* aq11be@aq11bc) (aq11c2@fmls* aq11bd@aq11ba)) (aqad7@aqa0a@build-case-lambda '#f aq11c2@fmls* aq11c1@body*))))) aq11b1@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq11af@t)))))) (set! aq2829@aqd2c@case-lambda-transformer aqd2c@case-lambda-transformer) (set! aqd2e@lambda-transformer (lambda (aq11c5@e aq11c6@r aq11c7@mr) (let ((aq11cb@t aq11c5@e)) (let ((aq11cd@ls/false (aqd7a@syntax-dispatch aq11cb@t '(_ any any . each-any)))) (if aq11cd@ls/false (apply (lambda (aq11cf@fmls aq11d0@b aq11d1@b*) (call-with-values (lambda () (aqda2@chi-lambda-clause aq11c5@e aq11cf@fmls (cons aq11d0@b aq11d1@b*) aq11c6@r aq11c7@mr)) (lambda (aq11d9@aq11d6 aq11da@aq11d8) (let ((aq11dd@body aq11da@aq11d8) (aq11de@fmls aq11d9@aq11d6)) (aqad6@aqa08@build-lambda '#f aq11de@fmls aq11dd@body))))) aq11cd@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq11cb@t)))))) (set! aq282a@aqd2e@lambda-transformer aqd2e@lambda-transformer) (set! aqd30@bless (lambda (aq11e1@x) (aqb5b@mkstx (let aq11e5@f ((aq11e3@x aq11e1@x)) (if (aqb3f@stx? aq11e3@x) aq11e3@x (if (pair? aq11e3@x) (cons (aq11e5@f (car aq11e3@x)) (aq11e5@f (cdr aq11e3@x))) (if (symbol? aq11e3@x) (aqd02@scheme-stx aq11e3@x) (if (vector? aq11e3@x) (vector-map aq11e5@f aq11e3@x) aq11e3@x))))) '() '() '()))) (set! aq282b@aqd30@bless aqd30@bless) (set! aqd32@with-syntax-macro (lambda (aq11e7@e) (let ((aq11e9@t aq11e7@e)) (let ((aq11eb@ls/false (aqd7a@syntax-dispatch aq11e9@t '(_ #(each (any any)) any . each-any)))) (if aq11eb@ls/false (apply (lambda (aq11ed@pat* aq11ee@expr* aq11ef@b aq11f0@b*) (let ((aq11f5@idn* (let aq11f9@f ((aq11f7@pat* aq11ed@pat*)) (if (null? aq11f7@pat*) '() (call-with-values (lambda () (aqd78@convert-pattern (car aq11f7@pat*) '())) (lambda (aq11ff@aq11fc aq1200@aq11fe) (let ((aq1203@idn* aq1200@aq11fe) (aq1204@pat aq11ff@aq11fc)) (append aq1203@idn* (aq11f9@f (cdr aq11f7@pat*)))))))))) (begin (aqda0@verify-formals (map car aq11f5@idn*) aq11e7@e) (let ((aq1207@t* (aqe48@generate-temporaries aq11ee@expr*))) (aqd30@bless (list 'let (map list aq1207@t* aq11ee@expr*) (let aq120d@f ((aq1209@pat* aq11ed@pat*) (aq120a@t* aq1207@t*)) (if (null? aq1209@pat*) (cons 'begin (cons '#f (cons aq11ef@b aq11f0@b*))) (list 'syntax-case (car aq120a@t*) '() (list (car aq1209@pat*) (aq120d@f (cdr aq1209@pat*) (cdr aq120a@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car aq1209@pat*)) (car aq120a@t*)))))))))))) aq11eb@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq11e9@t)))))) (set! aq282c@aqd32@with-syntax-macro aqd32@with-syntax-macro) (set! aqd34@invalid-fmls-error (lambda (aq120f@stx aq1210@fmls) (let ((aq1213@t aq1210@fmls)) (let ((aq1215@ls/false (aqd7a@syntax-dispatch aq1213@t '#(each+ any () any)))) (if aq1215@ls/false (apply (lambda (aq1217@id* aq1218@last) (let aq121d@f ((aq121b@id* (if (aqb73@id? aq1218@last) (cons aq1218@last aq1217@id*) (if (aqb69@syntax-null? aq1218@last) aq1217@id* (aqe5a@syntax-violation '#f '"not an identifier" aq120f@stx aq1218@last))))) (if (null? aq121b@id*) (values) (if (not (aqb73@id? (car aq121b@id*))) (aqe5a@syntax-violation '#f '"not an identifier" aq120f@stx (car aq121b@id*)) (begin (aq121d@f (cdr aq121b@id*)) (if (aqb7f@bound-id-member? (car aq121b@id*) (cdr aq121b@id*)) (aqe5a@syntax-violation '#f '"duplicate binding" aq120f@stx (car aq121b@id*)) (void))))))) aq1215@ls/false) (let ((aq121f@t aq1213@t)) (let ((aq1221@ls/false (aqd7a@syntax-dispatch aq121f@t '_))) (if aq1221@ls/false (apply (lambda () (aqe5a@syntax-violation '#f '"malformed binding form" aq120f@stx aq1210@fmls)) aq1221@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq121f@t))))))))) (set! aq282d@aqd34@invalid-fmls-error aqd34@invalid-fmls-error) (set! aqd36@let-macro (lambda (aq1223@stx) (let ((aq1225@t aq1223@stx)) (let ((aq1227@ls/false (aqd7a@syntax-dispatch aq1225@t '(_ #(each (any any)) any . each-any)))) (if aq1227@ls/false (apply (lambda (aq1229@lhs* aq122a@rhs* aq122b@b aq122c@b*) (if (aqb7b@valid-bound-ids? aq1229@lhs*) (aqd30@bless (cons (cons 'lambda (cons aq1229@lhs* (cons aq122b@b aq122c@b*))) aq122a@rhs*)) (aqd34@invalid-fmls-error aq1223@stx aq1229@lhs*))) aq1227@ls/false) (let ((aq1231@t aq1225@t)) (let ((aq1233@ls/false (aqd7a@syntax-dispatch aq1231@t '(_ any #(each (any any)) any . each-any)))) (if (and aq1233@ls/false (apply (lambda (aq1235@f aq1236@lhs* aq1237@rhs* aq1238@b aq1239@b*) (aqb73@id? aq1235@f)) aq1233@ls/false)) (apply (lambda (aq123f@f aq1240@lhs* aq1241@rhs* aq1242@b aq1243@b*) (if (aqb7b@valid-bound-ids? aq1240@lhs*) (aqd30@bless (cons (list 'letrec (list (list aq123f@f (cons 'lambda (cons aq1240@lhs* (cons aq1242@b aq1243@b*))))) aq123f@f) aq1241@rhs*)) (aqd34@invalid-fmls-error aq1223@stx aq1240@lhs*))) aq1233@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1231@t))))))))) (set! aq282e@aqd36@let-macro aqd36@let-macro) (set! aqd38@let-values-macro (lambda (aq1249@stx) (letrec* ((aq124c@rename (lambda (aq12b1@x aq12b2@old* aq12b3@new*) (begin (if (not (aqb73@id? aq12b1@x)) (aqe5a@syntax-violation '#f '"not an indentifier" aq1249@stx aq12b1@x) (void)) (if (aqb7f@bound-id-member? aq12b1@x aq12b2@old*) (aqe5a@syntax-violation '#f '"duplicate binding" aq1249@stx aq12b1@x) (void)) (let ((aq12b7@y (gensym (aqe60@syntax->datum aq12b1@x)))) (values aq12b7@y (cons aq12b1@x aq12b2@old*) (cons aq12b7@y aq12b3@new*)))))) (aq124e@rename* (lambda (aq129f@x* aq12a0@old* aq12a1@new*) (if (null? aq129f@x*) (values '() aq12a0@old* aq12a1@new*) (call-with-values (lambda () (aq124c@rename (car aq129f@x*) aq12a0@old* aq12a1@new*)) (lambda (aq12a5@x aq12a6@old* aq12a7@new*) (call-with-values (lambda () (aq124e@rename* (cdr aq129f@x*) aq12a6@old* aq12a7@new*)) (lambda (aq12ab@x* aq12ac@old* aq12ad@new*) (values (cons aq12a5@x aq12ab@x*) aq12ac@old* aq12ad@new*))))))))) (let ((aq124f@t aq1249@stx)) (let ((aq1251@ls/false (aqd7a@syntax-dispatch aq124f@t '(_ () any . each-any)))) (if aq1251@ls/false (apply (lambda (aq1253@b aq1254@b*) (cons* (aqd30@bless 'let) '() aq1253@b aq1254@b*)) aq1251@ls/false) (let ((aq1257@t aq124f@t)) (let ((aq1259@ls/false (aqd7a@syntax-dispatch aq1257@t '(_ #(each (any any)) any . each-any)))) (if aq1259@ls/false (apply (lambda (aq125b@lhs* aq125c@rhs* aq125d@b aq125e@b*) (aqd30@bless (let aq126b@f ((aq1263@lhs* aq125b@lhs*) (aq1264@rhs* aq125c@rhs*) (aq1265@old* '()) (aq1266@new* '())) (if (null? aq1263@lhs*) (cons 'let (cons (map list aq1265@old* aq1266@new*) (cons aq125d@b aq125e@b*))) (let ((aq126d@t (car aq1263@lhs*))) (let ((aq126f@ls/false (aqd7a@syntax-dispatch aq126d@t 'each-any))) (if aq126f@ls/false (apply (lambda (aq1271@x*) (call-with-values (lambda () (aq124e@rename* aq1271@x* aq1265@old* aq1266@new*)) (lambda (aq1279@aq1274 aq127a@aq1276 aq127b@aq1278) (let ((aq127f@new* aq127b@aq1278) (aq1280@old* aq127a@aq1276) (aq1281@y* aq1279@aq1274)) (list 'call-with-values (list 'lambda '() (car aq1264@rhs*)) (list 'lambda aq1281@y* (aq126b@f (cdr aq1263@lhs*) (cdr aq1264@rhs*) aq1280@old* aq127f@new*))))))) aq126f@ls/false) (let ((aq1285@t aq126d@t)) (let ((aq1287@ls/false (aqd7a@syntax-dispatch aq1285@t '#(each+ any () any)))) (if aq1287@ls/false (apply (lambda (aq1289@x* aq128a@x) (call-with-values (lambda () (aq124c@rename aq128a@x aq1265@old* aq1266@new*)) (lambda (aq128d@y aq128e@old* aq128f@new*) (call-with-values (lambda () (aq124e@rename* aq1289@x* aq128e@old* aq128f@new*)) (lambda (aq1293@y* aq1294@old* aq1295@new*) (list 'call-with-values (list 'lambda '() (car aq1264@rhs*)) (list 'lambda (append aq1293@y* aq128d@y) (aq126b@f (cdr aq1263@lhs*) (cdr aq1264@rhs*) aq1294@old* aq1295@new*)))))))) aq1287@ls/false) (let ((aq1299@t aq1285@t)) (let ((aq129b@ls/false (aqd7a@syntax-dispatch aq1299@t 'any))) (if aq129b@ls/false (apply (lambda (aq129d@others) (aqe5a@syntax-violation '#f '"malformed bindings" aq1249@stx aq129d@others)) aq129b@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1299@t)))))))))))))) aq1259@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1257@t)))))))))) (set! aq282f@aqd38@let-values-macro aqd38@let-values-macro) (set! aqd3a@let*-values-macro (lambda (aq12b9@stx) (letrec* ((aq12bc@check (lambda (aq12eb@x*) (if (not (null? aq12eb@x*)) (let ((aq12ed@x (car aq12eb@x*))) (begin (if (not (aqb73@id? aq12ed@x)) (aqe5a@syntax-violation '#f '"not an identifier" aq12b9@stx aq12ed@x) (void)) (aq12bc@check (cdr aq12eb@x*)) (if (aqb7f@bound-id-member? aq12ed@x (cdr aq12eb@x*)) (aqe5a@syntax-violation '#f '"duplicate identifier" aq12b9@stx aq12ed@x) (void)))) (void))))) (let ((aq12bd@t aq12b9@stx)) (let ((aq12bf@ls/false (aqd7a@syntax-dispatch aq12bd@t '(_ () any . each-any)))) (if aq12bf@ls/false (apply (lambda (aq12c1@b aq12c2@b*) (cons* (aqd30@bless 'let) '() aq12c1@b aq12c2@b*)) aq12bf@ls/false) (let ((aq12c5@t aq12bd@t)) (let ((aq12c7@ls/false (aqd7a@syntax-dispatch aq12c5@t '(_ #(each (any any)) any . each-any)))) (if aq12c7@ls/false (apply (lambda (aq12c9@lhs* aq12ca@rhs* aq12cb@b aq12cc@b*) (aqd30@bless (let aq12d5@f ((aq12d1@lhs* aq12c9@lhs*) (aq12d2@rhs* aq12ca@rhs*)) (if (null? aq12d1@lhs*) (cons 'begin (cons aq12cb@b aq12cc@b*)) (let ((aq12d7@t (car aq12d1@lhs*))) (let ((aq12d9@ls/false (aqd7a@syntax-dispatch aq12d7@t 'each-any))) (if aq12d9@ls/false (apply (lambda (aq12db@x*) (begin (aq12bc@check aq12db@x*) (list 'call-with-values (list 'lambda '() (car aq12d2@rhs*)) (list 'lambda aq12db@x* (aq12d5@f (cdr aq12d1@lhs*) (cdr aq12d2@rhs*)))))) aq12d9@ls/false) (let ((aq12dd@t aq12d7@t)) (let ((aq12df@ls/false (aqd7a@syntax-dispatch aq12dd@t '#(each+ any () any)))) (if aq12df@ls/false (apply (lambda (aq12e1@x* aq12e2@x) (begin (aq12bc@check (cons aq12e2@x aq12e1@x*)) (list 'call-with-values (list 'lambda '() (car aq12d2@rhs*)) (list 'lambda (append aq12e1@x* aq12e2@x) (aq12d5@f (cdr aq12d1@lhs*) (cdr aq12d2@rhs*)))))) aq12df@ls/false) (let ((aq12e5@t aq12dd@t)) (let ((aq12e7@ls/false (aqd7a@syntax-dispatch aq12e5@t 'any))) (if aq12e7@ls/false (apply (lambda (aq12e9@others) (aqe5a@syntax-violation '#f '"malformed bindings" aq12b9@stx aq12e9@others)) aq12e7@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq12e5@t)))))))))))))) aq12c7@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq12c5@t)))))))))) (set! aq2830@aqd3a@let*-values-macro aqd3a@let*-values-macro) (set! aqd3c@trace-lambda-macro (lambda (aq12ef@stx) (let ((aq12f1@t aq12ef@stx)) (let ((aq12f3@ls/false (aqd7a@syntax-dispatch aq12f1@t '(_ any each-any any . each-any)))) (if aq12f3@ls/false (apply (lambda (aq12f5@who aq12f6@fmls aq12f7@b aq12f8@b*) (if (aqb7b@valid-bound-ids? aq12f6@fmls) (aqd30@bless (list 'make-traced-procedure (list 'quote aq12f5@who) (cons 'lambda (cons aq12f6@fmls (cons aq12f7@b aq12f8@b*))))) (aqd34@invalid-fmls-error aq12ef@stx aq12f6@fmls))) aq12f3@ls/false) (let ((aq12fd@t aq12f1@t)) (let ((aq12ff@ls/false (aqd7a@syntax-dispatch aq12fd@t '(_ any #(each+ any () any) any . each-any)))) (if aq12ff@ls/false (apply (lambda (aq1301@who aq1302@fmls aq1303@last aq1304@b aq1305@b*) (if (aqb7b@valid-bound-ids? (cons aq1303@last aq1302@fmls)) (aqd30@bless (list 'make-traced-procedure (list 'quote aq1301@who) (cons 'lambda (cons (append aq1302@fmls aq1303@last) (cons aq1304@b aq1305@b*))))) (aqd34@invalid-fmls-error aq12ef@stx (append aq1302@fmls aq1303@last)))) aq12ff@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq12fd@t))))))))) (set! aq2831@aqd3c@trace-lambda-macro aqd3c@trace-lambda-macro) (set! aqd3e@trace-define-macro (lambda (aq130b@stx) (let ((aq130d@t aq130b@stx)) (let ((aq130f@ls/false (aqd7a@syntax-dispatch aq130d@t '(_ (any . each-any) any . each-any)))) (if aq130f@ls/false (apply (lambda (aq1311@who aq1312@fmls aq1313@b aq1314@b*) (if (aqb7b@valid-bound-ids? aq1312@fmls) (aqd30@bless (list 'define aq1311@who (list 'make-traced-procedure (list 'quote aq1311@who) (cons 'lambda (cons aq1312@fmls (cons aq1313@b aq1314@b*)))))) (aqd34@invalid-fmls-error aq130b@stx aq1312@fmls))) aq130f@ls/false) (let ((aq1319@t aq130d@t)) (let ((aq131b@ls/false (aqd7a@syntax-dispatch aq1319@t '(_ (any . #(each+ any () any)) any . each-any)))) (if aq131b@ls/false (apply (lambda (aq131d@who aq131e@fmls aq131f@last aq1320@b aq1321@b*) (if (aqb7b@valid-bound-ids? (cons aq131f@last aq131e@fmls)) (aqd30@bless (list 'define aq131d@who (list 'make-traced-procedure (list 'quote aq131d@who) (cons 'lambda (cons (append aq131e@fmls aq131f@last) (cons aq1320@b aq1321@b*)))))) (aqd34@invalid-fmls-error aq130b@stx (append aq131e@fmls aq131f@last)))) aq131b@ls/false) (let ((aq1327@t aq1319@t)) (let ((aq1329@ls/false (aqd7a@syntax-dispatch aq1327@t '(_ any any)))) (if aq1329@ls/false (apply (lambda (aq132b@who aq132c@expr) (if (aqb73@id? aq132b@who) (aqd30@bless (list 'define aq132b@who (list 'let (list (list 'v aq132c@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote aq132b@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (aqe5a@syntax-violation '#f '"invalid name" aq130b@stx))) aq1329@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1327@t)))))))))))) (set! aq2832@aqd3e@trace-define-macro aqd3e@trace-define-macro) (set! aqd40@trace-define-syntax-macro (lambda (aq132f@stx) (let ((aq1331@t aq132f@stx)) (let ((aq1333@ls/false (aqd7a@syntax-dispatch aq1331@t '(_ any any)))) (if aq1333@ls/false (apply (lambda (aq1335@who aq1336@expr) (if (aqb73@id? aq1335@who) (aqd30@bless (list 'define-syntax aq1335@who (list 'make-traced-macro (list 'quote aq1335@who) aq1336@expr))) (aqe5a@syntax-violation '#f '"invalid name" aq132f@stx))) aq1333@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1331@t)))))) (set! aq2833@aqd40@trace-define-syntax-macro aqd40@trace-define-syntax-macro) (set! aqd42@trace-let/rec-syntax (lambda (aq1339@who) (lambda (aq133b@stx) (let ((aq133d@t aq133b@stx)) (let ((aq133f@ls/false (aqd7a@syntax-dispatch aq133d@t '(_ #(each (any any)) any . each-any)))) (if aq133f@ls/false (apply (lambda (aq1341@lhs* aq1342@rhs* aq1343@b aq1344@b*) (if (aqb7b@valid-bound-ids? aq1341@lhs*) (let ((aq1349@rhs* (map (lambda (aq134b@lhs aq134c@rhs) (list 'make-traced-macro (list 'quote aq134b@lhs) aq134c@rhs)) aq1341@lhs* aq1342@rhs*))) (aqd30@bless (cons aq1339@who (cons (map list aq1341@lhs* aq1349@rhs*) (cons aq1343@b aq1344@b*))))) (aqd34@invalid-fmls-error aq133b@stx aq1341@lhs*))) aq133f@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq133d@t))))))) (set! aq2834@aqd42@trace-let/rec-syntax aqd42@trace-let/rec-syntax) (set! aqd44@trace-let-syntax-macro (aqd42@trace-let/rec-syntax 'let-syntax)) (set! aq2835@aqd44@trace-let-syntax-macro aqd44@trace-let-syntax-macro) (set! aqd46@trace-letrec-syntax-macro (aqd42@trace-let/rec-syntax 'letrec-syntax)) (set! aq2836@aqd46@trace-letrec-syntax-macro aqd46@trace-letrec-syntax-macro) (set! aqd48@guard-macro (lambda (aq134f@x) (letrec* ((aq1352@gen-clauses (lambda (aq1369@con aq136a@outerk aq136b@clause*) (letrec* ((aq1370@f (lambda (aq13a9@x aq13aa@k) (let ((aq13ad@t aq13a9@x)) (let ((aq13af@ls/false (aqd7a@syntax-dispatch aq13ad@t '(any #(scheme-id =>) any)))) (if aq13af@ls/false (apply (lambda (aq13b1@e aq13b2@p) (let ((aq13b5@t (gensym))) (list 'let (list (list aq13b5@t aq13b1@e)) (list 'if aq13b5@t (list aq13b2@p aq13b5@t) aq13aa@k)))) aq13af@ls/false) (let ((aq13b7@t aq13ad@t)) (let ((aq13b9@ls/false (aqd7a@syntax-dispatch aq13b7@t '(any)))) (if aq13b9@ls/false (apply (lambda (aq13bb@e) (let ((aq13bd@t (gensym))) (list 'let (list (list aq13bd@t aq13bb@e)) (list 'if aq13bd@t aq13bd@t aq13aa@k)))) aq13b9@ls/false) (let ((aq13bf@t aq13b7@t)) (let ((aq13c1@ls/false (aqd7a@syntax-dispatch aq13bf@t '(any any . each-any)))) (if aq13c1@ls/false (apply (lambda (aq13c3@e aq13c4@v aq13c5@v*) (list 'if aq13c3@e (cons 'begin (cons aq13c4@v aq13c5@v*)) aq13aa@k)) aq13c1@ls/false) (let ((aq13c9@t aq13bf@t)) (let ((aq13cb@ls/false (aqd7a@syntax-dispatch aq13c9@t '_))) (if aq13cb@ls/false (apply (lambda () (aqe5a@syntax-violation '#f '"invalid guard clause" aq13a9@x)) aq13cb@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq13c9@t))))))))))))))) (aq1372@f* (lambda (aq137f@x*) (let ((aq1381@t aq137f@x*)) (let ((aq1383@ls/false (aqd7a@syntax-dispatch aq1381@t '()))) (if aq1383@ls/false (apply (lambda () (let ((aq1385@g (gensym))) (values (list aq1385@g (list 'lambda '() (list 'raise-continuable aq1369@con))) aq1385@g))) aq1383@ls/false) (let ((aq1387@t aq1381@t)) (let ((aq1389@ls/false (aqd7a@syntax-dispatch aq1387@t '((#(scheme-id else) any . each-any))))) (if aq1389@ls/false (apply (lambda (aq138b@e aq138c@e*) (values (cons 'begin (cons aq138b@e aq138c@e*)) '#f)) aq1389@ls/false) (let ((aq138f@t aq1387@t)) (let ((aq1391@ls/false (aqd7a@syntax-dispatch aq138f@t '(any . any)))) (if aq1391@ls/false (apply (lambda (aq1393@cls aq1394@cls*) (call-with-values (lambda () (aq1372@f* aq1394@cls*)) (lambda (aq139b@aq1398 aq139c@aq139a) (let ((aq139f@g aq139c@aq139a) (aq13a0@e aq139b@aq1398)) (values (aq1370@f aq1393@cls aq13a0@e) aq139f@g))))) aq1391@ls/false) (let ((aq13a3@t aq138f@t)) (let ((aq13a5@ls/false (aqd7a@syntax-dispatch aq13a3@t 'any))) (if aq13a5@ls/false (apply (lambda (aq13a7@others) (aqe5a@syntax-violation '#f '"invalid guard clause" aq13a7@others)) aq13a5@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq13a3@t)))))))))))))))) (call-with-values (lambda () (aq1372@f* aq136b@clause*)) (lambda (aq1377@aq1374 aq1378@aq1376) (let ((aq137b@raisek aq1378@aq1376) (aq137c@code aq1377@aq1374)) (if aq137b@raisek (list (list 'call/cc (list 'lambda (list aq137b@raisek) (list aq136a@outerk (list 'lambda '() aq137c@code))))) (list aq136a@outerk (list 'lambda '() aq137c@code)))))))))) (let ((aq1353@t aq134f@x)) (let ((aq1355@ls/false (aqd7a@syntax-dispatch aq1353@t '(_ (any . each-any) any . each-any)))) (if (and aq1355@ls/false (apply (lambda (aq1357@con aq1358@clause* aq1359@b aq135a@b*) (aqb73@id? aq1357@con)) aq1355@ls/false)) (apply (lambda (aq135f@con aq1360@clause* aq1361@b aq1362@b*) (let ((aq1367@outerk (gensym))) (aqd30@bless (list (list 'call/cc (list 'lambda (list aq1367@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list aq135f@con) (aq1352@gen-clauses aq135f@con aq1367@outerk aq1360@clause*)) (cons 'lambda (cons '() (cons aq1361@b aq1362@b*))))))))))) aq1355@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1353@t))))))) (set! aq2837@aqd48@guard-macro aqd48@guard-macro) (set! aqd4a@define-enumeration-macro (lambda (aq13cd@stx) (letrec* ((aq13d0@set? (lambda (aq13e9@x) (or (null? aq13e9@x) (and (not (memq (car aq13e9@x) (cdr aq13e9@x))) (aq13d0@set? (cdr aq13e9@x)))))) (aq13d2@remove-dups (lambda (aq13e7@ls) (if (null? aq13e7@ls) '() (cons (car aq13e7@ls) (aq13d2@remove-dups (remq (car aq13e7@ls) (cdr aq13e7@ls)))))))) (let ((aq13d3@t aq13cd@stx)) (let ((aq13d5@ls/false (aqd7a@syntax-dispatch aq13d3@t '(_ any each-any any)))) (if (and aq13d5@ls/false (apply (lambda (aq13d7@name aq13d8@id* aq13d9@maker) (and (aqb73@id? aq13d7@name) (aqb73@id? aq13d9@maker) (for-all aqb73@id? aq13d8@id*))) aq13d5@ls/false)) (apply (lambda (aq13dd@name aq13de@id* aq13df@maker) (let ((aq13e3@name* (aq13d2@remove-dups (aqe60@syntax->datum aq13de@id*))) (aq13e4@mk (gensym))) (aqd30@bless (list 'begin (list 'define aq13e4@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote aq13e3@name*)))) (list 'define-syntax aq13dd@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote aq13e3@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote aq13dd@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax aq13df@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote aq13df@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote aq13e3@name*)) (cons 'syntax-violation (cons (list 'quote aq13df@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons aq13e4@mk '('(n* ...))))))))))))) aq13d5@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq13d3@t))))))) (set! aq2838@aqd4a@define-enumeration-macro aqd4a@define-enumeration-macro) (set! aqd4c@time-macro (lambda (aq13eb@stx) (let ((aq13ed@t aq13eb@stx)) (let ((aq13ef@ls/false (aqd7a@syntax-dispatch aq13ed@t '(_ any)))) (if aq13ef@ls/false (apply (lambda (aq13f1@expr) (aqd30@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() aq13f1@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) aq13ef@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq13ed@t)))))) (set! aq2839@aqd4c@time-macro aqd4c@time-macro) (set! aqd4e@delay-macro (lambda (aq13f3@stx) (let ((aq13f5@t aq13f3@stx)) (let ((aq13f7@ls/false (aqd7a@syntax-dispatch aq13f5@t '(_ any)))) (if aq13f7@ls/false (apply (lambda (aq13f9@expr) (aqd30@bless (list 'make-promise (list 'lambda '() aq13f9@expr)))) aq13f7@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq13f5@t)))))) (set! aq283a@aqd4e@delay-macro aqd4e@delay-macro) (set! aqd50@assert-macro (lambda (aq13fb@stx) (let ((aq13fd@t aq13fb@stx)) (let ((aq13ff@ls/false (aqd7a@syntax-dispatch aq13fd@t '(_ any)))) (if aq13ff@ls/false (apply (lambda (aq1401@expr) (let ((aq1403@pos (or (aqe52@expression-position aq13fb@stx) (aqe52@expression-position aq1401@expr)))) (aqd30@bless (list 'let (list (list 'x aq1401@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote aq1401@expr) (list 'quote aq1403@pos))))))) aq13ff@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq13fd@t)))))) (set! aq283b@aqd50@assert-macro aqd50@assert-macro) (set! aqd52@endianness-macro (lambda (aq1405@stx) (let ((aq1407@t aq1405@stx)) (let ((aq1409@ls/false (aqd7a@syntax-dispatch aq1407@t '(_ any)))) (if aq1409@ls/false (apply (lambda (aq140b@e) (let ((aq140d@t (aqe60@syntax->datum aq140b@e))) (if (memv aq140d@t '(little)) (aqd30@bless ''little) (if (memv aq140d@t '(big)) (aqd30@bless ''big) (aqe5a@syntax-violation '#f '"endianness must be big or little" aq1405@stx))))) aq1409@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1407@t)))))) (set! aq283c@aqd52@endianness-macro aqd52@endianness-macro) (set! aqd54@identifier-syntax-macro (lambda (aq140f@stx) (let ((aq1411@t aq140f@stx)) (let ((aq1413@ls/false (aqd7a@syntax-dispatch aq1411@t '(_ any)))) (if aq1413@ls/false (apply (lambda (aq1415@expr) (aqd30@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax aq1415@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax aq1415@expr) '((syntax (e* ...)))))))))) aq1413@ls/false) (let ((aq1417@t aq1411@t)) (let ((aq1419@ls/false (aqd7a@syntax-dispatch aq1417@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and aq1419@ls/false (apply (lambda (aq141b@id1 aq141c@expr1 aq141d@id2 aq141e@expr2 aq141f@expr3) (and (aqb73@id? aq141b@id1) (aqb73@id? aq141d@id2) (aqb73@id? aq141e@expr2))) aq1419@ls/false)) (apply (lambda (aq1425@id1 aq1426@expr1 aq1427@id2 aq1428@expr2 aq1429@expr3) (aqd30@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax aq1426@expr1)) (list (list 'set! 'id aq1428@expr2) (list 'syntax aq1429@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons aq1426@expr1 '(e* ...))))))))) aq1419@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1417@t))))))))) (set! aq283d@aqd54@identifier-syntax-macro aqd54@identifier-syntax-macro) (set! aqd56@do-macro (lambda (aq142f@stx) (letrec* ((aq1432@bind (lambda (aq1449@x) (let ((aq144b@t aq1449@x)) (let ((aq144d@ls/false (aqd7a@syntax-dispatch aq144b@t '(any any)))) (if aq144d@ls/false (apply (lambda (aq144f@x aq1450@init) (list aq144f@x aq1450@init aq144f@x)) aq144d@ls/false) (let ((aq1453@t aq144b@t)) (let ((aq1455@ls/false (aqd7a@syntax-dispatch aq1453@t '(any any any)))) (if aq1455@ls/false (apply (lambda (aq1457@x aq1458@init aq1459@step) (list aq1457@x aq1458@init aq1459@step)) aq1455@ls/false) (let ((aq145d@t aq1453@t)) (let ((aq145f@ls/false (aqd7a@syntax-dispatch aq145d@t '_))) (if aq145f@ls/false (apply (lambda () (aqe5a@syntax-violation '#f '"invalid binding" aq142f@stx)) aq145f@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq145d@t))))))))))))) (let ((aq1433@t aq142f@stx)) (let ((aq1435@ls/false (aqd7a@syntax-dispatch aq1433@t '(_ each-any (any . each-any) . each-any)))) (if aq1435@ls/false (apply (lambda (aq1437@binding* aq1438@test aq1439@expr* aq143a@command*) (let ((aq143f@t (map aq1432@bind aq1437@binding*))) (let ((aq1441@ls/false (aqd7a@syntax-dispatch aq143f@t '#(each (any any any))))) (if aq1441@ls/false (apply (lambda (aq1443@x* aq1444@init* aq1445@step*) (if (aqb7b@valid-bound-ids? aq1443@x*) (aqd30@bless (list 'letrec (list (list 'loop (list 'lambda aq1443@x* (list 'if aq1438@test (cons 'begin (cons '(if #f #f) aq1439@expr*)) (cons 'begin (append aq143a@command* (list (cons 'loop aq1445@step*)))))))) (cons 'loop aq1444@init*))) (aqe5a@syntax-violation '#f '"invalid bindings" aq142f@stx))) aq1441@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq143f@t))))) aq1435@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1433@t))))))) (set! aq283e@aqd56@do-macro aqd56@do-macro) (set! aqd58@let*-macro (lambda (aq1461@stx) (let ((aq1463@t aq1461@stx)) (let ((aq1465@ls/false (aqd7a@syntax-dispatch aq1463@t '(_ #(each (any any)) any . each-any)))) (if (and aq1465@ls/false (apply (lambda (aq1467@lhs* aq1468@rhs* aq1469@b aq146a@b*) (for-all aqb73@id? aq1467@lhs*)) aq1465@ls/false)) (apply (lambda (aq146f@lhs* aq1470@rhs* aq1471@b aq1472@b*) (aqd30@bless (let aq1479@f ((aq1477@x* (map list aq146f@lhs* aq1470@rhs*))) (if (null? aq1477@x*) (cons 'let (cons '() (cons aq1471@b aq1472@b*))) (list 'let (list (car aq1477@x*)) (aq1479@f (cdr aq1477@x*))))))) aq1465@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1463@t)))))) (set! aq283f@aqd58@let*-macro aqd58@let*-macro) (set! aqd5a@or-macro (lambda (aq147b@stx) (let ((aq147d@t aq147b@stx)) (let ((aq147f@ls/false (aqd7a@syntax-dispatch aq147d@t '(_)))) (if aq147f@ls/false (apply (lambda () '#f) aq147f@ls/false) (let ((aq1481@t aq147d@t)) (let ((aq1483@ls/false (aqd7a@syntax-dispatch aq1481@t '(_ any . each-any)))) (if aq1483@ls/false (apply (lambda (aq1485@e aq1486@e*) (aqd30@bless (let aq148d@f ((aq1489@e aq1485@e) (aq148a@e* aq1486@e*)) (if (null? aq148a@e*) (list 'begin '#f aq1489@e) (list 'let (list (list 't aq1489@e)) (list 'if 't 't (aq148d@f (car aq148a@e*) (cdr aq148a@e*)))))))) aq1483@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1481@t))))))))) (set! aq2840@aqd5a@or-macro aqd5a@or-macro) (set! aqd5c@and-macro (lambda (aq148f@stx) (let ((aq1491@t aq148f@stx)) (let ((aq1493@ls/false (aqd7a@syntax-dispatch aq1491@t '(_)))) (if aq1493@ls/false (apply (lambda () '#t) aq1493@ls/false) (let ((aq1495@t aq1491@t)) (let ((aq1497@ls/false (aqd7a@syntax-dispatch aq1495@t '(_ any . each-any)))) (if aq1497@ls/false (apply (lambda (aq1499@e aq149a@e*) (aqd30@bless (let aq14a1@f ((aq149d@e aq1499@e) (aq149e@e* aq149a@e*)) (if (null? aq149e@e*) (list 'begin '#f aq149d@e) (cons 'if (cons aq149d@e (cons (aq14a1@f (car aq149e@e*) (cdr aq149e@e*)) '(#f)))))))) aq1497@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1495@t))))))))) (set! aq2841@aqd5c@and-macro aqd5c@and-macro) (set! aqd5e@cond-macro (lambda (aq14a3@stx) (let ((aq14a5@t aq14a3@stx)) (let ((aq14a7@ls/false (aqd7a@syntax-dispatch aq14a5@t '(_ any . each-any)))) (if aq14a7@ls/false (apply (lambda (aq14a9@cls aq14aa@cls*) (aqd30@bless (let aq14b1@f ((aq14ad@cls aq14a9@cls) (aq14ae@cls* aq14aa@cls*)) (if (null? aq14ae@cls*) (let ((aq14b3@t aq14ad@cls)) (let ((aq14b5@ls/false (aqd7a@syntax-dispatch aq14b3@t '(#(scheme-id else) any . each-any)))) (if aq14b5@ls/false (apply (lambda (aq14b7@e aq14b8@e*) (cons 'begin (cons aq14b7@e aq14b8@e*))) aq14b5@ls/false) (let ((aq14bb@t aq14b3@t)) (let ((aq14bd@ls/false (aqd7a@syntax-dispatch aq14bb@t '(any #(scheme-id =>) any)))) (if aq14bd@ls/false (apply (lambda (aq14bf@e aq14c0@p) (list 'let (list (list 't aq14bf@e)) (list 'if 't (cons aq14c0@p '(t))))) aq14bd@ls/false) (let ((aq14c3@t aq14bb@t)) (let ((aq14c5@ls/false (aqd7a@syntax-dispatch aq14c3@t '(any)))) (if aq14c5@ls/false (apply (lambda (aq14c7@e) (cons 'or (cons aq14c7@e '((if #f #f))))) aq14c5@ls/false) (let ((aq14c9@t aq14c3@t)) (let ((aq14cb@ls/false (aqd7a@syntax-dispatch aq14c9@t '(any . each-any)))) (if aq14cb@ls/false (apply (lambda (aq14cd@e aq14ce@e*) (list 'if aq14cd@e (cons 'begin aq14ce@e*))) aq14cb@ls/false) (let ((aq14d1@t aq14c9@t)) (let ((aq14d3@ls/false (aqd7a@syntax-dispatch aq14d1@t '_))) (if aq14d3@ls/false (apply (lambda () (aqe5a@syntax-violation '#f '"invalid last clause" aq14a3@stx)) aq14d3@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq14d1@t)))))))))))))))) (let ((aq14d5@t aq14ad@cls)) (let ((aq14d7@ls/false (aqd7a@syntax-dispatch aq14d5@t '(#(scheme-id else) any . each-any)))) (if aq14d7@ls/false (apply (lambda (aq14d9@e aq14da@e*) (aqe5a@syntax-violation '#f '"incorrect position of keyword else" aq14a3@stx)) aq14d7@ls/false) (let ((aq14dd@t aq14d5@t)) (let ((aq14df@ls/false (aqd7a@syntax-dispatch aq14dd@t '(any #(scheme-id =>) any)))) (if aq14df@ls/false (apply (lambda (aq14e1@e aq14e2@p) (list 'let (list (list 't aq14e1@e)) (list 'if 't (cons aq14e2@p '(t)) (aq14b1@f (car aq14ae@cls*) (cdr aq14ae@cls*))))) aq14df@ls/false) (let ((aq14e5@t aq14dd@t)) (let ((aq14e7@ls/false (aqd7a@syntax-dispatch aq14e5@t '(any)))) (if aq14e7@ls/false (apply (lambda (aq14e9@e) (list 'or aq14e9@e (aq14b1@f (car aq14ae@cls*) (cdr aq14ae@cls*)))) aq14e7@ls/false) (let ((aq14eb@t aq14e5@t)) (let ((aq14ed@ls/false (aqd7a@syntax-dispatch aq14eb@t '(any . each-any)))) (if aq14ed@ls/false (apply (lambda (aq14ef@e aq14f0@e*) (list 'if aq14ef@e (cons 'begin aq14f0@e*) (aq14b1@f (car aq14ae@cls*) (cdr aq14ae@cls*)))) aq14ed@ls/false) (let ((aq14f3@t aq14eb@t)) (let ((aq14f5@ls/false (aqd7a@syntax-dispatch aq14f3@t '_))) (if aq14f5@ls/false (apply (lambda () (aqe5a@syntax-violation '#f '"invalid last clause" aq14a3@stx)) aq14f5@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq14f3@t)))))))))))))))))))) aq14a7@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq14a5@t)))))) (set! aq2842@aqd5e@cond-macro aqd5e@cond-macro) (set! aqd60@do-include (lambda (aq14f7@stx aq14f8@id aq14f9@filename) (let ((aq14fd@filename (aqb87@stx->datum aq14f9@filename))) (begin (if (not (and (string? aq14fd@filename) (aqb73@id? aq14f8@id))) (aqe5a@syntax-violation '#f '"invalid syntax" aq14f7@stx) (void)) (cons (aqd30@bless 'begin) (with-input-from-file aq14fd@filename (lambda () (let aq1501@f ((aq14ff@ls '())) (let ((aq1503@x (aq6b5@aq585@read-annotated))) (if (eof-object? aq1503@x) (reverse aq14ff@ls) (aq1501@f (cons (aqb53@datum->stx aq14f8@id aq1503@x) aq14ff@ls)))))))))))) (set! aq2843@aqd60@do-include aqd60@do-include) (set! aqd62@include-macro (lambda (aq1505@e) (let ((aq1507@t aq1505@e)) (let ((aq1509@ls/false (aqd7a@syntax-dispatch aq1507@t '(any any)))) (if aq1509@ls/false (apply (lambda (aq150b@id aq150c@filename) (aqd60@do-include aq1505@e aq150b@id aq150c@filename)) aq1509@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1507@t)))))) (set! aq2844@aqd62@include-macro aqd62@include-macro) (set! aqd64@include-into-macro (lambda (aq150f@e) (let ((aq1511@t aq150f@e)) (let ((aq1513@ls/false (aqd7a@syntax-dispatch aq1511@t '(_ any any)))) (if aq1513@ls/false (apply (lambda (aq1515@id aq1516@filename) (aqd60@do-include aq150f@e aq1515@id aq1516@filename)) aq1513@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1511@t)))))) (set! aq2845@aqd64@include-into-macro aqd64@include-into-macro) (set! aqd66@syntax-rules-macro (lambda (aq1519@e) (let ((aq151b@t aq1519@e)) (let ((aq151d@ls/false (aqd7a@syntax-dispatch aq151b@t '(_ each-any . #(each (any any)))))) (if aq151d@ls/false (apply (lambda (aq151f@lits aq1520@pat* aq1521@tmp*) (begin (aqd80@verify-literals aq151f@lits aq1519@e) (aqd30@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons aq151f@lits (map (lambda (aq1525@pat aq1526@tmp) (let ((aq1529@t aq1525@pat)) (let ((aq152b@ls/false (aqd7a@syntax-dispatch aq1529@t '(_ . any)))) (if aq152b@ls/false (apply (lambda (aq152d@rest) (list (cons 'g aq152d@rest) (list 'syntax aq1526@tmp))) aq152b@ls/false) (let ((aq152f@t aq1529@t)) (let ((aq1531@ls/false (aqd7a@syntax-dispatch aq152f@t '_))) (if aq1531@ls/false (apply (lambda () (aqe5a@syntax-violation '#f '"invalid syntax-rules pattern" aq1519@e aq1525@pat)) aq1531@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq152f@t)))))))) aq1520@pat* aq1521@tmp*)))))))) aq151d@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq151b@t)))))) (set! aq2846@aqd66@syntax-rules-macro aqd66@syntax-rules-macro) (set! aqd68@quasiquote-macro (letrec* ((aq1534@datum (lambda (aq1635@x) (list (aqd02@scheme-stx 'quote) (aqb5b@mkstx aq1635@x '() '() '())))) (aq1550@quasicons* (lambda (aq162d@x aq162e@y) (let aq1633@f ((aq1631@x aq162d@x)) (if (null? aq1631@x) aq162e@y (aq1552@quasicons (car aq1631@x) (aq1633@f (cdr aq1631@x))))))) (aq1552@quasicons (lambda (aq1607@x aq1608@y) (let ((aq160b@t aq1608@y)) (let ((aq160d@ls/false (aqd7a@syntax-dispatch aq160b@t '(#(scheme-id quote) any)))) (if aq160d@ls/false (apply (lambda (aq160f@dy) (let ((aq1611@t aq1607@x)) (let ((aq1613@ls/false (aqd7a@syntax-dispatch aq1611@t '(#(scheme-id quote) any)))) (if aq1613@ls/false (apply (lambda (aq1615@dx) (list (aqd02@scheme-stx 'quote) (cons aq1615@dx aq160f@dy))) aq1613@ls/false) (let ((aq1617@t aq1611@t)) (let ((aq1619@ls/false (aqd7a@syntax-dispatch aq1617@t '_))) (if aq1619@ls/false (apply (lambda () (let ((aq161b@t aq160f@dy)) (let ((aq161d@ls/false (aqd7a@syntax-dispatch aq161b@t '()))) (if aq161d@ls/false (apply (lambda () (list (aqd02@scheme-stx 'list) aq1607@x)) aq161d@ls/false) (let ((aq161f@t aq161b@t)) (let ((aq1621@ls/false (aqd7a@syntax-dispatch aq161f@t '_))) (if aq1621@ls/false (apply (lambda () (list (aqd02@scheme-stx 'cons) aq1607@x aq1608@y)) aq1621@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq161f@t)))))))) aq1619@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1617@t)))))))) aq160d@ls/false) (let ((aq1623@t aq160b@t)) (let ((aq1625@ls/false (aqd7a@syntax-dispatch aq1623@t '(#(scheme-id list) . each-any)))) (if aq1625@ls/false (apply (lambda (aq1627@stuff) (cons* (aqd02@scheme-stx 'list) aq1607@x aq1627@stuff)) aq1625@ls/false) (let ((aq1629@t aq1623@t)) (let ((aq162b@ls/false (aqd7a@syntax-dispatch aq1629@t '_))) (if aq162b@ls/false (apply (lambda () (list (aqd02@scheme-stx 'cons) aq1607@x aq1608@y)) aq162b@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1629@t)))))))))))) (aq1554@quasiappend (lambda (aq15ed@x aq15ee@y) (let ((aq15f1@ls (let aq15f5@f ((aq15f3@x aq15ed@x)) (if (null? aq15f3@x) (let ((aq15f7@t aq15ee@y)) (let ((aq15f9@ls/false (aqd7a@syntax-dispatch aq15f7@t '(#(scheme-id quote) ())))) (if aq15f9@ls/false (apply (lambda () '()) aq15f9@ls/false) (let ((aq15fb@t aq15f7@t)) (let ((aq15fd@ls/false (aqd7a@syntax-dispatch aq15fb@t '_))) (if aq15fd@ls/false (apply (lambda () (list aq15ee@y)) aq15fd@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq15fb@t))))))) (let ((aq15ff@t (car aq15f3@x))) (let ((aq1601@ls/false (aqd7a@syntax-dispatch aq15ff@t '(#(scheme-id quote) ())))) (if aq1601@ls/false (apply (lambda () (aq15f5@f (cdr aq15f3@x))) aq1601@ls/false) (let ((aq1603@t aq15ff@t)) (let ((aq1605@ls/false (aqd7a@syntax-dispatch aq1603@t '_))) (if aq1605@ls/false (apply (lambda () (cons (car aq15f3@x) (aq15f5@f (cdr aq15f3@x)))) aq1605@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1603@t))))))))))) (if (null? aq15f1@ls) (list (aqd02@scheme-stx 'quote) '()) (if (null? (cdr aq15f1@ls)) (car aq15f1@ls) (cons* (aqd02@scheme-stx 'append) aq15f1@ls)))))) (aq1556@quasivector (lambda (aq15bb@x) (let ((aq15bd@pat-x aq15bb@x)) (let ((aq15bf@t aq15bd@pat-x)) (let ((aq15c1@ls/false (aqd7a@syntax-dispatch aq15bf@t '(#(scheme-id quote) each-any)))) (if aq15c1@ls/false (apply (lambda (aq15c3@x*) (list (aqd02@scheme-stx 'quote) (list->vector aq15c3@x*))) aq15c1@ls/false) (let ((aq15c5@t aq15bf@t)) (let ((aq15c7@ls/false (aqd7a@syntax-dispatch aq15c5@t '_))) (if aq15c7@ls/false (apply (lambda () (let aq15cf@f ((aq15c9@x aq15bb@x) (aq15ca@k (lambda (aq15cd@ls) (cons* (aqd02@scheme-stx 'vector) aq15cd@ls)))) (let ((aq15d1@t aq15c9@x)) (let ((aq15d3@ls/false (aqd7a@syntax-dispatch aq15d1@t '(#(scheme-id quote) each-any)))) (if aq15d3@ls/false (apply (lambda (aq15d5@x*) (aq15ca@k (map (lambda (aq15d7@x) (list (aqd02@scheme-stx 'quote) aq15d7@x)) aq15d5@x*))) aq15d3@ls/false) (let ((aq15d9@t aq15d1@t)) (let ((aq15db@ls/false (aqd7a@syntax-dispatch aq15d9@t '(#(scheme-id list) . each-any)))) (if aq15db@ls/false (apply (lambda (aq15dd@x*) (aq15ca@k aq15dd@x*)) aq15db@ls/false) (let ((aq15df@t aq15d9@t)) (let ((aq15e1@ls/false (aqd7a@syntax-dispatch aq15df@t '(#(scheme-id cons) any any)))) (if aq15e1@ls/false (apply (lambda (aq15e3@x aq15e4@y) (aq15cf@f aq15e4@y (lambda (aq15e7@ls) (aq15ca@k (cons aq15e3@x aq15e7@ls))))) aq15e1@ls/false) (let ((aq15e9@t aq15df@t)) (let ((aq15eb@ls/false (aqd7a@syntax-dispatch aq15e9@t '_))) (if aq15eb@ls/false (apply (lambda () (list (aqd02@scheme-stx 'list->vector) aq15bd@pat-x)) aq15eb@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq15e9@t))))))))))))))) aq15c7@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq15c5@t)))))))))) (aq1558@vquasi (lambda (aq1599@p aq159a@lev) (let ((aq159d@t aq1599@p)) (let ((aq159f@ls/false (aqd7a@syntax-dispatch aq159d@t '(any . any)))) (if aq159f@ls/false (apply (lambda (aq15a1@p aq15a2@q) (let ((aq15a5@t aq15a1@p)) (let ((aq15a7@ls/false (aqd7a@syntax-dispatch aq15a5@t '(#(scheme-id unquote) . each-any)))) (if aq15a7@ls/false (apply (lambda (aq15a9@p) (if (= aq159a@lev '0) (aq1550@quasicons* aq15a9@p (aq1558@vquasi aq15a2@q aq159a@lev)) (aq1552@quasicons (aq1552@quasicons (aq1534@datum 'unquote) (aq155a@quasi aq15a9@p (- aq159a@lev '1))) (aq1558@vquasi aq15a2@q aq159a@lev)))) aq15a7@ls/false) (let ((aq15ab@t aq15a5@t)) (let ((aq15ad@ls/false (aqd7a@syntax-dispatch aq15ab@t '(#(scheme-id unquote-splicing) . each-any)))) (if aq15ad@ls/false (apply (lambda (aq15af@p) (if (= aq159a@lev '0) (aq1554@quasiappend aq15af@p (aq1558@vquasi aq15a2@q aq159a@lev)) (aq1552@quasicons (aq1552@quasicons (aq1534@datum 'unquote-splicing) (aq155a@quasi aq15af@p (- aq159a@lev '1))) (aq1558@vquasi aq15a2@q aq159a@lev)))) aq15ad@ls/false) (let ((aq15b1@t aq15ab@t)) (let ((aq15b3@ls/false (aqd7a@syntax-dispatch aq15b1@t 'any))) (if aq15b3@ls/false (apply (lambda (aq15b5@p) (aq1552@quasicons (aq155a@quasi aq15b5@p aq159a@lev) (aq1558@vquasi aq15a2@q aq159a@lev))) aq15b3@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq15b1@t))))))))))) aq159f@ls/false) (let ((aq15b7@t aq159d@t)) (let ((aq15b9@ls/false (aqd7a@syntax-dispatch aq15b7@t '()))) (if aq15b9@ls/false (apply (lambda () (list (aqd02@scheme-stx 'quote) '())) aq15b9@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq15b7@t))))))))) (aq155a@quasi (lambda (aq1563@p aq1564@lev) (let ((aq1567@t aq1563@p)) (let ((aq1569@ls/false (aqd7a@syntax-dispatch aq1567@t '(#(scheme-id unquote) any)))) (if aq1569@ls/false (apply (lambda (aq156b@p) (if (= aq1564@lev '0) aq156b@p (aq1552@quasicons (aq1534@datum 'unquote) (aq155a@quasi (list aq156b@p) (- aq1564@lev '1))))) aq1569@ls/false) (let ((aq156d@t aq1567@t)) (let ((aq156f@ls/false (aqd7a@syntax-dispatch aq156d@t '((#(scheme-id unquote) . each-any) . any)))) (if aq156f@ls/false (apply (lambda (aq1571@p aq1572@q) (if (= aq1564@lev '0) (aq1550@quasicons* aq1571@p (aq155a@quasi aq1572@q aq1564@lev)) (aq1552@quasicons (aq1552@quasicons (aq1534@datum 'unquote) (aq155a@quasi aq1571@p (- aq1564@lev '1))) (aq155a@quasi aq1572@q aq1564@lev)))) aq156f@ls/false) (let ((aq1575@t aq156d@t)) (let ((aq1577@ls/false (aqd7a@syntax-dispatch aq1575@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if aq1577@ls/false (apply (lambda (aq1579@p aq157a@q) (if (= aq1564@lev '0) (aq1554@quasiappend aq1579@p (aq155a@quasi aq157a@q aq1564@lev)) (aq1552@quasicons (aq1552@quasicons (aq1534@datum 'unquote-splicing) (aq155a@quasi aq1579@p (- aq1564@lev '1))) (aq155a@quasi aq157a@q aq1564@lev)))) aq1577@ls/false) (let ((aq157d@t aq1575@t)) (let ((aq157f@ls/false (aqd7a@syntax-dispatch aq157d@t '(#(scheme-id quasiquote) any)))) (if aq157f@ls/false (apply (lambda (aq1581@p) (aq1552@quasicons (aq1534@datum 'quasiquote) (aq155a@quasi (list aq1581@p) (+ aq1564@lev '1)))) aq157f@ls/false) (let ((aq1583@t aq157d@t)) (let ((aq1585@ls/false (aqd7a@syntax-dispatch aq1583@t '(any . any)))) (if aq1585@ls/false (apply (lambda (aq1587@p aq1588@q) (aq1552@quasicons (aq155a@quasi aq1587@p aq1564@lev) (aq155a@quasi aq1588@q aq1564@lev))) aq1585@ls/false) (let ((aq158b@t aq1583@t)) (let ((aq158d@ls/false (aqd7a@syntax-dispatch aq158b@t '#(vector each-any)))) (if (and aq158d@ls/false (apply (lambda (aq158f@x) (not (aqb3f@stx? aq158f@x))) aq158d@ls/false)) (apply (lambda (aq1591@x) (aq1556@quasivector (aq1558@vquasi aq1591@x aq1564@lev))) aq158d@ls/false) (let ((aq1593@t aq158b@t)) (let ((aq1595@ls/false (aqd7a@syntax-dispatch aq1593@t 'any))) (if aq1595@ls/false (apply (lambda (aq1597@p) (list (aqd02@scheme-stx 'quote) aq1597@p)) aq1595@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1593@t))))))))))))))))))))))))) (lambda (aq155b@x) (let ((aq155d@t aq155b@x)) (let ((aq155f@ls/false (aqd7a@syntax-dispatch aq155d@t '(_ any)))) (if aq155f@ls/false (apply (lambda (aq1561@e) (aq155a@quasi aq1561@e '0)) aq155f@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq155d@t))))))) (set! aq2847@aqd68@quasiquote-macro aqd68@quasiquote-macro) (set! aqd6a@quasisyntax-macro (letrec* ((aq1638@quasi (lambda (aq1653@p aq1654@lev) (let ((aq1657@t aq1653@p)) (let ((aq1659@ls/false (aqd7a@syntax-dispatch aq1657@t '(#(scheme-id unsyntax) any)))) (if aq1659@ls/false (apply (lambda (aq165b@p) (if (= aq1654@lev '0) (let ((aq165d@g (gensym))) (values (list aq165d@g) (list aq165b@p) aq165d@g)) (call-with-values (lambda () (aq1638@quasi aq165b@p (- aq1654@lev '1))) (lambda (aq1665@aq1660 aq1666@aq1662 aq1667@aq1664) (let ((aq166b@p aq1667@aq1664) (aq166c@rhs* aq1666@aq1662) (aq166d@lhs* aq1665@aq1660)) (values aq166d@lhs* aq166c@rhs* (list 'unsyntax aq166b@p))))))) aq1659@ls/false) (let ((aq1671@t aq1657@t)) (let ((aq1673@ls/false (aqd7a@syntax-dispatch aq1671@t '#(scheme-id unsyntax)))) (if (and aq1673@ls/false (apply (lambda () (= aq1654@lev '0)) aq1673@ls/false)) (apply (lambda () (aqe5a@syntax-violation '#f '"incorrect use of unsyntax" aq1653@p)) aq1673@ls/false) (let ((aq1675@t aq1671@t)) (let ((aq1677@ls/false (aqd7a@syntax-dispatch aq1675@t '((#(scheme-id unsyntax) . each-any) . any)))) (if aq1677@ls/false (apply (lambda (aq1679@p* aq167a@q) (call-with-values (lambda () (aq1638@quasi aq167a@q aq1654@lev)) (lambda (aq1683@aq167e aq1684@aq1680 aq1685@aq1682) (let ((aq1689@q aq1685@aq1682) (aq168a@rhs* aq1684@aq1680) (aq168b@lhs* aq1683@aq167e)) (if (= aq1654@lev '0) (let ((aq168f@g* (map (lambda (aq1691@x) (gensym)) aq1679@p*))) (values (append aq168f@g* aq168b@lhs*) (append aq1679@p* aq168a@rhs*) (append aq168f@g* aq1689@q))) (call-with-values (lambda () (aq1638@quasi aq1679@p* (- aq1654@lev '1))) (lambda (aq1699@aq1694 aq169a@aq1696 aq169b@aq1698) (let ((aq169f@p* aq169b@aq1698) (aq16a0@rhs2* aq169a@aq1696) (aq16a1@lhs2* aq1699@aq1694)) (values (append aq16a1@lhs2* aq168b@lhs*) (append aq16a0@rhs2* aq168a@rhs*) (cons (cons 'unsyntax aq169f@p*) aq1689@q)))))))))) aq1677@ls/false) (let ((aq16a5@t aq1675@t)) (let ((aq16a7@ls/false (aqd7a@syntax-dispatch aq16a5@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if aq16a7@ls/false (apply (lambda (aq16a9@p* aq16aa@q) (call-with-values (lambda () (aq1638@quasi aq16aa@q aq1654@lev)) (lambda (aq16b3@aq16ae aq16b4@aq16b0 aq16b5@aq16b2) (let ((aq16b9@q aq16b5@aq16b2) (aq16ba@rhs* aq16b4@aq16b0) (aq16bb@lhs* aq16b3@aq16ae)) (if (= aq1654@lev '0) (let ((aq16bf@g* (map (lambda (aq16c1@x) (gensym)) aq16a9@p*))) (values (append (map (lambda (aq16c3@g) (cons aq16c3@g '(...))) aq16bf@g*) aq16bb@lhs*) (append aq16a9@p* aq16ba@rhs*) (append (apply append (map (lambda (aq16c5@g) (cons aq16c5@g '(...))) aq16bf@g*)) aq16b9@q))) (call-with-values (lambda () (aq1638@quasi aq16a9@p* (- aq1654@lev '1))) (lambda (aq16cd@aq16c8 aq16ce@aq16ca aq16cf@aq16cc) (let ((aq16d3@p* aq16cf@aq16cc) (aq16d4@rhs2* aq16ce@aq16ca) (aq16d5@lhs2* aq16cd@aq16c8)) (values (append aq16d5@lhs2* aq16bb@lhs*) (append aq16d4@rhs2* aq16ba@rhs*) (cons (cons 'unsyntax-splicing aq16d3@p*) aq16b9@q)))))))))) aq16a7@ls/false) (let ((aq16d9@t aq16a5@t)) (let ((aq16db@ls/false (aqd7a@syntax-dispatch aq16d9@t '#(scheme-id unsyntax-splicing)))) (if (and aq16db@ls/false (apply (lambda () (= aq1654@lev '0)) aq16db@ls/false)) (apply (lambda () (aqe5a@syntax-violation '#f '"incorrect use of unsyntax-splicing" aq1653@p)) aq16db@ls/false) (let ((aq16dd@t aq16d9@t)) (let ((aq16df@ls/false (aqd7a@syntax-dispatch aq16dd@t '(#(scheme-id quasisyntax) any)))) (if aq16df@ls/false (apply (lambda (aq16e1@p) (call-with-values (lambda () (aq1638@quasi aq16e1@p (+ aq1654@lev '1))) (lambda (aq16e9@aq16e4 aq16ea@aq16e6 aq16eb@aq16e8) (let ((aq16ef@p aq16eb@aq16e8) (aq16f0@rhs* aq16ea@aq16e6) (aq16f1@lhs* aq16e9@aq16e4)) (values aq16f1@lhs* aq16f0@rhs* (list 'quasisyntax aq16ef@p)))))) aq16df@ls/false) (let ((aq16f5@t aq16dd@t)) (let ((aq16f7@ls/false (aqd7a@syntax-dispatch aq16f5@t '(any . any)))) (if aq16f7@ls/false (apply (lambda (aq16f9@p aq16fa@q) (call-with-values (lambda () (aq1638@quasi aq16f9@p aq1654@lev)) (lambda (aq1709@aq16fe aq170a@aq1700 aq170b@aq1702) (call-with-values (lambda () (aq1638@quasi aq16fa@q aq1654@lev)) (lambda (aq170f@aq1704 aq1710@aq1706 aq1711@aq1708) (let ((aq1715@q aq1711@aq1708) (aq1716@rhs2* aq1710@aq1706) (aq1717@lhs2* aq170f@aq1704) (aq1718@p aq170b@aq1702) (aq1719@rhs* aq170a@aq1700) (aq171a@lhs* aq1709@aq16fe)) (values (append aq1717@lhs2* aq171a@lhs*) (append aq1716@rhs2* aq1719@rhs*) (cons aq1718@p aq1715@q)))))))) aq16f7@ls/false) (let ((aq1721@t aq16f5@t)) (let ((aq1723@ls/false (aqd7a@syntax-dispatch aq1721@t '#(vector each-any)))) (if aq1723@ls/false (apply (lambda (aq1725@x*) (call-with-values (lambda () (aq1638@quasi aq1725@x* aq1654@lev)) (lambda (aq172d@aq1728 aq172e@aq172a aq172f@aq172c) (let ((aq1733@x* aq172f@aq172c) (aq1734@rhs* aq172e@aq172a) (aq1735@lhs* aq172d@aq1728)) (values aq1735@lhs* aq1734@rhs* (list->vector aq1733@x*)))))) aq1723@ls/false) (let ((aq1739@t aq1721@t)) (let ((aq173b@ls/false (aqd7a@syntax-dispatch aq1739@t '_))) (if aq173b@ls/false (apply (lambda () (values '() '() aq1653@p)) aq173b@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1739@t))))))))))))))))))))))))))))))) (lambda (aq1639@x) (let ((aq163b@t aq1639@x)) (let ((aq163d@ls/false (aqd7a@syntax-dispatch aq163b@t '(_ any)))) (if aq163d@ls/false (apply (lambda (aq163f@e) (call-with-values (lambda () (aq1638@quasi aq163f@e '0)) (lambda (aq1647@aq1642 aq1648@aq1644 aq1649@aq1646) (let ((aq164d@v aq1649@aq1646) (aq164e@rhs* aq1648@aq1644) (aq164f@lhs* aq1647@aq1642)) (aqd30@bless (list 'syntax-case (cons 'list aq164e@rhs*) '() (list aq164f@lhs* (list 'syntax aq164d@v)))))))) aq163d@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq163b@t))))))) (set! aq2848@aqd6a@quasisyntax-macro aqd6a@quasisyntax-macro) (set! aqd6c@define-struct-macro (lambda (aq173d@stx) (aqe5a@syntax-violation '#f '"define-struct not supported" aq173d@stx))) (set! aq2849@aqd6c@define-struct-macro aqd6c@define-struct-macro) (set! aqd6e@define-record-type-macro (lambda (aq173f@x) (letrec* ((aq1742@id (lambda (aq1935@ctxt . aq1937@str*) (aqe5e@datum->syntax aq1935@ctxt (string->symbol (apply string-append (map (lambda (aq1939@x) (if (symbol? aq1939@x) (symbol->string aq1939@x) (if (string? aq1939@x) aq1939@x (assertion-violation 'define-record-type '"BUG")))) aq1937@str*)))))) (aq1744@get-record-name (lambda (aq1923@spec) (let ((aq1925@t aq1923@spec)) (let ((aq1927@ls/false (aqd7a@syntax-dispatch aq1925@t '(any any any)))) (if aq1927@ls/false (apply (lambda (aq1929@foo aq192a@make-foo aq192b@foo?) aq1929@foo) aq1927@ls/false) (let ((aq192f@t aq1925@t)) (let ((aq1931@ls/false (aqd7a@syntax-dispatch aq192f@t 'any))) (if aq1931@ls/false (apply (lambda (aq1933@foo) aq1933@foo) aq1931@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq192f@t))))))))) (aq1746@get-record-constructor-name (lambda (aq190f@spec) (let ((aq1911@t aq190f@spec)) (let ((aq1913@ls/false (aqd7a@syntax-dispatch aq1911@t '(any any any)))) (if aq1913@ls/false (apply (lambda (aq1915@foo aq1916@make-foo aq1917@foo?) aq1916@make-foo) aq1913@ls/false) (let ((aq191b@t aq1911@t)) (let ((aq191d@ls/false (aqd7a@syntax-dispatch aq191b@t 'any))) (if (and aq191d@ls/false (apply (lambda (aq191f@foo) (aqb73@id? aq191f@foo)) aq191d@ls/false)) (apply (lambda (aq1921@foo) (aq1742@id aq1921@foo '"make-" (aqb87@stx->datum aq1921@foo))) aq191d@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq191b@t))))))))) (aq1748@get-record-predicate-name (lambda (aq18fb@spec) (let ((aq18fd@t aq18fb@spec)) (let ((aq18ff@ls/false (aqd7a@syntax-dispatch aq18fd@t '(any any any)))) (if aq18ff@ls/false (apply (lambda (aq1901@foo aq1902@make-foo aq1903@foo?) aq1903@foo?) aq18ff@ls/false) (let ((aq1907@t aq18fd@t)) (let ((aq1909@ls/false (aqd7a@syntax-dispatch aq1907@t 'any))) (if (and aq1909@ls/false (apply (lambda (aq190b@foo) (aqb73@id? aq190b@foo)) aq1909@ls/false)) (apply (lambda (aq190d@foo) (aq1742@id aq190d@foo (aqb87@stx->datum aq190d@foo) '"?")) aq1909@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1907@t))))))))) (aq174a@get-clause (lambda (aq18e9@id aq18ea@ls) (let ((aq18ed@t aq18ea@ls)) (let ((aq18ef@ls/false (aqd7a@syntax-dispatch aq18ed@t '()))) (if aq18ef@ls/false (apply (lambda () '#f) aq18ef@ls/false) (let ((aq18f1@t aq18ed@t)) (let ((aq18f3@ls/false (aqd7a@syntax-dispatch aq18f1@t '((any . any) . any)))) (if aq18f3@ls/false (apply (lambda (aq18f5@x aq18f6@rest aq18f7@ls) (if (aqb79@free-id=? (aqd30@bless aq18e9@id) aq18f5@x) (cons aq18f5@x aq18f6@rest) (aq174a@get-clause aq18e9@id aq18f7@ls))) aq18f3@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq18f1@t))))))))) (aq174c@foo-rtd-code (lambda (aq1897@name aq1898@clause* aq1899@parent-rtd-code) (letrec* ((aq189e@convert-field-spec* (lambda (aq18cf@ls) (list->vector (map (lambda (aq18d1@x) (let ((aq18d3@t aq18d1@x)) (let ((aq18d5@ls/false (aqd7a@syntax-dispatch aq18d3@t '(#(scheme-id mutable) any . any)))) (if aq18d5@ls/false (apply (lambda (aq18d7@name aq18d8@rest) (list 'mutable aq18d7@name)) aq18d5@ls/false) (let ((aq18db@t aq18d3@t)) (let ((aq18dd@ls/false (aqd7a@syntax-dispatch aq18db@t '(#(scheme-id immutable) any . any)))) (if aq18dd@ls/false (apply (lambda (aq18df@name aq18e0@rest) (list 'immutable aq18df@name)) aq18dd@ls/false) (let ((aq18e3@t aq18db@t)) (let ((aq18e5@ls/false (aqd7a@syntax-dispatch aq18e3@t 'any))) (if aq18e5@ls/false (apply (lambda (aq18e7@name) (list 'immutable aq18e7@name)) aq18e5@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq18e3@t))))))))))) aq18cf@ls))))) (let ((aq189f@uid-code (let ((aq18a7@t (aq174a@get-clause 'nongenerative aq1898@clause*))) (let ((aq18a9@ls/false (aqd7a@syntax-dispatch aq18a7@t '(_)))) (if aq18a9@ls/false (apply (lambda () (list 'quote (gensym))) aq18a9@ls/false) (let ((aq18ab@t aq18a7@t)) (let ((aq18ad@ls/false (aqd7a@syntax-dispatch aq18ab@t '(_ any)))) (if aq18ad@ls/false (apply (lambda (aq18af@uid) (list 'quote aq18af@uid)) aq18ad@ls/false) (let ((aq18b1@t aq18ab@t)) (let ((aq18b3@ls/false (aqd7a@syntax-dispatch aq18b1@t '_))) (if aq18b3@ls/false (apply (lambda () '#f) aq18b3@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq18b1@t))))))))))) (aq18a0@sealed? (let ((aq18b5@t (aq174a@get-clause 'sealed aq1898@clause*))) (let ((aq18b7@ls/false (aqd7a@syntax-dispatch aq18b5@t '(_ #(atom #t))))) (if aq18b7@ls/false (apply (lambda () '#t) aq18b7@ls/false) (let ((aq18b9@t aq18b5@t)) (let ((aq18bb@ls/false (aqd7a@syntax-dispatch aq18b9@t '_))) (if aq18bb@ls/false (apply (lambda () '#f) aq18bb@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq18b9@t)))))))) (aq18a1@opaque? (let ((aq18bd@t (aq174a@get-clause 'opaque aq1898@clause*))) (let ((aq18bf@ls/false (aqd7a@syntax-dispatch aq18bd@t '(_ #(atom #t))))) (if aq18bf@ls/false (apply (lambda () '#t) aq18bf@ls/false) (let ((aq18c1@t aq18bd@t)) (let ((aq18c3@ls/false (aqd7a@syntax-dispatch aq18c1@t '_))) (if aq18c3@ls/false (apply (lambda () '#f) aq18c3@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq18c1@t)))))))) (aq18a2@fields (let ((aq18c5@t (aq174a@get-clause 'fields aq1898@clause*))) (let ((aq18c7@ls/false (aqd7a@syntax-dispatch aq18c5@t '(_ . each-any)))) (if aq18c7@ls/false (apply (lambda (aq18c9@field-spec*) (list 'quote (aq189e@convert-field-spec* aq18c9@field-spec*))) aq18c7@ls/false) (let ((aq18cb@t aq18c5@t)) (let ((aq18cd@ls/false (aqd7a@syntax-dispatch aq18cb@t '_))) (if aq18cd@ls/false (apply (lambda () ''#()) aq18cd@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq18cb@t))))))))) (aqd30@bless (list 'make-record-type-descriptor (list 'quote aq1897@name) aq1899@parent-rtd-code aq189f@uid-code aq18a0@sealed? aq18a1@opaque? aq18a2@fields)))))) (aq174e@parent-rtd-code (lambda (aq187f@clause*) (let ((aq1881@t (aq174a@get-clause 'parent aq187f@clause*))) (let ((aq1883@ls/false (aqd7a@syntax-dispatch aq1881@t '(_ any)))) (if aq1883@ls/false (apply (lambda (aq1885@name) (list 'record-type-descriptor aq1885@name)) aq1883@ls/false) (let ((aq1887@t aq1881@t)) (let ((aq1889@ls/false (aqd7a@syntax-dispatch aq1887@t '#(atom #f)))) (if aq1889@ls/false (apply (lambda () (let ((aq188b@t (aq174a@get-clause 'parent-rtd aq187f@clause*))) (let ((aq188d@ls/false (aqd7a@syntax-dispatch aq188b@t '(_ any any)))) (if aq188d@ls/false (apply (lambda (aq188f@rtd aq1890@rcd) aq188f@rtd) aq188d@ls/false) (let ((aq1893@t aq188b@t)) (let ((aq1895@ls/false (aqd7a@syntax-dispatch aq1893@t '#(atom #f)))) (if aq1895@ls/false (apply (lambda () '#f) aq1895@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1893@t)))))))) aq1889@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1887@t))))))))) (aq1750@parent-rcd-code (lambda (aq1867@clause*) (let ((aq1869@t (aq174a@get-clause 'parent aq1867@clause*))) (let ((aq186b@ls/false (aqd7a@syntax-dispatch aq1869@t '(_ any)))) (if aq186b@ls/false (apply (lambda (aq186d@name) (list 'record-constructor-descriptor aq186d@name)) aq186b@ls/false) (let ((aq186f@t aq1869@t)) (let ((aq1871@ls/false (aqd7a@syntax-dispatch aq186f@t '#(atom #f)))) (if aq1871@ls/false (apply (lambda () (let ((aq1873@t (aq174a@get-clause 'parent-rtd aq1867@clause*))) (let ((aq1875@ls/false (aqd7a@syntax-dispatch aq1873@t '(_ any any)))) (if aq1875@ls/false (apply (lambda (aq1877@rtd aq1878@rcd) aq1878@rcd) aq1875@ls/false) (let ((aq187b@t aq1873@t)) (let ((aq187d@ls/false (aqd7a@syntax-dispatch aq187b@t '#(atom #f)))) (if aq187d@ls/false (apply (lambda () '#f) aq187d@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq187b@t)))))))) aq1871@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq186f@t))))))))) (aq1752@foo-rcd-code (lambda (aq185f@clause* aq1860@foo-rtd aq1861@protocol aq1862@parent-rcd-code) (list 'make-record-constructor-descriptor aq1860@foo-rtd aq1862@parent-rcd-code aq1861@protocol))) (aq1754@get-protocol-code (lambda (aq1853@clause*) (let ((aq1855@t (aq174a@get-clause 'protocol aq1853@clause*))) (let ((aq1857@ls/false (aqd7a@syntax-dispatch aq1855@t '(_ any)))) (if aq1857@ls/false (apply (lambda (aq1859@expr) aq1859@expr) aq1857@ls/false) (let ((aq185b@t aq1855@t)) (let ((aq185d@ls/false (aqd7a@syntax-dispatch aq185b@t '_))) (if aq185d@ls/false (apply (lambda () '#f) aq185d@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq185b@t))))))))) (aq1756@get-fields (lambda (aq1841@clause*) (let ((aq1843@t aq1841@clause*)) (let ((aq1845@ls/false (aqd7a@syntax-dispatch aq1843@t '()))) (if aq1845@ls/false (apply (lambda () '()) aq1845@ls/false) (let ((aq1847@t aq1843@t)) (let ((aq1849@ls/false (aqd7a@syntax-dispatch aq1847@t '((#(scheme-id fields) . each-any) . _)))) (if aq1849@ls/false (apply (lambda (aq184b@f*) aq184b@f*) aq1849@ls/false) (let ((aq184d@t aq1847@t)) (let ((aq184f@ls/false (aqd7a@syntax-dispatch aq184d@t '(_ . any)))) (if aq184f@ls/false (apply (lambda (aq1851@rest) (aq1756@get-fields aq1851@rest)) aq184f@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq184d@t)))))))))))) (aq1758@get-mutator-indices (lambda (aq1829@fields) (let aq182f@f ((aq182b@fields aq1829@fields) (aq182c@i '0)) (let ((aq1831@t aq182b@fields)) (let ((aq1833@ls/false (aqd7a@syntax-dispatch aq1831@t '()))) (if aq1833@ls/false (apply (lambda () '()) aq1833@ls/false) (let ((aq1835@t aq1831@t)) (let ((aq1837@ls/false (aqd7a@syntax-dispatch aq1835@t '((#(scheme-id mutable) . _) . any)))) (if aq1837@ls/false (apply (lambda (aq1839@rest) (cons aq182c@i (aq182f@f aq1839@rest (+ aq182c@i '1)))) aq1837@ls/false) (let ((aq183b@t aq1835@t)) (let ((aq183d@ls/false (aqd7a@syntax-dispatch aq183b@t '(_ . any)))) (if aq183d@ls/false (apply (lambda (aq183f@rest) (aq182f@f aq183f@rest (+ aq182c@i '1))) aq183d@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq183b@t))))))))))))) (aq175a@get-mutators (lambda (aq17ff@foo aq1800@fields) (letrec* ((aq1804@gen-name (lambda (aq1827@x) (aqe5e@datum->syntax aq17ff@foo (string->symbol (string-append (symbol->string (aqe60@syntax->datum aq17ff@foo)) '"-" (symbol->string (aqe60@syntax->datum aq1827@x)) '"-set!")))))) (let aq1807@f ((aq1805@fields aq1800@fields)) (let ((aq1809@t aq1805@fields)) (let ((aq180b@ls/false (aqd7a@syntax-dispatch aq1809@t '()))) (if aq180b@ls/false (apply (lambda () '()) aq180b@ls/false) (let ((aq180d@t aq1809@t)) (let ((aq180f@ls/false (aqd7a@syntax-dispatch aq180d@t '((#(scheme-id mutable) any any any) . any)))) (if aq180f@ls/false (apply (lambda (aq1811@name aq1812@accessor aq1813@mutator aq1814@rest) (cons aq1813@mutator (aq1807@f aq1814@rest))) aq180f@ls/false) (let ((aq1819@t aq180d@t)) (let ((aq181b@ls/false (aqd7a@syntax-dispatch aq1819@t '((#(scheme-id mutable) any) . any)))) (if aq181b@ls/false (apply (lambda (aq181d@name aq181e@rest) (cons (aq1804@gen-name aq181d@name) (aq1807@f aq181e@rest))) aq181b@ls/false) (let ((aq1821@t aq1819@t)) (let ((aq1823@ls/false (aqd7a@syntax-dispatch aq1821@t '(_ . any)))) (if aq1823@ls/false (apply (lambda (aq1825@rest) (aq1807@f aq1825@rest)) aq1823@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1821@t))))))))))))))))) (aq175c@get-accessors (lambda (aq17bb@foo aq17bc@fields) (letrec* ((aq17c0@gen-name (lambda (aq17fd@x) (aqe5e@datum->syntax aq17bb@foo (string->symbol (string-append (symbol->string (aqe60@syntax->datum aq17bb@foo)) '"-" (symbol->string (aqe60@syntax->datum aq17fd@x)))))))) (map (lambda (aq17c1@field) (let ((aq17c3@t aq17c1@field)) (let ((aq17c5@ls/false (aqd7a@syntax-dispatch aq17c3@t '(#(scheme-id mutable) any any any)))) (if (and aq17c5@ls/false (apply (lambda (aq17c7@name aq17c8@accessor aq17c9@mutator) (aqb73@id? aq17c8@accessor)) aq17c5@ls/false)) (apply (lambda (aq17cd@name aq17ce@accessor aq17cf@mutator) aq17ce@accessor) aq17c5@ls/false) (let ((aq17d3@t aq17c3@t)) (let ((aq17d5@ls/false (aqd7a@syntax-dispatch aq17d3@t '(#(scheme-id immutable) any any)))) (if (and aq17d5@ls/false (apply (lambda (aq17d7@name aq17d8@accessor) (aqb73@id? aq17d8@accessor)) aq17d5@ls/false)) (apply (lambda (aq17db@name aq17dc@accessor) aq17dc@accessor) aq17d5@ls/false) (let ((aq17df@t aq17d3@t)) (let ((aq17e1@ls/false (aqd7a@syntax-dispatch aq17df@t '(#(scheme-id mutable) any)))) (if (and aq17e1@ls/false (apply (lambda (aq17e3@name) (aqb73@id? aq17e3@name)) aq17e1@ls/false)) (apply (lambda (aq17e5@name) (aq17c0@gen-name aq17e5@name)) aq17e1@ls/false) (let ((aq17e7@t aq17df@t)) (let ((aq17e9@ls/false (aqd7a@syntax-dispatch aq17e7@t '(#(scheme-id immutable) any)))) (if (and aq17e9@ls/false (apply (lambda (aq17eb@name) (aqb73@id? aq17eb@name)) aq17e9@ls/false)) (apply (lambda (aq17ed@name) (aq17c0@gen-name aq17ed@name)) aq17e9@ls/false) (let ((aq17ef@t aq17e7@t)) (let ((aq17f1@ls/false (aqd7a@syntax-dispatch aq17ef@t 'any))) (if (and aq17f1@ls/false (apply (lambda (aq17f3@name) (aqb73@id? aq17f3@name)) aq17f1@ls/false)) (apply (lambda (aq17f5@name) (aq17c0@gen-name aq17f5@name)) aq17f1@ls/false) (let ((aq17f7@t aq17ef@t)) (let ((aq17f9@ls/false (aqd7a@syntax-dispatch aq17f7@t 'any))) (if aq17f9@ls/false (apply (lambda (aq17fb@others) (aqe5a@syntax-violation '#f '"invalid field spec" aq17c1@field)) aq17f9@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq17f7@t)))))))))))))))))))) aq17bc@fields)))) (aq175e@enumerate (lambda (aq17b3@ls) (let aq17b9@f ((aq17b5@ls aq17b3@ls) (aq17b6@i '0)) (if (null? aq17b5@ls) '() (cons aq17b6@i (aq17b9@f (cdr aq17b5@ls) (+ aq17b6@i '1))))))) (aq1760@do-define-record (lambda (aq178b@namespec aq178c@clause*) (let ((aq178f@foo (aq1744@get-record-name aq178b@namespec))) (let ((aq1791@foo-rtd (gensym))) (let ((aq1793@foo-rcd (gensym))) (let ((aq1795@protocol (gensym))) (let ((aq1797@make-foo (aq1746@get-record-constructor-name aq178b@namespec))) (let ((aq1799@fields (aq1756@get-fields aq178c@clause*))) (let ((aq179b@idx* (aq175e@enumerate aq1799@fields))) (let ((aq179d@foo-x* (aq175c@get-accessors aq178f@foo aq1799@fields))) (let ((aq179f@set-foo-x!* (aq175a@get-mutators aq178f@foo aq1799@fields))) (let ((aq17a1@set-foo-idx* (aq1758@get-mutator-indices aq1799@fields))) (let ((aq17a3@foo? (aq1748@get-record-predicate-name aq178b@namespec))) (let ((aq17a5@foo-rtd-code (aq174c@foo-rtd-code aq178f@foo aq178c@clause* (aq174e@parent-rtd-code aq178c@clause*)))) (let ((aq17a7@foo-rcd-code (aq1752@foo-rcd-code aq178c@clause* aq1791@foo-rtd aq1795@protocol (aq1750@parent-rcd-code aq178c@clause*)))) (let ((aq17a9@protocol-code (aq1754@get-protocol-code aq178c@clause*))) (aqd30@bless (cons 'begin (cons (list 'define aq1791@foo-rtd aq17a5@foo-rtd-code) (cons (list 'define aq1795@protocol aq17a9@protocol-code) (cons (list 'define aq1793@foo-rcd aq17a7@foo-rcd-code) (cons (list 'define-syntax aq178f@foo (list 'list ''$rtd (list 'syntax aq1791@foo-rtd) (list 'syntax aq1793@foo-rcd))) (cons (list 'define aq17a3@foo? (list 'record-predicate aq1791@foo-rtd)) (cons (list 'define aq1797@make-foo (list 'record-constructor aq1793@foo-rcd)) (append (map (lambda (aq17ab@foo-x aq17ac@idx) (list 'define aq17ab@foo-x (list 'record-accessor aq1791@foo-rtd aq17ac@idx))) aq179d@foo-x* aq179b@idx*) (map (lambda (aq17af@set-foo-x! aq17b0@idx) (list 'define aq17af@set-foo-x! (list 'record-mutator aq1791@foo-rtd aq17b0@idx))) aq179f@set-foo-x!* aq17a1@set-foo-idx*)))))))))))))))))))))))))) (aq1762@verify-clauses (lambda (aq176b@x aq176c@cls*) (letrec* ((aq1770@valid-kwds (map aqd30@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (aq1772@free-id-member? (lambda (aq1787@x aq1788@ls) (and (pair? aq1788@ls) (or (aqb79@free-id=? aq1787@x (car aq1788@ls)) (aq1772@free-id-member? aq1787@x (cdr aq1788@ls))))))) (let aq1777@f ((aq1773@cls* aq176c@cls*) (aq1774@seen* '())) (if (not (null? aq1773@cls*)) (let ((aq1779@t (car aq1773@cls*))) (let ((aq177b@ls/false (aqd7a@syntax-dispatch aq1779@t '(any . any)))) (if aq177b@ls/false (apply (lambda (aq177d@kwd aq177e@rest) (if (or (not (aqb73@id? aq177d@kwd)) (not (aq1772@free-id-member? aq177d@kwd aq1770@valid-kwds))) (aqe5a@syntax-violation '#f '"not a valid define-record-type keyword" aq177d@kwd) (if (aqb7f@bound-id-member? aq177d@kwd aq1774@seen*) (aqe5a@syntax-violation '#f '"duplicate use of keyword " aq176b@x aq177d@kwd) (aq1777@f (cdr aq1773@cls*) (cons aq177d@kwd aq1774@seen*))))) aq177b@ls/false) (let ((aq1781@t aq1779@t)) (let ((aq1783@ls/false (aqd7a@syntax-dispatch aq1781@t 'any))) (if aq1783@ls/false (apply (lambda (aq1785@cls) (aqe5a@syntax-violation '#f '"malformed define-record-type clause" aq1785@cls)) aq1783@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1781@t))))))) (void))))))) (let ((aq1763@t aq173f@x)) (let ((aq1765@ls/false (aqd7a@syntax-dispatch aq1763@t '(_ any . each-any)))) (if aq1765@ls/false (apply (lambda (aq1767@namespec aq1768@clause*) (begin (aq1762@verify-clauses aq173f@x aq1768@clause*) (aq1760@do-define-record aq1767@namespec aq1768@clause*))) aq1765@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1763@t))))))) (set! aq284a@aqd6e@define-record-type-macro aqd6e@define-record-type-macro) (set! aqd70@define-condition-type-macro (lambda (aq193b@x) (letrec* ((aq193e@mkname (lambda (aq196b@name aq196c@suffix) (aqe5e@datum->syntax aq196b@name (string->symbol (string-append (symbol->string (aqe60@syntax->datum aq196b@name)) aq196c@suffix)))))) (let ((aq193f@t aq193b@x)) (let ((aq1941@ls/false (aqd7a@syntax-dispatch aq193f@t '(any any any any any . #(each (any any)))))) (if (and aq1941@ls/false (apply (lambda (aq1943@ctxt aq1944@name aq1945@super aq1946@constructor aq1947@predicate aq1948@field* aq1949@accessor*) (and (aqb73@id? aq1944@name) (aqb73@id? aq1945@super) (aqb73@id? aq1946@constructor) (aqb73@id? aq1947@predicate) (for-all aqb73@id? aq1948@field*) (for-all aqb73@id? aq1949@accessor*))) aq1941@ls/false)) (apply (lambda (aq1951@ctxt aq1952@name aq1953@super aq1954@constructor aq1955@predicate aq1956@field* aq1957@accessor*) (let ((aq195f@aux-accessor* (map (lambda (aq1961@x) (gensym)) aq1957@accessor*))) (aqd30@bless (cons 'begin (cons (cons 'define-record-type (cons (list aq1952@name aq1954@constructor (gensym)) (cons (list 'parent aq1953@super) (cons (cons 'fields (map (lambda (aq1963@field aq1964@aux) (list 'immutable aq1963@field aq1964@aux)) aq1956@field* aq195f@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define aq1955@predicate (list 'condition-predicate (list 'record-type-descriptor aq1952@name))) (map (lambda (aq1967@accessor aq1968@aux) (list 'define aq1967@accessor (list 'condition-accessor (list 'record-type-descriptor aq1952@name) aq1968@aux))) aq1957@accessor* aq195f@aux-accessor*))))))) aq1941@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq193f@t))))))) (set! aq284b@aqd70@define-condition-type-macro aqd70@define-condition-type-macro) (set! aqd72@incorrect-usage-macro (lambda (aq196f@e) (aqe5a@syntax-violation '#f '"incorrect usage of auxiliary keyword" aq196f@e))) (set! aq284c@aqd72@incorrect-usage-macro aqd72@incorrect-usage-macro) (set! aqd74@parameterize-macro (lambda (aq1971@e) (let ((aq1973@t aq1971@e)) (let ((aq1975@ls/false (aqd7a@syntax-dispatch aq1973@t '(_ () any . each-any)))) (if aq1975@ls/false (apply (lambda (aq1977@b aq1978@b*) (aqd30@bless (cons 'let (cons '() (cons aq1977@b aq1978@b*))))) aq1975@ls/false) (let ((aq197b@t aq1973@t)) (let ((aq197d@ls/false (aqd7a@syntax-dispatch aq197b@t '(_ #(each (any any)) any . each-any)))) (if aq197d@ls/false (apply (lambda (aq197f@olhs* aq1980@orhs* aq1981@b aq1982@b*) (let ((aq1987@lhs* (aqe48@generate-temporaries aq197f@olhs*)) (aq1988@rhs* (aqe48@generate-temporaries aq1980@orhs*))) (aqd30@bless (cons (list 'lambda (append aq1987@lhs* aq1988@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (aq198b@lhs aq198c@rhs) (list 'let (list (list 't (list aq198b@lhs))) (list aq198b@lhs aq198c@rhs) (cons 'set! (cons aq198c@rhs '(t))))) aq1987@lhs* aq1988@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons aq1981@b aq1982@b*))) '(swap)))))) (append aq197f@olhs* aq1980@orhs*))))) aq197d@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq197b@t))))))))) (set! aq284d@aqd74@parameterize-macro aqd74@parameterize-macro) (set! aqd76@foreign-call-transformer (lambda (aq198f@e aq1990@r aq1991@mr) (let ((aq1995@t aq198f@e)) (let ((aq1997@ls/false (aqd7a@syntax-dispatch aq1995@t '(_ any . each-any)))) (if aq1997@ls/false (apply (lambda (aq1999@name aq199a@arg*) (cons 'foreign-call (cons (aqd9c@chi-expr aq1999@name aq1990@r aq1991@mr) (aqd98@chi-expr* aq199a@arg* aq1990@r aq1991@mr)))) aq1997@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1995@t)))))) (set! aq284e@aqd76@foreign-call-transformer aqd76@foreign-call-transformer) (set! aqd78@convert-pattern (lambda (aq199d@pattern aq199e@keys) (letrec* ((aq19a2@cvt* (lambda (aq1a41@p* aq1a42@n aq1a43@ids) (if (null? aq1a41@p*) (values '() aq1a43@ids) (call-with-values (lambda () (aq19a2@cvt* (cdr aq1a41@p*) aq1a42@n aq1a43@ids)) (lambda (aq1a4b@aq1a48 aq1a4c@aq1a4a) (let ((aq1a4f@ids aq1a4c@aq1a4a) (aq1a50@y aq1a4b@aq1a48)) (call-with-values (lambda () (aq19a4@cvt (car aq1a41@p*) aq1a42@n aq1a4f@ids)) (lambda (aq1a57@aq1a54 aq1a58@aq1a56) (let ((aq1a5b@ids aq1a58@aq1a56) (aq1a5c@x aq1a57@aq1a54)) (values (cons aq1a5c@x aq1a50@y) aq1a5b@ids)))))))))) (aq19a4@cvt (lambda (aq19a5@p aq19a6@n aq19a7@ids) (let ((aq19ab@t aq19a5@p)) (let ((aq19ad@ls/false (aqd7a@syntax-dispatch aq19ab@t 'any))) (if (and aq19ad@ls/false (apply (lambda (aq19af@id) (aqb73@id? aq19af@id)) aq19ad@ls/false)) (apply (lambda (aq19b1@id) (if (aqb7f@bound-id-member? aq19a5@p aq199e@keys) (values (vector 'free-id aq19a5@p) aq19a7@ids) (if (aqb79@free-id=? aq19a5@p (aqd02@scheme-stx '_)) (values '_ aq19a7@ids) (values 'any (cons (cons aq19a5@p aq19a6@n) aq19a7@ids))))) aq19ad@ls/false) (let ((aq19b3@t aq19ab@t)) (let ((aq19b5@ls/false (aqd7a@syntax-dispatch aq19b3@t '(any any)))) (if (and aq19b5@ls/false (apply (lambda (aq19b7@p aq19b8@dots) (aqd7c@ellipsis? aq19b8@dots)) aq19b5@ls/false)) (apply (lambda (aq19bb@p aq19bc@dots) (call-with-values (lambda () (aq19a4@cvt aq19bb@p (+ aq19a6@n '1) aq19a7@ids)) (lambda (aq19c3@aq19c0 aq19c4@aq19c2) (let ((aq19c7@ids aq19c4@aq19c2) (aq19c8@p aq19c3@aq19c0)) (values (if (eq? aq19c8@p 'any) 'each-any (vector 'each aq19c8@p)) aq19c7@ids))))) aq19b5@ls/false) (let ((aq19cb@t aq19b3@t)) (let ((aq19cd@ls/false (aqd7a@syntax-dispatch aq19cb@t '(any any . #(each+ any () any))))) (if (and aq19cd@ls/false (apply (lambda (aq19cf@x aq19d0@dots aq19d1@ys aq19d2@z) (aqd7c@ellipsis? aq19d0@dots)) aq19cd@ls/false)) (apply (lambda (aq19d7@x aq19d8@dots aq19d9@ys aq19da@z) (call-with-values (lambda () (aq19a4@cvt aq19da@z aq19a6@n aq19a7@ids)) (lambda (aq19e3@aq19e0 aq19e4@aq19e2) (let ((aq19e7@ids aq19e4@aq19e2) (aq19e8@z aq19e3@aq19e0)) (call-with-values (lambda () (aq19a2@cvt* aq19d9@ys aq19a6@n aq19e7@ids)) (lambda (aq19ef@aq19ec aq19f0@aq19ee) (let ((aq19f3@ids aq19f0@aq19ee) (aq19f4@ys aq19ef@aq19ec)) (call-with-values (lambda () (aq19a4@cvt aq19d7@x (+ aq19a6@n '1) aq19f3@ids)) (lambda (aq19fb@aq19f8 aq19fc@aq19fa) (let ((aq19ff@ids aq19fc@aq19fa) (aq1a00@x aq19fb@aq19f8)) (values (vector 'each+ aq1a00@x (reverse aq19f4@ys) aq19e8@z) aq19ff@ids))))))))))) aq19cd@ls/false) (let ((aq1a03@t aq19cb@t)) (let ((aq1a05@ls/false (aqd7a@syntax-dispatch aq1a03@t '(any . any)))) (if aq1a05@ls/false (apply (lambda (aq1a07@x aq1a08@y) (call-with-values (lambda () (aq19a4@cvt aq1a08@y aq19a6@n aq19a7@ids)) (lambda (aq1a0f@aq1a0c aq1a10@aq1a0e) (let ((aq1a13@ids aq1a10@aq1a0e) (aq1a14@y aq1a0f@aq1a0c)) (call-with-values (lambda () (aq19a4@cvt aq1a07@x aq19a6@n aq1a13@ids)) (lambda (aq1a1b@aq1a18 aq1a1c@aq1a1a) (let ((aq1a1f@ids aq1a1c@aq1a1a) (aq1a20@x aq1a1b@aq1a18)) (values (cons aq1a20@x aq1a14@y) aq1a1f@ids)))))))) aq1a05@ls/false) (let ((aq1a23@t aq1a03@t)) (let ((aq1a25@ls/false (aqd7a@syntax-dispatch aq1a23@t '()))) (if aq1a25@ls/false (apply (lambda () (values '() aq19a7@ids)) aq1a25@ls/false) (let ((aq1a27@t aq1a23@t)) (let ((aq1a29@ls/false (aqd7a@syntax-dispatch aq1a27@t '#(vector each-any)))) (if (and aq1a29@ls/false (apply (lambda (aq1a2b@p) (not (aqb3f@stx? aq1a2b@p))) aq1a29@ls/false)) (apply (lambda (aq1a2d@p) (call-with-values (lambda () (aq19a4@cvt aq1a2d@p aq19a6@n aq19a7@ids)) (lambda (aq1a33@aq1a30 aq1a34@aq1a32) (let ((aq1a37@ids aq1a34@aq1a32) (aq1a38@p aq1a33@aq1a30)) (values (vector 'vector aq1a38@p) aq1a37@ids))))) aq1a29@ls/false) (let ((aq1a3b@t aq1a27@t)) (let ((aq1a3d@ls/false (aqd7a@syntax-dispatch aq1a3b@t 'any))) (if aq1a3d@ls/false (apply (lambda (aq1a3f@datum) (values (vector 'atom (aqb87@stx->datum aq1a3f@datum)) aq19a7@ids)) aq1a3d@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1a3b@t))))))))))))))))))))))))) (aq19a4@cvt aq199d@pattern '0 '())))) (set! aq284f@aqd78@convert-pattern aqd78@convert-pattern) (set! aqd7a@syntax-dispatch (letrec* ((aq1a60@stx^ (lambda (aq1b3b@e aq1b3c@m* aq1b3d@s* aq1b3e@ae*) (if (and (null? aq1b3c@m*) (null? aq1b3d@s*) (null? aq1b3e@ae*)) aq1b3b@e (aqb5b@mkstx aq1b3b@e aq1b3c@m* aq1b3d@s* aq1b3e@ae*)))) (aq1a62@match-each (lambda (aq1b1b@e aq1b1c@p aq1b1d@m* aq1b1e@s* aq1b1f@ae*) (if (pair? aq1b1b@e) (let ((aq1b25@first (aq1a6e@match (car aq1b1b@e) aq1b1c@p aq1b1d@m* aq1b1e@s* aq1b1f@ae* '()))) (and aq1b25@first (let ((aq1b27@rest (aq1a62@match-each (cdr aq1b1b@e) aq1b1c@p aq1b1d@m* aq1b1e@s* aq1b1f@ae*))) (and aq1b27@rest (cons aq1b25@first aq1b27@rest))))) (if (null? aq1b1b@e) '() (if (aqb3f@stx? aq1b1b@e) (and (not (aqaf9@top-marked? aq1b1d@m*)) (call-with-values (lambda () (join-wraps aq1b1d@m* aq1b1e@s* aq1b1f@ae* aq1b1b@e)) (lambda (aq1b2f@aq1b2a aq1b30@aq1b2c aq1b31@aq1b2e) (let ((aq1b35@ae* aq1b31@aq1b2e) (aq1b36@s* aq1b30@aq1b2c) (aq1b37@m* aq1b2f@aq1b2a)) (aq1a62@match-each (aqb41@stx-expr aq1b1b@e) aq1b1c@p aq1b37@m* aq1b36@s* aq1b35@ae*))))) (if (aq6b7@aq589@annotation? aq1b1b@e) (aq1a62@match-each (aq6b9@aq58d@annotation-expression aq1b1b@e) aq1b1c@p aq1b1d@m* aq1b1e@s* aq1b1f@ae*) '#f)))))) (aq1a64@match-each+ (lambda (aq1adb@e aq1adc@x-pat aq1add@y-pat aq1ade@z-pat aq1adf@m* aq1ae0@s* aq1ae1@ae* aq1ae2@r) (let aq1af3@f ((aq1aeb@e aq1adb@e) (aq1aec@m* aq1adf@m*) (aq1aed@s* aq1ae0@s*) (aq1aee@ae* aq1ae1@ae*)) (if (pair? aq1aeb@e) (call-with-values (lambda () (aq1af3@f (cdr aq1aeb@e) aq1aec@m* aq1aed@s* aq1aee@ae*)) (lambda (aq1afb@aq1af6 aq1afc@aq1af8 aq1afd@aq1afa) (let ((aq1b01@r aq1afd@aq1afa) (aq1b02@y-pat aq1afc@aq1af8) (aq1b03@xr* aq1afb@aq1af6)) (if aq1b01@r (if (null? aq1b02@y-pat) (let ((aq1b07@xr (aq1a6e@match (car aq1aeb@e) aq1adc@x-pat aq1aec@m* aq1aed@s* aq1aee@ae* '()))) (if aq1b07@xr (values (cons aq1b07@xr aq1b03@xr*) aq1b02@y-pat aq1b01@r) (values '#f '#f '#f))) (values '() (cdr aq1b02@y-pat) (aq1a6e@match (car aq1aeb@e) (car aq1b02@y-pat) aq1aec@m* aq1aed@s* aq1aee@ae* aq1b01@r))) (values '#f '#f '#f))))) (if (aqb3f@stx? aq1aeb@e) (if (aqaf9@top-marked? aq1aec@m*) (values '() aq1add@y-pat (aq1a6e@match aq1aeb@e aq1ade@z-pat aq1aec@m* aq1aed@s* aq1aee@ae* aq1ae2@r)) (call-with-values (lambda () (join-wraps aq1aec@m* aq1aed@s* aq1aee@ae* aq1aeb@e)) (lambda (aq1b0f@aq1b0a aq1b10@aq1b0c aq1b11@aq1b0e) (let ((aq1b15@ae* aq1b11@aq1b0e) (aq1b16@s* aq1b10@aq1b0c) (aq1b17@m* aq1b0f@aq1b0a)) (aq1af3@f (aqb41@stx-expr aq1aeb@e) aq1b17@m* aq1b16@s* aq1b15@ae*))))) (if (aq6b7@aq589@annotation? aq1aeb@e) (aq1af3@f (aq6b9@aq58d@annotation-expression aq1aeb@e) aq1aec@m* aq1aed@s* aq1aee@ae*) (values '() aq1add@y-pat (aq1a6e@match aq1aeb@e aq1ade@z-pat aq1aec@m* aq1aed@s* aq1aee@ae* aq1ae2@r)))))))) (aq1a66@match-each-any (lambda (aq1abf@e aq1ac0@m* aq1ac1@s* aq1ac2@ae*) (if (pair? aq1abf@e) (let ((aq1ac7@l (aq1a66@match-each-any (cdr aq1abf@e) aq1ac0@m* aq1ac1@s* aq1ac2@ae*))) (and aq1ac7@l (cons (aq1a60@stx^ (car aq1abf@e) aq1ac0@m* aq1ac1@s* aq1ac2@ae*) aq1ac7@l))) (if (null? aq1abf@e) '() (if (aqb3f@stx? aq1abf@e) (and (not (aqaf9@top-marked? aq1ac0@m*)) (call-with-values (lambda () (join-wraps aq1ac0@m* aq1ac1@s* aq1ac2@ae* aq1abf@e)) (lambda (aq1acf@aq1aca aq1ad0@aq1acc aq1ad1@aq1ace) (let ((aq1ad5@ae* aq1ad1@aq1ace) (aq1ad6@s* aq1ad0@aq1acc) (aq1ad7@m* aq1acf@aq1aca)) (aq1a66@match-each-any (aqb41@stx-expr aq1abf@e) aq1ad7@m* aq1ad6@s* aq1ad5@ae*))))) (if (aq6b7@aq589@annotation? aq1abf@e) (aq1a66@match-each-any (aq6b9@aq58d@annotation-expression aq1abf@e) aq1ac0@m* aq1ac1@s* aq1ac2@ae*) '#f)))))) (aq1a68@match-empty (lambda (aq1ab9@p aq1aba@r) (if (null? aq1ab9@p) aq1aba@r (if (eq? aq1ab9@p '_) aq1aba@r (if (eq? aq1ab9@p 'any) (cons '() aq1aba@r) (if (pair? aq1ab9@p) (aq1a68@match-empty (car aq1ab9@p) (aq1a68@match-empty (cdr aq1ab9@p) aq1aba@r)) (if (eq? aq1ab9@p 'each-any) (cons '() aq1aba@r) (let ((aq1abd@t (vector-ref aq1ab9@p '0))) (if (memv aq1abd@t '(each)) (aq1a68@match-empty (vector-ref aq1ab9@p '1) aq1aba@r) (if (memv aq1abd@t '(each+)) (aq1a68@match-empty (vector-ref aq1ab9@p '1) (aq1a68@match-empty (reverse (vector-ref aq1ab9@p '2)) (aq1a68@match-empty (vector-ref aq1ab9@p '3) aq1aba@r))) (if (memv aq1abd@t '(free-id atom)) aq1aba@r (if (memv aq1abd@t '(scheme-id atom)) aq1aba@r (if (memv aq1abd@t '(vector)) (aq1a68@match-empty (vector-ref aq1ab9@p '1) aq1aba@r) (assertion-violation 'syntax-dispatch '"invalid pattern" aq1ab9@p)))))))))))))) (aq1a6a@combine (lambda (aq1ab5@r* aq1ab6@r) (if (null? (car aq1ab5@r*)) aq1ab6@r (cons (map car aq1ab5@r*) (aq1a6a@combine (map cdr aq1ab5@r*) aq1ab6@r))))) (aq1a6c@match* (lambda (aq1a91@e aq1a92@p aq1a93@m* aq1a94@s* aq1a95@ae* aq1a96@r) (if (null? aq1a92@p) (and (null? aq1a91@e) aq1a96@r) (if (pair? aq1a92@p) (and (pair? aq1a91@e) (aq1a6e@match (car aq1a91@e) (car aq1a92@p) aq1a93@m* aq1a94@s* aq1a95@ae* (aq1a6e@match (cdr aq1a91@e) (cdr aq1a92@p) aq1a93@m* aq1a94@s* aq1a95@ae* aq1a96@r))) (if (eq? aq1a92@p 'each-any) (let ((aq1a9d@l (aq1a66@match-each-any aq1a91@e aq1a93@m* aq1a94@s* aq1a95@ae*))) (and aq1a9d@l (cons aq1a9d@l aq1a96@r))) (let ((aq1a9f@t (vector-ref aq1a92@p '0))) (if (memv aq1a9f@t '(each)) (if (null? aq1a91@e) (aq1a68@match-empty (vector-ref aq1a92@p '1) aq1a96@r) (let ((aq1aa1@r* (aq1a62@match-each aq1a91@e (vector-ref aq1a92@p '1) aq1a93@m* aq1a94@s* aq1a95@ae*))) (and aq1aa1@r* (aq1a6a@combine aq1aa1@r* aq1a96@r)))) (if (memv aq1a9f@t '(free-id)) (and (symbol? aq1a91@e) (aqaf9@top-marked? aq1a93@m*) (aqb79@free-id=? (aq1a60@stx^ aq1a91@e aq1a93@m* aq1a94@s* aq1a95@ae*) (vector-ref aq1a92@p '1)) aq1a96@r) (if (memv aq1a9f@t '(scheme-id)) (and (symbol? aq1a91@e) (aqaf9@top-marked? aq1a93@m*) (aqb79@free-id=? (aq1a60@stx^ aq1a91@e aq1a93@m* aq1a94@s* aq1a95@ae*) (aqd02@scheme-stx (vector-ref aq1a92@p '1))) aq1a96@r) (if (memv aq1a9f@t '(each+)) (call-with-values (lambda () (aq1a64@match-each+ aq1a91@e (vector-ref aq1a92@p '1) (vector-ref aq1a92@p '2) (vector-ref aq1a92@p '3) aq1a93@m* aq1a94@s* aq1a95@ae* aq1a96@r)) (lambda (aq1aa9@aq1aa4 aq1aaa@aq1aa6 aq1aab@aq1aa8) (let ((aq1aaf@r aq1aab@aq1aa8) (aq1ab0@y-pat aq1aaa@aq1aa6) (aq1ab1@xr* aq1aa9@aq1aa4)) (and aq1aaf@r (null? aq1ab0@y-pat) (if (null? aq1ab1@xr*) (aq1a68@match-empty (vector-ref aq1a92@p '1) aq1aaf@r) (aq1a6a@combine aq1ab1@xr* aq1aaf@r)))))) (if (memv aq1a9f@t '(atom)) (and (fast-equal? (vector-ref aq1a92@p '1) (aqb85@strip aq1a91@e aq1a93@m*)) aq1a96@r) (if (memv aq1a9f@t '(vector)) (and (vector? aq1a91@e) (aq1a6e@match (vector->list aq1a91@e) (vector-ref aq1a92@p '1) aq1a93@m* aq1a94@s* aq1a95@ae* aq1a96@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" aq1a92@p))))))))))))) (aq1a6e@match (lambda (aq1a73@e aq1a74@p aq1a75@m* aq1a76@s* aq1a77@ae* aq1a78@r) (if (not aq1a78@r) '#f (if (eq? aq1a74@p '_) aq1a78@r (if (eq? aq1a74@p 'any) (cons (aq1a60@stx^ aq1a73@e aq1a75@m* aq1a76@s* aq1a77@ae*) aq1a78@r) (if (aqb3f@stx? aq1a73@e) (and (not (aqaf9@top-marked? aq1a75@m*)) (call-with-values (lambda () (join-wraps aq1a75@m* aq1a76@s* aq1a77@ae* aq1a73@e)) (lambda (aq1a85@aq1a80 aq1a86@aq1a82 aq1a87@aq1a84) (let ((aq1a8b@ae* aq1a87@aq1a84) (aq1a8c@s* aq1a86@aq1a82) (aq1a8d@m* aq1a85@aq1a80)) (aq1a6e@match (aqb41@stx-expr aq1a73@e) aq1a74@p aq1a8d@m* aq1a8c@s* aq1a8b@ae* aq1a78@r))))) (if (aq6b7@aq589@annotation? aq1a73@e) (aq1a6e@match (aq6b9@aq58d@annotation-expression aq1a73@e) aq1a74@p aq1a75@m* aq1a76@s* aq1a77@ae* aq1a78@r) (aq1a6c@match* aq1a73@e aq1a74@p aq1a75@m* aq1a76@s* aq1a77@ae* aq1a78@r))))))))) (lambda (aq1a6f@e aq1a70@p) (aq1a6e@match aq1a6f@e aq1a70@p '() '() '() '())))) (set! aq2850@aqd7a@syntax-dispatch aqd7a@syntax-dispatch) (set! aqd7c@ellipsis? (lambda (aq1b43@x) (and (aqb73@id? aq1b43@x) (aqb79@free-id=? aq1b43@x (aqd02@scheme-stx '...))))) (set! aq2851@aqd7c@ellipsis? aqd7c@ellipsis?) (set! aqd7e@underscore? (lambda (aq1b45@x) (and (aqb73@id? aq1b45@x) (aqb79@free-id=? aq1b45@x (aqd02@scheme-stx '_))))) (set! aq2852@aqd7e@underscore? aqd7e@underscore?) (set! aqd80@verify-literals (lambda (aq1b47@lits aq1b48@expr) (for-each (lambda (aq1b4b@x) (if (or (not (aqb73@id? aq1b4b@x)) (aqd7c@ellipsis? aq1b4b@x) (aqd7e@underscore? aq1b4b@x)) (aqe5a@syntax-violation '#f '"invalid literal" aq1b48@expr aq1b4b@x) (void))) aq1b47@lits))) (set! aq2853@aqd80@verify-literals aqd80@verify-literals) (set! aqd82@syntax-case-transformer (letrec* ((aq1b4e@build-dispatch-call (lambda (aq1bbf@pvars aq1bc0@expr aq1bc1@y aq1bc2@r aq1bc3@mr) (let ((aq1bc9@ids (map car aq1bbf@pvars)) (aq1bca@levels (map cdr aq1bbf@pvars))) (let ((aq1bcd@labels (map aqaff@gen-label aq1bc9@ids)) (aq1bce@new-vars (map aqafb@gen-lexical aq1bc9@ids))) (let ((aq1bd1@body (aqd9c@chi-expr (aqb5f@add-subst (aqb33@make-full-rib aq1bc9@ids aq1bcd@labels) aq1bc0@expr) (append (map (lambda (aq1bd3@label aq1bd4@var aq1bd5@level) (cons aq1bd3@label (aqb8d@make-binding 'syntax (cons aq1bd4@var aq1bd5@level)))) aq1bcd@labels aq1bce@new-vars (map cdr aq1bbf@pvars)) aq1bc2@r) aq1bc3@mr))) (list '(primitive apply) (aqad6@aqa08@build-lambda '#f aq1bce@new-vars aq1bd1@body) aq1bc1@y)))))) (aq1b50@invalid-ids-error (lambda (aq1bb3@id* aq1bb4@e aq1bb5@class) (let aq1bbd@find ((aq1bb9@id* aq1bb3@id*) (aq1bba@ok* '())) (if (null? aq1bb9@id*) (aqe5a@syntax-violation '#f '"invalid syntax" aq1bb4@e) (if (aqb73@id? (car aq1bb9@id*)) (if (aqb7f@bound-id-member? (car aq1bb9@id*) aq1bba@ok*) (aqe56@syntax-error (car aq1bb9@id*) '"duplicate " aq1bb5@class) (aq1bbd@find (cdr aq1bb9@id*) (cons (car aq1bb9@id*) aq1bba@ok*))) (aqe56@syntax-error (car aq1bb9@id*) '"invalid " aq1bb5@class)))))) (aq1b52@gen-clause (lambda (aq1b8b@x aq1b8c@keys aq1b8d@clauses aq1b8e@r aq1b8f@mr aq1b90@pat aq1b91@fender aq1b92@expr) (call-with-values (lambda () (aqd78@convert-pattern aq1b90@pat aq1b8c@keys)) (lambda (aq1b9f@aq1b9c aq1ba0@aq1b9e) (let ((aq1ba3@pvars aq1ba0@aq1b9e) (aq1ba4@p aq1b9f@aq1b9c)) (if (not (aqb7d@distinct-bound-ids? (map car aq1ba3@pvars))) (aq1b50@invalid-ids-error (map car aq1ba3@pvars) aq1b90@pat '"pattern variable") (if (not (for-all (lambda (aq1ba7@x) (not (aqd7c@ellipsis? (car aq1ba7@x)))) aq1ba3@pvars)) (aqe5a@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" aq1b90@pat) (let ((aq1ba9@y (aqafb@gen-lexical 'tmp))) (let ((aq1bab@test (if (eq? aq1b91@fender '#t) aq1ba9@y (let ((aq1bad@call (aq1b4e@build-dispatch-call aq1ba3@pvars aq1b91@fender aq1ba9@y aq1b8e@r aq1b8f@mr))) (list 'if aq1ba9@y aq1bad@call (list 'quote '#f)))))) (let ((aq1baf@conseq (aq1b4e@build-dispatch-call aq1ba3@pvars aq1b92@expr aq1ba9@y aq1b8e@r aq1b8f@mr))) (let ((aq1bb1@altern (aq1b54@gen-syntax-case aq1b8b@x aq1b8c@keys aq1b8d@clauses aq1b8e@r aq1b8f@mr))) (list (aqad6@aqa08@build-lambda '#f (list aq1ba9@y) (list 'if aq1bab@test aq1baf@conseq aq1bb1@altern)) (list '(primitive syntax-dispatch) aq1b8b@x (list 'quote aq1ba4@p)))))))))))))) (aq1b54@gen-syntax-case (lambda (aq1b69@x aq1b6a@keys aq1b6b@clauses aq1b6c@r aq1b6d@mr) (if (null? aq1b6b@clauses) (list '(primitive syntax-error) aq1b69@x) (let ((aq1b73@t (car aq1b6b@clauses))) (let ((aq1b75@ls/false (aqd7a@syntax-dispatch aq1b73@t '(any any)))) (if aq1b75@ls/false (apply (lambda (aq1b77@pat aq1b78@expr) (if (and (aqb73@id? aq1b77@pat) (not (aqb7f@bound-id-member? aq1b77@pat aq1b6a@keys)) (not (aqd7c@ellipsis? aq1b77@pat))) (if (aqb79@free-id=? aq1b77@pat (aqd02@scheme-stx '_)) (aqd9c@chi-expr aq1b78@expr aq1b6c@r aq1b6d@mr) (let ((aq1b7b@lab (aqaff@gen-label aq1b77@pat)) (aq1b7c@lex (aqafb@gen-lexical aq1b77@pat))) (let ((aq1b7f@body (aqd9c@chi-expr (aqb5f@add-subst (aqb33@make-full-rib (list aq1b77@pat) (list aq1b7b@lab)) aq1b78@expr) (cons (cons aq1b7b@lab (aqb8d@make-binding 'syntax (cons aq1b7c@lex '0))) aq1b6c@r) aq1b6d@mr))) (list (aqad6@aqa08@build-lambda '#f (list aq1b7c@lex) aq1b7f@body) aq1b69@x)))) (aq1b52@gen-clause aq1b69@x aq1b6a@keys (cdr aq1b6b@clauses) aq1b6c@r aq1b6d@mr aq1b77@pat '#t aq1b78@expr))) aq1b75@ls/false) (let ((aq1b81@t aq1b73@t)) (let ((aq1b83@ls/false (aqd7a@syntax-dispatch aq1b81@t '(any any any)))) (if aq1b83@ls/false (apply (lambda (aq1b85@pat aq1b86@fender aq1b87@expr) (aq1b52@gen-clause aq1b69@x aq1b6a@keys (cdr aq1b6b@clauses) aq1b6c@r aq1b6d@mr aq1b85@pat aq1b86@fender aq1b87@expr)) aq1b83@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1b81@t))))))))))) (lambda (aq1b55@e aq1b56@r aq1b57@mr) (let ((aq1b5b@t aq1b55@e)) (let ((aq1b5d@ls/false (aqd7a@syntax-dispatch aq1b5b@t '(_ any each-any . each-any)))) (if aq1b5d@ls/false (apply (lambda (aq1b5f@expr aq1b60@keys aq1b61@clauses) (begin (aqd80@verify-literals aq1b60@keys aq1b55@e) (let ((aq1b65@x (aqafb@gen-lexical 'tmp))) (let ((aq1b67@body (aq1b54@gen-syntax-case aq1b65@x aq1b60@keys aq1b61@clauses aq1b56@r aq1b57@mr))) (list (aqad6@aqa08@build-lambda '#f (list aq1b65@x) aq1b67@body) (aqd9c@chi-expr aq1b5f@expr aq1b56@r aq1b57@mr)))))) aq1b5d@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1b5b@t))))))) (set! aq2854@aqd82@syntax-case-transformer aqd82@syntax-case-transformer) (set! aqd84@ellipsis-map (lambda (aq1bd9@proc aq1bda@ls . aq1bdd@ls*) (letrec* ((aq1be0@who '...)) (begin (if (not (list? aq1bda@ls)) (assertion-violation aq1be0@who '"not a list" aq1bda@ls) (void)) (if (not (null? aq1bdd@ls*)) (let ((aq1be1@n (length aq1bda@ls))) (for-each (lambda (aq1be3@x) (begin (if (not (list? aq1be3@x)) (assertion-violation aq1be0@who '"not a list" aq1be3@x) (void)) (if (not (= (length aq1be3@x) aq1be1@n)) (assertion-violation aq1be0@who '"length mismatch" aq1bda@ls aq1be3@x) (void)))) aq1bdd@ls*)) (void)) (apply map aq1bd9@proc aq1bda@ls aq1bdd@ls*))))) (set! aq2855@aqd84@ellipsis-map aqd84@ellipsis-map) (set! aqd86@syntax-transformer (letrec* ((aq1be6@gen-syntax (lambda (aq1c5d@src aq1c5e@e aq1c5f@r aq1c60@maps aq1c61@ellipsis? aq1c62@vec?) (let ((aq1c69@t aq1c5e@e)) (let ((aq1c6b@ls/false (aqd7a@syntax-dispatch aq1c69@t 'any))) (if (and aq1c6b@ls/false (apply (lambda (aq1c6d@dots) (aq1c61@ellipsis? aq1c6d@dots)) aq1c6b@ls/false)) (apply (lambda (aq1c6f@dots) (aqe5a@syntax-violation '#f '"misplaced ellipsis in syntax form" aq1c5d@src)) aq1c6b@ls/false) (let ((aq1c71@t aq1c69@t)) (let ((aq1c73@ls/false (aqd7a@syntax-dispatch aq1c71@t 'any))) (if (and aq1c73@ls/false (apply (lambda (aq1c75@id) (aqb73@id? aq1c75@id)) aq1c73@ls/false)) (apply (lambda (aq1c77@id) (let ((aq1c79@label (aqb89@id->label aq1c5e@e))) (let ((aq1c7b@b (aqb8b@label->binding aq1c79@label aq1c5f@r))) (if (eq? (aqb8f@binding-type aq1c7b@b) 'syntax) (call-with-values (lambda () (let ((aq1c81@var.lev (aqb91@binding-value aq1c7b@b))) (aq1be8@gen-ref aq1c5d@src (car aq1c81@var.lev) (cdr aq1c81@var.lev) aq1c60@maps))) (lambda (aq1c83@aq1c7e aq1c84@aq1c80) (let ((aq1c87@maps aq1c84@aq1c80) (aq1c88@var aq1c83@aq1c7e)) (values (list 'ref aq1c88@var) aq1c87@maps)))) (values (list 'quote aq1c5e@e) aq1c60@maps))))) aq1c73@ls/false) (let ((aq1c8b@t aq1c71@t)) (let ((aq1c8d@ls/false (aqd7a@syntax-dispatch aq1c8b@t '(any any)))) (if (and aq1c8d@ls/false (apply (lambda (aq1c8f@dots aq1c90@e) (aq1c61@ellipsis? aq1c8f@dots)) aq1c8d@ls/false)) (apply (lambda (aq1c93@dots aq1c94@e) (if aq1c62@vec? (aqe5a@syntax-violation '#f '"misplaced ellipsis in syntax form" aq1c5d@src) (aq1be6@gen-syntax aq1c5d@src aq1c94@e aq1c5f@r aq1c60@maps (lambda (aq1c97@x) '#f) '#f))) aq1c8d@ls/false) (let ((aq1c99@t aq1c8b@t)) (let ((aq1c9b@ls/false (aqd7a@syntax-dispatch aq1c99@t '(any any . any)))) (if (and aq1c9b@ls/false (apply (lambda (aq1c9d@x aq1c9e@dots aq1c9f@y) (aq1c61@ellipsis? aq1c9e@dots)) aq1c9b@ls/false)) (apply (lambda (aq1ca3@x aq1ca4@dots aq1ca5@y) (let aq1cbb@f ((aq1ca9@y aq1ca5@y) (aq1caa@k (lambda (aq1cad@maps) (call-with-values (lambda () (aq1be6@gen-syntax aq1c5d@src aq1ca3@x aq1c5f@r (cons '() aq1cad@maps) aq1c61@ellipsis? '#f)) (lambda (aq1cb3@aq1cb0 aq1cb4@aq1cb2) (let ((aq1cb7@maps aq1cb4@aq1cb2) (aq1cb8@x aq1cb3@aq1cb0)) (if (null? (car aq1cb7@maps)) (aqe5a@syntax-violation '#f '"extra ellipsis in syntax form" aq1c5d@src) (values (aq1bee@gen-map aq1cb8@x (car aq1cb7@maps)) (cdr aq1cb7@maps))))))))) (let ((aq1cbd@t aq1ca9@y)) (let ((aq1cbf@ls/false (aqd7a@syntax-dispatch aq1cbd@t '()))) (if aq1cbf@ls/false (apply (lambda () (aq1caa@k aq1c60@maps)) aq1cbf@ls/false) (let ((aq1cc1@t aq1cbd@t)) (let ((aq1cc3@ls/false (aqd7a@syntax-dispatch aq1cc1@t '(any . any)))) (if (and aq1cc3@ls/false (apply (lambda (aq1cc5@dots aq1cc6@y) (aq1c61@ellipsis? aq1cc5@dots)) aq1cc3@ls/false)) (apply (lambda (aq1cc9@dots aq1cca@y) (aq1cbb@f aq1cca@y (lambda (aq1ccd@maps) (call-with-values (lambda () (aq1caa@k (cons '() aq1ccd@maps))) (lambda (aq1cd3@aq1cd0 aq1cd4@aq1cd2) (let ((aq1cd7@maps aq1cd4@aq1cd2) (aq1cd8@x aq1cd3@aq1cd0)) (if (null? (car aq1cd7@maps)) (aqe5a@syntax-violation '#f '"extra ellipsis in syntax form" aq1c5d@src) (values (aq1bec@gen-mappend aq1cd8@x (car aq1cd7@maps)) (cdr aq1cd7@maps))))))))) aq1cc3@ls/false) (let ((aq1cdb@t aq1cc1@t)) (let ((aq1cdd@ls/false (aqd7a@syntax-dispatch aq1cdb@t '_))) (if aq1cdd@ls/false (apply (lambda () (call-with-values (lambda () (aq1be6@gen-syntax aq1c5d@src aq1ca9@y aq1c5f@r aq1c60@maps aq1c61@ellipsis? aq1c62@vec?)) (lambda (aq1ce3@aq1ce0 aq1ce4@aq1ce2) (let ((aq1ce7@maps aq1ce4@aq1ce2) (aq1ce8@y aq1ce3@aq1ce0)) (call-with-values (lambda () (aq1caa@k aq1ce7@maps)) (lambda (aq1cef@aq1cec aq1cf0@aq1cee) (let ((aq1cf3@maps aq1cf0@aq1cee) (aq1cf4@x aq1cef@aq1cec)) (values (aq1bea@gen-append aq1cf4@x aq1ce8@y) aq1cf3@maps)))))))) aq1cdd@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1cdb@t)))))))))))) aq1c9b@ls/false) (let ((aq1cf7@t aq1c99@t)) (let ((aq1cf9@ls/false (aqd7a@syntax-dispatch aq1cf7@t '(any . any)))) (if aq1cf9@ls/false (apply (lambda (aq1cfb@x aq1cfc@y) (call-with-values (lambda () (aq1be6@gen-syntax aq1c5d@src aq1cfb@x aq1c5f@r aq1c60@maps aq1c61@ellipsis? '#f)) (lambda (aq1d03@aq1d00 aq1d04@aq1d02) (let ((aq1d07@maps aq1d04@aq1d02) (aq1d08@xnew aq1d03@aq1d00)) (call-with-values (lambda () (aq1be6@gen-syntax aq1c5d@src aq1cfc@y aq1c5f@r aq1d07@maps aq1c61@ellipsis? aq1c62@vec?)) (lambda (aq1d0f@aq1d0c aq1d10@aq1d0e) (let ((aq1d13@maps aq1d10@aq1d0e) (aq1d14@ynew aq1d0f@aq1d0c)) (values (aq1bf0@gen-cons aq1c5e@e aq1cfb@x aq1cfc@y aq1d08@xnew aq1d14@ynew) aq1d13@maps)))))))) aq1cf9@ls/false) (let ((aq1d17@t aq1cf7@t)) (let ((aq1d19@ls/false (aqd7a@syntax-dispatch aq1d17@t '#(vector each-any)))) (if aq1d19@ls/false (apply (lambda (aq1d1b@ls) (call-with-values (lambda () (aq1be6@gen-syntax aq1c5d@src aq1d1b@ls aq1c5f@r aq1c60@maps aq1c61@ellipsis? '#t)) (lambda (aq1d21@aq1d1e aq1d22@aq1d20) (let ((aq1d25@maps aq1d22@aq1d20) (aq1d26@lsnew aq1d21@aq1d1e)) (values (aq1bf2@gen-vector aq1c5e@e aq1d1b@ls aq1d26@lsnew) aq1d25@maps))))) aq1d19@ls/false) (let ((aq1d29@t aq1d17@t)) (let ((aq1d2b@ls/false (aqd7a@syntax-dispatch aq1d29@t '_))) (if aq1d2b@ls/false (apply (lambda () (values (list 'quote aq1c5e@e) aq1c60@maps)) aq1d2b@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1d29@t)))))))))))))))))))))))) (aq1be8@gen-ref (lambda (aq1c43@src aq1c44@var aq1c45@level aq1c46@maps) (if (= aq1c45@level '0) (values aq1c44@var aq1c46@maps) (if (null? aq1c46@maps) (aqe5a@syntax-violation '#f '"missing ellipsis in syntax form" aq1c43@src) (call-with-values (lambda () (aq1be8@gen-ref aq1c43@src aq1c44@var (- aq1c45@level '1) (cdr aq1c46@maps))) (lambda (aq1c4f@aq1c4c aq1c50@aq1c4e) (let ((aq1c53@outer-maps aq1c50@aq1c4e) (aq1c54@outer-var aq1c4f@aq1c4c)) (let ((aq1c57@t (assq aq1c54@outer-var (car aq1c46@maps)))) (if aq1c57@t ((lambda (aq1c59@b) (values (cdr aq1c59@b) aq1c46@maps)) aq1c57@t) (let ((aq1c5b@inner-var (aqafb@gen-lexical 'tmp))) (values aq1c5b@inner-var (cons (cons (cons aq1c54@outer-var aq1c5b@inner-var) (car aq1c46@maps)) aq1c53@outer-maps)))))))))))) (aq1bea@gen-append (lambda (aq1c3f@x aq1c40@y) (if (fast-equal? aq1c40@y ''()) aq1c3f@x (list 'append aq1c3f@x aq1c40@y)))) (aq1bec@gen-mappend (lambda (aq1c3b@e aq1c3c@map-env) (list 'apply '(primitive append) (aq1bee@gen-map aq1c3b@e aq1c3c@map-env)))) (aq1bee@gen-map (lambda (aq1c29@e aq1c2a@map-env) (let ((aq1c2d@formals (map cdr aq1c2a@map-env)) (aq1c2e@actuals (map (lambda (aq1c31@x) (list 'ref (car aq1c31@x))) aq1c2a@map-env))) (if (eq? (car aq1c29@e) 'ref) (car aq1c2e@actuals) (if (for-all (lambda (aq1c33@x) (and (eq? (car aq1c33@x) 'ref) (memq (cadr aq1c33@x) aq1c2d@formals))) (cdr aq1c29@e)) (let ((aq1c35@args (map (let ((aq1c37@r (map cons aq1c2d@formals aq1c2e@actuals))) (lambda (aq1c39@x) (cdr (assq (cadr aq1c39@x) aq1c37@r)))) (cdr aq1c29@e)))) (cons 'map (cons (list 'primitive (car aq1c29@e)) aq1c35@args))) (cons* 'map (list 'lambda aq1c2d@formals aq1c29@e) aq1c2e@actuals)))))) (aq1bf0@gen-cons (lambda (aq1c19@e aq1c1a@x aq1c1b@y aq1c1c@xnew aq1c1d@ynew) (let ((aq1c23@t (car aq1c1d@ynew))) (if (memv aq1c23@t '(quote)) (if (eq? (car aq1c1c@xnew) 'quote) (let ((aq1c25@xnew (cadr aq1c1c@xnew)) (aq1c26@ynew (cadr aq1c1d@ynew))) (if (and (eq? aq1c25@xnew aq1c1a@x) (eq? aq1c26@ynew aq1c1b@y)) (list 'quote aq1c19@e) (list 'quote (cons aq1c25@xnew aq1c26@ynew)))) (if (null? (cadr aq1c1d@ynew)) (list 'list aq1c1c@xnew) (list 'cons aq1c1c@xnew aq1c1d@ynew))) (if (memv aq1c23@t '(list)) (cons 'list (cons aq1c1c@xnew (cdr aq1c1d@ynew))) (list 'cons aq1c1c@xnew aq1c1d@ynew)))))) (aq1bf2@gen-vector (lambda (aq1c13@e aq1c14@ls aq1c15@lsnew) (if (eq? (car aq1c15@lsnew) 'quote) (if (eq? (cadr aq1c15@lsnew) aq1c14@ls) (list 'quote aq1c13@e) (list 'quote (list->vector (cadr aq1c15@lsnew)))) (if (eq? (car aq1c15@lsnew) 'list) (cons 'vector (cdr aq1c15@lsnew)) (list 'list->vector aq1c15@lsnew))))) (aq1bf4@regen (lambda (aq1c0d@x) (let ((aq1c0f@t (car aq1c0d@x))) (if (memv aq1c0f@t '(ref)) (cadr aq1c0d@x) (if (memv aq1c0f@t '(primitive)) (list 'primitive (cadr aq1c0d@x)) (if (memv aq1c0f@t '(quote)) (list 'quote (cadr aq1c0d@x)) (if (memv aq1c0f@t '(lambda)) (aqad6@aqa08@build-lambda '#f (cadr aq1c0d@x) (aq1bf4@regen (caddr aq1c0d@x))) (if (memv aq1c0f@t '(map)) (let ((aq1c11@ls (map aq1bf4@regen (cdr aq1c0d@x)))) (cons '(primitive ellipsis-map) aq1c11@ls)) (cons (list 'primitive (car aq1c0d@x)) (map aq1bf4@regen (cdr aq1c0d@x)))))))))))) (lambda (aq1bf5@e aq1bf6@r aq1bf7@mr) (let ((aq1bfb@t aq1bf5@e)) (let ((aq1bfd@ls/false (aqd7a@syntax-dispatch aq1bfb@t '(_ any)))) (if aq1bfd@ls/false (apply (lambda (aq1bff@x) (call-with-values (lambda () (aq1be6@gen-syntax aq1bf5@e aq1bff@x aq1bf6@r '() aqd7c@ellipsis? '#f)) (lambda (aq1c05@aq1c02 aq1c06@aq1c04) (let ((aq1c09@maps aq1c06@aq1c04) (aq1c0a@e aq1c05@aq1c02)) (aq1bf4@regen aq1c0a@e))))) aq1bfd@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1bfb@t))))))) (set! aq2856@aqd86@syntax-transformer aqd86@syntax-transformer) (set! aqd88@core-macro-transformer (lambda (aq1d2d@name) (let ((aq1d2f@t aq1d2d@name)) (if (memv aq1d2f@t '(quote)) aqd2a@quote-transformer (if (memv aq1d2f@t '(lambda)) aqd2e@lambda-transformer (if (memv aq1d2f@t '(case-lambda)) aqd2c@case-lambda-transformer (if (memv aq1d2f@t '(letrec)) aqd12@letrec-transformer (if (memv aq1d2f@t '(letrec*)) aqd14@letrec*-transformer (if (memv aq1d2f@t '(let)) aqd10@let-transformer (if (memv aq1d2f@t '(if)) aqd22@if-transformer (if (memv aq1d2f@t '(and)) aqd24@and-transformer (if (memv aq1d2f@t '(or)) aqd26@or-transformer (if (memv aq1d2f@t '(foreign-call)) aqd76@foreign-call-transformer (if (memv aq1d2f@t '(syntax-case)) aqd82@syntax-case-transformer (if (memv aq1d2f@t '(syntax)) aqd86@syntax-transformer (if (memv aq1d2f@t '(type-descriptor)) aqd18@type-descriptor-transformer (if (memv aq1d2f@t '(record-type-descriptor)) aqd1a@record-type-descriptor-transformer (if (memv aq1d2f@t '(record-constructor-descriptor)) aqd1c@record-constructor-descriptor-transformer (if (memv aq1d2f@t '(fluid-let-syntax)) aqd16@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" aq1d2d@name)))))))))))))))))))) (set! aq2857@aqd88@core-macro-transformer aqd88@core-macro-transformer) (set! aqd8a@symbol-macro (lambda (aq1d31@x aq1d32@set) (let ((aq1d35@t aq1d31@x)) (let ((aq1d37@ls/false (aqd7a@syntax-dispatch aq1d35@t '(_ any)))) (if (and aq1d37@ls/false (apply (lambda (aq1d39@name) (and (aqb73@id? aq1d39@name) (memq (aqb75@id->sym aq1d39@name) aq1d32@set))) aq1d37@ls/false)) (apply (lambda (aq1d3b@name) (aqd30@bless (list 'quote aq1d3b@name))) aq1d37@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1d35@t)))))) (set! aq2858@aqd8a@symbol-macro aqd8a@symbol-macro) (set! aqd8c@macro-transformer (lambda (aq1d3d@x) (if (procedure? aq1d3d@x) aq1d3d@x (if (symbol? aq1d3d@x) (let ((aq1d3f@t aq1d3d@x)) (if (memv aq1d3f@t '(define-record-type)) aqd6e@define-record-type-macro (if (memv aq1d3f@t '(define-struct)) aqd6c@define-struct-macro (if (memv aq1d3f@t '(include)) aqd62@include-macro (if (memv aq1d3f@t '(cond)) aqd5e@cond-macro (if (memv aq1d3f@t '(let)) aqd36@let-macro (if (memv aq1d3f@t '(do)) aqd56@do-macro (if (memv aq1d3f@t '(or)) aqd5a@or-macro (if (memv aq1d3f@t '(and)) aqd5c@and-macro (if (memv aq1d3f@t '(let*)) aqd58@let*-macro (if (memv aq1d3f@t '(let-values)) aqd38@let-values-macro (if (memv aq1d3f@t '(let*-values)) aqd3a@let*-values-macro (if (memv aq1d3f@t '(syntax-rules)) aqd66@syntax-rules-macro (if (memv aq1d3f@t '(quasiquote)) aqd68@quasiquote-macro (if (memv aq1d3f@t '(quasisyntax)) aqd6a@quasisyntax-macro (if (memv aq1d3f@t '(with-syntax)) aqd32@with-syntax-macro (if (memv aq1d3f@t '(when)) aqd1e@when-macro (if (memv aq1d3f@t '(unless)) aqd20@unless-macro (if (memv aq1d3f@t '(case)) aqd28@case-macro (if (memv aq1d3f@t '(identifier-syntax)) aqd54@identifier-syntax-macro (if (memv aq1d3f@t '(time)) aqd4c@time-macro (if (memv aq1d3f@t '(delay)) aqd4e@delay-macro (if (memv aq1d3f@t '(assert)) aqd50@assert-macro (if (memv aq1d3f@t '(endianness)) aqd52@endianness-macro (if (memv aq1d3f@t '(guard)) aqd48@guard-macro (if (memv aq1d3f@t '(define-enumeration)) aqd4a@define-enumeration-macro (if (memv aq1d3f@t '(trace-lambda)) aqd3c@trace-lambda-macro (if (memv aq1d3f@t '(trace-define)) aqd3e@trace-define-macro (if (memv aq1d3f@t '(trace-define-syntax)) aqd40@trace-define-syntax-macro (if (memv aq1d3f@t '(trace-let-syntax)) aqd44@trace-let-syntax-macro (if (memv aq1d3f@t '(trace-letrec-syntax)) aqd46@trace-letrec-syntax-macro (if (memv aq1d3f@t '(define-condition-type)) aqd70@define-condition-type-macro (if (memv aq1d3f@t '(parameterize)) aqd74@parameterize-macro (if (memv aq1d3f@t '(include-into)) aqd64@include-into-macro (if (memv aq1d3f@t '(eol-style)) (lambda (aq1d41@x) (aqd8a@symbol-macro aq1d41@x '(none lf cr crlf nel crnel ls))) (if (memv aq1d3f@t '(error-handling-mode)) (lambda (aq1d43@x) (aqd8a@symbol-macro aq1d43@x '(ignore raise replace))) (if (memv aq1d3f@t '(buffer-mode)) (lambda (aq1d45@x) (aqd8a@symbol-macro aq1d45@x '(none line block))) (if (memv aq1d3f@t '(file-options)) aqaee@file-options-macro (if (memv aq1d3f@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) aqd72@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" aq1d3d@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" aq1d3d@x))))) (set! aq2859@aqd8c@macro-transformer aqd8c@macro-transformer) (set! aqd8e@local-macro-transformer (lambda (aq1d47@x) (car aq1d47@x))) (set! aq285a@aqd8e@local-macro-transformer aqd8e@local-macro-transformer) (set! aqd90@do-macro-call (lambda (aq1d49@transformer aq1d4a@expr) (let ((aq1d4d@out (aq1d49@transformer (aqb5d@add-mark aqb57@anti-mark aq1d4a@expr '#f)))) (begin (let aq1d51@f ((aq1d4f@x aq1d4d@out)) (if (not (aqb3f@stx? aq1d4f@x)) (if (pair? aq1d4f@x) (begin (aq1d51@f (car aq1d4f@x)) (aq1d51@f (cdr aq1d4f@x))) (if (vector? aq1d4f@x) (vector-for-each aq1d51@f aq1d4f@x) (if (symbol? aq1d4f@x) (aqe5a@syntax-violation '#f '"raw symbol encountered in output of macro" aq1d4a@expr aq1d4f@x) (void)))) (void))) (aqb5d@add-mark (aqb55@gen-mark) aq1d4d@out aq1d4a@expr))))) (set! aq285b@aqd90@do-macro-call aqd90@do-macro-call) (set! aqd92@chi-macro (lambda (aq1d53@p aq1d54@e) (aqd90@do-macro-call (aqd8c@macro-transformer aq1d53@p) aq1d54@e))) (set! aq285c@aqd92@chi-macro aqd92@chi-macro) (set! aqd94@chi-local-macro (lambda (aq1d57@p aq1d58@e) (aqd90@do-macro-call (aqd8e@local-macro-transformer aq1d57@p) aq1d58@e))) (set! aq285d@aqd94@chi-local-macro aqd94@chi-local-macro) (set! aqd96@chi-global-macro (lambda (aq1d5b@p aq1d5c@e) (let ((aq1d5f@lib (car aq1d5b@p)) (aq1d60@loc (cdr aq1d5b@p))) (begin (aq990@aq7df@visit-library aq1d5f@lib) (let ((aq1d63@x (symbol-value aq1d60@loc))) (let ((aq1d65@transformer (if (procedure? aq1d63@x) aq1d63@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" aq1d63@x)))) (aqd90@do-macro-call aq1d65@transformer aq1d5c@e))))))) (set! aq285e@aqd96@chi-global-macro aqd96@chi-global-macro) (set! aqd98@chi-expr* (lambda (aq1d67@e* aq1d68@r aq1d69@mr) (if (null? aq1d67@e*) '() (let ((aq1d6d@e (aqd9c@chi-expr (car aq1d67@e*) aq1d68@r aq1d69@mr))) (cons aq1d6d@e (aqd98@chi-expr* (cdr aq1d67@e*) aq1d68@r aq1d69@mr)))))) (set! aq285f@aqd98@chi-expr* aqd98@chi-expr*) (set! aqd9a@chi-application (lambda (aq1d6f@e aq1d70@r aq1d71@mr) (let ((aq1d75@t aq1d6f@e)) (let ((aq1d77@ls/false (aqd7a@syntax-dispatch aq1d75@t '(any . each-any)))) (if aq1d77@ls/false (apply (lambda (aq1d79@rator aq1d7a@rands) (let ((aq1d7d@rator (aqd9c@chi-expr aq1d79@rator aq1d70@r aq1d71@mr))) (cons aq1d7d@rator (aqd98@chi-expr* aq1d7a@rands aq1d70@r aq1d71@mr)))) aq1d77@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1d75@t)))))) (set! aq2860@aqd9a@chi-application aqd9a@chi-application) (set! aqd9c@chi-expr (lambda (aq1d7f@e aq1d80@r aq1d81@mr) (call-with-values (lambda () (aqb95@syntax-type aq1d7f@e aq1d80@r)) (lambda (aq1d8b@aq1d86 aq1d8c@aq1d88 aq1d8d@aq1d8a) (let ((aq1d91@kwd aq1d8d@aq1d8a) (aq1d92@value aq1d8c@aq1d88) (aq1d93@type aq1d8b@aq1d86)) (let ((aq1d97@t aq1d93@type)) (if (memv aq1d97@t '(core-macro)) (let ((aq1d99@transformer (aqd88@core-macro-transformer aq1d92@value))) (aq1d99@transformer aq1d7f@e aq1d80@r aq1d81@mr)) (if (memv aq1d97@t '(global)) (let ((aq1d9b@lib (car aq1d92@value))) (let ((aq1d9d@loc (cdr aq1d92@value))) (begin ((aqde2@inv-collector) aq1d9b@lib) aq1d9d@loc))) (if (memv aq1d97@t '(core-prim)) (let ((aq1d9f@name aq1d92@value)) (list 'primitive aq1d9f@name)) (if (memv aq1d97@t '(call)) (aqd9a@chi-application aq1d7f@e aq1d80@r aq1d81@mr) (if (memv aq1d97@t '(lexical)) (let ((aq1da1@lex (aqd04@lexical-var aq1d92@value))) aq1da1@lex) (if (memv aq1d97@t '(global-macro global-macro!)) (aqd9c@chi-expr (aqd96@chi-global-macro aq1d92@value aq1d7f@e) aq1d80@r aq1d81@mr) (if (memv aq1d97@t '(local-macro local-macro!)) (aqd9c@chi-expr (aqd94@chi-local-macro aq1d92@value aq1d7f@e) aq1d80@r aq1d81@mr) (if (memv aq1d97@t '(macro macro!)) (aqd9c@chi-expr (aqd92@chi-macro aq1d92@value aq1d7f@e) aq1d80@r aq1d81@mr) (if (memv aq1d97@t '(constant)) (let ((aq1da3@datum aq1d92@value)) (list 'quote aq1da3@datum)) (if (memv aq1d97@t '(set!)) (aqd9e@chi-set! aq1d7f@e aq1d80@r aq1d81@mr) (if (memv aq1d97@t '(begin)) (let ((aq1da5@t aq1d7f@e)) (let ((aq1da7@ls/false (aqd7a@syntax-dispatch aq1da5@t '(_ any . each-any)))) (if aq1da7@ls/false (apply (lambda (aq1da9@x aq1daa@x*) (aqad8@aqa38@build-sequence '#f (aqd98@chi-expr* (cons aq1da9@x aq1daa@x*) aq1d80@r aq1d81@mr))) aq1da7@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1da5@t)))) (if (memv aq1d97@t '(let-syntax letrec-syntax)) (let ((aq1dad@t aq1d7f@e)) (let ((aq1daf@ls/false (aqd7a@syntax-dispatch aq1dad@t '(_ #(each (any any)) any . each-any)))) (if (and aq1daf@ls/false (apply (lambda (aq1db1@xlhs* aq1db2@xrhs* aq1db3@xbody aq1db4@xbody*) (if (not (aqb7b@valid-bound-ids? aq1db1@xlhs*)) (aqe5a@syntax-violation '#f '"invalid identifiers" aq1d7f@e) (void))) aq1daf@ls/false)) (apply (lambda (aq1db9@xlhs* aq1dba@xrhs* aq1dbb@xbody aq1dbc@xbody*) (let ((aq1dc1@xlab* (map aqaff@gen-label aq1db9@xlhs*))) (let ((aq1dc3@xrib (aqb33@make-full-rib aq1db9@xlhs* aq1dc1@xlab*))) (let ((aq1dc5@xb* (map (lambda (aq1dc7@x) (aqbab@make-eval-transformer (aqdd4@expand-transformer (if (eq? aq1d93@type 'let-syntax) aq1dc7@x (aqb5f@add-subst aq1dc3@xrib aq1dc7@x)) aq1d81@mr))) aq1dba@xrhs*))) (aqad8@aqa38@build-sequence '#f (aqd98@chi-expr* (map (lambda (aq1dc9@x) (aqb5f@add-subst aq1dc3@xrib aq1dc9@x)) (cons aq1dbb@xbody aq1dbc@xbody*)) (append (map cons aq1dc1@xlab* aq1dc5@xb*) aq1d80@r) (append (map cons aq1dc1@xlab* aq1dc5@xb*) aq1d81@mr))))))) aq1daf@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1dad@t)))) (if (memv aq1d97@t '(displaced-lexical)) (aqe5a@syntax-violation '#f '"identifier out of context" aq1d7f@e) (if (memv aq1d97@t '(syntax)) (aqe5a@syntax-violation '#f '"reference to pattern variable outside a syntax form" aq1d7f@e) (if (memv aq1d97@t '(define define-syntax module import library)) (aqe5a@syntax-violation '#f (string-append (let ((aq1dcb@t aq1d93@type)) (if (memv aq1dcb@t '(define)) '"a definition" (if (memv aq1dcb@t '(define-syntax)) '"a define-syntax" (if (memv aq1dcb@t '(module)) '"a module definition" (if (memv aq1dcb@t '(library)) '"a library definition" (if (memv aq1dcb@t '(import)) '"an import declaration" (if (memv aq1dcb@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") aq1d7f@e) (if (memv aq1d97@t '(mutable)) (aqe5a@syntax-violation '#f '"attempt to reference an unexportable variable" aq1d7f@e) (aqe5a@syntax-violation '#f '"invalid expression" aq1d7f@e))))))))))))))))))))))) (set! aq2861@aqd9c@chi-expr aqd9c@chi-expr) (set! aqd9e@chi-set! (lambda (aq1dcd@e aq1dce@r aq1dcf@mr) (let ((aq1dd3@t aq1dcd@e)) (let ((aq1dd5@ls/false (aqd7a@syntax-dispatch aq1dd3@t '(_ any any)))) (if (and aq1dd5@ls/false (apply (lambda (aq1dd7@x aq1dd8@v) (aqb73@id? aq1dd7@x)) aq1dd5@ls/false)) (apply (lambda (aq1ddb@x aq1ddc@v) (call-with-values (lambda () (aqb95@syntax-type aq1ddb@x aq1dce@r)) (lambda (aq1de5@aq1de0 aq1de6@aq1de2 aq1de7@aq1de4) (let ((aq1deb@kwd aq1de7@aq1de4) (aq1dec@value aq1de6@aq1de2) (aq1ded@type aq1de5@aq1de0)) (let ((aq1df1@t aq1ded@type)) (if (memv aq1df1@t '(lexical)) (begin (aqd08@set-lexical-mutable! aq1dec@value '#t) (list 'set! (aqd04@lexical-var aq1dec@value) (aqd9c@chi-expr aq1ddc@v aq1dce@r aq1dcf@mr))) (if (memv aq1df1@t '(core-prim)) (aqe5a@syntax-violation '#f '"cannot modify imported core primitive" aq1dcd@e) (if (memv aq1df1@t '(global)) (aqe5a@syntax-violation '#f '"attempt to modify imported binding" aq1dcd@e) (if (memv aq1df1@t '(global-macro!)) (aqd9c@chi-expr (aqd96@chi-global-macro aq1dec@value aq1dcd@e) aq1dce@r aq1dcf@mr) (if (memv aq1df1@t '(local-macro!)) (aqd9c@chi-expr (aqd94@chi-local-macro aq1dec@value aq1dcd@e) aq1dce@r aq1dcf@mr) (if (memv aq1df1@t '(mutable)) (aqe5a@syntax-violation '#f '"attempt to assign to an unexportable variable" aq1dcd@e) (aqe5a@syntax-violation '#f '"invalid syntax" aq1dcd@e)))))))))))) aq1dd5@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1dd3@t)))))) (set! aq2862@aqd9e@chi-set! aqd9e@chi-set!) (set! aqda0@verify-formals (lambda (aq1df3@fmls aq1df4@stx) (let ((aq1df7@t aq1df3@fmls)) (let ((aq1df9@ls/false (aqd7a@syntax-dispatch aq1df7@t 'each-any))) (if aq1df9@ls/false (apply (lambda (aq1dfb@x*) (if (not (aqb7b@valid-bound-ids? aq1dfb@x*)) (aqd34@invalid-fmls-error aq1df4@stx aq1df3@fmls) (void))) aq1df9@ls/false) (let ((aq1dfd@t aq1df7@t)) (let ((aq1dff@ls/false (aqd7a@syntax-dispatch aq1dfd@t '#(each+ any () any)))) (if aq1dff@ls/false (apply (lambda (aq1e01@x* aq1e02@x) (if (not (aqb7b@valid-bound-ids? (cons aq1e02@x aq1e01@x*))) (aqd34@invalid-fmls-error aq1df4@stx aq1df3@fmls) (void))) aq1dff@ls/false) (let ((aq1e05@t aq1dfd@t)) (let ((aq1e07@ls/false (aqd7a@syntax-dispatch aq1e05@t '_))) (if aq1e07@ls/false (apply (lambda () (aqe5a@syntax-violation '#f '"invalid syntax" aq1df4@stx)) aq1e07@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1e05@t)))))))))))) (set! aq2863@aqda0@verify-formals aqda0@verify-formals) (set! aqda2@chi-lambda-clause (lambda (aq1e09@stx aq1e0a@fmls aq1e0b@body* aq1e0c@r aq1e0d@mr) (let ((aq1e13@t aq1e0a@fmls)) (let ((aq1e15@ls/false (aqd7a@syntax-dispatch aq1e13@t 'each-any))) (if aq1e15@ls/false (apply (lambda (aq1e17@x*) (begin (aqda0@verify-formals aq1e0a@fmls aq1e09@stx) (let ((aq1e19@lex* (map aqafb@gen-lexical aq1e17@x*)) (aq1e1a@lab* (map aqaff@gen-label aq1e17@x*))) (values aq1e19@lex* (aqdb2@chi-internal (aqb5f@add-subst (aqb33@make-full-rib aq1e17@x* aq1e1a@lab*) aq1e0b@body*) (aqd0c@add-lexicals aq1e1a@lab* aq1e19@lex* aq1e0c@r) aq1e0d@mr))))) aq1e15@ls/false) (let ((aq1e1d@t aq1e13@t)) (let ((aq1e1f@ls/false (aqd7a@syntax-dispatch aq1e1d@t '#(each+ any () any)))) (if aq1e1f@ls/false (apply (lambda (aq1e21@x* aq1e22@x) (begin (aqda0@verify-formals aq1e0a@fmls aq1e09@stx) (let ((aq1e25@lex* (map aqafb@gen-lexical aq1e21@x*)) (aq1e26@lab* (map aqaff@gen-label aq1e21@x*)) (aq1e27@lex (aqafb@gen-lexical aq1e22@x)) (aq1e28@lab (aqaff@gen-label aq1e22@x))) (values (append aq1e25@lex* aq1e27@lex) (aqdb2@chi-internal (aqb5f@add-subst (aqb33@make-full-rib (cons aq1e22@x aq1e21@x*) (cons aq1e28@lab aq1e26@lab*)) aq1e0b@body*) (aqd0c@add-lexicals (cons aq1e28@lab aq1e26@lab*) (cons aq1e27@lex aq1e25@lex*) aq1e0c@r) aq1e0d@mr))))) aq1e1f@ls/false) (let ((aq1e2d@t aq1e1d@t)) (let ((aq1e2f@ls/false (aqd7a@syntax-dispatch aq1e2d@t '_))) (if aq1e2f@ls/false (apply (lambda () (aqe5a@syntax-violation '#f '"invalid syntax" aq1e0a@fmls)) aq1e2f@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1e2d@t)))))))))))) (set! aq2864@aqda2@chi-lambda-clause aqda2@chi-lambda-clause) (set! aqda4@chi-lambda-clause* (lambda (aq1e31@stx aq1e32@fmls* aq1e33@body** aq1e34@r aq1e35@mr) (if (null? aq1e32@fmls*) (values '() '()) (call-with-values (lambda () (aqda2@chi-lambda-clause aq1e31@stx (car aq1e32@fmls*) (car aq1e33@body**) aq1e34@r aq1e35@mr)) (lambda (aq1e3f@aq1e3c aq1e40@aq1e3e) (let ((aq1e43@b aq1e40@aq1e3e) (aq1e44@a aq1e3f@aq1e3c)) (call-with-values (lambda () (aqda4@chi-lambda-clause* aq1e31@stx (cdr aq1e32@fmls*) (cdr aq1e33@body**) aq1e34@r aq1e35@mr)) (lambda (aq1e4b@aq1e48 aq1e4c@aq1e4a) (let ((aq1e4f@b* aq1e4c@aq1e4a) (aq1e50@a* aq1e4b@aq1e48)) (values (cons aq1e44@a aq1e50@a*) (cons aq1e43@b aq1e4f@b*))))))))))) (set! aq2865@aqda4@chi-lambda-clause* aqda4@chi-lambda-clause*) (set! aqda6@chi-defun (lambda (aq1e53@x aq1e54@r aq1e55@mr) (let ((aq1e59@fmls (car aq1e53@x)) (aq1e5a@body* (cdr aq1e53@x))) (call-with-values (lambda () (aqda2@chi-lambda-clause aq1e59@fmls aq1e59@fmls aq1e5a@body* aq1e54@r aq1e55@mr)) (lambda (aq1e61@aq1e5e aq1e62@aq1e60) (let ((aq1e65@body aq1e62@aq1e60) (aq1e66@fmls aq1e61@aq1e5e)) (aqad6@aqa08@build-lambda '#f aq1e66@fmls aq1e65@body))))))) (set! aq2866@aqda6@chi-defun aqda6@chi-defun) (set! aqda8@chi-rhs (lambda (aq1e69@rhs aq1e6a@r aq1e6b@mr) (let ((aq1e6f@t (car aq1e69@rhs))) (if (memv aq1e6f@t '(defun)) (aqda6@chi-defun (cdr aq1e69@rhs) aq1e6a@r aq1e6b@mr) (if (memv aq1e6f@t '(expr)) (let ((aq1e71@expr (cdr aq1e69@rhs))) (aqd9c@chi-expr aq1e71@expr aq1e6a@r aq1e6b@mr)) (if (memv aq1e6f@t '(top-expr)) (let ((aq1e73@expr (cdr aq1e69@rhs))) (aqad8@aqa38@build-sequence '#f (list (aqd9c@chi-expr aq1e73@expr aq1e6a@r aq1e6b@mr) (aqad9@aqa3a@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" aq1e69@rhs))))))) (set! aq2867@aqda8@chi-rhs aqda8@chi-rhs) (set! aqdaa@expand-interaction-rhs*/init* (lambda (aq1e75@lhs* aq1e76@rhs* aq1e77@init* aq1e78@r aq1e79@mr) (let aq1e83@f ((aq1e7f@lhs* aq1e75@lhs*) (aq1e80@rhs* aq1e76@rhs*)) (if (null? aq1e7f@lhs*) (map (lambda (aq1e85@x) (aqd9c@chi-expr aq1e85@x aq1e78@r aq1e79@mr)) aq1e77@init*) (let ((aq1e87@lhs (car aq1e7f@lhs*)) (aq1e88@rhs (car aq1e80@rhs*))) (let ((aq1e8b@t (car aq1e88@rhs))) (if (memv aq1e8b@t '(defun)) (let ((aq1e8d@rhs (aqda6@chi-defun (cdr aq1e88@rhs) aq1e78@r aq1e79@mr))) (cons (list 'set! aq1e87@lhs aq1e8d@rhs) (aq1e83@f (cdr aq1e7f@lhs*) (cdr aq1e80@rhs*)))) (if (memv aq1e8b@t '(expr)) (let ((aq1e8f@rhs (aqd9c@chi-expr (cdr aq1e88@rhs) aq1e78@r aq1e79@mr))) (cons (list 'set! aq1e87@lhs aq1e8f@rhs) (aq1e83@f (cdr aq1e7f@lhs*) (cdr aq1e80@rhs*)))) (if (memv aq1e8b@t '(top-expr)) (let ((aq1e91@e (aqd9c@chi-expr (cdr aq1e88@rhs) aq1e78@r aq1e79@mr))) (cons aq1e91@e (aq1e83@f (cdr aq1e7f@lhs*) (cdr aq1e80@rhs*)))) (error 'expand-interaction '"invallid" aq1e88@rhs)))))))))) (set! aq2868@aqdaa@expand-interaction-rhs*/init* aqdaa@expand-interaction-rhs*/init*) (set! aqdac@chi-rhs* (lambda (aq1e93@rhs* aq1e94@r aq1e95@mr) (let aq1e9b@f ((aq1e99@ls aq1e93@rhs*)) (if (null? aq1e99@ls) '() (let ((aq1e9d@a (aqda8@chi-rhs (car aq1e99@ls) aq1e94@r aq1e95@mr))) (cons aq1e9d@a (aq1e9b@f (cdr aq1e99@ls)))))))) (set! aq2869@aqdac@chi-rhs* aqdac@chi-rhs*) (set! aqdae@find-bound=? (lambda (aq1e9f@x aq1ea0@lhs* aq1ea1@rhs*) (if (null? aq1ea0@lhs*) '#f (if (aqb77@bound-id=? aq1e9f@x (car aq1ea0@lhs*)) (car aq1ea1@rhs*) (aqdae@find-bound=? aq1e9f@x (cdr aq1ea0@lhs*) (cdr aq1ea1@rhs*)))))) (set! aq286a@aqdae@find-bound=? aqdae@find-bound=?) (set! aqdb0@find-dups (lambda (aq1ea5@ls) (let aq1eab@f ((aq1ea7@ls aq1ea5@ls) (aq1ea8@dups '())) (if (null? aq1ea7@ls) aq1ea8@dups (let ((aq1ead@t (aqdae@find-bound=? (car aq1ea7@ls) (cdr aq1ea7@ls) (cdr aq1ea7@ls)))) (if aq1ead@t ((lambda (aq1eaf@x) (aq1eab@f (cdr aq1ea7@ls) (cons (list (car aq1ea7@ls) aq1eaf@x) aq1ea8@dups))) aq1ead@t) (aq1eab@f (cdr aq1ea7@ls) aq1ea8@dups))))))) (set! aq286b@aqdb0@find-dups aqdb0@find-dups) (set! aqdb2@chi-internal (lambda (aq1eb1@e* aq1eb2@r aq1eb3@mr) (let ((aq1eb7@rib (aqb27@make-empty-rib))) (call-with-values (lambda () (aqdd2@chi-body* (map (lambda (aq1ec9@x) (aqb5f@add-subst aq1eb7@rib aq1ec9@x)) (aqb71@syntax->list aq1eb1@e*)) aq1eb2@r aq1eb3@mr '() '() '() '() '() aq1eb7@rib '#f)) (lambda (aq1ecb@aq1eba aq1ecc@aq1ebc aq1ecd@aq1ebe aq1ece@aq1ec0 aq1ecf@aq1ec2 aq1ed0@aq1ec4 aq1ed1@aq1ec6 aq1ed2@aq1ec8) (let ((aq1edb@_exp* aq1ed2@aq1ec8) (aq1edc@kwd* aq1ed1@aq1ec6) (aq1edd@mod** aq1ed0@aq1ec4) (aq1ede@rhs* aq1ecf@aq1ec2) (aq1edf@lex* aq1ece@aq1ec0) (aq1ee0@mr aq1ecd@aq1ebe) (aq1ee1@r aq1ecc@aq1ebc) (aq1ee2@e* aq1ecb@aq1eba)) (begin (if (null? aq1ee2@e*) (aqe5a@syntax-violation '#f '"no expression in body" aq1ee2@e*) (void)) (let ((aq1eeb@init* (aqd98@chi-expr* (append (apply append (reverse aq1edd@mod**)) aq1ee2@e*) aq1ee1@r aq1ee0@mr))) (let ((aq1eed@rhs* (aqdac@chi-rhs* aq1ede@rhs* aq1ee1@r aq1ee0@mr))) (aqadd@aqa42@build-letrec* '#f (reverse aq1edf@lex*) (reverse aq1eed@rhs*) (aqad8@aqa38@build-sequence '#f aq1eeb@init*))))))))))) (set! aq286c@aqdb2@chi-internal aqdb2@chi-internal) (set! aqdb4@parse-module (lambda (aq1eef@e) (let ((aq1ef1@t aq1eef@e)) (let ((aq1ef3@ls/false (aqd7a@syntax-dispatch aq1ef1@t '(_ each-any . each-any)))) (if aq1ef3@ls/false (apply (lambda (aq1ef5@export* aq1ef6@b*) (begin (if (not (for-all aqb73@id? aq1ef5@export*)) (aqe5a@syntax-violation '#f '"module exports must be identifiers" aq1eef@e) (void)) (values '#f (list->vector aq1ef5@export*) aq1ef6@b*))) aq1ef3@ls/false) (let ((aq1ef9@t aq1ef1@t)) (let ((aq1efb@ls/false (aqd7a@syntax-dispatch aq1ef9@t '(_ any each-any . each-any)))) (if aq1efb@ls/false (apply (lambda (aq1efd@name aq1efe@export* aq1eff@b*) (begin (if (not (aqb73@id? aq1efd@name)) (aqe5a@syntax-violation '#f '"module name must be an identifier" aq1eef@e) (void)) (if (not (for-all aqb73@id? aq1efe@export*)) (aqe5a@syntax-violation '#f '"module exports must be identifiers" aq1eef@e) (void)) (values aq1efd@name (list->vector aq1efe@export*) aq1eff@b*))) aq1efb@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1ef9@t))))))))) (set! aq286d@aqdb4@parse-module aqdb4@parse-module) (set! aqdbe@module-interface? (lambda (aq1f03@x) (and (simple-struct? aq1f03@x) (eq? (simple-struct-name aq1f03@x) 'module-interface)))) (set! aq286e@aqdbe@module-interface? aqdbe@module-interface?) (set! aqdc0@module-interface-first-mark (lambda (aq1f05@x) (simple-struct-ref aq1f05@x '0))) (set! aq286f@aqdc0@module-interface-first-mark aqdc0@module-interface-first-mark) (set! aqdc2@set-module-interface-first-mark! (lambda (aq1f07@x aq1f08@val) (simple-struct-set! aq1f07@x '0 aq1f08@val))) (set! aq2870@aqdc2@set-module-interface-first-mark! aqdc2@set-module-interface-first-mark!) (set! aqdc4@module-interface-exp-id-vec (lambda (aq1f0b@x) (simple-struct-ref aq1f0b@x '1))) (set! aq2871@aqdc4@module-interface-exp-id-vec aqdc4@module-interface-exp-id-vec) (set! aqdc6@set-module-interface-exp-id-vec! (lambda (aq1f0d@x aq1f0e@val) (simple-struct-set! aq1f0d@x '1 aq1f0e@val))) (set! aq2872@aqdc6@set-module-interface-exp-id-vec! aqdc6@set-module-interface-exp-id-vec!) (set! aqdc8@module-interface-exp-lab-vec (lambda (aq1f11@x) (simple-struct-ref aq1f11@x '2))) (set! aq2873@aqdc8@module-interface-exp-lab-vec aqdc8@module-interface-exp-lab-vec) (set! aqdca@set-module-interface-exp-lab-vec! (lambda (aq1f13@x aq1f14@val) (simple-struct-set! aq1f13@x '2 aq1f14@val))) (set! aq2874@aqdca@set-module-interface-exp-lab-vec! aqdca@set-module-interface-exp-lab-vec!) (set! aqdcc@dummy '3) (set! aq2875@aqdcc@dummy aqdcc@dummy) (set! aqdce@module-interface-exp-id* (lambda (aq1f17@iface aq1f18@id) (letrec* ((aq1f1c@diff-marks (lambda (aq1f23@ls aq1f24@x) (begin (if (null? aq1f23@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((aq1f27@a (car aq1f23@ls))) (if (eq? aq1f27@a aq1f24@x) '() (cons aq1f27@a (aq1f1c@diff-marks (cdr aq1f23@ls) aq1f24@x)))))))) (let ((aq1f1d@diff (aq1f1c@diff-marks (aqb45@stx-mark* aq1f18@id) (aqdc0@module-interface-first-mark aq1f17@iface))) (aq1f1e@id-vec (aqdc4@module-interface-exp-id-vec aq1f17@iface))) (if (null? aq1f1d@diff) aq1f1e@id-vec (vector-map (lambda (aq1f21@x) (make-simple-struct 'stx '5 (list (aqb41@stx-expr aq1f21@x) (append aq1f1d@diff (aqb45@stx-mark* aq1f21@x)) '() '()))) aq1f1e@id-vec)))))) (set! aq2876@aqdce@module-interface-exp-id* aqdce@module-interface-exp-id*) (set! aqdd0@chi-internal-module (lambda (aq1f29@e aq1f2a@r aq1f2b@mr aq1f2c@lex* aq1f2d@rhs* aq1f2e@mod** aq1f2f@kwd*) (call-with-values (lambda () (aqdb4@parse-module aq1f29@e)) (lambda (aq1f3d@aq1f38 aq1f3e@aq1f3a aq1f3f@aq1f3c) (let ((aq1f43@e* aq1f3f@aq1f3c) (aq1f44@exp-id* aq1f3e@aq1f3a) (aq1f45@name aq1f3d@aq1f38)) (let ((aq1f49@rib (aqb27@make-empty-rib))) (let ((aq1f4b@e* (map (lambda (aq1f4d@x) (aqb5f@add-subst aq1f49@rib aq1f4d@x)) (aqb71@syntax->list aq1f43@e*)))) (call-with-values (lambda () (aqdd2@chi-body* aq1f4b@e* aq1f2a@r aq1f2b@mr aq1f2c@lex* aq1f2d@rhs* aq1f2e@mod** aq1f2f@kwd* '() aq1f49@rib '#f)) (lambda (aq1f5f@aq1f50 aq1f60@aq1f52 aq1f61@aq1f54 aq1f62@aq1f56 aq1f63@aq1f58 aq1f64@aq1f5a aq1f65@aq1f5c aq1f66@aq1f5e) (let ((aq1f6f@_exp* aq1f66@aq1f5e) (aq1f70@kwd* aq1f65@aq1f5c) (aq1f71@mod** aq1f64@aq1f5a) (aq1f72@rhs* aq1f63@aq1f58) (aq1f73@lex* aq1f62@aq1f56) (aq1f74@mr aq1f61@aq1f54) (aq1f75@r aq1f60@aq1f52) (aq1f76@e* aq1f5f@aq1f50)) (let ((aq1f7f@exp-lab* (vector-map (lambda (aq1f83@x) (or (aqb89@id->label (make-simple-struct 'stx '5 (list (aqb75@id->sym aq1f83@x) (aqb45@stx-mark* aq1f83@x) (list aq1f49@rib) '()))) (aqe5a@syntax-violation '#f '"cannot find module export" aq1f83@x))) aq1f44@exp-id*)) (aq1f80@mod** (cons aq1f76@e* aq1f71@mod**))) (if (not aq1f45@name) (values aq1f73@lex* aq1f72@rhs* aq1f44@exp-id* aq1f7f@exp-lab* aq1f75@r aq1f74@mr aq1f80@mod** aq1f70@kwd*) (let ((aq1f85@lab (aqaff@gen-label 'module)) (aq1f86@iface (make-simple-struct 'module-interface '4 (list (car (aqb45@stx-mark* aq1f45@name)) (vector-map (lambda (aq1f89@x) (make-simple-struct 'stx '5 (list (aqb41@stx-expr aq1f89@x) (aqb45@stx-mark* aq1f89@x) '() '()))) aq1f44@exp-id*) aq1f7f@exp-lab*)))) (values aq1f73@lex* aq1f72@rhs* (vector aq1f45@name) (vector aq1f85@lab) (cons (cons aq1f85@lab (cons '$module aq1f86@iface)) aq1f75@r) (cons (cons aq1f85@lab (cons '$module aq1f86@iface)) aq1f74@mr) aq1f80@mod** aq1f70@kwd*)))))))))))))) (set! aq2877@aqdd0@chi-internal-module aqdd0@chi-internal-module) (set! aqdd2@chi-body* (lambda (aq1f8b@e* aq1f8c@r aq1f8d@mr aq1f8e@lex* aq1f8f@rhs* aq1f90@mod** aq1f91@kwd* aq1f92@exp* aq1f93@rib aq1f94@top?) (if (null? aq1f8b@e*) (values aq1f8b@e* aq1f8c@r aq1f8d@mr aq1f8e@lex* aq1f8f@rhs* aq1f90@mod** aq1f91@kwd* aq1f92@exp*) (let ((aq1f9f@e (car aq1f8b@e*))) (call-with-values (lambda () (aqb95@syntax-type aq1f9f@e aq1f8c@r)) (lambda (aq1fa7@aq1fa2 aq1fa8@aq1fa4 aq1fa9@aq1fa6) (let ((aq1fad@kwd aq1fa9@aq1fa6) (aq1fae@value aq1fa8@aq1fa4) (aq1faf@type aq1fa7@aq1fa2)) (let ((aq1fb3@kwd* (if (aqb73@id? aq1fad@kwd) (cons aq1fad@kwd aq1f91@kwd*) aq1f91@kwd*))) (let ((aq1fb5@t aq1faf@type)) (if (memv aq1fb5@t '(define)) (call-with-values (lambda () (aqcfc@parse-define aq1f9f@e)) (lambda (aq1fbb@aq1fb8 aq1fbc@aq1fba) (let ((aq1fbf@rhs aq1fbc@aq1fba) (aq1fc0@id aq1fbb@aq1fb8)) (begin (if (aqb7f@bound-id-member? aq1fc0@id aq1fb3@kwd*) (aqe5a@syntax-violation '#f '"cannot redefine keyword" aq1f9f@e) (void)) (call-with-values (lambda () (aqb03@gen-define-label+loc aq1fc0@id aq1f93@rib)) (lambda (aq1fc7@aq1fc4 aq1fc8@aq1fc6) (let ((aq1fcb@lex aq1fc8@aq1fc6) (aq1fcc@lab aq1fc7@aq1fc4)) (begin (aqb29@extend-rib! aq1f93@rib aq1fc0@id aq1fcc@lab) (aqdd2@chi-body* (cdr aq1f8b@e*) (aqd0a@add-lexical aq1fcc@lab aq1fcb@lex aq1f8c@r) aq1f8d@mr (cons aq1fcb@lex aq1f8e@lex*) (cons aq1fbf@rhs aq1f8f@rhs*) aq1f90@mod** aq1fb3@kwd* aq1f92@exp* aq1f93@rib aq1f94@top?))))))))) (if (memv aq1fb5@t '(define-syntax)) (call-with-values (lambda () (aqcfe@parse-define-syntax aq1f9f@e)) (lambda (aq1fd3@aq1fd0 aq1fd4@aq1fd2) (let ((aq1fd7@rhs aq1fd4@aq1fd2) (aq1fd8@id aq1fd3@aq1fd0)) (begin (if (aqb7f@bound-id-member? aq1fd8@id aq1fb3@kwd*) (aqe5a@syntax-violation '#f '"cannot redefine keyword" aq1f9f@e) (void)) (let ((aq1fdb@lab (aqb05@gen-define-label aq1fd8@id aq1f93@rib)) (aq1fdc@expanded-rhs (aqdd4@expand-transformer aq1fd7@rhs aq1f8d@mr))) (begin (aqb29@extend-rib! aq1f93@rib aq1fd8@id aq1fdb@lab) (let ((aq1fdf@b (aqbab@make-eval-transformer aq1fdc@expanded-rhs))) (aqdd2@chi-body* (cdr aq1f8b@e*) (cons (cons aq1fdb@lab aq1fdf@b) aq1f8c@r) (cons (cons aq1fdb@lab aq1fdf@b) aq1f8d@mr) aq1f8e@lex* aq1f8f@rhs* aq1f90@mod** aq1fb3@kwd* aq1f92@exp* aq1f93@rib aq1f94@top?)))))))) (if (memv aq1fb5@t '(let-syntax letrec-syntax)) (let ((aq1fe1@t aq1f9f@e)) (let ((aq1fe3@ls/false (aqd7a@syntax-dispatch aq1fe1@t '(_ #(each (any any)) . each-any)))) (if (and aq1fe3@ls/false (apply (lambda (aq1fe5@xlhs* aq1fe6@xrhs* aq1fe7@xbody*) (if (not (aqb7b@valid-bound-ids? aq1fe5@xlhs*)) (aqe5a@syntax-violation '#f '"invalid identifiers" aq1f9f@e) (void))) aq1fe3@ls/false)) (apply (lambda (aq1feb@xlhs* aq1fec@xrhs* aq1fed@xbody*) (let ((aq1ff1@xlab* (map aqaff@gen-label aq1feb@xlhs*))) (let ((aq1ff3@xrib (aqb33@make-full-rib aq1feb@xlhs* aq1ff1@xlab*))) (let ((aq1ff5@xb* (map (lambda (aq1ff7@x) (aqbab@make-eval-transformer (aqdd4@expand-transformer (if (eq? aq1faf@type 'let-syntax) aq1ff7@x (aqb5f@add-subst aq1ff3@xrib aq1ff7@x)) aq1f8d@mr))) aq1fec@xrhs*))) (aqdd2@chi-body* (append (map (lambda (aq1ff9@x) (aqb5f@add-subst aq1ff3@xrib aq1ff9@x)) aq1fed@xbody*) (cdr aq1f8b@e*)) (append (map cons aq1ff1@xlab* aq1ff5@xb*) aq1f8c@r) (append (map cons aq1ff1@xlab* aq1ff5@xb*) aq1f8d@mr) aq1f8e@lex* aq1f8f@rhs* aq1f90@mod** aq1fb3@kwd* aq1f92@exp* aq1f93@rib aq1f94@top?))))) aq1fe3@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1fe1@t)))) (if (memv aq1fb5@t '(begin)) (let ((aq1ffb@t aq1f9f@e)) (let ((aq1ffd@ls/false (aqd7a@syntax-dispatch aq1ffb@t '(_ . each-any)))) (if aq1ffd@ls/false (apply (lambda (aq1fff@x*) (aqdd2@chi-body* (append aq1fff@x* (cdr aq1f8b@e*)) aq1f8c@r aq1f8d@mr aq1f8e@lex* aq1f8f@rhs* aq1f90@mod** aq1fb3@kwd* aq1f92@exp* aq1f93@rib aq1f94@top?)) aq1ffd@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq1ffb@t)))) (if (memv aq1fb5@t '(global-macro global-macro!)) (aqdd2@chi-body* (cons (aqb5f@add-subst aq1f93@rib (aqd96@chi-global-macro aq1fae@value aq1f9f@e)) (cdr aq1f8b@e*)) aq1f8c@r aq1f8d@mr aq1f8e@lex* aq1f8f@rhs* aq1f90@mod** aq1fb3@kwd* aq1f92@exp* aq1f93@rib aq1f94@top?) (if (memv aq1fb5@t '(local-macro local-macro!)) (aqdd2@chi-body* (cons (aqb5f@add-subst aq1f93@rib (aqd94@chi-local-macro aq1fae@value aq1f9f@e)) (cdr aq1f8b@e*)) aq1f8c@r aq1f8d@mr aq1f8e@lex* aq1f8f@rhs* aq1f90@mod** aq1fb3@kwd* aq1f92@exp* aq1f93@rib aq1f94@top?) (if (memv aq1fb5@t '(macro macro!)) (aqdd2@chi-body* (cons (aqb5f@add-subst aq1f93@rib (aqd92@chi-macro aq1fae@value aq1f9f@e)) (cdr aq1f8b@e*)) aq1f8c@r aq1f8d@mr aq1f8e@lex* aq1f8f@rhs* aq1f90@mod** aq1fb3@kwd* aq1f92@exp* aq1f93@rib aq1f94@top?) (if (memv aq1fb5@t '(module)) (call-with-values (lambda () (aqdd0@chi-internal-module aq1f9f@e aq1f8c@r aq1f8d@mr aq1f8e@lex* aq1f8f@rhs* aq1f90@mod** aq1fb3@kwd*)) (lambda (aq2011@aq2002 aq2012@aq2004 aq2013@aq2006 aq2014@aq2008 aq2015@aq200a aq2016@aq200c aq2017@aq200e aq2018@aq2010) (let ((aq2021@kwd* aq2018@aq2010) (aq2022@mod** aq2017@aq200e) (aq2023@mr aq2016@aq200c) (aq2024@r aq2015@aq200a) (aq2025@m-exp-lab* aq2014@aq2008) (aq2026@m-exp-id* aq2013@aq2006) (aq2027@rhs* aq2012@aq2004) (aq2028@lex* aq2011@aq2002)) (begin (vector-for-each (lambda (aq2031@id aq2032@lab) (aqb29@extend-rib! aq1f93@rib aq2031@id aq2032@lab)) aq2026@m-exp-id* aq2025@m-exp-lab*) (aqdd2@chi-body* (cdr aq1f8b@e*) aq2024@r aq2023@mr aq2028@lex* aq2027@rhs* aq2022@mod** aq2021@kwd* aq1f92@exp* aq1f93@rib aq1f94@top?))))) (if (memv aq1fb5@t '(library)) (begin (aqe3c@library-expander (aqb87@stx->datum aq1f9f@e)) (aqdd2@chi-body* (cdr aq1f8b@e*) aq1f8c@r aq1f8d@mr aq1f8e@lex* aq1f8f@rhs* aq1f90@mod** aq1fb3@kwd* aq1f92@exp* aq1f93@rib aq1f94@top?)) (if (memv aq1fb5@t '(export)) (let ((aq2035@t aq1f9f@e)) (let ((aq2037@ls/false (aqd7a@syntax-dispatch aq2035@t '(_ . each-any)))) (if aq2037@ls/false (apply (lambda (aq2039@exp-decl*) (aqdd2@chi-body* (cdr aq1f8b@e*) aq1f8c@r aq1f8d@mr aq1f8e@lex* aq1f8f@rhs* aq1f90@mod** aq1fb3@kwd* (append aq2039@exp-decl* aq1f92@exp*) aq1f93@rib aq1f94@top?)) aq2037@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq2035@t)))) (if (memv aq1fb5@t '(import)) (letrec* ((aq203c@module-import? (lambda (aq208f@e) (let ((aq2091@t aq208f@e)) (let ((aq2093@ls/false (aqd7a@syntax-dispatch aq2091@t '(_ any)))) (if (and aq2093@ls/false (apply (lambda (aq2095@id) (aqb73@id? aq2095@id)) aq2093@ls/false)) (apply (lambda (aq2097@id) '#t) aq2093@ls/false) (let ((aq2099@t aq2091@t)) (let ((aq209b@ls/false (aqd7a@syntax-dispatch aq2099@t '(_ . each-any)))) (if aq209b@ls/false (apply (lambda (aq209d@imp*) '#f) aq209b@ls/false) (let ((aq209f@t aq2099@t)) (let ((aq20a1@ls/false (aqd7a@syntax-dispatch aq209f@t '_))) (if aq20a1@ls/false (apply (lambda () (aqe5a@syntax-violation '#f '"malformed import form" aq208f@e)) aq20a1@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq209f@t)))))))))))) (aq203e@module-import (lambda (aq206d@e aq206e@r) (let ((aq2071@t aq206d@e)) (let ((aq2073@ls/false (aqd7a@syntax-dispatch aq2071@t '(_ any)))) (if (and aq2073@ls/false (apply (lambda (aq2075@id) (aqb73@id? aq2075@id)) aq2073@ls/false)) (apply (lambda (aq2077@id) (call-with-values (lambda () (aqb95@syntax-type aq2077@id aq206e@r)) (lambda (aq207f@aq207a aq2080@aq207c aq2081@aq207e) (let ((aq2085@kwd aq2081@aq207e) (aq2086@value aq2080@aq207c) (aq2087@type aq207f@aq207a)) (let ((aq208b@t aq2087@type)) (if (memv aq208b@t '($module)) (let ((aq208d@iface aq2086@value)) (values (aqdce@module-interface-exp-id* aq208d@iface aq2077@id) (aqdc8@module-interface-exp-lab-vec aq208d@iface))) (aqe5a@syntax-violation '#f '"invalid import" aq206d@e))))))) aq2073@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq2071@t)))))) (aq2040@library-import (lambda (aq2051@e) (let ((aq2053@t aq2051@e)) (let ((aq2055@ls/false (aqd7a@syntax-dispatch aq2053@t '(any . each-any)))) (if aq2055@ls/false (apply (lambda (aq2057@ctxt aq2058@imp*) (call-with-values (lambda () (aqddc@parse-import-spec* (aqe60@syntax->datum aq2058@imp*))) (lambda (aq205f@aq205c aq2060@aq205e) (let ((aq2063@subst-labels aq2060@aq205e) (aq2064@subst-names aq205f@aq205c)) (values (vector-map (lambda (aq2067@name) (aqb53@datum->stx aq2057@ctxt aq2067@name)) aq2064@subst-names) aq2063@subst-labels))))) aq2055@ls/false) (let ((aq2069@t aq2053@t)) (let ((aq206b@ls/false (aqd7a@syntax-dispatch aq2069@t '_))) (if aq206b@ls/false (apply (lambda () (aqe5a@syntax-violation '#f '"invalid import form" aq2051@e)) aq206b@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq2069@t)))))))))) (begin (call-with-values (lambda () (if (aq203c@module-import? aq1f9f@e) (aq203e@module-import aq1f9f@e aq1f8c@r) (aq2040@library-import aq1f9f@e))) (lambda (aq2045@aq2042 aq2046@aq2044) (let ((aq2049@lab* aq2046@aq2044) (aq204a@id* aq2045@aq2042)) (vector-for-each (lambda (aq204d@id aq204e@lab) (aqb29@extend-rib! aq1f93@rib aq204d@id aq204e@lab)) aq204a@id* aq2049@lab*)))) (aqdd2@chi-body* (cdr aq1f8b@e*) aq1f8c@r aq1f8d@mr aq1f8e@lex* aq1f8f@rhs* aq1f90@mod** aq1fb3@kwd* aq1f92@exp* aq1f93@rib aq1f94@top?))) (if aq1f94@top? (aqdd2@chi-body* (cdr aq1f8b@e*) aq1f8c@r aq1f8d@mr (cons (aqafb@gen-lexical 'dummy) aq1f8e@lex*) (cons (cons 'top-expr aq1f9f@e) aq1f8f@rhs*) aq1f90@mod** aq1fb3@kwd* aq1f92@exp* aq1f93@rib aq1f94@top?) (values aq1f8b@e* aq1f8c@r aq1f8d@mr aq1f8e@lex* aq1f8f@rhs* aq1f90@mod** aq1fb3@kwd* aq1f92@exp*)))))))))))))))))))))) (set! aq2878@aqdd2@chi-body* aqdd2@chi-body*) (set! aqdd4@expand-transformer (lambda (aq20a3@expr aq20a4@r) (let ((aq20a7@rtc (aqde0@make-collector))) (let ((aq20a9@expanded-rhs (let ((aq20b3@aq20ac aqde2@inv-collector) (aq20b4@aq20ae aqde4@vis-collector) (aq20b5@aq20b0 aq20a7@rtc) (aq20b6@aq20b2 (lambda (aq20bb@x) (values)))) (let ((aq20bd@swap (lambda () (begin (let ((aq20bf@t (aq20b3@aq20ac))) (begin (aq20b3@aq20ac aq20b5@aq20b0) (set! aq20b5@aq20b0 aq20bf@t))) (let ((aq20c1@t (aq20b4@aq20ae))) (begin (aq20b4@aq20ae aq20b6@aq20b2) (set! aq20b6@aq20b2 aq20c1@t))))))) (dynamic-wind aq20bd@swap (lambda () (aqd9c@chi-expr aq20a3@expr aq20a4@r aq20a4@r)) aq20bd@swap))))) (begin (for-each (let ((aq20c3@mark-visit (aqde4@vis-collector))) (lambda (aq20c5@x) (begin (aq98f@aq7dd@invoke-library aq20c5@x) (aq20c3@mark-visit aq20c5@x)))) (aq20a7@rtc)) aq20a9@expanded-rhs))))) (set! aq2879@aqdd4@expand-transformer aqdd4@expand-transformer) (set! aqdd6@parse-exports (lambda (aq20c7@exp*) (let aq20cf@f ((aq20c9@exp* aq20c7@exp*) (aq20ca@int* '()) (aq20cb@ext* '())) (if (null? aq20c9@exp*) (begin (if (not (aqb7b@valid-bound-ids? aq20cb@ext*)) (aqe5a@syntax-violation 'export '"invalid exports" (aqdb0@find-dups aq20cb@ext*)) (void)) (values (map aqe60@syntax->datum aq20cb@ext*) aq20ca@int*)) (let ((aq20d1@t (car aq20c9@exp*))) (let ((aq20d3@ls/false (aqd7a@syntax-dispatch aq20d1@t '(any . #(each (any any)))))) (if aq20d3@ls/false (apply (lambda (aq20d5@rename aq20d6@i* aq20d7@e*) (begin (if (not (and (eq? (aqe60@syntax->datum aq20d5@rename) 'rename) (for-all aqb73@id? aq20d6@i*) (for-all aqb73@id? aq20d7@e*))) (aqe5a@syntax-violation 'export '"invalid export specifier" (car aq20c9@exp*)) (void)) (aq20cf@f (cdr aq20c9@exp*) (append aq20d6@i* aq20ca@int*) (append aq20d7@e* aq20cb@ext*)))) aq20d3@ls/false) (let ((aq20db@t aq20d1@t)) (let ((aq20dd@ls/false (aqd7a@syntax-dispatch aq20db@t 'any))) (if aq20dd@ls/false (apply (lambda (aq20df@ie) (begin (if (not (aqb73@id? aq20df@ie)) (aqe5a@syntax-violation 'export '"invalid export" aq20df@ie) (void)) (aq20cf@f (cdr aq20c9@exp*) (cons aq20df@ie aq20ca@int*) (cons aq20df@ie aq20cb@ext*)))) aq20dd@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq20db@t))))))))))) (set! aq287a@aqdd6@parse-exports aqdd6@parse-exports) (set! aqdd8@parse-library-name (lambda (aq20e1@spec) (letrec* ((aq20e4@parse (lambda (aq20f1@x) (let ((aq20f3@t aq20f1@x)) (let ((aq20f5@ls/false (aqd7a@syntax-dispatch aq20f3@t '(each-any)))) (if (and aq20f5@ls/false (apply (lambda (aq20f7@v*) (for-all (lambda (aq20f9@x) (let ((aq20fb@x (aqe60@syntax->datum aq20f9@x))) (and (integer? aq20fb@x) (exact? aq20fb@x)))) aq20f7@v*)) aq20f5@ls/false)) (apply (lambda (aq20fd@v*) (values '() (map aqe60@syntax->datum aq20fd@v*))) aq20f5@ls/false) (let ((aq20ff@t aq20f3@t)) (let ((aq2101@ls/false (aqd7a@syntax-dispatch aq20ff@t '(any . any)))) (if (and aq2101@ls/false (apply (lambda (aq2103@x aq2104@rest) (symbol? (aqe60@syntax->datum aq2103@x))) aq2101@ls/false)) (apply (lambda (aq2107@x aq2108@rest) (call-with-values (lambda () (aq20e4@parse aq2108@rest)) (lambda (aq210f@aq210c aq2110@aq210e) (let ((aq2113@v* aq2110@aq210e) (aq2114@x* aq210f@aq210c)) (values (cons (aqe60@syntax->datum aq2107@x) aq2114@x*) aq2113@v*))))) aq2101@ls/false) (let ((aq2117@t aq20ff@t)) (let ((aq2119@ls/false (aqd7a@syntax-dispatch aq2117@t '()))) (if aq2119@ls/false (apply (lambda () (values '() '())) aq2119@ls/false) (let ((aq211b@t aq2117@t)) (let ((aq211d@ls/false (aqd7a@syntax-dispatch aq211b@t '_))) (if aq211d@ls/false (apply (lambda () (aqe5a@syntax-violation '#f '"invalid library name" aq20e1@spec)) aq211d@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq211b@t)))))))))))))))) (call-with-values (lambda () (aq20e4@parse aq20e1@spec)) (lambda (aq20e9@aq20e6 aq20ea@aq20e8) (let ((aq20ed@ver* aq20ea@aq20e8) (aq20ee@name* aq20e9@aq20e6)) (begin (if (null? aq20ee@name*) (aqe5a@syntax-violation '#f '"empty library name" aq20e1@spec) (void)) (values aq20ee@name* aq20ed@ver*)))))))) (set! aq287b@aqdd8@parse-library-name aqdd8@parse-library-name) (set! aqdda@parse-library (lambda (aq211f@e) (let ((aq2121@t aq211f@e)) (let ((aq2123@ls/false (aqd7a@syntax-dispatch aq2121@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and aq2123@ls/false (apply (lambda (aq2125@library aq2126@name* aq2127@export aq2128@exp* aq2129@import aq212a@imp* aq212b@b*) (and (eq? (aqe60@syntax->datum aq2127@export) 'export) (eq? (aqe60@syntax->datum aq2129@import) 'import) (eq? (aqe60@syntax->datum aq2125@library) 'library))) aq2123@ls/false)) (apply (lambda (aq2133@library aq2134@name* aq2135@export aq2136@exp* aq2137@import aq2138@imp* aq2139@b*) (values aq2134@name* aq2136@exp* aq2138@imp* aq2139@b*)) aq2123@ls/false) (let ((aq2141@t aq2121@t)) (let ((aq2143@ls/false (aqd7a@syntax-dispatch aq2141@t '_))) (if aq2143@ls/false (apply (lambda () (aqe5a@syntax-violation '#f '"malformed library" aq211f@e)) aq2143@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq2141@t))))))))) (set! aq287c@aqdda@parse-library aqdda@parse-library) (set! aqddc@parse-import-spec* (letrec* ((aq2146@idsyn? (lambda (aq234f@x) (symbol? (aqe60@syntax->datum aq234f@x)))) (aq2148@dup-error (lambda (aq234d@name) (aqe5a@syntax-violation 'import '"two imports with different bindings" aq234d@name))) (aq214a@merge-substs (lambda (aq233b@s aq233c@subst) (letrec* ((aq2340@insert-to-subst (lambda (aq2341@a aq2342@subst) (let ((aq2345@name (car aq2341@a)) (aq2346@label (cdr aq2341@a))) (let ((aq2349@t (assq aq2345@name aq2342@subst))) (if aq2349@t ((lambda (aq234b@x) (if (eq? (cdr aq234b@x) aq2346@label) aq2342@subst (aq2148@dup-error aq2345@name))) aq2349@t) (cons aq2341@a aq2342@subst))))))) (if (null? aq233b@s) aq233c@subst (aq2340@insert-to-subst (car aq233b@s) (aq214a@merge-substs (cdr aq233b@s) aq233c@subst)))))) (aq214c@exclude* (lambda (aq230b@sym* aq230c@subst) (letrec* ((aq2310@exclude (lambda (aq2329@sym aq232a@subst) (if (null? aq232a@subst) (aqe5a@syntax-violation 'import '"cannot rename unbound identifier" aq2329@sym) (if (eq? aq2329@sym (caar aq232a@subst)) (values (cdar aq232a@subst) (cdr aq232a@subst)) (let ((aq232d@a (car aq232a@subst))) (call-with-values (lambda () (aq2310@exclude aq2329@sym (cdr aq232a@subst))) (lambda (aq2333@aq2330 aq2334@aq2332) (let ((aq2337@subst aq2334@aq2332) (aq2338@old aq2333@aq2330)) (values aq2338@old (cons aq232d@a aq2337@subst))))))))))) (if (null? aq230b@sym*) (values '() aq230c@subst) (call-with-values (lambda () (aq2310@exclude (car aq230b@sym*) aq230c@subst)) (lambda (aq2315@aq2312 aq2316@aq2314) (let ((aq2319@subst aq2316@aq2314) (aq231a@old aq2315@aq2312)) (call-with-values (lambda () (aq214c@exclude* (cdr aq230b@sym*) aq2319@subst)) (lambda (aq2321@aq231e aq2322@aq2320) (let ((aq2325@subst aq2322@aq2320) (aq2326@old* aq2321@aq231e)) (values (cons aq231a@old aq2326@old*) aq2325@subst))))))))))) (aq214e@find* (lambda (aq2303@sym* aq2304@subst) (map (lambda (aq2307@x) (let ((aq2309@t (assq aq2307@x aq2304@subst))) (if aq2309@t (cdr aq2309@t) (aqe5a@syntax-violation 'import '"cannot find identifier" aq2307@x)))) aq2303@sym*))) (aq2150@rem* (lambda (aq22fb@sym* aq22fc@subst) (let aq2301@f ((aq22ff@subst aq22fc@subst)) (if (null? aq22ff@subst) '() (if (memq (caar aq22ff@subst) aq22fb@sym*) (aq2301@f (cdr aq22ff@subst)) (cons (car aq22ff@subst) (aq2301@f (cdr aq22ff@subst)))))))) (aq2152@remove-dups (lambda (aq22f9@ls) (if (null? aq22f9@ls) '() (if (memq (car aq22f9@ls) (cdr aq22f9@ls)) (aq2152@remove-dups (cdr aq22f9@ls)) (cons (car aq22f9@ls) (aq2152@remove-dups (cdr aq22f9@ls))))))) (aq2154@parse-library-name (lambda (aq2211@spec) (letrec* ((aq2214@subversion? (lambda (aq22f5@x) (let ((aq22f7@x (aqe60@syntax->datum aq22f5@x))) (and (integer? aq22f7@x) (exact? aq22f7@x) (>= aq22f7@x '0))))) (aq2216@subversion-pred (lambda (aq2295@x*) (let ((aq2297@t aq2295@x*)) (let ((aq2299@ls/false (aqd7a@syntax-dispatch aq2297@t 'any))) (if (and aq2299@ls/false (apply (lambda (aq229b@n) (aq2214@subversion? aq229b@n)) aq2299@ls/false)) (apply (lambda (aq229d@n) (lambda (aq229f@x) (= aq229f@x (aqe60@syntax->datum aq229d@n)))) aq2299@ls/false) (let ((aq22a1@t aq2297@t)) (let ((aq22a3@ls/false (aqd7a@syntax-dispatch aq22a1@t '(any . each-any)))) (if (and aq22a3@ls/false (apply (lambda (aq22a5@p? aq22a6@sub*) (eq? (aqe60@syntax->datum aq22a5@p?) 'and)) aq22a3@ls/false)) (apply (lambda (aq22a9@p? aq22aa@sub*) (let ((aq22ad@p* (map aq2216@subversion-pred aq22aa@sub*))) (lambda (aq22af@x) (for-all (lambda (aq22b1@p) (aq22b1@p aq22af@x)) aq22ad@p*)))) aq22a3@ls/false) (let ((aq22b3@t aq22a1@t)) (let ((aq22b5@ls/false (aqd7a@syntax-dispatch aq22b3@t '(any . each-any)))) (if (and aq22b5@ls/false (apply (lambda (aq22b7@p? aq22b8@sub*) (eq? (aqe60@syntax->datum aq22b7@p?) 'or)) aq22b5@ls/false)) (apply (lambda (aq22bb@p? aq22bc@sub*) (let ((aq22bf@p* (map aq2216@subversion-pred aq22bc@sub*))) (lambda (aq22c1@x) (exists (lambda (aq22c3@p) (aq22c3@p aq22c1@x)) aq22bf@p*)))) aq22b5@ls/false) (let ((aq22c5@t aq22b3@t)) (let ((aq22c7@ls/false (aqd7a@syntax-dispatch aq22c5@t '(any any)))) (if (and aq22c7@ls/false (apply (lambda (aq22c9@p? aq22ca@sub) (eq? (aqe60@syntax->datum aq22c9@p?) 'not)) aq22c7@ls/false)) (apply (lambda (aq22cd@p? aq22ce@sub) (let ((aq22d1@p (aq2216@subversion-pred aq22ce@sub))) (lambda (aq22d3@x) (not (aq22d1@p aq22d3@x))))) aq22c7@ls/false) (let ((aq22d5@t aq22c5@t)) (let ((aq22d7@ls/false (aqd7a@syntax-dispatch aq22d5@t '(any any)))) (if (and aq22d7@ls/false (apply (lambda (aq22d9@p? aq22da@n) (and (eq? (aqe60@syntax->datum aq22d9@p?) '<=) (aq2214@subversion? aq22da@n))) aq22d7@ls/false)) (apply (lambda (aq22dd@p? aq22de@n) (lambda (aq22e1@x) (<= aq22e1@x (aqe60@syntax->datum aq22de@n)))) aq22d7@ls/false) (let ((aq22e3@t aq22d5@t)) (let ((aq22e5@ls/false (aqd7a@syntax-dispatch aq22e3@t '(any any)))) (if (and aq22e5@ls/false (apply (lambda (aq22e7@p? aq22e8@n) (and (eq? (aqe60@syntax->datum aq22e7@p?) '>=) (aq2214@subversion? aq22e8@n))) aq22e5@ls/false)) (apply (lambda (aq22eb@p? aq22ec@n) (lambda (aq22ef@x) (>= aq22ef@x (aqe60@syntax->datum aq22ec@n)))) aq22e5@ls/false) (let ((aq22f1@t aq22e3@t)) (let ((aq22f3@ls/false (aqd7a@syntax-dispatch aq22f1@t '_))) (if aq22f3@ls/false (apply (lambda () (aqe5a@syntax-violation 'import '"invalid sub-version spec" aq2211@spec aq2295@x*)) aq22f3@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq22f1@t)))))))))))))))))))))))) (aq2218@version-pred (lambda (aq2245@x*) (let ((aq2247@t aq2245@x*)) (let ((aq2249@ls/false (aqd7a@syntax-dispatch aq2247@t '()))) (if aq2249@ls/false (apply (lambda () (lambda (aq224b@x) '#t)) aq2249@ls/false) (let ((aq224d@t aq2247@t)) (let ((aq224f@ls/false (aqd7a@syntax-dispatch aq224d@t '(any . each-any)))) (if (and aq224f@ls/false (apply (lambda (aq2251@c aq2252@ver*) (eq? (aqe60@syntax->datum aq2251@c) 'and)) aq224f@ls/false)) (apply (lambda (aq2255@c aq2256@ver*) (let ((aq2259@p* (map aq2218@version-pred aq2256@ver*))) (lambda (aq225b@x) (for-all (lambda (aq225d@p) (aq225d@p aq225b@x)) aq2259@p*)))) aq224f@ls/false) (let ((aq225f@t aq224d@t)) (let ((aq2261@ls/false (aqd7a@syntax-dispatch aq225f@t '(any . each-any)))) (if (and aq2261@ls/false (apply (lambda (aq2263@c aq2264@ver*) (eq? (aqe60@syntax->datum aq2263@c) 'or)) aq2261@ls/false)) (apply (lambda (aq2267@c aq2268@ver*) (let ((aq226b@p* (map aq2218@version-pred aq2268@ver*))) (lambda (aq226d@x) (exists (lambda (aq226f@p) (aq226f@p aq226d@x)) aq226b@p*)))) aq2261@ls/false) (let ((aq2271@t aq225f@t)) (let ((aq2273@ls/false (aqd7a@syntax-dispatch aq2271@t '(any any)))) (if (and aq2273@ls/false (apply (lambda (aq2275@c aq2276@ver) (eq? (aqe60@syntax->datum aq2275@c) 'not)) aq2273@ls/false)) (apply (lambda (aq2279@c aq227a@ver) (let ((aq227d@p (aq2218@version-pred aq227a@ver))) (lambda (aq227f@x) (not (aq227d@p aq227f@x))))) aq2273@ls/false) (let ((aq2281@t aq2271@t)) (let ((aq2283@ls/false (aqd7a@syntax-dispatch aq2281@t 'each-any))) (if aq2283@ls/false (apply (lambda (aq2285@sub*) (let ((aq2287@p* (map aq2216@subversion-pred aq2285@sub*))) (lambda (aq2289@x) (let aq228f@f ((aq228b@p* aq2287@p*) (aq228c@x aq2289@x)) (if (null? aq228b@p*) '#t (if (null? aq228c@x) '#f (and ((car aq228b@p*) (car aq228c@x)) (aq228f@f (cdr aq228b@p*) (cdr aq228c@x))))))))) aq2283@ls/false) (let ((aq2291@t aq2281@t)) (let ((aq2293@ls/false (aqd7a@syntax-dispatch aq2291@t '_))) (if aq2293@ls/false (apply (lambda () (aqe5a@syntax-violation 'import '"invalid version spec" aq2211@spec aq2245@x*)) aq2293@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq2291@t)))))))))))))))))))))) (let aq221b@f ((aq2219@x aq2211@spec)) (let ((aq221d@t aq2219@x)) (let ((aq221f@ls/false (aqd7a@syntax-dispatch aq221d@t '(each-any)))) (if aq221f@ls/false (apply (lambda (aq2221@version-spec*) (values '() (aq2218@version-pred aq2221@version-spec*))) aq221f@ls/false) (let ((aq2223@t aq221d@t)) (let ((aq2225@ls/false (aqd7a@syntax-dispatch aq2223@t '(any . any)))) (if (and aq2225@ls/false (apply (lambda (aq2227@x aq2228@x*) (aq2146@idsyn? aq2227@x)) aq2225@ls/false)) (apply (lambda (aq222b@x aq222c@x*) (call-with-values (lambda () (aq221b@f aq222c@x*)) (lambda (aq2233@aq2230 aq2234@aq2232) (let ((aq2237@pred aq2234@aq2232) (aq2238@name aq2233@aq2230)) (values (cons (aqe60@syntax->datum aq222b@x) aq2238@name) aq2237@pred))))) aq2225@ls/false) (let ((aq223b@t aq2223@t)) (let ((aq223d@ls/false (aqd7a@syntax-dispatch aq223b@t '()))) (if aq223d@ls/false (apply (lambda () (values '() (lambda (aq223f@x) '#t))) aq223d@ls/false) (let ((aq2241@t aq223b@t)) (let ((aq2243@ls/false (aqd7a@syntax-dispatch aq2241@t '_))) (if aq2243@ls/false (apply (lambda () (aqe5a@syntax-violation '#f '"invalid import spec" aq2211@spec)) aq2243@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq2241@t))))))))))))))))) (aq2156@import-library (lambda (aq2201@spec*) (call-with-values (lambda () (aq2154@parse-library-name aq2201@spec*)) (lambda (aq2207@aq2204 aq2208@aq2206) (let ((aq220b@pred aq2208@aq2206) (aq220c@name aq2207@aq2204)) (begin (if (null? aq220c@name) (aqe5a@syntax-violation 'import '"empty library name" aq2201@spec*) (void)) (let ((aq220f@lib (aq988@aq7cf@find-library-by-name aq220c@name))) (begin (if (not aq220f@lib) (aqe5a@syntax-violation 'import '"cannot find library with required name" aq220c@name) (void)) (if (not (aq220b@pred (aq962@aq783@library-version aq220f@lib))) (aqe5a@syntax-violation 'import '"library does not satisfy version specification" aq2201@spec* aq220f@lib) (void)) ((aqde6@imp-collector) aq220f@lib) (aq96a@aq793@library-subst aq220f@lib))))))))) (aq2158@get-import (lambda (aq2173@spec) (let ((aq2175@t aq2173@spec)) (let ((aq2177@ls/false (aqd7a@syntax-dispatch aq2175@t '(any . each-any)))) (if (and aq2177@ls/false (apply (lambda (aq2179@x aq217a@x*) (not (memq (aqe60@syntax->datum aq2179@x) '(for rename except only prefix library)))) aq2177@ls/false)) (apply (lambda (aq217d@x aq217e@x*) (aq2156@import-library (cons aq217d@x aq217e@x*))) aq2177@ls/false) (let ((aq2181@t aq2175@t)) (let ((aq2183@ls/false (aqd7a@syntax-dispatch aq2181@t '(any any . #(each (any any)))))) (if (and aq2183@ls/false (apply (lambda (aq2185@rename aq2186@isp aq2187@old* aq2188@new*) (and (eq? (aqe60@syntax->datum aq2185@rename) 'rename) (for-all aq2146@idsyn? aq2187@old*) (for-all aq2146@idsyn? aq2188@new*))) aq2183@ls/false)) (apply (lambda (aq218d@rename aq218e@isp aq218f@old* aq2190@new*) (let ((aq2195@subst (aq2158@get-import aq218e@isp)) (aq2196@old* (map aqe60@syntax->datum aq218f@old*)) (aq2197@new* (map aqe60@syntax->datum aq2190@new*))) (let ((aq219b@old-label* (aq214e@find* aq2196@old* aq2195@subst))) (let ((aq219d@subst (aq2150@rem* aq2196@old* aq2195@subst))) (aq214a@merge-substs (map cons aq2197@new* aq219b@old-label*) aq219d@subst))))) aq2183@ls/false) (let ((aq219f@t aq2181@t)) (let ((aq21a1@ls/false (aqd7a@syntax-dispatch aq219f@t '(any any . each-any)))) (if (and aq21a1@ls/false (apply (lambda (aq21a3@except aq21a4@isp aq21a5@sym*) (and (eq? (aqe60@syntax->datum aq21a3@except) 'except) (for-all aq2146@idsyn? aq21a5@sym*))) aq21a1@ls/false)) (apply (lambda (aq21a9@except aq21aa@isp aq21ab@sym*) (let ((aq21af@subst (aq2158@get-import aq21aa@isp))) (aq2150@rem* (map aqe60@syntax->datum aq21ab@sym*) aq21af@subst))) aq21a1@ls/false) (let ((aq21b1@t aq219f@t)) (let ((aq21b3@ls/false (aqd7a@syntax-dispatch aq21b1@t '(any any . each-any)))) (if (and aq21b3@ls/false (apply (lambda (aq21b5@only aq21b6@isp aq21b7@sym*) (and (eq? (aqe60@syntax->datum aq21b5@only) 'only) (for-all aq2146@idsyn? aq21b7@sym*))) aq21b3@ls/false)) (apply (lambda (aq21bb@only aq21bc@isp aq21bd@sym*) (let ((aq21c1@subst (aq2158@get-import aq21bc@isp)) (aq21c2@sym* (map aqe60@syntax->datum aq21bd@sym*))) (let ((aq21c5@sym* (aq2152@remove-dups aq21c2@sym*))) (let ((aq21c7@lab* (aq214e@find* aq21c5@sym* aq21c1@subst))) (map cons aq21c5@sym* aq21c7@lab*))))) aq21b3@ls/false) (let ((aq21c9@t aq21b1@t)) (let ((aq21cb@ls/false (aqd7a@syntax-dispatch aq21c9@t '(any any any)))) (if (and aq21cb@ls/false (apply (lambda (aq21cd@prefix aq21ce@isp aq21cf@p) (and (eq? (aqe60@syntax->datum aq21cd@prefix) 'prefix) (aq2146@idsyn? aq21cf@p))) aq21cb@ls/false)) (apply (lambda (aq21d3@prefix aq21d4@isp aq21d5@p) (let ((aq21d9@subst (aq2158@get-import aq21d4@isp)) (aq21da@prefix (symbol->string (aqe60@syntax->datum aq21d5@p)))) (map (lambda (aq21dd@x) (cons (string->symbol (string-append aq21da@prefix (symbol->string (car aq21dd@x)))) (cdr aq21dd@x))) aq21d9@subst))) aq21cb@ls/false) (let ((aq21df@t aq21c9@t)) (let ((aq21e1@ls/false (aqd7a@syntax-dispatch aq21df@t '(any each-any)))) (if (and aq21e1@ls/false (apply (lambda (aq21e3@library aq21e4@spec*) (eq? (aqe60@syntax->datum aq21e3@library) 'library)) aq21e1@ls/false)) (apply (lambda (aq21e7@library aq21e8@spec*) (aq2156@import-library aq21e8@spec*)) aq21e1@ls/false) (let ((aq21eb@t aq21df@t)) (let ((aq21ed@ls/false (aqd7a@syntax-dispatch aq21eb@t '(any any . any)))) (if (and aq21ed@ls/false (apply (lambda (aq21ef@for aq21f0@isp aq21f1@rest) (eq? (aqe60@syntax->datum aq21ef@for) 'for)) aq21ed@ls/false)) (apply (lambda (aq21f5@for aq21f6@isp aq21f7@rest) (aq2158@get-import aq21f6@isp)) aq21ed@ls/false) (let ((aq21fb@t aq21eb@t)) (let ((aq21fd@ls/false (aqd7a@syntax-dispatch aq21fb@t 'any))) (if aq21fd@ls/false (apply (lambda (aq21ff@spec) (aqe5a@syntax-violation 'import '"invalid import spec" aq21ff@spec)) aq21fd@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq21fb@t))))))))))))))))))))))))))) (aq215a@add-imports! (lambda (aq2163@imp aq2164@h) (let ((aq2167@subst (aq2158@get-import aq2163@imp))) (for-each (lambda (aq2169@x) (let ((aq216b@name (car aq2169@x)) (aq216c@label (cdr aq2169@x))) (let ((aq216f@t (hashtable-ref aq2164@h aq216b@name '#f))) (if aq216f@t ((lambda (aq2171@l) (if (not (eq? aq2171@l aq216c@label)) (aq2148@dup-error aq216b@name) (void))) aq216f@t) (hashtable-set! aq2164@h aq216b@name aq216c@label))))) aq2167@subst))))) (lambda (aq215b@imp*) (let aq2161@f ((aq215d@imp* aq215b@imp*) (aq215e@h (make-eq-hashtable))) (if (null? aq215d@imp*) (hashtable-entries aq215e@h) (begin (aq215a@add-imports! (car aq215d@imp*) aq215e@h) (aq2161@f (cdr aq215d@imp*) aq215e@h))))))) (set! aq287d@aqddc@parse-import-spec* aqddc@parse-import-spec*) (set! aqdde@make-top-rib (lambda (aq2351@names aq2352@labels) (let ((aq2355@rib (aqb27@make-empty-rib))) (begin (vector-for-each (lambda (aq2357@name aq2358@label) (begin (if (not (symbol? aq2357@name)) (error 'make-top-rib '"BUG: not a symbol" aq2357@name) (void)) (aqb2b@extend-rib/nc! aq2355@rib (make-simple-struct 'stx '5 (list aq2357@name aqaf7@top-mark* '() '())) aq2358@label))) aq2351@names aq2352@labels) aq2355@rib)))) (set! aq287e@aqdde@make-top-rib aqdde@make-top-rib) (set! aqde0@make-collector (lambda () (let ((aq235b@ls '())) (lambda aq235f (let ((aq2360 (length aq235f))) (if (= aq2360 '0) (apply (lambda () aq235b@ls) aq235f) (if (= aq2360 '1) (apply (lambda (aq235d@x) (set! aq235b@ls (aqaf0@set-cons aq235d@x aq235b@ls))) aq235f) (error 'apply '"invalid arg count")))))))) (set! aq287f@aqde0@make-collector aqde0@make-collector) (set! aqde2@inv-collector (aq6c3@aq5a1@make-parameter (lambda aq2361@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (aq2363@x) (begin (if (not (procedure? aq2363@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" aq2363@x) (void)) aq2363@x)))) (set! aq2880@aqde2@inv-collector aqde2@inv-collector) (set! aqde4@vis-collector (aq6c3@aq5a1@make-parameter (lambda aq2365@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (aq2367@x) (begin (if (not (procedure? aq2367@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" aq2367@x) (void)) aq2367@x)))) (set! aq2881@aqde4@vis-collector aqde4@vis-collector) (set! aqde6@imp-collector (aq6c3@aq5a1@make-parameter (lambda aq2369@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (aq236b@x) (begin (if (not (procedure? aq236b@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" aq236b@x) (void)) aq236b@x)))) (set! aq2882@aqde6@imp-collector aqde6@imp-collector) (set! aqde8@chi-library-internal (lambda (aq236d@e* aq236e@rib aq236f@top?) (call-with-values (lambda () (aqdd2@chi-body* aq236d@e* '() '() '() '() '() '() '() aq236e@rib aq236f@top?)) (lambda (aq2383@aq2374 aq2384@aq2376 aq2385@aq2378 aq2386@aq237a aq2387@aq237c aq2388@aq237e aq2389@aq2380 aq238a@aq2382) (let ((aq2393@exp* aq238a@aq2382) (aq2394@_kwd* aq2389@aq2380) (aq2395@mod** aq2388@aq237e) (aq2396@rhs* aq2387@aq237c) (aq2397@lex* aq2386@aq237a) (aq2398@mr aq2385@aq2378) (aq2399@r aq2384@aq2376) (aq239a@e* aq2383@aq2374)) (values (append (apply append (reverse aq2395@mod**)) aq239a@e*) aq2399@r aq2398@mr (reverse aq2397@lex*) (reverse aq2396@rhs*) aq2393@exp*)))))) (set! aq2883@aqde8@chi-library-internal aqde8@chi-library-internal) (set! aqdea@chi-interaction-expr (lambda (aq23a3@e aq23a4@rib aq23a5@r) (call-with-values (lambda () (aqdd2@chi-body* (list aq23a3@e) aq23a5@r aq23a5@r '() '() '() '() '() aq23a4@rib '#t)) (lambda (aq23b9@aq23aa aq23ba@aq23ac aq23bb@aq23ae aq23bc@aq23b0 aq23bd@aq23b2 aq23be@aq23b4 aq23bf@aq23b6 aq23c0@aq23b8) (let ((aq23c9@_exp* aq23c0@aq23b8) (aq23ca@_kwd* aq23bf@aq23b6) (aq23cb@mod** aq23be@aq23b4) (aq23cc@rhs* aq23bd@aq23b2) (aq23cd@lex* aq23bc@aq23b0) (aq23ce@mr aq23bb@aq23ae) (aq23cf@r aq23ba@aq23ac) (aq23d0@e* aq23b9@aq23aa)) (let ((aq23d9@e* (aqdaa@expand-interaction-rhs*/init* (reverse aq23cd@lex*) (reverse aq23cc@rhs*) (append (apply append (reverse aq23cb@mod**)) aq23d0@e*) aq23cf@r aq23ce@mr))) (let ((aq23db@e (if (null? aq23d9@e*) (aqad9@aqa3a@build-void) (if (null? (cdr aq23d9@e*)) (car aq23d9@e*) (aqad8@aqa38@build-sequence '#f aq23d9@e*))))) (values aq23db@e aq23cf@r)))))))) (set! aq2884@aqdea@chi-interaction-expr aqdea@chi-interaction-expr) (set! aqdec@library-body-expander (lambda (aq23dd@name aq23de@main-exp* aq23df@imp* aq23e0@b* aq23e1@top?) (letrec* ((aq23e8@itc (aqde0@make-collector))) (let ((aq23f1@aq23ea aqde6@imp-collector) (aq23f2@aq23ec aqe6a@top-level-context) (aq23f3@aq23ee aq23e8@itc) (aq23f4@aq23f0 '#f)) (let ((aq23f9@swap (lambda () (begin (let ((aq23fb@t (aq23f1@aq23ea))) (begin (aq23f1@aq23ea aq23f3@aq23ee) (set! aq23f3@aq23ee aq23fb@t))) (let ((aq23fd@t (aq23f2@aq23ec))) (begin (aq23f2@aq23ec aq23f4@aq23f0) (set! aq23f4@aq23f0 aq23fd@t))))))) (dynamic-wind aq23f9@swap (lambda () (call-with-values (lambda () (aqddc@parse-import-spec* aq23df@imp*)) (lambda (aq2403@aq2400 aq2404@aq2402) (let ((aq2407@subst-labels aq2404@aq2402) (aq2408@subst-names aq2403@aq2400)) (let ((aq240b@rib (aqdde@make-top-rib aq2408@subst-names aq2407@subst-labels))) (letrec* ((aq240e@wrap (lambda (aq2489@x) (make-simple-struct 'stx '5 (list aq2489@x aqaf7@top-mark* (list aq240b@rib) '()))))) (let ((aq240f@b* (map aq240e@wrap aq23e0@b*)) (aq2410@main-exp* (map aq240e@wrap aq23de@main-exp*)) (aq2411@rtc (aqde0@make-collector)) (aq2412@vtc (aqde0@make-collector))) (let ((aq241f@aq2418 aqde2@inv-collector) (aq2420@aq241a aqde4@vis-collector) (aq2421@aq241c aq2411@rtc) (aq2422@aq241e aq2412@vtc)) (let ((aq2427@swap (lambda () (begin (let ((aq2429@t (aq241f@aq2418))) (begin (aq241f@aq2418 aq2421@aq241c) (set! aq2421@aq241c aq2429@t))) (let ((aq242b@t (aq2420@aq241a))) (begin (aq2420@aq241a aq2422@aq241e) (set! aq2422@aq241e aq242b@t))))))) (dynamic-wind aq2427@swap (lambda () (call-with-values (lambda () (aqde8@chi-library-internal aq240f@b* aq240b@rib aq23e1@top?)) (lambda (aq2439@aq242e aq243a@aq2430 aq243b@aq2432 aq243c@aq2434 aq243d@aq2436 aq243e@aq2438) (let ((aq2445@internal-exp* aq243e@aq2438) (aq2446@rhs* aq243d@aq2436) (aq2447@lex* aq243c@aq2434) (aq2448@mr aq243b@aq2432) (aq2449@r aq243a@aq2430) (aq244a@init* aq2439@aq242e)) (call-with-values (lambda () (aqdd6@parse-exports (append aq2410@main-exp* aq2445@internal-exp*))) (lambda (aq2455@aq2452 aq2456@aq2454) (let ((aq2459@exp-id* aq2456@aq2454) (aq245a@exp-name* aq2455@aq2452)) (begin (aqb2f@seal-rib! aq240b@rib) (let ((aq245d@init* (aqd98@chi-expr* aq244a@init* aq2449@r aq2448@mr))) (let ((aq245f@rhs* (aqdac@chi-rhs* aq2446@rhs* aq2449@r aq2448@mr))) (begin (aqb31@unseal-rib! aq240b@rib) (let ((aq2461@loc* (map aqafd@gen-global aq2447@lex*)) (aq2462@export-subst (aqe44@make-export-subst aq245a@exp-name* aq2459@exp-id*))) (letrec* ((aq2466@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (aqe46@make-export-env/macros aq2447@lex* aq2461@loc* aq2449@r)) (lambda (aq246d@aq2468 aq246e@aq246a aq246f@aq246c) (let ((aq2473@macro* aq246f@aq246c) (aq2474@global* aq246e@aq246a) (aq2475@export-env aq246d@aq2468)) (begin (for-each (lambda (aq2479@s) (let ((aq247b@name (car aq2479@s)) (aq247c@label (cdr aq2479@s))) (let ((aq247f@p (assq aq247c@label aq2475@export-env))) (if aq247f@p (let ((aq2481@b (cdr aq247f@p))) (let ((aq2483@type (car aq2481@b))) (if (eq? aq2483@type 'mutable) (aqe5a@syntax-violation 'export aq2466@errstr aq247b@name) (void)))) (void))))) aq2462@export-subst) (let ((aq2485@invoke-body (aqade@aqa44@build-library-letrec* '#f aq23dd@name aq2447@lex* aq2461@loc* aq245f@rhs* (if (null? aq245d@init*) (aqad9@aqa3a@build-void) (aqad8@aqa38@build-sequence '#f aq245d@init*)))) (aq2486@invoke-definitions (map aqad5@aq997@build-global-define (map cdr aq2474@global*)))) (values (aq23e8@itc) (aq2411@rtc) (aq2412@vtc) (aqad8@aqa38@build-sequence '#f (append aq2486@invoke-definitions (list aq2485@invoke-body))) aq2473@macro* aq2462@export-subst aq2475@export-env))))))))))))))))))) aq2427@swap)))))))))) aq23f9@swap)))))) (set! aq2885@aqdec@library-body-expander aqdec@library-body-expander) (set! aqdee@core-library-expander (lambda (aq248b@e aq248c@verify-name) (call-with-values (lambda () (aqdda@parse-library aq248b@e)) (lambda (aq2497@aq2490 aq2498@aq2492 aq2499@aq2494 aq249a@aq2496) (let ((aq249f@b* aq249a@aq2496) (aq24a0@imp* aq2499@aq2494) (aq24a1@exp* aq2498@aq2492) (aq24a2@name* aq2497@aq2490)) (call-with-values (lambda () (aqdd8@parse-library-name aq24a2@name*)) (lambda (aq24ab@aq24a8 aq24ac@aq24aa) (let ((aq24af@ver aq24ac@aq24aa) (aq24b0@name aq24ab@aq24a8)) (begin (aq248c@verify-name aq24b0@name) (call-with-values (lambda () (aqdec@library-body-expander aq24b0@name aq24a1@exp* aq24a0@imp* aq249f@b* '#f)) (lambda (aq24c1@aq24b4 aq24c2@aq24b6 aq24c3@aq24b8 aq24c4@aq24ba aq24c5@aq24bc aq24c6@aq24be aq24c7@aq24c0) (let ((aq24cf@export-env aq24c7@aq24c0) (aq24d0@export-subst aq24c6@aq24be) (aq24d1@visit-code aq24c5@aq24bc) (aq24d2@invoke-code aq24c4@aq24ba) (aq24d3@visit-req* aq24c3@aq24b8) (aq24d4@invoke-req* aq24c2@aq24b6) (aq24d5@imp* aq24c1@aq24b4)) (values aq24b0@name aq24af@ver aq24d5@imp* aq24d4@invoke-req* aq24d3@visit-req* aq24d2@invoke-code aq24d1@visit-code aq24d0@export-subst aq24cf@export-env))))))))))))) (set! aq2886@aqdee@core-library-expander aqdee@core-library-expander) (set! aqdf0@parse-top-level-program (lambda (aq24dd@e*) (let ((aq24df@t aq24dd@e*)) (let ((aq24e1@ls/false (aqd7a@syntax-dispatch aq24df@t '((any . each-any) . each-any)))) (if (and aq24e1@ls/false (apply (lambda (aq24e3@import aq24e4@imp* aq24e5@b*) (eq? (aqe60@syntax->datum aq24e3@import) 'import)) aq24e1@ls/false)) (apply (lambda (aq24e9@import aq24ea@imp* aq24eb@b*) (values aq24ea@imp* aq24eb@b*)) aq24e1@ls/false) (let ((aq24ef@t aq24df@t)) (let ((aq24f1@ls/false (aqd7a@syntax-dispatch aq24ef@t '((any . any) . any)))) (if (and aq24f1@ls/false (apply (lambda (aq24f3@import aq24f4@x aq24f5@y) (eq? (aqe60@syntax->datum aq24f3@import) 'import)) aq24f1@ls/false)) (apply (lambda (aq24f9@import aq24fa@x aq24fb@y) (aqe5a@syntax-violation 'expander '"invalid syntax of top-level program" (aqb6d@syntax-car aq24dd@e*))) aq24f1@ls/false) (let ((aq24ff@t aq24ef@t)) (let ((aq2501@ls/false (aqd7a@syntax-dispatch aq24ff@t '_))) (if aq2501@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) aq2501@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq24ff@t)))))))))))) (set! aq2887@aqdf0@parse-top-level-program aqdf0@parse-top-level-program) (set! aqdf2@top-level-expander (lambda (aq2503@e*) (call-with-values (lambda () (aqdf0@parse-top-level-program aq2503@e*)) (lambda (aq2509@aq2506 aq250a@aq2508) (let ((aq250d@b* aq250a@aq2508) (aq250e@imp* aq2509@aq2506)) (call-with-values (lambda () (aqdec@library-body-expander '() '() aq250e@imp* aq250d@b* '#t)) (lambda (aq251f@aq2512 aq2520@aq2514 aq2521@aq2516 aq2522@aq2518 aq2523@aq251a aq2524@aq251c aq2525@aq251e) (let ((aq252d@export-env aq2525@aq251e) (aq252e@export-subst aq2524@aq251c) (aq252f@visit-code aq2523@aq251a) (aq2530@invoke-code aq2522@aq2518) (aq2531@visit-req* aq2521@aq2516) (aq2532@invoke-req* aq2520@aq2514) (aq2533@imp* aq251f@aq2512)) (values aq2532@invoke-req* aq2530@invoke-code))))))))) (set! aq2888@aqdf2@top-level-expander aqdf2@top-level-expander) (set! aqdf4@rp (aq6c0@aq59b@make-record-printer 'env (lambda (aq253b@x aq253c@p aq253d@wr) (display '"#<environment>" aq253c@p)))) (set! aq2889@aqdf4@rp aqdf4@rp) (set! aqdfe@env? (lambda (aq2541@x) (and (simple-struct? aq2541@x) (eq? (simple-struct-name aq2541@x) 'env)))) (set! aq288a@aqdfe@env? aqdfe@env?) (set! aqe00@env-names (lambda (aq2543@x) (simple-struct-ref aq2543@x '0))) (set! aq288b@aqe00@env-names aqe00@env-names) (set! aqe02@set-env-names! (lambda (aq2545@x aq2546@val) (simple-struct-set! aq2545@x '0 aq2546@val))) (set! aq288c@aqe02@set-env-names! aqe02@set-env-names!) (set! aqe04@env-labels (lambda (aq2549@x) (simple-struct-ref aq2549@x '1))) (set! aq288d@aqe04@env-labels aqe04@env-labels) (set! aqe06@set-env-labels! (lambda (aq254b@x aq254c@val) (simple-struct-set! aq254b@x '1 aq254c@val))) (set! aq288e@aqe06@set-env-labels! aqe06@set-env-labels!) (set! aqe08@env-itc (lambda (aq254f@x) (simple-struct-ref aq254f@x '2))) (set! aq288f@aqe08@env-itc aqe08@env-itc) (set! aqe0a@set-env-itc! (lambda (aq2551@x aq2552@val) (simple-struct-set! aq2551@x '2 aq2552@val))) (set! aq2890@aqe0a@set-env-itc! aqe0a@set-env-itc!) (set! aqe0c@dummy '3) (set! aq2891@aqe0c@dummy aqe0c@dummy) (set! aqe0e@rp (aq6c0@aq59b@make-record-printer 'interaction-env (lambda (aq2555@x aq2556@p aq2557@wr) (display '"#<environment>" aq2556@p)))) (set! aq2892@aqe0e@rp aqe0e@rp) (set! aqe18@interaction-env? (lambda (aq255b@x) (and (simple-struct? aq255b@x) (eq? (simple-struct-name aq255b@x) 'interaction-env)))) (set! aq2893@aqe18@interaction-env? aqe18@interaction-env?) (set! aqe1a@interaction-env-rib (lambda (aq255d@x) (simple-struct-ref aq255d@x '0))) (set! aq2894@aqe1a@interaction-env-rib aqe1a@interaction-env-rib) (set! aqe1c@set-interaction-env-rib! (lambda (aq255f@x aq2560@val) (simple-struct-set! aq255f@x '0 aq2560@val))) (set! aq2895@aqe1c@set-interaction-env-rib! aqe1c@set-interaction-env-rib!) (set! aqe1e@interaction-env-r (lambda (aq2563@x) (simple-struct-ref aq2563@x '1))) (set! aq2896@aqe1e@interaction-env-r aqe1e@interaction-env-r) (set! aqe20@set-interaction-env-r! (lambda (aq2565@x aq2566@val) (simple-struct-set! aq2565@x '1 aq2566@val))) (set! aq2897@aqe20@set-interaction-env-r! aqe20@set-interaction-env-r!) (set! aqe22@interaction-env-locs (lambda (aq2569@x) (simple-struct-ref aq2569@x '2))) (set! aq2898@aqe22@interaction-env-locs aqe22@interaction-env-locs) (set! aqe24@set-interaction-env-locs! (lambda (aq256b@x aq256c@val) (simple-struct-set! aq256b@x '2 aq256c@val))) (set! aq2899@aqe24@set-interaction-env-locs! aqe24@set-interaction-env-locs!) (set! aqe26@dummy '3) (set! aq289a@aqe26@dummy aqe26@dummy) (set! aqe28@interaction-environment-symbols (lambda () (aqe30@environment-symbols (aqe68@interaction-environment)))) (set! aq289b@aqe28@interaction-environment-symbols aqe28@interaction-environment-symbols) (set! aqe2a@environment-bindings (lambda (aq256f@e) (vector->list (vector-map (lambda (aq2571@name aq2572@label) (aqe2c@parse-binding (cons aq2571@name (aq98e@aq7db@imported-label->binding aq2572@label)))) (aqe00@env-names aq256f@e) (aqe04@env-labels aq256f@e))))) (set! aq289c@aqe2a@environment-bindings aqe2a@environment-bindings) (set! aqe2c@parse-binding (lambda (aq2575@b) (cons (car aq2575@b) (let ((aq2577@t (cadr aq2575@b))) (if (memv aq2577@t '(core-prim global)) 'procedure (if (memv aq2577@t '(core-macro macro global-macro)) 'syntax (if (memv aq2577@t '($core-rtd)) 'record (if (eq? (car aq2575@b) (cadr aq2575@b)) 'syntax 'unknown)))))))) (set! aq289d@aqe2c@parse-binding aqe2c@parse-binding) (set! aqe2e@environment? (lambda (aq2579@x) (or (aqdfe@env? aq2579@x) (aqe18@interaction-env? aq2579@x)))) (set! aq289e@aqe2e@environment? aqe2e@environment?) (set! aqe30@environment-symbols (lambda (aq257b@x) (if (aqdfe@env? aq257b@x) (vector->list (aqe00@env-names aq257b@x)) (if (aqe18@interaction-env? aq257b@x) (map values (aqb11@rib-sym* (aqe1a@interaction-env-rib aq257b@x))) (assertion-violation 'environment-symbols '"not an environment" aq257b@x))))) (set! aq289f@aqe30@environment-symbols aqe30@environment-symbols) (set! aqe32@environment (lambda aq257d@imp* (let ((aq257f@itc (aqde0@make-collector))) (let ((aq2585@aq2582 aqde6@imp-collector) (aq2586@aq2584 aq257f@itc)) (let ((aq2589@swap (lambda () (let ((aq258b@t (aq2585@aq2582))) (begin (aq2585@aq2582 aq2586@aq2584) (set! aq2586@aq2584 aq258b@t)))))) (dynamic-wind aq2589@swap (lambda () (call-with-values (lambda () (aqddc@parse-import-spec* aq257d@imp*)) (lambda (aq2591@aq258e aq2592@aq2590) (let ((aq2595@subst-labels aq2592@aq2590) (aq2596@subst-names aq2591@aq258e)) (make-simple-struct 'env '4 (list aq2596@subst-names aq2595@subst-labels aq257f@itc)))))) aq2589@swap)))))) (set! aq28a0@aqe32@environment aqe32@environment) (set! aqe34@null-environment (lambda (aq2599@n) (begin (if (not (eqv? aq2599@n '5)) (assertion-violation 'null-environment '"not 5" aq2599@n) (void)) (aqe32@environment '(psyntax null-environment-5))))) (set! aq28a1@aqe34@null-environment aqe34@null-environment) (set! aqe36@scheme-report-environment (lambda (aq259b@n) (begin (if (not (eqv? aq259b@n '5)) (assertion-violation 'scheme-report-environment '"not 5" aq259b@n) (void)) (aqe32@environment '(psyntax scheme-report-environment-5))))) (set! aq28a2@aqe36@scheme-report-environment aqe36@scheme-report-environment) (set! aqe38@expand (lambda (aq259d@x aq259e@env) (if (aqdfe@env? aq259e@env) (let ((aq25a1@rib (aqdde@make-top-rib (aqe00@env-names aq259e@env) (aqe04@env-labels aq259e@env)))) (let ((aq25a3@x (make-simple-struct 'stx '5 (list aq259d@x aqaf7@top-mark* (list aq25a1@rib) '()))) (aq25a4@itc (aqe08@env-itc aq259e@env)) (aq25a5@rtc (aqde0@make-collector)) (aq25a6@vtc (aqde0@make-collector))) (let ((aq25ab@x (let ((aq25bd@aq25ae aqe6a@top-level-context) (aq25be@aq25b0 aqde2@inv-collector) (aq25bf@aq25b2 aqde4@vis-collector) (aq25c0@aq25b4 aqde6@imp-collector) (aq25c1@aq25b6 '#f) (aq25c2@aq25b8 aq25a5@rtc) (aq25c3@aq25ba aq25a6@vtc) (aq25c4@aq25bc aq25a4@itc)) (let ((aq25cd@swap (lambda () (begin (let ((aq25cf@t (aq25bd@aq25ae))) (begin (aq25bd@aq25ae aq25c1@aq25b6) (set! aq25c1@aq25b6 aq25cf@t))) (let ((aq25d1@t (aq25be@aq25b0))) (begin (aq25be@aq25b0 aq25c2@aq25b8) (set! aq25c2@aq25b8 aq25d1@t))) (let ((aq25d3@t (aq25bf@aq25b2))) (begin (aq25bf@aq25b2 aq25c3@aq25ba) (set! aq25c3@aq25ba aq25d3@t))) (let ((aq25d5@t (aq25c0@aq25b4))) (begin (aq25c0@aq25b4 aq25c4@aq25bc) (set! aq25c4@aq25bc aq25d5@t))))))) (dynamic-wind aq25cd@swap (lambda () (aqd9c@chi-expr aq25a3@x '() '())) aq25cd@swap))))) (begin (aqb2f@seal-rib! aq25a1@rib) (values aq25ab@x (aq25a5@rtc)))))) (if (aqe18@interaction-env? aq259e@env) (let ((aq25d7@rib (aqe1a@interaction-env-rib aq259e@env)) (aq25d8@r (aqe1e@interaction-env-r aq259e@env)) (aq25d9@rtc (aqde0@make-collector))) (let ((aq25dd@x (make-simple-struct 'stx '5 (list aq259d@x aqaf7@top-mark* (list aq25d7@rib) '())))) (call-with-values (lambda () (let ((aq25f3@aq25e4 aqe6a@top-level-context) (aq25f4@aq25e6 aqde2@inv-collector) (aq25f5@aq25e8 aqde4@vis-collector) (aq25f6@aq25ea aqde6@imp-collector) (aq25f7@aq25ec aq259e@env) (aq25f8@aq25ee aq25d9@rtc) (aq25f9@aq25f0 (aqde0@make-collector)) (aq25fa@aq25f2 (aqde0@make-collector))) (let ((aq2603@swap (lambda () (begin (let ((aq2605@t (aq25f3@aq25e4))) (begin (aq25f3@aq25e4 aq25f7@aq25ec) (set! aq25f7@aq25ec aq2605@t))) (let ((aq2607@t (aq25f4@aq25e6))) (begin (aq25f4@aq25e6 aq25f8@aq25ee) (set! aq25f8@aq25ee aq2607@t))) (let ((aq2609@t (aq25f5@aq25e8))) (begin (aq25f5@aq25e8 aq25f9@aq25f0) (set! aq25f9@aq25f0 aq2609@t))) (let ((aq260b@t (aq25f6@aq25ea))) (begin (aq25f6@aq25ea aq25fa@aq25f2) (set! aq25fa@aq25f2 aq260b@t))))))) (dynamic-wind aq2603@swap (lambda () (aqdea@chi-interaction-expr aq25dd@x aq25d7@rib aq25d8@r)) aq2603@swap)))) (lambda (aq260d@aq25e0 aq260e@aq25e2) (let ((aq2611@r^ aq260e@aq25e2) (aq2612@e aq260d@aq25e0)) (begin (aqe20@set-interaction-env-r! aq259e@env aq2611@r^) (values aq2612@e (aq25d9@rtc)))))))) (assertion-violation 'expand '"not an environment" aq259e@env))))) (set! aq28a3@aqe38@expand aqe38@expand) (set! aqe3a@eval (lambda (aq2615@x aq2616@env) (begin (if (not (aqe2e@environment? aq2616@env)) (error 'eval '"not an environment" aq2616@env) (void)) (call-with-values (lambda () (aqe38@expand aq2615@x aq2616@env)) (lambda (aq261d@aq261a aq261e@aq261c) (let ((aq2621@invoke-req* aq261e@aq261c) (aq2622@x aq261d@aq261a)) (begin (for-each aq98f@aq7dd@invoke-library aq2621@invoke-req*) (eval-core (aq719@aq6d1@expanded->core aq2622@x))))))))) (set! aq28a4@aqe3a@eval aqe3a@eval) (set! aqe3c@library-expander (lambda aq2693 (let ((aq2694 (length aq2693))) (if (= aq2694 '3) (apply (lambda (aq2625@x aq2626@filename aq2627@verify-name) (letrec* ((aq262c@build-visit-code (lambda (aq2681@macro*) (if (null? aq2681@macro*) (aqad9@aqa3a@build-void) (aqad8@aqa38@build-sequence '#f (map (lambda (aq2683@x) (let ((aq2685@loc (car aq2683@x)) (aq2686@src (cddr aq2683@x))) (list 'set! aq2685@loc aq2686@src))) aq2681@macro*))))) (aq262e@visit! (lambda (aq2679@macro*) (for-each (lambda (aq267b@x) (let ((aq267d@loc (car aq267b@x)) (aq267e@proc (cadr aq267b@x))) (set-symbol-value! aq267d@loc aq267e@proc))) aq2679@macro*)))) (call-with-values (lambda () (aqdee@core-library-expander aq2625@x aq2627@verify-name)) (lambda (aq2641@aq2630 aq2642@aq2632 aq2643@aq2634 aq2644@aq2636 aq2645@aq2638 aq2646@aq263a aq2647@aq263c aq2648@aq263e aq2649@aq2640) (let ((aq2653@export-env aq2649@aq2640) (aq2654@export-subst aq2648@aq263e) (aq2655@macro* aq2647@aq263c) (aq2656@invoke-code aq2646@aq263a) (aq2657@vis* aq2645@aq2638) (aq2658@inv* aq2644@aq2636) (aq2659@imp* aq2643@aq2634) (aq265a@ver aq2642@aq2632) (aq265b@name aq2641@aq2630)) (let ((aq2665@id (gensym)) (aq2666@name aq265b@name) (aq2667@ver aq265a@ver) (aq2668@imp* (map aq993@aq7e5@library-spec aq2659@imp*)) (aq2669@vis* (map aq993@aq7e5@library-spec aq2657@vis*)) (aq266a@inv* (map aq993@aq7e5@library-spec aq2658@inv*)) (aq266b@visit-proc (lambda () (aq262e@visit! aq2655@macro*))) (aq266c@invoke-proc (lambda () (eval-core (aq719@aq6d1@expanded->core aq2656@invoke-code)))) (aq266d@visit-code (aq262c@build-visit-code aq2655@macro*)) (aq266e@invoke-code aq2656@invoke-code)) (begin (aq98d@aq7d9@install-library aq2665@id aq2666@name aq2667@ver aq2668@imp* aq2669@vis* aq266a@inv* aq2654@export-subst aq2653@export-env aq266b@visit-proc aq266c@invoke-proc aq266d@visit-code aq266e@invoke-code '#t aq2626@filename) (values aq2665@id aq2666@name aq2667@ver aq2668@imp* aq2669@vis* aq266a@inv* aq266e@invoke-code aq266d@visit-code aq2654@export-subst aq2653@export-env)))))))) aq2693) (if (= aq2694 '2) (apply (lambda (aq2689@x aq268a@filename) (aqe3c@library-expander aq2689@x aq268a@filename (lambda (aq268d@x) (values)))) aq2693) (if (= aq2694 '1) (apply (lambda (aq268f@x) (aqe3c@library-expander aq268f@x '#f (lambda (aq2691@x) (values)))) aq2693) (error 'apply '"invalid arg count"))))))) (set! aq28a5@aqe3c@library-expander aqe3c@library-expander) (set! aqe3e@boot-library-expand (lambda (aq2695@x) (call-with-values (lambda () (aqe3c@library-expander aq2695@x)) (lambda (aq26ab@aq2698 aq26ac@aq269a aq26ad@aq269c aq26ae@aq269e aq26af@aq26a0 aq26b0@aq26a2 aq26b1@aq26a4 aq26b2@aq26a6 aq26b3@aq26a8 aq26b4@aq26aa) (let ((aq26bf@export-env aq26b4@aq26aa) (aq26c0@export-subst aq26b3@aq26a8) (aq26c1@visit-code aq26b2@aq26a6) (aq26c2@invoke-code aq26b1@aq26a4) (aq26c3@inv* aq26b0@aq26a2) (aq26c4@vis* aq26af@aq26a0) (aq26c5@imp* aq26ae@aq269e) (aq26c6@ver aq26ad@aq269c) (aq26c7@name aq26ac@aq269a) (aq26c8@id aq26ab@aq2698)) (values aq26c7@name aq26c2@invoke-code aq26c0@export-subst aq26bf@export-env)))))) (set! aq28a6@aqe3e@boot-library-expand aqe3e@boot-library-expand) (set! aqe40@rev-map-append (lambda (aq26d3@f aq26d4@ls aq26d5@ac) (if (null? aq26d4@ls) aq26d5@ac (aqe40@rev-map-append aq26d3@f (cdr aq26d4@ls) (cons (aq26d3@f (car aq26d4@ls)) aq26d5@ac))))) (set! aq28a7@aqe40@rev-map-append aqe40@rev-map-append) (set! aqe42@build-exports (lambda (aq26d9@lex*+loc* aq26da@init*) (aqad8@aqa38@build-sequence '#f (cons (aqad9@aqa3a@build-void) (aqe40@rev-map-append (lambda (aq26dd@x) (list 'set! (cdr aq26dd@x) (car aq26dd@x))) aq26d9@lex*+loc* aq26da@init*))))) (set! aq28a8@aqe42@build-exports aqe42@build-exports) (set! aqe44@make-export-subst (lambda (aq26df@name* aq26e0@id*) (map (lambda (aq26e3@name aq26e4@id) (let ((aq26e7@label (aqb89@id->label aq26e4@id))) (begin (if (not aq26e7@label) (aqe5a@syntax-violation '#f '"cannot export unbound identifier" aq26e4@id) (void)) (cons aq26e3@name aq26e7@label)))) aq26df@name* aq26e0@id*))) (set! aq28a9@aqe44@make-export-subst aqe44@make-export-subst) (set! aqe46@make-export-env/macros (lambda (aq26e9@lex* aq26ea@loc* aq26eb@r) (letrec* ((aq26f0@lookup (lambda (aq270d@x) (let aq2715@f ((aq270f@x aq270d@x) (aq2710@lex* aq26e9@lex*) (aq2711@loc* aq26ea@loc*)) (if (pair? aq2710@lex*) (if (eq? aq270f@x (car aq2710@lex*)) (car aq2711@loc*) (aq2715@f aq270f@x (cdr aq2710@lex*) (cdr aq2711@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let aq26f9@f ((aq26f1@r aq26eb@r) (aq26f2@env '()) (aq26f3@global* '()) (aq26f4@macro* '())) (if (null? aq26f1@r) (values aq26f2@env aq26f3@global* aq26f4@macro*) (let ((aq26fb@x (car aq26f1@r))) (let ((aq26fd@label (car aq26fb@x)) (aq26fe@b (cdr aq26fb@x))) (let ((aq2701@t (aqb8f@binding-type aq26fe@b))) (if (memv aq2701@t '(lexical)) (let ((aq2703@v (aqb91@binding-value aq26fe@b))) (let ((aq2705@loc (aq26f0@lookup (aqd04@lexical-var aq2703@v))) (aq2706@type (if (aqd06@lexical-mutable? aq2703@v) 'mutable 'global))) (aq26f9@f (cdr aq26f1@r) (cons (cons* aq26fd@label aq2706@type aq2705@loc) aq26f2@env) (cons (cons (aqd04@lexical-var aq2703@v) aq2705@loc) aq26f3@global*) aq26f4@macro*))) (if (memv aq2701@t '(local-macro)) (let ((aq2709@loc (gensym))) (aq26f9@f (cdr aq26f1@r) (cons (cons* aq26fd@label 'global-macro aq2709@loc) aq26f2@env) aq26f3@global* (cons (cons aq2709@loc (aqb91@binding-value aq26fe@b)) aq26f4@macro*))) (if (memv aq2701@t '(local-macro!)) (let ((aq270b@loc (gensym))) (aq26f9@f (cdr aq26f1@r) (cons (cons* aq26fd@label 'global-macro! aq270b@loc) aq26f2@env) aq26f3@global* (cons (cons aq270b@loc (aqb91@binding-value aq26fe@b)) aq26f4@macro*))) (if (memv aq2701@t '($rtd $module)) (aq26f9@f (cdr aq26f1@r) (cons aq26fb@x aq26f2@env) aq26f3@global* aq26f4@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (aqb8f@binding-type aq26fe@b) (aqb91@binding-value aq26fe@b)))))))))))))) (set! aq28aa@aqe46@make-export-env/macros aqe46@make-export-env/macros) (set! aqe48@generate-temporaries (lambda (aq2717@ls) (let ((aq2719@t aq2717@ls)) (let ((aq271b@ls/false (aqd7a@syntax-dispatch aq2719@t 'each-any))) (if aq271b@ls/false (apply (lambda (aq271d@ls) (map (lambda (aq271f@x) (make-simple-struct 'stx '5 (list (let ((aq2721@x (aqe60@syntax->datum aq271f@x))) (if (or (symbol? aq2721@x) (string? aq2721@x)) (gensym aq2721@x) (gensym 't))) aqaf7@top-mark* '() '()))) aq271d@ls)) aq271b@ls/false) (let ((aq2723@t aq2719@t)) (let ((aq2725@ls/false (aqd7a@syntax-dispatch aq2723@t '_))) (if aq2725@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) aq2725@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq2723@t))))))))) (set! aq28ab@aqe48@generate-temporaries aqe48@generate-temporaries) (set! aqe4a@free-identifier=? (lambda (aq2727@x aq2728@y) (if (aqb73@id? aq2727@x) (if (aqb73@id? aq2728@y) (aqb79@free-id=? aq2727@x aq2728@y) (assertion-violation 'free-identifier=? '"not an identifier" aq2728@y)) (assertion-violation 'free-identifier=? '"not an identifier" aq2727@x)))) (set! aq28ac@aqe4a@free-identifier=? aqe4a@free-identifier=?) (set! aqe4c@bound-identifier=? (lambda (aq272b@x aq272c@y) (if (aqb73@id? aq272b@x) (if (aqb73@id? aq272c@y) (aqb77@bound-id=? aq272b@x aq272c@y) (assertion-violation 'bound-identifier=? '"not an identifier" aq272c@y)) (assertion-violation 'bound-identifier=? '"not an identifier" aq272b@x)))) (set! aq28ad@aqe4c@bound-identifier=? aqe4c@bound-identifier=?) (set! aqe4e@make-source-condition (lambda (aq272f@x) (letrec* ((aq2739@aq2734 (make-record-type-descriptor '&source-information &condition-rtd 'aq2737 '#f '#f '#((immutable file-name) (immutable line)))) (aq273b@aq2736 '#f) (aq273d@aq2735 (make-record-constructor-descriptor aq2739@aq2734 &condition-rcd aq273b@aq2736)) (aq2740@aq2733 (record-predicate aq2739@aq2734)) (aq2742@make-source-condition (record-constructor aq273d@aq2735)) (aq2744@aq2731 (record-accessor aq2739@aq2734 '0)) (aq2746@aq2732 (record-accessor aq2739@aq2734 '1)) (aq2748@source-condition? (condition-predicate aq2739@aq2734)) (aq274a@source-filename (condition-accessor aq2739@aq2734 aq2744@aq2731)) (aq274c@source-character (condition-accessor aq2739@aq2734 aq2746@aq2732))) (if (and (pair? aq272f@x) (pair? (cdr aq272f@x))) (aq2742@make-source-condition (car aq272f@x) (cadr aq272f@x)) (condition))))) (set! aq28ae@aqe4e@make-source-condition aqe4e@make-source-condition) (set! aqe50@extract-position-condition (lambda (aq274d@x) (aqe4e@make-source-condition (aqe52@expression-position aq274d@x)))) (set! aq28af@aqe50@extract-position-condition aqe50@extract-position-condition) (set! aqe52@expression-position (lambda (aq274f@x) (and (aqb3f@stx? aq274f@x) (let ((aq2751@x (aqb41@stx-expr aq274f@x))) (and (aq6b7@aq589@annotation? aq2751@x) (aq6b8@aq58b@annotation-source aq2751@x)))))) (set! aq28b0@aqe52@expression-position aqe52@expression-position) (set! aqe54@assertion-error (lambda (aq2753@expr aq2754@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list aq2753@expr)) (aqe4e@make-source-condition aq2754@pos))))) (set! aq28b1@aqe54@assertion-error aqe54@assertion-error) (set! aqe56@syntax-error (lambda (aq2757@x . aq2759@args) (begin (if (not (for-all string? aq2759@args)) (assertion-violation 'syntax-error '"invalid argument" aq2759@args) (void)) (raise (condition (make-message-condition (if (null? aq2759@args) '"invalid syntax" (apply string-append aq2759@args))) (make-syntax-violation (aqe60@syntax->datum aq2757@x) '#f) (aqe50@extract-position-condition aq2757@x)))))) (set! aq28b2@aqe56@syntax-error aqe56@syntax-error) (set! aqe58@syntax-violation* (lambda (aq275b@who aq275c@msg aq275d@form aq275e@condition-object) (begin (if (not (string? aq275c@msg)) (assertion-violation 'syntax-violation '"message is not a string" aq275c@msg) (void)) (let ((aq2763@who (if (or (string? aq275b@who) (symbol? aq275b@who)) aq275b@who (if (not aq275b@who) (let ((aq2765@t aq275d@form)) (let ((aq2767@ls/false (aqd7a@syntax-dispatch aq2765@t 'any))) (if (and aq2767@ls/false (apply (lambda (aq2769@id) (aqb73@id? aq2769@id)) aq2767@ls/false)) (apply (lambda (aq276b@id) (aqe60@syntax->datum aq276b@id)) aq2767@ls/false) (let ((aq276d@t aq2765@t)) (let ((aq276f@ls/false (aqd7a@syntax-dispatch aq276d@t '(any . any)))) (if (and aq276f@ls/false (apply (lambda (aq2771@id aq2772@rest) (aqb73@id? aq2771@id)) aq276f@ls/false)) (apply (lambda (aq2775@id aq2776@rest) (aqe60@syntax->datum aq2775@id)) aq276f@ls/false) (let ((aq2779@t aq276d@t)) (let ((aq277b@ls/false (aqd7a@syntax-dispatch aq2779@t '_))) (if aq277b@ls/false (apply (lambda () '#f) aq277b@ls/false) (aqe5a@syntax-violation '#f '"invalid syntax" aq2779@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" aq275b@who))))) (raise (condition (if aq2763@who (make-who-condition aq2763@who) (condition)) (make-message-condition aq275c@msg) aq275e@condition-object (aqe50@extract-position-condition aq275d@form))))))) (set! aq28b3@aqe58@syntax-violation* aqe58@syntax-violation*) (set! aqe5a@syntax-violation (lambda aq278b (let ((aq278c (length aq278b))) (if (= aq278c '3) (apply (lambda (aq277d@who aq277e@msg aq277f@form) (aqe5a@syntax-violation aq277d@who aq277e@msg aq277f@form '#f)) aq278b) (if (= aq278c '4) (apply (lambda (aq2783@who aq2784@msg aq2785@form aq2786@subform) (aqe58@syntax-violation* aq2783@who aq2784@msg aq2785@form (make-syntax-violation (aqe60@syntax->datum aq2785@form) (aqe60@syntax->datum aq2786@subform)))) aq278b) (error 'apply '"invalid arg count")))))) (set! aq28b4@aqe5a@syntax-violation aqe5a@syntax-violation) (set! aqe5c@identifier? (lambda (aq278d@x) (aqb73@id? aq278d@x))) (set! aq28b5@aqe5c@identifier? aqe5c@identifier?) (set! aqe5e@datum->syntax (lambda (aq278f@id aq2790@datum) (if (aqb73@id? aq278f@id) (aqb53@datum->stx aq278f@id aq2790@datum) (assertion-violation 'datum->syntax '"not an identifier" aq278f@id)))) (set! aq28b6@aqe5e@datum->syntax aqe5e@datum->syntax) (set! aqe60@syntax->datum (lambda (aq2793@x) (aqb87@stx->datum aq2793@x))) (set! aq28b7@aqe60@syntax->datum aqe60@syntax->datum) (set! aqe62@ungensym-all (lambda (aq2795@code) (if (pair? aq2795@code) (cons (aqe62@ungensym-all (car aq2795@code)) (aqe62@ungensym-all (cdr aq2795@code))) (if (symbol? aq2795@code) (ungensym aq2795@code) aq2795@code)))) (set! aq28b8@aqe62@ungensym-all aqe62@ungensym-all) (set! aqe64@compile-r6rs-top-level (lambda (aq2797@x*) (call-with-values (lambda () (aqdf2@top-level-expander aq2797@x*)) (lambda (aq279d@aq279a aq279e@aq279c) (let ((aq27a1@invoke-code aq279e@aq279c) (aq27a2@lib* aq279d@aq279a)) (lambda () (begin (for-each aq98f@aq7dd@invoke-library aq27a2@lib*) (let ((aq27a5@expanded (aq719@aq6d1@expanded->core aq27a1@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (aqe62@ungensym-all aq27a5@expanded)) (void)) (eval-core aq27a5@expanded)))))))))) (set! aq28b9@aqe64@compile-r6rs-top-level aqe64@compile-r6rs-top-level) (set! aqe66@pre-compile-r6rs-top-level (lambda (aq27a7@x*) (call-with-values (lambda () (aqdf2@top-level-expander aq27a7@x*)) (lambda (aq27ad@aq27aa aq27ae@aq27ac) (let ((aq27b1@invoke-code aq27ae@aq27ac) (aq27b2@lib* aq27ad@aq27aa)) (begin (for-each aq98f@aq7dd@invoke-library aq27b2@lib*) (aq6c1@aq59d@compile-core (aq719@aq6d1@expanded->core aq27b1@invoke-code)))))))) (set! aq28ba@aqe66@pre-compile-r6rs-top-level aqe66@pre-compile-r6rs-top-level) (set! aqe68@interaction-environment (let ((aq27b5@the-env '#f)) (lambda () (or aq27b5@the-env (let ((aq27b7@lib (aq988@aq7cf@find-library-by-name '(mosh interaction))) (aq27b8@rib (aqb27@make-empty-rib))) (begin (let ((aq27bb@subst (aq96a@aq793@library-subst aq27b7@lib))) (begin (aqb13@set-rib-sym*! aq27b8@rib (map car aq27bb@subst)) (aqb17@set-rib-mark**! aq27b8@rib (map (lambda (aq27bd@x) aqaf7@top-mark*) aq27bb@subst)) (aqb1b@set-rib-label*! aq27b8@rib (map cdr aq27bb@subst)))) (let ((aq27bf@env (make-simple-struct 'interaction-env '4 (list aq27b8@rib '() '())))) (begin (set! aq27b5@the-env aq27bf@env) aq27bf@env)))))))) (set! aq28bb@aqe68@interaction-environment aqe68@interaction-environment) (set! aqe6a@top-level-context (aq6c3@aq5a1@make-parameter '#f)) (set! aq28bc@aqe6a@top-level-context aqe6a@top-level-context) (aq985@aq7c9@current-library-expander aqe3c@library-expander))
(begin (begin (aq716@aq6cb@current-primitive-locations (lambda (aq2e0d@x) (let ((aq2e0f@t (assq aq2e0d@x '((syntax-error . aq28b2@aqe56@syntax-error) (syntax-dispatch . aq2850@aqd7a@syntax-dispatch) (load . aq2a3c@aq28e3@load) (interaction-environment . aq28bb@aqe68@interaction-environment) (library-path . aq97d@aq7b9@library-path) (mosh-cache-dir . aq6c4@aq5a3@mosh-cache-dir) (make-parameter . aq6c3@aq5a1@make-parameter) (make-variable-transformer . aq280d@aqba5@make-variable-transformer) (identifier? . aq28b5@aqe5c@identifier?) (generate-temporaries . aq28ab@aqe48@generate-temporaries) (free-identifier=? . aq28ac@aqe4a@free-identifier=?) (syntax->datum . aq28b7@aqe60@syntax->datum) (datum->syntax . aq28b6@aqe5e@datum->syntax) (bound-identifier=? . aq28ad@aqe4c@bound-identifier=?) (scheme-report-environment . aq28a2@aqe36@scheme-report-environment) (null-environment . aq28a1@aqe34@null-environment) (command-line . aq2a39@aq28dd@command-line) (eval . aq28a4@aqe3a@eval) (environment . aq28a0@aqe32@environment) (syntax-violation . aq28b4@aqe5a@syntax-violation) (assertion-error . aq28b1@aqe54@assertion-error))))) (if aq2e0f@t (cdr aq2e0f@t) '#f)))) (aq98d@aq7d9@install-library 'aq2dea '(mosh interaction) '() '() '() '() '((regexp? . aq2daa) (alist->eq-hash-table . aq2da6) (format . aq2da3) (string-split . aq2d96) (call-process . aq2d90) (set-current-directory! . aq2d8c) (expand-path . aq2d8b) (current-directory . aq2d8a) (%spawn . aq2d89) (%waitpid . aq2d88) (simple-struct-name . aq2d87) (simple-struct-set! . aq2d86) (simple-struct-ref . aq2d85) (make-simple-struct . aq2d84) (simple-struct? . aq2d83) (pointer-ref-c-int64 . aq2d82) (pointer-ref-c-int32 . aq2d81) (pointer-ref-c-int16 . aq2d80) (pointer-ref-c-int8 . aq2d7f) (pointer-ref-c-uint64 . aq2d7e) (pointer-ref-c-uint32 . aq2d7d) (pointer-ref-c-uint16 . aq2d7c) (pointer-ref-c-uint8 . aq2d7b) (pointer-set-c-uint64! . aq2d7a) (pointer-set-c-uint32! . aq2d79) (pointer-set-c-uint16! . aq2d78) (pointer-set-c-uint8! . aq2d77) (pointer-set-c-int64! . aq2d76) (pointer-set-c-int32! . aq2d75) (pointer-set-c-int16! . aq2d74) (pointer-set-c-int8! . aq2d73) (pointer-set-c-pointer! . aq2d72) (pointer-set-c-double! . aq2d71) (pointer-set-c-float! . aq2d70) (pointer-set-c-long-long! . aq2d6f) (pointer-set-c-long! . aq2d6e) (pointer-set-c-int! . aq2d6d) (pointer-set-c-short! . aq2d6c) (pointer-set-c-char! . aq2d6b) (pointer-ref-c-pointer . aq2d6a) (pointer-ref-c-double . aq2d69) (pointer-ref-c-float . aq2d68) (pointer-ref-c-unsigned-long-long . aq2d67) (pointer-ref-c-signed-long-long . aq2d66) (pointer-ref-c-unsigned-long . aq2d65) (pointer-ref-c-signed-long . aq2d64) (pointer-ref-c-unsigned-int . aq2d63) (pointer-ref-c-signed-int . aq2d62) (pointer-ref-c-unsigned-short . aq2d61) (pointer-ref-c-signed-short . aq2d60) (pointer-ref-c-unsigned-char . aq2d5f) (pointer-ref-c-signed-char . aq2d5e) (pointer->integer . aq2d5d) (integer->pointer . aq2d5c) (pointer? . aq2d5b) (shared-errno . aq2d5a) (%ffi-supported? . aq2d55) (%ffi-pointer->string . aq2d54) (%ffi-call . aq2d53) (%ffi-lookup . aq2d52) (%ffi-open . aq2d51) (null-terminated-utf8->string . aq2d50) (null-terminated-bytevector->string . aq2d4f) (%exec . aq2d4e) (%fork . aq2d4d) (%pipe . aq2d4c) (p . aq2d4b) (whereis . aq2d2f) (register . aq2d2e) (vm-join! . aq2d2d) (vm-set-value! . aq2d2c) (vm? . aq2d2b) (main-vm? . aq2d2a) (vm-eval . aq2d29) (vm-self . aq2d28) (vm-start! . aq2d27) (make-vm . aq2d26) (mutex-try-lock! . aq2d25) (mutex-unlock! . aq2d24) (mutex-lock! . aq2d23) (mutex? . aq2d22) (make-mutex . aq2d21) (condition-variable-notify-all! . aq2d20) (condition-variable-notify! . aq2d1f) (condition-variable-wait! . aq2d1e) (make-condition-variable . aq2d1d) (write/ss . aq2d1c) (string-upcase . aq2d04) (string-titlecase . aq2d03) (string-normalize-nfkd . aq2d02) (string-normalize-nfkc . aq2d01) (string-normalize-nfd . aq2d00) (string-normalize-nfc . aq2cff) (string-foldcase . aq2cfe) (string-downcase . aq2cfd) (string-ci>? . aq2cfc) (string-ci>=? . aq2cfb) (string-ci=? . aq2cfa) (string-ci<? . aq2cf9) (string-ci<=? . aq2cf8) (char-whitespace? . aq2cf7) (char-upper-case? . aq2cf6) (char-title-case? . aq2cf5) (char-numeric? . aq2cf4) (char-lower-case? . aq2cf3) (char-general-category . aq2cf2) (char-upcase . aq2cf1) (char-titlecase . aq2cf0) (char-foldcase . aq2cef) (char-downcase . aq2cee) (char-ci>? . aq2ced) (char-ci>=? . aq2cec) (char-ci=? . aq2ceb) (char-ci<? . aq2cea) (char-ci<=? . aq2ce9) (char-alphabetic? . aq2ce8) (make-variable-transformer . aqba4) (identifier? . aqe5b) (generate-temporaries . aqe47) (free-identifier=? . aqe49) (syntax->datum . aqe5f) (datum->syntax . aqe5d) (bound-identifier=? . aqe4b) (record-type-descriptor? . aq2ce7) (record-predicate . aq2ce6) (record-mutator . aq2ce5) (record-constructor . aq2ce4) (record-accessor . aq2ce3) (make-record-type-descriptor . aq2ce2) (make-record-constructor-descriptor . aq2ce1) (record? . aq2ce0) (record-type-uid . aq2cdf) (record-type-sealed? . aq2cde) (record-type-parent . aq2cdd) (record-type-opaque? . aq2cdc) (record-type-name . aq2cdb) (record-type-generative? . aq2cda) (record-type-field-names . aq2cd9) (record-rtd . aq2cd8) (record-field-mutable? . aq2cd7) (delete-file . aq2cd6) (file-exists? . aq2cd5) (vector-sort! . aq2cd4) (vector-sort . aq2cd3) (list-sort . aq2cd2) (symbol-hash . aq2cd1) (string-ci-hash . aq2cd0) (string-hash . aq2ccf) (equal-hash . aq2cce) (hashtable-equivalence-function . aq2ccd) (make-hashtable . aq2ccc) (hashtable-hash-function . aq2ccb) (make-eqv-hashtable . aq2cca) (make-eq-hashtable . aq2cc9) (hashtable? . aq2cc8) (hashtable-update! . aq2cc7) (hashtable-size . aq2cc6) (hashtable-set! . aq2cc5) (hashtable-ref . aq2cc4) (hashtable-mutable? . aq2cc3) (hashtable-keys . aq2cc2) (hashtable-entries . aq2cc1) (hashtable-delete! . aq2cc0) (hashtable-copy . aq2cbf) (hashtable-contains? . aq2cbe) (hashtable-clear! . aq2cbd) (call-with-output-file . aq2cbc) (call-with-input-file . aq2cbb) (write-char . aq2cba) (write . aq2cb9) (with-output-to-file . aq2cb8) (with-input-from-file . aq2cb7) (read-char . aq2cb6) (read . aq2cb5) (peek-char . aq2cb4) (open-output-file . aq2cb3) (open-input-file . aq2cb2) (newline . aq2cb1) (display . aq2cb0) (close-output-port . aq2caf) (close-input-port . aq2cae) (eof-object? . aq2cad) (eof-object . aq2cac) (current-error-port . aq2cab) (current-output-port . aq2caa) (current-input-port . aq2ca9) (output-port? . aq2ca8) (input-port? . aq2ca7) (utf-8-codec . aq2ca6) (utf-16-codec . aq2ca5) (transcoder-error-handling-mode . aq2ca4) (transcoder-eol-style . aq2ca3) (transcoder-codec . aq2ca2) (transcoded-port . aq2ca1) (textual-port? . aq2ca0) (string->bytevector . aq2c9f) (standard-output-port . aq2c9e) (standard-input-port . aq2c9d) (standard-error-port . aq2c9c) (set-port-position! . aq2c9b) (put-u8 . aq2c9a) (put-string . aq2c99) (put-datum . aq2c98) (put-char . aq2c97) (put-bytevector . aq2c96) (port? . aq2c95) (port-transcoder . aq2c94) (port-position . aq2c93) (port-has-set-port-position!? . aq2c92) (port-has-port-position? . aq2c91) (port-eof? . aq2c90) (output-port-buffer-mode . aq2c8f) (open-string-output-port . aq2c8e) (open-string-input-port . aq2c8d) (open-file-output-port . aq2c8c) (open-file-input/output-port . aq2c8b) (open-file-input-port . aq2c8a) (open-bytevector-output-port . aq2c89) (open-bytevector-input-port . aq2c88) (native-transcoder . aq2c87) (native-eol-style . aq2c86) (make-transcoder . aq2c85) (latin-1-codec . aq2c84) (make-i/o-write-error . aq2c83) (make-i/o-read-error . aq2c82) (make-i/o-port-error . aq2c81) (make-i/o-invalid-position-error . aq2c80) (make-i/o-filename-error . aq2c7f) (make-i/o-file-protection-error . aq2c7e) (make-i/o-file-is-read-only-error . aq2c7d) (make-i/o-file-does-not-exist-error . aq2c7c) (make-i/o-file-already-exists-error . aq2c7b) (make-i/o-error . aq2c7a) (make-i/o-encoding-error . aq2c79) (make-i/o-decoding-error . aq2c78) (make-custom-textual-output-port . aq2c77) (make-custom-textual-input/output-port . aq2c76) (make-custom-textual-input-port . aq2c75) (make-custom-binary-output-port . aq2c74) (make-custom-binary-input/output-port . aq2c73) (make-custom-binary-input-port . aq2c72) (make-bytevector . aq2c71) (lookahead-u8 . aq2c70) (lookahead-char . aq2c6f) (i/o-write-error? . aq2c6e) (i/o-read-error? . aq2c6d) (i/o-port-error? . aq2c6c) (i/o-invalid-position-error? . aq2c6b) (i/o-filename-error? . aq2c6a) (i/o-file-protection-error? . aq2c69) (i/o-file-is-read-only-error? . aq2c68) (i/o-file-does-not-exist-error? . aq2c67) (i/o-file-already-exists-error? . aq2c66) (i/o-error? . aq2c65) (i/o-error-position . aq2c64) (i/o-error-port . aq2c63) (i/o-error-filename . aq2c62) (i/o-encoding-error? . aq2c61) (i/o-encoding-error-char . aq2c60) (i/o-decoding-error? . aq2c5f) (get-u8 . aq2c5e) (get-string-n! . aq2c5d) (get-string-n . aq2c5c) (get-string-all . aq2c5b) (get-line . aq2c5a) (get-datum . aq2c59) (get-char . aq2c58) (get-bytevector-some . aq2c57) (get-bytevector-n! . aq2c56) (get-bytevector-n . aq2c55) (get-bytevector-all . aq2c54) (flush-output-port . aq2c53) (close-port . aq2c52) (exit . aq2c4a) (command-line . aq28dc) (string-fill! . aq2c49) (string-set! . aq2c48) (set-cdr! . aq2c47) (set-car! . aq2c46) (remove . aq2c45) (remv . aq2c44) (remp . aq2c43) (remq . aq2c42) (partition . aq2c41) (memv . aq2c40) (memq . aq2c3f) (memp . aq2c3e) (member . aq2c3d) (exists . aq2c3c) (for-all . aq2c3b) (fold-right . aq2c3a) (fold-left . aq2c39) (find . aq2c38) (filter . aq2c37) (cons* . aq2c36) (assv . aq2c35) (assq . aq2c34) (assp . aq2c33) (assoc . aq2c32) (call-with-string-output-port . aq2c31) (call-with-port . aq2c30) (call-with-bytevector-output-port . aq2c2f) (bytevector->string . aq2c2e) (buffer-mode? . aq2c2d) (binary-port? . aq2c2c) (with-exception-handler . aq2c2b) (raise-continuable . aq2c2a) (raise . aq2c29) (eval . aqe39) (environment . aqe31) (make-enumeration . aq2c28) (enum-set=? . aq2c27) (enum-set-universe . aq2c26) (enum-set-union . aq2c25) (enum-set-subset? . aq2c24) (enum-set-projection . aq2c23) (enum-set-member? . aq2c22) (enum-set-intersection . aq2c21) (enum-set-indexer . aq2c20) (enum-set-difference . aq2c1f) (enum-set-constructor . aq2c1e) (enum-set-complement . aq2c1d) (enum-set->list . aq2c1c) (who-condition? . aq2c1b) (warning? . aq2c1a) (violation? . aq2c19) (undefined-violation? . aq2c18) (syntax-violation? . aq2c17) (syntax-violation-subform . aq2c16) (syntax-violation-form . aq2c15) (syntax-violation . aqe59) (simple-conditions . aq2c14) (serious-condition? . aq2c13) (non-continuable-violation? . aq2c12) (message-condition? . aq2c11) (make-who-condition . aq2c10) (make-warning . aq2c0f) (make-violation . aq2c0e) (make-undefined-violation . aq2c0d) (make-syntax-violation . aq2c0c) (make-serious-condition . aq2c0b) (make-non-continuable-violation . aq2c0a) (make-message-condition . aq2c09) (make-lexical-violation . aq2c08) (make-irritants-condition . aq2c07) (make-implementation-restriction-violation . aq2c06) (make-error . aq2c05) (make-assertion-violation . aq2c04) (lexical-violation? . aq2c03) (irritants-condition? . aq2c02) (implementation-restriction-violation? . aq2c01) (error? . aq2c00) (condition-who . aq2bff) (condition-predicate . aq2bfe) (condition-message . aq2bfd) (condition-irritants . aq2bfc) (condition-accessor . aq2bfb) (condition . aq2bfa) (assertion-violation? . aq2bf9) (condition? . aq2bf8) (utf32->string . aq2bf7) (utf16->string . aq2bf6) (utf8->string . aq2bf5) (uint-list->bytevector . aq2bf4) (u8-list->bytevector . aq2bf3) (string->utf8 . aq2bf2) (string->utf32 . aq2bf1) (string->utf16 . aq2bf0) (sint-list->bytevector . aq2bef) (native-endianness . aq2bee) (bytevector? . aq2bed) (bytevector=? . aq2bec) (bytevector-uint-set! . aq2beb) (bytevector-uint-ref . aq2bea) (bytevector-u8-set! . aq2be9) (bytevector-u8-ref . aq2be8) (bytevector-u64-set! . aq2be7) (bytevector-u64-ref . aq2be6) (bytevector-u64-native-set! . aq2be5) (bytevector-u64-native-ref . aq2be4) (bytevector-u32-set! . aq2be3) (bytevector-u32-ref . aq2be2) (bytevector-u32-native-set! . aq2be1) (bytevector-u32-native-ref . aq2be0) (bytevector-u16-set! . aq2bdf) (bytevector-u16-ref . aq2bde) (bytevector-u16-native-set! . aq2bdd) (bytevector-u16-native-ref . aq2bdc) (bytevector-sint-set! . aq2bdb) (bytevector-sint-ref . aq2bda) (bytevector-s8-set! . aq2bd9) (bytevector-s8-ref . aq2bd8) (bytevector-s64-set! . aq2bd7) (bytevector-s64-ref . aq2bd6) (bytevector-s64-native-set! . aq2bd5) (bytevector-s64-native-ref . aq2bd4) (bytevector-s32-set! . aq2bd3) (bytevector-s32-ref . aq2bd2) (bytevector-s32-native-set! . aq2bd1) (bytevector-s32-native-ref . aq2bd0) (bytevector-s16-set! . aq2bcf) (bytevector-s16-ref . aq2bce) (bytevector-s16-native-set! . aq2bcd) (bytevector-s16-native-ref . aq2bcc) (bytevector-length . aq2bcb) (bytevector-ieee-single-ref . aq2bca) (bytevector-ieee-single-set! . aq2bc9) (bytevector-ieee-single-native-set! . aq2bc8) (bytevector-ieee-single-native-ref . aq2bc7) (bytevector-ieee-double-set! . aq2bc6) (bytevector-ieee-double-ref . aq2bc5) (bytevector-ieee-double-native-set! . aq2bc4) (bytevector-ieee-double-native-ref . aq2bc3) (bytevector-fill! . aq2bc2) (bytevector-copy! . aq2bc1) (bytevector-copy . aq2bc0) (bytevector->uint-list . aq2bbf) (bytevector->u8-list . aq2bbe) (bytevector->sint-list . aq2bbd) (no-nans-violation? . aq2bbc) (no-infinities-violation? . aq2bbb) (make-no-nans-violation . aq2bba) (make-no-infinities-violation . aq2bb9) (real->flonum . aq2bb8) (flzero? . aq2bb7) (fltruncate . aq2bb6) (fltan . aq2bb5) (flsqrt . aq2bb4) (flsin . aq2bb3) (flround . aq2bb2) (flpositive? . aq2bb1) (flonum? . aq2bb0) (flodd? . aq2baf) (flnumerator . aq2bae) (flnegative? . aq2bad) (flnan? . aq2bac) (flmod0 . aq2bab) (flmod . aq2baa) (flmin . aq2ba9) (flmax . aq2ba8) (fllog . aq2ba7) (flinteger? . aq2ba6) (flinfinite? . aq2ba5) (flfloor . aq2ba4) (flfinite? . aq2ba3) (flexpt . aq2ba2) (flexp . aq2ba1) (fleven? . aq2ba0) (fldiv0-and-mod0 . aq2b9f) (fldiv0 . aq2b9e) (fldiv-and-mod . aq2b9d) (fldiv . aq2b9c) (fldenominator . aq2b9b) (flcos . aq2b9a) (flceiling . aq2b99) (flatan . aq2b98) (flasin . aq2b97) (flacos . aq2b96) (flabs . aq2b95) (fl>? . aq2b94) (fl>=? . aq2b93) (fl=? . aq2b92) (fl<? . aq2b91) (fl<=? . aq2b90) (fl/ . aq2b8f) (fl- . aq2b8e) (fl+ . aq2b8d) (fl* . aq2b8c) (fixnum->flonum . aq2b8b) (fxzero? . aq2b8a) (fxxor . aq2b89) (fxrotate-bit-field . aq2b88) (fxreverse-bit-field . aq2b87) (fxpositive? . aq2b86) (fxodd? . aq2b85) (fxnot . aq2b84) (fxnegative? . aq2b83) (fxmod0 . aq2b82) (fxmod . aq2b81) (fxmin . aq2b80) (fxmax . aq2b7f) (fxlength . aq2b7e) (fxior . aq2b7d) (fxif . aq2b7c) (fxfirst-bit-set . aq2b7b) (fxeven? . aq2b7a) (fxdiv0-and-mod0 . aq2b79) (fxdiv0 . aq2b78) (fxdiv-and-mod . aq2b77) (fxdiv . aq2b76) (fxcopy-bit-field . aq2b75) (fxcopy-bit . aq2b74) (fxbit-set? . aq2b73) (fxbit-field . aq2b72) (fxbit-count . aq2b71) (fxarithmetic-shift-right . aq2b70) (fxarithmetic-shift-left . aq2b6f) (fxarithmetic-shift . aq2b6e) (fxand . aq2b6d) (fx>? . aq2b6c) (fx>=? . aq2b6b) (fx=? . aq2b6a) (fx<? . aq2b69) (fx<=? . aq2b68) (fx-/carry . aq2b67) (fx- . aq2b66) (fx+/carry . aq2b65) (fx+ . aq2b64) (fx*/carry . aq2b63) (fx* . aq2b62) (greatest-fixnum . aq2b61) (least-fixnum . aq2b60) (fixnum-width . aq2b5f) (fixnum? . aq2b5e) (bitwise-rotate-bit-field . aq2b5d) (bitwise-reverse-bit-field . aq2b5c) (bitwise-length . aq2b5b) (bitwise-if . aq2b5a) (bitwise-first-bit-set . aq2b59) (bitwise-copy-bit-field . aq2b58) (bitwise-copy-bit . aq2b57) (bitwise-bit-set? . aq2b56) (bitwise-bit-field . aq2b55) (bitwise-bit-count . aq2b54) (bitwise-xor . aq2b53) (bitwise-ior . aq2b52) (bitwise-and . aq2b51) (bitwise-not . aq2b50) (bitwise-arithmetic-shift-right . aq2b4f) (bitwise-arithmetic-shift-left . aq2b4e) (bitwise-arithmetic-shift . aq2b4d) (zero? . aq2b4c) (vector? . aq2b4b) (vector-set! . aq2b4a) (vector-ref . aq2b49) (vector-map . aq2b48) (vector-length . aq2b47) (vector-for-each . aq2b46) (vector-fill! . aq2b45) (vector->list . aq2b44) (vector . aq2b43) (values . aq2b42) (truncate . aq2b41) (tan . aq2b40) (symbol? . aq2b3f) (symbol=? . aq2b3e) (symbol->string . aq2b3d) (substring . aq2b3c) (string? . aq2b3b) (string>? . aq2b3a) (string>=? . aq2b39) (string=? . aq2b38) (string<? . aq2b37) (string<=? . aq2b36) (string-ref . aq2b35) (string-length . aq2b34) (string-for-each . aq2b33) (string-copy . aq2b32) (string-append . aq2b31) (string->symbol . aq2b30) (string->number . aq2b2f) (string->list . aq2b2e) (string . aq2b2d) (sqrt . aq2b2c) (sin . aq2b2b) (round . aq2b2a) (reverse . aq2b29) (real? . aq2b28) (real-valued? . aq2b27) (real-part . aq2b26) (rationalize . aq2b25) (rational? . aq2b24) (rational-valued? . aq2b23) (procedure? . aq2b22) (positive? . aq2b21) (pair? . aq2b20) (odd? . aq2b1f) (numerator . aq2b1e) (number? . aq2b1d) (number->string . aq2b1c) (null? . aq2b1b) (not . aq2b1a) (negative? . aq2b19) (nan? . aq2b18) (min . aq2b17) (max . aq2b16) (map . aq2b15) (make-vector . aq2b14) (make-string . aq2b13) (make-rectangular . aq2b12) (make-polar . aq2b11) (magnitude . aq2b10) (log . aq2b0f) (list? . aq2b0e) (list-tail . aq2b0d) (list-ref . aq2b0c) (list->vector . aq2b0b) (list->string . aq2b0a) (list . aq2b09) (length . aq2b08) (lcm . aq2b07) (integer? . aq2b06) (integer-valued? . aq2b05) (integer->char . aq2b04) (infinite? . aq2b03) (inexact? . aq2b02) (inexact . aq2b01) (imag-part . aq2b00) (gcd . aq2aff) (for-each . aq2afe) (floor . aq2afd) (finite? . aq2afc) (expt . aq2afb) (exp . aq2afa) (exact? . aq2af9) (exact-integer-sqrt . aq2af8) (exact . aq2af7) (even? . aq2af6) (error . aq2af5) (eqv? . aq2af4) (equal? . aq2af3) (eq? . aq2af2) (dynamic-wind . aq2af1) (div0-and-mod0 . aq2af0) (mod0 . aq2aef) (div0 . aq2aee) (div-and-mod . aq2aed) (mod . aq2aec) (div . aq2aeb) (denominator . aq2aea) (cos . aq2ae9) (cons . aq2ae8) (complex? . aq2ae7) (char? . aq2ae6) (char>? . aq2ae5) (char>=? . aq2ae4) (char=? . aq2ae3) (char<? . aq2ae2) (char<=? . aq2ae1) (char->integer . aq2ae0) (ceiling . aq2adf) (call-with-values . aq2ade) (call/cc . aq2add) (call-with-current-continuation . aq2adc) (cddddr . aq2adb) (cdddar . aq2ada) (cddadr . aq2ad9) (cddaar . aq2ad8) (cdaddr . aq2ad7) (cdadar . aq2ad6) (cdaadr . aq2ad5) (cdaaar . aq2ad4) (cadddr . aq2ad3) (caddar . aq2ad2) (cadadr . aq2ad1) (cadaar . aq2ad0) (caaddr . aq2acf) (caadar . aq2ace) (caaadr . aq2acd) (caaaar . aq2acc) (cdddr . aq2acb) (cddar . aq2aca) (cdadr . aq2ac9) (cdaar . aq2ac8) (caddr . aq2ac7) (cadar . aq2ac6) (caadr . aq2ac5) (caaar . aq2ac4) (cddr . aq2ac3) (cdar . aq2ac2) (cadr . aq2ac1) (caar . aq2ac0) (cdr . aq2abf) (car . aq2abe) (boolean? . aq2abd) (boolean=? . aq2abc) (atan . aq2abb) (assertion-violation . aq2aba) (asin . aq2ab9) (apply . aq2ab8) (append . aq2ab7) (angle . aq2ab6) (acos . aq2ab5) (abs . aq2ab4) (/ . aq2ab3) (* . aq2ab2) (- . aq2ab1) (+ . aq2ab0) (>= . aq2aaf) (> . aq2aae) (= . aq2aad) (<= . aq2aac) (< . aq2aab) (library . aq2aaa) (&no-nans . aq2aa9) (&no-infinities . aq2aa8) (&i/o-encoding . aq2aa7) (&i/o-decoding . aq2aa6) (&i/o-port . aq2aa5) (&i/o-file-does-not-exist . aq2aa4) (&i/o-file-already-exists . aq2aa3) (&i/o-file-is-read-only . aq2aa2) (&i/o-file-protection . aq2aa1) (&i/o-filename . aq2aa0) (&i/o-invalid-position . aq2a9f) (&i/o-write . aq2a9e) (&i/o-read . aq2a9d) (&i/o . aq2a9c) (&undefined . aq2a9b) (&syntax . aq2a9a) (&lexical . aq2a99) (&implementation-restriction . aq2a98) (&non-continuable . aq2a97) (&who . aq2a96) (&irritants . aq2a95) (&assertion . aq2a94) (&violation . aq2a93) (&error . aq2a92) (&serious . aq2a91) (&warning . aq2a90) (&message . aq2a8f) (&condition . aq2a8e) (define-condition-type . aq2a8d) (define-enumeration . aq2a8c) (define-record-type . aq2a8b) (parent-rtd . aq2a8a) (nongenerative . aq2a89) (opaque . aq2a88) (sealed . aq2a87) (protocol . aq2a86) (parent . aq2a85) (immutable . aq2a84) (mutable . aq2a83) (fields . aq2a82) (error-handling-mode . aq2a81) (file-options . aq2a80) (buffer-mode . aq2a7f) (eol-style . aq2a7e) (guard . aq2a7d) (unsyntax-splicing . aq2a7a) (unsyntax . aq2a79) (unquote-splicing . aq2a78) (unquote . aq2a77) (_ . aq2a76) (else . aq2a75) (=> . aq2a74) (... . aq2a73) (assert . aq2a72) (endianness . aq2a71) (time . aq2a6f) (do . aq2a6e) (cond . aq2a6d) (let* . aq2a6c) (let*-values . aq2a6b) (let-values . aq2a6a) (identifier-syntax . aq2a69) (with-syntax . aq2a68) (quasisyntax . aq2a67) (quasiquote . aq2a66) (syntax-rules . aq2a65) (include . aq2a64) (record-constructor-descriptor . aq2a62) (record-type-descriptor . aq2a61) (case . aq2a60) (unless . aq2a5e) (when . aq2a5d) (or . aq2a5c) (and . aq2a5b) (if . aq2a5a) (let . aq2a59) (letrec* . aq2a58) (letrec . aq2a57) (case-lambda . aq2a55) (lambda . aq2a54) (syntax . aq2a53) (syntax-case . aq2a52) (quote . aq2a51) (letrec-syntax . aq2a4f) (let-syntax . aq2a4e) (set! . aq2a4d) (import . aq2a4c) (begin . aq2a4b) (define-syntax . aq2a49) (define . aq2a48)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2deb '(psyntax null-environment-5) '() '() '() '() '((make-promise . aq2c4b) (unquote-splicing . aq2a78) (unquote . aq2a77) (_ . aq2a76) (else . aq2a75) (=> . aq2a74) (... . aq2a73) (delay . aq2a70) (do . aq2a6e) (cond . aq2a6d) (let* . aq2a6c) (quasiquote . aq2a66) (syntax-rules . aq2a65) (case . aq2a60) (or . aq2a5c) (and . aq2a5b) (if . aq2a5a) (let . aq2a59) (letrec . aq2a57) (lambda . aq2a54) (quote . aq2a51) (letrec-syntax . aq2a4f) (let-syntax . aq2a4e) (set! . aq2a4d) (begin . aq2a4b) (define-syntax . aq2a49) (define . aq2a48)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2dec '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . aq2cfc) (string-ci>=? . aq2cfb) (string-ci=? . aq2cfa) (string-ci<? . aq2cf9) (string-ci<=? . aq2cf8) (char-whitespace? . aq2cf7) (char-upper-case? . aq2cf6) (char-numeric? . aq2cf4) (char-lower-case? . aq2cf3) (char-upcase . aq2cf1) (char-downcase . aq2cee) (char-ci>? . aq2ced) (char-ci>=? . aq2cec) (char-ci=? . aq2ceb) (char-ci<? . aq2cea) (char-ci<=? . aq2ce9) (char-alphabetic? . aq2ce8) (call-with-output-file . aq2cbc) (call-with-input-file . aq2cbb) (write-char . aq2cba) (write . aq2cb9) (with-output-to-file . aq2cb8) (with-input-from-file . aq2cb7) (read-char . aq2cb6) (read . aq2cb5) (peek-char . aq2cb4) (open-output-file . aq2cb3) (open-input-file . aq2cb2) (newline . aq2cb1) (display . aq2cb0) (close-output-port . aq2caf) (close-input-port . aq2cae) (eof-object . aq2cac) (current-output-port . aq2caa) (current-input-port . aq2ca9) (output-port? . aq2ca8) (input-port? . aq2ca7) (scheme-report-environment . aqe35) (quotient . aq2c51) (null-environment . aqe33) (remainder . aq2c50) (modulo . aq2c4f) (inexact->exact . aq2c4e) (force . aq2c4d) (exact->inexact . aq2c4c) (make-promise . aq2c4b) (string-fill! . aq2c49) (string-set! . aq2c48) (set-cdr! . aq2c47) (set-car! . aq2c46) (memv . aq2c40) (memq . aq2c3f) (member . aq2c3d) (assv . aq2c35) (assq . aq2c34) (assoc . aq2c32) (eval . aqe39) (zero? . aq2b4c) (vector? . aq2b4b) (vector-set! . aq2b4a) (vector-ref . aq2b49) (vector-length . aq2b47) (vector-fill! . aq2b45) (vector->list . aq2b44) (vector . aq2b43) (values . aq2b42) (truncate . aq2b41) (tan . aq2b40) (symbol? . aq2b3f) (symbol->string . aq2b3d) (substring . aq2b3c) (string? . aq2b3b) (string>? . aq2b3a) (string>=? . aq2b39) (string=? . aq2b38) (string<? . aq2b37) (string<=? . aq2b36) (string-ref . aq2b35) (string-length . aq2b34) (string-copy . aq2b32) (string-append . aq2b31) (string->symbol . aq2b30) (string->number . aq2b2f) (string->list . aq2b2e) (string . aq2b2d) (sqrt . aq2b2c) (sin . aq2b2b) (round . aq2b2a) (reverse . aq2b29) (real? . aq2b28) (real-part . aq2b26) (rationalize . aq2b25) (rational? . aq2b24) (procedure? . aq2b22) (positive? . aq2b21) (pair? . aq2b20) (odd? . aq2b1f) (numerator . aq2b1e) (number? . aq2b1d) (number->string . aq2b1c) (not . aq2b1a) (negative? . aq2b19) (min . aq2b17) (max . aq2b16) (map . aq2b15) (make-vector . aq2b14) (make-string . aq2b13) (make-rectangular . aq2b12) (make-polar . aq2b11) (magnitude . aq2b10) (log . aq2b0f) (list? . aq2b0e) (list-tail . aq2b0d) (list-ref . aq2b0c) (list->vector . aq2b0b) (list->string . aq2b0a) (list . aq2b09) (length . aq2b08) (lcm . aq2b07) (integer? . aq2b06) (integer->char . aq2b04) (inexact? . aq2b02) (imag-part . aq2b00) (gcd . aq2aff) (for-each . aq2afe) (floor . aq2afd) (expt . aq2afb) (exp . aq2afa) (exact? . aq2af9) (even? . aq2af6) (eqv? . aq2af4) (equal? . aq2af3) (eq? . aq2af2) (dynamic-wind . aq2af1) (denominator . aq2aea) (cos . aq2ae9) (cons . aq2ae8) (complex? . aq2ae7) (char? . aq2ae6) (char>? . aq2ae5) (char>=? . aq2ae4) (char=? . aq2ae3) (char<? . aq2ae2) (char<=? . aq2ae1) (char->integer . aq2ae0) (ceiling . aq2adf) (call-with-values . aq2ade) (call-with-current-continuation . aq2adc) (cddddr . aq2adb) (cdddar . aq2ada) (cddadr . aq2ad9) (cddaar . aq2ad8) (cdaddr . aq2ad7) (cdadar . aq2ad6) (cdaadr . aq2ad5) (cdaaar . aq2ad4) (cadddr . aq2ad3) (caddar . aq2ad2) (cadadr . aq2ad1) (cadaar . aq2ad0) (caaddr . aq2acf) (caadar . aq2ace) (caaadr . aq2acd) (caaaar . aq2acc) (cdddr . aq2acb) (cddar . aq2aca) (cdadr . aq2ac9) (cdaar . aq2ac8) (caddr . aq2ac7) (cadar . aq2ac6) (caadr . aq2ac5) (caaar . aq2ac4) (cddr . aq2ac3) (cdar . aq2ac2) (cadr . aq2ac1) (caar . aq2ac0) (cdr . aq2abf) (car . aq2abe) (boolean? . aq2abd) (atan . aq2abb) (asin . aq2ab9) (apply . aq2ab8) (append . aq2ab7) (angle . aq2ab6) (acos . aq2ab5) (abs . aq2ab4) (/ . aq2ab3) (* . aq2ab2) (- . aq2ab1) (+ . aq2ab0) (>= . aq2aaf) (> . aq2aae) (= . aq2aad) (<= . aq2aac) (< . aq2aab) (unquote-splicing . aq2a78) (unquote . aq2a77) (else . aq2a75) (=> . aq2a74) (... . aq2a73) (delay . aq2a70) (do . aq2a6e) (cond . aq2a6d) (let* . aq2a6c) (quasiquote . aq2a66) (syntax-rules . aq2a65) (case . aq2a60) (or . aq2a5c) (and . aq2a5b) (if . aq2a5a) (let . aq2a59) (letrec . aq2a57) (lambda . aq2a54) (quote . aq2a51) (letrec-syntax . aq2a4f) (let-syntax . aq2a4e) (set! . aq2a4d) (begin . aq2a4b) (define-syntax . aq2a49) (define . aq2a48)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2ded '(psyntax modules) '() '() '() '() '((module . aq2a4a)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2dee '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2def '(rnrs) '(6) '() '() '() '((regexp? . aq2daa) (string-upcase . aq2d04) (string-titlecase . aq2d03) (string-normalize-nfkd . aq2d02) (string-normalize-nfkc . aq2d01) (string-normalize-nfd . aq2d00) (string-normalize-nfc . aq2cff) (string-foldcase . aq2cfe) (string-downcase . aq2cfd) (string-ci>? . aq2cfc) (string-ci>=? . aq2cfb) (string-ci=? . aq2cfa) (string-ci<? . aq2cf9) (string-ci<=? . aq2cf8) (char-whitespace? . aq2cf7) (char-upper-case? . aq2cf6) (char-title-case? . aq2cf5) (char-numeric? . aq2cf4) (char-lower-case? . aq2cf3) (char-general-category . aq2cf2) (char-upcase . aq2cf1) (char-titlecase . aq2cf0) (char-foldcase . aq2cef) (char-downcase . aq2cee) (char-ci>? . aq2ced) (char-ci>=? . aq2cec) (char-ci=? . aq2ceb) (char-ci<? . aq2cea) (char-ci<=? . aq2ce9) (char-alphabetic? . aq2ce8) (make-variable-transformer . aqba4) (identifier? . aqe5b) (generate-temporaries . aqe47) (free-identifier=? . aqe49) (syntax->datum . aqe5f) (datum->syntax . aqe5d) (bound-identifier=? . aqe4b) (record-type-descriptor? . aq2ce7) (record-predicate . aq2ce6) (record-mutator . aq2ce5) (record-constructor . aq2ce4) (record-accessor . aq2ce3) (make-record-type-descriptor . aq2ce2) (make-record-constructor-descriptor . aq2ce1) (record? . aq2ce0) (record-type-uid . aq2cdf) (record-type-sealed? . aq2cde) (record-type-parent . aq2cdd) (record-type-opaque? . aq2cdc) (record-type-name . aq2cdb) (record-type-generative? . aq2cda) (record-type-field-names . aq2cd9) (record-rtd . aq2cd8) (record-field-mutable? . aq2cd7) (delete-file . aq2cd6) (file-exists? . aq2cd5) (vector-sort! . aq2cd4) (vector-sort . aq2cd3) (list-sort . aq2cd2) (symbol-hash . aq2cd1) (string-ci-hash . aq2cd0) (string-hash . aq2ccf) (equal-hash . aq2cce) (hashtable-equivalence-function . aq2ccd) (make-hashtable . aq2ccc) (hashtable-hash-function . aq2ccb) (make-eqv-hashtable . aq2cca) (make-eq-hashtable . aq2cc9) (hashtable? . aq2cc8) (hashtable-update! . aq2cc7) (hashtable-size . aq2cc6) (hashtable-set! . aq2cc5) (hashtable-ref . aq2cc4) (hashtable-mutable? . aq2cc3) (hashtable-keys . aq2cc2) (hashtable-entries . aq2cc1) (hashtable-delete! . aq2cc0) (hashtable-copy . aq2cbf) (hashtable-contains? . aq2cbe) (hashtable-clear! . aq2cbd) (call-with-output-file . aq2cbc) (call-with-input-file . aq2cbb) (write-char . aq2cba) (write . aq2cb9) (with-output-to-file . aq2cb8) (with-input-from-file . aq2cb7) (read-char . aq2cb6) (read . aq2cb5) (peek-char . aq2cb4) (open-output-file . aq2cb3) (open-input-file . aq2cb2) (newline . aq2cb1) (display . aq2cb0) (close-output-port . aq2caf) (close-input-port . aq2cae) (eof-object? . aq2cad) (eof-object . aq2cac) (current-error-port . aq2cab) (current-output-port . aq2caa) (current-input-port . aq2ca9) (output-port? . aq2ca8) (input-port? . aq2ca7) (utf-8-codec . aq2ca6) (utf-16-codec . aq2ca5) (transcoder-error-handling-mode . aq2ca4) (transcoder-eol-style . aq2ca3) (transcoder-codec . aq2ca2) (transcoded-port . aq2ca1) (textual-port? . aq2ca0) (string->bytevector . aq2c9f) (standard-output-port . aq2c9e) (standard-input-port . aq2c9d) (standard-error-port . aq2c9c) (set-port-position! . aq2c9b) (put-u8 . aq2c9a) (put-string . aq2c99) (put-datum . aq2c98) (put-char . aq2c97) (put-bytevector . aq2c96) (port? . aq2c95) (port-transcoder . aq2c94) (port-position . aq2c93) (port-has-set-port-position!? . aq2c92) (port-has-port-position? . aq2c91) (port-eof? . aq2c90) (output-port-buffer-mode . aq2c8f) (open-string-output-port . aq2c8e) (open-string-input-port . aq2c8d) (open-file-output-port . aq2c8c) (open-file-input/output-port . aq2c8b) (open-file-input-port . aq2c8a) (open-bytevector-output-port . aq2c89) (open-bytevector-input-port . aq2c88) (native-transcoder . aq2c87) (native-eol-style . aq2c86) (make-transcoder . aq2c85) (latin-1-codec . aq2c84) (make-i/o-write-error . aq2c83) (make-i/o-read-error . aq2c82) (make-i/o-port-error . aq2c81) (make-i/o-invalid-position-error . aq2c80) (make-i/o-filename-error . aq2c7f) (make-i/o-file-protection-error . aq2c7e) (make-i/o-file-is-read-only-error . aq2c7d) (make-i/o-file-does-not-exist-error . aq2c7c) (make-i/o-file-already-exists-error . aq2c7b) (make-i/o-error . aq2c7a) (make-i/o-encoding-error . aq2c79) (make-i/o-decoding-error . aq2c78) (make-custom-textual-output-port . aq2c77) (make-custom-textual-input/output-port . aq2c76) (make-custom-textual-input-port . aq2c75) (make-custom-binary-output-port . aq2c74) (make-custom-binary-input/output-port . aq2c73) (make-custom-binary-input-port . aq2c72) (make-bytevector . aq2c71) (lookahead-u8 . aq2c70) (lookahead-char . aq2c6f) (i/o-write-error? . aq2c6e) (i/o-read-error? . aq2c6d) (i/o-port-error? . aq2c6c) (i/o-invalid-position-error? . aq2c6b) (i/o-filename-error? . aq2c6a) (i/o-file-protection-error? . aq2c69) (i/o-file-is-read-only-error? . aq2c68) (i/o-file-does-not-exist-error? . aq2c67) (i/o-file-already-exists-error? . aq2c66) (i/o-error? . aq2c65) (i/o-error-position . aq2c64) (i/o-error-port . aq2c63) (i/o-error-filename . aq2c62) (i/o-encoding-error? . aq2c61) (i/o-encoding-error-char . aq2c60) (i/o-decoding-error? . aq2c5f) (get-u8 . aq2c5e) (get-string-n! . aq2c5d) (get-string-n . aq2c5c) (get-string-all . aq2c5b) (get-line . aq2c5a) (get-datum . aq2c59) (get-char . aq2c58) (get-bytevector-some . aq2c57) (get-bytevector-n! . aq2c56) (get-bytevector-n . aq2c55) (get-bytevector-all . aq2c54) (flush-output-port . aq2c53) (close-port . aq2c52) (exit . aq2c4a) (command-line . aq28dc) (remove . aq2c45) (remv . aq2c44) (remp . aq2c43) (remq . aq2c42) (partition . aq2c41) (memv . aq2c40) (memq . aq2c3f) (memp . aq2c3e) (member . aq2c3d) (exists . aq2c3c) (for-all . aq2c3b) (fold-right . aq2c3a) (fold-left . aq2c39) (find . aq2c38) (filter . aq2c37) (cons* . aq2c36) (assv . aq2c35) (assq . aq2c34) (assp . aq2c33) (assoc . aq2c32) (call-with-string-output-port . aq2c31) (call-with-port . aq2c30) (call-with-bytevector-output-port . aq2c2f) (bytevector->string . aq2c2e) (buffer-mode? . aq2c2d) (binary-port? . aq2c2c) (with-exception-handler . aq2c2b) (raise-continuable . aq2c2a) (raise . aq2c29) (make-enumeration . aq2c28) (enum-set=? . aq2c27) (enum-set-universe . aq2c26) (enum-set-union . aq2c25) (enum-set-subset? . aq2c24) (enum-set-projection . aq2c23) (enum-set-member? . aq2c22) (enum-set-intersection . aq2c21) (enum-set-indexer . aq2c20) (enum-set-difference . aq2c1f) (enum-set-constructor . aq2c1e) (enum-set-complement . aq2c1d) (enum-set->list . aq2c1c) (who-condition? . aq2c1b) (warning? . aq2c1a) (violation? . aq2c19) (undefined-violation? . aq2c18) (syntax-violation? . aq2c17) (syntax-violation-subform . aq2c16) (syntax-violation-form . aq2c15) (syntax-violation . aqe59) (simple-conditions . aq2c14) (serious-condition? . aq2c13) (non-continuable-violation? . aq2c12) (message-condition? . aq2c11) (make-who-condition . aq2c10) (make-warning . aq2c0f) (make-violation . aq2c0e) (make-undefined-violation . aq2c0d) (make-syntax-violation . aq2c0c) (make-serious-condition . aq2c0b) (make-non-continuable-violation . aq2c0a) (make-message-condition . aq2c09) (make-lexical-violation . aq2c08) (make-irritants-condition . aq2c07) (make-implementation-restriction-violation . aq2c06) (make-error . aq2c05) (make-assertion-violation . aq2c04) (lexical-violation? . aq2c03) (irritants-condition? . aq2c02) (implementation-restriction-violation? . aq2c01) (error? . aq2c00) (condition-who . aq2bff) (condition-predicate . aq2bfe) (condition-message . aq2bfd) (condition-irritants . aq2bfc) (condition-accessor . aq2bfb) (condition . aq2bfa) (assertion-violation? . aq2bf9) (condition? . aq2bf8) (utf32->string . aq2bf7) (utf16->string . aq2bf6) (utf8->string . aq2bf5) (uint-list->bytevector . aq2bf4) (u8-list->bytevector . aq2bf3) (string->utf8 . aq2bf2) (string->utf32 . aq2bf1) (string->utf16 . aq2bf0) (sint-list->bytevector . aq2bef) (native-endianness . aq2bee) (bytevector? . aq2bed) (bytevector=? . aq2bec) (bytevector-uint-set! . aq2beb) (bytevector-uint-ref . aq2bea) (bytevector-u8-set! . aq2be9) (bytevector-u8-ref . aq2be8) (bytevector-u64-set! . aq2be7) (bytevector-u64-ref . aq2be6) (bytevector-u64-native-set! . aq2be5) (bytevector-u64-native-ref . aq2be4) (bytevector-u32-set! . aq2be3) (bytevector-u32-ref . aq2be2) (bytevector-u32-native-set! . aq2be1) (bytevector-u32-native-ref . aq2be0) (bytevector-u16-set! . aq2bdf) (bytevector-u16-ref . aq2bde) (bytevector-u16-native-set! . aq2bdd) (bytevector-u16-native-ref . aq2bdc) (bytevector-sint-set! . aq2bdb) (bytevector-sint-ref . aq2bda) (bytevector-s8-set! . aq2bd9) (bytevector-s8-ref . aq2bd8) (bytevector-s64-set! . aq2bd7) (bytevector-s64-ref . aq2bd6) (bytevector-s64-native-set! . aq2bd5) (bytevector-s64-native-ref . aq2bd4) (bytevector-s32-set! . aq2bd3) (bytevector-s32-ref . aq2bd2) (bytevector-s32-native-set! . aq2bd1) (bytevector-s32-native-ref . aq2bd0) (bytevector-s16-set! . aq2bcf) (bytevector-s16-ref . aq2bce) (bytevector-s16-native-set! . aq2bcd) (bytevector-s16-native-ref . aq2bcc) (bytevector-length . aq2bcb) (bytevector-ieee-single-ref . aq2bca) (bytevector-ieee-single-set! . aq2bc9) (bytevector-ieee-single-native-set! . aq2bc8) (bytevector-ieee-single-native-ref . aq2bc7) (bytevector-ieee-double-set! . aq2bc6) (bytevector-ieee-double-ref . aq2bc5) (bytevector-ieee-double-native-set! . aq2bc4) (bytevector-ieee-double-native-ref . aq2bc3) (bytevector-fill! . aq2bc2) (bytevector-copy! . aq2bc1) (bytevector-copy . aq2bc0) (bytevector->uint-list . aq2bbf) (bytevector->u8-list . aq2bbe) (bytevector->sint-list . aq2bbd) (no-nans-violation? . aq2bbc) (no-infinities-violation? . aq2bbb) (make-no-nans-violation . aq2bba) (make-no-infinities-violation . aq2bb9) (real->flonum . aq2bb8) (flzero? . aq2bb7) (fltruncate . aq2bb6) (fltan . aq2bb5) (flsqrt . aq2bb4) (flsin . aq2bb3) (flround . aq2bb2) (flpositive? . aq2bb1) (flonum? . aq2bb0) (flodd? . aq2baf) (flnumerator . aq2bae) (flnegative? . aq2bad) (flnan? . aq2bac) (flmod0 . aq2bab) (flmod . aq2baa) (flmin . aq2ba9) (flmax . aq2ba8) (fllog . aq2ba7) (flinteger? . aq2ba6) (flinfinite? . aq2ba5) (flfloor . aq2ba4) (flfinite? . aq2ba3) (flexpt . aq2ba2) (flexp . aq2ba1) (fleven? . aq2ba0) (fldiv0-and-mod0 . aq2b9f) (fldiv0 . aq2b9e) (fldiv-and-mod . aq2b9d) (fldiv . aq2b9c) (fldenominator . aq2b9b) (flcos . aq2b9a) (flceiling . aq2b99) (flatan . aq2b98) (flasin . aq2b97) (flacos . aq2b96) (flabs . aq2b95) (fl>? . aq2b94) (fl>=? . aq2b93) (fl=? . aq2b92) (fl<? . aq2b91) (fl<=? . aq2b90) (fl/ . aq2b8f) (fl- . aq2b8e) (fl+ . aq2b8d) (fl* . aq2b8c) (fixnum->flonum . aq2b8b) (fxzero? . aq2b8a) (fxxor . aq2b89) (fxrotate-bit-field . aq2b88) (fxreverse-bit-field . aq2b87) (fxpositive? . aq2b86) (fxodd? . aq2b85) (fxnot . aq2b84) (fxnegative? . aq2b83) (fxmod0 . aq2b82) (fxmod . aq2b81) (fxmin . aq2b80) (fxmax . aq2b7f) (fxlength . aq2b7e) (fxior . aq2b7d) (fxif . aq2b7c) (fxfirst-bit-set . aq2b7b) (fxeven? . aq2b7a) (fxdiv0-and-mod0 . aq2b79) (fxdiv0 . aq2b78) (fxdiv-and-mod . aq2b77) (fxdiv . aq2b76) (fxcopy-bit-field . aq2b75) (fxcopy-bit . aq2b74) (fxbit-set? . aq2b73) (fxbit-field . aq2b72) (fxbit-count . aq2b71) (fxarithmetic-shift-right . aq2b70) (fxarithmetic-shift-left . aq2b6f) (fxarithmetic-shift . aq2b6e) (fxand . aq2b6d) (fx>? . aq2b6c) (fx>=? . aq2b6b) (fx=? . aq2b6a) (fx<? . aq2b69) (fx<=? . aq2b68) (fx-/carry . aq2b67) (fx- . aq2b66) (fx+/carry . aq2b65) (fx+ . aq2b64) (fx*/carry . aq2b63) (fx* . aq2b62) (greatest-fixnum . aq2b61) (least-fixnum . aq2b60) (fixnum-width . aq2b5f) (fixnum? . aq2b5e) (bitwise-rotate-bit-field . aq2b5d) (bitwise-reverse-bit-field . aq2b5c) (bitwise-length . aq2b5b) (bitwise-if . aq2b5a) (bitwise-first-bit-set . aq2b59) (bitwise-copy-bit-field . aq2b58) (bitwise-copy-bit . aq2b57) (bitwise-bit-set? . aq2b56) (bitwise-bit-field . aq2b55) (bitwise-bit-count . aq2b54) (bitwise-xor . aq2b53) (bitwise-ior . aq2b52) (bitwise-and . aq2b51) (bitwise-not . aq2b50) (bitwise-arithmetic-shift-right . aq2b4f) (bitwise-arithmetic-shift-left . aq2b4e) (bitwise-arithmetic-shift . aq2b4d) (zero? . aq2b4c) (vector? . aq2b4b) (vector-set! . aq2b4a) (vector-ref . aq2b49) (vector-map . aq2b48) (vector-length . aq2b47) (vector-for-each . aq2b46) (vector-fill! . aq2b45) (vector->list . aq2b44) (vector . aq2b43) (values . aq2b42) (truncate . aq2b41) (tan . aq2b40) (symbol? . aq2b3f) (symbol=? . aq2b3e) (symbol->string . aq2b3d) (substring . aq2b3c) (string? . aq2b3b) (string>? . aq2b3a) (string>=? . aq2b39) (string=? . aq2b38) (string<? . aq2b37) (string<=? . aq2b36) (string-ref . aq2b35) (string-length . aq2b34) (string-for-each . aq2b33) (string-copy . aq2b32) (string-append . aq2b31) (string->symbol . aq2b30) (string->number . aq2b2f) (string->list . aq2b2e) (string . aq2b2d) (sqrt . aq2b2c) (sin . aq2b2b) (round . aq2b2a) (reverse . aq2b29) (real? . aq2b28) (real-valued? . aq2b27) (real-part . aq2b26) (rationalize . aq2b25) (rational? . aq2b24) (rational-valued? . aq2b23) (procedure? . aq2b22) (positive? . aq2b21) (pair? . aq2b20) (odd? . aq2b1f) (numerator . aq2b1e) (number? . aq2b1d) (number->string . aq2b1c) (null? . aq2b1b) (not . aq2b1a) (negative? . aq2b19) (nan? . aq2b18) (min . aq2b17) (max . aq2b16) (map . aq2b15) (make-vector . aq2b14) (make-string . aq2b13) (make-rectangular . aq2b12) (make-polar . aq2b11) (magnitude . aq2b10) (log . aq2b0f) (list? . aq2b0e) (list-tail . aq2b0d) (list-ref . aq2b0c) (list->vector . aq2b0b) (list->string . aq2b0a) (list . aq2b09) (length . aq2b08) (lcm . aq2b07) (integer? . aq2b06) (integer-valued? . aq2b05) (integer->char . aq2b04) (infinite? . aq2b03) (inexact? . aq2b02) (inexact . aq2b01) (imag-part . aq2b00) (gcd . aq2aff) (for-each . aq2afe) (floor . aq2afd) (finite? . aq2afc) (expt . aq2afb) (exp . aq2afa) (exact? . aq2af9) (exact-integer-sqrt . aq2af8) (exact . aq2af7) (even? . aq2af6) (error . aq2af5) (eqv? . aq2af4) (equal? . aq2af3) (eq? . aq2af2) (dynamic-wind . aq2af1) (div0-and-mod0 . aq2af0) (mod0 . aq2aef) (div0 . aq2aee) (div-and-mod . aq2aed) (mod . aq2aec) (div . aq2aeb) (denominator . aq2aea) (cos . aq2ae9) (cons . aq2ae8) (complex? . aq2ae7) (char? . aq2ae6) (char>? . aq2ae5) (char>=? . aq2ae4) (char=? . aq2ae3) (char<? . aq2ae2) (char<=? . aq2ae1) (char->integer . aq2ae0) (ceiling . aq2adf) (call-with-values . aq2ade) (call/cc . aq2add) (call-with-current-continuation . aq2adc) (cddddr . aq2adb) (cdddar . aq2ada) (cddadr . aq2ad9) (cddaar . aq2ad8) (cdaddr . aq2ad7) (cdadar . aq2ad6) (cdaadr . aq2ad5) (cdaaar . aq2ad4) (cadddr . aq2ad3) (caddar . aq2ad2) (cadadr . aq2ad1) (cadaar . aq2ad0) (caaddr . aq2acf) (caadar . aq2ace) (caaadr . aq2acd) (caaaar . aq2acc) (cdddr . aq2acb) (cddar . aq2aca) (cdadr . aq2ac9) (cdaar . aq2ac8) (caddr . aq2ac7) (cadar . aq2ac6) (caadr . aq2ac5) (caaar . aq2ac4) (cddr . aq2ac3) (cdar . aq2ac2) (cadr . aq2ac1) (caar . aq2ac0) (cdr . aq2abf) (car . aq2abe) (boolean? . aq2abd) (boolean=? . aq2abc) (atan . aq2abb) (assertion-violation . aq2aba) (asin . aq2ab9) (apply . aq2ab8) (append . aq2ab7) (angle . aq2ab6) (acos . aq2ab5) (abs . aq2ab4) (/ . aq2ab3) (* . aq2ab2) (- . aq2ab1) (+ . aq2ab0) (>= . aq2aaf) (> . aq2aae) (= . aq2aad) (<= . aq2aac) (< . aq2aab) (&no-nans . aq2aa9) (&no-infinities . aq2aa8) (&i/o-encoding . aq2aa7) (&i/o-decoding . aq2aa6) (&i/o-port . aq2aa5) (&i/o-file-does-not-exist . aq2aa4) (&i/o-file-already-exists . aq2aa3) (&i/o-file-is-read-only . aq2aa2) (&i/o-file-protection . aq2aa1) (&i/o-filename . aq2aa0) (&i/o-invalid-position . aq2a9f) (&i/o-write . aq2a9e) (&i/o-read . aq2a9d) (&i/o . aq2a9c) (&undefined . aq2a9b) (&syntax . aq2a9a) (&lexical . aq2a99) (&implementation-restriction . aq2a98) (&non-continuable . aq2a97) (&who . aq2a96) (&irritants . aq2a95) (&assertion . aq2a94) (&violation . aq2a93) (&error . aq2a92) (&serious . aq2a91) (&warning . aq2a90) (&message . aq2a8f) (&condition . aq2a8e) (define-condition-type . aq2a8d) (define-enumeration . aq2a8c) (define-record-type . aq2a8b) (parent-rtd . aq2a8a) (nongenerative . aq2a89) (opaque . aq2a88) (sealed . aq2a87) (protocol . aq2a86) (parent . aq2a85) (immutable . aq2a84) (mutable . aq2a83) (fields . aq2a82) (error-handling-mode . aq2a81) (file-options . aq2a80) (buffer-mode . aq2a7f) (eol-style . aq2a7e) (guard . aq2a7d) (unsyntax-splicing . aq2a7a) (unsyntax . aq2a79) (unquote-splicing . aq2a78) (unquote . aq2a77) (_ . aq2a76) (else . aq2a75) (=> . aq2a74) (... . aq2a73) (assert . aq2a72) (endianness . aq2a71) (do . aq2a6e) (cond . aq2a6d) (let* . aq2a6c) (let*-values . aq2a6b) (let-values . aq2a6a) (identifier-syntax . aq2a69) (with-syntax . aq2a68) (quasisyntax . aq2a67) (quasiquote . aq2a66) (syntax-rules . aq2a65) (record-constructor-descriptor . aq2a62) (record-type-descriptor . aq2a61) (case . aq2a60) (unless . aq2a5e) (when . aq2a5d) (or . aq2a5c) (and . aq2a5b) (if . aq2a5a) (let . aq2a59) (letrec* . aq2a58) (letrec . aq2a57) (case-lambda . aq2a55) (lambda . aq2a54) (syntax . aq2a53) (syntax-case . aq2a52) (quote . aq2a51) (letrec-syntax . aq2a4f) (let-syntax . aq2a4e) (set! . aq2a4d) (begin . aq2a4b) (define-syntax . aq2a49) (define . aq2a48)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2df0 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . aqe35) (quotient . aq2c51) (null-environment . aqe33) (remainder . aq2c50) (modulo . aq2c4f) (inexact->exact . aq2c4e) (force . aq2c4d) (exact->inexact . aq2c4c) (make-promise . aq2c4b) (delay . aq2a70)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2df1 '(rnrs control) '(6) '() '() '() '((do . aq2a6e) (unless . aq2a5e) (when . aq2a5d) (case-lambda . aq2a55)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2df2 '(rnrs eval) '(6) '() '() '() '((eval . aqe39) (environment . aqe31)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2df3 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . aq2c47) (set-car! . aq2c46)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2df4 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . aq2c49) (string-set! . aq2c48)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2df5 '(rnrs programs) '(6) '() '() '() '((exit . aq2c4a) (command-line . aq28dc)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2df6 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . aqba4) (identifier? . aqe5b) (generate-temporaries . aqe47) (free-identifier=? . aqe49) (syntax->datum . aqe5f) (datum->syntax . aqe5d) (bound-identifier=? . aqe4b) (syntax-violation . aqe59) (unsyntax-splicing . aq2a7a) (unsyntax . aq2a79) (_ . aq2a76) (... . aq2a73) (with-syntax . aq2a68) (quasisyntax . aq2a67) (syntax . aq2a53) (syntax-case . aq2a52)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2df7 '(rnrs files) '(6) '() '() '() '((delete-file . aq2cd6) (file-exists? . aq2cd5) (make-i/o-write-error . aq2c83) (make-i/o-read-error . aq2c82) (make-i/o-port-error . aq2c81) (make-i/o-invalid-position-error . aq2c80) (make-i/o-filename-error . aq2c7f) (make-i/o-file-protection-error . aq2c7e) (make-i/o-file-is-read-only-error . aq2c7d) (make-i/o-file-does-not-exist-error . aq2c7c) (make-i/o-file-already-exists-error . aq2c7b) (make-i/o-error . aq2c7a) (i/o-write-error? . aq2c6e) (i/o-read-error? . aq2c6d) (i/o-port-error? . aq2c6c) (i/o-invalid-position-error? . aq2c6b) (i/o-filename-error? . aq2c6a) (i/o-file-protection-error? . aq2c69) (i/o-file-is-read-only-error? . aq2c68) (i/o-file-does-not-exist-error? . aq2c67) (i/o-file-already-exists-error? . aq2c66) (i/o-error? . aq2c65) (i/o-error-position . aq2c64) (i/o-error-port . aq2c63) (i/o-error-filename . aq2c62) (&i/o-port . aq2aa5) (&i/o-file-does-not-exist . aq2aa4) (&i/o-file-already-exists . aq2aa3) (&i/o-file-is-read-only . aq2aa2) (&i/o-file-protection . aq2aa1) (&i/o-filename . aq2aa0) (&i/o-invalid-position . aq2a9f) (&i/o-write . aq2a9e) (&i/o-read . aq2a9d) (&i/o . aq2a9c)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2df8 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . aq2cd4) (vector-sort . aq2cd3) (list-sort . aq2cd2)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2df9 '(rnrs base) '(6) '() '() '() '((zero? . aq2b4c) (vector? . aq2b4b) (vector-set! . aq2b4a) (vector-ref . aq2b49) (vector-map . aq2b48) (vector-length . aq2b47) (vector-for-each . aq2b46) (vector-fill! . aq2b45) (vector->list . aq2b44) (vector . aq2b43) (values . aq2b42) (truncate . aq2b41) (tan . aq2b40) (symbol? . aq2b3f) (symbol=? . aq2b3e) (symbol->string . aq2b3d) (substring . aq2b3c) (string? . aq2b3b) (string>? . aq2b3a) (string>=? . aq2b39) (string=? . aq2b38) (string<? . aq2b37) (string<=? . aq2b36) (string-ref . aq2b35) (string-length . aq2b34) (string-for-each . aq2b33) (string-copy . aq2b32) (string-append . aq2b31) (string->symbol . aq2b30) (string->number . aq2b2f) (string->list . aq2b2e) (string . aq2b2d) (sqrt . aq2b2c) (sin . aq2b2b) (round . aq2b2a) (reverse . aq2b29) (real? . aq2b28) (real-valued? . aq2b27) (real-part . aq2b26) (rationalize . aq2b25) (rational? . aq2b24) (rational-valued? . aq2b23) (procedure? . aq2b22) (positive? . aq2b21) (pair? . aq2b20) (odd? . aq2b1f) (numerator . aq2b1e) (number? . aq2b1d) (number->string . aq2b1c) (null? . aq2b1b) (not . aq2b1a) (negative? . aq2b19) (nan? . aq2b18) (min . aq2b17) (max . aq2b16) (map . aq2b15) (make-vector . aq2b14) (make-string . aq2b13) (make-rectangular . aq2b12) (make-polar . aq2b11) (magnitude . aq2b10) (log . aq2b0f) (list? . aq2b0e) (list-tail . aq2b0d) (list-ref . aq2b0c) (list->vector . aq2b0b) (list->string . aq2b0a) (list . aq2b09) (length . aq2b08) (lcm . aq2b07) (integer? . aq2b06) (integer-valued? . aq2b05) (integer->char . aq2b04) (infinite? . aq2b03) (inexact? . aq2b02) (inexact . aq2b01) (imag-part . aq2b00) (gcd . aq2aff) (for-each . aq2afe) (floor . aq2afd) (finite? . aq2afc) (expt . aq2afb) (exp . aq2afa) (exact? . aq2af9) (exact-integer-sqrt . aq2af8) (exact . aq2af7) (even? . aq2af6) (error . aq2af5) (eqv? . aq2af4) (equal? . aq2af3) (eq? . aq2af2) (dynamic-wind . aq2af1) (div0-and-mod0 . aq2af0) (mod0 . aq2aef) (div0 . aq2aee) (div-and-mod . aq2aed) (mod . aq2aec) (div . aq2aeb) (denominator . aq2aea) (cos . aq2ae9) (cons . aq2ae8) (complex? . aq2ae7) (char? . aq2ae6) (char>? . aq2ae5) (char>=? . aq2ae4) (char=? . aq2ae3) (char<? . aq2ae2) (char<=? . aq2ae1) (char->integer . aq2ae0) (ceiling . aq2adf) (call-with-values . aq2ade) (call/cc . aq2add) (call-with-current-continuation . aq2adc) (cddddr . aq2adb) (cdddar . aq2ada) (cddadr . aq2ad9) (cddaar . aq2ad8) (cdaddr . aq2ad7) (cdadar . aq2ad6) (cdaadr . aq2ad5) (cdaaar . aq2ad4) (cadddr . aq2ad3) (caddar . aq2ad2) (cadadr . aq2ad1) (cadaar . aq2ad0) (caaddr . aq2acf) (caadar . aq2ace) (caaadr . aq2acd) (caaaar . aq2acc) (cdddr . aq2acb) (cddar . aq2aca) (cdadr . aq2ac9) (cdaar . aq2ac8) (caddr . aq2ac7) (cadar . aq2ac6) (caadr . aq2ac5) (caaar . aq2ac4) (cddr . aq2ac3) (cdar . aq2ac2) (cadr . aq2ac1) (caar . aq2ac0) (cdr . aq2abf) (car . aq2abe) (boolean? . aq2abd) (boolean=? . aq2abc) (atan . aq2abb) (assertion-violation . aq2aba) (asin . aq2ab9) (apply . aq2ab8) (append . aq2ab7) (angle . aq2ab6) (acos . aq2ab5) (abs . aq2ab4) (/ . aq2ab3) (* . aq2ab2) (- . aq2ab1) (+ . aq2ab0) (>= . aq2aaf) (> . aq2aae) (= . aq2aad) (<= . aq2aac) (< . aq2aab) (unquote-splicing . aq2a78) (unquote . aq2a77) (_ . aq2a76) (else . aq2a75) (=> . aq2a74) (... . aq2a73) (assert . aq2a72) (cond . aq2a6d) (let* . aq2a6c) (let*-values . aq2a6b) (let-values . aq2a6a) (identifier-syntax . aq2a69) (quasiquote . aq2a66) (syntax-rules . aq2a65) (case . aq2a60) (or . aq2a5c) (and . aq2a5b) (if . aq2a5a) (let . aq2a59) (letrec* . aq2a58) (letrec . aq2a57) (lambda . aq2a54) (quote . aq2a51) (letrec-syntax . aq2a4f) (let-syntax . aq2a4e) (set! . aq2a4d) (begin . aq2a4b) (define-syntax . aq2a49) (define . aq2a48)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2dfa '(rnrs lists) '(6) '() '() '() '((remove . aq2c45) (remv . aq2c44) (remp . aq2c43) (remq . aq2c42) (partition . aq2c41) (memv . aq2c40) (memq . aq2c3f) (memp . aq2c3e) (member . aq2c3d) (exists . aq2c3c) (for-all . aq2c3b) (fold-right . aq2c3a) (fold-left . aq2c39) (find . aq2c38) (filter . aq2c37) (cons* . aq2c36) (assv . aq2c35) (assq . aq2c34) (assp . aq2c33) (assoc . aq2c32)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2dfb '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . aq2cbc) (call-with-input-file . aq2cbb) (write-char . aq2cba) (write . aq2cb9) (with-output-to-file . aq2cb8) (with-input-from-file . aq2cb7) (read-char . aq2cb6) (read . aq2cb5) (peek-char . aq2cb4) (open-output-file . aq2cb3) (open-input-file . aq2cb2) (newline . aq2cb1) (display . aq2cb0) (close-output-port . aq2caf) (close-input-port . aq2cae) (eof-object? . aq2cad) (eof-object . aq2cac) (current-error-port . aq2cab) (current-output-port . aq2caa) (current-input-port . aq2ca9) (output-port? . aq2ca8) (input-port? . aq2ca7) (make-i/o-write-error . aq2c83) (make-i/o-read-error . aq2c82) (make-i/o-port-error . aq2c81) (make-i/o-invalid-position-error . aq2c80) (make-i/o-filename-error . aq2c7f) (make-i/o-file-protection-error . aq2c7e) (make-i/o-file-is-read-only-error . aq2c7d) (make-i/o-file-does-not-exist-error . aq2c7c) (make-i/o-file-already-exists-error . aq2c7b) (make-i/o-error . aq2c7a) (i/o-write-error? . aq2c6e) (i/o-read-error? . aq2c6d) (i/o-port-error? . aq2c6c) (i/o-invalid-position-error? . aq2c6b) (i/o-filename-error? . aq2c6a) (i/o-file-protection-error? . aq2c69) (i/o-file-is-read-only-error? . aq2c68) (i/o-file-does-not-exist-error? . aq2c67) (i/o-file-already-exists-error? . aq2c66) (i/o-error? . aq2c65) (i/o-error-position . aq2c64) (i/o-error-port . aq2c63) (i/o-error-filename . aq2c62) (&i/o-port . aq2aa5) (&i/o-file-does-not-exist . aq2aa4) (&i/o-file-already-exists . aq2aa3) (&i/o-file-is-read-only . aq2aa2) (&i/o-file-protection . aq2aa1) (&i/o-filename . aq2aa0) (&i/o-invalid-position . aq2a9f) (&i/o-write . aq2a9e) (&i/o-read . aq2a9d) (&i/o . aq2a9c)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2dfc '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . aq2c71) (utf32->string . aq2bf7) (utf16->string . aq2bf6) (utf8->string . aq2bf5) (uint-list->bytevector . aq2bf4) (u8-list->bytevector . aq2bf3) (string->utf8 . aq2bf2) (string->utf32 . aq2bf1) (string->utf16 . aq2bf0) (sint-list->bytevector . aq2bef) (native-endianness . aq2bee) (bytevector? . aq2bed) (bytevector=? . aq2bec) (bytevector-uint-set! . aq2beb) (bytevector-uint-ref . aq2bea) (bytevector-u8-set! . aq2be9) (bytevector-u8-ref . aq2be8) (bytevector-u64-set! . aq2be7) (bytevector-u64-ref . aq2be6) (bytevector-u64-native-set! . aq2be5) (bytevector-u64-native-ref . aq2be4) (bytevector-u32-set! . aq2be3) (bytevector-u32-ref . aq2be2) (bytevector-u32-native-set! . aq2be1) (bytevector-u32-native-ref . aq2be0) (bytevector-u16-set! . aq2bdf) (bytevector-u16-ref . aq2bde) (bytevector-u16-native-set! . aq2bdd) (bytevector-u16-native-ref . aq2bdc) (bytevector-sint-set! . aq2bdb) (bytevector-sint-ref . aq2bda) (bytevector-s8-set! . aq2bd9) (bytevector-s8-ref . aq2bd8) (bytevector-s64-set! . aq2bd7) (bytevector-s64-ref . aq2bd6) (bytevector-s64-native-set! . aq2bd5) (bytevector-s64-native-ref . aq2bd4) (bytevector-s32-set! . aq2bd3) (bytevector-s32-ref . aq2bd2) (bytevector-s32-native-set! . aq2bd1) (bytevector-s32-native-ref . aq2bd0) (bytevector-s16-set! . aq2bcf) (bytevector-s16-ref . aq2bce) (bytevector-s16-native-set! . aq2bcd) (bytevector-s16-native-ref . aq2bcc) (bytevector-length . aq2bcb) (bytevector-ieee-single-ref . aq2bca) (bytevector-ieee-single-set! . aq2bc9) (bytevector-ieee-single-native-set! . aq2bc8) (bytevector-ieee-single-native-ref . aq2bc7) (bytevector-ieee-double-set! . aq2bc6) (bytevector-ieee-double-ref . aq2bc5) (bytevector-ieee-double-native-set! . aq2bc4) (bytevector-ieee-double-native-ref . aq2bc3) (bytevector-fill! . aq2bc2) (bytevector-copy! . aq2bc1) (bytevector-copy . aq2bc0) (bytevector->uint-list . aq2bbf) (bytevector->u8-list . aq2bbe) (bytevector->sint-list . aq2bbd) (endianness . aq2a71)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2dfd '(rnrs unicode) '(6) '() '() '() '((string-upcase . aq2d04) (string-titlecase . aq2d03) (string-normalize-nfkd . aq2d02) (string-normalize-nfkc . aq2d01) (string-normalize-nfd . aq2d00) (string-normalize-nfc . aq2cff) (string-foldcase . aq2cfe) (string-downcase . aq2cfd) (string-ci>? . aq2cfc) (string-ci>=? . aq2cfb) (string-ci=? . aq2cfa) (string-ci<? . aq2cf9) (string-ci<=? . aq2cf8) (char-whitespace? . aq2cf7) (char-upper-case? . aq2cf6) (char-title-case? . aq2cf5) (char-numeric? . aq2cf4) (char-lower-case? . aq2cf3) (char-general-category . aq2cf2) (char-upcase . aq2cf1) (char-titlecase . aq2cf0) (char-foldcase . aq2cef) (char-downcase . aq2cee) (char-ci>? . aq2ced) (char-ci>=? . aq2cec) (char-ci=? . aq2ceb) (char-ci<? . aq2cea) (char-ci<=? . aq2ce9) (char-alphabetic? . aq2ce8)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2dfe '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . aq2c2b) (raise-continuable . aq2c2a) (raise . aq2c29) (guard . aq2a7d) (else . aq2a75) (=> . aq2a74)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2dff '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . aq2b5d) (bitwise-reverse-bit-field . aq2b5c) (bitwise-length . aq2b5b) (bitwise-if . aq2b5a) (bitwise-first-bit-set . aq2b59) (bitwise-copy-bit-field . aq2b58) (bitwise-copy-bit . aq2b57) (bitwise-bit-set? . aq2b56) (bitwise-bit-field . aq2b55) (bitwise-bit-count . aq2b54) (bitwise-xor . aq2b53) (bitwise-ior . aq2b52) (bitwise-and . aq2b51) (bitwise-not . aq2b50) (bitwise-arithmetic-shift-right . aq2b4f) (bitwise-arithmetic-shift-left . aq2b4e) (bitwise-arithmetic-shift . aq2b4d)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2e00 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . aq2b8a) (fxxor . aq2b89) (fxrotate-bit-field . aq2b88) (fxreverse-bit-field . aq2b87) (fxpositive? . aq2b86) (fxodd? . aq2b85) (fxnot . aq2b84) (fxnegative? . aq2b83) (fxmod0 . aq2b82) (fxmod . aq2b81) (fxmin . aq2b80) (fxmax . aq2b7f) (fxlength . aq2b7e) (fxior . aq2b7d) (fxif . aq2b7c) (fxfirst-bit-set . aq2b7b) (fxeven? . aq2b7a) (fxdiv0-and-mod0 . aq2b79) (fxdiv0 . aq2b78) (fxdiv-and-mod . aq2b77) (fxdiv . aq2b76) (fxcopy-bit-field . aq2b75) (fxcopy-bit . aq2b74) (fxbit-set? . aq2b73) (fxbit-field . aq2b72) (fxbit-count . aq2b71) (fxarithmetic-shift-right . aq2b70) (fxarithmetic-shift-left . aq2b6f) (fxarithmetic-shift . aq2b6e) (fxand . aq2b6d) (fx>? . aq2b6c) (fx>=? . aq2b6b) (fx=? . aq2b6a) (fx<? . aq2b69) (fx<=? . aq2b68) (fx-/carry . aq2b67) (fx- . aq2b66) (fx+/carry . aq2b65) (fx+ . aq2b64) (fx*/carry . aq2b63) (fx* . aq2b62) (greatest-fixnum . aq2b61) (least-fixnum . aq2b60) (fixnum-width . aq2b5f) (fixnum? . aq2b5e)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2e01 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . aq2bbc) (no-infinities-violation? . aq2bbb) (make-no-nans-violation . aq2bba) (make-no-infinities-violation . aq2bb9) (real->flonum . aq2bb8) (flzero? . aq2bb7) (fltruncate . aq2bb6) (fltan . aq2bb5) (flsqrt . aq2bb4) (flsin . aq2bb3) (flround . aq2bb2) (flpositive? . aq2bb1) (flonum? . aq2bb0) (flodd? . aq2baf) (flnumerator . aq2bae) (flnegative? . aq2bad) (flnan? . aq2bac) (flmod0 . aq2bab) (flmod . aq2baa) (flmin . aq2ba9) (flmax . aq2ba8) (fllog . aq2ba7) (flinteger? . aq2ba6) (flinfinite? . aq2ba5) (flfloor . aq2ba4) (flfinite? . aq2ba3) (flexpt . aq2ba2) (flexp . aq2ba1) (fleven? . aq2ba0) (fldiv0-and-mod0 . aq2b9f) (fldiv0 . aq2b9e) (fldiv-and-mod . aq2b9d) (fldiv . aq2b9c) (fldenominator . aq2b9b) (flcos . aq2b9a) (flceiling . aq2b99) (flatan . aq2b98) (flasin . aq2b97) (flacos . aq2b96) (flabs . aq2b95) (fl>? . aq2b94) (fl>=? . aq2b93) (fl=? . aq2b92) (fl<? . aq2b91) (fl<=? . aq2b90) (fl/ . aq2b8f) (fl- . aq2b8e) (fl+ . aq2b8d) (fl* . aq2b8c) (fixnum->flonum . aq2b8b) (&no-nans . aq2aa9) (&no-infinities . aq2aa8)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2e02 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . aq2cd1) (string-ci-hash . aq2cd0) (string-hash . aq2ccf) (equal-hash . aq2cce) (hashtable-equivalence-function . aq2ccd) (make-hashtable . aq2ccc) (hashtable-hash-function . aq2ccb) (make-eqv-hashtable . aq2cca) (make-eq-hashtable . aq2cc9) (hashtable? . aq2cc8) (hashtable-update! . aq2cc7) (hashtable-size . aq2cc6) (hashtable-set! . aq2cc5) (hashtable-ref . aq2cc4) (hashtable-mutable? . aq2cc3) (hashtable-keys . aq2cc2) (hashtable-entries . aq2cc1) (hashtable-delete! . aq2cc0) (hashtable-copy . aq2cbf) (hashtable-contains? . aq2cbe) (hashtable-clear! . aq2cbd)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2e03 '(rnrs io ports) '(6) '() '() '() '((eof-object? . aq2cad) (eof-object . aq2cac) (current-error-port . aq2cab) (current-output-port . aq2caa) (current-input-port . aq2ca9) (output-port? . aq2ca8) (input-port? . aq2ca7) (utf-8-codec . aq2ca6) (utf-16-codec . aq2ca5) (transcoder-error-handling-mode . aq2ca4) (transcoder-eol-style . aq2ca3) (transcoder-codec . aq2ca2) (transcoded-port . aq2ca1) (textual-port? . aq2ca0) (string->bytevector . aq2c9f) (standard-output-port . aq2c9e) (standard-input-port . aq2c9d) (standard-error-port . aq2c9c) (set-port-position! . aq2c9b) (put-u8 . aq2c9a) (put-string . aq2c99) (put-datum . aq2c98) (put-char . aq2c97) (put-bytevector . aq2c96) (port? . aq2c95) (port-transcoder . aq2c94) (port-position . aq2c93) (port-has-set-port-position!? . aq2c92) (port-has-port-position? . aq2c91) (port-eof? . aq2c90) (output-port-buffer-mode . aq2c8f) (open-string-output-port . aq2c8e) (open-string-input-port . aq2c8d) (open-file-output-port . aq2c8c) (open-file-input/output-port . aq2c8b) (open-file-input-port . aq2c8a) (open-bytevector-output-port . aq2c89) (open-bytevector-input-port . aq2c88) (native-transcoder . aq2c87) (native-eol-style . aq2c86) (make-transcoder . aq2c85) (latin-1-codec . aq2c84) (make-i/o-write-error . aq2c83) (make-i/o-read-error . aq2c82) (make-i/o-port-error . aq2c81) (make-i/o-invalid-position-error . aq2c80) (make-i/o-filename-error . aq2c7f) (make-i/o-file-protection-error . aq2c7e) (make-i/o-file-is-read-only-error . aq2c7d) (make-i/o-file-does-not-exist-error . aq2c7c) (make-i/o-file-already-exists-error . aq2c7b) (make-i/o-error . aq2c7a) (make-i/o-encoding-error . aq2c79) (make-i/o-decoding-error . aq2c78) (make-custom-textual-output-port . aq2c77) (make-custom-textual-input/output-port . aq2c76) (make-custom-textual-input-port . aq2c75) (make-custom-binary-output-port . aq2c74) (make-custom-binary-input/output-port . aq2c73) (make-custom-binary-input-port . aq2c72) (lookahead-u8 . aq2c70) (lookahead-char . aq2c6f) (i/o-write-error? . aq2c6e) (i/o-read-error? . aq2c6d) (i/o-port-error? . aq2c6c) (i/o-invalid-position-error? . aq2c6b) (i/o-filename-error? . aq2c6a) (i/o-file-protection-error? . aq2c69) (i/o-file-is-read-only-error? . aq2c68) (i/o-file-does-not-exist-error? . aq2c67) (i/o-file-already-exists-error? . aq2c66) (i/o-error? . aq2c65) (i/o-error-position . aq2c64) (i/o-error-port . aq2c63) (i/o-error-filename . aq2c62) (i/o-encoding-error? . aq2c61) (i/o-encoding-error-char . aq2c60) (i/o-decoding-error? . aq2c5f) (get-u8 . aq2c5e) (get-string-n! . aq2c5d) (get-string-n . aq2c5c) (get-string-all . aq2c5b) (get-line . aq2c5a) (get-datum . aq2c59) (get-char . aq2c58) (get-bytevector-some . aq2c57) (get-bytevector-n! . aq2c56) (get-bytevector-n . aq2c55) (get-bytevector-all . aq2c54) (flush-output-port . aq2c53) (close-port . aq2c52) (call-with-string-output-port . aq2c31) (call-with-port . aq2c30) (call-with-bytevector-output-port . aq2c2f) (bytevector->string . aq2c2e) (buffer-mode? . aq2c2d) (binary-port? . aq2c2c) (&i/o-encoding . aq2aa7) (&i/o-decoding . aq2aa6) (&i/o-port . aq2aa5) (&i/o-file-does-not-exist . aq2aa4) (&i/o-file-already-exists . aq2aa3) (&i/o-file-is-read-only . aq2aa2) (&i/o-file-protection . aq2aa1) (&i/o-filename . aq2aa0) (&i/o-invalid-position . aq2a9f) (&i/o-write . aq2a9e) (&i/o-read . aq2a9d) (&i/o . aq2a9c) (error-handling-mode . aq2a81) (file-options . aq2a80) (buffer-mode . aq2a7f) (eol-style . aq2a7e)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2e04 '(rnrs enums) '(6) '() '() '() '((make-enumeration . aq2c28) (enum-set=? . aq2c27) (enum-set-universe . aq2c26) (enum-set-union . aq2c25) (enum-set-subset? . aq2c24) (enum-set-projection . aq2c23) (enum-set-member? . aq2c22) (enum-set-intersection . aq2c21) (enum-set-indexer . aq2c20) (enum-set-difference . aq2c1f) (enum-set-constructor . aq2c1e) (enum-set-complement . aq2c1d) (enum-set->list . aq2c1c) (define-enumeration . aq2a8c)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2e05 '(rnrs conditions) '(6) '() '() '() '((who-condition? . aq2c1b) (warning? . aq2c1a) (violation? . aq2c19) (undefined-violation? . aq2c18) (syntax-violation? . aq2c17) (syntax-violation-subform . aq2c16) (syntax-violation-form . aq2c15) (syntax-violation . aqe59) (simple-conditions . aq2c14) (serious-condition? . aq2c13) (non-continuable-violation? . aq2c12) (message-condition? . aq2c11) (make-who-condition . aq2c10) (make-warning . aq2c0f) (make-violation . aq2c0e) (make-undefined-violation . aq2c0d) (make-syntax-violation . aq2c0c) (make-serious-condition . aq2c0b) (make-non-continuable-violation . aq2c0a) (make-message-condition . aq2c09) (make-lexical-violation . aq2c08) (make-irritants-condition . aq2c07) (make-implementation-restriction-violation . aq2c06) (make-error . aq2c05) (make-assertion-violation . aq2c04) (lexical-violation? . aq2c03) (irritants-condition? . aq2c02) (implementation-restriction-violation? . aq2c01) (error? . aq2c00) (condition-who . aq2bff) (condition-predicate . aq2bfe) (condition-message . aq2bfd) (condition-irritants . aq2bfc) (condition-accessor . aq2bfb) (condition . aq2bfa) (assertion-violation? . aq2bf9) (condition? . aq2bf8) (&undefined . aq2a9b) (&syntax . aq2a9a) (&lexical . aq2a99) (&implementation-restriction . aq2a98) (&non-continuable . aq2a97) (&who . aq2a96) (&irritants . aq2a95) (&assertion . aq2a94) (&violation . aq2a93) (&error . aq2a92) (&serious . aq2a91) (&warning . aq2a90) (&message . aq2a8f) (&condition . aq2a8e) (define-condition-type . aq2a8d)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2e06 '(rnrs records inspection) '(6) '() '() '() '((record? . aq2ce0) (record-type-uid . aq2cdf) (record-type-sealed? . aq2cde) (record-type-parent . aq2cdd) (record-type-opaque? . aq2cdc) (record-type-name . aq2cdb) (record-type-generative? . aq2cda) (record-type-field-names . aq2cd9) (record-rtd . aq2cd8) (record-field-mutable? . aq2cd7)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2e07 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . aq2ce7) (record-predicate . aq2ce6) (record-mutator . aq2ce5) (record-constructor . aq2ce4) (record-accessor . aq2ce3) (make-record-type-descriptor . aq2ce2) (make-record-constructor-descriptor . aq2ce1)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2e08 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . aq2a8b) (parent-rtd . aq2a8a) (nongenerative . aq2a89) (opaque . aq2a88) (sealed . aq2a87) (protocol . aq2a86) (parent . aq2a85) (immutable . aq2a84) (mutable . aq2a83) (fields . aq2a82) (record-constructor-descriptor . aq2a62) (record-type-descriptor . aq2a61)) '() values values '#f '#f '#t '#f) (aq98d@aq7d9@install-library 'aq2e09 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . aq2de9) (&no-nans-rtd . aq2de8) (&no-infinities-rcd . aq2de7) (&no-infinities-rtd . aq2de6) (&i/o-encoding-rcd . aq2de5) (&i/o-encoding-rtd . aq2de4) (&i/o-decoding-rcd . aq2de3) (&i/o-decoding-rtd . aq2de2) (&i/o-port-rcd . aq2de1) (&i/o-port-rtd . aq2de0) (&i/o-file-does-not-exist-rcd . aq2ddf) (&i/o-file-does-not-exist-rtd . aq2dde) (&i/o-file-already-exists-rcd . aq2ddd) (&i/o-file-already-exists-rtd . aq2ddc) (&i/o-file-is-read-only-rcd . aq2ddb) (&i/o-file-is-read-only-rtd . aq2dda) (&i/o-file-protection-rcd . aq2dd9) (&i/o-file-protection-rtd . aq2dd8) (&i/o-filename-rcd . aq2dd7) (&i/o-filename-rtd . aq2dd6) (&i/o-invalid-position-rcd . aq2dd5) (&i/o-invalid-position-rtd . aq2dd4) (&i/o-write-rcd . aq2dd3) (&i/o-write-rtd . aq2dd2) (&i/o-read-rcd . aq2dd1) (&i/o-read-rtd . aq2dd0) (&i/o-rcd . aq2dcf) (&i/o-rtd . aq2dce) (&undefined-rcd . aq2dcd) (&undefined-rtd . aq2dcc) (&syntax-rcd . aq2dcb) (&syntax-rtd . aq2dca) (&lexical-rcd . aq2dc9) (&lexical-rtd . aq2dc8) (&implementation-restriction-rcd . aq2dc7) (&implementation-restriction-rtd . aq2dc6) (&non-continuable-rcd . aq2dc5) (&non-continuable-rtd . aq2dc4) (&who-rcd . aq2dc3) (&who-rtd . aq2dc2) (&irritants-rcd . aq2dc1) (&irritants-rtd . aq2dc0) (&assertion-rcd . aq2dbf) (&assertion-rtd . aq2dbe) (&violation-rcd . aq2dbd) (&violation-rtd . aq2dbc) (&error-rcd . aq2dbb) (&error-rtd . aq2dba) (&serious-rcd . aq2db9) (&serious-rtd . aq2db8) (&warning-rcd . aq2db7) (&warning-rtd . aq2db6) (&message-rcd . aq2db5) (&message-rtd . aq2db4) (&condition-rcd . aq2db3) (&condition-rtd . aq2db2) (syntax-error . aqe55) (syntax-dispatch . aqd79) (pretty-print . aq2db1) (eval-core . aq2db0) (set-symbol-value! . aq2daf) (symbol-value . aq2dae) (gensym . aq2dad) (void . aq2dac) (load . aq28e2) (interaction-environment . aqe67) (char-ready? . aq2dab) (regexp? . aq2daa) (read-line . aq2da9) (gensym-prefix-set! . aq2da8) (ungensym . aq2da7) (alist->eq-hash-table . aq2da6) (assoc-ref . aq2da5) (print . aq2da4) (format . aq2da3) (host-os . aq2da2) (library-path . aq7b8) (standard-library-path . aq2da1) (%monapi-name-whereis . aq2da0) (%monapi-message-send . aq2d9f) (file-newer? . aq2d9e) (stat-mtime . aq2d9d) (write-to-file . aq2d9c) (file->list . aq2d9b) (file->string . aq2d9a) (digit->integer . aq2d99) (call-with-string-input-port . aq2d98) (call-with-string-io . aq2d97) (string-split . aq2d96) (bytevector-for-each . aq2d95) (string->regexp . aq2d94) (rxmatch . aq2d93) (regexp-replace-all . aq2d92) (hashtable-for-each . aq2d91) (mosh-cache-dir . aq5a2) (call-process . aq2d90) (local-tz-offset . aq2d8f) (microseconds . aq2d8e) (directory-list . aq2d8d) (set-current-directory! . aq2d8c) (expand-path . aq2d8b) (current-directory . aq2d8a) (%spawn . aq2d89) (%waitpid . aq2d88) (simple-struct-name . aq2d87) (simple-struct-set! . aq2d86) (simple-struct-ref . aq2d85) (make-simple-struct . aq2d84) (simple-struct? . aq2d83) (pointer-ref-c-int64 . aq2d82) (pointer-ref-c-int32 . aq2d81) (pointer-ref-c-int16 . aq2d80) (pointer-ref-c-int8 . aq2d7f) (pointer-ref-c-uint64 . aq2d7e) (pointer-ref-c-uint32 . aq2d7d) (pointer-ref-c-uint16 . aq2d7c) (pointer-ref-c-uint8 . aq2d7b) (pointer-set-c-uint64! . aq2d7a) (pointer-set-c-uint32! . aq2d79) (pointer-set-c-uint16! . aq2d78) (pointer-set-c-uint8! . aq2d77) (pointer-set-c-int64! . aq2d76) (pointer-set-c-int32! . aq2d75) (pointer-set-c-int16! . aq2d74) (pointer-set-c-int8! . aq2d73) (pointer-set-c-pointer! . aq2d72) (pointer-set-c-double! . aq2d71) (pointer-set-c-float! . aq2d70) (pointer-set-c-long-long! . aq2d6f) (pointer-set-c-long! . aq2d6e) (pointer-set-c-int! . aq2d6d) (pointer-set-c-short! . aq2d6c) (pointer-set-c-char! . aq2d6b) (pointer-ref-c-pointer . aq2d6a) (pointer-ref-c-double . aq2d69) (pointer-ref-c-float . aq2d68) (pointer-ref-c-unsigned-long-long . aq2d67) (pointer-ref-c-signed-long-long . aq2d66) (pointer-ref-c-unsigned-long . aq2d65) (pointer-ref-c-signed-long . aq2d64) (pointer-ref-c-unsigned-int . aq2d63) (pointer-ref-c-signed-int . aq2d62) (pointer-ref-c-unsigned-short . aq2d61) (pointer-ref-c-signed-short . aq2d60) (pointer-ref-c-unsigned-char . aq2d5f) (pointer-ref-c-signed-char . aq2d5e) (pointer->integer . aq2d5d) (integer->pointer . aq2d5c) (pointer? . aq2d5b) (shared-errno . aq2d5a) (%ffi-free-c-callback-trampoline . aq2d59) (%ffi-make-c-callback-trampoline . aq2d58) (%ffi-free . aq2d57) (%ffi-malloc . aq2d56) (%ffi-supported? . aq2d55) (%ffi-pointer->string . aq2d54) (%ffi-call . aq2d53) (%ffi-lookup . aq2d52) (%ffi-open . aq2d51) (null-terminated-utf8->string . aq2d50) (null-terminated-bytevector->string . aq2d4f) (%exec . aq2d4e) (%fork . aq2d4d) (%pipe . aq2d4c) (p . aq2d4b) (open-output-string . aq2d4a) (get-output-string . aq2d49) (file-stat-ctime . aq2d48) (file-stat-atime . aq2d47) (file-stat-mtime . aq2d46) (file-size-in-bytes . aq2d45) (file-writable? . aq2d44) (file-executable? . aq2d43) (file-readable? . aq2d42) (file-regular? . aq2d41) (file-symbolic-link? . aq2d40) (file-directory? . aq2d3f) (create-symbolic-link . aq2d3e) (rename-file . aq2d3d) (delete-directory . aq2d3c) (create-directory . aq2d3b) (create-mosh-cache-dir . aq2d3a) (get-environment-variables . aq2d39) (current-exception-handler . aq2d38) (get-environment-variable . aq2d37) (join-wraps . aq2d36) (id->real-label . aq2d35) (same-marks? . aq2d34) (same-marks*? . aq2d33) (get-timeofday . aq2d32) (get-command-line . aq2d31) (sys-display . aq2d30) (whereis . aq2d2f) (register . aq2d2e) (vm-join! . aq2d2d) (vm-set-value! . aq2d2c) (vm? . aq2d2b) (main-vm? . aq2d2a) (vm-eval . aq2d29) (vm-self . aq2d28) (vm-start! . aq2d27) (make-vm . aq2d26) (mutex-try-lock! . aq2d25) (mutex-unlock! . aq2d24) (mutex-lock! . aq2d23) (mutex? . aq2d22) (make-mutex . aq2d21) (condition-variable-notify-all! . aq2d20) (condition-variable-notify! . aq2d1f) (condition-variable-wait! . aq2d1e) (make-condition-variable . aq2d1d) (write/ss . aq2d1c) (mosh-executable-path . aq2d1b) (make-file-options . aq2d1a) (source-info . aq2d19) (make-compiler-instruction . aq2d18) (make-instruction . aq2d17) (set-source-info! . aq2d16) (bignum? . aq2d15) (fast-equal? . aq2d14) (fasl-read . aq2d13) (fasl-write . aq2d12) (time-usage . aq2d11) (os-constant . aq2d10) (disasm . aq2d0f) (make-parameter . aq5a0) (socket-port . aq2d0e) (socket-shutdown . aq2d0d) (socket-close . aq2d0c) (socket-send . aq2d0b) (socket-recv! . aq2d0a) (socket-recv . aq2d09) (make-server-socket . aq2d08) (make-client-socket . aq2d07) (socket-accept . aq2d06) (socket? . aq2d05) (string-upcase . aq2d04) (string-titlecase . aq2d03) (string-normalize-nfkd . aq2d02) (string-normalize-nfkc . aq2d01) (string-normalize-nfd . aq2d00) (string-normalize-nfc . aq2cff) (string-foldcase . aq2cfe) (string-downcase . aq2cfd) (string-ci>? . aq2cfc) (string-ci>=? . aq2cfb) (string-ci=? . aq2cfa) (string-ci<? . aq2cf9) (string-ci<=? . aq2cf8) (char-whitespace? . aq2cf7) (char-upper-case? . aq2cf6) (char-title-case? . aq2cf5) (char-numeric? . aq2cf4) (char-lower-case? . aq2cf3) (char-general-category . aq2cf2) (char-upcase . aq2cf1) (char-titlecase . aq2cf0) (char-foldcase . aq2cef) (char-downcase . aq2cee) (char-ci>? . aq2ced) (char-ci>=? . aq2cec) (char-ci=? . aq2ceb) (char-ci<? . aq2cea) (char-ci<=? . aq2ce9) (char-alphabetic? . aq2ce8) (make-variable-transformer . aqba4) (identifier? . aqe5b) (generate-temporaries . aqe47) (free-identifier=? . aqe49) (syntax->datum . aqe5f) (datum->syntax . aqe5d) (bound-identifier=? . aqe4b) (record-type-descriptor? . aq2ce7) (record-predicate . aq2ce6) (record-mutator . aq2ce5) (record-constructor . aq2ce4) (record-accessor . aq2ce3) (make-record-type-descriptor . aq2ce2) (make-record-constructor-descriptor . aq2ce1) (record? . aq2ce0) (record-type-uid . aq2cdf) (record-type-sealed? . aq2cde) (record-type-parent . aq2cdd) (record-type-opaque? . aq2cdc) (record-type-name . aq2cdb) (record-type-generative? . aq2cda) (record-type-field-names . aq2cd9) (record-rtd . aq2cd8) (record-field-mutable? . aq2cd7) (delete-file . aq2cd6) (file-exists? . aq2cd5) (vector-sort! . aq2cd4) (vector-sort . aq2cd3) (list-sort . aq2cd2) (symbol-hash . aq2cd1) (string-ci-hash . aq2cd0) (string-hash . aq2ccf) (equal-hash . aq2cce) (hashtable-equivalence-function . aq2ccd) (make-hashtable . aq2ccc) (hashtable-hash-function . aq2ccb) (make-eqv-hashtable . aq2cca) (make-eq-hashtable . aq2cc9) (hashtable? . aq2cc8) (hashtable-update! . aq2cc7) (hashtable-size . aq2cc6) (hashtable-set! . aq2cc5) (hashtable-ref . aq2cc4) (hashtable-mutable? . aq2cc3) (hashtable-keys . aq2cc2) (hashtable-entries . aq2cc1) (hashtable-delete! . aq2cc0) (hashtable-copy . aq2cbf) (hashtable-contains? . aq2cbe) (hashtable-clear! . aq2cbd) (call-with-output-file . aq2cbc) (call-with-input-file . aq2cbb) (write-char . aq2cba) (write . aq2cb9) (with-output-to-file . aq2cb8) (with-input-from-file . aq2cb7) (read-char . aq2cb6) (read . aq2cb5) (peek-char . aq2cb4) (open-output-file . aq2cb3) (open-input-file . aq2cb2) (newline . aq2cb1) (display . aq2cb0) (close-output-port . aq2caf) (close-input-port . aq2cae) (eof-object? . aq2cad) (eof-object . aq2cac) (current-error-port . aq2cab) (current-output-port . aq2caa) (current-input-port . aq2ca9) (output-port? . aq2ca8) (input-port? . aq2ca7) (utf-8-codec . aq2ca6) (utf-16-codec . aq2ca5) (transcoder-error-handling-mode . aq2ca4) (transcoder-eol-style . aq2ca3) (transcoder-codec . aq2ca2) (transcoded-port . aq2ca1) (textual-port? . aq2ca0) (string->bytevector . aq2c9f) (standard-output-port . aq2c9e) (standard-input-port . aq2c9d) (standard-error-port . aq2c9c) (set-port-position! . aq2c9b) (put-u8 . aq2c9a) (put-string . aq2c99) (put-datum . aq2c98) (put-char . aq2c97) (put-bytevector . aq2c96) (port? . aq2c95) (port-transcoder . aq2c94) (port-position . aq2c93) (port-has-set-port-position!? . aq2c92) (port-has-port-position? . aq2c91) (port-eof? . aq2c90) (output-port-buffer-mode . aq2c8f) (open-string-output-port . aq2c8e) (open-string-input-port . aq2c8d) (open-file-output-port . aq2c8c) (open-file-input/output-port . aq2c8b) (open-file-input-port . aq2c8a) (open-bytevector-output-port . aq2c89) (open-bytevector-input-port . aq2c88) (native-transcoder . aq2c87) (native-eol-style . aq2c86) (make-transcoder . aq2c85) (latin-1-codec . aq2c84) (make-i/o-write-error . aq2c83) (make-i/o-read-error . aq2c82) (make-i/o-port-error . aq2c81) (make-i/o-invalid-position-error . aq2c80) (make-i/o-filename-error . aq2c7f) (make-i/o-file-protection-error . aq2c7e) (make-i/o-file-is-read-only-error . aq2c7d) (make-i/o-file-does-not-exist-error . aq2c7c) (make-i/o-file-already-exists-error . aq2c7b) (make-i/o-error . aq2c7a) (make-i/o-encoding-error . aq2c79) (make-i/o-decoding-error . aq2c78) (make-custom-textual-output-port . aq2c77) (make-custom-textual-input/output-port . aq2c76) (make-custom-textual-input-port . aq2c75) (make-custom-binary-output-port . aq2c74) (make-custom-binary-input/output-port . aq2c73) (make-custom-binary-input-port . aq2c72) (make-bytevector . aq2c71) (lookahead-u8 . aq2c70) (lookahead-char . aq2c6f) (i/o-write-error? . aq2c6e) (i/o-read-error? . aq2c6d) (i/o-port-error? . aq2c6c) (i/o-invalid-position-error? . aq2c6b) (i/o-filename-error? . aq2c6a) (i/o-file-protection-error? . aq2c69) (i/o-file-is-read-only-error? . aq2c68) (i/o-file-does-not-exist-error? . aq2c67) (i/o-file-already-exists-error? . aq2c66) (i/o-error? . aq2c65) (i/o-error-position . aq2c64) (i/o-error-port . aq2c63) (i/o-error-filename . aq2c62) (i/o-encoding-error? . aq2c61) (i/o-encoding-error-char . aq2c60) (i/o-decoding-error? . aq2c5f) (get-u8 . aq2c5e) (get-string-n! . aq2c5d) (get-string-n . aq2c5c) (get-string-all . aq2c5b) (get-line . aq2c5a) (get-datum . aq2c59) (get-char . aq2c58) (get-bytevector-some . aq2c57) (get-bytevector-n! . aq2c56) (get-bytevector-n . aq2c55) (get-bytevector-all . aq2c54) (flush-output-port . aq2c53) (close-port . aq2c52) (scheme-report-environment . aqe35) (quotient . aq2c51) (null-environment . aqe33) (remainder . aq2c50) (modulo . aq2c4f) (inexact->exact . aq2c4e) (force . aq2c4d) (exact->inexact . aq2c4c) (make-promise . aq2c4b) (exit . aq2c4a) (command-line . aq28dc) (string-fill! . aq2c49) (string-set! . aq2c48) (set-cdr! . aq2c47) (set-car! . aq2c46) (remove . aq2c45) (remv . aq2c44) (remp . aq2c43) (remq . aq2c42) (partition . aq2c41) (memv . aq2c40) (memq . aq2c3f) (memp . aq2c3e) (member . aq2c3d) (exists . aq2c3c) (for-all . aq2c3b) (fold-right . aq2c3a) (fold-left . aq2c39) (find . aq2c38) (filter . aq2c37) (cons* . aq2c36) (assv . aq2c35) (assq . aq2c34) (assp . aq2c33) (assoc . aq2c32) (call-with-string-output-port . aq2c31) (call-with-port . aq2c30) (call-with-bytevector-output-port . aq2c2f) (bytevector->string . aq2c2e) (buffer-mode? . aq2c2d) (binary-port? . aq2c2c) (with-exception-handler . aq2c2b) (raise-continuable . aq2c2a) (raise . aq2c29) (eval . aqe39) (environment . aqe31) (make-enumeration . aq2c28) (enum-set=? . aq2c27) (enum-set-universe . aq2c26) (enum-set-union . aq2c25) (enum-set-subset? . aq2c24) (enum-set-projection . aq2c23) (enum-set-member? . aq2c22) (enum-set-intersection . aq2c21) (enum-set-indexer . aq2c20) (enum-set-difference . aq2c1f) (enum-set-constructor . aq2c1e) (enum-set-complement . aq2c1d) (enum-set->list . aq2c1c) (who-condition? . aq2c1b) (warning? . aq2c1a) (violation? . aq2c19) (undefined-violation? . aq2c18) (syntax-violation? . aq2c17) (syntax-violation-subform . aq2c16) (syntax-violation-form . aq2c15) (syntax-violation . aqe59) (simple-conditions . aq2c14) (serious-condition? . aq2c13) (non-continuable-violation? . aq2c12) (message-condition? . aq2c11) (make-who-condition . aq2c10) (make-warning . aq2c0f) (make-violation . aq2c0e) (make-undefined-violation . aq2c0d) (make-syntax-violation . aq2c0c) (make-serious-condition . aq2c0b) (make-non-continuable-violation . aq2c0a) (make-message-condition . aq2c09) (make-lexical-violation . aq2c08) (make-irritants-condition . aq2c07) (make-implementation-restriction-violation . aq2c06) (make-error . aq2c05) (make-assertion-violation . aq2c04) (lexical-violation? . aq2c03) (irritants-condition? . aq2c02) (implementation-restriction-violation? . aq2c01) (error? . aq2c00) (condition-who . aq2bff) (condition-predicate . aq2bfe) (condition-message . aq2bfd) (condition-irritants . aq2bfc) (condition-accessor . aq2bfb) (condition . aq2bfa) (assertion-violation? . aq2bf9) (condition? . aq2bf8) (utf32->string . aq2bf7) (utf16->string . aq2bf6) (utf8->string . aq2bf5) (uint-list->bytevector . aq2bf4) (u8-list->bytevector . aq2bf3) (string->utf8 . aq2bf2) (string->utf32 . aq2bf1) (string->utf16 . aq2bf0) (sint-list->bytevector . aq2bef) (native-endianness . aq2bee) (bytevector? . aq2bed) (bytevector=? . aq2bec) (bytevector-uint-set! . aq2beb) (bytevector-uint-ref . aq2bea) (bytevector-u8-set! . aq2be9) (bytevector-u8-ref . aq2be8) (bytevector-u64-set! . aq2be7) (bytevector-u64-ref . aq2be6) (bytevector-u64-native-set! . aq2be5) (bytevector-u64-native-ref . aq2be4) (bytevector-u32-set! . aq2be3) (bytevector-u32-ref . aq2be2) (bytevector-u32-native-set! . aq2be1) (bytevector-u32-native-ref . aq2be0) (bytevector-u16-set! . aq2bdf) (bytevector-u16-ref . aq2bde) (bytevector-u16-native-set! . aq2bdd) (bytevector-u16-native-ref . aq2bdc) (bytevector-sint-set! . aq2bdb) (bytevector-sint-ref . aq2bda) (bytevector-s8-set! . aq2bd9) (bytevector-s8-ref . aq2bd8) (bytevector-s64-set! . aq2bd7) (bytevector-s64-ref . aq2bd6) (bytevector-s64-native-set! . aq2bd5) (bytevector-s64-native-ref . aq2bd4) (bytevector-s32-set! . aq2bd3) (bytevector-s32-ref . aq2bd2) (bytevector-s32-native-set! . aq2bd1) (bytevector-s32-native-ref . aq2bd0) (bytevector-s16-set! . aq2bcf) (bytevector-s16-ref . aq2bce) (bytevector-s16-native-set! . aq2bcd) (bytevector-s16-native-ref . aq2bcc) (bytevector-length . aq2bcb) (bytevector-ieee-single-ref . aq2bca) (bytevector-ieee-single-set! . aq2bc9) (bytevector-ieee-single-native-set! . aq2bc8) (bytevector-ieee-single-native-ref . aq2bc7) (bytevector-ieee-double-set! . aq2bc6) (bytevector-ieee-double-ref . aq2bc5) (bytevector-ieee-double-native-set! . aq2bc4) (bytevector-ieee-double-native-ref . aq2bc3) (bytevector-fill! . aq2bc2) (bytevector-copy! . aq2bc1) (bytevector-copy . aq2bc0) (bytevector->uint-list . aq2bbf) (bytevector->u8-list . aq2bbe) (bytevector->sint-list . aq2bbd) (no-nans-violation? . aq2bbc) (no-infinities-violation? . aq2bbb) (make-no-nans-violation . aq2bba) (make-no-infinities-violation . aq2bb9) (real->flonum . aq2bb8) (flzero? . aq2bb7) (fltruncate . aq2bb6) (fltan . aq2bb5) (flsqrt . aq2bb4) (flsin . aq2bb3) (flround . aq2bb2) (flpositive? . aq2bb1) (flonum? . aq2bb0) (flodd? . aq2baf) (flnumerator . aq2bae) (flnegative? . aq2bad) (flnan? . aq2bac) (flmod0 . aq2bab) (flmod . aq2baa) (flmin . aq2ba9) (flmax . aq2ba8) (fllog . aq2ba7) (flinteger? . aq2ba6) (flinfinite? . aq2ba5) (flfloor . aq2ba4) (flfinite? . aq2ba3) (flexpt . aq2ba2) (flexp . aq2ba1) (fleven? . aq2ba0) (fldiv0-and-mod0 . aq2b9f) (fldiv0 . aq2b9e) (fldiv-and-mod . aq2b9d) (fldiv . aq2b9c) (fldenominator . aq2b9b) (flcos . aq2b9a) (flceiling . aq2b99) (flatan . aq2b98) (flasin . aq2b97) (flacos . aq2b96) (flabs . aq2b95) (fl>? . aq2b94) (fl>=? . aq2b93) (fl=? . aq2b92) (fl<? . aq2b91) (fl<=? . aq2b90) (fl/ . aq2b8f) (fl- . aq2b8e) (fl+ . aq2b8d) (fl* . aq2b8c) (fixnum->flonum . aq2b8b) (fxzero? . aq2b8a) (fxxor . aq2b89) (fxrotate-bit-field . aq2b88) (fxreverse-bit-field . aq2b87) (fxpositive? . aq2b86) (fxodd? . aq2b85) (fxnot . aq2b84) (fxnegative? . aq2b83) (fxmod0 . aq2b82) (fxmod . aq2b81) (fxmin . aq2b80) (fxmax . aq2b7f) (fxlength . aq2b7e) (fxior . aq2b7d) (fxif . aq2b7c) (fxfirst-bit-set . aq2b7b) (fxeven? . aq2b7a) (fxdiv0-and-mod0 . aq2b79) (fxdiv0 . aq2b78) (fxdiv-and-mod . aq2b77) (fxdiv . aq2b76) (fxcopy-bit-field . aq2b75) (fxcopy-bit . aq2b74) (fxbit-set? . aq2b73) (fxbit-field . aq2b72) (fxbit-count . aq2b71) (fxarithmetic-shift-right . aq2b70) (fxarithmetic-shift-left . aq2b6f) (fxarithmetic-shift . aq2b6e) (fxand . aq2b6d) (fx>? . aq2b6c) (fx>=? . aq2b6b) (fx=? . aq2b6a) (fx<? . aq2b69) (fx<=? . aq2b68) (fx-/carry . aq2b67) (fx- . aq2b66) (fx+/carry . aq2b65) (fx+ . aq2b64) (fx*/carry . aq2b63) (fx* . aq2b62) (greatest-fixnum . aq2b61) (least-fixnum . aq2b60) (fixnum-width . aq2b5f) (fixnum? . aq2b5e) (bitwise-rotate-bit-field . aq2b5d) (bitwise-reverse-bit-field . aq2b5c) (bitwise-length . aq2b5b) (bitwise-if . aq2b5a) (bitwise-first-bit-set . aq2b59) (bitwise-copy-bit-field . aq2b58) (bitwise-copy-bit . aq2b57) (bitwise-bit-set? . aq2b56) (bitwise-bit-field . aq2b55) (bitwise-bit-count . aq2b54) (bitwise-xor . aq2b53) (bitwise-ior . aq2b52) (bitwise-and . aq2b51) (bitwise-not . aq2b50) (bitwise-arithmetic-shift-right . aq2b4f) (bitwise-arithmetic-shift-left . aq2b4e) (bitwise-arithmetic-shift . aq2b4d) (zero? . aq2b4c) (vector? . aq2b4b) (vector-set! . aq2b4a) (vector-ref . aq2b49) (vector-map . aq2b48) (vector-length . aq2b47) (vector-for-each . aq2b46) (vector-fill! . aq2b45) (vector->list . aq2b44) (vector . aq2b43) (values . aq2b42) (truncate . aq2b41) (tan . aq2b40) (symbol? . aq2b3f) (symbol=? . aq2b3e) (symbol->string . aq2b3d) (substring . aq2b3c) (string? . aq2b3b) (string>? . aq2b3a) (string>=? . aq2b39) (string=? . aq2b38) (string<? . aq2b37) (string<=? . aq2b36) (string-ref . aq2b35) (string-length . aq2b34) (string-for-each . aq2b33) (string-copy . aq2b32) (string-append . aq2b31) (string->symbol . aq2b30) (string->number . aq2b2f) (string->list . aq2b2e) (string . aq2b2d) (sqrt . aq2b2c) (sin . aq2b2b) (round . aq2b2a) (reverse . aq2b29) (real? . aq2b28) (real-valued? . aq2b27) (real-part . aq2b26) (rationalize . aq2b25) (rational? . aq2b24) (rational-valued? . aq2b23) (procedure? . aq2b22) (positive? . aq2b21) (pair? . aq2b20) (odd? . aq2b1f) (numerator . aq2b1e) (number? . aq2b1d) (number->string . aq2b1c) (null? . aq2b1b) (not . aq2b1a) (negative? . aq2b19) (nan? . aq2b18) (min . aq2b17) (max . aq2b16) (map . aq2b15) (make-vector . aq2b14) (make-string . aq2b13) (make-rectangular . aq2b12) (make-polar . aq2b11) (magnitude . aq2b10) (log . aq2b0f) (list? . aq2b0e) (list-tail . aq2b0d) (list-ref . aq2b0c) (list->vector . aq2b0b) (list->string . aq2b0a) (list . aq2b09) (length . aq2b08) (lcm . aq2b07) (integer? . aq2b06) (integer-valued? . aq2b05) (integer->char . aq2b04) (infinite? . aq2b03) (inexact? . aq2b02) (inexact . aq2b01) (imag-part . aq2b00) (gcd . aq2aff) (for-each . aq2afe) (floor . aq2afd) (finite? . aq2afc) (expt . aq2afb) (exp . aq2afa) (exact? . aq2af9) (exact-integer-sqrt . aq2af8) (exact . aq2af7) (even? . aq2af6) (error . aq2af5) (eqv? . aq2af4) (equal? . aq2af3) (eq? . aq2af2) (dynamic-wind . aq2af1) (div0-and-mod0 . aq2af0) (mod0 . aq2aef) (div0 . aq2aee) (div-and-mod . aq2aed) (mod . aq2aec) (div . aq2aeb) (denominator . aq2aea) (cos . aq2ae9) (cons . aq2ae8) (complex? . aq2ae7) (char? . aq2ae6) (char>? . aq2ae5) (char>=? . aq2ae4) (char=? . aq2ae3) (char<? . aq2ae2) (char<=? . aq2ae1) (char->integer . aq2ae0) (ceiling . aq2adf) (call-with-values . aq2ade) (call/cc . aq2add) (call-with-current-continuation . aq2adc) (cddddr . aq2adb) (cdddar . aq2ada) (cddadr . aq2ad9) (cddaar . aq2ad8) (cdaddr . aq2ad7) (cdadar . aq2ad6) (cdaadr . aq2ad5) (cdaaar . aq2ad4) (cadddr . aq2ad3) (caddar . aq2ad2) (cadadr . aq2ad1) (cadaar . aq2ad0) (caaddr . aq2acf) (caadar . aq2ace) (caaadr . aq2acd) (caaaar . aq2acc) (cdddr . aq2acb) (cddar . aq2aca) (cdadr . aq2ac9) (cdaar . aq2ac8) (caddr . aq2ac7) (cadar . aq2ac6) (caadr . aq2ac5) (caaar . aq2ac4) (cddr . aq2ac3) (cdar . aq2ac2) (cadr . aq2ac1) (caar . aq2ac0) (cdr . aq2abf) (car . aq2abe) (boolean? . aq2abd) (boolean=? . aq2abc) (atan . aq2abb) (assertion-violation . aq2aba) (assertion-error . aqe53) (asin . aq2ab9) (apply . aq2ab8) (append . aq2ab7) (angle . aq2ab6) (acos . aq2ab5) (abs . aq2ab4) (/ . aq2ab3) (* . aq2ab2) (- . aq2ab1) (+ . aq2ab0) (>= . aq2aaf) (> . aq2aae) (= . aq2aad) (<= . aq2aac) (< . aq2aab) (library . aq2aaa) (&no-nans . aq2aa9) (&no-infinities . aq2aa8) (&i/o-encoding . aq2aa7) (&i/o-decoding . aq2aa6) (&i/o-port . aq2aa5) (&i/o-file-does-not-exist . aq2aa4) (&i/o-file-already-exists . aq2aa3) (&i/o-file-is-read-only . aq2aa2) (&i/o-file-protection . aq2aa1) (&i/o-filename . aq2aa0) (&i/o-invalid-position . aq2a9f) (&i/o-write . aq2a9e) (&i/o-read . aq2a9d) (&i/o . aq2a9c) (&undefined . aq2a9b) (&syntax . aq2a9a) (&lexical . aq2a99) (&implementation-restriction . aq2a98) (&non-continuable . aq2a97) (&who . aq2a96) (&irritants . aq2a95) (&assertion . aq2a94) (&violation . aq2a93) (&error . aq2a92) (&serious . aq2a91) (&warning . aq2a90) (&message . aq2a8f) (&condition . aq2a8e) (define-condition-type . aq2a8d) (define-enumeration . aq2a8c) (define-record-type . aq2a8b) (parent-rtd . aq2a8a) (nongenerative . aq2a89) (opaque . aq2a88) (sealed . aq2a87) (protocol . aq2a86) (parent . aq2a85) (immutable . aq2a84) (mutable . aq2a83) (fields . aq2a82) (error-handling-mode . aq2a81) (file-options . aq2a80) (buffer-mode . aq2a7f) (eol-style . aq2a7e) (guard . aq2a7d) (trace-define . aq2a7c) (trace-lambda . aq2a7b) (unsyntax-splicing . aq2a7a) (unsyntax . aq2a79) (unquote-splicing . aq2a78) (unquote . aq2a77) (_ . aq2a76) (else . aq2a75) (=> . aq2a74) (... . aq2a73) (assert . aq2a72) (endianness . aq2a71) (delay . aq2a70) (time . aq2a6f) (do . aq2a6e) (cond . aq2a6d) (let* . aq2a6c) (let*-values . aq2a6b) (let-values . aq2a6a) (identifier-syntax . aq2a69) (with-syntax . aq2a68) (quasisyntax . aq2a67) (quasiquote . aq2a66) (syntax-rules . aq2a65) (include . aq2a64) (define-struct . aq2a63) (record-constructor-descriptor . aq2a62) (record-type-descriptor . aq2a61) (case . aq2a60) (parameterize . aq2a5f) (unless . aq2a5e) (when . aq2a5d) (or . aq2a5c) (and . aq2a5b) (if . aq2a5a) (let . aq2a59) (letrec* . aq2a58) (letrec . aq2a57) (type-descriptor . aq2a56) (case-lambda . aq2a55) (lambda . aq2a54) (syntax . aq2a53) (syntax-case . aq2a52) (quote . aq2a51) (foreign-call . aq2a50) (letrec-syntax . aq2a4f) (let-syntax . aq2a4e) (set! . aq2a4d) (import . aq2a4c) (begin . aq2a4b) (module . aq2a4a) (define-syntax . aq2a49) (define . aq2a48)) '((aq2de9 core-prim . &no-nans-rcd) (aq2de8 core-prim . &no-nans-rtd) (aq2de7 core-prim . &no-infinities-rcd) (aq2de6 core-prim . &no-infinities-rtd) (aq2de5 core-prim . &i/o-encoding-rcd) (aq2de4 core-prim . &i/o-encoding-rtd) (aq2de3 core-prim . &i/o-decoding-rcd) (aq2de2 core-prim . &i/o-decoding-rtd) (aq2de1 core-prim . &i/o-port-rcd) (aq2de0 core-prim . &i/o-port-rtd) (aq2ddf core-prim . &i/o-file-does-not-exist-rcd) (aq2dde core-prim . &i/o-file-does-not-exist-rtd) (aq2ddd core-prim . &i/o-file-already-exists-rcd) (aq2ddc core-prim . &i/o-file-already-exists-rtd) (aq2ddb core-prim . &i/o-file-is-read-only-rcd) (aq2dda core-prim . &i/o-file-is-read-only-rtd) (aq2dd9 core-prim . &i/o-file-protection-rcd) (aq2dd8 core-prim . &i/o-file-protection-rtd) (aq2dd7 core-prim . &i/o-filename-rcd) (aq2dd6 core-prim . &i/o-filename-rtd) (aq2dd5 core-prim . &i/o-invalid-position-rcd) (aq2dd4 core-prim . &i/o-invalid-position-rtd) (aq2dd3 core-prim . &i/o-write-rcd) (aq2dd2 core-prim . &i/o-write-rtd) (aq2dd1 core-prim . &i/o-read-rcd) (aq2dd0 core-prim . &i/o-read-rtd) (aq2dcf core-prim . &i/o-rcd) (aq2dce core-prim . &i/o-rtd) (aq2dcd core-prim . &undefined-rcd) (aq2dcc core-prim . &undefined-rtd) (aq2dcb core-prim . &syntax-rcd) (aq2dca core-prim . &syntax-rtd) (aq2dc9 core-prim . &lexical-rcd) (aq2dc8 core-prim . &lexical-rtd) (aq2dc7 core-prim . &implementation-restriction-rcd) (aq2dc6 core-prim . &implementation-restriction-rtd) (aq2dc5 core-prim . &non-continuable-rcd) (aq2dc4 core-prim . &non-continuable-rtd) (aq2dc3 core-prim . &who-rcd) (aq2dc2 core-prim . &who-rtd) (aq2dc1 core-prim . &irritants-rcd) (aq2dc0 core-prim . &irritants-rtd) (aq2dbf core-prim . &assertion-rcd) (aq2dbe core-prim . &assertion-rtd) (aq2dbd core-prim . &violation-rcd) (aq2dbc core-prim . &violation-rtd) (aq2dbb core-prim . &error-rcd) (aq2dba core-prim . &error-rtd) (aq2db9 core-prim . &serious-rcd) (aq2db8 core-prim . &serious-rtd) (aq2db7 core-prim . &warning-rcd) (aq2db6 core-prim . &warning-rtd) (aq2db5 core-prim . &message-rcd) (aq2db4 core-prim . &message-rtd) (aq2db3 core-prim . &condition-rcd) (aq2db2 core-prim . &condition-rtd) (aqe55 core-prim . syntax-error) (aqd79 core-prim . syntax-dispatch) (aq2db1 core-prim . pretty-print) (aq2db0 core-prim . eval-core) (aq2daf core-prim . set-symbol-value!) (aq2dae core-prim . symbol-value) (aq2dad core-prim . gensym) (aq2dac core-prim . void) (aq28e2 core-prim . load) (aqe67 core-prim . interaction-environment) (aq2dab core-prim . char-ready?) (aq2daa core-prim . regexp?) (aq2da9 core-prim . read-line) (aq2da8 core-prim . gensym-prefix-set!) (aq2da7 core-prim . ungensym) (aq2da6 core-prim . alist->eq-hash-table) (aq2da5 core-prim . assoc-ref) (aq2da4 core-prim . print) (aq2da3 core-prim . format) (aq2da2 core-prim . host-os) (aq7b8 core-prim . library-path) (aq2da1 core-prim . standard-library-path) (aq2da0 core-prim . %monapi-name-whereis) (aq2d9f core-prim . %monapi-message-send) (aq2d9e core-prim . file-newer?) (aq2d9d core-prim . stat-mtime) (aq2d9c core-prim . write-to-file) (aq2d9b core-prim . file->list) (aq2d9a core-prim . file->string) (aq2d99 core-prim . digit->integer) (aq2d98 core-prim . call-with-string-input-port) (aq2d97 core-prim . call-with-string-io) (aq2d96 core-prim . string-split) (aq2d95 core-prim . bytevector-for-each) (aq2d94 core-prim . string->regexp) (aq2d93 core-prim . rxmatch) (aq2d92 core-prim . regexp-replace-all) (aq2d91 core-prim . hashtable-for-each) (aq5a2 core-prim . mosh-cache-dir) (aq2d90 core-prim . call-process) (aq2d8f core-prim . local-tz-offset) (aq2d8e core-prim . microseconds) (aq2d8d core-prim . directory-list) (aq2d8c core-prim . set-current-directory!) (aq2d8b core-prim . expand-path) (aq2d8a core-prim . current-directory) (aq2d89 core-prim . %spawn) (aq2d88 core-prim . %waitpid) (aq2d87 core-prim . simple-struct-name) (aq2d86 core-prim . simple-struct-set!) (aq2d85 core-prim . simple-struct-ref) (aq2d84 core-prim . make-simple-struct) (aq2d83 core-prim . simple-struct?) (aq2d82 core-prim . pointer-ref-c-int64) (aq2d81 core-prim . pointer-ref-c-int32) (aq2d80 core-prim . pointer-ref-c-int16) (aq2d7f core-prim . pointer-ref-c-int8) (aq2d7e core-prim . pointer-ref-c-uint64) (aq2d7d core-prim . pointer-ref-c-uint32) (aq2d7c core-prim . pointer-ref-c-uint16) (aq2d7b core-prim . pointer-ref-c-uint8) (aq2d7a core-prim . pointer-set-c-uint64!) (aq2d79 core-prim . pointer-set-c-uint32!) (aq2d78 core-prim . pointer-set-c-uint16!) (aq2d77 core-prim . pointer-set-c-uint8!) (aq2d76 core-prim . pointer-set-c-int64!) (aq2d75 core-prim . pointer-set-c-int32!) (aq2d74 core-prim . pointer-set-c-int16!) (aq2d73 core-prim . pointer-set-c-int8!) (aq2d72 core-prim . pointer-set-c-pointer!) (aq2d71 core-prim . pointer-set-c-double!) (aq2d70 core-prim . pointer-set-c-float!) (aq2d6f core-prim . pointer-set-c-long-long!) (aq2d6e core-prim . pointer-set-c-long!) (aq2d6d core-prim . pointer-set-c-int!) (aq2d6c core-prim . pointer-set-c-short!) (aq2d6b core-prim . pointer-set-c-char!) (aq2d6a core-prim . pointer-ref-c-pointer) (aq2d69 core-prim . pointer-ref-c-double) (aq2d68 core-prim . pointer-ref-c-float) (aq2d67 core-prim . pointer-ref-c-unsigned-long-long) (aq2d66 core-prim . pointer-ref-c-signed-long-long) (aq2d65 core-prim . pointer-ref-c-unsigned-long) (aq2d64 core-prim . pointer-ref-c-signed-long) (aq2d63 core-prim . pointer-ref-c-unsigned-int) (aq2d62 core-prim . pointer-ref-c-signed-int) (aq2d61 core-prim . pointer-ref-c-unsigned-short) (aq2d60 core-prim . pointer-ref-c-signed-short) (aq2d5f core-prim . pointer-ref-c-unsigned-char) (aq2d5e core-prim . pointer-ref-c-signed-char) (aq2d5d core-prim . pointer->integer) (aq2d5c core-prim . integer->pointer) (aq2d5b core-prim . pointer?) (aq2d5a core-prim . shared-errno) (aq2d59 core-prim . %ffi-free-c-callback-trampoline) (aq2d58 core-prim . %ffi-make-c-callback-trampoline) (aq2d57 core-prim . %ffi-free) (aq2d56 core-prim . %ffi-malloc) (aq2d55 core-prim . %ffi-supported?) (aq2d54 core-prim . %ffi-pointer->string) (aq2d53 core-prim . %ffi-call) (aq2d52 core-prim . %ffi-lookup) (aq2d51 core-prim . %ffi-open) (aq2d50 core-prim . null-terminated-utf8->string) (aq2d4f core-prim . null-terminated-bytevector->string) (aq2d4e core-prim . %exec) (aq2d4d core-prim . %fork) (aq2d4c core-prim . %pipe) (aq2d4b core-prim . p) (aq2d4a core-prim . open-output-string) (aq2d49 core-prim . get-output-string) (aq2d48 core-prim . file-stat-ctime) (aq2d47 core-prim . file-stat-atime) (aq2d46 core-prim . file-stat-mtime) (aq2d45 core-prim . file-size-in-bytes) (aq2d44 core-prim . file-writable?) (aq2d43 core-prim . file-executable?) (aq2d42 core-prim . file-readable?) (aq2d41 core-prim . file-regular?) (aq2d40 core-prim . file-symbolic-link?) (aq2d3f core-prim . file-directory?) (aq2d3e core-prim . create-symbolic-link) (aq2d3d core-prim . rename-file) (aq2d3c core-prim . delete-directory) (aq2d3b core-prim . create-directory) (aq2d3a core-prim . create-mosh-cache-dir) (aq2d39 core-prim . get-environment-variables) (aq2d38 core-prim . current-exception-handler) (aq2d37 core-prim . get-environment-variable) (aq2d36 core-prim . join-wraps) (aq2d35 core-prim . id->real-label) (aq2d34 core-prim . same-marks?) (aq2d33 core-prim . same-marks*?) (aq2d32 core-prim . get-timeofday) (aq2d31 core-prim . get-command-line) (aq2d30 core-prim . sys-display) (aq2d2f core-prim . whereis) (aq2d2e core-prim . register) (aq2d2d core-prim . vm-join!) (aq2d2c core-prim . vm-set-value!) (aq2d2b core-prim . vm?) (aq2d2a core-prim . main-vm?) (aq2d29 core-prim . vm-eval) (aq2d28 core-prim . vm-self) (aq2d27 core-prim . vm-start!) (aq2d26 core-prim . make-vm) (aq2d25 core-prim . mutex-try-lock!) (aq2d24 core-prim . mutex-unlock!) (aq2d23 core-prim . mutex-lock!) (aq2d22 core-prim . mutex?) (aq2d21 core-prim . make-mutex) (aq2d20 core-prim . condition-variable-notify-all!) (aq2d1f core-prim . condition-variable-notify!) (aq2d1e core-prim . condition-variable-wait!) (aq2d1d core-prim . make-condition-variable) (aq2d1c core-prim . write/ss) (aq2d1b core-prim . mosh-executable-path) (aq2d1a core-prim . make-file-options) (aq2d19 core-prim . source-info) (aq2d18 core-prim . make-compiler-instruction) (aq2d17 core-prim . make-instruction) (aq2d16 core-prim . set-source-info!) (aq2d15 core-prim . bignum?) (aq2d14 core-prim . fast-equal?) (aq2d13 core-prim . fasl-read) (aq2d12 core-prim . fasl-write) (aq2d11 core-prim . time-usage) (aq2d10 core-prim . os-constant) (aq2d0f core-prim . disasm) (aq5a0 core-prim . make-parameter) (aq2d0e core-prim . socket-port) (aq2d0d core-prim . socket-shutdown) (aq2d0c core-prim . socket-close) (aq2d0b core-prim . socket-send) (aq2d0a core-prim . socket-recv!) (aq2d09 core-prim . socket-recv) (aq2d08 core-prim . make-server-socket) (aq2d07 core-prim . make-client-socket) (aq2d06 core-prim . socket-accept) (aq2d05 core-prim . socket?) (aq2d04 core-prim . string-upcase) (aq2d03 core-prim . string-titlecase) (aq2d02 core-prim . string-normalize-nfkd) (aq2d01 core-prim . string-normalize-nfkc) (aq2d00 core-prim . string-normalize-nfd) (aq2cff core-prim . string-normalize-nfc) (aq2cfe core-prim . string-foldcase) (aq2cfd core-prim . string-downcase) (aq2cfc core-prim . string-ci>?) (aq2cfb core-prim . string-ci>=?) (aq2cfa core-prim . string-ci=?) (aq2cf9 core-prim . string-ci<?) (aq2cf8 core-prim . string-ci<=?) (aq2cf7 core-prim . char-whitespace?) (aq2cf6 core-prim . char-upper-case?) (aq2cf5 core-prim . char-title-case?) (aq2cf4 core-prim . char-numeric?) (aq2cf3 core-prim . char-lower-case?) (aq2cf2 core-prim . char-general-category) (aq2cf1 core-prim . char-upcase) (aq2cf0 core-prim . char-titlecase) (aq2cef core-prim . char-foldcase) (aq2cee core-prim . char-downcase) (aq2ced core-prim . char-ci>?) (aq2cec core-prim . char-ci>=?) (aq2ceb core-prim . char-ci=?) (aq2cea core-prim . char-ci<?) (aq2ce9 core-prim . char-ci<=?) (aq2ce8 core-prim . char-alphabetic?) (aqba4 core-prim . make-variable-transformer) (aqe5b core-prim . identifier?) (aqe47 core-prim . generate-temporaries) (aqe49 core-prim . free-identifier=?) (aqe5f core-prim . syntax->datum) (aqe5d core-prim . datum->syntax) (aqe4b core-prim . bound-identifier=?) (aq2ce7 core-prim . record-type-descriptor?) (aq2ce6 core-prim . record-predicate) (aq2ce5 core-prim . record-mutator) (aq2ce4 core-prim . record-constructor) (aq2ce3 core-prim . record-accessor) (aq2ce2 core-prim . make-record-type-descriptor) (aq2ce1 core-prim . make-record-constructor-descriptor) (aq2ce0 core-prim . record?) (aq2cdf core-prim . record-type-uid) (aq2cde core-prim . record-type-sealed?) (aq2cdd core-prim . record-type-parent) (aq2cdc core-prim . record-type-opaque?) (aq2cdb core-prim . record-type-name) (aq2cda core-prim . record-type-generative?) (aq2cd9 core-prim . record-type-field-names) (aq2cd8 core-prim . record-rtd) (aq2cd7 core-prim . record-field-mutable?) (aq2cd6 core-prim . delete-file) (aq2cd5 core-prim . file-exists?) (aq2cd4 core-prim . vector-sort!) (aq2cd3 core-prim . vector-sort) (aq2cd2 core-prim . list-sort) (aq2cd1 core-prim . symbol-hash) (aq2cd0 core-prim . string-ci-hash) (aq2ccf core-prim . string-hash) (aq2cce core-prim . equal-hash) (aq2ccd core-prim . hashtable-equivalence-function) (aq2ccc core-prim . make-hashtable) (aq2ccb core-prim . hashtable-hash-function) (aq2cca core-prim . make-eqv-hashtable) (aq2cc9 core-prim . make-eq-hashtable) (aq2cc8 core-prim . hashtable?) (aq2cc7 core-prim . hashtable-update!) (aq2cc6 core-prim . hashtable-size) (aq2cc5 core-prim . hashtable-set!) (aq2cc4 core-prim . hashtable-ref) (aq2cc3 core-prim . hashtable-mutable?) (aq2cc2 core-prim . hashtable-keys) (aq2cc1 core-prim . hashtable-entries) (aq2cc0 core-prim . hashtable-delete!) (aq2cbf core-prim . hashtable-copy) (aq2cbe core-prim . hashtable-contains?) (aq2cbd core-prim . hashtable-clear!) (aq2cbc core-prim . call-with-output-file) (aq2cbb core-prim . call-with-input-file) (aq2cba core-prim . write-char) (aq2cb9 core-prim . write) (aq2cb8 core-prim . with-output-to-file) (aq2cb7 core-prim . with-input-from-file) (aq2cb6 core-prim . read-char) (aq2cb5 core-prim . read) (aq2cb4 core-prim . peek-char) (aq2cb3 core-prim . open-output-file) (aq2cb2 core-prim . open-input-file) (aq2cb1 core-prim . newline) (aq2cb0 core-prim . display) (aq2caf core-prim . close-output-port) (aq2cae core-prim . close-input-port) (aq2cad core-prim . eof-object?) (aq2cac core-prim . eof-object) (aq2cab core-prim . current-error-port) (aq2caa core-prim . current-output-port) (aq2ca9 core-prim . current-input-port) (aq2ca8 core-prim . output-port?) (aq2ca7 core-prim . input-port?) (aq2ca6 core-prim . utf-8-codec) (aq2ca5 core-prim . utf-16-codec) (aq2ca4 core-prim . transcoder-error-handling-mode) (aq2ca3 core-prim . transcoder-eol-style) (aq2ca2 core-prim . transcoder-codec) (aq2ca1 core-prim . transcoded-port) (aq2ca0 core-prim . textual-port?) (aq2c9f core-prim . string->bytevector) (aq2c9e core-prim . standard-output-port) (aq2c9d core-prim . standard-input-port) (aq2c9c core-prim . standard-error-port) (aq2c9b core-prim . set-port-position!) (aq2c9a core-prim . put-u8) (aq2c99 core-prim . put-string) (aq2c98 core-prim . put-datum) (aq2c97 core-prim . put-char) (aq2c96 core-prim . put-bytevector) (aq2c95 core-prim . port?) (aq2c94 core-prim . port-transcoder) (aq2c93 core-prim . port-position) (aq2c92 core-prim . port-has-set-port-position!?) (aq2c91 core-prim . port-has-port-position?) (aq2c90 core-prim . port-eof?) (aq2c8f core-prim . output-port-buffer-mode) (aq2c8e core-prim . open-string-output-port) (aq2c8d core-prim . open-string-input-port) (aq2c8c core-prim . open-file-output-port) (aq2c8b core-prim . open-file-input/output-port) (aq2c8a core-prim . open-file-input-port) (aq2c89 core-prim . open-bytevector-output-port) (aq2c88 core-prim . open-bytevector-input-port) (aq2c87 core-prim . native-transcoder) (aq2c86 core-prim . native-eol-style) (aq2c85 core-prim . make-transcoder) (aq2c84 core-prim . latin-1-codec) (aq2c83 core-prim . make-i/o-write-error) (aq2c82 core-prim . make-i/o-read-error) (aq2c81 core-prim . make-i/o-port-error) (aq2c80 core-prim . make-i/o-invalid-position-error) (aq2c7f core-prim . make-i/o-filename-error) (aq2c7e core-prim . make-i/o-file-protection-error) (aq2c7d core-prim . make-i/o-file-is-read-only-error) (aq2c7c core-prim . make-i/o-file-does-not-exist-error) (aq2c7b core-prim . make-i/o-file-already-exists-error) (aq2c7a core-prim . make-i/o-error) (aq2c79 core-prim . make-i/o-encoding-error) (aq2c78 core-prim . make-i/o-decoding-error) (aq2c77 core-prim . make-custom-textual-output-port) (aq2c76 core-prim . make-custom-textual-input/output-port) (aq2c75 core-prim . make-custom-textual-input-port) (aq2c74 core-prim . make-custom-binary-output-port) (aq2c73 core-prim . make-custom-binary-input/output-port) (aq2c72 core-prim . make-custom-binary-input-port) (aq2c71 core-prim . make-bytevector) (aq2c70 core-prim . lookahead-u8) (aq2c6f core-prim . lookahead-char) (aq2c6e core-prim . i/o-write-error?) (aq2c6d core-prim . i/o-read-error?) (aq2c6c core-prim . i/o-port-error?) (aq2c6b core-prim . i/o-invalid-position-error?) (aq2c6a core-prim . i/o-filename-error?) (aq2c69 core-prim . i/o-file-protection-error?) (aq2c68 core-prim . i/o-file-is-read-only-error?) (aq2c67 core-prim . i/o-file-does-not-exist-error?) (aq2c66 core-prim . i/o-file-already-exists-error?) (aq2c65 core-prim . i/o-error?) (aq2c64 core-prim . i/o-error-position) (aq2c63 core-prim . i/o-error-port) (aq2c62 core-prim . i/o-error-filename) (aq2c61 core-prim . i/o-encoding-error?) (aq2c60 core-prim . i/o-encoding-error-char) (aq2c5f core-prim . i/o-decoding-error?) (aq2c5e core-prim . get-u8) (aq2c5d core-prim . get-string-n!) (aq2c5c core-prim . get-string-n) (aq2c5b core-prim . get-string-all) (aq2c5a core-prim . get-line) (aq2c59 core-prim . get-datum) (aq2c58 core-prim . get-char) (aq2c57 core-prim . get-bytevector-some) (aq2c56 core-prim . get-bytevector-n!) (aq2c55 core-prim . get-bytevector-n) (aq2c54 core-prim . get-bytevector-all) (aq2c53 core-prim . flush-output-port) (aq2c52 core-prim . close-port) (aqe35 core-prim . scheme-report-environment) (aq2c51 core-prim . quotient) (aqe33 core-prim . null-environment) (aq2c50 core-prim . remainder) (aq2c4f core-prim . modulo) (aq2c4e core-prim . inexact->exact) (aq2c4d core-prim . force) (aq2c4c core-prim . exact->inexact) (aq2c4b core-prim . make-promise) (aq2c4a core-prim . exit) (aq28dc core-prim . command-line) (aq2c49 core-prim . string-fill!) (aq2c48 core-prim . string-set!) (aq2c47 core-prim . set-cdr!) (aq2c46 core-prim . set-car!) (aq2c45 core-prim . remove) (aq2c44 core-prim . remv) (aq2c43 core-prim . remp) (aq2c42 core-prim . remq) (aq2c41 core-prim . partition) (aq2c40 core-prim . memv) (aq2c3f core-prim . memq) (aq2c3e core-prim . memp) (aq2c3d core-prim . member) (aq2c3c core-prim . exists) (aq2c3b core-prim . for-all) (aq2c3a core-prim . fold-right) (aq2c39 core-prim . fold-left) (aq2c38 core-prim . find) (aq2c37 core-prim . filter) (aq2c36 core-prim . cons*) (aq2c35 core-prim . assv) (aq2c34 core-prim . assq) (aq2c33 core-prim . assp) (aq2c32 core-prim . assoc) (aq2c31 core-prim . call-with-string-output-port) (aq2c30 core-prim . call-with-port) (aq2c2f core-prim . call-with-bytevector-output-port) (aq2c2e core-prim . bytevector->string) (aq2c2d core-prim . buffer-mode?) (aq2c2c core-prim . binary-port?) (aq2c2b core-prim . with-exception-handler) (aq2c2a core-prim . raise-continuable) (aq2c29 core-prim . raise) (aqe39 core-prim . eval) (aqe31 core-prim . environment) (aq2c28 core-prim . make-enumeration) (aq2c27 core-prim . enum-set=?) (aq2c26 core-prim . enum-set-universe) (aq2c25 core-prim . enum-set-union) (aq2c24 core-prim . enum-set-subset?) (aq2c23 core-prim . enum-set-projection) (aq2c22 core-prim . enum-set-member?) (aq2c21 core-prim . enum-set-intersection) (aq2c20 core-prim . enum-set-indexer) (aq2c1f core-prim . enum-set-difference) (aq2c1e core-prim . enum-set-constructor) (aq2c1d core-prim . enum-set-complement) (aq2c1c core-prim . enum-set->list) (aq2c1b core-prim . who-condition?) (aq2c1a core-prim . warning?) (aq2c19 core-prim . violation?) (aq2c18 core-prim . undefined-violation?) (aq2c17 core-prim . syntax-violation?) (aq2c16 core-prim . syntax-violation-subform) (aq2c15 core-prim . syntax-violation-form) (aqe59 core-prim . syntax-violation) (aq2c14 core-prim . simple-conditions) (aq2c13 core-prim . serious-condition?) (aq2c12 core-prim . non-continuable-violation?) (aq2c11 core-prim . message-condition?) (aq2c10 core-prim . make-who-condition) (aq2c0f core-prim . make-warning) (aq2c0e core-prim . make-violation) (aq2c0d core-prim . make-undefined-violation) (aq2c0c core-prim . make-syntax-violation) (aq2c0b core-prim . make-serious-condition) (aq2c0a core-prim . make-non-continuable-violation) (aq2c09 core-prim . make-message-condition) (aq2c08 core-prim . make-lexical-violation) (aq2c07 core-prim . make-irritants-condition) (aq2c06 core-prim . make-implementation-restriction-violation) (aq2c05 core-prim . make-error) (aq2c04 core-prim . make-assertion-violation) (aq2c03 core-prim . lexical-violation?) (aq2c02 core-prim . irritants-condition?) (aq2c01 core-prim . implementation-restriction-violation?) (aq2c00 core-prim . error?) (aq2bff core-prim . condition-who) (aq2bfe core-prim . condition-predicate) (aq2bfd core-prim . condition-message) (aq2bfc core-prim . condition-irritants) (aq2bfb core-prim . condition-accessor) (aq2bfa core-prim . condition) (aq2bf9 core-prim . assertion-violation?) (aq2bf8 core-prim . condition?) (aq2bf7 core-prim . utf32->string) (aq2bf6 core-prim . utf16->string) (aq2bf5 core-prim . utf8->string) (aq2bf4 core-prim . uint-list->bytevector) (aq2bf3 core-prim . u8-list->bytevector) (aq2bf2 core-prim . string->utf8) (aq2bf1 core-prim . string->utf32) (aq2bf0 core-prim . string->utf16) (aq2bef core-prim . sint-list->bytevector) (aq2bee core-prim . native-endianness) (aq2bed core-prim . bytevector?) (aq2bec core-prim . bytevector=?) (aq2beb core-prim . bytevector-uint-set!) (aq2bea core-prim . bytevector-uint-ref) (aq2be9 core-prim . bytevector-u8-set!) (aq2be8 core-prim . bytevector-u8-ref) (aq2be7 core-prim . bytevector-u64-set!) (aq2be6 core-prim . bytevector-u64-ref) (aq2be5 core-prim . bytevector-u64-native-set!) (aq2be4 core-prim . bytevector-u64-native-ref) (aq2be3 core-prim . bytevector-u32-set!) (aq2be2 core-prim . bytevector-u32-ref) (aq2be1 core-prim . bytevector-u32-native-set!) (aq2be0 core-prim . bytevector-u32-native-ref) (aq2bdf core-prim . bytevector-u16-set!) (aq2bde core-prim . bytevector-u16-ref) (aq2bdd core-prim . bytevector-u16-native-set!) (aq2bdc core-prim . bytevector-u16-native-ref) (aq2bdb core-prim . bytevector-sint-set!) (aq2bda core-prim . bytevector-sint-ref) (aq2bd9 core-prim . bytevector-s8-set!) (aq2bd8 core-prim . bytevector-s8-ref) (aq2bd7 core-prim . bytevector-s64-set!) (aq2bd6 core-prim . bytevector-s64-ref) (aq2bd5 core-prim . bytevector-s64-native-set!) (aq2bd4 core-prim . bytevector-s64-native-ref) (aq2bd3 core-prim . bytevector-s32-set!) (aq2bd2 core-prim . bytevector-s32-ref) (aq2bd1 core-prim . bytevector-s32-native-set!) (aq2bd0 core-prim . bytevector-s32-native-ref) (aq2bcf core-prim . bytevector-s16-set!) (aq2bce core-prim . bytevector-s16-ref) (aq2bcd core-prim . bytevector-s16-native-set!) (aq2bcc core-prim . bytevector-s16-native-ref) (aq2bcb core-prim . bytevector-length) (aq2bca core-prim . bytevector-ieee-single-ref) (aq2bc9 core-prim . bytevector-ieee-single-set!) (aq2bc8 core-prim . bytevector-ieee-single-native-set!) (aq2bc7 core-prim . bytevector-ieee-single-native-ref) (aq2bc6 core-prim . bytevector-ieee-double-set!) (aq2bc5 core-prim . bytevector-ieee-double-ref) (aq2bc4 core-prim . bytevector-ieee-double-native-set!) (aq2bc3 core-prim . bytevector-ieee-double-native-ref) (aq2bc2 core-prim . bytevector-fill!) (aq2bc1 core-prim . bytevector-copy!) (aq2bc0 core-prim . bytevector-copy) (aq2bbf core-prim . bytevector->uint-list) (aq2bbe core-prim . bytevector->u8-list) (aq2bbd core-prim . bytevector->sint-list) (aq2bbc core-prim . no-nans-violation?) (aq2bbb core-prim . no-infinities-violation?) (aq2bba core-prim . make-no-nans-violation) (aq2bb9 core-prim . make-no-infinities-violation) (aq2bb8 core-prim . real->flonum) (aq2bb7 core-prim . flzero?) (aq2bb6 core-prim . fltruncate) (aq2bb5 core-prim . fltan) (aq2bb4 core-prim . flsqrt) (aq2bb3 core-prim . flsin) (aq2bb2 core-prim . flround) (aq2bb1 core-prim . flpositive?) (aq2bb0 core-prim . flonum?) (aq2baf core-prim . flodd?) (aq2bae core-prim . flnumerator) (aq2bad core-prim . flnegative?) (aq2bac core-prim . flnan?) (aq2bab core-prim . flmod0) (aq2baa core-prim . flmod) (aq2ba9 core-prim . flmin) (aq2ba8 core-prim . flmax) (aq2ba7 core-prim . fllog) (aq2ba6 core-prim . flinteger?) (aq2ba5 core-prim . flinfinite?) (aq2ba4 core-prim . flfloor) (aq2ba3 core-prim . flfinite?) (aq2ba2 core-prim . flexpt) (aq2ba1 core-prim . flexp) (aq2ba0 core-prim . fleven?) (aq2b9f core-prim . fldiv0-and-mod0) (aq2b9e core-prim . fldiv0) (aq2b9d core-prim . fldiv-and-mod) (aq2b9c core-prim . fldiv) (aq2b9b core-prim . fldenominator) (aq2b9a core-prim . flcos) (aq2b99 core-prim . flceiling) (aq2b98 core-prim . flatan) (aq2b97 core-prim . flasin) (aq2b96 core-prim . flacos) (aq2b95 core-prim . flabs) (aq2b94 core-prim . fl>?) (aq2b93 core-prim . fl>=?) (aq2b92 core-prim . fl=?) (aq2b91 core-prim . fl<?) (aq2b90 core-prim . fl<=?) (aq2b8f core-prim . fl/) (aq2b8e core-prim . fl-) (aq2b8d core-prim . fl+) (aq2b8c core-prim . fl*) (aq2b8b core-prim . fixnum->flonum) (aq2b8a core-prim . fxzero?) (aq2b89 core-prim . fxxor) (aq2b88 core-prim . fxrotate-bit-field) (aq2b87 core-prim . fxreverse-bit-field) (aq2b86 core-prim . fxpositive?) (aq2b85 core-prim . fxodd?) (aq2b84 core-prim . fxnot) (aq2b83 core-prim . fxnegative?) (aq2b82 core-prim . fxmod0) (aq2b81 core-prim . fxmod) (aq2b80 core-prim . fxmin) (aq2b7f core-prim . fxmax) (aq2b7e core-prim . fxlength) (aq2b7d core-prim . fxior) (aq2b7c core-prim . fxif) (aq2b7b core-prim . fxfirst-bit-set) (aq2b7a core-prim . fxeven?) (aq2b79 core-prim . fxdiv0-and-mod0) (aq2b78 core-prim . fxdiv0) (aq2b77 core-prim . fxdiv-and-mod) (aq2b76 core-prim . fxdiv) (aq2b75 core-prim . fxcopy-bit-field) (aq2b74 core-prim . fxcopy-bit) (aq2b73 core-prim . fxbit-set?) (aq2b72 core-prim . fxbit-field) (aq2b71 core-prim . fxbit-count) (aq2b70 core-prim . fxarithmetic-shift-right) (aq2b6f core-prim . fxarithmetic-shift-left) (aq2b6e core-prim . fxarithmetic-shift) (aq2b6d core-prim . fxand) (aq2b6c core-prim . fx>?) (aq2b6b core-prim . fx>=?) (aq2b6a core-prim . fx=?) (aq2b69 core-prim . fx<?) (aq2b68 core-prim . fx<=?) (aq2b67 core-prim . fx-/carry) (aq2b66 core-prim . fx-) (aq2b65 core-prim . fx+/carry) (aq2b64 core-prim . fx+) (aq2b63 core-prim . fx*/carry) (aq2b62 core-prim . fx*) (aq2b61 core-prim . greatest-fixnum) (aq2b60 core-prim . least-fixnum) (aq2b5f core-prim . fixnum-width) (aq2b5e core-prim . fixnum?) (aq2b5d core-prim . bitwise-rotate-bit-field) (aq2b5c core-prim . bitwise-reverse-bit-field) (aq2b5b core-prim . bitwise-length) (aq2b5a core-prim . bitwise-if) (aq2b59 core-prim . bitwise-first-bit-set) (aq2b58 core-prim . bitwise-copy-bit-field) (aq2b57 core-prim . bitwise-copy-bit) (aq2b56 core-prim . bitwise-bit-set?) (aq2b55 core-prim . bitwise-bit-field) (aq2b54 core-prim . bitwise-bit-count) (aq2b53 core-prim . bitwise-xor) (aq2b52 core-prim . bitwise-ior) (aq2b51 core-prim . bitwise-and) (aq2b50 core-prim . bitwise-not) (aq2b4f core-prim . bitwise-arithmetic-shift-right) (aq2b4e core-prim . bitwise-arithmetic-shift-left) (aq2b4d core-prim . bitwise-arithmetic-shift) (aq2b4c core-prim . zero?) (aq2b4b core-prim . vector?) (aq2b4a core-prim . vector-set!) (aq2b49 core-prim . vector-ref) (aq2b48 core-prim . vector-map) (aq2b47 core-prim . vector-length) (aq2b46 core-prim . vector-for-each) (aq2b45 core-prim . vector-fill!) (aq2b44 core-prim . vector->list) (aq2b43 core-prim . vector) (aq2b42 core-prim . values) (aq2b41 core-prim . truncate) (aq2b40 core-prim . tan) (aq2b3f core-prim . symbol?) (aq2b3e core-prim . symbol=?) (aq2b3d core-prim . symbol->string) (aq2b3c core-prim . substring) (aq2b3b core-prim . string?) (aq2b3a core-prim . string>?) (aq2b39 core-prim . string>=?) (aq2b38 core-prim . string=?) (aq2b37 core-prim . string<?) (aq2b36 core-prim . string<=?) (aq2b35 core-prim . string-ref) (aq2b34 core-prim . string-length) (aq2b33 core-prim . string-for-each) (aq2b32 core-prim . string-copy) (aq2b31 core-prim . string-append) (aq2b30 core-prim . string->symbol) (aq2b2f core-prim . string->number) (aq2b2e core-prim . string->list) (aq2b2d core-prim . string) (aq2b2c core-prim . sqrt) (aq2b2b core-prim . sin) (aq2b2a core-prim . round) (aq2b29 core-prim . reverse) (aq2b28 core-prim . real?) (aq2b27 core-prim . real-valued?) (aq2b26 core-prim . real-part) (aq2b25 core-prim . rationalize) (aq2b24 core-prim . rational?) (aq2b23 core-prim . rational-valued?) (aq2b22 core-prim . procedure?) (aq2b21 core-prim . positive?) (aq2b20 core-prim . pair?) (aq2b1f core-prim . odd?) (aq2b1e core-prim . numerator) (aq2b1d core-prim . number?) (aq2b1c core-prim . number->string) (aq2b1b core-prim . null?) (aq2b1a core-prim . not) (aq2b19 core-prim . negative?) (aq2b18 core-prim . nan?) (aq2b17 core-prim . min) (aq2b16 core-prim . max) (aq2b15 core-prim . map) (aq2b14 core-prim . make-vector) (aq2b13 core-prim . make-string) (aq2b12 core-prim . make-rectangular) (aq2b11 core-prim . make-polar) (aq2b10 core-prim . magnitude) (aq2b0f core-prim . log) (aq2b0e core-prim . list?) (aq2b0d core-prim . list-tail) (aq2b0c core-prim . list-ref) (aq2b0b core-prim . list->vector) (aq2b0a core-prim . list->string) (aq2b09 core-prim . list) (aq2b08 core-prim . length) (aq2b07 core-prim . lcm) (aq2b06 core-prim . integer?) (aq2b05 core-prim . integer-valued?) (aq2b04 core-prim . integer->char) (aq2b03 core-prim . infinite?) (aq2b02 core-prim . inexact?) (aq2b01 core-prim . inexact) (aq2b00 core-prim . imag-part) (aq2aff core-prim . gcd) (aq2afe core-prim . for-each) (aq2afd core-prim . floor) (aq2afc core-prim . finite?) (aq2afb core-prim . expt) (aq2afa core-prim . exp) (aq2af9 core-prim . exact?) (aq2af8 core-prim . exact-integer-sqrt) (aq2af7 core-prim . exact) (aq2af6 core-prim . even?) (aq2af5 core-prim . error) (aq2af4 core-prim . eqv?) (aq2af3 core-prim . equal?) (aq2af2 core-prim . eq?) (aq2af1 core-prim . dynamic-wind) (aq2af0 core-prim . div0-and-mod0) (aq2aef core-prim . mod0) (aq2aee core-prim . div0) (aq2aed core-prim . div-and-mod) (aq2aec core-prim . mod) (aq2aeb core-prim . div) (aq2aea core-prim . denominator) (aq2ae9 core-prim . cos) (aq2ae8 core-prim . cons) (aq2ae7 core-prim . complex?) (aq2ae6 core-prim . char?) (aq2ae5 core-prim . char>?) (aq2ae4 core-prim . char>=?) (aq2ae3 core-prim . char=?) (aq2ae2 core-prim . char<?) (aq2ae1 core-prim . char<=?) (aq2ae0 core-prim . char->integer) (aq2adf core-prim . ceiling) (aq2ade core-prim . call-with-values) (aq2add core-prim . call/cc) (aq2adc core-prim . call-with-current-continuation) (aq2adb core-prim . cddddr) (aq2ada core-prim . cdddar) (aq2ad9 core-prim . cddadr) (aq2ad8 core-prim . cddaar) (aq2ad7 core-prim . cdaddr) (aq2ad6 core-prim . cdadar) (aq2ad5 core-prim . cdaadr) (aq2ad4 core-prim . cdaaar) (aq2ad3 core-prim . cadddr) (aq2ad2 core-prim . caddar) (aq2ad1 core-prim . cadadr) (aq2ad0 core-prim . cadaar) (aq2acf core-prim . caaddr) (aq2ace core-prim . caadar) (aq2acd core-prim . caaadr) (aq2acc core-prim . caaaar) (aq2acb core-prim . cdddr) (aq2aca core-prim . cddar) (aq2ac9 core-prim . cdadr) (aq2ac8 core-prim . cdaar) (aq2ac7 core-prim . caddr) (aq2ac6 core-prim . cadar) (aq2ac5 core-prim . caadr) (aq2ac4 core-prim . caaar) (aq2ac3 core-prim . cddr) (aq2ac2 core-prim . cdar) (aq2ac1 core-prim . cadr) (aq2ac0 core-prim . caar) (aq2abf core-prim . cdr) (aq2abe core-prim . car) (aq2abd core-prim . boolean?) (aq2abc core-prim . boolean=?) (aq2abb core-prim . atan) (aq2aba core-prim . assertion-violation) (aqe53 core-prim . assertion-error) (aq2ab9 core-prim . asin) (aq2ab8 core-prim . apply) (aq2ab7 core-prim . append) (aq2ab6 core-prim . angle) (aq2ab5 core-prim . acos) (aq2ab4 core-prim . abs) (aq2ab3 core-prim . /) (aq2ab2 core-prim . *) (aq2ab1 core-prim . -) (aq2ab0 core-prim . +) (aq2aaf core-prim . >=) (aq2aae core-prim . >) (aq2aad core-prim . =) (aq2aac core-prim . <=) (aq2aab core-prim . <) (aq2aaa core-prim . library) (aq2aa9 $core-rtd &no-nans-rtd &no-nans-rcd) (aq2aa8 $core-rtd &no-infinities-rtd &no-infinities-rcd) (aq2aa7 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (aq2aa6 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (aq2aa5 $core-rtd &i/o-port-rtd &i/o-port-rcd) (aq2aa4 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (aq2aa3 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (aq2aa2 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (aq2aa1 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (aq2aa0 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (aq2a9f $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (aq2a9e $core-rtd &i/o-write-rtd &i/o-write-rcd) (aq2a9d $core-rtd &i/o-read-rtd &i/o-read-rcd) (aq2a9c $core-rtd &i/o-rtd &i/o-rcd) (aq2a9b $core-rtd &undefined-rtd &undefined-rcd) (aq2a9a $core-rtd &syntax-rtd &syntax-rcd) (aq2a99 $core-rtd &lexical-rtd &lexical-rcd) (aq2a98 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (aq2a97 $core-rtd &non-continuable-rtd &non-continuable-rcd) (aq2a96 $core-rtd &who-rtd &who-rcd) (aq2a95 $core-rtd &irritants-rtd &irritants-rcd) (aq2a94 $core-rtd &assertion-rtd &assertion-rcd) (aq2a93 $core-rtd &violation-rtd &violation-rcd) (aq2a92 $core-rtd &error-rtd &error-rcd) (aq2a91 $core-rtd &serious-rtd &serious-rcd) (aq2a90 $core-rtd &warning-rtd &warning-rcd) (aq2a8f $core-rtd &message-rtd &message-rcd) (aq2a8e $core-rtd &condition-rtd &condition-rcd) (aq2a8d macro . define-condition-type) (aq2a8c macro . define-enumeration) (aq2a8b macro . define-record-type) (aq2a8a macro . parent-rtd) (aq2a89 macro . nongenerative) (aq2a88 macro . opaque) (aq2a87 macro . sealed) (aq2a86 macro . protocol) (aq2a85 macro . parent) (aq2a84 macro . immutable) (aq2a83 macro . mutable) (aq2a82 macro . fields) (aq2a81 macro . error-handling-mode) (aq2a80 macro . file-options) (aq2a7f macro . buffer-mode) (aq2a7e macro . eol-style) (aq2a7d macro . guard) (aq2a7c macro . trace-define) (aq2a7b macro . trace-lambda) (aq2a7a macro . unsyntax-splicing) (aq2a79 macro . unsyntax) (aq2a78 macro . unquote-splicing) (aq2a77 macro . unquote) (aq2a76 macro . _) (aq2a75 macro . else) (aq2a74 macro . =>) (aq2a73 macro . ...) (aq2a72 macro . assert) (aq2a71 macro . endianness) (aq2a70 macro . delay) (aq2a6f macro . time) (aq2a6e macro . do) (aq2a6d macro . cond) (aq2a6c macro . let*) (aq2a6b macro . let*-values) (aq2a6a macro . let-values) (aq2a69 macro . identifier-syntax) (aq2a68 macro . with-syntax) (aq2a67 macro . quasisyntax) (aq2a66 macro . quasiquote) (aq2a65 macro . syntax-rules) (aq2a64 macro . include) (aq2a63 macro . define-struct) (aq2a62 core-macro . record-constructor-descriptor) (aq2a61 core-macro . record-type-descriptor) (aq2a60 macro . case) (aq2a5f macro . parameterize) (aq2a5e macro . unless) (aq2a5d macro . when) (aq2a5c core-macro . or) (aq2a5b core-macro . and) (aq2a5a core-macro . if) (aq2a59 core-macro . let) (aq2a58 core-macro . letrec*) (aq2a57 core-macro . letrec) (aq2a56 core-macro . type-descriptor) (aq2a55 core-macro . case-lambda) (aq2a54 core-macro . lambda) (aq2a53 core-macro . syntax) (aq2a52 core-macro . syntax-case) (aq2a51 core-macro . quote) (aq2a50 core-macro . foreign-call) (aq2a4f letrec-syntax) (aq2a4e let-syntax) (aq2a4d set!) (aq2a4c import) (aq2a4b begin) (aq2a4a module) (aq2a49 define-syntax) (aq2a48 define)) values values '#f '#f '#f '#f) (aq98d@aq7d9@install-library 'aq2e0a '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . aq2db1) (eval-core . aq2db0) (set-symbol-value! . aq2daf) (symbol-value . aq2dae) (gensym . aq2dad) (void . aq2dac)) '() values values '#f '#f '#f '#f) (aq98d@aq7d9@install-library 'aq2e0b '(mosh) '() '() '() '() '((set-symbol-value! . aq2daf) (symbol-value . aq2dae) (regexp? . aq2daa) (read-line . aq2da9) (ungensym . aq2da7) (alist->eq-hash-table . aq2da6) (assoc-ref . aq2da5) (print . aq2da4) (format . aq2da3) (host-os . aq2da2) (library-path . aq7b8) (standard-library-path . aq2da1) (file-newer? . aq2d9e) (stat-mtime . aq2d9d) (digit->integer . aq2d99) (call-with-string-input-port . aq2d98) (call-with-string-io . aq2d97) (string-split . aq2d96) (bytevector-for-each . aq2d95) (string->regexp . aq2d94) (rxmatch . aq2d93) (regexp-replace-all . aq2d92) (hashtable-for-each . aq2d91) (set-current-directory! . aq2d8c) (expand-path . aq2d8b) (current-directory . aq2d8a) (p . aq2d4b) (get-timeofday . aq2d32) (get-command-line . aq2d31) (sys-display . aq2d30) (whereis . aq2d2f) (register . aq2d2e) (vm-join! . aq2d2d) (vm-set-value! . aq2d2c) (vm? . aq2d2b) (main-vm? . aq2d2a) (vm-eval . aq2d29) (vm-self . aq2d28) (vm-start! . aq2d27) (make-vm . aq2d26) (mutex-try-lock! . aq2d25) (mutex-unlock! . aq2d24) (mutex-lock! . aq2d23) (mutex? . aq2d22) (make-mutex . aq2d21) (condition-variable-notify-all! . aq2d20) (condition-variable-notify! . aq2d1f) (condition-variable-wait! . aq2d1e) (make-condition-variable . aq2d1d) (write/ss . aq2d1c) (mosh-executable-path . aq2d1b) (make-file-options . aq2d1a) (source-info . aq2d19) (make-compiler-instruction . aq2d18) (make-instruction . aq2d17) (set-source-info! . aq2d16) (bignum? . aq2d15) (fast-equal? . aq2d14) (fasl-read . aq2d13) (fasl-write . aq2d12) (time-usage . aq2d11) (os-constant . aq2d10) (time . aq2a6f) (include . aq2a64)) '() values values '#f '#f '#f '#f) (aq98d@aq7d9@install-library 'aq2e0c '(system) '() '() '() '() '((gensym-prefix-set! . aq2da8) (%monapi-name-whereis . aq2da0) (%monapi-message-send . aq2d9f) (write-to-file . aq2d9c) (file->list . aq2d9b) (file->string . aq2d9a) (mosh-cache-dir . aq5a2) (call-process . aq2d90) (local-tz-offset . aq2d8f) (microseconds . aq2d8e) (directory-list . aq2d8d) (expand-path . aq2d8b) (%spawn . aq2d89) (%waitpid . aq2d88) (simple-struct-name . aq2d87) (simple-struct-set! . aq2d86) (simple-struct-ref . aq2d85) (make-simple-struct . aq2d84) (simple-struct? . aq2d83) (pointer-ref-c-int64 . aq2d82) (pointer-ref-c-int32 . aq2d81) (pointer-ref-c-int16 . aq2d80) (pointer-ref-c-int8 . aq2d7f) (pointer-ref-c-uint64 . aq2d7e) (pointer-ref-c-uint32 . aq2d7d) (pointer-ref-c-uint16 . aq2d7c) (pointer-ref-c-uint8 . aq2d7b) (pointer-set-c-uint64! . aq2d7a) (pointer-set-c-uint32! . aq2d79) (pointer-set-c-uint16! . aq2d78) (pointer-set-c-uint8! . aq2d77) (pointer-set-c-int64! . aq2d76) (pointer-set-c-int32! . aq2d75) (pointer-set-c-int16! . aq2d74) (pointer-set-c-int8! . aq2d73) (pointer-set-c-pointer! . aq2d72) (pointer-set-c-double! . aq2d71) (pointer-set-c-float! . aq2d70) (pointer-set-c-long-long! . aq2d6f) (pointer-set-c-long! . aq2d6e) (pointer-set-c-int! . aq2d6d) (pointer-set-c-short! . aq2d6c) (pointer-set-c-char! . aq2d6b) (pointer-ref-c-pointer . aq2d6a) (pointer-ref-c-double . aq2d69) (pointer-ref-c-float . aq2d68) (pointer-ref-c-unsigned-long-long . aq2d67) (pointer-ref-c-signed-long-long . aq2d66) (pointer-ref-c-unsigned-long . aq2d65) (pointer-ref-c-signed-long . aq2d64) (pointer-ref-c-unsigned-int . aq2d63) (pointer-ref-c-signed-int . aq2d62) (pointer-ref-c-unsigned-short . aq2d61) (pointer-ref-c-signed-short . aq2d60) (pointer-ref-c-unsigned-char . aq2d5f) (pointer-ref-c-signed-char . aq2d5e) (pointer->integer . aq2d5d) (integer->pointer . aq2d5c) (pointer? . aq2d5b) (shared-errno . aq2d5a) (%ffi-free-c-callback-trampoline . aq2d59) (%ffi-make-c-callback-trampoline . aq2d58) (%ffi-free . aq2d57) (%ffi-malloc . aq2d56) (%ffi-supported? . aq2d55) (%ffi-pointer->string . aq2d54) (%ffi-call . aq2d53) (%ffi-lookup . aq2d52) (%ffi-open . aq2d51) (null-terminated-utf8->string . aq2d50) (null-terminated-bytevector->string . aq2d4f) (%exec . aq2d4e) (%fork . aq2d4d) (%pipe . aq2d4c) (open-output-string . aq2d4a) (get-output-string . aq2d49) (file-stat-ctime . aq2d48) (file-stat-atime . aq2d47) (file-stat-mtime . aq2d46) (file-size-in-bytes . aq2d45) (file-writable? . aq2d44) (file-executable? . aq2d43) (file-readable? . aq2d42) (file-regular? . aq2d41) (file-symbolic-link? . aq2d40) (file-directory? . aq2d3f) (create-symbolic-link . aq2d3e) (rename-file . aq2d3d) (delete-directory . aq2d3c) (create-directory . aq2d3b) (create-mosh-cache-dir . aq2d3a) (get-environment-variables . aq2d39) (current-exception-handler . aq2d38) (get-environment-variable . aq2d37) (join-wraps . aq2d36) (id->real-label . aq2d35) (same-marks? . aq2d34) (same-marks*? . aq2d33) (disasm . aq2d0f) (make-parameter . aq5a0) (socket-port . aq2d0e) (socket-shutdown . aq2d0d) (socket-close . aq2d0c) (socket-send . aq2d0b) (socket-recv! . aq2d0a) (socket-recv . aq2d09) (make-server-socket . aq2d08) (make-client-socket . aq2d07) (socket-accept . aq2d06) (socket? . aq2d05) (parameterize . aq2a5f)) '() values values '#f '#f '#f '#f)))
(begin (set! aq28c7@ref (unspecified)) (set! aq28c9@x* (unspecified)) (set! aq28cb@add-library-path! (unspecified)) (set! aq28cd@parse-and-add-library-path (unspecified)) (set! aq28cf@for-each-with-index (unspecified)) (set! aq28d1@rpad (unspecified)) (set! aq28d3@condition-printer (unspecified)) (set! aq28d5@record->field-alist (unspecified)) (set! aq28d7@map-with-index (unspecified)) (set! aq28d9@repl (unspecified)) (set! aq28db@trace-printer (unspecified)) (set! aq28dd@command-line (unspecified)) (set! aq28df@local-library-path (unspecified)) (set! aq28e1@load/args (unspecified)) (set! aq28e3@load (unspecified)) (set! aq28e5@ironscheme-build (unspecified)) (set! aq28e7@eval-top-level (unspecified)) (set! aq28e9@compile-system-libraries (unspecified)) (set! aq28eb@compile (unspecified)) (set! aq28ed@compile->closure (unspecified)) (set! aq28ef@pre-compile-r6rs-file (unspecified)) (set! aq28f1@load-r6rs-top-level (unspecified)) (set! aq28f3@load-r6rs-top-level-sexp (unspecified)) (set! aq28f5@prefix-inc (unspecified)) (set! aq28f7@prefix-inc! (unspecified)) (set! aq28c7@ref (lambda (aq2932@rtd aq2933@i aq2934@x) (let ((aq2938@val ((record-accessor aq2932@rtd aq2933@i) aq2934@x))) (if (symbol? aq2938@val) (ungensym aq2938@val) aq2938@val)))) (set! aq2a2e@aq28c7@ref aq28c7@ref) (set! aq28c9@x* '()) (set! aq2a2f@aq28c9@x* aq28c9@x*) (set! aq28cb@add-library-path! (lambda (aq293a@path) (aq97d@aq7b9@library-path (append (aq97d@aq7b9@library-path) (list aq293a@path))))) (set! aq2a30@aq28cb@add-library-path! aq28cb@add-library-path!) (set! aq28cd@parse-and-add-library-path (lambda (aq293c@paths aq293d@message) (letrec* ((aq2941@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((aq2942@t aq293c@paths)) (if aq2942@t ((lambda (aq2944@paths) (for-each (lambda (aq2946@path) (if (file-exists? aq2946@path) (aq28cb@add-library-path! (expand-path aq2946@path)) (format (current-error-port) aq293d@message aq2946@path))) (string-split aq2944@paths aq2941@separator))) aq2942@t) (void)))))) (set! aq2a31@aq28cd@parse-and-add-library-path aq28cd@parse-and-add-library-path) (set! aq28cf@for-each-with-index (lambda (aq2948@proc aq2949@lst) (letrec ((aq294c@loop (lambda (aq294e@i aq294f@lst) (if (null? aq294f@lst) (if '#f '#f (void)) (begin (aq2948@proc aq294e@i (car aq294f@lst)) (aq294c@loop (+ aq294e@i '1) (cdr aq294f@lst))))))) (aq294c@loop '1 aq2949@lst)))) (set! aq2a32@aq28cf@for-each-with-index aq28cf@for-each-with-index) (set! aq28d1@rpad (lambda (aq2952@str aq2953@pad aq2954@n) (let ((aq2958@rest (- aq2954@n (string-length (format '"~a" aq2952@str))))) (let aq295e@loop ((aq295a@rest aq2958@rest) (aq295b@ret (format '"~a" aq2952@str))) (if (<= aq295a@rest '0) aq295b@ret (aq295e@loop (- aq295a@rest '1) (string-append aq295b@ret aq2953@pad))))))) (set! aq2a33@aq28d1@rpad aq28d1@rpad) (set! aq28d3@condition-printer (lambda (aq2960@e aq2961@port) (letrec* ((aq2965@max-condition-len (apply max (map (lambda (aq2976@c) (string-length (symbol->string (record-type-name (record-rtd aq2976@c))))) (simple-conditions aq2960@e))))) (begin (display '" Condition components:\n" aq2961@port) (aq28cf@for-each-with-index (lambda (aq2966@i aq2967@x) (let ((aq296a@rtd (record-rtd aq2967@x)) (aq296b@fields-alist (aq28d5@record->field-alist aq2967@x))) (begin (format aq2961@port '" ~d. ~a" aq2966@i (aq28d1@rpad (symbol->string (record-type-name aq296a@rtd)) '" " aq2965@max-condition-len)) (if (null? aq296b@fields-alist) (newline aq2961@port) (void)) (let aq2972@loop ((aq296e@first '#t) (aq296f@fields-alist aq296b@fields-alist)) (if (null? aq296f@fields-alist) '() (let ((aq2974@field (car aq296f@fields-alist))) (begin (if (not aq296e@first) (display (aq28d1@rpad '"" '" " (+ '4 aq2965@max-condition-len)) aq2961@port) (void)) (display '"       " aq2961@port) (display (car aq2974@field) aq2961@port) (display '": " aq2961@port) (write (cdr aq2974@field) aq2961@port) (newline aq2961@port) (aq2972@loop '#f (cdr aq296f@fields-alist))))))))) (simple-conditions aq2960@e)))))) (set! aq2a34@aq28d3@condition-printer aq28d3@condition-printer) (set! aq28d5@record->field-alist (lambda (aq2978@r) (letrec* ((aq297b@ref (lambda (aq2986@rtd aq2987@i aq2988@x) (let ((aq298c@val ((record-accessor aq2986@rtd aq2987@i) aq2988@x))) (if (symbol? aq298c@val) (ungensym aq298c@val) aq298c@val))))) (let aq2980@loop ((aq297c@ret '()) (aq297d@rtd (record-rtd aq2978@r))) (if aq297d@rtd (aq2980@loop (append aq297c@ret (aq28d7@map-with-index (lambda (aq2982@i aq2983@field) (cons aq2983@field (aq297b@ref aq297d@rtd aq2982@i aq2978@r))) (vector->list (record-type-field-names aq297d@rtd)))) (record-type-parent aq297d@rtd)) aq297c@ret))))) (set! aq2a35@aq28d5@record->field-alist aq28d5@record->field-alist) (set! aq28d7@map-with-index (lambda (aq298e@proc aq298f@lst) (let aq2998@loop ((aq2992@i '0) (aq2993@lst aq298f@lst) (aq2994@ret '())) (if (null? aq2993@lst) (reverse aq2994@ret) (aq2998@loop (+ aq2992@i '1) (cdr aq2993@lst) (cons (aq298e@proc aq2992@i (car aq2993@lst)) aq2994@ret)))))) (set! aq2a36@aq28d7@map-with-index aq28d7@map-with-index) (set! aq28d9@repl (lambda aq299a@x (letrec* ((aq299d@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (aq29a0@aq299e) (lambda () (with-exception-handler (lambda (aq29a2@e) ((call/cc (lambda (aq29a4@aq299f) (aq29a0@aq299e (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? aq29a2@e) (aq28d3@condition-printer aq29a2@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" aq29a2@e))) (aq29a4@aq299f (lambda () (raise-continuable aq29a2@e)))))))))) (lambda () (let aq29aa@loop ((aq29a6@line (get-line (current-input-port))) (aq29a7@accum '"")) (letrec* ((aq29ad@parentheses-ok? (lambda (aq29b8@text) (let aq29c0@loop ((aq29ba@chars (string->list aq29b8@text)) (aq29bb@p0 '0) (aq29bc@p1 '0)) (if (null? aq29ba@chars) (= '0 aq29bb@p0 aq29bc@p1) (let ((aq29c2@t (car aq29ba@chars))) (if (memv aq29c2@t '(#\()) (aq29c0@loop (cdr aq29ba@chars) (+ aq29bb@p0 '1) aq29bc@p1) (if (memv aq29c2@t '(#\))) (aq29c0@loop (cdr aq29ba@chars) (- aq29bb@p0 '1) aq29bc@p1) (if (memv aq29c2@t '(#\[)) (aq29c0@loop (cdr aq29ba@chars) aq29bb@p0 (+ aq29bc@p1 '1)) (if (memv aq29c2@t '(#\])) (aq29c0@loop (cdr aq29ba@chars) aq29bb@p0 (- aq29bc@p1 '1)) (aq29c0@loop (cdr aq29ba@chars) aq29bb@p0 aq29bc@p1)))))))))) (aq29af@eval-string-print (lambda (aq29b2@text) (if (not (or (string=? '"\n" aq29b2@text) (= '0 (string-length aq29b2@text)))) (call-with-values (lambda () (aq28e7@eval-top-level (call-with-port (open-string-input-port aq29b2@text) read))) (lambda aq29b4@out* (for-each (lambda (aq29b6@out) (begin (write aq29b6@out) (newline))) aq29b4@out*))) (void))))) (if (eof-object? aq29a6@line) (begin (aq29af@eval-string-print aq29a7@accum) (exit)) (let ((aq29b0@current (string-append aq29a7@accum aq29a6@line))) (if (aq29ad@parentheses-ok? aq29b0@current) (aq29af@eval-string-print aq29b0@current) (aq29aa@loop (get-line (current-input-port)) aq29b0@current)))))))))))) (newline) (aq299d@rec))))) (aq299d@rec)))) (set! aq2a37@aq28d9@repl aq28d9@repl) (set! aq28db@trace-printer (aq6c3@aq5a1@make-parameter write)) (set! aq2a38@aq28db@trace-printer aq28db@trace-printer) (set! aq28dd@command-line (aq6c3@aq5a1@make-parameter (get-command-line))) (set! aq2a39@aq28dd@command-line aq28dd@command-line) (set! aq28df@local-library-path (lambda (aq29c4@filename) (aq97d@aq7b9@library-path))) (set! aq2a3a@aq28df@local-library-path aq28df@local-library-path) (set! aq28e1@load/args (lambda (aq29c6@filename . aq29c8@args) (begin (apply aq28f1@load-r6rs-top-level aq29c6@filename 'load aq29c8@args) (void)))) (set! aq2a3b@aq28e1@load/args aq28e1@load/args) (set! aq28e3@load (lambda (aq29ca@filename) (begin (apply aq28f1@load-r6rs-top-level aq29ca@filename 'load (aq28dd@command-line)) (void)))) (set! aq2a3c@aq28e3@load aq28e3@load) (set! aq28e5@ironscheme-build (lambda () (aq28e3@load '"ironscheme-buildscript.ss"))) (set! aq2a3d@aq28e5@ironscheme-build aq28e5@ironscheme-build) (set! aq28e7@eval-top-level (lambda (aq29cc@x) (aq28a4@aqe3a@eval aq29cc@x (aq28bb@aqe68@interaction-environment)))) (set! aq2a3e@aq28e7@eval-top-level aq28e7@eval-top-level) (set! aq28e9@compile-system-libraries (lambda () (aq28e7@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! aq2a3f@aq28e9@compile-system-libraries aq28e9@compile-system-libraries) (set! aq28eb@compile (lambda (aq29ce@filename) (aq28f1@load-r6rs-top-level aq29ce@filename 'compile))) (set! aq2a40@aq28eb@compile aq28eb@compile) (set! aq28ed@compile->closure (lambda (aq29d0@filename) (aq28f1@load-r6rs-top-level aq29d0@filename 'closure))) (set! aq2a41@aq28ed@compile->closure aq28ed@compile->closure) (set! aq28ef@pre-compile-r6rs-file (lambda (aq29d2@filename) (aq28f1@load-r6rs-top-level aq29d2@filename 'compile))) (set! aq2a42@aq28ef@pre-compile-r6rs-file aq28ef@pre-compile-r6rs-file) (set! aq28f1@load-r6rs-top-level (lambda (aq29d4@filename aq29d5@how . aq29d8@args) (begin (aq97d@aq7b9@library-path (aq28df@local-library-path aq29d4@filename)) (let ((aq29da@x* (with-input-from-file aq29d4@filename (lambda () (let aq29dc@f () (let ((aq29de@x (aq6b5@aq585@read-annotated))) (if (eof-object? aq29de@x) '() (cons aq29de@x (aq29dc@f))))))))) (let ((aq29e0@t aq29d5@how)) (if (memv aq29e0@t '(closure)) (aq28ba@aqe66@pre-compile-r6rs-top-level aq29da@x*) (if (memv aq29e0@t '(load)) (begin (aq28dd@command-line (cons aq29d4@filename (car aq29d8@args))) (aq6c4@aq5a3@mosh-cache-dir (create-mosh-cache-dir)) (if (aq6c4@aq5a3@mosh-cache-dir) (gensym-prefix-set! (aq28f7@prefix-inc! (string-append (aq6c4@aq5a3@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (aq29e2@file) ((call/cc (lambda (aq29e6@aq29e4) (lambda () (with-exception-handler (lambda (aq29e8@c) ((call/cc (lambda (aq29ea@aq29e5) (aq29e6@aq29e4 (lambda () (if '#t '#t (aq29ea@aq29e5 (lambda () (raise-continuable aq29e8@c)))))))))) (lambda () (delete-file (string-append (aq6c4@aq5a3@mosh-cache-dir) '"/" aq29e2@file))))))))) (directory-list (aq6c4@aq5a3@mosh-cache-dir))) (void)) (let ((aq29ec@compiled (aq28b9@aqe64@compile-r6rs-top-level aq29da@x*))) (begin (if (and (aq6c4@aq5a3@mosh-cache-dir) (not (symbol-value '%disable-acc))) (aq981@aq7c1@serialize-all aq6be@aq597@serialize-library aq71a@aq6d3@compile-core-expr) (void)) (aq29ec@compiled)))) (if (memv aq29e0@t '(compile)) (begin (aq28b9@aqe64@compile-r6rs-top-level aq29da@x*) (aq981@aq7c1@serialize-all aq6be@aq597@serialize-library aq71a@aq6d3@compile-core-expr)) (if '#f '#f (void)))))))))) (set! aq2a43@aq28f1@load-r6rs-top-level aq28f1@load-r6rs-top-level) (set! aq28f3@load-r6rs-top-level-sexp (lambda (aq29ee@import-spec aq29ef@thunk) (let ((aq29fa@aq29f3 aq97d@aq7b9@library-path) (aq29fb@aq29f5 aq6c4@aq5a3@mosh-cache-dir) (aq29fc@aq29f7 (aq28df@local-library-path '"")) (aq29fd@aq29f9 (create-mosh-cache-dir))) (let ((aq2a02@swap (lambda () (begin (let ((aq2a04@t (aq29fa@aq29f3))) (begin (aq29fa@aq29f3 aq29fc@aq29f7) (set! aq29fc@aq29f7 aq2a04@t))) (let ((aq2a06@t (aq29fb@aq29f5))) (begin (aq29fb@aq29f5 aq29fd@aq29f9) (set! aq29fd@aq29f9 aq2a06@t))))))) (dynamic-wind aq2a02@swap (lambda () (begin (if (aq6c4@aq5a3@mosh-cache-dir) (gensym-prefix-set! (aq28f7@prefix-inc! (string-append (aq6c4@aq5a3@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((aq2a0c@aq2a09 aq28dd@command-line) (aq2a0d@aq2a0b '())) (let ((aq2a10@swap (lambda () (let ((aq2a12@t (aq2a0c@aq2a09))) (begin (aq2a0c@aq2a09 aq2a0d@aq2a0b) (set! aq2a0d@aq2a0b aq2a12@t)))))) (dynamic-wind aq2a10@swap (lambda () ((aq28b9@aqe64@compile-r6rs-top-level (list (cons 'import aq29ee@import-spec) (list aq29ef@thunk))))) aq2a10@swap))))) aq2a02@swap))))) (set! aq2a44@aq28f3@load-r6rs-top-level-sexp aq28f3@load-r6rs-top-level-sexp) (set! aq28f5@prefix-inc (lambda (aq2a14@prefix-string) (let ((aq2a16@prefix (symbol->string aq2a14@prefix-string))) (let ((aq2a18@len (string-length aq2a16@prefix))) (let aq2a20@loop ((aq2a1a@i (- aq2a18@len '1)) (aq2a1b@carry? '#t) (aq2a1c@accum '())) (if (< aq2a1a@i '0) (string->symbol (list->string (if aq2a1b@carry? (cons '#\a aq2a1c@accum) aq2a1c@accum))) (if aq2a1b@carry? (let ((aq2a22@next-integer (+ '1 (char->integer (string-ref aq2a16@prefix aq2a1a@i))))) (if (= aq2a22@next-integer '123) (aq2a20@loop (- aq2a1a@i '1) '#f (cons '#\A aq2a1c@accum)) (if (= aq2a22@next-integer '91) (aq2a20@loop (- aq2a1a@i '1) '#t (cons '#\a aq2a1c@accum)) (aq2a20@loop (- aq2a1a@i '1) '#f (cons (integer->char aq2a22@next-integer) aq2a1c@accum))))) (aq2a20@loop (- aq2a1a@i '1) '#f (cons (string-ref aq2a16@prefix aq2a1a@i) aq2a1c@accum))))))))) (set! aq2a45@aq28f5@prefix-inc aq28f5@prefix-inc) (set! aq28f7@prefix-inc! (lambda (aq2a24@file) (begin (if (not (file-exists? aq2a24@file)) (call-with-output-file aq2a24@file (lambda (aq2a26@port) (write 'd aq2a26@port))) (void)) (let ((aq2a28@prefix (call-with-input-file aq2a24@file read))) (if (main-vm?) (let ((aq2a2a@next-prefix (aq28f5@prefix-inc aq2a28@prefix))) (begin (call-with-port (open-file-output-port aq2a24@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (aq2a2c@port) (write aq2a2a@next-prefix aq2a2c@port))) aq2a28@prefix)) aq2a28@prefix))))) (set! aq2a46@aq28f7@prefix-inc! aq28f7@prefix-inc!) (begin (aq982@aq7c3@current-precompiled-library-loader aq6bf@aq599@load-serialized-library) (set-symbol-value! 'load aq28e3@load) (set-symbol-value! 'pre-compile-r6rs-file aq28ef@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs aq28e7@eval-top-level) (set-symbol-value! 'int-env-syms aq289b@aqe28@interaction-environment-symbols) (set-symbol-value! 'expanded2core aq719@aq6d1@expanded->core) (set-symbol-value! 'trace-printer aq28db@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (aq28f8@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list aq28f8@c))))) (aq28cd@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (aq28cd@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (aq28cb@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (aq28cb@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (aq28cb@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((aq28fa@prefix (lambda (aq28fc@ext aq28fd@ls) (append (map (lambda (aq2900@x) (string-append aq28fc@ext aq2900@x)) aq28fd@ls) aq28fd@ls)))) (aq97e@aq7bb@library-extensions (aq28fa@prefix '".mosh" (aq97e@aq7bb@library-extensions)))) (current-exception-handler (lambda (aq2902@c) (begin (if (condition? aq2902@c) (aq28d3@condition-printer aq2902@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" aq2902@c)) aq2902@c))) (if ((call/cc (lambda (aq2906@aq2904) (lambda () (with-exception-handler (lambda (aq2908@c) ((call/cc (lambda (aq290a@aq2905) (aq2906@aq2904 (lambda () (if '#t '#f (aq290a@aq2905 (lambda () (raise-continuable aq2908@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (aq28f3@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (aq28dd@command-line)) (let ((aq2914@aq290d aq28dd@command-line) (aq2915@aq290f aq6c4@aq5a3@mosh-cache-dir) (aq2916@aq2911 '()) (aq2917@aq2913 (create-mosh-cache-dir))) (let ((aq291c@swap (lambda () (begin (let ((aq291e@t (aq2914@aq290d))) (begin (aq2914@aq290d aq2916@aq2911) (set! aq2916@aq2911 aq291e@t))) (let ((aq2920@t (aq2915@aq290f))) (begin (aq2915@aq290f aq2917@aq2913) (set! aq2917@aq2913 aq2920@t))))))) (dynamic-wind aq291c@swap (lambda () (begin (if (aq6c4@aq5a3@mosh-cache-dir) (gensym-prefix-set! (aq28f7@prefix-inc! (string-append (aq6c4@aq5a3@mosh-cache-dir) '"/prefix.txt"))) (void)) (aq28d9@repl))) aq291c@swap))) (begin (aq97d@aq7b9@library-path (aq28df@local-library-path (car (aq28dd@command-line)))) (set! aq28c9@x* (with-input-from-file (car (aq28dd@command-line)) (lambda () (let aq2922@f () (let ((aq2924@x (aq6b5@aq585@read-annotated))) (if (eof-object? aq2924@x) '() (cons aq2924@x (aq2922@f)))))))) (aq28dd@command-line (cons (car (aq28dd@command-line)) (cdr (aq28dd@command-line)))) (aq6c4@aq5a3@mosh-cache-dir (create-mosh-cache-dir)) (if (aq6c4@aq5a3@mosh-cache-dir) (gensym-prefix-set! (aq28f7@prefix-inc! (string-append (aq6c4@aq5a3@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (aq2926@file) ((call/cc (lambda (aq292a@aq2928) (lambda () (with-exception-handler (lambda (aq292c@c) ((call/cc (lambda (aq292e@aq2929) (aq292a@aq2928 (lambda () (if '#t '#t (aq292e@aq2929 (lambda () (raise-continuable aq292c@c)))))))))) (lambda () (delete-file (string-append (aq6c4@aq5a3@mosh-cache-dir) '"/" aq2926@file))))))))) (directory-list (aq6c4@aq5a3@mosh-cache-dir))) (void)) (let ((aq2930@compiled (aq28b9@aqe64@compile-r6rs-top-level aq28c9@x*))) (begin (if (and (aq6c4@aq5a3@mosh-cache-dir) (not (symbol-value '%disable-acc))) (aq981@aq7c1@serialize-all aq6be@aq597@serialize-library aq71a@aq6d3@compile-core-expr) (void)) (aq2930@compiled))))))))
