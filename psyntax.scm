;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! N28c5@library-file-path->cache-path (unspecified)) (set! N28c7@read-annotated (unspecified)) (set! N28c9@annotation-stripped (unspecified)) (set! N28cb@annotation? (unspecified)) (set! N28cd@annotation-source (unspecified)) (set! N28cf@annotation-expression (unspecified)) (set! N28d1@scm->fasl (unspecified)) (set! N28d3@fasl-save (unspecified)) (set! N28d5@fasl-load (unspecified)) (set! N28d7@verbose? (unspecified)) (set! N28d9@serialize-library (unspecified)) (set! N28db@load-serialized-library (unspecified)) (set! N28dd@make-record-printer (unspecified)) (set! N28df@compile-core (unspecified)) (set! N28e1@read-library-source-file (unspecified)) (set! N28e3@make-parameter (unspecified)) (set! N28e5@mosh-cache-dir (unspecified)) (set! N297b@file-options-spec (unspecified)) (set! N28c5@library-file-path->cache-path (lambda (N297c@x) (call-with-values (lambda () (open-string-output-port)) (lambda (N2982@N297f N2983@N2981) (let ((N2986@extract N2983@N2981) (N2987@p N2982@N297f)) (letrec* ((N298b@display-hex (lambda (N2994@n) (if (<= '0 N2994@n '9) (display N2994@n N2987@p) (display (integer->char (+ (char->integer '#\a) (- N2994@n '10))) N2987@p))))) (begin (let N298e@f ((N298c@ls (string-split N297c@x '#\/))) (if (not (null? N298c@ls)) (begin (display '"_" N2987@p) (for-each (lambda (N2990@c) (if (or (char<=? '#\a N2990@c '#\z) (char<=? '#\A N2990@c '#\Z) (char<=? '#\0 N2990@c '#\9) (memv N2990@c '(#\- #\. #\_ #\~))) (display N2990@c N2987@p) (begin (display '"%" N2987@p) (let ((N2992@n (char->integer N2990@c))) (begin (N298b@display-hex (quotient N2992@n '16)) (N298b@display-hex (remainder N2992@n '16))))))) (string->list (car N298c@ls))) (N298e@f (cdr N298c@ls))) (void))) (N2986@extract)))))))) (set! N29f6@N28c5@library-file-path->cache-path N28c5@library-file-path->cache-path) (set! N28c7@read-annotated read) (set! N29f7@N28c7@read-annotated N28c7@read-annotated) (set! N28c9@annotation-stripped (lambda (N2996@x) (N28cf@annotation-expression N2996@x))) (set! N29f8@N28c9@annotation-stripped N28c9@annotation-stripped) (set! N28cb@annotation? (lambda (N2998@x) (source-info N2998@x))) (set! N29f9@N28cb@annotation? N28cb@annotation?) (set! N28cd@annotation-source (lambda (N299a@x) (source-info N299a@x))) (set! N29fa@N28cd@annotation-source N28cd@annotation-source) (set! N28cf@annotation-expression (lambda (N299c@x) (if (pair? N299c@x) (cons (car N299c@x) (cdr N299c@x)) (if (procedure? N299c@x) (set-source-info! N299c@x '#f) N299c@x)))) (set! N29fb@N28cf@annotation-expression N28cf@annotation-expression) (set! N28d1@scm->fasl (lambda (N299e@filename) (string-append (N28e5@mosh-cache-dir) '"/" (N28c5@library-file-path->cache-path N299e@filename) '".mosh-fasl"))) (set! N29fc@N28d1@scm->fasl N28d1@scm->fasl) (set! N28d3@fasl-save (lambda (N29a0@filename N29a1@obj) (call-with-port (open-file-output-port N29a0@filename) (lambda (N29a4@port) ((symbol-value 'fasl-write!) N29a1@obj N29a4@port))))) (set! N29fd@N28d3@fasl-save N28d3@fasl-save) (set! N28d5@fasl-load (lambda (N29a6@filename) (call-with-port (open-file-input-port N29a6@filename) (symbol-value 'fasl-read!)))) (set! N29fe@N28d5@fasl-load N28d5@fasl-load) (set! N28d7@verbose? (symbol-value '%verbose)) (set! N29ff@N28d7@verbose? N28d7@verbose?) (set! N28d9@serialize-library (lambda (N29a8@filename N29a9@obj) (begin (if N28d7@verbose? (format (current-error-port) '"serialize-library ~a\n..." N29a8@filename) (void)) (let ((N29ac@expanded2core (symbol-value 'expanded2core))) (let ((N29ae@compile (symbol-value 'compile-w/o-halt))) (let ((N29b0@code N29a9@obj)) (let ((N29b2@pivot (cddddr (cddddr N29b0@code)))) (let ((N29b4@visit (N29ae@compile (N29ac@expanded2core (car N29b2@pivot))))) (begin (set-car! N29b2@pivot N29b4@visit) (let ((N29b6@pivot (cdr N29b2@pivot))) (let ((N29b8@invoke (N29ae@compile (N29ac@expanded2core (car N29b6@pivot))))) (set-car! N29b6@pivot N29b8@invoke))))))))) (let ((N29ba@fasl-file (N28d1@scm->fasl N29a8@filename))) (begin (if (file-exists? N29ba@fasl-file) (delete-file N29ba@fasl-file) (void)) ((call/cc (lambda (N29be@N29bc) (lambda () (with-exception-handler (lambda (N29c0@c) ((call/cc (lambda (N29c2@N29bd) (N29be@N29bc (lambda () (if '#t (begin (if N28d7@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" N29a8@filename) (void)) (if (file-exists? N29ba@fasl-file) (delete-file N29ba@fasl-file) (void)) '#f) (N29c2@N29bd (lambda () (raise-continuable N29c0@c)))))))))) (lambda () (N28d3@fasl-save N29ba@fasl-file N29a9@obj)))))))))))) (set! N2a00@N28d9@serialize-library N28d9@serialize-library) (set! N28db@load-serialized-library (lambda (N29c4@filename N29c5@obj) (and (N28e5@mosh-cache-dir) (let ((N29c8@fasl-file (N28d1@scm->fasl N29c4@filename))) (if (and (file-exists? N29c8@fasl-file) ((symbol-value 'file-newer?) N29c8@fasl-file N29c4@filename)) (let ((N29ca@expanded2core (symbol-value 'expanded2core))) (let ((N29cc@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((N29ce@code (N28d5@fasl-load N29c8@fasl-file))) (let ((N29d0@pivot (cddddr (cddddr N29ce@code)))) (let ((N29d2@visit (car N29d0@pivot))) (let ((N29d4@visit-proc (lambda () (N29cc@eval-compiled-core N29d2@visit)))) (begin (set-car! N29d0@pivot N29d4@visit-proc) (let ((N29d6@pivot (cdr N29d0@pivot))) (let ((N29d8@invoke (car N29d6@pivot))) (begin (set-car! N29d6@pivot (lambda () (N29cc@eval-compiled-core N29d8@invoke))) (apply N29c5@obj N29ce@code))))))))))) '#f))))) (set! N2a01@N28db@load-serialized-library N28db@load-serialized-library) (set! N28dd@make-record-printer (lambda (N29da@name N29db@printer) (lambda N29de@x (begin (display '"record printer") (for-each display N29de@x))))) (set! N2a02@N28dd@make-record-printer N28dd@make-record-printer) (set! N28df@compile-core (lambda N29e0@x (apply error 'comile-core '"not implementated" N29e0@x))) (set! N2a03@N28df@compile-core N28df@compile-core) (set! N28e1@read-library-source-file (lambda (N29e2@file-name) (with-input-from-file N29e2@file-name N28c7@read-annotated))) (set! N2a04@N28e1@read-library-source-file N28e1@read-library-source-file) (set! N28e3@make-parameter (lambda N29f2 (let ((N29f3 (length N29f2))) (if (= N29f3 '1) (apply (lambda (N29e4@x) (N28e3@make-parameter N29e4@x (lambda (N29e6@x) N29e6@x))) N29f2) (if (= N29f3 '2) (apply (lambda (N29e8@x N29e9@fender) (let ((N29ec@x (N29e9@fender N29e8@x))) (lambda N29f0 (let ((N29f1 (length N29f0))) (if (= N29f1 '0) (apply (lambda () N29ec@x) N29f0) (if (= N29f1 '1) (apply (lambda (N29ee@v) (set! N29ec@x (N29e9@fender N29ee@v))) N29f0) (error 'apply '"invalid arg count"))))))) N29f2) (error 'apply '"invalid arg count")))))) (set! N2a05@N28e3@make-parameter N28e3@make-parameter) (set! N28e5@mosh-cache-dir (N28e3@make-parameter '#f)) (set! N2a06@N28e5@mosh-cache-dir N28e5@mosh-cache-dir) (set! N297b@file-options-spec (lambda (N29f4@x) N29f4@x)) (set! N2a07@N297b@file-options-spec N297b@file-options-spec) (void))
(begin (set! N2a0d@current-primitive-locations (unspecified)) (set! N2a0f@mutable? (unspecified)) (set! N2a11@rewriter (unspecified)) (set! N2a13@expanded->core (unspecified)) (set! N2a15@compile-core-expr (unspecified)) (set! N2a17@pretty-print (unspecified)) (set! N2a19@compile-core-expr-to-port (unspecified)) (set! N2a0d@current-primitive-locations (N2a05@N28e3@make-parameter (lambda (N2a1a@x) '#f) (lambda (N2a1c@p) N2a1c@p))) (set! N2a58@N2a0d@current-primitive-locations N2a0d@current-primitive-locations) (set! N2a0f@mutable? (lambda (N2a1e@x) (or (pair? N2a1e@x) (vector? N2a1e@x) (hashtable? N2a1e@x)))) (set! N2a59@N2a0f@mutable? N2a0f@mutable?) (set! N2a11@rewriter (lambda (N2a20@quote-hack?) (letrec* ((N2a23@f (lambda (N2a24@x) (if (pair? N2a24@x) (let ((N2a26@t (car N2a24@x))) (if (memv N2a26@t '(quote)) (if (and N2a20@quote-hack? (N2a0f@mutable? (cadr N2a24@x))) (let ((N2a28@g (gensym))) (begin (set-symbol-value! N2a28@g (cadr N2a24@x)) N2a28@g)) N2a24@x) (if (memv N2a26@t '(case-lambda)) (cons 'case-lambda (map (lambda (N2a2a@x) (cons (car N2a2a@x) (map N2a23@f (cdr N2a2a@x)))) (cdr N2a24@x))) (if (memv N2a26@t '(lambda)) (cons* 'lambda (cadr N2a24@x) (map N2a23@f (cddr N2a24@x))) (if (memv N2a26@t '(letrec)) (let ((N2a2c@bindings (cadr N2a24@x)) (N2a2d@body* (cddr N2a24@x))) (let ((N2a30@lhs* (map car N2a2c@bindings)) (N2a31@rhs* (map cadr N2a2c@bindings))) (cons* 'letrec (map list N2a30@lhs* (map N2a23@f N2a31@rhs*)) (map N2a23@f N2a2d@body*)))) (if (memv N2a26@t '(letrec*)) (let ((N2a34@bindings (cadr N2a24@x)) (N2a35@body* (cddr N2a24@x))) (let ((N2a38@lhs* (map car N2a34@bindings)) (N2a39@rhs* (map cadr N2a34@bindings))) (cons* 'letrec* (map list N2a38@lhs* (map N2a23@f N2a39@rhs*)) (map N2a23@f N2a35@body*)))) (if (memv N2a26@t '(library-letrec*)) (let ((N2a3c@name (cadr N2a24@x)) (N2a3d@x (cdr N2a24@x))) (let ((N2a40@bindings (cadr N2a3d@x)) (N2a41@body* (cddr N2a3d@x))) (let ((N2a44@lhs* (map car N2a40@bindings)) (N2a45@lhs** (map cadr N2a40@bindings)) (N2a46@rhs* (map caddr N2a40@bindings))) (cons* 'library-letrec* N2a3c@name (map list N2a44@lhs* N2a45@lhs** (map N2a23@f N2a46@rhs*)) (map N2a23@f N2a41@body*))))) (if (memv N2a26@t '(begin)) (cons 'begin (map N2a23@f (cdr N2a24@x))) (if (memv N2a26@t '(set!)) (list 'set! (cadr N2a24@x) (N2a23@f (caddr N2a24@x))) (if (memv N2a26@t '(primitive)) (let ((N2a4a@op (cadr N2a24@x))) (let ((N2a4c@t ((N2a0d@current-primitive-locations) N2a4a@op))) (if N2a4c@t ((lambda (N2a4e@loc) N2a4e@loc) N2a4c@t) N2a4a@op))) (if (memv N2a26@t '(define)) N2a24@x (if (list? N2a24@x) (map N2a23@f N2a24@x) (error 'rewrite '"invalid form ~s ~s" N2a24@x (list? N2a24@x)))))))))))))) N2a24@x)))) N2a23@f))) (set! N2a5a@N2a11@rewriter N2a11@rewriter) (set! N2a13@expanded->core (lambda (N2a50@x) ((N2a11@rewriter '#f) N2a50@x))) (set! N2a5b@N2a13@expanded->core N2a13@expanded->core) (set! N2a15@compile-core-expr (lambda (N2a52@x) ((N2a11@rewriter '#f) N2a52@x))) (set! N2a5c@N2a15@compile-core-expr N2a15@compile-core-expr) (set! N2a17@pretty-print write) (set! N2a5d@N2a17@pretty-print N2a17@pretty-print) (set! N2a19@compile-core-expr-to-port (lambda (N2a54@x N2a55@p) (N2a17@pretty-print ((N2a11@rewriter '#f) N2a54@x) N2a55@p))) (set! N2a5e@N2a19@compile-core-expr-to-port N2a19@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! N2aad@make-collection (unspecified)) (set! N2aaf@current-library-collection (unspecified)) (set! N2ab1@rp (unspecified)) (set! N2abb@library? (unspecified)) (set! N2abd@library-id (unspecified)) (set! N2abf@set-library-id! (unspecified)) (set! N2ac1@library-name (unspecified)) (set! N2ac3@set-library-name! (unspecified)) (set! N2ac5@library-version (unspecified)) (set! N2ac7@set-library-version! (unspecified)) (set! N2ac9@library-imp* (unspecified)) (set! N2acb@set-library-imp*! (unspecified)) (set! N2acd@library-vis* (unspecified)) (set! N2acf@set-library-vis*! (unspecified)) (set! N2ad1@library-inv* (unspecified)) (set! N2ad3@set-library-inv*! (unspecified)) (set! N2ad5@library-subst (unspecified)) (set! N2ad7@set-library-subst! (unspecified)) (set! N2ad9@library-env (unspecified)) (set! N2adb@set-library-env! (unspecified)) (set! N2add@library-visit-state (unspecified)) (set! N2adf@set-library-visit-state! (unspecified)) (set! N2ae1@library-invoke-state (unspecified)) (set! N2ae3@set-library-invoke-state! (unspecified)) (set! N2ae5@library-visit-code (unspecified)) (set! N2ae7@set-library-visit-code! (unspecified)) (set! N2ae9@library-invoke-code (unspecified)) (set! N2aeb@set-library-invoke-code! (unspecified)) (set! N2aed@library-visible? (unspecified)) (set! N2aef@set-library-visible?! (unspecified)) (set! N2af1@library-source-file-name (unspecified)) (set! N2af3@set-library-source-file-name! (unspecified)) (set! N2af5@dummy (unspecified)) (set! N2af7@find-dependencies (unspecified)) (set! N2af9@find-library-by (unspecified)) (set! N2afb@library-path (unspecified)) (set! N2afd@library-extensions (unspecified)) (set! N2aff@library-name->file-name (unspecified)) (set! N2b01@file-locator (unspecified)) (set! N2b03@serialize-all (unspecified)) (set! N2b05@current-precompiled-library-loader (unspecified)) (set! N2b07@try-load-from-file (unspecified)) (set! N2b09@library-loader (unspecified)) (set! N2b0b@current-library-expander (unspecified)) (set! N2b0d@external-pending-libraries (unspecified)) (set! N2b0f@find-external-library (unspecified)) (set! N2b11@find-library-by-name (unspecified)) (set! N2b13@library-exists? (unspecified)) (set! N2b15@find-library-by-spec/die (unspecified)) (set! N2b17@label->binding-table (unspecified)) (set! N2b19@install-library-record (unspecified)) (set! N2b1b@install-library (unspecified)) (set! N2b1d@imported-label->binding (unspecified)) (set! N2b1f@invoke-library (unspecified)) (set! N2b21@visit-library (unspecified)) (set! N2b23@invoke-library-by-spec (unspecified)) (set! N2b25@installed-libraries (unspecified)) (set! N2b27@library-spec (unspecified)) (set! N2aad@make-collection (lambda () (let ((N2b28@set '())) (letrec* ((N2b2b@set-cons (lambda (N2b30@x N2b31@ls) (if (memq N2b30@x N2b31@ls) N2b31@ls (cons N2b30@x N2b31@ls))))) (lambda N2b2e (let ((N2b2f (length N2b2e))) (if (= N2b2f '0) (apply (lambda () N2b28@set) N2b2e) (if (= N2b2f '1) (apply (lambda (N2b2c@x) (set! N2b28@set (N2b2b@set-cons N2b2c@x N2b28@set))) N2b2e) (error 'apply '"invalid arg count"))))))))) (set! N2c9c@N2aad@make-collection N2aad@make-collection) (set! N2aaf@current-library-collection (N2a05@N28e3@make-parameter (N2aad@make-collection) (lambda (N2b34@x) (begin (if (not (procedure? N2b34@x)) (assertion-violation 'current-library-collection '"not a procedure" N2b34@x) (void)) N2b34@x)))) (set! N2c9d@N2aaf@current-library-collection N2aaf@current-library-collection) (set! N2ab1@rp (N2a02@N28dd@make-record-printer 'library (lambda (N2b36@x N2b37@p N2b38@wr) (begin (if (not (N2abb@library? N2b36@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (N2ac5@library-version N2b36@x)) (N2ac1@library-name N2b36@x) (append (N2ac1@library-name N2b36@x) (list (N2ac5@library-version N2b36@x))))) N2b37@p))))) (set! N2c9e@N2ab1@rp N2ab1@rp) (set! N2abb@library? (lambda (N2b3c@x) (and (simple-struct? N2b3c@x) (eq? (simple-struct-name N2b3c@x) 'library)))) (set! N2c9f@N2abb@library? N2abb@library?) (set! N2abd@library-id (lambda (N2b3e@x) (simple-struct-ref N2b3e@x '0))) (set! N2ca0@N2abd@library-id N2abd@library-id) (set! N2abf@set-library-id! (lambda (N2b40@x N2b41@val) (simple-struct-set! N2b40@x '0 N2b41@val))) (set! N2ca1@N2abf@set-library-id! N2abf@set-library-id!) (set! N2ac1@library-name (lambda (N2b44@x) (simple-struct-ref N2b44@x '1))) (set! N2ca2@N2ac1@library-name N2ac1@library-name) (set! N2ac3@set-library-name! (lambda (N2b46@x N2b47@val) (simple-struct-set! N2b46@x '1 N2b47@val))) (set! N2ca3@N2ac3@set-library-name! N2ac3@set-library-name!) (set! N2ac5@library-version (lambda (N2b4a@x) (simple-struct-ref N2b4a@x '2))) (set! N2ca4@N2ac5@library-version N2ac5@library-version) (set! N2ac7@set-library-version! (lambda (N2b4c@x N2b4d@val) (simple-struct-set! N2b4c@x '2 N2b4d@val))) (set! N2ca5@N2ac7@set-library-version! N2ac7@set-library-version!) (set! N2ac9@library-imp* (lambda (N2b50@x) (simple-struct-ref N2b50@x '3))) (set! N2ca6@N2ac9@library-imp* N2ac9@library-imp*) (set! N2acb@set-library-imp*! (lambda (N2b52@x N2b53@val) (simple-struct-set! N2b52@x '3 N2b53@val))) (set! N2ca7@N2acb@set-library-imp*! N2acb@set-library-imp*!) (set! N2acd@library-vis* (lambda (N2b56@x) (simple-struct-ref N2b56@x '4))) (set! N2ca8@N2acd@library-vis* N2acd@library-vis*) (set! N2acf@set-library-vis*! (lambda (N2b58@x N2b59@val) (simple-struct-set! N2b58@x '4 N2b59@val))) (set! N2ca9@N2acf@set-library-vis*! N2acf@set-library-vis*!) (set! N2ad1@library-inv* (lambda (N2b5c@x) (simple-struct-ref N2b5c@x '5))) (set! N2caa@N2ad1@library-inv* N2ad1@library-inv*) (set! N2ad3@set-library-inv*! (lambda (N2b5e@x N2b5f@val) (simple-struct-set! N2b5e@x '5 N2b5f@val))) (set! N2cab@N2ad3@set-library-inv*! N2ad3@set-library-inv*!) (set! N2ad5@library-subst (lambda (N2b62@x) (simple-struct-ref N2b62@x '6))) (set! N2cac@N2ad5@library-subst N2ad5@library-subst) (set! N2ad7@set-library-subst! (lambda (N2b64@x N2b65@val) (simple-struct-set! N2b64@x '6 N2b65@val))) (set! N2cad@N2ad7@set-library-subst! N2ad7@set-library-subst!) (set! N2ad9@library-env (lambda (N2b68@x) (simple-struct-ref N2b68@x '7))) (set! N2cae@N2ad9@library-env N2ad9@library-env) (set! N2adb@set-library-env! (lambda (N2b6a@x N2b6b@val) (simple-struct-set! N2b6a@x '7 N2b6b@val))) (set! N2caf@N2adb@set-library-env! N2adb@set-library-env!) (set! N2add@library-visit-state (lambda (N2b6e@x) (simple-struct-ref N2b6e@x '8))) (set! N2cb0@N2add@library-visit-state N2add@library-visit-state) (set! N2adf@set-library-visit-state! (lambda (N2b70@x N2b71@val) (simple-struct-set! N2b70@x '8 N2b71@val))) (set! N2cb1@N2adf@set-library-visit-state! N2adf@set-library-visit-state!) (set! N2ae1@library-invoke-state (lambda (N2b74@x) (simple-struct-ref N2b74@x '9))) (set! N2cb2@N2ae1@library-invoke-state N2ae1@library-invoke-state) (set! N2ae3@set-library-invoke-state! (lambda (N2b76@x N2b77@val) (simple-struct-set! N2b76@x '9 N2b77@val))) (set! N2cb3@N2ae3@set-library-invoke-state! N2ae3@set-library-invoke-state!) (set! N2ae5@library-visit-code (lambda (N2b7a@x) (simple-struct-ref N2b7a@x '10))) (set! N2cb4@N2ae5@library-visit-code N2ae5@library-visit-code) (set! N2ae7@set-library-visit-code! (lambda (N2b7c@x N2b7d@val) (simple-struct-set! N2b7c@x '10 N2b7d@val))) (set! N2cb5@N2ae7@set-library-visit-code! N2ae7@set-library-visit-code!) (set! N2ae9@library-invoke-code (lambda (N2b80@x) (simple-struct-ref N2b80@x '11))) (set! N2cb6@N2ae9@library-invoke-code N2ae9@library-invoke-code) (set! N2aeb@set-library-invoke-code! (lambda (N2b82@x N2b83@val) (simple-struct-set! N2b82@x '11 N2b83@val))) (set! N2cb7@N2aeb@set-library-invoke-code! N2aeb@set-library-invoke-code!) (set! N2aed@library-visible? (lambda (N2b86@x) (simple-struct-ref N2b86@x '12))) (set! N2cb8@N2aed@library-visible? N2aed@library-visible?) (set! N2aef@set-library-visible?! (lambda (N2b88@x N2b89@val) (simple-struct-set! N2b88@x '12 N2b89@val))) (set! N2cb9@N2aef@set-library-visible?! N2aef@set-library-visible?!) (set! N2af1@library-source-file-name (lambda (N2b8c@x) (simple-struct-ref N2b8c@x '13))) (set! N2cba@N2af1@library-source-file-name N2af1@library-source-file-name) (set! N2af3@set-library-source-file-name! (lambda (N2b8e@x N2b8f@val) (simple-struct-set! N2b8e@x '13 N2b8f@val))) (set! N2cbb@N2af3@set-library-source-file-name! N2af3@set-library-source-file-name!) (set! N2af5@dummy '3) (set! N2cbc@N2af5@dummy N2af5@dummy) (set! N2af7@find-dependencies (lambda (N2b92@ls) (if (null? N2b92@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! N2cbd@N2af7@find-dependencies N2af7@find-dependencies) (set! N2af9@find-library-by (lambda (N2b94@pred) (let N2b98@f ((N2b96@ls ((N2aaf@current-library-collection)))) (if (null? N2b96@ls) '#f (if (N2b94@pred (car N2b96@ls)) (car N2b96@ls) (N2b98@f (cdr N2b96@ls))))))) (set! N2cbe@N2af9@find-library-by N2af9@find-library-by) (set! N2afb@library-path (N2a05@N28e3@make-parameter '(".") (lambda (N2b9a@x) (if (and (list? N2b9a@x) (for-all string? N2b9a@x)) (map (lambda (N2b9c@x) N2b9c@x) N2b9a@x) (assertion-violation 'library-path '"not a list of strings" N2b9a@x))))) (set! N2cbf@N2afb@library-path N2afb@library-path) (set! N2afd@library-extensions (N2a05@N28e3@make-parameter '(".sls" ".ss" ".scm") (lambda (N2b9e@x) (if (and (list? N2b9e@x) (for-all string? N2b9e@x)) (map (lambda (N2ba0@x) N2ba0@x) N2b9e@x) (assertion-violation 'library-extensions '"not a list of strings" N2b9e@x))))) (set! N2cc0@N2afd@library-extensions N2afd@library-extensions) (set! N2aff@library-name->file-name (lambda (N2ba2@x) (call-with-values (lambda () (open-string-output-port)) (lambda (N2ba8@N2ba5 N2ba9@N2ba7) (let ((N2bac@extract N2ba9@N2ba7) (N2bad@p N2ba8@N2ba5)) (letrec* ((N2bb1@display-hex (lambda (N2bba@n) (if (<= '0 N2bba@n '9) (display N2bba@n N2bad@p) (display (integer->char (+ (char->integer '#\a) (- N2bba@n '10))) N2bad@p))))) (begin (let N2bb4@f ((N2bb2@ls N2ba2@x)) (if (not (null? N2bb2@ls)) (begin (display '"/" N2bad@p) (for-each (lambda (N2bb6@c) (if (or (char<=? '#\a N2bb6@c '#\z) (char<=? '#\A N2bb6@c '#\Z) (char<=? '#\0 N2bb6@c '#\9) (memv N2bb6@c '(#\- #\. #\_ #\~))) (display N2bb6@c N2bad@p) (begin (display '"%" N2bad@p) (let ((N2bb8@n (char->integer N2bb6@c))) (begin (N2bb1@display-hex (quotient N2bb8@n '16)) (N2bb1@display-hex (remainder N2bb8@n '16))))))) (string->list (symbol->string (car N2bb2@ls)))) (N2bb4@f (cdr N2bb2@ls))) (void))) (N2bac@extract)))))))) (set! N2cc1@N2aff@library-name->file-name N2aff@library-name->file-name) (set! N2b01@file-locator (N2a05@N28e3@make-parameter (lambda (N2bbc@x) (let ((N2bbe@str (N2aff@library-name->file-name N2bbc@x))) (let N2bc6@f ((N2bc0@ls (N2afb@library-path)) (N2bc1@exts (N2afd@library-extensions)) (N2bc2@failed-list '())) (if (null? N2bc0@ls) (letrec* ((N2bd0@N2bcb (make-record-type-descriptor '&library-resolution &condition-rtd 'N2bce '#f '#f '#((immutable library) (immutable files)))) (N2bd2@N2bcd '#f) (N2bd4@N2bcc (make-record-constructor-descriptor N2bd0@N2bcb &condition-rcd N2bd2@N2bcd)) (N2bd7@N2bca (record-predicate N2bd0@N2bcb)) (N2bd9@make-library-resolution-condition (record-constructor N2bd4@N2bcc)) (N2bdb@N2bc8 (record-accessor N2bd0@N2bcb '0)) (N2bdd@N2bc9 (record-accessor N2bd0@N2bcb '1)) (N2bdf@library-resolution-condition? (condition-predicate N2bd0@N2bcb)) (N2be1@condition-library (condition-accessor N2bd0@N2bcb N2bdb@N2bc8)) (N2be3@condition-files (condition-accessor N2bd0@N2bcb N2bdd@N2bc9))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (N2bd9@make-library-resolution-condition N2bbc@x (reverse N2bc2@failed-list))))) (if (null? N2bc1@exts) (N2bc6@f (cdr N2bc0@ls) (N2afd@library-extensions) N2bc2@failed-list) (let ((N2be4@name (string-append (car N2bc0@ls) N2bbe@str (car N2bc1@exts)))) (if (file-exists? N2be4@name) N2be4@name (N2bc6@f N2bc0@ls (cdr N2bc1@exts) (cons N2be4@name N2bc2@failed-list))))))))) (lambda (N2be6@f) (if (procedure? N2be6@f) N2be6@f (assertion-violation 'file-locator '"not a procedure" N2be6@f))))) (set! N2cc2@N2b01@file-locator N2b01@file-locator) (set! N2b03@serialize-all (lambda (N2be8@serialize N2be9@compile) (letrec* ((N2bed@library-desc (lambda (N2bf0@x) (list (N2abd@library-id N2bf0@x) (N2ac1@library-name N2bf0@x))))) (for-each (lambda (N2bee@x) (if (N2af1@library-source-file-name N2bee@x) (N2be8@serialize (N2af1@library-source-file-name N2bee@x) (list (N2abd@library-id N2bee@x) (N2ac1@library-name N2bee@x) (N2ac5@library-version N2bee@x) (map N2bed@library-desc (N2ac9@library-imp* N2bee@x)) (map N2bed@library-desc (N2acd@library-vis* N2bee@x)) (map N2bed@library-desc (N2ad1@library-inv* N2bee@x)) (N2ad5@library-subst N2bee@x) (N2ad9@library-env N2bee@x) (N2be9@compile (N2ae5@library-visit-code N2bee@x)) (N2be9@compile (N2ae9@library-invoke-code N2bee@x)) (N2aed@library-visible? N2bee@x))) (void))) ((N2aaf@current-library-collection)))))) (set! N2cc3@N2b03@serialize-all N2b03@serialize-all) (set! N2b05@current-precompiled-library-loader (N2a05@N28e3@make-parameter (lambda (N2bf2@filename N2bf3@sk) '#f))) (set! N2cc4@N2b05@current-precompiled-library-loader N2b05@current-precompiled-library-loader) (set! N2b07@try-load-from-file (lambda (N2bf6@filename) ((N2b05@current-precompiled-library-loader) N2bf6@filename (lambda N2c1c (let ((N2c1d (length N2c1c))) (if (= N2c1d '11) (apply (lambda (N2bf8@id N2bf9@name N2bfa@ver N2bfb@imp* N2bfc@vis* N2bfd@inv* N2bfe@exp-subst N2bff@exp-env N2c00@visit-proc N2c01@invoke-proc N2c02@visible?) (let N2c10@f ((N2c0e@deps (append N2bfb@imp* N2bfc@vis* N2bfd@inv*))) (if (null? N2c0e@deps) (begin (N2b1b@install-library N2bf8@id N2bf9@name N2bfa@ver N2bfb@imp* N2bfc@vis* N2bfd@inv* N2bfe@exp-subst N2bff@exp-env N2c00@visit-proc N2c01@invoke-proc '#f '#f N2c02@visible? '#f) '#t) (let ((N2c12@d (car N2c0e@deps))) (let ((N2c14@label (car N2c12@d)) (N2c15@dname (cadr N2c12@d))) (let ((N2c18@l (N2b11@find-library-by-name N2c15@dname))) (if (and (N2abb@library? N2c18@l) (eq? N2c14@label (N2abd@library-id N2c18@l))) (N2c10@f (cdr N2c0e@deps)) (begin (if N29ff@N28d7@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" N2bf9@name N2c15@dname N2bf6@filename N2c18@l N2c14@label (N2abd@library-id N2c18@l)) (void)) '#f)))))))) N2c1c) (if (>= N2c1d '0) (apply (lambda N2c1a@others '#f) N2c1c) (error 'apply '"invalid arg count")))))))) (set! N2cc5@N2b07@try-load-from-file N2b07@try-load-from-file) (set! N2b09@library-loader (N2a05@N28e3@make-parameter (lambda (N2c1e@x) (let ((N2c20@file-name ((N2b01@file-locator) N2c1e@x))) (if (not N2c20@file-name) (assertion-violation '#f '"cannot file library" N2c1e@x) (or (N2b07@try-load-from-file N2c20@file-name) ((N2b0b@current-library-expander) (N2a04@N28e1@read-library-source-file N2c20@file-name) N2c20@file-name (lambda (N2c22@name) (if (not (fast-equal? N2c22@name N2c1e@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (N2c28@N2c25 N2c29@N2c27) (let ((N2c2c@e N2c29@N2c27) (N2c2d@p N2c28@N2c25)) (begin (display '"expected to find library " N2c2d@p) (write N2c1e@x N2c2d@p) (display '" in file " N2c2d@p) (display N2c20@file-name N2c2d@p) (display '", found " N2c2d@p) (write N2c22@name N2c2d@p) (display '" instead" N2c2d@p) (N2c2c@e)))))) (void)))))))) (lambda (N2c30@f) (if (procedure? N2c30@f) N2c30@f (assertion-violation 'library-locator '"not a procedure" N2c30@f))))) (set! N2cc6@N2b09@library-loader N2b09@library-loader) (set! N2b0b@current-library-expander (N2a05@N28e3@make-parameter (lambda (N2c32@x) (assertion-violation 'library-expander '"not initialized")) (lambda (N2c34@f) (if (procedure? N2c34@f) N2c34@f (assertion-violation 'library-expander '"not a procedure" N2c34@f))))) (set! N2cc7@N2b0b@current-library-expander N2b0b@current-library-expander) (set! N2b0d@external-pending-libraries (N2a05@N28e3@make-parameter '())) (set! N2cc8@N2b0d@external-pending-libraries N2b0d@external-pending-libraries) (set! N2b0f@find-external-library (lambda (N2c36@name) (begin (if (member N2c36@name (N2b0d@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" N2c36@name) (void)) (let ((N2c3c@N2c39 N2b0d@external-pending-libraries) (N2c3d@N2c3b (cons N2c36@name (N2b0d@external-pending-libraries)))) (let ((N2c40@swap (lambda () (let ((N2c42@t (N2c3c@N2c39))) (begin (N2c3c@N2c39 N2c3d@N2c3b) (set! N2c3d@N2c3b N2c42@t)))))) (dynamic-wind N2c40@swap (lambda () (begin ((N2b09@library-loader) N2c36@name) (or (N2af9@find-library-by (lambda (N2c44@x) (fast-equal? (N2ac1@library-name N2c44@x) N2c36@name))) (assertion-violation '#f '"handling external library did not yield the correct library" N2c36@name)))) N2c40@swap)))))) (set! N2cc9@N2b0f@find-external-library N2b0f@find-external-library) (set! N2b11@find-library-by-name (lambda (N2c46@name) (or (N2af9@find-library-by (lambda (N2c48@x) (fast-equal? (N2ac1@library-name N2c48@x) N2c46@name))) (N2b0f@find-external-library N2c46@name)))) (set! N2cca@N2b11@find-library-by-name N2b11@find-library-by-name) (set! N2b13@library-exists? (lambda (N2c4a@name) (and (N2af9@find-library-by (lambda (N2c4c@x) (fast-equal? (N2ac1@library-name N2c4c@x) N2c4a@name))) '#t))) (set! N2ccb@N2b13@library-exists? N2b13@library-exists?) (set! N2b15@find-library-by-spec/die (lambda (N2c4e@spec) (let ((N2c50@id (car N2c4e@spec))) (or (N2af9@find-library-by (lambda (N2c52@x) (eq? N2c50@id (N2abd@library-id N2c52@x)))) (assertion-violation '#f '"cannot find library with required spec" N2c4e@spec))))) (set! N2ccc@N2b15@find-library-by-spec/die N2b15@find-library-by-spec/die) (set! N2b17@label->binding-table (make-eq-hashtable)) (set! N2ccd@N2b17@label->binding-table N2b17@label->binding-table) (set! N2b19@install-library-record (lambda (N2c54@lib) (begin (let ((N2c56@exp-env (N2ad9@library-env N2c54@lib))) (for-each (lambda (N2c58@x) (let ((N2c5a@label (car N2c58@x)) (N2c5b@binding (cdr N2c58@x))) (let ((N2c5e@binding (let ((N2c60@t (car N2c5b@binding))) (if (memv N2c60@t '(global)) (cons 'global (cons N2c54@lib (cdr N2c5b@binding))) (if (memv N2c60@t '(global-macro)) (cons 'global-macro (cons N2c54@lib (cdr N2c5b@binding))) (if (memv N2c60@t '(global-macro!)) (cons 'global-macro! (cons N2c54@lib (cdr N2c5b@binding))) N2c5b@binding)))))) (begin (if (hashtable-ref N2b17@label->binding-table N2c5a@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" N2c5a@label (hashtable-ref N2b17@label->binding-table N2c5a@label '#f) N2c5e@binding) (exit)) (void)) (hashtable-set! N2b17@label->binding-table N2c5a@label N2c5e@binding))))) N2c56@exp-env)) ((N2aaf@current-library-collection) N2c54@lib)))) (set! N2cce@N2b19@install-library-record N2b19@install-library-record) (set! N2b1b@install-library (lambda (N2c62@id N2c63@name N2c64@ver N2c65@imp* N2c66@vis* N2c67@inv* N2c68@exp-subst N2c69@exp-env N2c6a@visit-proc N2c6b@invoke-proc N2c6c@visit-code N2c6d@invoke-code N2c6e@visible? N2c6f@source-file-name) (let ((N2c7e@imp-lib* (map N2b15@find-library-by-spec/die N2c65@imp*)) (N2c7f@vis-lib* (map N2b15@find-library-by-spec/die N2c66@vis*)) (N2c80@inv-lib* (map N2b15@find-library-by-spec/die N2c67@inv*))) (begin (if (not (and (symbol? N2c62@id) (list? N2c63@name) (list? N2c64@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" N2c62@id N2c63@name N2c64@ver) (void)) (if (N2b13@library-exists? N2c63@name) (assertion-violation 'install-library '"library is already installed" N2c63@name) (void)) (let ((N2c84@lib (make-simple-struct 'library '15 (list N2c62@id N2c63@name N2c64@ver N2c7e@imp-lib* N2c7f@vis-lib* N2c80@inv-lib* N2c68@exp-subst N2c69@exp-env N2c6a@visit-proc N2c6b@invoke-proc N2c6c@visit-code N2c6d@invoke-code N2c6e@visible? N2c6f@source-file-name)))) (N2b19@install-library-record N2c84@lib)))))) (set! N2ccf@N2b1b@install-library N2b1b@install-library) (set! N2b1d@imported-label->binding (lambda (N2c86@lab) (hashtable-ref N2b17@label->binding-table N2c86@lab '#f))) (set! N2cd0@N2b1d@imported-label->binding N2b1d@imported-label->binding) (set! N2b1f@invoke-library (lambda (N2c88@lib) (let ((N2c8a@invoke (N2ae1@library-invoke-state N2c88@lib))) (if (procedure? N2c8a@invoke) (begin (N2ae3@set-library-invoke-state! N2c88@lib (lambda () (assertion-violation 'invoke '"circularity detected" N2c88@lib))) (for-each N2b1f@invoke-library (N2ad1@library-inv* N2c88@lib)) (N2ae3@set-library-invoke-state! N2c88@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" N2c88@lib))) (N2c8a@invoke) (N2ae3@set-library-invoke-state! N2c88@lib '#t)) (void))))) (set! N2cd1@N2b1f@invoke-library N2b1f@invoke-library) (set! N2b21@visit-library (lambda (N2c8c@lib) (let ((N2c8e@visit (N2add@library-visit-state N2c8c@lib))) (if (procedure? N2c8e@visit) (begin (N2adf@set-library-visit-state! N2c8c@lib (lambda () (assertion-violation 'visit '"circularity detected" N2c8c@lib))) (for-each N2b1f@invoke-library (N2acd@library-vis* N2c8c@lib)) (N2adf@set-library-visit-state! N2c8c@lib (lambda () (assertion-violation 'invoke '"first visit did not return" N2c8c@lib))) (N2c8e@visit) (N2adf@set-library-visit-state! N2c8c@lib '#t)) (void))))) (set! N2cd2@N2b21@visit-library N2b21@visit-library) (set! N2b23@invoke-library-by-spec (lambda (N2c90@spec) (N2b1f@invoke-library (N2b15@find-library-by-spec/die N2c90@spec)))) (set! N2cd3@N2b23@invoke-library-by-spec N2b23@invoke-library-by-spec) (set! N2b25@installed-libraries (lambda N2c98 (let ((N2c99 (length N2c98))) (if (= N2c99 '1) (apply (lambda (N2c92@all?) (let N2c96@f ((N2c94@ls ((N2aaf@current-library-collection)))) (if (null? N2c94@ls) '() (if (or N2c92@all? (N2aed@library-visible? (car N2c94@ls))) (cons (car N2c94@ls) (N2c96@f (cdr N2c94@ls))) (N2c96@f (cdr N2c94@ls)))))) N2c98) (if (= N2c99 '0) (apply (lambda () (N2b25@installed-libraries '#f)) N2c98) (error 'apply '"invalid arg count")))))) (set! N2cd4@N2b25@installed-libraries N2b25@installed-libraries) (set! N2b27@library-spec (lambda (N2c9a@x) (begin (if (not (N2abb@library? N2c9a@x)) (assertion-violation 'library-spec '"not a library" N2c9a@x) (void)) (list (N2abd@library-id N2c9a@x) (N2ac1@library-name N2c9a@x) (N2ac5@library-version N2c9a@x))))) (set! N2cd5@N2b27@library-spec N2b27@library-spec) (void))
(begin (set! N2cd9@build-global-define (unspecified)) (set! N2d4a@build-lambda (unspecified)) (set! N2d4c@build-case-lambda (unspecified)) (set! N2d7a@build-sequence (unspecified)) (set! N2d7c@build-void (unspecified)) (set! N2d7e@build-letrec (unspecified)) (set! N2d80@build-let (unspecified)) (set! N2d82@build-named-let (unspecified)) (set! N2d84@build-letrec* (unspecified)) (set! N2d86@build-library-letrec* (unspecified)) (set! N2d88@build-receive (unspecified)) (set! N2cd9@build-global-define (lambda (N2d89@x) (N2d7c@build-void))) (set! N2e17@N2cd9@build-global-define N2cd9@build-global-define) (set! N2d4a@build-lambda (lambda (N2d8b@ae N2d8c@vars N2d8d@exp) (list 'lambda N2d8c@vars N2d8d@exp))) (set! N2e18@N2d4a@build-lambda N2d4a@build-lambda) (set! N2d4c@build-case-lambda (lambda (N2d91@ae N2d92@vars* N2d93@exp*) (letrec* ((N2d98@build-error (lambda (N2dcf@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (N2d9a@build-pred (lambda (N2db7@ae N2db8@n N2db9@vars) (call-with-values (lambda () (let N2dc5@f ((N2dc1@vars N2db9@vars) (N2dc2@count '0)) (if (pair? N2dc1@vars) (N2dc5@f (cdr N2dc1@vars) (+ N2dc2@count '1)) (if (null? N2dc1@vars) (values N2dc2@count '=) (values N2dc2@count '>=))))) (lambda (N2dc7@N2dbe N2dc8@N2dc0) (let ((N2dcb@pred N2dc8@N2dc0) (N2dcc@count N2dc7@N2dbe)) (list (list 'primitive N2dcb@pred) N2db8@n (list 'quote N2dcc@count))))))) (N2d9c@build-apply (lambda (N2daf@ae N2db0@g N2db1@vars N2db2@exp) (list '(primitive apply) (N2d4a@build-lambda N2daf@ae N2db1@vars N2db2@exp) N2db0@g))) (N2d9e@expand-case-lambda (lambda (N2d9f@ae N2da0@vars N2da1@exp*) (let ((N2da5@g (gensym)) (N2da6@n (gensym))) (list 'lambda N2da5@g (N2d80@build-let N2d9f@ae (list N2da6@n) (list (list '(primitive length) N2da5@g)) (let N2dad@f ((N2da9@vars* N2d92@vars*) (N2daa@exp* N2da1@exp*)) (if (null? N2da9@vars*) (N2d98@build-error N2d9f@ae) (list 'if (N2d9a@build-pred N2d9f@ae N2da6@n (car N2da9@vars*)) (N2d9c@build-apply N2d9f@ae N2da5@g (car N2da9@vars*) (car N2daa@exp*)) (N2dad@f (cdr N2da9@vars*) (cdr N2daa@exp*))))))))))) (if (= (length N2d93@exp*) '1) (N2d4a@build-lambda N2d91@ae (car N2d92@vars*) (car N2d93@exp*)) (N2d9e@expand-case-lambda N2d91@ae N2d92@vars* N2d93@exp*))))) (set! N2e19@N2d4c@build-case-lambda N2d4c@build-case-lambda) (set! N2d7a@build-sequence (lambda (N2dd1@ae N2dd2@exps) (let N2dd7@loop ((N2dd5@exps N2dd2@exps)) (if (null? (cdr N2dd5@exps)) (car N2dd5@exps) (if (equal? (car N2dd5@exps) (N2d7c@build-void)) (N2dd7@loop (cdr N2dd5@exps)) (cons 'begin N2dd5@exps)))))) (set! N2e1a@N2d7a@build-sequence N2d7a@build-sequence) (set! N2d7c@build-void (lambda () '((primitive void)))) (set! N2e1b@N2d7c@build-void N2d7c@build-void) (set! N2d7e@build-letrec (lambda (N2dd9@ae N2dda@vars N2ddb@val-exps N2ddc@body-exp) (if (null? N2dda@vars) N2ddc@body-exp (list 'letrec (map list N2dda@vars N2ddb@val-exps) N2ddc@body-exp)))) (set! N2e1c@N2d7e@build-letrec N2d7e@build-letrec) (set! N2d80@build-let (lambda (N2de1@ae N2de2@vars N2de3@val-exps N2de4@body-exp) (if (null? N2de2@vars) N2de4@body-exp (list 'let (map list N2de2@vars N2de3@val-exps) N2de4@body-exp)))) (set! N2e1d@N2d80@build-let N2d80@build-let) (set! N2d82@build-named-let (lambda (N2de9@ae N2dea@name N2deb@vars N2dec@val-exps N2ded@body-exp) (list 'let N2dea@name (map list N2deb@vars N2dec@val-exps) N2ded@body-exp))) (set! N2e1e@N2d82@build-named-let N2d82@build-named-let) (set! N2d84@build-letrec* (lambda (N2df3@ae N2df4@vars N2df5@val-exps N2df6@body-exp) (if (null? N2df4@vars) N2df6@body-exp (list 'letrec* (map list N2df4@vars N2df5@val-exps) N2df6@body-exp)))) (set! N2e1f@N2d84@build-letrec* N2d84@build-letrec*) (set! N2d86@build-library-letrec* (lambda (N2dfb@ae N2dfc@name N2dfd@vars N2dfe@locs N2dff@val-exps N2e00@body-exp) (cons 'begin (append (map (lambda (N2e07@var) (cons 'set! (cons N2e07@var '((unspecified))))) N2dfd@vars) (append (apply append (map (lambda (N2e09@var N2e0a@loc N2e0b@val-exp) (list (list 'set! N2e09@var N2e0b@val-exp) (list 'set! N2e0a@loc N2e09@var))) N2dfd@vars N2dfe@locs N2dff@val-exps)) (list N2e00@body-exp)))))) (set! N2e20@N2d86@build-library-letrec* N2d86@build-library-letrec*) (set! N2d88@build-receive (lambda (N2e0f@ae N2e10@vars N2e11@producer N2e12@body*) (begin (display '"************** in ") (cons 'receive (cons N2e10@vars (cons N2e11@producer N2e12@body*)))))) (set! N2e21@N2d88@build-receive N2d88@build-receive) (void))
(begin (set! N2e30@file-options-macro (unspecified)) (set! N2e32@set-cons (unspecified)) (set! N2e34@set-union (unspecified)) (set! N2e39@top-mark* (unspecified)) (set! N2e3b@top-marked? (unspecified)) (set! N2e3d@gen-lexical (unspecified)) (set! N2e3f@gen-global (unspecified)) (set! N2e41@gen-label (unspecified)) (set! N2e43@gen-top-level-label (unspecified)) (set! N2e45@gen-define-label+loc (unspecified)) (set! N2e47@gen-define-label (unspecified)) (set! N2e51@rib? (unspecified)) (set! N2e53@rib-sym* (unspecified)) (set! N2e55@set-rib-sym*! (unspecified)) (set! N2e57@rib-mark** (unspecified)) (set! N2e59@set-rib-mark**! (unspecified)) (set! N2e5b@rib-label* (unspecified)) (set! N2e5d@set-rib-label*! (unspecified)) (set! N2e5f@rib-sealed/freq (unspecified)) (set! N2e61@set-rib-sealed/freq! (unspecified)) (set! N2e63@rib-cache (unspecified)) (set! N2e65@set-rib-cache! (unspecified)) (set! N2e67@dummy (unspecified)) (set! N2e69@make-empty-rib (unspecified)) (set! N2e6b@extend-rib! (unspecified)) (set! N2e6d@extend-rib/nc! (unspecified)) (set! N2e6f@make-rib-map (unspecified)) (set! N2e71@seal-rib! (unspecified)) (set! N2e73@unseal-rib! (unspecified)) (set! N2e75@make-full-rib (unspecified)) (set! N2e77@rp (unspecified)) (set! N2e81@stx? (unspecified)) (set! N2e83@stx-expr (unspecified)) (set! N2e85@set-stx-expr! (unspecified)) (set! N2e87@stx-mark* (unspecified)) (set! N2e89@set-stx-mark*! (unspecified)) (set! N2e8b@stx-subst* (unspecified)) (set! N2e8d@set-stx-subst*! (unspecified)) (set! N2e8f@stx-ae* (unspecified)) (set! N2e91@set-stx-ae*! (unspecified)) (set! N2e93@dummy (unspecified)) (set! N2e95@datum->stx (unspecified)) (set! N2e97@gen-mark (unspecified)) (set! N2e99@anti-mark (unspecified)) (set! N2e9b@anti-mark? (unspecified)) (set! N2e9d@mkstx (unspecified)) (set! N2e9f@add-mark (unspecified)) (set! N2ea1@add-subst (unspecified)) (set! N2ea3@syntax-kind? (unspecified)) (set! N2ea5@syntax-vector->list (unspecified)) (set! N2ea7@syntax-pair? (unspecified)) (set! N2ea9@syntax-vector? (unspecified)) (set! N2eab@syntax-null? (unspecified)) (set! N2ead@syntax-list? (unspecified)) (set! N2eaf@syntax-car (unspecified)) (set! N2eb1@syntax-cdr (unspecified)) (set! N2eb3@syntax->list (unspecified)) (set! N2eb5@id? (unspecified)) (set! N2eb7@id->sym (unspecified)) (set! N2eb9@bound-id=? (unspecified)) (set! N2ebb@free-id=? (unspecified)) (set! N2ebd@valid-bound-ids? (unspecified)) (set! N2ebf@distinct-bound-ids? (unspecified)) (set! N2ec1@bound-id-member? (unspecified)) (set! N2ec3@self-evaluating? (unspecified)) (set! N2ec5@strip-annotations (unspecified)) (set! N2ec7@strip (unspecified)) (set! N2ec9@stx->datum (unspecified)) (set! N2ecb@id->label (unspecified)) (set! N2ecd@label->binding (unspecified)) (set! N2ecf@make-binding (unspecified)) (set! N2ed1@binding-type (unspecified)) (set! N2ed3@binding-value (unspecified)) (set! N2ed5@raise-unbound-error (unspecified)) (set! N2ed7@syntax-type (unspecified)) (set! N2ee5@sanitize-binding (unspecified)) (set! N2ee7@make-variable-transformer (unspecified)) (set! N2ee9@variable-transformer? (unspecified)) (set! N2eeb@variable-transformer-procedure (unspecified)) (set! N2eed@make-eval-transformer (unspecified)) (set! N303e@parse-define (unspecified)) (set! N3040@parse-define-syntax (unspecified)) (set! N3042@scheme-stx-hashtable (unspecified)) (set! N3044@scheme-stx (unspecified)) (set! N3046@lexical-var (unspecified)) (set! N3048@lexical-mutable? (unspecified)) (set! N304a@set-lexical-mutable! (unspecified)) (set! N304c@add-lexical (unspecified)) (set! N304e@add-lexicals (unspecified)) (set! N3050@letrec-helper (unspecified)) (set! N3052@let-transformer (unspecified)) (set! N3054@letrec-transformer (unspecified)) (set! N3056@letrec*-transformer (unspecified)) (set! N3058@fluid-let-syntax-transformer (unspecified)) (set! N305a@type-descriptor-transformer (unspecified)) (set! N305c@record-type-descriptor-transformer (unspecified)) (set! N305e@record-constructor-descriptor-transformer (unspecified)) (set! N3060@when-macro (unspecified)) (set! N3062@unless-macro (unspecified)) (set! N3064@if-transformer (unspecified)) (set! N3066@and-transformer (unspecified)) (set! N3068@or-transformer (unspecified)) (set! N306a@case-macro (unspecified)) (set! N306c@quote-transformer (unspecified)) (set! N306e@case-lambda-transformer (unspecified)) (set! N3070@lambda-transformer (unspecified)) (set! N3072@bless (unspecified)) (set! N3074@with-syntax-macro (unspecified)) (set! N3076@invalid-fmls-error (unspecified)) (set! N3078@let-macro (unspecified)) (set! N307a@let-values-macro (unspecified)) (set! N307c@let*-values-macro (unspecified)) (set! N307e@trace-lambda-macro (unspecified)) (set! N3080@trace-define-macro (unspecified)) (set! N3082@trace-define-syntax-macro (unspecified)) (set! N3084@trace-let/rec-syntax (unspecified)) (set! N3086@trace-let-syntax-macro (unspecified)) (set! N3088@trace-letrec-syntax-macro (unspecified)) (set! N308a@guard-macro (unspecified)) (set! N308c@define-enumeration-macro (unspecified)) (set! N308e@time-macro (unspecified)) (set! N3090@delay-macro (unspecified)) (set! N3092@assert-macro (unspecified)) (set! N3094@endianness-macro (unspecified)) (set! N3096@identifier-syntax-macro (unspecified)) (set! N3098@do-macro (unspecified)) (set! N309a@let*-macro (unspecified)) (set! N309c@or-macro (unspecified)) (set! N309e@and-macro (unspecified)) (set! N30a0@cond-macro (unspecified)) (set! N30a2@do-include (unspecified)) (set! N30a4@include-macro (unspecified)) (set! N30a6@include-into-macro (unspecified)) (set! N30a8@syntax-rules-macro (unspecified)) (set! N30aa@quasiquote-macro (unspecified)) (set! N30ac@quasisyntax-macro (unspecified)) (set! N30ae@define-struct-macro (unspecified)) (set! N30b0@define-record-type-macro (unspecified)) (set! N30b2@define-condition-type-macro (unspecified)) (set! N30b4@incorrect-usage-macro (unspecified)) (set! N30b6@parameterize-macro (unspecified)) (set! N30b8@foreign-call-transformer (unspecified)) (set! N30ba@convert-pattern (unspecified)) (set! N30bc@syntax-dispatch (unspecified)) (set! N30be@ellipsis? (unspecified)) (set! N30c0@underscore? (unspecified)) (set! N30c2@verify-literals (unspecified)) (set! N30c4@syntax-case-transformer (unspecified)) (set! N30c6@ellipsis-map (unspecified)) (set! N30c8@syntax-transformer (unspecified)) (set! N30ca@core-macro-transformer (unspecified)) (set! N30cc@symbol-macro (unspecified)) (set! N30ce@macro-transformer (unspecified)) (set! N30d0@local-macro-transformer (unspecified)) (set! N30d2@do-macro-call (unspecified)) (set! N30d4@chi-macro (unspecified)) (set! N30d6@chi-local-macro (unspecified)) (set! N30d8@chi-global-macro (unspecified)) (set! N30da@chi-expr* (unspecified)) (set! N30dc@chi-application (unspecified)) (set! N30de@chi-expr (unspecified)) (set! N30e0@chi-set! (unspecified)) (set! N30e2@verify-formals (unspecified)) (set! N30e4@chi-lambda-clause (unspecified)) (set! N30e6@chi-lambda-clause* (unspecified)) (set! N30e8@chi-defun (unspecified)) (set! N30ea@chi-rhs (unspecified)) (set! N30ec@expand-interaction-rhs*/init* (unspecified)) (set! N30ee@chi-rhs* (unspecified)) (set! N30f0@find-bound=? (unspecified)) (set! N30f2@find-dups (unspecified)) (set! N30f4@chi-internal (unspecified)) (set! N30f6@parse-module (unspecified)) (set! N3100@module-interface? (unspecified)) (set! N3102@module-interface-first-mark (unspecified)) (set! N3104@set-module-interface-first-mark! (unspecified)) (set! N3106@module-interface-exp-id-vec (unspecified)) (set! N3108@set-module-interface-exp-id-vec! (unspecified)) (set! N310a@module-interface-exp-lab-vec (unspecified)) (set! N310c@set-module-interface-exp-lab-vec! (unspecified)) (set! N310e@dummy (unspecified)) (set! N3110@module-interface-exp-id* (unspecified)) (set! N3112@chi-internal-module (unspecified)) (set! N3114@chi-body* (unspecified)) (set! N3116@expand-transformer (unspecified)) (set! N3118@parse-exports (unspecified)) (set! N311a@parse-library-name (unspecified)) (set! N311c@parse-library (unspecified)) (set! N311e@parse-import-spec* (unspecified)) (set! N3120@make-top-rib (unspecified)) (set! N3122@make-collector (unspecified)) (set! N3124@inv-collector (unspecified)) (set! N3126@vis-collector (unspecified)) (set! N3128@imp-collector (unspecified)) (set! N312a@chi-library-internal (unspecified)) (set! N312c@chi-interaction-expr (unspecified)) (set! N312e@library-body-expander (unspecified)) (set! N3130@core-library-expander (unspecified)) (set! N3132@parse-top-level-program (unspecified)) (set! N3134@top-level-expander (unspecified)) (set! N3136@rp (unspecified)) (set! N3140@env? (unspecified)) (set! N3142@env-names (unspecified)) (set! N3144@set-env-names! (unspecified)) (set! N3146@env-labels (unspecified)) (set! N3148@set-env-labels! (unspecified)) (set! N314a@env-itc (unspecified)) (set! N314c@set-env-itc! (unspecified)) (set! N314e@dummy (unspecified)) (set! N3150@rp (unspecified)) (set! N315a@interaction-env? (unspecified)) (set! N315c@interaction-env-rib (unspecified)) (set! N315e@set-interaction-env-rib! (unspecified)) (set! N3160@interaction-env-r (unspecified)) (set! N3162@set-interaction-env-r! (unspecified)) (set! N3164@interaction-env-locs (unspecified)) (set! N3166@set-interaction-env-locs! (unspecified)) (set! N3168@dummy (unspecified)) (set! N316a@interaction-environment-symbols (unspecified)) (set! N316c@environment-bindings (unspecified)) (set! N316e@parse-binding (unspecified)) (set! N3170@environment? (unspecified)) (set! N3172@environment-symbols (unspecified)) (set! N3174@environment (unspecified)) (set! N3176@null-environment (unspecified)) (set! N3178@scheme-report-environment (unspecified)) (set! N317a@expand (unspecified)) (set! N317c@eval (unspecified)) (set! N317e@library-expander (unspecified)) (set! N3180@boot-library-expand (unspecified)) (set! N3182@rev-map-append (unspecified)) (set! N3184@build-exports (unspecified)) (set! N3186@make-export-subst (unspecified)) (set! N3188@make-export-env/macros (unspecified)) (set! N318a@generate-temporaries (unspecified)) (set! N318c@free-identifier=? (unspecified)) (set! N318e@bound-identifier=? (unspecified)) (set! N3190@make-source-condition (unspecified)) (set! N3192@extract-position-condition (unspecified)) (set! N3194@expression-position (unspecified)) (set! N3196@assertion-error (unspecified)) (set! N3198@syntax-error (unspecified)) (set! N319a@syntax-violation* (unspecified)) (set! N319c@syntax-violation (unspecified)) (set! N319e@identifier? (unspecified)) (set! N31a0@datum->syntax (unspecified)) (set! N31a2@syntax->datum (unspecified)) (set! N31a4@ungensym-all (unspecified)) (set! N31a6@compile-r6rs-top-level (unspecified)) (set! N31a8@pre-compile-r6rs-top-level (unspecified)) (set! N31aa@interaction-environment (unspecified)) (set! N31ac@top-level-context (unspecified)) (set! N2e30@file-options-macro (lambda (N31ad@x) (letrec* ((N31b0@valid-option? (lambda (N31b9@x) (and (N2eb5@id? N31b9@x) (memq (N2eb7@id->sym N31b9@x) '(no-fail no-create no-truncate)))))) (let ((N31b1@t N31ad@x)) (let ((N31b3@ls/false (N30bc@syntax-dispatch N31b1@t '(_ . each-any)))) (if (and N31b3@ls/false (apply (lambda (N31b5@opt*) (for-all N31b0@valid-option? N31b5@opt*)) N31b3@ls/false)) (apply (lambda (N31b7@opt*) (N3072@bless (list 'make-file-options (list 'quote N31b7@opt*)))) N31b3@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N31b1@t))))))) (set! N4b03@N2e30@file-options-macro N2e30@file-options-macro) (set! N2e32@set-cons (lambda (N31bb@x N31bc@ls) (if (memq N31bb@x N31bc@ls) N31bc@ls (cons N31bb@x N31bc@ls)))) (set! N4b04@N2e32@set-cons N2e32@set-cons) (set! N2e34@set-union (lambda (N31bf@ls1 N31c0@ls2) (if (null? N31bf@ls1) N31c0@ls2 (if (memq (car N31bf@ls1) N31c0@ls2) (N2e34@set-union (cdr N31bf@ls1) N31c0@ls2) (cons (car N31bf@ls1) (N2e34@set-union (cdr N31bf@ls1) N31c0@ls2)))))) (set! N4b05@N2e34@set-union N2e34@set-union) (set! N2e39@top-mark* '(top)) (set! N4b06@N2e39@top-mark* N2e39@top-mark*) (set! N2e3b@top-marked? (lambda (N31c3@m*) (memq 'top N31c3@m*))) (set! N4b07@N2e3b@top-marked? N2e3b@top-marked?) (set! N2e3d@gen-lexical (lambda (N31c5@sym) (if (symbol? N31c5@sym) (gensym N31c5@sym) (if (N2e81@stx? N31c5@sym) (N2e3d@gen-lexical (N2eb7@id->sym N31c5@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" N31c5@sym))))) (set! N4b08@N2e3d@gen-lexical N2e3d@gen-lexical) (set! N2e3f@gen-global (lambda (N31c7@x) (N2e3d@gen-lexical N31c7@x))) (set! N4b09@N2e3f@gen-global N2e3f@gen-global) (set! N2e41@gen-label (lambda (N31c9@_) (gensym))) (set! N4b0a@N2e41@gen-label N2e41@gen-label) (set! N2e43@gen-top-level-label (lambda (N31cb@id N31cc@rib) (letrec* ((N31d0@find (lambda (N31db@sym N31dc@mark* N31dd@sym* N31de@mark** N31df@label*) (and (pair? N31dd@sym*) (if (and (eq? N31db@sym (car N31dd@sym*)) (same-marks? N31dc@mark* (car N31de@mark**))) (car N31df@label*) (N31d0@find N31db@sym N31dc@mark* (cdr N31dd@sym*) (cdr N31de@mark**) (cdr N31df@label*))))))) (let ((N31d1@sym (N2eb7@id->sym N31cb@id)) (N31d2@mark* (N2e87@stx-mark* N31cb@id))) (let ((N31d5@sym* (N2e53@rib-sym* N31cc@rib))) (let ((N31d7@t (and (memq N31d1@sym (N2e53@rib-sym* N31cc@rib)) (N31d0@find N31d1@sym N31d2@mark* N31d5@sym* (N2e57@rib-mark** N31cc@rib) (N2e5b@rib-label* N31cc@rib))))) (if N31d7@t ((lambda (N31d9@label) (if (N2cd0@N2b1d@imported-label->binding N31d9@label) (gensym) N31d9@label)) N31d7@t) (gensym)))))))) (set! N4b0b@N2e43@gen-top-level-label N2e43@gen-top-level-label) (set! N2e45@gen-define-label+loc (lambda (N31e5@id N31e6@rib) (let ((N31e9@t (N31ac@top-level-context))) (if N31e9@t ((lambda (N31eb@env) (let ((N31ed@label (N2e43@gen-top-level-label N31e5@id N31e6@rib)) (N31ee@locs (N3164@interaction-env-locs N31eb@env))) (values N31ed@label (let ((N31f1@t (assq N31ed@label N31ee@locs))) (if N31f1@t (cdr N31f1@t) (let ((N31f3@loc (N2e3d@gen-lexical N31e5@id))) (begin (N3166@set-interaction-env-locs! N31eb@env (cons (cons N31ed@label N31f3@loc) N31ee@locs)) N31f3@loc))))))) N31e9@t) (values (gensym) (N2e3d@gen-lexical N31e5@id)))))) (set! N4b0c@N2e45@gen-define-label+loc N2e45@gen-define-label+loc) (set! N2e47@gen-define-label (lambda (N31f5@id N31f6@rib) (if (N31ac@top-level-context) (N2e43@gen-top-level-label N31f5@id N31f6@rib) (gensym)))) (set! N4b0d@N2e47@gen-define-label N2e47@gen-define-label) (set! N2e51@rib? (lambda (N31f9@x) (and (simple-struct? N31f9@x) (eq? (simple-struct-name N31f9@x) 'rib)))) (set! N4b0e@N2e51@rib? N2e51@rib?) (set! N2e53@rib-sym* (lambda (N31fb@x) (simple-struct-ref N31fb@x '0))) (set! N4b0f@N2e53@rib-sym* N2e53@rib-sym*) (set! N2e55@set-rib-sym*! (lambda (N31fd@x N31fe@val) (simple-struct-set! N31fd@x '0 N31fe@val))) (set! N4b10@N2e55@set-rib-sym*! N2e55@set-rib-sym*!) (set! N2e57@rib-mark** (lambda (N3201@x) (simple-struct-ref N3201@x '1))) (set! N4b11@N2e57@rib-mark** N2e57@rib-mark**) (set! N2e59@set-rib-mark**! (lambda (N3203@x N3204@val) (simple-struct-set! N3203@x '1 N3204@val))) (set! N4b12@N2e59@set-rib-mark**! N2e59@set-rib-mark**!) (set! N2e5b@rib-label* (lambda (N3207@x) (simple-struct-ref N3207@x '2))) (set! N4b13@N2e5b@rib-label* N2e5b@rib-label*) (set! N2e5d@set-rib-label*! (lambda (N3209@x N320a@val) (simple-struct-set! N3209@x '2 N320a@val))) (set! N4b14@N2e5d@set-rib-label*! N2e5d@set-rib-label*!) (set! N2e5f@rib-sealed/freq (lambda (N320d@x) (simple-struct-ref N320d@x '3))) (set! N4b15@N2e5f@rib-sealed/freq N2e5f@rib-sealed/freq) (set! N2e61@set-rib-sealed/freq! (lambda (N320f@x N3210@val) (simple-struct-set! N320f@x '3 N3210@val))) (set! N4b16@N2e61@set-rib-sealed/freq! N2e61@set-rib-sealed/freq!) (set! N2e63@rib-cache (lambda (N3213@x) (simple-struct-ref N3213@x '4))) (set! N4b17@N2e63@rib-cache N2e63@rib-cache) (set! N2e65@set-rib-cache! (lambda (N3215@x N3216@val) (simple-struct-set! N3215@x '4 N3216@val))) (set! N4b18@N2e65@set-rib-cache! N2e65@set-rib-cache!) (set! N2e67@dummy '3) (set! N4b19@N2e67@dummy N2e67@dummy) (set! N2e69@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! N4b1a@N2e69@make-empty-rib N2e69@make-empty-rib) (set! N2e6b@extend-rib! (lambda (N3219@rib N321a@id N321b@label) (letrec* ((N3220@find (lambda (N322d@sym N322e@mark* N322f@sym* N3230@mark** N3231@label*) (and (pair? N322f@sym*) (if (and (eq? N322d@sym (car N322f@sym*)) (same-marks? N322e@mark* (car N3230@mark**))) N3231@label* (N3220@find N322d@sym N322e@mark* (cdr N322f@sym*) (cdr N3230@mark**) (cdr N3231@label*))))))) (begin (if (N2e5f@rib-sealed/freq N3219@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" N3219@rib) (void)) (let ((N3221@sym (N2eb7@id->sym N321a@id)) (N3222@mark* (N2e87@stx-mark* N321a@id))) (let ((N3225@sym* (N2e53@rib-sym* N3219@rib))) (let ((N3227@t (and (memq N3221@sym (N2e53@rib-sym* N3219@rib)) (N3220@find N3221@sym N3222@mark* N3225@sym* (N2e57@rib-mark** N3219@rib) (N2e5b@rib-label* N3219@rib))))) (if N3227@t ((lambda (N3229@p) (if (not (eq? N321b@label (car N3229@p))) (if (N31ac@top-level-context) (set-car! N3229@p N321b@label) (N319c@syntax-violation '#f '"multiple definitions of identifier" N321a@id)) (void))) N3227@t) (begin (if (N2e63@rib-cache N3219@rib) (hashtable-update! (N2e63@rib-cache N3219@rib) N3221@sym (lambda (N322b@e) (cons (cons N3222@mark* N321b@label) N322b@e)) '()) (void)) (N2e55@set-rib-sym*! N3219@rib (cons N3221@sym N3225@sym*)) (N2e59@set-rib-mark**! N3219@rib (cons N3222@mark* (N2e57@rib-mark** N3219@rib))) (N2e5d@set-rib-label*! N3219@rib (cons N321b@label (N2e5b@rib-label* N3219@rib)))))))))))) (set! N4b1b@N2e6b@extend-rib! N2e6b@extend-rib!) (set! N2e6d@extend-rib/nc! (lambda (N3237@rib N3238@id N3239@label) (let ((N323d@sym (N2eb7@id->sym N3238@id)) (N323e@mark* (N2e87@stx-mark* N3238@id))) (let ((N3241@sym* (N2e53@rib-sym* N3237@rib))) (begin (if (N2e63@rib-cache N3237@rib) (hashtable-update! (N2e63@rib-cache N3237@rib) N323d@sym (lambda (N3243@e) (cons (cons N323e@mark* N3239@label) N3243@e)) '()) (void)) (N2e55@set-rib-sym*! N3237@rib (cons N323d@sym N3241@sym*)) (N2e59@set-rib-mark**! N3237@rib (cons N323e@mark* (N2e57@rib-mark** N3237@rib))) (N2e5d@set-rib-label*! N3237@rib (cons N3239@label (N2e5b@rib-label* N3237@rib)))))))) (set! N4b1c@N2e6d@extend-rib/nc! N2e6d@extend-rib/nc!) (set! N2e6f@make-rib-map (lambda (N3245@sym*) (let ((N3247@ht (make-eq-hashtable))) (let N324d@f ((N3249@i '0) (N324a@sym* N3245@sym*)) (if (null? N324a@sym*) N3247@ht (begin (hashtable-update! N3247@ht (car N324a@sym*) (lambda (N324f@x) (cons N3249@i N324f@x)) '()) (N324d@f (+ N3249@i '1) (cdr N324a@sym*)))))))) (set! N4b1d@N2e6f@make-rib-map N2e6f@make-rib-map) (set! N2e71@seal-rib! (lambda (N3251@rib) (let ((N3253@sym* (N2e53@rib-sym* N3251@rib))) (if (not (null? N3253@sym*)) (begin (N2e55@set-rib-sym*! N3251@rib (list->vector N3253@sym*)) (N2e59@set-rib-mark**! N3251@rib (list->vector (N2e57@rib-mark** N3251@rib))) (N2e5d@set-rib-label*! N3251@rib (list->vector (N2e5b@rib-label* N3251@rib))) (N2e61@set-rib-sealed/freq! N3251@rib (N2e6f@make-rib-map N3253@sym*))) (void))))) (set! N4b1e@N2e71@seal-rib! N2e71@seal-rib!) (set! N2e73@unseal-rib! (lambda (N3255@rib) (if (N2e5f@rib-sealed/freq N3255@rib) (begin (N2e61@set-rib-sealed/freq! N3255@rib '#f) (N2e55@set-rib-sym*! N3255@rib (vector->list (N2e53@rib-sym* N3255@rib))) (N2e59@set-rib-mark**! N3255@rib (vector->list (N2e57@rib-mark** N3255@rib))) (N2e5d@set-rib-label*! N3255@rib (vector->list (N2e5b@rib-label* N3255@rib)))) (void)))) (set! N4b1f@N2e73@unseal-rib! N2e73@unseal-rib!) (set! N2e75@make-full-rib (lambda (N3257@id* N3258@label*) (let ((N325b@r (make-simple-struct 'rib '6 (list (map N2eb7@id->sym N3257@id*) (map N2e87@stx-mark* N3257@id*) N3258@label* '#f '#f)))) (begin (N2e71@seal-rib! N325b@r) N325b@r)))) (set! N4b20@N2e75@make-full-rib N2e75@make-full-rib) (set! N2e77@rp (N2a02@N28dd@make-record-printer 'stx (lambda (N325d@x N325e@p N325f@wr) (begin (display '"#<syntax " N325e@p) (write (N2ec9@stx->datum N325d@x) N325e@p) (let ((N3263@expr (N2e83@stx-expr N325d@x))) (if (N29f9@N28cb@annotation? N3263@expr) (let ((N3265@src (N29fa@N28cd@annotation-source N3263@expr))) (if (pair? N3265@src) (begin (display '" [" N325e@p) (display (cdr N3265@src) N325e@p) (display '" of " N325e@p) (display (car N3265@src) N325e@p) (display '"]" N325e@p)) (void))) (void))) (display '">" N325e@p))))) (set! N4b21@N2e77@rp N2e77@rp) (set! N2e81@stx? (lambda (N3267@x) (and (simple-struct? N3267@x) (eq? (simple-struct-name N3267@x) 'stx)))) (set! N4b22@N2e81@stx? N2e81@stx?) (set! N2e83@stx-expr (lambda (N3269@x) (simple-struct-ref N3269@x '0))) (set! N4b23@N2e83@stx-expr N2e83@stx-expr) (set! N2e85@set-stx-expr! (lambda (N326b@x N326c@val) (simple-struct-set! N326b@x '0 N326c@val))) (set! N4b24@N2e85@set-stx-expr! N2e85@set-stx-expr!) (set! N2e87@stx-mark* (lambda (N326f@x) (simple-struct-ref N326f@x '1))) (set! N4b25@N2e87@stx-mark* N2e87@stx-mark*) (set! N2e89@set-stx-mark*! (lambda (N3271@x N3272@val) (simple-struct-set! N3271@x '1 N3272@val))) (set! N4b26@N2e89@set-stx-mark*! N2e89@set-stx-mark*!) (set! N2e8b@stx-subst* (lambda (N3275@x) (simple-struct-ref N3275@x '2))) (set! N4b27@N2e8b@stx-subst* N2e8b@stx-subst*) (set! N2e8d@set-stx-subst*! (lambda (N3277@x N3278@val) (simple-struct-set! N3277@x '2 N3278@val))) (set! N4b28@N2e8d@set-stx-subst*! N2e8d@set-stx-subst*!) (set! N2e8f@stx-ae* (lambda (N327b@x) (simple-struct-ref N327b@x '3))) (set! N4b29@N2e8f@stx-ae* N2e8f@stx-ae*) (set! N2e91@set-stx-ae*! (lambda (N327d@x N327e@val) (simple-struct-set! N327d@x '3 N327e@val))) (set! N4b2a@N2e91@set-stx-ae*! N2e91@set-stx-ae*!) (set! N2e93@dummy '3) (set! N4b2b@N2e93@dummy N2e93@dummy) (set! N2e95@datum->stx (lambda (N3281@id N3282@datum) (make-simple-struct 'stx '5 (list N3282@datum (N2e87@stx-mark* N3281@id) (N2e8b@stx-subst* N3281@id) (N2e8f@stx-ae* N3281@id))))) (set! N4b2c@N2e95@datum->stx N2e95@datum->stx) (set! N2e97@gen-mark (lambda () (string '#\m))) (set! N4b2d@N2e97@gen-mark N2e97@gen-mark) (set! N2e99@anti-mark '#f) (set! N4b2e@N2e99@anti-mark N2e99@anti-mark) (set! N2e9b@anti-mark? not) (set! N4b2f@N2e9b@anti-mark? N2e9b@anti-mark?) (set! N2e9d@mkstx (lambda (N3285@e N3286@m* N3287@s* N3288@ae*) (if (and (N2e81@stx? N3285@e) (not (N2e3b@top-marked? N3286@m*))) (call-with-values (lambda () (join-wraps N3286@m* N3287@s* N3288@ae* N3285@e)) (lambda (N3293@N328e N3294@N3290 N3295@N3292) (let ((N3299@ae* N3295@N3292) (N329a@s* N3294@N3290) (N329b@m* N3293@N328e)) (make-simple-struct 'stx '5 (list (N2e83@stx-expr N3285@e) N329b@m* N329a@s* N3299@ae*))))) (make-simple-struct 'stx '5 (list N3285@e N3286@m* N3287@s* N3288@ae*))))) (set! N4b30@N2e9d@mkstx N2e9d@mkstx) (set! N2e9f@add-mark (lambda (N329f@m N32a0@e N32a1@ae) (N2e9d@mkstx N32a0@e (list N329f@m) '(shift) (list N32a1@ae)))) (set! N4b31@N2e9f@add-mark N2e9f@add-mark) (set! N2ea1@add-subst (lambda (N32a5@subst N32a6@e) (N2e9d@mkstx N32a6@e '() (list N32a5@subst) '()))) (set! N4b32@N2ea1@add-subst N2ea1@add-subst) (set! N2ea3@syntax-kind? (lambda (N32a9@x N32aa@p?) (if (N2e81@stx? N32a9@x) (N2ea3@syntax-kind? (N2e83@stx-expr N32a9@x) N32aa@p?) (if (N29f9@N28cb@annotation? N32a9@x) (N2ea3@syntax-kind? (N29fb@N28cf@annotation-expression N32a9@x) N32aa@p?) (N32aa@p? N32a9@x))))) (set! N4b33@N2ea3@syntax-kind? N2ea3@syntax-kind?) (set! N2ea5@syntax-vector->list (lambda (N32ad@x) (if (N2e81@stx? N32ad@x) (let ((N32af@ls (N2ea5@syntax-vector->list (N2e83@stx-expr N32ad@x))) (N32b0@m* (N2e87@stx-mark* N32ad@x)) (N32b1@s* (N2e8b@stx-subst* N32ad@x)) (N32b2@ae* (N2e8f@stx-ae* N32ad@x))) (map (lambda (N32b7@x) (N2e9d@mkstx N32b7@x N32b0@m* N32b1@s* N32b2@ae*)) N32af@ls)) (if (N29f9@N28cb@annotation? N32ad@x) (N2ea5@syntax-vector->list (N29fb@N28cf@annotation-expression N32ad@x)) (if (vector? N32ad@x) (vector->list N32ad@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" N32ad@x)))))) (set! N4b34@N2ea5@syntax-vector->list N2ea5@syntax-vector->list) (set! N2ea7@syntax-pair? (lambda (N32b9@x) (N2ea3@syntax-kind? N32b9@x pair?))) (set! N4b35@N2ea7@syntax-pair? N2ea7@syntax-pair?) (set! N2ea9@syntax-vector? (lambda (N32bb@x) (N2ea3@syntax-kind? N32bb@x vector?))) (set! N4b36@N2ea9@syntax-vector? N2ea9@syntax-vector?) (set! N2eab@syntax-null? (lambda (N32bd@x) (N2ea3@syntax-kind? N32bd@x null?))) (set! N4b37@N2eab@syntax-null? N2eab@syntax-null?) (set! N2ead@syntax-list? (lambda (N32bf@x) (or (N2eab@syntax-null? N32bf@x) (and (N2ea7@syntax-pair? N32bf@x) (N2ead@syntax-list? (N2eb1@syntax-cdr N32bf@x)))))) (set! N4b38@N2ead@syntax-list? N2ead@syntax-list?) (set! N2eaf@syntax-car (lambda (N32c1@x) (if (N2e81@stx? N32c1@x) (N2e9d@mkstx (N2eaf@syntax-car (N2e83@stx-expr N32c1@x)) (N2e87@stx-mark* N32c1@x) (N2e8b@stx-subst* N32c1@x) (N2e8f@stx-ae* N32c1@x)) (if (N29f9@N28cb@annotation? N32c1@x) (N2eaf@syntax-car (N29fb@N28cf@annotation-expression N32c1@x)) (if (pair? N32c1@x) (car N32c1@x) (assertion-violation 'syntax-car '"BUG: not a pair" N32c1@x)))))) (set! N4b39@N2eaf@syntax-car N2eaf@syntax-car) (set! N2eb1@syntax-cdr (lambda (N32c3@x) (if (N2e81@stx? N32c3@x) (N2e9d@mkstx (N2eb1@syntax-cdr (N2e83@stx-expr N32c3@x)) (N2e87@stx-mark* N32c3@x) (N2e8b@stx-subst* N32c3@x) (N2e8f@stx-ae* N32c3@x)) (if (N29f9@N28cb@annotation? N32c3@x) (N2eb1@syntax-cdr (N29fb@N28cf@annotation-expression N32c3@x)) (if (pair? N32c3@x) (cdr N32c3@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" N32c3@x)))))) (set! N4b3a@N2eb1@syntax-cdr N2eb1@syntax-cdr) (set! N2eb3@syntax->list (lambda (N32c5@x) (if (N2ea7@syntax-pair? N32c5@x) (cons (N2eaf@syntax-car N32c5@x) (N2eb3@syntax->list (N2eb1@syntax-cdr N32c5@x))) (if (N2eab@syntax-null? N32c5@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" N32c5@x))))) (set! N4b3b@N2eb3@syntax->list N2eb3@syntax->list) (set! N2eb5@id? (lambda (N32c7@x) (and (N2e81@stx? N32c7@x) (symbol? (N2e83@stx-expr N32c7@x))))) (set! N4b3c@N2eb5@id? N2eb5@id?) (set! N2eb7@id->sym (lambda (N32c9@x) (N2e83@stx-expr N32c9@x))) (set! N4b3d@N2eb7@id->sym N2eb7@id->sym) (set! N2eb9@bound-id=? (lambda (N32cb@x N32cc@y) (and (eq? (N2eb7@id->sym N32cb@x) (N2eb7@id->sym N32cc@y)) (same-marks? (N2e87@stx-mark* N32cb@x) (N2e87@stx-mark* N32cc@y))))) (set! N4b3e@N2eb9@bound-id=? N2eb9@bound-id=?) (set! N2ebb@free-id=? (lambda (N32cf@i N32d0@j) (let ((N32d3@t0 (id->real-label N32cf@i)) (N32d4@t1 (id->real-label N32d0@j))) (if (or N32d3@t0 N32d4@t1) (eq? N32d3@t0 N32d4@t1) (eq? (N2eb7@id->sym N32cf@i) (N2eb7@id->sym N32d0@j)))))) (set! N4b3f@N2ebb@free-id=? N2ebb@free-id=?) (set! N2ebd@valid-bound-ids? (lambda (N32d7@id*) (and (for-all N2eb5@id? N32d7@id*) (N2ebf@distinct-bound-ids? N32d7@id*)))) (set! N4b40@N2ebd@valid-bound-ids? N2ebd@valid-bound-ids?) (set! N2ebf@distinct-bound-ids? (lambda (N32d9@id*) (or (null? N32d9@id*) (and (not (N2ec1@bound-id-member? (car N32d9@id*) (cdr N32d9@id*))) (N2ebf@distinct-bound-ids? (cdr N32d9@id*)))))) (set! N4b41@N2ebf@distinct-bound-ids? N2ebf@distinct-bound-ids?) (set! N2ec1@bound-id-member? (lambda (N32db@id N32dc@id*) (and (pair? N32dc@id*) (or (N2eb9@bound-id=? N32db@id (car N32dc@id*)) (N2ec1@bound-id-member? N32db@id (cdr N32dc@id*)))))) (set! N4b42@N2ec1@bound-id-member? N2ec1@bound-id-member?) (set! N2ec3@self-evaluating? (lambda (N32df@x) (or (number? N32df@x) (string? N32df@x) (char? N32df@x) (boolean? N32df@x) (regexp? N32df@x) (bytevector? N32df@x)))) (set! N4b43@N2ec3@self-evaluating? N2ec3@self-evaluating?) (set! N2ec5@strip-annotations (lambda (N32e1@x) (if (pair? N32e1@x) (cons (N2ec5@strip-annotations (car N32e1@x)) (N2ec5@strip-annotations (cdr N32e1@x))) (if (vector? N32e1@x) (vector-map N2ec5@strip-annotations N32e1@x) (if (N29f9@N28cb@annotation? N32e1@x) (N29f8@N28c9@annotation-stripped N32e1@x) N32e1@x))))) (set! N4b44@N2ec5@strip-annotations N2ec5@strip-annotations) (set! N2ec7@strip (lambda (N32e3@x N32e4@m*) (if (N2e3b@top-marked? N32e4@m*) (if (or (N29f9@N28cb@annotation? N32e3@x) (and (pair? N32e3@x) (N29f9@N28cb@annotation? (car N32e3@x))) (and (vector? N32e3@x) (> (vector-length N32e3@x) '0) (N29f9@N28cb@annotation? (vector-ref N32e3@x '0)))) (N2ec5@strip-annotations N32e3@x) N32e3@x) (let N32e9@f ((N32e7@x N32e3@x)) (if (N2e81@stx? N32e7@x) (begin (if (pair? (N2e83@stx-expr N32e7@x)) (begin (set-source-info! (N2e83@stx-expr N32e7@x) '#f) (set-source-info! (cdr (N2e83@stx-expr N32e7@x)) '#f) (set-source-info! (car (N2e83@stx-expr N32e7@x)) '#f)) (void)) (N2ec7@strip (N2e83@stx-expr N32e7@x) (N2e87@stx-mark* N32e7@x))) (if (N29f9@N28cb@annotation? N32e7@x) (N29f8@N28c9@annotation-stripped N32e7@x) (if (pair? N32e7@x) (let ((N32eb@a (N32e9@f (car N32e7@x))) (N32ec@d (N32e9@f (cdr N32e7@x)))) (if (and (eq? N32eb@a (car N32e7@x)) (eq? N32ec@d (cdr N32e7@x))) N32e7@x (cons N32eb@a N32ec@d))) (if (vector? N32e7@x) (let ((N32ef@old (vector->list N32e7@x))) (let ((N32f1@new (map N32e9@f N32ef@old))) (if (for-all eq? N32ef@old N32f1@new) N32e7@x (list->vector N32f1@new)))) N32e7@x)))))))) (set! N4b45@N2ec7@strip N2ec7@strip) (set! N2ec9@stx->datum (lambda (N32f3@x) (N2ec7@strip N32f3@x '()))) (set! N4b46@N2ec9@stx->datum N2ec9@stx->datum) (set! N2ecb@id->label (lambda (N32f5@id) (or (id->real-label N32f5@id) (let ((N32f7@t (N31ac@top-level-context))) (if N32f7@t ((lambda (N32f9@env) (let ((N32fb@rib (N315c@interaction-env-rib N32f9@env))) (call-with-values (lambda () (N2e45@gen-define-label+loc N32f5@id N32fb@rib)) (lambda (N3301@N32fe N3302@N3300) (let ((N3305@loc_ N3302@N3300) (N3306@lab N3301@N32fe)) (begin (N2e6b@extend-rib! N32fb@rib N32f5@id N3306@lab) N3306@lab)))))) N32f7@t) '#f))))) (set! N4b47@N2ecb@id->label N2ecb@id->label) (set! N2ecd@label->binding (lambda (N3309@x N330a@r) (let ((N330d@t (N2cd0@N2b1d@imported-label->binding N3309@x))) (if N330d@t ((lambda (N330f@b) (if (and (pair? N330f@b) (eq? (car N330f@b) '$core-rtd)) (cons '$rtd (map N3072@bless (cdr N330f@b))) (if (and (pair? N330f@b) (eq? (car N330f@b) 'global-rtd)) (let ((N3311@lib (cadr N330f@b)) (N3312@loc (cddr N330f@b))) (cons '$rtd (symbol-value N3312@loc))) N330f@b))) N330d@t) (let ((N3315@t (assq N3309@x N330a@r))) (if N3315@t (cdr N3315@t) (let ((N3317@t (N31ac@top-level-context))) (if N3317@t ((lambda (N3319@env) (let ((N331b@t (assq N3309@x (N3164@interaction-env-locs N3319@env)))) (if N331b@t ((lambda (N331d@p) (cons* 'lexical (cdr N331d@p) '#f)) N331b@t) '(displaced-lexical . #f)))) N3317@t) '(displaced-lexical . #f))))))))) (set! N4b48@N2ecd@label->binding N2ecd@label->binding) (set! N2ecf@make-binding cons) (set! N4b49@N2ecf@make-binding N2ecf@make-binding) (set! N2ed1@binding-type car) (set! N4b4a@N2ed1@binding-type N2ed1@binding-type) (set! N2ed3@binding-value cdr) (set! N4b4b@N2ed3@binding-value N2ed3@binding-value) (set! N2ed5@raise-unbound-error (lambda (N331f@id) (N319a@syntax-violation* '#f '"unbound identifier" N331f@id (make-undefined-violation)))) (set! N4b4c@N2ed5@raise-unbound-error N2ed5@raise-unbound-error) (set! N2ed7@syntax-type (lambda (N3321@e N3322@r) (if (N2eb5@id? N3321@e) (let ((N3325@id N3321@e)) (let ((N3327@label (N2ecb@id->label N3325@id))) (let ((N3329@b (N2ecd@label->binding N3327@label N3322@r))) (let ((N332b@type (N2ed1@binding-type N3329@b))) (begin (if (not N3327@label) (N2ed5@raise-unbound-error N3325@id) (void)) (let ((N332d@t N332b@type)) (if (memv N332d@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values N332b@type (N2ed3@binding-value N3329@b) N3325@id) (values 'other '#f '#f)))))))) (if (N2ea7@syntax-pair? N3321@e) (let ((N332f@id (N2eaf@syntax-car N3321@e))) (if (N2eb5@id? N332f@id) (let ((N3331@label (N2ecb@id->label N332f@id))) (let ((N3333@b (N2ecd@label->binding N3331@label N3322@r))) (let ((N3335@type (N2ed1@binding-type N3333@b))) (begin (if (not N3331@label) (N2ed5@raise-unbound-error N332f@id) (void)) (let ((N3337@t N3335@type)) (if (memv N3337@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values N3335@type (N2ed3@binding-value N3333@b) N332f@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((N3339@d (N2ec9@stx->datum N3321@e))) (if (N2ec3@self-evaluating? N3339@d) (values 'constant N3339@d '#f) (values 'other '#f '#f))))))) (set! N4b4d@N2ed7@syntax-type N2ed7@syntax-type) (set! N2ee5@sanitize-binding (lambda (N333b@x N333c@src) (if (procedure? N333b@x) (cons* 'local-macro N333b@x N333c@src) (if (and (pair? N333b@x) (eq? (car N333b@x) 'macro!) (procedure? (cdr N333b@x))) (cons* 'local-macro! (cdr N333b@x) N333c@src) (if (and (pair? N333b@x) (eq? (car N333b@x) '$rtd)) N333b@x (assertion-violation 'expand '"invalid transformer" N333b@x)))))) (set! N4b4e@N2ee5@sanitize-binding N2ee5@sanitize-binding) (set! N2ee7@make-variable-transformer (lambda (N333f@x) (if (procedure? N333f@x) (cons 'macro! N333f@x) (assertion-violation 'make-variable-transformer '"not a procedure" N333f@x)))) (set! N4b4f@N2ee7@make-variable-transformer N2ee7@make-variable-transformer) (set! N2ee9@variable-transformer? (lambda (N3341@x) (and (pair? N3341@x) (eq? (car N3341@x) 'macro!) (procedure? (cdr N3341@x))))) (set! N4b50@N2ee9@variable-transformer? N2ee9@variable-transformer?) (set! N2eeb@variable-transformer-procedure (lambda (N3343@x) (if (N2ee9@variable-transformer? N3343@x) (cdr N3343@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" N3343@x)))) (set! N4b51@N2eeb@variable-transformer-procedure N2eeb@variable-transformer-procedure) (set! N2eed@make-eval-transformer (lambda (N3345@x) (N2ee5@sanitize-binding (eval-core (N2a5b@N2a13@expanded->core N3345@x)) N3345@x))) (set! N4b52@N2eed@make-eval-transformer N2eed@make-eval-transformer) (set! N303e@parse-define (lambda (N3347@x) (let ((N3349@t N3347@x)) (let ((N334b@ls/false (N30bc@syntax-dispatch N3349@t '(_ (any . any) any . each-any)))) (if (and N334b@ls/false (apply (lambda (N334d@id N334e@fmls N334f@b N3350@b*) (N2eb5@id? N334d@id)) N334b@ls/false)) (apply (lambda (N3355@id N3356@fmls N3357@b N3358@b*) (begin (N30e2@verify-formals N3356@fmls N3347@x) (values N3355@id (cons 'defun (cons N3356@fmls (cons N3357@b N3358@b*)))))) N334b@ls/false) (let ((N335d@t N3349@t)) (let ((N335f@ls/false (N30bc@syntax-dispatch N335d@t '(_ any any)))) (if (and N335f@ls/false (apply (lambda (N3361@id N3362@val) (N2eb5@id? N3361@id)) N335f@ls/false)) (apply (lambda (N3365@id N3366@val) (values N3365@id (cons 'expr N3366@val))) N335f@ls/false) (let ((N3369@t N335d@t)) (let ((N336b@ls/false (N30bc@syntax-dispatch N3369@t '(_ any)))) (if (and N336b@ls/false (apply (lambda (N336d@id) (N2eb5@id? N336d@id)) N336b@ls/false)) (apply (lambda (N336f@id) (values N336f@id (cons 'expr (N3072@bless '(void))))) N336b@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3369@t)))))))))))) (set! N4b53@N303e@parse-define N303e@parse-define) (set! N3040@parse-define-syntax (lambda (N3371@x) (let ((N3373@t N3371@x)) (let ((N3375@ls/false (N30bc@syntax-dispatch N3373@t '(_ any any)))) (if (and N3375@ls/false (apply (lambda (N3377@id N3378@val) (N2eb5@id? N3377@id)) N3375@ls/false)) (apply (lambda (N337b@id N337c@val) (values N337b@id N337c@val)) N3375@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3373@t)))))) (set! N4b54@N3040@parse-define-syntax N3040@parse-define-syntax) (set! N3042@scheme-stx-hashtable (make-eq-hashtable)) (set! N4b55@N3042@scheme-stx-hashtable N3042@scheme-stx-hashtable) (set! N3044@scheme-stx (lambda (N337f@sym) (or (hashtable-ref N3042@scheme-stx-hashtable N337f@sym '#f) (let ((N3381@subst (N2cac@N2ad5@library-subst (N2cca@N2b11@find-library-by-name '(psyntax system $all))))) (let ((N3383@stx (make-simple-struct 'stx '5 (list N337f@sym N2e39@top-mark* '() '())))) (let ((N3385@stx (let ((N3387@t (assq N337f@sym N3381@subst))) (if N3387@t ((lambda (N3389@x) (let ((N338b@name (car N3389@x)) (N338c@label (cdr N3389@x))) (N2ea1@add-subst (make-simple-struct 'rib '6 (list (list N338b@name) (list N2e39@top-mark*) (list N338c@label) '#f '#f)) N3383@stx))) N3387@t) N3383@stx)))) (begin (hashtable-set! N3042@scheme-stx-hashtable N337f@sym N3385@stx) N3385@stx))))))) (set! N4b56@N3044@scheme-stx N3044@scheme-stx) (set! N3046@lexical-var car) (set! N4b57@N3046@lexical-var N3046@lexical-var) (set! N3048@lexical-mutable? cdr) (set! N4b58@N3048@lexical-mutable? N3048@lexical-mutable?) (set! N304a@set-lexical-mutable! set-cdr!) (set! N4b59@N304a@set-lexical-mutable! N304a@set-lexical-mutable!) (set! N304c@add-lexical (lambda (N338f@lab N3390@lex N3391@r) (cons (cons* N338f@lab 'lexical N3390@lex '#f) N3391@r))) (set! N4b5a@N304c@add-lexical N304c@add-lexical) (set! N304e@add-lexicals (lambda (N3395@lab* N3396@lex* N3397@r) (if (null? N3395@lab*) N3397@r (N304e@add-lexicals (cdr N3395@lab*) (cdr N3396@lex*) (N304c@add-lexical (car N3395@lab*) (car N3396@lex*) N3397@r))))) (set! N4b5b@N304e@add-lexicals N304e@add-lexicals) (set! N3050@letrec-helper (lambda (N339b@e N339c@r N339d@mr N339e@build) (let ((N33a3@t N339b@e)) (let ((N33a5@ls/false (N30bc@syntax-dispatch N33a3@t '(_ #(each (any any)) any . each-any)))) (if N33a5@ls/false (apply (lambda (N33a7@lhs* N33a8@rhs* N33a9@b N33aa@b*) (if (not (N2ebd@valid-bound-ids? N33a7@lhs*)) (N3076@invalid-fmls-error N339b@e N33a7@lhs*) (let ((N33af@lex* (map N2e3d@gen-lexical N33a7@lhs*)) (N33b0@lab* (map N2e41@gen-label N33a7@lhs*))) (let ((N33b3@rib (N2e75@make-full-rib N33a7@lhs* N33b0@lab*)) (N33b4@r (N304e@add-lexicals N33b0@lab* N33af@lex* N339c@r))) (let ((N33b7@body (N30f4@chi-internal (N2ea1@add-subst N33b3@rib (cons N33a9@b N33aa@b*)) N33b4@r N339d@mr)) (N33b8@rhs* (N30da@chi-expr* (map (lambda (N33bb@x) (N2ea1@add-subst N33b3@rib N33bb@x)) N33a8@rhs*) N33b4@r N339d@mr))) (N339e@build '#f N33af@lex* N33b8@rhs* N33b7@body)))))) N33a5@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N33a3@t)))))) (set! N4b5c@N3050@letrec-helper N3050@letrec-helper) (set! N3052@let-transformer (lambda (N33bd@e N33be@r N33bf@mr) (let ((N33c3@t N33bd@e)) (let ((N33c5@ls/false (N30bc@syntax-dispatch N33c3@t '(_ #(each (any any)) any . each-any)))) (if N33c5@ls/false (apply (lambda (N33c7@lhs* N33c8@rhs* N33c9@b N33ca@b*) (if (not (N2ebd@valid-bound-ids? N33c7@lhs*)) (N3076@invalid-fmls-error N33bd@e N33c7@lhs*) (let ((N33cf@lex* (map N2e3d@gen-lexical N33c7@lhs*)) (N33d0@lab* (map N2e41@gen-label N33c7@lhs*)) (N33d1@rhs* (N30da@chi-expr* N33c8@rhs* N33be@r N33bf@mr))) (let ((N33d5@rib (N2e75@make-full-rib N33c7@lhs* N33d0@lab*)) (N33d6@r (N304e@add-lexicals N33d0@lab* N33cf@lex* N33be@r))) (let ((N33d9@body (N30f4@chi-internal (N2ea1@add-subst N33d5@rib (cons N33c9@b N33ca@b*)) N33d6@r N33bf@mr))) (N2e1d@N2d80@build-let '#f N33cf@lex* N33d1@rhs* N33d9@body)))))) N33c5@ls/false) (let ((N33db@t N33c3@t)) (let ((N33dd@ls/false (N30bc@syntax-dispatch N33db@t '(_ any #(each (any any)) any . each-any)))) (if N33dd@ls/false (apply (lambda (N33df@loop N33e0@lhs* N33e1@rhs* N33e2@b N33e3@b*) (if (not (N2ebd@valid-bound-ids? N33e0@lhs*)) (N3076@invalid-fmls-error N33bd@e N33e0@lhs*) (let ((N33e9@lex* (map N2e3d@gen-lexical N33e0@lhs*)) (N33ea@lab* (map N2e41@gen-label N33e0@lhs*)) (N33eb@rhs* (N30da@chi-expr* N33e1@rhs* N33be@r N33bf@mr)) (N33ec@loop-lex (N2e3d@gen-lexical N33df@loop)) (N33ed@loop-lab (N2e41@gen-label N33df@loop))) (let ((N33f3@loop-rib (N2e75@make-full-rib (list N33df@loop) (list N33ed@loop-lab))) (N33f4@rib (N2e75@make-full-rib N33e0@lhs* N33ea@lab*)) (N33f5@r (N304e@add-lexicals (cons N33ed@loop-lab N33ea@lab*) (cons N33ec@loop-lex N33e9@lex*) N33be@r))) (let ((N33f9@body (N30f4@chi-internal (N2ea1@add-subst N33f3@loop-rib (N2ea1@add-subst N33f4@rib (cons N33e2@b N33e3@b*))) N33f5@r N33bf@mr))) (N2e1e@N2d82@build-named-let '#f N33ec@loop-lex N33e9@lex* N33eb@rhs* N33f9@body)))))) N33dd@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N33db@t))))))))) (set! N4b5d@N3052@let-transformer N3052@let-transformer) (set! N3054@letrec-transformer (lambda (N33fb@e N33fc@r N33fd@mr) (N3050@letrec-helper N33fb@e N33fc@r N33fd@mr N2e1c@N2d7e@build-letrec))) (set! N4b5e@N3054@letrec-transformer N3054@letrec-transformer) (set! N3056@letrec*-transformer (lambda (N3401@e N3402@r N3403@mr) (N3050@letrec-helper N3401@e N3402@r N3403@mr N2e1f@N2d84@build-letrec*))) (set! N4b5f@N3056@letrec*-transformer N3056@letrec*-transformer) (set! N3058@fluid-let-syntax-transformer (lambda (N3407@e N3408@r N3409@mr) (letrec* ((N340e@lookup (lambda (N3421@x) (or (N2ecb@id->label N3421@x) (N319c@syntax-violation '#f '"unbound identifier" N3407@e N3421@x))))) (let ((N340f@t N3407@e)) (let ((N3411@ls/false (N30bc@syntax-dispatch N340f@t '(_ #(each (any any)) any . each-any)))) (if N3411@ls/false (apply (lambda (N3413@lhs* N3414@rhs* N3415@b N3416@b*) (if (not (N2ebd@valid-bound-ids? N3413@lhs*)) (N3076@invalid-fmls-error N3407@e N3413@lhs*) (let ((N341b@lab* (map N340e@lookup N3413@lhs*)) (N341c@rhs* (map (lambda (N341f@x) (N2eed@make-eval-transformer (N3116@expand-transformer N341f@x N3409@mr))) N3414@rhs*))) (N30f4@chi-internal (cons N3415@b N3416@b*) (append (map cons N341b@lab* N341c@rhs*) N3408@r) (append (map cons N341b@lab* N341c@rhs*) N3409@mr))))) N3411@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N340f@t))))))) (set! N4b60@N3058@fluid-let-syntax-transformer N3058@fluid-let-syntax-transformer) (set! N305a@type-descriptor-transformer (lambda (N3423@e N3424@r N3425@mr) (let ((N3429@t N3423@e)) (let ((N342b@ls/false (N30bc@syntax-dispatch N3429@t '(_ any)))) (if (and N342b@ls/false (apply (lambda (N342d@id) (N2eb5@id? N342d@id)) N342b@ls/false)) (apply (lambda (N342f@id) (let ((N3431@lab (N2ecb@id->label N342f@id))) (let ((N3433@b (N2ecd@label->binding N3431@lab N3424@r))) (let ((N3435@type (N2ed1@binding-type N3433@b))) (begin (if (not N3431@lab) (N2ed5@raise-unbound-error N342f@id) (void)) (if (not (and (eq? N3435@type '$rtd) (not (list? (N2ed3@binding-value N3433@b))))) (N319c@syntax-violation '#f '"not a record type" N3423@e) (void)) (list 'quote (N2ed3@binding-value N3433@b))))))) N342b@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3429@t)))))) (set! N4b61@N305a@type-descriptor-transformer N305a@type-descriptor-transformer) (set! N305c@record-type-descriptor-transformer (lambda (N3437@e N3438@r N3439@mr) (let ((N343d@t N3437@e)) (let ((N343f@ls/false (N30bc@syntax-dispatch N343d@t '(_ any)))) (if (and N343f@ls/false (apply (lambda (N3441@id) (N2eb5@id? N3441@id)) N343f@ls/false)) (apply (lambda (N3443@id) (let ((N3445@lab (N2ecb@id->label N3443@id))) (let ((N3447@b (N2ecd@label->binding N3445@lab N3438@r))) (let ((N3449@type (N2ed1@binding-type N3447@b))) (begin (if (not N3445@lab) (N2ed5@raise-unbound-error N3443@id) (void)) (if (not (and (eq? N3449@type '$rtd) (list? (N2ed3@binding-value N3447@b)))) (N319c@syntax-violation '#f '"not a record type" N3437@e) (void)) (N30de@chi-expr (car (N2ed3@binding-value N3447@b)) N3438@r N3439@mr)))))) N343f@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N343d@t)))))) (set! N4b62@N305c@record-type-descriptor-transformer N305c@record-type-descriptor-transformer) (set! N305e@record-constructor-descriptor-transformer (lambda (N344b@e N344c@r N344d@mr) (let ((N3451@t N344b@e)) (let ((N3453@ls/false (N30bc@syntax-dispatch N3451@t '(_ any)))) (if (and N3453@ls/false (apply (lambda (N3455@id) (N2eb5@id? N3455@id)) N3453@ls/false)) (apply (lambda (N3457@id) (let ((N3459@lab (N2ecb@id->label N3457@id))) (let ((N345b@b (N2ecd@label->binding N3459@lab N344c@r))) (let ((N345d@type (N2ed1@binding-type N345b@b))) (begin (if (not N3459@lab) (N2ed5@raise-unbound-error N3457@id) (void)) (if (not (and (eq? N345d@type '$rtd) (list? (N2ed3@binding-value N345b@b)))) (N319c@syntax-violation '#f '"invalid type" N344b@e) (void)) (N30de@chi-expr (cadr (N2ed3@binding-value N345b@b)) N344c@r N344d@mr)))))) N3453@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3451@t)))))) (set! N4b63@N305e@record-constructor-descriptor-transformer N305e@record-constructor-descriptor-transformer) (set! N3060@when-macro (lambda (N345f@e) (let ((N3461@t N345f@e)) (let ((N3463@ls/false (N30bc@syntax-dispatch N3461@t '(_ any any . each-any)))) (if N3463@ls/false (apply (lambda (N3465@test N3466@e N3467@e*) (N3072@bless (list 'if N3465@test (cons 'begin (cons N3466@e N3467@e*))))) N3463@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3461@t)))))) (set! N4b64@N3060@when-macro N3060@when-macro) (set! N3062@unless-macro (lambda (N346b@e) (let ((N346d@t N346b@e)) (let ((N346f@ls/false (N30bc@syntax-dispatch N346d@t '(_ any any . each-any)))) (if N346f@ls/false (apply (lambda (N3471@test N3472@e N3473@e*) (N3072@bless (list 'if (list 'not N3471@test) (cons 'begin (cons N3472@e N3473@e*))))) N346f@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N346d@t)))))) (set! N4b65@N3062@unless-macro N3062@unless-macro) (set! N3064@if-transformer (lambda (N3477@e N3478@r N3479@mr) (let ((N347d@t N3477@e)) (let ((N347f@ls/false (N30bc@syntax-dispatch N347d@t '(_ any any any)))) (if N347f@ls/false (apply (lambda (N3481@e0 N3482@e1 N3483@e2) (list 'if (N30de@chi-expr N3481@e0 N3478@r N3479@mr) (N30de@chi-expr N3482@e1 N3478@r N3479@mr) (N30de@chi-expr N3483@e2 N3478@r N3479@mr))) N347f@ls/false) (let ((N3487@t N347d@t)) (let ((N3489@ls/false (N30bc@syntax-dispatch N3487@t '(_ any any)))) (if N3489@ls/false (apply (lambda (N348b@e0 N348c@e1) (list 'if (N30de@chi-expr N348b@e0 N3478@r N3479@mr) (N30de@chi-expr N348c@e1 N3478@r N3479@mr) (N2e1b@N2d7c@build-void))) N3489@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3487@t))))))))) (set! N4b66@N3064@if-transformer N3064@if-transformer) (set! N3066@and-transformer (lambda (N348f@e N3490@r N3491@mr) (let ((N3495@t N348f@e)) (let ((N3497@ls/false (N30bc@syntax-dispatch N3495@t '(_ . each-any)))) (if N3497@ls/false (apply (lambda (N3499@e*) (cons 'and (N30da@chi-expr* N3499@e* N3490@r N3491@mr))) N3497@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3495@t)))))) (set! N4b67@N3066@and-transformer N3066@and-transformer) (set! N3068@or-transformer (lambda (N349b@e N349c@r N349d@mr) (let ((N34a1@t N349b@e)) (let ((N34a3@ls/false (N30bc@syntax-dispatch N34a1@t '(_ . each-any)))) (if N34a3@ls/false (apply (lambda (N34a5@e*) (cons 'or (N30da@chi-expr* N34a5@e* N349c@r N349d@mr))) N34a3@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N34a1@t)))))) (set! N4b68@N3068@or-transformer N3068@or-transformer) (set! N306a@case-macro (lambda (N34a7@e) (letrec* ((N34aa@build-last (lambda (N34d1@cls) (let ((N34d3@t N34d1@cls)) (let ((N34d5@ls/false (N30bc@syntax-dispatch N34d3@t '(#(scheme-id else) any . each-any)))) (if N34d5@ls/false (apply (lambda (N34d7@e N34d8@e*) (cons 'begin (cons N34d7@e N34d8@e*))) N34d5@ls/false) (let ((N34db@t N34d3@t)) (let ((N34dd@ls/false (N30bc@syntax-dispatch N34db@t '_))) (if N34dd@ls/false (apply (lambda () (N34ac@build-one N34d1@cls '(if #f #f))) N34dd@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N34db@t))))))))) (N34ac@build-one (lambda (N34c3@cls N34c4@k) (let ((N34c7@t N34c3@cls)) (let ((N34c9@ls/false (N30bc@syntax-dispatch N34c7@t '(each-any any . each-any)))) (if N34c9@ls/false (apply (lambda (N34cb@d* N34cc@e N34cd@e*) (list 'if (list 'memv 't (list 'quote N34cb@d*)) (cons 'begin (cons N34cc@e N34cd@e*)) N34c4@k)) N34c9@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N34c7@t))))))) (let ((N34ad@t N34a7@e)) (let ((N34af@ls/false (N30bc@syntax-dispatch N34ad@t '(_ any)))) (if N34af@ls/false (apply (lambda (N34b1@expr) (N3072@bless (cons 'let (cons (list (list 't N34b1@expr)) '((if #f #f)))))) N34af@ls/false) (let ((N34b3@t N34ad@t)) (let ((N34b5@ls/false (N30bc@syntax-dispatch N34b3@t '(_ any any . each-any)))) (if N34b5@ls/false (apply (lambda (N34b7@expr N34b8@cls N34b9@cls*) (N3072@bless (list 'let (list (list 't N34b7@expr)) (let N34c1@f ((N34bd@cls N34b8@cls) (N34be@cls* N34b9@cls*)) (if (null? N34be@cls*) (N34aa@build-last N34bd@cls) (N34ac@build-one N34bd@cls (N34c1@f (car N34be@cls*) (cdr N34be@cls*)))))))) N34b5@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N34b3@t)))))))))) (set! N4b69@N306a@case-macro N306a@case-macro) (set! N306c@quote-transformer (lambda (N34df@e N34e0@r N34e1@mr) (let ((N34e5@t N34df@e)) (let ((N34e7@ls/false (N30bc@syntax-dispatch N34e5@t '(_ any)))) (if N34e7@ls/false (apply (lambda (N34e9@datum) (list 'quote (N2ec9@stx->datum N34e9@datum))) N34e7@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N34e5@t)))))) (set! N4b6a@N306c@quote-transformer N306c@quote-transformer) (set! N306e@case-lambda-transformer (lambda (N34eb@e N34ec@r N34ed@mr) (let ((N34f1@t N34eb@e)) (let ((N34f3@ls/false (N30bc@syntax-dispatch N34f1@t '(_ . #(each (any any . each-any)))))) (if N34f3@ls/false (apply (lambda (N34f5@fmls* N34f6@b* N34f7@b**) (call-with-values (lambda () (N30e6@chi-lambda-clause* N34eb@e N34f5@fmls* (map cons N34f6@b* N34f7@b**) N34ec@r N34ed@mr)) (lambda (N34ff@N34fc N3500@N34fe) (let ((N3503@body* N3500@N34fe) (N3504@fmls* N34ff@N34fc)) (N2e19@N2d4c@build-case-lambda '#f N3504@fmls* N3503@body*))))) N34f3@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N34f1@t)))))) (set! N4b6b@N306e@case-lambda-transformer N306e@case-lambda-transformer) (set! N3070@lambda-transformer (lambda (N3507@e N3508@r N3509@mr) (let ((N350d@t N3507@e)) (let ((N350f@ls/false (N30bc@syntax-dispatch N350d@t '(_ any any . each-any)))) (if N350f@ls/false (apply (lambda (N3511@fmls N3512@b N3513@b*) (call-with-values (lambda () (N30e4@chi-lambda-clause N3507@e N3511@fmls (cons N3512@b N3513@b*) N3508@r N3509@mr)) (lambda (N351b@N3518 N351c@N351a) (let ((N351f@body N351c@N351a) (N3520@fmls N351b@N3518)) (N2e18@N2d4a@build-lambda '#f N3520@fmls N351f@body))))) N350f@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N350d@t)))))) (set! N4b6c@N3070@lambda-transformer N3070@lambda-transformer) (set! N3072@bless (lambda (N3523@x) (N2e9d@mkstx (let N3527@f ((N3525@x N3523@x)) (if (N2e81@stx? N3525@x) N3525@x (if (pair? N3525@x) (cons (N3527@f (car N3525@x)) (N3527@f (cdr N3525@x))) (if (symbol? N3525@x) (N3044@scheme-stx N3525@x) (if (vector? N3525@x) (vector-map N3527@f N3525@x) N3525@x))))) '() '() '()))) (set! N4b6d@N3072@bless N3072@bless) (set! N3074@with-syntax-macro (lambda (N3529@e) (let ((N352b@t N3529@e)) (let ((N352d@ls/false (N30bc@syntax-dispatch N352b@t '(_ #(each (any any)) any . each-any)))) (if N352d@ls/false (apply (lambda (N352f@pat* N3530@expr* N3531@b N3532@b*) (let ((N3537@idn* (let N353b@f ((N3539@pat* N352f@pat*)) (if (null? N3539@pat*) '() (call-with-values (lambda () (N30ba@convert-pattern (car N3539@pat*) '())) (lambda (N3541@N353e N3542@N3540) (let ((N3545@idn* N3542@N3540) (N3546@pat N3541@N353e)) (append N3545@idn* (N353b@f (cdr N3539@pat*)))))))))) (begin (N30e2@verify-formals (map car N3537@idn*) N3529@e) (let ((N3549@t* (N318a@generate-temporaries N3530@expr*))) (N3072@bless (list 'let (map list N3549@t* N3530@expr*) (let N354f@f ((N354b@pat* N352f@pat*) (N354c@t* N3549@t*)) (if (null? N354b@pat*) (cons 'begin (cons '#f (cons N3531@b N3532@b*))) (list 'syntax-case (car N354c@t*) '() (list (car N354b@pat*) (N354f@f (cdr N354b@pat*) (cdr N354c@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car N354b@pat*)) (car N354c@t*)))))))))))) N352d@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N352b@t)))))) (set! N4b6e@N3074@with-syntax-macro N3074@with-syntax-macro) (set! N3076@invalid-fmls-error (lambda (N3551@stx N3552@fmls) (let ((N3555@t N3552@fmls)) (let ((N3557@ls/false (N30bc@syntax-dispatch N3555@t '#(each+ any () any)))) (if N3557@ls/false (apply (lambda (N3559@id* N355a@last) (let N355f@f ((N355d@id* (if (N2eb5@id? N355a@last) (cons N355a@last N3559@id*) (if (N2eab@syntax-null? N355a@last) N3559@id* (N319c@syntax-violation '#f '"not an identifier" N3551@stx N355a@last))))) (if (null? N355d@id*) (values) (if (not (N2eb5@id? (car N355d@id*))) (N319c@syntax-violation '#f '"not an identifier" N3551@stx (car N355d@id*)) (begin (N355f@f (cdr N355d@id*)) (if (N2ec1@bound-id-member? (car N355d@id*) (cdr N355d@id*)) (N319c@syntax-violation '#f '"duplicate binding" N3551@stx (car N355d@id*)) (void))))))) N3557@ls/false) (let ((N3561@t N3555@t)) (let ((N3563@ls/false (N30bc@syntax-dispatch N3561@t '_))) (if N3563@ls/false (apply (lambda () (N319c@syntax-violation '#f '"malformed binding form" N3551@stx N3552@fmls)) N3563@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3561@t))))))))) (set! N4b6f@N3076@invalid-fmls-error N3076@invalid-fmls-error) (set! N3078@let-macro (lambda (N3565@stx) (let ((N3567@t N3565@stx)) (let ((N3569@ls/false (N30bc@syntax-dispatch N3567@t '(_ #(each (any any)) any . each-any)))) (if N3569@ls/false (apply (lambda (N356b@lhs* N356c@rhs* N356d@b N356e@b*) (if (N2ebd@valid-bound-ids? N356b@lhs*) (N3072@bless (cons (cons 'lambda (cons N356b@lhs* (cons N356d@b N356e@b*))) N356c@rhs*)) (N3076@invalid-fmls-error N3565@stx N356b@lhs*))) N3569@ls/false) (let ((N3573@t N3567@t)) (let ((N3575@ls/false (N30bc@syntax-dispatch N3573@t '(_ any #(each (any any)) any . each-any)))) (if (and N3575@ls/false (apply (lambda (N3577@f N3578@lhs* N3579@rhs* N357a@b N357b@b*) (N2eb5@id? N3577@f)) N3575@ls/false)) (apply (lambda (N3581@f N3582@lhs* N3583@rhs* N3584@b N3585@b*) (if (N2ebd@valid-bound-ids? N3582@lhs*) (N3072@bless (cons (list 'letrec (list (list N3581@f (cons 'lambda (cons N3582@lhs* (cons N3584@b N3585@b*))))) N3581@f) N3583@rhs*)) (N3076@invalid-fmls-error N3565@stx N3582@lhs*))) N3575@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3573@t))))))))) (set! N4b70@N3078@let-macro N3078@let-macro) (set! N307a@let-values-macro (lambda (N358b@stx) (letrec* ((N358e@rename (lambda (N35f3@x N35f4@old* N35f5@new*) (begin (if (not (N2eb5@id? N35f3@x)) (N319c@syntax-violation '#f '"not an indentifier" N358b@stx N35f3@x) (void)) (if (N2ec1@bound-id-member? N35f3@x N35f4@old*) (N319c@syntax-violation '#f '"duplicate binding" N358b@stx N35f3@x) (void)) (let ((N35f9@y (gensym (N31a2@syntax->datum N35f3@x)))) (values N35f9@y (cons N35f3@x N35f4@old*) (cons N35f9@y N35f5@new*)))))) (N3590@rename* (lambda (N35e1@x* N35e2@old* N35e3@new*) (if (null? N35e1@x*) (values '() N35e2@old* N35e3@new*) (call-with-values (lambda () (N358e@rename (car N35e1@x*) N35e2@old* N35e3@new*)) (lambda (N35e7@x N35e8@old* N35e9@new*) (call-with-values (lambda () (N3590@rename* (cdr N35e1@x*) N35e8@old* N35e9@new*)) (lambda (N35ed@x* N35ee@old* N35ef@new*) (values (cons N35e7@x N35ed@x*) N35ee@old* N35ef@new*))))))))) (let ((N3591@t N358b@stx)) (let ((N3593@ls/false (N30bc@syntax-dispatch N3591@t '(_ () any . each-any)))) (if N3593@ls/false (apply (lambda (N3595@b N3596@b*) (cons* (N3072@bless 'let) '() N3595@b N3596@b*)) N3593@ls/false) (let ((N3599@t N3591@t)) (let ((N359b@ls/false (N30bc@syntax-dispatch N3599@t '(_ #(each (any any)) any . each-any)))) (if N359b@ls/false (apply (lambda (N359d@lhs* N359e@rhs* N359f@b N35a0@b*) (N3072@bless (let N35ad@f ((N35a5@lhs* N359d@lhs*) (N35a6@rhs* N359e@rhs*) (N35a7@old* '()) (N35a8@new* '())) (if (null? N35a5@lhs*) (cons 'let (cons (map list N35a7@old* N35a8@new*) (cons N359f@b N35a0@b*))) (let ((N35af@t (car N35a5@lhs*))) (let ((N35b1@ls/false (N30bc@syntax-dispatch N35af@t 'each-any))) (if N35b1@ls/false (apply (lambda (N35b3@x*) (call-with-values (lambda () (N3590@rename* N35b3@x* N35a7@old* N35a8@new*)) (lambda (N35bb@N35b6 N35bc@N35b8 N35bd@N35ba) (let ((N35c1@new* N35bd@N35ba) (N35c2@old* N35bc@N35b8) (N35c3@y* N35bb@N35b6)) (list 'call-with-values (list 'lambda '() (car N35a6@rhs*)) (list 'lambda N35c3@y* (N35ad@f (cdr N35a5@lhs*) (cdr N35a6@rhs*) N35c2@old* N35c1@new*))))))) N35b1@ls/false) (let ((N35c7@t N35af@t)) (let ((N35c9@ls/false (N30bc@syntax-dispatch N35c7@t '#(each+ any () any)))) (if N35c9@ls/false (apply (lambda (N35cb@x* N35cc@x) (call-with-values (lambda () (N358e@rename N35cc@x N35a7@old* N35a8@new*)) (lambda (N35cf@y N35d0@old* N35d1@new*) (call-with-values (lambda () (N3590@rename* N35cb@x* N35d0@old* N35d1@new*)) (lambda (N35d5@y* N35d6@old* N35d7@new*) (list 'call-with-values (list 'lambda '() (car N35a6@rhs*)) (list 'lambda (append N35d5@y* N35cf@y) (N35ad@f (cdr N35a5@lhs*) (cdr N35a6@rhs*) N35d6@old* N35d7@new*)))))))) N35c9@ls/false) (let ((N35db@t N35c7@t)) (let ((N35dd@ls/false (N30bc@syntax-dispatch N35db@t 'any))) (if N35dd@ls/false (apply (lambda (N35df@others) (N319c@syntax-violation '#f '"malformed bindings" N358b@stx N35df@others)) N35dd@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N35db@t)))))))))))))) N359b@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3599@t)))))))))) (set! N4b71@N307a@let-values-macro N307a@let-values-macro) (set! N307c@let*-values-macro (lambda (N35fb@stx) (letrec* ((N35fe@check (lambda (N362d@x*) (if (not (null? N362d@x*)) (let ((N362f@x (car N362d@x*))) (begin (if (not (N2eb5@id? N362f@x)) (N319c@syntax-violation '#f '"not an identifier" N35fb@stx N362f@x) (void)) (N35fe@check (cdr N362d@x*)) (if (N2ec1@bound-id-member? N362f@x (cdr N362d@x*)) (N319c@syntax-violation '#f '"duplicate identifier" N35fb@stx N362f@x) (void)))) (void))))) (let ((N35ff@t N35fb@stx)) (let ((N3601@ls/false (N30bc@syntax-dispatch N35ff@t '(_ () any . each-any)))) (if N3601@ls/false (apply (lambda (N3603@b N3604@b*) (cons* (N3072@bless 'let) '() N3603@b N3604@b*)) N3601@ls/false) (let ((N3607@t N35ff@t)) (let ((N3609@ls/false (N30bc@syntax-dispatch N3607@t '(_ #(each (any any)) any . each-any)))) (if N3609@ls/false (apply (lambda (N360b@lhs* N360c@rhs* N360d@b N360e@b*) (N3072@bless (let N3617@f ((N3613@lhs* N360b@lhs*) (N3614@rhs* N360c@rhs*)) (if (null? N3613@lhs*) (cons 'begin (cons N360d@b N360e@b*)) (let ((N3619@t (car N3613@lhs*))) (let ((N361b@ls/false (N30bc@syntax-dispatch N3619@t 'each-any))) (if N361b@ls/false (apply (lambda (N361d@x*) (begin (N35fe@check N361d@x*) (list 'call-with-values (list 'lambda '() (car N3614@rhs*)) (list 'lambda N361d@x* (N3617@f (cdr N3613@lhs*) (cdr N3614@rhs*)))))) N361b@ls/false) (let ((N361f@t N3619@t)) (let ((N3621@ls/false (N30bc@syntax-dispatch N361f@t '#(each+ any () any)))) (if N3621@ls/false (apply (lambda (N3623@x* N3624@x) (begin (N35fe@check (cons N3624@x N3623@x*)) (list 'call-with-values (list 'lambda '() (car N3614@rhs*)) (list 'lambda (append N3623@x* N3624@x) (N3617@f (cdr N3613@lhs*) (cdr N3614@rhs*)))))) N3621@ls/false) (let ((N3627@t N361f@t)) (let ((N3629@ls/false (N30bc@syntax-dispatch N3627@t 'any))) (if N3629@ls/false (apply (lambda (N362b@others) (N319c@syntax-violation '#f '"malformed bindings" N35fb@stx N362b@others)) N3629@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3627@t)))))))))))))) N3609@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3607@t)))))))))) (set! N4b72@N307c@let*-values-macro N307c@let*-values-macro) (set! N307e@trace-lambda-macro (lambda (N3631@stx) (let ((N3633@t N3631@stx)) (let ((N3635@ls/false (N30bc@syntax-dispatch N3633@t '(_ any each-any any . each-any)))) (if N3635@ls/false (apply (lambda (N3637@who N3638@fmls N3639@b N363a@b*) (if (N2ebd@valid-bound-ids? N3638@fmls) (N3072@bless (list 'make-traced-procedure (list 'quote N3637@who) (cons 'lambda (cons N3638@fmls (cons N3639@b N363a@b*))))) (N3076@invalid-fmls-error N3631@stx N3638@fmls))) N3635@ls/false) (let ((N363f@t N3633@t)) (let ((N3641@ls/false (N30bc@syntax-dispatch N363f@t '(_ any #(each+ any () any) any . each-any)))) (if N3641@ls/false (apply (lambda (N3643@who N3644@fmls N3645@last N3646@b N3647@b*) (if (N2ebd@valid-bound-ids? (cons N3645@last N3644@fmls)) (N3072@bless (list 'make-traced-procedure (list 'quote N3643@who) (cons 'lambda (cons (append N3644@fmls N3645@last) (cons N3646@b N3647@b*))))) (N3076@invalid-fmls-error N3631@stx (append N3644@fmls N3645@last)))) N3641@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N363f@t))))))))) (set! N4b73@N307e@trace-lambda-macro N307e@trace-lambda-macro) (set! N3080@trace-define-macro (lambda (N364d@stx) (let ((N364f@t N364d@stx)) (let ((N3651@ls/false (N30bc@syntax-dispatch N364f@t '(_ (any . each-any) any . each-any)))) (if N3651@ls/false (apply (lambda (N3653@who N3654@fmls N3655@b N3656@b*) (if (N2ebd@valid-bound-ids? N3654@fmls) (N3072@bless (list 'define N3653@who (list 'make-traced-procedure (list 'quote N3653@who) (cons 'lambda (cons N3654@fmls (cons N3655@b N3656@b*)))))) (N3076@invalid-fmls-error N364d@stx N3654@fmls))) N3651@ls/false) (let ((N365b@t N364f@t)) (let ((N365d@ls/false (N30bc@syntax-dispatch N365b@t '(_ (any . #(each+ any () any)) any . each-any)))) (if N365d@ls/false (apply (lambda (N365f@who N3660@fmls N3661@last N3662@b N3663@b*) (if (N2ebd@valid-bound-ids? (cons N3661@last N3660@fmls)) (N3072@bless (list 'define N365f@who (list 'make-traced-procedure (list 'quote N365f@who) (cons 'lambda (cons (append N3660@fmls N3661@last) (cons N3662@b N3663@b*)))))) (N3076@invalid-fmls-error N364d@stx (append N3660@fmls N3661@last)))) N365d@ls/false) (let ((N3669@t N365b@t)) (let ((N366b@ls/false (N30bc@syntax-dispatch N3669@t '(_ any any)))) (if N366b@ls/false (apply (lambda (N366d@who N366e@expr) (if (N2eb5@id? N366d@who) (N3072@bless (list 'define N366d@who (list 'let (list (list 'v N366e@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote N366d@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (N319c@syntax-violation '#f '"invalid name" N364d@stx))) N366b@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3669@t)))))))))))) (set! N4b74@N3080@trace-define-macro N3080@trace-define-macro) (set! N3082@trace-define-syntax-macro (lambda (N3671@stx) (let ((N3673@t N3671@stx)) (let ((N3675@ls/false (N30bc@syntax-dispatch N3673@t '(_ any any)))) (if N3675@ls/false (apply (lambda (N3677@who N3678@expr) (if (N2eb5@id? N3677@who) (N3072@bless (list 'define-syntax N3677@who (list 'make-traced-macro (list 'quote N3677@who) N3678@expr))) (N319c@syntax-violation '#f '"invalid name" N3671@stx))) N3675@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3673@t)))))) (set! N4b75@N3082@trace-define-syntax-macro N3082@trace-define-syntax-macro) (set! N3084@trace-let/rec-syntax (lambda (N367b@who) (lambda (N367d@stx) (let ((N367f@t N367d@stx)) (let ((N3681@ls/false (N30bc@syntax-dispatch N367f@t '(_ #(each (any any)) any . each-any)))) (if N3681@ls/false (apply (lambda (N3683@lhs* N3684@rhs* N3685@b N3686@b*) (if (N2ebd@valid-bound-ids? N3683@lhs*) (let ((N368b@rhs* (map (lambda (N368d@lhs N368e@rhs) (list 'make-traced-macro (list 'quote N368d@lhs) N368e@rhs)) N3683@lhs* N3684@rhs*))) (N3072@bless (cons N367b@who (cons (map list N3683@lhs* N368b@rhs*) (cons N3685@b N3686@b*))))) (N3076@invalid-fmls-error N367d@stx N3683@lhs*))) N3681@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N367f@t))))))) (set! N4b76@N3084@trace-let/rec-syntax N3084@trace-let/rec-syntax) (set! N3086@trace-let-syntax-macro (N3084@trace-let/rec-syntax 'let-syntax)) (set! N4b77@N3086@trace-let-syntax-macro N3086@trace-let-syntax-macro) (set! N3088@trace-letrec-syntax-macro (N3084@trace-let/rec-syntax 'letrec-syntax)) (set! N4b78@N3088@trace-letrec-syntax-macro N3088@trace-letrec-syntax-macro) (set! N308a@guard-macro (lambda (N3691@x) (letrec* ((N3694@gen-clauses (lambda (N36ab@con N36ac@outerk N36ad@clause*) (letrec* ((N36b2@f (lambda (N36eb@x N36ec@k) (let ((N36ef@t N36eb@x)) (let ((N36f1@ls/false (N30bc@syntax-dispatch N36ef@t '(any #(scheme-id =>) any)))) (if N36f1@ls/false (apply (lambda (N36f3@e N36f4@p) (let ((N36f7@t (gensym))) (list 'let (list (list N36f7@t N36f3@e)) (list 'if N36f7@t (list N36f4@p N36f7@t) N36ec@k)))) N36f1@ls/false) (let ((N36f9@t N36ef@t)) (let ((N36fb@ls/false (N30bc@syntax-dispatch N36f9@t '(any)))) (if N36fb@ls/false (apply (lambda (N36fd@e) (let ((N36ff@t (gensym))) (list 'let (list (list N36ff@t N36fd@e)) (list 'if N36ff@t N36ff@t N36ec@k)))) N36fb@ls/false) (let ((N3701@t N36f9@t)) (let ((N3703@ls/false (N30bc@syntax-dispatch N3701@t '(any any . each-any)))) (if N3703@ls/false (apply (lambda (N3705@e N3706@v N3707@v*) (list 'if N3705@e (cons 'begin (cons N3706@v N3707@v*)) N36ec@k)) N3703@ls/false) (let ((N370b@t N3701@t)) (let ((N370d@ls/false (N30bc@syntax-dispatch N370b@t '_))) (if N370d@ls/false (apply (lambda () (N319c@syntax-violation '#f '"invalid guard clause" N36eb@x)) N370d@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N370b@t))))))))))))))) (N36b4@f* (lambda (N36c1@x*) (let ((N36c3@t N36c1@x*)) (let ((N36c5@ls/false (N30bc@syntax-dispatch N36c3@t '()))) (if N36c5@ls/false (apply (lambda () (let ((N36c7@g (gensym))) (values (list N36c7@g (list 'lambda '() (list 'raise-continuable N36ab@con))) N36c7@g))) N36c5@ls/false) (let ((N36c9@t N36c3@t)) (let ((N36cb@ls/false (N30bc@syntax-dispatch N36c9@t '((#(scheme-id else) any . each-any))))) (if N36cb@ls/false (apply (lambda (N36cd@e N36ce@e*) (values (cons 'begin (cons N36cd@e N36ce@e*)) '#f)) N36cb@ls/false) (let ((N36d1@t N36c9@t)) (let ((N36d3@ls/false (N30bc@syntax-dispatch N36d1@t '(any . any)))) (if N36d3@ls/false (apply (lambda (N36d5@cls N36d6@cls*) (call-with-values (lambda () (N36b4@f* N36d6@cls*)) (lambda (N36dd@N36da N36de@N36dc) (let ((N36e1@g N36de@N36dc) (N36e2@e N36dd@N36da)) (values (N36b2@f N36d5@cls N36e2@e) N36e1@g))))) N36d3@ls/false) (let ((N36e5@t N36d1@t)) (let ((N36e7@ls/false (N30bc@syntax-dispatch N36e5@t 'any))) (if N36e7@ls/false (apply (lambda (N36e9@others) (N319c@syntax-violation '#f '"invalid guard clause" N36e9@others)) N36e7@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N36e5@t)))))))))))))))) (call-with-values (lambda () (N36b4@f* N36ad@clause*)) (lambda (N36b9@N36b6 N36ba@N36b8) (let ((N36bd@raisek N36ba@N36b8) (N36be@code N36b9@N36b6)) (if N36bd@raisek (list (list 'call/cc (list 'lambda (list N36bd@raisek) (list N36ac@outerk (list 'lambda '() N36be@code))))) (list N36ac@outerk (list 'lambda '() N36be@code)))))))))) (let ((N3695@t N3691@x)) (let ((N3697@ls/false (N30bc@syntax-dispatch N3695@t '(_ (any . each-any) any . each-any)))) (if (and N3697@ls/false (apply (lambda (N3699@con N369a@clause* N369b@b N369c@b*) (N2eb5@id? N3699@con)) N3697@ls/false)) (apply (lambda (N36a1@con N36a2@clause* N36a3@b N36a4@b*) (let ((N36a9@outerk (gensym))) (N3072@bless (list (list 'call/cc (list 'lambda (list N36a9@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list N36a1@con) (N3694@gen-clauses N36a1@con N36a9@outerk N36a2@clause*)) (cons 'lambda (cons '() (cons N36a3@b N36a4@b*))))))))))) N3697@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3695@t))))))) (set! N4b79@N308a@guard-macro N308a@guard-macro) (set! N308c@define-enumeration-macro (lambda (N370f@stx) (letrec* ((N3712@set? (lambda (N372b@x) (or (null? N372b@x) (and (not (memq (car N372b@x) (cdr N372b@x))) (N3712@set? (cdr N372b@x)))))) (N3714@remove-dups (lambda (N3729@ls) (if (null? N3729@ls) '() (cons (car N3729@ls) (N3714@remove-dups (remq (car N3729@ls) (cdr N3729@ls)))))))) (let ((N3715@t N370f@stx)) (let ((N3717@ls/false (N30bc@syntax-dispatch N3715@t '(_ any each-any any)))) (if (and N3717@ls/false (apply (lambda (N3719@name N371a@id* N371b@maker) (and (N2eb5@id? N3719@name) (N2eb5@id? N371b@maker) (for-all N2eb5@id? N371a@id*))) N3717@ls/false)) (apply (lambda (N371f@name N3720@id* N3721@maker) (let ((N3725@name* (N3714@remove-dups (N31a2@syntax->datum N3720@id*))) (N3726@mk (gensym))) (N3072@bless (list 'begin (list 'define N3726@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote N3725@name*)))) (list 'define-syntax N371f@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote N3725@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote N371f@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax N3721@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote N3721@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote N3725@name*)) (cons 'syntax-violation (cons (list 'quote N3721@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons N3726@mk '('(n* ...))))))))))))) N3717@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3715@t))))))) (set! N4b7a@N308c@define-enumeration-macro N308c@define-enumeration-macro) (set! N308e@time-macro (lambda (N372d@stx) (let ((N372f@t N372d@stx)) (let ((N3731@ls/false (N30bc@syntax-dispatch N372f@t '(_ any)))) (if N3731@ls/false (apply (lambda (N3733@expr) (N3072@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() N3733@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) N3731@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N372f@t)))))) (set! N4b7b@N308e@time-macro N308e@time-macro) (set! N3090@delay-macro (lambda (N3735@stx) (let ((N3737@t N3735@stx)) (let ((N3739@ls/false (N30bc@syntax-dispatch N3737@t '(_ any)))) (if N3739@ls/false (apply (lambda (N373b@expr) (N3072@bless (list 'make-promise (list 'lambda '() N373b@expr)))) N3739@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3737@t)))))) (set! N4b7c@N3090@delay-macro N3090@delay-macro) (set! N3092@assert-macro (lambda (N373d@stx) (let ((N373f@t N373d@stx)) (let ((N3741@ls/false (N30bc@syntax-dispatch N373f@t '(_ any)))) (if N3741@ls/false (apply (lambda (N3743@expr) (let ((N3745@pos (or (N3194@expression-position N373d@stx) (N3194@expression-position N3743@expr)))) (N3072@bless (list 'let (list (list 'x N3743@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote N3743@expr) (list 'quote N3745@pos))))))) N3741@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N373f@t)))))) (set! N4b7d@N3092@assert-macro N3092@assert-macro) (set! N3094@endianness-macro (lambda (N3747@stx) (let ((N3749@t N3747@stx)) (let ((N374b@ls/false (N30bc@syntax-dispatch N3749@t '(_ any)))) (if N374b@ls/false (apply (lambda (N374d@e) (let ((N374f@t (N31a2@syntax->datum N374d@e))) (if (memv N374f@t '(little)) (N3072@bless ''little) (if (memv N374f@t '(big)) (N3072@bless ''big) (N319c@syntax-violation '#f '"endianness must be big or little" N3747@stx))))) N374b@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3749@t)))))) (set! N4b7e@N3094@endianness-macro N3094@endianness-macro) (set! N3096@identifier-syntax-macro (lambda (N3751@stx) (let ((N3753@t N3751@stx)) (let ((N3755@ls/false (N30bc@syntax-dispatch N3753@t '(_ any)))) (if N3755@ls/false (apply (lambda (N3757@expr) (N3072@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax N3757@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax N3757@expr) '((syntax (e* ...)))))))))) N3755@ls/false) (let ((N3759@t N3753@t)) (let ((N375b@ls/false (N30bc@syntax-dispatch N3759@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and N375b@ls/false (apply (lambda (N375d@id1 N375e@expr1 N375f@id2 N3760@expr2 N3761@expr3) (and (N2eb5@id? N375d@id1) (N2eb5@id? N375f@id2) (N2eb5@id? N3760@expr2))) N375b@ls/false)) (apply (lambda (N3767@id1 N3768@expr1 N3769@id2 N376a@expr2 N376b@expr3) (N3072@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax N3768@expr1)) (list (list 'set! 'id N376a@expr2) (list 'syntax N376b@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons N3768@expr1 '(e* ...))))))))) N375b@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3759@t))))))))) (set! N4b7f@N3096@identifier-syntax-macro N3096@identifier-syntax-macro) (set! N3098@do-macro (lambda (N3771@stx) (letrec* ((N3774@bind (lambda (N378b@x) (let ((N378d@t N378b@x)) (let ((N378f@ls/false (N30bc@syntax-dispatch N378d@t '(any any)))) (if N378f@ls/false (apply (lambda (N3791@x N3792@init) (list N3791@x N3792@init N3791@x)) N378f@ls/false) (let ((N3795@t N378d@t)) (let ((N3797@ls/false (N30bc@syntax-dispatch N3795@t '(any any any)))) (if N3797@ls/false (apply (lambda (N3799@x N379a@init N379b@step) (list N3799@x N379a@init N379b@step)) N3797@ls/false) (let ((N379f@t N3795@t)) (let ((N37a1@ls/false (N30bc@syntax-dispatch N379f@t '_))) (if N37a1@ls/false (apply (lambda () (N319c@syntax-violation '#f '"invalid binding" N3771@stx)) N37a1@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N379f@t))))))))))))) (let ((N3775@t N3771@stx)) (let ((N3777@ls/false (N30bc@syntax-dispatch N3775@t '(_ each-any (any . each-any) . each-any)))) (if N3777@ls/false (apply (lambda (N3779@binding* N377a@test N377b@expr* N377c@command*) (let ((N3781@t (map N3774@bind N3779@binding*))) (let ((N3783@ls/false (N30bc@syntax-dispatch N3781@t '#(each (any any any))))) (if N3783@ls/false (apply (lambda (N3785@x* N3786@init* N3787@step*) (if (N2ebd@valid-bound-ids? N3785@x*) (N3072@bless (list 'letrec (list (list 'loop (list 'lambda N3785@x* (list 'if N377a@test (cons 'begin (cons '(if #f #f) N377b@expr*)) (cons 'begin (append N377c@command* (list (cons 'loop N3787@step*)))))))) (cons 'loop N3786@init*))) (N319c@syntax-violation '#f '"invalid bindings" N3771@stx))) N3783@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3781@t))))) N3777@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3775@t))))))) (set! N4b80@N3098@do-macro N3098@do-macro) (set! N309a@let*-macro (lambda (N37a3@stx) (let ((N37a5@t N37a3@stx)) (let ((N37a7@ls/false (N30bc@syntax-dispatch N37a5@t '(_ #(each (any any)) any . each-any)))) (if (and N37a7@ls/false (apply (lambda (N37a9@lhs* N37aa@rhs* N37ab@b N37ac@b*) (for-all N2eb5@id? N37a9@lhs*)) N37a7@ls/false)) (apply (lambda (N37b1@lhs* N37b2@rhs* N37b3@b N37b4@b*) (N3072@bless (let N37bb@f ((N37b9@x* (map list N37b1@lhs* N37b2@rhs*))) (if (null? N37b9@x*) (cons 'let (cons '() (cons N37b3@b N37b4@b*))) (list 'let (list (car N37b9@x*)) (N37bb@f (cdr N37b9@x*))))))) N37a7@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N37a5@t)))))) (set! N4b81@N309a@let*-macro N309a@let*-macro) (set! N309c@or-macro (lambda (N37bd@stx) (let ((N37bf@t N37bd@stx)) (let ((N37c1@ls/false (N30bc@syntax-dispatch N37bf@t '(_)))) (if N37c1@ls/false (apply (lambda () '#f) N37c1@ls/false) (let ((N37c3@t N37bf@t)) (let ((N37c5@ls/false (N30bc@syntax-dispatch N37c3@t '(_ any . each-any)))) (if N37c5@ls/false (apply (lambda (N37c7@e N37c8@e*) (N3072@bless (let N37cf@f ((N37cb@e N37c7@e) (N37cc@e* N37c8@e*)) (if (null? N37cc@e*) (list 'begin '#f N37cb@e) (list 'let (list (list 't N37cb@e)) (list 'if 't 't (N37cf@f (car N37cc@e*) (cdr N37cc@e*)))))))) N37c5@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N37c3@t))))))))) (set! N4b82@N309c@or-macro N309c@or-macro) (set! N309e@and-macro (lambda (N37d1@stx) (let ((N37d3@t N37d1@stx)) (let ((N37d5@ls/false (N30bc@syntax-dispatch N37d3@t '(_)))) (if N37d5@ls/false (apply (lambda () '#t) N37d5@ls/false) (let ((N37d7@t N37d3@t)) (let ((N37d9@ls/false (N30bc@syntax-dispatch N37d7@t '(_ any . each-any)))) (if N37d9@ls/false (apply (lambda (N37db@e N37dc@e*) (N3072@bless (let N37e3@f ((N37df@e N37db@e) (N37e0@e* N37dc@e*)) (if (null? N37e0@e*) (list 'begin '#f N37df@e) (cons 'if (cons N37df@e (cons (N37e3@f (car N37e0@e*) (cdr N37e0@e*)) '(#f)))))))) N37d9@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N37d7@t))))))))) (set! N4b83@N309e@and-macro N309e@and-macro) (set! N30a0@cond-macro (lambda (N37e5@stx) (let ((N37e7@t N37e5@stx)) (let ((N37e9@ls/false (N30bc@syntax-dispatch N37e7@t '(_ any . each-any)))) (if N37e9@ls/false (apply (lambda (N37eb@cls N37ec@cls*) (N3072@bless (let N37f3@f ((N37ef@cls N37eb@cls) (N37f0@cls* N37ec@cls*)) (if (null? N37f0@cls*) (let ((N37f5@t N37ef@cls)) (let ((N37f7@ls/false (N30bc@syntax-dispatch N37f5@t '(#(scheme-id else) any . each-any)))) (if N37f7@ls/false (apply (lambda (N37f9@e N37fa@e*) (cons 'begin (cons N37f9@e N37fa@e*))) N37f7@ls/false) (let ((N37fd@t N37f5@t)) (let ((N37ff@ls/false (N30bc@syntax-dispatch N37fd@t '(any #(scheme-id =>) any)))) (if N37ff@ls/false (apply (lambda (N3801@e N3802@p) (list 'let (list (list 't N3801@e)) (list 'if 't (cons N3802@p '(t))))) N37ff@ls/false) (let ((N3805@t N37fd@t)) (let ((N3807@ls/false (N30bc@syntax-dispatch N3805@t '(any)))) (if N3807@ls/false (apply (lambda (N3809@e) (cons 'or (cons N3809@e '((if #f #f))))) N3807@ls/false) (let ((N380b@t N3805@t)) (let ((N380d@ls/false (N30bc@syntax-dispatch N380b@t '(any . each-any)))) (if N380d@ls/false (apply (lambda (N380f@e N3810@e*) (list 'if N380f@e (cons 'begin N3810@e*))) N380d@ls/false) (let ((N3813@t N380b@t)) (let ((N3815@ls/false (N30bc@syntax-dispatch N3813@t '_))) (if N3815@ls/false (apply (lambda () (N319c@syntax-violation '#f '"invalid last clause" N37e5@stx)) N3815@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3813@t)))))))))))))))) (let ((N3817@t N37ef@cls)) (let ((N3819@ls/false (N30bc@syntax-dispatch N3817@t '(#(scheme-id else) any . each-any)))) (if N3819@ls/false (apply (lambda (N381b@e N381c@e*) (N319c@syntax-violation '#f '"incorrect position of keyword else" N37e5@stx)) N3819@ls/false) (let ((N381f@t N3817@t)) (let ((N3821@ls/false (N30bc@syntax-dispatch N381f@t '(any #(scheme-id =>) any)))) (if N3821@ls/false (apply (lambda (N3823@e N3824@p) (list 'let (list (list 't N3823@e)) (list 'if 't (cons N3824@p '(t)) (N37f3@f (car N37f0@cls*) (cdr N37f0@cls*))))) N3821@ls/false) (let ((N3827@t N381f@t)) (let ((N3829@ls/false (N30bc@syntax-dispatch N3827@t '(any)))) (if N3829@ls/false (apply (lambda (N382b@e) (list 'or N382b@e (N37f3@f (car N37f0@cls*) (cdr N37f0@cls*)))) N3829@ls/false) (let ((N382d@t N3827@t)) (let ((N382f@ls/false (N30bc@syntax-dispatch N382d@t '(any . each-any)))) (if N382f@ls/false (apply (lambda (N3831@e N3832@e*) (list 'if N3831@e (cons 'begin N3832@e*) (N37f3@f (car N37f0@cls*) (cdr N37f0@cls*)))) N382f@ls/false) (let ((N3835@t N382d@t)) (let ((N3837@ls/false (N30bc@syntax-dispatch N3835@t '_))) (if N3837@ls/false (apply (lambda () (N319c@syntax-violation '#f '"invalid last clause" N37e5@stx)) N3837@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3835@t)))))))))))))))))))) N37e9@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N37e7@t)))))) (set! N4b84@N30a0@cond-macro N30a0@cond-macro) (set! N30a2@do-include (lambda (N3839@stx N383a@id N383b@filename) (let ((N383f@filename (N2ec9@stx->datum N383b@filename))) (begin (if (not (and (string? N383f@filename) (N2eb5@id? N383a@id))) (N319c@syntax-violation '#f '"invalid syntax" N3839@stx) (void)) (cons (N3072@bless 'begin) (with-input-from-file N383f@filename (lambda () (let N3843@f ((N3841@ls '())) (let ((N3845@x (N29f7@N28c7@read-annotated))) (if (eof-object? N3845@x) (reverse N3841@ls) (N3843@f (cons (N2e95@datum->stx N383a@id N3845@x) N3841@ls)))))))))))) (set! N4b85@N30a2@do-include N30a2@do-include) (set! N30a4@include-macro (lambda (N3847@e) (let ((N3849@t N3847@e)) (let ((N384b@ls/false (N30bc@syntax-dispatch N3849@t '(any any)))) (if N384b@ls/false (apply (lambda (N384d@id N384e@filename) (N30a2@do-include N3847@e N384d@id N384e@filename)) N384b@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3849@t)))))) (set! N4b86@N30a4@include-macro N30a4@include-macro) (set! N30a6@include-into-macro (lambda (N3851@e) (let ((N3853@t N3851@e)) (let ((N3855@ls/false (N30bc@syntax-dispatch N3853@t '(_ any any)))) (if N3855@ls/false (apply (lambda (N3857@id N3858@filename) (N30a2@do-include N3851@e N3857@id N3858@filename)) N3855@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3853@t)))))) (set! N4b87@N30a6@include-into-macro N30a6@include-into-macro) (set! N30a8@syntax-rules-macro (lambda (N385b@e) (let ((N385d@t N385b@e)) (let ((N385f@ls/false (N30bc@syntax-dispatch N385d@t '(_ each-any . #(each (any any)))))) (if N385f@ls/false (apply (lambda (N3861@lits N3862@pat* N3863@tmp*) (begin (N30c2@verify-literals N3861@lits N385b@e) (N3072@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons N3861@lits (map (lambda (N3867@pat N3868@tmp) (let ((N386b@t N3867@pat)) (let ((N386d@ls/false (N30bc@syntax-dispatch N386b@t '(_ . any)))) (if N386d@ls/false (apply (lambda (N386f@rest) (list (cons 'g N386f@rest) (list 'syntax N3868@tmp))) N386d@ls/false) (let ((N3871@t N386b@t)) (let ((N3873@ls/false (N30bc@syntax-dispatch N3871@t '_))) (if N3873@ls/false (apply (lambda () (N319c@syntax-violation '#f '"invalid syntax-rules pattern" N385b@e N3867@pat)) N3873@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3871@t)))))))) N3862@pat* N3863@tmp*)))))))) N385f@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N385d@t)))))) (set! N4b88@N30a8@syntax-rules-macro N30a8@syntax-rules-macro) (set! N30aa@quasiquote-macro (letrec* ((N3876@datum (lambda (N3977@x) (list (N3044@scheme-stx 'quote) (N2e9d@mkstx N3977@x '() '() '())))) (N3892@quasicons* (lambda (N396f@x N3970@y) (let N3975@f ((N3973@x N396f@x)) (if (null? N3973@x) N3970@y (N3894@quasicons (car N3973@x) (N3975@f (cdr N3973@x))))))) (N3894@quasicons (lambda (N3949@x N394a@y) (let ((N394d@t N394a@y)) (let ((N394f@ls/false (N30bc@syntax-dispatch N394d@t '(#(scheme-id quote) any)))) (if N394f@ls/false (apply (lambda (N3951@dy) (let ((N3953@t N3949@x)) (let ((N3955@ls/false (N30bc@syntax-dispatch N3953@t '(#(scheme-id quote) any)))) (if N3955@ls/false (apply (lambda (N3957@dx) (list (N3044@scheme-stx 'quote) (cons N3957@dx N3951@dy))) N3955@ls/false) (let ((N3959@t N3953@t)) (let ((N395b@ls/false (N30bc@syntax-dispatch N3959@t '_))) (if N395b@ls/false (apply (lambda () (let ((N395d@t N3951@dy)) (let ((N395f@ls/false (N30bc@syntax-dispatch N395d@t '()))) (if N395f@ls/false (apply (lambda () (list (N3044@scheme-stx 'list) N3949@x)) N395f@ls/false) (let ((N3961@t N395d@t)) (let ((N3963@ls/false (N30bc@syntax-dispatch N3961@t '_))) (if N3963@ls/false (apply (lambda () (list (N3044@scheme-stx 'cons) N3949@x N394a@y)) N3963@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3961@t)))))))) N395b@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3959@t)))))))) N394f@ls/false) (let ((N3965@t N394d@t)) (let ((N3967@ls/false (N30bc@syntax-dispatch N3965@t '(#(scheme-id list) . each-any)))) (if N3967@ls/false (apply (lambda (N3969@stuff) (cons* (N3044@scheme-stx 'list) N3949@x N3969@stuff)) N3967@ls/false) (let ((N396b@t N3965@t)) (let ((N396d@ls/false (N30bc@syntax-dispatch N396b@t '_))) (if N396d@ls/false (apply (lambda () (list (N3044@scheme-stx 'cons) N3949@x N394a@y)) N396d@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N396b@t)))))))))))) (N3896@quasiappend (lambda (N392f@x N3930@y) (let ((N3933@ls (let N3937@f ((N3935@x N392f@x)) (if (null? N3935@x) (let ((N3939@t N3930@y)) (let ((N393b@ls/false (N30bc@syntax-dispatch N3939@t '(#(scheme-id quote) ())))) (if N393b@ls/false (apply (lambda () '()) N393b@ls/false) (let ((N393d@t N3939@t)) (let ((N393f@ls/false (N30bc@syntax-dispatch N393d@t '_))) (if N393f@ls/false (apply (lambda () (list N3930@y)) N393f@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N393d@t))))))) (let ((N3941@t (car N3935@x))) (let ((N3943@ls/false (N30bc@syntax-dispatch N3941@t '(#(scheme-id quote) ())))) (if N3943@ls/false (apply (lambda () (N3937@f (cdr N3935@x))) N3943@ls/false) (let ((N3945@t N3941@t)) (let ((N3947@ls/false (N30bc@syntax-dispatch N3945@t '_))) (if N3947@ls/false (apply (lambda () (cons (car N3935@x) (N3937@f (cdr N3935@x)))) N3947@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3945@t))))))))))) (if (null? N3933@ls) (list (N3044@scheme-stx 'quote) '()) (if (null? (cdr N3933@ls)) (car N3933@ls) (cons* (N3044@scheme-stx 'append) N3933@ls)))))) (N3898@quasivector (lambda (N38fd@x) (let ((N38ff@pat-x N38fd@x)) (let ((N3901@t N38ff@pat-x)) (let ((N3903@ls/false (N30bc@syntax-dispatch N3901@t '(#(scheme-id quote) each-any)))) (if N3903@ls/false (apply (lambda (N3905@x*) (list (N3044@scheme-stx 'quote) (list->vector N3905@x*))) N3903@ls/false) (let ((N3907@t N3901@t)) (let ((N3909@ls/false (N30bc@syntax-dispatch N3907@t '_))) (if N3909@ls/false (apply (lambda () (let N3911@f ((N390b@x N38fd@x) (N390c@k (lambda (N390f@ls) (cons* (N3044@scheme-stx 'vector) N390f@ls)))) (let ((N3913@t N390b@x)) (let ((N3915@ls/false (N30bc@syntax-dispatch N3913@t '(#(scheme-id quote) each-any)))) (if N3915@ls/false (apply (lambda (N3917@x*) (N390c@k (map (lambda (N3919@x) (list (N3044@scheme-stx 'quote) N3919@x)) N3917@x*))) N3915@ls/false) (let ((N391b@t N3913@t)) (let ((N391d@ls/false (N30bc@syntax-dispatch N391b@t '(#(scheme-id list) . each-any)))) (if N391d@ls/false (apply (lambda (N391f@x*) (N390c@k N391f@x*)) N391d@ls/false) (let ((N3921@t N391b@t)) (let ((N3923@ls/false (N30bc@syntax-dispatch N3921@t '(#(scheme-id cons) any any)))) (if N3923@ls/false (apply (lambda (N3925@x N3926@y) (N3911@f N3926@y (lambda (N3929@ls) (N390c@k (cons N3925@x N3929@ls))))) N3923@ls/false) (let ((N392b@t N3921@t)) (let ((N392d@ls/false (N30bc@syntax-dispatch N392b@t '_))) (if N392d@ls/false (apply (lambda () (list (N3044@scheme-stx 'list->vector) N38ff@pat-x)) N392d@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N392b@t))))))))))))))) N3909@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3907@t)))))))))) (N389a@vquasi (lambda (N38db@p N38dc@lev) (let ((N38df@t N38db@p)) (let ((N38e1@ls/false (N30bc@syntax-dispatch N38df@t '(any . any)))) (if N38e1@ls/false (apply (lambda (N38e3@p N38e4@q) (let ((N38e7@t N38e3@p)) (let ((N38e9@ls/false (N30bc@syntax-dispatch N38e7@t '(#(scheme-id unquote) . each-any)))) (if N38e9@ls/false (apply (lambda (N38eb@p) (if (= N38dc@lev '0) (N3892@quasicons* N38eb@p (N389a@vquasi N38e4@q N38dc@lev)) (N3894@quasicons (N3894@quasicons (N3876@datum 'unquote) (N389c@quasi N38eb@p (- N38dc@lev '1))) (N389a@vquasi N38e4@q N38dc@lev)))) N38e9@ls/false) (let ((N38ed@t N38e7@t)) (let ((N38ef@ls/false (N30bc@syntax-dispatch N38ed@t '(#(scheme-id unquote-splicing) . each-any)))) (if N38ef@ls/false (apply (lambda (N38f1@p) (if (= N38dc@lev '0) (N3896@quasiappend N38f1@p (N389a@vquasi N38e4@q N38dc@lev)) (N3894@quasicons (N3894@quasicons (N3876@datum 'unquote-splicing) (N389c@quasi N38f1@p (- N38dc@lev '1))) (N389a@vquasi N38e4@q N38dc@lev)))) N38ef@ls/false) (let ((N38f3@t N38ed@t)) (let ((N38f5@ls/false (N30bc@syntax-dispatch N38f3@t 'any))) (if N38f5@ls/false (apply (lambda (N38f7@p) (N3894@quasicons (N389c@quasi N38f7@p N38dc@lev) (N389a@vquasi N38e4@q N38dc@lev))) N38f5@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N38f3@t))))))))))) N38e1@ls/false) (let ((N38f9@t N38df@t)) (let ((N38fb@ls/false (N30bc@syntax-dispatch N38f9@t '()))) (if N38fb@ls/false (apply (lambda () (list (N3044@scheme-stx 'quote) '())) N38fb@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N38f9@t))))))))) (N389c@quasi (lambda (N38a5@p N38a6@lev) (let ((N38a9@t N38a5@p)) (let ((N38ab@ls/false (N30bc@syntax-dispatch N38a9@t '(#(scheme-id unquote) any)))) (if N38ab@ls/false (apply (lambda (N38ad@p) (if (= N38a6@lev '0) N38ad@p (N3894@quasicons (N3876@datum 'unquote) (N389c@quasi (list N38ad@p) (- N38a6@lev '1))))) N38ab@ls/false) (let ((N38af@t N38a9@t)) (let ((N38b1@ls/false (N30bc@syntax-dispatch N38af@t '((#(scheme-id unquote) . each-any) . any)))) (if N38b1@ls/false (apply (lambda (N38b3@p N38b4@q) (if (= N38a6@lev '0) (N3892@quasicons* N38b3@p (N389c@quasi N38b4@q N38a6@lev)) (N3894@quasicons (N3894@quasicons (N3876@datum 'unquote) (N389c@quasi N38b3@p (- N38a6@lev '1))) (N389c@quasi N38b4@q N38a6@lev)))) N38b1@ls/false) (let ((N38b7@t N38af@t)) (let ((N38b9@ls/false (N30bc@syntax-dispatch N38b7@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if N38b9@ls/false (apply (lambda (N38bb@p N38bc@q) (if (= N38a6@lev '0) (N3896@quasiappend N38bb@p (N389c@quasi N38bc@q N38a6@lev)) (N3894@quasicons (N3894@quasicons (N3876@datum 'unquote-splicing) (N389c@quasi N38bb@p (- N38a6@lev '1))) (N389c@quasi N38bc@q N38a6@lev)))) N38b9@ls/false) (let ((N38bf@t N38b7@t)) (let ((N38c1@ls/false (N30bc@syntax-dispatch N38bf@t '(#(scheme-id quasiquote) any)))) (if N38c1@ls/false (apply (lambda (N38c3@p) (N3894@quasicons (N3876@datum 'quasiquote) (N389c@quasi (list N38c3@p) (+ N38a6@lev '1)))) N38c1@ls/false) (let ((N38c5@t N38bf@t)) (let ((N38c7@ls/false (N30bc@syntax-dispatch N38c5@t '(any . any)))) (if N38c7@ls/false (apply (lambda (N38c9@p N38ca@q) (N3894@quasicons (N389c@quasi N38c9@p N38a6@lev) (N389c@quasi N38ca@q N38a6@lev))) N38c7@ls/false) (let ((N38cd@t N38c5@t)) (let ((N38cf@ls/false (N30bc@syntax-dispatch N38cd@t '#(vector each-any)))) (if (and N38cf@ls/false (apply (lambda (N38d1@x) (not (N2e81@stx? N38d1@x))) N38cf@ls/false)) (apply (lambda (N38d3@x) (N3898@quasivector (N389a@vquasi N38d3@x N38a6@lev))) N38cf@ls/false) (let ((N38d5@t N38cd@t)) (let ((N38d7@ls/false (N30bc@syntax-dispatch N38d5@t 'any))) (if N38d7@ls/false (apply (lambda (N38d9@p) (list (N3044@scheme-stx 'quote) N38d9@p)) N38d7@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N38d5@t))))))))))))))))))))))))) (lambda (N389d@x) (let ((N389f@t N389d@x)) (let ((N38a1@ls/false (N30bc@syntax-dispatch N389f@t '(_ any)))) (if N38a1@ls/false (apply (lambda (N38a3@e) (N389c@quasi N38a3@e '0)) N38a1@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N389f@t))))))) (set! N4b89@N30aa@quasiquote-macro N30aa@quasiquote-macro) (set! N30ac@quasisyntax-macro (letrec* ((N397a@quasi (lambda (N3995@p N3996@lev) (let ((N3999@t N3995@p)) (let ((N399b@ls/false (N30bc@syntax-dispatch N3999@t '(#(scheme-id unsyntax) any)))) (if N399b@ls/false (apply (lambda (N399d@p) (if (= N3996@lev '0) (let ((N399f@g (gensym))) (values (list N399f@g) (list N399d@p) N399f@g)) (call-with-values (lambda () (N397a@quasi N399d@p (- N3996@lev '1))) (lambda (N39a7@N39a2 N39a8@N39a4 N39a9@N39a6) (let ((N39ad@p N39a9@N39a6) (N39ae@rhs* N39a8@N39a4) (N39af@lhs* N39a7@N39a2)) (values N39af@lhs* N39ae@rhs* (list 'unsyntax N39ad@p))))))) N399b@ls/false) (let ((N39b3@t N3999@t)) (let ((N39b5@ls/false (N30bc@syntax-dispatch N39b3@t '#(scheme-id unsyntax)))) (if (and N39b5@ls/false (apply (lambda () (= N3996@lev '0)) N39b5@ls/false)) (apply (lambda () (N319c@syntax-violation '#f '"incorrect use of unsyntax" N3995@p)) N39b5@ls/false) (let ((N39b7@t N39b3@t)) (let ((N39b9@ls/false (N30bc@syntax-dispatch N39b7@t '((#(scheme-id unsyntax) . each-any) . any)))) (if N39b9@ls/false (apply (lambda (N39bb@p* N39bc@q) (call-with-values (lambda () (N397a@quasi N39bc@q N3996@lev)) (lambda (N39c5@N39c0 N39c6@N39c2 N39c7@N39c4) (let ((N39cb@q N39c7@N39c4) (N39cc@rhs* N39c6@N39c2) (N39cd@lhs* N39c5@N39c0)) (if (= N3996@lev '0) (let ((N39d1@g* (map (lambda (N39d3@x) (gensym)) N39bb@p*))) (values (append N39d1@g* N39cd@lhs*) (append N39bb@p* N39cc@rhs*) (append N39d1@g* N39cb@q))) (call-with-values (lambda () (N397a@quasi N39bb@p* (- N3996@lev '1))) (lambda (N39db@N39d6 N39dc@N39d8 N39dd@N39da) (let ((N39e1@p* N39dd@N39da) (N39e2@rhs2* N39dc@N39d8) (N39e3@lhs2* N39db@N39d6)) (values (append N39e3@lhs2* N39cd@lhs*) (append N39e2@rhs2* N39cc@rhs*) (cons (cons 'unsyntax N39e1@p*) N39cb@q)))))))))) N39b9@ls/false) (let ((N39e7@t N39b7@t)) (let ((N39e9@ls/false (N30bc@syntax-dispatch N39e7@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if N39e9@ls/false (apply (lambda (N39eb@p* N39ec@q) (call-with-values (lambda () (N397a@quasi N39ec@q N3996@lev)) (lambda (N39f5@N39f0 N39f6@N39f2 N39f7@N39f4) (let ((N39fb@q N39f7@N39f4) (N39fc@rhs* N39f6@N39f2) (N39fd@lhs* N39f5@N39f0)) (if (= N3996@lev '0) (let ((N3a01@g* (map (lambda (N3a03@x) (gensym)) N39eb@p*))) (values (append (map (lambda (N3a05@g) (cons N3a05@g '(...))) N3a01@g*) N39fd@lhs*) (append N39eb@p* N39fc@rhs*) (append (apply append (map (lambda (N3a07@g) (cons N3a07@g '(...))) N3a01@g*)) N39fb@q))) (call-with-values (lambda () (N397a@quasi N39eb@p* (- N3996@lev '1))) (lambda (N3a0f@N3a0a N3a10@N3a0c N3a11@N3a0e) (let ((N3a15@p* N3a11@N3a0e) (N3a16@rhs2* N3a10@N3a0c) (N3a17@lhs2* N3a0f@N3a0a)) (values (append N3a17@lhs2* N39fd@lhs*) (append N3a16@rhs2* N39fc@rhs*) (cons (cons 'unsyntax-splicing N3a15@p*) N39fb@q)))))))))) N39e9@ls/false) (let ((N3a1b@t N39e7@t)) (let ((N3a1d@ls/false (N30bc@syntax-dispatch N3a1b@t '#(scheme-id unsyntax-splicing)))) (if (and N3a1d@ls/false (apply (lambda () (= N3996@lev '0)) N3a1d@ls/false)) (apply (lambda () (N319c@syntax-violation '#f '"incorrect use of unsyntax-splicing" N3995@p)) N3a1d@ls/false) (let ((N3a1f@t N3a1b@t)) (let ((N3a21@ls/false (N30bc@syntax-dispatch N3a1f@t '(#(scheme-id quasisyntax) any)))) (if N3a21@ls/false (apply (lambda (N3a23@p) (call-with-values (lambda () (N397a@quasi N3a23@p (+ N3996@lev '1))) (lambda (N3a2b@N3a26 N3a2c@N3a28 N3a2d@N3a2a) (let ((N3a31@p N3a2d@N3a2a) (N3a32@rhs* N3a2c@N3a28) (N3a33@lhs* N3a2b@N3a26)) (values N3a33@lhs* N3a32@rhs* (list 'quasisyntax N3a31@p)))))) N3a21@ls/false) (let ((N3a37@t N3a1f@t)) (let ((N3a39@ls/false (N30bc@syntax-dispatch N3a37@t '(any . any)))) (if N3a39@ls/false (apply (lambda (N3a3b@p N3a3c@q) (call-with-values (lambda () (N397a@quasi N3a3b@p N3996@lev)) (lambda (N3a4b@N3a40 N3a4c@N3a42 N3a4d@N3a44) (call-with-values (lambda () (N397a@quasi N3a3c@q N3996@lev)) (lambda (N3a51@N3a46 N3a52@N3a48 N3a53@N3a4a) (let ((N3a57@q N3a53@N3a4a) (N3a58@rhs2* N3a52@N3a48) (N3a59@lhs2* N3a51@N3a46) (N3a5a@p N3a4d@N3a44) (N3a5b@rhs* N3a4c@N3a42) (N3a5c@lhs* N3a4b@N3a40)) (values (append N3a59@lhs2* N3a5c@lhs*) (append N3a58@rhs2* N3a5b@rhs*) (cons N3a5a@p N3a57@q)))))))) N3a39@ls/false) (let ((N3a63@t N3a37@t)) (let ((N3a65@ls/false (N30bc@syntax-dispatch N3a63@t '#(vector each-any)))) (if N3a65@ls/false (apply (lambda (N3a67@x*) (call-with-values (lambda () (N397a@quasi N3a67@x* N3996@lev)) (lambda (N3a6f@N3a6a N3a70@N3a6c N3a71@N3a6e) (let ((N3a75@x* N3a71@N3a6e) (N3a76@rhs* N3a70@N3a6c) (N3a77@lhs* N3a6f@N3a6a)) (values N3a77@lhs* N3a76@rhs* (list->vector N3a75@x*)))))) N3a65@ls/false) (let ((N3a7b@t N3a63@t)) (let ((N3a7d@ls/false (N30bc@syntax-dispatch N3a7b@t '_))) (if N3a7d@ls/false (apply (lambda () (values '() '() N3995@p)) N3a7d@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3a7b@t))))))))))))))))))))))))))))))) (lambda (N397b@x) (let ((N397d@t N397b@x)) (let ((N397f@ls/false (N30bc@syntax-dispatch N397d@t '(_ any)))) (if N397f@ls/false (apply (lambda (N3981@e) (call-with-values (lambda () (N397a@quasi N3981@e '0)) (lambda (N3989@N3984 N398a@N3986 N398b@N3988) (let ((N398f@v N398b@N3988) (N3990@rhs* N398a@N3986) (N3991@lhs* N3989@N3984)) (N3072@bless (list 'syntax-case (cons 'list N3990@rhs*) '() (list N3991@lhs* (list 'syntax N398f@v)))))))) N397f@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N397d@t))))))) (set! N4b8a@N30ac@quasisyntax-macro N30ac@quasisyntax-macro) (set! N30ae@define-struct-macro (lambda (N3a7f@stx) (N319c@syntax-violation '#f '"define-struct not supported" N3a7f@stx))) (set! N4b8b@N30ae@define-struct-macro N30ae@define-struct-macro) (set! N30b0@define-record-type-macro (lambda (N3a81@x) (letrec* ((N3a84@id (lambda (N3c77@ctxt . N3c79@str*) (N31a0@datum->syntax N3c77@ctxt (string->symbol (apply string-append (map (lambda (N3c7b@x) (if (symbol? N3c7b@x) (symbol->string N3c7b@x) (if (string? N3c7b@x) N3c7b@x (assertion-violation 'define-record-type '"BUG")))) N3c79@str*)))))) (N3a86@get-record-name (lambda (N3c65@spec) (let ((N3c67@t N3c65@spec)) (let ((N3c69@ls/false (N30bc@syntax-dispatch N3c67@t '(any any any)))) (if N3c69@ls/false (apply (lambda (N3c6b@foo N3c6c@make-foo N3c6d@foo?) N3c6b@foo) N3c69@ls/false) (let ((N3c71@t N3c67@t)) (let ((N3c73@ls/false (N30bc@syntax-dispatch N3c71@t 'any))) (if N3c73@ls/false (apply (lambda (N3c75@foo) N3c75@foo) N3c73@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3c71@t))))))))) (N3a88@get-record-constructor-name (lambda (N3c51@spec) (let ((N3c53@t N3c51@spec)) (let ((N3c55@ls/false (N30bc@syntax-dispatch N3c53@t '(any any any)))) (if N3c55@ls/false (apply (lambda (N3c57@foo N3c58@make-foo N3c59@foo?) N3c58@make-foo) N3c55@ls/false) (let ((N3c5d@t N3c53@t)) (let ((N3c5f@ls/false (N30bc@syntax-dispatch N3c5d@t 'any))) (if (and N3c5f@ls/false (apply (lambda (N3c61@foo) (N2eb5@id? N3c61@foo)) N3c5f@ls/false)) (apply (lambda (N3c63@foo) (N3a84@id N3c63@foo '"make-" (N2ec9@stx->datum N3c63@foo))) N3c5f@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3c5d@t))))))))) (N3a8a@get-record-predicate-name (lambda (N3c3d@spec) (let ((N3c3f@t N3c3d@spec)) (let ((N3c41@ls/false (N30bc@syntax-dispatch N3c3f@t '(any any any)))) (if N3c41@ls/false (apply (lambda (N3c43@foo N3c44@make-foo N3c45@foo?) N3c45@foo?) N3c41@ls/false) (let ((N3c49@t N3c3f@t)) (let ((N3c4b@ls/false (N30bc@syntax-dispatch N3c49@t 'any))) (if (and N3c4b@ls/false (apply (lambda (N3c4d@foo) (N2eb5@id? N3c4d@foo)) N3c4b@ls/false)) (apply (lambda (N3c4f@foo) (N3a84@id N3c4f@foo (N2ec9@stx->datum N3c4f@foo) '"?")) N3c4b@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3c49@t))))))))) (N3a8c@get-clause (lambda (N3c2b@id N3c2c@ls) (let ((N3c2f@t N3c2c@ls)) (let ((N3c31@ls/false (N30bc@syntax-dispatch N3c2f@t '()))) (if N3c31@ls/false (apply (lambda () '#f) N3c31@ls/false) (let ((N3c33@t N3c2f@t)) (let ((N3c35@ls/false (N30bc@syntax-dispatch N3c33@t '((any . any) . any)))) (if N3c35@ls/false (apply (lambda (N3c37@x N3c38@rest N3c39@ls) (if (N2ebb@free-id=? (N3072@bless N3c2b@id) N3c37@x) (cons N3c37@x N3c38@rest) (N3a8c@get-clause N3c2b@id N3c39@ls))) N3c35@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3c33@t))))))))) (N3a8e@foo-rtd-code (lambda (N3bd9@name N3bda@clause* N3bdb@parent-rtd-code) (letrec* ((N3be0@convert-field-spec* (lambda (N3c11@ls) (list->vector (map (lambda (N3c13@x) (let ((N3c15@t N3c13@x)) (let ((N3c17@ls/false (N30bc@syntax-dispatch N3c15@t '(#(scheme-id mutable) any . any)))) (if N3c17@ls/false (apply (lambda (N3c19@name N3c1a@rest) (list 'mutable N3c19@name)) N3c17@ls/false) (let ((N3c1d@t N3c15@t)) (let ((N3c1f@ls/false (N30bc@syntax-dispatch N3c1d@t '(#(scheme-id immutable) any . any)))) (if N3c1f@ls/false (apply (lambda (N3c21@name N3c22@rest) (list 'immutable N3c21@name)) N3c1f@ls/false) (let ((N3c25@t N3c1d@t)) (let ((N3c27@ls/false (N30bc@syntax-dispatch N3c25@t 'any))) (if N3c27@ls/false (apply (lambda (N3c29@name) (list 'immutable N3c29@name)) N3c27@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3c25@t))))))))))) N3c11@ls))))) (let ((N3be1@uid-code (let ((N3be9@t (N3a8c@get-clause 'nongenerative N3bda@clause*))) (let ((N3beb@ls/false (N30bc@syntax-dispatch N3be9@t '(_)))) (if N3beb@ls/false (apply (lambda () (list 'quote (gensym))) N3beb@ls/false) (let ((N3bed@t N3be9@t)) (let ((N3bef@ls/false (N30bc@syntax-dispatch N3bed@t '(_ any)))) (if N3bef@ls/false (apply (lambda (N3bf1@uid) (list 'quote N3bf1@uid)) N3bef@ls/false) (let ((N3bf3@t N3bed@t)) (let ((N3bf5@ls/false (N30bc@syntax-dispatch N3bf3@t '_))) (if N3bf5@ls/false (apply (lambda () '#f) N3bf5@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3bf3@t))))))))))) (N3be2@sealed? (let ((N3bf7@t (N3a8c@get-clause 'sealed N3bda@clause*))) (let ((N3bf9@ls/false (N30bc@syntax-dispatch N3bf7@t '(_ #(atom #t))))) (if N3bf9@ls/false (apply (lambda () '#t) N3bf9@ls/false) (let ((N3bfb@t N3bf7@t)) (let ((N3bfd@ls/false (N30bc@syntax-dispatch N3bfb@t '_))) (if N3bfd@ls/false (apply (lambda () '#f) N3bfd@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3bfb@t)))))))) (N3be3@opaque? (let ((N3bff@t (N3a8c@get-clause 'opaque N3bda@clause*))) (let ((N3c01@ls/false (N30bc@syntax-dispatch N3bff@t '(_ #(atom #t))))) (if N3c01@ls/false (apply (lambda () '#t) N3c01@ls/false) (let ((N3c03@t N3bff@t)) (let ((N3c05@ls/false (N30bc@syntax-dispatch N3c03@t '_))) (if N3c05@ls/false (apply (lambda () '#f) N3c05@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3c03@t)))))))) (N3be4@fields (let ((N3c07@t (N3a8c@get-clause 'fields N3bda@clause*))) (let ((N3c09@ls/false (N30bc@syntax-dispatch N3c07@t '(_ . each-any)))) (if N3c09@ls/false (apply (lambda (N3c0b@field-spec*) (list 'quote (N3be0@convert-field-spec* N3c0b@field-spec*))) N3c09@ls/false) (let ((N3c0d@t N3c07@t)) (let ((N3c0f@ls/false (N30bc@syntax-dispatch N3c0d@t '_))) (if N3c0f@ls/false (apply (lambda () ''#()) N3c0f@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3c0d@t))))))))) (N3072@bless (list 'make-record-type-descriptor (list 'quote N3bd9@name) N3bdb@parent-rtd-code N3be1@uid-code N3be2@sealed? N3be3@opaque? N3be4@fields)))))) (N3a90@parent-rtd-code (lambda (N3bc1@clause*) (let ((N3bc3@t (N3a8c@get-clause 'parent N3bc1@clause*))) (let ((N3bc5@ls/false (N30bc@syntax-dispatch N3bc3@t '(_ any)))) (if N3bc5@ls/false (apply (lambda (N3bc7@name) (list 'record-type-descriptor N3bc7@name)) N3bc5@ls/false) (let ((N3bc9@t N3bc3@t)) (let ((N3bcb@ls/false (N30bc@syntax-dispatch N3bc9@t '#(atom #f)))) (if N3bcb@ls/false (apply (lambda () (let ((N3bcd@t (N3a8c@get-clause 'parent-rtd N3bc1@clause*))) (let ((N3bcf@ls/false (N30bc@syntax-dispatch N3bcd@t '(_ any any)))) (if N3bcf@ls/false (apply (lambda (N3bd1@rtd N3bd2@rcd) N3bd1@rtd) N3bcf@ls/false) (let ((N3bd5@t N3bcd@t)) (let ((N3bd7@ls/false (N30bc@syntax-dispatch N3bd5@t '#(atom #f)))) (if N3bd7@ls/false (apply (lambda () '#f) N3bd7@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3bd5@t)))))))) N3bcb@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3bc9@t))))))))) (N3a92@parent-rcd-code (lambda (N3ba9@clause*) (let ((N3bab@t (N3a8c@get-clause 'parent N3ba9@clause*))) (let ((N3bad@ls/false (N30bc@syntax-dispatch N3bab@t '(_ any)))) (if N3bad@ls/false (apply (lambda (N3baf@name) (list 'record-constructor-descriptor N3baf@name)) N3bad@ls/false) (let ((N3bb1@t N3bab@t)) (let ((N3bb3@ls/false (N30bc@syntax-dispatch N3bb1@t '#(atom #f)))) (if N3bb3@ls/false (apply (lambda () (let ((N3bb5@t (N3a8c@get-clause 'parent-rtd N3ba9@clause*))) (let ((N3bb7@ls/false (N30bc@syntax-dispatch N3bb5@t '(_ any any)))) (if N3bb7@ls/false (apply (lambda (N3bb9@rtd N3bba@rcd) N3bba@rcd) N3bb7@ls/false) (let ((N3bbd@t N3bb5@t)) (let ((N3bbf@ls/false (N30bc@syntax-dispatch N3bbd@t '#(atom #f)))) (if N3bbf@ls/false (apply (lambda () '#f) N3bbf@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3bbd@t)))))))) N3bb3@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3bb1@t))))))))) (N3a94@foo-rcd-code (lambda (N3ba1@clause* N3ba2@foo-rtd N3ba3@protocol N3ba4@parent-rcd-code) (list 'make-record-constructor-descriptor N3ba2@foo-rtd N3ba4@parent-rcd-code N3ba3@protocol))) (N3a96@get-protocol-code (lambda (N3b95@clause*) (let ((N3b97@t (N3a8c@get-clause 'protocol N3b95@clause*))) (let ((N3b99@ls/false (N30bc@syntax-dispatch N3b97@t '(_ any)))) (if N3b99@ls/false (apply (lambda (N3b9b@expr) N3b9b@expr) N3b99@ls/false) (let ((N3b9d@t N3b97@t)) (let ((N3b9f@ls/false (N30bc@syntax-dispatch N3b9d@t '_))) (if N3b9f@ls/false (apply (lambda () '#f) N3b9f@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3b9d@t))))))))) (N3a98@get-fields (lambda (N3b83@clause*) (let ((N3b85@t N3b83@clause*)) (let ((N3b87@ls/false (N30bc@syntax-dispatch N3b85@t '()))) (if N3b87@ls/false (apply (lambda () '()) N3b87@ls/false) (let ((N3b89@t N3b85@t)) (let ((N3b8b@ls/false (N30bc@syntax-dispatch N3b89@t '((#(scheme-id fields) . each-any) . _)))) (if N3b8b@ls/false (apply (lambda (N3b8d@f*) N3b8d@f*) N3b8b@ls/false) (let ((N3b8f@t N3b89@t)) (let ((N3b91@ls/false (N30bc@syntax-dispatch N3b8f@t '(_ . any)))) (if N3b91@ls/false (apply (lambda (N3b93@rest) (N3a98@get-fields N3b93@rest)) N3b91@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3b8f@t)))))))))))) (N3a9a@get-mutator-indices (lambda (N3b6b@fields) (let N3b71@f ((N3b6d@fields N3b6b@fields) (N3b6e@i '0)) (let ((N3b73@t N3b6d@fields)) (let ((N3b75@ls/false (N30bc@syntax-dispatch N3b73@t '()))) (if N3b75@ls/false (apply (lambda () '()) N3b75@ls/false) (let ((N3b77@t N3b73@t)) (let ((N3b79@ls/false (N30bc@syntax-dispatch N3b77@t '((#(scheme-id mutable) . _) . any)))) (if N3b79@ls/false (apply (lambda (N3b7b@rest) (cons N3b6e@i (N3b71@f N3b7b@rest (+ N3b6e@i '1)))) N3b79@ls/false) (let ((N3b7d@t N3b77@t)) (let ((N3b7f@ls/false (N30bc@syntax-dispatch N3b7d@t '(_ . any)))) (if N3b7f@ls/false (apply (lambda (N3b81@rest) (N3b71@f N3b81@rest (+ N3b6e@i '1))) N3b7f@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3b7d@t))))))))))))) (N3a9c@get-mutators (lambda (N3b41@foo N3b42@fields) (letrec* ((N3b46@gen-name (lambda (N3b69@x) (N31a0@datum->syntax N3b41@foo (string->symbol (string-append (symbol->string (N31a2@syntax->datum N3b41@foo)) '"-" (symbol->string (N31a2@syntax->datum N3b69@x)) '"-set!")))))) (let N3b49@f ((N3b47@fields N3b42@fields)) (let ((N3b4b@t N3b47@fields)) (let ((N3b4d@ls/false (N30bc@syntax-dispatch N3b4b@t '()))) (if N3b4d@ls/false (apply (lambda () '()) N3b4d@ls/false) (let ((N3b4f@t N3b4b@t)) (let ((N3b51@ls/false (N30bc@syntax-dispatch N3b4f@t '((#(scheme-id mutable) any any any) . any)))) (if N3b51@ls/false (apply (lambda (N3b53@name N3b54@accessor N3b55@mutator N3b56@rest) (cons N3b55@mutator (N3b49@f N3b56@rest))) N3b51@ls/false) (let ((N3b5b@t N3b4f@t)) (let ((N3b5d@ls/false (N30bc@syntax-dispatch N3b5b@t '((#(scheme-id mutable) any) . any)))) (if N3b5d@ls/false (apply (lambda (N3b5f@name N3b60@rest) (cons (N3b46@gen-name N3b5f@name) (N3b49@f N3b60@rest))) N3b5d@ls/false) (let ((N3b63@t N3b5b@t)) (let ((N3b65@ls/false (N30bc@syntax-dispatch N3b63@t '(_ . any)))) (if N3b65@ls/false (apply (lambda (N3b67@rest) (N3b49@f N3b67@rest)) N3b65@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3b63@t))))))))))))))))) (N3a9e@get-accessors (lambda (N3afd@foo N3afe@fields) (letrec* ((N3b02@gen-name (lambda (N3b3f@x) (N31a0@datum->syntax N3afd@foo (string->symbol (string-append (symbol->string (N31a2@syntax->datum N3afd@foo)) '"-" (symbol->string (N31a2@syntax->datum N3b3f@x)))))))) (map (lambda (N3b03@field) (let ((N3b05@t N3b03@field)) (let ((N3b07@ls/false (N30bc@syntax-dispatch N3b05@t '(#(scheme-id mutable) any any any)))) (if (and N3b07@ls/false (apply (lambda (N3b09@name N3b0a@accessor N3b0b@mutator) (N2eb5@id? N3b0a@accessor)) N3b07@ls/false)) (apply (lambda (N3b0f@name N3b10@accessor N3b11@mutator) N3b10@accessor) N3b07@ls/false) (let ((N3b15@t N3b05@t)) (let ((N3b17@ls/false (N30bc@syntax-dispatch N3b15@t '(#(scheme-id immutable) any any)))) (if (and N3b17@ls/false (apply (lambda (N3b19@name N3b1a@accessor) (N2eb5@id? N3b1a@accessor)) N3b17@ls/false)) (apply (lambda (N3b1d@name N3b1e@accessor) N3b1e@accessor) N3b17@ls/false) (let ((N3b21@t N3b15@t)) (let ((N3b23@ls/false (N30bc@syntax-dispatch N3b21@t '(#(scheme-id mutable) any)))) (if (and N3b23@ls/false (apply (lambda (N3b25@name) (N2eb5@id? N3b25@name)) N3b23@ls/false)) (apply (lambda (N3b27@name) (N3b02@gen-name N3b27@name)) N3b23@ls/false) (let ((N3b29@t N3b21@t)) (let ((N3b2b@ls/false (N30bc@syntax-dispatch N3b29@t '(#(scheme-id immutable) any)))) (if (and N3b2b@ls/false (apply (lambda (N3b2d@name) (N2eb5@id? N3b2d@name)) N3b2b@ls/false)) (apply (lambda (N3b2f@name) (N3b02@gen-name N3b2f@name)) N3b2b@ls/false) (let ((N3b31@t N3b29@t)) (let ((N3b33@ls/false (N30bc@syntax-dispatch N3b31@t 'any))) (if (and N3b33@ls/false (apply (lambda (N3b35@name) (N2eb5@id? N3b35@name)) N3b33@ls/false)) (apply (lambda (N3b37@name) (N3b02@gen-name N3b37@name)) N3b33@ls/false) (let ((N3b39@t N3b31@t)) (let ((N3b3b@ls/false (N30bc@syntax-dispatch N3b39@t 'any))) (if N3b3b@ls/false (apply (lambda (N3b3d@others) (N319c@syntax-violation '#f '"invalid field spec" N3b03@field)) N3b3b@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3b39@t)))))))))))))))))))) N3afe@fields)))) (N3aa0@enumerate (lambda (N3af5@ls) (let N3afb@f ((N3af7@ls N3af5@ls) (N3af8@i '0)) (if (null? N3af7@ls) '() (cons N3af8@i (N3afb@f (cdr N3af7@ls) (+ N3af8@i '1))))))) (N3aa2@do-define-record (lambda (N3acd@namespec N3ace@clause*) (let ((N3ad1@foo (N3a86@get-record-name N3acd@namespec))) (let ((N3ad3@foo-rtd (gensym))) (let ((N3ad5@foo-rcd (gensym))) (let ((N3ad7@protocol (gensym))) (let ((N3ad9@make-foo (N3a88@get-record-constructor-name N3acd@namespec))) (let ((N3adb@fields (N3a98@get-fields N3ace@clause*))) (let ((N3add@idx* (N3aa0@enumerate N3adb@fields))) (let ((N3adf@foo-x* (N3a9e@get-accessors N3ad1@foo N3adb@fields))) (let ((N3ae1@set-foo-x!* (N3a9c@get-mutators N3ad1@foo N3adb@fields))) (let ((N3ae3@set-foo-idx* (N3a9a@get-mutator-indices N3adb@fields))) (let ((N3ae5@foo? (N3a8a@get-record-predicate-name N3acd@namespec))) (let ((N3ae7@foo-rtd-code (N3a8e@foo-rtd-code N3ad1@foo N3ace@clause* (N3a90@parent-rtd-code N3ace@clause*)))) (let ((N3ae9@foo-rcd-code (N3a94@foo-rcd-code N3ace@clause* N3ad3@foo-rtd N3ad7@protocol (N3a92@parent-rcd-code N3ace@clause*)))) (let ((N3aeb@protocol-code (N3a96@get-protocol-code N3ace@clause*))) (N3072@bless (cons 'begin (cons (list 'define N3ad3@foo-rtd N3ae7@foo-rtd-code) (cons (list 'define N3ad7@protocol N3aeb@protocol-code) (cons (list 'define N3ad5@foo-rcd N3ae9@foo-rcd-code) (cons (list 'define-syntax N3ad1@foo (list 'list ''$rtd (list 'syntax N3ad3@foo-rtd) (list 'syntax N3ad5@foo-rcd))) (cons (list 'define N3ae5@foo? (list 'record-predicate N3ad3@foo-rtd)) (cons (list 'define N3ad9@make-foo (list 'record-constructor N3ad5@foo-rcd)) (append (map (lambda (N3aed@foo-x N3aee@idx) (list 'define N3aed@foo-x (list 'record-accessor N3ad3@foo-rtd N3aee@idx))) N3adf@foo-x* N3add@idx*) (map (lambda (N3af1@set-foo-x! N3af2@idx) (list 'define N3af1@set-foo-x! (list 'record-mutator N3ad3@foo-rtd N3af2@idx))) N3ae1@set-foo-x!* N3ae3@set-foo-idx*)))))))))))))))))))))))))) (N3aa4@verify-clauses (lambda (N3aad@x N3aae@cls*) (letrec* ((N3ab2@valid-kwds (map N3072@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (N3ab4@free-id-member? (lambda (N3ac9@x N3aca@ls) (and (pair? N3aca@ls) (or (N2ebb@free-id=? N3ac9@x (car N3aca@ls)) (N3ab4@free-id-member? N3ac9@x (cdr N3aca@ls))))))) (let N3ab9@f ((N3ab5@cls* N3aae@cls*) (N3ab6@seen* '())) (if (not (null? N3ab5@cls*)) (let ((N3abb@t (car N3ab5@cls*))) (let ((N3abd@ls/false (N30bc@syntax-dispatch N3abb@t '(any . any)))) (if N3abd@ls/false (apply (lambda (N3abf@kwd N3ac0@rest) (if (or (not (N2eb5@id? N3abf@kwd)) (not (N3ab4@free-id-member? N3abf@kwd N3ab2@valid-kwds))) (N319c@syntax-violation '#f '"not a valid define-record-type keyword" N3abf@kwd) (if (N2ec1@bound-id-member? N3abf@kwd N3ab6@seen*) (N319c@syntax-violation '#f '"duplicate use of keyword " N3aad@x N3abf@kwd) (N3ab9@f (cdr N3ab5@cls*) (cons N3abf@kwd N3ab6@seen*))))) N3abd@ls/false) (let ((N3ac3@t N3abb@t)) (let ((N3ac5@ls/false (N30bc@syntax-dispatch N3ac3@t 'any))) (if N3ac5@ls/false (apply (lambda (N3ac7@cls) (N319c@syntax-violation '#f '"malformed define-record-type clause" N3ac7@cls)) N3ac5@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3ac3@t))))))) (void))))))) (let ((N3aa5@t N3a81@x)) (let ((N3aa7@ls/false (N30bc@syntax-dispatch N3aa5@t '(_ any . each-any)))) (if N3aa7@ls/false (apply (lambda (N3aa9@namespec N3aaa@clause*) (begin (N3aa4@verify-clauses N3a81@x N3aaa@clause*) (N3aa2@do-define-record N3aa9@namespec N3aaa@clause*))) N3aa7@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3aa5@t))))))) (set! N4b8c@N30b0@define-record-type-macro N30b0@define-record-type-macro) (set! N30b2@define-condition-type-macro (lambda (N3c7d@x) (letrec* ((N3c80@mkname (lambda (N3cad@name N3cae@suffix) (N31a0@datum->syntax N3cad@name (string->symbol (string-append (symbol->string (N31a2@syntax->datum N3cad@name)) N3cae@suffix)))))) (let ((N3c81@t N3c7d@x)) (let ((N3c83@ls/false (N30bc@syntax-dispatch N3c81@t '(any any any any any . #(each (any any)))))) (if (and N3c83@ls/false (apply (lambda (N3c85@ctxt N3c86@name N3c87@super N3c88@constructor N3c89@predicate N3c8a@field* N3c8b@accessor*) (and (N2eb5@id? N3c86@name) (N2eb5@id? N3c87@super) (N2eb5@id? N3c88@constructor) (N2eb5@id? N3c89@predicate) (for-all N2eb5@id? N3c8a@field*) (for-all N2eb5@id? N3c8b@accessor*))) N3c83@ls/false)) (apply (lambda (N3c93@ctxt N3c94@name N3c95@super N3c96@constructor N3c97@predicate N3c98@field* N3c99@accessor*) (let ((N3ca1@aux-accessor* (map (lambda (N3ca3@x) (gensym)) N3c99@accessor*))) (N3072@bless (cons 'begin (cons (cons 'define-record-type (cons (list N3c94@name N3c96@constructor (gensym)) (cons (list 'parent N3c95@super) (cons (cons 'fields (map (lambda (N3ca5@field N3ca6@aux) (list 'immutable N3ca5@field N3ca6@aux)) N3c98@field* N3ca1@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define N3c97@predicate (list 'condition-predicate (list 'record-type-descriptor N3c94@name))) (map (lambda (N3ca9@accessor N3caa@aux) (list 'define N3ca9@accessor (list 'condition-accessor (list 'record-type-descriptor N3c94@name) N3caa@aux))) N3c99@accessor* N3ca1@aux-accessor*))))))) N3c83@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3c81@t))))))) (set! N4b8d@N30b2@define-condition-type-macro N30b2@define-condition-type-macro) (set! N30b4@incorrect-usage-macro (lambda (N3cb1@e) (N319c@syntax-violation '#f '"incorrect usage of auxiliary keyword" N3cb1@e))) (set! N4b8e@N30b4@incorrect-usage-macro N30b4@incorrect-usage-macro) (set! N30b6@parameterize-macro (lambda (N3cb3@e) (let ((N3cb5@t N3cb3@e)) (let ((N3cb7@ls/false (N30bc@syntax-dispatch N3cb5@t '(_ () any . each-any)))) (if N3cb7@ls/false (apply (lambda (N3cb9@b N3cba@b*) (N3072@bless (cons 'let (cons '() (cons N3cb9@b N3cba@b*))))) N3cb7@ls/false) (let ((N3cbd@t N3cb5@t)) (let ((N3cbf@ls/false (N30bc@syntax-dispatch N3cbd@t '(_ #(each (any any)) any . each-any)))) (if N3cbf@ls/false (apply (lambda (N3cc1@olhs* N3cc2@orhs* N3cc3@b N3cc4@b*) (let ((N3cc9@lhs* (N318a@generate-temporaries N3cc1@olhs*)) (N3cca@rhs* (N318a@generate-temporaries N3cc2@orhs*))) (N3072@bless (cons (list 'lambda (append N3cc9@lhs* N3cca@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (N3ccd@lhs N3cce@rhs) (list 'let (list (list 't (list N3ccd@lhs))) (list N3ccd@lhs N3cce@rhs) (cons 'set! (cons N3cce@rhs '(t))))) N3cc9@lhs* N3cca@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons N3cc3@b N3cc4@b*))) '(swap)))))) (append N3cc1@olhs* N3cc2@orhs*))))) N3cbf@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3cbd@t))))))))) (set! N4b8f@N30b6@parameterize-macro N30b6@parameterize-macro) (set! N30b8@foreign-call-transformer (lambda (N3cd1@e N3cd2@r N3cd3@mr) (let ((N3cd7@t N3cd1@e)) (let ((N3cd9@ls/false (N30bc@syntax-dispatch N3cd7@t '(_ any . each-any)))) (if N3cd9@ls/false (apply (lambda (N3cdb@name N3cdc@arg*) (cons 'foreign-call (cons (N30de@chi-expr N3cdb@name N3cd2@r N3cd3@mr) (N30da@chi-expr* N3cdc@arg* N3cd2@r N3cd3@mr)))) N3cd9@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3cd7@t)))))) (set! N4b90@N30b8@foreign-call-transformer N30b8@foreign-call-transformer) (set! N30ba@convert-pattern (lambda (N3cdf@pattern N3ce0@keys) (letrec* ((N3ce4@cvt* (lambda (N3d83@p* N3d84@n N3d85@ids) (if (null? N3d83@p*) (values '() N3d85@ids) (call-with-values (lambda () (N3ce4@cvt* (cdr N3d83@p*) N3d84@n N3d85@ids)) (lambda (N3d8d@N3d8a N3d8e@N3d8c) (let ((N3d91@ids N3d8e@N3d8c) (N3d92@y N3d8d@N3d8a)) (call-with-values (lambda () (N3ce6@cvt (car N3d83@p*) N3d84@n N3d91@ids)) (lambda (N3d99@N3d96 N3d9a@N3d98) (let ((N3d9d@ids N3d9a@N3d98) (N3d9e@x N3d99@N3d96)) (values (cons N3d9e@x N3d92@y) N3d9d@ids)))))))))) (N3ce6@cvt (lambda (N3ce7@p N3ce8@n N3ce9@ids) (let ((N3ced@t N3ce7@p)) (let ((N3cef@ls/false (N30bc@syntax-dispatch N3ced@t 'any))) (if (and N3cef@ls/false (apply (lambda (N3cf1@id) (N2eb5@id? N3cf1@id)) N3cef@ls/false)) (apply (lambda (N3cf3@id) (if (N2ec1@bound-id-member? N3ce7@p N3ce0@keys) (values (vector 'free-id N3ce7@p) N3ce9@ids) (if (N2ebb@free-id=? N3ce7@p (N3044@scheme-stx '_)) (values '_ N3ce9@ids) (values 'any (cons (cons N3ce7@p N3ce8@n) N3ce9@ids))))) N3cef@ls/false) (let ((N3cf5@t N3ced@t)) (let ((N3cf7@ls/false (N30bc@syntax-dispatch N3cf5@t '(any any)))) (if (and N3cf7@ls/false (apply (lambda (N3cf9@p N3cfa@dots) (N30be@ellipsis? N3cfa@dots)) N3cf7@ls/false)) (apply (lambda (N3cfd@p N3cfe@dots) (call-with-values (lambda () (N3ce6@cvt N3cfd@p (+ N3ce8@n '1) N3ce9@ids)) (lambda (N3d05@N3d02 N3d06@N3d04) (let ((N3d09@ids N3d06@N3d04) (N3d0a@p N3d05@N3d02)) (values (if (eq? N3d0a@p 'any) 'each-any (vector 'each N3d0a@p)) N3d09@ids))))) N3cf7@ls/false) (let ((N3d0d@t N3cf5@t)) (let ((N3d0f@ls/false (N30bc@syntax-dispatch N3d0d@t '(any any . #(each+ any () any))))) (if (and N3d0f@ls/false (apply (lambda (N3d11@x N3d12@dots N3d13@ys N3d14@z) (N30be@ellipsis? N3d12@dots)) N3d0f@ls/false)) (apply (lambda (N3d19@x N3d1a@dots N3d1b@ys N3d1c@z) (call-with-values (lambda () (N3ce6@cvt N3d1c@z N3ce8@n N3ce9@ids)) (lambda (N3d25@N3d22 N3d26@N3d24) (let ((N3d29@ids N3d26@N3d24) (N3d2a@z N3d25@N3d22)) (call-with-values (lambda () (N3ce4@cvt* N3d1b@ys N3ce8@n N3d29@ids)) (lambda (N3d31@N3d2e N3d32@N3d30) (let ((N3d35@ids N3d32@N3d30) (N3d36@ys N3d31@N3d2e)) (call-with-values (lambda () (N3ce6@cvt N3d19@x (+ N3ce8@n '1) N3d35@ids)) (lambda (N3d3d@N3d3a N3d3e@N3d3c) (let ((N3d41@ids N3d3e@N3d3c) (N3d42@x N3d3d@N3d3a)) (values (vector 'each+ N3d42@x (reverse N3d36@ys) N3d2a@z) N3d41@ids))))))))))) N3d0f@ls/false) (let ((N3d45@t N3d0d@t)) (let ((N3d47@ls/false (N30bc@syntax-dispatch N3d45@t '(any . any)))) (if N3d47@ls/false (apply (lambda (N3d49@x N3d4a@y) (call-with-values (lambda () (N3ce6@cvt N3d4a@y N3ce8@n N3ce9@ids)) (lambda (N3d51@N3d4e N3d52@N3d50) (let ((N3d55@ids N3d52@N3d50) (N3d56@y N3d51@N3d4e)) (call-with-values (lambda () (N3ce6@cvt N3d49@x N3ce8@n N3d55@ids)) (lambda (N3d5d@N3d5a N3d5e@N3d5c) (let ((N3d61@ids N3d5e@N3d5c) (N3d62@x N3d5d@N3d5a)) (values (cons N3d62@x N3d56@y) N3d61@ids)))))))) N3d47@ls/false) (let ((N3d65@t N3d45@t)) (let ((N3d67@ls/false (N30bc@syntax-dispatch N3d65@t '()))) (if N3d67@ls/false (apply (lambda () (values '() N3ce9@ids)) N3d67@ls/false) (let ((N3d69@t N3d65@t)) (let ((N3d6b@ls/false (N30bc@syntax-dispatch N3d69@t '#(vector each-any)))) (if (and N3d6b@ls/false (apply (lambda (N3d6d@p) (not (N2e81@stx? N3d6d@p))) N3d6b@ls/false)) (apply (lambda (N3d6f@p) (call-with-values (lambda () (N3ce6@cvt N3d6f@p N3ce8@n N3ce9@ids)) (lambda (N3d75@N3d72 N3d76@N3d74) (let ((N3d79@ids N3d76@N3d74) (N3d7a@p N3d75@N3d72)) (values (vector 'vector N3d7a@p) N3d79@ids))))) N3d6b@ls/false) (let ((N3d7d@t N3d69@t)) (let ((N3d7f@ls/false (N30bc@syntax-dispatch N3d7d@t 'any))) (if N3d7f@ls/false (apply (lambda (N3d81@datum) (values (vector 'atom (N2ec9@stx->datum N3d81@datum)) N3ce9@ids)) N3d7f@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3d7d@t))))))))))))))))))))))))) (N3ce6@cvt N3cdf@pattern '0 '())))) (set! N4b91@N30ba@convert-pattern N30ba@convert-pattern) (set! N30bc@syntax-dispatch (letrec* ((N3da2@stx^ (lambda (N3e7d@e N3e7e@m* N3e7f@s* N3e80@ae*) (if (and (null? N3e7e@m*) (null? N3e7f@s*) (null? N3e80@ae*)) N3e7d@e (N2e9d@mkstx N3e7d@e N3e7e@m* N3e7f@s* N3e80@ae*)))) (N3da4@match-each (lambda (N3e5d@e N3e5e@p N3e5f@m* N3e60@s* N3e61@ae*) (if (pair? N3e5d@e) (let ((N3e67@first (N3db0@match (car N3e5d@e) N3e5e@p N3e5f@m* N3e60@s* N3e61@ae* '()))) (and N3e67@first (let ((N3e69@rest (N3da4@match-each (cdr N3e5d@e) N3e5e@p N3e5f@m* N3e60@s* N3e61@ae*))) (and N3e69@rest (cons N3e67@first N3e69@rest))))) (if (null? N3e5d@e) '() (if (N2e81@stx? N3e5d@e) (and (not (N2e3b@top-marked? N3e5f@m*)) (call-with-values (lambda () (join-wraps N3e5f@m* N3e60@s* N3e61@ae* N3e5d@e)) (lambda (N3e71@N3e6c N3e72@N3e6e N3e73@N3e70) (let ((N3e77@ae* N3e73@N3e70) (N3e78@s* N3e72@N3e6e) (N3e79@m* N3e71@N3e6c)) (N3da4@match-each (N2e83@stx-expr N3e5d@e) N3e5e@p N3e79@m* N3e78@s* N3e77@ae*))))) (if (N29f9@N28cb@annotation? N3e5d@e) (N3da4@match-each (N29fb@N28cf@annotation-expression N3e5d@e) N3e5e@p N3e5f@m* N3e60@s* N3e61@ae*) '#f)))))) (N3da6@match-each+ (lambda (N3e1d@e N3e1e@x-pat N3e1f@y-pat N3e20@z-pat N3e21@m* N3e22@s* N3e23@ae* N3e24@r) (let N3e35@f ((N3e2d@e N3e1d@e) (N3e2e@m* N3e21@m*) (N3e2f@s* N3e22@s*) (N3e30@ae* N3e23@ae*)) (if (pair? N3e2d@e) (call-with-values (lambda () (N3e35@f (cdr N3e2d@e) N3e2e@m* N3e2f@s* N3e30@ae*)) (lambda (N3e3d@N3e38 N3e3e@N3e3a N3e3f@N3e3c) (let ((N3e43@r N3e3f@N3e3c) (N3e44@y-pat N3e3e@N3e3a) (N3e45@xr* N3e3d@N3e38)) (if N3e43@r (if (null? N3e44@y-pat) (let ((N3e49@xr (N3db0@match (car N3e2d@e) N3e1e@x-pat N3e2e@m* N3e2f@s* N3e30@ae* '()))) (if N3e49@xr (values (cons N3e49@xr N3e45@xr*) N3e44@y-pat N3e43@r) (values '#f '#f '#f))) (values '() (cdr N3e44@y-pat) (N3db0@match (car N3e2d@e) (car N3e44@y-pat) N3e2e@m* N3e2f@s* N3e30@ae* N3e43@r))) (values '#f '#f '#f))))) (if (N2e81@stx? N3e2d@e) (if (N2e3b@top-marked? N3e2e@m*) (values '() N3e1f@y-pat (N3db0@match N3e2d@e N3e20@z-pat N3e2e@m* N3e2f@s* N3e30@ae* N3e24@r)) (call-with-values (lambda () (join-wraps N3e2e@m* N3e2f@s* N3e30@ae* N3e2d@e)) (lambda (N3e51@N3e4c N3e52@N3e4e N3e53@N3e50) (let ((N3e57@ae* N3e53@N3e50) (N3e58@s* N3e52@N3e4e) (N3e59@m* N3e51@N3e4c)) (N3e35@f (N2e83@stx-expr N3e2d@e) N3e59@m* N3e58@s* N3e57@ae*))))) (if (N29f9@N28cb@annotation? N3e2d@e) (N3e35@f (N29fb@N28cf@annotation-expression N3e2d@e) N3e2e@m* N3e2f@s* N3e30@ae*) (values '() N3e1f@y-pat (N3db0@match N3e2d@e N3e20@z-pat N3e2e@m* N3e2f@s* N3e30@ae* N3e24@r)))))))) (N3da8@match-each-any (lambda (N3e01@e N3e02@m* N3e03@s* N3e04@ae*) (if (pair? N3e01@e) (let ((N3e09@l (N3da8@match-each-any (cdr N3e01@e) N3e02@m* N3e03@s* N3e04@ae*))) (and N3e09@l (cons (N3da2@stx^ (car N3e01@e) N3e02@m* N3e03@s* N3e04@ae*) N3e09@l))) (if (null? N3e01@e) '() (if (N2e81@stx? N3e01@e) (and (not (N2e3b@top-marked? N3e02@m*)) (call-with-values (lambda () (join-wraps N3e02@m* N3e03@s* N3e04@ae* N3e01@e)) (lambda (N3e11@N3e0c N3e12@N3e0e N3e13@N3e10) (let ((N3e17@ae* N3e13@N3e10) (N3e18@s* N3e12@N3e0e) (N3e19@m* N3e11@N3e0c)) (N3da8@match-each-any (N2e83@stx-expr N3e01@e) N3e19@m* N3e18@s* N3e17@ae*))))) (if (N29f9@N28cb@annotation? N3e01@e) (N3da8@match-each-any (N29fb@N28cf@annotation-expression N3e01@e) N3e02@m* N3e03@s* N3e04@ae*) '#f)))))) (N3daa@match-empty (lambda (N3dfb@p N3dfc@r) (if (null? N3dfb@p) N3dfc@r (if (eq? N3dfb@p '_) N3dfc@r (if (eq? N3dfb@p 'any) (cons '() N3dfc@r) (if (pair? N3dfb@p) (N3daa@match-empty (car N3dfb@p) (N3daa@match-empty (cdr N3dfb@p) N3dfc@r)) (if (eq? N3dfb@p 'each-any) (cons '() N3dfc@r) (let ((N3dff@t (vector-ref N3dfb@p '0))) (if (memv N3dff@t '(each)) (N3daa@match-empty (vector-ref N3dfb@p '1) N3dfc@r) (if (memv N3dff@t '(each+)) (N3daa@match-empty (vector-ref N3dfb@p '1) (N3daa@match-empty (reverse (vector-ref N3dfb@p '2)) (N3daa@match-empty (vector-ref N3dfb@p '3) N3dfc@r))) (if (memv N3dff@t '(free-id atom)) N3dfc@r (if (memv N3dff@t '(scheme-id atom)) N3dfc@r (if (memv N3dff@t '(vector)) (N3daa@match-empty (vector-ref N3dfb@p '1) N3dfc@r) (assertion-violation 'syntax-dispatch '"invalid pattern" N3dfb@p)))))))))))))) (N3dac@combine (lambda (N3df7@r* N3df8@r) (if (null? (car N3df7@r*)) N3df8@r (cons (map car N3df7@r*) (N3dac@combine (map cdr N3df7@r*) N3df8@r))))) (N3dae@match* (lambda (N3dd3@e N3dd4@p N3dd5@m* N3dd6@s* N3dd7@ae* N3dd8@r) (if (null? N3dd4@p) (and (null? N3dd3@e) N3dd8@r) (if (pair? N3dd4@p) (and (pair? N3dd3@e) (N3db0@match (car N3dd3@e) (car N3dd4@p) N3dd5@m* N3dd6@s* N3dd7@ae* (N3db0@match (cdr N3dd3@e) (cdr N3dd4@p) N3dd5@m* N3dd6@s* N3dd7@ae* N3dd8@r))) (if (eq? N3dd4@p 'each-any) (let ((N3ddf@l (N3da8@match-each-any N3dd3@e N3dd5@m* N3dd6@s* N3dd7@ae*))) (and N3ddf@l (cons N3ddf@l N3dd8@r))) (let ((N3de1@t (vector-ref N3dd4@p '0))) (if (memv N3de1@t '(each)) (if (null? N3dd3@e) (N3daa@match-empty (vector-ref N3dd4@p '1) N3dd8@r) (let ((N3de3@r* (N3da4@match-each N3dd3@e (vector-ref N3dd4@p '1) N3dd5@m* N3dd6@s* N3dd7@ae*))) (and N3de3@r* (N3dac@combine N3de3@r* N3dd8@r)))) (if (memv N3de1@t '(free-id)) (and (symbol? N3dd3@e) (N2e3b@top-marked? N3dd5@m*) (N2ebb@free-id=? (N3da2@stx^ N3dd3@e N3dd5@m* N3dd6@s* N3dd7@ae*) (vector-ref N3dd4@p '1)) N3dd8@r) (if (memv N3de1@t '(scheme-id)) (and (symbol? N3dd3@e) (N2e3b@top-marked? N3dd5@m*) (N2ebb@free-id=? (N3da2@stx^ N3dd3@e N3dd5@m* N3dd6@s* N3dd7@ae*) (N3044@scheme-stx (vector-ref N3dd4@p '1))) N3dd8@r) (if (memv N3de1@t '(each+)) (call-with-values (lambda () (N3da6@match-each+ N3dd3@e (vector-ref N3dd4@p '1) (vector-ref N3dd4@p '2) (vector-ref N3dd4@p '3) N3dd5@m* N3dd6@s* N3dd7@ae* N3dd8@r)) (lambda (N3deb@N3de6 N3dec@N3de8 N3ded@N3dea) (let ((N3df1@r N3ded@N3dea) (N3df2@y-pat N3dec@N3de8) (N3df3@xr* N3deb@N3de6)) (and N3df1@r (null? N3df2@y-pat) (if (null? N3df3@xr*) (N3daa@match-empty (vector-ref N3dd4@p '1) N3df1@r) (N3dac@combine N3df3@xr* N3df1@r)))))) (if (memv N3de1@t '(atom)) (and (fast-equal? (vector-ref N3dd4@p '1) (N2ec7@strip N3dd3@e N3dd5@m*)) N3dd8@r) (if (memv N3de1@t '(vector)) (and (vector? N3dd3@e) (N3db0@match (vector->list N3dd3@e) (vector-ref N3dd4@p '1) N3dd5@m* N3dd6@s* N3dd7@ae* N3dd8@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" N3dd4@p))))))))))))) (N3db0@match (lambda (N3db5@e N3db6@p N3db7@m* N3db8@s* N3db9@ae* N3dba@r) (if (not N3dba@r) '#f (if (eq? N3db6@p '_) N3dba@r (if (eq? N3db6@p 'any) (cons (N3da2@stx^ N3db5@e N3db7@m* N3db8@s* N3db9@ae*) N3dba@r) (if (N2e81@stx? N3db5@e) (and (not (N2e3b@top-marked? N3db7@m*)) (call-with-values (lambda () (join-wraps N3db7@m* N3db8@s* N3db9@ae* N3db5@e)) (lambda (N3dc7@N3dc2 N3dc8@N3dc4 N3dc9@N3dc6) (let ((N3dcd@ae* N3dc9@N3dc6) (N3dce@s* N3dc8@N3dc4) (N3dcf@m* N3dc7@N3dc2)) (N3db0@match (N2e83@stx-expr N3db5@e) N3db6@p N3dcf@m* N3dce@s* N3dcd@ae* N3dba@r))))) (if (N29f9@N28cb@annotation? N3db5@e) (N3db0@match (N29fb@N28cf@annotation-expression N3db5@e) N3db6@p N3db7@m* N3db8@s* N3db9@ae* N3dba@r) (N3dae@match* N3db5@e N3db6@p N3db7@m* N3db8@s* N3db9@ae* N3dba@r))))))))) (lambda (N3db1@e N3db2@p) (N3db0@match N3db1@e N3db2@p '() '() '() '())))) (set! N4b92@N30bc@syntax-dispatch N30bc@syntax-dispatch) (set! N30be@ellipsis? (lambda (N3e85@x) (and (N2eb5@id? N3e85@x) (N2ebb@free-id=? N3e85@x (N3044@scheme-stx '...))))) (set! N4b93@N30be@ellipsis? N30be@ellipsis?) (set! N30c0@underscore? (lambda (N3e87@x) (and (N2eb5@id? N3e87@x) (N2ebb@free-id=? N3e87@x (N3044@scheme-stx '_))))) (set! N4b94@N30c0@underscore? N30c0@underscore?) (set! N30c2@verify-literals (lambda (N3e89@lits N3e8a@expr) (for-each (lambda (N3e8d@x) (if (or (not (N2eb5@id? N3e8d@x)) (N30be@ellipsis? N3e8d@x) (N30c0@underscore? N3e8d@x)) (N319c@syntax-violation '#f '"invalid literal" N3e8a@expr N3e8d@x) (void))) N3e89@lits))) (set! N4b95@N30c2@verify-literals N30c2@verify-literals) (set! N30c4@syntax-case-transformer (letrec* ((N3e90@build-dispatch-call (lambda (N3f01@pvars N3f02@expr N3f03@y N3f04@r N3f05@mr) (let ((N3f0b@ids (map car N3f01@pvars)) (N3f0c@levels (map cdr N3f01@pvars))) (let ((N3f0f@labels (map N2e41@gen-label N3f0b@ids)) (N3f10@new-vars (map N2e3d@gen-lexical N3f0b@ids))) (let ((N3f13@body (N30de@chi-expr (N2ea1@add-subst (N2e75@make-full-rib N3f0b@ids N3f0f@labels) N3f02@expr) (append (map (lambda (N3f15@label N3f16@var N3f17@level) (cons N3f15@label (N2ecf@make-binding 'syntax (cons N3f16@var N3f17@level)))) N3f0f@labels N3f10@new-vars (map cdr N3f01@pvars)) N3f04@r) N3f05@mr))) (list '(primitive apply) (N2e18@N2d4a@build-lambda '#f N3f10@new-vars N3f13@body) N3f03@y)))))) (N3e92@invalid-ids-error (lambda (N3ef5@id* N3ef6@e N3ef7@class) (let N3eff@find ((N3efb@id* N3ef5@id*) (N3efc@ok* '())) (if (null? N3efb@id*) (N319c@syntax-violation '#f '"invalid syntax" N3ef6@e) (if (N2eb5@id? (car N3efb@id*)) (if (N2ec1@bound-id-member? (car N3efb@id*) N3efc@ok*) (N3198@syntax-error (car N3efb@id*) '"duplicate " N3ef7@class) (N3eff@find (cdr N3efb@id*) (cons (car N3efb@id*) N3efc@ok*))) (N3198@syntax-error (car N3efb@id*) '"invalid " N3ef7@class)))))) (N3e94@gen-clause (lambda (N3ecd@x N3ece@keys N3ecf@clauses N3ed0@r N3ed1@mr N3ed2@pat N3ed3@fender N3ed4@expr) (call-with-values (lambda () (N30ba@convert-pattern N3ed2@pat N3ece@keys)) (lambda (N3ee1@N3ede N3ee2@N3ee0) (let ((N3ee5@pvars N3ee2@N3ee0) (N3ee6@p N3ee1@N3ede)) (if (not (N2ebf@distinct-bound-ids? (map car N3ee5@pvars))) (N3e92@invalid-ids-error (map car N3ee5@pvars) N3ed2@pat '"pattern variable") (if (not (for-all (lambda (N3ee9@x) (not (N30be@ellipsis? (car N3ee9@x)))) N3ee5@pvars)) (N319c@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" N3ed2@pat) (let ((N3eeb@y (N2e3d@gen-lexical 'tmp))) (let ((N3eed@test (if (eq? N3ed3@fender '#t) N3eeb@y (let ((N3eef@call (N3e90@build-dispatch-call N3ee5@pvars N3ed3@fender N3eeb@y N3ed0@r N3ed1@mr))) (list 'if N3eeb@y N3eef@call (list 'quote '#f)))))) (let ((N3ef1@conseq (N3e90@build-dispatch-call N3ee5@pvars N3ed4@expr N3eeb@y N3ed0@r N3ed1@mr))) (let ((N3ef3@altern (N3e96@gen-syntax-case N3ecd@x N3ece@keys N3ecf@clauses N3ed0@r N3ed1@mr))) (list (N2e18@N2d4a@build-lambda '#f (list N3eeb@y) (list 'if N3eed@test N3ef1@conseq N3ef3@altern)) (list '(primitive syntax-dispatch) N3ecd@x (list 'quote N3ee6@p)))))))))))))) (N3e96@gen-syntax-case (lambda (N3eab@x N3eac@keys N3ead@clauses N3eae@r N3eaf@mr) (if (null? N3ead@clauses) (list '(primitive syntax-error) N3eab@x) (let ((N3eb5@t (car N3ead@clauses))) (let ((N3eb7@ls/false (N30bc@syntax-dispatch N3eb5@t '(any any)))) (if N3eb7@ls/false (apply (lambda (N3eb9@pat N3eba@expr) (if (and (N2eb5@id? N3eb9@pat) (not (N2ec1@bound-id-member? N3eb9@pat N3eac@keys)) (not (N30be@ellipsis? N3eb9@pat))) (if (N2ebb@free-id=? N3eb9@pat (N3044@scheme-stx '_)) (N30de@chi-expr N3eba@expr N3eae@r N3eaf@mr) (let ((N3ebd@lab (N2e41@gen-label N3eb9@pat)) (N3ebe@lex (N2e3d@gen-lexical N3eb9@pat))) (let ((N3ec1@body (N30de@chi-expr (N2ea1@add-subst (N2e75@make-full-rib (list N3eb9@pat) (list N3ebd@lab)) N3eba@expr) (cons (cons N3ebd@lab (N2ecf@make-binding 'syntax (cons N3ebe@lex '0))) N3eae@r) N3eaf@mr))) (list (N2e18@N2d4a@build-lambda '#f (list N3ebe@lex) N3ec1@body) N3eab@x)))) (N3e94@gen-clause N3eab@x N3eac@keys (cdr N3ead@clauses) N3eae@r N3eaf@mr N3eb9@pat '#t N3eba@expr))) N3eb7@ls/false) (let ((N3ec3@t N3eb5@t)) (let ((N3ec5@ls/false (N30bc@syntax-dispatch N3ec3@t '(any any any)))) (if N3ec5@ls/false (apply (lambda (N3ec7@pat N3ec8@fender N3ec9@expr) (N3e94@gen-clause N3eab@x N3eac@keys (cdr N3ead@clauses) N3eae@r N3eaf@mr N3ec7@pat N3ec8@fender N3ec9@expr)) N3ec5@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3ec3@t))))))))))) (lambda (N3e97@e N3e98@r N3e99@mr) (let ((N3e9d@t N3e97@e)) (let ((N3e9f@ls/false (N30bc@syntax-dispatch N3e9d@t '(_ any each-any . each-any)))) (if N3e9f@ls/false (apply (lambda (N3ea1@expr N3ea2@keys N3ea3@clauses) (begin (N30c2@verify-literals N3ea2@keys N3e97@e) (let ((N3ea7@x (N2e3d@gen-lexical 'tmp))) (let ((N3ea9@body (N3e96@gen-syntax-case N3ea7@x N3ea2@keys N3ea3@clauses N3e98@r N3e99@mr))) (list (N2e18@N2d4a@build-lambda '#f (list N3ea7@x) N3ea9@body) (N30de@chi-expr N3ea1@expr N3e98@r N3e99@mr)))))) N3e9f@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3e9d@t))))))) (set! N4b96@N30c4@syntax-case-transformer N30c4@syntax-case-transformer) (set! N30c6@ellipsis-map (lambda (N3f1b@proc N3f1c@ls . N3f1f@ls*) (letrec* ((N3f22@who '...)) (begin (if (not (list? N3f1c@ls)) (assertion-violation N3f22@who '"not a list" N3f1c@ls) (void)) (if (not (null? N3f1f@ls*)) (let ((N3f23@n (length N3f1c@ls))) (for-each (lambda (N3f25@x) (begin (if (not (list? N3f25@x)) (assertion-violation N3f22@who '"not a list" N3f25@x) (void)) (if (not (= (length N3f25@x) N3f23@n)) (assertion-violation N3f22@who '"length mismatch" N3f1c@ls N3f25@x) (void)))) N3f1f@ls*)) (void)) (apply map N3f1b@proc N3f1c@ls N3f1f@ls*))))) (set! N4b97@N30c6@ellipsis-map N30c6@ellipsis-map) (set! N30c8@syntax-transformer (letrec* ((N3f28@gen-syntax (lambda (N3f9f@src N3fa0@e N3fa1@r N3fa2@maps N3fa3@ellipsis? N3fa4@vec?) (let ((N3fab@t N3fa0@e)) (let ((N3fad@ls/false (N30bc@syntax-dispatch N3fab@t 'any))) (if (and N3fad@ls/false (apply (lambda (N3faf@dots) (N3fa3@ellipsis? N3faf@dots)) N3fad@ls/false)) (apply (lambda (N3fb1@dots) (N319c@syntax-violation '#f '"misplaced ellipsis in syntax form" N3f9f@src)) N3fad@ls/false) (let ((N3fb3@t N3fab@t)) (let ((N3fb5@ls/false (N30bc@syntax-dispatch N3fb3@t 'any))) (if (and N3fb5@ls/false (apply (lambda (N3fb7@id) (N2eb5@id? N3fb7@id)) N3fb5@ls/false)) (apply (lambda (N3fb9@id) (let ((N3fbb@label (N2ecb@id->label N3fa0@e))) (let ((N3fbd@b (N2ecd@label->binding N3fbb@label N3fa1@r))) (if (eq? (N2ed1@binding-type N3fbd@b) 'syntax) (call-with-values (lambda () (let ((N3fc3@var.lev (N2ed3@binding-value N3fbd@b))) (N3f2a@gen-ref N3f9f@src (car N3fc3@var.lev) (cdr N3fc3@var.lev) N3fa2@maps))) (lambda (N3fc5@N3fc0 N3fc6@N3fc2) (let ((N3fc9@maps N3fc6@N3fc2) (N3fca@var N3fc5@N3fc0)) (values (list 'ref N3fca@var) N3fc9@maps)))) (values (list 'quote N3fa0@e) N3fa2@maps))))) N3fb5@ls/false) (let ((N3fcd@t N3fb3@t)) (let ((N3fcf@ls/false (N30bc@syntax-dispatch N3fcd@t '(any any)))) (if (and N3fcf@ls/false (apply (lambda (N3fd1@dots N3fd2@e) (N3fa3@ellipsis? N3fd1@dots)) N3fcf@ls/false)) (apply (lambda (N3fd5@dots N3fd6@e) (if N3fa4@vec? (N319c@syntax-violation '#f '"misplaced ellipsis in syntax form" N3f9f@src) (N3f28@gen-syntax N3f9f@src N3fd6@e N3fa1@r N3fa2@maps (lambda (N3fd9@x) '#f) '#f))) N3fcf@ls/false) (let ((N3fdb@t N3fcd@t)) (let ((N3fdd@ls/false (N30bc@syntax-dispatch N3fdb@t '(any any . any)))) (if (and N3fdd@ls/false (apply (lambda (N3fdf@x N3fe0@dots N3fe1@y) (N3fa3@ellipsis? N3fe0@dots)) N3fdd@ls/false)) (apply (lambda (N3fe5@x N3fe6@dots N3fe7@y) (let N3ffd@f ((N3feb@y N3fe7@y) (N3fec@k (lambda (N3fef@maps) (call-with-values (lambda () (N3f28@gen-syntax N3f9f@src N3fe5@x N3fa1@r (cons '() N3fef@maps) N3fa3@ellipsis? '#f)) (lambda (N3ff5@N3ff2 N3ff6@N3ff4) (let ((N3ff9@maps N3ff6@N3ff4) (N3ffa@x N3ff5@N3ff2)) (if (null? (car N3ff9@maps)) (N319c@syntax-violation '#f '"extra ellipsis in syntax form" N3f9f@src) (values (N3f30@gen-map N3ffa@x (car N3ff9@maps)) (cdr N3ff9@maps))))))))) (let ((N3fff@t N3feb@y)) (let ((N4001@ls/false (N30bc@syntax-dispatch N3fff@t '()))) (if N4001@ls/false (apply (lambda () (N3fec@k N3fa2@maps)) N4001@ls/false) (let ((N4003@t N3fff@t)) (let ((N4005@ls/false (N30bc@syntax-dispatch N4003@t '(any . any)))) (if (and N4005@ls/false (apply (lambda (N4007@dots N4008@y) (N3fa3@ellipsis? N4007@dots)) N4005@ls/false)) (apply (lambda (N400b@dots N400c@y) (N3ffd@f N400c@y (lambda (N400f@maps) (call-with-values (lambda () (N3fec@k (cons '() N400f@maps))) (lambda (N4015@N4012 N4016@N4014) (let ((N4019@maps N4016@N4014) (N401a@x N4015@N4012)) (if (null? (car N4019@maps)) (N319c@syntax-violation '#f '"extra ellipsis in syntax form" N3f9f@src) (values (N3f2e@gen-mappend N401a@x (car N4019@maps)) (cdr N4019@maps))))))))) N4005@ls/false) (let ((N401d@t N4003@t)) (let ((N401f@ls/false (N30bc@syntax-dispatch N401d@t '_))) (if N401f@ls/false (apply (lambda () (call-with-values (lambda () (N3f28@gen-syntax N3f9f@src N3feb@y N3fa1@r N3fa2@maps N3fa3@ellipsis? N3fa4@vec?)) (lambda (N4025@N4022 N4026@N4024) (let ((N4029@maps N4026@N4024) (N402a@y N4025@N4022)) (call-with-values (lambda () (N3fec@k N4029@maps)) (lambda (N4031@N402e N4032@N4030) (let ((N4035@maps N4032@N4030) (N4036@x N4031@N402e)) (values (N3f2c@gen-append N4036@x N402a@y) N4035@maps)))))))) N401f@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N401d@t)))))))))))) N3fdd@ls/false) (let ((N4039@t N3fdb@t)) (let ((N403b@ls/false (N30bc@syntax-dispatch N4039@t '(any . any)))) (if N403b@ls/false (apply (lambda (N403d@x N403e@y) (call-with-values (lambda () (N3f28@gen-syntax N3f9f@src N403d@x N3fa1@r N3fa2@maps N3fa3@ellipsis? '#f)) (lambda (N4045@N4042 N4046@N4044) (let ((N4049@maps N4046@N4044) (N404a@xnew N4045@N4042)) (call-with-values (lambda () (N3f28@gen-syntax N3f9f@src N403e@y N3fa1@r N4049@maps N3fa3@ellipsis? N3fa4@vec?)) (lambda (N4051@N404e N4052@N4050) (let ((N4055@maps N4052@N4050) (N4056@ynew N4051@N404e)) (values (N3f32@gen-cons N3fa0@e N403d@x N403e@y N404a@xnew N4056@ynew) N4055@maps)))))))) N403b@ls/false) (let ((N4059@t N4039@t)) (let ((N405b@ls/false (N30bc@syntax-dispatch N4059@t '#(vector each-any)))) (if N405b@ls/false (apply (lambda (N405d@ls) (call-with-values (lambda () (N3f28@gen-syntax N3f9f@src N405d@ls N3fa1@r N3fa2@maps N3fa3@ellipsis? '#t)) (lambda (N4063@N4060 N4064@N4062) (let ((N4067@maps N4064@N4062) (N4068@lsnew N4063@N4060)) (values (N3f34@gen-vector N3fa0@e N405d@ls N4068@lsnew) N4067@maps))))) N405b@ls/false) (let ((N406b@t N4059@t)) (let ((N406d@ls/false (N30bc@syntax-dispatch N406b@t '_))) (if N406d@ls/false (apply (lambda () (values (list 'quote N3fa0@e) N3fa2@maps)) N406d@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N406b@t)))))))))))))))))))))))) (N3f2a@gen-ref (lambda (N3f85@src N3f86@var N3f87@level N3f88@maps) (if (= N3f87@level '0) (values N3f86@var N3f88@maps) (if (null? N3f88@maps) (N319c@syntax-violation '#f '"missing ellipsis in syntax form" N3f85@src) (call-with-values (lambda () (N3f2a@gen-ref N3f85@src N3f86@var (- N3f87@level '1) (cdr N3f88@maps))) (lambda (N3f91@N3f8e N3f92@N3f90) (let ((N3f95@outer-maps N3f92@N3f90) (N3f96@outer-var N3f91@N3f8e)) (let ((N3f99@t (assq N3f96@outer-var (car N3f88@maps)))) (if N3f99@t ((lambda (N3f9b@b) (values (cdr N3f9b@b) N3f88@maps)) N3f99@t) (let ((N3f9d@inner-var (N2e3d@gen-lexical 'tmp))) (values N3f9d@inner-var (cons (cons (cons N3f96@outer-var N3f9d@inner-var) (car N3f88@maps)) N3f95@outer-maps)))))))))))) (N3f2c@gen-append (lambda (N3f81@x N3f82@y) (if (fast-equal? N3f82@y ''()) N3f81@x (list 'append N3f81@x N3f82@y)))) (N3f2e@gen-mappend (lambda (N3f7d@e N3f7e@map-env) (list 'apply '(primitive append) (N3f30@gen-map N3f7d@e N3f7e@map-env)))) (N3f30@gen-map (lambda (N3f6b@e N3f6c@map-env) (let ((N3f6f@formals (map cdr N3f6c@map-env)) (N3f70@actuals (map (lambda (N3f73@x) (list 'ref (car N3f73@x))) N3f6c@map-env))) (if (eq? (car N3f6b@e) 'ref) (car N3f70@actuals) (if (for-all (lambda (N3f75@x) (and (eq? (car N3f75@x) 'ref) (memq (cadr N3f75@x) N3f6f@formals))) (cdr N3f6b@e)) (let ((N3f77@args (map (let ((N3f79@r (map cons N3f6f@formals N3f70@actuals))) (lambda (N3f7b@x) (cdr (assq (cadr N3f7b@x) N3f79@r)))) (cdr N3f6b@e)))) (cons 'map (cons (list 'primitive (car N3f6b@e)) N3f77@args))) (cons* 'map (list 'lambda N3f6f@formals N3f6b@e) N3f70@actuals)))))) (N3f32@gen-cons (lambda (N3f5b@e N3f5c@x N3f5d@y N3f5e@xnew N3f5f@ynew) (let ((N3f65@t (car N3f5f@ynew))) (if (memv N3f65@t '(quote)) (if (eq? (car N3f5e@xnew) 'quote) (let ((N3f67@xnew (cadr N3f5e@xnew)) (N3f68@ynew (cadr N3f5f@ynew))) (if (and (eq? N3f67@xnew N3f5c@x) (eq? N3f68@ynew N3f5d@y)) (list 'quote N3f5b@e) (list 'quote (cons N3f67@xnew N3f68@ynew)))) (if (null? (cadr N3f5f@ynew)) (list 'list N3f5e@xnew) (list 'cons N3f5e@xnew N3f5f@ynew))) (if (memv N3f65@t '(list)) (cons 'list (cons N3f5e@xnew (cdr N3f5f@ynew))) (list 'cons N3f5e@xnew N3f5f@ynew)))))) (N3f34@gen-vector (lambda (N3f55@e N3f56@ls N3f57@lsnew) (if (eq? (car N3f57@lsnew) 'quote) (if (eq? (cadr N3f57@lsnew) N3f56@ls) (list 'quote N3f55@e) (list 'quote (list->vector (cadr N3f57@lsnew)))) (if (eq? (car N3f57@lsnew) 'list) (cons 'vector (cdr N3f57@lsnew)) (list 'list->vector N3f57@lsnew))))) (N3f36@regen (lambda (N3f4f@x) (let ((N3f51@t (car N3f4f@x))) (if (memv N3f51@t '(ref)) (cadr N3f4f@x) (if (memv N3f51@t '(primitive)) (list 'primitive (cadr N3f4f@x)) (if (memv N3f51@t '(quote)) (list 'quote (cadr N3f4f@x)) (if (memv N3f51@t '(lambda)) (N2e18@N2d4a@build-lambda '#f (cadr N3f4f@x) (N3f36@regen (caddr N3f4f@x))) (if (memv N3f51@t '(map)) (let ((N3f53@ls (map N3f36@regen (cdr N3f4f@x)))) (cons '(primitive ellipsis-map) N3f53@ls)) (cons (list 'primitive (car N3f4f@x)) (map N3f36@regen (cdr N3f4f@x)))))))))))) (lambda (N3f37@e N3f38@r N3f39@mr) (let ((N3f3d@t N3f37@e)) (let ((N3f3f@ls/false (N30bc@syntax-dispatch N3f3d@t '(_ any)))) (if N3f3f@ls/false (apply (lambda (N3f41@x) (call-with-values (lambda () (N3f28@gen-syntax N3f37@e N3f41@x N3f38@r '() N30be@ellipsis? '#f)) (lambda (N3f47@N3f44 N3f48@N3f46) (let ((N3f4b@maps N3f48@N3f46) (N3f4c@e N3f47@N3f44)) (N3f36@regen N3f4c@e))))) N3f3f@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N3f3d@t))))))) (set! N4b98@N30c8@syntax-transformer N30c8@syntax-transformer) (set! N30ca@core-macro-transformer (lambda (N406f@name) (let ((N4071@t N406f@name)) (if (memv N4071@t '(quote)) N306c@quote-transformer (if (memv N4071@t '(lambda)) N3070@lambda-transformer (if (memv N4071@t '(case-lambda)) N306e@case-lambda-transformer (if (memv N4071@t '(letrec)) N3054@letrec-transformer (if (memv N4071@t '(letrec*)) N3056@letrec*-transformer (if (memv N4071@t '(let)) N3052@let-transformer (if (memv N4071@t '(if)) N3064@if-transformer (if (memv N4071@t '(and)) N3066@and-transformer (if (memv N4071@t '(or)) N3068@or-transformer (if (memv N4071@t '(foreign-call)) N30b8@foreign-call-transformer (if (memv N4071@t '(syntax-case)) N30c4@syntax-case-transformer (if (memv N4071@t '(syntax)) N30c8@syntax-transformer (if (memv N4071@t '(type-descriptor)) N305a@type-descriptor-transformer (if (memv N4071@t '(record-type-descriptor)) N305c@record-type-descriptor-transformer (if (memv N4071@t '(record-constructor-descriptor)) N305e@record-constructor-descriptor-transformer (if (memv N4071@t '(fluid-let-syntax)) N3058@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" N406f@name)))))))))))))))))))) (set! N4b99@N30ca@core-macro-transformer N30ca@core-macro-transformer) (set! N30cc@symbol-macro (lambda (N4073@x N4074@set) (let ((N4077@t N4073@x)) (let ((N4079@ls/false (N30bc@syntax-dispatch N4077@t '(_ any)))) (if (and N4079@ls/false (apply (lambda (N407b@name) (and (N2eb5@id? N407b@name) (memq (N2eb7@id->sym N407b@name) N4074@set))) N4079@ls/false)) (apply (lambda (N407d@name) (N3072@bless (list 'quote N407d@name))) N4079@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N4077@t)))))) (set! N4b9a@N30cc@symbol-macro N30cc@symbol-macro) (set! N30ce@macro-transformer (lambda (N407f@x) (if (procedure? N407f@x) N407f@x (if (symbol? N407f@x) (let ((N4081@t N407f@x)) (if (memv N4081@t '(define-record-type)) N30b0@define-record-type-macro (if (memv N4081@t '(define-struct)) N30ae@define-struct-macro (if (memv N4081@t '(include)) N30a4@include-macro (if (memv N4081@t '(cond)) N30a0@cond-macro (if (memv N4081@t '(let)) N3078@let-macro (if (memv N4081@t '(do)) N3098@do-macro (if (memv N4081@t '(or)) N309c@or-macro (if (memv N4081@t '(and)) N309e@and-macro (if (memv N4081@t '(let*)) N309a@let*-macro (if (memv N4081@t '(let-values)) N307a@let-values-macro (if (memv N4081@t '(let*-values)) N307c@let*-values-macro (if (memv N4081@t '(syntax-rules)) N30a8@syntax-rules-macro (if (memv N4081@t '(quasiquote)) N30aa@quasiquote-macro (if (memv N4081@t '(quasisyntax)) N30ac@quasisyntax-macro (if (memv N4081@t '(with-syntax)) N3074@with-syntax-macro (if (memv N4081@t '(when)) N3060@when-macro (if (memv N4081@t '(unless)) N3062@unless-macro (if (memv N4081@t '(case)) N306a@case-macro (if (memv N4081@t '(identifier-syntax)) N3096@identifier-syntax-macro (if (memv N4081@t '(time)) N308e@time-macro (if (memv N4081@t '(delay)) N3090@delay-macro (if (memv N4081@t '(assert)) N3092@assert-macro (if (memv N4081@t '(endianness)) N3094@endianness-macro (if (memv N4081@t '(guard)) N308a@guard-macro (if (memv N4081@t '(define-enumeration)) N308c@define-enumeration-macro (if (memv N4081@t '(trace-lambda)) N307e@trace-lambda-macro (if (memv N4081@t '(trace-define)) N3080@trace-define-macro (if (memv N4081@t '(trace-define-syntax)) N3082@trace-define-syntax-macro (if (memv N4081@t '(trace-let-syntax)) N3086@trace-let-syntax-macro (if (memv N4081@t '(trace-letrec-syntax)) N3088@trace-letrec-syntax-macro (if (memv N4081@t '(define-condition-type)) N30b2@define-condition-type-macro (if (memv N4081@t '(parameterize)) N30b6@parameterize-macro (if (memv N4081@t '(include-into)) N30a6@include-into-macro (if (memv N4081@t '(eol-style)) (lambda (N4083@x) (N30cc@symbol-macro N4083@x '(none lf cr crlf nel crnel ls))) (if (memv N4081@t '(error-handling-mode)) (lambda (N4085@x) (N30cc@symbol-macro N4085@x '(ignore raise replace))) (if (memv N4081@t '(buffer-mode)) (lambda (N4087@x) (N30cc@symbol-macro N4087@x '(none line block))) (if (memv N4081@t '(file-options)) N2e30@file-options-macro (if (memv N4081@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) N30b4@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" N407f@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" N407f@x))))) (set! N4b9b@N30ce@macro-transformer N30ce@macro-transformer) (set! N30d0@local-macro-transformer (lambda (N4089@x) (car N4089@x))) (set! N4b9c@N30d0@local-macro-transformer N30d0@local-macro-transformer) (set! N30d2@do-macro-call (lambda (N408b@transformer N408c@expr) (let ((N408f@out (N408b@transformer (N2e9f@add-mark N2e99@anti-mark N408c@expr '#f)))) (begin (let N4093@f ((N4091@x N408f@out)) (if (not (N2e81@stx? N4091@x)) (if (pair? N4091@x) (begin (N4093@f (car N4091@x)) (N4093@f (cdr N4091@x))) (if (vector? N4091@x) (vector-for-each N4093@f N4091@x) (if (symbol? N4091@x) (N319c@syntax-violation '#f '"raw symbol encountered in output of macro" N408c@expr N4091@x) (void)))) (void))) (N2e9f@add-mark (N2e97@gen-mark) N408f@out N408c@expr))))) (set! N4b9d@N30d2@do-macro-call N30d2@do-macro-call) (set! N30d4@chi-macro (lambda (N4095@p N4096@e) (N30d2@do-macro-call (N30ce@macro-transformer N4095@p) N4096@e))) (set! N4b9e@N30d4@chi-macro N30d4@chi-macro) (set! N30d6@chi-local-macro (lambda (N4099@p N409a@e) (N30d2@do-macro-call (N30d0@local-macro-transformer N4099@p) N409a@e))) (set! N4b9f@N30d6@chi-local-macro N30d6@chi-local-macro) (set! N30d8@chi-global-macro (lambda (N409d@p N409e@e) (let ((N40a1@lib (car N409d@p)) (N40a2@loc (cdr N409d@p))) (begin (N2cd2@N2b21@visit-library N40a1@lib) (let ((N40a5@x (symbol-value N40a2@loc))) (let ((N40a7@transformer (if (procedure? N40a5@x) N40a5@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" N40a5@x)))) (N30d2@do-macro-call N40a7@transformer N409e@e))))))) (set! N4ba0@N30d8@chi-global-macro N30d8@chi-global-macro) (set! N30da@chi-expr* (lambda (N40a9@e* N40aa@r N40ab@mr) (if (null? N40a9@e*) '() (let ((N40af@e (N30de@chi-expr (car N40a9@e*) N40aa@r N40ab@mr))) (cons N40af@e (N30da@chi-expr* (cdr N40a9@e*) N40aa@r N40ab@mr)))))) (set! N4ba1@N30da@chi-expr* N30da@chi-expr*) (set! N30dc@chi-application (lambda (N40b1@e N40b2@r N40b3@mr) (let ((N40b7@t N40b1@e)) (let ((N40b9@ls/false (N30bc@syntax-dispatch N40b7@t '(any . each-any)))) (if N40b9@ls/false (apply (lambda (N40bb@rator N40bc@rands) (let ((N40bf@rator (N30de@chi-expr N40bb@rator N40b2@r N40b3@mr))) (cons N40bf@rator (N30da@chi-expr* N40bc@rands N40b2@r N40b3@mr)))) N40b9@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N40b7@t)))))) (set! N4ba2@N30dc@chi-application N30dc@chi-application) (set! N30de@chi-expr (lambda (N40c1@e N40c2@r N40c3@mr) (call-with-values (lambda () (N2ed7@syntax-type N40c1@e N40c2@r)) (lambda (N40cd@N40c8 N40ce@N40ca N40cf@N40cc) (let ((N40d3@kwd N40cf@N40cc) (N40d4@value N40ce@N40ca) (N40d5@type N40cd@N40c8)) (let ((N40d9@t N40d5@type)) (if (memv N40d9@t '(core-macro)) (let ((N40db@transformer (N30ca@core-macro-transformer N40d4@value))) (N40db@transformer N40c1@e N40c2@r N40c3@mr)) (if (memv N40d9@t '(global)) (let ((N40dd@lib (car N40d4@value))) (let ((N40df@loc (cdr N40d4@value))) (begin ((N3124@inv-collector) N40dd@lib) N40df@loc))) (if (memv N40d9@t '(core-prim)) (let ((N40e1@name N40d4@value)) (list 'primitive N40e1@name)) (if (memv N40d9@t '(call)) (N30dc@chi-application N40c1@e N40c2@r N40c3@mr) (if (memv N40d9@t '(lexical)) (let ((N40e3@lex (N3046@lexical-var N40d4@value))) N40e3@lex) (if (memv N40d9@t '(global-macro global-macro!)) (N30de@chi-expr (N30d8@chi-global-macro N40d4@value N40c1@e) N40c2@r N40c3@mr) (if (memv N40d9@t '(local-macro local-macro!)) (N30de@chi-expr (N30d6@chi-local-macro N40d4@value N40c1@e) N40c2@r N40c3@mr) (if (memv N40d9@t '(macro macro!)) (N30de@chi-expr (N30d4@chi-macro N40d4@value N40c1@e) N40c2@r N40c3@mr) (if (memv N40d9@t '(constant)) (let ((N40e5@datum N40d4@value)) (list 'quote N40e5@datum)) (if (memv N40d9@t '(set!)) (N30e0@chi-set! N40c1@e N40c2@r N40c3@mr) (if (memv N40d9@t '(begin)) (let ((N40e7@t N40c1@e)) (let ((N40e9@ls/false (N30bc@syntax-dispatch N40e7@t '(_ any . each-any)))) (if N40e9@ls/false (apply (lambda (N40eb@x N40ec@x*) (N2e1a@N2d7a@build-sequence '#f (N30da@chi-expr* (cons N40eb@x N40ec@x*) N40c2@r N40c3@mr))) N40e9@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N40e7@t)))) (if (memv N40d9@t '(let-syntax letrec-syntax)) (let ((N40ef@t N40c1@e)) (let ((N40f1@ls/false (N30bc@syntax-dispatch N40ef@t '(_ #(each (any any)) any . each-any)))) (if (and N40f1@ls/false (apply (lambda (N40f3@xlhs* N40f4@xrhs* N40f5@xbody N40f6@xbody*) (if (not (N2ebd@valid-bound-ids? N40f3@xlhs*)) (N319c@syntax-violation '#f '"invalid identifiers" N40c1@e) (void))) N40f1@ls/false)) (apply (lambda (N40fb@xlhs* N40fc@xrhs* N40fd@xbody N40fe@xbody*) (let ((N4103@xlab* (map N2e41@gen-label N40fb@xlhs*))) (let ((N4105@xrib (N2e75@make-full-rib N40fb@xlhs* N4103@xlab*))) (let ((N4107@xb* (map (lambda (N4109@x) (N2eed@make-eval-transformer (N3116@expand-transformer (if (eq? N40d5@type 'let-syntax) N4109@x (N2ea1@add-subst N4105@xrib N4109@x)) N40c3@mr))) N40fc@xrhs*))) (N2e1a@N2d7a@build-sequence '#f (N30da@chi-expr* (map (lambda (N410b@x) (N2ea1@add-subst N4105@xrib N410b@x)) (cons N40fd@xbody N40fe@xbody*)) (append (map cons N4103@xlab* N4107@xb*) N40c2@r) (append (map cons N4103@xlab* N4107@xb*) N40c3@mr))))))) N40f1@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N40ef@t)))) (if (memv N40d9@t '(displaced-lexical)) (N319c@syntax-violation '#f '"identifier out of context" N40c1@e) (if (memv N40d9@t '(syntax)) (N319c@syntax-violation '#f '"reference to pattern variable outside a syntax form" N40c1@e) (if (memv N40d9@t '(define define-syntax module import library)) (N319c@syntax-violation '#f (string-append (let ((N410d@t N40d5@type)) (if (memv N410d@t '(define)) '"a definition" (if (memv N410d@t '(define-syntax)) '"a define-syntax" (if (memv N410d@t '(module)) '"a module definition" (if (memv N410d@t '(library)) '"a library definition" (if (memv N410d@t '(import)) '"an import declaration" (if (memv N410d@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") N40c1@e) (if (memv N40d9@t '(mutable)) (N319c@syntax-violation '#f '"attempt to reference an unexportable variable" N40c1@e) (N319c@syntax-violation '#f '"invalid expression" N40c1@e))))))))))))))))))))))) (set! N4ba3@N30de@chi-expr N30de@chi-expr) (set! N30e0@chi-set! (lambda (N410f@e N4110@r N4111@mr) (let ((N4115@t N410f@e)) (let ((N4117@ls/false (N30bc@syntax-dispatch N4115@t '(_ any any)))) (if (and N4117@ls/false (apply (lambda (N4119@x N411a@v) (N2eb5@id? N4119@x)) N4117@ls/false)) (apply (lambda (N411d@x N411e@v) (call-with-values (lambda () (N2ed7@syntax-type N411d@x N4110@r)) (lambda (N4127@N4122 N4128@N4124 N4129@N4126) (let ((N412d@kwd N4129@N4126) (N412e@value N4128@N4124) (N412f@type N4127@N4122)) (let ((N4133@t N412f@type)) (if (memv N4133@t '(lexical)) (begin (N304a@set-lexical-mutable! N412e@value '#t) (list 'set! (N3046@lexical-var N412e@value) (N30de@chi-expr N411e@v N4110@r N4111@mr))) (if (memv N4133@t '(core-prim)) (N319c@syntax-violation '#f '"cannot modify imported core primitive" N410f@e) (if (memv N4133@t '(global)) (N319c@syntax-violation '#f '"attempt to modify imported binding" N410f@e) (if (memv N4133@t '(global-macro!)) (N30de@chi-expr (N30d8@chi-global-macro N412e@value N410f@e) N4110@r N4111@mr) (if (memv N4133@t '(local-macro!)) (N30de@chi-expr (N30d6@chi-local-macro N412e@value N410f@e) N4110@r N4111@mr) (if (memv N4133@t '(mutable)) (N319c@syntax-violation '#f '"attempt to assign to an unexportable variable" N410f@e) (N319c@syntax-violation '#f '"invalid syntax" N410f@e)))))))))))) N4117@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N4115@t)))))) (set! N4ba4@N30e0@chi-set! N30e0@chi-set!) (set! N30e2@verify-formals (lambda (N4135@fmls N4136@stx) (let ((N4139@t N4135@fmls)) (let ((N413b@ls/false (N30bc@syntax-dispatch N4139@t 'each-any))) (if N413b@ls/false (apply (lambda (N413d@x*) (if (not (N2ebd@valid-bound-ids? N413d@x*)) (N3076@invalid-fmls-error N4136@stx N4135@fmls) (void))) N413b@ls/false) (let ((N413f@t N4139@t)) (let ((N4141@ls/false (N30bc@syntax-dispatch N413f@t '#(each+ any () any)))) (if N4141@ls/false (apply (lambda (N4143@x* N4144@x) (if (not (N2ebd@valid-bound-ids? (cons N4144@x N4143@x*))) (N3076@invalid-fmls-error N4136@stx N4135@fmls) (void))) N4141@ls/false) (let ((N4147@t N413f@t)) (let ((N4149@ls/false (N30bc@syntax-dispatch N4147@t '_))) (if N4149@ls/false (apply (lambda () (N319c@syntax-violation '#f '"invalid syntax" N4136@stx)) N4149@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N4147@t)))))))))))) (set! N4ba5@N30e2@verify-formals N30e2@verify-formals) (set! N30e4@chi-lambda-clause (lambda (N414b@stx N414c@fmls N414d@body* N414e@r N414f@mr) (let ((N4155@t N414c@fmls)) (let ((N4157@ls/false (N30bc@syntax-dispatch N4155@t 'each-any))) (if N4157@ls/false (apply (lambda (N4159@x*) (begin (N30e2@verify-formals N414c@fmls N414b@stx) (let ((N415b@lex* (map N2e3d@gen-lexical N4159@x*)) (N415c@lab* (map N2e41@gen-label N4159@x*))) (values N415b@lex* (N30f4@chi-internal (N2ea1@add-subst (N2e75@make-full-rib N4159@x* N415c@lab*) N414d@body*) (N304e@add-lexicals N415c@lab* N415b@lex* N414e@r) N414f@mr))))) N4157@ls/false) (let ((N415f@t N4155@t)) (let ((N4161@ls/false (N30bc@syntax-dispatch N415f@t '#(each+ any () any)))) (if N4161@ls/false (apply (lambda (N4163@x* N4164@x) (begin (N30e2@verify-formals N414c@fmls N414b@stx) (let ((N4167@lex* (map N2e3d@gen-lexical N4163@x*)) (N4168@lab* (map N2e41@gen-label N4163@x*)) (N4169@lex (N2e3d@gen-lexical N4164@x)) (N416a@lab (N2e41@gen-label N4164@x))) (values (append N4167@lex* N4169@lex) (N30f4@chi-internal (N2ea1@add-subst (N2e75@make-full-rib (cons N4164@x N4163@x*) (cons N416a@lab N4168@lab*)) N414d@body*) (N304e@add-lexicals (cons N416a@lab N4168@lab*) (cons N4169@lex N4167@lex*) N414e@r) N414f@mr))))) N4161@ls/false) (let ((N416f@t N415f@t)) (let ((N4171@ls/false (N30bc@syntax-dispatch N416f@t '_))) (if N4171@ls/false (apply (lambda () (N319c@syntax-violation '#f '"invalid syntax" N414c@fmls)) N4171@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N416f@t)))))))))))) (set! N4ba6@N30e4@chi-lambda-clause N30e4@chi-lambda-clause) (set! N30e6@chi-lambda-clause* (lambda (N4173@stx N4174@fmls* N4175@body** N4176@r N4177@mr) (if (null? N4174@fmls*) (values '() '()) (call-with-values (lambda () (N30e4@chi-lambda-clause N4173@stx (car N4174@fmls*) (car N4175@body**) N4176@r N4177@mr)) (lambda (N4181@N417e N4182@N4180) (let ((N4185@b N4182@N4180) (N4186@a N4181@N417e)) (call-with-values (lambda () (N30e6@chi-lambda-clause* N4173@stx (cdr N4174@fmls*) (cdr N4175@body**) N4176@r N4177@mr)) (lambda (N418d@N418a N418e@N418c) (let ((N4191@b* N418e@N418c) (N4192@a* N418d@N418a)) (values (cons N4186@a N4192@a*) (cons N4185@b N4191@b*))))))))))) (set! N4ba7@N30e6@chi-lambda-clause* N30e6@chi-lambda-clause*) (set! N30e8@chi-defun (lambda (N4195@x N4196@r N4197@mr) (let ((N419b@fmls (car N4195@x)) (N419c@body* (cdr N4195@x))) (call-with-values (lambda () (N30e4@chi-lambda-clause N419b@fmls N419b@fmls N419c@body* N4196@r N4197@mr)) (lambda (N41a3@N41a0 N41a4@N41a2) (let ((N41a7@body N41a4@N41a2) (N41a8@fmls N41a3@N41a0)) (N2e18@N2d4a@build-lambda '#f N41a8@fmls N41a7@body))))))) (set! N4ba8@N30e8@chi-defun N30e8@chi-defun) (set! N30ea@chi-rhs (lambda (N41ab@rhs N41ac@r N41ad@mr) (let ((N41b1@t (car N41ab@rhs))) (if (memv N41b1@t '(defun)) (N30e8@chi-defun (cdr N41ab@rhs) N41ac@r N41ad@mr) (if (memv N41b1@t '(expr)) (let ((N41b3@expr (cdr N41ab@rhs))) (N30de@chi-expr N41b3@expr N41ac@r N41ad@mr)) (if (memv N41b1@t '(top-expr)) (let ((N41b5@expr (cdr N41ab@rhs))) (N2e1a@N2d7a@build-sequence '#f (list (N30de@chi-expr N41b5@expr N41ac@r N41ad@mr) (N2e1b@N2d7c@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" N41ab@rhs))))))) (set! N4ba9@N30ea@chi-rhs N30ea@chi-rhs) (set! N30ec@expand-interaction-rhs*/init* (lambda (N41b7@lhs* N41b8@rhs* N41b9@init* N41ba@r N41bb@mr) (let N41c5@f ((N41c1@lhs* N41b7@lhs*) (N41c2@rhs* N41b8@rhs*)) (if (null? N41c1@lhs*) (map (lambda (N41c7@x) (N30de@chi-expr N41c7@x N41ba@r N41bb@mr)) N41b9@init*) (let ((N41c9@lhs (car N41c1@lhs*)) (N41ca@rhs (car N41c2@rhs*))) (let ((N41cd@t (car N41ca@rhs))) (if (memv N41cd@t '(defun)) (let ((N41cf@rhs (N30e8@chi-defun (cdr N41ca@rhs) N41ba@r N41bb@mr))) (cons (list 'set! N41c9@lhs N41cf@rhs) (N41c5@f (cdr N41c1@lhs*) (cdr N41c2@rhs*)))) (if (memv N41cd@t '(expr)) (let ((N41d1@rhs (N30de@chi-expr (cdr N41ca@rhs) N41ba@r N41bb@mr))) (cons (list 'set! N41c9@lhs N41d1@rhs) (N41c5@f (cdr N41c1@lhs*) (cdr N41c2@rhs*)))) (if (memv N41cd@t '(top-expr)) (let ((N41d3@e (N30de@chi-expr (cdr N41ca@rhs) N41ba@r N41bb@mr))) (cons N41d3@e (N41c5@f (cdr N41c1@lhs*) (cdr N41c2@rhs*)))) (error 'expand-interaction '"invallid" N41ca@rhs)))))))))) (set! N4baa@N30ec@expand-interaction-rhs*/init* N30ec@expand-interaction-rhs*/init*) (set! N30ee@chi-rhs* (lambda (N41d5@rhs* N41d6@r N41d7@mr) (let N41dd@f ((N41db@ls N41d5@rhs*)) (if (null? N41db@ls) '() (let ((N41df@a (N30ea@chi-rhs (car N41db@ls) N41d6@r N41d7@mr))) (cons N41df@a (N41dd@f (cdr N41db@ls)))))))) (set! N4bab@N30ee@chi-rhs* N30ee@chi-rhs*) (set! N30f0@find-bound=? (lambda (N41e1@x N41e2@lhs* N41e3@rhs*) (if (null? N41e2@lhs*) '#f (if (N2eb9@bound-id=? N41e1@x (car N41e2@lhs*)) (car N41e3@rhs*) (N30f0@find-bound=? N41e1@x (cdr N41e2@lhs*) (cdr N41e3@rhs*)))))) (set! N4bac@N30f0@find-bound=? N30f0@find-bound=?) (set! N30f2@find-dups (lambda (N41e7@ls) (let N41ed@f ((N41e9@ls N41e7@ls) (N41ea@dups '())) (if (null? N41e9@ls) N41ea@dups (let ((N41ef@t (N30f0@find-bound=? (car N41e9@ls) (cdr N41e9@ls) (cdr N41e9@ls)))) (if N41ef@t ((lambda (N41f1@x) (N41ed@f (cdr N41e9@ls) (cons (list (car N41e9@ls) N41f1@x) N41ea@dups))) N41ef@t) (N41ed@f (cdr N41e9@ls) N41ea@dups))))))) (set! N4bad@N30f2@find-dups N30f2@find-dups) (set! N30f4@chi-internal (lambda (N41f3@e* N41f4@r N41f5@mr) (let ((N41f9@rib (N2e69@make-empty-rib))) (call-with-values (lambda () (N3114@chi-body* (map (lambda (N420b@x) (N2ea1@add-subst N41f9@rib N420b@x)) (N2eb3@syntax->list N41f3@e*)) N41f4@r N41f5@mr '() '() '() '() '() N41f9@rib '#f)) (lambda (N420d@N41fc N420e@N41fe N420f@N4200 N4210@N4202 N4211@N4204 N4212@N4206 N4213@N4208 N4214@N420a) (let ((N421d@_exp* N4214@N420a) (N421e@kwd* N4213@N4208) (N421f@mod** N4212@N4206) (N4220@rhs* N4211@N4204) (N4221@lex* N4210@N4202) (N4222@mr N420f@N4200) (N4223@r N420e@N41fe) (N4224@e* N420d@N41fc)) (begin (if (null? N4224@e*) (N319c@syntax-violation '#f '"no expression in body" N4224@e*) (void)) (let ((N422d@init* (N30da@chi-expr* (append (apply append (reverse N421f@mod**)) N4224@e*) N4223@r N4222@mr))) (let ((N422f@rhs* (N30ee@chi-rhs* N4220@rhs* N4223@r N4222@mr))) (N2e1f@N2d84@build-letrec* '#f (reverse N4221@lex*) (reverse N422f@rhs*) (N2e1a@N2d7a@build-sequence '#f N422d@init*))))))))))) (set! N4bae@N30f4@chi-internal N30f4@chi-internal) (set! N30f6@parse-module (lambda (N4231@e) (let ((N4233@t N4231@e)) (let ((N4235@ls/false (N30bc@syntax-dispatch N4233@t '(_ each-any . each-any)))) (if N4235@ls/false (apply (lambda (N4237@export* N4238@b*) (begin (if (not (for-all N2eb5@id? N4237@export*)) (N319c@syntax-violation '#f '"module exports must be identifiers" N4231@e) (void)) (values '#f (list->vector N4237@export*) N4238@b*))) N4235@ls/false) (let ((N423b@t N4233@t)) (let ((N423d@ls/false (N30bc@syntax-dispatch N423b@t '(_ any each-any . each-any)))) (if N423d@ls/false (apply (lambda (N423f@name N4240@export* N4241@b*) (begin (if (not (N2eb5@id? N423f@name)) (N319c@syntax-violation '#f '"module name must be an identifier" N4231@e) (void)) (if (not (for-all N2eb5@id? N4240@export*)) (N319c@syntax-violation '#f '"module exports must be identifiers" N4231@e) (void)) (values N423f@name (list->vector N4240@export*) N4241@b*))) N423d@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N423b@t))))))))) (set! N4baf@N30f6@parse-module N30f6@parse-module) (set! N3100@module-interface? (lambda (N4245@x) (and (simple-struct? N4245@x) (eq? (simple-struct-name N4245@x) 'module-interface)))) (set! N4bb0@N3100@module-interface? N3100@module-interface?) (set! N3102@module-interface-first-mark (lambda (N4247@x) (simple-struct-ref N4247@x '0))) (set! N4bb1@N3102@module-interface-first-mark N3102@module-interface-first-mark) (set! N3104@set-module-interface-first-mark! (lambda (N4249@x N424a@val) (simple-struct-set! N4249@x '0 N424a@val))) (set! N4bb2@N3104@set-module-interface-first-mark! N3104@set-module-interface-first-mark!) (set! N3106@module-interface-exp-id-vec (lambda (N424d@x) (simple-struct-ref N424d@x '1))) (set! N4bb3@N3106@module-interface-exp-id-vec N3106@module-interface-exp-id-vec) (set! N3108@set-module-interface-exp-id-vec! (lambda (N424f@x N4250@val) (simple-struct-set! N424f@x '1 N4250@val))) (set! N4bb4@N3108@set-module-interface-exp-id-vec! N3108@set-module-interface-exp-id-vec!) (set! N310a@module-interface-exp-lab-vec (lambda (N4253@x) (simple-struct-ref N4253@x '2))) (set! N4bb5@N310a@module-interface-exp-lab-vec N310a@module-interface-exp-lab-vec) (set! N310c@set-module-interface-exp-lab-vec! (lambda (N4255@x N4256@val) (simple-struct-set! N4255@x '2 N4256@val))) (set! N4bb6@N310c@set-module-interface-exp-lab-vec! N310c@set-module-interface-exp-lab-vec!) (set! N310e@dummy '3) (set! N4bb7@N310e@dummy N310e@dummy) (set! N3110@module-interface-exp-id* (lambda (N4259@iface N425a@id) (letrec* ((N425e@diff-marks (lambda (N4265@ls N4266@x) (begin (if (null? N4265@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((N4269@a (car N4265@ls))) (if (eq? N4269@a N4266@x) '() (cons N4269@a (N425e@diff-marks (cdr N4265@ls) N4266@x)))))))) (let ((N425f@diff (N425e@diff-marks (N2e87@stx-mark* N425a@id) (N3102@module-interface-first-mark N4259@iface))) (N4260@id-vec (N3106@module-interface-exp-id-vec N4259@iface))) (if (null? N425f@diff) N4260@id-vec (vector-map (lambda (N4263@x) (make-simple-struct 'stx '5 (list (N2e83@stx-expr N4263@x) (append N425f@diff (N2e87@stx-mark* N4263@x)) '() '()))) N4260@id-vec)))))) (set! N4bb8@N3110@module-interface-exp-id* N3110@module-interface-exp-id*) (set! N3112@chi-internal-module (lambda (N426b@e N426c@r N426d@mr N426e@lex* N426f@rhs* N4270@mod** N4271@kwd*) (call-with-values (lambda () (N30f6@parse-module N426b@e)) (lambda (N427f@N427a N4280@N427c N4281@N427e) (let ((N4285@e* N4281@N427e) (N4286@exp-id* N4280@N427c) (N4287@name N427f@N427a)) (let ((N428b@rib (N2e69@make-empty-rib))) (let ((N428d@e* (map (lambda (N428f@x) (N2ea1@add-subst N428b@rib N428f@x)) (N2eb3@syntax->list N4285@e*)))) (call-with-values (lambda () (N3114@chi-body* N428d@e* N426c@r N426d@mr N426e@lex* N426f@rhs* N4270@mod** N4271@kwd* '() N428b@rib '#f)) (lambda (N42a1@N4292 N42a2@N4294 N42a3@N4296 N42a4@N4298 N42a5@N429a N42a6@N429c N42a7@N429e N42a8@N42a0) (let ((N42b1@_exp* N42a8@N42a0) (N42b2@kwd* N42a7@N429e) (N42b3@mod** N42a6@N429c) (N42b4@rhs* N42a5@N429a) (N42b5@lex* N42a4@N4298) (N42b6@mr N42a3@N4296) (N42b7@r N42a2@N4294) (N42b8@e* N42a1@N4292)) (let ((N42c1@exp-lab* (vector-map (lambda (N42c5@x) (or (N2ecb@id->label (make-simple-struct 'stx '5 (list (N2eb7@id->sym N42c5@x) (N2e87@stx-mark* N42c5@x) (list N428b@rib) '()))) (N319c@syntax-violation '#f '"cannot find module export" N42c5@x))) N4286@exp-id*)) (N42c2@mod** (cons N42b8@e* N42b3@mod**))) (if (not N4287@name) (values N42b5@lex* N42b4@rhs* N4286@exp-id* N42c1@exp-lab* N42b7@r N42b6@mr N42c2@mod** N42b2@kwd*) (let ((N42c7@lab (N2e41@gen-label 'module)) (N42c8@iface (make-simple-struct 'module-interface '4 (list (car (N2e87@stx-mark* N4287@name)) (vector-map (lambda (N42cb@x) (make-simple-struct 'stx '5 (list (N2e83@stx-expr N42cb@x) (N2e87@stx-mark* N42cb@x) '() '()))) N4286@exp-id*) N42c1@exp-lab*)))) (values N42b5@lex* N42b4@rhs* (vector N4287@name) (vector N42c7@lab) (cons (cons N42c7@lab (cons '$module N42c8@iface)) N42b7@r) (cons (cons N42c7@lab (cons '$module N42c8@iface)) N42b6@mr) N42c2@mod** N42b2@kwd*)))))))))))))) (set! N4bb9@N3112@chi-internal-module N3112@chi-internal-module) (set! N3114@chi-body* (lambda (N42cd@e* N42ce@r N42cf@mr N42d0@lex* N42d1@rhs* N42d2@mod** N42d3@kwd* N42d4@exp* N42d5@rib N42d6@top?) (if (null? N42cd@e*) (values N42cd@e* N42ce@r N42cf@mr N42d0@lex* N42d1@rhs* N42d2@mod** N42d3@kwd* N42d4@exp*) (let ((N42e1@e (car N42cd@e*))) (call-with-values (lambda () (N2ed7@syntax-type N42e1@e N42ce@r)) (lambda (N42e9@N42e4 N42ea@N42e6 N42eb@N42e8) (let ((N42ef@kwd N42eb@N42e8) (N42f0@value N42ea@N42e6) (N42f1@type N42e9@N42e4)) (let ((N42f5@kwd* (if (N2eb5@id? N42ef@kwd) (cons N42ef@kwd N42d3@kwd*) N42d3@kwd*))) (let ((N42f7@t N42f1@type)) (if (memv N42f7@t '(define)) (call-with-values (lambda () (N303e@parse-define N42e1@e)) (lambda (N42fd@N42fa N42fe@N42fc) (let ((N4301@rhs N42fe@N42fc) (N4302@id N42fd@N42fa)) (begin (if (N2ec1@bound-id-member? N4302@id N42f5@kwd*) (N319c@syntax-violation '#f '"cannot redefine keyword" N42e1@e) (void)) (call-with-values (lambda () (N2e45@gen-define-label+loc N4302@id N42d5@rib)) (lambda (N4309@N4306 N430a@N4308) (let ((N430d@lex N430a@N4308) (N430e@lab N4309@N4306)) (begin (N2e6b@extend-rib! N42d5@rib N4302@id N430e@lab) (N3114@chi-body* (cdr N42cd@e*) (N304c@add-lexical N430e@lab N430d@lex N42ce@r) N42cf@mr (cons N430d@lex N42d0@lex*) (cons N4301@rhs N42d1@rhs*) N42d2@mod** N42f5@kwd* N42d4@exp* N42d5@rib N42d6@top?))))))))) (if (memv N42f7@t '(define-syntax)) (call-with-values (lambda () (N3040@parse-define-syntax N42e1@e)) (lambda (N4315@N4312 N4316@N4314) (let ((N4319@rhs N4316@N4314) (N431a@id N4315@N4312)) (begin (if (N2ec1@bound-id-member? N431a@id N42f5@kwd*) (N319c@syntax-violation '#f '"cannot redefine keyword" N42e1@e) (void)) (let ((N431d@lab (N2e47@gen-define-label N431a@id N42d5@rib)) (N431e@expanded-rhs (N3116@expand-transformer N4319@rhs N42cf@mr))) (begin (N2e6b@extend-rib! N42d5@rib N431a@id N431d@lab) (let ((N4321@b (N2eed@make-eval-transformer N431e@expanded-rhs))) (N3114@chi-body* (cdr N42cd@e*) (cons (cons N431d@lab N4321@b) N42ce@r) (cons (cons N431d@lab N4321@b) N42cf@mr) N42d0@lex* N42d1@rhs* N42d2@mod** N42f5@kwd* N42d4@exp* N42d5@rib N42d6@top?)))))))) (if (memv N42f7@t '(let-syntax letrec-syntax)) (let ((N4323@t N42e1@e)) (let ((N4325@ls/false (N30bc@syntax-dispatch N4323@t '(_ #(each (any any)) . each-any)))) (if (and N4325@ls/false (apply (lambda (N4327@xlhs* N4328@xrhs* N4329@xbody*) (if (not (N2ebd@valid-bound-ids? N4327@xlhs*)) (N319c@syntax-violation '#f '"invalid identifiers" N42e1@e) (void))) N4325@ls/false)) (apply (lambda (N432d@xlhs* N432e@xrhs* N432f@xbody*) (let ((N4333@xlab* (map N2e41@gen-label N432d@xlhs*))) (let ((N4335@xrib (N2e75@make-full-rib N432d@xlhs* N4333@xlab*))) (let ((N4337@xb* (map (lambda (N4339@x) (N2eed@make-eval-transformer (N3116@expand-transformer (if (eq? N42f1@type 'let-syntax) N4339@x (N2ea1@add-subst N4335@xrib N4339@x)) N42cf@mr))) N432e@xrhs*))) (N3114@chi-body* (append (map (lambda (N433b@x) (N2ea1@add-subst N4335@xrib N433b@x)) N432f@xbody*) (cdr N42cd@e*)) (append (map cons N4333@xlab* N4337@xb*) N42ce@r) (append (map cons N4333@xlab* N4337@xb*) N42cf@mr) N42d0@lex* N42d1@rhs* N42d2@mod** N42f5@kwd* N42d4@exp* N42d5@rib N42d6@top?))))) N4325@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N4323@t)))) (if (memv N42f7@t '(begin)) (let ((N433d@t N42e1@e)) (let ((N433f@ls/false (N30bc@syntax-dispatch N433d@t '(_ . each-any)))) (if N433f@ls/false (apply (lambda (N4341@x*) (N3114@chi-body* (append N4341@x* (cdr N42cd@e*)) N42ce@r N42cf@mr N42d0@lex* N42d1@rhs* N42d2@mod** N42f5@kwd* N42d4@exp* N42d5@rib N42d6@top?)) N433f@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N433d@t)))) (if (memv N42f7@t '(global-macro global-macro!)) (N3114@chi-body* (cons (N2ea1@add-subst N42d5@rib (N30d8@chi-global-macro N42f0@value N42e1@e)) (cdr N42cd@e*)) N42ce@r N42cf@mr N42d0@lex* N42d1@rhs* N42d2@mod** N42f5@kwd* N42d4@exp* N42d5@rib N42d6@top?) (if (memv N42f7@t '(local-macro local-macro!)) (N3114@chi-body* (cons (N2ea1@add-subst N42d5@rib (N30d6@chi-local-macro N42f0@value N42e1@e)) (cdr N42cd@e*)) N42ce@r N42cf@mr N42d0@lex* N42d1@rhs* N42d2@mod** N42f5@kwd* N42d4@exp* N42d5@rib N42d6@top?) (if (memv N42f7@t '(macro macro!)) (N3114@chi-body* (cons (N2ea1@add-subst N42d5@rib (N30d4@chi-macro N42f0@value N42e1@e)) (cdr N42cd@e*)) N42ce@r N42cf@mr N42d0@lex* N42d1@rhs* N42d2@mod** N42f5@kwd* N42d4@exp* N42d5@rib N42d6@top?) (if (memv N42f7@t '(module)) (call-with-values (lambda () (N3112@chi-internal-module N42e1@e N42ce@r N42cf@mr N42d0@lex* N42d1@rhs* N42d2@mod** N42f5@kwd*)) (lambda (N4353@N4344 N4354@N4346 N4355@N4348 N4356@N434a N4357@N434c N4358@N434e N4359@N4350 N435a@N4352) (let ((N4363@kwd* N435a@N4352) (N4364@mod** N4359@N4350) (N4365@mr N4358@N434e) (N4366@r N4357@N434c) (N4367@m-exp-lab* N4356@N434a) (N4368@m-exp-id* N4355@N4348) (N4369@rhs* N4354@N4346) (N436a@lex* N4353@N4344)) (begin (vector-for-each (lambda (N4373@id N4374@lab) (N2e6b@extend-rib! N42d5@rib N4373@id N4374@lab)) N4368@m-exp-id* N4367@m-exp-lab*) (N3114@chi-body* (cdr N42cd@e*) N4366@r N4365@mr N436a@lex* N4369@rhs* N4364@mod** N4363@kwd* N42d4@exp* N42d5@rib N42d6@top?))))) (if (memv N42f7@t '(library)) (begin (N317e@library-expander (N2ec9@stx->datum N42e1@e)) (N3114@chi-body* (cdr N42cd@e*) N42ce@r N42cf@mr N42d0@lex* N42d1@rhs* N42d2@mod** N42f5@kwd* N42d4@exp* N42d5@rib N42d6@top?)) (if (memv N42f7@t '(export)) (let ((N4377@t N42e1@e)) (let ((N4379@ls/false (N30bc@syntax-dispatch N4377@t '(_ . each-any)))) (if N4379@ls/false (apply (lambda (N437b@exp-decl*) (N3114@chi-body* (cdr N42cd@e*) N42ce@r N42cf@mr N42d0@lex* N42d1@rhs* N42d2@mod** N42f5@kwd* (append N437b@exp-decl* N42d4@exp*) N42d5@rib N42d6@top?)) N4379@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N4377@t)))) (if (memv N42f7@t '(import)) (letrec* ((N437e@module-import? (lambda (N43d1@e) (let ((N43d3@t N43d1@e)) (let ((N43d5@ls/false (N30bc@syntax-dispatch N43d3@t '(_ any)))) (if (and N43d5@ls/false (apply (lambda (N43d7@id) (N2eb5@id? N43d7@id)) N43d5@ls/false)) (apply (lambda (N43d9@id) '#t) N43d5@ls/false) (let ((N43db@t N43d3@t)) (let ((N43dd@ls/false (N30bc@syntax-dispatch N43db@t '(_ . each-any)))) (if N43dd@ls/false (apply (lambda (N43df@imp*) '#f) N43dd@ls/false) (let ((N43e1@t N43db@t)) (let ((N43e3@ls/false (N30bc@syntax-dispatch N43e1@t '_))) (if N43e3@ls/false (apply (lambda () (N319c@syntax-violation '#f '"malformed import form" N43d1@e)) N43e3@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N43e1@t)))))))))))) (N4380@module-import (lambda (N43af@e N43b0@r) (let ((N43b3@t N43af@e)) (let ((N43b5@ls/false (N30bc@syntax-dispatch N43b3@t '(_ any)))) (if (and N43b5@ls/false (apply (lambda (N43b7@id) (N2eb5@id? N43b7@id)) N43b5@ls/false)) (apply (lambda (N43b9@id) (call-with-values (lambda () (N2ed7@syntax-type N43b9@id N43b0@r)) (lambda (N43c1@N43bc N43c2@N43be N43c3@N43c0) (let ((N43c7@kwd N43c3@N43c0) (N43c8@value N43c2@N43be) (N43c9@type N43c1@N43bc)) (let ((N43cd@t N43c9@type)) (if (memv N43cd@t '($module)) (let ((N43cf@iface N43c8@value)) (values (N3110@module-interface-exp-id* N43cf@iface N43b9@id) (N310a@module-interface-exp-lab-vec N43cf@iface))) (N319c@syntax-violation '#f '"invalid import" N43af@e))))))) N43b5@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N43b3@t)))))) (N4382@library-import (lambda (N4393@e) (let ((N4395@t N4393@e)) (let ((N4397@ls/false (N30bc@syntax-dispatch N4395@t '(any . each-any)))) (if N4397@ls/false (apply (lambda (N4399@ctxt N439a@imp*) (call-with-values (lambda () (N311e@parse-import-spec* (N31a2@syntax->datum N439a@imp*))) (lambda (N43a1@N439e N43a2@N43a0) (let ((N43a5@subst-labels N43a2@N43a0) (N43a6@subst-names N43a1@N439e)) (values (vector-map (lambda (N43a9@name) (N2e95@datum->stx N4399@ctxt N43a9@name)) N43a6@subst-names) N43a5@subst-labels))))) N4397@ls/false) (let ((N43ab@t N4395@t)) (let ((N43ad@ls/false (N30bc@syntax-dispatch N43ab@t '_))) (if N43ad@ls/false (apply (lambda () (N319c@syntax-violation '#f '"invalid import form" N4393@e)) N43ad@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N43ab@t)))))))))) (begin (call-with-values (lambda () (if (N437e@module-import? N42e1@e) (N4380@module-import N42e1@e N42ce@r) (N4382@library-import N42e1@e))) (lambda (N4387@N4384 N4388@N4386) (let ((N438b@lab* N4388@N4386) (N438c@id* N4387@N4384)) (vector-for-each (lambda (N438f@id N4390@lab) (N2e6b@extend-rib! N42d5@rib N438f@id N4390@lab)) N438c@id* N438b@lab*)))) (N3114@chi-body* (cdr N42cd@e*) N42ce@r N42cf@mr N42d0@lex* N42d1@rhs* N42d2@mod** N42f5@kwd* N42d4@exp* N42d5@rib N42d6@top?))) (if N42d6@top? (N3114@chi-body* (cdr N42cd@e*) N42ce@r N42cf@mr (cons (N2e3d@gen-lexical 'dummy) N42d0@lex*) (cons (cons 'top-expr N42e1@e) N42d1@rhs*) N42d2@mod** N42f5@kwd* N42d4@exp* N42d5@rib N42d6@top?) (values N42cd@e* N42ce@r N42cf@mr N42d0@lex* N42d1@rhs* N42d2@mod** N42f5@kwd* N42d4@exp*)))))))))))))))))))))) (set! N4bba@N3114@chi-body* N3114@chi-body*) (set! N3116@expand-transformer (lambda (N43e5@expr N43e6@r) (let ((N43e9@rtc (N3122@make-collector))) (let ((N43eb@expanded-rhs (let ((N43f5@N43ee N3124@inv-collector) (N43f6@N43f0 N3126@vis-collector) (N43f7@N43f2 N43e9@rtc) (N43f8@N43f4 (lambda (N43fd@x) (values)))) (let ((N43ff@swap (lambda () (begin (let ((N4401@t (N43f5@N43ee))) (begin (N43f5@N43ee N43f7@N43f2) (set! N43f7@N43f2 N4401@t))) (let ((N4403@t (N43f6@N43f0))) (begin (N43f6@N43f0 N43f8@N43f4) (set! N43f8@N43f4 N4403@t))))))) (dynamic-wind N43ff@swap (lambda () (N30de@chi-expr N43e5@expr N43e6@r N43e6@r)) N43ff@swap))))) (begin (for-each (let ((N4405@mark-visit (N3126@vis-collector))) (lambda (N4407@x) (begin (N2cd1@N2b1f@invoke-library N4407@x) (N4405@mark-visit N4407@x)))) (N43e9@rtc)) N43eb@expanded-rhs))))) (set! N4bbb@N3116@expand-transformer N3116@expand-transformer) (set! N3118@parse-exports (lambda (N4409@exp*) (let N4411@f ((N440b@exp* N4409@exp*) (N440c@int* '()) (N440d@ext* '())) (if (null? N440b@exp*) (begin (if (not (N2ebd@valid-bound-ids? N440d@ext*)) (N319c@syntax-violation 'export '"invalid exports" (N30f2@find-dups N440d@ext*)) (void)) (values (map N31a2@syntax->datum N440d@ext*) N440c@int*)) (let ((N4413@t (car N440b@exp*))) (let ((N4415@ls/false (N30bc@syntax-dispatch N4413@t '(any . #(each (any any)))))) (if N4415@ls/false (apply (lambda (N4417@rename N4418@i* N4419@e*) (begin (if (not (and (eq? (N31a2@syntax->datum N4417@rename) 'rename) (for-all N2eb5@id? N4418@i*) (for-all N2eb5@id? N4419@e*))) (N319c@syntax-violation 'export '"invalid export specifier" (car N440b@exp*)) (void)) (N4411@f (cdr N440b@exp*) (append N4418@i* N440c@int*) (append N4419@e* N440d@ext*)))) N4415@ls/false) (let ((N441d@t N4413@t)) (let ((N441f@ls/false (N30bc@syntax-dispatch N441d@t 'any))) (if N441f@ls/false (apply (lambda (N4421@ie) (begin (if (not (N2eb5@id? N4421@ie)) (N319c@syntax-violation 'export '"invalid export" N4421@ie) (void)) (N4411@f (cdr N440b@exp*) (cons N4421@ie N440c@int*) (cons N4421@ie N440d@ext*)))) N441f@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N441d@t))))))))))) (set! N4bbc@N3118@parse-exports N3118@parse-exports) (set! N311a@parse-library-name (lambda (N4423@spec) (letrec* ((N4426@parse (lambda (N4433@x) (let ((N4435@t N4433@x)) (let ((N4437@ls/false (N30bc@syntax-dispatch N4435@t '(each-any)))) (if (and N4437@ls/false (apply (lambda (N4439@v*) (for-all (lambda (N443b@x) (let ((N443d@x (N31a2@syntax->datum N443b@x))) (and (integer? N443d@x) (exact? N443d@x)))) N4439@v*)) N4437@ls/false)) (apply (lambda (N443f@v*) (values '() (map N31a2@syntax->datum N443f@v*))) N4437@ls/false) (let ((N4441@t N4435@t)) (let ((N4443@ls/false (N30bc@syntax-dispatch N4441@t '(any . any)))) (if (and N4443@ls/false (apply (lambda (N4445@x N4446@rest) (symbol? (N31a2@syntax->datum N4445@x))) N4443@ls/false)) (apply (lambda (N4449@x N444a@rest) (call-with-values (lambda () (N4426@parse N444a@rest)) (lambda (N4451@N444e N4452@N4450) (let ((N4455@v* N4452@N4450) (N4456@x* N4451@N444e)) (values (cons (N31a2@syntax->datum N4449@x) N4456@x*) N4455@v*))))) N4443@ls/false) (let ((N4459@t N4441@t)) (let ((N445b@ls/false (N30bc@syntax-dispatch N4459@t '()))) (if N445b@ls/false (apply (lambda () (values '() '())) N445b@ls/false) (let ((N445d@t N4459@t)) (let ((N445f@ls/false (N30bc@syntax-dispatch N445d@t '_))) (if N445f@ls/false (apply (lambda () (N319c@syntax-violation '#f '"invalid library name" N4423@spec)) N445f@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N445d@t)))))))))))))))) (call-with-values (lambda () (N4426@parse N4423@spec)) (lambda (N442b@N4428 N442c@N442a) (let ((N442f@ver* N442c@N442a) (N4430@name* N442b@N4428)) (begin (if (null? N4430@name*) (N319c@syntax-violation '#f '"empty library name" N4423@spec) (void)) (values N4430@name* N442f@ver*)))))))) (set! N4bbd@N311a@parse-library-name N311a@parse-library-name) (set! N311c@parse-library (lambda (N4461@e) (let ((N4463@t N4461@e)) (let ((N4465@ls/false (N30bc@syntax-dispatch N4463@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and N4465@ls/false (apply (lambda (N4467@library N4468@name* N4469@export N446a@exp* N446b@import N446c@imp* N446d@b*) (and (eq? (N31a2@syntax->datum N4469@export) 'export) (eq? (N31a2@syntax->datum N446b@import) 'import) (eq? (N31a2@syntax->datum N4467@library) 'library))) N4465@ls/false)) (apply (lambda (N4475@library N4476@name* N4477@export N4478@exp* N4479@import N447a@imp* N447b@b*) (values N4476@name* N4478@exp* N447a@imp* N447b@b*)) N4465@ls/false) (let ((N4483@t N4463@t)) (let ((N4485@ls/false (N30bc@syntax-dispatch N4483@t '_))) (if N4485@ls/false (apply (lambda () (N319c@syntax-violation '#f '"malformed library" N4461@e)) N4485@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N4483@t))))))))) (set! N4bbe@N311c@parse-library N311c@parse-library) (set! N311e@parse-import-spec* (letrec* ((N4488@idsyn? (lambda (N4691@x) (symbol? (N31a2@syntax->datum N4691@x)))) (N448a@dup-error (lambda (N468f@name) (N319c@syntax-violation 'import '"two imports with different bindings" N468f@name))) (N448c@merge-substs (lambda (N467d@s N467e@subst) (letrec* ((N4682@insert-to-subst (lambda (N4683@a N4684@subst) (let ((N4687@name (car N4683@a)) (N4688@label (cdr N4683@a))) (let ((N468b@t (assq N4687@name N4684@subst))) (if N468b@t ((lambda (N468d@x) (if (eq? (cdr N468d@x) N4688@label) N4684@subst (N448a@dup-error N4687@name))) N468b@t) (cons N4683@a N4684@subst))))))) (if (null? N467d@s) N467e@subst (N4682@insert-to-subst (car N467d@s) (N448c@merge-substs (cdr N467d@s) N467e@subst)))))) (N448e@exclude* (lambda (N464d@sym* N464e@subst) (letrec* ((N4652@exclude (lambda (N466b@sym N466c@subst) (if (null? N466c@subst) (N319c@syntax-violation 'import '"cannot rename unbound identifier" N466b@sym) (if (eq? N466b@sym (caar N466c@subst)) (values (cdar N466c@subst) (cdr N466c@subst)) (let ((N466f@a (car N466c@subst))) (call-with-values (lambda () (N4652@exclude N466b@sym (cdr N466c@subst))) (lambda (N4675@N4672 N4676@N4674) (let ((N4679@subst N4676@N4674) (N467a@old N4675@N4672)) (values N467a@old (cons N466f@a N4679@subst))))))))))) (if (null? N464d@sym*) (values '() N464e@subst) (call-with-values (lambda () (N4652@exclude (car N464d@sym*) N464e@subst)) (lambda (N4657@N4654 N4658@N4656) (let ((N465b@subst N4658@N4656) (N465c@old N4657@N4654)) (call-with-values (lambda () (N448e@exclude* (cdr N464d@sym*) N465b@subst)) (lambda (N4663@N4660 N4664@N4662) (let ((N4667@subst N4664@N4662) (N4668@old* N4663@N4660)) (values (cons N465c@old N4668@old*) N4667@subst))))))))))) (N4490@find* (lambda (N4645@sym* N4646@subst) (map (lambda (N4649@x) (let ((N464b@t (assq N4649@x N4646@subst))) (if N464b@t (cdr N464b@t) (N319c@syntax-violation 'import '"cannot find identifier" N4649@x)))) N4645@sym*))) (N4492@rem* (lambda (N463d@sym* N463e@subst) (let N4643@f ((N4641@subst N463e@subst)) (if (null? N4641@subst) '() (if (memq (caar N4641@subst) N463d@sym*) (N4643@f (cdr N4641@subst)) (cons (car N4641@subst) (N4643@f (cdr N4641@subst)))))))) (N4494@remove-dups (lambda (N463b@ls) (if (null? N463b@ls) '() (if (memq (car N463b@ls) (cdr N463b@ls)) (N4494@remove-dups (cdr N463b@ls)) (cons (car N463b@ls) (N4494@remove-dups (cdr N463b@ls))))))) (N4496@parse-library-name (lambda (N4553@spec) (letrec* ((N4556@subversion? (lambda (N4637@x) (let ((N4639@x (N31a2@syntax->datum N4637@x))) (and (integer? N4639@x) (exact? N4639@x) (>= N4639@x '0))))) (N4558@subversion-pred (lambda (N45d7@x*) (let ((N45d9@t N45d7@x*)) (let ((N45db@ls/false (N30bc@syntax-dispatch N45d9@t 'any))) (if (and N45db@ls/false (apply (lambda (N45dd@n) (N4556@subversion? N45dd@n)) N45db@ls/false)) (apply (lambda (N45df@n) (lambda (N45e1@x) (= N45e1@x (N31a2@syntax->datum N45df@n)))) N45db@ls/false) (let ((N45e3@t N45d9@t)) (let ((N45e5@ls/false (N30bc@syntax-dispatch N45e3@t '(any . each-any)))) (if (and N45e5@ls/false (apply (lambda (N45e7@p? N45e8@sub*) (eq? (N31a2@syntax->datum N45e7@p?) 'and)) N45e5@ls/false)) (apply (lambda (N45eb@p? N45ec@sub*) (let ((N45ef@p* (map N4558@subversion-pred N45ec@sub*))) (lambda (N45f1@x) (for-all (lambda (N45f3@p) (N45f3@p N45f1@x)) N45ef@p*)))) N45e5@ls/false) (let ((N45f5@t N45e3@t)) (let ((N45f7@ls/false (N30bc@syntax-dispatch N45f5@t '(any . each-any)))) (if (and N45f7@ls/false (apply (lambda (N45f9@p? N45fa@sub*) (eq? (N31a2@syntax->datum N45f9@p?) 'or)) N45f7@ls/false)) (apply (lambda (N45fd@p? N45fe@sub*) (let ((N4601@p* (map N4558@subversion-pred N45fe@sub*))) (lambda (N4603@x) (exists (lambda (N4605@p) (N4605@p N4603@x)) N4601@p*)))) N45f7@ls/false) (let ((N4607@t N45f5@t)) (let ((N4609@ls/false (N30bc@syntax-dispatch N4607@t '(any any)))) (if (and N4609@ls/false (apply (lambda (N460b@p? N460c@sub) (eq? (N31a2@syntax->datum N460b@p?) 'not)) N4609@ls/false)) (apply (lambda (N460f@p? N4610@sub) (let ((N4613@p (N4558@subversion-pred N4610@sub))) (lambda (N4615@x) (not (N4613@p N4615@x))))) N4609@ls/false) (let ((N4617@t N4607@t)) (let ((N4619@ls/false (N30bc@syntax-dispatch N4617@t '(any any)))) (if (and N4619@ls/false (apply (lambda (N461b@p? N461c@n) (and (eq? (N31a2@syntax->datum N461b@p?) '<=) (N4556@subversion? N461c@n))) N4619@ls/false)) (apply (lambda (N461f@p? N4620@n) (lambda (N4623@x) (<= N4623@x (N31a2@syntax->datum N4620@n)))) N4619@ls/false) (let ((N4625@t N4617@t)) (let ((N4627@ls/false (N30bc@syntax-dispatch N4625@t '(any any)))) (if (and N4627@ls/false (apply (lambda (N4629@p? N462a@n) (and (eq? (N31a2@syntax->datum N4629@p?) '>=) (N4556@subversion? N462a@n))) N4627@ls/false)) (apply (lambda (N462d@p? N462e@n) (lambda (N4631@x) (>= N4631@x (N31a2@syntax->datum N462e@n)))) N4627@ls/false) (let ((N4633@t N4625@t)) (let ((N4635@ls/false (N30bc@syntax-dispatch N4633@t '_))) (if N4635@ls/false (apply (lambda () (N319c@syntax-violation 'import '"invalid sub-version spec" N4553@spec N45d7@x*)) N4635@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N4633@t)))))))))))))))))))))))) (N455a@version-pred (lambda (N4587@x*) (let ((N4589@t N4587@x*)) (let ((N458b@ls/false (N30bc@syntax-dispatch N4589@t '()))) (if N458b@ls/false (apply (lambda () (lambda (N458d@x) '#t)) N458b@ls/false) (let ((N458f@t N4589@t)) (let ((N4591@ls/false (N30bc@syntax-dispatch N458f@t '(any . each-any)))) (if (and N4591@ls/false (apply (lambda (N4593@c N4594@ver*) (eq? (N31a2@syntax->datum N4593@c) 'and)) N4591@ls/false)) (apply (lambda (N4597@c N4598@ver*) (let ((N459b@p* (map N455a@version-pred N4598@ver*))) (lambda (N459d@x) (for-all (lambda (N459f@p) (N459f@p N459d@x)) N459b@p*)))) N4591@ls/false) (let ((N45a1@t N458f@t)) (let ((N45a3@ls/false (N30bc@syntax-dispatch N45a1@t '(any . each-any)))) (if (and N45a3@ls/false (apply (lambda (N45a5@c N45a6@ver*) (eq? (N31a2@syntax->datum N45a5@c) 'or)) N45a3@ls/false)) (apply (lambda (N45a9@c N45aa@ver*) (let ((N45ad@p* (map N455a@version-pred N45aa@ver*))) (lambda (N45af@x) (exists (lambda (N45b1@p) (N45b1@p N45af@x)) N45ad@p*)))) N45a3@ls/false) (let ((N45b3@t N45a1@t)) (let ((N45b5@ls/false (N30bc@syntax-dispatch N45b3@t '(any any)))) (if (and N45b5@ls/false (apply (lambda (N45b7@c N45b8@ver) (eq? (N31a2@syntax->datum N45b7@c) 'not)) N45b5@ls/false)) (apply (lambda (N45bb@c N45bc@ver) (let ((N45bf@p (N455a@version-pred N45bc@ver))) (lambda (N45c1@x) (not (N45bf@p N45c1@x))))) N45b5@ls/false) (let ((N45c3@t N45b3@t)) (let ((N45c5@ls/false (N30bc@syntax-dispatch N45c3@t 'each-any))) (if N45c5@ls/false (apply (lambda (N45c7@sub*) (let ((N45c9@p* (map N4558@subversion-pred N45c7@sub*))) (lambda (N45cb@x) (let N45d1@f ((N45cd@p* N45c9@p*) (N45ce@x N45cb@x)) (if (null? N45cd@p*) '#t (if (null? N45ce@x) '#f (and ((car N45cd@p*) (car N45ce@x)) (N45d1@f (cdr N45cd@p*) (cdr N45ce@x))))))))) N45c5@ls/false) (let ((N45d3@t N45c3@t)) (let ((N45d5@ls/false (N30bc@syntax-dispatch N45d3@t '_))) (if N45d5@ls/false (apply (lambda () (N319c@syntax-violation 'import '"invalid version spec" N4553@spec N4587@x*)) N45d5@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N45d3@t)))))))))))))))))))))) (let N455d@f ((N455b@x N4553@spec)) (let ((N455f@t N455b@x)) (let ((N4561@ls/false (N30bc@syntax-dispatch N455f@t '(each-any)))) (if N4561@ls/false (apply (lambda (N4563@version-spec*) (values '() (N455a@version-pred N4563@version-spec*))) N4561@ls/false) (let ((N4565@t N455f@t)) (let ((N4567@ls/false (N30bc@syntax-dispatch N4565@t '(any . any)))) (if (and N4567@ls/false (apply (lambda (N4569@x N456a@x*) (N4488@idsyn? N4569@x)) N4567@ls/false)) (apply (lambda (N456d@x N456e@x*) (call-with-values (lambda () (N455d@f N456e@x*)) (lambda (N4575@N4572 N4576@N4574) (let ((N4579@pred N4576@N4574) (N457a@name N4575@N4572)) (values (cons (N31a2@syntax->datum N456d@x) N457a@name) N4579@pred))))) N4567@ls/false) (let ((N457d@t N4565@t)) (let ((N457f@ls/false (N30bc@syntax-dispatch N457d@t '()))) (if N457f@ls/false (apply (lambda () (values '() (lambda (N4581@x) '#t))) N457f@ls/false) (let ((N4583@t N457d@t)) (let ((N4585@ls/false (N30bc@syntax-dispatch N4583@t '_))) (if N4585@ls/false (apply (lambda () (N319c@syntax-violation '#f '"invalid import spec" N4553@spec)) N4585@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N4583@t))))))))))))))))) (N4498@import-library (lambda (N4543@spec*) (call-with-values (lambda () (N4496@parse-library-name N4543@spec*)) (lambda (N4549@N4546 N454a@N4548) (let ((N454d@pred N454a@N4548) (N454e@name N4549@N4546)) (begin (if (null? N454e@name) (N319c@syntax-violation 'import '"empty library name" N4543@spec*) (void)) (let ((N4551@lib (N2cca@N2b11@find-library-by-name N454e@name))) (begin (if (not N4551@lib) (N319c@syntax-violation 'import '"cannot find library with required name" N454e@name) (void)) (if (not (N454d@pred (N2ca4@N2ac5@library-version N4551@lib))) (N319c@syntax-violation 'import '"library does not satisfy version specification" N4543@spec* N4551@lib) (void)) ((N3128@imp-collector) N4551@lib) (N2cac@N2ad5@library-subst N4551@lib))))))))) (N449a@get-import (lambda (N44b5@spec) (let ((N44b7@t N44b5@spec)) (let ((N44b9@ls/false (N30bc@syntax-dispatch N44b7@t '(any . each-any)))) (if (and N44b9@ls/false (apply (lambda (N44bb@x N44bc@x*) (not (memq (N31a2@syntax->datum N44bb@x) '(for rename except only prefix library)))) N44b9@ls/false)) (apply (lambda (N44bf@x N44c0@x*) (N4498@import-library (cons N44bf@x N44c0@x*))) N44b9@ls/false) (let ((N44c3@t N44b7@t)) (let ((N44c5@ls/false (N30bc@syntax-dispatch N44c3@t '(any any . #(each (any any)))))) (if (and N44c5@ls/false (apply (lambda (N44c7@rename N44c8@isp N44c9@old* N44ca@new*) (and (eq? (N31a2@syntax->datum N44c7@rename) 'rename) (for-all N4488@idsyn? N44c9@old*) (for-all N4488@idsyn? N44ca@new*))) N44c5@ls/false)) (apply (lambda (N44cf@rename N44d0@isp N44d1@old* N44d2@new*) (let ((N44d7@subst (N449a@get-import N44d0@isp)) (N44d8@old* (map N31a2@syntax->datum N44d1@old*)) (N44d9@new* (map N31a2@syntax->datum N44d2@new*))) (let ((N44dd@old-label* (N4490@find* N44d8@old* N44d7@subst))) (let ((N44df@subst (N4492@rem* N44d8@old* N44d7@subst))) (N448c@merge-substs (map cons N44d9@new* N44dd@old-label*) N44df@subst))))) N44c5@ls/false) (let ((N44e1@t N44c3@t)) (let ((N44e3@ls/false (N30bc@syntax-dispatch N44e1@t '(any any . each-any)))) (if (and N44e3@ls/false (apply (lambda (N44e5@except N44e6@isp N44e7@sym*) (and (eq? (N31a2@syntax->datum N44e5@except) 'except) (for-all N4488@idsyn? N44e7@sym*))) N44e3@ls/false)) (apply (lambda (N44eb@except N44ec@isp N44ed@sym*) (let ((N44f1@subst (N449a@get-import N44ec@isp))) (N4492@rem* (map N31a2@syntax->datum N44ed@sym*) N44f1@subst))) N44e3@ls/false) (let ((N44f3@t N44e1@t)) (let ((N44f5@ls/false (N30bc@syntax-dispatch N44f3@t '(any any . each-any)))) (if (and N44f5@ls/false (apply (lambda (N44f7@only N44f8@isp N44f9@sym*) (and (eq? (N31a2@syntax->datum N44f7@only) 'only) (for-all N4488@idsyn? N44f9@sym*))) N44f5@ls/false)) (apply (lambda (N44fd@only N44fe@isp N44ff@sym*) (let ((N4503@subst (N449a@get-import N44fe@isp)) (N4504@sym* (map N31a2@syntax->datum N44ff@sym*))) (let ((N4507@sym* (N4494@remove-dups N4504@sym*))) (let ((N4509@lab* (N4490@find* N4507@sym* N4503@subst))) (map cons N4507@sym* N4509@lab*))))) N44f5@ls/false) (let ((N450b@t N44f3@t)) (let ((N450d@ls/false (N30bc@syntax-dispatch N450b@t '(any any any)))) (if (and N450d@ls/false (apply (lambda (N450f@prefix N4510@isp N4511@p) (and (eq? (N31a2@syntax->datum N450f@prefix) 'prefix) (N4488@idsyn? N4511@p))) N450d@ls/false)) (apply (lambda (N4515@prefix N4516@isp N4517@p) (let ((N451b@subst (N449a@get-import N4516@isp)) (N451c@prefix (symbol->string (N31a2@syntax->datum N4517@p)))) (map (lambda (N451f@x) (cons (string->symbol (string-append N451c@prefix (symbol->string (car N451f@x)))) (cdr N451f@x))) N451b@subst))) N450d@ls/false) (let ((N4521@t N450b@t)) (let ((N4523@ls/false (N30bc@syntax-dispatch N4521@t '(any each-any)))) (if (and N4523@ls/false (apply (lambda (N4525@library N4526@spec*) (eq? (N31a2@syntax->datum N4525@library) 'library)) N4523@ls/false)) (apply (lambda (N4529@library N452a@spec*) (N4498@import-library N452a@spec*)) N4523@ls/false) (let ((N452d@t N4521@t)) (let ((N452f@ls/false (N30bc@syntax-dispatch N452d@t '(any any . any)))) (if (and N452f@ls/false (apply (lambda (N4531@for N4532@isp N4533@rest) (eq? (N31a2@syntax->datum N4531@for) 'for)) N452f@ls/false)) (apply (lambda (N4537@for N4538@isp N4539@rest) (N449a@get-import N4538@isp)) N452f@ls/false) (let ((N453d@t N452d@t)) (let ((N453f@ls/false (N30bc@syntax-dispatch N453d@t 'any))) (if N453f@ls/false (apply (lambda (N4541@spec) (N319c@syntax-violation 'import '"invalid import spec" N4541@spec)) N453f@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N453d@t))))))))))))))))))))))))))) (N449c@add-imports! (lambda (N44a5@imp N44a6@h) (let ((N44a9@subst (N449a@get-import N44a5@imp))) (for-each (lambda (N44ab@x) (let ((N44ad@name (car N44ab@x)) (N44ae@label (cdr N44ab@x))) (let ((N44b1@t (hashtable-ref N44a6@h N44ad@name '#f))) (if N44b1@t ((lambda (N44b3@l) (if (not (eq? N44b3@l N44ae@label)) (N448a@dup-error N44ad@name) (void))) N44b1@t) (hashtable-set! N44a6@h N44ad@name N44ae@label))))) N44a9@subst))))) (lambda (N449d@imp*) (let N44a3@f ((N449f@imp* N449d@imp*) (N44a0@h (make-eq-hashtable))) (if (null? N449f@imp*) (hashtable-entries N44a0@h) (begin (N449c@add-imports! (car N449f@imp*) N44a0@h) (N44a3@f (cdr N449f@imp*) N44a0@h))))))) (set! N4bbf@N311e@parse-import-spec* N311e@parse-import-spec*) (set! N3120@make-top-rib (lambda (N4693@names N4694@labels) (let ((N4697@rib (N2e69@make-empty-rib))) (begin (vector-for-each (lambda (N4699@name N469a@label) (begin (if (not (symbol? N4699@name)) (error 'make-top-rib '"BUG: not a symbol" N4699@name) (void)) (N2e6d@extend-rib/nc! N4697@rib (make-simple-struct 'stx '5 (list N4699@name N2e39@top-mark* '() '())) N469a@label))) N4693@names N4694@labels) N4697@rib)))) (set! N4bc0@N3120@make-top-rib N3120@make-top-rib) (set! N3122@make-collector (lambda () (let ((N469d@ls '())) (lambda N46a1 (let ((N46a2 (length N46a1))) (if (= N46a2 '0) (apply (lambda () N469d@ls) N46a1) (if (= N46a2 '1) (apply (lambda (N469f@x) (set! N469d@ls (N2e32@set-cons N469f@x N469d@ls))) N46a1) (error 'apply '"invalid arg count")))))))) (set! N4bc1@N3122@make-collector N3122@make-collector) (set! N3124@inv-collector (N2a05@N28e3@make-parameter (lambda N46a3@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (N46a5@x) (begin (if (not (procedure? N46a5@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" N46a5@x) (void)) N46a5@x)))) (set! N4bc2@N3124@inv-collector N3124@inv-collector) (set! N3126@vis-collector (N2a05@N28e3@make-parameter (lambda N46a7@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (N46a9@x) (begin (if (not (procedure? N46a9@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" N46a9@x) (void)) N46a9@x)))) (set! N4bc3@N3126@vis-collector N3126@vis-collector) (set! N3128@imp-collector (N2a05@N28e3@make-parameter (lambda N46ab@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (N46ad@x) (begin (if (not (procedure? N46ad@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" N46ad@x) (void)) N46ad@x)))) (set! N4bc4@N3128@imp-collector N3128@imp-collector) (set! N312a@chi-library-internal (lambda (N46af@e* N46b0@rib N46b1@top?) (call-with-values (lambda () (N3114@chi-body* N46af@e* '() '() '() '() '() '() '() N46b0@rib N46b1@top?)) (lambda (N46c5@N46b6 N46c6@N46b8 N46c7@N46ba N46c8@N46bc N46c9@N46be N46ca@N46c0 N46cb@N46c2 N46cc@N46c4) (let ((N46d5@exp* N46cc@N46c4) (N46d6@_kwd* N46cb@N46c2) (N46d7@mod** N46ca@N46c0) (N46d8@rhs* N46c9@N46be) (N46d9@lex* N46c8@N46bc) (N46da@mr N46c7@N46ba) (N46db@r N46c6@N46b8) (N46dc@e* N46c5@N46b6)) (values (append (apply append (reverse N46d7@mod**)) N46dc@e*) N46db@r N46da@mr (reverse N46d9@lex*) (reverse N46d8@rhs*) N46d5@exp*)))))) (set! N4bc5@N312a@chi-library-internal N312a@chi-library-internal) (set! N312c@chi-interaction-expr (lambda (N46e5@e N46e6@rib N46e7@r) (call-with-values (lambda () (N3114@chi-body* (list N46e5@e) N46e7@r N46e7@r '() '() '() '() '() N46e6@rib '#t)) (lambda (N46fb@N46ec N46fc@N46ee N46fd@N46f0 N46fe@N46f2 N46ff@N46f4 N4700@N46f6 N4701@N46f8 N4702@N46fa) (let ((N470b@_exp* N4702@N46fa) (N470c@_kwd* N4701@N46f8) (N470d@mod** N4700@N46f6) (N470e@rhs* N46ff@N46f4) (N470f@lex* N46fe@N46f2) (N4710@mr N46fd@N46f0) (N4711@r N46fc@N46ee) (N4712@e* N46fb@N46ec)) (let ((N471b@e* (N30ec@expand-interaction-rhs*/init* (reverse N470f@lex*) (reverse N470e@rhs*) (append (apply append (reverse N470d@mod**)) N4712@e*) N4711@r N4710@mr))) (let ((N471d@e (if (null? N471b@e*) (N2e1b@N2d7c@build-void) (if (null? (cdr N471b@e*)) (car N471b@e*) (N2e1a@N2d7a@build-sequence '#f N471b@e*))))) (values N471d@e N4711@r)))))))) (set! N4bc6@N312c@chi-interaction-expr N312c@chi-interaction-expr) (set! N312e@library-body-expander (lambda (N471f@name N4720@main-exp* N4721@imp* N4722@b* N4723@top?) (letrec* ((N472a@itc (N3122@make-collector))) (let ((N4733@N472c N3128@imp-collector) (N4734@N472e N31ac@top-level-context) (N4735@N4730 N472a@itc) (N4736@N4732 '#f)) (let ((N473b@swap (lambda () (begin (let ((N473d@t (N4733@N472c))) (begin (N4733@N472c N4735@N4730) (set! N4735@N4730 N473d@t))) (let ((N473f@t (N4734@N472e))) (begin (N4734@N472e N4736@N4732) (set! N4736@N4732 N473f@t))))))) (dynamic-wind N473b@swap (lambda () (call-with-values (lambda () (N311e@parse-import-spec* N4721@imp*)) (lambda (N4745@N4742 N4746@N4744) (let ((N4749@subst-labels N4746@N4744) (N474a@subst-names N4745@N4742)) (let ((N474d@rib (N3120@make-top-rib N474a@subst-names N4749@subst-labels))) (letrec* ((N4750@wrap (lambda (N47cb@x) (make-simple-struct 'stx '5 (list N47cb@x N2e39@top-mark* (list N474d@rib) '()))))) (let ((N4751@b* (map N4750@wrap N4722@b*)) (N4752@main-exp* (map N4750@wrap N4720@main-exp*)) (N4753@rtc (N3122@make-collector)) (N4754@vtc (N3122@make-collector))) (let ((N4761@N475a N3124@inv-collector) (N4762@N475c N3126@vis-collector) (N4763@N475e N4753@rtc) (N4764@N4760 N4754@vtc)) (let ((N4769@swap (lambda () (begin (let ((N476b@t (N4761@N475a))) (begin (N4761@N475a N4763@N475e) (set! N4763@N475e N476b@t))) (let ((N476d@t (N4762@N475c))) (begin (N4762@N475c N4764@N4760) (set! N4764@N4760 N476d@t))))))) (dynamic-wind N4769@swap (lambda () (call-with-values (lambda () (N312a@chi-library-internal N4751@b* N474d@rib N4723@top?)) (lambda (N477b@N4770 N477c@N4772 N477d@N4774 N477e@N4776 N477f@N4778 N4780@N477a) (let ((N4787@internal-exp* N4780@N477a) (N4788@rhs* N477f@N4778) (N4789@lex* N477e@N4776) (N478a@mr N477d@N4774) (N478b@r N477c@N4772) (N478c@init* N477b@N4770)) (call-with-values (lambda () (N3118@parse-exports (append N4752@main-exp* N4787@internal-exp*))) (lambda (N4797@N4794 N4798@N4796) (let ((N479b@exp-id* N4798@N4796) (N479c@exp-name* N4797@N4794)) (begin (N2e71@seal-rib! N474d@rib) (let ((N479f@init* (N30da@chi-expr* N478c@init* N478b@r N478a@mr))) (let ((N47a1@rhs* (N30ee@chi-rhs* N4788@rhs* N478b@r N478a@mr))) (begin (N2e73@unseal-rib! N474d@rib) (let ((N47a3@loc* (map N2e3f@gen-global N4789@lex*)) (N47a4@export-subst (N3186@make-export-subst N479c@exp-name* N479b@exp-id*))) (letrec* ((N47a8@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (N3188@make-export-env/macros N4789@lex* N47a3@loc* N478b@r)) (lambda (N47af@N47aa N47b0@N47ac N47b1@N47ae) (let ((N47b5@macro* N47b1@N47ae) (N47b6@global* N47b0@N47ac) (N47b7@export-env N47af@N47aa)) (begin (for-each (lambda (N47bb@s) (let ((N47bd@name (car N47bb@s)) (N47be@label (cdr N47bb@s))) (let ((N47c1@p (assq N47be@label N47b7@export-env))) (if N47c1@p (let ((N47c3@b (cdr N47c1@p))) (let ((N47c5@type (car N47c3@b))) (if (eq? N47c5@type 'mutable) (N319c@syntax-violation 'export N47a8@errstr N47bd@name) (void)))) (void))))) N47a4@export-subst) (let ((N47c7@invoke-body (N2e20@N2d86@build-library-letrec* '#f N471f@name N4789@lex* N47a3@loc* N47a1@rhs* (if (null? N479f@init*) (N2e1b@N2d7c@build-void) (N2e1a@N2d7a@build-sequence '#f N479f@init*)))) (N47c8@invoke-definitions (map N2e17@N2cd9@build-global-define (map cdr N47b6@global*)))) (values (N472a@itc) (N4753@rtc) (N4754@vtc) (N2e1a@N2d7a@build-sequence '#f (append N47c8@invoke-definitions (list N47c7@invoke-body))) N47b5@macro* N47a4@export-subst N47b7@export-env))))))))))))))))))) N4769@swap)))))))))) N473b@swap)))))) (set! N4bc7@N312e@library-body-expander N312e@library-body-expander) (set! N3130@core-library-expander (lambda (N47cd@e N47ce@verify-name) (call-with-values (lambda () (N311c@parse-library N47cd@e)) (lambda (N47d9@N47d2 N47da@N47d4 N47db@N47d6 N47dc@N47d8) (let ((N47e1@b* N47dc@N47d8) (N47e2@imp* N47db@N47d6) (N47e3@exp* N47da@N47d4) (N47e4@name* N47d9@N47d2)) (call-with-values (lambda () (N311a@parse-library-name N47e4@name*)) (lambda (N47ed@N47ea N47ee@N47ec) (let ((N47f1@ver N47ee@N47ec) (N47f2@name N47ed@N47ea)) (begin (N47ce@verify-name N47f2@name) (call-with-values (lambda () (N312e@library-body-expander N47f2@name N47e3@exp* N47e2@imp* N47e1@b* '#f)) (lambda (N4803@N47f6 N4804@N47f8 N4805@N47fa N4806@N47fc N4807@N47fe N4808@N4800 N4809@N4802) (let ((N4811@export-env N4809@N4802) (N4812@export-subst N4808@N4800) (N4813@visit-code N4807@N47fe) (N4814@invoke-code N4806@N47fc) (N4815@visit-req* N4805@N47fa) (N4816@invoke-req* N4804@N47f8) (N4817@imp* N4803@N47f6)) (values N47f2@name N47f1@ver N4817@imp* N4816@invoke-req* N4815@visit-req* N4814@invoke-code N4813@visit-code N4812@export-subst N4811@export-env))))))))))))) (set! N4bc8@N3130@core-library-expander N3130@core-library-expander) (set! N3132@parse-top-level-program (lambda (N481f@e*) (let ((N4821@t N481f@e*)) (let ((N4823@ls/false (N30bc@syntax-dispatch N4821@t '((any . each-any) . each-any)))) (if (and N4823@ls/false (apply (lambda (N4825@import N4826@imp* N4827@b*) (eq? (N31a2@syntax->datum N4825@import) 'import)) N4823@ls/false)) (apply (lambda (N482b@import N482c@imp* N482d@b*) (values N482c@imp* N482d@b*)) N4823@ls/false) (let ((N4831@t N4821@t)) (let ((N4833@ls/false (N30bc@syntax-dispatch N4831@t '((any . any) . any)))) (if (and N4833@ls/false (apply (lambda (N4835@import N4836@x N4837@y) (eq? (N31a2@syntax->datum N4835@import) 'import)) N4833@ls/false)) (apply (lambda (N483b@import N483c@x N483d@y) (N319c@syntax-violation 'expander '"invalid syntax of top-level program" (N2eaf@syntax-car N481f@e*))) N4833@ls/false) (let ((N4841@t N4831@t)) (let ((N4843@ls/false (N30bc@syntax-dispatch N4841@t '_))) (if N4843@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) N4843@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N4841@t)))))))))))) (set! N4bc9@N3132@parse-top-level-program N3132@parse-top-level-program) (set! N3134@top-level-expander (lambda (N4845@e*) (call-with-values (lambda () (N3132@parse-top-level-program N4845@e*)) (lambda (N484b@N4848 N484c@N484a) (let ((N484f@b* N484c@N484a) (N4850@imp* N484b@N4848)) (call-with-values (lambda () (N312e@library-body-expander '() '() N4850@imp* N484f@b* '#t)) (lambda (N4861@N4854 N4862@N4856 N4863@N4858 N4864@N485a N4865@N485c N4866@N485e N4867@N4860) (let ((N486f@export-env N4867@N4860) (N4870@export-subst N4866@N485e) (N4871@visit-code N4865@N485c) (N4872@invoke-code N4864@N485a) (N4873@visit-req* N4863@N4858) (N4874@invoke-req* N4862@N4856) (N4875@imp* N4861@N4854)) (values N4874@invoke-req* N4872@invoke-code))))))))) (set! N4bca@N3134@top-level-expander N3134@top-level-expander) (set! N3136@rp (N2a02@N28dd@make-record-printer 'env (lambda (N487d@x N487e@p N487f@wr) (display '"#<environment>" N487e@p)))) (set! N4bcb@N3136@rp N3136@rp) (set! N3140@env? (lambda (N4883@x) (and (simple-struct? N4883@x) (eq? (simple-struct-name N4883@x) 'env)))) (set! N4bcc@N3140@env? N3140@env?) (set! N3142@env-names (lambda (N4885@x) (simple-struct-ref N4885@x '0))) (set! N4bcd@N3142@env-names N3142@env-names) (set! N3144@set-env-names! (lambda (N4887@x N4888@val) (simple-struct-set! N4887@x '0 N4888@val))) (set! N4bce@N3144@set-env-names! N3144@set-env-names!) (set! N3146@env-labels (lambda (N488b@x) (simple-struct-ref N488b@x '1))) (set! N4bcf@N3146@env-labels N3146@env-labels) (set! N3148@set-env-labels! (lambda (N488d@x N488e@val) (simple-struct-set! N488d@x '1 N488e@val))) (set! N4bd0@N3148@set-env-labels! N3148@set-env-labels!) (set! N314a@env-itc (lambda (N4891@x) (simple-struct-ref N4891@x '2))) (set! N4bd1@N314a@env-itc N314a@env-itc) (set! N314c@set-env-itc! (lambda (N4893@x N4894@val) (simple-struct-set! N4893@x '2 N4894@val))) (set! N4bd2@N314c@set-env-itc! N314c@set-env-itc!) (set! N314e@dummy '3) (set! N4bd3@N314e@dummy N314e@dummy) (set! N3150@rp (N2a02@N28dd@make-record-printer 'interaction-env (lambda (N4897@x N4898@p N4899@wr) (display '"#<environment>" N4898@p)))) (set! N4bd4@N3150@rp N3150@rp) (set! N315a@interaction-env? (lambda (N489d@x) (and (simple-struct? N489d@x) (eq? (simple-struct-name N489d@x) 'interaction-env)))) (set! N4bd5@N315a@interaction-env? N315a@interaction-env?) (set! N315c@interaction-env-rib (lambda (N489f@x) (simple-struct-ref N489f@x '0))) (set! N4bd6@N315c@interaction-env-rib N315c@interaction-env-rib) (set! N315e@set-interaction-env-rib! (lambda (N48a1@x N48a2@val) (simple-struct-set! N48a1@x '0 N48a2@val))) (set! N4bd7@N315e@set-interaction-env-rib! N315e@set-interaction-env-rib!) (set! N3160@interaction-env-r (lambda (N48a5@x) (simple-struct-ref N48a5@x '1))) (set! N4bd8@N3160@interaction-env-r N3160@interaction-env-r) (set! N3162@set-interaction-env-r! (lambda (N48a7@x N48a8@val) (simple-struct-set! N48a7@x '1 N48a8@val))) (set! N4bd9@N3162@set-interaction-env-r! N3162@set-interaction-env-r!) (set! N3164@interaction-env-locs (lambda (N48ab@x) (simple-struct-ref N48ab@x '2))) (set! N4bda@N3164@interaction-env-locs N3164@interaction-env-locs) (set! N3166@set-interaction-env-locs! (lambda (N48ad@x N48ae@val) (simple-struct-set! N48ad@x '2 N48ae@val))) (set! N4bdb@N3166@set-interaction-env-locs! N3166@set-interaction-env-locs!) (set! N3168@dummy '3) (set! N4bdc@N3168@dummy N3168@dummy) (set! N316a@interaction-environment-symbols (lambda () (N3172@environment-symbols (N31aa@interaction-environment)))) (set! N4bdd@N316a@interaction-environment-symbols N316a@interaction-environment-symbols) (set! N316c@environment-bindings (lambda (N48b1@e) (vector->list (vector-map (lambda (N48b3@name N48b4@label) (N316e@parse-binding (cons N48b3@name (N2cd0@N2b1d@imported-label->binding N48b4@label)))) (N3142@env-names N48b1@e) (N3146@env-labels N48b1@e))))) (set! N4bde@N316c@environment-bindings N316c@environment-bindings) (set! N316e@parse-binding (lambda (N48b7@b) (cons (car N48b7@b) (let ((N48b9@t (cadr N48b7@b))) (if (memv N48b9@t '(core-prim global)) 'procedure (if (memv N48b9@t '(core-macro macro global-macro)) 'syntax (if (memv N48b9@t '($core-rtd)) 'record (if (eq? (car N48b7@b) (cadr N48b7@b)) 'syntax 'unknown)))))))) (set! N4bdf@N316e@parse-binding N316e@parse-binding) (set! N3170@environment? (lambda (N48bb@x) (or (N3140@env? N48bb@x) (N315a@interaction-env? N48bb@x)))) (set! N4be0@N3170@environment? N3170@environment?) (set! N3172@environment-symbols (lambda (N48bd@x) (if (N3140@env? N48bd@x) (vector->list (N3142@env-names N48bd@x)) (if (N315a@interaction-env? N48bd@x) (map values (N2e53@rib-sym* (N315c@interaction-env-rib N48bd@x))) (assertion-violation 'environment-symbols '"not an environment" N48bd@x))))) (set! N4be1@N3172@environment-symbols N3172@environment-symbols) (set! N3174@environment (lambda N48bf@imp* (let ((N48c1@itc (N3122@make-collector))) (let ((N48c7@N48c4 N3128@imp-collector) (N48c8@N48c6 N48c1@itc)) (let ((N48cb@swap (lambda () (let ((N48cd@t (N48c7@N48c4))) (begin (N48c7@N48c4 N48c8@N48c6) (set! N48c8@N48c6 N48cd@t)))))) (dynamic-wind N48cb@swap (lambda () (call-with-values (lambda () (N311e@parse-import-spec* N48bf@imp*)) (lambda (N48d3@N48d0 N48d4@N48d2) (let ((N48d7@subst-labels N48d4@N48d2) (N48d8@subst-names N48d3@N48d0)) (make-simple-struct 'env '4 (list N48d8@subst-names N48d7@subst-labels N48c1@itc)))))) N48cb@swap)))))) (set! N4be2@N3174@environment N3174@environment) (set! N3176@null-environment (lambda (N48db@n) (begin (if (not (eqv? N48db@n '5)) (assertion-violation 'null-environment '"not 5" N48db@n) (void)) (N3174@environment '(psyntax null-environment-5))))) (set! N4be3@N3176@null-environment N3176@null-environment) (set! N3178@scheme-report-environment (lambda (N48dd@n) (begin (if (not (eqv? N48dd@n '5)) (assertion-violation 'scheme-report-environment '"not 5" N48dd@n) (void)) (N3174@environment '(psyntax scheme-report-environment-5))))) (set! N4be4@N3178@scheme-report-environment N3178@scheme-report-environment) (set! N317a@expand (lambda (N48df@x N48e0@env) (if (N3140@env? N48e0@env) (let ((N48e3@rib (N3120@make-top-rib (N3142@env-names N48e0@env) (N3146@env-labels N48e0@env)))) (let ((N48e5@x (make-simple-struct 'stx '5 (list N48df@x N2e39@top-mark* (list N48e3@rib) '()))) (N48e6@itc (N314a@env-itc N48e0@env)) (N48e7@rtc (N3122@make-collector)) (N48e8@vtc (N3122@make-collector))) (let ((N48ed@x (let ((N48ff@N48f0 N31ac@top-level-context) (N4900@N48f2 N3124@inv-collector) (N4901@N48f4 N3126@vis-collector) (N4902@N48f6 N3128@imp-collector) (N4903@N48f8 '#f) (N4904@N48fa N48e7@rtc) (N4905@N48fc N48e8@vtc) (N4906@N48fe N48e6@itc)) (let ((N490f@swap (lambda () (begin (let ((N4911@t (N48ff@N48f0))) (begin (N48ff@N48f0 N4903@N48f8) (set! N4903@N48f8 N4911@t))) (let ((N4913@t (N4900@N48f2))) (begin (N4900@N48f2 N4904@N48fa) (set! N4904@N48fa N4913@t))) (let ((N4915@t (N4901@N48f4))) (begin (N4901@N48f4 N4905@N48fc) (set! N4905@N48fc N4915@t))) (let ((N4917@t (N4902@N48f6))) (begin (N4902@N48f6 N4906@N48fe) (set! N4906@N48fe N4917@t))))))) (dynamic-wind N490f@swap (lambda () (N30de@chi-expr N48e5@x '() '())) N490f@swap))))) (begin (N2e71@seal-rib! N48e3@rib) (values N48ed@x (N48e7@rtc)))))) (if (N315a@interaction-env? N48e0@env) (let ((N4919@rib (N315c@interaction-env-rib N48e0@env)) (N491a@r (N3160@interaction-env-r N48e0@env)) (N491b@rtc (N3122@make-collector))) (let ((N491f@x (make-simple-struct 'stx '5 (list N48df@x N2e39@top-mark* (list N4919@rib) '())))) (call-with-values (lambda () (let ((N4935@N4926 N31ac@top-level-context) (N4936@N4928 N3124@inv-collector) (N4937@N492a N3126@vis-collector) (N4938@N492c N3128@imp-collector) (N4939@N492e N48e0@env) (N493a@N4930 N491b@rtc) (N493b@N4932 (N3122@make-collector)) (N493c@N4934 (N3122@make-collector))) (let ((N4945@swap (lambda () (begin (let ((N4947@t (N4935@N4926))) (begin (N4935@N4926 N4939@N492e) (set! N4939@N492e N4947@t))) (let ((N4949@t (N4936@N4928))) (begin (N4936@N4928 N493a@N4930) (set! N493a@N4930 N4949@t))) (let ((N494b@t (N4937@N492a))) (begin (N4937@N492a N493b@N4932) (set! N493b@N4932 N494b@t))) (let ((N494d@t (N4938@N492c))) (begin (N4938@N492c N493c@N4934) (set! N493c@N4934 N494d@t))))))) (dynamic-wind N4945@swap (lambda () (N312c@chi-interaction-expr N491f@x N4919@rib N491a@r)) N4945@swap)))) (lambda (N494f@N4922 N4950@N4924) (let ((N4953@r^ N4950@N4924) (N4954@e N494f@N4922)) (begin (N3162@set-interaction-env-r! N48e0@env N4953@r^) (values N4954@e (N491b@rtc)))))))) (assertion-violation 'expand '"not an environment" N48e0@env))))) (set! N4be5@N317a@expand N317a@expand) (set! N317c@eval (lambda (N4957@x N4958@env) (begin (if (not (N3170@environment? N4958@env)) (error 'eval '"not an environment" N4958@env) (void)) (call-with-values (lambda () (N317a@expand N4957@x N4958@env)) (lambda (N495f@N495c N4960@N495e) (let ((N4963@invoke-req* N4960@N495e) (N4964@x N495f@N495c)) (begin (for-each N2cd1@N2b1f@invoke-library N4963@invoke-req*) (eval-core (N2a5b@N2a13@expanded->core N4964@x))))))))) (set! N4be6@N317c@eval N317c@eval) (set! N317e@library-expander (lambda N49d5 (let ((N49d6 (length N49d5))) (if (= N49d6 '3) (apply (lambda (N4967@x N4968@filename N4969@verify-name) (letrec* ((N496e@build-visit-code (lambda (N49c3@macro*) (if (null? N49c3@macro*) (N2e1b@N2d7c@build-void) (N2e1a@N2d7a@build-sequence '#f (map (lambda (N49c5@x) (let ((N49c7@loc (car N49c5@x)) (N49c8@src (cddr N49c5@x))) (list 'set! N49c7@loc N49c8@src))) N49c3@macro*))))) (N4970@visit! (lambda (N49bb@macro*) (for-each (lambda (N49bd@x) (let ((N49bf@loc (car N49bd@x)) (N49c0@proc (cadr N49bd@x))) (set-symbol-value! N49bf@loc N49c0@proc))) N49bb@macro*)))) (call-with-values (lambda () (N3130@core-library-expander N4967@x N4969@verify-name)) (lambda (N4983@N4972 N4984@N4974 N4985@N4976 N4986@N4978 N4987@N497a N4988@N497c N4989@N497e N498a@N4980 N498b@N4982) (let ((N4995@export-env N498b@N4982) (N4996@export-subst N498a@N4980) (N4997@macro* N4989@N497e) (N4998@invoke-code N4988@N497c) (N4999@vis* N4987@N497a) (N499a@inv* N4986@N4978) (N499b@imp* N4985@N4976) (N499c@ver N4984@N4974) (N499d@name N4983@N4972)) (let ((N49a7@id (gensym)) (N49a8@name N499d@name) (N49a9@ver N499c@ver) (N49aa@imp* (map N2cd5@N2b27@library-spec N499b@imp*)) (N49ab@vis* (map N2cd5@N2b27@library-spec N4999@vis*)) (N49ac@inv* (map N2cd5@N2b27@library-spec N499a@inv*)) (N49ad@visit-proc (lambda () (N4970@visit! N4997@macro*))) (N49ae@invoke-proc (lambda () (eval-core (N2a5b@N2a13@expanded->core N4998@invoke-code)))) (N49af@visit-code (N496e@build-visit-code N4997@macro*)) (N49b0@invoke-code N4998@invoke-code)) (begin (N2ccf@N2b1b@install-library N49a7@id N49a8@name N49a9@ver N49aa@imp* N49ab@vis* N49ac@inv* N4996@export-subst N4995@export-env N49ad@visit-proc N49ae@invoke-proc N49af@visit-code N49b0@invoke-code '#t N4968@filename) (values N49a7@id N49a8@name N49a9@ver N49aa@imp* N49ab@vis* N49ac@inv* N49b0@invoke-code N49af@visit-code N4996@export-subst N4995@export-env)))))))) N49d5) (if (= N49d6 '2) (apply (lambda (N49cb@x N49cc@filename) (N317e@library-expander N49cb@x N49cc@filename (lambda (N49cf@x) (values)))) N49d5) (if (= N49d6 '1) (apply (lambda (N49d1@x) (N317e@library-expander N49d1@x '#f (lambda (N49d3@x) (values)))) N49d5) (error 'apply '"invalid arg count"))))))) (set! N4be7@N317e@library-expander N317e@library-expander) (set! N3180@boot-library-expand (lambda (N49d7@x) (call-with-values (lambda () (N317e@library-expander N49d7@x)) (lambda (N49ed@N49da N49ee@N49dc N49ef@N49de N49f0@N49e0 N49f1@N49e2 N49f2@N49e4 N49f3@N49e6 N49f4@N49e8 N49f5@N49ea N49f6@N49ec) (let ((N4a01@export-env N49f6@N49ec) (N4a02@export-subst N49f5@N49ea) (N4a03@visit-code N49f4@N49e8) (N4a04@invoke-code N49f3@N49e6) (N4a05@inv* N49f2@N49e4) (N4a06@vis* N49f1@N49e2) (N4a07@imp* N49f0@N49e0) (N4a08@ver N49ef@N49de) (N4a09@name N49ee@N49dc) (N4a0a@id N49ed@N49da)) (values N4a09@name N4a04@invoke-code N4a02@export-subst N4a01@export-env)))))) (set! N4be8@N3180@boot-library-expand N3180@boot-library-expand) (set! N3182@rev-map-append (lambda (N4a15@f N4a16@ls N4a17@ac) (if (null? N4a16@ls) N4a17@ac (N3182@rev-map-append N4a15@f (cdr N4a16@ls) (cons (N4a15@f (car N4a16@ls)) N4a17@ac))))) (set! N4be9@N3182@rev-map-append N3182@rev-map-append) (set! N3184@build-exports (lambda (N4a1b@lex*+loc* N4a1c@init*) (N2e1a@N2d7a@build-sequence '#f (cons (N2e1b@N2d7c@build-void) (N3182@rev-map-append (lambda (N4a1f@x) (list 'set! (cdr N4a1f@x) (car N4a1f@x))) N4a1b@lex*+loc* N4a1c@init*))))) (set! N4bea@N3184@build-exports N3184@build-exports) (set! N3186@make-export-subst (lambda (N4a21@name* N4a22@id*) (map (lambda (N4a25@name N4a26@id) (let ((N4a29@label (N2ecb@id->label N4a26@id))) (begin (if (not N4a29@label) (N319c@syntax-violation '#f '"cannot export unbound identifier" N4a26@id) (void)) (cons N4a25@name N4a29@label)))) N4a21@name* N4a22@id*))) (set! N4beb@N3186@make-export-subst N3186@make-export-subst) (set! N3188@make-export-env/macros (lambda (N4a2b@lex* N4a2c@loc* N4a2d@r) (letrec* ((N4a32@lookup (lambda (N4a4f@x) (let N4a57@f ((N4a51@x N4a4f@x) (N4a52@lex* N4a2b@lex*) (N4a53@loc* N4a2c@loc*)) (if (pair? N4a52@lex*) (if (eq? N4a51@x (car N4a52@lex*)) (car N4a53@loc*) (N4a57@f N4a51@x (cdr N4a52@lex*) (cdr N4a53@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let N4a3b@f ((N4a33@r N4a2d@r) (N4a34@env '()) (N4a35@global* '()) (N4a36@macro* '())) (if (null? N4a33@r) (values N4a34@env N4a35@global* N4a36@macro*) (let ((N4a3d@x (car N4a33@r))) (let ((N4a3f@label (car N4a3d@x)) (N4a40@b (cdr N4a3d@x))) (let ((N4a43@t (N2ed1@binding-type N4a40@b))) (if (memv N4a43@t '(lexical)) (let ((N4a45@v (N2ed3@binding-value N4a40@b))) (let ((N4a47@loc (N4a32@lookup (N3046@lexical-var N4a45@v))) (N4a48@type (if (N3048@lexical-mutable? N4a45@v) 'mutable 'global))) (N4a3b@f (cdr N4a33@r) (cons (cons* N4a3f@label N4a48@type N4a47@loc) N4a34@env) (cons (cons (N3046@lexical-var N4a45@v) N4a47@loc) N4a35@global*) N4a36@macro*))) (if (memv N4a43@t '(local-macro)) (let ((N4a4b@loc (gensym))) (N4a3b@f (cdr N4a33@r) (cons (cons* N4a3f@label 'global-macro N4a4b@loc) N4a34@env) N4a35@global* (cons (cons N4a4b@loc (N2ed3@binding-value N4a40@b)) N4a36@macro*))) (if (memv N4a43@t '(local-macro!)) (let ((N4a4d@loc (gensym))) (N4a3b@f (cdr N4a33@r) (cons (cons* N4a3f@label 'global-macro! N4a4d@loc) N4a34@env) N4a35@global* (cons (cons N4a4d@loc (N2ed3@binding-value N4a40@b)) N4a36@macro*))) (if (memv N4a43@t '($rtd $module)) (N4a3b@f (cdr N4a33@r) (cons N4a3d@x N4a34@env) N4a35@global* N4a36@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (N2ed1@binding-type N4a40@b) (N2ed3@binding-value N4a40@b)))))))))))))) (set! N4bec@N3188@make-export-env/macros N3188@make-export-env/macros) (set! N318a@generate-temporaries (lambda (N4a59@ls) (let ((N4a5b@t N4a59@ls)) (let ((N4a5d@ls/false (N30bc@syntax-dispatch N4a5b@t 'each-any))) (if N4a5d@ls/false (apply (lambda (N4a5f@ls) (map (lambda (N4a61@x) (make-simple-struct 'stx '5 (list (let ((N4a63@x (N31a2@syntax->datum N4a61@x))) (if (or (symbol? N4a63@x) (string? N4a63@x)) (gensym N4a63@x) (gensym 't))) N2e39@top-mark* '() '()))) N4a5f@ls)) N4a5d@ls/false) (let ((N4a65@t N4a5b@t)) (let ((N4a67@ls/false (N30bc@syntax-dispatch N4a65@t '_))) (if N4a67@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) N4a67@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N4a65@t))))))))) (set! N4bed@N318a@generate-temporaries N318a@generate-temporaries) (set! N318c@free-identifier=? (lambda (N4a69@x N4a6a@y) (if (N2eb5@id? N4a69@x) (if (N2eb5@id? N4a6a@y) (N2ebb@free-id=? N4a69@x N4a6a@y) (assertion-violation 'free-identifier=? '"not an identifier" N4a6a@y)) (assertion-violation 'free-identifier=? '"not an identifier" N4a69@x)))) (set! N4bee@N318c@free-identifier=? N318c@free-identifier=?) (set! N318e@bound-identifier=? (lambda (N4a6d@x N4a6e@y) (if (N2eb5@id? N4a6d@x) (if (N2eb5@id? N4a6e@y) (N2eb9@bound-id=? N4a6d@x N4a6e@y) (assertion-violation 'bound-identifier=? '"not an identifier" N4a6e@y)) (assertion-violation 'bound-identifier=? '"not an identifier" N4a6d@x)))) (set! N4bef@N318e@bound-identifier=? N318e@bound-identifier=?) (set! N3190@make-source-condition (lambda (N4a71@x) (letrec* ((N4a7b@N4a76 (make-record-type-descriptor '&source-information &condition-rtd 'N4a79 '#f '#f '#((immutable file-name) (immutable line)))) (N4a7d@N4a78 '#f) (N4a7f@N4a77 (make-record-constructor-descriptor N4a7b@N4a76 &condition-rcd N4a7d@N4a78)) (N4a82@N4a75 (record-predicate N4a7b@N4a76)) (N4a84@make-source-condition (record-constructor N4a7f@N4a77)) (N4a86@N4a73 (record-accessor N4a7b@N4a76 '0)) (N4a88@N4a74 (record-accessor N4a7b@N4a76 '1)) (N4a8a@source-condition? (condition-predicate N4a7b@N4a76)) (N4a8c@source-filename (condition-accessor N4a7b@N4a76 N4a86@N4a73)) (N4a8e@source-character (condition-accessor N4a7b@N4a76 N4a88@N4a74))) (if (and (pair? N4a71@x) (pair? (cdr N4a71@x))) (N4a84@make-source-condition (car N4a71@x) (cadr N4a71@x)) (condition))))) (set! N4bf0@N3190@make-source-condition N3190@make-source-condition) (set! N3192@extract-position-condition (lambda (N4a8f@x) (N3190@make-source-condition (N3194@expression-position N4a8f@x)))) (set! N4bf1@N3192@extract-position-condition N3192@extract-position-condition) (set! N3194@expression-position (lambda (N4a91@x) (and (N2e81@stx? N4a91@x) (let ((N4a93@x (N2e83@stx-expr N4a91@x))) (and (N29f9@N28cb@annotation? N4a93@x) (N29fa@N28cd@annotation-source N4a93@x)))))) (set! N4bf2@N3194@expression-position N3194@expression-position) (set! N3196@assertion-error (lambda (N4a95@expr N4a96@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list N4a95@expr)) (N3190@make-source-condition N4a96@pos))))) (set! N4bf3@N3196@assertion-error N3196@assertion-error) (set! N3198@syntax-error (lambda (N4a99@x . N4a9b@args) (begin (if (not (for-all string? N4a9b@args)) (assertion-violation 'syntax-error '"invalid argument" N4a9b@args) (void)) (raise (condition (make-message-condition (if (null? N4a9b@args) '"invalid syntax" (apply string-append N4a9b@args))) (make-syntax-violation (N31a2@syntax->datum N4a99@x) '#f) (N3192@extract-position-condition N4a99@x)))))) (set! N4bf4@N3198@syntax-error N3198@syntax-error) (set! N319a@syntax-violation* (lambda (N4a9d@who N4a9e@msg N4a9f@form N4aa0@condition-object) (begin (if (not (string? N4a9e@msg)) (assertion-violation 'syntax-violation '"message is not a string" N4a9e@msg) (void)) (let ((N4aa5@who (if (or (string? N4a9d@who) (symbol? N4a9d@who)) N4a9d@who (if (not N4a9d@who) (let ((N4aa7@t N4a9f@form)) (let ((N4aa9@ls/false (N30bc@syntax-dispatch N4aa7@t 'any))) (if (and N4aa9@ls/false (apply (lambda (N4aab@id) (N2eb5@id? N4aab@id)) N4aa9@ls/false)) (apply (lambda (N4aad@id) (N31a2@syntax->datum N4aad@id)) N4aa9@ls/false) (let ((N4aaf@t N4aa7@t)) (let ((N4ab1@ls/false (N30bc@syntax-dispatch N4aaf@t '(any . any)))) (if (and N4ab1@ls/false (apply (lambda (N4ab3@id N4ab4@rest) (N2eb5@id? N4ab3@id)) N4ab1@ls/false)) (apply (lambda (N4ab7@id N4ab8@rest) (N31a2@syntax->datum N4ab7@id)) N4ab1@ls/false) (let ((N4abb@t N4aaf@t)) (let ((N4abd@ls/false (N30bc@syntax-dispatch N4abb@t '_))) (if N4abd@ls/false (apply (lambda () '#f) N4abd@ls/false) (N319c@syntax-violation '#f '"invalid syntax" N4abb@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" N4a9d@who))))) (raise (condition (if N4aa5@who (make-who-condition N4aa5@who) (condition)) (make-message-condition N4a9e@msg) N4aa0@condition-object (N3192@extract-position-condition N4a9f@form))))))) (set! N4bf5@N319a@syntax-violation* N319a@syntax-violation*) (set! N319c@syntax-violation (lambda N4acd (let ((N4ace (length N4acd))) (if (= N4ace '3) (apply (lambda (N4abf@who N4ac0@msg N4ac1@form) (N319c@syntax-violation N4abf@who N4ac0@msg N4ac1@form '#f)) N4acd) (if (= N4ace '4) (apply (lambda (N4ac5@who N4ac6@msg N4ac7@form N4ac8@subform) (N319a@syntax-violation* N4ac5@who N4ac6@msg N4ac7@form (make-syntax-violation (N31a2@syntax->datum N4ac7@form) (N31a2@syntax->datum N4ac8@subform)))) N4acd) (error 'apply '"invalid arg count")))))) (set! N4bf6@N319c@syntax-violation N319c@syntax-violation) (set! N319e@identifier? (lambda (N4acf@x) (N2eb5@id? N4acf@x))) (set! N4bf7@N319e@identifier? N319e@identifier?) (set! N31a0@datum->syntax (lambda (N4ad1@id N4ad2@datum) (if (N2eb5@id? N4ad1@id) (N2e95@datum->stx N4ad1@id N4ad2@datum) (assertion-violation 'datum->syntax '"not an identifier" N4ad1@id)))) (set! N4bf8@N31a0@datum->syntax N31a0@datum->syntax) (set! N31a2@syntax->datum (lambda (N4ad5@x) (N2ec9@stx->datum N4ad5@x))) (set! N4bf9@N31a2@syntax->datum N31a2@syntax->datum) (set! N31a4@ungensym-all (lambda (N4ad7@code) (if (pair? N4ad7@code) (cons (N31a4@ungensym-all (car N4ad7@code)) (N31a4@ungensym-all (cdr N4ad7@code))) (if (symbol? N4ad7@code) (ungensym N4ad7@code) N4ad7@code)))) (set! N4bfa@N31a4@ungensym-all N31a4@ungensym-all) (set! N31a6@compile-r6rs-top-level (lambda (N4ad9@x*) (call-with-values (lambda () (N3134@top-level-expander N4ad9@x*)) (lambda (N4adf@N4adc N4ae0@N4ade) (let ((N4ae3@invoke-code N4ae0@N4ade) (N4ae4@lib* N4adf@N4adc)) (lambda () (begin (for-each N2cd1@N2b1f@invoke-library N4ae4@lib*) (let ((N4ae7@expanded (N2a5b@N2a13@expanded->core N4ae3@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (N31a4@ungensym-all N4ae7@expanded)) (void)) (eval-core N4ae7@expanded)))))))))) (set! N4bfb@N31a6@compile-r6rs-top-level N31a6@compile-r6rs-top-level) (set! N31a8@pre-compile-r6rs-top-level (lambda (N4ae9@x*) (call-with-values (lambda () (N3134@top-level-expander N4ae9@x*)) (lambda (N4aef@N4aec N4af0@N4aee) (let ((N4af3@invoke-code N4af0@N4aee) (N4af4@lib* N4aef@N4aec)) (begin (for-each N2cd1@N2b1f@invoke-library N4af4@lib*) (N2a03@N28df@compile-core (N2a5b@N2a13@expanded->core N4af3@invoke-code)))))))) (set! N4bfc@N31a8@pre-compile-r6rs-top-level N31a8@pre-compile-r6rs-top-level) (set! N31aa@interaction-environment (let ((N4af7@the-env '#f)) (lambda () (or N4af7@the-env (let ((N4af9@lib (N2cca@N2b11@find-library-by-name '(mosh interaction))) (N4afa@rib (N2e69@make-empty-rib))) (begin (let ((N4afd@subst (N2cac@N2ad5@library-subst N4af9@lib))) (begin (N2e55@set-rib-sym*! N4afa@rib (map car N4afd@subst)) (N2e59@set-rib-mark**! N4afa@rib (map (lambda (N4aff@x) N2e39@top-mark*) N4afd@subst)) (N2e5d@set-rib-label*! N4afa@rib (map cdr N4afd@subst)))) (let ((N4b01@env (make-simple-struct 'interaction-env '4 (list N4afa@rib '() '())))) (begin (set! N4af7@the-env N4b01@env) N4b01@env)))))))) (set! N4bfd@N31aa@interaction-environment N31aa@interaction-environment) (set! N31ac@top-level-context (N2a05@N28e3@make-parameter '#f)) (set! N4bfe@N31ac@top-level-context N31ac@top-level-context) (N2cc7@N2b0b@current-library-expander N317e@library-expander))
(begin (begin (N2a58@N2a0d@current-primitive-locations (lambda (N5149@x) (let ((N514b@t (assq N5149@x '((syntax-error . N4bf4@N3198@syntax-error) (syntax-dispatch . N4b92@N30bc@syntax-dispatch) (load . N4d7a@N4c25@load) (interaction-environment . N4bfd@N31aa@interaction-environment) (library-path . N2cbf@N2afb@library-path) (mosh-cache-dir . N2a06@N28e5@mosh-cache-dir) (make-parameter . N2a05@N28e3@make-parameter) (make-variable-transformer . N4b4f@N2ee7@make-variable-transformer) (identifier? . N4bf7@N319e@identifier?) (generate-temporaries . N4bed@N318a@generate-temporaries) (free-identifier=? . N4bee@N318c@free-identifier=?) (syntax->datum . N4bf9@N31a2@syntax->datum) (datum->syntax . N4bf8@N31a0@datum->syntax) (bound-identifier=? . N4bef@N318e@bound-identifier=?) (scheme-report-environment . N4be4@N3178@scheme-report-environment) (null-environment . N4be3@N3176@null-environment) (command-line . N4d77@N4c1f@command-line) (eval . N4be6@N317c@eval) (environment . N4be2@N3174@environment) (syntax-violation . N4bf6@N319c@syntax-violation) (assertion-error . N4bf3@N3196@assertion-error))))) (if N514b@t (cdr N514b@t) '#f)))) (N2ccf@N2b1b@install-library 'N5126 '(mosh interaction) '() '() '() '() '((regexp? . N50e6) (alist->eq-hash-table . N50e2) (format . N50df) (string-split . N50d4) (call-process . N50ce) (set-current-directory! . N50ca) (expand-path . N50c9) (current-directory . N50c8) (%spawn . N50c7) (%waitpid . N50c6) (simple-struct-name . N50c5) (simple-struct-set! . N50c4) (simple-struct-ref . N50c3) (make-simple-struct . N50c2) (simple-struct? . N50c1) (pointer-ref-c-int64 . N50c0) (pointer-ref-c-int32 . N50bf) (pointer-ref-c-int16 . N50be) (pointer-ref-c-int8 . N50bd) (pointer-ref-c-uint64 . N50bc) (pointer-ref-c-uint32 . N50bb) (pointer-ref-c-uint16 . N50ba) (pointer-ref-c-uint8 . N50b9) (pointer-set-c-uint64! . N50b8) (pointer-set-c-uint32! . N50b7) (pointer-set-c-uint16! . N50b6) (pointer-set-c-uint8! . N50b5) (pointer-set-c-int64! . N50b4) (pointer-set-c-int32! . N50b3) (pointer-set-c-int16! . N50b2) (pointer-set-c-int8! . N50b1) (pointer-set-c-pointer! . N50b0) (pointer-set-c-double! . N50af) (pointer-set-c-float! . N50ae) (pointer-set-c-long-long! . N50ad) (pointer-set-c-long! . N50ac) (pointer-set-c-int! . N50ab) (pointer-set-c-short! . N50aa) (pointer-set-c-char! . N50a9) (pointer-ref-c-pointer . N50a8) (pointer-ref-c-double . N50a7) (pointer-ref-c-float . N50a6) (pointer-ref-c-unsigned-long-long . N50a5) (pointer-ref-c-signed-long-long . N50a4) (pointer-ref-c-unsigned-long . N50a3) (pointer-ref-c-signed-long . N50a2) (pointer-ref-c-unsigned-int . N50a1) (pointer-ref-c-signed-int . N50a0) (pointer-ref-c-unsigned-short . N509f) (pointer-ref-c-signed-short . N509e) (pointer-ref-c-unsigned-char . N509d) (pointer-ref-c-signed-char . N509c) (pointer->integer . N509b) (integer->pointer . N509a) (pointer? . N5099) (shared-errno . N5098) (%ffi-supported? . N5093) (%ffi-pointer->string . N5092) (%ffi-call . N5091) (%ffi-lookup . N5090) (%ffi-open . N508f) (null-terminated-utf8->string . N508e) (null-terminated-bytevector->string . N508d) (%exec . N508c) (%fork . N508b) (%pipe . N508a) (p . N5089) (whereis . N506d) (register . N506c) (vm-join! . N506b) (vm-set-value! . N506a) (vm? . N5069) (main-vm? . N5068) (vm-eval . N5067) (vm-self . N5066) (vm-start! . N5065) (make-vm . N5064) (mutex-try-lock! . N5063) (mutex-unlock! . N5062) (mutex-lock! . N5061) (mutex? . N5060) (make-mutex . N505f) (condition-variable-notify-all! . N505e) (condition-variable-notify! . N505d) (condition-variable-wait! . N505c) (make-condition-variable . N505b) (write/ss . N505a) (string-upcase . N5042) (string-titlecase . N5041) (string-normalize-nfkd . N5040) (string-normalize-nfkc . N503f) (string-normalize-nfd . N503e) (string-normalize-nfc . N503d) (string-foldcase . N503c) (string-downcase . N503b) (string-ci>? . N503a) (string-ci>=? . N5039) (string-ci=? . N5038) (string-ci<? . N5037) (string-ci<=? . N5036) (char-whitespace? . N5035) (char-upper-case? . N5034) (char-title-case? . N5033) (char-numeric? . N5032) (char-lower-case? . N5031) (char-general-category . N5030) (char-upcase . N502f) (char-titlecase . N502e) (char-foldcase . N502d) (char-downcase . N502c) (char-ci>? . N502b) (char-ci>=? . N502a) (char-ci=? . N5029) (char-ci<? . N5028) (char-ci<=? . N5027) (char-alphabetic? . N5026) (make-variable-transformer . N2ee6) (identifier? . N319d) (generate-temporaries . N3189) (free-identifier=? . N318b) (syntax->datum . N31a1) (datum->syntax . N319f) (bound-identifier=? . N318d) (record-type-descriptor? . N5025) (record-predicate . N5024) (record-mutator . N5023) (record-constructor . N5022) (record-accessor . N5021) (make-record-type-descriptor . N5020) (make-record-constructor-descriptor . N501f) (record? . N501e) (record-type-uid . N501d) (record-type-sealed? . N501c) (record-type-parent . N501b) (record-type-opaque? . N501a) (record-type-name . N5019) (record-type-generative? . N5018) (record-type-field-names . N5017) (record-rtd . N5016) (record-field-mutable? . N5015) (delete-file . N5014) (file-exists? . N5013) (vector-sort! . N5012) (vector-sort . N5011) (list-sort . N5010) (symbol-hash . N500f) (string-ci-hash . N500e) (string-hash . N500d) (equal-hash . N500c) (hashtable-equivalence-function . N500b) (make-hashtable . N500a) (hashtable-hash-function . N5009) (make-eqv-hashtable . N5008) (make-eq-hashtable . N5007) (hashtable? . N5006) (hashtable-update! . N5005) (hashtable-size . N5004) (hashtable-set! . N5003) (hashtable-ref . N5002) (hashtable-mutable? . N5001) (hashtable-keys . N5000) (hashtable-entries . N4fff) (hashtable-delete! . N4ffe) (hashtable-copy . N4ffd) (hashtable-contains? . N4ffc) (hashtable-clear! . N4ffb) (call-with-output-file . N4ffa) (call-with-input-file . N4ff9) (write-char . N4ff8) (write . N4ff7) (with-output-to-file . N4ff6) (with-input-from-file . N4ff5) (read-char . N4ff4) (read . N4ff3) (peek-char . N4ff2) (open-output-file . N4ff1) (open-input-file . N4ff0) (newline . N4fef) (display . N4fee) (close-output-port . N4fed) (close-input-port . N4fec) (eof-object? . N4feb) (eof-object . N4fea) (current-error-port . N4fe9) (current-output-port . N4fe8) (current-input-port . N4fe7) (output-port? . N4fe6) (input-port? . N4fe5) (utf-8-codec . N4fe4) (utf-16-codec . N4fe3) (transcoder-error-handling-mode . N4fe2) (transcoder-eol-style . N4fe1) (transcoder-codec . N4fe0) (transcoded-port . N4fdf) (textual-port? . N4fde) (string->bytevector . N4fdd) (standard-output-port . N4fdc) (standard-input-port . N4fdb) (standard-error-port . N4fda) (set-port-position! . N4fd9) (put-u8 . N4fd8) (put-string . N4fd7) (put-datum . N4fd6) (put-char . N4fd5) (put-bytevector . N4fd4) (port? . N4fd3) (port-transcoder . N4fd2) (port-position . N4fd1) (port-has-set-port-position!? . N4fd0) (port-has-port-position? . N4fcf) (port-eof? . N4fce) (output-port-buffer-mode . N4fcd) (open-string-output-port . N4fcc) (open-string-input-port . N4fcb) (open-file-output-port . N4fca) (open-file-input/output-port . N4fc9) (open-file-input-port . N4fc8) (open-bytevector-output-port . N4fc7) (open-bytevector-input-port . N4fc6) (native-transcoder . N4fc5) (native-eol-style . N4fc4) (make-transcoder . N4fc3) (latin-1-codec . N4fc2) (make-i/o-write-error . N4fc1) (make-i/o-read-error . N4fc0) (make-i/o-port-error . N4fbf) (make-i/o-invalid-position-error . N4fbe) (make-i/o-filename-error . N4fbd) (make-i/o-file-protection-error . N4fbc) (make-i/o-file-is-read-only-error . N4fbb) (make-i/o-file-does-not-exist-error . N4fba) (make-i/o-file-already-exists-error . N4fb9) (make-i/o-error . N4fb8) (make-i/o-encoding-error . N4fb7) (make-i/o-decoding-error . N4fb6) (make-custom-textual-output-port . N4fb5) (make-custom-textual-input/output-port . N4fb4) (make-custom-textual-input-port . N4fb3) (make-custom-binary-output-port . N4fb2) (make-custom-binary-input/output-port . N4fb1) (make-custom-binary-input-port . N4fb0) (make-bytevector . N4faf) (lookahead-u8 . N4fae) (lookahead-char . N4fad) (i/o-write-error? . N4fac) (i/o-read-error? . N4fab) (i/o-port-error? . N4faa) (i/o-invalid-position-error? . N4fa9) (i/o-filename-error? . N4fa8) (i/o-file-protection-error? . N4fa7) (i/o-file-is-read-only-error? . N4fa6) (i/o-file-does-not-exist-error? . N4fa5) (i/o-file-already-exists-error? . N4fa4) (i/o-error? . N4fa3) (i/o-error-position . N4fa2) (i/o-error-port . N4fa1) (i/o-error-filename . N4fa0) (i/o-encoding-error? . N4f9f) (i/o-encoding-error-char . N4f9e) (i/o-decoding-error? . N4f9d) (get-u8 . N4f9c) (get-string-n! . N4f9b) (get-string-n . N4f9a) (get-string-all . N4f99) (get-line . N4f98) (get-datum . N4f97) (get-char . N4f96) (get-bytevector-some . N4f95) (get-bytevector-n! . N4f94) (get-bytevector-n . N4f93) (get-bytevector-all . N4f92) (flush-output-port . N4f91) (close-port . N4f90) (exit . N4f88) (command-line . N4c1e) (string-fill! . N4f87) (string-set! . N4f86) (set-cdr! . N4f85) (set-car! . N4f84) (remove . N4f83) (remv . N4f82) (remp . N4f81) (remq . N4f80) (partition . N4f7f) (memv . N4f7e) (memq . N4f7d) (memp . N4f7c) (member . N4f7b) (exists . N4f7a) (for-all . N4f79) (fold-right . N4f78) (fold-left . N4f77) (find . N4f76) (filter . N4f75) (cons* . N4f74) (assv . N4f73) (assq . N4f72) (assp . N4f71) (assoc . N4f70) (call-with-string-output-port . N4f6f) (call-with-port . N4f6e) (call-with-bytevector-output-port . N4f6d) (bytevector->string . N4f6c) (buffer-mode? . N4f6b) (binary-port? . N4f6a) (with-exception-handler . N4f69) (raise-continuable . N4f68) (raise . N4f67) (eval . N317b) (environment . N3173) (make-enumeration . N4f66) (enum-set=? . N4f65) (enum-set-universe . N4f64) (enum-set-union . N4f63) (enum-set-subset? . N4f62) (enum-set-projection . N4f61) (enum-set-member? . N4f60) (enum-set-intersection . N4f5f) (enum-set-indexer . N4f5e) (enum-set-difference . N4f5d) (enum-set-constructor . N4f5c) (enum-set-complement . N4f5b) (enum-set->list . N4f5a) (who-condition? . N4f59) (warning? . N4f58) (violation? . N4f57) (undefined-violation? . N4f56) (syntax-violation? . N4f55) (syntax-violation-subform . N4f54) (syntax-violation-form . N4f53) (syntax-violation . N319b) (simple-conditions . N4f52) (serious-condition? . N4f51) (non-continuable-violation? . N4f50) (message-condition? . N4f4f) (make-who-condition . N4f4e) (make-warning . N4f4d) (make-violation . N4f4c) (make-undefined-violation . N4f4b) (make-syntax-violation . N4f4a) (make-serious-condition . N4f49) (make-non-continuable-violation . N4f48) (make-message-condition . N4f47) (make-lexical-violation . N4f46) (make-irritants-condition . N4f45) (make-implementation-restriction-violation . N4f44) (make-error . N4f43) (make-assertion-violation . N4f42) (lexical-violation? . N4f41) (irritants-condition? . N4f40) (implementation-restriction-violation? . N4f3f) (error? . N4f3e) (condition-who . N4f3d) (condition-predicate . N4f3c) (condition-message . N4f3b) (condition-irritants . N4f3a) (condition-accessor . N4f39) (condition . N4f38) (assertion-violation? . N4f37) (condition? . N4f36) (utf32->string . N4f35) (utf16->string . N4f34) (utf8->string . N4f33) (uint-list->bytevector . N4f32) (u8-list->bytevector . N4f31) (string->utf8 . N4f30) (string->utf32 . N4f2f) (string->utf16 . N4f2e) (sint-list->bytevector . N4f2d) (native-endianness . N4f2c) (bytevector? . N4f2b) (bytevector=? . N4f2a) (bytevector-uint-set! . N4f29) (bytevector-uint-ref . N4f28) (bytevector-u8-set! . N4f27) (bytevector-u8-ref . N4f26) (bytevector-u64-set! . N4f25) (bytevector-u64-ref . N4f24) (bytevector-u64-native-set! . N4f23) (bytevector-u64-native-ref . N4f22) (bytevector-u32-set! . N4f21) (bytevector-u32-ref . N4f20) (bytevector-u32-native-set! . N4f1f) (bytevector-u32-native-ref . N4f1e) (bytevector-u16-set! . N4f1d) (bytevector-u16-ref . N4f1c) (bytevector-u16-native-set! . N4f1b) (bytevector-u16-native-ref . N4f1a) (bytevector-sint-set! . N4f19) (bytevector-sint-ref . N4f18) (bytevector-s8-set! . N4f17) (bytevector-s8-ref . N4f16) (bytevector-s64-set! . N4f15) (bytevector-s64-ref . N4f14) (bytevector-s64-native-set! . N4f13) (bytevector-s64-native-ref . N4f12) (bytevector-s32-set! . N4f11) (bytevector-s32-ref . N4f10) (bytevector-s32-native-set! . N4f0f) (bytevector-s32-native-ref . N4f0e) (bytevector-s16-set! . N4f0d) (bytevector-s16-ref . N4f0c) (bytevector-s16-native-set! . N4f0b) (bytevector-s16-native-ref . N4f0a) (bytevector-length . N4f09) (bytevector-ieee-single-ref . N4f08) (bytevector-ieee-single-set! . N4f07) (bytevector-ieee-single-native-set! . N4f06) (bytevector-ieee-single-native-ref . N4f05) (bytevector-ieee-double-set! . N4f04) (bytevector-ieee-double-ref . N4f03) (bytevector-ieee-double-native-set! . N4f02) (bytevector-ieee-double-native-ref . N4f01) (bytevector-fill! . N4f00) (bytevector-copy! . N4eff) (bytevector-copy . N4efe) (bytevector->uint-list . N4efd) (bytevector->u8-list . N4efc) (bytevector->sint-list . N4efb) (no-nans-violation? . N4efa) (no-infinities-violation? . N4ef9) (make-no-nans-violation . N4ef8) (make-no-infinities-violation . N4ef7) (real->flonum . N4ef6) (flzero? . N4ef5) (fltruncate . N4ef4) (fltan . N4ef3) (flsqrt . N4ef2) (flsin . N4ef1) (flround . N4ef0) (flpositive? . N4eef) (flonum? . N4eee) (flodd? . N4eed) (flnumerator . N4eec) (flnegative? . N4eeb) (flnan? . N4eea) (flmod0 . N4ee9) (flmod . N4ee8) (flmin . N4ee7) (flmax . N4ee6) (fllog . N4ee5) (flinteger? . N4ee4) (flinfinite? . N4ee3) (flfloor . N4ee2) (flfinite? . N4ee1) (flexpt . N4ee0) (flexp . N4edf) (fleven? . N4ede) (fldiv0-and-mod0 . N4edd) (fldiv0 . N4edc) (fldiv-and-mod . N4edb) (fldiv . N4eda) (fldenominator . N4ed9) (flcos . N4ed8) (flceiling . N4ed7) (flatan . N4ed6) (flasin . N4ed5) (flacos . N4ed4) (flabs . N4ed3) (fl>? . N4ed2) (fl>=? . N4ed1) (fl=? . N4ed0) (fl<? . N4ecf) (fl<=? . N4ece) (fl/ . N4ecd) (fl- . N4ecc) (fl+ . N4ecb) (fl* . N4eca) (fixnum->flonum . N4ec9) (fxzero? . N4ec8) (fxxor . N4ec7) (fxrotate-bit-field . N4ec6) (fxreverse-bit-field . N4ec5) (fxpositive? . N4ec4) (fxodd? . N4ec3) (fxnot . N4ec2) (fxnegative? . N4ec1) (fxmod0 . N4ec0) (fxmod . N4ebf) (fxmin . N4ebe) (fxmax . N4ebd) (fxlength . N4ebc) (fxior . N4ebb) (fxif . N4eba) (fxfirst-bit-set . N4eb9) (fxeven? . N4eb8) (fxdiv0-and-mod0 . N4eb7) (fxdiv0 . N4eb6) (fxdiv-and-mod . N4eb5) (fxdiv . N4eb4) (fxcopy-bit-field . N4eb3) (fxcopy-bit . N4eb2) (fxbit-set? . N4eb1) (fxbit-field . N4eb0) (fxbit-count . N4eaf) (fxarithmetic-shift-right . N4eae) (fxarithmetic-shift-left . N4ead) (fxarithmetic-shift . N4eac) (fxand . N4eab) (fx>? . N4eaa) (fx>=? . N4ea9) (fx=? . N4ea8) (fx<? . N4ea7) (fx<=? . N4ea6) (fx-/carry . N4ea5) (fx- . N4ea4) (fx+/carry . N4ea3) (fx+ . N4ea2) (fx*/carry . N4ea1) (fx* . N4ea0) (greatest-fixnum . N4e9f) (least-fixnum . N4e9e) (fixnum-width . N4e9d) (fixnum? . N4e9c) (bitwise-rotate-bit-field . N4e9b) (bitwise-reverse-bit-field . N4e9a) (bitwise-length . N4e99) (bitwise-if . N4e98) (bitwise-first-bit-set . N4e97) (bitwise-copy-bit-field . N4e96) (bitwise-copy-bit . N4e95) (bitwise-bit-set? . N4e94) (bitwise-bit-field . N4e93) (bitwise-bit-count . N4e92) (bitwise-xor . N4e91) (bitwise-ior . N4e90) (bitwise-and . N4e8f) (bitwise-not . N4e8e) (bitwise-arithmetic-shift-right . N4e8d) (bitwise-arithmetic-shift-left . N4e8c) (bitwise-arithmetic-shift . N4e8b) (zero? . N4e8a) (vector? . N4e89) (vector-set! . N4e88) (vector-ref . N4e87) (vector-map . N4e86) (vector-length . N4e85) (vector-for-each . N4e84) (vector-fill! . N4e83) (vector->list . N4e82) (vector . N4e81) (values . N4e80) (truncate . N4e7f) (tan . N4e7e) (symbol? . N4e7d) (symbol=? . N4e7c) (symbol->string . N4e7b) (substring . N4e7a) (string? . N4e79) (string>? . N4e78) (string>=? . N4e77) (string=? . N4e76) (string<? . N4e75) (string<=? . N4e74) (string-ref . N4e73) (string-length . N4e72) (string-for-each . N4e71) (string-copy . N4e70) (string-append . N4e6f) (string->symbol . N4e6e) (string->number . N4e6d) (string->list . N4e6c) (string . N4e6b) (sqrt . N4e6a) (sin . N4e69) (round . N4e68) (reverse . N4e67) (real? . N4e66) (real-valued? . N4e65) (real-part . N4e64) (rationalize . N4e63) (rational? . N4e62) (rational-valued? . N4e61) (procedure? . N4e60) (positive? . N4e5f) (pair? . N4e5e) (odd? . N4e5d) (numerator . N4e5c) (number? . N4e5b) (number->string . N4e5a) (null? . N4e59) (not . N4e58) (negative? . N4e57) (nan? . N4e56) (min . N4e55) (max . N4e54) (map . N4e53) (make-vector . N4e52) (make-string . N4e51) (make-rectangular . N4e50) (make-polar . N4e4f) (magnitude . N4e4e) (log . N4e4d) (list? . N4e4c) (list-tail . N4e4b) (list-ref . N4e4a) (list->vector . N4e49) (list->string . N4e48) (list . N4e47) (length . N4e46) (lcm . N4e45) (integer? . N4e44) (integer-valued? . N4e43) (integer->char . N4e42) (infinite? . N4e41) (inexact? . N4e40) (inexact . N4e3f) (imag-part . N4e3e) (gcd . N4e3d) (for-each . N4e3c) (floor . N4e3b) (finite? . N4e3a) (expt . N4e39) (exp . N4e38) (exact? . N4e37) (exact-integer-sqrt . N4e36) (exact . N4e35) (even? . N4e34) (error . N4e33) (eqv? . N4e32) (equal? . N4e31) (eq? . N4e30) (dynamic-wind . N4e2f) (div0-and-mod0 . N4e2e) (mod0 . N4e2d) (div0 . N4e2c) (div-and-mod . N4e2b) (mod . N4e2a) (div . N4e29) (denominator . N4e28) (cos . N4e27) (cons . N4e26) (complex? . N4e25) (char? . N4e24) (char>? . N4e23) (char>=? . N4e22) (char=? . N4e21) (char<? . N4e20) (char<=? . N4e1f) (char->integer . N4e1e) (ceiling . N4e1d) (call-with-values . N4e1c) (call/cc . N4e1b) (call-with-current-continuation . N4e1a) (cddddr . N4e19) (cdddar . N4e18) (cddadr . N4e17) (cddaar . N4e16) (cdaddr . N4e15) (cdadar . N4e14) (cdaadr . N4e13) (cdaaar . N4e12) (cadddr . N4e11) (caddar . N4e10) (cadadr . N4e0f) (cadaar . N4e0e) (caaddr . N4e0d) (caadar . N4e0c) (caaadr . N4e0b) (caaaar . N4e0a) (cdddr . N4e09) (cddar . N4e08) (cdadr . N4e07) (cdaar . N4e06) (caddr . N4e05) (cadar . N4e04) (caadr . N4e03) (caaar . N4e02) (cddr . N4e01) (cdar . N4e00) (cadr . N4dff) (caar . N4dfe) (cdr . N4dfd) (car . N4dfc) (boolean? . N4dfb) (boolean=? . N4dfa) (atan . N4df9) (assertion-violation . N4df8) (asin . N4df7) (apply . N4df6) (append . N4df5) (angle . N4df4) (acos . N4df3) (abs . N4df2) (/ . N4df1) (* . N4df0) (- . N4def) (+ . N4dee) (>= . N4ded) (> . N4dec) (= . N4deb) (<= . N4dea) (< . N4de9) (library . N4de8) (&no-nans . N4de7) (&no-infinities . N4de6) (&i/o-encoding . N4de5) (&i/o-decoding . N4de4) (&i/o-port . N4de3) (&i/o-file-does-not-exist . N4de2) (&i/o-file-already-exists . N4de1) (&i/o-file-is-read-only . N4de0) (&i/o-file-protection . N4ddf) (&i/o-filename . N4dde) (&i/o-invalid-position . N4ddd) (&i/o-write . N4ddc) (&i/o-read . N4ddb) (&i/o . N4dda) (&undefined . N4dd9) (&syntax . N4dd8) (&lexical . N4dd7) (&implementation-restriction . N4dd6) (&non-continuable . N4dd5) (&who . N4dd4) (&irritants . N4dd3) (&assertion . N4dd2) (&violation . N4dd1) (&error . N4dd0) (&serious . N4dcf) (&warning . N4dce) (&message . N4dcd) (&condition . N4dcc) (define-condition-type . N4dcb) (define-enumeration . N4dca) (define-record-type . N4dc9) (parent-rtd . N4dc8) (nongenerative . N4dc7) (opaque . N4dc6) (sealed . N4dc5) (protocol . N4dc4) (parent . N4dc3) (immutable . N4dc2) (mutable . N4dc1) (fields . N4dc0) (error-handling-mode . N4dbf) (file-options . N4dbe) (buffer-mode . N4dbd) (eol-style . N4dbc) (guard . N4dbb) (unsyntax-splicing . N4db8) (unsyntax . N4db7) (unquote-splicing . N4db6) (unquote . N4db5) (_ . N4db4) (else . N4db3) (=> . N4db2) (... . N4db1) (assert . N4db0) (endianness . N4daf) (time . N4dad) (do . N4dac) (cond . N4dab) (let* . N4daa) (let*-values . N4da9) (let-values . N4da8) (identifier-syntax . N4da7) (with-syntax . N4da6) (quasisyntax . N4da5) (quasiquote . N4da4) (syntax-rules . N4da3) (include . N4da2) (record-constructor-descriptor . N4da0) (record-type-descriptor . N4d9f) (case . N4d9e) (unless . N4d9c) (when . N4d9b) (or . N4d9a) (and . N4d99) (if . N4d98) (let . N4d97) (letrec* . N4d96) (letrec . N4d95) (case-lambda . N4d93) (lambda . N4d92) (syntax . N4d91) (syntax-case . N4d90) (quote . N4d8f) (letrec-syntax . N4d8d) (let-syntax . N4d8c) (set! . N4d8b) (import . N4d8a) (begin . N4d89) (define-syntax . N4d87) (define . N4d86)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N5127 '(psyntax null-environment-5) '() '() '() '() '((make-promise . N4f89) (unquote-splicing . N4db6) (unquote . N4db5) (_ . N4db4) (else . N4db3) (=> . N4db2) (... . N4db1) (delay . N4dae) (do . N4dac) (cond . N4dab) (let* . N4daa) (quasiquote . N4da4) (syntax-rules . N4da3) (case . N4d9e) (or . N4d9a) (and . N4d99) (if . N4d98) (let . N4d97) (letrec . N4d95) (lambda . N4d92) (quote . N4d8f) (letrec-syntax . N4d8d) (let-syntax . N4d8c) (set! . N4d8b) (begin . N4d89) (define-syntax . N4d87) (define . N4d86)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N5128 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . N503a) (string-ci>=? . N5039) (string-ci=? . N5038) (string-ci<? . N5037) (string-ci<=? . N5036) (char-whitespace? . N5035) (char-upper-case? . N5034) (char-numeric? . N5032) (char-lower-case? . N5031) (char-upcase . N502f) (char-downcase . N502c) (char-ci>? . N502b) (char-ci>=? . N502a) (char-ci=? . N5029) (char-ci<? . N5028) (char-ci<=? . N5027) (char-alphabetic? . N5026) (call-with-output-file . N4ffa) (call-with-input-file . N4ff9) (write-char . N4ff8) (write . N4ff7) (with-output-to-file . N4ff6) (with-input-from-file . N4ff5) (read-char . N4ff4) (read . N4ff3) (peek-char . N4ff2) (open-output-file . N4ff1) (open-input-file . N4ff0) (newline . N4fef) (display . N4fee) (close-output-port . N4fed) (close-input-port . N4fec) (eof-object . N4fea) (current-output-port . N4fe8) (current-input-port . N4fe7) (output-port? . N4fe6) (input-port? . N4fe5) (scheme-report-environment . N3177) (quotient . N4f8f) (null-environment . N3175) (remainder . N4f8e) (modulo . N4f8d) (inexact->exact . N4f8c) (force . N4f8b) (exact->inexact . N4f8a) (make-promise . N4f89) (string-fill! . N4f87) (string-set! . N4f86) (set-cdr! . N4f85) (set-car! . N4f84) (memv . N4f7e) (memq . N4f7d) (member . N4f7b) (assv . N4f73) (assq . N4f72) (assoc . N4f70) (eval . N317b) (zero? . N4e8a) (vector? . N4e89) (vector-set! . N4e88) (vector-ref . N4e87) (vector-length . N4e85) (vector-fill! . N4e83) (vector->list . N4e82) (vector . N4e81) (values . N4e80) (truncate . N4e7f) (tan . N4e7e) (symbol? . N4e7d) (symbol->string . N4e7b) (substring . N4e7a) (string? . N4e79) (string>? . N4e78) (string>=? . N4e77) (string=? . N4e76) (string<? . N4e75) (string<=? . N4e74) (string-ref . N4e73) (string-length . N4e72) (string-copy . N4e70) (string-append . N4e6f) (string->symbol . N4e6e) (string->number . N4e6d) (string->list . N4e6c) (string . N4e6b) (sqrt . N4e6a) (sin . N4e69) (round . N4e68) (reverse . N4e67) (real? . N4e66) (real-part . N4e64) (rationalize . N4e63) (rational? . N4e62) (procedure? . N4e60) (positive? . N4e5f) (pair? . N4e5e) (odd? . N4e5d) (numerator . N4e5c) (number? . N4e5b) (number->string . N4e5a) (not . N4e58) (negative? . N4e57) (min . N4e55) (max . N4e54) (map . N4e53) (make-vector . N4e52) (make-string . N4e51) (make-rectangular . N4e50) (make-polar . N4e4f) (magnitude . N4e4e) (log . N4e4d) (list? . N4e4c) (list-tail . N4e4b) (list-ref . N4e4a) (list->vector . N4e49) (list->string . N4e48) (list . N4e47) (length . N4e46) (lcm . N4e45) (integer? . N4e44) (integer->char . N4e42) (inexact? . N4e40) (imag-part . N4e3e) (gcd . N4e3d) (for-each . N4e3c) (floor . N4e3b) (expt . N4e39) (exp . N4e38) (exact? . N4e37) (even? . N4e34) (eqv? . N4e32) (equal? . N4e31) (eq? . N4e30) (dynamic-wind . N4e2f) (denominator . N4e28) (cos . N4e27) (cons . N4e26) (complex? . N4e25) (char? . N4e24) (char>? . N4e23) (char>=? . N4e22) (char=? . N4e21) (char<? . N4e20) (char<=? . N4e1f) (char->integer . N4e1e) (ceiling . N4e1d) (call-with-values . N4e1c) (call-with-current-continuation . N4e1a) (cddddr . N4e19) (cdddar . N4e18) (cddadr . N4e17) (cddaar . N4e16) (cdaddr . N4e15) (cdadar . N4e14) (cdaadr . N4e13) (cdaaar . N4e12) (cadddr . N4e11) (caddar . N4e10) (cadadr . N4e0f) (cadaar . N4e0e) (caaddr . N4e0d) (caadar . N4e0c) (caaadr . N4e0b) (caaaar . N4e0a) (cdddr . N4e09) (cddar . N4e08) (cdadr . N4e07) (cdaar . N4e06) (caddr . N4e05) (cadar . N4e04) (caadr . N4e03) (caaar . N4e02) (cddr . N4e01) (cdar . N4e00) (cadr . N4dff) (caar . N4dfe) (cdr . N4dfd) (car . N4dfc) (boolean? . N4dfb) (atan . N4df9) (asin . N4df7) (apply . N4df6) (append . N4df5) (angle . N4df4) (acos . N4df3) (abs . N4df2) (/ . N4df1) (* . N4df0) (- . N4def) (+ . N4dee) (>= . N4ded) (> . N4dec) (= . N4deb) (<= . N4dea) (< . N4de9) (unquote-splicing . N4db6) (unquote . N4db5) (else . N4db3) (=> . N4db2) (... . N4db1) (delay . N4dae) (do . N4dac) (cond . N4dab) (let* . N4daa) (quasiquote . N4da4) (syntax-rules . N4da3) (case . N4d9e) (or . N4d9a) (and . N4d99) (if . N4d98) (let . N4d97) (letrec . N4d95) (lambda . N4d92) (quote . N4d8f) (letrec-syntax . N4d8d) (let-syntax . N4d8c) (set! . N4d8b) (begin . N4d89) (define-syntax . N4d87) (define . N4d86)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N5129 '(psyntax modules) '() '() '() '() '((module . N4d88)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N512a '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N512b '(rnrs) '(6) '() '() '() '((regexp? . N50e6) (string-upcase . N5042) (string-titlecase . N5041) (string-normalize-nfkd . N5040) (string-normalize-nfkc . N503f) (string-normalize-nfd . N503e) (string-normalize-nfc . N503d) (string-foldcase . N503c) (string-downcase . N503b) (string-ci>? . N503a) (string-ci>=? . N5039) (string-ci=? . N5038) (string-ci<? . N5037) (string-ci<=? . N5036) (char-whitespace? . N5035) (char-upper-case? . N5034) (char-title-case? . N5033) (char-numeric? . N5032) (char-lower-case? . N5031) (char-general-category . N5030) (char-upcase . N502f) (char-titlecase . N502e) (char-foldcase . N502d) (char-downcase . N502c) (char-ci>? . N502b) (char-ci>=? . N502a) (char-ci=? . N5029) (char-ci<? . N5028) (char-ci<=? . N5027) (char-alphabetic? . N5026) (make-variable-transformer . N2ee6) (identifier? . N319d) (generate-temporaries . N3189) (free-identifier=? . N318b) (syntax->datum . N31a1) (datum->syntax . N319f) (bound-identifier=? . N318d) (record-type-descriptor? . N5025) (record-predicate . N5024) (record-mutator . N5023) (record-constructor . N5022) (record-accessor . N5021) (make-record-type-descriptor . N5020) (make-record-constructor-descriptor . N501f) (record? . N501e) (record-type-uid . N501d) (record-type-sealed? . N501c) (record-type-parent . N501b) (record-type-opaque? . N501a) (record-type-name . N5019) (record-type-generative? . N5018) (record-type-field-names . N5017) (record-rtd . N5016) (record-field-mutable? . N5015) (delete-file . N5014) (file-exists? . N5013) (vector-sort! . N5012) (vector-sort . N5011) (list-sort . N5010) (symbol-hash . N500f) (string-ci-hash . N500e) (string-hash . N500d) (equal-hash . N500c) (hashtable-equivalence-function . N500b) (make-hashtable . N500a) (hashtable-hash-function . N5009) (make-eqv-hashtable . N5008) (make-eq-hashtable . N5007) (hashtable? . N5006) (hashtable-update! . N5005) (hashtable-size . N5004) (hashtable-set! . N5003) (hashtable-ref . N5002) (hashtable-mutable? . N5001) (hashtable-keys . N5000) (hashtable-entries . N4fff) (hashtable-delete! . N4ffe) (hashtable-copy . N4ffd) (hashtable-contains? . N4ffc) (hashtable-clear! . N4ffb) (call-with-output-file . N4ffa) (call-with-input-file . N4ff9) (write-char . N4ff8) (write . N4ff7) (with-output-to-file . N4ff6) (with-input-from-file . N4ff5) (read-char . N4ff4) (read . N4ff3) (peek-char . N4ff2) (open-output-file . N4ff1) (open-input-file . N4ff0) (newline . N4fef) (display . N4fee) (close-output-port . N4fed) (close-input-port . N4fec) (eof-object? . N4feb) (eof-object . N4fea) (current-error-port . N4fe9) (current-output-port . N4fe8) (current-input-port . N4fe7) (output-port? . N4fe6) (input-port? . N4fe5) (utf-8-codec . N4fe4) (utf-16-codec . N4fe3) (transcoder-error-handling-mode . N4fe2) (transcoder-eol-style . N4fe1) (transcoder-codec . N4fe0) (transcoded-port . N4fdf) (textual-port? . N4fde) (string->bytevector . N4fdd) (standard-output-port . N4fdc) (standard-input-port . N4fdb) (standard-error-port . N4fda) (set-port-position! . N4fd9) (put-u8 . N4fd8) (put-string . N4fd7) (put-datum . N4fd6) (put-char . N4fd5) (put-bytevector . N4fd4) (port? . N4fd3) (port-transcoder . N4fd2) (port-position . N4fd1) (port-has-set-port-position!? . N4fd0) (port-has-port-position? . N4fcf) (port-eof? . N4fce) (output-port-buffer-mode . N4fcd) (open-string-output-port . N4fcc) (open-string-input-port . N4fcb) (open-file-output-port . N4fca) (open-file-input/output-port . N4fc9) (open-file-input-port . N4fc8) (open-bytevector-output-port . N4fc7) (open-bytevector-input-port . N4fc6) (native-transcoder . N4fc5) (native-eol-style . N4fc4) (make-transcoder . N4fc3) (latin-1-codec . N4fc2) (make-i/o-write-error . N4fc1) (make-i/o-read-error . N4fc0) (make-i/o-port-error . N4fbf) (make-i/o-invalid-position-error . N4fbe) (make-i/o-filename-error . N4fbd) (make-i/o-file-protection-error . N4fbc) (make-i/o-file-is-read-only-error . N4fbb) (make-i/o-file-does-not-exist-error . N4fba) (make-i/o-file-already-exists-error . N4fb9) (make-i/o-error . N4fb8) (make-i/o-encoding-error . N4fb7) (make-i/o-decoding-error . N4fb6) (make-custom-textual-output-port . N4fb5) (make-custom-textual-input/output-port . N4fb4) (make-custom-textual-input-port . N4fb3) (make-custom-binary-output-port . N4fb2) (make-custom-binary-input/output-port . N4fb1) (make-custom-binary-input-port . N4fb0) (make-bytevector . N4faf) (lookahead-u8 . N4fae) (lookahead-char . N4fad) (i/o-write-error? . N4fac) (i/o-read-error? . N4fab) (i/o-port-error? . N4faa) (i/o-invalid-position-error? . N4fa9) (i/o-filename-error? . N4fa8) (i/o-file-protection-error? . N4fa7) (i/o-file-is-read-only-error? . N4fa6) (i/o-file-does-not-exist-error? . N4fa5) (i/o-file-already-exists-error? . N4fa4) (i/o-error? . N4fa3) (i/o-error-position . N4fa2) (i/o-error-port . N4fa1) (i/o-error-filename . N4fa0) (i/o-encoding-error? . N4f9f) (i/o-encoding-error-char . N4f9e) (i/o-decoding-error? . N4f9d) (get-u8 . N4f9c) (get-string-n! . N4f9b) (get-string-n . N4f9a) (get-string-all . N4f99) (get-line . N4f98) (get-datum . N4f97) (get-char . N4f96) (get-bytevector-some . N4f95) (get-bytevector-n! . N4f94) (get-bytevector-n . N4f93) (get-bytevector-all . N4f92) (flush-output-port . N4f91) (close-port . N4f90) (exit . N4f88) (command-line . N4c1e) (remove . N4f83) (remv . N4f82) (remp . N4f81) (remq . N4f80) (partition . N4f7f) (memv . N4f7e) (memq . N4f7d) (memp . N4f7c) (member . N4f7b) (exists . N4f7a) (for-all . N4f79) (fold-right . N4f78) (fold-left . N4f77) (find . N4f76) (filter . N4f75) (cons* . N4f74) (assv . N4f73) (assq . N4f72) (assp . N4f71) (assoc . N4f70) (call-with-string-output-port . N4f6f) (call-with-port . N4f6e) (call-with-bytevector-output-port . N4f6d) (bytevector->string . N4f6c) (buffer-mode? . N4f6b) (binary-port? . N4f6a) (with-exception-handler . N4f69) (raise-continuable . N4f68) (raise . N4f67) (make-enumeration . N4f66) (enum-set=? . N4f65) (enum-set-universe . N4f64) (enum-set-union . N4f63) (enum-set-subset? . N4f62) (enum-set-projection . N4f61) (enum-set-member? . N4f60) (enum-set-intersection . N4f5f) (enum-set-indexer . N4f5e) (enum-set-difference . N4f5d) (enum-set-constructor . N4f5c) (enum-set-complement . N4f5b) (enum-set->list . N4f5a) (who-condition? . N4f59) (warning? . N4f58) (violation? . N4f57) (undefined-violation? . N4f56) (syntax-violation? . N4f55) (syntax-violation-subform . N4f54) (syntax-violation-form . N4f53) (syntax-violation . N319b) (simple-conditions . N4f52) (serious-condition? . N4f51) (non-continuable-violation? . N4f50) (message-condition? . N4f4f) (make-who-condition . N4f4e) (make-warning . N4f4d) (make-violation . N4f4c) (make-undefined-violation . N4f4b) (make-syntax-violation . N4f4a) (make-serious-condition . N4f49) (make-non-continuable-violation . N4f48) (make-message-condition . N4f47) (make-lexical-violation . N4f46) (make-irritants-condition . N4f45) (make-implementation-restriction-violation . N4f44) (make-error . N4f43) (make-assertion-violation . N4f42) (lexical-violation? . N4f41) (irritants-condition? . N4f40) (implementation-restriction-violation? . N4f3f) (error? . N4f3e) (condition-who . N4f3d) (condition-predicate . N4f3c) (condition-message . N4f3b) (condition-irritants . N4f3a) (condition-accessor . N4f39) (condition . N4f38) (assertion-violation? . N4f37) (condition? . N4f36) (utf32->string . N4f35) (utf16->string . N4f34) (utf8->string . N4f33) (uint-list->bytevector . N4f32) (u8-list->bytevector . N4f31) (string->utf8 . N4f30) (string->utf32 . N4f2f) (string->utf16 . N4f2e) (sint-list->bytevector . N4f2d) (native-endianness . N4f2c) (bytevector? . N4f2b) (bytevector=? . N4f2a) (bytevector-uint-set! . N4f29) (bytevector-uint-ref . N4f28) (bytevector-u8-set! . N4f27) (bytevector-u8-ref . N4f26) (bytevector-u64-set! . N4f25) (bytevector-u64-ref . N4f24) (bytevector-u64-native-set! . N4f23) (bytevector-u64-native-ref . N4f22) (bytevector-u32-set! . N4f21) (bytevector-u32-ref . N4f20) (bytevector-u32-native-set! . N4f1f) (bytevector-u32-native-ref . N4f1e) (bytevector-u16-set! . N4f1d) (bytevector-u16-ref . N4f1c) (bytevector-u16-native-set! . N4f1b) (bytevector-u16-native-ref . N4f1a) (bytevector-sint-set! . N4f19) (bytevector-sint-ref . N4f18) (bytevector-s8-set! . N4f17) (bytevector-s8-ref . N4f16) (bytevector-s64-set! . N4f15) (bytevector-s64-ref . N4f14) (bytevector-s64-native-set! . N4f13) (bytevector-s64-native-ref . N4f12) (bytevector-s32-set! . N4f11) (bytevector-s32-ref . N4f10) (bytevector-s32-native-set! . N4f0f) (bytevector-s32-native-ref . N4f0e) (bytevector-s16-set! . N4f0d) (bytevector-s16-ref . N4f0c) (bytevector-s16-native-set! . N4f0b) (bytevector-s16-native-ref . N4f0a) (bytevector-length . N4f09) (bytevector-ieee-single-ref . N4f08) (bytevector-ieee-single-set! . N4f07) (bytevector-ieee-single-native-set! . N4f06) (bytevector-ieee-single-native-ref . N4f05) (bytevector-ieee-double-set! . N4f04) (bytevector-ieee-double-ref . N4f03) (bytevector-ieee-double-native-set! . N4f02) (bytevector-ieee-double-native-ref . N4f01) (bytevector-fill! . N4f00) (bytevector-copy! . N4eff) (bytevector-copy . N4efe) (bytevector->uint-list . N4efd) (bytevector->u8-list . N4efc) (bytevector->sint-list . N4efb) (no-nans-violation? . N4efa) (no-infinities-violation? . N4ef9) (make-no-nans-violation . N4ef8) (make-no-infinities-violation . N4ef7) (real->flonum . N4ef6) (flzero? . N4ef5) (fltruncate . N4ef4) (fltan . N4ef3) (flsqrt . N4ef2) (flsin . N4ef1) (flround . N4ef0) (flpositive? . N4eef) (flonum? . N4eee) (flodd? . N4eed) (flnumerator . N4eec) (flnegative? . N4eeb) (flnan? . N4eea) (flmod0 . N4ee9) (flmod . N4ee8) (flmin . N4ee7) (flmax . N4ee6) (fllog . N4ee5) (flinteger? . N4ee4) (flinfinite? . N4ee3) (flfloor . N4ee2) (flfinite? . N4ee1) (flexpt . N4ee0) (flexp . N4edf) (fleven? . N4ede) (fldiv0-and-mod0 . N4edd) (fldiv0 . N4edc) (fldiv-and-mod . N4edb) (fldiv . N4eda) (fldenominator . N4ed9) (flcos . N4ed8) (flceiling . N4ed7) (flatan . N4ed6) (flasin . N4ed5) (flacos . N4ed4) (flabs . N4ed3) (fl>? . N4ed2) (fl>=? . N4ed1) (fl=? . N4ed0) (fl<? . N4ecf) (fl<=? . N4ece) (fl/ . N4ecd) (fl- . N4ecc) (fl+ . N4ecb) (fl* . N4eca) (fixnum->flonum . N4ec9) (fxzero? . N4ec8) (fxxor . N4ec7) (fxrotate-bit-field . N4ec6) (fxreverse-bit-field . N4ec5) (fxpositive? . N4ec4) (fxodd? . N4ec3) (fxnot . N4ec2) (fxnegative? . N4ec1) (fxmod0 . N4ec0) (fxmod . N4ebf) (fxmin . N4ebe) (fxmax . N4ebd) (fxlength . N4ebc) (fxior . N4ebb) (fxif . N4eba) (fxfirst-bit-set . N4eb9) (fxeven? . N4eb8) (fxdiv0-and-mod0 . N4eb7) (fxdiv0 . N4eb6) (fxdiv-and-mod . N4eb5) (fxdiv . N4eb4) (fxcopy-bit-field . N4eb3) (fxcopy-bit . N4eb2) (fxbit-set? . N4eb1) (fxbit-field . N4eb0) (fxbit-count . N4eaf) (fxarithmetic-shift-right . N4eae) (fxarithmetic-shift-left . N4ead) (fxarithmetic-shift . N4eac) (fxand . N4eab) (fx>? . N4eaa) (fx>=? . N4ea9) (fx=? . N4ea8) (fx<? . N4ea7) (fx<=? . N4ea6) (fx-/carry . N4ea5) (fx- . N4ea4) (fx+/carry . N4ea3) (fx+ . N4ea2) (fx*/carry . N4ea1) (fx* . N4ea0) (greatest-fixnum . N4e9f) (least-fixnum . N4e9e) (fixnum-width . N4e9d) (fixnum? . N4e9c) (bitwise-rotate-bit-field . N4e9b) (bitwise-reverse-bit-field . N4e9a) (bitwise-length . N4e99) (bitwise-if . N4e98) (bitwise-first-bit-set . N4e97) (bitwise-copy-bit-field . N4e96) (bitwise-copy-bit . N4e95) (bitwise-bit-set? . N4e94) (bitwise-bit-field . N4e93) (bitwise-bit-count . N4e92) (bitwise-xor . N4e91) (bitwise-ior . N4e90) (bitwise-and . N4e8f) (bitwise-not . N4e8e) (bitwise-arithmetic-shift-right . N4e8d) (bitwise-arithmetic-shift-left . N4e8c) (bitwise-arithmetic-shift . N4e8b) (zero? . N4e8a) (vector? . N4e89) (vector-set! . N4e88) (vector-ref . N4e87) (vector-map . N4e86) (vector-length . N4e85) (vector-for-each . N4e84) (vector-fill! . N4e83) (vector->list . N4e82) (vector . N4e81) (values . N4e80) (truncate . N4e7f) (tan . N4e7e) (symbol? . N4e7d) (symbol=? . N4e7c) (symbol->string . N4e7b) (substring . N4e7a) (string? . N4e79) (string>? . N4e78) (string>=? . N4e77) (string=? . N4e76) (string<? . N4e75) (string<=? . N4e74) (string-ref . N4e73) (string-length . N4e72) (string-for-each . N4e71) (string-copy . N4e70) (string-append . N4e6f) (string->symbol . N4e6e) (string->number . N4e6d) (string->list . N4e6c) (string . N4e6b) (sqrt . N4e6a) (sin . N4e69) (round . N4e68) (reverse . N4e67) (real? . N4e66) (real-valued? . N4e65) (real-part . N4e64) (rationalize . N4e63) (rational? . N4e62) (rational-valued? . N4e61) (procedure? . N4e60) (positive? . N4e5f) (pair? . N4e5e) (odd? . N4e5d) (numerator . N4e5c) (number? . N4e5b) (number->string . N4e5a) (null? . N4e59) (not . N4e58) (negative? . N4e57) (nan? . N4e56) (min . N4e55) (max . N4e54) (map . N4e53) (make-vector . N4e52) (make-string . N4e51) (make-rectangular . N4e50) (make-polar . N4e4f) (magnitude . N4e4e) (log . N4e4d) (list? . N4e4c) (list-tail . N4e4b) (list-ref . N4e4a) (list->vector . N4e49) (list->string . N4e48) (list . N4e47) (length . N4e46) (lcm . N4e45) (integer? . N4e44) (integer-valued? . N4e43) (integer->char . N4e42) (infinite? . N4e41) (inexact? . N4e40) (inexact . N4e3f) (imag-part . N4e3e) (gcd . N4e3d) (for-each . N4e3c) (floor . N4e3b) (finite? . N4e3a) (expt . N4e39) (exp . N4e38) (exact? . N4e37) (exact-integer-sqrt . N4e36) (exact . N4e35) (even? . N4e34) (error . N4e33) (eqv? . N4e32) (equal? . N4e31) (eq? . N4e30) (dynamic-wind . N4e2f) (div0-and-mod0 . N4e2e) (mod0 . N4e2d) (div0 . N4e2c) (div-and-mod . N4e2b) (mod . N4e2a) (div . N4e29) (denominator . N4e28) (cos . N4e27) (cons . N4e26) (complex? . N4e25) (char? . N4e24) (char>? . N4e23) (char>=? . N4e22) (char=? . N4e21) (char<? . N4e20) (char<=? . N4e1f) (char->integer . N4e1e) (ceiling . N4e1d) (call-with-values . N4e1c) (call/cc . N4e1b) (call-with-current-continuation . N4e1a) (cddddr . N4e19) (cdddar . N4e18) (cddadr . N4e17) (cddaar . N4e16) (cdaddr . N4e15) (cdadar . N4e14) (cdaadr . N4e13) (cdaaar . N4e12) (cadddr . N4e11) (caddar . N4e10) (cadadr . N4e0f) (cadaar . N4e0e) (caaddr . N4e0d) (caadar . N4e0c) (caaadr . N4e0b) (caaaar . N4e0a) (cdddr . N4e09) (cddar . N4e08) (cdadr . N4e07) (cdaar . N4e06) (caddr . N4e05) (cadar . N4e04) (caadr . N4e03) (caaar . N4e02) (cddr . N4e01) (cdar . N4e00) (cadr . N4dff) (caar . N4dfe) (cdr . N4dfd) (car . N4dfc) (boolean? . N4dfb) (boolean=? . N4dfa) (atan . N4df9) (assertion-violation . N4df8) (asin . N4df7) (apply . N4df6) (append . N4df5) (angle . N4df4) (acos . N4df3) (abs . N4df2) (/ . N4df1) (* . N4df0) (- . N4def) (+ . N4dee) (>= . N4ded) (> . N4dec) (= . N4deb) (<= . N4dea) (< . N4de9) (&no-nans . N4de7) (&no-infinities . N4de6) (&i/o-encoding . N4de5) (&i/o-decoding . N4de4) (&i/o-port . N4de3) (&i/o-file-does-not-exist . N4de2) (&i/o-file-already-exists . N4de1) (&i/o-file-is-read-only . N4de0) (&i/o-file-protection . N4ddf) (&i/o-filename . N4dde) (&i/o-invalid-position . N4ddd) (&i/o-write . N4ddc) (&i/o-read . N4ddb) (&i/o . N4dda) (&undefined . N4dd9) (&syntax . N4dd8) (&lexical . N4dd7) (&implementation-restriction . N4dd6) (&non-continuable . N4dd5) (&who . N4dd4) (&irritants . N4dd3) (&assertion . N4dd2) (&violation . N4dd1) (&error . N4dd0) (&serious . N4dcf) (&warning . N4dce) (&message . N4dcd) (&condition . N4dcc) (define-condition-type . N4dcb) (define-enumeration . N4dca) (define-record-type . N4dc9) (parent-rtd . N4dc8) (nongenerative . N4dc7) (opaque . N4dc6) (sealed . N4dc5) (protocol . N4dc4) (parent . N4dc3) (immutable . N4dc2) (mutable . N4dc1) (fields . N4dc0) (error-handling-mode . N4dbf) (file-options . N4dbe) (buffer-mode . N4dbd) (eol-style . N4dbc) (guard . N4dbb) (unsyntax-splicing . N4db8) (unsyntax . N4db7) (unquote-splicing . N4db6) (unquote . N4db5) (_ . N4db4) (else . N4db3) (=> . N4db2) (... . N4db1) (assert . N4db0) (endianness . N4daf) (do . N4dac) (cond . N4dab) (let* . N4daa) (let*-values . N4da9) (let-values . N4da8) (identifier-syntax . N4da7) (with-syntax . N4da6) (quasisyntax . N4da5) (quasiquote . N4da4) (syntax-rules . N4da3) (record-constructor-descriptor . N4da0) (record-type-descriptor . N4d9f) (case . N4d9e) (unless . N4d9c) (when . N4d9b) (or . N4d9a) (and . N4d99) (if . N4d98) (let . N4d97) (letrec* . N4d96) (letrec . N4d95) (case-lambda . N4d93) (lambda . N4d92) (syntax . N4d91) (syntax-case . N4d90) (quote . N4d8f) (letrec-syntax . N4d8d) (let-syntax . N4d8c) (set! . N4d8b) (begin . N4d89) (define-syntax . N4d87) (define . N4d86)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N512c '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . N3177) (quotient . N4f8f) (null-environment . N3175) (remainder . N4f8e) (modulo . N4f8d) (inexact->exact . N4f8c) (force . N4f8b) (exact->inexact . N4f8a) (make-promise . N4f89) (delay . N4dae)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N512d '(rnrs control) '(6) '() '() '() '((do . N4dac) (unless . N4d9c) (when . N4d9b) (case-lambda . N4d93)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N512e '(rnrs eval) '(6) '() '() '() '((eval . N317b) (environment . N3173)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N512f '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . N4f85) (set-car! . N4f84)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N5130 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . N4f87) (string-set! . N4f86)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N5131 '(rnrs programs) '(6) '() '() '() '((exit . N4f88) (command-line . N4c1e)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N5132 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . N2ee6) (identifier? . N319d) (generate-temporaries . N3189) (free-identifier=? . N318b) (syntax->datum . N31a1) (datum->syntax . N319f) (bound-identifier=? . N318d) (syntax-violation . N319b) (unsyntax-splicing . N4db8) (unsyntax . N4db7) (_ . N4db4) (... . N4db1) (with-syntax . N4da6) (quasisyntax . N4da5) (syntax . N4d91) (syntax-case . N4d90)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N5133 '(rnrs files) '(6) '() '() '() '((delete-file . N5014) (file-exists? . N5013) (make-i/o-write-error . N4fc1) (make-i/o-read-error . N4fc0) (make-i/o-port-error . N4fbf) (make-i/o-invalid-position-error . N4fbe) (make-i/o-filename-error . N4fbd) (make-i/o-file-protection-error . N4fbc) (make-i/o-file-is-read-only-error . N4fbb) (make-i/o-file-does-not-exist-error . N4fba) (make-i/o-file-already-exists-error . N4fb9) (make-i/o-error . N4fb8) (i/o-write-error? . N4fac) (i/o-read-error? . N4fab) (i/o-port-error? . N4faa) (i/o-invalid-position-error? . N4fa9) (i/o-filename-error? . N4fa8) (i/o-file-protection-error? . N4fa7) (i/o-file-is-read-only-error? . N4fa6) (i/o-file-does-not-exist-error? . N4fa5) (i/o-file-already-exists-error? . N4fa4) (i/o-error? . N4fa3) (i/o-error-position . N4fa2) (i/o-error-port . N4fa1) (i/o-error-filename . N4fa0) (&i/o-port . N4de3) (&i/o-file-does-not-exist . N4de2) (&i/o-file-already-exists . N4de1) (&i/o-file-is-read-only . N4de0) (&i/o-file-protection . N4ddf) (&i/o-filename . N4dde) (&i/o-invalid-position . N4ddd) (&i/o-write . N4ddc) (&i/o-read . N4ddb) (&i/o . N4dda)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N5134 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . N5012) (vector-sort . N5011) (list-sort . N5010)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N5135 '(rnrs base) '(6) '() '() '() '((zero? . N4e8a) (vector? . N4e89) (vector-set! . N4e88) (vector-ref . N4e87) (vector-map . N4e86) (vector-length . N4e85) (vector-for-each . N4e84) (vector-fill! . N4e83) (vector->list . N4e82) (vector . N4e81) (values . N4e80) (truncate . N4e7f) (tan . N4e7e) (symbol? . N4e7d) (symbol=? . N4e7c) (symbol->string . N4e7b) (substring . N4e7a) (string? . N4e79) (string>? . N4e78) (string>=? . N4e77) (string=? . N4e76) (string<? . N4e75) (string<=? . N4e74) (string-ref . N4e73) (string-length . N4e72) (string-for-each . N4e71) (string-copy . N4e70) (string-append . N4e6f) (string->symbol . N4e6e) (string->number . N4e6d) (string->list . N4e6c) (string . N4e6b) (sqrt . N4e6a) (sin . N4e69) (round . N4e68) (reverse . N4e67) (real? . N4e66) (real-valued? . N4e65) (real-part . N4e64) (rationalize . N4e63) (rational? . N4e62) (rational-valued? . N4e61) (procedure? . N4e60) (positive? . N4e5f) (pair? . N4e5e) (odd? . N4e5d) (numerator . N4e5c) (number? . N4e5b) (number->string . N4e5a) (null? . N4e59) (not . N4e58) (negative? . N4e57) (nan? . N4e56) (min . N4e55) (max . N4e54) (map . N4e53) (make-vector . N4e52) (make-string . N4e51) (make-rectangular . N4e50) (make-polar . N4e4f) (magnitude . N4e4e) (log . N4e4d) (list? . N4e4c) (list-tail . N4e4b) (list-ref . N4e4a) (list->vector . N4e49) (list->string . N4e48) (list . N4e47) (length . N4e46) (lcm . N4e45) (integer? . N4e44) (integer-valued? . N4e43) (integer->char . N4e42) (infinite? . N4e41) (inexact? . N4e40) (inexact . N4e3f) (imag-part . N4e3e) (gcd . N4e3d) (for-each . N4e3c) (floor . N4e3b) (finite? . N4e3a) (expt . N4e39) (exp . N4e38) (exact? . N4e37) (exact-integer-sqrt . N4e36) (exact . N4e35) (even? . N4e34) (error . N4e33) (eqv? . N4e32) (equal? . N4e31) (eq? . N4e30) (dynamic-wind . N4e2f) (div0-and-mod0 . N4e2e) (mod0 . N4e2d) (div0 . N4e2c) (div-and-mod . N4e2b) (mod . N4e2a) (div . N4e29) (denominator . N4e28) (cos . N4e27) (cons . N4e26) (complex? . N4e25) (char? . N4e24) (char>? . N4e23) (char>=? . N4e22) (char=? . N4e21) (char<? . N4e20) (char<=? . N4e1f) (char->integer . N4e1e) (ceiling . N4e1d) (call-with-values . N4e1c) (call/cc . N4e1b) (call-with-current-continuation . N4e1a) (cddddr . N4e19) (cdddar . N4e18) (cddadr . N4e17) (cddaar . N4e16) (cdaddr . N4e15) (cdadar . N4e14) (cdaadr . N4e13) (cdaaar . N4e12) (cadddr . N4e11) (caddar . N4e10) (cadadr . N4e0f) (cadaar . N4e0e) (caaddr . N4e0d) (caadar . N4e0c) (caaadr . N4e0b) (caaaar . N4e0a) (cdddr . N4e09) (cddar . N4e08) (cdadr . N4e07) (cdaar . N4e06) (caddr . N4e05) (cadar . N4e04) (caadr . N4e03) (caaar . N4e02) (cddr . N4e01) (cdar . N4e00) (cadr . N4dff) (caar . N4dfe) (cdr . N4dfd) (car . N4dfc) (boolean? . N4dfb) (boolean=? . N4dfa) (atan . N4df9) (assertion-violation . N4df8) (asin . N4df7) (apply . N4df6) (append . N4df5) (angle . N4df4) (acos . N4df3) (abs . N4df2) (/ . N4df1) (* . N4df0) (- . N4def) (+ . N4dee) (>= . N4ded) (> . N4dec) (= . N4deb) (<= . N4dea) (< . N4de9) (unquote-splicing . N4db6) (unquote . N4db5) (_ . N4db4) (else . N4db3) (=> . N4db2) (... . N4db1) (assert . N4db0) (cond . N4dab) (let* . N4daa) (let*-values . N4da9) (let-values . N4da8) (identifier-syntax . N4da7) (quasiquote . N4da4) (syntax-rules . N4da3) (case . N4d9e) (or . N4d9a) (and . N4d99) (if . N4d98) (let . N4d97) (letrec* . N4d96) (letrec . N4d95) (lambda . N4d92) (quote . N4d8f) (letrec-syntax . N4d8d) (let-syntax . N4d8c) (set! . N4d8b) (begin . N4d89) (define-syntax . N4d87) (define . N4d86)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N5136 '(rnrs lists) '(6) '() '() '() '((remove . N4f83) (remv . N4f82) (remp . N4f81) (remq . N4f80) (partition . N4f7f) (memv . N4f7e) (memq . N4f7d) (memp . N4f7c) (member . N4f7b) (exists . N4f7a) (for-all . N4f79) (fold-right . N4f78) (fold-left . N4f77) (find . N4f76) (filter . N4f75) (cons* . N4f74) (assv . N4f73) (assq . N4f72) (assp . N4f71) (assoc . N4f70)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N5137 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . N4ffa) (call-with-input-file . N4ff9) (write-char . N4ff8) (write . N4ff7) (with-output-to-file . N4ff6) (with-input-from-file . N4ff5) (read-char . N4ff4) (read . N4ff3) (peek-char . N4ff2) (open-output-file . N4ff1) (open-input-file . N4ff0) (newline . N4fef) (display . N4fee) (close-output-port . N4fed) (close-input-port . N4fec) (eof-object? . N4feb) (eof-object . N4fea) (current-error-port . N4fe9) (current-output-port . N4fe8) (current-input-port . N4fe7) (output-port? . N4fe6) (input-port? . N4fe5) (make-i/o-write-error . N4fc1) (make-i/o-read-error . N4fc0) (make-i/o-port-error . N4fbf) (make-i/o-invalid-position-error . N4fbe) (make-i/o-filename-error . N4fbd) (make-i/o-file-protection-error . N4fbc) (make-i/o-file-is-read-only-error . N4fbb) (make-i/o-file-does-not-exist-error . N4fba) (make-i/o-file-already-exists-error . N4fb9) (make-i/o-error . N4fb8) (i/o-write-error? . N4fac) (i/o-read-error? . N4fab) (i/o-port-error? . N4faa) (i/o-invalid-position-error? . N4fa9) (i/o-filename-error? . N4fa8) (i/o-file-protection-error? . N4fa7) (i/o-file-is-read-only-error? . N4fa6) (i/o-file-does-not-exist-error? . N4fa5) (i/o-file-already-exists-error? . N4fa4) (i/o-error? . N4fa3) (i/o-error-position . N4fa2) (i/o-error-port . N4fa1) (i/o-error-filename . N4fa0) (&i/o-port . N4de3) (&i/o-file-does-not-exist . N4de2) (&i/o-file-already-exists . N4de1) (&i/o-file-is-read-only . N4de0) (&i/o-file-protection . N4ddf) (&i/o-filename . N4dde) (&i/o-invalid-position . N4ddd) (&i/o-write . N4ddc) (&i/o-read . N4ddb) (&i/o . N4dda)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N5138 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . N4faf) (utf32->string . N4f35) (utf16->string . N4f34) (utf8->string . N4f33) (uint-list->bytevector . N4f32) (u8-list->bytevector . N4f31) (string->utf8 . N4f30) (string->utf32 . N4f2f) (string->utf16 . N4f2e) (sint-list->bytevector . N4f2d) (native-endianness . N4f2c) (bytevector? . N4f2b) (bytevector=? . N4f2a) (bytevector-uint-set! . N4f29) (bytevector-uint-ref . N4f28) (bytevector-u8-set! . N4f27) (bytevector-u8-ref . N4f26) (bytevector-u64-set! . N4f25) (bytevector-u64-ref . N4f24) (bytevector-u64-native-set! . N4f23) (bytevector-u64-native-ref . N4f22) (bytevector-u32-set! . N4f21) (bytevector-u32-ref . N4f20) (bytevector-u32-native-set! . N4f1f) (bytevector-u32-native-ref . N4f1e) (bytevector-u16-set! . N4f1d) (bytevector-u16-ref . N4f1c) (bytevector-u16-native-set! . N4f1b) (bytevector-u16-native-ref . N4f1a) (bytevector-sint-set! . N4f19) (bytevector-sint-ref . N4f18) (bytevector-s8-set! . N4f17) (bytevector-s8-ref . N4f16) (bytevector-s64-set! . N4f15) (bytevector-s64-ref . N4f14) (bytevector-s64-native-set! . N4f13) (bytevector-s64-native-ref . N4f12) (bytevector-s32-set! . N4f11) (bytevector-s32-ref . N4f10) (bytevector-s32-native-set! . N4f0f) (bytevector-s32-native-ref . N4f0e) (bytevector-s16-set! . N4f0d) (bytevector-s16-ref . N4f0c) (bytevector-s16-native-set! . N4f0b) (bytevector-s16-native-ref . N4f0a) (bytevector-length . N4f09) (bytevector-ieee-single-ref . N4f08) (bytevector-ieee-single-set! . N4f07) (bytevector-ieee-single-native-set! . N4f06) (bytevector-ieee-single-native-ref . N4f05) (bytevector-ieee-double-set! . N4f04) (bytevector-ieee-double-ref . N4f03) (bytevector-ieee-double-native-set! . N4f02) (bytevector-ieee-double-native-ref . N4f01) (bytevector-fill! . N4f00) (bytevector-copy! . N4eff) (bytevector-copy . N4efe) (bytevector->uint-list . N4efd) (bytevector->u8-list . N4efc) (bytevector->sint-list . N4efb) (endianness . N4daf)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N5139 '(rnrs unicode) '(6) '() '() '() '((string-upcase . N5042) (string-titlecase . N5041) (string-normalize-nfkd . N5040) (string-normalize-nfkc . N503f) (string-normalize-nfd . N503e) (string-normalize-nfc . N503d) (string-foldcase . N503c) (string-downcase . N503b) (string-ci>? . N503a) (string-ci>=? . N5039) (string-ci=? . N5038) (string-ci<? . N5037) (string-ci<=? . N5036) (char-whitespace? . N5035) (char-upper-case? . N5034) (char-title-case? . N5033) (char-numeric? . N5032) (char-lower-case? . N5031) (char-general-category . N5030) (char-upcase . N502f) (char-titlecase . N502e) (char-foldcase . N502d) (char-downcase . N502c) (char-ci>? . N502b) (char-ci>=? . N502a) (char-ci=? . N5029) (char-ci<? . N5028) (char-ci<=? . N5027) (char-alphabetic? . N5026)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N513a '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . N4f69) (raise-continuable . N4f68) (raise . N4f67) (guard . N4dbb) (else . N4db3) (=> . N4db2)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N513b '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . N4e9b) (bitwise-reverse-bit-field . N4e9a) (bitwise-length . N4e99) (bitwise-if . N4e98) (bitwise-first-bit-set . N4e97) (bitwise-copy-bit-field . N4e96) (bitwise-copy-bit . N4e95) (bitwise-bit-set? . N4e94) (bitwise-bit-field . N4e93) (bitwise-bit-count . N4e92) (bitwise-xor . N4e91) (bitwise-ior . N4e90) (bitwise-and . N4e8f) (bitwise-not . N4e8e) (bitwise-arithmetic-shift-right . N4e8d) (bitwise-arithmetic-shift-left . N4e8c) (bitwise-arithmetic-shift . N4e8b)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N513c '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . N4ec8) (fxxor . N4ec7) (fxrotate-bit-field . N4ec6) (fxreverse-bit-field . N4ec5) (fxpositive? . N4ec4) (fxodd? . N4ec3) (fxnot . N4ec2) (fxnegative? . N4ec1) (fxmod0 . N4ec0) (fxmod . N4ebf) (fxmin . N4ebe) (fxmax . N4ebd) (fxlength . N4ebc) (fxior . N4ebb) (fxif . N4eba) (fxfirst-bit-set . N4eb9) (fxeven? . N4eb8) (fxdiv0-and-mod0 . N4eb7) (fxdiv0 . N4eb6) (fxdiv-and-mod . N4eb5) (fxdiv . N4eb4) (fxcopy-bit-field . N4eb3) (fxcopy-bit . N4eb2) (fxbit-set? . N4eb1) (fxbit-field . N4eb0) (fxbit-count . N4eaf) (fxarithmetic-shift-right . N4eae) (fxarithmetic-shift-left . N4ead) (fxarithmetic-shift . N4eac) (fxand . N4eab) (fx>? . N4eaa) (fx>=? . N4ea9) (fx=? . N4ea8) (fx<? . N4ea7) (fx<=? . N4ea6) (fx-/carry . N4ea5) (fx- . N4ea4) (fx+/carry . N4ea3) (fx+ . N4ea2) (fx*/carry . N4ea1) (fx* . N4ea0) (greatest-fixnum . N4e9f) (least-fixnum . N4e9e) (fixnum-width . N4e9d) (fixnum? . N4e9c)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N513d '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . N4efa) (no-infinities-violation? . N4ef9) (make-no-nans-violation . N4ef8) (make-no-infinities-violation . N4ef7) (real->flonum . N4ef6) (flzero? . N4ef5) (fltruncate . N4ef4) (fltan . N4ef3) (flsqrt . N4ef2) (flsin . N4ef1) (flround . N4ef0) (flpositive? . N4eef) (flonum? . N4eee) (flodd? . N4eed) (flnumerator . N4eec) (flnegative? . N4eeb) (flnan? . N4eea) (flmod0 . N4ee9) (flmod . N4ee8) (flmin . N4ee7) (flmax . N4ee6) (fllog . N4ee5) (flinteger? . N4ee4) (flinfinite? . N4ee3) (flfloor . N4ee2) (flfinite? . N4ee1) (flexpt . N4ee0) (flexp . N4edf) (fleven? . N4ede) (fldiv0-and-mod0 . N4edd) (fldiv0 . N4edc) (fldiv-and-mod . N4edb) (fldiv . N4eda) (fldenominator . N4ed9) (flcos . N4ed8) (flceiling . N4ed7) (flatan . N4ed6) (flasin . N4ed5) (flacos . N4ed4) (flabs . N4ed3) (fl>? . N4ed2) (fl>=? . N4ed1) (fl=? . N4ed0) (fl<? . N4ecf) (fl<=? . N4ece) (fl/ . N4ecd) (fl- . N4ecc) (fl+ . N4ecb) (fl* . N4eca) (fixnum->flonum . N4ec9) (&no-nans . N4de7) (&no-infinities . N4de6)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N513e '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . N500f) (string-ci-hash . N500e) (string-hash . N500d) (equal-hash . N500c) (hashtable-equivalence-function . N500b) (make-hashtable . N500a) (hashtable-hash-function . N5009) (make-eqv-hashtable . N5008) (make-eq-hashtable . N5007) (hashtable? . N5006) (hashtable-update! . N5005) (hashtable-size . N5004) (hashtable-set! . N5003) (hashtable-ref . N5002) (hashtable-mutable? . N5001) (hashtable-keys . N5000) (hashtable-entries . N4fff) (hashtable-delete! . N4ffe) (hashtable-copy . N4ffd) (hashtable-contains? . N4ffc) (hashtable-clear! . N4ffb)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N513f '(rnrs io ports) '(6) '() '() '() '((eof-object? . N4feb) (eof-object . N4fea) (current-error-port . N4fe9) (current-output-port . N4fe8) (current-input-port . N4fe7) (output-port? . N4fe6) (input-port? . N4fe5) (utf-8-codec . N4fe4) (utf-16-codec . N4fe3) (transcoder-error-handling-mode . N4fe2) (transcoder-eol-style . N4fe1) (transcoder-codec . N4fe0) (transcoded-port . N4fdf) (textual-port? . N4fde) (string->bytevector . N4fdd) (standard-output-port . N4fdc) (standard-input-port . N4fdb) (standard-error-port . N4fda) (set-port-position! . N4fd9) (put-u8 . N4fd8) (put-string . N4fd7) (put-datum . N4fd6) (put-char . N4fd5) (put-bytevector . N4fd4) (port? . N4fd3) (port-transcoder . N4fd2) (port-position . N4fd1) (port-has-set-port-position!? . N4fd0) (port-has-port-position? . N4fcf) (port-eof? . N4fce) (output-port-buffer-mode . N4fcd) (open-string-output-port . N4fcc) (open-string-input-port . N4fcb) (open-file-output-port . N4fca) (open-file-input/output-port . N4fc9) (open-file-input-port . N4fc8) (open-bytevector-output-port . N4fc7) (open-bytevector-input-port . N4fc6) (native-transcoder . N4fc5) (native-eol-style . N4fc4) (make-transcoder . N4fc3) (latin-1-codec . N4fc2) (make-i/o-write-error . N4fc1) (make-i/o-read-error . N4fc0) (make-i/o-port-error . N4fbf) (make-i/o-invalid-position-error . N4fbe) (make-i/o-filename-error . N4fbd) (make-i/o-file-protection-error . N4fbc) (make-i/o-file-is-read-only-error . N4fbb) (make-i/o-file-does-not-exist-error . N4fba) (make-i/o-file-already-exists-error . N4fb9) (make-i/o-error . N4fb8) (make-i/o-encoding-error . N4fb7) (make-i/o-decoding-error . N4fb6) (make-custom-textual-output-port . N4fb5) (make-custom-textual-input/output-port . N4fb4) (make-custom-textual-input-port . N4fb3) (make-custom-binary-output-port . N4fb2) (make-custom-binary-input/output-port . N4fb1) (make-custom-binary-input-port . N4fb0) (lookahead-u8 . N4fae) (lookahead-char . N4fad) (i/o-write-error? . N4fac) (i/o-read-error? . N4fab) (i/o-port-error? . N4faa) (i/o-invalid-position-error? . N4fa9) (i/o-filename-error? . N4fa8) (i/o-file-protection-error? . N4fa7) (i/o-file-is-read-only-error? . N4fa6) (i/o-file-does-not-exist-error? . N4fa5) (i/o-file-already-exists-error? . N4fa4) (i/o-error? . N4fa3) (i/o-error-position . N4fa2) (i/o-error-port . N4fa1) (i/o-error-filename . N4fa0) (i/o-encoding-error? . N4f9f) (i/o-encoding-error-char . N4f9e) (i/o-decoding-error? . N4f9d) (get-u8 . N4f9c) (get-string-n! . N4f9b) (get-string-n . N4f9a) (get-string-all . N4f99) (get-line . N4f98) (get-datum . N4f97) (get-char . N4f96) (get-bytevector-some . N4f95) (get-bytevector-n! . N4f94) (get-bytevector-n . N4f93) (get-bytevector-all . N4f92) (flush-output-port . N4f91) (close-port . N4f90) (call-with-string-output-port . N4f6f) (call-with-port . N4f6e) (call-with-bytevector-output-port . N4f6d) (bytevector->string . N4f6c) (buffer-mode? . N4f6b) (binary-port? . N4f6a) (&i/o-encoding . N4de5) (&i/o-decoding . N4de4) (&i/o-port . N4de3) (&i/o-file-does-not-exist . N4de2) (&i/o-file-already-exists . N4de1) (&i/o-file-is-read-only . N4de0) (&i/o-file-protection . N4ddf) (&i/o-filename . N4dde) (&i/o-invalid-position . N4ddd) (&i/o-write . N4ddc) (&i/o-read . N4ddb) (&i/o . N4dda) (error-handling-mode . N4dbf) (file-options . N4dbe) (buffer-mode . N4dbd) (eol-style . N4dbc)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N5140 '(rnrs enums) '(6) '() '() '() '((make-enumeration . N4f66) (enum-set=? . N4f65) (enum-set-universe . N4f64) (enum-set-union . N4f63) (enum-set-subset? . N4f62) (enum-set-projection . N4f61) (enum-set-member? . N4f60) (enum-set-intersection . N4f5f) (enum-set-indexer . N4f5e) (enum-set-difference . N4f5d) (enum-set-constructor . N4f5c) (enum-set-complement . N4f5b) (enum-set->list . N4f5a) (define-enumeration . N4dca)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N5141 '(rnrs conditions) '(6) '() '() '() '((who-condition? . N4f59) (warning? . N4f58) (violation? . N4f57) (undefined-violation? . N4f56) (syntax-violation? . N4f55) (syntax-violation-subform . N4f54) (syntax-violation-form . N4f53) (syntax-violation . N319b) (simple-conditions . N4f52) (serious-condition? . N4f51) (non-continuable-violation? . N4f50) (message-condition? . N4f4f) (make-who-condition . N4f4e) (make-warning . N4f4d) (make-violation . N4f4c) (make-undefined-violation . N4f4b) (make-syntax-violation . N4f4a) (make-serious-condition . N4f49) (make-non-continuable-violation . N4f48) (make-message-condition . N4f47) (make-lexical-violation . N4f46) (make-irritants-condition . N4f45) (make-implementation-restriction-violation . N4f44) (make-error . N4f43) (make-assertion-violation . N4f42) (lexical-violation? . N4f41) (irritants-condition? . N4f40) (implementation-restriction-violation? . N4f3f) (error? . N4f3e) (condition-who . N4f3d) (condition-predicate . N4f3c) (condition-message . N4f3b) (condition-irritants . N4f3a) (condition-accessor . N4f39) (condition . N4f38) (assertion-violation? . N4f37) (condition? . N4f36) (&undefined . N4dd9) (&syntax . N4dd8) (&lexical . N4dd7) (&implementation-restriction . N4dd6) (&non-continuable . N4dd5) (&who . N4dd4) (&irritants . N4dd3) (&assertion . N4dd2) (&violation . N4dd1) (&error . N4dd0) (&serious . N4dcf) (&warning . N4dce) (&message . N4dcd) (&condition . N4dcc) (define-condition-type . N4dcb)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N5142 '(rnrs records inspection) '(6) '() '() '() '((record? . N501e) (record-type-uid . N501d) (record-type-sealed? . N501c) (record-type-parent . N501b) (record-type-opaque? . N501a) (record-type-name . N5019) (record-type-generative? . N5018) (record-type-field-names . N5017) (record-rtd . N5016) (record-field-mutable? . N5015)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N5143 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . N5025) (record-predicate . N5024) (record-mutator . N5023) (record-constructor . N5022) (record-accessor . N5021) (make-record-type-descriptor . N5020) (make-record-constructor-descriptor . N501f)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N5144 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . N4dc9) (parent-rtd . N4dc8) (nongenerative . N4dc7) (opaque . N4dc6) (sealed . N4dc5) (protocol . N4dc4) (parent . N4dc3) (immutable . N4dc2) (mutable . N4dc1) (fields . N4dc0) (record-constructor-descriptor . N4da0) (record-type-descriptor . N4d9f)) '() values values '#f '#f '#t '#f) (N2ccf@N2b1b@install-library 'N5145 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . N5125) (&no-nans-rtd . N5124) (&no-infinities-rcd . N5123) (&no-infinities-rtd . N5122) (&i/o-encoding-rcd . N5121) (&i/o-encoding-rtd . N5120) (&i/o-decoding-rcd . N511f) (&i/o-decoding-rtd . N511e) (&i/o-port-rcd . N511d) (&i/o-port-rtd . N511c) (&i/o-file-does-not-exist-rcd . N511b) (&i/o-file-does-not-exist-rtd . N511a) (&i/o-file-already-exists-rcd . N5119) (&i/o-file-already-exists-rtd . N5118) (&i/o-file-is-read-only-rcd . N5117) (&i/o-file-is-read-only-rtd . N5116) (&i/o-file-protection-rcd . N5115) (&i/o-file-protection-rtd . N5114) (&i/o-filename-rcd . N5113) (&i/o-filename-rtd . N5112) (&i/o-invalid-position-rcd . N5111) (&i/o-invalid-position-rtd . N5110) (&i/o-write-rcd . N510f) (&i/o-write-rtd . N510e) (&i/o-read-rcd . N510d) (&i/o-read-rtd . N510c) (&i/o-rcd . N510b) (&i/o-rtd . N510a) (&undefined-rcd . N5109) (&undefined-rtd . N5108) (&syntax-rcd . N5107) (&syntax-rtd . N5106) (&lexical-rcd . N5105) (&lexical-rtd . N5104) (&implementation-restriction-rcd . N5103) (&implementation-restriction-rtd . N5102) (&non-continuable-rcd . N5101) (&non-continuable-rtd . N5100) (&who-rcd . N50ff) (&who-rtd . N50fe) (&irritants-rcd . N50fd) (&irritants-rtd . N50fc) (&assertion-rcd . N50fb) (&assertion-rtd . N50fa) (&violation-rcd . N50f9) (&violation-rtd . N50f8) (&error-rcd . N50f7) (&error-rtd . N50f6) (&serious-rcd . N50f5) (&serious-rtd . N50f4) (&warning-rcd . N50f3) (&warning-rtd . N50f2) (&message-rcd . N50f1) (&message-rtd . N50f0) (&condition-rcd . N50ef) (&condition-rtd . N50ee) (syntax-error . N3197) (syntax-dispatch . N30bb) (pretty-print . N50ed) (eval-core . N50ec) (set-symbol-value! . N50eb) (symbol-value . N50ea) (gensym . N50e9) (void . N50e8) (load . N4c24) (interaction-environment . N31a9) (char-ready? . N50e7) (regexp? . N50e6) (read-line . N50e5) (gensym-prefix-set! . N50e4) (ungensym . N50e3) (alist->eq-hash-table . N50e2) (assoc-ref . N50e1) (print . N50e0) (format . N50df) (host-os . N50de) (library-path . N2afa) (standard-library-path . N50dd) (file-newer? . N50dc) (stat-mtime . N50db) (write-to-file . N50da) (file->list . N50d9) (file->string . N50d8) (digit->integer . N50d7) (call-with-string-input-port . N50d6) (call-with-string-io . N50d5) (string-split . N50d4) (bytevector-for-each . N50d3) (string->regexp . N50d2) (rxmatch . N50d1) (regexp-replace-all . N50d0) (hashtable-for-each . N50cf) (mosh-cache-dir . N28e4) (call-process . N50ce) (local-tz-offset . N50cd) (microseconds . N50cc) (directory-list . N50cb) (set-current-directory! . N50ca) (expand-path . N50c9) (current-directory . N50c8) (%spawn . N50c7) (%waitpid . N50c6) (simple-struct-name . N50c5) (simple-struct-set! . N50c4) (simple-struct-ref . N50c3) (make-simple-struct . N50c2) (simple-struct? . N50c1) (pointer-ref-c-int64 . N50c0) (pointer-ref-c-int32 . N50bf) (pointer-ref-c-int16 . N50be) (pointer-ref-c-int8 . N50bd) (pointer-ref-c-uint64 . N50bc) (pointer-ref-c-uint32 . N50bb) (pointer-ref-c-uint16 . N50ba) (pointer-ref-c-uint8 . N50b9) (pointer-set-c-uint64! . N50b8) (pointer-set-c-uint32! . N50b7) (pointer-set-c-uint16! . N50b6) (pointer-set-c-uint8! . N50b5) (pointer-set-c-int64! . N50b4) (pointer-set-c-int32! . N50b3) (pointer-set-c-int16! . N50b2) (pointer-set-c-int8! . N50b1) (pointer-set-c-pointer! . N50b0) (pointer-set-c-double! . N50af) (pointer-set-c-float! . N50ae) (pointer-set-c-long-long! . N50ad) (pointer-set-c-long! . N50ac) (pointer-set-c-int! . N50ab) (pointer-set-c-short! . N50aa) (pointer-set-c-char! . N50a9) (pointer-ref-c-pointer . N50a8) (pointer-ref-c-double . N50a7) (pointer-ref-c-float . N50a6) (pointer-ref-c-unsigned-long-long . N50a5) (pointer-ref-c-signed-long-long . N50a4) (pointer-ref-c-unsigned-long . N50a3) (pointer-ref-c-signed-long . N50a2) (pointer-ref-c-unsigned-int . N50a1) (pointer-ref-c-signed-int . N50a0) (pointer-ref-c-unsigned-short . N509f) (pointer-ref-c-signed-short . N509e) (pointer-ref-c-unsigned-char . N509d) (pointer-ref-c-signed-char . N509c) (pointer->integer . N509b) (integer->pointer . N509a) (pointer? . N5099) (shared-errno . N5098) (%ffi-free-c-callback-trampoline . N5097) (%ffi-make-c-callback-trampoline . N5096) (%ffi-free . N5095) (%ffi-malloc . N5094) (%ffi-supported? . N5093) (%ffi-pointer->string . N5092) (%ffi-call . N5091) (%ffi-lookup . N5090) (%ffi-open . N508f) (null-terminated-utf8->string . N508e) (null-terminated-bytevector->string . N508d) (%exec . N508c) (%fork . N508b) (%pipe . N508a) (p . N5089) (open-output-string . N5088) (get-output-string . N5087) (file-stat-ctime . N5086) (file-stat-atime . N5085) (file-stat-mtime . N5084) (file-size-in-bytes . N5083) (file-writable? . N5082) (file-executable? . N5081) (file-readable? . N5080) (file-regular? . N507f) (file-symbolic-link? . N507e) (file-directory? . N507d) (create-symbolic-link . N507c) (rename-file . N507b) (delete-directory . N507a) (create-directory . N5079) (create-mosh-cache-dir . N5078) (get-environment-variables . N5077) (current-exception-handler . N5076) (get-environment-variable . N5075) (join-wraps . N5074) (id->real-label . N5073) (same-marks? . N5072) (same-marks*? . N5071) (get-timeofday . N5070) (get-command-line . N506f) (sys-display . N506e) (whereis . N506d) (register . N506c) (vm-join! . N506b) (vm-set-value! . N506a) (vm? . N5069) (main-vm? . N5068) (vm-eval . N5067) (vm-self . N5066) (vm-start! . N5065) (make-vm . N5064) (mutex-try-lock! . N5063) (mutex-unlock! . N5062) (mutex-lock! . N5061) (mutex? . N5060) (make-mutex . N505f) (condition-variable-notify-all! . N505e) (condition-variable-notify! . N505d) (condition-variable-wait! . N505c) (make-condition-variable . N505b) (write/ss . N505a) (mosh-executable-path . N5059) (make-file-options . N5058) (source-info . N5057) (make-compiler-instruction . N5056) (make-instruction . N5055) (set-source-info! . N5054) (bignum? . N5053) (fast-equal? . N5052) (fasl-read . N5051) (fasl-write . N5050) (time-usage . N504f) (os-constant . N504e) (disasm . N504d) (make-parameter . N28e2) (socket-port . N504c) (socket-shutdown . N504b) (socket-close . N504a) (socket-send . N5049) (socket-recv! . N5048) (socket-recv . N5047) (make-server-socket . N5046) (make-client-socket . N5045) (socket-accept . N5044) (socket? . N5043) (string-upcase . N5042) (string-titlecase . N5041) (string-normalize-nfkd . N5040) (string-normalize-nfkc . N503f) (string-normalize-nfd . N503e) (string-normalize-nfc . N503d) (string-foldcase . N503c) (string-downcase . N503b) (string-ci>? . N503a) (string-ci>=? . N5039) (string-ci=? . N5038) (string-ci<? . N5037) (string-ci<=? . N5036) (char-whitespace? . N5035) (char-upper-case? . N5034) (char-title-case? . N5033) (char-numeric? . N5032) (char-lower-case? . N5031) (char-general-category . N5030) (char-upcase . N502f) (char-titlecase . N502e) (char-foldcase . N502d) (char-downcase . N502c) (char-ci>? . N502b) (char-ci>=? . N502a) (char-ci=? . N5029) (char-ci<? . N5028) (char-ci<=? . N5027) (char-alphabetic? . N5026) (make-variable-transformer . N2ee6) (identifier? . N319d) (generate-temporaries . N3189) (free-identifier=? . N318b) (syntax->datum . N31a1) (datum->syntax . N319f) (bound-identifier=? . N318d) (record-type-descriptor? . N5025) (record-predicate . N5024) (record-mutator . N5023) (record-constructor . N5022) (record-accessor . N5021) (make-record-type-descriptor . N5020) (make-record-constructor-descriptor . N501f) (record? . N501e) (record-type-uid . N501d) (record-type-sealed? . N501c) (record-type-parent . N501b) (record-type-opaque? . N501a) (record-type-name . N5019) (record-type-generative? . N5018) (record-type-field-names . N5017) (record-rtd . N5016) (record-field-mutable? . N5015) (delete-file . N5014) (file-exists? . N5013) (vector-sort! . N5012) (vector-sort . N5011) (list-sort . N5010) (symbol-hash . N500f) (string-ci-hash . N500e) (string-hash . N500d) (equal-hash . N500c) (hashtable-equivalence-function . N500b) (make-hashtable . N500a) (hashtable-hash-function . N5009) (make-eqv-hashtable . N5008) (make-eq-hashtable . N5007) (hashtable? . N5006) (hashtable-update! . N5005) (hashtable-size . N5004) (hashtable-set! . N5003) (hashtable-ref . N5002) (hashtable-mutable? . N5001) (hashtable-keys . N5000) (hashtable-entries . N4fff) (hashtable-delete! . N4ffe) (hashtable-copy . N4ffd) (hashtable-contains? . N4ffc) (hashtable-clear! . N4ffb) (call-with-output-file . N4ffa) (call-with-input-file . N4ff9) (write-char . N4ff8) (write . N4ff7) (with-output-to-file . N4ff6) (with-input-from-file . N4ff5) (read-char . N4ff4) (read . N4ff3) (peek-char . N4ff2) (open-output-file . N4ff1) (open-input-file . N4ff0) (newline . N4fef) (display . N4fee) (close-output-port . N4fed) (close-input-port . N4fec) (eof-object? . N4feb) (eof-object . N4fea) (current-error-port . N4fe9) (current-output-port . N4fe8) (current-input-port . N4fe7) (output-port? . N4fe6) (input-port? . N4fe5) (utf-8-codec . N4fe4) (utf-16-codec . N4fe3) (transcoder-error-handling-mode . N4fe2) (transcoder-eol-style . N4fe1) (transcoder-codec . N4fe0) (transcoded-port . N4fdf) (textual-port? . N4fde) (string->bytevector . N4fdd) (standard-output-port . N4fdc) (standard-input-port . N4fdb) (standard-error-port . N4fda) (set-port-position! . N4fd9) (put-u8 . N4fd8) (put-string . N4fd7) (put-datum . N4fd6) (put-char . N4fd5) (put-bytevector . N4fd4) (port? . N4fd3) (port-transcoder . N4fd2) (port-position . N4fd1) (port-has-set-port-position!? . N4fd0) (port-has-port-position? . N4fcf) (port-eof? . N4fce) (output-port-buffer-mode . N4fcd) (open-string-output-port . N4fcc) (open-string-input-port . N4fcb) (open-file-output-port . N4fca) (open-file-input/output-port . N4fc9) (open-file-input-port . N4fc8) (open-bytevector-output-port . N4fc7) (open-bytevector-input-port . N4fc6) (native-transcoder . N4fc5) (native-eol-style . N4fc4) (make-transcoder . N4fc3) (latin-1-codec . N4fc2) (make-i/o-write-error . N4fc1) (make-i/o-read-error . N4fc0) (make-i/o-port-error . N4fbf) (make-i/o-invalid-position-error . N4fbe) (make-i/o-filename-error . N4fbd) (make-i/o-file-protection-error . N4fbc) (make-i/o-file-is-read-only-error . N4fbb) (make-i/o-file-does-not-exist-error . N4fba) (make-i/o-file-already-exists-error . N4fb9) (make-i/o-error . N4fb8) (make-i/o-encoding-error . N4fb7) (make-i/o-decoding-error . N4fb6) (make-custom-textual-output-port . N4fb5) (make-custom-textual-input/output-port . N4fb4) (make-custom-textual-input-port . N4fb3) (make-custom-binary-output-port . N4fb2) (make-custom-binary-input/output-port . N4fb1) (make-custom-binary-input-port . N4fb0) (make-bytevector . N4faf) (lookahead-u8 . N4fae) (lookahead-char . N4fad) (i/o-write-error? . N4fac) (i/o-read-error? . N4fab) (i/o-port-error? . N4faa) (i/o-invalid-position-error? . N4fa9) (i/o-filename-error? . N4fa8) (i/o-file-protection-error? . N4fa7) (i/o-file-is-read-only-error? . N4fa6) (i/o-file-does-not-exist-error? . N4fa5) (i/o-file-already-exists-error? . N4fa4) (i/o-error? . N4fa3) (i/o-error-position . N4fa2) (i/o-error-port . N4fa1) (i/o-error-filename . N4fa0) (i/o-encoding-error? . N4f9f) (i/o-encoding-error-char . N4f9e) (i/o-decoding-error? . N4f9d) (get-u8 . N4f9c) (get-string-n! . N4f9b) (get-string-n . N4f9a) (get-string-all . N4f99) (get-line . N4f98) (get-datum . N4f97) (get-char . N4f96) (get-bytevector-some . N4f95) (get-bytevector-n! . N4f94) (get-bytevector-n . N4f93) (get-bytevector-all . N4f92) (flush-output-port . N4f91) (close-port . N4f90) (scheme-report-environment . N3177) (quotient . N4f8f) (null-environment . N3175) (remainder . N4f8e) (modulo . N4f8d) (inexact->exact . N4f8c) (force . N4f8b) (exact->inexact . N4f8a) (make-promise . N4f89) (exit . N4f88) (command-line . N4c1e) (string-fill! . N4f87) (string-set! . N4f86) (set-cdr! . N4f85) (set-car! . N4f84) (remove . N4f83) (remv . N4f82) (remp . N4f81) (remq . N4f80) (partition . N4f7f) (memv . N4f7e) (memq . N4f7d) (memp . N4f7c) (member . N4f7b) (exists . N4f7a) (for-all . N4f79) (fold-right . N4f78) (fold-left . N4f77) (find . N4f76) (filter . N4f75) (cons* . N4f74) (assv . N4f73) (assq . N4f72) (assp . N4f71) (assoc . N4f70) (call-with-string-output-port . N4f6f) (call-with-port . N4f6e) (call-with-bytevector-output-port . N4f6d) (bytevector->string . N4f6c) (buffer-mode? . N4f6b) (binary-port? . N4f6a) (with-exception-handler . N4f69) (raise-continuable . N4f68) (raise . N4f67) (eval . N317b) (environment . N3173) (make-enumeration . N4f66) (enum-set=? . N4f65) (enum-set-universe . N4f64) (enum-set-union . N4f63) (enum-set-subset? . N4f62) (enum-set-projection . N4f61) (enum-set-member? . N4f60) (enum-set-intersection . N4f5f) (enum-set-indexer . N4f5e) (enum-set-difference . N4f5d) (enum-set-constructor . N4f5c) (enum-set-complement . N4f5b) (enum-set->list . N4f5a) (who-condition? . N4f59) (warning? . N4f58) (violation? . N4f57) (undefined-violation? . N4f56) (syntax-violation? . N4f55) (syntax-violation-subform . N4f54) (syntax-violation-form . N4f53) (syntax-violation . N319b) (simple-conditions . N4f52) (serious-condition? . N4f51) (non-continuable-violation? . N4f50) (message-condition? . N4f4f) (make-who-condition . N4f4e) (make-warning . N4f4d) (make-violation . N4f4c) (make-undefined-violation . N4f4b) (make-syntax-violation . N4f4a) (make-serious-condition . N4f49) (make-non-continuable-violation . N4f48) (make-message-condition . N4f47) (make-lexical-violation . N4f46) (make-irritants-condition . N4f45) (make-implementation-restriction-violation . N4f44) (make-error . N4f43) (make-assertion-violation . N4f42) (lexical-violation? . N4f41) (irritants-condition? . N4f40) (implementation-restriction-violation? . N4f3f) (error? . N4f3e) (condition-who . N4f3d) (condition-predicate . N4f3c) (condition-message . N4f3b) (condition-irritants . N4f3a) (condition-accessor . N4f39) (condition . N4f38) (assertion-violation? . N4f37) (condition? . N4f36) (utf32->string . N4f35) (utf16->string . N4f34) (utf8->string . N4f33) (uint-list->bytevector . N4f32) (u8-list->bytevector . N4f31) (string->utf8 . N4f30) (string->utf32 . N4f2f) (string->utf16 . N4f2e) (sint-list->bytevector . N4f2d) (native-endianness . N4f2c) (bytevector? . N4f2b) (bytevector=? . N4f2a) (bytevector-uint-set! . N4f29) (bytevector-uint-ref . N4f28) (bytevector-u8-set! . N4f27) (bytevector-u8-ref . N4f26) (bytevector-u64-set! . N4f25) (bytevector-u64-ref . N4f24) (bytevector-u64-native-set! . N4f23) (bytevector-u64-native-ref . N4f22) (bytevector-u32-set! . N4f21) (bytevector-u32-ref . N4f20) (bytevector-u32-native-set! . N4f1f) (bytevector-u32-native-ref . N4f1e) (bytevector-u16-set! . N4f1d) (bytevector-u16-ref . N4f1c) (bytevector-u16-native-set! . N4f1b) (bytevector-u16-native-ref . N4f1a) (bytevector-sint-set! . N4f19) (bytevector-sint-ref . N4f18) (bytevector-s8-set! . N4f17) (bytevector-s8-ref . N4f16) (bytevector-s64-set! . N4f15) (bytevector-s64-ref . N4f14) (bytevector-s64-native-set! . N4f13) (bytevector-s64-native-ref . N4f12) (bytevector-s32-set! . N4f11) (bytevector-s32-ref . N4f10) (bytevector-s32-native-set! . N4f0f) (bytevector-s32-native-ref . N4f0e) (bytevector-s16-set! . N4f0d) (bytevector-s16-ref . N4f0c) (bytevector-s16-native-set! . N4f0b) (bytevector-s16-native-ref . N4f0a) (bytevector-length . N4f09) (bytevector-ieee-single-ref . N4f08) (bytevector-ieee-single-set! . N4f07) (bytevector-ieee-single-native-set! . N4f06) (bytevector-ieee-single-native-ref . N4f05) (bytevector-ieee-double-set! . N4f04) (bytevector-ieee-double-ref . N4f03) (bytevector-ieee-double-native-set! . N4f02) (bytevector-ieee-double-native-ref . N4f01) (bytevector-fill! . N4f00) (bytevector-copy! . N4eff) (bytevector-copy . N4efe) (bytevector->uint-list . N4efd) (bytevector->u8-list . N4efc) (bytevector->sint-list . N4efb) (no-nans-violation? . N4efa) (no-infinities-violation? . N4ef9) (make-no-nans-violation . N4ef8) (make-no-infinities-violation . N4ef7) (real->flonum . N4ef6) (flzero? . N4ef5) (fltruncate . N4ef4) (fltan . N4ef3) (flsqrt . N4ef2) (flsin . N4ef1) (flround . N4ef0) (flpositive? . N4eef) (flonum? . N4eee) (flodd? . N4eed) (flnumerator . N4eec) (flnegative? . N4eeb) (flnan? . N4eea) (flmod0 . N4ee9) (flmod . N4ee8) (flmin . N4ee7) (flmax . N4ee6) (fllog . N4ee5) (flinteger? . N4ee4) (flinfinite? . N4ee3) (flfloor . N4ee2) (flfinite? . N4ee1) (flexpt . N4ee0) (flexp . N4edf) (fleven? . N4ede) (fldiv0-and-mod0 . N4edd) (fldiv0 . N4edc) (fldiv-and-mod . N4edb) (fldiv . N4eda) (fldenominator . N4ed9) (flcos . N4ed8) (flceiling . N4ed7) (flatan . N4ed6) (flasin . N4ed5) (flacos . N4ed4) (flabs . N4ed3) (fl>? . N4ed2) (fl>=? . N4ed1) (fl=? . N4ed0) (fl<? . N4ecf) (fl<=? . N4ece) (fl/ . N4ecd) (fl- . N4ecc) (fl+ . N4ecb) (fl* . N4eca) (fixnum->flonum . N4ec9) (fxzero? . N4ec8) (fxxor . N4ec7) (fxrotate-bit-field . N4ec6) (fxreverse-bit-field . N4ec5) (fxpositive? . N4ec4) (fxodd? . N4ec3) (fxnot . N4ec2) (fxnegative? . N4ec1) (fxmod0 . N4ec0) (fxmod . N4ebf) (fxmin . N4ebe) (fxmax . N4ebd) (fxlength . N4ebc) (fxior . N4ebb) (fxif . N4eba) (fxfirst-bit-set . N4eb9) (fxeven? . N4eb8) (fxdiv0-and-mod0 . N4eb7) (fxdiv0 . N4eb6) (fxdiv-and-mod . N4eb5) (fxdiv . N4eb4) (fxcopy-bit-field . N4eb3) (fxcopy-bit . N4eb2) (fxbit-set? . N4eb1) (fxbit-field . N4eb0) (fxbit-count . N4eaf) (fxarithmetic-shift-right . N4eae) (fxarithmetic-shift-left . N4ead) (fxarithmetic-shift . N4eac) (fxand . N4eab) (fx>? . N4eaa) (fx>=? . N4ea9) (fx=? . N4ea8) (fx<? . N4ea7) (fx<=? . N4ea6) (fx-/carry . N4ea5) (fx- . N4ea4) (fx+/carry . N4ea3) (fx+ . N4ea2) (fx*/carry . N4ea1) (fx* . N4ea0) (greatest-fixnum . N4e9f) (least-fixnum . N4e9e) (fixnum-width . N4e9d) (fixnum? . N4e9c) (bitwise-rotate-bit-field . N4e9b) (bitwise-reverse-bit-field . N4e9a) (bitwise-length . N4e99) (bitwise-if . N4e98) (bitwise-first-bit-set . N4e97) (bitwise-copy-bit-field . N4e96) (bitwise-copy-bit . N4e95) (bitwise-bit-set? . N4e94) (bitwise-bit-field . N4e93) (bitwise-bit-count . N4e92) (bitwise-xor . N4e91) (bitwise-ior . N4e90) (bitwise-and . N4e8f) (bitwise-not . N4e8e) (bitwise-arithmetic-shift-right . N4e8d) (bitwise-arithmetic-shift-left . N4e8c) (bitwise-arithmetic-shift . N4e8b) (zero? . N4e8a) (vector? . N4e89) (vector-set! . N4e88) (vector-ref . N4e87) (vector-map . N4e86) (vector-length . N4e85) (vector-for-each . N4e84) (vector-fill! . N4e83) (vector->list . N4e82) (vector . N4e81) (values . N4e80) (truncate . N4e7f) (tan . N4e7e) (symbol? . N4e7d) (symbol=? . N4e7c) (symbol->string . N4e7b) (substring . N4e7a) (string? . N4e79) (string>? . N4e78) (string>=? . N4e77) (string=? . N4e76) (string<? . N4e75) (string<=? . N4e74) (string-ref . N4e73) (string-length . N4e72) (string-for-each . N4e71) (string-copy . N4e70) (string-append . N4e6f) (string->symbol . N4e6e) (string->number . N4e6d) (string->list . N4e6c) (string . N4e6b) (sqrt . N4e6a) (sin . N4e69) (round . N4e68) (reverse . N4e67) (real? . N4e66) (real-valued? . N4e65) (real-part . N4e64) (rationalize . N4e63) (rational? . N4e62) (rational-valued? . N4e61) (procedure? . N4e60) (positive? . N4e5f) (pair? . N4e5e) (odd? . N4e5d) (numerator . N4e5c) (number? . N4e5b) (number->string . N4e5a) (null? . N4e59) (not . N4e58) (negative? . N4e57) (nan? . N4e56) (min . N4e55) (max . N4e54) (map . N4e53) (make-vector . N4e52) (make-string . N4e51) (make-rectangular . N4e50) (make-polar . N4e4f) (magnitude . N4e4e) (log . N4e4d) (list? . N4e4c) (list-tail . N4e4b) (list-ref . N4e4a) (list->vector . N4e49) (list->string . N4e48) (list . N4e47) (length . N4e46) (lcm . N4e45) (integer? . N4e44) (integer-valued? . N4e43) (integer->char . N4e42) (infinite? . N4e41) (inexact? . N4e40) (inexact . N4e3f) (imag-part . N4e3e) (gcd . N4e3d) (for-each . N4e3c) (floor . N4e3b) (finite? . N4e3a) (expt . N4e39) (exp . N4e38) (exact? . N4e37) (exact-integer-sqrt . N4e36) (exact . N4e35) (even? . N4e34) (error . N4e33) (eqv? . N4e32) (equal? . N4e31) (eq? . N4e30) (dynamic-wind . N4e2f) (div0-and-mod0 . N4e2e) (mod0 . N4e2d) (div0 . N4e2c) (div-and-mod . N4e2b) (mod . N4e2a) (div . N4e29) (denominator . N4e28) (cos . N4e27) (cons . N4e26) (complex? . N4e25) (char? . N4e24) (char>? . N4e23) (char>=? . N4e22) (char=? . N4e21) (char<? . N4e20) (char<=? . N4e1f) (char->integer . N4e1e) (ceiling . N4e1d) (call-with-values . N4e1c) (call/cc . N4e1b) (call-with-current-continuation . N4e1a) (cddddr . N4e19) (cdddar . N4e18) (cddadr . N4e17) (cddaar . N4e16) (cdaddr . N4e15) (cdadar . N4e14) (cdaadr . N4e13) (cdaaar . N4e12) (cadddr . N4e11) (caddar . N4e10) (cadadr . N4e0f) (cadaar . N4e0e) (caaddr . N4e0d) (caadar . N4e0c) (caaadr . N4e0b) (caaaar . N4e0a) (cdddr . N4e09) (cddar . N4e08) (cdadr . N4e07) (cdaar . N4e06) (caddr . N4e05) (cadar . N4e04) (caadr . N4e03) (caaar . N4e02) (cddr . N4e01) (cdar . N4e00) (cadr . N4dff) (caar . N4dfe) (cdr . N4dfd) (car . N4dfc) (boolean? . N4dfb) (boolean=? . N4dfa) (atan . N4df9) (assertion-violation . N4df8) (assertion-error . N3195) (asin . N4df7) (apply . N4df6) (append . N4df5) (angle . N4df4) (acos . N4df3) (abs . N4df2) (/ . N4df1) (* . N4df0) (- . N4def) (+ . N4dee) (>= . N4ded) (> . N4dec) (= . N4deb) (<= . N4dea) (< . N4de9) (library . N4de8) (&no-nans . N4de7) (&no-infinities . N4de6) (&i/o-encoding . N4de5) (&i/o-decoding . N4de4) (&i/o-port . N4de3) (&i/o-file-does-not-exist . N4de2) (&i/o-file-already-exists . N4de1) (&i/o-file-is-read-only . N4de0) (&i/o-file-protection . N4ddf) (&i/o-filename . N4dde) (&i/o-invalid-position . N4ddd) (&i/o-write . N4ddc) (&i/o-read . N4ddb) (&i/o . N4dda) (&undefined . N4dd9) (&syntax . N4dd8) (&lexical . N4dd7) (&implementation-restriction . N4dd6) (&non-continuable . N4dd5) (&who . N4dd4) (&irritants . N4dd3) (&assertion . N4dd2) (&violation . N4dd1) (&error . N4dd0) (&serious . N4dcf) (&warning . N4dce) (&message . N4dcd) (&condition . N4dcc) (define-condition-type . N4dcb) (define-enumeration . N4dca) (define-record-type . N4dc9) (parent-rtd . N4dc8) (nongenerative . N4dc7) (opaque . N4dc6) (sealed . N4dc5) (protocol . N4dc4) (parent . N4dc3) (immutable . N4dc2) (mutable . N4dc1) (fields . N4dc0) (error-handling-mode . N4dbf) (file-options . N4dbe) (buffer-mode . N4dbd) (eol-style . N4dbc) (guard . N4dbb) (trace-define . N4dba) (trace-lambda . N4db9) (unsyntax-splicing . N4db8) (unsyntax . N4db7) (unquote-splicing . N4db6) (unquote . N4db5) (_ . N4db4) (else . N4db3) (=> . N4db2) (... . N4db1) (assert . N4db0) (endianness . N4daf) (delay . N4dae) (time . N4dad) (do . N4dac) (cond . N4dab) (let* . N4daa) (let*-values . N4da9) (let-values . N4da8) (identifier-syntax . N4da7) (with-syntax . N4da6) (quasisyntax . N4da5) (quasiquote . N4da4) (syntax-rules . N4da3) (include . N4da2) (define-struct . N4da1) (record-constructor-descriptor . N4da0) (record-type-descriptor . N4d9f) (case . N4d9e) (parameterize . N4d9d) (unless . N4d9c) (when . N4d9b) (or . N4d9a) (and . N4d99) (if . N4d98) (let . N4d97) (letrec* . N4d96) (letrec . N4d95) (type-descriptor . N4d94) (case-lambda . N4d93) (lambda . N4d92) (syntax . N4d91) (syntax-case . N4d90) (quote . N4d8f) (foreign-call . N4d8e) (letrec-syntax . N4d8d) (let-syntax . N4d8c) (set! . N4d8b) (import . N4d8a) (begin . N4d89) (module . N4d88) (define-syntax . N4d87) (define . N4d86)) '((N5125 core-prim . &no-nans-rcd) (N5124 core-prim . &no-nans-rtd) (N5123 core-prim . &no-infinities-rcd) (N5122 core-prim . &no-infinities-rtd) (N5121 core-prim . &i/o-encoding-rcd) (N5120 core-prim . &i/o-encoding-rtd) (N511f core-prim . &i/o-decoding-rcd) (N511e core-prim . &i/o-decoding-rtd) (N511d core-prim . &i/o-port-rcd) (N511c core-prim . &i/o-port-rtd) (N511b core-prim . &i/o-file-does-not-exist-rcd) (N511a core-prim . &i/o-file-does-not-exist-rtd) (N5119 core-prim . &i/o-file-already-exists-rcd) (N5118 core-prim . &i/o-file-already-exists-rtd) (N5117 core-prim . &i/o-file-is-read-only-rcd) (N5116 core-prim . &i/o-file-is-read-only-rtd) (N5115 core-prim . &i/o-file-protection-rcd) (N5114 core-prim . &i/o-file-protection-rtd) (N5113 core-prim . &i/o-filename-rcd) (N5112 core-prim . &i/o-filename-rtd) (N5111 core-prim . &i/o-invalid-position-rcd) (N5110 core-prim . &i/o-invalid-position-rtd) (N510f core-prim . &i/o-write-rcd) (N510e core-prim . &i/o-write-rtd) (N510d core-prim . &i/o-read-rcd) (N510c core-prim . &i/o-read-rtd) (N510b core-prim . &i/o-rcd) (N510a core-prim . &i/o-rtd) (N5109 core-prim . &undefined-rcd) (N5108 core-prim . &undefined-rtd) (N5107 core-prim . &syntax-rcd) (N5106 core-prim . &syntax-rtd) (N5105 core-prim . &lexical-rcd) (N5104 core-prim . &lexical-rtd) (N5103 core-prim . &implementation-restriction-rcd) (N5102 core-prim . &implementation-restriction-rtd) (N5101 core-prim . &non-continuable-rcd) (N5100 core-prim . &non-continuable-rtd) (N50ff core-prim . &who-rcd) (N50fe core-prim . &who-rtd) (N50fd core-prim . &irritants-rcd) (N50fc core-prim . &irritants-rtd) (N50fb core-prim . &assertion-rcd) (N50fa core-prim . &assertion-rtd) (N50f9 core-prim . &violation-rcd) (N50f8 core-prim . &violation-rtd) (N50f7 core-prim . &error-rcd) (N50f6 core-prim . &error-rtd) (N50f5 core-prim . &serious-rcd) (N50f4 core-prim . &serious-rtd) (N50f3 core-prim . &warning-rcd) (N50f2 core-prim . &warning-rtd) (N50f1 core-prim . &message-rcd) (N50f0 core-prim . &message-rtd) (N50ef core-prim . &condition-rcd) (N50ee core-prim . &condition-rtd) (N3197 core-prim . syntax-error) (N30bb core-prim . syntax-dispatch) (N50ed core-prim . pretty-print) (N50ec core-prim . eval-core) (N50eb core-prim . set-symbol-value!) (N50ea core-prim . symbol-value) (N50e9 core-prim . gensym) (N50e8 core-prim . void) (N4c24 core-prim . load) (N31a9 core-prim . interaction-environment) (N50e7 core-prim . char-ready?) (N50e6 core-prim . regexp?) (N50e5 core-prim . read-line) (N50e4 core-prim . gensym-prefix-set!) (N50e3 core-prim . ungensym) (N50e2 core-prim . alist->eq-hash-table) (N50e1 core-prim . assoc-ref) (N50e0 core-prim . print) (N50df core-prim . format) (N50de core-prim . host-os) (N2afa core-prim . library-path) (N50dd core-prim . standard-library-path) (N50dc core-prim . file-newer?) (N50db core-prim . stat-mtime) (N50da core-prim . write-to-file) (N50d9 core-prim . file->list) (N50d8 core-prim . file->string) (N50d7 core-prim . digit->integer) (N50d6 core-prim . call-with-string-input-port) (N50d5 core-prim . call-with-string-io) (N50d4 core-prim . string-split) (N50d3 core-prim . bytevector-for-each) (N50d2 core-prim . string->regexp) (N50d1 core-prim . rxmatch) (N50d0 core-prim . regexp-replace-all) (N50cf core-prim . hashtable-for-each) (N28e4 core-prim . mosh-cache-dir) (N50ce core-prim . call-process) (N50cd core-prim . local-tz-offset) (N50cc core-prim . microseconds) (N50cb core-prim . directory-list) (N50ca core-prim . set-current-directory!) (N50c9 core-prim . expand-path) (N50c8 core-prim . current-directory) (N50c7 core-prim . %spawn) (N50c6 core-prim . %waitpid) (N50c5 core-prim . simple-struct-name) (N50c4 core-prim . simple-struct-set!) (N50c3 core-prim . simple-struct-ref) (N50c2 core-prim . make-simple-struct) (N50c1 core-prim . simple-struct?) (N50c0 core-prim . pointer-ref-c-int64) (N50bf core-prim . pointer-ref-c-int32) (N50be core-prim . pointer-ref-c-int16) (N50bd core-prim . pointer-ref-c-int8) (N50bc core-prim . pointer-ref-c-uint64) (N50bb core-prim . pointer-ref-c-uint32) (N50ba core-prim . pointer-ref-c-uint16) (N50b9 core-prim . pointer-ref-c-uint8) (N50b8 core-prim . pointer-set-c-uint64!) (N50b7 core-prim . pointer-set-c-uint32!) (N50b6 core-prim . pointer-set-c-uint16!) (N50b5 core-prim . pointer-set-c-uint8!) (N50b4 core-prim . pointer-set-c-int64!) (N50b3 core-prim . pointer-set-c-int32!) (N50b2 core-prim . pointer-set-c-int16!) (N50b1 core-prim . pointer-set-c-int8!) (N50b0 core-prim . pointer-set-c-pointer!) (N50af core-prim . pointer-set-c-double!) (N50ae core-prim . pointer-set-c-float!) (N50ad core-prim . pointer-set-c-long-long!) (N50ac core-prim . pointer-set-c-long!) (N50ab core-prim . pointer-set-c-int!) (N50aa core-prim . pointer-set-c-short!) (N50a9 core-prim . pointer-set-c-char!) (N50a8 core-prim . pointer-ref-c-pointer) (N50a7 core-prim . pointer-ref-c-double) (N50a6 core-prim . pointer-ref-c-float) (N50a5 core-prim . pointer-ref-c-unsigned-long-long) (N50a4 core-prim . pointer-ref-c-signed-long-long) (N50a3 core-prim . pointer-ref-c-unsigned-long) (N50a2 core-prim . pointer-ref-c-signed-long) (N50a1 core-prim . pointer-ref-c-unsigned-int) (N50a0 core-prim . pointer-ref-c-signed-int) (N509f core-prim . pointer-ref-c-unsigned-short) (N509e core-prim . pointer-ref-c-signed-short) (N509d core-prim . pointer-ref-c-unsigned-char) (N509c core-prim . pointer-ref-c-signed-char) (N509b core-prim . pointer->integer) (N509a core-prim . integer->pointer) (N5099 core-prim . pointer?) (N5098 core-prim . shared-errno) (N5097 core-prim . %ffi-free-c-callback-trampoline) (N5096 core-prim . %ffi-make-c-callback-trampoline) (N5095 core-prim . %ffi-free) (N5094 core-prim . %ffi-malloc) (N5093 core-prim . %ffi-supported?) (N5092 core-prim . %ffi-pointer->string) (N5091 core-prim . %ffi-call) (N5090 core-prim . %ffi-lookup) (N508f core-prim . %ffi-open) (N508e core-prim . null-terminated-utf8->string) (N508d core-prim . null-terminated-bytevector->string) (N508c core-prim . %exec) (N508b core-prim . %fork) (N508a core-prim . %pipe) (N5089 core-prim . p) (N5088 core-prim . open-output-string) (N5087 core-prim . get-output-string) (N5086 core-prim . file-stat-ctime) (N5085 core-prim . file-stat-atime) (N5084 core-prim . file-stat-mtime) (N5083 core-prim . file-size-in-bytes) (N5082 core-prim . file-writable?) (N5081 core-prim . file-executable?) (N5080 core-prim . file-readable?) (N507f core-prim . file-regular?) (N507e core-prim . file-symbolic-link?) (N507d core-prim . file-directory?) (N507c core-prim . create-symbolic-link) (N507b core-prim . rename-file) (N507a core-prim . delete-directory) (N5079 core-prim . create-directory) (N5078 core-prim . create-mosh-cache-dir) (N5077 core-prim . get-environment-variables) (N5076 core-prim . current-exception-handler) (N5075 core-prim . get-environment-variable) (N5074 core-prim . join-wraps) (N5073 core-prim . id->real-label) (N5072 core-prim . same-marks?) (N5071 core-prim . same-marks*?) (N5070 core-prim . get-timeofday) (N506f core-prim . get-command-line) (N506e core-prim . sys-display) (N506d core-prim . whereis) (N506c core-prim . register) (N506b core-prim . vm-join!) (N506a core-prim . vm-set-value!) (N5069 core-prim . vm?) (N5068 core-prim . main-vm?) (N5067 core-prim . vm-eval) (N5066 core-prim . vm-self) (N5065 core-prim . vm-start!) (N5064 core-prim . make-vm) (N5063 core-prim . mutex-try-lock!) (N5062 core-prim . mutex-unlock!) (N5061 core-prim . mutex-lock!) (N5060 core-prim . mutex?) (N505f core-prim . make-mutex) (N505e core-prim . condition-variable-notify-all!) (N505d core-prim . condition-variable-notify!) (N505c core-prim . condition-variable-wait!) (N505b core-prim . make-condition-variable) (N505a core-prim . write/ss) (N5059 core-prim . mosh-executable-path) (N5058 core-prim . make-file-options) (N5057 core-prim . source-info) (N5056 core-prim . make-compiler-instruction) (N5055 core-prim . make-instruction) (N5054 core-prim . set-source-info!) (N5053 core-prim . bignum?) (N5052 core-prim . fast-equal?) (N5051 core-prim . fasl-read) (N5050 core-prim . fasl-write) (N504f core-prim . time-usage) (N504e core-prim . os-constant) (N504d core-prim . disasm) (N28e2 core-prim . make-parameter) (N504c core-prim . socket-port) (N504b core-prim . socket-shutdown) (N504a core-prim . socket-close) (N5049 core-prim . socket-send) (N5048 core-prim . socket-recv!) (N5047 core-prim . socket-recv) (N5046 core-prim . make-server-socket) (N5045 core-prim . make-client-socket) (N5044 core-prim . socket-accept) (N5043 core-prim . socket?) (N5042 core-prim . string-upcase) (N5041 core-prim . string-titlecase) (N5040 core-prim . string-normalize-nfkd) (N503f core-prim . string-normalize-nfkc) (N503e core-prim . string-normalize-nfd) (N503d core-prim . string-normalize-nfc) (N503c core-prim . string-foldcase) (N503b core-prim . string-downcase) (N503a core-prim . string-ci>?) (N5039 core-prim . string-ci>=?) (N5038 core-prim . string-ci=?) (N5037 core-prim . string-ci<?) (N5036 core-prim . string-ci<=?) (N5035 core-prim . char-whitespace?) (N5034 core-prim . char-upper-case?) (N5033 core-prim . char-title-case?) (N5032 core-prim . char-numeric?) (N5031 core-prim . char-lower-case?) (N5030 core-prim . char-general-category) (N502f core-prim . char-upcase) (N502e core-prim . char-titlecase) (N502d core-prim . char-foldcase) (N502c core-prim . char-downcase) (N502b core-prim . char-ci>?) (N502a core-prim . char-ci>=?) (N5029 core-prim . char-ci=?) (N5028 core-prim . char-ci<?) (N5027 core-prim . char-ci<=?) (N5026 core-prim . char-alphabetic?) (N2ee6 core-prim . make-variable-transformer) (N319d core-prim . identifier?) (N3189 core-prim . generate-temporaries) (N318b core-prim . free-identifier=?) (N31a1 core-prim . syntax->datum) (N319f core-prim . datum->syntax) (N318d core-prim . bound-identifier=?) (N5025 core-prim . record-type-descriptor?) (N5024 core-prim . record-predicate) (N5023 core-prim . record-mutator) (N5022 core-prim . record-constructor) (N5021 core-prim . record-accessor) (N5020 core-prim . make-record-type-descriptor) (N501f core-prim . make-record-constructor-descriptor) (N501e core-prim . record?) (N501d core-prim . record-type-uid) (N501c core-prim . record-type-sealed?) (N501b core-prim . record-type-parent) (N501a core-prim . record-type-opaque?) (N5019 core-prim . record-type-name) (N5018 core-prim . record-type-generative?) (N5017 core-prim . record-type-field-names) (N5016 core-prim . record-rtd) (N5015 core-prim . record-field-mutable?) (N5014 core-prim . delete-file) (N5013 core-prim . file-exists?) (N5012 core-prim . vector-sort!) (N5011 core-prim . vector-sort) (N5010 core-prim . list-sort) (N500f core-prim . symbol-hash) (N500e core-prim . string-ci-hash) (N500d core-prim . string-hash) (N500c core-prim . equal-hash) (N500b core-prim . hashtable-equivalence-function) (N500a core-prim . make-hashtable) (N5009 core-prim . hashtable-hash-function) (N5008 core-prim . make-eqv-hashtable) (N5007 core-prim . make-eq-hashtable) (N5006 core-prim . hashtable?) (N5005 core-prim . hashtable-update!) (N5004 core-prim . hashtable-size) (N5003 core-prim . hashtable-set!) (N5002 core-prim . hashtable-ref) (N5001 core-prim . hashtable-mutable?) (N5000 core-prim . hashtable-keys) (N4fff core-prim . hashtable-entries) (N4ffe core-prim . hashtable-delete!) (N4ffd core-prim . hashtable-copy) (N4ffc core-prim . hashtable-contains?) (N4ffb core-prim . hashtable-clear!) (N4ffa core-prim . call-with-output-file) (N4ff9 core-prim . call-with-input-file) (N4ff8 core-prim . write-char) (N4ff7 core-prim . write) (N4ff6 core-prim . with-output-to-file) (N4ff5 core-prim . with-input-from-file) (N4ff4 core-prim . read-char) (N4ff3 core-prim . read) (N4ff2 core-prim . peek-char) (N4ff1 core-prim . open-output-file) (N4ff0 core-prim . open-input-file) (N4fef core-prim . newline) (N4fee core-prim . display) (N4fed core-prim . close-output-port) (N4fec core-prim . close-input-port) (N4feb core-prim . eof-object?) (N4fea core-prim . eof-object) (N4fe9 core-prim . current-error-port) (N4fe8 core-prim . current-output-port) (N4fe7 core-prim . current-input-port) (N4fe6 core-prim . output-port?) (N4fe5 core-prim . input-port?) (N4fe4 core-prim . utf-8-codec) (N4fe3 core-prim . utf-16-codec) (N4fe2 core-prim . transcoder-error-handling-mode) (N4fe1 core-prim . transcoder-eol-style) (N4fe0 core-prim . transcoder-codec) (N4fdf core-prim . transcoded-port) (N4fde core-prim . textual-port?) (N4fdd core-prim . string->bytevector) (N4fdc core-prim . standard-output-port) (N4fdb core-prim . standard-input-port) (N4fda core-prim . standard-error-port) (N4fd9 core-prim . set-port-position!) (N4fd8 core-prim . put-u8) (N4fd7 core-prim . put-string) (N4fd6 core-prim . put-datum) (N4fd5 core-prim . put-char) (N4fd4 core-prim . put-bytevector) (N4fd3 core-prim . port?) (N4fd2 core-prim . port-transcoder) (N4fd1 core-prim . port-position) (N4fd0 core-prim . port-has-set-port-position!?) (N4fcf core-prim . port-has-port-position?) (N4fce core-prim . port-eof?) (N4fcd core-prim . output-port-buffer-mode) (N4fcc core-prim . open-string-output-port) (N4fcb core-prim . open-string-input-port) (N4fca core-prim . open-file-output-port) (N4fc9 core-prim . open-file-input/output-port) (N4fc8 core-prim . open-file-input-port) (N4fc7 core-prim . open-bytevector-output-port) (N4fc6 core-prim . open-bytevector-input-port) (N4fc5 core-prim . native-transcoder) (N4fc4 core-prim . native-eol-style) (N4fc3 core-prim . make-transcoder) (N4fc2 core-prim . latin-1-codec) (N4fc1 core-prim . make-i/o-write-error) (N4fc0 core-prim . make-i/o-read-error) (N4fbf core-prim . make-i/o-port-error) (N4fbe core-prim . make-i/o-invalid-position-error) (N4fbd core-prim . make-i/o-filename-error) (N4fbc core-prim . make-i/o-file-protection-error) (N4fbb core-prim . make-i/o-file-is-read-only-error) (N4fba core-prim . make-i/o-file-does-not-exist-error) (N4fb9 core-prim . make-i/o-file-already-exists-error) (N4fb8 core-prim . make-i/o-error) (N4fb7 core-prim . make-i/o-encoding-error) (N4fb6 core-prim . make-i/o-decoding-error) (N4fb5 core-prim . make-custom-textual-output-port) (N4fb4 core-prim . make-custom-textual-input/output-port) (N4fb3 core-prim . make-custom-textual-input-port) (N4fb2 core-prim . make-custom-binary-output-port) (N4fb1 core-prim . make-custom-binary-input/output-port) (N4fb0 core-prim . make-custom-binary-input-port) (N4faf core-prim . make-bytevector) (N4fae core-prim . lookahead-u8) (N4fad core-prim . lookahead-char) (N4fac core-prim . i/o-write-error?) (N4fab core-prim . i/o-read-error?) (N4faa core-prim . i/o-port-error?) (N4fa9 core-prim . i/o-invalid-position-error?) (N4fa8 core-prim . i/o-filename-error?) (N4fa7 core-prim . i/o-file-protection-error?) (N4fa6 core-prim . i/o-file-is-read-only-error?) (N4fa5 core-prim . i/o-file-does-not-exist-error?) (N4fa4 core-prim . i/o-file-already-exists-error?) (N4fa3 core-prim . i/o-error?) (N4fa2 core-prim . i/o-error-position) (N4fa1 core-prim . i/o-error-port) (N4fa0 core-prim . i/o-error-filename) (N4f9f core-prim . i/o-encoding-error?) (N4f9e core-prim . i/o-encoding-error-char) (N4f9d core-prim . i/o-decoding-error?) (N4f9c core-prim . get-u8) (N4f9b core-prim . get-string-n!) (N4f9a core-prim . get-string-n) (N4f99 core-prim . get-string-all) (N4f98 core-prim . get-line) (N4f97 core-prim . get-datum) (N4f96 core-prim . get-char) (N4f95 core-prim . get-bytevector-some) (N4f94 core-prim . get-bytevector-n!) (N4f93 core-prim . get-bytevector-n) (N4f92 core-prim . get-bytevector-all) (N4f91 core-prim . flush-output-port) (N4f90 core-prim . close-port) (N3177 core-prim . scheme-report-environment) (N4f8f core-prim . quotient) (N3175 core-prim . null-environment) (N4f8e core-prim . remainder) (N4f8d core-prim . modulo) (N4f8c core-prim . inexact->exact) (N4f8b core-prim . force) (N4f8a core-prim . exact->inexact) (N4f89 core-prim . make-promise) (N4f88 core-prim . exit) (N4c1e core-prim . command-line) (N4f87 core-prim . string-fill!) (N4f86 core-prim . string-set!) (N4f85 core-prim . set-cdr!) (N4f84 core-prim . set-car!) (N4f83 core-prim . remove) (N4f82 core-prim . remv) (N4f81 core-prim . remp) (N4f80 core-prim . remq) (N4f7f core-prim . partition) (N4f7e core-prim . memv) (N4f7d core-prim . memq) (N4f7c core-prim . memp) (N4f7b core-prim . member) (N4f7a core-prim . exists) (N4f79 core-prim . for-all) (N4f78 core-prim . fold-right) (N4f77 core-prim . fold-left) (N4f76 core-prim . find) (N4f75 core-prim . filter) (N4f74 core-prim . cons*) (N4f73 core-prim . assv) (N4f72 core-prim . assq) (N4f71 core-prim . assp) (N4f70 core-prim . assoc) (N4f6f core-prim . call-with-string-output-port) (N4f6e core-prim . call-with-port) (N4f6d core-prim . call-with-bytevector-output-port) (N4f6c core-prim . bytevector->string) (N4f6b core-prim . buffer-mode?) (N4f6a core-prim . binary-port?) (N4f69 core-prim . with-exception-handler) (N4f68 core-prim . raise-continuable) (N4f67 core-prim . raise) (N317b core-prim . eval) (N3173 core-prim . environment) (N4f66 core-prim . make-enumeration) (N4f65 core-prim . enum-set=?) (N4f64 core-prim . enum-set-universe) (N4f63 core-prim . enum-set-union) (N4f62 core-prim . enum-set-subset?) (N4f61 core-prim . enum-set-projection) (N4f60 core-prim . enum-set-member?) (N4f5f core-prim . enum-set-intersection) (N4f5e core-prim . enum-set-indexer) (N4f5d core-prim . enum-set-difference) (N4f5c core-prim . enum-set-constructor) (N4f5b core-prim . enum-set-complement) (N4f5a core-prim . enum-set->list) (N4f59 core-prim . who-condition?) (N4f58 core-prim . warning?) (N4f57 core-prim . violation?) (N4f56 core-prim . undefined-violation?) (N4f55 core-prim . syntax-violation?) (N4f54 core-prim . syntax-violation-subform) (N4f53 core-prim . syntax-violation-form) (N319b core-prim . syntax-violation) (N4f52 core-prim . simple-conditions) (N4f51 core-prim . serious-condition?) (N4f50 core-prim . non-continuable-violation?) (N4f4f core-prim . message-condition?) (N4f4e core-prim . make-who-condition) (N4f4d core-prim . make-warning) (N4f4c core-prim . make-violation) (N4f4b core-prim . make-undefined-violation) (N4f4a core-prim . make-syntax-violation) (N4f49 core-prim . make-serious-condition) (N4f48 core-prim . make-non-continuable-violation) (N4f47 core-prim . make-message-condition) (N4f46 core-prim . make-lexical-violation) (N4f45 core-prim . make-irritants-condition) (N4f44 core-prim . make-implementation-restriction-violation) (N4f43 core-prim . make-error) (N4f42 core-prim . make-assertion-violation) (N4f41 core-prim . lexical-violation?) (N4f40 core-prim . irritants-condition?) (N4f3f core-prim . implementation-restriction-violation?) (N4f3e core-prim . error?) (N4f3d core-prim . condition-who) (N4f3c core-prim . condition-predicate) (N4f3b core-prim . condition-message) (N4f3a core-prim . condition-irritants) (N4f39 core-prim . condition-accessor) (N4f38 core-prim . condition) (N4f37 core-prim . assertion-violation?) (N4f36 core-prim . condition?) (N4f35 core-prim . utf32->string) (N4f34 core-prim . utf16->string) (N4f33 core-prim . utf8->string) (N4f32 core-prim . uint-list->bytevector) (N4f31 core-prim . u8-list->bytevector) (N4f30 core-prim . string->utf8) (N4f2f core-prim . string->utf32) (N4f2e core-prim . string->utf16) (N4f2d core-prim . sint-list->bytevector) (N4f2c core-prim . native-endianness) (N4f2b core-prim . bytevector?) (N4f2a core-prim . bytevector=?) (N4f29 core-prim . bytevector-uint-set!) (N4f28 core-prim . bytevector-uint-ref) (N4f27 core-prim . bytevector-u8-set!) (N4f26 core-prim . bytevector-u8-ref) (N4f25 core-prim . bytevector-u64-set!) (N4f24 core-prim . bytevector-u64-ref) (N4f23 core-prim . bytevector-u64-native-set!) (N4f22 core-prim . bytevector-u64-native-ref) (N4f21 core-prim . bytevector-u32-set!) (N4f20 core-prim . bytevector-u32-ref) (N4f1f core-prim . bytevector-u32-native-set!) (N4f1e core-prim . bytevector-u32-native-ref) (N4f1d core-prim . bytevector-u16-set!) (N4f1c core-prim . bytevector-u16-ref) (N4f1b core-prim . bytevector-u16-native-set!) (N4f1a core-prim . bytevector-u16-native-ref) (N4f19 core-prim . bytevector-sint-set!) (N4f18 core-prim . bytevector-sint-ref) (N4f17 core-prim . bytevector-s8-set!) (N4f16 core-prim . bytevector-s8-ref) (N4f15 core-prim . bytevector-s64-set!) (N4f14 core-prim . bytevector-s64-ref) (N4f13 core-prim . bytevector-s64-native-set!) (N4f12 core-prim . bytevector-s64-native-ref) (N4f11 core-prim . bytevector-s32-set!) (N4f10 core-prim . bytevector-s32-ref) (N4f0f core-prim . bytevector-s32-native-set!) (N4f0e core-prim . bytevector-s32-native-ref) (N4f0d core-prim . bytevector-s16-set!) (N4f0c core-prim . bytevector-s16-ref) (N4f0b core-prim . bytevector-s16-native-set!) (N4f0a core-prim . bytevector-s16-native-ref) (N4f09 core-prim . bytevector-length) (N4f08 core-prim . bytevector-ieee-single-ref) (N4f07 core-prim . bytevector-ieee-single-set!) (N4f06 core-prim . bytevector-ieee-single-native-set!) (N4f05 core-prim . bytevector-ieee-single-native-ref) (N4f04 core-prim . bytevector-ieee-double-set!) (N4f03 core-prim . bytevector-ieee-double-ref) (N4f02 core-prim . bytevector-ieee-double-native-set!) (N4f01 core-prim . bytevector-ieee-double-native-ref) (N4f00 core-prim . bytevector-fill!) (N4eff core-prim . bytevector-copy!) (N4efe core-prim . bytevector-copy) (N4efd core-prim . bytevector->uint-list) (N4efc core-prim . bytevector->u8-list) (N4efb core-prim . bytevector->sint-list) (N4efa core-prim . no-nans-violation?) (N4ef9 core-prim . no-infinities-violation?) (N4ef8 core-prim . make-no-nans-violation) (N4ef7 core-prim . make-no-infinities-violation) (N4ef6 core-prim . real->flonum) (N4ef5 core-prim . flzero?) (N4ef4 core-prim . fltruncate) (N4ef3 core-prim . fltan) (N4ef2 core-prim . flsqrt) (N4ef1 core-prim . flsin) (N4ef0 core-prim . flround) (N4eef core-prim . flpositive?) (N4eee core-prim . flonum?) (N4eed core-prim . flodd?) (N4eec core-prim . flnumerator) (N4eeb core-prim . flnegative?) (N4eea core-prim . flnan?) (N4ee9 core-prim . flmod0) (N4ee8 core-prim . flmod) (N4ee7 core-prim . flmin) (N4ee6 core-prim . flmax) (N4ee5 core-prim . fllog) (N4ee4 core-prim . flinteger?) (N4ee3 core-prim . flinfinite?) (N4ee2 core-prim . flfloor) (N4ee1 core-prim . flfinite?) (N4ee0 core-prim . flexpt) (N4edf core-prim . flexp) (N4ede core-prim . fleven?) (N4edd core-prim . fldiv0-and-mod0) (N4edc core-prim . fldiv0) (N4edb core-prim . fldiv-and-mod) (N4eda core-prim . fldiv) (N4ed9 core-prim . fldenominator) (N4ed8 core-prim . flcos) (N4ed7 core-prim . flceiling) (N4ed6 core-prim . flatan) (N4ed5 core-prim . flasin) (N4ed4 core-prim . flacos) (N4ed3 core-prim . flabs) (N4ed2 core-prim . fl>?) (N4ed1 core-prim . fl>=?) (N4ed0 core-prim . fl=?) (N4ecf core-prim . fl<?) (N4ece core-prim . fl<=?) (N4ecd core-prim . fl/) (N4ecc core-prim . fl-) (N4ecb core-prim . fl+) (N4eca core-prim . fl*) (N4ec9 core-prim . fixnum->flonum) (N4ec8 core-prim . fxzero?) (N4ec7 core-prim . fxxor) (N4ec6 core-prim . fxrotate-bit-field) (N4ec5 core-prim . fxreverse-bit-field) (N4ec4 core-prim . fxpositive?) (N4ec3 core-prim . fxodd?) (N4ec2 core-prim . fxnot) (N4ec1 core-prim . fxnegative?) (N4ec0 core-prim . fxmod0) (N4ebf core-prim . fxmod) (N4ebe core-prim . fxmin) (N4ebd core-prim . fxmax) (N4ebc core-prim . fxlength) (N4ebb core-prim . fxior) (N4eba core-prim . fxif) (N4eb9 core-prim . fxfirst-bit-set) (N4eb8 core-prim . fxeven?) (N4eb7 core-prim . fxdiv0-and-mod0) (N4eb6 core-prim . fxdiv0) (N4eb5 core-prim . fxdiv-and-mod) (N4eb4 core-prim . fxdiv) (N4eb3 core-prim . fxcopy-bit-field) (N4eb2 core-prim . fxcopy-bit) (N4eb1 core-prim . fxbit-set?) (N4eb0 core-prim . fxbit-field) (N4eaf core-prim . fxbit-count) (N4eae core-prim . fxarithmetic-shift-right) (N4ead core-prim . fxarithmetic-shift-left) (N4eac core-prim . fxarithmetic-shift) (N4eab core-prim . fxand) (N4eaa core-prim . fx>?) (N4ea9 core-prim . fx>=?) (N4ea8 core-prim . fx=?) (N4ea7 core-prim . fx<?) (N4ea6 core-prim . fx<=?) (N4ea5 core-prim . fx-/carry) (N4ea4 core-prim . fx-) (N4ea3 core-prim . fx+/carry) (N4ea2 core-prim . fx+) (N4ea1 core-prim . fx*/carry) (N4ea0 core-prim . fx*) (N4e9f core-prim . greatest-fixnum) (N4e9e core-prim . least-fixnum) (N4e9d core-prim . fixnum-width) (N4e9c core-prim . fixnum?) (N4e9b core-prim . bitwise-rotate-bit-field) (N4e9a core-prim . bitwise-reverse-bit-field) (N4e99 core-prim . bitwise-length) (N4e98 core-prim . bitwise-if) (N4e97 core-prim . bitwise-first-bit-set) (N4e96 core-prim . bitwise-copy-bit-field) (N4e95 core-prim . bitwise-copy-bit) (N4e94 core-prim . bitwise-bit-set?) (N4e93 core-prim . bitwise-bit-field) (N4e92 core-prim . bitwise-bit-count) (N4e91 core-prim . bitwise-xor) (N4e90 core-prim . bitwise-ior) (N4e8f core-prim . bitwise-and) (N4e8e core-prim . bitwise-not) (N4e8d core-prim . bitwise-arithmetic-shift-right) (N4e8c core-prim . bitwise-arithmetic-shift-left) (N4e8b core-prim . bitwise-arithmetic-shift) (N4e8a core-prim . zero?) (N4e89 core-prim . vector?) (N4e88 core-prim . vector-set!) (N4e87 core-prim . vector-ref) (N4e86 core-prim . vector-map) (N4e85 core-prim . vector-length) (N4e84 core-prim . vector-for-each) (N4e83 core-prim . vector-fill!) (N4e82 core-prim . vector->list) (N4e81 core-prim . vector) (N4e80 core-prim . values) (N4e7f core-prim . truncate) (N4e7e core-prim . tan) (N4e7d core-prim . symbol?) (N4e7c core-prim . symbol=?) (N4e7b core-prim . symbol->string) (N4e7a core-prim . substring) (N4e79 core-prim . string?) (N4e78 core-prim . string>?) (N4e77 core-prim . string>=?) (N4e76 core-prim . string=?) (N4e75 core-prim . string<?) (N4e74 core-prim . string<=?) (N4e73 core-prim . string-ref) (N4e72 core-prim . string-length) (N4e71 core-prim . string-for-each) (N4e70 core-prim . string-copy) (N4e6f core-prim . string-append) (N4e6e core-prim . string->symbol) (N4e6d core-prim . string->number) (N4e6c core-prim . string->list) (N4e6b core-prim . string) (N4e6a core-prim . sqrt) (N4e69 core-prim . sin) (N4e68 core-prim . round) (N4e67 core-prim . reverse) (N4e66 core-prim . real?) (N4e65 core-prim . real-valued?) (N4e64 core-prim . real-part) (N4e63 core-prim . rationalize) (N4e62 core-prim . rational?) (N4e61 core-prim . rational-valued?) (N4e60 core-prim . procedure?) (N4e5f core-prim . positive?) (N4e5e core-prim . pair?) (N4e5d core-prim . odd?) (N4e5c core-prim . numerator) (N4e5b core-prim . number?) (N4e5a core-prim . number->string) (N4e59 core-prim . null?) (N4e58 core-prim . not) (N4e57 core-prim . negative?) (N4e56 core-prim . nan?) (N4e55 core-prim . min) (N4e54 core-prim . max) (N4e53 core-prim . map) (N4e52 core-prim . make-vector) (N4e51 core-prim . make-string) (N4e50 core-prim . make-rectangular) (N4e4f core-prim . make-polar) (N4e4e core-prim . magnitude) (N4e4d core-prim . log) (N4e4c core-prim . list?) (N4e4b core-prim . list-tail) (N4e4a core-prim . list-ref) (N4e49 core-prim . list->vector) (N4e48 core-prim . list->string) (N4e47 core-prim . list) (N4e46 core-prim . length) (N4e45 core-prim . lcm) (N4e44 core-prim . integer?) (N4e43 core-prim . integer-valued?) (N4e42 core-prim . integer->char) (N4e41 core-prim . infinite?) (N4e40 core-prim . inexact?) (N4e3f core-prim . inexact) (N4e3e core-prim . imag-part) (N4e3d core-prim . gcd) (N4e3c core-prim . for-each) (N4e3b core-prim . floor) (N4e3a core-prim . finite?) (N4e39 core-prim . expt) (N4e38 core-prim . exp) (N4e37 core-prim . exact?) (N4e36 core-prim . exact-integer-sqrt) (N4e35 core-prim . exact) (N4e34 core-prim . even?) (N4e33 core-prim . error) (N4e32 core-prim . eqv?) (N4e31 core-prim . equal?) (N4e30 core-prim . eq?) (N4e2f core-prim . dynamic-wind) (N4e2e core-prim . div0-and-mod0) (N4e2d core-prim . mod0) (N4e2c core-prim . div0) (N4e2b core-prim . div-and-mod) (N4e2a core-prim . mod) (N4e29 core-prim . div) (N4e28 core-prim . denominator) (N4e27 core-prim . cos) (N4e26 core-prim . cons) (N4e25 core-prim . complex?) (N4e24 core-prim . char?) (N4e23 core-prim . char>?) (N4e22 core-prim . char>=?) (N4e21 core-prim . char=?) (N4e20 core-prim . char<?) (N4e1f core-prim . char<=?) (N4e1e core-prim . char->integer) (N4e1d core-prim . ceiling) (N4e1c core-prim . call-with-values) (N4e1b core-prim . call/cc) (N4e1a core-prim . call-with-current-continuation) (N4e19 core-prim . cddddr) (N4e18 core-prim . cdddar) (N4e17 core-prim . cddadr) (N4e16 core-prim . cddaar) (N4e15 core-prim . cdaddr) (N4e14 core-prim . cdadar) (N4e13 core-prim . cdaadr) (N4e12 core-prim . cdaaar) (N4e11 core-prim . cadddr) (N4e10 core-prim . caddar) (N4e0f core-prim . cadadr) (N4e0e core-prim . cadaar) (N4e0d core-prim . caaddr) (N4e0c core-prim . caadar) (N4e0b core-prim . caaadr) (N4e0a core-prim . caaaar) (N4e09 core-prim . cdddr) (N4e08 core-prim . cddar) (N4e07 core-prim . cdadr) (N4e06 core-prim . cdaar) (N4e05 core-prim . caddr) (N4e04 core-prim . cadar) (N4e03 core-prim . caadr) (N4e02 core-prim . caaar) (N4e01 core-prim . cddr) (N4e00 core-prim . cdar) (N4dff core-prim . cadr) (N4dfe core-prim . caar) (N4dfd core-prim . cdr) (N4dfc core-prim . car) (N4dfb core-prim . boolean?) (N4dfa core-prim . boolean=?) (N4df9 core-prim . atan) (N4df8 core-prim . assertion-violation) (N3195 core-prim . assertion-error) (N4df7 core-prim . asin) (N4df6 core-prim . apply) (N4df5 core-prim . append) (N4df4 core-prim . angle) (N4df3 core-prim . acos) (N4df2 core-prim . abs) (N4df1 core-prim . /) (N4df0 core-prim . *) (N4def core-prim . -) (N4dee core-prim . +) (N4ded core-prim . >=) (N4dec core-prim . >) (N4deb core-prim . =) (N4dea core-prim . <=) (N4de9 core-prim . <) (N4de8 core-prim . library) (N4de7 $core-rtd &no-nans-rtd &no-nans-rcd) (N4de6 $core-rtd &no-infinities-rtd &no-infinities-rcd) (N4de5 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (N4de4 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (N4de3 $core-rtd &i/o-port-rtd &i/o-port-rcd) (N4de2 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (N4de1 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (N4de0 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (N4ddf $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (N4dde $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (N4ddd $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (N4ddc $core-rtd &i/o-write-rtd &i/o-write-rcd) (N4ddb $core-rtd &i/o-read-rtd &i/o-read-rcd) (N4dda $core-rtd &i/o-rtd &i/o-rcd) (N4dd9 $core-rtd &undefined-rtd &undefined-rcd) (N4dd8 $core-rtd &syntax-rtd &syntax-rcd) (N4dd7 $core-rtd &lexical-rtd &lexical-rcd) (N4dd6 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (N4dd5 $core-rtd &non-continuable-rtd &non-continuable-rcd) (N4dd4 $core-rtd &who-rtd &who-rcd) (N4dd3 $core-rtd &irritants-rtd &irritants-rcd) (N4dd2 $core-rtd &assertion-rtd &assertion-rcd) (N4dd1 $core-rtd &violation-rtd &violation-rcd) (N4dd0 $core-rtd &error-rtd &error-rcd) (N4dcf $core-rtd &serious-rtd &serious-rcd) (N4dce $core-rtd &warning-rtd &warning-rcd) (N4dcd $core-rtd &message-rtd &message-rcd) (N4dcc $core-rtd &condition-rtd &condition-rcd) (N4dcb macro . define-condition-type) (N4dca macro . define-enumeration) (N4dc9 macro . define-record-type) (N4dc8 macro . parent-rtd) (N4dc7 macro . nongenerative) (N4dc6 macro . opaque) (N4dc5 macro . sealed) (N4dc4 macro . protocol) (N4dc3 macro . parent) (N4dc2 macro . immutable) (N4dc1 macro . mutable) (N4dc0 macro . fields) (N4dbf macro . error-handling-mode) (N4dbe macro . file-options) (N4dbd macro . buffer-mode) (N4dbc macro . eol-style) (N4dbb macro . guard) (N4dba macro . trace-define) (N4db9 macro . trace-lambda) (N4db8 macro . unsyntax-splicing) (N4db7 macro . unsyntax) (N4db6 macro . unquote-splicing) (N4db5 macro . unquote) (N4db4 macro . _) (N4db3 macro . else) (N4db2 macro . =>) (N4db1 macro . ...) (N4db0 macro . assert) (N4daf macro . endianness) (N4dae macro . delay) (N4dad macro . time) (N4dac macro . do) (N4dab macro . cond) (N4daa macro . let*) (N4da9 macro . let*-values) (N4da8 macro . let-values) (N4da7 macro . identifier-syntax) (N4da6 macro . with-syntax) (N4da5 macro . quasisyntax) (N4da4 macro . quasiquote) (N4da3 macro . syntax-rules) (N4da2 macro . include) (N4da1 macro . define-struct) (N4da0 core-macro . record-constructor-descriptor) (N4d9f core-macro . record-type-descriptor) (N4d9e macro . case) (N4d9d macro . parameterize) (N4d9c macro . unless) (N4d9b macro . when) (N4d9a core-macro . or) (N4d99 core-macro . and) (N4d98 core-macro . if) (N4d97 core-macro . let) (N4d96 core-macro . letrec*) (N4d95 core-macro . letrec) (N4d94 core-macro . type-descriptor) (N4d93 core-macro . case-lambda) (N4d92 core-macro . lambda) (N4d91 core-macro . syntax) (N4d90 core-macro . syntax-case) (N4d8f core-macro . quote) (N4d8e core-macro . foreign-call) (N4d8d letrec-syntax) (N4d8c let-syntax) (N4d8b set!) (N4d8a import) (N4d89 begin) (N4d88 module) (N4d87 define-syntax) (N4d86 define)) values values '#f '#f '#f '#f) (N2ccf@N2b1b@install-library 'N5146 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . N50ed) (eval-core . N50ec) (set-symbol-value! . N50eb) (symbol-value . N50ea) (gensym . N50e9) (void . N50e8)) '() values values '#f '#f '#f '#f) (N2ccf@N2b1b@install-library 'N5147 '(mosh) '() '() '() '() '((set-symbol-value! . N50eb) (symbol-value . N50ea) (regexp? . N50e6) (read-line . N50e5) (ungensym . N50e3) (alist->eq-hash-table . N50e2) (assoc-ref . N50e1) (print . N50e0) (format . N50df) (host-os . N50de) (library-path . N2afa) (standard-library-path . N50dd) (file-newer? . N50dc) (stat-mtime . N50db) (digit->integer . N50d7) (call-with-string-input-port . N50d6) (call-with-string-io . N50d5) (string-split . N50d4) (bytevector-for-each . N50d3) (string->regexp . N50d2) (rxmatch . N50d1) (regexp-replace-all . N50d0) (hashtable-for-each . N50cf) (set-current-directory! . N50ca) (expand-path . N50c9) (current-directory . N50c8) (p . N5089) (get-timeofday . N5070) (get-command-line . N506f) (sys-display . N506e) (whereis . N506d) (register . N506c) (vm-join! . N506b) (vm-set-value! . N506a) (vm? . N5069) (main-vm? . N5068) (vm-eval . N5067) (vm-self . N5066) (vm-start! . N5065) (make-vm . N5064) (mutex-try-lock! . N5063) (mutex-unlock! . N5062) (mutex-lock! . N5061) (mutex? . N5060) (make-mutex . N505f) (condition-variable-notify-all! . N505e) (condition-variable-notify! . N505d) (condition-variable-wait! . N505c) (make-condition-variable . N505b) (write/ss . N505a) (mosh-executable-path . N5059) (make-file-options . N5058) (source-info . N5057) (make-compiler-instruction . N5056) (make-instruction . N5055) (set-source-info! . N5054) (bignum? . N5053) (fast-equal? . N5052) (fasl-read . N5051) (fasl-write . N5050) (time-usage . N504f) (os-constant . N504e) (time . N4dad) (include . N4da2)) '() values values '#f '#f '#f '#f) (N2ccf@N2b1b@install-library 'N5148 '(system) '() '() '() '() '((gensym-prefix-set! . N50e4) (write-to-file . N50da) (file->list . N50d9) (file->string . N50d8) (mosh-cache-dir . N28e4) (call-process . N50ce) (local-tz-offset . N50cd) (microseconds . N50cc) (directory-list . N50cb) (expand-path . N50c9) (%spawn . N50c7) (%waitpid . N50c6) (simple-struct-name . N50c5) (simple-struct-set! . N50c4) (simple-struct-ref . N50c3) (make-simple-struct . N50c2) (simple-struct? . N50c1) (pointer-ref-c-int64 . N50c0) (pointer-ref-c-int32 . N50bf) (pointer-ref-c-int16 . N50be) (pointer-ref-c-int8 . N50bd) (pointer-ref-c-uint64 . N50bc) (pointer-ref-c-uint32 . N50bb) (pointer-ref-c-uint16 . N50ba) (pointer-ref-c-uint8 . N50b9) (pointer-set-c-uint64! . N50b8) (pointer-set-c-uint32! . N50b7) (pointer-set-c-uint16! . N50b6) (pointer-set-c-uint8! . N50b5) (pointer-set-c-int64! . N50b4) (pointer-set-c-int32! . N50b3) (pointer-set-c-int16! . N50b2) (pointer-set-c-int8! . N50b1) (pointer-set-c-pointer! . N50b0) (pointer-set-c-double! . N50af) (pointer-set-c-float! . N50ae) (pointer-set-c-long-long! . N50ad) (pointer-set-c-long! . N50ac) (pointer-set-c-int! . N50ab) (pointer-set-c-short! . N50aa) (pointer-set-c-char! . N50a9) (pointer-ref-c-pointer . N50a8) (pointer-ref-c-double . N50a7) (pointer-ref-c-float . N50a6) (pointer-ref-c-unsigned-long-long . N50a5) (pointer-ref-c-signed-long-long . N50a4) (pointer-ref-c-unsigned-long . N50a3) (pointer-ref-c-signed-long . N50a2) (pointer-ref-c-unsigned-int . N50a1) (pointer-ref-c-signed-int . N50a0) (pointer-ref-c-unsigned-short . N509f) (pointer-ref-c-signed-short . N509e) (pointer-ref-c-unsigned-char . N509d) (pointer-ref-c-signed-char . N509c) (pointer->integer . N509b) (integer->pointer . N509a) (pointer? . N5099) (shared-errno . N5098) (%ffi-free-c-callback-trampoline . N5097) (%ffi-make-c-callback-trampoline . N5096) (%ffi-free . N5095) (%ffi-malloc . N5094) (%ffi-supported? . N5093) (%ffi-pointer->string . N5092) (%ffi-call . N5091) (%ffi-lookup . N5090) (%ffi-open . N508f) (null-terminated-utf8->string . N508e) (null-terminated-bytevector->string . N508d) (%exec . N508c) (%fork . N508b) (%pipe . N508a) (open-output-string . N5088) (get-output-string . N5087) (file-stat-ctime . N5086) (file-stat-atime . N5085) (file-stat-mtime . N5084) (file-size-in-bytes . N5083) (file-writable? . N5082) (file-executable? . N5081) (file-readable? . N5080) (file-regular? . N507f) (file-symbolic-link? . N507e) (file-directory? . N507d) (create-symbolic-link . N507c) (rename-file . N507b) (delete-directory . N507a) (create-directory . N5079) (create-mosh-cache-dir . N5078) (get-environment-variables . N5077) (current-exception-handler . N5076) (get-environment-variable . N5075) (join-wraps . N5074) (id->real-label . N5073) (same-marks? . N5072) (same-marks*? . N5071) (disasm . N504d) (make-parameter . N28e2) (socket-port . N504c) (socket-shutdown . N504b) (socket-close . N504a) (socket-send . N5049) (socket-recv! . N5048) (socket-recv . N5047) (make-server-socket . N5046) (make-client-socket . N5045) (socket-accept . N5044) (socket? . N5043) (parameterize . N4d9d)) '() values values '#f '#f '#f '#f)))
(begin (set! N4c09@ref (unspecified)) (set! N4c0b@x* (unspecified)) (set! N4c0d@add-library-path! (unspecified)) (set! N4c0f@parse-and-add-library-path (unspecified)) (set! N4c11@for-each-with-index (unspecified)) (set! N4c13@rpad (unspecified)) (set! N4c15@condition-printer (unspecified)) (set! N4c17@record->field-alist (unspecified)) (set! N4c19@map-with-index (unspecified)) (set! N4c1b@repl (unspecified)) (set! N4c1d@trace-printer (unspecified)) (set! N4c1f@command-line (unspecified)) (set! N4c21@local-library-path (unspecified)) (set! N4c23@load/args (unspecified)) (set! N4c25@load (unspecified)) (set! N4c27@ironscheme-build (unspecified)) (set! N4c29@eval-top-level (unspecified)) (set! N4c2b@compile-system-libraries (unspecified)) (set! N4c2d@compile (unspecified)) (set! N4c2f@compile->closure (unspecified)) (set! N4c31@pre-compile-r6rs-file (unspecified)) (set! N4c33@load-r6rs-top-level (unspecified)) (set! N4c35@load-r6rs-top-level-sexp (unspecified)) (set! N4c37@prefix-inc (unspecified)) (set! N4c39@prefix-inc! (unspecified)) (set! N4c09@ref (lambda (N4c74@rtd N4c75@i N4c76@x) (let ((N4c7a@val ((record-accessor N4c74@rtd N4c75@i) N4c76@x))) (if (symbol? N4c7a@val) (ungensym N4c7a@val) N4c7a@val)))) (set! N4d6c@N4c09@ref N4c09@ref) (set! N4c0b@x* '()) (set! N4d6d@N4c0b@x* N4c0b@x*) (set! N4c0d@add-library-path! (lambda (N4c7c@path) (N2cbf@N2afb@library-path (append (N2cbf@N2afb@library-path) (list N4c7c@path))))) (set! N4d6e@N4c0d@add-library-path! N4c0d@add-library-path!) (set! N4c0f@parse-and-add-library-path (lambda (N4c7e@paths N4c7f@message) (letrec* ((N4c83@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((N4c84@t N4c7e@paths)) (if N4c84@t ((lambda (N4c86@paths) (for-each (lambda (N4c88@path) (if (file-exists? N4c88@path) (N4c0d@add-library-path! (expand-path N4c88@path)) (format (current-error-port) N4c7f@message N4c88@path))) (string-split N4c86@paths N4c83@separator))) N4c84@t) (void)))))) (set! N4d6f@N4c0f@parse-and-add-library-path N4c0f@parse-and-add-library-path) (set! N4c11@for-each-with-index (lambda (N4c8a@proc N4c8b@lst) (letrec ((N4c8e@loop (lambda (N4c90@i N4c91@lst) (if (null? N4c91@lst) (if '#f '#f (void)) (begin (N4c8a@proc N4c90@i (car N4c91@lst)) (N4c8e@loop (+ N4c90@i '1) (cdr N4c91@lst))))))) (N4c8e@loop '1 N4c8b@lst)))) (set! N4d70@N4c11@for-each-with-index N4c11@for-each-with-index) (set! N4c13@rpad (lambda (N4c94@str N4c95@pad N4c96@n) (let ((N4c9a@rest (- N4c96@n (string-length (format '"~a" N4c94@str))))) (let N4ca0@loop ((N4c9c@rest N4c9a@rest) (N4c9d@ret (format '"~a" N4c94@str))) (if (<= N4c9c@rest '0) N4c9d@ret (N4ca0@loop (- N4c9c@rest '1) (string-append N4c9d@ret N4c95@pad))))))) (set! N4d71@N4c13@rpad N4c13@rpad) (set! N4c15@condition-printer (lambda (N4ca2@e N4ca3@port) (letrec* ((N4ca7@max-condition-len (apply max (map (lambda (N4cb8@c) (string-length (symbol->string (record-type-name (record-rtd N4cb8@c))))) (simple-conditions N4ca2@e))))) (begin (display '" Condition components:\n" N4ca3@port) (N4c11@for-each-with-index (lambda (N4ca8@i N4ca9@x) (let ((N4cac@rtd (record-rtd N4ca9@x)) (N4cad@fields-alist (N4c17@record->field-alist N4ca9@x))) (begin (format N4ca3@port '" ~d. ~a" N4ca8@i (N4c13@rpad (symbol->string (record-type-name N4cac@rtd)) '" " N4ca7@max-condition-len)) (if (null? N4cad@fields-alist) (newline N4ca3@port) (void)) (let N4cb4@loop ((N4cb0@first '#t) (N4cb1@fields-alist N4cad@fields-alist)) (if (null? N4cb1@fields-alist) '() (let ((N4cb6@field (car N4cb1@fields-alist))) (begin (if (not N4cb0@first) (display (N4c13@rpad '"" '" " (+ '4 N4ca7@max-condition-len)) N4ca3@port) (void)) (display '"       " N4ca3@port) (display (car N4cb6@field) N4ca3@port) (display '": " N4ca3@port) (write (cdr N4cb6@field) N4ca3@port) (newline N4ca3@port) (N4cb4@loop '#f (cdr N4cb1@fields-alist))))))))) (simple-conditions N4ca2@e)))))) (set! N4d72@N4c15@condition-printer N4c15@condition-printer) (set! N4c17@record->field-alist (lambda (N4cba@r) (letrec* ((N4cbd@ref (lambda (N4cc8@rtd N4cc9@i N4cca@x) (let ((N4cce@val ((record-accessor N4cc8@rtd N4cc9@i) N4cca@x))) (if (symbol? N4cce@val) (ungensym N4cce@val) N4cce@val))))) (let N4cc2@loop ((N4cbe@ret '()) (N4cbf@rtd (record-rtd N4cba@r))) (if N4cbf@rtd (N4cc2@loop (append N4cbe@ret (N4c19@map-with-index (lambda (N4cc4@i N4cc5@field) (cons N4cc5@field (N4cbd@ref N4cbf@rtd N4cc4@i N4cba@r))) (vector->list (record-type-field-names N4cbf@rtd)))) (record-type-parent N4cbf@rtd)) N4cbe@ret))))) (set! N4d73@N4c17@record->field-alist N4c17@record->field-alist) (set! N4c19@map-with-index (lambda (N4cd0@proc N4cd1@lst) (let N4cda@loop ((N4cd4@i '0) (N4cd5@lst N4cd1@lst) (N4cd6@ret '())) (if (null? N4cd5@lst) (reverse N4cd6@ret) (N4cda@loop (+ N4cd4@i '1) (cdr N4cd5@lst) (cons (N4cd0@proc N4cd4@i (car N4cd5@lst)) N4cd6@ret)))))) (set! N4d74@N4c19@map-with-index N4c19@map-with-index) (set! N4c1b@repl (lambda N4cdc@x (letrec* ((N4cdf@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (N4ce2@N4ce0) (lambda () (with-exception-handler (lambda (N4ce4@e) ((call/cc (lambda (N4ce6@N4ce1) (N4ce2@N4ce0 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? N4ce4@e) (N4c15@condition-printer N4ce4@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~w\n" N4ce4@e))) (N4ce6@N4ce1 (lambda () (raise-continuable N4ce4@e)))))))))) (lambda () (let N4cec@loop ((N4ce8@line (get-line (current-input-port))) (N4ce9@accum '"")) (letrec* ((N4cef@parentheses-ok? (lambda (N4cf6@text) (let N4cfe@loop ((N4cf8@chars (string->list N4cf6@text)) (N4cf9@p0 '0) (N4cfa@p1 '0)) (if (null? N4cf8@chars) (= '0 N4cf9@p0 N4cfa@p1) (let ((N4d00@t (car N4cf8@chars))) (if (memv N4d00@t '(#\()) (N4cfe@loop (cdr N4cf8@chars) (+ N4cf9@p0 '1) N4cfa@p1) (if (memv N4d00@t '(#\))) (N4cfe@loop (cdr N4cf8@chars) (- N4cf9@p0 '1) N4cfa@p1) (if (memv N4d00@t '(#\[)) (N4cfe@loop (cdr N4cf8@chars) N4cf9@p0 (+ N4cfa@p1 '1)) (if (memv N4d00@t '(#\])) (N4cfe@loop (cdr N4cf8@chars) N4cf9@p0 (- N4cfa@p1 '1)) (N4cfe@loop (cdr N4cf8@chars) N4cf9@p0 N4cfa@p1)))))))))) (N4cf1@eval-string-print (lambda (N4cf4@text) (if (not (or (string=? '"\n" N4cf4@text) (= '0 (string-length N4cf4@text)))) (write (N4c29@eval-top-level (call-with-port (open-string-input-port N4cf4@text) read))) (void))))) (if (eof-object? N4ce8@line) (begin (N4cf1@eval-string-print N4ce9@accum) (exit)) (let ((N4cf2@current (string-append N4ce9@accum N4ce8@line))) (if (N4cef@parentheses-ok? N4cf2@current) (N4cf1@eval-string-print N4cf2@current) (N4cec@loop (get-line (current-input-port)) N4cf2@current)))))))))))) (newline) (N4cdf@rec))))) (N4cdf@rec)))) (set! N4d75@N4c1b@repl N4c1b@repl) (set! N4c1d@trace-printer (N2a05@N28e3@make-parameter write)) (set! N4d76@N4c1d@trace-printer N4c1d@trace-printer) (set! N4c1f@command-line (N2a05@N28e3@make-parameter (get-command-line))) (set! N4d77@N4c1f@command-line N4c1f@command-line) (set! N4c21@local-library-path (lambda (N4d02@filename) (N2cbf@N2afb@library-path))) (set! N4d78@N4c21@local-library-path N4c21@local-library-path) (set! N4c23@load/args (lambda (N4d04@filename . N4d06@args) (begin (apply N4c33@load-r6rs-top-level N4d04@filename 'load N4d06@args) (void)))) (set! N4d79@N4c23@load/args N4c23@load/args) (set! N4c25@load (lambda (N4d08@filename) (begin (apply N4c33@load-r6rs-top-level N4d08@filename 'load (N4c1f@command-line)) (void)))) (set! N4d7a@N4c25@load N4c25@load) (set! N4c27@ironscheme-build (lambda () (N4c25@load '"ironscheme-buildscript.ss"))) (set! N4d7b@N4c27@ironscheme-build N4c27@ironscheme-build) (set! N4c29@eval-top-level (lambda (N4d0a@x) (N4be6@N317c@eval N4d0a@x (N4bfd@N31aa@interaction-environment)))) (set! N4d7c@N4c29@eval-top-level N4c29@eval-top-level) (set! N4c2b@compile-system-libraries (lambda () (N4c29@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! N4d7d@N4c2b@compile-system-libraries N4c2b@compile-system-libraries) (set! N4c2d@compile (lambda (N4d0c@filename) (N4c33@load-r6rs-top-level N4d0c@filename 'compile))) (set! N4d7e@N4c2d@compile N4c2d@compile) (set! N4c2f@compile->closure (lambda (N4d0e@filename) (N4c33@load-r6rs-top-level N4d0e@filename 'closure))) (set! N4d7f@N4c2f@compile->closure N4c2f@compile->closure) (set! N4c31@pre-compile-r6rs-file (lambda (N4d10@filename) (N4c33@load-r6rs-top-level N4d10@filename 'compile))) (set! N4d80@N4c31@pre-compile-r6rs-file N4c31@pre-compile-r6rs-file) (set! N4c33@load-r6rs-top-level (lambda (N4d12@filename N4d13@how . N4d16@args) (begin (N2cbf@N2afb@library-path (N4c21@local-library-path N4d12@filename)) (let ((N4d18@x* (with-input-from-file N4d12@filename (lambda () (let N4d1a@f () (let ((N4d1c@x (N29f7@N28c7@read-annotated))) (if (eof-object? N4d1c@x) '() (cons N4d1c@x (N4d1a@f))))))))) (let ((N4d1e@t N4d13@how)) (if (memv N4d1e@t '(closure)) (N4bfc@N31a8@pre-compile-r6rs-top-level N4d18@x*) (if (memv N4d1e@t '(load)) (begin (N4c1f@command-line (cons N4d12@filename (car N4d16@args))) (N2a06@N28e5@mosh-cache-dir (create-mosh-cache-dir)) (if (N2a06@N28e5@mosh-cache-dir) (gensym-prefix-set! (N4c39@prefix-inc! (string-append (N2a06@N28e5@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (N4d20@file) ((call/cc (lambda (N4d24@N4d22) (lambda () (with-exception-handler (lambda (N4d26@c) ((call/cc (lambda (N4d28@N4d23) (N4d24@N4d22 (lambda () (if '#t '#t (N4d28@N4d23 (lambda () (raise-continuable N4d26@c)))))))))) (lambda () (delete-file (string-append (N2a06@N28e5@mosh-cache-dir) '"/" N4d20@file))))))))) (directory-list (N2a06@N28e5@mosh-cache-dir))) (void)) (let ((N4d2a@compiled (N4bfb@N31a6@compile-r6rs-top-level N4d18@x*))) (begin (if (and (N2a06@N28e5@mosh-cache-dir) (not (symbol-value '%disable-acc))) (N2cc3@N2b03@serialize-all N2a00@N28d9@serialize-library N2a5c@N2a15@compile-core-expr) (void)) (N4d2a@compiled)))) (if (memv N4d1e@t '(compile)) (begin (N4bfb@N31a6@compile-r6rs-top-level N4d18@x*) (N2cc3@N2b03@serialize-all N2a00@N28d9@serialize-library N2a5c@N2a15@compile-core-expr)) (if '#f '#f (void)))))))))) (set! N4d81@N4c33@load-r6rs-top-level N4c33@load-r6rs-top-level) (set! N4c35@load-r6rs-top-level-sexp (lambda (N4d2c@import-spec N4d2d@thunk) (let ((N4d38@N4d31 N2cbf@N2afb@library-path) (N4d39@N4d33 N2a06@N28e5@mosh-cache-dir) (N4d3a@N4d35 (N4c21@local-library-path '"")) (N4d3b@N4d37 (create-mosh-cache-dir))) (let ((N4d40@swap (lambda () (begin (let ((N4d42@t (N4d38@N4d31))) (begin (N4d38@N4d31 N4d3a@N4d35) (set! N4d3a@N4d35 N4d42@t))) (let ((N4d44@t (N4d39@N4d33))) (begin (N4d39@N4d33 N4d3b@N4d37) (set! N4d3b@N4d37 N4d44@t))))))) (dynamic-wind N4d40@swap (lambda () (begin (if (N2a06@N28e5@mosh-cache-dir) (gensym-prefix-set! (N4c39@prefix-inc! (string-append (N2a06@N28e5@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((N4d4a@N4d47 N4c1f@command-line) (N4d4b@N4d49 '())) (let ((N4d4e@swap (lambda () (let ((N4d50@t (N4d4a@N4d47))) (begin (N4d4a@N4d47 N4d4b@N4d49) (set! N4d4b@N4d49 N4d50@t)))))) (dynamic-wind N4d4e@swap (lambda () ((N4bfb@N31a6@compile-r6rs-top-level (list (cons 'import N4d2c@import-spec) (list N4d2d@thunk))))) N4d4e@swap))))) N4d40@swap))))) (set! N4d82@N4c35@load-r6rs-top-level-sexp N4c35@load-r6rs-top-level-sexp) (set! N4c37@prefix-inc (lambda (N4d52@prefix-string) (let ((N4d54@prefix (symbol->string N4d52@prefix-string))) (let ((N4d56@len (string-length N4d54@prefix))) (let N4d5e@loop ((N4d58@i (- N4d56@len '1)) (N4d59@carry? '#t) (N4d5a@accum '())) (if (< N4d58@i '0) (string->symbol (list->string (if N4d59@carry? (cons '#\a N4d5a@accum) N4d5a@accum))) (if N4d59@carry? (let ((N4d60@next-integer (+ '1 (char->integer (string-ref N4d54@prefix N4d58@i))))) (if (= N4d60@next-integer '123) (N4d5e@loop (- N4d58@i '1) '#f (cons '#\A N4d5a@accum)) (if (= N4d60@next-integer '91) (N4d5e@loop (- N4d58@i '1) '#t (cons '#\a N4d5a@accum)) (N4d5e@loop (- N4d58@i '1) '#f (cons (integer->char N4d60@next-integer) N4d5a@accum))))) (N4d5e@loop (- N4d58@i '1) '#f (cons (string-ref N4d54@prefix N4d58@i) N4d5a@accum))))))))) (set! N4d83@N4c37@prefix-inc N4c37@prefix-inc) (set! N4c39@prefix-inc! (lambda (N4d62@file) (begin (if (not (file-exists? N4d62@file)) (call-with-output-file N4d62@file (lambda (N4d64@port) (write 'd N4d64@port))) (void)) (let ((N4d66@prefix (call-with-input-file N4d62@file read))) (if (main-vm?) (let ((N4d68@next-prefix (N4c37@prefix-inc N4d66@prefix))) (begin (call-with-port (open-file-output-port N4d62@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (N4d6a@port) (write N4d68@next-prefix N4d6a@port))) N4d66@prefix)) N4d66@prefix))))) (set! N4d84@N4c39@prefix-inc! N4c39@prefix-inc!) (begin (N2cc4@N2b05@current-precompiled-library-loader N2a01@N28db@load-serialized-library) (set-symbol-value! 'load N4c25@load) (set-symbol-value! 'pre-compile-r6rs-file N4c31@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs N4c29@eval-top-level) (set-symbol-value! 'int-env-syms N4bdd@N316a@interaction-environment-symbols) (set-symbol-value! 'expanded2core N2a5b@N2a13@expanded->core) (set-symbol-value! 'trace-printer N4c1d@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (N4c3a@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list N4c3a@c))))) (N4c0f@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (N4c0f@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (N4c0d@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (N4c0d@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (N4c0d@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((N4c3c@prefix (lambda (N4c3e@ext N4c3f@ls) (append (map (lambda (N4c42@x) (string-append N4c3e@ext N4c42@x)) N4c3f@ls) N4c3f@ls)))) (N2cc0@N2afd@library-extensions (N4c3c@prefix '".mosh" (N2cc0@N2afd@library-extensions)))) (current-exception-handler (lambda (N4c44@c) (begin (if (condition? N4c44@c) (N4c15@condition-printer N4c44@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~w\n" N4c44@c)) N4c44@c))) (if ((call/cc (lambda (N4c48@N4c46) (lambda () (with-exception-handler (lambda (N4c4a@c) ((call/cc (lambda (N4c4c@N4c47) (N4c48@N4c46 (lambda () (if '#t '#f (N4c4c@N4c47 (lambda () (raise-continuable N4c4a@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (N4c35@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (N4c1f@command-line)) (let ((N4c56@N4c4f N4c1f@command-line) (N4c57@N4c51 N2a06@N28e5@mosh-cache-dir) (N4c58@N4c53 '()) (N4c59@N4c55 (create-mosh-cache-dir))) (let ((N4c5e@swap (lambda () (begin (let ((N4c60@t (N4c56@N4c4f))) (begin (N4c56@N4c4f N4c58@N4c53) (set! N4c58@N4c53 N4c60@t))) (let ((N4c62@t (N4c57@N4c51))) (begin (N4c57@N4c51 N4c59@N4c55) (set! N4c59@N4c55 N4c62@t))))))) (dynamic-wind N4c5e@swap (lambda () (begin (if (N2a06@N28e5@mosh-cache-dir) (gensym-prefix-set! (N4c39@prefix-inc! (string-append (N2a06@N28e5@mosh-cache-dir) '"/prefix.txt"))) (void)) (N4c1b@repl))) N4c5e@swap))) (begin (N2cbf@N2afb@library-path (N4c21@local-library-path (car (N4c1f@command-line)))) (set! N4c0b@x* (with-input-from-file (car (N4c1f@command-line)) (lambda () (let N4c64@f () (let ((N4c66@x (N29f7@N28c7@read-annotated))) (if (eof-object? N4c66@x) '() (cons N4c66@x (N4c64@f)))))))) (N4c1f@command-line (cons (car (N4c1f@command-line)) (cdr (N4c1f@command-line)))) (N2a06@N28e5@mosh-cache-dir (create-mosh-cache-dir)) (if (N2a06@N28e5@mosh-cache-dir) (gensym-prefix-set! (N4c39@prefix-inc! (string-append (N2a06@N28e5@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (N4c68@file) ((call/cc (lambda (N4c6c@N4c6a) (lambda () (with-exception-handler (lambda (N4c6e@c) ((call/cc (lambda (N4c70@N4c6b) (N4c6c@N4c6a (lambda () (if '#t '#t (N4c70@N4c6b (lambda () (raise-continuable N4c6e@c)))))))))) (lambda () (delete-file (string-append (N2a06@N28e5@mosh-cache-dir) '"/" N4c68@file))))))))) (directory-list (N2a06@N28e5@mosh-cache-dir))) (void)) (let ((N4c72@compiled (N4bfb@N31a6@compile-r6rs-top-level N4c0b@x*))) (begin (if (and (N2a06@N28e5@mosh-cache-dir) (not (symbol-value '%disable-acc))) (N2cc3@N2b03@serialize-all N2a00@N28d9@serialize-library N2a5c@N2a15@compile-core-expr) (void)) (N4c72@compiled))))))))
