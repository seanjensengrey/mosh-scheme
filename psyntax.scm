;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! cb588@library-file-path->cache-path (unspecified)) (set! cb58a@read-annotated (unspecified)) (set! cb58c@annotation-stripped (unspecified)) (set! cb58e@annotation? (unspecified)) (set! cb590@annotation-source (unspecified)) (set! cb592@annotation-expression (unspecified)) (set! cb594@scm->fasl (unspecified)) (set! cb596@fasl-save (unspecified)) (set! cb598@fasl-load (unspecified)) (set! cb59a@verbose? (unspecified)) (set! cb59c@serialize-library (unspecified)) (set! cb59e@load-serialized-library (unspecified)) (set! cb5a0@make-record-printer (unspecified)) (set! cb5a2@compile-core (unspecified)) (set! cb5a4@read-library-source-file (unspecified)) (set! cb5a6@make-parameter (unspecified)) (set! cb5a8@mosh-cache-dir (unspecified)) (set! cb63e@file-options-spec (unspecified)) (set! cb588@library-file-path->cache-path (lambda (cb63f@x) (call-with-values (lambda () (open-string-output-port)) (lambda (cb645@cb642 cb646@cb644) (let ((cb649@extract cb646@cb644) (cb64a@p cb645@cb642)) (let ((cb64e@display-hex '#f)) (begin (set! cb64e@display-hex (lambda (cb657@n) (if (<= '0 cb657@n '9) (display cb657@n cb64a@p) (display (integer->char (+ (char->integer '#\a) (- cb657@n '10))) cb64a@p)))) (begin (let cb651@f ((cb64f@ls (string-split cb63f@x '#\/))) (if (not (null? cb64f@ls)) (begin (display '"_" cb64a@p) (for-each (lambda (cb653@c) (if (or (char<=? '#\a cb653@c '#\z) (char<=? '#\A cb653@c '#\Z) (char<=? '#\0 cb653@c '#\9) (memv cb653@c '(#\- #\. #\_ #\~))) (display cb653@c cb64a@p) (begin (display '"%" cb64a@p) (let ((cb655@n (char->integer cb653@c))) (begin (cb64e@display-hex (quotient cb655@n '16)) (cb64e@display-hex (remainder cb655@n '16))))))) (string->list (car cb64f@ls))) (cb651@f (cdr cb64f@ls))) (void))) (cb649@extract))))))))) (set! cb6b9@cb588@library-file-path->cache-path cb588@library-file-path->cache-path) (set! cb58a@read-annotated read) (set! cb6ba@cb58a@read-annotated cb58a@read-annotated) (set! cb58c@annotation-stripped (lambda (cb659@x) (cb592@annotation-expression cb659@x))) (set! cb6bb@cb58c@annotation-stripped cb58c@annotation-stripped) (set! cb58e@annotation? (lambda (cb65b@x) (source-info cb65b@x))) (set! cb6bc@cb58e@annotation? cb58e@annotation?) (set! cb590@annotation-source (lambda (cb65d@x) (source-info cb65d@x))) (set! cb6bd@cb590@annotation-source cb590@annotation-source) (set! cb592@annotation-expression (lambda (cb65f@x) (if (pair? cb65f@x) (cons (car cb65f@x) (cdr cb65f@x)) (if (procedure? cb65f@x) (set-source-info! cb65f@x '#f) cb65f@x)))) (set! cb6be@cb592@annotation-expression cb592@annotation-expression) (set! cb594@scm->fasl (lambda (cb661@filename) (string-append (cb5a8@mosh-cache-dir) '"/" (cb588@library-file-path->cache-path cb661@filename) '".mosh-fasl"))) (set! cb6bf@cb594@scm->fasl cb594@scm->fasl) (set! cb596@fasl-save (lambda (cb663@filename cb664@obj) (call-with-port (open-file-output-port cb663@filename) (lambda (cb667@port) ((symbol-value 'fasl-write!) cb664@obj cb667@port))))) (set! cb6c0@cb596@fasl-save cb596@fasl-save) (set! cb598@fasl-load (lambda (cb669@filename) (call-with-port (open-file-input-port cb669@filename) (symbol-value 'fasl-read!)))) (set! cb6c1@cb598@fasl-load cb598@fasl-load) (set! cb59a@verbose? (symbol-value '%verbose)) (set! cb6c2@cb59a@verbose? cb59a@verbose?) (set! cb59c@serialize-library (lambda (cb66b@filename cb66c@obj) (begin (if cb59a@verbose? (format (current-error-port) '"serialize-library ~a\n..." cb66b@filename) (void)) (let ((cb66f@expanded2core (symbol-value 'expanded2core))) (let ((cb671@compile (symbol-value 'compile-w/o-halt))) (let ((cb673@code cb66c@obj)) (let ((cb675@pivot (cddddr (cddddr cb673@code)))) (let ((cb677@visit (cb671@compile (cb66f@expanded2core (car cb675@pivot))))) (begin (set-car! cb675@pivot cb677@visit) (let ((cb679@pivot (cdr cb675@pivot))) (let ((cb67b@invoke (cb671@compile (cb66f@expanded2core (car cb679@pivot))))) (set-car! cb679@pivot cb67b@invoke))))))))) (let ((cb67d@fasl-file (cb594@scm->fasl cb66b@filename))) (begin (if (file-exists? cb67d@fasl-file) (delete-file cb67d@fasl-file) (void)) ((call/cc (lambda (cb681@cb67f) (lambda () (with-exception-handler (lambda (cb683@c) ((call/cc (lambda (cb685@cb680) (cb681@cb67f (lambda () (if '#t (begin (if cb59a@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" cb66b@filename) (void)) (if (file-exists? cb67d@fasl-file) (delete-file cb67d@fasl-file) (void)) '#f) (cb685@cb680 (lambda () (raise-continuable cb683@c)))))))))) (lambda () (cb596@fasl-save cb67d@fasl-file cb66c@obj)))))))))))) (set! cb6c3@cb59c@serialize-library cb59c@serialize-library) (set! cb59e@load-serialized-library (lambda (cb687@filename cb688@obj) (and (cb5a8@mosh-cache-dir) (let ((cb68b@fasl-file (cb594@scm->fasl cb687@filename))) (if (and (file-exists? cb68b@fasl-file) ((symbol-value 'file-newer?) cb68b@fasl-file cb687@filename)) (let ((cb68d@expanded2core (symbol-value 'expanded2core))) (let ((cb68f@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((cb691@code (cb598@fasl-load cb68b@fasl-file))) (let ((cb693@pivot (cddddr (cddddr cb691@code)))) (let ((cb695@visit (car cb693@pivot))) (let ((cb697@visit-proc (lambda () (cb68f@eval-compiled-core cb695@visit)))) (begin (set-car! cb693@pivot cb697@visit-proc) (let ((cb699@pivot (cdr cb693@pivot))) (let ((cb69b@invoke (car cb699@pivot))) (begin (set-car! cb699@pivot (lambda () (cb68f@eval-compiled-core cb69b@invoke))) (apply cb688@obj cb691@code))))))))))) '#f))))) (set! cb6c4@cb59e@load-serialized-library cb59e@load-serialized-library) (set! cb5a0@make-record-printer (lambda (cb69d@name cb69e@printer) (lambda cb6a1@x (begin (display '"record printer") (for-each display cb6a1@x))))) (set! cb6c5@cb5a0@make-record-printer cb5a0@make-record-printer) (set! cb5a2@compile-core (lambda cb6a3@x (apply error 'comile-core '"not implementated" cb6a3@x))) (set! cb6c6@cb5a2@compile-core cb5a2@compile-core) (set! cb5a4@read-library-source-file (lambda (cb6a5@file-name) (with-input-from-file cb6a5@file-name cb58a@read-annotated))) (set! cb6c7@cb5a4@read-library-source-file cb5a4@read-library-source-file) (set! cb5a6@make-parameter (lambda cb6b5 (let ((cb6b6 (length cb6b5))) (if (= cb6b6 '1) (apply (lambda (cb6a7@x) (cb5a6@make-parameter cb6a7@x (lambda (cb6a9@x) cb6a9@x))) cb6b5) (if (= cb6b6 '2) (apply (lambda (cb6ab@x cb6ac@fender) (let ((cb6af@x (cb6ac@fender cb6ab@x))) (lambda cb6b3 (let ((cb6b4 (length cb6b3))) (if (= cb6b4 '0) (apply (lambda () cb6af@x) cb6b3) (if (= cb6b4 '1) (apply (lambda (cb6b1@v) (set! cb6af@x (cb6ac@fender cb6b1@v))) cb6b3) (error 'apply '"invalid arg count"))))))) cb6b5) (error 'apply '"invalid arg count")))))) (set! cb6c8@cb5a6@make-parameter cb5a6@make-parameter) (set! cb5a8@mosh-cache-dir (cb5a6@make-parameter '#f)) (set! cb6c9@cb5a8@mosh-cache-dir cb5a8@mosh-cache-dir) (set! cb63e@file-options-spec (lambda (cb6b7@x) cb6b7@x)) (set! cb6ca@cb63e@file-options-spec cb63e@file-options-spec) (void))
(begin (set! cb6d0@current-primitive-locations (unspecified)) (set! cb6d2@mutable? (unspecified)) (set! cb6d4@rewriter (unspecified)) (set! cb6d6@expanded->core (unspecified)) (set! cb6d8@compile-core-expr (unspecified)) (set! cb6da@pretty-print (unspecified)) (set! cb6dc@compile-core-expr-to-port (unspecified)) (set! cb6d0@current-primitive-locations (cb6c8@cb5a6@make-parameter (lambda (cb6dd@x) '#f) (lambda (cb6df@p) cb6df@p))) (set! cb71b@cb6d0@current-primitive-locations cb6d0@current-primitive-locations) (set! cb6d2@mutable? (lambda (cb6e1@x) (or (pair? cb6e1@x) (vector? cb6e1@x) (hashtable? cb6e1@x)))) (set! cb71c@cb6d2@mutable? cb6d2@mutable?) (set! cb6d4@rewriter (lambda (cb6e3@quote-hack?) (let ((cb6e6@f '#f)) (begin (set! cb6e6@f (lambda (cb6e7@x) (if (pair? cb6e7@x) (let ((cb6e9@t (car cb6e7@x))) (if (memv cb6e9@t '(quote)) (if (and cb6e3@quote-hack? (cb6d2@mutable? (cadr cb6e7@x))) (let ((cb6eb@g (gensym))) (begin (set-symbol-value! cb6eb@g (cadr cb6e7@x)) cb6eb@g)) cb6e7@x) (if (memv cb6e9@t '(case-lambda)) (cons 'case-lambda (map (lambda (cb6ed@x) (cons (car cb6ed@x) (map cb6e6@f (cdr cb6ed@x)))) (cdr cb6e7@x))) (if (memv cb6e9@t '(lambda)) (cons* 'lambda (cadr cb6e7@x) (map cb6e6@f (cddr cb6e7@x))) (if (memv cb6e9@t '(letrec)) (let ((cb6ef@bindings (cadr cb6e7@x)) (cb6f0@body* (cddr cb6e7@x))) (let ((cb6f3@lhs* (map car cb6ef@bindings)) (cb6f4@rhs* (map cadr cb6ef@bindings))) (cons* 'letrec (map list cb6f3@lhs* (map cb6e6@f cb6f4@rhs*)) (map cb6e6@f cb6f0@body*)))) (if (memv cb6e9@t '(letrec*)) (let ((cb6f7@bindings (cadr cb6e7@x)) (cb6f8@body* (cddr cb6e7@x))) (let ((cb6fb@lhs* (map car cb6f7@bindings)) (cb6fc@rhs* (map cadr cb6f7@bindings))) (cons* 'letrec* (map list cb6fb@lhs* (map cb6e6@f cb6fc@rhs*)) (map cb6e6@f cb6f8@body*)))) (if (memv cb6e9@t '(library-letrec*)) (let ((cb6ff@name (cadr cb6e7@x)) (cb700@x (cdr cb6e7@x))) (let ((cb703@bindings (cadr cb700@x)) (cb704@body* (cddr cb700@x))) (let ((cb707@lhs* (map car cb703@bindings)) (cb708@lhs** (map cadr cb703@bindings)) (cb709@rhs* (map caddr cb703@bindings))) (cons* 'library-letrec* cb6ff@name (map list cb707@lhs* cb708@lhs** (map cb6e6@f cb709@rhs*)) (map cb6e6@f cb704@body*))))) (if (memv cb6e9@t '(begin)) (cons 'begin (map cb6e6@f (cdr cb6e7@x))) (if (memv cb6e9@t '(set!)) (list 'set! (cadr cb6e7@x) (cb6e6@f (caddr cb6e7@x))) (if (memv cb6e9@t '(primitive)) (let ((cb70d@op (cadr cb6e7@x))) (let ((cb70f@t ((cb6d0@current-primitive-locations) cb70d@op))) (if cb70f@t ((lambda (cb711@loc) cb711@loc) cb70f@t) cb70d@op))) (if (memv cb6e9@t '(define)) cb6e7@x (if (list? cb6e7@x) (map cb6e6@f cb6e7@x) (error 'rewrite '"invalid form ~s ~s" cb6e7@x (list? cb6e7@x)))))))))))))) cb6e7@x))) cb6e6@f)))) (set! cb71d@cb6d4@rewriter cb6d4@rewriter) (set! cb6d6@expanded->core (lambda (cb713@x) ((cb6d4@rewriter '#f) cb713@x))) (set! cb71e@cb6d6@expanded->core cb6d6@expanded->core) (set! cb6d8@compile-core-expr (lambda (cb715@x) ((cb6d4@rewriter '#f) cb715@x))) (set! cb71f@cb6d8@compile-core-expr cb6d8@compile-core-expr) (set! cb6da@pretty-print write) (set! cb720@cb6da@pretty-print cb6da@pretty-print) (set! cb6dc@compile-core-expr-to-port (lambda (cb717@x cb718@p) (cb6da@pretty-print ((cb6d4@rewriter '#f) cb717@x) cb718@p))) (set! cb721@cb6dc@compile-core-expr-to-port cb6dc@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! cb770@make-collection (unspecified)) (set! cb772@current-library-collection (unspecified)) (set! cb774@rp (unspecified)) (set! cb77e@library? (unspecified)) (set! cb780@library-id (unspecified)) (set! cb782@set-library-id! (unspecified)) (set! cb784@library-name (unspecified)) (set! cb786@set-library-name! (unspecified)) (set! cb788@library-version (unspecified)) (set! cb78a@set-library-version! (unspecified)) (set! cb78c@library-imp* (unspecified)) (set! cb78e@set-library-imp*! (unspecified)) (set! cb790@library-vis* (unspecified)) (set! cb792@set-library-vis*! (unspecified)) (set! cb794@library-inv* (unspecified)) (set! cb796@set-library-inv*! (unspecified)) (set! cb798@library-subst (unspecified)) (set! cb79a@set-library-subst! (unspecified)) (set! cb79c@library-env (unspecified)) (set! cb79e@set-library-env! (unspecified)) (set! cb7a0@library-visit-state (unspecified)) (set! cb7a2@set-library-visit-state! (unspecified)) (set! cb7a4@library-invoke-state (unspecified)) (set! cb7a6@set-library-invoke-state! (unspecified)) (set! cb7a8@library-visit-code (unspecified)) (set! cb7aa@set-library-visit-code! (unspecified)) (set! cb7ac@library-invoke-code (unspecified)) (set! cb7ae@set-library-invoke-code! (unspecified)) (set! cb7b0@library-visible? (unspecified)) (set! cb7b2@set-library-visible?! (unspecified)) (set! cb7b4@library-source-file-name (unspecified)) (set! cb7b6@set-library-source-file-name! (unspecified)) (set! cb7b8@dummy (unspecified)) (set! cb7ba@find-dependencies (unspecified)) (set! cb7bc@find-library-by (unspecified)) (set! cb7be@library-path (unspecified)) (set! cb7c0@library-extensions (unspecified)) (set! cb7c2@library-name->file-name (unspecified)) (set! cb7c4@file-locator (unspecified)) (set! cb7c6@serialize-all (unspecified)) (set! cb7c8@current-precompiled-library-loader (unspecified)) (set! cb7ca@try-load-from-file (unspecified)) (set! cb7cc@library-loader (unspecified)) (set! cb7ce@current-library-expander (unspecified)) (set! cb7d0@external-pending-libraries (unspecified)) (set! cb7d2@find-external-library (unspecified)) (set! cb7d4@find-library-by-name (unspecified)) (set! cb7d6@library-exists? (unspecified)) (set! cb7d8@find-library-by-spec/die (unspecified)) (set! cb7da@label->binding-table (unspecified)) (set! cb7dc@install-library-record (unspecified)) (set! cb7de@install-library (unspecified)) (set! cb7e0@imported-label->binding (unspecified)) (set! cb7e2@invoke-library (unspecified)) (set! cb7e4@visit-library (unspecified)) (set! cb7e6@invoke-library-by-spec (unspecified)) (set! cb7e8@installed-libraries (unspecified)) (set! cb7ea@library-spec (unspecified)) (set! cb770@make-collection (lambda () (let ((cb7eb@set '())) (let ((cb7ee@set-cons '#f)) (begin (set! cb7ee@set-cons (lambda (cb7f3@x cb7f4@ls) (if (memq cb7f3@x cb7f4@ls) cb7f4@ls (cons cb7f3@x cb7f4@ls)))) (lambda cb7f1 (let ((cb7f2 (length cb7f1))) (if (= cb7f2 '0) (apply (lambda () cb7eb@set) cb7f1) (if (= cb7f2 '1) (apply (lambda (cb7ef@x) (set! cb7eb@set (cb7ee@set-cons cb7ef@x cb7eb@set))) cb7f1) (error 'apply '"invalid arg count")))))))))) (set! cb95f@cb770@make-collection cb770@make-collection) (set! cb772@current-library-collection (cb6c8@cb5a6@make-parameter (cb770@make-collection) (lambda (cb7f7@x) (begin (if (not (procedure? cb7f7@x)) (assertion-violation 'current-library-collection '"not a procedure" cb7f7@x) (void)) cb7f7@x)))) (set! cb960@cb772@current-library-collection cb772@current-library-collection) (set! cb774@rp (cb6c5@cb5a0@make-record-printer 'library (lambda (cb7f9@x cb7fa@p cb7fb@wr) (begin (if (not (cb77e@library? cb7f9@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (cb788@library-version cb7f9@x)) (cb784@library-name cb7f9@x) (append (cb784@library-name cb7f9@x) (list (cb788@library-version cb7f9@x))))) cb7fa@p))))) (set! cb961@cb774@rp cb774@rp) (set! cb77e@library? (lambda (cb7ff@x) (and (simple-struct? cb7ff@x) (eq? (simple-struct-name cb7ff@x) 'library)))) (set! cb962@cb77e@library? cb77e@library?) (set! cb780@library-id (lambda (cb801@x) (simple-struct-ref cb801@x '0))) (set! cb963@cb780@library-id cb780@library-id) (set! cb782@set-library-id! (lambda (cb803@x cb804@val) (simple-struct-set! cb803@x '0 cb804@val))) (set! cb964@cb782@set-library-id! cb782@set-library-id!) (set! cb784@library-name (lambda (cb807@x) (simple-struct-ref cb807@x '1))) (set! cb965@cb784@library-name cb784@library-name) (set! cb786@set-library-name! (lambda (cb809@x cb80a@val) (simple-struct-set! cb809@x '1 cb80a@val))) (set! cb966@cb786@set-library-name! cb786@set-library-name!) (set! cb788@library-version (lambda (cb80d@x) (simple-struct-ref cb80d@x '2))) (set! cb967@cb788@library-version cb788@library-version) (set! cb78a@set-library-version! (lambda (cb80f@x cb810@val) (simple-struct-set! cb80f@x '2 cb810@val))) (set! cb968@cb78a@set-library-version! cb78a@set-library-version!) (set! cb78c@library-imp* (lambda (cb813@x) (simple-struct-ref cb813@x '3))) (set! cb969@cb78c@library-imp* cb78c@library-imp*) (set! cb78e@set-library-imp*! (lambda (cb815@x cb816@val) (simple-struct-set! cb815@x '3 cb816@val))) (set! cb96a@cb78e@set-library-imp*! cb78e@set-library-imp*!) (set! cb790@library-vis* (lambda (cb819@x) (simple-struct-ref cb819@x '4))) (set! cb96b@cb790@library-vis* cb790@library-vis*) (set! cb792@set-library-vis*! (lambda (cb81b@x cb81c@val) (simple-struct-set! cb81b@x '4 cb81c@val))) (set! cb96c@cb792@set-library-vis*! cb792@set-library-vis*!) (set! cb794@library-inv* (lambda (cb81f@x) (simple-struct-ref cb81f@x '5))) (set! cb96d@cb794@library-inv* cb794@library-inv*) (set! cb796@set-library-inv*! (lambda (cb821@x cb822@val) (simple-struct-set! cb821@x '5 cb822@val))) (set! cb96e@cb796@set-library-inv*! cb796@set-library-inv*!) (set! cb798@library-subst (lambda (cb825@x) (simple-struct-ref cb825@x '6))) (set! cb96f@cb798@library-subst cb798@library-subst) (set! cb79a@set-library-subst! (lambda (cb827@x cb828@val) (simple-struct-set! cb827@x '6 cb828@val))) (set! cb970@cb79a@set-library-subst! cb79a@set-library-subst!) (set! cb79c@library-env (lambda (cb82b@x) (simple-struct-ref cb82b@x '7))) (set! cb971@cb79c@library-env cb79c@library-env) (set! cb79e@set-library-env! (lambda (cb82d@x cb82e@val) (simple-struct-set! cb82d@x '7 cb82e@val))) (set! cb972@cb79e@set-library-env! cb79e@set-library-env!) (set! cb7a0@library-visit-state (lambda (cb831@x) (simple-struct-ref cb831@x '8))) (set! cb973@cb7a0@library-visit-state cb7a0@library-visit-state) (set! cb7a2@set-library-visit-state! (lambda (cb833@x cb834@val) (simple-struct-set! cb833@x '8 cb834@val))) (set! cb974@cb7a2@set-library-visit-state! cb7a2@set-library-visit-state!) (set! cb7a4@library-invoke-state (lambda (cb837@x) (simple-struct-ref cb837@x '9))) (set! cb975@cb7a4@library-invoke-state cb7a4@library-invoke-state) (set! cb7a6@set-library-invoke-state! (lambda (cb839@x cb83a@val) (simple-struct-set! cb839@x '9 cb83a@val))) (set! cb976@cb7a6@set-library-invoke-state! cb7a6@set-library-invoke-state!) (set! cb7a8@library-visit-code (lambda (cb83d@x) (simple-struct-ref cb83d@x '10))) (set! cb977@cb7a8@library-visit-code cb7a8@library-visit-code) (set! cb7aa@set-library-visit-code! (lambda (cb83f@x cb840@val) (simple-struct-set! cb83f@x '10 cb840@val))) (set! cb978@cb7aa@set-library-visit-code! cb7aa@set-library-visit-code!) (set! cb7ac@library-invoke-code (lambda (cb843@x) (simple-struct-ref cb843@x '11))) (set! cb979@cb7ac@library-invoke-code cb7ac@library-invoke-code) (set! cb7ae@set-library-invoke-code! (lambda (cb845@x cb846@val) (simple-struct-set! cb845@x '11 cb846@val))) (set! cb97a@cb7ae@set-library-invoke-code! cb7ae@set-library-invoke-code!) (set! cb7b0@library-visible? (lambda (cb849@x) (simple-struct-ref cb849@x '12))) (set! cb97b@cb7b0@library-visible? cb7b0@library-visible?) (set! cb7b2@set-library-visible?! (lambda (cb84b@x cb84c@val) (simple-struct-set! cb84b@x '12 cb84c@val))) (set! cb97c@cb7b2@set-library-visible?! cb7b2@set-library-visible?!) (set! cb7b4@library-source-file-name (lambda (cb84f@x) (simple-struct-ref cb84f@x '13))) (set! cb97d@cb7b4@library-source-file-name cb7b4@library-source-file-name) (set! cb7b6@set-library-source-file-name! (lambda (cb851@x cb852@val) (simple-struct-set! cb851@x '13 cb852@val))) (set! cb97e@cb7b6@set-library-source-file-name! cb7b6@set-library-source-file-name!) (set! cb7b8@dummy '3) (set! cb97f@cb7b8@dummy cb7b8@dummy) (set! cb7ba@find-dependencies (lambda (cb855@ls) (if (null? cb855@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! cb980@cb7ba@find-dependencies cb7ba@find-dependencies) (set! cb7bc@find-library-by (lambda (cb857@pred) (let cb85b@f ((cb859@ls ((cb772@current-library-collection)))) (if (null? cb859@ls) '#f (if (cb857@pred (car cb859@ls)) (car cb859@ls) (cb85b@f (cdr cb859@ls))))))) (set! cb981@cb7bc@find-library-by cb7bc@find-library-by) (set! cb7be@library-path (cb6c8@cb5a6@make-parameter '(".") (lambda (cb85d@x) (if (and (list? cb85d@x) (for-all string? cb85d@x)) (map (lambda (cb85f@x) cb85f@x) cb85d@x) (assertion-violation 'library-path '"not a list of strings" cb85d@x))))) (set! cb982@cb7be@library-path cb7be@library-path) (set! cb7c0@library-extensions (cb6c8@cb5a6@make-parameter '(".sls" ".ss" ".scm") (lambda (cb861@x) (if (and (list? cb861@x) (for-all string? cb861@x)) (map (lambda (cb863@x) cb863@x) cb861@x) (assertion-violation 'library-extensions '"not a list of strings" cb861@x))))) (set! cb983@cb7c0@library-extensions cb7c0@library-extensions) (set! cb7c2@library-name->file-name (lambda (cb865@x) (call-with-values (lambda () (open-string-output-port)) (lambda (cb86b@cb868 cb86c@cb86a) (let ((cb86f@extract cb86c@cb86a) (cb870@p cb86b@cb868)) (let ((cb874@display-hex '#f)) (begin (set! cb874@display-hex (lambda (cb87d@n) (if (<= '0 cb87d@n '9) (display cb87d@n cb870@p) (display (integer->char (+ (char->integer '#\a) (- cb87d@n '10))) cb870@p)))) (begin (let cb877@f ((cb875@ls cb865@x)) (if (not (null? cb875@ls)) (begin (display '"/" cb870@p) (for-each (lambda (cb879@c) (if (or (char<=? '#\a cb879@c '#\z) (char<=? '#\A cb879@c '#\Z) (char<=? '#\0 cb879@c '#\9) (memv cb879@c '(#\- #\. #\_ #\~))) (display cb879@c cb870@p) (begin (display '"%" cb870@p) (let ((cb87b@n (char->integer cb879@c))) (begin (cb874@display-hex (quotient cb87b@n '16)) (cb874@display-hex (remainder cb87b@n '16))))))) (string->list (symbol->string (car cb875@ls)))) (cb877@f (cdr cb875@ls))) (void))) (cb86f@extract))))))))) (set! cb984@cb7c2@library-name->file-name cb7c2@library-name->file-name) (set! cb7c4@file-locator (cb6c8@cb5a6@make-parameter (lambda (cb87f@x) (let ((cb881@str (cb7c2@library-name->file-name cb87f@x))) (let cb889@f ((cb883@ls (cb7be@library-path)) (cb884@exts (cb7c0@library-extensions)) (cb885@failed-list '())) (if (null? cb883@ls) (let ((cb893@cb88e '#f) (cb895@cb890 '#f) (cb897@cb88f '#f) (cb89a@cb88d '#f) (cb89c@make-library-resolution-condition '#f) (cb89e@cb88b '#f) (cb8a0@cb88c '#f) (cb8a2@library-resolution-condition? '#f) (cb8a4@condition-library '#f) (cb8a6@condition-files '#f)) (begin (set! cb893@cb88e (make-record-type-descriptor '&library-resolution cb2b9a@cb28e1@&condition-rtd 'cb891 '#f '#f '#((immutable library) (immutable files)))) (set! cb895@cb890 '#f) (set! cb897@cb88f (make-record-constructor-descriptor cb893@cb88e cb2b9b@cb28e3@&condition-rcd cb895@cb890)) (set! cb89a@cb88d (record-predicate cb893@cb88e)) (set! cb89c@make-library-resolution-condition (record-constructor cb897@cb88f)) (set! cb89e@cb88b (record-accessor cb893@cb88e '0)) (set! cb8a0@cb88c (record-accessor cb893@cb88e '1)) (set! cb8a2@library-resolution-condition? (condition-predicate cb893@cb88e)) (set! cb8a4@condition-library (condition-accessor cb893@cb88e cb89e@cb88b)) (set! cb8a6@condition-files (condition-accessor cb893@cb88e cb8a0@cb88c)) (raise (condition (cb2bba@cb297b@make-error) (cb2bdc@cb29d7@make-who-condition 'expander) (cb2ba0@cb2938@make-message-condition '"cannot locate library in library-path") (cb89c@make-library-resolution-condition cb87f@x (reverse cb885@failed-list)))))) (if (null? cb884@exts) (cb889@f (cdr cb883@ls) (cb7c0@library-extensions) cb885@failed-list) (let ((cb8a7@name (string-append (car cb883@ls) cb881@str (car cb884@exts)))) (if (file-exists? cb8a7@name) cb8a7@name (cb889@f cb883@ls (cdr cb884@exts) (cons cb8a7@name cb885@failed-list))))))))) (lambda (cb8a9@f) (if (procedure? cb8a9@f) cb8a9@f (assertion-violation 'file-locator '"not a procedure" cb8a9@f))))) (set! cb985@cb7c4@file-locator cb7c4@file-locator) (set! cb7c6@serialize-all (lambda (cb8ab@serialize cb8ac@compile) (let ((cb8b0@library-desc '#f)) (begin (set! cb8b0@library-desc (lambda (cb8b3@x) (list (cb780@library-id cb8b3@x) (cb784@library-name cb8b3@x)))) (for-each (lambda (cb8b1@x) (if (cb7b4@library-source-file-name cb8b1@x) (cb8ab@serialize (cb7b4@library-source-file-name cb8b1@x) (list (cb780@library-id cb8b1@x) (cb784@library-name cb8b1@x) (cb788@library-version cb8b1@x) (map cb8b0@library-desc (cb78c@library-imp* cb8b1@x)) (map cb8b0@library-desc (cb790@library-vis* cb8b1@x)) (map cb8b0@library-desc (cb794@library-inv* cb8b1@x)) (cb798@library-subst cb8b1@x) (cb79c@library-env cb8b1@x) (cb8ac@compile (cb7a8@library-visit-code cb8b1@x)) (cb8ac@compile (cb7ac@library-invoke-code cb8b1@x)) (cb7b0@library-visible? cb8b1@x))) (void))) ((cb772@current-library-collection))))))) (set! cb986@cb7c6@serialize-all cb7c6@serialize-all) (set! cb7c8@current-precompiled-library-loader (cb6c8@cb5a6@make-parameter (lambda (cb8b5@filename cb8b6@sk) '#f))) (set! cb987@cb7c8@current-precompiled-library-loader cb7c8@current-precompiled-library-loader) (set! cb7ca@try-load-from-file (lambda (cb8b9@filename) ((cb7c8@current-precompiled-library-loader) cb8b9@filename (lambda cb8df (let ((cb8e0 (length cb8df))) (if (= cb8e0 '11) (apply (lambda (cb8bb@id cb8bc@name cb8bd@ver cb8be@imp* cb8bf@vis* cb8c0@inv* cb8c1@exp-subst cb8c2@exp-env cb8c3@visit-proc cb8c4@invoke-proc cb8c5@visible?) (let cb8d3@f ((cb8d1@deps (append cb8be@imp* cb8bf@vis* cb8c0@inv*))) (if (null? cb8d1@deps) (begin (cb7de@install-library cb8bb@id cb8bc@name cb8bd@ver cb8be@imp* cb8bf@vis* cb8c0@inv* cb8c1@exp-subst cb8c2@exp-env cb8c3@visit-proc cb8c4@invoke-proc '#f '#f cb8c5@visible? '#f) '#t) (let ((cb8d5@d (car cb8d1@deps))) (let ((cb8d7@label (car cb8d5@d)) (cb8d8@dname (cadr cb8d5@d))) (let ((cb8db@l (cb7d4@find-library-by-name cb8d8@dname))) (if (and (cb77e@library? cb8db@l) (eq? cb8d7@label (cb780@library-id cb8db@l))) (cb8d3@f (cdr cb8d1@deps)) (begin (if cb6c2@cb59a@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" cb8bc@name cb8d8@dname cb8b9@filename cb8db@l cb8d7@label (cb780@library-id cb8db@l)) (void)) '#f)))))))) cb8df) (if (>= cb8e0 '0) (apply (lambda cb8dd@others '#f) cb8df) (error 'apply '"invalid arg count")))))))) (set! cb988@cb7ca@try-load-from-file cb7ca@try-load-from-file) (set! cb7cc@library-loader (cb6c8@cb5a6@make-parameter (lambda (cb8e1@x) (let ((cb8e3@file-name ((cb7c4@file-locator) cb8e1@x))) (if (not cb8e3@file-name) (assertion-violation '#f '"cannot file library" cb8e1@x) (or (cb7ca@try-load-from-file cb8e3@file-name) ((cb7ce@current-library-expander) (cb6c7@cb5a4@read-library-source-file cb8e3@file-name) cb8e3@file-name (lambda (cb8e5@name) (if (not (fast-equal? cb8e5@name cb8e1@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (cb8eb@cb8e8 cb8ec@cb8ea) (let ((cb8ef@e cb8ec@cb8ea) (cb8f0@p cb8eb@cb8e8)) (begin (display '"expected to find library " cb8f0@p) (write cb8e1@x cb8f0@p) (display '" in file " cb8f0@p) (display cb8e3@file-name cb8f0@p) (display '", found " cb8f0@p) (write cb8e5@name cb8f0@p) (display '" instead" cb8f0@p) (cb8ef@e)))))) (void)))))))) (lambda (cb8f3@f) (if (procedure? cb8f3@f) cb8f3@f (assertion-violation 'library-locator '"not a procedure" cb8f3@f))))) (set! cb989@cb7cc@library-loader cb7cc@library-loader) (set! cb7ce@current-library-expander (cb6c8@cb5a6@make-parameter (lambda (cb8f5@x) (assertion-violation 'library-expander '"not initialized")) (lambda (cb8f7@f) (if (procedure? cb8f7@f) cb8f7@f (assertion-violation 'library-expander '"not a procedure" cb8f7@f))))) (set! cb98a@cb7ce@current-library-expander cb7ce@current-library-expander) (set! cb7d0@external-pending-libraries (cb6c8@cb5a6@make-parameter '())) (set! cb98b@cb7d0@external-pending-libraries cb7d0@external-pending-libraries) (set! cb7d2@find-external-library (lambda (cb8f9@name) (begin (if (member cb8f9@name (cb7d0@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" cb8f9@name) (void)) (let ((cb8ff@cb8fc cb7d0@external-pending-libraries) (cb900@cb8fe (cons cb8f9@name (cb7d0@external-pending-libraries)))) (let ((cb903@swap (lambda () (let ((cb905@t (cb8ff@cb8fc))) (begin (cb8ff@cb8fc cb900@cb8fe) (set! cb900@cb8fe cb905@t)))))) (dynamic-wind cb903@swap (lambda () (begin ((cb7cc@library-loader) cb8f9@name) (or (cb7bc@find-library-by (lambda (cb907@x) (fast-equal? (cb784@library-name cb907@x) cb8f9@name))) (assertion-violation '#f '"handling external library did not yield the correct library" cb8f9@name)))) cb903@swap)))))) (set! cb98c@cb7d2@find-external-library cb7d2@find-external-library) (set! cb7d4@find-library-by-name (lambda (cb909@name) (or (cb7bc@find-library-by (lambda (cb90b@x) (fast-equal? (cb784@library-name cb90b@x) cb909@name))) (cb7d2@find-external-library cb909@name)))) (set! cb98d@cb7d4@find-library-by-name cb7d4@find-library-by-name) (set! cb7d6@library-exists? (lambda (cb90d@name) (and (cb7bc@find-library-by (lambda (cb90f@x) (fast-equal? (cb784@library-name cb90f@x) cb90d@name))) '#t))) (set! cb98e@cb7d6@library-exists? cb7d6@library-exists?) (set! cb7d8@find-library-by-spec/die (lambda (cb911@spec) (let ((cb913@id (car cb911@spec))) (or (cb7bc@find-library-by (lambda (cb915@x) (eq? cb913@id (cb780@library-id cb915@x)))) (assertion-violation '#f '"cannot find library with required spec" cb911@spec))))) (set! cb98f@cb7d8@find-library-by-spec/die cb7d8@find-library-by-spec/die) (set! cb7da@label->binding-table (make-eq-hashtable)) (set! cb990@cb7da@label->binding-table cb7da@label->binding-table) (set! cb7dc@install-library-record (lambda (cb917@lib) (begin (let ((cb919@exp-env (cb79c@library-env cb917@lib))) (for-each (lambda (cb91b@x) (let ((cb91d@label (car cb91b@x)) (cb91e@binding (cdr cb91b@x))) (let ((cb921@binding (let ((cb923@t (car cb91e@binding))) (if (memv cb923@t '(global)) (cons 'global (cons cb917@lib (cdr cb91e@binding))) (if (memv cb923@t '(global-macro)) (cons 'global-macro (cons cb917@lib (cdr cb91e@binding))) (if (memv cb923@t '(global-macro!)) (cons 'global-macro! (cons cb917@lib (cdr cb91e@binding))) cb91e@binding)))))) (begin (if (hashtable-ref cb7da@label->binding-table cb91d@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" cb91d@label (hashtable-ref cb7da@label->binding-table cb91d@label '#f) cb921@binding) (exit)) (void)) (hashtable-set! cb7da@label->binding-table cb91d@label cb921@binding))))) cb919@exp-env)) ((cb772@current-library-collection) cb917@lib)))) (set! cb991@cb7dc@install-library-record cb7dc@install-library-record) (set! cb7de@install-library (lambda (cb925@id cb926@name cb927@ver cb928@imp* cb929@vis* cb92a@inv* cb92b@exp-subst cb92c@exp-env cb92d@visit-proc cb92e@invoke-proc cb92f@visit-code cb930@invoke-code cb931@visible? cb932@source-file-name) (let ((cb941@imp-lib* (map cb7d8@find-library-by-spec/die cb928@imp*)) (cb942@vis-lib* (map cb7d8@find-library-by-spec/die cb929@vis*)) (cb943@inv-lib* (map cb7d8@find-library-by-spec/die cb92a@inv*))) (begin (if (not (and (symbol? cb925@id) (list? cb926@name) (list? cb927@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" cb925@id cb926@name cb927@ver) (void)) (if (cb7d6@library-exists? cb926@name) (assertion-violation 'install-library '"library is already installed" cb926@name) (void)) (let ((cb947@lib (make-simple-struct 'library '15 (list cb925@id cb926@name cb927@ver cb941@imp-lib* cb942@vis-lib* cb943@inv-lib* cb92b@exp-subst cb92c@exp-env cb92d@visit-proc cb92e@invoke-proc cb92f@visit-code cb930@invoke-code cb931@visible? cb932@source-file-name)))) (cb7dc@install-library-record cb947@lib)))))) (set! cb992@cb7de@install-library cb7de@install-library) (set! cb7e0@imported-label->binding (lambda (cb949@lab) (hashtable-ref cb7da@label->binding-table cb949@lab '#f))) (set! cb993@cb7e0@imported-label->binding cb7e0@imported-label->binding) (set! cb7e2@invoke-library (lambda (cb94b@lib) (let ((cb94d@invoke (cb7a4@library-invoke-state cb94b@lib))) (if (procedure? cb94d@invoke) (begin (cb7a6@set-library-invoke-state! cb94b@lib (lambda () (assertion-violation 'invoke '"circularity detected" cb94b@lib))) (for-each cb7e2@invoke-library (cb794@library-inv* cb94b@lib)) (cb7a6@set-library-invoke-state! cb94b@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" cb94b@lib))) (cb94d@invoke) (cb7a6@set-library-invoke-state! cb94b@lib '#t)) (void))))) (set! cb994@cb7e2@invoke-library cb7e2@invoke-library) (set! cb7e4@visit-library (lambda (cb94f@lib) (let ((cb951@visit (cb7a0@library-visit-state cb94f@lib))) (if (procedure? cb951@visit) (begin (cb7a2@set-library-visit-state! cb94f@lib (lambda () (assertion-violation 'visit '"circularity detected" cb94f@lib))) (for-each cb7e2@invoke-library (cb790@library-vis* cb94f@lib)) (cb7a2@set-library-visit-state! cb94f@lib (lambda () (assertion-violation 'invoke '"first visit did not return" cb94f@lib))) (cb951@visit) (cb7a2@set-library-visit-state! cb94f@lib '#t)) (void))))) (set! cb995@cb7e4@visit-library cb7e4@visit-library) (set! cb7e6@invoke-library-by-spec (lambda (cb953@spec) (cb7e2@invoke-library (cb7d8@find-library-by-spec/die cb953@spec)))) (set! cb996@cb7e6@invoke-library-by-spec cb7e6@invoke-library-by-spec) (set! cb7e8@installed-libraries (lambda cb95b (let ((cb95c (length cb95b))) (if (= cb95c '1) (apply (lambda (cb955@all?) (let cb959@f ((cb957@ls ((cb772@current-library-collection)))) (if (null? cb957@ls) '() (if (or cb955@all? (cb7b0@library-visible? (car cb957@ls))) (cons (car cb957@ls) (cb959@f (cdr cb957@ls))) (cb959@f (cdr cb957@ls)))))) cb95b) (if (= cb95c '0) (apply (lambda () (cb7e8@installed-libraries '#f)) cb95b) (error 'apply '"invalid arg count")))))) (set! cb997@cb7e8@installed-libraries cb7e8@installed-libraries) (set! cb7ea@library-spec (lambda (cb95d@x) (begin (if (not (cb77e@library? cb95d@x)) (assertion-violation 'library-spec '"not a library" cb95d@x) (void)) (list (cb780@library-id cb95d@x) (cb784@library-name cb95d@x) (cb788@library-version cb95d@x))))) (set! cb998@cb7ea@library-spec cb7ea@library-spec) (void))
(begin (set! cb99c@build-global-define (unspecified)) (set! cba0d@build-lambda (unspecified)) (set! cba0f@build-case-lambda (unspecified)) (set! cba3d@build-sequence (unspecified)) (set! cba3f@build-void (unspecified)) (set! cba41@build-letrec (unspecified)) (set! cba43@build-let (unspecified)) (set! cba45@build-named-let (unspecified)) (set! cba47@build-letrec* (unspecified)) (set! cba49@build-library-letrec* (unspecified)) (set! cba4b@build-receive (unspecified)) (set! cb99c@build-global-define (lambda (cba4c@x) (cba3f@build-void))) (set! cbae0@cb99c@build-global-define cb99c@build-global-define) (set! cba0d@build-lambda (lambda (cba4e@ae cba4f@vars cba50@exp) (list 'lambda cba4f@vars cba50@exp))) (set! cbae1@cba0d@build-lambda cba0d@build-lambda) (set! cba0f@build-case-lambda (lambda (cba54@ae cba55@vars* cba56@exp*) (let ((cba5b@build-error '#f) (cba5d@build-pred '#f) (cba5f@build-apply '#f) (cba61@expand-case-lambda '#f)) (begin (set! cba5b@build-error (lambda (cba92@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! cba5d@build-pred (lambda (cba7a@ae cba7b@n cba7c@vars) (call-with-values (lambda () (let cba88@f ((cba84@vars cba7c@vars) (cba85@count '0)) (if (pair? cba84@vars) (cba88@f (cdr cba84@vars) (+ cba85@count '1)) (if (null? cba84@vars) (values cba85@count '=) (values cba85@count '>=))))) (lambda (cba8a@cba81 cba8b@cba83) (let ((cba8e@pred cba8b@cba83) (cba8f@count cba8a@cba81)) (list (list 'primitive cba8e@pred) cba7b@n (list 'quote cba8f@count))))))) (set! cba5f@build-apply (lambda (cba72@ae cba73@g cba74@vars cba75@exp) (list '(primitive apply) (cba0d@build-lambda cba72@ae cba74@vars cba75@exp) cba73@g))) (set! cba61@expand-case-lambda (lambda (cba62@ae cba63@vars cba64@exp*) (let ((cba68@g (gensym)) (cba69@n (gensym))) (list 'lambda cba68@g (cba43@build-let cba62@ae (list cba69@n) (list (list '(primitive length) cba68@g)) (let cba70@f ((cba6c@vars* cba55@vars*) (cba6d@exp* cba64@exp*)) (if (null? cba6c@vars*) (cba5b@build-error cba62@ae) (list 'if (cba5d@build-pred cba62@ae cba69@n (car cba6c@vars*)) (cba5f@build-apply cba62@ae cba68@g (car cba6c@vars*) (car cba6d@exp*)) (cba70@f (cdr cba6c@vars*) (cdr cba6d@exp*)))))))))) (if (= (length cba56@exp*) '1) (cba0d@build-lambda cba54@ae (car cba55@vars*) (car cba56@exp*)) (cba61@expand-case-lambda cba54@ae cba55@vars* cba56@exp*)))))) (set! cbae2@cba0f@build-case-lambda cba0f@build-case-lambda) (set! cba3d@build-sequence (lambda (cba94@ae cba95@exps) (let cba9a@loop ((cba98@exps cba95@exps)) (if (null? (cdr cba98@exps)) (car cba98@exps) (if (equal? (car cba98@exps) (cba3f@build-void)) (cba9a@loop (cdr cba98@exps)) (cons 'begin cba98@exps)))))) (set! cbae3@cba3d@build-sequence cba3d@build-sequence) (set! cba3f@build-void (lambda () '((primitive void)))) (set! cbae4@cba3f@build-void cba3f@build-void) (set! cba41@build-letrec (lambda (cba9c@ae cba9d@vars cba9e@val-exps cba9f@body-exp) (if (null? cba9d@vars) cba9f@body-exp (list 'letrec (map list cba9d@vars cba9e@val-exps) cba9f@body-exp)))) (set! cbae5@cba41@build-letrec cba41@build-letrec) (set! cba43@build-let (lambda (cbaa4@ae cbaa5@vars cbaa6@val-exps cbaa7@body-exp) (if (null? cbaa5@vars) cbaa7@body-exp (list 'let (map list cbaa5@vars cbaa6@val-exps) cbaa7@body-exp)))) (set! cbae6@cba43@build-let cba43@build-let) (set! cba45@build-named-let (lambda (cbaac@ae cbaad@name cbaae@vars cbaaf@val-exps cbab0@body-exp) (list 'let cbaad@name (map list cbaae@vars cbaaf@val-exps) cbab0@body-exp))) (set! cbae7@cba45@build-named-let cba45@build-named-let) (set! cba47@build-letrec* (lambda (cbab6@ae cbab7@vars cbab8@val-exps cbab9@body-exp) (if (null? cbab7@vars) cbab9@body-exp (cba43@build-let cbab6@ae cbab7@vars (map (lambda (cbabe@x) (list 'quote '#f)) cbab7@vars) (cba3d@build-sequence cbab6@ae (append (map (lambda (cbac0@lhs cbac1@rhs) (list 'set! cbac0@lhs cbac1@rhs)) cbab7@vars cbab8@val-exps) (list cbab9@body-exp))))))) (set! cbae8@cba47@build-letrec* cba47@build-letrec*) (set! cba49@build-library-letrec* (lambda (cbac4@ae cbac5@name cbac6@vars cbac7@locs cbac8@val-exps cbac9@body-exp) (cons 'begin (append (map (lambda (cbad0@var) (cons 'set! (cons cbad0@var '((unspecified))))) cbac6@vars) (append (apply append (map (lambda (cbad2@var cbad3@loc cbad4@val-exp) (list (list 'set! cbad2@var cbad4@val-exp) (list 'set! cbad3@loc cbad2@var))) cbac6@vars cbac7@locs cbac8@val-exps)) (list cbac9@body-exp)))))) (set! cbae9@cba49@build-library-letrec* cba49@build-library-letrec*) (set! cba4b@build-receive (lambda (cbad8@ae cbad9@vars cbada@producer cbadb@body*) (begin (display '"************** in ") (cons 'receive (cons cbad9@vars (cons cbada@producer cbadb@body*)))))) (set! cbaea@cba4b@build-receive cba4b@build-receive) (void))
(begin (set! cbaf9@file-options-macro (unspecified)) (set! cbafb@set-cons (unspecified)) (set! cbafd@set-union (unspecified)) (set! cbb02@top-mark* (unspecified)) (set! cbb04@top-marked? (unspecified)) (set! cbb06@gen-lexical (unspecified)) (set! cbb08@gen-global (unspecified)) (set! cbb0a@gen-label (unspecified)) (set! cbb0c@gen-top-level-label (unspecified)) (set! cbb0e@gen-define-label+loc (unspecified)) (set! cbb10@gen-define-label (unspecified)) (set! cbb1a@rib? (unspecified)) (set! cbb1c@rib-sym* (unspecified)) (set! cbb1e@set-rib-sym*! (unspecified)) (set! cbb20@rib-mark** (unspecified)) (set! cbb22@set-rib-mark**! (unspecified)) (set! cbb24@rib-label* (unspecified)) (set! cbb26@set-rib-label*! (unspecified)) (set! cbb28@rib-sealed/freq (unspecified)) (set! cbb2a@set-rib-sealed/freq! (unspecified)) (set! cbb2c@rib-cache (unspecified)) (set! cbb2e@set-rib-cache! (unspecified)) (set! cbb30@dummy (unspecified)) (set! cbb32@make-empty-rib (unspecified)) (set! cbb34@extend-rib! (unspecified)) (set! cbb36@extend-rib/nc! (unspecified)) (set! cbb38@make-rib-map (unspecified)) (set! cbb3a@seal-rib! (unspecified)) (set! cbb3c@unseal-rib! (unspecified)) (set! cbb3e@make-full-rib (unspecified)) (set! cbb40@rp (unspecified)) (set! cbb4a@stx? (unspecified)) (set! cbb4c@stx-expr (unspecified)) (set! cbb4e@set-stx-expr! (unspecified)) (set! cbb50@stx-mark* (unspecified)) (set! cbb52@set-stx-mark*! (unspecified)) (set! cbb54@stx-subst* (unspecified)) (set! cbb56@set-stx-subst*! (unspecified)) (set! cbb58@stx-ae* (unspecified)) (set! cbb5a@set-stx-ae*! (unspecified)) (set! cbb5c@dummy (unspecified)) (set! cbb5e@datum->stx (unspecified)) (set! cbb60@gen-mark (unspecified)) (set! cbb62@anti-mark (unspecified)) (set! cbb64@anti-mark? (unspecified)) (set! cbb66@mkstx (unspecified)) (set! cbb68@add-mark (unspecified)) (set! cbb6a@add-subst (unspecified)) (set! cbb6c@syntax-kind? (unspecified)) (set! cbb6e@syntax-vector->list (unspecified)) (set! cbb70@syntax-pair? (unspecified)) (set! cbb72@syntax-vector? (unspecified)) (set! cbb74@syntax-null? (unspecified)) (set! cbb76@syntax-list? (unspecified)) (set! cbb78@syntax-car (unspecified)) (set! cbb7a@syntax-cdr (unspecified)) (set! cbb7c@syntax->list (unspecified)) (set! cbb7e@id? (unspecified)) (set! cbb80@id->sym (unspecified)) (set! cbb82@bound-id=? (unspecified)) (set! cbb84@free-id=? (unspecified)) (set! cbb86@valid-bound-ids? (unspecified)) (set! cbb88@distinct-bound-ids? (unspecified)) (set! cbb8a@bound-id-member? (unspecified)) (set! cbb8c@self-evaluating? (unspecified)) (set! cbb8e@strip-annotations (unspecified)) (set! cbb90@strip (unspecified)) (set! cbb92@stx->datum (unspecified)) (set! cbb94@id->label (unspecified)) (set! cbb96@label->binding (unspecified)) (set! cbb98@make-binding (unspecified)) (set! cbb9a@binding-type (unspecified)) (set! cbb9c@binding-value (unspecified)) (set! cbb9e@raise-unbound-error (unspecified)) (set! cbba0@syntax-type (unspecified)) (set! cbbae@sanitize-binding (unspecified)) (set! cbbb0@make-variable-transformer (unspecified)) (set! cbbb2@variable-transformer? (unspecified)) (set! cbbb4@variable-transformer-procedure (unspecified)) (set! cbbb6@make-eval-transformer (unspecified)) (set! cbd07@parse-define (unspecified)) (set! cbd09@parse-define-syntax (unspecified)) (set! cbd0b@scheme-stx-hashtable (unspecified)) (set! cbd0d@scheme-stx (unspecified)) (set! cbd0f@lexical-var (unspecified)) (set! cbd11@lexical-mutable? (unspecified)) (set! cbd13@set-lexical-mutable! (unspecified)) (set! cbd15@add-lexical (unspecified)) (set! cbd17@add-lexicals (unspecified)) (set! cbd19@letrec-helper (unspecified)) (set! cbd1b@let-transformer (unspecified)) (set! cbd1d@letrec-transformer (unspecified)) (set! cbd1f@letrec*-transformer (unspecified)) (set! cbd21@fluid-let-syntax-transformer (unspecified)) (set! cbd23@type-descriptor-transformer (unspecified)) (set! cbd25@record-type-descriptor-transformer (unspecified)) (set! cbd27@record-constructor-descriptor-transformer (unspecified)) (set! cbd29@when-macro (unspecified)) (set! cbd2b@unless-macro (unspecified)) (set! cbd2d@if-transformer (unspecified)) (set! cbd2f@and-transformer (unspecified)) (set! cbd31@or-transformer (unspecified)) (set! cbd33@case-macro (unspecified)) (set! cbd35@quote-transformer (unspecified)) (set! cbd37@case-lambda-transformer (unspecified)) (set! cbd39@lambda-transformer (unspecified)) (set! cbd3b@bless (unspecified)) (set! cbd3d@with-syntax-macro (unspecified)) (set! cbd3f@invalid-fmls-error (unspecified)) (set! cbd41@let-macro (unspecified)) (set! cbd43@let-values-macro (unspecified)) (set! cbd45@let*-values-macro (unspecified)) (set! cbd47@trace-lambda-macro (unspecified)) (set! cbd49@trace-define-macro (unspecified)) (set! cbd4b@trace-define-syntax-macro (unspecified)) (set! cbd4d@trace-let/rec-syntax (unspecified)) (set! cbd4f@trace-let-syntax-macro (unspecified)) (set! cbd51@trace-letrec-syntax-macro (unspecified)) (set! cbd53@guard-macro (unspecified)) (set! cbd55@define-enumeration-macro (unspecified)) (set! cbd57@time-macro (unspecified)) (set! cbd59@delay-macro (unspecified)) (set! cbd5b@assert-macro (unspecified)) (set! cbd5d@endianness-macro (unspecified)) (set! cbd5f@identifier-syntax-macro (unspecified)) (set! cbd61@do-macro (unspecified)) (set! cbd63@let*-macro (unspecified)) (set! cbd65@or-macro (unspecified)) (set! cbd67@and-macro (unspecified)) (set! cbd69@cond-macro (unspecified)) (set! cbd6b@do-include (unspecified)) (set! cbd6d@include-macro (unspecified)) (set! cbd6f@include-into-macro (unspecified)) (set! cbd71@syntax-rules-macro (unspecified)) (set! cbd73@quasiquote-macro (unspecified)) (set! cbd75@quasisyntax-macro (unspecified)) (set! cbd77@define-struct-macro (unspecified)) (set! cbd79@define-record-type-macro (unspecified)) (set! cbd7b@define-condition-type-macro (unspecified)) (set! cbd7d@incorrect-usage-macro (unspecified)) (set! cbd7f@parameterize-macro (unspecified)) (set! cbd81@foreign-call-transformer (unspecified)) (set! cbd83@convert-pattern (unspecified)) (set! cbd85@syntax-dispatch (unspecified)) (set! cbd87@ellipsis? (unspecified)) (set! cbd89@underscore? (unspecified)) (set! cbd8b@verify-literals (unspecified)) (set! cbd8d@syntax-case-transformer (unspecified)) (set! cbd8f@ellipsis-map (unspecified)) (set! cbd91@syntax-transformer (unspecified)) (set! cbd93@core-macro-transformer (unspecified)) (set! cbd95@symbol-macro (unspecified)) (set! cbd97@macro-transformer (unspecified)) (set! cbd99@local-macro-transformer (unspecified)) (set! cbd9b@do-macro-call (unspecified)) (set! cbd9d@chi-macro (unspecified)) (set! cbd9f@chi-local-macro (unspecified)) (set! cbda1@chi-global-macro (unspecified)) (set! cbda3@chi-expr* (unspecified)) (set! cbda5@chi-application (unspecified)) (set! cbda7@chi-expr (unspecified)) (set! cbda9@chi-set! (unspecified)) (set! cbdab@verify-formals (unspecified)) (set! cbdad@chi-lambda-clause (unspecified)) (set! cbdaf@chi-lambda-clause* (unspecified)) (set! cbdb1@chi-defun (unspecified)) (set! cbdb3@chi-rhs (unspecified)) (set! cbdb5@expand-interaction-rhs*/init* (unspecified)) (set! cbdb7@chi-rhs* (unspecified)) (set! cbdb9@find-bound=? (unspecified)) (set! cbdbb@find-dups (unspecified)) (set! cbdbd@chi-internal (unspecified)) (set! cbdbf@parse-module (unspecified)) (set! cbdc9@module-interface? (unspecified)) (set! cbdcb@module-interface-first-mark (unspecified)) (set! cbdcd@set-module-interface-first-mark! (unspecified)) (set! cbdcf@module-interface-exp-id-vec (unspecified)) (set! cbdd1@set-module-interface-exp-id-vec! (unspecified)) (set! cbdd3@module-interface-exp-lab-vec (unspecified)) (set! cbdd5@set-module-interface-exp-lab-vec! (unspecified)) (set! cbdd7@dummy (unspecified)) (set! cbdd9@module-interface-exp-id* (unspecified)) (set! cbddb@chi-internal-module (unspecified)) (set! cbddd@chi-body* (unspecified)) (set! cbddf@expand-transformer (unspecified)) (set! cbde1@parse-exports (unspecified)) (set! cbde3@parse-library-name (unspecified)) (set! cbde5@parse-library (unspecified)) (set! cbde7@parse-import-spec* (unspecified)) (set! cbde9@make-top-rib (unspecified)) (set! cbdeb@make-collector (unspecified)) (set! cbded@inv-collector (unspecified)) (set! cbdef@vis-collector (unspecified)) (set! cbdf1@imp-collector (unspecified)) (set! cbdf3@chi-library-internal (unspecified)) (set! cbdf5@chi-interaction-expr (unspecified)) (set! cbdf7@library-body-expander (unspecified)) (set! cbdf9@core-library-expander (unspecified)) (set! cbdfb@parse-top-level-program (unspecified)) (set! cbdfd@top-level-expander (unspecified)) (set! cbdff@rp (unspecified)) (set! cbe09@env? (unspecified)) (set! cbe0b@env-names (unspecified)) (set! cbe0d@set-env-names! (unspecified)) (set! cbe0f@env-labels (unspecified)) (set! cbe11@set-env-labels! (unspecified)) (set! cbe13@env-itc (unspecified)) (set! cbe15@set-env-itc! (unspecified)) (set! cbe17@dummy (unspecified)) (set! cbe19@rp (unspecified)) (set! cbe23@interaction-env? (unspecified)) (set! cbe25@interaction-env-rib (unspecified)) (set! cbe27@set-interaction-env-rib! (unspecified)) (set! cbe29@interaction-env-r (unspecified)) (set! cbe2b@set-interaction-env-r! (unspecified)) (set! cbe2d@interaction-env-locs (unspecified)) (set! cbe2f@set-interaction-env-locs! (unspecified)) (set! cbe31@dummy (unspecified)) (set! cbe33@interaction-environment-symbols (unspecified)) (set! cbe35@environment-bindings (unspecified)) (set! cbe37@parse-binding (unspecified)) (set! cbe39@environment? (unspecified)) (set! cbe3b@environment-symbols (unspecified)) (set! cbe3d@environment (unspecified)) (set! cbe3f@null-environment (unspecified)) (set! cbe41@scheme-report-environment (unspecified)) (set! cbe43@expand (unspecified)) (set! cbe45@eval (unspecified)) (set! cbe47@library-expander (unspecified)) (set! cbe49@boot-library-expand (unspecified)) (set! cbe4b@rev-map-append (unspecified)) (set! cbe4d@build-exports (unspecified)) (set! cbe4f@make-export-subst (unspecified)) (set! cbe51@make-export-env/macros (unspecified)) (set! cbe53@generate-temporaries (unspecified)) (set! cbe55@free-identifier=? (unspecified)) (set! cbe57@bound-identifier=? (unspecified)) (set! cbe59@make-source-condition (unspecified)) (set! cbe5b@extract-position-condition (unspecified)) (set! cbe5d@expression-position (unspecified)) (set! cbe5f@assertion-error (unspecified)) (set! cbe61@syntax-error (unspecified)) (set! cbe63@syntax-violation* (unspecified)) (set! cbe65@syntax-violation (unspecified)) (set! cbe67@identifier? (unspecified)) (set! cbe69@datum->syntax (unspecified)) (set! cbe6b@syntax->datum (unspecified)) (set! cbe6d@ungensym-all (unspecified)) (set! cbe6f@compile-r6rs-top-level (unspecified)) (set! cbe71@pre-compile-r6rs-top-level (unspecified)) (set! cbe73@interaction-environment (unspecified)) (set! cbe75@top-level-context (unspecified)) (set! cbaf9@file-options-macro (lambda (cbe76@x) (let ((cbe79@valid-option? '#f)) (begin (set! cbe79@valid-option? (lambda (cbe82@x) (and (cbb7e@id? cbe82@x) (memq (cbb80@id->sym cbe82@x) '(no-fail no-create no-truncate))))) (let ((cbe7a@t cbe76@x)) (let ((cbe7c@ls/false (cbd85@syntax-dispatch cbe7a@t '(_ . each-any)))) (if (and cbe7c@ls/false (apply (lambda (cbe7e@opt*) (for-all cbe79@valid-option? cbe7e@opt*)) cbe7c@ls/false)) (apply (lambda (cbe80@opt*) (cbd3b@bless (list 'make-file-options (list 'quote cbe80@opt*)))) cbe7c@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cbe7a@t)))))))) (set! cb27cc@cbaf9@file-options-macro cbaf9@file-options-macro) (set! cbafb@set-cons (lambda (cbe84@x cbe85@ls) (if (memq cbe84@x cbe85@ls) cbe85@ls (cons cbe84@x cbe85@ls)))) (set! cb27cd@cbafb@set-cons cbafb@set-cons) (set! cbafd@set-union (lambda (cbe88@ls1 cbe89@ls2) (if (null? cbe88@ls1) cbe89@ls2 (if (memq (car cbe88@ls1) cbe89@ls2) (cbafd@set-union (cdr cbe88@ls1) cbe89@ls2) (cons (car cbe88@ls1) (cbafd@set-union (cdr cbe88@ls1) cbe89@ls2)))))) (set! cb27ce@cbafd@set-union cbafd@set-union) (set! cbb02@top-mark* '(top)) (set! cb27cf@cbb02@top-mark* cbb02@top-mark*) (set! cbb04@top-marked? (lambda (cbe8c@m*) (memq 'top cbe8c@m*))) (set! cb27d0@cbb04@top-marked? cbb04@top-marked?) (set! cbb06@gen-lexical (lambda (cbe8e@sym) (if (symbol? cbe8e@sym) (gensym cbe8e@sym) (if (cbb4a@stx? cbe8e@sym) (cbb06@gen-lexical (cbb80@id->sym cbe8e@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" cbe8e@sym))))) (set! cb27d1@cbb06@gen-lexical cbb06@gen-lexical) (set! cbb08@gen-global (lambda (cbe90@x) (cbb06@gen-lexical cbe90@x))) (set! cb27d2@cbb08@gen-global cbb08@gen-global) (set! cbb0a@gen-label (lambda (cbe92@_) (gensym))) (set! cb27d3@cbb0a@gen-label cbb0a@gen-label) (set! cbb0c@gen-top-level-label (lambda (cbe94@id cbe95@rib) (let ((cbe99@find '#f)) (begin (set! cbe99@find (lambda (cbea4@sym cbea5@mark* cbea6@sym* cbea7@mark** cbea8@label*) (and (pair? cbea6@sym*) (if (and (eq? cbea4@sym (car cbea6@sym*)) (same-marks? cbea5@mark* (car cbea7@mark**))) (car cbea8@label*) (cbe99@find cbea4@sym cbea5@mark* (cdr cbea6@sym*) (cdr cbea7@mark**) (cdr cbea8@label*)))))) (let ((cbe9a@sym (cbb80@id->sym cbe94@id)) (cbe9b@mark* (cbb50@stx-mark* cbe94@id))) (let ((cbe9e@sym* (cbb1c@rib-sym* cbe95@rib))) (let ((cbea0@t (and (memq cbe9a@sym (cbb1c@rib-sym* cbe95@rib)) (cbe99@find cbe9a@sym cbe9b@mark* cbe9e@sym* (cbb20@rib-mark** cbe95@rib) (cbb24@rib-label* cbe95@rib))))) (if cbea0@t ((lambda (cbea2@label) (if (cb993@cb7e0@imported-label->binding cbea2@label) (gensym) cbea2@label)) cbea0@t) (gensym))))))))) (set! cb27d4@cbb0c@gen-top-level-label cbb0c@gen-top-level-label) (set! cbb0e@gen-define-label+loc (lambda (cbeae@id cbeaf@rib) (let ((cbeb2@t (cbe75@top-level-context))) (if cbeb2@t ((lambda (cbeb4@env) (let ((cbeb6@label (cbb0c@gen-top-level-label cbeae@id cbeaf@rib)) (cbeb7@locs (cbe2d@interaction-env-locs cbeb4@env))) (values cbeb6@label (let ((cbeba@t (assq cbeb6@label cbeb7@locs))) (if cbeba@t (cdr cbeba@t) (let ((cbebc@loc (cbb06@gen-lexical cbeae@id))) (begin (cbe2f@set-interaction-env-locs! cbeb4@env (cons (cons cbeb6@label cbebc@loc) cbeb7@locs)) cbebc@loc))))))) cbeb2@t) (values (gensym) (cbb06@gen-lexical cbeae@id)))))) (set! cb27d5@cbb0e@gen-define-label+loc cbb0e@gen-define-label+loc) (set! cbb10@gen-define-label (lambda (cbebe@id cbebf@rib) (if (cbe75@top-level-context) (cbb0c@gen-top-level-label cbebe@id cbebf@rib) (gensym)))) (set! cb27d6@cbb10@gen-define-label cbb10@gen-define-label) (set! cbb1a@rib? (lambda (cbec2@x) (and (simple-struct? cbec2@x) (eq? (simple-struct-name cbec2@x) 'rib)))) (set! cb27d7@cbb1a@rib? cbb1a@rib?) (set! cbb1c@rib-sym* (lambda (cbec4@x) (simple-struct-ref cbec4@x '0))) (set! cb27d8@cbb1c@rib-sym* cbb1c@rib-sym*) (set! cbb1e@set-rib-sym*! (lambda (cbec6@x cbec7@val) (simple-struct-set! cbec6@x '0 cbec7@val))) (set! cb27d9@cbb1e@set-rib-sym*! cbb1e@set-rib-sym*!) (set! cbb20@rib-mark** (lambda (cbeca@x) (simple-struct-ref cbeca@x '1))) (set! cb27da@cbb20@rib-mark** cbb20@rib-mark**) (set! cbb22@set-rib-mark**! (lambda (cbecc@x cbecd@val) (simple-struct-set! cbecc@x '1 cbecd@val))) (set! cb27db@cbb22@set-rib-mark**! cbb22@set-rib-mark**!) (set! cbb24@rib-label* (lambda (cbed0@x) (simple-struct-ref cbed0@x '2))) (set! cb27dc@cbb24@rib-label* cbb24@rib-label*) (set! cbb26@set-rib-label*! (lambda (cbed2@x cbed3@val) (simple-struct-set! cbed2@x '2 cbed3@val))) (set! cb27dd@cbb26@set-rib-label*! cbb26@set-rib-label*!) (set! cbb28@rib-sealed/freq (lambda (cbed6@x) (simple-struct-ref cbed6@x '3))) (set! cb27de@cbb28@rib-sealed/freq cbb28@rib-sealed/freq) (set! cbb2a@set-rib-sealed/freq! (lambda (cbed8@x cbed9@val) (simple-struct-set! cbed8@x '3 cbed9@val))) (set! cb27df@cbb2a@set-rib-sealed/freq! cbb2a@set-rib-sealed/freq!) (set! cbb2c@rib-cache (lambda (cbedc@x) (simple-struct-ref cbedc@x '4))) (set! cb27e0@cbb2c@rib-cache cbb2c@rib-cache) (set! cbb2e@set-rib-cache! (lambda (cbede@x cbedf@val) (simple-struct-set! cbede@x '4 cbedf@val))) (set! cb27e1@cbb2e@set-rib-cache! cbb2e@set-rib-cache!) (set! cbb30@dummy '3) (set! cb27e2@cbb30@dummy cbb30@dummy) (set! cbb32@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! cb27e3@cbb32@make-empty-rib cbb32@make-empty-rib) (set! cbb34@extend-rib! (lambda (cbee2@rib cbee3@id cbee4@label) (let ((cbee9@find '#f)) (begin (set! cbee9@find (lambda (cbef6@sym cbef7@mark* cbef8@sym* cbef9@mark** cbefa@label*) (and (pair? cbef8@sym*) (if (and (eq? cbef6@sym (car cbef8@sym*)) (same-marks? cbef7@mark* (car cbef9@mark**))) cbefa@label* (cbee9@find cbef6@sym cbef7@mark* (cdr cbef8@sym*) (cdr cbef9@mark**) (cdr cbefa@label*)))))) (begin (if (cbb28@rib-sealed/freq cbee2@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" cbee2@rib) (void)) (let ((cbeea@sym (cbb80@id->sym cbee3@id)) (cbeeb@mark* (cbb50@stx-mark* cbee3@id))) (let ((cbeee@sym* (cbb1c@rib-sym* cbee2@rib))) (let ((cbef0@t (and (memq cbeea@sym (cbb1c@rib-sym* cbee2@rib)) (cbee9@find cbeea@sym cbeeb@mark* cbeee@sym* (cbb20@rib-mark** cbee2@rib) (cbb24@rib-label* cbee2@rib))))) (if cbef0@t ((lambda (cbef2@p) (if (not (eq? cbee4@label (car cbef2@p))) (if (cbe75@top-level-context) (set-car! cbef2@p cbee4@label) (cbe65@syntax-violation '#f '"multiple definitions of identifier" cbee3@id)) (void))) cbef0@t) (begin (if (cbb2c@rib-cache cbee2@rib) (hashtable-update! (cbb2c@rib-cache cbee2@rib) cbeea@sym (lambda (cbef4@e) (cons (cons cbeeb@mark* cbee4@label) cbef4@e)) '()) (void)) (cbb1e@set-rib-sym*! cbee2@rib (cons cbeea@sym cbeee@sym*)) (cbb22@set-rib-mark**! cbee2@rib (cons cbeeb@mark* (cbb20@rib-mark** cbee2@rib))) (cbb26@set-rib-label*! cbee2@rib (cons cbee4@label (cbb24@rib-label* cbee2@rib))))))))))))) (set! cb27e4@cbb34@extend-rib! cbb34@extend-rib!) (set! cbb36@extend-rib/nc! (lambda (cbf00@rib cbf01@id cbf02@label) (let ((cbf06@sym (cbb80@id->sym cbf01@id)) (cbf07@mark* (cbb50@stx-mark* cbf01@id))) (let ((cbf0a@sym* (cbb1c@rib-sym* cbf00@rib))) (begin (if (cbb2c@rib-cache cbf00@rib) (hashtable-update! (cbb2c@rib-cache cbf00@rib) cbf06@sym (lambda (cbf0c@e) (cons (cons cbf07@mark* cbf02@label) cbf0c@e)) '()) (void)) (cbb1e@set-rib-sym*! cbf00@rib (cons cbf06@sym cbf0a@sym*)) (cbb22@set-rib-mark**! cbf00@rib (cons cbf07@mark* (cbb20@rib-mark** cbf00@rib))) (cbb26@set-rib-label*! cbf00@rib (cons cbf02@label (cbb24@rib-label* cbf00@rib)))))))) (set! cb27e5@cbb36@extend-rib/nc! cbb36@extend-rib/nc!) (set! cbb38@make-rib-map (lambda (cbf0e@sym*) (let ((cbf10@ht (make-eq-hashtable))) (let cbf16@f ((cbf12@i '0) (cbf13@sym* cbf0e@sym*)) (if (null? cbf13@sym*) cbf10@ht (begin (hashtable-update! cbf10@ht (car cbf13@sym*) (lambda (cbf18@x) (cons cbf12@i cbf18@x)) '()) (cbf16@f (+ cbf12@i '1) (cdr cbf13@sym*)))))))) (set! cb27e6@cbb38@make-rib-map cbb38@make-rib-map) (set! cbb3a@seal-rib! (lambda (cbf1a@rib) (let ((cbf1c@sym* (cbb1c@rib-sym* cbf1a@rib))) (if (not (null? cbf1c@sym*)) (begin (cbb1e@set-rib-sym*! cbf1a@rib (list->vector cbf1c@sym*)) (cbb22@set-rib-mark**! cbf1a@rib (list->vector (cbb20@rib-mark** cbf1a@rib))) (cbb26@set-rib-label*! cbf1a@rib (list->vector (cbb24@rib-label* cbf1a@rib))) (cbb2a@set-rib-sealed/freq! cbf1a@rib (cbb38@make-rib-map cbf1c@sym*))) (void))))) (set! cb27e7@cbb3a@seal-rib! cbb3a@seal-rib!) (set! cbb3c@unseal-rib! (lambda (cbf1e@rib) (if (cbb28@rib-sealed/freq cbf1e@rib) (begin (cbb2a@set-rib-sealed/freq! cbf1e@rib '#f) (cbb1e@set-rib-sym*! cbf1e@rib (vector->list (cbb1c@rib-sym* cbf1e@rib))) (cbb22@set-rib-mark**! cbf1e@rib (vector->list (cbb20@rib-mark** cbf1e@rib))) (cbb26@set-rib-label*! cbf1e@rib (vector->list (cbb24@rib-label* cbf1e@rib)))) (void)))) (set! cb27e8@cbb3c@unseal-rib! cbb3c@unseal-rib!) (set! cbb3e@make-full-rib (lambda (cbf20@id* cbf21@label*) (let ((cbf24@r (make-simple-struct 'rib '6 (list (map cbb80@id->sym cbf20@id*) (map cbb50@stx-mark* cbf20@id*) cbf21@label* '#f '#f)))) (begin (cbb3a@seal-rib! cbf24@r) cbf24@r)))) (set! cb27e9@cbb3e@make-full-rib cbb3e@make-full-rib) (set! cbb40@rp (cb6c5@cb5a0@make-record-printer 'stx (lambda (cbf26@x cbf27@p cbf28@wr) (begin (display '"#<syntax " cbf27@p) (write (cbb92@stx->datum cbf26@x) cbf27@p) (let ((cbf2c@expr (cbb4c@stx-expr cbf26@x))) (if (cb6bc@cb58e@annotation? cbf2c@expr) (let ((cbf2e@src (cb6bd@cb590@annotation-source cbf2c@expr))) (if (pair? cbf2e@src) (begin (display '" [" cbf27@p) (display (cdr cbf2e@src) cbf27@p) (display '" of " cbf27@p) (display (car cbf2e@src) cbf27@p) (display '"]" cbf27@p)) (void))) (void))) (display '">" cbf27@p))))) (set! cb27ea@cbb40@rp cbb40@rp) (set! cbb4a@stx? (lambda (cbf30@x) (and (simple-struct? cbf30@x) (eq? (simple-struct-name cbf30@x) 'stx)))) (set! cb27eb@cbb4a@stx? cbb4a@stx?) (set! cbb4c@stx-expr (lambda (cbf32@x) (simple-struct-ref cbf32@x '0))) (set! cb27ec@cbb4c@stx-expr cbb4c@stx-expr) (set! cbb4e@set-stx-expr! (lambda (cbf34@x cbf35@val) (simple-struct-set! cbf34@x '0 cbf35@val))) (set! cb27ed@cbb4e@set-stx-expr! cbb4e@set-stx-expr!) (set! cbb50@stx-mark* (lambda (cbf38@x) (simple-struct-ref cbf38@x '1))) (set! cb27ee@cbb50@stx-mark* cbb50@stx-mark*) (set! cbb52@set-stx-mark*! (lambda (cbf3a@x cbf3b@val) (simple-struct-set! cbf3a@x '1 cbf3b@val))) (set! cb27ef@cbb52@set-stx-mark*! cbb52@set-stx-mark*!) (set! cbb54@stx-subst* (lambda (cbf3e@x) (simple-struct-ref cbf3e@x '2))) (set! cb27f0@cbb54@stx-subst* cbb54@stx-subst*) (set! cbb56@set-stx-subst*! (lambda (cbf40@x cbf41@val) (simple-struct-set! cbf40@x '2 cbf41@val))) (set! cb27f1@cbb56@set-stx-subst*! cbb56@set-stx-subst*!) (set! cbb58@stx-ae* (lambda (cbf44@x) (simple-struct-ref cbf44@x '3))) (set! cb27f2@cbb58@stx-ae* cbb58@stx-ae*) (set! cbb5a@set-stx-ae*! (lambda (cbf46@x cbf47@val) (simple-struct-set! cbf46@x '3 cbf47@val))) (set! cb27f3@cbb5a@set-stx-ae*! cbb5a@set-stx-ae*!) (set! cbb5c@dummy '3) (set! cb27f4@cbb5c@dummy cbb5c@dummy) (set! cbb5e@datum->stx (lambda (cbf4a@id cbf4b@datum) (make-simple-struct 'stx '5 (list cbf4b@datum (cbb50@stx-mark* cbf4a@id) (cbb54@stx-subst* cbf4a@id) (cbb58@stx-ae* cbf4a@id))))) (set! cb27f5@cbb5e@datum->stx cbb5e@datum->stx) (set! cbb60@gen-mark (lambda () (string '#\m))) (set! cb27f6@cbb60@gen-mark cbb60@gen-mark) (set! cbb62@anti-mark '#f) (set! cb27f7@cbb62@anti-mark cbb62@anti-mark) (set! cbb64@anti-mark? not) (set! cb27f8@cbb64@anti-mark? cbb64@anti-mark?) (set! cbb66@mkstx (lambda (cbf4e@e cbf4f@m* cbf50@s* cbf51@ae*) (if (and (cbb4a@stx? cbf4e@e) (not (cbb04@top-marked? cbf4f@m*))) (call-with-values (lambda () (join-wraps cbf4f@m* cbf50@s* cbf51@ae* cbf4e@e)) (lambda (cbf5c@cbf57 cbf5d@cbf59 cbf5e@cbf5b) (let ((cbf62@ae* cbf5e@cbf5b) (cbf63@s* cbf5d@cbf59) (cbf64@m* cbf5c@cbf57)) (make-simple-struct 'stx '5 (list (cbb4c@stx-expr cbf4e@e) cbf64@m* cbf63@s* cbf62@ae*))))) (make-simple-struct 'stx '5 (list cbf4e@e cbf4f@m* cbf50@s* cbf51@ae*))))) (set! cb27f9@cbb66@mkstx cbb66@mkstx) (set! cbb68@add-mark (lambda (cbf68@m cbf69@e cbf6a@ae) (cbb66@mkstx cbf69@e (list cbf68@m) '(shift) (list cbf6a@ae)))) (set! cb27fa@cbb68@add-mark cbb68@add-mark) (set! cbb6a@add-subst (lambda (cbf6e@subst cbf6f@e) (cbb66@mkstx cbf6f@e '() (list cbf6e@subst) '()))) (set! cb27fb@cbb6a@add-subst cbb6a@add-subst) (set! cbb6c@syntax-kind? (lambda (cbf72@x cbf73@p?) (if (cbb4a@stx? cbf72@x) (cbb6c@syntax-kind? (cbb4c@stx-expr cbf72@x) cbf73@p?) (if (cb6bc@cb58e@annotation? cbf72@x) (cbb6c@syntax-kind? (cb6be@cb592@annotation-expression cbf72@x) cbf73@p?) (cbf73@p? cbf72@x))))) (set! cb27fc@cbb6c@syntax-kind? cbb6c@syntax-kind?) (set! cbb6e@syntax-vector->list (lambda (cbf76@x) (if (cbb4a@stx? cbf76@x) (let ((cbf78@ls (cbb6e@syntax-vector->list (cbb4c@stx-expr cbf76@x))) (cbf79@m* (cbb50@stx-mark* cbf76@x)) (cbf7a@s* (cbb54@stx-subst* cbf76@x)) (cbf7b@ae* (cbb58@stx-ae* cbf76@x))) (map (lambda (cbf80@x) (cbb66@mkstx cbf80@x cbf79@m* cbf7a@s* cbf7b@ae*)) cbf78@ls)) (if (cb6bc@cb58e@annotation? cbf76@x) (cbb6e@syntax-vector->list (cb6be@cb592@annotation-expression cbf76@x)) (if (vector? cbf76@x) (vector->list cbf76@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" cbf76@x)))))) (set! cb27fd@cbb6e@syntax-vector->list cbb6e@syntax-vector->list) (set! cbb70@syntax-pair? (lambda (cbf82@x) (cbb6c@syntax-kind? cbf82@x pair?))) (set! cb27fe@cbb70@syntax-pair? cbb70@syntax-pair?) (set! cbb72@syntax-vector? (lambda (cbf84@x) (cbb6c@syntax-kind? cbf84@x vector?))) (set! cb27ff@cbb72@syntax-vector? cbb72@syntax-vector?) (set! cbb74@syntax-null? (lambda (cbf86@x) (cbb6c@syntax-kind? cbf86@x null?))) (set! cb2800@cbb74@syntax-null? cbb74@syntax-null?) (set! cbb76@syntax-list? (lambda (cbf88@x) (or (cbb74@syntax-null? cbf88@x) (and (cbb70@syntax-pair? cbf88@x) (cbb76@syntax-list? (cbb7a@syntax-cdr cbf88@x)))))) (set! cb2801@cbb76@syntax-list? cbb76@syntax-list?) (set! cbb78@syntax-car (lambda (cbf8a@x) (if (cbb4a@stx? cbf8a@x) (cbb66@mkstx (cbb78@syntax-car (cbb4c@stx-expr cbf8a@x)) (cbb50@stx-mark* cbf8a@x) (cbb54@stx-subst* cbf8a@x) (cbb58@stx-ae* cbf8a@x)) (if (cb6bc@cb58e@annotation? cbf8a@x) (cbb78@syntax-car (cb6be@cb592@annotation-expression cbf8a@x)) (if (pair? cbf8a@x) (car cbf8a@x) (assertion-violation 'syntax-car '"BUG: not a pair" cbf8a@x)))))) (set! cb2802@cbb78@syntax-car cbb78@syntax-car) (set! cbb7a@syntax-cdr (lambda (cbf8c@x) (if (cbb4a@stx? cbf8c@x) (cbb66@mkstx (cbb7a@syntax-cdr (cbb4c@stx-expr cbf8c@x)) (cbb50@stx-mark* cbf8c@x) (cbb54@stx-subst* cbf8c@x) (cbb58@stx-ae* cbf8c@x)) (if (cb6bc@cb58e@annotation? cbf8c@x) (cbb7a@syntax-cdr (cb6be@cb592@annotation-expression cbf8c@x)) (if (pair? cbf8c@x) (cdr cbf8c@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" cbf8c@x)))))) (set! cb2803@cbb7a@syntax-cdr cbb7a@syntax-cdr) (set! cbb7c@syntax->list (lambda (cbf8e@x) (if (cbb70@syntax-pair? cbf8e@x) (cons (cbb78@syntax-car cbf8e@x) (cbb7c@syntax->list (cbb7a@syntax-cdr cbf8e@x))) (if (cbb74@syntax-null? cbf8e@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" cbf8e@x))))) (set! cb2804@cbb7c@syntax->list cbb7c@syntax->list) (set! cbb7e@id? (lambda (cbf90@x) (and (cbb4a@stx? cbf90@x) (symbol? (cbb4c@stx-expr cbf90@x))))) (set! cb2805@cbb7e@id? cbb7e@id?) (set! cbb80@id->sym (lambda (cbf92@x) (cbb4c@stx-expr cbf92@x))) (set! cb2806@cbb80@id->sym cbb80@id->sym) (set! cbb82@bound-id=? (lambda (cbf94@x cbf95@y) (and (eq? (cbb80@id->sym cbf94@x) (cbb80@id->sym cbf95@y)) (same-marks? (cbb50@stx-mark* cbf94@x) (cbb50@stx-mark* cbf95@y))))) (set! cb2807@cbb82@bound-id=? cbb82@bound-id=?) (set! cbb84@free-id=? (lambda (cbf98@i cbf99@j) (let ((cbf9c@t0 (id->real-label cbf98@i)) (cbf9d@t1 (id->real-label cbf99@j))) (if (or cbf9c@t0 cbf9d@t1) (eq? cbf9c@t0 cbf9d@t1) (eq? (cbb80@id->sym cbf98@i) (cbb80@id->sym cbf99@j)))))) (set! cb2808@cbb84@free-id=? cbb84@free-id=?) (set! cbb86@valid-bound-ids? (lambda (cbfa0@id*) (and (for-all cbb7e@id? cbfa0@id*) (cbb88@distinct-bound-ids? cbfa0@id*)))) (set! cb2809@cbb86@valid-bound-ids? cbb86@valid-bound-ids?) (set! cbb88@distinct-bound-ids? (lambda (cbfa2@id*) (or (null? cbfa2@id*) (and (not (cbb8a@bound-id-member? (car cbfa2@id*) (cdr cbfa2@id*))) (cbb88@distinct-bound-ids? (cdr cbfa2@id*)))))) (set! cb280a@cbb88@distinct-bound-ids? cbb88@distinct-bound-ids?) (set! cbb8a@bound-id-member? (lambda (cbfa4@id cbfa5@id*) (and (pair? cbfa5@id*) (or (cbb82@bound-id=? cbfa4@id (car cbfa5@id*)) (cbb8a@bound-id-member? cbfa4@id (cdr cbfa5@id*)))))) (set! cb280b@cbb8a@bound-id-member? cbb8a@bound-id-member?) (set! cbb8c@self-evaluating? (lambda (cbfa8@x) (or (number? cbfa8@x) (string? cbfa8@x) (char? cbfa8@x) (boolean? cbfa8@x) (regexp? cbfa8@x) (bytevector? cbfa8@x)))) (set! cb280c@cbb8c@self-evaluating? cbb8c@self-evaluating?) (set! cbb8e@strip-annotations (lambda (cbfaa@x) (if (pair? cbfaa@x) (cons (cbb8e@strip-annotations (car cbfaa@x)) (cbb8e@strip-annotations (cdr cbfaa@x))) (if (vector? cbfaa@x) (vector-map cbb8e@strip-annotations cbfaa@x) (if (cb6bc@cb58e@annotation? cbfaa@x) (cb6bb@cb58c@annotation-stripped cbfaa@x) cbfaa@x))))) (set! cb280d@cbb8e@strip-annotations cbb8e@strip-annotations) (set! cbb90@strip (lambda (cbfac@x cbfad@m*) (if (cbb04@top-marked? cbfad@m*) (if (or (cb6bc@cb58e@annotation? cbfac@x) (and (pair? cbfac@x) (cb6bc@cb58e@annotation? (car cbfac@x))) (and (vector? cbfac@x) (> (vector-length cbfac@x) '0) (cb6bc@cb58e@annotation? (vector-ref cbfac@x '0)))) (cbb8e@strip-annotations cbfac@x) cbfac@x) (let cbfb2@f ((cbfb0@x cbfac@x)) (if (cbb4a@stx? cbfb0@x) (cbb90@strip (cbb4c@stx-expr cbfb0@x) (cbb50@stx-mark* cbfb0@x)) (if (cb6bc@cb58e@annotation? cbfb0@x) (cb6bb@cb58c@annotation-stripped cbfb0@x) (if (pair? cbfb0@x) (let ((cbfb4@a (cbfb2@f (car cbfb0@x))) (cbfb5@d (cbfb2@f (cdr cbfb0@x)))) (if (and (eq? cbfb4@a (car cbfb0@x)) (eq? cbfb5@d (cdr cbfb0@x))) cbfb0@x (cons cbfb4@a cbfb5@d))) (if (vector? cbfb0@x) (let ((cbfb8@old (vector->list cbfb0@x))) (let ((cbfba@new (map cbfb2@f cbfb8@old))) (if (for-all eq? cbfb8@old cbfba@new) cbfb0@x (list->vector cbfba@new)))) cbfb0@x)))))))) (set! cb280e@cbb90@strip cbb90@strip) (set! cbb92@stx->datum (lambda (cbfbc@x) (cbb90@strip cbfbc@x '()))) (set! cb280f@cbb92@stx->datum cbb92@stx->datum) (set! cbb94@id->label (lambda (cbfbe@id) (or (id->real-label cbfbe@id) (let ((cbfc0@t (cbe75@top-level-context))) (if cbfc0@t ((lambda (cbfc2@env) (let ((cbfc4@rib (cbe25@interaction-env-rib cbfc2@env))) (call-with-values (lambda () (cbb0e@gen-define-label+loc cbfbe@id cbfc4@rib)) (lambda (cbfca@cbfc7 cbfcb@cbfc9) (let ((cbfce@loc_ cbfcb@cbfc9) (cbfcf@lab cbfca@cbfc7)) (begin (cbb34@extend-rib! cbfc4@rib cbfbe@id cbfcf@lab) cbfcf@lab)))))) cbfc0@t) '#f))))) (set! cb2810@cbb94@id->label cbb94@id->label) (set! cbb96@label->binding (lambda (cbfd2@x cbfd3@r) (let ((cbfd6@t (cb993@cb7e0@imported-label->binding cbfd2@x))) (if cbfd6@t ((lambda (cbfd8@b) (if (and (pair? cbfd8@b) (eq? (car cbfd8@b) '$core-rtd)) (cons '$rtd (map cbd3b@bless (cdr cbfd8@b))) (if (and (pair? cbfd8@b) (eq? (car cbfd8@b) 'global-rtd)) (let ((cbfda@lib (cadr cbfd8@b)) (cbfdb@loc (cddr cbfd8@b))) (cons '$rtd (symbol-value cbfdb@loc))) cbfd8@b))) cbfd6@t) (let ((cbfde@t (assq cbfd2@x cbfd3@r))) (if cbfde@t (cdr cbfde@t) (let ((cbfe0@t (cbe75@top-level-context))) (if cbfe0@t ((lambda (cbfe2@env) (let ((cbfe4@t (assq cbfd2@x (cbe2d@interaction-env-locs cbfe2@env)))) (if cbfe4@t ((lambda (cbfe6@p) (cons* 'lexical (cdr cbfe6@p) '#f)) cbfe4@t) '(displaced-lexical . #f)))) cbfe0@t) '(displaced-lexical . #f))))))))) (set! cb2811@cbb96@label->binding cbb96@label->binding) (set! cbb98@make-binding cons) (set! cb2812@cbb98@make-binding cbb98@make-binding) (set! cbb9a@binding-type car) (set! cb2813@cbb9a@binding-type cbb9a@binding-type) (set! cbb9c@binding-value cdr) (set! cb2814@cbb9c@binding-value cbb9c@binding-value) (set! cbb9e@raise-unbound-error (lambda (cbfe8@id) (cbe63@syntax-violation* '#f '"unbound identifier" cbfe8@id (cb2c0a@cb2a50@make-undefined-violation)))) (set! cb2815@cbb9e@raise-unbound-error cbb9e@raise-unbound-error) (set! cbba0@syntax-type (lambda (cbfea@e cbfeb@r) (if (cbb7e@id? cbfea@e) (let ((cbfee@id cbfea@e)) (let ((cbff0@label (cbb94@id->label cbfee@id))) (let ((cbff2@b (cbb96@label->binding cbff0@label cbfeb@r))) (let ((cbff4@type (cbb9a@binding-type cbff2@b))) (begin (if (not cbff0@label) (cbb9e@raise-unbound-error cbfee@id) (void)) (let ((cbff6@t cbff4@type)) (if (memv cbff6@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values cbff4@type (cbb9c@binding-value cbff2@b) cbfee@id) (values 'other '#f '#f)))))))) (if (cbb70@syntax-pair? cbfea@e) (let ((cbff8@id (cbb78@syntax-car cbfea@e))) (if (cbb7e@id? cbff8@id) (let ((cbffa@label (cbb94@id->label cbff8@id))) (let ((cbffc@b (cbb96@label->binding cbffa@label cbfeb@r))) (let ((cbffe@type (cbb9a@binding-type cbffc@b))) (begin (if (not cbffa@label) (cbb9e@raise-unbound-error cbff8@id) (void)) (let ((cb1000@t cbffe@type)) (if (memv cb1000@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values cbffe@type (cbb9c@binding-value cbffc@b) cbff8@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((cb1002@d (cbb92@stx->datum cbfea@e))) (if (cbb8c@self-evaluating? cb1002@d) (values 'constant cb1002@d '#f) (values 'other '#f '#f))))))) (set! cb2816@cbba0@syntax-type cbba0@syntax-type) (set! cbbae@sanitize-binding (lambda (cb1004@x cb1005@src) (if (procedure? cb1004@x) (cons* 'local-macro cb1004@x cb1005@src) (if (and (pair? cb1004@x) (eq? (car cb1004@x) 'macro!) (procedure? (cdr cb1004@x))) (cons* 'local-macro! (cdr cb1004@x) cb1005@src) (if (and (pair? cb1004@x) (eq? (car cb1004@x) '$rtd)) cb1004@x (assertion-violation 'expand '"invalid transformer" cb1004@x)))))) (set! cb2817@cbbae@sanitize-binding cbbae@sanitize-binding) (set! cbbb0@make-variable-transformer (lambda (cb1008@x) (if (procedure? cb1008@x) (cons 'macro! cb1008@x) (assertion-violation 'make-variable-transformer '"not a procedure" cb1008@x)))) (set! cb2818@cbbb0@make-variable-transformer cbbb0@make-variable-transformer) (set! cbbb2@variable-transformer? (lambda (cb100a@x) (and (pair? cb100a@x) (eq? (car cb100a@x) 'macro!) (procedure? (cdr cb100a@x))))) (set! cb2819@cbbb2@variable-transformer? cbbb2@variable-transformer?) (set! cbbb4@variable-transformer-procedure (lambda (cb100c@x) (if (cbbb2@variable-transformer? cb100c@x) (cdr cb100c@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" cb100c@x)))) (set! cb281a@cbbb4@variable-transformer-procedure cbbb4@variable-transformer-procedure) (set! cbbb6@make-eval-transformer (lambda (cb100e@x) (cbbae@sanitize-binding (eval-core (cb71e@cb6d6@expanded->core cb100e@x)) cb100e@x))) (set! cb281b@cbbb6@make-eval-transformer cbbb6@make-eval-transformer) (set! cbd07@parse-define (lambda (cb1010@x) (let ((cb1012@t cb1010@x)) (let ((cb1014@ls/false (cbd85@syntax-dispatch cb1012@t '(_ (any . any) any . each-any)))) (if (and cb1014@ls/false (apply (lambda (cb1016@id cb1017@fmls cb1018@b cb1019@b*) (cbb7e@id? cb1016@id)) cb1014@ls/false)) (apply (lambda (cb101e@id cb101f@fmls cb1020@b cb1021@b*) (begin (cbdab@verify-formals cb101f@fmls cb1010@x) (values cb101e@id (cons 'defun (cons cb101f@fmls (cons cb1020@b cb1021@b*)))))) cb1014@ls/false) (let ((cb1026@t cb1012@t)) (let ((cb1028@ls/false (cbd85@syntax-dispatch cb1026@t '(_ any any)))) (if (and cb1028@ls/false (apply (lambda (cb102a@id cb102b@val) (cbb7e@id? cb102a@id)) cb1028@ls/false)) (apply (lambda (cb102e@id cb102f@val) (values cb102e@id (cons 'expr cb102f@val))) cb1028@ls/false) (let ((cb1032@t cb1026@t)) (let ((cb1034@ls/false (cbd85@syntax-dispatch cb1032@t '(_ any)))) (if (and cb1034@ls/false (apply (lambda (cb1036@id) (cbb7e@id? cb1036@id)) cb1034@ls/false)) (apply (lambda (cb1038@id) (values cb1038@id (cons 'expr (cbd3b@bless '(void))))) cb1034@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1032@t)))))))))))) (set! cb281c@cbd07@parse-define cbd07@parse-define) (set! cbd09@parse-define-syntax (lambda (cb103a@x) (let ((cb103c@t cb103a@x)) (let ((cb103e@ls/false (cbd85@syntax-dispatch cb103c@t '(_ any any)))) (if (and cb103e@ls/false (apply (lambda (cb1040@id cb1041@val) (cbb7e@id? cb1040@id)) cb103e@ls/false)) (apply (lambda (cb1044@id cb1045@val) (values cb1044@id cb1045@val)) cb103e@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb103c@t)))))) (set! cb281d@cbd09@parse-define-syntax cbd09@parse-define-syntax) (set! cbd0b@scheme-stx-hashtable (make-eq-hashtable)) (set! cb281e@cbd0b@scheme-stx-hashtable cbd0b@scheme-stx-hashtable) (set! cbd0d@scheme-stx (lambda (cb1048@sym) (or (hashtable-ref cbd0b@scheme-stx-hashtable cb1048@sym '#f) (let ((cb104a@subst (cb96f@cb798@library-subst (cb98d@cb7d4@find-library-by-name '(psyntax system $all))))) (let ((cb104c@stx (make-simple-struct 'stx '5 (list cb1048@sym cbb02@top-mark* '() '())))) (let ((cb104e@stx (let ((cb1050@t (assq cb1048@sym cb104a@subst))) (if cb1050@t ((lambda (cb1052@x) (let ((cb1054@name (car cb1052@x)) (cb1055@label (cdr cb1052@x))) (cbb6a@add-subst (make-simple-struct 'rib '6 (list (list cb1054@name) (list cbb02@top-mark*) (list cb1055@label) '#f '#f)) cb104c@stx))) cb1050@t) cb104c@stx)))) (begin (hashtable-set! cbd0b@scheme-stx-hashtable cb1048@sym cb104e@stx) cb104e@stx))))))) (set! cb281f@cbd0d@scheme-stx cbd0d@scheme-stx) (set! cbd0f@lexical-var car) (set! cb2820@cbd0f@lexical-var cbd0f@lexical-var) (set! cbd11@lexical-mutable? cdr) (set! cb2821@cbd11@lexical-mutable? cbd11@lexical-mutable?) (set! cbd13@set-lexical-mutable! set-cdr!) (set! cb2822@cbd13@set-lexical-mutable! cbd13@set-lexical-mutable!) (set! cbd15@add-lexical (lambda (cb1058@lab cb1059@lex cb105a@r) (cons (cons* cb1058@lab 'lexical cb1059@lex '#f) cb105a@r))) (set! cb2823@cbd15@add-lexical cbd15@add-lexical) (set! cbd17@add-lexicals (lambda (cb105e@lab* cb105f@lex* cb1060@r) (if (null? cb105e@lab*) cb1060@r (cbd17@add-lexicals (cdr cb105e@lab*) (cdr cb105f@lex*) (cbd15@add-lexical (car cb105e@lab*) (car cb105f@lex*) cb1060@r))))) (set! cb2824@cbd17@add-lexicals cbd17@add-lexicals) (set! cbd19@letrec-helper (lambda (cb1064@e cb1065@r cb1066@mr cb1067@build) (let ((cb106c@t cb1064@e)) (let ((cb106e@ls/false (cbd85@syntax-dispatch cb106c@t '(_ #(each (any any)) any . each-any)))) (if cb106e@ls/false (apply (lambda (cb1070@lhs* cb1071@rhs* cb1072@b cb1073@b*) (if (not (cbb86@valid-bound-ids? cb1070@lhs*)) (cbd3f@invalid-fmls-error cb1064@e cb1070@lhs*) (let ((cb1078@lex* (map cbb06@gen-lexical cb1070@lhs*)) (cb1079@lab* (map cbb0a@gen-label cb1070@lhs*))) (let ((cb107c@rib (cbb3e@make-full-rib cb1070@lhs* cb1079@lab*)) (cb107d@r (cbd17@add-lexicals cb1079@lab* cb1078@lex* cb1065@r))) (let ((cb1080@body (cbdbd@chi-internal (cbb6a@add-subst cb107c@rib (cons cb1072@b cb1073@b*)) cb107d@r cb1066@mr)) (cb1081@rhs* (cbda3@chi-expr* (map (lambda (cb1084@x) (cbb6a@add-subst cb107c@rib cb1084@x)) cb1071@rhs*) cb107d@r cb1066@mr))) (cb1067@build '#f cb1078@lex* cb1081@rhs* cb1080@body)))))) cb106e@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb106c@t)))))) (set! cb2825@cbd19@letrec-helper cbd19@letrec-helper) (set! cbd1b@let-transformer (lambda (cb1086@e cb1087@r cb1088@mr) (let ((cb108c@t cb1086@e)) (let ((cb108e@ls/false (cbd85@syntax-dispatch cb108c@t '(_ #(each (any any)) any . each-any)))) (if cb108e@ls/false (apply (lambda (cb1090@lhs* cb1091@rhs* cb1092@b cb1093@b*) (if (not (cbb86@valid-bound-ids? cb1090@lhs*)) (cbd3f@invalid-fmls-error cb1086@e cb1090@lhs*) (let ((cb1098@lex* (map cbb06@gen-lexical cb1090@lhs*)) (cb1099@lab* (map cbb0a@gen-label cb1090@lhs*)) (cb109a@rhs* (cbda3@chi-expr* cb1091@rhs* cb1087@r cb1088@mr))) (let ((cb109e@rib (cbb3e@make-full-rib cb1090@lhs* cb1099@lab*)) (cb109f@r (cbd17@add-lexicals cb1099@lab* cb1098@lex* cb1087@r))) (let ((cb10a2@body (cbdbd@chi-internal (cbb6a@add-subst cb109e@rib (cons cb1092@b cb1093@b*)) cb109f@r cb1088@mr))) (cbae6@cba43@build-let '#f cb1098@lex* cb109a@rhs* cb10a2@body)))))) cb108e@ls/false) (let ((cb10a4@t cb108c@t)) (let ((cb10a6@ls/false (cbd85@syntax-dispatch cb10a4@t '(_ any #(each (any any)) any . each-any)))) (if cb10a6@ls/false (apply (lambda (cb10a8@loop cb10a9@lhs* cb10aa@rhs* cb10ab@b cb10ac@b*) (if (not (cbb86@valid-bound-ids? cb10a9@lhs*)) (cbd3f@invalid-fmls-error cb1086@e cb10a9@lhs*) (let ((cb10b2@lex* (map cbb06@gen-lexical cb10a9@lhs*)) (cb10b3@lab* (map cbb0a@gen-label cb10a9@lhs*)) (cb10b4@rhs* (cbda3@chi-expr* cb10aa@rhs* cb1087@r cb1088@mr)) (cb10b5@loop-lex (cbb06@gen-lexical cb10a8@loop)) (cb10b6@loop-lab (cbb0a@gen-label cb10a8@loop))) (let ((cb10bc@loop-rib (cbb3e@make-full-rib (list cb10a8@loop) (list cb10b6@loop-lab))) (cb10bd@rib (cbb3e@make-full-rib cb10a9@lhs* cb10b3@lab*)) (cb10be@r (cbd17@add-lexicals (cons cb10b6@loop-lab cb10b3@lab*) (cons cb10b5@loop-lex cb10b2@lex*) cb1087@r))) (let ((cb10c2@body (cbdbd@chi-internal (cbb6a@add-subst cb10bc@loop-rib (cbb6a@add-subst cb10bd@rib (cons cb10ab@b cb10ac@b*))) cb10be@r cb1088@mr))) (cbae7@cba45@build-named-let '#f cb10b5@loop-lex cb10b2@lex* cb10b4@rhs* cb10c2@body)))))) cb10a6@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb10a4@t))))))))) (set! cb2826@cbd1b@let-transformer cbd1b@let-transformer) (set! cbd1d@letrec-transformer (lambda (cb10c4@e cb10c5@r cb10c6@mr) (cbd19@letrec-helper cb10c4@e cb10c5@r cb10c6@mr cbae5@cba41@build-letrec))) (set! cb2827@cbd1d@letrec-transformer cbd1d@letrec-transformer) (set! cbd1f@letrec*-transformer (lambda (cb10ca@e cb10cb@r cb10cc@mr) (cbd19@letrec-helper cb10ca@e cb10cb@r cb10cc@mr cbae8@cba47@build-letrec*))) (set! cb2828@cbd1f@letrec*-transformer cbd1f@letrec*-transformer) (set! cbd21@fluid-let-syntax-transformer (lambda (cb10d0@e cb10d1@r cb10d2@mr) (let ((cb10d7@lookup '#f)) (begin (set! cb10d7@lookup (lambda (cb10ea@x) (or (cbb94@id->label cb10ea@x) (cbe65@syntax-violation '#f '"unbound identifier" cb10d0@e cb10ea@x)))) (let ((cb10d8@t cb10d0@e)) (let ((cb10da@ls/false (cbd85@syntax-dispatch cb10d8@t '(_ #(each (any any)) any . each-any)))) (if cb10da@ls/false (apply (lambda (cb10dc@lhs* cb10dd@rhs* cb10de@b cb10df@b*) (if (not (cbb86@valid-bound-ids? cb10dc@lhs*)) (cbd3f@invalid-fmls-error cb10d0@e cb10dc@lhs*) (let ((cb10e4@lab* (map cb10d7@lookup cb10dc@lhs*)) (cb10e5@rhs* (map (lambda (cb10e8@x) (cbbb6@make-eval-transformer (cbddf@expand-transformer cb10e8@x cb10d2@mr))) cb10dd@rhs*))) (cbdbd@chi-internal (cons cb10de@b cb10df@b*) (append (map cons cb10e4@lab* cb10e5@rhs*) cb10d1@r) (append (map cons cb10e4@lab* cb10e5@rhs*) cb10d2@mr))))) cb10da@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb10d8@t)))))))) (set! cb2829@cbd21@fluid-let-syntax-transformer cbd21@fluid-let-syntax-transformer) (set! cbd23@type-descriptor-transformer (lambda (cb10ec@e cb10ed@r cb10ee@mr) (let ((cb10f2@t cb10ec@e)) (let ((cb10f4@ls/false (cbd85@syntax-dispatch cb10f2@t '(_ any)))) (if (and cb10f4@ls/false (apply (lambda (cb10f6@id) (cbb7e@id? cb10f6@id)) cb10f4@ls/false)) (apply (lambda (cb10f8@id) (let ((cb10fa@lab (cbb94@id->label cb10f8@id))) (let ((cb10fc@b (cbb96@label->binding cb10fa@lab cb10ed@r))) (let ((cb10fe@type (cbb9a@binding-type cb10fc@b))) (begin (if (not cb10fa@lab) (cbb9e@raise-unbound-error cb10f8@id) (void)) (if (not (and (eq? cb10fe@type '$rtd) (not (list? (cbb9c@binding-value cb10fc@b))))) (cbe65@syntax-violation '#f '"not a record type" cb10ec@e) (void)) (list 'quote (cbb9c@binding-value cb10fc@b))))))) cb10f4@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb10f2@t)))))) (set! cb282a@cbd23@type-descriptor-transformer cbd23@type-descriptor-transformer) (set! cbd25@record-type-descriptor-transformer (lambda (cb1100@e cb1101@r cb1102@mr) (let ((cb1106@t cb1100@e)) (let ((cb1108@ls/false (cbd85@syntax-dispatch cb1106@t '(_ any)))) (if (and cb1108@ls/false (apply (lambda (cb110a@id) (cbb7e@id? cb110a@id)) cb1108@ls/false)) (apply (lambda (cb110c@id) (let ((cb110e@lab (cbb94@id->label cb110c@id))) (let ((cb1110@b (cbb96@label->binding cb110e@lab cb1101@r))) (let ((cb1112@type (cbb9a@binding-type cb1110@b))) (begin (if (not cb110e@lab) (cbb9e@raise-unbound-error cb110c@id) (void)) (if (not (and (eq? cb1112@type '$rtd) (list? (cbb9c@binding-value cb1110@b)))) (cbe65@syntax-violation '#f '"not a record type" cb1100@e) (void)) (cbda7@chi-expr (car (cbb9c@binding-value cb1110@b)) cb1101@r cb1102@mr)))))) cb1108@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1106@t)))))) (set! cb282b@cbd25@record-type-descriptor-transformer cbd25@record-type-descriptor-transformer) (set! cbd27@record-constructor-descriptor-transformer (lambda (cb1114@e cb1115@r cb1116@mr) (let ((cb111a@t cb1114@e)) (let ((cb111c@ls/false (cbd85@syntax-dispatch cb111a@t '(_ any)))) (if (and cb111c@ls/false (apply (lambda (cb111e@id) (cbb7e@id? cb111e@id)) cb111c@ls/false)) (apply (lambda (cb1120@id) (let ((cb1122@lab (cbb94@id->label cb1120@id))) (let ((cb1124@b (cbb96@label->binding cb1122@lab cb1115@r))) (let ((cb1126@type (cbb9a@binding-type cb1124@b))) (begin (if (not cb1122@lab) (cbb9e@raise-unbound-error cb1120@id) (void)) (if (not (and (eq? cb1126@type '$rtd) (list? (cbb9c@binding-value cb1124@b)))) (cbe65@syntax-violation '#f '"invalid type" cb1114@e) (void)) (cbda7@chi-expr (cadr (cbb9c@binding-value cb1124@b)) cb1115@r cb1116@mr)))))) cb111c@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb111a@t)))))) (set! cb282c@cbd27@record-constructor-descriptor-transformer cbd27@record-constructor-descriptor-transformer) (set! cbd29@when-macro (lambda (cb1128@e) (let ((cb112a@t cb1128@e)) (let ((cb112c@ls/false (cbd85@syntax-dispatch cb112a@t '(_ any any . each-any)))) (if cb112c@ls/false (apply (lambda (cb112e@test cb112f@e cb1130@e*) (cbd3b@bless (list 'if cb112e@test (cons 'begin (cons cb112f@e cb1130@e*))))) cb112c@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb112a@t)))))) (set! cb282d@cbd29@when-macro cbd29@when-macro) (set! cbd2b@unless-macro (lambda (cb1134@e) (let ((cb1136@t cb1134@e)) (let ((cb1138@ls/false (cbd85@syntax-dispatch cb1136@t '(_ any any . each-any)))) (if cb1138@ls/false (apply (lambda (cb113a@test cb113b@e cb113c@e*) (cbd3b@bless (list 'if (list 'not cb113a@test) (cons 'begin (cons cb113b@e cb113c@e*))))) cb1138@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1136@t)))))) (set! cb282e@cbd2b@unless-macro cbd2b@unless-macro) (set! cbd2d@if-transformer (lambda (cb1140@e cb1141@r cb1142@mr) (let ((cb1146@t cb1140@e)) (let ((cb1148@ls/false (cbd85@syntax-dispatch cb1146@t '(_ any any any)))) (if cb1148@ls/false (apply (lambda (cb114a@e0 cb114b@e1 cb114c@e2) (list 'if (cbda7@chi-expr cb114a@e0 cb1141@r cb1142@mr) (cbda7@chi-expr cb114b@e1 cb1141@r cb1142@mr) (cbda7@chi-expr cb114c@e2 cb1141@r cb1142@mr))) cb1148@ls/false) (let ((cb1150@t cb1146@t)) (let ((cb1152@ls/false (cbd85@syntax-dispatch cb1150@t '(_ any any)))) (if cb1152@ls/false (apply (lambda (cb1154@e0 cb1155@e1) (list 'if (cbda7@chi-expr cb1154@e0 cb1141@r cb1142@mr) (cbda7@chi-expr cb1155@e1 cb1141@r cb1142@mr) (cbae4@cba3f@build-void))) cb1152@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1150@t))))))))) (set! cb282f@cbd2d@if-transformer cbd2d@if-transformer) (set! cbd2f@and-transformer (lambda (cb1158@e cb1159@r cb115a@mr) (let ((cb115e@t cb1158@e)) (let ((cb1160@ls/false (cbd85@syntax-dispatch cb115e@t '(_ . each-any)))) (if cb1160@ls/false (apply (lambda (cb1162@e*) (cons 'and (cbda3@chi-expr* cb1162@e* cb1159@r cb115a@mr))) cb1160@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb115e@t)))))) (set! cb2830@cbd2f@and-transformer cbd2f@and-transformer) (set! cbd31@or-transformer (lambda (cb1164@e cb1165@r cb1166@mr) (let ((cb116a@t cb1164@e)) (let ((cb116c@ls/false (cbd85@syntax-dispatch cb116a@t '(_ . each-any)))) (if cb116c@ls/false (apply (lambda (cb116e@e*) (cons 'or (cbda3@chi-expr* cb116e@e* cb1165@r cb1166@mr))) cb116c@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb116a@t)))))) (set! cb2831@cbd31@or-transformer cbd31@or-transformer) (set! cbd33@case-macro (lambda (cb1170@e) (let ((cb1173@build-last '#f) (cb1175@build-one '#f)) (begin (set! cb1173@build-last (lambda (cb119a@cls) (let ((cb119c@t cb119a@cls)) (let ((cb119e@ls/false (cbd85@syntax-dispatch cb119c@t '(#(scheme-id else) any . each-any)))) (if cb119e@ls/false (apply (lambda (cb11a0@e cb11a1@e*) (cons 'begin (cons cb11a0@e cb11a1@e*))) cb119e@ls/false) (let ((cb11a4@t cb119c@t)) (let ((cb11a6@ls/false (cbd85@syntax-dispatch cb11a4@t '_))) (if cb11a6@ls/false (apply (lambda () (cb1175@build-one cb119a@cls '(if #f #f))) cb11a6@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb11a4@t))))))))) (set! cb1175@build-one (lambda (cb118c@cls cb118d@k) (let ((cb1190@t cb118c@cls)) (let ((cb1192@ls/false (cbd85@syntax-dispatch cb1190@t '(each-any any . each-any)))) (if cb1192@ls/false (apply (lambda (cb1194@d* cb1195@e cb1196@e*) (list 'if (list 'memv 't (list 'quote cb1194@d*)) (cons 'begin (cons cb1195@e cb1196@e*)) cb118d@k)) cb1192@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1190@t)))))) (let ((cb1176@t cb1170@e)) (let ((cb1178@ls/false (cbd85@syntax-dispatch cb1176@t '(_ any)))) (if cb1178@ls/false (apply (lambda (cb117a@expr) (cbd3b@bless (cons 'let (cons (list (list 't cb117a@expr)) '((if #f #f)))))) cb1178@ls/false) (let ((cb117c@t cb1176@t)) (let ((cb117e@ls/false (cbd85@syntax-dispatch cb117c@t '(_ any any . each-any)))) (if cb117e@ls/false (apply (lambda (cb1180@expr cb1181@cls cb1182@cls*) (cbd3b@bless (list 'let (list (list 't cb1180@expr)) (let cb118a@f ((cb1186@cls cb1181@cls) (cb1187@cls* cb1182@cls*)) (if (null? cb1187@cls*) (cb1173@build-last cb1186@cls) (cb1175@build-one cb1186@cls (cb118a@f (car cb1187@cls*) (cdr cb1187@cls*)))))))) cb117e@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb117c@t))))))))))) (set! cb2832@cbd33@case-macro cbd33@case-macro) (set! cbd35@quote-transformer (lambda (cb11a8@e cb11a9@r cb11aa@mr) (let ((cb11ae@t cb11a8@e)) (let ((cb11b0@ls/false (cbd85@syntax-dispatch cb11ae@t '(_ any)))) (if cb11b0@ls/false (apply (lambda (cb11b2@datum) (list 'quote (cbb92@stx->datum cb11b2@datum))) cb11b0@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb11ae@t)))))) (set! cb2833@cbd35@quote-transformer cbd35@quote-transformer) (set! cbd37@case-lambda-transformer (lambda (cb11b4@e cb11b5@r cb11b6@mr) (let ((cb11ba@t cb11b4@e)) (let ((cb11bc@ls/false (cbd85@syntax-dispatch cb11ba@t '(_ . #(each (any any . each-any)))))) (if cb11bc@ls/false (apply (lambda (cb11be@fmls* cb11bf@b* cb11c0@b**) (call-with-values (lambda () (cbdaf@chi-lambda-clause* cb11b4@e cb11be@fmls* (map cons cb11bf@b* cb11c0@b**) cb11b5@r cb11b6@mr)) (lambda (cb11c8@cb11c5 cb11c9@cb11c7) (let ((cb11cc@body* cb11c9@cb11c7) (cb11cd@fmls* cb11c8@cb11c5)) (cbae2@cba0f@build-case-lambda '#f cb11cd@fmls* cb11cc@body*))))) cb11bc@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb11ba@t)))))) (set! cb2834@cbd37@case-lambda-transformer cbd37@case-lambda-transformer) (set! cbd39@lambda-transformer (lambda (cb11d0@e cb11d1@r cb11d2@mr) (let ((cb11d6@t cb11d0@e)) (let ((cb11d8@ls/false (cbd85@syntax-dispatch cb11d6@t '(_ any any . each-any)))) (if cb11d8@ls/false (apply (lambda (cb11da@fmls cb11db@b cb11dc@b*) (call-with-values (lambda () (cbdad@chi-lambda-clause cb11d0@e cb11da@fmls (cons cb11db@b cb11dc@b*) cb11d1@r cb11d2@mr)) (lambda (cb11e4@cb11e1 cb11e5@cb11e3) (let ((cb11e8@body cb11e5@cb11e3) (cb11e9@fmls cb11e4@cb11e1)) (cbae1@cba0d@build-lambda '#f cb11e9@fmls cb11e8@body))))) cb11d8@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb11d6@t)))))) (set! cb2835@cbd39@lambda-transformer cbd39@lambda-transformer) (set! cbd3b@bless (lambda (cb11ec@x) (cbb66@mkstx (let cb11f0@f ((cb11ee@x cb11ec@x)) (if (cbb4a@stx? cb11ee@x) cb11ee@x (if (pair? cb11ee@x) (cons (cb11f0@f (car cb11ee@x)) (cb11f0@f (cdr cb11ee@x))) (if (symbol? cb11ee@x) (cbd0d@scheme-stx cb11ee@x) (if (vector? cb11ee@x) (vector-map cb11f0@f cb11ee@x) cb11ee@x))))) '() '() '()))) (set! cb2836@cbd3b@bless cbd3b@bless) (set! cbd3d@with-syntax-macro (lambda (cb11f2@e) (let ((cb11f4@t cb11f2@e)) (let ((cb11f6@ls/false (cbd85@syntax-dispatch cb11f4@t '(_ #(each (any any)) any . each-any)))) (if cb11f6@ls/false (apply (lambda (cb11f8@pat* cb11f9@expr* cb11fa@b cb11fb@b*) (let ((cb1200@idn* (let cb1204@f ((cb1202@pat* cb11f8@pat*)) (if (null? cb1202@pat*) '() (call-with-values (lambda () (cbd83@convert-pattern (car cb1202@pat*) '())) (lambda (cb120a@cb1207 cb120b@cb1209) (let ((cb120e@idn* cb120b@cb1209) (cb120f@pat cb120a@cb1207)) (append cb120e@idn* (cb1204@f (cdr cb1202@pat*)))))))))) (begin (cbdab@verify-formals (map car cb1200@idn*) cb11f2@e) (let ((cb1212@t* (cbe53@generate-temporaries cb11f9@expr*))) (cbd3b@bless (list 'let (map list cb1212@t* cb11f9@expr*) (let cb1218@f ((cb1214@pat* cb11f8@pat*) (cb1215@t* cb1212@t*)) (if (null? cb1214@pat*) (cons 'begin (cons '#f (cons cb11fa@b cb11fb@b*))) (list 'syntax-case (car cb1215@t*) '() (list (car cb1214@pat*) (cb1218@f (cdr cb1214@pat*) (cdr cb1215@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car cb1214@pat*)) (car cb1215@t*)))))))))))) cb11f6@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb11f4@t)))))) (set! cb2837@cbd3d@with-syntax-macro cbd3d@with-syntax-macro) (set! cbd3f@invalid-fmls-error (lambda (cb121a@stx cb121b@fmls) (let ((cb121e@t cb121b@fmls)) (let ((cb1220@ls/false (cbd85@syntax-dispatch cb121e@t '#(each+ any () any)))) (if cb1220@ls/false (apply (lambda (cb1222@id* cb1223@last) (let cb1228@f ((cb1226@id* (if (cbb7e@id? cb1223@last) (cons cb1223@last cb1222@id*) (if (cbb74@syntax-null? cb1223@last) cb1222@id* (cbe65@syntax-violation '#f '"not an identifier" cb121a@stx cb1223@last))))) (if (null? cb1226@id*) (values) (if (not (cbb7e@id? (car cb1226@id*))) (cbe65@syntax-violation '#f '"not an identifier" cb121a@stx (car cb1226@id*)) (begin (cb1228@f (cdr cb1226@id*)) (if (cbb8a@bound-id-member? (car cb1226@id*) (cdr cb1226@id*)) (cbe65@syntax-violation '#f '"duplicate binding" cb121a@stx (car cb1226@id*)) (void))))))) cb1220@ls/false) (let ((cb122a@t cb121e@t)) (let ((cb122c@ls/false (cbd85@syntax-dispatch cb122a@t '_))) (if cb122c@ls/false (apply (lambda () (cbe65@syntax-violation '#f '"malformed binding form" cb121a@stx cb121b@fmls)) cb122c@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb122a@t))))))))) (set! cb2838@cbd3f@invalid-fmls-error cbd3f@invalid-fmls-error) (set! cbd41@let-macro (lambda (cb122e@stx) (let ((cb1230@t cb122e@stx)) (let ((cb1232@ls/false (cbd85@syntax-dispatch cb1230@t '(_ #(each (any any)) any . each-any)))) (if cb1232@ls/false (apply (lambda (cb1234@lhs* cb1235@rhs* cb1236@b cb1237@b*) (if (cbb86@valid-bound-ids? cb1234@lhs*) (cbd3b@bless (cons (cons 'lambda (cons cb1234@lhs* (cons cb1236@b cb1237@b*))) cb1235@rhs*)) (cbd3f@invalid-fmls-error cb122e@stx cb1234@lhs*))) cb1232@ls/false) (let ((cb123c@t cb1230@t)) (let ((cb123e@ls/false (cbd85@syntax-dispatch cb123c@t '(_ any #(each (any any)) any . each-any)))) (if (and cb123e@ls/false (apply (lambda (cb1240@f cb1241@lhs* cb1242@rhs* cb1243@b cb1244@b*) (cbb7e@id? cb1240@f)) cb123e@ls/false)) (apply (lambda (cb124a@f cb124b@lhs* cb124c@rhs* cb124d@b cb124e@b*) (if (cbb86@valid-bound-ids? cb124b@lhs*) (cbd3b@bless (cons (list 'letrec (list (list cb124a@f (cons 'lambda (cons cb124b@lhs* (cons cb124d@b cb124e@b*))))) cb124a@f) cb124c@rhs*)) (cbd3f@invalid-fmls-error cb122e@stx cb124b@lhs*))) cb123e@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb123c@t))))))))) (set! cb2839@cbd41@let-macro cbd41@let-macro) (set! cbd43@let-values-macro (lambda (cb1254@stx) (let ((cb1257@rename '#f) (cb1259@rename* '#f)) (begin (set! cb1257@rename (lambda (cb12bc@x cb12bd@old* cb12be@new*) (begin (if (not (cbb7e@id? cb12bc@x)) (cbe65@syntax-violation '#f '"not an indentifier" cb1254@stx cb12bc@x) (void)) (if (cbb8a@bound-id-member? cb12bc@x cb12bd@old*) (cbe65@syntax-violation '#f '"duplicate binding" cb1254@stx cb12bc@x) (void)) (let ((cb12c2@y (gensym (cbe6b@syntax->datum cb12bc@x)))) (values cb12c2@y (cons cb12bc@x cb12bd@old*) (cons cb12c2@y cb12be@new*)))))) (set! cb1259@rename* (lambda (cb12aa@x* cb12ab@old* cb12ac@new*) (if (null? cb12aa@x*) (values '() cb12ab@old* cb12ac@new*) (call-with-values (lambda () (cb1257@rename (car cb12aa@x*) cb12ab@old* cb12ac@new*)) (lambda (cb12b0@x cb12b1@old* cb12b2@new*) (call-with-values (lambda () (cb1259@rename* (cdr cb12aa@x*) cb12b1@old* cb12b2@new*)) (lambda (cb12b6@x* cb12b7@old* cb12b8@new*) (values (cons cb12b0@x cb12b6@x*) cb12b7@old* cb12b8@new*)))))))) (let ((cb125a@t cb1254@stx)) (let ((cb125c@ls/false (cbd85@syntax-dispatch cb125a@t '(_ () any . each-any)))) (if cb125c@ls/false (apply (lambda (cb125e@b cb125f@b*) (cons* (cbd3b@bless 'let) '() cb125e@b cb125f@b*)) cb125c@ls/false) (let ((cb1262@t cb125a@t)) (let ((cb1264@ls/false (cbd85@syntax-dispatch cb1262@t '(_ #(each (any any)) any . each-any)))) (if cb1264@ls/false (apply (lambda (cb1266@lhs* cb1267@rhs* cb1268@b cb1269@b*) (cbd3b@bless (let cb1276@f ((cb126e@lhs* cb1266@lhs*) (cb126f@rhs* cb1267@rhs*) (cb1270@old* '()) (cb1271@new* '())) (if (null? cb126e@lhs*) (cons 'let (cons (map list cb1270@old* cb1271@new*) (cons cb1268@b cb1269@b*))) (let ((cb1278@t (car cb126e@lhs*))) (let ((cb127a@ls/false (cbd85@syntax-dispatch cb1278@t 'each-any))) (if cb127a@ls/false (apply (lambda (cb127c@x*) (call-with-values (lambda () (cb1259@rename* cb127c@x* cb1270@old* cb1271@new*)) (lambda (cb1284@cb127f cb1285@cb1281 cb1286@cb1283) (let ((cb128a@new* cb1286@cb1283) (cb128b@old* cb1285@cb1281) (cb128c@y* cb1284@cb127f)) (list 'call-with-values (list 'lambda '() (car cb126f@rhs*)) (list 'lambda cb128c@y* (cb1276@f (cdr cb126e@lhs*) (cdr cb126f@rhs*) cb128b@old* cb128a@new*))))))) cb127a@ls/false) (let ((cb1290@t cb1278@t)) (let ((cb1292@ls/false (cbd85@syntax-dispatch cb1290@t '#(each+ any () any)))) (if cb1292@ls/false (apply (lambda (cb1294@x* cb1295@x) (call-with-values (lambda () (cb1257@rename cb1295@x cb1270@old* cb1271@new*)) (lambda (cb1298@y cb1299@old* cb129a@new*) (call-with-values (lambda () (cb1259@rename* cb1294@x* cb1299@old* cb129a@new*)) (lambda (cb129e@y* cb129f@old* cb12a0@new*) (list 'call-with-values (list 'lambda '() (car cb126f@rhs*)) (list 'lambda (append cb129e@y* cb1298@y) (cb1276@f (cdr cb126e@lhs*) (cdr cb126f@rhs*) cb129f@old* cb12a0@new*)))))))) cb1292@ls/false) (let ((cb12a4@t cb1290@t)) (let ((cb12a6@ls/false (cbd85@syntax-dispatch cb12a4@t 'any))) (if cb12a6@ls/false (apply (lambda (cb12a8@others) (cbe65@syntax-violation '#f '"malformed bindings" cb1254@stx cb12a8@others)) cb12a6@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb12a4@t)))))))))))))) cb1264@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1262@t))))))))))) (set! cb283a@cbd43@let-values-macro cbd43@let-values-macro) (set! cbd45@let*-values-macro (lambda (cb12c4@stx) (let ((cb12c7@check '#f)) (begin (set! cb12c7@check (lambda (cb12f6@x*) (if (not (null? cb12f6@x*)) (let ((cb12f8@x (car cb12f6@x*))) (begin (if (not (cbb7e@id? cb12f8@x)) (cbe65@syntax-violation '#f '"not an identifier" cb12c4@stx cb12f8@x) (void)) (cb12c7@check (cdr cb12f6@x*)) (if (cbb8a@bound-id-member? cb12f8@x (cdr cb12f6@x*)) (cbe65@syntax-violation '#f '"duplicate identifier" cb12c4@stx cb12f8@x) (void)))) (void)))) (let ((cb12c8@t cb12c4@stx)) (let ((cb12ca@ls/false (cbd85@syntax-dispatch cb12c8@t '(_ () any . each-any)))) (if cb12ca@ls/false (apply (lambda (cb12cc@b cb12cd@b*) (cons* (cbd3b@bless 'let) '() cb12cc@b cb12cd@b*)) cb12ca@ls/false) (let ((cb12d0@t cb12c8@t)) (let ((cb12d2@ls/false (cbd85@syntax-dispatch cb12d0@t '(_ #(each (any any)) any . each-any)))) (if cb12d2@ls/false (apply (lambda (cb12d4@lhs* cb12d5@rhs* cb12d6@b cb12d7@b*) (cbd3b@bless (let cb12e0@f ((cb12dc@lhs* cb12d4@lhs*) (cb12dd@rhs* cb12d5@rhs*)) (if (null? cb12dc@lhs*) (cons 'begin (cons cb12d6@b cb12d7@b*)) (let ((cb12e2@t (car cb12dc@lhs*))) (let ((cb12e4@ls/false (cbd85@syntax-dispatch cb12e2@t 'each-any))) (if cb12e4@ls/false (apply (lambda (cb12e6@x*) (begin (cb12c7@check cb12e6@x*) (list 'call-with-values (list 'lambda '() (car cb12dd@rhs*)) (list 'lambda cb12e6@x* (cb12e0@f (cdr cb12dc@lhs*) (cdr cb12dd@rhs*)))))) cb12e4@ls/false) (let ((cb12e8@t cb12e2@t)) (let ((cb12ea@ls/false (cbd85@syntax-dispatch cb12e8@t '#(each+ any () any)))) (if cb12ea@ls/false (apply (lambda (cb12ec@x* cb12ed@x) (begin (cb12c7@check (cons cb12ed@x cb12ec@x*)) (list 'call-with-values (list 'lambda '() (car cb12dd@rhs*)) (list 'lambda (append cb12ec@x* cb12ed@x) (cb12e0@f (cdr cb12dc@lhs*) (cdr cb12dd@rhs*)))))) cb12ea@ls/false) (let ((cb12f0@t cb12e8@t)) (let ((cb12f2@ls/false (cbd85@syntax-dispatch cb12f0@t 'any))) (if cb12f2@ls/false (apply (lambda (cb12f4@others) (cbe65@syntax-violation '#f '"malformed bindings" cb12c4@stx cb12f4@others)) cb12f2@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb12f0@t)))))))))))))) cb12d2@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb12d0@t))))))))))) (set! cb283b@cbd45@let*-values-macro cbd45@let*-values-macro) (set! cbd47@trace-lambda-macro (lambda (cb12fa@stx) (let ((cb12fc@t cb12fa@stx)) (let ((cb12fe@ls/false (cbd85@syntax-dispatch cb12fc@t '(_ any each-any any . each-any)))) (if cb12fe@ls/false (apply (lambda (cb1300@who cb1301@fmls cb1302@b cb1303@b*) (if (cbb86@valid-bound-ids? cb1301@fmls) (cbd3b@bless (list 'make-traced-procedure (list 'quote cb1300@who) (cons 'lambda (cons cb1301@fmls (cons cb1302@b cb1303@b*))))) (cbd3f@invalid-fmls-error cb12fa@stx cb1301@fmls))) cb12fe@ls/false) (let ((cb1308@t cb12fc@t)) (let ((cb130a@ls/false (cbd85@syntax-dispatch cb1308@t '(_ any #(each+ any () any) any . each-any)))) (if cb130a@ls/false (apply (lambda (cb130c@who cb130d@fmls cb130e@last cb130f@b cb1310@b*) (if (cbb86@valid-bound-ids? (cons cb130e@last cb130d@fmls)) (cbd3b@bless (list 'make-traced-procedure (list 'quote cb130c@who) (cons 'lambda (cons (append cb130d@fmls cb130e@last) (cons cb130f@b cb1310@b*))))) (cbd3f@invalid-fmls-error cb12fa@stx (append cb130d@fmls cb130e@last)))) cb130a@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1308@t))))))))) (set! cb283c@cbd47@trace-lambda-macro cbd47@trace-lambda-macro) (set! cbd49@trace-define-macro (lambda (cb1316@stx) (let ((cb1318@t cb1316@stx)) (let ((cb131a@ls/false (cbd85@syntax-dispatch cb1318@t '(_ (any . each-any) any . each-any)))) (if cb131a@ls/false (apply (lambda (cb131c@who cb131d@fmls cb131e@b cb131f@b*) (if (cbb86@valid-bound-ids? cb131d@fmls) (cbd3b@bless (list 'define cb131c@who (list 'make-traced-procedure (list 'quote cb131c@who) (cons 'lambda (cons cb131d@fmls (cons cb131e@b cb131f@b*)))))) (cbd3f@invalid-fmls-error cb1316@stx cb131d@fmls))) cb131a@ls/false) (let ((cb1324@t cb1318@t)) (let ((cb1326@ls/false (cbd85@syntax-dispatch cb1324@t '(_ (any . #(each+ any () any)) any . each-any)))) (if cb1326@ls/false (apply (lambda (cb1328@who cb1329@fmls cb132a@last cb132b@b cb132c@b*) (if (cbb86@valid-bound-ids? (cons cb132a@last cb1329@fmls)) (cbd3b@bless (list 'define cb1328@who (list 'make-traced-procedure (list 'quote cb1328@who) (cons 'lambda (cons (append cb1329@fmls cb132a@last) (cons cb132b@b cb132c@b*)))))) (cbd3f@invalid-fmls-error cb1316@stx (append cb1329@fmls cb132a@last)))) cb1326@ls/false) (let ((cb1332@t cb1324@t)) (let ((cb1334@ls/false (cbd85@syntax-dispatch cb1332@t '(_ any any)))) (if cb1334@ls/false (apply (lambda (cb1336@who cb1337@expr) (if (cbb7e@id? cb1336@who) (cbd3b@bless (list 'define cb1336@who (list 'let (list (list 'v cb1337@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote cb1336@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (cbe65@syntax-violation '#f '"invalid name" cb1316@stx))) cb1334@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1332@t)))))))))))) (set! cb283d@cbd49@trace-define-macro cbd49@trace-define-macro) (set! cbd4b@trace-define-syntax-macro (lambda (cb133a@stx) (let ((cb133c@t cb133a@stx)) (let ((cb133e@ls/false (cbd85@syntax-dispatch cb133c@t '(_ any any)))) (if cb133e@ls/false (apply (lambda (cb1340@who cb1341@expr) (if (cbb7e@id? cb1340@who) (cbd3b@bless (list 'define-syntax cb1340@who (list 'make-traced-macro (list 'quote cb1340@who) cb1341@expr))) (cbe65@syntax-violation '#f '"invalid name" cb133a@stx))) cb133e@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb133c@t)))))) (set! cb283e@cbd4b@trace-define-syntax-macro cbd4b@trace-define-syntax-macro) (set! cbd4d@trace-let/rec-syntax (lambda (cb1344@who) (lambda (cb1346@stx) (let ((cb1348@t cb1346@stx)) (let ((cb134a@ls/false (cbd85@syntax-dispatch cb1348@t '(_ #(each (any any)) any . each-any)))) (if cb134a@ls/false (apply (lambda (cb134c@lhs* cb134d@rhs* cb134e@b cb134f@b*) (if (cbb86@valid-bound-ids? cb134c@lhs*) (let ((cb1354@rhs* (map (lambda (cb1356@lhs cb1357@rhs) (list 'make-traced-macro (list 'quote cb1356@lhs) cb1357@rhs)) cb134c@lhs* cb134d@rhs*))) (cbd3b@bless (cons cb1344@who (cons (map list cb134c@lhs* cb1354@rhs*) (cons cb134e@b cb134f@b*))))) (cbd3f@invalid-fmls-error cb1346@stx cb134c@lhs*))) cb134a@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1348@t))))))) (set! cb283f@cbd4d@trace-let/rec-syntax cbd4d@trace-let/rec-syntax) (set! cbd4f@trace-let-syntax-macro (cbd4d@trace-let/rec-syntax 'let-syntax)) (set! cb2840@cbd4f@trace-let-syntax-macro cbd4f@trace-let-syntax-macro) (set! cbd51@trace-letrec-syntax-macro (cbd4d@trace-let/rec-syntax 'letrec-syntax)) (set! cb2841@cbd51@trace-letrec-syntax-macro cbd51@trace-letrec-syntax-macro) (set! cbd53@guard-macro (lambda (cb135a@x) (let ((cb135d@gen-clauses '#f)) (begin (set! cb135d@gen-clauses (lambda (cb1374@con cb1375@outerk cb1376@clause*) (let ((cb137b@f '#f) (cb137d@f* '#f)) (begin (set! cb137b@f (lambda (cb13b4@x cb13b5@k) (let ((cb13b8@t cb13b4@x)) (let ((cb13ba@ls/false (cbd85@syntax-dispatch cb13b8@t '(any #(scheme-id =>) any)))) (if cb13ba@ls/false (apply (lambda (cb13bc@e cb13bd@p) (let ((cb13c0@t (gensym))) (list 'let (list (list cb13c0@t cb13bc@e)) (list 'if cb13c0@t (list cb13bd@p cb13c0@t) cb13b5@k)))) cb13ba@ls/false) (let ((cb13c2@t cb13b8@t)) (let ((cb13c4@ls/false (cbd85@syntax-dispatch cb13c2@t '(any)))) (if cb13c4@ls/false (apply (lambda (cb13c6@e) (let ((cb13c8@t (gensym))) (list 'let (list (list cb13c8@t cb13c6@e)) (list 'if cb13c8@t cb13c8@t cb13b5@k)))) cb13c4@ls/false) (let ((cb13ca@t cb13c2@t)) (let ((cb13cc@ls/false (cbd85@syntax-dispatch cb13ca@t '(any any . each-any)))) (if cb13cc@ls/false (apply (lambda (cb13ce@e cb13cf@v cb13d0@v*) (list 'if cb13ce@e (cons 'begin (cons cb13cf@v cb13d0@v*)) cb13b5@k)) cb13cc@ls/false) (let ((cb13d4@t cb13ca@t)) (let ((cb13d6@ls/false (cbd85@syntax-dispatch cb13d4@t '_))) (if cb13d6@ls/false (apply (lambda () (cbe65@syntax-violation '#f '"invalid guard clause" cb13b4@x)) cb13d6@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb13d4@t))))))))))))))) (set! cb137d@f* (lambda (cb138a@x*) (let ((cb138c@t cb138a@x*)) (let ((cb138e@ls/false (cbd85@syntax-dispatch cb138c@t '()))) (if cb138e@ls/false (apply (lambda () (let ((cb1390@g (gensym))) (values (list cb1390@g (list 'lambda '() (list 'raise-continuable cb1374@con))) cb1390@g))) cb138e@ls/false) (let ((cb1392@t cb138c@t)) (let ((cb1394@ls/false (cbd85@syntax-dispatch cb1392@t '((#(scheme-id else) any . each-any))))) (if cb1394@ls/false (apply (lambda (cb1396@e cb1397@e*) (values (cons 'begin (cons cb1396@e cb1397@e*)) '#f)) cb1394@ls/false) (let ((cb139a@t cb1392@t)) (let ((cb139c@ls/false (cbd85@syntax-dispatch cb139a@t '(any . any)))) (if cb139c@ls/false (apply (lambda (cb139e@cls cb139f@cls*) (call-with-values (lambda () (cb137d@f* cb139f@cls*)) (lambda (cb13a6@cb13a3 cb13a7@cb13a5) (let ((cb13aa@g cb13a7@cb13a5) (cb13ab@e cb13a6@cb13a3)) (values (cb137b@f cb139e@cls cb13ab@e) cb13aa@g))))) cb139c@ls/false) (let ((cb13ae@t cb139a@t)) (let ((cb13b0@ls/false (cbd85@syntax-dispatch cb13ae@t 'any))) (if cb13b0@ls/false (apply (lambda (cb13b2@others) (cbe65@syntax-violation '#f '"invalid guard clause" cb13b2@others)) cb13b0@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb13ae@t))))))))))))))) (call-with-values (lambda () (cb137d@f* cb1376@clause*)) (lambda (cb1382@cb137f cb1383@cb1381) (let ((cb1386@raisek cb1383@cb1381) (cb1387@code cb1382@cb137f)) (if cb1386@raisek (list (list 'call/cc (list 'lambda (list cb1386@raisek) (list cb1375@outerk (list 'lambda '() cb1387@code))))) (list cb1375@outerk (list 'lambda '() cb1387@code)))))))))) (let ((cb135e@t cb135a@x)) (let ((cb1360@ls/false (cbd85@syntax-dispatch cb135e@t '(_ (any . each-any) any . each-any)))) (if (and cb1360@ls/false (apply (lambda (cb1362@con cb1363@clause* cb1364@b cb1365@b*) (cbb7e@id? cb1362@con)) cb1360@ls/false)) (apply (lambda (cb136a@con cb136b@clause* cb136c@b cb136d@b*) (let ((cb1372@outerk (gensym))) (cbd3b@bless (list (list 'call/cc (list 'lambda (list cb1372@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list cb136a@con) (cb135d@gen-clauses cb136a@con cb1372@outerk cb136b@clause*)) (cons 'lambda (cons '() (cons cb136c@b cb136d@b*))))))))))) cb1360@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb135e@t)))))))) (set! cb2842@cbd53@guard-macro cbd53@guard-macro) (set! cbd55@define-enumeration-macro (lambda (cb13d8@stx) (let ((cb13db@set? '#f) (cb13dd@remove-dups '#f)) (begin (set! cb13db@set? (lambda (cb13f4@x) (or (null? cb13f4@x) (and (not (memq (car cb13f4@x) (cdr cb13f4@x))) (cb13db@set? (cdr cb13f4@x)))))) (set! cb13dd@remove-dups (lambda (cb13f2@ls) (if (null? cb13f2@ls) '() (cons (car cb13f2@ls) (cb13dd@remove-dups (remq (car cb13f2@ls) (cdr cb13f2@ls))))))) (let ((cb13de@t cb13d8@stx)) (let ((cb13e0@ls/false (cbd85@syntax-dispatch cb13de@t '(_ any each-any any)))) (if (and cb13e0@ls/false (apply (lambda (cb13e2@name cb13e3@id* cb13e4@maker) (and (cbb7e@id? cb13e2@name) (cbb7e@id? cb13e4@maker) (for-all cbb7e@id? cb13e3@id*))) cb13e0@ls/false)) (apply (lambda (cb13e8@name cb13e9@id* cb13ea@maker) (let ((cb13ee@name* (cb13dd@remove-dups (cbe6b@syntax->datum cb13e9@id*))) (cb13ef@mk (gensym))) (cbd3b@bless (list 'begin (list 'define cb13ef@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote cb13ee@name*)))) (list 'define-syntax cb13e8@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote cb13ee@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote cb13e8@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax cb13ea@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote cb13ea@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote cb13ee@name*)) (cons 'syntax-violation (cons (list 'quote cb13ea@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons cb13ef@mk '('(n* ...))))))))))))) cb13e0@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb13de@t)))))))) (set! cb2843@cbd55@define-enumeration-macro cbd55@define-enumeration-macro) (set! cbd57@time-macro (lambda (cb13f6@stx) (let ((cb13f8@t cb13f6@stx)) (let ((cb13fa@ls/false (cbd85@syntax-dispatch cb13f8@t '(_ any)))) (if cb13fa@ls/false (apply (lambda (cb13fc@expr) (cbd3b@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() cb13fc@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) cb13fa@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb13f8@t)))))) (set! cb2844@cbd57@time-macro cbd57@time-macro) (set! cbd59@delay-macro (lambda (cb13fe@stx) (let ((cb1400@t cb13fe@stx)) (let ((cb1402@ls/false (cbd85@syntax-dispatch cb1400@t '(_ any)))) (if cb1402@ls/false (apply (lambda (cb1404@expr) (cbd3b@bless (list 'make-promise (list 'lambda '() cb1404@expr)))) cb1402@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1400@t)))))) (set! cb2845@cbd59@delay-macro cbd59@delay-macro) (set! cbd5b@assert-macro (lambda (cb1406@stx) (let ((cb1408@t cb1406@stx)) (let ((cb140a@ls/false (cbd85@syntax-dispatch cb1408@t '(_ any)))) (if cb140a@ls/false (apply (lambda (cb140c@expr) (let ((cb140e@pos (or (cbe5d@expression-position cb1406@stx) (cbe5d@expression-position cb140c@expr)))) (cbd3b@bless (list 'let (list (list 'x cb140c@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote cb140c@expr) (list 'quote cb140e@pos))))))) cb140a@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1408@t)))))) (set! cb2846@cbd5b@assert-macro cbd5b@assert-macro) (set! cbd5d@endianness-macro (lambda (cb1410@stx) (let ((cb1412@t cb1410@stx)) (let ((cb1414@ls/false (cbd85@syntax-dispatch cb1412@t '(_ any)))) (if cb1414@ls/false (apply (lambda (cb1416@e) (let ((cb1418@t (cbe6b@syntax->datum cb1416@e))) (if (memv cb1418@t '(little)) (cbd3b@bless ''little) (if (memv cb1418@t '(big)) (cbd3b@bless ''big) (cbe65@syntax-violation '#f '"endianness must be big or little" cb1410@stx))))) cb1414@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1412@t)))))) (set! cb2847@cbd5d@endianness-macro cbd5d@endianness-macro) (set! cbd5f@identifier-syntax-macro (lambda (cb141a@stx) (let ((cb141c@t cb141a@stx)) (let ((cb141e@ls/false (cbd85@syntax-dispatch cb141c@t '(_ any)))) (if cb141e@ls/false (apply (lambda (cb1420@expr) (cbd3b@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax cb1420@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax cb1420@expr) '((syntax (e* ...)))))))))) cb141e@ls/false) (let ((cb1422@t cb141c@t)) (let ((cb1424@ls/false (cbd85@syntax-dispatch cb1422@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and cb1424@ls/false (apply (lambda (cb1426@id1 cb1427@expr1 cb1428@id2 cb1429@expr2 cb142a@expr3) (and (cbb7e@id? cb1426@id1) (cbb7e@id? cb1428@id2) (cbb7e@id? cb1429@expr2))) cb1424@ls/false)) (apply (lambda (cb1430@id1 cb1431@expr1 cb1432@id2 cb1433@expr2 cb1434@expr3) (cbd3b@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax cb1431@expr1)) (list (list 'set! 'id cb1433@expr2) (list 'syntax cb1434@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons cb1431@expr1 '(e* ...))))))))) cb1424@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1422@t))))))))) (set! cb2848@cbd5f@identifier-syntax-macro cbd5f@identifier-syntax-macro) (set! cbd61@do-macro (lambda (cb143a@stx) (let ((cb143d@bind '#f)) (begin (set! cb143d@bind (lambda (cb1454@x) (let ((cb1456@t cb1454@x)) (let ((cb1458@ls/false (cbd85@syntax-dispatch cb1456@t '(any any)))) (if cb1458@ls/false (apply (lambda (cb145a@x cb145b@init) (list cb145a@x cb145b@init cb145a@x)) cb1458@ls/false) (let ((cb145e@t cb1456@t)) (let ((cb1460@ls/false (cbd85@syntax-dispatch cb145e@t '(any any any)))) (if cb1460@ls/false (apply (lambda (cb1462@x cb1463@init cb1464@step) (list cb1462@x cb1463@init cb1464@step)) cb1460@ls/false) (let ((cb1468@t cb145e@t)) (let ((cb146a@ls/false (cbd85@syntax-dispatch cb1468@t '_))) (if cb146a@ls/false (apply (lambda () (cbe65@syntax-violation '#f '"invalid binding" cb143a@stx)) cb146a@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1468@t)))))))))))) (let ((cb143e@t cb143a@stx)) (let ((cb1440@ls/false (cbd85@syntax-dispatch cb143e@t '(_ each-any (any . each-any) . each-any)))) (if cb1440@ls/false (apply (lambda (cb1442@binding* cb1443@test cb1444@expr* cb1445@command*) (let ((cb144a@t (map cb143d@bind cb1442@binding*))) (let ((cb144c@ls/false (cbd85@syntax-dispatch cb144a@t '#(each (any any any))))) (if cb144c@ls/false (apply (lambda (cb144e@x* cb144f@init* cb1450@step*) (if (cbb86@valid-bound-ids? cb144e@x*) (cbd3b@bless (list 'letrec (list (list 'loop (list 'lambda cb144e@x* (list 'if cb1443@test (cons 'begin (cons '(if #f #f) cb1444@expr*)) (cons 'begin (append cb1445@command* (list (cons 'loop cb1450@step*)))))))) (cons 'loop cb144f@init*))) (cbe65@syntax-violation '#f '"invalid bindings" cb143a@stx))) cb144c@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb144a@t))))) cb1440@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb143e@t)))))))) (set! cb2849@cbd61@do-macro cbd61@do-macro) (set! cbd63@let*-macro (lambda (cb146c@stx) (let ((cb146e@t cb146c@stx)) (let ((cb1470@ls/false (cbd85@syntax-dispatch cb146e@t '(_ #(each (any any)) any . each-any)))) (if (and cb1470@ls/false (apply (lambda (cb1472@lhs* cb1473@rhs* cb1474@b cb1475@b*) (for-all cbb7e@id? cb1472@lhs*)) cb1470@ls/false)) (apply (lambda (cb147a@lhs* cb147b@rhs* cb147c@b cb147d@b*) (cbd3b@bless (let cb1484@f ((cb1482@x* (map list cb147a@lhs* cb147b@rhs*))) (if (null? cb1482@x*) (cons 'let (cons '() (cons cb147c@b cb147d@b*))) (list 'let (list (car cb1482@x*)) (cb1484@f (cdr cb1482@x*))))))) cb1470@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb146e@t)))))) (set! cb284a@cbd63@let*-macro cbd63@let*-macro) (set! cbd65@or-macro (lambda (cb1486@stx) (let ((cb1488@t cb1486@stx)) (let ((cb148a@ls/false (cbd85@syntax-dispatch cb1488@t '(_)))) (if cb148a@ls/false (apply (lambda () '#f) cb148a@ls/false) (let ((cb148c@t cb1488@t)) (let ((cb148e@ls/false (cbd85@syntax-dispatch cb148c@t '(_ any . each-any)))) (if cb148e@ls/false (apply (lambda (cb1490@e cb1491@e*) (cbd3b@bless (let cb1498@f ((cb1494@e cb1490@e) (cb1495@e* cb1491@e*)) (if (null? cb1495@e*) (list 'begin '#f cb1494@e) (list 'let (list (list 't cb1494@e)) (list 'if 't 't (cb1498@f (car cb1495@e*) (cdr cb1495@e*)))))))) cb148e@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb148c@t))))))))) (set! cb284b@cbd65@or-macro cbd65@or-macro) (set! cbd67@and-macro (lambda (cb149a@stx) (let ((cb149c@t cb149a@stx)) (let ((cb149e@ls/false (cbd85@syntax-dispatch cb149c@t '(_)))) (if cb149e@ls/false (apply (lambda () '#t) cb149e@ls/false) (let ((cb14a0@t cb149c@t)) (let ((cb14a2@ls/false (cbd85@syntax-dispatch cb14a0@t '(_ any . each-any)))) (if cb14a2@ls/false (apply (lambda (cb14a4@e cb14a5@e*) (cbd3b@bless (let cb14ac@f ((cb14a8@e cb14a4@e) (cb14a9@e* cb14a5@e*)) (if (null? cb14a9@e*) (list 'begin '#f cb14a8@e) (cons 'if (cons cb14a8@e (cons (cb14ac@f (car cb14a9@e*) (cdr cb14a9@e*)) '(#f)))))))) cb14a2@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb14a0@t))))))))) (set! cb284c@cbd67@and-macro cbd67@and-macro) (set! cbd69@cond-macro (lambda (cb14ae@stx) (let ((cb14b0@t cb14ae@stx)) (let ((cb14b2@ls/false (cbd85@syntax-dispatch cb14b0@t '(_ any . each-any)))) (if cb14b2@ls/false (apply (lambda (cb14b4@cls cb14b5@cls*) (cbd3b@bless (let cb14bc@f ((cb14b8@cls cb14b4@cls) (cb14b9@cls* cb14b5@cls*)) (if (null? cb14b9@cls*) (let ((cb14be@t cb14b8@cls)) (let ((cb14c0@ls/false (cbd85@syntax-dispatch cb14be@t '(#(scheme-id else) any . each-any)))) (if cb14c0@ls/false (apply (lambda (cb14c2@e cb14c3@e*) (cons 'begin (cons cb14c2@e cb14c3@e*))) cb14c0@ls/false) (let ((cb14c6@t cb14be@t)) (let ((cb14c8@ls/false (cbd85@syntax-dispatch cb14c6@t '(any #(scheme-id =>) any)))) (if cb14c8@ls/false (apply (lambda (cb14ca@e cb14cb@p) (list 'let (list (list 't cb14ca@e)) (list 'if 't (cons cb14cb@p '(t))))) cb14c8@ls/false) (let ((cb14ce@t cb14c6@t)) (let ((cb14d0@ls/false (cbd85@syntax-dispatch cb14ce@t '(any)))) (if cb14d0@ls/false (apply (lambda (cb14d2@e) (cons 'or (cons cb14d2@e '((if #f #f))))) cb14d0@ls/false) (let ((cb14d4@t cb14ce@t)) (let ((cb14d6@ls/false (cbd85@syntax-dispatch cb14d4@t '(any . each-any)))) (if cb14d6@ls/false (apply (lambda (cb14d8@e cb14d9@e*) (list 'if cb14d8@e (cons 'begin cb14d9@e*))) cb14d6@ls/false) (let ((cb14dc@t cb14d4@t)) (let ((cb14de@ls/false (cbd85@syntax-dispatch cb14dc@t '_))) (if cb14de@ls/false (apply (lambda () (cbe65@syntax-violation '#f '"invalid last clause" cb14ae@stx)) cb14de@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb14dc@t)))))))))))))))) (let ((cb14e0@t cb14b8@cls)) (let ((cb14e2@ls/false (cbd85@syntax-dispatch cb14e0@t '(#(scheme-id else) any . each-any)))) (if cb14e2@ls/false (apply (lambda (cb14e4@e cb14e5@e*) (cbe65@syntax-violation '#f '"incorrect position of keyword else" cb14ae@stx)) cb14e2@ls/false) (let ((cb14e8@t cb14e0@t)) (let ((cb14ea@ls/false (cbd85@syntax-dispatch cb14e8@t '(any #(scheme-id =>) any)))) (if cb14ea@ls/false (apply (lambda (cb14ec@e cb14ed@p) (list 'let (list (list 't cb14ec@e)) (list 'if 't (cons cb14ed@p '(t)) (cb14bc@f (car cb14b9@cls*) (cdr cb14b9@cls*))))) cb14ea@ls/false) (let ((cb14f0@t cb14e8@t)) (let ((cb14f2@ls/false (cbd85@syntax-dispatch cb14f0@t '(any)))) (if cb14f2@ls/false (apply (lambda (cb14f4@e) (list 'or cb14f4@e (cb14bc@f (car cb14b9@cls*) (cdr cb14b9@cls*)))) cb14f2@ls/false) (let ((cb14f6@t cb14f0@t)) (let ((cb14f8@ls/false (cbd85@syntax-dispatch cb14f6@t '(any . each-any)))) (if cb14f8@ls/false (apply (lambda (cb14fa@e cb14fb@e*) (list 'if cb14fa@e (cons 'begin cb14fb@e*) (cb14bc@f (car cb14b9@cls*) (cdr cb14b9@cls*)))) cb14f8@ls/false) (let ((cb14fe@t cb14f6@t)) (let ((cb1500@ls/false (cbd85@syntax-dispatch cb14fe@t '_))) (if cb1500@ls/false (apply (lambda () (cbe65@syntax-violation '#f '"invalid last clause" cb14ae@stx)) cb1500@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb14fe@t)))))))))))))))))))) cb14b2@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb14b0@t)))))) (set! cb284d@cbd69@cond-macro cbd69@cond-macro) (set! cbd6b@do-include (lambda (cb1502@stx cb1503@id cb1504@filename) (let ((cb1508@filename (cbb92@stx->datum cb1504@filename))) (begin (if (not (and (string? cb1508@filename) (cbb7e@id? cb1503@id))) (cbe65@syntax-violation '#f '"invalid syntax" cb1502@stx) (void)) (cons (cbd3b@bless 'begin) (with-input-from-file cb1508@filename (lambda () (let cb150c@f ((cb150a@ls '())) (let ((cb150e@x (cb6ba@cb58a@read-annotated))) (if (eof-object? cb150e@x) (reverse cb150a@ls) (cb150c@f (cons (cbb5e@datum->stx cb1503@id cb150e@x) cb150a@ls)))))))))))) (set! cb284e@cbd6b@do-include cbd6b@do-include) (set! cbd6d@include-macro (lambda (cb1510@e) (let ((cb1512@t cb1510@e)) (let ((cb1514@ls/false (cbd85@syntax-dispatch cb1512@t '(any any)))) (if cb1514@ls/false (apply (lambda (cb1516@id cb1517@filename) (cbd6b@do-include cb1510@e cb1516@id cb1517@filename)) cb1514@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1512@t)))))) (set! cb284f@cbd6d@include-macro cbd6d@include-macro) (set! cbd6f@include-into-macro (lambda (cb151a@e) (let ((cb151c@t cb151a@e)) (let ((cb151e@ls/false (cbd85@syntax-dispatch cb151c@t '(_ any any)))) (if cb151e@ls/false (apply (lambda (cb1520@id cb1521@filename) (cbd6b@do-include cb151a@e cb1520@id cb1521@filename)) cb151e@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb151c@t)))))) (set! cb2850@cbd6f@include-into-macro cbd6f@include-into-macro) (set! cbd71@syntax-rules-macro (lambda (cb1524@e) (let ((cb1526@t cb1524@e)) (let ((cb1528@ls/false (cbd85@syntax-dispatch cb1526@t '(_ each-any . #(each (any any)))))) (if cb1528@ls/false (apply (lambda (cb152a@lits cb152b@pat* cb152c@tmp*) (begin (cbd8b@verify-literals cb152a@lits cb1524@e) (cbd3b@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons cb152a@lits (map (lambda (cb1530@pat cb1531@tmp) (let ((cb1534@t cb1530@pat)) (let ((cb1536@ls/false (cbd85@syntax-dispatch cb1534@t '(_ . any)))) (if cb1536@ls/false (apply (lambda (cb1538@rest) (list (cons 'g cb1538@rest) (list 'syntax cb1531@tmp))) cb1536@ls/false) (let ((cb153a@t cb1534@t)) (let ((cb153c@ls/false (cbd85@syntax-dispatch cb153a@t '_))) (if cb153c@ls/false (apply (lambda () (cbe65@syntax-violation '#f '"invalid syntax-rules pattern" cb1524@e cb1530@pat)) cb153c@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb153a@t)))))))) cb152b@pat* cb152c@tmp*)))))))) cb1528@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1526@t)))))) (set! cb2851@cbd71@syntax-rules-macro cbd71@syntax-rules-macro) (set! cbd73@quasiquote-macro (let ((cb153f@datum '#f) (cb155b@quasicons* '#f) (cb155d@quasicons '#f) (cb155f@quasiappend '#f) (cb1561@quasivector '#f) (cb1563@vquasi '#f) (cb1565@quasi '#f)) (begin (set! cb153f@datum (lambda (cb1640@x) (list (cbd0d@scheme-stx 'quote) (cbb66@mkstx cb1640@x '() '() '())))) (set! cb155b@quasicons* (lambda (cb1638@x cb1639@y) (let cb163e@f ((cb163c@x cb1638@x)) (if (null? cb163c@x) cb1639@y (cb155d@quasicons (car cb163c@x) (cb163e@f (cdr cb163c@x))))))) (set! cb155d@quasicons (lambda (cb1612@x cb1613@y) (let ((cb1616@t cb1613@y)) (let ((cb1618@ls/false (cbd85@syntax-dispatch cb1616@t '(#(scheme-id quote) any)))) (if cb1618@ls/false (apply (lambda (cb161a@dy) (let ((cb161c@t cb1612@x)) (let ((cb161e@ls/false (cbd85@syntax-dispatch cb161c@t '(#(scheme-id quote) any)))) (if cb161e@ls/false (apply (lambda (cb1620@dx) (list (cbd0d@scheme-stx 'quote) (cons cb1620@dx cb161a@dy))) cb161e@ls/false) (let ((cb1622@t cb161c@t)) (let ((cb1624@ls/false (cbd85@syntax-dispatch cb1622@t '_))) (if cb1624@ls/false (apply (lambda () (let ((cb1626@t cb161a@dy)) (let ((cb1628@ls/false (cbd85@syntax-dispatch cb1626@t '()))) (if cb1628@ls/false (apply (lambda () (list (cbd0d@scheme-stx 'list) cb1612@x)) cb1628@ls/false) (let ((cb162a@t cb1626@t)) (let ((cb162c@ls/false (cbd85@syntax-dispatch cb162a@t '_))) (if cb162c@ls/false (apply (lambda () (list (cbd0d@scheme-stx 'cons) cb1612@x cb1613@y)) cb162c@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb162a@t)))))))) cb1624@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1622@t)))))))) cb1618@ls/false) (let ((cb162e@t cb1616@t)) (let ((cb1630@ls/false (cbd85@syntax-dispatch cb162e@t '(#(scheme-id list) . each-any)))) (if cb1630@ls/false (apply (lambda (cb1632@stuff) (cons* (cbd0d@scheme-stx 'list) cb1612@x cb1632@stuff)) cb1630@ls/false) (let ((cb1634@t cb162e@t)) (let ((cb1636@ls/false (cbd85@syntax-dispatch cb1634@t '_))) (if cb1636@ls/false (apply (lambda () (list (cbd0d@scheme-stx 'cons) cb1612@x cb1613@y)) cb1636@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1634@t)))))))))))) (set! cb155f@quasiappend (lambda (cb15f8@x cb15f9@y) (let ((cb15fc@ls (let cb1600@f ((cb15fe@x cb15f8@x)) (if (null? cb15fe@x) (let ((cb1602@t cb15f9@y)) (let ((cb1604@ls/false (cbd85@syntax-dispatch cb1602@t '(#(scheme-id quote) ())))) (if cb1604@ls/false (apply (lambda () '()) cb1604@ls/false) (let ((cb1606@t cb1602@t)) (let ((cb1608@ls/false (cbd85@syntax-dispatch cb1606@t '_))) (if cb1608@ls/false (apply (lambda () (list cb15f9@y)) cb1608@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1606@t))))))) (let ((cb160a@t (car cb15fe@x))) (let ((cb160c@ls/false (cbd85@syntax-dispatch cb160a@t '(#(scheme-id quote) ())))) (if cb160c@ls/false (apply (lambda () (cb1600@f (cdr cb15fe@x))) cb160c@ls/false) (let ((cb160e@t cb160a@t)) (let ((cb1610@ls/false (cbd85@syntax-dispatch cb160e@t '_))) (if cb1610@ls/false (apply (lambda () (cons (car cb15fe@x) (cb1600@f (cdr cb15fe@x)))) cb1610@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb160e@t))))))))))) (if (null? cb15fc@ls) (list (cbd0d@scheme-stx 'quote) '()) (if (null? (cdr cb15fc@ls)) (car cb15fc@ls) (cons* (cbd0d@scheme-stx 'append) cb15fc@ls)))))) (set! cb1561@quasivector (lambda (cb15c6@x) (let ((cb15c8@pat-x cb15c6@x)) (let ((cb15ca@t cb15c8@pat-x)) (let ((cb15cc@ls/false (cbd85@syntax-dispatch cb15ca@t '(#(scheme-id quote) each-any)))) (if cb15cc@ls/false (apply (lambda (cb15ce@x*) (list (cbd0d@scheme-stx 'quote) (list->vector cb15ce@x*))) cb15cc@ls/false) (let ((cb15d0@t cb15ca@t)) (let ((cb15d2@ls/false (cbd85@syntax-dispatch cb15d0@t '_))) (if cb15d2@ls/false (apply (lambda () (let cb15da@f ((cb15d4@x cb15c6@x) (cb15d5@k (lambda (cb15d8@ls) (cons* (cbd0d@scheme-stx 'vector) cb15d8@ls)))) (let ((cb15dc@t cb15d4@x)) (let ((cb15de@ls/false (cbd85@syntax-dispatch cb15dc@t '(#(scheme-id quote) each-any)))) (if cb15de@ls/false (apply (lambda (cb15e0@x*) (cb15d5@k (map (lambda (cb15e2@x) (list (cbd0d@scheme-stx 'quote) cb15e2@x)) cb15e0@x*))) cb15de@ls/false) (let ((cb15e4@t cb15dc@t)) (let ((cb15e6@ls/false (cbd85@syntax-dispatch cb15e4@t '(#(scheme-id list) . each-any)))) (if cb15e6@ls/false (apply (lambda (cb15e8@x*) (cb15d5@k cb15e8@x*)) cb15e6@ls/false) (let ((cb15ea@t cb15e4@t)) (let ((cb15ec@ls/false (cbd85@syntax-dispatch cb15ea@t '(#(scheme-id cons) any any)))) (if cb15ec@ls/false (apply (lambda (cb15ee@x cb15ef@y) (cb15da@f cb15ef@y (lambda (cb15f2@ls) (cb15d5@k (cons cb15ee@x cb15f2@ls))))) cb15ec@ls/false) (let ((cb15f4@t cb15ea@t)) (let ((cb15f6@ls/false (cbd85@syntax-dispatch cb15f4@t '_))) (if cb15f6@ls/false (apply (lambda () (list (cbd0d@scheme-stx 'list->vector) cb15c8@pat-x)) cb15f6@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb15f4@t))))))))))))))) cb15d2@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb15d0@t)))))))))) (set! cb1563@vquasi (lambda (cb15a4@p cb15a5@lev) (let ((cb15a8@t cb15a4@p)) (let ((cb15aa@ls/false (cbd85@syntax-dispatch cb15a8@t '(any . any)))) (if cb15aa@ls/false (apply (lambda (cb15ac@p cb15ad@q) (let ((cb15b0@t cb15ac@p)) (let ((cb15b2@ls/false (cbd85@syntax-dispatch cb15b0@t '(#(scheme-id unquote) . each-any)))) (if cb15b2@ls/false (apply (lambda (cb15b4@p) (if (= cb15a5@lev '0) (cb155b@quasicons* cb15b4@p (cb1563@vquasi cb15ad@q cb15a5@lev)) (cb155d@quasicons (cb155d@quasicons (cb153f@datum 'unquote) (cb1565@quasi cb15b4@p (- cb15a5@lev '1))) (cb1563@vquasi cb15ad@q cb15a5@lev)))) cb15b2@ls/false) (let ((cb15b6@t cb15b0@t)) (let ((cb15b8@ls/false (cbd85@syntax-dispatch cb15b6@t '(#(scheme-id unquote-splicing) . each-any)))) (if cb15b8@ls/false (apply (lambda (cb15ba@p) (if (= cb15a5@lev '0) (cb155f@quasiappend cb15ba@p (cb1563@vquasi cb15ad@q cb15a5@lev)) (cb155d@quasicons (cb155d@quasicons (cb153f@datum 'unquote-splicing) (cb1565@quasi cb15ba@p (- cb15a5@lev '1))) (cb1563@vquasi cb15ad@q cb15a5@lev)))) cb15b8@ls/false) (let ((cb15bc@t cb15b6@t)) (let ((cb15be@ls/false (cbd85@syntax-dispatch cb15bc@t 'any))) (if cb15be@ls/false (apply (lambda (cb15c0@p) (cb155d@quasicons (cb1565@quasi cb15c0@p cb15a5@lev) (cb1563@vquasi cb15ad@q cb15a5@lev))) cb15be@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb15bc@t))))))))))) cb15aa@ls/false) (let ((cb15c2@t cb15a8@t)) (let ((cb15c4@ls/false (cbd85@syntax-dispatch cb15c2@t '()))) (if cb15c4@ls/false (apply (lambda () (list (cbd0d@scheme-stx 'quote) '())) cb15c4@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb15c2@t))))))))) (set! cb1565@quasi (lambda (cb156e@p cb156f@lev) (let ((cb1572@t cb156e@p)) (let ((cb1574@ls/false (cbd85@syntax-dispatch cb1572@t '(#(scheme-id unquote) any)))) (if cb1574@ls/false (apply (lambda (cb1576@p) (if (= cb156f@lev '0) cb1576@p (cb155d@quasicons (cb153f@datum 'unquote) (cb1565@quasi (list cb1576@p) (- cb156f@lev '1))))) cb1574@ls/false) (let ((cb1578@t cb1572@t)) (let ((cb157a@ls/false (cbd85@syntax-dispatch cb1578@t '((#(scheme-id unquote) . each-any) . any)))) (if cb157a@ls/false (apply (lambda (cb157c@p cb157d@q) (if (= cb156f@lev '0) (cb155b@quasicons* cb157c@p (cb1565@quasi cb157d@q cb156f@lev)) (cb155d@quasicons (cb155d@quasicons (cb153f@datum 'unquote) (cb1565@quasi cb157c@p (- cb156f@lev '1))) (cb1565@quasi cb157d@q cb156f@lev)))) cb157a@ls/false) (let ((cb1580@t cb1578@t)) (let ((cb1582@ls/false (cbd85@syntax-dispatch cb1580@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if cb1582@ls/false (apply (lambda (cb1584@p cb1585@q) (if (= cb156f@lev '0) (cb155f@quasiappend cb1584@p (cb1565@quasi cb1585@q cb156f@lev)) (cb155d@quasicons (cb155d@quasicons (cb153f@datum 'unquote-splicing) (cb1565@quasi cb1584@p (- cb156f@lev '1))) (cb1565@quasi cb1585@q cb156f@lev)))) cb1582@ls/false) (let ((cb1588@t cb1580@t)) (let ((cb158a@ls/false (cbd85@syntax-dispatch cb1588@t '(#(scheme-id quasiquote) any)))) (if cb158a@ls/false (apply (lambda (cb158c@p) (cb155d@quasicons (cb153f@datum 'quasiquote) (cb1565@quasi (list cb158c@p) (+ cb156f@lev '1)))) cb158a@ls/false) (let ((cb158e@t cb1588@t)) (let ((cb1590@ls/false (cbd85@syntax-dispatch cb158e@t '(any . any)))) (if cb1590@ls/false (apply (lambda (cb1592@p cb1593@q) (cb155d@quasicons (cb1565@quasi cb1592@p cb156f@lev) (cb1565@quasi cb1593@q cb156f@lev))) cb1590@ls/false) (let ((cb1596@t cb158e@t)) (let ((cb1598@ls/false (cbd85@syntax-dispatch cb1596@t '#(vector each-any)))) (if (and cb1598@ls/false (apply (lambda (cb159a@x) (not (cbb4a@stx? cb159a@x))) cb1598@ls/false)) (apply (lambda (cb159c@x) (cb1561@quasivector (cb1563@vquasi cb159c@x cb156f@lev))) cb1598@ls/false) (let ((cb159e@t cb1596@t)) (let ((cb15a0@ls/false (cbd85@syntax-dispatch cb159e@t 'any))) (if cb15a0@ls/false (apply (lambda (cb15a2@p) (list (cbd0d@scheme-stx 'quote) cb15a2@p)) cb15a0@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb159e@t)))))))))))))))))))))))) (lambda (cb1566@x) (let ((cb1568@t cb1566@x)) (let ((cb156a@ls/false (cbd85@syntax-dispatch cb1568@t '(_ any)))) (if cb156a@ls/false (apply (lambda (cb156c@e) (cb1565@quasi cb156c@e '0)) cb156a@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1568@t)))))))) (set! cb2852@cbd73@quasiquote-macro cbd73@quasiquote-macro) (set! cbd75@quasisyntax-macro (let ((cb1643@quasi '#f)) (begin (set! cb1643@quasi (lambda (cb165e@p cb165f@lev) (let ((cb1662@t cb165e@p)) (let ((cb1664@ls/false (cbd85@syntax-dispatch cb1662@t '(#(scheme-id unsyntax) any)))) (if cb1664@ls/false (apply (lambda (cb1666@p) (if (= cb165f@lev '0) (let ((cb1668@g (gensym))) (values (list cb1668@g) (list cb1666@p) cb1668@g)) (call-with-values (lambda () (cb1643@quasi cb1666@p (- cb165f@lev '1))) (lambda (cb1670@cb166b cb1671@cb166d cb1672@cb166f) (let ((cb1676@p cb1672@cb166f) (cb1677@rhs* cb1671@cb166d) (cb1678@lhs* cb1670@cb166b)) (values cb1678@lhs* cb1677@rhs* (list 'unsyntax cb1676@p))))))) cb1664@ls/false) (let ((cb167c@t cb1662@t)) (let ((cb167e@ls/false (cbd85@syntax-dispatch cb167c@t '#(scheme-id unsyntax)))) (if (and cb167e@ls/false (apply (lambda () (= cb165f@lev '0)) cb167e@ls/false)) (apply (lambda () (cbe65@syntax-violation '#f '"incorrect use of unsyntax" cb165e@p)) cb167e@ls/false) (let ((cb1680@t cb167c@t)) (let ((cb1682@ls/false (cbd85@syntax-dispatch cb1680@t '((#(scheme-id unsyntax) . each-any) . any)))) (if cb1682@ls/false (apply (lambda (cb1684@p* cb1685@q) (call-with-values (lambda () (cb1643@quasi cb1685@q cb165f@lev)) (lambda (cb168e@cb1689 cb168f@cb168b cb1690@cb168d) (let ((cb1694@q cb1690@cb168d) (cb1695@rhs* cb168f@cb168b) (cb1696@lhs* cb168e@cb1689)) (if (= cb165f@lev '0) (let ((cb169a@g* (map (lambda (cb169c@x) (gensym)) cb1684@p*))) (values (append cb169a@g* cb1696@lhs*) (append cb1684@p* cb1695@rhs*) (append cb169a@g* cb1694@q))) (call-with-values (lambda () (cb1643@quasi cb1684@p* (- cb165f@lev '1))) (lambda (cb16a4@cb169f cb16a5@cb16a1 cb16a6@cb16a3) (let ((cb16aa@p* cb16a6@cb16a3) (cb16ab@rhs2* cb16a5@cb16a1) (cb16ac@lhs2* cb16a4@cb169f)) (values (append cb16ac@lhs2* cb1696@lhs*) (append cb16ab@rhs2* cb1695@rhs*) (cons (cons 'unsyntax cb16aa@p*) cb1694@q)))))))))) cb1682@ls/false) (let ((cb16b0@t cb1680@t)) (let ((cb16b2@ls/false (cbd85@syntax-dispatch cb16b0@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if cb16b2@ls/false (apply (lambda (cb16b4@p* cb16b5@q) (call-with-values (lambda () (cb1643@quasi cb16b5@q cb165f@lev)) (lambda (cb16be@cb16b9 cb16bf@cb16bb cb16c0@cb16bd) (let ((cb16c4@q cb16c0@cb16bd) (cb16c5@rhs* cb16bf@cb16bb) (cb16c6@lhs* cb16be@cb16b9)) (if (= cb165f@lev '0) (let ((cb16ca@g* (map (lambda (cb16cc@x) (gensym)) cb16b4@p*))) (values (append (map (lambda (cb16ce@g) (cons cb16ce@g '(...))) cb16ca@g*) cb16c6@lhs*) (append cb16b4@p* cb16c5@rhs*) (append (apply append (map (lambda (cb16d0@g) (cons cb16d0@g '(...))) cb16ca@g*)) cb16c4@q))) (call-with-values (lambda () (cb1643@quasi cb16b4@p* (- cb165f@lev '1))) (lambda (cb16d8@cb16d3 cb16d9@cb16d5 cb16da@cb16d7) (let ((cb16de@p* cb16da@cb16d7) (cb16df@rhs2* cb16d9@cb16d5) (cb16e0@lhs2* cb16d8@cb16d3)) (values (append cb16e0@lhs2* cb16c6@lhs*) (append cb16df@rhs2* cb16c5@rhs*) (cons (cons 'unsyntax-splicing cb16de@p*) cb16c4@q)))))))))) cb16b2@ls/false) (let ((cb16e4@t cb16b0@t)) (let ((cb16e6@ls/false (cbd85@syntax-dispatch cb16e4@t '#(scheme-id unsyntax-splicing)))) (if (and cb16e6@ls/false (apply (lambda () (= cb165f@lev '0)) cb16e6@ls/false)) (apply (lambda () (cbe65@syntax-violation '#f '"incorrect use of unsyntax-splicing" cb165e@p)) cb16e6@ls/false) (let ((cb16e8@t cb16e4@t)) (let ((cb16ea@ls/false (cbd85@syntax-dispatch cb16e8@t '(#(scheme-id quasisyntax) any)))) (if cb16ea@ls/false (apply (lambda (cb16ec@p) (call-with-values (lambda () (cb1643@quasi cb16ec@p (+ cb165f@lev '1))) (lambda (cb16f4@cb16ef cb16f5@cb16f1 cb16f6@cb16f3) (let ((cb16fa@p cb16f6@cb16f3) (cb16fb@rhs* cb16f5@cb16f1) (cb16fc@lhs* cb16f4@cb16ef)) (values cb16fc@lhs* cb16fb@rhs* (list 'quasisyntax cb16fa@p)))))) cb16ea@ls/false) (let ((cb1700@t cb16e8@t)) (let ((cb1702@ls/false (cbd85@syntax-dispatch cb1700@t '(any . any)))) (if cb1702@ls/false (apply (lambda (cb1704@p cb1705@q) (call-with-values (lambda () (cb1643@quasi cb1704@p cb165f@lev)) (lambda (cb1714@cb1709 cb1715@cb170b cb1716@cb170d) (call-with-values (lambda () (cb1643@quasi cb1705@q cb165f@lev)) (lambda (cb171a@cb170f cb171b@cb1711 cb171c@cb1713) (let ((cb1720@q cb171c@cb1713) (cb1721@rhs2* cb171b@cb1711) (cb1722@lhs2* cb171a@cb170f) (cb1723@p cb1716@cb170d) (cb1724@rhs* cb1715@cb170b) (cb1725@lhs* cb1714@cb1709)) (values (append cb1722@lhs2* cb1725@lhs*) (append cb1721@rhs2* cb1724@rhs*) (cons cb1723@p cb1720@q)))))))) cb1702@ls/false) (let ((cb172c@t cb1700@t)) (let ((cb172e@ls/false (cbd85@syntax-dispatch cb172c@t '#(vector each-any)))) (if cb172e@ls/false (apply (lambda (cb1730@x*) (call-with-values (lambda () (cb1643@quasi cb1730@x* cb165f@lev)) (lambda (cb1738@cb1733 cb1739@cb1735 cb173a@cb1737) (let ((cb173e@x* cb173a@cb1737) (cb173f@rhs* cb1739@cb1735) (cb1740@lhs* cb1738@cb1733)) (values cb1740@lhs* cb173f@rhs* (list->vector cb173e@x*)))))) cb172e@ls/false) (let ((cb1744@t cb172c@t)) (let ((cb1746@ls/false (cbd85@syntax-dispatch cb1744@t '_))) (if cb1746@ls/false (apply (lambda () (values '() '() cb165e@p)) cb1746@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1744@t)))))))))))))))))))))))))))))) (lambda (cb1644@x) (let ((cb1646@t cb1644@x)) (let ((cb1648@ls/false (cbd85@syntax-dispatch cb1646@t '(_ any)))) (if cb1648@ls/false (apply (lambda (cb164a@e) (call-with-values (lambda () (cb1643@quasi cb164a@e '0)) (lambda (cb1652@cb164d cb1653@cb164f cb1654@cb1651) (let ((cb1658@v cb1654@cb1651) (cb1659@rhs* cb1653@cb164f) (cb165a@lhs* cb1652@cb164d)) (cbd3b@bless (list 'syntax-case (cons 'list cb1659@rhs*) '() (list cb165a@lhs* (list 'syntax cb1658@v)))))))) cb1648@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1646@t)))))))) (set! cb2853@cbd75@quasisyntax-macro cbd75@quasisyntax-macro) (set! cbd77@define-struct-macro (lambda (cb1748@stx) (cbe65@syntax-violation '#f '"define-struct not supported" cb1748@stx))) (set! cb2854@cbd77@define-struct-macro cbd77@define-struct-macro) (set! cbd79@define-record-type-macro (lambda (cb174a@x) (let ((cb174d@id '#f) (cb174f@get-record-name '#f) (cb1751@get-record-constructor-name '#f) (cb1753@get-record-predicate-name '#f) (cb1755@get-clause '#f) (cb1757@foo-rtd-code '#f) (cb1759@parent-rtd-code '#f) (cb175b@parent-rcd-code '#f) (cb175d@foo-rcd-code '#f) (cb175f@get-protocol-code '#f) (cb1761@get-fields '#f) (cb1763@get-mutator-indices '#f) (cb1765@get-mutators '#f) (cb1767@get-accessors '#f) (cb1769@enumerate '#f) (cb176b@do-define-record '#f) (cb176d@verify-clauses '#f)) (begin (set! cb174d@id (lambda (cb1940@ctxt . cb1942@str*) (cbe69@datum->syntax cb1940@ctxt (string->symbol (apply string-append (map (lambda (cb1944@x) (if (symbol? cb1944@x) (symbol->string cb1944@x) (if (string? cb1944@x) cb1944@x (assertion-violation 'define-record-type '"BUG")))) cb1942@str*)))))) (set! cb174f@get-record-name (lambda (cb192e@spec) (let ((cb1930@t cb192e@spec)) (let ((cb1932@ls/false (cbd85@syntax-dispatch cb1930@t '(any any any)))) (if cb1932@ls/false (apply (lambda (cb1934@foo cb1935@make-foo cb1936@foo?) cb1934@foo) cb1932@ls/false) (let ((cb193a@t cb1930@t)) (let ((cb193c@ls/false (cbd85@syntax-dispatch cb193a@t 'any))) (if cb193c@ls/false (apply (lambda (cb193e@foo) cb193e@foo) cb193c@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb193a@t))))))))) (set! cb1751@get-record-constructor-name (lambda (cb191a@spec) (let ((cb191c@t cb191a@spec)) (let ((cb191e@ls/false (cbd85@syntax-dispatch cb191c@t '(any any any)))) (if cb191e@ls/false (apply (lambda (cb1920@foo cb1921@make-foo cb1922@foo?) cb1921@make-foo) cb191e@ls/false) (let ((cb1926@t cb191c@t)) (let ((cb1928@ls/false (cbd85@syntax-dispatch cb1926@t 'any))) (if (and cb1928@ls/false (apply (lambda (cb192a@foo) (cbb7e@id? cb192a@foo)) cb1928@ls/false)) (apply (lambda (cb192c@foo) (cb174d@id cb192c@foo '"make-" (cbb92@stx->datum cb192c@foo))) cb1928@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1926@t))))))))) (set! cb1753@get-record-predicate-name (lambda (cb1906@spec) (let ((cb1908@t cb1906@spec)) (let ((cb190a@ls/false (cbd85@syntax-dispatch cb1908@t '(any any any)))) (if cb190a@ls/false (apply (lambda (cb190c@foo cb190d@make-foo cb190e@foo?) cb190e@foo?) cb190a@ls/false) (let ((cb1912@t cb1908@t)) (let ((cb1914@ls/false (cbd85@syntax-dispatch cb1912@t 'any))) (if (and cb1914@ls/false (apply (lambda (cb1916@foo) (cbb7e@id? cb1916@foo)) cb1914@ls/false)) (apply (lambda (cb1918@foo) (cb174d@id cb1918@foo (cbb92@stx->datum cb1918@foo) '"?")) cb1914@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1912@t))))))))) (set! cb1755@get-clause (lambda (cb18f4@id cb18f5@ls) (let ((cb18f8@t cb18f5@ls)) (let ((cb18fa@ls/false (cbd85@syntax-dispatch cb18f8@t '()))) (if cb18fa@ls/false (apply (lambda () '#f) cb18fa@ls/false) (let ((cb18fc@t cb18f8@t)) (let ((cb18fe@ls/false (cbd85@syntax-dispatch cb18fc@t '((any . any) . any)))) (if cb18fe@ls/false (apply (lambda (cb1900@x cb1901@rest cb1902@ls) (if (cbb84@free-id=? (cbd3b@bless cb18f4@id) cb1900@x) (cons cb1900@x cb1901@rest) (cb1755@get-clause cb18f4@id cb1902@ls))) cb18fe@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb18fc@t))))))))) (set! cb1757@foo-rtd-code (lambda (cb18a2@name cb18a3@clause* cb18a4@parent-rtd-code) (let ((cb18a9@convert-field-spec* '#f)) (begin (set! cb18a9@convert-field-spec* (lambda (cb18da@ls) (list->vector (map (lambda (cb18dc@x) (let ((cb18de@t cb18dc@x)) (let ((cb18e0@ls/false (cbd85@syntax-dispatch cb18de@t '(#(scheme-id mutable) any . any)))) (if cb18e0@ls/false (apply (lambda (cb18e2@name cb18e3@rest) (list 'mutable cb18e2@name)) cb18e0@ls/false) (let ((cb18e6@t cb18de@t)) (let ((cb18e8@ls/false (cbd85@syntax-dispatch cb18e6@t '(#(scheme-id immutable) any . any)))) (if cb18e8@ls/false (apply (lambda (cb18ea@name cb18eb@rest) (list 'immutable cb18ea@name)) cb18e8@ls/false) (let ((cb18ee@t cb18e6@t)) (let ((cb18f0@ls/false (cbd85@syntax-dispatch cb18ee@t 'any))) (if cb18f0@ls/false (apply (lambda (cb18f2@name) (list 'immutable cb18f2@name)) cb18f0@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb18ee@t))))))))))) cb18da@ls)))) (let ((cb18aa@uid-code (let ((cb18b2@t (cb1755@get-clause 'nongenerative cb18a3@clause*))) (let ((cb18b4@ls/false (cbd85@syntax-dispatch cb18b2@t '(_)))) (if cb18b4@ls/false (apply (lambda () (list 'quote (gensym))) cb18b4@ls/false) (let ((cb18b6@t cb18b2@t)) (let ((cb18b8@ls/false (cbd85@syntax-dispatch cb18b6@t '(_ any)))) (if cb18b8@ls/false (apply (lambda (cb18ba@uid) (list 'quote cb18ba@uid)) cb18b8@ls/false) (let ((cb18bc@t cb18b6@t)) (let ((cb18be@ls/false (cbd85@syntax-dispatch cb18bc@t '_))) (if cb18be@ls/false (apply (lambda () '#f) cb18be@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb18bc@t))))))))))) (cb18ab@sealed? (let ((cb18c0@t (cb1755@get-clause 'sealed cb18a3@clause*))) (let ((cb18c2@ls/false (cbd85@syntax-dispatch cb18c0@t '(_ #(atom #t))))) (if cb18c2@ls/false (apply (lambda () '#t) cb18c2@ls/false) (let ((cb18c4@t cb18c0@t)) (let ((cb18c6@ls/false (cbd85@syntax-dispatch cb18c4@t '_))) (if cb18c6@ls/false (apply (lambda () '#f) cb18c6@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb18c4@t)))))))) (cb18ac@opaque? (let ((cb18c8@t (cb1755@get-clause 'opaque cb18a3@clause*))) (let ((cb18ca@ls/false (cbd85@syntax-dispatch cb18c8@t '(_ #(atom #t))))) (if cb18ca@ls/false (apply (lambda () '#t) cb18ca@ls/false) (let ((cb18cc@t cb18c8@t)) (let ((cb18ce@ls/false (cbd85@syntax-dispatch cb18cc@t '_))) (if cb18ce@ls/false (apply (lambda () '#f) cb18ce@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb18cc@t)))))))) (cb18ad@fields (let ((cb18d0@t (cb1755@get-clause 'fields cb18a3@clause*))) (let ((cb18d2@ls/false (cbd85@syntax-dispatch cb18d0@t '(_ . each-any)))) (if cb18d2@ls/false (apply (lambda (cb18d4@field-spec*) (list 'quote (cb18a9@convert-field-spec* cb18d4@field-spec*))) cb18d2@ls/false) (let ((cb18d6@t cb18d0@t)) (let ((cb18d8@ls/false (cbd85@syntax-dispatch cb18d6@t '_))) (if cb18d8@ls/false (apply (lambda () ''#()) cb18d8@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb18d6@t))))))))) (cbd3b@bless (list 'make-record-type-descriptor (list 'quote cb18a2@name) cb18a4@parent-rtd-code cb18aa@uid-code cb18ab@sealed? cb18ac@opaque? cb18ad@fields))))))) (set! cb1759@parent-rtd-code (lambda (cb188a@clause*) (let ((cb188c@t (cb1755@get-clause 'parent cb188a@clause*))) (let ((cb188e@ls/false (cbd85@syntax-dispatch cb188c@t '(_ any)))) (if cb188e@ls/false (apply (lambda (cb1890@name) (list 'record-type-descriptor cb1890@name)) cb188e@ls/false) (let ((cb1892@t cb188c@t)) (let ((cb1894@ls/false (cbd85@syntax-dispatch cb1892@t '#(atom #f)))) (if cb1894@ls/false (apply (lambda () (let ((cb1896@t (cb1755@get-clause 'parent-rtd cb188a@clause*))) (let ((cb1898@ls/false (cbd85@syntax-dispatch cb1896@t '(_ any any)))) (if cb1898@ls/false (apply (lambda (cb189a@rtd cb189b@rcd) cb189a@rtd) cb1898@ls/false) (let ((cb189e@t cb1896@t)) (let ((cb18a0@ls/false (cbd85@syntax-dispatch cb189e@t '#(atom #f)))) (if cb18a0@ls/false (apply (lambda () '#f) cb18a0@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb189e@t)))))))) cb1894@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1892@t))))))))) (set! cb175b@parent-rcd-code (lambda (cb1872@clause*) (let ((cb1874@t (cb1755@get-clause 'parent cb1872@clause*))) (let ((cb1876@ls/false (cbd85@syntax-dispatch cb1874@t '(_ any)))) (if cb1876@ls/false (apply (lambda (cb1878@name) (list 'record-constructor-descriptor cb1878@name)) cb1876@ls/false) (let ((cb187a@t cb1874@t)) (let ((cb187c@ls/false (cbd85@syntax-dispatch cb187a@t '#(atom #f)))) (if cb187c@ls/false (apply (lambda () (let ((cb187e@t (cb1755@get-clause 'parent-rtd cb1872@clause*))) (let ((cb1880@ls/false (cbd85@syntax-dispatch cb187e@t '(_ any any)))) (if cb1880@ls/false (apply (lambda (cb1882@rtd cb1883@rcd) cb1883@rcd) cb1880@ls/false) (let ((cb1886@t cb187e@t)) (let ((cb1888@ls/false (cbd85@syntax-dispatch cb1886@t '#(atom #f)))) (if cb1888@ls/false (apply (lambda () '#f) cb1888@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1886@t)))))))) cb187c@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb187a@t))))))))) (set! cb175d@foo-rcd-code (lambda (cb186a@clause* cb186b@foo-rtd cb186c@protocol cb186d@parent-rcd-code) (list 'make-record-constructor-descriptor cb186b@foo-rtd cb186d@parent-rcd-code cb186c@protocol))) (set! cb175f@get-protocol-code (lambda (cb185e@clause*) (let ((cb1860@t (cb1755@get-clause 'protocol cb185e@clause*))) (let ((cb1862@ls/false (cbd85@syntax-dispatch cb1860@t '(_ any)))) (if cb1862@ls/false (apply (lambda (cb1864@expr) cb1864@expr) cb1862@ls/false) (let ((cb1866@t cb1860@t)) (let ((cb1868@ls/false (cbd85@syntax-dispatch cb1866@t '_))) (if cb1868@ls/false (apply (lambda () '#f) cb1868@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1866@t))))))))) (set! cb1761@get-fields (lambda (cb184c@clause*) (let ((cb184e@t cb184c@clause*)) (let ((cb1850@ls/false (cbd85@syntax-dispatch cb184e@t '()))) (if cb1850@ls/false (apply (lambda () '()) cb1850@ls/false) (let ((cb1852@t cb184e@t)) (let ((cb1854@ls/false (cbd85@syntax-dispatch cb1852@t '((#(scheme-id fields) . each-any) . _)))) (if cb1854@ls/false (apply (lambda (cb1856@f*) cb1856@f*) cb1854@ls/false) (let ((cb1858@t cb1852@t)) (let ((cb185a@ls/false (cbd85@syntax-dispatch cb1858@t '(_ . any)))) (if cb185a@ls/false (apply (lambda (cb185c@rest) (cb1761@get-fields cb185c@rest)) cb185a@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1858@t)))))))))))) (set! cb1763@get-mutator-indices (lambda (cb1834@fields) (let cb183a@f ((cb1836@fields cb1834@fields) (cb1837@i '0)) (let ((cb183c@t cb1836@fields)) (let ((cb183e@ls/false (cbd85@syntax-dispatch cb183c@t '()))) (if cb183e@ls/false (apply (lambda () '()) cb183e@ls/false) (let ((cb1840@t cb183c@t)) (let ((cb1842@ls/false (cbd85@syntax-dispatch cb1840@t '((#(scheme-id mutable) . _) . any)))) (if cb1842@ls/false (apply (lambda (cb1844@rest) (cons cb1837@i (cb183a@f cb1844@rest (+ cb1837@i '1)))) cb1842@ls/false) (let ((cb1846@t cb1840@t)) (let ((cb1848@ls/false (cbd85@syntax-dispatch cb1846@t '(_ . any)))) (if cb1848@ls/false (apply (lambda (cb184a@rest) (cb183a@f cb184a@rest (+ cb1837@i '1))) cb1848@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1846@t))))))))))))) (set! cb1765@get-mutators (lambda (cb180a@foo cb180b@fields) (let ((cb180f@gen-name '#f)) (begin (set! cb180f@gen-name (lambda (cb1832@x) (cbe69@datum->syntax cb180a@foo (string->symbol (string-append (symbol->string (cbe6b@syntax->datum cb180a@foo)) '"-" (symbol->string (cbe6b@syntax->datum cb1832@x)) '"-set!"))))) (let cb1812@f ((cb1810@fields cb180b@fields)) (let ((cb1814@t cb1810@fields)) (let ((cb1816@ls/false (cbd85@syntax-dispatch cb1814@t '()))) (if cb1816@ls/false (apply (lambda () '()) cb1816@ls/false) (let ((cb1818@t cb1814@t)) (let ((cb181a@ls/false (cbd85@syntax-dispatch cb1818@t '((#(scheme-id mutable) any any any) . any)))) (if cb181a@ls/false (apply (lambda (cb181c@name cb181d@accessor cb181e@mutator cb181f@rest) (cons cb181e@mutator (cb1812@f cb181f@rest))) cb181a@ls/false) (let ((cb1824@t cb1818@t)) (let ((cb1826@ls/false (cbd85@syntax-dispatch cb1824@t '((#(scheme-id mutable) any) . any)))) (if cb1826@ls/false (apply (lambda (cb1828@name cb1829@rest) (cons (cb180f@gen-name cb1828@name) (cb1812@f cb1829@rest))) cb1826@ls/false) (let ((cb182c@t cb1824@t)) (let ((cb182e@ls/false (cbd85@syntax-dispatch cb182c@t '(_ . any)))) (if cb182e@ls/false (apply (lambda (cb1830@rest) (cb1812@f cb1830@rest)) cb182e@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb182c@t)))))))))))))))))) (set! cb1767@get-accessors (lambda (cb17c6@foo cb17c7@fields) (let ((cb17cb@gen-name '#f)) (begin (set! cb17cb@gen-name (lambda (cb1808@x) (cbe69@datum->syntax cb17c6@foo (string->symbol (string-append (symbol->string (cbe6b@syntax->datum cb17c6@foo)) '"-" (symbol->string (cbe6b@syntax->datum cb1808@x))))))) (map (lambda (cb17cc@field) (let ((cb17ce@t cb17cc@field)) (let ((cb17d0@ls/false (cbd85@syntax-dispatch cb17ce@t '(#(scheme-id mutable) any any any)))) (if (and cb17d0@ls/false (apply (lambda (cb17d2@name cb17d3@accessor cb17d4@mutator) (cbb7e@id? cb17d3@accessor)) cb17d0@ls/false)) (apply (lambda (cb17d8@name cb17d9@accessor cb17da@mutator) cb17d9@accessor) cb17d0@ls/false) (let ((cb17de@t cb17ce@t)) (let ((cb17e0@ls/false (cbd85@syntax-dispatch cb17de@t '(#(scheme-id immutable) any any)))) (if (and cb17e0@ls/false (apply (lambda (cb17e2@name cb17e3@accessor) (cbb7e@id? cb17e3@accessor)) cb17e0@ls/false)) (apply (lambda (cb17e6@name cb17e7@accessor) cb17e7@accessor) cb17e0@ls/false) (let ((cb17ea@t cb17de@t)) (let ((cb17ec@ls/false (cbd85@syntax-dispatch cb17ea@t '(#(scheme-id mutable) any)))) (if (and cb17ec@ls/false (apply (lambda (cb17ee@name) (cbb7e@id? cb17ee@name)) cb17ec@ls/false)) (apply (lambda (cb17f0@name) (cb17cb@gen-name cb17f0@name)) cb17ec@ls/false) (let ((cb17f2@t cb17ea@t)) (let ((cb17f4@ls/false (cbd85@syntax-dispatch cb17f2@t '(#(scheme-id immutable) any)))) (if (and cb17f4@ls/false (apply (lambda (cb17f6@name) (cbb7e@id? cb17f6@name)) cb17f4@ls/false)) (apply (lambda (cb17f8@name) (cb17cb@gen-name cb17f8@name)) cb17f4@ls/false) (let ((cb17fa@t cb17f2@t)) (let ((cb17fc@ls/false (cbd85@syntax-dispatch cb17fa@t 'any))) (if (and cb17fc@ls/false (apply (lambda (cb17fe@name) (cbb7e@id? cb17fe@name)) cb17fc@ls/false)) (apply (lambda (cb1800@name) (cb17cb@gen-name cb1800@name)) cb17fc@ls/false) (let ((cb1802@t cb17fa@t)) (let ((cb1804@ls/false (cbd85@syntax-dispatch cb1802@t 'any))) (if cb1804@ls/false (apply (lambda (cb1806@others) (cbe65@syntax-violation '#f '"invalid field spec" cb17cc@field)) cb1804@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1802@t)))))))))))))))))))) cb17c7@fields))))) (set! cb1769@enumerate (lambda (cb17be@ls) (let cb17c4@f ((cb17c0@ls cb17be@ls) (cb17c1@i '0)) (if (null? cb17c0@ls) '() (cons cb17c1@i (cb17c4@f (cdr cb17c0@ls) (+ cb17c1@i '1))))))) (set! cb176b@do-define-record (lambda (cb1796@namespec cb1797@clause*) (let ((cb179a@foo (cb174f@get-record-name cb1796@namespec))) (let ((cb179c@foo-rtd (gensym))) (let ((cb179e@foo-rcd (gensym))) (let ((cb17a0@protocol (gensym))) (let ((cb17a2@make-foo (cb1751@get-record-constructor-name cb1796@namespec))) (let ((cb17a4@fields (cb1761@get-fields cb1797@clause*))) (let ((cb17a6@idx* (cb1769@enumerate cb17a4@fields))) (let ((cb17a8@foo-x* (cb1767@get-accessors cb179a@foo cb17a4@fields))) (let ((cb17aa@set-foo-x!* (cb1765@get-mutators cb179a@foo cb17a4@fields))) (let ((cb17ac@set-foo-idx* (cb1763@get-mutator-indices cb17a4@fields))) (let ((cb17ae@foo? (cb1753@get-record-predicate-name cb1796@namespec))) (let ((cb17b0@foo-rtd-code (cb1757@foo-rtd-code cb179a@foo cb1797@clause* (cb1759@parent-rtd-code cb1797@clause*)))) (let ((cb17b2@foo-rcd-code (cb175d@foo-rcd-code cb1797@clause* cb179c@foo-rtd cb17a0@protocol (cb175b@parent-rcd-code cb1797@clause*)))) (let ((cb17b4@protocol-code (cb175f@get-protocol-code cb1797@clause*))) (cbd3b@bless (cons 'begin (cons (list 'define cb179c@foo-rtd cb17b0@foo-rtd-code) (cons (list 'define cb17a0@protocol cb17b4@protocol-code) (cons (list 'define cb179e@foo-rcd cb17b2@foo-rcd-code) (cons (list 'define-syntax cb179a@foo (list 'list ''$rtd (list 'syntax cb179c@foo-rtd) (list 'syntax cb179e@foo-rcd))) (cons (list 'define cb17ae@foo? (list 'record-predicate cb179c@foo-rtd)) (cons (list 'define cb17a2@make-foo (list 'record-constructor cb179e@foo-rcd)) (append (map (lambda (cb17b6@foo-x cb17b7@idx) (list 'define cb17b6@foo-x (list 'record-accessor cb179c@foo-rtd cb17b7@idx))) cb17a8@foo-x* cb17a6@idx*) (map (lambda (cb17ba@set-foo-x! cb17bb@idx) (list 'define cb17ba@set-foo-x! (list 'record-mutator cb179c@foo-rtd cb17bb@idx))) cb17aa@set-foo-x!* cb17ac@set-foo-idx*)))))))))))))))))))))))))) (set! cb176d@verify-clauses (lambda (cb1776@x cb1777@cls*) (let ((cb177b@valid-kwds '#f) (cb177d@free-id-member? '#f)) (begin (set! cb177b@valid-kwds (map cbd3b@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! cb177d@free-id-member? (lambda (cb1792@x cb1793@ls) (and (pair? cb1793@ls) (or (cbb84@free-id=? cb1792@x (car cb1793@ls)) (cb177d@free-id-member? cb1792@x (cdr cb1793@ls)))))) (let cb1782@f ((cb177e@cls* cb1777@cls*) (cb177f@seen* '())) (if (not (null? cb177e@cls*)) (let ((cb1784@t (car cb177e@cls*))) (let ((cb1786@ls/false (cbd85@syntax-dispatch cb1784@t '(any . any)))) (if cb1786@ls/false (apply (lambda (cb1788@kwd cb1789@rest) (if (or (not (cbb7e@id? cb1788@kwd)) (not (cb177d@free-id-member? cb1788@kwd cb177b@valid-kwds))) (cbe65@syntax-violation '#f '"not a valid define-record-type keyword" cb1788@kwd) (if (cbb8a@bound-id-member? cb1788@kwd cb177f@seen*) (cbe65@syntax-violation '#f '"duplicate use of keyword " cb1776@x cb1788@kwd) (cb1782@f (cdr cb177e@cls*) (cons cb1788@kwd cb177f@seen*))))) cb1786@ls/false) (let ((cb178c@t cb1784@t)) (let ((cb178e@ls/false (cbd85@syntax-dispatch cb178c@t 'any))) (if cb178e@ls/false (apply (lambda (cb1790@cls) (cbe65@syntax-violation '#f '"malformed define-record-type clause" cb1790@cls)) cb178e@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb178c@t))))))) (void))))))) (let ((cb176e@t cb174a@x)) (let ((cb1770@ls/false (cbd85@syntax-dispatch cb176e@t '(_ any . each-any)))) (if cb1770@ls/false (apply (lambda (cb1772@namespec cb1773@clause*) (begin (cb176d@verify-clauses cb174a@x cb1773@clause*) (cb176b@do-define-record cb1772@namespec cb1773@clause*))) cb1770@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb176e@t)))))))) (set! cb2855@cbd79@define-record-type-macro cbd79@define-record-type-macro) (set! cbd7b@define-condition-type-macro (lambda (cb1946@x) (let ((cb1949@mkname '#f)) (begin (set! cb1949@mkname (lambda (cb1976@name cb1977@suffix) (cbe69@datum->syntax cb1976@name (string->symbol (string-append (symbol->string (cbe6b@syntax->datum cb1976@name)) cb1977@suffix))))) (let ((cb194a@t cb1946@x)) (let ((cb194c@ls/false (cbd85@syntax-dispatch cb194a@t '(any any any any any . #(each (any any)))))) (if (and cb194c@ls/false (apply (lambda (cb194e@ctxt cb194f@name cb1950@super cb1951@constructor cb1952@predicate cb1953@field* cb1954@accessor*) (and (cbb7e@id? cb194f@name) (cbb7e@id? cb1950@super) (cbb7e@id? cb1951@constructor) (cbb7e@id? cb1952@predicate) (for-all cbb7e@id? cb1953@field*) (for-all cbb7e@id? cb1954@accessor*))) cb194c@ls/false)) (apply (lambda (cb195c@ctxt cb195d@name cb195e@super cb195f@constructor cb1960@predicate cb1961@field* cb1962@accessor*) (let ((cb196a@aux-accessor* (map (lambda (cb196c@x) (gensym)) cb1962@accessor*))) (cbd3b@bless (cons 'begin (cons (cons 'define-record-type (cons (list cb195d@name cb195f@constructor (gensym)) (cons (list 'parent cb195e@super) (cons (cons 'fields (map (lambda (cb196e@field cb196f@aux) (list 'immutable cb196e@field cb196f@aux)) cb1961@field* cb196a@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define cb1960@predicate (list 'condition-predicate (list 'record-type-descriptor cb195d@name))) (map (lambda (cb1972@accessor cb1973@aux) (list 'define cb1972@accessor (list 'condition-accessor (list 'record-type-descriptor cb195d@name) cb1973@aux))) cb1962@accessor* cb196a@aux-accessor*))))))) cb194c@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb194a@t)))))))) (set! cb2856@cbd7b@define-condition-type-macro cbd7b@define-condition-type-macro) (set! cbd7d@incorrect-usage-macro (lambda (cb197a@e) (cbe65@syntax-violation '#f '"incorrect usage of auxiliary keyword" cb197a@e))) (set! cb2857@cbd7d@incorrect-usage-macro cbd7d@incorrect-usage-macro) (set! cbd7f@parameterize-macro (lambda (cb197c@e) (let ((cb197e@t cb197c@e)) (let ((cb1980@ls/false (cbd85@syntax-dispatch cb197e@t '(_ () any . each-any)))) (if cb1980@ls/false (apply (lambda (cb1982@b cb1983@b*) (cbd3b@bless (cons 'let (cons '() (cons cb1982@b cb1983@b*))))) cb1980@ls/false) (let ((cb1986@t cb197e@t)) (let ((cb1988@ls/false (cbd85@syntax-dispatch cb1986@t '(_ #(each (any any)) any . each-any)))) (if cb1988@ls/false (apply (lambda (cb198a@olhs* cb198b@orhs* cb198c@b cb198d@b*) (let ((cb1992@lhs* (cbe53@generate-temporaries cb198a@olhs*)) (cb1993@rhs* (cbe53@generate-temporaries cb198b@orhs*))) (cbd3b@bless (cons (list 'lambda (append cb1992@lhs* cb1993@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (cb1996@lhs cb1997@rhs) (list 'let (list (list 't (list cb1996@lhs))) (list cb1996@lhs cb1997@rhs) (cons 'set! (cons cb1997@rhs '(t))))) cb1992@lhs* cb1993@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons cb198c@b cb198d@b*))) '(swap)))))) (append cb198a@olhs* cb198b@orhs*))))) cb1988@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1986@t))))))))) (set! cb2858@cbd7f@parameterize-macro cbd7f@parameterize-macro) (set! cbd81@foreign-call-transformer (lambda (cb199a@e cb199b@r cb199c@mr) (let ((cb19a0@t cb199a@e)) (let ((cb19a2@ls/false (cbd85@syntax-dispatch cb19a0@t '(_ any . each-any)))) (if cb19a2@ls/false (apply (lambda (cb19a4@name cb19a5@arg*) (cons 'foreign-call (cons (cbda7@chi-expr cb19a4@name cb199b@r cb199c@mr) (cbda3@chi-expr* cb19a5@arg* cb199b@r cb199c@mr)))) cb19a2@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb19a0@t)))))) (set! cb2859@cbd81@foreign-call-transformer cbd81@foreign-call-transformer) (set! cbd83@convert-pattern (lambda (cb19a8@pattern cb19a9@keys) (let ((cb19ad@cvt* '#f) (cb19af@cvt '#f)) (begin (set! cb19ad@cvt* (lambda (cb1a4c@p* cb1a4d@n cb1a4e@ids) (if (null? cb1a4c@p*) (values '() cb1a4e@ids) (call-with-values (lambda () (cb19ad@cvt* (cdr cb1a4c@p*) cb1a4d@n cb1a4e@ids)) (lambda (cb1a56@cb1a53 cb1a57@cb1a55) (let ((cb1a5a@ids cb1a57@cb1a55) (cb1a5b@y cb1a56@cb1a53)) (call-with-values (lambda () (cb19af@cvt (car cb1a4c@p*) cb1a4d@n cb1a5a@ids)) (lambda (cb1a62@cb1a5f cb1a63@cb1a61) (let ((cb1a66@ids cb1a63@cb1a61) (cb1a67@x cb1a62@cb1a5f)) (values (cons cb1a67@x cb1a5b@y) cb1a66@ids)))))))))) (set! cb19af@cvt (lambda (cb19b0@p cb19b1@n cb19b2@ids) (let ((cb19b6@t cb19b0@p)) (let ((cb19b8@ls/false (cbd85@syntax-dispatch cb19b6@t 'any))) (if (and cb19b8@ls/false (apply (lambda (cb19ba@id) (cbb7e@id? cb19ba@id)) cb19b8@ls/false)) (apply (lambda (cb19bc@id) (if (cbb8a@bound-id-member? cb19b0@p cb19a9@keys) (values (vector 'free-id cb19b0@p) cb19b2@ids) (if (cbb84@free-id=? cb19b0@p (cbd0d@scheme-stx '_)) (values '_ cb19b2@ids) (values 'any (cons (cons cb19b0@p cb19b1@n) cb19b2@ids))))) cb19b8@ls/false) (let ((cb19be@t cb19b6@t)) (let ((cb19c0@ls/false (cbd85@syntax-dispatch cb19be@t '(any any)))) (if (and cb19c0@ls/false (apply (lambda (cb19c2@p cb19c3@dots) (cbd87@ellipsis? cb19c3@dots)) cb19c0@ls/false)) (apply (lambda (cb19c6@p cb19c7@dots) (call-with-values (lambda () (cb19af@cvt cb19c6@p (+ cb19b1@n '1) cb19b2@ids)) (lambda (cb19ce@cb19cb cb19cf@cb19cd) (let ((cb19d2@ids cb19cf@cb19cd) (cb19d3@p cb19ce@cb19cb)) (values (if (eq? cb19d3@p 'any) 'each-any (vector 'each cb19d3@p)) cb19d2@ids))))) cb19c0@ls/false) (let ((cb19d6@t cb19be@t)) (let ((cb19d8@ls/false (cbd85@syntax-dispatch cb19d6@t '(any any . #(each+ any () any))))) (if (and cb19d8@ls/false (apply (lambda (cb19da@x cb19db@dots cb19dc@ys cb19dd@z) (cbd87@ellipsis? cb19db@dots)) cb19d8@ls/false)) (apply (lambda (cb19e2@x cb19e3@dots cb19e4@ys cb19e5@z) (call-with-values (lambda () (cb19af@cvt cb19e5@z cb19b1@n cb19b2@ids)) (lambda (cb19ee@cb19eb cb19ef@cb19ed) (let ((cb19f2@ids cb19ef@cb19ed) (cb19f3@z cb19ee@cb19eb)) (call-with-values (lambda () (cb19ad@cvt* cb19e4@ys cb19b1@n cb19f2@ids)) (lambda (cb19fa@cb19f7 cb19fb@cb19f9) (let ((cb19fe@ids cb19fb@cb19f9) (cb19ff@ys cb19fa@cb19f7)) (call-with-values (lambda () (cb19af@cvt cb19e2@x (+ cb19b1@n '1) cb19fe@ids)) (lambda (cb1a06@cb1a03 cb1a07@cb1a05) (let ((cb1a0a@ids cb1a07@cb1a05) (cb1a0b@x cb1a06@cb1a03)) (values (vector 'each+ cb1a0b@x (reverse cb19ff@ys) cb19f3@z) cb1a0a@ids))))))))))) cb19d8@ls/false) (let ((cb1a0e@t cb19d6@t)) (let ((cb1a10@ls/false (cbd85@syntax-dispatch cb1a0e@t '(any . any)))) (if cb1a10@ls/false (apply (lambda (cb1a12@x cb1a13@y) (call-with-values (lambda () (cb19af@cvt cb1a13@y cb19b1@n cb19b2@ids)) (lambda (cb1a1a@cb1a17 cb1a1b@cb1a19) (let ((cb1a1e@ids cb1a1b@cb1a19) (cb1a1f@y cb1a1a@cb1a17)) (call-with-values (lambda () (cb19af@cvt cb1a12@x cb19b1@n cb1a1e@ids)) (lambda (cb1a26@cb1a23 cb1a27@cb1a25) (let ((cb1a2a@ids cb1a27@cb1a25) (cb1a2b@x cb1a26@cb1a23)) (values (cons cb1a2b@x cb1a1f@y) cb1a2a@ids)))))))) cb1a10@ls/false) (let ((cb1a2e@t cb1a0e@t)) (let ((cb1a30@ls/false (cbd85@syntax-dispatch cb1a2e@t '()))) (if cb1a30@ls/false (apply (lambda () (values '() cb19b2@ids)) cb1a30@ls/false) (let ((cb1a32@t cb1a2e@t)) (let ((cb1a34@ls/false (cbd85@syntax-dispatch cb1a32@t '#(vector each-any)))) (if (and cb1a34@ls/false (apply (lambda (cb1a36@p) (not (cbb4a@stx? cb1a36@p))) cb1a34@ls/false)) (apply (lambda (cb1a38@p) (call-with-values (lambda () (cb19af@cvt cb1a38@p cb19b1@n cb19b2@ids)) (lambda (cb1a3e@cb1a3b cb1a3f@cb1a3d) (let ((cb1a42@ids cb1a3f@cb1a3d) (cb1a43@p cb1a3e@cb1a3b)) (values (vector 'vector cb1a43@p) cb1a42@ids))))) cb1a34@ls/false) (let ((cb1a46@t cb1a32@t)) (let ((cb1a48@ls/false (cbd85@syntax-dispatch cb1a46@t 'any))) (if cb1a48@ls/false (apply (lambda (cb1a4a@datum) (values (vector 'atom (cbb92@stx->datum cb1a4a@datum)) cb19b2@ids)) cb1a48@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1a46@t)))))))))))))))))))))))) (cb19af@cvt cb19a8@pattern '0 '()))))) (set! cb285a@cbd83@convert-pattern cbd83@convert-pattern) (set! cbd85@syntax-dispatch (let ((cb1a6b@stx^ '#f) (cb1a6d@match-each '#f) (cb1a6f@match-each+ '#f) (cb1a71@match-each-any '#f) (cb1a73@match-empty '#f) (cb1a75@combine '#f) (cb1a77@match* '#f) (cb1a79@match '#f)) (begin (set! cb1a6b@stx^ (lambda (cb1b46@e cb1b47@m* cb1b48@s* cb1b49@ae*) (if (and (null? cb1b47@m*) (null? cb1b48@s*) (null? cb1b49@ae*)) cb1b46@e (cbb66@mkstx cb1b46@e cb1b47@m* cb1b48@s* cb1b49@ae*)))) (set! cb1a6d@match-each (lambda (cb1b26@e cb1b27@p cb1b28@m* cb1b29@s* cb1b2a@ae*) (if (pair? cb1b26@e) (let ((cb1b30@first (cb1a79@match (car cb1b26@e) cb1b27@p cb1b28@m* cb1b29@s* cb1b2a@ae* '()))) (and cb1b30@first (let ((cb1b32@rest (cb1a6d@match-each (cdr cb1b26@e) cb1b27@p cb1b28@m* cb1b29@s* cb1b2a@ae*))) (and cb1b32@rest (cons cb1b30@first cb1b32@rest))))) (if (null? cb1b26@e) '() (if (cbb4a@stx? cb1b26@e) (and (not (cbb04@top-marked? cb1b28@m*)) (call-with-values (lambda () (join-wraps cb1b28@m* cb1b29@s* cb1b2a@ae* cb1b26@e)) (lambda (cb1b3a@cb1b35 cb1b3b@cb1b37 cb1b3c@cb1b39) (let ((cb1b40@ae* cb1b3c@cb1b39) (cb1b41@s* cb1b3b@cb1b37) (cb1b42@m* cb1b3a@cb1b35)) (cb1a6d@match-each (cbb4c@stx-expr cb1b26@e) cb1b27@p cb1b42@m* cb1b41@s* cb1b40@ae*))))) (if (cb6bc@cb58e@annotation? cb1b26@e) (cb1a6d@match-each (cb6be@cb592@annotation-expression cb1b26@e) cb1b27@p cb1b28@m* cb1b29@s* cb1b2a@ae*) '#f)))))) (set! cb1a6f@match-each+ (lambda (cb1ae6@e cb1ae7@x-pat cb1ae8@y-pat cb1ae9@z-pat cb1aea@m* cb1aeb@s* cb1aec@ae* cb1aed@r) (let cb1afe@f ((cb1af6@e cb1ae6@e) (cb1af7@m* cb1aea@m*) (cb1af8@s* cb1aeb@s*) (cb1af9@ae* cb1aec@ae*)) (if (pair? cb1af6@e) (call-with-values (lambda () (cb1afe@f (cdr cb1af6@e) cb1af7@m* cb1af8@s* cb1af9@ae*)) (lambda (cb1b06@cb1b01 cb1b07@cb1b03 cb1b08@cb1b05) (let ((cb1b0c@r cb1b08@cb1b05) (cb1b0d@y-pat cb1b07@cb1b03) (cb1b0e@xr* cb1b06@cb1b01)) (if cb1b0c@r (if (null? cb1b0d@y-pat) (let ((cb1b12@xr (cb1a79@match (car cb1af6@e) cb1ae7@x-pat cb1af7@m* cb1af8@s* cb1af9@ae* '()))) (if cb1b12@xr (values (cons cb1b12@xr cb1b0e@xr*) cb1b0d@y-pat cb1b0c@r) (values '#f '#f '#f))) (values '() (cdr cb1b0d@y-pat) (cb1a79@match (car cb1af6@e) (car cb1b0d@y-pat) cb1af7@m* cb1af8@s* cb1af9@ae* cb1b0c@r))) (values '#f '#f '#f))))) (if (cbb4a@stx? cb1af6@e) (if (cbb04@top-marked? cb1af7@m*) (values '() cb1ae8@y-pat (cb1a79@match cb1af6@e cb1ae9@z-pat cb1af7@m* cb1af8@s* cb1af9@ae* cb1aed@r)) (call-with-values (lambda () (join-wraps cb1af7@m* cb1af8@s* cb1af9@ae* cb1af6@e)) (lambda (cb1b1a@cb1b15 cb1b1b@cb1b17 cb1b1c@cb1b19) (let ((cb1b20@ae* cb1b1c@cb1b19) (cb1b21@s* cb1b1b@cb1b17) (cb1b22@m* cb1b1a@cb1b15)) (cb1afe@f (cbb4c@stx-expr cb1af6@e) cb1b22@m* cb1b21@s* cb1b20@ae*))))) (if (cb6bc@cb58e@annotation? cb1af6@e) (cb1afe@f (cb6be@cb592@annotation-expression cb1af6@e) cb1af7@m* cb1af8@s* cb1af9@ae*) (values '() cb1ae8@y-pat (cb1a79@match cb1af6@e cb1ae9@z-pat cb1af7@m* cb1af8@s* cb1af9@ae* cb1aed@r)))))))) (set! cb1a71@match-each-any (lambda (cb1aca@e cb1acb@m* cb1acc@s* cb1acd@ae*) (if (pair? cb1aca@e) (let ((cb1ad2@l (cb1a71@match-each-any (cdr cb1aca@e) cb1acb@m* cb1acc@s* cb1acd@ae*))) (and cb1ad2@l (cons (cb1a6b@stx^ (car cb1aca@e) cb1acb@m* cb1acc@s* cb1acd@ae*) cb1ad2@l))) (if (null? cb1aca@e) '() (if (cbb4a@stx? cb1aca@e) (and (not (cbb04@top-marked? cb1acb@m*)) (call-with-values (lambda () (join-wraps cb1acb@m* cb1acc@s* cb1acd@ae* cb1aca@e)) (lambda (cb1ada@cb1ad5 cb1adb@cb1ad7 cb1adc@cb1ad9) (let ((cb1ae0@ae* cb1adc@cb1ad9) (cb1ae1@s* cb1adb@cb1ad7) (cb1ae2@m* cb1ada@cb1ad5)) (cb1a71@match-each-any (cbb4c@stx-expr cb1aca@e) cb1ae2@m* cb1ae1@s* cb1ae0@ae*))))) (if (cb6bc@cb58e@annotation? cb1aca@e) (cb1a71@match-each-any (cb6be@cb592@annotation-expression cb1aca@e) cb1acb@m* cb1acc@s* cb1acd@ae*) '#f)))))) (set! cb1a73@match-empty (lambda (cb1ac4@p cb1ac5@r) (if (null? cb1ac4@p) cb1ac5@r (if (eq? cb1ac4@p '_) cb1ac5@r (if (eq? cb1ac4@p 'any) (cons '() cb1ac5@r) (if (pair? cb1ac4@p) (cb1a73@match-empty (car cb1ac4@p) (cb1a73@match-empty (cdr cb1ac4@p) cb1ac5@r)) (if (eq? cb1ac4@p 'each-any) (cons '() cb1ac5@r) (let ((cb1ac8@t (vector-ref cb1ac4@p '0))) (if (memv cb1ac8@t '(each)) (cb1a73@match-empty (vector-ref cb1ac4@p '1) cb1ac5@r) (if (memv cb1ac8@t '(each+)) (cb1a73@match-empty (vector-ref cb1ac4@p '1) (cb1a73@match-empty (reverse (vector-ref cb1ac4@p '2)) (cb1a73@match-empty (vector-ref cb1ac4@p '3) cb1ac5@r))) (if (memv cb1ac8@t '(free-id atom)) cb1ac5@r (if (memv cb1ac8@t '(scheme-id atom)) cb1ac5@r (if (memv cb1ac8@t '(vector)) (cb1a73@match-empty (vector-ref cb1ac4@p '1) cb1ac5@r) (assertion-violation 'syntax-dispatch '"invalid pattern" cb1ac4@p)))))))))))))) (set! cb1a75@combine (lambda (cb1ac0@r* cb1ac1@r) (if (null? (car cb1ac0@r*)) cb1ac1@r (cons (map car cb1ac0@r*) (cb1a75@combine (map cdr cb1ac0@r*) cb1ac1@r))))) (set! cb1a77@match* (lambda (cb1a9c@e cb1a9d@p cb1a9e@m* cb1a9f@s* cb1aa0@ae* cb1aa1@r) (if (null? cb1a9d@p) (and (null? cb1a9c@e) cb1aa1@r) (if (pair? cb1a9d@p) (and (pair? cb1a9c@e) (cb1a79@match (car cb1a9c@e) (car cb1a9d@p) cb1a9e@m* cb1a9f@s* cb1aa0@ae* (cb1a79@match (cdr cb1a9c@e) (cdr cb1a9d@p) cb1a9e@m* cb1a9f@s* cb1aa0@ae* cb1aa1@r))) (if (eq? cb1a9d@p 'each-any) (let ((cb1aa8@l (cb1a71@match-each-any cb1a9c@e cb1a9e@m* cb1a9f@s* cb1aa0@ae*))) (and cb1aa8@l (cons cb1aa8@l cb1aa1@r))) (let ((cb1aaa@t (vector-ref cb1a9d@p '0))) (if (memv cb1aaa@t '(each)) (if (null? cb1a9c@e) (cb1a73@match-empty (vector-ref cb1a9d@p '1) cb1aa1@r) (let ((cb1aac@r* (cb1a6d@match-each cb1a9c@e (vector-ref cb1a9d@p '1) cb1a9e@m* cb1a9f@s* cb1aa0@ae*))) (and cb1aac@r* (cb1a75@combine cb1aac@r* cb1aa1@r)))) (if (memv cb1aaa@t '(free-id)) (and (symbol? cb1a9c@e) (cbb04@top-marked? cb1a9e@m*) (cbb84@free-id=? (cb1a6b@stx^ cb1a9c@e cb1a9e@m* cb1a9f@s* cb1aa0@ae*) (vector-ref cb1a9d@p '1)) cb1aa1@r) (if (memv cb1aaa@t '(scheme-id)) (and (symbol? cb1a9c@e) (cbb04@top-marked? cb1a9e@m*) (cbb84@free-id=? (cb1a6b@stx^ cb1a9c@e cb1a9e@m* cb1a9f@s* cb1aa0@ae*) (cbd0d@scheme-stx (vector-ref cb1a9d@p '1))) cb1aa1@r) (if (memv cb1aaa@t '(each+)) (call-with-values (lambda () (cb1a6f@match-each+ cb1a9c@e (vector-ref cb1a9d@p '1) (vector-ref cb1a9d@p '2) (vector-ref cb1a9d@p '3) cb1a9e@m* cb1a9f@s* cb1aa0@ae* cb1aa1@r)) (lambda (cb1ab4@cb1aaf cb1ab5@cb1ab1 cb1ab6@cb1ab3) (let ((cb1aba@r cb1ab6@cb1ab3) (cb1abb@y-pat cb1ab5@cb1ab1) (cb1abc@xr* cb1ab4@cb1aaf)) (and cb1aba@r (null? cb1abb@y-pat) (if (null? cb1abc@xr*) (cb1a73@match-empty (vector-ref cb1a9d@p '1) cb1aba@r) (cb1a75@combine cb1abc@xr* cb1aba@r)))))) (if (memv cb1aaa@t '(atom)) (and (fast-equal? (vector-ref cb1a9d@p '1) (cbb90@strip cb1a9c@e cb1a9e@m*)) cb1aa1@r) (if (memv cb1aaa@t '(vector)) (and (vector? cb1a9c@e) (cb1a79@match (vector->list cb1a9c@e) (vector-ref cb1a9d@p '1) cb1a9e@m* cb1a9f@s* cb1aa0@ae* cb1aa1@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" cb1a9d@p))))))))))))) (set! cb1a79@match (lambda (cb1a7e@e cb1a7f@p cb1a80@m* cb1a81@s* cb1a82@ae* cb1a83@r) (if (not cb1a83@r) '#f (if (eq? cb1a7f@p '_) cb1a83@r (if (eq? cb1a7f@p 'any) (cons (cb1a6b@stx^ cb1a7e@e cb1a80@m* cb1a81@s* cb1a82@ae*) cb1a83@r) (if (cbb4a@stx? cb1a7e@e) (and (not (cbb04@top-marked? cb1a80@m*)) (call-with-values (lambda () (join-wraps cb1a80@m* cb1a81@s* cb1a82@ae* cb1a7e@e)) (lambda (cb1a90@cb1a8b cb1a91@cb1a8d cb1a92@cb1a8f) (let ((cb1a96@ae* cb1a92@cb1a8f) (cb1a97@s* cb1a91@cb1a8d) (cb1a98@m* cb1a90@cb1a8b)) (cb1a79@match (cbb4c@stx-expr cb1a7e@e) cb1a7f@p cb1a98@m* cb1a97@s* cb1a96@ae* cb1a83@r))))) (if (cb6bc@cb58e@annotation? cb1a7e@e) (cb1a79@match (cb6be@cb592@annotation-expression cb1a7e@e) cb1a7f@p cb1a80@m* cb1a81@s* cb1a82@ae* cb1a83@r) (cb1a77@match* cb1a7e@e cb1a7f@p cb1a80@m* cb1a81@s* cb1a82@ae* cb1a83@r)))))))) (lambda (cb1a7a@e cb1a7b@p) (cb1a79@match cb1a7a@e cb1a7b@p '() '() '() '()))))) (set! cb285b@cbd85@syntax-dispatch cbd85@syntax-dispatch) (set! cbd87@ellipsis? (lambda (cb1b4e@x) (and (cbb7e@id? cb1b4e@x) (cbb84@free-id=? cb1b4e@x (cbd0d@scheme-stx '...))))) (set! cb285c@cbd87@ellipsis? cbd87@ellipsis?) (set! cbd89@underscore? (lambda (cb1b50@x) (and (cbb7e@id? cb1b50@x) (cbb84@free-id=? cb1b50@x (cbd0d@scheme-stx '_))))) (set! cb285d@cbd89@underscore? cbd89@underscore?) (set! cbd8b@verify-literals (lambda (cb1b52@lits cb1b53@expr) (for-each (lambda (cb1b56@x) (if (or (not (cbb7e@id? cb1b56@x)) (cbd87@ellipsis? cb1b56@x) (cbd89@underscore? cb1b56@x)) (cbe65@syntax-violation '#f '"invalid literal" cb1b53@expr cb1b56@x) (void))) cb1b52@lits))) (set! cb285e@cbd8b@verify-literals cbd8b@verify-literals) (set! cbd8d@syntax-case-transformer (let ((cb1b59@build-dispatch-call '#f) (cb1b5b@invalid-ids-error '#f) (cb1b5d@gen-clause '#f) (cb1b5f@gen-syntax-case '#f)) (begin (set! cb1b59@build-dispatch-call (lambda (cb1bca@pvars cb1bcb@expr cb1bcc@y cb1bcd@r cb1bce@mr) (let ((cb1bd4@ids (map car cb1bca@pvars)) (cb1bd5@levels (map cdr cb1bca@pvars))) (let ((cb1bd8@labels (map cbb0a@gen-label cb1bd4@ids)) (cb1bd9@new-vars (map cbb06@gen-lexical cb1bd4@ids))) (let ((cb1bdc@body (cbda7@chi-expr (cbb6a@add-subst (cbb3e@make-full-rib cb1bd4@ids cb1bd8@labels) cb1bcb@expr) (append (map (lambda (cb1bde@label cb1bdf@var cb1be0@level) (cons cb1bde@label (cbb98@make-binding 'syntax (cons cb1bdf@var cb1be0@level)))) cb1bd8@labels cb1bd9@new-vars (map cdr cb1bca@pvars)) cb1bcd@r) cb1bce@mr))) (list '(primitive apply) (cbae1@cba0d@build-lambda '#f cb1bd9@new-vars cb1bdc@body) cb1bcc@y)))))) (set! cb1b5b@invalid-ids-error (lambda (cb1bbe@id* cb1bbf@e cb1bc0@class) (let cb1bc8@find ((cb1bc4@id* cb1bbe@id*) (cb1bc5@ok* '())) (if (null? cb1bc4@id*) (cbe65@syntax-violation '#f '"invalid syntax" cb1bbf@e) (if (cbb7e@id? (car cb1bc4@id*)) (if (cbb8a@bound-id-member? (car cb1bc4@id*) cb1bc5@ok*) (cbe61@syntax-error (car cb1bc4@id*) '"duplicate " cb1bc0@class) (cb1bc8@find (cdr cb1bc4@id*) (cons (car cb1bc4@id*) cb1bc5@ok*))) (cbe61@syntax-error (car cb1bc4@id*) '"invalid " cb1bc0@class)))))) (set! cb1b5d@gen-clause (lambda (cb1b96@x cb1b97@keys cb1b98@clauses cb1b99@r cb1b9a@mr cb1b9b@pat cb1b9c@fender cb1b9d@expr) (call-with-values (lambda () (cbd83@convert-pattern cb1b9b@pat cb1b97@keys)) (lambda (cb1baa@cb1ba7 cb1bab@cb1ba9) (let ((cb1bae@pvars cb1bab@cb1ba9) (cb1baf@p cb1baa@cb1ba7)) (if (not (cbb88@distinct-bound-ids? (map car cb1bae@pvars))) (cb1b5b@invalid-ids-error (map car cb1bae@pvars) cb1b9b@pat '"pattern variable") (if (not (for-all (lambda (cb1bb2@x) (not (cbd87@ellipsis? (car cb1bb2@x)))) cb1bae@pvars)) (cbe65@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" cb1b9b@pat) (let ((cb1bb4@y (cbb06@gen-lexical 'tmp))) (let ((cb1bb6@test (if (eq? cb1b9c@fender '#t) cb1bb4@y (let ((cb1bb8@call (cb1b59@build-dispatch-call cb1bae@pvars cb1b9c@fender cb1bb4@y cb1b99@r cb1b9a@mr))) (list 'if cb1bb4@y cb1bb8@call (list 'quote '#f)))))) (let ((cb1bba@conseq (cb1b59@build-dispatch-call cb1bae@pvars cb1b9d@expr cb1bb4@y cb1b99@r cb1b9a@mr))) (let ((cb1bbc@altern (cb1b5f@gen-syntax-case cb1b96@x cb1b97@keys cb1b98@clauses cb1b99@r cb1b9a@mr))) (list (cbae1@cba0d@build-lambda '#f (list cb1bb4@y) (list 'if cb1bb6@test cb1bba@conseq cb1bbc@altern)) (list '(primitive syntax-dispatch) cb1b96@x (list 'quote cb1baf@p)))))))))))))) (set! cb1b5f@gen-syntax-case (lambda (cb1b74@x cb1b75@keys cb1b76@clauses cb1b77@r cb1b78@mr) (if (null? cb1b76@clauses) (list '(primitive syntax-error) cb1b74@x) (let ((cb1b7e@t (car cb1b76@clauses))) (let ((cb1b80@ls/false (cbd85@syntax-dispatch cb1b7e@t '(any any)))) (if cb1b80@ls/false (apply (lambda (cb1b82@pat cb1b83@expr) (if (and (cbb7e@id? cb1b82@pat) (not (cbb8a@bound-id-member? cb1b82@pat cb1b75@keys)) (not (cbd87@ellipsis? cb1b82@pat))) (if (cbb84@free-id=? cb1b82@pat (cbd0d@scheme-stx '_)) (cbda7@chi-expr cb1b83@expr cb1b77@r cb1b78@mr) (let ((cb1b86@lab (cbb0a@gen-label cb1b82@pat)) (cb1b87@lex (cbb06@gen-lexical cb1b82@pat))) (let ((cb1b8a@body (cbda7@chi-expr (cbb6a@add-subst (cbb3e@make-full-rib (list cb1b82@pat) (list cb1b86@lab)) cb1b83@expr) (cons (cons cb1b86@lab (cbb98@make-binding 'syntax (cons cb1b87@lex '0))) cb1b77@r) cb1b78@mr))) (list (cbae1@cba0d@build-lambda '#f (list cb1b87@lex) cb1b8a@body) cb1b74@x)))) (cb1b5d@gen-clause cb1b74@x cb1b75@keys (cdr cb1b76@clauses) cb1b77@r cb1b78@mr cb1b82@pat '#t cb1b83@expr))) cb1b80@ls/false) (let ((cb1b8c@t cb1b7e@t)) (let ((cb1b8e@ls/false (cbd85@syntax-dispatch cb1b8c@t '(any any any)))) (if cb1b8e@ls/false (apply (lambda (cb1b90@pat cb1b91@fender cb1b92@expr) (cb1b5d@gen-clause cb1b74@x cb1b75@keys (cdr cb1b76@clauses) cb1b77@r cb1b78@mr cb1b90@pat cb1b91@fender cb1b92@expr)) cb1b8e@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1b8c@t)))))))))) (lambda (cb1b60@e cb1b61@r cb1b62@mr) (let ((cb1b66@t cb1b60@e)) (let ((cb1b68@ls/false (cbd85@syntax-dispatch cb1b66@t '(_ any each-any . each-any)))) (if cb1b68@ls/false (apply (lambda (cb1b6a@expr cb1b6b@keys cb1b6c@clauses) (begin (cbd8b@verify-literals cb1b6b@keys cb1b60@e) (let ((cb1b70@x (cbb06@gen-lexical 'tmp))) (let ((cb1b72@body (cb1b5f@gen-syntax-case cb1b70@x cb1b6b@keys cb1b6c@clauses cb1b61@r cb1b62@mr))) (list (cbae1@cba0d@build-lambda '#f (list cb1b70@x) cb1b72@body) (cbda7@chi-expr cb1b6a@expr cb1b61@r cb1b62@mr)))))) cb1b68@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1b66@t)))))))) (set! cb285f@cbd8d@syntax-case-transformer cbd8d@syntax-case-transformer) (set! cbd8f@ellipsis-map (lambda (cb1be4@proc cb1be5@ls . cb1be8@ls*) (let ((cb1beb@who '#f)) (begin (set! cb1beb@who '...) (begin (if (not (list? cb1be5@ls)) (assertion-violation cb1beb@who '"not a list" cb1be5@ls) (void)) (if (not (null? cb1be8@ls*)) (let ((cb1bec@n (length cb1be5@ls))) (for-each (lambda (cb1bee@x) (begin (if (not (list? cb1bee@x)) (assertion-violation cb1beb@who '"not a list" cb1bee@x) (void)) (if (not (= (length cb1bee@x) cb1bec@n)) (assertion-violation cb1beb@who '"length mismatch" cb1be5@ls cb1bee@x) (void)))) cb1be8@ls*)) (void)) (apply map cb1be4@proc cb1be5@ls cb1be8@ls*)))))) (set! cb2860@cbd8f@ellipsis-map cbd8f@ellipsis-map) (set! cbd91@syntax-transformer (let ((cb1bf1@gen-syntax '#f) (cb1bf3@gen-ref '#f) (cb1bf5@gen-append '#f) (cb1bf7@gen-mappend '#f) (cb1bf9@gen-map '#f) (cb1bfb@gen-cons '#f) (cb1bfd@gen-vector '#f) (cb1bff@regen '#f)) (begin (set! cb1bf1@gen-syntax (lambda (cb1c68@src cb1c69@e cb1c6a@r cb1c6b@maps cb1c6c@ellipsis? cb1c6d@vec?) (let ((cb1c74@t cb1c69@e)) (let ((cb1c76@ls/false (cbd85@syntax-dispatch cb1c74@t 'any))) (if (and cb1c76@ls/false (apply (lambda (cb1c78@dots) (cb1c6c@ellipsis? cb1c78@dots)) cb1c76@ls/false)) (apply (lambda (cb1c7a@dots) (cbe65@syntax-violation '#f '"misplaced ellipsis in syntax form" cb1c68@src)) cb1c76@ls/false) (let ((cb1c7c@t cb1c74@t)) (let ((cb1c7e@ls/false (cbd85@syntax-dispatch cb1c7c@t 'any))) (if (and cb1c7e@ls/false (apply (lambda (cb1c80@id) (cbb7e@id? cb1c80@id)) cb1c7e@ls/false)) (apply (lambda (cb1c82@id) (let ((cb1c84@label (cbb94@id->label cb1c69@e))) (let ((cb1c86@b (cbb96@label->binding cb1c84@label cb1c6a@r))) (if (eq? (cbb9a@binding-type cb1c86@b) 'syntax) (call-with-values (lambda () (let ((cb1c8c@var.lev (cbb9c@binding-value cb1c86@b))) (cb1bf3@gen-ref cb1c68@src (car cb1c8c@var.lev) (cdr cb1c8c@var.lev) cb1c6b@maps))) (lambda (cb1c8e@cb1c89 cb1c8f@cb1c8b) (let ((cb1c92@maps cb1c8f@cb1c8b) (cb1c93@var cb1c8e@cb1c89)) (values (list 'ref cb1c93@var) cb1c92@maps)))) (values (list 'quote cb1c69@e) cb1c6b@maps))))) cb1c7e@ls/false) (let ((cb1c96@t cb1c7c@t)) (let ((cb1c98@ls/false (cbd85@syntax-dispatch cb1c96@t '(any any)))) (if (and cb1c98@ls/false (apply (lambda (cb1c9a@dots cb1c9b@e) (cb1c6c@ellipsis? cb1c9a@dots)) cb1c98@ls/false)) (apply (lambda (cb1c9e@dots cb1c9f@e) (if cb1c6d@vec? (cbe65@syntax-violation '#f '"misplaced ellipsis in syntax form" cb1c68@src) (cb1bf1@gen-syntax cb1c68@src cb1c9f@e cb1c6a@r cb1c6b@maps (lambda (cb1ca2@x) '#f) '#f))) cb1c98@ls/false) (let ((cb1ca4@t cb1c96@t)) (let ((cb1ca6@ls/false (cbd85@syntax-dispatch cb1ca4@t '(any any . any)))) (if (and cb1ca6@ls/false (apply (lambda (cb1ca8@x cb1ca9@dots cb1caa@y) (cb1c6c@ellipsis? cb1ca9@dots)) cb1ca6@ls/false)) (apply (lambda (cb1cae@x cb1caf@dots cb1cb0@y) (let cb1cc6@f ((cb1cb4@y cb1cb0@y) (cb1cb5@k (lambda (cb1cb8@maps) (call-with-values (lambda () (cb1bf1@gen-syntax cb1c68@src cb1cae@x cb1c6a@r (cons '() cb1cb8@maps) cb1c6c@ellipsis? '#f)) (lambda (cb1cbe@cb1cbb cb1cbf@cb1cbd) (let ((cb1cc2@maps cb1cbf@cb1cbd) (cb1cc3@x cb1cbe@cb1cbb)) (if (null? (car cb1cc2@maps)) (cbe65@syntax-violation '#f '"extra ellipsis in syntax form" cb1c68@src) (values (cb1bf9@gen-map cb1cc3@x (car cb1cc2@maps)) (cdr cb1cc2@maps))))))))) (let ((cb1cc8@t cb1cb4@y)) (let ((cb1cca@ls/false (cbd85@syntax-dispatch cb1cc8@t '()))) (if cb1cca@ls/false (apply (lambda () (cb1cb5@k cb1c6b@maps)) cb1cca@ls/false) (let ((cb1ccc@t cb1cc8@t)) (let ((cb1cce@ls/false (cbd85@syntax-dispatch cb1ccc@t '(any . any)))) (if (and cb1cce@ls/false (apply (lambda (cb1cd0@dots cb1cd1@y) (cb1c6c@ellipsis? cb1cd0@dots)) cb1cce@ls/false)) (apply (lambda (cb1cd4@dots cb1cd5@y) (cb1cc6@f cb1cd5@y (lambda (cb1cd8@maps) (call-with-values (lambda () (cb1cb5@k (cons '() cb1cd8@maps))) (lambda (cb1cde@cb1cdb cb1cdf@cb1cdd) (let ((cb1ce2@maps cb1cdf@cb1cdd) (cb1ce3@x cb1cde@cb1cdb)) (if (null? (car cb1ce2@maps)) (cbe65@syntax-violation '#f '"extra ellipsis in syntax form" cb1c68@src) (values (cb1bf7@gen-mappend cb1ce3@x (car cb1ce2@maps)) (cdr cb1ce2@maps))))))))) cb1cce@ls/false) (let ((cb1ce6@t cb1ccc@t)) (let ((cb1ce8@ls/false (cbd85@syntax-dispatch cb1ce6@t '_))) (if cb1ce8@ls/false (apply (lambda () (call-with-values (lambda () (cb1bf1@gen-syntax cb1c68@src cb1cb4@y cb1c6a@r cb1c6b@maps cb1c6c@ellipsis? cb1c6d@vec?)) (lambda (cb1cee@cb1ceb cb1cef@cb1ced) (let ((cb1cf2@maps cb1cef@cb1ced) (cb1cf3@y cb1cee@cb1ceb)) (call-with-values (lambda () (cb1cb5@k cb1cf2@maps)) (lambda (cb1cfa@cb1cf7 cb1cfb@cb1cf9) (let ((cb1cfe@maps cb1cfb@cb1cf9) (cb1cff@x cb1cfa@cb1cf7)) (values (cb1bf5@gen-append cb1cff@x cb1cf3@y) cb1cfe@maps)))))))) cb1ce8@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1ce6@t)))))))))))) cb1ca6@ls/false) (let ((cb1d02@t cb1ca4@t)) (let ((cb1d04@ls/false (cbd85@syntax-dispatch cb1d02@t '(any . any)))) (if cb1d04@ls/false (apply (lambda (cb1d06@x cb1d07@y) (call-with-values (lambda () (cb1bf1@gen-syntax cb1c68@src cb1d06@x cb1c6a@r cb1c6b@maps cb1c6c@ellipsis? '#f)) (lambda (cb1d0e@cb1d0b cb1d0f@cb1d0d) (let ((cb1d12@maps cb1d0f@cb1d0d) (cb1d13@xnew cb1d0e@cb1d0b)) (call-with-values (lambda () (cb1bf1@gen-syntax cb1c68@src cb1d07@y cb1c6a@r cb1d12@maps cb1c6c@ellipsis? cb1c6d@vec?)) (lambda (cb1d1a@cb1d17 cb1d1b@cb1d19) (let ((cb1d1e@maps cb1d1b@cb1d19) (cb1d1f@ynew cb1d1a@cb1d17)) (values (cb1bfb@gen-cons cb1c69@e cb1d06@x cb1d07@y cb1d13@xnew cb1d1f@ynew) cb1d1e@maps)))))))) cb1d04@ls/false) (let ((cb1d22@t cb1d02@t)) (let ((cb1d24@ls/false (cbd85@syntax-dispatch cb1d22@t '#(vector each-any)))) (if cb1d24@ls/false (apply (lambda (cb1d26@ls) (call-with-values (lambda () (cb1bf1@gen-syntax cb1c68@src cb1d26@ls cb1c6a@r cb1c6b@maps cb1c6c@ellipsis? '#t)) (lambda (cb1d2c@cb1d29 cb1d2d@cb1d2b) (let ((cb1d30@maps cb1d2d@cb1d2b) (cb1d31@lsnew cb1d2c@cb1d29)) (values (cb1bfd@gen-vector cb1c69@e cb1d26@ls cb1d31@lsnew) cb1d30@maps))))) cb1d24@ls/false) (let ((cb1d34@t cb1d22@t)) (let ((cb1d36@ls/false (cbd85@syntax-dispatch cb1d34@t '_))) (if cb1d36@ls/false (apply (lambda () (values (list 'quote cb1c69@e) cb1c6b@maps)) cb1d36@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1d34@t)))))))))))))))))))))))) (set! cb1bf3@gen-ref (lambda (cb1c4e@src cb1c4f@var cb1c50@level cb1c51@maps) (if (= cb1c50@level '0) (values cb1c4f@var cb1c51@maps) (if (null? cb1c51@maps) (cbe65@syntax-violation '#f '"missing ellipsis in syntax form" cb1c4e@src) (call-with-values (lambda () (cb1bf3@gen-ref cb1c4e@src cb1c4f@var (- cb1c50@level '1) (cdr cb1c51@maps))) (lambda (cb1c5a@cb1c57 cb1c5b@cb1c59) (let ((cb1c5e@outer-maps cb1c5b@cb1c59) (cb1c5f@outer-var cb1c5a@cb1c57)) (let ((cb1c62@t (assq cb1c5f@outer-var (car cb1c51@maps)))) (if cb1c62@t ((lambda (cb1c64@b) (values (cdr cb1c64@b) cb1c51@maps)) cb1c62@t) (let ((cb1c66@inner-var (cbb06@gen-lexical 'tmp))) (values cb1c66@inner-var (cons (cons (cons cb1c5f@outer-var cb1c66@inner-var) (car cb1c51@maps)) cb1c5e@outer-maps)))))))))))) (set! cb1bf5@gen-append (lambda (cb1c4a@x cb1c4b@y) (if (fast-equal? cb1c4b@y ''()) cb1c4a@x (list 'append cb1c4a@x cb1c4b@y)))) (set! cb1bf7@gen-mappend (lambda (cb1c46@e cb1c47@map-env) (list 'apply '(primitive append) (cb1bf9@gen-map cb1c46@e cb1c47@map-env)))) (set! cb1bf9@gen-map (lambda (cb1c34@e cb1c35@map-env) (let ((cb1c38@formals (map cdr cb1c35@map-env)) (cb1c39@actuals (map (lambda (cb1c3c@x) (list 'ref (car cb1c3c@x))) cb1c35@map-env))) (if (eq? (car cb1c34@e) 'ref) (car cb1c39@actuals) (if (for-all (lambda (cb1c3e@x) (and (eq? (car cb1c3e@x) 'ref) (memq (cadr cb1c3e@x) cb1c38@formals))) (cdr cb1c34@e)) (let ((cb1c40@args (map (let ((cb1c42@r (map cons cb1c38@formals cb1c39@actuals))) (lambda (cb1c44@x) (cdr (assq (cadr cb1c44@x) cb1c42@r)))) (cdr cb1c34@e)))) (cons 'map (cons (list 'primitive (car cb1c34@e)) cb1c40@args))) (cons* 'map (list 'lambda cb1c38@formals cb1c34@e) cb1c39@actuals)))))) (set! cb1bfb@gen-cons (lambda (cb1c24@e cb1c25@x cb1c26@y cb1c27@xnew cb1c28@ynew) (let ((cb1c2e@t (car cb1c28@ynew))) (if (memv cb1c2e@t '(quote)) (if (eq? (car cb1c27@xnew) 'quote) (let ((cb1c30@xnew (cadr cb1c27@xnew)) (cb1c31@ynew (cadr cb1c28@ynew))) (if (and (eq? cb1c30@xnew cb1c25@x) (eq? cb1c31@ynew cb1c26@y)) (list 'quote cb1c24@e) (list 'quote (cons cb1c30@xnew cb1c31@ynew)))) (if (null? (cadr cb1c28@ynew)) (list 'list cb1c27@xnew) (list 'cons cb1c27@xnew cb1c28@ynew))) (if (memv cb1c2e@t '(list)) (cons 'list (cons cb1c27@xnew (cdr cb1c28@ynew))) (list 'cons cb1c27@xnew cb1c28@ynew)))))) (set! cb1bfd@gen-vector (lambda (cb1c1e@e cb1c1f@ls cb1c20@lsnew) (if (eq? (car cb1c20@lsnew) 'quote) (if (eq? (cadr cb1c20@lsnew) cb1c1f@ls) (list 'quote cb1c1e@e) (list 'quote (list->vector (cadr cb1c20@lsnew)))) (if (eq? (car cb1c20@lsnew) 'list) (cons 'vector (cdr cb1c20@lsnew)) (list 'list->vector cb1c20@lsnew))))) (set! cb1bff@regen (lambda (cb1c18@x) (let ((cb1c1a@t (car cb1c18@x))) (if (memv cb1c1a@t '(ref)) (cadr cb1c18@x) (if (memv cb1c1a@t '(primitive)) (list 'primitive (cadr cb1c18@x)) (if (memv cb1c1a@t '(quote)) (list 'quote (cadr cb1c18@x)) (if (memv cb1c1a@t '(lambda)) (cbae1@cba0d@build-lambda '#f (cadr cb1c18@x) (cb1bff@regen (caddr cb1c18@x))) (if (memv cb1c1a@t '(map)) (let ((cb1c1c@ls (map cb1bff@regen (cdr cb1c18@x)))) (cons '(primitive ellipsis-map) cb1c1c@ls)) (cons (list 'primitive (car cb1c18@x)) (map cb1bff@regen (cdr cb1c18@x))))))))))) (lambda (cb1c00@e cb1c01@r cb1c02@mr) (let ((cb1c06@t cb1c00@e)) (let ((cb1c08@ls/false (cbd85@syntax-dispatch cb1c06@t '(_ any)))) (if cb1c08@ls/false (apply (lambda (cb1c0a@x) (call-with-values (lambda () (cb1bf1@gen-syntax cb1c00@e cb1c0a@x cb1c01@r '() cbd87@ellipsis? '#f)) (lambda (cb1c10@cb1c0d cb1c11@cb1c0f) (let ((cb1c14@maps cb1c11@cb1c0f) (cb1c15@e cb1c10@cb1c0d)) (cb1bff@regen cb1c15@e))))) cb1c08@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1c06@t)))))))) (set! cb2861@cbd91@syntax-transformer cbd91@syntax-transformer) (set! cbd93@core-macro-transformer (lambda (cb1d38@name) (let ((cb1d3a@t cb1d38@name)) (if (memv cb1d3a@t '(quote)) cbd35@quote-transformer (if (memv cb1d3a@t '(lambda)) cbd39@lambda-transformer (if (memv cb1d3a@t '(case-lambda)) cbd37@case-lambda-transformer (if (memv cb1d3a@t '(letrec)) cbd1d@letrec-transformer (if (memv cb1d3a@t '(letrec*)) cbd1f@letrec*-transformer (if (memv cb1d3a@t '(let)) cbd1b@let-transformer (if (memv cb1d3a@t '(if)) cbd2d@if-transformer (if (memv cb1d3a@t '(and)) cbd2f@and-transformer (if (memv cb1d3a@t '(or)) cbd31@or-transformer (if (memv cb1d3a@t '(foreign-call)) cbd81@foreign-call-transformer (if (memv cb1d3a@t '(syntax-case)) cbd8d@syntax-case-transformer (if (memv cb1d3a@t '(syntax)) cbd91@syntax-transformer (if (memv cb1d3a@t '(type-descriptor)) cbd23@type-descriptor-transformer (if (memv cb1d3a@t '(record-type-descriptor)) cbd25@record-type-descriptor-transformer (if (memv cb1d3a@t '(record-constructor-descriptor)) cbd27@record-constructor-descriptor-transformer (if (memv cb1d3a@t '(fluid-let-syntax)) cbd21@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" cb1d38@name)))))))))))))))))))) (set! cb2862@cbd93@core-macro-transformer cbd93@core-macro-transformer) (set! cbd95@symbol-macro (lambda (cb1d3c@x cb1d3d@set) (let ((cb1d40@t cb1d3c@x)) (let ((cb1d42@ls/false (cbd85@syntax-dispatch cb1d40@t '(_ any)))) (if (and cb1d42@ls/false (apply (lambda (cb1d44@name) (and (cbb7e@id? cb1d44@name) (memq (cbb80@id->sym cb1d44@name) cb1d3d@set))) cb1d42@ls/false)) (apply (lambda (cb1d46@name) (cbd3b@bless (list 'quote cb1d46@name))) cb1d42@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1d40@t)))))) (set! cb2863@cbd95@symbol-macro cbd95@symbol-macro) (set! cbd97@macro-transformer (lambda (cb1d48@x) (if (procedure? cb1d48@x) cb1d48@x (if (symbol? cb1d48@x) (let ((cb1d4a@t cb1d48@x)) (if (memv cb1d4a@t '(define-record-type)) cbd79@define-record-type-macro (if (memv cb1d4a@t '(define-struct)) cbd77@define-struct-macro (if (memv cb1d4a@t '(include)) cbd6d@include-macro (if (memv cb1d4a@t '(cond)) cbd69@cond-macro (if (memv cb1d4a@t '(let)) cbd41@let-macro (if (memv cb1d4a@t '(do)) cbd61@do-macro (if (memv cb1d4a@t '(or)) cbd65@or-macro (if (memv cb1d4a@t '(and)) cbd67@and-macro (if (memv cb1d4a@t '(let*)) cbd63@let*-macro (if (memv cb1d4a@t '(let-values)) cbd43@let-values-macro (if (memv cb1d4a@t '(let*-values)) cbd45@let*-values-macro (if (memv cb1d4a@t '(syntax-rules)) cbd71@syntax-rules-macro (if (memv cb1d4a@t '(quasiquote)) cbd73@quasiquote-macro (if (memv cb1d4a@t '(quasisyntax)) cbd75@quasisyntax-macro (if (memv cb1d4a@t '(with-syntax)) cbd3d@with-syntax-macro (if (memv cb1d4a@t '(when)) cbd29@when-macro (if (memv cb1d4a@t '(unless)) cbd2b@unless-macro (if (memv cb1d4a@t '(case)) cbd33@case-macro (if (memv cb1d4a@t '(identifier-syntax)) cbd5f@identifier-syntax-macro (if (memv cb1d4a@t '(time)) cbd57@time-macro (if (memv cb1d4a@t '(delay)) cbd59@delay-macro (if (memv cb1d4a@t '(assert)) cbd5b@assert-macro (if (memv cb1d4a@t '(endianness)) cbd5d@endianness-macro (if (memv cb1d4a@t '(guard)) cbd53@guard-macro (if (memv cb1d4a@t '(define-enumeration)) cbd55@define-enumeration-macro (if (memv cb1d4a@t '(trace-lambda)) cbd47@trace-lambda-macro (if (memv cb1d4a@t '(trace-define)) cbd49@trace-define-macro (if (memv cb1d4a@t '(trace-define-syntax)) cbd4b@trace-define-syntax-macro (if (memv cb1d4a@t '(trace-let-syntax)) cbd4f@trace-let-syntax-macro (if (memv cb1d4a@t '(trace-letrec-syntax)) cbd51@trace-letrec-syntax-macro (if (memv cb1d4a@t '(define-condition-type)) cbd7b@define-condition-type-macro (if (memv cb1d4a@t '(parameterize)) cbd7f@parameterize-macro (if (memv cb1d4a@t '(include-into)) cbd6f@include-into-macro (if (memv cb1d4a@t '(eol-style)) (lambda (cb1d4c@x) (cbd95@symbol-macro cb1d4c@x '(none lf cr crlf nel crnel ls))) (if (memv cb1d4a@t '(error-handling-mode)) (lambda (cb1d4e@x) (cbd95@symbol-macro cb1d4e@x '(ignore raise replace))) (if (memv cb1d4a@t '(buffer-mode)) (lambda (cb1d50@x) (cbd95@symbol-macro cb1d50@x '(none line block))) (if (memv cb1d4a@t '(file-options)) cbaf9@file-options-macro (if (memv cb1d4a@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) cbd7d@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" cb1d48@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" cb1d48@x))))) (set! cb2864@cbd97@macro-transformer cbd97@macro-transformer) (set! cbd99@local-macro-transformer (lambda (cb1d52@x) (car cb1d52@x))) (set! cb2865@cbd99@local-macro-transformer cbd99@local-macro-transformer) (set! cbd9b@do-macro-call (lambda (cb1d54@transformer cb1d55@expr) (let ((cb1d58@out (cb1d54@transformer (cbb68@add-mark cbb62@anti-mark cb1d55@expr '#f)))) (begin (let cb1d5c@f ((cb1d5a@x cb1d58@out)) (if (not (cbb4a@stx? cb1d5a@x)) (if (pair? cb1d5a@x) (begin (cb1d5c@f (car cb1d5a@x)) (cb1d5c@f (cdr cb1d5a@x))) (if (vector? cb1d5a@x) (vector-for-each cb1d5c@f cb1d5a@x) (if (symbol? cb1d5a@x) (cbe65@syntax-violation '#f '"raw symbol encountered in output of macro" cb1d55@expr cb1d5a@x) (void)))) (void))) (cbb68@add-mark (cbb60@gen-mark) cb1d58@out cb1d55@expr))))) (set! cb2866@cbd9b@do-macro-call cbd9b@do-macro-call) (set! cbd9d@chi-macro (lambda (cb1d5e@p cb1d5f@e) (cbd9b@do-macro-call (cbd97@macro-transformer cb1d5e@p) cb1d5f@e))) (set! cb2867@cbd9d@chi-macro cbd9d@chi-macro) (set! cbd9f@chi-local-macro (lambda (cb1d62@p cb1d63@e) (cbd9b@do-macro-call (cbd99@local-macro-transformer cb1d62@p) cb1d63@e))) (set! cb2868@cbd9f@chi-local-macro cbd9f@chi-local-macro) (set! cbda1@chi-global-macro (lambda (cb1d66@p cb1d67@e) (let ((cb1d6a@lib (car cb1d66@p)) (cb1d6b@loc (cdr cb1d66@p))) (begin (cb995@cb7e4@visit-library cb1d6a@lib) (let ((cb1d6e@x (symbol-value cb1d6b@loc))) (let ((cb1d70@transformer (if (procedure? cb1d6e@x) cb1d6e@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" cb1d6e@x)))) (cbd9b@do-macro-call cb1d70@transformer cb1d67@e))))))) (set! cb2869@cbda1@chi-global-macro cbda1@chi-global-macro) (set! cbda3@chi-expr* (lambda (cb1d72@e* cb1d73@r cb1d74@mr) (if (null? cb1d72@e*) '() (let ((cb1d78@e (cbda7@chi-expr (car cb1d72@e*) cb1d73@r cb1d74@mr))) (cons cb1d78@e (cbda3@chi-expr* (cdr cb1d72@e*) cb1d73@r cb1d74@mr)))))) (set! cb286a@cbda3@chi-expr* cbda3@chi-expr*) (set! cbda5@chi-application (lambda (cb1d7a@e cb1d7b@r cb1d7c@mr) (let ((cb1d80@t cb1d7a@e)) (let ((cb1d82@ls/false (cbd85@syntax-dispatch cb1d80@t '(any . each-any)))) (if cb1d82@ls/false (apply (lambda (cb1d84@rator cb1d85@rands) (let ((cb1d88@rator (cbda7@chi-expr cb1d84@rator cb1d7b@r cb1d7c@mr))) (cons cb1d88@rator (cbda3@chi-expr* cb1d85@rands cb1d7b@r cb1d7c@mr)))) cb1d82@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1d80@t)))))) (set! cb286b@cbda5@chi-application cbda5@chi-application) (set! cbda7@chi-expr (lambda (cb1d8a@e cb1d8b@r cb1d8c@mr) (call-with-values (lambda () (cbba0@syntax-type cb1d8a@e cb1d8b@r)) (lambda (cb1d96@cb1d91 cb1d97@cb1d93 cb1d98@cb1d95) (let ((cb1d9c@kwd cb1d98@cb1d95) (cb1d9d@value cb1d97@cb1d93) (cb1d9e@type cb1d96@cb1d91)) (let ((cb1da2@t cb1d9e@type)) (if (memv cb1da2@t '(core-macro)) (let ((cb1da4@transformer (cbd93@core-macro-transformer cb1d9d@value))) (cb1da4@transformer cb1d8a@e cb1d8b@r cb1d8c@mr)) (if (memv cb1da2@t '(global)) (let ((cb1da6@lib (car cb1d9d@value))) (let ((cb1da8@loc (cdr cb1d9d@value))) (begin ((cbded@inv-collector) cb1da6@lib) cb1da8@loc))) (if (memv cb1da2@t '(core-prim)) (let ((cb1daa@name cb1d9d@value)) (list 'primitive cb1daa@name)) (if (memv cb1da2@t '(call)) (cbda5@chi-application cb1d8a@e cb1d8b@r cb1d8c@mr) (if (memv cb1da2@t '(lexical)) (let ((cb1dac@lex (cbd0f@lexical-var cb1d9d@value))) cb1dac@lex) (if (memv cb1da2@t '(global-macro global-macro!)) (cbda7@chi-expr (cbda1@chi-global-macro cb1d9d@value cb1d8a@e) cb1d8b@r cb1d8c@mr) (if (memv cb1da2@t '(local-macro local-macro!)) (cbda7@chi-expr (cbd9f@chi-local-macro cb1d9d@value cb1d8a@e) cb1d8b@r cb1d8c@mr) (if (memv cb1da2@t '(macro macro!)) (cbda7@chi-expr (cbd9d@chi-macro cb1d9d@value cb1d8a@e) cb1d8b@r cb1d8c@mr) (if (memv cb1da2@t '(constant)) (let ((cb1dae@datum cb1d9d@value)) (list 'quote cb1dae@datum)) (if (memv cb1da2@t '(set!)) (cbda9@chi-set! cb1d8a@e cb1d8b@r cb1d8c@mr) (if (memv cb1da2@t '(begin)) (let ((cb1db0@t cb1d8a@e)) (let ((cb1db2@ls/false (cbd85@syntax-dispatch cb1db0@t '(_ any . each-any)))) (if cb1db2@ls/false (apply (lambda (cb1db4@x cb1db5@x*) (cbae3@cba3d@build-sequence '#f (cbda3@chi-expr* (cons cb1db4@x cb1db5@x*) cb1d8b@r cb1d8c@mr))) cb1db2@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1db0@t)))) (if (memv cb1da2@t '(let-syntax letrec-syntax)) (let ((cb1db8@t cb1d8a@e)) (let ((cb1dba@ls/false (cbd85@syntax-dispatch cb1db8@t '(_ #(each (any any)) any . each-any)))) (if (and cb1dba@ls/false (apply (lambda (cb1dbc@xlhs* cb1dbd@xrhs* cb1dbe@xbody cb1dbf@xbody*) (if (not (cbb86@valid-bound-ids? cb1dbc@xlhs*)) (cbe65@syntax-violation '#f '"invalid identifiers" cb1d8a@e) (void))) cb1dba@ls/false)) (apply (lambda (cb1dc4@xlhs* cb1dc5@xrhs* cb1dc6@xbody cb1dc7@xbody*) (let ((cb1dcc@xlab* (map cbb0a@gen-label cb1dc4@xlhs*))) (let ((cb1dce@xrib (cbb3e@make-full-rib cb1dc4@xlhs* cb1dcc@xlab*))) (let ((cb1dd0@xb* (map (lambda (cb1dd2@x) (cbbb6@make-eval-transformer (cbddf@expand-transformer (if (eq? cb1d9e@type 'let-syntax) cb1dd2@x (cbb6a@add-subst cb1dce@xrib cb1dd2@x)) cb1d8c@mr))) cb1dc5@xrhs*))) (cbae3@cba3d@build-sequence '#f (cbda3@chi-expr* (map (lambda (cb1dd4@x) (cbb6a@add-subst cb1dce@xrib cb1dd4@x)) (cons cb1dc6@xbody cb1dc7@xbody*)) (append (map cons cb1dcc@xlab* cb1dd0@xb*) cb1d8b@r) (append (map cons cb1dcc@xlab* cb1dd0@xb*) cb1d8c@mr))))))) cb1dba@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1db8@t)))) (if (memv cb1da2@t '(displaced-lexical)) (cbe65@syntax-violation '#f '"identifier out of context" cb1d8a@e) (if (memv cb1da2@t '(syntax)) (cbe65@syntax-violation '#f '"reference to pattern variable outside a syntax form" cb1d8a@e) (if (memv cb1da2@t '(define define-syntax module import library)) (cbe65@syntax-violation '#f (string-append (let ((cb1dd6@t cb1d9e@type)) (if (memv cb1dd6@t '(define)) '"a definition" (if (memv cb1dd6@t '(define-syntax)) '"a define-syntax" (if (memv cb1dd6@t '(module)) '"a module definition" (if (memv cb1dd6@t '(library)) '"a library definition" (if (memv cb1dd6@t '(import)) '"an import declaration" (if (memv cb1dd6@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") cb1d8a@e) (if (memv cb1da2@t '(mutable)) (cbe65@syntax-violation '#f '"attempt to reference an unexportable variable" cb1d8a@e) (cbe65@syntax-violation '#f '"invalid expression" cb1d8a@e))))))))))))))))))))))) (set! cb286c@cbda7@chi-expr cbda7@chi-expr) (set! cbda9@chi-set! (lambda (cb1dd8@e cb1dd9@r cb1dda@mr) (let ((cb1dde@t cb1dd8@e)) (let ((cb1de0@ls/false (cbd85@syntax-dispatch cb1dde@t '(_ any any)))) (if (and cb1de0@ls/false (apply (lambda (cb1de2@x cb1de3@v) (cbb7e@id? cb1de2@x)) cb1de0@ls/false)) (apply (lambda (cb1de6@x cb1de7@v) (call-with-values (lambda () (cbba0@syntax-type cb1de6@x cb1dd9@r)) (lambda (cb1df0@cb1deb cb1df1@cb1ded cb1df2@cb1def) (let ((cb1df6@kwd cb1df2@cb1def) (cb1df7@value cb1df1@cb1ded) (cb1df8@type cb1df0@cb1deb)) (let ((cb1dfc@t cb1df8@type)) (if (memv cb1dfc@t '(lexical)) (begin (cbd13@set-lexical-mutable! cb1df7@value '#t) (list 'set! (cbd0f@lexical-var cb1df7@value) (cbda7@chi-expr cb1de7@v cb1dd9@r cb1dda@mr))) (if (memv cb1dfc@t '(core-prim)) (cbe65@syntax-violation '#f '"cannot modify imported core primitive" cb1dd8@e) (if (memv cb1dfc@t '(global)) (cbe65@syntax-violation '#f '"attempt to modify imported binding" cb1dd8@e) (if (memv cb1dfc@t '(global-macro!)) (cbda7@chi-expr (cbda1@chi-global-macro cb1df7@value cb1dd8@e) cb1dd9@r cb1dda@mr) (if (memv cb1dfc@t '(local-macro!)) (cbda7@chi-expr (cbd9f@chi-local-macro cb1df7@value cb1dd8@e) cb1dd9@r cb1dda@mr) (if (memv cb1dfc@t '(mutable)) (cbe65@syntax-violation '#f '"attempt to assign to an unexportable variable" cb1dd8@e) (cbe65@syntax-violation '#f '"invalid syntax" cb1dd8@e)))))))))))) cb1de0@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1dde@t)))))) (set! cb286d@cbda9@chi-set! cbda9@chi-set!) (set! cbdab@verify-formals (lambda (cb1dfe@fmls cb1dff@stx) (let ((cb1e02@t cb1dfe@fmls)) (let ((cb1e04@ls/false (cbd85@syntax-dispatch cb1e02@t 'each-any))) (if cb1e04@ls/false (apply (lambda (cb1e06@x*) (if (not (cbb86@valid-bound-ids? cb1e06@x*)) (cbd3f@invalid-fmls-error cb1dff@stx cb1dfe@fmls) (void))) cb1e04@ls/false) (let ((cb1e08@t cb1e02@t)) (let ((cb1e0a@ls/false (cbd85@syntax-dispatch cb1e08@t '#(each+ any () any)))) (if cb1e0a@ls/false (apply (lambda (cb1e0c@x* cb1e0d@x) (if (not (cbb86@valid-bound-ids? (cons cb1e0d@x cb1e0c@x*))) (cbd3f@invalid-fmls-error cb1dff@stx cb1dfe@fmls) (void))) cb1e0a@ls/false) (let ((cb1e10@t cb1e08@t)) (let ((cb1e12@ls/false (cbd85@syntax-dispatch cb1e10@t '_))) (if cb1e12@ls/false (apply (lambda () (cbe65@syntax-violation '#f '"invalid syntax" cb1dff@stx)) cb1e12@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1e10@t)))))))))))) (set! cb286e@cbdab@verify-formals cbdab@verify-formals) (set! cbdad@chi-lambda-clause (lambda (cb1e14@stx cb1e15@fmls cb1e16@body* cb1e17@r cb1e18@mr) (let ((cb1e1e@t cb1e15@fmls)) (let ((cb1e20@ls/false (cbd85@syntax-dispatch cb1e1e@t 'each-any))) (if cb1e20@ls/false (apply (lambda (cb1e22@x*) (begin (cbdab@verify-formals cb1e15@fmls cb1e14@stx) (let ((cb1e24@lex* (map cbb06@gen-lexical cb1e22@x*)) (cb1e25@lab* (map cbb0a@gen-label cb1e22@x*))) (values cb1e24@lex* (cbdbd@chi-internal (cbb6a@add-subst (cbb3e@make-full-rib cb1e22@x* cb1e25@lab*) cb1e16@body*) (cbd17@add-lexicals cb1e25@lab* cb1e24@lex* cb1e17@r) cb1e18@mr))))) cb1e20@ls/false) (let ((cb1e28@t cb1e1e@t)) (let ((cb1e2a@ls/false (cbd85@syntax-dispatch cb1e28@t '#(each+ any () any)))) (if cb1e2a@ls/false (apply (lambda (cb1e2c@x* cb1e2d@x) (begin (cbdab@verify-formals cb1e15@fmls cb1e14@stx) (let ((cb1e30@lex* (map cbb06@gen-lexical cb1e2c@x*)) (cb1e31@lab* (map cbb0a@gen-label cb1e2c@x*)) (cb1e32@lex (cbb06@gen-lexical cb1e2d@x)) (cb1e33@lab (cbb0a@gen-label cb1e2d@x))) (values (append cb1e30@lex* cb1e32@lex) (cbdbd@chi-internal (cbb6a@add-subst (cbb3e@make-full-rib (cons cb1e2d@x cb1e2c@x*) (cons cb1e33@lab cb1e31@lab*)) cb1e16@body*) (cbd17@add-lexicals (cons cb1e33@lab cb1e31@lab*) (cons cb1e32@lex cb1e30@lex*) cb1e17@r) cb1e18@mr))))) cb1e2a@ls/false) (let ((cb1e38@t cb1e28@t)) (let ((cb1e3a@ls/false (cbd85@syntax-dispatch cb1e38@t '_))) (if cb1e3a@ls/false (apply (lambda () (cbe65@syntax-violation '#f '"invalid syntax" cb1e15@fmls)) cb1e3a@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1e38@t)))))))))))) (set! cb286f@cbdad@chi-lambda-clause cbdad@chi-lambda-clause) (set! cbdaf@chi-lambda-clause* (lambda (cb1e3c@stx cb1e3d@fmls* cb1e3e@body** cb1e3f@r cb1e40@mr) (if (null? cb1e3d@fmls*) (values '() '()) (call-with-values (lambda () (cbdad@chi-lambda-clause cb1e3c@stx (car cb1e3d@fmls*) (car cb1e3e@body**) cb1e3f@r cb1e40@mr)) (lambda (cb1e4a@cb1e47 cb1e4b@cb1e49) (let ((cb1e4e@b cb1e4b@cb1e49) (cb1e4f@a cb1e4a@cb1e47)) (call-with-values (lambda () (cbdaf@chi-lambda-clause* cb1e3c@stx (cdr cb1e3d@fmls*) (cdr cb1e3e@body**) cb1e3f@r cb1e40@mr)) (lambda (cb1e56@cb1e53 cb1e57@cb1e55) (let ((cb1e5a@b* cb1e57@cb1e55) (cb1e5b@a* cb1e56@cb1e53)) (values (cons cb1e4f@a cb1e5b@a*) (cons cb1e4e@b cb1e5a@b*))))))))))) (set! cb2870@cbdaf@chi-lambda-clause* cbdaf@chi-lambda-clause*) (set! cbdb1@chi-defun (lambda (cb1e5e@x cb1e5f@r cb1e60@mr) (let ((cb1e64@fmls (car cb1e5e@x)) (cb1e65@body* (cdr cb1e5e@x))) (call-with-values (lambda () (cbdad@chi-lambda-clause cb1e64@fmls cb1e64@fmls cb1e65@body* cb1e5f@r cb1e60@mr)) (lambda (cb1e6c@cb1e69 cb1e6d@cb1e6b) (let ((cb1e70@body cb1e6d@cb1e6b) (cb1e71@fmls cb1e6c@cb1e69)) (cbae1@cba0d@build-lambda '#f cb1e71@fmls cb1e70@body))))))) (set! cb2871@cbdb1@chi-defun cbdb1@chi-defun) (set! cbdb3@chi-rhs (lambda (cb1e74@rhs cb1e75@r cb1e76@mr) (let ((cb1e7a@t (car cb1e74@rhs))) (if (memv cb1e7a@t '(defun)) (cbdb1@chi-defun (cdr cb1e74@rhs) cb1e75@r cb1e76@mr) (if (memv cb1e7a@t '(expr)) (let ((cb1e7c@expr (cdr cb1e74@rhs))) (cbda7@chi-expr cb1e7c@expr cb1e75@r cb1e76@mr)) (if (memv cb1e7a@t '(top-expr)) (let ((cb1e7e@expr (cdr cb1e74@rhs))) (cbae3@cba3d@build-sequence '#f (list (cbda7@chi-expr cb1e7e@expr cb1e75@r cb1e76@mr) (cbae4@cba3f@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" cb1e74@rhs))))))) (set! cb2872@cbdb3@chi-rhs cbdb3@chi-rhs) (set! cbdb5@expand-interaction-rhs*/init* (lambda (cb1e80@lhs* cb1e81@rhs* cb1e82@init* cb1e83@r cb1e84@mr) (let cb1e8e@f ((cb1e8a@lhs* cb1e80@lhs*) (cb1e8b@rhs* cb1e81@rhs*)) (if (null? cb1e8a@lhs*) (map (lambda (cb1e90@x) (cbda7@chi-expr cb1e90@x cb1e83@r cb1e84@mr)) cb1e82@init*) (let ((cb1e92@lhs (car cb1e8a@lhs*)) (cb1e93@rhs (car cb1e8b@rhs*))) (let ((cb1e96@t (car cb1e93@rhs))) (if (memv cb1e96@t '(defun)) (let ((cb1e98@rhs (cbdb1@chi-defun (cdr cb1e93@rhs) cb1e83@r cb1e84@mr))) (cons (list 'set! cb1e92@lhs cb1e98@rhs) (cb1e8e@f (cdr cb1e8a@lhs*) (cdr cb1e8b@rhs*)))) (if (memv cb1e96@t '(expr)) (let ((cb1e9a@rhs (cbda7@chi-expr (cdr cb1e93@rhs) cb1e83@r cb1e84@mr))) (cons (list 'set! cb1e92@lhs cb1e9a@rhs) (cb1e8e@f (cdr cb1e8a@lhs*) (cdr cb1e8b@rhs*)))) (if (memv cb1e96@t '(top-expr)) (let ((cb1e9c@e (cbda7@chi-expr (cdr cb1e93@rhs) cb1e83@r cb1e84@mr))) (cons cb1e9c@e (cb1e8e@f (cdr cb1e8a@lhs*) (cdr cb1e8b@rhs*)))) (error 'expand-interaction '"invallid" cb1e93@rhs)))))))))) (set! cb2873@cbdb5@expand-interaction-rhs*/init* cbdb5@expand-interaction-rhs*/init*) (set! cbdb7@chi-rhs* (lambda (cb1e9e@rhs* cb1e9f@r cb1ea0@mr) (let cb1ea6@f ((cb1ea4@ls cb1e9e@rhs*)) (if (null? cb1ea4@ls) '() (let ((cb1ea8@a (cbdb3@chi-rhs (car cb1ea4@ls) cb1e9f@r cb1ea0@mr))) (cons cb1ea8@a (cb1ea6@f (cdr cb1ea4@ls)))))))) (set! cb2874@cbdb7@chi-rhs* cbdb7@chi-rhs*) (set! cbdb9@find-bound=? (lambda (cb1eaa@x cb1eab@lhs* cb1eac@rhs*) (if (null? cb1eab@lhs*) '#f (if (cbb82@bound-id=? cb1eaa@x (car cb1eab@lhs*)) (car cb1eac@rhs*) (cbdb9@find-bound=? cb1eaa@x (cdr cb1eab@lhs*) (cdr cb1eac@rhs*)))))) (set! cb2875@cbdb9@find-bound=? cbdb9@find-bound=?) (set! cbdbb@find-dups (lambda (cb1eb0@ls) (let cb1eb6@f ((cb1eb2@ls cb1eb0@ls) (cb1eb3@dups '())) (if (null? cb1eb2@ls) cb1eb3@dups (let ((cb1eb8@t (cbdb9@find-bound=? (car cb1eb2@ls) (cdr cb1eb2@ls) (cdr cb1eb2@ls)))) (if cb1eb8@t ((lambda (cb1eba@x) (cb1eb6@f (cdr cb1eb2@ls) (cons (list (car cb1eb2@ls) cb1eba@x) cb1eb3@dups))) cb1eb8@t) (cb1eb6@f (cdr cb1eb2@ls) cb1eb3@dups))))))) (set! cb2876@cbdbb@find-dups cbdbb@find-dups) (set! cbdbd@chi-internal (lambda (cb1ebc@e* cb1ebd@r cb1ebe@mr) (let ((cb1ec2@rib (cbb32@make-empty-rib))) (call-with-values (lambda () (cbddd@chi-body* (map (lambda (cb1ed4@x) (cbb6a@add-subst cb1ec2@rib cb1ed4@x)) (cbb7c@syntax->list cb1ebc@e*)) cb1ebd@r cb1ebe@mr '() '() '() '() '() cb1ec2@rib '#f)) (lambda (cb1ed6@cb1ec5 cb1ed7@cb1ec7 cb1ed8@cb1ec9 cb1ed9@cb1ecb cb1eda@cb1ecd cb1edb@cb1ecf cb1edc@cb1ed1 cb1edd@cb1ed3) (let ((cb1ee6@_exp* cb1edd@cb1ed3) (cb1ee7@kwd* cb1edc@cb1ed1) (cb1ee8@mod** cb1edb@cb1ecf) (cb1ee9@rhs* cb1eda@cb1ecd) (cb1eea@lex* cb1ed9@cb1ecb) (cb1eeb@mr cb1ed8@cb1ec9) (cb1eec@r cb1ed7@cb1ec7) (cb1eed@e* cb1ed6@cb1ec5)) (begin (if (null? cb1eed@e*) (cbe65@syntax-violation '#f '"no expression in body" cb1eed@e*) (void)) (let ((cb1ef6@init* (cbda3@chi-expr* (append (apply append (reverse cb1ee8@mod**)) cb1eed@e*) cb1eec@r cb1eeb@mr))) (let ((cb1ef8@rhs* (cbdb7@chi-rhs* cb1ee9@rhs* cb1eec@r cb1eeb@mr))) (cbae8@cba47@build-letrec* '#f (reverse cb1eea@lex*) (reverse cb1ef8@rhs*) (cbae3@cba3d@build-sequence '#f cb1ef6@init*))))))))))) (set! cb2877@cbdbd@chi-internal cbdbd@chi-internal) (set! cbdbf@parse-module (lambda (cb1efa@e) (let ((cb1efc@t cb1efa@e)) (let ((cb1efe@ls/false (cbd85@syntax-dispatch cb1efc@t '(_ each-any . each-any)))) (if cb1efe@ls/false (apply (lambda (cb1f00@export* cb1f01@b*) (begin (if (not (for-all cbb7e@id? cb1f00@export*)) (cbe65@syntax-violation '#f '"module exports must be identifiers" cb1efa@e) (void)) (values '#f (list->vector cb1f00@export*) cb1f01@b*))) cb1efe@ls/false) (let ((cb1f04@t cb1efc@t)) (let ((cb1f06@ls/false (cbd85@syntax-dispatch cb1f04@t '(_ any each-any . each-any)))) (if cb1f06@ls/false (apply (lambda (cb1f08@name cb1f09@export* cb1f0a@b*) (begin (if (not (cbb7e@id? cb1f08@name)) (cbe65@syntax-violation '#f '"module name must be an identifier" cb1efa@e) (void)) (if (not (for-all cbb7e@id? cb1f09@export*)) (cbe65@syntax-violation '#f '"module exports must be identifiers" cb1efa@e) (void)) (values cb1f08@name (list->vector cb1f09@export*) cb1f0a@b*))) cb1f06@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1f04@t))))))))) (set! cb2878@cbdbf@parse-module cbdbf@parse-module) (set! cbdc9@module-interface? (lambda (cb1f0e@x) (and (simple-struct? cb1f0e@x) (eq? (simple-struct-name cb1f0e@x) 'module-interface)))) (set! cb2879@cbdc9@module-interface? cbdc9@module-interface?) (set! cbdcb@module-interface-first-mark (lambda (cb1f10@x) (simple-struct-ref cb1f10@x '0))) (set! cb287a@cbdcb@module-interface-first-mark cbdcb@module-interface-first-mark) (set! cbdcd@set-module-interface-first-mark! (lambda (cb1f12@x cb1f13@val) (simple-struct-set! cb1f12@x '0 cb1f13@val))) (set! cb287b@cbdcd@set-module-interface-first-mark! cbdcd@set-module-interface-first-mark!) (set! cbdcf@module-interface-exp-id-vec (lambda (cb1f16@x) (simple-struct-ref cb1f16@x '1))) (set! cb287c@cbdcf@module-interface-exp-id-vec cbdcf@module-interface-exp-id-vec) (set! cbdd1@set-module-interface-exp-id-vec! (lambda (cb1f18@x cb1f19@val) (simple-struct-set! cb1f18@x '1 cb1f19@val))) (set! cb287d@cbdd1@set-module-interface-exp-id-vec! cbdd1@set-module-interface-exp-id-vec!) (set! cbdd3@module-interface-exp-lab-vec (lambda (cb1f1c@x) (simple-struct-ref cb1f1c@x '2))) (set! cb287e@cbdd3@module-interface-exp-lab-vec cbdd3@module-interface-exp-lab-vec) (set! cbdd5@set-module-interface-exp-lab-vec! (lambda (cb1f1e@x cb1f1f@val) (simple-struct-set! cb1f1e@x '2 cb1f1f@val))) (set! cb287f@cbdd5@set-module-interface-exp-lab-vec! cbdd5@set-module-interface-exp-lab-vec!) (set! cbdd7@dummy '3) (set! cb2880@cbdd7@dummy cbdd7@dummy) (set! cbdd9@module-interface-exp-id* (lambda (cb1f22@iface cb1f23@id) (let ((cb1f27@diff-marks '#f)) (begin (set! cb1f27@diff-marks (lambda (cb1f2e@ls cb1f2f@x) (begin (if (null? cb1f2e@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((cb1f32@a (car cb1f2e@ls))) (if (eq? cb1f32@a cb1f2f@x) '() (cons cb1f32@a (cb1f27@diff-marks (cdr cb1f2e@ls) cb1f2f@x))))))) (let ((cb1f28@diff (cb1f27@diff-marks (cbb50@stx-mark* cb1f23@id) (cbdcb@module-interface-first-mark cb1f22@iface))) (cb1f29@id-vec (cbdcf@module-interface-exp-id-vec cb1f22@iface))) (if (null? cb1f28@diff) cb1f29@id-vec (vector-map (lambda (cb1f2c@x) (make-simple-struct 'stx '5 (list (cbb4c@stx-expr cb1f2c@x) (append cb1f28@diff (cbb50@stx-mark* cb1f2c@x)) '() '()))) cb1f29@id-vec))))))) (set! cb2881@cbdd9@module-interface-exp-id* cbdd9@module-interface-exp-id*) (set! cbddb@chi-internal-module (lambda (cb1f34@e cb1f35@r cb1f36@mr cb1f37@lex* cb1f38@rhs* cb1f39@mod** cb1f3a@kwd*) (call-with-values (lambda () (cbdbf@parse-module cb1f34@e)) (lambda (cb1f48@cb1f43 cb1f49@cb1f45 cb1f4a@cb1f47) (let ((cb1f4e@e* cb1f4a@cb1f47) (cb1f4f@exp-id* cb1f49@cb1f45) (cb1f50@name cb1f48@cb1f43)) (let ((cb1f54@rib (cbb32@make-empty-rib))) (let ((cb1f56@e* (map (lambda (cb1f58@x) (cbb6a@add-subst cb1f54@rib cb1f58@x)) (cbb7c@syntax->list cb1f4e@e*)))) (call-with-values (lambda () (cbddd@chi-body* cb1f56@e* cb1f35@r cb1f36@mr cb1f37@lex* cb1f38@rhs* cb1f39@mod** cb1f3a@kwd* '() cb1f54@rib '#f)) (lambda (cb1f6a@cb1f5b cb1f6b@cb1f5d cb1f6c@cb1f5f cb1f6d@cb1f61 cb1f6e@cb1f63 cb1f6f@cb1f65 cb1f70@cb1f67 cb1f71@cb1f69) (let ((cb1f7a@_exp* cb1f71@cb1f69) (cb1f7b@kwd* cb1f70@cb1f67) (cb1f7c@mod** cb1f6f@cb1f65) (cb1f7d@rhs* cb1f6e@cb1f63) (cb1f7e@lex* cb1f6d@cb1f61) (cb1f7f@mr cb1f6c@cb1f5f) (cb1f80@r cb1f6b@cb1f5d) (cb1f81@e* cb1f6a@cb1f5b)) (let ((cb1f8a@exp-lab* (vector-map (lambda (cb1f8e@x) (or (cbb94@id->label (make-simple-struct 'stx '5 (list (cbb80@id->sym cb1f8e@x) (cbb50@stx-mark* cb1f8e@x) (list cb1f54@rib) '()))) (cbe65@syntax-violation '#f '"cannot find module export" cb1f8e@x))) cb1f4f@exp-id*)) (cb1f8b@mod** (cons cb1f81@e* cb1f7c@mod**))) (if (not cb1f50@name) (values cb1f7e@lex* cb1f7d@rhs* cb1f4f@exp-id* cb1f8a@exp-lab* cb1f80@r cb1f7f@mr cb1f8b@mod** cb1f7b@kwd*) (let ((cb1f90@lab (cbb0a@gen-label 'module)) (cb1f91@iface (make-simple-struct 'module-interface '4 (list (car (cbb50@stx-mark* cb1f50@name)) (vector-map (lambda (cb1f94@x) (make-simple-struct 'stx '5 (list (cbb4c@stx-expr cb1f94@x) (cbb50@stx-mark* cb1f94@x) '() '()))) cb1f4f@exp-id*) cb1f8a@exp-lab*)))) (values cb1f7e@lex* cb1f7d@rhs* (vector cb1f50@name) (vector cb1f90@lab) (cons (cons cb1f90@lab (cons '$module cb1f91@iface)) cb1f80@r) (cons (cons cb1f90@lab (cons '$module cb1f91@iface)) cb1f7f@mr) cb1f8b@mod** cb1f7b@kwd*)))))))))))))) (set! cb2882@cbddb@chi-internal-module cbddb@chi-internal-module) (set! cbddd@chi-body* (lambda (cb1f96@e* cb1f97@r cb1f98@mr cb1f99@lex* cb1f9a@rhs* cb1f9b@mod** cb1f9c@kwd* cb1f9d@exp* cb1f9e@rib cb1f9f@top?) (if (null? cb1f96@e*) (values cb1f96@e* cb1f97@r cb1f98@mr cb1f99@lex* cb1f9a@rhs* cb1f9b@mod** cb1f9c@kwd* cb1f9d@exp*) (let ((cb1faa@e (car cb1f96@e*))) (call-with-values (lambda () (cbba0@syntax-type cb1faa@e cb1f97@r)) (lambda (cb1fb2@cb1fad cb1fb3@cb1faf cb1fb4@cb1fb1) (let ((cb1fb8@kwd cb1fb4@cb1fb1) (cb1fb9@value cb1fb3@cb1faf) (cb1fba@type cb1fb2@cb1fad)) (let ((cb1fbe@kwd* (if (cbb7e@id? cb1fb8@kwd) (cons cb1fb8@kwd cb1f9c@kwd*) cb1f9c@kwd*))) (let ((cb1fc0@t cb1fba@type)) (if (memv cb1fc0@t '(define)) (call-with-values (lambda () (cbd07@parse-define cb1faa@e)) (lambda (cb1fc6@cb1fc3 cb1fc7@cb1fc5) (let ((cb1fca@rhs cb1fc7@cb1fc5) (cb1fcb@id cb1fc6@cb1fc3)) (begin (if (cbb8a@bound-id-member? cb1fcb@id cb1fbe@kwd*) (cbe65@syntax-violation '#f '"cannot redefine keyword" cb1faa@e) (void)) (call-with-values (lambda () (cbb0e@gen-define-label+loc cb1fcb@id cb1f9e@rib)) (lambda (cb1fd2@cb1fcf cb1fd3@cb1fd1) (let ((cb1fd6@lex cb1fd3@cb1fd1) (cb1fd7@lab cb1fd2@cb1fcf)) (begin (cbb34@extend-rib! cb1f9e@rib cb1fcb@id cb1fd7@lab) (cbddd@chi-body* (cdr cb1f96@e*) (cbd15@add-lexical cb1fd7@lab cb1fd6@lex cb1f97@r) cb1f98@mr (cons cb1fd6@lex cb1f99@lex*) (cons cb1fca@rhs cb1f9a@rhs*) cb1f9b@mod** cb1fbe@kwd* cb1f9d@exp* cb1f9e@rib cb1f9f@top?))))))))) (if (memv cb1fc0@t '(define-syntax)) (call-with-values (lambda () (cbd09@parse-define-syntax cb1faa@e)) (lambda (cb1fde@cb1fdb cb1fdf@cb1fdd) (let ((cb1fe2@rhs cb1fdf@cb1fdd) (cb1fe3@id cb1fde@cb1fdb)) (begin (if (cbb8a@bound-id-member? cb1fe3@id cb1fbe@kwd*) (cbe65@syntax-violation '#f '"cannot redefine keyword" cb1faa@e) (void)) (let ((cb1fe6@lab (cbb10@gen-define-label cb1fe3@id cb1f9e@rib)) (cb1fe7@expanded-rhs (cbddf@expand-transformer cb1fe2@rhs cb1f98@mr))) (begin (cbb34@extend-rib! cb1f9e@rib cb1fe3@id cb1fe6@lab) (let ((cb1fea@b (cbbb6@make-eval-transformer cb1fe7@expanded-rhs))) (cbddd@chi-body* (cdr cb1f96@e*) (cons (cons cb1fe6@lab cb1fea@b) cb1f97@r) (cons (cons cb1fe6@lab cb1fea@b) cb1f98@mr) cb1f99@lex* cb1f9a@rhs* cb1f9b@mod** cb1fbe@kwd* cb1f9d@exp* cb1f9e@rib cb1f9f@top?)))))))) (if (memv cb1fc0@t '(let-syntax letrec-syntax)) (let ((cb1fec@t cb1faa@e)) (let ((cb1fee@ls/false (cbd85@syntax-dispatch cb1fec@t '(_ #(each (any any)) . each-any)))) (if (and cb1fee@ls/false (apply (lambda (cb1ff0@xlhs* cb1ff1@xrhs* cb1ff2@xbody*) (if (not (cbb86@valid-bound-ids? cb1ff0@xlhs*)) (cbe65@syntax-violation '#f '"invalid identifiers" cb1faa@e) (void))) cb1fee@ls/false)) (apply (lambda (cb1ff6@xlhs* cb1ff7@xrhs* cb1ff8@xbody*) (let ((cb1ffc@xlab* (map cbb0a@gen-label cb1ff6@xlhs*))) (let ((cb1ffe@xrib (cbb3e@make-full-rib cb1ff6@xlhs* cb1ffc@xlab*))) (let ((cb2000@xb* (map (lambda (cb2002@x) (cbbb6@make-eval-transformer (cbddf@expand-transformer (if (eq? cb1fba@type 'let-syntax) cb2002@x (cbb6a@add-subst cb1ffe@xrib cb2002@x)) cb1f98@mr))) cb1ff7@xrhs*))) (cbddd@chi-body* (append (map (lambda (cb2004@x) (cbb6a@add-subst cb1ffe@xrib cb2004@x)) cb1ff8@xbody*) (cdr cb1f96@e*)) (append (map cons cb1ffc@xlab* cb2000@xb*) cb1f97@r) (append (map cons cb1ffc@xlab* cb2000@xb*) cb1f98@mr) cb1f99@lex* cb1f9a@rhs* cb1f9b@mod** cb1fbe@kwd* cb1f9d@exp* cb1f9e@rib cb1f9f@top?))))) cb1fee@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb1fec@t)))) (if (memv cb1fc0@t '(begin)) (let ((cb2006@t cb1faa@e)) (let ((cb2008@ls/false (cbd85@syntax-dispatch cb2006@t '(_ . each-any)))) (if cb2008@ls/false (apply (lambda (cb200a@x*) (cbddd@chi-body* (append cb200a@x* (cdr cb1f96@e*)) cb1f97@r cb1f98@mr cb1f99@lex* cb1f9a@rhs* cb1f9b@mod** cb1fbe@kwd* cb1f9d@exp* cb1f9e@rib cb1f9f@top?)) cb2008@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb2006@t)))) (if (memv cb1fc0@t '(global-macro global-macro!)) (cbddd@chi-body* (cons (cbb6a@add-subst cb1f9e@rib (cbda1@chi-global-macro cb1fb9@value cb1faa@e)) (cdr cb1f96@e*)) cb1f97@r cb1f98@mr cb1f99@lex* cb1f9a@rhs* cb1f9b@mod** cb1fbe@kwd* cb1f9d@exp* cb1f9e@rib cb1f9f@top?) (if (memv cb1fc0@t '(local-macro local-macro!)) (cbddd@chi-body* (cons (cbb6a@add-subst cb1f9e@rib (cbd9f@chi-local-macro cb1fb9@value cb1faa@e)) (cdr cb1f96@e*)) cb1f97@r cb1f98@mr cb1f99@lex* cb1f9a@rhs* cb1f9b@mod** cb1fbe@kwd* cb1f9d@exp* cb1f9e@rib cb1f9f@top?) (if (memv cb1fc0@t '(macro macro!)) (cbddd@chi-body* (cons (cbb6a@add-subst cb1f9e@rib (cbd9d@chi-macro cb1fb9@value cb1faa@e)) (cdr cb1f96@e*)) cb1f97@r cb1f98@mr cb1f99@lex* cb1f9a@rhs* cb1f9b@mod** cb1fbe@kwd* cb1f9d@exp* cb1f9e@rib cb1f9f@top?) (if (memv cb1fc0@t '(module)) (call-with-values (lambda () (cbddb@chi-internal-module cb1faa@e cb1f97@r cb1f98@mr cb1f99@lex* cb1f9a@rhs* cb1f9b@mod** cb1fbe@kwd*)) (lambda (cb201c@cb200d cb201d@cb200f cb201e@cb2011 cb201f@cb2013 cb2020@cb2015 cb2021@cb2017 cb2022@cb2019 cb2023@cb201b) (let ((cb202c@kwd* cb2023@cb201b) (cb202d@mod** cb2022@cb2019) (cb202e@mr cb2021@cb2017) (cb202f@r cb2020@cb2015) (cb2030@m-exp-lab* cb201f@cb2013) (cb2031@m-exp-id* cb201e@cb2011) (cb2032@rhs* cb201d@cb200f) (cb2033@lex* cb201c@cb200d)) (begin (vector-for-each (lambda (cb203c@id cb203d@lab) (cbb34@extend-rib! cb1f9e@rib cb203c@id cb203d@lab)) cb2031@m-exp-id* cb2030@m-exp-lab*) (cbddd@chi-body* (cdr cb1f96@e*) cb202f@r cb202e@mr cb2033@lex* cb2032@rhs* cb202d@mod** cb202c@kwd* cb1f9d@exp* cb1f9e@rib cb1f9f@top?))))) (if (memv cb1fc0@t '(library)) (begin (cbe47@library-expander (cbb92@stx->datum cb1faa@e)) (cbddd@chi-body* (cdr cb1f96@e*) cb1f97@r cb1f98@mr cb1f99@lex* cb1f9a@rhs* cb1f9b@mod** cb1fbe@kwd* cb1f9d@exp* cb1f9e@rib cb1f9f@top?)) (if (memv cb1fc0@t '(export)) (let ((cb2040@t cb1faa@e)) (let ((cb2042@ls/false (cbd85@syntax-dispatch cb2040@t '(_ . each-any)))) (if cb2042@ls/false (apply (lambda (cb2044@exp-decl*) (cbddd@chi-body* (cdr cb1f96@e*) cb1f97@r cb1f98@mr cb1f99@lex* cb1f9a@rhs* cb1f9b@mod** cb1fbe@kwd* (append cb2044@exp-decl* cb1f9d@exp*) cb1f9e@rib cb1f9f@top?)) cb2042@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb2040@t)))) (if (memv cb1fc0@t '(import)) (let ((cb2047@module-import? '#f) (cb2049@module-import '#f) (cb204b@library-import '#f)) (begin (set! cb2047@module-import? (lambda (cb209a@e) (let ((cb209c@t cb209a@e)) (let ((cb209e@ls/false (cbd85@syntax-dispatch cb209c@t '(_ any)))) (if (and cb209e@ls/false (apply (lambda (cb20a0@id) (cbb7e@id? cb20a0@id)) cb209e@ls/false)) (apply (lambda (cb20a2@id) '#t) cb209e@ls/false) (let ((cb20a4@t cb209c@t)) (let ((cb20a6@ls/false (cbd85@syntax-dispatch cb20a4@t '(_ . each-any)))) (if cb20a6@ls/false (apply (lambda (cb20a8@imp*) '#f) cb20a6@ls/false) (let ((cb20aa@t cb20a4@t)) (let ((cb20ac@ls/false (cbd85@syntax-dispatch cb20aa@t '_))) (if cb20ac@ls/false (apply (lambda () (cbe65@syntax-violation '#f '"malformed import form" cb209a@e)) cb20ac@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb20aa@t)))))))))))) (set! cb2049@module-import (lambda (cb2078@e cb2079@r) (let ((cb207c@t cb2078@e)) (let ((cb207e@ls/false (cbd85@syntax-dispatch cb207c@t '(_ any)))) (if (and cb207e@ls/false (apply (lambda (cb2080@id) (cbb7e@id? cb2080@id)) cb207e@ls/false)) (apply (lambda (cb2082@id) (call-with-values (lambda () (cbba0@syntax-type cb2082@id cb2079@r)) (lambda (cb208a@cb2085 cb208b@cb2087 cb208c@cb2089) (let ((cb2090@kwd cb208c@cb2089) (cb2091@value cb208b@cb2087) (cb2092@type cb208a@cb2085)) (let ((cb2096@t cb2092@type)) (if (memv cb2096@t '($module)) (let ((cb2098@iface cb2091@value)) (values (cbdd9@module-interface-exp-id* cb2098@iface cb2082@id) (cbdd3@module-interface-exp-lab-vec cb2098@iface))) (cbe65@syntax-violation '#f '"invalid import" cb2078@e))))))) cb207e@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb207c@t)))))) (set! cb204b@library-import (lambda (cb205c@e) (let ((cb205e@t cb205c@e)) (let ((cb2060@ls/false (cbd85@syntax-dispatch cb205e@t '(any . each-any)))) (if cb2060@ls/false (apply (lambda (cb2062@ctxt cb2063@imp*) (call-with-values (lambda () (cbde7@parse-import-spec* (cbe6b@syntax->datum cb2063@imp*))) (lambda (cb206a@cb2067 cb206b@cb2069) (let ((cb206e@subst-labels cb206b@cb2069) (cb206f@subst-names cb206a@cb2067)) (values (vector-map (lambda (cb2072@name) (cbb5e@datum->stx cb2062@ctxt cb2072@name)) cb206f@subst-names) cb206e@subst-labels))))) cb2060@ls/false) (let ((cb2074@t cb205e@t)) (let ((cb2076@ls/false (cbd85@syntax-dispatch cb2074@t '_))) (if cb2076@ls/false (apply (lambda () (cbe65@syntax-violation '#f '"invalid import form" cb205c@e)) cb2076@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb2074@t))))))))) (begin (call-with-values (lambda () (if (cb2047@module-import? cb1faa@e) (cb2049@module-import cb1faa@e cb1f97@r) (cb204b@library-import cb1faa@e))) (lambda (cb2050@cb204d cb2051@cb204f) (let ((cb2054@lab* cb2051@cb204f) (cb2055@id* cb2050@cb204d)) (vector-for-each (lambda (cb2058@id cb2059@lab) (cbb34@extend-rib! cb1f9e@rib cb2058@id cb2059@lab)) cb2055@id* cb2054@lab*)))) (cbddd@chi-body* (cdr cb1f96@e*) cb1f97@r cb1f98@mr cb1f99@lex* cb1f9a@rhs* cb1f9b@mod** cb1fbe@kwd* cb1f9d@exp* cb1f9e@rib cb1f9f@top?)))) (if cb1f9f@top? (cbddd@chi-body* (cdr cb1f96@e*) cb1f97@r cb1f98@mr (cons (cbb06@gen-lexical 'dummy) cb1f99@lex*) (cons (cons 'top-expr cb1faa@e) cb1f9a@rhs*) cb1f9b@mod** cb1fbe@kwd* cb1f9d@exp* cb1f9e@rib cb1f9f@top?) (values cb1f96@e* cb1f97@r cb1f98@mr cb1f99@lex* cb1f9a@rhs* cb1f9b@mod** cb1fbe@kwd* cb1f9d@exp*)))))))))))))))))))))) (set! cb2883@cbddd@chi-body* cbddd@chi-body*) (set! cbddf@expand-transformer (lambda (cb20ae@expr cb20af@r) (let ((cb20b2@rtc (cbdeb@make-collector))) (let ((cb20b4@expanded-rhs (let ((cb20be@cb20b7 cbded@inv-collector) (cb20bf@cb20b9 cbdef@vis-collector) (cb20c0@cb20bb cb20b2@rtc) (cb20c1@cb20bd (lambda (cb20c6@x) (values)))) (let ((cb20c8@swap (lambda () (begin (let ((cb20ca@t (cb20be@cb20b7))) (begin (cb20be@cb20b7 cb20c0@cb20bb) (set! cb20c0@cb20bb cb20ca@t))) (let ((cb20cc@t (cb20bf@cb20b9))) (begin (cb20bf@cb20b9 cb20c1@cb20bd) (set! cb20c1@cb20bd cb20cc@t))))))) (dynamic-wind cb20c8@swap (lambda () (cbda7@chi-expr cb20ae@expr cb20af@r cb20af@r)) cb20c8@swap))))) (begin (for-each (let ((cb20ce@mark-visit (cbdef@vis-collector))) (lambda (cb20d0@x) (begin (cb994@cb7e2@invoke-library cb20d0@x) (cb20ce@mark-visit cb20d0@x)))) (cb20b2@rtc)) cb20b4@expanded-rhs))))) (set! cb2884@cbddf@expand-transformer cbddf@expand-transformer) (set! cbde1@parse-exports (lambda (cb20d2@exp*) (let cb20da@f ((cb20d4@exp* cb20d2@exp*) (cb20d5@int* '()) (cb20d6@ext* '())) (if (null? cb20d4@exp*) (begin (if (not (cbb86@valid-bound-ids? cb20d6@ext*)) (cbe65@syntax-violation 'export '"invalid exports" (cbdbb@find-dups cb20d6@ext*)) (void)) (values (map cbe6b@syntax->datum cb20d6@ext*) cb20d5@int*)) (let ((cb20dc@t (car cb20d4@exp*))) (let ((cb20de@ls/false (cbd85@syntax-dispatch cb20dc@t '(any . #(each (any any)))))) (if cb20de@ls/false (apply (lambda (cb20e0@rename cb20e1@i* cb20e2@e*) (begin (if (not (and (eq? (cbe6b@syntax->datum cb20e0@rename) 'rename) (for-all cbb7e@id? cb20e1@i*) (for-all cbb7e@id? cb20e2@e*))) (cbe65@syntax-violation 'export '"invalid export specifier" (car cb20d4@exp*)) (void)) (cb20da@f (cdr cb20d4@exp*) (append cb20e1@i* cb20d5@int*) (append cb20e2@e* cb20d6@ext*)))) cb20de@ls/false) (let ((cb20e6@t cb20dc@t)) (let ((cb20e8@ls/false (cbd85@syntax-dispatch cb20e6@t 'any))) (if cb20e8@ls/false (apply (lambda (cb20ea@ie) (begin (if (not (cbb7e@id? cb20ea@ie)) (cbe65@syntax-violation 'export '"invalid export" cb20ea@ie) (void)) (cb20da@f (cdr cb20d4@exp*) (cons cb20ea@ie cb20d5@int*) (cons cb20ea@ie cb20d6@ext*)))) cb20e8@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb20e6@t))))))))))) (set! cb2885@cbde1@parse-exports cbde1@parse-exports) (set! cbde3@parse-library-name (lambda (cb20ec@spec) (let ((cb20ef@parse '#f)) (begin (set! cb20ef@parse (lambda (cb20fc@x) (let ((cb20fe@t cb20fc@x)) (let ((cb2100@ls/false (cbd85@syntax-dispatch cb20fe@t '(each-any)))) (if (and cb2100@ls/false (apply (lambda (cb2102@v*) (for-all (lambda (cb2104@x) (let ((cb2106@x (cbe6b@syntax->datum cb2104@x))) (and (integer? cb2106@x) (exact? cb2106@x)))) cb2102@v*)) cb2100@ls/false)) (apply (lambda (cb2108@v*) (values '() (map cbe6b@syntax->datum cb2108@v*))) cb2100@ls/false) (let ((cb210a@t cb20fe@t)) (let ((cb210c@ls/false (cbd85@syntax-dispatch cb210a@t '(any . any)))) (if (and cb210c@ls/false (apply (lambda (cb210e@x cb210f@rest) (symbol? (cbe6b@syntax->datum cb210e@x))) cb210c@ls/false)) (apply (lambda (cb2112@x cb2113@rest) (call-with-values (lambda () (cb20ef@parse cb2113@rest)) (lambda (cb211a@cb2117 cb211b@cb2119) (let ((cb211e@v* cb211b@cb2119) (cb211f@x* cb211a@cb2117)) (values (cons (cbe6b@syntax->datum cb2112@x) cb211f@x*) cb211e@v*))))) cb210c@ls/false) (let ((cb2122@t cb210a@t)) (let ((cb2124@ls/false (cbd85@syntax-dispatch cb2122@t '()))) (if cb2124@ls/false (apply (lambda () (values '() '())) cb2124@ls/false) (let ((cb2126@t cb2122@t)) (let ((cb2128@ls/false (cbd85@syntax-dispatch cb2126@t '_))) (if cb2128@ls/false (apply (lambda () (cbe65@syntax-violation '#f '"invalid library name" cb20ec@spec)) cb2128@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb2126@t))))))))))))))) (call-with-values (lambda () (cb20ef@parse cb20ec@spec)) (lambda (cb20f4@cb20f1 cb20f5@cb20f3) (let ((cb20f8@ver* cb20f5@cb20f3) (cb20f9@name* cb20f4@cb20f1)) (begin (if (null? cb20f9@name*) (cbe65@syntax-violation '#f '"empty library name" cb20ec@spec) (void)) (values cb20f9@name* cb20f8@ver*))))))))) (set! cb2886@cbde3@parse-library-name cbde3@parse-library-name) (set! cbde5@parse-library (lambda (cb212a@e) (let ((cb212c@t cb212a@e)) (let ((cb212e@ls/false (cbd85@syntax-dispatch cb212c@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and cb212e@ls/false (apply (lambda (cb2130@library cb2131@name* cb2132@export cb2133@exp* cb2134@import cb2135@imp* cb2136@b*) (and (eq? (cbe6b@syntax->datum cb2132@export) 'export) (eq? (cbe6b@syntax->datum cb2134@import) 'import) (eq? (cbe6b@syntax->datum cb2130@library) 'library))) cb212e@ls/false)) (apply (lambda (cb213e@library cb213f@name* cb2140@export cb2141@exp* cb2142@import cb2143@imp* cb2144@b*) (values cb213f@name* cb2141@exp* cb2143@imp* cb2144@b*)) cb212e@ls/false) (let ((cb214c@t cb212c@t)) (let ((cb214e@ls/false (cbd85@syntax-dispatch cb214c@t '_))) (if cb214e@ls/false (apply (lambda () (cbe65@syntax-violation '#f '"malformed library" cb212a@e)) cb214e@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb214c@t))))))))) (set! cb2887@cbde5@parse-library cbde5@parse-library) (set! cbde7@parse-import-spec* (let ((cb2151@idsyn? '#f) (cb2153@dup-error '#f) (cb2155@merge-substs '#f) (cb2157@exclude* '#f) (cb2159@find* '#f) (cb215b@rem* '#f) (cb215d@remove-dups '#f) (cb215f@parse-library-name '#f) (cb2161@import-library '#f) (cb2163@get-import '#f) (cb2165@add-imports! '#f)) (begin (set! cb2151@idsyn? (lambda (cb235a@x) (symbol? (cbe6b@syntax->datum cb235a@x)))) (set! cb2153@dup-error (lambda (cb2358@name) (cbe65@syntax-violation 'import '"two imports with different bindings" cb2358@name))) (set! cb2155@merge-substs (lambda (cb2346@s cb2347@subst) (let ((cb234b@insert-to-subst '#f)) (begin (set! cb234b@insert-to-subst (lambda (cb234c@a cb234d@subst) (let ((cb2350@name (car cb234c@a)) (cb2351@label (cdr cb234c@a))) (let ((cb2354@t (assq cb2350@name cb234d@subst))) (if cb2354@t ((lambda (cb2356@x) (if (eq? (cdr cb2356@x) cb2351@label) cb234d@subst (cb2153@dup-error cb2350@name))) cb2354@t) (cons cb234c@a cb234d@subst)))))) (if (null? cb2346@s) cb2347@subst (cb234b@insert-to-subst (car cb2346@s) (cb2155@merge-substs (cdr cb2346@s) cb2347@subst))))))) (set! cb2157@exclude* (lambda (cb2316@sym* cb2317@subst) (let ((cb231b@exclude '#f)) (begin (set! cb231b@exclude (lambda (cb2334@sym cb2335@subst) (if (null? cb2335@subst) (cbe65@syntax-violation 'import '"cannot rename unbound identifier" cb2334@sym) (if (eq? cb2334@sym (caar cb2335@subst)) (values (cdar cb2335@subst) (cdr cb2335@subst)) (let ((cb2338@a (car cb2335@subst))) (call-with-values (lambda () (cb231b@exclude cb2334@sym (cdr cb2335@subst))) (lambda (cb233e@cb233b cb233f@cb233d) (let ((cb2342@subst cb233f@cb233d) (cb2343@old cb233e@cb233b)) (values cb2343@old (cons cb2338@a cb2342@subst)))))))))) (if (null? cb2316@sym*) (values '() cb2317@subst) (call-with-values (lambda () (cb231b@exclude (car cb2316@sym*) cb2317@subst)) (lambda (cb2320@cb231d cb2321@cb231f) (let ((cb2324@subst cb2321@cb231f) (cb2325@old cb2320@cb231d)) (call-with-values (lambda () (cb2157@exclude* (cdr cb2316@sym*) cb2324@subst)) (lambda (cb232c@cb2329 cb232d@cb232b) (let ((cb2330@subst cb232d@cb232b) (cb2331@old* cb232c@cb2329)) (values (cons cb2325@old cb2331@old*) cb2330@subst)))))))))))) (set! cb2159@find* (lambda (cb230e@sym* cb230f@subst) (map (lambda (cb2312@x) (let ((cb2314@t (assq cb2312@x cb230f@subst))) (if cb2314@t (cdr cb2314@t) (cbe65@syntax-violation 'import '"cannot find identifier" cb2312@x)))) cb230e@sym*))) (set! cb215b@rem* (lambda (cb2306@sym* cb2307@subst) (let cb230c@f ((cb230a@subst cb2307@subst)) (if (null? cb230a@subst) '() (if (memq (caar cb230a@subst) cb2306@sym*) (cb230c@f (cdr cb230a@subst)) (cons (car cb230a@subst) (cb230c@f (cdr cb230a@subst)))))))) (set! cb215d@remove-dups (lambda (cb2304@ls) (if (null? cb2304@ls) '() (if (memq (car cb2304@ls) (cdr cb2304@ls)) (cb215d@remove-dups (cdr cb2304@ls)) (cons (car cb2304@ls) (cb215d@remove-dups (cdr cb2304@ls))))))) (set! cb215f@parse-library-name (lambda (cb221c@spec) (let ((cb221f@subversion? '#f) (cb2221@subversion-pred '#f) (cb2223@version-pred '#f)) (begin (set! cb221f@subversion? (lambda (cb2300@x) (let ((cb2302@x (cbe6b@syntax->datum cb2300@x))) (and (integer? cb2302@x) (exact? cb2302@x) (>= cb2302@x '0))))) (set! cb2221@subversion-pred (lambda (cb22a0@x*) (let ((cb22a2@t cb22a0@x*)) (let ((cb22a4@ls/false (cbd85@syntax-dispatch cb22a2@t 'any))) (if (and cb22a4@ls/false (apply (lambda (cb22a6@n) (cb221f@subversion? cb22a6@n)) cb22a4@ls/false)) (apply (lambda (cb22a8@n) (lambda (cb22aa@x) (= cb22aa@x (cbe6b@syntax->datum cb22a8@n)))) cb22a4@ls/false) (let ((cb22ac@t cb22a2@t)) (let ((cb22ae@ls/false (cbd85@syntax-dispatch cb22ac@t '(any . each-any)))) (if (and cb22ae@ls/false (apply (lambda (cb22b0@p? cb22b1@sub*) (eq? (cbe6b@syntax->datum cb22b0@p?) 'and)) cb22ae@ls/false)) (apply (lambda (cb22b4@p? cb22b5@sub*) (let ((cb22b8@p* (map cb2221@subversion-pred cb22b5@sub*))) (lambda (cb22ba@x) (for-all (lambda (cb22bc@p) (cb22bc@p cb22ba@x)) cb22b8@p*)))) cb22ae@ls/false) (let ((cb22be@t cb22ac@t)) (let ((cb22c0@ls/false (cbd85@syntax-dispatch cb22be@t '(any . each-any)))) (if (and cb22c0@ls/false (apply (lambda (cb22c2@p? cb22c3@sub*) (eq? (cbe6b@syntax->datum cb22c2@p?) 'or)) cb22c0@ls/false)) (apply (lambda (cb22c6@p? cb22c7@sub*) (let ((cb22ca@p* (map cb2221@subversion-pred cb22c7@sub*))) (lambda (cb22cc@x) (exists (lambda (cb22ce@p) (cb22ce@p cb22cc@x)) cb22ca@p*)))) cb22c0@ls/false) (let ((cb22d0@t cb22be@t)) (let ((cb22d2@ls/false (cbd85@syntax-dispatch cb22d0@t '(any any)))) (if (and cb22d2@ls/false (apply (lambda (cb22d4@p? cb22d5@sub) (eq? (cbe6b@syntax->datum cb22d4@p?) 'not)) cb22d2@ls/false)) (apply (lambda (cb22d8@p? cb22d9@sub) (let ((cb22dc@p (cb2221@subversion-pred cb22d9@sub))) (lambda (cb22de@x) (not (cb22dc@p cb22de@x))))) cb22d2@ls/false) (let ((cb22e0@t cb22d0@t)) (let ((cb22e2@ls/false (cbd85@syntax-dispatch cb22e0@t '(any any)))) (if (and cb22e2@ls/false (apply (lambda (cb22e4@p? cb22e5@n) (and (eq? (cbe6b@syntax->datum cb22e4@p?) '<=) (cb221f@subversion? cb22e5@n))) cb22e2@ls/false)) (apply (lambda (cb22e8@p? cb22e9@n) (lambda (cb22ec@x) (<= cb22ec@x (cbe6b@syntax->datum cb22e9@n)))) cb22e2@ls/false) (let ((cb22ee@t cb22e0@t)) (let ((cb22f0@ls/false (cbd85@syntax-dispatch cb22ee@t '(any any)))) (if (and cb22f0@ls/false (apply (lambda (cb22f2@p? cb22f3@n) (and (eq? (cbe6b@syntax->datum cb22f2@p?) '>=) (cb221f@subversion? cb22f3@n))) cb22f0@ls/false)) (apply (lambda (cb22f6@p? cb22f7@n) (lambda (cb22fa@x) (>= cb22fa@x (cbe6b@syntax->datum cb22f7@n)))) cb22f0@ls/false) (let ((cb22fc@t cb22ee@t)) (let ((cb22fe@ls/false (cbd85@syntax-dispatch cb22fc@t '_))) (if cb22fe@ls/false (apply (lambda () (cbe65@syntax-violation 'import '"invalid sub-version spec" cb221c@spec cb22a0@x*)) cb22fe@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb22fc@t)))))))))))))))))))))))) (set! cb2223@version-pred (lambda (cb2250@x*) (let ((cb2252@t cb2250@x*)) (let ((cb2254@ls/false (cbd85@syntax-dispatch cb2252@t '()))) (if cb2254@ls/false (apply (lambda () (lambda (cb2256@x) '#t)) cb2254@ls/false) (let ((cb2258@t cb2252@t)) (let ((cb225a@ls/false (cbd85@syntax-dispatch cb2258@t '(any . each-any)))) (if (and cb225a@ls/false (apply (lambda (cb225c@c cb225d@ver*) (eq? (cbe6b@syntax->datum cb225c@c) 'and)) cb225a@ls/false)) (apply (lambda (cb2260@c cb2261@ver*) (let ((cb2264@p* (map cb2223@version-pred cb2261@ver*))) (lambda (cb2266@x) (for-all (lambda (cb2268@p) (cb2268@p cb2266@x)) cb2264@p*)))) cb225a@ls/false) (let ((cb226a@t cb2258@t)) (let ((cb226c@ls/false (cbd85@syntax-dispatch cb226a@t '(any . each-any)))) (if (and cb226c@ls/false (apply (lambda (cb226e@c cb226f@ver*) (eq? (cbe6b@syntax->datum cb226e@c) 'or)) cb226c@ls/false)) (apply (lambda (cb2272@c cb2273@ver*) (let ((cb2276@p* (map cb2223@version-pred cb2273@ver*))) (lambda (cb2278@x) (exists (lambda (cb227a@p) (cb227a@p cb2278@x)) cb2276@p*)))) cb226c@ls/false) (let ((cb227c@t cb226a@t)) (let ((cb227e@ls/false (cbd85@syntax-dispatch cb227c@t '(any any)))) (if (and cb227e@ls/false (apply (lambda (cb2280@c cb2281@ver) (eq? (cbe6b@syntax->datum cb2280@c) 'not)) cb227e@ls/false)) (apply (lambda (cb2284@c cb2285@ver) (let ((cb2288@p (cb2223@version-pred cb2285@ver))) (lambda (cb228a@x) (not (cb2288@p cb228a@x))))) cb227e@ls/false) (let ((cb228c@t cb227c@t)) (let ((cb228e@ls/false (cbd85@syntax-dispatch cb228c@t 'each-any))) (if cb228e@ls/false (apply (lambda (cb2290@sub*) (let ((cb2292@p* (map cb2221@subversion-pred cb2290@sub*))) (lambda (cb2294@x) (let cb229a@f ((cb2296@p* cb2292@p*) (cb2297@x cb2294@x)) (if (null? cb2296@p*) '#t (if (null? cb2297@x) '#f (and ((car cb2296@p*) (car cb2297@x)) (cb229a@f (cdr cb2296@p*) (cdr cb2297@x))))))))) cb228e@ls/false) (let ((cb229c@t cb228c@t)) (let ((cb229e@ls/false (cbd85@syntax-dispatch cb229c@t '_))) (if cb229e@ls/false (apply (lambda () (cbe65@syntax-violation 'import '"invalid version spec" cb221c@spec cb2250@x*)) cb229e@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb229c@t))))))))))))))))))))) (let cb2226@f ((cb2224@x cb221c@spec)) (let ((cb2228@t cb2224@x)) (let ((cb222a@ls/false (cbd85@syntax-dispatch cb2228@t '(each-any)))) (if cb222a@ls/false (apply (lambda (cb222c@version-spec*) (values '() (cb2223@version-pred cb222c@version-spec*))) cb222a@ls/false) (let ((cb222e@t cb2228@t)) (let ((cb2230@ls/false (cbd85@syntax-dispatch cb222e@t '(any . any)))) (if (and cb2230@ls/false (apply (lambda (cb2232@x cb2233@x*) (cb2151@idsyn? cb2232@x)) cb2230@ls/false)) (apply (lambda (cb2236@x cb2237@x*) (call-with-values (lambda () (cb2226@f cb2237@x*)) (lambda (cb223e@cb223b cb223f@cb223d) (let ((cb2242@pred cb223f@cb223d) (cb2243@name cb223e@cb223b)) (values (cons (cbe6b@syntax->datum cb2236@x) cb2243@name) cb2242@pred))))) cb2230@ls/false) (let ((cb2246@t cb222e@t)) (let ((cb2248@ls/false (cbd85@syntax-dispatch cb2246@t '()))) (if cb2248@ls/false (apply (lambda () (values '() (lambda (cb224a@x) '#t))) cb2248@ls/false) (let ((cb224c@t cb2246@t)) (let ((cb224e@ls/false (cbd85@syntax-dispatch cb224c@t '_))) (if cb224e@ls/false (apply (lambda () (cbe65@syntax-violation '#f '"invalid import spec" cb221c@spec)) cb224e@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb224c@t)))))))))))))))))) (set! cb2161@import-library (lambda (cb220c@spec*) (call-with-values (lambda () (cb215f@parse-library-name cb220c@spec*)) (lambda (cb2212@cb220f cb2213@cb2211) (let ((cb2216@pred cb2213@cb2211) (cb2217@name cb2212@cb220f)) (begin (if (null? cb2217@name) (cbe65@syntax-violation 'import '"empty library name" cb220c@spec*) (void)) (let ((cb221a@lib (cb98d@cb7d4@find-library-by-name cb2217@name))) (begin (if (not cb221a@lib) (cbe65@syntax-violation 'import '"cannot find library with required name" cb2217@name) (void)) (if (not (cb2216@pred (cb967@cb788@library-version cb221a@lib))) (cbe65@syntax-violation 'import '"library does not satisfy version specification" cb220c@spec* cb221a@lib) (void)) ((cbdf1@imp-collector) cb221a@lib) (cb96f@cb798@library-subst cb221a@lib))))))))) (set! cb2163@get-import (lambda (cb217e@spec) (let ((cb2180@t cb217e@spec)) (let ((cb2182@ls/false (cbd85@syntax-dispatch cb2180@t '(any . each-any)))) (if (and cb2182@ls/false (apply (lambda (cb2184@x cb2185@x*) (not (memq (cbe6b@syntax->datum cb2184@x) '(for rename except only prefix library)))) cb2182@ls/false)) (apply (lambda (cb2188@x cb2189@x*) (cb2161@import-library (cons cb2188@x cb2189@x*))) cb2182@ls/false) (let ((cb218c@t cb2180@t)) (let ((cb218e@ls/false (cbd85@syntax-dispatch cb218c@t '(any any . #(each (any any)))))) (if (and cb218e@ls/false (apply (lambda (cb2190@rename cb2191@isp cb2192@old* cb2193@new*) (and (eq? (cbe6b@syntax->datum cb2190@rename) 'rename) (for-all cb2151@idsyn? cb2192@old*) (for-all cb2151@idsyn? cb2193@new*))) cb218e@ls/false)) (apply (lambda (cb2198@rename cb2199@isp cb219a@old* cb219b@new*) (let ((cb21a0@subst (cb2163@get-import cb2199@isp)) (cb21a1@old* (map cbe6b@syntax->datum cb219a@old*)) (cb21a2@new* (map cbe6b@syntax->datum cb219b@new*))) (let ((cb21a6@old-label* (cb2159@find* cb21a1@old* cb21a0@subst))) (let ((cb21a8@subst (cb215b@rem* cb21a1@old* cb21a0@subst))) (cb2155@merge-substs (map cons cb21a2@new* cb21a6@old-label*) cb21a8@subst))))) cb218e@ls/false) (let ((cb21aa@t cb218c@t)) (let ((cb21ac@ls/false (cbd85@syntax-dispatch cb21aa@t '(any any . each-any)))) (if (and cb21ac@ls/false (apply (lambda (cb21ae@except cb21af@isp cb21b0@sym*) (and (eq? (cbe6b@syntax->datum cb21ae@except) 'except) (for-all cb2151@idsyn? cb21b0@sym*))) cb21ac@ls/false)) (apply (lambda (cb21b4@except cb21b5@isp cb21b6@sym*) (let ((cb21ba@subst (cb2163@get-import cb21b5@isp))) (cb215b@rem* (map cbe6b@syntax->datum cb21b6@sym*) cb21ba@subst))) cb21ac@ls/false) (let ((cb21bc@t cb21aa@t)) (let ((cb21be@ls/false (cbd85@syntax-dispatch cb21bc@t '(any any . each-any)))) (if (and cb21be@ls/false (apply (lambda (cb21c0@only cb21c1@isp cb21c2@sym*) (and (eq? (cbe6b@syntax->datum cb21c0@only) 'only) (for-all cb2151@idsyn? cb21c2@sym*))) cb21be@ls/false)) (apply (lambda (cb21c6@only cb21c7@isp cb21c8@sym*) (let ((cb21cc@subst (cb2163@get-import cb21c7@isp)) (cb21cd@sym* (map cbe6b@syntax->datum cb21c8@sym*))) (let ((cb21d0@sym* (cb215d@remove-dups cb21cd@sym*))) (let ((cb21d2@lab* (cb2159@find* cb21d0@sym* cb21cc@subst))) (map cons cb21d0@sym* cb21d2@lab*))))) cb21be@ls/false) (let ((cb21d4@t cb21bc@t)) (let ((cb21d6@ls/false (cbd85@syntax-dispatch cb21d4@t '(any any any)))) (if (and cb21d6@ls/false (apply (lambda (cb21d8@prefix cb21d9@isp cb21da@p) (and (eq? (cbe6b@syntax->datum cb21d8@prefix) 'prefix) (cb2151@idsyn? cb21da@p))) cb21d6@ls/false)) (apply (lambda (cb21de@prefix cb21df@isp cb21e0@p) (let ((cb21e4@subst (cb2163@get-import cb21df@isp)) (cb21e5@prefix (symbol->string (cbe6b@syntax->datum cb21e0@p)))) (map (lambda (cb21e8@x) (cons (string->symbol (string-append cb21e5@prefix (symbol->string (car cb21e8@x)))) (cdr cb21e8@x))) cb21e4@subst))) cb21d6@ls/false) (let ((cb21ea@t cb21d4@t)) (let ((cb21ec@ls/false (cbd85@syntax-dispatch cb21ea@t '(any each-any)))) (if (and cb21ec@ls/false (apply (lambda (cb21ee@library cb21ef@spec*) (eq? (cbe6b@syntax->datum cb21ee@library) 'library)) cb21ec@ls/false)) (apply (lambda (cb21f2@library cb21f3@spec*) (cb2161@import-library cb21f3@spec*)) cb21ec@ls/false) (let ((cb21f6@t cb21ea@t)) (let ((cb21f8@ls/false (cbd85@syntax-dispatch cb21f6@t '(any any . any)))) (if (and cb21f8@ls/false (apply (lambda (cb21fa@for cb21fb@isp cb21fc@rest) (eq? (cbe6b@syntax->datum cb21fa@for) 'for)) cb21f8@ls/false)) (apply (lambda (cb2200@for cb2201@isp cb2202@rest) (cb2163@get-import cb2201@isp)) cb21f8@ls/false) (let ((cb2206@t cb21f6@t)) (let ((cb2208@ls/false (cbd85@syntax-dispatch cb2206@t 'any))) (if cb2208@ls/false (apply (lambda (cb220a@spec) (cbe65@syntax-violation 'import '"invalid import spec" cb220a@spec)) cb2208@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb2206@t))))))))))))))))))))))))))) (set! cb2165@add-imports! (lambda (cb216e@imp cb216f@h) (let ((cb2172@subst (cb2163@get-import cb216e@imp))) (for-each (lambda (cb2174@x) (let ((cb2176@name (car cb2174@x)) (cb2177@label (cdr cb2174@x))) (let ((cb217a@t (hashtable-ref cb216f@h cb2176@name '#f))) (if cb217a@t ((lambda (cb217c@l) (if (not (eq? cb217c@l cb2177@label)) (cb2153@dup-error cb2176@name) (void))) cb217a@t) (hashtable-set! cb216f@h cb2176@name cb2177@label))))) cb2172@subst)))) (lambda (cb2166@imp*) (let cb216c@f ((cb2168@imp* cb2166@imp*) (cb2169@h (make-eq-hashtable))) (if (null? cb2168@imp*) (hashtable-entries cb2169@h) (begin (cb2165@add-imports! (car cb2168@imp*) cb2169@h) (cb216c@f (cdr cb2168@imp*) cb2169@h)))))))) (set! cb2888@cbde7@parse-import-spec* cbde7@parse-import-spec*) (set! cbde9@make-top-rib (lambda (cb235c@names cb235d@labels) (let ((cb2360@rib (cbb32@make-empty-rib))) (begin (vector-for-each (lambda (cb2362@name cb2363@label) (begin (if (not (symbol? cb2362@name)) (error 'make-top-rib '"BUG: not a symbol" cb2362@name) (void)) (cbb36@extend-rib/nc! cb2360@rib (make-simple-struct 'stx '5 (list cb2362@name cbb02@top-mark* '() '())) cb2363@label))) cb235c@names cb235d@labels) cb2360@rib)))) (set! cb2889@cbde9@make-top-rib cbde9@make-top-rib) (set! cbdeb@make-collector (lambda () (let ((cb2366@ls '())) (lambda cb236a (let ((cb236b (length cb236a))) (if (= cb236b '0) (apply (lambda () cb2366@ls) cb236a) (if (= cb236b '1) (apply (lambda (cb2368@x) (set! cb2366@ls (cbafb@set-cons cb2368@x cb2366@ls))) cb236a) (error 'apply '"invalid arg count")))))))) (set! cb288a@cbdeb@make-collector cbdeb@make-collector) (set! cbded@inv-collector (cb6c8@cb5a6@make-parameter (lambda cb236c@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (cb236e@x) (begin (if (not (procedure? cb236e@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" cb236e@x) (void)) cb236e@x)))) (set! cb288b@cbded@inv-collector cbded@inv-collector) (set! cbdef@vis-collector (cb6c8@cb5a6@make-parameter (lambda cb2370@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (cb2372@x) (begin (if (not (procedure? cb2372@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" cb2372@x) (void)) cb2372@x)))) (set! cb288c@cbdef@vis-collector cbdef@vis-collector) (set! cbdf1@imp-collector (cb6c8@cb5a6@make-parameter (lambda cb2374@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (cb2376@x) (begin (if (not (procedure? cb2376@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" cb2376@x) (void)) cb2376@x)))) (set! cb288d@cbdf1@imp-collector cbdf1@imp-collector) (set! cbdf3@chi-library-internal (lambda (cb2378@e* cb2379@rib cb237a@top?) (call-with-values (lambda () (cbddd@chi-body* cb2378@e* '() '() '() '() '() '() '() cb2379@rib cb237a@top?)) (lambda (cb238e@cb237f cb238f@cb2381 cb2390@cb2383 cb2391@cb2385 cb2392@cb2387 cb2393@cb2389 cb2394@cb238b cb2395@cb238d) (let ((cb239e@exp* cb2395@cb238d) (cb239f@_kwd* cb2394@cb238b) (cb23a0@mod** cb2393@cb2389) (cb23a1@rhs* cb2392@cb2387) (cb23a2@lex* cb2391@cb2385) (cb23a3@mr cb2390@cb2383) (cb23a4@r cb238f@cb2381) (cb23a5@e* cb238e@cb237f)) (values (append (apply append (reverse cb23a0@mod**)) cb23a5@e*) cb23a4@r cb23a3@mr (reverse cb23a2@lex*) (reverse cb23a1@rhs*) cb239e@exp*)))))) (set! cb288e@cbdf3@chi-library-internal cbdf3@chi-library-internal) (set! cbdf5@chi-interaction-expr (lambda (cb23ae@e cb23af@rib cb23b0@r) (call-with-values (lambda () (cbddd@chi-body* (list cb23ae@e) cb23b0@r cb23b0@r '() '() '() '() '() cb23af@rib '#t)) (lambda (cb23c4@cb23b5 cb23c5@cb23b7 cb23c6@cb23b9 cb23c7@cb23bb cb23c8@cb23bd cb23c9@cb23bf cb23ca@cb23c1 cb23cb@cb23c3) (let ((cb23d4@_exp* cb23cb@cb23c3) (cb23d5@_kwd* cb23ca@cb23c1) (cb23d6@mod** cb23c9@cb23bf) (cb23d7@rhs* cb23c8@cb23bd) (cb23d8@lex* cb23c7@cb23bb) (cb23d9@mr cb23c6@cb23b9) (cb23da@r cb23c5@cb23b7) (cb23db@e* cb23c4@cb23b5)) (let ((cb23e4@e* (cbdb5@expand-interaction-rhs*/init* (reverse cb23d8@lex*) (reverse cb23d7@rhs*) (append (apply append (reverse cb23d6@mod**)) cb23db@e*) cb23da@r cb23d9@mr))) (let ((cb23e6@e (if (null? cb23e4@e*) (cbae4@cba3f@build-void) (if (null? (cdr cb23e4@e*)) (car cb23e4@e*) (cbae3@cba3d@build-sequence '#f cb23e4@e*))))) (values cb23e6@e cb23da@r)))))))) (set! cb288f@cbdf5@chi-interaction-expr cbdf5@chi-interaction-expr) (set! cbdf7@library-body-expander (lambda (cb23e8@name cb23e9@main-exp* cb23ea@imp* cb23eb@b* cb23ec@top?) (let ((cb23f3@itc '#f)) (begin (set! cb23f3@itc (cbdeb@make-collector)) (let ((cb23fc@cb23f5 cbdf1@imp-collector) (cb23fd@cb23f7 cbe75@top-level-context) (cb23fe@cb23f9 cb23f3@itc) (cb23ff@cb23fb '#f)) (let ((cb2404@swap (lambda () (begin (let ((cb2406@t (cb23fc@cb23f5))) (begin (cb23fc@cb23f5 cb23fe@cb23f9) (set! cb23fe@cb23f9 cb2406@t))) (let ((cb2408@t (cb23fd@cb23f7))) (begin (cb23fd@cb23f7 cb23ff@cb23fb) (set! cb23ff@cb23fb cb2408@t))))))) (dynamic-wind cb2404@swap (lambda () (call-with-values (lambda () (cbde7@parse-import-spec* cb23ea@imp*)) (lambda (cb240e@cb240b cb240f@cb240d) (let ((cb2412@subst-labels cb240f@cb240d) (cb2413@subst-names cb240e@cb240b)) (let ((cb2416@rib (cbde9@make-top-rib cb2413@subst-names cb2412@subst-labels))) (let ((cb2419@wrap '#f)) (begin (set! cb2419@wrap (lambda (cb2494@x) (make-simple-struct 'stx '5 (list cb2494@x cbb02@top-mark* (list cb2416@rib) '())))) (let ((cb241a@b* (map cb2419@wrap cb23eb@b*)) (cb241b@main-exp* (map cb2419@wrap cb23e9@main-exp*)) (cb241c@rtc (cbdeb@make-collector)) (cb241d@vtc (cbdeb@make-collector))) (let ((cb242a@cb2423 cbded@inv-collector) (cb242b@cb2425 cbdef@vis-collector) (cb242c@cb2427 cb241c@rtc) (cb242d@cb2429 cb241d@vtc)) (let ((cb2432@swap (lambda () (begin (let ((cb2434@t (cb242a@cb2423))) (begin (cb242a@cb2423 cb242c@cb2427) (set! cb242c@cb2427 cb2434@t))) (let ((cb2436@t (cb242b@cb2425))) (begin (cb242b@cb2425 cb242d@cb2429) (set! cb242d@cb2429 cb2436@t))))))) (dynamic-wind cb2432@swap (lambda () (call-with-values (lambda () (cbdf3@chi-library-internal cb241a@b* cb2416@rib cb23ec@top?)) (lambda (cb2444@cb2439 cb2445@cb243b cb2446@cb243d cb2447@cb243f cb2448@cb2441 cb2449@cb2443) (let ((cb2450@internal-exp* cb2449@cb2443) (cb2451@rhs* cb2448@cb2441) (cb2452@lex* cb2447@cb243f) (cb2453@mr cb2446@cb243d) (cb2454@r cb2445@cb243b) (cb2455@init* cb2444@cb2439)) (call-with-values (lambda () (cbde1@parse-exports (append cb241b@main-exp* cb2450@internal-exp*))) (lambda (cb2460@cb245d cb2461@cb245f) (let ((cb2464@exp-id* cb2461@cb245f) (cb2465@exp-name* cb2460@cb245d)) (begin (cbb3a@seal-rib! cb2416@rib) (let ((cb2468@init* (cbda3@chi-expr* cb2455@init* cb2454@r cb2453@mr))) (let ((cb246a@rhs* (cbdb7@chi-rhs* cb2451@rhs* cb2454@r cb2453@mr))) (begin (cbb3c@unseal-rib! cb2416@rib) (let ((cb246c@loc* (map cbb08@gen-global cb2452@lex*)) (cb246d@export-subst (cbe4f@make-export-subst cb2465@exp-name* cb2464@exp-id*))) (let ((cb2471@errstr '#f)) (begin (set! cb2471@errstr '"attempt to export mutated variable") (call-with-values (lambda () (cbe51@make-export-env/macros cb2452@lex* cb246c@loc* cb2454@r)) (lambda (cb2478@cb2473 cb2479@cb2475 cb247a@cb2477) (let ((cb247e@macro* cb247a@cb2477) (cb247f@global* cb2479@cb2475) (cb2480@export-env cb2478@cb2473)) (begin (for-each (lambda (cb2484@s) (let ((cb2486@name (car cb2484@s)) (cb2487@label (cdr cb2484@s))) (let ((cb248a@p (assq cb2487@label cb2480@export-env))) (if cb248a@p (let ((cb248c@b (cdr cb248a@p))) (let ((cb248e@type (car cb248c@b))) (if (eq? cb248e@type 'mutable) (cbe65@syntax-violation 'export cb2471@errstr cb2486@name) (void)))) (void))))) cb246d@export-subst) (let ((cb2490@invoke-body (cbae9@cba49@build-library-letrec* '#f cb23e8@name cb2452@lex* cb246c@loc* cb246a@rhs* (if (null? cb2468@init*) (cbae4@cba3f@build-void) (cbae3@cba3d@build-sequence '#f cb2468@init*)))) (cb2491@invoke-definitions (map cbae0@cb99c@build-global-define (map cdr cb247f@global*)))) (values (cb23f3@itc) (cb241c@rtc) (cb241d@vtc) (cbae3@cba3d@build-sequence '#f (append cb2491@invoke-definitions (list cb2490@invoke-body))) cb247e@macro* cb246d@export-subst cb2480@export-env)))))))))))))))))))) cb2432@swap))))))))))) cb2404@swap))))))) (set! cb2890@cbdf7@library-body-expander cbdf7@library-body-expander) (set! cbdf9@core-library-expander (lambda (cb2496@e cb2497@verify-name) (call-with-values (lambda () (cbde5@parse-library cb2496@e)) (lambda (cb24a2@cb249b cb24a3@cb249d cb24a4@cb249f cb24a5@cb24a1) (let ((cb24aa@b* cb24a5@cb24a1) (cb24ab@imp* cb24a4@cb249f) (cb24ac@exp* cb24a3@cb249d) (cb24ad@name* cb24a2@cb249b)) (call-with-values (lambda () (cbde3@parse-library-name cb24ad@name*)) (lambda (cb24b6@cb24b3 cb24b7@cb24b5) (let ((cb24ba@ver cb24b7@cb24b5) (cb24bb@name cb24b6@cb24b3)) (begin (cb2497@verify-name cb24bb@name) (call-with-values (lambda () (cbdf7@library-body-expander cb24bb@name cb24ac@exp* cb24ab@imp* cb24aa@b* '#f)) (lambda (cb24cc@cb24bf cb24cd@cb24c1 cb24ce@cb24c3 cb24cf@cb24c5 cb24d0@cb24c7 cb24d1@cb24c9 cb24d2@cb24cb) (let ((cb24da@export-env cb24d2@cb24cb) (cb24db@export-subst cb24d1@cb24c9) (cb24dc@visit-code cb24d0@cb24c7) (cb24dd@invoke-code cb24cf@cb24c5) (cb24de@visit-req* cb24ce@cb24c3) (cb24df@invoke-req* cb24cd@cb24c1) (cb24e0@imp* cb24cc@cb24bf)) (values cb24bb@name cb24ba@ver cb24e0@imp* cb24df@invoke-req* cb24de@visit-req* cb24dd@invoke-code cb24dc@visit-code cb24db@export-subst cb24da@export-env))))))))))))) (set! cb2891@cbdf9@core-library-expander cbdf9@core-library-expander) (set! cbdfb@parse-top-level-program (lambda (cb24e8@e*) (let ((cb24ea@t cb24e8@e*)) (let ((cb24ec@ls/false (cbd85@syntax-dispatch cb24ea@t '((any . each-any) . each-any)))) (if (and cb24ec@ls/false (apply (lambda (cb24ee@import cb24ef@imp* cb24f0@b*) (eq? (cbe6b@syntax->datum cb24ee@import) 'import)) cb24ec@ls/false)) (apply (lambda (cb24f4@import cb24f5@imp* cb24f6@b*) (values cb24f5@imp* cb24f6@b*)) cb24ec@ls/false) (let ((cb24fa@t cb24ea@t)) (let ((cb24fc@ls/false (cbd85@syntax-dispatch cb24fa@t '((any . any) . any)))) (if (and cb24fc@ls/false (apply (lambda (cb24fe@import cb24ff@x cb2500@y) (eq? (cbe6b@syntax->datum cb24fe@import) 'import)) cb24fc@ls/false)) (apply (lambda (cb2504@import cb2505@x cb2506@y) (cbe65@syntax-violation 'expander '"invalid syntax of top-level program" (cbb78@syntax-car cb24e8@e*))) cb24fc@ls/false) (let ((cb250a@t cb24fa@t)) (let ((cb250c@ls/false (cbd85@syntax-dispatch cb250a@t '_))) (if cb250c@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) cb250c@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb250a@t)))))))))))) (set! cb2892@cbdfb@parse-top-level-program cbdfb@parse-top-level-program) (set! cbdfd@top-level-expander (lambda (cb250e@e*) (call-with-values (lambda () (cbdfb@parse-top-level-program cb250e@e*)) (lambda (cb2514@cb2511 cb2515@cb2513) (let ((cb2518@b* cb2515@cb2513) (cb2519@imp* cb2514@cb2511)) (call-with-values (lambda () (cbdf7@library-body-expander '() '() cb2519@imp* cb2518@b* '#t)) (lambda (cb252a@cb251d cb252b@cb251f cb252c@cb2521 cb252d@cb2523 cb252e@cb2525 cb252f@cb2527 cb2530@cb2529) (let ((cb2538@export-env cb2530@cb2529) (cb2539@export-subst cb252f@cb2527) (cb253a@visit-code cb252e@cb2525) (cb253b@invoke-code cb252d@cb2523) (cb253c@visit-req* cb252c@cb2521) (cb253d@invoke-req* cb252b@cb251f) (cb253e@imp* cb252a@cb251d)) (values cb253d@invoke-req* cb253b@invoke-code))))))))) (set! cb2893@cbdfd@top-level-expander cbdfd@top-level-expander) (set! cbdff@rp (cb6c5@cb5a0@make-record-printer 'env (lambda (cb2546@x cb2547@p cb2548@wr) (display '"#<environment>" cb2547@p)))) (set! cb2894@cbdff@rp cbdff@rp) (set! cbe09@env? (lambda (cb254c@x) (and (simple-struct? cb254c@x) (eq? (simple-struct-name cb254c@x) 'env)))) (set! cb2895@cbe09@env? cbe09@env?) (set! cbe0b@env-names (lambda (cb254e@x) (simple-struct-ref cb254e@x '0))) (set! cb2896@cbe0b@env-names cbe0b@env-names) (set! cbe0d@set-env-names! (lambda (cb2550@x cb2551@val) (simple-struct-set! cb2550@x '0 cb2551@val))) (set! cb2897@cbe0d@set-env-names! cbe0d@set-env-names!) (set! cbe0f@env-labels (lambda (cb2554@x) (simple-struct-ref cb2554@x '1))) (set! cb2898@cbe0f@env-labels cbe0f@env-labels) (set! cbe11@set-env-labels! (lambda (cb2556@x cb2557@val) (simple-struct-set! cb2556@x '1 cb2557@val))) (set! cb2899@cbe11@set-env-labels! cbe11@set-env-labels!) (set! cbe13@env-itc (lambda (cb255a@x) (simple-struct-ref cb255a@x '2))) (set! cb289a@cbe13@env-itc cbe13@env-itc) (set! cbe15@set-env-itc! (lambda (cb255c@x cb255d@val) (simple-struct-set! cb255c@x '2 cb255d@val))) (set! cb289b@cbe15@set-env-itc! cbe15@set-env-itc!) (set! cbe17@dummy '3) (set! cb289c@cbe17@dummy cbe17@dummy) (set! cbe19@rp (cb6c5@cb5a0@make-record-printer 'interaction-env (lambda (cb2560@x cb2561@p cb2562@wr) (display '"#<environment>" cb2561@p)))) (set! cb289d@cbe19@rp cbe19@rp) (set! cbe23@interaction-env? (lambda (cb2566@x) (and (simple-struct? cb2566@x) (eq? (simple-struct-name cb2566@x) 'interaction-env)))) (set! cb289e@cbe23@interaction-env? cbe23@interaction-env?) (set! cbe25@interaction-env-rib (lambda (cb2568@x) (simple-struct-ref cb2568@x '0))) (set! cb289f@cbe25@interaction-env-rib cbe25@interaction-env-rib) (set! cbe27@set-interaction-env-rib! (lambda (cb256a@x cb256b@val) (simple-struct-set! cb256a@x '0 cb256b@val))) (set! cb28a0@cbe27@set-interaction-env-rib! cbe27@set-interaction-env-rib!) (set! cbe29@interaction-env-r (lambda (cb256e@x) (simple-struct-ref cb256e@x '1))) (set! cb28a1@cbe29@interaction-env-r cbe29@interaction-env-r) (set! cbe2b@set-interaction-env-r! (lambda (cb2570@x cb2571@val) (simple-struct-set! cb2570@x '1 cb2571@val))) (set! cb28a2@cbe2b@set-interaction-env-r! cbe2b@set-interaction-env-r!) (set! cbe2d@interaction-env-locs (lambda (cb2574@x) (simple-struct-ref cb2574@x '2))) (set! cb28a3@cbe2d@interaction-env-locs cbe2d@interaction-env-locs) (set! cbe2f@set-interaction-env-locs! (lambda (cb2576@x cb2577@val) (simple-struct-set! cb2576@x '2 cb2577@val))) (set! cb28a4@cbe2f@set-interaction-env-locs! cbe2f@set-interaction-env-locs!) (set! cbe31@dummy '3) (set! cb28a5@cbe31@dummy cbe31@dummy) (set! cbe33@interaction-environment-symbols (lambda () (cbe3b@environment-symbols (cbe73@interaction-environment)))) (set! cb28a6@cbe33@interaction-environment-symbols cbe33@interaction-environment-symbols) (set! cbe35@environment-bindings (lambda (cb257a@e) (vector->list (vector-map (lambda (cb257c@name cb257d@label) (cbe37@parse-binding (cons cb257c@name (cb993@cb7e0@imported-label->binding cb257d@label)))) (cbe0b@env-names cb257a@e) (cbe0f@env-labels cb257a@e))))) (set! cb28a7@cbe35@environment-bindings cbe35@environment-bindings) (set! cbe37@parse-binding (lambda (cb2580@b) (cons (car cb2580@b) (let ((cb2582@t (cadr cb2580@b))) (if (memv cb2582@t '(core-prim global)) 'procedure (if (memv cb2582@t '(core-macro macro global-macro)) 'syntax (if (memv cb2582@t '($core-rtd)) 'record (if (eq? (car cb2580@b) (cadr cb2580@b)) 'syntax 'unknown)))))))) (set! cb28a8@cbe37@parse-binding cbe37@parse-binding) (set! cbe39@environment? (lambda (cb2584@x) (or (cbe09@env? cb2584@x) (cbe23@interaction-env? cb2584@x)))) (set! cb28a9@cbe39@environment? cbe39@environment?) (set! cbe3b@environment-symbols (lambda (cb2586@x) (if (cbe09@env? cb2586@x) (vector->list (cbe0b@env-names cb2586@x)) (if (cbe23@interaction-env? cb2586@x) (map values (cbb1c@rib-sym* (cbe25@interaction-env-rib cb2586@x))) (assertion-violation 'environment-symbols '"not an environment" cb2586@x))))) (set! cb28aa@cbe3b@environment-symbols cbe3b@environment-symbols) (set! cbe3d@environment (lambda cb2588@imp* (let ((cb258a@itc (cbdeb@make-collector))) (let ((cb2590@cb258d cbdf1@imp-collector) (cb2591@cb258f cb258a@itc)) (let ((cb2594@swap (lambda () (let ((cb2596@t (cb2590@cb258d))) (begin (cb2590@cb258d cb2591@cb258f) (set! cb2591@cb258f cb2596@t)))))) (dynamic-wind cb2594@swap (lambda () (call-with-values (lambda () (cbde7@parse-import-spec* cb2588@imp*)) (lambda (cb259c@cb2599 cb259d@cb259b) (let ((cb25a0@subst-labels cb259d@cb259b) (cb25a1@subst-names cb259c@cb2599)) (make-simple-struct 'env '4 (list cb25a1@subst-names cb25a0@subst-labels cb258a@itc)))))) cb2594@swap)))))) (set! cb28ab@cbe3d@environment cbe3d@environment) (set! cbe3f@null-environment (lambda (cb25a4@n) (begin (if (not (eqv? cb25a4@n '5)) (assertion-violation 'null-environment '"not 5" cb25a4@n) (void)) (cbe3d@environment '(psyntax null-environment-5))))) (set! cb28ac@cbe3f@null-environment cbe3f@null-environment) (set! cbe41@scheme-report-environment (lambda (cb25a6@n) (begin (if (not (eqv? cb25a6@n '5)) (assertion-violation 'scheme-report-environment '"not 5" cb25a6@n) (void)) (cbe3d@environment '(psyntax scheme-report-environment-5))))) (set! cb28ad@cbe41@scheme-report-environment cbe41@scheme-report-environment) (set! cbe43@expand (lambda (cb25a8@x cb25a9@env) (if (cbe09@env? cb25a9@env) (let ((cb25ac@rib (cbde9@make-top-rib (cbe0b@env-names cb25a9@env) (cbe0f@env-labels cb25a9@env)))) (let ((cb25ae@x (make-simple-struct 'stx '5 (list cb25a8@x cbb02@top-mark* (list cb25ac@rib) '()))) (cb25af@itc (cbe13@env-itc cb25a9@env)) (cb25b0@rtc (cbdeb@make-collector)) (cb25b1@vtc (cbdeb@make-collector))) (let ((cb25b6@x (let ((cb25c8@cb25b9 cbe75@top-level-context) (cb25c9@cb25bb cbded@inv-collector) (cb25ca@cb25bd cbdef@vis-collector) (cb25cb@cb25bf cbdf1@imp-collector) (cb25cc@cb25c1 '#f) (cb25cd@cb25c3 cb25b0@rtc) (cb25ce@cb25c5 cb25b1@vtc) (cb25cf@cb25c7 cb25af@itc)) (let ((cb25d8@swap (lambda () (begin (let ((cb25da@t (cb25c8@cb25b9))) (begin (cb25c8@cb25b9 cb25cc@cb25c1) (set! cb25cc@cb25c1 cb25da@t))) (let ((cb25dc@t (cb25c9@cb25bb))) (begin (cb25c9@cb25bb cb25cd@cb25c3) (set! cb25cd@cb25c3 cb25dc@t))) (let ((cb25de@t (cb25ca@cb25bd))) (begin (cb25ca@cb25bd cb25ce@cb25c5) (set! cb25ce@cb25c5 cb25de@t))) (let ((cb25e0@t (cb25cb@cb25bf))) (begin (cb25cb@cb25bf cb25cf@cb25c7) (set! cb25cf@cb25c7 cb25e0@t))))))) (dynamic-wind cb25d8@swap (lambda () (cbda7@chi-expr cb25ae@x '() '())) cb25d8@swap))))) (begin (cbb3a@seal-rib! cb25ac@rib) (values cb25b6@x (cb25b0@rtc)))))) (if (cbe23@interaction-env? cb25a9@env) (let ((cb25e2@rib (cbe25@interaction-env-rib cb25a9@env)) (cb25e3@r (cbe29@interaction-env-r cb25a9@env)) (cb25e4@rtc (cbdeb@make-collector))) (let ((cb25e8@x (make-simple-struct 'stx '5 (list cb25a8@x cbb02@top-mark* (list cb25e2@rib) '())))) (call-with-values (lambda () (let ((cb25fe@cb25ef cbe75@top-level-context) (cb25ff@cb25f1 cbded@inv-collector) (cb2600@cb25f3 cbdef@vis-collector) (cb2601@cb25f5 cbdf1@imp-collector) (cb2602@cb25f7 cb25a9@env) (cb2603@cb25f9 cb25e4@rtc) (cb2604@cb25fb (cbdeb@make-collector)) (cb2605@cb25fd (cbdeb@make-collector))) (let ((cb260e@swap (lambda () (begin (let ((cb2610@t (cb25fe@cb25ef))) (begin (cb25fe@cb25ef cb2602@cb25f7) (set! cb2602@cb25f7 cb2610@t))) (let ((cb2612@t (cb25ff@cb25f1))) (begin (cb25ff@cb25f1 cb2603@cb25f9) (set! cb2603@cb25f9 cb2612@t))) (let ((cb2614@t (cb2600@cb25f3))) (begin (cb2600@cb25f3 cb2604@cb25fb) (set! cb2604@cb25fb cb2614@t))) (let ((cb2616@t (cb2601@cb25f5))) (begin (cb2601@cb25f5 cb2605@cb25fd) (set! cb2605@cb25fd cb2616@t))))))) (dynamic-wind cb260e@swap (lambda () (cbdf5@chi-interaction-expr cb25e8@x cb25e2@rib cb25e3@r)) cb260e@swap)))) (lambda (cb2618@cb25eb cb2619@cb25ed) (let ((cb261c@r^ cb2619@cb25ed) (cb261d@e cb2618@cb25eb)) (begin (cbe2b@set-interaction-env-r! cb25a9@env cb261c@r^) (values cb261d@e (cb25e4@rtc)))))))) (assertion-violation 'expand '"not an environment" cb25a9@env))))) (set! cb28ae@cbe43@expand cbe43@expand) (set! cbe45@eval (lambda (cb2620@x cb2621@env) (begin (if (not (cbe39@environment? cb2621@env)) (error 'eval '"not an environment" cb2621@env) (void)) (call-with-values (lambda () (cbe43@expand cb2620@x cb2621@env)) (lambda (cb2628@cb2625 cb2629@cb2627) (let ((cb262c@invoke-req* cb2629@cb2627) (cb262d@x cb2628@cb2625)) (begin (for-each cb994@cb7e2@invoke-library cb262c@invoke-req*) (eval-core (cb71e@cb6d6@expanded->core cb262d@x))))))))) (set! cb28af@cbe45@eval cbe45@eval) (set! cbe47@library-expander (lambda cb269e (let ((cb269f (length cb269e))) (if (= cb269f '3) (apply (lambda (cb2630@x cb2631@filename cb2632@verify-name) (let ((cb2637@build-visit-code '#f) (cb2639@visit! '#f)) (begin (set! cb2637@build-visit-code (lambda (cb268c@macro*) (if (null? cb268c@macro*) (cbae4@cba3f@build-void) (cbae3@cba3d@build-sequence '#f (map (lambda (cb268e@x) (let ((cb2690@loc (car cb268e@x)) (cb2691@src (cddr cb268e@x))) (list 'set! cb2690@loc cb2691@src))) cb268c@macro*))))) (set! cb2639@visit! (lambda (cb2684@macro*) (for-each (lambda (cb2686@x) (let ((cb2688@loc (car cb2686@x)) (cb2689@proc (cadr cb2686@x))) (set-symbol-value! cb2688@loc cb2689@proc))) cb2684@macro*))) (call-with-values (lambda () (cbdf9@core-library-expander cb2630@x cb2632@verify-name)) (lambda (cb264c@cb263b cb264d@cb263d cb264e@cb263f cb264f@cb2641 cb2650@cb2643 cb2651@cb2645 cb2652@cb2647 cb2653@cb2649 cb2654@cb264b) (let ((cb265e@export-env cb2654@cb264b) (cb265f@export-subst cb2653@cb2649) (cb2660@macro* cb2652@cb2647) (cb2661@invoke-code cb2651@cb2645) (cb2662@vis* cb2650@cb2643) (cb2663@inv* cb264f@cb2641) (cb2664@imp* cb264e@cb263f) (cb2665@ver cb264d@cb263d) (cb2666@name cb264c@cb263b)) (let ((cb2670@id (gensym)) (cb2671@name cb2666@name) (cb2672@ver cb2665@ver) (cb2673@imp* (map cb998@cb7ea@library-spec cb2664@imp*)) (cb2674@vis* (map cb998@cb7ea@library-spec cb2662@vis*)) (cb2675@inv* (map cb998@cb7ea@library-spec cb2663@inv*)) (cb2676@visit-proc (lambda () (cb2639@visit! cb2660@macro*))) (cb2677@invoke-proc (lambda () (eval-core (cb71e@cb6d6@expanded->core cb2661@invoke-code)))) (cb2678@visit-code (cb2637@build-visit-code cb2660@macro*)) (cb2679@invoke-code cb2661@invoke-code)) (begin (cb992@cb7de@install-library cb2670@id cb2671@name cb2672@ver cb2673@imp* cb2674@vis* cb2675@inv* cb265f@export-subst cb265e@export-env cb2676@visit-proc cb2677@invoke-proc cb2678@visit-code cb2679@invoke-code '#t cb2631@filename) (values cb2670@id cb2671@name cb2672@ver cb2673@imp* cb2674@vis* cb2675@inv* cb2679@invoke-code cb2678@visit-code cb265f@export-subst cb265e@export-env))))))))) cb269e) (if (= cb269f '2) (apply (lambda (cb2694@x cb2695@filename) (cbe47@library-expander cb2694@x cb2695@filename (lambda (cb2698@x) (values)))) cb269e) (if (= cb269f '1) (apply (lambda (cb269a@x) (cbe47@library-expander cb269a@x '#f (lambda (cb269c@x) (values)))) cb269e) (error 'apply '"invalid arg count"))))))) (set! cb28b0@cbe47@library-expander cbe47@library-expander) (set! cbe49@boot-library-expand (lambda (cb26a0@x) (call-with-values (lambda () (cbe47@library-expander cb26a0@x)) (lambda (cb26b6@cb26a3 cb26b7@cb26a5 cb26b8@cb26a7 cb26b9@cb26a9 cb26ba@cb26ab cb26bb@cb26ad cb26bc@cb26af cb26bd@cb26b1 cb26be@cb26b3 cb26bf@cb26b5) (let ((cb26ca@export-env cb26bf@cb26b5) (cb26cb@export-subst cb26be@cb26b3) (cb26cc@visit-code cb26bd@cb26b1) (cb26cd@invoke-code cb26bc@cb26af) (cb26ce@inv* cb26bb@cb26ad) (cb26cf@vis* cb26ba@cb26ab) (cb26d0@imp* cb26b9@cb26a9) (cb26d1@ver cb26b8@cb26a7) (cb26d2@name cb26b7@cb26a5) (cb26d3@id cb26b6@cb26a3)) (values cb26d2@name cb26cd@invoke-code cb26cb@export-subst cb26ca@export-env)))))) (set! cb28b1@cbe49@boot-library-expand cbe49@boot-library-expand) (set! cbe4b@rev-map-append (lambda (cb26de@f cb26df@ls cb26e0@ac) (if (null? cb26df@ls) cb26e0@ac (cbe4b@rev-map-append cb26de@f (cdr cb26df@ls) (cons (cb26de@f (car cb26df@ls)) cb26e0@ac))))) (set! cb28b2@cbe4b@rev-map-append cbe4b@rev-map-append) (set! cbe4d@build-exports (lambda (cb26e4@lex*+loc* cb26e5@init*) (cbae3@cba3d@build-sequence '#f (cons (cbae4@cba3f@build-void) (cbe4b@rev-map-append (lambda (cb26e8@x) (list 'set! (cdr cb26e8@x) (car cb26e8@x))) cb26e4@lex*+loc* cb26e5@init*))))) (set! cb28b3@cbe4d@build-exports cbe4d@build-exports) (set! cbe4f@make-export-subst (lambda (cb26ea@name* cb26eb@id*) (map (lambda (cb26ee@name cb26ef@id) (let ((cb26f2@label (cbb94@id->label cb26ef@id))) (begin (if (not cb26f2@label) (cbe65@syntax-violation '#f '"cannot export unbound identifier" cb26ef@id) (void)) (cons cb26ee@name cb26f2@label)))) cb26ea@name* cb26eb@id*))) (set! cb28b4@cbe4f@make-export-subst cbe4f@make-export-subst) (set! cbe51@make-export-env/macros (lambda (cb26f4@lex* cb26f5@loc* cb26f6@r) (let ((cb26fb@lookup '#f)) (begin (set! cb26fb@lookup (lambda (cb2718@x) (let cb2720@f ((cb271a@x cb2718@x) (cb271b@lex* cb26f4@lex*) (cb271c@loc* cb26f5@loc*)) (if (pair? cb271b@lex*) (if (eq? cb271a@x (car cb271b@lex*)) (car cb271c@loc*) (cb2720@f cb271a@x (cdr cb271b@lex*) (cdr cb271c@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let cb2704@f ((cb26fc@r cb26f6@r) (cb26fd@env '()) (cb26fe@global* '()) (cb26ff@macro* '())) (if (null? cb26fc@r) (values cb26fd@env cb26fe@global* cb26ff@macro*) (let ((cb2706@x (car cb26fc@r))) (let ((cb2708@label (car cb2706@x)) (cb2709@b (cdr cb2706@x))) (let ((cb270c@t (cbb9a@binding-type cb2709@b))) (if (memv cb270c@t '(lexical)) (let ((cb270e@v (cbb9c@binding-value cb2709@b))) (let ((cb2710@loc (cb26fb@lookup (cbd0f@lexical-var cb270e@v))) (cb2711@type (if (cbd11@lexical-mutable? cb270e@v) 'mutable 'global))) (cb2704@f (cdr cb26fc@r) (cons (cons* cb2708@label cb2711@type cb2710@loc) cb26fd@env) (cons (cons (cbd0f@lexical-var cb270e@v) cb2710@loc) cb26fe@global*) cb26ff@macro*))) (if (memv cb270c@t '(local-macro)) (let ((cb2714@loc (gensym))) (cb2704@f (cdr cb26fc@r) (cons (cons* cb2708@label 'global-macro cb2714@loc) cb26fd@env) cb26fe@global* (cons (cons cb2714@loc (cbb9c@binding-value cb2709@b)) cb26ff@macro*))) (if (memv cb270c@t '(local-macro!)) (let ((cb2716@loc (gensym))) (cb2704@f (cdr cb26fc@r) (cons (cons* cb2708@label 'global-macro! cb2716@loc) cb26fd@env) cb26fe@global* (cons (cons cb2716@loc (cbb9c@binding-value cb2709@b)) cb26ff@macro*))) (if (memv cb270c@t '($rtd $module)) (cb2704@f (cdr cb26fc@r) (cons cb2706@x cb26fd@env) cb26fe@global* cb26ff@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (cbb9a@binding-type cb2709@b) (cbb9c@binding-value cb2709@b))))))))))))))) (set! cb28b5@cbe51@make-export-env/macros cbe51@make-export-env/macros) (set! cbe53@generate-temporaries (lambda (cb2722@ls) (let ((cb2724@t cb2722@ls)) (let ((cb2726@ls/false (cbd85@syntax-dispatch cb2724@t 'each-any))) (if cb2726@ls/false (apply (lambda (cb2728@ls) (map (lambda (cb272a@x) (make-simple-struct 'stx '5 (list (let ((cb272c@x (cbe6b@syntax->datum cb272a@x))) (if (or (symbol? cb272c@x) (string? cb272c@x)) (gensym cb272c@x) (gensym 't))) cbb02@top-mark* '() '()))) cb2728@ls)) cb2726@ls/false) (let ((cb272e@t cb2724@t)) (let ((cb2730@ls/false (cbd85@syntax-dispatch cb272e@t '_))) (if cb2730@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) cb2730@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb272e@t))))))))) (set! cb28b6@cbe53@generate-temporaries cbe53@generate-temporaries) (set! cbe55@free-identifier=? (lambda (cb2732@x cb2733@y) (if (cbb7e@id? cb2732@x) (if (cbb7e@id? cb2733@y) (cbb84@free-id=? cb2732@x cb2733@y) (assertion-violation 'free-identifier=? '"not an identifier" cb2733@y)) (assertion-violation 'free-identifier=? '"not an identifier" cb2732@x)))) (set! cb28b7@cbe55@free-identifier=? cbe55@free-identifier=?) (set! cbe57@bound-identifier=? (lambda (cb2736@x cb2737@y) (if (cbb7e@id? cb2736@x) (if (cbb7e@id? cb2737@y) (cbb82@bound-id=? cb2736@x cb2737@y) (assertion-violation 'bound-identifier=? '"not an identifier" cb2737@y)) (assertion-violation 'bound-identifier=? '"not an identifier" cb2736@x)))) (set! cb28b8@cbe57@bound-identifier=? cbe57@bound-identifier=?) (set! cbe59@make-source-condition (lambda (cb273a@x) (let ((cb2744@cb273f '#f) (cb2746@cb2741 '#f) (cb2748@cb2740 '#f) (cb274b@cb273e '#f) (cb274d@make-source-condition '#f) (cb274f@cb273c '#f) (cb2751@cb273d '#f) (cb2753@source-condition? '#f) (cb2755@source-filename '#f) (cb2757@source-character '#f)) (begin (set! cb2744@cb273f (make-record-type-descriptor '&source-information cb2b9a@cb28e1@&condition-rtd 'cb2742 '#f '#f '#((immutable file-name) (immutable character)))) (set! cb2746@cb2741 '#f) (set! cb2748@cb2740 (make-record-constructor-descriptor cb2744@cb273f cb2b9b@cb28e3@&condition-rcd cb2746@cb2741)) (set! cb274b@cb273e (record-predicate cb2744@cb273f)) (set! cb274d@make-source-condition (record-constructor cb2748@cb2740)) (set! cb274f@cb273c (record-accessor cb2744@cb273f '0)) (set! cb2751@cb273d (record-accessor cb2744@cb273f '1)) (set! cb2753@source-condition? (condition-predicate cb2744@cb273f)) (set! cb2755@source-filename (condition-accessor cb2744@cb273f cb274f@cb273c)) (set! cb2757@source-character (condition-accessor cb2744@cb273f cb2751@cb273d)) (if (pair? cb273a@x) (cb274d@make-source-condition (car cb273a@x) (cdr cb273a@x)) (condition)))))) (set! cb28b9@cbe59@make-source-condition cbe59@make-source-condition) (set! cbe5b@extract-position-condition (lambda (cb2758@x) (cbe59@make-source-condition (cbe5d@expression-position cb2758@x)))) (set! cb28ba@cbe5b@extract-position-condition cbe5b@extract-position-condition) (set! cbe5d@expression-position (lambda (cb275a@x) (and (cbb4a@stx? cb275a@x) (let ((cb275c@x (cbb4c@stx-expr cb275a@x))) (and (cb6bc@cb58e@annotation? cb275c@x) (cb6bd@cb590@annotation-source cb275c@x)))))) (set! cb28bb@cbe5d@expression-position cbe5d@expression-position) (set! cbe5f@assertion-error (lambda (cb275e@expr cb275f@pos) (raise (condition (cb2bca@cb29a5@make-assertion-violation) (cb2bdc@cb29d7@make-who-condition 'assert) (cb2ba0@cb2938@make-message-condition '"assertion failed") (cb2bd2@cb29bc@make-irritants-condition (list cb275e@expr)) (cbe59@make-source-condition cb275f@pos))))) (set! cb28bc@cbe5f@assertion-error cbe5f@assertion-error) (set! cbe61@syntax-error (lambda (cb2762@x . cb2764@args) (begin (if (not (for-all string? cb2764@args)) (assertion-violation 'syntax-error '"invalid argument" cb2764@args) (void)) (raise (condition (cb2ba0@cb2938@make-message-condition (if (null? cb2764@args) '"invalid syntax" (apply string-append cb2764@args))) (cb2bfe@cb2a33@make-syntax-violation (cbe6b@syntax->datum cb2762@x) '#f) (cbe5b@extract-position-condition cb2762@x)))))) (set! cb28bd@cbe61@syntax-error cbe61@syntax-error) (set! cbe63@syntax-violation* (lambda (cb2766@who cb2767@msg cb2768@form cb2769@condition-object) (begin (if (not (string? cb2767@msg)) (assertion-violation 'syntax-violation '"message is not a string" cb2767@msg) (void)) (let ((cb276e@who (if (or (string? cb2766@who) (symbol? cb2766@who)) cb2766@who (if (not cb2766@who) (let ((cb2770@t cb2768@form)) (let ((cb2772@ls/false (cbd85@syntax-dispatch cb2770@t 'any))) (if (and cb2772@ls/false (apply (lambda (cb2774@id) (cbb7e@id? cb2774@id)) cb2772@ls/false)) (apply (lambda (cb2776@id) (cbe6b@syntax->datum cb2776@id)) cb2772@ls/false) (let ((cb2778@t cb2770@t)) (let ((cb277a@ls/false (cbd85@syntax-dispatch cb2778@t '(any . any)))) (if (and cb277a@ls/false (apply (lambda (cb277c@id cb277d@rest) (cbb7e@id? cb277c@id)) cb277a@ls/false)) (apply (lambda (cb2780@id cb2781@rest) (cbe6b@syntax->datum cb2780@id)) cb277a@ls/false) (let ((cb2784@t cb2778@t)) (let ((cb2786@ls/false (cbd85@syntax-dispatch cb2784@t '_))) (if cb2786@ls/false (apply (lambda () '#f) cb2786@ls/false) (cbe65@syntax-violation '#f '"invalid syntax" cb2784@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" cb2766@who))))) (raise (condition (if cb276e@who (cb2bdc@cb29d7@make-who-condition cb276e@who) (condition)) (cb2ba0@cb2938@make-message-condition cb2767@msg) cb2769@condition-object (cbe5b@extract-position-condition cb2768@form))))))) (set! cb28be@cbe63@syntax-violation* cbe63@syntax-violation*) (set! cbe65@syntax-violation (lambda cb2796 (let ((cb2797 (length cb2796))) (if (= cb2797 '3) (apply (lambda (cb2788@who cb2789@msg cb278a@form) (cbe65@syntax-violation cb2788@who cb2789@msg cb278a@form '#f)) cb2796) (if (= cb2797 '4) (apply (lambda (cb278e@who cb278f@msg cb2790@form cb2791@subform) (cbe63@syntax-violation* cb278e@who cb278f@msg cb2790@form (cb2bfe@cb2a33@make-syntax-violation (cbe6b@syntax->datum cb2790@form) (cbe6b@syntax->datum cb2791@subform)))) cb2796) (error 'apply '"invalid arg count")))))) (set! cb28bf@cbe65@syntax-violation cbe65@syntax-violation) (set! cbe67@identifier? (lambda (cb2798@x) (cbb7e@id? cb2798@x))) (set! cb28c0@cbe67@identifier? cbe67@identifier?) (set! cbe69@datum->syntax (lambda (cb279a@id cb279b@datum) (if (cbb7e@id? cb279a@id) (cbb5e@datum->stx cb279a@id cb279b@datum) (assertion-violation 'datum->syntax '"not an identifier" cb279a@id)))) (set! cb28c1@cbe69@datum->syntax cbe69@datum->syntax) (set! cbe6b@syntax->datum (lambda (cb279e@x) (cbb92@stx->datum cb279e@x))) (set! cb28c2@cbe6b@syntax->datum cbe6b@syntax->datum) (set! cbe6d@ungensym-all (lambda (cb27a0@code) (if (pair? cb27a0@code) (cons (cbe6d@ungensym-all (car cb27a0@code)) (cbe6d@ungensym-all (cdr cb27a0@code))) (if (symbol? cb27a0@code) (ungensym cb27a0@code) cb27a0@code)))) (set! cb28c3@cbe6d@ungensym-all cbe6d@ungensym-all) (set! cbe6f@compile-r6rs-top-level (lambda (cb27a2@x*) (call-with-values (lambda () (cbdfd@top-level-expander cb27a2@x*)) (lambda (cb27a8@cb27a5 cb27a9@cb27a7) (let ((cb27ac@invoke-code cb27a9@cb27a7) (cb27ad@lib* cb27a8@cb27a5)) (lambda () (begin (for-each cb994@cb7e2@invoke-library cb27ad@lib*) (let ((cb27b0@expanded (cb71e@cb6d6@expanded->core cb27ac@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (cbe6d@ungensym-all cb27b0@expanded)) (void)) (eval-core cb27b0@expanded)))))))))) (set! cb28c4@cbe6f@compile-r6rs-top-level cbe6f@compile-r6rs-top-level) (set! cbe71@pre-compile-r6rs-top-level (lambda (cb27b2@x*) (call-with-values (lambda () (cbdfd@top-level-expander cb27b2@x*)) (lambda (cb27b8@cb27b5 cb27b9@cb27b7) (let ((cb27bc@invoke-code cb27b9@cb27b7) (cb27bd@lib* cb27b8@cb27b5)) (begin (for-each cb994@cb7e2@invoke-library cb27bd@lib*) (cb6c6@cb5a2@compile-core (cb71e@cb6d6@expanded->core cb27bc@invoke-code)))))))) (set! cb28c5@cbe71@pre-compile-r6rs-top-level cbe71@pre-compile-r6rs-top-level) (set! cbe73@interaction-environment (let ((cb27c0@the-env '#f)) (lambda () (or cb27c0@the-env (let ((cb27c2@lib (cb98d@cb7d4@find-library-by-name '(mosh interaction))) (cb27c3@rib (cbb32@make-empty-rib))) (begin (let ((cb27c6@subst (cb96f@cb798@library-subst cb27c2@lib))) (begin (cbb1e@set-rib-sym*! cb27c3@rib (map car cb27c6@subst)) (cbb22@set-rib-mark**! cb27c3@rib (map (lambda (cb27c8@x) cbb02@top-mark*) cb27c6@subst)) (cbb26@set-rib-label*! cb27c3@rib (map cdr cb27c6@subst)))) (let ((cb27ca@env (make-simple-struct 'interaction-env '4 (list cb27c3@rib '() '())))) (begin (set! cb27c0@the-env cb27ca@env) cb27ca@env)))))))) (set! cb28c6@cbe73@interaction-environment cbe73@interaction-environment) (set! cbe75@top-level-context (cb6c8@cb5a6@make-parameter '#f)) (set! cb28c7@cbe75@top-level-context cbe75@top-level-context) (cb98a@cb7ce@current-library-expander cbe47@library-expander))
(begin (set! cb28d6@cb28d1 (unspecified)) (set! cb28d8@cb28d3 (unspecified)) (set! cb28da@cb28d2 (unspecified)) (set! cb28dd@&condition? (unspecified)) (set! cb28df@make-&condition (unspecified)) (set! cb28e1@&condition-rtd (unspecified)) (set! cb28e3@&condition-rcd (unspecified)) (set! cb292f@cb292a (unspecified)) (set! cb2931@cb292c (unspecified)) (set! cb2933@cb292b (unspecified)) (set! cb2936@p? (unspecified)) (set! cb2938@make-message-condition (unspecified)) (set! cb293a@cb2929 (unspecified)) (set! cb293c@message-condition? (unspecified)) (set! cb293e@condition-message (unspecified)) (set! cb2940@&message-rtd (unspecified)) (set! cb2942@&message-rcd (unspecified)) (set! cb2948@cb2943 (unspecified)) (set! cb294a@cb2945 (unspecified)) (set! cb294c@cb2944 (unspecified)) (set! cb294f@p? (unspecified)) (set! cb2951@make-warning (unspecified)) (set! cb2953@warning? (unspecified)) (set! cb2955@&warning-rtd (unspecified)) (set! cb2957@&warning-rcd (unspecified)) (set! cb295d@cb2958 (unspecified)) (set! cb295f@cb295a (unspecified)) (set! cb2961@cb2959 (unspecified)) (set! cb2964@p? (unspecified)) (set! cb2966@make-serious-condition (unspecified)) (set! cb2968@serious-condition? (unspecified)) (set! cb296a@&serious-rtd (unspecified)) (set! cb296c@&serious-rcd (unspecified)) (set! cb2972@cb296d (unspecified)) (set! cb2974@cb296f (unspecified)) (set! cb2976@cb296e (unspecified)) (set! cb2979@p? (unspecified)) (set! cb297b@make-error (unspecified)) (set! cb297d@error? (unspecified)) (set! cb297f@&error-rtd (unspecified)) (set! cb2981@&error-rcd (unspecified)) (set! cb2987@cb2982 (unspecified)) (set! cb2989@cb2984 (unspecified)) (set! cb298b@cb2983 (unspecified)) (set! cb298e@p? (unspecified)) (set! cb2990@make-violation (unspecified)) (set! cb2992@violation? (unspecified)) (set! cb2994@&violation-rtd (unspecified)) (set! cb2996@&violation-rcd (unspecified)) (set! cb299c@cb2997 (unspecified)) (set! cb299e@cb2999 (unspecified)) (set! cb29a0@cb2998 (unspecified)) (set! cb29a3@p? (unspecified)) (set! cb29a5@make-assertion-violation (unspecified)) (set! cb29a7@assertion-violation? (unspecified)) (set! cb29a9@&assertion-rtd (unspecified)) (set! cb29ab@&assertion-rcd (unspecified)) (set! cb29b3@cb29ae (unspecified)) (set! cb29b5@cb29b0 (unspecified)) (set! cb29b7@cb29af (unspecified)) (set! cb29ba@p? (unspecified)) (set! cb29bc@make-irritants-condition (unspecified)) (set! cb29be@cb29ad (unspecified)) (set! cb29c0@irritants-condition? (unspecified)) (set! cb29c2@condition-irritants (unspecified)) (set! cb29c4@&irritants-rtd (unspecified)) (set! cb29c6@&irritants-rcd (unspecified)) (set! cb29ce@cb29c9 (unspecified)) (set! cb29d0@cb29cb (unspecified)) (set! cb29d2@cb29ca (unspecified)) (set! cb29d5@p? (unspecified)) (set! cb29d7@make-who-condition (unspecified)) (set! cb29d9@cb29c8 (unspecified)) (set! cb29db@who-condition? (unspecified)) (set! cb29dd@condition-who (unspecified)) (set! cb29df@&who-rtd (unspecified)) (set! cb29e1@&who-rcd (unspecified)) (set! cb29e7@cb29e2 (unspecified)) (set! cb29e9@cb29e4 (unspecified)) (set! cb29eb@cb29e3 (unspecified)) (set! cb29ee@p? (unspecified)) (set! cb29f0@make-non-continuable-violation (unspecified)) (set! cb29f2@non-continuable-violation? (unspecified)) (set! cb29f4@&non-continuable-rtd (unspecified)) (set! cb29f6@&non-continuable-rcd (unspecified)) (set! cb29fc@cb29f7 (unspecified)) (set! cb29fe@cb29f9 (unspecified)) (set! cb2a00@cb29f8 (unspecified)) (set! cb2a03@p? (unspecified)) (set! cb2a05@make-implementation-restriction-violation (unspecified)) (set! cb2a07@implementation-restriction-violation? (unspecified)) (set! cb2a09@&implementation-restriction-rtd (unspecified)) (set! cb2a0b@&implementation-restriction-rcd (unspecified)) (set! cb2a11@cb2a0c (unspecified)) (set! cb2a13@cb2a0e (unspecified)) (set! cb2a15@cb2a0d (unspecified)) (set! cb2a18@p? (unspecified)) (set! cb2a1a@make-lexical-violation (unspecified)) (set! cb2a1c@lexical-violation? (unspecified)) (set! cb2a1e@&lexical-rtd (unspecified)) (set! cb2a20@&lexical-rcd (unspecified)) (set! cb2a2a@cb2a25 (unspecified)) (set! cb2a2c@cb2a27 (unspecified)) (set! cb2a2e@cb2a26 (unspecified)) (set! cb2a31@p? (unspecified)) (set! cb2a33@make-syntax-violation (unspecified)) (set! cb2a35@cb2a22 (unspecified)) (set! cb2a37@cb2a24 (unspecified)) (set! cb2a39@syntax-violation? (unspecified)) (set! cb2a3b@syntax-violation-form (unspecified)) (set! cb2a3d@syntax-violation-subform (unspecified)) (set! cb2a3f@&syntax-rtd (unspecified)) (set! cb2a41@&syntax-rcd (unspecified)) (set! cb2a47@cb2a42 (unspecified)) (set! cb2a49@cb2a44 (unspecified)) (set! cb2a4b@cb2a43 (unspecified)) (set! cb2a4e@p? (unspecified)) (set! cb2a50@make-undefined-violation (unspecified)) (set! cb2a52@undefined-violation? (unspecified)) (set! cb2a54@&undefined-rtd (unspecified)) (set! cb2a56@&undefined-rcd (unspecified)) (set! cb2a5c@cb2a57 (unspecified)) (set! cb2a5e@cb2a59 (unspecified)) (set! cb2a60@cb2a58 (unspecified)) (set! cb2a63@p? (unspecified)) (set! cb2a65@make-i/o-error (unspecified)) (set! cb2a67@i/o-error? (unspecified)) (set! cb2a69@&i/o-rtd (unspecified)) (set! cb2a6b@&i/o-rcd (unspecified)) (set! cb2a71@cb2a6c (unspecified)) (set! cb2a73@cb2a6e (unspecified)) (set! cb2a75@cb2a6d (unspecified)) (set! cb2a78@p? (unspecified)) (set! cb2a7a@make-i/o-read-error (unspecified)) (set! cb2a7c@i/o-read-error? (unspecified)) (set! cb2a7e@&i/o-read-rtd (unspecified)) (set! cb2a80@&i/o-read-rcd (unspecified)) (set! cb2a86@cb2a81 (unspecified)) (set! cb2a88@cb2a83 (unspecified)) (set! cb2a8a@cb2a82 (unspecified)) (set! cb2a8d@p? (unspecified)) (set! cb2a8f@make-i/o-write-error (unspecified)) (set! cb2a91@i/o-write-error? (unspecified)) (set! cb2a93@&i/o-write-rtd (unspecified)) (set! cb2a95@&i/o-write-rcd (unspecified)) (set! cb2a9d@cb2a98 (unspecified)) (set! cb2a9f@cb2a9a (unspecified)) (set! cb2aa1@cb2a99 (unspecified)) (set! cb2aa4@p? (unspecified)) (set! cb2aa6@make-i/o-invalid-position-error (unspecified)) (set! cb2aa8@cb2a97 (unspecified)) (set! cb2aaa@i/o-invalid-position-error? (unspecified)) (set! cb2aac@i/o-error-position (unspecified)) (set! cb2aae@&i/o-invalid-position-rtd (unspecified)) (set! cb2ab0@&i/o-invalid-position-rcd (unspecified)) (set! cb2ab8@cb2ab3 (unspecified)) (set! cb2aba@cb2ab5 (unspecified)) (set! cb2abc@cb2ab4 (unspecified)) (set! cb2abf@p? (unspecified)) (set! cb2ac1@make-i/o-filename-error (unspecified)) (set! cb2ac3@cb2ab2 (unspecified)) (set! cb2ac5@i/o-filename-error? (unspecified)) (set! cb2ac7@i/o-error-filename (unspecified)) (set! cb2ac9@&i/o-filename-rtd (unspecified)) (set! cb2acb@&i/o-filename-rcd (unspecified)) (set! cb2ad1@cb2acc (unspecified)) (set! cb2ad3@cb2ace (unspecified)) (set! cb2ad5@cb2acd (unspecified)) (set! cb2ad8@p? (unspecified)) (set! cb2ada@make-i/o-file-protection-error (unspecified)) (set! cb2adc@i/o-file-protection-error? (unspecified)) (set! cb2ade@&i/o-file-protection-rtd (unspecified)) (set! cb2ae0@&i/o-file-protection-rcd (unspecified)) (set! cb2ae6@cb2ae1 (unspecified)) (set! cb2ae8@cb2ae3 (unspecified)) (set! cb2aea@cb2ae2 (unspecified)) (set! cb2aed@p? (unspecified)) (set! cb2aef@make-i/o-file-is-read-only-error (unspecified)) (set! cb2af1@i/o-file-is-read-only-error? (unspecified)) (set! cb2af3@&i/o-file-is-read-only-rtd (unspecified)) (set! cb2af5@&i/o-file-is-read-only-rcd (unspecified)) (set! cb2afb@cb2af6 (unspecified)) (set! cb2afd@cb2af8 (unspecified)) (set! cb2aff@cb2af7 (unspecified)) (set! cb2b02@p? (unspecified)) (set! cb2b04@make-i/o-file-already-exists-error (unspecified)) (set! cb2b06@i/o-file-already-exists-error? (unspecified)) (set! cb2b08@&i/o-file-already-exists-rtd (unspecified)) (set! cb2b0a@&i/o-file-already-exists-rcd (unspecified)) (set! cb2b10@cb2b0b (unspecified)) (set! cb2b12@cb2b0d (unspecified)) (set! cb2b14@cb2b0c (unspecified)) (set! cb2b17@p? (unspecified)) (set! cb2b19@make-i/o-file-does-not-exist-error (unspecified)) (set! cb2b1b@i/o-file-does-not-exist-error? (unspecified)) (set! cb2b1d@&i/o-file-does-not-exist-rtd (unspecified)) (set! cb2b1f@&i/o-file-does-not-exist-rcd (unspecified)) (set! cb2b27@cb2b22 (unspecified)) (set! cb2b29@cb2b24 (unspecified)) (set! cb2b2b@cb2b23 (unspecified)) (set! cb2b2e@p? (unspecified)) (set! cb2b30@make-i/o-port-error (unspecified)) (set! cb2b32@cb2b21 (unspecified)) (set! cb2b34@i/o-port-error? (unspecified)) (set! cb2b36@i/o-error-port (unspecified)) (set! cb2b38@&i/o-port-rtd (unspecified)) (set! cb2b3a@&i/o-port-rcd (unspecified)) (set! cb2b40@cb2b3b (unspecified)) (set! cb2b42@cb2b3d (unspecified)) (set! cb2b44@cb2b3c (unspecified)) (set! cb2b47@p? (unspecified)) (set! cb2b49@make-i/o-decoding-error (unspecified)) (set! cb2b4b@i/o-decoding-error? (unspecified)) (set! cb2b4d@&i/o-decoding-rtd (unspecified)) (set! cb2b4f@&i/o-decoding-rcd (unspecified)) (set! cb2b57@cb2b52 (unspecified)) (set! cb2b59@cb2b54 (unspecified)) (set! cb2b5b@cb2b53 (unspecified)) (set! cb2b5e@p? (unspecified)) (set! cb2b60@make-i/o-encoding-error (unspecified)) (set! cb2b62@cb2b51 (unspecified)) (set! cb2b64@i/o-encoding-error? (unspecified)) (set! cb2b66@i/o-encoding-error-char (unspecified)) (set! cb2b68@&i/o-encoding-rtd (unspecified)) (set! cb2b6a@&i/o-encoding-rcd (unspecified)) (set! cb2b70@cb2b6b (unspecified)) (set! cb2b72@cb2b6d (unspecified)) (set! cb2b74@cb2b6c (unspecified)) (set! cb2b77@p? (unspecified)) (set! cb2b79@make-no-infinities-violation (unspecified)) (set! cb2b7b@no-infinities-violation? (unspecified)) (set! cb2b7d@&no-infinities-rtd (unspecified)) (set! cb2b7f@&no-infinities-rcd (unspecified)) (set! cb2b85@cb2b80 (unspecified)) (set! cb2b87@cb2b82 (unspecified)) (set! cb2b89@cb2b81 (unspecified)) (set! cb2b8c@p? (unspecified)) (set! cb2b8e@make-no-nans-violation (unspecified)) (set! cb2b90@no-nans-violation? (unspecified)) (set! cb2b92@&no-nans-rtd (unspecified)) (set! cb2b94@&no-nans-rcd (unspecified)) (set! cb28d6@cb28d1 (make-record-type-descriptor '&condition '#f 'cb28d4 '#f '#f '#())) (set! cb2b95@cb28d6@cb28d1 cb28d6@cb28d1) (set! cb28d8@cb28d3 '#f) (set! cb2b96@cb28d8@cb28d3 cb28d8@cb28d3) (set! cb28da@cb28d2 (make-record-constructor-descriptor cb28d6@cb28d1 '#f cb28d8@cb28d3)) (set! cb2b97@cb28da@cb28d2 cb28da@cb28d2) (set! cb28dd@&condition? (record-predicate cb28d6@cb28d1)) (set! cb2b98@cb28dd@&condition? cb28dd@&condition?) (set! cb28df@make-&condition (record-constructor cb28da@cb28d2)) (set! cb2b99@cb28df@make-&condition cb28df@make-&condition) (set! cb28e1@&condition-rtd cb28d6@cb28d1) (set! cb2b9a@cb28e1@&condition-rtd cb28e1@&condition-rtd) (set! cb28e3@&condition-rcd cb28da@cb28d2) (set! cb2b9b@cb28e3@&condition-rcd cb28e3@&condition-rcd) (set! cb292f@cb292a (make-record-type-descriptor '&message cb28d6@cb28d1 'cb292d '#f '#f '#((immutable message)))) (set! cb2b9c@cb292f@cb292a cb292f@cb292a) (set! cb2931@cb292c '#f) (set! cb2b9d@cb2931@cb292c cb2931@cb292c) (set! cb2933@cb292b (make-record-constructor-descriptor cb292f@cb292a cb28da@cb28d2 cb2931@cb292c)) (set! cb2b9e@cb2933@cb292b cb2933@cb292b) (set! cb2936@p? (record-predicate cb292f@cb292a)) (set! cb2b9f@cb2936@p? cb2936@p?) (set! cb2938@make-message-condition (record-constructor cb2933@cb292b)) (set! cb2ba0@cb2938@make-message-condition cb2938@make-message-condition) (set! cb293a@cb2929 (record-accessor cb292f@cb292a '0)) (set! cb2ba1@cb293a@cb2929 cb293a@cb2929) (set! cb293c@message-condition? (condition-predicate cb292f@cb292a)) (set! cb2ba2@cb293c@message-condition? cb293c@message-condition?) (set! cb293e@condition-message (condition-accessor cb292f@cb292a cb293a@cb2929)) (set! cb2ba3@cb293e@condition-message cb293e@condition-message) (set! cb2940@&message-rtd cb292f@cb292a) (set! cb2ba4@cb2940@&message-rtd cb2940@&message-rtd) (set! cb2942@&message-rcd cb2933@cb292b) (set! cb2ba5@cb2942@&message-rcd cb2942@&message-rcd) (set! cb2948@cb2943 (make-record-type-descriptor '&warning cb28d6@cb28d1 'cb2946 '#f '#f '#())) (set! cb2ba6@cb2948@cb2943 cb2948@cb2943) (set! cb294a@cb2945 '#f) (set! cb2ba7@cb294a@cb2945 cb294a@cb2945) (set! cb294c@cb2944 (make-record-constructor-descriptor cb2948@cb2943 cb28da@cb28d2 cb294a@cb2945)) (set! cb2ba8@cb294c@cb2944 cb294c@cb2944) (set! cb294f@p? (record-predicate cb2948@cb2943)) (set! cb2ba9@cb294f@p? cb294f@p?) (set! cb2951@make-warning (record-constructor cb294c@cb2944)) (set! cb2baa@cb2951@make-warning cb2951@make-warning) (set! cb2953@warning? (condition-predicate cb2948@cb2943)) (set! cb2bab@cb2953@warning? cb2953@warning?) (set! cb2955@&warning-rtd cb2948@cb2943) (set! cb2bac@cb2955@&warning-rtd cb2955@&warning-rtd) (set! cb2957@&warning-rcd cb294c@cb2944) (set! cb2bad@cb2957@&warning-rcd cb2957@&warning-rcd) (set! cb295d@cb2958 (make-record-type-descriptor '&serious cb28d6@cb28d1 'cb295b '#f '#f '#())) (set! cb2bae@cb295d@cb2958 cb295d@cb2958) (set! cb295f@cb295a '#f) (set! cb2baf@cb295f@cb295a cb295f@cb295a) (set! cb2961@cb2959 (make-record-constructor-descriptor cb295d@cb2958 cb28da@cb28d2 cb295f@cb295a)) (set! cb2bb0@cb2961@cb2959 cb2961@cb2959) (set! cb2964@p? (record-predicate cb295d@cb2958)) (set! cb2bb1@cb2964@p? cb2964@p?) (set! cb2966@make-serious-condition (record-constructor cb2961@cb2959)) (set! cb2bb2@cb2966@make-serious-condition cb2966@make-serious-condition) (set! cb2968@serious-condition? (condition-predicate cb295d@cb2958)) (set! cb2bb3@cb2968@serious-condition? cb2968@serious-condition?) (set! cb296a@&serious-rtd cb295d@cb2958) (set! cb2bb4@cb296a@&serious-rtd cb296a@&serious-rtd) (set! cb296c@&serious-rcd cb2961@cb2959) (set! cb2bb5@cb296c@&serious-rcd cb296c@&serious-rcd) (set! cb2972@cb296d (make-record-type-descriptor '&error cb295d@cb2958 'cb2970 '#f '#f '#())) (set! cb2bb6@cb2972@cb296d cb2972@cb296d) (set! cb2974@cb296f '#f) (set! cb2bb7@cb2974@cb296f cb2974@cb296f) (set! cb2976@cb296e (make-record-constructor-descriptor cb2972@cb296d cb2961@cb2959 cb2974@cb296f)) (set! cb2bb8@cb2976@cb296e cb2976@cb296e) (set! cb2979@p? (record-predicate cb2972@cb296d)) (set! cb2bb9@cb2979@p? cb2979@p?) (set! cb297b@make-error (record-constructor cb2976@cb296e)) (set! cb2bba@cb297b@make-error cb297b@make-error) (set! cb297d@error? (condition-predicate cb2972@cb296d)) (set! cb2bbb@cb297d@error? cb297d@error?) (set! cb297f@&error-rtd cb2972@cb296d) (set! cb2bbc@cb297f@&error-rtd cb297f@&error-rtd) (set! cb2981@&error-rcd cb2976@cb296e) (set! cb2bbd@cb2981@&error-rcd cb2981@&error-rcd) (set! cb2987@cb2982 (make-record-type-descriptor '&violation cb295d@cb2958 'cb2985 '#f '#f '#())) (set! cb2bbe@cb2987@cb2982 cb2987@cb2982) (set! cb2989@cb2984 '#f) (set! cb2bbf@cb2989@cb2984 cb2989@cb2984) (set! cb298b@cb2983 (make-record-constructor-descriptor cb2987@cb2982 cb2961@cb2959 cb2989@cb2984)) (set! cb2bc0@cb298b@cb2983 cb298b@cb2983) (set! cb298e@p? (record-predicate cb2987@cb2982)) (set! cb2bc1@cb298e@p? cb298e@p?) (set! cb2990@make-violation (record-constructor cb298b@cb2983)) (set! cb2bc2@cb2990@make-violation cb2990@make-violation) (set! cb2992@violation? (condition-predicate cb2987@cb2982)) (set! cb2bc3@cb2992@violation? cb2992@violation?) (set! cb2994@&violation-rtd cb2987@cb2982) (set! cb2bc4@cb2994@&violation-rtd cb2994@&violation-rtd) (set! cb2996@&violation-rcd cb298b@cb2983) (set! cb2bc5@cb2996@&violation-rcd cb2996@&violation-rcd) (set! cb299c@cb2997 (make-record-type-descriptor '&assertion cb2987@cb2982 'cb299a '#f '#f '#())) (set! cb2bc6@cb299c@cb2997 cb299c@cb2997) (set! cb299e@cb2999 '#f) (set! cb2bc7@cb299e@cb2999 cb299e@cb2999) (set! cb29a0@cb2998 (make-record-constructor-descriptor cb299c@cb2997 cb298b@cb2983 cb299e@cb2999)) (set! cb2bc8@cb29a0@cb2998 cb29a0@cb2998) (set! cb29a3@p? (record-predicate cb299c@cb2997)) (set! cb2bc9@cb29a3@p? cb29a3@p?) (set! cb29a5@make-assertion-violation (record-constructor cb29a0@cb2998)) (set! cb2bca@cb29a5@make-assertion-violation cb29a5@make-assertion-violation) (set! cb29a7@assertion-violation? (condition-predicate cb299c@cb2997)) (set! cb2bcb@cb29a7@assertion-violation? cb29a7@assertion-violation?) (set! cb29a9@&assertion-rtd cb299c@cb2997) (set! cb2bcc@cb29a9@&assertion-rtd cb29a9@&assertion-rtd) (set! cb29ab@&assertion-rcd cb29a0@cb2998) (set! cb2bcd@cb29ab@&assertion-rcd cb29ab@&assertion-rcd) (set! cb29b3@cb29ae (make-record-type-descriptor '&irritants cb28d6@cb28d1 'cb29b1 '#f '#f '#((immutable irritants)))) (set! cb2bce@cb29b3@cb29ae cb29b3@cb29ae) (set! cb29b5@cb29b0 '#f) (set! cb2bcf@cb29b5@cb29b0 cb29b5@cb29b0) (set! cb29b7@cb29af (make-record-constructor-descriptor cb29b3@cb29ae cb28da@cb28d2 cb29b5@cb29b0)) (set! cb2bd0@cb29b7@cb29af cb29b7@cb29af) (set! cb29ba@p? (record-predicate cb29b3@cb29ae)) (set! cb2bd1@cb29ba@p? cb29ba@p?) (set! cb29bc@make-irritants-condition (record-constructor cb29b7@cb29af)) (set! cb2bd2@cb29bc@make-irritants-condition cb29bc@make-irritants-condition) (set! cb29be@cb29ad (record-accessor cb29b3@cb29ae '0)) (set! cb2bd3@cb29be@cb29ad cb29be@cb29ad) (set! cb29c0@irritants-condition? (condition-predicate cb29b3@cb29ae)) (set! cb2bd4@cb29c0@irritants-condition? cb29c0@irritants-condition?) (set! cb29c2@condition-irritants (condition-accessor cb29b3@cb29ae cb29be@cb29ad)) (set! cb2bd5@cb29c2@condition-irritants cb29c2@condition-irritants) (set! cb29c4@&irritants-rtd cb29b3@cb29ae) (set! cb2bd6@cb29c4@&irritants-rtd cb29c4@&irritants-rtd) (set! cb29c6@&irritants-rcd cb29b7@cb29af) (set! cb2bd7@cb29c6@&irritants-rcd cb29c6@&irritants-rcd) (set! cb29ce@cb29c9 (make-record-type-descriptor '&who cb28d6@cb28d1 'cb29cc '#f '#f '#((immutable who)))) (set! cb2bd8@cb29ce@cb29c9 cb29ce@cb29c9) (set! cb29d0@cb29cb '#f) (set! cb2bd9@cb29d0@cb29cb cb29d0@cb29cb) (set! cb29d2@cb29ca (make-record-constructor-descriptor cb29ce@cb29c9 cb28da@cb28d2 cb29d0@cb29cb)) (set! cb2bda@cb29d2@cb29ca cb29d2@cb29ca) (set! cb29d5@p? (record-predicate cb29ce@cb29c9)) (set! cb2bdb@cb29d5@p? cb29d5@p?) (set! cb29d7@make-who-condition (record-constructor cb29d2@cb29ca)) (set! cb2bdc@cb29d7@make-who-condition cb29d7@make-who-condition) (set! cb29d9@cb29c8 (record-accessor cb29ce@cb29c9 '0)) (set! cb2bdd@cb29d9@cb29c8 cb29d9@cb29c8) (set! cb29db@who-condition? (condition-predicate cb29ce@cb29c9)) (set! cb2bde@cb29db@who-condition? cb29db@who-condition?) (set! cb29dd@condition-who (condition-accessor cb29ce@cb29c9 cb29d9@cb29c8)) (set! cb2bdf@cb29dd@condition-who cb29dd@condition-who) (set! cb29df@&who-rtd cb29ce@cb29c9) (set! cb2be0@cb29df@&who-rtd cb29df@&who-rtd) (set! cb29e1@&who-rcd cb29d2@cb29ca) (set! cb2be1@cb29e1@&who-rcd cb29e1@&who-rcd) (set! cb29e7@cb29e2 (make-record-type-descriptor '&non-continuable cb2987@cb2982 'cb29e5 '#f '#f '#())) (set! cb2be2@cb29e7@cb29e2 cb29e7@cb29e2) (set! cb29e9@cb29e4 '#f) (set! cb2be3@cb29e9@cb29e4 cb29e9@cb29e4) (set! cb29eb@cb29e3 (make-record-constructor-descriptor cb29e7@cb29e2 cb298b@cb2983 cb29e9@cb29e4)) (set! cb2be4@cb29eb@cb29e3 cb29eb@cb29e3) (set! cb29ee@p? (record-predicate cb29e7@cb29e2)) (set! cb2be5@cb29ee@p? cb29ee@p?) (set! cb29f0@make-non-continuable-violation (record-constructor cb29eb@cb29e3)) (set! cb2be6@cb29f0@make-non-continuable-violation cb29f0@make-non-continuable-violation) (set! cb29f2@non-continuable-violation? (condition-predicate cb29e7@cb29e2)) (set! cb2be7@cb29f2@non-continuable-violation? cb29f2@non-continuable-violation?) (set! cb29f4@&non-continuable-rtd cb29e7@cb29e2) (set! cb2be8@cb29f4@&non-continuable-rtd cb29f4@&non-continuable-rtd) (set! cb29f6@&non-continuable-rcd cb29eb@cb29e3) (set! cb2be9@cb29f6@&non-continuable-rcd cb29f6@&non-continuable-rcd) (set! cb29fc@cb29f7 (make-record-type-descriptor '&implementation-restriction cb2987@cb2982 'cb29fa '#f '#f '#())) (set! cb2bea@cb29fc@cb29f7 cb29fc@cb29f7) (set! cb29fe@cb29f9 '#f) (set! cb2beb@cb29fe@cb29f9 cb29fe@cb29f9) (set! cb2a00@cb29f8 (make-record-constructor-descriptor cb29fc@cb29f7 cb298b@cb2983 cb29fe@cb29f9)) (set! cb2bec@cb2a00@cb29f8 cb2a00@cb29f8) (set! cb2a03@p? (record-predicate cb29fc@cb29f7)) (set! cb2bed@cb2a03@p? cb2a03@p?) (set! cb2a05@make-implementation-restriction-violation (record-constructor cb2a00@cb29f8)) (set! cb2bee@cb2a05@make-implementation-restriction-violation cb2a05@make-implementation-restriction-violation) (set! cb2a07@implementation-restriction-violation? (condition-predicate cb29fc@cb29f7)) (set! cb2bef@cb2a07@implementation-restriction-violation? cb2a07@implementation-restriction-violation?) (set! cb2a09@&implementation-restriction-rtd cb29fc@cb29f7) (set! cb2bf0@cb2a09@&implementation-restriction-rtd cb2a09@&implementation-restriction-rtd) (set! cb2a0b@&implementation-restriction-rcd cb2a00@cb29f8) (set! cb2bf1@cb2a0b@&implementation-restriction-rcd cb2a0b@&implementation-restriction-rcd) (set! cb2a11@cb2a0c (make-record-type-descriptor '&lexical cb2987@cb2982 'cb2a0f '#f '#f '#())) (set! cb2bf2@cb2a11@cb2a0c cb2a11@cb2a0c) (set! cb2a13@cb2a0e '#f) (set! cb2bf3@cb2a13@cb2a0e cb2a13@cb2a0e) (set! cb2a15@cb2a0d (make-record-constructor-descriptor cb2a11@cb2a0c cb298b@cb2983 cb2a13@cb2a0e)) (set! cb2bf4@cb2a15@cb2a0d cb2a15@cb2a0d) (set! cb2a18@p? (record-predicate cb2a11@cb2a0c)) (set! cb2bf5@cb2a18@p? cb2a18@p?) (set! cb2a1a@make-lexical-violation (record-constructor cb2a15@cb2a0d)) (set! cb2bf6@cb2a1a@make-lexical-violation cb2a1a@make-lexical-violation) (set! cb2a1c@lexical-violation? (condition-predicate cb2a11@cb2a0c)) (set! cb2bf7@cb2a1c@lexical-violation? cb2a1c@lexical-violation?) (set! cb2a1e@&lexical-rtd cb2a11@cb2a0c) (set! cb2bf8@cb2a1e@&lexical-rtd cb2a1e@&lexical-rtd) (set! cb2a20@&lexical-rcd cb2a15@cb2a0d) (set! cb2bf9@cb2a20@&lexical-rcd cb2a20@&lexical-rcd) (set! cb2a2a@cb2a25 (make-record-type-descriptor '&syntax cb2987@cb2982 'cb2a28 '#f '#f '#((immutable form) (immutable subform)))) (set! cb2bfa@cb2a2a@cb2a25 cb2a2a@cb2a25) (set! cb2a2c@cb2a27 '#f) (set! cb2bfb@cb2a2c@cb2a27 cb2a2c@cb2a27) (set! cb2a2e@cb2a26 (make-record-constructor-descriptor cb2a2a@cb2a25 cb298b@cb2983 cb2a2c@cb2a27)) (set! cb2bfc@cb2a2e@cb2a26 cb2a2e@cb2a26) (set! cb2a31@p? (record-predicate cb2a2a@cb2a25)) (set! cb2bfd@cb2a31@p? cb2a31@p?) (set! cb2a33@make-syntax-violation (record-constructor cb2a2e@cb2a26)) (set! cb2bfe@cb2a33@make-syntax-violation cb2a33@make-syntax-violation) (set! cb2a35@cb2a22 (record-accessor cb2a2a@cb2a25 '0)) (set! cb2bff@cb2a35@cb2a22 cb2a35@cb2a22) (set! cb2a37@cb2a24 (record-accessor cb2a2a@cb2a25 '1)) (set! cb2c00@cb2a37@cb2a24 cb2a37@cb2a24) (set! cb2a39@syntax-violation? (condition-predicate cb2a2a@cb2a25)) (set! cb2c01@cb2a39@syntax-violation? cb2a39@syntax-violation?) (set! cb2a3b@syntax-violation-form (condition-accessor cb2a2a@cb2a25 cb2a35@cb2a22)) (set! cb2c02@cb2a3b@syntax-violation-form cb2a3b@syntax-violation-form) (set! cb2a3d@syntax-violation-subform (condition-accessor cb2a2a@cb2a25 cb2a37@cb2a24)) (set! cb2c03@cb2a3d@syntax-violation-subform cb2a3d@syntax-violation-subform) (set! cb2a3f@&syntax-rtd cb2a2a@cb2a25) (set! cb2c04@cb2a3f@&syntax-rtd cb2a3f@&syntax-rtd) (set! cb2a41@&syntax-rcd cb2a2e@cb2a26) (set! cb2c05@cb2a41@&syntax-rcd cb2a41@&syntax-rcd) (set! cb2a47@cb2a42 (make-record-type-descriptor '&undefined cb2987@cb2982 'cb2a45 '#f '#f '#())) (set! cb2c06@cb2a47@cb2a42 cb2a47@cb2a42) (set! cb2a49@cb2a44 '#f) (set! cb2c07@cb2a49@cb2a44 cb2a49@cb2a44) (set! cb2a4b@cb2a43 (make-record-constructor-descriptor cb2a47@cb2a42 cb298b@cb2983 cb2a49@cb2a44)) (set! cb2c08@cb2a4b@cb2a43 cb2a4b@cb2a43) (set! cb2a4e@p? (record-predicate cb2a47@cb2a42)) (set! cb2c09@cb2a4e@p? cb2a4e@p?) (set! cb2a50@make-undefined-violation (record-constructor cb2a4b@cb2a43)) (set! cb2c0a@cb2a50@make-undefined-violation cb2a50@make-undefined-violation) (set! cb2a52@undefined-violation? (condition-predicate cb2a47@cb2a42)) (set! cb2c0b@cb2a52@undefined-violation? cb2a52@undefined-violation?) (set! cb2a54@&undefined-rtd cb2a47@cb2a42) (set! cb2c0c@cb2a54@&undefined-rtd cb2a54@&undefined-rtd) (set! cb2a56@&undefined-rcd cb2a4b@cb2a43) (set! cb2c0d@cb2a56@&undefined-rcd cb2a56@&undefined-rcd) (set! cb2a5c@cb2a57 (make-record-type-descriptor '&i/o cb2972@cb296d 'cb2a5a '#f '#f '#())) (set! cb2c0e@cb2a5c@cb2a57 cb2a5c@cb2a57) (set! cb2a5e@cb2a59 '#f) (set! cb2c0f@cb2a5e@cb2a59 cb2a5e@cb2a59) (set! cb2a60@cb2a58 (make-record-constructor-descriptor cb2a5c@cb2a57 cb2976@cb296e cb2a5e@cb2a59)) (set! cb2c10@cb2a60@cb2a58 cb2a60@cb2a58) (set! cb2a63@p? (record-predicate cb2a5c@cb2a57)) (set! cb2c11@cb2a63@p? cb2a63@p?) (set! cb2a65@make-i/o-error (record-constructor cb2a60@cb2a58)) (set! cb2c12@cb2a65@make-i/o-error cb2a65@make-i/o-error) (set! cb2a67@i/o-error? (condition-predicate cb2a5c@cb2a57)) (set! cb2c13@cb2a67@i/o-error? cb2a67@i/o-error?) (set! cb2a69@&i/o-rtd cb2a5c@cb2a57) (set! cb2c14@cb2a69@&i/o-rtd cb2a69@&i/o-rtd) (set! cb2a6b@&i/o-rcd cb2a60@cb2a58) (set! cb2c15@cb2a6b@&i/o-rcd cb2a6b@&i/o-rcd) (set! cb2a71@cb2a6c (make-record-type-descriptor '&i/o-read cb2a5c@cb2a57 'cb2a6f '#f '#f '#())) (set! cb2c16@cb2a71@cb2a6c cb2a71@cb2a6c) (set! cb2a73@cb2a6e '#f) (set! cb2c17@cb2a73@cb2a6e cb2a73@cb2a6e) (set! cb2a75@cb2a6d (make-record-constructor-descriptor cb2a71@cb2a6c cb2a60@cb2a58 cb2a73@cb2a6e)) (set! cb2c18@cb2a75@cb2a6d cb2a75@cb2a6d) (set! cb2a78@p? (record-predicate cb2a71@cb2a6c)) (set! cb2c19@cb2a78@p? cb2a78@p?) (set! cb2a7a@make-i/o-read-error (record-constructor cb2a75@cb2a6d)) (set! cb2c1a@cb2a7a@make-i/o-read-error cb2a7a@make-i/o-read-error) (set! cb2a7c@i/o-read-error? (condition-predicate cb2a71@cb2a6c)) (set! cb2c1b@cb2a7c@i/o-read-error? cb2a7c@i/o-read-error?) (set! cb2a7e@&i/o-read-rtd cb2a71@cb2a6c) (set! cb2c1c@cb2a7e@&i/o-read-rtd cb2a7e@&i/o-read-rtd) (set! cb2a80@&i/o-read-rcd cb2a75@cb2a6d) (set! cb2c1d@cb2a80@&i/o-read-rcd cb2a80@&i/o-read-rcd) (set! cb2a86@cb2a81 (make-record-type-descriptor '&i/o-write cb2a5c@cb2a57 'cb2a84 '#f '#f '#())) (set! cb2c1e@cb2a86@cb2a81 cb2a86@cb2a81) (set! cb2a88@cb2a83 '#f) (set! cb2c1f@cb2a88@cb2a83 cb2a88@cb2a83) (set! cb2a8a@cb2a82 (make-record-constructor-descriptor cb2a86@cb2a81 cb2a60@cb2a58 cb2a88@cb2a83)) (set! cb2c20@cb2a8a@cb2a82 cb2a8a@cb2a82) (set! cb2a8d@p? (record-predicate cb2a86@cb2a81)) (set! cb2c21@cb2a8d@p? cb2a8d@p?) (set! cb2a8f@make-i/o-write-error (record-constructor cb2a8a@cb2a82)) (set! cb2c22@cb2a8f@make-i/o-write-error cb2a8f@make-i/o-write-error) (set! cb2a91@i/o-write-error? (condition-predicate cb2a86@cb2a81)) (set! cb2c23@cb2a91@i/o-write-error? cb2a91@i/o-write-error?) (set! cb2a93@&i/o-write-rtd cb2a86@cb2a81) (set! cb2c24@cb2a93@&i/o-write-rtd cb2a93@&i/o-write-rtd) (set! cb2a95@&i/o-write-rcd cb2a8a@cb2a82) (set! cb2c25@cb2a95@&i/o-write-rcd cb2a95@&i/o-write-rcd) (set! cb2a9d@cb2a98 (make-record-type-descriptor '&i/o-invalid-position cb2a5c@cb2a57 'cb2a9b '#f '#f '#((immutable position)))) (set! cb2c26@cb2a9d@cb2a98 cb2a9d@cb2a98) (set! cb2a9f@cb2a9a '#f) (set! cb2c27@cb2a9f@cb2a9a cb2a9f@cb2a9a) (set! cb2aa1@cb2a99 (make-record-constructor-descriptor cb2a9d@cb2a98 cb2a60@cb2a58 cb2a9f@cb2a9a)) (set! cb2c28@cb2aa1@cb2a99 cb2aa1@cb2a99) (set! cb2aa4@p? (record-predicate cb2a9d@cb2a98)) (set! cb2c29@cb2aa4@p? cb2aa4@p?) (set! cb2aa6@make-i/o-invalid-position-error (record-constructor cb2aa1@cb2a99)) (set! cb2c2a@cb2aa6@make-i/o-invalid-position-error cb2aa6@make-i/o-invalid-position-error) (set! cb2aa8@cb2a97 (record-accessor cb2a9d@cb2a98 '0)) (set! cb2c2b@cb2aa8@cb2a97 cb2aa8@cb2a97) (set! cb2aaa@i/o-invalid-position-error? (condition-predicate cb2a9d@cb2a98)) (set! cb2c2c@cb2aaa@i/o-invalid-position-error? cb2aaa@i/o-invalid-position-error?) (set! cb2aac@i/o-error-position (condition-accessor cb2a9d@cb2a98 cb2aa8@cb2a97)) (set! cb2c2d@cb2aac@i/o-error-position cb2aac@i/o-error-position) (set! cb2aae@&i/o-invalid-position-rtd cb2a9d@cb2a98) (set! cb2c2e@cb2aae@&i/o-invalid-position-rtd cb2aae@&i/o-invalid-position-rtd) (set! cb2ab0@&i/o-invalid-position-rcd cb2aa1@cb2a99) (set! cb2c2f@cb2ab0@&i/o-invalid-position-rcd cb2ab0@&i/o-invalid-position-rcd) (set! cb2ab8@cb2ab3 (make-record-type-descriptor '&i/o-filename cb2a5c@cb2a57 'cb2ab6 '#f '#f '#((immutable filename)))) (set! cb2c30@cb2ab8@cb2ab3 cb2ab8@cb2ab3) (set! cb2aba@cb2ab5 '#f) (set! cb2c31@cb2aba@cb2ab5 cb2aba@cb2ab5) (set! cb2abc@cb2ab4 (make-record-constructor-descriptor cb2ab8@cb2ab3 cb2a60@cb2a58 cb2aba@cb2ab5)) (set! cb2c32@cb2abc@cb2ab4 cb2abc@cb2ab4) (set! cb2abf@p? (record-predicate cb2ab8@cb2ab3)) (set! cb2c33@cb2abf@p? cb2abf@p?) (set! cb2ac1@make-i/o-filename-error (record-constructor cb2abc@cb2ab4)) (set! cb2c34@cb2ac1@make-i/o-filename-error cb2ac1@make-i/o-filename-error) (set! cb2ac3@cb2ab2 (record-accessor cb2ab8@cb2ab3 '0)) (set! cb2c35@cb2ac3@cb2ab2 cb2ac3@cb2ab2) (set! cb2ac5@i/o-filename-error? (condition-predicate cb2ab8@cb2ab3)) (set! cb2c36@cb2ac5@i/o-filename-error? cb2ac5@i/o-filename-error?) (set! cb2ac7@i/o-error-filename (condition-accessor cb2ab8@cb2ab3 cb2ac3@cb2ab2)) (set! cb2c37@cb2ac7@i/o-error-filename cb2ac7@i/o-error-filename) (set! cb2ac9@&i/o-filename-rtd cb2ab8@cb2ab3) (set! cb2c38@cb2ac9@&i/o-filename-rtd cb2ac9@&i/o-filename-rtd) (set! cb2acb@&i/o-filename-rcd cb2abc@cb2ab4) (set! cb2c39@cb2acb@&i/o-filename-rcd cb2acb@&i/o-filename-rcd) (set! cb2ad1@cb2acc (make-record-type-descriptor '&i/o-file-protection cb2ab8@cb2ab3 'cb2acf '#f '#f '#())) (set! cb2c3a@cb2ad1@cb2acc cb2ad1@cb2acc) (set! cb2ad3@cb2ace '#f) (set! cb2c3b@cb2ad3@cb2ace cb2ad3@cb2ace) (set! cb2ad5@cb2acd (make-record-constructor-descriptor cb2ad1@cb2acc cb2abc@cb2ab4 cb2ad3@cb2ace)) (set! cb2c3c@cb2ad5@cb2acd cb2ad5@cb2acd) (set! cb2ad8@p? (record-predicate cb2ad1@cb2acc)) (set! cb2c3d@cb2ad8@p? cb2ad8@p?) (set! cb2ada@make-i/o-file-protection-error (record-constructor cb2ad5@cb2acd)) (set! cb2c3e@cb2ada@make-i/o-file-protection-error cb2ada@make-i/o-file-protection-error) (set! cb2adc@i/o-file-protection-error? (condition-predicate cb2ad1@cb2acc)) (set! cb2c3f@cb2adc@i/o-file-protection-error? cb2adc@i/o-file-protection-error?) (set! cb2ade@&i/o-file-protection-rtd cb2ad1@cb2acc) (set! cb2c40@cb2ade@&i/o-file-protection-rtd cb2ade@&i/o-file-protection-rtd) (set! cb2ae0@&i/o-file-protection-rcd cb2ad5@cb2acd) (set! cb2c41@cb2ae0@&i/o-file-protection-rcd cb2ae0@&i/o-file-protection-rcd) (set! cb2ae6@cb2ae1 (make-record-type-descriptor '&i/o-file-is-read-only cb2ad1@cb2acc 'cb2ae4 '#f '#f '#())) (set! cb2c42@cb2ae6@cb2ae1 cb2ae6@cb2ae1) (set! cb2ae8@cb2ae3 '#f) (set! cb2c43@cb2ae8@cb2ae3 cb2ae8@cb2ae3) (set! cb2aea@cb2ae2 (make-record-constructor-descriptor cb2ae6@cb2ae1 cb2ad5@cb2acd cb2ae8@cb2ae3)) (set! cb2c44@cb2aea@cb2ae2 cb2aea@cb2ae2) (set! cb2aed@p? (record-predicate cb2ae6@cb2ae1)) (set! cb2c45@cb2aed@p? cb2aed@p?) (set! cb2aef@make-i/o-file-is-read-only-error (record-constructor cb2aea@cb2ae2)) (set! cb2c46@cb2aef@make-i/o-file-is-read-only-error cb2aef@make-i/o-file-is-read-only-error) (set! cb2af1@i/o-file-is-read-only-error? (condition-predicate cb2ae6@cb2ae1)) (set! cb2c47@cb2af1@i/o-file-is-read-only-error? cb2af1@i/o-file-is-read-only-error?) (set! cb2af3@&i/o-file-is-read-only-rtd cb2ae6@cb2ae1) (set! cb2c48@cb2af3@&i/o-file-is-read-only-rtd cb2af3@&i/o-file-is-read-only-rtd) (set! cb2af5@&i/o-file-is-read-only-rcd cb2aea@cb2ae2) (set! cb2c49@cb2af5@&i/o-file-is-read-only-rcd cb2af5@&i/o-file-is-read-only-rcd) (set! cb2afb@cb2af6 (make-record-type-descriptor '&i/o-file-already-exists cb2ab8@cb2ab3 'cb2af9 '#f '#f '#())) (set! cb2c4a@cb2afb@cb2af6 cb2afb@cb2af6) (set! cb2afd@cb2af8 '#f) (set! cb2c4b@cb2afd@cb2af8 cb2afd@cb2af8) (set! cb2aff@cb2af7 (make-record-constructor-descriptor cb2afb@cb2af6 cb2abc@cb2ab4 cb2afd@cb2af8)) (set! cb2c4c@cb2aff@cb2af7 cb2aff@cb2af7) (set! cb2b02@p? (record-predicate cb2afb@cb2af6)) (set! cb2c4d@cb2b02@p? cb2b02@p?) (set! cb2b04@make-i/o-file-already-exists-error (record-constructor cb2aff@cb2af7)) (set! cb2c4e@cb2b04@make-i/o-file-already-exists-error cb2b04@make-i/o-file-already-exists-error) (set! cb2b06@i/o-file-already-exists-error? (condition-predicate cb2afb@cb2af6)) (set! cb2c4f@cb2b06@i/o-file-already-exists-error? cb2b06@i/o-file-already-exists-error?) (set! cb2b08@&i/o-file-already-exists-rtd cb2afb@cb2af6) (set! cb2c50@cb2b08@&i/o-file-already-exists-rtd cb2b08@&i/o-file-already-exists-rtd) (set! cb2b0a@&i/o-file-already-exists-rcd cb2aff@cb2af7) (set! cb2c51@cb2b0a@&i/o-file-already-exists-rcd cb2b0a@&i/o-file-already-exists-rcd) (set! cb2b10@cb2b0b (make-record-type-descriptor '&i/o-file-does-not-exist cb2ab8@cb2ab3 'cb2b0e '#f '#f '#())) (set! cb2c52@cb2b10@cb2b0b cb2b10@cb2b0b) (set! cb2b12@cb2b0d '#f) (set! cb2c53@cb2b12@cb2b0d cb2b12@cb2b0d) (set! cb2b14@cb2b0c (make-record-constructor-descriptor cb2b10@cb2b0b cb2abc@cb2ab4 cb2b12@cb2b0d)) (set! cb2c54@cb2b14@cb2b0c cb2b14@cb2b0c) (set! cb2b17@p? (record-predicate cb2b10@cb2b0b)) (set! cb2c55@cb2b17@p? cb2b17@p?) (set! cb2b19@make-i/o-file-does-not-exist-error (record-constructor cb2b14@cb2b0c)) (set! cb2c56@cb2b19@make-i/o-file-does-not-exist-error cb2b19@make-i/o-file-does-not-exist-error) (set! cb2b1b@i/o-file-does-not-exist-error? (condition-predicate cb2b10@cb2b0b)) (set! cb2c57@cb2b1b@i/o-file-does-not-exist-error? cb2b1b@i/o-file-does-not-exist-error?) (set! cb2b1d@&i/o-file-does-not-exist-rtd cb2b10@cb2b0b) (set! cb2c58@cb2b1d@&i/o-file-does-not-exist-rtd cb2b1d@&i/o-file-does-not-exist-rtd) (set! cb2b1f@&i/o-file-does-not-exist-rcd cb2b14@cb2b0c) (set! cb2c59@cb2b1f@&i/o-file-does-not-exist-rcd cb2b1f@&i/o-file-does-not-exist-rcd) (set! cb2b27@cb2b22 (make-record-type-descriptor '&i/o-port cb2a5c@cb2a57 'cb2b25 '#f '#f '#((immutable port)))) (set! cb2c5a@cb2b27@cb2b22 cb2b27@cb2b22) (set! cb2b29@cb2b24 '#f) (set! cb2c5b@cb2b29@cb2b24 cb2b29@cb2b24) (set! cb2b2b@cb2b23 (make-record-constructor-descriptor cb2b27@cb2b22 cb2a60@cb2a58 cb2b29@cb2b24)) (set! cb2c5c@cb2b2b@cb2b23 cb2b2b@cb2b23) (set! cb2b2e@p? (record-predicate cb2b27@cb2b22)) (set! cb2c5d@cb2b2e@p? cb2b2e@p?) (set! cb2b30@make-i/o-port-error (record-constructor cb2b2b@cb2b23)) (set! cb2c5e@cb2b30@make-i/o-port-error cb2b30@make-i/o-port-error) (set! cb2b32@cb2b21 (record-accessor cb2b27@cb2b22 '0)) (set! cb2c5f@cb2b32@cb2b21 cb2b32@cb2b21) (set! cb2b34@i/o-port-error? (condition-predicate cb2b27@cb2b22)) (set! cb2c60@cb2b34@i/o-port-error? cb2b34@i/o-port-error?) (set! cb2b36@i/o-error-port (condition-accessor cb2b27@cb2b22 cb2b32@cb2b21)) (set! cb2c61@cb2b36@i/o-error-port cb2b36@i/o-error-port) (set! cb2b38@&i/o-port-rtd cb2b27@cb2b22) (set! cb2c62@cb2b38@&i/o-port-rtd cb2b38@&i/o-port-rtd) (set! cb2b3a@&i/o-port-rcd cb2b2b@cb2b23) (set! cb2c63@cb2b3a@&i/o-port-rcd cb2b3a@&i/o-port-rcd) (set! cb2b40@cb2b3b (make-record-type-descriptor '&i/o-decoding cb2b27@cb2b22 'cb2b3e '#f '#f '#())) (set! cb2c64@cb2b40@cb2b3b cb2b40@cb2b3b) (set! cb2b42@cb2b3d '#f) (set! cb2c65@cb2b42@cb2b3d cb2b42@cb2b3d) (set! cb2b44@cb2b3c (make-record-constructor-descriptor cb2b40@cb2b3b cb2b2b@cb2b23 cb2b42@cb2b3d)) (set! cb2c66@cb2b44@cb2b3c cb2b44@cb2b3c) (set! cb2b47@p? (record-predicate cb2b40@cb2b3b)) (set! cb2c67@cb2b47@p? cb2b47@p?) (set! cb2b49@make-i/o-decoding-error (record-constructor cb2b44@cb2b3c)) (set! cb2c68@cb2b49@make-i/o-decoding-error cb2b49@make-i/o-decoding-error) (set! cb2b4b@i/o-decoding-error? (condition-predicate cb2b40@cb2b3b)) (set! cb2c69@cb2b4b@i/o-decoding-error? cb2b4b@i/o-decoding-error?) (set! cb2b4d@&i/o-decoding-rtd cb2b40@cb2b3b) (set! cb2c6a@cb2b4d@&i/o-decoding-rtd cb2b4d@&i/o-decoding-rtd) (set! cb2b4f@&i/o-decoding-rcd cb2b44@cb2b3c) (set! cb2c6b@cb2b4f@&i/o-decoding-rcd cb2b4f@&i/o-decoding-rcd) (set! cb2b57@cb2b52 (make-record-type-descriptor '&i/o-encoding cb2b27@cb2b22 'cb2b55 '#f '#f '#((immutable char)))) (set! cb2c6c@cb2b57@cb2b52 cb2b57@cb2b52) (set! cb2b59@cb2b54 '#f) (set! cb2c6d@cb2b59@cb2b54 cb2b59@cb2b54) (set! cb2b5b@cb2b53 (make-record-constructor-descriptor cb2b57@cb2b52 cb2b2b@cb2b23 cb2b59@cb2b54)) (set! cb2c6e@cb2b5b@cb2b53 cb2b5b@cb2b53) (set! cb2b5e@p? (record-predicate cb2b57@cb2b52)) (set! cb2c6f@cb2b5e@p? cb2b5e@p?) (set! cb2b60@make-i/o-encoding-error (record-constructor cb2b5b@cb2b53)) (set! cb2c70@cb2b60@make-i/o-encoding-error cb2b60@make-i/o-encoding-error) (set! cb2b62@cb2b51 (record-accessor cb2b57@cb2b52 '0)) (set! cb2c71@cb2b62@cb2b51 cb2b62@cb2b51) (set! cb2b64@i/o-encoding-error? (condition-predicate cb2b57@cb2b52)) (set! cb2c72@cb2b64@i/o-encoding-error? cb2b64@i/o-encoding-error?) (set! cb2b66@i/o-encoding-error-char (condition-accessor cb2b57@cb2b52 cb2b62@cb2b51)) (set! cb2c73@cb2b66@i/o-encoding-error-char cb2b66@i/o-encoding-error-char) (set! cb2b68@&i/o-encoding-rtd cb2b57@cb2b52) (set! cb2c74@cb2b68@&i/o-encoding-rtd cb2b68@&i/o-encoding-rtd) (set! cb2b6a@&i/o-encoding-rcd cb2b5b@cb2b53) (set! cb2c75@cb2b6a@&i/o-encoding-rcd cb2b6a@&i/o-encoding-rcd) (set! cb2b70@cb2b6b (make-record-type-descriptor '&no-infinities cb29fc@cb29f7 'cb2b6e '#f '#f '#())) (set! cb2c76@cb2b70@cb2b6b cb2b70@cb2b6b) (set! cb2b72@cb2b6d '#f) (set! cb2c77@cb2b72@cb2b6d cb2b72@cb2b6d) (set! cb2b74@cb2b6c (make-record-constructor-descriptor cb2b70@cb2b6b cb2a00@cb29f8 cb2b72@cb2b6d)) (set! cb2c78@cb2b74@cb2b6c cb2b74@cb2b6c) (set! cb2b77@p? (record-predicate cb2b70@cb2b6b)) (set! cb2c79@cb2b77@p? cb2b77@p?) (set! cb2b79@make-no-infinities-violation (record-constructor cb2b74@cb2b6c)) (set! cb2c7a@cb2b79@make-no-infinities-violation cb2b79@make-no-infinities-violation) (set! cb2b7b@no-infinities-violation? (condition-predicate cb2b70@cb2b6b)) (set! cb2c7b@cb2b7b@no-infinities-violation? cb2b7b@no-infinities-violation?) (set! cb2b7d@&no-infinities-rtd cb2b70@cb2b6b) (set! cb2c7c@cb2b7d@&no-infinities-rtd cb2b7d@&no-infinities-rtd) (set! cb2b7f@&no-infinities-rcd cb2b74@cb2b6c) (set! cb2c7d@cb2b7f@&no-infinities-rcd cb2b7f@&no-infinities-rcd) (set! cb2b85@cb2b80 (make-record-type-descriptor '&no-nans cb29fc@cb29f7 'cb2b83 '#f '#f '#())) (set! cb2c7e@cb2b85@cb2b80 cb2b85@cb2b80) (set! cb2b87@cb2b82 '#f) (set! cb2c7f@cb2b87@cb2b82 cb2b87@cb2b82) (set! cb2b89@cb2b81 (make-record-constructor-descriptor cb2b85@cb2b80 cb2a00@cb29f8 cb2b87@cb2b82)) (set! cb2c80@cb2b89@cb2b81 cb2b89@cb2b81) (set! cb2b8c@p? (record-predicate cb2b85@cb2b80)) (set! cb2c81@cb2b8c@p? cb2b8c@p?) (set! cb2b8e@make-no-nans-violation (record-constructor cb2b89@cb2b81)) (set! cb2c82@cb2b8e@make-no-nans-violation cb2b8e@make-no-nans-violation) (set! cb2b90@no-nans-violation? (condition-predicate cb2b85@cb2b80)) (set! cb2c83@cb2b90@no-nans-violation? cb2b90@no-nans-violation?) (set! cb2b92@&no-nans-rtd cb2b85@cb2b80) (set! cb2c84@cb2b92@&no-nans-rtd cb2b92@&no-nans-rtd) (set! cb2b94@&no-nans-rcd cb2b89@cb2b81) (set! cb2c85@cb2b94@&no-nans-rcd cb2b94@&no-nans-rcd) (void))
(begin (begin (cb71b@cb6d0@current-primitive-locations (lambda (cb314c@x) (let ((cb314e@t (assq cb314c@x '((&no-nans-rcd . cb2c85@cb2b94@&no-nans-rcd) (&no-nans-rtd . cb2c84@cb2b92@&no-nans-rtd) (&no-infinities-rcd . cb2c7d@cb2b7f@&no-infinities-rcd) (&no-infinities-rtd . cb2c7c@cb2b7d@&no-infinities-rtd) (&i/o-encoding-rcd . cb2c75@cb2b6a@&i/o-encoding-rcd) (&i/o-encoding-rtd . cb2c74@cb2b68@&i/o-encoding-rtd) (&i/o-decoding-rcd . cb2c6b@cb2b4f@&i/o-decoding-rcd) (&i/o-decoding-rtd . cb2c6a@cb2b4d@&i/o-decoding-rtd) (&i/o-port-rcd . cb2c63@cb2b3a@&i/o-port-rcd) (&i/o-port-rtd . cb2c62@cb2b38@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . cb2c59@cb2b1f@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . cb2c58@cb2b1d@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . cb2c51@cb2b0a@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . cb2c50@cb2b08@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . cb2c49@cb2af5@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . cb2c48@cb2af3@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . cb2c41@cb2ae0@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . cb2c40@cb2ade@&i/o-file-protection-rtd) (&i/o-filename-rcd . cb2c39@cb2acb@&i/o-filename-rcd) (&i/o-filename-rtd . cb2c38@cb2ac9@&i/o-filename-rtd) (&i/o-invalid-position-rcd . cb2c2f@cb2ab0@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . cb2c2e@cb2aae@&i/o-invalid-position-rtd) (&i/o-write-rcd . cb2c25@cb2a95@&i/o-write-rcd) (&i/o-write-rtd . cb2c24@cb2a93@&i/o-write-rtd) (&i/o-read-rcd . cb2c1d@cb2a80@&i/o-read-rcd) (&i/o-read-rtd . cb2c1c@cb2a7e@&i/o-read-rtd) (&i/o-rcd . cb2c15@cb2a6b@&i/o-rcd) (&i/o-rtd . cb2c14@cb2a69@&i/o-rtd) (&undefined-rcd . cb2c0d@cb2a56@&undefined-rcd) (&undefined-rtd . cb2c0c@cb2a54@&undefined-rtd) (&syntax-rcd . cb2c05@cb2a41@&syntax-rcd) (&syntax-rtd . cb2c04@cb2a3f@&syntax-rtd) (&lexical-rcd . cb2bf9@cb2a20@&lexical-rcd) (&lexical-rtd . cb2bf8@cb2a1e@&lexical-rtd) (&implementation-restriction-rcd . cb2bf1@cb2a0b@&implementation-restriction-rcd) (&implementation-restriction-rtd . cb2bf0@cb2a09@&implementation-restriction-rtd) (&non-continuable-rcd . cb2be9@cb29f6@&non-continuable-rcd) (&non-continuable-rtd . cb2be8@cb29f4@&non-continuable-rtd) (&who-rcd . cb2be1@cb29e1@&who-rcd) (&who-rtd . cb2be0@cb29df@&who-rtd) (&irritants-rcd . cb2bd7@cb29c6@&irritants-rcd) (&irritants-rtd . cb2bd6@cb29c4@&irritants-rtd) (&assertion-rcd . cb2bcd@cb29ab@&assertion-rcd) (&assertion-rtd . cb2bcc@cb29a9@&assertion-rtd) (&violation-rcd . cb2bc5@cb2996@&violation-rcd) (&violation-rtd . cb2bc4@cb2994@&violation-rtd) (&error-rcd . cb2bbd@cb2981@&error-rcd) (&error-rtd . cb2bbc@cb297f@&error-rtd) (&serious-rcd . cb2bb5@cb296c@&serious-rcd) (&serious-rtd . cb2bb4@cb296a@&serious-rtd) (&warning-rcd . cb2bad@cb2957@&warning-rcd) (&warning-rtd . cb2bac@cb2955@&warning-rtd) (&message-rcd . cb2ba5@cb2942@&message-rcd) (&message-rtd . cb2ba4@cb2940@&message-rtd) (&condition-rcd . cb2b9b@cb28e3@&condition-rcd) (&condition-rtd . cb2b9a@cb28e1@&condition-rtd) (syntax-error . cb28bd@cbe61@syntax-error) (syntax-dispatch . cb285b@cbd85@syntax-dispatch) (load . cb2ded@cb2ca3@load) (interaction-environment . cb28c6@cbe73@interaction-environment) (library-path . cb982@cb7be@library-path) (mosh-cache-dir . cb6c9@cb5a8@mosh-cache-dir) (make-parameter . cb6c8@cb5a6@make-parameter) (make-variable-transformer . cb2818@cbbb0@make-variable-transformer) (identifier? . cb28c0@cbe67@identifier?) (generate-temporaries . cb28b6@cbe53@generate-temporaries) (free-identifier=? . cb28b7@cbe55@free-identifier=?) (syntax->datum . cb28c2@cbe6b@syntax->datum) (datum->syntax . cb28c1@cbe69@datum->syntax) (bound-identifier=? . cb28b8@cbe57@bound-identifier=?) (make-i/o-write-error . cb2c22@cb2a8f@make-i/o-write-error) (make-i/o-read-error . cb2c1a@cb2a7a@make-i/o-read-error) (make-i/o-port-error . cb2c5e@cb2b30@make-i/o-port-error) (make-i/o-invalid-position-error . cb2c2a@cb2aa6@make-i/o-invalid-position-error) (make-i/o-filename-error . cb2c34@cb2ac1@make-i/o-filename-error) (make-i/o-file-protection-error . cb2c3e@cb2ada@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . cb2c46@cb2aef@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . cb2c56@cb2b19@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . cb2c4e@cb2b04@make-i/o-file-already-exists-error) (make-i/o-error . cb2c12@cb2a65@make-i/o-error) (make-i/o-encoding-error . cb2c70@cb2b60@make-i/o-encoding-error) (make-i/o-decoding-error . cb2c68@cb2b49@make-i/o-decoding-error) (i/o-write-error? . cb2c23@cb2a91@i/o-write-error?) (i/o-read-error? . cb2c1b@cb2a7c@i/o-read-error?) (i/o-port-error? . cb2c60@cb2b34@i/o-port-error?) (i/o-invalid-position-error? . cb2c2c@cb2aaa@i/o-invalid-position-error?) (i/o-filename-error? . cb2c36@cb2ac5@i/o-filename-error?) (i/o-file-protection-error? . cb2c3f@cb2adc@i/o-file-protection-error?) (i/o-file-is-read-only-error? . cb2c47@cb2af1@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . cb2c57@cb2b1b@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . cb2c4f@cb2b06@i/o-file-already-exists-error?) (i/o-error? . cb2c13@cb2a67@i/o-error?) (i/o-error-position . cb2c2d@cb2aac@i/o-error-position) (i/o-error-port . cb2c61@cb2b36@i/o-error-port) (i/o-error-filename . cb2c37@cb2ac7@i/o-error-filename) (i/o-encoding-error? . cb2c72@cb2b64@i/o-encoding-error?) (i/o-encoding-error-char . cb2c73@cb2b66@i/o-encoding-error-char) (i/o-decoding-error? . cb2c69@cb2b4b@i/o-decoding-error?) (scheme-report-environment . cb28ad@cbe41@scheme-report-environment) (null-environment . cb28ac@cbe3f@null-environment) (command-line . cb2dea@cb2c9d@command-line) (eval . cb28af@cbe45@eval) (environment . cb28ab@cbe3d@environment) (who-condition? . cb2bde@cb29db@who-condition?) (warning? . cb2bab@cb2953@warning?) (violation? . cb2bc3@cb2992@violation?) (undefined-violation? . cb2c0b@cb2a52@undefined-violation?) (syntax-violation? . cb2c01@cb2a39@syntax-violation?) (syntax-violation-subform . cb2c03@cb2a3d@syntax-violation-subform) (syntax-violation-form . cb2c02@cb2a3b@syntax-violation-form) (syntax-violation . cb28bf@cbe65@syntax-violation) (serious-condition? . cb2bb3@cb2968@serious-condition?) (non-continuable-violation? . cb2be7@cb29f2@non-continuable-violation?) (message-condition? . cb2ba2@cb293c@message-condition?) (make-who-condition . cb2bdc@cb29d7@make-who-condition) (make-warning . cb2baa@cb2951@make-warning) (make-violation . cb2bc2@cb2990@make-violation) (make-undefined-violation . cb2c0a@cb2a50@make-undefined-violation) (make-syntax-violation . cb2bfe@cb2a33@make-syntax-violation) (make-serious-condition . cb2bb2@cb2966@make-serious-condition) (make-non-continuable-violation . cb2be6@cb29f0@make-non-continuable-violation) (make-message-condition . cb2ba0@cb2938@make-message-condition) (make-lexical-violation . cb2bf6@cb2a1a@make-lexical-violation) (make-irritants-condition . cb2bd2@cb29bc@make-irritants-condition) (make-implementation-restriction-violation . cb2bee@cb2a05@make-implementation-restriction-violation) (make-error . cb2bba@cb297b@make-error) (make-assertion-violation . cb2bca@cb29a5@make-assertion-violation) (lexical-violation? . cb2bf7@cb2a1c@lexical-violation?) (irritants-condition? . cb2bd4@cb29c0@irritants-condition?) (implementation-restriction-violation? . cb2bef@cb2a07@implementation-restriction-violation?) (error? . cb2bbb@cb297d@error?) (condition-who . cb2bdf@cb29dd@condition-who) (condition-message . cb2ba3@cb293e@condition-message) (condition-irritants . cb2bd5@cb29c2@condition-irritants) (assertion-violation? . cb2bcb@cb29a7@assertion-violation?) (no-nans-violation? . cb2c83@cb2b90@no-nans-violation?) (no-infinities-violation? . cb2c7b@cb2b7b@no-infinities-violation?) (make-no-nans-violation . cb2c82@cb2b8e@make-no-nans-violation) (make-no-infinities-violation . cb2c7a@cb2b79@make-no-infinities-violation) (assertion-error . cb28bc@cbe5f@assertion-error))))) (if cb314e@t (cdr cb314e@t) '#f)))) (cb992@cb7de@install-library 'cb3129 '(mosh interaction) '() '() '() '() '((regexp? . cb3121) (alist->eq-hash-table . cb311d) (format . cb311a) (string-split . cb310e) (call-process . cb3108) (set-current-directory! . cb3104) (expand-path . cb3103) (current-directory . cb3102) (%spawn . cb3101) (%waitpid . cb3100) (simple-struct-name . cb30ff) (simple-struct-set! . cb30fe) (simple-struct-ref . cb30fd) (make-simple-struct . cb30fc) (simple-struct? . cb30fb) (pointer-ref-c-int64 . cb30fa) (pointer-ref-c-int32 . cb30f9) (pointer-ref-c-int16 . cb30f8) (pointer-ref-c-int8 . cb30f7) (pointer-ref-c-uint64 . cb30f6) (pointer-ref-c-uint32 . cb30f5) (pointer-ref-c-uint16 . cb30f4) (pointer-ref-c-uint8 . cb30f3) (pointer-set-c-uint64! . cb30f2) (pointer-set-c-uint32! . cb30f1) (pointer-set-c-uint16! . cb30f0) (pointer-set-c-uint8! . cb30ef) (pointer-set-c-int64! . cb30ee) (pointer-set-c-int32! . cb30ed) (pointer-set-c-int16! . cb30ec) (pointer-set-c-int8! . cb30eb) (pointer-set-c-pointer! . cb30ea) (pointer-set-c-double! . cb30e9) (pointer-set-c-float! . cb30e8) (pointer-set-c-long-long! . cb30e7) (pointer-set-c-long! . cb30e6) (pointer-set-c-int! . cb30e5) (pointer-set-c-short! . cb30e4) (pointer-set-c-char! . cb30e3) (pointer-ref-c-pointer . cb30e2) (pointer-ref-c-double . cb30e1) (pointer-ref-c-float . cb30e0) (pointer-ref-c-unsigned-long-long . cb30df) (pointer-ref-c-signed-long-long . cb30de) (pointer-ref-c-unsigned-long . cb30dd) (pointer-ref-c-signed-long . cb30dc) (pointer-ref-c-unsigned-int . cb30db) (pointer-ref-c-signed-int . cb30da) (pointer-ref-c-unsigned-short . cb30d9) (pointer-ref-c-signed-short . cb30d8) (pointer-ref-c-unsigned-char . cb30d7) (pointer-ref-c-signed-char . cb30d6) (pointer->integer . cb30d5) (integer->pointer . cb30d4) (pointer? . cb30d3) (shared-errno . cb30d2) (%ffi-supported? . cb30ca) (%ffi-pointer->string . cb30c9) (%ffi-call . cb30c8) (%ffi-lookup . cb30c7) (%ffi-open . cb30c6) (null-terminated-utf8->string . cb30c5) (null-terminated-bytevector->string . cb30c4) (%fork . cb30c3) (%pipe . cb30c2) (p . cb30c1) (whereis . cb30a5) (register . cb30a4) (vm-join! . cb30a3) (vm-set-value! . cb30a2) (vm? . cb30a1) (main-vm? . cb30a0) (vm-eval . cb309f) (vm-self . cb309e) (vm-start! . cb309d) (make-vm . cb309c) (mutex-try-lock! . cb309b) (mutex-unlock! . cb309a) (mutex-lock! . cb3099) (mutex? . cb3098) (make-mutex . cb3097) (condition-variable-notify-all! . cb3096) (condition-variable-notify! . cb3095) (condition-variable-wait! . cb3094) (make-condition-variable . cb3093) (string-upcase . cb3076) (string-titlecase . cb3075) (string-normalize-nfkd . cb3074) (string-normalize-nfkc . cb3073) (string-normalize-nfd . cb3072) (string-normalize-nfc . cb3071) (string-foldcase . cb3070) (string-downcase . cb306f) (string-ci>? . cb306e) (string-ci>=? . cb306d) (string-ci=? . cb306c) (string-ci<? . cb306b) (string-ci<=? . cb306a) (char-whitespace? . cb3069) (char-upper-case? . cb3068) (char-title-case? . cb3067) (char-numeric? . cb3066) (char-lower-case? . cb3065) (char-general-category . cb3064) (char-upcase . cb3063) (char-titlecase . cb3062) (char-foldcase . cb3061) (char-downcase . cb3060) (char-ci>? . cb305f) (char-ci>=? . cb305e) (char-ci=? . cb305d) (char-ci<? . cb305c) (char-ci<=? . cb305b) (char-alphabetic? . cb305a) (make-variable-transformer . cbbaf) (identifier? . cbe66) (generate-temporaries . cbe52) (free-identifier=? . cbe54) (syntax->datum . cbe6a) (datum->syntax . cbe68) (bound-identifier=? . cbe56) (record-type-descriptor? . cb3059) (record-predicate . cb3058) (record-mutator . cb3057) (record-constructor . cb3056) (record-accessor . cb3055) (make-record-type-descriptor . cb3054) (make-record-constructor-descriptor . cb3053) (record? . cb3052) (record-type-uid . cb3051) (record-type-sealed? . cb3050) (record-type-parent . cb304f) (record-type-opaque? . cb304e) (record-type-name . cb304d) (record-type-generative? . cb304c) (record-type-field-names . cb304b) (record-rtd . cb304a) (record-field-mutable? . cb3049) (delete-file . cb3048) (file-exists? . cb3047) (vector-sort! . cb3046) (vector-sort . cb3045) (list-sort . cb3044) (symbol-hash . cb3043) (string-ci-hash . cb3042) (string-hash . cb3041) (equal-hash . cb3040) (hashtable-equivalence-function . cb303f) (make-hashtable . cb303e) (hashtable-hash-function . cb303d) (make-eqv-hashtable . cb303c) (make-eq-hashtable . cb303b) (hashtable? . cb303a) (hashtable-update! . cb3039) (hashtable-size . cb3038) (hashtable-set! . cb3037) (hashtable-ref . cb3036) (hashtable-mutable? . cb3035) (hashtable-keys . cb3034) (hashtable-entries . cb3033) (hashtable-delete! . cb3032) (hashtable-copy . cb3031) (hashtable-contains? . cb3030) (hashtable-clear! . cb302f) (call-with-output-file . cb302e) (call-with-input-file . cb302d) (write-char . cb302c) (write . cb302b) (with-output-to-file . cb302a) (with-input-from-file . cb3029) (read-char . cb3028) (read . cb3027) (peek-char . cb3026) (open-output-file . cb3025) (open-input-file . cb3024) (newline . cb3023) (display . cb3022) (close-output-port . cb3021) (close-input-port . cb3020) (eof-object? . cb301f) (eof-object . cb301e) (current-error-port . cb301d) (current-output-port . cb301c) (current-input-port . cb301b) (output-port? . cb301a) (input-port? . cb3019) (utf-8-codec . cb3018) (utf-16-codec . cb3017) (transcoder-error-handling-mode . cb3016) (transcoder-eol-style . cb3015) (transcoder-codec . cb3014) (transcoded-port . cb3013) (textual-port? . cb3012) (string->bytevector . cb3011) (standard-output-port . cb3010) (standard-input-port . cb300f) (standard-error-port . cb300e) (set-port-position! . cb300d) (put-u8 . cb300c) (put-string . cb300b) (put-datum . cb300a) (put-char . cb3009) (put-bytevector . cb3008) (port? . cb3007) (port-transcoder . cb3006) (port-position . cb3005) (port-has-set-port-position!? . cb3004) (port-has-port-position? . cb3003) (port-eof? . cb3002) (output-port-buffer-mode . cb3001) (open-string-output-port . cb3000) (open-string-input-port . cb2fff) (open-file-output-port . cb2ffe) (open-file-input/output-port . cb2ffd) (open-file-input-port . cb2ffc) (open-bytevector-output-port . cb2ffb) (open-bytevector-input-port . cb2ffa) (native-transcoder . cb2ff9) (native-eol-style . cb2ff8) (make-transcoder . cb2ff7) (latin-1-codec . cb2ff6) (make-i/o-write-error . cb2a8e) (make-i/o-read-error . cb2a79) (make-i/o-port-error . cb2b2f) (make-i/o-invalid-position-error . cb2aa5) (make-i/o-filename-error . cb2ac0) (make-i/o-file-protection-error . cb2ad9) (make-i/o-file-is-read-only-error . cb2aee) (make-i/o-file-does-not-exist-error . cb2b18) (make-i/o-file-already-exists-error . cb2b03) (make-i/o-error . cb2a64) (make-i/o-encoding-error . cb2b5f) (make-i/o-decoding-error . cb2b48) (make-custom-textual-output-port . cb2ff5) (make-custom-textual-input/output-port . cb2ff4) (make-custom-textual-input-port . cb2ff3) (make-custom-binary-output-port . cb2ff2) (make-custom-binary-input/output-port . cb2ff1) (make-custom-binary-input-port . cb2ff0) (make-bytevector . cb2fef) (lookahead-u8 . cb2fee) (lookahead-char . cb2fed) (i/o-write-error? . cb2a90) (i/o-read-error? . cb2a7b) (i/o-port-error? . cb2b33) (i/o-invalid-position-error? . cb2aa9) (i/o-filename-error? . cb2ac4) (i/o-file-protection-error? . cb2adb) (i/o-file-is-read-only-error? . cb2af0) (i/o-file-does-not-exist-error? . cb2b1a) (i/o-file-already-exists-error? . cb2b05) (i/o-error? . cb2a66) (i/o-error-position . cb2aab) (i/o-error-port . cb2b35) (i/o-error-filename . cb2ac6) (i/o-encoding-error? . cb2b63) (i/o-encoding-error-char . cb2b65) (i/o-decoding-error? . cb2b4a) (get-u8 . cb2fec) (get-string-n! . cb2feb) (get-string-n . cb2fea) (get-string-all . cb2fe9) (get-line . cb2fe8) (get-datum . cb2fe7) (get-char . cb2fe6) (get-bytevector-some . cb2fe5) (get-bytevector-n! . cb2fe4) (get-bytevector-n . cb2fe3) (get-bytevector-all . cb2fe2) (flush-output-port . cb2fe1) (close-port . cb2fe0) (exit . cb2fd8) (command-line . cb2c9c) (string-fill! . cb2fd7) (string-set! . cb2fd6) (set-cdr! . cb2fd5) (set-car! . cb2fd4) (remove . cb2fd3) (remv . cb2fd2) (remp . cb2fd1) (remq . cb2fd0) (partition . cb2fcf) (memv . cb2fce) (memq . cb2fcd) (memp . cb2fcc) (member . cb2fcb) (exists . cb2fca) (for-all . cb2fc9) (fold-right . cb2fc8) (fold-left . cb2fc7) (find . cb2fc6) (filter . cb2fc5) (cons* . cb2fc4) (assv . cb2fc3) (assq . cb2fc2) (assp . cb2fc1) (assoc . cb2fc0) (call-with-string-output-port . cb2fbf) (call-with-port . cb2fbe) (call-with-bytevector-output-port . cb2fbd) (bytevector->string . cb2fbc) (buffer-mode? . cb2fbb) (binary-port? . cb2fba) (with-exception-handler . cb2fb9) (raise-continuable . cb2fb8) (raise . cb2fb7) (eval . cbe44) (environment . cbe3c) (make-enumeration . cb2fb6) (enum-set=? . cb2fb5) (enum-set-universe . cb2fb4) (enum-set-union . cb2fb3) (enum-set-subset? . cb2fb2) (enum-set-projection . cb2fb1) (enum-set-member? . cb2fb0) (enum-set-intersection . cb2faf) (enum-set-indexer . cb2fae) (enum-set-difference . cb2fad) (enum-set-constructor . cb2fac) (enum-set-complement . cb2fab) (enum-set->list . cb2faa) (who-condition? . cb29da) (warning? . cb2952) (violation? . cb2991) (undefined-violation? . cb2a51) (syntax-violation? . cb2a38) (syntax-violation-subform . cb2a3c) (syntax-violation-form . cb2a3a) (syntax-violation . cbe64) (simple-conditions . cb2fa9) (serious-condition? . cb2967) (non-continuable-violation? . cb29f1) (message-condition? . cb293b) (make-who-condition . cb29d6) (make-warning . cb2950) (make-violation . cb298f) (make-undefined-violation . cb2a4f) (make-syntax-violation . cb2a32) (make-serious-condition . cb2965) (make-non-continuable-violation . cb29ef) (make-message-condition . cb2937) (make-lexical-violation . cb2a19) (make-irritants-condition . cb29bb) (make-implementation-restriction-violation . cb2a04) (make-error . cb297a) (make-assertion-violation . cb29a4) (lexical-violation? . cb2a1b) (irritants-condition? . cb29bf) (implementation-restriction-violation? . cb2a06) (error? . cb297c) (condition-who . cb29dc) (condition-predicate . cb2fa8) (condition-message . cb293d) (condition-irritants . cb29c1) (condition-accessor . cb2fa7) (condition . cb2fa6) (assertion-violation? . cb29a6) (condition? . cb2fa5) (utf32->string . cb2fa4) (utf16->string . cb2fa3) (utf8->string . cb2fa2) (uint-list->bytevector . cb2fa1) (u8-list->bytevector . cb2fa0) (string->utf8 . cb2f9f) (string->utf32 . cb2f9e) (string->utf16 . cb2f9d) (sint-list->bytevector . cb2f9c) (native-endianness . cb2f9b) (bytevector? . cb2f9a) (bytevector=? . cb2f99) (bytevector-uint-set! . cb2f98) (bytevector-uint-ref . cb2f97) (bytevector-u8-set! . cb2f96) (bytevector-u8-ref . cb2f95) (bytevector-u64-set! . cb2f94) (bytevector-u64-ref . cb2f93) (bytevector-u64-native-set! . cb2f92) (bytevector-u64-native-ref . cb2f91) (bytevector-u32-set! . cb2f90) (bytevector-u32-ref . cb2f8f) (bytevector-u32-native-set! . cb2f8e) (bytevector-u32-native-ref . cb2f8d) (bytevector-u16-set! . cb2f8c) (bytevector-u16-ref . cb2f8b) (bytevector-u16-native-set! . cb2f8a) (bytevector-u16-native-ref . cb2f89) (bytevector-sint-set! . cb2f88) (bytevector-sint-ref . cb2f87) (bytevector-s8-set! . cb2f86) (bytevector-s8-ref . cb2f85) (bytevector-s64-set! . cb2f84) (bytevector-s64-ref . cb2f83) (bytevector-s64-native-set! . cb2f82) (bytevector-s64-native-ref . cb2f81) (bytevector-s32-set! . cb2f80) (bytevector-s32-ref . cb2f7f) (bytevector-s32-native-set! . cb2f7e) (bytevector-s32-native-ref . cb2f7d) (bytevector-s16-set! . cb2f7c) (bytevector-s16-ref . cb2f7b) (bytevector-s16-native-set! . cb2f7a) (bytevector-s16-native-ref . cb2f79) (bytevector-length . cb2f78) (bytevector-ieee-single-ref . cb2f77) (bytevector-ieee-single-set! . cb2f76) (bytevector-ieee-single-native-set! . cb2f75) (bytevector-ieee-single-native-ref . cb2f74) (bytevector-ieee-double-set! . cb2f73) (bytevector-ieee-double-ref . cb2f72) (bytevector-ieee-double-native-set! . cb2f71) (bytevector-ieee-double-native-ref . cb2f70) (bytevector-fill! . cb2f6f) (bytevector-copy! . cb2f6e) (bytevector-copy . cb2f6d) (bytevector->uint-list . cb2f6c) (bytevector->u8-list . cb2f6b) (bytevector->sint-list . cb2f6a) (no-nans-violation? . cb2b8f) (no-infinities-violation? . cb2b7a) (make-no-nans-violation . cb2b8d) (make-no-infinities-violation . cb2b78) (real->flonum . cb2f69) (flzero? . cb2f68) (fltruncate . cb2f67) (fltan . cb2f66) (flsqrt . cb2f65) (flsin . cb2f64) (flround . cb2f63) (flpositive? . cb2f62) (flonum? . cb2f61) (flodd? . cb2f60) (flnumerator . cb2f5f) (flnegative? . cb2f5e) (flnan? . cb2f5d) (flmod0 . cb2f5c) (flmod . cb2f5b) (flmin . cb2f5a) (flmax . cb2f59) (fllog . cb2f58) (flinteger? . cb2f57) (flinfinite? . cb2f56) (flfloor . cb2f55) (flfinite? . cb2f54) (flexpt . cb2f53) (flexp . cb2f52) (fleven? . cb2f51) (fldiv0-and-mod0 . cb2f50) (fldiv0 . cb2f4f) (fldiv-and-mod . cb2f4e) (fldiv . cb2f4d) (fldenominator . cb2f4c) (flcos . cb2f4b) (flceiling . cb2f4a) (flatan . cb2f49) (flasin . cb2f48) (flacos . cb2f47) (flabs . cb2f46) (fl>? . cb2f45) (fl>=? . cb2f44) (fl=? . cb2f43) (fl<? . cb2f42) (fl<=? . cb2f41) (fl/ . cb2f40) (fl- . cb2f3f) (fl+ . cb2f3e) (fl* . cb2f3d) (fixnum->flonum . cb2f3c) (fxzero? . cb2f3b) (fxxor . cb2f3a) (fxrotate-bit-field . cb2f39) (fxreverse-bit-field . cb2f38) (fxpositive? . cb2f37) (fxodd? . cb2f36) (fxnot . cb2f35) (fxnegative? . cb2f34) (fxmod0 . cb2f33) (fxmod . cb2f32) (fxmin . cb2f31) (fxmax . cb2f30) (fxlength . cb2f2f) (fxior . cb2f2e) (fxif . cb2f2d) (fxfirst-bit-set . cb2f2c) (fxeven? . cb2f2b) (fxdiv0-and-mod0 . cb2f2a) (fxdiv0 . cb2f29) (fxdiv-and-mod . cb2f28) (fxdiv . cb2f27) (fxcopy-bit-field . cb2f26) (fxcopy-bit . cb2f25) (fxbit-set? . cb2f24) (fxbit-field . cb2f23) (fxbit-count . cb2f22) (fxarithmetic-shift-right . cb2f21) (fxarithmetic-shift-left . cb2f20) (fxarithmetic-shift . cb2f1f) (fxand . cb2f1e) (fx>? . cb2f1d) (fx>=? . cb2f1c) (fx=? . cb2f1b) (fx<? . cb2f1a) (fx<=? . cb2f19) (fx-/carry . cb2f18) (fx- . cb2f17) (fx+/carry . cb2f16) (fx+ . cb2f15) (fx*/carry . cb2f14) (fx* . cb2f13) (greatest-fixnum . cb2f12) (least-fixnum . cb2f11) (fixnum-width . cb2f10) (fixnum? . cb2f0f) (bitwise-rotate-bit-field . cb2f0e) (bitwise-reverse-bit-field . cb2f0d) (bitwise-length . cb2f0c) (bitwise-if . cb2f0b) (bitwise-first-bit-set . cb2f0a) (bitwise-copy-bit-field . cb2f09) (bitwise-copy-bit . cb2f08) (bitwise-bit-set? . cb2f07) (bitwise-bit-field . cb2f06) (bitwise-bit-count . cb2f05) (bitwise-xor . cb2f04) (bitwise-ior . cb2f03) (bitwise-and . cb2f02) (bitwise-not . cb2f01) (bitwise-arithmetic-shift-right . cb2f00) (bitwise-arithmetic-shift-left . cb2eff) (bitwise-arithmetic-shift . cb2efe) (zero? . cb2efd) (vector? . cb2efc) (vector-set! . cb2efb) (vector-ref . cb2efa) (vector-map . cb2ef9) (vector-length . cb2ef8) (vector-for-each . cb2ef7) (vector-fill! . cb2ef6) (vector->list . cb2ef5) (vector . cb2ef4) (values . cb2ef3) (truncate . cb2ef2) (tan . cb2ef1) (symbol? . cb2ef0) (symbol=? . cb2eef) (symbol->string . cb2eee) (substring . cb2eed) (string? . cb2eec) (string>? . cb2eeb) (string>=? . cb2eea) (string=? . cb2ee9) (string<? . cb2ee8) (string<=? . cb2ee7) (string-ref . cb2ee6) (string-length . cb2ee5) (string-for-each . cb2ee4) (string-copy . cb2ee3) (string-append . cb2ee2) (string->symbol . cb2ee1) (string->number . cb2ee0) (string->list . cb2edf) (string . cb2ede) (sqrt . cb2edd) (sin . cb2edc) (round . cb2edb) (reverse . cb2eda) (real? . cb2ed9) (real-valued? . cb2ed8) (real-part . cb2ed7) (rationalize . cb2ed6) (rational? . cb2ed5) (rational-valued? . cb2ed4) (procedure? . cb2ed3) (positive? . cb2ed2) (pair? . cb2ed1) (odd? . cb2ed0) (numerator . cb2ecf) (number? . cb2ece) (number->string . cb2ecd) (null? . cb2ecc) (not . cb2ecb) (negative? . cb2eca) (nan? . cb2ec9) (min . cb2ec8) (max . cb2ec7) (map . cb2ec6) (make-vector . cb2ec5) (make-string . cb2ec4) (make-rectangular . cb2ec3) (make-polar . cb2ec2) (magnitude . cb2ec1) (log . cb2ec0) (list? . cb2ebf) (list-tail . cb2ebe) (list-ref . cb2ebd) (list->vector . cb2ebc) (list->string . cb2ebb) (list . cb2eba) (length . cb2eb9) (lcm . cb2eb8) (integer? . cb2eb7) (integer-valued? . cb2eb6) (integer->char . cb2eb5) (infinite? . cb2eb4) (inexact? . cb2eb3) (inexact . cb2eb2) (imag-part . cb2eb1) (gcd . cb2eb0) (for-each . cb2eaf) (floor . cb2eae) (finite? . cb2ead) (expt . cb2eac) (exp . cb2eab) (exact? . cb2eaa) (exact-integer-sqrt . cb2ea9) (exact . cb2ea8) (even? . cb2ea7) (error . cb2ea6) (eqv? . cb2ea5) (equal? . cb2ea4) (eq? . cb2ea3) (dynamic-wind . cb2ea2) (div0-and-mod0 . cb2ea1) (mod0 . cb2ea0) (div0 . cb2e9f) (div-and-mod . cb2e9e) (mod . cb2e9d) (div . cb2e9c) (denominator . cb2e9b) (cos . cb2e9a) (cons . cb2e99) (complex? . cb2e98) (char? . cb2e97) (char>? . cb2e96) (char>=? . cb2e95) (char=? . cb2e94) (char<? . cb2e93) (char<=? . cb2e92) (char->integer . cb2e91) (ceiling . cb2e90) (call-with-values . cb2e8f) (call/cc . cb2e8e) (call-with-current-continuation . cb2e8d) (cddddr . cb2e8c) (cdddar . cb2e8b) (cddadr . cb2e8a) (cddaar . cb2e89) (cdaddr . cb2e88) (cdadar . cb2e87) (cdaadr . cb2e86) (cdaaar . cb2e85) (cadddr . cb2e84) (caddar . cb2e83) (cadadr . cb2e82) (cadaar . cb2e81) (caaddr . cb2e80) (caadar . cb2e7f) (caaadr . cb2e7e) (caaaar . cb2e7d) (cdddr . cb2e7c) (cddar . cb2e7b) (cdadr . cb2e7a) (cdaar . cb2e79) (caddr . cb2e78) (cadar . cb2e77) (caadr . cb2e76) (caaar . cb2e75) (cddr . cb2e74) (cdar . cb2e73) (cadr . cb2e72) (caar . cb2e71) (cdr . cb2e70) (car . cb2e6f) (boolean? . cb2e6e) (boolean=? . cb2e6d) (atan . cb2e6c) (assertion-violation . cb2e6b) (asin . cb2e6a) (apply . cb2e69) (append . cb2e68) (angle . cb2e67) (acos . cb2e66) (abs . cb2e65) (/ . cb2e64) (* . cb2e63) (- . cb2e62) (+ . cb2e61) (>= . cb2e60) (> . cb2e5f) (= . cb2e5e) (<= . cb2e5d) (< . cb2e5c) (library . cb2e5b) (&no-nans . cb2e5a) (&no-infinities . cb2e59) (&i/o-encoding . cb2e58) (&i/o-decoding . cb2e57) (&i/o-port . cb2e56) (&i/o-file-does-not-exist . cb2e55) (&i/o-file-already-exists . cb2e54) (&i/o-file-is-read-only . cb2e53) (&i/o-file-protection . cb2e52) (&i/o-filename . cb2e51) (&i/o-invalid-position . cb2e50) (&i/o-write . cb2e4f) (&i/o-read . cb2e4e) (&i/o . cb2e4d) (&undefined . cb2e4c) (&syntax . cb2e4b) (&lexical . cb2e4a) (&implementation-restriction . cb2e49) (&non-continuable . cb2e48) (&who . cb2e47) (&irritants . cb2e46) (&assertion . cb2e45) (&violation . cb2e44) (&error . cb2e43) (&serious . cb2e42) (&warning . cb2e41) (&message . cb2e40) (&condition . cb2e3f) (define-condition-type . cb2e3e) (define-enumeration . cb2e3d) (define-record-type . cb2e3c) (parent-rtd . cb2e3b) (nongenerative . cb2e3a) (opaque . cb2e39) (sealed . cb2e38) (protocol . cb2e37) (parent . cb2e36) (immutable . cb2e35) (mutable . cb2e34) (fields . cb2e33) (error-handling-mode . cb2e32) (file-options . cb2e31) (buffer-mode . cb2e30) (eol-style . cb2e2f) (guard . cb2e2e) (unsyntax-splicing . cb2e2b) (unsyntax . cb2e2a) (unquote-splicing . cb2e29) (unquote . cb2e28) (_ . cb2e27) (else . cb2e26) (=> . cb2e25) (... . cb2e24) (assert . cb2e23) (endianness . cb2e22) (time . cb2e20) (do . cb2e1f) (cond . cb2e1e) (let* . cb2e1d) (let*-values . cb2e1c) (let-values . cb2e1b) (identifier-syntax . cb2e1a) (with-syntax . cb2e19) (quasisyntax . cb2e18) (quasiquote . cb2e17) (syntax-rules . cb2e16) (include . cb2e15) (record-constructor-descriptor . cb2e13) (record-type-descriptor . cb2e12) (case . cb2e11) (unless . cb2e0f) (when . cb2e0e) (or . cb2e0d) (and . cb2e0c) (if . cb2e0b) (let . cb2e0a) (letrec* . cb2e09) (letrec . cb2e08) (case-lambda . cb2e06) (lambda . cb2e05) (syntax . cb2e04) (syntax-case . cb2e03) (quote . cb2e02) (letrec-syntax . cb2e00) (let-syntax . cb2dff) (set! . cb2dfe) (import . cb2dfd) (begin . cb2dfc) (define-syntax . cb2dfa) (define . cb2df9)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb312a '(psyntax null-environment-5) '() '() '() '() '((make-promise . cb2fd9) (unquote-splicing . cb2e29) (unquote . cb2e28) (_ . cb2e27) (else . cb2e26) (=> . cb2e25) (... . cb2e24) (delay . cb2e21) (do . cb2e1f) (cond . cb2e1e) (let* . cb2e1d) (quasiquote . cb2e17) (syntax-rules . cb2e16) (case . cb2e11) (or . cb2e0d) (and . cb2e0c) (if . cb2e0b) (let . cb2e0a) (letrec . cb2e08) (lambda . cb2e05) (quote . cb2e02) (letrec-syntax . cb2e00) (let-syntax . cb2dff) (set! . cb2dfe) (begin . cb2dfc) (define-syntax . cb2dfa) (define . cb2df9)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb312b '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . cb306e) (string-ci>=? . cb306d) (string-ci=? . cb306c) (string-ci<? . cb306b) (string-ci<=? . cb306a) (char-whitespace? . cb3069) (char-upper-case? . cb3068) (char-numeric? . cb3066) (char-lower-case? . cb3065) (char-upcase . cb3063) (char-downcase . cb3060) (char-ci>? . cb305f) (char-ci>=? . cb305e) (char-ci=? . cb305d) (char-ci<? . cb305c) (char-ci<=? . cb305b) (char-alphabetic? . cb305a) (call-with-output-file . cb302e) (call-with-input-file . cb302d) (write-char . cb302c) (write . cb302b) (with-output-to-file . cb302a) (with-input-from-file . cb3029) (read-char . cb3028) (read . cb3027) (peek-char . cb3026) (open-output-file . cb3025) (open-input-file . cb3024) (newline . cb3023) (display . cb3022) (close-output-port . cb3021) (close-input-port . cb3020) (eof-object . cb301e) (current-output-port . cb301c) (current-input-port . cb301b) (output-port? . cb301a) (input-port? . cb3019) (scheme-report-environment . cbe40) (quotient . cb2fdf) (null-environment . cbe3e) (remainder . cb2fde) (modulo . cb2fdd) (inexact->exact . cb2fdc) (force . cb2fdb) (exact->inexact . cb2fda) (make-promise . cb2fd9) (string-fill! . cb2fd7) (string-set! . cb2fd6) (set-cdr! . cb2fd5) (set-car! . cb2fd4) (memv . cb2fce) (memq . cb2fcd) (member . cb2fcb) (assv . cb2fc3) (assq . cb2fc2) (assoc . cb2fc0) (eval . cbe44) (zero? . cb2efd) (vector? . cb2efc) (vector-set! . cb2efb) (vector-ref . cb2efa) (vector-length . cb2ef8) (vector-fill! . cb2ef6) (vector->list . cb2ef5) (vector . cb2ef4) (values . cb2ef3) (truncate . cb2ef2) (tan . cb2ef1) (symbol? . cb2ef0) (symbol->string . cb2eee) (substring . cb2eed) (string? . cb2eec) (string>? . cb2eeb) (string>=? . cb2eea) (string=? . cb2ee9) (string<? . cb2ee8) (string<=? . cb2ee7) (string-ref . cb2ee6) (string-length . cb2ee5) (string-copy . cb2ee3) (string-append . cb2ee2) (string->symbol . cb2ee1) (string->number . cb2ee0) (string->list . cb2edf) (string . cb2ede) (sqrt . cb2edd) (sin . cb2edc) (round . cb2edb) (reverse . cb2eda) (real? . cb2ed9) (real-part . cb2ed7) (rationalize . cb2ed6) (rational? . cb2ed5) (procedure? . cb2ed3) (positive? . cb2ed2) (pair? . cb2ed1) (odd? . cb2ed0) (numerator . cb2ecf) (number? . cb2ece) (number->string . cb2ecd) (not . cb2ecb) (negative? . cb2eca) (min . cb2ec8) (max . cb2ec7) (map . cb2ec6) (make-vector . cb2ec5) (make-string . cb2ec4) (make-rectangular . cb2ec3) (make-polar . cb2ec2) (magnitude . cb2ec1) (log . cb2ec0) (list? . cb2ebf) (list-tail . cb2ebe) (list-ref . cb2ebd) (list->vector . cb2ebc) (list->string . cb2ebb) (list . cb2eba) (length . cb2eb9) (lcm . cb2eb8) (integer? . cb2eb7) (integer->char . cb2eb5) (inexact? . cb2eb3) (imag-part . cb2eb1) (gcd . cb2eb0) (for-each . cb2eaf) (floor . cb2eae) (expt . cb2eac) (exp . cb2eab) (exact? . cb2eaa) (even? . cb2ea7) (eqv? . cb2ea5) (equal? . cb2ea4) (eq? . cb2ea3) (dynamic-wind . cb2ea2) (denominator . cb2e9b) (cos . cb2e9a) (cons . cb2e99) (complex? . cb2e98) (char? . cb2e97) (char>? . cb2e96) (char>=? . cb2e95) (char=? . cb2e94) (char<? . cb2e93) (char<=? . cb2e92) (char->integer . cb2e91) (ceiling . cb2e90) (call-with-values . cb2e8f) (call-with-current-continuation . cb2e8d) (cddddr . cb2e8c) (cdddar . cb2e8b) (cddadr . cb2e8a) (cddaar . cb2e89) (cdaddr . cb2e88) (cdadar . cb2e87) (cdaadr . cb2e86) (cdaaar . cb2e85) (cadddr . cb2e84) (caddar . cb2e83) (cadadr . cb2e82) (cadaar . cb2e81) (caaddr . cb2e80) (caadar . cb2e7f) (caaadr . cb2e7e) (caaaar . cb2e7d) (cdddr . cb2e7c) (cddar . cb2e7b) (cdadr . cb2e7a) (cdaar . cb2e79) (caddr . cb2e78) (cadar . cb2e77) (caadr . cb2e76) (caaar . cb2e75) (cddr . cb2e74) (cdar . cb2e73) (cadr . cb2e72) (caar . cb2e71) (cdr . cb2e70) (car . cb2e6f) (boolean? . cb2e6e) (atan . cb2e6c) (asin . cb2e6a) (apply . cb2e69) (append . cb2e68) (angle . cb2e67) (acos . cb2e66) (abs . cb2e65) (/ . cb2e64) (* . cb2e63) (- . cb2e62) (+ . cb2e61) (>= . cb2e60) (> . cb2e5f) (= . cb2e5e) (<= . cb2e5d) (< . cb2e5c) (unquote-splicing . cb2e29) (unquote . cb2e28) (else . cb2e26) (=> . cb2e25) (... . cb2e24) (delay . cb2e21) (do . cb2e1f) (cond . cb2e1e) (let* . cb2e1d) (quasiquote . cb2e17) (syntax-rules . cb2e16) (case . cb2e11) (or . cb2e0d) (and . cb2e0c) (if . cb2e0b) (let . cb2e0a) (letrec . cb2e08) (lambda . cb2e05) (quote . cb2e02) (letrec-syntax . cb2e00) (let-syntax . cb2dff) (set! . cb2dfe) (begin . cb2dfc) (define-syntax . cb2dfa) (define . cb2df9)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb312c '(psyntax modules) '() '() '() '() '((module . cb2dfb)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb312d '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb312e '(rnrs) '(6) '() '() '() '((regexp? . cb3121) (string-upcase . cb3076) (string-titlecase . cb3075) (string-normalize-nfkd . cb3074) (string-normalize-nfkc . cb3073) (string-normalize-nfd . cb3072) (string-normalize-nfc . cb3071) (string-foldcase . cb3070) (string-downcase . cb306f) (string-ci>? . cb306e) (string-ci>=? . cb306d) (string-ci=? . cb306c) (string-ci<? . cb306b) (string-ci<=? . cb306a) (char-whitespace? . cb3069) (char-upper-case? . cb3068) (char-title-case? . cb3067) (char-numeric? . cb3066) (char-lower-case? . cb3065) (char-general-category . cb3064) (char-upcase . cb3063) (char-titlecase . cb3062) (char-foldcase . cb3061) (char-downcase . cb3060) (char-ci>? . cb305f) (char-ci>=? . cb305e) (char-ci=? . cb305d) (char-ci<? . cb305c) (char-ci<=? . cb305b) (char-alphabetic? . cb305a) (make-variable-transformer . cbbaf) (identifier? . cbe66) (generate-temporaries . cbe52) (free-identifier=? . cbe54) (syntax->datum . cbe6a) (datum->syntax . cbe68) (bound-identifier=? . cbe56) (record-type-descriptor? . cb3059) (record-predicate . cb3058) (record-mutator . cb3057) (record-constructor . cb3056) (record-accessor . cb3055) (make-record-type-descriptor . cb3054) (make-record-constructor-descriptor . cb3053) (record? . cb3052) (record-type-uid . cb3051) (record-type-sealed? . cb3050) (record-type-parent . cb304f) (record-type-opaque? . cb304e) (record-type-name . cb304d) (record-type-generative? . cb304c) (record-type-field-names . cb304b) (record-rtd . cb304a) (record-field-mutable? . cb3049) (delete-file . cb3048) (file-exists? . cb3047) (vector-sort! . cb3046) (vector-sort . cb3045) (list-sort . cb3044) (symbol-hash . cb3043) (string-ci-hash . cb3042) (string-hash . cb3041) (equal-hash . cb3040) (hashtable-equivalence-function . cb303f) (make-hashtable . cb303e) (hashtable-hash-function . cb303d) (make-eqv-hashtable . cb303c) (make-eq-hashtable . cb303b) (hashtable? . cb303a) (hashtable-update! . cb3039) (hashtable-size . cb3038) (hashtable-set! . cb3037) (hashtable-ref . cb3036) (hashtable-mutable? . cb3035) (hashtable-keys . cb3034) (hashtable-entries . cb3033) (hashtable-delete! . cb3032) (hashtable-copy . cb3031) (hashtable-contains? . cb3030) (hashtable-clear! . cb302f) (call-with-output-file . cb302e) (call-with-input-file . cb302d) (write-char . cb302c) (write . cb302b) (with-output-to-file . cb302a) (with-input-from-file . cb3029) (read-char . cb3028) (read . cb3027) (peek-char . cb3026) (open-output-file . cb3025) (open-input-file . cb3024) (newline . cb3023) (display . cb3022) (close-output-port . cb3021) (close-input-port . cb3020) (eof-object? . cb301f) (eof-object . cb301e) (current-error-port . cb301d) (current-output-port . cb301c) (current-input-port . cb301b) (output-port? . cb301a) (input-port? . cb3019) (utf-8-codec . cb3018) (utf-16-codec . cb3017) (transcoder-error-handling-mode . cb3016) (transcoder-eol-style . cb3015) (transcoder-codec . cb3014) (transcoded-port . cb3013) (textual-port? . cb3012) (string->bytevector . cb3011) (standard-output-port . cb3010) (standard-input-port . cb300f) (standard-error-port . cb300e) (set-port-position! . cb300d) (put-u8 . cb300c) (put-string . cb300b) (put-datum . cb300a) (put-char . cb3009) (put-bytevector . cb3008) (port? . cb3007) (port-transcoder . cb3006) (port-position . cb3005) (port-has-set-port-position!? . cb3004) (port-has-port-position? . cb3003) (port-eof? . cb3002) (output-port-buffer-mode . cb3001) (open-string-output-port . cb3000) (open-string-input-port . cb2fff) (open-file-output-port . cb2ffe) (open-file-input/output-port . cb2ffd) (open-file-input-port . cb2ffc) (open-bytevector-output-port . cb2ffb) (open-bytevector-input-port . cb2ffa) (native-transcoder . cb2ff9) (native-eol-style . cb2ff8) (make-transcoder . cb2ff7) (latin-1-codec . cb2ff6) (make-i/o-write-error . cb2a8e) (make-i/o-read-error . cb2a79) (make-i/o-port-error . cb2b2f) (make-i/o-invalid-position-error . cb2aa5) (make-i/o-filename-error . cb2ac0) (make-i/o-file-protection-error . cb2ad9) (make-i/o-file-is-read-only-error . cb2aee) (make-i/o-file-does-not-exist-error . cb2b18) (make-i/o-file-already-exists-error . cb2b03) (make-i/o-error . cb2a64) (make-i/o-encoding-error . cb2b5f) (make-i/o-decoding-error . cb2b48) (make-custom-textual-output-port . cb2ff5) (make-custom-textual-input/output-port . cb2ff4) (make-custom-textual-input-port . cb2ff3) (make-custom-binary-output-port . cb2ff2) (make-custom-binary-input/output-port . cb2ff1) (make-custom-binary-input-port . cb2ff0) (make-bytevector . cb2fef) (lookahead-u8 . cb2fee) (lookahead-char . cb2fed) (i/o-write-error? . cb2a90) (i/o-read-error? . cb2a7b) (i/o-port-error? . cb2b33) (i/o-invalid-position-error? . cb2aa9) (i/o-filename-error? . cb2ac4) (i/o-file-protection-error? . cb2adb) (i/o-file-is-read-only-error? . cb2af0) (i/o-file-does-not-exist-error? . cb2b1a) (i/o-file-already-exists-error? . cb2b05) (i/o-error? . cb2a66) (i/o-error-position . cb2aab) (i/o-error-port . cb2b35) (i/o-error-filename . cb2ac6) (i/o-encoding-error? . cb2b63) (i/o-encoding-error-char . cb2b65) (i/o-decoding-error? . cb2b4a) (get-u8 . cb2fec) (get-string-n! . cb2feb) (get-string-n . cb2fea) (get-string-all . cb2fe9) (get-line . cb2fe8) (get-datum . cb2fe7) (get-char . cb2fe6) (get-bytevector-some . cb2fe5) (get-bytevector-n! . cb2fe4) (get-bytevector-n . cb2fe3) (get-bytevector-all . cb2fe2) (flush-output-port . cb2fe1) (close-port . cb2fe0) (exit . cb2fd8) (command-line . cb2c9c) (remove . cb2fd3) (remv . cb2fd2) (remp . cb2fd1) (remq . cb2fd0) (partition . cb2fcf) (memv . cb2fce) (memq . cb2fcd) (memp . cb2fcc) (member . cb2fcb) (exists . cb2fca) (for-all . cb2fc9) (fold-right . cb2fc8) (fold-left . cb2fc7) (find . cb2fc6) (filter . cb2fc5) (cons* . cb2fc4) (assv . cb2fc3) (assq . cb2fc2) (assp . cb2fc1) (assoc . cb2fc0) (call-with-string-output-port . cb2fbf) (call-with-port . cb2fbe) (call-with-bytevector-output-port . cb2fbd) (bytevector->string . cb2fbc) (buffer-mode? . cb2fbb) (binary-port? . cb2fba) (with-exception-handler . cb2fb9) (raise-continuable . cb2fb8) (raise . cb2fb7) (make-enumeration . cb2fb6) (enum-set=? . cb2fb5) (enum-set-universe . cb2fb4) (enum-set-union . cb2fb3) (enum-set-subset? . cb2fb2) (enum-set-projection . cb2fb1) (enum-set-member? . cb2fb0) (enum-set-intersection . cb2faf) (enum-set-indexer . cb2fae) (enum-set-difference . cb2fad) (enum-set-constructor . cb2fac) (enum-set-complement . cb2fab) (enum-set->list . cb2faa) (who-condition? . cb29da) (warning? . cb2952) (violation? . cb2991) (undefined-violation? . cb2a51) (syntax-violation? . cb2a38) (syntax-violation-subform . cb2a3c) (syntax-violation-form . cb2a3a) (syntax-violation . cbe64) (simple-conditions . cb2fa9) (serious-condition? . cb2967) (non-continuable-violation? . cb29f1) (message-condition? . cb293b) (make-who-condition . cb29d6) (make-warning . cb2950) (make-violation . cb298f) (make-undefined-violation . cb2a4f) (make-syntax-violation . cb2a32) (make-serious-condition . cb2965) (make-non-continuable-violation . cb29ef) (make-message-condition . cb2937) (make-lexical-violation . cb2a19) (make-irritants-condition . cb29bb) (make-implementation-restriction-violation . cb2a04) (make-error . cb297a) (make-assertion-violation . cb29a4) (lexical-violation? . cb2a1b) (irritants-condition? . cb29bf) (implementation-restriction-violation? . cb2a06) (error? . cb297c) (condition-who . cb29dc) (condition-predicate . cb2fa8) (condition-message . cb293d) (condition-irritants . cb29c1) (condition-accessor . cb2fa7) (condition . cb2fa6) (assertion-violation? . cb29a6) (condition? . cb2fa5) (utf32->string . cb2fa4) (utf16->string . cb2fa3) (utf8->string . cb2fa2) (uint-list->bytevector . cb2fa1) (u8-list->bytevector . cb2fa0) (string->utf8 . cb2f9f) (string->utf32 . cb2f9e) (string->utf16 . cb2f9d) (sint-list->bytevector . cb2f9c) (native-endianness . cb2f9b) (bytevector? . cb2f9a) (bytevector=? . cb2f99) (bytevector-uint-set! . cb2f98) (bytevector-uint-ref . cb2f97) (bytevector-u8-set! . cb2f96) (bytevector-u8-ref . cb2f95) (bytevector-u64-set! . cb2f94) (bytevector-u64-ref . cb2f93) (bytevector-u64-native-set! . cb2f92) (bytevector-u64-native-ref . cb2f91) (bytevector-u32-set! . cb2f90) (bytevector-u32-ref . cb2f8f) (bytevector-u32-native-set! . cb2f8e) (bytevector-u32-native-ref . cb2f8d) (bytevector-u16-set! . cb2f8c) (bytevector-u16-ref . cb2f8b) (bytevector-u16-native-set! . cb2f8a) (bytevector-u16-native-ref . cb2f89) (bytevector-sint-set! . cb2f88) (bytevector-sint-ref . cb2f87) (bytevector-s8-set! . cb2f86) (bytevector-s8-ref . cb2f85) (bytevector-s64-set! . cb2f84) (bytevector-s64-ref . cb2f83) (bytevector-s64-native-set! . cb2f82) (bytevector-s64-native-ref . cb2f81) (bytevector-s32-set! . cb2f80) (bytevector-s32-ref . cb2f7f) (bytevector-s32-native-set! . cb2f7e) (bytevector-s32-native-ref . cb2f7d) (bytevector-s16-set! . cb2f7c) (bytevector-s16-ref . cb2f7b) (bytevector-s16-native-set! . cb2f7a) (bytevector-s16-native-ref . cb2f79) (bytevector-length . cb2f78) (bytevector-ieee-single-ref . cb2f77) (bytevector-ieee-single-set! . cb2f76) (bytevector-ieee-single-native-set! . cb2f75) (bytevector-ieee-single-native-ref . cb2f74) (bytevector-ieee-double-set! . cb2f73) (bytevector-ieee-double-ref . cb2f72) (bytevector-ieee-double-native-set! . cb2f71) (bytevector-ieee-double-native-ref . cb2f70) (bytevector-fill! . cb2f6f) (bytevector-copy! . cb2f6e) (bytevector-copy . cb2f6d) (bytevector->uint-list . cb2f6c) (bytevector->u8-list . cb2f6b) (bytevector->sint-list . cb2f6a) (no-nans-violation? . cb2b8f) (no-infinities-violation? . cb2b7a) (make-no-nans-violation . cb2b8d) (make-no-infinities-violation . cb2b78) (real->flonum . cb2f69) (flzero? . cb2f68) (fltruncate . cb2f67) (fltan . cb2f66) (flsqrt . cb2f65) (flsin . cb2f64) (flround . cb2f63) (flpositive? . cb2f62) (flonum? . cb2f61) (flodd? . cb2f60) (flnumerator . cb2f5f) (flnegative? . cb2f5e) (flnan? . cb2f5d) (flmod0 . cb2f5c) (flmod . cb2f5b) (flmin . cb2f5a) (flmax . cb2f59) (fllog . cb2f58) (flinteger? . cb2f57) (flinfinite? . cb2f56) (flfloor . cb2f55) (flfinite? . cb2f54) (flexpt . cb2f53) (flexp . cb2f52) (fleven? . cb2f51) (fldiv0-and-mod0 . cb2f50) (fldiv0 . cb2f4f) (fldiv-and-mod . cb2f4e) (fldiv . cb2f4d) (fldenominator . cb2f4c) (flcos . cb2f4b) (flceiling . cb2f4a) (flatan . cb2f49) (flasin . cb2f48) (flacos . cb2f47) (flabs . cb2f46) (fl>? . cb2f45) (fl>=? . cb2f44) (fl=? . cb2f43) (fl<? . cb2f42) (fl<=? . cb2f41) (fl/ . cb2f40) (fl- . cb2f3f) (fl+ . cb2f3e) (fl* . cb2f3d) (fixnum->flonum . cb2f3c) (fxzero? . cb2f3b) (fxxor . cb2f3a) (fxrotate-bit-field . cb2f39) (fxreverse-bit-field . cb2f38) (fxpositive? . cb2f37) (fxodd? . cb2f36) (fxnot . cb2f35) (fxnegative? . cb2f34) (fxmod0 . cb2f33) (fxmod . cb2f32) (fxmin . cb2f31) (fxmax . cb2f30) (fxlength . cb2f2f) (fxior . cb2f2e) (fxif . cb2f2d) (fxfirst-bit-set . cb2f2c) (fxeven? . cb2f2b) (fxdiv0-and-mod0 . cb2f2a) (fxdiv0 . cb2f29) (fxdiv-and-mod . cb2f28) (fxdiv . cb2f27) (fxcopy-bit-field . cb2f26) (fxcopy-bit . cb2f25) (fxbit-set? . cb2f24) (fxbit-field . cb2f23) (fxbit-count . cb2f22) (fxarithmetic-shift-right . cb2f21) (fxarithmetic-shift-left . cb2f20) (fxarithmetic-shift . cb2f1f) (fxand . cb2f1e) (fx>? . cb2f1d) (fx>=? . cb2f1c) (fx=? . cb2f1b) (fx<? . cb2f1a) (fx<=? . cb2f19) (fx-/carry . cb2f18) (fx- . cb2f17) (fx+/carry . cb2f16) (fx+ . cb2f15) (fx*/carry . cb2f14) (fx* . cb2f13) (greatest-fixnum . cb2f12) (least-fixnum . cb2f11) (fixnum-width . cb2f10) (fixnum? . cb2f0f) (bitwise-rotate-bit-field . cb2f0e) (bitwise-reverse-bit-field . cb2f0d) (bitwise-length . cb2f0c) (bitwise-if . cb2f0b) (bitwise-first-bit-set . cb2f0a) (bitwise-copy-bit-field . cb2f09) (bitwise-copy-bit . cb2f08) (bitwise-bit-set? . cb2f07) (bitwise-bit-field . cb2f06) (bitwise-bit-count . cb2f05) (bitwise-xor . cb2f04) (bitwise-ior . cb2f03) (bitwise-and . cb2f02) (bitwise-not . cb2f01) (bitwise-arithmetic-shift-right . cb2f00) (bitwise-arithmetic-shift-left . cb2eff) (bitwise-arithmetic-shift . cb2efe) (zero? . cb2efd) (vector? . cb2efc) (vector-set! . cb2efb) (vector-ref . cb2efa) (vector-map . cb2ef9) (vector-length . cb2ef8) (vector-for-each . cb2ef7) (vector-fill! . cb2ef6) (vector->list . cb2ef5) (vector . cb2ef4) (values . cb2ef3) (truncate . cb2ef2) (tan . cb2ef1) (symbol? . cb2ef0) (symbol=? . cb2eef) (symbol->string . cb2eee) (substring . cb2eed) (string? . cb2eec) (string>? . cb2eeb) (string>=? . cb2eea) (string=? . cb2ee9) (string<? . cb2ee8) (string<=? . cb2ee7) (string-ref . cb2ee6) (string-length . cb2ee5) (string-for-each . cb2ee4) (string-copy . cb2ee3) (string-append . cb2ee2) (string->symbol . cb2ee1) (string->number . cb2ee0) (string->list . cb2edf) (string . cb2ede) (sqrt . cb2edd) (sin . cb2edc) (round . cb2edb) (reverse . cb2eda) (real? . cb2ed9) (real-valued? . cb2ed8) (real-part . cb2ed7) (rationalize . cb2ed6) (rational? . cb2ed5) (rational-valued? . cb2ed4) (procedure? . cb2ed3) (positive? . cb2ed2) (pair? . cb2ed1) (odd? . cb2ed0) (numerator . cb2ecf) (number? . cb2ece) (number->string . cb2ecd) (null? . cb2ecc) (not . cb2ecb) (negative? . cb2eca) (nan? . cb2ec9) (min . cb2ec8) (max . cb2ec7) (map . cb2ec6) (make-vector . cb2ec5) (make-string . cb2ec4) (make-rectangular . cb2ec3) (make-polar . cb2ec2) (magnitude . cb2ec1) (log . cb2ec0) (list? . cb2ebf) (list-tail . cb2ebe) (list-ref . cb2ebd) (list->vector . cb2ebc) (list->string . cb2ebb) (list . cb2eba) (length . cb2eb9) (lcm . cb2eb8) (integer? . cb2eb7) (integer-valued? . cb2eb6) (integer->char . cb2eb5) (infinite? . cb2eb4) (inexact? . cb2eb3) (inexact . cb2eb2) (imag-part . cb2eb1) (gcd . cb2eb0) (for-each . cb2eaf) (floor . cb2eae) (finite? . cb2ead) (expt . cb2eac) (exp . cb2eab) (exact? . cb2eaa) (exact-integer-sqrt . cb2ea9) (exact . cb2ea8) (even? . cb2ea7) (error . cb2ea6) (eqv? . cb2ea5) (equal? . cb2ea4) (eq? . cb2ea3) (dynamic-wind . cb2ea2) (div0-and-mod0 . cb2ea1) (mod0 . cb2ea0) (div0 . cb2e9f) (div-and-mod . cb2e9e) (mod . cb2e9d) (div . cb2e9c) (denominator . cb2e9b) (cos . cb2e9a) (cons . cb2e99) (complex? . cb2e98) (char? . cb2e97) (char>? . cb2e96) (char>=? . cb2e95) (char=? . cb2e94) (char<? . cb2e93) (char<=? . cb2e92) (char->integer . cb2e91) (ceiling . cb2e90) (call-with-values . cb2e8f) (call/cc . cb2e8e) (call-with-current-continuation . cb2e8d) (cddddr . cb2e8c) (cdddar . cb2e8b) (cddadr . cb2e8a) (cddaar . cb2e89) (cdaddr . cb2e88) (cdadar . cb2e87) (cdaadr . cb2e86) (cdaaar . cb2e85) (cadddr . cb2e84) (caddar . cb2e83) (cadadr . cb2e82) (cadaar . cb2e81) (caaddr . cb2e80) (caadar . cb2e7f) (caaadr . cb2e7e) (caaaar . cb2e7d) (cdddr . cb2e7c) (cddar . cb2e7b) (cdadr . cb2e7a) (cdaar . cb2e79) (caddr . cb2e78) (cadar . cb2e77) (caadr . cb2e76) (caaar . cb2e75) (cddr . cb2e74) (cdar . cb2e73) (cadr . cb2e72) (caar . cb2e71) (cdr . cb2e70) (car . cb2e6f) (boolean? . cb2e6e) (boolean=? . cb2e6d) (atan . cb2e6c) (assertion-violation . cb2e6b) (asin . cb2e6a) (apply . cb2e69) (append . cb2e68) (angle . cb2e67) (acos . cb2e66) (abs . cb2e65) (/ . cb2e64) (* . cb2e63) (- . cb2e62) (+ . cb2e61) (>= . cb2e60) (> . cb2e5f) (= . cb2e5e) (<= . cb2e5d) (< . cb2e5c) (&no-nans . cb2e5a) (&no-infinities . cb2e59) (&i/o-encoding . cb2e58) (&i/o-decoding . cb2e57) (&i/o-port . cb2e56) (&i/o-file-does-not-exist . cb2e55) (&i/o-file-already-exists . cb2e54) (&i/o-file-is-read-only . cb2e53) (&i/o-file-protection . cb2e52) (&i/o-filename . cb2e51) (&i/o-invalid-position . cb2e50) (&i/o-write . cb2e4f) (&i/o-read . cb2e4e) (&i/o . cb2e4d) (&undefined . cb2e4c) (&syntax . cb2e4b) (&lexical . cb2e4a) (&implementation-restriction . cb2e49) (&non-continuable . cb2e48) (&who . cb2e47) (&irritants . cb2e46) (&assertion . cb2e45) (&violation . cb2e44) (&error . cb2e43) (&serious . cb2e42) (&warning . cb2e41) (&message . cb2e40) (&condition . cb2e3f) (define-condition-type . cb2e3e) (define-enumeration . cb2e3d) (define-record-type . cb2e3c) (parent-rtd . cb2e3b) (nongenerative . cb2e3a) (opaque . cb2e39) (sealed . cb2e38) (protocol . cb2e37) (parent . cb2e36) (immutable . cb2e35) (mutable . cb2e34) (fields . cb2e33) (error-handling-mode . cb2e32) (file-options . cb2e31) (buffer-mode . cb2e30) (eol-style . cb2e2f) (guard . cb2e2e) (unsyntax-splicing . cb2e2b) (unsyntax . cb2e2a) (unquote-splicing . cb2e29) (unquote . cb2e28) (_ . cb2e27) (else . cb2e26) (=> . cb2e25) (... . cb2e24) (assert . cb2e23) (endianness . cb2e22) (do . cb2e1f) (cond . cb2e1e) (let* . cb2e1d) (let*-values . cb2e1c) (let-values . cb2e1b) (identifier-syntax . cb2e1a) (with-syntax . cb2e19) (quasisyntax . cb2e18) (quasiquote . cb2e17) (syntax-rules . cb2e16) (record-constructor-descriptor . cb2e13) (record-type-descriptor . cb2e12) (case . cb2e11) (unless . cb2e0f) (when . cb2e0e) (or . cb2e0d) (and . cb2e0c) (if . cb2e0b) (let . cb2e0a) (letrec* . cb2e09) (letrec . cb2e08) (case-lambda . cb2e06) (lambda . cb2e05) (syntax . cb2e04) (syntax-case . cb2e03) (quote . cb2e02) (letrec-syntax . cb2e00) (let-syntax . cb2dff) (set! . cb2dfe) (begin . cb2dfc) (define-syntax . cb2dfa) (define . cb2df9)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb312f '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . cbe40) (quotient . cb2fdf) (null-environment . cbe3e) (remainder . cb2fde) (modulo . cb2fdd) (inexact->exact . cb2fdc) (force . cb2fdb) (exact->inexact . cb2fda) (make-promise . cb2fd9) (delay . cb2e21)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb3130 '(rnrs control) '(6) '() '() '() '((do . cb2e1f) (unless . cb2e0f) (when . cb2e0e) (case-lambda . cb2e06)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb3131 '(rnrs eval) '(6) '() '() '() '((eval . cbe44) (environment . cbe3c)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb3132 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . cb2fd5) (set-car! . cb2fd4)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb3133 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . cb2fd7) (string-set! . cb2fd6)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb3134 '(rnrs programs) '(6) '() '() '() '((exit . cb2fd8) (command-line . cb2c9c)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb3135 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . cbbaf) (identifier? . cbe66) (generate-temporaries . cbe52) (free-identifier=? . cbe54) (syntax->datum . cbe6a) (datum->syntax . cbe68) (bound-identifier=? . cbe56) (syntax-violation . cbe64) (unsyntax-splicing . cb2e2b) (unsyntax . cb2e2a) (_ . cb2e27) (... . cb2e24) (with-syntax . cb2e19) (quasisyntax . cb2e18) (syntax . cb2e04) (syntax-case . cb2e03)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb3136 '(rnrs files) '(6) '() '() '() '((delete-file . cb3048) (file-exists? . cb3047) (make-i/o-write-error . cb2a8e) (make-i/o-read-error . cb2a79) (make-i/o-port-error . cb2b2f) (make-i/o-invalid-position-error . cb2aa5) (make-i/o-filename-error . cb2ac0) (make-i/o-file-protection-error . cb2ad9) (make-i/o-file-is-read-only-error . cb2aee) (make-i/o-file-does-not-exist-error . cb2b18) (make-i/o-file-already-exists-error . cb2b03) (make-i/o-error . cb2a64) (i/o-write-error? . cb2a90) (i/o-read-error? . cb2a7b) (i/o-port-error? . cb2b33) (i/o-invalid-position-error? . cb2aa9) (i/o-filename-error? . cb2ac4) (i/o-file-protection-error? . cb2adb) (i/o-file-is-read-only-error? . cb2af0) (i/o-file-does-not-exist-error? . cb2b1a) (i/o-file-already-exists-error? . cb2b05) (i/o-error? . cb2a66) (i/o-error-position . cb2aab) (i/o-error-port . cb2b35) (i/o-error-filename . cb2ac6) (&i/o-port . cb2e56) (&i/o-file-does-not-exist . cb2e55) (&i/o-file-already-exists . cb2e54) (&i/o-file-is-read-only . cb2e53) (&i/o-file-protection . cb2e52) (&i/o-filename . cb2e51) (&i/o-invalid-position . cb2e50) (&i/o-write . cb2e4f) (&i/o-read . cb2e4e) (&i/o . cb2e4d)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb3137 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . cb3046) (vector-sort . cb3045) (list-sort . cb3044)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb3138 '(rnrs base) '(6) '() '() '() '((zero? . cb2efd) (vector? . cb2efc) (vector-set! . cb2efb) (vector-ref . cb2efa) (vector-map . cb2ef9) (vector-length . cb2ef8) (vector-for-each . cb2ef7) (vector-fill! . cb2ef6) (vector->list . cb2ef5) (vector . cb2ef4) (values . cb2ef3) (truncate . cb2ef2) (tan . cb2ef1) (symbol? . cb2ef0) (symbol=? . cb2eef) (symbol->string . cb2eee) (substring . cb2eed) (string? . cb2eec) (string>? . cb2eeb) (string>=? . cb2eea) (string=? . cb2ee9) (string<? . cb2ee8) (string<=? . cb2ee7) (string-ref . cb2ee6) (string-length . cb2ee5) (string-for-each . cb2ee4) (string-copy . cb2ee3) (string-append . cb2ee2) (string->symbol . cb2ee1) (string->number . cb2ee0) (string->list . cb2edf) (string . cb2ede) (sqrt . cb2edd) (sin . cb2edc) (round . cb2edb) (reverse . cb2eda) (real? . cb2ed9) (real-valued? . cb2ed8) (real-part . cb2ed7) (rationalize . cb2ed6) (rational? . cb2ed5) (rational-valued? . cb2ed4) (procedure? . cb2ed3) (positive? . cb2ed2) (pair? . cb2ed1) (odd? . cb2ed0) (numerator . cb2ecf) (number? . cb2ece) (number->string . cb2ecd) (null? . cb2ecc) (not . cb2ecb) (negative? . cb2eca) (nan? . cb2ec9) (min . cb2ec8) (max . cb2ec7) (map . cb2ec6) (make-vector . cb2ec5) (make-string . cb2ec4) (make-rectangular . cb2ec3) (make-polar . cb2ec2) (magnitude . cb2ec1) (log . cb2ec0) (list? . cb2ebf) (list-tail . cb2ebe) (list-ref . cb2ebd) (list->vector . cb2ebc) (list->string . cb2ebb) (list . cb2eba) (length . cb2eb9) (lcm . cb2eb8) (integer? . cb2eb7) (integer-valued? . cb2eb6) (integer->char . cb2eb5) (infinite? . cb2eb4) (inexact? . cb2eb3) (inexact . cb2eb2) (imag-part . cb2eb1) (gcd . cb2eb0) (for-each . cb2eaf) (floor . cb2eae) (finite? . cb2ead) (expt . cb2eac) (exp . cb2eab) (exact? . cb2eaa) (exact-integer-sqrt . cb2ea9) (exact . cb2ea8) (even? . cb2ea7) (error . cb2ea6) (eqv? . cb2ea5) (equal? . cb2ea4) (eq? . cb2ea3) (dynamic-wind . cb2ea2) (div0-and-mod0 . cb2ea1) (mod0 . cb2ea0) (div0 . cb2e9f) (div-and-mod . cb2e9e) (mod . cb2e9d) (div . cb2e9c) (denominator . cb2e9b) (cos . cb2e9a) (cons . cb2e99) (complex? . cb2e98) (char? . cb2e97) (char>? . cb2e96) (char>=? . cb2e95) (char=? . cb2e94) (char<? . cb2e93) (char<=? . cb2e92) (char->integer . cb2e91) (ceiling . cb2e90) (call-with-values . cb2e8f) (call/cc . cb2e8e) (call-with-current-continuation . cb2e8d) (cddddr . cb2e8c) (cdddar . cb2e8b) (cddadr . cb2e8a) (cddaar . cb2e89) (cdaddr . cb2e88) (cdadar . cb2e87) (cdaadr . cb2e86) (cdaaar . cb2e85) (cadddr . cb2e84) (caddar . cb2e83) (cadadr . cb2e82) (cadaar . cb2e81) (caaddr . cb2e80) (caadar . cb2e7f) (caaadr . cb2e7e) (caaaar . cb2e7d) (cdddr . cb2e7c) (cddar . cb2e7b) (cdadr . cb2e7a) (cdaar . cb2e79) (caddr . cb2e78) (cadar . cb2e77) (caadr . cb2e76) (caaar . cb2e75) (cddr . cb2e74) (cdar . cb2e73) (cadr . cb2e72) (caar . cb2e71) (cdr . cb2e70) (car . cb2e6f) (boolean? . cb2e6e) (boolean=? . cb2e6d) (atan . cb2e6c) (assertion-violation . cb2e6b) (asin . cb2e6a) (apply . cb2e69) (append . cb2e68) (angle . cb2e67) (acos . cb2e66) (abs . cb2e65) (/ . cb2e64) (* . cb2e63) (- . cb2e62) (+ . cb2e61) (>= . cb2e60) (> . cb2e5f) (= . cb2e5e) (<= . cb2e5d) (< . cb2e5c) (unquote-splicing . cb2e29) (unquote . cb2e28) (_ . cb2e27) (else . cb2e26) (=> . cb2e25) (... . cb2e24) (assert . cb2e23) (cond . cb2e1e) (let* . cb2e1d) (let*-values . cb2e1c) (let-values . cb2e1b) (identifier-syntax . cb2e1a) (quasiquote . cb2e17) (syntax-rules . cb2e16) (case . cb2e11) (or . cb2e0d) (and . cb2e0c) (if . cb2e0b) (let . cb2e0a) (letrec* . cb2e09) (letrec . cb2e08) (lambda . cb2e05) (quote . cb2e02) (letrec-syntax . cb2e00) (let-syntax . cb2dff) (set! . cb2dfe) (begin . cb2dfc) (define-syntax . cb2dfa) (define . cb2df9)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb3139 '(rnrs lists) '(6) '() '() '() '((remove . cb2fd3) (remv . cb2fd2) (remp . cb2fd1) (remq . cb2fd0) (partition . cb2fcf) (memv . cb2fce) (memq . cb2fcd) (memp . cb2fcc) (member . cb2fcb) (exists . cb2fca) (for-all . cb2fc9) (fold-right . cb2fc8) (fold-left . cb2fc7) (find . cb2fc6) (filter . cb2fc5) (cons* . cb2fc4) (assv . cb2fc3) (assq . cb2fc2) (assp . cb2fc1) (assoc . cb2fc0)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb313a '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . cb302e) (call-with-input-file . cb302d) (write-char . cb302c) (write . cb302b) (with-output-to-file . cb302a) (with-input-from-file . cb3029) (read-char . cb3028) (read . cb3027) (peek-char . cb3026) (open-output-file . cb3025) (open-input-file . cb3024) (newline . cb3023) (display . cb3022) (close-output-port . cb3021) (close-input-port . cb3020) (eof-object? . cb301f) (eof-object . cb301e) (current-error-port . cb301d) (current-output-port . cb301c) (current-input-port . cb301b) (output-port? . cb301a) (input-port? . cb3019) (make-i/o-write-error . cb2a8e) (make-i/o-read-error . cb2a79) (make-i/o-port-error . cb2b2f) (make-i/o-invalid-position-error . cb2aa5) (make-i/o-filename-error . cb2ac0) (make-i/o-file-protection-error . cb2ad9) (make-i/o-file-is-read-only-error . cb2aee) (make-i/o-file-does-not-exist-error . cb2b18) (make-i/o-file-already-exists-error . cb2b03) (make-i/o-error . cb2a64) (i/o-write-error? . cb2a90) (i/o-read-error? . cb2a7b) (i/o-port-error? . cb2b33) (i/o-invalid-position-error? . cb2aa9) (i/o-filename-error? . cb2ac4) (i/o-file-protection-error? . cb2adb) (i/o-file-is-read-only-error? . cb2af0) (i/o-file-does-not-exist-error? . cb2b1a) (i/o-file-already-exists-error? . cb2b05) (i/o-error? . cb2a66) (i/o-error-position . cb2aab) (i/o-error-port . cb2b35) (i/o-error-filename . cb2ac6) (&i/o-port . cb2e56) (&i/o-file-does-not-exist . cb2e55) (&i/o-file-already-exists . cb2e54) (&i/o-file-is-read-only . cb2e53) (&i/o-file-protection . cb2e52) (&i/o-filename . cb2e51) (&i/o-invalid-position . cb2e50) (&i/o-write . cb2e4f) (&i/o-read . cb2e4e) (&i/o . cb2e4d)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb313b '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . cb2fef) (utf32->string . cb2fa4) (utf16->string . cb2fa3) (utf8->string . cb2fa2) (uint-list->bytevector . cb2fa1) (u8-list->bytevector . cb2fa0) (string->utf8 . cb2f9f) (string->utf32 . cb2f9e) (string->utf16 . cb2f9d) (sint-list->bytevector . cb2f9c) (native-endianness . cb2f9b) (bytevector? . cb2f9a) (bytevector=? . cb2f99) (bytevector-uint-set! . cb2f98) (bytevector-uint-ref . cb2f97) (bytevector-u8-set! . cb2f96) (bytevector-u8-ref . cb2f95) (bytevector-u64-set! . cb2f94) (bytevector-u64-ref . cb2f93) (bytevector-u64-native-set! . cb2f92) (bytevector-u64-native-ref . cb2f91) (bytevector-u32-set! . cb2f90) (bytevector-u32-ref . cb2f8f) (bytevector-u32-native-set! . cb2f8e) (bytevector-u32-native-ref . cb2f8d) (bytevector-u16-set! . cb2f8c) (bytevector-u16-ref . cb2f8b) (bytevector-u16-native-set! . cb2f8a) (bytevector-u16-native-ref . cb2f89) (bytevector-sint-set! . cb2f88) (bytevector-sint-ref . cb2f87) (bytevector-s8-set! . cb2f86) (bytevector-s8-ref . cb2f85) (bytevector-s64-set! . cb2f84) (bytevector-s64-ref . cb2f83) (bytevector-s64-native-set! . cb2f82) (bytevector-s64-native-ref . cb2f81) (bytevector-s32-set! . cb2f80) (bytevector-s32-ref . cb2f7f) (bytevector-s32-native-set! . cb2f7e) (bytevector-s32-native-ref . cb2f7d) (bytevector-s16-set! . cb2f7c) (bytevector-s16-ref . cb2f7b) (bytevector-s16-native-set! . cb2f7a) (bytevector-s16-native-ref . cb2f79) (bytevector-length . cb2f78) (bytevector-ieee-single-ref . cb2f77) (bytevector-ieee-single-set! . cb2f76) (bytevector-ieee-single-native-set! . cb2f75) (bytevector-ieee-single-native-ref . cb2f74) (bytevector-ieee-double-set! . cb2f73) (bytevector-ieee-double-ref . cb2f72) (bytevector-ieee-double-native-set! . cb2f71) (bytevector-ieee-double-native-ref . cb2f70) (bytevector-fill! . cb2f6f) (bytevector-copy! . cb2f6e) (bytevector-copy . cb2f6d) (bytevector->uint-list . cb2f6c) (bytevector->u8-list . cb2f6b) (bytevector->sint-list . cb2f6a) (endianness . cb2e22)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb313c '(rnrs unicode) '(6) '() '() '() '((string-upcase . cb3076) (string-titlecase . cb3075) (string-normalize-nfkd . cb3074) (string-normalize-nfkc . cb3073) (string-normalize-nfd . cb3072) (string-normalize-nfc . cb3071) (string-foldcase . cb3070) (string-downcase . cb306f) (string-ci>? . cb306e) (string-ci>=? . cb306d) (string-ci=? . cb306c) (string-ci<? . cb306b) (string-ci<=? . cb306a) (char-whitespace? . cb3069) (char-upper-case? . cb3068) (char-title-case? . cb3067) (char-numeric? . cb3066) (char-lower-case? . cb3065) (char-general-category . cb3064) (char-upcase . cb3063) (char-titlecase . cb3062) (char-foldcase . cb3061) (char-downcase . cb3060) (char-ci>? . cb305f) (char-ci>=? . cb305e) (char-ci=? . cb305d) (char-ci<? . cb305c) (char-ci<=? . cb305b) (char-alphabetic? . cb305a)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb313d '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . cb2fb9) (raise-continuable . cb2fb8) (raise . cb2fb7) (guard . cb2e2e) (else . cb2e26) (=> . cb2e25)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb313e '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . cb2f0e) (bitwise-reverse-bit-field . cb2f0d) (bitwise-length . cb2f0c) (bitwise-if . cb2f0b) (bitwise-first-bit-set . cb2f0a) (bitwise-copy-bit-field . cb2f09) (bitwise-copy-bit . cb2f08) (bitwise-bit-set? . cb2f07) (bitwise-bit-field . cb2f06) (bitwise-bit-count . cb2f05) (bitwise-xor . cb2f04) (bitwise-ior . cb2f03) (bitwise-and . cb2f02) (bitwise-not . cb2f01) (bitwise-arithmetic-shift-right . cb2f00) (bitwise-arithmetic-shift-left . cb2eff) (bitwise-arithmetic-shift . cb2efe)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb313f '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . cb2f3b) (fxxor . cb2f3a) (fxrotate-bit-field . cb2f39) (fxreverse-bit-field . cb2f38) (fxpositive? . cb2f37) (fxodd? . cb2f36) (fxnot . cb2f35) (fxnegative? . cb2f34) (fxmod0 . cb2f33) (fxmod . cb2f32) (fxmin . cb2f31) (fxmax . cb2f30) (fxlength . cb2f2f) (fxior . cb2f2e) (fxif . cb2f2d) (fxfirst-bit-set . cb2f2c) (fxeven? . cb2f2b) (fxdiv0-and-mod0 . cb2f2a) (fxdiv0 . cb2f29) (fxdiv-and-mod . cb2f28) (fxdiv . cb2f27) (fxcopy-bit-field . cb2f26) (fxcopy-bit . cb2f25) (fxbit-set? . cb2f24) (fxbit-field . cb2f23) (fxbit-count . cb2f22) (fxarithmetic-shift-right . cb2f21) (fxarithmetic-shift-left . cb2f20) (fxarithmetic-shift . cb2f1f) (fxand . cb2f1e) (fx>? . cb2f1d) (fx>=? . cb2f1c) (fx=? . cb2f1b) (fx<? . cb2f1a) (fx<=? . cb2f19) (fx-/carry . cb2f18) (fx- . cb2f17) (fx+/carry . cb2f16) (fx+ . cb2f15) (fx*/carry . cb2f14) (fx* . cb2f13) (greatest-fixnum . cb2f12) (least-fixnum . cb2f11) (fixnum-width . cb2f10) (fixnum? . cb2f0f)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb3140 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . cb2b8f) (no-infinities-violation? . cb2b7a) (make-no-nans-violation . cb2b8d) (make-no-infinities-violation . cb2b78) (real->flonum . cb2f69) (flzero? . cb2f68) (fltruncate . cb2f67) (fltan . cb2f66) (flsqrt . cb2f65) (flsin . cb2f64) (flround . cb2f63) (flpositive? . cb2f62) (flonum? . cb2f61) (flodd? . cb2f60) (flnumerator . cb2f5f) (flnegative? . cb2f5e) (flnan? . cb2f5d) (flmod0 . cb2f5c) (flmod . cb2f5b) (flmin . cb2f5a) (flmax . cb2f59) (fllog . cb2f58) (flinteger? . cb2f57) (flinfinite? . cb2f56) (flfloor . cb2f55) (flfinite? . cb2f54) (flexpt . cb2f53) (flexp . cb2f52) (fleven? . cb2f51) (fldiv0-and-mod0 . cb2f50) (fldiv0 . cb2f4f) (fldiv-and-mod . cb2f4e) (fldiv . cb2f4d) (fldenominator . cb2f4c) (flcos . cb2f4b) (flceiling . cb2f4a) (flatan . cb2f49) (flasin . cb2f48) (flacos . cb2f47) (flabs . cb2f46) (fl>? . cb2f45) (fl>=? . cb2f44) (fl=? . cb2f43) (fl<? . cb2f42) (fl<=? . cb2f41) (fl/ . cb2f40) (fl- . cb2f3f) (fl+ . cb2f3e) (fl* . cb2f3d) (fixnum->flonum . cb2f3c) (&no-nans . cb2e5a) (&no-infinities . cb2e59)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb3141 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . cb3043) (string-ci-hash . cb3042) (string-hash . cb3041) (equal-hash . cb3040) (hashtable-equivalence-function . cb303f) (make-hashtable . cb303e) (hashtable-hash-function . cb303d) (make-eqv-hashtable . cb303c) (make-eq-hashtable . cb303b) (hashtable? . cb303a) (hashtable-update! . cb3039) (hashtable-size . cb3038) (hashtable-set! . cb3037) (hashtable-ref . cb3036) (hashtable-mutable? . cb3035) (hashtable-keys . cb3034) (hashtable-entries . cb3033) (hashtable-delete! . cb3032) (hashtable-copy . cb3031) (hashtable-contains? . cb3030) (hashtable-clear! . cb302f)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb3142 '(rnrs io ports) '(6) '() '() '() '((eof-object? . cb301f) (eof-object . cb301e) (current-error-port . cb301d) (current-output-port . cb301c) (current-input-port . cb301b) (output-port? . cb301a) (input-port? . cb3019) (utf-8-codec . cb3018) (utf-16-codec . cb3017) (transcoder-error-handling-mode . cb3016) (transcoder-eol-style . cb3015) (transcoder-codec . cb3014) (transcoded-port . cb3013) (textual-port? . cb3012) (string->bytevector . cb3011) (standard-output-port . cb3010) (standard-input-port . cb300f) (standard-error-port . cb300e) (set-port-position! . cb300d) (put-u8 . cb300c) (put-string . cb300b) (put-datum . cb300a) (put-char . cb3009) (put-bytevector . cb3008) (port? . cb3007) (port-transcoder . cb3006) (port-position . cb3005) (port-has-set-port-position!? . cb3004) (port-has-port-position? . cb3003) (port-eof? . cb3002) (output-port-buffer-mode . cb3001) (open-string-output-port . cb3000) (open-string-input-port . cb2fff) (open-file-output-port . cb2ffe) (open-file-input/output-port . cb2ffd) (open-file-input-port . cb2ffc) (open-bytevector-output-port . cb2ffb) (open-bytevector-input-port . cb2ffa) (native-transcoder . cb2ff9) (native-eol-style . cb2ff8) (make-transcoder . cb2ff7) (latin-1-codec . cb2ff6) (make-i/o-write-error . cb2a8e) (make-i/o-read-error . cb2a79) (make-i/o-port-error . cb2b2f) (make-i/o-invalid-position-error . cb2aa5) (make-i/o-filename-error . cb2ac0) (make-i/o-file-protection-error . cb2ad9) (make-i/o-file-is-read-only-error . cb2aee) (make-i/o-file-does-not-exist-error . cb2b18) (make-i/o-file-already-exists-error . cb2b03) (make-i/o-error . cb2a64) (make-i/o-encoding-error . cb2b5f) (make-i/o-decoding-error . cb2b48) (make-custom-textual-output-port . cb2ff5) (make-custom-textual-input/output-port . cb2ff4) (make-custom-textual-input-port . cb2ff3) (make-custom-binary-output-port . cb2ff2) (make-custom-binary-input/output-port . cb2ff1) (make-custom-binary-input-port . cb2ff0) (lookahead-u8 . cb2fee) (lookahead-char . cb2fed) (i/o-write-error? . cb2a90) (i/o-read-error? . cb2a7b) (i/o-port-error? . cb2b33) (i/o-invalid-position-error? . cb2aa9) (i/o-filename-error? . cb2ac4) (i/o-file-protection-error? . cb2adb) (i/o-file-is-read-only-error? . cb2af0) (i/o-file-does-not-exist-error? . cb2b1a) (i/o-file-already-exists-error? . cb2b05) (i/o-error? . cb2a66) (i/o-error-position . cb2aab) (i/o-error-port . cb2b35) (i/o-error-filename . cb2ac6) (i/o-encoding-error? . cb2b63) (i/o-encoding-error-char . cb2b65) (i/o-decoding-error? . cb2b4a) (get-u8 . cb2fec) (get-string-n! . cb2feb) (get-string-n . cb2fea) (get-string-all . cb2fe9) (get-line . cb2fe8) (get-datum . cb2fe7) (get-char . cb2fe6) (get-bytevector-some . cb2fe5) (get-bytevector-n! . cb2fe4) (get-bytevector-n . cb2fe3) (get-bytevector-all . cb2fe2) (flush-output-port . cb2fe1) (close-port . cb2fe0) (call-with-string-output-port . cb2fbf) (call-with-port . cb2fbe) (call-with-bytevector-output-port . cb2fbd) (bytevector->string . cb2fbc) (buffer-mode? . cb2fbb) (binary-port? . cb2fba) (&i/o-encoding . cb2e58) (&i/o-decoding . cb2e57) (&i/o-port . cb2e56) (&i/o-file-does-not-exist . cb2e55) (&i/o-file-already-exists . cb2e54) (&i/o-file-is-read-only . cb2e53) (&i/o-file-protection . cb2e52) (&i/o-filename . cb2e51) (&i/o-invalid-position . cb2e50) (&i/o-write . cb2e4f) (&i/o-read . cb2e4e) (&i/o . cb2e4d) (error-handling-mode . cb2e32) (file-options . cb2e31) (buffer-mode . cb2e30) (eol-style . cb2e2f)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb3143 '(rnrs enums) '(6) '() '() '() '((make-enumeration . cb2fb6) (enum-set=? . cb2fb5) (enum-set-universe . cb2fb4) (enum-set-union . cb2fb3) (enum-set-subset? . cb2fb2) (enum-set-projection . cb2fb1) (enum-set-member? . cb2fb0) (enum-set-intersection . cb2faf) (enum-set-indexer . cb2fae) (enum-set-difference . cb2fad) (enum-set-constructor . cb2fac) (enum-set-complement . cb2fab) (enum-set->list . cb2faa) (define-enumeration . cb2e3d)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb3144 '(rnrs conditions) '(6) '() '() '() '((who-condition? . cb29da) (warning? . cb2952) (violation? . cb2991) (undefined-violation? . cb2a51) (syntax-violation? . cb2a38) (syntax-violation-subform . cb2a3c) (syntax-violation-form . cb2a3a) (syntax-violation . cbe64) (simple-conditions . cb2fa9) (serious-condition? . cb2967) (non-continuable-violation? . cb29f1) (message-condition? . cb293b) (make-who-condition . cb29d6) (make-warning . cb2950) (make-violation . cb298f) (make-undefined-violation . cb2a4f) (make-syntax-violation . cb2a32) (make-serious-condition . cb2965) (make-non-continuable-violation . cb29ef) (make-message-condition . cb2937) (make-lexical-violation . cb2a19) (make-irritants-condition . cb29bb) (make-implementation-restriction-violation . cb2a04) (make-error . cb297a) (make-assertion-violation . cb29a4) (lexical-violation? . cb2a1b) (irritants-condition? . cb29bf) (implementation-restriction-violation? . cb2a06) (error? . cb297c) (condition-who . cb29dc) (condition-predicate . cb2fa8) (condition-message . cb293d) (condition-irritants . cb29c1) (condition-accessor . cb2fa7) (condition . cb2fa6) (assertion-violation? . cb29a6) (condition? . cb2fa5) (&undefined . cb2e4c) (&syntax . cb2e4b) (&lexical . cb2e4a) (&implementation-restriction . cb2e49) (&non-continuable . cb2e48) (&who . cb2e47) (&irritants . cb2e46) (&assertion . cb2e45) (&violation . cb2e44) (&error . cb2e43) (&serious . cb2e42) (&warning . cb2e41) (&message . cb2e40) (&condition . cb2e3f) (define-condition-type . cb2e3e)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb3145 '(rnrs records inspection) '(6) '() '() '() '((record? . cb3052) (record-type-uid . cb3051) (record-type-sealed? . cb3050) (record-type-parent . cb304f) (record-type-opaque? . cb304e) (record-type-name . cb304d) (record-type-generative? . cb304c) (record-type-field-names . cb304b) (record-rtd . cb304a) (record-field-mutable? . cb3049)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb3146 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . cb3059) (record-predicate . cb3058) (record-mutator . cb3057) (record-constructor . cb3056) (record-accessor . cb3055) (make-record-type-descriptor . cb3054) (make-record-constructor-descriptor . cb3053)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb3147 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . cb2e3c) (parent-rtd . cb2e3b) (nongenerative . cb2e3a) (opaque . cb2e39) (sealed . cb2e38) (protocol . cb2e37) (parent . cb2e36) (immutable . cb2e35) (mutable . cb2e34) (fields . cb2e33) (record-constructor-descriptor . cb2e13) (record-type-descriptor . cb2e12)) '() values values '#f '#f '#t '#f) (cb992@cb7de@install-library 'cb3148 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . cb2b93) (&no-nans-rtd . cb2b91) (&no-infinities-rcd . cb2b7e) (&no-infinities-rtd . cb2b7c) (&i/o-encoding-rcd . cb2b69) (&i/o-encoding-rtd . cb2b67) (&i/o-decoding-rcd . cb2b4e) (&i/o-decoding-rtd . cb2b4c) (&i/o-port-rcd . cb2b39) (&i/o-port-rtd . cb2b37) (&i/o-file-does-not-exist-rcd . cb2b1e) (&i/o-file-does-not-exist-rtd . cb2b1c) (&i/o-file-already-exists-rcd . cb2b09) (&i/o-file-already-exists-rtd . cb2b07) (&i/o-file-is-read-only-rcd . cb2af4) (&i/o-file-is-read-only-rtd . cb2af2) (&i/o-file-protection-rcd . cb2adf) (&i/o-file-protection-rtd . cb2add) (&i/o-filename-rcd . cb2aca) (&i/o-filename-rtd . cb2ac8) (&i/o-invalid-position-rcd . cb2aaf) (&i/o-invalid-position-rtd . cb2aad) (&i/o-write-rcd . cb2a94) (&i/o-write-rtd . cb2a92) (&i/o-read-rcd . cb2a7f) (&i/o-read-rtd . cb2a7d) (&i/o-rcd . cb2a6a) (&i/o-rtd . cb2a68) (&undefined-rcd . cb2a55) (&undefined-rtd . cb2a53) (&syntax-rcd . cb2a40) (&syntax-rtd . cb2a3e) (&lexical-rcd . cb2a1f) (&lexical-rtd . cb2a1d) (&implementation-restriction-rcd . cb2a0a) (&implementation-restriction-rtd . cb2a08) (&non-continuable-rcd . cb29f5) (&non-continuable-rtd . cb29f3) (&who-rcd . cb29e0) (&who-rtd . cb29de) (&irritants-rcd . cb29c5) (&irritants-rtd . cb29c3) (&assertion-rcd . cb29aa) (&assertion-rtd . cb29a8) (&violation-rcd . cb2995) (&violation-rtd . cb2993) (&error-rcd . cb2980) (&error-rtd . cb297e) (&serious-rcd . cb296b) (&serious-rtd . cb2969) (&warning-rcd . cb2956) (&warning-rtd . cb2954) (&message-rcd . cb2941) (&message-rtd . cb293f) (&condition-rcd . cb28e2) (&condition-rtd . cb28e0) (syntax-error . cbe60) (syntax-dispatch . cbd84) (pretty-print . cb3128) (eval-core . cb3127) (set-symbol-value! . cb3126) (symbol-value . cb3125) (gensym . cb3124) (void . cb3123) (load . cb2ca2) (interaction-environment . cbe72) (char-ready? . cb3122) (regexp? . cb3121) (read-line . cb3120) (gensym-prefix-set! . cb311f) (ungensym . cb311e) (alist->eq-hash-table . cb311d) (assoc-ref . cb311c) (print . cb311b) (format . cb311a) (host-os . cb3119) (library-path . cb7bd) (standard-library-path . cb3118) (file-newer? . cb3117) (stat-mtime . cb3116) (write-to-file . cb3115) (file->sexp-list . cb3114) (file->list . cb3113) (file->string . cb3112) (digit->integer . cb3111) (call-with-string-input-port . cb3110) (call-with-string-io . cb310f) (string-split . cb310e) (bytevector-for-each . cb310d) (string->regexp . cb310c) (rxmatch . cb310b) (regexp-replace-all . cb310a) (hashtable-for-each . cb3109) (mosh-cache-dir . cb5a7) (call-process . cb3108) (local-tz-offset . cb3107) (microseconds . cb3106) (directory-list . cb3105) (set-current-directory! . cb3104) (expand-path . cb3103) (current-directory . cb3102) (%spawn . cb3101) (%waitpid . cb3100) (simple-struct-name . cb30ff) (simple-struct-set! . cb30fe) (simple-struct-ref . cb30fd) (make-simple-struct . cb30fc) (simple-struct? . cb30fb) (pointer-ref-c-int64 . cb30fa) (pointer-ref-c-int32 . cb30f9) (pointer-ref-c-int16 . cb30f8) (pointer-ref-c-int8 . cb30f7) (pointer-ref-c-uint64 . cb30f6) (pointer-ref-c-uint32 . cb30f5) (pointer-ref-c-uint16 . cb30f4) (pointer-ref-c-uint8 . cb30f3) (pointer-set-c-uint64! . cb30f2) (pointer-set-c-uint32! . cb30f1) (pointer-set-c-uint16! . cb30f0) (pointer-set-c-uint8! . cb30ef) (pointer-set-c-int64! . cb30ee) (pointer-set-c-int32! . cb30ed) (pointer-set-c-int16! . cb30ec) (pointer-set-c-int8! . cb30eb) (pointer-set-c-pointer! . cb30ea) (pointer-set-c-double! . cb30e9) (pointer-set-c-float! . cb30e8) (pointer-set-c-long-long! . cb30e7) (pointer-set-c-long! . cb30e6) (pointer-set-c-int! . cb30e5) (pointer-set-c-short! . cb30e4) (pointer-set-c-char! . cb30e3) (pointer-ref-c-pointer . cb30e2) (pointer-ref-c-double . cb30e1) (pointer-ref-c-float . cb30e0) (pointer-ref-c-unsigned-long-long . cb30df) (pointer-ref-c-signed-long-long . cb30de) (pointer-ref-c-unsigned-long . cb30dd) (pointer-ref-c-signed-long . cb30dc) (pointer-ref-c-unsigned-int . cb30db) (pointer-ref-c-signed-int . cb30da) (pointer-ref-c-unsigned-short . cb30d9) (pointer-ref-c-signed-short . cb30d8) (pointer-ref-c-unsigned-char . cb30d7) (pointer-ref-c-signed-char . cb30d6) (pointer->integer . cb30d5) (integer->pointer . cb30d4) (pointer? . cb30d3) (shared-errno . cb30d2) (get-c-address . cb30d1) (obj->integer . cb30d0) (u8-list->c-procedure . cb30cf) (%ffi-free-c-callback-trampoline . cb30ce) (%ffi-make-c-callback-trampoline . cb30cd) (%ffi-free . cb30cc) (%ffi-malloc . cb30cb) (%ffi-supported? . cb30ca) (%ffi-pointer->string . cb30c9) (%ffi-call . cb30c8) (%ffi-lookup . cb30c7) (%ffi-open . cb30c6) (null-terminated-utf8->string . cb30c5) (null-terminated-bytevector->string . cb30c4) (%fork . cb30c3) (%pipe . cb30c2) (p . cb30c1) (open-output-string . cb30c0) (get-output-string . cb30bf) (file-stat-ctime . cb30be) (file-stat-atime . cb30bd) (file-stat-mtime . cb30bc) (file-size-in-bytes . cb30bb) (file-writable? . cb30ba) (file-executable? . cb30b9) (file-readable? . cb30b8) (file-regular? . cb30b7) (file-symbolic-link? . cb30b6) (file-directory? . cb30b5) (create-symbolic-link . cb30b4) (rename-file . cb30b3) (delete-directory . cb30b2) (create-directory . cb30b1) (create-mosh-cache-dir . cb30b0) (get-environment-variables . cb30af) (current-exception-handler . cb30ae) (get-environment-variable . cb30ad) (join-wraps . cb30ac) (id->real-label . cb30ab) (same-marks? . cb30aa) (same-marks*? . cb30a9) (get-timeofday . cb30a8) (get-command-line . cb30a7) (sys-display . cb30a6) (whereis . cb30a5) (register . cb30a4) (vm-join! . cb30a3) (vm-set-value! . cb30a2) (vm? . cb30a1) (main-vm? . cb30a0) (vm-eval . cb309f) (vm-self . cb309e) (vm-start! . cb309d) (make-vm . cb309c) (mutex-try-lock! . cb309b) (mutex-unlock! . cb309a) (mutex-lock! . cb3099) (mutex? . cb3098) (make-mutex . cb3097) (condition-variable-notify-all! . cb3096) (condition-variable-notify! . cb3095) (condition-variable-wait! . cb3094) (make-condition-variable . cb3093) (mosh-executable-path . cb3092) (make-file-options . cb3091) (for-each-with-index . cb3090) (source-info . cb308f) (instruction? . cb308e) (instruction->integer . cb308d) (instruction->symbol . cb308c) (closure->list . cb308b) (make-compiler-instruction . cb308a) (make-instruction . cb3089) (set-source-info! . cb3088) (bignum? . cb3087) (fast-equal? . cb3086) (fasl-read . cb3085) (fasl-write . cb3084) (time-usage . cb3083) (os-constant . cb3082) (disasm . cb3081) (make-parameter . cb5a5) (socket-port . cb3080) (socket-shutdown . cb307f) (socket-close . cb307e) (socket-send . cb307d) (socket-recv! . cb307c) (socket-recv . cb307b) (make-server-socket . cb307a) (make-client-socket . cb3079) (socket-accept . cb3078) (socket? . cb3077) (string-upcase . cb3076) (string-titlecase . cb3075) (string-normalize-nfkd . cb3074) (string-normalize-nfkc . cb3073) (string-normalize-nfd . cb3072) (string-normalize-nfc . cb3071) (string-foldcase . cb3070) (string-downcase . cb306f) (string-ci>? . cb306e) (string-ci>=? . cb306d) (string-ci=? . cb306c) (string-ci<? . cb306b) (string-ci<=? . cb306a) (char-whitespace? . cb3069) (char-upper-case? . cb3068) (char-title-case? . cb3067) (char-numeric? . cb3066) (char-lower-case? . cb3065) (char-general-category . cb3064) (char-upcase . cb3063) (char-titlecase . cb3062) (char-foldcase . cb3061) (char-downcase . cb3060) (char-ci>? . cb305f) (char-ci>=? . cb305e) (char-ci=? . cb305d) (char-ci<? . cb305c) (char-ci<=? . cb305b) (char-alphabetic? . cb305a) (make-variable-transformer . cbbaf) (identifier? . cbe66) (generate-temporaries . cbe52) (free-identifier=? . cbe54) (syntax->datum . cbe6a) (datum->syntax . cbe68) (bound-identifier=? . cbe56) (record-type-descriptor? . cb3059) (record-predicate . cb3058) (record-mutator . cb3057) (record-constructor . cb3056) (record-accessor . cb3055) (make-record-type-descriptor . cb3054) (make-record-constructor-descriptor . cb3053) (record? . cb3052) (record-type-uid . cb3051) (record-type-sealed? . cb3050) (record-type-parent . cb304f) (record-type-opaque? . cb304e) (record-type-name . cb304d) (record-type-generative? . cb304c) (record-type-field-names . cb304b) (record-rtd . cb304a) (record-field-mutable? . cb3049) (delete-file . cb3048) (file-exists? . cb3047) (vector-sort! . cb3046) (vector-sort . cb3045) (list-sort . cb3044) (symbol-hash . cb3043) (string-ci-hash . cb3042) (string-hash . cb3041) (equal-hash . cb3040) (hashtable-equivalence-function . cb303f) (make-hashtable . cb303e) (hashtable-hash-function . cb303d) (make-eqv-hashtable . cb303c) (make-eq-hashtable . cb303b) (hashtable? . cb303a) (hashtable-update! . cb3039) (hashtable-size . cb3038) (hashtable-set! . cb3037) (hashtable-ref . cb3036) (hashtable-mutable? . cb3035) (hashtable-keys . cb3034) (hashtable-entries . cb3033) (hashtable-delete! . cb3032) (hashtable-copy . cb3031) (hashtable-contains? . cb3030) (hashtable-clear! . cb302f) (call-with-output-file . cb302e) (call-with-input-file . cb302d) (write-char . cb302c) (write . cb302b) (with-output-to-file . cb302a) (with-input-from-file . cb3029) (read-char . cb3028) (read . cb3027) (peek-char . cb3026) (open-output-file . cb3025) (open-input-file . cb3024) (newline . cb3023) (display . cb3022) (close-output-port . cb3021) (close-input-port . cb3020) (eof-object? . cb301f) (eof-object . cb301e) (current-error-port . cb301d) (current-output-port . cb301c) (current-input-port . cb301b) (output-port? . cb301a) (input-port? . cb3019) (utf-8-codec . cb3018) (utf-16-codec . cb3017) (transcoder-error-handling-mode . cb3016) (transcoder-eol-style . cb3015) (transcoder-codec . cb3014) (transcoded-port . cb3013) (textual-port? . cb3012) (string->bytevector . cb3011) (standard-output-port . cb3010) (standard-input-port . cb300f) (standard-error-port . cb300e) (set-port-position! . cb300d) (put-u8 . cb300c) (put-string . cb300b) (put-datum . cb300a) (put-char . cb3009) (put-bytevector . cb3008) (port? . cb3007) (port-transcoder . cb3006) (port-position . cb3005) (port-has-set-port-position!? . cb3004) (port-has-port-position? . cb3003) (port-eof? . cb3002) (output-port-buffer-mode . cb3001) (open-string-output-port . cb3000) (open-string-input-port . cb2fff) (open-file-output-port . cb2ffe) (open-file-input/output-port . cb2ffd) (open-file-input-port . cb2ffc) (open-bytevector-output-port . cb2ffb) (open-bytevector-input-port . cb2ffa) (native-transcoder . cb2ff9) (native-eol-style . cb2ff8) (make-transcoder . cb2ff7) (latin-1-codec . cb2ff6) (make-i/o-write-error . cb2a8e) (make-i/o-read-error . cb2a79) (make-i/o-port-error . cb2b2f) (make-i/o-invalid-position-error . cb2aa5) (make-i/o-filename-error . cb2ac0) (make-i/o-file-protection-error . cb2ad9) (make-i/o-file-is-read-only-error . cb2aee) (make-i/o-file-does-not-exist-error . cb2b18) (make-i/o-file-already-exists-error . cb2b03) (make-i/o-error . cb2a64) (make-i/o-encoding-error . cb2b5f) (make-i/o-decoding-error . cb2b48) (make-custom-textual-output-port . cb2ff5) (make-custom-textual-input/output-port . cb2ff4) (make-custom-textual-input-port . cb2ff3) (make-custom-binary-output-port . cb2ff2) (make-custom-binary-input/output-port . cb2ff1) (make-custom-binary-input-port . cb2ff0) (make-bytevector . cb2fef) (lookahead-u8 . cb2fee) (lookahead-char . cb2fed) (i/o-write-error? . cb2a90) (i/o-read-error? . cb2a7b) (i/o-port-error? . cb2b33) (i/o-invalid-position-error? . cb2aa9) (i/o-filename-error? . cb2ac4) (i/o-file-protection-error? . cb2adb) (i/o-file-is-read-only-error? . cb2af0) (i/o-file-does-not-exist-error? . cb2b1a) (i/o-file-already-exists-error? . cb2b05) (i/o-error? . cb2a66) (i/o-error-position . cb2aab) (i/o-error-port . cb2b35) (i/o-error-filename . cb2ac6) (i/o-encoding-error? . cb2b63) (i/o-encoding-error-char . cb2b65) (i/o-decoding-error? . cb2b4a) (get-u8 . cb2fec) (get-string-n! . cb2feb) (get-string-n . cb2fea) (get-string-all . cb2fe9) (get-line . cb2fe8) (get-datum . cb2fe7) (get-char . cb2fe6) (get-bytevector-some . cb2fe5) (get-bytevector-n! . cb2fe4) (get-bytevector-n . cb2fe3) (get-bytevector-all . cb2fe2) (flush-output-port . cb2fe1) (close-port . cb2fe0) (scheme-report-environment . cbe40) (quotient . cb2fdf) (null-environment . cbe3e) (remainder . cb2fde) (modulo . cb2fdd) (inexact->exact . cb2fdc) (force . cb2fdb) (exact->inexact . cb2fda) (make-promise . cb2fd9) (exit . cb2fd8) (command-line . cb2c9c) (string-fill! . cb2fd7) (string-set! . cb2fd6) (set-cdr! . cb2fd5) (set-car! . cb2fd4) (remove . cb2fd3) (remv . cb2fd2) (remp . cb2fd1) (remq . cb2fd0) (partition . cb2fcf) (memv . cb2fce) (memq . cb2fcd) (memp . cb2fcc) (member . cb2fcb) (exists . cb2fca) (for-all . cb2fc9) (fold-right . cb2fc8) (fold-left . cb2fc7) (find . cb2fc6) (filter . cb2fc5) (cons* . cb2fc4) (assv . cb2fc3) (assq . cb2fc2) (assp . cb2fc1) (assoc . cb2fc0) (call-with-string-output-port . cb2fbf) (call-with-port . cb2fbe) (call-with-bytevector-output-port . cb2fbd) (bytevector->string . cb2fbc) (buffer-mode? . cb2fbb) (binary-port? . cb2fba) (with-exception-handler . cb2fb9) (raise-continuable . cb2fb8) (raise . cb2fb7) (eval . cbe44) (environment . cbe3c) (make-enumeration . cb2fb6) (enum-set=? . cb2fb5) (enum-set-universe . cb2fb4) (enum-set-union . cb2fb3) (enum-set-subset? . cb2fb2) (enum-set-projection . cb2fb1) (enum-set-member? . cb2fb0) (enum-set-intersection . cb2faf) (enum-set-indexer . cb2fae) (enum-set-difference . cb2fad) (enum-set-constructor . cb2fac) (enum-set-complement . cb2fab) (enum-set->list . cb2faa) (who-condition? . cb29da) (warning? . cb2952) (violation? . cb2991) (undefined-violation? . cb2a51) (syntax-violation? . cb2a38) (syntax-violation-subform . cb2a3c) (syntax-violation-form . cb2a3a) (syntax-violation . cbe64) (simple-conditions . cb2fa9) (serious-condition? . cb2967) (non-continuable-violation? . cb29f1) (message-condition? . cb293b) (make-who-condition . cb29d6) (make-warning . cb2950) (make-violation . cb298f) (make-undefined-violation . cb2a4f) (make-syntax-violation . cb2a32) (make-serious-condition . cb2965) (make-non-continuable-violation . cb29ef) (make-message-condition . cb2937) (make-lexical-violation . cb2a19) (make-irritants-condition . cb29bb) (make-implementation-restriction-violation . cb2a04) (make-error . cb297a) (make-assertion-violation . cb29a4) (lexical-violation? . cb2a1b) (irritants-condition? . cb29bf) (implementation-restriction-violation? . cb2a06) (error? . cb297c) (condition-who . cb29dc) (condition-predicate . cb2fa8) (condition-message . cb293d) (condition-irritants . cb29c1) (condition-accessor . cb2fa7) (condition . cb2fa6) (assertion-violation? . cb29a6) (condition? . cb2fa5) (utf32->string . cb2fa4) (utf16->string . cb2fa3) (utf8->string . cb2fa2) (uint-list->bytevector . cb2fa1) (u8-list->bytevector . cb2fa0) (string->utf8 . cb2f9f) (string->utf32 . cb2f9e) (string->utf16 . cb2f9d) (sint-list->bytevector . cb2f9c) (native-endianness . cb2f9b) (bytevector? . cb2f9a) (bytevector=? . cb2f99) (bytevector-uint-set! . cb2f98) (bytevector-uint-ref . cb2f97) (bytevector-u8-set! . cb2f96) (bytevector-u8-ref . cb2f95) (bytevector-u64-set! . cb2f94) (bytevector-u64-ref . cb2f93) (bytevector-u64-native-set! . cb2f92) (bytevector-u64-native-ref . cb2f91) (bytevector-u32-set! . cb2f90) (bytevector-u32-ref . cb2f8f) (bytevector-u32-native-set! . cb2f8e) (bytevector-u32-native-ref . cb2f8d) (bytevector-u16-set! . cb2f8c) (bytevector-u16-ref . cb2f8b) (bytevector-u16-native-set! . cb2f8a) (bytevector-u16-native-ref . cb2f89) (bytevector-sint-set! . cb2f88) (bytevector-sint-ref . cb2f87) (bytevector-s8-set! . cb2f86) (bytevector-s8-ref . cb2f85) (bytevector-s64-set! . cb2f84) (bytevector-s64-ref . cb2f83) (bytevector-s64-native-set! . cb2f82) (bytevector-s64-native-ref . cb2f81) (bytevector-s32-set! . cb2f80) (bytevector-s32-ref . cb2f7f) (bytevector-s32-native-set! . cb2f7e) (bytevector-s32-native-ref . cb2f7d) (bytevector-s16-set! . cb2f7c) (bytevector-s16-ref . cb2f7b) (bytevector-s16-native-set! . cb2f7a) (bytevector-s16-native-ref . cb2f79) (bytevector-length . cb2f78) (bytevector-ieee-single-ref . cb2f77) (bytevector-ieee-single-set! . cb2f76) (bytevector-ieee-single-native-set! . cb2f75) (bytevector-ieee-single-native-ref . cb2f74) (bytevector-ieee-double-set! . cb2f73) (bytevector-ieee-double-ref . cb2f72) (bytevector-ieee-double-native-set! . cb2f71) (bytevector-ieee-double-native-ref . cb2f70) (bytevector-fill! . cb2f6f) (bytevector-copy! . cb2f6e) (bytevector-copy . cb2f6d) (bytevector->uint-list . cb2f6c) (bytevector->u8-list . cb2f6b) (bytevector->sint-list . cb2f6a) (no-nans-violation? . cb2b8f) (no-infinities-violation? . cb2b7a) (make-no-nans-violation . cb2b8d) (make-no-infinities-violation . cb2b78) (real->flonum . cb2f69) (flzero? . cb2f68) (fltruncate . cb2f67) (fltan . cb2f66) (flsqrt . cb2f65) (flsin . cb2f64) (flround . cb2f63) (flpositive? . cb2f62) (flonum? . cb2f61) (flodd? . cb2f60) (flnumerator . cb2f5f) (flnegative? . cb2f5e) (flnan? . cb2f5d) (flmod0 . cb2f5c) (flmod . cb2f5b) (flmin . cb2f5a) (flmax . cb2f59) (fllog . cb2f58) (flinteger? . cb2f57) (flinfinite? . cb2f56) (flfloor . cb2f55) (flfinite? . cb2f54) (flexpt . cb2f53) (flexp . cb2f52) (fleven? . cb2f51) (fldiv0-and-mod0 . cb2f50) (fldiv0 . cb2f4f) (fldiv-and-mod . cb2f4e) (fldiv . cb2f4d) (fldenominator . cb2f4c) (flcos . cb2f4b) (flceiling . cb2f4a) (flatan . cb2f49) (flasin . cb2f48) (flacos . cb2f47) (flabs . cb2f46) (fl>? . cb2f45) (fl>=? . cb2f44) (fl=? . cb2f43) (fl<? . cb2f42) (fl<=? . cb2f41) (fl/ . cb2f40) (fl- . cb2f3f) (fl+ . cb2f3e) (fl* . cb2f3d) (fixnum->flonum . cb2f3c) (fxzero? . cb2f3b) (fxxor . cb2f3a) (fxrotate-bit-field . cb2f39) (fxreverse-bit-field . cb2f38) (fxpositive? . cb2f37) (fxodd? . cb2f36) (fxnot . cb2f35) (fxnegative? . cb2f34) (fxmod0 . cb2f33) (fxmod . cb2f32) (fxmin . cb2f31) (fxmax . cb2f30) (fxlength . cb2f2f) (fxior . cb2f2e) (fxif . cb2f2d) (fxfirst-bit-set . cb2f2c) (fxeven? . cb2f2b) (fxdiv0-and-mod0 . cb2f2a) (fxdiv0 . cb2f29) (fxdiv-and-mod . cb2f28) (fxdiv . cb2f27) (fxcopy-bit-field . cb2f26) (fxcopy-bit . cb2f25) (fxbit-set? . cb2f24) (fxbit-field . cb2f23) (fxbit-count . cb2f22) (fxarithmetic-shift-right . cb2f21) (fxarithmetic-shift-left . cb2f20) (fxarithmetic-shift . cb2f1f) (fxand . cb2f1e) (fx>? . cb2f1d) (fx>=? . cb2f1c) (fx=? . cb2f1b) (fx<? . cb2f1a) (fx<=? . cb2f19) (fx-/carry . cb2f18) (fx- . cb2f17) (fx+/carry . cb2f16) (fx+ . cb2f15) (fx*/carry . cb2f14) (fx* . cb2f13) (greatest-fixnum . cb2f12) (least-fixnum . cb2f11) (fixnum-width . cb2f10) (fixnum? . cb2f0f) (bitwise-rotate-bit-field . cb2f0e) (bitwise-reverse-bit-field . cb2f0d) (bitwise-length . cb2f0c) (bitwise-if . cb2f0b) (bitwise-first-bit-set . cb2f0a) (bitwise-copy-bit-field . cb2f09) (bitwise-copy-bit . cb2f08) (bitwise-bit-set? . cb2f07) (bitwise-bit-field . cb2f06) (bitwise-bit-count . cb2f05) (bitwise-xor . cb2f04) (bitwise-ior . cb2f03) (bitwise-and . cb2f02) (bitwise-not . cb2f01) (bitwise-arithmetic-shift-right . cb2f00) (bitwise-arithmetic-shift-left . cb2eff) (bitwise-arithmetic-shift . cb2efe) (zero? . cb2efd) (vector? . cb2efc) (vector-set! . cb2efb) (vector-ref . cb2efa) (vector-map . cb2ef9) (vector-length . cb2ef8) (vector-for-each . cb2ef7) (vector-fill! . cb2ef6) (vector->list . cb2ef5) (vector . cb2ef4) (values . cb2ef3) (truncate . cb2ef2) (tan . cb2ef1) (symbol? . cb2ef0) (symbol=? . cb2eef) (symbol->string . cb2eee) (substring . cb2eed) (string? . cb2eec) (string>? . cb2eeb) (string>=? . cb2eea) (string=? . cb2ee9) (string<? . cb2ee8) (string<=? . cb2ee7) (string-ref . cb2ee6) (string-length . cb2ee5) (string-for-each . cb2ee4) (string-copy . cb2ee3) (string-append . cb2ee2) (string->symbol . cb2ee1) (string->number . cb2ee0) (string->list . cb2edf) (string . cb2ede) (sqrt . cb2edd) (sin . cb2edc) (round . cb2edb) (reverse . cb2eda) (real? . cb2ed9) (real-valued? . cb2ed8) (real-part . cb2ed7) (rationalize . cb2ed6) (rational? . cb2ed5) (rational-valued? . cb2ed4) (procedure? . cb2ed3) (positive? . cb2ed2) (pair? . cb2ed1) (odd? . cb2ed0) (numerator . cb2ecf) (number? . cb2ece) (number->string . cb2ecd) (null? . cb2ecc) (not . cb2ecb) (negative? . cb2eca) (nan? . cb2ec9) (min . cb2ec8) (max . cb2ec7) (map . cb2ec6) (make-vector . cb2ec5) (make-string . cb2ec4) (make-rectangular . cb2ec3) (make-polar . cb2ec2) (magnitude . cb2ec1) (log . cb2ec0) (list? . cb2ebf) (list-tail . cb2ebe) (list-ref . cb2ebd) (list->vector . cb2ebc) (list->string . cb2ebb) (list . cb2eba) (length . cb2eb9) (lcm . cb2eb8) (integer? . cb2eb7) (integer-valued? . cb2eb6) (integer->char . cb2eb5) (infinite? . cb2eb4) (inexact? . cb2eb3) (inexact . cb2eb2) (imag-part . cb2eb1) (gcd . cb2eb0) (for-each . cb2eaf) (floor . cb2eae) (finite? . cb2ead) (expt . cb2eac) (exp . cb2eab) (exact? . cb2eaa) (exact-integer-sqrt . cb2ea9) (exact . cb2ea8) (even? . cb2ea7) (error . cb2ea6) (eqv? . cb2ea5) (equal? . cb2ea4) (eq? . cb2ea3) (dynamic-wind . cb2ea2) (div0-and-mod0 . cb2ea1) (mod0 . cb2ea0) (div0 . cb2e9f) (div-and-mod . cb2e9e) (mod . cb2e9d) (div . cb2e9c) (denominator . cb2e9b) (cos . cb2e9a) (cons . cb2e99) (complex? . cb2e98) (char? . cb2e97) (char>? . cb2e96) (char>=? . cb2e95) (char=? . cb2e94) (char<? . cb2e93) (char<=? . cb2e92) (char->integer . cb2e91) (ceiling . cb2e90) (call-with-values . cb2e8f) (call/cc . cb2e8e) (call-with-current-continuation . cb2e8d) (cddddr . cb2e8c) (cdddar . cb2e8b) (cddadr . cb2e8a) (cddaar . cb2e89) (cdaddr . cb2e88) (cdadar . cb2e87) (cdaadr . cb2e86) (cdaaar . cb2e85) (cadddr . cb2e84) (caddar . cb2e83) (cadadr . cb2e82) (cadaar . cb2e81) (caaddr . cb2e80) (caadar . cb2e7f) (caaadr . cb2e7e) (caaaar . cb2e7d) (cdddr . cb2e7c) (cddar . cb2e7b) (cdadr . cb2e7a) (cdaar . cb2e79) (caddr . cb2e78) (cadar . cb2e77) (caadr . cb2e76) (caaar . cb2e75) (cddr . cb2e74) (cdar . cb2e73) (cadr . cb2e72) (caar . cb2e71) (cdr . cb2e70) (car . cb2e6f) (boolean? . cb2e6e) (boolean=? . cb2e6d) (atan . cb2e6c) (assertion-violation . cb2e6b) (assertion-error . cbe5e) (asin . cb2e6a) (apply . cb2e69) (append . cb2e68) (angle . cb2e67) (acos . cb2e66) (abs . cb2e65) (/ . cb2e64) (* . cb2e63) (- . cb2e62) (+ . cb2e61) (>= . cb2e60) (> . cb2e5f) (= . cb2e5e) (<= . cb2e5d) (< . cb2e5c) (library . cb2e5b) (&no-nans . cb2e5a) (&no-infinities . cb2e59) (&i/o-encoding . cb2e58) (&i/o-decoding . cb2e57) (&i/o-port . cb2e56) (&i/o-file-does-not-exist . cb2e55) (&i/o-file-already-exists . cb2e54) (&i/o-file-is-read-only . cb2e53) (&i/o-file-protection . cb2e52) (&i/o-filename . cb2e51) (&i/o-invalid-position . cb2e50) (&i/o-write . cb2e4f) (&i/o-read . cb2e4e) (&i/o . cb2e4d) (&undefined . cb2e4c) (&syntax . cb2e4b) (&lexical . cb2e4a) (&implementation-restriction . cb2e49) (&non-continuable . cb2e48) (&who . cb2e47) (&irritants . cb2e46) (&assertion . cb2e45) (&violation . cb2e44) (&error . cb2e43) (&serious . cb2e42) (&warning . cb2e41) (&message . cb2e40) (&condition . cb2e3f) (define-condition-type . cb2e3e) (define-enumeration . cb2e3d) (define-record-type . cb2e3c) (parent-rtd . cb2e3b) (nongenerative . cb2e3a) (opaque . cb2e39) (sealed . cb2e38) (protocol . cb2e37) (parent . cb2e36) (immutable . cb2e35) (mutable . cb2e34) (fields . cb2e33) (error-handling-mode . cb2e32) (file-options . cb2e31) (buffer-mode . cb2e30) (eol-style . cb2e2f) (guard . cb2e2e) (trace-define . cb2e2d) (trace-lambda . cb2e2c) (unsyntax-splicing . cb2e2b) (unsyntax . cb2e2a) (unquote-splicing . cb2e29) (unquote . cb2e28) (_ . cb2e27) (else . cb2e26) (=> . cb2e25) (... . cb2e24) (assert . cb2e23) (endianness . cb2e22) (delay . cb2e21) (time . cb2e20) (do . cb2e1f) (cond . cb2e1e) (let* . cb2e1d) (let*-values . cb2e1c) (let-values . cb2e1b) (identifier-syntax . cb2e1a) (with-syntax . cb2e19) (quasisyntax . cb2e18) (quasiquote . cb2e17) (syntax-rules . cb2e16) (include . cb2e15) (define-struct . cb2e14) (record-constructor-descriptor . cb2e13) (record-type-descriptor . cb2e12) (case . cb2e11) (parameterize . cb2e10) (unless . cb2e0f) (when . cb2e0e) (or . cb2e0d) (and . cb2e0c) (if . cb2e0b) (let . cb2e0a) (letrec* . cb2e09) (letrec . cb2e08) (type-descriptor . cb2e07) (case-lambda . cb2e06) (lambda . cb2e05) (syntax . cb2e04) (syntax-case . cb2e03) (quote . cb2e02) (foreign-call . cb2e01) (letrec-syntax . cb2e00) (let-syntax . cb2dff) (set! . cb2dfe) (import . cb2dfd) (begin . cb2dfc) (module . cb2dfb) (define-syntax . cb2dfa) (define . cb2df9)) '((cb2b93 core-prim . &no-nans-rcd) (cb2b91 core-prim . &no-nans-rtd) (cb2b7e core-prim . &no-infinities-rcd) (cb2b7c core-prim . &no-infinities-rtd) (cb2b69 core-prim . &i/o-encoding-rcd) (cb2b67 core-prim . &i/o-encoding-rtd) (cb2b4e core-prim . &i/o-decoding-rcd) (cb2b4c core-prim . &i/o-decoding-rtd) (cb2b39 core-prim . &i/o-port-rcd) (cb2b37 core-prim . &i/o-port-rtd) (cb2b1e core-prim . &i/o-file-does-not-exist-rcd) (cb2b1c core-prim . &i/o-file-does-not-exist-rtd) (cb2b09 core-prim . &i/o-file-already-exists-rcd) (cb2b07 core-prim . &i/o-file-already-exists-rtd) (cb2af4 core-prim . &i/o-file-is-read-only-rcd) (cb2af2 core-prim . &i/o-file-is-read-only-rtd) (cb2adf core-prim . &i/o-file-protection-rcd) (cb2add core-prim . &i/o-file-protection-rtd) (cb2aca core-prim . &i/o-filename-rcd) (cb2ac8 core-prim . &i/o-filename-rtd) (cb2aaf core-prim . &i/o-invalid-position-rcd) (cb2aad core-prim . &i/o-invalid-position-rtd) (cb2a94 core-prim . &i/o-write-rcd) (cb2a92 core-prim . &i/o-write-rtd) (cb2a7f core-prim . &i/o-read-rcd) (cb2a7d core-prim . &i/o-read-rtd) (cb2a6a core-prim . &i/o-rcd) (cb2a68 core-prim . &i/o-rtd) (cb2a55 core-prim . &undefined-rcd) (cb2a53 core-prim . &undefined-rtd) (cb2a40 core-prim . &syntax-rcd) (cb2a3e core-prim . &syntax-rtd) (cb2a1f core-prim . &lexical-rcd) (cb2a1d core-prim . &lexical-rtd) (cb2a0a core-prim . &implementation-restriction-rcd) (cb2a08 core-prim . &implementation-restriction-rtd) (cb29f5 core-prim . &non-continuable-rcd) (cb29f3 core-prim . &non-continuable-rtd) (cb29e0 core-prim . &who-rcd) (cb29de core-prim . &who-rtd) (cb29c5 core-prim . &irritants-rcd) (cb29c3 core-prim . &irritants-rtd) (cb29aa core-prim . &assertion-rcd) (cb29a8 core-prim . &assertion-rtd) (cb2995 core-prim . &violation-rcd) (cb2993 core-prim . &violation-rtd) (cb2980 core-prim . &error-rcd) (cb297e core-prim . &error-rtd) (cb296b core-prim . &serious-rcd) (cb2969 core-prim . &serious-rtd) (cb2956 core-prim . &warning-rcd) (cb2954 core-prim . &warning-rtd) (cb2941 core-prim . &message-rcd) (cb293f core-prim . &message-rtd) (cb28e2 core-prim . &condition-rcd) (cb28e0 core-prim . &condition-rtd) (cbe60 core-prim . syntax-error) (cbd84 core-prim . syntax-dispatch) (cb3128 core-prim . pretty-print) (cb3127 core-prim . eval-core) (cb3126 core-prim . set-symbol-value!) (cb3125 core-prim . symbol-value) (cb3124 core-prim . gensym) (cb3123 core-prim . void) (cb2ca2 core-prim . load) (cbe72 core-prim . interaction-environment) (cb3122 core-prim . char-ready?) (cb3121 core-prim . regexp?) (cb3120 core-prim . read-line) (cb311f core-prim . gensym-prefix-set!) (cb311e core-prim . ungensym) (cb311d core-prim . alist->eq-hash-table) (cb311c core-prim . assoc-ref) (cb311b core-prim . print) (cb311a core-prim . format) (cb3119 core-prim . host-os) (cb7bd core-prim . library-path) (cb3118 core-prim . standard-library-path) (cb3117 core-prim . file-newer?) (cb3116 core-prim . stat-mtime) (cb3115 core-prim . write-to-file) (cb3114 core-prim . file->sexp-list) (cb3113 core-prim . file->list) (cb3112 core-prim . file->string) (cb3111 core-prim . digit->integer) (cb3110 core-prim . call-with-string-input-port) (cb310f core-prim . call-with-string-io) (cb310e core-prim . string-split) (cb310d core-prim . bytevector-for-each) (cb310c core-prim . string->regexp) (cb310b core-prim . rxmatch) (cb310a core-prim . regexp-replace-all) (cb3109 core-prim . hashtable-for-each) (cb5a7 core-prim . mosh-cache-dir) (cb3108 core-prim . call-process) (cb3107 core-prim . local-tz-offset) (cb3106 core-prim . microseconds) (cb3105 core-prim . directory-list) (cb3104 core-prim . set-current-directory!) (cb3103 core-prim . expand-path) (cb3102 core-prim . current-directory) (cb3101 core-prim . %spawn) (cb3100 core-prim . %waitpid) (cb30ff core-prim . simple-struct-name) (cb30fe core-prim . simple-struct-set!) (cb30fd core-prim . simple-struct-ref) (cb30fc core-prim . make-simple-struct) (cb30fb core-prim . simple-struct?) (cb30fa core-prim . pointer-ref-c-int64) (cb30f9 core-prim . pointer-ref-c-int32) (cb30f8 core-prim . pointer-ref-c-int16) (cb30f7 core-prim . pointer-ref-c-int8) (cb30f6 core-prim . pointer-ref-c-uint64) (cb30f5 core-prim . pointer-ref-c-uint32) (cb30f4 core-prim . pointer-ref-c-uint16) (cb30f3 core-prim . pointer-ref-c-uint8) (cb30f2 core-prim . pointer-set-c-uint64!) (cb30f1 core-prim . pointer-set-c-uint32!) (cb30f0 core-prim . pointer-set-c-uint16!) (cb30ef core-prim . pointer-set-c-uint8!) (cb30ee core-prim . pointer-set-c-int64!) (cb30ed core-prim . pointer-set-c-int32!) (cb30ec core-prim . pointer-set-c-int16!) (cb30eb core-prim . pointer-set-c-int8!) (cb30ea core-prim . pointer-set-c-pointer!) (cb30e9 core-prim . pointer-set-c-double!) (cb30e8 core-prim . pointer-set-c-float!) (cb30e7 core-prim . pointer-set-c-long-long!) (cb30e6 core-prim . pointer-set-c-long!) (cb30e5 core-prim . pointer-set-c-int!) (cb30e4 core-prim . pointer-set-c-short!) (cb30e3 core-prim . pointer-set-c-char!) (cb30e2 core-prim . pointer-ref-c-pointer) (cb30e1 core-prim . pointer-ref-c-double) (cb30e0 core-prim . pointer-ref-c-float) (cb30df core-prim . pointer-ref-c-unsigned-long-long) (cb30de core-prim . pointer-ref-c-signed-long-long) (cb30dd core-prim . pointer-ref-c-unsigned-long) (cb30dc core-prim . pointer-ref-c-signed-long) (cb30db core-prim . pointer-ref-c-unsigned-int) (cb30da core-prim . pointer-ref-c-signed-int) (cb30d9 core-prim . pointer-ref-c-unsigned-short) (cb30d8 core-prim . pointer-ref-c-signed-short) (cb30d7 core-prim . pointer-ref-c-unsigned-char) (cb30d6 core-prim . pointer-ref-c-signed-char) (cb30d5 core-prim . pointer->integer) (cb30d4 core-prim . integer->pointer) (cb30d3 core-prim . pointer?) (cb30d2 core-prim . shared-errno) (cb30d1 core-prim . get-c-address) (cb30d0 core-prim . obj->integer) (cb30cf core-prim . u8-list->c-procedure) (cb30ce core-prim . %ffi-free-c-callback-trampoline) (cb30cd core-prim . %ffi-make-c-callback-trampoline) (cb30cc core-prim . %ffi-free) (cb30cb core-prim . %ffi-malloc) (cb30ca core-prim . %ffi-supported?) (cb30c9 core-prim . %ffi-pointer->string) (cb30c8 core-prim . %ffi-call) (cb30c7 core-prim . %ffi-lookup) (cb30c6 core-prim . %ffi-open) (cb30c5 core-prim . null-terminated-utf8->string) (cb30c4 core-prim . null-terminated-bytevector->string) (cb30c3 core-prim . %fork) (cb30c2 core-prim . %pipe) (cb30c1 core-prim . p) (cb30c0 core-prim . open-output-string) (cb30bf core-prim . get-output-string) (cb30be core-prim . file-stat-ctime) (cb30bd core-prim . file-stat-atime) (cb30bc core-prim . file-stat-mtime) (cb30bb core-prim . file-size-in-bytes) (cb30ba core-prim . file-writable?) (cb30b9 core-prim . file-executable?) (cb30b8 core-prim . file-readable?) (cb30b7 core-prim . file-regular?) (cb30b6 core-prim . file-symbolic-link?) (cb30b5 core-prim . file-directory?) (cb30b4 core-prim . create-symbolic-link) (cb30b3 core-prim . rename-file) (cb30b2 core-prim . delete-directory) (cb30b1 core-prim . create-directory) (cb30b0 core-prim . create-mosh-cache-dir) (cb30af core-prim . get-environment-variables) (cb30ae core-prim . current-exception-handler) (cb30ad core-prim . get-environment-variable) (cb30ac core-prim . join-wraps) (cb30ab core-prim . id->real-label) (cb30aa core-prim . same-marks?) (cb30a9 core-prim . same-marks*?) (cb30a8 core-prim . get-timeofday) (cb30a7 core-prim . get-command-line) (cb30a6 core-prim . sys-display) (cb30a5 core-prim . whereis) (cb30a4 core-prim . register) (cb30a3 core-prim . vm-join!) (cb30a2 core-prim . vm-set-value!) (cb30a1 core-prim . vm?) (cb30a0 core-prim . main-vm?) (cb309f core-prim . vm-eval) (cb309e core-prim . vm-self) (cb309d core-prim . vm-start!) (cb309c core-prim . make-vm) (cb309b core-prim . mutex-try-lock!) (cb309a core-prim . mutex-unlock!) (cb3099 core-prim . mutex-lock!) (cb3098 core-prim . mutex?) (cb3097 core-prim . make-mutex) (cb3096 core-prim . condition-variable-notify-all!) (cb3095 core-prim . condition-variable-notify!) (cb3094 core-prim . condition-variable-wait!) (cb3093 core-prim . make-condition-variable) (cb3092 core-prim . mosh-executable-path) (cb3091 core-prim . make-file-options) (cb3090 core-prim . for-each-with-index) (cb308f core-prim . source-info) (cb308e core-prim . instruction?) (cb308d core-prim . instruction->integer) (cb308c core-prim . instruction->symbol) (cb308b core-prim . closure->list) (cb308a core-prim . make-compiler-instruction) (cb3089 core-prim . make-instruction) (cb3088 core-prim . set-source-info!) (cb3087 core-prim . bignum?) (cb3086 core-prim . fast-equal?) (cb3085 core-prim . fasl-read) (cb3084 core-prim . fasl-write) (cb3083 core-prim . time-usage) (cb3082 core-prim . os-constant) (cb3081 core-prim . disasm) (cb5a5 core-prim . make-parameter) (cb3080 core-prim . socket-port) (cb307f core-prim . socket-shutdown) (cb307e core-prim . socket-close) (cb307d core-prim . socket-send) (cb307c core-prim . socket-recv!) (cb307b core-prim . socket-recv) (cb307a core-prim . make-server-socket) (cb3079 core-prim . make-client-socket) (cb3078 core-prim . socket-accept) (cb3077 core-prim . socket?) (cb3076 core-prim . string-upcase) (cb3075 core-prim . string-titlecase) (cb3074 core-prim . string-normalize-nfkd) (cb3073 core-prim . string-normalize-nfkc) (cb3072 core-prim . string-normalize-nfd) (cb3071 core-prim . string-normalize-nfc) (cb3070 core-prim . string-foldcase) (cb306f core-prim . string-downcase) (cb306e core-prim . string-ci>?) (cb306d core-prim . string-ci>=?) (cb306c core-prim . string-ci=?) (cb306b core-prim . string-ci<?) (cb306a core-prim . string-ci<=?) (cb3069 core-prim . char-whitespace?) (cb3068 core-prim . char-upper-case?) (cb3067 core-prim . char-title-case?) (cb3066 core-prim . char-numeric?) (cb3065 core-prim . char-lower-case?) (cb3064 core-prim . char-general-category) (cb3063 core-prim . char-upcase) (cb3062 core-prim . char-titlecase) (cb3061 core-prim . char-foldcase) (cb3060 core-prim . char-downcase) (cb305f core-prim . char-ci>?) (cb305e core-prim . char-ci>=?) (cb305d core-prim . char-ci=?) (cb305c core-prim . char-ci<?) (cb305b core-prim . char-ci<=?) (cb305a core-prim . char-alphabetic?) (cbbaf core-prim . make-variable-transformer) (cbe66 core-prim . identifier?) (cbe52 core-prim . generate-temporaries) (cbe54 core-prim . free-identifier=?) (cbe6a core-prim . syntax->datum) (cbe68 core-prim . datum->syntax) (cbe56 core-prim . bound-identifier=?) (cb3059 core-prim . record-type-descriptor?) (cb3058 core-prim . record-predicate) (cb3057 core-prim . record-mutator) (cb3056 core-prim . record-constructor) (cb3055 core-prim . record-accessor) (cb3054 core-prim . make-record-type-descriptor) (cb3053 core-prim . make-record-constructor-descriptor) (cb3052 core-prim . record?) (cb3051 core-prim . record-type-uid) (cb3050 core-prim . record-type-sealed?) (cb304f core-prim . record-type-parent) (cb304e core-prim . record-type-opaque?) (cb304d core-prim . record-type-name) (cb304c core-prim . record-type-generative?) (cb304b core-prim . record-type-field-names) (cb304a core-prim . record-rtd) (cb3049 core-prim . record-field-mutable?) (cb3048 core-prim . delete-file) (cb3047 core-prim . file-exists?) (cb3046 core-prim . vector-sort!) (cb3045 core-prim . vector-sort) (cb3044 core-prim . list-sort) (cb3043 core-prim . symbol-hash) (cb3042 core-prim . string-ci-hash) (cb3041 core-prim . string-hash) (cb3040 core-prim . equal-hash) (cb303f core-prim . hashtable-equivalence-function) (cb303e core-prim . make-hashtable) (cb303d core-prim . hashtable-hash-function) (cb303c core-prim . make-eqv-hashtable) (cb303b core-prim . make-eq-hashtable) (cb303a core-prim . hashtable?) (cb3039 core-prim . hashtable-update!) (cb3038 core-prim . hashtable-size) (cb3037 core-prim . hashtable-set!) (cb3036 core-prim . hashtable-ref) (cb3035 core-prim . hashtable-mutable?) (cb3034 core-prim . hashtable-keys) (cb3033 core-prim . hashtable-entries) (cb3032 core-prim . hashtable-delete!) (cb3031 core-prim . hashtable-copy) (cb3030 core-prim . hashtable-contains?) (cb302f core-prim . hashtable-clear!) (cb302e core-prim . call-with-output-file) (cb302d core-prim . call-with-input-file) (cb302c core-prim . write-char) (cb302b core-prim . write) (cb302a core-prim . with-output-to-file) (cb3029 core-prim . with-input-from-file) (cb3028 core-prim . read-char) (cb3027 core-prim . read) (cb3026 core-prim . peek-char) (cb3025 core-prim . open-output-file) (cb3024 core-prim . open-input-file) (cb3023 core-prim . newline) (cb3022 core-prim . display) (cb3021 core-prim . close-output-port) (cb3020 core-prim . close-input-port) (cb301f core-prim . eof-object?) (cb301e core-prim . eof-object) (cb301d core-prim . current-error-port) (cb301c core-prim . current-output-port) (cb301b core-prim . current-input-port) (cb301a core-prim . output-port?) (cb3019 core-prim . input-port?) (cb3018 core-prim . utf-8-codec) (cb3017 core-prim . utf-16-codec) (cb3016 core-prim . transcoder-error-handling-mode) (cb3015 core-prim . transcoder-eol-style) (cb3014 core-prim . transcoder-codec) (cb3013 core-prim . transcoded-port) (cb3012 core-prim . textual-port?) (cb3011 core-prim . string->bytevector) (cb3010 core-prim . standard-output-port) (cb300f core-prim . standard-input-port) (cb300e core-prim . standard-error-port) (cb300d core-prim . set-port-position!) (cb300c core-prim . put-u8) (cb300b core-prim . put-string) (cb300a core-prim . put-datum) (cb3009 core-prim . put-char) (cb3008 core-prim . put-bytevector) (cb3007 core-prim . port?) (cb3006 core-prim . port-transcoder) (cb3005 core-prim . port-position) (cb3004 core-prim . port-has-set-port-position!?) (cb3003 core-prim . port-has-port-position?) (cb3002 core-prim . port-eof?) (cb3001 core-prim . output-port-buffer-mode) (cb3000 core-prim . open-string-output-port) (cb2fff core-prim . open-string-input-port) (cb2ffe core-prim . open-file-output-port) (cb2ffd core-prim . open-file-input/output-port) (cb2ffc core-prim . open-file-input-port) (cb2ffb core-prim . open-bytevector-output-port) (cb2ffa core-prim . open-bytevector-input-port) (cb2ff9 core-prim . native-transcoder) (cb2ff8 core-prim . native-eol-style) (cb2ff7 core-prim . make-transcoder) (cb2ff6 core-prim . latin-1-codec) (cb2a8e core-prim . make-i/o-write-error) (cb2a79 core-prim . make-i/o-read-error) (cb2b2f core-prim . make-i/o-port-error) (cb2aa5 core-prim . make-i/o-invalid-position-error) (cb2ac0 core-prim . make-i/o-filename-error) (cb2ad9 core-prim . make-i/o-file-protection-error) (cb2aee core-prim . make-i/o-file-is-read-only-error) (cb2b18 core-prim . make-i/o-file-does-not-exist-error) (cb2b03 core-prim . make-i/o-file-already-exists-error) (cb2a64 core-prim . make-i/o-error) (cb2b5f core-prim . make-i/o-encoding-error) (cb2b48 core-prim . make-i/o-decoding-error) (cb2ff5 core-prim . make-custom-textual-output-port) (cb2ff4 core-prim . make-custom-textual-input/output-port) (cb2ff3 core-prim . make-custom-textual-input-port) (cb2ff2 core-prim . make-custom-binary-output-port) (cb2ff1 core-prim . make-custom-binary-input/output-port) (cb2ff0 core-prim . make-custom-binary-input-port) (cb2fef core-prim . make-bytevector) (cb2fee core-prim . lookahead-u8) (cb2fed core-prim . lookahead-char) (cb2a90 core-prim . i/o-write-error?) (cb2a7b core-prim . i/o-read-error?) (cb2b33 core-prim . i/o-port-error?) (cb2aa9 core-prim . i/o-invalid-position-error?) (cb2ac4 core-prim . i/o-filename-error?) (cb2adb core-prim . i/o-file-protection-error?) (cb2af0 core-prim . i/o-file-is-read-only-error?) (cb2b1a core-prim . i/o-file-does-not-exist-error?) (cb2b05 core-prim . i/o-file-already-exists-error?) (cb2a66 core-prim . i/o-error?) (cb2aab core-prim . i/o-error-position) (cb2b35 core-prim . i/o-error-port) (cb2ac6 core-prim . i/o-error-filename) (cb2b63 core-prim . i/o-encoding-error?) (cb2b65 core-prim . i/o-encoding-error-char) (cb2b4a core-prim . i/o-decoding-error?) (cb2fec core-prim . get-u8) (cb2feb core-prim . get-string-n!) (cb2fea core-prim . get-string-n) (cb2fe9 core-prim . get-string-all) (cb2fe8 core-prim . get-line) (cb2fe7 core-prim . get-datum) (cb2fe6 core-prim . get-char) (cb2fe5 core-prim . get-bytevector-some) (cb2fe4 core-prim . get-bytevector-n!) (cb2fe3 core-prim . get-bytevector-n) (cb2fe2 core-prim . get-bytevector-all) (cb2fe1 core-prim . flush-output-port) (cb2fe0 core-prim . close-port) (cbe40 core-prim . scheme-report-environment) (cb2fdf core-prim . quotient) (cbe3e core-prim . null-environment) (cb2fde core-prim . remainder) (cb2fdd core-prim . modulo) (cb2fdc core-prim . inexact->exact) (cb2fdb core-prim . force) (cb2fda core-prim . exact->inexact) (cb2fd9 core-prim . make-promise) (cb2fd8 core-prim . exit) (cb2c9c core-prim . command-line) (cb2fd7 core-prim . string-fill!) (cb2fd6 core-prim . string-set!) (cb2fd5 core-prim . set-cdr!) (cb2fd4 core-prim . set-car!) (cb2fd3 core-prim . remove) (cb2fd2 core-prim . remv) (cb2fd1 core-prim . remp) (cb2fd0 core-prim . remq) (cb2fcf core-prim . partition) (cb2fce core-prim . memv) (cb2fcd core-prim . memq) (cb2fcc core-prim . memp) (cb2fcb core-prim . member) (cb2fca core-prim . exists) (cb2fc9 core-prim . for-all) (cb2fc8 core-prim . fold-right) (cb2fc7 core-prim . fold-left) (cb2fc6 core-prim . find) (cb2fc5 core-prim . filter) (cb2fc4 core-prim . cons*) (cb2fc3 core-prim . assv) (cb2fc2 core-prim . assq) (cb2fc1 core-prim . assp) (cb2fc0 core-prim . assoc) (cb2fbf core-prim . call-with-string-output-port) (cb2fbe core-prim . call-with-port) (cb2fbd core-prim . call-with-bytevector-output-port) (cb2fbc core-prim . bytevector->string) (cb2fbb core-prim . buffer-mode?) (cb2fba core-prim . binary-port?) (cb2fb9 core-prim . with-exception-handler) (cb2fb8 core-prim . raise-continuable) (cb2fb7 core-prim . raise) (cbe44 core-prim . eval) (cbe3c core-prim . environment) (cb2fb6 core-prim . make-enumeration) (cb2fb5 core-prim . enum-set=?) (cb2fb4 core-prim . enum-set-universe) (cb2fb3 core-prim . enum-set-union) (cb2fb2 core-prim . enum-set-subset?) (cb2fb1 core-prim . enum-set-projection) (cb2fb0 core-prim . enum-set-member?) (cb2faf core-prim . enum-set-intersection) (cb2fae core-prim . enum-set-indexer) (cb2fad core-prim . enum-set-difference) (cb2fac core-prim . enum-set-constructor) (cb2fab core-prim . enum-set-complement) (cb2faa core-prim . enum-set->list) (cb29da core-prim . who-condition?) (cb2952 core-prim . warning?) (cb2991 core-prim . violation?) (cb2a51 core-prim . undefined-violation?) (cb2a38 core-prim . syntax-violation?) (cb2a3c core-prim . syntax-violation-subform) (cb2a3a core-prim . syntax-violation-form) (cbe64 core-prim . syntax-violation) (cb2fa9 core-prim . simple-conditions) (cb2967 core-prim . serious-condition?) (cb29f1 core-prim . non-continuable-violation?) (cb293b core-prim . message-condition?) (cb29d6 core-prim . make-who-condition) (cb2950 core-prim . make-warning) (cb298f core-prim . make-violation) (cb2a4f core-prim . make-undefined-violation) (cb2a32 core-prim . make-syntax-violation) (cb2965 core-prim . make-serious-condition) (cb29ef core-prim . make-non-continuable-violation) (cb2937 core-prim . make-message-condition) (cb2a19 core-prim . make-lexical-violation) (cb29bb core-prim . make-irritants-condition) (cb2a04 core-prim . make-implementation-restriction-violation) (cb297a core-prim . make-error) (cb29a4 core-prim . make-assertion-violation) (cb2a1b core-prim . lexical-violation?) (cb29bf core-prim . irritants-condition?) (cb2a06 core-prim . implementation-restriction-violation?) (cb297c core-prim . error?) (cb29dc core-prim . condition-who) (cb2fa8 core-prim . condition-predicate) (cb293d core-prim . condition-message) (cb29c1 core-prim . condition-irritants) (cb2fa7 core-prim . condition-accessor) (cb2fa6 core-prim . condition) (cb29a6 core-prim . assertion-violation?) (cb2fa5 core-prim . condition?) (cb2fa4 core-prim . utf32->string) (cb2fa3 core-prim . utf16->string) (cb2fa2 core-prim . utf8->string) (cb2fa1 core-prim . uint-list->bytevector) (cb2fa0 core-prim . u8-list->bytevector) (cb2f9f core-prim . string->utf8) (cb2f9e core-prim . string->utf32) (cb2f9d core-prim . string->utf16) (cb2f9c core-prim . sint-list->bytevector) (cb2f9b core-prim . native-endianness) (cb2f9a core-prim . bytevector?) (cb2f99 core-prim . bytevector=?) (cb2f98 core-prim . bytevector-uint-set!) (cb2f97 core-prim . bytevector-uint-ref) (cb2f96 core-prim . bytevector-u8-set!) (cb2f95 core-prim . bytevector-u8-ref) (cb2f94 core-prim . bytevector-u64-set!) (cb2f93 core-prim . bytevector-u64-ref) (cb2f92 core-prim . bytevector-u64-native-set!) (cb2f91 core-prim . bytevector-u64-native-ref) (cb2f90 core-prim . bytevector-u32-set!) (cb2f8f core-prim . bytevector-u32-ref) (cb2f8e core-prim . bytevector-u32-native-set!) (cb2f8d core-prim . bytevector-u32-native-ref) (cb2f8c core-prim . bytevector-u16-set!) (cb2f8b core-prim . bytevector-u16-ref) (cb2f8a core-prim . bytevector-u16-native-set!) (cb2f89 core-prim . bytevector-u16-native-ref) (cb2f88 core-prim . bytevector-sint-set!) (cb2f87 core-prim . bytevector-sint-ref) (cb2f86 core-prim . bytevector-s8-set!) (cb2f85 core-prim . bytevector-s8-ref) (cb2f84 core-prim . bytevector-s64-set!) (cb2f83 core-prim . bytevector-s64-ref) (cb2f82 core-prim . bytevector-s64-native-set!) (cb2f81 core-prim . bytevector-s64-native-ref) (cb2f80 core-prim . bytevector-s32-set!) (cb2f7f core-prim . bytevector-s32-ref) (cb2f7e core-prim . bytevector-s32-native-set!) (cb2f7d core-prim . bytevector-s32-native-ref) (cb2f7c core-prim . bytevector-s16-set!) (cb2f7b core-prim . bytevector-s16-ref) (cb2f7a core-prim . bytevector-s16-native-set!) (cb2f79 core-prim . bytevector-s16-native-ref) (cb2f78 core-prim . bytevector-length) (cb2f77 core-prim . bytevector-ieee-single-ref) (cb2f76 core-prim . bytevector-ieee-single-set!) (cb2f75 core-prim . bytevector-ieee-single-native-set!) (cb2f74 core-prim . bytevector-ieee-single-native-ref) (cb2f73 core-prim . bytevector-ieee-double-set!) (cb2f72 core-prim . bytevector-ieee-double-ref) (cb2f71 core-prim . bytevector-ieee-double-native-set!) (cb2f70 core-prim . bytevector-ieee-double-native-ref) (cb2f6f core-prim . bytevector-fill!) (cb2f6e core-prim . bytevector-copy!) (cb2f6d core-prim . bytevector-copy) (cb2f6c core-prim . bytevector->uint-list) (cb2f6b core-prim . bytevector->u8-list) (cb2f6a core-prim . bytevector->sint-list) (cb2b8f core-prim . no-nans-violation?) (cb2b7a core-prim . no-infinities-violation?) (cb2b8d core-prim . make-no-nans-violation) (cb2b78 core-prim . make-no-infinities-violation) (cb2f69 core-prim . real->flonum) (cb2f68 core-prim . flzero?) (cb2f67 core-prim . fltruncate) (cb2f66 core-prim . fltan) (cb2f65 core-prim . flsqrt) (cb2f64 core-prim . flsin) (cb2f63 core-prim . flround) (cb2f62 core-prim . flpositive?) (cb2f61 core-prim . flonum?) (cb2f60 core-prim . flodd?) (cb2f5f core-prim . flnumerator) (cb2f5e core-prim . flnegative?) (cb2f5d core-prim . flnan?) (cb2f5c core-prim . flmod0) (cb2f5b core-prim . flmod) (cb2f5a core-prim . flmin) (cb2f59 core-prim . flmax) (cb2f58 core-prim . fllog) (cb2f57 core-prim . flinteger?) (cb2f56 core-prim . flinfinite?) (cb2f55 core-prim . flfloor) (cb2f54 core-prim . flfinite?) (cb2f53 core-prim . flexpt) (cb2f52 core-prim . flexp) (cb2f51 core-prim . fleven?) (cb2f50 core-prim . fldiv0-and-mod0) (cb2f4f core-prim . fldiv0) (cb2f4e core-prim . fldiv-and-mod) (cb2f4d core-prim . fldiv) (cb2f4c core-prim . fldenominator) (cb2f4b core-prim . flcos) (cb2f4a core-prim . flceiling) (cb2f49 core-prim . flatan) (cb2f48 core-prim . flasin) (cb2f47 core-prim . flacos) (cb2f46 core-prim . flabs) (cb2f45 core-prim . fl>?) (cb2f44 core-prim . fl>=?) (cb2f43 core-prim . fl=?) (cb2f42 core-prim . fl<?) (cb2f41 core-prim . fl<=?) (cb2f40 core-prim . fl/) (cb2f3f core-prim . fl-) (cb2f3e core-prim . fl+) (cb2f3d core-prim . fl*) (cb2f3c core-prim . fixnum->flonum) (cb2f3b core-prim . fxzero?) (cb2f3a core-prim . fxxor) (cb2f39 core-prim . fxrotate-bit-field) (cb2f38 core-prim . fxreverse-bit-field) (cb2f37 core-prim . fxpositive?) (cb2f36 core-prim . fxodd?) (cb2f35 core-prim . fxnot) (cb2f34 core-prim . fxnegative?) (cb2f33 core-prim . fxmod0) (cb2f32 core-prim . fxmod) (cb2f31 core-prim . fxmin) (cb2f30 core-prim . fxmax) (cb2f2f core-prim . fxlength) (cb2f2e core-prim . fxior) (cb2f2d core-prim . fxif) (cb2f2c core-prim . fxfirst-bit-set) (cb2f2b core-prim . fxeven?) (cb2f2a core-prim . fxdiv0-and-mod0) (cb2f29 core-prim . fxdiv0) (cb2f28 core-prim . fxdiv-and-mod) (cb2f27 core-prim . fxdiv) (cb2f26 core-prim . fxcopy-bit-field) (cb2f25 core-prim . fxcopy-bit) (cb2f24 core-prim . fxbit-set?) (cb2f23 core-prim . fxbit-field) (cb2f22 core-prim . fxbit-count) (cb2f21 core-prim . fxarithmetic-shift-right) (cb2f20 core-prim . fxarithmetic-shift-left) (cb2f1f core-prim . fxarithmetic-shift) (cb2f1e core-prim . fxand) (cb2f1d core-prim . fx>?) (cb2f1c core-prim . fx>=?) (cb2f1b core-prim . fx=?) (cb2f1a core-prim . fx<?) (cb2f19 core-prim . fx<=?) (cb2f18 core-prim . fx-/carry) (cb2f17 core-prim . fx-) (cb2f16 core-prim . fx+/carry) (cb2f15 core-prim . fx+) (cb2f14 core-prim . fx*/carry) (cb2f13 core-prim . fx*) (cb2f12 core-prim . greatest-fixnum) (cb2f11 core-prim . least-fixnum) (cb2f10 core-prim . fixnum-width) (cb2f0f core-prim . fixnum?) (cb2f0e core-prim . bitwise-rotate-bit-field) (cb2f0d core-prim . bitwise-reverse-bit-field) (cb2f0c core-prim . bitwise-length) (cb2f0b core-prim . bitwise-if) (cb2f0a core-prim . bitwise-first-bit-set) (cb2f09 core-prim . bitwise-copy-bit-field) (cb2f08 core-prim . bitwise-copy-bit) (cb2f07 core-prim . bitwise-bit-set?) (cb2f06 core-prim . bitwise-bit-field) (cb2f05 core-prim . bitwise-bit-count) (cb2f04 core-prim . bitwise-xor) (cb2f03 core-prim . bitwise-ior) (cb2f02 core-prim . bitwise-and) (cb2f01 core-prim . bitwise-not) (cb2f00 core-prim . bitwise-arithmetic-shift-right) (cb2eff core-prim . bitwise-arithmetic-shift-left) (cb2efe core-prim . bitwise-arithmetic-shift) (cb2efd core-prim . zero?) (cb2efc core-prim . vector?) (cb2efb core-prim . vector-set!) (cb2efa core-prim . vector-ref) (cb2ef9 core-prim . vector-map) (cb2ef8 core-prim . vector-length) (cb2ef7 core-prim . vector-for-each) (cb2ef6 core-prim . vector-fill!) (cb2ef5 core-prim . vector->list) (cb2ef4 core-prim . vector) (cb2ef3 core-prim . values) (cb2ef2 core-prim . truncate) (cb2ef1 core-prim . tan) (cb2ef0 core-prim . symbol?) (cb2eef core-prim . symbol=?) (cb2eee core-prim . symbol->string) (cb2eed core-prim . substring) (cb2eec core-prim . string?) (cb2eeb core-prim . string>?) (cb2eea core-prim . string>=?) (cb2ee9 core-prim . string=?) (cb2ee8 core-prim . string<?) (cb2ee7 core-prim . string<=?) (cb2ee6 core-prim . string-ref) (cb2ee5 core-prim . string-length) (cb2ee4 core-prim . string-for-each) (cb2ee3 core-prim . string-copy) (cb2ee2 core-prim . string-append) (cb2ee1 core-prim . string->symbol) (cb2ee0 core-prim . string->number) (cb2edf core-prim . string->list) (cb2ede core-prim . string) (cb2edd core-prim . sqrt) (cb2edc core-prim . sin) (cb2edb core-prim . round) (cb2eda core-prim . reverse) (cb2ed9 core-prim . real?) (cb2ed8 core-prim . real-valued?) (cb2ed7 core-prim . real-part) (cb2ed6 core-prim . rationalize) (cb2ed5 core-prim . rational?) (cb2ed4 core-prim . rational-valued?) (cb2ed3 core-prim . procedure?) (cb2ed2 core-prim . positive?) (cb2ed1 core-prim . pair?) (cb2ed0 core-prim . odd?) (cb2ecf core-prim . numerator) (cb2ece core-prim . number?) (cb2ecd core-prim . number->string) (cb2ecc core-prim . null?) (cb2ecb core-prim . not) (cb2eca core-prim . negative?) (cb2ec9 core-prim . nan?) (cb2ec8 core-prim . min) (cb2ec7 core-prim . max) (cb2ec6 core-prim . map) (cb2ec5 core-prim . make-vector) (cb2ec4 core-prim . make-string) (cb2ec3 core-prim . make-rectangular) (cb2ec2 core-prim . make-polar) (cb2ec1 core-prim . magnitude) (cb2ec0 core-prim . log) (cb2ebf core-prim . list?) (cb2ebe core-prim . list-tail) (cb2ebd core-prim . list-ref) (cb2ebc core-prim . list->vector) (cb2ebb core-prim . list->string) (cb2eba core-prim . list) (cb2eb9 core-prim . length) (cb2eb8 core-prim . lcm) (cb2eb7 core-prim . integer?) (cb2eb6 core-prim . integer-valued?) (cb2eb5 core-prim . integer->char) (cb2eb4 core-prim . infinite?) (cb2eb3 core-prim . inexact?) (cb2eb2 core-prim . inexact) (cb2eb1 core-prim . imag-part) (cb2eb0 core-prim . gcd) (cb2eaf core-prim . for-each) (cb2eae core-prim . floor) (cb2ead core-prim . finite?) (cb2eac core-prim . expt) (cb2eab core-prim . exp) (cb2eaa core-prim . exact?) (cb2ea9 core-prim . exact-integer-sqrt) (cb2ea8 core-prim . exact) (cb2ea7 core-prim . even?) (cb2ea6 core-prim . error) (cb2ea5 core-prim . eqv?) (cb2ea4 core-prim . equal?) (cb2ea3 core-prim . eq?) (cb2ea2 core-prim . dynamic-wind) (cb2ea1 core-prim . div0-and-mod0) (cb2ea0 core-prim . mod0) (cb2e9f core-prim . div0) (cb2e9e core-prim . div-and-mod) (cb2e9d core-prim . mod) (cb2e9c core-prim . div) (cb2e9b core-prim . denominator) (cb2e9a core-prim . cos) (cb2e99 core-prim . cons) (cb2e98 core-prim . complex?) (cb2e97 core-prim . char?) (cb2e96 core-prim . char>?) (cb2e95 core-prim . char>=?) (cb2e94 core-prim . char=?) (cb2e93 core-prim . char<?) (cb2e92 core-prim . char<=?) (cb2e91 core-prim . char->integer) (cb2e90 core-prim . ceiling) (cb2e8f core-prim . call-with-values) (cb2e8e core-prim . call/cc) (cb2e8d core-prim . call-with-current-continuation) (cb2e8c core-prim . cddddr) (cb2e8b core-prim . cdddar) (cb2e8a core-prim . cddadr) (cb2e89 core-prim . cddaar) (cb2e88 core-prim . cdaddr) (cb2e87 core-prim . cdadar) (cb2e86 core-prim . cdaadr) (cb2e85 core-prim . cdaaar) (cb2e84 core-prim . cadddr) (cb2e83 core-prim . caddar) (cb2e82 core-prim . cadadr) (cb2e81 core-prim . cadaar) (cb2e80 core-prim . caaddr) (cb2e7f core-prim . caadar) (cb2e7e core-prim . caaadr) (cb2e7d core-prim . caaaar) (cb2e7c core-prim . cdddr) (cb2e7b core-prim . cddar) (cb2e7a core-prim . cdadr) (cb2e79 core-prim . cdaar) (cb2e78 core-prim . caddr) (cb2e77 core-prim . cadar) (cb2e76 core-prim . caadr) (cb2e75 core-prim . caaar) (cb2e74 core-prim . cddr) (cb2e73 core-prim . cdar) (cb2e72 core-prim . cadr) (cb2e71 core-prim . caar) (cb2e70 core-prim . cdr) (cb2e6f core-prim . car) (cb2e6e core-prim . boolean?) (cb2e6d core-prim . boolean=?) (cb2e6c core-prim . atan) (cb2e6b core-prim . assertion-violation) (cbe5e core-prim . assertion-error) (cb2e6a core-prim . asin) (cb2e69 core-prim . apply) (cb2e68 core-prim . append) (cb2e67 core-prim . angle) (cb2e66 core-prim . acos) (cb2e65 core-prim . abs) (cb2e64 core-prim . /) (cb2e63 core-prim . *) (cb2e62 core-prim . -) (cb2e61 core-prim . +) (cb2e60 core-prim . >=) (cb2e5f core-prim . >) (cb2e5e core-prim . =) (cb2e5d core-prim . <=) (cb2e5c core-prim . <) (cb2e5b core-prim . library) (cb2e5a $core-rtd &no-nans-rtd &no-nans-rcd) (cb2e59 $core-rtd &no-infinities-rtd &no-infinities-rcd) (cb2e58 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (cb2e57 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (cb2e56 $core-rtd &i/o-port-rtd &i/o-port-rcd) (cb2e55 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (cb2e54 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (cb2e53 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (cb2e52 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (cb2e51 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (cb2e50 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (cb2e4f $core-rtd &i/o-write-rtd &i/o-write-rcd) (cb2e4e $core-rtd &i/o-read-rtd &i/o-read-rcd) (cb2e4d $core-rtd &i/o-rtd &i/o-rcd) (cb2e4c $core-rtd &undefined-rtd &undefined-rcd) (cb2e4b $core-rtd &syntax-rtd &syntax-rcd) (cb2e4a $core-rtd &lexical-rtd &lexical-rcd) (cb2e49 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (cb2e48 $core-rtd &non-continuable-rtd &non-continuable-rcd) (cb2e47 $core-rtd &who-rtd &who-rcd) (cb2e46 $core-rtd &irritants-rtd &irritants-rcd) (cb2e45 $core-rtd &assertion-rtd &assertion-rcd) (cb2e44 $core-rtd &violation-rtd &violation-rcd) (cb2e43 $core-rtd &error-rtd &error-rcd) (cb2e42 $core-rtd &serious-rtd &serious-rcd) (cb2e41 $core-rtd &warning-rtd &warning-rcd) (cb2e40 $core-rtd &message-rtd &message-rcd) (cb2e3f $core-rtd &condition-rtd &condition-rcd) (cb2e3e macro . define-condition-type) (cb2e3d macro . define-enumeration) (cb2e3c macro . define-record-type) (cb2e3b macro . parent-rtd) (cb2e3a macro . nongenerative) (cb2e39 macro . opaque) (cb2e38 macro . sealed) (cb2e37 macro . protocol) (cb2e36 macro . parent) (cb2e35 macro . immutable) (cb2e34 macro . mutable) (cb2e33 macro . fields) (cb2e32 macro . error-handling-mode) (cb2e31 macro . file-options) (cb2e30 macro . buffer-mode) (cb2e2f macro . eol-style) (cb2e2e macro . guard) (cb2e2d macro . trace-define) (cb2e2c macro . trace-lambda) (cb2e2b macro . unsyntax-splicing) (cb2e2a macro . unsyntax) (cb2e29 macro . unquote-splicing) (cb2e28 macro . unquote) (cb2e27 macro . _) (cb2e26 macro . else) (cb2e25 macro . =>) (cb2e24 macro . ...) (cb2e23 macro . assert) (cb2e22 macro . endianness) (cb2e21 macro . delay) (cb2e20 macro . time) (cb2e1f macro . do) (cb2e1e macro . cond) (cb2e1d macro . let*) (cb2e1c macro . let*-values) (cb2e1b macro . let-values) (cb2e1a macro . identifier-syntax) (cb2e19 macro . with-syntax) (cb2e18 macro . quasisyntax) (cb2e17 macro . quasiquote) (cb2e16 macro . syntax-rules) (cb2e15 macro . include) (cb2e14 macro . define-struct) (cb2e13 core-macro . record-constructor-descriptor) (cb2e12 core-macro . record-type-descriptor) (cb2e11 macro . case) (cb2e10 macro . parameterize) (cb2e0f macro . unless) (cb2e0e macro . when) (cb2e0d core-macro . or) (cb2e0c core-macro . and) (cb2e0b core-macro . if) (cb2e0a core-macro . let) (cb2e09 core-macro . letrec*) (cb2e08 core-macro . letrec) (cb2e07 core-macro . type-descriptor) (cb2e06 core-macro . case-lambda) (cb2e05 core-macro . lambda) (cb2e04 core-macro . syntax) (cb2e03 core-macro . syntax-case) (cb2e02 core-macro . quote) (cb2e01 core-macro . foreign-call) (cb2e00 letrec-syntax) (cb2dff let-syntax) (cb2dfe set!) (cb2dfd import) (cb2dfc begin) (cb2dfb module) (cb2dfa define-syntax) (cb2df9 define)) values values '#f '#f '#f '#f) (cb992@cb7de@install-library 'cb3149 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . cb3128) (eval-core . cb3127) (set-symbol-value! . cb3126) (symbol-value . cb3125) (gensym . cb3124) (void . cb3123)) '() values values '#f '#f '#f '#f) (cb992@cb7de@install-library 'cb314a '(mosh) '() '() '() '() '((set-symbol-value! . cb3126) (symbol-value . cb3125) (gensym . cb3124) (regexp? . cb3121) (read-line . cb3120) (ungensym . cb311e) (alist->eq-hash-table . cb311d) (assoc-ref . cb311c) (print . cb311b) (format . cb311a) (host-os . cb3119) (library-path . cb7bd) (standard-library-path . cb3118) (file-newer? . cb3117) (stat-mtime . cb3116) (digit->integer . cb3111) (call-with-string-input-port . cb3110) (call-with-string-io . cb310f) (string-split . cb310e) (bytevector-for-each . cb310d) (string->regexp . cb310c) (rxmatch . cb310b) (regexp-replace-all . cb310a) (hashtable-for-each . cb3109) (set-current-directory! . cb3104) (expand-path . cb3103) (current-directory . cb3102) (p . cb30c1) (get-timeofday . cb30a8) (get-command-line . cb30a7) (sys-display . cb30a6) (whereis . cb30a5) (register . cb30a4) (vm-join! . cb30a3) (vm-set-value! . cb30a2) (vm? . cb30a1) (main-vm? . cb30a0) (vm-eval . cb309f) (vm-self . cb309e) (vm-start! . cb309d) (make-vm . cb309c) (mutex-try-lock! . cb309b) (mutex-unlock! . cb309a) (mutex-lock! . cb3099) (mutex? . cb3098) (make-mutex . cb3097) (condition-variable-notify-all! . cb3096) (condition-variable-notify! . cb3095) (condition-variable-wait! . cb3094) (make-condition-variable . cb3093) (mosh-executable-path . cb3092) (make-file-options . cb3091) (for-each-with-index . cb3090) (source-info . cb308f) (make-compiler-instruction . cb308a) (make-instruction . cb3089) (set-source-info! . cb3088) (bignum? . cb3087) (fast-equal? . cb3086) (fasl-read . cb3085) (fasl-write . cb3084) (time-usage . cb3083) (os-constant . cb3082) (time . cb2e20) (include . cb2e15)) '() values values '#f '#f '#f '#f) (cb992@cb7de@install-library 'cb314b '(system) '() '() '() '() '((gensym-prefix-set! . cb311f) (write-to-file . cb3115) (file->sexp-list . cb3114) (file->list . cb3113) (file->string . cb3112) (mosh-cache-dir . cb5a7) (call-process . cb3108) (local-tz-offset . cb3107) (microseconds . cb3106) (directory-list . cb3105) (expand-path . cb3103) (%spawn . cb3101) (%waitpid . cb3100) (simple-struct-name . cb30ff) (simple-struct-set! . cb30fe) (simple-struct-ref . cb30fd) (make-simple-struct . cb30fc) (simple-struct? . cb30fb) (pointer-ref-c-int64 . cb30fa) (pointer-ref-c-int32 . cb30f9) (pointer-ref-c-int16 . cb30f8) (pointer-ref-c-int8 . cb30f7) (pointer-ref-c-uint64 . cb30f6) (pointer-ref-c-uint32 . cb30f5) (pointer-ref-c-uint16 . cb30f4) (pointer-ref-c-uint8 . cb30f3) (pointer-set-c-uint64! . cb30f2) (pointer-set-c-uint32! . cb30f1) (pointer-set-c-uint16! . cb30f0) (pointer-set-c-uint8! . cb30ef) (pointer-set-c-int64! . cb30ee) (pointer-set-c-int32! . cb30ed) (pointer-set-c-int16! . cb30ec) (pointer-set-c-int8! . cb30eb) (pointer-set-c-pointer! . cb30ea) (pointer-set-c-double! . cb30e9) (pointer-set-c-float! . cb30e8) (pointer-set-c-long-long! . cb30e7) (pointer-set-c-long! . cb30e6) (pointer-set-c-int! . cb30e5) (pointer-set-c-short! . cb30e4) (pointer-set-c-char! . cb30e3) (pointer-ref-c-pointer . cb30e2) (pointer-ref-c-double . cb30e1) (pointer-ref-c-float . cb30e0) (pointer-ref-c-unsigned-long-long . cb30df) (pointer-ref-c-signed-long-long . cb30de) (pointer-ref-c-unsigned-long . cb30dd) (pointer-ref-c-signed-long . cb30dc) (pointer-ref-c-unsigned-int . cb30db) (pointer-ref-c-signed-int . cb30da) (pointer-ref-c-unsigned-short . cb30d9) (pointer-ref-c-signed-short . cb30d8) (pointer-ref-c-unsigned-char . cb30d7) (pointer-ref-c-signed-char . cb30d6) (pointer->integer . cb30d5) (integer->pointer . cb30d4) (pointer? . cb30d3) (shared-errno . cb30d2) (get-c-address . cb30d1) (obj->integer . cb30d0) (u8-list->c-procedure . cb30cf) (%ffi-free-c-callback-trampoline . cb30ce) (%ffi-make-c-callback-trampoline . cb30cd) (%ffi-free . cb30cc) (%ffi-malloc . cb30cb) (%ffi-supported? . cb30ca) (%ffi-pointer->string . cb30c9) (%ffi-call . cb30c8) (%ffi-lookup . cb30c7) (%ffi-open . cb30c6) (null-terminated-utf8->string . cb30c5) (null-terminated-bytevector->string . cb30c4) (%fork . cb30c3) (%pipe . cb30c2) (open-output-string . cb30c0) (get-output-string . cb30bf) (file-stat-ctime . cb30be) (file-stat-atime . cb30bd) (file-stat-mtime . cb30bc) (file-size-in-bytes . cb30bb) (file-writable? . cb30ba) (file-executable? . cb30b9) (file-readable? . cb30b8) (file-regular? . cb30b7) (file-symbolic-link? . cb30b6) (file-directory? . cb30b5) (create-symbolic-link . cb30b4) (rename-file . cb30b3) (delete-directory . cb30b2) (create-directory . cb30b1) (create-mosh-cache-dir . cb30b0) (get-environment-variables . cb30af) (current-exception-handler . cb30ae) (get-environment-variable . cb30ad) (join-wraps . cb30ac) (id->real-label . cb30ab) (same-marks? . cb30aa) (same-marks*? . cb30a9) (instruction? . cb308e) (instruction->integer . cb308d) (instruction->symbol . cb308c) (closure->list . cb308b) (disasm . cb3081) (make-parameter . cb5a5) (socket-port . cb3080) (socket-shutdown . cb307f) (socket-close . cb307e) (socket-send . cb307d) (socket-recv! . cb307c) (socket-recv . cb307b) (make-server-socket . cb307a) (make-client-socket . cb3079) (socket-accept . cb3078) (socket? . cb3077) (parameterize . cb2e10)) '() values values '#f '#f '#f '#f)))
(begin (set! cb2c89@ref (unspecified)) (set! cb2c8b@x* (unspecified)) (set! cb2c8d@add-library-path! (unspecified)) (set! cb2c8f@parse-and-add-library-path (unspecified)) (set! cb2c91@rpad (unspecified)) (set! cb2c93@condition-printer (unspecified)) (set! cb2c95@record->field-alist (unspecified)) (set! cb2c97@map-with-index (unspecified)) (set! cb2c99@repl (unspecified)) (set! cb2c9b@trace-printer (unspecified)) (set! cb2c9d@command-line (unspecified)) (set! cb2c9f@local-library-path (unspecified)) (set! cb2ca1@load/args (unspecified)) (set! cb2ca3@load (unspecified)) (set! cb2ca5@ironscheme-build (unspecified)) (set! cb2ca7@eval-top-level (unspecified)) (set! cb2ca9@compile-system-libraries (unspecified)) (set! cb2cab@compile (unspecified)) (set! cb2cad@compile->closure (unspecified)) (set! cb2caf@pre-compile-r6rs-file (unspecified)) (set! cb2cb1@load-r6rs-top-level (unspecified)) (set! cb2cb3@load-r6rs-top-level-sexp (unspecified)) (set! cb2cb5@prefix-inc (unspecified)) (set! cb2cb7@prefix-inc! (unspecified)) (set! cb2c89@ref (lambda (cb2cf2@rtd cb2cf3@i cb2cf4@x) (let ((cb2cf8@val ((record-accessor cb2cf2@rtd cb2cf3@i) cb2cf4@x))) (if (symbol? cb2cf8@val) (ungensym cb2cf8@val) cb2cf8@val)))) (set! cb2de0@cb2c89@ref cb2c89@ref) (set! cb2c8b@x* '()) (set! cb2de1@cb2c8b@x* cb2c8b@x*) (set! cb2c8d@add-library-path! (lambda (cb2cfa@path) (cb982@cb7be@library-path (append (cb982@cb7be@library-path) (list cb2cfa@path))))) (set! cb2de2@cb2c8d@add-library-path! cb2c8d@add-library-path!) (set! cb2c8f@parse-and-add-library-path (lambda (cb2cfc@paths cb2cfd@message) (let ((cb2d01@separator '#f)) (begin (set! cb2d01@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((cb2d02@t cb2cfc@paths)) (if cb2d02@t ((lambda (cb2d04@paths) (for-each (lambda (cb2d06@path) (if (file-exists? cb2d06@path) (cb2c8d@add-library-path! (expand-path cb2d06@path)) (format (current-error-port) cb2cfd@message cb2d06@path))) (string-split cb2d04@paths cb2d01@separator))) cb2d02@t) (void))))))) (set! cb2de3@cb2c8f@parse-and-add-library-path cb2c8f@parse-and-add-library-path) (set! cb2c91@rpad (lambda (cb2d08@str cb2d09@pad cb2d0a@n) (let ((cb2d0e@rest (- cb2d0a@n (string-length (format '"~a" cb2d08@str))))) (let cb2d14@loop ((cb2d10@rest cb2d0e@rest) (cb2d11@ret (format '"~a" cb2d08@str))) (if (<= cb2d10@rest '0) cb2d11@ret (cb2d14@loop (- cb2d10@rest '1) (string-append cb2d11@ret cb2d09@pad))))))) (set! cb2de4@cb2c91@rpad cb2c91@rpad) (set! cb2c93@condition-printer (lambda (cb2d16@e cb2d17@port) (let ((cb2d1b@max-condition-len '#f)) (begin (set! cb2d1b@max-condition-len (apply max (map (lambda (cb2d2c@c) (string-length (symbol->string (record-type-name (record-rtd cb2d2c@c))))) (simple-conditions cb2d16@e)))) (begin (display '" Condition components:\n" cb2d17@port) (for-each-with-index (lambda (cb2d1c@i cb2d1d@x) (let ((cb2d20@rtd (record-rtd cb2d1d@x)) (cb2d21@fields-alist (cb2c95@record->field-alist cb2d1d@x))) (begin (format cb2d17@port '" ~d. ~a" (+ cb2d1c@i '1) (cb2c91@rpad (symbol->string (record-type-name cb2d20@rtd)) '" " cb2d1b@max-condition-len)) (if (null? cb2d21@fields-alist) (newline cb2d17@port) (void)) (let cb2d28@loop ((cb2d24@first '#t) (cb2d25@fields-alist cb2d21@fields-alist)) (if (null? cb2d25@fields-alist) '() (let ((cb2d2a@field (car cb2d25@fields-alist))) (begin (if (not cb2d24@first) (display (cb2c91@rpad '"" '" " (+ '4 cb2d1b@max-condition-len)) cb2d17@port) (void)) (display '"       " cb2d17@port) (display (car cb2d2a@field) cb2d17@port) (display '": " cb2d17@port) (write (cdr cb2d2a@field) cb2d17@port) (newline cb2d17@port) (cb2d28@loop '#f (cdr cb2d25@fields-alist))))))))) (simple-conditions cb2d16@e))))))) (set! cb2de5@cb2c93@condition-printer cb2c93@condition-printer) (set! cb2c95@record->field-alist (lambda (cb2d2e@r) (let ((cb2d31@ref '#f)) (begin (set! cb2d31@ref (lambda (cb2d3c@rtd cb2d3d@i cb2d3e@x) (let ((cb2d42@val ((record-accessor cb2d3c@rtd cb2d3d@i) cb2d3e@x))) (if (symbol? cb2d42@val) (ungensym cb2d42@val) cb2d42@val)))) (let cb2d36@loop ((cb2d32@ret '()) (cb2d33@rtd (record-rtd cb2d2e@r))) (if cb2d33@rtd (cb2d36@loop (append cb2d32@ret (cb2c97@map-with-index (lambda (cb2d38@i cb2d39@field) (cons cb2d39@field (cb2d31@ref cb2d33@rtd cb2d38@i cb2d2e@r))) (vector->list (record-type-field-names cb2d33@rtd)))) (record-type-parent cb2d33@rtd)) cb2d32@ret)))))) (set! cb2de6@cb2c95@record->field-alist cb2c95@record->field-alist) (set! cb2c97@map-with-index (lambda (cb2d44@proc cb2d45@lst) (let cb2d4e@loop ((cb2d48@i '0) (cb2d49@lst cb2d45@lst) (cb2d4a@ret '())) (if (null? cb2d49@lst) (reverse cb2d4a@ret) (cb2d4e@loop (+ cb2d48@i '1) (cdr cb2d49@lst) (cons (cb2d44@proc cb2d48@i (car cb2d49@lst)) cb2d4a@ret)))))) (set! cb2de7@cb2c97@map-with-index cb2c97@map-with-index) (set! cb2c99@repl (lambda cb2d50@x (let ((cb2d53@rec '#f)) (begin (set! cb2d53@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (cb2d56@cb2d54) (lambda () (with-exception-handler (lambda (cb2d58@e) ((call/cc (lambda (cb2d5a@cb2d55) (cb2d56@cb2d54 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? cb2d58@e) (cb2c93@condition-printer cb2d58@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" cb2d58@e))) (cb2d5a@cb2d55 (lambda () (raise-continuable cb2d58@e)))))))))) (lambda () (let cb2d60@loop ((cb2d5c@line (get-line (current-input-port))) (cb2d5d@accum '"")) (let ((cb2d63@parentheses-ok? '#f) (cb2d65@eval-string-print '#f)) (begin (set! cb2d63@parentheses-ok? (lambda (cb2d6a@text) (let cb2d72@loop ((cb2d6c@chars (string->list cb2d6a@text)) (cb2d6d@p0 '0) (cb2d6e@p1 '0)) (if (null? cb2d6c@chars) (= '0 cb2d6d@p0 cb2d6e@p1) (let ((cb2d74@t (car cb2d6c@chars))) (if (memv cb2d74@t '(#\()) (cb2d72@loop (cdr cb2d6c@chars) (+ cb2d6d@p0 '1) cb2d6e@p1) (if (memv cb2d74@t '(#\))) (cb2d72@loop (cdr cb2d6c@chars) (- cb2d6d@p0 '1) cb2d6e@p1) (if (memv cb2d74@t '(#\[)) (cb2d72@loop (cdr cb2d6c@chars) cb2d6d@p0 (+ cb2d6e@p1 '1)) (if (memv cb2d74@t '(#\])) (cb2d72@loop (cdr cb2d6c@chars) cb2d6d@p0 (- cb2d6e@p1 '1)) (cb2d72@loop (cdr cb2d6c@chars) cb2d6d@p0 cb2d6e@p1)))))))))) (set! cb2d65@eval-string-print (lambda (cb2d68@text) (if (not (or (string=? '"\n" cb2d68@text) (= '0 (string-length cb2d68@text)))) (write (cb2ca7@eval-top-level (call-with-port (open-string-input-port cb2d68@text) read))) (void)))) (if (eof-object? cb2d5c@line) (begin (cb2d65@eval-string-print cb2d5d@accum) (exit)) (let ((cb2d66@current (string-append cb2d5d@accum cb2d5c@line))) (if (cb2d63@parentheses-ok? cb2d66@current) (cb2d65@eval-string-print cb2d66@current) (cb2d60@loop (get-line (current-input-port)) cb2d66@current))))))))))))) (newline) (cb2d53@rec)))) (cb2d53@rec))))) (set! cb2de8@cb2c99@repl cb2c99@repl) (set! cb2c9b@trace-printer (cb6c8@cb5a6@make-parameter write)) (set! cb2de9@cb2c9b@trace-printer cb2c9b@trace-printer) (set! cb2c9d@command-line (cb6c8@cb5a6@make-parameter (get-command-line))) (set! cb2dea@cb2c9d@command-line cb2c9d@command-line) (set! cb2c9f@local-library-path (lambda (cb2d76@filename) (cb982@cb7be@library-path))) (set! cb2deb@cb2c9f@local-library-path cb2c9f@local-library-path) (set! cb2ca1@load/args (lambda (cb2d78@filename . cb2d7a@args) (begin (apply cb2cb1@load-r6rs-top-level cb2d78@filename 'load cb2d7a@args) (void)))) (set! cb2dec@cb2ca1@load/args cb2ca1@load/args) (set! cb2ca3@load (lambda (cb2d7c@filename) (begin (apply cb2cb1@load-r6rs-top-level cb2d7c@filename 'load (cb2c9d@command-line)) (void)))) (set! cb2ded@cb2ca3@load cb2ca3@load) (set! cb2ca5@ironscheme-build (lambda () (cb2ca3@load '"ironscheme-buildscript.ss"))) (set! cb2dee@cb2ca5@ironscheme-build cb2ca5@ironscheme-build) (set! cb2ca7@eval-top-level (lambda (cb2d7e@x) (cb28af@cbe45@eval cb2d7e@x (cb28c6@cbe73@interaction-environment)))) (set! cb2def@cb2ca7@eval-top-level cb2ca7@eval-top-level) (set! cb2ca9@compile-system-libraries (lambda () (cb2ca7@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! cb2df0@cb2ca9@compile-system-libraries cb2ca9@compile-system-libraries) (set! cb2cab@compile (lambda (cb2d80@filename) (cb2cb1@load-r6rs-top-level cb2d80@filename 'compile))) (set! cb2df1@cb2cab@compile cb2cab@compile) (set! cb2cad@compile->closure (lambda (cb2d82@filename) (cb2cb1@load-r6rs-top-level cb2d82@filename 'closure))) (set! cb2df2@cb2cad@compile->closure cb2cad@compile->closure) (set! cb2caf@pre-compile-r6rs-file (lambda (cb2d84@filename) (cb2cb1@load-r6rs-top-level cb2d84@filename 'compile))) (set! cb2df3@cb2caf@pre-compile-r6rs-file cb2caf@pre-compile-r6rs-file) (set! cb2cb1@load-r6rs-top-level (lambda (cb2d86@filename cb2d87@how . cb2d8a@args) (begin (cb982@cb7be@library-path (cb2c9f@local-library-path cb2d86@filename)) (let ((cb2d8c@x* (with-input-from-file cb2d86@filename (lambda () (let cb2d8e@f () (let ((cb2d90@x (cb6ba@cb58a@read-annotated))) (if (eof-object? cb2d90@x) '() (cons cb2d90@x (cb2d8e@f))))))))) (let ((cb2d92@t cb2d87@how)) (if (memv cb2d92@t '(closure)) (cb28c5@cbe71@pre-compile-r6rs-top-level cb2d8c@x*) (if (memv cb2d92@t '(load)) (begin (cb2c9d@command-line (cons cb2d86@filename (car cb2d8a@args))) (cb6c9@cb5a8@mosh-cache-dir (create-mosh-cache-dir)) (if (cb6c9@cb5a8@mosh-cache-dir) (gensym-prefix-set! (cb2cb7@prefix-inc! (string-append (cb6c9@cb5a8@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (cb2d94@file) ((call/cc (lambda (cb2d98@cb2d96) (lambda () (with-exception-handler (lambda (cb2d9a@c) ((call/cc (lambda (cb2d9c@cb2d97) (cb2d98@cb2d96 (lambda () (if '#t '#t (cb2d9c@cb2d97 (lambda () (raise-continuable cb2d9a@c)))))))))) (lambda () (delete-file (string-append (cb6c9@cb5a8@mosh-cache-dir) '"/" cb2d94@file))))))))) (directory-list (cb6c9@cb5a8@mosh-cache-dir))) (void)) (let ((cb2d9e@compiled (cb28c4@cbe6f@compile-r6rs-top-level cb2d8c@x*))) (begin (if (and (cb6c9@cb5a8@mosh-cache-dir) (not (symbol-value '%disable-acc))) (cb986@cb7c6@serialize-all cb6c3@cb59c@serialize-library cb71f@cb6d8@compile-core-expr) (void)) (cb2d9e@compiled)))) (if (memv cb2d92@t '(compile)) (begin (cb28c4@cbe6f@compile-r6rs-top-level cb2d8c@x*) (cb986@cb7c6@serialize-all cb6c3@cb59c@serialize-library cb71f@cb6d8@compile-core-expr)) (if '#f '#f (void)))))))))) (set! cb2df4@cb2cb1@load-r6rs-top-level cb2cb1@load-r6rs-top-level) (set! cb2cb3@load-r6rs-top-level-sexp (lambda (cb2da0@import-spec cb2da1@thunk) (let ((cb2dac@cb2da5 cb982@cb7be@library-path) (cb2dad@cb2da7 cb6c9@cb5a8@mosh-cache-dir) (cb2dae@cb2da9 (cb2c9f@local-library-path '"")) (cb2daf@cb2dab (create-mosh-cache-dir))) (let ((cb2db4@swap (lambda () (begin (let ((cb2db6@t (cb2dac@cb2da5))) (begin (cb2dac@cb2da5 cb2dae@cb2da9) (set! cb2dae@cb2da9 cb2db6@t))) (let ((cb2db8@t (cb2dad@cb2da7))) (begin (cb2dad@cb2da7 cb2daf@cb2dab) (set! cb2daf@cb2dab cb2db8@t))))))) (dynamic-wind cb2db4@swap (lambda () (begin (if (cb6c9@cb5a8@mosh-cache-dir) (gensym-prefix-set! (cb2cb7@prefix-inc! (string-append (cb6c9@cb5a8@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((cb2dbe@cb2dbb cb2c9d@command-line) (cb2dbf@cb2dbd '())) (let ((cb2dc2@swap (lambda () (let ((cb2dc4@t (cb2dbe@cb2dbb))) (begin (cb2dbe@cb2dbb cb2dbf@cb2dbd) (set! cb2dbf@cb2dbd cb2dc4@t)))))) (dynamic-wind cb2dc2@swap (lambda () ((cb28c4@cbe6f@compile-r6rs-top-level (list (cons 'import cb2da0@import-spec) (list cb2da1@thunk))))) cb2dc2@swap))))) cb2db4@swap))))) (set! cb2df5@cb2cb3@load-r6rs-top-level-sexp cb2cb3@load-r6rs-top-level-sexp) (set! cb2cb5@prefix-inc (lambda (cb2dc6@prefix-string) (let ((cb2dc8@prefix (symbol->string cb2dc6@prefix-string))) (let ((cb2dca@len (string-length cb2dc8@prefix))) (let cb2dd2@loop ((cb2dcc@i (- cb2dca@len '1)) (cb2dcd@carry? '#t) (cb2dce@accum '())) (if (< cb2dcc@i '0) (string->symbol (list->string (if cb2dcd@carry? (cons '#\a cb2dce@accum) cb2dce@accum))) (if cb2dcd@carry? (let ((cb2dd4@next-integer (+ '1 (char->integer (string-ref cb2dc8@prefix cb2dcc@i))))) (if (= cb2dd4@next-integer '123) (cb2dd2@loop (- cb2dcc@i '1) '#f (cons '#\A cb2dce@accum)) (if (= cb2dd4@next-integer '91) (cb2dd2@loop (- cb2dcc@i '1) '#t (cons '#\a cb2dce@accum)) (cb2dd2@loop (- cb2dcc@i '1) '#f (cons (integer->char cb2dd4@next-integer) cb2dce@accum))))) (cb2dd2@loop (- cb2dcc@i '1) '#f (cons (string-ref cb2dc8@prefix cb2dcc@i) cb2dce@accum))))))))) (set! cb2df6@cb2cb5@prefix-inc cb2cb5@prefix-inc) (set! cb2cb7@prefix-inc! (lambda (cb2dd6@file) (begin (if (not (file-exists? cb2dd6@file)) (call-with-output-file cb2dd6@file (lambda (cb2dd8@port) (write 'd cb2dd8@port))) (void)) (let ((cb2dda@prefix (call-with-input-file cb2dd6@file read))) (if (main-vm?) (let ((cb2ddc@next-prefix (cb2cb5@prefix-inc cb2dda@prefix))) (begin (call-with-port (open-file-output-port cb2dd6@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (cb2dde@port) (write cb2ddc@next-prefix cb2dde@port))) cb2dda@prefix)) cb2dda@prefix))))) (set! cb2df7@cb2cb7@prefix-inc! cb2cb7@prefix-inc!) (begin (cb987@cb7c8@current-precompiled-library-loader cb6c4@cb59e@load-serialized-library) (set-symbol-value! 'load cb2ca3@load) (set-symbol-value! 'pre-compile-r6rs-file cb2caf@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs cb2ca7@eval-top-level) (set-symbol-value! 'int-env-syms cb28a6@cbe33@interaction-environment-symbols) (set-symbol-value! 'expanded2core cb71e@cb6d6@expanded->core) (set-symbol-value! 'trace-printer cb2c9b@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (cb2cb8@c) (condition (cb2be6@cb29f0@make-non-continuable-violation) (cb2bdc@cb29d7@make-who-condition 'raise) (cb2ba0@cb2938@make-message-condition '"returned from non-continuable exception") (cb2bd2@cb29bc@make-irritants-condition (list cb2cb8@c))))) (cb2c8f@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (cb2c8f@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (cb2c8d@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (cb2c8d@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (cb2c8d@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((cb2cba@prefix (lambda (cb2cbc@ext cb2cbd@ls) (append (map (lambda (cb2cc0@x) (string-append cb2cbc@ext cb2cc0@x)) cb2cbd@ls) cb2cbd@ls)))) (cb983@cb7c0@library-extensions (cb2cba@prefix '".mosh" (cb983@cb7c0@library-extensions)))) (current-exception-handler (lambda (cb2cc2@c) (if (condition? cb2cc2@c) (cb2c93@condition-printer cb2cc2@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" cb2cc2@c)))) (if ((call/cc (lambda (cb2cc6@cb2cc4) (lambda () (with-exception-handler (lambda (cb2cc8@c) ((call/cc (lambda (cb2cca@cb2cc5) (cb2cc6@cb2cc4 (lambda () (if '#t '#f (cb2cca@cb2cc5 (lambda () (raise-continuable cb2cc8@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (cb2cb3@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (cb2c9d@command-line)) (let ((cb2cd4@cb2ccd cb2c9d@command-line) (cb2cd5@cb2ccf cb6c9@cb5a8@mosh-cache-dir) (cb2cd6@cb2cd1 '()) (cb2cd7@cb2cd3 (create-mosh-cache-dir))) (let ((cb2cdc@swap (lambda () (begin (let ((cb2cde@t (cb2cd4@cb2ccd))) (begin (cb2cd4@cb2ccd cb2cd6@cb2cd1) (set! cb2cd6@cb2cd1 cb2cde@t))) (let ((cb2ce0@t (cb2cd5@cb2ccf))) (begin (cb2cd5@cb2ccf cb2cd7@cb2cd3) (set! cb2cd7@cb2cd3 cb2ce0@t))))))) (dynamic-wind cb2cdc@swap (lambda () (begin (if (cb6c9@cb5a8@mosh-cache-dir) (gensym-prefix-set! (cb2cb7@prefix-inc! (string-append (cb6c9@cb5a8@mosh-cache-dir) '"/prefix.txt"))) (void)) (cb2c99@repl))) cb2cdc@swap))) (begin (cb982@cb7be@library-path (cb2c9f@local-library-path (car (cb2c9d@command-line)))) (set! cb2c8b@x* (with-input-from-file (car (cb2c9d@command-line)) (lambda () (let cb2ce2@f () (let ((cb2ce4@x (cb6ba@cb58a@read-annotated))) (if (eof-object? cb2ce4@x) '() (cons cb2ce4@x (cb2ce2@f)))))))) (cb2c9d@command-line (cons (car (cb2c9d@command-line)) (cdr (cb2c9d@command-line)))) (cb6c9@cb5a8@mosh-cache-dir (create-mosh-cache-dir)) (if (cb6c9@cb5a8@mosh-cache-dir) (gensym-prefix-set! (cb2cb7@prefix-inc! (string-append (cb6c9@cb5a8@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (cb2ce6@file) ((call/cc (lambda (cb2cea@cb2ce8) (lambda () (with-exception-handler (lambda (cb2cec@c) ((call/cc (lambda (cb2cee@cb2ce9) (cb2cea@cb2ce8 (lambda () (if '#t '#t (cb2cee@cb2ce9 (lambda () (raise-continuable cb2cec@c)))))))))) (lambda () (delete-file (string-append (cb6c9@cb5a8@mosh-cache-dir) '"/" cb2ce6@file))))))))) (directory-list (cb6c9@cb5a8@mosh-cache-dir))) (void)) (let ((cb2cf0@compiled (cb28c4@cbe6f@compile-r6rs-top-level cb2c8b@x*))) (begin (if (and (cb6c9@cb5a8@mosh-cache-dir) (not (symbol-value '%disable-acc))) (cb986@cb7c6@serialize-all cb6c3@cb59c@serialize-library cb71f@cb6d8@compile-core-expr) (void)) (cb2cf0@compiled))))))))
