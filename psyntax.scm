;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! ai28e5@library-file-path->cache-path (unspecified)) (set! ai28e7@read-annotated (unspecified)) (set! ai28e9@annotation-stripped (unspecified)) (set! ai28eb@annotation? (unspecified)) (set! ai28ed@annotation-source (unspecified)) (set! ai28ef@annotation-expression (unspecified)) (set! ai28f1@scm->fasl (unspecified)) (set! ai28f3@fasl-save (unspecified)) (set! ai28f5@fasl-load (unspecified)) (set! ai28f7@verbose? (unspecified)) (set! ai28f9@serialize-library (unspecified)) (set! ai28fb@load-serialized-library (unspecified)) (set! ai28fd@make-record-printer (unspecified)) (set! ai28ff@compile-core (unspecified)) (set! ai2901@read-library-source-file (unspecified)) (set! ai2903@make-parameter (unspecified)) (set! ai2905@mosh-cache-dir (unspecified)) (set! ai299b@file-options-spec (unspecified)) (set! ai28e5@library-file-path->cache-path (lambda (ai299c@x) (call-with-values (lambda () (open-string-output-port)) (lambda (ai29a2@ai299f ai29a3@ai29a1) (let ((ai29a6@extract ai29a3@ai29a1) (ai29a7@p ai29a2@ai299f)) (let ((ai29ab@display-hex '#f)) (begin (set! ai29ab@display-hex (lambda (ai29b4@n) (if (<= '0 ai29b4@n '9) (display ai29b4@n ai29a7@p) (display (integer->char (+ (char->integer '#\a) (- ai29b4@n '10))) ai29a7@p)))) (begin (let ai29ae@f ((ai29ac@ls (string-split ai299c@x '#\/))) (if (not (null? ai29ac@ls)) (begin (display '"_" ai29a7@p) (for-each (lambda (ai29b0@c) (if (or (char<=? '#\a ai29b0@c '#\z) (char<=? '#\A ai29b0@c '#\Z) (char<=? '#\0 ai29b0@c '#\9) (memv ai29b0@c '(#\- #\. #\_ #\~))) (display ai29b0@c ai29a7@p) (begin (display '"%" ai29a7@p) (let ((ai29b2@n (char->integer ai29b0@c))) (begin (ai29ab@display-hex (quotient ai29b2@n '16)) (ai29ab@display-hex (remainder ai29b2@n '16))))))) (string->list (car ai29ac@ls))) (ai29ae@f (cdr ai29ac@ls))) (void))) (ai29a6@extract))))))))) (set! ai2a16@ai28e5@library-file-path->cache-path ai28e5@library-file-path->cache-path) (set! ai28e7@read-annotated read) (set! ai2a17@ai28e7@read-annotated ai28e7@read-annotated) (set! ai28e9@annotation-stripped (lambda (ai29b6@x) (ai28ef@annotation-expression ai29b6@x))) (set! ai2a18@ai28e9@annotation-stripped ai28e9@annotation-stripped) (set! ai28eb@annotation? (lambda (ai29b8@x) (source-info ai29b8@x))) (set! ai2a19@ai28eb@annotation? ai28eb@annotation?) (set! ai28ed@annotation-source (lambda (ai29ba@x) (source-info ai29ba@x))) (set! ai2a1a@ai28ed@annotation-source ai28ed@annotation-source) (set! ai28ef@annotation-expression (lambda (ai29bc@x) (if (pair? ai29bc@x) (cons (car ai29bc@x) (cdr ai29bc@x)) (if (procedure? ai29bc@x) (set-source-info! ai29bc@x '#f) ai29bc@x)))) (set! ai2a1b@ai28ef@annotation-expression ai28ef@annotation-expression) (set! ai28f1@scm->fasl (lambda (ai29be@filename) (string-append (ai2905@mosh-cache-dir) '"/" (ai28e5@library-file-path->cache-path ai29be@filename) '".mosh-fasl"))) (set! ai2a1c@ai28f1@scm->fasl ai28f1@scm->fasl) (set! ai28f3@fasl-save (lambda (ai29c0@filename ai29c1@obj) (call-with-port (open-file-output-port ai29c0@filename) (lambda (ai29c4@port) ((symbol-value 'fasl-write!) ai29c1@obj ai29c4@port))))) (set! ai2a1d@ai28f3@fasl-save ai28f3@fasl-save) (set! ai28f5@fasl-load (lambda (ai29c6@filename) (call-with-port (open-file-input-port ai29c6@filename) (symbol-value 'fasl-read!)))) (set! ai2a1e@ai28f5@fasl-load ai28f5@fasl-load) (set! ai28f7@verbose? (symbol-value '%verbose)) (set! ai2a1f@ai28f7@verbose? ai28f7@verbose?) (set! ai28f9@serialize-library (lambda (ai29c8@filename ai29c9@obj) (begin (if ai28f7@verbose? (format (current-error-port) '"serialize-library ~a\n..." ai29c8@filename) (void)) (let ((ai29cc@expanded2core (symbol-value 'expanded2core))) (let ((ai29ce@compile (symbol-value 'compile-w/o-halt))) (let ((ai29d0@code ai29c9@obj)) (let ((ai29d2@pivot (cddddr (cddddr ai29d0@code)))) (let ((ai29d4@visit (ai29ce@compile (ai29cc@expanded2core (car ai29d2@pivot))))) (begin (set-car! ai29d2@pivot ai29d4@visit) (let ((ai29d6@pivot (cdr ai29d2@pivot))) (let ((ai29d8@invoke (ai29ce@compile (ai29cc@expanded2core (car ai29d6@pivot))))) (set-car! ai29d6@pivot ai29d8@invoke))))))))) (let ((ai29da@fasl-file (ai28f1@scm->fasl ai29c8@filename))) (begin (if (file-exists? ai29da@fasl-file) (delete-file ai29da@fasl-file) (void)) ((call/cc (lambda (ai29de@ai29dc) (lambda () (with-exception-handler (lambda (ai29e0@c1) ((call/cc (lambda (ai29e2@ai29dd) (ai29de@ai29dc (lambda () (if '#t (begin (if ai28f7@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" ai29c8@filename) (void)) (if (file-exists? ai29da@fasl-file) (delete-file ai29da@fasl-file) (void)) '#f) (ai29e2@ai29dd (lambda () (raise-continuable ai29e0@c1)))))))))) (lambda () (ai28f3@fasl-save ai29da@fasl-file ai29c9@obj)))))))))))) (set! ai2a20@ai28f9@serialize-library ai28f9@serialize-library) (set! ai28fb@load-serialized-library (lambda (ai29e4@filename ai29e5@obj) (and (ai2905@mosh-cache-dir) (let ((ai29e8@fasl-file (ai28f1@scm->fasl ai29e4@filename))) (if (and (file-exists? ai29e8@fasl-file) ((symbol-value 'file-newer?) ai29e8@fasl-file ai29e4@filename)) (let ((ai29ea@expanded2core (symbol-value 'expanded2core))) (let ((ai29ec@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((ai29ee@code (ai28f5@fasl-load ai29e8@fasl-file))) (let ((ai29f0@pivot (cddddr (cddddr ai29ee@code)))) (let ((ai29f2@visit (car ai29f0@pivot))) (let ((ai29f4@visit-proc (lambda () (ai29ec@eval-compiled-core ai29f2@visit)))) (begin (set-car! ai29f0@pivot ai29f4@visit-proc) (let ((ai29f6@pivot (cdr ai29f0@pivot))) (let ((ai29f8@invoke (car ai29f6@pivot))) (begin (set-car! ai29f6@pivot (lambda () (ai29ec@eval-compiled-core ai29f8@invoke))) (apply ai29e5@obj ai29ee@code))))))))))) '#f))))) (set! ai2a21@ai28fb@load-serialized-library ai28fb@load-serialized-library) (set! ai28fd@make-record-printer (lambda (ai29fa@name ai29fb@printer) (lambda ai29fe@x (begin (display '"record printer") (for-each display ai29fe@x))))) (set! ai2a22@ai28fd@make-record-printer ai28fd@make-record-printer) (set! ai28ff@compile-core (lambda ai2a00@x (apply error 'comile-core '"not implementated" ai2a00@x))) (set! ai2a23@ai28ff@compile-core ai28ff@compile-core) (set! ai2901@read-library-source-file (lambda (ai2a02@file-name) (with-input-from-file ai2a02@file-name ai28e7@read-annotated))) (set! ai2a24@ai2901@read-library-source-file ai2901@read-library-source-file) (set! ai2903@make-parameter (lambda ai2a12 (let ((ai2a13 (length ai2a12))) (if (= ai2a13 '1) (apply (lambda (ai2a04@x) (ai2903@make-parameter ai2a04@x (lambda (ai2a06@x) ai2a06@x))) ai2a12) (if (= ai2a13 '2) (apply (lambda (ai2a08@x ai2a09@fender) (let ((ai2a0c@x (ai2a09@fender ai2a08@x))) (lambda ai2a10 (let ((ai2a11 (length ai2a10))) (if (= ai2a11 '0) (apply (lambda () ai2a0c@x) ai2a10) (if (= ai2a11 '1) (apply (lambda (ai2a0e@v) (set! ai2a0c@x (ai2a09@fender ai2a0e@v))) ai2a10) (error 'apply '"invalid arg count"))))))) ai2a12) (error 'apply '"invalid arg count")))))) (set! ai2a25@ai2903@make-parameter ai2903@make-parameter) (set! ai2905@mosh-cache-dir (ai2903@make-parameter '#f)) (set! ai2a26@ai2905@mosh-cache-dir ai2905@mosh-cache-dir) (set! ai299b@file-options-spec (lambda (ai2a14@x) ai2a14@x)) (set! ai2a27@ai299b@file-options-spec ai299b@file-options-spec) (void))
(begin (set! ai2a2d@current-primitive-locations (unspecified)) (set! ai2a2f@mutable? (unspecified)) (set! ai2a31@rewriter (unspecified)) (set! ai2a33@expanded->core (unspecified)) (set! ai2a35@compile-core-expr (unspecified)) (set! ai2a37@pretty-print (unspecified)) (set! ai2a39@compile-core-expr-to-port (unspecified)) (set! ai2a2d@current-primitive-locations (ai2a25@ai2903@make-parameter (lambda (ai2a3a@x) '#f) (lambda (ai2a3c@p) ai2a3c@p))) (set! ai2a78@ai2a2d@current-primitive-locations ai2a2d@current-primitive-locations) (set! ai2a2f@mutable? (lambda (ai2a3e@x) (or (pair? ai2a3e@x) (vector? ai2a3e@x) (hashtable? ai2a3e@x)))) (set! ai2a79@ai2a2f@mutable? ai2a2f@mutable?) (set! ai2a31@rewriter (lambda (ai2a40@quote-hack?) (let ((ai2a43@f '#f)) (begin (set! ai2a43@f (lambda (ai2a44@x) (if (pair? ai2a44@x) (let ((ai2a46@t (car ai2a44@x))) (if (memv ai2a46@t '(quote)) (if (and ai2a40@quote-hack? (ai2a2f@mutable? (cadr ai2a44@x))) (let ((ai2a48@g (gensym))) (begin (set-symbol-value! ai2a48@g (cadr ai2a44@x)) ai2a48@g)) ai2a44@x) (if (memv ai2a46@t '(case-lambda)) (cons 'case-lambda (map (lambda (ai2a4a@x) (cons (car ai2a4a@x) (map ai2a43@f (cdr ai2a4a@x)))) (cdr ai2a44@x))) (if (memv ai2a46@t '(lambda)) (cons* 'lambda (cadr ai2a44@x) (map ai2a43@f (cddr ai2a44@x))) (if (memv ai2a46@t '(letrec)) (let ((ai2a4c@bindings (cadr ai2a44@x)) (ai2a4d@body* (cddr ai2a44@x))) (let ((ai2a50@lhs* (map car ai2a4c@bindings)) (ai2a51@rhs* (map cadr ai2a4c@bindings))) (cons* 'letrec (map list ai2a50@lhs* (map ai2a43@f ai2a51@rhs*)) (map ai2a43@f ai2a4d@body*)))) (if (memv ai2a46@t '(letrec*)) (let ((ai2a54@bindings (cadr ai2a44@x)) (ai2a55@body* (cddr ai2a44@x))) (let ((ai2a58@lhs* (map car ai2a54@bindings)) (ai2a59@rhs* (map cadr ai2a54@bindings))) (cons* 'letrec* (map list ai2a58@lhs* (map ai2a43@f ai2a59@rhs*)) (map ai2a43@f ai2a55@body*)))) (if (memv ai2a46@t '(library-letrec*)) (let ((ai2a5c@name (cadr ai2a44@x)) (ai2a5d@x (cdr ai2a44@x))) (let ((ai2a60@bindings (cadr ai2a5d@x)) (ai2a61@body* (cddr ai2a5d@x))) (let ((ai2a64@lhs* (map car ai2a60@bindings)) (ai2a65@lhs** (map cadr ai2a60@bindings)) (ai2a66@rhs* (map caddr ai2a60@bindings))) (cons* 'library-letrec* ai2a5c@name (map list ai2a64@lhs* ai2a65@lhs** (map ai2a43@f ai2a66@rhs*)) (map ai2a43@f ai2a61@body*))))) (if (memv ai2a46@t '(begin)) (cons 'begin (map ai2a43@f (cdr ai2a44@x))) (if (memv ai2a46@t '(set!)) (list 'set! (cadr ai2a44@x) (ai2a43@f (caddr ai2a44@x))) (if (memv ai2a46@t '(primitive)) (let ((ai2a6a@op (cadr ai2a44@x))) (let ((ai2a6c@t ((ai2a2d@current-primitive-locations) ai2a6a@op))) (if ai2a6c@t ((lambda (ai2a6e@loc) ai2a6e@loc) ai2a6c@t) ai2a6a@op))) (if (memv ai2a46@t '(define)) ai2a44@x (if (list? ai2a44@x) (map ai2a43@f ai2a44@x) (error 'rewrite '"invalid form ~s ~s" ai2a44@x (list? ai2a44@x)))))))))))))) ai2a44@x))) ai2a43@f)))) (set! ai2a7a@ai2a31@rewriter ai2a31@rewriter) (set! ai2a33@expanded->core (lambda (ai2a70@x) ((ai2a31@rewriter '#f) ai2a70@x))) (set! ai2a7b@ai2a33@expanded->core ai2a33@expanded->core) (set! ai2a35@compile-core-expr (lambda (ai2a72@x) ((ai2a31@rewriter '#f) ai2a72@x))) (set! ai2a7c@ai2a35@compile-core-expr ai2a35@compile-core-expr) (set! ai2a37@pretty-print write) (set! ai2a7d@ai2a37@pretty-print ai2a37@pretty-print) (set! ai2a39@compile-core-expr-to-port (lambda (ai2a74@x ai2a75@p) (ai2a37@pretty-print ((ai2a31@rewriter '#f) ai2a74@x) ai2a75@p))) (set! ai2a7e@ai2a39@compile-core-expr-to-port ai2a39@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! ai2acd@make-collection (unspecified)) (set! ai2acf@current-library-collection (unspecified)) (set! ai2ad1@rp (unspecified)) (set! ai2adb@library? (unspecified)) (set! ai2add@library-id (unspecified)) (set! ai2adf@set-library-id! (unspecified)) (set! ai2ae1@library-name (unspecified)) (set! ai2ae3@set-library-name! (unspecified)) (set! ai2ae5@library-version (unspecified)) (set! ai2ae7@set-library-version! (unspecified)) (set! ai2ae9@library-imp* (unspecified)) (set! ai2aeb@set-library-imp*! (unspecified)) (set! ai2aed@library-vis* (unspecified)) (set! ai2aef@set-library-vis*! (unspecified)) (set! ai2af1@library-inv* (unspecified)) (set! ai2af3@set-library-inv*! (unspecified)) (set! ai2af5@library-subst (unspecified)) (set! ai2af7@set-library-subst! (unspecified)) (set! ai2af9@library-env (unspecified)) (set! ai2afb@set-library-env! (unspecified)) (set! ai2afd@library-visit-state (unspecified)) (set! ai2aff@set-library-visit-state! (unspecified)) (set! ai2b01@library-invoke-state (unspecified)) (set! ai2b03@set-library-invoke-state! (unspecified)) (set! ai2b05@library-visit-code (unspecified)) (set! ai2b07@set-library-visit-code! (unspecified)) (set! ai2b09@library-invoke-code (unspecified)) (set! ai2b0b@set-library-invoke-code! (unspecified)) (set! ai2b0d@library-visible? (unspecified)) (set! ai2b0f@set-library-visible?! (unspecified)) (set! ai2b11@library-source-file-name (unspecified)) (set! ai2b13@set-library-source-file-name! (unspecified)) (set! ai2b15@dummy (unspecified)) (set! ai2b17@find-dependencies (unspecified)) (set! ai2b19@find-library-by (unspecified)) (set! ai2b1b@library-path (unspecified)) (set! ai2b1d@library-extensions (unspecified)) (set! ai2b1f@library-name->file-name (unspecified)) (set! ai2b21@file-locator (unspecified)) (set! ai2b23@serialize-all (unspecified)) (set! ai2b25@current-precompiled-library-loader (unspecified)) (set! ai2b27@try-load-from-file (unspecified)) (set! ai2b29@library-loader (unspecified)) (set! ai2b2b@current-library-expander (unspecified)) (set! ai2b2d@external-pending-libraries (unspecified)) (set! ai2b2f@find-external-library (unspecified)) (set! ai2b31@find-library-by-name (unspecified)) (set! ai2b33@library-exists? (unspecified)) (set! ai2b35@find-library-by-spec/die (unspecified)) (set! ai2b37@label->binding-table (unspecified)) (set! ai2b39@install-library-record (unspecified)) (set! ai2b3b@install-library (unspecified)) (set! ai2b3d@imported-label->binding (unspecified)) (set! ai2b3f@invoke-library (unspecified)) (set! ai2b41@visit-library (unspecified)) (set! ai2b43@invoke-library-by-spec (unspecified)) (set! ai2b45@invoke-library-by-name (unspecified)) (set! ai2b47@installed-libraries (unspecified)) (set! ai2b49@library-spec (unspecified)) (set! ai2acd@make-collection (lambda () (let ((ai2b4a@set '())) (let ((ai2b4d@set-cons '#f)) (begin (set! ai2b4d@set-cons (lambda (ai2b52@x ai2b53@ls) (if (memq ai2b52@x ai2b53@ls) ai2b53@ls (cons ai2b52@x ai2b53@ls)))) (lambda ai2b50 (let ((ai2b51 (length ai2b50))) (if (= ai2b51 '0) (apply (lambda () ai2b4a@set) ai2b50) (if (= ai2b51 '1) (apply (lambda (ai2b4e@x) (set! ai2b4a@set (ai2b4d@set-cons ai2b4e@x ai2b4a@set))) ai2b50) (error 'apply '"invalid arg count")))))))))) (set! ai2ccc@ai2acd@make-collection ai2acd@make-collection) (set! ai2acf@current-library-collection (ai2a25@ai2903@make-parameter (ai2acd@make-collection) (lambda (ai2b56@x) (begin (if (not (procedure? ai2b56@x)) (assertion-violation 'current-library-collection '"not a procedure" ai2b56@x) (void)) ai2b56@x)))) (set! ai2ccd@ai2acf@current-library-collection ai2acf@current-library-collection) (set! ai2ad1@rp (ai2a22@ai28fd@make-record-printer 'library (lambda (ai2b58@x ai2b59@p ai2b5a@wr) (begin (if (not (ai2adb@library? ai2b58@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (ai2ae5@library-version ai2b58@x)) (ai2ae1@library-name ai2b58@x) (append (ai2ae1@library-name ai2b58@x) (list (ai2ae5@library-version ai2b58@x))))) ai2b59@p))))) (set! ai2cce@ai2ad1@rp ai2ad1@rp) (set! ai2adb@library? (lambda (ai2b5e@x) (and (simple-struct? ai2b5e@x) (eq? (simple-struct-name ai2b5e@x) 'library)))) (set! ai2ccf@ai2adb@library? ai2adb@library?) (set! ai2add@library-id (lambda (ai2b60@x) (simple-struct-ref ai2b60@x '0))) (set! ai2cd0@ai2add@library-id ai2add@library-id) (set! ai2adf@set-library-id! (lambda (ai2b62@x ai2b63@val) (simple-struct-set! ai2b62@x '0 ai2b63@val))) (set! ai2cd1@ai2adf@set-library-id! ai2adf@set-library-id!) (set! ai2ae1@library-name (lambda (ai2b66@x) (simple-struct-ref ai2b66@x '1))) (set! ai2cd2@ai2ae1@library-name ai2ae1@library-name) (set! ai2ae3@set-library-name! (lambda (ai2b68@x ai2b69@val) (simple-struct-set! ai2b68@x '1 ai2b69@val))) (set! ai2cd3@ai2ae3@set-library-name! ai2ae3@set-library-name!) (set! ai2ae5@library-version (lambda (ai2b6c@x) (simple-struct-ref ai2b6c@x '2))) (set! ai2cd4@ai2ae5@library-version ai2ae5@library-version) (set! ai2ae7@set-library-version! (lambda (ai2b6e@x ai2b6f@val) (simple-struct-set! ai2b6e@x '2 ai2b6f@val))) (set! ai2cd5@ai2ae7@set-library-version! ai2ae7@set-library-version!) (set! ai2ae9@library-imp* (lambda (ai2b72@x) (simple-struct-ref ai2b72@x '3))) (set! ai2cd6@ai2ae9@library-imp* ai2ae9@library-imp*) (set! ai2aeb@set-library-imp*! (lambda (ai2b74@x ai2b75@val) (simple-struct-set! ai2b74@x '3 ai2b75@val))) (set! ai2cd7@ai2aeb@set-library-imp*! ai2aeb@set-library-imp*!) (set! ai2aed@library-vis* (lambda (ai2b78@x) (simple-struct-ref ai2b78@x '4))) (set! ai2cd8@ai2aed@library-vis* ai2aed@library-vis*) (set! ai2aef@set-library-vis*! (lambda (ai2b7a@x ai2b7b@val) (simple-struct-set! ai2b7a@x '4 ai2b7b@val))) (set! ai2cd9@ai2aef@set-library-vis*! ai2aef@set-library-vis*!) (set! ai2af1@library-inv* (lambda (ai2b7e@x) (simple-struct-ref ai2b7e@x '5))) (set! ai2cda@ai2af1@library-inv* ai2af1@library-inv*) (set! ai2af3@set-library-inv*! (lambda (ai2b80@x ai2b81@val) (simple-struct-set! ai2b80@x '5 ai2b81@val))) (set! ai2cdb@ai2af3@set-library-inv*! ai2af3@set-library-inv*!) (set! ai2af5@library-subst (lambda (ai2b84@x) (simple-struct-ref ai2b84@x '6))) (set! ai2cdc@ai2af5@library-subst ai2af5@library-subst) (set! ai2af7@set-library-subst! (lambda (ai2b86@x ai2b87@val) (simple-struct-set! ai2b86@x '6 ai2b87@val))) (set! ai2cdd@ai2af7@set-library-subst! ai2af7@set-library-subst!) (set! ai2af9@library-env (lambda (ai2b8a@x) (simple-struct-ref ai2b8a@x '7))) (set! ai2cde@ai2af9@library-env ai2af9@library-env) (set! ai2afb@set-library-env! (lambda (ai2b8c@x ai2b8d@val) (simple-struct-set! ai2b8c@x '7 ai2b8d@val))) (set! ai2cdf@ai2afb@set-library-env! ai2afb@set-library-env!) (set! ai2afd@library-visit-state (lambda (ai2b90@x) (simple-struct-ref ai2b90@x '8))) (set! ai2ce0@ai2afd@library-visit-state ai2afd@library-visit-state) (set! ai2aff@set-library-visit-state! (lambda (ai2b92@x ai2b93@val) (simple-struct-set! ai2b92@x '8 ai2b93@val))) (set! ai2ce1@ai2aff@set-library-visit-state! ai2aff@set-library-visit-state!) (set! ai2b01@library-invoke-state (lambda (ai2b96@x) (simple-struct-ref ai2b96@x '9))) (set! ai2ce2@ai2b01@library-invoke-state ai2b01@library-invoke-state) (set! ai2b03@set-library-invoke-state! (lambda (ai2b98@x ai2b99@val) (simple-struct-set! ai2b98@x '9 ai2b99@val))) (set! ai2ce3@ai2b03@set-library-invoke-state! ai2b03@set-library-invoke-state!) (set! ai2b05@library-visit-code (lambda (ai2b9c@x) (simple-struct-ref ai2b9c@x '10))) (set! ai2ce4@ai2b05@library-visit-code ai2b05@library-visit-code) (set! ai2b07@set-library-visit-code! (lambda (ai2b9e@x ai2b9f@val) (simple-struct-set! ai2b9e@x '10 ai2b9f@val))) (set! ai2ce5@ai2b07@set-library-visit-code! ai2b07@set-library-visit-code!) (set! ai2b09@library-invoke-code (lambda (ai2ba2@x) (simple-struct-ref ai2ba2@x '11))) (set! ai2ce6@ai2b09@library-invoke-code ai2b09@library-invoke-code) (set! ai2b0b@set-library-invoke-code! (lambda (ai2ba4@x ai2ba5@val) (simple-struct-set! ai2ba4@x '11 ai2ba5@val))) (set! ai2ce7@ai2b0b@set-library-invoke-code! ai2b0b@set-library-invoke-code!) (set! ai2b0d@library-visible? (lambda (ai2ba8@x) (simple-struct-ref ai2ba8@x '12))) (set! ai2ce8@ai2b0d@library-visible? ai2b0d@library-visible?) (set! ai2b0f@set-library-visible?! (lambda (ai2baa@x ai2bab@val) (simple-struct-set! ai2baa@x '12 ai2bab@val))) (set! ai2ce9@ai2b0f@set-library-visible?! ai2b0f@set-library-visible?!) (set! ai2b11@library-source-file-name (lambda (ai2bae@x) (simple-struct-ref ai2bae@x '13))) (set! ai2cea@ai2b11@library-source-file-name ai2b11@library-source-file-name) (set! ai2b13@set-library-source-file-name! (lambda (ai2bb0@x ai2bb1@val) (simple-struct-set! ai2bb0@x '13 ai2bb1@val))) (set! ai2ceb@ai2b13@set-library-source-file-name! ai2b13@set-library-source-file-name!) (set! ai2b15@dummy '3) (set! ai2cec@ai2b15@dummy ai2b15@dummy) (set! ai2b17@find-dependencies (lambda (ai2bb4@ls) (if (null? ai2bb4@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! ai2ced@ai2b17@find-dependencies ai2b17@find-dependencies) (set! ai2b19@find-library-by (lambda (ai2bb6@pred) (let ai2bba@f ((ai2bb8@ls ((ai2acf@current-library-collection)))) (if (null? ai2bb8@ls) '#f (if (ai2bb6@pred (car ai2bb8@ls)) (car ai2bb8@ls) (ai2bba@f (cdr ai2bb8@ls))))))) (set! ai2cee@ai2b19@find-library-by ai2b19@find-library-by) (set! ai2b1b@library-path (ai2a25@ai2903@make-parameter '(".") (lambda (ai2bbc@x) (if (and (list? ai2bbc@x) (for-all string? ai2bbc@x)) (map (lambda (ai2bbe@x) ai2bbe@x) ai2bbc@x) (assertion-violation 'library-path '"not a list of strings" ai2bbc@x))))) (set! ai2cef@ai2b1b@library-path ai2b1b@library-path) (set! ai2b1d@library-extensions (ai2a25@ai2903@make-parameter '(".sls" ".ss" ".scm") (lambda (ai2bc0@x) (if (and (list? ai2bc0@x) (for-all string? ai2bc0@x)) (map (lambda (ai2bc2@x) ai2bc2@x) ai2bc0@x) (assertion-violation 'library-extensions '"not a list of strings" ai2bc0@x))))) (set! ai2cf0@ai2b1d@library-extensions ai2b1d@library-extensions) (set! ai2b1f@library-name->file-name (lambda (ai2bc4@x) (call-with-values (lambda () (open-string-output-port)) (lambda (ai2bca@ai2bc7 ai2bcb@ai2bc9) (let ((ai2bce@extract ai2bcb@ai2bc9) (ai2bcf@p ai2bca@ai2bc7)) (let ((ai2bd3@display-hex '#f)) (begin (set! ai2bd3@display-hex (lambda (ai2bdc@n) (if (<= '0 ai2bdc@n '9) (display ai2bdc@n ai2bcf@p) (display (integer->char (+ (char->integer '#\a) (- ai2bdc@n '10))) ai2bcf@p)))) (begin (let ai2bd6@f ((ai2bd4@ls ai2bc4@x)) (if (not (null? ai2bd4@ls)) (begin (display '"/" ai2bcf@p) (for-each (lambda (ai2bd8@c) (if (or (char<=? '#\a ai2bd8@c '#\z) (char<=? '#\A ai2bd8@c '#\Z) (char<=? '#\0 ai2bd8@c '#\9) (memv ai2bd8@c '(#\- #\. #\_ #\~))) (display ai2bd8@c ai2bcf@p) (begin (display '"%" ai2bcf@p) (let ((ai2bda@n (char->integer ai2bd8@c))) (begin (ai2bd3@display-hex (quotient ai2bda@n '16)) (ai2bd3@display-hex (remainder ai2bda@n '16))))))) (string->list (symbol->string (car ai2bd4@ls)))) (ai2bd6@f (cdr ai2bd4@ls))) (void))) (ai2bce@extract))))))))) (set! ai2cf1@ai2b1f@library-name->file-name ai2b1f@library-name->file-name) (set! ai2b21@file-locator (ai2a25@ai2903@make-parameter (lambda (ai2bde@x) (let ((ai2be0@str (ai2b1f@library-name->file-name ai2bde@x))) (let ai2be8@f ((ai2be2@ls (ai2b1b@library-path)) (ai2be3@exts (ai2b1d@library-extensions)) (ai2be4@failed-list '())) (if (null? ai2be2@ls) (let ((ai2bf2@ai2bed '#f) (ai2bf4@ai2bef '#f) (ai2bf6@ai2bee '#f) (ai2bf9@ai2bec '#f) (ai2bfb@make-library-resolution-condition '#f) (ai2bfd@ai2bea '#f) (ai2bff@ai2beb '#f) (ai2c01@library-resolution-condition? '#f) (ai2c03@condition-library '#f) (ai2c05@condition-files '#f)) (begin (set! ai2bf2@ai2bed (make-record-type-descriptor '&library-resolution ai4f08@ai4c4f@&condition-rtd 'ai2bf0 '#f '#f '#((immutable library) (immutable files)))) (set! ai2bf4@ai2bef '#f) (set! ai2bf6@ai2bee (make-record-constructor-descriptor ai2bf2@ai2bed ai4f09@ai4c51@&condition-rcd ai2bf4@ai2bef)) (set! ai2bf9@ai2bec (record-predicate ai2bf2@ai2bed)) (set! ai2bfb@make-library-resolution-condition (record-constructor ai2bf6@ai2bee)) (set! ai2bfd@ai2bea (record-accessor ai2bf2@ai2bed '0)) (set! ai2bff@ai2beb (record-accessor ai2bf2@ai2bed '1)) (set! ai2c01@library-resolution-condition? (condition-predicate ai2bf2@ai2bed)) (set! ai2c03@condition-library (condition-accessor ai2bf2@ai2bed ai2bfd@ai2bea)) (set! ai2c05@condition-files (condition-accessor ai2bf2@ai2bed ai2bff@ai2beb)) (raise (condition (ai4f28@ai4ce9@make-error) (ai4f4a@ai4d45@make-who-condition 'expander) (ai4f0e@ai4ca6@make-message-condition '"cannot locate library in library-path") (ai2bfb@make-library-resolution-condition ai2bde@x (reverse ai2be4@failed-list)))))) (if (null? ai2be3@exts) (ai2be8@f (cdr ai2be2@ls) (ai2b1d@library-extensions) ai2be4@failed-list) (let ((ai2c06@name (string-append (car ai2be2@ls) ai2be0@str (car ai2be3@exts)))) (if (file-exists? ai2c06@name) ai2c06@name (ai2be8@f ai2be2@ls (cdr ai2be3@exts) (cons ai2c06@name ai2be4@failed-list))))))))) (lambda (ai2c08@f) (if (procedure? ai2c08@f) ai2c08@f (assertion-violation 'file-locator '"not a procedure" ai2c08@f))))) (set! ai2cf2@ai2b21@file-locator ai2b21@file-locator) (set! ai2b23@serialize-all (lambda (ai2c0a@serialize ai2c0b@compile) (let ((ai2c0f@library-desc '#f)) (begin (set! ai2c0f@library-desc (lambda (ai2c12@x) (list (ai2add@library-id ai2c12@x) (ai2ae1@library-name ai2c12@x)))) (for-each (lambda (ai2c10@x) (if (ai2b11@library-source-file-name ai2c10@x) (ai2c0a@serialize (ai2b11@library-source-file-name ai2c10@x) (list (ai2add@library-id ai2c10@x) (ai2ae1@library-name ai2c10@x) (ai2ae5@library-version ai2c10@x) (map ai2c0f@library-desc (ai2ae9@library-imp* ai2c10@x)) (map ai2c0f@library-desc (ai2aed@library-vis* ai2c10@x)) (map ai2c0f@library-desc (ai2af1@library-inv* ai2c10@x)) (ai2af5@library-subst ai2c10@x) (ai2af9@library-env ai2c10@x) (ai2c0b@compile (ai2b05@library-visit-code ai2c10@x)) (ai2c0b@compile (ai2b09@library-invoke-code ai2c10@x)) (ai2b0d@library-visible? ai2c10@x))) (void))) ((ai2acf@current-library-collection))))))) (set! ai2cf3@ai2b23@serialize-all ai2b23@serialize-all) (set! ai2b25@current-precompiled-library-loader (ai2a25@ai2903@make-parameter (lambda (ai2c14@filename ai2c15@sk) '#f))) (set! ai2cf4@ai2b25@current-precompiled-library-loader ai2b25@current-precompiled-library-loader) (set! ai2b27@try-load-from-file (lambda (ai2c18@filename) ((ai2b25@current-precompiled-library-loader) ai2c18@filename (lambda ai2c3e (let ((ai2c3f (length ai2c3e))) (if (= ai2c3f '11) (apply (lambda (ai2c1a@id ai2c1b@name ai2c1c@ver ai2c1d@imp* ai2c1e@vis* ai2c1f@inv* ai2c20@exp-subst ai2c21@exp-env ai2c22@visit-proc ai2c23@invoke-proc ai2c24@visible?) (let ai2c32@f ((ai2c30@deps (append ai2c1d@imp* ai2c1e@vis* ai2c1f@inv*))) (if (null? ai2c30@deps) (begin (ai2b3b@install-library ai2c1a@id ai2c1b@name ai2c1c@ver ai2c1d@imp* ai2c1e@vis* ai2c1f@inv* ai2c20@exp-subst ai2c21@exp-env ai2c22@visit-proc ai2c23@invoke-proc '#f '#f ai2c24@visible? '#f) '#t) (let ((ai2c34@d (car ai2c30@deps))) (let ((ai2c36@label (car ai2c34@d)) (ai2c37@dname (cadr ai2c34@d))) (let ((ai2c3a@l (ai2b31@find-library-by-name ai2c37@dname))) (if (and (ai2adb@library? ai2c3a@l) (eq? ai2c36@label (ai2add@library-id ai2c3a@l))) (ai2c32@f (cdr ai2c30@deps)) (begin (if ai2a1f@ai28f7@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" ai2c1b@name ai2c37@dname ai2c18@filename ai2c3a@l ai2c36@label (ai2add@library-id ai2c3a@l)) (void)) '#f)))))))) ai2c3e) (if (>= ai2c3f '0) (apply (lambda ai2c3c@others '#f) ai2c3e) (error 'apply '"invalid arg count")))))))) (set! ai2cf5@ai2b27@try-load-from-file ai2b27@try-load-from-file) (set! ai2b29@library-loader (ai2a25@ai2903@make-parameter (lambda (ai2c40@x) (let ((ai2c42@file-name ((ai2b21@file-locator) ai2c40@x))) (if (not ai2c42@file-name) (assertion-violation '#f '"cannot file library" ai2c40@x) (or (ai2b27@try-load-from-file ai2c42@file-name) ((ai2b2b@current-library-expander) (ai2a24@ai2901@read-library-source-file ai2c42@file-name) ai2c42@file-name (lambda (ai2c44@name) (if (not (fast-equal? ai2c44@name ai2c40@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (ai2c4a@ai2c47 ai2c4b@ai2c49) (let ((ai2c4e@e ai2c4b@ai2c49) (ai2c4f@p ai2c4a@ai2c47)) (begin (display '"expected to find library " ai2c4f@p) (write ai2c40@x ai2c4f@p) (display '" in file " ai2c4f@p) (display ai2c42@file-name ai2c4f@p) (display '", found " ai2c4f@p) (write ai2c44@name ai2c4f@p) (display '" instead" ai2c4f@p) (ai2c4e@e)))))) (void)))))))) (lambda (ai2c52@f) (if (procedure? ai2c52@f) ai2c52@f (assertion-violation 'library-locator '"not a procedure" ai2c52@f))))) (set! ai2cf6@ai2b29@library-loader ai2b29@library-loader) (set! ai2b2b@current-library-expander (ai2a25@ai2903@make-parameter (lambda (ai2c54@x) (assertion-violation 'library-expander '"not initialized")) (lambda (ai2c56@f) (if (procedure? ai2c56@f) ai2c56@f (assertion-violation 'library-expander '"not a procedure" ai2c56@f))))) (set! ai2cf7@ai2b2b@current-library-expander ai2b2b@current-library-expander) (set! ai2b2d@external-pending-libraries (ai2a25@ai2903@make-parameter '())) (set! ai2cf8@ai2b2d@external-pending-libraries ai2b2d@external-pending-libraries) (set! ai2b2f@find-external-library (lambda (ai2c58@name) (begin (if (member ai2c58@name (ai2b2d@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" ai2c58@name) (void)) (let ((ai2c5e@ai2c5b ai2b2d@external-pending-libraries) (ai2c5f@ai2c5d (cons ai2c58@name (ai2b2d@external-pending-libraries)))) (let ((ai2c62@swap (lambda () (let ((ai2c64@t (ai2c5e@ai2c5b))) (begin (ai2c5e@ai2c5b ai2c5f@ai2c5d) (set! ai2c5f@ai2c5d ai2c64@t)))))) (dynamic-wind ai2c62@swap (lambda () (begin ((ai2b29@library-loader) ai2c58@name) (or (ai2b19@find-library-by (lambda (ai2c66@x) (fast-equal? (ai2ae1@library-name ai2c66@x) ai2c58@name))) (assertion-violation '#f '"handling external library did not yield the correct library" ai2c58@name)))) ai2c62@swap)))))) (set! ai2cf9@ai2b2f@find-external-library ai2b2f@find-external-library) (set! ai2b31@find-library-by-name (lambda (ai2c68@name) (or (ai2b19@find-library-by (lambda (ai2c6a@x) (fast-equal? (ai2ae1@library-name ai2c6a@x) ai2c68@name))) (ai2b2f@find-external-library ai2c68@name)))) (set! ai2cfa@ai2b31@find-library-by-name ai2b31@find-library-by-name) (set! ai2b33@library-exists? (lambda (ai2c6c@name) (and (ai2b19@find-library-by (lambda (ai2c6e@x) (fast-equal? (ai2ae1@library-name ai2c6e@x) ai2c6c@name))) '#t))) (set! ai2cfb@ai2b33@library-exists? ai2b33@library-exists?) (set! ai2b35@find-library-by-spec/die (lambda (ai2c70@spec) (let ((ai2c72@id (car ai2c70@spec))) (or (ai2b19@find-library-by (lambda (ai2c74@x) (eq? ai2c72@id (ai2add@library-id ai2c74@x)))) (assertion-violation '#f '"cannot find library with required spec" ai2c70@spec))))) (set! ai2cfc@ai2b35@find-library-by-spec/die ai2b35@find-library-by-spec/die) (set! ai2b37@label->binding-table (make-eq-hashtable)) (set! ai2cfd@ai2b37@label->binding-table ai2b37@label->binding-table) (set! ai2b39@install-library-record (lambda (ai2c76@lib) (begin (let ((ai2c78@exp-env (ai2af9@library-env ai2c76@lib))) (for-each (lambda (ai2c7a@x) (let ((ai2c7c@label (car ai2c7a@x)) (ai2c7d@binding (cdr ai2c7a@x))) (let ((ai2c80@binding (let ((ai2c82@t (car ai2c7d@binding))) (if (memv ai2c82@t '(global)) (cons 'global (cons ai2c76@lib (cdr ai2c7d@binding))) (if (memv ai2c82@t '(global-macro)) (cons 'global-macro (cons ai2c76@lib (cdr ai2c7d@binding))) (if (memv ai2c82@t '(global-macro!)) (cons 'global-macro! (cons ai2c76@lib (cdr ai2c7d@binding))) ai2c7d@binding)))))) (begin (if (hashtable-ref ai2b37@label->binding-table ai2c7c@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" ai2c7c@label (hashtable-ref ai2b37@label->binding-table ai2c7c@label '#f) ai2c80@binding) (exit)) (void)) (hashtable-set! ai2b37@label->binding-table ai2c7c@label ai2c80@binding))))) ai2c78@exp-env)) ((ai2acf@current-library-collection) ai2c76@lib)))) (set! ai2cfe@ai2b39@install-library-record ai2b39@install-library-record) (set! ai2b3b@install-library (lambda (ai2c84@id ai2c85@name ai2c86@ver ai2c87@imp* ai2c88@vis* ai2c89@inv* ai2c8a@exp-subst ai2c8b@exp-env ai2c8c@visit-proc ai2c8d@invoke-proc ai2c8e@visit-code ai2c8f@invoke-code ai2c90@visible? ai2c91@source-file-name) (let ((ai2ca0@imp-lib* (map ai2b35@find-library-by-spec/die ai2c87@imp*)) (ai2ca1@vis-lib* (map ai2b35@find-library-by-spec/die ai2c88@vis*)) (ai2ca2@inv-lib* (map ai2b35@find-library-by-spec/die ai2c89@inv*))) (begin (if (not (and (symbol? ai2c84@id) (list? ai2c85@name) (list? ai2c86@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" ai2c84@id ai2c85@name ai2c86@ver) (void)) (if (ai2b33@library-exists? ai2c85@name) (assertion-violation 'install-library '"library is already installed" ai2c85@name) (void)) (let ((ai2ca6@lib (make-simple-struct 'library '15 (list ai2c84@id ai2c85@name ai2c86@ver ai2ca0@imp-lib* ai2ca1@vis-lib* ai2ca2@inv-lib* ai2c8a@exp-subst ai2c8b@exp-env ai2c8c@visit-proc ai2c8d@invoke-proc ai2c8e@visit-code ai2c8f@invoke-code ai2c90@visible? ai2c91@source-file-name)))) (ai2b39@install-library-record ai2ca6@lib)))))) (set! ai2cff@ai2b3b@install-library ai2b3b@install-library) (set! ai2b3d@imported-label->binding (lambda (ai2ca8@lab) (hashtable-ref ai2b37@label->binding-table ai2ca8@lab '#f))) (set! ai2d00@ai2b3d@imported-label->binding ai2b3d@imported-label->binding) (set! ai2b3f@invoke-library (lambda (ai2caa@lib) (let ((ai2cac@invoke (ai2b01@library-invoke-state ai2caa@lib))) (if (procedure? ai2cac@invoke) (begin (ai2b03@set-library-invoke-state! ai2caa@lib (lambda () (assertion-violation 'invoke '"circularity detected" ai2caa@lib))) (for-each ai2b3f@invoke-library (ai2af1@library-inv* ai2caa@lib)) (ai2b03@set-library-invoke-state! ai2caa@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" ai2caa@lib))) (ai2cac@invoke) (ai2b03@set-library-invoke-state! ai2caa@lib '#t)) (void))))) (set! ai2d01@ai2b3f@invoke-library ai2b3f@invoke-library) (set! ai2b41@visit-library (lambda (ai2cae@lib) (let ((ai2cb0@visit (ai2afd@library-visit-state ai2cae@lib))) (if (procedure? ai2cb0@visit) (begin (ai2aff@set-library-visit-state! ai2cae@lib (lambda () (assertion-violation 'visit '"circularity detected" ai2cae@lib))) (for-each ai2b3f@invoke-library (ai2aed@library-vis* ai2cae@lib)) (ai2aff@set-library-visit-state! ai2cae@lib (lambda () (assertion-violation 'invoke '"first visit did not return" ai2cae@lib))) (ai2cb0@visit) (ai2aff@set-library-visit-state! ai2cae@lib '#t)) (void))))) (set! ai2d02@ai2b41@visit-library ai2b41@visit-library) (set! ai2b43@invoke-library-by-spec (lambda (ai2cb2@spec) (ai2b3f@invoke-library (ai2b35@find-library-by-spec/die ai2cb2@spec)))) (set! ai2d03@ai2b43@invoke-library-by-spec ai2b43@invoke-library-by-spec) (set! ai2b45@invoke-library-by-name (lambda (ai2cb4@name) (let ((ai2cba@ai2cb7 ai2a26@ai2905@mosh-cache-dir) (ai2cbb@ai2cb9 (create-mosh-cache-dir))) (let ((ai2cbe@swap (lambda () (let ((ai2cc0@t (ai2cba@ai2cb7))) (begin (ai2cba@ai2cb7 ai2cbb@ai2cb9) (set! ai2cbb@ai2cb9 ai2cc0@t)))))) (dynamic-wind ai2cbe@swap (lambda () (ai2b3f@invoke-library (ai2b31@find-library-by-name ai2cb4@name))) ai2cbe@swap))))) (set! ai2d04@ai2b45@invoke-library-by-name ai2b45@invoke-library-by-name) (set! ai2b47@installed-libraries (lambda ai2cc8 (let ((ai2cc9 (length ai2cc8))) (if (= ai2cc9 '1) (apply (lambda (ai2cc2@all?) (let ai2cc6@f ((ai2cc4@ls ((ai2acf@current-library-collection)))) (if (null? ai2cc4@ls) '() (if (or ai2cc2@all? (ai2b0d@library-visible? (car ai2cc4@ls))) (cons (car ai2cc4@ls) (ai2cc6@f (cdr ai2cc4@ls))) (ai2cc6@f (cdr ai2cc4@ls)))))) ai2cc8) (if (= ai2cc9 '0) (apply (lambda () (ai2b47@installed-libraries '#f)) ai2cc8) (error 'apply '"invalid arg count")))))) (set! ai2d05@ai2b47@installed-libraries ai2b47@installed-libraries) (set! ai2b49@library-spec (lambda (ai2cca@x) (begin (if (not (ai2adb@library? ai2cca@x)) (assertion-violation 'library-spec '"not a library" ai2cca@x) (void)) (list (ai2add@library-id ai2cca@x) (ai2ae1@library-name ai2cca@x) (ai2ae5@library-version ai2cca@x))))) (set! ai2d06@ai2b49@library-spec ai2b49@library-spec) (void))
(begin (set! ai2d0a@build-global-define (unspecified)) (set! ai2d7b@build-lambda (unspecified)) (set! ai2d7d@build-case-lambda (unspecified)) (set! ai2dab@build-sequence (unspecified)) (set! ai2dad@build-void (unspecified)) (set! ai2daf@build-letrec (unspecified)) (set! ai2db1@build-let (unspecified)) (set! ai2db3@build-named-let (unspecified)) (set! ai2db5@build-letrec* (unspecified)) (set! ai2db7@build-library-letrec* (unspecified)) (set! ai2db9@build-receive (unspecified)) (set! ai2d0a@build-global-define (lambda (ai2dba@x) (ai2dad@build-void))) (set! ai2e4e@ai2d0a@build-global-define ai2d0a@build-global-define) (set! ai2d7b@build-lambda (lambda (ai2dbc@ae ai2dbd@vars ai2dbe@exp) (list 'lambda ai2dbd@vars ai2dbe@exp))) (set! ai2e4f@ai2d7b@build-lambda ai2d7b@build-lambda) (set! ai2d7d@build-case-lambda (lambda (ai2dc2@ae ai2dc3@vars* ai2dc4@exp*) (let ((ai2dc9@build-error '#f) (ai2dcb@build-pred '#f) (ai2dcd@build-apply '#f) (ai2dcf@expand-case-lambda '#f)) (begin (set! ai2dc9@build-error (lambda (ai2e00@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! ai2dcb@build-pred (lambda (ai2de8@ae ai2de9@n ai2dea@vars) (call-with-values (lambda () (let ai2df6@f ((ai2df2@vars ai2dea@vars) (ai2df3@count '0)) (if (pair? ai2df2@vars) (ai2df6@f (cdr ai2df2@vars) (+ ai2df3@count '1)) (if (null? ai2df2@vars) (values ai2df3@count '=) (values ai2df3@count '>=))))) (lambda (ai2df8@ai2def ai2df9@ai2df1) (let ((ai2dfc@pred ai2df9@ai2df1) (ai2dfd@count ai2df8@ai2def)) (list (list 'primitive ai2dfc@pred) ai2de9@n (list 'quote ai2dfd@count))))))) (set! ai2dcd@build-apply (lambda (ai2de0@ae ai2de1@g ai2de2@vars ai2de3@exp) (list '(primitive apply) (ai2d7b@build-lambda ai2de0@ae ai2de2@vars ai2de3@exp) ai2de1@g))) (set! ai2dcf@expand-case-lambda (lambda (ai2dd0@ae ai2dd1@vars ai2dd2@exp*) (let ((ai2dd6@g (gensym)) (ai2dd7@n (gensym))) (list 'lambda ai2dd6@g (ai2db1@build-let ai2dd0@ae (list ai2dd7@n) (list (list '(primitive length) ai2dd6@g)) (let ai2dde@f ((ai2dda@vars* ai2dc3@vars*) (ai2ddb@exp* ai2dd2@exp*)) (if (null? ai2dda@vars*) (ai2dc9@build-error ai2dd0@ae) (list 'if (ai2dcb@build-pred ai2dd0@ae ai2dd7@n (car ai2dda@vars*)) (ai2dcd@build-apply ai2dd0@ae ai2dd6@g (car ai2dda@vars*) (car ai2ddb@exp*)) (ai2dde@f (cdr ai2dda@vars*) (cdr ai2ddb@exp*)))))))))) (if (= (length ai2dc4@exp*) '1) (ai2d7b@build-lambda ai2dc2@ae (car ai2dc3@vars*) (car ai2dc4@exp*)) (ai2dcf@expand-case-lambda ai2dc2@ae ai2dc3@vars* ai2dc4@exp*)))))) (set! ai2e50@ai2d7d@build-case-lambda ai2d7d@build-case-lambda) (set! ai2dab@build-sequence (lambda (ai2e02@ae ai2e03@exps) (let ai2e08@loop ((ai2e06@exps ai2e03@exps)) (if (null? (cdr ai2e06@exps)) (car ai2e06@exps) (if (equal? (car ai2e06@exps) (ai2dad@build-void)) (ai2e08@loop (cdr ai2e06@exps)) (cons 'begin ai2e06@exps)))))) (set! ai2e51@ai2dab@build-sequence ai2dab@build-sequence) (set! ai2dad@build-void (lambda () '((primitive void)))) (set! ai2e52@ai2dad@build-void ai2dad@build-void) (set! ai2daf@build-letrec (lambda (ai2e0a@ae ai2e0b@vars ai2e0c@val-exps ai2e0d@body-exp) (if (null? ai2e0b@vars) ai2e0d@body-exp (list 'letrec (map list ai2e0b@vars ai2e0c@val-exps) ai2e0d@body-exp)))) (set! ai2e53@ai2daf@build-letrec ai2daf@build-letrec) (set! ai2db1@build-let (lambda (ai2e12@ae ai2e13@vars ai2e14@val-exps ai2e15@body-exp) (if (null? ai2e13@vars) ai2e15@body-exp (list 'let (map list ai2e13@vars ai2e14@val-exps) ai2e15@body-exp)))) (set! ai2e54@ai2db1@build-let ai2db1@build-let) (set! ai2db3@build-named-let (lambda (ai2e1a@ae ai2e1b@name ai2e1c@vars ai2e1d@val-exps ai2e1e@body-exp) (list 'let ai2e1b@name (map list ai2e1c@vars ai2e1d@val-exps) ai2e1e@body-exp))) (set! ai2e55@ai2db3@build-named-let ai2db3@build-named-let) (set! ai2db5@build-letrec* (lambda (ai2e24@ae ai2e25@vars ai2e26@val-exps ai2e27@body-exp) (if (null? ai2e25@vars) ai2e27@body-exp (ai2db1@build-let ai2e24@ae ai2e25@vars (map (lambda (ai2e2c@x) (list 'quote '#f)) ai2e25@vars) (ai2dab@build-sequence ai2e24@ae (append (map (lambda (ai2e2e@lhs ai2e2f@rhs) (list 'set! ai2e2e@lhs ai2e2f@rhs)) ai2e25@vars ai2e26@val-exps) (list ai2e27@body-exp))))))) (set! ai2e56@ai2db5@build-letrec* ai2db5@build-letrec*) (set! ai2db7@build-library-letrec* (lambda (ai2e32@ae ai2e33@name ai2e34@vars ai2e35@locs ai2e36@val-exps ai2e37@body-exp) (cons 'begin (append (map (lambda (ai2e3e@var) (cons 'set! (cons ai2e3e@var '((unspecified))))) ai2e34@vars) (append (apply append (map (lambda (ai2e40@var ai2e41@loc ai2e42@val-exp) (list (list 'set! ai2e40@var ai2e42@val-exp) (list 'set! ai2e41@loc ai2e40@var))) ai2e34@vars ai2e35@locs ai2e36@val-exps)) (list ai2e37@body-exp)))))) (set! ai2e57@ai2db7@build-library-letrec* ai2db7@build-library-letrec*) (set! ai2db9@build-receive (lambda (ai2e46@ae ai2e47@vars ai2e48@producer ai2e49@body*) (begin (display '"************** in ") (cons 'receive (cons ai2e47@vars (cons ai2e48@producer ai2e49@body*)))))) (set! ai2e58@ai2db9@build-receive ai2db9@build-receive) (void))
(begin (set! ai2e67@file-options-macro (unspecified)) (set! ai2e69@set-cons (unspecified)) (set! ai2e6b@set-union (unspecified)) (set! ai2e70@top-mark* (unspecified)) (set! ai2e72@top-marked? (unspecified)) (set! ai2e74@gen-lexical (unspecified)) (set! ai2e76@gen-global (unspecified)) (set! ai2e78@gen-label (unspecified)) (set! ai2e7a@gen-top-level-label (unspecified)) (set! ai2e7c@gen-define-label+loc (unspecified)) (set! ai2e7e@gen-define-label (unspecified)) (set! ai2e88@rib? (unspecified)) (set! ai2e8a@rib-sym* (unspecified)) (set! ai2e8c@set-rib-sym*! (unspecified)) (set! ai2e8e@rib-mark** (unspecified)) (set! ai2e90@set-rib-mark**! (unspecified)) (set! ai2e92@rib-label* (unspecified)) (set! ai2e94@set-rib-label*! (unspecified)) (set! ai2e96@rib-sealed/freq (unspecified)) (set! ai2e98@set-rib-sealed/freq! (unspecified)) (set! ai2e9a@rib-cache (unspecified)) (set! ai2e9c@set-rib-cache! (unspecified)) (set! ai2e9e@dummy (unspecified)) (set! ai2ea0@make-empty-rib (unspecified)) (set! ai2ea2@extend-rib! (unspecified)) (set! ai2ea4@extend-rib/nc! (unspecified)) (set! ai2ea6@make-rib-map (unspecified)) (set! ai2ea8@seal-rib! (unspecified)) (set! ai2eaa@unseal-rib! (unspecified)) (set! ai2eac@make-full-rib (unspecified)) (set! ai2eae@rp (unspecified)) (set! ai2eb8@stx? (unspecified)) (set! ai2eba@stx-expr (unspecified)) (set! ai2ebc@set-stx-expr! (unspecified)) (set! ai2ebe@stx-mark* (unspecified)) (set! ai2ec0@set-stx-mark*! (unspecified)) (set! ai2ec2@stx-subst* (unspecified)) (set! ai2ec4@set-stx-subst*! (unspecified)) (set! ai2ec6@stx-ae* (unspecified)) (set! ai2ec8@set-stx-ae*! (unspecified)) (set! ai2eca@dummy (unspecified)) (set! ai2ecc@datum->stx (unspecified)) (set! ai2ece@gen-mark (unspecified)) (set! ai2ed0@anti-mark (unspecified)) (set! ai2ed2@anti-mark? (unspecified)) (set! ai2ed4@mkstx (unspecified)) (set! ai2ed6@add-mark (unspecified)) (set! ai2ed8@add-subst (unspecified)) (set! ai2eda@syntax-kind? (unspecified)) (set! ai2edc@syntax-vector->list (unspecified)) (set! ai2ede@syntax-pair? (unspecified)) (set! ai2ee0@syntax-vector? (unspecified)) (set! ai2ee2@syntax-null? (unspecified)) (set! ai2ee4@syntax-list? (unspecified)) (set! ai2ee6@syntax-car (unspecified)) (set! ai2ee8@syntax-cdr (unspecified)) (set! ai2eea@syntax->list (unspecified)) (set! ai2eec@id? (unspecified)) (set! ai2eee@id->sym (unspecified)) (set! ai2ef0@bound-id=? (unspecified)) (set! ai2ef2@free-id=? (unspecified)) (set! ai2ef4@valid-bound-ids? (unspecified)) (set! ai2ef6@distinct-bound-ids? (unspecified)) (set! ai2ef8@bound-id-member? (unspecified)) (set! ai2efa@self-evaluating? (unspecified)) (set! ai2efc@strip-annotations (unspecified)) (set! ai2efe@strip (unspecified)) (set! ai2f00@stx->datum (unspecified)) (set! ai2f02@id->label (unspecified)) (set! ai2f04@label->binding (unspecified)) (set! ai2f06@make-binding (unspecified)) (set! ai2f08@binding-type (unspecified)) (set! ai2f0a@binding-value (unspecified)) (set! ai2f0c@raise-unbound-error (unspecified)) (set! ai2f0e@syntax-type (unspecified)) (set! ai2f1c@sanitize-binding (unspecified)) (set! ai2f1e@make-variable-transformer (unspecified)) (set! ai2f20@variable-transformer? (unspecified)) (set! ai2f22@variable-transformer-procedure (unspecified)) (set! ai2f24@make-eval-transformer (unspecified)) (set! ai3075@parse-define (unspecified)) (set! ai3077@parse-define-syntax (unspecified)) (set! ai3079@scheme-stx-hashtable (unspecified)) (set! ai307b@scheme-stx (unspecified)) (set! ai307d@lexical-var (unspecified)) (set! ai307f@lexical-mutable? (unspecified)) (set! ai3081@set-lexical-mutable! (unspecified)) (set! ai3083@add-lexical (unspecified)) (set! ai3085@add-lexicals (unspecified)) (set! ai3087@letrec-helper (unspecified)) (set! ai3089@let-transformer (unspecified)) (set! ai308b@letrec-transformer (unspecified)) (set! ai308d@letrec*-transformer (unspecified)) (set! ai308f@fluid-let-syntax-transformer (unspecified)) (set! ai3091@type-descriptor-transformer (unspecified)) (set! ai3093@record-type-descriptor-transformer (unspecified)) (set! ai3095@record-constructor-descriptor-transformer (unspecified)) (set! ai3097@when-macro (unspecified)) (set! ai3099@unless-macro (unspecified)) (set! ai309b@if-transformer (unspecified)) (set! ai309d@and-transformer (unspecified)) (set! ai309f@or-transformer (unspecified)) (set! ai30a1@case-macro (unspecified)) (set! ai30a3@quote-transformer (unspecified)) (set! ai30a5@case-lambda-transformer (unspecified)) (set! ai30a7@lambda-transformer (unspecified)) (set! ai30a9@bless (unspecified)) (set! ai30ab@with-syntax-macro (unspecified)) (set! ai30ad@invalid-fmls-error (unspecified)) (set! ai30af@let-macro (unspecified)) (set! ai30b1@let-values-macro (unspecified)) (set! ai30b3@let*-values-macro (unspecified)) (set! ai30b5@trace-lambda-macro (unspecified)) (set! ai30b7@trace-define-macro (unspecified)) (set! ai30b9@trace-define-syntax-macro (unspecified)) (set! ai30bb@trace-let/rec-syntax (unspecified)) (set! ai30bd@trace-let-syntax-macro (unspecified)) (set! ai30bf@trace-letrec-syntax-macro (unspecified)) (set! ai30c1@guard-macro (unspecified)) (set! ai30c3@define-enumeration-macro (unspecified)) (set! ai30c5@time-macro (unspecified)) (set! ai30c7@delay-macro (unspecified)) (set! ai30c9@assert-macro (unspecified)) (set! ai30cb@endianness-macro (unspecified)) (set! ai30cd@identifier-syntax-macro (unspecified)) (set! ai30cf@do-macro (unspecified)) (set! ai30d1@let*-macro (unspecified)) (set! ai30d3@or-macro (unspecified)) (set! ai30d5@and-macro (unspecified)) (set! ai30d7@cond-macro (unspecified)) (set! ai30d9@do-include (unspecified)) (set! ai30db@include-macro (unspecified)) (set! ai30dd@include-into-macro (unspecified)) (set! ai30df@syntax-rules-macro (unspecified)) (set! ai30e1@quasiquote-macro (unspecified)) (set! ai30e3@quasisyntax-macro (unspecified)) (set! ai30e5@define-struct-macro (unspecified)) (set! ai30e7@define-record-type-macro (unspecified)) (set! ai30e9@define-condition-type-macro (unspecified)) (set! ai30eb@incorrect-usage-macro (unspecified)) (set! ai30ed@parameterize-macro (unspecified)) (set! ai30ef@foreign-call-transformer (unspecified)) (set! ai30f1@convert-pattern (unspecified)) (set! ai30f3@syntax-dispatch (unspecified)) (set! ai30f5@ellipsis? (unspecified)) (set! ai30f7@underscore? (unspecified)) (set! ai30f9@verify-literals (unspecified)) (set! ai30fb@syntax-case-transformer (unspecified)) (set! ai30fd@ellipsis-map (unspecified)) (set! ai30ff@syntax-transformer (unspecified)) (set! ai3101@core-macro-transformer (unspecified)) (set! ai3103@symbol-macro (unspecified)) (set! ai3105@macro-transformer (unspecified)) (set! ai3107@local-macro-transformer (unspecified)) (set! ai3109@do-macro-call (unspecified)) (set! ai310b@chi-macro (unspecified)) (set! ai310d@chi-local-macro (unspecified)) (set! ai310f@chi-global-macro (unspecified)) (set! ai3111@chi-expr* (unspecified)) (set! ai3113@chi-application (unspecified)) (set! ai3115@chi-expr (unspecified)) (set! ai3117@chi-set! (unspecified)) (set! ai3119@verify-formals (unspecified)) (set! ai311b@chi-lambda-clause (unspecified)) (set! ai311d@chi-lambda-clause* (unspecified)) (set! ai311f@chi-defun (unspecified)) (set! ai3121@chi-rhs (unspecified)) (set! ai3123@expand-interaction-rhs*/init* (unspecified)) (set! ai3125@chi-rhs* (unspecified)) (set! ai3127@find-bound=? (unspecified)) (set! ai3129@find-dups (unspecified)) (set! ai312b@chi-internal (unspecified)) (set! ai312d@parse-module (unspecified)) (set! ai3137@module-interface? (unspecified)) (set! ai3139@module-interface-first-mark (unspecified)) (set! ai313b@set-module-interface-first-mark! (unspecified)) (set! ai313d@module-interface-exp-id-vec (unspecified)) (set! ai313f@set-module-interface-exp-id-vec! (unspecified)) (set! ai3141@module-interface-exp-lab-vec (unspecified)) (set! ai3143@set-module-interface-exp-lab-vec! (unspecified)) (set! ai3145@dummy (unspecified)) (set! ai3147@module-interface-exp-id* (unspecified)) (set! ai3149@chi-internal-module (unspecified)) (set! ai314b@chi-body* (unspecified)) (set! ai314d@expand-transformer (unspecified)) (set! ai314f@parse-exports (unspecified)) (set! ai3151@parse-library-name (unspecified)) (set! ai3153@parse-library (unspecified)) (set! ai3155@parse-import-spec* (unspecified)) (set! ai3157@make-top-rib (unspecified)) (set! ai3159@make-collector (unspecified)) (set! ai315b@inv-collector (unspecified)) (set! ai315d@vis-collector (unspecified)) (set! ai315f@imp-collector (unspecified)) (set! ai3161@chi-library-internal (unspecified)) (set! ai3163@chi-interaction-expr (unspecified)) (set! ai3165@library-body-expander (unspecified)) (set! ai3167@core-library-expander (unspecified)) (set! ai3169@parse-top-level-program (unspecified)) (set! ai316b@top-level-expander (unspecified)) (set! ai316d@rp (unspecified)) (set! ai3177@env? (unspecified)) (set! ai3179@env-names (unspecified)) (set! ai317b@set-env-names! (unspecified)) (set! ai317d@env-labels (unspecified)) (set! ai317f@set-env-labels! (unspecified)) (set! ai3181@env-itc (unspecified)) (set! ai3183@set-env-itc! (unspecified)) (set! ai3185@dummy (unspecified)) (set! ai3187@rp (unspecified)) (set! ai3191@interaction-env? (unspecified)) (set! ai3193@interaction-env-rib (unspecified)) (set! ai3195@set-interaction-env-rib! (unspecified)) (set! ai3197@interaction-env-r (unspecified)) (set! ai3199@set-interaction-env-r! (unspecified)) (set! ai319b@interaction-env-locs (unspecified)) (set! ai319d@set-interaction-env-locs! (unspecified)) (set! ai319f@dummy (unspecified)) (set! ai31a1@interaction-environment-symbols (unspecified)) (set! ai31a3@environment-bindings (unspecified)) (set! ai31a5@parse-binding (unspecified)) (set! ai31a7@environment? (unspecified)) (set! ai31a9@environment-symbols (unspecified)) (set! ai31ab@environment (unspecified)) (set! ai31ad@null-environment (unspecified)) (set! ai31af@scheme-report-environment (unspecified)) (set! ai31b1@expand (unspecified)) (set! ai31b3@eval (unspecified)) (set! ai31b5@library-expander (unspecified)) (set! ai31b7@boot-library-expand (unspecified)) (set! ai31b9@rev-map-append (unspecified)) (set! ai31bb@build-exports (unspecified)) (set! ai31bd@make-export-subst (unspecified)) (set! ai31bf@make-export-env/macros (unspecified)) (set! ai31c1@generate-temporaries (unspecified)) (set! ai31c3@free-identifier=? (unspecified)) (set! ai31c5@bound-identifier=? (unspecified)) (set! ai31c7@make-source-condition (unspecified)) (set! ai31c9@extract-position-condition (unspecified)) (set! ai31cb@expression-position (unspecified)) (set! ai31cd@assertion-error (unspecified)) (set! ai31cf@syntax-error (unspecified)) (set! ai31d1@syntax-violation* (unspecified)) (set! ai31d3@syntax-violation (unspecified)) (set! ai31d5@identifier? (unspecified)) (set! ai31d7@datum->syntax (unspecified)) (set! ai31d9@syntax->datum (unspecified)) (set! ai31db@ungensym-all (unspecified)) (set! ai31dd@compile-r6rs-top-level (unspecified)) (set! ai31df@pre-compile-r6rs-top-level (unspecified)) (set! ai31e1@interaction-environment (unspecified)) (set! ai31e3@top-level-context (unspecified)) (set! ai2e67@file-options-macro (lambda (ai31e4@x) (let ((ai31e7@valid-option? '#f)) (begin (set! ai31e7@valid-option? (lambda (ai31f0@x) (and (ai2eec@id? ai31f0@x) (memq (ai2eee@id->sym ai31f0@x) '(no-fail no-create no-truncate))))) (let ((ai31e8@t ai31e4@x)) (let ((ai31ea@ls/false (ai30f3@syntax-dispatch ai31e8@t '(_ . each-any)))) (if (and ai31ea@ls/false (apply (lambda (ai31ec@opt*) (for-all ai31e7@valid-option? ai31ec@opt*)) ai31ea@ls/false)) (apply (lambda (ai31ee@opt*) (ai30a9@bless (list 'make-file-options (list 'quote ai31ee@opt*)))) ai31ea@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai31e8@t)))))))) (set! ai4b3a@ai2e67@file-options-macro ai2e67@file-options-macro) (set! ai2e69@set-cons (lambda (ai31f2@x ai31f3@ls) (if (memq ai31f2@x ai31f3@ls) ai31f3@ls (cons ai31f2@x ai31f3@ls)))) (set! ai4b3b@ai2e69@set-cons ai2e69@set-cons) (set! ai2e6b@set-union (lambda (ai31f6@ls1 ai31f7@ls2) (if (null? ai31f6@ls1) ai31f7@ls2 (if (memq (car ai31f6@ls1) ai31f7@ls2) (ai2e6b@set-union (cdr ai31f6@ls1) ai31f7@ls2) (cons (car ai31f6@ls1) (ai2e6b@set-union (cdr ai31f6@ls1) ai31f7@ls2)))))) (set! ai4b3c@ai2e6b@set-union ai2e6b@set-union) (set! ai2e70@top-mark* '(top)) (set! ai4b3d@ai2e70@top-mark* ai2e70@top-mark*) (set! ai2e72@top-marked? (lambda (ai31fa@m*) (memq 'top ai31fa@m*))) (set! ai4b3e@ai2e72@top-marked? ai2e72@top-marked?) (set! ai2e74@gen-lexical (lambda (ai31fc@sym) (if (symbol? ai31fc@sym) (gensym ai31fc@sym) (if (ai2eb8@stx? ai31fc@sym) (ai2e74@gen-lexical (ai2eee@id->sym ai31fc@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" ai31fc@sym))))) (set! ai4b3f@ai2e74@gen-lexical ai2e74@gen-lexical) (set! ai2e76@gen-global (lambda (ai31fe@x) (ai2e74@gen-lexical ai31fe@x))) (set! ai4b40@ai2e76@gen-global ai2e76@gen-global) (set! ai2e78@gen-label (lambda (ai3200@_) (gensym))) (set! ai4b41@ai2e78@gen-label ai2e78@gen-label) (set! ai2e7a@gen-top-level-label (lambda (ai3202@id ai3203@rib) (let ((ai3207@find '#f)) (begin (set! ai3207@find (lambda (ai3212@sym ai3213@mark* ai3214@sym* ai3215@mark** ai3216@label*) (and (pair? ai3214@sym*) (if (and (eq? ai3212@sym (car ai3214@sym*)) (same-marks? ai3213@mark* (car ai3215@mark**))) (car ai3216@label*) (ai3207@find ai3212@sym ai3213@mark* (cdr ai3214@sym*) (cdr ai3215@mark**) (cdr ai3216@label*)))))) (let ((ai3208@sym (ai2eee@id->sym ai3202@id)) (ai3209@mark* (ai2ebe@stx-mark* ai3202@id))) (let ((ai320c@sym* (ai2e8a@rib-sym* ai3203@rib))) (let ((ai320e@t (and (memq ai3208@sym (ai2e8a@rib-sym* ai3203@rib)) (ai3207@find ai3208@sym ai3209@mark* ai320c@sym* (ai2e8e@rib-mark** ai3203@rib) (ai2e92@rib-label* ai3203@rib))))) (if ai320e@t ((lambda (ai3210@label) (if (ai2d00@ai2b3d@imported-label->binding ai3210@label) (gensym) ai3210@label)) ai320e@t) (gensym))))))))) (set! ai4b42@ai2e7a@gen-top-level-label ai2e7a@gen-top-level-label) (set! ai2e7c@gen-define-label+loc (lambda (ai321c@id ai321d@rib) (let ((ai3220@t (ai31e3@top-level-context))) (if ai3220@t ((lambda (ai3222@env) (let ((ai3224@label (ai2e7a@gen-top-level-label ai321c@id ai321d@rib)) (ai3225@locs (ai319b@interaction-env-locs ai3222@env))) (values ai3224@label (let ((ai3228@t (assq ai3224@label ai3225@locs))) (if ai3228@t (cdr ai3228@t) (let ((ai322a@loc (ai2e74@gen-lexical ai321c@id))) (begin (ai319d@set-interaction-env-locs! ai3222@env (cons (cons ai3224@label ai322a@loc) ai3225@locs)) ai322a@loc))))))) ai3220@t) (values (gensym) (ai2e74@gen-lexical ai321c@id)))))) (set! ai4b43@ai2e7c@gen-define-label+loc ai2e7c@gen-define-label+loc) (set! ai2e7e@gen-define-label (lambda (ai322c@id ai322d@rib) (if (ai31e3@top-level-context) (ai2e7a@gen-top-level-label ai322c@id ai322d@rib) (gensym)))) (set! ai4b44@ai2e7e@gen-define-label ai2e7e@gen-define-label) (set! ai2e88@rib? (lambda (ai3230@x) (and (simple-struct? ai3230@x) (eq? (simple-struct-name ai3230@x) 'rib)))) (set! ai4b45@ai2e88@rib? ai2e88@rib?) (set! ai2e8a@rib-sym* (lambda (ai3232@x) (simple-struct-ref ai3232@x '0))) (set! ai4b46@ai2e8a@rib-sym* ai2e8a@rib-sym*) (set! ai2e8c@set-rib-sym*! (lambda (ai3234@x ai3235@val) (simple-struct-set! ai3234@x '0 ai3235@val))) (set! ai4b47@ai2e8c@set-rib-sym*! ai2e8c@set-rib-sym*!) (set! ai2e8e@rib-mark** (lambda (ai3238@x) (simple-struct-ref ai3238@x '1))) (set! ai4b48@ai2e8e@rib-mark** ai2e8e@rib-mark**) (set! ai2e90@set-rib-mark**! (lambda (ai323a@x ai323b@val) (simple-struct-set! ai323a@x '1 ai323b@val))) (set! ai4b49@ai2e90@set-rib-mark**! ai2e90@set-rib-mark**!) (set! ai2e92@rib-label* (lambda (ai323e@x) (simple-struct-ref ai323e@x '2))) (set! ai4b4a@ai2e92@rib-label* ai2e92@rib-label*) (set! ai2e94@set-rib-label*! (lambda (ai3240@x ai3241@val) (simple-struct-set! ai3240@x '2 ai3241@val))) (set! ai4b4b@ai2e94@set-rib-label*! ai2e94@set-rib-label*!) (set! ai2e96@rib-sealed/freq (lambda (ai3244@x) (simple-struct-ref ai3244@x '3))) (set! ai4b4c@ai2e96@rib-sealed/freq ai2e96@rib-sealed/freq) (set! ai2e98@set-rib-sealed/freq! (lambda (ai3246@x ai3247@val) (simple-struct-set! ai3246@x '3 ai3247@val))) (set! ai4b4d@ai2e98@set-rib-sealed/freq! ai2e98@set-rib-sealed/freq!) (set! ai2e9a@rib-cache (lambda (ai324a@x) (simple-struct-ref ai324a@x '4))) (set! ai4b4e@ai2e9a@rib-cache ai2e9a@rib-cache) (set! ai2e9c@set-rib-cache! (lambda (ai324c@x ai324d@val) (simple-struct-set! ai324c@x '4 ai324d@val))) (set! ai4b4f@ai2e9c@set-rib-cache! ai2e9c@set-rib-cache!) (set! ai2e9e@dummy '3) (set! ai4b50@ai2e9e@dummy ai2e9e@dummy) (set! ai2ea0@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! ai4b51@ai2ea0@make-empty-rib ai2ea0@make-empty-rib) (set! ai2ea2@extend-rib! (lambda (ai3250@rib ai3251@id ai3252@label) (let ((ai3257@find '#f)) (begin (set! ai3257@find (lambda (ai3264@sym ai3265@mark* ai3266@sym* ai3267@mark** ai3268@label*) (and (pair? ai3266@sym*) (if (and (eq? ai3264@sym (car ai3266@sym*)) (same-marks? ai3265@mark* (car ai3267@mark**))) ai3268@label* (ai3257@find ai3264@sym ai3265@mark* (cdr ai3266@sym*) (cdr ai3267@mark**) (cdr ai3268@label*)))))) (begin (if (ai2e96@rib-sealed/freq ai3250@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" ai3250@rib) (void)) (let ((ai3258@sym (ai2eee@id->sym ai3251@id)) (ai3259@mark* (ai2ebe@stx-mark* ai3251@id))) (let ((ai325c@sym* (ai2e8a@rib-sym* ai3250@rib))) (let ((ai325e@t (and (memq ai3258@sym (ai2e8a@rib-sym* ai3250@rib)) (ai3257@find ai3258@sym ai3259@mark* ai325c@sym* (ai2e8e@rib-mark** ai3250@rib) (ai2e92@rib-label* ai3250@rib))))) (if ai325e@t ((lambda (ai3260@p) (if (not (eq? ai3252@label (car ai3260@p))) (if (ai31e3@top-level-context) (set-car! ai3260@p ai3252@label) (ai31d3@syntax-violation '#f '"multiple definitions of identifier" ai3251@id)) (void))) ai325e@t) (begin (if (ai2e9a@rib-cache ai3250@rib) (hashtable-update! (ai2e9a@rib-cache ai3250@rib) ai3258@sym (lambda (ai3262@e) (cons (cons ai3259@mark* ai3252@label) ai3262@e)) '()) (void)) (ai2e8c@set-rib-sym*! ai3250@rib (cons ai3258@sym ai325c@sym*)) (ai2e90@set-rib-mark**! ai3250@rib (cons ai3259@mark* (ai2e8e@rib-mark** ai3250@rib))) (ai2e94@set-rib-label*! ai3250@rib (cons ai3252@label (ai2e92@rib-label* ai3250@rib))))))))))))) (set! ai4b52@ai2ea2@extend-rib! ai2ea2@extend-rib!) (set! ai2ea4@extend-rib/nc! (lambda (ai326e@rib ai326f@id ai3270@label) (let ((ai3274@sym (ai2eee@id->sym ai326f@id)) (ai3275@mark* (ai2ebe@stx-mark* ai326f@id))) (let ((ai3278@sym* (ai2e8a@rib-sym* ai326e@rib))) (begin (if (ai2e9a@rib-cache ai326e@rib) (hashtable-update! (ai2e9a@rib-cache ai326e@rib) ai3274@sym (lambda (ai327a@e) (cons (cons ai3275@mark* ai3270@label) ai327a@e)) '()) (void)) (ai2e8c@set-rib-sym*! ai326e@rib (cons ai3274@sym ai3278@sym*)) (ai2e90@set-rib-mark**! ai326e@rib (cons ai3275@mark* (ai2e8e@rib-mark** ai326e@rib))) (ai2e94@set-rib-label*! ai326e@rib (cons ai3270@label (ai2e92@rib-label* ai326e@rib)))))))) (set! ai4b53@ai2ea4@extend-rib/nc! ai2ea4@extend-rib/nc!) (set! ai2ea6@make-rib-map (lambda (ai327c@sym*) (let ((ai327e@ht (make-eq-hashtable))) (let ai3284@f ((ai3280@i '0) (ai3281@sym* ai327c@sym*)) (if (null? ai3281@sym*) ai327e@ht (begin (hashtable-update! ai327e@ht (car ai3281@sym*) (lambda (ai3286@x) (cons ai3280@i ai3286@x)) '()) (ai3284@f (+ ai3280@i '1) (cdr ai3281@sym*)))))))) (set! ai4b54@ai2ea6@make-rib-map ai2ea6@make-rib-map) (set! ai2ea8@seal-rib! (lambda (ai3288@rib) (let ((ai328a@sym* (ai2e8a@rib-sym* ai3288@rib))) (if (not (null? ai328a@sym*)) (begin (ai2e8c@set-rib-sym*! ai3288@rib (list->vector ai328a@sym*)) (ai2e90@set-rib-mark**! ai3288@rib (list->vector (ai2e8e@rib-mark** ai3288@rib))) (ai2e94@set-rib-label*! ai3288@rib (list->vector (ai2e92@rib-label* ai3288@rib))) (ai2e98@set-rib-sealed/freq! ai3288@rib (ai2ea6@make-rib-map ai328a@sym*))) (void))))) (set! ai4b55@ai2ea8@seal-rib! ai2ea8@seal-rib!) (set! ai2eaa@unseal-rib! (lambda (ai328c@rib) (if (ai2e96@rib-sealed/freq ai328c@rib) (begin (ai2e98@set-rib-sealed/freq! ai328c@rib '#f) (ai2e8c@set-rib-sym*! ai328c@rib (vector->list (ai2e8a@rib-sym* ai328c@rib))) (ai2e90@set-rib-mark**! ai328c@rib (vector->list (ai2e8e@rib-mark** ai328c@rib))) (ai2e94@set-rib-label*! ai328c@rib (vector->list (ai2e92@rib-label* ai328c@rib)))) (void)))) (set! ai4b56@ai2eaa@unseal-rib! ai2eaa@unseal-rib!) (set! ai2eac@make-full-rib (lambda (ai328e@id* ai328f@label*) (let ((ai3292@r (make-simple-struct 'rib '6 (list (map ai2eee@id->sym ai328e@id*) (map ai2ebe@stx-mark* ai328e@id*) ai328f@label* '#f '#f)))) (begin (ai2ea8@seal-rib! ai3292@r) ai3292@r)))) (set! ai4b57@ai2eac@make-full-rib ai2eac@make-full-rib) (set! ai2eae@rp (ai2a22@ai28fd@make-record-printer 'stx (lambda (ai3294@x ai3295@p ai3296@wr) (begin (display '"#<syntax " ai3295@p) (write (ai2f00@stx->datum ai3294@x) ai3295@p) (let ((ai329a@expr (ai2eba@stx-expr ai3294@x))) (if (ai2a19@ai28eb@annotation? ai329a@expr) (let ((ai329c@src (ai2a1a@ai28ed@annotation-source ai329a@expr))) (if (pair? ai329c@src) (begin (display '" [" ai3295@p) (display (cdr ai329c@src) ai3295@p) (display '" of " ai3295@p) (display (car ai329c@src) ai3295@p) (display '"]" ai3295@p)) (void))) (void))) (display '">" ai3295@p))))) (set! ai4b58@ai2eae@rp ai2eae@rp) (set! ai2eb8@stx? (lambda (ai329e@x) (and (simple-struct? ai329e@x) (eq? (simple-struct-name ai329e@x) 'stx)))) (set! ai4b59@ai2eb8@stx? ai2eb8@stx?) (set! ai2eba@stx-expr (lambda (ai32a0@x) (simple-struct-ref ai32a0@x '0))) (set! ai4b5a@ai2eba@stx-expr ai2eba@stx-expr) (set! ai2ebc@set-stx-expr! (lambda (ai32a2@x ai32a3@val) (simple-struct-set! ai32a2@x '0 ai32a3@val))) (set! ai4b5b@ai2ebc@set-stx-expr! ai2ebc@set-stx-expr!) (set! ai2ebe@stx-mark* (lambda (ai32a6@x) (simple-struct-ref ai32a6@x '1))) (set! ai4b5c@ai2ebe@stx-mark* ai2ebe@stx-mark*) (set! ai2ec0@set-stx-mark*! (lambda (ai32a8@x ai32a9@val) (simple-struct-set! ai32a8@x '1 ai32a9@val))) (set! ai4b5d@ai2ec0@set-stx-mark*! ai2ec0@set-stx-mark*!) (set! ai2ec2@stx-subst* (lambda (ai32ac@x) (simple-struct-ref ai32ac@x '2))) (set! ai4b5e@ai2ec2@stx-subst* ai2ec2@stx-subst*) (set! ai2ec4@set-stx-subst*! (lambda (ai32ae@x ai32af@val) (simple-struct-set! ai32ae@x '2 ai32af@val))) (set! ai4b5f@ai2ec4@set-stx-subst*! ai2ec4@set-stx-subst*!) (set! ai2ec6@stx-ae* (lambda (ai32b2@x) (simple-struct-ref ai32b2@x '3))) (set! ai4b60@ai2ec6@stx-ae* ai2ec6@stx-ae*) (set! ai2ec8@set-stx-ae*! (lambda (ai32b4@x ai32b5@val) (simple-struct-set! ai32b4@x '3 ai32b5@val))) (set! ai4b61@ai2ec8@set-stx-ae*! ai2ec8@set-stx-ae*!) (set! ai2eca@dummy '3) (set! ai4b62@ai2eca@dummy ai2eca@dummy) (set! ai2ecc@datum->stx (lambda (ai32b8@id ai32b9@datum) (make-simple-struct 'stx '5 (list ai32b9@datum (ai2ebe@stx-mark* ai32b8@id) (ai2ec2@stx-subst* ai32b8@id) (ai2ec6@stx-ae* ai32b8@id))))) (set! ai4b63@ai2ecc@datum->stx ai2ecc@datum->stx) (set! ai2ece@gen-mark (lambda () (string '#\m))) (set! ai4b64@ai2ece@gen-mark ai2ece@gen-mark) (set! ai2ed0@anti-mark '#f) (set! ai4b65@ai2ed0@anti-mark ai2ed0@anti-mark) (set! ai2ed2@anti-mark? not) (set! ai4b66@ai2ed2@anti-mark? ai2ed2@anti-mark?) (set! ai2ed4@mkstx (lambda (ai32bc@e ai32bd@m* ai32be@s* ai32bf@ae*) (if (and (ai2eb8@stx? ai32bc@e) (not (ai2e72@top-marked? ai32bd@m*))) (call-with-values (lambda () (join-wraps ai32bd@m* ai32be@s* ai32bf@ae* ai32bc@e)) (lambda (ai32ca@ai32c5 ai32cb@ai32c7 ai32cc@ai32c9) (let ((ai32d0@ae* ai32cc@ai32c9) (ai32d1@s* ai32cb@ai32c7) (ai32d2@m* ai32ca@ai32c5)) (make-simple-struct 'stx '5 (list (ai2eba@stx-expr ai32bc@e) ai32d2@m* ai32d1@s* ai32d0@ae*))))) (make-simple-struct 'stx '5 (list ai32bc@e ai32bd@m* ai32be@s* ai32bf@ae*))))) (set! ai4b67@ai2ed4@mkstx ai2ed4@mkstx) (set! ai2ed6@add-mark (lambda (ai32d6@m ai32d7@e ai32d8@ae) (ai2ed4@mkstx ai32d7@e (list ai32d6@m) '(shift) (list ai32d8@ae)))) (set! ai4b68@ai2ed6@add-mark ai2ed6@add-mark) (set! ai2ed8@add-subst (lambda (ai32dc@subst ai32dd@e) (ai2ed4@mkstx ai32dd@e '() (list ai32dc@subst) '()))) (set! ai4b69@ai2ed8@add-subst ai2ed8@add-subst) (set! ai2eda@syntax-kind? (lambda (ai32e0@x ai32e1@p?) (if (ai2eb8@stx? ai32e0@x) (ai2eda@syntax-kind? (ai2eba@stx-expr ai32e0@x) ai32e1@p?) (if (ai2a19@ai28eb@annotation? ai32e0@x) (ai2eda@syntax-kind? (ai2a1b@ai28ef@annotation-expression ai32e0@x) ai32e1@p?) (ai32e1@p? ai32e0@x))))) (set! ai4b6a@ai2eda@syntax-kind? ai2eda@syntax-kind?) (set! ai2edc@syntax-vector->list (lambda (ai32e4@x) (if (ai2eb8@stx? ai32e4@x) (let ((ai32e6@ls (ai2edc@syntax-vector->list (ai2eba@stx-expr ai32e4@x))) (ai32e7@m* (ai2ebe@stx-mark* ai32e4@x)) (ai32e8@s* (ai2ec2@stx-subst* ai32e4@x)) (ai32e9@ae* (ai2ec6@stx-ae* ai32e4@x))) (map (lambda (ai32ee@x) (ai2ed4@mkstx ai32ee@x ai32e7@m* ai32e8@s* ai32e9@ae*)) ai32e6@ls)) (if (ai2a19@ai28eb@annotation? ai32e4@x) (ai2edc@syntax-vector->list (ai2a1b@ai28ef@annotation-expression ai32e4@x)) (if (vector? ai32e4@x) (vector->list ai32e4@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" ai32e4@x)))))) (set! ai4b6b@ai2edc@syntax-vector->list ai2edc@syntax-vector->list) (set! ai2ede@syntax-pair? (lambda (ai32f0@x) (ai2eda@syntax-kind? ai32f0@x pair?))) (set! ai4b6c@ai2ede@syntax-pair? ai2ede@syntax-pair?) (set! ai2ee0@syntax-vector? (lambda (ai32f2@x) (ai2eda@syntax-kind? ai32f2@x vector?))) (set! ai4b6d@ai2ee0@syntax-vector? ai2ee0@syntax-vector?) (set! ai2ee2@syntax-null? (lambda (ai32f4@x) (ai2eda@syntax-kind? ai32f4@x null?))) (set! ai4b6e@ai2ee2@syntax-null? ai2ee2@syntax-null?) (set! ai2ee4@syntax-list? (lambda (ai32f6@x) (or (ai2ee2@syntax-null? ai32f6@x) (and (ai2ede@syntax-pair? ai32f6@x) (ai2ee4@syntax-list? (ai2ee8@syntax-cdr ai32f6@x)))))) (set! ai4b6f@ai2ee4@syntax-list? ai2ee4@syntax-list?) (set! ai2ee6@syntax-car (lambda (ai32f8@x) (if (ai2eb8@stx? ai32f8@x) (ai2ed4@mkstx (ai2ee6@syntax-car (ai2eba@stx-expr ai32f8@x)) (ai2ebe@stx-mark* ai32f8@x) (ai2ec2@stx-subst* ai32f8@x) (ai2ec6@stx-ae* ai32f8@x)) (if (ai2a19@ai28eb@annotation? ai32f8@x) (ai2ee6@syntax-car (ai2a1b@ai28ef@annotation-expression ai32f8@x)) (if (pair? ai32f8@x) (car ai32f8@x) (assertion-violation 'syntax-car '"BUG: not a pair" ai32f8@x)))))) (set! ai4b70@ai2ee6@syntax-car ai2ee6@syntax-car) (set! ai2ee8@syntax-cdr (lambda (ai32fa@x) (if (ai2eb8@stx? ai32fa@x) (ai2ed4@mkstx (ai2ee8@syntax-cdr (ai2eba@stx-expr ai32fa@x)) (ai2ebe@stx-mark* ai32fa@x) (ai2ec2@stx-subst* ai32fa@x) (ai2ec6@stx-ae* ai32fa@x)) (if (ai2a19@ai28eb@annotation? ai32fa@x) (ai2ee8@syntax-cdr (ai2a1b@ai28ef@annotation-expression ai32fa@x)) (if (pair? ai32fa@x) (cdr ai32fa@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" ai32fa@x)))))) (set! ai4b71@ai2ee8@syntax-cdr ai2ee8@syntax-cdr) (set! ai2eea@syntax->list (lambda (ai32fc@x) (if (ai2ede@syntax-pair? ai32fc@x) (cons (ai2ee6@syntax-car ai32fc@x) (ai2eea@syntax->list (ai2ee8@syntax-cdr ai32fc@x))) (if (ai2ee2@syntax-null? ai32fc@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" ai32fc@x))))) (set! ai4b72@ai2eea@syntax->list ai2eea@syntax->list) (set! ai2eec@id? (lambda (ai32fe@x) (and (ai2eb8@stx? ai32fe@x) (symbol? (ai2eba@stx-expr ai32fe@x))))) (set! ai4b73@ai2eec@id? ai2eec@id?) (set! ai2eee@id->sym (lambda (ai3300@x) (ai2eba@stx-expr ai3300@x))) (set! ai4b74@ai2eee@id->sym ai2eee@id->sym) (set! ai2ef0@bound-id=? (lambda (ai3302@x ai3303@y) (and (eq? (ai2eee@id->sym ai3302@x) (ai2eee@id->sym ai3303@y)) (same-marks? (ai2ebe@stx-mark* ai3302@x) (ai2ebe@stx-mark* ai3303@y))))) (set! ai4b75@ai2ef0@bound-id=? ai2ef0@bound-id=?) (set! ai2ef2@free-id=? (lambda (ai3306@i ai3307@j) (let ((ai330a@t0 (id->real-label ai3306@i)) (ai330b@t1 (id->real-label ai3307@j))) (if (or ai330a@t0 ai330b@t1) (eq? ai330a@t0 ai330b@t1) (eq? (ai2eee@id->sym ai3306@i) (ai2eee@id->sym ai3307@j)))))) (set! ai4b76@ai2ef2@free-id=? ai2ef2@free-id=?) (set! ai2ef4@valid-bound-ids? (lambda (ai330e@id*) (and (for-all ai2eec@id? ai330e@id*) (ai2ef6@distinct-bound-ids? ai330e@id*)))) (set! ai4b77@ai2ef4@valid-bound-ids? ai2ef4@valid-bound-ids?) (set! ai2ef6@distinct-bound-ids? (lambda (ai3310@id*) (or (null? ai3310@id*) (and (not (ai2ef8@bound-id-member? (car ai3310@id*) (cdr ai3310@id*))) (ai2ef6@distinct-bound-ids? (cdr ai3310@id*)))))) (set! ai4b78@ai2ef6@distinct-bound-ids? ai2ef6@distinct-bound-ids?) (set! ai2ef8@bound-id-member? (lambda (ai3312@id ai3313@id*) (and (pair? ai3313@id*) (or (ai2ef0@bound-id=? ai3312@id (car ai3313@id*)) (ai2ef8@bound-id-member? ai3312@id (cdr ai3313@id*)))))) (set! ai4b79@ai2ef8@bound-id-member? ai2ef8@bound-id-member?) (set! ai2efa@self-evaluating? (lambda (ai3316@x) (or (number? ai3316@x) (string? ai3316@x) (char? ai3316@x) (boolean? ai3316@x) (regexp? ai3316@x) (bytevector? ai3316@x)))) (set! ai4b7a@ai2efa@self-evaluating? ai2efa@self-evaluating?) (set! ai2efc@strip-annotations (lambda (ai3318@x) (if (pair? ai3318@x) (cons (ai2efc@strip-annotations (car ai3318@x)) (ai2efc@strip-annotations (cdr ai3318@x))) (if (vector? ai3318@x) (vector-map ai2efc@strip-annotations ai3318@x) (if (ai2a19@ai28eb@annotation? ai3318@x) (ai2a18@ai28e9@annotation-stripped ai3318@x) ai3318@x))))) (set! ai4b7b@ai2efc@strip-annotations ai2efc@strip-annotations) (set! ai2efe@strip (lambda (ai331a@x ai331b@m*) (if (ai2e72@top-marked? ai331b@m*) (if (or (ai2a19@ai28eb@annotation? ai331a@x) (and (pair? ai331a@x) (ai2a19@ai28eb@annotation? (car ai331a@x))) (and (vector? ai331a@x) (> (vector-length ai331a@x) '0) (ai2a19@ai28eb@annotation? (vector-ref ai331a@x '0)))) (ai2efc@strip-annotations ai331a@x) ai331a@x) (let ai3320@f ((ai331e@x ai331a@x)) (if (ai2eb8@stx? ai331e@x) (ai2efe@strip (ai2eba@stx-expr ai331e@x) (ai2ebe@stx-mark* ai331e@x)) (if (ai2a19@ai28eb@annotation? ai331e@x) (ai2a18@ai28e9@annotation-stripped ai331e@x) (if (pair? ai331e@x) (let ((ai3322@a (ai3320@f (car ai331e@x))) (ai3323@d (ai3320@f (cdr ai331e@x)))) (if (and (eq? ai3322@a (car ai331e@x)) (eq? ai3323@d (cdr ai331e@x))) ai331e@x (cons ai3322@a ai3323@d))) (if (vector? ai331e@x) (let ((ai3326@old (vector->list ai331e@x))) (let ((ai3328@new (map ai3320@f ai3326@old))) (if (for-all eq? ai3326@old ai3328@new) ai331e@x (list->vector ai3328@new)))) ai331e@x)))))))) (set! ai4b7c@ai2efe@strip ai2efe@strip) (set! ai2f00@stx->datum (lambda (ai332a@x) (ai2efe@strip ai332a@x '()))) (set! ai4b7d@ai2f00@stx->datum ai2f00@stx->datum) (set! ai2f02@id->label (lambda (ai332c@id) (or (id->real-label ai332c@id) (let ((ai332e@t (ai31e3@top-level-context))) (if ai332e@t ((lambda (ai3330@env) (let ((ai3332@rib (ai3193@interaction-env-rib ai3330@env))) (call-with-values (lambda () (ai2e7c@gen-define-label+loc ai332c@id ai3332@rib)) (lambda (ai3338@ai3335 ai3339@ai3337) (let ((ai333c@loc_ ai3339@ai3337) (ai333d@lab ai3338@ai3335)) (begin (ai2ea2@extend-rib! ai3332@rib ai332c@id ai333d@lab) ai333d@lab)))))) ai332e@t) '#f))))) (set! ai4b7e@ai2f02@id->label ai2f02@id->label) (set! ai2f04@label->binding (lambda (ai3340@x ai3341@r) (let ((ai3344@t (ai2d00@ai2b3d@imported-label->binding ai3340@x))) (if ai3344@t ((lambda (ai3346@b) (if (and (pair? ai3346@b) (eq? (car ai3346@b) '$core-rtd)) (cons '$rtd (map ai30a9@bless (cdr ai3346@b))) (if (and (pair? ai3346@b) (eq? (car ai3346@b) 'global-rtd)) (let ((ai3348@lib (cadr ai3346@b)) (ai3349@loc (cddr ai3346@b))) (cons '$rtd (symbol-value ai3349@loc))) ai3346@b))) ai3344@t) (let ((ai334c@t (assq ai3340@x ai3341@r))) (if ai334c@t (cdr ai334c@t) (let ((ai334e@t (ai31e3@top-level-context))) (if ai334e@t ((lambda (ai3350@env) (let ((ai3352@t (assq ai3340@x (ai319b@interaction-env-locs ai3350@env)))) (if ai3352@t ((lambda (ai3354@p) (cons* 'lexical (cdr ai3354@p) '#f)) ai3352@t) '(displaced-lexical . #f)))) ai334e@t) '(displaced-lexical . #f))))))))) (set! ai4b7f@ai2f04@label->binding ai2f04@label->binding) (set! ai2f06@make-binding cons) (set! ai4b80@ai2f06@make-binding ai2f06@make-binding) (set! ai2f08@binding-type car) (set! ai4b81@ai2f08@binding-type ai2f08@binding-type) (set! ai2f0a@binding-value cdr) (set! ai4b82@ai2f0a@binding-value ai2f0a@binding-value) (set! ai2f0c@raise-unbound-error (lambda (ai3356@id) (ai31d1@syntax-violation* '#f '"unbound identifier" ai3356@id (ai4f78@ai4dbe@make-undefined-violation)))) (set! ai4b83@ai2f0c@raise-unbound-error ai2f0c@raise-unbound-error) (set! ai2f0e@syntax-type (lambda (ai3358@e ai3359@r) (if (ai2eec@id? ai3358@e) (let ((ai335c@id ai3358@e)) (let ((ai335e@label (ai2f02@id->label ai335c@id))) (let ((ai3360@b (ai2f04@label->binding ai335e@label ai3359@r))) (let ((ai3362@type (ai2f08@binding-type ai3360@b))) (begin (if (not ai335e@label) (ai2f0c@raise-unbound-error ai335c@id) (void)) (let ((ai3364@t ai3362@type)) (if (memv ai3364@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values ai3362@type (ai2f0a@binding-value ai3360@b) ai335c@id) (values 'other '#f '#f)))))))) (if (ai2ede@syntax-pair? ai3358@e) (let ((ai3366@id (ai2ee6@syntax-car ai3358@e))) (if (ai2eec@id? ai3366@id) (let ((ai3368@label (ai2f02@id->label ai3366@id))) (let ((ai336a@b (ai2f04@label->binding ai3368@label ai3359@r))) (let ((ai336c@type (ai2f08@binding-type ai336a@b))) (begin (if (not ai3368@label) (ai2f0c@raise-unbound-error ai3366@id) (void)) (let ((ai336e@t ai336c@type)) (if (memv ai336e@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values ai336c@type (ai2f0a@binding-value ai336a@b) ai3366@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((ai3370@d (ai2f00@stx->datum ai3358@e))) (if (ai2efa@self-evaluating? ai3370@d) (values 'constant ai3370@d '#f) (values 'other '#f '#f))))))) (set! ai4b84@ai2f0e@syntax-type ai2f0e@syntax-type) (set! ai2f1c@sanitize-binding (lambda (ai3372@x ai3373@src) (if (procedure? ai3372@x) (cons* 'local-macro ai3372@x ai3373@src) (if (and (pair? ai3372@x) (eq? (car ai3372@x) 'macro!) (procedure? (cdr ai3372@x))) (cons* 'local-macro! (cdr ai3372@x) ai3373@src) (if (and (pair? ai3372@x) (eq? (car ai3372@x) '$rtd)) ai3372@x (assertion-violation 'expand '"invalid transformer" ai3372@x)))))) (set! ai4b85@ai2f1c@sanitize-binding ai2f1c@sanitize-binding) (set! ai2f1e@make-variable-transformer (lambda (ai3376@x) (if (procedure? ai3376@x) (cons 'macro! ai3376@x) (assertion-violation 'make-variable-transformer '"not a procedure" ai3376@x)))) (set! ai4b86@ai2f1e@make-variable-transformer ai2f1e@make-variable-transformer) (set! ai2f20@variable-transformer? (lambda (ai3378@x) (and (pair? ai3378@x) (eq? (car ai3378@x) 'macro!) (procedure? (cdr ai3378@x))))) (set! ai4b87@ai2f20@variable-transformer? ai2f20@variable-transformer?) (set! ai2f22@variable-transformer-procedure (lambda (ai337a@x) (if (ai2f20@variable-transformer? ai337a@x) (cdr ai337a@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" ai337a@x)))) (set! ai4b88@ai2f22@variable-transformer-procedure ai2f22@variable-transformer-procedure) (set! ai2f24@make-eval-transformer (lambda (ai337c@x) (ai2f1c@sanitize-binding (eval-core (ai2a7b@ai2a33@expanded->core ai337c@x)) ai337c@x))) (set! ai4b89@ai2f24@make-eval-transformer ai2f24@make-eval-transformer) (set! ai3075@parse-define (lambda (ai337e@x) (let ((ai3380@t ai337e@x)) (let ((ai3382@ls/false (ai30f3@syntax-dispatch ai3380@t '(_ (any . any) any . each-any)))) (if (and ai3382@ls/false (apply (lambda (ai3384@id ai3385@fmls ai3386@b ai3387@b*) (ai2eec@id? ai3384@id)) ai3382@ls/false)) (apply (lambda (ai338c@id ai338d@fmls ai338e@b ai338f@b*) (begin (ai3119@verify-formals ai338d@fmls ai337e@x) (values ai338c@id (cons 'defun (cons ai338d@fmls (cons ai338e@b ai338f@b*)))))) ai3382@ls/false) (let ((ai3394@t ai3380@t)) (let ((ai3396@ls/false (ai30f3@syntax-dispatch ai3394@t '(_ any any)))) (if (and ai3396@ls/false (apply (lambda (ai3398@id ai3399@val) (ai2eec@id? ai3398@id)) ai3396@ls/false)) (apply (lambda (ai339c@id ai339d@val) (values ai339c@id (cons 'expr ai339d@val))) ai3396@ls/false) (let ((ai33a0@t ai3394@t)) (let ((ai33a2@ls/false (ai30f3@syntax-dispatch ai33a0@t '(_ any)))) (if (and ai33a2@ls/false (apply (lambda (ai33a4@id) (ai2eec@id? ai33a4@id)) ai33a2@ls/false)) (apply (lambda (ai33a6@id) (values ai33a6@id (cons 'expr (ai30a9@bless '(void))))) ai33a2@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai33a0@t)))))))))))) (set! ai4b8a@ai3075@parse-define ai3075@parse-define) (set! ai3077@parse-define-syntax (lambda (ai33a8@x) (let ((ai33aa@t ai33a8@x)) (let ((ai33ac@ls/false (ai30f3@syntax-dispatch ai33aa@t '(_ any any)))) (if (and ai33ac@ls/false (apply (lambda (ai33ae@id ai33af@val) (ai2eec@id? ai33ae@id)) ai33ac@ls/false)) (apply (lambda (ai33b2@id ai33b3@val) (values ai33b2@id ai33b3@val)) ai33ac@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai33aa@t)))))) (set! ai4b8b@ai3077@parse-define-syntax ai3077@parse-define-syntax) (set! ai3079@scheme-stx-hashtable (make-eq-hashtable)) (set! ai4b8c@ai3079@scheme-stx-hashtable ai3079@scheme-stx-hashtable) (set! ai307b@scheme-stx (lambda (ai33b6@sym) (or (hashtable-ref ai3079@scheme-stx-hashtable ai33b6@sym '#f) (let ((ai33b8@subst (ai2cdc@ai2af5@library-subst (ai2cfa@ai2b31@find-library-by-name '(psyntax system $all))))) (let ((ai33ba@stx (make-simple-struct 'stx '5 (list ai33b6@sym ai2e70@top-mark* '() '())))) (let ((ai33bc@stx (let ((ai33be@t (assq ai33b6@sym ai33b8@subst))) (if ai33be@t ((lambda (ai33c0@x) (let ((ai33c2@name (car ai33c0@x)) (ai33c3@label (cdr ai33c0@x))) (ai2ed8@add-subst (make-simple-struct 'rib '6 (list (list ai33c2@name) (list ai2e70@top-mark*) (list ai33c3@label) '#f '#f)) ai33ba@stx))) ai33be@t) ai33ba@stx)))) (begin (hashtable-set! ai3079@scheme-stx-hashtable ai33b6@sym ai33bc@stx) ai33bc@stx))))))) (set! ai4b8d@ai307b@scheme-stx ai307b@scheme-stx) (set! ai307d@lexical-var car) (set! ai4b8e@ai307d@lexical-var ai307d@lexical-var) (set! ai307f@lexical-mutable? cdr) (set! ai4b8f@ai307f@lexical-mutable? ai307f@lexical-mutable?) (set! ai3081@set-lexical-mutable! set-cdr!) (set! ai4b90@ai3081@set-lexical-mutable! ai3081@set-lexical-mutable!) (set! ai3083@add-lexical (lambda (ai33c6@lab ai33c7@lex ai33c8@r) (cons (cons* ai33c6@lab 'lexical ai33c7@lex '#f) ai33c8@r))) (set! ai4b91@ai3083@add-lexical ai3083@add-lexical) (set! ai3085@add-lexicals (lambda (ai33cc@lab* ai33cd@lex* ai33ce@r) (if (null? ai33cc@lab*) ai33ce@r (ai3085@add-lexicals (cdr ai33cc@lab*) (cdr ai33cd@lex*) (ai3083@add-lexical (car ai33cc@lab*) (car ai33cd@lex*) ai33ce@r))))) (set! ai4b92@ai3085@add-lexicals ai3085@add-lexicals) (set! ai3087@letrec-helper (lambda (ai33d2@e ai33d3@r ai33d4@mr ai33d5@build) (let ((ai33da@t ai33d2@e)) (let ((ai33dc@ls/false (ai30f3@syntax-dispatch ai33da@t '(_ #(each (any any)) any . each-any)))) (if ai33dc@ls/false (apply (lambda (ai33de@lhs* ai33df@rhs* ai33e0@b ai33e1@b*) (if (not (ai2ef4@valid-bound-ids? ai33de@lhs*)) (ai30ad@invalid-fmls-error ai33d2@e ai33de@lhs*) (let ((ai33e6@lex* (map ai2e74@gen-lexical ai33de@lhs*)) (ai33e7@lab* (map ai2e78@gen-label ai33de@lhs*))) (let ((ai33ea@rib (ai2eac@make-full-rib ai33de@lhs* ai33e7@lab*)) (ai33eb@r (ai3085@add-lexicals ai33e7@lab* ai33e6@lex* ai33d3@r))) (let ((ai33ee@body (ai312b@chi-internal (ai2ed8@add-subst ai33ea@rib (cons ai33e0@b ai33e1@b*)) ai33eb@r ai33d4@mr)) (ai33ef@rhs* (ai3111@chi-expr* (map (lambda (ai33f2@x) (ai2ed8@add-subst ai33ea@rib ai33f2@x)) ai33df@rhs*) ai33eb@r ai33d4@mr))) (ai33d5@build '#f ai33e6@lex* ai33ef@rhs* ai33ee@body)))))) ai33dc@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai33da@t)))))) (set! ai4b93@ai3087@letrec-helper ai3087@letrec-helper) (set! ai3089@let-transformer (lambda (ai33f4@e ai33f5@r ai33f6@mr) (let ((ai33fa@t ai33f4@e)) (let ((ai33fc@ls/false (ai30f3@syntax-dispatch ai33fa@t '(_ #(each (any any)) any . each-any)))) (if ai33fc@ls/false (apply (lambda (ai33fe@lhs* ai33ff@rhs* ai3400@b ai3401@b*) (if (not (ai2ef4@valid-bound-ids? ai33fe@lhs*)) (ai30ad@invalid-fmls-error ai33f4@e ai33fe@lhs*) (let ((ai3406@lex* (map ai2e74@gen-lexical ai33fe@lhs*)) (ai3407@lab* (map ai2e78@gen-label ai33fe@lhs*)) (ai3408@rhs* (ai3111@chi-expr* ai33ff@rhs* ai33f5@r ai33f6@mr))) (let ((ai340c@rib (ai2eac@make-full-rib ai33fe@lhs* ai3407@lab*)) (ai340d@r (ai3085@add-lexicals ai3407@lab* ai3406@lex* ai33f5@r))) (let ((ai3410@body (ai312b@chi-internal (ai2ed8@add-subst ai340c@rib (cons ai3400@b ai3401@b*)) ai340d@r ai33f6@mr))) (ai2e54@ai2db1@build-let '#f ai3406@lex* ai3408@rhs* ai3410@body)))))) ai33fc@ls/false) (let ((ai3412@t ai33fa@t)) (let ((ai3414@ls/false (ai30f3@syntax-dispatch ai3412@t '(_ any #(each (any any)) any . each-any)))) (if ai3414@ls/false (apply (lambda (ai3416@loop ai3417@lhs* ai3418@rhs* ai3419@b ai341a@b*) (if (not (ai2ef4@valid-bound-ids? ai3417@lhs*)) (ai30ad@invalid-fmls-error ai33f4@e ai3417@lhs*) (let ((ai3420@lex* (map ai2e74@gen-lexical ai3417@lhs*)) (ai3421@lab* (map ai2e78@gen-label ai3417@lhs*)) (ai3422@rhs* (ai3111@chi-expr* ai3418@rhs* ai33f5@r ai33f6@mr)) (ai3423@loop-lex (ai2e74@gen-lexical ai3416@loop)) (ai3424@loop-lab (ai2e78@gen-label ai3416@loop))) (let ((ai342a@loop-rib (ai2eac@make-full-rib (list ai3416@loop) (list ai3424@loop-lab))) (ai342b@rib (ai2eac@make-full-rib ai3417@lhs* ai3421@lab*)) (ai342c@r (ai3085@add-lexicals (cons ai3424@loop-lab ai3421@lab*) (cons ai3423@loop-lex ai3420@lex*) ai33f5@r))) (let ((ai3430@body (ai312b@chi-internal (ai2ed8@add-subst ai342a@loop-rib (ai2ed8@add-subst ai342b@rib (cons ai3419@b ai341a@b*))) ai342c@r ai33f6@mr))) (ai2e55@ai2db3@build-named-let '#f ai3423@loop-lex ai3420@lex* ai3422@rhs* ai3430@body)))))) ai3414@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3412@t))))))))) (set! ai4b94@ai3089@let-transformer ai3089@let-transformer) (set! ai308b@letrec-transformer (lambda (ai3432@e ai3433@r ai3434@mr) (ai3087@letrec-helper ai3432@e ai3433@r ai3434@mr ai2e53@ai2daf@build-letrec))) (set! ai4b95@ai308b@letrec-transformer ai308b@letrec-transformer) (set! ai308d@letrec*-transformer (lambda (ai3438@e ai3439@r ai343a@mr) (ai3087@letrec-helper ai3438@e ai3439@r ai343a@mr ai2e56@ai2db5@build-letrec*))) (set! ai4b96@ai308d@letrec*-transformer ai308d@letrec*-transformer) (set! ai308f@fluid-let-syntax-transformer (lambda (ai343e@e ai343f@r ai3440@mr) (let ((ai3445@lookup '#f)) (begin (set! ai3445@lookup (lambda (ai3458@x) (or (ai2f02@id->label ai3458@x) (ai31d3@syntax-violation '#f '"unbound identifier" ai343e@e ai3458@x)))) (let ((ai3446@t ai343e@e)) (let ((ai3448@ls/false (ai30f3@syntax-dispatch ai3446@t '(_ #(each (any any)) any . each-any)))) (if ai3448@ls/false (apply (lambda (ai344a@lhs* ai344b@rhs* ai344c@b ai344d@b*) (if (not (ai2ef4@valid-bound-ids? ai344a@lhs*)) (ai30ad@invalid-fmls-error ai343e@e ai344a@lhs*) (let ((ai3452@lab* (map ai3445@lookup ai344a@lhs*)) (ai3453@rhs* (map (lambda (ai3456@x) (ai2f24@make-eval-transformer (ai314d@expand-transformer ai3456@x ai3440@mr))) ai344b@rhs*))) (ai312b@chi-internal (cons ai344c@b ai344d@b*) (append (map cons ai3452@lab* ai3453@rhs*) ai343f@r) (append (map cons ai3452@lab* ai3453@rhs*) ai3440@mr))))) ai3448@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3446@t)))))))) (set! ai4b97@ai308f@fluid-let-syntax-transformer ai308f@fluid-let-syntax-transformer) (set! ai3091@type-descriptor-transformer (lambda (ai345a@e ai345b@r ai345c@mr) (let ((ai3460@t ai345a@e)) (let ((ai3462@ls/false (ai30f3@syntax-dispatch ai3460@t '(_ any)))) (if (and ai3462@ls/false (apply (lambda (ai3464@id) (ai2eec@id? ai3464@id)) ai3462@ls/false)) (apply (lambda (ai3466@id) (let ((ai3468@lab (ai2f02@id->label ai3466@id))) (let ((ai346a@b (ai2f04@label->binding ai3468@lab ai345b@r))) (let ((ai346c@type (ai2f08@binding-type ai346a@b))) (begin (if (not ai3468@lab) (ai2f0c@raise-unbound-error ai3466@id) (void)) (if (not (and (eq? ai346c@type '$rtd) (not (list? (ai2f0a@binding-value ai346a@b))))) (ai31d3@syntax-violation '#f '"not a record type" ai345a@e) (void)) (list 'quote (ai2f0a@binding-value ai346a@b))))))) ai3462@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3460@t)))))) (set! ai4b98@ai3091@type-descriptor-transformer ai3091@type-descriptor-transformer) (set! ai3093@record-type-descriptor-transformer (lambda (ai346e@e ai346f@r ai3470@mr) (let ((ai3474@t ai346e@e)) (let ((ai3476@ls/false (ai30f3@syntax-dispatch ai3474@t '(_ any)))) (if (and ai3476@ls/false (apply (lambda (ai3478@id) (ai2eec@id? ai3478@id)) ai3476@ls/false)) (apply (lambda (ai347a@id) (let ((ai347c@lab (ai2f02@id->label ai347a@id))) (let ((ai347e@b (ai2f04@label->binding ai347c@lab ai346f@r))) (let ((ai3480@type (ai2f08@binding-type ai347e@b))) (begin (if (not ai347c@lab) (ai2f0c@raise-unbound-error ai347a@id) (void)) (if (not (and (eq? ai3480@type '$rtd) (list? (ai2f0a@binding-value ai347e@b)))) (ai31d3@syntax-violation '#f '"not a record type" ai346e@e) (void)) (ai3115@chi-expr (car (ai2f0a@binding-value ai347e@b)) ai346f@r ai3470@mr)))))) ai3476@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3474@t)))))) (set! ai4b99@ai3093@record-type-descriptor-transformer ai3093@record-type-descriptor-transformer) (set! ai3095@record-constructor-descriptor-transformer (lambda (ai3482@e ai3483@r ai3484@mr) (let ((ai3488@t ai3482@e)) (let ((ai348a@ls/false (ai30f3@syntax-dispatch ai3488@t '(_ any)))) (if (and ai348a@ls/false (apply (lambda (ai348c@id) (ai2eec@id? ai348c@id)) ai348a@ls/false)) (apply (lambda (ai348e@id) (let ((ai3490@lab (ai2f02@id->label ai348e@id))) (let ((ai3492@b (ai2f04@label->binding ai3490@lab ai3483@r))) (let ((ai3494@type (ai2f08@binding-type ai3492@b))) (begin (if (not ai3490@lab) (ai2f0c@raise-unbound-error ai348e@id) (void)) (if (not (and (eq? ai3494@type '$rtd) (list? (ai2f0a@binding-value ai3492@b)))) (ai31d3@syntax-violation '#f '"invalid type" ai3482@e) (void)) (ai3115@chi-expr (cadr (ai2f0a@binding-value ai3492@b)) ai3483@r ai3484@mr)))))) ai348a@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3488@t)))))) (set! ai4b9a@ai3095@record-constructor-descriptor-transformer ai3095@record-constructor-descriptor-transformer) (set! ai3097@when-macro (lambda (ai3496@e) (let ((ai3498@t ai3496@e)) (let ((ai349a@ls/false (ai30f3@syntax-dispatch ai3498@t '(_ any any . each-any)))) (if ai349a@ls/false (apply (lambda (ai349c@test ai349d@e ai349e@e*) (ai30a9@bless (list 'if ai349c@test (cons 'begin (cons ai349d@e ai349e@e*))))) ai349a@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3498@t)))))) (set! ai4b9b@ai3097@when-macro ai3097@when-macro) (set! ai3099@unless-macro (lambda (ai34a2@e) (let ((ai34a4@t ai34a2@e)) (let ((ai34a6@ls/false (ai30f3@syntax-dispatch ai34a4@t '(_ any any . each-any)))) (if ai34a6@ls/false (apply (lambda (ai34a8@test ai34a9@e ai34aa@e*) (ai30a9@bless (list 'if (list 'not ai34a8@test) (cons 'begin (cons ai34a9@e ai34aa@e*))))) ai34a6@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai34a4@t)))))) (set! ai4b9c@ai3099@unless-macro ai3099@unless-macro) (set! ai309b@if-transformer (lambda (ai34ae@e ai34af@r ai34b0@mr) (let ((ai34b4@t ai34ae@e)) (let ((ai34b6@ls/false (ai30f3@syntax-dispatch ai34b4@t '(_ any any any)))) (if ai34b6@ls/false (apply (lambda (ai34b8@e0 ai34b9@e1 ai34ba@e2) (list 'if (ai3115@chi-expr ai34b8@e0 ai34af@r ai34b0@mr) (ai3115@chi-expr ai34b9@e1 ai34af@r ai34b0@mr) (ai3115@chi-expr ai34ba@e2 ai34af@r ai34b0@mr))) ai34b6@ls/false) (let ((ai34be@t ai34b4@t)) (let ((ai34c0@ls/false (ai30f3@syntax-dispatch ai34be@t '(_ any any)))) (if ai34c0@ls/false (apply (lambda (ai34c2@e0 ai34c3@e1) (list 'if (ai3115@chi-expr ai34c2@e0 ai34af@r ai34b0@mr) (ai3115@chi-expr ai34c3@e1 ai34af@r ai34b0@mr) (ai2e52@ai2dad@build-void))) ai34c0@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai34be@t))))))))) (set! ai4b9d@ai309b@if-transformer ai309b@if-transformer) (set! ai309d@and-transformer (lambda (ai34c6@e ai34c7@r ai34c8@mr) (let ((ai34cc@t ai34c6@e)) (let ((ai34ce@ls/false (ai30f3@syntax-dispatch ai34cc@t '(_ . each-any)))) (if ai34ce@ls/false (apply (lambda (ai34d0@e*) (cons 'and (ai3111@chi-expr* ai34d0@e* ai34c7@r ai34c8@mr))) ai34ce@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai34cc@t)))))) (set! ai4b9e@ai309d@and-transformer ai309d@and-transformer) (set! ai309f@or-transformer (lambda (ai34d2@e ai34d3@r ai34d4@mr) (let ((ai34d8@t ai34d2@e)) (let ((ai34da@ls/false (ai30f3@syntax-dispatch ai34d8@t '(_ . each-any)))) (if ai34da@ls/false (apply (lambda (ai34dc@e*) (cons 'or (ai3111@chi-expr* ai34dc@e* ai34d3@r ai34d4@mr))) ai34da@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai34d8@t)))))) (set! ai4b9f@ai309f@or-transformer ai309f@or-transformer) (set! ai30a1@case-macro (lambda (ai34de@e) (let ((ai34e1@build-last '#f) (ai34e3@build-one '#f)) (begin (set! ai34e1@build-last (lambda (ai3508@cls) (let ((ai350a@t ai3508@cls)) (let ((ai350c@ls/false (ai30f3@syntax-dispatch ai350a@t '(#(scheme-id else) any . each-any)))) (if ai350c@ls/false (apply (lambda (ai350e@e ai350f@e*) (cons 'begin (cons ai350e@e ai350f@e*))) ai350c@ls/false) (let ((ai3512@t ai350a@t)) (let ((ai3514@ls/false (ai30f3@syntax-dispatch ai3512@t '_))) (if ai3514@ls/false (apply (lambda () (ai34e3@build-one ai3508@cls '(if #f #f))) ai3514@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3512@t))))))))) (set! ai34e3@build-one (lambda (ai34fa@cls ai34fb@k) (let ((ai34fe@t ai34fa@cls)) (let ((ai3500@ls/false (ai30f3@syntax-dispatch ai34fe@t '(each-any any . each-any)))) (if ai3500@ls/false (apply (lambda (ai3502@d* ai3503@e ai3504@e*) (list 'if (list 'memv 't (list 'quote ai3502@d*)) (cons 'begin (cons ai3503@e ai3504@e*)) ai34fb@k)) ai3500@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai34fe@t)))))) (let ((ai34e4@t ai34de@e)) (let ((ai34e6@ls/false (ai30f3@syntax-dispatch ai34e4@t '(_ any)))) (if ai34e6@ls/false (apply (lambda (ai34e8@expr) (ai30a9@bless (cons 'let (cons (list (list 't ai34e8@expr)) '((if #f #f)))))) ai34e6@ls/false) (let ((ai34ea@t ai34e4@t)) (let ((ai34ec@ls/false (ai30f3@syntax-dispatch ai34ea@t '(_ any any . each-any)))) (if ai34ec@ls/false (apply (lambda (ai34ee@expr ai34ef@cls ai34f0@cls*) (ai30a9@bless (list 'let (list (list 't ai34ee@expr)) (let ai34f8@f ((ai34f4@cls ai34ef@cls) (ai34f5@cls* ai34f0@cls*)) (if (null? ai34f5@cls*) (ai34e1@build-last ai34f4@cls) (ai34e3@build-one ai34f4@cls (ai34f8@f (car ai34f5@cls*) (cdr ai34f5@cls*)))))))) ai34ec@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai34ea@t))))))))))) (set! ai4ba0@ai30a1@case-macro ai30a1@case-macro) (set! ai30a3@quote-transformer (lambda (ai3516@e ai3517@r ai3518@mr) (let ((ai351c@t ai3516@e)) (let ((ai351e@ls/false (ai30f3@syntax-dispatch ai351c@t '(_ any)))) (if ai351e@ls/false (apply (lambda (ai3520@datum) (list 'quote (ai2f00@stx->datum ai3520@datum))) ai351e@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai351c@t)))))) (set! ai4ba1@ai30a3@quote-transformer ai30a3@quote-transformer) (set! ai30a5@case-lambda-transformer (lambda (ai3522@e ai3523@r ai3524@mr) (let ((ai3528@t ai3522@e)) (let ((ai352a@ls/false (ai30f3@syntax-dispatch ai3528@t '(_ . #(each (any any . each-any)))))) (if ai352a@ls/false (apply (lambda (ai352c@fmls* ai352d@b* ai352e@b**) (call-with-values (lambda () (ai311d@chi-lambda-clause* ai3522@e ai352c@fmls* (map cons ai352d@b* ai352e@b**) ai3523@r ai3524@mr)) (lambda (ai3536@ai3533 ai3537@ai3535) (let ((ai353a@body* ai3537@ai3535) (ai353b@fmls* ai3536@ai3533)) (ai2e50@ai2d7d@build-case-lambda '#f ai353b@fmls* ai353a@body*))))) ai352a@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3528@t)))))) (set! ai4ba2@ai30a5@case-lambda-transformer ai30a5@case-lambda-transformer) (set! ai30a7@lambda-transformer (lambda (ai353e@e ai353f@r ai3540@mr) (let ((ai3544@t ai353e@e)) (let ((ai3546@ls/false (ai30f3@syntax-dispatch ai3544@t '(_ any any . each-any)))) (if ai3546@ls/false (apply (lambda (ai3548@fmls ai3549@b ai354a@b*) (call-with-values (lambda () (ai311b@chi-lambda-clause ai353e@e ai3548@fmls (cons ai3549@b ai354a@b*) ai353f@r ai3540@mr)) (lambda (ai3552@ai354f ai3553@ai3551) (let ((ai3556@body ai3553@ai3551) (ai3557@fmls ai3552@ai354f)) (ai2e4f@ai2d7b@build-lambda '#f ai3557@fmls ai3556@body))))) ai3546@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3544@t)))))) (set! ai4ba3@ai30a7@lambda-transformer ai30a7@lambda-transformer) (set! ai30a9@bless (lambda (ai355a@x) (ai2ed4@mkstx (let ai355e@f ((ai355c@x ai355a@x)) (if (ai2eb8@stx? ai355c@x) ai355c@x (if (pair? ai355c@x) (cons (ai355e@f (car ai355c@x)) (ai355e@f (cdr ai355c@x))) (if (symbol? ai355c@x) (ai307b@scheme-stx ai355c@x) (if (vector? ai355c@x) (vector-map ai355e@f ai355c@x) ai355c@x))))) '() '() '()))) (set! ai4ba4@ai30a9@bless ai30a9@bless) (set! ai30ab@with-syntax-macro (lambda (ai3560@e) (let ((ai3562@t ai3560@e)) (let ((ai3564@ls/false (ai30f3@syntax-dispatch ai3562@t '(_ #(each (any any)) any . each-any)))) (if ai3564@ls/false (apply (lambda (ai3566@pat* ai3567@expr* ai3568@b ai3569@b*) (let ((ai356e@idn* (let ai3572@f ((ai3570@pat* ai3566@pat*)) (if (null? ai3570@pat*) '() (call-with-values (lambda () (ai30f1@convert-pattern (car ai3570@pat*) '())) (lambda (ai3578@ai3575 ai3579@ai3577) (let ((ai357c@idn* ai3579@ai3577) (ai357d@pat ai3578@ai3575)) (append ai357c@idn* (ai3572@f (cdr ai3570@pat*)))))))))) (begin (ai3119@verify-formals (map car ai356e@idn*) ai3560@e) (let ((ai3580@t* (ai31c1@generate-temporaries ai3567@expr*))) (ai30a9@bless (list 'let (map list ai3580@t* ai3567@expr*) (let ai3586@f ((ai3582@pat* ai3566@pat*) (ai3583@t* ai3580@t*)) (if (null? ai3582@pat*) (cons 'begin (cons '#f (cons ai3568@b ai3569@b*))) (list 'syntax-case (car ai3583@t*) '() (list (car ai3582@pat*) (ai3586@f (cdr ai3582@pat*) (cdr ai3583@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car ai3582@pat*)) (car ai3583@t*)))))))))))) ai3564@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3562@t)))))) (set! ai4ba5@ai30ab@with-syntax-macro ai30ab@with-syntax-macro) (set! ai30ad@invalid-fmls-error (lambda (ai3588@stx ai3589@fmls) (let ((ai358c@t ai3589@fmls)) (let ((ai358e@ls/false (ai30f3@syntax-dispatch ai358c@t '#(each+ any () any)))) (if ai358e@ls/false (apply (lambda (ai3590@id* ai3591@last) (let ai3596@f ((ai3594@id* (if (ai2eec@id? ai3591@last) (cons ai3591@last ai3590@id*) (if (ai2ee2@syntax-null? ai3591@last) ai3590@id* (ai31d3@syntax-violation '#f '"not an identifier" ai3588@stx ai3591@last))))) (if (null? ai3594@id*) (values) (if (not (ai2eec@id? (car ai3594@id*))) (ai31d3@syntax-violation '#f '"not an identifier" ai3588@stx (car ai3594@id*)) (begin (ai3596@f (cdr ai3594@id*)) (if (ai2ef8@bound-id-member? (car ai3594@id*) (cdr ai3594@id*)) (ai31d3@syntax-violation '#f '"duplicate binding" ai3588@stx (car ai3594@id*)) (void))))))) ai358e@ls/false) (let ((ai3598@t ai358c@t)) (let ((ai359a@ls/false (ai30f3@syntax-dispatch ai3598@t '_))) (if ai359a@ls/false (apply (lambda () (ai31d3@syntax-violation '#f '"malformed binding form" ai3588@stx ai3589@fmls)) ai359a@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3598@t))))))))) (set! ai4ba6@ai30ad@invalid-fmls-error ai30ad@invalid-fmls-error) (set! ai30af@let-macro (lambda (ai359c@stx) (let ((ai359e@t ai359c@stx)) (let ((ai35a0@ls/false (ai30f3@syntax-dispatch ai359e@t '(_ #(each (any any)) any . each-any)))) (if ai35a0@ls/false (apply (lambda (ai35a2@lhs* ai35a3@rhs* ai35a4@b ai35a5@b*) (if (ai2ef4@valid-bound-ids? ai35a2@lhs*) (ai30a9@bless (cons (cons 'lambda (cons ai35a2@lhs* (cons ai35a4@b ai35a5@b*))) ai35a3@rhs*)) (ai30ad@invalid-fmls-error ai359c@stx ai35a2@lhs*))) ai35a0@ls/false) (let ((ai35aa@t ai359e@t)) (let ((ai35ac@ls/false (ai30f3@syntax-dispatch ai35aa@t '(_ any #(each (any any)) any . each-any)))) (if (and ai35ac@ls/false (apply (lambda (ai35ae@f ai35af@lhs* ai35b0@rhs* ai35b1@b ai35b2@b*) (ai2eec@id? ai35ae@f)) ai35ac@ls/false)) (apply (lambda (ai35b8@f ai35b9@lhs* ai35ba@rhs* ai35bb@b ai35bc@b*) (if (ai2ef4@valid-bound-ids? ai35b9@lhs*) (ai30a9@bless (cons (list 'letrec (list (list ai35b8@f (cons 'lambda (cons ai35b9@lhs* (cons ai35bb@b ai35bc@b*))))) ai35b8@f) ai35ba@rhs*)) (ai30ad@invalid-fmls-error ai359c@stx ai35b9@lhs*))) ai35ac@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai35aa@t))))))))) (set! ai4ba7@ai30af@let-macro ai30af@let-macro) (set! ai30b1@let-values-macro (lambda (ai35c2@stx) (let ((ai35c5@rename '#f) (ai35c7@rename* '#f)) (begin (set! ai35c5@rename (lambda (ai362a@x ai362b@old* ai362c@new*) (begin (if (not (ai2eec@id? ai362a@x)) (ai31d3@syntax-violation '#f '"not an indentifier" ai35c2@stx ai362a@x) (void)) (if (ai2ef8@bound-id-member? ai362a@x ai362b@old*) (ai31d3@syntax-violation '#f '"duplicate binding" ai35c2@stx ai362a@x) (void)) (let ((ai3630@y (gensym (ai31d9@syntax->datum ai362a@x)))) (values ai3630@y (cons ai362a@x ai362b@old*) (cons ai3630@y ai362c@new*)))))) (set! ai35c7@rename* (lambda (ai3618@x* ai3619@old* ai361a@new*) (if (null? ai3618@x*) (values '() ai3619@old* ai361a@new*) (call-with-values (lambda () (ai35c5@rename (car ai3618@x*) ai3619@old* ai361a@new*)) (lambda (ai361e@x ai361f@old* ai3620@new*) (call-with-values (lambda () (ai35c7@rename* (cdr ai3618@x*) ai361f@old* ai3620@new*)) (lambda (ai3624@x* ai3625@old* ai3626@new*) (values (cons ai361e@x ai3624@x*) ai3625@old* ai3626@new*)))))))) (let ((ai35c8@t ai35c2@stx)) (let ((ai35ca@ls/false (ai30f3@syntax-dispatch ai35c8@t '(_ () any . each-any)))) (if ai35ca@ls/false (apply (lambda (ai35cc@b ai35cd@b*) (cons* (ai30a9@bless 'let) '() ai35cc@b ai35cd@b*)) ai35ca@ls/false) (let ((ai35d0@t ai35c8@t)) (let ((ai35d2@ls/false (ai30f3@syntax-dispatch ai35d0@t '(_ #(each (any any)) any . each-any)))) (if ai35d2@ls/false (apply (lambda (ai35d4@lhs* ai35d5@rhs* ai35d6@b ai35d7@b*) (ai30a9@bless (let ai35e4@f ((ai35dc@lhs* ai35d4@lhs*) (ai35dd@rhs* ai35d5@rhs*) (ai35de@old* '()) (ai35df@new* '())) (if (null? ai35dc@lhs*) (cons 'let (cons (map list ai35de@old* ai35df@new*) (cons ai35d6@b ai35d7@b*))) (let ((ai35e6@t (car ai35dc@lhs*))) (let ((ai35e8@ls/false (ai30f3@syntax-dispatch ai35e6@t 'each-any))) (if ai35e8@ls/false (apply (lambda (ai35ea@x*) (call-with-values (lambda () (ai35c7@rename* ai35ea@x* ai35de@old* ai35df@new*)) (lambda (ai35f2@ai35ed ai35f3@ai35ef ai35f4@ai35f1) (let ((ai35f8@new* ai35f4@ai35f1) (ai35f9@old* ai35f3@ai35ef) (ai35fa@y* ai35f2@ai35ed)) (list 'call-with-values (list 'lambda '() (car ai35dd@rhs*)) (list 'lambda ai35fa@y* (ai35e4@f (cdr ai35dc@lhs*) (cdr ai35dd@rhs*) ai35f9@old* ai35f8@new*))))))) ai35e8@ls/false) (let ((ai35fe@t ai35e6@t)) (let ((ai3600@ls/false (ai30f3@syntax-dispatch ai35fe@t '#(each+ any () any)))) (if ai3600@ls/false (apply (lambda (ai3602@x* ai3603@x) (call-with-values (lambda () (ai35c5@rename ai3603@x ai35de@old* ai35df@new*)) (lambda (ai3606@y ai3607@old* ai3608@new*) (call-with-values (lambda () (ai35c7@rename* ai3602@x* ai3607@old* ai3608@new*)) (lambda (ai360c@y* ai360d@old* ai360e@new*) (list 'call-with-values (list 'lambda '() (car ai35dd@rhs*)) (list 'lambda (append ai360c@y* ai3606@y) (ai35e4@f (cdr ai35dc@lhs*) (cdr ai35dd@rhs*) ai360d@old* ai360e@new*)))))))) ai3600@ls/false) (let ((ai3612@t ai35fe@t)) (let ((ai3614@ls/false (ai30f3@syntax-dispatch ai3612@t 'any))) (if ai3614@ls/false (apply (lambda (ai3616@others) (ai31d3@syntax-violation '#f '"malformed bindings" ai35c2@stx ai3616@others)) ai3614@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3612@t)))))))))))))) ai35d2@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai35d0@t))))))))))) (set! ai4ba8@ai30b1@let-values-macro ai30b1@let-values-macro) (set! ai30b3@let*-values-macro (lambda (ai3632@stx) (let ((ai3635@check '#f)) (begin (set! ai3635@check (lambda (ai3664@x*) (if (not (null? ai3664@x*)) (let ((ai3666@x (car ai3664@x*))) (begin (if (not (ai2eec@id? ai3666@x)) (ai31d3@syntax-violation '#f '"not an identifier" ai3632@stx ai3666@x) (void)) (ai3635@check (cdr ai3664@x*)) (if (ai2ef8@bound-id-member? ai3666@x (cdr ai3664@x*)) (ai31d3@syntax-violation '#f '"duplicate identifier" ai3632@stx ai3666@x) (void)))) (void)))) (let ((ai3636@t ai3632@stx)) (let ((ai3638@ls/false (ai30f3@syntax-dispatch ai3636@t '(_ () any . each-any)))) (if ai3638@ls/false (apply (lambda (ai363a@b ai363b@b*) (cons* (ai30a9@bless 'let) '() ai363a@b ai363b@b*)) ai3638@ls/false) (let ((ai363e@t ai3636@t)) (let ((ai3640@ls/false (ai30f3@syntax-dispatch ai363e@t '(_ #(each (any any)) any . each-any)))) (if ai3640@ls/false (apply (lambda (ai3642@lhs* ai3643@rhs* ai3644@b ai3645@b*) (ai30a9@bless (let ai364e@f ((ai364a@lhs* ai3642@lhs*) (ai364b@rhs* ai3643@rhs*)) (if (null? ai364a@lhs*) (cons 'begin (cons ai3644@b ai3645@b*)) (let ((ai3650@t (car ai364a@lhs*))) (let ((ai3652@ls/false (ai30f3@syntax-dispatch ai3650@t 'each-any))) (if ai3652@ls/false (apply (lambda (ai3654@x*) (begin (ai3635@check ai3654@x*) (list 'call-with-values (list 'lambda '() (car ai364b@rhs*)) (list 'lambda ai3654@x* (ai364e@f (cdr ai364a@lhs*) (cdr ai364b@rhs*)))))) ai3652@ls/false) (let ((ai3656@t ai3650@t)) (let ((ai3658@ls/false (ai30f3@syntax-dispatch ai3656@t '#(each+ any () any)))) (if ai3658@ls/false (apply (lambda (ai365a@x* ai365b@x) (begin (ai3635@check (cons ai365b@x ai365a@x*)) (list 'call-with-values (list 'lambda '() (car ai364b@rhs*)) (list 'lambda (append ai365a@x* ai365b@x) (ai364e@f (cdr ai364a@lhs*) (cdr ai364b@rhs*)))))) ai3658@ls/false) (let ((ai365e@t ai3656@t)) (let ((ai3660@ls/false (ai30f3@syntax-dispatch ai365e@t 'any))) (if ai3660@ls/false (apply (lambda (ai3662@others) (ai31d3@syntax-violation '#f '"malformed bindings" ai3632@stx ai3662@others)) ai3660@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai365e@t)))))))))))))) ai3640@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai363e@t))))))))))) (set! ai4ba9@ai30b3@let*-values-macro ai30b3@let*-values-macro) (set! ai30b5@trace-lambda-macro (lambda (ai3668@stx) (let ((ai366a@t ai3668@stx)) (let ((ai366c@ls/false (ai30f3@syntax-dispatch ai366a@t '(_ any each-any any . each-any)))) (if ai366c@ls/false (apply (lambda (ai366e@who ai366f@fmls ai3670@b ai3671@b*) (if (ai2ef4@valid-bound-ids? ai366f@fmls) (ai30a9@bless (list 'make-traced-procedure (list 'quote ai366e@who) (cons 'lambda (cons ai366f@fmls (cons ai3670@b ai3671@b*))))) (ai30ad@invalid-fmls-error ai3668@stx ai366f@fmls))) ai366c@ls/false) (let ((ai3676@t ai366a@t)) (let ((ai3678@ls/false (ai30f3@syntax-dispatch ai3676@t '(_ any #(each+ any () any) any . each-any)))) (if ai3678@ls/false (apply (lambda (ai367a@who ai367b@fmls ai367c@last ai367d@b ai367e@b*) (if (ai2ef4@valid-bound-ids? (cons ai367c@last ai367b@fmls)) (ai30a9@bless (list 'make-traced-procedure (list 'quote ai367a@who) (cons 'lambda (cons (append ai367b@fmls ai367c@last) (cons ai367d@b ai367e@b*))))) (ai30ad@invalid-fmls-error ai3668@stx (append ai367b@fmls ai367c@last)))) ai3678@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3676@t))))))))) (set! ai4baa@ai30b5@trace-lambda-macro ai30b5@trace-lambda-macro) (set! ai30b7@trace-define-macro (lambda (ai3684@stx) (let ((ai3686@t ai3684@stx)) (let ((ai3688@ls/false (ai30f3@syntax-dispatch ai3686@t '(_ (any . each-any) any . each-any)))) (if ai3688@ls/false (apply (lambda (ai368a@who ai368b@fmls ai368c@b ai368d@b*) (if (ai2ef4@valid-bound-ids? ai368b@fmls) (ai30a9@bless (list 'define ai368a@who (list 'make-traced-procedure (list 'quote ai368a@who) (cons 'lambda (cons ai368b@fmls (cons ai368c@b ai368d@b*)))))) (ai30ad@invalid-fmls-error ai3684@stx ai368b@fmls))) ai3688@ls/false) (let ((ai3692@t ai3686@t)) (let ((ai3694@ls/false (ai30f3@syntax-dispatch ai3692@t '(_ (any . #(each+ any () any)) any . each-any)))) (if ai3694@ls/false (apply (lambda (ai3696@who ai3697@fmls ai3698@last ai3699@b ai369a@b*) (if (ai2ef4@valid-bound-ids? (cons ai3698@last ai3697@fmls)) (ai30a9@bless (list 'define ai3696@who (list 'make-traced-procedure (list 'quote ai3696@who) (cons 'lambda (cons (append ai3697@fmls ai3698@last) (cons ai3699@b ai369a@b*)))))) (ai30ad@invalid-fmls-error ai3684@stx (append ai3697@fmls ai3698@last)))) ai3694@ls/false) (let ((ai36a0@t ai3692@t)) (let ((ai36a2@ls/false (ai30f3@syntax-dispatch ai36a0@t '(_ any any)))) (if ai36a2@ls/false (apply (lambda (ai36a4@who ai36a5@expr) (if (ai2eec@id? ai36a4@who) (ai30a9@bless (list 'define ai36a4@who (list 'let (list (list 'v ai36a5@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote ai36a4@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (ai31d3@syntax-violation '#f '"invalid name" ai3684@stx))) ai36a2@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai36a0@t)))))))))))) (set! ai4bab@ai30b7@trace-define-macro ai30b7@trace-define-macro) (set! ai30b9@trace-define-syntax-macro (lambda (ai36a8@stx) (let ((ai36aa@t ai36a8@stx)) (let ((ai36ac@ls/false (ai30f3@syntax-dispatch ai36aa@t '(_ any any)))) (if ai36ac@ls/false (apply (lambda (ai36ae@who ai36af@expr) (if (ai2eec@id? ai36ae@who) (ai30a9@bless (list 'define-syntax ai36ae@who (list 'make-traced-macro (list 'quote ai36ae@who) ai36af@expr))) (ai31d3@syntax-violation '#f '"invalid name" ai36a8@stx))) ai36ac@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai36aa@t)))))) (set! ai4bac@ai30b9@trace-define-syntax-macro ai30b9@trace-define-syntax-macro) (set! ai30bb@trace-let/rec-syntax (lambda (ai36b2@who) (lambda (ai36b4@stx) (let ((ai36b6@t ai36b4@stx)) (let ((ai36b8@ls/false (ai30f3@syntax-dispatch ai36b6@t '(_ #(each (any any)) any . each-any)))) (if ai36b8@ls/false (apply (lambda (ai36ba@lhs* ai36bb@rhs* ai36bc@b ai36bd@b*) (if (ai2ef4@valid-bound-ids? ai36ba@lhs*) (let ((ai36c2@rhs* (map (lambda (ai36c4@lhs ai36c5@rhs) (list 'make-traced-macro (list 'quote ai36c4@lhs) ai36c5@rhs)) ai36ba@lhs* ai36bb@rhs*))) (ai30a9@bless (cons ai36b2@who (cons (map list ai36ba@lhs* ai36c2@rhs*) (cons ai36bc@b ai36bd@b*))))) (ai30ad@invalid-fmls-error ai36b4@stx ai36ba@lhs*))) ai36b8@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai36b6@t))))))) (set! ai4bad@ai30bb@trace-let/rec-syntax ai30bb@trace-let/rec-syntax) (set! ai30bd@trace-let-syntax-macro (ai30bb@trace-let/rec-syntax 'let-syntax)) (set! ai4bae@ai30bd@trace-let-syntax-macro ai30bd@trace-let-syntax-macro) (set! ai30bf@trace-letrec-syntax-macro (ai30bb@trace-let/rec-syntax 'letrec-syntax)) (set! ai4baf@ai30bf@trace-letrec-syntax-macro ai30bf@trace-letrec-syntax-macro) (set! ai30c1@guard-macro (lambda (ai36c8@x) (let ((ai36cb@gen-clauses '#f)) (begin (set! ai36cb@gen-clauses (lambda (ai36e2@con ai36e3@outerk ai36e4@clause*) (let ((ai36e9@f '#f) (ai36eb@f* '#f)) (begin (set! ai36e9@f (lambda (ai3722@x ai3723@k) (let ((ai3726@t ai3722@x)) (let ((ai3728@ls/false (ai30f3@syntax-dispatch ai3726@t '(any #(scheme-id =>) any)))) (if ai3728@ls/false (apply (lambda (ai372a@e ai372b@p) (let ((ai372e@t (gensym))) (list 'let (list (list ai372e@t ai372a@e)) (list 'if ai372e@t (list ai372b@p ai372e@t) ai3723@k)))) ai3728@ls/false) (let ((ai3730@t ai3726@t)) (let ((ai3732@ls/false (ai30f3@syntax-dispatch ai3730@t '(any)))) (if ai3732@ls/false (apply (lambda (ai3734@e) (let ((ai3736@t (gensym))) (list 'let (list (list ai3736@t ai3734@e)) (list 'if ai3736@t ai3736@t ai3723@k)))) ai3732@ls/false) (let ((ai3738@t ai3730@t)) (let ((ai373a@ls/false (ai30f3@syntax-dispatch ai3738@t '(any any . each-any)))) (if ai373a@ls/false (apply (lambda (ai373c@e ai373d@v ai373e@v*) (list 'if ai373c@e (cons 'begin (cons ai373d@v ai373e@v*)) ai3723@k)) ai373a@ls/false) (let ((ai3742@t ai3738@t)) (let ((ai3744@ls/false (ai30f3@syntax-dispatch ai3742@t '_))) (if ai3744@ls/false (apply (lambda () (ai31d3@syntax-violation '#f '"invalid guard clause" ai3722@x)) ai3744@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3742@t))))))))))))))) (set! ai36eb@f* (lambda (ai36f8@x*) (let ((ai36fa@t ai36f8@x*)) (let ((ai36fc@ls/false (ai30f3@syntax-dispatch ai36fa@t '()))) (if ai36fc@ls/false (apply (lambda () (let ((ai36fe@g (gensym))) (values (list ai36fe@g (list 'lambda '() (list 'raise-continuable ai36e2@con))) ai36fe@g))) ai36fc@ls/false) (let ((ai3700@t ai36fa@t)) (let ((ai3702@ls/false (ai30f3@syntax-dispatch ai3700@t '((#(scheme-id else) any . each-any))))) (if ai3702@ls/false (apply (lambda (ai3704@e ai3705@e*) (values (cons 'begin (cons ai3704@e ai3705@e*)) '#f)) ai3702@ls/false) (let ((ai3708@t ai3700@t)) (let ((ai370a@ls/false (ai30f3@syntax-dispatch ai3708@t '(any . any)))) (if ai370a@ls/false (apply (lambda (ai370c@cls ai370d@cls*) (call-with-values (lambda () (ai36eb@f* ai370d@cls*)) (lambda (ai3714@ai3711 ai3715@ai3713) (let ((ai3718@g ai3715@ai3713) (ai3719@e ai3714@ai3711)) (values (ai36e9@f ai370c@cls ai3719@e) ai3718@g))))) ai370a@ls/false) (let ((ai371c@t ai3708@t)) (let ((ai371e@ls/false (ai30f3@syntax-dispatch ai371c@t 'any))) (if ai371e@ls/false (apply (lambda (ai3720@others) (ai31d3@syntax-violation '#f '"invalid guard clause" ai3720@others)) ai371e@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai371c@t))))))))))))))) (call-with-values (lambda () (ai36eb@f* ai36e4@clause*)) (lambda (ai36f0@ai36ed ai36f1@ai36ef) (let ((ai36f4@raisek ai36f1@ai36ef) (ai36f5@code ai36f0@ai36ed)) (if ai36f4@raisek (list (list 'call/cc (list 'lambda (list ai36f4@raisek) (list ai36e3@outerk (list 'lambda '() ai36f5@code))))) (list ai36e3@outerk (list 'lambda '() ai36f5@code)))))))))) (let ((ai36cc@t ai36c8@x)) (let ((ai36ce@ls/false (ai30f3@syntax-dispatch ai36cc@t '(_ (any . each-any) any . each-any)))) (if (and ai36ce@ls/false (apply (lambda (ai36d0@con ai36d1@clause* ai36d2@b ai36d3@b*) (ai2eec@id? ai36d0@con)) ai36ce@ls/false)) (apply (lambda (ai36d8@con ai36d9@clause* ai36da@b ai36db@b*) (let ((ai36e0@outerk (gensym))) (ai30a9@bless (list (list 'call/cc (list 'lambda (list ai36e0@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list ai36d8@con) (ai36cb@gen-clauses ai36d8@con ai36e0@outerk ai36d9@clause*)) (cons 'lambda (cons '() (cons ai36da@b ai36db@b*))))))))))) ai36ce@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai36cc@t)))))))) (set! ai4bb0@ai30c1@guard-macro ai30c1@guard-macro) (set! ai30c3@define-enumeration-macro (lambda (ai3746@stx) (let ((ai3749@set? '#f) (ai374b@remove-dups '#f)) (begin (set! ai3749@set? (lambda (ai3762@x) (or (null? ai3762@x) (and (not (memq (car ai3762@x) (cdr ai3762@x))) (ai3749@set? (cdr ai3762@x)))))) (set! ai374b@remove-dups (lambda (ai3760@ls) (if (null? ai3760@ls) '() (cons (car ai3760@ls) (ai374b@remove-dups (remq (car ai3760@ls) (cdr ai3760@ls))))))) (let ((ai374c@t ai3746@stx)) (let ((ai374e@ls/false (ai30f3@syntax-dispatch ai374c@t '(_ any each-any any)))) (if (and ai374e@ls/false (apply (lambda (ai3750@name ai3751@id* ai3752@maker) (and (ai2eec@id? ai3750@name) (ai2eec@id? ai3752@maker) (for-all ai2eec@id? ai3751@id*))) ai374e@ls/false)) (apply (lambda (ai3756@name ai3757@id* ai3758@maker) (let ((ai375c@name* (ai374b@remove-dups (ai31d9@syntax->datum ai3757@id*))) (ai375d@mk (gensym))) (ai30a9@bless (list 'begin (list 'define ai375d@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote ai375c@name*)))) (list 'define-syntax ai3756@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote ai375c@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote ai3756@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax ai3758@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote ai3758@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote ai375c@name*)) (cons 'syntax-violation (cons (list 'quote ai3758@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons ai375d@mk '('(n* ...))))))))))))) ai374e@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai374c@t)))))))) (set! ai4bb1@ai30c3@define-enumeration-macro ai30c3@define-enumeration-macro) (set! ai30c5@time-macro (lambda (ai3764@stx) (let ((ai3766@t ai3764@stx)) (let ((ai3768@ls/false (ai30f3@syntax-dispatch ai3766@t '(_ any)))) (if ai3768@ls/false (apply (lambda (ai376a@expr) (ai30a9@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() ai376a@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) ai3768@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3766@t)))))) (set! ai4bb2@ai30c5@time-macro ai30c5@time-macro) (set! ai30c7@delay-macro (lambda (ai376c@stx) (let ((ai376e@t ai376c@stx)) (let ((ai3770@ls/false (ai30f3@syntax-dispatch ai376e@t '(_ any)))) (if ai3770@ls/false (apply (lambda (ai3772@expr) (ai30a9@bless (list 'make-promise (list 'lambda '() ai3772@expr)))) ai3770@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai376e@t)))))) (set! ai4bb3@ai30c7@delay-macro ai30c7@delay-macro) (set! ai30c9@assert-macro (lambda (ai3774@stx) (let ((ai3776@t ai3774@stx)) (let ((ai3778@ls/false (ai30f3@syntax-dispatch ai3776@t '(_ any)))) (if ai3778@ls/false (apply (lambda (ai377a@expr) (let ((ai377c@pos (or (ai31cb@expression-position ai3774@stx) (ai31cb@expression-position ai377a@expr)))) (ai30a9@bless (list 'let (list (list 'x ai377a@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote ai377a@expr) (list 'quote ai377c@pos))))))) ai3778@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3776@t)))))) (set! ai4bb4@ai30c9@assert-macro ai30c9@assert-macro) (set! ai30cb@endianness-macro (lambda (ai377e@stx) (let ((ai3780@t ai377e@stx)) (let ((ai3782@ls/false (ai30f3@syntax-dispatch ai3780@t '(_ any)))) (if ai3782@ls/false (apply (lambda (ai3784@e) (let ((ai3786@t (ai31d9@syntax->datum ai3784@e))) (if (memv ai3786@t '(little)) (ai30a9@bless ''little) (if (memv ai3786@t '(big)) (ai30a9@bless ''big) (ai31d3@syntax-violation '#f '"endianness must be big or little" ai377e@stx))))) ai3782@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3780@t)))))) (set! ai4bb5@ai30cb@endianness-macro ai30cb@endianness-macro) (set! ai30cd@identifier-syntax-macro (lambda (ai3788@stx) (let ((ai378a@t ai3788@stx)) (let ((ai378c@ls/false (ai30f3@syntax-dispatch ai378a@t '(_ any)))) (if ai378c@ls/false (apply (lambda (ai378e@expr) (ai30a9@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax ai378e@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax ai378e@expr) '((syntax (e* ...)))))))))) ai378c@ls/false) (let ((ai3790@t ai378a@t)) (let ((ai3792@ls/false (ai30f3@syntax-dispatch ai3790@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and ai3792@ls/false (apply (lambda (ai3794@id1 ai3795@expr1 ai3796@id2 ai3797@expr2 ai3798@expr3) (and (ai2eec@id? ai3794@id1) (ai2eec@id? ai3796@id2) (ai2eec@id? ai3797@expr2))) ai3792@ls/false)) (apply (lambda (ai379e@id1 ai379f@expr1 ai37a0@id2 ai37a1@expr2 ai37a2@expr3) (ai30a9@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax ai379f@expr1)) (list (list 'set! 'id ai37a1@expr2) (list 'syntax ai37a2@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons ai379f@expr1 '(e* ...))))))))) ai3792@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3790@t))))))))) (set! ai4bb6@ai30cd@identifier-syntax-macro ai30cd@identifier-syntax-macro) (set! ai30cf@do-macro (lambda (ai37a8@stx) (let ((ai37ab@bind '#f)) (begin (set! ai37ab@bind (lambda (ai37c2@x) (let ((ai37c4@t ai37c2@x)) (let ((ai37c6@ls/false (ai30f3@syntax-dispatch ai37c4@t '(any any)))) (if ai37c6@ls/false (apply (lambda (ai37c8@x ai37c9@init) (list ai37c8@x ai37c9@init ai37c8@x)) ai37c6@ls/false) (let ((ai37cc@t ai37c4@t)) (let ((ai37ce@ls/false (ai30f3@syntax-dispatch ai37cc@t '(any any any)))) (if ai37ce@ls/false (apply (lambda (ai37d0@x ai37d1@init ai37d2@step) (list ai37d0@x ai37d1@init ai37d2@step)) ai37ce@ls/false) (let ((ai37d6@t ai37cc@t)) (let ((ai37d8@ls/false (ai30f3@syntax-dispatch ai37d6@t '_))) (if ai37d8@ls/false (apply (lambda () (ai31d3@syntax-violation '#f '"invalid binding" ai37a8@stx)) ai37d8@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai37d6@t)))))))))))) (let ((ai37ac@t ai37a8@stx)) (let ((ai37ae@ls/false (ai30f3@syntax-dispatch ai37ac@t '(_ each-any (any . each-any) . each-any)))) (if ai37ae@ls/false (apply (lambda (ai37b0@binding* ai37b1@test ai37b2@expr* ai37b3@command*) (let ((ai37b8@t (map ai37ab@bind ai37b0@binding*))) (let ((ai37ba@ls/false (ai30f3@syntax-dispatch ai37b8@t '#(each (any any any))))) (if ai37ba@ls/false (apply (lambda (ai37bc@x* ai37bd@init* ai37be@step*) (if (ai2ef4@valid-bound-ids? ai37bc@x*) (ai30a9@bless (list 'letrec (list (list 'loop (list 'lambda ai37bc@x* (list 'if ai37b1@test (cons 'begin (cons '(if #f #f) ai37b2@expr*)) (cons 'begin (append ai37b3@command* (list (cons 'loop ai37be@step*)))))))) (cons 'loop ai37bd@init*))) (ai31d3@syntax-violation '#f '"invalid bindings" ai37a8@stx))) ai37ba@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai37b8@t))))) ai37ae@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai37ac@t)))))))) (set! ai4bb7@ai30cf@do-macro ai30cf@do-macro) (set! ai30d1@let*-macro (lambda (ai37da@stx) (let ((ai37dc@t ai37da@stx)) (let ((ai37de@ls/false (ai30f3@syntax-dispatch ai37dc@t '(_ #(each (any any)) any . each-any)))) (if (and ai37de@ls/false (apply (lambda (ai37e0@lhs* ai37e1@rhs* ai37e2@b ai37e3@b*) (for-all ai2eec@id? ai37e0@lhs*)) ai37de@ls/false)) (apply (lambda (ai37e8@lhs* ai37e9@rhs* ai37ea@b ai37eb@b*) (ai30a9@bless (let ai37f2@f ((ai37f0@x* (map list ai37e8@lhs* ai37e9@rhs*))) (if (null? ai37f0@x*) (cons 'let (cons '() (cons ai37ea@b ai37eb@b*))) (list 'let (list (car ai37f0@x*)) (ai37f2@f (cdr ai37f0@x*))))))) ai37de@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai37dc@t)))))) (set! ai4bb8@ai30d1@let*-macro ai30d1@let*-macro) (set! ai30d3@or-macro (lambda (ai37f4@stx) (let ((ai37f6@t ai37f4@stx)) (let ((ai37f8@ls/false (ai30f3@syntax-dispatch ai37f6@t '(_)))) (if ai37f8@ls/false (apply (lambda () '#f) ai37f8@ls/false) (let ((ai37fa@t ai37f6@t)) (let ((ai37fc@ls/false (ai30f3@syntax-dispatch ai37fa@t '(_ any . each-any)))) (if ai37fc@ls/false (apply (lambda (ai37fe@e ai37ff@e*) (ai30a9@bless (let ai3806@f ((ai3802@e ai37fe@e) (ai3803@e* ai37ff@e*)) (if (null? ai3803@e*) (list 'begin '#f ai3802@e) (list 'let (list (list 't ai3802@e)) (list 'if 't 't (ai3806@f (car ai3803@e*) (cdr ai3803@e*)))))))) ai37fc@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai37fa@t))))))))) (set! ai4bb9@ai30d3@or-macro ai30d3@or-macro) (set! ai30d5@and-macro (lambda (ai3808@stx) (let ((ai380a@t ai3808@stx)) (let ((ai380c@ls/false (ai30f3@syntax-dispatch ai380a@t '(_)))) (if ai380c@ls/false (apply (lambda () '#t) ai380c@ls/false) (let ((ai380e@t ai380a@t)) (let ((ai3810@ls/false (ai30f3@syntax-dispatch ai380e@t '(_ any . each-any)))) (if ai3810@ls/false (apply (lambda (ai3812@e ai3813@e*) (ai30a9@bless (let ai381a@f ((ai3816@e ai3812@e) (ai3817@e* ai3813@e*)) (if (null? ai3817@e*) (list 'begin '#f ai3816@e) (cons 'if (cons ai3816@e (cons (ai381a@f (car ai3817@e*) (cdr ai3817@e*)) '(#f)))))))) ai3810@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai380e@t))))))))) (set! ai4bba@ai30d5@and-macro ai30d5@and-macro) (set! ai30d7@cond-macro (lambda (ai381c@stx) (let ((ai381e@t ai381c@stx)) (let ((ai3820@ls/false (ai30f3@syntax-dispatch ai381e@t '(_ any . each-any)))) (if ai3820@ls/false (apply (lambda (ai3822@cls ai3823@cls*) (ai30a9@bless (let ai382a@f ((ai3826@cls ai3822@cls) (ai3827@cls* ai3823@cls*)) (if (null? ai3827@cls*) (let ((ai382c@t ai3826@cls)) (let ((ai382e@ls/false (ai30f3@syntax-dispatch ai382c@t '(#(scheme-id else) any . each-any)))) (if ai382e@ls/false (apply (lambda (ai3830@e ai3831@e*) (cons 'begin (cons ai3830@e ai3831@e*))) ai382e@ls/false) (let ((ai3834@t ai382c@t)) (let ((ai3836@ls/false (ai30f3@syntax-dispatch ai3834@t '(any #(scheme-id =>) any)))) (if ai3836@ls/false (apply (lambda (ai3838@e ai3839@p) (list 'let (list (list 't ai3838@e)) (list 'if 't (cons ai3839@p '(t))))) ai3836@ls/false) (let ((ai383c@t ai3834@t)) (let ((ai383e@ls/false (ai30f3@syntax-dispatch ai383c@t '(any)))) (if ai383e@ls/false (apply (lambda (ai3840@e) (cons 'or (cons ai3840@e '((if #f #f))))) ai383e@ls/false) (let ((ai3842@t ai383c@t)) (let ((ai3844@ls/false (ai30f3@syntax-dispatch ai3842@t '(any . each-any)))) (if ai3844@ls/false (apply (lambda (ai3846@e ai3847@e*) (list 'if ai3846@e (cons 'begin ai3847@e*))) ai3844@ls/false) (let ((ai384a@t ai3842@t)) (let ((ai384c@ls/false (ai30f3@syntax-dispatch ai384a@t '_))) (if ai384c@ls/false (apply (lambda () (ai31d3@syntax-violation '#f '"invalid last clause" ai381c@stx)) ai384c@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai384a@t)))))))))))))))) (let ((ai384e@t ai3826@cls)) (let ((ai3850@ls/false (ai30f3@syntax-dispatch ai384e@t '(#(scheme-id else) any . each-any)))) (if ai3850@ls/false (apply (lambda (ai3852@e ai3853@e*) (ai31d3@syntax-violation '#f '"incorrect position of keyword else" ai381c@stx)) ai3850@ls/false) (let ((ai3856@t ai384e@t)) (let ((ai3858@ls/false (ai30f3@syntax-dispatch ai3856@t '(any #(scheme-id =>) any)))) (if ai3858@ls/false (apply (lambda (ai385a@e ai385b@p) (list 'let (list (list 't ai385a@e)) (list 'if 't (cons ai385b@p '(t)) (ai382a@f (car ai3827@cls*) (cdr ai3827@cls*))))) ai3858@ls/false) (let ((ai385e@t ai3856@t)) (let ((ai3860@ls/false (ai30f3@syntax-dispatch ai385e@t '(any)))) (if ai3860@ls/false (apply (lambda (ai3862@e) (list 'or ai3862@e (ai382a@f (car ai3827@cls*) (cdr ai3827@cls*)))) ai3860@ls/false) (let ((ai3864@t ai385e@t)) (let ((ai3866@ls/false (ai30f3@syntax-dispatch ai3864@t '(any . each-any)))) (if ai3866@ls/false (apply (lambda (ai3868@e ai3869@e*) (list 'if ai3868@e (cons 'begin ai3869@e*) (ai382a@f (car ai3827@cls*) (cdr ai3827@cls*)))) ai3866@ls/false) (let ((ai386c@t ai3864@t)) (let ((ai386e@ls/false (ai30f3@syntax-dispatch ai386c@t '_))) (if ai386e@ls/false (apply (lambda () (ai31d3@syntax-violation '#f '"invalid last clause" ai381c@stx)) ai386e@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai386c@t)))))))))))))))))))) ai3820@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai381e@t)))))) (set! ai4bbb@ai30d7@cond-macro ai30d7@cond-macro) (set! ai30d9@do-include (lambda (ai3870@stx ai3871@id ai3872@filename) (let ((ai3876@filename (ai2f00@stx->datum ai3872@filename))) (begin (if (not (and (string? ai3876@filename) (ai2eec@id? ai3871@id))) (ai31d3@syntax-violation '#f '"invalid syntax" ai3870@stx) (void)) (cons (ai30a9@bless 'begin) (with-input-from-file ai3876@filename (lambda () (let ai387a@f ((ai3878@ls '())) (let ((ai387c@x (ai2a17@ai28e7@read-annotated))) (if (eof-object? ai387c@x) (reverse ai3878@ls) (ai387a@f (cons (ai2ecc@datum->stx ai3871@id ai387c@x) ai3878@ls)))))))))))) (set! ai4bbc@ai30d9@do-include ai30d9@do-include) (set! ai30db@include-macro (lambda (ai387e@e) (let ((ai3880@t ai387e@e)) (let ((ai3882@ls/false (ai30f3@syntax-dispatch ai3880@t '(any any)))) (if ai3882@ls/false (apply (lambda (ai3884@id ai3885@filename) (ai30d9@do-include ai387e@e ai3884@id ai3885@filename)) ai3882@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3880@t)))))) (set! ai4bbd@ai30db@include-macro ai30db@include-macro) (set! ai30dd@include-into-macro (lambda (ai3888@e) (let ((ai388a@t ai3888@e)) (let ((ai388c@ls/false (ai30f3@syntax-dispatch ai388a@t '(_ any any)))) (if ai388c@ls/false (apply (lambda (ai388e@id ai388f@filename) (ai30d9@do-include ai3888@e ai388e@id ai388f@filename)) ai388c@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai388a@t)))))) (set! ai4bbe@ai30dd@include-into-macro ai30dd@include-into-macro) (set! ai30df@syntax-rules-macro (lambda (ai3892@e) (let ((ai3894@t ai3892@e)) (let ((ai3896@ls/false (ai30f3@syntax-dispatch ai3894@t '(_ each-any . #(each (any any)))))) (if ai3896@ls/false (apply (lambda (ai3898@lits ai3899@pat* ai389a@tmp*) (begin (ai30f9@verify-literals ai3898@lits ai3892@e) (ai30a9@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons ai3898@lits (map (lambda (ai389e@pat ai389f@tmp) (let ((ai38a2@t ai389e@pat)) (let ((ai38a4@ls/false (ai30f3@syntax-dispatch ai38a2@t '(_ . any)))) (if ai38a4@ls/false (apply (lambda (ai38a6@rest) (list (cons 'g ai38a6@rest) (list 'syntax ai389f@tmp))) ai38a4@ls/false) (let ((ai38a8@t ai38a2@t)) (let ((ai38aa@ls/false (ai30f3@syntax-dispatch ai38a8@t '_))) (if ai38aa@ls/false (apply (lambda () (ai31d3@syntax-violation '#f '"invalid syntax-rules pattern" ai3892@e ai389e@pat)) ai38aa@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai38a8@t)))))))) ai3899@pat* ai389a@tmp*)))))))) ai3896@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3894@t)))))) (set! ai4bbf@ai30df@syntax-rules-macro ai30df@syntax-rules-macro) (set! ai30e1@quasiquote-macro (let ((ai38ad@datum '#f) (ai38c9@quasicons* '#f) (ai38cb@quasicons '#f) (ai38cd@quasiappend '#f) (ai38cf@quasivector '#f) (ai38d1@vquasi '#f) (ai38d3@quasi '#f)) (begin (set! ai38ad@datum (lambda (ai39ae@x) (list (ai307b@scheme-stx 'quote) (ai2ed4@mkstx ai39ae@x '() '() '())))) (set! ai38c9@quasicons* (lambda (ai39a6@x ai39a7@y) (let ai39ac@f ((ai39aa@x ai39a6@x)) (if (null? ai39aa@x) ai39a7@y (ai38cb@quasicons (car ai39aa@x) (ai39ac@f (cdr ai39aa@x))))))) (set! ai38cb@quasicons (lambda (ai3980@x ai3981@y) (let ((ai3984@t ai3981@y)) (let ((ai3986@ls/false (ai30f3@syntax-dispatch ai3984@t '(#(scheme-id quote) any)))) (if ai3986@ls/false (apply (lambda (ai3988@dy) (let ((ai398a@t ai3980@x)) (let ((ai398c@ls/false (ai30f3@syntax-dispatch ai398a@t '(#(scheme-id quote) any)))) (if ai398c@ls/false (apply (lambda (ai398e@dx) (list (ai307b@scheme-stx 'quote) (cons ai398e@dx ai3988@dy))) ai398c@ls/false) (let ((ai3990@t ai398a@t)) (let ((ai3992@ls/false (ai30f3@syntax-dispatch ai3990@t '_))) (if ai3992@ls/false (apply (lambda () (let ((ai3994@t ai3988@dy)) (let ((ai3996@ls/false (ai30f3@syntax-dispatch ai3994@t '()))) (if ai3996@ls/false (apply (lambda () (list (ai307b@scheme-stx 'list) ai3980@x)) ai3996@ls/false) (let ((ai3998@t ai3994@t)) (let ((ai399a@ls/false (ai30f3@syntax-dispatch ai3998@t '_))) (if ai399a@ls/false (apply (lambda () (list (ai307b@scheme-stx 'cons) ai3980@x ai3981@y)) ai399a@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3998@t)))))))) ai3992@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3990@t)))))))) ai3986@ls/false) (let ((ai399c@t ai3984@t)) (let ((ai399e@ls/false (ai30f3@syntax-dispatch ai399c@t '(#(scheme-id list) . each-any)))) (if ai399e@ls/false (apply (lambda (ai39a0@stuff) (cons* (ai307b@scheme-stx 'list) ai3980@x ai39a0@stuff)) ai399e@ls/false) (let ((ai39a2@t ai399c@t)) (let ((ai39a4@ls/false (ai30f3@syntax-dispatch ai39a2@t '_))) (if ai39a4@ls/false (apply (lambda () (list (ai307b@scheme-stx 'cons) ai3980@x ai3981@y)) ai39a4@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai39a2@t)))))))))))) (set! ai38cd@quasiappend (lambda (ai3966@x ai3967@y) (let ((ai396a@ls (let ai396e@f ((ai396c@x ai3966@x)) (if (null? ai396c@x) (let ((ai3970@t ai3967@y)) (let ((ai3972@ls/false (ai30f3@syntax-dispatch ai3970@t '(#(scheme-id quote) ())))) (if ai3972@ls/false (apply (lambda () '()) ai3972@ls/false) (let ((ai3974@t ai3970@t)) (let ((ai3976@ls/false (ai30f3@syntax-dispatch ai3974@t '_))) (if ai3976@ls/false (apply (lambda () (list ai3967@y)) ai3976@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3974@t))))))) (let ((ai3978@t (car ai396c@x))) (let ((ai397a@ls/false (ai30f3@syntax-dispatch ai3978@t '(#(scheme-id quote) ())))) (if ai397a@ls/false (apply (lambda () (ai396e@f (cdr ai396c@x))) ai397a@ls/false) (let ((ai397c@t ai3978@t)) (let ((ai397e@ls/false (ai30f3@syntax-dispatch ai397c@t '_))) (if ai397e@ls/false (apply (lambda () (cons (car ai396c@x) (ai396e@f (cdr ai396c@x)))) ai397e@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai397c@t))))))))))) (if (null? ai396a@ls) (list (ai307b@scheme-stx 'quote) '()) (if (null? (cdr ai396a@ls)) (car ai396a@ls) (cons* (ai307b@scheme-stx 'append) ai396a@ls)))))) (set! ai38cf@quasivector (lambda (ai3934@x) (let ((ai3936@pat-x ai3934@x)) (let ((ai3938@t ai3936@pat-x)) (let ((ai393a@ls/false (ai30f3@syntax-dispatch ai3938@t '(#(scheme-id quote) each-any)))) (if ai393a@ls/false (apply (lambda (ai393c@x*) (list (ai307b@scheme-stx 'quote) (list->vector ai393c@x*))) ai393a@ls/false) (let ((ai393e@t ai3938@t)) (let ((ai3940@ls/false (ai30f3@syntax-dispatch ai393e@t '_))) (if ai3940@ls/false (apply (lambda () (let ai3948@f ((ai3942@x ai3934@x) (ai3943@k (lambda (ai3946@ls) (cons* (ai307b@scheme-stx 'vector) ai3946@ls)))) (let ((ai394a@t ai3942@x)) (let ((ai394c@ls/false (ai30f3@syntax-dispatch ai394a@t '(#(scheme-id quote) each-any)))) (if ai394c@ls/false (apply (lambda (ai394e@x*) (ai3943@k (map (lambda (ai3950@x) (list (ai307b@scheme-stx 'quote) ai3950@x)) ai394e@x*))) ai394c@ls/false) (let ((ai3952@t ai394a@t)) (let ((ai3954@ls/false (ai30f3@syntax-dispatch ai3952@t '(#(scheme-id list) . each-any)))) (if ai3954@ls/false (apply (lambda (ai3956@x*) (ai3943@k ai3956@x*)) ai3954@ls/false) (let ((ai3958@t ai3952@t)) (let ((ai395a@ls/false (ai30f3@syntax-dispatch ai3958@t '(#(scheme-id cons) any any)))) (if ai395a@ls/false (apply (lambda (ai395c@x ai395d@y) (ai3948@f ai395d@y (lambda (ai3960@ls) (ai3943@k (cons ai395c@x ai3960@ls))))) ai395a@ls/false) (let ((ai3962@t ai3958@t)) (let ((ai3964@ls/false (ai30f3@syntax-dispatch ai3962@t '_))) (if ai3964@ls/false (apply (lambda () (list (ai307b@scheme-stx 'list->vector) ai3936@pat-x)) ai3964@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3962@t))))))))))))))) ai3940@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai393e@t)))))))))) (set! ai38d1@vquasi (lambda (ai3912@p ai3913@lev) (let ((ai3916@t ai3912@p)) (let ((ai3918@ls/false (ai30f3@syntax-dispatch ai3916@t '(any . any)))) (if ai3918@ls/false (apply (lambda (ai391a@p ai391b@q) (let ((ai391e@t ai391a@p)) (let ((ai3920@ls/false (ai30f3@syntax-dispatch ai391e@t '(#(scheme-id unquote) . each-any)))) (if ai3920@ls/false (apply (lambda (ai3922@p) (if (= ai3913@lev '0) (ai38c9@quasicons* ai3922@p (ai38d1@vquasi ai391b@q ai3913@lev)) (ai38cb@quasicons (ai38cb@quasicons (ai38ad@datum 'unquote) (ai38d3@quasi ai3922@p (- ai3913@lev '1))) (ai38d1@vquasi ai391b@q ai3913@lev)))) ai3920@ls/false) (let ((ai3924@t ai391e@t)) (let ((ai3926@ls/false (ai30f3@syntax-dispatch ai3924@t '(#(scheme-id unquote-splicing) . each-any)))) (if ai3926@ls/false (apply (lambda (ai3928@p) (if (= ai3913@lev '0) (ai38cd@quasiappend ai3928@p (ai38d1@vquasi ai391b@q ai3913@lev)) (ai38cb@quasicons (ai38cb@quasicons (ai38ad@datum 'unquote-splicing) (ai38d3@quasi ai3928@p (- ai3913@lev '1))) (ai38d1@vquasi ai391b@q ai3913@lev)))) ai3926@ls/false) (let ((ai392a@t ai3924@t)) (let ((ai392c@ls/false (ai30f3@syntax-dispatch ai392a@t 'any))) (if ai392c@ls/false (apply (lambda (ai392e@p) (ai38cb@quasicons (ai38d3@quasi ai392e@p ai3913@lev) (ai38d1@vquasi ai391b@q ai3913@lev))) ai392c@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai392a@t))))))))))) ai3918@ls/false) (let ((ai3930@t ai3916@t)) (let ((ai3932@ls/false (ai30f3@syntax-dispatch ai3930@t '()))) (if ai3932@ls/false (apply (lambda () (list (ai307b@scheme-stx 'quote) '())) ai3932@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3930@t))))))))) (set! ai38d3@quasi (lambda (ai38dc@p ai38dd@lev) (let ((ai38e0@t ai38dc@p)) (let ((ai38e2@ls/false (ai30f3@syntax-dispatch ai38e0@t '(#(scheme-id unquote) any)))) (if ai38e2@ls/false (apply (lambda (ai38e4@p) (if (= ai38dd@lev '0) ai38e4@p (ai38cb@quasicons (ai38ad@datum 'unquote) (ai38d3@quasi (list ai38e4@p) (- ai38dd@lev '1))))) ai38e2@ls/false) (let ((ai38e6@t ai38e0@t)) (let ((ai38e8@ls/false (ai30f3@syntax-dispatch ai38e6@t '((#(scheme-id unquote) . each-any) . any)))) (if ai38e8@ls/false (apply (lambda (ai38ea@p ai38eb@q) (if (= ai38dd@lev '0) (ai38c9@quasicons* ai38ea@p (ai38d3@quasi ai38eb@q ai38dd@lev)) (ai38cb@quasicons (ai38cb@quasicons (ai38ad@datum 'unquote) (ai38d3@quasi ai38ea@p (- ai38dd@lev '1))) (ai38d3@quasi ai38eb@q ai38dd@lev)))) ai38e8@ls/false) (let ((ai38ee@t ai38e6@t)) (let ((ai38f0@ls/false (ai30f3@syntax-dispatch ai38ee@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if ai38f0@ls/false (apply (lambda (ai38f2@p ai38f3@q) (if (= ai38dd@lev '0) (ai38cd@quasiappend ai38f2@p (ai38d3@quasi ai38f3@q ai38dd@lev)) (ai38cb@quasicons (ai38cb@quasicons (ai38ad@datum 'unquote-splicing) (ai38d3@quasi ai38f2@p (- ai38dd@lev '1))) (ai38d3@quasi ai38f3@q ai38dd@lev)))) ai38f0@ls/false) (let ((ai38f6@t ai38ee@t)) (let ((ai38f8@ls/false (ai30f3@syntax-dispatch ai38f6@t '(#(scheme-id quasiquote) any)))) (if ai38f8@ls/false (apply (lambda (ai38fa@p) (ai38cb@quasicons (ai38ad@datum 'quasiquote) (ai38d3@quasi (list ai38fa@p) (+ ai38dd@lev '1)))) ai38f8@ls/false) (let ((ai38fc@t ai38f6@t)) (let ((ai38fe@ls/false (ai30f3@syntax-dispatch ai38fc@t '(any . any)))) (if ai38fe@ls/false (apply (lambda (ai3900@p ai3901@q) (ai38cb@quasicons (ai38d3@quasi ai3900@p ai38dd@lev) (ai38d3@quasi ai3901@q ai38dd@lev))) ai38fe@ls/false) (let ((ai3904@t ai38fc@t)) (let ((ai3906@ls/false (ai30f3@syntax-dispatch ai3904@t '#(vector each-any)))) (if (and ai3906@ls/false (apply (lambda (ai3908@x) (not (ai2eb8@stx? ai3908@x))) ai3906@ls/false)) (apply (lambda (ai390a@x) (ai38cf@quasivector (ai38d1@vquasi ai390a@x ai38dd@lev))) ai3906@ls/false) (let ((ai390c@t ai3904@t)) (let ((ai390e@ls/false (ai30f3@syntax-dispatch ai390c@t 'any))) (if ai390e@ls/false (apply (lambda (ai3910@p) (list (ai307b@scheme-stx 'quote) ai3910@p)) ai390e@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai390c@t)))))))))))))))))))))))) (lambda (ai38d4@x) (let ((ai38d6@t ai38d4@x)) (let ((ai38d8@ls/false (ai30f3@syntax-dispatch ai38d6@t '(_ any)))) (if ai38d8@ls/false (apply (lambda (ai38da@e) (ai38d3@quasi ai38da@e '0)) ai38d8@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai38d6@t)))))))) (set! ai4bc0@ai30e1@quasiquote-macro ai30e1@quasiquote-macro) (set! ai30e3@quasisyntax-macro (let ((ai39b1@quasi '#f)) (begin (set! ai39b1@quasi (lambda (ai39cc@p ai39cd@lev) (let ((ai39d0@t ai39cc@p)) (let ((ai39d2@ls/false (ai30f3@syntax-dispatch ai39d0@t '(#(scheme-id unsyntax) any)))) (if ai39d2@ls/false (apply (lambda (ai39d4@p) (if (= ai39cd@lev '0) (let ((ai39d6@g (gensym))) (values (list ai39d6@g) (list ai39d4@p) ai39d6@g)) (call-with-values (lambda () (ai39b1@quasi ai39d4@p (- ai39cd@lev '1))) (lambda (ai39de@ai39d9 ai39df@ai39db ai39e0@ai39dd) (let ((ai39e4@p ai39e0@ai39dd) (ai39e5@rhs* ai39df@ai39db) (ai39e6@lhs* ai39de@ai39d9)) (values ai39e6@lhs* ai39e5@rhs* (list 'unsyntax ai39e4@p))))))) ai39d2@ls/false) (let ((ai39ea@t ai39d0@t)) (let ((ai39ec@ls/false (ai30f3@syntax-dispatch ai39ea@t '#(scheme-id unsyntax)))) (if (and ai39ec@ls/false (apply (lambda () (= ai39cd@lev '0)) ai39ec@ls/false)) (apply (lambda () (ai31d3@syntax-violation '#f '"incorrect use of unsyntax" ai39cc@p)) ai39ec@ls/false) (let ((ai39ee@t ai39ea@t)) (let ((ai39f0@ls/false (ai30f3@syntax-dispatch ai39ee@t '((#(scheme-id unsyntax) . each-any) . any)))) (if ai39f0@ls/false (apply (lambda (ai39f2@p* ai39f3@q) (call-with-values (lambda () (ai39b1@quasi ai39f3@q ai39cd@lev)) (lambda (ai39fc@ai39f7 ai39fd@ai39f9 ai39fe@ai39fb) (let ((ai3a02@q ai39fe@ai39fb) (ai3a03@rhs* ai39fd@ai39f9) (ai3a04@lhs* ai39fc@ai39f7)) (if (= ai39cd@lev '0) (let ((ai3a08@g* (map (lambda (ai3a0a@x) (gensym)) ai39f2@p*))) (values (append ai3a08@g* ai3a04@lhs*) (append ai39f2@p* ai3a03@rhs*) (append ai3a08@g* ai3a02@q))) (call-with-values (lambda () (ai39b1@quasi ai39f2@p* (- ai39cd@lev '1))) (lambda (ai3a12@ai3a0d ai3a13@ai3a0f ai3a14@ai3a11) (let ((ai3a18@p* ai3a14@ai3a11) (ai3a19@rhs2* ai3a13@ai3a0f) (ai3a1a@lhs2* ai3a12@ai3a0d)) (values (append ai3a1a@lhs2* ai3a04@lhs*) (append ai3a19@rhs2* ai3a03@rhs*) (cons (cons 'unsyntax ai3a18@p*) ai3a02@q)))))))))) ai39f0@ls/false) (let ((ai3a1e@t ai39ee@t)) (let ((ai3a20@ls/false (ai30f3@syntax-dispatch ai3a1e@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if ai3a20@ls/false (apply (lambda (ai3a22@p* ai3a23@q) (call-with-values (lambda () (ai39b1@quasi ai3a23@q ai39cd@lev)) (lambda (ai3a2c@ai3a27 ai3a2d@ai3a29 ai3a2e@ai3a2b) (let ((ai3a32@q ai3a2e@ai3a2b) (ai3a33@rhs* ai3a2d@ai3a29) (ai3a34@lhs* ai3a2c@ai3a27)) (if (= ai39cd@lev '0) (let ((ai3a38@g* (map (lambda (ai3a3a@x) (gensym)) ai3a22@p*))) (values (append (map (lambda (ai3a3c@g) (cons ai3a3c@g '(...))) ai3a38@g*) ai3a34@lhs*) (append ai3a22@p* ai3a33@rhs*) (append (apply append (map (lambda (ai3a3e@g) (cons ai3a3e@g '(...))) ai3a38@g*)) ai3a32@q))) (call-with-values (lambda () (ai39b1@quasi ai3a22@p* (- ai39cd@lev '1))) (lambda (ai3a46@ai3a41 ai3a47@ai3a43 ai3a48@ai3a45) (let ((ai3a4c@p* ai3a48@ai3a45) (ai3a4d@rhs2* ai3a47@ai3a43) (ai3a4e@lhs2* ai3a46@ai3a41)) (values (append ai3a4e@lhs2* ai3a34@lhs*) (append ai3a4d@rhs2* ai3a33@rhs*) (cons (cons 'unsyntax-splicing ai3a4c@p*) ai3a32@q)))))))))) ai3a20@ls/false) (let ((ai3a52@t ai3a1e@t)) (let ((ai3a54@ls/false (ai30f3@syntax-dispatch ai3a52@t '#(scheme-id unsyntax-splicing)))) (if (and ai3a54@ls/false (apply (lambda () (= ai39cd@lev '0)) ai3a54@ls/false)) (apply (lambda () (ai31d3@syntax-violation '#f '"incorrect use of unsyntax-splicing" ai39cc@p)) ai3a54@ls/false) (let ((ai3a56@t ai3a52@t)) (let ((ai3a58@ls/false (ai30f3@syntax-dispatch ai3a56@t '(#(scheme-id quasisyntax) any)))) (if ai3a58@ls/false (apply (lambda (ai3a5a@p) (call-with-values (lambda () (ai39b1@quasi ai3a5a@p (+ ai39cd@lev '1))) (lambda (ai3a62@ai3a5d ai3a63@ai3a5f ai3a64@ai3a61) (let ((ai3a68@p ai3a64@ai3a61) (ai3a69@rhs* ai3a63@ai3a5f) (ai3a6a@lhs* ai3a62@ai3a5d)) (values ai3a6a@lhs* ai3a69@rhs* (list 'quasisyntax ai3a68@p)))))) ai3a58@ls/false) (let ((ai3a6e@t ai3a56@t)) (let ((ai3a70@ls/false (ai30f3@syntax-dispatch ai3a6e@t '(any . any)))) (if ai3a70@ls/false (apply (lambda (ai3a72@p ai3a73@q) (call-with-values (lambda () (ai39b1@quasi ai3a72@p ai39cd@lev)) (lambda (ai3a82@ai3a77 ai3a83@ai3a79 ai3a84@ai3a7b) (call-with-values (lambda () (ai39b1@quasi ai3a73@q ai39cd@lev)) (lambda (ai3a88@ai3a7d ai3a89@ai3a7f ai3a8a@ai3a81) (let ((ai3a8e@q ai3a8a@ai3a81) (ai3a8f@rhs2* ai3a89@ai3a7f) (ai3a90@lhs2* ai3a88@ai3a7d) (ai3a91@p ai3a84@ai3a7b) (ai3a92@rhs* ai3a83@ai3a79) (ai3a93@lhs* ai3a82@ai3a77)) (values (append ai3a90@lhs2* ai3a93@lhs*) (append ai3a8f@rhs2* ai3a92@rhs*) (cons ai3a91@p ai3a8e@q)))))))) ai3a70@ls/false) (let ((ai3a9a@t ai3a6e@t)) (let ((ai3a9c@ls/false (ai30f3@syntax-dispatch ai3a9a@t '#(vector each-any)))) (if ai3a9c@ls/false (apply (lambda (ai3a9e@x*) (call-with-values (lambda () (ai39b1@quasi ai3a9e@x* ai39cd@lev)) (lambda (ai3aa6@ai3aa1 ai3aa7@ai3aa3 ai3aa8@ai3aa5) (let ((ai3aac@x* ai3aa8@ai3aa5) (ai3aad@rhs* ai3aa7@ai3aa3) (ai3aae@lhs* ai3aa6@ai3aa1)) (values ai3aae@lhs* ai3aad@rhs* (list->vector ai3aac@x*)))))) ai3a9c@ls/false) (let ((ai3ab2@t ai3a9a@t)) (let ((ai3ab4@ls/false (ai30f3@syntax-dispatch ai3ab2@t '_))) (if ai3ab4@ls/false (apply (lambda () (values '() '() ai39cc@p)) ai3ab4@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3ab2@t)))))))))))))))))))))))))))))) (lambda (ai39b2@x) (let ((ai39b4@t ai39b2@x)) (let ((ai39b6@ls/false (ai30f3@syntax-dispatch ai39b4@t '(_ any)))) (if ai39b6@ls/false (apply (lambda (ai39b8@e) (call-with-values (lambda () (ai39b1@quasi ai39b8@e '0)) (lambda (ai39c0@ai39bb ai39c1@ai39bd ai39c2@ai39bf) (let ((ai39c6@v ai39c2@ai39bf) (ai39c7@rhs* ai39c1@ai39bd) (ai39c8@lhs* ai39c0@ai39bb)) (ai30a9@bless (list 'syntax-case (cons 'list ai39c7@rhs*) '() (list ai39c8@lhs* (list 'syntax ai39c6@v)))))))) ai39b6@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai39b4@t)))))))) (set! ai4bc1@ai30e3@quasisyntax-macro ai30e3@quasisyntax-macro) (set! ai30e5@define-struct-macro (lambda (ai3ab6@stx) (ai31d3@syntax-violation '#f '"define-struct not supported" ai3ab6@stx))) (set! ai4bc2@ai30e5@define-struct-macro ai30e5@define-struct-macro) (set! ai30e7@define-record-type-macro (lambda (ai3ab8@x) (let ((ai3abb@id '#f) (ai3abd@get-record-name '#f) (ai3abf@get-record-constructor-name '#f) (ai3ac1@get-record-predicate-name '#f) (ai3ac3@get-clause '#f) (ai3ac5@foo-rtd-code '#f) (ai3ac7@parent-rtd-code '#f) (ai3ac9@parent-rcd-code '#f) (ai3acb@foo-rcd-code '#f) (ai3acd@get-protocol-code '#f) (ai3acf@get-fields '#f) (ai3ad1@get-mutator-indices '#f) (ai3ad3@get-mutators '#f) (ai3ad5@get-accessors '#f) (ai3ad7@enumerate '#f) (ai3ad9@do-define-record '#f) (ai3adb@verify-clauses '#f)) (begin (set! ai3abb@id (lambda (ai3cae@ctxt . ai3cb0@str*) (ai31d7@datum->syntax ai3cae@ctxt (string->symbol (apply string-append (map (lambda (ai3cb2@x) (if (symbol? ai3cb2@x) (symbol->string ai3cb2@x) (if (string? ai3cb2@x) ai3cb2@x (assertion-violation 'define-record-type '"BUG")))) ai3cb0@str*)))))) (set! ai3abd@get-record-name (lambda (ai3c9c@spec) (let ((ai3c9e@t ai3c9c@spec)) (let ((ai3ca0@ls/false (ai30f3@syntax-dispatch ai3c9e@t '(any any any)))) (if ai3ca0@ls/false (apply (lambda (ai3ca2@foo ai3ca3@make-foo ai3ca4@foo?) ai3ca2@foo) ai3ca0@ls/false) (let ((ai3ca8@t ai3c9e@t)) (let ((ai3caa@ls/false (ai30f3@syntax-dispatch ai3ca8@t 'any))) (if ai3caa@ls/false (apply (lambda (ai3cac@foo) ai3cac@foo) ai3caa@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3ca8@t))))))))) (set! ai3abf@get-record-constructor-name (lambda (ai3c88@spec) (let ((ai3c8a@t ai3c88@spec)) (let ((ai3c8c@ls/false (ai30f3@syntax-dispatch ai3c8a@t '(any any any)))) (if ai3c8c@ls/false (apply (lambda (ai3c8e@foo ai3c8f@make-foo ai3c90@foo?) ai3c8f@make-foo) ai3c8c@ls/false) (let ((ai3c94@t ai3c8a@t)) (let ((ai3c96@ls/false (ai30f3@syntax-dispatch ai3c94@t 'any))) (if (and ai3c96@ls/false (apply (lambda (ai3c98@foo) (ai2eec@id? ai3c98@foo)) ai3c96@ls/false)) (apply (lambda (ai3c9a@foo) (ai3abb@id ai3c9a@foo '"make-" (ai2f00@stx->datum ai3c9a@foo))) ai3c96@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3c94@t))))))))) (set! ai3ac1@get-record-predicate-name (lambda (ai3c74@spec) (let ((ai3c76@t ai3c74@spec)) (let ((ai3c78@ls/false (ai30f3@syntax-dispatch ai3c76@t '(any any any)))) (if ai3c78@ls/false (apply (lambda (ai3c7a@foo ai3c7b@make-foo ai3c7c@foo?) ai3c7c@foo?) ai3c78@ls/false) (let ((ai3c80@t ai3c76@t)) (let ((ai3c82@ls/false (ai30f3@syntax-dispatch ai3c80@t 'any))) (if (and ai3c82@ls/false (apply (lambda (ai3c84@foo) (ai2eec@id? ai3c84@foo)) ai3c82@ls/false)) (apply (lambda (ai3c86@foo) (ai3abb@id ai3c86@foo (ai2f00@stx->datum ai3c86@foo) '"?")) ai3c82@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3c80@t))))))))) (set! ai3ac3@get-clause (lambda (ai3c62@id ai3c63@ls) (let ((ai3c66@t ai3c63@ls)) (let ((ai3c68@ls/false (ai30f3@syntax-dispatch ai3c66@t '()))) (if ai3c68@ls/false (apply (lambda () '#f) ai3c68@ls/false) (let ((ai3c6a@t ai3c66@t)) (let ((ai3c6c@ls/false (ai30f3@syntax-dispatch ai3c6a@t '((any . any) . any)))) (if ai3c6c@ls/false (apply (lambda (ai3c6e@x ai3c6f@rest ai3c70@ls) (if (ai2ef2@free-id=? (ai30a9@bless ai3c62@id) ai3c6e@x) (cons ai3c6e@x ai3c6f@rest) (ai3ac3@get-clause ai3c62@id ai3c70@ls))) ai3c6c@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3c6a@t))))))))) (set! ai3ac5@foo-rtd-code (lambda (ai3c10@name ai3c11@clause* ai3c12@parent-rtd-code) (let ((ai3c17@convert-field-spec* '#f)) (begin (set! ai3c17@convert-field-spec* (lambda (ai3c48@ls) (list->vector (map (lambda (ai3c4a@x) (let ((ai3c4c@t ai3c4a@x)) (let ((ai3c4e@ls/false (ai30f3@syntax-dispatch ai3c4c@t '(#(scheme-id mutable) any . any)))) (if ai3c4e@ls/false (apply (lambda (ai3c50@name ai3c51@rest) (list 'mutable ai3c50@name)) ai3c4e@ls/false) (let ((ai3c54@t ai3c4c@t)) (let ((ai3c56@ls/false (ai30f3@syntax-dispatch ai3c54@t '(#(scheme-id immutable) any . any)))) (if ai3c56@ls/false (apply (lambda (ai3c58@name ai3c59@rest) (list 'immutable ai3c58@name)) ai3c56@ls/false) (let ((ai3c5c@t ai3c54@t)) (let ((ai3c5e@ls/false (ai30f3@syntax-dispatch ai3c5c@t 'any))) (if ai3c5e@ls/false (apply (lambda (ai3c60@name) (list 'immutable ai3c60@name)) ai3c5e@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3c5c@t))))))))))) ai3c48@ls)))) (let ((ai3c18@uid-code (let ((ai3c20@t (ai3ac3@get-clause 'nongenerative ai3c11@clause*))) (let ((ai3c22@ls/false (ai30f3@syntax-dispatch ai3c20@t '(_)))) (if ai3c22@ls/false (apply (lambda () (list 'quote (gensym))) ai3c22@ls/false) (let ((ai3c24@t ai3c20@t)) (let ((ai3c26@ls/false (ai30f3@syntax-dispatch ai3c24@t '(_ any)))) (if ai3c26@ls/false (apply (lambda (ai3c28@uid) (list 'quote ai3c28@uid)) ai3c26@ls/false) (let ((ai3c2a@t ai3c24@t)) (let ((ai3c2c@ls/false (ai30f3@syntax-dispatch ai3c2a@t '_))) (if ai3c2c@ls/false (apply (lambda () '#f) ai3c2c@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3c2a@t))))))))))) (ai3c19@sealed? (let ((ai3c2e@t (ai3ac3@get-clause 'sealed ai3c11@clause*))) (let ((ai3c30@ls/false (ai30f3@syntax-dispatch ai3c2e@t '(_ #(atom #t))))) (if ai3c30@ls/false (apply (lambda () '#t) ai3c30@ls/false) (let ((ai3c32@t ai3c2e@t)) (let ((ai3c34@ls/false (ai30f3@syntax-dispatch ai3c32@t '_))) (if ai3c34@ls/false (apply (lambda () '#f) ai3c34@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3c32@t)))))))) (ai3c1a@opaque? (let ((ai3c36@t (ai3ac3@get-clause 'opaque ai3c11@clause*))) (let ((ai3c38@ls/false (ai30f3@syntax-dispatch ai3c36@t '(_ #(atom #t))))) (if ai3c38@ls/false (apply (lambda () '#t) ai3c38@ls/false) (let ((ai3c3a@t ai3c36@t)) (let ((ai3c3c@ls/false (ai30f3@syntax-dispatch ai3c3a@t '_))) (if ai3c3c@ls/false (apply (lambda () '#f) ai3c3c@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3c3a@t)))))))) (ai3c1b@fields (let ((ai3c3e@t (ai3ac3@get-clause 'fields ai3c11@clause*))) (let ((ai3c40@ls/false (ai30f3@syntax-dispatch ai3c3e@t '(_ . each-any)))) (if ai3c40@ls/false (apply (lambda (ai3c42@field-spec*) (list 'quote (ai3c17@convert-field-spec* ai3c42@field-spec*))) ai3c40@ls/false) (let ((ai3c44@t ai3c3e@t)) (let ((ai3c46@ls/false (ai30f3@syntax-dispatch ai3c44@t '_))) (if ai3c46@ls/false (apply (lambda () ''#()) ai3c46@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3c44@t))))))))) (ai30a9@bless (list 'make-record-type-descriptor (list 'quote ai3c10@name) ai3c12@parent-rtd-code ai3c18@uid-code ai3c19@sealed? ai3c1a@opaque? ai3c1b@fields))))))) (set! ai3ac7@parent-rtd-code (lambda (ai3bf8@clause*) (let ((ai3bfa@t (ai3ac3@get-clause 'parent ai3bf8@clause*))) (let ((ai3bfc@ls/false (ai30f3@syntax-dispatch ai3bfa@t '(_ any)))) (if ai3bfc@ls/false (apply (lambda (ai3bfe@name) (list 'record-type-descriptor ai3bfe@name)) ai3bfc@ls/false) (let ((ai3c00@t ai3bfa@t)) (let ((ai3c02@ls/false (ai30f3@syntax-dispatch ai3c00@t '#(atom #f)))) (if ai3c02@ls/false (apply (lambda () (let ((ai3c04@t (ai3ac3@get-clause 'parent-rtd ai3bf8@clause*))) (let ((ai3c06@ls/false (ai30f3@syntax-dispatch ai3c04@t '(_ any any)))) (if ai3c06@ls/false (apply (lambda (ai3c08@rtd ai3c09@rcd) ai3c08@rtd) ai3c06@ls/false) (let ((ai3c0c@t ai3c04@t)) (let ((ai3c0e@ls/false (ai30f3@syntax-dispatch ai3c0c@t '#(atom #f)))) (if ai3c0e@ls/false (apply (lambda () '#f) ai3c0e@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3c0c@t)))))))) ai3c02@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3c00@t))))))))) (set! ai3ac9@parent-rcd-code (lambda (ai3be0@clause*) (let ((ai3be2@t (ai3ac3@get-clause 'parent ai3be0@clause*))) (let ((ai3be4@ls/false (ai30f3@syntax-dispatch ai3be2@t '(_ any)))) (if ai3be4@ls/false (apply (lambda (ai3be6@name) (list 'record-constructor-descriptor ai3be6@name)) ai3be4@ls/false) (let ((ai3be8@t ai3be2@t)) (let ((ai3bea@ls/false (ai30f3@syntax-dispatch ai3be8@t '#(atom #f)))) (if ai3bea@ls/false (apply (lambda () (let ((ai3bec@t (ai3ac3@get-clause 'parent-rtd ai3be0@clause*))) (let ((ai3bee@ls/false (ai30f3@syntax-dispatch ai3bec@t '(_ any any)))) (if ai3bee@ls/false (apply (lambda (ai3bf0@rtd ai3bf1@rcd) ai3bf1@rcd) ai3bee@ls/false) (let ((ai3bf4@t ai3bec@t)) (let ((ai3bf6@ls/false (ai30f3@syntax-dispatch ai3bf4@t '#(atom #f)))) (if ai3bf6@ls/false (apply (lambda () '#f) ai3bf6@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3bf4@t)))))))) ai3bea@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3be8@t))))))))) (set! ai3acb@foo-rcd-code (lambda (ai3bd8@clause* ai3bd9@foo-rtd ai3bda@protocol ai3bdb@parent-rcd-code) (list 'make-record-constructor-descriptor ai3bd9@foo-rtd ai3bdb@parent-rcd-code ai3bda@protocol))) (set! ai3acd@get-protocol-code (lambda (ai3bcc@clause*) (let ((ai3bce@t (ai3ac3@get-clause 'protocol ai3bcc@clause*))) (let ((ai3bd0@ls/false (ai30f3@syntax-dispatch ai3bce@t '(_ any)))) (if ai3bd0@ls/false (apply (lambda (ai3bd2@expr) ai3bd2@expr) ai3bd0@ls/false) (let ((ai3bd4@t ai3bce@t)) (let ((ai3bd6@ls/false (ai30f3@syntax-dispatch ai3bd4@t '_))) (if ai3bd6@ls/false (apply (lambda () '#f) ai3bd6@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3bd4@t))))))))) (set! ai3acf@get-fields (lambda (ai3bba@clause*) (let ((ai3bbc@t ai3bba@clause*)) (let ((ai3bbe@ls/false (ai30f3@syntax-dispatch ai3bbc@t '()))) (if ai3bbe@ls/false (apply (lambda () '()) ai3bbe@ls/false) (let ((ai3bc0@t ai3bbc@t)) (let ((ai3bc2@ls/false (ai30f3@syntax-dispatch ai3bc0@t '((#(scheme-id fields) . each-any) . _)))) (if ai3bc2@ls/false (apply (lambda (ai3bc4@f*) ai3bc4@f*) ai3bc2@ls/false) (let ((ai3bc6@t ai3bc0@t)) (let ((ai3bc8@ls/false (ai30f3@syntax-dispatch ai3bc6@t '(_ . any)))) (if ai3bc8@ls/false (apply (lambda (ai3bca@rest) (ai3acf@get-fields ai3bca@rest)) ai3bc8@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3bc6@t)))))))))))) (set! ai3ad1@get-mutator-indices (lambda (ai3ba2@fields) (let ai3ba8@f ((ai3ba4@fields ai3ba2@fields) (ai3ba5@i '0)) (let ((ai3baa@t ai3ba4@fields)) (let ((ai3bac@ls/false (ai30f3@syntax-dispatch ai3baa@t '()))) (if ai3bac@ls/false (apply (lambda () '()) ai3bac@ls/false) (let ((ai3bae@t ai3baa@t)) (let ((ai3bb0@ls/false (ai30f3@syntax-dispatch ai3bae@t '((#(scheme-id mutable) . _) . any)))) (if ai3bb0@ls/false (apply (lambda (ai3bb2@rest) (cons ai3ba5@i (ai3ba8@f ai3bb2@rest (+ ai3ba5@i '1)))) ai3bb0@ls/false) (let ((ai3bb4@t ai3bae@t)) (let ((ai3bb6@ls/false (ai30f3@syntax-dispatch ai3bb4@t '(_ . any)))) (if ai3bb6@ls/false (apply (lambda (ai3bb8@rest) (ai3ba8@f ai3bb8@rest (+ ai3ba5@i '1))) ai3bb6@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3bb4@t))))))))))))) (set! ai3ad3@get-mutators (lambda (ai3b78@foo ai3b79@fields) (let ((ai3b7d@gen-name '#f)) (begin (set! ai3b7d@gen-name (lambda (ai3ba0@x) (ai31d7@datum->syntax ai3b78@foo (string->symbol (string-append (symbol->string (ai31d9@syntax->datum ai3b78@foo)) '"-" (symbol->string (ai31d9@syntax->datum ai3ba0@x)) '"-set!"))))) (let ai3b80@f ((ai3b7e@fields ai3b79@fields)) (let ((ai3b82@t ai3b7e@fields)) (let ((ai3b84@ls/false (ai30f3@syntax-dispatch ai3b82@t '()))) (if ai3b84@ls/false (apply (lambda () '()) ai3b84@ls/false) (let ((ai3b86@t ai3b82@t)) (let ((ai3b88@ls/false (ai30f3@syntax-dispatch ai3b86@t '((#(scheme-id mutable) any any any) . any)))) (if ai3b88@ls/false (apply (lambda (ai3b8a@name ai3b8b@accessor ai3b8c@mutator ai3b8d@rest) (cons ai3b8c@mutator (ai3b80@f ai3b8d@rest))) ai3b88@ls/false) (let ((ai3b92@t ai3b86@t)) (let ((ai3b94@ls/false (ai30f3@syntax-dispatch ai3b92@t '((#(scheme-id mutable) any) . any)))) (if ai3b94@ls/false (apply (lambda (ai3b96@name ai3b97@rest) (cons (ai3b7d@gen-name ai3b96@name) (ai3b80@f ai3b97@rest))) ai3b94@ls/false) (let ((ai3b9a@t ai3b92@t)) (let ((ai3b9c@ls/false (ai30f3@syntax-dispatch ai3b9a@t '(_ . any)))) (if ai3b9c@ls/false (apply (lambda (ai3b9e@rest) (ai3b80@f ai3b9e@rest)) ai3b9c@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3b9a@t)))))))))))))))))) (set! ai3ad5@get-accessors (lambda (ai3b34@foo ai3b35@fields) (let ((ai3b39@gen-name '#f)) (begin (set! ai3b39@gen-name (lambda (ai3b76@x) (ai31d7@datum->syntax ai3b34@foo (string->symbol (string-append (symbol->string (ai31d9@syntax->datum ai3b34@foo)) '"-" (symbol->string (ai31d9@syntax->datum ai3b76@x))))))) (map (lambda (ai3b3a@field) (let ((ai3b3c@t ai3b3a@field)) (let ((ai3b3e@ls/false (ai30f3@syntax-dispatch ai3b3c@t '(#(scheme-id mutable) any any any)))) (if (and ai3b3e@ls/false (apply (lambda (ai3b40@name ai3b41@accessor ai3b42@mutator) (ai2eec@id? ai3b41@accessor)) ai3b3e@ls/false)) (apply (lambda (ai3b46@name ai3b47@accessor ai3b48@mutator) ai3b47@accessor) ai3b3e@ls/false) (let ((ai3b4c@t ai3b3c@t)) (let ((ai3b4e@ls/false (ai30f3@syntax-dispatch ai3b4c@t '(#(scheme-id immutable) any any)))) (if (and ai3b4e@ls/false (apply (lambda (ai3b50@name ai3b51@accessor) (ai2eec@id? ai3b51@accessor)) ai3b4e@ls/false)) (apply (lambda (ai3b54@name ai3b55@accessor) ai3b55@accessor) ai3b4e@ls/false) (let ((ai3b58@t ai3b4c@t)) (let ((ai3b5a@ls/false (ai30f3@syntax-dispatch ai3b58@t '(#(scheme-id mutable) any)))) (if (and ai3b5a@ls/false (apply (lambda (ai3b5c@name) (ai2eec@id? ai3b5c@name)) ai3b5a@ls/false)) (apply (lambda (ai3b5e@name) (ai3b39@gen-name ai3b5e@name)) ai3b5a@ls/false) (let ((ai3b60@t ai3b58@t)) (let ((ai3b62@ls/false (ai30f3@syntax-dispatch ai3b60@t '(#(scheme-id immutable) any)))) (if (and ai3b62@ls/false (apply (lambda (ai3b64@name) (ai2eec@id? ai3b64@name)) ai3b62@ls/false)) (apply (lambda (ai3b66@name) (ai3b39@gen-name ai3b66@name)) ai3b62@ls/false) (let ((ai3b68@t ai3b60@t)) (let ((ai3b6a@ls/false (ai30f3@syntax-dispatch ai3b68@t 'any))) (if (and ai3b6a@ls/false (apply (lambda (ai3b6c@name) (ai2eec@id? ai3b6c@name)) ai3b6a@ls/false)) (apply (lambda (ai3b6e@name) (ai3b39@gen-name ai3b6e@name)) ai3b6a@ls/false) (let ((ai3b70@t ai3b68@t)) (let ((ai3b72@ls/false (ai30f3@syntax-dispatch ai3b70@t 'any))) (if ai3b72@ls/false (apply (lambda (ai3b74@others) (ai31d3@syntax-violation '#f '"invalid field spec" ai3b3a@field)) ai3b72@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3b70@t)))))))))))))))))))) ai3b35@fields))))) (set! ai3ad7@enumerate (lambda (ai3b2c@ls) (let ai3b32@f ((ai3b2e@ls ai3b2c@ls) (ai3b2f@i '0)) (if (null? ai3b2e@ls) '() (cons ai3b2f@i (ai3b32@f (cdr ai3b2e@ls) (+ ai3b2f@i '1))))))) (set! ai3ad9@do-define-record (lambda (ai3b04@namespec ai3b05@clause*) (let ((ai3b08@foo (ai3abd@get-record-name ai3b04@namespec))) (let ((ai3b0a@foo-rtd (gensym))) (let ((ai3b0c@foo-rcd (gensym))) (let ((ai3b0e@protocol (gensym))) (let ((ai3b10@make-foo (ai3abf@get-record-constructor-name ai3b04@namespec))) (let ((ai3b12@fields (ai3acf@get-fields ai3b05@clause*))) (let ((ai3b14@idx* (ai3ad7@enumerate ai3b12@fields))) (let ((ai3b16@foo-x* (ai3ad5@get-accessors ai3b08@foo ai3b12@fields))) (let ((ai3b18@set-foo-x!* (ai3ad3@get-mutators ai3b08@foo ai3b12@fields))) (let ((ai3b1a@set-foo-idx* (ai3ad1@get-mutator-indices ai3b12@fields))) (let ((ai3b1c@foo? (ai3ac1@get-record-predicate-name ai3b04@namespec))) (let ((ai3b1e@foo-rtd-code (ai3ac5@foo-rtd-code ai3b08@foo ai3b05@clause* (ai3ac7@parent-rtd-code ai3b05@clause*)))) (let ((ai3b20@foo-rcd-code (ai3acb@foo-rcd-code ai3b05@clause* ai3b0a@foo-rtd ai3b0e@protocol (ai3ac9@parent-rcd-code ai3b05@clause*)))) (let ((ai3b22@protocol-code (ai3acd@get-protocol-code ai3b05@clause*))) (ai30a9@bless (cons 'begin (cons (list 'define ai3b0a@foo-rtd ai3b1e@foo-rtd-code) (cons (list 'define ai3b0e@protocol ai3b22@protocol-code) (cons (list 'define ai3b0c@foo-rcd ai3b20@foo-rcd-code) (cons (list 'define-syntax ai3b08@foo (list 'list ''$rtd (list 'syntax ai3b0a@foo-rtd) (list 'syntax ai3b0c@foo-rcd))) (cons (list 'define ai3b1c@foo? (list 'record-predicate ai3b0a@foo-rtd)) (cons (list 'define ai3b10@make-foo (list 'record-constructor ai3b0c@foo-rcd)) (append (map (lambda (ai3b24@foo-x ai3b25@idx) (list 'define ai3b24@foo-x (list 'record-accessor ai3b0a@foo-rtd ai3b25@idx))) ai3b16@foo-x* ai3b14@idx*) (map (lambda (ai3b28@set-foo-x! ai3b29@idx) (list 'define ai3b28@set-foo-x! (list 'record-mutator ai3b0a@foo-rtd ai3b29@idx))) ai3b18@set-foo-x!* ai3b1a@set-foo-idx*)))))))))))))))))))))))))) (set! ai3adb@verify-clauses (lambda (ai3ae4@x ai3ae5@cls*) (let ((ai3ae9@valid-kwds '#f) (ai3aeb@free-id-member? '#f)) (begin (set! ai3ae9@valid-kwds (map ai30a9@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! ai3aeb@free-id-member? (lambda (ai3b00@x ai3b01@ls) (and (pair? ai3b01@ls) (or (ai2ef2@free-id=? ai3b00@x (car ai3b01@ls)) (ai3aeb@free-id-member? ai3b00@x (cdr ai3b01@ls)))))) (let ai3af0@f ((ai3aec@cls* ai3ae5@cls*) (ai3aed@seen* '())) (if (not (null? ai3aec@cls*)) (let ((ai3af2@t (car ai3aec@cls*))) (let ((ai3af4@ls/false (ai30f3@syntax-dispatch ai3af2@t '(any . any)))) (if ai3af4@ls/false (apply (lambda (ai3af6@kwd ai3af7@rest) (if (or (not (ai2eec@id? ai3af6@kwd)) (not (ai3aeb@free-id-member? ai3af6@kwd ai3ae9@valid-kwds))) (ai31d3@syntax-violation '#f '"not a valid define-record-type keyword" ai3af6@kwd) (if (ai2ef8@bound-id-member? ai3af6@kwd ai3aed@seen*) (ai31d3@syntax-violation '#f '"duplicate use of keyword " ai3ae4@x ai3af6@kwd) (ai3af0@f (cdr ai3aec@cls*) (cons ai3af6@kwd ai3aed@seen*))))) ai3af4@ls/false) (let ((ai3afa@t ai3af2@t)) (let ((ai3afc@ls/false (ai30f3@syntax-dispatch ai3afa@t 'any))) (if ai3afc@ls/false (apply (lambda (ai3afe@cls) (ai31d3@syntax-violation '#f '"malformed define-record-type clause" ai3afe@cls)) ai3afc@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3afa@t))))))) (void))))))) (let ((ai3adc@t ai3ab8@x)) (let ((ai3ade@ls/false (ai30f3@syntax-dispatch ai3adc@t '(_ any . each-any)))) (if ai3ade@ls/false (apply (lambda (ai3ae0@namespec ai3ae1@clause*) (begin (ai3adb@verify-clauses ai3ab8@x ai3ae1@clause*) (ai3ad9@do-define-record ai3ae0@namespec ai3ae1@clause*))) ai3ade@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3adc@t)))))))) (set! ai4bc3@ai30e7@define-record-type-macro ai30e7@define-record-type-macro) (set! ai30e9@define-condition-type-macro (lambda (ai3cb4@x) (let ((ai3cb7@mkname '#f)) (begin (set! ai3cb7@mkname (lambda (ai3ce4@name ai3ce5@suffix) (ai31d7@datum->syntax ai3ce4@name (string->symbol (string-append (symbol->string (ai31d9@syntax->datum ai3ce4@name)) ai3ce5@suffix))))) (let ((ai3cb8@t ai3cb4@x)) (let ((ai3cba@ls/false (ai30f3@syntax-dispatch ai3cb8@t '(any any any any any . #(each (any any)))))) (if (and ai3cba@ls/false (apply (lambda (ai3cbc@ctxt ai3cbd@name ai3cbe@super ai3cbf@constructor ai3cc0@predicate ai3cc1@field* ai3cc2@accessor*) (and (ai2eec@id? ai3cbd@name) (ai2eec@id? ai3cbe@super) (ai2eec@id? ai3cbf@constructor) (ai2eec@id? ai3cc0@predicate) (for-all ai2eec@id? ai3cc1@field*) (for-all ai2eec@id? ai3cc2@accessor*))) ai3cba@ls/false)) (apply (lambda (ai3cca@ctxt ai3ccb@name ai3ccc@super ai3ccd@constructor ai3cce@predicate ai3ccf@field* ai3cd0@accessor*) (let ((ai3cd8@aux-accessor* (map (lambda (ai3cda@x) (gensym)) ai3cd0@accessor*))) (ai30a9@bless (cons 'begin (cons (cons 'define-record-type (cons (list ai3ccb@name ai3ccd@constructor (gensym)) (cons (list 'parent ai3ccc@super) (cons (cons 'fields (map (lambda (ai3cdc@field ai3cdd@aux) (list 'immutable ai3cdc@field ai3cdd@aux)) ai3ccf@field* ai3cd8@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define ai3cce@predicate (list 'condition-predicate (list 'record-type-descriptor ai3ccb@name))) (map (lambda (ai3ce0@accessor ai3ce1@aux) (list 'define ai3ce0@accessor (list 'condition-accessor (list 'record-type-descriptor ai3ccb@name) ai3ce1@aux))) ai3cd0@accessor* ai3cd8@aux-accessor*))))))) ai3cba@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3cb8@t)))))))) (set! ai4bc4@ai30e9@define-condition-type-macro ai30e9@define-condition-type-macro) (set! ai30eb@incorrect-usage-macro (lambda (ai3ce8@e) (ai31d3@syntax-violation '#f '"incorrect usage of auxiliary keyword" ai3ce8@e))) (set! ai4bc5@ai30eb@incorrect-usage-macro ai30eb@incorrect-usage-macro) (set! ai30ed@parameterize-macro (lambda (ai3cea@e) (let ((ai3cec@t ai3cea@e)) (let ((ai3cee@ls/false (ai30f3@syntax-dispatch ai3cec@t '(_ () any . each-any)))) (if ai3cee@ls/false (apply (lambda (ai3cf0@b ai3cf1@b*) (ai30a9@bless (cons 'let (cons '() (cons ai3cf0@b ai3cf1@b*))))) ai3cee@ls/false) (let ((ai3cf4@t ai3cec@t)) (let ((ai3cf6@ls/false (ai30f3@syntax-dispatch ai3cf4@t '(_ #(each (any any)) any . each-any)))) (if ai3cf6@ls/false (apply (lambda (ai3cf8@olhs* ai3cf9@orhs* ai3cfa@b ai3cfb@b*) (let ((ai3d00@lhs* (ai31c1@generate-temporaries ai3cf8@olhs*)) (ai3d01@rhs* (ai31c1@generate-temporaries ai3cf9@orhs*))) (ai30a9@bless (cons (list 'lambda (append ai3d00@lhs* ai3d01@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (ai3d04@lhs ai3d05@rhs) (list 'let (list (list 't (list ai3d04@lhs))) (list ai3d04@lhs ai3d05@rhs) (cons 'set! (cons ai3d05@rhs '(t))))) ai3d00@lhs* ai3d01@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons ai3cfa@b ai3cfb@b*))) '(swap)))))) (append ai3cf8@olhs* ai3cf9@orhs*))))) ai3cf6@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3cf4@t))))))))) (set! ai4bc6@ai30ed@parameterize-macro ai30ed@parameterize-macro) (set! ai30ef@foreign-call-transformer (lambda (ai3d08@e ai3d09@r ai3d0a@mr) (let ((ai3d0e@t ai3d08@e)) (let ((ai3d10@ls/false (ai30f3@syntax-dispatch ai3d0e@t '(_ any . each-any)))) (if ai3d10@ls/false (apply (lambda (ai3d12@name ai3d13@arg*) (cons 'foreign-call (cons (ai3115@chi-expr ai3d12@name ai3d09@r ai3d0a@mr) (ai3111@chi-expr* ai3d13@arg* ai3d09@r ai3d0a@mr)))) ai3d10@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3d0e@t)))))) (set! ai4bc7@ai30ef@foreign-call-transformer ai30ef@foreign-call-transformer) (set! ai30f1@convert-pattern (lambda (ai3d16@pattern ai3d17@keys) (let ((ai3d1b@cvt* '#f) (ai3d1d@cvt '#f)) (begin (set! ai3d1b@cvt* (lambda (ai3dba@p* ai3dbb@n ai3dbc@ids) (if (null? ai3dba@p*) (values '() ai3dbc@ids) (call-with-values (lambda () (ai3d1b@cvt* (cdr ai3dba@p*) ai3dbb@n ai3dbc@ids)) (lambda (ai3dc4@ai3dc1 ai3dc5@ai3dc3) (let ((ai3dc8@ids ai3dc5@ai3dc3) (ai3dc9@y ai3dc4@ai3dc1)) (call-with-values (lambda () (ai3d1d@cvt (car ai3dba@p*) ai3dbb@n ai3dc8@ids)) (lambda (ai3dd0@ai3dcd ai3dd1@ai3dcf) (let ((ai3dd4@ids ai3dd1@ai3dcf) (ai3dd5@x ai3dd0@ai3dcd)) (values (cons ai3dd5@x ai3dc9@y) ai3dd4@ids)))))))))) (set! ai3d1d@cvt (lambda (ai3d1e@p ai3d1f@n ai3d20@ids) (let ((ai3d24@t ai3d1e@p)) (let ((ai3d26@ls/false (ai30f3@syntax-dispatch ai3d24@t 'any))) (if (and ai3d26@ls/false (apply (lambda (ai3d28@id) (ai2eec@id? ai3d28@id)) ai3d26@ls/false)) (apply (lambda (ai3d2a@id) (if (ai2ef8@bound-id-member? ai3d1e@p ai3d17@keys) (values (vector 'free-id ai3d1e@p) ai3d20@ids) (if (ai2ef2@free-id=? ai3d1e@p (ai307b@scheme-stx '_)) (values '_ ai3d20@ids) (values 'any (cons (cons ai3d1e@p ai3d1f@n) ai3d20@ids))))) ai3d26@ls/false) (let ((ai3d2c@t ai3d24@t)) (let ((ai3d2e@ls/false (ai30f3@syntax-dispatch ai3d2c@t '(any any)))) (if (and ai3d2e@ls/false (apply (lambda (ai3d30@p ai3d31@dots) (ai30f5@ellipsis? ai3d31@dots)) ai3d2e@ls/false)) (apply (lambda (ai3d34@p ai3d35@dots) (call-with-values (lambda () (ai3d1d@cvt ai3d34@p (+ ai3d1f@n '1) ai3d20@ids)) (lambda (ai3d3c@ai3d39 ai3d3d@ai3d3b) (let ((ai3d40@ids ai3d3d@ai3d3b) (ai3d41@p ai3d3c@ai3d39)) (values (if (eq? ai3d41@p 'any) 'each-any (vector 'each ai3d41@p)) ai3d40@ids))))) ai3d2e@ls/false) (let ((ai3d44@t ai3d2c@t)) (let ((ai3d46@ls/false (ai30f3@syntax-dispatch ai3d44@t '(any any . #(each+ any () any))))) (if (and ai3d46@ls/false (apply (lambda (ai3d48@x ai3d49@dots ai3d4a@ys ai3d4b@z) (ai30f5@ellipsis? ai3d49@dots)) ai3d46@ls/false)) (apply (lambda (ai3d50@x ai3d51@dots ai3d52@ys ai3d53@z) (call-with-values (lambda () (ai3d1d@cvt ai3d53@z ai3d1f@n ai3d20@ids)) (lambda (ai3d5c@ai3d59 ai3d5d@ai3d5b) (let ((ai3d60@ids ai3d5d@ai3d5b) (ai3d61@z ai3d5c@ai3d59)) (call-with-values (lambda () (ai3d1b@cvt* ai3d52@ys ai3d1f@n ai3d60@ids)) (lambda (ai3d68@ai3d65 ai3d69@ai3d67) (let ((ai3d6c@ids ai3d69@ai3d67) (ai3d6d@ys ai3d68@ai3d65)) (call-with-values (lambda () (ai3d1d@cvt ai3d50@x (+ ai3d1f@n '1) ai3d6c@ids)) (lambda (ai3d74@ai3d71 ai3d75@ai3d73) (let ((ai3d78@ids ai3d75@ai3d73) (ai3d79@x ai3d74@ai3d71)) (values (vector 'each+ ai3d79@x (reverse ai3d6d@ys) ai3d61@z) ai3d78@ids))))))))))) ai3d46@ls/false) (let ((ai3d7c@t ai3d44@t)) (let ((ai3d7e@ls/false (ai30f3@syntax-dispatch ai3d7c@t '(any . any)))) (if ai3d7e@ls/false (apply (lambda (ai3d80@x ai3d81@y) (call-with-values (lambda () (ai3d1d@cvt ai3d81@y ai3d1f@n ai3d20@ids)) (lambda (ai3d88@ai3d85 ai3d89@ai3d87) (let ((ai3d8c@ids ai3d89@ai3d87) (ai3d8d@y ai3d88@ai3d85)) (call-with-values (lambda () (ai3d1d@cvt ai3d80@x ai3d1f@n ai3d8c@ids)) (lambda (ai3d94@ai3d91 ai3d95@ai3d93) (let ((ai3d98@ids ai3d95@ai3d93) (ai3d99@x ai3d94@ai3d91)) (values (cons ai3d99@x ai3d8d@y) ai3d98@ids)))))))) ai3d7e@ls/false) (let ((ai3d9c@t ai3d7c@t)) (let ((ai3d9e@ls/false (ai30f3@syntax-dispatch ai3d9c@t '()))) (if ai3d9e@ls/false (apply (lambda () (values '() ai3d20@ids)) ai3d9e@ls/false) (let ((ai3da0@t ai3d9c@t)) (let ((ai3da2@ls/false (ai30f3@syntax-dispatch ai3da0@t '#(vector each-any)))) (if (and ai3da2@ls/false (apply (lambda (ai3da4@p) (not (ai2eb8@stx? ai3da4@p))) ai3da2@ls/false)) (apply (lambda (ai3da6@p) (call-with-values (lambda () (ai3d1d@cvt ai3da6@p ai3d1f@n ai3d20@ids)) (lambda (ai3dac@ai3da9 ai3dad@ai3dab) (let ((ai3db0@ids ai3dad@ai3dab) (ai3db1@p ai3dac@ai3da9)) (values (vector 'vector ai3db1@p) ai3db0@ids))))) ai3da2@ls/false) (let ((ai3db4@t ai3da0@t)) (let ((ai3db6@ls/false (ai30f3@syntax-dispatch ai3db4@t 'any))) (if ai3db6@ls/false (apply (lambda (ai3db8@datum) (values (vector 'atom (ai2f00@stx->datum ai3db8@datum)) ai3d20@ids)) ai3db6@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3db4@t)))))))))))))))))))))))) (ai3d1d@cvt ai3d16@pattern '0 '()))))) (set! ai4bc8@ai30f1@convert-pattern ai30f1@convert-pattern) (set! ai30f3@syntax-dispatch (let ((ai3dd9@stx^ '#f) (ai3ddb@match-each '#f) (ai3ddd@match-each+ '#f) (ai3ddf@match-each-any '#f) (ai3de1@match-empty '#f) (ai3de3@combine '#f) (ai3de5@match* '#f) (ai3de7@match '#f)) (begin (set! ai3dd9@stx^ (lambda (ai3eb4@e ai3eb5@m* ai3eb6@s* ai3eb7@ae*) (if (and (null? ai3eb5@m*) (null? ai3eb6@s*) (null? ai3eb7@ae*)) ai3eb4@e (ai2ed4@mkstx ai3eb4@e ai3eb5@m* ai3eb6@s* ai3eb7@ae*)))) (set! ai3ddb@match-each (lambda (ai3e94@e ai3e95@p ai3e96@m* ai3e97@s* ai3e98@ae*) (if (pair? ai3e94@e) (let ((ai3e9e@first (ai3de7@match (car ai3e94@e) ai3e95@p ai3e96@m* ai3e97@s* ai3e98@ae* '()))) (and ai3e9e@first (let ((ai3ea0@rest (ai3ddb@match-each (cdr ai3e94@e) ai3e95@p ai3e96@m* ai3e97@s* ai3e98@ae*))) (and ai3ea0@rest (cons ai3e9e@first ai3ea0@rest))))) (if (null? ai3e94@e) '() (if (ai2eb8@stx? ai3e94@e) (and (not (ai2e72@top-marked? ai3e96@m*)) (call-with-values (lambda () (join-wraps ai3e96@m* ai3e97@s* ai3e98@ae* ai3e94@e)) (lambda (ai3ea8@ai3ea3 ai3ea9@ai3ea5 ai3eaa@ai3ea7) (let ((ai3eae@ae* ai3eaa@ai3ea7) (ai3eaf@s* ai3ea9@ai3ea5) (ai3eb0@m* ai3ea8@ai3ea3)) (ai3ddb@match-each (ai2eba@stx-expr ai3e94@e) ai3e95@p ai3eb0@m* ai3eaf@s* ai3eae@ae*))))) (if (ai2a19@ai28eb@annotation? ai3e94@e) (ai3ddb@match-each (ai2a1b@ai28ef@annotation-expression ai3e94@e) ai3e95@p ai3e96@m* ai3e97@s* ai3e98@ae*) '#f)))))) (set! ai3ddd@match-each+ (lambda (ai3e54@e ai3e55@x-pat ai3e56@y-pat ai3e57@z-pat ai3e58@m* ai3e59@s* ai3e5a@ae* ai3e5b@r) (let ai3e6c@f ((ai3e64@e ai3e54@e) (ai3e65@m* ai3e58@m*) (ai3e66@s* ai3e59@s*) (ai3e67@ae* ai3e5a@ae*)) (if (pair? ai3e64@e) (call-with-values (lambda () (ai3e6c@f (cdr ai3e64@e) ai3e65@m* ai3e66@s* ai3e67@ae*)) (lambda (ai3e74@ai3e6f ai3e75@ai3e71 ai3e76@ai3e73) (let ((ai3e7a@r ai3e76@ai3e73) (ai3e7b@y-pat ai3e75@ai3e71) (ai3e7c@xr* ai3e74@ai3e6f)) (if ai3e7a@r (if (null? ai3e7b@y-pat) (let ((ai3e80@xr (ai3de7@match (car ai3e64@e) ai3e55@x-pat ai3e65@m* ai3e66@s* ai3e67@ae* '()))) (if ai3e80@xr (values (cons ai3e80@xr ai3e7c@xr*) ai3e7b@y-pat ai3e7a@r) (values '#f '#f '#f))) (values '() (cdr ai3e7b@y-pat) (ai3de7@match (car ai3e64@e) (car ai3e7b@y-pat) ai3e65@m* ai3e66@s* ai3e67@ae* ai3e7a@r))) (values '#f '#f '#f))))) (if (ai2eb8@stx? ai3e64@e) (if (ai2e72@top-marked? ai3e65@m*) (values '() ai3e56@y-pat (ai3de7@match ai3e64@e ai3e57@z-pat ai3e65@m* ai3e66@s* ai3e67@ae* ai3e5b@r)) (call-with-values (lambda () (join-wraps ai3e65@m* ai3e66@s* ai3e67@ae* ai3e64@e)) (lambda (ai3e88@ai3e83 ai3e89@ai3e85 ai3e8a@ai3e87) (let ((ai3e8e@ae* ai3e8a@ai3e87) (ai3e8f@s* ai3e89@ai3e85) (ai3e90@m* ai3e88@ai3e83)) (ai3e6c@f (ai2eba@stx-expr ai3e64@e) ai3e90@m* ai3e8f@s* ai3e8e@ae*))))) (if (ai2a19@ai28eb@annotation? ai3e64@e) (ai3e6c@f (ai2a1b@ai28ef@annotation-expression ai3e64@e) ai3e65@m* ai3e66@s* ai3e67@ae*) (values '() ai3e56@y-pat (ai3de7@match ai3e64@e ai3e57@z-pat ai3e65@m* ai3e66@s* ai3e67@ae* ai3e5b@r)))))))) (set! ai3ddf@match-each-any (lambda (ai3e38@e ai3e39@m* ai3e3a@s* ai3e3b@ae*) (if (pair? ai3e38@e) (let ((ai3e40@l (ai3ddf@match-each-any (cdr ai3e38@e) ai3e39@m* ai3e3a@s* ai3e3b@ae*))) (and ai3e40@l (cons (ai3dd9@stx^ (car ai3e38@e) ai3e39@m* ai3e3a@s* ai3e3b@ae*) ai3e40@l))) (if (null? ai3e38@e) '() (if (ai2eb8@stx? ai3e38@e) (and (not (ai2e72@top-marked? ai3e39@m*)) (call-with-values (lambda () (join-wraps ai3e39@m* ai3e3a@s* ai3e3b@ae* ai3e38@e)) (lambda (ai3e48@ai3e43 ai3e49@ai3e45 ai3e4a@ai3e47) (let ((ai3e4e@ae* ai3e4a@ai3e47) (ai3e4f@s* ai3e49@ai3e45) (ai3e50@m* ai3e48@ai3e43)) (ai3ddf@match-each-any (ai2eba@stx-expr ai3e38@e) ai3e50@m* ai3e4f@s* ai3e4e@ae*))))) (if (ai2a19@ai28eb@annotation? ai3e38@e) (ai3ddf@match-each-any (ai2a1b@ai28ef@annotation-expression ai3e38@e) ai3e39@m* ai3e3a@s* ai3e3b@ae*) '#f)))))) (set! ai3de1@match-empty (lambda (ai3e32@p ai3e33@r) (if (null? ai3e32@p) ai3e33@r (if (eq? ai3e32@p '_) ai3e33@r (if (eq? ai3e32@p 'any) (cons '() ai3e33@r) (if (pair? ai3e32@p) (ai3de1@match-empty (car ai3e32@p) (ai3de1@match-empty (cdr ai3e32@p) ai3e33@r)) (if (eq? ai3e32@p 'each-any) (cons '() ai3e33@r) (let ((ai3e36@t (vector-ref ai3e32@p '0))) (if (memv ai3e36@t '(each)) (ai3de1@match-empty (vector-ref ai3e32@p '1) ai3e33@r) (if (memv ai3e36@t '(each+)) (ai3de1@match-empty (vector-ref ai3e32@p '1) (ai3de1@match-empty (reverse (vector-ref ai3e32@p '2)) (ai3de1@match-empty (vector-ref ai3e32@p '3) ai3e33@r))) (if (memv ai3e36@t '(free-id atom)) ai3e33@r (if (memv ai3e36@t '(scheme-id atom)) ai3e33@r (if (memv ai3e36@t '(vector)) (ai3de1@match-empty (vector-ref ai3e32@p '1) ai3e33@r) (assertion-violation 'syntax-dispatch '"invalid pattern" ai3e32@p)))))))))))))) (set! ai3de3@combine (lambda (ai3e2e@r* ai3e2f@r) (if (null? (car ai3e2e@r*)) ai3e2f@r (cons (map car ai3e2e@r*) (ai3de3@combine (map cdr ai3e2e@r*) ai3e2f@r))))) (set! ai3de5@match* (lambda (ai3e0a@e ai3e0b@p ai3e0c@m* ai3e0d@s* ai3e0e@ae* ai3e0f@r) (if (null? ai3e0b@p) (and (null? ai3e0a@e) ai3e0f@r) (if (pair? ai3e0b@p) (and (pair? ai3e0a@e) (ai3de7@match (car ai3e0a@e) (car ai3e0b@p) ai3e0c@m* ai3e0d@s* ai3e0e@ae* (ai3de7@match (cdr ai3e0a@e) (cdr ai3e0b@p) ai3e0c@m* ai3e0d@s* ai3e0e@ae* ai3e0f@r))) (if (eq? ai3e0b@p 'each-any) (let ((ai3e16@l (ai3ddf@match-each-any ai3e0a@e ai3e0c@m* ai3e0d@s* ai3e0e@ae*))) (and ai3e16@l (cons ai3e16@l ai3e0f@r))) (let ((ai3e18@t (vector-ref ai3e0b@p '0))) (if (memv ai3e18@t '(each)) (if (null? ai3e0a@e) (ai3de1@match-empty (vector-ref ai3e0b@p '1) ai3e0f@r) (let ((ai3e1a@r* (ai3ddb@match-each ai3e0a@e (vector-ref ai3e0b@p '1) ai3e0c@m* ai3e0d@s* ai3e0e@ae*))) (and ai3e1a@r* (ai3de3@combine ai3e1a@r* ai3e0f@r)))) (if (memv ai3e18@t '(free-id)) (and (symbol? ai3e0a@e) (ai2e72@top-marked? ai3e0c@m*) (ai2ef2@free-id=? (ai3dd9@stx^ ai3e0a@e ai3e0c@m* ai3e0d@s* ai3e0e@ae*) (vector-ref ai3e0b@p '1)) ai3e0f@r) (if (memv ai3e18@t '(scheme-id)) (and (symbol? ai3e0a@e) (ai2e72@top-marked? ai3e0c@m*) (ai2ef2@free-id=? (ai3dd9@stx^ ai3e0a@e ai3e0c@m* ai3e0d@s* ai3e0e@ae*) (ai307b@scheme-stx (vector-ref ai3e0b@p '1))) ai3e0f@r) (if (memv ai3e18@t '(each+)) (call-with-values (lambda () (ai3ddd@match-each+ ai3e0a@e (vector-ref ai3e0b@p '1) (vector-ref ai3e0b@p '2) (vector-ref ai3e0b@p '3) ai3e0c@m* ai3e0d@s* ai3e0e@ae* ai3e0f@r)) (lambda (ai3e22@ai3e1d ai3e23@ai3e1f ai3e24@ai3e21) (let ((ai3e28@r ai3e24@ai3e21) (ai3e29@y-pat ai3e23@ai3e1f) (ai3e2a@xr* ai3e22@ai3e1d)) (and ai3e28@r (null? ai3e29@y-pat) (if (null? ai3e2a@xr*) (ai3de1@match-empty (vector-ref ai3e0b@p '1) ai3e28@r) (ai3de3@combine ai3e2a@xr* ai3e28@r)))))) (if (memv ai3e18@t '(atom)) (and (fast-equal? (vector-ref ai3e0b@p '1) (ai2efe@strip ai3e0a@e ai3e0c@m*)) ai3e0f@r) (if (memv ai3e18@t '(vector)) (and (vector? ai3e0a@e) (ai3de7@match (vector->list ai3e0a@e) (vector-ref ai3e0b@p '1) ai3e0c@m* ai3e0d@s* ai3e0e@ae* ai3e0f@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" ai3e0b@p))))))))))))) (set! ai3de7@match (lambda (ai3dec@e ai3ded@p ai3dee@m* ai3def@s* ai3df0@ae* ai3df1@r) (if (not ai3df1@r) '#f (if (eq? ai3ded@p '_) ai3df1@r (if (eq? ai3ded@p 'any) (cons (ai3dd9@stx^ ai3dec@e ai3dee@m* ai3def@s* ai3df0@ae*) ai3df1@r) (if (ai2eb8@stx? ai3dec@e) (and (not (ai2e72@top-marked? ai3dee@m*)) (call-with-values (lambda () (join-wraps ai3dee@m* ai3def@s* ai3df0@ae* ai3dec@e)) (lambda (ai3dfe@ai3df9 ai3dff@ai3dfb ai3e00@ai3dfd) (let ((ai3e04@ae* ai3e00@ai3dfd) (ai3e05@s* ai3dff@ai3dfb) (ai3e06@m* ai3dfe@ai3df9)) (ai3de7@match (ai2eba@stx-expr ai3dec@e) ai3ded@p ai3e06@m* ai3e05@s* ai3e04@ae* ai3df1@r))))) (if (ai2a19@ai28eb@annotation? ai3dec@e) (ai3de7@match (ai2a1b@ai28ef@annotation-expression ai3dec@e) ai3ded@p ai3dee@m* ai3def@s* ai3df0@ae* ai3df1@r) (ai3de5@match* ai3dec@e ai3ded@p ai3dee@m* ai3def@s* ai3df0@ae* ai3df1@r)))))))) (lambda (ai3de8@e ai3de9@p) (ai3de7@match ai3de8@e ai3de9@p '() '() '() '()))))) (set! ai4bc9@ai30f3@syntax-dispatch ai30f3@syntax-dispatch) (set! ai30f5@ellipsis? (lambda (ai3ebc@x) (and (ai2eec@id? ai3ebc@x) (ai2ef2@free-id=? ai3ebc@x (ai307b@scheme-stx '...))))) (set! ai4bca@ai30f5@ellipsis? ai30f5@ellipsis?) (set! ai30f7@underscore? (lambda (ai3ebe@x) (and (ai2eec@id? ai3ebe@x) (ai2ef2@free-id=? ai3ebe@x (ai307b@scheme-stx '_))))) (set! ai4bcb@ai30f7@underscore? ai30f7@underscore?) (set! ai30f9@verify-literals (lambda (ai3ec0@lits ai3ec1@expr) (for-each (lambda (ai3ec4@x) (if (or (not (ai2eec@id? ai3ec4@x)) (ai30f5@ellipsis? ai3ec4@x) (ai30f7@underscore? ai3ec4@x)) (ai31d3@syntax-violation '#f '"invalid literal" ai3ec1@expr ai3ec4@x) (void))) ai3ec0@lits))) (set! ai4bcc@ai30f9@verify-literals ai30f9@verify-literals) (set! ai30fb@syntax-case-transformer (let ((ai3ec7@build-dispatch-call '#f) (ai3ec9@invalid-ids-error '#f) (ai3ecb@gen-clause '#f) (ai3ecd@gen-syntax-case '#f)) (begin (set! ai3ec7@build-dispatch-call (lambda (ai3f38@pvars ai3f39@expr ai3f3a@y ai3f3b@r ai3f3c@mr) (let ((ai3f42@ids (map car ai3f38@pvars)) (ai3f43@levels (map cdr ai3f38@pvars))) (let ((ai3f46@labels (map ai2e78@gen-label ai3f42@ids)) (ai3f47@new-vars (map ai2e74@gen-lexical ai3f42@ids))) (let ((ai3f4a@body (ai3115@chi-expr (ai2ed8@add-subst (ai2eac@make-full-rib ai3f42@ids ai3f46@labels) ai3f39@expr) (append (map (lambda (ai3f4c@label ai3f4d@var ai3f4e@level) (cons ai3f4c@label (ai2f06@make-binding 'syntax (cons ai3f4d@var ai3f4e@level)))) ai3f46@labels ai3f47@new-vars (map cdr ai3f38@pvars)) ai3f3b@r) ai3f3c@mr))) (list '(primitive apply) (ai2e4f@ai2d7b@build-lambda '#f ai3f47@new-vars ai3f4a@body) ai3f3a@y)))))) (set! ai3ec9@invalid-ids-error (lambda (ai3f2c@id* ai3f2d@e ai3f2e@class) (let ai3f36@find ((ai3f32@id* ai3f2c@id*) (ai3f33@ok* '())) (if (null? ai3f32@id*) (ai31d3@syntax-violation '#f '"invalid syntax" ai3f2d@e) (if (ai2eec@id? (car ai3f32@id*)) (if (ai2ef8@bound-id-member? (car ai3f32@id*) ai3f33@ok*) (ai31cf@syntax-error (car ai3f32@id*) '"duplicate " ai3f2e@class) (ai3f36@find (cdr ai3f32@id*) (cons (car ai3f32@id*) ai3f33@ok*))) (ai31cf@syntax-error (car ai3f32@id*) '"invalid " ai3f2e@class)))))) (set! ai3ecb@gen-clause (lambda (ai3f04@x ai3f05@keys ai3f06@clauses ai3f07@r ai3f08@mr ai3f09@pat ai3f0a@fender ai3f0b@expr) (call-with-values (lambda () (ai30f1@convert-pattern ai3f09@pat ai3f05@keys)) (lambda (ai3f18@ai3f15 ai3f19@ai3f17) (let ((ai3f1c@pvars ai3f19@ai3f17) (ai3f1d@p ai3f18@ai3f15)) (if (not (ai2ef6@distinct-bound-ids? (map car ai3f1c@pvars))) (ai3ec9@invalid-ids-error (map car ai3f1c@pvars) ai3f09@pat '"pattern variable") (if (not (for-all (lambda (ai3f20@x) (not (ai30f5@ellipsis? (car ai3f20@x)))) ai3f1c@pvars)) (ai31d3@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" ai3f09@pat) (let ((ai3f22@y (ai2e74@gen-lexical 'tmp))) (let ((ai3f24@test (if (eq? ai3f0a@fender '#t) ai3f22@y (let ((ai3f26@call (ai3ec7@build-dispatch-call ai3f1c@pvars ai3f0a@fender ai3f22@y ai3f07@r ai3f08@mr))) (list 'if ai3f22@y ai3f26@call (list 'quote '#f)))))) (let ((ai3f28@conseq (ai3ec7@build-dispatch-call ai3f1c@pvars ai3f0b@expr ai3f22@y ai3f07@r ai3f08@mr))) (let ((ai3f2a@altern (ai3ecd@gen-syntax-case ai3f04@x ai3f05@keys ai3f06@clauses ai3f07@r ai3f08@mr))) (list (ai2e4f@ai2d7b@build-lambda '#f (list ai3f22@y) (list 'if ai3f24@test ai3f28@conseq ai3f2a@altern)) (list '(primitive syntax-dispatch) ai3f04@x (list 'quote ai3f1d@p)))))))))))))) (set! ai3ecd@gen-syntax-case (lambda (ai3ee2@x ai3ee3@keys ai3ee4@clauses ai3ee5@r ai3ee6@mr) (if (null? ai3ee4@clauses) (list '(primitive syntax-error) ai3ee2@x) (let ((ai3eec@t (car ai3ee4@clauses))) (let ((ai3eee@ls/false (ai30f3@syntax-dispatch ai3eec@t '(any any)))) (if ai3eee@ls/false (apply (lambda (ai3ef0@pat ai3ef1@expr) (if (and (ai2eec@id? ai3ef0@pat) (not (ai2ef8@bound-id-member? ai3ef0@pat ai3ee3@keys)) (not (ai30f5@ellipsis? ai3ef0@pat))) (if (ai2ef2@free-id=? ai3ef0@pat (ai307b@scheme-stx '_)) (ai3115@chi-expr ai3ef1@expr ai3ee5@r ai3ee6@mr) (let ((ai3ef4@lab (ai2e78@gen-label ai3ef0@pat)) (ai3ef5@lex (ai2e74@gen-lexical ai3ef0@pat))) (let ((ai3ef8@body (ai3115@chi-expr (ai2ed8@add-subst (ai2eac@make-full-rib (list ai3ef0@pat) (list ai3ef4@lab)) ai3ef1@expr) (cons (cons ai3ef4@lab (ai2f06@make-binding 'syntax (cons ai3ef5@lex '0))) ai3ee5@r) ai3ee6@mr))) (list (ai2e4f@ai2d7b@build-lambda '#f (list ai3ef5@lex) ai3ef8@body) ai3ee2@x)))) (ai3ecb@gen-clause ai3ee2@x ai3ee3@keys (cdr ai3ee4@clauses) ai3ee5@r ai3ee6@mr ai3ef0@pat '#t ai3ef1@expr))) ai3eee@ls/false) (let ((ai3efa@t ai3eec@t)) (let ((ai3efc@ls/false (ai30f3@syntax-dispatch ai3efa@t '(any any any)))) (if ai3efc@ls/false (apply (lambda (ai3efe@pat ai3eff@fender ai3f00@expr) (ai3ecb@gen-clause ai3ee2@x ai3ee3@keys (cdr ai3ee4@clauses) ai3ee5@r ai3ee6@mr ai3efe@pat ai3eff@fender ai3f00@expr)) ai3efc@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3efa@t)))))))))) (lambda (ai3ece@e ai3ecf@r ai3ed0@mr) (let ((ai3ed4@t ai3ece@e)) (let ((ai3ed6@ls/false (ai30f3@syntax-dispatch ai3ed4@t '(_ any each-any . each-any)))) (if ai3ed6@ls/false (apply (lambda (ai3ed8@expr ai3ed9@keys ai3eda@clauses) (begin (ai30f9@verify-literals ai3ed9@keys ai3ece@e) (let ((ai3ede@x (ai2e74@gen-lexical 'tmp))) (let ((ai3ee0@body (ai3ecd@gen-syntax-case ai3ede@x ai3ed9@keys ai3eda@clauses ai3ecf@r ai3ed0@mr))) (list (ai2e4f@ai2d7b@build-lambda '#f (list ai3ede@x) ai3ee0@body) (ai3115@chi-expr ai3ed8@expr ai3ecf@r ai3ed0@mr)))))) ai3ed6@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3ed4@t)))))))) (set! ai4bcd@ai30fb@syntax-case-transformer ai30fb@syntax-case-transformer) (set! ai30fd@ellipsis-map (lambda (ai3f52@proc ai3f53@ls . ai3f56@ls*) (let ((ai3f59@who '#f)) (begin (set! ai3f59@who '...) (begin (if (not (list? ai3f53@ls)) (assertion-violation ai3f59@who '"not a list" ai3f53@ls) (void)) (if (not (null? ai3f56@ls*)) (let ((ai3f5a@n (length ai3f53@ls))) (for-each (lambda (ai3f5c@x) (begin (if (not (list? ai3f5c@x)) (assertion-violation ai3f59@who '"not a list" ai3f5c@x) (void)) (if (not (= (length ai3f5c@x) ai3f5a@n)) (assertion-violation ai3f59@who '"length mismatch" ai3f53@ls ai3f5c@x) (void)))) ai3f56@ls*)) (void)) (apply map ai3f52@proc ai3f53@ls ai3f56@ls*)))))) (set! ai4bce@ai30fd@ellipsis-map ai30fd@ellipsis-map) (set! ai30ff@syntax-transformer (let ((ai3f5f@gen-syntax '#f) (ai3f61@gen-ref '#f) (ai3f63@gen-append '#f) (ai3f65@gen-mappend '#f) (ai3f67@gen-map '#f) (ai3f69@gen-cons '#f) (ai3f6b@gen-vector '#f) (ai3f6d@regen '#f)) (begin (set! ai3f5f@gen-syntax (lambda (ai3fd6@src ai3fd7@e ai3fd8@r ai3fd9@maps ai3fda@ellipsis? ai3fdb@vec?) (let ((ai3fe2@t ai3fd7@e)) (let ((ai3fe4@ls/false (ai30f3@syntax-dispatch ai3fe2@t 'any))) (if (and ai3fe4@ls/false (apply (lambda (ai3fe6@dots) (ai3fda@ellipsis? ai3fe6@dots)) ai3fe4@ls/false)) (apply (lambda (ai3fe8@dots) (ai31d3@syntax-violation '#f '"misplaced ellipsis in syntax form" ai3fd6@src)) ai3fe4@ls/false) (let ((ai3fea@t ai3fe2@t)) (let ((ai3fec@ls/false (ai30f3@syntax-dispatch ai3fea@t 'any))) (if (and ai3fec@ls/false (apply (lambda (ai3fee@id) (ai2eec@id? ai3fee@id)) ai3fec@ls/false)) (apply (lambda (ai3ff0@id) (let ((ai3ff2@label (ai2f02@id->label ai3fd7@e))) (let ((ai3ff4@b (ai2f04@label->binding ai3ff2@label ai3fd8@r))) (if (eq? (ai2f08@binding-type ai3ff4@b) 'syntax) (call-with-values (lambda () (let ((ai3ffa@var.lev (ai2f0a@binding-value ai3ff4@b))) (ai3f61@gen-ref ai3fd6@src (car ai3ffa@var.lev) (cdr ai3ffa@var.lev) ai3fd9@maps))) (lambda (ai3ffc@ai3ff7 ai3ffd@ai3ff9) (let ((ai4000@maps ai3ffd@ai3ff9) (ai4001@var ai3ffc@ai3ff7)) (values (list 'ref ai4001@var) ai4000@maps)))) (values (list 'quote ai3fd7@e) ai3fd9@maps))))) ai3fec@ls/false) (let ((ai4004@t ai3fea@t)) (let ((ai4006@ls/false (ai30f3@syntax-dispatch ai4004@t '(any any)))) (if (and ai4006@ls/false (apply (lambda (ai4008@dots ai4009@e) (ai3fda@ellipsis? ai4008@dots)) ai4006@ls/false)) (apply (lambda (ai400c@dots ai400d@e) (if ai3fdb@vec? (ai31d3@syntax-violation '#f '"misplaced ellipsis in syntax form" ai3fd6@src) (ai3f5f@gen-syntax ai3fd6@src ai400d@e ai3fd8@r ai3fd9@maps (lambda (ai4010@x) '#f) '#f))) ai4006@ls/false) (let ((ai4012@t ai4004@t)) (let ((ai4014@ls/false (ai30f3@syntax-dispatch ai4012@t '(any any . any)))) (if (and ai4014@ls/false (apply (lambda (ai4016@x ai4017@dots ai4018@y) (ai3fda@ellipsis? ai4017@dots)) ai4014@ls/false)) (apply (lambda (ai401c@x ai401d@dots ai401e@y) (let ai4034@f ((ai4022@y ai401e@y) (ai4023@k (lambda (ai4026@maps) (call-with-values (lambda () (ai3f5f@gen-syntax ai3fd6@src ai401c@x ai3fd8@r (cons '() ai4026@maps) ai3fda@ellipsis? '#f)) (lambda (ai402c@ai4029 ai402d@ai402b) (let ((ai4030@maps ai402d@ai402b) (ai4031@x ai402c@ai4029)) (if (null? (car ai4030@maps)) (ai31d3@syntax-violation '#f '"extra ellipsis in syntax form" ai3fd6@src) (values (ai3f67@gen-map ai4031@x (car ai4030@maps)) (cdr ai4030@maps))))))))) (let ((ai4036@t ai4022@y)) (let ((ai4038@ls/false (ai30f3@syntax-dispatch ai4036@t '()))) (if ai4038@ls/false (apply (lambda () (ai4023@k ai3fd9@maps)) ai4038@ls/false) (let ((ai403a@t ai4036@t)) (let ((ai403c@ls/false (ai30f3@syntax-dispatch ai403a@t '(any . any)))) (if (and ai403c@ls/false (apply (lambda (ai403e@dots ai403f@y) (ai3fda@ellipsis? ai403e@dots)) ai403c@ls/false)) (apply (lambda (ai4042@dots ai4043@y) (ai4034@f ai4043@y (lambda (ai4046@maps) (call-with-values (lambda () (ai4023@k (cons '() ai4046@maps))) (lambda (ai404c@ai4049 ai404d@ai404b) (let ((ai4050@maps ai404d@ai404b) (ai4051@x ai404c@ai4049)) (if (null? (car ai4050@maps)) (ai31d3@syntax-violation '#f '"extra ellipsis in syntax form" ai3fd6@src) (values (ai3f65@gen-mappend ai4051@x (car ai4050@maps)) (cdr ai4050@maps))))))))) ai403c@ls/false) (let ((ai4054@t ai403a@t)) (let ((ai4056@ls/false (ai30f3@syntax-dispatch ai4054@t '_))) (if ai4056@ls/false (apply (lambda () (call-with-values (lambda () (ai3f5f@gen-syntax ai3fd6@src ai4022@y ai3fd8@r ai3fd9@maps ai3fda@ellipsis? ai3fdb@vec?)) (lambda (ai405c@ai4059 ai405d@ai405b) (let ((ai4060@maps ai405d@ai405b) (ai4061@y ai405c@ai4059)) (call-with-values (lambda () (ai4023@k ai4060@maps)) (lambda (ai4068@ai4065 ai4069@ai4067) (let ((ai406c@maps ai4069@ai4067) (ai406d@x ai4068@ai4065)) (values (ai3f63@gen-append ai406d@x ai4061@y) ai406c@maps)))))))) ai4056@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai4054@t)))))))))))) ai4014@ls/false) (let ((ai4070@t ai4012@t)) (let ((ai4072@ls/false (ai30f3@syntax-dispatch ai4070@t '(any . any)))) (if ai4072@ls/false (apply (lambda (ai4074@x ai4075@y) (call-with-values (lambda () (ai3f5f@gen-syntax ai3fd6@src ai4074@x ai3fd8@r ai3fd9@maps ai3fda@ellipsis? '#f)) (lambda (ai407c@ai4079 ai407d@ai407b) (let ((ai4080@maps ai407d@ai407b) (ai4081@xnew ai407c@ai4079)) (call-with-values (lambda () (ai3f5f@gen-syntax ai3fd6@src ai4075@y ai3fd8@r ai4080@maps ai3fda@ellipsis? ai3fdb@vec?)) (lambda (ai4088@ai4085 ai4089@ai4087) (let ((ai408c@maps ai4089@ai4087) (ai408d@ynew ai4088@ai4085)) (values (ai3f69@gen-cons ai3fd7@e ai4074@x ai4075@y ai4081@xnew ai408d@ynew) ai408c@maps)))))))) ai4072@ls/false) (let ((ai4090@t ai4070@t)) (let ((ai4092@ls/false (ai30f3@syntax-dispatch ai4090@t '#(vector each-any)))) (if ai4092@ls/false (apply (lambda (ai4094@ls) (call-with-values (lambda () (ai3f5f@gen-syntax ai3fd6@src ai4094@ls ai3fd8@r ai3fd9@maps ai3fda@ellipsis? '#t)) (lambda (ai409a@ai4097 ai409b@ai4099) (let ((ai409e@maps ai409b@ai4099) (ai409f@lsnew ai409a@ai4097)) (values (ai3f6b@gen-vector ai3fd7@e ai4094@ls ai409f@lsnew) ai409e@maps))))) ai4092@ls/false) (let ((ai40a2@t ai4090@t)) (let ((ai40a4@ls/false (ai30f3@syntax-dispatch ai40a2@t '_))) (if ai40a4@ls/false (apply (lambda () (values (list 'quote ai3fd7@e) ai3fd9@maps)) ai40a4@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai40a2@t)))))))))))))))))))))))) (set! ai3f61@gen-ref (lambda (ai3fbc@src ai3fbd@var ai3fbe@level ai3fbf@maps) (if (= ai3fbe@level '0) (values ai3fbd@var ai3fbf@maps) (if (null? ai3fbf@maps) (ai31d3@syntax-violation '#f '"missing ellipsis in syntax form" ai3fbc@src) (call-with-values (lambda () (ai3f61@gen-ref ai3fbc@src ai3fbd@var (- ai3fbe@level '1) (cdr ai3fbf@maps))) (lambda (ai3fc8@ai3fc5 ai3fc9@ai3fc7) (let ((ai3fcc@outer-maps ai3fc9@ai3fc7) (ai3fcd@outer-var ai3fc8@ai3fc5)) (let ((ai3fd0@t (assq ai3fcd@outer-var (car ai3fbf@maps)))) (if ai3fd0@t ((lambda (ai3fd2@b) (values (cdr ai3fd2@b) ai3fbf@maps)) ai3fd0@t) (let ((ai3fd4@inner-var (ai2e74@gen-lexical 'tmp))) (values ai3fd4@inner-var (cons (cons (cons ai3fcd@outer-var ai3fd4@inner-var) (car ai3fbf@maps)) ai3fcc@outer-maps)))))))))))) (set! ai3f63@gen-append (lambda (ai3fb8@x ai3fb9@y) (if (fast-equal? ai3fb9@y ''()) ai3fb8@x (list 'append ai3fb8@x ai3fb9@y)))) (set! ai3f65@gen-mappend (lambda (ai3fb4@e ai3fb5@map-env) (list 'apply '(primitive append) (ai3f67@gen-map ai3fb4@e ai3fb5@map-env)))) (set! ai3f67@gen-map (lambda (ai3fa2@e ai3fa3@map-env) (let ((ai3fa6@formals (map cdr ai3fa3@map-env)) (ai3fa7@actuals (map (lambda (ai3faa@x) (list 'ref (car ai3faa@x))) ai3fa3@map-env))) (if (eq? (car ai3fa2@e) 'ref) (car ai3fa7@actuals) (if (for-all (lambda (ai3fac@x) (and (eq? (car ai3fac@x) 'ref) (memq (cadr ai3fac@x) ai3fa6@formals))) (cdr ai3fa2@e)) (let ((ai3fae@args (map (let ((ai3fb0@r (map cons ai3fa6@formals ai3fa7@actuals))) (lambda (ai3fb2@x) (cdr (assq (cadr ai3fb2@x) ai3fb0@r)))) (cdr ai3fa2@e)))) (cons 'map (cons (list 'primitive (car ai3fa2@e)) ai3fae@args))) (cons* 'map (list 'lambda ai3fa6@formals ai3fa2@e) ai3fa7@actuals)))))) (set! ai3f69@gen-cons (lambda (ai3f92@e ai3f93@x ai3f94@y ai3f95@xnew ai3f96@ynew) (let ((ai3f9c@t (car ai3f96@ynew))) (if (memv ai3f9c@t '(quote)) (if (eq? (car ai3f95@xnew) 'quote) (let ((ai3f9e@xnew (cadr ai3f95@xnew)) (ai3f9f@ynew (cadr ai3f96@ynew))) (if (and (eq? ai3f9e@xnew ai3f93@x) (eq? ai3f9f@ynew ai3f94@y)) (list 'quote ai3f92@e) (list 'quote (cons ai3f9e@xnew ai3f9f@ynew)))) (if (null? (cadr ai3f96@ynew)) (list 'list ai3f95@xnew) (list 'cons ai3f95@xnew ai3f96@ynew))) (if (memv ai3f9c@t '(list)) (cons 'list (cons ai3f95@xnew (cdr ai3f96@ynew))) (list 'cons ai3f95@xnew ai3f96@ynew)))))) (set! ai3f6b@gen-vector (lambda (ai3f8c@e ai3f8d@ls ai3f8e@lsnew) (if (eq? (car ai3f8e@lsnew) 'quote) (if (eq? (cadr ai3f8e@lsnew) ai3f8d@ls) (list 'quote ai3f8c@e) (list 'quote (list->vector (cadr ai3f8e@lsnew)))) (if (eq? (car ai3f8e@lsnew) 'list) (cons 'vector (cdr ai3f8e@lsnew)) (list 'list->vector ai3f8e@lsnew))))) (set! ai3f6d@regen (lambda (ai3f86@x) (let ((ai3f88@t (car ai3f86@x))) (if (memv ai3f88@t '(ref)) (cadr ai3f86@x) (if (memv ai3f88@t '(primitive)) (list 'primitive (cadr ai3f86@x)) (if (memv ai3f88@t '(quote)) (list 'quote (cadr ai3f86@x)) (if (memv ai3f88@t '(lambda)) (ai2e4f@ai2d7b@build-lambda '#f (cadr ai3f86@x) (ai3f6d@regen (caddr ai3f86@x))) (if (memv ai3f88@t '(map)) (let ((ai3f8a@ls (map ai3f6d@regen (cdr ai3f86@x)))) (cons '(primitive ellipsis-map) ai3f8a@ls)) (cons (list 'primitive (car ai3f86@x)) (map ai3f6d@regen (cdr ai3f86@x))))))))))) (lambda (ai3f6e@e ai3f6f@r ai3f70@mr) (let ((ai3f74@t ai3f6e@e)) (let ((ai3f76@ls/false (ai30f3@syntax-dispatch ai3f74@t '(_ any)))) (if ai3f76@ls/false (apply (lambda (ai3f78@x) (call-with-values (lambda () (ai3f5f@gen-syntax ai3f6e@e ai3f78@x ai3f6f@r '() ai30f5@ellipsis? '#f)) (lambda (ai3f7e@ai3f7b ai3f7f@ai3f7d) (let ((ai3f82@maps ai3f7f@ai3f7d) (ai3f83@e ai3f7e@ai3f7b)) (ai3f6d@regen ai3f83@e))))) ai3f76@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai3f74@t)))))))) (set! ai4bcf@ai30ff@syntax-transformer ai30ff@syntax-transformer) (set! ai3101@core-macro-transformer (lambda (ai40a6@name) (let ((ai40a8@t ai40a6@name)) (if (memv ai40a8@t '(quote)) ai30a3@quote-transformer (if (memv ai40a8@t '(lambda)) ai30a7@lambda-transformer (if (memv ai40a8@t '(case-lambda)) ai30a5@case-lambda-transformer (if (memv ai40a8@t '(letrec)) ai308b@letrec-transformer (if (memv ai40a8@t '(letrec*)) ai308d@letrec*-transformer (if (memv ai40a8@t '(let)) ai3089@let-transformer (if (memv ai40a8@t '(if)) ai309b@if-transformer (if (memv ai40a8@t '(and)) ai309d@and-transformer (if (memv ai40a8@t '(or)) ai309f@or-transformer (if (memv ai40a8@t '(foreign-call)) ai30ef@foreign-call-transformer (if (memv ai40a8@t '(syntax-case)) ai30fb@syntax-case-transformer (if (memv ai40a8@t '(syntax)) ai30ff@syntax-transformer (if (memv ai40a8@t '(type-descriptor)) ai3091@type-descriptor-transformer (if (memv ai40a8@t '(record-type-descriptor)) ai3093@record-type-descriptor-transformer (if (memv ai40a8@t '(record-constructor-descriptor)) ai3095@record-constructor-descriptor-transformer (if (memv ai40a8@t '(fluid-let-syntax)) ai308f@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" ai40a6@name)))))))))))))))))))) (set! ai4bd0@ai3101@core-macro-transformer ai3101@core-macro-transformer) (set! ai3103@symbol-macro (lambda (ai40aa@x ai40ab@set) (let ((ai40ae@t ai40aa@x)) (let ((ai40b0@ls/false (ai30f3@syntax-dispatch ai40ae@t '(_ any)))) (if (and ai40b0@ls/false (apply (lambda (ai40b2@name) (and (ai2eec@id? ai40b2@name) (memq (ai2eee@id->sym ai40b2@name) ai40ab@set))) ai40b0@ls/false)) (apply (lambda (ai40b4@name) (ai30a9@bless (list 'quote ai40b4@name))) ai40b0@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai40ae@t)))))) (set! ai4bd1@ai3103@symbol-macro ai3103@symbol-macro) (set! ai3105@macro-transformer (lambda (ai40b6@x) (if (procedure? ai40b6@x) ai40b6@x (if (symbol? ai40b6@x) (let ((ai40b8@t ai40b6@x)) (if (memv ai40b8@t '(define-record-type)) ai30e7@define-record-type-macro (if (memv ai40b8@t '(define-struct)) ai30e5@define-struct-macro (if (memv ai40b8@t '(include)) ai30db@include-macro (if (memv ai40b8@t '(cond)) ai30d7@cond-macro (if (memv ai40b8@t '(let)) ai30af@let-macro (if (memv ai40b8@t '(do)) ai30cf@do-macro (if (memv ai40b8@t '(or)) ai30d3@or-macro (if (memv ai40b8@t '(and)) ai30d5@and-macro (if (memv ai40b8@t '(let*)) ai30d1@let*-macro (if (memv ai40b8@t '(let-values)) ai30b1@let-values-macro (if (memv ai40b8@t '(let*-values)) ai30b3@let*-values-macro (if (memv ai40b8@t '(syntax-rules)) ai30df@syntax-rules-macro (if (memv ai40b8@t '(quasiquote)) ai30e1@quasiquote-macro (if (memv ai40b8@t '(quasisyntax)) ai30e3@quasisyntax-macro (if (memv ai40b8@t '(with-syntax)) ai30ab@with-syntax-macro (if (memv ai40b8@t '(when)) ai3097@when-macro (if (memv ai40b8@t '(unless)) ai3099@unless-macro (if (memv ai40b8@t '(case)) ai30a1@case-macro (if (memv ai40b8@t '(identifier-syntax)) ai30cd@identifier-syntax-macro (if (memv ai40b8@t '(time)) ai30c5@time-macro (if (memv ai40b8@t '(delay)) ai30c7@delay-macro (if (memv ai40b8@t '(assert)) ai30c9@assert-macro (if (memv ai40b8@t '(endianness)) ai30cb@endianness-macro (if (memv ai40b8@t '(guard)) ai30c1@guard-macro (if (memv ai40b8@t '(define-enumeration)) ai30c3@define-enumeration-macro (if (memv ai40b8@t '(trace-lambda)) ai30b5@trace-lambda-macro (if (memv ai40b8@t '(trace-define)) ai30b7@trace-define-macro (if (memv ai40b8@t '(trace-define-syntax)) ai30b9@trace-define-syntax-macro (if (memv ai40b8@t '(trace-let-syntax)) ai30bd@trace-let-syntax-macro (if (memv ai40b8@t '(trace-letrec-syntax)) ai30bf@trace-letrec-syntax-macro (if (memv ai40b8@t '(define-condition-type)) ai30e9@define-condition-type-macro (if (memv ai40b8@t '(parameterize)) ai30ed@parameterize-macro (if (memv ai40b8@t '(include-into)) ai30dd@include-into-macro (if (memv ai40b8@t '(eol-style)) (lambda (ai40ba@x) (ai3103@symbol-macro ai40ba@x '(none lf cr crlf nel crnel ls))) (if (memv ai40b8@t '(error-handling-mode)) (lambda (ai40bc@x) (ai3103@symbol-macro ai40bc@x '(ignore raise replace))) (if (memv ai40b8@t '(buffer-mode)) (lambda (ai40be@x) (ai3103@symbol-macro ai40be@x '(none line block))) (if (memv ai40b8@t '(file-options)) ai2e67@file-options-macro (if (memv ai40b8@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) ai30eb@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" ai40b6@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" ai40b6@x))))) (set! ai4bd2@ai3105@macro-transformer ai3105@macro-transformer) (set! ai3107@local-macro-transformer (lambda (ai40c0@x) (car ai40c0@x))) (set! ai4bd3@ai3107@local-macro-transformer ai3107@local-macro-transformer) (set! ai3109@do-macro-call (lambda (ai40c2@transformer ai40c3@expr) (let ((ai40c6@out (ai40c2@transformer (ai2ed6@add-mark ai2ed0@anti-mark ai40c3@expr '#f)))) (begin (let ai40ca@f ((ai40c8@x ai40c6@out)) (if (not (ai2eb8@stx? ai40c8@x)) (if (pair? ai40c8@x) (begin (ai40ca@f (car ai40c8@x)) (ai40ca@f (cdr ai40c8@x))) (if (vector? ai40c8@x) (vector-for-each ai40ca@f ai40c8@x) (if (symbol? ai40c8@x) (ai31d3@syntax-violation '#f '"raw symbol encountered in output of macro" ai40c3@expr ai40c8@x) (void)))) (void))) (ai2ed6@add-mark (ai2ece@gen-mark) ai40c6@out ai40c3@expr))))) (set! ai4bd4@ai3109@do-macro-call ai3109@do-macro-call) (set! ai310b@chi-macro (lambda (ai40cc@p ai40cd@e) (ai3109@do-macro-call (ai3105@macro-transformer ai40cc@p) ai40cd@e))) (set! ai4bd5@ai310b@chi-macro ai310b@chi-macro) (set! ai310d@chi-local-macro (lambda (ai40d0@p ai40d1@e) (ai3109@do-macro-call (ai3107@local-macro-transformer ai40d0@p) ai40d1@e))) (set! ai4bd6@ai310d@chi-local-macro ai310d@chi-local-macro) (set! ai310f@chi-global-macro (lambda (ai40d4@p ai40d5@e) (let ((ai40d8@lib (car ai40d4@p)) (ai40d9@loc (cdr ai40d4@p))) (begin (ai2d02@ai2b41@visit-library ai40d8@lib) (let ((ai40dc@x (symbol-value ai40d9@loc))) (let ((ai40de@transformer (if (procedure? ai40dc@x) ai40dc@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" ai40dc@x)))) (ai3109@do-macro-call ai40de@transformer ai40d5@e))))))) (set! ai4bd7@ai310f@chi-global-macro ai310f@chi-global-macro) (set! ai3111@chi-expr* (lambda (ai40e0@e* ai40e1@r ai40e2@mr) (if (null? ai40e0@e*) '() (let ((ai40e6@e (ai3115@chi-expr (car ai40e0@e*) ai40e1@r ai40e2@mr))) (cons ai40e6@e (ai3111@chi-expr* (cdr ai40e0@e*) ai40e1@r ai40e2@mr)))))) (set! ai4bd8@ai3111@chi-expr* ai3111@chi-expr*) (set! ai3113@chi-application (lambda (ai40e8@e ai40e9@r ai40ea@mr) (let ((ai40ee@t ai40e8@e)) (let ((ai40f0@ls/false (ai30f3@syntax-dispatch ai40ee@t '(any . each-any)))) (if ai40f0@ls/false (apply (lambda (ai40f2@rator ai40f3@rands) (let ((ai40f6@rator (ai3115@chi-expr ai40f2@rator ai40e9@r ai40ea@mr))) (cons ai40f6@rator (ai3111@chi-expr* ai40f3@rands ai40e9@r ai40ea@mr)))) ai40f0@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai40ee@t)))))) (set! ai4bd9@ai3113@chi-application ai3113@chi-application) (set! ai3115@chi-expr (lambda (ai40f8@e ai40f9@r ai40fa@mr) (call-with-values (lambda () (ai2f0e@syntax-type ai40f8@e ai40f9@r)) (lambda (ai4104@ai40ff ai4105@ai4101 ai4106@ai4103) (let ((ai410a@kwd ai4106@ai4103) (ai410b@value ai4105@ai4101) (ai410c@type ai4104@ai40ff)) (let ((ai4110@t ai410c@type)) (if (memv ai4110@t '(core-macro)) (let ((ai4112@transformer (ai3101@core-macro-transformer ai410b@value))) (ai4112@transformer ai40f8@e ai40f9@r ai40fa@mr)) (if (memv ai4110@t '(global)) (let ((ai4114@lib (car ai410b@value))) (let ((ai4116@loc (cdr ai410b@value))) (begin ((ai315b@inv-collector) ai4114@lib) ai4116@loc))) (if (memv ai4110@t '(core-prim)) (let ((ai4118@name ai410b@value)) (list 'primitive ai4118@name)) (if (memv ai4110@t '(call)) (ai3113@chi-application ai40f8@e ai40f9@r ai40fa@mr) (if (memv ai4110@t '(lexical)) (let ((ai411a@lex (ai307d@lexical-var ai410b@value))) ai411a@lex) (if (memv ai4110@t '(global-macro global-macro!)) (ai3115@chi-expr (ai310f@chi-global-macro ai410b@value ai40f8@e) ai40f9@r ai40fa@mr) (if (memv ai4110@t '(local-macro local-macro!)) (ai3115@chi-expr (ai310d@chi-local-macro ai410b@value ai40f8@e) ai40f9@r ai40fa@mr) (if (memv ai4110@t '(macro macro!)) (ai3115@chi-expr (ai310b@chi-macro ai410b@value ai40f8@e) ai40f9@r ai40fa@mr) (if (memv ai4110@t '(constant)) (let ((ai411c@datum ai410b@value)) (list 'quote ai411c@datum)) (if (memv ai4110@t '(set!)) (ai3117@chi-set! ai40f8@e ai40f9@r ai40fa@mr) (if (memv ai4110@t '(begin)) (let ((ai411e@t ai40f8@e)) (let ((ai4120@ls/false (ai30f3@syntax-dispatch ai411e@t '(_ any . each-any)))) (if ai4120@ls/false (apply (lambda (ai4122@x ai4123@x*) (ai2e51@ai2dab@build-sequence '#f (ai3111@chi-expr* (cons ai4122@x ai4123@x*) ai40f9@r ai40fa@mr))) ai4120@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai411e@t)))) (if (memv ai4110@t '(let-syntax letrec-syntax)) (let ((ai4126@t ai40f8@e)) (let ((ai4128@ls/false (ai30f3@syntax-dispatch ai4126@t '(_ #(each (any any)) any . each-any)))) (if (and ai4128@ls/false (apply (lambda (ai412a@xlhs* ai412b@xrhs* ai412c@xbody ai412d@xbody*) (if (not (ai2ef4@valid-bound-ids? ai412a@xlhs*)) (ai31d3@syntax-violation '#f '"invalid identifiers" ai40f8@e) (void))) ai4128@ls/false)) (apply (lambda (ai4132@xlhs* ai4133@xrhs* ai4134@xbody ai4135@xbody*) (let ((ai413a@xlab* (map ai2e78@gen-label ai4132@xlhs*))) (let ((ai413c@xrib (ai2eac@make-full-rib ai4132@xlhs* ai413a@xlab*))) (let ((ai413e@xb* (map (lambda (ai4140@x) (ai2f24@make-eval-transformer (ai314d@expand-transformer (if (eq? ai410c@type 'let-syntax) ai4140@x (ai2ed8@add-subst ai413c@xrib ai4140@x)) ai40fa@mr))) ai4133@xrhs*))) (ai2e51@ai2dab@build-sequence '#f (ai3111@chi-expr* (map (lambda (ai4142@x) (ai2ed8@add-subst ai413c@xrib ai4142@x)) (cons ai4134@xbody ai4135@xbody*)) (append (map cons ai413a@xlab* ai413e@xb*) ai40f9@r) (append (map cons ai413a@xlab* ai413e@xb*) ai40fa@mr))))))) ai4128@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai4126@t)))) (if (memv ai4110@t '(displaced-lexical)) (ai31d3@syntax-violation '#f '"identifier out of context" ai40f8@e) (if (memv ai4110@t '(syntax)) (ai31d3@syntax-violation '#f '"reference to pattern variable outside a syntax form" ai40f8@e) (if (memv ai4110@t '(define define-syntax module import library)) (ai31d3@syntax-violation '#f (string-append (let ((ai4144@t ai410c@type)) (if (memv ai4144@t '(define)) '"a definition" (if (memv ai4144@t '(define-syntax)) '"a define-syntax" (if (memv ai4144@t '(module)) '"a module definition" (if (memv ai4144@t '(library)) '"a library definition" (if (memv ai4144@t '(import)) '"an import declaration" (if (memv ai4144@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") ai40f8@e) (if (memv ai4110@t '(mutable)) (ai31d3@syntax-violation '#f '"attempt to reference an unexportable variable" ai40f8@e) (ai31d3@syntax-violation '#f '"invalid expression" ai40f8@e))))))))))))))))))))))) (set! ai4bda@ai3115@chi-expr ai3115@chi-expr) (set! ai3117@chi-set! (lambda (ai4146@e ai4147@r ai4148@mr) (let ((ai414c@t ai4146@e)) (let ((ai414e@ls/false (ai30f3@syntax-dispatch ai414c@t '(_ any any)))) (if (and ai414e@ls/false (apply (lambda (ai4150@x ai4151@v) (ai2eec@id? ai4150@x)) ai414e@ls/false)) (apply (lambda (ai4154@x ai4155@v) (call-with-values (lambda () (ai2f0e@syntax-type ai4154@x ai4147@r)) (lambda (ai415e@ai4159 ai415f@ai415b ai4160@ai415d) (let ((ai4164@kwd ai4160@ai415d) (ai4165@value ai415f@ai415b) (ai4166@type ai415e@ai4159)) (let ((ai416a@t ai4166@type)) (if (memv ai416a@t '(lexical)) (begin (ai3081@set-lexical-mutable! ai4165@value '#t) (list 'set! (ai307d@lexical-var ai4165@value) (ai3115@chi-expr ai4155@v ai4147@r ai4148@mr))) (if (memv ai416a@t '(core-prim)) (ai31d3@syntax-violation '#f '"cannot modify imported core primitive" ai4146@e) (if (memv ai416a@t '(global)) (ai31d3@syntax-violation '#f '"attempt to modify imported binding" ai4146@e) (if (memv ai416a@t '(global-macro!)) (ai3115@chi-expr (ai310f@chi-global-macro ai4165@value ai4146@e) ai4147@r ai4148@mr) (if (memv ai416a@t '(local-macro!)) (ai3115@chi-expr (ai310d@chi-local-macro ai4165@value ai4146@e) ai4147@r ai4148@mr) (if (memv ai416a@t '(mutable)) (ai31d3@syntax-violation '#f '"attempt to assign to an unexportable variable" ai4146@e) (ai31d3@syntax-violation '#f '"invalid syntax" ai4146@e)))))))))))) ai414e@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai414c@t)))))) (set! ai4bdb@ai3117@chi-set! ai3117@chi-set!) (set! ai3119@verify-formals (lambda (ai416c@fmls ai416d@stx) (let ((ai4170@t ai416c@fmls)) (let ((ai4172@ls/false (ai30f3@syntax-dispatch ai4170@t 'each-any))) (if ai4172@ls/false (apply (lambda (ai4174@x*) (if (not (ai2ef4@valid-bound-ids? ai4174@x*)) (ai30ad@invalid-fmls-error ai416d@stx ai416c@fmls) (void))) ai4172@ls/false) (let ((ai4176@t ai4170@t)) (let ((ai4178@ls/false (ai30f3@syntax-dispatch ai4176@t '#(each+ any () any)))) (if ai4178@ls/false (apply (lambda (ai417a@x* ai417b@x) (if (not (ai2ef4@valid-bound-ids? (cons ai417b@x ai417a@x*))) (ai30ad@invalid-fmls-error ai416d@stx ai416c@fmls) (void))) ai4178@ls/false) (let ((ai417e@t ai4176@t)) (let ((ai4180@ls/false (ai30f3@syntax-dispatch ai417e@t '_))) (if ai4180@ls/false (apply (lambda () (ai31d3@syntax-violation '#f '"invalid syntax" ai416d@stx)) ai4180@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai417e@t)))))))))))) (set! ai4bdc@ai3119@verify-formals ai3119@verify-formals) (set! ai311b@chi-lambda-clause (lambda (ai4182@stx ai4183@fmls ai4184@body* ai4185@r ai4186@mr) (let ((ai418c@t ai4183@fmls)) (let ((ai418e@ls/false (ai30f3@syntax-dispatch ai418c@t 'each-any))) (if ai418e@ls/false (apply (lambda (ai4190@x*) (begin (ai3119@verify-formals ai4183@fmls ai4182@stx) (let ((ai4192@lex* (map ai2e74@gen-lexical ai4190@x*)) (ai4193@lab* (map ai2e78@gen-label ai4190@x*))) (values ai4192@lex* (ai312b@chi-internal (ai2ed8@add-subst (ai2eac@make-full-rib ai4190@x* ai4193@lab*) ai4184@body*) (ai3085@add-lexicals ai4193@lab* ai4192@lex* ai4185@r) ai4186@mr))))) ai418e@ls/false) (let ((ai4196@t ai418c@t)) (let ((ai4198@ls/false (ai30f3@syntax-dispatch ai4196@t '#(each+ any () any)))) (if ai4198@ls/false (apply (lambda (ai419a@x* ai419b@x) (begin (ai3119@verify-formals ai4183@fmls ai4182@stx) (let ((ai419e@lex* (map ai2e74@gen-lexical ai419a@x*)) (ai419f@lab* (map ai2e78@gen-label ai419a@x*)) (ai41a0@lex (ai2e74@gen-lexical ai419b@x)) (ai41a1@lab (ai2e78@gen-label ai419b@x))) (values (append ai419e@lex* ai41a0@lex) (ai312b@chi-internal (ai2ed8@add-subst (ai2eac@make-full-rib (cons ai419b@x ai419a@x*) (cons ai41a1@lab ai419f@lab*)) ai4184@body*) (ai3085@add-lexicals (cons ai41a1@lab ai419f@lab*) (cons ai41a0@lex ai419e@lex*) ai4185@r) ai4186@mr))))) ai4198@ls/false) (let ((ai41a6@t ai4196@t)) (let ((ai41a8@ls/false (ai30f3@syntax-dispatch ai41a6@t '_))) (if ai41a8@ls/false (apply (lambda () (ai31d3@syntax-violation '#f '"invalid syntax" ai4183@fmls)) ai41a8@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai41a6@t)))))))))))) (set! ai4bdd@ai311b@chi-lambda-clause ai311b@chi-lambda-clause) (set! ai311d@chi-lambda-clause* (lambda (ai41aa@stx ai41ab@fmls* ai41ac@body** ai41ad@r ai41ae@mr) (if (null? ai41ab@fmls*) (values '() '()) (call-with-values (lambda () (ai311b@chi-lambda-clause ai41aa@stx (car ai41ab@fmls*) (car ai41ac@body**) ai41ad@r ai41ae@mr)) (lambda (ai41b8@ai41b5 ai41b9@ai41b7) (let ((ai41bc@b ai41b9@ai41b7) (ai41bd@a ai41b8@ai41b5)) (call-with-values (lambda () (ai311d@chi-lambda-clause* ai41aa@stx (cdr ai41ab@fmls*) (cdr ai41ac@body**) ai41ad@r ai41ae@mr)) (lambda (ai41c4@ai41c1 ai41c5@ai41c3) (let ((ai41c8@b* ai41c5@ai41c3) (ai41c9@a* ai41c4@ai41c1)) (values (cons ai41bd@a ai41c9@a*) (cons ai41bc@b ai41c8@b*))))))))))) (set! ai4bde@ai311d@chi-lambda-clause* ai311d@chi-lambda-clause*) (set! ai311f@chi-defun (lambda (ai41cc@x ai41cd@r ai41ce@mr) (let ((ai41d2@fmls (car ai41cc@x)) (ai41d3@body* (cdr ai41cc@x))) (call-with-values (lambda () (ai311b@chi-lambda-clause ai41d2@fmls ai41d2@fmls ai41d3@body* ai41cd@r ai41ce@mr)) (lambda (ai41da@ai41d7 ai41db@ai41d9) (let ((ai41de@body ai41db@ai41d9) (ai41df@fmls ai41da@ai41d7)) (ai2e4f@ai2d7b@build-lambda '#f ai41df@fmls ai41de@body))))))) (set! ai4bdf@ai311f@chi-defun ai311f@chi-defun) (set! ai3121@chi-rhs (lambda (ai41e2@rhs ai41e3@r ai41e4@mr) (let ((ai41e8@t (car ai41e2@rhs))) (if (memv ai41e8@t '(defun)) (ai311f@chi-defun (cdr ai41e2@rhs) ai41e3@r ai41e4@mr) (if (memv ai41e8@t '(expr)) (let ((ai41ea@expr (cdr ai41e2@rhs))) (ai3115@chi-expr ai41ea@expr ai41e3@r ai41e4@mr)) (if (memv ai41e8@t '(top-expr)) (let ((ai41ec@expr (cdr ai41e2@rhs))) (ai2e51@ai2dab@build-sequence '#f (list (ai3115@chi-expr ai41ec@expr ai41e3@r ai41e4@mr) (ai2e52@ai2dad@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" ai41e2@rhs))))))) (set! ai4be0@ai3121@chi-rhs ai3121@chi-rhs) (set! ai3123@expand-interaction-rhs*/init* (lambda (ai41ee@lhs* ai41ef@rhs* ai41f0@init* ai41f1@r ai41f2@mr) (let ai41fc@f ((ai41f8@lhs* ai41ee@lhs*) (ai41f9@rhs* ai41ef@rhs*)) (if (null? ai41f8@lhs*) (map (lambda (ai41fe@x) (ai3115@chi-expr ai41fe@x ai41f1@r ai41f2@mr)) ai41f0@init*) (let ((ai4200@lhs (car ai41f8@lhs*)) (ai4201@rhs (car ai41f9@rhs*))) (let ((ai4204@t (car ai4201@rhs))) (if (memv ai4204@t '(defun)) (let ((ai4206@rhs (ai311f@chi-defun (cdr ai4201@rhs) ai41f1@r ai41f2@mr))) (cons (list 'set! ai4200@lhs ai4206@rhs) (ai41fc@f (cdr ai41f8@lhs*) (cdr ai41f9@rhs*)))) (if (memv ai4204@t '(expr)) (let ((ai4208@rhs (ai3115@chi-expr (cdr ai4201@rhs) ai41f1@r ai41f2@mr))) (cons (list 'set! ai4200@lhs ai4208@rhs) (ai41fc@f (cdr ai41f8@lhs*) (cdr ai41f9@rhs*)))) (if (memv ai4204@t '(top-expr)) (let ((ai420a@e (ai3115@chi-expr (cdr ai4201@rhs) ai41f1@r ai41f2@mr))) (cons ai420a@e (ai41fc@f (cdr ai41f8@lhs*) (cdr ai41f9@rhs*)))) (error 'expand-interaction '"invallid" ai4201@rhs)))))))))) (set! ai4be1@ai3123@expand-interaction-rhs*/init* ai3123@expand-interaction-rhs*/init*) (set! ai3125@chi-rhs* (lambda (ai420c@rhs* ai420d@r ai420e@mr) (let ai4214@f ((ai4212@ls ai420c@rhs*)) (if (null? ai4212@ls) '() (let ((ai4216@a (ai3121@chi-rhs (car ai4212@ls) ai420d@r ai420e@mr))) (cons ai4216@a (ai4214@f (cdr ai4212@ls)))))))) (set! ai4be2@ai3125@chi-rhs* ai3125@chi-rhs*) (set! ai3127@find-bound=? (lambda (ai4218@x ai4219@lhs* ai421a@rhs*) (if (null? ai4219@lhs*) '#f (if (ai2ef0@bound-id=? ai4218@x (car ai4219@lhs*)) (car ai421a@rhs*) (ai3127@find-bound=? ai4218@x (cdr ai4219@lhs*) (cdr ai421a@rhs*)))))) (set! ai4be3@ai3127@find-bound=? ai3127@find-bound=?) (set! ai3129@find-dups (lambda (ai421e@ls) (let ai4224@f ((ai4220@ls ai421e@ls) (ai4221@dups '())) (if (null? ai4220@ls) ai4221@dups (let ((ai4226@t (ai3127@find-bound=? (car ai4220@ls) (cdr ai4220@ls) (cdr ai4220@ls)))) (if ai4226@t ((lambda (ai4228@x) (ai4224@f (cdr ai4220@ls) (cons (list (car ai4220@ls) ai4228@x) ai4221@dups))) ai4226@t) (ai4224@f (cdr ai4220@ls) ai4221@dups))))))) (set! ai4be4@ai3129@find-dups ai3129@find-dups) (set! ai312b@chi-internal (lambda (ai422a@e* ai422b@r ai422c@mr) (let ((ai4230@rib (ai2ea0@make-empty-rib))) (call-with-values (lambda () (ai314b@chi-body* (map (lambda (ai4242@x) (ai2ed8@add-subst ai4230@rib ai4242@x)) (ai2eea@syntax->list ai422a@e*)) ai422b@r ai422c@mr '() '() '() '() '() ai4230@rib '#f)) (lambda (ai4244@ai4233 ai4245@ai4235 ai4246@ai4237 ai4247@ai4239 ai4248@ai423b ai4249@ai423d ai424a@ai423f ai424b@ai4241) (let ((ai4254@_exp* ai424b@ai4241) (ai4255@kwd* ai424a@ai423f) (ai4256@mod** ai4249@ai423d) (ai4257@rhs* ai4248@ai423b) (ai4258@lex* ai4247@ai4239) (ai4259@mr ai4246@ai4237) (ai425a@r ai4245@ai4235) (ai425b@e* ai4244@ai4233)) (begin (if (null? ai425b@e*) (ai31d3@syntax-violation '#f '"no expression in body" ai425b@e*) (void)) (let ((ai4264@init* (ai3111@chi-expr* (append (apply append (reverse ai4256@mod**)) ai425b@e*) ai425a@r ai4259@mr))) (let ((ai4266@rhs* (ai3125@chi-rhs* ai4257@rhs* ai425a@r ai4259@mr))) (ai2e56@ai2db5@build-letrec* '#f (reverse ai4258@lex*) (reverse ai4266@rhs*) (ai2e51@ai2dab@build-sequence '#f ai4264@init*))))))))))) (set! ai4be5@ai312b@chi-internal ai312b@chi-internal) (set! ai312d@parse-module (lambda (ai4268@e) (let ((ai426a@t ai4268@e)) (let ((ai426c@ls/false (ai30f3@syntax-dispatch ai426a@t '(_ each-any . each-any)))) (if ai426c@ls/false (apply (lambda (ai426e@export* ai426f@b*) (begin (if (not (for-all ai2eec@id? ai426e@export*)) (ai31d3@syntax-violation '#f '"module exports must be identifiers" ai4268@e) (void)) (values '#f (list->vector ai426e@export*) ai426f@b*))) ai426c@ls/false) (let ((ai4272@t ai426a@t)) (let ((ai4274@ls/false (ai30f3@syntax-dispatch ai4272@t '(_ any each-any . each-any)))) (if ai4274@ls/false (apply (lambda (ai4276@name ai4277@export* ai4278@b*) (begin (if (not (ai2eec@id? ai4276@name)) (ai31d3@syntax-violation '#f '"module name must be an identifier" ai4268@e) (void)) (if (not (for-all ai2eec@id? ai4277@export*)) (ai31d3@syntax-violation '#f '"module exports must be identifiers" ai4268@e) (void)) (values ai4276@name (list->vector ai4277@export*) ai4278@b*))) ai4274@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai4272@t))))))))) (set! ai4be6@ai312d@parse-module ai312d@parse-module) (set! ai3137@module-interface? (lambda (ai427c@x) (and (simple-struct? ai427c@x) (eq? (simple-struct-name ai427c@x) 'module-interface)))) (set! ai4be7@ai3137@module-interface? ai3137@module-interface?) (set! ai3139@module-interface-first-mark (lambda (ai427e@x) (simple-struct-ref ai427e@x '0))) (set! ai4be8@ai3139@module-interface-first-mark ai3139@module-interface-first-mark) (set! ai313b@set-module-interface-first-mark! (lambda (ai4280@x ai4281@val) (simple-struct-set! ai4280@x '0 ai4281@val))) (set! ai4be9@ai313b@set-module-interface-first-mark! ai313b@set-module-interface-first-mark!) (set! ai313d@module-interface-exp-id-vec (lambda (ai4284@x) (simple-struct-ref ai4284@x '1))) (set! ai4bea@ai313d@module-interface-exp-id-vec ai313d@module-interface-exp-id-vec) (set! ai313f@set-module-interface-exp-id-vec! (lambda (ai4286@x ai4287@val) (simple-struct-set! ai4286@x '1 ai4287@val))) (set! ai4beb@ai313f@set-module-interface-exp-id-vec! ai313f@set-module-interface-exp-id-vec!) (set! ai3141@module-interface-exp-lab-vec (lambda (ai428a@x) (simple-struct-ref ai428a@x '2))) (set! ai4bec@ai3141@module-interface-exp-lab-vec ai3141@module-interface-exp-lab-vec) (set! ai3143@set-module-interface-exp-lab-vec! (lambda (ai428c@x ai428d@val) (simple-struct-set! ai428c@x '2 ai428d@val))) (set! ai4bed@ai3143@set-module-interface-exp-lab-vec! ai3143@set-module-interface-exp-lab-vec!) (set! ai3145@dummy '3) (set! ai4bee@ai3145@dummy ai3145@dummy) (set! ai3147@module-interface-exp-id* (lambda (ai4290@iface ai4291@id) (let ((ai4295@diff-marks '#f)) (begin (set! ai4295@diff-marks (lambda (ai429c@ls ai429d@x) (begin (if (null? ai429c@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((ai42a0@a (car ai429c@ls))) (if (eq? ai42a0@a ai429d@x) '() (cons ai42a0@a (ai4295@diff-marks (cdr ai429c@ls) ai429d@x))))))) (let ((ai4296@diff (ai4295@diff-marks (ai2ebe@stx-mark* ai4291@id) (ai3139@module-interface-first-mark ai4290@iface))) (ai4297@id-vec (ai313d@module-interface-exp-id-vec ai4290@iface))) (if (null? ai4296@diff) ai4297@id-vec (vector-map (lambda (ai429a@x) (make-simple-struct 'stx '5 (list (ai2eba@stx-expr ai429a@x) (append ai4296@diff (ai2ebe@stx-mark* ai429a@x)) '() '()))) ai4297@id-vec))))))) (set! ai4bef@ai3147@module-interface-exp-id* ai3147@module-interface-exp-id*) (set! ai3149@chi-internal-module (lambda (ai42a2@e ai42a3@r ai42a4@mr ai42a5@lex* ai42a6@rhs* ai42a7@mod** ai42a8@kwd*) (call-with-values (lambda () (ai312d@parse-module ai42a2@e)) (lambda (ai42b6@ai42b1 ai42b7@ai42b3 ai42b8@ai42b5) (let ((ai42bc@e* ai42b8@ai42b5) (ai42bd@exp-id* ai42b7@ai42b3) (ai42be@name ai42b6@ai42b1)) (let ((ai42c2@rib (ai2ea0@make-empty-rib))) (let ((ai42c4@e* (map (lambda (ai42c6@x) (ai2ed8@add-subst ai42c2@rib ai42c6@x)) (ai2eea@syntax->list ai42bc@e*)))) (call-with-values (lambda () (ai314b@chi-body* ai42c4@e* ai42a3@r ai42a4@mr ai42a5@lex* ai42a6@rhs* ai42a7@mod** ai42a8@kwd* '() ai42c2@rib '#f)) (lambda (ai42d8@ai42c9 ai42d9@ai42cb ai42da@ai42cd ai42db@ai42cf ai42dc@ai42d1 ai42dd@ai42d3 ai42de@ai42d5 ai42df@ai42d7) (let ((ai42e8@_exp* ai42df@ai42d7) (ai42e9@kwd* ai42de@ai42d5) (ai42ea@mod** ai42dd@ai42d3) (ai42eb@rhs* ai42dc@ai42d1) (ai42ec@lex* ai42db@ai42cf) (ai42ed@mr ai42da@ai42cd) (ai42ee@r ai42d9@ai42cb) (ai42ef@e* ai42d8@ai42c9)) (let ((ai42f8@exp-lab* (vector-map (lambda (ai42fc@x) (or (ai2f02@id->label (make-simple-struct 'stx '5 (list (ai2eee@id->sym ai42fc@x) (ai2ebe@stx-mark* ai42fc@x) (list ai42c2@rib) '()))) (ai31d3@syntax-violation '#f '"cannot find module export" ai42fc@x))) ai42bd@exp-id*)) (ai42f9@mod** (cons ai42ef@e* ai42ea@mod**))) (if (not ai42be@name) (values ai42ec@lex* ai42eb@rhs* ai42bd@exp-id* ai42f8@exp-lab* ai42ee@r ai42ed@mr ai42f9@mod** ai42e9@kwd*) (let ((ai42fe@lab (ai2e78@gen-label 'module)) (ai42ff@iface (make-simple-struct 'module-interface '4 (list (car (ai2ebe@stx-mark* ai42be@name)) (vector-map (lambda (ai4302@x) (make-simple-struct 'stx '5 (list (ai2eba@stx-expr ai4302@x) (ai2ebe@stx-mark* ai4302@x) '() '()))) ai42bd@exp-id*) ai42f8@exp-lab*)))) (values ai42ec@lex* ai42eb@rhs* (vector ai42be@name) (vector ai42fe@lab) (cons (cons ai42fe@lab (cons '$module ai42ff@iface)) ai42ee@r) (cons (cons ai42fe@lab (cons '$module ai42ff@iface)) ai42ed@mr) ai42f9@mod** ai42e9@kwd*)))))))))))))) (set! ai4bf0@ai3149@chi-internal-module ai3149@chi-internal-module) (set! ai314b@chi-body* (lambda (ai4304@e* ai4305@r ai4306@mr ai4307@lex* ai4308@rhs* ai4309@mod** ai430a@kwd* ai430b@exp* ai430c@rib ai430d@top?) (if (null? ai4304@e*) (values ai4304@e* ai4305@r ai4306@mr ai4307@lex* ai4308@rhs* ai4309@mod** ai430a@kwd* ai430b@exp*) (let ((ai4318@e (car ai4304@e*))) (call-with-values (lambda () (ai2f0e@syntax-type ai4318@e ai4305@r)) (lambda (ai4320@ai431b ai4321@ai431d ai4322@ai431f) (let ((ai4326@kwd ai4322@ai431f) (ai4327@value ai4321@ai431d) (ai4328@type ai4320@ai431b)) (let ((ai432c@kwd* (if (ai2eec@id? ai4326@kwd) (cons ai4326@kwd ai430a@kwd*) ai430a@kwd*))) (let ((ai432e@t ai4328@type)) (if (memv ai432e@t '(define)) (call-with-values (lambda () (ai3075@parse-define ai4318@e)) (lambda (ai4334@ai4331 ai4335@ai4333) (let ((ai4338@rhs ai4335@ai4333) (ai4339@id ai4334@ai4331)) (begin (if (ai2ef8@bound-id-member? ai4339@id ai432c@kwd*) (ai31d3@syntax-violation '#f '"cannot redefine keyword" ai4318@e) (void)) (call-with-values (lambda () (ai2e7c@gen-define-label+loc ai4339@id ai430c@rib)) (lambda (ai4340@ai433d ai4341@ai433f) (let ((ai4344@lex ai4341@ai433f) (ai4345@lab ai4340@ai433d)) (begin (ai2ea2@extend-rib! ai430c@rib ai4339@id ai4345@lab) (ai314b@chi-body* (cdr ai4304@e*) (ai3083@add-lexical ai4345@lab ai4344@lex ai4305@r) ai4306@mr (cons ai4344@lex ai4307@lex*) (cons ai4338@rhs ai4308@rhs*) ai4309@mod** ai432c@kwd* ai430b@exp* ai430c@rib ai430d@top?))))))))) (if (memv ai432e@t '(define-syntax)) (call-with-values (lambda () (ai3077@parse-define-syntax ai4318@e)) (lambda (ai434c@ai4349 ai434d@ai434b) (let ((ai4350@rhs ai434d@ai434b) (ai4351@id ai434c@ai4349)) (begin (if (ai2ef8@bound-id-member? ai4351@id ai432c@kwd*) (ai31d3@syntax-violation '#f '"cannot redefine keyword" ai4318@e) (void)) (let ((ai4354@lab (ai2e7e@gen-define-label ai4351@id ai430c@rib)) (ai4355@expanded-rhs (ai314d@expand-transformer ai4350@rhs ai4306@mr))) (begin (ai2ea2@extend-rib! ai430c@rib ai4351@id ai4354@lab) (let ((ai4358@b (ai2f24@make-eval-transformer ai4355@expanded-rhs))) (ai314b@chi-body* (cdr ai4304@e*) (cons (cons ai4354@lab ai4358@b) ai4305@r) (cons (cons ai4354@lab ai4358@b) ai4306@mr) ai4307@lex* ai4308@rhs* ai4309@mod** ai432c@kwd* ai430b@exp* ai430c@rib ai430d@top?)))))))) (if (memv ai432e@t '(let-syntax letrec-syntax)) (let ((ai435a@t ai4318@e)) (let ((ai435c@ls/false (ai30f3@syntax-dispatch ai435a@t '(_ #(each (any any)) . each-any)))) (if (and ai435c@ls/false (apply (lambda (ai435e@xlhs* ai435f@xrhs* ai4360@xbody*) (if (not (ai2ef4@valid-bound-ids? ai435e@xlhs*)) (ai31d3@syntax-violation '#f '"invalid identifiers" ai4318@e) (void))) ai435c@ls/false)) (apply (lambda (ai4364@xlhs* ai4365@xrhs* ai4366@xbody*) (let ((ai436a@xlab* (map ai2e78@gen-label ai4364@xlhs*))) (let ((ai436c@xrib (ai2eac@make-full-rib ai4364@xlhs* ai436a@xlab*))) (let ((ai436e@xb* (map (lambda (ai4370@x) (ai2f24@make-eval-transformer (ai314d@expand-transformer (if (eq? ai4328@type 'let-syntax) ai4370@x (ai2ed8@add-subst ai436c@xrib ai4370@x)) ai4306@mr))) ai4365@xrhs*))) (ai314b@chi-body* (append (map (lambda (ai4372@x) (ai2ed8@add-subst ai436c@xrib ai4372@x)) ai4366@xbody*) (cdr ai4304@e*)) (append (map cons ai436a@xlab* ai436e@xb*) ai4305@r) (append (map cons ai436a@xlab* ai436e@xb*) ai4306@mr) ai4307@lex* ai4308@rhs* ai4309@mod** ai432c@kwd* ai430b@exp* ai430c@rib ai430d@top?))))) ai435c@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai435a@t)))) (if (memv ai432e@t '(begin)) (let ((ai4374@t ai4318@e)) (let ((ai4376@ls/false (ai30f3@syntax-dispatch ai4374@t '(_ . each-any)))) (if ai4376@ls/false (apply (lambda (ai4378@x*) (ai314b@chi-body* (append ai4378@x* (cdr ai4304@e*)) ai4305@r ai4306@mr ai4307@lex* ai4308@rhs* ai4309@mod** ai432c@kwd* ai430b@exp* ai430c@rib ai430d@top?)) ai4376@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai4374@t)))) (if (memv ai432e@t '(global-macro global-macro!)) (ai314b@chi-body* (cons (ai2ed8@add-subst ai430c@rib (ai310f@chi-global-macro ai4327@value ai4318@e)) (cdr ai4304@e*)) ai4305@r ai4306@mr ai4307@lex* ai4308@rhs* ai4309@mod** ai432c@kwd* ai430b@exp* ai430c@rib ai430d@top?) (if (memv ai432e@t '(local-macro local-macro!)) (ai314b@chi-body* (cons (ai2ed8@add-subst ai430c@rib (ai310d@chi-local-macro ai4327@value ai4318@e)) (cdr ai4304@e*)) ai4305@r ai4306@mr ai4307@lex* ai4308@rhs* ai4309@mod** ai432c@kwd* ai430b@exp* ai430c@rib ai430d@top?) (if (memv ai432e@t '(macro macro!)) (ai314b@chi-body* (cons (ai2ed8@add-subst ai430c@rib (ai310b@chi-macro ai4327@value ai4318@e)) (cdr ai4304@e*)) ai4305@r ai4306@mr ai4307@lex* ai4308@rhs* ai4309@mod** ai432c@kwd* ai430b@exp* ai430c@rib ai430d@top?) (if (memv ai432e@t '(module)) (call-with-values (lambda () (ai3149@chi-internal-module ai4318@e ai4305@r ai4306@mr ai4307@lex* ai4308@rhs* ai4309@mod** ai432c@kwd*)) (lambda (ai438a@ai437b ai438b@ai437d ai438c@ai437f ai438d@ai4381 ai438e@ai4383 ai438f@ai4385 ai4390@ai4387 ai4391@ai4389) (let ((ai439a@kwd* ai4391@ai4389) (ai439b@mod** ai4390@ai4387) (ai439c@mr ai438f@ai4385) (ai439d@r ai438e@ai4383) (ai439e@m-exp-lab* ai438d@ai4381) (ai439f@m-exp-id* ai438c@ai437f) (ai43a0@rhs* ai438b@ai437d) (ai43a1@lex* ai438a@ai437b)) (begin (vector-for-each (lambda (ai43aa@id ai43ab@lab) (ai2ea2@extend-rib! ai430c@rib ai43aa@id ai43ab@lab)) ai439f@m-exp-id* ai439e@m-exp-lab*) (ai314b@chi-body* (cdr ai4304@e*) ai439d@r ai439c@mr ai43a1@lex* ai43a0@rhs* ai439b@mod** ai439a@kwd* ai430b@exp* ai430c@rib ai430d@top?))))) (if (memv ai432e@t '(library)) (begin (ai31b5@library-expander (ai2f00@stx->datum ai4318@e)) (ai314b@chi-body* (cdr ai4304@e*) ai4305@r ai4306@mr ai4307@lex* ai4308@rhs* ai4309@mod** ai432c@kwd* ai430b@exp* ai430c@rib ai430d@top?)) (if (memv ai432e@t '(export)) (let ((ai43ae@t ai4318@e)) (let ((ai43b0@ls/false (ai30f3@syntax-dispatch ai43ae@t '(_ . each-any)))) (if ai43b0@ls/false (apply (lambda (ai43b2@exp-decl*) (ai314b@chi-body* (cdr ai4304@e*) ai4305@r ai4306@mr ai4307@lex* ai4308@rhs* ai4309@mod** ai432c@kwd* (append ai43b2@exp-decl* ai430b@exp*) ai430c@rib ai430d@top?)) ai43b0@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai43ae@t)))) (if (memv ai432e@t '(import)) (let ((ai43b5@module-import? '#f) (ai43b7@module-import '#f) (ai43b9@library-import '#f)) (begin (set! ai43b5@module-import? (lambda (ai4408@e) (let ((ai440a@t ai4408@e)) (let ((ai440c@ls/false (ai30f3@syntax-dispatch ai440a@t '(_ any)))) (if (and ai440c@ls/false (apply (lambda (ai440e@id) (ai2eec@id? ai440e@id)) ai440c@ls/false)) (apply (lambda (ai4410@id) '#t) ai440c@ls/false) (let ((ai4412@t ai440a@t)) (let ((ai4414@ls/false (ai30f3@syntax-dispatch ai4412@t '(_ . each-any)))) (if ai4414@ls/false (apply (lambda (ai4416@imp*) '#f) ai4414@ls/false) (let ((ai4418@t ai4412@t)) (let ((ai441a@ls/false (ai30f3@syntax-dispatch ai4418@t '_))) (if ai441a@ls/false (apply (lambda () (ai31d3@syntax-violation '#f '"malformed import form" ai4408@e)) ai441a@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai4418@t)))))))))))) (set! ai43b7@module-import (lambda (ai43e6@e ai43e7@r) (let ((ai43ea@t ai43e6@e)) (let ((ai43ec@ls/false (ai30f3@syntax-dispatch ai43ea@t '(_ any)))) (if (and ai43ec@ls/false (apply (lambda (ai43ee@id) (ai2eec@id? ai43ee@id)) ai43ec@ls/false)) (apply (lambda (ai43f0@id) (call-with-values (lambda () (ai2f0e@syntax-type ai43f0@id ai43e7@r)) (lambda (ai43f8@ai43f3 ai43f9@ai43f5 ai43fa@ai43f7) (let ((ai43fe@kwd ai43fa@ai43f7) (ai43ff@value ai43f9@ai43f5) (ai4400@type ai43f8@ai43f3)) (let ((ai4404@t ai4400@type)) (if (memv ai4404@t '($module)) (let ((ai4406@iface ai43ff@value)) (values (ai3147@module-interface-exp-id* ai4406@iface ai43f0@id) (ai3141@module-interface-exp-lab-vec ai4406@iface))) (ai31d3@syntax-violation '#f '"invalid import" ai43e6@e))))))) ai43ec@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai43ea@t)))))) (set! ai43b9@library-import (lambda (ai43ca@e) (let ((ai43cc@t ai43ca@e)) (let ((ai43ce@ls/false (ai30f3@syntax-dispatch ai43cc@t '(any . each-any)))) (if ai43ce@ls/false (apply (lambda (ai43d0@ctxt ai43d1@imp*) (call-with-values (lambda () (ai3155@parse-import-spec* (ai31d9@syntax->datum ai43d1@imp*))) (lambda (ai43d8@ai43d5 ai43d9@ai43d7) (let ((ai43dc@subst-labels ai43d9@ai43d7) (ai43dd@subst-names ai43d8@ai43d5)) (values (vector-map (lambda (ai43e0@name) (ai2ecc@datum->stx ai43d0@ctxt ai43e0@name)) ai43dd@subst-names) ai43dc@subst-labels))))) ai43ce@ls/false) (let ((ai43e2@t ai43cc@t)) (let ((ai43e4@ls/false (ai30f3@syntax-dispatch ai43e2@t '_))) (if ai43e4@ls/false (apply (lambda () (ai31d3@syntax-violation '#f '"invalid import form" ai43ca@e)) ai43e4@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai43e2@t))))))))) (begin (call-with-values (lambda () (if (ai43b5@module-import? ai4318@e) (ai43b7@module-import ai4318@e ai4305@r) (ai43b9@library-import ai4318@e))) (lambda (ai43be@ai43bb ai43bf@ai43bd) (let ((ai43c2@lab* ai43bf@ai43bd) (ai43c3@id* ai43be@ai43bb)) (vector-for-each (lambda (ai43c6@id ai43c7@lab) (ai2ea2@extend-rib! ai430c@rib ai43c6@id ai43c7@lab)) ai43c3@id* ai43c2@lab*)))) (ai314b@chi-body* (cdr ai4304@e*) ai4305@r ai4306@mr ai4307@lex* ai4308@rhs* ai4309@mod** ai432c@kwd* ai430b@exp* ai430c@rib ai430d@top?)))) (if ai430d@top? (ai314b@chi-body* (cdr ai4304@e*) ai4305@r ai4306@mr (cons (ai2e74@gen-lexical 'dummy) ai4307@lex*) (cons (cons 'top-expr ai4318@e) ai4308@rhs*) ai4309@mod** ai432c@kwd* ai430b@exp* ai430c@rib ai430d@top?) (values ai4304@e* ai4305@r ai4306@mr ai4307@lex* ai4308@rhs* ai4309@mod** ai432c@kwd* ai430b@exp*)))))))))))))))))))))) (set! ai4bf1@ai314b@chi-body* ai314b@chi-body*) (set! ai314d@expand-transformer (lambda (ai441c@expr ai441d@r) (let ((ai4420@rtc (ai3159@make-collector))) (let ((ai4422@expanded-rhs (let ((ai442c@ai4425 ai315b@inv-collector) (ai442d@ai4427 ai315d@vis-collector) (ai442e@ai4429 ai4420@rtc) (ai442f@ai442b (lambda (ai4434@x) (values)))) (let ((ai4436@swap (lambda () (begin (let ((ai4438@t (ai442c@ai4425))) (begin (ai442c@ai4425 ai442e@ai4429) (set! ai442e@ai4429 ai4438@t))) (let ((ai443a@t (ai442d@ai4427))) (begin (ai442d@ai4427 ai442f@ai442b) (set! ai442f@ai442b ai443a@t))))))) (dynamic-wind ai4436@swap (lambda () (ai3115@chi-expr ai441c@expr ai441d@r ai441d@r)) ai4436@swap))))) (begin (for-each (let ((ai443c@mark-visit (ai315d@vis-collector))) (lambda (ai443e@x) (begin (ai2d01@ai2b3f@invoke-library ai443e@x) (ai443c@mark-visit ai443e@x)))) (ai4420@rtc)) ai4422@expanded-rhs))))) (set! ai4bf2@ai314d@expand-transformer ai314d@expand-transformer) (set! ai314f@parse-exports (lambda (ai4440@exp*) (let ai4448@f ((ai4442@exp* ai4440@exp*) (ai4443@int* '()) (ai4444@ext* '())) (if (null? ai4442@exp*) (begin (if (not (ai2ef4@valid-bound-ids? ai4444@ext*)) (ai31d3@syntax-violation 'export '"invalid exports" (ai3129@find-dups ai4444@ext*)) (void)) (values (map ai31d9@syntax->datum ai4444@ext*) ai4443@int*)) (let ((ai444a@t (car ai4442@exp*))) (let ((ai444c@ls/false (ai30f3@syntax-dispatch ai444a@t '(any . #(each (any any)))))) (if ai444c@ls/false (apply (lambda (ai444e@rename ai444f@i* ai4450@e*) (begin (if (not (and (eq? (ai31d9@syntax->datum ai444e@rename) 'rename) (for-all ai2eec@id? ai444f@i*) (for-all ai2eec@id? ai4450@e*))) (ai31d3@syntax-violation 'export '"invalid export specifier" (car ai4442@exp*)) (void)) (ai4448@f (cdr ai4442@exp*) (append ai444f@i* ai4443@int*) (append ai4450@e* ai4444@ext*)))) ai444c@ls/false) (let ((ai4454@t ai444a@t)) (let ((ai4456@ls/false (ai30f3@syntax-dispatch ai4454@t 'any))) (if ai4456@ls/false (apply (lambda (ai4458@ie) (begin (if (not (ai2eec@id? ai4458@ie)) (ai31d3@syntax-violation 'export '"invalid export" ai4458@ie) (void)) (ai4448@f (cdr ai4442@exp*) (cons ai4458@ie ai4443@int*) (cons ai4458@ie ai4444@ext*)))) ai4456@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai4454@t))))))))))) (set! ai4bf3@ai314f@parse-exports ai314f@parse-exports) (set! ai3151@parse-library-name (lambda (ai445a@spec) (let ((ai445d@parse '#f)) (begin (set! ai445d@parse (lambda (ai446a@x) (let ((ai446c@t ai446a@x)) (let ((ai446e@ls/false (ai30f3@syntax-dispatch ai446c@t '(each-any)))) (if (and ai446e@ls/false (apply (lambda (ai4470@v*) (for-all (lambda (ai4472@x) (let ((ai4474@x (ai31d9@syntax->datum ai4472@x))) (and (integer? ai4474@x) (exact? ai4474@x)))) ai4470@v*)) ai446e@ls/false)) (apply (lambda (ai4476@v*) (values '() (map ai31d9@syntax->datum ai4476@v*))) ai446e@ls/false) (let ((ai4478@t ai446c@t)) (let ((ai447a@ls/false (ai30f3@syntax-dispatch ai4478@t '(any . any)))) (if (and ai447a@ls/false (apply (lambda (ai447c@x ai447d@rest) (symbol? (ai31d9@syntax->datum ai447c@x))) ai447a@ls/false)) (apply (lambda (ai4480@x ai4481@rest) (call-with-values (lambda () (ai445d@parse ai4481@rest)) (lambda (ai4488@ai4485 ai4489@ai4487) (let ((ai448c@v* ai4489@ai4487) (ai448d@x* ai4488@ai4485)) (values (cons (ai31d9@syntax->datum ai4480@x) ai448d@x*) ai448c@v*))))) ai447a@ls/false) (let ((ai4490@t ai4478@t)) (let ((ai4492@ls/false (ai30f3@syntax-dispatch ai4490@t '()))) (if ai4492@ls/false (apply (lambda () (values '() '())) ai4492@ls/false) (let ((ai4494@t ai4490@t)) (let ((ai4496@ls/false (ai30f3@syntax-dispatch ai4494@t '_))) (if ai4496@ls/false (apply (lambda () (ai31d3@syntax-violation '#f '"invalid library name" ai445a@spec)) ai4496@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai4494@t))))))))))))))) (call-with-values (lambda () (ai445d@parse ai445a@spec)) (lambda (ai4462@ai445f ai4463@ai4461) (let ((ai4466@ver* ai4463@ai4461) (ai4467@name* ai4462@ai445f)) (begin (if (null? ai4467@name*) (ai31d3@syntax-violation '#f '"empty library name" ai445a@spec) (void)) (values ai4467@name* ai4466@ver*))))))))) (set! ai4bf4@ai3151@parse-library-name ai3151@parse-library-name) (set! ai3153@parse-library (lambda (ai4498@e) (let ((ai449a@t ai4498@e)) (let ((ai449c@ls/false (ai30f3@syntax-dispatch ai449a@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and ai449c@ls/false (apply (lambda (ai449e@library ai449f@name* ai44a0@export ai44a1@exp* ai44a2@import ai44a3@imp* ai44a4@b*) (and (eq? (ai31d9@syntax->datum ai44a0@export) 'export) (eq? (ai31d9@syntax->datum ai44a2@import) 'import) (eq? (ai31d9@syntax->datum ai449e@library) 'library))) ai449c@ls/false)) (apply (lambda (ai44ac@library ai44ad@name* ai44ae@export ai44af@exp* ai44b0@import ai44b1@imp* ai44b2@b*) (values ai44ad@name* ai44af@exp* ai44b1@imp* ai44b2@b*)) ai449c@ls/false) (let ((ai44ba@t ai449a@t)) (let ((ai44bc@ls/false (ai30f3@syntax-dispatch ai44ba@t '_))) (if ai44bc@ls/false (apply (lambda () (ai31d3@syntax-violation '#f '"malformed library" ai4498@e)) ai44bc@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai44ba@t))))))))) (set! ai4bf5@ai3153@parse-library ai3153@parse-library) (set! ai3155@parse-import-spec* (let ((ai44bf@idsyn? '#f) (ai44c1@dup-error '#f) (ai44c3@merge-substs '#f) (ai44c5@exclude* '#f) (ai44c7@find* '#f) (ai44c9@rem* '#f) (ai44cb@remove-dups '#f) (ai44cd@parse-library-name '#f) (ai44cf@import-library '#f) (ai44d1@get-import '#f) (ai44d3@add-imports! '#f)) (begin (set! ai44bf@idsyn? (lambda (ai46c8@x) (symbol? (ai31d9@syntax->datum ai46c8@x)))) (set! ai44c1@dup-error (lambda (ai46c6@name) (ai31d3@syntax-violation 'import '"two imports with different bindings" ai46c6@name))) (set! ai44c3@merge-substs (lambda (ai46b4@s ai46b5@subst) (let ((ai46b9@insert-to-subst '#f)) (begin (set! ai46b9@insert-to-subst (lambda (ai46ba@a ai46bb@subst) (let ((ai46be@name (car ai46ba@a)) (ai46bf@label (cdr ai46ba@a))) (let ((ai46c2@t (assq ai46be@name ai46bb@subst))) (if ai46c2@t ((lambda (ai46c4@x) (if (eq? (cdr ai46c4@x) ai46bf@label) ai46bb@subst (ai44c1@dup-error ai46be@name))) ai46c2@t) (cons ai46ba@a ai46bb@subst)))))) (if (null? ai46b4@s) ai46b5@subst (ai46b9@insert-to-subst (car ai46b4@s) (ai44c3@merge-substs (cdr ai46b4@s) ai46b5@subst))))))) (set! ai44c5@exclude* (lambda (ai4684@sym* ai4685@subst) (let ((ai4689@exclude '#f)) (begin (set! ai4689@exclude (lambda (ai46a2@sym ai46a3@subst) (if (null? ai46a3@subst) (ai31d3@syntax-violation 'import '"cannot rename unbound identifier" ai46a2@sym) (if (eq? ai46a2@sym (caar ai46a3@subst)) (values (cdar ai46a3@subst) (cdr ai46a3@subst)) (let ((ai46a6@a (car ai46a3@subst))) (call-with-values (lambda () (ai4689@exclude ai46a2@sym (cdr ai46a3@subst))) (lambda (ai46ac@ai46a9 ai46ad@ai46ab) (let ((ai46b0@subst ai46ad@ai46ab) (ai46b1@old ai46ac@ai46a9)) (values ai46b1@old (cons ai46a6@a ai46b0@subst)))))))))) (if (null? ai4684@sym*) (values '() ai4685@subst) (call-with-values (lambda () (ai4689@exclude (car ai4684@sym*) ai4685@subst)) (lambda (ai468e@ai468b ai468f@ai468d) (let ((ai4692@subst ai468f@ai468d) (ai4693@old ai468e@ai468b)) (call-with-values (lambda () (ai44c5@exclude* (cdr ai4684@sym*) ai4692@subst)) (lambda (ai469a@ai4697 ai469b@ai4699) (let ((ai469e@subst ai469b@ai4699) (ai469f@old* ai469a@ai4697)) (values (cons ai4693@old ai469f@old*) ai469e@subst)))))))))))) (set! ai44c7@find* (lambda (ai467c@sym* ai467d@subst) (map (lambda (ai4680@x) (let ((ai4682@t (assq ai4680@x ai467d@subst))) (if ai4682@t (cdr ai4682@t) (ai31d3@syntax-violation 'import '"cannot find identifier" ai4680@x)))) ai467c@sym*))) (set! ai44c9@rem* (lambda (ai4674@sym* ai4675@subst) (let ai467a@f ((ai4678@subst ai4675@subst)) (if (null? ai4678@subst) '() (if (memq (caar ai4678@subst) ai4674@sym*) (ai467a@f (cdr ai4678@subst)) (cons (car ai4678@subst) (ai467a@f (cdr ai4678@subst)))))))) (set! ai44cb@remove-dups (lambda (ai4672@ls) (if (null? ai4672@ls) '() (if (memq (car ai4672@ls) (cdr ai4672@ls)) (ai44cb@remove-dups (cdr ai4672@ls)) (cons (car ai4672@ls) (ai44cb@remove-dups (cdr ai4672@ls))))))) (set! ai44cd@parse-library-name (lambda (ai458a@spec) (let ((ai458d@subversion? '#f) (ai458f@subversion-pred '#f) (ai4591@version-pred '#f)) (begin (set! ai458d@subversion? (lambda (ai466e@x) (let ((ai4670@x (ai31d9@syntax->datum ai466e@x))) (and (integer? ai4670@x) (exact? ai4670@x) (>= ai4670@x '0))))) (set! ai458f@subversion-pred (lambda (ai460e@x*) (let ((ai4610@t ai460e@x*)) (let ((ai4612@ls/false (ai30f3@syntax-dispatch ai4610@t 'any))) (if (and ai4612@ls/false (apply (lambda (ai4614@n) (ai458d@subversion? ai4614@n)) ai4612@ls/false)) (apply (lambda (ai4616@n) (lambda (ai4618@x) (= ai4618@x (ai31d9@syntax->datum ai4616@n)))) ai4612@ls/false) (let ((ai461a@t ai4610@t)) (let ((ai461c@ls/false (ai30f3@syntax-dispatch ai461a@t '(any . each-any)))) (if (and ai461c@ls/false (apply (lambda (ai461e@p? ai461f@sub*) (eq? (ai31d9@syntax->datum ai461e@p?) 'and)) ai461c@ls/false)) (apply (lambda (ai4622@p? ai4623@sub*) (let ((ai4626@p* (map ai458f@subversion-pred ai4623@sub*))) (lambda (ai4628@x) (for-all (lambda (ai462a@p) (ai462a@p ai4628@x)) ai4626@p*)))) ai461c@ls/false) (let ((ai462c@t ai461a@t)) (let ((ai462e@ls/false (ai30f3@syntax-dispatch ai462c@t '(any . each-any)))) (if (and ai462e@ls/false (apply (lambda (ai4630@p? ai4631@sub*) (eq? (ai31d9@syntax->datum ai4630@p?) 'or)) ai462e@ls/false)) (apply (lambda (ai4634@p? ai4635@sub*) (let ((ai4638@p* (map ai458f@subversion-pred ai4635@sub*))) (lambda (ai463a@x) (exists (lambda (ai463c@p) (ai463c@p ai463a@x)) ai4638@p*)))) ai462e@ls/false) (let ((ai463e@t ai462c@t)) (let ((ai4640@ls/false (ai30f3@syntax-dispatch ai463e@t '(any any)))) (if (and ai4640@ls/false (apply (lambda (ai4642@p? ai4643@sub) (eq? (ai31d9@syntax->datum ai4642@p?) 'not)) ai4640@ls/false)) (apply (lambda (ai4646@p? ai4647@sub) (let ((ai464a@p (ai458f@subversion-pred ai4647@sub))) (lambda (ai464c@x) (not (ai464a@p ai464c@x))))) ai4640@ls/false) (let ((ai464e@t ai463e@t)) (let ((ai4650@ls/false (ai30f3@syntax-dispatch ai464e@t '(any any)))) (if (and ai4650@ls/false (apply (lambda (ai4652@p? ai4653@n) (and (eq? (ai31d9@syntax->datum ai4652@p?) '<=) (ai458d@subversion? ai4653@n))) ai4650@ls/false)) (apply (lambda (ai4656@p? ai4657@n) (lambda (ai465a@x) (<= ai465a@x (ai31d9@syntax->datum ai4657@n)))) ai4650@ls/false) (let ((ai465c@t ai464e@t)) (let ((ai465e@ls/false (ai30f3@syntax-dispatch ai465c@t '(any any)))) (if (and ai465e@ls/false (apply (lambda (ai4660@p? ai4661@n) (and (eq? (ai31d9@syntax->datum ai4660@p?) '>=) (ai458d@subversion? ai4661@n))) ai465e@ls/false)) (apply (lambda (ai4664@p? ai4665@n) (lambda (ai4668@x) (>= ai4668@x (ai31d9@syntax->datum ai4665@n)))) ai465e@ls/false) (let ((ai466a@t ai465c@t)) (let ((ai466c@ls/false (ai30f3@syntax-dispatch ai466a@t '_))) (if ai466c@ls/false (apply (lambda () (ai31d3@syntax-violation 'import '"invalid sub-version spec" ai458a@spec ai460e@x*)) ai466c@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai466a@t)))))))))))))))))))))))) (set! ai4591@version-pred (lambda (ai45be@x*) (let ((ai45c0@t ai45be@x*)) (let ((ai45c2@ls/false (ai30f3@syntax-dispatch ai45c0@t '()))) (if ai45c2@ls/false (apply (lambda () (lambda (ai45c4@x) '#t)) ai45c2@ls/false) (let ((ai45c6@t ai45c0@t)) (let ((ai45c8@ls/false (ai30f3@syntax-dispatch ai45c6@t '(any . each-any)))) (if (and ai45c8@ls/false (apply (lambda (ai45ca@c ai45cb@ver*) (eq? (ai31d9@syntax->datum ai45ca@c) 'and)) ai45c8@ls/false)) (apply (lambda (ai45ce@c ai45cf@ver*) (let ((ai45d2@p* (map ai4591@version-pred ai45cf@ver*))) (lambda (ai45d4@x) (for-all (lambda (ai45d6@p) (ai45d6@p ai45d4@x)) ai45d2@p*)))) ai45c8@ls/false) (let ((ai45d8@t ai45c6@t)) (let ((ai45da@ls/false (ai30f3@syntax-dispatch ai45d8@t '(any . each-any)))) (if (and ai45da@ls/false (apply (lambda (ai45dc@c ai45dd@ver*) (eq? (ai31d9@syntax->datum ai45dc@c) 'or)) ai45da@ls/false)) (apply (lambda (ai45e0@c ai45e1@ver*) (let ((ai45e4@p* (map ai4591@version-pred ai45e1@ver*))) (lambda (ai45e6@x) (exists (lambda (ai45e8@p) (ai45e8@p ai45e6@x)) ai45e4@p*)))) ai45da@ls/false) (let ((ai45ea@t ai45d8@t)) (let ((ai45ec@ls/false (ai30f3@syntax-dispatch ai45ea@t '(any any)))) (if (and ai45ec@ls/false (apply (lambda (ai45ee@c ai45ef@ver) (eq? (ai31d9@syntax->datum ai45ee@c) 'not)) ai45ec@ls/false)) (apply (lambda (ai45f2@c ai45f3@ver) (let ((ai45f6@p (ai4591@version-pred ai45f3@ver))) (lambda (ai45f8@x) (not (ai45f6@p ai45f8@x))))) ai45ec@ls/false) (let ((ai45fa@t ai45ea@t)) (let ((ai45fc@ls/false (ai30f3@syntax-dispatch ai45fa@t 'each-any))) (if ai45fc@ls/false (apply (lambda (ai45fe@sub*) (let ((ai4600@p* (map ai458f@subversion-pred ai45fe@sub*))) (lambda (ai4602@x) (let ai4608@f ((ai4604@p* ai4600@p*) (ai4605@x ai4602@x)) (if (null? ai4604@p*) '#t (if (null? ai4605@x) '#f (and ((car ai4604@p*) (car ai4605@x)) (ai4608@f (cdr ai4604@p*) (cdr ai4605@x))))))))) ai45fc@ls/false) (let ((ai460a@t ai45fa@t)) (let ((ai460c@ls/false (ai30f3@syntax-dispatch ai460a@t '_))) (if ai460c@ls/false (apply (lambda () (ai31d3@syntax-violation 'import '"invalid version spec" ai458a@spec ai45be@x*)) ai460c@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai460a@t))))))))))))))))))))) (let ai4594@f ((ai4592@x ai458a@spec)) (let ((ai4596@t ai4592@x)) (let ((ai4598@ls/false (ai30f3@syntax-dispatch ai4596@t '(each-any)))) (if ai4598@ls/false (apply (lambda (ai459a@version-spec*) (values '() (ai4591@version-pred ai459a@version-spec*))) ai4598@ls/false) (let ((ai459c@t ai4596@t)) (let ((ai459e@ls/false (ai30f3@syntax-dispatch ai459c@t '(any . any)))) (if (and ai459e@ls/false (apply (lambda (ai45a0@x ai45a1@x*) (ai44bf@idsyn? ai45a0@x)) ai459e@ls/false)) (apply (lambda (ai45a4@x ai45a5@x*) (call-with-values (lambda () (ai4594@f ai45a5@x*)) (lambda (ai45ac@ai45a9 ai45ad@ai45ab) (let ((ai45b0@pred ai45ad@ai45ab) (ai45b1@name ai45ac@ai45a9)) (values (cons (ai31d9@syntax->datum ai45a4@x) ai45b1@name) ai45b0@pred))))) ai459e@ls/false) (let ((ai45b4@t ai459c@t)) (let ((ai45b6@ls/false (ai30f3@syntax-dispatch ai45b4@t '()))) (if ai45b6@ls/false (apply (lambda () (values '() (lambda (ai45b8@x) '#t))) ai45b6@ls/false) (let ((ai45ba@t ai45b4@t)) (let ((ai45bc@ls/false (ai30f3@syntax-dispatch ai45ba@t '_))) (if ai45bc@ls/false (apply (lambda () (ai31d3@syntax-violation '#f '"invalid import spec" ai458a@spec)) ai45bc@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai45ba@t)))))))))))))))))) (set! ai44cf@import-library (lambda (ai457a@spec*) (call-with-values (lambda () (ai44cd@parse-library-name ai457a@spec*)) (lambda (ai4580@ai457d ai4581@ai457f) (let ((ai4584@pred ai4581@ai457f) (ai4585@name ai4580@ai457d)) (begin (if (null? ai4585@name) (ai31d3@syntax-violation 'import '"empty library name" ai457a@spec*) (void)) (let ((ai4588@lib (ai2cfa@ai2b31@find-library-by-name ai4585@name))) (begin (if (not ai4588@lib) (ai31d3@syntax-violation 'import '"cannot find library with required name" ai4585@name) (void)) (if (not (ai4584@pred (ai2cd4@ai2ae5@library-version ai4588@lib))) (ai31d3@syntax-violation 'import '"library does not satisfy version specification" ai457a@spec* ai4588@lib) (void)) ((ai315f@imp-collector) ai4588@lib) (ai2cdc@ai2af5@library-subst ai4588@lib))))))))) (set! ai44d1@get-import (lambda (ai44ec@spec) (let ((ai44ee@t ai44ec@spec)) (let ((ai44f0@ls/false (ai30f3@syntax-dispatch ai44ee@t '(any . each-any)))) (if (and ai44f0@ls/false (apply (lambda (ai44f2@x ai44f3@x*) (not (memq (ai31d9@syntax->datum ai44f2@x) '(for rename except only prefix library)))) ai44f0@ls/false)) (apply (lambda (ai44f6@x ai44f7@x*) (ai44cf@import-library (cons ai44f6@x ai44f7@x*))) ai44f0@ls/false) (let ((ai44fa@t ai44ee@t)) (let ((ai44fc@ls/false (ai30f3@syntax-dispatch ai44fa@t '(any any . #(each (any any)))))) (if (and ai44fc@ls/false (apply (lambda (ai44fe@rename ai44ff@isp ai4500@old* ai4501@new*) (and (eq? (ai31d9@syntax->datum ai44fe@rename) 'rename) (for-all ai44bf@idsyn? ai4500@old*) (for-all ai44bf@idsyn? ai4501@new*))) ai44fc@ls/false)) (apply (lambda (ai4506@rename ai4507@isp ai4508@old* ai4509@new*) (let ((ai450e@subst (ai44d1@get-import ai4507@isp)) (ai450f@old* (map ai31d9@syntax->datum ai4508@old*)) (ai4510@new* (map ai31d9@syntax->datum ai4509@new*))) (let ((ai4514@old-label* (ai44c7@find* ai450f@old* ai450e@subst))) (let ((ai4516@subst (ai44c9@rem* ai450f@old* ai450e@subst))) (ai44c3@merge-substs (map cons ai4510@new* ai4514@old-label*) ai4516@subst))))) ai44fc@ls/false) (let ((ai4518@t ai44fa@t)) (let ((ai451a@ls/false (ai30f3@syntax-dispatch ai4518@t '(any any . each-any)))) (if (and ai451a@ls/false (apply (lambda (ai451c@except ai451d@isp ai451e@sym*) (and (eq? (ai31d9@syntax->datum ai451c@except) 'except) (for-all ai44bf@idsyn? ai451e@sym*))) ai451a@ls/false)) (apply (lambda (ai4522@except ai4523@isp ai4524@sym*) (let ((ai4528@subst (ai44d1@get-import ai4523@isp))) (ai44c9@rem* (map ai31d9@syntax->datum ai4524@sym*) ai4528@subst))) ai451a@ls/false) (let ((ai452a@t ai4518@t)) (let ((ai452c@ls/false (ai30f3@syntax-dispatch ai452a@t '(any any . each-any)))) (if (and ai452c@ls/false (apply (lambda (ai452e@only ai452f@isp ai4530@sym*) (and (eq? (ai31d9@syntax->datum ai452e@only) 'only) (for-all ai44bf@idsyn? ai4530@sym*))) ai452c@ls/false)) (apply (lambda (ai4534@only ai4535@isp ai4536@sym*) (let ((ai453a@subst (ai44d1@get-import ai4535@isp)) (ai453b@sym* (map ai31d9@syntax->datum ai4536@sym*))) (let ((ai453e@sym* (ai44cb@remove-dups ai453b@sym*))) (let ((ai4540@lab* (ai44c7@find* ai453e@sym* ai453a@subst))) (map cons ai453e@sym* ai4540@lab*))))) ai452c@ls/false) (let ((ai4542@t ai452a@t)) (let ((ai4544@ls/false (ai30f3@syntax-dispatch ai4542@t '(any any any)))) (if (and ai4544@ls/false (apply (lambda (ai4546@prefix ai4547@isp ai4548@p) (and (eq? (ai31d9@syntax->datum ai4546@prefix) 'prefix) (ai44bf@idsyn? ai4548@p))) ai4544@ls/false)) (apply (lambda (ai454c@prefix ai454d@isp ai454e@p) (let ((ai4552@subst (ai44d1@get-import ai454d@isp)) (ai4553@prefix (symbol->string (ai31d9@syntax->datum ai454e@p)))) (map (lambda (ai4556@x) (cons (string->symbol (string-append ai4553@prefix (symbol->string (car ai4556@x)))) (cdr ai4556@x))) ai4552@subst))) ai4544@ls/false) (let ((ai4558@t ai4542@t)) (let ((ai455a@ls/false (ai30f3@syntax-dispatch ai4558@t '(any each-any)))) (if (and ai455a@ls/false (apply (lambda (ai455c@library ai455d@spec*) (eq? (ai31d9@syntax->datum ai455c@library) 'library)) ai455a@ls/false)) (apply (lambda (ai4560@library ai4561@spec*) (ai44cf@import-library ai4561@spec*)) ai455a@ls/false) (let ((ai4564@t ai4558@t)) (let ((ai4566@ls/false (ai30f3@syntax-dispatch ai4564@t '(any any . any)))) (if (and ai4566@ls/false (apply (lambda (ai4568@for ai4569@isp ai456a@rest) (eq? (ai31d9@syntax->datum ai4568@for) 'for)) ai4566@ls/false)) (apply (lambda (ai456e@for ai456f@isp ai4570@rest) (ai44d1@get-import ai456f@isp)) ai4566@ls/false) (let ((ai4574@t ai4564@t)) (let ((ai4576@ls/false (ai30f3@syntax-dispatch ai4574@t 'any))) (if ai4576@ls/false (apply (lambda (ai4578@spec) (ai31d3@syntax-violation 'import '"invalid import spec" ai4578@spec)) ai4576@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai4574@t))))))))))))))))))))))))))) (set! ai44d3@add-imports! (lambda (ai44dc@imp ai44dd@h) (let ((ai44e0@subst (ai44d1@get-import ai44dc@imp))) (for-each (lambda (ai44e2@x) (let ((ai44e4@name (car ai44e2@x)) (ai44e5@label (cdr ai44e2@x))) (let ((ai44e8@t (hashtable-ref ai44dd@h ai44e4@name '#f))) (if ai44e8@t ((lambda (ai44ea@l) (if (not (eq? ai44ea@l ai44e5@label)) (ai44c1@dup-error ai44e4@name) (void))) ai44e8@t) (hashtable-set! ai44dd@h ai44e4@name ai44e5@label))))) ai44e0@subst)))) (lambda (ai44d4@imp*) (let ai44da@f ((ai44d6@imp* ai44d4@imp*) (ai44d7@h (make-eq-hashtable))) (if (null? ai44d6@imp*) (hashtable-entries ai44d7@h) (begin (ai44d3@add-imports! (car ai44d6@imp*) ai44d7@h) (ai44da@f (cdr ai44d6@imp*) ai44d7@h)))))))) (set! ai4bf6@ai3155@parse-import-spec* ai3155@parse-import-spec*) (set! ai3157@make-top-rib (lambda (ai46ca@names ai46cb@labels) (let ((ai46ce@rib (ai2ea0@make-empty-rib))) (begin (vector-for-each (lambda (ai46d0@name ai46d1@label) (begin (if (not (symbol? ai46d0@name)) (error 'make-top-rib '"BUG: not a symbol" ai46d0@name) (void)) (ai2ea4@extend-rib/nc! ai46ce@rib (make-simple-struct 'stx '5 (list ai46d0@name ai2e70@top-mark* '() '())) ai46d1@label))) ai46ca@names ai46cb@labels) ai46ce@rib)))) (set! ai4bf7@ai3157@make-top-rib ai3157@make-top-rib) (set! ai3159@make-collector (lambda () (let ((ai46d4@ls '())) (lambda ai46d8 (let ((ai46d9 (length ai46d8))) (if (= ai46d9 '0) (apply (lambda () ai46d4@ls) ai46d8) (if (= ai46d9 '1) (apply (lambda (ai46d6@x) (set! ai46d4@ls (ai2e69@set-cons ai46d6@x ai46d4@ls))) ai46d8) (error 'apply '"invalid arg count")))))))) (set! ai4bf8@ai3159@make-collector ai3159@make-collector) (set! ai315b@inv-collector (ai2a25@ai2903@make-parameter (lambda ai46da@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (ai46dc@x) (begin (if (not (procedure? ai46dc@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" ai46dc@x) (void)) ai46dc@x)))) (set! ai4bf9@ai315b@inv-collector ai315b@inv-collector) (set! ai315d@vis-collector (ai2a25@ai2903@make-parameter (lambda ai46de@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (ai46e0@x) (begin (if (not (procedure? ai46e0@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" ai46e0@x) (void)) ai46e0@x)))) (set! ai4bfa@ai315d@vis-collector ai315d@vis-collector) (set! ai315f@imp-collector (ai2a25@ai2903@make-parameter (lambda ai46e2@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (ai46e4@x) (begin (if (not (procedure? ai46e4@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" ai46e4@x) (void)) ai46e4@x)))) (set! ai4bfb@ai315f@imp-collector ai315f@imp-collector) (set! ai3161@chi-library-internal (lambda (ai46e6@e* ai46e7@rib ai46e8@top?) (call-with-values (lambda () (ai314b@chi-body* ai46e6@e* '() '() '() '() '() '() '() ai46e7@rib ai46e8@top?)) (lambda (ai46fc@ai46ed ai46fd@ai46ef ai46fe@ai46f1 ai46ff@ai46f3 ai4700@ai46f5 ai4701@ai46f7 ai4702@ai46f9 ai4703@ai46fb) (let ((ai470c@exp* ai4703@ai46fb) (ai470d@_kwd* ai4702@ai46f9) (ai470e@mod** ai4701@ai46f7) (ai470f@rhs* ai4700@ai46f5) (ai4710@lex* ai46ff@ai46f3) (ai4711@mr ai46fe@ai46f1) (ai4712@r ai46fd@ai46ef) (ai4713@e* ai46fc@ai46ed)) (values (append (apply append (reverse ai470e@mod**)) ai4713@e*) ai4712@r ai4711@mr (reverse ai4710@lex*) (reverse ai470f@rhs*) ai470c@exp*)))))) (set! ai4bfc@ai3161@chi-library-internal ai3161@chi-library-internal) (set! ai3163@chi-interaction-expr (lambda (ai471c@e ai471d@rib ai471e@r) (call-with-values (lambda () (ai314b@chi-body* (list ai471c@e) ai471e@r ai471e@r '() '() '() '() '() ai471d@rib '#t)) (lambda (ai4732@ai4723 ai4733@ai4725 ai4734@ai4727 ai4735@ai4729 ai4736@ai472b ai4737@ai472d ai4738@ai472f ai4739@ai4731) (let ((ai4742@_exp* ai4739@ai4731) (ai4743@_kwd* ai4738@ai472f) (ai4744@mod** ai4737@ai472d) (ai4745@rhs* ai4736@ai472b) (ai4746@lex* ai4735@ai4729) (ai4747@mr ai4734@ai4727) (ai4748@r ai4733@ai4725) (ai4749@e* ai4732@ai4723)) (let ((ai4752@e* (ai3123@expand-interaction-rhs*/init* (reverse ai4746@lex*) (reverse ai4745@rhs*) (append (apply append (reverse ai4744@mod**)) ai4749@e*) ai4748@r ai4747@mr))) (let ((ai4754@e (if (null? ai4752@e*) (ai2e52@ai2dad@build-void) (if (null? (cdr ai4752@e*)) (car ai4752@e*) (ai2e51@ai2dab@build-sequence '#f ai4752@e*))))) (values ai4754@e ai4748@r)))))))) (set! ai4bfd@ai3163@chi-interaction-expr ai3163@chi-interaction-expr) (set! ai3165@library-body-expander (lambda (ai4756@name ai4757@main-exp* ai4758@imp* ai4759@b* ai475a@top?) (let ((ai4761@itc '#f)) (begin (set! ai4761@itc (ai3159@make-collector)) (let ((ai476a@ai4763 ai315f@imp-collector) (ai476b@ai4765 ai31e3@top-level-context) (ai476c@ai4767 ai4761@itc) (ai476d@ai4769 '#f)) (let ((ai4772@swap (lambda () (begin (let ((ai4774@t (ai476a@ai4763))) (begin (ai476a@ai4763 ai476c@ai4767) (set! ai476c@ai4767 ai4774@t))) (let ((ai4776@t (ai476b@ai4765))) (begin (ai476b@ai4765 ai476d@ai4769) (set! ai476d@ai4769 ai4776@t))))))) (dynamic-wind ai4772@swap (lambda () (call-with-values (lambda () (ai3155@parse-import-spec* ai4758@imp*)) (lambda (ai477c@ai4779 ai477d@ai477b) (let ((ai4780@subst-labels ai477d@ai477b) (ai4781@subst-names ai477c@ai4779)) (let ((ai4784@rib (ai3157@make-top-rib ai4781@subst-names ai4780@subst-labels))) (let ((ai4787@wrap '#f)) (begin (set! ai4787@wrap (lambda (ai4802@x) (make-simple-struct 'stx '5 (list ai4802@x ai2e70@top-mark* (list ai4784@rib) '())))) (let ((ai4788@b* (map ai4787@wrap ai4759@b*)) (ai4789@main-exp* (map ai4787@wrap ai4757@main-exp*)) (ai478a@rtc (ai3159@make-collector)) (ai478b@vtc (ai3159@make-collector))) (let ((ai4798@ai4791 ai315b@inv-collector) (ai4799@ai4793 ai315d@vis-collector) (ai479a@ai4795 ai478a@rtc) (ai479b@ai4797 ai478b@vtc)) (let ((ai47a0@swap (lambda () (begin (let ((ai47a2@t (ai4798@ai4791))) (begin (ai4798@ai4791 ai479a@ai4795) (set! ai479a@ai4795 ai47a2@t))) (let ((ai47a4@t (ai4799@ai4793))) (begin (ai4799@ai4793 ai479b@ai4797) (set! ai479b@ai4797 ai47a4@t))))))) (dynamic-wind ai47a0@swap (lambda () (call-with-values (lambda () (ai3161@chi-library-internal ai4788@b* ai4784@rib ai475a@top?)) (lambda (ai47b2@ai47a7 ai47b3@ai47a9 ai47b4@ai47ab ai47b5@ai47ad ai47b6@ai47af ai47b7@ai47b1) (let ((ai47be@internal-exp* ai47b7@ai47b1) (ai47bf@rhs* ai47b6@ai47af) (ai47c0@lex* ai47b5@ai47ad) (ai47c1@mr ai47b4@ai47ab) (ai47c2@r ai47b3@ai47a9) (ai47c3@init* ai47b2@ai47a7)) (call-with-values (lambda () (ai314f@parse-exports (append ai4789@main-exp* ai47be@internal-exp*))) (lambda (ai47ce@ai47cb ai47cf@ai47cd) (let ((ai47d2@exp-id* ai47cf@ai47cd) (ai47d3@exp-name* ai47ce@ai47cb)) (begin (ai2ea8@seal-rib! ai4784@rib) (let ((ai47d6@init* (ai3111@chi-expr* ai47c3@init* ai47c2@r ai47c1@mr))) (let ((ai47d8@rhs* (ai3125@chi-rhs* ai47bf@rhs* ai47c2@r ai47c1@mr))) (begin (ai2eaa@unseal-rib! ai4784@rib) (let ((ai47da@loc* (map ai2e76@gen-global ai47c0@lex*)) (ai47db@export-subst (ai31bd@make-export-subst ai47d3@exp-name* ai47d2@exp-id*))) (let ((ai47df@errstr '#f)) (begin (set! ai47df@errstr '"attempt to export mutated variable") (call-with-values (lambda () (ai31bf@make-export-env/macros ai47c0@lex* ai47da@loc* ai47c2@r)) (lambda (ai47e6@ai47e1 ai47e7@ai47e3 ai47e8@ai47e5) (let ((ai47ec@macro* ai47e8@ai47e5) (ai47ed@global* ai47e7@ai47e3) (ai47ee@export-env ai47e6@ai47e1)) (begin (for-each (lambda (ai47f2@s) (let ((ai47f4@name (car ai47f2@s)) (ai47f5@label (cdr ai47f2@s))) (let ((ai47f8@p (assq ai47f5@label ai47ee@export-env))) (if ai47f8@p (let ((ai47fa@b (cdr ai47f8@p))) (let ((ai47fc@type (car ai47fa@b))) (if (eq? ai47fc@type 'mutable) (ai31d3@syntax-violation 'export ai47df@errstr ai47f4@name) (void)))) (void))))) ai47db@export-subst) (let ((ai47fe@invoke-body (ai2e57@ai2db7@build-library-letrec* '#f ai4756@name ai47c0@lex* ai47da@loc* ai47d8@rhs* (if (null? ai47d6@init*) (ai2e52@ai2dad@build-void) (ai2e51@ai2dab@build-sequence '#f ai47d6@init*)))) (ai47ff@invoke-definitions (map ai2e4e@ai2d0a@build-global-define (map cdr ai47ed@global*)))) (values (ai4761@itc) (ai478a@rtc) (ai478b@vtc) (ai2e51@ai2dab@build-sequence '#f (append ai47ff@invoke-definitions (list ai47fe@invoke-body))) ai47ec@macro* ai47db@export-subst ai47ee@export-env)))))))))))))))))))) ai47a0@swap))))))))))) ai4772@swap))))))) (set! ai4bfe@ai3165@library-body-expander ai3165@library-body-expander) (set! ai3167@core-library-expander (lambda (ai4804@e ai4805@verify-name) (call-with-values (lambda () (ai3153@parse-library ai4804@e)) (lambda (ai4810@ai4809 ai4811@ai480b ai4812@ai480d ai4813@ai480f) (let ((ai4818@b* ai4813@ai480f) (ai4819@imp* ai4812@ai480d) (ai481a@exp* ai4811@ai480b) (ai481b@name* ai4810@ai4809)) (call-with-values (lambda () (ai3151@parse-library-name ai481b@name*)) (lambda (ai4824@ai4821 ai4825@ai4823) (let ((ai4828@ver ai4825@ai4823) (ai4829@name ai4824@ai4821)) (begin (ai4805@verify-name ai4829@name) (call-with-values (lambda () (ai3165@library-body-expander ai4829@name ai481a@exp* ai4819@imp* ai4818@b* '#f)) (lambda (ai483a@ai482d ai483b@ai482f ai483c@ai4831 ai483d@ai4833 ai483e@ai4835 ai483f@ai4837 ai4840@ai4839) (let ((ai4848@export-env ai4840@ai4839) (ai4849@export-subst ai483f@ai4837) (ai484a@visit-code ai483e@ai4835) (ai484b@invoke-code ai483d@ai4833) (ai484c@visit-req* ai483c@ai4831) (ai484d@invoke-req* ai483b@ai482f) (ai484e@imp* ai483a@ai482d)) (values ai4829@name ai4828@ver ai484e@imp* ai484d@invoke-req* ai484c@visit-req* ai484b@invoke-code ai484a@visit-code ai4849@export-subst ai4848@export-env))))))))))))) (set! ai4bff@ai3167@core-library-expander ai3167@core-library-expander) (set! ai3169@parse-top-level-program (lambda (ai4856@e*) (let ((ai4858@t ai4856@e*)) (let ((ai485a@ls/false (ai30f3@syntax-dispatch ai4858@t '((any . each-any) . each-any)))) (if (and ai485a@ls/false (apply (lambda (ai485c@import ai485d@imp* ai485e@b*) (eq? (ai31d9@syntax->datum ai485c@import) 'import)) ai485a@ls/false)) (apply (lambda (ai4862@import ai4863@imp* ai4864@b*) (values ai4863@imp* ai4864@b*)) ai485a@ls/false) (let ((ai4868@t ai4858@t)) (let ((ai486a@ls/false (ai30f3@syntax-dispatch ai4868@t '((any . any) . any)))) (if (and ai486a@ls/false (apply (lambda (ai486c@import ai486d@x ai486e@y) (eq? (ai31d9@syntax->datum ai486c@import) 'import)) ai486a@ls/false)) (apply (lambda (ai4872@import ai4873@x ai4874@y) (ai31d3@syntax-violation 'expander '"invalid syntax of top-level program" (ai2ee6@syntax-car ai4856@e*))) ai486a@ls/false) (let ((ai4878@t ai4868@t)) (let ((ai487a@ls/false (ai30f3@syntax-dispatch ai4878@t '_))) (if ai487a@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) ai487a@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai4878@t)))))))))))) (set! ai4c00@ai3169@parse-top-level-program ai3169@parse-top-level-program) (set! ai316b@top-level-expander (lambda (ai487c@e*) (call-with-values (lambda () (ai3169@parse-top-level-program ai487c@e*)) (lambda (ai4882@ai487f ai4883@ai4881) (let ((ai4886@b* ai4883@ai4881) (ai4887@imp* ai4882@ai487f)) (call-with-values (lambda () (ai3165@library-body-expander '() '() ai4887@imp* ai4886@b* '#t)) (lambda (ai4898@ai488b ai4899@ai488d ai489a@ai488f ai489b@ai4891 ai489c@ai4893 ai489d@ai4895 ai489e@ai4897) (let ((ai48a6@export-env ai489e@ai4897) (ai48a7@export-subst ai489d@ai4895) (ai48a8@visit-code ai489c@ai4893) (ai48a9@invoke-code ai489b@ai4891) (ai48aa@visit-req* ai489a@ai488f) (ai48ab@invoke-req* ai4899@ai488d) (ai48ac@imp* ai4898@ai488b)) (values ai48ab@invoke-req* ai48a9@invoke-code))))))))) (set! ai4c01@ai316b@top-level-expander ai316b@top-level-expander) (set! ai316d@rp (ai2a22@ai28fd@make-record-printer 'env (lambda (ai48b4@x ai48b5@p ai48b6@wr) (display '"#<environment>" ai48b5@p)))) (set! ai4c02@ai316d@rp ai316d@rp) (set! ai3177@env? (lambda (ai48ba@x) (and (simple-struct? ai48ba@x) (eq? (simple-struct-name ai48ba@x) 'env)))) (set! ai4c03@ai3177@env? ai3177@env?) (set! ai3179@env-names (lambda (ai48bc@x) (simple-struct-ref ai48bc@x '0))) (set! ai4c04@ai3179@env-names ai3179@env-names) (set! ai317b@set-env-names! (lambda (ai48be@x ai48bf@val) (simple-struct-set! ai48be@x '0 ai48bf@val))) (set! ai4c05@ai317b@set-env-names! ai317b@set-env-names!) (set! ai317d@env-labels (lambda (ai48c2@x) (simple-struct-ref ai48c2@x '1))) (set! ai4c06@ai317d@env-labels ai317d@env-labels) (set! ai317f@set-env-labels! (lambda (ai48c4@x ai48c5@val) (simple-struct-set! ai48c4@x '1 ai48c5@val))) (set! ai4c07@ai317f@set-env-labels! ai317f@set-env-labels!) (set! ai3181@env-itc (lambda (ai48c8@x) (simple-struct-ref ai48c8@x '2))) (set! ai4c08@ai3181@env-itc ai3181@env-itc) (set! ai3183@set-env-itc! (lambda (ai48ca@x ai48cb@val) (simple-struct-set! ai48ca@x '2 ai48cb@val))) (set! ai4c09@ai3183@set-env-itc! ai3183@set-env-itc!) (set! ai3185@dummy '3) (set! ai4c0a@ai3185@dummy ai3185@dummy) (set! ai3187@rp (ai2a22@ai28fd@make-record-printer 'interaction-env (lambda (ai48ce@x ai48cf@p ai48d0@wr) (display '"#<environment>" ai48cf@p)))) (set! ai4c0b@ai3187@rp ai3187@rp) (set! ai3191@interaction-env? (lambda (ai48d4@x) (and (simple-struct? ai48d4@x) (eq? (simple-struct-name ai48d4@x) 'interaction-env)))) (set! ai4c0c@ai3191@interaction-env? ai3191@interaction-env?) (set! ai3193@interaction-env-rib (lambda (ai48d6@x) (simple-struct-ref ai48d6@x '0))) (set! ai4c0d@ai3193@interaction-env-rib ai3193@interaction-env-rib) (set! ai3195@set-interaction-env-rib! (lambda (ai48d8@x ai48d9@val) (simple-struct-set! ai48d8@x '0 ai48d9@val))) (set! ai4c0e@ai3195@set-interaction-env-rib! ai3195@set-interaction-env-rib!) (set! ai3197@interaction-env-r (lambda (ai48dc@x) (simple-struct-ref ai48dc@x '1))) (set! ai4c0f@ai3197@interaction-env-r ai3197@interaction-env-r) (set! ai3199@set-interaction-env-r! (lambda (ai48de@x ai48df@val) (simple-struct-set! ai48de@x '1 ai48df@val))) (set! ai4c10@ai3199@set-interaction-env-r! ai3199@set-interaction-env-r!) (set! ai319b@interaction-env-locs (lambda (ai48e2@x) (simple-struct-ref ai48e2@x '2))) (set! ai4c11@ai319b@interaction-env-locs ai319b@interaction-env-locs) (set! ai319d@set-interaction-env-locs! (lambda (ai48e4@x ai48e5@val) (simple-struct-set! ai48e4@x '2 ai48e5@val))) (set! ai4c12@ai319d@set-interaction-env-locs! ai319d@set-interaction-env-locs!) (set! ai319f@dummy '3) (set! ai4c13@ai319f@dummy ai319f@dummy) (set! ai31a1@interaction-environment-symbols (lambda () (ai31a9@environment-symbols (ai31e1@interaction-environment)))) (set! ai4c14@ai31a1@interaction-environment-symbols ai31a1@interaction-environment-symbols) (set! ai31a3@environment-bindings (lambda (ai48e8@e) (vector->list (vector-map (lambda (ai48ea@name ai48eb@label) (ai31a5@parse-binding (cons ai48ea@name (ai2d00@ai2b3d@imported-label->binding ai48eb@label)))) (ai3179@env-names ai48e8@e) (ai317d@env-labels ai48e8@e))))) (set! ai4c15@ai31a3@environment-bindings ai31a3@environment-bindings) (set! ai31a5@parse-binding (lambda (ai48ee@b) (cons (car ai48ee@b) (let ((ai48f0@t (cadr ai48ee@b))) (if (memv ai48f0@t '(core-prim global)) 'procedure (if (memv ai48f0@t '(core-macro macro global-macro)) 'syntax (if (memv ai48f0@t '($core-rtd)) 'record (if (eq? (car ai48ee@b) (cadr ai48ee@b)) 'syntax 'unknown)))))))) (set! ai4c16@ai31a5@parse-binding ai31a5@parse-binding) (set! ai31a7@environment? (lambda (ai48f2@x) (or (ai3177@env? ai48f2@x) (ai3191@interaction-env? ai48f2@x)))) (set! ai4c17@ai31a7@environment? ai31a7@environment?) (set! ai31a9@environment-symbols (lambda (ai48f4@x) (if (ai3177@env? ai48f4@x) (vector->list (ai3179@env-names ai48f4@x)) (if (ai3191@interaction-env? ai48f4@x) (map values (ai2e8a@rib-sym* (ai3193@interaction-env-rib ai48f4@x))) (assertion-violation 'environment-symbols '"not an environment" ai48f4@x))))) (set! ai4c18@ai31a9@environment-symbols ai31a9@environment-symbols) (set! ai31ab@environment (lambda ai48f6@imp* (let ((ai48f8@itc (ai3159@make-collector))) (let ((ai48fe@ai48fb ai315f@imp-collector) (ai48ff@ai48fd ai48f8@itc)) (let ((ai4902@swap (lambda () (let ((ai4904@t (ai48fe@ai48fb))) (begin (ai48fe@ai48fb ai48ff@ai48fd) (set! ai48ff@ai48fd ai4904@t)))))) (dynamic-wind ai4902@swap (lambda () (call-with-values (lambda () (ai3155@parse-import-spec* ai48f6@imp*)) (lambda (ai490a@ai4907 ai490b@ai4909) (let ((ai490e@subst-labels ai490b@ai4909) (ai490f@subst-names ai490a@ai4907)) (make-simple-struct 'env '4 (list ai490f@subst-names ai490e@subst-labels ai48f8@itc)))))) ai4902@swap)))))) (set! ai4c19@ai31ab@environment ai31ab@environment) (set! ai31ad@null-environment (lambda (ai4912@n) (begin (if (not (eqv? ai4912@n '5)) (assertion-violation 'null-environment '"not 5" ai4912@n) (void)) (ai31ab@environment '(psyntax null-environment-5))))) (set! ai4c1a@ai31ad@null-environment ai31ad@null-environment) (set! ai31af@scheme-report-environment (lambda (ai4914@n) (begin (if (not (eqv? ai4914@n '5)) (assertion-violation 'scheme-report-environment '"not 5" ai4914@n) (void)) (ai31ab@environment '(psyntax scheme-report-environment-5))))) (set! ai4c1b@ai31af@scheme-report-environment ai31af@scheme-report-environment) (set! ai31b1@expand (lambda (ai4916@x ai4917@env) (if (ai3177@env? ai4917@env) (let ((ai491a@rib (ai3157@make-top-rib (ai3179@env-names ai4917@env) (ai317d@env-labels ai4917@env)))) (let ((ai491c@x (make-simple-struct 'stx '5 (list ai4916@x ai2e70@top-mark* (list ai491a@rib) '()))) (ai491d@itc (ai3181@env-itc ai4917@env)) (ai491e@rtc (ai3159@make-collector)) (ai491f@vtc (ai3159@make-collector))) (let ((ai4924@x (let ((ai4936@ai4927 ai31e3@top-level-context) (ai4937@ai4929 ai315b@inv-collector) (ai4938@ai492b ai315d@vis-collector) (ai4939@ai492d ai315f@imp-collector) (ai493a@ai492f '#f) (ai493b@ai4931 ai491e@rtc) (ai493c@ai4933 ai491f@vtc) (ai493d@ai4935 ai491d@itc)) (let ((ai4946@swap (lambda () (begin (let ((ai4948@t (ai4936@ai4927))) (begin (ai4936@ai4927 ai493a@ai492f) (set! ai493a@ai492f ai4948@t))) (let ((ai494a@t (ai4937@ai4929))) (begin (ai4937@ai4929 ai493b@ai4931) (set! ai493b@ai4931 ai494a@t))) (let ((ai494c@t (ai4938@ai492b))) (begin (ai4938@ai492b ai493c@ai4933) (set! ai493c@ai4933 ai494c@t))) (let ((ai494e@t (ai4939@ai492d))) (begin (ai4939@ai492d ai493d@ai4935) (set! ai493d@ai4935 ai494e@t))))))) (dynamic-wind ai4946@swap (lambda () (ai3115@chi-expr ai491c@x '() '())) ai4946@swap))))) (begin (ai2ea8@seal-rib! ai491a@rib) (values ai4924@x (ai491e@rtc)))))) (if (ai3191@interaction-env? ai4917@env) (let ((ai4950@rib (ai3193@interaction-env-rib ai4917@env)) (ai4951@r (ai3197@interaction-env-r ai4917@env)) (ai4952@rtc (ai3159@make-collector))) (let ((ai4956@x (make-simple-struct 'stx '5 (list ai4916@x ai2e70@top-mark* (list ai4950@rib) '())))) (call-with-values (lambda () (let ((ai496c@ai495d ai31e3@top-level-context) (ai496d@ai495f ai315b@inv-collector) (ai496e@ai4961 ai315d@vis-collector) (ai496f@ai4963 ai315f@imp-collector) (ai4970@ai4965 ai4917@env) (ai4971@ai4967 ai4952@rtc) (ai4972@ai4969 (ai3159@make-collector)) (ai4973@ai496b (ai3159@make-collector))) (let ((ai497c@swap (lambda () (begin (let ((ai497e@t (ai496c@ai495d))) (begin (ai496c@ai495d ai4970@ai4965) (set! ai4970@ai4965 ai497e@t))) (let ((ai4980@t (ai496d@ai495f))) (begin (ai496d@ai495f ai4971@ai4967) (set! ai4971@ai4967 ai4980@t))) (let ((ai4982@t (ai496e@ai4961))) (begin (ai496e@ai4961 ai4972@ai4969) (set! ai4972@ai4969 ai4982@t))) (let ((ai4984@t (ai496f@ai4963))) (begin (ai496f@ai4963 ai4973@ai496b) (set! ai4973@ai496b ai4984@t))))))) (dynamic-wind ai497c@swap (lambda () (ai3163@chi-interaction-expr ai4956@x ai4950@rib ai4951@r)) ai497c@swap)))) (lambda (ai4986@ai4959 ai4987@ai495b) (let ((ai498a@r^ ai4987@ai495b) (ai498b@e ai4986@ai4959)) (begin (ai3199@set-interaction-env-r! ai4917@env ai498a@r^) (values ai498b@e (ai4952@rtc)))))))) (assertion-violation 'expand '"not an environment" ai4917@env))))) (set! ai4c1c@ai31b1@expand ai31b1@expand) (set! ai31b3@eval (lambda (ai498e@x ai498f@env) (begin (if (not (ai31a7@environment? ai498f@env)) (error 'eval '"not an environment" ai498f@env) (void)) (call-with-values (lambda () (ai31b1@expand ai498e@x ai498f@env)) (lambda (ai4996@ai4993 ai4997@ai4995) (let ((ai499a@invoke-req* ai4997@ai4995) (ai499b@x ai4996@ai4993)) (begin (for-each ai2d01@ai2b3f@invoke-library ai499a@invoke-req*) (eval-core (ai2a7b@ai2a33@expanded->core ai499b@x))))))))) (set! ai4c1d@ai31b3@eval ai31b3@eval) (set! ai31b5@library-expander (lambda ai4a0c (let ((ai4a0d (length ai4a0c))) (if (= ai4a0d '3) (apply (lambda (ai499e@x ai499f@filename ai49a0@verify-name) (let ((ai49a5@build-visit-code '#f) (ai49a7@visit! '#f)) (begin (set! ai49a5@build-visit-code (lambda (ai49fa@macro*) (if (null? ai49fa@macro*) (ai2e52@ai2dad@build-void) (ai2e51@ai2dab@build-sequence '#f (map (lambda (ai49fc@x) (let ((ai49fe@loc (car ai49fc@x)) (ai49ff@src (cddr ai49fc@x))) (list 'set! ai49fe@loc ai49ff@src))) ai49fa@macro*))))) (set! ai49a7@visit! (lambda (ai49f2@macro*) (for-each (lambda (ai49f4@x) (let ((ai49f6@loc (car ai49f4@x)) (ai49f7@proc (cadr ai49f4@x))) (set-symbol-value! ai49f6@loc ai49f7@proc))) ai49f2@macro*))) (call-with-values (lambda () (ai3167@core-library-expander ai499e@x ai49a0@verify-name)) (lambda (ai49ba@ai49a9 ai49bb@ai49ab ai49bc@ai49ad ai49bd@ai49af ai49be@ai49b1 ai49bf@ai49b3 ai49c0@ai49b5 ai49c1@ai49b7 ai49c2@ai49b9) (let ((ai49cc@export-env ai49c2@ai49b9) (ai49cd@export-subst ai49c1@ai49b7) (ai49ce@macro* ai49c0@ai49b5) (ai49cf@invoke-code ai49bf@ai49b3) (ai49d0@vis* ai49be@ai49b1) (ai49d1@inv* ai49bd@ai49af) (ai49d2@imp* ai49bc@ai49ad) (ai49d3@ver ai49bb@ai49ab) (ai49d4@name ai49ba@ai49a9)) (let ((ai49de@id (gensym)) (ai49df@name ai49d4@name) (ai49e0@ver ai49d3@ver) (ai49e1@imp* (map ai2d06@ai2b49@library-spec ai49d2@imp*)) (ai49e2@vis* (map ai2d06@ai2b49@library-spec ai49d0@vis*)) (ai49e3@inv* (map ai2d06@ai2b49@library-spec ai49d1@inv*)) (ai49e4@visit-proc (lambda () (ai49a7@visit! ai49ce@macro*))) (ai49e5@invoke-proc (lambda () (eval-core (ai2a7b@ai2a33@expanded->core ai49cf@invoke-code)))) (ai49e6@visit-code (ai49a5@build-visit-code ai49ce@macro*)) (ai49e7@invoke-code ai49cf@invoke-code)) (begin (ai2cff@ai2b3b@install-library ai49de@id ai49df@name ai49e0@ver ai49e1@imp* ai49e2@vis* ai49e3@inv* ai49cd@export-subst ai49cc@export-env ai49e4@visit-proc ai49e5@invoke-proc ai49e6@visit-code ai49e7@invoke-code '#t ai499f@filename) (values ai49de@id ai49df@name ai49e0@ver ai49e1@imp* ai49e2@vis* ai49e3@inv* ai49e7@invoke-code ai49e6@visit-code ai49cd@export-subst ai49cc@export-env))))))))) ai4a0c) (if (= ai4a0d '2) (apply (lambda (ai4a02@x ai4a03@filename) (ai31b5@library-expander ai4a02@x ai4a03@filename (lambda (ai4a06@x) (values)))) ai4a0c) (if (= ai4a0d '1) (apply (lambda (ai4a08@x) (ai31b5@library-expander ai4a08@x '#f (lambda (ai4a0a@x) (values)))) ai4a0c) (error 'apply '"invalid arg count"))))))) (set! ai4c1e@ai31b5@library-expander ai31b5@library-expander) (set! ai31b7@boot-library-expand (lambda (ai4a0e@x) (call-with-values (lambda () (ai31b5@library-expander ai4a0e@x)) (lambda (ai4a24@ai4a11 ai4a25@ai4a13 ai4a26@ai4a15 ai4a27@ai4a17 ai4a28@ai4a19 ai4a29@ai4a1b ai4a2a@ai4a1d ai4a2b@ai4a1f ai4a2c@ai4a21 ai4a2d@ai4a23) (let ((ai4a38@export-env ai4a2d@ai4a23) (ai4a39@export-subst ai4a2c@ai4a21) (ai4a3a@visit-code ai4a2b@ai4a1f) (ai4a3b@invoke-code ai4a2a@ai4a1d) (ai4a3c@inv* ai4a29@ai4a1b) (ai4a3d@vis* ai4a28@ai4a19) (ai4a3e@imp* ai4a27@ai4a17) (ai4a3f@ver ai4a26@ai4a15) (ai4a40@name ai4a25@ai4a13) (ai4a41@id ai4a24@ai4a11)) (values ai4a40@name ai4a3b@invoke-code ai4a39@export-subst ai4a38@export-env)))))) (set! ai4c1f@ai31b7@boot-library-expand ai31b7@boot-library-expand) (set! ai31b9@rev-map-append (lambda (ai4a4c@f ai4a4d@ls ai4a4e@ac) (if (null? ai4a4d@ls) ai4a4e@ac (ai31b9@rev-map-append ai4a4c@f (cdr ai4a4d@ls) (cons (ai4a4c@f (car ai4a4d@ls)) ai4a4e@ac))))) (set! ai4c20@ai31b9@rev-map-append ai31b9@rev-map-append) (set! ai31bb@build-exports (lambda (ai4a52@lex*+loc* ai4a53@init*) (ai2e51@ai2dab@build-sequence '#f (cons (ai2e52@ai2dad@build-void) (ai31b9@rev-map-append (lambda (ai4a56@x) (list 'set! (cdr ai4a56@x) (car ai4a56@x))) ai4a52@lex*+loc* ai4a53@init*))))) (set! ai4c21@ai31bb@build-exports ai31bb@build-exports) (set! ai31bd@make-export-subst (lambda (ai4a58@name* ai4a59@id*) (map (lambda (ai4a5c@name ai4a5d@id) (let ((ai4a60@label (ai2f02@id->label ai4a5d@id))) (begin (if (not ai4a60@label) (ai31d3@syntax-violation '#f '"cannot export unbound identifier" ai4a5d@id) (void)) (cons ai4a5c@name ai4a60@label)))) ai4a58@name* ai4a59@id*))) (set! ai4c22@ai31bd@make-export-subst ai31bd@make-export-subst) (set! ai31bf@make-export-env/macros (lambda (ai4a62@lex* ai4a63@loc* ai4a64@r) (let ((ai4a69@lookup '#f)) (begin (set! ai4a69@lookup (lambda (ai4a86@x) (let ai4a8e@f ((ai4a88@x ai4a86@x) (ai4a89@lex* ai4a62@lex*) (ai4a8a@loc* ai4a63@loc*)) (if (pair? ai4a89@lex*) (if (eq? ai4a88@x (car ai4a89@lex*)) (car ai4a8a@loc*) (ai4a8e@f ai4a88@x (cdr ai4a89@lex*) (cdr ai4a8a@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let ai4a72@f ((ai4a6a@r ai4a64@r) (ai4a6b@env '()) (ai4a6c@global* '()) (ai4a6d@macro* '())) (if (null? ai4a6a@r) (values ai4a6b@env ai4a6c@global* ai4a6d@macro*) (let ((ai4a74@x (car ai4a6a@r))) (let ((ai4a76@label (car ai4a74@x)) (ai4a77@b (cdr ai4a74@x))) (let ((ai4a7a@t (ai2f08@binding-type ai4a77@b))) (if (memv ai4a7a@t '(lexical)) (let ((ai4a7c@v (ai2f0a@binding-value ai4a77@b))) (let ((ai4a7e@loc (ai4a69@lookup (ai307d@lexical-var ai4a7c@v))) (ai4a7f@type (if (ai307f@lexical-mutable? ai4a7c@v) 'mutable 'global))) (ai4a72@f (cdr ai4a6a@r) (cons (cons* ai4a76@label ai4a7f@type ai4a7e@loc) ai4a6b@env) (cons (cons (ai307d@lexical-var ai4a7c@v) ai4a7e@loc) ai4a6c@global*) ai4a6d@macro*))) (if (memv ai4a7a@t '(local-macro)) (let ((ai4a82@loc (gensym))) (ai4a72@f (cdr ai4a6a@r) (cons (cons* ai4a76@label 'global-macro ai4a82@loc) ai4a6b@env) ai4a6c@global* (cons (cons ai4a82@loc (ai2f0a@binding-value ai4a77@b)) ai4a6d@macro*))) (if (memv ai4a7a@t '(local-macro!)) (let ((ai4a84@loc (gensym))) (ai4a72@f (cdr ai4a6a@r) (cons (cons* ai4a76@label 'global-macro! ai4a84@loc) ai4a6b@env) ai4a6c@global* (cons (cons ai4a84@loc (ai2f0a@binding-value ai4a77@b)) ai4a6d@macro*))) (if (memv ai4a7a@t '($rtd $module)) (ai4a72@f (cdr ai4a6a@r) (cons ai4a74@x ai4a6b@env) ai4a6c@global* ai4a6d@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (ai2f08@binding-type ai4a77@b) (ai2f0a@binding-value ai4a77@b))))))))))))))) (set! ai4c23@ai31bf@make-export-env/macros ai31bf@make-export-env/macros) (set! ai31c1@generate-temporaries (lambda (ai4a90@ls) (let ((ai4a92@t ai4a90@ls)) (let ((ai4a94@ls/false (ai30f3@syntax-dispatch ai4a92@t 'each-any))) (if ai4a94@ls/false (apply (lambda (ai4a96@ls) (map (lambda (ai4a98@x) (make-simple-struct 'stx '5 (list (let ((ai4a9a@x (ai31d9@syntax->datum ai4a98@x))) (if (or (symbol? ai4a9a@x) (string? ai4a9a@x)) (gensym ai4a9a@x) (gensym 't))) ai2e70@top-mark* '() '()))) ai4a96@ls)) ai4a94@ls/false) (let ((ai4a9c@t ai4a92@t)) (let ((ai4a9e@ls/false (ai30f3@syntax-dispatch ai4a9c@t '_))) (if ai4a9e@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) ai4a9e@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai4a9c@t))))))))) (set! ai4c24@ai31c1@generate-temporaries ai31c1@generate-temporaries) (set! ai31c3@free-identifier=? (lambda (ai4aa0@x ai4aa1@y) (if (ai2eec@id? ai4aa0@x) (if (ai2eec@id? ai4aa1@y) (ai2ef2@free-id=? ai4aa0@x ai4aa1@y) (assertion-violation 'free-identifier=? '"not an identifier" ai4aa1@y)) (assertion-violation 'free-identifier=? '"not an identifier" ai4aa0@x)))) (set! ai4c25@ai31c3@free-identifier=? ai31c3@free-identifier=?) (set! ai31c5@bound-identifier=? (lambda (ai4aa4@x ai4aa5@y) (if (ai2eec@id? ai4aa4@x) (if (ai2eec@id? ai4aa5@y) (ai2ef0@bound-id=? ai4aa4@x ai4aa5@y) (assertion-violation 'bound-identifier=? '"not an identifier" ai4aa5@y)) (assertion-violation 'bound-identifier=? '"not an identifier" ai4aa4@x)))) (set! ai4c26@ai31c5@bound-identifier=? ai31c5@bound-identifier=?) (set! ai31c7@make-source-condition (lambda (ai4aa8@x) (let ((ai4ab2@ai4aad '#f) (ai4ab4@ai4aaf '#f) (ai4ab6@ai4aae '#f) (ai4ab9@ai4aac '#f) (ai4abb@make-source-condition '#f) (ai4abd@ai4aaa '#f) (ai4abf@ai4aab '#f) (ai4ac1@source-condition? '#f) (ai4ac3@source-filename '#f) (ai4ac5@source-character '#f)) (begin (set! ai4ab2@ai4aad (make-record-type-descriptor '&source-information ai4f08@ai4c4f@&condition-rtd 'ai4ab0 '#f '#f '#((immutable file-name) (immutable character)))) (set! ai4ab4@ai4aaf '#f) (set! ai4ab6@ai4aae (make-record-constructor-descriptor ai4ab2@ai4aad ai4f09@ai4c51@&condition-rcd ai4ab4@ai4aaf)) (set! ai4ab9@ai4aac (record-predicate ai4ab2@ai4aad)) (set! ai4abb@make-source-condition (record-constructor ai4ab6@ai4aae)) (set! ai4abd@ai4aaa (record-accessor ai4ab2@ai4aad '0)) (set! ai4abf@ai4aab (record-accessor ai4ab2@ai4aad '1)) (set! ai4ac1@source-condition? (condition-predicate ai4ab2@ai4aad)) (set! ai4ac3@source-filename (condition-accessor ai4ab2@ai4aad ai4abd@ai4aaa)) (set! ai4ac5@source-character (condition-accessor ai4ab2@ai4aad ai4abf@ai4aab)) (if (pair? ai4aa8@x) (ai4abb@make-source-condition (car ai4aa8@x) (cdr ai4aa8@x)) (condition)))))) (set! ai4c27@ai31c7@make-source-condition ai31c7@make-source-condition) (set! ai31c9@extract-position-condition (lambda (ai4ac6@x) (ai31c7@make-source-condition (ai31cb@expression-position ai4ac6@x)))) (set! ai4c28@ai31c9@extract-position-condition ai31c9@extract-position-condition) (set! ai31cb@expression-position (lambda (ai4ac8@x) (and (ai2eb8@stx? ai4ac8@x) (let ((ai4aca@x (ai2eba@stx-expr ai4ac8@x))) (and (ai2a19@ai28eb@annotation? ai4aca@x) (ai2a1a@ai28ed@annotation-source ai4aca@x)))))) (set! ai4c29@ai31cb@expression-position ai31cb@expression-position) (set! ai31cd@assertion-error (lambda (ai4acc@expr ai4acd@pos) (raise (condition (ai4f38@ai4d13@make-assertion-violation) (ai4f4a@ai4d45@make-who-condition 'assert) (ai4f0e@ai4ca6@make-message-condition '"assertion failed") (ai4f40@ai4d2a@make-irritants-condition (list ai4acc@expr)) (ai31c7@make-source-condition ai4acd@pos))))) (set! ai4c2a@ai31cd@assertion-error ai31cd@assertion-error) (set! ai31cf@syntax-error (lambda (ai4ad0@x . ai4ad2@args) (begin (if (not (for-all string? ai4ad2@args)) (assertion-violation 'syntax-error '"invalid argument" ai4ad2@args) (void)) (raise (condition (ai4f0e@ai4ca6@make-message-condition (if (null? ai4ad2@args) '"invalid syntax" (apply string-append ai4ad2@args))) (ai4f6c@ai4da1@make-syntax-violation (ai31d9@syntax->datum ai4ad0@x) '#f) (ai31c9@extract-position-condition ai4ad0@x)))))) (set! ai4c2b@ai31cf@syntax-error ai31cf@syntax-error) (set! ai31d1@syntax-violation* (lambda (ai4ad4@who ai4ad5@msg ai4ad6@form ai4ad7@condition-object) (begin (if (not (string? ai4ad5@msg)) (assertion-violation 'syntax-violation '"message is not a string" ai4ad5@msg) (void)) (let ((ai4adc@who (if (or (string? ai4ad4@who) (symbol? ai4ad4@who)) ai4ad4@who (if (not ai4ad4@who) (let ((ai4ade@t ai4ad6@form)) (let ((ai4ae0@ls/false (ai30f3@syntax-dispatch ai4ade@t 'any))) (if (and ai4ae0@ls/false (apply (lambda (ai4ae2@id) (ai2eec@id? ai4ae2@id)) ai4ae0@ls/false)) (apply (lambda (ai4ae4@id) (ai31d9@syntax->datum ai4ae4@id)) ai4ae0@ls/false) (let ((ai4ae6@t ai4ade@t)) (let ((ai4ae8@ls/false (ai30f3@syntax-dispatch ai4ae6@t '(any . any)))) (if (and ai4ae8@ls/false (apply (lambda (ai4aea@id ai4aeb@rest) (ai2eec@id? ai4aea@id)) ai4ae8@ls/false)) (apply (lambda (ai4aee@id ai4aef@rest) (ai31d9@syntax->datum ai4aee@id)) ai4ae8@ls/false) (let ((ai4af2@t ai4ae6@t)) (let ((ai4af4@ls/false (ai30f3@syntax-dispatch ai4af2@t '_))) (if ai4af4@ls/false (apply (lambda () '#f) ai4af4@ls/false) (ai31d3@syntax-violation '#f '"invalid syntax" ai4af2@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" ai4ad4@who))))) (raise (condition (if ai4adc@who (ai4f4a@ai4d45@make-who-condition ai4adc@who) (condition)) (ai4f0e@ai4ca6@make-message-condition ai4ad5@msg) ai4ad7@condition-object (ai31c9@extract-position-condition ai4ad6@form))))))) (set! ai4c2c@ai31d1@syntax-violation* ai31d1@syntax-violation*) (set! ai31d3@syntax-violation (lambda ai4b04 (let ((ai4b05 (length ai4b04))) (if (= ai4b05 '3) (apply (lambda (ai4af6@who ai4af7@msg ai4af8@form) (ai31d3@syntax-violation ai4af6@who ai4af7@msg ai4af8@form '#f)) ai4b04) (if (= ai4b05 '4) (apply (lambda (ai4afc@who ai4afd@msg ai4afe@form ai4aff@subform) (ai31d1@syntax-violation* ai4afc@who ai4afd@msg ai4afe@form (ai4f6c@ai4da1@make-syntax-violation (ai31d9@syntax->datum ai4afe@form) (ai31d9@syntax->datum ai4aff@subform)))) ai4b04) (error 'apply '"invalid arg count")))))) (set! ai4c2d@ai31d3@syntax-violation ai31d3@syntax-violation) (set! ai31d5@identifier? (lambda (ai4b06@x) (ai2eec@id? ai4b06@x))) (set! ai4c2e@ai31d5@identifier? ai31d5@identifier?) (set! ai31d7@datum->syntax (lambda (ai4b08@id ai4b09@datum) (if (ai2eec@id? ai4b08@id) (ai2ecc@datum->stx ai4b08@id ai4b09@datum) (assertion-violation 'datum->syntax '"not an identifier" ai4b08@id)))) (set! ai4c2f@ai31d7@datum->syntax ai31d7@datum->syntax) (set! ai31d9@syntax->datum (lambda (ai4b0c@x) (ai2f00@stx->datum ai4b0c@x))) (set! ai4c30@ai31d9@syntax->datum ai31d9@syntax->datum) (set! ai31db@ungensym-all (lambda (ai4b0e@code) (if (pair? ai4b0e@code) (cons (ai31db@ungensym-all (car ai4b0e@code)) (ai31db@ungensym-all (cdr ai4b0e@code))) (if (symbol? ai4b0e@code) (ungensym ai4b0e@code) ai4b0e@code)))) (set! ai4c31@ai31db@ungensym-all ai31db@ungensym-all) (set! ai31dd@compile-r6rs-top-level (lambda (ai4b10@x*) (call-with-values (lambda () (ai316b@top-level-expander ai4b10@x*)) (lambda (ai4b16@ai4b13 ai4b17@ai4b15) (let ((ai4b1a@invoke-code ai4b17@ai4b15) (ai4b1b@lib* ai4b16@ai4b13)) (lambda () (begin (for-each ai2d01@ai2b3f@invoke-library ai4b1b@lib*) (let ((ai4b1e@expanded (ai2a7b@ai2a33@expanded->core ai4b1a@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (ai31db@ungensym-all ai4b1e@expanded)) (void)) (eval-core ai4b1e@expanded)))))))))) (set! ai4c32@ai31dd@compile-r6rs-top-level ai31dd@compile-r6rs-top-level) (set! ai31df@pre-compile-r6rs-top-level (lambda (ai4b20@x*) (call-with-values (lambda () (ai316b@top-level-expander ai4b20@x*)) (lambda (ai4b26@ai4b23 ai4b27@ai4b25) (let ((ai4b2a@invoke-code ai4b27@ai4b25) (ai4b2b@lib* ai4b26@ai4b23)) (begin (for-each ai2d01@ai2b3f@invoke-library ai4b2b@lib*) (ai2a23@ai28ff@compile-core (ai2a7b@ai2a33@expanded->core ai4b2a@invoke-code)))))))) (set! ai4c33@ai31df@pre-compile-r6rs-top-level ai31df@pre-compile-r6rs-top-level) (set! ai31e1@interaction-environment (let ((ai4b2e@the-env '#f)) (lambda () (or ai4b2e@the-env (let ((ai4b30@lib (ai2cfa@ai2b31@find-library-by-name '(mosh interaction))) (ai4b31@rib (ai2ea0@make-empty-rib))) (begin (let ((ai4b34@subst (ai2cdc@ai2af5@library-subst ai4b30@lib))) (begin (ai2e8c@set-rib-sym*! ai4b31@rib (map car ai4b34@subst)) (ai2e90@set-rib-mark**! ai4b31@rib (map (lambda (ai4b36@x) ai2e70@top-mark*) ai4b34@subst)) (ai2e94@set-rib-label*! ai4b31@rib (map cdr ai4b34@subst)))) (let ((ai4b38@env (make-simple-struct 'interaction-env '4 (list ai4b31@rib '() '())))) (begin (set! ai4b2e@the-env ai4b38@env) ai4b38@env)))))))) (set! ai4c34@ai31e1@interaction-environment ai31e1@interaction-environment) (set! ai31e3@top-level-context (ai2a25@ai2903@make-parameter '#f)) (set! ai4c35@ai31e3@top-level-context ai31e3@top-level-context) (ai2cf7@ai2b2b@current-library-expander ai31b5@library-expander))
(begin (set! ai4c44@ai4c3f (unspecified)) (set! ai4c46@ai4c41 (unspecified)) (set! ai4c48@ai4c40 (unspecified)) (set! ai4c4b@&condition? (unspecified)) (set! ai4c4d@make-&condition (unspecified)) (set! ai4c4f@&condition-rtd (unspecified)) (set! ai4c51@&condition-rcd (unspecified)) (set! ai4c9d@ai4c98 (unspecified)) (set! ai4c9f@ai4c9a (unspecified)) (set! ai4ca1@ai4c99 (unspecified)) (set! ai4ca4@p? (unspecified)) (set! ai4ca6@make-message-condition (unspecified)) (set! ai4ca8@ai4c97 (unspecified)) (set! ai4caa@message-condition? (unspecified)) (set! ai4cac@condition-message (unspecified)) (set! ai4cae@&message-rtd (unspecified)) (set! ai4cb0@&message-rcd (unspecified)) (set! ai4cb6@ai4cb1 (unspecified)) (set! ai4cb8@ai4cb3 (unspecified)) (set! ai4cba@ai4cb2 (unspecified)) (set! ai4cbd@p? (unspecified)) (set! ai4cbf@make-warning (unspecified)) (set! ai4cc1@warning? (unspecified)) (set! ai4cc3@&warning-rtd (unspecified)) (set! ai4cc5@&warning-rcd (unspecified)) (set! ai4ccb@ai4cc6 (unspecified)) (set! ai4ccd@ai4cc8 (unspecified)) (set! ai4ccf@ai4cc7 (unspecified)) (set! ai4cd2@p? (unspecified)) (set! ai4cd4@make-serious-condition (unspecified)) (set! ai4cd6@serious-condition? (unspecified)) (set! ai4cd8@&serious-rtd (unspecified)) (set! ai4cda@&serious-rcd (unspecified)) (set! ai4ce0@ai4cdb (unspecified)) (set! ai4ce2@ai4cdd (unspecified)) (set! ai4ce4@ai4cdc (unspecified)) (set! ai4ce7@p? (unspecified)) (set! ai4ce9@make-error (unspecified)) (set! ai4ceb@error? (unspecified)) (set! ai4ced@&error-rtd (unspecified)) (set! ai4cef@&error-rcd (unspecified)) (set! ai4cf5@ai4cf0 (unspecified)) (set! ai4cf7@ai4cf2 (unspecified)) (set! ai4cf9@ai4cf1 (unspecified)) (set! ai4cfc@p? (unspecified)) (set! ai4cfe@make-violation (unspecified)) (set! ai4d00@violation? (unspecified)) (set! ai4d02@&violation-rtd (unspecified)) (set! ai4d04@&violation-rcd (unspecified)) (set! ai4d0a@ai4d05 (unspecified)) (set! ai4d0c@ai4d07 (unspecified)) (set! ai4d0e@ai4d06 (unspecified)) (set! ai4d11@p? (unspecified)) (set! ai4d13@make-assertion-violation (unspecified)) (set! ai4d15@assertion-violation? (unspecified)) (set! ai4d17@&assertion-rtd (unspecified)) (set! ai4d19@&assertion-rcd (unspecified)) (set! ai4d21@ai4d1c (unspecified)) (set! ai4d23@ai4d1e (unspecified)) (set! ai4d25@ai4d1d (unspecified)) (set! ai4d28@p? (unspecified)) (set! ai4d2a@make-irritants-condition (unspecified)) (set! ai4d2c@ai4d1b (unspecified)) (set! ai4d2e@irritants-condition? (unspecified)) (set! ai4d30@condition-irritants (unspecified)) (set! ai4d32@&irritants-rtd (unspecified)) (set! ai4d34@&irritants-rcd (unspecified)) (set! ai4d3c@ai4d37 (unspecified)) (set! ai4d3e@ai4d39 (unspecified)) (set! ai4d40@ai4d38 (unspecified)) (set! ai4d43@p? (unspecified)) (set! ai4d45@make-who-condition (unspecified)) (set! ai4d47@ai4d36 (unspecified)) (set! ai4d49@who-condition? (unspecified)) (set! ai4d4b@condition-who (unspecified)) (set! ai4d4d@&who-rtd (unspecified)) (set! ai4d4f@&who-rcd (unspecified)) (set! ai4d55@ai4d50 (unspecified)) (set! ai4d57@ai4d52 (unspecified)) (set! ai4d59@ai4d51 (unspecified)) (set! ai4d5c@p? (unspecified)) (set! ai4d5e@make-non-continuable-violation (unspecified)) (set! ai4d60@non-continuable-violation? (unspecified)) (set! ai4d62@&non-continuable-rtd (unspecified)) (set! ai4d64@&non-continuable-rcd (unspecified)) (set! ai4d6a@ai4d65 (unspecified)) (set! ai4d6c@ai4d67 (unspecified)) (set! ai4d6e@ai4d66 (unspecified)) (set! ai4d71@p? (unspecified)) (set! ai4d73@make-implementation-restriction-violation (unspecified)) (set! ai4d75@implementation-restriction-violation? (unspecified)) (set! ai4d77@&implementation-restriction-rtd (unspecified)) (set! ai4d79@&implementation-restriction-rcd (unspecified)) (set! ai4d7f@ai4d7a (unspecified)) (set! ai4d81@ai4d7c (unspecified)) (set! ai4d83@ai4d7b (unspecified)) (set! ai4d86@p? (unspecified)) (set! ai4d88@make-lexical-violation (unspecified)) (set! ai4d8a@lexical-violation? (unspecified)) (set! ai4d8c@&lexical-rtd (unspecified)) (set! ai4d8e@&lexical-rcd (unspecified)) (set! ai4d98@ai4d93 (unspecified)) (set! ai4d9a@ai4d95 (unspecified)) (set! ai4d9c@ai4d94 (unspecified)) (set! ai4d9f@p? (unspecified)) (set! ai4da1@make-syntax-violation (unspecified)) (set! ai4da3@ai4d90 (unspecified)) (set! ai4da5@ai4d92 (unspecified)) (set! ai4da7@syntax-violation? (unspecified)) (set! ai4da9@syntax-violation-form (unspecified)) (set! ai4dab@syntax-violation-subform (unspecified)) (set! ai4dad@&syntax-rtd (unspecified)) (set! ai4daf@&syntax-rcd (unspecified)) (set! ai4db5@ai4db0 (unspecified)) (set! ai4db7@ai4db2 (unspecified)) (set! ai4db9@ai4db1 (unspecified)) (set! ai4dbc@p? (unspecified)) (set! ai4dbe@make-undefined-violation (unspecified)) (set! ai4dc0@undefined-violation? (unspecified)) (set! ai4dc2@&undefined-rtd (unspecified)) (set! ai4dc4@&undefined-rcd (unspecified)) (set! ai4dca@ai4dc5 (unspecified)) (set! ai4dcc@ai4dc7 (unspecified)) (set! ai4dce@ai4dc6 (unspecified)) (set! ai4dd1@p? (unspecified)) (set! ai4dd3@make-i/o-error (unspecified)) (set! ai4dd5@i/o-error? (unspecified)) (set! ai4dd7@&i/o-rtd (unspecified)) (set! ai4dd9@&i/o-rcd (unspecified)) (set! ai4ddf@ai4dda (unspecified)) (set! ai4de1@ai4ddc (unspecified)) (set! ai4de3@ai4ddb (unspecified)) (set! ai4de6@p? (unspecified)) (set! ai4de8@make-i/o-read-error (unspecified)) (set! ai4dea@i/o-read-error? (unspecified)) (set! ai4dec@&i/o-read-rtd (unspecified)) (set! ai4dee@&i/o-read-rcd (unspecified)) (set! ai4df4@ai4def (unspecified)) (set! ai4df6@ai4df1 (unspecified)) (set! ai4df8@ai4df0 (unspecified)) (set! ai4dfb@p? (unspecified)) (set! ai4dfd@make-i/o-write-error (unspecified)) (set! ai4dff@i/o-write-error? (unspecified)) (set! ai4e01@&i/o-write-rtd (unspecified)) (set! ai4e03@&i/o-write-rcd (unspecified)) (set! ai4e0b@ai4e06 (unspecified)) (set! ai4e0d@ai4e08 (unspecified)) (set! ai4e0f@ai4e07 (unspecified)) (set! ai4e12@p? (unspecified)) (set! ai4e14@make-i/o-invalid-position-error (unspecified)) (set! ai4e16@ai4e05 (unspecified)) (set! ai4e18@i/o-invalid-position-error? (unspecified)) (set! ai4e1a@i/o-error-position (unspecified)) (set! ai4e1c@&i/o-invalid-position-rtd (unspecified)) (set! ai4e1e@&i/o-invalid-position-rcd (unspecified)) (set! ai4e26@ai4e21 (unspecified)) (set! ai4e28@ai4e23 (unspecified)) (set! ai4e2a@ai4e22 (unspecified)) (set! ai4e2d@p? (unspecified)) (set! ai4e2f@make-i/o-filename-error (unspecified)) (set! ai4e31@ai4e20 (unspecified)) (set! ai4e33@i/o-filename-error? (unspecified)) (set! ai4e35@i/o-error-filename (unspecified)) (set! ai4e37@&i/o-filename-rtd (unspecified)) (set! ai4e39@&i/o-filename-rcd (unspecified)) (set! ai4e3f@ai4e3a (unspecified)) (set! ai4e41@ai4e3c (unspecified)) (set! ai4e43@ai4e3b (unspecified)) (set! ai4e46@p? (unspecified)) (set! ai4e48@make-i/o-file-protection-error (unspecified)) (set! ai4e4a@i/o-file-protection-error? (unspecified)) (set! ai4e4c@&i/o-file-protection-rtd (unspecified)) (set! ai4e4e@&i/o-file-protection-rcd (unspecified)) (set! ai4e54@ai4e4f (unspecified)) (set! ai4e56@ai4e51 (unspecified)) (set! ai4e58@ai4e50 (unspecified)) (set! ai4e5b@p? (unspecified)) (set! ai4e5d@make-i/o-file-is-read-only-error (unspecified)) (set! ai4e5f@i/o-file-is-read-only-error? (unspecified)) (set! ai4e61@&i/o-file-is-read-only-rtd (unspecified)) (set! ai4e63@&i/o-file-is-read-only-rcd (unspecified)) (set! ai4e69@ai4e64 (unspecified)) (set! ai4e6b@ai4e66 (unspecified)) (set! ai4e6d@ai4e65 (unspecified)) (set! ai4e70@p? (unspecified)) (set! ai4e72@make-i/o-file-already-exists-error (unspecified)) (set! ai4e74@i/o-file-already-exists-error? (unspecified)) (set! ai4e76@&i/o-file-already-exists-rtd (unspecified)) (set! ai4e78@&i/o-file-already-exists-rcd (unspecified)) (set! ai4e7e@ai4e79 (unspecified)) (set! ai4e80@ai4e7b (unspecified)) (set! ai4e82@ai4e7a (unspecified)) (set! ai4e85@p? (unspecified)) (set! ai4e87@make-i/o-file-does-not-exist-error (unspecified)) (set! ai4e89@i/o-file-does-not-exist-error? (unspecified)) (set! ai4e8b@&i/o-file-does-not-exist-rtd (unspecified)) (set! ai4e8d@&i/o-file-does-not-exist-rcd (unspecified)) (set! ai4e95@ai4e90 (unspecified)) (set! ai4e97@ai4e92 (unspecified)) (set! ai4e99@ai4e91 (unspecified)) (set! ai4e9c@p? (unspecified)) (set! ai4e9e@make-i/o-port-error (unspecified)) (set! ai4ea0@ai4e8f (unspecified)) (set! ai4ea2@i/o-port-error? (unspecified)) (set! ai4ea4@i/o-error-port (unspecified)) (set! ai4ea6@&i/o-port-rtd (unspecified)) (set! ai4ea8@&i/o-port-rcd (unspecified)) (set! ai4eae@ai4ea9 (unspecified)) (set! ai4eb0@ai4eab (unspecified)) (set! ai4eb2@ai4eaa (unspecified)) (set! ai4eb5@p? (unspecified)) (set! ai4eb7@make-i/o-decoding-error (unspecified)) (set! ai4eb9@i/o-decoding-error? (unspecified)) (set! ai4ebb@&i/o-decoding-rtd (unspecified)) (set! ai4ebd@&i/o-decoding-rcd (unspecified)) (set! ai4ec5@ai4ec0 (unspecified)) (set! ai4ec7@ai4ec2 (unspecified)) (set! ai4ec9@ai4ec1 (unspecified)) (set! ai4ecc@p? (unspecified)) (set! ai4ece@make-i/o-encoding-error (unspecified)) (set! ai4ed0@ai4ebf (unspecified)) (set! ai4ed2@i/o-encoding-error? (unspecified)) (set! ai4ed4@i/o-encoding-error-char (unspecified)) (set! ai4ed6@&i/o-encoding-rtd (unspecified)) (set! ai4ed8@&i/o-encoding-rcd (unspecified)) (set! ai4ede@ai4ed9 (unspecified)) (set! ai4ee0@ai4edb (unspecified)) (set! ai4ee2@ai4eda (unspecified)) (set! ai4ee5@p? (unspecified)) (set! ai4ee7@make-no-infinities-violation (unspecified)) (set! ai4ee9@no-infinities-violation? (unspecified)) (set! ai4eeb@&no-infinities-rtd (unspecified)) (set! ai4eed@&no-infinities-rcd (unspecified)) (set! ai4ef3@ai4eee (unspecified)) (set! ai4ef5@ai4ef0 (unspecified)) (set! ai4ef7@ai4eef (unspecified)) (set! ai4efa@p? (unspecified)) (set! ai4efc@make-no-nans-violation (unspecified)) (set! ai4efe@no-nans-violation? (unspecified)) (set! ai4f00@&no-nans-rtd (unspecified)) (set! ai4f02@&no-nans-rcd (unspecified)) (set! ai4c44@ai4c3f (make-record-type-descriptor '&condition '#f 'ai4c42 '#f '#f '#())) (set! ai4f03@ai4c44@ai4c3f ai4c44@ai4c3f) (set! ai4c46@ai4c41 '#f) (set! ai4f04@ai4c46@ai4c41 ai4c46@ai4c41) (set! ai4c48@ai4c40 (make-record-constructor-descriptor ai4c44@ai4c3f '#f ai4c46@ai4c41)) (set! ai4f05@ai4c48@ai4c40 ai4c48@ai4c40) (set! ai4c4b@&condition? (record-predicate ai4c44@ai4c3f)) (set! ai4f06@ai4c4b@&condition? ai4c4b@&condition?) (set! ai4c4d@make-&condition (record-constructor ai4c48@ai4c40)) (set! ai4f07@ai4c4d@make-&condition ai4c4d@make-&condition) (set! ai4c4f@&condition-rtd ai4c44@ai4c3f) (set! ai4f08@ai4c4f@&condition-rtd ai4c4f@&condition-rtd) (set! ai4c51@&condition-rcd ai4c48@ai4c40) (set! ai4f09@ai4c51@&condition-rcd ai4c51@&condition-rcd) (set! ai4c9d@ai4c98 (make-record-type-descriptor '&message ai4c44@ai4c3f 'ai4c9b '#f '#f '#((immutable message)))) (set! ai4f0a@ai4c9d@ai4c98 ai4c9d@ai4c98) (set! ai4c9f@ai4c9a '#f) (set! ai4f0b@ai4c9f@ai4c9a ai4c9f@ai4c9a) (set! ai4ca1@ai4c99 (make-record-constructor-descriptor ai4c9d@ai4c98 ai4c48@ai4c40 ai4c9f@ai4c9a)) (set! ai4f0c@ai4ca1@ai4c99 ai4ca1@ai4c99) (set! ai4ca4@p? (record-predicate ai4c9d@ai4c98)) (set! ai4f0d@ai4ca4@p? ai4ca4@p?) (set! ai4ca6@make-message-condition (record-constructor ai4ca1@ai4c99)) (set! ai4f0e@ai4ca6@make-message-condition ai4ca6@make-message-condition) (set! ai4ca8@ai4c97 (record-accessor ai4c9d@ai4c98 '0)) (set! ai4f0f@ai4ca8@ai4c97 ai4ca8@ai4c97) (set! ai4caa@message-condition? (condition-predicate ai4c9d@ai4c98)) (set! ai4f10@ai4caa@message-condition? ai4caa@message-condition?) (set! ai4cac@condition-message (condition-accessor ai4c9d@ai4c98 ai4ca8@ai4c97)) (set! ai4f11@ai4cac@condition-message ai4cac@condition-message) (set! ai4cae@&message-rtd ai4c9d@ai4c98) (set! ai4f12@ai4cae@&message-rtd ai4cae@&message-rtd) (set! ai4cb0@&message-rcd ai4ca1@ai4c99) (set! ai4f13@ai4cb0@&message-rcd ai4cb0@&message-rcd) (set! ai4cb6@ai4cb1 (make-record-type-descriptor '&warning ai4c44@ai4c3f 'ai4cb4 '#f '#f '#())) (set! ai4f14@ai4cb6@ai4cb1 ai4cb6@ai4cb1) (set! ai4cb8@ai4cb3 '#f) (set! ai4f15@ai4cb8@ai4cb3 ai4cb8@ai4cb3) (set! ai4cba@ai4cb2 (make-record-constructor-descriptor ai4cb6@ai4cb1 ai4c48@ai4c40 ai4cb8@ai4cb3)) (set! ai4f16@ai4cba@ai4cb2 ai4cba@ai4cb2) (set! ai4cbd@p? (record-predicate ai4cb6@ai4cb1)) (set! ai4f17@ai4cbd@p? ai4cbd@p?) (set! ai4cbf@make-warning (record-constructor ai4cba@ai4cb2)) (set! ai4f18@ai4cbf@make-warning ai4cbf@make-warning) (set! ai4cc1@warning? (condition-predicate ai4cb6@ai4cb1)) (set! ai4f19@ai4cc1@warning? ai4cc1@warning?) (set! ai4cc3@&warning-rtd ai4cb6@ai4cb1) (set! ai4f1a@ai4cc3@&warning-rtd ai4cc3@&warning-rtd) (set! ai4cc5@&warning-rcd ai4cba@ai4cb2) (set! ai4f1b@ai4cc5@&warning-rcd ai4cc5@&warning-rcd) (set! ai4ccb@ai4cc6 (make-record-type-descriptor '&serious ai4c44@ai4c3f 'ai4cc9 '#f '#f '#())) (set! ai4f1c@ai4ccb@ai4cc6 ai4ccb@ai4cc6) (set! ai4ccd@ai4cc8 '#f) (set! ai4f1d@ai4ccd@ai4cc8 ai4ccd@ai4cc8) (set! ai4ccf@ai4cc7 (make-record-constructor-descriptor ai4ccb@ai4cc6 ai4c48@ai4c40 ai4ccd@ai4cc8)) (set! ai4f1e@ai4ccf@ai4cc7 ai4ccf@ai4cc7) (set! ai4cd2@p? (record-predicate ai4ccb@ai4cc6)) (set! ai4f1f@ai4cd2@p? ai4cd2@p?) (set! ai4cd4@make-serious-condition (record-constructor ai4ccf@ai4cc7)) (set! ai4f20@ai4cd4@make-serious-condition ai4cd4@make-serious-condition) (set! ai4cd6@serious-condition? (condition-predicate ai4ccb@ai4cc6)) (set! ai4f21@ai4cd6@serious-condition? ai4cd6@serious-condition?) (set! ai4cd8@&serious-rtd ai4ccb@ai4cc6) (set! ai4f22@ai4cd8@&serious-rtd ai4cd8@&serious-rtd) (set! ai4cda@&serious-rcd ai4ccf@ai4cc7) (set! ai4f23@ai4cda@&serious-rcd ai4cda@&serious-rcd) (set! ai4ce0@ai4cdb (make-record-type-descriptor '&error ai4ccb@ai4cc6 'ai4cde '#f '#f '#())) (set! ai4f24@ai4ce0@ai4cdb ai4ce0@ai4cdb) (set! ai4ce2@ai4cdd '#f) (set! ai4f25@ai4ce2@ai4cdd ai4ce2@ai4cdd) (set! ai4ce4@ai4cdc (make-record-constructor-descriptor ai4ce0@ai4cdb ai4ccf@ai4cc7 ai4ce2@ai4cdd)) (set! ai4f26@ai4ce4@ai4cdc ai4ce4@ai4cdc) (set! ai4ce7@p? (record-predicate ai4ce0@ai4cdb)) (set! ai4f27@ai4ce7@p? ai4ce7@p?) (set! ai4ce9@make-error (record-constructor ai4ce4@ai4cdc)) (set! ai4f28@ai4ce9@make-error ai4ce9@make-error) (set! ai4ceb@error? (condition-predicate ai4ce0@ai4cdb)) (set! ai4f29@ai4ceb@error? ai4ceb@error?) (set! ai4ced@&error-rtd ai4ce0@ai4cdb) (set! ai4f2a@ai4ced@&error-rtd ai4ced@&error-rtd) (set! ai4cef@&error-rcd ai4ce4@ai4cdc) (set! ai4f2b@ai4cef@&error-rcd ai4cef@&error-rcd) (set! ai4cf5@ai4cf0 (make-record-type-descriptor '&violation ai4ccb@ai4cc6 'ai4cf3 '#f '#f '#())) (set! ai4f2c@ai4cf5@ai4cf0 ai4cf5@ai4cf0) (set! ai4cf7@ai4cf2 '#f) (set! ai4f2d@ai4cf7@ai4cf2 ai4cf7@ai4cf2) (set! ai4cf9@ai4cf1 (make-record-constructor-descriptor ai4cf5@ai4cf0 ai4ccf@ai4cc7 ai4cf7@ai4cf2)) (set! ai4f2e@ai4cf9@ai4cf1 ai4cf9@ai4cf1) (set! ai4cfc@p? (record-predicate ai4cf5@ai4cf0)) (set! ai4f2f@ai4cfc@p? ai4cfc@p?) (set! ai4cfe@make-violation (record-constructor ai4cf9@ai4cf1)) (set! ai4f30@ai4cfe@make-violation ai4cfe@make-violation) (set! ai4d00@violation? (condition-predicate ai4cf5@ai4cf0)) (set! ai4f31@ai4d00@violation? ai4d00@violation?) (set! ai4d02@&violation-rtd ai4cf5@ai4cf0) (set! ai4f32@ai4d02@&violation-rtd ai4d02@&violation-rtd) (set! ai4d04@&violation-rcd ai4cf9@ai4cf1) (set! ai4f33@ai4d04@&violation-rcd ai4d04@&violation-rcd) (set! ai4d0a@ai4d05 (make-record-type-descriptor '&assertion ai4cf5@ai4cf0 'ai4d08 '#f '#f '#())) (set! ai4f34@ai4d0a@ai4d05 ai4d0a@ai4d05) (set! ai4d0c@ai4d07 '#f) (set! ai4f35@ai4d0c@ai4d07 ai4d0c@ai4d07) (set! ai4d0e@ai4d06 (make-record-constructor-descriptor ai4d0a@ai4d05 ai4cf9@ai4cf1 ai4d0c@ai4d07)) (set! ai4f36@ai4d0e@ai4d06 ai4d0e@ai4d06) (set! ai4d11@p? (record-predicate ai4d0a@ai4d05)) (set! ai4f37@ai4d11@p? ai4d11@p?) (set! ai4d13@make-assertion-violation (record-constructor ai4d0e@ai4d06)) (set! ai4f38@ai4d13@make-assertion-violation ai4d13@make-assertion-violation) (set! ai4d15@assertion-violation? (condition-predicate ai4d0a@ai4d05)) (set! ai4f39@ai4d15@assertion-violation? ai4d15@assertion-violation?) (set! ai4d17@&assertion-rtd ai4d0a@ai4d05) (set! ai4f3a@ai4d17@&assertion-rtd ai4d17@&assertion-rtd) (set! ai4d19@&assertion-rcd ai4d0e@ai4d06) (set! ai4f3b@ai4d19@&assertion-rcd ai4d19@&assertion-rcd) (set! ai4d21@ai4d1c (make-record-type-descriptor '&irritants ai4c44@ai4c3f 'ai4d1f '#f '#f '#((immutable irritants)))) (set! ai4f3c@ai4d21@ai4d1c ai4d21@ai4d1c) (set! ai4d23@ai4d1e '#f) (set! ai4f3d@ai4d23@ai4d1e ai4d23@ai4d1e) (set! ai4d25@ai4d1d (make-record-constructor-descriptor ai4d21@ai4d1c ai4c48@ai4c40 ai4d23@ai4d1e)) (set! ai4f3e@ai4d25@ai4d1d ai4d25@ai4d1d) (set! ai4d28@p? (record-predicate ai4d21@ai4d1c)) (set! ai4f3f@ai4d28@p? ai4d28@p?) (set! ai4d2a@make-irritants-condition (record-constructor ai4d25@ai4d1d)) (set! ai4f40@ai4d2a@make-irritants-condition ai4d2a@make-irritants-condition) (set! ai4d2c@ai4d1b (record-accessor ai4d21@ai4d1c '0)) (set! ai4f41@ai4d2c@ai4d1b ai4d2c@ai4d1b) (set! ai4d2e@irritants-condition? (condition-predicate ai4d21@ai4d1c)) (set! ai4f42@ai4d2e@irritants-condition? ai4d2e@irritants-condition?) (set! ai4d30@condition-irritants (condition-accessor ai4d21@ai4d1c ai4d2c@ai4d1b)) (set! ai4f43@ai4d30@condition-irritants ai4d30@condition-irritants) (set! ai4d32@&irritants-rtd ai4d21@ai4d1c) (set! ai4f44@ai4d32@&irritants-rtd ai4d32@&irritants-rtd) (set! ai4d34@&irritants-rcd ai4d25@ai4d1d) (set! ai4f45@ai4d34@&irritants-rcd ai4d34@&irritants-rcd) (set! ai4d3c@ai4d37 (make-record-type-descriptor '&who ai4c44@ai4c3f 'ai4d3a '#f '#f '#((immutable who)))) (set! ai4f46@ai4d3c@ai4d37 ai4d3c@ai4d37) (set! ai4d3e@ai4d39 '#f) (set! ai4f47@ai4d3e@ai4d39 ai4d3e@ai4d39) (set! ai4d40@ai4d38 (make-record-constructor-descriptor ai4d3c@ai4d37 ai4c48@ai4c40 ai4d3e@ai4d39)) (set! ai4f48@ai4d40@ai4d38 ai4d40@ai4d38) (set! ai4d43@p? (record-predicate ai4d3c@ai4d37)) (set! ai4f49@ai4d43@p? ai4d43@p?) (set! ai4d45@make-who-condition (record-constructor ai4d40@ai4d38)) (set! ai4f4a@ai4d45@make-who-condition ai4d45@make-who-condition) (set! ai4d47@ai4d36 (record-accessor ai4d3c@ai4d37 '0)) (set! ai4f4b@ai4d47@ai4d36 ai4d47@ai4d36) (set! ai4d49@who-condition? (condition-predicate ai4d3c@ai4d37)) (set! ai4f4c@ai4d49@who-condition? ai4d49@who-condition?) (set! ai4d4b@condition-who (condition-accessor ai4d3c@ai4d37 ai4d47@ai4d36)) (set! ai4f4d@ai4d4b@condition-who ai4d4b@condition-who) (set! ai4d4d@&who-rtd ai4d3c@ai4d37) (set! ai4f4e@ai4d4d@&who-rtd ai4d4d@&who-rtd) (set! ai4d4f@&who-rcd ai4d40@ai4d38) (set! ai4f4f@ai4d4f@&who-rcd ai4d4f@&who-rcd) (set! ai4d55@ai4d50 (make-record-type-descriptor '&non-continuable ai4cf5@ai4cf0 'ai4d53 '#f '#f '#())) (set! ai4f50@ai4d55@ai4d50 ai4d55@ai4d50) (set! ai4d57@ai4d52 '#f) (set! ai4f51@ai4d57@ai4d52 ai4d57@ai4d52) (set! ai4d59@ai4d51 (make-record-constructor-descriptor ai4d55@ai4d50 ai4cf9@ai4cf1 ai4d57@ai4d52)) (set! ai4f52@ai4d59@ai4d51 ai4d59@ai4d51) (set! ai4d5c@p? (record-predicate ai4d55@ai4d50)) (set! ai4f53@ai4d5c@p? ai4d5c@p?) (set! ai4d5e@make-non-continuable-violation (record-constructor ai4d59@ai4d51)) (set! ai4f54@ai4d5e@make-non-continuable-violation ai4d5e@make-non-continuable-violation) (set! ai4d60@non-continuable-violation? (condition-predicate ai4d55@ai4d50)) (set! ai4f55@ai4d60@non-continuable-violation? ai4d60@non-continuable-violation?) (set! ai4d62@&non-continuable-rtd ai4d55@ai4d50) (set! ai4f56@ai4d62@&non-continuable-rtd ai4d62@&non-continuable-rtd) (set! ai4d64@&non-continuable-rcd ai4d59@ai4d51) (set! ai4f57@ai4d64@&non-continuable-rcd ai4d64@&non-continuable-rcd) (set! ai4d6a@ai4d65 (make-record-type-descriptor '&implementation-restriction ai4cf5@ai4cf0 'ai4d68 '#f '#f '#())) (set! ai4f58@ai4d6a@ai4d65 ai4d6a@ai4d65) (set! ai4d6c@ai4d67 '#f) (set! ai4f59@ai4d6c@ai4d67 ai4d6c@ai4d67) (set! ai4d6e@ai4d66 (make-record-constructor-descriptor ai4d6a@ai4d65 ai4cf9@ai4cf1 ai4d6c@ai4d67)) (set! ai4f5a@ai4d6e@ai4d66 ai4d6e@ai4d66) (set! ai4d71@p? (record-predicate ai4d6a@ai4d65)) (set! ai4f5b@ai4d71@p? ai4d71@p?) (set! ai4d73@make-implementation-restriction-violation (record-constructor ai4d6e@ai4d66)) (set! ai4f5c@ai4d73@make-implementation-restriction-violation ai4d73@make-implementation-restriction-violation) (set! ai4d75@implementation-restriction-violation? (condition-predicate ai4d6a@ai4d65)) (set! ai4f5d@ai4d75@implementation-restriction-violation? ai4d75@implementation-restriction-violation?) (set! ai4d77@&implementation-restriction-rtd ai4d6a@ai4d65) (set! ai4f5e@ai4d77@&implementation-restriction-rtd ai4d77@&implementation-restriction-rtd) (set! ai4d79@&implementation-restriction-rcd ai4d6e@ai4d66) (set! ai4f5f@ai4d79@&implementation-restriction-rcd ai4d79@&implementation-restriction-rcd) (set! ai4d7f@ai4d7a (make-record-type-descriptor '&lexical ai4cf5@ai4cf0 'ai4d7d '#f '#f '#())) (set! ai4f60@ai4d7f@ai4d7a ai4d7f@ai4d7a) (set! ai4d81@ai4d7c '#f) (set! ai4f61@ai4d81@ai4d7c ai4d81@ai4d7c) (set! ai4d83@ai4d7b (make-record-constructor-descriptor ai4d7f@ai4d7a ai4cf9@ai4cf1 ai4d81@ai4d7c)) (set! ai4f62@ai4d83@ai4d7b ai4d83@ai4d7b) (set! ai4d86@p? (record-predicate ai4d7f@ai4d7a)) (set! ai4f63@ai4d86@p? ai4d86@p?) (set! ai4d88@make-lexical-violation (record-constructor ai4d83@ai4d7b)) (set! ai4f64@ai4d88@make-lexical-violation ai4d88@make-lexical-violation) (set! ai4d8a@lexical-violation? (condition-predicate ai4d7f@ai4d7a)) (set! ai4f65@ai4d8a@lexical-violation? ai4d8a@lexical-violation?) (set! ai4d8c@&lexical-rtd ai4d7f@ai4d7a) (set! ai4f66@ai4d8c@&lexical-rtd ai4d8c@&lexical-rtd) (set! ai4d8e@&lexical-rcd ai4d83@ai4d7b) (set! ai4f67@ai4d8e@&lexical-rcd ai4d8e@&lexical-rcd) (set! ai4d98@ai4d93 (make-record-type-descriptor '&syntax ai4cf5@ai4cf0 'ai4d96 '#f '#f '#((immutable form) (immutable subform)))) (set! ai4f68@ai4d98@ai4d93 ai4d98@ai4d93) (set! ai4d9a@ai4d95 '#f) (set! ai4f69@ai4d9a@ai4d95 ai4d9a@ai4d95) (set! ai4d9c@ai4d94 (make-record-constructor-descriptor ai4d98@ai4d93 ai4cf9@ai4cf1 ai4d9a@ai4d95)) (set! ai4f6a@ai4d9c@ai4d94 ai4d9c@ai4d94) (set! ai4d9f@p? (record-predicate ai4d98@ai4d93)) (set! ai4f6b@ai4d9f@p? ai4d9f@p?) (set! ai4da1@make-syntax-violation (record-constructor ai4d9c@ai4d94)) (set! ai4f6c@ai4da1@make-syntax-violation ai4da1@make-syntax-violation) (set! ai4da3@ai4d90 (record-accessor ai4d98@ai4d93 '0)) (set! ai4f6d@ai4da3@ai4d90 ai4da3@ai4d90) (set! ai4da5@ai4d92 (record-accessor ai4d98@ai4d93 '1)) (set! ai4f6e@ai4da5@ai4d92 ai4da5@ai4d92) (set! ai4da7@syntax-violation? (condition-predicate ai4d98@ai4d93)) (set! ai4f6f@ai4da7@syntax-violation? ai4da7@syntax-violation?) (set! ai4da9@syntax-violation-form (condition-accessor ai4d98@ai4d93 ai4da3@ai4d90)) (set! ai4f70@ai4da9@syntax-violation-form ai4da9@syntax-violation-form) (set! ai4dab@syntax-violation-subform (condition-accessor ai4d98@ai4d93 ai4da5@ai4d92)) (set! ai4f71@ai4dab@syntax-violation-subform ai4dab@syntax-violation-subform) (set! ai4dad@&syntax-rtd ai4d98@ai4d93) (set! ai4f72@ai4dad@&syntax-rtd ai4dad@&syntax-rtd) (set! ai4daf@&syntax-rcd ai4d9c@ai4d94) (set! ai4f73@ai4daf@&syntax-rcd ai4daf@&syntax-rcd) (set! ai4db5@ai4db0 (make-record-type-descriptor '&undefined ai4cf5@ai4cf0 'ai4db3 '#f '#f '#())) (set! ai4f74@ai4db5@ai4db0 ai4db5@ai4db0) (set! ai4db7@ai4db2 '#f) (set! ai4f75@ai4db7@ai4db2 ai4db7@ai4db2) (set! ai4db9@ai4db1 (make-record-constructor-descriptor ai4db5@ai4db0 ai4cf9@ai4cf1 ai4db7@ai4db2)) (set! ai4f76@ai4db9@ai4db1 ai4db9@ai4db1) (set! ai4dbc@p? (record-predicate ai4db5@ai4db0)) (set! ai4f77@ai4dbc@p? ai4dbc@p?) (set! ai4dbe@make-undefined-violation (record-constructor ai4db9@ai4db1)) (set! ai4f78@ai4dbe@make-undefined-violation ai4dbe@make-undefined-violation) (set! ai4dc0@undefined-violation? (condition-predicate ai4db5@ai4db0)) (set! ai4f79@ai4dc0@undefined-violation? ai4dc0@undefined-violation?) (set! ai4dc2@&undefined-rtd ai4db5@ai4db0) (set! ai4f7a@ai4dc2@&undefined-rtd ai4dc2@&undefined-rtd) (set! ai4dc4@&undefined-rcd ai4db9@ai4db1) (set! ai4f7b@ai4dc4@&undefined-rcd ai4dc4@&undefined-rcd) (set! ai4dca@ai4dc5 (make-record-type-descriptor '&i/o ai4ce0@ai4cdb 'ai4dc8 '#f '#f '#())) (set! ai4f7c@ai4dca@ai4dc5 ai4dca@ai4dc5) (set! ai4dcc@ai4dc7 '#f) (set! ai4f7d@ai4dcc@ai4dc7 ai4dcc@ai4dc7) (set! ai4dce@ai4dc6 (make-record-constructor-descriptor ai4dca@ai4dc5 ai4ce4@ai4cdc ai4dcc@ai4dc7)) (set! ai4f7e@ai4dce@ai4dc6 ai4dce@ai4dc6) (set! ai4dd1@p? (record-predicate ai4dca@ai4dc5)) (set! ai4f7f@ai4dd1@p? ai4dd1@p?) (set! ai4dd3@make-i/o-error (record-constructor ai4dce@ai4dc6)) (set! ai4f80@ai4dd3@make-i/o-error ai4dd3@make-i/o-error) (set! ai4dd5@i/o-error? (condition-predicate ai4dca@ai4dc5)) (set! ai4f81@ai4dd5@i/o-error? ai4dd5@i/o-error?) (set! ai4dd7@&i/o-rtd ai4dca@ai4dc5) (set! ai4f82@ai4dd7@&i/o-rtd ai4dd7@&i/o-rtd) (set! ai4dd9@&i/o-rcd ai4dce@ai4dc6) (set! ai4f83@ai4dd9@&i/o-rcd ai4dd9@&i/o-rcd) (set! ai4ddf@ai4dda (make-record-type-descriptor '&i/o-read ai4dca@ai4dc5 'ai4ddd '#f '#f '#())) (set! ai4f84@ai4ddf@ai4dda ai4ddf@ai4dda) (set! ai4de1@ai4ddc '#f) (set! ai4f85@ai4de1@ai4ddc ai4de1@ai4ddc) (set! ai4de3@ai4ddb (make-record-constructor-descriptor ai4ddf@ai4dda ai4dce@ai4dc6 ai4de1@ai4ddc)) (set! ai4f86@ai4de3@ai4ddb ai4de3@ai4ddb) (set! ai4de6@p? (record-predicate ai4ddf@ai4dda)) (set! ai4f87@ai4de6@p? ai4de6@p?) (set! ai4de8@make-i/o-read-error (record-constructor ai4de3@ai4ddb)) (set! ai4f88@ai4de8@make-i/o-read-error ai4de8@make-i/o-read-error) (set! ai4dea@i/o-read-error? (condition-predicate ai4ddf@ai4dda)) (set! ai4f89@ai4dea@i/o-read-error? ai4dea@i/o-read-error?) (set! ai4dec@&i/o-read-rtd ai4ddf@ai4dda) (set! ai4f8a@ai4dec@&i/o-read-rtd ai4dec@&i/o-read-rtd) (set! ai4dee@&i/o-read-rcd ai4de3@ai4ddb) (set! ai4f8b@ai4dee@&i/o-read-rcd ai4dee@&i/o-read-rcd) (set! ai4df4@ai4def (make-record-type-descriptor '&i/o-write ai4dca@ai4dc5 'ai4df2 '#f '#f '#())) (set! ai4f8c@ai4df4@ai4def ai4df4@ai4def) (set! ai4df6@ai4df1 '#f) (set! ai4f8d@ai4df6@ai4df1 ai4df6@ai4df1) (set! ai4df8@ai4df0 (make-record-constructor-descriptor ai4df4@ai4def ai4dce@ai4dc6 ai4df6@ai4df1)) (set! ai4f8e@ai4df8@ai4df0 ai4df8@ai4df0) (set! ai4dfb@p? (record-predicate ai4df4@ai4def)) (set! ai4f8f@ai4dfb@p? ai4dfb@p?) (set! ai4dfd@make-i/o-write-error (record-constructor ai4df8@ai4df0)) (set! ai4f90@ai4dfd@make-i/o-write-error ai4dfd@make-i/o-write-error) (set! ai4dff@i/o-write-error? (condition-predicate ai4df4@ai4def)) (set! ai4f91@ai4dff@i/o-write-error? ai4dff@i/o-write-error?) (set! ai4e01@&i/o-write-rtd ai4df4@ai4def) (set! ai4f92@ai4e01@&i/o-write-rtd ai4e01@&i/o-write-rtd) (set! ai4e03@&i/o-write-rcd ai4df8@ai4df0) (set! ai4f93@ai4e03@&i/o-write-rcd ai4e03@&i/o-write-rcd) (set! ai4e0b@ai4e06 (make-record-type-descriptor '&i/o-invalid-position ai4dca@ai4dc5 'ai4e09 '#f '#f '#((immutable position)))) (set! ai4f94@ai4e0b@ai4e06 ai4e0b@ai4e06) (set! ai4e0d@ai4e08 '#f) (set! ai4f95@ai4e0d@ai4e08 ai4e0d@ai4e08) (set! ai4e0f@ai4e07 (make-record-constructor-descriptor ai4e0b@ai4e06 ai4dce@ai4dc6 ai4e0d@ai4e08)) (set! ai4f96@ai4e0f@ai4e07 ai4e0f@ai4e07) (set! ai4e12@p? (record-predicate ai4e0b@ai4e06)) (set! ai4f97@ai4e12@p? ai4e12@p?) (set! ai4e14@make-i/o-invalid-position-error (record-constructor ai4e0f@ai4e07)) (set! ai4f98@ai4e14@make-i/o-invalid-position-error ai4e14@make-i/o-invalid-position-error) (set! ai4e16@ai4e05 (record-accessor ai4e0b@ai4e06 '0)) (set! ai4f99@ai4e16@ai4e05 ai4e16@ai4e05) (set! ai4e18@i/o-invalid-position-error? (condition-predicate ai4e0b@ai4e06)) (set! ai4f9a@ai4e18@i/o-invalid-position-error? ai4e18@i/o-invalid-position-error?) (set! ai4e1a@i/o-error-position (condition-accessor ai4e0b@ai4e06 ai4e16@ai4e05)) (set! ai4f9b@ai4e1a@i/o-error-position ai4e1a@i/o-error-position) (set! ai4e1c@&i/o-invalid-position-rtd ai4e0b@ai4e06) (set! ai4f9c@ai4e1c@&i/o-invalid-position-rtd ai4e1c@&i/o-invalid-position-rtd) (set! ai4e1e@&i/o-invalid-position-rcd ai4e0f@ai4e07) (set! ai4f9d@ai4e1e@&i/o-invalid-position-rcd ai4e1e@&i/o-invalid-position-rcd) (set! ai4e26@ai4e21 (make-record-type-descriptor '&i/o-filename ai4dca@ai4dc5 'ai4e24 '#f '#f '#((immutable filename)))) (set! ai4f9e@ai4e26@ai4e21 ai4e26@ai4e21) (set! ai4e28@ai4e23 '#f) (set! ai4f9f@ai4e28@ai4e23 ai4e28@ai4e23) (set! ai4e2a@ai4e22 (make-record-constructor-descriptor ai4e26@ai4e21 ai4dce@ai4dc6 ai4e28@ai4e23)) (set! ai4fa0@ai4e2a@ai4e22 ai4e2a@ai4e22) (set! ai4e2d@p? (record-predicate ai4e26@ai4e21)) (set! ai4fa1@ai4e2d@p? ai4e2d@p?) (set! ai4e2f@make-i/o-filename-error (record-constructor ai4e2a@ai4e22)) (set! ai4fa2@ai4e2f@make-i/o-filename-error ai4e2f@make-i/o-filename-error) (set! ai4e31@ai4e20 (record-accessor ai4e26@ai4e21 '0)) (set! ai4fa3@ai4e31@ai4e20 ai4e31@ai4e20) (set! ai4e33@i/o-filename-error? (condition-predicate ai4e26@ai4e21)) (set! ai4fa4@ai4e33@i/o-filename-error? ai4e33@i/o-filename-error?) (set! ai4e35@i/o-error-filename (condition-accessor ai4e26@ai4e21 ai4e31@ai4e20)) (set! ai4fa5@ai4e35@i/o-error-filename ai4e35@i/o-error-filename) (set! ai4e37@&i/o-filename-rtd ai4e26@ai4e21) (set! ai4fa6@ai4e37@&i/o-filename-rtd ai4e37@&i/o-filename-rtd) (set! ai4e39@&i/o-filename-rcd ai4e2a@ai4e22) (set! ai4fa7@ai4e39@&i/o-filename-rcd ai4e39@&i/o-filename-rcd) (set! ai4e3f@ai4e3a (make-record-type-descriptor '&i/o-file-protection ai4e26@ai4e21 'ai4e3d '#f '#f '#())) (set! ai4fa8@ai4e3f@ai4e3a ai4e3f@ai4e3a) (set! ai4e41@ai4e3c '#f) (set! ai4fa9@ai4e41@ai4e3c ai4e41@ai4e3c) (set! ai4e43@ai4e3b (make-record-constructor-descriptor ai4e3f@ai4e3a ai4e2a@ai4e22 ai4e41@ai4e3c)) (set! ai4faa@ai4e43@ai4e3b ai4e43@ai4e3b) (set! ai4e46@p? (record-predicate ai4e3f@ai4e3a)) (set! ai4fab@ai4e46@p? ai4e46@p?) (set! ai4e48@make-i/o-file-protection-error (record-constructor ai4e43@ai4e3b)) (set! ai4fac@ai4e48@make-i/o-file-protection-error ai4e48@make-i/o-file-protection-error) (set! ai4e4a@i/o-file-protection-error? (condition-predicate ai4e3f@ai4e3a)) (set! ai4fad@ai4e4a@i/o-file-protection-error? ai4e4a@i/o-file-protection-error?) (set! ai4e4c@&i/o-file-protection-rtd ai4e3f@ai4e3a) (set! ai4fae@ai4e4c@&i/o-file-protection-rtd ai4e4c@&i/o-file-protection-rtd) (set! ai4e4e@&i/o-file-protection-rcd ai4e43@ai4e3b) (set! ai4faf@ai4e4e@&i/o-file-protection-rcd ai4e4e@&i/o-file-protection-rcd) (set! ai4e54@ai4e4f (make-record-type-descriptor '&i/o-file-is-read-only ai4e3f@ai4e3a 'ai4e52 '#f '#f '#())) (set! ai4fb0@ai4e54@ai4e4f ai4e54@ai4e4f) (set! ai4e56@ai4e51 '#f) (set! ai4fb1@ai4e56@ai4e51 ai4e56@ai4e51) (set! ai4e58@ai4e50 (make-record-constructor-descriptor ai4e54@ai4e4f ai4e43@ai4e3b ai4e56@ai4e51)) (set! ai4fb2@ai4e58@ai4e50 ai4e58@ai4e50) (set! ai4e5b@p? (record-predicate ai4e54@ai4e4f)) (set! ai4fb3@ai4e5b@p? ai4e5b@p?) (set! ai4e5d@make-i/o-file-is-read-only-error (record-constructor ai4e58@ai4e50)) (set! ai4fb4@ai4e5d@make-i/o-file-is-read-only-error ai4e5d@make-i/o-file-is-read-only-error) (set! ai4e5f@i/o-file-is-read-only-error? (condition-predicate ai4e54@ai4e4f)) (set! ai4fb5@ai4e5f@i/o-file-is-read-only-error? ai4e5f@i/o-file-is-read-only-error?) (set! ai4e61@&i/o-file-is-read-only-rtd ai4e54@ai4e4f) (set! ai4fb6@ai4e61@&i/o-file-is-read-only-rtd ai4e61@&i/o-file-is-read-only-rtd) (set! ai4e63@&i/o-file-is-read-only-rcd ai4e58@ai4e50) (set! ai4fb7@ai4e63@&i/o-file-is-read-only-rcd ai4e63@&i/o-file-is-read-only-rcd) (set! ai4e69@ai4e64 (make-record-type-descriptor '&i/o-file-already-exists ai4e26@ai4e21 'ai4e67 '#f '#f '#())) (set! ai4fb8@ai4e69@ai4e64 ai4e69@ai4e64) (set! ai4e6b@ai4e66 '#f) (set! ai4fb9@ai4e6b@ai4e66 ai4e6b@ai4e66) (set! ai4e6d@ai4e65 (make-record-constructor-descriptor ai4e69@ai4e64 ai4e2a@ai4e22 ai4e6b@ai4e66)) (set! ai4fba@ai4e6d@ai4e65 ai4e6d@ai4e65) (set! ai4e70@p? (record-predicate ai4e69@ai4e64)) (set! ai4fbb@ai4e70@p? ai4e70@p?) (set! ai4e72@make-i/o-file-already-exists-error (record-constructor ai4e6d@ai4e65)) (set! ai4fbc@ai4e72@make-i/o-file-already-exists-error ai4e72@make-i/o-file-already-exists-error) (set! ai4e74@i/o-file-already-exists-error? (condition-predicate ai4e69@ai4e64)) (set! ai4fbd@ai4e74@i/o-file-already-exists-error? ai4e74@i/o-file-already-exists-error?) (set! ai4e76@&i/o-file-already-exists-rtd ai4e69@ai4e64) (set! ai4fbe@ai4e76@&i/o-file-already-exists-rtd ai4e76@&i/o-file-already-exists-rtd) (set! ai4e78@&i/o-file-already-exists-rcd ai4e6d@ai4e65) (set! ai4fbf@ai4e78@&i/o-file-already-exists-rcd ai4e78@&i/o-file-already-exists-rcd) (set! ai4e7e@ai4e79 (make-record-type-descriptor '&i/o-file-does-not-exist ai4e26@ai4e21 'ai4e7c '#f '#f '#())) (set! ai4fc0@ai4e7e@ai4e79 ai4e7e@ai4e79) (set! ai4e80@ai4e7b '#f) (set! ai4fc1@ai4e80@ai4e7b ai4e80@ai4e7b) (set! ai4e82@ai4e7a (make-record-constructor-descriptor ai4e7e@ai4e79 ai4e2a@ai4e22 ai4e80@ai4e7b)) (set! ai4fc2@ai4e82@ai4e7a ai4e82@ai4e7a) (set! ai4e85@p? (record-predicate ai4e7e@ai4e79)) (set! ai4fc3@ai4e85@p? ai4e85@p?) (set! ai4e87@make-i/o-file-does-not-exist-error (record-constructor ai4e82@ai4e7a)) (set! ai4fc4@ai4e87@make-i/o-file-does-not-exist-error ai4e87@make-i/o-file-does-not-exist-error) (set! ai4e89@i/o-file-does-not-exist-error? (condition-predicate ai4e7e@ai4e79)) (set! ai4fc5@ai4e89@i/o-file-does-not-exist-error? ai4e89@i/o-file-does-not-exist-error?) (set! ai4e8b@&i/o-file-does-not-exist-rtd ai4e7e@ai4e79) (set! ai4fc6@ai4e8b@&i/o-file-does-not-exist-rtd ai4e8b@&i/o-file-does-not-exist-rtd) (set! ai4e8d@&i/o-file-does-not-exist-rcd ai4e82@ai4e7a) (set! ai4fc7@ai4e8d@&i/o-file-does-not-exist-rcd ai4e8d@&i/o-file-does-not-exist-rcd) (set! ai4e95@ai4e90 (make-record-type-descriptor '&i/o-port ai4dca@ai4dc5 'ai4e93 '#f '#f '#((immutable port)))) (set! ai4fc8@ai4e95@ai4e90 ai4e95@ai4e90) (set! ai4e97@ai4e92 '#f) (set! ai4fc9@ai4e97@ai4e92 ai4e97@ai4e92) (set! ai4e99@ai4e91 (make-record-constructor-descriptor ai4e95@ai4e90 ai4dce@ai4dc6 ai4e97@ai4e92)) (set! ai4fca@ai4e99@ai4e91 ai4e99@ai4e91) (set! ai4e9c@p? (record-predicate ai4e95@ai4e90)) (set! ai4fcb@ai4e9c@p? ai4e9c@p?) (set! ai4e9e@make-i/o-port-error (record-constructor ai4e99@ai4e91)) (set! ai4fcc@ai4e9e@make-i/o-port-error ai4e9e@make-i/o-port-error) (set! ai4ea0@ai4e8f (record-accessor ai4e95@ai4e90 '0)) (set! ai4fcd@ai4ea0@ai4e8f ai4ea0@ai4e8f) (set! ai4ea2@i/o-port-error? (condition-predicate ai4e95@ai4e90)) (set! ai4fce@ai4ea2@i/o-port-error? ai4ea2@i/o-port-error?) (set! ai4ea4@i/o-error-port (condition-accessor ai4e95@ai4e90 ai4ea0@ai4e8f)) (set! ai4fcf@ai4ea4@i/o-error-port ai4ea4@i/o-error-port) (set! ai4ea6@&i/o-port-rtd ai4e95@ai4e90) (set! ai4fd0@ai4ea6@&i/o-port-rtd ai4ea6@&i/o-port-rtd) (set! ai4ea8@&i/o-port-rcd ai4e99@ai4e91) (set! ai4fd1@ai4ea8@&i/o-port-rcd ai4ea8@&i/o-port-rcd) (set! ai4eae@ai4ea9 (make-record-type-descriptor '&i/o-decoding ai4e95@ai4e90 'ai4eac '#f '#f '#())) (set! ai4fd2@ai4eae@ai4ea9 ai4eae@ai4ea9) (set! ai4eb0@ai4eab '#f) (set! ai4fd3@ai4eb0@ai4eab ai4eb0@ai4eab) (set! ai4eb2@ai4eaa (make-record-constructor-descriptor ai4eae@ai4ea9 ai4e99@ai4e91 ai4eb0@ai4eab)) (set! ai4fd4@ai4eb2@ai4eaa ai4eb2@ai4eaa) (set! ai4eb5@p? (record-predicate ai4eae@ai4ea9)) (set! ai4fd5@ai4eb5@p? ai4eb5@p?) (set! ai4eb7@make-i/o-decoding-error (record-constructor ai4eb2@ai4eaa)) (set! ai4fd6@ai4eb7@make-i/o-decoding-error ai4eb7@make-i/o-decoding-error) (set! ai4eb9@i/o-decoding-error? (condition-predicate ai4eae@ai4ea9)) (set! ai4fd7@ai4eb9@i/o-decoding-error? ai4eb9@i/o-decoding-error?) (set! ai4ebb@&i/o-decoding-rtd ai4eae@ai4ea9) (set! ai4fd8@ai4ebb@&i/o-decoding-rtd ai4ebb@&i/o-decoding-rtd) (set! ai4ebd@&i/o-decoding-rcd ai4eb2@ai4eaa) (set! ai4fd9@ai4ebd@&i/o-decoding-rcd ai4ebd@&i/o-decoding-rcd) (set! ai4ec5@ai4ec0 (make-record-type-descriptor '&i/o-encoding ai4e95@ai4e90 'ai4ec3 '#f '#f '#((immutable char)))) (set! ai4fda@ai4ec5@ai4ec0 ai4ec5@ai4ec0) (set! ai4ec7@ai4ec2 '#f) (set! ai4fdb@ai4ec7@ai4ec2 ai4ec7@ai4ec2) (set! ai4ec9@ai4ec1 (make-record-constructor-descriptor ai4ec5@ai4ec0 ai4e99@ai4e91 ai4ec7@ai4ec2)) (set! ai4fdc@ai4ec9@ai4ec1 ai4ec9@ai4ec1) (set! ai4ecc@p? (record-predicate ai4ec5@ai4ec0)) (set! ai4fdd@ai4ecc@p? ai4ecc@p?) (set! ai4ece@make-i/o-encoding-error (record-constructor ai4ec9@ai4ec1)) (set! ai4fde@ai4ece@make-i/o-encoding-error ai4ece@make-i/o-encoding-error) (set! ai4ed0@ai4ebf (record-accessor ai4ec5@ai4ec0 '0)) (set! ai4fdf@ai4ed0@ai4ebf ai4ed0@ai4ebf) (set! ai4ed2@i/o-encoding-error? (condition-predicate ai4ec5@ai4ec0)) (set! ai4fe0@ai4ed2@i/o-encoding-error? ai4ed2@i/o-encoding-error?) (set! ai4ed4@i/o-encoding-error-char (condition-accessor ai4ec5@ai4ec0 ai4ed0@ai4ebf)) (set! ai4fe1@ai4ed4@i/o-encoding-error-char ai4ed4@i/o-encoding-error-char) (set! ai4ed6@&i/o-encoding-rtd ai4ec5@ai4ec0) (set! ai4fe2@ai4ed6@&i/o-encoding-rtd ai4ed6@&i/o-encoding-rtd) (set! ai4ed8@&i/o-encoding-rcd ai4ec9@ai4ec1) (set! ai4fe3@ai4ed8@&i/o-encoding-rcd ai4ed8@&i/o-encoding-rcd) (set! ai4ede@ai4ed9 (make-record-type-descriptor '&no-infinities ai4d6a@ai4d65 'ai4edc '#f '#f '#())) (set! ai4fe4@ai4ede@ai4ed9 ai4ede@ai4ed9) (set! ai4ee0@ai4edb '#f) (set! ai4fe5@ai4ee0@ai4edb ai4ee0@ai4edb) (set! ai4ee2@ai4eda (make-record-constructor-descriptor ai4ede@ai4ed9 ai4d6e@ai4d66 ai4ee0@ai4edb)) (set! ai4fe6@ai4ee2@ai4eda ai4ee2@ai4eda) (set! ai4ee5@p? (record-predicate ai4ede@ai4ed9)) (set! ai4fe7@ai4ee5@p? ai4ee5@p?) (set! ai4ee7@make-no-infinities-violation (record-constructor ai4ee2@ai4eda)) (set! ai4fe8@ai4ee7@make-no-infinities-violation ai4ee7@make-no-infinities-violation) (set! ai4ee9@no-infinities-violation? (condition-predicate ai4ede@ai4ed9)) (set! ai4fe9@ai4ee9@no-infinities-violation? ai4ee9@no-infinities-violation?) (set! ai4eeb@&no-infinities-rtd ai4ede@ai4ed9) (set! ai4fea@ai4eeb@&no-infinities-rtd ai4eeb@&no-infinities-rtd) (set! ai4eed@&no-infinities-rcd ai4ee2@ai4eda) (set! ai4feb@ai4eed@&no-infinities-rcd ai4eed@&no-infinities-rcd) (set! ai4ef3@ai4eee (make-record-type-descriptor '&no-nans ai4d6a@ai4d65 'ai4ef1 '#f '#f '#())) (set! ai4fec@ai4ef3@ai4eee ai4ef3@ai4eee) (set! ai4ef5@ai4ef0 '#f) (set! ai4fed@ai4ef5@ai4ef0 ai4ef5@ai4ef0) (set! ai4ef7@ai4eef (make-record-constructor-descriptor ai4ef3@ai4eee ai4d6e@ai4d66 ai4ef5@ai4ef0)) (set! ai4fee@ai4ef7@ai4eef ai4ef7@ai4eef) (set! ai4efa@p? (record-predicate ai4ef3@ai4eee)) (set! ai4fef@ai4efa@p? ai4efa@p?) (set! ai4efc@make-no-nans-violation (record-constructor ai4ef7@ai4eef)) (set! ai4ff0@ai4efc@make-no-nans-violation ai4efc@make-no-nans-violation) (set! ai4efe@no-nans-violation? (condition-predicate ai4ef3@ai4eee)) (set! ai4ff1@ai4efe@no-nans-violation? ai4efe@no-nans-violation?) (set! ai4f00@&no-nans-rtd ai4ef3@ai4eee) (set! ai4ff2@ai4f00@&no-nans-rtd ai4f00@&no-nans-rtd) (set! ai4f02@&no-nans-rcd ai4ef7@ai4eef) (set! ai4ff3@ai4f02@&no-nans-rcd ai4f02@&no-nans-rcd) (void))
(begin (begin (ai2a78@ai2a2d@current-primitive-locations (lambda (ai54bc@x) (let ((ai54be@t (assq ai54bc@x '((&no-nans-rcd . ai4ff3@ai4f02@&no-nans-rcd) (&no-nans-rtd . ai4ff2@ai4f00@&no-nans-rtd) (&no-infinities-rcd . ai4feb@ai4eed@&no-infinities-rcd) (&no-infinities-rtd . ai4fea@ai4eeb@&no-infinities-rtd) (&i/o-encoding-rcd . ai4fe3@ai4ed8@&i/o-encoding-rcd) (&i/o-encoding-rtd . ai4fe2@ai4ed6@&i/o-encoding-rtd) (&i/o-decoding-rcd . ai4fd9@ai4ebd@&i/o-decoding-rcd) (&i/o-decoding-rtd . ai4fd8@ai4ebb@&i/o-decoding-rtd) (&i/o-port-rcd . ai4fd1@ai4ea8@&i/o-port-rcd) (&i/o-port-rtd . ai4fd0@ai4ea6@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . ai4fc7@ai4e8d@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . ai4fc6@ai4e8b@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . ai4fbf@ai4e78@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . ai4fbe@ai4e76@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . ai4fb7@ai4e63@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . ai4fb6@ai4e61@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . ai4faf@ai4e4e@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . ai4fae@ai4e4c@&i/o-file-protection-rtd) (&i/o-filename-rcd . ai4fa7@ai4e39@&i/o-filename-rcd) (&i/o-filename-rtd . ai4fa6@ai4e37@&i/o-filename-rtd) (&i/o-invalid-position-rcd . ai4f9d@ai4e1e@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . ai4f9c@ai4e1c@&i/o-invalid-position-rtd) (&i/o-write-rcd . ai4f93@ai4e03@&i/o-write-rcd) (&i/o-write-rtd . ai4f92@ai4e01@&i/o-write-rtd) (&i/o-read-rcd . ai4f8b@ai4dee@&i/o-read-rcd) (&i/o-read-rtd . ai4f8a@ai4dec@&i/o-read-rtd) (&i/o-rcd . ai4f83@ai4dd9@&i/o-rcd) (&i/o-rtd . ai4f82@ai4dd7@&i/o-rtd) (&undefined-rcd . ai4f7b@ai4dc4@&undefined-rcd) (&undefined-rtd . ai4f7a@ai4dc2@&undefined-rtd) (&syntax-rcd . ai4f73@ai4daf@&syntax-rcd) (&syntax-rtd . ai4f72@ai4dad@&syntax-rtd) (&lexical-rcd . ai4f67@ai4d8e@&lexical-rcd) (&lexical-rtd . ai4f66@ai4d8c@&lexical-rtd) (&implementation-restriction-rcd . ai4f5f@ai4d79@&implementation-restriction-rcd) (&implementation-restriction-rtd . ai4f5e@ai4d77@&implementation-restriction-rtd) (&non-continuable-rcd . ai4f57@ai4d64@&non-continuable-rcd) (&non-continuable-rtd . ai4f56@ai4d62@&non-continuable-rtd) (&who-rcd . ai4f4f@ai4d4f@&who-rcd) (&who-rtd . ai4f4e@ai4d4d@&who-rtd) (&irritants-rcd . ai4f45@ai4d34@&irritants-rcd) (&irritants-rtd . ai4f44@ai4d32@&irritants-rtd) (&assertion-rcd . ai4f3b@ai4d19@&assertion-rcd) (&assertion-rtd . ai4f3a@ai4d17@&assertion-rtd) (&violation-rcd . ai4f33@ai4d04@&violation-rcd) (&violation-rtd . ai4f32@ai4d02@&violation-rtd) (&error-rcd . ai4f2b@ai4cef@&error-rcd) (&error-rtd . ai4f2a@ai4ced@&error-rtd) (&serious-rcd . ai4f23@ai4cda@&serious-rcd) (&serious-rtd . ai4f22@ai4cd8@&serious-rtd) (&warning-rcd . ai4f1b@ai4cc5@&warning-rcd) (&warning-rtd . ai4f1a@ai4cc3@&warning-rtd) (&message-rcd . ai4f13@ai4cb0@&message-rcd) (&message-rtd . ai4f12@ai4cae@&message-rtd) (&condition-rcd . ai4f09@ai4c51@&condition-rcd) (&condition-rtd . ai4f08@ai4c4f@&condition-rtd) (syntax-error . ai4c2b@ai31cf@syntax-error) (syntax-dispatch . ai4bc9@ai30f3@syntax-dispatch) (load . ai515b@ai5011@load) (interaction-environment . ai4c34@ai31e1@interaction-environment) (library-path . ai2cef@ai2b1b@library-path) (mosh-cache-dir . ai2a26@ai2905@mosh-cache-dir) (make-parameter . ai2a25@ai2903@make-parameter) (make-variable-transformer . ai4b86@ai2f1e@make-variable-transformer) (identifier? . ai4c2e@ai31d5@identifier?) (generate-temporaries . ai4c24@ai31c1@generate-temporaries) (free-identifier=? . ai4c25@ai31c3@free-identifier=?) (syntax->datum . ai4c30@ai31d9@syntax->datum) (datum->syntax . ai4c2f@ai31d7@datum->syntax) (bound-identifier=? . ai4c26@ai31c5@bound-identifier=?) (make-i/o-write-error . ai4f90@ai4dfd@make-i/o-write-error) (make-i/o-read-error . ai4f88@ai4de8@make-i/o-read-error) (make-i/o-port-error . ai4fcc@ai4e9e@make-i/o-port-error) (make-i/o-invalid-position-error . ai4f98@ai4e14@make-i/o-invalid-position-error) (make-i/o-filename-error . ai4fa2@ai4e2f@make-i/o-filename-error) (make-i/o-file-protection-error . ai4fac@ai4e48@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . ai4fb4@ai4e5d@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . ai4fc4@ai4e87@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . ai4fbc@ai4e72@make-i/o-file-already-exists-error) (make-i/o-error . ai4f80@ai4dd3@make-i/o-error) (make-i/o-encoding-error . ai4fde@ai4ece@make-i/o-encoding-error) (make-i/o-decoding-error . ai4fd6@ai4eb7@make-i/o-decoding-error) (i/o-write-error? . ai4f91@ai4dff@i/o-write-error?) (i/o-read-error? . ai4f89@ai4dea@i/o-read-error?) (i/o-port-error? . ai4fce@ai4ea2@i/o-port-error?) (i/o-invalid-position-error? . ai4f9a@ai4e18@i/o-invalid-position-error?) (i/o-filename-error? . ai4fa4@ai4e33@i/o-filename-error?) (i/o-file-protection-error? . ai4fad@ai4e4a@i/o-file-protection-error?) (i/o-file-is-read-only-error? . ai4fb5@ai4e5f@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . ai4fc5@ai4e89@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . ai4fbd@ai4e74@i/o-file-already-exists-error?) (i/o-error? . ai4f81@ai4dd5@i/o-error?) (i/o-error-position . ai4f9b@ai4e1a@i/o-error-position) (i/o-error-port . ai4fcf@ai4ea4@i/o-error-port) (i/o-error-filename . ai4fa5@ai4e35@i/o-error-filename) (i/o-encoding-error? . ai4fe0@ai4ed2@i/o-encoding-error?) (i/o-encoding-error-char . ai4fe1@ai4ed4@i/o-encoding-error-char) (i/o-decoding-error? . ai4fd7@ai4eb9@i/o-decoding-error?) (scheme-report-environment . ai4c1b@ai31af@scheme-report-environment) (null-environment . ai4c1a@ai31ad@null-environment) (command-line . ai5158@ai500b@command-line) (eval . ai4c1d@ai31b3@eval) (environment . ai4c19@ai31ab@environment) (who-condition? . ai4f4c@ai4d49@who-condition?) (warning? . ai4f19@ai4cc1@warning?) (violation? . ai4f31@ai4d00@violation?) (undefined-violation? . ai4f79@ai4dc0@undefined-violation?) (syntax-violation? . ai4f6f@ai4da7@syntax-violation?) (syntax-violation-subform . ai4f71@ai4dab@syntax-violation-subform) (syntax-violation-form . ai4f70@ai4da9@syntax-violation-form) (syntax-violation . ai4c2d@ai31d3@syntax-violation) (serious-condition? . ai4f21@ai4cd6@serious-condition?) (non-continuable-violation? . ai4f55@ai4d60@non-continuable-violation?) (message-condition? . ai4f10@ai4caa@message-condition?) (make-who-condition . ai4f4a@ai4d45@make-who-condition) (make-warning . ai4f18@ai4cbf@make-warning) (make-violation . ai4f30@ai4cfe@make-violation) (make-undefined-violation . ai4f78@ai4dbe@make-undefined-violation) (make-syntax-violation . ai4f6c@ai4da1@make-syntax-violation) (make-serious-condition . ai4f20@ai4cd4@make-serious-condition) (make-non-continuable-violation . ai4f54@ai4d5e@make-non-continuable-violation) (make-message-condition . ai4f0e@ai4ca6@make-message-condition) (make-lexical-violation . ai4f64@ai4d88@make-lexical-violation) (make-irritants-condition . ai4f40@ai4d2a@make-irritants-condition) (make-implementation-restriction-violation . ai4f5c@ai4d73@make-implementation-restriction-violation) (make-error . ai4f28@ai4ce9@make-error) (make-assertion-violation . ai4f38@ai4d13@make-assertion-violation) (lexical-violation? . ai4f65@ai4d8a@lexical-violation?) (irritants-condition? . ai4f42@ai4d2e@irritants-condition?) (implementation-restriction-violation? . ai4f5d@ai4d75@implementation-restriction-violation?) (error? . ai4f29@ai4ceb@error?) (condition-who . ai4f4d@ai4d4b@condition-who) (condition-message . ai4f11@ai4cac@condition-message) (condition-irritants . ai4f43@ai4d30@condition-irritants) (assertion-violation? . ai4f39@ai4d15@assertion-violation?) (no-nans-violation? . ai4ff1@ai4efe@no-nans-violation?) (no-infinities-violation? . ai4fe9@ai4ee9@no-infinities-violation?) (make-no-nans-violation . ai4ff0@ai4efc@make-no-nans-violation) (make-no-infinities-violation . ai4fe8@ai4ee7@make-no-infinities-violation) (assertion-error . ai4c2a@ai31cd@assertion-error))))) (if ai54be@t (cdr ai54be@t) '#f)))) (ai2cff@ai2b3b@install-library 'ai5499 '(mosh interaction) '() '() '() '() '((regexp? . ai5491) (alist->eq-hash-table . ai548d) (format . ai548a) (string-split . ai547e) (call-process . ai5478) (set-current-directory! . ai5474) (expand-path . ai5473) (current-directory . ai5472) (%spawn . ai5471) (%waitpid . ai5470) (simple-struct-name . ai546f) (simple-struct-set! . ai546e) (simple-struct-ref . ai546d) (make-simple-struct . ai546c) (simple-struct? . ai546b) (pointer-ref-c-int64 . ai546a) (pointer-ref-c-int32 . ai5469) (pointer-ref-c-int16 . ai5468) (pointer-ref-c-int8 . ai5467) (pointer-ref-c-uint64 . ai5466) (pointer-ref-c-uint32 . ai5465) (pointer-ref-c-uint16 . ai5464) (pointer-ref-c-uint8 . ai5463) (pointer-set-c-uint64! . ai5462) (pointer-set-c-uint32! . ai5461) (pointer-set-c-uint16! . ai5460) (pointer-set-c-uint8! . ai545f) (pointer-set-c-int64! . ai545e) (pointer-set-c-int32! . ai545d) (pointer-set-c-int16! . ai545c) (pointer-set-c-int8! . ai545b) (pointer-set-c-pointer! . ai545a) (pointer-set-c-double! . ai5459) (pointer-set-c-float! . ai5458) (pointer-set-c-long-long! . ai5457) (pointer-set-c-long! . ai5456) (pointer-set-c-int! . ai5455) (pointer-set-c-short! . ai5454) (pointer-set-c-char! . ai5453) (pointer-ref-c-pointer . ai5452) (pointer-ref-c-double . ai5451) (pointer-ref-c-float . ai5450) (pointer-ref-c-unsigned-long-long . ai544f) (pointer-ref-c-signed-long-long . ai544e) (pointer-ref-c-unsigned-long . ai544d) (pointer-ref-c-signed-long . ai544c) (pointer-ref-c-unsigned-int . ai544b) (pointer-ref-c-signed-int . ai544a) (pointer-ref-c-unsigned-short . ai5449) (pointer-ref-c-signed-short . ai5448) (pointer-ref-c-unsigned-char . ai5447) (pointer-ref-c-signed-char . ai5446) (pointer->integer . ai5445) (integer->pointer . ai5444) (pointer? . ai5443) (shared-errno . ai5442) (%ffi-supported? . ai5438) (%ffi-pointer->string . ai5437) (%ffi-call . ai5436) (%ffi-lookup . ai5435) (%ffi-open . ai5434) (null-terminated-utf8->string . ai5433) (null-terminated-bytevector->string . ai5432) (%fork . ai5431) (%pipe . ai5430) (p . ai542f) (whereis . ai5413) (register . ai5412) (vm-join! . ai5411) (vm-set-value! . ai5410) (vm? . ai540f) (main-vm? . ai540e) (vm-eval . ai540d) (vm-self . ai540c) (vm-start! . ai540b) (make-vm . ai540a) (mutex-try-lock! . ai5409) (mutex-unlock! . ai5408) (mutex-lock! . ai5407) (mutex? . ai5406) (make-mutex . ai5405) (condition-variable-notify-all! . ai5404) (condition-variable-notify! . ai5403) (condition-variable-wait! . ai5402) (make-condition-variable . ai5401) (string-upcase . ai53e4) (string-titlecase . ai53e3) (string-normalize-nfkd . ai53e2) (string-normalize-nfkc . ai53e1) (string-normalize-nfd . ai53e0) (string-normalize-nfc . ai53df) (string-foldcase . ai53de) (string-downcase . ai53dd) (string-ci>? . ai53dc) (string-ci>=? . ai53db) (string-ci=? . ai53da) (string-ci<? . ai53d9) (string-ci<=? . ai53d8) (char-whitespace? . ai53d7) (char-upper-case? . ai53d6) (char-title-case? . ai53d5) (char-numeric? . ai53d4) (char-lower-case? . ai53d3) (char-general-category . ai53d2) (char-upcase . ai53d1) (char-titlecase . ai53d0) (char-foldcase . ai53cf) (char-downcase . ai53ce) (char-ci>? . ai53cd) (char-ci>=? . ai53cc) (char-ci=? . ai53cb) (char-ci<? . ai53ca) (char-ci<=? . ai53c9) (char-alphabetic? . ai53c8) (make-variable-transformer . ai2f1d) (identifier? . ai31d4) (generate-temporaries . ai31c0) (free-identifier=? . ai31c2) (syntax->datum . ai31d8) (datum->syntax . ai31d6) (bound-identifier=? . ai31c4) (record-type-descriptor? . ai53c7) (record-predicate . ai53c6) (record-mutator . ai53c5) (record-constructor . ai53c4) (record-accessor . ai53c3) (make-record-type-descriptor . ai53c2) (make-record-constructor-descriptor . ai53c1) (record? . ai53c0) (record-type-uid . ai53bf) (record-type-sealed? . ai53be) (record-type-parent . ai53bd) (record-type-opaque? . ai53bc) (record-type-name . ai53bb) (record-type-generative? . ai53ba) (record-type-field-names . ai53b9) (record-rtd . ai53b8) (record-field-mutable? . ai53b7) (delete-file . ai53b6) (file-exists? . ai53b5) (vector-sort! . ai53b4) (vector-sort . ai53b3) (list-sort . ai53b2) (symbol-hash . ai53b1) (string-ci-hash . ai53b0) (string-hash . ai53af) (equal-hash . ai53ae) (hashtable-equivalence-function . ai53ad) (make-hashtable . ai53ac) (hashtable-hash-function . ai53ab) (make-eqv-hashtable . ai53aa) (make-eq-hashtable . ai53a9) (hashtable? . ai53a8) (hashtable-update! . ai53a7) (hashtable-size . ai53a6) (hashtable-set! . ai53a5) (hashtable-ref . ai53a4) (hashtable-mutable? . ai53a3) (hashtable-keys . ai53a2) (hashtable-entries . ai53a1) (hashtable-delete! . ai53a0) (hashtable-copy . ai539f) (hashtable-contains? . ai539e) (hashtable-clear! . ai539d) (call-with-output-file . ai539c) (call-with-input-file . ai539b) (write-char . ai539a) (write . ai5399) (with-output-to-file . ai5398) (with-input-from-file . ai5397) (read-char . ai5396) (read . ai5395) (peek-char . ai5394) (open-output-file . ai5393) (open-input-file . ai5392) (newline . ai5391) (display . ai5390) (close-output-port . ai538f) (close-input-port . ai538e) (eof-object? . ai538d) (eof-object . ai538c) (current-error-port . ai538b) (current-output-port . ai538a) (current-input-port . ai5389) (output-port? . ai5388) (input-port? . ai5387) (utf-8-codec . ai5386) (utf-16-codec . ai5385) (transcoder-error-handling-mode . ai5384) (transcoder-eol-style . ai5383) (transcoder-codec . ai5382) (transcoded-port . ai5381) (textual-port? . ai5380) (string->bytevector . ai537f) (standard-output-port . ai537e) (standard-input-port . ai537d) (standard-error-port . ai537c) (set-port-position! . ai537b) (put-u8 . ai537a) (put-string . ai5379) (put-datum . ai5378) (put-char . ai5377) (put-bytevector . ai5376) (port? . ai5375) (port-transcoder . ai5374) (port-position . ai5373) (port-has-set-port-position!? . ai5372) (port-has-port-position? . ai5371) (port-eof? . ai5370) (output-port-buffer-mode . ai536f) (open-string-output-port . ai536e) (open-string-input-port . ai536d) (open-file-output-port . ai536c) (open-file-input/output-port . ai536b) (open-file-input-port . ai536a) (open-bytevector-output-port . ai5369) (open-bytevector-input-port . ai5368) (native-transcoder . ai5367) (native-eol-style . ai5366) (make-transcoder . ai5365) (latin-1-codec . ai5364) (make-i/o-write-error . ai4dfc) (make-i/o-read-error . ai4de7) (make-i/o-port-error . ai4e9d) (make-i/o-invalid-position-error . ai4e13) (make-i/o-filename-error . ai4e2e) (make-i/o-file-protection-error . ai4e47) (make-i/o-file-is-read-only-error . ai4e5c) (make-i/o-file-does-not-exist-error . ai4e86) (make-i/o-file-already-exists-error . ai4e71) (make-i/o-error . ai4dd2) (make-i/o-encoding-error . ai4ecd) (make-i/o-decoding-error . ai4eb6) (make-custom-textual-output-port . ai5363) (make-custom-textual-input/output-port . ai5362) (make-custom-textual-input-port . ai5361) (make-custom-binary-output-port . ai5360) (make-custom-binary-input/output-port . ai535f) (make-custom-binary-input-port . ai535e) (make-bytevector . ai535d) (lookahead-u8 . ai535c) (lookahead-char . ai535b) (i/o-write-error? . ai4dfe) (i/o-read-error? . ai4de9) (i/o-port-error? . ai4ea1) (i/o-invalid-position-error? . ai4e17) (i/o-filename-error? . ai4e32) (i/o-file-protection-error? . ai4e49) (i/o-file-is-read-only-error? . ai4e5e) (i/o-file-does-not-exist-error? . ai4e88) (i/o-file-already-exists-error? . ai4e73) (i/o-error? . ai4dd4) (i/o-error-position . ai4e19) (i/o-error-port . ai4ea3) (i/o-error-filename . ai4e34) (i/o-encoding-error? . ai4ed1) (i/o-encoding-error-char . ai4ed3) (i/o-decoding-error? . ai4eb8) (get-u8 . ai535a) (get-string-n! . ai5359) (get-string-n . ai5358) (get-string-all . ai5357) (get-line . ai5356) (get-datum . ai5355) (get-char . ai5354) (get-bytevector-some . ai5353) (get-bytevector-n! . ai5352) (get-bytevector-n . ai5351) (get-bytevector-all . ai5350) (flush-output-port . ai534f) (close-port . ai534e) (exit . ai5346) (command-line . ai500a) (string-fill! . ai5345) (string-set! . ai5344) (set-cdr! . ai5343) (set-car! . ai5342) (remove . ai5341) (remv . ai5340) (remp . ai533f) (remq . ai533e) (partition . ai533d) (memv . ai533c) (memq . ai533b) (memp . ai533a) (member . ai5339) (exists . ai5338) (for-all . ai5337) (fold-right . ai5336) (fold-left . ai5335) (find . ai5334) (filter . ai5333) (cons* . ai5332) (assv . ai5331) (assq . ai5330) (assp . ai532f) (assoc . ai532e) (call-with-string-output-port . ai532d) (call-with-port . ai532c) (call-with-bytevector-output-port . ai532b) (bytevector->string . ai532a) (buffer-mode? . ai5329) (binary-port? . ai5328) (with-exception-handler . ai5327) (raise-continuable . ai5326) (raise . ai5325) (eval . ai31b2) (environment . ai31aa) (make-enumeration . ai5324) (enum-set=? . ai5323) (enum-set-universe . ai5322) (enum-set-union . ai5321) (enum-set-subset? . ai5320) (enum-set-projection . ai531f) (enum-set-member? . ai531e) (enum-set-intersection . ai531d) (enum-set-indexer . ai531c) (enum-set-difference . ai531b) (enum-set-constructor . ai531a) (enum-set-complement . ai5319) (enum-set->list . ai5318) (who-condition? . ai4d48) (warning? . ai4cc0) (violation? . ai4cff) (undefined-violation? . ai4dbf) (syntax-violation? . ai4da6) (syntax-violation-subform . ai4daa) (syntax-violation-form . ai4da8) (syntax-violation . ai31d2) (simple-conditions . ai5317) (serious-condition? . ai4cd5) (non-continuable-violation? . ai4d5f) (message-condition? . ai4ca9) (make-who-condition . ai4d44) (make-warning . ai4cbe) (make-violation . ai4cfd) (make-undefined-violation . ai4dbd) (make-syntax-violation . ai4da0) (make-serious-condition . ai4cd3) (make-non-continuable-violation . ai4d5d) (make-message-condition . ai4ca5) (make-lexical-violation . ai4d87) (make-irritants-condition . ai4d29) (make-implementation-restriction-violation . ai4d72) (make-error . ai4ce8) (make-assertion-violation . ai4d12) (lexical-violation? . ai4d89) (irritants-condition? . ai4d2d) (implementation-restriction-violation? . ai4d74) (error? . ai4cea) (condition-who . ai4d4a) (condition-predicate . ai5316) (condition-message . ai4cab) (condition-irritants . ai4d2f) (condition-accessor . ai5315) (condition . ai5314) (assertion-violation? . ai4d14) (condition? . ai5313) (utf32->string . ai5312) (utf16->string . ai5311) (utf8->string . ai5310) (uint-list->bytevector . ai530f) (u8-list->bytevector . ai530e) (string->utf8 . ai530d) (string->utf32 . ai530c) (string->utf16 . ai530b) (sint-list->bytevector . ai530a) (native-endianness . ai5309) (bytevector? . ai5308) (bytevector=? . ai5307) (bytevector-uint-set! . ai5306) (bytevector-uint-ref . ai5305) (bytevector-u8-set! . ai5304) (bytevector-u8-ref . ai5303) (bytevector-u64-set! . ai5302) (bytevector-u64-ref . ai5301) (bytevector-u64-native-set! . ai5300) (bytevector-u64-native-ref . ai52ff) (bytevector-u32-set! . ai52fe) (bytevector-u32-ref . ai52fd) (bytevector-u32-native-set! . ai52fc) (bytevector-u32-native-ref . ai52fb) (bytevector-u16-set! . ai52fa) (bytevector-u16-ref . ai52f9) (bytevector-u16-native-set! . ai52f8) (bytevector-u16-native-ref . ai52f7) (bytevector-sint-set! . ai52f6) (bytevector-sint-ref . ai52f5) (bytevector-s8-set! . ai52f4) (bytevector-s8-ref . ai52f3) (bytevector-s64-set! . ai52f2) (bytevector-s64-ref . ai52f1) (bytevector-s64-native-set! . ai52f0) (bytevector-s64-native-ref . ai52ef) (bytevector-s32-set! . ai52ee) (bytevector-s32-ref . ai52ed) (bytevector-s32-native-set! . ai52ec) (bytevector-s32-native-ref . ai52eb) (bytevector-s16-set! . ai52ea) (bytevector-s16-ref . ai52e9) (bytevector-s16-native-set! . ai52e8) (bytevector-s16-native-ref . ai52e7) (bytevector-length . ai52e6) (bytevector-ieee-single-ref . ai52e5) (bytevector-ieee-single-set! . ai52e4) (bytevector-ieee-single-native-set! . ai52e3) (bytevector-ieee-single-native-ref . ai52e2) (bytevector-ieee-double-set! . ai52e1) (bytevector-ieee-double-ref . ai52e0) (bytevector-ieee-double-native-set! . ai52df) (bytevector-ieee-double-native-ref . ai52de) (bytevector-fill! . ai52dd) (bytevector-copy! . ai52dc) (bytevector-copy . ai52db) (bytevector->uint-list . ai52da) (bytevector->u8-list . ai52d9) (bytevector->sint-list . ai52d8) (no-nans-violation? . ai4efd) (no-infinities-violation? . ai4ee8) (make-no-nans-violation . ai4efb) (make-no-infinities-violation . ai4ee6) (real->flonum . ai52d7) (flzero? . ai52d6) (fltruncate . ai52d5) (fltan . ai52d4) (flsqrt . ai52d3) (flsin . ai52d2) (flround . ai52d1) (flpositive? . ai52d0) (flonum? . ai52cf) (flodd? . ai52ce) (flnumerator . ai52cd) (flnegative? . ai52cc) (flnan? . ai52cb) (flmod0 . ai52ca) (flmod . ai52c9) (flmin . ai52c8) (flmax . ai52c7) (fllog . ai52c6) (flinteger? . ai52c5) (flinfinite? . ai52c4) (flfloor . ai52c3) (flfinite? . ai52c2) (flexpt . ai52c1) (flexp . ai52c0) (fleven? . ai52bf) (fldiv0-and-mod0 . ai52be) (fldiv0 . ai52bd) (fldiv-and-mod . ai52bc) (fldiv . ai52bb) (fldenominator . ai52ba) (flcos . ai52b9) (flceiling . ai52b8) (flatan . ai52b7) (flasin . ai52b6) (flacos . ai52b5) (flabs . ai52b4) (fl>? . ai52b3) (fl>=? . ai52b2) (fl=? . ai52b1) (fl<? . ai52b0) (fl<=? . ai52af) (fl/ . ai52ae) (fl- . ai52ad) (fl+ . ai52ac) (fl* . ai52ab) (fixnum->flonum . ai52aa) (fxzero? . ai52a9) (fxxor . ai52a8) (fxrotate-bit-field . ai52a7) (fxreverse-bit-field . ai52a6) (fxpositive? . ai52a5) (fxodd? . ai52a4) (fxnot . ai52a3) (fxnegative? . ai52a2) (fxmod0 . ai52a1) (fxmod . ai52a0) (fxmin . ai529f) (fxmax . ai529e) (fxlength . ai529d) (fxior . ai529c) (fxif . ai529b) (fxfirst-bit-set . ai529a) (fxeven? . ai5299) (fxdiv0-and-mod0 . ai5298) (fxdiv0 . ai5297) (fxdiv-and-mod . ai5296) (fxdiv . ai5295) (fxcopy-bit-field . ai5294) (fxcopy-bit . ai5293) (fxbit-set? . ai5292) (fxbit-field . ai5291) (fxbit-count . ai5290) (fxarithmetic-shift-right . ai528f) (fxarithmetic-shift-left . ai528e) (fxarithmetic-shift . ai528d) (fxand . ai528c) (fx>? . ai528b) (fx>=? . ai528a) (fx=? . ai5289) (fx<? . ai5288) (fx<=? . ai5287) (fx-/carry . ai5286) (fx- . ai5285) (fx+/carry . ai5284) (fx+ . ai5283) (fx*/carry . ai5282) (fx* . ai5281) (greatest-fixnum . ai5280) (least-fixnum . ai527f) (fixnum-width . ai527e) (fixnum? . ai527d) (bitwise-rotate-bit-field . ai527c) (bitwise-reverse-bit-field . ai527b) (bitwise-length . ai527a) (bitwise-if . ai5279) (bitwise-first-bit-set . ai5278) (bitwise-copy-bit-field . ai5277) (bitwise-copy-bit . ai5276) (bitwise-bit-set? . ai5275) (bitwise-bit-field . ai5274) (bitwise-bit-count . ai5273) (bitwise-xor . ai5272) (bitwise-ior . ai5271) (bitwise-and . ai5270) (bitwise-not . ai526f) (bitwise-arithmetic-shift-right . ai526e) (bitwise-arithmetic-shift-left . ai526d) (bitwise-arithmetic-shift . ai526c) (zero? . ai526b) (vector? . ai526a) (vector-set! . ai5269) (vector-ref . ai5268) (vector-map . ai5267) (vector-length . ai5266) (vector-for-each . ai5265) (vector-fill! . ai5264) (vector->list . ai5263) (vector . ai5262) (values . ai5261) (truncate . ai5260) (tan . ai525f) (symbol? . ai525e) (symbol=? . ai525d) (symbol->string . ai525c) (substring . ai525b) (string? . ai525a) (string>? . ai5259) (string>=? . ai5258) (string=? . ai5257) (string<? . ai5256) (string<=? . ai5255) (string-ref . ai5254) (string-length . ai5253) (string-for-each . ai5252) (string-copy . ai5251) (string-append . ai5250) (string->symbol . ai524f) (string->number . ai524e) (string->list . ai524d) (string . ai524c) (sqrt . ai524b) (sin . ai524a) (round . ai5249) (reverse . ai5248) (real? . ai5247) (real-valued? . ai5246) (real-part . ai5245) (rationalize . ai5244) (rational? . ai5243) (rational-valued? . ai5242) (procedure? . ai5241) (positive? . ai5240) (pair? . ai523f) (odd? . ai523e) (numerator . ai523d) (number? . ai523c) (number->string . ai523b) (null? . ai523a) (not . ai5239) (negative? . ai5238) (nan? . ai5237) (min . ai5236) (max . ai5235) (map . ai5234) (make-vector . ai5233) (make-string . ai5232) (make-rectangular . ai5231) (make-polar . ai5230) (magnitude . ai522f) (log . ai522e) (list? . ai522d) (list-tail . ai522c) (list-ref . ai522b) (list->vector . ai522a) (list->string . ai5229) (list . ai5228) (length . ai5227) (lcm . ai5226) (integer? . ai5225) (integer-valued? . ai5224) (integer->char . ai5223) (infinite? . ai5222) (inexact? . ai5221) (inexact . ai5220) (imag-part . ai521f) (gcd . ai521e) (for-each . ai521d) (floor . ai521c) (finite? . ai521b) (expt . ai521a) (exp . ai5219) (exact? . ai5218) (exact-integer-sqrt . ai5217) (exact . ai5216) (even? . ai5215) (error . ai5214) (eqv? . ai5213) (equal? . ai5212) (eq? . ai5211) (dynamic-wind . ai5210) (div0-and-mod0 . ai520f) (mod0 . ai520e) (div0 . ai520d) (div-and-mod . ai520c) (mod . ai520b) (div . ai520a) (denominator . ai5209) (cos . ai5208) (cons . ai5207) (complex? . ai5206) (char? . ai5205) (char>? . ai5204) (char>=? . ai5203) (char=? . ai5202) (char<? . ai5201) (char<=? . ai5200) (char->integer . ai51ff) (ceiling . ai51fe) (call-with-values . ai51fd) (call/cc . ai51fc) (call-with-current-continuation . ai51fb) (cddddr . ai51fa) (cdddar . ai51f9) (cddadr . ai51f8) (cddaar . ai51f7) (cdaddr . ai51f6) (cdadar . ai51f5) (cdaadr . ai51f4) (cdaaar . ai51f3) (cadddr . ai51f2) (caddar . ai51f1) (cadadr . ai51f0) (cadaar . ai51ef) (caaddr . ai51ee) (caadar . ai51ed) (caaadr . ai51ec) (caaaar . ai51eb) (cdddr . ai51ea) (cddar . ai51e9) (cdadr . ai51e8) (cdaar . ai51e7) (caddr . ai51e6) (cadar . ai51e5) (caadr . ai51e4) (caaar . ai51e3) (cddr . ai51e2) (cdar . ai51e1) (cadr . ai51e0) (caar . ai51df) (cdr . ai51de) (car . ai51dd) (boolean? . ai51dc) (boolean=? . ai51db) (atan . ai51da) (assertion-violation . ai51d9) (asin . ai51d8) (apply . ai51d7) (append . ai51d6) (angle . ai51d5) (acos . ai51d4) (abs . ai51d3) (/ . ai51d2) (* . ai51d1) (- . ai51d0) (+ . ai51cf) (>= . ai51ce) (> . ai51cd) (= . ai51cc) (<= . ai51cb) (< . ai51ca) (library . ai51c9) (&no-nans . ai51c8) (&no-infinities . ai51c7) (&i/o-encoding . ai51c6) (&i/o-decoding . ai51c5) (&i/o-port . ai51c4) (&i/o-file-does-not-exist . ai51c3) (&i/o-file-already-exists . ai51c2) (&i/o-file-is-read-only . ai51c1) (&i/o-file-protection . ai51c0) (&i/o-filename . ai51bf) (&i/o-invalid-position . ai51be) (&i/o-write . ai51bd) (&i/o-read . ai51bc) (&i/o . ai51bb) (&undefined . ai51ba) (&syntax . ai51b9) (&lexical . ai51b8) (&implementation-restriction . ai51b7) (&non-continuable . ai51b6) (&who . ai51b5) (&irritants . ai51b4) (&assertion . ai51b3) (&violation . ai51b2) (&error . ai51b1) (&serious . ai51b0) (&warning . ai51af) (&message . ai51ae) (&condition . ai51ad) (define-condition-type . ai51ac) (define-enumeration . ai51ab) (define-record-type . ai51aa) (parent-rtd . ai51a9) (nongenerative . ai51a8) (opaque . ai51a7) (sealed . ai51a6) (protocol . ai51a5) (parent . ai51a4) (immutable . ai51a3) (mutable . ai51a2) (fields . ai51a1) (error-handling-mode . ai51a0) (file-options . ai519f) (buffer-mode . ai519e) (eol-style . ai519d) (guard . ai519c) (unsyntax-splicing . ai5199) (unsyntax . ai5198) (unquote-splicing . ai5197) (unquote . ai5196) (_ . ai5195) (else . ai5194) (=> . ai5193) (... . ai5192) (assert . ai5191) (endianness . ai5190) (time . ai518e) (do . ai518d) (cond . ai518c) (let* . ai518b) (let*-values . ai518a) (let-values . ai5189) (identifier-syntax . ai5188) (with-syntax . ai5187) (quasisyntax . ai5186) (quasiquote . ai5185) (syntax-rules . ai5184) (include . ai5183) (record-constructor-descriptor . ai5181) (record-type-descriptor . ai5180) (case . ai517f) (unless . ai517d) (when . ai517c) (or . ai517b) (and . ai517a) (if . ai5179) (let . ai5178) (letrec* . ai5177) (letrec . ai5176) (case-lambda . ai5174) (lambda . ai5173) (syntax . ai5172) (syntax-case . ai5171) (quote . ai5170) (letrec-syntax . ai516e) (let-syntax . ai516d) (set! . ai516c) (import . ai516b) (begin . ai516a) (define-syntax . ai5168) (define . ai5167)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai549a '(psyntax null-environment-5) '() '() '() '() '((make-promise . ai5347) (unquote-splicing . ai5197) (unquote . ai5196) (_ . ai5195) (else . ai5194) (=> . ai5193) (... . ai5192) (delay . ai518f) (do . ai518d) (cond . ai518c) (let* . ai518b) (quasiquote . ai5185) (syntax-rules . ai5184) (case . ai517f) (or . ai517b) (and . ai517a) (if . ai5179) (let . ai5178) (letrec . ai5176) (lambda . ai5173) (quote . ai5170) (letrec-syntax . ai516e) (let-syntax . ai516d) (set! . ai516c) (begin . ai516a) (define-syntax . ai5168) (define . ai5167)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai549b '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . ai53dc) (string-ci>=? . ai53db) (string-ci=? . ai53da) (string-ci<? . ai53d9) (string-ci<=? . ai53d8) (char-whitespace? . ai53d7) (char-upper-case? . ai53d6) (char-numeric? . ai53d4) (char-lower-case? . ai53d3) (char-upcase . ai53d1) (char-downcase . ai53ce) (char-ci>? . ai53cd) (char-ci>=? . ai53cc) (char-ci=? . ai53cb) (char-ci<? . ai53ca) (char-ci<=? . ai53c9) (char-alphabetic? . ai53c8) (call-with-output-file . ai539c) (call-with-input-file . ai539b) (write-char . ai539a) (write . ai5399) (with-output-to-file . ai5398) (with-input-from-file . ai5397) (read-char . ai5396) (read . ai5395) (peek-char . ai5394) (open-output-file . ai5393) (open-input-file . ai5392) (newline . ai5391) (display . ai5390) (close-output-port . ai538f) (close-input-port . ai538e) (eof-object . ai538c) (current-output-port . ai538a) (current-input-port . ai5389) (output-port? . ai5388) (input-port? . ai5387) (scheme-report-environment . ai31ae) (quotient . ai534d) (null-environment . ai31ac) (remainder . ai534c) (modulo . ai534b) (inexact->exact . ai534a) (force . ai5349) (exact->inexact . ai5348) (make-promise . ai5347) (string-fill! . ai5345) (string-set! . ai5344) (set-cdr! . ai5343) (set-car! . ai5342) (memv . ai533c) (memq . ai533b) (member . ai5339) (assv . ai5331) (assq . ai5330) (assoc . ai532e) (eval . ai31b2) (zero? . ai526b) (vector? . ai526a) (vector-set! . ai5269) (vector-ref . ai5268) (vector-length . ai5266) (vector-fill! . ai5264) (vector->list . ai5263) (vector . ai5262) (values . ai5261) (truncate . ai5260) (tan . ai525f) (symbol? . ai525e) (symbol->string . ai525c) (substring . ai525b) (string? . ai525a) (string>? . ai5259) (string>=? . ai5258) (string=? . ai5257) (string<? . ai5256) (string<=? . ai5255) (string-ref . ai5254) (string-length . ai5253) (string-copy . ai5251) (string-append . ai5250) (string->symbol . ai524f) (string->number . ai524e) (string->list . ai524d) (string . ai524c) (sqrt . ai524b) (sin . ai524a) (round . ai5249) (reverse . ai5248) (real? . ai5247) (real-part . ai5245) (rationalize . ai5244) (rational? . ai5243) (procedure? . ai5241) (positive? . ai5240) (pair? . ai523f) (odd? . ai523e) (numerator . ai523d) (number? . ai523c) (number->string . ai523b) (not . ai5239) (negative? . ai5238) (min . ai5236) (max . ai5235) (map . ai5234) (make-vector . ai5233) (make-string . ai5232) (make-rectangular . ai5231) (make-polar . ai5230) (magnitude . ai522f) (log . ai522e) (list? . ai522d) (list-tail . ai522c) (list-ref . ai522b) (list->vector . ai522a) (list->string . ai5229) (list . ai5228) (length . ai5227) (lcm . ai5226) (integer? . ai5225) (integer->char . ai5223) (inexact? . ai5221) (imag-part . ai521f) (gcd . ai521e) (for-each . ai521d) (floor . ai521c) (expt . ai521a) (exp . ai5219) (exact? . ai5218) (even? . ai5215) (eqv? . ai5213) (equal? . ai5212) (eq? . ai5211) (dynamic-wind . ai5210) (denominator . ai5209) (cos . ai5208) (cons . ai5207) (complex? . ai5206) (char? . ai5205) (char>? . ai5204) (char>=? . ai5203) (char=? . ai5202) (char<? . ai5201) (char<=? . ai5200) (char->integer . ai51ff) (ceiling . ai51fe) (call-with-values . ai51fd) (call-with-current-continuation . ai51fb) (cddddr . ai51fa) (cdddar . ai51f9) (cddadr . ai51f8) (cddaar . ai51f7) (cdaddr . ai51f6) (cdadar . ai51f5) (cdaadr . ai51f4) (cdaaar . ai51f3) (cadddr . ai51f2) (caddar . ai51f1) (cadadr . ai51f0) (cadaar . ai51ef) (caaddr . ai51ee) (caadar . ai51ed) (caaadr . ai51ec) (caaaar . ai51eb) (cdddr . ai51ea) (cddar . ai51e9) (cdadr . ai51e8) (cdaar . ai51e7) (caddr . ai51e6) (cadar . ai51e5) (caadr . ai51e4) (caaar . ai51e3) (cddr . ai51e2) (cdar . ai51e1) (cadr . ai51e0) (caar . ai51df) (cdr . ai51de) (car . ai51dd) (boolean? . ai51dc) (atan . ai51da) (asin . ai51d8) (apply . ai51d7) (append . ai51d6) (angle . ai51d5) (acos . ai51d4) (abs . ai51d3) (/ . ai51d2) (* . ai51d1) (- . ai51d0) (+ . ai51cf) (>= . ai51ce) (> . ai51cd) (= . ai51cc) (<= . ai51cb) (< . ai51ca) (unquote-splicing . ai5197) (unquote . ai5196) (else . ai5194) (=> . ai5193) (... . ai5192) (delay . ai518f) (do . ai518d) (cond . ai518c) (let* . ai518b) (quasiquote . ai5185) (syntax-rules . ai5184) (case . ai517f) (or . ai517b) (and . ai517a) (if . ai5179) (let . ai5178) (letrec . ai5176) (lambda . ai5173) (quote . ai5170) (letrec-syntax . ai516e) (let-syntax . ai516d) (set! . ai516c) (begin . ai516a) (define-syntax . ai5168) (define . ai5167)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai549c '(psyntax modules) '() '() '() '() '((module . ai5169)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai549d '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai549e '(rnrs) '(6) '() '() '() '((regexp? . ai5491) (string-upcase . ai53e4) (string-titlecase . ai53e3) (string-normalize-nfkd . ai53e2) (string-normalize-nfkc . ai53e1) (string-normalize-nfd . ai53e0) (string-normalize-nfc . ai53df) (string-foldcase . ai53de) (string-downcase . ai53dd) (string-ci>? . ai53dc) (string-ci>=? . ai53db) (string-ci=? . ai53da) (string-ci<? . ai53d9) (string-ci<=? . ai53d8) (char-whitespace? . ai53d7) (char-upper-case? . ai53d6) (char-title-case? . ai53d5) (char-numeric? . ai53d4) (char-lower-case? . ai53d3) (char-general-category . ai53d2) (char-upcase . ai53d1) (char-titlecase . ai53d0) (char-foldcase . ai53cf) (char-downcase . ai53ce) (char-ci>? . ai53cd) (char-ci>=? . ai53cc) (char-ci=? . ai53cb) (char-ci<? . ai53ca) (char-ci<=? . ai53c9) (char-alphabetic? . ai53c8) (make-variable-transformer . ai2f1d) (identifier? . ai31d4) (generate-temporaries . ai31c0) (free-identifier=? . ai31c2) (syntax->datum . ai31d8) (datum->syntax . ai31d6) (bound-identifier=? . ai31c4) (record-type-descriptor? . ai53c7) (record-predicate . ai53c6) (record-mutator . ai53c5) (record-constructor . ai53c4) (record-accessor . ai53c3) (make-record-type-descriptor . ai53c2) (make-record-constructor-descriptor . ai53c1) (record? . ai53c0) (record-type-uid . ai53bf) (record-type-sealed? . ai53be) (record-type-parent . ai53bd) (record-type-opaque? . ai53bc) (record-type-name . ai53bb) (record-type-generative? . ai53ba) (record-type-field-names . ai53b9) (record-rtd . ai53b8) (record-field-mutable? . ai53b7) (delete-file . ai53b6) (file-exists? . ai53b5) (vector-sort! . ai53b4) (vector-sort . ai53b3) (list-sort . ai53b2) (symbol-hash . ai53b1) (string-ci-hash . ai53b0) (string-hash . ai53af) (equal-hash . ai53ae) (hashtable-equivalence-function . ai53ad) (make-hashtable . ai53ac) (hashtable-hash-function . ai53ab) (make-eqv-hashtable . ai53aa) (make-eq-hashtable . ai53a9) (hashtable? . ai53a8) (hashtable-update! . ai53a7) (hashtable-size . ai53a6) (hashtable-set! . ai53a5) (hashtable-ref . ai53a4) (hashtable-mutable? . ai53a3) (hashtable-keys . ai53a2) (hashtable-entries . ai53a1) (hashtable-delete! . ai53a0) (hashtable-copy . ai539f) (hashtable-contains? . ai539e) (hashtable-clear! . ai539d) (call-with-output-file . ai539c) (call-with-input-file . ai539b) (write-char . ai539a) (write . ai5399) (with-output-to-file . ai5398) (with-input-from-file . ai5397) (read-char . ai5396) (read . ai5395) (peek-char . ai5394) (open-output-file . ai5393) (open-input-file . ai5392) (newline . ai5391) (display . ai5390) (close-output-port . ai538f) (close-input-port . ai538e) (eof-object? . ai538d) (eof-object . ai538c) (current-error-port . ai538b) (current-output-port . ai538a) (current-input-port . ai5389) (output-port? . ai5388) (input-port? . ai5387) (utf-8-codec . ai5386) (utf-16-codec . ai5385) (transcoder-error-handling-mode . ai5384) (transcoder-eol-style . ai5383) (transcoder-codec . ai5382) (transcoded-port . ai5381) (textual-port? . ai5380) (string->bytevector . ai537f) (standard-output-port . ai537e) (standard-input-port . ai537d) (standard-error-port . ai537c) (set-port-position! . ai537b) (put-u8 . ai537a) (put-string . ai5379) (put-datum . ai5378) (put-char . ai5377) (put-bytevector . ai5376) (port? . ai5375) (port-transcoder . ai5374) (port-position . ai5373) (port-has-set-port-position!? . ai5372) (port-has-port-position? . ai5371) (port-eof? . ai5370) (output-port-buffer-mode . ai536f) (open-string-output-port . ai536e) (open-string-input-port . ai536d) (open-file-output-port . ai536c) (open-file-input/output-port . ai536b) (open-file-input-port . ai536a) (open-bytevector-output-port . ai5369) (open-bytevector-input-port . ai5368) (native-transcoder . ai5367) (native-eol-style . ai5366) (make-transcoder . ai5365) (latin-1-codec . ai5364) (make-i/o-write-error . ai4dfc) (make-i/o-read-error . ai4de7) (make-i/o-port-error . ai4e9d) (make-i/o-invalid-position-error . ai4e13) (make-i/o-filename-error . ai4e2e) (make-i/o-file-protection-error . ai4e47) (make-i/o-file-is-read-only-error . ai4e5c) (make-i/o-file-does-not-exist-error . ai4e86) (make-i/o-file-already-exists-error . ai4e71) (make-i/o-error . ai4dd2) (make-i/o-encoding-error . ai4ecd) (make-i/o-decoding-error . ai4eb6) (make-custom-textual-output-port . ai5363) (make-custom-textual-input/output-port . ai5362) (make-custom-textual-input-port . ai5361) (make-custom-binary-output-port . ai5360) (make-custom-binary-input/output-port . ai535f) (make-custom-binary-input-port . ai535e) (make-bytevector . ai535d) (lookahead-u8 . ai535c) (lookahead-char . ai535b) (i/o-write-error? . ai4dfe) (i/o-read-error? . ai4de9) (i/o-port-error? . ai4ea1) (i/o-invalid-position-error? . ai4e17) (i/o-filename-error? . ai4e32) (i/o-file-protection-error? . ai4e49) (i/o-file-is-read-only-error? . ai4e5e) (i/o-file-does-not-exist-error? . ai4e88) (i/o-file-already-exists-error? . ai4e73) (i/o-error? . ai4dd4) (i/o-error-position . ai4e19) (i/o-error-port . ai4ea3) (i/o-error-filename . ai4e34) (i/o-encoding-error? . ai4ed1) (i/o-encoding-error-char . ai4ed3) (i/o-decoding-error? . ai4eb8) (get-u8 . ai535a) (get-string-n! . ai5359) (get-string-n . ai5358) (get-string-all . ai5357) (get-line . ai5356) (get-datum . ai5355) (get-char . ai5354) (get-bytevector-some . ai5353) (get-bytevector-n! . ai5352) (get-bytevector-n . ai5351) (get-bytevector-all . ai5350) (flush-output-port . ai534f) (close-port . ai534e) (exit . ai5346) (command-line . ai500a) (remove . ai5341) (remv . ai5340) (remp . ai533f) (remq . ai533e) (partition . ai533d) (memv . ai533c) (memq . ai533b) (memp . ai533a) (member . ai5339) (exists . ai5338) (for-all . ai5337) (fold-right . ai5336) (fold-left . ai5335) (find . ai5334) (filter . ai5333) (cons* . ai5332) (assv . ai5331) (assq . ai5330) (assp . ai532f) (assoc . ai532e) (call-with-string-output-port . ai532d) (call-with-port . ai532c) (call-with-bytevector-output-port . ai532b) (bytevector->string . ai532a) (buffer-mode? . ai5329) (binary-port? . ai5328) (with-exception-handler . ai5327) (raise-continuable . ai5326) (raise . ai5325) (make-enumeration . ai5324) (enum-set=? . ai5323) (enum-set-universe . ai5322) (enum-set-union . ai5321) (enum-set-subset? . ai5320) (enum-set-projection . ai531f) (enum-set-member? . ai531e) (enum-set-intersection . ai531d) (enum-set-indexer . ai531c) (enum-set-difference . ai531b) (enum-set-constructor . ai531a) (enum-set-complement . ai5319) (enum-set->list . ai5318) (who-condition? . ai4d48) (warning? . ai4cc0) (violation? . ai4cff) (undefined-violation? . ai4dbf) (syntax-violation? . ai4da6) (syntax-violation-subform . ai4daa) (syntax-violation-form . ai4da8) (syntax-violation . ai31d2) (simple-conditions . ai5317) (serious-condition? . ai4cd5) (non-continuable-violation? . ai4d5f) (message-condition? . ai4ca9) (make-who-condition . ai4d44) (make-warning . ai4cbe) (make-violation . ai4cfd) (make-undefined-violation . ai4dbd) (make-syntax-violation . ai4da0) (make-serious-condition . ai4cd3) (make-non-continuable-violation . ai4d5d) (make-message-condition . ai4ca5) (make-lexical-violation . ai4d87) (make-irritants-condition . ai4d29) (make-implementation-restriction-violation . ai4d72) (make-error . ai4ce8) (make-assertion-violation . ai4d12) (lexical-violation? . ai4d89) (irritants-condition? . ai4d2d) (implementation-restriction-violation? . ai4d74) (error? . ai4cea) (condition-who . ai4d4a) (condition-predicate . ai5316) (condition-message . ai4cab) (condition-irritants . ai4d2f) (condition-accessor . ai5315) (condition . ai5314) (assertion-violation? . ai4d14) (condition? . ai5313) (utf32->string . ai5312) (utf16->string . ai5311) (utf8->string . ai5310) (uint-list->bytevector . ai530f) (u8-list->bytevector . ai530e) (string->utf8 . ai530d) (string->utf32 . ai530c) (string->utf16 . ai530b) (sint-list->bytevector . ai530a) (native-endianness . ai5309) (bytevector? . ai5308) (bytevector=? . ai5307) (bytevector-uint-set! . ai5306) (bytevector-uint-ref . ai5305) (bytevector-u8-set! . ai5304) (bytevector-u8-ref . ai5303) (bytevector-u64-set! . ai5302) (bytevector-u64-ref . ai5301) (bytevector-u64-native-set! . ai5300) (bytevector-u64-native-ref . ai52ff) (bytevector-u32-set! . ai52fe) (bytevector-u32-ref . ai52fd) (bytevector-u32-native-set! . ai52fc) (bytevector-u32-native-ref . ai52fb) (bytevector-u16-set! . ai52fa) (bytevector-u16-ref . ai52f9) (bytevector-u16-native-set! . ai52f8) (bytevector-u16-native-ref . ai52f7) (bytevector-sint-set! . ai52f6) (bytevector-sint-ref . ai52f5) (bytevector-s8-set! . ai52f4) (bytevector-s8-ref . ai52f3) (bytevector-s64-set! . ai52f2) (bytevector-s64-ref . ai52f1) (bytevector-s64-native-set! . ai52f0) (bytevector-s64-native-ref . ai52ef) (bytevector-s32-set! . ai52ee) (bytevector-s32-ref . ai52ed) (bytevector-s32-native-set! . ai52ec) (bytevector-s32-native-ref . ai52eb) (bytevector-s16-set! . ai52ea) (bytevector-s16-ref . ai52e9) (bytevector-s16-native-set! . ai52e8) (bytevector-s16-native-ref . ai52e7) (bytevector-length . ai52e6) (bytevector-ieee-single-ref . ai52e5) (bytevector-ieee-single-set! . ai52e4) (bytevector-ieee-single-native-set! . ai52e3) (bytevector-ieee-single-native-ref . ai52e2) (bytevector-ieee-double-set! . ai52e1) (bytevector-ieee-double-ref . ai52e0) (bytevector-ieee-double-native-set! . ai52df) (bytevector-ieee-double-native-ref . ai52de) (bytevector-fill! . ai52dd) (bytevector-copy! . ai52dc) (bytevector-copy . ai52db) (bytevector->uint-list . ai52da) (bytevector->u8-list . ai52d9) (bytevector->sint-list . ai52d8) (no-nans-violation? . ai4efd) (no-infinities-violation? . ai4ee8) (make-no-nans-violation . ai4efb) (make-no-infinities-violation . ai4ee6) (real->flonum . ai52d7) (flzero? . ai52d6) (fltruncate . ai52d5) (fltan . ai52d4) (flsqrt . ai52d3) (flsin . ai52d2) (flround . ai52d1) (flpositive? . ai52d0) (flonum? . ai52cf) (flodd? . ai52ce) (flnumerator . ai52cd) (flnegative? . ai52cc) (flnan? . ai52cb) (flmod0 . ai52ca) (flmod . ai52c9) (flmin . ai52c8) (flmax . ai52c7) (fllog . ai52c6) (flinteger? . ai52c5) (flinfinite? . ai52c4) (flfloor . ai52c3) (flfinite? . ai52c2) (flexpt . ai52c1) (flexp . ai52c0) (fleven? . ai52bf) (fldiv0-and-mod0 . ai52be) (fldiv0 . ai52bd) (fldiv-and-mod . ai52bc) (fldiv . ai52bb) (fldenominator . ai52ba) (flcos . ai52b9) (flceiling . ai52b8) (flatan . ai52b7) (flasin . ai52b6) (flacos . ai52b5) (flabs . ai52b4) (fl>? . ai52b3) (fl>=? . ai52b2) (fl=? . ai52b1) (fl<? . ai52b0) (fl<=? . ai52af) (fl/ . ai52ae) (fl- . ai52ad) (fl+ . ai52ac) (fl* . ai52ab) (fixnum->flonum . ai52aa) (fxzero? . ai52a9) (fxxor . ai52a8) (fxrotate-bit-field . ai52a7) (fxreverse-bit-field . ai52a6) (fxpositive? . ai52a5) (fxodd? . ai52a4) (fxnot . ai52a3) (fxnegative? . ai52a2) (fxmod0 . ai52a1) (fxmod . ai52a0) (fxmin . ai529f) (fxmax . ai529e) (fxlength . ai529d) (fxior . ai529c) (fxif . ai529b) (fxfirst-bit-set . ai529a) (fxeven? . ai5299) (fxdiv0-and-mod0 . ai5298) (fxdiv0 . ai5297) (fxdiv-and-mod . ai5296) (fxdiv . ai5295) (fxcopy-bit-field . ai5294) (fxcopy-bit . ai5293) (fxbit-set? . ai5292) (fxbit-field . ai5291) (fxbit-count . ai5290) (fxarithmetic-shift-right . ai528f) (fxarithmetic-shift-left . ai528e) (fxarithmetic-shift . ai528d) (fxand . ai528c) (fx>? . ai528b) (fx>=? . ai528a) (fx=? . ai5289) (fx<? . ai5288) (fx<=? . ai5287) (fx-/carry . ai5286) (fx- . ai5285) (fx+/carry . ai5284) (fx+ . ai5283) (fx*/carry . ai5282) (fx* . ai5281) (greatest-fixnum . ai5280) (least-fixnum . ai527f) (fixnum-width . ai527e) (fixnum? . ai527d) (bitwise-rotate-bit-field . ai527c) (bitwise-reverse-bit-field . ai527b) (bitwise-length . ai527a) (bitwise-if . ai5279) (bitwise-first-bit-set . ai5278) (bitwise-copy-bit-field . ai5277) (bitwise-copy-bit . ai5276) (bitwise-bit-set? . ai5275) (bitwise-bit-field . ai5274) (bitwise-bit-count . ai5273) (bitwise-xor . ai5272) (bitwise-ior . ai5271) (bitwise-and . ai5270) (bitwise-not . ai526f) (bitwise-arithmetic-shift-right . ai526e) (bitwise-arithmetic-shift-left . ai526d) (bitwise-arithmetic-shift . ai526c) (zero? . ai526b) (vector? . ai526a) (vector-set! . ai5269) (vector-ref . ai5268) (vector-map . ai5267) (vector-length . ai5266) (vector-for-each . ai5265) (vector-fill! . ai5264) (vector->list . ai5263) (vector . ai5262) (values . ai5261) (truncate . ai5260) (tan . ai525f) (symbol? . ai525e) (symbol=? . ai525d) (symbol->string . ai525c) (substring . ai525b) (string? . ai525a) (string>? . ai5259) (string>=? . ai5258) (string=? . ai5257) (string<? . ai5256) (string<=? . ai5255) (string-ref . ai5254) (string-length . ai5253) (string-for-each . ai5252) (string-copy . ai5251) (string-append . ai5250) (string->symbol . ai524f) (string->number . ai524e) (string->list . ai524d) (string . ai524c) (sqrt . ai524b) (sin . ai524a) (round . ai5249) (reverse . ai5248) (real? . ai5247) (real-valued? . ai5246) (real-part . ai5245) (rationalize . ai5244) (rational? . ai5243) (rational-valued? . ai5242) (procedure? . ai5241) (positive? . ai5240) (pair? . ai523f) (odd? . ai523e) (numerator . ai523d) (number? . ai523c) (number->string . ai523b) (null? . ai523a) (not . ai5239) (negative? . ai5238) (nan? . ai5237) (min . ai5236) (max . ai5235) (map . ai5234) (make-vector . ai5233) (make-string . ai5232) (make-rectangular . ai5231) (make-polar . ai5230) (magnitude . ai522f) (log . ai522e) (list? . ai522d) (list-tail . ai522c) (list-ref . ai522b) (list->vector . ai522a) (list->string . ai5229) (list . ai5228) (length . ai5227) (lcm . ai5226) (integer? . ai5225) (integer-valued? . ai5224) (integer->char . ai5223) (infinite? . ai5222) (inexact? . ai5221) (inexact . ai5220) (imag-part . ai521f) (gcd . ai521e) (for-each . ai521d) (floor . ai521c) (finite? . ai521b) (expt . ai521a) (exp . ai5219) (exact? . ai5218) (exact-integer-sqrt . ai5217) (exact . ai5216) (even? . ai5215) (error . ai5214) (eqv? . ai5213) (equal? . ai5212) (eq? . ai5211) (dynamic-wind . ai5210) (div0-and-mod0 . ai520f) (mod0 . ai520e) (div0 . ai520d) (div-and-mod . ai520c) (mod . ai520b) (div . ai520a) (denominator . ai5209) (cos . ai5208) (cons . ai5207) (complex? . ai5206) (char? . ai5205) (char>? . ai5204) (char>=? . ai5203) (char=? . ai5202) (char<? . ai5201) (char<=? . ai5200) (char->integer . ai51ff) (ceiling . ai51fe) (call-with-values . ai51fd) (call/cc . ai51fc) (call-with-current-continuation . ai51fb) (cddddr . ai51fa) (cdddar . ai51f9) (cddadr . ai51f8) (cddaar . ai51f7) (cdaddr . ai51f6) (cdadar . ai51f5) (cdaadr . ai51f4) (cdaaar . ai51f3) (cadddr . ai51f2) (caddar . ai51f1) (cadadr . ai51f0) (cadaar . ai51ef) (caaddr . ai51ee) (caadar . ai51ed) (caaadr . ai51ec) (caaaar . ai51eb) (cdddr . ai51ea) (cddar . ai51e9) (cdadr . ai51e8) (cdaar . ai51e7) (caddr . ai51e6) (cadar . ai51e5) (caadr . ai51e4) (caaar . ai51e3) (cddr . ai51e2) (cdar . ai51e1) (cadr . ai51e0) (caar . ai51df) (cdr . ai51de) (car . ai51dd) (boolean? . ai51dc) (boolean=? . ai51db) (atan . ai51da) (assertion-violation . ai51d9) (asin . ai51d8) (apply . ai51d7) (append . ai51d6) (angle . ai51d5) (acos . ai51d4) (abs . ai51d3) (/ . ai51d2) (* . ai51d1) (- . ai51d0) (+ . ai51cf) (>= . ai51ce) (> . ai51cd) (= . ai51cc) (<= . ai51cb) (< . ai51ca) (&no-nans . ai51c8) (&no-infinities . ai51c7) (&i/o-encoding . ai51c6) (&i/o-decoding . ai51c5) (&i/o-port . ai51c4) (&i/o-file-does-not-exist . ai51c3) (&i/o-file-already-exists . ai51c2) (&i/o-file-is-read-only . ai51c1) (&i/o-file-protection . ai51c0) (&i/o-filename . ai51bf) (&i/o-invalid-position . ai51be) (&i/o-write . ai51bd) (&i/o-read . ai51bc) (&i/o . ai51bb) (&undefined . ai51ba) (&syntax . ai51b9) (&lexical . ai51b8) (&implementation-restriction . ai51b7) (&non-continuable . ai51b6) (&who . ai51b5) (&irritants . ai51b4) (&assertion . ai51b3) (&violation . ai51b2) (&error . ai51b1) (&serious . ai51b0) (&warning . ai51af) (&message . ai51ae) (&condition . ai51ad) (define-condition-type . ai51ac) (define-enumeration . ai51ab) (define-record-type . ai51aa) (parent-rtd . ai51a9) (nongenerative . ai51a8) (opaque . ai51a7) (sealed . ai51a6) (protocol . ai51a5) (parent . ai51a4) (immutable . ai51a3) (mutable . ai51a2) (fields . ai51a1) (error-handling-mode . ai51a0) (file-options . ai519f) (buffer-mode . ai519e) (eol-style . ai519d) (guard . ai519c) (unsyntax-splicing . ai5199) (unsyntax . ai5198) (unquote-splicing . ai5197) (unquote . ai5196) (_ . ai5195) (else . ai5194) (=> . ai5193) (... . ai5192) (assert . ai5191) (endianness . ai5190) (do . ai518d) (cond . ai518c) (let* . ai518b) (let*-values . ai518a) (let-values . ai5189) (identifier-syntax . ai5188) (with-syntax . ai5187) (quasisyntax . ai5186) (quasiquote . ai5185) (syntax-rules . ai5184) (record-constructor-descriptor . ai5181) (record-type-descriptor . ai5180) (case . ai517f) (unless . ai517d) (when . ai517c) (or . ai517b) (and . ai517a) (if . ai5179) (let . ai5178) (letrec* . ai5177) (letrec . ai5176) (case-lambda . ai5174) (lambda . ai5173) (syntax . ai5172) (syntax-case . ai5171) (quote . ai5170) (letrec-syntax . ai516e) (let-syntax . ai516d) (set! . ai516c) (begin . ai516a) (define-syntax . ai5168) (define . ai5167)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai549f '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . ai31ae) (quotient . ai534d) (null-environment . ai31ac) (remainder . ai534c) (modulo . ai534b) (inexact->exact . ai534a) (force . ai5349) (exact->inexact . ai5348) (make-promise . ai5347) (delay . ai518f)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54a0 '(rnrs control) '(6) '() '() '() '((do . ai518d) (unless . ai517d) (when . ai517c) (case-lambda . ai5174)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54a1 '(rnrs eval) '(6) '() '() '() '((eval . ai31b2) (environment . ai31aa)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54a2 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . ai5343) (set-car! . ai5342)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54a3 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . ai5345) (string-set! . ai5344)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54a4 '(rnrs programs) '(6) '() '() '() '((exit . ai5346) (command-line . ai500a)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54a5 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . ai2f1d) (identifier? . ai31d4) (generate-temporaries . ai31c0) (free-identifier=? . ai31c2) (syntax->datum . ai31d8) (datum->syntax . ai31d6) (bound-identifier=? . ai31c4) (syntax-violation . ai31d2) (unsyntax-splicing . ai5199) (unsyntax . ai5198) (_ . ai5195) (... . ai5192) (with-syntax . ai5187) (quasisyntax . ai5186) (syntax . ai5172) (syntax-case . ai5171)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54a6 '(rnrs files) '(6) '() '() '() '((delete-file . ai53b6) (file-exists? . ai53b5) (make-i/o-write-error . ai4dfc) (make-i/o-read-error . ai4de7) (make-i/o-port-error . ai4e9d) (make-i/o-invalid-position-error . ai4e13) (make-i/o-filename-error . ai4e2e) (make-i/o-file-protection-error . ai4e47) (make-i/o-file-is-read-only-error . ai4e5c) (make-i/o-file-does-not-exist-error . ai4e86) (make-i/o-file-already-exists-error . ai4e71) (make-i/o-error . ai4dd2) (i/o-write-error? . ai4dfe) (i/o-read-error? . ai4de9) (i/o-port-error? . ai4ea1) (i/o-invalid-position-error? . ai4e17) (i/o-filename-error? . ai4e32) (i/o-file-protection-error? . ai4e49) (i/o-file-is-read-only-error? . ai4e5e) (i/o-file-does-not-exist-error? . ai4e88) (i/o-file-already-exists-error? . ai4e73) (i/o-error? . ai4dd4) (i/o-error-position . ai4e19) (i/o-error-port . ai4ea3) (i/o-error-filename . ai4e34) (&i/o-port . ai51c4) (&i/o-file-does-not-exist . ai51c3) (&i/o-file-already-exists . ai51c2) (&i/o-file-is-read-only . ai51c1) (&i/o-file-protection . ai51c0) (&i/o-filename . ai51bf) (&i/o-invalid-position . ai51be) (&i/o-write . ai51bd) (&i/o-read . ai51bc) (&i/o . ai51bb)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54a7 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . ai53b4) (vector-sort . ai53b3) (list-sort . ai53b2)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54a8 '(rnrs base) '(6) '() '() '() '((zero? . ai526b) (vector? . ai526a) (vector-set! . ai5269) (vector-ref . ai5268) (vector-map . ai5267) (vector-length . ai5266) (vector-for-each . ai5265) (vector-fill! . ai5264) (vector->list . ai5263) (vector . ai5262) (values . ai5261) (truncate . ai5260) (tan . ai525f) (symbol? . ai525e) (symbol=? . ai525d) (symbol->string . ai525c) (substring . ai525b) (string? . ai525a) (string>? . ai5259) (string>=? . ai5258) (string=? . ai5257) (string<? . ai5256) (string<=? . ai5255) (string-ref . ai5254) (string-length . ai5253) (string-for-each . ai5252) (string-copy . ai5251) (string-append . ai5250) (string->symbol . ai524f) (string->number . ai524e) (string->list . ai524d) (string . ai524c) (sqrt . ai524b) (sin . ai524a) (round . ai5249) (reverse . ai5248) (real? . ai5247) (real-valued? . ai5246) (real-part . ai5245) (rationalize . ai5244) (rational? . ai5243) (rational-valued? . ai5242) (procedure? . ai5241) (positive? . ai5240) (pair? . ai523f) (odd? . ai523e) (numerator . ai523d) (number? . ai523c) (number->string . ai523b) (null? . ai523a) (not . ai5239) (negative? . ai5238) (nan? . ai5237) (min . ai5236) (max . ai5235) (map . ai5234) (make-vector . ai5233) (make-string . ai5232) (make-rectangular . ai5231) (make-polar . ai5230) (magnitude . ai522f) (log . ai522e) (list? . ai522d) (list-tail . ai522c) (list-ref . ai522b) (list->vector . ai522a) (list->string . ai5229) (list . ai5228) (length . ai5227) (lcm . ai5226) (integer? . ai5225) (integer-valued? . ai5224) (integer->char . ai5223) (infinite? . ai5222) (inexact? . ai5221) (inexact . ai5220) (imag-part . ai521f) (gcd . ai521e) (for-each . ai521d) (floor . ai521c) (finite? . ai521b) (expt . ai521a) (exp . ai5219) (exact? . ai5218) (exact-integer-sqrt . ai5217) (exact . ai5216) (even? . ai5215) (error . ai5214) (eqv? . ai5213) (equal? . ai5212) (eq? . ai5211) (dynamic-wind . ai5210) (div0-and-mod0 . ai520f) (mod0 . ai520e) (div0 . ai520d) (div-and-mod . ai520c) (mod . ai520b) (div . ai520a) (denominator . ai5209) (cos . ai5208) (cons . ai5207) (complex? . ai5206) (char? . ai5205) (char>? . ai5204) (char>=? . ai5203) (char=? . ai5202) (char<? . ai5201) (char<=? . ai5200) (char->integer . ai51ff) (ceiling . ai51fe) (call-with-values . ai51fd) (call/cc . ai51fc) (call-with-current-continuation . ai51fb) (cddddr . ai51fa) (cdddar . ai51f9) (cddadr . ai51f8) (cddaar . ai51f7) (cdaddr . ai51f6) (cdadar . ai51f5) (cdaadr . ai51f4) (cdaaar . ai51f3) (cadddr . ai51f2) (caddar . ai51f1) (cadadr . ai51f0) (cadaar . ai51ef) (caaddr . ai51ee) (caadar . ai51ed) (caaadr . ai51ec) (caaaar . ai51eb) (cdddr . ai51ea) (cddar . ai51e9) (cdadr . ai51e8) (cdaar . ai51e7) (caddr . ai51e6) (cadar . ai51e5) (caadr . ai51e4) (caaar . ai51e3) (cddr . ai51e2) (cdar . ai51e1) (cadr . ai51e0) (caar . ai51df) (cdr . ai51de) (car . ai51dd) (boolean? . ai51dc) (boolean=? . ai51db) (atan . ai51da) (assertion-violation . ai51d9) (asin . ai51d8) (apply . ai51d7) (append . ai51d6) (angle . ai51d5) (acos . ai51d4) (abs . ai51d3) (/ . ai51d2) (* . ai51d1) (- . ai51d0) (+ . ai51cf) (>= . ai51ce) (> . ai51cd) (= . ai51cc) (<= . ai51cb) (< . ai51ca) (unquote-splicing . ai5197) (unquote . ai5196) (_ . ai5195) (else . ai5194) (=> . ai5193) (... . ai5192) (assert . ai5191) (cond . ai518c) (let* . ai518b) (let*-values . ai518a) (let-values . ai5189) (identifier-syntax . ai5188) (quasiquote . ai5185) (syntax-rules . ai5184) (case . ai517f) (or . ai517b) (and . ai517a) (if . ai5179) (let . ai5178) (letrec* . ai5177) (letrec . ai5176) (lambda . ai5173) (quote . ai5170) (letrec-syntax . ai516e) (let-syntax . ai516d) (set! . ai516c) (begin . ai516a) (define-syntax . ai5168) (define . ai5167)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54a9 '(rnrs lists) '(6) '() '() '() '((remove . ai5341) (remv . ai5340) (remp . ai533f) (remq . ai533e) (partition . ai533d) (memv . ai533c) (memq . ai533b) (memp . ai533a) (member . ai5339) (exists . ai5338) (for-all . ai5337) (fold-right . ai5336) (fold-left . ai5335) (find . ai5334) (filter . ai5333) (cons* . ai5332) (assv . ai5331) (assq . ai5330) (assp . ai532f) (assoc . ai532e)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54aa '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . ai539c) (call-with-input-file . ai539b) (write-char . ai539a) (write . ai5399) (with-output-to-file . ai5398) (with-input-from-file . ai5397) (read-char . ai5396) (read . ai5395) (peek-char . ai5394) (open-output-file . ai5393) (open-input-file . ai5392) (newline . ai5391) (display . ai5390) (close-output-port . ai538f) (close-input-port . ai538e) (eof-object? . ai538d) (eof-object . ai538c) (current-error-port . ai538b) (current-output-port . ai538a) (current-input-port . ai5389) (output-port? . ai5388) (input-port? . ai5387) (make-i/o-write-error . ai4dfc) (make-i/o-read-error . ai4de7) (make-i/o-port-error . ai4e9d) (make-i/o-invalid-position-error . ai4e13) (make-i/o-filename-error . ai4e2e) (make-i/o-file-protection-error . ai4e47) (make-i/o-file-is-read-only-error . ai4e5c) (make-i/o-file-does-not-exist-error . ai4e86) (make-i/o-file-already-exists-error . ai4e71) (make-i/o-error . ai4dd2) (i/o-write-error? . ai4dfe) (i/o-read-error? . ai4de9) (i/o-port-error? . ai4ea1) (i/o-invalid-position-error? . ai4e17) (i/o-filename-error? . ai4e32) (i/o-file-protection-error? . ai4e49) (i/o-file-is-read-only-error? . ai4e5e) (i/o-file-does-not-exist-error? . ai4e88) (i/o-file-already-exists-error? . ai4e73) (i/o-error? . ai4dd4) (i/o-error-position . ai4e19) (i/o-error-port . ai4ea3) (i/o-error-filename . ai4e34) (&i/o-port . ai51c4) (&i/o-file-does-not-exist . ai51c3) (&i/o-file-already-exists . ai51c2) (&i/o-file-is-read-only . ai51c1) (&i/o-file-protection . ai51c0) (&i/o-filename . ai51bf) (&i/o-invalid-position . ai51be) (&i/o-write . ai51bd) (&i/o-read . ai51bc) (&i/o . ai51bb)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54ab '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . ai535d) (utf32->string . ai5312) (utf16->string . ai5311) (utf8->string . ai5310) (uint-list->bytevector . ai530f) (u8-list->bytevector . ai530e) (string->utf8 . ai530d) (string->utf32 . ai530c) (string->utf16 . ai530b) (sint-list->bytevector . ai530a) (native-endianness . ai5309) (bytevector? . ai5308) (bytevector=? . ai5307) (bytevector-uint-set! . ai5306) (bytevector-uint-ref . ai5305) (bytevector-u8-set! . ai5304) (bytevector-u8-ref . ai5303) (bytevector-u64-set! . ai5302) (bytevector-u64-ref . ai5301) (bytevector-u64-native-set! . ai5300) (bytevector-u64-native-ref . ai52ff) (bytevector-u32-set! . ai52fe) (bytevector-u32-ref . ai52fd) (bytevector-u32-native-set! . ai52fc) (bytevector-u32-native-ref . ai52fb) (bytevector-u16-set! . ai52fa) (bytevector-u16-ref . ai52f9) (bytevector-u16-native-set! . ai52f8) (bytevector-u16-native-ref . ai52f7) (bytevector-sint-set! . ai52f6) (bytevector-sint-ref . ai52f5) (bytevector-s8-set! . ai52f4) (bytevector-s8-ref . ai52f3) (bytevector-s64-set! . ai52f2) (bytevector-s64-ref . ai52f1) (bytevector-s64-native-set! . ai52f0) (bytevector-s64-native-ref . ai52ef) (bytevector-s32-set! . ai52ee) (bytevector-s32-ref . ai52ed) (bytevector-s32-native-set! . ai52ec) (bytevector-s32-native-ref . ai52eb) (bytevector-s16-set! . ai52ea) (bytevector-s16-ref . ai52e9) (bytevector-s16-native-set! . ai52e8) (bytevector-s16-native-ref . ai52e7) (bytevector-length . ai52e6) (bytevector-ieee-single-ref . ai52e5) (bytevector-ieee-single-set! . ai52e4) (bytevector-ieee-single-native-set! . ai52e3) (bytevector-ieee-single-native-ref . ai52e2) (bytevector-ieee-double-set! . ai52e1) (bytevector-ieee-double-ref . ai52e0) (bytevector-ieee-double-native-set! . ai52df) (bytevector-ieee-double-native-ref . ai52de) (bytevector-fill! . ai52dd) (bytevector-copy! . ai52dc) (bytevector-copy . ai52db) (bytevector->uint-list . ai52da) (bytevector->u8-list . ai52d9) (bytevector->sint-list . ai52d8) (endianness . ai5190)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54ac '(rnrs unicode) '(6) '() '() '() '((string-upcase . ai53e4) (string-titlecase . ai53e3) (string-normalize-nfkd . ai53e2) (string-normalize-nfkc . ai53e1) (string-normalize-nfd . ai53e0) (string-normalize-nfc . ai53df) (string-foldcase . ai53de) (string-downcase . ai53dd) (string-ci>? . ai53dc) (string-ci>=? . ai53db) (string-ci=? . ai53da) (string-ci<? . ai53d9) (string-ci<=? . ai53d8) (char-whitespace? . ai53d7) (char-upper-case? . ai53d6) (char-title-case? . ai53d5) (char-numeric? . ai53d4) (char-lower-case? . ai53d3) (char-general-category . ai53d2) (char-upcase . ai53d1) (char-titlecase . ai53d0) (char-foldcase . ai53cf) (char-downcase . ai53ce) (char-ci>? . ai53cd) (char-ci>=? . ai53cc) (char-ci=? . ai53cb) (char-ci<? . ai53ca) (char-ci<=? . ai53c9) (char-alphabetic? . ai53c8)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54ad '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . ai5327) (raise-continuable . ai5326) (raise . ai5325) (guard . ai519c) (else . ai5194) (=> . ai5193)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54ae '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . ai527c) (bitwise-reverse-bit-field . ai527b) (bitwise-length . ai527a) (bitwise-if . ai5279) (bitwise-first-bit-set . ai5278) (bitwise-copy-bit-field . ai5277) (bitwise-copy-bit . ai5276) (bitwise-bit-set? . ai5275) (bitwise-bit-field . ai5274) (bitwise-bit-count . ai5273) (bitwise-xor . ai5272) (bitwise-ior . ai5271) (bitwise-and . ai5270) (bitwise-not . ai526f) (bitwise-arithmetic-shift-right . ai526e) (bitwise-arithmetic-shift-left . ai526d) (bitwise-arithmetic-shift . ai526c)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54af '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . ai52a9) (fxxor . ai52a8) (fxrotate-bit-field . ai52a7) (fxreverse-bit-field . ai52a6) (fxpositive? . ai52a5) (fxodd? . ai52a4) (fxnot . ai52a3) (fxnegative? . ai52a2) (fxmod0 . ai52a1) (fxmod . ai52a0) (fxmin . ai529f) (fxmax . ai529e) (fxlength . ai529d) (fxior . ai529c) (fxif . ai529b) (fxfirst-bit-set . ai529a) (fxeven? . ai5299) (fxdiv0-and-mod0 . ai5298) (fxdiv0 . ai5297) (fxdiv-and-mod . ai5296) (fxdiv . ai5295) (fxcopy-bit-field . ai5294) (fxcopy-bit . ai5293) (fxbit-set? . ai5292) (fxbit-field . ai5291) (fxbit-count . ai5290) (fxarithmetic-shift-right . ai528f) (fxarithmetic-shift-left . ai528e) (fxarithmetic-shift . ai528d) (fxand . ai528c) (fx>? . ai528b) (fx>=? . ai528a) (fx=? . ai5289) (fx<? . ai5288) (fx<=? . ai5287) (fx-/carry . ai5286) (fx- . ai5285) (fx+/carry . ai5284) (fx+ . ai5283) (fx*/carry . ai5282) (fx* . ai5281) (greatest-fixnum . ai5280) (least-fixnum . ai527f) (fixnum-width . ai527e) (fixnum? . ai527d)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54b0 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . ai4efd) (no-infinities-violation? . ai4ee8) (make-no-nans-violation . ai4efb) (make-no-infinities-violation . ai4ee6) (real->flonum . ai52d7) (flzero? . ai52d6) (fltruncate . ai52d5) (fltan . ai52d4) (flsqrt . ai52d3) (flsin . ai52d2) (flround . ai52d1) (flpositive? . ai52d0) (flonum? . ai52cf) (flodd? . ai52ce) (flnumerator . ai52cd) (flnegative? . ai52cc) (flnan? . ai52cb) (flmod0 . ai52ca) (flmod . ai52c9) (flmin . ai52c8) (flmax . ai52c7) (fllog . ai52c6) (flinteger? . ai52c5) (flinfinite? . ai52c4) (flfloor . ai52c3) (flfinite? . ai52c2) (flexpt . ai52c1) (flexp . ai52c0) (fleven? . ai52bf) (fldiv0-and-mod0 . ai52be) (fldiv0 . ai52bd) (fldiv-and-mod . ai52bc) (fldiv . ai52bb) (fldenominator . ai52ba) (flcos . ai52b9) (flceiling . ai52b8) (flatan . ai52b7) (flasin . ai52b6) (flacos . ai52b5) (flabs . ai52b4) (fl>? . ai52b3) (fl>=? . ai52b2) (fl=? . ai52b1) (fl<? . ai52b0) (fl<=? . ai52af) (fl/ . ai52ae) (fl- . ai52ad) (fl+ . ai52ac) (fl* . ai52ab) (fixnum->flonum . ai52aa) (&no-nans . ai51c8) (&no-infinities . ai51c7)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54b1 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . ai53b1) (string-ci-hash . ai53b0) (string-hash . ai53af) (equal-hash . ai53ae) (hashtable-equivalence-function . ai53ad) (make-hashtable . ai53ac) (hashtable-hash-function . ai53ab) (make-eqv-hashtable . ai53aa) (make-eq-hashtable . ai53a9) (hashtable? . ai53a8) (hashtable-update! . ai53a7) (hashtable-size . ai53a6) (hashtable-set! . ai53a5) (hashtable-ref . ai53a4) (hashtable-mutable? . ai53a3) (hashtable-keys . ai53a2) (hashtable-entries . ai53a1) (hashtable-delete! . ai53a0) (hashtable-copy . ai539f) (hashtable-contains? . ai539e) (hashtable-clear! . ai539d)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54b2 '(rnrs io ports) '(6) '() '() '() '((eof-object? . ai538d) (eof-object . ai538c) (current-error-port . ai538b) (current-output-port . ai538a) (current-input-port . ai5389) (output-port? . ai5388) (input-port? . ai5387) (utf-8-codec . ai5386) (utf-16-codec . ai5385) (transcoder-error-handling-mode . ai5384) (transcoder-eol-style . ai5383) (transcoder-codec . ai5382) (transcoded-port . ai5381) (textual-port? . ai5380) (string->bytevector . ai537f) (standard-output-port . ai537e) (standard-input-port . ai537d) (standard-error-port . ai537c) (set-port-position! . ai537b) (put-u8 . ai537a) (put-string . ai5379) (put-datum . ai5378) (put-char . ai5377) (put-bytevector . ai5376) (port? . ai5375) (port-transcoder . ai5374) (port-position . ai5373) (port-has-set-port-position!? . ai5372) (port-has-port-position? . ai5371) (port-eof? . ai5370) (output-port-buffer-mode . ai536f) (open-string-output-port . ai536e) (open-string-input-port . ai536d) (open-file-output-port . ai536c) (open-file-input/output-port . ai536b) (open-file-input-port . ai536a) (open-bytevector-output-port . ai5369) (open-bytevector-input-port . ai5368) (native-transcoder . ai5367) (native-eol-style . ai5366) (make-transcoder . ai5365) (latin-1-codec . ai5364) (make-i/o-write-error . ai4dfc) (make-i/o-read-error . ai4de7) (make-i/o-port-error . ai4e9d) (make-i/o-invalid-position-error . ai4e13) (make-i/o-filename-error . ai4e2e) (make-i/o-file-protection-error . ai4e47) (make-i/o-file-is-read-only-error . ai4e5c) (make-i/o-file-does-not-exist-error . ai4e86) (make-i/o-file-already-exists-error . ai4e71) (make-i/o-error . ai4dd2) (make-i/o-encoding-error . ai4ecd) (make-i/o-decoding-error . ai4eb6) (make-custom-textual-output-port . ai5363) (make-custom-textual-input/output-port . ai5362) (make-custom-textual-input-port . ai5361) (make-custom-binary-output-port . ai5360) (make-custom-binary-input/output-port . ai535f) (make-custom-binary-input-port . ai535e) (lookahead-u8 . ai535c) (lookahead-char . ai535b) (i/o-write-error? . ai4dfe) (i/o-read-error? . ai4de9) (i/o-port-error? . ai4ea1) (i/o-invalid-position-error? . ai4e17) (i/o-filename-error? . ai4e32) (i/o-file-protection-error? . ai4e49) (i/o-file-is-read-only-error? . ai4e5e) (i/o-file-does-not-exist-error? . ai4e88) (i/o-file-already-exists-error? . ai4e73) (i/o-error? . ai4dd4) (i/o-error-position . ai4e19) (i/o-error-port . ai4ea3) (i/o-error-filename . ai4e34) (i/o-encoding-error? . ai4ed1) (i/o-encoding-error-char . ai4ed3) (i/o-decoding-error? . ai4eb8) (get-u8 . ai535a) (get-string-n! . ai5359) (get-string-n . ai5358) (get-string-all . ai5357) (get-line . ai5356) (get-datum . ai5355) (get-char . ai5354) (get-bytevector-some . ai5353) (get-bytevector-n! . ai5352) (get-bytevector-n . ai5351) (get-bytevector-all . ai5350) (flush-output-port . ai534f) (close-port . ai534e) (call-with-string-output-port . ai532d) (call-with-port . ai532c) (call-with-bytevector-output-port . ai532b) (bytevector->string . ai532a) (buffer-mode? . ai5329) (binary-port? . ai5328) (&i/o-encoding . ai51c6) (&i/o-decoding . ai51c5) (&i/o-port . ai51c4) (&i/o-file-does-not-exist . ai51c3) (&i/o-file-already-exists . ai51c2) (&i/o-file-is-read-only . ai51c1) (&i/o-file-protection . ai51c0) (&i/o-filename . ai51bf) (&i/o-invalid-position . ai51be) (&i/o-write . ai51bd) (&i/o-read . ai51bc) (&i/o . ai51bb) (error-handling-mode . ai51a0) (file-options . ai519f) (buffer-mode . ai519e) (eol-style . ai519d)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54b3 '(rnrs enums) '(6) '() '() '() '((make-enumeration . ai5324) (enum-set=? . ai5323) (enum-set-universe . ai5322) (enum-set-union . ai5321) (enum-set-subset? . ai5320) (enum-set-projection . ai531f) (enum-set-member? . ai531e) (enum-set-intersection . ai531d) (enum-set-indexer . ai531c) (enum-set-difference . ai531b) (enum-set-constructor . ai531a) (enum-set-complement . ai5319) (enum-set->list . ai5318) (define-enumeration . ai51ab)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54b4 '(rnrs conditions) '(6) '() '() '() '((who-condition? . ai4d48) (warning? . ai4cc0) (violation? . ai4cff) (undefined-violation? . ai4dbf) (syntax-violation? . ai4da6) (syntax-violation-subform . ai4daa) (syntax-violation-form . ai4da8) (syntax-violation . ai31d2) (simple-conditions . ai5317) (serious-condition? . ai4cd5) (non-continuable-violation? . ai4d5f) (message-condition? . ai4ca9) (make-who-condition . ai4d44) (make-warning . ai4cbe) (make-violation . ai4cfd) (make-undefined-violation . ai4dbd) (make-syntax-violation . ai4da0) (make-serious-condition . ai4cd3) (make-non-continuable-violation . ai4d5d) (make-message-condition . ai4ca5) (make-lexical-violation . ai4d87) (make-irritants-condition . ai4d29) (make-implementation-restriction-violation . ai4d72) (make-error . ai4ce8) (make-assertion-violation . ai4d12) (lexical-violation? . ai4d89) (irritants-condition? . ai4d2d) (implementation-restriction-violation? . ai4d74) (error? . ai4cea) (condition-who . ai4d4a) (condition-predicate . ai5316) (condition-message . ai4cab) (condition-irritants . ai4d2f) (condition-accessor . ai5315) (condition . ai5314) (assertion-violation? . ai4d14) (condition? . ai5313) (&undefined . ai51ba) (&syntax . ai51b9) (&lexical . ai51b8) (&implementation-restriction . ai51b7) (&non-continuable . ai51b6) (&who . ai51b5) (&irritants . ai51b4) (&assertion . ai51b3) (&violation . ai51b2) (&error . ai51b1) (&serious . ai51b0) (&warning . ai51af) (&message . ai51ae) (&condition . ai51ad) (define-condition-type . ai51ac)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54b5 '(rnrs records inspection) '(6) '() '() '() '((record? . ai53c0) (record-type-uid . ai53bf) (record-type-sealed? . ai53be) (record-type-parent . ai53bd) (record-type-opaque? . ai53bc) (record-type-name . ai53bb) (record-type-generative? . ai53ba) (record-type-field-names . ai53b9) (record-rtd . ai53b8) (record-field-mutable? . ai53b7)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54b6 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . ai53c7) (record-predicate . ai53c6) (record-mutator . ai53c5) (record-constructor . ai53c4) (record-accessor . ai53c3) (make-record-type-descriptor . ai53c2) (make-record-constructor-descriptor . ai53c1)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54b7 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . ai51aa) (parent-rtd . ai51a9) (nongenerative . ai51a8) (opaque . ai51a7) (sealed . ai51a6) (protocol . ai51a5) (parent . ai51a4) (immutable . ai51a3) (mutable . ai51a2) (fields . ai51a1) (record-constructor-descriptor . ai5181) (record-type-descriptor . ai5180)) '() values values '#f '#f '#t '#f) (ai2cff@ai2b3b@install-library 'ai54b8 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . ai4f01) (&no-nans-rtd . ai4eff) (&no-infinities-rcd . ai4eec) (&no-infinities-rtd . ai4eea) (&i/o-encoding-rcd . ai4ed7) (&i/o-encoding-rtd . ai4ed5) (&i/o-decoding-rcd . ai4ebc) (&i/o-decoding-rtd . ai4eba) (&i/o-port-rcd . ai4ea7) (&i/o-port-rtd . ai4ea5) (&i/o-file-does-not-exist-rcd . ai4e8c) (&i/o-file-does-not-exist-rtd . ai4e8a) (&i/o-file-already-exists-rcd . ai4e77) (&i/o-file-already-exists-rtd . ai4e75) (&i/o-file-is-read-only-rcd . ai4e62) (&i/o-file-is-read-only-rtd . ai4e60) (&i/o-file-protection-rcd . ai4e4d) (&i/o-file-protection-rtd . ai4e4b) (&i/o-filename-rcd . ai4e38) (&i/o-filename-rtd . ai4e36) (&i/o-invalid-position-rcd . ai4e1d) (&i/o-invalid-position-rtd . ai4e1b) (&i/o-write-rcd . ai4e02) (&i/o-write-rtd . ai4e00) (&i/o-read-rcd . ai4ded) (&i/o-read-rtd . ai4deb) (&i/o-rcd . ai4dd8) (&i/o-rtd . ai4dd6) (&undefined-rcd . ai4dc3) (&undefined-rtd . ai4dc1) (&syntax-rcd . ai4dae) (&syntax-rtd . ai4dac) (&lexical-rcd . ai4d8d) (&lexical-rtd . ai4d8b) (&implementation-restriction-rcd . ai4d78) (&implementation-restriction-rtd . ai4d76) (&non-continuable-rcd . ai4d63) (&non-continuable-rtd . ai4d61) (&who-rcd . ai4d4e) (&who-rtd . ai4d4c) (&irritants-rcd . ai4d33) (&irritants-rtd . ai4d31) (&assertion-rcd . ai4d18) (&assertion-rtd . ai4d16) (&violation-rcd . ai4d03) (&violation-rtd . ai4d01) (&error-rcd . ai4cee) (&error-rtd . ai4cec) (&serious-rcd . ai4cd9) (&serious-rtd . ai4cd7) (&warning-rcd . ai4cc4) (&warning-rtd . ai4cc2) (&message-rcd . ai4caf) (&message-rtd . ai4cad) (&condition-rcd . ai4c50) (&condition-rtd . ai4c4e) (syntax-error . ai31ce) (syntax-dispatch . ai30f2) (pretty-print . ai5498) (eval-core . ai5497) (set-symbol-value! . ai5496) (symbol-value . ai5495) (gensym . ai5494) (void . ai5493) (load . ai5010) (interaction-environment . ai31e0) (char-ready? . ai5492) (regexp? . ai5491) (read-line . ai5490) (gensym-prefix-set! . ai548f) (ungensym . ai548e) (alist->eq-hash-table . ai548d) (assoc-ref . ai548c) (print . ai548b) (format . ai548a) (host-os . ai5489) (library-path . ai2b1a) (standard-library-path . ai5488) (file-newer? . ai5487) (stat-mtime . ai5486) (write-to-file . ai5485) (file->sexp-list . ai5484) (file->list . ai5483) (file->string . ai5482) (digit->integer . ai5481) (call-with-string-input-port . ai5480) (call-with-string-io . ai547f) (string-split . ai547e) (bytevector-for-each . ai547d) (string->regexp . ai547c) (rxmatch . ai547b) (regexp-replace-all . ai547a) (hashtable-for-each . ai5479) (mosh-cache-dir . ai2904) (call-process . ai5478) (local-tz-offset . ai5477) (microseconds . ai5476) (directory-list . ai5475) (set-current-directory! . ai5474) (expand-path . ai5473) (current-directory . ai5472) (%spawn . ai5471) (%waitpid . ai5470) (simple-struct-name . ai546f) (simple-struct-set! . ai546e) (simple-struct-ref . ai546d) (make-simple-struct . ai546c) (simple-struct? . ai546b) (pointer-ref-c-int64 . ai546a) (pointer-ref-c-int32 . ai5469) (pointer-ref-c-int16 . ai5468) (pointer-ref-c-int8 . ai5467) (pointer-ref-c-uint64 . ai5466) (pointer-ref-c-uint32 . ai5465) (pointer-ref-c-uint16 . ai5464) (pointer-ref-c-uint8 . ai5463) (pointer-set-c-uint64! . ai5462) (pointer-set-c-uint32! . ai5461) (pointer-set-c-uint16! . ai5460) (pointer-set-c-uint8! . ai545f) (pointer-set-c-int64! . ai545e) (pointer-set-c-int32! . ai545d) (pointer-set-c-int16! . ai545c) (pointer-set-c-int8! . ai545b) (pointer-set-c-pointer! . ai545a) (pointer-set-c-double! . ai5459) (pointer-set-c-float! . ai5458) (pointer-set-c-long-long! . ai5457) (pointer-set-c-long! . ai5456) (pointer-set-c-int! . ai5455) (pointer-set-c-short! . ai5454) (pointer-set-c-char! . ai5453) (pointer-ref-c-pointer . ai5452) (pointer-ref-c-double . ai5451) (pointer-ref-c-float . ai5450) (pointer-ref-c-unsigned-long-long . ai544f) (pointer-ref-c-signed-long-long . ai544e) (pointer-ref-c-unsigned-long . ai544d) (pointer-ref-c-signed-long . ai544c) (pointer-ref-c-unsigned-int . ai544b) (pointer-ref-c-signed-int . ai544a) (pointer-ref-c-unsigned-short . ai5449) (pointer-ref-c-signed-short . ai5448) (pointer-ref-c-unsigned-char . ai5447) (pointer-ref-c-signed-char . ai5446) (pointer->integer . ai5445) (integer->pointer . ai5444) (pointer? . ai5443) (shared-errno . ai5442) (get-c-address . ai5441) (set-jit-compiled! . ai5440) (jit-compiled? . ai543f) (obj->integer . ai543e) (u8-list->c-procedure . ai543d) (%ffi-free-c-callback-trampoline . ai543c) (%ffi-make-c-callback-trampoline . ai543b) (%ffi-free . ai543a) (%ffi-malloc . ai5439) (%ffi-supported? . ai5438) (%ffi-pointer->string . ai5437) (%ffi-call . ai5436) (%ffi-lookup . ai5435) (%ffi-open . ai5434) (null-terminated-utf8->string . ai5433) (null-terminated-bytevector->string . ai5432) (%fork . ai5431) (%pipe . ai5430) (p . ai542f) (open-output-string . ai542e) (get-output-string . ai542d) (file-stat-ctime . ai542c) (file-stat-atime . ai542b) (file-stat-mtime . ai542a) (file-size-in-bytes . ai5429) (file-writable? . ai5428) (file-executable? . ai5427) (file-readable? . ai5426) (file-regular? . ai5425) (file-symbolic-link? . ai5424) (file-directory? . ai5423) (create-symbolic-link . ai5422) (rename-file . ai5421) (delete-directory . ai5420) (create-directory . ai541f) (create-mosh-cache-dir . ai541e) (get-environment-variables . ai541d) (current-exception-handler . ai541c) (get-environment-variable . ai541b) (join-wraps . ai541a) (id->real-label . ai5419) (same-marks? . ai5418) (same-marks*? . ai5417) (get-timeofday . ai5416) (get-command-line . ai5415) (sys-display . ai5414) (whereis . ai5413) (register . ai5412) (vm-join! . ai5411) (vm-set-value! . ai5410) (vm? . ai540f) (main-vm? . ai540e) (vm-eval . ai540d) (vm-self . ai540c) (vm-start! . ai540b) (make-vm . ai540a) (mutex-try-lock! . ai5409) (mutex-unlock! . ai5408) (mutex-lock! . ai5407) (mutex? . ai5406) (make-mutex . ai5405) (condition-variable-notify-all! . ai5404) (condition-variable-notify! . ai5403) (condition-variable-wait! . ai5402) (make-condition-variable . ai5401) (mosh-executable-path . ai5400) (make-file-options . ai53ff) (for-each-with-index . ai53fe) (source-info . ai53fd) (instruction? . ai53fc) (instruction->integer . ai53fb) (instruction->symbol . ai53fa) (closure->list . ai53f9) (make-compiler-instruction . ai53f8) (make-instruction . ai53f7) (set-source-info! . ai53f6) (bignum? . ai53f5) (fast-equal? . ai53f4) (fasl-read . ai53f3) (fasl-write . ai53f2) (time-usage . ai53f1) (os-constant . ai53f0) (disasm . ai53ef) (make-parameter . ai2902) (socket-port . ai53ee) (socket-shutdown . ai53ed) (socket-close . ai53ec) (socket-send . ai53eb) (socket-recv! . ai53ea) (socket-recv . ai53e9) (make-server-socket . ai53e8) (make-client-socket . ai53e7) (socket-accept . ai53e6) (socket? . ai53e5) (string-upcase . ai53e4) (string-titlecase . ai53e3) (string-normalize-nfkd . ai53e2) (string-normalize-nfkc . ai53e1) (string-normalize-nfd . ai53e0) (string-normalize-nfc . ai53df) (string-foldcase . ai53de) (string-downcase . ai53dd) (string-ci>? . ai53dc) (string-ci>=? . ai53db) (string-ci=? . ai53da) (string-ci<? . ai53d9) (string-ci<=? . ai53d8) (char-whitespace? . ai53d7) (char-upper-case? . ai53d6) (char-title-case? . ai53d5) (char-numeric? . ai53d4) (char-lower-case? . ai53d3) (char-general-category . ai53d2) (char-upcase . ai53d1) (char-titlecase . ai53d0) (char-foldcase . ai53cf) (char-downcase . ai53ce) (char-ci>? . ai53cd) (char-ci>=? . ai53cc) (char-ci=? . ai53cb) (char-ci<? . ai53ca) (char-ci<=? . ai53c9) (char-alphabetic? . ai53c8) (make-variable-transformer . ai2f1d) (identifier? . ai31d4) (generate-temporaries . ai31c0) (free-identifier=? . ai31c2) (syntax->datum . ai31d8) (datum->syntax . ai31d6) (bound-identifier=? . ai31c4) (record-type-descriptor? . ai53c7) (record-predicate . ai53c6) (record-mutator . ai53c5) (record-constructor . ai53c4) (record-accessor . ai53c3) (make-record-type-descriptor . ai53c2) (make-record-constructor-descriptor . ai53c1) (record? . ai53c0) (record-type-uid . ai53bf) (record-type-sealed? . ai53be) (record-type-parent . ai53bd) (record-type-opaque? . ai53bc) (record-type-name . ai53bb) (record-type-generative? . ai53ba) (record-type-field-names . ai53b9) (record-rtd . ai53b8) (record-field-mutable? . ai53b7) (delete-file . ai53b6) (file-exists? . ai53b5) (vector-sort! . ai53b4) (vector-sort . ai53b3) (list-sort . ai53b2) (symbol-hash . ai53b1) (string-ci-hash . ai53b0) (string-hash . ai53af) (equal-hash . ai53ae) (hashtable-equivalence-function . ai53ad) (make-hashtable . ai53ac) (hashtable-hash-function . ai53ab) (make-eqv-hashtable . ai53aa) (make-eq-hashtable . ai53a9) (hashtable? . ai53a8) (hashtable-update! . ai53a7) (hashtable-size . ai53a6) (hashtable-set! . ai53a5) (hashtable-ref . ai53a4) (hashtable-mutable? . ai53a3) (hashtable-keys . ai53a2) (hashtable-entries . ai53a1) (hashtable-delete! . ai53a0) (hashtable-copy . ai539f) (hashtable-contains? . ai539e) (hashtable-clear! . ai539d) (call-with-output-file . ai539c) (call-with-input-file . ai539b) (write-char . ai539a) (write . ai5399) (with-output-to-file . ai5398) (with-input-from-file . ai5397) (read-char . ai5396) (read . ai5395) (peek-char . ai5394) (open-output-file . ai5393) (open-input-file . ai5392) (newline . ai5391) (display . ai5390) (close-output-port . ai538f) (close-input-port . ai538e) (eof-object? . ai538d) (eof-object . ai538c) (current-error-port . ai538b) (current-output-port . ai538a) (current-input-port . ai5389) (output-port? . ai5388) (input-port? . ai5387) (utf-8-codec . ai5386) (utf-16-codec . ai5385) (transcoder-error-handling-mode . ai5384) (transcoder-eol-style . ai5383) (transcoder-codec . ai5382) (transcoded-port . ai5381) (textual-port? . ai5380) (string->bytevector . ai537f) (standard-output-port . ai537e) (standard-input-port . ai537d) (standard-error-port . ai537c) (set-port-position! . ai537b) (put-u8 . ai537a) (put-string . ai5379) (put-datum . ai5378) (put-char . ai5377) (put-bytevector . ai5376) (port? . ai5375) (port-transcoder . ai5374) (port-position . ai5373) (port-has-set-port-position!? . ai5372) (port-has-port-position? . ai5371) (port-eof? . ai5370) (output-port-buffer-mode . ai536f) (open-string-output-port . ai536e) (open-string-input-port . ai536d) (open-file-output-port . ai536c) (open-file-input/output-port . ai536b) (open-file-input-port . ai536a) (open-bytevector-output-port . ai5369) (open-bytevector-input-port . ai5368) (native-transcoder . ai5367) (native-eol-style . ai5366) (make-transcoder . ai5365) (latin-1-codec . ai5364) (make-i/o-write-error . ai4dfc) (make-i/o-read-error . ai4de7) (make-i/o-port-error . ai4e9d) (make-i/o-invalid-position-error . ai4e13) (make-i/o-filename-error . ai4e2e) (make-i/o-file-protection-error . ai4e47) (make-i/o-file-is-read-only-error . ai4e5c) (make-i/o-file-does-not-exist-error . ai4e86) (make-i/o-file-already-exists-error . ai4e71) (make-i/o-error . ai4dd2) (make-i/o-encoding-error . ai4ecd) (make-i/o-decoding-error . ai4eb6) (make-custom-textual-output-port . ai5363) (make-custom-textual-input/output-port . ai5362) (make-custom-textual-input-port . ai5361) (make-custom-binary-output-port . ai5360) (make-custom-binary-input/output-port . ai535f) (make-custom-binary-input-port . ai535e) (make-bytevector . ai535d) (lookahead-u8 . ai535c) (lookahead-char . ai535b) (i/o-write-error? . ai4dfe) (i/o-read-error? . ai4de9) (i/o-port-error? . ai4ea1) (i/o-invalid-position-error? . ai4e17) (i/o-filename-error? . ai4e32) (i/o-file-protection-error? . ai4e49) (i/o-file-is-read-only-error? . ai4e5e) (i/o-file-does-not-exist-error? . ai4e88) (i/o-file-already-exists-error? . ai4e73) (i/o-error? . ai4dd4) (i/o-error-position . ai4e19) (i/o-error-port . ai4ea3) (i/o-error-filename . ai4e34) (i/o-encoding-error? . ai4ed1) (i/o-encoding-error-char . ai4ed3) (i/o-decoding-error? . ai4eb8) (get-u8 . ai535a) (get-string-n! . ai5359) (get-string-n . ai5358) (get-string-all . ai5357) (get-line . ai5356) (get-datum . ai5355) (get-char . ai5354) (get-bytevector-some . ai5353) (get-bytevector-n! . ai5352) (get-bytevector-n . ai5351) (get-bytevector-all . ai5350) (flush-output-port . ai534f) (close-port . ai534e) (scheme-report-environment . ai31ae) (quotient . ai534d) (null-environment . ai31ac) (remainder . ai534c) (modulo . ai534b) (inexact->exact . ai534a) (force . ai5349) (exact->inexact . ai5348) (make-promise . ai5347) (exit . ai5346) (command-line . ai500a) (string-fill! . ai5345) (string-set! . ai5344) (set-cdr! . ai5343) (set-car! . ai5342) (remove . ai5341) (remv . ai5340) (remp . ai533f) (remq . ai533e) (partition . ai533d) (memv . ai533c) (memq . ai533b) (memp . ai533a) (member . ai5339) (exists . ai5338) (for-all . ai5337) (fold-right . ai5336) (fold-left . ai5335) (find . ai5334) (filter . ai5333) (cons* . ai5332) (assv . ai5331) (assq . ai5330) (assp . ai532f) (assoc . ai532e) (call-with-string-output-port . ai532d) (call-with-port . ai532c) (call-with-bytevector-output-port . ai532b) (bytevector->string . ai532a) (buffer-mode? . ai5329) (binary-port? . ai5328) (with-exception-handler . ai5327) (raise-continuable . ai5326) (raise . ai5325) (eval . ai31b2) (environment . ai31aa) (make-enumeration . ai5324) (enum-set=? . ai5323) (enum-set-universe . ai5322) (enum-set-union . ai5321) (enum-set-subset? . ai5320) (enum-set-projection . ai531f) (enum-set-member? . ai531e) (enum-set-intersection . ai531d) (enum-set-indexer . ai531c) (enum-set-difference . ai531b) (enum-set-constructor . ai531a) (enum-set-complement . ai5319) (enum-set->list . ai5318) (who-condition? . ai4d48) (warning? . ai4cc0) (violation? . ai4cff) (undefined-violation? . ai4dbf) (syntax-violation? . ai4da6) (syntax-violation-subform . ai4daa) (syntax-violation-form . ai4da8) (syntax-violation . ai31d2) (simple-conditions . ai5317) (serious-condition? . ai4cd5) (non-continuable-violation? . ai4d5f) (message-condition? . ai4ca9) (make-who-condition . ai4d44) (make-warning . ai4cbe) (make-violation . ai4cfd) (make-undefined-violation . ai4dbd) (make-syntax-violation . ai4da0) (make-serious-condition . ai4cd3) (make-non-continuable-violation . ai4d5d) (make-message-condition . ai4ca5) (make-lexical-violation . ai4d87) (make-irritants-condition . ai4d29) (make-implementation-restriction-violation . ai4d72) (make-error . ai4ce8) (make-assertion-violation . ai4d12) (lexical-violation? . ai4d89) (irritants-condition? . ai4d2d) (implementation-restriction-violation? . ai4d74) (error? . ai4cea) (condition-who . ai4d4a) (condition-predicate . ai5316) (condition-message . ai4cab) (condition-irritants . ai4d2f) (condition-accessor . ai5315) (condition . ai5314) (assertion-violation? . ai4d14) (condition? . ai5313) (utf32->string . ai5312) (utf16->string . ai5311) (utf8->string . ai5310) (uint-list->bytevector . ai530f) (u8-list->bytevector . ai530e) (string->utf8 . ai530d) (string->utf32 . ai530c) (string->utf16 . ai530b) (sint-list->bytevector . ai530a) (native-endianness . ai5309) (bytevector? . ai5308) (bytevector=? . ai5307) (bytevector-uint-set! . ai5306) (bytevector-uint-ref . ai5305) (bytevector-u8-set! . ai5304) (bytevector-u8-ref . ai5303) (bytevector-u64-set! . ai5302) (bytevector-u64-ref . ai5301) (bytevector-u64-native-set! . ai5300) (bytevector-u64-native-ref . ai52ff) (bytevector-u32-set! . ai52fe) (bytevector-u32-ref . ai52fd) (bytevector-u32-native-set! . ai52fc) (bytevector-u32-native-ref . ai52fb) (bytevector-u16-set! . ai52fa) (bytevector-u16-ref . ai52f9) (bytevector-u16-native-set! . ai52f8) (bytevector-u16-native-ref . ai52f7) (bytevector-sint-set! . ai52f6) (bytevector-sint-ref . ai52f5) (bytevector-s8-set! . ai52f4) (bytevector-s8-ref . ai52f3) (bytevector-s64-set! . ai52f2) (bytevector-s64-ref . ai52f1) (bytevector-s64-native-set! . ai52f0) (bytevector-s64-native-ref . ai52ef) (bytevector-s32-set! . ai52ee) (bytevector-s32-ref . ai52ed) (bytevector-s32-native-set! . ai52ec) (bytevector-s32-native-ref . ai52eb) (bytevector-s16-set! . ai52ea) (bytevector-s16-ref . ai52e9) (bytevector-s16-native-set! . ai52e8) (bytevector-s16-native-ref . ai52e7) (bytevector-length . ai52e6) (bytevector-ieee-single-ref . ai52e5) (bytevector-ieee-single-set! . ai52e4) (bytevector-ieee-single-native-set! . ai52e3) (bytevector-ieee-single-native-ref . ai52e2) (bytevector-ieee-double-set! . ai52e1) (bytevector-ieee-double-ref . ai52e0) (bytevector-ieee-double-native-set! . ai52df) (bytevector-ieee-double-native-ref . ai52de) (bytevector-fill! . ai52dd) (bytevector-copy! . ai52dc) (bytevector-copy . ai52db) (bytevector->uint-list . ai52da) (bytevector->u8-list . ai52d9) (bytevector->sint-list . ai52d8) (no-nans-violation? . ai4efd) (no-infinities-violation? . ai4ee8) (make-no-nans-violation . ai4efb) (make-no-infinities-violation . ai4ee6) (real->flonum . ai52d7) (flzero? . ai52d6) (fltruncate . ai52d5) (fltan . ai52d4) (flsqrt . ai52d3) (flsin . ai52d2) (flround . ai52d1) (flpositive? . ai52d0) (flonum? . ai52cf) (flodd? . ai52ce) (flnumerator . ai52cd) (flnegative? . ai52cc) (flnan? . ai52cb) (flmod0 . ai52ca) (flmod . ai52c9) (flmin . ai52c8) (flmax . ai52c7) (fllog . ai52c6) (flinteger? . ai52c5) (flinfinite? . ai52c4) (flfloor . ai52c3) (flfinite? . ai52c2) (flexpt . ai52c1) (flexp . ai52c0) (fleven? . ai52bf) (fldiv0-and-mod0 . ai52be) (fldiv0 . ai52bd) (fldiv-and-mod . ai52bc) (fldiv . ai52bb) (fldenominator . ai52ba) (flcos . ai52b9) (flceiling . ai52b8) (flatan . ai52b7) (flasin . ai52b6) (flacos . ai52b5) (flabs . ai52b4) (fl>? . ai52b3) (fl>=? . ai52b2) (fl=? . ai52b1) (fl<? . ai52b0) (fl<=? . ai52af) (fl/ . ai52ae) (fl- . ai52ad) (fl+ . ai52ac) (fl* . ai52ab) (fixnum->flonum . ai52aa) (fxzero? . ai52a9) (fxxor . ai52a8) (fxrotate-bit-field . ai52a7) (fxreverse-bit-field . ai52a6) (fxpositive? . ai52a5) (fxodd? . ai52a4) (fxnot . ai52a3) (fxnegative? . ai52a2) (fxmod0 . ai52a1) (fxmod . ai52a0) (fxmin . ai529f) (fxmax . ai529e) (fxlength . ai529d) (fxior . ai529c) (fxif . ai529b) (fxfirst-bit-set . ai529a) (fxeven? . ai5299) (fxdiv0-and-mod0 . ai5298) (fxdiv0 . ai5297) (fxdiv-and-mod . ai5296) (fxdiv . ai5295) (fxcopy-bit-field . ai5294) (fxcopy-bit . ai5293) (fxbit-set? . ai5292) (fxbit-field . ai5291) (fxbit-count . ai5290) (fxarithmetic-shift-right . ai528f) (fxarithmetic-shift-left . ai528e) (fxarithmetic-shift . ai528d) (fxand . ai528c) (fx>? . ai528b) (fx>=? . ai528a) (fx=? . ai5289) (fx<? . ai5288) (fx<=? . ai5287) (fx-/carry . ai5286) (fx- . ai5285) (fx+/carry . ai5284) (fx+ . ai5283) (fx*/carry . ai5282) (fx* . ai5281) (greatest-fixnum . ai5280) (least-fixnum . ai527f) (fixnum-width . ai527e) (fixnum? . ai527d) (bitwise-rotate-bit-field . ai527c) (bitwise-reverse-bit-field . ai527b) (bitwise-length . ai527a) (bitwise-if . ai5279) (bitwise-first-bit-set . ai5278) (bitwise-copy-bit-field . ai5277) (bitwise-copy-bit . ai5276) (bitwise-bit-set? . ai5275) (bitwise-bit-field . ai5274) (bitwise-bit-count . ai5273) (bitwise-xor . ai5272) (bitwise-ior . ai5271) (bitwise-and . ai5270) (bitwise-not . ai526f) (bitwise-arithmetic-shift-right . ai526e) (bitwise-arithmetic-shift-left . ai526d) (bitwise-arithmetic-shift . ai526c) (zero? . ai526b) (vector? . ai526a) (vector-set! . ai5269) (vector-ref . ai5268) (vector-map . ai5267) (vector-length . ai5266) (vector-for-each . ai5265) (vector-fill! . ai5264) (vector->list . ai5263) (vector . ai5262) (values . ai5261) (truncate . ai5260) (tan . ai525f) (symbol? . ai525e) (symbol=? . ai525d) (symbol->string . ai525c) (substring . ai525b) (string? . ai525a) (string>? . ai5259) (string>=? . ai5258) (string=? . ai5257) (string<? . ai5256) (string<=? . ai5255) (string-ref . ai5254) (string-length . ai5253) (string-for-each . ai5252) (string-copy . ai5251) (string-append . ai5250) (string->symbol . ai524f) (string->number . ai524e) (string->list . ai524d) (string . ai524c) (sqrt . ai524b) (sin . ai524a) (round . ai5249) (reverse . ai5248) (real? . ai5247) (real-valued? . ai5246) (real-part . ai5245) (rationalize . ai5244) (rational? . ai5243) (rational-valued? . ai5242) (procedure? . ai5241) (positive? . ai5240) (pair? . ai523f) (odd? . ai523e) (numerator . ai523d) (number? . ai523c) (number->string . ai523b) (null? . ai523a) (not . ai5239) (negative? . ai5238) (nan? . ai5237) (min . ai5236) (max . ai5235) (map . ai5234) (make-vector . ai5233) (make-string . ai5232) (make-rectangular . ai5231) (make-polar . ai5230) (magnitude . ai522f) (log . ai522e) (list? . ai522d) (list-tail . ai522c) (list-ref . ai522b) (list->vector . ai522a) (list->string . ai5229) (list . ai5228) (length . ai5227) (lcm . ai5226) (integer? . ai5225) (integer-valued? . ai5224) (integer->char . ai5223) (infinite? . ai5222) (inexact? . ai5221) (inexact . ai5220) (imag-part . ai521f) (gcd . ai521e) (for-each . ai521d) (floor . ai521c) (finite? . ai521b) (expt . ai521a) (exp . ai5219) (exact? . ai5218) (exact-integer-sqrt . ai5217) (exact . ai5216) (even? . ai5215) (error . ai5214) (eqv? . ai5213) (equal? . ai5212) (eq? . ai5211) (dynamic-wind . ai5210) (div0-and-mod0 . ai520f) (mod0 . ai520e) (div0 . ai520d) (div-and-mod . ai520c) (mod . ai520b) (div . ai520a) (denominator . ai5209) (cos . ai5208) (cons . ai5207) (complex? . ai5206) (char? . ai5205) (char>? . ai5204) (char>=? . ai5203) (char=? . ai5202) (char<? . ai5201) (char<=? . ai5200) (char->integer . ai51ff) (ceiling . ai51fe) (call-with-values . ai51fd) (call/cc . ai51fc) (call-with-current-continuation . ai51fb) (cddddr . ai51fa) (cdddar . ai51f9) (cddadr . ai51f8) (cddaar . ai51f7) (cdaddr . ai51f6) (cdadar . ai51f5) (cdaadr . ai51f4) (cdaaar . ai51f3) (cadddr . ai51f2) (caddar . ai51f1) (cadadr . ai51f0) (cadaar . ai51ef) (caaddr . ai51ee) (caadar . ai51ed) (caaadr . ai51ec) (caaaar . ai51eb) (cdddr . ai51ea) (cddar . ai51e9) (cdadr . ai51e8) (cdaar . ai51e7) (caddr . ai51e6) (cadar . ai51e5) (caadr . ai51e4) (caaar . ai51e3) (cddr . ai51e2) (cdar . ai51e1) (cadr . ai51e0) (caar . ai51df) (cdr . ai51de) (car . ai51dd) (boolean? . ai51dc) (boolean=? . ai51db) (atan . ai51da) (assertion-violation . ai51d9) (assertion-error . ai31cc) (asin . ai51d8) (apply . ai51d7) (append . ai51d6) (angle . ai51d5) (acos . ai51d4) (abs . ai51d3) (/ . ai51d2) (* . ai51d1) (- . ai51d0) (+ . ai51cf) (>= . ai51ce) (> . ai51cd) (= . ai51cc) (<= . ai51cb) (< . ai51ca) (library . ai51c9) (&no-nans . ai51c8) (&no-infinities . ai51c7) (&i/o-encoding . ai51c6) (&i/o-decoding . ai51c5) (&i/o-port . ai51c4) (&i/o-file-does-not-exist . ai51c3) (&i/o-file-already-exists . ai51c2) (&i/o-file-is-read-only . ai51c1) (&i/o-file-protection . ai51c0) (&i/o-filename . ai51bf) (&i/o-invalid-position . ai51be) (&i/o-write . ai51bd) (&i/o-read . ai51bc) (&i/o . ai51bb) (&undefined . ai51ba) (&syntax . ai51b9) (&lexical . ai51b8) (&implementation-restriction . ai51b7) (&non-continuable . ai51b6) (&who . ai51b5) (&irritants . ai51b4) (&assertion . ai51b3) (&violation . ai51b2) (&error . ai51b1) (&serious . ai51b0) (&warning . ai51af) (&message . ai51ae) (&condition . ai51ad) (define-condition-type . ai51ac) (define-enumeration . ai51ab) (define-record-type . ai51aa) (parent-rtd . ai51a9) (nongenerative . ai51a8) (opaque . ai51a7) (sealed . ai51a6) (protocol . ai51a5) (parent . ai51a4) (immutable . ai51a3) (mutable . ai51a2) (fields . ai51a1) (error-handling-mode . ai51a0) (file-options . ai519f) (buffer-mode . ai519e) (eol-style . ai519d) (guard . ai519c) (trace-define . ai519b) (trace-lambda . ai519a) (unsyntax-splicing . ai5199) (unsyntax . ai5198) (unquote-splicing . ai5197) (unquote . ai5196) (_ . ai5195) (else . ai5194) (=> . ai5193) (... . ai5192) (assert . ai5191) (endianness . ai5190) (delay . ai518f) (time . ai518e) (do . ai518d) (cond . ai518c) (let* . ai518b) (let*-values . ai518a) (let-values . ai5189) (identifier-syntax . ai5188) (with-syntax . ai5187) (quasisyntax . ai5186) (quasiquote . ai5185) (syntax-rules . ai5184) (include . ai5183) (define-struct . ai5182) (record-constructor-descriptor . ai5181) (record-type-descriptor . ai5180) (case . ai517f) (parameterize . ai517e) (unless . ai517d) (when . ai517c) (or . ai517b) (and . ai517a) (if . ai5179) (let . ai5178) (letrec* . ai5177) (letrec . ai5176) (type-descriptor . ai5175) (case-lambda . ai5174) (lambda . ai5173) (syntax . ai5172) (syntax-case . ai5171) (quote . ai5170) (foreign-call . ai516f) (letrec-syntax . ai516e) (let-syntax . ai516d) (set! . ai516c) (import . ai516b) (begin . ai516a) (module . ai5169) (define-syntax . ai5168) (define . ai5167)) '((ai4f01 core-prim . &no-nans-rcd) (ai4eff core-prim . &no-nans-rtd) (ai4eec core-prim . &no-infinities-rcd) (ai4eea core-prim . &no-infinities-rtd) (ai4ed7 core-prim . &i/o-encoding-rcd) (ai4ed5 core-prim . &i/o-encoding-rtd) (ai4ebc core-prim . &i/o-decoding-rcd) (ai4eba core-prim . &i/o-decoding-rtd) (ai4ea7 core-prim . &i/o-port-rcd) (ai4ea5 core-prim . &i/o-port-rtd) (ai4e8c core-prim . &i/o-file-does-not-exist-rcd) (ai4e8a core-prim . &i/o-file-does-not-exist-rtd) (ai4e77 core-prim . &i/o-file-already-exists-rcd) (ai4e75 core-prim . &i/o-file-already-exists-rtd) (ai4e62 core-prim . &i/o-file-is-read-only-rcd) (ai4e60 core-prim . &i/o-file-is-read-only-rtd) (ai4e4d core-prim . &i/o-file-protection-rcd) (ai4e4b core-prim . &i/o-file-protection-rtd) (ai4e38 core-prim . &i/o-filename-rcd) (ai4e36 core-prim . &i/o-filename-rtd) (ai4e1d core-prim . &i/o-invalid-position-rcd) (ai4e1b core-prim . &i/o-invalid-position-rtd) (ai4e02 core-prim . &i/o-write-rcd) (ai4e00 core-prim . &i/o-write-rtd) (ai4ded core-prim . &i/o-read-rcd) (ai4deb core-prim . &i/o-read-rtd) (ai4dd8 core-prim . &i/o-rcd) (ai4dd6 core-prim . &i/o-rtd) (ai4dc3 core-prim . &undefined-rcd) (ai4dc1 core-prim . &undefined-rtd) (ai4dae core-prim . &syntax-rcd) (ai4dac core-prim . &syntax-rtd) (ai4d8d core-prim . &lexical-rcd) (ai4d8b core-prim . &lexical-rtd) (ai4d78 core-prim . &implementation-restriction-rcd) (ai4d76 core-prim . &implementation-restriction-rtd) (ai4d63 core-prim . &non-continuable-rcd) (ai4d61 core-prim . &non-continuable-rtd) (ai4d4e core-prim . &who-rcd) (ai4d4c core-prim . &who-rtd) (ai4d33 core-prim . &irritants-rcd) (ai4d31 core-prim . &irritants-rtd) (ai4d18 core-prim . &assertion-rcd) (ai4d16 core-prim . &assertion-rtd) (ai4d03 core-prim . &violation-rcd) (ai4d01 core-prim . &violation-rtd) (ai4cee core-prim . &error-rcd) (ai4cec core-prim . &error-rtd) (ai4cd9 core-prim . &serious-rcd) (ai4cd7 core-prim . &serious-rtd) (ai4cc4 core-prim . &warning-rcd) (ai4cc2 core-prim . &warning-rtd) (ai4caf core-prim . &message-rcd) (ai4cad core-prim . &message-rtd) (ai4c50 core-prim . &condition-rcd) (ai4c4e core-prim . &condition-rtd) (ai31ce core-prim . syntax-error) (ai30f2 core-prim . syntax-dispatch) (ai5498 core-prim . pretty-print) (ai5497 core-prim . eval-core) (ai5496 core-prim . set-symbol-value!) (ai5495 core-prim . symbol-value) (ai5494 core-prim . gensym) (ai5493 core-prim . void) (ai5010 core-prim . load) (ai31e0 core-prim . interaction-environment) (ai5492 core-prim . char-ready?) (ai5491 core-prim . regexp?) (ai5490 core-prim . read-line) (ai548f core-prim . gensym-prefix-set!) (ai548e core-prim . ungensym) (ai548d core-prim . alist->eq-hash-table) (ai548c core-prim . assoc-ref) (ai548b core-prim . print) (ai548a core-prim . format) (ai5489 core-prim . host-os) (ai2b1a core-prim . library-path) (ai5488 core-prim . standard-library-path) (ai5487 core-prim . file-newer?) (ai5486 core-prim . stat-mtime) (ai5485 core-prim . write-to-file) (ai5484 core-prim . file->sexp-list) (ai5483 core-prim . file->list) (ai5482 core-prim . file->string) (ai5481 core-prim . digit->integer) (ai5480 core-prim . call-with-string-input-port) (ai547f core-prim . call-with-string-io) (ai547e core-prim . string-split) (ai547d core-prim . bytevector-for-each) (ai547c core-prim . string->regexp) (ai547b core-prim . rxmatch) (ai547a core-prim . regexp-replace-all) (ai5479 core-prim . hashtable-for-each) (ai2904 core-prim . mosh-cache-dir) (ai5478 core-prim . call-process) (ai5477 core-prim . local-tz-offset) (ai5476 core-prim . microseconds) (ai5475 core-prim . directory-list) (ai5474 core-prim . set-current-directory!) (ai5473 core-prim . expand-path) (ai5472 core-prim . current-directory) (ai5471 core-prim . %spawn) (ai5470 core-prim . %waitpid) (ai546f core-prim . simple-struct-name) (ai546e core-prim . simple-struct-set!) (ai546d core-prim . simple-struct-ref) (ai546c core-prim . make-simple-struct) (ai546b core-prim . simple-struct?) (ai546a core-prim . pointer-ref-c-int64) (ai5469 core-prim . pointer-ref-c-int32) (ai5468 core-prim . pointer-ref-c-int16) (ai5467 core-prim . pointer-ref-c-int8) (ai5466 core-prim . pointer-ref-c-uint64) (ai5465 core-prim . pointer-ref-c-uint32) (ai5464 core-prim . pointer-ref-c-uint16) (ai5463 core-prim . pointer-ref-c-uint8) (ai5462 core-prim . pointer-set-c-uint64!) (ai5461 core-prim . pointer-set-c-uint32!) (ai5460 core-prim . pointer-set-c-uint16!) (ai545f core-prim . pointer-set-c-uint8!) (ai545e core-prim . pointer-set-c-int64!) (ai545d core-prim . pointer-set-c-int32!) (ai545c core-prim . pointer-set-c-int16!) (ai545b core-prim . pointer-set-c-int8!) (ai545a core-prim . pointer-set-c-pointer!) (ai5459 core-prim . pointer-set-c-double!) (ai5458 core-prim . pointer-set-c-float!) (ai5457 core-prim . pointer-set-c-long-long!) (ai5456 core-prim . pointer-set-c-long!) (ai5455 core-prim . pointer-set-c-int!) (ai5454 core-prim . pointer-set-c-short!) (ai5453 core-prim . pointer-set-c-char!) (ai5452 core-prim . pointer-ref-c-pointer) (ai5451 core-prim . pointer-ref-c-double) (ai5450 core-prim . pointer-ref-c-float) (ai544f core-prim . pointer-ref-c-unsigned-long-long) (ai544e core-prim . pointer-ref-c-signed-long-long) (ai544d core-prim . pointer-ref-c-unsigned-long) (ai544c core-prim . pointer-ref-c-signed-long) (ai544b core-prim . pointer-ref-c-unsigned-int) (ai544a core-prim . pointer-ref-c-signed-int) (ai5449 core-prim . pointer-ref-c-unsigned-short) (ai5448 core-prim . pointer-ref-c-signed-short) (ai5447 core-prim . pointer-ref-c-unsigned-char) (ai5446 core-prim . pointer-ref-c-signed-char) (ai5445 core-prim . pointer->integer) (ai5444 core-prim . integer->pointer) (ai5443 core-prim . pointer?) (ai5442 core-prim . shared-errno) (ai5441 core-prim . get-c-address) (ai5440 core-prim . set-jit-compiled!) (ai543f core-prim . jit-compiled?) (ai543e core-prim . obj->integer) (ai543d core-prim . u8-list->c-procedure) (ai543c core-prim . %ffi-free-c-callback-trampoline) (ai543b core-prim . %ffi-make-c-callback-trampoline) (ai543a core-prim . %ffi-free) (ai5439 core-prim . %ffi-malloc) (ai5438 core-prim . %ffi-supported?) (ai5437 core-prim . %ffi-pointer->string) (ai5436 core-prim . %ffi-call) (ai5435 core-prim . %ffi-lookup) (ai5434 core-prim . %ffi-open) (ai5433 core-prim . null-terminated-utf8->string) (ai5432 core-prim . null-terminated-bytevector->string) (ai5431 core-prim . %fork) (ai5430 core-prim . %pipe) (ai542f core-prim . p) (ai542e core-prim . open-output-string) (ai542d core-prim . get-output-string) (ai542c core-prim . file-stat-ctime) (ai542b core-prim . file-stat-atime) (ai542a core-prim . file-stat-mtime) (ai5429 core-prim . file-size-in-bytes) (ai5428 core-prim . file-writable?) (ai5427 core-prim . file-executable?) (ai5426 core-prim . file-readable?) (ai5425 core-prim . file-regular?) (ai5424 core-prim . file-symbolic-link?) (ai5423 core-prim . file-directory?) (ai5422 core-prim . create-symbolic-link) (ai5421 core-prim . rename-file) (ai5420 core-prim . delete-directory) (ai541f core-prim . create-directory) (ai541e core-prim . create-mosh-cache-dir) (ai541d core-prim . get-environment-variables) (ai541c core-prim . current-exception-handler) (ai541b core-prim . get-environment-variable) (ai541a core-prim . join-wraps) (ai5419 core-prim . id->real-label) (ai5418 core-prim . same-marks?) (ai5417 core-prim . same-marks*?) (ai5416 core-prim . get-timeofday) (ai5415 core-prim . get-command-line) (ai5414 core-prim . sys-display) (ai5413 core-prim . whereis) (ai5412 core-prim . register) (ai5411 core-prim . vm-join!) (ai5410 core-prim . vm-set-value!) (ai540f core-prim . vm?) (ai540e core-prim . main-vm?) (ai540d core-prim . vm-eval) (ai540c core-prim . vm-self) (ai540b core-prim . vm-start!) (ai540a core-prim . make-vm) (ai5409 core-prim . mutex-try-lock!) (ai5408 core-prim . mutex-unlock!) (ai5407 core-prim . mutex-lock!) (ai5406 core-prim . mutex?) (ai5405 core-prim . make-mutex) (ai5404 core-prim . condition-variable-notify-all!) (ai5403 core-prim . condition-variable-notify!) (ai5402 core-prim . condition-variable-wait!) (ai5401 core-prim . make-condition-variable) (ai5400 core-prim . mosh-executable-path) (ai53ff core-prim . make-file-options) (ai53fe core-prim . for-each-with-index) (ai53fd core-prim . source-info) (ai53fc core-prim . instruction?) (ai53fb core-prim . instruction->integer) (ai53fa core-prim . instruction->symbol) (ai53f9 core-prim . closure->list) (ai53f8 core-prim . make-compiler-instruction) (ai53f7 core-prim . make-instruction) (ai53f6 core-prim . set-source-info!) (ai53f5 core-prim . bignum?) (ai53f4 core-prim . fast-equal?) (ai53f3 core-prim . fasl-read) (ai53f2 core-prim . fasl-write) (ai53f1 core-prim . time-usage) (ai53f0 core-prim . os-constant) (ai53ef core-prim . disasm) (ai2902 core-prim . make-parameter) (ai53ee core-prim . socket-port) (ai53ed core-prim . socket-shutdown) (ai53ec core-prim . socket-close) (ai53eb core-prim . socket-send) (ai53ea core-prim . socket-recv!) (ai53e9 core-prim . socket-recv) (ai53e8 core-prim . make-server-socket) (ai53e7 core-prim . make-client-socket) (ai53e6 core-prim . socket-accept) (ai53e5 core-prim . socket?) (ai53e4 core-prim . string-upcase) (ai53e3 core-prim . string-titlecase) (ai53e2 core-prim . string-normalize-nfkd) (ai53e1 core-prim . string-normalize-nfkc) (ai53e0 core-prim . string-normalize-nfd) (ai53df core-prim . string-normalize-nfc) (ai53de core-prim . string-foldcase) (ai53dd core-prim . string-downcase) (ai53dc core-prim . string-ci>?) (ai53db core-prim . string-ci>=?) (ai53da core-prim . string-ci=?) (ai53d9 core-prim . string-ci<?) (ai53d8 core-prim . string-ci<=?) (ai53d7 core-prim . char-whitespace?) (ai53d6 core-prim . char-upper-case?) (ai53d5 core-prim . char-title-case?) (ai53d4 core-prim . char-numeric?) (ai53d3 core-prim . char-lower-case?) (ai53d2 core-prim . char-general-category) (ai53d1 core-prim . char-upcase) (ai53d0 core-prim . char-titlecase) (ai53cf core-prim . char-foldcase) (ai53ce core-prim . char-downcase) (ai53cd core-prim . char-ci>?) (ai53cc core-prim . char-ci>=?) (ai53cb core-prim . char-ci=?) (ai53ca core-prim . char-ci<?) (ai53c9 core-prim . char-ci<=?) (ai53c8 core-prim . char-alphabetic?) (ai2f1d core-prim . make-variable-transformer) (ai31d4 core-prim . identifier?) (ai31c0 core-prim . generate-temporaries) (ai31c2 core-prim . free-identifier=?) (ai31d8 core-prim . syntax->datum) (ai31d6 core-prim . datum->syntax) (ai31c4 core-prim . bound-identifier=?) (ai53c7 core-prim . record-type-descriptor?) (ai53c6 core-prim . record-predicate) (ai53c5 core-prim . record-mutator) (ai53c4 core-prim . record-constructor) (ai53c3 core-prim . record-accessor) (ai53c2 core-prim . make-record-type-descriptor) (ai53c1 core-prim . make-record-constructor-descriptor) (ai53c0 core-prim . record?) (ai53bf core-prim . record-type-uid) (ai53be core-prim . record-type-sealed?) (ai53bd core-prim . record-type-parent) (ai53bc core-prim . record-type-opaque?) (ai53bb core-prim . record-type-name) (ai53ba core-prim . record-type-generative?) (ai53b9 core-prim . record-type-field-names) (ai53b8 core-prim . record-rtd) (ai53b7 core-prim . record-field-mutable?) (ai53b6 core-prim . delete-file) (ai53b5 core-prim . file-exists?) (ai53b4 core-prim . vector-sort!) (ai53b3 core-prim . vector-sort) (ai53b2 core-prim . list-sort) (ai53b1 core-prim . symbol-hash) (ai53b0 core-prim . string-ci-hash) (ai53af core-prim . string-hash) (ai53ae core-prim . equal-hash) (ai53ad core-prim . hashtable-equivalence-function) (ai53ac core-prim . make-hashtable) (ai53ab core-prim . hashtable-hash-function) (ai53aa core-prim . make-eqv-hashtable) (ai53a9 core-prim . make-eq-hashtable) (ai53a8 core-prim . hashtable?) (ai53a7 core-prim . hashtable-update!) (ai53a6 core-prim . hashtable-size) (ai53a5 core-prim . hashtable-set!) (ai53a4 core-prim . hashtable-ref) (ai53a3 core-prim . hashtable-mutable?) (ai53a2 core-prim . hashtable-keys) (ai53a1 core-prim . hashtable-entries) (ai53a0 core-prim . hashtable-delete!) (ai539f core-prim . hashtable-copy) (ai539e core-prim . hashtable-contains?) (ai539d core-prim . hashtable-clear!) (ai539c core-prim . call-with-output-file) (ai539b core-prim . call-with-input-file) (ai539a core-prim . write-char) (ai5399 core-prim . write) (ai5398 core-prim . with-output-to-file) (ai5397 core-prim . with-input-from-file) (ai5396 core-prim . read-char) (ai5395 core-prim . read) (ai5394 core-prim . peek-char) (ai5393 core-prim . open-output-file) (ai5392 core-prim . open-input-file) (ai5391 core-prim . newline) (ai5390 core-prim . display) (ai538f core-prim . close-output-port) (ai538e core-prim . close-input-port) (ai538d core-prim . eof-object?) (ai538c core-prim . eof-object) (ai538b core-prim . current-error-port) (ai538a core-prim . current-output-port) (ai5389 core-prim . current-input-port) (ai5388 core-prim . output-port?) (ai5387 core-prim . input-port?) (ai5386 core-prim . utf-8-codec) (ai5385 core-prim . utf-16-codec) (ai5384 core-prim . transcoder-error-handling-mode) (ai5383 core-prim . transcoder-eol-style) (ai5382 core-prim . transcoder-codec) (ai5381 core-prim . transcoded-port) (ai5380 core-prim . textual-port?) (ai537f core-prim . string->bytevector) (ai537e core-prim . standard-output-port) (ai537d core-prim . standard-input-port) (ai537c core-prim . standard-error-port) (ai537b core-prim . set-port-position!) (ai537a core-prim . put-u8) (ai5379 core-prim . put-string) (ai5378 core-prim . put-datum) (ai5377 core-prim . put-char) (ai5376 core-prim . put-bytevector) (ai5375 core-prim . port?) (ai5374 core-prim . port-transcoder) (ai5373 core-prim . port-position) (ai5372 core-prim . port-has-set-port-position!?) (ai5371 core-prim . port-has-port-position?) (ai5370 core-prim . port-eof?) (ai536f core-prim . output-port-buffer-mode) (ai536e core-prim . open-string-output-port) (ai536d core-prim . open-string-input-port) (ai536c core-prim . open-file-output-port) (ai536b core-prim . open-file-input/output-port) (ai536a core-prim . open-file-input-port) (ai5369 core-prim . open-bytevector-output-port) (ai5368 core-prim . open-bytevector-input-port) (ai5367 core-prim . native-transcoder) (ai5366 core-prim . native-eol-style) (ai5365 core-prim . make-transcoder) (ai5364 core-prim . latin-1-codec) (ai4dfc core-prim . make-i/o-write-error) (ai4de7 core-prim . make-i/o-read-error) (ai4e9d core-prim . make-i/o-port-error) (ai4e13 core-prim . make-i/o-invalid-position-error) (ai4e2e core-prim . make-i/o-filename-error) (ai4e47 core-prim . make-i/o-file-protection-error) (ai4e5c core-prim . make-i/o-file-is-read-only-error) (ai4e86 core-prim . make-i/o-file-does-not-exist-error) (ai4e71 core-prim . make-i/o-file-already-exists-error) (ai4dd2 core-prim . make-i/o-error) (ai4ecd core-prim . make-i/o-encoding-error) (ai4eb6 core-prim . make-i/o-decoding-error) (ai5363 core-prim . make-custom-textual-output-port) (ai5362 core-prim . make-custom-textual-input/output-port) (ai5361 core-prim . make-custom-textual-input-port) (ai5360 core-prim . make-custom-binary-output-port) (ai535f core-prim . make-custom-binary-input/output-port) (ai535e core-prim . make-custom-binary-input-port) (ai535d core-prim . make-bytevector) (ai535c core-prim . lookahead-u8) (ai535b core-prim . lookahead-char) (ai4dfe core-prim . i/o-write-error?) (ai4de9 core-prim . i/o-read-error?) (ai4ea1 core-prim . i/o-port-error?) (ai4e17 core-prim . i/o-invalid-position-error?) (ai4e32 core-prim . i/o-filename-error?) (ai4e49 core-prim . i/o-file-protection-error?) (ai4e5e core-prim . i/o-file-is-read-only-error?) (ai4e88 core-prim . i/o-file-does-not-exist-error?) (ai4e73 core-prim . i/o-file-already-exists-error?) (ai4dd4 core-prim . i/o-error?) (ai4e19 core-prim . i/o-error-position) (ai4ea3 core-prim . i/o-error-port) (ai4e34 core-prim . i/o-error-filename) (ai4ed1 core-prim . i/o-encoding-error?) (ai4ed3 core-prim . i/o-encoding-error-char) (ai4eb8 core-prim . i/o-decoding-error?) (ai535a core-prim . get-u8) (ai5359 core-prim . get-string-n!) (ai5358 core-prim . get-string-n) (ai5357 core-prim . get-string-all) (ai5356 core-prim . get-line) (ai5355 core-prim . get-datum) (ai5354 core-prim . get-char) (ai5353 core-prim . get-bytevector-some) (ai5352 core-prim . get-bytevector-n!) (ai5351 core-prim . get-bytevector-n) (ai5350 core-prim . get-bytevector-all) (ai534f core-prim . flush-output-port) (ai534e core-prim . close-port) (ai31ae core-prim . scheme-report-environment) (ai534d core-prim . quotient) (ai31ac core-prim . null-environment) (ai534c core-prim . remainder) (ai534b core-prim . modulo) (ai534a core-prim . inexact->exact) (ai5349 core-prim . force) (ai5348 core-prim . exact->inexact) (ai5347 core-prim . make-promise) (ai5346 core-prim . exit) (ai500a core-prim . command-line) (ai5345 core-prim . string-fill!) (ai5344 core-prim . string-set!) (ai5343 core-prim . set-cdr!) (ai5342 core-prim . set-car!) (ai5341 core-prim . remove) (ai5340 core-prim . remv) (ai533f core-prim . remp) (ai533e core-prim . remq) (ai533d core-prim . partition) (ai533c core-prim . memv) (ai533b core-prim . memq) (ai533a core-prim . memp) (ai5339 core-prim . member) (ai5338 core-prim . exists) (ai5337 core-prim . for-all) (ai5336 core-prim . fold-right) (ai5335 core-prim . fold-left) (ai5334 core-prim . find) (ai5333 core-prim . filter) (ai5332 core-prim . cons*) (ai5331 core-prim . assv) (ai5330 core-prim . assq) (ai532f core-prim . assp) (ai532e core-prim . assoc) (ai532d core-prim . call-with-string-output-port) (ai532c core-prim . call-with-port) (ai532b core-prim . call-with-bytevector-output-port) (ai532a core-prim . bytevector->string) (ai5329 core-prim . buffer-mode?) (ai5328 core-prim . binary-port?) (ai5327 core-prim . with-exception-handler) (ai5326 core-prim . raise-continuable) (ai5325 core-prim . raise) (ai31b2 core-prim . eval) (ai31aa core-prim . environment) (ai5324 core-prim . make-enumeration) (ai5323 core-prim . enum-set=?) (ai5322 core-prim . enum-set-universe) (ai5321 core-prim . enum-set-union) (ai5320 core-prim . enum-set-subset?) (ai531f core-prim . enum-set-projection) (ai531e core-prim . enum-set-member?) (ai531d core-prim . enum-set-intersection) (ai531c core-prim . enum-set-indexer) (ai531b core-prim . enum-set-difference) (ai531a core-prim . enum-set-constructor) (ai5319 core-prim . enum-set-complement) (ai5318 core-prim . enum-set->list) (ai4d48 core-prim . who-condition?) (ai4cc0 core-prim . warning?) (ai4cff core-prim . violation?) (ai4dbf core-prim . undefined-violation?) (ai4da6 core-prim . syntax-violation?) (ai4daa core-prim . syntax-violation-subform) (ai4da8 core-prim . syntax-violation-form) (ai31d2 core-prim . syntax-violation) (ai5317 core-prim . simple-conditions) (ai4cd5 core-prim . serious-condition?) (ai4d5f core-prim . non-continuable-violation?) (ai4ca9 core-prim . message-condition?) (ai4d44 core-prim . make-who-condition) (ai4cbe core-prim . make-warning) (ai4cfd core-prim . make-violation) (ai4dbd core-prim . make-undefined-violation) (ai4da0 core-prim . make-syntax-violation) (ai4cd3 core-prim . make-serious-condition) (ai4d5d core-prim . make-non-continuable-violation) (ai4ca5 core-prim . make-message-condition) (ai4d87 core-prim . make-lexical-violation) (ai4d29 core-prim . make-irritants-condition) (ai4d72 core-prim . make-implementation-restriction-violation) (ai4ce8 core-prim . make-error) (ai4d12 core-prim . make-assertion-violation) (ai4d89 core-prim . lexical-violation?) (ai4d2d core-prim . irritants-condition?) (ai4d74 core-prim . implementation-restriction-violation?) (ai4cea core-prim . error?) (ai4d4a core-prim . condition-who) (ai5316 core-prim . condition-predicate) (ai4cab core-prim . condition-message) (ai4d2f core-prim . condition-irritants) (ai5315 core-prim . condition-accessor) (ai5314 core-prim . condition) (ai4d14 core-prim . assertion-violation?) (ai5313 core-prim . condition?) (ai5312 core-prim . utf32->string) (ai5311 core-prim . utf16->string) (ai5310 core-prim . utf8->string) (ai530f core-prim . uint-list->bytevector) (ai530e core-prim . u8-list->bytevector) (ai530d core-prim . string->utf8) (ai530c core-prim . string->utf32) (ai530b core-prim . string->utf16) (ai530a core-prim . sint-list->bytevector) (ai5309 core-prim . native-endianness) (ai5308 core-prim . bytevector?) (ai5307 core-prim . bytevector=?) (ai5306 core-prim . bytevector-uint-set!) (ai5305 core-prim . bytevector-uint-ref) (ai5304 core-prim . bytevector-u8-set!) (ai5303 core-prim . bytevector-u8-ref) (ai5302 core-prim . bytevector-u64-set!) (ai5301 core-prim . bytevector-u64-ref) (ai5300 core-prim . bytevector-u64-native-set!) (ai52ff core-prim . bytevector-u64-native-ref) (ai52fe core-prim . bytevector-u32-set!) (ai52fd core-prim . bytevector-u32-ref) (ai52fc core-prim . bytevector-u32-native-set!) (ai52fb core-prim . bytevector-u32-native-ref) (ai52fa core-prim . bytevector-u16-set!) (ai52f9 core-prim . bytevector-u16-ref) (ai52f8 core-prim . bytevector-u16-native-set!) (ai52f7 core-prim . bytevector-u16-native-ref) (ai52f6 core-prim . bytevector-sint-set!) (ai52f5 core-prim . bytevector-sint-ref) (ai52f4 core-prim . bytevector-s8-set!) (ai52f3 core-prim . bytevector-s8-ref) (ai52f2 core-prim . bytevector-s64-set!) (ai52f1 core-prim . bytevector-s64-ref) (ai52f0 core-prim . bytevector-s64-native-set!) (ai52ef core-prim . bytevector-s64-native-ref) (ai52ee core-prim . bytevector-s32-set!) (ai52ed core-prim . bytevector-s32-ref) (ai52ec core-prim . bytevector-s32-native-set!) (ai52eb core-prim . bytevector-s32-native-ref) (ai52ea core-prim . bytevector-s16-set!) (ai52e9 core-prim . bytevector-s16-ref) (ai52e8 core-prim . bytevector-s16-native-set!) (ai52e7 core-prim . bytevector-s16-native-ref) (ai52e6 core-prim . bytevector-length) (ai52e5 core-prim . bytevector-ieee-single-ref) (ai52e4 core-prim . bytevector-ieee-single-set!) (ai52e3 core-prim . bytevector-ieee-single-native-set!) (ai52e2 core-prim . bytevector-ieee-single-native-ref) (ai52e1 core-prim . bytevector-ieee-double-set!) (ai52e0 core-prim . bytevector-ieee-double-ref) (ai52df core-prim . bytevector-ieee-double-native-set!) (ai52de core-prim . bytevector-ieee-double-native-ref) (ai52dd core-prim . bytevector-fill!) (ai52dc core-prim . bytevector-copy!) (ai52db core-prim . bytevector-copy) (ai52da core-prim . bytevector->uint-list) (ai52d9 core-prim . bytevector->u8-list) (ai52d8 core-prim . bytevector->sint-list) (ai4efd core-prim . no-nans-violation?) (ai4ee8 core-prim . no-infinities-violation?) (ai4efb core-prim . make-no-nans-violation) (ai4ee6 core-prim . make-no-infinities-violation) (ai52d7 core-prim . real->flonum) (ai52d6 core-prim . flzero?) (ai52d5 core-prim . fltruncate) (ai52d4 core-prim . fltan) (ai52d3 core-prim . flsqrt) (ai52d2 core-prim . flsin) (ai52d1 core-prim . flround) (ai52d0 core-prim . flpositive?) (ai52cf core-prim . flonum?) (ai52ce core-prim . flodd?) (ai52cd core-prim . flnumerator) (ai52cc core-prim . flnegative?) (ai52cb core-prim . flnan?) (ai52ca core-prim . flmod0) (ai52c9 core-prim . flmod) (ai52c8 core-prim . flmin) (ai52c7 core-prim . flmax) (ai52c6 core-prim . fllog) (ai52c5 core-prim . flinteger?) (ai52c4 core-prim . flinfinite?) (ai52c3 core-prim . flfloor) (ai52c2 core-prim . flfinite?) (ai52c1 core-prim . flexpt) (ai52c0 core-prim . flexp) (ai52bf core-prim . fleven?) (ai52be core-prim . fldiv0-and-mod0) (ai52bd core-prim . fldiv0) (ai52bc core-prim . fldiv-and-mod) (ai52bb core-prim . fldiv) (ai52ba core-prim . fldenominator) (ai52b9 core-prim . flcos) (ai52b8 core-prim . flceiling) (ai52b7 core-prim . flatan) (ai52b6 core-prim . flasin) (ai52b5 core-prim . flacos) (ai52b4 core-prim . flabs) (ai52b3 core-prim . fl>?) (ai52b2 core-prim . fl>=?) (ai52b1 core-prim . fl=?) (ai52b0 core-prim . fl<?) (ai52af core-prim . fl<=?) (ai52ae core-prim . fl/) (ai52ad core-prim . fl-) (ai52ac core-prim . fl+) (ai52ab core-prim . fl*) (ai52aa core-prim . fixnum->flonum) (ai52a9 core-prim . fxzero?) (ai52a8 core-prim . fxxor) (ai52a7 core-prim . fxrotate-bit-field) (ai52a6 core-prim . fxreverse-bit-field) (ai52a5 core-prim . fxpositive?) (ai52a4 core-prim . fxodd?) (ai52a3 core-prim . fxnot) (ai52a2 core-prim . fxnegative?) (ai52a1 core-prim . fxmod0) (ai52a0 core-prim . fxmod) (ai529f core-prim . fxmin) (ai529e core-prim . fxmax) (ai529d core-prim . fxlength) (ai529c core-prim . fxior) (ai529b core-prim . fxif) (ai529a core-prim . fxfirst-bit-set) (ai5299 core-prim . fxeven?) (ai5298 core-prim . fxdiv0-and-mod0) (ai5297 core-prim . fxdiv0) (ai5296 core-prim . fxdiv-and-mod) (ai5295 core-prim . fxdiv) (ai5294 core-prim . fxcopy-bit-field) (ai5293 core-prim . fxcopy-bit) (ai5292 core-prim . fxbit-set?) (ai5291 core-prim . fxbit-field) (ai5290 core-prim . fxbit-count) (ai528f core-prim . fxarithmetic-shift-right) (ai528e core-prim . fxarithmetic-shift-left) (ai528d core-prim . fxarithmetic-shift) (ai528c core-prim . fxand) (ai528b core-prim . fx>?) (ai528a core-prim . fx>=?) (ai5289 core-prim . fx=?) (ai5288 core-prim . fx<?) (ai5287 core-prim . fx<=?) (ai5286 core-prim . fx-/carry) (ai5285 core-prim . fx-) (ai5284 core-prim . fx+/carry) (ai5283 core-prim . fx+) (ai5282 core-prim . fx*/carry) (ai5281 core-prim . fx*) (ai5280 core-prim . greatest-fixnum) (ai527f core-prim . least-fixnum) (ai527e core-prim . fixnum-width) (ai527d core-prim . fixnum?) (ai527c core-prim . bitwise-rotate-bit-field) (ai527b core-prim . bitwise-reverse-bit-field) (ai527a core-prim . bitwise-length) (ai5279 core-prim . bitwise-if) (ai5278 core-prim . bitwise-first-bit-set) (ai5277 core-prim . bitwise-copy-bit-field) (ai5276 core-prim . bitwise-copy-bit) (ai5275 core-prim . bitwise-bit-set?) (ai5274 core-prim . bitwise-bit-field) (ai5273 core-prim . bitwise-bit-count) (ai5272 core-prim . bitwise-xor) (ai5271 core-prim . bitwise-ior) (ai5270 core-prim . bitwise-and) (ai526f core-prim . bitwise-not) (ai526e core-prim . bitwise-arithmetic-shift-right) (ai526d core-prim . bitwise-arithmetic-shift-left) (ai526c core-prim . bitwise-arithmetic-shift) (ai526b core-prim . zero?) (ai526a core-prim . vector?) (ai5269 core-prim . vector-set!) (ai5268 core-prim . vector-ref) (ai5267 core-prim . vector-map) (ai5266 core-prim . vector-length) (ai5265 core-prim . vector-for-each) (ai5264 core-prim . vector-fill!) (ai5263 core-prim . vector->list) (ai5262 core-prim . vector) (ai5261 core-prim . values) (ai5260 core-prim . truncate) (ai525f core-prim . tan) (ai525e core-prim . symbol?) (ai525d core-prim . symbol=?) (ai525c core-prim . symbol->string) (ai525b core-prim . substring) (ai525a core-prim . string?) (ai5259 core-prim . string>?) (ai5258 core-prim . string>=?) (ai5257 core-prim . string=?) (ai5256 core-prim . string<?) (ai5255 core-prim . string<=?) (ai5254 core-prim . string-ref) (ai5253 core-prim . string-length) (ai5252 core-prim . string-for-each) (ai5251 core-prim . string-copy) (ai5250 core-prim . string-append) (ai524f core-prim . string->symbol) (ai524e core-prim . string->number) (ai524d core-prim . string->list) (ai524c core-prim . string) (ai524b core-prim . sqrt) (ai524a core-prim . sin) (ai5249 core-prim . round) (ai5248 core-prim . reverse) (ai5247 core-prim . real?) (ai5246 core-prim . real-valued?) (ai5245 core-prim . real-part) (ai5244 core-prim . rationalize) (ai5243 core-prim . rational?) (ai5242 core-prim . rational-valued?) (ai5241 core-prim . procedure?) (ai5240 core-prim . positive?) (ai523f core-prim . pair?) (ai523e core-prim . odd?) (ai523d core-prim . numerator) (ai523c core-prim . number?) (ai523b core-prim . number->string) (ai523a core-prim . null?) (ai5239 core-prim . not) (ai5238 core-prim . negative?) (ai5237 core-prim . nan?) (ai5236 core-prim . min) (ai5235 core-prim . max) (ai5234 core-prim . map) (ai5233 core-prim . make-vector) (ai5232 core-prim . make-string) (ai5231 core-prim . make-rectangular) (ai5230 core-prim . make-polar) (ai522f core-prim . magnitude) (ai522e core-prim . log) (ai522d core-prim . list?) (ai522c core-prim . list-tail) (ai522b core-prim . list-ref) (ai522a core-prim . list->vector) (ai5229 core-prim . list->string) (ai5228 core-prim . list) (ai5227 core-prim . length) (ai5226 core-prim . lcm) (ai5225 core-prim . integer?) (ai5224 core-prim . integer-valued?) (ai5223 core-prim . integer->char) (ai5222 core-prim . infinite?) (ai5221 core-prim . inexact?) (ai5220 core-prim . inexact) (ai521f core-prim . imag-part) (ai521e core-prim . gcd) (ai521d core-prim . for-each) (ai521c core-prim . floor) (ai521b core-prim . finite?) (ai521a core-prim . expt) (ai5219 core-prim . exp) (ai5218 core-prim . exact?) (ai5217 core-prim . exact-integer-sqrt) (ai5216 core-prim . exact) (ai5215 core-prim . even?) (ai5214 core-prim . error) (ai5213 core-prim . eqv?) (ai5212 core-prim . equal?) (ai5211 core-prim . eq?) (ai5210 core-prim . dynamic-wind) (ai520f core-prim . div0-and-mod0) (ai520e core-prim . mod0) (ai520d core-prim . div0) (ai520c core-prim . div-and-mod) (ai520b core-prim . mod) (ai520a core-prim . div) (ai5209 core-prim . denominator) (ai5208 core-prim . cos) (ai5207 core-prim . cons) (ai5206 core-prim . complex?) (ai5205 core-prim . char?) (ai5204 core-prim . char>?) (ai5203 core-prim . char>=?) (ai5202 core-prim . char=?) (ai5201 core-prim . char<?) (ai5200 core-prim . char<=?) (ai51ff core-prim . char->integer) (ai51fe core-prim . ceiling) (ai51fd core-prim . call-with-values) (ai51fc core-prim . call/cc) (ai51fb core-prim . call-with-current-continuation) (ai51fa core-prim . cddddr) (ai51f9 core-prim . cdddar) (ai51f8 core-prim . cddadr) (ai51f7 core-prim . cddaar) (ai51f6 core-prim . cdaddr) (ai51f5 core-prim . cdadar) (ai51f4 core-prim . cdaadr) (ai51f3 core-prim . cdaaar) (ai51f2 core-prim . cadddr) (ai51f1 core-prim . caddar) (ai51f0 core-prim . cadadr) (ai51ef core-prim . cadaar) (ai51ee core-prim . caaddr) (ai51ed core-prim . caadar) (ai51ec core-prim . caaadr) (ai51eb core-prim . caaaar) (ai51ea core-prim . cdddr) (ai51e9 core-prim . cddar) (ai51e8 core-prim . cdadr) (ai51e7 core-prim . cdaar) (ai51e6 core-prim . caddr) (ai51e5 core-prim . cadar) (ai51e4 core-prim . caadr) (ai51e3 core-prim . caaar) (ai51e2 core-prim . cddr) (ai51e1 core-prim . cdar) (ai51e0 core-prim . cadr) (ai51df core-prim . caar) (ai51de core-prim . cdr) (ai51dd core-prim . car) (ai51dc core-prim . boolean?) (ai51db core-prim . boolean=?) (ai51da core-prim . atan) (ai51d9 core-prim . assertion-violation) (ai31cc core-prim . assertion-error) (ai51d8 core-prim . asin) (ai51d7 core-prim . apply) (ai51d6 core-prim . append) (ai51d5 core-prim . angle) (ai51d4 core-prim . acos) (ai51d3 core-prim . abs) (ai51d2 core-prim . /) (ai51d1 core-prim . *) (ai51d0 core-prim . -) (ai51cf core-prim . +) (ai51ce core-prim . >=) (ai51cd core-prim . >) (ai51cc core-prim . =) (ai51cb core-prim . <=) (ai51ca core-prim . <) (ai51c9 core-prim . library) (ai51c8 $core-rtd &no-nans-rtd &no-nans-rcd) (ai51c7 $core-rtd &no-infinities-rtd &no-infinities-rcd) (ai51c6 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (ai51c5 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (ai51c4 $core-rtd &i/o-port-rtd &i/o-port-rcd) (ai51c3 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (ai51c2 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (ai51c1 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (ai51c0 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (ai51bf $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (ai51be $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (ai51bd $core-rtd &i/o-write-rtd &i/o-write-rcd) (ai51bc $core-rtd &i/o-read-rtd &i/o-read-rcd) (ai51bb $core-rtd &i/o-rtd &i/o-rcd) (ai51ba $core-rtd &undefined-rtd &undefined-rcd) (ai51b9 $core-rtd &syntax-rtd &syntax-rcd) (ai51b8 $core-rtd &lexical-rtd &lexical-rcd) (ai51b7 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (ai51b6 $core-rtd &non-continuable-rtd &non-continuable-rcd) (ai51b5 $core-rtd &who-rtd &who-rcd) (ai51b4 $core-rtd &irritants-rtd &irritants-rcd) (ai51b3 $core-rtd &assertion-rtd &assertion-rcd) (ai51b2 $core-rtd &violation-rtd &violation-rcd) (ai51b1 $core-rtd &error-rtd &error-rcd) (ai51b0 $core-rtd &serious-rtd &serious-rcd) (ai51af $core-rtd &warning-rtd &warning-rcd) (ai51ae $core-rtd &message-rtd &message-rcd) (ai51ad $core-rtd &condition-rtd &condition-rcd) (ai51ac macro . define-condition-type) (ai51ab macro . define-enumeration) (ai51aa macro . define-record-type) (ai51a9 macro . parent-rtd) (ai51a8 macro . nongenerative) (ai51a7 macro . opaque) (ai51a6 macro . sealed) (ai51a5 macro . protocol) (ai51a4 macro . parent) (ai51a3 macro . immutable) (ai51a2 macro . mutable) (ai51a1 macro . fields) (ai51a0 macro . error-handling-mode) (ai519f macro . file-options) (ai519e macro . buffer-mode) (ai519d macro . eol-style) (ai519c macro . guard) (ai519b macro . trace-define) (ai519a macro . trace-lambda) (ai5199 macro . unsyntax-splicing) (ai5198 macro . unsyntax) (ai5197 macro . unquote-splicing) (ai5196 macro . unquote) (ai5195 macro . _) (ai5194 macro . else) (ai5193 macro . =>) (ai5192 macro . ...) (ai5191 macro . assert) (ai5190 macro . endianness) (ai518f macro . delay) (ai518e macro . time) (ai518d macro . do) (ai518c macro . cond) (ai518b macro . let*) (ai518a macro . let*-values) (ai5189 macro . let-values) (ai5188 macro . identifier-syntax) (ai5187 macro . with-syntax) (ai5186 macro . quasisyntax) (ai5185 macro . quasiquote) (ai5184 macro . syntax-rules) (ai5183 macro . include) (ai5182 macro . define-struct) (ai5181 core-macro . record-constructor-descriptor) (ai5180 core-macro . record-type-descriptor) (ai517f macro . case) (ai517e macro . parameterize) (ai517d macro . unless) (ai517c macro . when) (ai517b core-macro . or) (ai517a core-macro . and) (ai5179 core-macro . if) (ai5178 core-macro . let) (ai5177 core-macro . letrec*) (ai5176 core-macro . letrec) (ai5175 core-macro . type-descriptor) (ai5174 core-macro . case-lambda) (ai5173 core-macro . lambda) (ai5172 core-macro . syntax) (ai5171 core-macro . syntax-case) (ai5170 core-macro . quote) (ai516f core-macro . foreign-call) (ai516e letrec-syntax) (ai516d let-syntax) (ai516c set!) (ai516b import) (ai516a begin) (ai5169 module) (ai5168 define-syntax) (ai5167 define)) values values '#f '#f '#f '#f) (ai2cff@ai2b3b@install-library 'ai54b9 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . ai5498) (eval-core . ai5497) (set-symbol-value! . ai5496) (symbol-value . ai5495) (gensym . ai5494) (void . ai5493)) '() values values '#f '#f '#f '#f) (ai2cff@ai2b3b@install-library 'ai54ba '(mosh) '() '() '() '() '((set-symbol-value! . ai5496) (symbol-value . ai5495) (gensym . ai5494) (regexp? . ai5491) (read-line . ai5490) (ungensym . ai548e) (alist->eq-hash-table . ai548d) (assoc-ref . ai548c) (print . ai548b) (format . ai548a) (host-os . ai5489) (library-path . ai2b1a) (standard-library-path . ai5488) (file-newer? . ai5487) (stat-mtime . ai5486) (digit->integer . ai5481) (call-with-string-input-port . ai5480) (call-with-string-io . ai547f) (string-split . ai547e) (bytevector-for-each . ai547d) (string->regexp . ai547c) (rxmatch . ai547b) (regexp-replace-all . ai547a) (hashtable-for-each . ai5479) (set-current-directory! . ai5474) (expand-path . ai5473) (current-directory . ai5472) (p . ai542f) (get-timeofday . ai5416) (get-command-line . ai5415) (sys-display . ai5414) (whereis . ai5413) (register . ai5412) (vm-join! . ai5411) (vm-set-value! . ai5410) (vm? . ai540f) (main-vm? . ai540e) (vm-eval . ai540d) (vm-self . ai540c) (vm-start! . ai540b) (make-vm . ai540a) (mutex-try-lock! . ai5409) (mutex-unlock! . ai5408) (mutex-lock! . ai5407) (mutex? . ai5406) (make-mutex . ai5405) (condition-variable-notify-all! . ai5404) (condition-variable-notify! . ai5403) (condition-variable-wait! . ai5402) (make-condition-variable . ai5401) (mosh-executable-path . ai5400) (make-file-options . ai53ff) (for-each-with-index . ai53fe) (source-info . ai53fd) (make-compiler-instruction . ai53f8) (make-instruction . ai53f7) (set-source-info! . ai53f6) (bignum? . ai53f5) (fast-equal? . ai53f4) (fasl-read . ai53f3) (fasl-write . ai53f2) (time-usage . ai53f1) (os-constant . ai53f0) (time . ai518e) (include . ai5183)) '() values values '#f '#f '#f '#f) (ai2cff@ai2b3b@install-library 'ai54bb '(system) '() '() '() '() '((gensym-prefix-set! . ai548f) (write-to-file . ai5485) (file->sexp-list . ai5484) (file->list . ai5483) (file->string . ai5482) (mosh-cache-dir . ai2904) (call-process . ai5478) (local-tz-offset . ai5477) (microseconds . ai5476) (directory-list . ai5475) (expand-path . ai5473) (%spawn . ai5471) (%waitpid . ai5470) (simple-struct-name . ai546f) (simple-struct-set! . ai546e) (simple-struct-ref . ai546d) (make-simple-struct . ai546c) (simple-struct? . ai546b) (pointer-ref-c-int64 . ai546a) (pointer-ref-c-int32 . ai5469) (pointer-ref-c-int16 . ai5468) (pointer-ref-c-int8 . ai5467) (pointer-ref-c-uint64 . ai5466) (pointer-ref-c-uint32 . ai5465) (pointer-ref-c-uint16 . ai5464) (pointer-ref-c-uint8 . ai5463) (pointer-set-c-uint64! . ai5462) (pointer-set-c-uint32! . ai5461) (pointer-set-c-uint16! . ai5460) (pointer-set-c-uint8! . ai545f) (pointer-set-c-int64! . ai545e) (pointer-set-c-int32! . ai545d) (pointer-set-c-int16! . ai545c) (pointer-set-c-int8! . ai545b) (pointer-set-c-pointer! . ai545a) (pointer-set-c-double! . ai5459) (pointer-set-c-float! . ai5458) (pointer-set-c-long-long! . ai5457) (pointer-set-c-long! . ai5456) (pointer-set-c-int! . ai5455) (pointer-set-c-short! . ai5454) (pointer-set-c-char! . ai5453) (pointer-ref-c-pointer . ai5452) (pointer-ref-c-double . ai5451) (pointer-ref-c-float . ai5450) (pointer-ref-c-unsigned-long-long . ai544f) (pointer-ref-c-signed-long-long . ai544e) (pointer-ref-c-unsigned-long . ai544d) (pointer-ref-c-signed-long . ai544c) (pointer-ref-c-unsigned-int . ai544b) (pointer-ref-c-signed-int . ai544a) (pointer-ref-c-unsigned-short . ai5449) (pointer-ref-c-signed-short . ai5448) (pointer-ref-c-unsigned-char . ai5447) (pointer-ref-c-signed-char . ai5446) (pointer->integer . ai5445) (integer->pointer . ai5444) (pointer? . ai5443) (shared-errno . ai5442) (get-c-address . ai5441) (set-jit-compiled! . ai5440) (jit-compiled? . ai543f) (obj->integer . ai543e) (u8-list->c-procedure . ai543d) (%ffi-free-c-callback-trampoline . ai543c) (%ffi-make-c-callback-trampoline . ai543b) (%ffi-free . ai543a) (%ffi-malloc . ai5439) (%ffi-supported? . ai5438) (%ffi-pointer->string . ai5437) (%ffi-call . ai5436) (%ffi-lookup . ai5435) (%ffi-open . ai5434) (null-terminated-utf8->string . ai5433) (null-terminated-bytevector->string . ai5432) (%fork . ai5431) (%pipe . ai5430) (open-output-string . ai542e) (get-output-string . ai542d) (file-stat-ctime . ai542c) (file-stat-atime . ai542b) (file-stat-mtime . ai542a) (file-size-in-bytes . ai5429) (file-writable? . ai5428) (file-executable? . ai5427) (file-readable? . ai5426) (file-regular? . ai5425) (file-symbolic-link? . ai5424) (file-directory? . ai5423) (create-symbolic-link . ai5422) (rename-file . ai5421) (delete-directory . ai5420) (create-directory . ai541f) (create-mosh-cache-dir . ai541e) (get-environment-variables . ai541d) (current-exception-handler . ai541c) (get-environment-variable . ai541b) (join-wraps . ai541a) (id->real-label . ai5419) (same-marks? . ai5418) (same-marks*? . ai5417) (instruction? . ai53fc) (instruction->integer . ai53fb) (instruction->symbol . ai53fa) (closure->list . ai53f9) (disasm . ai53ef) (make-parameter . ai2902) (socket-port . ai53ee) (socket-shutdown . ai53ed) (socket-close . ai53ec) (socket-send . ai53eb) (socket-recv! . ai53ea) (socket-recv . ai53e9) (make-server-socket . ai53e8) (make-client-socket . ai53e7) (socket-accept . ai53e6) (socket? . ai53e5) (parameterize . ai517e)) '() values values '#f '#f '#f '#f)))
(begin (set! ai4ff7@ref (unspecified)) (set! ai4ff9@x* (unspecified)) (set! ai4ffb@add-library-path! (unspecified)) (set! ai4ffd@parse-and-add-library-path (unspecified)) (set! ai4fff@rpad (unspecified)) (set! ai5001@condition-printer (unspecified)) (set! ai5003@record->field-alist (unspecified)) (set! ai5005@map-with-index (unspecified)) (set! ai5007@repl (unspecified)) (set! ai5009@trace-printer (unspecified)) (set! ai500b@command-line (unspecified)) (set! ai500d@local-library-path (unspecified)) (set! ai500f@load/args (unspecified)) (set! ai5011@load (unspecified)) (set! ai5013@ironscheme-build (unspecified)) (set! ai5015@eval-top-level (unspecified)) (set! ai5017@compile-system-libraries (unspecified)) (set! ai5019@compile (unspecified)) (set! ai501b@compile->closure (unspecified)) (set! ai501d@pre-compile-r6rs-file (unspecified)) (set! ai501f@load-r6rs-top-level (unspecified)) (set! ai5021@load-r6rs-top-level-sexp (unspecified)) (set! ai5023@prefix-inc (unspecified)) (set! ai5025@prefix-inc! (unspecified)) (set! ai4ff7@ref (lambda (ai5060@rtd ai5061@i ai5062@x) (let ((ai5066@val ((record-accessor ai5060@rtd ai5061@i) ai5062@x))) (if (symbol? ai5066@val) (ungensym ai5066@val) ai5066@val)))) (set! ai514e@ai4ff7@ref ai4ff7@ref) (set! ai4ff9@x* '()) (set! ai514f@ai4ff9@x* ai4ff9@x*) (set! ai4ffb@add-library-path! (lambda (ai5068@path) (ai2cef@ai2b1b@library-path (append (ai2cef@ai2b1b@library-path) (list ai5068@path))))) (set! ai5150@ai4ffb@add-library-path! ai4ffb@add-library-path!) (set! ai4ffd@parse-and-add-library-path (lambda (ai506a@paths ai506b@message) (let ((ai506f@separator '#f)) (begin (set! ai506f@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((ai5070@t ai506a@paths)) (if ai5070@t ((lambda (ai5072@paths) (for-each (lambda (ai5074@path) (if (file-exists? ai5074@path) (ai4ffb@add-library-path! (expand-path ai5074@path)) (format (current-error-port) ai506b@message ai5074@path))) (string-split ai5072@paths ai506f@separator))) ai5070@t) (void))))))) (set! ai5151@ai4ffd@parse-and-add-library-path ai4ffd@parse-and-add-library-path) (set! ai4fff@rpad (lambda (ai5076@str ai5077@pad ai5078@n) (let ((ai507c@rest (- ai5078@n (string-length (format '"~a" ai5076@str))))) (let ai5082@loop ((ai507e@rest ai507c@rest) (ai507f@ret (format '"~a" ai5076@str))) (if (<= ai507e@rest '0) ai507f@ret (ai5082@loop (- ai507e@rest '1) (string-append ai507f@ret ai5077@pad))))))) (set! ai5152@ai4fff@rpad ai4fff@rpad) (set! ai5001@condition-printer (lambda (ai5084@e ai5085@port) (let ((ai5089@max-condition-len '#f)) (begin (set! ai5089@max-condition-len (apply max (map (lambda (ai509a@c) (string-length (symbol->string (record-type-name (record-rtd ai509a@c))))) (simple-conditions ai5084@e)))) (begin (display '" Condition components:\n" ai5085@port) (for-each-with-index (lambda (ai508a@i ai508b@x) (let ((ai508e@rtd (record-rtd ai508b@x)) (ai508f@fields-alist (ai5003@record->field-alist ai508b@x))) (begin (format ai5085@port '" ~d. ~a" (+ ai508a@i '1) (ai4fff@rpad (symbol->string (record-type-name ai508e@rtd)) '" " ai5089@max-condition-len)) (if (null? ai508f@fields-alist) (newline ai5085@port) (void)) (let ai5096@loop ((ai5092@first '#t) (ai5093@fields-alist ai508f@fields-alist)) (if (null? ai5093@fields-alist) '() (let ((ai5098@field (car ai5093@fields-alist))) (begin (if (not ai5092@first) (display (ai4fff@rpad '"" '" " (+ '4 ai5089@max-condition-len)) ai5085@port) (void)) (display '"       " ai5085@port) (display (car ai5098@field) ai5085@port) (display '": " ai5085@port) (write (cdr ai5098@field) ai5085@port) (newline ai5085@port) (ai5096@loop '#f (cdr ai5093@fields-alist))))))))) (simple-conditions ai5084@e))))))) (set! ai5153@ai5001@condition-printer ai5001@condition-printer) (set! ai5003@record->field-alist (lambda (ai509c@r) (let ((ai509f@ref '#f)) (begin (set! ai509f@ref (lambda (ai50aa@rtd ai50ab@i ai50ac@x) (let ((ai50b0@val ((record-accessor ai50aa@rtd ai50ab@i) ai50ac@x))) (if (symbol? ai50b0@val) (ungensym ai50b0@val) ai50b0@val)))) (let ai50a4@loop ((ai50a0@ret '()) (ai50a1@rtd (record-rtd ai509c@r))) (if ai50a1@rtd (ai50a4@loop (append ai50a0@ret (ai5005@map-with-index (lambda (ai50a6@i ai50a7@field) (cons ai50a7@field (ai509f@ref ai50a1@rtd ai50a6@i ai509c@r))) (vector->list (record-type-field-names ai50a1@rtd)))) (record-type-parent ai50a1@rtd)) ai50a0@ret)))))) (set! ai5154@ai5003@record->field-alist ai5003@record->field-alist) (set! ai5005@map-with-index (lambda (ai50b2@proc ai50b3@lst) (let ai50bc@loop ((ai50b6@i '0) (ai50b7@lst ai50b3@lst) (ai50b8@ret '())) (if (null? ai50b7@lst) (reverse ai50b8@ret) (ai50bc@loop (+ ai50b6@i '1) (cdr ai50b7@lst) (cons (ai50b2@proc ai50b6@i (car ai50b7@lst)) ai50b8@ret)))))) (set! ai5155@ai5005@map-with-index ai5005@map-with-index) (set! ai5007@repl (lambda ai50be@x (let ((ai50c1@rec '#f)) (begin (set! ai50c1@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (ai50c4@ai50c2) (lambda () (with-exception-handler (lambda (ai50c6@e) ((call/cc (lambda (ai50c8@ai50c3) (ai50c4@ai50c2 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? ai50c6@e) (ai5001@condition-printer ai50c6@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" ai50c6@e))) (ai50c8@ai50c3 (lambda () (raise-continuable ai50c6@e)))))))))) (lambda () (let ai50ce@loop ((ai50ca@line (get-line (current-input-port))) (ai50cb@accum '"")) (let ((ai50d1@parentheses-ok? '#f) (ai50d3@eval-string-print '#f)) (begin (set! ai50d1@parentheses-ok? (lambda (ai50d8@text) (let ai50e0@loop ((ai50da@chars (string->list ai50d8@text)) (ai50db@p0 '0) (ai50dc@p1 '0)) (if (null? ai50da@chars) (= '0 ai50db@p0 ai50dc@p1) (let ((ai50e2@t (car ai50da@chars))) (if (memv ai50e2@t '(#\()) (ai50e0@loop (cdr ai50da@chars) (+ ai50db@p0 '1) ai50dc@p1) (if (memv ai50e2@t '(#\))) (ai50e0@loop (cdr ai50da@chars) (- ai50db@p0 '1) ai50dc@p1) (if (memv ai50e2@t '(#\[)) (ai50e0@loop (cdr ai50da@chars) ai50db@p0 (+ ai50dc@p1 '1)) (if (memv ai50e2@t '(#\])) (ai50e0@loop (cdr ai50da@chars) ai50db@p0 (- ai50dc@p1 '1)) (ai50e0@loop (cdr ai50da@chars) ai50db@p0 ai50dc@p1)))))))))) (set! ai50d3@eval-string-print (lambda (ai50d6@text) (if (not (or (string=? '"\n" ai50d6@text) (= '0 (string-length ai50d6@text)))) (write (ai5015@eval-top-level (call-with-port (open-string-input-port ai50d6@text) read))) (void)))) (if (eof-object? ai50ca@line) (begin (ai50d3@eval-string-print ai50cb@accum) (exit)) (let ((ai50d4@current (string-append ai50cb@accum ai50ca@line))) (if (ai50d1@parentheses-ok? ai50d4@current) (ai50d3@eval-string-print ai50d4@current) (ai50ce@loop (get-line (current-input-port)) ai50d4@current))))))))))))) (newline) (ai50c1@rec)))) (ai50c1@rec))))) (set! ai5156@ai5007@repl ai5007@repl) (set! ai5009@trace-printer (ai2a25@ai2903@make-parameter write)) (set! ai5157@ai5009@trace-printer ai5009@trace-printer) (set! ai500b@command-line (ai2a25@ai2903@make-parameter (get-command-line))) (set! ai5158@ai500b@command-line ai500b@command-line) (set! ai500d@local-library-path (lambda (ai50e4@filename) (ai2cef@ai2b1b@library-path))) (set! ai5159@ai500d@local-library-path ai500d@local-library-path) (set! ai500f@load/args (lambda (ai50e6@filename . ai50e8@args) (begin (apply ai501f@load-r6rs-top-level ai50e6@filename 'load ai50e8@args) (void)))) (set! ai515a@ai500f@load/args ai500f@load/args) (set! ai5011@load (lambda (ai50ea@filename) (begin (apply ai501f@load-r6rs-top-level ai50ea@filename 'load (ai500b@command-line)) (void)))) (set! ai515b@ai5011@load ai5011@load) (set! ai5013@ironscheme-build (lambda () (ai5011@load '"ironscheme-buildscript.ss"))) (set! ai515c@ai5013@ironscheme-build ai5013@ironscheme-build) (set! ai5015@eval-top-level (lambda (ai50ec@x) (ai4c1d@ai31b3@eval ai50ec@x (ai4c34@ai31e1@interaction-environment)))) (set! ai515d@ai5015@eval-top-level ai5015@eval-top-level) (set! ai5017@compile-system-libraries (lambda () (ai5015@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! ai515e@ai5017@compile-system-libraries ai5017@compile-system-libraries) (set! ai5019@compile (lambda (ai50ee@filename) (ai501f@load-r6rs-top-level ai50ee@filename 'compile))) (set! ai515f@ai5019@compile ai5019@compile) (set! ai501b@compile->closure (lambda (ai50f0@filename) (ai501f@load-r6rs-top-level ai50f0@filename 'closure))) (set! ai5160@ai501b@compile->closure ai501b@compile->closure) (set! ai501d@pre-compile-r6rs-file (lambda (ai50f2@filename) (ai501f@load-r6rs-top-level ai50f2@filename 'compile))) (set! ai5161@ai501d@pre-compile-r6rs-file ai501d@pre-compile-r6rs-file) (set! ai501f@load-r6rs-top-level (lambda (ai50f4@filename ai50f5@how . ai50f8@args) (begin (ai2cef@ai2b1b@library-path (ai500d@local-library-path ai50f4@filename)) (let ((ai50fa@x* (with-input-from-file ai50f4@filename (lambda () (let ai50fc@f () (let ((ai50fe@x (ai2a17@ai28e7@read-annotated))) (if (eof-object? ai50fe@x) '() (cons ai50fe@x (ai50fc@f))))))))) (let ((ai5100@t ai50f5@how)) (if (memv ai5100@t '(closure)) (ai4c33@ai31df@pre-compile-r6rs-top-level ai50fa@x*) (if (memv ai5100@t '(load)) (begin (ai500b@command-line (cons ai50f4@filename (car ai50f8@args))) (ai2a26@ai2905@mosh-cache-dir (create-mosh-cache-dir)) (if (ai2a26@ai2905@mosh-cache-dir) (gensym-prefix-set! (ai5025@prefix-inc! (string-append (ai2a26@ai2905@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (ai5102@file) ((call/cc (lambda (ai5106@ai5104) (lambda () (with-exception-handler (lambda (ai5108@c2) ((call/cc (lambda (ai510a@ai5105) (ai5106@ai5104 (lambda () (if '#t '#t (ai510a@ai5105 (lambda () (raise-continuable ai5108@c2)))))))))) (lambda () (delete-file (string-append (ai2a26@ai2905@mosh-cache-dir) '"/" ai5102@file))))))))) (directory-list (ai2a26@ai2905@mosh-cache-dir))) (void)) (let ((ai510c@compiled (ai4c32@ai31dd@compile-r6rs-top-level ai50fa@x*))) (begin (if (and (ai2a26@ai2905@mosh-cache-dir) (not (symbol-value '%disable-acc))) (ai2cf3@ai2b23@serialize-all ai2a20@ai28f9@serialize-library ai2a7c@ai2a35@compile-core-expr) (void)) (ai510c@compiled)))) (if (memv ai5100@t '(compile)) (begin (ai4c32@ai31dd@compile-r6rs-top-level ai50fa@x*) (ai2cf3@ai2b23@serialize-all ai2a20@ai28f9@serialize-library ai2a7c@ai2a35@compile-core-expr)) (if '#f '#f (void)))))))))) (set! ai5162@ai501f@load-r6rs-top-level ai501f@load-r6rs-top-level) (set! ai5021@load-r6rs-top-level-sexp (lambda (ai510e@import-spec ai510f@thunk) (let ((ai511a@ai5113 ai2cef@ai2b1b@library-path) (ai511b@ai5115 ai2a26@ai2905@mosh-cache-dir) (ai511c@ai5117 (ai500d@local-library-path '"")) (ai511d@ai5119 (create-mosh-cache-dir))) (let ((ai5122@swap (lambda () (begin (let ((ai5124@t (ai511a@ai5113))) (begin (ai511a@ai5113 ai511c@ai5117) (set! ai511c@ai5117 ai5124@t))) (let ((ai5126@t (ai511b@ai5115))) (begin (ai511b@ai5115 ai511d@ai5119) (set! ai511d@ai5119 ai5126@t))))))) (dynamic-wind ai5122@swap (lambda () (begin (if (ai2a26@ai2905@mosh-cache-dir) (gensym-prefix-set! (ai5025@prefix-inc! (string-append (ai2a26@ai2905@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((ai512c@ai5129 ai500b@command-line) (ai512d@ai512b '())) (let ((ai5130@swap (lambda () (let ((ai5132@t (ai512c@ai5129))) (begin (ai512c@ai5129 ai512d@ai512b) (set! ai512d@ai512b ai5132@t)))))) (dynamic-wind ai5130@swap (lambda () ((ai4c32@ai31dd@compile-r6rs-top-level (list (cons 'import ai510e@import-spec) (list ai510f@thunk))))) ai5130@swap))))) ai5122@swap))))) (set! ai5163@ai5021@load-r6rs-top-level-sexp ai5021@load-r6rs-top-level-sexp) (set! ai5023@prefix-inc (lambda (ai5134@prefix-string) (let ((ai5136@prefix (symbol->string ai5134@prefix-string))) (let ((ai5138@len (string-length ai5136@prefix))) (let ai5140@loop ((ai513a@i (- ai5138@len '1)) (ai513b@carry? '#t) (ai513c@accum '())) (if (< ai513a@i '0) (string->symbol (list->string (if ai513b@carry? (cons '#\a ai513c@accum) ai513c@accum))) (if ai513b@carry? (let ((ai5142@next-integer (+ '1 (char->integer (string-ref ai5136@prefix ai513a@i))))) (if (= ai5142@next-integer '123) (ai5140@loop (- ai513a@i '1) '#f (cons '#\A ai513c@accum)) (if (= ai5142@next-integer '91) (ai5140@loop (- ai513a@i '1) '#t (cons '#\a ai513c@accum)) (ai5140@loop (- ai513a@i '1) '#f (cons (integer->char ai5142@next-integer) ai513c@accum))))) (ai5140@loop (- ai513a@i '1) '#f (cons (string-ref ai5136@prefix ai513a@i) ai513c@accum))))))))) (set! ai5164@ai5023@prefix-inc ai5023@prefix-inc) (set! ai5025@prefix-inc! (lambda (ai5144@file) (begin (if (not (file-exists? ai5144@file)) (call-with-output-file ai5144@file (lambda (ai5146@port) (write 'd ai5146@port))) (void)) (let ((ai5148@prefix (call-with-input-file ai5144@file read))) (if (main-vm?) (let ((ai514a@next-prefix (ai5023@prefix-inc ai5148@prefix))) (begin (call-with-port (open-file-output-port ai5144@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (ai514c@port) (write ai514a@next-prefix ai514c@port))) ai5148@prefix)) ai5148@prefix))))) (set! ai5165@ai5025@prefix-inc! ai5025@prefix-inc!) (begin (ai2cf4@ai2b25@current-precompiled-library-loader ai2a21@ai28fb@load-serialized-library) (set-symbol-value! 'load ai5011@load) (set-symbol-value! 'pre-compile-r6rs-file ai501d@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs ai5015@eval-top-level) (set-symbol-value! 'int-env-syms ai4c14@ai31a1@interaction-environment-symbols) (set-symbol-value! 'expanded2core ai2a7b@ai2a33@expanded->core) (set-symbol-value! 'trace-printer ai5009@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (ai5026@c) (condition (ai4f54@ai4d5e@make-non-continuable-violation) (ai4f4a@ai4d45@make-who-condition 'raise) (ai4f0e@ai4ca6@make-message-condition '"returned from non-continuable exception") (ai4f40@ai4d2a@make-irritants-condition (list ai5026@c))))) (ai4ffd@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (ai4ffd@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (ai4ffb@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (ai4ffb@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (ai4ffb@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((ai5028@prefix (lambda (ai502a@ext ai502b@ls) (append (map (lambda (ai502e@x) (string-append ai502a@ext ai502e@x)) ai502b@ls) ai502b@ls)))) (ai2cf0@ai2b1d@library-extensions (ai5028@prefix '".mosh" (ai2cf0@ai2b1d@library-extensions)))) (set-symbol-value! 'invoke-library-by-name ai2d04@ai2b45@invoke-library-by-name) (with-exception-handler (lambda (ai5030@c) (begin (if (condition? ai5030@c) (ai5001@condition-printer ai5030@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" ai5030@c)) ai5030@c)) (lambda () (if ((call/cc (lambda (ai5034@ai5032) (lambda () (with-exception-handler (lambda (ai5036@c3) ((call/cc (lambda (ai5038@ai5033) (ai5034@ai5032 (lambda () (if '#t '#f (ai5038@ai5033 (lambda () (raise-continuable ai5036@c3)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (ai5021@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (ai500b@command-line)) (let ((ai5042@ai503b ai500b@command-line) (ai5043@ai503d ai2a26@ai2905@mosh-cache-dir) (ai5044@ai503f '()) (ai5045@ai5041 (create-mosh-cache-dir))) (let ((ai504a@swap (lambda () (begin (let ((ai504c@t (ai5042@ai503b))) (begin (ai5042@ai503b ai5044@ai503f) (set! ai5044@ai503f ai504c@t))) (let ((ai504e@t (ai5043@ai503d))) (begin (ai5043@ai503d ai5045@ai5041) (set! ai5045@ai5041 ai504e@t))))))) (dynamic-wind ai504a@swap (lambda () (begin (if (ai2a26@ai2905@mosh-cache-dir) (gensym-prefix-set! (ai5025@prefix-inc! (string-append (ai2a26@ai2905@mosh-cache-dir) '"/prefix.txt"))) (void)) (ai5007@repl))) ai504a@swap))) (begin (ai2cef@ai2b1b@library-path (ai500d@local-library-path (car (ai500b@command-line)))) (set! ai4ff9@x* (with-input-from-file (car (ai500b@command-line)) (lambda () (let ai5050@f () (let ((ai5052@x (ai2a17@ai28e7@read-annotated))) (if (eof-object? ai5052@x) '() (cons ai5052@x (ai5050@f)))))))) (ai500b@command-line (cons (car (ai500b@command-line)) (cdr (ai500b@command-line)))) (ai2a26@ai2905@mosh-cache-dir (create-mosh-cache-dir)) (if (ai2a26@ai2905@mosh-cache-dir) (gensym-prefix-set! (ai5025@prefix-inc! (string-append (ai2a26@ai2905@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (ai5054@file) ((call/cc (lambda (ai5058@ai5056) (lambda () (with-exception-handler (lambda (ai505a@c4) ((call/cc (lambda (ai505c@ai5057) (ai5058@ai5056 (lambda () (if '#t '#t (ai505c@ai5057 (lambda () (raise-continuable ai505a@c4)))))))))) (lambda () (delete-file (string-append (ai2a26@ai2905@mosh-cache-dir) '"/" ai5054@file))))))))) (directory-list (ai2a26@ai2905@mosh-cache-dir))) (void)) (let ((ai505e@compiled (ai4c32@ai31dd@compile-r6rs-top-level ai4ff9@x*))) (begin (if (and (ai2a26@ai2905@mosh-cache-dir) (not (symbol-value '%disable-acc))) (ai2cf3@ai2b23@serialize-all ai2a20@ai28f9@serialize-library ai2a7c@ai2a35@compile-core-expr) (void)) (ai505e@compiled))))))))))
