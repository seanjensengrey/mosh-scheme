;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! lE2903@library-file-path->cache-path (unspecified)) (set! lE2905@read-annotated (unspecified)) (set! lE2907@annotation-stripped (unspecified)) (set! lE2909@annotation? (unspecified)) (set! lE290b@annotation-source (unspecified)) (set! lE290d@annotation-expression (unspecified)) (set! lE290f@scm->fasl (unspecified)) (set! lE2911@fasl-save (unspecified)) (set! lE2913@fasl-load (unspecified)) (set! lE2915@verbose? (unspecified)) (set! lE2917@serialize-library (unspecified)) (set! lE2919@load-serialized-library (unspecified)) (set! lE291b@make-record-printer (unspecified)) (set! lE291d@compile-core (unspecified)) (set! lE291f@read-library-source-file (unspecified)) (set! lE2921@make-parameter (unspecified)) (set! lE2923@mosh-cache-dir (unspecified)) (set! lE29b9@file-options-spec (unspecified)) (set! lE2903@library-file-path->cache-path (lambda (lE29ba@x) (call-with-values (lambda () (open-string-output-port)) (lambda (lE29c0@lE29bd lE29c1@lE29bf) (let ((lE29c4@extract lE29c1@lE29bf) (lE29c5@p lE29c0@lE29bd)) (letrec* ((lE29c9@display-hex (lambda (lE29d2@n) (if (<= '0 lE29d2@n '9) (display lE29d2@n lE29c5@p) (display (integer->char (+ (char->integer '#\a) (- lE29d2@n '10))) lE29c5@p))))) (begin (let lE29cc@f ((lE29ca@ls (string-split lE29ba@x '#\/))) (if (not (null? lE29ca@ls)) (begin (display '"_" lE29c5@p) (for-each (lambda (lE29ce@c) (if (or (char<=? '#\a lE29ce@c '#\z) (char<=? '#\A lE29ce@c '#\Z) (char<=? '#\0 lE29ce@c '#\9) (memv lE29ce@c '(#\- #\. #\_ #\~))) (display lE29ce@c lE29c5@p) (begin (display '"%" lE29c5@p) (let ((lE29d0@n (char->integer lE29ce@c))) (begin (lE29c9@display-hex (quotient lE29d0@n '16)) (lE29c9@display-hex (remainder lE29d0@n '16))))))) (string->list (car lE29ca@ls))) (lE29cc@f (cdr lE29ca@ls))) (void))) (lE29c4@extract)))))))) (set! lE2a34@lE2903@library-file-path->cache-path lE2903@library-file-path->cache-path) (set! lE2905@read-annotated read) (set! lE2a35@lE2905@read-annotated lE2905@read-annotated) (set! lE2907@annotation-stripped (lambda (lE29d4@x) (lE290d@annotation-expression lE29d4@x))) (set! lE2a36@lE2907@annotation-stripped lE2907@annotation-stripped) (set! lE2909@annotation? (lambda (lE29d6@x) (source-info lE29d6@x))) (set! lE2a37@lE2909@annotation? lE2909@annotation?) (set! lE290b@annotation-source (lambda (lE29d8@x) (source-info lE29d8@x))) (set! lE2a38@lE290b@annotation-source lE290b@annotation-source) (set! lE290d@annotation-expression (lambda (lE29da@x) (if (pair? lE29da@x) (cons (car lE29da@x) (cdr lE29da@x)) (if (procedure? lE29da@x) (set-source-info! lE29da@x '#f) lE29da@x)))) (set! lE2a39@lE290d@annotation-expression lE290d@annotation-expression) (set! lE290f@scm->fasl (lambda (lE29dc@filename) (string-append (lE2923@mosh-cache-dir) '"/" (lE2903@library-file-path->cache-path lE29dc@filename) '".mosh-fasl"))) (set! lE2a3a@lE290f@scm->fasl lE290f@scm->fasl) (set! lE2911@fasl-save (lambda (lE29de@filename lE29df@obj) (call-with-port (open-file-output-port lE29de@filename) (lambda (lE29e2@port) ((symbol-value 'fasl-write!) lE29df@obj lE29e2@port))))) (set! lE2a3b@lE2911@fasl-save lE2911@fasl-save) (set! lE2913@fasl-load (lambda (lE29e4@filename) (call-with-port (open-file-input-port lE29e4@filename) (symbol-value 'fasl-read!)))) (set! lE2a3c@lE2913@fasl-load lE2913@fasl-load) (set! lE2915@verbose? (symbol-value '%verbose)) (set! lE2a3d@lE2915@verbose? lE2915@verbose?) (set! lE2917@serialize-library (lambda (lE29e6@filename lE29e7@obj) (begin (if lE2915@verbose? (format (current-error-port) '"serialize-library ~a\n..." lE29e6@filename) (void)) (let ((lE29ea@expanded2core (symbol-value 'expanded2core))) (let ((lE29ec@compile (symbol-value 'compile-w/o-halt))) (let ((lE29ee@code lE29e7@obj)) (let ((lE29f0@pivot (cddddr (cddddr lE29ee@code)))) (let ((lE29f2@visit (lE29ec@compile (lE29ea@expanded2core (car lE29f0@pivot))))) (begin (set-car! lE29f0@pivot lE29f2@visit) (let ((lE29f4@pivot (cdr lE29f0@pivot))) (let ((lE29f6@invoke (lE29ec@compile (lE29ea@expanded2core (car lE29f4@pivot))))) (set-car! lE29f4@pivot lE29f6@invoke))))))))) (let ((lE29f8@fasl-file (lE290f@scm->fasl lE29e6@filename))) (begin (if (file-exists? lE29f8@fasl-file) (delete-file lE29f8@fasl-file) (void)) ((call/cc (lambda (lE29fc@lE29fa) (lambda () (with-exception-handler (lambda (lE29fe@c) ((call/cc (lambda (lE2a00@lE29fb) (lE29fc@lE29fa (lambda () (if '#t (begin (if lE2915@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" lE29e6@filename) (void)) (if (file-exists? lE29f8@fasl-file) (delete-file lE29f8@fasl-file) (void)) '#f) (lE2a00@lE29fb (lambda () (raise-continuable lE29fe@c)))))))))) (lambda () (lE2911@fasl-save lE29f8@fasl-file lE29e7@obj)))))))))))) (set! lE2a3e@lE2917@serialize-library lE2917@serialize-library) (set! lE2919@load-serialized-library (lambda (lE2a02@filename lE2a03@obj) (and (lE2923@mosh-cache-dir) (let ((lE2a06@fasl-file (lE290f@scm->fasl lE2a02@filename))) (if (and (file-exists? lE2a06@fasl-file) ((symbol-value 'file-newer?) lE2a06@fasl-file lE2a02@filename)) (let ((lE2a08@expanded2core (symbol-value 'expanded2core))) (let ((lE2a0a@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((lE2a0c@code (lE2913@fasl-load lE2a06@fasl-file))) (let ((lE2a0e@pivot (cddddr (cddddr lE2a0c@code)))) (let ((lE2a10@visit (car lE2a0e@pivot))) (let ((lE2a12@visit-proc (lambda () (lE2a0a@eval-compiled-core lE2a10@visit)))) (begin (set-car! lE2a0e@pivot lE2a12@visit-proc) (let ((lE2a14@pivot (cdr lE2a0e@pivot))) (let ((lE2a16@invoke (car lE2a14@pivot))) (begin (set-car! lE2a14@pivot (lambda () (lE2a0a@eval-compiled-core lE2a16@invoke))) (apply lE2a03@obj lE2a0c@code))))))))))) '#f))))) (set! lE2a3f@lE2919@load-serialized-library lE2919@load-serialized-library) (set! lE291b@make-record-printer (lambda (lE2a18@name lE2a19@printer) (lambda lE2a1c@x (begin (display '"record printer") (for-each display lE2a1c@x))))) (set! lE2a40@lE291b@make-record-printer lE291b@make-record-printer) (set! lE291d@compile-core (lambda lE2a1e@x (apply error 'comile-core '"not implementated" lE2a1e@x))) (set! lE2a41@lE291d@compile-core lE291d@compile-core) (set! lE291f@read-library-source-file (lambda (lE2a20@file-name) (with-input-from-file lE2a20@file-name lE2905@read-annotated))) (set! lE2a42@lE291f@read-library-source-file lE291f@read-library-source-file) (set! lE2921@make-parameter (lambda lE2a30 (let ((lE2a31 (length lE2a30))) (if (= lE2a31 '1) (apply (lambda (lE2a22@x) (lE2921@make-parameter lE2a22@x (lambda (lE2a24@x) lE2a24@x))) lE2a30) (if (= lE2a31 '2) (apply (lambda (lE2a26@x lE2a27@fender) (let ((lE2a2a@x (lE2a27@fender lE2a26@x))) (lambda lE2a2e (let ((lE2a2f (length lE2a2e))) (if (= lE2a2f '0) (apply (lambda () lE2a2a@x) lE2a2e) (if (= lE2a2f '1) (apply (lambda (lE2a2c@v) (set! lE2a2a@x (lE2a27@fender lE2a2c@v))) lE2a2e) (error 'apply '"invalid arg count"))))))) lE2a30) (error 'apply '"invalid arg count")))))) (set! lE2a43@lE2921@make-parameter lE2921@make-parameter) (set! lE2923@mosh-cache-dir (lE2921@make-parameter '#f)) (set! lE2a44@lE2923@mosh-cache-dir lE2923@mosh-cache-dir) (set! lE29b9@file-options-spec (lambda (lE2a32@x) lE2a32@x)) (set! lE2a45@lE29b9@file-options-spec lE29b9@file-options-spec) (void))
(begin (set! lE2a4b@current-primitive-locations (unspecified)) (set! lE2a4d@mutable? (unspecified)) (set! lE2a4f@rewriter (unspecified)) (set! lE2a51@expanded->core (unspecified)) (set! lE2a53@compile-core-expr (unspecified)) (set! lE2a55@pretty-print (unspecified)) (set! lE2a57@compile-core-expr-to-port (unspecified)) (set! lE2a4b@current-primitive-locations (lE2a43@lE2921@make-parameter (lambda (lE2a58@x) '#f) (lambda (lE2a5a@p) lE2a5a@p))) (set! lE2a96@lE2a4b@current-primitive-locations lE2a4b@current-primitive-locations) (set! lE2a4d@mutable? (lambda (lE2a5c@x) (or (pair? lE2a5c@x) (vector? lE2a5c@x) (hashtable? lE2a5c@x)))) (set! lE2a97@lE2a4d@mutable? lE2a4d@mutable?) (set! lE2a4f@rewriter (lambda (lE2a5e@quote-hack?) (letrec* ((lE2a61@f (lambda (lE2a62@x) (if (pair? lE2a62@x) (let ((lE2a64@t (car lE2a62@x))) (if (memv lE2a64@t '(quote)) (if (and lE2a5e@quote-hack? (lE2a4d@mutable? (cadr lE2a62@x))) (let ((lE2a66@g (gensym))) (begin (set-symbol-value! lE2a66@g (cadr lE2a62@x)) lE2a66@g)) lE2a62@x) (if (memv lE2a64@t '(case-lambda)) (cons 'case-lambda (map (lambda (lE2a68@x) (cons (car lE2a68@x) (map lE2a61@f (cdr lE2a68@x)))) (cdr lE2a62@x))) (if (memv lE2a64@t '(lambda)) (cons* 'lambda (cadr lE2a62@x) (map lE2a61@f (cddr lE2a62@x))) (if (memv lE2a64@t '(letrec)) (let ((lE2a6a@bindings (cadr lE2a62@x)) (lE2a6b@body* (cddr lE2a62@x))) (let ((lE2a6e@lhs* (map car lE2a6a@bindings)) (lE2a6f@rhs* (map cadr lE2a6a@bindings))) (cons* 'letrec (map list lE2a6e@lhs* (map lE2a61@f lE2a6f@rhs*)) (map lE2a61@f lE2a6b@body*)))) (if (memv lE2a64@t '(letrec*)) (let ((lE2a72@bindings (cadr lE2a62@x)) (lE2a73@body* (cddr lE2a62@x))) (let ((lE2a76@lhs* (map car lE2a72@bindings)) (lE2a77@rhs* (map cadr lE2a72@bindings))) (cons* 'letrec* (map list lE2a76@lhs* (map lE2a61@f lE2a77@rhs*)) (map lE2a61@f lE2a73@body*)))) (if (memv lE2a64@t '(library-letrec*)) (let ((lE2a7a@name (cadr lE2a62@x)) (lE2a7b@x (cdr lE2a62@x))) (let ((lE2a7e@bindings (cadr lE2a7b@x)) (lE2a7f@body* (cddr lE2a7b@x))) (let ((lE2a82@lhs* (map car lE2a7e@bindings)) (lE2a83@lhs** (map cadr lE2a7e@bindings)) (lE2a84@rhs* (map caddr lE2a7e@bindings))) (cons* 'library-letrec* lE2a7a@name (map list lE2a82@lhs* lE2a83@lhs** (map lE2a61@f lE2a84@rhs*)) (map lE2a61@f lE2a7f@body*))))) (if (memv lE2a64@t '(begin)) (cons 'begin (map lE2a61@f (cdr lE2a62@x))) (if (memv lE2a64@t '(set!)) (list 'set! (cadr lE2a62@x) (lE2a61@f (caddr lE2a62@x))) (if (memv lE2a64@t '(primitive)) (let ((lE2a88@op (cadr lE2a62@x))) (let ((lE2a8a@t ((lE2a4b@current-primitive-locations) lE2a88@op))) (if lE2a8a@t ((lambda (lE2a8c@loc) lE2a8c@loc) lE2a8a@t) lE2a88@op))) (if (memv lE2a64@t '(define)) lE2a62@x (if (list? lE2a62@x) (map lE2a61@f lE2a62@x) (error 'rewrite '"invalid form ~s ~s" lE2a62@x (list? lE2a62@x)))))))))))))) lE2a62@x)))) lE2a61@f))) (set! lE2a98@lE2a4f@rewriter lE2a4f@rewriter) (set! lE2a51@expanded->core (lambda (lE2a8e@x) ((lE2a4f@rewriter '#f) lE2a8e@x))) (set! lE2a99@lE2a51@expanded->core lE2a51@expanded->core) (set! lE2a53@compile-core-expr (lambda (lE2a90@x) ((lE2a4f@rewriter '#f) lE2a90@x))) (set! lE2a9a@lE2a53@compile-core-expr lE2a53@compile-core-expr) (set! lE2a55@pretty-print write) (set! lE2a9b@lE2a55@pretty-print lE2a55@pretty-print) (set! lE2a57@compile-core-expr-to-port (lambda (lE2a92@x lE2a93@p) (lE2a55@pretty-print ((lE2a4f@rewriter '#f) lE2a92@x) lE2a93@p))) (set! lE2a9c@lE2a57@compile-core-expr-to-port lE2a57@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! lE2aeb@make-collection (unspecified)) (set! lE2aed@current-library-collection (unspecified)) (set! lE2aef@rp (unspecified)) (set! lE2af9@library? (unspecified)) (set! lE2afb@library-id (unspecified)) (set! lE2afd@set-library-id! (unspecified)) (set! lE2aff@library-name (unspecified)) (set! lE2b01@set-library-name! (unspecified)) (set! lE2b03@library-version (unspecified)) (set! lE2b05@set-library-version! (unspecified)) (set! lE2b07@library-imp* (unspecified)) (set! lE2b09@set-library-imp*! (unspecified)) (set! lE2b0b@library-vis* (unspecified)) (set! lE2b0d@set-library-vis*! (unspecified)) (set! lE2b0f@library-inv* (unspecified)) (set! lE2b11@set-library-inv*! (unspecified)) (set! lE2b13@library-subst (unspecified)) (set! lE2b15@set-library-subst! (unspecified)) (set! lE2b17@library-env (unspecified)) (set! lE2b19@set-library-env! (unspecified)) (set! lE2b1b@library-visit-state (unspecified)) (set! lE2b1d@set-library-visit-state! (unspecified)) (set! lE2b1f@library-invoke-state (unspecified)) (set! lE2b21@set-library-invoke-state! (unspecified)) (set! lE2b23@library-visit-code (unspecified)) (set! lE2b25@set-library-visit-code! (unspecified)) (set! lE2b27@library-invoke-code (unspecified)) (set! lE2b29@set-library-invoke-code! (unspecified)) (set! lE2b2b@library-visible? (unspecified)) (set! lE2b2d@set-library-visible?! (unspecified)) (set! lE2b2f@library-source-file-name (unspecified)) (set! lE2b31@set-library-source-file-name! (unspecified)) (set! lE2b33@dummy (unspecified)) (set! lE2b35@find-dependencies (unspecified)) (set! lE2b37@find-library-by (unspecified)) (set! lE2b39@library-path (unspecified)) (set! lE2b3b@library-extensions (unspecified)) (set! lE2b3d@library-name->file-name (unspecified)) (set! lE2b3f@file-locator (unspecified)) (set! lE2b41@serialize-all (unspecified)) (set! lE2b43@current-precompiled-library-loader (unspecified)) (set! lE2b45@try-load-from-file (unspecified)) (set! lE2b47@library-loader (unspecified)) (set! lE2b49@current-library-expander (unspecified)) (set! lE2b4b@external-pending-libraries (unspecified)) (set! lE2b4d@find-external-library (unspecified)) (set! lE2b4f@find-library-by-name (unspecified)) (set! lE2b51@library-exists? (unspecified)) (set! lE2b53@find-library-by-spec/die (unspecified)) (set! lE2b55@label->binding-table (unspecified)) (set! lE2b57@install-library-record (unspecified)) (set! lE2b59@install-library (unspecified)) (set! lE2b5b@imported-label->binding (unspecified)) (set! lE2b5d@invoke-library (unspecified)) (set! lE2b5f@visit-library (unspecified)) (set! lE2b61@invoke-library-by-spec (unspecified)) (set! lE2b63@installed-libraries (unspecified)) (set! lE2b65@library-spec (unspecified)) (set! lE2aeb@make-collection (lambda () (let ((lE2b66@set '())) (letrec* ((lE2b69@set-cons (lambda (lE2b6e@x lE2b6f@ls) (if (memq lE2b6e@x lE2b6f@ls) lE2b6f@ls (cons lE2b6e@x lE2b6f@ls))))) (lambda lE2b6c (let ((lE2b6d (length lE2b6c))) (if (= lE2b6d '0) (apply (lambda () lE2b66@set) lE2b6c) (if (= lE2b6d '1) (apply (lambda (lE2b6a@x) (set! lE2b66@set (lE2b69@set-cons lE2b6a@x lE2b66@set))) lE2b6c) (error 'apply '"invalid arg count"))))))))) (set! lE2cda@lE2aeb@make-collection lE2aeb@make-collection) (set! lE2aed@current-library-collection (lE2a43@lE2921@make-parameter (lE2aeb@make-collection) (lambda (lE2b72@x) (begin (if (not (procedure? lE2b72@x)) (assertion-violation 'current-library-collection '"not a procedure" lE2b72@x) (void)) lE2b72@x)))) (set! lE2cdb@lE2aed@current-library-collection lE2aed@current-library-collection) (set! lE2aef@rp (lE2a40@lE291b@make-record-printer 'library (lambda (lE2b74@x lE2b75@p lE2b76@wr) (begin (if (not (lE2af9@library? lE2b74@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (lE2b03@library-version lE2b74@x)) (lE2aff@library-name lE2b74@x) (append (lE2aff@library-name lE2b74@x) (list (lE2b03@library-version lE2b74@x))))) lE2b75@p))))) (set! lE2cdc@lE2aef@rp lE2aef@rp) (set! lE2af9@library? (lambda (lE2b7a@x) (and (simple-struct? lE2b7a@x) (eq? (simple-struct-name lE2b7a@x) 'library)))) (set! lE2cdd@lE2af9@library? lE2af9@library?) (set! lE2afb@library-id (lambda (lE2b7c@x) (simple-struct-ref lE2b7c@x '0))) (set! lE2cde@lE2afb@library-id lE2afb@library-id) (set! lE2afd@set-library-id! (lambda (lE2b7e@x lE2b7f@val) (simple-struct-set! lE2b7e@x '0 lE2b7f@val))) (set! lE2cdf@lE2afd@set-library-id! lE2afd@set-library-id!) (set! lE2aff@library-name (lambda (lE2b82@x) (simple-struct-ref lE2b82@x '1))) (set! lE2ce0@lE2aff@library-name lE2aff@library-name) (set! lE2b01@set-library-name! (lambda (lE2b84@x lE2b85@val) (simple-struct-set! lE2b84@x '1 lE2b85@val))) (set! lE2ce1@lE2b01@set-library-name! lE2b01@set-library-name!) (set! lE2b03@library-version (lambda (lE2b88@x) (simple-struct-ref lE2b88@x '2))) (set! lE2ce2@lE2b03@library-version lE2b03@library-version) (set! lE2b05@set-library-version! (lambda (lE2b8a@x lE2b8b@val) (simple-struct-set! lE2b8a@x '2 lE2b8b@val))) (set! lE2ce3@lE2b05@set-library-version! lE2b05@set-library-version!) (set! lE2b07@library-imp* (lambda (lE2b8e@x) (simple-struct-ref lE2b8e@x '3))) (set! lE2ce4@lE2b07@library-imp* lE2b07@library-imp*) (set! lE2b09@set-library-imp*! (lambda (lE2b90@x lE2b91@val) (simple-struct-set! lE2b90@x '3 lE2b91@val))) (set! lE2ce5@lE2b09@set-library-imp*! lE2b09@set-library-imp*!) (set! lE2b0b@library-vis* (lambda (lE2b94@x) (simple-struct-ref lE2b94@x '4))) (set! lE2ce6@lE2b0b@library-vis* lE2b0b@library-vis*) (set! lE2b0d@set-library-vis*! (lambda (lE2b96@x lE2b97@val) (simple-struct-set! lE2b96@x '4 lE2b97@val))) (set! lE2ce7@lE2b0d@set-library-vis*! lE2b0d@set-library-vis*!) (set! lE2b0f@library-inv* (lambda (lE2b9a@x) (simple-struct-ref lE2b9a@x '5))) (set! lE2ce8@lE2b0f@library-inv* lE2b0f@library-inv*) (set! lE2b11@set-library-inv*! (lambda (lE2b9c@x lE2b9d@val) (simple-struct-set! lE2b9c@x '5 lE2b9d@val))) (set! lE2ce9@lE2b11@set-library-inv*! lE2b11@set-library-inv*!) (set! lE2b13@library-subst (lambda (lE2ba0@x) (simple-struct-ref lE2ba0@x '6))) (set! lE2cea@lE2b13@library-subst lE2b13@library-subst) (set! lE2b15@set-library-subst! (lambda (lE2ba2@x lE2ba3@val) (simple-struct-set! lE2ba2@x '6 lE2ba3@val))) (set! lE2ceb@lE2b15@set-library-subst! lE2b15@set-library-subst!) (set! lE2b17@library-env (lambda (lE2ba6@x) (simple-struct-ref lE2ba6@x '7))) (set! lE2cec@lE2b17@library-env lE2b17@library-env) (set! lE2b19@set-library-env! (lambda (lE2ba8@x lE2ba9@val) (simple-struct-set! lE2ba8@x '7 lE2ba9@val))) (set! lE2ced@lE2b19@set-library-env! lE2b19@set-library-env!) (set! lE2b1b@library-visit-state (lambda (lE2bac@x) (simple-struct-ref lE2bac@x '8))) (set! lE2cee@lE2b1b@library-visit-state lE2b1b@library-visit-state) (set! lE2b1d@set-library-visit-state! (lambda (lE2bae@x lE2baf@val) (simple-struct-set! lE2bae@x '8 lE2baf@val))) (set! lE2cef@lE2b1d@set-library-visit-state! lE2b1d@set-library-visit-state!) (set! lE2b1f@library-invoke-state (lambda (lE2bb2@x) (simple-struct-ref lE2bb2@x '9))) (set! lE2cf0@lE2b1f@library-invoke-state lE2b1f@library-invoke-state) (set! lE2b21@set-library-invoke-state! (lambda (lE2bb4@x lE2bb5@val) (simple-struct-set! lE2bb4@x '9 lE2bb5@val))) (set! lE2cf1@lE2b21@set-library-invoke-state! lE2b21@set-library-invoke-state!) (set! lE2b23@library-visit-code (lambda (lE2bb8@x) (simple-struct-ref lE2bb8@x '10))) (set! lE2cf2@lE2b23@library-visit-code lE2b23@library-visit-code) (set! lE2b25@set-library-visit-code! (lambda (lE2bba@x lE2bbb@val) (simple-struct-set! lE2bba@x '10 lE2bbb@val))) (set! lE2cf3@lE2b25@set-library-visit-code! lE2b25@set-library-visit-code!) (set! lE2b27@library-invoke-code (lambda (lE2bbe@x) (simple-struct-ref lE2bbe@x '11))) (set! lE2cf4@lE2b27@library-invoke-code lE2b27@library-invoke-code) (set! lE2b29@set-library-invoke-code! (lambda (lE2bc0@x lE2bc1@val) (simple-struct-set! lE2bc0@x '11 lE2bc1@val))) (set! lE2cf5@lE2b29@set-library-invoke-code! lE2b29@set-library-invoke-code!) (set! lE2b2b@library-visible? (lambda (lE2bc4@x) (simple-struct-ref lE2bc4@x '12))) (set! lE2cf6@lE2b2b@library-visible? lE2b2b@library-visible?) (set! lE2b2d@set-library-visible?! (lambda (lE2bc6@x lE2bc7@val) (simple-struct-set! lE2bc6@x '12 lE2bc7@val))) (set! lE2cf7@lE2b2d@set-library-visible?! lE2b2d@set-library-visible?!) (set! lE2b2f@library-source-file-name (lambda (lE2bca@x) (simple-struct-ref lE2bca@x '13))) (set! lE2cf8@lE2b2f@library-source-file-name lE2b2f@library-source-file-name) (set! lE2b31@set-library-source-file-name! (lambda (lE2bcc@x lE2bcd@val) (simple-struct-set! lE2bcc@x '13 lE2bcd@val))) (set! lE2cf9@lE2b31@set-library-source-file-name! lE2b31@set-library-source-file-name!) (set! lE2b33@dummy '3) (set! lE2cfa@lE2b33@dummy lE2b33@dummy) (set! lE2b35@find-dependencies (lambda (lE2bd0@ls) (if (null? lE2bd0@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! lE2cfb@lE2b35@find-dependencies lE2b35@find-dependencies) (set! lE2b37@find-library-by (lambda (lE2bd2@pred) (let lE2bd6@f ((lE2bd4@ls ((lE2aed@current-library-collection)))) (if (null? lE2bd4@ls) '#f (if (lE2bd2@pred (car lE2bd4@ls)) (car lE2bd4@ls) (lE2bd6@f (cdr lE2bd4@ls))))))) (set! lE2cfc@lE2b37@find-library-by lE2b37@find-library-by) (set! lE2b39@library-path (lE2a43@lE2921@make-parameter '(".") (lambda (lE2bd8@x) (if (and (list? lE2bd8@x) (for-all string? lE2bd8@x)) (map (lambda (lE2bda@x) lE2bda@x) lE2bd8@x) (assertion-violation 'library-path '"not a list of strings" lE2bd8@x))))) (set! lE2cfd@lE2b39@library-path lE2b39@library-path) (set! lE2b3b@library-extensions (lE2a43@lE2921@make-parameter '(".sls" ".ss" ".scm") (lambda (lE2bdc@x) (if (and (list? lE2bdc@x) (for-all string? lE2bdc@x)) (map (lambda (lE2bde@x) lE2bde@x) lE2bdc@x) (assertion-violation 'library-extensions '"not a list of strings" lE2bdc@x))))) (set! lE2cfe@lE2b3b@library-extensions lE2b3b@library-extensions) (set! lE2b3d@library-name->file-name (lambda (lE2be0@x) (call-with-values (lambda () (open-string-output-port)) (lambda (lE2be6@lE2be3 lE2be7@lE2be5) (let ((lE2bea@extract lE2be7@lE2be5) (lE2beb@p lE2be6@lE2be3)) (letrec* ((lE2bef@display-hex (lambda (lE2bf8@n) (if (<= '0 lE2bf8@n '9) (display lE2bf8@n lE2beb@p) (display (integer->char (+ (char->integer '#\a) (- lE2bf8@n '10))) lE2beb@p))))) (begin (let lE2bf2@f ((lE2bf0@ls lE2be0@x)) (if (not (null? lE2bf0@ls)) (begin (display '"/" lE2beb@p) (for-each (lambda (lE2bf4@c) (if (or (char<=? '#\a lE2bf4@c '#\z) (char<=? '#\A lE2bf4@c '#\Z) (char<=? '#\0 lE2bf4@c '#\9) (memv lE2bf4@c '(#\- #\. #\_ #\~))) (display lE2bf4@c lE2beb@p) (begin (display '"%" lE2beb@p) (let ((lE2bf6@n (char->integer lE2bf4@c))) (begin (lE2bef@display-hex (quotient lE2bf6@n '16)) (lE2bef@display-hex (remainder lE2bf6@n '16))))))) (string->list (symbol->string (car lE2bf0@ls)))) (lE2bf2@f (cdr lE2bf0@ls))) (void))) (lE2bea@extract)))))))) (set! lE2cff@lE2b3d@library-name->file-name lE2b3d@library-name->file-name) (set! lE2b3f@file-locator (lE2a43@lE2921@make-parameter (lambda (lE2bfa@x) (let ((lE2bfc@str (lE2b3d@library-name->file-name lE2bfa@x))) (let lE2c04@f ((lE2bfe@ls (lE2b39@library-path)) (lE2bff@exts (lE2b3b@library-extensions)) (lE2c00@failed-list '())) (if (null? lE2bfe@ls) (letrec* ((lE2c0e@lE2c09 (make-record-type-descriptor '&library-resolution &condition-rtd 'lE2c0c '#f '#f '#((immutable library) (immutable files)))) (lE2c10@lE2c0b '#f) (lE2c12@lE2c0a (make-record-constructor-descriptor lE2c0e@lE2c09 &condition-rcd lE2c10@lE2c0b)) (lE2c15@lE2c08 (record-predicate lE2c0e@lE2c09)) (lE2c17@make-library-resolution-condition (record-constructor lE2c12@lE2c0a)) (lE2c19@lE2c06 (record-accessor lE2c0e@lE2c09 '0)) (lE2c1b@lE2c07 (record-accessor lE2c0e@lE2c09 '1)) (lE2c1d@library-resolution-condition? (condition-predicate lE2c0e@lE2c09)) (lE2c1f@condition-library (condition-accessor lE2c0e@lE2c09 lE2c19@lE2c06)) (lE2c21@condition-files (condition-accessor lE2c0e@lE2c09 lE2c1b@lE2c07))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (lE2c17@make-library-resolution-condition lE2bfa@x (reverse lE2c00@failed-list))))) (if (null? lE2bff@exts) (lE2c04@f (cdr lE2bfe@ls) (lE2b3b@library-extensions) lE2c00@failed-list) (let ((lE2c22@name (string-append (car lE2bfe@ls) lE2bfc@str (car lE2bff@exts)))) (if (file-exists? lE2c22@name) lE2c22@name (lE2c04@f lE2bfe@ls (cdr lE2bff@exts) (cons lE2c22@name lE2c00@failed-list))))))))) (lambda (lE2c24@f) (if (procedure? lE2c24@f) lE2c24@f (assertion-violation 'file-locator '"not a procedure" lE2c24@f))))) (set! lE2d00@lE2b3f@file-locator lE2b3f@file-locator) (set! lE2b41@serialize-all (lambda (lE2c26@serialize lE2c27@compile) (letrec* ((lE2c2b@library-desc (lambda (lE2c2e@x) (list (lE2afb@library-id lE2c2e@x) (lE2aff@library-name lE2c2e@x))))) (for-each (lambda (lE2c2c@x) (if (lE2b2f@library-source-file-name lE2c2c@x) (lE2c26@serialize (lE2b2f@library-source-file-name lE2c2c@x) (list (lE2afb@library-id lE2c2c@x) (lE2aff@library-name lE2c2c@x) (lE2b03@library-version lE2c2c@x) (map lE2c2b@library-desc (lE2b07@library-imp* lE2c2c@x)) (map lE2c2b@library-desc (lE2b0b@library-vis* lE2c2c@x)) (map lE2c2b@library-desc (lE2b0f@library-inv* lE2c2c@x)) (lE2b13@library-subst lE2c2c@x) (lE2b17@library-env lE2c2c@x) (lE2c27@compile (lE2b23@library-visit-code lE2c2c@x)) (lE2c27@compile (lE2b27@library-invoke-code lE2c2c@x)) (lE2b2b@library-visible? lE2c2c@x))) (void))) ((lE2aed@current-library-collection)))))) (set! lE2d01@lE2b41@serialize-all lE2b41@serialize-all) (set! lE2b43@current-precompiled-library-loader (lE2a43@lE2921@make-parameter (lambda (lE2c30@filename lE2c31@sk) '#f))) (set! lE2d02@lE2b43@current-precompiled-library-loader lE2b43@current-precompiled-library-loader) (set! lE2b45@try-load-from-file (lambda (lE2c34@filename) ((lE2b43@current-precompiled-library-loader) lE2c34@filename (lambda lE2c5a (let ((lE2c5b (length lE2c5a))) (if (= lE2c5b '11) (apply (lambda (lE2c36@id lE2c37@name lE2c38@ver lE2c39@imp* lE2c3a@vis* lE2c3b@inv* lE2c3c@exp-subst lE2c3d@exp-env lE2c3e@visit-proc lE2c3f@invoke-proc lE2c40@visible?) (let lE2c4e@f ((lE2c4c@deps (append lE2c39@imp* lE2c3a@vis* lE2c3b@inv*))) (if (null? lE2c4c@deps) (begin (lE2b59@install-library lE2c36@id lE2c37@name lE2c38@ver lE2c39@imp* lE2c3a@vis* lE2c3b@inv* lE2c3c@exp-subst lE2c3d@exp-env lE2c3e@visit-proc lE2c3f@invoke-proc '#f '#f lE2c40@visible? '#f) '#t) (let ((lE2c50@d (car lE2c4c@deps))) (let ((lE2c52@label (car lE2c50@d)) (lE2c53@dname (cadr lE2c50@d))) (let ((lE2c56@l (lE2b4f@find-library-by-name lE2c53@dname))) (if (and (lE2af9@library? lE2c56@l) (eq? lE2c52@label (lE2afb@library-id lE2c56@l))) (lE2c4e@f (cdr lE2c4c@deps)) (begin (if lE2a3d@lE2915@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" lE2c37@name lE2c53@dname lE2c34@filename) (void)) '#f)))))))) lE2c5a) (if (>= lE2c5b '0) (apply (lambda lE2c58@others '#f) lE2c5a) (error 'apply '"invalid arg count")))))))) (set! lE2d03@lE2b45@try-load-from-file lE2b45@try-load-from-file) (set! lE2b47@library-loader (lE2a43@lE2921@make-parameter (lambda (lE2c5c@x) (let ((lE2c5e@file-name ((lE2b3f@file-locator) lE2c5c@x))) (if (not lE2c5e@file-name) (assertion-violation '#f '"cannot file library" lE2c5c@x) (or (lE2b45@try-load-from-file lE2c5e@file-name) ((lE2b49@current-library-expander) (lE2a42@lE291f@read-library-source-file lE2c5e@file-name) lE2c5e@file-name (lambda (lE2c60@name) (if (not (fast-equal? lE2c60@name lE2c5c@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (lE2c66@lE2c63 lE2c67@lE2c65) (let ((lE2c6a@e lE2c67@lE2c65) (lE2c6b@p lE2c66@lE2c63)) (begin (display '"expected to find library " lE2c6b@p) (write lE2c5c@x lE2c6b@p) (display '" in file " lE2c6b@p) (display lE2c5e@file-name lE2c6b@p) (display '", found " lE2c6b@p) (write lE2c60@name lE2c6b@p) (display '" instead" lE2c6b@p) (lE2c6a@e)))))) (void)))))))) (lambda (lE2c6e@f) (if (procedure? lE2c6e@f) lE2c6e@f (assertion-violation 'library-locator '"not a procedure" lE2c6e@f))))) (set! lE2d04@lE2b47@library-loader lE2b47@library-loader) (set! lE2b49@current-library-expander (lE2a43@lE2921@make-parameter (lambda (lE2c70@x) (assertion-violation 'library-expander '"not initialized")) (lambda (lE2c72@f) (if (procedure? lE2c72@f) lE2c72@f (assertion-violation 'library-expander '"not a procedure" lE2c72@f))))) (set! lE2d05@lE2b49@current-library-expander lE2b49@current-library-expander) (set! lE2b4b@external-pending-libraries (lE2a43@lE2921@make-parameter '())) (set! lE2d06@lE2b4b@external-pending-libraries lE2b4b@external-pending-libraries) (set! lE2b4d@find-external-library (lambda (lE2c74@name) (begin (if (member lE2c74@name (lE2b4b@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" lE2c74@name) (void)) (let ((lE2c7a@lE2c77 lE2b4b@external-pending-libraries) (lE2c7b@lE2c79 (cons lE2c74@name (lE2b4b@external-pending-libraries)))) (let ((lE2c7e@swap (lambda () (let ((lE2c80@t (lE2c7a@lE2c77))) (begin (lE2c7a@lE2c77 lE2c7b@lE2c79) (set! lE2c7b@lE2c79 lE2c80@t)))))) (dynamic-wind lE2c7e@swap (lambda () (begin ((lE2b47@library-loader) lE2c74@name) (or (lE2b37@find-library-by (lambda (lE2c82@x) (fast-equal? (lE2aff@library-name lE2c82@x) lE2c74@name))) (assertion-violation '#f '"handling external library did not yield the correct library" lE2c74@name)))) lE2c7e@swap)))))) (set! lE2d07@lE2b4d@find-external-library lE2b4d@find-external-library) (set! lE2b4f@find-library-by-name (lambda (lE2c84@name) (or (lE2b37@find-library-by (lambda (lE2c86@x) (fast-equal? (lE2aff@library-name lE2c86@x) lE2c84@name))) (lE2b4d@find-external-library lE2c84@name)))) (set! lE2d08@lE2b4f@find-library-by-name lE2b4f@find-library-by-name) (set! lE2b51@library-exists? (lambda (lE2c88@name) (and (lE2b37@find-library-by (lambda (lE2c8a@x) (fast-equal? (lE2aff@library-name lE2c8a@x) lE2c88@name))) '#t))) (set! lE2d09@lE2b51@library-exists? lE2b51@library-exists?) (set! lE2b53@find-library-by-spec/die (lambda (lE2c8c@spec) (let ((lE2c8e@id (car lE2c8c@spec))) (or (lE2b37@find-library-by (lambda (lE2c90@x) (eq? lE2c8e@id (lE2afb@library-id lE2c90@x)))) (assertion-violation '#f '"cannot find library with required spec" lE2c8c@spec))))) (set! lE2d0a@lE2b53@find-library-by-spec/die lE2b53@find-library-by-spec/die) (set! lE2b55@label->binding-table (make-eq-hashtable)) (set! lE2d0b@lE2b55@label->binding-table lE2b55@label->binding-table) (set! lE2b57@install-library-record (lambda (lE2c92@lib) (begin (let ((lE2c94@exp-env (lE2b17@library-env lE2c92@lib))) (for-each (lambda (lE2c96@x) (let ((lE2c98@label (car lE2c96@x)) (lE2c99@binding (cdr lE2c96@x))) (let ((lE2c9c@binding (let ((lE2c9e@t (car lE2c99@binding))) (if (memv lE2c9e@t '(global)) (cons 'global (cons lE2c92@lib (cdr lE2c99@binding))) (if (memv lE2c9e@t '(global-macro)) (cons 'global-macro (cons lE2c92@lib (cdr lE2c99@binding))) (if (memv lE2c9e@t '(global-macro!)) (cons 'global-macro! (cons lE2c92@lib (cdr lE2c99@binding))) lE2c99@binding)))))) (begin (if (hashtable-ref lE2b55@label->binding-table lE2c98@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" lE2c98@label (hashtable-ref lE2b55@label->binding-table lE2c98@label '#f) lE2c9c@binding) (exit)) (void)) (hashtable-set! lE2b55@label->binding-table lE2c98@label lE2c9c@binding))))) lE2c94@exp-env)) ((lE2aed@current-library-collection) lE2c92@lib)))) (set! lE2d0c@lE2b57@install-library-record lE2b57@install-library-record) (set! lE2b59@install-library (lambda (lE2ca0@id lE2ca1@name lE2ca2@ver lE2ca3@imp* lE2ca4@vis* lE2ca5@inv* lE2ca6@exp-subst lE2ca7@exp-env lE2ca8@visit-proc lE2ca9@invoke-proc lE2caa@visit-code lE2cab@invoke-code lE2cac@visible? lE2cad@source-file-name) (let ((lE2cbc@imp-lib* (map lE2b53@find-library-by-spec/die lE2ca3@imp*)) (lE2cbd@vis-lib* (map lE2b53@find-library-by-spec/die lE2ca4@vis*)) (lE2cbe@inv-lib* (map lE2b53@find-library-by-spec/die lE2ca5@inv*))) (begin (if (not (and (symbol? lE2ca0@id) (list? lE2ca1@name) (list? lE2ca2@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" lE2ca0@id lE2ca1@name lE2ca2@ver) (void)) (if (lE2b51@library-exists? lE2ca1@name) (assertion-violation 'install-library '"library is already installed" lE2ca1@name) (void)) (let ((lE2cc2@lib (make-simple-struct 'library '15 (list lE2ca0@id lE2ca1@name lE2ca2@ver lE2cbc@imp-lib* lE2cbd@vis-lib* lE2cbe@inv-lib* lE2ca6@exp-subst lE2ca7@exp-env lE2ca8@visit-proc lE2ca9@invoke-proc lE2caa@visit-code lE2cab@invoke-code lE2cac@visible? lE2cad@source-file-name)))) (lE2b57@install-library-record lE2cc2@lib)))))) (set! lE2d0d@lE2b59@install-library lE2b59@install-library) (set! lE2b5b@imported-label->binding (lambda (lE2cc4@lab) (hashtable-ref lE2b55@label->binding-table lE2cc4@lab '#f))) (set! lE2d0e@lE2b5b@imported-label->binding lE2b5b@imported-label->binding) (set! lE2b5d@invoke-library (lambda (lE2cc6@lib) (let ((lE2cc8@invoke (lE2b1f@library-invoke-state lE2cc6@lib))) (if (procedure? lE2cc8@invoke) (begin (lE2b21@set-library-invoke-state! lE2cc6@lib (lambda () (assertion-violation 'invoke '"circularity detected" lE2cc6@lib))) (for-each lE2b5d@invoke-library (lE2b0f@library-inv* lE2cc6@lib)) (lE2b21@set-library-invoke-state! lE2cc6@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" lE2cc6@lib))) (lE2cc8@invoke) (lE2b21@set-library-invoke-state! lE2cc6@lib '#t)) (void))))) (set! lE2d0f@lE2b5d@invoke-library lE2b5d@invoke-library) (set! lE2b5f@visit-library (lambda (lE2cca@lib) (let ((lE2ccc@visit (lE2b1b@library-visit-state lE2cca@lib))) (if (procedure? lE2ccc@visit) (begin (lE2b1d@set-library-visit-state! lE2cca@lib (lambda () (assertion-violation 'visit '"circularity detected" lE2cca@lib))) (for-each lE2b5d@invoke-library (lE2b0b@library-vis* lE2cca@lib)) (lE2b1d@set-library-visit-state! lE2cca@lib (lambda () (assertion-violation 'invoke '"first visit did not return" lE2cca@lib))) (lE2ccc@visit) (lE2b1d@set-library-visit-state! lE2cca@lib '#t)) (void))))) (set! lE2d10@lE2b5f@visit-library lE2b5f@visit-library) (set! lE2b61@invoke-library-by-spec (lambda (lE2cce@spec) (lE2b5d@invoke-library (lE2b53@find-library-by-spec/die lE2cce@spec)))) (set! lE2d11@lE2b61@invoke-library-by-spec lE2b61@invoke-library-by-spec) (set! lE2b63@installed-libraries (lambda lE2cd6 (let ((lE2cd7 (length lE2cd6))) (if (= lE2cd7 '1) (apply (lambda (lE2cd0@all?) (let lE2cd4@f ((lE2cd2@ls ((lE2aed@current-library-collection)))) (if (null? lE2cd2@ls) '() (if (or lE2cd0@all? (lE2b2b@library-visible? (car lE2cd2@ls))) (cons (car lE2cd2@ls) (lE2cd4@f (cdr lE2cd2@ls))) (lE2cd4@f (cdr lE2cd2@ls)))))) lE2cd6) (if (= lE2cd7 '0) (apply (lambda () (lE2b63@installed-libraries '#f)) lE2cd6) (error 'apply '"invalid arg count")))))) (set! lE2d12@lE2b63@installed-libraries lE2b63@installed-libraries) (set! lE2b65@library-spec (lambda (lE2cd8@x) (begin (if (not (lE2af9@library? lE2cd8@x)) (assertion-violation 'library-spec '"not a library" lE2cd8@x) (void)) (list (lE2afb@library-id lE2cd8@x) (lE2aff@library-name lE2cd8@x) (lE2b03@library-version lE2cd8@x))))) (set! lE2d13@lE2b65@library-spec lE2b65@library-spec) (void))
(begin (set! lE2d17@build-global-define (unspecified)) (set! lE2d88@build-lambda (unspecified)) (set! lE2d8a@build-case-lambda (unspecified)) (set! lE2db8@build-sequence (unspecified)) (set! lE2dba@build-void (unspecified)) (set! lE2dbc@build-letrec (unspecified)) (set! lE2dbe@build-let (unspecified)) (set! lE2dc0@build-named-let (unspecified)) (set! lE2dc2@build-letrec* (unspecified)) (set! lE2dc4@build-library-letrec* (unspecified)) (set! lE2dc6@build-receive (unspecified)) (set! lE2d17@build-global-define (lambda (lE2dc7@x) (lE2dba@build-void))) (set! lE2e55@lE2d17@build-global-define lE2d17@build-global-define) (set! lE2d88@build-lambda (lambda (lE2dc9@ae lE2dca@vars lE2dcb@exp) (list 'lambda lE2dca@vars lE2dcb@exp))) (set! lE2e56@lE2d88@build-lambda lE2d88@build-lambda) (set! lE2d8a@build-case-lambda (lambda (lE2dcf@ae lE2dd0@vars* lE2dd1@exp*) (letrec* ((lE2dd6@build-error (lambda (lE2e0d@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (lE2dd8@build-pred (lambda (lE2df5@ae lE2df6@n lE2df7@vars) (call-with-values (lambda () (let lE2e03@f ((lE2dff@vars lE2df7@vars) (lE2e00@count '0)) (if (pair? lE2dff@vars) (lE2e03@f (cdr lE2dff@vars) (+ lE2e00@count '1)) (if (null? lE2dff@vars) (values lE2e00@count '=) (values lE2e00@count '>=))))) (lambda (lE2e05@lE2dfc lE2e06@lE2dfe) (let ((lE2e09@pred lE2e06@lE2dfe) (lE2e0a@count lE2e05@lE2dfc)) (list (list 'primitive lE2e09@pred) lE2df6@n (list 'quote lE2e0a@count))))))) (lE2dda@build-apply (lambda (lE2ded@ae lE2dee@g lE2def@vars lE2df0@exp) (list '(primitive apply) (lE2d88@build-lambda lE2ded@ae lE2def@vars lE2df0@exp) lE2dee@g))) (lE2ddc@expand-case-lambda (lambda (lE2ddd@ae lE2dde@vars lE2ddf@exp*) (let ((lE2de3@g (gensym)) (lE2de4@n (gensym))) (list 'lambda lE2de3@g (lE2dbe@build-let lE2ddd@ae (list lE2de4@n) (list (list '(primitive length) lE2de3@g)) (let lE2deb@f ((lE2de7@vars* lE2dd0@vars*) (lE2de8@exp* lE2ddf@exp*)) (if (null? lE2de7@vars*) (lE2dd6@build-error lE2ddd@ae) (list 'if (lE2dd8@build-pred lE2ddd@ae lE2de4@n (car lE2de7@vars*)) (lE2dda@build-apply lE2ddd@ae lE2de3@g (car lE2de7@vars*) (car lE2de8@exp*)) (lE2deb@f (cdr lE2de7@vars*) (cdr lE2de8@exp*))))))))))) (if (= (length lE2dd1@exp*) '1) (lE2d88@build-lambda lE2dcf@ae (car lE2dd0@vars*) (car lE2dd1@exp*)) (lE2ddc@expand-case-lambda lE2dcf@ae lE2dd0@vars* lE2dd1@exp*))))) (set! lE2e57@lE2d8a@build-case-lambda lE2d8a@build-case-lambda) (set! lE2db8@build-sequence (lambda (lE2e0f@ae lE2e10@exps) (let lE2e15@loop ((lE2e13@exps lE2e10@exps)) (if (null? (cdr lE2e13@exps)) (car lE2e13@exps) (if (equal? (car lE2e13@exps) (lE2dba@build-void)) (lE2e15@loop (cdr lE2e13@exps)) (cons 'begin lE2e13@exps)))))) (set! lE2e58@lE2db8@build-sequence lE2db8@build-sequence) (set! lE2dba@build-void (lambda () '((primitive void)))) (set! lE2e59@lE2dba@build-void lE2dba@build-void) (set! lE2dbc@build-letrec (lambda (lE2e17@ae lE2e18@vars lE2e19@val-exps lE2e1a@body-exp) (if (null? lE2e18@vars) lE2e1a@body-exp (list 'letrec (map list lE2e18@vars lE2e19@val-exps) lE2e1a@body-exp)))) (set! lE2e5a@lE2dbc@build-letrec lE2dbc@build-letrec) (set! lE2dbe@build-let (lambda (lE2e1f@ae lE2e20@vars lE2e21@val-exps lE2e22@body-exp) (if (null? lE2e20@vars) lE2e22@body-exp (list 'let (map list lE2e20@vars lE2e21@val-exps) lE2e22@body-exp)))) (set! lE2e5b@lE2dbe@build-let lE2dbe@build-let) (set! lE2dc0@build-named-let (lambda (lE2e27@ae lE2e28@name lE2e29@vars lE2e2a@val-exps lE2e2b@body-exp) (list 'let lE2e28@name (map list lE2e29@vars lE2e2a@val-exps) lE2e2b@body-exp))) (set! lE2e5c@lE2dc0@build-named-let lE2dc0@build-named-let) (set! lE2dc2@build-letrec* (lambda (lE2e31@ae lE2e32@vars lE2e33@val-exps lE2e34@body-exp) (if (null? lE2e32@vars) lE2e34@body-exp (list 'letrec* (map list lE2e32@vars lE2e33@val-exps) lE2e34@body-exp)))) (set! lE2e5d@lE2dc2@build-letrec* lE2dc2@build-letrec*) (set! lE2dc4@build-library-letrec* (lambda (lE2e39@ae lE2e3a@name lE2e3b@vars lE2e3c@locs lE2e3d@val-exps lE2e3e@body-exp) (cons 'begin (append (map (lambda (lE2e45@var) (cons 'set! (cons lE2e45@var '((unspecified))))) lE2e3b@vars) (append (apply append (map (lambda (lE2e47@var lE2e48@loc lE2e49@val-exp) (list (list 'set! lE2e47@var lE2e49@val-exp) (list 'set! lE2e48@loc lE2e47@var))) lE2e3b@vars lE2e3c@locs lE2e3d@val-exps)) (list lE2e3e@body-exp)))))) (set! lE2e5e@lE2dc4@build-library-letrec* lE2dc4@build-library-letrec*) (set! lE2dc6@build-receive (lambda (lE2e4d@ae lE2e4e@vars lE2e4f@producer lE2e50@body*) (begin (display '"************** in ") (cons 'receive (cons lE2e4e@vars (cons lE2e4f@producer lE2e50@body*)))))) (set! lE2e5f@lE2dc6@build-receive lE2dc6@build-receive) (void))
(begin (set! lE2e6e@file-options-macro (unspecified)) (set! lE2e70@set-cons (unspecified)) (set! lE2e72@set-union (unspecified)) (set! lE2e77@top-mark* (unspecified)) (set! lE2e79@top-marked? (unspecified)) (set! lE2e7b@gen-lexical (unspecified)) (set! lE2e7d@gen-global (unspecified)) (set! lE2e7f@gen-label (unspecified)) (set! lE2e81@gen-top-level-label (unspecified)) (set! lE2e83@gen-define-label+loc (unspecified)) (set! lE2e85@gen-define-label (unspecified)) (set! lE2e8f@rib? (unspecified)) (set! lE2e91@rib-sym* (unspecified)) (set! lE2e93@set-rib-sym*! (unspecified)) (set! lE2e95@rib-mark** (unspecified)) (set! lE2e97@set-rib-mark**! (unspecified)) (set! lE2e99@rib-label* (unspecified)) (set! lE2e9b@set-rib-label*! (unspecified)) (set! lE2e9d@rib-sealed/freq (unspecified)) (set! lE2e9f@set-rib-sealed/freq! (unspecified)) (set! lE2ea1@rib-cache (unspecified)) (set! lE2ea3@set-rib-cache! (unspecified)) (set! lE2ea5@dummy (unspecified)) (set! lE2ea7@make-empty-rib (unspecified)) (set! lE2ea9@extend-rib! (unspecified)) (set! lE2eab@extend-rib/nc! (unspecified)) (set! lE2ead@make-rib-map (unspecified)) (set! lE2eaf@seal-rib! (unspecified)) (set! lE2eb1@unseal-rib! (unspecified)) (set! lE2eb3@make-full-rib (unspecified)) (set! lE2eb5@rp (unspecified)) (set! lE2ebf@stx? (unspecified)) (set! lE2ec1@stx-expr (unspecified)) (set! lE2ec3@set-stx-expr! (unspecified)) (set! lE2ec5@stx-mark* (unspecified)) (set! lE2ec7@set-stx-mark*! (unspecified)) (set! lE2ec9@stx-subst* (unspecified)) (set! lE2ecb@set-stx-subst*! (unspecified)) (set! lE2ecd@stx-ae* (unspecified)) (set! lE2ecf@set-stx-ae*! (unspecified)) (set! lE2ed1@dummy (unspecified)) (set! lE2ed3@datum->stx (unspecified)) (set! lE2ed5@gen-mark (unspecified)) (set! lE2ed7@anti-mark (unspecified)) (set! lE2ed9@anti-mark? (unspecified)) (set! lE2edb@mkstx (unspecified)) (set! lE2edd@add-subst (unspecified)) (set! lE2edf@add-mark (unspecified)) (set! lE2ee1@syntax-kind? (unspecified)) (set! lE2ee3@syntax-vector->list (unspecified)) (set! lE2ee5@syntax-pair? (unspecified)) (set! lE2ee7@syntax-vector? (unspecified)) (set! lE2ee9@syntax-null? (unspecified)) (set! lE2eeb@syntax-list? (unspecified)) (set! lE2eed@syntax-car (unspecified)) (set! lE2eef@syntax-cdr (unspecified)) (set! lE2ef1@syntax->list (unspecified)) (set! lE2ef3@id? (unspecified)) (set! lE2ef5@id->sym (unspecified)) (set! lE2ef7@bound-id=? (unspecified)) (set! lE2ef9@free-id=? (unspecified)) (set! lE2efb@valid-bound-ids? (unspecified)) (set! lE2efd@distinct-bound-ids? (unspecified)) (set! lE2eff@bound-id-member? (unspecified)) (set! lE2f01@self-evaluating? (unspecified)) (set! lE2f03@strip-annotations (unspecified)) (set! lE2f05@strip (unspecified)) (set! lE2f07@stx->datum (unspecified)) (set! lE2f09@id->label (unspecified)) (set! lE2f0b@label->binding (unspecified)) (set! lE2f0d@make-binding (unspecified)) (set! lE2f0f@binding-type (unspecified)) (set! lE2f11@binding-value (unspecified)) (set! lE2f13@raise-unbound-error (unspecified)) (set! lE2f15@syntax-type (unspecified)) (set! lE2f23@sanitize-binding (unspecified)) (set! lE2f25@make-variable-transformer (unspecified)) (set! lE2f27@variable-transformer? (unspecified)) (set! lE2f29@variable-transformer-procedure (unspecified)) (set! lE2f2b@make-eval-transformer (unspecified)) (set! lE307c@parse-define (unspecified)) (set! lE307e@parse-define-syntax (unspecified)) (set! lE3080@scheme-stx-hashtable (unspecified)) (set! lE3082@scheme-stx (unspecified)) (set! lE3084@lexical-var (unspecified)) (set! lE3086@lexical-mutable? (unspecified)) (set! lE3088@set-lexical-mutable! (unspecified)) (set! lE308a@add-lexical (unspecified)) (set! lE308c@add-lexicals (unspecified)) (set! lE308e@letrec-helper (unspecified)) (set! lE3090@let-transformer (unspecified)) (set! lE3092@letrec-transformer (unspecified)) (set! lE3094@letrec*-transformer (unspecified)) (set! lE3096@fluid-let-syntax-transformer (unspecified)) (set! lE3098@type-descriptor-transformer (unspecified)) (set! lE309a@record-type-descriptor-transformer (unspecified)) (set! lE309c@record-constructor-descriptor-transformer (unspecified)) (set! lE309e@when-macro (unspecified)) (set! lE30a0@unless-macro (unspecified)) (set! lE30a2@if-transformer (unspecified)) (set! lE30a4@and-transformer (unspecified)) (set! lE30a6@or-transformer (unspecified)) (set! lE30a8@case-macro (unspecified)) (set! lE30aa@quote-transformer (unspecified)) (set! lE30ac@case-lambda-transformer (unspecified)) (set! lE30ae@lambda-transformer (unspecified)) (set! lE30b0@bless (unspecified)) (set! lE30b2@with-syntax-macro (unspecified)) (set! lE30b4@invalid-fmls-error (unspecified)) (set! lE30b6@let-macro (unspecified)) (set! lE30b8@let-values-macro (unspecified)) (set! lE30ba@let*-values-macro (unspecified)) (set! lE30bc@trace-lambda-macro (unspecified)) (set! lE30be@trace-define-macro (unspecified)) (set! lE30c0@trace-define-syntax-macro (unspecified)) (set! lE30c2@trace-let/rec-syntax (unspecified)) (set! lE30c4@trace-let-syntax-macro (unspecified)) (set! lE30c6@trace-letrec-syntax-macro (unspecified)) (set! lE30c8@guard-macro (unspecified)) (set! lE30ca@define-enumeration-macro (unspecified)) (set! lE30cc@time-macro (unspecified)) (set! lE30ce@delay-macro (unspecified)) (set! lE30d0@assert-macro (unspecified)) (set! lE30d2@endianness-macro (unspecified)) (set! lE30d4@identifier-syntax-macro (unspecified)) (set! lE30d6@do-macro (unspecified)) (set! lE30d8@let*-macro (unspecified)) (set! lE30da@or-macro (unspecified)) (set! lE30dc@and-macro (unspecified)) (set! lE30de@cond-macro (unspecified)) (set! lE30e0@do-include (unspecified)) (set! lE30e2@include-macro (unspecified)) (set! lE30e4@include-into-macro (unspecified)) (set! lE30e6@syntax-rules-macro (unspecified)) (set! lE30e8@quasiquote-macro (unspecified)) (set! lE30ea@quasisyntax-macro (unspecified)) (set! lE30ec@define-struct-macro (unspecified)) (set! lE30ee@define-record-type-macro (unspecified)) (set! lE30f0@define-condition-type-macro (unspecified)) (set! lE30f2@incorrect-usage-macro (unspecified)) (set! lE30f4@parameterize-macro (unspecified)) (set! lE30f6@foreign-call-transformer (unspecified)) (set! lE30f8@convert-pattern (unspecified)) (set! lE30fa@syntax-dispatch (unspecified)) (set! lE30fc@ellipsis? (unspecified)) (set! lE30fe@underscore? (unspecified)) (set! lE3100@verify-literals (unspecified)) (set! lE3102@syntax-case-transformer (unspecified)) (set! lE3104@ellipsis-map (unspecified)) (set! lE3106@syntax-transformer (unspecified)) (set! lE3108@core-macro-transformer (unspecified)) (set! lE310a@symbol-macro (unspecified)) (set! lE310c@macro-transformer (unspecified)) (set! lE310e@local-macro-transformer (unspecified)) (set! lE3110@do-macro-call (unspecified)) (set! lE3112@chi-macro (unspecified)) (set! lE3114@chi-local-macro (unspecified)) (set! lE3116@chi-global-macro (unspecified)) (set! lE3118@chi-expr* (unspecified)) (set! lE311a@chi-application (unspecified)) (set! lE311c@chi-expr (unspecified)) (set! lE311e@chi-set! (unspecified)) (set! lE3120@verify-formals (unspecified)) (set! lE3122@chi-lambda-clause (unspecified)) (set! lE3124@chi-lambda-clause* (unspecified)) (set! lE3126@chi-defun (unspecified)) (set! lE3128@chi-rhs (unspecified)) (set! lE312a@expand-interaction-rhs*/init* (unspecified)) (set! lE312c@chi-rhs* (unspecified)) (set! lE312e@find-bound=? (unspecified)) (set! lE3130@find-dups (unspecified)) (set! lE3132@chi-internal (unspecified)) (set! lE3134@parse-module (unspecified)) (set! lE313e@module-interface? (unspecified)) (set! lE3140@module-interface-first-mark (unspecified)) (set! lE3142@set-module-interface-first-mark! (unspecified)) (set! lE3144@module-interface-exp-id-vec (unspecified)) (set! lE3146@set-module-interface-exp-id-vec! (unspecified)) (set! lE3148@module-interface-exp-lab-vec (unspecified)) (set! lE314a@set-module-interface-exp-lab-vec! (unspecified)) (set! lE314c@dummy (unspecified)) (set! lE314e@module-interface-exp-id* (unspecified)) (set! lE3150@chi-internal-module (unspecified)) (set! lE3152@chi-body* (unspecified)) (set! lE3154@expand-transformer (unspecified)) (set! lE3156@parse-exports (unspecified)) (set! lE3158@parse-library-name (unspecified)) (set! lE315a@parse-library (unspecified)) (set! lE315c@parse-import-spec* (unspecified)) (set! lE315e@make-top-rib (unspecified)) (set! lE3160@make-collector (unspecified)) (set! lE3162@inv-collector (unspecified)) (set! lE3164@vis-collector (unspecified)) (set! lE3166@imp-collector (unspecified)) (set! lE3168@chi-library-internal (unspecified)) (set! lE316a@chi-interaction-expr (unspecified)) (set! lE316c@library-body-expander (unspecified)) (set! lE316e@core-library-expander (unspecified)) (set! lE3170@parse-top-level-program (unspecified)) (set! lE3172@top-level-expander (unspecified)) (set! lE3174@rp (unspecified)) (set! lE317e@env? (unspecified)) (set! lE3180@env-names (unspecified)) (set! lE3182@set-env-names! (unspecified)) (set! lE3184@env-labels (unspecified)) (set! lE3186@set-env-labels! (unspecified)) (set! lE3188@env-itc (unspecified)) (set! lE318a@set-env-itc! (unspecified)) (set! lE318c@dummy (unspecified)) (set! lE318e@rp (unspecified)) (set! lE3198@interaction-env? (unspecified)) (set! lE319a@interaction-env-rib (unspecified)) (set! lE319c@set-interaction-env-rib! (unspecified)) (set! lE319e@interaction-env-r (unspecified)) (set! lE31a0@set-interaction-env-r! (unspecified)) (set! lE31a2@interaction-env-locs (unspecified)) (set! lE31a4@set-interaction-env-locs! (unspecified)) (set! lE31a6@dummy (unspecified)) (set! lE31a8@interaction-environment-symbols (unspecified)) (set! lE31aa@environment-bindings (unspecified)) (set! lE31ac@parse-binding (unspecified)) (set! lE31ae@environment? (unspecified)) (set! lE31b0@environment-symbols (unspecified)) (set! lE31b2@environment (unspecified)) (set! lE31b4@null-environment (unspecified)) (set! lE31b6@scheme-report-environment (unspecified)) (set! lE31b8@expand (unspecified)) (set! lE31ba@eval (unspecified)) (set! lE31bc@library-expander (unspecified)) (set! lE31be@boot-library-expand (unspecified)) (set! lE31c0@rev-map-append (unspecified)) (set! lE31c2@build-exports (unspecified)) (set! lE31c4@make-export-subst (unspecified)) (set! lE31c6@make-export-env/macros (unspecified)) (set! lE31c8@generate-temporaries (unspecified)) (set! lE31ca@free-identifier=? (unspecified)) (set! lE31cc@bound-identifier=? (unspecified)) (set! lE31ce@make-source-condition (unspecified)) (set! lE31d0@extract-position-condition (unspecified)) (set! lE31d2@expression-position (unspecified)) (set! lE31d4@assertion-error (unspecified)) (set! lE31d6@syntax-error (unspecified)) (set! lE31d8@syntax-violation* (unspecified)) (set! lE31da@syntax-violation (unspecified)) (set! lE31dc@identifier? (unspecified)) (set! lE31de@datum->syntax (unspecified)) (set! lE31e0@syntax->datum (unspecified)) (set! lE31e2@ungensym-all (unspecified)) (set! lE31e4@compile-r6rs-top-level (unspecified)) (set! lE31e6@pre-compile-r6rs-top-level (unspecified)) (set! lE31e8@interaction-environment (unspecified)) (set! lE31ea@top-level-context (unspecified)) (set! lE2e6e@file-options-macro (lambda (lE31eb@x) (letrec* ((lE31ee@valid-option? (lambda (lE31f7@x) (and (lE2ef3@id? lE31f7@x) (memq (lE2ef5@id->sym lE31f7@x) '(no-fail no-create no-truncate)))))) (let ((lE31ef@t lE31eb@x)) (let ((lE31f1@ls/false (lE30fa@syntax-dispatch lE31ef@t '(_ . each-any)))) (if (and lE31f1@ls/false (apply (lambda (lE31f3@opt*) (for-all lE31ee@valid-option? lE31f3@opt*)) lE31f1@ls/false)) (apply (lambda (lE31f5@opt*) (lE30b0@bless (list 'make-file-options (list 'quote lE31f5@opt*)))) lE31f1@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE31ef@t))))))) (set! lE4b77@lE2e6e@file-options-macro lE2e6e@file-options-macro) (set! lE2e70@set-cons (lambda (lE31f9@x lE31fa@ls) (if (memq lE31f9@x lE31fa@ls) lE31fa@ls (cons lE31f9@x lE31fa@ls)))) (set! lE4b78@lE2e70@set-cons lE2e70@set-cons) (set! lE2e72@set-union (lambda (lE31fd@ls1 lE31fe@ls2) (if (null? lE31fd@ls1) lE31fe@ls2 (if (memq (car lE31fd@ls1) lE31fe@ls2) (lE2e72@set-union (cdr lE31fd@ls1) lE31fe@ls2) (cons (car lE31fd@ls1) (lE2e72@set-union (cdr lE31fd@ls1) lE31fe@ls2)))))) (set! lE4b79@lE2e72@set-union lE2e72@set-union) (set! lE2e77@top-mark* '(top)) (set! lE4b7a@lE2e77@top-mark* lE2e77@top-mark*) (set! lE2e79@top-marked? (lambda (lE3201@m*) (memq 'top lE3201@m*))) (set! lE4b7b@lE2e79@top-marked? lE2e79@top-marked?) (set! lE2e7b@gen-lexical (lambda (lE3203@sym) (if (symbol? lE3203@sym) (gensym lE3203@sym) (if (lE2ebf@stx? lE3203@sym) (lE2e7b@gen-lexical (lE2ef5@id->sym lE3203@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" lE3203@sym))))) (set! lE4b7c@lE2e7b@gen-lexical lE2e7b@gen-lexical) (set! lE2e7d@gen-global (lambda (lE3205@x) (lE2e7b@gen-lexical lE3205@x))) (set! lE4b7d@lE2e7d@gen-global lE2e7d@gen-global) (set! lE2e7f@gen-label (lambda (lE3207@_) (gensym))) (set! lE4b7e@lE2e7f@gen-label lE2e7f@gen-label) (set! lE2e81@gen-top-level-label (lambda (lE3209@id lE320a@rib) (letrec* ((lE320e@find (lambda (lE3219@sym lE321a@mark* lE321b@sym* lE321c@mark** lE321d@label*) (and (pair? lE321b@sym*) (if (and (eq? lE3219@sym (car lE321b@sym*)) (same-marks? lE321a@mark* (car lE321c@mark**))) (car lE321d@label*) (lE320e@find lE3219@sym lE321a@mark* (cdr lE321b@sym*) (cdr lE321c@mark**) (cdr lE321d@label*))))))) (let ((lE320f@sym (lE2ef5@id->sym lE3209@id)) (lE3210@mark* (lE2ec5@stx-mark* lE3209@id))) (let ((lE3213@sym* (lE2e91@rib-sym* lE320a@rib))) (let ((lE3215@t (and (memq lE320f@sym (lE2e91@rib-sym* lE320a@rib)) (lE320e@find lE320f@sym lE3210@mark* lE3213@sym* (lE2e95@rib-mark** lE320a@rib) (lE2e99@rib-label* lE320a@rib))))) (if lE3215@t ((lambda (lE3217@label) (if (lE2d0e@lE2b5b@imported-label->binding lE3217@label) (gensym) lE3217@label)) lE3215@t) (gensym)))))))) (set! lE4b7f@lE2e81@gen-top-level-label lE2e81@gen-top-level-label) (set! lE2e83@gen-define-label+loc (lambda (lE3223@id lE3224@rib) (let ((lE3227@t (lE31ea@top-level-context))) (if lE3227@t ((lambda (lE3229@env) (let ((lE322b@label (lE2e81@gen-top-level-label lE3223@id lE3224@rib)) (lE322c@locs (lE31a2@interaction-env-locs lE3229@env))) (values lE322b@label (let ((lE322f@t (assq lE322b@label lE322c@locs))) (if lE322f@t (cdr lE322f@t) (let ((lE3231@loc (lE2e7b@gen-lexical lE3223@id))) (begin (lE31a4@set-interaction-env-locs! lE3229@env (cons (cons lE322b@label lE3231@loc) lE322c@locs)) lE3231@loc))))))) lE3227@t) (values (gensym) (lE2e7b@gen-lexical lE3223@id)))))) (set! lE4b80@lE2e83@gen-define-label+loc lE2e83@gen-define-label+loc) (set! lE2e85@gen-define-label (lambda (lE3233@id lE3234@rib) (if (lE31ea@top-level-context) (lE2e81@gen-top-level-label lE3233@id lE3234@rib) (gensym)))) (set! lE4b81@lE2e85@gen-define-label lE2e85@gen-define-label) (set! lE2e8f@rib? (lambda (lE3237@x) (and (simple-struct? lE3237@x) (eq? (simple-struct-name lE3237@x) 'rib)))) (set! lE4b82@lE2e8f@rib? lE2e8f@rib?) (set! lE2e91@rib-sym* (lambda (lE3239@x) (simple-struct-ref lE3239@x '0))) (set! lE4b83@lE2e91@rib-sym* lE2e91@rib-sym*) (set! lE2e93@set-rib-sym*! (lambda (lE323b@x lE323c@val) (simple-struct-set! lE323b@x '0 lE323c@val))) (set! lE4b84@lE2e93@set-rib-sym*! lE2e93@set-rib-sym*!) (set! lE2e95@rib-mark** (lambda (lE323f@x) (simple-struct-ref lE323f@x '1))) (set! lE4b85@lE2e95@rib-mark** lE2e95@rib-mark**) (set! lE2e97@set-rib-mark**! (lambda (lE3241@x lE3242@val) (simple-struct-set! lE3241@x '1 lE3242@val))) (set! lE4b86@lE2e97@set-rib-mark**! lE2e97@set-rib-mark**!) (set! lE2e99@rib-label* (lambda (lE3245@x) (simple-struct-ref lE3245@x '2))) (set! lE4b87@lE2e99@rib-label* lE2e99@rib-label*) (set! lE2e9b@set-rib-label*! (lambda (lE3247@x lE3248@val) (simple-struct-set! lE3247@x '2 lE3248@val))) (set! lE4b88@lE2e9b@set-rib-label*! lE2e9b@set-rib-label*!) (set! lE2e9d@rib-sealed/freq (lambda (lE324b@x) (simple-struct-ref lE324b@x '3))) (set! lE4b89@lE2e9d@rib-sealed/freq lE2e9d@rib-sealed/freq) (set! lE2e9f@set-rib-sealed/freq! (lambda (lE324d@x lE324e@val) (simple-struct-set! lE324d@x '3 lE324e@val))) (set! lE4b8a@lE2e9f@set-rib-sealed/freq! lE2e9f@set-rib-sealed/freq!) (set! lE2ea1@rib-cache (lambda (lE3251@x) (simple-struct-ref lE3251@x '4))) (set! lE4b8b@lE2ea1@rib-cache lE2ea1@rib-cache) (set! lE2ea3@set-rib-cache! (lambda (lE3253@x lE3254@val) (simple-struct-set! lE3253@x '4 lE3254@val))) (set! lE4b8c@lE2ea3@set-rib-cache! lE2ea3@set-rib-cache!) (set! lE2ea5@dummy '3) (set! lE4b8d@lE2ea5@dummy lE2ea5@dummy) (set! lE2ea7@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! lE4b8e@lE2ea7@make-empty-rib lE2ea7@make-empty-rib) (set! lE2ea9@extend-rib! (lambda (lE3257@rib lE3258@id lE3259@label) (letrec* ((lE325e@find (lambda (lE326b@sym lE326c@mark* lE326d@sym* lE326e@mark** lE326f@label*) (and (pair? lE326d@sym*) (if (and (eq? lE326b@sym (car lE326d@sym*)) (same-marks? lE326c@mark* (car lE326e@mark**))) lE326f@label* (lE325e@find lE326b@sym lE326c@mark* (cdr lE326d@sym*) (cdr lE326e@mark**) (cdr lE326f@label*))))))) (begin (if (lE2e9d@rib-sealed/freq lE3257@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" lE3257@rib) (void)) (let ((lE325f@sym (lE2ef5@id->sym lE3258@id)) (lE3260@mark* (lE2ec5@stx-mark* lE3258@id))) (let ((lE3263@sym* (lE2e91@rib-sym* lE3257@rib))) (let ((lE3265@t (and (memq lE325f@sym (lE2e91@rib-sym* lE3257@rib)) (lE325e@find lE325f@sym lE3260@mark* lE3263@sym* (lE2e95@rib-mark** lE3257@rib) (lE2e99@rib-label* lE3257@rib))))) (if lE3265@t ((lambda (lE3267@p) (if (not (eq? lE3259@label (car lE3267@p))) (if (lE31ea@top-level-context) (set-car! lE3267@p lE3259@label) (lE31da@syntax-violation '#f '"multiple definitions of identifier" lE3258@id)) (void))) lE3265@t) (begin (if (lE2ea1@rib-cache lE3257@rib) (hashtable-update! (lE2ea1@rib-cache lE3257@rib) lE325f@sym (lambda (lE3269@e) (cons (cons lE3260@mark* lE3259@label) lE3269@e)) '()) (void)) (lE2e93@set-rib-sym*! lE3257@rib (cons lE325f@sym lE3263@sym*)) (lE2e97@set-rib-mark**! lE3257@rib (cons lE3260@mark* (lE2e95@rib-mark** lE3257@rib))) (lE2e9b@set-rib-label*! lE3257@rib (cons lE3259@label (lE2e99@rib-label* lE3257@rib)))))))))))) (set! lE4b8f@lE2ea9@extend-rib! lE2ea9@extend-rib!) (set! lE2eab@extend-rib/nc! (lambda (lE3275@rib lE3276@id lE3277@label) (let ((lE327b@sym (lE2ef5@id->sym lE3276@id)) (lE327c@mark* (lE2ec5@stx-mark* lE3276@id))) (let ((lE327f@sym* (lE2e91@rib-sym* lE3275@rib))) (begin (if (lE2ea1@rib-cache lE3275@rib) (hashtable-update! (lE2ea1@rib-cache lE3275@rib) lE327b@sym (lambda (lE3281@e) (cons (cons lE327c@mark* lE3277@label) lE3281@e)) '()) (void)) (lE2e93@set-rib-sym*! lE3275@rib (cons lE327b@sym lE327f@sym*)) (lE2e97@set-rib-mark**! lE3275@rib (cons lE327c@mark* (lE2e95@rib-mark** lE3275@rib))) (lE2e9b@set-rib-label*! lE3275@rib (cons lE3277@label (lE2e99@rib-label* lE3275@rib)))))))) (set! lE4b90@lE2eab@extend-rib/nc! lE2eab@extend-rib/nc!) (set! lE2ead@make-rib-map (lambda (lE3283@sym*) (let ((lE3285@ht (make-eq-hashtable))) (let lE328b@f ((lE3287@i '0) (lE3288@sym* lE3283@sym*)) (if (null? lE3288@sym*) lE3285@ht (begin (hashtable-update! lE3285@ht (car lE3288@sym*) (lambda (lE328d@x) (cons lE3287@i lE328d@x)) '()) (lE328b@f (+ lE3287@i '1) (cdr lE3288@sym*)))))))) (set! lE4b91@lE2ead@make-rib-map lE2ead@make-rib-map) (set! lE2eaf@seal-rib! (lambda (lE328f@rib) (let ((lE3291@sym* (lE2e91@rib-sym* lE328f@rib))) (if (not (null? lE3291@sym*)) (begin (lE2e93@set-rib-sym*! lE328f@rib (list->vector lE3291@sym*)) (lE2e97@set-rib-mark**! lE328f@rib (list->vector (lE2e95@rib-mark** lE328f@rib))) (lE2e9b@set-rib-label*! lE328f@rib (list->vector (lE2e99@rib-label* lE328f@rib))) (lE2e9f@set-rib-sealed/freq! lE328f@rib (lE2ead@make-rib-map lE3291@sym*))) (void))))) (set! lE4b92@lE2eaf@seal-rib! lE2eaf@seal-rib!) (set! lE2eb1@unseal-rib! (lambda (lE3293@rib) (if (lE2e9d@rib-sealed/freq lE3293@rib) (begin (lE2e9f@set-rib-sealed/freq! lE3293@rib '#f) (lE2e93@set-rib-sym*! lE3293@rib (vector->list (lE2e91@rib-sym* lE3293@rib))) (lE2e97@set-rib-mark**! lE3293@rib (vector->list (lE2e95@rib-mark** lE3293@rib))) (lE2e9b@set-rib-label*! lE3293@rib (vector->list (lE2e99@rib-label* lE3293@rib)))) (void)))) (set! lE4b93@lE2eb1@unseal-rib! lE2eb1@unseal-rib!) (set! lE2eb3@make-full-rib (lambda (lE3295@id* lE3296@label*) (let ((lE3299@r (make-simple-struct 'rib '6 (list (map lE2ef5@id->sym lE3295@id*) (map lE2ec5@stx-mark* lE3295@id*) lE3296@label* '#f '#f)))) (begin (lE2eaf@seal-rib! lE3299@r) lE3299@r)))) (set! lE4b94@lE2eb3@make-full-rib lE2eb3@make-full-rib) (set! lE2eb5@rp (lE2a40@lE291b@make-record-printer 'stx (lambda (lE329b@x lE329c@p lE329d@wr) (begin (display '"#<syntax " lE329c@p) (write (lE2f07@stx->datum lE329b@x) lE329c@p) (let ((lE32a1@expr (lE2ec1@stx-expr lE329b@x))) (if (lE2a37@lE2909@annotation? lE32a1@expr) (let ((lE32a3@src (lE2a38@lE290b@annotation-source lE32a1@expr))) (if (pair? lE32a3@src) (begin (display '" [" lE329c@p) (display (cdr lE32a3@src) lE329c@p) (display '" of " lE329c@p) (display (car lE32a3@src) lE329c@p) (display '"]" lE329c@p)) (void))) (void))) (display '">" lE329c@p))))) (set! lE4b95@lE2eb5@rp lE2eb5@rp) (set! lE2ebf@stx? (lambda (lE32a5@x) (and (simple-struct? lE32a5@x) (eq? (simple-struct-name lE32a5@x) 'stx)))) (set! lE4b96@lE2ebf@stx? lE2ebf@stx?) (set! lE2ec1@stx-expr (lambda (lE32a7@x) (simple-struct-ref lE32a7@x '0))) (set! lE4b97@lE2ec1@stx-expr lE2ec1@stx-expr) (set! lE2ec3@set-stx-expr! (lambda (lE32a9@x lE32aa@val) (simple-struct-set! lE32a9@x '0 lE32aa@val))) (set! lE4b98@lE2ec3@set-stx-expr! lE2ec3@set-stx-expr!) (set! lE2ec5@stx-mark* (lambda (lE32ad@x) (simple-struct-ref lE32ad@x '1))) (set! lE4b99@lE2ec5@stx-mark* lE2ec5@stx-mark*) (set! lE2ec7@set-stx-mark*! (lambda (lE32af@x lE32b0@val) (simple-struct-set! lE32af@x '1 lE32b0@val))) (set! lE4b9a@lE2ec7@set-stx-mark*! lE2ec7@set-stx-mark*!) (set! lE2ec9@stx-subst* (lambda (lE32b3@x) (simple-struct-ref lE32b3@x '2))) (set! lE4b9b@lE2ec9@stx-subst* lE2ec9@stx-subst*) (set! lE2ecb@set-stx-subst*! (lambda (lE32b5@x lE32b6@val) (simple-struct-set! lE32b5@x '2 lE32b6@val))) (set! lE4b9c@lE2ecb@set-stx-subst*! lE2ecb@set-stx-subst*!) (set! lE2ecd@stx-ae* (lambda (lE32b9@x) (simple-struct-ref lE32b9@x '3))) (set! lE4b9d@lE2ecd@stx-ae* lE2ecd@stx-ae*) (set! lE2ecf@set-stx-ae*! (lambda (lE32bb@x lE32bc@val) (simple-struct-set! lE32bb@x '3 lE32bc@val))) (set! lE4b9e@lE2ecf@set-stx-ae*! lE2ecf@set-stx-ae*!) (set! lE2ed1@dummy '3) (set! lE4b9f@lE2ed1@dummy lE2ed1@dummy) (set! lE2ed3@datum->stx (lambda (lE32bf@id lE32c0@datum) (make-simple-struct 'stx '5 (list lE32c0@datum (lE2ec5@stx-mark* lE32bf@id) (lE2ec9@stx-subst* lE32bf@id) (lE2ecd@stx-ae* lE32bf@id))))) (set! lE4ba0@lE2ed3@datum->stx lE2ed3@datum->stx) (set! lE2ed5@gen-mark (lambda () (string '#\m))) (set! lE4ba1@lE2ed5@gen-mark lE2ed5@gen-mark) (set! lE2ed7@anti-mark '#f) (set! lE4ba2@lE2ed7@anti-mark lE2ed7@anti-mark) (set! lE2ed9@anti-mark? not) (set! lE4ba3@lE2ed9@anti-mark? lE2ed9@anti-mark?) (set! lE2edb@mkstx (lambda (lE32c3@e lE32c4@m* lE32c5@s* lE32c6@ae*) (if (and (lE2ebf@stx? lE32c3@e) (not (lE2e79@top-marked? lE32c4@m*))) (call-with-values (lambda () (join-wraps lE32c4@m* lE32c5@s* lE32c6@ae* lE32c3@e)) (lambda (lE32d1@lE32cc lE32d2@lE32ce lE32d3@lE32d0) (let ((lE32d7@ae* lE32d3@lE32d0) (lE32d8@s* lE32d2@lE32ce) (lE32d9@m* lE32d1@lE32cc)) (make-simple-struct 'stx '5 (list (lE2ec1@stx-expr lE32c3@e) lE32d9@m* lE32d8@s* lE32d7@ae*))))) (make-simple-struct 'stx '5 (list lE32c3@e lE32c4@m* lE32c5@s* lE32c6@ae*))))) (set! lE4ba4@lE2edb@mkstx lE2edb@mkstx) (set! lE2edd@add-subst (lambda (lE32dd@subst lE32de@e) (lE2edb@mkstx lE32de@e '() (list lE32dd@subst) '()))) (set! lE4ba5@lE2edd@add-subst lE2edd@add-subst) (set! lE2edf@add-mark (lambda (lE32e1@mark lE32e2@subst lE32e3@expr lE32e4@ae) (letrec* ((lE32ea@merge-ae* (lambda (lE3311@ls1 lE3312@ls2) (if (and (pair? lE3311@ls1) (pair? lE3312@ls2) (not (car lE3312@ls2))) (lE32ec@cancel lE3311@ls1 lE3312@ls2) (append lE3311@ls1 lE3312@ls2)))) (lE32ec@cancel (lambda (lE3307@ls1 lE3308@ls2) (let lE330f@f ((lE330b@x (car lE3307@ls1)) (lE330c@ls1 (cdr lE3307@ls1))) (if (null? lE330c@ls1) (cdr lE3308@ls2) (cons lE330b@x (lE330f@f (car lE330c@ls1) (cdr lE330c@ls1))))))) (lE32ee@f (lambda (lE32ef@e lE32f0@m lE32f1@s1* lE32f2@ae*) (if (pair? lE32ef@e) (let ((lE32f7@a (lE32ee@f (car lE32ef@e) lE32f0@m lE32f1@s1* lE32f2@ae*)) (lE32f8@d (lE32ee@f (cdr lE32ef@e) lE32f0@m lE32f1@s1* lE32f2@ae*))) (if (eq? lE32f7@a lE32f8@d) lE32ef@e (cons lE32f7@a lE32f8@d))) (if (vector? lE32ef@e) (let ((lE32fb@ls1 (vector->list lE32ef@e))) (let ((lE32fd@ls2 (map (lambda (lE32ff@x) (lE32ee@f lE32ff@x lE32f0@m lE32f1@s1* lE32f2@ae*)) lE32fb@ls1))) (if (for-all eq? lE32fb@ls1 lE32fd@ls2) lE32ef@e (list->vector lE32fd@ls2)))) (if (lE2ebf@stx? lE32ef@e) (let ((lE3301@m* (lE2ec5@stx-mark* lE32ef@e)) (lE3302@s2* (lE2ec9@stx-subst* lE32ef@e))) (if (null? lE3301@m*) (lE32ee@f (lE2ec1@stx-expr lE32ef@e) lE32f0@m (append lE32f1@s1* lE3302@s2*) (lE32ea@merge-ae* lE32f2@ae* (lE2ecd@stx-ae* lE32ef@e))) (if (eq? (car lE3301@m*) lE2ed7@anti-mark) (make-simple-struct 'stx '5 (list (lE2ec1@stx-expr lE32ef@e) (cdr lE3301@m*) (cdr (append lE32f1@s1* lE3302@s2*)) (lE32ea@merge-ae* lE32f2@ae* (lE2ecd@stx-ae* lE32ef@e)))) (make-simple-struct 'stx '5 (list (lE2ec1@stx-expr lE32ef@e) (cons lE32f0@m lE3301@m*) (let ((lE3305@s* (cons 'shift (append lE32f1@s1* lE3302@s2*)))) (if lE32e2@subst (cons lE32e2@subst lE3305@s*) lE3305@s*)) (lE32ea@merge-ae* lE32f2@ae* (lE2ecd@stx-ae* lE32ef@e))))))) (if (symbol? lE32ef@e) (lE31da@syntax-violation '#f '"raw symbol encountered in output of macro" lE32e3@expr lE32ef@e) (make-simple-struct 'stx '5 (list lE32ef@e (list lE32f0@m) lE32f1@s1* lE32f2@ae*))))))))) (lE2edb@mkstx (lE32ee@f lE32e3@expr lE32e1@mark '() '()) '() '() (list lE32e4@ae))))) (set! lE4ba6@lE2edf@add-mark lE2edf@add-mark) (set! lE2ee1@syntax-kind? (lambda (lE3315@x lE3316@p?) (if (lE2ebf@stx? lE3315@x) (lE2ee1@syntax-kind? (lE2ec1@stx-expr lE3315@x) lE3316@p?) (if (lE2a37@lE2909@annotation? lE3315@x) (lE2ee1@syntax-kind? (lE2a39@lE290d@annotation-expression lE3315@x) lE3316@p?) (lE3316@p? lE3315@x))))) (set! lE4ba7@lE2ee1@syntax-kind? lE2ee1@syntax-kind?) (set! lE2ee3@syntax-vector->list (lambda (lE3319@x) (if (lE2ebf@stx? lE3319@x) (let ((lE331b@ls (lE2ee3@syntax-vector->list (lE2ec1@stx-expr lE3319@x))) (lE331c@m* (lE2ec5@stx-mark* lE3319@x)) (lE331d@s* (lE2ec9@stx-subst* lE3319@x)) (lE331e@ae* (lE2ecd@stx-ae* lE3319@x))) (map (lambda (lE3323@x) (lE2edb@mkstx lE3323@x lE331c@m* lE331d@s* lE331e@ae*)) lE331b@ls)) (if (lE2a37@lE2909@annotation? lE3319@x) (lE2ee3@syntax-vector->list (lE2a39@lE290d@annotation-expression lE3319@x)) (if (vector? lE3319@x) (vector->list lE3319@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" lE3319@x)))))) (set! lE4ba8@lE2ee3@syntax-vector->list lE2ee3@syntax-vector->list) (set! lE2ee5@syntax-pair? (lambda (lE3325@x) (lE2ee1@syntax-kind? lE3325@x pair?))) (set! lE4ba9@lE2ee5@syntax-pair? lE2ee5@syntax-pair?) (set! lE2ee7@syntax-vector? (lambda (lE3327@x) (lE2ee1@syntax-kind? lE3327@x vector?))) (set! lE4baa@lE2ee7@syntax-vector? lE2ee7@syntax-vector?) (set! lE2ee9@syntax-null? (lambda (lE3329@x) (lE2ee1@syntax-kind? lE3329@x null?))) (set! lE4bab@lE2ee9@syntax-null? lE2ee9@syntax-null?) (set! lE2eeb@syntax-list? (lambda (lE332b@x) (or (lE2ee9@syntax-null? lE332b@x) (and (lE2ee5@syntax-pair? lE332b@x) (lE2eeb@syntax-list? (lE2eef@syntax-cdr lE332b@x)))))) (set! lE4bac@lE2eeb@syntax-list? lE2eeb@syntax-list?) (set! lE2eed@syntax-car (lambda (lE332d@x) (if (lE2ebf@stx? lE332d@x) (lE2edb@mkstx (lE2eed@syntax-car (lE2ec1@stx-expr lE332d@x)) (lE2ec5@stx-mark* lE332d@x) (lE2ec9@stx-subst* lE332d@x) (lE2ecd@stx-ae* lE332d@x)) (if (lE2a37@lE2909@annotation? lE332d@x) (lE2eed@syntax-car (lE2a39@lE290d@annotation-expression lE332d@x)) (if (pair? lE332d@x) (car lE332d@x) (assertion-violation 'syntax-car '"BUG: not a pair" lE332d@x)))))) (set! lE4bad@lE2eed@syntax-car lE2eed@syntax-car) (set! lE2eef@syntax-cdr (lambda (lE332f@x) (if (lE2ebf@stx? lE332f@x) (lE2edb@mkstx (lE2eef@syntax-cdr (lE2ec1@stx-expr lE332f@x)) (lE2ec5@stx-mark* lE332f@x) (lE2ec9@stx-subst* lE332f@x) (lE2ecd@stx-ae* lE332f@x)) (if (lE2a37@lE2909@annotation? lE332f@x) (lE2eef@syntax-cdr (lE2a39@lE290d@annotation-expression lE332f@x)) (if (pair? lE332f@x) (cdr lE332f@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" lE332f@x)))))) (set! lE4bae@lE2eef@syntax-cdr lE2eef@syntax-cdr) (set! lE2ef1@syntax->list (lambda (lE3331@x) (if (lE2ee5@syntax-pair? lE3331@x) (cons (lE2eed@syntax-car lE3331@x) (lE2ef1@syntax->list (lE2eef@syntax-cdr lE3331@x))) (if (lE2ee9@syntax-null? lE3331@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" lE3331@x))))) (set! lE4baf@lE2ef1@syntax->list lE2ef1@syntax->list) (set! lE2ef3@id? (lambda (lE3333@x) (and (lE2ebf@stx? lE3333@x) (symbol? (lE2ec1@stx-expr lE3333@x))))) (set! lE4bb0@lE2ef3@id? lE2ef3@id?) (set! lE2ef5@id->sym (lambda (lE3335@x) (lE2ec1@stx-expr lE3335@x))) (set! lE4bb1@lE2ef5@id->sym lE2ef5@id->sym) (set! lE2ef7@bound-id=? (lambda (lE3337@x lE3338@y) (and (eq? (lE2ef5@id->sym lE3337@x) (lE2ef5@id->sym lE3338@y)) (same-marks? (lE2ec5@stx-mark* lE3337@x) (lE2ec5@stx-mark* lE3338@y))))) (set! lE4bb2@lE2ef7@bound-id=? lE2ef7@bound-id=?) (set! lE2ef9@free-id=? (lambda (lE333b@i lE333c@j) (let ((lE333f@t0 (id->real-label lE333b@i)) (lE3340@t1 (id->real-label lE333c@j))) (if (or lE333f@t0 lE3340@t1) (eq? lE333f@t0 lE3340@t1) (eq? (lE2ef5@id->sym lE333b@i) (lE2ef5@id->sym lE333c@j)))))) (set! lE4bb3@lE2ef9@free-id=? lE2ef9@free-id=?) (set! lE2efb@valid-bound-ids? (lambda (lE3343@id*) (and (for-all lE2ef3@id? lE3343@id*) (lE2efd@distinct-bound-ids? lE3343@id*)))) (set! lE4bb4@lE2efb@valid-bound-ids? lE2efb@valid-bound-ids?) (set! lE2efd@distinct-bound-ids? (lambda (lE3345@id*) (or (null? lE3345@id*) (and (not (lE2eff@bound-id-member? (car lE3345@id*) (cdr lE3345@id*))) (lE2efd@distinct-bound-ids? (cdr lE3345@id*)))))) (set! lE4bb5@lE2efd@distinct-bound-ids? lE2efd@distinct-bound-ids?) (set! lE2eff@bound-id-member? (lambda (lE3347@id lE3348@id*) (and (pair? lE3348@id*) (or (lE2ef7@bound-id=? lE3347@id (car lE3348@id*)) (lE2eff@bound-id-member? lE3347@id (cdr lE3348@id*)))))) (set! lE4bb6@lE2eff@bound-id-member? lE2eff@bound-id-member?) (set! lE2f01@self-evaluating? (lambda (lE334b@x) (or (number? lE334b@x) (string? lE334b@x) (char? lE334b@x) (boolean? lE334b@x) (regexp? lE334b@x) (bytevector? lE334b@x)))) (set! lE4bb7@lE2f01@self-evaluating? lE2f01@self-evaluating?) (set! lE2f03@strip-annotations (lambda (lE334d@x) (if (pair? lE334d@x) (cons (lE2f03@strip-annotations (car lE334d@x)) (lE2f03@strip-annotations (cdr lE334d@x))) (if (vector? lE334d@x) (vector-map lE2f03@strip-annotations lE334d@x) (if (lE2a37@lE2909@annotation? lE334d@x) (lE2a36@lE2907@annotation-stripped lE334d@x) lE334d@x))))) (set! lE4bb8@lE2f03@strip-annotations lE2f03@strip-annotations) (set! lE2f05@strip (lambda (lE334f@x lE3350@m*) (if (lE2e79@top-marked? lE3350@m*) (if (or (lE2a37@lE2909@annotation? lE334f@x) (and (pair? lE334f@x) (lE2a37@lE2909@annotation? (car lE334f@x))) (and (vector? lE334f@x) (> (vector-length lE334f@x) '0) (lE2a37@lE2909@annotation? (vector-ref lE334f@x '0)))) (lE2f03@strip-annotations lE334f@x) lE334f@x) (let lE3355@f ((lE3353@x lE334f@x)) (if (lE2ebf@stx? lE3353@x) (begin (if (pair? (lE2ec1@stx-expr lE3353@x)) (begin (set-source-info! (lE2ec1@stx-expr lE3353@x) '#f) (set-source-info! (cdr (lE2ec1@stx-expr lE3353@x)) '#f) (set-source-info! (car (lE2ec1@stx-expr lE3353@x)) '#f)) (void)) (lE2f05@strip (lE2ec1@stx-expr lE3353@x) (lE2ec5@stx-mark* lE3353@x))) (if (lE2a37@lE2909@annotation? lE3353@x) (lE2a36@lE2907@annotation-stripped lE3353@x) (if (pair? lE3353@x) (let ((lE3357@a (lE3355@f (car lE3353@x))) (lE3358@d (lE3355@f (cdr lE3353@x)))) (if (and (eq? lE3357@a (car lE3353@x)) (eq? lE3358@d (cdr lE3353@x))) lE3353@x (cons lE3357@a lE3358@d))) (if (vector? lE3353@x) (let ((lE335b@old (vector->list lE3353@x))) (let ((lE335d@new (map lE3355@f lE335b@old))) (if (for-all eq? lE335b@old lE335d@new) lE3353@x (list->vector lE335d@new)))) lE3353@x)))))))) (set! lE4bb9@lE2f05@strip lE2f05@strip) (set! lE2f07@stx->datum (lambda (lE335f@x) (lE2f05@strip lE335f@x '()))) (set! lE4bba@lE2f07@stx->datum lE2f07@stx->datum) (set! lE2f09@id->label (lambda (lE3361@id) (or (id->real-label lE3361@id) (let ((lE3363@t (lE31ea@top-level-context))) (if lE3363@t ((lambda (lE3365@env) (let ((lE3367@rib (lE319a@interaction-env-rib lE3365@env))) (call-with-values (lambda () (lE2e83@gen-define-label+loc lE3361@id lE3367@rib)) (lambda (lE336d@lE336a lE336e@lE336c) (let ((lE3371@loc_ lE336e@lE336c) (lE3372@lab lE336d@lE336a)) (begin (lE2ea9@extend-rib! lE3367@rib lE3361@id lE3372@lab) lE3372@lab)))))) lE3363@t) '#f))))) (set! lE4bbb@lE2f09@id->label lE2f09@id->label) (set! lE2f0b@label->binding (lambda (lE3375@x lE3376@r) (let ((lE3379@t (lE2d0e@lE2b5b@imported-label->binding lE3375@x))) (if lE3379@t ((lambda (lE337b@b) (if (and (pair? lE337b@b) (eq? (car lE337b@b) '$core-rtd)) (cons '$rtd (map lE30b0@bless (cdr lE337b@b))) (if (and (pair? lE337b@b) (eq? (car lE337b@b) 'global-rtd)) (let ((lE337d@lib (cadr lE337b@b)) (lE337e@loc (cddr lE337b@b))) (cons '$rtd (symbol-value lE337e@loc))) lE337b@b))) lE3379@t) (let ((lE3381@t (assq lE3375@x lE3376@r))) (if lE3381@t (cdr lE3381@t) (let ((lE3383@t (lE31ea@top-level-context))) (if lE3383@t ((lambda (lE3385@env) (let ((lE3387@t (assq lE3375@x (lE31a2@interaction-env-locs lE3385@env)))) (if lE3387@t ((lambda (lE3389@p) (cons* 'lexical (cdr lE3389@p) '#f)) lE3387@t) '(displaced-lexical . #f)))) lE3383@t) '(displaced-lexical . #f))))))))) (set! lE4bbc@lE2f0b@label->binding lE2f0b@label->binding) (set! lE2f0d@make-binding cons) (set! lE4bbd@lE2f0d@make-binding lE2f0d@make-binding) (set! lE2f0f@binding-type car) (set! lE4bbe@lE2f0f@binding-type lE2f0f@binding-type) (set! lE2f11@binding-value cdr) (set! lE4bbf@lE2f11@binding-value lE2f11@binding-value) (set! lE2f13@raise-unbound-error (lambda (lE338b@id) (lE31d8@syntax-violation* '#f '"unbound identifier" lE338b@id (make-undefined-violation)))) (set! lE4bc0@lE2f13@raise-unbound-error lE2f13@raise-unbound-error) (set! lE2f15@syntax-type (lambda (lE338d@e lE338e@r) (if (lE2ef3@id? lE338d@e) (let ((lE3391@id lE338d@e)) (let ((lE3393@label (lE2f09@id->label lE3391@id))) (let ((lE3395@b (lE2f0b@label->binding lE3393@label lE338e@r))) (let ((lE3397@type (lE2f0f@binding-type lE3395@b))) (begin (if (not lE3393@label) (lE2f13@raise-unbound-error lE3391@id) (void)) (let ((lE3399@t lE3397@type)) (if (memv lE3399@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values lE3397@type (lE2f11@binding-value lE3395@b) lE3391@id) (values 'other '#f '#f)))))))) (if (lE2ee5@syntax-pair? lE338d@e) (let ((lE339b@id (lE2eed@syntax-car lE338d@e))) (if (lE2ef3@id? lE339b@id) (let ((lE339d@label (lE2f09@id->label lE339b@id))) (let ((lE339f@b (lE2f0b@label->binding lE339d@label lE338e@r))) (let ((lE33a1@type (lE2f0f@binding-type lE339f@b))) (begin (if (not lE339d@label) (lE2f13@raise-unbound-error lE339b@id) (void)) (let ((lE33a3@t lE33a1@type)) (if (memv lE33a3@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values lE33a1@type (lE2f11@binding-value lE339f@b) lE339b@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((lE33a5@d (lE2f07@stx->datum lE338d@e))) (if (lE2f01@self-evaluating? lE33a5@d) (values 'constant lE33a5@d '#f) (values 'other '#f '#f))))))) (set! lE4bc1@lE2f15@syntax-type lE2f15@syntax-type) (set! lE2f23@sanitize-binding (lambda (lE33a7@x lE33a8@src) (if (procedure? lE33a7@x) (cons* 'local-macro lE33a7@x lE33a8@src) (if (and (pair? lE33a7@x) (eq? (car lE33a7@x) 'macro!) (procedure? (cdr lE33a7@x))) (cons* 'local-macro! (cdr lE33a7@x) lE33a8@src) (if (and (pair? lE33a7@x) (eq? (car lE33a7@x) '$rtd)) lE33a7@x (assertion-violation 'expand '"invalid transformer" lE33a7@x)))))) (set! lE4bc2@lE2f23@sanitize-binding lE2f23@sanitize-binding) (set! lE2f25@make-variable-transformer (lambda (lE33ab@x) (if (procedure? lE33ab@x) (cons 'macro! lE33ab@x) (assertion-violation 'make-variable-transformer '"not a procedure" lE33ab@x)))) (set! lE4bc3@lE2f25@make-variable-transformer lE2f25@make-variable-transformer) (set! lE2f27@variable-transformer? (lambda (lE33ad@x) (and (pair? lE33ad@x) (eq? (car lE33ad@x) 'macro!) (procedure? (cdr lE33ad@x))))) (set! lE4bc4@lE2f27@variable-transformer? lE2f27@variable-transformer?) (set! lE2f29@variable-transformer-procedure (lambda (lE33af@x) (if (lE2f27@variable-transformer? lE33af@x) (cdr lE33af@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" lE33af@x)))) (set! lE4bc5@lE2f29@variable-transformer-procedure lE2f29@variable-transformer-procedure) (set! lE2f2b@make-eval-transformer (lambda (lE33b1@x) (lE2f23@sanitize-binding (eval-core (lE2a99@lE2a51@expanded->core lE33b1@x)) lE33b1@x))) (set! lE4bc6@lE2f2b@make-eval-transformer lE2f2b@make-eval-transformer) (set! lE307c@parse-define (lambda (lE33b3@x) (let ((lE33b5@t lE33b3@x)) (let ((lE33b7@ls/false (lE30fa@syntax-dispatch lE33b5@t '(_ (any . any) any . each-any)))) (if (and lE33b7@ls/false (apply (lambda (lE33b9@id lE33ba@fmls lE33bb@b lE33bc@b*) (lE2ef3@id? lE33b9@id)) lE33b7@ls/false)) (apply (lambda (lE33c1@id lE33c2@fmls lE33c3@b lE33c4@b*) (begin (lE3120@verify-formals lE33c2@fmls lE33b3@x) (values lE33c1@id (cons 'defun (cons lE33c2@fmls (cons lE33c3@b lE33c4@b*)))))) lE33b7@ls/false) (let ((lE33c9@t lE33b5@t)) (let ((lE33cb@ls/false (lE30fa@syntax-dispatch lE33c9@t '(_ any any)))) (if (and lE33cb@ls/false (apply (lambda (lE33cd@id lE33ce@val) (lE2ef3@id? lE33cd@id)) lE33cb@ls/false)) (apply (lambda (lE33d1@id lE33d2@val) (values lE33d1@id (cons 'expr lE33d2@val))) lE33cb@ls/false) (let ((lE33d5@t lE33c9@t)) (let ((lE33d7@ls/false (lE30fa@syntax-dispatch lE33d5@t '(_ any)))) (if (and lE33d7@ls/false (apply (lambda (lE33d9@id) (lE2ef3@id? lE33d9@id)) lE33d7@ls/false)) (apply (lambda (lE33db@id) (values lE33db@id (cons 'expr (lE30b0@bless '(void))))) lE33d7@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE33d5@t)))))))))))) (set! lE4bc7@lE307c@parse-define lE307c@parse-define) (set! lE307e@parse-define-syntax (lambda (lE33dd@x) (let ((lE33df@t lE33dd@x)) (let ((lE33e1@ls/false (lE30fa@syntax-dispatch lE33df@t '(_ any any)))) (if (and lE33e1@ls/false (apply (lambda (lE33e3@id lE33e4@val) (lE2ef3@id? lE33e3@id)) lE33e1@ls/false)) (apply (lambda (lE33e7@id lE33e8@val) (values lE33e7@id lE33e8@val)) lE33e1@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE33df@t)))))) (set! lE4bc8@lE307e@parse-define-syntax lE307e@parse-define-syntax) (set! lE3080@scheme-stx-hashtable (make-eq-hashtable)) (set! lE4bc9@lE3080@scheme-stx-hashtable lE3080@scheme-stx-hashtable) (set! lE3082@scheme-stx (lambda (lE33eb@sym) (or (hashtable-ref lE3080@scheme-stx-hashtable lE33eb@sym '#f) (let ((lE33ed@subst (lE2cea@lE2b13@library-subst (lE2d08@lE2b4f@find-library-by-name '(psyntax system $all))))) (let ((lE33ef@stx (make-simple-struct 'stx '5 (list lE33eb@sym lE2e77@top-mark* '() '())))) (let ((lE33f1@stx (let ((lE33f3@t (assq lE33eb@sym lE33ed@subst))) (if lE33f3@t ((lambda (lE33f5@x) (let ((lE33f7@name (car lE33f5@x)) (lE33f8@label (cdr lE33f5@x))) (lE2edd@add-subst (make-simple-struct 'rib '6 (list (list lE33f7@name) (list lE2e77@top-mark*) (list lE33f8@label) '#f '#f)) lE33ef@stx))) lE33f3@t) lE33ef@stx)))) (begin (hashtable-set! lE3080@scheme-stx-hashtable lE33eb@sym lE33f1@stx) lE33f1@stx))))))) (set! lE4bca@lE3082@scheme-stx lE3082@scheme-stx) (set! lE3084@lexical-var car) (set! lE4bcb@lE3084@lexical-var lE3084@lexical-var) (set! lE3086@lexical-mutable? cdr) (set! lE4bcc@lE3086@lexical-mutable? lE3086@lexical-mutable?) (set! lE3088@set-lexical-mutable! set-cdr!) (set! lE4bcd@lE3088@set-lexical-mutable! lE3088@set-lexical-mutable!) (set! lE308a@add-lexical (lambda (lE33fb@lab lE33fc@lex lE33fd@r) (cons (cons* lE33fb@lab 'lexical lE33fc@lex '#f) lE33fd@r))) (set! lE4bce@lE308a@add-lexical lE308a@add-lexical) (set! lE308c@add-lexicals (lambda (lE3401@lab* lE3402@lex* lE3403@r) (if (null? lE3401@lab*) lE3403@r (lE308c@add-lexicals (cdr lE3401@lab*) (cdr lE3402@lex*) (lE308a@add-lexical (car lE3401@lab*) (car lE3402@lex*) lE3403@r))))) (set! lE4bcf@lE308c@add-lexicals lE308c@add-lexicals) (set! lE308e@letrec-helper (lambda (lE3407@e lE3408@r lE3409@mr lE340a@build) (let ((lE340f@t lE3407@e)) (let ((lE3411@ls/false (lE30fa@syntax-dispatch lE340f@t '(_ #(each (any any)) any . each-any)))) (if lE3411@ls/false (apply (lambda (lE3413@lhs* lE3414@rhs* lE3415@b lE3416@b*) (if (not (lE2efb@valid-bound-ids? lE3413@lhs*)) (lE30b4@invalid-fmls-error lE3407@e lE3413@lhs*) (let ((lE341b@lex* (map lE2e7b@gen-lexical lE3413@lhs*)) (lE341c@lab* (map lE2e7f@gen-label lE3413@lhs*))) (let ((lE341f@rib (lE2eb3@make-full-rib lE3413@lhs* lE341c@lab*)) (lE3420@r (lE308c@add-lexicals lE341c@lab* lE341b@lex* lE3408@r))) (let ((lE3423@body (lE3132@chi-internal (lE2edd@add-subst lE341f@rib (cons lE3415@b lE3416@b*)) lE3420@r lE3409@mr)) (lE3424@rhs* (lE3118@chi-expr* (map (lambda (lE3427@x) (lE2edd@add-subst lE341f@rib lE3427@x)) lE3414@rhs*) lE3420@r lE3409@mr))) (lE340a@build '#f lE341b@lex* lE3424@rhs* lE3423@body)))))) lE3411@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE340f@t)))))) (set! lE4bd0@lE308e@letrec-helper lE308e@letrec-helper) (set! lE3090@let-transformer (lambda (lE3429@e lE342a@r lE342b@mr) (let ((lE342f@t lE3429@e)) (let ((lE3431@ls/false (lE30fa@syntax-dispatch lE342f@t '(_ #(each (any any)) any . each-any)))) (if lE3431@ls/false (apply (lambda (lE3433@lhs* lE3434@rhs* lE3435@b lE3436@b*) (if (not (lE2efb@valid-bound-ids? lE3433@lhs*)) (lE30b4@invalid-fmls-error lE3429@e lE3433@lhs*) (let ((lE343b@lex* (map lE2e7b@gen-lexical lE3433@lhs*)) (lE343c@lab* (map lE2e7f@gen-label lE3433@lhs*)) (lE343d@rhs* (lE3118@chi-expr* lE3434@rhs* lE342a@r lE342b@mr))) (let ((lE3441@rib (lE2eb3@make-full-rib lE3433@lhs* lE343c@lab*)) (lE3442@r (lE308c@add-lexicals lE343c@lab* lE343b@lex* lE342a@r))) (let ((lE3445@body (lE3132@chi-internal (lE2edd@add-subst lE3441@rib (cons lE3435@b lE3436@b*)) lE3442@r lE342b@mr))) (lE2e5b@lE2dbe@build-let '#f lE343b@lex* lE343d@rhs* lE3445@body)))))) lE3431@ls/false) (let ((lE3447@t lE342f@t)) (let ((lE3449@ls/false (lE30fa@syntax-dispatch lE3447@t '(_ any #(each (any any)) any . each-any)))) (if lE3449@ls/false (apply (lambda (lE344b@loop lE344c@lhs* lE344d@rhs* lE344e@b lE344f@b*) (if (not (lE2efb@valid-bound-ids? lE344c@lhs*)) (lE30b4@invalid-fmls-error lE3429@e lE344c@lhs*) (let ((lE3455@lex* (map lE2e7b@gen-lexical lE344c@lhs*)) (lE3456@lab* (map lE2e7f@gen-label lE344c@lhs*)) (lE3457@rhs* (lE3118@chi-expr* lE344d@rhs* lE342a@r lE342b@mr)) (lE3458@loop-lex (lE2e7b@gen-lexical lE344b@loop)) (lE3459@loop-lab (lE2e7f@gen-label lE344b@loop))) (let ((lE345f@loop-rib (lE2eb3@make-full-rib (list lE344b@loop) (list lE3459@loop-lab))) (lE3460@rib (lE2eb3@make-full-rib lE344c@lhs* lE3456@lab*)) (lE3461@r (lE308c@add-lexicals (cons lE3459@loop-lab lE3456@lab*) (cons lE3458@loop-lex lE3455@lex*) lE342a@r))) (let ((lE3465@body (lE3132@chi-internal (lE2edd@add-subst lE345f@loop-rib (lE2edd@add-subst lE3460@rib (cons lE344e@b lE344f@b*))) lE3461@r lE342b@mr))) (lE2e5c@lE2dc0@build-named-let '#f lE3458@loop-lex lE3455@lex* lE3457@rhs* lE3465@body)))))) lE3449@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3447@t))))))))) (set! lE4bd1@lE3090@let-transformer lE3090@let-transformer) (set! lE3092@letrec-transformer (lambda (lE3467@e lE3468@r lE3469@mr) (lE308e@letrec-helper lE3467@e lE3468@r lE3469@mr lE2e5a@lE2dbc@build-letrec))) (set! lE4bd2@lE3092@letrec-transformer lE3092@letrec-transformer) (set! lE3094@letrec*-transformer (lambda (lE346d@e lE346e@r lE346f@mr) (lE308e@letrec-helper lE346d@e lE346e@r lE346f@mr lE2e5d@lE2dc2@build-letrec*))) (set! lE4bd3@lE3094@letrec*-transformer lE3094@letrec*-transformer) (set! lE3096@fluid-let-syntax-transformer (lambda (lE3473@e lE3474@r lE3475@mr) (letrec* ((lE347a@lookup (lambda (lE348d@x) (or (lE2f09@id->label lE348d@x) (lE31da@syntax-violation '#f '"unbound identifier" lE3473@e lE348d@x))))) (let ((lE347b@t lE3473@e)) (let ((lE347d@ls/false (lE30fa@syntax-dispatch lE347b@t '(_ #(each (any any)) any . each-any)))) (if lE347d@ls/false (apply (lambda (lE347f@lhs* lE3480@rhs* lE3481@b lE3482@b*) (if (not (lE2efb@valid-bound-ids? lE347f@lhs*)) (lE30b4@invalid-fmls-error lE3473@e lE347f@lhs*) (let ((lE3487@lab* (map lE347a@lookup lE347f@lhs*)) (lE3488@rhs* (map (lambda (lE348b@x) (lE2f2b@make-eval-transformer (lE3154@expand-transformer lE348b@x lE3475@mr))) lE3480@rhs*))) (lE3132@chi-internal (cons lE3481@b lE3482@b*) (append (map cons lE3487@lab* lE3488@rhs*) lE3474@r) (append (map cons lE3487@lab* lE3488@rhs*) lE3475@mr))))) lE347d@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE347b@t))))))) (set! lE4bd4@lE3096@fluid-let-syntax-transformer lE3096@fluid-let-syntax-transformer) (set! lE3098@type-descriptor-transformer (lambda (lE348f@e lE3490@r lE3491@mr) (let ((lE3495@t lE348f@e)) (let ((lE3497@ls/false (lE30fa@syntax-dispatch lE3495@t '(_ any)))) (if (and lE3497@ls/false (apply (lambda (lE3499@id) (lE2ef3@id? lE3499@id)) lE3497@ls/false)) (apply (lambda (lE349b@id) (let ((lE349d@lab (lE2f09@id->label lE349b@id))) (let ((lE349f@b (lE2f0b@label->binding lE349d@lab lE3490@r))) (let ((lE34a1@type (lE2f0f@binding-type lE349f@b))) (begin (if (not lE349d@lab) (lE2f13@raise-unbound-error lE349b@id) (void)) (if (not (and (eq? lE34a1@type '$rtd) (not (list? (lE2f11@binding-value lE349f@b))))) (lE31da@syntax-violation '#f '"not a record type" lE348f@e) (void)) (list 'quote (lE2f11@binding-value lE349f@b))))))) lE3497@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3495@t)))))) (set! lE4bd5@lE3098@type-descriptor-transformer lE3098@type-descriptor-transformer) (set! lE309a@record-type-descriptor-transformer (lambda (lE34a3@e lE34a4@r lE34a5@mr) (let ((lE34a9@t lE34a3@e)) (let ((lE34ab@ls/false (lE30fa@syntax-dispatch lE34a9@t '(_ any)))) (if (and lE34ab@ls/false (apply (lambda (lE34ad@id) (lE2ef3@id? lE34ad@id)) lE34ab@ls/false)) (apply (lambda (lE34af@id) (let ((lE34b1@lab (lE2f09@id->label lE34af@id))) (let ((lE34b3@b (lE2f0b@label->binding lE34b1@lab lE34a4@r))) (let ((lE34b5@type (lE2f0f@binding-type lE34b3@b))) (begin (if (not lE34b1@lab) (lE2f13@raise-unbound-error lE34af@id) (void)) (if (not (and (eq? lE34b5@type '$rtd) (list? (lE2f11@binding-value lE34b3@b)))) (lE31da@syntax-violation '#f '"not a record type" lE34a3@e) (void)) (lE311c@chi-expr (car (lE2f11@binding-value lE34b3@b)) lE34a4@r lE34a5@mr)))))) lE34ab@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE34a9@t)))))) (set! lE4bd6@lE309a@record-type-descriptor-transformer lE309a@record-type-descriptor-transformer) (set! lE309c@record-constructor-descriptor-transformer (lambda (lE34b7@e lE34b8@r lE34b9@mr) (let ((lE34bd@t lE34b7@e)) (let ((lE34bf@ls/false (lE30fa@syntax-dispatch lE34bd@t '(_ any)))) (if (and lE34bf@ls/false (apply (lambda (lE34c1@id) (lE2ef3@id? lE34c1@id)) lE34bf@ls/false)) (apply (lambda (lE34c3@id) (let ((lE34c5@lab (lE2f09@id->label lE34c3@id))) (let ((lE34c7@b (lE2f0b@label->binding lE34c5@lab lE34b8@r))) (let ((lE34c9@type (lE2f0f@binding-type lE34c7@b))) (begin (if (not lE34c5@lab) (lE2f13@raise-unbound-error lE34c3@id) (void)) (if (not (and (eq? lE34c9@type '$rtd) (list? (lE2f11@binding-value lE34c7@b)))) (lE31da@syntax-violation '#f '"invalid type" lE34b7@e) (void)) (lE311c@chi-expr (cadr (lE2f11@binding-value lE34c7@b)) lE34b8@r lE34b9@mr)))))) lE34bf@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE34bd@t)))))) (set! lE4bd7@lE309c@record-constructor-descriptor-transformer lE309c@record-constructor-descriptor-transformer) (set! lE309e@when-macro (lambda (lE34cb@e) (let ((lE34cd@t lE34cb@e)) (let ((lE34cf@ls/false (lE30fa@syntax-dispatch lE34cd@t '(_ any any . each-any)))) (if lE34cf@ls/false (apply (lambda (lE34d1@test lE34d2@e lE34d3@e*) (lE30b0@bless (list 'if lE34d1@test (cons 'begin (cons lE34d2@e lE34d3@e*))))) lE34cf@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE34cd@t)))))) (set! lE4bd8@lE309e@when-macro lE309e@when-macro) (set! lE30a0@unless-macro (lambda (lE34d7@e) (let ((lE34d9@t lE34d7@e)) (let ((lE34db@ls/false (lE30fa@syntax-dispatch lE34d9@t '(_ any any . each-any)))) (if lE34db@ls/false (apply (lambda (lE34dd@test lE34de@e lE34df@e*) (lE30b0@bless (list 'if (list 'not lE34dd@test) (cons 'begin (cons lE34de@e lE34df@e*))))) lE34db@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE34d9@t)))))) (set! lE4bd9@lE30a0@unless-macro lE30a0@unless-macro) (set! lE30a2@if-transformer (lambda (lE34e3@e lE34e4@r lE34e5@mr) (let ((lE34e9@t lE34e3@e)) (let ((lE34eb@ls/false (lE30fa@syntax-dispatch lE34e9@t '(_ any any any)))) (if lE34eb@ls/false (apply (lambda (lE34ed@e0 lE34ee@e1 lE34ef@e2) (list 'if (lE311c@chi-expr lE34ed@e0 lE34e4@r lE34e5@mr) (lE311c@chi-expr lE34ee@e1 lE34e4@r lE34e5@mr) (lE311c@chi-expr lE34ef@e2 lE34e4@r lE34e5@mr))) lE34eb@ls/false) (let ((lE34f3@t lE34e9@t)) (let ((lE34f5@ls/false (lE30fa@syntax-dispatch lE34f3@t '(_ any any)))) (if lE34f5@ls/false (apply (lambda (lE34f7@e0 lE34f8@e1) (list 'if (lE311c@chi-expr lE34f7@e0 lE34e4@r lE34e5@mr) (lE311c@chi-expr lE34f8@e1 lE34e4@r lE34e5@mr) (lE2e59@lE2dba@build-void))) lE34f5@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE34f3@t))))))))) (set! lE4bda@lE30a2@if-transformer lE30a2@if-transformer) (set! lE30a4@and-transformer (lambda (lE34fb@e lE34fc@r lE34fd@mr) (let ((lE3501@t lE34fb@e)) (let ((lE3503@ls/false (lE30fa@syntax-dispatch lE3501@t '(_ . each-any)))) (if lE3503@ls/false (apply (lambda (lE3505@e*) (cons 'and (lE3118@chi-expr* lE3505@e* lE34fc@r lE34fd@mr))) lE3503@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3501@t)))))) (set! lE4bdb@lE30a4@and-transformer lE30a4@and-transformer) (set! lE30a6@or-transformer (lambda (lE3507@e lE3508@r lE3509@mr) (let ((lE350d@t lE3507@e)) (let ((lE350f@ls/false (lE30fa@syntax-dispatch lE350d@t '(_ . each-any)))) (if lE350f@ls/false (apply (lambda (lE3511@e*) (cons 'or (lE3118@chi-expr* lE3511@e* lE3508@r lE3509@mr))) lE350f@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE350d@t)))))) (set! lE4bdc@lE30a6@or-transformer lE30a6@or-transformer) (set! lE30a8@case-macro (lambda (lE3513@e) (letrec* ((lE3516@build-last (lambda (lE353d@cls) (let ((lE353f@t lE353d@cls)) (let ((lE3541@ls/false (lE30fa@syntax-dispatch lE353f@t '(#(scheme-id else) any . each-any)))) (if lE3541@ls/false (apply (lambda (lE3543@e lE3544@e*) (cons 'begin (cons lE3543@e lE3544@e*))) lE3541@ls/false) (let ((lE3547@t lE353f@t)) (let ((lE3549@ls/false (lE30fa@syntax-dispatch lE3547@t '_))) (if lE3549@ls/false (apply (lambda () (lE3518@build-one lE353d@cls '(if #f #f))) lE3549@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3547@t))))))))) (lE3518@build-one (lambda (lE352f@cls lE3530@k) (let ((lE3533@t lE352f@cls)) (let ((lE3535@ls/false (lE30fa@syntax-dispatch lE3533@t '(each-any any . each-any)))) (if lE3535@ls/false (apply (lambda (lE3537@d* lE3538@e lE3539@e*) (list 'if (list 'memv 't (list 'quote lE3537@d*)) (cons 'begin (cons lE3538@e lE3539@e*)) lE3530@k)) lE3535@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3533@t))))))) (let ((lE3519@t lE3513@e)) (let ((lE351b@ls/false (lE30fa@syntax-dispatch lE3519@t '(_ any)))) (if lE351b@ls/false (apply (lambda (lE351d@expr) (lE30b0@bless (cons 'let (cons (list (list 't lE351d@expr)) '((if #f #f)))))) lE351b@ls/false) (let ((lE351f@t lE3519@t)) (let ((lE3521@ls/false (lE30fa@syntax-dispatch lE351f@t '(_ any any . each-any)))) (if lE3521@ls/false (apply (lambda (lE3523@expr lE3524@cls lE3525@cls*) (lE30b0@bless (list 'let (list (list 't lE3523@expr)) (let lE352d@f ((lE3529@cls lE3524@cls) (lE352a@cls* lE3525@cls*)) (if (null? lE352a@cls*) (lE3516@build-last lE3529@cls) (lE3518@build-one lE3529@cls (lE352d@f (car lE352a@cls*) (cdr lE352a@cls*)))))))) lE3521@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE351f@t)))))))))) (set! lE4bdd@lE30a8@case-macro lE30a8@case-macro) (set! lE30aa@quote-transformer (lambda (lE354b@e lE354c@r lE354d@mr) (let ((lE3551@t lE354b@e)) (let ((lE3553@ls/false (lE30fa@syntax-dispatch lE3551@t '(_ any)))) (if lE3553@ls/false (apply (lambda (lE3555@datum) (list 'quote (lE2f07@stx->datum lE3555@datum))) lE3553@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3551@t)))))) (set! lE4bde@lE30aa@quote-transformer lE30aa@quote-transformer) (set! lE30ac@case-lambda-transformer (lambda (lE3557@e lE3558@r lE3559@mr) (let ((lE355d@t lE3557@e)) (let ((lE355f@ls/false (lE30fa@syntax-dispatch lE355d@t '(_ . #(each (any any . each-any)))))) (if lE355f@ls/false (apply (lambda (lE3561@fmls* lE3562@b* lE3563@b**) (call-with-values (lambda () (lE3124@chi-lambda-clause* lE3557@e lE3561@fmls* (map cons lE3562@b* lE3563@b**) lE3558@r lE3559@mr)) (lambda (lE356b@lE3568 lE356c@lE356a) (let ((lE356f@body* lE356c@lE356a) (lE3570@fmls* lE356b@lE3568)) (lE2e57@lE2d8a@build-case-lambda '#f lE3570@fmls* lE356f@body*))))) lE355f@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE355d@t)))))) (set! lE4bdf@lE30ac@case-lambda-transformer lE30ac@case-lambda-transformer) (set! lE30ae@lambda-transformer (lambda (lE3573@e lE3574@r lE3575@mr) (let ((lE3579@t lE3573@e)) (let ((lE357b@ls/false (lE30fa@syntax-dispatch lE3579@t '(_ any any . each-any)))) (if lE357b@ls/false (apply (lambda (lE357d@fmls lE357e@b lE357f@b*) (call-with-values (lambda () (lE3122@chi-lambda-clause lE3573@e lE357d@fmls (cons lE357e@b lE357f@b*) lE3574@r lE3575@mr)) (lambda (lE3587@lE3584 lE3588@lE3586) (let ((lE358b@body lE3588@lE3586) (lE358c@fmls lE3587@lE3584)) (lE2e56@lE2d88@build-lambda '#f lE358c@fmls lE358b@body))))) lE357b@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3579@t)))))) (set! lE4be0@lE30ae@lambda-transformer lE30ae@lambda-transformer) (set! lE30b0@bless (lambda (lE358f@x) (lE2edb@mkstx (let lE3593@f ((lE3591@x lE358f@x)) (if (lE2ebf@stx? lE3591@x) lE3591@x (if (pair? lE3591@x) (cons (lE3593@f (car lE3591@x)) (lE3593@f (cdr lE3591@x))) (if (symbol? lE3591@x) (lE3082@scheme-stx lE3591@x) (if (vector? lE3591@x) (vector-map lE3593@f lE3591@x) lE3591@x))))) '() '() '()))) (set! lE4be1@lE30b0@bless lE30b0@bless) (set! lE30b2@with-syntax-macro (lambda (lE3595@e) (let ((lE3597@t lE3595@e)) (let ((lE3599@ls/false (lE30fa@syntax-dispatch lE3597@t '(_ #(each (any any)) any . each-any)))) (if lE3599@ls/false (apply (lambda (lE359b@pat* lE359c@expr* lE359d@b lE359e@b*) (let ((lE35a3@idn* (let lE35a7@f ((lE35a5@pat* lE359b@pat*)) (if (null? lE35a5@pat*) '() (call-with-values (lambda () (lE30f8@convert-pattern (car lE35a5@pat*) '())) (lambda (lE35ad@lE35aa lE35ae@lE35ac) (let ((lE35b1@idn* lE35ae@lE35ac) (lE35b2@pat lE35ad@lE35aa)) (append lE35b1@idn* (lE35a7@f (cdr lE35a5@pat*)))))))))) (begin (lE3120@verify-formals (map car lE35a3@idn*) lE3595@e) (let ((lE35b5@t* (lE31c8@generate-temporaries lE359c@expr*))) (lE30b0@bless (list 'let (map list lE35b5@t* lE359c@expr*) (let lE35bb@f ((lE35b7@pat* lE359b@pat*) (lE35b8@t* lE35b5@t*)) (if (null? lE35b7@pat*) (cons 'let (cons '() (cons lE359d@b lE359e@b*))) (list 'syntax-case (car lE35b8@t*) '() (list (car lE35b7@pat*) (lE35bb@f (cdr lE35b7@pat*) (cdr lE35b8@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car lE35b7@pat*)) (car lE35b8@t*)))))))))))) lE3599@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3597@t)))))) (set! lE4be2@lE30b2@with-syntax-macro lE30b2@with-syntax-macro) (set! lE30b4@invalid-fmls-error (lambda (lE35bd@stx lE35be@fmls) (let ((lE35c1@t lE35be@fmls)) (let ((lE35c3@ls/false (lE30fa@syntax-dispatch lE35c1@t '#(each+ any () any)))) (if lE35c3@ls/false (apply (lambda (lE35c5@id* lE35c6@last) (let lE35cb@f ((lE35c9@id* (if (lE2ef3@id? lE35c6@last) (cons lE35c6@last lE35c5@id*) (if (lE2ee9@syntax-null? lE35c6@last) lE35c5@id* (lE31da@syntax-violation '#f '"not an identifier" lE35bd@stx lE35c6@last))))) (if (null? lE35c9@id*) (values) (if (not (lE2ef3@id? (car lE35c9@id*))) (lE31da@syntax-violation '#f '"not an identifier" lE35bd@stx (car lE35c9@id*)) (begin (lE35cb@f (cdr lE35c9@id*)) (if (lE2eff@bound-id-member? (car lE35c9@id*) (cdr lE35c9@id*)) (lE31da@syntax-violation '#f '"duplicate binding" lE35bd@stx (car lE35c9@id*)) (void))))))) lE35c3@ls/false) (let ((lE35cd@t lE35c1@t)) (let ((lE35cf@ls/false (lE30fa@syntax-dispatch lE35cd@t '_))) (if lE35cf@ls/false (apply (lambda () (lE31da@syntax-violation '#f '"malformed binding form" lE35bd@stx lE35be@fmls)) lE35cf@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE35cd@t))))))))) (set! lE4be3@lE30b4@invalid-fmls-error lE30b4@invalid-fmls-error) (set! lE30b6@let-macro (lambda (lE35d1@stx) (let ((lE35d3@t lE35d1@stx)) (let ((lE35d5@ls/false (lE30fa@syntax-dispatch lE35d3@t '(_ #(each (any any)) any . each-any)))) (if lE35d5@ls/false (apply (lambda (lE35d7@lhs* lE35d8@rhs* lE35d9@b lE35da@b*) (if (lE2efb@valid-bound-ids? lE35d7@lhs*) (lE30b0@bless (cons (cons 'lambda (cons lE35d7@lhs* (cons lE35d9@b lE35da@b*))) lE35d8@rhs*)) (lE30b4@invalid-fmls-error lE35d1@stx lE35d7@lhs*))) lE35d5@ls/false) (let ((lE35df@t lE35d3@t)) (let ((lE35e1@ls/false (lE30fa@syntax-dispatch lE35df@t '(_ any #(each (any any)) any . each-any)))) (if (and lE35e1@ls/false (apply (lambda (lE35e3@f lE35e4@lhs* lE35e5@rhs* lE35e6@b lE35e7@b*) (lE2ef3@id? lE35e3@f)) lE35e1@ls/false)) (apply (lambda (lE35ed@f lE35ee@lhs* lE35ef@rhs* lE35f0@b lE35f1@b*) (if (lE2efb@valid-bound-ids? lE35ee@lhs*) (lE30b0@bless (cons (list 'letrec (list (list lE35ed@f (cons 'lambda (cons lE35ee@lhs* (cons lE35f0@b lE35f1@b*))))) lE35ed@f) lE35ef@rhs*)) (lE30b4@invalid-fmls-error lE35d1@stx lE35ee@lhs*))) lE35e1@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE35df@t))))))))) (set! lE4be4@lE30b6@let-macro lE30b6@let-macro) (set! lE30b8@let-values-macro (lambda (lE35f7@stx) (letrec* ((lE35fa@rename (lambda (lE365f@x lE3660@old* lE3661@new*) (begin (if (not (lE2ef3@id? lE365f@x)) (lE31da@syntax-violation '#f '"not an indentifier" lE35f7@stx lE365f@x) (void)) (if (lE2eff@bound-id-member? lE365f@x lE3660@old*) (lE31da@syntax-violation '#f '"duplicate binding" lE35f7@stx lE365f@x) (void)) (let ((lE3665@y (gensym (lE31e0@syntax->datum lE365f@x)))) (values lE3665@y (cons lE365f@x lE3660@old*) (cons lE3665@y lE3661@new*)))))) (lE35fc@rename* (lambda (lE364d@x* lE364e@old* lE364f@new*) (if (null? lE364d@x*) (values '() lE364e@old* lE364f@new*) (call-with-values (lambda () (lE35fa@rename (car lE364d@x*) lE364e@old* lE364f@new*)) (lambda (lE3653@x lE3654@old* lE3655@new*) (call-with-values (lambda () (lE35fc@rename* (cdr lE364d@x*) lE3654@old* lE3655@new*)) (lambda (lE3659@x* lE365a@old* lE365b@new*) (values (cons lE3653@x lE3659@x*) lE365a@old* lE365b@new*))))))))) (let ((lE35fd@t lE35f7@stx)) (let ((lE35ff@ls/false (lE30fa@syntax-dispatch lE35fd@t '(_ () any . each-any)))) (if lE35ff@ls/false (apply (lambda (lE3601@b lE3602@b*) (cons* (lE30b0@bless 'let) '() lE3601@b lE3602@b*)) lE35ff@ls/false) (let ((lE3605@t lE35fd@t)) (let ((lE3607@ls/false (lE30fa@syntax-dispatch lE3605@t '(_ #(each (any any)) any . each-any)))) (if lE3607@ls/false (apply (lambda (lE3609@lhs* lE360a@rhs* lE360b@b lE360c@b*) (lE30b0@bless (let lE3619@f ((lE3611@lhs* lE3609@lhs*) (lE3612@rhs* lE360a@rhs*) (lE3613@old* '()) (lE3614@new* '())) (if (null? lE3611@lhs*) (cons 'let (cons (map list lE3613@old* lE3614@new*) (cons lE360b@b lE360c@b*))) (let ((lE361b@t (car lE3611@lhs*))) (let ((lE361d@ls/false (lE30fa@syntax-dispatch lE361b@t 'each-any))) (if lE361d@ls/false (apply (lambda (lE361f@x*) (call-with-values (lambda () (lE35fc@rename* lE361f@x* lE3613@old* lE3614@new*)) (lambda (lE3627@lE3622 lE3628@lE3624 lE3629@lE3626) (let ((lE362d@new* lE3629@lE3626) (lE362e@old* lE3628@lE3624) (lE362f@y* lE3627@lE3622)) (list 'call-with-values (list 'lambda '() (car lE3612@rhs*)) (list 'lambda lE362f@y* (lE3619@f (cdr lE3611@lhs*) (cdr lE3612@rhs*) lE362e@old* lE362d@new*))))))) lE361d@ls/false) (let ((lE3633@t lE361b@t)) (let ((lE3635@ls/false (lE30fa@syntax-dispatch lE3633@t '#(each+ any () any)))) (if lE3635@ls/false (apply (lambda (lE3637@x* lE3638@x) (call-with-values (lambda () (lE35fa@rename lE3638@x lE3613@old* lE3614@new*)) (lambda (lE363b@y lE363c@old* lE363d@new*) (call-with-values (lambda () (lE35fc@rename* lE3637@x* lE363c@old* lE363d@new*)) (lambda (lE3641@y* lE3642@old* lE3643@new*) (list 'call-with-values (list 'lambda '() (car lE3612@rhs*)) (list 'lambda (append lE3641@y* lE363b@y) (lE3619@f (cdr lE3611@lhs*) (cdr lE3612@rhs*) lE3642@old* lE3643@new*)))))))) lE3635@ls/false) (let ((lE3647@t lE3633@t)) (let ((lE3649@ls/false (lE30fa@syntax-dispatch lE3647@t 'any))) (if lE3649@ls/false (apply (lambda (lE364b@others) (lE31da@syntax-violation '#f '"malformed bindings" lE35f7@stx lE364b@others)) lE3649@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3647@t)))))))))))))) lE3607@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3605@t)))))))))) (set! lE4be5@lE30b8@let-values-macro lE30b8@let-values-macro) (set! lE30ba@let*-values-macro (lambda (lE3667@stx) (letrec* ((lE366a@check (lambda (lE3699@x*) (if (not (null? lE3699@x*)) (let ((lE369b@x (car lE3699@x*))) (begin (if (not (lE2ef3@id? lE369b@x)) (lE31da@syntax-violation '#f '"not an identifier" lE3667@stx lE369b@x) (void)) (lE366a@check (cdr lE3699@x*)) (if (lE2eff@bound-id-member? lE369b@x (cdr lE3699@x*)) (lE31da@syntax-violation '#f '"duplicate identifier" lE3667@stx lE369b@x) (void)))) (void))))) (let ((lE366b@t lE3667@stx)) (let ((lE366d@ls/false (lE30fa@syntax-dispatch lE366b@t '(_ () any . each-any)))) (if lE366d@ls/false (apply (lambda (lE366f@b lE3670@b*) (cons* (lE30b0@bless 'let) '() lE366f@b lE3670@b*)) lE366d@ls/false) (let ((lE3673@t lE366b@t)) (let ((lE3675@ls/false (lE30fa@syntax-dispatch lE3673@t '(_ #(each (any any)) any . each-any)))) (if lE3675@ls/false (apply (lambda (lE3677@lhs* lE3678@rhs* lE3679@b lE367a@b*) (lE30b0@bless (let lE3683@f ((lE367f@lhs* lE3677@lhs*) (lE3680@rhs* lE3678@rhs*)) (if (null? lE367f@lhs*) (cons 'begin (cons lE3679@b lE367a@b*)) (let ((lE3685@t (car lE367f@lhs*))) (let ((lE3687@ls/false (lE30fa@syntax-dispatch lE3685@t 'each-any))) (if lE3687@ls/false (apply (lambda (lE3689@x*) (begin (lE366a@check lE3689@x*) (list 'call-with-values (list 'lambda '() (car lE3680@rhs*)) (list 'lambda lE3689@x* (lE3683@f (cdr lE367f@lhs*) (cdr lE3680@rhs*)))))) lE3687@ls/false) (let ((lE368b@t lE3685@t)) (let ((lE368d@ls/false (lE30fa@syntax-dispatch lE368b@t '#(each+ any () any)))) (if lE368d@ls/false (apply (lambda (lE368f@x* lE3690@x) (begin (lE366a@check (cons lE3690@x lE368f@x*)) (list 'call-with-values (list 'lambda '() (car lE3680@rhs*)) (list 'lambda (append lE368f@x* lE3690@x) (lE3683@f (cdr lE367f@lhs*) (cdr lE3680@rhs*)))))) lE368d@ls/false) (let ((lE3693@t lE368b@t)) (let ((lE3695@ls/false (lE30fa@syntax-dispatch lE3693@t 'any))) (if lE3695@ls/false (apply (lambda (lE3697@others) (lE31da@syntax-violation '#f '"malformed bindings" lE3667@stx lE3697@others)) lE3695@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3693@t)))))))))))))) lE3675@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3673@t)))))))))) (set! lE4be6@lE30ba@let*-values-macro lE30ba@let*-values-macro) (set! lE30bc@trace-lambda-macro (lambda (lE369d@stx) (let ((lE369f@t lE369d@stx)) (let ((lE36a1@ls/false (lE30fa@syntax-dispatch lE369f@t '(_ any each-any any . each-any)))) (if lE36a1@ls/false (apply (lambda (lE36a3@who lE36a4@fmls lE36a5@b lE36a6@b*) (if (lE2efb@valid-bound-ids? lE36a4@fmls) (lE30b0@bless (list 'make-traced-procedure (list 'quote lE36a3@who) (cons 'lambda (cons lE36a4@fmls (cons lE36a5@b lE36a6@b*))))) (lE30b4@invalid-fmls-error lE369d@stx lE36a4@fmls))) lE36a1@ls/false) (let ((lE36ab@t lE369f@t)) (let ((lE36ad@ls/false (lE30fa@syntax-dispatch lE36ab@t '(_ any #(each+ any () any) any . each-any)))) (if lE36ad@ls/false (apply (lambda (lE36af@who lE36b0@fmls lE36b1@last lE36b2@b lE36b3@b*) (if (lE2efb@valid-bound-ids? (cons lE36b1@last lE36b0@fmls)) (lE30b0@bless (list 'make-traced-procedure (list 'quote lE36af@who) (cons 'lambda (cons (append lE36b0@fmls lE36b1@last) (cons lE36b2@b lE36b3@b*))))) (lE30b4@invalid-fmls-error lE369d@stx (append lE36b0@fmls lE36b1@last)))) lE36ad@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE36ab@t))))))))) (set! lE4be7@lE30bc@trace-lambda-macro lE30bc@trace-lambda-macro) (set! lE30be@trace-define-macro (lambda (lE36b9@stx) (let ((lE36bb@t lE36b9@stx)) (let ((lE36bd@ls/false (lE30fa@syntax-dispatch lE36bb@t '(_ (any . each-any) any . each-any)))) (if lE36bd@ls/false (apply (lambda (lE36bf@who lE36c0@fmls lE36c1@b lE36c2@b*) (if (lE2efb@valid-bound-ids? lE36c0@fmls) (lE30b0@bless (list 'define lE36bf@who (list 'make-traced-procedure (list 'quote lE36bf@who) (cons 'lambda (cons lE36c0@fmls (cons lE36c1@b lE36c2@b*)))))) (lE30b4@invalid-fmls-error lE36b9@stx lE36c0@fmls))) lE36bd@ls/false) (let ((lE36c7@t lE36bb@t)) (let ((lE36c9@ls/false (lE30fa@syntax-dispatch lE36c7@t '(_ (any . #(each+ any () any)) any . each-any)))) (if lE36c9@ls/false (apply (lambda (lE36cb@who lE36cc@fmls lE36cd@last lE36ce@b lE36cf@b*) (if (lE2efb@valid-bound-ids? (cons lE36cd@last lE36cc@fmls)) (lE30b0@bless (list 'define lE36cb@who (list 'make-traced-procedure (list 'quote lE36cb@who) (cons 'lambda (cons (append lE36cc@fmls lE36cd@last) (cons lE36ce@b lE36cf@b*)))))) (lE30b4@invalid-fmls-error lE36b9@stx (append lE36cc@fmls lE36cd@last)))) lE36c9@ls/false) (let ((lE36d5@t lE36c7@t)) (let ((lE36d7@ls/false (lE30fa@syntax-dispatch lE36d5@t '(_ any any)))) (if lE36d7@ls/false (apply (lambda (lE36d9@who lE36da@expr) (if (lE2ef3@id? lE36d9@who) (lE30b0@bless (list 'define lE36d9@who (list 'let (list (list 'v lE36da@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote lE36d9@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (lE31da@syntax-violation '#f '"invalid name" lE36b9@stx))) lE36d7@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE36d5@t)))))))))))) (set! lE4be8@lE30be@trace-define-macro lE30be@trace-define-macro) (set! lE30c0@trace-define-syntax-macro (lambda (lE36dd@stx) (let ((lE36df@t lE36dd@stx)) (let ((lE36e1@ls/false (lE30fa@syntax-dispatch lE36df@t '(_ any any)))) (if lE36e1@ls/false (apply (lambda (lE36e3@who lE36e4@expr) (if (lE2ef3@id? lE36e3@who) (lE30b0@bless (list 'define-syntax lE36e3@who (list 'make-traced-macro (list 'quote lE36e3@who) lE36e4@expr))) (lE31da@syntax-violation '#f '"invalid name" lE36dd@stx))) lE36e1@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE36df@t)))))) (set! lE4be9@lE30c0@trace-define-syntax-macro lE30c0@trace-define-syntax-macro) (set! lE30c2@trace-let/rec-syntax (lambda (lE36e7@who) (lambda (lE36e9@stx) (let ((lE36eb@t lE36e9@stx)) (let ((lE36ed@ls/false (lE30fa@syntax-dispatch lE36eb@t '(_ #(each (any any)) any . each-any)))) (if lE36ed@ls/false (apply (lambda (lE36ef@lhs* lE36f0@rhs* lE36f1@b lE36f2@b*) (if (lE2efb@valid-bound-ids? lE36ef@lhs*) (let ((lE36f7@rhs* (map (lambda (lE36f9@lhs lE36fa@rhs) (list 'make-traced-macro (list 'quote lE36f9@lhs) lE36fa@rhs)) lE36ef@lhs* lE36f0@rhs*))) (lE30b0@bless (cons lE36e7@who (cons (map list lE36ef@lhs* lE36f7@rhs*) (cons lE36f1@b lE36f2@b*))))) (lE30b4@invalid-fmls-error lE36e9@stx lE36ef@lhs*))) lE36ed@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE36eb@t))))))) (set! lE4bea@lE30c2@trace-let/rec-syntax lE30c2@trace-let/rec-syntax) (set! lE30c4@trace-let-syntax-macro (lE30c2@trace-let/rec-syntax 'let-syntax)) (set! lE4beb@lE30c4@trace-let-syntax-macro lE30c4@trace-let-syntax-macro) (set! lE30c6@trace-letrec-syntax-macro (lE30c2@trace-let/rec-syntax 'letrec-syntax)) (set! lE4bec@lE30c6@trace-letrec-syntax-macro lE30c6@trace-letrec-syntax-macro) (set! lE30c8@guard-macro (lambda (lE36fd@x) (letrec* ((lE3700@gen-clauses (lambda (lE3717@con lE3718@outerk lE3719@clause*) (letrec* ((lE371e@f (lambda (lE3757@x lE3758@k) (let ((lE375b@t lE3757@x)) (let ((lE375d@ls/false (lE30fa@syntax-dispatch lE375b@t '(any #(scheme-id =>) any)))) (if lE375d@ls/false (apply (lambda (lE375f@e lE3760@p) (let ((lE3763@t (gensym))) (list 'let (list (list lE3763@t lE375f@e)) (list 'if lE3763@t (list lE3760@p lE3763@t) lE3758@k)))) lE375d@ls/false) (let ((lE3765@t lE375b@t)) (let ((lE3767@ls/false (lE30fa@syntax-dispatch lE3765@t '(any)))) (if lE3767@ls/false (apply (lambda (lE3769@e) (let ((lE376b@t (gensym))) (list 'let (list (list lE376b@t lE3769@e)) (list 'if lE376b@t lE376b@t lE3758@k)))) lE3767@ls/false) (let ((lE376d@t lE3765@t)) (let ((lE376f@ls/false (lE30fa@syntax-dispatch lE376d@t '(any any . each-any)))) (if lE376f@ls/false (apply (lambda (lE3771@e lE3772@v lE3773@v*) (list 'if lE3771@e (cons 'begin (cons lE3772@v lE3773@v*)) lE3758@k)) lE376f@ls/false) (let ((lE3777@t lE376d@t)) (let ((lE3779@ls/false (lE30fa@syntax-dispatch lE3777@t '_))) (if lE3779@ls/false (apply (lambda () (lE31da@syntax-violation '#f '"invalid guard clause" lE3757@x)) lE3779@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3777@t))))))))))))))) (lE3720@f* (lambda (lE372d@x*) (let ((lE372f@t lE372d@x*)) (let ((lE3731@ls/false (lE30fa@syntax-dispatch lE372f@t '()))) (if lE3731@ls/false (apply (lambda () (let ((lE3733@g (gensym))) (values (list lE3733@g (list 'lambda '() (list 'raise-continuable lE3717@con))) lE3733@g))) lE3731@ls/false) (let ((lE3735@t lE372f@t)) (let ((lE3737@ls/false (lE30fa@syntax-dispatch lE3735@t '((#(scheme-id else) any . each-any))))) (if lE3737@ls/false (apply (lambda (lE3739@e lE373a@e*) (values (cons 'begin (cons lE3739@e lE373a@e*)) '#f)) lE3737@ls/false) (let ((lE373d@t lE3735@t)) (let ((lE373f@ls/false (lE30fa@syntax-dispatch lE373d@t '(any . any)))) (if lE373f@ls/false (apply (lambda (lE3741@cls lE3742@cls*) (call-with-values (lambda () (lE3720@f* lE3742@cls*)) (lambda (lE3749@lE3746 lE374a@lE3748) (let ((lE374d@g lE374a@lE3748) (lE374e@e lE3749@lE3746)) (values (lE371e@f lE3741@cls lE374e@e) lE374d@g))))) lE373f@ls/false) (let ((lE3751@t lE373d@t)) (let ((lE3753@ls/false (lE30fa@syntax-dispatch lE3751@t 'any))) (if lE3753@ls/false (apply (lambda (lE3755@others) (lE31da@syntax-violation '#f '"invalid guard clause" lE3755@others)) lE3753@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3751@t)))))))))))))))) (call-with-values (lambda () (lE3720@f* lE3719@clause*)) (lambda (lE3725@lE3722 lE3726@lE3724) (let ((lE3729@raisek lE3726@lE3724) (lE372a@code lE3725@lE3722)) (if lE3729@raisek (list (list 'call/cc (list 'lambda (list lE3729@raisek) (list lE3718@outerk (list 'lambda '() lE372a@code))))) (list lE3718@outerk (list 'lambda '() lE372a@code)))))))))) (let ((lE3701@t lE36fd@x)) (let ((lE3703@ls/false (lE30fa@syntax-dispatch lE3701@t '(_ (any . each-any) any . each-any)))) (if (and lE3703@ls/false (apply (lambda (lE3705@con lE3706@clause* lE3707@b lE3708@b*) (lE2ef3@id? lE3705@con)) lE3703@ls/false)) (apply (lambda (lE370d@con lE370e@clause* lE370f@b lE3710@b*) (let ((lE3715@outerk (gensym))) (lE30b0@bless (list (list 'call/cc (list 'lambda (list lE3715@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list lE370d@con) (lE3700@gen-clauses lE370d@con lE3715@outerk lE370e@clause*)) (cons 'lambda (cons '() (cons lE370f@b lE3710@b*))))))))))) lE3703@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3701@t))))))) (set! lE4bed@lE30c8@guard-macro lE30c8@guard-macro) (set! lE30ca@define-enumeration-macro (lambda (lE377b@stx) (letrec* ((lE377e@set? (lambda (lE3797@x) (or (null? lE3797@x) (and (not (memq (car lE3797@x) (cdr lE3797@x))) (lE377e@set? (cdr lE3797@x)))))) (lE3780@remove-dups (lambda (lE3795@ls) (if (null? lE3795@ls) '() (cons (car lE3795@ls) (lE3780@remove-dups (remq (car lE3795@ls) (cdr lE3795@ls)))))))) (let ((lE3781@t lE377b@stx)) (let ((lE3783@ls/false (lE30fa@syntax-dispatch lE3781@t '(_ any each-any any)))) (if (and lE3783@ls/false (apply (lambda (lE3785@name lE3786@id* lE3787@maker) (and (lE2ef3@id? lE3785@name) (lE2ef3@id? lE3787@maker) (for-all lE2ef3@id? lE3786@id*))) lE3783@ls/false)) (apply (lambda (lE378b@name lE378c@id* lE378d@maker) (let ((lE3791@name* (lE3780@remove-dups (lE31e0@syntax->datum lE378c@id*))) (lE3792@mk (gensym))) (lE30b0@bless (list 'begin (list 'define lE3792@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote lE3791@name*)))) (list 'define-syntax lE378b@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote lE3791@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote lE378b@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax lE378d@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote lE378d@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote lE3791@name*)) (cons 'syntax-violation (cons (list 'quote lE378d@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons lE3792@mk '('(n* ...))))))))))))) lE3783@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3781@t))))))) (set! lE4bee@lE30ca@define-enumeration-macro lE30ca@define-enumeration-macro) (set! lE30cc@time-macro (lambda (lE3799@stx) (let ((lE379b@t lE3799@stx)) (let ((lE379d@ls/false (lE30fa@syntax-dispatch lE379b@t '(_ any)))) (if lE379d@ls/false (apply (lambda (lE379f@expr) (lE30b0@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() lE379f@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) lE379d@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE379b@t)))))) (set! lE4bef@lE30cc@time-macro lE30cc@time-macro) (set! lE30ce@delay-macro (lambda (lE37a1@stx) (let ((lE37a3@t lE37a1@stx)) (let ((lE37a5@ls/false (lE30fa@syntax-dispatch lE37a3@t '(_ any)))) (if lE37a5@ls/false (apply (lambda (lE37a7@expr) (lE30b0@bless (list 'make-promise (list 'lambda '() lE37a7@expr)))) lE37a5@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE37a3@t)))))) (set! lE4bf0@lE30ce@delay-macro lE30ce@delay-macro) (set! lE30d0@assert-macro (lambda (lE37a9@stx) (let ((lE37ab@t lE37a9@stx)) (let ((lE37ad@ls/false (lE30fa@syntax-dispatch lE37ab@t '(_ any)))) (if lE37ad@ls/false (apply (lambda (lE37af@expr) (let ((lE37b1@pos (or (lE31d2@expression-position lE37a9@stx) (lE31d2@expression-position lE37af@expr)))) (lE30b0@bless (list 'let (list (list 'x lE37af@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote lE37af@expr) (list 'quote lE37b1@pos))))))) lE37ad@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE37ab@t)))))) (set! lE4bf1@lE30d0@assert-macro lE30d0@assert-macro) (set! lE30d2@endianness-macro (lambda (lE37b3@stx) (let ((lE37b5@t lE37b3@stx)) (let ((lE37b7@ls/false (lE30fa@syntax-dispatch lE37b5@t '(_ any)))) (if lE37b7@ls/false (apply (lambda (lE37b9@e) (let ((lE37bb@t (lE31e0@syntax->datum lE37b9@e))) (if (memv lE37bb@t '(little)) (lE30b0@bless ''little) (if (memv lE37bb@t '(big)) (lE30b0@bless ''big) (lE31da@syntax-violation '#f '"endianness must be big or little" lE37b3@stx))))) lE37b7@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE37b5@t)))))) (set! lE4bf2@lE30d2@endianness-macro lE30d2@endianness-macro) (set! lE30d4@identifier-syntax-macro (lambda (lE37bd@stx) (let ((lE37bf@t lE37bd@stx)) (let ((lE37c1@ls/false (lE30fa@syntax-dispatch lE37bf@t '(_ any)))) (if lE37c1@ls/false (apply (lambda (lE37c3@expr) (lE30b0@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax lE37c3@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax lE37c3@expr) '((syntax (e* ...)))))))))) lE37c1@ls/false) (let ((lE37c5@t lE37bf@t)) (let ((lE37c7@ls/false (lE30fa@syntax-dispatch lE37c5@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and lE37c7@ls/false (apply (lambda (lE37c9@id1 lE37ca@expr1 lE37cb@id2 lE37cc@expr2 lE37cd@expr3) (and (lE2ef3@id? lE37c9@id1) (lE2ef3@id? lE37cb@id2) (lE2ef3@id? lE37cc@expr2))) lE37c7@ls/false)) (apply (lambda (lE37d3@id1 lE37d4@expr1 lE37d5@id2 lE37d6@expr2 lE37d7@expr3) (lE30b0@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax lE37d4@expr1)) (list (list 'set! 'id lE37d6@expr2) (list 'syntax lE37d7@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons lE37d4@expr1 '(e* ...))))))))) lE37c7@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE37c5@t))))))))) (set! lE4bf3@lE30d4@identifier-syntax-macro lE30d4@identifier-syntax-macro) (set! lE30d6@do-macro (lambda (lE37dd@stx) (letrec* ((lE37e0@bind (lambda (lE37f7@x) (let ((lE37f9@t lE37f7@x)) (let ((lE37fb@ls/false (lE30fa@syntax-dispatch lE37f9@t '(any any)))) (if lE37fb@ls/false (apply (lambda (lE37fd@x lE37fe@init) (list lE37fd@x lE37fe@init lE37fd@x)) lE37fb@ls/false) (let ((lE3801@t lE37f9@t)) (let ((lE3803@ls/false (lE30fa@syntax-dispatch lE3801@t '(any any any)))) (if lE3803@ls/false (apply (lambda (lE3805@x lE3806@init lE3807@step) (list lE3805@x lE3806@init lE3807@step)) lE3803@ls/false) (let ((lE380b@t lE3801@t)) (let ((lE380d@ls/false (lE30fa@syntax-dispatch lE380b@t '_))) (if lE380d@ls/false (apply (lambda () (lE31da@syntax-violation '#f '"invalid binding" lE37dd@stx)) lE380d@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE380b@t))))))))))))) (let ((lE37e1@t lE37dd@stx)) (let ((lE37e3@ls/false (lE30fa@syntax-dispatch lE37e1@t '(_ each-any (any . each-any) . each-any)))) (if lE37e3@ls/false (apply (lambda (lE37e5@binding* lE37e6@test lE37e7@expr* lE37e8@command*) (let ((lE37ed@t (map lE37e0@bind lE37e5@binding*))) (let ((lE37ef@ls/false (lE30fa@syntax-dispatch lE37ed@t '#(each (any any any))))) (if lE37ef@ls/false (apply (lambda (lE37f1@x* lE37f2@init* lE37f3@step*) (if (lE2efb@valid-bound-ids? lE37f1@x*) (lE30b0@bless (list 'letrec (list (list 'loop (list 'lambda lE37f1@x* (list 'if lE37e6@test (cons 'begin (cons '(if #f #f) lE37e7@expr*)) (cons 'begin (append lE37e8@command* (list (cons 'loop lE37f3@step*)))))))) (cons 'loop lE37f2@init*))) (lE31da@syntax-violation '#f '"invalid bindings" lE37dd@stx))) lE37ef@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE37ed@t))))) lE37e3@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE37e1@t))))))) (set! lE4bf4@lE30d6@do-macro lE30d6@do-macro) (set! lE30d8@let*-macro (lambda (lE380f@stx) (let ((lE3811@t lE380f@stx)) (let ((lE3813@ls/false (lE30fa@syntax-dispatch lE3811@t '(_ #(each (any any)) any . each-any)))) (if (and lE3813@ls/false (apply (lambda (lE3815@lhs* lE3816@rhs* lE3817@b lE3818@b*) (for-all lE2ef3@id? lE3815@lhs*)) lE3813@ls/false)) (apply (lambda (lE381d@lhs* lE381e@rhs* lE381f@b lE3820@b*) (lE30b0@bless (let lE3827@f ((lE3825@x* (map list lE381d@lhs* lE381e@rhs*))) (if (null? lE3825@x*) (cons 'let (cons '() (cons lE381f@b lE3820@b*))) (list 'let (list (car lE3825@x*)) (lE3827@f (cdr lE3825@x*))))))) lE3813@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3811@t)))))) (set! lE4bf5@lE30d8@let*-macro lE30d8@let*-macro) (set! lE30da@or-macro (lambda (lE3829@stx) (let ((lE382b@t lE3829@stx)) (let ((lE382d@ls/false (lE30fa@syntax-dispatch lE382b@t '(_)))) (if lE382d@ls/false (apply (lambda () '#f) lE382d@ls/false) (let ((lE382f@t lE382b@t)) (let ((lE3831@ls/false (lE30fa@syntax-dispatch lE382f@t '(_ any . each-any)))) (if lE3831@ls/false (apply (lambda (lE3833@e lE3834@e*) (lE30b0@bless (let lE383b@f ((lE3837@e lE3833@e) (lE3838@e* lE3834@e*)) (if (null? lE3838@e*) (list 'begin '#f lE3837@e) (list 'let (list (list 't lE3837@e)) (list 'if 't 't (lE383b@f (car lE3838@e*) (cdr lE3838@e*)))))))) lE3831@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE382f@t))))))))) (set! lE4bf6@lE30da@or-macro lE30da@or-macro) (set! lE30dc@and-macro (lambda (lE383d@stx) (let ((lE383f@t lE383d@stx)) (let ((lE3841@ls/false (lE30fa@syntax-dispatch lE383f@t '(_)))) (if lE3841@ls/false (apply (lambda () '#t) lE3841@ls/false) (let ((lE3843@t lE383f@t)) (let ((lE3845@ls/false (lE30fa@syntax-dispatch lE3843@t '(_ any . each-any)))) (if lE3845@ls/false (apply (lambda (lE3847@e lE3848@e*) (lE30b0@bless (let lE384f@f ((lE384b@e lE3847@e) (lE384c@e* lE3848@e*)) (if (null? lE384c@e*) (list 'begin '#f lE384b@e) (cons 'if (cons lE384b@e (cons (lE384f@f (car lE384c@e*) (cdr lE384c@e*)) '(#f)))))))) lE3845@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3843@t))))))))) (set! lE4bf7@lE30dc@and-macro lE30dc@and-macro) (set! lE30de@cond-macro (lambda (lE3851@stx) (let ((lE3853@t lE3851@stx)) (let ((lE3855@ls/false (lE30fa@syntax-dispatch lE3853@t '(_ any . each-any)))) (if lE3855@ls/false (apply (lambda (lE3857@cls lE3858@cls*) (lE30b0@bless (let lE385f@f ((lE385b@cls lE3857@cls) (lE385c@cls* lE3858@cls*)) (if (null? lE385c@cls*) (let ((lE3861@t lE385b@cls)) (let ((lE3863@ls/false (lE30fa@syntax-dispatch lE3861@t '(#(scheme-id else) any . each-any)))) (if lE3863@ls/false (apply (lambda (lE3865@e lE3866@e*) (cons 'begin (cons lE3865@e lE3866@e*))) lE3863@ls/false) (let ((lE3869@t lE3861@t)) (let ((lE386b@ls/false (lE30fa@syntax-dispatch lE3869@t '(any #(scheme-id =>) any)))) (if lE386b@ls/false (apply (lambda (lE386d@e lE386e@p) (list 'let (list (list 't lE386d@e)) (list 'if 't (cons lE386e@p '(t))))) lE386b@ls/false) (let ((lE3871@t lE3869@t)) (let ((lE3873@ls/false (lE30fa@syntax-dispatch lE3871@t '(any)))) (if lE3873@ls/false (apply (lambda (lE3875@e) (cons 'or (cons lE3875@e '((if #f #f))))) lE3873@ls/false) (let ((lE3877@t lE3871@t)) (let ((lE3879@ls/false (lE30fa@syntax-dispatch lE3877@t '(any . each-any)))) (if lE3879@ls/false (apply (lambda (lE387b@e lE387c@e*) (list 'if lE387b@e (cons 'begin lE387c@e*))) lE3879@ls/false) (let ((lE387f@t lE3877@t)) (let ((lE3881@ls/false (lE30fa@syntax-dispatch lE387f@t '_))) (if lE3881@ls/false (apply (lambda () (lE31da@syntax-violation '#f '"invalid last clause" lE3851@stx)) lE3881@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE387f@t)))))))))))))))) (let ((lE3883@t lE385b@cls)) (let ((lE3885@ls/false (lE30fa@syntax-dispatch lE3883@t '(#(scheme-id else) any . each-any)))) (if lE3885@ls/false (apply (lambda (lE3887@e lE3888@e*) (lE31da@syntax-violation '#f '"incorrect position of keyword else" lE3851@stx)) lE3885@ls/false) (let ((lE388b@t lE3883@t)) (let ((lE388d@ls/false (lE30fa@syntax-dispatch lE388b@t '(any #(scheme-id =>) any)))) (if lE388d@ls/false (apply (lambda (lE388f@e lE3890@p) (list 'let (list (list 't lE388f@e)) (list 'if 't (cons lE3890@p '(t)) (lE385f@f (car lE385c@cls*) (cdr lE385c@cls*))))) lE388d@ls/false) (let ((lE3893@t lE388b@t)) (let ((lE3895@ls/false (lE30fa@syntax-dispatch lE3893@t '(any)))) (if lE3895@ls/false (apply (lambda (lE3897@e) (list 'or lE3897@e (lE385f@f (car lE385c@cls*) (cdr lE385c@cls*)))) lE3895@ls/false) (let ((lE3899@t lE3893@t)) (let ((lE389b@ls/false (lE30fa@syntax-dispatch lE3899@t '(any . each-any)))) (if lE389b@ls/false (apply (lambda (lE389d@e lE389e@e*) (list 'if lE389d@e (cons 'begin lE389e@e*) (lE385f@f (car lE385c@cls*) (cdr lE385c@cls*)))) lE389b@ls/false) (let ((lE38a1@t lE3899@t)) (let ((lE38a3@ls/false (lE30fa@syntax-dispatch lE38a1@t '_))) (if lE38a3@ls/false (apply (lambda () (lE31da@syntax-violation '#f '"invalid last clause" lE3851@stx)) lE38a3@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE38a1@t)))))))))))))))))))) lE3855@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3853@t)))))) (set! lE4bf8@lE30de@cond-macro lE30de@cond-macro) (set! lE30e0@do-include (lambda (lE38a5@stx lE38a6@id lE38a7@filename) (let ((lE38ab@filename (lE2f07@stx->datum lE38a7@filename))) (begin (if (not (and (string? lE38ab@filename) (lE2ef3@id? lE38a6@id))) (lE31da@syntax-violation '#f '"invalid syntax" lE38a5@stx) (void)) (cons (lE30b0@bless 'begin) (with-input-from-file lE38ab@filename (lambda () (let lE38af@f ((lE38ad@ls '())) (let ((lE38b1@x (lE2a35@lE2905@read-annotated))) (if (eof-object? lE38b1@x) (reverse lE38ad@ls) (lE38af@f (cons (lE2ed3@datum->stx lE38a6@id lE38b1@x) lE38ad@ls)))))))))))) (set! lE4bf9@lE30e0@do-include lE30e0@do-include) (set! lE30e2@include-macro (lambda (lE38b3@e) (let ((lE38b5@t lE38b3@e)) (let ((lE38b7@ls/false (lE30fa@syntax-dispatch lE38b5@t '(any any)))) (if lE38b7@ls/false (apply (lambda (lE38b9@id lE38ba@filename) (lE30e0@do-include lE38b3@e lE38b9@id lE38ba@filename)) lE38b7@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE38b5@t)))))) (set! lE4bfa@lE30e2@include-macro lE30e2@include-macro) (set! lE30e4@include-into-macro (lambda (lE38bd@e) (let ((lE38bf@t lE38bd@e)) (let ((lE38c1@ls/false (lE30fa@syntax-dispatch lE38bf@t '(_ any any)))) (if lE38c1@ls/false (apply (lambda (lE38c3@id lE38c4@filename) (lE30e0@do-include lE38bd@e lE38c3@id lE38c4@filename)) lE38c1@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE38bf@t)))))) (set! lE4bfb@lE30e4@include-into-macro lE30e4@include-into-macro) (set! lE30e6@syntax-rules-macro (lambda (lE38c7@e) (let ((lE38c9@t lE38c7@e)) (let ((lE38cb@ls/false (lE30fa@syntax-dispatch lE38c9@t '(_ each-any . #(each (any any)))))) (if lE38cb@ls/false (apply (lambda (lE38cd@lits lE38ce@pat* lE38cf@tmp*) (begin (lE3100@verify-literals lE38cd@lits lE38c7@e) (lE30b0@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons lE38cd@lits (map (lambda (lE38d3@pat lE38d4@tmp) (let ((lE38d7@t lE38d3@pat)) (let ((lE38d9@ls/false (lE30fa@syntax-dispatch lE38d7@t '(_ . any)))) (if lE38d9@ls/false (apply (lambda (lE38db@rest) (list (cons 'g lE38db@rest) (list 'syntax lE38d4@tmp))) lE38d9@ls/false) (let ((lE38dd@t lE38d7@t)) (let ((lE38df@ls/false (lE30fa@syntax-dispatch lE38dd@t '_))) (if lE38df@ls/false (apply (lambda () (lE31da@syntax-violation '#f '"invalid syntax-rules pattern" lE38c7@e lE38d3@pat)) lE38df@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE38dd@t)))))))) lE38ce@pat* lE38cf@tmp*)))))))) lE38cb@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE38c9@t)))))) (set! lE4bfc@lE30e6@syntax-rules-macro lE30e6@syntax-rules-macro) (set! lE30e8@quasiquote-macro (letrec* ((lE38e2@datum (lambda (lE39e3@x) (list (lE3082@scheme-stx 'quote) (lE2edb@mkstx lE39e3@x lE2e77@top-mark* '() '())))) (lE38fe@quasicons* (lambda (lE39db@x lE39dc@y) (let lE39e1@f ((lE39df@x lE39db@x)) (if (null? lE39df@x) lE39dc@y (lE3900@quasicons (car lE39df@x) (lE39e1@f (cdr lE39df@x))))))) (lE3900@quasicons (lambda (lE39b5@x lE39b6@y) (let ((lE39b9@t lE39b6@y)) (let ((lE39bb@ls/false (lE30fa@syntax-dispatch lE39b9@t '(#(scheme-id quote) any)))) (if lE39bb@ls/false (apply (lambda (lE39bd@dy) (let ((lE39bf@t lE39b5@x)) (let ((lE39c1@ls/false (lE30fa@syntax-dispatch lE39bf@t '(#(scheme-id quote) any)))) (if lE39c1@ls/false (apply (lambda (lE39c3@dx) (list (lE3082@scheme-stx 'quote) (cons lE39c3@dx lE39bd@dy))) lE39c1@ls/false) (let ((lE39c5@t lE39bf@t)) (let ((lE39c7@ls/false (lE30fa@syntax-dispatch lE39c5@t '_))) (if lE39c7@ls/false (apply (lambda () (let ((lE39c9@t lE39bd@dy)) (let ((lE39cb@ls/false (lE30fa@syntax-dispatch lE39c9@t '()))) (if lE39cb@ls/false (apply (lambda () (list (lE3082@scheme-stx 'list) lE39b5@x)) lE39cb@ls/false) (let ((lE39cd@t lE39c9@t)) (let ((lE39cf@ls/false (lE30fa@syntax-dispatch lE39cd@t '_))) (if lE39cf@ls/false (apply (lambda () (list (lE3082@scheme-stx 'cons) lE39b5@x lE39b6@y)) lE39cf@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE39cd@t)))))))) lE39c7@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE39c5@t)))))))) lE39bb@ls/false) (let ((lE39d1@t lE39b9@t)) (let ((lE39d3@ls/false (lE30fa@syntax-dispatch lE39d1@t '(#(scheme-id list) . each-any)))) (if lE39d3@ls/false (apply (lambda (lE39d5@stuff) (cons* (lE3082@scheme-stx 'list) lE39b5@x lE39d5@stuff)) lE39d3@ls/false) (let ((lE39d7@t lE39d1@t)) (let ((lE39d9@ls/false (lE30fa@syntax-dispatch lE39d7@t '_))) (if lE39d9@ls/false (apply (lambda () (list (lE3082@scheme-stx 'cons) lE39b5@x lE39b6@y)) lE39d9@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE39d7@t)))))))))))) (lE3902@quasiappend (lambda (lE399b@x lE399c@y) (let ((lE399f@ls (let lE39a3@f ((lE39a1@x lE399b@x)) (if (null? lE39a1@x) (let ((lE39a5@t lE399c@y)) (let ((lE39a7@ls/false (lE30fa@syntax-dispatch lE39a5@t '(#(scheme-id quote) ())))) (if lE39a7@ls/false (apply (lambda () '()) lE39a7@ls/false) (let ((lE39a9@t lE39a5@t)) (let ((lE39ab@ls/false (lE30fa@syntax-dispatch lE39a9@t '_))) (if lE39ab@ls/false (apply (lambda () (list lE399c@y)) lE39ab@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE39a9@t))))))) (let ((lE39ad@t (car lE39a1@x))) (let ((lE39af@ls/false (lE30fa@syntax-dispatch lE39ad@t '(#(scheme-id quote) ())))) (if lE39af@ls/false (apply (lambda () (lE39a3@f (cdr lE39a1@x))) lE39af@ls/false) (let ((lE39b1@t lE39ad@t)) (let ((lE39b3@ls/false (lE30fa@syntax-dispatch lE39b1@t '_))) (if lE39b3@ls/false (apply (lambda () (cons (car lE39a1@x) (lE39a3@f (cdr lE39a1@x)))) lE39b3@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE39b1@t))))))))))) (if (null? lE399f@ls) (list (lE3082@scheme-stx 'quote) '()) (if (null? (cdr lE399f@ls)) (car lE399f@ls) (cons* (lE3082@scheme-stx 'append) lE399f@ls)))))) (lE3904@quasivector (lambda (lE3969@x) (let ((lE396b@pat-x lE3969@x)) (let ((lE396d@t lE396b@pat-x)) (let ((lE396f@ls/false (lE30fa@syntax-dispatch lE396d@t '(#(scheme-id quote) each-any)))) (if lE396f@ls/false (apply (lambda (lE3971@x*) (list (lE3082@scheme-stx 'quote) (list->vector lE3971@x*))) lE396f@ls/false) (let ((lE3973@t lE396d@t)) (let ((lE3975@ls/false (lE30fa@syntax-dispatch lE3973@t '_))) (if lE3975@ls/false (apply (lambda () (let lE397d@f ((lE3977@x lE3969@x) (lE3978@k (lambda (lE397b@ls) (cons* (lE3082@scheme-stx 'vector) lE397b@ls)))) (let ((lE397f@t lE3977@x)) (let ((lE3981@ls/false (lE30fa@syntax-dispatch lE397f@t '(#(scheme-id quote) each-any)))) (if lE3981@ls/false (apply (lambda (lE3983@x*) (lE3978@k (map (lambda (lE3985@x) (list (lE3082@scheme-stx 'quote) lE3985@x)) lE3983@x*))) lE3981@ls/false) (let ((lE3987@t lE397f@t)) (let ((lE3989@ls/false (lE30fa@syntax-dispatch lE3987@t '(#(scheme-id list) . each-any)))) (if lE3989@ls/false (apply (lambda (lE398b@x*) (lE3978@k lE398b@x*)) lE3989@ls/false) (let ((lE398d@t lE3987@t)) (let ((lE398f@ls/false (lE30fa@syntax-dispatch lE398d@t '(#(scheme-id cons) any any)))) (if lE398f@ls/false (apply (lambda (lE3991@x lE3992@y) (lE397d@f lE3992@y (lambda (lE3995@ls) (lE3978@k (cons lE3991@x lE3995@ls))))) lE398f@ls/false) (let ((lE3997@t lE398d@t)) (let ((lE3999@ls/false (lE30fa@syntax-dispatch lE3997@t '_))) (if lE3999@ls/false (apply (lambda () (list (lE3082@scheme-stx 'list->vector) lE396b@pat-x)) lE3999@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3997@t))))))))))))))) lE3975@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3973@t)))))))))) (lE3906@vquasi (lambda (lE3947@p lE3948@lev) (let ((lE394b@t lE3947@p)) (let ((lE394d@ls/false (lE30fa@syntax-dispatch lE394b@t '(any . any)))) (if lE394d@ls/false (apply (lambda (lE394f@p lE3950@q) (let ((lE3953@t lE394f@p)) (let ((lE3955@ls/false (lE30fa@syntax-dispatch lE3953@t '(#(scheme-id unquote) . each-any)))) (if lE3955@ls/false (apply (lambda (lE3957@p) (if (= lE3948@lev '0) (lE38fe@quasicons* lE3957@p (lE3906@vquasi lE3950@q lE3948@lev)) (lE3900@quasicons (lE3900@quasicons (lE38e2@datum 'unquote) (lE3908@quasi lE3957@p (- lE3948@lev '1))) (lE3906@vquasi lE3950@q lE3948@lev)))) lE3955@ls/false) (let ((lE3959@t lE3953@t)) (let ((lE395b@ls/false (lE30fa@syntax-dispatch lE3959@t '(#(scheme-id unquote-splicing) . each-any)))) (if lE395b@ls/false (apply (lambda (lE395d@p) (if (= lE3948@lev '0) (lE3902@quasiappend lE395d@p (lE3906@vquasi lE3950@q lE3948@lev)) (lE3900@quasicons (lE3900@quasicons (lE38e2@datum 'unquote-splicing) (lE3908@quasi lE395d@p (- lE3948@lev '1))) (lE3906@vquasi lE3950@q lE3948@lev)))) lE395b@ls/false) (let ((lE395f@t lE3959@t)) (let ((lE3961@ls/false (lE30fa@syntax-dispatch lE395f@t 'any))) (if lE3961@ls/false (apply (lambda (lE3963@p) (lE3900@quasicons (lE3908@quasi lE3963@p lE3948@lev) (lE3906@vquasi lE3950@q lE3948@lev))) lE3961@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE395f@t))))))))))) lE394d@ls/false) (let ((lE3965@t lE394b@t)) (let ((lE3967@ls/false (lE30fa@syntax-dispatch lE3965@t '()))) (if lE3967@ls/false (apply (lambda () (list (lE3082@scheme-stx 'quote) '())) lE3967@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3965@t))))))))) (lE3908@quasi (lambda (lE3911@p lE3912@lev) (let ((lE3915@t lE3911@p)) (let ((lE3917@ls/false (lE30fa@syntax-dispatch lE3915@t '(#(scheme-id unquote) any)))) (if lE3917@ls/false (apply (lambda (lE3919@p) (if (= lE3912@lev '0) lE3919@p (lE3900@quasicons (lE38e2@datum 'unquote) (lE3908@quasi (list lE3919@p) (- lE3912@lev '1))))) lE3917@ls/false) (let ((lE391b@t lE3915@t)) (let ((lE391d@ls/false (lE30fa@syntax-dispatch lE391b@t '((#(scheme-id unquote) . each-any) . any)))) (if lE391d@ls/false (apply (lambda (lE391f@p lE3920@q) (if (= lE3912@lev '0) (lE38fe@quasicons* lE391f@p (lE3908@quasi lE3920@q lE3912@lev)) (lE3900@quasicons (lE3900@quasicons (lE38e2@datum 'unquote) (lE3908@quasi lE391f@p (- lE3912@lev '1))) (lE3908@quasi lE3920@q lE3912@lev)))) lE391d@ls/false) (let ((lE3923@t lE391b@t)) (let ((lE3925@ls/false (lE30fa@syntax-dispatch lE3923@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if lE3925@ls/false (apply (lambda (lE3927@p lE3928@q) (if (= lE3912@lev '0) (lE3902@quasiappend lE3927@p (lE3908@quasi lE3928@q lE3912@lev)) (lE3900@quasicons (lE3900@quasicons (lE38e2@datum 'unquote-splicing) (lE3908@quasi lE3927@p (- lE3912@lev '1))) (lE3908@quasi lE3928@q lE3912@lev)))) lE3925@ls/false) (let ((lE392b@t lE3923@t)) (let ((lE392d@ls/false (lE30fa@syntax-dispatch lE392b@t '(#(scheme-id quasiquote) any)))) (if lE392d@ls/false (apply (lambda (lE392f@p) (lE3900@quasicons (lE38e2@datum 'quasiquote) (lE3908@quasi (list lE392f@p) (+ lE3912@lev '1)))) lE392d@ls/false) (let ((lE3931@t lE392b@t)) (let ((lE3933@ls/false (lE30fa@syntax-dispatch lE3931@t '(any . any)))) (if lE3933@ls/false (apply (lambda (lE3935@p lE3936@q) (lE3900@quasicons (lE3908@quasi lE3935@p lE3912@lev) (lE3908@quasi lE3936@q lE3912@lev))) lE3933@ls/false) (let ((lE3939@t lE3931@t)) (let ((lE393b@ls/false (lE30fa@syntax-dispatch lE3939@t '#(vector each-any)))) (if (and lE393b@ls/false (apply (lambda (lE393d@x) (not (lE2ebf@stx? lE393d@x))) lE393b@ls/false)) (apply (lambda (lE393f@x) (lE3904@quasivector (lE3906@vquasi lE393f@x lE3912@lev))) lE393b@ls/false) (let ((lE3941@t lE3939@t)) (let ((lE3943@ls/false (lE30fa@syntax-dispatch lE3941@t 'any))) (if lE3943@ls/false (apply (lambda (lE3945@p) (list (lE3082@scheme-stx 'quote) lE3945@p)) lE3943@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3941@t))))))))))))))))))))))))) (lambda (lE3909@x) (let ((lE390b@t lE3909@x)) (let ((lE390d@ls/false (lE30fa@syntax-dispatch lE390b@t '(_ any)))) (if lE390d@ls/false (apply (lambda (lE390f@e) (lE3908@quasi lE390f@e '0)) lE390d@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE390b@t))))))) (set! lE4bfd@lE30e8@quasiquote-macro lE30e8@quasiquote-macro) (set! lE30ea@quasisyntax-macro (letrec* ((lE39e6@quasi (lambda (lE3a01@p lE3a02@lev) (let ((lE3a05@t lE3a01@p)) (let ((lE3a07@ls/false (lE30fa@syntax-dispatch lE3a05@t '(#(scheme-id unsyntax) any)))) (if lE3a07@ls/false (apply (lambda (lE3a09@p) (if (= lE3a02@lev '0) (let ((lE3a0b@g (gensym))) (values (list lE3a0b@g) (list lE3a09@p) lE3a0b@g)) (call-with-values (lambda () (lE39e6@quasi lE3a09@p (- lE3a02@lev '1))) (lambda (lE3a13@lE3a0e lE3a14@lE3a10 lE3a15@lE3a12) (let ((lE3a19@p lE3a15@lE3a12) (lE3a1a@rhs* lE3a14@lE3a10) (lE3a1b@lhs* lE3a13@lE3a0e)) (values lE3a1b@lhs* lE3a1a@rhs* (list 'unsyntax lE3a19@p))))))) lE3a07@ls/false) (let ((lE3a1f@t lE3a05@t)) (let ((lE3a21@ls/false (lE30fa@syntax-dispatch lE3a1f@t '#(scheme-id unsyntax)))) (if (and lE3a21@ls/false (apply (lambda () (= lE3a02@lev '0)) lE3a21@ls/false)) (apply (lambda () (lE31da@syntax-violation '#f '"incorrect use of unsyntax" lE3a01@p)) lE3a21@ls/false) (let ((lE3a23@t lE3a1f@t)) (let ((lE3a25@ls/false (lE30fa@syntax-dispatch lE3a23@t '((#(scheme-id unsyntax) . each-any) . any)))) (if lE3a25@ls/false (apply (lambda (lE3a27@p* lE3a28@q) (call-with-values (lambda () (lE39e6@quasi lE3a28@q lE3a02@lev)) (lambda (lE3a31@lE3a2c lE3a32@lE3a2e lE3a33@lE3a30) (let ((lE3a37@q lE3a33@lE3a30) (lE3a38@rhs* lE3a32@lE3a2e) (lE3a39@lhs* lE3a31@lE3a2c)) (if (= lE3a02@lev '0) (let ((lE3a3d@g* (map (lambda (lE3a3f@x) (gensym)) lE3a27@p*))) (values (append lE3a3d@g* lE3a39@lhs*) (append lE3a27@p* lE3a38@rhs*) (append lE3a3d@g* lE3a37@q))) (call-with-values (lambda () (lE39e6@quasi lE3a27@p* (- lE3a02@lev '1))) (lambda (lE3a47@lE3a42 lE3a48@lE3a44 lE3a49@lE3a46) (let ((lE3a4d@p* lE3a49@lE3a46) (lE3a4e@rhs2* lE3a48@lE3a44) (lE3a4f@lhs2* lE3a47@lE3a42)) (values (append lE3a4f@lhs2* lE3a39@lhs*) (append lE3a4e@rhs2* lE3a38@rhs*) (cons (cons 'unsyntax lE3a4d@p*) lE3a37@q)))))))))) lE3a25@ls/false) (let ((lE3a53@t lE3a23@t)) (let ((lE3a55@ls/false (lE30fa@syntax-dispatch lE3a53@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if lE3a55@ls/false (apply (lambda (lE3a57@p* lE3a58@q) (call-with-values (lambda () (lE39e6@quasi lE3a58@q lE3a02@lev)) (lambda (lE3a61@lE3a5c lE3a62@lE3a5e lE3a63@lE3a60) (let ((lE3a67@q lE3a63@lE3a60) (lE3a68@rhs* lE3a62@lE3a5e) (lE3a69@lhs* lE3a61@lE3a5c)) (if (= lE3a02@lev '0) (let ((lE3a6d@g* (map (lambda (lE3a6f@x) (gensym)) lE3a57@p*))) (values (append (map (lambda (lE3a71@g) (cons lE3a71@g '(...))) lE3a6d@g*) lE3a69@lhs*) (append lE3a57@p* lE3a68@rhs*) (append (apply append (map (lambda (lE3a73@g) (cons lE3a73@g '(...))) lE3a6d@g*)) lE3a67@q))) (call-with-values (lambda () (lE39e6@quasi lE3a57@p* (- lE3a02@lev '1))) (lambda (lE3a7b@lE3a76 lE3a7c@lE3a78 lE3a7d@lE3a7a) (let ((lE3a81@p* lE3a7d@lE3a7a) (lE3a82@rhs2* lE3a7c@lE3a78) (lE3a83@lhs2* lE3a7b@lE3a76)) (values (append lE3a83@lhs2* lE3a69@lhs*) (append lE3a82@rhs2* lE3a68@rhs*) (cons (cons 'unsyntax-splicing lE3a81@p*) lE3a67@q)))))))))) lE3a55@ls/false) (let ((lE3a87@t lE3a53@t)) (let ((lE3a89@ls/false (lE30fa@syntax-dispatch lE3a87@t '#(scheme-id unsyntax-splicing)))) (if (and lE3a89@ls/false (apply (lambda () (= lE3a02@lev '0)) lE3a89@ls/false)) (apply (lambda () (lE31da@syntax-violation '#f '"incorrect use of unsyntax-splicing" lE3a01@p)) lE3a89@ls/false) (let ((lE3a8b@t lE3a87@t)) (let ((lE3a8d@ls/false (lE30fa@syntax-dispatch lE3a8b@t '(#(scheme-id quasisyntax) any)))) (if lE3a8d@ls/false (apply (lambda (lE3a8f@p) (call-with-values (lambda () (lE39e6@quasi lE3a8f@p (+ lE3a02@lev '1))) (lambda (lE3a97@lE3a92 lE3a98@lE3a94 lE3a99@lE3a96) (let ((lE3a9d@p lE3a99@lE3a96) (lE3a9e@rhs* lE3a98@lE3a94) (lE3a9f@lhs* lE3a97@lE3a92)) (values lE3a9f@lhs* lE3a9e@rhs* (list 'quasisyntax lE3a9d@p)))))) lE3a8d@ls/false) (let ((lE3aa3@t lE3a8b@t)) (let ((lE3aa5@ls/false (lE30fa@syntax-dispatch lE3aa3@t '(any . any)))) (if lE3aa5@ls/false (apply (lambda (lE3aa7@p lE3aa8@q) (call-with-values (lambda () (lE39e6@quasi lE3aa7@p lE3a02@lev)) (lambda (lE3ab7@lE3aac lE3ab8@lE3aae lE3ab9@lE3ab0) (call-with-values (lambda () (lE39e6@quasi lE3aa8@q lE3a02@lev)) (lambda (lE3abd@lE3ab2 lE3abe@lE3ab4 lE3abf@lE3ab6) (let ((lE3ac3@q lE3abf@lE3ab6) (lE3ac4@rhs2* lE3abe@lE3ab4) (lE3ac5@lhs2* lE3abd@lE3ab2) (lE3ac6@p lE3ab9@lE3ab0) (lE3ac7@rhs* lE3ab8@lE3aae) (lE3ac8@lhs* lE3ab7@lE3aac)) (values (append lE3ac5@lhs2* lE3ac8@lhs*) (append lE3ac4@rhs2* lE3ac7@rhs*) (cons lE3ac6@p lE3ac3@q)))))))) lE3aa5@ls/false) (let ((lE3acf@t lE3aa3@t)) (let ((lE3ad1@ls/false (lE30fa@syntax-dispatch lE3acf@t '#(vector each-any)))) (if lE3ad1@ls/false (apply (lambda (lE3ad3@x*) (call-with-values (lambda () (lE39e6@quasi lE3ad3@x* lE3a02@lev)) (lambda (lE3adb@lE3ad6 lE3adc@lE3ad8 lE3add@lE3ada) (let ((lE3ae1@x* lE3add@lE3ada) (lE3ae2@rhs* lE3adc@lE3ad8) (lE3ae3@lhs* lE3adb@lE3ad6)) (values lE3ae3@lhs* lE3ae2@rhs* (list->vector lE3ae1@x*)))))) lE3ad1@ls/false) (let ((lE3ae7@t lE3acf@t)) (let ((lE3ae9@ls/false (lE30fa@syntax-dispatch lE3ae7@t '_))) (if lE3ae9@ls/false (apply (lambda () (values '() '() lE3a01@p)) lE3ae9@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3ae7@t))))))))))))))))))))))))))))))) (lambda (lE39e7@x) (let ((lE39e9@t lE39e7@x)) (let ((lE39eb@ls/false (lE30fa@syntax-dispatch lE39e9@t '(_ any)))) (if lE39eb@ls/false (apply (lambda (lE39ed@e) (call-with-values (lambda () (lE39e6@quasi lE39ed@e '0)) (lambda (lE39f5@lE39f0 lE39f6@lE39f2 lE39f7@lE39f4) (let ((lE39fb@v lE39f7@lE39f4) (lE39fc@rhs* lE39f6@lE39f2) (lE39fd@lhs* lE39f5@lE39f0)) (lE30b0@bless (list 'syntax-case (cons 'list lE39fc@rhs*) '() (list lE39fd@lhs* (list 'syntax lE39fb@v)))))))) lE39eb@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE39e9@t))))))) (set! lE4bfe@lE30ea@quasisyntax-macro lE30ea@quasisyntax-macro) (set! lE30ec@define-struct-macro (lambda (lE3aeb@stx) (lE31da@syntax-violation '#f '"define-struct not supported" lE3aeb@stx))) (set! lE4bff@lE30ec@define-struct-macro lE30ec@define-struct-macro) (set! lE30ee@define-record-type-macro (lambda (lE3aed@x) (letrec* ((lE3af0@id (lambda (lE3ce3@ctxt . lE3ce5@str*) (lE31de@datum->syntax lE3ce3@ctxt (string->symbol (apply string-append (map (lambda (lE3ce7@x) (if (symbol? lE3ce7@x) (symbol->string lE3ce7@x) (if (string? lE3ce7@x) lE3ce7@x (assertion-violation 'define-record-type '"BUG")))) lE3ce5@str*)))))) (lE3af2@get-record-name (lambda (lE3cd1@spec) (let ((lE3cd3@t lE3cd1@spec)) (let ((lE3cd5@ls/false (lE30fa@syntax-dispatch lE3cd3@t '(any any any)))) (if lE3cd5@ls/false (apply (lambda (lE3cd7@foo lE3cd8@make-foo lE3cd9@foo?) lE3cd7@foo) lE3cd5@ls/false) (let ((lE3cdd@t lE3cd3@t)) (let ((lE3cdf@ls/false (lE30fa@syntax-dispatch lE3cdd@t 'any))) (if lE3cdf@ls/false (apply (lambda (lE3ce1@foo) lE3ce1@foo) lE3cdf@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3cdd@t))))))))) (lE3af4@get-record-constructor-name (lambda (lE3cbd@spec) (let ((lE3cbf@t lE3cbd@spec)) (let ((lE3cc1@ls/false (lE30fa@syntax-dispatch lE3cbf@t '(any any any)))) (if lE3cc1@ls/false (apply (lambda (lE3cc3@foo lE3cc4@make-foo lE3cc5@foo?) lE3cc4@make-foo) lE3cc1@ls/false) (let ((lE3cc9@t lE3cbf@t)) (let ((lE3ccb@ls/false (lE30fa@syntax-dispatch lE3cc9@t 'any))) (if (and lE3ccb@ls/false (apply (lambda (lE3ccd@foo) (lE2ef3@id? lE3ccd@foo)) lE3ccb@ls/false)) (apply (lambda (lE3ccf@foo) (lE3af0@id lE3ccf@foo '"make-" (lE2f07@stx->datum lE3ccf@foo))) lE3ccb@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3cc9@t))))))))) (lE3af6@get-record-predicate-name (lambda (lE3ca9@spec) (let ((lE3cab@t lE3ca9@spec)) (let ((lE3cad@ls/false (lE30fa@syntax-dispatch lE3cab@t '(any any any)))) (if lE3cad@ls/false (apply (lambda (lE3caf@foo lE3cb0@make-foo lE3cb1@foo?) lE3cb1@foo?) lE3cad@ls/false) (let ((lE3cb5@t lE3cab@t)) (let ((lE3cb7@ls/false (lE30fa@syntax-dispatch lE3cb5@t 'any))) (if (and lE3cb7@ls/false (apply (lambda (lE3cb9@foo) (lE2ef3@id? lE3cb9@foo)) lE3cb7@ls/false)) (apply (lambda (lE3cbb@foo) (lE3af0@id lE3cbb@foo (lE2f07@stx->datum lE3cbb@foo) '"?")) lE3cb7@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3cb5@t))))))))) (lE3af8@get-clause (lambda (lE3c97@id lE3c98@ls) (let ((lE3c9b@t lE3c98@ls)) (let ((lE3c9d@ls/false (lE30fa@syntax-dispatch lE3c9b@t '()))) (if lE3c9d@ls/false (apply (lambda () '#f) lE3c9d@ls/false) (let ((lE3c9f@t lE3c9b@t)) (let ((lE3ca1@ls/false (lE30fa@syntax-dispatch lE3c9f@t '((any . any) . any)))) (if lE3ca1@ls/false (apply (lambda (lE3ca3@x lE3ca4@rest lE3ca5@ls) (if (lE2ef9@free-id=? (lE30b0@bless lE3c97@id) lE3ca3@x) (cons lE3ca3@x lE3ca4@rest) (lE3af8@get-clause lE3c97@id lE3ca5@ls))) lE3ca1@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3c9f@t))))))))) (lE3afa@foo-rtd-code (lambda (lE3c45@name lE3c46@clause* lE3c47@parent-rtd-code) (letrec* ((lE3c4c@convert-field-spec* (lambda (lE3c7d@ls) (list->vector (map (lambda (lE3c7f@x) (let ((lE3c81@t lE3c7f@x)) (let ((lE3c83@ls/false (lE30fa@syntax-dispatch lE3c81@t '(#(scheme-id mutable) any . any)))) (if lE3c83@ls/false (apply (lambda (lE3c85@name lE3c86@rest) (list 'mutable lE3c85@name)) lE3c83@ls/false) (let ((lE3c89@t lE3c81@t)) (let ((lE3c8b@ls/false (lE30fa@syntax-dispatch lE3c89@t '(#(scheme-id immutable) any . any)))) (if lE3c8b@ls/false (apply (lambda (lE3c8d@name lE3c8e@rest) (list 'immutable lE3c8d@name)) lE3c8b@ls/false) (let ((lE3c91@t lE3c89@t)) (let ((lE3c93@ls/false (lE30fa@syntax-dispatch lE3c91@t 'any))) (if lE3c93@ls/false (apply (lambda (lE3c95@name) (list 'immutable lE3c95@name)) lE3c93@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3c91@t))))))))))) lE3c7d@ls))))) (let ((lE3c4d@uid-code (let ((lE3c55@t (lE3af8@get-clause 'nongenerative lE3c46@clause*))) (let ((lE3c57@ls/false (lE30fa@syntax-dispatch lE3c55@t '(_)))) (if lE3c57@ls/false (apply (lambda () (list 'quote (gensym))) lE3c57@ls/false) (let ((lE3c59@t lE3c55@t)) (let ((lE3c5b@ls/false (lE30fa@syntax-dispatch lE3c59@t '(_ any)))) (if lE3c5b@ls/false (apply (lambda (lE3c5d@uid) (list 'quote lE3c5d@uid)) lE3c5b@ls/false) (let ((lE3c5f@t lE3c59@t)) (let ((lE3c61@ls/false (lE30fa@syntax-dispatch lE3c5f@t '_))) (if lE3c61@ls/false (apply (lambda () '#f) lE3c61@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3c5f@t))))))))))) (lE3c4e@sealed? (let ((lE3c63@t (lE3af8@get-clause 'sealed lE3c46@clause*))) (let ((lE3c65@ls/false (lE30fa@syntax-dispatch lE3c63@t '(_ #(atom #t))))) (if lE3c65@ls/false (apply (lambda () '#t) lE3c65@ls/false) (let ((lE3c67@t lE3c63@t)) (let ((lE3c69@ls/false (lE30fa@syntax-dispatch lE3c67@t '_))) (if lE3c69@ls/false (apply (lambda () '#f) lE3c69@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3c67@t)))))))) (lE3c4f@opaque? (let ((lE3c6b@t (lE3af8@get-clause 'opaque lE3c46@clause*))) (let ((lE3c6d@ls/false (lE30fa@syntax-dispatch lE3c6b@t '(_ #(atom #t))))) (if lE3c6d@ls/false (apply (lambda () '#t) lE3c6d@ls/false) (let ((lE3c6f@t lE3c6b@t)) (let ((lE3c71@ls/false (lE30fa@syntax-dispatch lE3c6f@t '_))) (if lE3c71@ls/false (apply (lambda () '#f) lE3c71@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3c6f@t)))))))) (lE3c50@fields (let ((lE3c73@t (lE3af8@get-clause 'fields lE3c46@clause*))) (let ((lE3c75@ls/false (lE30fa@syntax-dispatch lE3c73@t '(_ . each-any)))) (if lE3c75@ls/false (apply (lambda (lE3c77@field-spec*) (list 'quote (lE3c4c@convert-field-spec* lE3c77@field-spec*))) lE3c75@ls/false) (let ((lE3c79@t lE3c73@t)) (let ((lE3c7b@ls/false (lE30fa@syntax-dispatch lE3c79@t '_))) (if lE3c7b@ls/false (apply (lambda () ''#()) lE3c7b@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3c79@t))))))))) (lE30b0@bless (list 'make-record-type-descriptor (list 'quote lE3c45@name) lE3c47@parent-rtd-code lE3c4d@uid-code lE3c4e@sealed? lE3c4f@opaque? lE3c50@fields)))))) (lE3afc@parent-rtd-code (lambda (lE3c2d@clause*) (let ((lE3c2f@t (lE3af8@get-clause 'parent lE3c2d@clause*))) (let ((lE3c31@ls/false (lE30fa@syntax-dispatch lE3c2f@t '(_ any)))) (if lE3c31@ls/false (apply (lambda (lE3c33@name) (list 'record-type-descriptor lE3c33@name)) lE3c31@ls/false) (let ((lE3c35@t lE3c2f@t)) (let ((lE3c37@ls/false (lE30fa@syntax-dispatch lE3c35@t '#(atom #f)))) (if lE3c37@ls/false (apply (lambda () (let ((lE3c39@t (lE3af8@get-clause 'parent-rtd lE3c2d@clause*))) (let ((lE3c3b@ls/false (lE30fa@syntax-dispatch lE3c39@t '(_ any any)))) (if lE3c3b@ls/false (apply (lambda (lE3c3d@rtd lE3c3e@rcd) lE3c3d@rtd) lE3c3b@ls/false) (let ((lE3c41@t lE3c39@t)) (let ((lE3c43@ls/false (lE30fa@syntax-dispatch lE3c41@t '#(atom #f)))) (if lE3c43@ls/false (apply (lambda () '#f) lE3c43@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3c41@t)))))))) lE3c37@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3c35@t))))))))) (lE3afe@parent-rcd-code (lambda (lE3c15@clause*) (let ((lE3c17@t (lE3af8@get-clause 'parent lE3c15@clause*))) (let ((lE3c19@ls/false (lE30fa@syntax-dispatch lE3c17@t '(_ any)))) (if lE3c19@ls/false (apply (lambda (lE3c1b@name) (list 'record-constructor-descriptor lE3c1b@name)) lE3c19@ls/false) (let ((lE3c1d@t lE3c17@t)) (let ((lE3c1f@ls/false (lE30fa@syntax-dispatch lE3c1d@t '#(atom #f)))) (if lE3c1f@ls/false (apply (lambda () (let ((lE3c21@t (lE3af8@get-clause 'parent-rtd lE3c15@clause*))) (let ((lE3c23@ls/false (lE30fa@syntax-dispatch lE3c21@t '(_ any any)))) (if lE3c23@ls/false (apply (lambda (lE3c25@rtd lE3c26@rcd) lE3c26@rcd) lE3c23@ls/false) (let ((lE3c29@t lE3c21@t)) (let ((lE3c2b@ls/false (lE30fa@syntax-dispatch lE3c29@t '#(atom #f)))) (if lE3c2b@ls/false (apply (lambda () '#f) lE3c2b@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3c29@t)))))))) lE3c1f@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3c1d@t))))))))) (lE3b00@foo-rcd-code (lambda (lE3c0d@clause* lE3c0e@foo-rtd lE3c0f@protocol lE3c10@parent-rcd-code) (list 'make-record-constructor-descriptor lE3c0e@foo-rtd lE3c10@parent-rcd-code lE3c0f@protocol))) (lE3b02@get-protocol-code (lambda (lE3c01@clause*) (let ((lE3c03@t (lE3af8@get-clause 'protocol lE3c01@clause*))) (let ((lE3c05@ls/false (lE30fa@syntax-dispatch lE3c03@t '(_ any)))) (if lE3c05@ls/false (apply (lambda (lE3c07@expr) lE3c07@expr) lE3c05@ls/false) (let ((lE3c09@t lE3c03@t)) (let ((lE3c0b@ls/false (lE30fa@syntax-dispatch lE3c09@t '_))) (if lE3c0b@ls/false (apply (lambda () '#f) lE3c0b@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3c09@t))))))))) (lE3b04@get-fields (lambda (lE3bef@clause*) (let ((lE3bf1@t lE3bef@clause*)) (let ((lE3bf3@ls/false (lE30fa@syntax-dispatch lE3bf1@t '()))) (if lE3bf3@ls/false (apply (lambda () '()) lE3bf3@ls/false) (let ((lE3bf5@t lE3bf1@t)) (let ((lE3bf7@ls/false (lE30fa@syntax-dispatch lE3bf5@t '((#(scheme-id fields) . each-any) . _)))) (if lE3bf7@ls/false (apply (lambda (lE3bf9@f*) lE3bf9@f*) lE3bf7@ls/false) (let ((lE3bfb@t lE3bf5@t)) (let ((lE3bfd@ls/false (lE30fa@syntax-dispatch lE3bfb@t '(_ . any)))) (if lE3bfd@ls/false (apply (lambda (lE3bff@rest) (lE3b04@get-fields lE3bff@rest)) lE3bfd@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3bfb@t)))))))))))) (lE3b06@get-mutator-indices (lambda (lE3bd7@fields) (let lE3bdd@f ((lE3bd9@fields lE3bd7@fields) (lE3bda@i '0)) (let ((lE3bdf@t lE3bd9@fields)) (let ((lE3be1@ls/false (lE30fa@syntax-dispatch lE3bdf@t '()))) (if lE3be1@ls/false (apply (lambda () '()) lE3be1@ls/false) (let ((lE3be3@t lE3bdf@t)) (let ((lE3be5@ls/false (lE30fa@syntax-dispatch lE3be3@t '((#(scheme-id mutable) . _) . any)))) (if lE3be5@ls/false (apply (lambda (lE3be7@rest) (cons lE3bda@i (lE3bdd@f lE3be7@rest (+ lE3bda@i '1)))) lE3be5@ls/false) (let ((lE3be9@t lE3be3@t)) (let ((lE3beb@ls/false (lE30fa@syntax-dispatch lE3be9@t '(_ . any)))) (if lE3beb@ls/false (apply (lambda (lE3bed@rest) (lE3bdd@f lE3bed@rest (+ lE3bda@i '1))) lE3beb@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3be9@t))))))))))))) (lE3b08@get-mutators (lambda (lE3bad@foo lE3bae@fields) (letrec* ((lE3bb2@gen-name (lambda (lE3bd5@x) (lE31de@datum->syntax lE3bad@foo (string->symbol (string-append (symbol->string (lE31e0@syntax->datum lE3bad@foo)) '"-" (symbol->string (lE31e0@syntax->datum lE3bd5@x)) '"-set!")))))) (let lE3bb5@f ((lE3bb3@fields lE3bae@fields)) (let ((lE3bb7@t lE3bb3@fields)) (let ((lE3bb9@ls/false (lE30fa@syntax-dispatch lE3bb7@t '()))) (if lE3bb9@ls/false (apply (lambda () '()) lE3bb9@ls/false) (let ((lE3bbb@t lE3bb7@t)) (let ((lE3bbd@ls/false (lE30fa@syntax-dispatch lE3bbb@t '((#(scheme-id mutable) any any any) . any)))) (if lE3bbd@ls/false (apply (lambda (lE3bbf@name lE3bc0@accessor lE3bc1@mutator lE3bc2@rest) (cons lE3bc1@mutator (lE3bb5@f lE3bc2@rest))) lE3bbd@ls/false) (let ((lE3bc7@t lE3bbb@t)) (let ((lE3bc9@ls/false (lE30fa@syntax-dispatch lE3bc7@t '((#(scheme-id mutable) any) . any)))) (if lE3bc9@ls/false (apply (lambda (lE3bcb@name lE3bcc@rest) (cons (lE3bb2@gen-name lE3bcb@name) (lE3bb5@f lE3bcc@rest))) lE3bc9@ls/false) (let ((lE3bcf@t lE3bc7@t)) (let ((lE3bd1@ls/false (lE30fa@syntax-dispatch lE3bcf@t '(_ . any)))) (if lE3bd1@ls/false (apply (lambda (lE3bd3@rest) (lE3bb5@f lE3bd3@rest)) lE3bd1@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3bcf@t))))))))))))))))) (lE3b0a@get-accessors (lambda (lE3b69@foo lE3b6a@fields) (letrec* ((lE3b6e@gen-name (lambda (lE3bab@x) (lE31de@datum->syntax lE3b69@foo (string->symbol (string-append (symbol->string (lE31e0@syntax->datum lE3b69@foo)) '"-" (symbol->string (lE31e0@syntax->datum lE3bab@x)))))))) (map (lambda (lE3b6f@field) (let ((lE3b71@t lE3b6f@field)) (let ((lE3b73@ls/false (lE30fa@syntax-dispatch lE3b71@t '(#(scheme-id mutable) any any any)))) (if (and lE3b73@ls/false (apply (lambda (lE3b75@name lE3b76@accessor lE3b77@mutator) (lE2ef3@id? lE3b76@accessor)) lE3b73@ls/false)) (apply (lambda (lE3b7b@name lE3b7c@accessor lE3b7d@mutator) lE3b7c@accessor) lE3b73@ls/false) (let ((lE3b81@t lE3b71@t)) (let ((lE3b83@ls/false (lE30fa@syntax-dispatch lE3b81@t '(#(scheme-id immutable) any any)))) (if (and lE3b83@ls/false (apply (lambda (lE3b85@name lE3b86@accessor) (lE2ef3@id? lE3b86@accessor)) lE3b83@ls/false)) (apply (lambda (lE3b89@name lE3b8a@accessor) lE3b8a@accessor) lE3b83@ls/false) (let ((lE3b8d@t lE3b81@t)) (let ((lE3b8f@ls/false (lE30fa@syntax-dispatch lE3b8d@t '(#(scheme-id mutable) any)))) (if (and lE3b8f@ls/false (apply (lambda (lE3b91@name) (lE2ef3@id? lE3b91@name)) lE3b8f@ls/false)) (apply (lambda (lE3b93@name) (lE3b6e@gen-name lE3b93@name)) lE3b8f@ls/false) (let ((lE3b95@t lE3b8d@t)) (let ((lE3b97@ls/false (lE30fa@syntax-dispatch lE3b95@t '(#(scheme-id immutable) any)))) (if (and lE3b97@ls/false (apply (lambda (lE3b99@name) (lE2ef3@id? lE3b99@name)) lE3b97@ls/false)) (apply (lambda (lE3b9b@name) (lE3b6e@gen-name lE3b9b@name)) lE3b97@ls/false) (let ((lE3b9d@t lE3b95@t)) (let ((lE3b9f@ls/false (lE30fa@syntax-dispatch lE3b9d@t 'any))) (if (and lE3b9f@ls/false (apply (lambda (lE3ba1@name) (lE2ef3@id? lE3ba1@name)) lE3b9f@ls/false)) (apply (lambda (lE3ba3@name) (lE3b6e@gen-name lE3ba3@name)) lE3b9f@ls/false) (let ((lE3ba5@t lE3b9d@t)) (let ((lE3ba7@ls/false (lE30fa@syntax-dispatch lE3ba5@t 'any))) (if lE3ba7@ls/false (apply (lambda (lE3ba9@others) (lE31da@syntax-violation '#f '"invalid field spec" lE3b6f@field)) lE3ba7@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3ba5@t)))))))))))))))))))) lE3b6a@fields)))) (lE3b0c@enumerate (lambda (lE3b61@ls) (let lE3b67@f ((lE3b63@ls lE3b61@ls) (lE3b64@i '0)) (if (null? lE3b63@ls) '() (cons lE3b64@i (lE3b67@f (cdr lE3b63@ls) (+ lE3b64@i '1))))))) (lE3b0e@do-define-record (lambda (lE3b39@namespec lE3b3a@clause*) (let ((lE3b3d@foo (lE3af2@get-record-name lE3b39@namespec))) (let ((lE3b3f@foo-rtd (gensym))) (let ((lE3b41@foo-rcd (gensym))) (let ((lE3b43@protocol (gensym))) (let ((lE3b45@make-foo (lE3af4@get-record-constructor-name lE3b39@namespec))) (let ((lE3b47@fields (lE3b04@get-fields lE3b3a@clause*))) (let ((lE3b49@idx* (lE3b0c@enumerate lE3b47@fields))) (let ((lE3b4b@foo-x* (lE3b0a@get-accessors lE3b3d@foo lE3b47@fields))) (let ((lE3b4d@set-foo-x!* (lE3b08@get-mutators lE3b3d@foo lE3b47@fields))) (let ((lE3b4f@set-foo-idx* (lE3b06@get-mutator-indices lE3b47@fields))) (let ((lE3b51@foo? (lE3af6@get-record-predicate-name lE3b39@namespec))) (let ((lE3b53@foo-rtd-code (lE3afa@foo-rtd-code lE3b3d@foo lE3b3a@clause* (lE3afc@parent-rtd-code lE3b3a@clause*)))) (let ((lE3b55@foo-rcd-code (lE3b00@foo-rcd-code lE3b3a@clause* lE3b3f@foo-rtd lE3b43@protocol (lE3afe@parent-rcd-code lE3b3a@clause*)))) (let ((lE3b57@protocol-code (lE3b02@get-protocol-code lE3b3a@clause*))) (lE30b0@bless (cons 'begin (cons (list 'define lE3b3f@foo-rtd lE3b53@foo-rtd-code) (cons (list 'define lE3b43@protocol lE3b57@protocol-code) (cons (list 'define lE3b41@foo-rcd lE3b55@foo-rcd-code) (cons (list 'define-syntax lE3b3d@foo (list 'list ''$rtd (list 'syntax lE3b3f@foo-rtd) (list 'syntax lE3b41@foo-rcd))) (cons (list 'define lE3b51@foo? (list 'record-predicate lE3b3f@foo-rtd)) (cons (list 'define lE3b45@make-foo (list 'record-constructor lE3b41@foo-rcd)) (append (map (lambda (lE3b59@foo-x lE3b5a@idx) (list 'define lE3b59@foo-x (list 'record-accessor lE3b3f@foo-rtd lE3b5a@idx))) lE3b4b@foo-x* lE3b49@idx*) (map (lambda (lE3b5d@set-foo-x! lE3b5e@idx) (list 'define lE3b5d@set-foo-x! (list 'record-mutator lE3b3f@foo-rtd lE3b5e@idx))) lE3b4d@set-foo-x!* lE3b4f@set-foo-idx*)))))))))))))))))))))))))) (lE3b10@verify-clauses (lambda (lE3b19@x lE3b1a@cls*) (letrec* ((lE3b1e@valid-kwds (map lE30b0@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (lE3b20@free-id-member? (lambda (lE3b35@x lE3b36@ls) (and (pair? lE3b36@ls) (or (lE2ef9@free-id=? lE3b35@x (car lE3b36@ls)) (lE3b20@free-id-member? lE3b35@x (cdr lE3b36@ls))))))) (let lE3b25@f ((lE3b21@cls* lE3b1a@cls*) (lE3b22@seen* '())) (if (not (null? lE3b21@cls*)) (let ((lE3b27@t (car lE3b21@cls*))) (let ((lE3b29@ls/false (lE30fa@syntax-dispatch lE3b27@t '(any . any)))) (if lE3b29@ls/false (apply (lambda (lE3b2b@kwd lE3b2c@rest) (if (or (not (lE2ef3@id? lE3b2b@kwd)) (not (lE3b20@free-id-member? lE3b2b@kwd lE3b1e@valid-kwds))) (lE31da@syntax-violation '#f '"not a valid define-record-type keyword" lE3b2b@kwd) (if (lE2eff@bound-id-member? lE3b2b@kwd lE3b22@seen*) (lE31da@syntax-violation '#f '"duplicate use of keyword " lE3b19@x lE3b2b@kwd) (lE3b25@f (cdr lE3b21@cls*) (cons lE3b2b@kwd lE3b22@seen*))))) lE3b29@ls/false) (let ((lE3b2f@t lE3b27@t)) (let ((lE3b31@ls/false (lE30fa@syntax-dispatch lE3b2f@t 'any))) (if lE3b31@ls/false (apply (lambda (lE3b33@cls) (lE31da@syntax-violation '#f '"malformed define-record-type clause" lE3b33@cls)) lE3b31@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3b2f@t))))))) (void))))))) (let ((lE3b11@t lE3aed@x)) (let ((lE3b13@ls/false (lE30fa@syntax-dispatch lE3b11@t '(_ any . each-any)))) (if lE3b13@ls/false (apply (lambda (lE3b15@namespec lE3b16@clause*) (begin (lE3b10@verify-clauses lE3aed@x lE3b16@clause*) (lE3b0e@do-define-record lE3b15@namespec lE3b16@clause*))) lE3b13@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3b11@t))))))) (set! lE4c00@lE30ee@define-record-type-macro lE30ee@define-record-type-macro) (set! lE30f0@define-condition-type-macro (lambda (lE3ce9@x) (letrec* ((lE3cec@mkname (lambda (lE3d19@name lE3d1a@suffix) (lE31de@datum->syntax lE3d19@name (string->symbol (string-append (symbol->string (lE31e0@syntax->datum lE3d19@name)) lE3d1a@suffix)))))) (let ((lE3ced@t lE3ce9@x)) (let ((lE3cef@ls/false (lE30fa@syntax-dispatch lE3ced@t '(any any any any any . #(each (any any)))))) (if (and lE3cef@ls/false (apply (lambda (lE3cf1@ctxt lE3cf2@name lE3cf3@super lE3cf4@constructor lE3cf5@predicate lE3cf6@field* lE3cf7@accessor*) (and (lE2ef3@id? lE3cf2@name) (lE2ef3@id? lE3cf3@super) (lE2ef3@id? lE3cf4@constructor) (lE2ef3@id? lE3cf5@predicate) (for-all lE2ef3@id? lE3cf6@field*) (for-all lE2ef3@id? lE3cf7@accessor*))) lE3cef@ls/false)) (apply (lambda (lE3cff@ctxt lE3d00@name lE3d01@super lE3d02@constructor lE3d03@predicate lE3d04@field* lE3d05@accessor*) (let ((lE3d0d@aux-accessor* (map (lambda (lE3d0f@x) (gensym)) lE3d05@accessor*))) (lE30b0@bless (cons 'begin (cons (cons 'define-record-type (cons (list lE3d00@name lE3d02@constructor (gensym)) (cons (list 'parent lE3d01@super) (cons (cons 'fields (map (lambda (lE3d11@field lE3d12@aux) (list 'immutable lE3d11@field lE3d12@aux)) lE3d04@field* lE3d0d@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define lE3d03@predicate (list 'condition-predicate (list 'record-type-descriptor lE3d00@name))) (map (lambda (lE3d15@accessor lE3d16@aux) (list 'define lE3d15@accessor (list 'condition-accessor (list 'record-type-descriptor lE3d00@name) lE3d16@aux))) lE3d05@accessor* lE3d0d@aux-accessor*))))))) lE3cef@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3ced@t))))))) (set! lE4c01@lE30f0@define-condition-type-macro lE30f0@define-condition-type-macro) (set! lE30f2@incorrect-usage-macro (lambda (lE3d1d@e) (lE31da@syntax-violation '#f '"incorrect usage of auxiliary keyword" lE3d1d@e))) (set! lE4c02@lE30f2@incorrect-usage-macro lE30f2@incorrect-usage-macro) (set! lE30f4@parameterize-macro (lambda (lE3d1f@e) (let ((lE3d21@t lE3d1f@e)) (let ((lE3d23@ls/false (lE30fa@syntax-dispatch lE3d21@t '(_ () any . each-any)))) (if lE3d23@ls/false (apply (lambda (lE3d25@b lE3d26@b*) (lE30b0@bless (cons 'let (cons '() (cons lE3d25@b lE3d26@b*))))) lE3d23@ls/false) (let ((lE3d29@t lE3d21@t)) (let ((lE3d2b@ls/false (lE30fa@syntax-dispatch lE3d29@t '(_ #(each (any any)) any . each-any)))) (if lE3d2b@ls/false (apply (lambda (lE3d2d@olhs* lE3d2e@orhs* lE3d2f@b lE3d30@b*) (let ((lE3d35@lhs* (lE31c8@generate-temporaries lE3d2d@olhs*)) (lE3d36@rhs* (lE31c8@generate-temporaries lE3d2e@orhs*))) (lE30b0@bless (cons (list 'lambda (append lE3d35@lhs* lE3d36@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (lE3d39@lhs lE3d3a@rhs) (list 'let (list (list 't (list lE3d39@lhs))) (list lE3d39@lhs lE3d3a@rhs) (cons 'set! (cons lE3d3a@rhs '(t))))) lE3d35@lhs* lE3d36@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons lE3d2f@b lE3d30@b*))) '(swap)))))) (append lE3d2d@olhs* lE3d2e@orhs*))))) lE3d2b@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3d29@t))))))))) (set! lE4c03@lE30f4@parameterize-macro lE30f4@parameterize-macro) (set! lE30f6@foreign-call-transformer (lambda (lE3d3d@e lE3d3e@r lE3d3f@mr) (let ((lE3d43@t lE3d3d@e)) (let ((lE3d45@ls/false (lE30fa@syntax-dispatch lE3d43@t '(_ any . each-any)))) (if lE3d45@ls/false (apply (lambda (lE3d47@name lE3d48@arg*) (cons 'foreign-call (cons (lE311c@chi-expr lE3d47@name lE3d3e@r lE3d3f@mr) (lE3118@chi-expr* lE3d48@arg* lE3d3e@r lE3d3f@mr)))) lE3d45@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3d43@t)))))) (set! lE4c04@lE30f6@foreign-call-transformer lE30f6@foreign-call-transformer) (set! lE30f8@convert-pattern (lambda (lE3d4b@pattern lE3d4c@keys) (letrec* ((lE3d50@cvt* (lambda (lE3def@p* lE3df0@n lE3df1@ids) (if (null? lE3def@p*) (values '() lE3df1@ids) (call-with-values (lambda () (lE3d50@cvt* (cdr lE3def@p*) lE3df0@n lE3df1@ids)) (lambda (lE3df9@lE3df6 lE3dfa@lE3df8) (let ((lE3dfd@ids lE3dfa@lE3df8) (lE3dfe@y lE3df9@lE3df6)) (call-with-values (lambda () (lE3d52@cvt (car lE3def@p*) lE3df0@n lE3dfd@ids)) (lambda (lE3e05@lE3e02 lE3e06@lE3e04) (let ((lE3e09@ids lE3e06@lE3e04) (lE3e0a@x lE3e05@lE3e02)) (values (cons lE3e0a@x lE3dfe@y) lE3e09@ids)))))))))) (lE3d52@cvt (lambda (lE3d53@p lE3d54@n lE3d55@ids) (let ((lE3d59@t lE3d53@p)) (let ((lE3d5b@ls/false (lE30fa@syntax-dispatch lE3d59@t 'any))) (if (and lE3d5b@ls/false (apply (lambda (lE3d5d@id) (lE2ef3@id? lE3d5d@id)) lE3d5b@ls/false)) (apply (lambda (lE3d5f@id) (if (lE2eff@bound-id-member? lE3d53@p lE3d4c@keys) (values (vector 'free-id lE3d53@p) lE3d55@ids) (if (lE2ef9@free-id=? lE3d53@p (lE3082@scheme-stx '_)) (values '_ lE3d55@ids) (values 'any (cons (cons lE3d53@p lE3d54@n) lE3d55@ids))))) lE3d5b@ls/false) (let ((lE3d61@t lE3d59@t)) (let ((lE3d63@ls/false (lE30fa@syntax-dispatch lE3d61@t '(any any)))) (if (and lE3d63@ls/false (apply (lambda (lE3d65@p lE3d66@dots) (lE30fc@ellipsis? lE3d66@dots)) lE3d63@ls/false)) (apply (lambda (lE3d69@p lE3d6a@dots) (call-with-values (lambda () (lE3d52@cvt lE3d69@p (+ lE3d54@n '1) lE3d55@ids)) (lambda (lE3d71@lE3d6e lE3d72@lE3d70) (let ((lE3d75@ids lE3d72@lE3d70) (lE3d76@p lE3d71@lE3d6e)) (values (if (eq? lE3d76@p 'any) 'each-any (vector 'each lE3d76@p)) lE3d75@ids))))) lE3d63@ls/false) (let ((lE3d79@t lE3d61@t)) (let ((lE3d7b@ls/false (lE30fa@syntax-dispatch lE3d79@t '(any any . #(each+ any () any))))) (if (and lE3d7b@ls/false (apply (lambda (lE3d7d@x lE3d7e@dots lE3d7f@ys lE3d80@z) (lE30fc@ellipsis? lE3d7e@dots)) lE3d7b@ls/false)) (apply (lambda (lE3d85@x lE3d86@dots lE3d87@ys lE3d88@z) (call-with-values (lambda () (lE3d52@cvt lE3d88@z lE3d54@n lE3d55@ids)) (lambda (lE3d91@lE3d8e lE3d92@lE3d90) (let ((lE3d95@ids lE3d92@lE3d90) (lE3d96@z lE3d91@lE3d8e)) (call-with-values (lambda () (lE3d50@cvt* lE3d87@ys lE3d54@n lE3d95@ids)) (lambda (lE3d9d@lE3d9a lE3d9e@lE3d9c) (let ((lE3da1@ids lE3d9e@lE3d9c) (lE3da2@ys lE3d9d@lE3d9a)) (call-with-values (lambda () (lE3d52@cvt lE3d85@x (+ lE3d54@n '1) lE3da1@ids)) (lambda (lE3da9@lE3da6 lE3daa@lE3da8) (let ((lE3dad@ids lE3daa@lE3da8) (lE3dae@x lE3da9@lE3da6)) (values (vector 'each+ lE3dae@x (reverse lE3da2@ys) lE3d96@z) lE3dad@ids))))))))))) lE3d7b@ls/false) (let ((lE3db1@t lE3d79@t)) (let ((lE3db3@ls/false (lE30fa@syntax-dispatch lE3db1@t '(any . any)))) (if lE3db3@ls/false (apply (lambda (lE3db5@x lE3db6@y) (call-with-values (lambda () (lE3d52@cvt lE3db6@y lE3d54@n lE3d55@ids)) (lambda (lE3dbd@lE3dba lE3dbe@lE3dbc) (let ((lE3dc1@ids lE3dbe@lE3dbc) (lE3dc2@y lE3dbd@lE3dba)) (call-with-values (lambda () (lE3d52@cvt lE3db5@x lE3d54@n lE3dc1@ids)) (lambda (lE3dc9@lE3dc6 lE3dca@lE3dc8) (let ((lE3dcd@ids lE3dca@lE3dc8) (lE3dce@x lE3dc9@lE3dc6)) (values (cons lE3dce@x lE3dc2@y) lE3dcd@ids)))))))) lE3db3@ls/false) (let ((lE3dd1@t lE3db1@t)) (let ((lE3dd3@ls/false (lE30fa@syntax-dispatch lE3dd1@t '()))) (if lE3dd3@ls/false (apply (lambda () (values '() lE3d55@ids)) lE3dd3@ls/false) (let ((lE3dd5@t lE3dd1@t)) (let ((lE3dd7@ls/false (lE30fa@syntax-dispatch lE3dd5@t '#(vector each-any)))) (if (and lE3dd7@ls/false (apply (lambda (lE3dd9@p) (not (lE2ebf@stx? lE3dd9@p))) lE3dd7@ls/false)) (apply (lambda (lE3ddb@p) (call-with-values (lambda () (lE3d52@cvt lE3ddb@p lE3d54@n lE3d55@ids)) (lambda (lE3de1@lE3dde lE3de2@lE3de0) (let ((lE3de5@ids lE3de2@lE3de0) (lE3de6@p lE3de1@lE3dde)) (values (vector 'vector lE3de6@p) lE3de5@ids))))) lE3dd7@ls/false) (let ((lE3de9@t lE3dd5@t)) (let ((lE3deb@ls/false (lE30fa@syntax-dispatch lE3de9@t 'any))) (if lE3deb@ls/false (apply (lambda (lE3ded@datum) (values (vector 'atom (lE2f07@stx->datum lE3ded@datum)) lE3d55@ids)) lE3deb@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3de9@t))))))))))))))))))))))))) (lE3d52@cvt lE3d4b@pattern '0 '())))) (set! lE4c05@lE30f8@convert-pattern lE30f8@convert-pattern) (set! lE30fa@syntax-dispatch (letrec* ((lE3e0e@stx^ (lambda (lE3ee9@e lE3eea@m* lE3eeb@s* lE3eec@ae*) (if (and (null? lE3eea@m*) (null? lE3eeb@s*) (null? lE3eec@ae*)) lE3ee9@e (lE2edb@mkstx lE3ee9@e lE3eea@m* lE3eeb@s* lE3eec@ae*)))) (lE3e10@match-each (lambda (lE3ec9@e lE3eca@p lE3ecb@m* lE3ecc@s* lE3ecd@ae*) (if (pair? lE3ec9@e) (let ((lE3ed3@first (lE3e1c@match (car lE3ec9@e) lE3eca@p lE3ecb@m* lE3ecc@s* lE3ecd@ae* '()))) (and lE3ed3@first (let ((lE3ed5@rest (lE3e10@match-each (cdr lE3ec9@e) lE3eca@p lE3ecb@m* lE3ecc@s* lE3ecd@ae*))) (and lE3ed5@rest (cons lE3ed3@first lE3ed5@rest))))) (if (null? lE3ec9@e) '() (if (lE2ebf@stx? lE3ec9@e) (and (not (lE2e79@top-marked? lE3ecb@m*)) (call-with-values (lambda () (join-wraps lE3ecb@m* lE3ecc@s* lE3ecd@ae* lE3ec9@e)) (lambda (lE3edd@lE3ed8 lE3ede@lE3eda lE3edf@lE3edc) (let ((lE3ee3@ae* lE3edf@lE3edc) (lE3ee4@s* lE3ede@lE3eda) (lE3ee5@m* lE3edd@lE3ed8)) (lE3e10@match-each (lE2ec1@stx-expr lE3ec9@e) lE3eca@p lE3ee5@m* lE3ee4@s* lE3ee3@ae*))))) (if (lE2a37@lE2909@annotation? lE3ec9@e) (lE3e10@match-each (lE2a39@lE290d@annotation-expression lE3ec9@e) lE3eca@p lE3ecb@m* lE3ecc@s* lE3ecd@ae*) '#f)))))) (lE3e12@match-each+ (lambda (lE3e89@e lE3e8a@x-pat lE3e8b@y-pat lE3e8c@z-pat lE3e8d@m* lE3e8e@s* lE3e8f@ae* lE3e90@r) (let lE3ea1@f ((lE3e99@e lE3e89@e) (lE3e9a@m* lE3e8d@m*) (lE3e9b@s* lE3e8e@s*) (lE3e9c@ae* lE3e8f@ae*)) (if (pair? lE3e99@e) (call-with-values (lambda () (lE3ea1@f (cdr lE3e99@e) lE3e9a@m* lE3e9b@s* lE3e9c@ae*)) (lambda (lE3ea9@lE3ea4 lE3eaa@lE3ea6 lE3eab@lE3ea8) (let ((lE3eaf@r lE3eab@lE3ea8) (lE3eb0@y-pat lE3eaa@lE3ea6) (lE3eb1@xr* lE3ea9@lE3ea4)) (if lE3eaf@r (if (null? lE3eb0@y-pat) (let ((lE3eb5@xr (lE3e1c@match (car lE3e99@e) lE3e8a@x-pat lE3e9a@m* lE3e9b@s* lE3e9c@ae* '()))) (if lE3eb5@xr (values (cons lE3eb5@xr lE3eb1@xr*) lE3eb0@y-pat lE3eaf@r) (values '#f '#f '#f))) (values '() (cdr lE3eb0@y-pat) (lE3e1c@match (car lE3e99@e) (car lE3eb0@y-pat) lE3e9a@m* lE3e9b@s* lE3e9c@ae* lE3eaf@r))) (values '#f '#f '#f))))) (if (lE2ebf@stx? lE3e99@e) (if (lE2e79@top-marked? lE3e9a@m*) (values '() lE3e8b@y-pat (lE3e1c@match lE3e99@e lE3e8c@z-pat lE3e9a@m* lE3e9b@s* lE3e9c@ae* lE3e90@r)) (call-with-values (lambda () (join-wraps lE3e9a@m* lE3e9b@s* lE3e9c@ae* lE3e99@e)) (lambda (lE3ebd@lE3eb8 lE3ebe@lE3eba lE3ebf@lE3ebc) (let ((lE3ec3@ae* lE3ebf@lE3ebc) (lE3ec4@s* lE3ebe@lE3eba) (lE3ec5@m* lE3ebd@lE3eb8)) (lE3ea1@f (lE2ec1@stx-expr lE3e99@e) lE3ec5@m* lE3ec4@s* lE3ec3@ae*))))) (if (lE2a37@lE2909@annotation? lE3e99@e) (lE3ea1@f (lE2a39@lE290d@annotation-expression lE3e99@e) lE3e9a@m* lE3e9b@s* lE3e9c@ae*) (values '() lE3e8b@y-pat (lE3e1c@match lE3e99@e lE3e8c@z-pat lE3e9a@m* lE3e9b@s* lE3e9c@ae* lE3e90@r)))))))) (lE3e14@match-each-any (lambda (lE3e6d@e lE3e6e@m* lE3e6f@s* lE3e70@ae*) (if (pair? lE3e6d@e) (let ((lE3e75@l (lE3e14@match-each-any (cdr lE3e6d@e) lE3e6e@m* lE3e6f@s* lE3e70@ae*))) (and lE3e75@l (cons (lE3e0e@stx^ (car lE3e6d@e) lE3e6e@m* lE3e6f@s* lE3e70@ae*) lE3e75@l))) (if (null? lE3e6d@e) '() (if (lE2ebf@stx? lE3e6d@e) (and (not (lE2e79@top-marked? lE3e6e@m*)) (call-with-values (lambda () (join-wraps lE3e6e@m* lE3e6f@s* lE3e70@ae* lE3e6d@e)) (lambda (lE3e7d@lE3e78 lE3e7e@lE3e7a lE3e7f@lE3e7c) (let ((lE3e83@ae* lE3e7f@lE3e7c) (lE3e84@s* lE3e7e@lE3e7a) (lE3e85@m* lE3e7d@lE3e78)) (lE3e14@match-each-any (lE2ec1@stx-expr lE3e6d@e) lE3e85@m* lE3e84@s* lE3e83@ae*))))) (if (lE2a37@lE2909@annotation? lE3e6d@e) (lE3e14@match-each-any (lE2a39@lE290d@annotation-expression lE3e6d@e) lE3e6e@m* lE3e6f@s* lE3e70@ae*) '#f)))))) (lE3e16@match-empty (lambda (lE3e67@p lE3e68@r) (if (null? lE3e67@p) lE3e68@r (if (eq? lE3e67@p '_) lE3e68@r (if (eq? lE3e67@p 'any) (cons '() lE3e68@r) (if (pair? lE3e67@p) (lE3e16@match-empty (car lE3e67@p) (lE3e16@match-empty (cdr lE3e67@p) lE3e68@r)) (if (eq? lE3e67@p 'each-any) (cons '() lE3e68@r) (let ((lE3e6b@t (vector-ref lE3e67@p '0))) (if (memv lE3e6b@t '(each)) (lE3e16@match-empty (vector-ref lE3e67@p '1) lE3e68@r) (if (memv lE3e6b@t '(each+)) (lE3e16@match-empty (vector-ref lE3e67@p '1) (lE3e16@match-empty (reverse (vector-ref lE3e67@p '2)) (lE3e16@match-empty (vector-ref lE3e67@p '3) lE3e68@r))) (if (memv lE3e6b@t '(free-id atom)) lE3e68@r (if (memv lE3e6b@t '(scheme-id atom)) lE3e68@r (if (memv lE3e6b@t '(vector)) (lE3e16@match-empty (vector-ref lE3e67@p '1) lE3e68@r) (assertion-violation 'syntax-dispatch '"invalid pattern" lE3e67@p)))))))))))))) (lE3e18@combine (lambda (lE3e63@r* lE3e64@r) (if (null? (car lE3e63@r*)) lE3e64@r (cons (map car lE3e63@r*) (lE3e18@combine (map cdr lE3e63@r*) lE3e64@r))))) (lE3e1a@match* (lambda (lE3e3f@e lE3e40@p lE3e41@m* lE3e42@s* lE3e43@ae* lE3e44@r) (if (null? lE3e40@p) (and (null? lE3e3f@e) lE3e44@r) (if (pair? lE3e40@p) (and (pair? lE3e3f@e) (lE3e1c@match (car lE3e3f@e) (car lE3e40@p) lE3e41@m* lE3e42@s* lE3e43@ae* (lE3e1c@match (cdr lE3e3f@e) (cdr lE3e40@p) lE3e41@m* lE3e42@s* lE3e43@ae* lE3e44@r))) (if (eq? lE3e40@p 'each-any) (let ((lE3e4b@l (lE3e14@match-each-any lE3e3f@e lE3e41@m* lE3e42@s* lE3e43@ae*))) (and lE3e4b@l (cons lE3e4b@l lE3e44@r))) (let ((lE3e4d@t (vector-ref lE3e40@p '0))) (if (memv lE3e4d@t '(each)) (if (null? lE3e3f@e) (lE3e16@match-empty (vector-ref lE3e40@p '1) lE3e44@r) (let ((lE3e4f@r* (lE3e10@match-each lE3e3f@e (vector-ref lE3e40@p '1) lE3e41@m* lE3e42@s* lE3e43@ae*))) (and lE3e4f@r* (lE3e18@combine lE3e4f@r* lE3e44@r)))) (if (memv lE3e4d@t '(free-id)) (and (symbol? lE3e3f@e) (lE2e79@top-marked? lE3e41@m*) (lE2ef9@free-id=? (lE3e0e@stx^ lE3e3f@e lE3e41@m* lE3e42@s* lE3e43@ae*) (vector-ref lE3e40@p '1)) lE3e44@r) (if (memv lE3e4d@t '(scheme-id)) (and (symbol? lE3e3f@e) (lE2e79@top-marked? lE3e41@m*) (lE2ef9@free-id=? (lE3e0e@stx^ lE3e3f@e lE3e41@m* lE3e42@s* lE3e43@ae*) (lE3082@scheme-stx (vector-ref lE3e40@p '1))) lE3e44@r) (if (memv lE3e4d@t '(each+)) (call-with-values (lambda () (lE3e12@match-each+ lE3e3f@e (vector-ref lE3e40@p '1) (vector-ref lE3e40@p '2) (vector-ref lE3e40@p '3) lE3e41@m* lE3e42@s* lE3e43@ae* lE3e44@r)) (lambda (lE3e57@lE3e52 lE3e58@lE3e54 lE3e59@lE3e56) (let ((lE3e5d@r lE3e59@lE3e56) (lE3e5e@y-pat lE3e58@lE3e54) (lE3e5f@xr* lE3e57@lE3e52)) (and lE3e5d@r (null? lE3e5e@y-pat) (if (null? lE3e5f@xr*) (lE3e16@match-empty (vector-ref lE3e40@p '1) lE3e5d@r) (lE3e18@combine lE3e5f@xr* lE3e5d@r)))))) (if (memv lE3e4d@t '(atom)) (and (fast-equal? (vector-ref lE3e40@p '1) (lE2f05@strip lE3e3f@e lE3e41@m*)) lE3e44@r) (if (memv lE3e4d@t '(vector)) (and (vector? lE3e3f@e) (lE3e1c@match (vector->list lE3e3f@e) (vector-ref lE3e40@p '1) lE3e41@m* lE3e42@s* lE3e43@ae* lE3e44@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" lE3e40@p))))))))))))) (lE3e1c@match (lambda (lE3e21@e lE3e22@p lE3e23@m* lE3e24@s* lE3e25@ae* lE3e26@r) (if (not lE3e26@r) '#f (if (eq? lE3e22@p '_) lE3e26@r (if (eq? lE3e22@p 'any) (cons (lE3e0e@stx^ lE3e21@e lE3e23@m* lE3e24@s* lE3e25@ae*) lE3e26@r) (if (lE2ebf@stx? lE3e21@e) (and (not (lE2e79@top-marked? lE3e23@m*)) (call-with-values (lambda () (join-wraps lE3e23@m* lE3e24@s* lE3e25@ae* lE3e21@e)) (lambda (lE3e33@lE3e2e lE3e34@lE3e30 lE3e35@lE3e32) (let ((lE3e39@ae* lE3e35@lE3e32) (lE3e3a@s* lE3e34@lE3e30) (lE3e3b@m* lE3e33@lE3e2e)) (lE3e1c@match (lE2ec1@stx-expr lE3e21@e) lE3e22@p lE3e3b@m* lE3e3a@s* lE3e39@ae* lE3e26@r))))) (if (lE2a37@lE2909@annotation? lE3e21@e) (lE3e1c@match (lE2a39@lE290d@annotation-expression lE3e21@e) lE3e22@p lE3e23@m* lE3e24@s* lE3e25@ae* lE3e26@r) (lE3e1a@match* lE3e21@e lE3e22@p lE3e23@m* lE3e24@s* lE3e25@ae* lE3e26@r))))))))) (lambda (lE3e1d@e lE3e1e@p) (lE3e1c@match lE3e1d@e lE3e1e@p '() '() '() '())))) (set! lE4c06@lE30fa@syntax-dispatch lE30fa@syntax-dispatch) (set! lE30fc@ellipsis? (lambda (lE3ef1@x) (and (lE2ef3@id? lE3ef1@x) (lE2ef9@free-id=? lE3ef1@x (lE3082@scheme-stx '...))))) (set! lE4c07@lE30fc@ellipsis? lE30fc@ellipsis?) (set! lE30fe@underscore? (lambda (lE3ef3@x) (and (lE2ef3@id? lE3ef3@x) (lE2ef9@free-id=? lE3ef3@x (lE3082@scheme-stx '_))))) (set! lE4c08@lE30fe@underscore? lE30fe@underscore?) (set! lE3100@verify-literals (lambda (lE3ef5@lits lE3ef6@expr) (for-each (lambda (lE3ef9@x) (if (or (not (lE2ef3@id? lE3ef9@x)) (lE30fc@ellipsis? lE3ef9@x) (lE30fe@underscore? lE3ef9@x)) (lE31da@syntax-violation '#f '"invalid literal" lE3ef6@expr lE3ef9@x) (void))) lE3ef5@lits))) (set! lE4c09@lE3100@verify-literals lE3100@verify-literals) (set! lE3102@syntax-case-transformer (letrec* ((lE3efc@build-dispatch-call (lambda (lE3f6d@pvars lE3f6e@expr lE3f6f@y lE3f70@r lE3f71@mr) (let ((lE3f77@ids (map car lE3f6d@pvars)) (lE3f78@levels (map cdr lE3f6d@pvars))) (let ((lE3f7b@labels (map lE2e7f@gen-label lE3f77@ids)) (lE3f7c@new-vars (map lE2e7b@gen-lexical lE3f77@ids))) (let ((lE3f7f@body (lE311c@chi-expr (lE2edd@add-subst (lE2eb3@make-full-rib lE3f77@ids lE3f7b@labels) lE3f6e@expr) (append (map (lambda (lE3f81@label lE3f82@var lE3f83@level) (cons lE3f81@label (lE2f0d@make-binding 'syntax (cons lE3f82@var lE3f83@level)))) lE3f7b@labels lE3f7c@new-vars (map cdr lE3f6d@pvars)) lE3f70@r) lE3f71@mr))) (list '(primitive apply) (lE2e56@lE2d88@build-lambda '#f lE3f7c@new-vars lE3f7f@body) lE3f6f@y)))))) (lE3efe@invalid-ids-error (lambda (lE3f61@id* lE3f62@e lE3f63@class) (let lE3f6b@find ((lE3f67@id* lE3f61@id*) (lE3f68@ok* '())) (if (null? lE3f67@id*) (lE31da@syntax-violation '#f '"invalid syntax" lE3f62@e) (if (lE2ef3@id? (car lE3f67@id*)) (if (lE2eff@bound-id-member? (car lE3f67@id*) lE3f68@ok*) (lE31d6@syntax-error (car lE3f67@id*) '"duplicate " lE3f63@class) (lE3f6b@find (cdr lE3f67@id*) (cons (car lE3f67@id*) lE3f68@ok*))) (lE31d6@syntax-error (car lE3f67@id*) '"invalid " lE3f63@class)))))) (lE3f00@gen-clause (lambda (lE3f39@x lE3f3a@keys lE3f3b@clauses lE3f3c@r lE3f3d@mr lE3f3e@pat lE3f3f@fender lE3f40@expr) (call-with-values (lambda () (lE30f8@convert-pattern lE3f3e@pat lE3f3a@keys)) (lambda (lE3f4d@lE3f4a lE3f4e@lE3f4c) (let ((lE3f51@pvars lE3f4e@lE3f4c) (lE3f52@p lE3f4d@lE3f4a)) (if (not (lE2efd@distinct-bound-ids? (map car lE3f51@pvars))) (lE3efe@invalid-ids-error (map car lE3f51@pvars) lE3f3e@pat '"pattern variable") (if (not (for-all (lambda (lE3f55@x) (not (lE30fc@ellipsis? (car lE3f55@x)))) lE3f51@pvars)) (lE31da@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" lE3f3e@pat) (let ((lE3f57@y (lE2e7b@gen-lexical 'tmp))) (let ((lE3f59@test (if (eq? lE3f3f@fender '#t) lE3f57@y (let ((lE3f5b@call (lE3efc@build-dispatch-call lE3f51@pvars lE3f3f@fender lE3f57@y lE3f3c@r lE3f3d@mr))) (list 'if lE3f57@y lE3f5b@call (list 'quote '#f)))))) (let ((lE3f5d@conseq (lE3efc@build-dispatch-call lE3f51@pvars lE3f40@expr lE3f57@y lE3f3c@r lE3f3d@mr))) (let ((lE3f5f@altern (lE3f02@gen-syntax-case lE3f39@x lE3f3a@keys lE3f3b@clauses lE3f3c@r lE3f3d@mr))) (list (lE2e56@lE2d88@build-lambda '#f (list lE3f57@y) (list 'if lE3f59@test lE3f5d@conseq lE3f5f@altern)) (list '(primitive syntax-dispatch) lE3f39@x (list 'quote lE3f52@p)))))))))))))) (lE3f02@gen-syntax-case (lambda (lE3f17@x lE3f18@keys lE3f19@clauses lE3f1a@r lE3f1b@mr) (if (null? lE3f19@clauses) (list '(primitive syntax-error) lE3f17@x) (let ((lE3f21@t (car lE3f19@clauses))) (let ((lE3f23@ls/false (lE30fa@syntax-dispatch lE3f21@t '(any any)))) (if lE3f23@ls/false (apply (lambda (lE3f25@pat lE3f26@expr) (if (and (lE2ef3@id? lE3f25@pat) (not (lE2eff@bound-id-member? lE3f25@pat lE3f18@keys)) (not (lE30fc@ellipsis? lE3f25@pat))) (if (lE2ef9@free-id=? lE3f25@pat (lE3082@scheme-stx '_)) (lE311c@chi-expr lE3f26@expr lE3f1a@r lE3f1b@mr) (let ((lE3f29@lab (lE2e7f@gen-label lE3f25@pat)) (lE3f2a@lex (lE2e7b@gen-lexical lE3f25@pat))) (let ((lE3f2d@body (lE311c@chi-expr (lE2edd@add-subst (lE2eb3@make-full-rib (list lE3f25@pat) (list lE3f29@lab)) lE3f26@expr) (cons (cons lE3f29@lab (lE2f0d@make-binding 'syntax (cons lE3f2a@lex '0))) lE3f1a@r) lE3f1b@mr))) (list (lE2e56@lE2d88@build-lambda '#f (list lE3f2a@lex) lE3f2d@body) lE3f17@x)))) (lE3f00@gen-clause lE3f17@x lE3f18@keys (cdr lE3f19@clauses) lE3f1a@r lE3f1b@mr lE3f25@pat '#t lE3f26@expr))) lE3f23@ls/false) (let ((lE3f2f@t lE3f21@t)) (let ((lE3f31@ls/false (lE30fa@syntax-dispatch lE3f2f@t '(any any any)))) (if lE3f31@ls/false (apply (lambda (lE3f33@pat lE3f34@fender lE3f35@expr) (lE3f00@gen-clause lE3f17@x lE3f18@keys (cdr lE3f19@clauses) lE3f1a@r lE3f1b@mr lE3f33@pat lE3f34@fender lE3f35@expr)) lE3f31@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3f2f@t))))))))))) (lambda (lE3f03@e lE3f04@r lE3f05@mr) (let ((lE3f09@t lE3f03@e)) (let ((lE3f0b@ls/false (lE30fa@syntax-dispatch lE3f09@t '(_ any each-any . each-any)))) (if lE3f0b@ls/false (apply (lambda (lE3f0d@expr lE3f0e@keys lE3f0f@clauses) (begin (lE3100@verify-literals lE3f0e@keys lE3f03@e) (let ((lE3f13@x (lE2e7b@gen-lexical 'tmp))) (let ((lE3f15@body (lE3f02@gen-syntax-case lE3f13@x lE3f0e@keys lE3f0f@clauses lE3f04@r lE3f05@mr))) (list (lE2e56@lE2d88@build-lambda '#f (list lE3f13@x) lE3f15@body) (lE311c@chi-expr lE3f0d@expr lE3f04@r lE3f05@mr)))))) lE3f0b@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3f09@t))))))) (set! lE4c0a@lE3102@syntax-case-transformer lE3102@syntax-case-transformer) (set! lE3104@ellipsis-map (lambda (lE3f87@proc lE3f88@ls . lE3f8b@ls*) (letrec* ((lE3f8e@who '...)) (begin (if (not (list? lE3f88@ls)) (assertion-violation lE3f8e@who '"not a list" lE3f88@ls) (void)) (if (not (null? lE3f8b@ls*)) (let ((lE3f8f@n (length lE3f88@ls))) (for-each (lambda (lE3f91@x) (begin (if (not (list? lE3f91@x)) (assertion-violation lE3f8e@who '"not a list" lE3f91@x) (void)) (if (not (= (length lE3f91@x) lE3f8f@n)) (assertion-violation lE3f8e@who '"length mismatch" lE3f88@ls lE3f91@x) (void)))) lE3f8b@ls*)) (void)) (apply map lE3f87@proc lE3f88@ls lE3f8b@ls*))))) (set! lE4c0b@lE3104@ellipsis-map lE3104@ellipsis-map) (set! lE3106@syntax-transformer (letrec* ((lE3f94@gen-syntax (lambda (lE400b@src lE400c@e lE400d@r lE400e@maps lE400f@ellipsis? lE4010@vec?) (let ((lE4017@t lE400c@e)) (let ((lE4019@ls/false (lE30fa@syntax-dispatch lE4017@t 'any))) (if (and lE4019@ls/false (apply (lambda (lE401b@dots) (lE400f@ellipsis? lE401b@dots)) lE4019@ls/false)) (apply (lambda (lE401d@dots) (lE31da@syntax-violation '#f '"misplaced ellipsis in syntax form" lE400b@src)) lE4019@ls/false) (let ((lE401f@t lE4017@t)) (let ((lE4021@ls/false (lE30fa@syntax-dispatch lE401f@t 'any))) (if (and lE4021@ls/false (apply (lambda (lE4023@id) (lE2ef3@id? lE4023@id)) lE4021@ls/false)) (apply (lambda (lE4025@id) (let ((lE4027@label (lE2f09@id->label lE400c@e))) (let ((lE4029@b (lE2f0b@label->binding lE4027@label lE400d@r))) (if (eq? (lE2f0f@binding-type lE4029@b) 'syntax) (call-with-values (lambda () (let ((lE402f@var.lev (lE2f11@binding-value lE4029@b))) (lE3f96@gen-ref lE400b@src (car lE402f@var.lev) (cdr lE402f@var.lev) lE400e@maps))) (lambda (lE4031@lE402c lE4032@lE402e) (let ((lE4035@maps lE4032@lE402e) (lE4036@var lE4031@lE402c)) (values (list 'ref lE4036@var) lE4035@maps)))) (values (list 'quote lE400c@e) lE400e@maps))))) lE4021@ls/false) (let ((lE4039@t lE401f@t)) (let ((lE403b@ls/false (lE30fa@syntax-dispatch lE4039@t '(any any)))) (if (and lE403b@ls/false (apply (lambda (lE403d@dots lE403e@e) (lE400f@ellipsis? lE403d@dots)) lE403b@ls/false)) (apply (lambda (lE4041@dots lE4042@e) (if lE4010@vec? (lE31da@syntax-violation '#f '"misplaced ellipsis in syntax form" lE400b@src) (lE3f94@gen-syntax lE400b@src lE4042@e lE400d@r lE400e@maps (lambda (lE4045@x) '#f) '#f))) lE403b@ls/false) (let ((lE4047@t lE4039@t)) (let ((lE4049@ls/false (lE30fa@syntax-dispatch lE4047@t '(any any . any)))) (if (and lE4049@ls/false (apply (lambda (lE404b@x lE404c@dots lE404d@y) (lE400f@ellipsis? lE404c@dots)) lE4049@ls/false)) (apply (lambda (lE4051@x lE4052@dots lE4053@y) (let lE4069@f ((lE4057@y lE4053@y) (lE4058@k (lambda (lE405b@maps) (call-with-values (lambda () (lE3f94@gen-syntax lE400b@src lE4051@x lE400d@r (cons '() lE405b@maps) lE400f@ellipsis? '#f)) (lambda (lE4061@lE405e lE4062@lE4060) (let ((lE4065@maps lE4062@lE4060) (lE4066@x lE4061@lE405e)) (if (null? (car lE4065@maps)) (lE31da@syntax-violation '#f '"extra ellipsis in syntax form" lE400b@src) (values (lE3f9c@gen-map lE4066@x (car lE4065@maps)) (cdr lE4065@maps))))))))) (let ((lE406b@t lE4057@y)) (let ((lE406d@ls/false (lE30fa@syntax-dispatch lE406b@t '()))) (if lE406d@ls/false (apply (lambda () (lE4058@k lE400e@maps)) lE406d@ls/false) (let ((lE406f@t lE406b@t)) (let ((lE4071@ls/false (lE30fa@syntax-dispatch lE406f@t '(any . any)))) (if (and lE4071@ls/false (apply (lambda (lE4073@dots lE4074@y) (lE400f@ellipsis? lE4073@dots)) lE4071@ls/false)) (apply (lambda (lE4077@dots lE4078@y) (lE4069@f lE4078@y (lambda (lE407b@maps) (call-with-values (lambda () (lE4058@k (cons '() lE407b@maps))) (lambda (lE4081@lE407e lE4082@lE4080) (let ((lE4085@maps lE4082@lE4080) (lE4086@x lE4081@lE407e)) (if (null? (car lE4085@maps)) (lE31da@syntax-violation '#f '"extra ellipsis in syntax form" lE400b@src) (values (lE3f9a@gen-mappend lE4086@x (car lE4085@maps)) (cdr lE4085@maps))))))))) lE4071@ls/false) (let ((lE4089@t lE406f@t)) (let ((lE408b@ls/false (lE30fa@syntax-dispatch lE4089@t '_))) (if lE408b@ls/false (apply (lambda () (call-with-values (lambda () (lE3f94@gen-syntax lE400b@src lE4057@y lE400d@r lE400e@maps lE400f@ellipsis? lE4010@vec?)) (lambda (lE4091@lE408e lE4092@lE4090) (let ((lE4095@maps lE4092@lE4090) (lE4096@y lE4091@lE408e)) (call-with-values (lambda () (lE4058@k lE4095@maps)) (lambda (lE409d@lE409a lE409e@lE409c) (let ((lE40a1@maps lE409e@lE409c) (lE40a2@x lE409d@lE409a)) (values (lE3f98@gen-append lE40a2@x lE4096@y) lE40a1@maps)))))))) lE408b@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE4089@t)))))))))))) lE4049@ls/false) (let ((lE40a5@t lE4047@t)) (let ((lE40a7@ls/false (lE30fa@syntax-dispatch lE40a5@t '(any . any)))) (if lE40a7@ls/false (apply (lambda (lE40a9@x lE40aa@y) (call-with-values (lambda () (lE3f94@gen-syntax lE400b@src lE40a9@x lE400d@r lE400e@maps lE400f@ellipsis? '#f)) (lambda (lE40b1@lE40ae lE40b2@lE40b0) (let ((lE40b5@maps lE40b2@lE40b0) (lE40b6@xnew lE40b1@lE40ae)) (call-with-values (lambda () (lE3f94@gen-syntax lE400b@src lE40aa@y lE400d@r lE40b5@maps lE400f@ellipsis? lE4010@vec?)) (lambda (lE40bd@lE40ba lE40be@lE40bc) (let ((lE40c1@maps lE40be@lE40bc) (lE40c2@ynew lE40bd@lE40ba)) (values (lE3f9e@gen-cons lE400c@e lE40a9@x lE40aa@y lE40b6@xnew lE40c2@ynew) lE40c1@maps)))))))) lE40a7@ls/false) (let ((lE40c5@t lE40a5@t)) (let ((lE40c7@ls/false (lE30fa@syntax-dispatch lE40c5@t '#(vector each-any)))) (if lE40c7@ls/false (apply (lambda (lE40c9@ls) (call-with-values (lambda () (lE3f94@gen-syntax lE400b@src lE40c9@ls lE400d@r lE400e@maps lE400f@ellipsis? '#t)) (lambda (lE40cf@lE40cc lE40d0@lE40ce) (let ((lE40d3@maps lE40d0@lE40ce) (lE40d4@lsnew lE40cf@lE40cc)) (values (lE3fa0@gen-vector lE400c@e lE40c9@ls lE40d4@lsnew) lE40d3@maps))))) lE40c7@ls/false) (let ((lE40d7@t lE40c5@t)) (let ((lE40d9@ls/false (lE30fa@syntax-dispatch lE40d7@t '_))) (if lE40d9@ls/false (apply (lambda () (values (list 'quote lE400c@e) lE400e@maps)) lE40d9@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE40d7@t)))))))))))))))))))))))) (lE3f96@gen-ref (lambda (lE3ff1@src lE3ff2@var lE3ff3@level lE3ff4@maps) (if (= lE3ff3@level '0) (values lE3ff2@var lE3ff4@maps) (if (null? lE3ff4@maps) (lE31da@syntax-violation '#f '"missing ellipsis in syntax form" lE3ff1@src) (call-with-values (lambda () (lE3f96@gen-ref lE3ff1@src lE3ff2@var (- lE3ff3@level '1) (cdr lE3ff4@maps))) (lambda (lE3ffd@lE3ffa lE3ffe@lE3ffc) (let ((lE4001@outer-maps lE3ffe@lE3ffc) (lE4002@outer-var lE3ffd@lE3ffa)) (let ((lE4005@t (assq lE4002@outer-var (car lE3ff4@maps)))) (if lE4005@t ((lambda (lE4007@b) (values (cdr lE4007@b) lE3ff4@maps)) lE4005@t) (let ((lE4009@inner-var (lE2e7b@gen-lexical 'tmp))) (values lE4009@inner-var (cons (cons (cons lE4002@outer-var lE4009@inner-var) (car lE3ff4@maps)) lE4001@outer-maps)))))))))))) (lE3f98@gen-append (lambda (lE3fed@x lE3fee@y) (if (fast-equal? lE3fee@y ''()) lE3fed@x (list 'append lE3fed@x lE3fee@y)))) (lE3f9a@gen-mappend (lambda (lE3fe9@e lE3fea@map-env) (list 'apply '(primitive append) (lE3f9c@gen-map lE3fe9@e lE3fea@map-env)))) (lE3f9c@gen-map (lambda (lE3fd7@e lE3fd8@map-env) (let ((lE3fdb@formals (map cdr lE3fd8@map-env)) (lE3fdc@actuals (map (lambda (lE3fdf@x) (list 'ref (car lE3fdf@x))) lE3fd8@map-env))) (if (eq? (car lE3fd7@e) 'ref) (car lE3fdc@actuals) (if (for-all (lambda (lE3fe1@x) (and (eq? (car lE3fe1@x) 'ref) (memq (cadr lE3fe1@x) lE3fdb@formals))) (cdr lE3fd7@e)) (let ((lE3fe3@args (map (let ((lE3fe5@r (map cons lE3fdb@formals lE3fdc@actuals))) (lambda (lE3fe7@x) (cdr (assq (cadr lE3fe7@x) lE3fe5@r)))) (cdr lE3fd7@e)))) (cons 'map (cons (list 'primitive (car lE3fd7@e)) lE3fe3@args))) (cons* 'map (list 'lambda lE3fdb@formals lE3fd7@e) lE3fdc@actuals)))))) (lE3f9e@gen-cons (lambda (lE3fc7@e lE3fc8@x lE3fc9@y lE3fca@xnew lE3fcb@ynew) (let ((lE3fd1@t (car lE3fcb@ynew))) (if (memv lE3fd1@t '(quote)) (if (eq? (car lE3fca@xnew) 'quote) (let ((lE3fd3@xnew (cadr lE3fca@xnew)) (lE3fd4@ynew (cadr lE3fcb@ynew))) (if (and (eq? lE3fd3@xnew lE3fc8@x) (eq? lE3fd4@ynew lE3fc9@y)) (list 'quote lE3fc7@e) (list 'quote (cons lE3fd3@xnew lE3fd4@ynew)))) (if (null? (cadr lE3fcb@ynew)) (list 'list lE3fca@xnew) (list 'cons lE3fca@xnew lE3fcb@ynew))) (if (memv lE3fd1@t '(list)) (cons 'list (cons lE3fca@xnew (cdr lE3fcb@ynew))) (list 'cons lE3fca@xnew lE3fcb@ynew)))))) (lE3fa0@gen-vector (lambda (lE3fc1@e lE3fc2@ls lE3fc3@lsnew) (if (eq? (car lE3fc3@lsnew) 'quote) (if (eq? (cadr lE3fc3@lsnew) lE3fc2@ls) (list 'quote lE3fc1@e) (list 'quote (list->vector (cadr lE3fc3@lsnew)))) (if (eq? (car lE3fc3@lsnew) 'list) (cons 'vector (cdr lE3fc3@lsnew)) (list 'list->vector lE3fc3@lsnew))))) (lE3fa2@regen (lambda (lE3fbb@x) (let ((lE3fbd@t (car lE3fbb@x))) (if (memv lE3fbd@t '(ref)) (cadr lE3fbb@x) (if (memv lE3fbd@t '(primitive)) (list 'primitive (cadr lE3fbb@x)) (if (memv lE3fbd@t '(quote)) (list 'quote (cadr lE3fbb@x)) (if (memv lE3fbd@t '(lambda)) (lE2e56@lE2d88@build-lambda '#f (cadr lE3fbb@x) (lE3fa2@regen (caddr lE3fbb@x))) (if (memv lE3fbd@t '(map)) (let ((lE3fbf@ls (map lE3fa2@regen (cdr lE3fbb@x)))) (cons '(primitive ellipsis-map) lE3fbf@ls)) (cons (list 'primitive (car lE3fbb@x)) (map lE3fa2@regen (cdr lE3fbb@x)))))))))))) (lambda (lE3fa3@e lE3fa4@r lE3fa5@mr) (let ((lE3fa9@t lE3fa3@e)) (let ((lE3fab@ls/false (lE30fa@syntax-dispatch lE3fa9@t '(_ any)))) (if lE3fab@ls/false (apply (lambda (lE3fad@x) (call-with-values (lambda () (lE3f94@gen-syntax lE3fa3@e lE3fad@x lE3fa4@r '() lE30fc@ellipsis? '#f)) (lambda (lE3fb3@lE3fb0 lE3fb4@lE3fb2) (let ((lE3fb7@maps lE3fb4@lE3fb2) (lE3fb8@e lE3fb3@lE3fb0)) (lE3fa2@regen lE3fb8@e))))) lE3fab@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE3fa9@t))))))) (set! lE4c0c@lE3106@syntax-transformer lE3106@syntax-transformer) (set! lE3108@core-macro-transformer (lambda (lE40db@name) (let ((lE40dd@t lE40db@name)) (if (memv lE40dd@t '(quote)) lE30aa@quote-transformer (if (memv lE40dd@t '(lambda)) lE30ae@lambda-transformer (if (memv lE40dd@t '(case-lambda)) lE30ac@case-lambda-transformer (if (memv lE40dd@t '(letrec)) lE3092@letrec-transformer (if (memv lE40dd@t '(letrec*)) lE3094@letrec*-transformer (if (memv lE40dd@t '(let)) lE3090@let-transformer (if (memv lE40dd@t '(if)) lE30a2@if-transformer (if (memv lE40dd@t '(and)) lE30a4@and-transformer (if (memv lE40dd@t '(or)) lE30a6@or-transformer (if (memv lE40dd@t '(foreign-call)) lE30f6@foreign-call-transformer (if (memv lE40dd@t '(syntax-case)) lE3102@syntax-case-transformer (if (memv lE40dd@t '(syntax)) lE3106@syntax-transformer (if (memv lE40dd@t '(type-descriptor)) lE3098@type-descriptor-transformer (if (memv lE40dd@t '(record-type-descriptor)) lE309a@record-type-descriptor-transformer (if (memv lE40dd@t '(record-constructor-descriptor)) lE309c@record-constructor-descriptor-transformer (if (memv lE40dd@t '(fluid-let-syntax)) lE3096@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" lE40db@name)))))))))))))))))))) (set! lE4c0d@lE3108@core-macro-transformer lE3108@core-macro-transformer) (set! lE310a@symbol-macro (lambda (lE40df@x lE40e0@set) (let ((lE40e3@t lE40df@x)) (let ((lE40e5@ls/false (lE30fa@syntax-dispatch lE40e3@t '(_ any)))) (if (and lE40e5@ls/false (apply (lambda (lE40e7@name) (and (lE2ef3@id? lE40e7@name) (memq (lE2ef5@id->sym lE40e7@name) lE40e0@set))) lE40e5@ls/false)) (apply (lambda (lE40e9@name) (lE30b0@bless (list 'quote lE40e9@name))) lE40e5@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE40e3@t)))))) (set! lE4c0e@lE310a@symbol-macro lE310a@symbol-macro) (set! lE310c@macro-transformer (lambda (lE40eb@x) (if (procedure? lE40eb@x) lE40eb@x (if (symbol? lE40eb@x) (let ((lE40ed@t lE40eb@x)) (if (memv lE40ed@t '(define-record-type)) lE30ee@define-record-type-macro (if (memv lE40ed@t '(define-struct)) lE30ec@define-struct-macro (if (memv lE40ed@t '(include)) lE30e2@include-macro (if (memv lE40ed@t '(cond)) lE30de@cond-macro (if (memv lE40ed@t '(let)) lE30b6@let-macro (if (memv lE40ed@t '(do)) lE30d6@do-macro (if (memv lE40ed@t '(or)) lE30da@or-macro (if (memv lE40ed@t '(and)) lE30dc@and-macro (if (memv lE40ed@t '(let*)) lE30d8@let*-macro (if (memv lE40ed@t '(let-values)) lE30b8@let-values-macro (if (memv lE40ed@t '(let*-values)) lE30ba@let*-values-macro (if (memv lE40ed@t '(syntax-rules)) lE30e6@syntax-rules-macro (if (memv lE40ed@t '(quasiquote)) lE30e8@quasiquote-macro (if (memv lE40ed@t '(quasisyntax)) lE30ea@quasisyntax-macro (if (memv lE40ed@t '(with-syntax)) lE30b2@with-syntax-macro (if (memv lE40ed@t '(when)) lE309e@when-macro (if (memv lE40ed@t '(unless)) lE30a0@unless-macro (if (memv lE40ed@t '(case)) lE30a8@case-macro (if (memv lE40ed@t '(identifier-syntax)) lE30d4@identifier-syntax-macro (if (memv lE40ed@t '(time)) lE30cc@time-macro (if (memv lE40ed@t '(delay)) lE30ce@delay-macro (if (memv lE40ed@t '(assert)) lE30d0@assert-macro (if (memv lE40ed@t '(endianness)) lE30d2@endianness-macro (if (memv lE40ed@t '(guard)) lE30c8@guard-macro (if (memv lE40ed@t '(define-enumeration)) lE30ca@define-enumeration-macro (if (memv lE40ed@t '(trace-lambda)) lE30bc@trace-lambda-macro (if (memv lE40ed@t '(trace-define)) lE30be@trace-define-macro (if (memv lE40ed@t '(trace-define-syntax)) lE30c0@trace-define-syntax-macro (if (memv lE40ed@t '(trace-let-syntax)) lE30c4@trace-let-syntax-macro (if (memv lE40ed@t '(trace-letrec-syntax)) lE30c6@trace-letrec-syntax-macro (if (memv lE40ed@t '(define-condition-type)) lE30f0@define-condition-type-macro (if (memv lE40ed@t '(parameterize)) lE30f4@parameterize-macro (if (memv lE40ed@t '(include-into)) lE30e4@include-into-macro (if (memv lE40ed@t '(eol-style)) (lambda (lE40ef@x) (lE310a@symbol-macro lE40ef@x '(none lf cr crlf nel crnel ls))) (if (memv lE40ed@t '(error-handling-mode)) (lambda (lE40f1@x) (lE310a@symbol-macro lE40f1@x '(ignore raise replace))) (if (memv lE40ed@t '(buffer-mode)) (lambda (lE40f3@x) (lE310a@symbol-macro lE40f3@x '(none line block))) (if (memv lE40ed@t '(file-options)) lE2e6e@file-options-macro (if (memv lE40ed@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) lE30f2@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" lE40eb@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" lE40eb@x))))) (set! lE4c0f@lE310c@macro-transformer lE310c@macro-transformer) (set! lE310e@local-macro-transformer (lambda (lE40f5@x) (car lE40f5@x))) (set! lE4c10@lE310e@local-macro-transformer lE310e@local-macro-transformer) (set! lE3110@do-macro-call (lambda (lE40f7@transformer lE40f8@expr lE40f9@rib) (let ((lE40fd@out (lE40f7@transformer (lE2edf@add-mark lE2ed7@anti-mark '#f lE40f8@expr '#f)))) (begin (let lE4101@f ((lE40ff@x lE40fd@out)) (if (not (lE2ebf@stx? lE40ff@x)) (if (pair? lE40ff@x) (begin (lE4101@f (car lE40ff@x)) (lE4101@f (cdr lE40ff@x))) (if (vector? lE40ff@x) (vector-for-each lE4101@f lE40ff@x) (if (symbol? lE40ff@x) (lE31da@syntax-violation '#f '"raw symbol encountered in output of macro" lE40f8@expr lE40ff@x) (void)))) (void))) (lE2edf@add-mark (lE2ed5@gen-mark) lE40f9@rib lE40fd@out lE40f8@expr))))) (set! lE4c11@lE3110@do-macro-call lE3110@do-macro-call) (set! lE3112@chi-macro (lambda (lE4103@p lE4104@e lE4105@rib) (lE3110@do-macro-call (lE310c@macro-transformer lE4103@p) lE4104@e lE4105@rib))) (set! lE4c12@lE3112@chi-macro lE3112@chi-macro) (set! lE3114@chi-local-macro (lambda (lE4109@p lE410a@e lE410b@rib) (lE3110@do-macro-call (lE310e@local-macro-transformer lE4109@p) lE410a@e lE410b@rib))) (set! lE4c13@lE3114@chi-local-macro lE3114@chi-local-macro) (set! lE3116@chi-global-macro (lambda (lE410f@p lE4110@e lE4111@rib) (let ((lE4115@lib (car lE410f@p)) (lE4116@loc (cdr lE410f@p))) (begin (lE2d10@lE2b5f@visit-library lE4115@lib) (let ((lE4119@x (symbol-value lE4116@loc))) (let ((lE411b@transformer (if (procedure? lE4119@x) lE4119@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" lE4119@x)))) (lE3110@do-macro-call lE411b@transformer lE4110@e lE4111@rib))))))) (set! lE4c14@lE3116@chi-global-macro lE3116@chi-global-macro) (set! lE3118@chi-expr* (lambda (lE411d@e* lE411e@r lE411f@mr) (if (null? lE411d@e*) '() (let ((lE4123@e (lE311c@chi-expr (car lE411d@e*) lE411e@r lE411f@mr))) (cons lE4123@e (lE3118@chi-expr* (cdr lE411d@e*) lE411e@r lE411f@mr)))))) (set! lE4c15@lE3118@chi-expr* lE3118@chi-expr*) (set! lE311a@chi-application (lambda (lE4125@e lE4126@r lE4127@mr) (let ((lE412b@t lE4125@e)) (let ((lE412d@ls/false (lE30fa@syntax-dispatch lE412b@t '(any . each-any)))) (if lE412d@ls/false (apply (lambda (lE412f@rator lE4130@rands) (let ((lE4133@rator (lE311c@chi-expr lE412f@rator lE4126@r lE4127@mr))) (cons lE4133@rator (lE3118@chi-expr* lE4130@rands lE4126@r lE4127@mr)))) lE412d@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE412b@t)))))) (set! lE4c16@lE311a@chi-application lE311a@chi-application) (set! lE311c@chi-expr (lambda (lE4135@e lE4136@r lE4137@mr) (call-with-values (lambda () (lE2f15@syntax-type lE4135@e lE4136@r)) (lambda (lE4141@lE413c lE4142@lE413e lE4143@lE4140) (let ((lE4147@kwd lE4143@lE4140) (lE4148@value lE4142@lE413e) (lE4149@type lE4141@lE413c)) (let ((lE414d@t lE4149@type)) (if (memv lE414d@t '(core-macro)) (let ((lE414f@transformer (lE3108@core-macro-transformer lE4148@value))) (lE414f@transformer lE4135@e lE4136@r lE4137@mr)) (if (memv lE414d@t '(global)) (let ((lE4151@lib (car lE4148@value))) (let ((lE4153@loc (cdr lE4148@value))) (begin ((lE3162@inv-collector) lE4151@lib) lE4153@loc))) (if (memv lE414d@t '(core-prim)) (let ((lE4155@name lE4148@value)) (list 'primitive lE4155@name)) (if (memv lE414d@t '(call)) (lE311a@chi-application lE4135@e lE4136@r lE4137@mr) (if (memv lE414d@t '(lexical)) (let ((lE4157@lex (lE3084@lexical-var lE4148@value))) lE4157@lex) (if (memv lE414d@t '(global-macro global-macro!)) (lE311c@chi-expr (lE3116@chi-global-macro lE4148@value lE4135@e '#f) lE4136@r lE4137@mr) (if (memv lE414d@t '(local-macro local-macro!)) (lE311c@chi-expr (lE3114@chi-local-macro lE4148@value lE4135@e '#f) lE4136@r lE4137@mr) (if (memv lE414d@t '(macro macro!)) (lE311c@chi-expr (lE3112@chi-macro lE4148@value lE4135@e '#f) lE4136@r lE4137@mr) (if (memv lE414d@t '(constant)) (let ((lE4159@datum lE4148@value)) (list 'quote lE4159@datum)) (if (memv lE414d@t '(set!)) (lE311e@chi-set! lE4135@e lE4136@r lE4137@mr) (if (memv lE414d@t '(begin)) (let ((lE415b@t lE4135@e)) (let ((lE415d@ls/false (lE30fa@syntax-dispatch lE415b@t '(_ any . each-any)))) (if lE415d@ls/false (apply (lambda (lE415f@x lE4160@x*) (lE2e58@lE2db8@build-sequence '#f (lE3118@chi-expr* (cons lE415f@x lE4160@x*) lE4136@r lE4137@mr))) lE415d@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE415b@t)))) (if (memv lE414d@t '(let-syntax letrec-syntax)) (let ((lE4163@t lE4135@e)) (let ((lE4165@ls/false (lE30fa@syntax-dispatch lE4163@t '(_ #(each (any any)) any . each-any)))) (if (and lE4165@ls/false (apply (lambda (lE4167@xlhs* lE4168@xrhs* lE4169@xbody lE416a@xbody*) (if (not (lE2efb@valid-bound-ids? lE4167@xlhs*)) (lE31da@syntax-violation '#f '"invalid identifiers" lE4135@e) (void))) lE4165@ls/false)) (apply (lambda (lE416f@xlhs* lE4170@xrhs* lE4171@xbody lE4172@xbody*) (let ((lE4177@xlab* (map lE2e7f@gen-label lE416f@xlhs*))) (let ((lE4179@xrib (lE2eb3@make-full-rib lE416f@xlhs* lE4177@xlab*))) (let ((lE417b@xb* (map (lambda (lE417d@x) (lE2f2b@make-eval-transformer (lE3154@expand-transformer (if (eq? lE4149@type 'let-syntax) lE417d@x (lE2edd@add-subst lE4179@xrib lE417d@x)) lE4137@mr))) lE4170@xrhs*))) (lE2e58@lE2db8@build-sequence '#f (lE3118@chi-expr* (map (lambda (lE417f@x) (lE2edd@add-subst lE4179@xrib lE417f@x)) (cons lE4171@xbody lE4172@xbody*)) (append (map cons lE4177@xlab* lE417b@xb*) lE4136@r) (append (map cons lE4177@xlab* lE417b@xb*) lE4137@mr))))))) lE4165@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE4163@t)))) (if (memv lE414d@t '(displaced-lexical)) (lE31da@syntax-violation '#f '"identifier out of context" lE4135@e) (if (memv lE414d@t '(syntax)) (lE31da@syntax-violation '#f '"reference to pattern variable outside a syntax form" lE4135@e) (if (memv lE414d@t '(define define-syntax module import library)) (lE31da@syntax-violation '#f (string-append (let ((lE4181@t lE4149@type)) (if (memv lE4181@t '(define)) '"a definition" (if (memv lE4181@t '(define-syntax)) '"a define-syntax" (if (memv lE4181@t '(module)) '"a module definition" (if (memv lE4181@t '(library)) '"a library definition" (if (memv lE4181@t '(import)) '"an import declaration" (if (memv lE4181@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") lE4135@e) (if (memv lE414d@t '(mutable)) (lE31da@syntax-violation '#f '"attempt to reference an unexportable variable" lE4135@e) (lE31da@syntax-violation '#f '"invalid expression" lE4135@e))))))))))))))))))))))) (set! lE4c17@lE311c@chi-expr lE311c@chi-expr) (set! lE311e@chi-set! (lambda (lE4183@e lE4184@r lE4185@mr) (let ((lE4189@t lE4183@e)) (let ((lE418b@ls/false (lE30fa@syntax-dispatch lE4189@t '(_ any any)))) (if (and lE418b@ls/false (apply (lambda (lE418d@x lE418e@v) (lE2ef3@id? lE418d@x)) lE418b@ls/false)) (apply (lambda (lE4191@x lE4192@v) (call-with-values (lambda () (lE2f15@syntax-type lE4191@x lE4184@r)) (lambda (lE419b@lE4196 lE419c@lE4198 lE419d@lE419a) (let ((lE41a1@kwd lE419d@lE419a) (lE41a2@value lE419c@lE4198) (lE41a3@type lE419b@lE4196)) (let ((lE41a7@t lE41a3@type)) (if (memv lE41a7@t '(lexical)) (begin (lE3088@set-lexical-mutable! lE41a2@value '#t) (list 'set! (lE3084@lexical-var lE41a2@value) (lE311c@chi-expr lE4192@v lE4184@r lE4185@mr))) (if (memv lE41a7@t '(core-prim)) (lE31da@syntax-violation '#f '"cannot modify imported core primitive" lE4183@e) (if (memv lE41a7@t '(global)) (lE31da@syntax-violation '#f '"attempt to modify imported binding" lE4183@e) (if (memv lE41a7@t '(global-macro!)) (lE311c@chi-expr (lE3116@chi-global-macro lE41a2@value lE4183@e '#f) lE4184@r lE4185@mr) (if (memv lE41a7@t '(local-macro!)) (lE311c@chi-expr (lE3114@chi-local-macro lE41a2@value lE4183@e '#f) lE4184@r lE4185@mr) (if (memv lE41a7@t '(mutable)) (lE31da@syntax-violation '#f '"attempt to assign to an unexportable variable" lE4183@e) (lE31da@syntax-violation '#f '"invalid syntax" lE4183@e)))))))))))) lE418b@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE4189@t)))))) (set! lE4c18@lE311e@chi-set! lE311e@chi-set!) (set! lE3120@verify-formals (lambda (lE41a9@fmls lE41aa@stx) (let ((lE41ad@t lE41a9@fmls)) (let ((lE41af@ls/false (lE30fa@syntax-dispatch lE41ad@t 'each-any))) (if lE41af@ls/false (apply (lambda (lE41b1@x*) (if (not (lE2efb@valid-bound-ids? lE41b1@x*)) (lE30b4@invalid-fmls-error lE41aa@stx lE41a9@fmls) (void))) lE41af@ls/false) (let ((lE41b3@t lE41ad@t)) (let ((lE41b5@ls/false (lE30fa@syntax-dispatch lE41b3@t '#(each+ any () any)))) (if lE41b5@ls/false (apply (lambda (lE41b7@x* lE41b8@x) (if (not (lE2efb@valid-bound-ids? (cons lE41b8@x lE41b7@x*))) (lE30b4@invalid-fmls-error lE41aa@stx lE41a9@fmls) (void))) lE41b5@ls/false) (let ((lE41bb@t lE41b3@t)) (let ((lE41bd@ls/false (lE30fa@syntax-dispatch lE41bb@t '_))) (if lE41bd@ls/false (apply (lambda () (lE31da@syntax-violation '#f '"invalid syntax" lE41aa@stx)) lE41bd@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE41bb@t)))))))))))) (set! lE4c19@lE3120@verify-formals lE3120@verify-formals) (set! lE3122@chi-lambda-clause (lambda (lE41bf@stx lE41c0@fmls lE41c1@body* lE41c2@r lE41c3@mr) (let ((lE41c9@t lE41c0@fmls)) (let ((lE41cb@ls/false (lE30fa@syntax-dispatch lE41c9@t 'each-any))) (if lE41cb@ls/false (apply (lambda (lE41cd@x*) (begin (lE3120@verify-formals lE41c0@fmls lE41bf@stx) (let ((lE41cf@lex* (map lE2e7b@gen-lexical lE41cd@x*)) (lE41d0@lab* (map lE2e7f@gen-label lE41cd@x*))) (values lE41cf@lex* (lE3132@chi-internal (lE2edd@add-subst (lE2eb3@make-full-rib lE41cd@x* lE41d0@lab*) lE41c1@body*) (lE308c@add-lexicals lE41d0@lab* lE41cf@lex* lE41c2@r) lE41c3@mr))))) lE41cb@ls/false) (let ((lE41d3@t lE41c9@t)) (let ((lE41d5@ls/false (lE30fa@syntax-dispatch lE41d3@t '#(each+ any () any)))) (if lE41d5@ls/false (apply (lambda (lE41d7@x* lE41d8@x) (begin (lE3120@verify-formals lE41c0@fmls lE41bf@stx) (let ((lE41db@lex* (map lE2e7b@gen-lexical lE41d7@x*)) (lE41dc@lab* (map lE2e7f@gen-label lE41d7@x*)) (lE41dd@lex (lE2e7b@gen-lexical lE41d8@x)) (lE41de@lab (lE2e7f@gen-label lE41d8@x))) (values (append lE41db@lex* lE41dd@lex) (lE3132@chi-internal (lE2edd@add-subst (lE2eb3@make-full-rib (cons lE41d8@x lE41d7@x*) (cons lE41de@lab lE41dc@lab*)) lE41c1@body*) (lE308c@add-lexicals (cons lE41de@lab lE41dc@lab*) (cons lE41dd@lex lE41db@lex*) lE41c2@r) lE41c3@mr))))) lE41d5@ls/false) (let ((lE41e3@t lE41d3@t)) (let ((lE41e5@ls/false (lE30fa@syntax-dispatch lE41e3@t '_))) (if lE41e5@ls/false (apply (lambda () (lE31da@syntax-violation '#f '"invalid syntax" lE41c0@fmls)) lE41e5@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE41e3@t)))))))))))) (set! lE4c1a@lE3122@chi-lambda-clause lE3122@chi-lambda-clause) (set! lE3124@chi-lambda-clause* (lambda (lE41e7@stx lE41e8@fmls* lE41e9@body** lE41ea@r lE41eb@mr) (if (null? lE41e8@fmls*) (values '() '()) (call-with-values (lambda () (lE3122@chi-lambda-clause lE41e7@stx (car lE41e8@fmls*) (car lE41e9@body**) lE41ea@r lE41eb@mr)) (lambda (lE41f5@lE41f2 lE41f6@lE41f4) (let ((lE41f9@b lE41f6@lE41f4) (lE41fa@a lE41f5@lE41f2)) (call-with-values (lambda () (lE3124@chi-lambda-clause* lE41e7@stx (cdr lE41e8@fmls*) (cdr lE41e9@body**) lE41ea@r lE41eb@mr)) (lambda (lE4201@lE41fe lE4202@lE4200) (let ((lE4205@b* lE4202@lE4200) (lE4206@a* lE4201@lE41fe)) (values (cons lE41fa@a lE4206@a*) (cons lE41f9@b lE4205@b*))))))))))) (set! lE4c1b@lE3124@chi-lambda-clause* lE3124@chi-lambda-clause*) (set! lE3126@chi-defun (lambda (lE4209@x lE420a@r lE420b@mr) (let ((lE420f@fmls (car lE4209@x)) (lE4210@body* (cdr lE4209@x))) (call-with-values (lambda () (lE3122@chi-lambda-clause lE420f@fmls lE420f@fmls lE4210@body* lE420a@r lE420b@mr)) (lambda (lE4217@lE4214 lE4218@lE4216) (let ((lE421b@body lE4218@lE4216) (lE421c@fmls lE4217@lE4214)) (lE2e56@lE2d88@build-lambda '#f lE421c@fmls lE421b@body))))))) (set! lE4c1c@lE3126@chi-defun lE3126@chi-defun) (set! lE3128@chi-rhs (lambda (lE421f@rhs lE4220@r lE4221@mr) (let ((lE4225@t (car lE421f@rhs))) (if (memv lE4225@t '(defun)) (lE3126@chi-defun (cdr lE421f@rhs) lE4220@r lE4221@mr) (if (memv lE4225@t '(expr)) (let ((lE4227@expr (cdr lE421f@rhs))) (lE311c@chi-expr lE4227@expr lE4220@r lE4221@mr)) (if (memv lE4225@t '(top-expr)) (let ((lE4229@expr (cdr lE421f@rhs))) (lE2e58@lE2db8@build-sequence '#f (list (lE311c@chi-expr lE4229@expr lE4220@r lE4221@mr) (lE2e59@lE2dba@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" lE421f@rhs))))))) (set! lE4c1d@lE3128@chi-rhs lE3128@chi-rhs) (set! lE312a@expand-interaction-rhs*/init* (lambda (lE422b@lhs* lE422c@rhs* lE422d@init* lE422e@r lE422f@mr) (let lE4239@f ((lE4235@lhs* lE422b@lhs*) (lE4236@rhs* lE422c@rhs*)) (if (null? lE4235@lhs*) (map (lambda (lE423b@x) (lE311c@chi-expr lE423b@x lE422e@r lE422f@mr)) lE422d@init*) (let ((lE423d@lhs (car lE4235@lhs*)) (lE423e@rhs (car lE4236@rhs*))) (let ((lE4241@t (car lE423e@rhs))) (if (memv lE4241@t '(defun)) (let ((lE4243@rhs (lE3126@chi-defun (cdr lE423e@rhs) lE422e@r lE422f@mr))) (cons (list 'set! lE423d@lhs lE4243@rhs) (lE4239@f (cdr lE4235@lhs*) (cdr lE4236@rhs*)))) (if (memv lE4241@t '(expr)) (let ((lE4245@rhs (lE311c@chi-expr (cdr lE423e@rhs) lE422e@r lE422f@mr))) (cons (list 'set! lE423d@lhs lE4245@rhs) (lE4239@f (cdr lE4235@lhs*) (cdr lE4236@rhs*)))) (if (memv lE4241@t '(top-expr)) (let ((lE4247@e (lE311c@chi-expr (cdr lE423e@rhs) lE422e@r lE422f@mr))) (cons lE4247@e (lE4239@f (cdr lE4235@lhs*) (cdr lE4236@rhs*)))) (error 'expand-interaction '"invallid" lE423e@rhs)))))))))) (set! lE4c1e@lE312a@expand-interaction-rhs*/init* lE312a@expand-interaction-rhs*/init*) (set! lE312c@chi-rhs* (lambda (lE4249@rhs* lE424a@r lE424b@mr) (let lE4251@f ((lE424f@ls lE4249@rhs*)) (if (null? lE424f@ls) '() (let ((lE4253@a (lE3128@chi-rhs (car lE424f@ls) lE424a@r lE424b@mr))) (cons lE4253@a (lE4251@f (cdr lE424f@ls)))))))) (set! lE4c1f@lE312c@chi-rhs* lE312c@chi-rhs*) (set! lE312e@find-bound=? (lambda (lE4255@x lE4256@lhs* lE4257@rhs*) (if (null? lE4256@lhs*) '#f (if (lE2ef7@bound-id=? lE4255@x (car lE4256@lhs*)) (car lE4257@rhs*) (lE312e@find-bound=? lE4255@x (cdr lE4256@lhs*) (cdr lE4257@rhs*)))))) (set! lE4c20@lE312e@find-bound=? lE312e@find-bound=?) (set! lE3130@find-dups (lambda (lE425b@ls) (let lE4261@f ((lE425d@ls lE425b@ls) (lE425e@dups '())) (if (null? lE425d@ls) lE425e@dups (let ((lE4263@t (lE312e@find-bound=? (car lE425d@ls) (cdr lE425d@ls) (cdr lE425d@ls)))) (if lE4263@t ((lambda (lE4265@x) (lE4261@f (cdr lE425d@ls) (cons (list (car lE425d@ls) lE4265@x) lE425e@dups))) lE4263@t) (lE4261@f (cdr lE425d@ls) lE425e@dups))))))) (set! lE4c21@lE3130@find-dups lE3130@find-dups) (set! lE3132@chi-internal (lambda (lE4267@e* lE4268@r lE4269@mr) (let ((lE426d@rib (lE2ea7@make-empty-rib))) (call-with-values (lambda () (lE3152@chi-body* (map (lambda (lE427f@x) (lE2edd@add-subst lE426d@rib lE427f@x)) (lE2ef1@syntax->list lE4267@e*)) lE4268@r lE4269@mr '() '() '() '() '() lE426d@rib '#f)) (lambda (lE4281@lE4270 lE4282@lE4272 lE4283@lE4274 lE4284@lE4276 lE4285@lE4278 lE4286@lE427a lE4287@lE427c lE4288@lE427e) (let ((lE4291@_exp* lE4288@lE427e) (lE4292@kwd* lE4287@lE427c) (lE4293@mod** lE4286@lE427a) (lE4294@rhs* lE4285@lE4278) (lE4295@lex* lE4284@lE4276) (lE4296@mr lE4283@lE4274) (lE4297@r lE4282@lE4272) (lE4298@e* lE4281@lE4270)) (begin (if (null? lE4298@e*) (lE31da@syntax-violation '#f '"no expression in body" lE4298@e*) (void)) (let ((lE42a1@init* (lE3118@chi-expr* (append (apply append (reverse lE4293@mod**)) lE4298@e*) lE4297@r lE4296@mr))) (let ((lE42a3@rhs* (lE312c@chi-rhs* lE4294@rhs* lE4297@r lE4296@mr))) (lE2e5d@lE2dc2@build-letrec* '#f (reverse lE4295@lex*) (reverse lE42a3@rhs*) (lE2e58@lE2db8@build-sequence '#f lE42a1@init*))))))))))) (set! lE4c22@lE3132@chi-internal lE3132@chi-internal) (set! lE3134@parse-module (lambda (lE42a5@e) (let ((lE42a7@t lE42a5@e)) (let ((lE42a9@ls/false (lE30fa@syntax-dispatch lE42a7@t '(_ each-any . each-any)))) (if lE42a9@ls/false (apply (lambda (lE42ab@export* lE42ac@b*) (begin (if (not (for-all lE2ef3@id? lE42ab@export*)) (lE31da@syntax-violation '#f '"module exports must be identifiers" lE42a5@e) (void)) (values '#f (list->vector lE42ab@export*) lE42ac@b*))) lE42a9@ls/false) (let ((lE42af@t lE42a7@t)) (let ((lE42b1@ls/false (lE30fa@syntax-dispatch lE42af@t '(_ any each-any . each-any)))) (if lE42b1@ls/false (apply (lambda (lE42b3@name lE42b4@export* lE42b5@b*) (begin (if (not (lE2ef3@id? lE42b3@name)) (lE31da@syntax-violation '#f '"module name must be an identifier" lE42a5@e) (void)) (if (not (for-all lE2ef3@id? lE42b4@export*)) (lE31da@syntax-violation '#f '"module exports must be identifiers" lE42a5@e) (void)) (values lE42b3@name (list->vector lE42b4@export*) lE42b5@b*))) lE42b1@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE42af@t))))))))) (set! lE4c23@lE3134@parse-module lE3134@parse-module) (set! lE313e@module-interface? (lambda (lE42b9@x) (and (simple-struct? lE42b9@x) (eq? (simple-struct-name lE42b9@x) 'module-interface)))) (set! lE4c24@lE313e@module-interface? lE313e@module-interface?) (set! lE3140@module-interface-first-mark (lambda (lE42bb@x) (simple-struct-ref lE42bb@x '0))) (set! lE4c25@lE3140@module-interface-first-mark lE3140@module-interface-first-mark) (set! lE3142@set-module-interface-first-mark! (lambda (lE42bd@x lE42be@val) (simple-struct-set! lE42bd@x '0 lE42be@val))) (set! lE4c26@lE3142@set-module-interface-first-mark! lE3142@set-module-interface-first-mark!) (set! lE3144@module-interface-exp-id-vec (lambda (lE42c1@x) (simple-struct-ref lE42c1@x '1))) (set! lE4c27@lE3144@module-interface-exp-id-vec lE3144@module-interface-exp-id-vec) (set! lE3146@set-module-interface-exp-id-vec! (lambda (lE42c3@x lE42c4@val) (simple-struct-set! lE42c3@x '1 lE42c4@val))) (set! lE4c28@lE3146@set-module-interface-exp-id-vec! lE3146@set-module-interface-exp-id-vec!) (set! lE3148@module-interface-exp-lab-vec (lambda (lE42c7@x) (simple-struct-ref lE42c7@x '2))) (set! lE4c29@lE3148@module-interface-exp-lab-vec lE3148@module-interface-exp-lab-vec) (set! lE314a@set-module-interface-exp-lab-vec! (lambda (lE42c9@x lE42ca@val) (simple-struct-set! lE42c9@x '2 lE42ca@val))) (set! lE4c2a@lE314a@set-module-interface-exp-lab-vec! lE314a@set-module-interface-exp-lab-vec!) (set! lE314c@dummy '3) (set! lE4c2b@lE314c@dummy lE314c@dummy) (set! lE314e@module-interface-exp-id* (lambda (lE42cd@iface lE42ce@id) (letrec* ((lE42d2@diff-marks (lambda (lE42d9@ls lE42da@x) (begin (if (null? lE42d9@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((lE42dd@a (car lE42d9@ls))) (if (eq? lE42dd@a lE42da@x) '() (cons lE42dd@a (lE42d2@diff-marks (cdr lE42d9@ls) lE42da@x)))))))) (let ((lE42d3@diff (lE42d2@diff-marks (lE2ec5@stx-mark* lE42ce@id) (lE3140@module-interface-first-mark lE42cd@iface))) (lE42d4@id-vec (lE3144@module-interface-exp-id-vec lE42cd@iface))) (if (null? lE42d3@diff) lE42d4@id-vec (vector-map (lambda (lE42d7@x) (make-simple-struct 'stx '5 (list (lE2ec1@stx-expr lE42d7@x) (append lE42d3@diff (lE2ec5@stx-mark* lE42d7@x)) '() '()))) lE42d4@id-vec)))))) (set! lE4c2c@lE314e@module-interface-exp-id* lE314e@module-interface-exp-id*) (set! lE3150@chi-internal-module (lambda (lE42df@e lE42e0@r lE42e1@mr lE42e2@lex* lE42e3@rhs* lE42e4@mod** lE42e5@kwd*) (call-with-values (lambda () (lE3134@parse-module lE42df@e)) (lambda (lE42f3@lE42ee lE42f4@lE42f0 lE42f5@lE42f2) (let ((lE42f9@e* lE42f5@lE42f2) (lE42fa@exp-id* lE42f4@lE42f0) (lE42fb@name lE42f3@lE42ee)) (let ((lE42ff@rib (lE2ea7@make-empty-rib))) (let ((lE4301@e* (map (lambda (lE4303@x) (lE2edd@add-subst lE42ff@rib lE4303@x)) (lE2ef1@syntax->list lE42f9@e*)))) (call-with-values (lambda () (lE3152@chi-body* lE4301@e* lE42e0@r lE42e1@mr lE42e2@lex* lE42e3@rhs* lE42e4@mod** lE42e5@kwd* '() lE42ff@rib '#f)) (lambda (lE4315@lE4306 lE4316@lE4308 lE4317@lE430a lE4318@lE430c lE4319@lE430e lE431a@lE4310 lE431b@lE4312 lE431c@lE4314) (let ((lE4325@_exp* lE431c@lE4314) (lE4326@kwd* lE431b@lE4312) (lE4327@mod** lE431a@lE4310) (lE4328@rhs* lE4319@lE430e) (lE4329@lex* lE4318@lE430c) (lE432a@mr lE4317@lE430a) (lE432b@r lE4316@lE4308) (lE432c@e* lE4315@lE4306)) (let ((lE4335@exp-lab* (vector-map (lambda (lE4339@x) (or (lE2f09@id->label (make-simple-struct 'stx '5 (list (lE2ef5@id->sym lE4339@x) (lE2ec5@stx-mark* lE4339@x) (list lE42ff@rib) '()))) (lE31da@syntax-violation '#f '"cannot find module export" lE4339@x))) lE42fa@exp-id*)) (lE4336@mod** (cons lE432c@e* lE4327@mod**))) (if (not lE42fb@name) (values lE4329@lex* lE4328@rhs* lE42fa@exp-id* lE4335@exp-lab* lE432b@r lE432a@mr lE4336@mod** lE4326@kwd*) (let ((lE433b@lab (lE2e7f@gen-label 'module)) (lE433c@iface (make-simple-struct 'module-interface '4 (list (car (lE2ec5@stx-mark* lE42fb@name)) (vector-map (lambda (lE433f@x) (make-simple-struct 'stx '5 (list (lE2ec1@stx-expr lE433f@x) (lE2ec5@stx-mark* lE433f@x) '() '()))) lE42fa@exp-id*) lE4335@exp-lab*)))) (values lE4329@lex* lE4328@rhs* (vector lE42fb@name) (vector lE433b@lab) (cons (cons lE433b@lab (cons '$module lE433c@iface)) lE432b@r) (cons (cons lE433b@lab (cons '$module lE433c@iface)) lE432a@mr) lE4336@mod** lE4326@kwd*)))))))))))))) (set! lE4c2d@lE3150@chi-internal-module lE3150@chi-internal-module) (set! lE3152@chi-body* (lambda (lE4341@e* lE4342@r lE4343@mr lE4344@lex* lE4345@rhs* lE4346@mod** lE4347@kwd* lE4348@exp* lE4349@rib lE434a@top?) (if (null? lE4341@e*) (values lE4341@e* lE4342@r lE4343@mr lE4344@lex* lE4345@rhs* lE4346@mod** lE4347@kwd* lE4348@exp*) (let ((lE4355@e (car lE4341@e*))) (call-with-values (lambda () (lE2f15@syntax-type lE4355@e lE4342@r)) (lambda (lE435d@lE4358 lE435e@lE435a lE435f@lE435c) (let ((lE4363@kwd lE435f@lE435c) (lE4364@value lE435e@lE435a) (lE4365@type lE435d@lE4358)) (let ((lE4369@kwd* (if (lE2ef3@id? lE4363@kwd) (cons lE4363@kwd lE4347@kwd*) lE4347@kwd*))) (let ((lE436b@t lE4365@type)) (if (memv lE436b@t '(define)) (call-with-values (lambda () (lE307c@parse-define lE4355@e)) (lambda (lE4371@lE436e lE4372@lE4370) (let ((lE4375@rhs lE4372@lE4370) (lE4376@id lE4371@lE436e)) (begin (if (lE2eff@bound-id-member? lE4376@id lE4369@kwd*) (lE31da@syntax-violation '#f '"cannot redefine keyword" lE4355@e) (void)) (call-with-values (lambda () (lE2e83@gen-define-label+loc lE4376@id lE4349@rib)) (lambda (lE437d@lE437a lE437e@lE437c) (let ((lE4381@lex lE437e@lE437c) (lE4382@lab lE437d@lE437a)) (begin (lE2ea9@extend-rib! lE4349@rib lE4376@id lE4382@lab) (lE3152@chi-body* (cdr lE4341@e*) (lE308a@add-lexical lE4382@lab lE4381@lex lE4342@r) lE4343@mr (cons lE4381@lex lE4344@lex*) (cons lE4375@rhs lE4345@rhs*) lE4346@mod** lE4369@kwd* lE4348@exp* lE4349@rib lE434a@top?))))))))) (if (memv lE436b@t '(define-syntax)) (call-with-values (lambda () (lE307e@parse-define-syntax lE4355@e)) (lambda (lE4389@lE4386 lE438a@lE4388) (let ((lE438d@rhs lE438a@lE4388) (lE438e@id lE4389@lE4386)) (begin (if (lE2eff@bound-id-member? lE438e@id lE4369@kwd*) (lE31da@syntax-violation '#f '"cannot redefine keyword" lE4355@e) (void)) (let ((lE4391@lab (lE2e85@gen-define-label lE438e@id lE4349@rib)) (lE4392@expanded-rhs (lE3154@expand-transformer lE438d@rhs lE4343@mr))) (begin (lE2ea9@extend-rib! lE4349@rib lE438e@id lE4391@lab) (let ((lE4395@b (lE2f2b@make-eval-transformer lE4392@expanded-rhs))) (lE3152@chi-body* (cdr lE4341@e*) (cons (cons lE4391@lab lE4395@b) lE4342@r) (cons (cons lE4391@lab lE4395@b) lE4343@mr) lE4344@lex* lE4345@rhs* lE4346@mod** lE4369@kwd* lE4348@exp* lE4349@rib lE434a@top?)))))))) (if (memv lE436b@t '(let-syntax letrec-syntax)) (let ((lE4397@t lE4355@e)) (let ((lE4399@ls/false (lE30fa@syntax-dispatch lE4397@t '(_ #(each (any any)) . each-any)))) (if (and lE4399@ls/false (apply (lambda (lE439b@xlhs* lE439c@xrhs* lE439d@xbody*) (if (not (lE2efb@valid-bound-ids? lE439b@xlhs*)) (lE31da@syntax-violation '#f '"invalid identifiers" lE4355@e) (void))) lE4399@ls/false)) (apply (lambda (lE43a1@xlhs* lE43a2@xrhs* lE43a3@xbody*) (let ((lE43a7@xlab* (map lE2e7f@gen-label lE43a1@xlhs*))) (let ((lE43a9@xrib (lE2eb3@make-full-rib lE43a1@xlhs* lE43a7@xlab*))) (let ((lE43ab@xb* (map (lambda (lE43ad@x) (lE2f2b@make-eval-transformer (lE3154@expand-transformer (if (eq? lE4365@type 'let-syntax) lE43ad@x (lE2edd@add-subst lE43a9@xrib lE43ad@x)) lE4343@mr))) lE43a2@xrhs*))) (lE3152@chi-body* (append (map (lambda (lE43af@x) (lE2edd@add-subst lE43a9@xrib lE43af@x)) lE43a3@xbody*) (cdr lE4341@e*)) (append (map cons lE43a7@xlab* lE43ab@xb*) lE4342@r) (append (map cons lE43a7@xlab* lE43ab@xb*) lE4343@mr) lE4344@lex* lE4345@rhs* lE4346@mod** lE4369@kwd* lE4348@exp* lE4349@rib lE434a@top?))))) lE4399@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE4397@t)))) (if (memv lE436b@t '(begin)) (let ((lE43b1@t lE4355@e)) (let ((lE43b3@ls/false (lE30fa@syntax-dispatch lE43b1@t '(_ . each-any)))) (if lE43b3@ls/false (apply (lambda (lE43b5@x*) (lE3152@chi-body* (append lE43b5@x* (cdr lE4341@e*)) lE4342@r lE4343@mr lE4344@lex* lE4345@rhs* lE4346@mod** lE4369@kwd* lE4348@exp* lE4349@rib lE434a@top?)) lE43b3@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE43b1@t)))) (if (memv lE436b@t '(global-macro global-macro!)) (lE3152@chi-body* (cons (lE3116@chi-global-macro lE4364@value lE4355@e lE4349@rib) (cdr lE4341@e*)) lE4342@r lE4343@mr lE4344@lex* lE4345@rhs* lE4346@mod** lE4369@kwd* lE4348@exp* lE4349@rib lE434a@top?) (if (memv lE436b@t '(local-macro local-macro!)) (lE3152@chi-body* (cons (lE3114@chi-local-macro lE4364@value lE4355@e lE4349@rib) (cdr lE4341@e*)) lE4342@r lE4343@mr lE4344@lex* lE4345@rhs* lE4346@mod** lE4369@kwd* lE4348@exp* lE4349@rib lE434a@top?) (if (memv lE436b@t '(macro macro!)) (lE3152@chi-body* (cons (lE3112@chi-macro lE4364@value lE4355@e lE4349@rib) (cdr lE4341@e*)) lE4342@r lE4343@mr lE4344@lex* lE4345@rhs* lE4346@mod** lE4369@kwd* lE4348@exp* lE4349@rib lE434a@top?) (if (memv lE436b@t '(module)) (call-with-values (lambda () (lE3150@chi-internal-module lE4355@e lE4342@r lE4343@mr lE4344@lex* lE4345@rhs* lE4346@mod** lE4369@kwd*)) (lambda (lE43c7@lE43b8 lE43c8@lE43ba lE43c9@lE43bc lE43ca@lE43be lE43cb@lE43c0 lE43cc@lE43c2 lE43cd@lE43c4 lE43ce@lE43c6) (let ((lE43d7@kwd* lE43ce@lE43c6) (lE43d8@mod** lE43cd@lE43c4) (lE43d9@mr lE43cc@lE43c2) (lE43da@r lE43cb@lE43c0) (lE43db@m-exp-lab* lE43ca@lE43be) (lE43dc@m-exp-id* lE43c9@lE43bc) (lE43dd@rhs* lE43c8@lE43ba) (lE43de@lex* lE43c7@lE43b8)) (begin (vector-for-each (lambda (lE43e7@id lE43e8@lab) (lE2ea9@extend-rib! lE4349@rib lE43e7@id lE43e8@lab)) lE43dc@m-exp-id* lE43db@m-exp-lab*) (lE3152@chi-body* (cdr lE4341@e*) lE43da@r lE43d9@mr lE43de@lex* lE43dd@rhs* lE43d8@mod** lE43d7@kwd* lE4348@exp* lE4349@rib lE434a@top?))))) (if (memv lE436b@t '(library)) (begin (lE31bc@library-expander (lE2f07@stx->datum lE4355@e)) (lE3152@chi-body* (cdr lE4341@e*) lE4342@r lE4343@mr lE4344@lex* lE4345@rhs* lE4346@mod** lE4369@kwd* lE4348@exp* lE4349@rib lE434a@top?)) (if (memv lE436b@t '(export)) (let ((lE43eb@t lE4355@e)) (let ((lE43ed@ls/false (lE30fa@syntax-dispatch lE43eb@t '(_ . each-any)))) (if lE43ed@ls/false (apply (lambda (lE43ef@exp-decl*) (lE3152@chi-body* (cdr lE4341@e*) lE4342@r lE4343@mr lE4344@lex* lE4345@rhs* lE4346@mod** lE4369@kwd* (append lE43ef@exp-decl* lE4348@exp*) lE4349@rib lE434a@top?)) lE43ed@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE43eb@t)))) (if (memv lE436b@t '(import)) (letrec* ((lE43f2@module-import? (lambda (lE4445@e) (let ((lE4447@t lE4445@e)) (let ((lE4449@ls/false (lE30fa@syntax-dispatch lE4447@t '(_ any)))) (if (and lE4449@ls/false (apply (lambda (lE444b@id) (lE2ef3@id? lE444b@id)) lE4449@ls/false)) (apply (lambda (lE444d@id) '#t) lE4449@ls/false) (let ((lE444f@t lE4447@t)) (let ((lE4451@ls/false (lE30fa@syntax-dispatch lE444f@t '(_ . each-any)))) (if lE4451@ls/false (apply (lambda (lE4453@imp*) '#f) lE4451@ls/false) (let ((lE4455@t lE444f@t)) (let ((lE4457@ls/false (lE30fa@syntax-dispatch lE4455@t '_))) (if lE4457@ls/false (apply (lambda () (lE31da@syntax-violation '#f '"malformed import form" lE4445@e)) lE4457@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE4455@t)))))))))))) (lE43f4@module-import (lambda (lE4423@e lE4424@r) (let ((lE4427@t lE4423@e)) (let ((lE4429@ls/false (lE30fa@syntax-dispatch lE4427@t '(_ any)))) (if (and lE4429@ls/false (apply (lambda (lE442b@id) (lE2ef3@id? lE442b@id)) lE4429@ls/false)) (apply (lambda (lE442d@id) (call-with-values (lambda () (lE2f15@syntax-type lE442d@id lE4424@r)) (lambda (lE4435@lE4430 lE4436@lE4432 lE4437@lE4434) (let ((lE443b@kwd lE4437@lE4434) (lE443c@value lE4436@lE4432) (lE443d@type lE4435@lE4430)) (let ((lE4441@t lE443d@type)) (if (memv lE4441@t '($module)) (let ((lE4443@iface lE443c@value)) (values (lE314e@module-interface-exp-id* lE4443@iface lE442d@id) (lE3148@module-interface-exp-lab-vec lE4443@iface))) (lE31da@syntax-violation '#f '"invalid import" lE4423@e))))))) lE4429@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE4427@t)))))) (lE43f6@library-import (lambda (lE4407@e) (let ((lE4409@t lE4407@e)) (let ((lE440b@ls/false (lE30fa@syntax-dispatch lE4409@t '(any . each-any)))) (if lE440b@ls/false (apply (lambda (lE440d@ctxt lE440e@imp*) (call-with-values (lambda () (lE315c@parse-import-spec* (lE31e0@syntax->datum lE440e@imp*))) (lambda (lE4415@lE4412 lE4416@lE4414) (let ((lE4419@subst-labels lE4416@lE4414) (lE441a@subst-names lE4415@lE4412)) (values (vector-map (lambda (lE441d@name) (lE2ed3@datum->stx lE440d@ctxt lE441d@name)) lE441a@subst-names) lE4419@subst-labels))))) lE440b@ls/false) (let ((lE441f@t lE4409@t)) (let ((lE4421@ls/false (lE30fa@syntax-dispatch lE441f@t '_))) (if lE4421@ls/false (apply (lambda () (lE31da@syntax-violation '#f '"invalid import form" lE4407@e)) lE4421@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE441f@t)))))))))) (begin (call-with-values (lambda () (if (lE43f2@module-import? lE4355@e) (lE43f4@module-import lE4355@e lE4342@r) (lE43f6@library-import lE4355@e))) (lambda (lE43fb@lE43f8 lE43fc@lE43fa) (let ((lE43ff@lab* lE43fc@lE43fa) (lE4400@id* lE43fb@lE43f8)) (vector-for-each (lambda (lE4403@id lE4404@lab) (lE2ea9@extend-rib! lE4349@rib lE4403@id lE4404@lab)) lE4400@id* lE43ff@lab*)))) (lE3152@chi-body* (cdr lE4341@e*) lE4342@r lE4343@mr lE4344@lex* lE4345@rhs* lE4346@mod** lE4369@kwd* lE4348@exp* lE4349@rib lE434a@top?))) (if lE434a@top? (lE3152@chi-body* (cdr lE4341@e*) lE4342@r lE4343@mr (cons (lE2e7b@gen-lexical 'dummy) lE4344@lex*) (cons (cons 'top-expr lE4355@e) lE4345@rhs*) lE4346@mod** lE4369@kwd* lE4348@exp* lE4349@rib lE434a@top?) (values lE4341@e* lE4342@r lE4343@mr lE4344@lex* lE4345@rhs* lE4346@mod** lE4369@kwd* lE4348@exp*)))))))))))))))))))))) (set! lE4c2e@lE3152@chi-body* lE3152@chi-body*) (set! lE3154@expand-transformer (lambda (lE4459@expr lE445a@r) (let ((lE445d@rtc (lE3160@make-collector))) (let ((lE445f@expanded-rhs (let ((lE4469@lE4462 lE3162@inv-collector) (lE446a@lE4464 lE3164@vis-collector) (lE446b@lE4466 lE445d@rtc) (lE446c@lE4468 (lambda (lE4471@x) (values)))) (let ((lE4473@swap (lambda () (begin (let ((lE4475@t (lE4469@lE4462))) (begin (lE4469@lE4462 lE446b@lE4466) (set! lE446b@lE4466 lE4475@t))) (let ((lE4477@t (lE446a@lE4464))) (begin (lE446a@lE4464 lE446c@lE4468) (set! lE446c@lE4468 lE4477@t))))))) (dynamic-wind lE4473@swap (lambda () (lE311c@chi-expr lE4459@expr lE445a@r lE445a@r)) lE4473@swap))))) (begin (for-each (let ((lE4479@mark-visit (lE3164@vis-collector))) (lambda (lE447b@x) (begin (lE2d0f@lE2b5d@invoke-library lE447b@x) (lE4479@mark-visit lE447b@x)))) (lE445d@rtc)) lE445f@expanded-rhs))))) (set! lE4c2f@lE3154@expand-transformer lE3154@expand-transformer) (set! lE3156@parse-exports (lambda (lE447d@exp*) (let lE4485@f ((lE447f@exp* lE447d@exp*) (lE4480@int* '()) (lE4481@ext* '())) (if (null? lE447f@exp*) (begin (if (not (lE2efb@valid-bound-ids? lE4481@ext*)) (lE31da@syntax-violation 'export '"invalid exports" (lE3130@find-dups lE4481@ext*)) (void)) (values (map lE31e0@syntax->datum lE4481@ext*) lE4480@int*)) (let ((lE4487@t (car lE447f@exp*))) (let ((lE4489@ls/false (lE30fa@syntax-dispatch lE4487@t '(any . #(each (any any)))))) (if lE4489@ls/false (apply (lambda (lE448b@rename lE448c@i* lE448d@e*) (begin (if (not (and (eq? (lE31e0@syntax->datum lE448b@rename) 'rename) (for-all lE2ef3@id? lE448c@i*) (for-all lE2ef3@id? lE448d@e*))) (lE31da@syntax-violation 'export '"invalid export specifier" (car lE447f@exp*)) (void)) (lE4485@f (cdr lE447f@exp*) (append lE448c@i* lE4480@int*) (append lE448d@e* lE4481@ext*)))) lE4489@ls/false) (let ((lE4491@t lE4487@t)) (let ((lE4493@ls/false (lE30fa@syntax-dispatch lE4491@t 'any))) (if lE4493@ls/false (apply (lambda (lE4495@ie) (begin (if (not (lE2ef3@id? lE4495@ie)) (lE31da@syntax-violation 'export '"invalid export" lE4495@ie) (void)) (lE4485@f (cdr lE447f@exp*) (cons lE4495@ie lE4480@int*) (cons lE4495@ie lE4481@ext*)))) lE4493@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE4491@t))))))))))) (set! lE4c30@lE3156@parse-exports lE3156@parse-exports) (set! lE3158@parse-library-name (lambda (lE4497@spec) (letrec* ((lE449a@parse (lambda (lE44a7@x) (let ((lE44a9@t lE44a7@x)) (let ((lE44ab@ls/false (lE30fa@syntax-dispatch lE44a9@t '(each-any)))) (if (and lE44ab@ls/false (apply (lambda (lE44ad@v*) (for-all (lambda (lE44af@x) (let ((lE44b1@x (lE31e0@syntax->datum lE44af@x))) (and (integer? lE44b1@x) (exact? lE44b1@x)))) lE44ad@v*)) lE44ab@ls/false)) (apply (lambda (lE44b3@v*) (values '() (map lE31e0@syntax->datum lE44b3@v*))) lE44ab@ls/false) (let ((lE44b5@t lE44a9@t)) (let ((lE44b7@ls/false (lE30fa@syntax-dispatch lE44b5@t '(any . any)))) (if (and lE44b7@ls/false (apply (lambda (lE44b9@x lE44ba@rest) (symbol? (lE31e0@syntax->datum lE44b9@x))) lE44b7@ls/false)) (apply (lambda (lE44bd@x lE44be@rest) (call-with-values (lambda () (lE449a@parse lE44be@rest)) (lambda (lE44c5@lE44c2 lE44c6@lE44c4) (let ((lE44c9@v* lE44c6@lE44c4) (lE44ca@x* lE44c5@lE44c2)) (values (cons (lE31e0@syntax->datum lE44bd@x) lE44ca@x*) lE44c9@v*))))) lE44b7@ls/false) (let ((lE44cd@t lE44b5@t)) (let ((lE44cf@ls/false (lE30fa@syntax-dispatch lE44cd@t '()))) (if lE44cf@ls/false (apply (lambda () (values '() '())) lE44cf@ls/false) (let ((lE44d1@t lE44cd@t)) (let ((lE44d3@ls/false (lE30fa@syntax-dispatch lE44d1@t '_))) (if lE44d3@ls/false (apply (lambda () (lE31da@syntax-violation '#f '"invalid library name" lE4497@spec)) lE44d3@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE44d1@t)))))))))))))))) (call-with-values (lambda () (lE449a@parse lE4497@spec)) (lambda (lE449f@lE449c lE44a0@lE449e) (let ((lE44a3@ver* lE44a0@lE449e) (lE44a4@name* lE449f@lE449c)) (begin (if (null? lE44a4@name*) (lE31da@syntax-violation '#f '"empty library name" lE4497@spec) (void)) (values lE44a4@name* lE44a3@ver*)))))))) (set! lE4c31@lE3158@parse-library-name lE3158@parse-library-name) (set! lE315a@parse-library (lambda (lE44d5@e) (let ((lE44d7@t lE44d5@e)) (let ((lE44d9@ls/false (lE30fa@syntax-dispatch lE44d7@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and lE44d9@ls/false (apply (lambda (lE44db@library lE44dc@name* lE44dd@export lE44de@exp* lE44df@import lE44e0@imp* lE44e1@b*) (and (eq? (lE31e0@syntax->datum lE44dd@export) 'export) (eq? (lE31e0@syntax->datum lE44df@import) 'import) (eq? (lE31e0@syntax->datum lE44db@library) 'library))) lE44d9@ls/false)) (apply (lambda (lE44e9@library lE44ea@name* lE44eb@export lE44ec@exp* lE44ed@import lE44ee@imp* lE44ef@b*) (values lE44ea@name* lE44ec@exp* lE44ee@imp* lE44ef@b*)) lE44d9@ls/false) (let ((lE44f7@t lE44d7@t)) (let ((lE44f9@ls/false (lE30fa@syntax-dispatch lE44f7@t '_))) (if lE44f9@ls/false (apply (lambda () (lE31da@syntax-violation '#f '"malformed library" lE44d5@e)) lE44f9@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE44f7@t))))))))) (set! lE4c32@lE315a@parse-library lE315a@parse-library) (set! lE315c@parse-import-spec* (letrec* ((lE44fc@idsyn? (lambda (lE4705@x) (symbol? (lE31e0@syntax->datum lE4705@x)))) (lE44fe@dup-error (lambda (lE4703@name) (lE31da@syntax-violation 'import '"two imports with different bindings" lE4703@name))) (lE4500@merge-substs (lambda (lE46f1@s lE46f2@subst) (letrec* ((lE46f6@insert-to-subst (lambda (lE46f7@a lE46f8@subst) (let ((lE46fb@name (car lE46f7@a)) (lE46fc@label (cdr lE46f7@a))) (let ((lE46ff@t (assq lE46fb@name lE46f8@subst))) (if lE46ff@t ((lambda (lE4701@x) (if (eq? (cdr lE4701@x) lE46fc@label) lE46f8@subst (lE44fe@dup-error lE46fb@name))) lE46ff@t) (cons lE46f7@a lE46f8@subst))))))) (if (null? lE46f1@s) lE46f2@subst (lE46f6@insert-to-subst (car lE46f1@s) (lE4500@merge-substs (cdr lE46f1@s) lE46f2@subst)))))) (lE4502@exclude* (lambda (lE46c1@sym* lE46c2@subst) (letrec* ((lE46c6@exclude (lambda (lE46df@sym lE46e0@subst) (if (null? lE46e0@subst) (lE31da@syntax-violation 'import '"cannot rename unbound identifier" lE46df@sym) (if (eq? lE46df@sym (caar lE46e0@subst)) (values (cdar lE46e0@subst) (cdr lE46e0@subst)) (let ((lE46e3@a (car lE46e0@subst))) (call-with-values (lambda () (lE46c6@exclude lE46df@sym (cdr lE46e0@subst))) (lambda (lE46e9@lE46e6 lE46ea@lE46e8) (let ((lE46ed@subst lE46ea@lE46e8) (lE46ee@old lE46e9@lE46e6)) (values lE46ee@old (cons lE46e3@a lE46ed@subst))))))))))) (if (null? lE46c1@sym*) (values '() lE46c2@subst) (call-with-values (lambda () (lE46c6@exclude (car lE46c1@sym*) lE46c2@subst)) (lambda (lE46cb@lE46c8 lE46cc@lE46ca) (let ((lE46cf@subst lE46cc@lE46ca) (lE46d0@old lE46cb@lE46c8)) (call-with-values (lambda () (lE4502@exclude* (cdr lE46c1@sym*) lE46cf@subst)) (lambda (lE46d7@lE46d4 lE46d8@lE46d6) (let ((lE46db@subst lE46d8@lE46d6) (lE46dc@old* lE46d7@lE46d4)) (values (cons lE46d0@old lE46dc@old*) lE46db@subst))))))))))) (lE4504@find* (lambda (lE46b9@sym* lE46ba@subst) (map (lambda (lE46bd@x) (let ((lE46bf@t (assq lE46bd@x lE46ba@subst))) (if lE46bf@t (cdr lE46bf@t) (lE31da@syntax-violation 'import '"cannot find identifier" lE46bd@x)))) lE46b9@sym*))) (lE4506@rem* (lambda (lE46b1@sym* lE46b2@subst) (let lE46b7@f ((lE46b5@subst lE46b2@subst)) (if (null? lE46b5@subst) '() (if (memq (caar lE46b5@subst) lE46b1@sym*) (lE46b7@f (cdr lE46b5@subst)) (cons (car lE46b5@subst) (lE46b7@f (cdr lE46b5@subst)))))))) (lE4508@remove-dups (lambda (lE46af@ls) (if (null? lE46af@ls) '() (if (memq (car lE46af@ls) (cdr lE46af@ls)) (lE4508@remove-dups (cdr lE46af@ls)) (cons (car lE46af@ls) (lE4508@remove-dups (cdr lE46af@ls))))))) (lE450a@parse-library-name (lambda (lE45c7@spec) (letrec* ((lE45ca@subversion? (lambda (lE46ab@x) (let ((lE46ad@x (lE31e0@syntax->datum lE46ab@x))) (and (integer? lE46ad@x) (exact? lE46ad@x) (>= lE46ad@x '0))))) (lE45cc@subversion-pred (lambda (lE464b@x*) (let ((lE464d@t lE464b@x*)) (let ((lE464f@ls/false (lE30fa@syntax-dispatch lE464d@t 'any))) (if (and lE464f@ls/false (apply (lambda (lE4651@n) (lE45ca@subversion? lE4651@n)) lE464f@ls/false)) (apply (lambda (lE4653@n) (lambda (lE4655@x) (= lE4655@x (lE31e0@syntax->datum lE4653@n)))) lE464f@ls/false) (let ((lE4657@t lE464d@t)) (let ((lE4659@ls/false (lE30fa@syntax-dispatch lE4657@t '(any . each-any)))) (if (and lE4659@ls/false (apply (lambda (lE465b@p? lE465c@sub*) (eq? (lE31e0@syntax->datum lE465b@p?) 'and)) lE4659@ls/false)) (apply (lambda (lE465f@p? lE4660@sub*) (let ((lE4663@p* (map lE45cc@subversion-pred lE4660@sub*))) (lambda (lE4665@x) (for-all (lambda (lE4667@p) (lE4667@p lE4665@x)) lE4663@p*)))) lE4659@ls/false) (let ((lE4669@t lE4657@t)) (let ((lE466b@ls/false (lE30fa@syntax-dispatch lE4669@t '(any . each-any)))) (if (and lE466b@ls/false (apply (lambda (lE466d@p? lE466e@sub*) (eq? (lE31e0@syntax->datum lE466d@p?) 'or)) lE466b@ls/false)) (apply (lambda (lE4671@p? lE4672@sub*) (let ((lE4675@p* (map lE45cc@subversion-pred lE4672@sub*))) (lambda (lE4677@x) (exists (lambda (lE4679@p) (lE4679@p lE4677@x)) lE4675@p*)))) lE466b@ls/false) (let ((lE467b@t lE4669@t)) (let ((lE467d@ls/false (lE30fa@syntax-dispatch lE467b@t '(any any)))) (if (and lE467d@ls/false (apply (lambda (lE467f@p? lE4680@sub) (eq? (lE31e0@syntax->datum lE467f@p?) 'not)) lE467d@ls/false)) (apply (lambda (lE4683@p? lE4684@sub) (let ((lE4687@p (lE45cc@subversion-pred lE4684@sub))) (lambda (lE4689@x) (not (lE4687@p lE4689@x))))) lE467d@ls/false) (let ((lE468b@t lE467b@t)) (let ((lE468d@ls/false (lE30fa@syntax-dispatch lE468b@t '(any any)))) (if (and lE468d@ls/false (apply (lambda (lE468f@p? lE4690@n) (and (eq? (lE31e0@syntax->datum lE468f@p?) '<=) (lE45ca@subversion? lE4690@n))) lE468d@ls/false)) (apply (lambda (lE4693@p? lE4694@n) (lambda (lE4697@x) (<= lE4697@x (lE31e0@syntax->datum lE4694@n)))) lE468d@ls/false) (let ((lE4699@t lE468b@t)) (let ((lE469b@ls/false (lE30fa@syntax-dispatch lE4699@t '(any any)))) (if (and lE469b@ls/false (apply (lambda (lE469d@p? lE469e@n) (and (eq? (lE31e0@syntax->datum lE469d@p?) '>=) (lE45ca@subversion? lE469e@n))) lE469b@ls/false)) (apply (lambda (lE46a1@p? lE46a2@n) (lambda (lE46a5@x) (>= lE46a5@x (lE31e0@syntax->datum lE46a2@n)))) lE469b@ls/false) (let ((lE46a7@t lE4699@t)) (let ((lE46a9@ls/false (lE30fa@syntax-dispatch lE46a7@t '_))) (if lE46a9@ls/false (apply (lambda () (lE31da@syntax-violation 'import '"invalid sub-version spec" lE45c7@spec lE464b@x*)) lE46a9@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE46a7@t)))))))))))))))))))))))) (lE45ce@version-pred (lambda (lE45fb@x*) (let ((lE45fd@t lE45fb@x*)) (let ((lE45ff@ls/false (lE30fa@syntax-dispatch lE45fd@t '()))) (if lE45ff@ls/false (apply (lambda () (lambda (lE4601@x) '#t)) lE45ff@ls/false) (let ((lE4603@t lE45fd@t)) (let ((lE4605@ls/false (lE30fa@syntax-dispatch lE4603@t '(any . each-any)))) (if (and lE4605@ls/false (apply (lambda (lE4607@c lE4608@ver*) (eq? (lE31e0@syntax->datum lE4607@c) 'and)) lE4605@ls/false)) (apply (lambda (lE460b@c lE460c@ver*) (let ((lE460f@p* (map lE45ce@version-pred lE460c@ver*))) (lambda (lE4611@x) (for-all (lambda (lE4613@p) (lE4613@p lE4611@x)) lE460f@p*)))) lE4605@ls/false) (let ((lE4615@t lE4603@t)) (let ((lE4617@ls/false (lE30fa@syntax-dispatch lE4615@t '(any . each-any)))) (if (and lE4617@ls/false (apply (lambda (lE4619@c lE461a@ver*) (eq? (lE31e0@syntax->datum lE4619@c) 'or)) lE4617@ls/false)) (apply (lambda (lE461d@c lE461e@ver*) (let ((lE4621@p* (map lE45ce@version-pred lE461e@ver*))) (lambda (lE4623@x) (exists (lambda (lE4625@p) (lE4625@p lE4623@x)) lE4621@p*)))) lE4617@ls/false) (let ((lE4627@t lE4615@t)) (let ((lE4629@ls/false (lE30fa@syntax-dispatch lE4627@t '(any any)))) (if (and lE4629@ls/false (apply (lambda (lE462b@c lE462c@ver) (eq? (lE31e0@syntax->datum lE462b@c) 'not)) lE4629@ls/false)) (apply (lambda (lE462f@c lE4630@ver) (let ((lE4633@p (lE45ce@version-pred lE4630@ver))) (lambda (lE4635@x) (not (lE4633@p lE4635@x))))) lE4629@ls/false) (let ((lE4637@t lE4627@t)) (let ((lE4639@ls/false (lE30fa@syntax-dispatch lE4637@t 'each-any))) (if lE4639@ls/false (apply (lambda (lE463b@sub*) (let ((lE463d@p* (map lE45cc@subversion-pred lE463b@sub*))) (lambda (lE463f@x) (let lE4645@f ((lE4641@p* lE463d@p*) (lE4642@x lE463f@x)) (if (null? lE4641@p*) '#t (if (null? lE4642@x) '#f (and ((car lE4641@p*) (car lE4642@x)) (lE4645@f (cdr lE4641@p*) (cdr lE4642@x))))))))) lE4639@ls/false) (let ((lE4647@t lE4637@t)) (let ((lE4649@ls/false (lE30fa@syntax-dispatch lE4647@t '_))) (if lE4649@ls/false (apply (lambda () (lE31da@syntax-violation 'import '"invalid version spec" lE45c7@spec lE45fb@x*)) lE4649@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE4647@t)))))))))))))))))))))) (let lE45d1@f ((lE45cf@x lE45c7@spec)) (let ((lE45d3@t lE45cf@x)) (let ((lE45d5@ls/false (lE30fa@syntax-dispatch lE45d3@t '(each-any)))) (if lE45d5@ls/false (apply (lambda (lE45d7@version-spec*) (values '() (lE45ce@version-pred lE45d7@version-spec*))) lE45d5@ls/false) (let ((lE45d9@t lE45d3@t)) (let ((lE45db@ls/false (lE30fa@syntax-dispatch lE45d9@t '(any . any)))) (if (and lE45db@ls/false (apply (lambda (lE45dd@x lE45de@x*) (lE44fc@idsyn? lE45dd@x)) lE45db@ls/false)) (apply (lambda (lE45e1@x lE45e2@x*) (call-with-values (lambda () (lE45d1@f lE45e2@x*)) (lambda (lE45e9@lE45e6 lE45ea@lE45e8) (let ((lE45ed@pred lE45ea@lE45e8) (lE45ee@name lE45e9@lE45e6)) (values (cons (lE31e0@syntax->datum lE45e1@x) lE45ee@name) lE45ed@pred))))) lE45db@ls/false) (let ((lE45f1@t lE45d9@t)) (let ((lE45f3@ls/false (lE30fa@syntax-dispatch lE45f1@t '()))) (if lE45f3@ls/false (apply (lambda () (values '() (lambda (lE45f5@x) '#t))) lE45f3@ls/false) (let ((lE45f7@t lE45f1@t)) (let ((lE45f9@ls/false (lE30fa@syntax-dispatch lE45f7@t '_))) (if lE45f9@ls/false (apply (lambda () (lE31da@syntax-violation '#f '"invalid import spec" lE45c7@spec)) lE45f9@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE45f7@t))))))))))))))))) (lE450c@import-library (lambda (lE45b7@spec*) (call-with-values (lambda () (lE450a@parse-library-name lE45b7@spec*)) (lambda (lE45bd@lE45ba lE45be@lE45bc) (let ((lE45c1@pred lE45be@lE45bc) (lE45c2@name lE45bd@lE45ba)) (begin (if (null? lE45c2@name) (lE31da@syntax-violation 'import '"empty library name" lE45b7@spec*) (void)) (let ((lE45c5@lib (lE2d08@lE2b4f@find-library-by-name lE45c2@name))) (begin (if (not lE45c5@lib) (lE31da@syntax-violation 'import '"cannot find library with required name" lE45c2@name) (void)) (if (not (lE45c1@pred (lE2ce2@lE2b03@library-version lE45c5@lib))) (lE31da@syntax-violation 'import '"library does not satisfy version specification" lE45b7@spec* lE45c5@lib) (void)) ((lE3166@imp-collector) lE45c5@lib) (lE2cea@lE2b13@library-subst lE45c5@lib))))))))) (lE450e@get-import (lambda (lE4529@spec) (let ((lE452b@t lE4529@spec)) (let ((lE452d@ls/false (lE30fa@syntax-dispatch lE452b@t '(any . each-any)))) (if (and lE452d@ls/false (apply (lambda (lE452f@x lE4530@x*) (not (memq (lE31e0@syntax->datum lE452f@x) '(for rename except only prefix library)))) lE452d@ls/false)) (apply (lambda (lE4533@x lE4534@x*) (lE450c@import-library (cons lE4533@x lE4534@x*))) lE452d@ls/false) (let ((lE4537@t lE452b@t)) (let ((lE4539@ls/false (lE30fa@syntax-dispatch lE4537@t '(any any . #(each (any any)))))) (if (and lE4539@ls/false (apply (lambda (lE453b@rename lE453c@isp lE453d@old* lE453e@new*) (and (eq? (lE31e0@syntax->datum lE453b@rename) 'rename) (for-all lE44fc@idsyn? lE453d@old*) (for-all lE44fc@idsyn? lE453e@new*))) lE4539@ls/false)) (apply (lambda (lE4543@rename lE4544@isp lE4545@old* lE4546@new*) (let ((lE454b@subst (lE450e@get-import lE4544@isp)) (lE454c@old* (map lE31e0@syntax->datum lE4545@old*)) (lE454d@new* (map lE31e0@syntax->datum lE4546@new*))) (let ((lE4551@old-label* (lE4504@find* lE454c@old* lE454b@subst))) (let ((lE4553@subst (lE4506@rem* lE454c@old* lE454b@subst))) (lE4500@merge-substs (map cons lE454d@new* lE4551@old-label*) lE4553@subst))))) lE4539@ls/false) (let ((lE4555@t lE4537@t)) (let ((lE4557@ls/false (lE30fa@syntax-dispatch lE4555@t '(any any . each-any)))) (if (and lE4557@ls/false (apply (lambda (lE4559@except lE455a@isp lE455b@sym*) (and (eq? (lE31e0@syntax->datum lE4559@except) 'except) (for-all lE44fc@idsyn? lE455b@sym*))) lE4557@ls/false)) (apply (lambda (lE455f@except lE4560@isp lE4561@sym*) (let ((lE4565@subst (lE450e@get-import lE4560@isp))) (lE4506@rem* (map lE31e0@syntax->datum lE4561@sym*) lE4565@subst))) lE4557@ls/false) (let ((lE4567@t lE4555@t)) (let ((lE4569@ls/false (lE30fa@syntax-dispatch lE4567@t '(any any . each-any)))) (if (and lE4569@ls/false (apply (lambda (lE456b@only lE456c@isp lE456d@sym*) (and (eq? (lE31e0@syntax->datum lE456b@only) 'only) (for-all lE44fc@idsyn? lE456d@sym*))) lE4569@ls/false)) (apply (lambda (lE4571@only lE4572@isp lE4573@sym*) (let ((lE4577@subst (lE450e@get-import lE4572@isp)) (lE4578@sym* (map lE31e0@syntax->datum lE4573@sym*))) (let ((lE457b@sym* (lE4508@remove-dups lE4578@sym*))) (let ((lE457d@lab* (lE4504@find* lE457b@sym* lE4577@subst))) (map cons lE457b@sym* lE457d@lab*))))) lE4569@ls/false) (let ((lE457f@t lE4567@t)) (let ((lE4581@ls/false (lE30fa@syntax-dispatch lE457f@t '(any any any)))) (if (and lE4581@ls/false (apply (lambda (lE4583@prefix lE4584@isp lE4585@p) (and (eq? (lE31e0@syntax->datum lE4583@prefix) 'prefix) (lE44fc@idsyn? lE4585@p))) lE4581@ls/false)) (apply (lambda (lE4589@prefix lE458a@isp lE458b@p) (let ((lE458f@subst (lE450e@get-import lE458a@isp)) (lE4590@prefix (symbol->string (lE31e0@syntax->datum lE458b@p)))) (map (lambda (lE4593@x) (cons (string->symbol (string-append lE4590@prefix (symbol->string (car lE4593@x)))) (cdr lE4593@x))) lE458f@subst))) lE4581@ls/false) (let ((lE4595@t lE457f@t)) (let ((lE4597@ls/false (lE30fa@syntax-dispatch lE4595@t '(any each-any)))) (if (and lE4597@ls/false (apply (lambda (lE4599@library lE459a@spec*) (eq? (lE31e0@syntax->datum lE4599@library) 'library)) lE4597@ls/false)) (apply (lambda (lE459d@library lE459e@spec*) (lE450c@import-library lE459e@spec*)) lE4597@ls/false) (let ((lE45a1@t lE4595@t)) (let ((lE45a3@ls/false (lE30fa@syntax-dispatch lE45a1@t '(any any . any)))) (if (and lE45a3@ls/false (apply (lambda (lE45a5@for lE45a6@isp lE45a7@rest) (eq? (lE31e0@syntax->datum lE45a5@for) 'for)) lE45a3@ls/false)) (apply (lambda (lE45ab@for lE45ac@isp lE45ad@rest) (lE450e@get-import lE45ac@isp)) lE45a3@ls/false) (let ((lE45b1@t lE45a1@t)) (let ((lE45b3@ls/false (lE30fa@syntax-dispatch lE45b1@t 'any))) (if lE45b3@ls/false (apply (lambda (lE45b5@spec) (lE31da@syntax-violation 'import '"invalid import spec" lE45b5@spec)) lE45b3@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE45b1@t))))))))))))))))))))))))))) (lE4510@add-imports! (lambda (lE4519@imp lE451a@h) (let ((lE451d@subst (lE450e@get-import lE4519@imp))) (for-each (lambda (lE451f@x) (let ((lE4521@name (car lE451f@x)) (lE4522@label (cdr lE451f@x))) (let ((lE4525@t (hashtable-ref lE451a@h lE4521@name '#f))) (if lE4525@t ((lambda (lE4527@l) (if (not (eq? lE4527@l lE4522@label)) (lE44fe@dup-error lE4521@name) (void))) lE4525@t) (hashtable-set! lE451a@h lE4521@name lE4522@label))))) lE451d@subst))))) (lambda (lE4511@imp*) (let lE4517@f ((lE4513@imp* lE4511@imp*) (lE4514@h (make-eq-hashtable))) (if (null? lE4513@imp*) (hashtable-entries lE4514@h) (begin (lE4510@add-imports! (car lE4513@imp*) lE4514@h) (lE4517@f (cdr lE4513@imp*) lE4514@h))))))) (set! lE4c33@lE315c@parse-import-spec* lE315c@parse-import-spec*) (set! lE315e@make-top-rib (lambda (lE4707@names lE4708@labels) (let ((lE470b@rib (lE2ea7@make-empty-rib))) (begin (vector-for-each (lambda (lE470d@name lE470e@label) (begin (if (not (symbol? lE470d@name)) (error 'make-top-rib '"BUG: not a symbol" lE470d@name) (void)) (lE2eab@extend-rib/nc! lE470b@rib (make-simple-struct 'stx '5 (list lE470d@name lE2e77@top-mark* '() '())) lE470e@label))) lE4707@names lE4708@labels) lE470b@rib)))) (set! lE4c34@lE315e@make-top-rib lE315e@make-top-rib) (set! lE3160@make-collector (lambda () (let ((lE4711@ls '())) (lambda lE4715 (let ((lE4716 (length lE4715))) (if (= lE4716 '0) (apply (lambda () lE4711@ls) lE4715) (if (= lE4716 '1) (apply (lambda (lE4713@x) (set! lE4711@ls (lE2e70@set-cons lE4713@x lE4711@ls))) lE4715) (error 'apply '"invalid arg count")))))))) (set! lE4c35@lE3160@make-collector lE3160@make-collector) (set! lE3162@inv-collector (lE2a43@lE2921@make-parameter (lambda lE4717@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (lE4719@x) (begin (if (not (procedure? lE4719@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" lE4719@x) (void)) lE4719@x)))) (set! lE4c36@lE3162@inv-collector lE3162@inv-collector) (set! lE3164@vis-collector (lE2a43@lE2921@make-parameter (lambda lE471b@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (lE471d@x) (begin (if (not (procedure? lE471d@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" lE471d@x) (void)) lE471d@x)))) (set! lE4c37@lE3164@vis-collector lE3164@vis-collector) (set! lE3166@imp-collector (lE2a43@lE2921@make-parameter (lambda lE471f@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (lE4721@x) (begin (if (not (procedure? lE4721@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" lE4721@x) (void)) lE4721@x)))) (set! lE4c38@lE3166@imp-collector lE3166@imp-collector) (set! lE3168@chi-library-internal (lambda (lE4723@e* lE4724@rib lE4725@top?) (call-with-values (lambda () (lE3152@chi-body* lE4723@e* '() '() '() '() '() '() '() lE4724@rib lE4725@top?)) (lambda (lE4739@lE472a lE473a@lE472c lE473b@lE472e lE473c@lE4730 lE473d@lE4732 lE473e@lE4734 lE473f@lE4736 lE4740@lE4738) (let ((lE4749@exp* lE4740@lE4738) (lE474a@_kwd* lE473f@lE4736) (lE474b@mod** lE473e@lE4734) (lE474c@rhs* lE473d@lE4732) (lE474d@lex* lE473c@lE4730) (lE474e@mr lE473b@lE472e) (lE474f@r lE473a@lE472c) (lE4750@e* lE4739@lE472a)) (values (append (apply append (reverse lE474b@mod**)) lE4750@e*) lE474f@r lE474e@mr (reverse lE474d@lex*) (reverse lE474c@rhs*) lE4749@exp*)))))) (set! lE4c39@lE3168@chi-library-internal lE3168@chi-library-internal) (set! lE316a@chi-interaction-expr (lambda (lE4759@e lE475a@rib lE475b@r) (call-with-values (lambda () (lE3152@chi-body* (list lE4759@e) lE475b@r lE475b@r '() '() '() '() '() lE475a@rib '#t)) (lambda (lE476f@lE4760 lE4770@lE4762 lE4771@lE4764 lE4772@lE4766 lE4773@lE4768 lE4774@lE476a lE4775@lE476c lE4776@lE476e) (let ((lE477f@_exp* lE4776@lE476e) (lE4780@_kwd* lE4775@lE476c) (lE4781@mod** lE4774@lE476a) (lE4782@rhs* lE4773@lE4768) (lE4783@lex* lE4772@lE4766) (lE4784@mr lE4771@lE4764) (lE4785@r lE4770@lE4762) (lE4786@e* lE476f@lE4760)) (let ((lE478f@e* (lE312a@expand-interaction-rhs*/init* (reverse lE4783@lex*) (reverse lE4782@rhs*) (append (apply append (reverse lE4781@mod**)) lE4786@e*) lE4785@r lE4784@mr))) (let ((lE4791@e (if (null? lE478f@e*) (lE2e59@lE2dba@build-void) (if (null? (cdr lE478f@e*)) (car lE478f@e*) (lE2e58@lE2db8@build-sequence '#f lE478f@e*))))) (values lE4791@e lE4785@r)))))))) (set! lE4c3a@lE316a@chi-interaction-expr lE316a@chi-interaction-expr) (set! lE316c@library-body-expander (lambda (lE4793@name lE4794@main-exp* lE4795@imp* lE4796@b* lE4797@top?) (letrec* ((lE479e@itc (lE3160@make-collector))) (let ((lE47a7@lE47a0 lE3166@imp-collector) (lE47a8@lE47a2 lE31ea@top-level-context) (lE47a9@lE47a4 lE479e@itc) (lE47aa@lE47a6 '#f)) (let ((lE47af@swap (lambda () (begin (let ((lE47b1@t (lE47a7@lE47a0))) (begin (lE47a7@lE47a0 lE47a9@lE47a4) (set! lE47a9@lE47a4 lE47b1@t))) (let ((lE47b3@t (lE47a8@lE47a2))) (begin (lE47a8@lE47a2 lE47aa@lE47a6) (set! lE47aa@lE47a6 lE47b3@t))))))) (dynamic-wind lE47af@swap (lambda () (call-with-values (lambda () (lE315c@parse-import-spec* lE4795@imp*)) (lambda (lE47b9@lE47b6 lE47ba@lE47b8) (let ((lE47bd@subst-labels lE47ba@lE47b8) (lE47be@subst-names lE47b9@lE47b6)) (let ((lE47c1@rib (lE315e@make-top-rib lE47be@subst-names lE47bd@subst-labels))) (letrec* ((lE47c4@wrap (lambda (lE483f@x) (make-simple-struct 'stx '5 (list lE483f@x lE2e77@top-mark* (list lE47c1@rib) '()))))) (let ((lE47c5@b* (map lE47c4@wrap lE4796@b*)) (lE47c6@main-exp* (map lE47c4@wrap lE4794@main-exp*)) (lE47c7@rtc (lE3160@make-collector)) (lE47c8@vtc (lE3160@make-collector))) (let ((lE47d5@lE47ce lE3162@inv-collector) (lE47d6@lE47d0 lE3164@vis-collector) (lE47d7@lE47d2 lE47c7@rtc) (lE47d8@lE47d4 lE47c8@vtc)) (let ((lE47dd@swap (lambda () (begin (let ((lE47df@t (lE47d5@lE47ce))) (begin (lE47d5@lE47ce lE47d7@lE47d2) (set! lE47d7@lE47d2 lE47df@t))) (let ((lE47e1@t (lE47d6@lE47d0))) (begin (lE47d6@lE47d0 lE47d8@lE47d4) (set! lE47d8@lE47d4 lE47e1@t))))))) (dynamic-wind lE47dd@swap (lambda () (call-with-values (lambda () (lE3168@chi-library-internal lE47c5@b* lE47c1@rib lE4797@top?)) (lambda (lE47ef@lE47e4 lE47f0@lE47e6 lE47f1@lE47e8 lE47f2@lE47ea lE47f3@lE47ec lE47f4@lE47ee) (let ((lE47fb@internal-exp* lE47f4@lE47ee) (lE47fc@rhs* lE47f3@lE47ec) (lE47fd@lex* lE47f2@lE47ea) (lE47fe@mr lE47f1@lE47e8) (lE47ff@r lE47f0@lE47e6) (lE4800@init* lE47ef@lE47e4)) (call-with-values (lambda () (lE3156@parse-exports (append lE47c6@main-exp* lE47fb@internal-exp*))) (lambda (lE480b@lE4808 lE480c@lE480a) (let ((lE480f@exp-id* lE480c@lE480a) (lE4810@exp-name* lE480b@lE4808)) (begin (lE2eaf@seal-rib! lE47c1@rib) (let ((lE4813@init* (lE3118@chi-expr* lE4800@init* lE47ff@r lE47fe@mr))) (let ((lE4815@rhs* (lE312c@chi-rhs* lE47fc@rhs* lE47ff@r lE47fe@mr))) (begin (lE2eb1@unseal-rib! lE47c1@rib) (let ((lE4817@loc* (map lE2e7d@gen-global lE47fd@lex*)) (lE4818@export-subst (lE31c4@make-export-subst lE4810@exp-name* lE480f@exp-id*))) (letrec* ((lE481c@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (lE31c6@make-export-env/macros lE47fd@lex* lE4817@loc* lE47ff@r)) (lambda (lE4823@lE481e lE4824@lE4820 lE4825@lE4822) (let ((lE4829@macro* lE4825@lE4822) (lE482a@global* lE4824@lE4820) (lE482b@export-env lE4823@lE481e)) (begin (for-each (lambda (lE482f@s) (let ((lE4831@name (car lE482f@s)) (lE4832@label (cdr lE482f@s))) (let ((lE4835@p (assq lE4832@label lE482b@export-env))) (if lE4835@p (let ((lE4837@b (cdr lE4835@p))) (let ((lE4839@type (car lE4837@b))) (if (eq? lE4839@type 'mutable) (lE31da@syntax-violation 'export lE481c@errstr lE4831@name) (void)))) (void))))) lE4818@export-subst) (let ((lE483b@invoke-body (lE2e5e@lE2dc4@build-library-letrec* '#f lE4793@name lE47fd@lex* lE4817@loc* lE4815@rhs* (if (null? lE4813@init*) (lE2e59@lE2dba@build-void) (lE2e58@lE2db8@build-sequence '#f lE4813@init*)))) (lE483c@invoke-definitions (map lE2e55@lE2d17@build-global-define (map cdr lE482a@global*)))) (values (lE479e@itc) (lE47c7@rtc) (lE47c8@vtc) (lE2e58@lE2db8@build-sequence '#f (append lE483c@invoke-definitions (list lE483b@invoke-body))) lE4829@macro* lE4818@export-subst lE482b@export-env))))))))))))))))))) lE47dd@swap)))))))))) lE47af@swap)))))) (set! lE4c3b@lE316c@library-body-expander lE316c@library-body-expander) (set! lE316e@core-library-expander (lambda (lE4841@e lE4842@verify-name) (call-with-values (lambda () (lE315a@parse-library lE4841@e)) (lambda (lE484d@lE4846 lE484e@lE4848 lE484f@lE484a lE4850@lE484c) (let ((lE4855@b* lE4850@lE484c) (lE4856@imp* lE484f@lE484a) (lE4857@exp* lE484e@lE4848) (lE4858@name* lE484d@lE4846)) (call-with-values (lambda () (lE3158@parse-library-name lE4858@name*)) (lambda (lE4861@lE485e lE4862@lE4860) (let ((lE4865@ver lE4862@lE4860) (lE4866@name lE4861@lE485e)) (begin (lE4842@verify-name lE4866@name) (call-with-values (lambda () (lE316c@library-body-expander lE4866@name lE4857@exp* lE4856@imp* lE4855@b* '#f)) (lambda (lE4877@lE486a lE4878@lE486c lE4879@lE486e lE487a@lE4870 lE487b@lE4872 lE487c@lE4874 lE487d@lE4876) (let ((lE4885@export-env lE487d@lE4876) (lE4886@export-subst lE487c@lE4874) (lE4887@visit-code lE487b@lE4872) (lE4888@invoke-code lE487a@lE4870) (lE4889@visit-req* lE4879@lE486e) (lE488a@invoke-req* lE4878@lE486c) (lE488b@imp* lE4877@lE486a)) (values lE4866@name lE4865@ver lE488b@imp* lE488a@invoke-req* lE4889@visit-req* lE4888@invoke-code lE4887@visit-code lE4886@export-subst lE4885@export-env))))))))))))) (set! lE4c3c@lE316e@core-library-expander lE316e@core-library-expander) (set! lE3170@parse-top-level-program (lambda (lE4893@e*) (let ((lE4895@t lE4893@e*)) (let ((lE4897@ls/false (lE30fa@syntax-dispatch lE4895@t '((any . each-any) . each-any)))) (if (and lE4897@ls/false (apply (lambda (lE4899@import lE489a@imp* lE489b@b*) (eq? (lE31e0@syntax->datum lE4899@import) 'import)) lE4897@ls/false)) (apply (lambda (lE489f@import lE48a0@imp* lE48a1@b*) (values lE48a0@imp* lE48a1@b*)) lE4897@ls/false) (let ((lE48a5@t lE4895@t)) (let ((lE48a7@ls/false (lE30fa@syntax-dispatch lE48a5@t '((any . any) . any)))) (if (and lE48a7@ls/false (apply (lambda (lE48a9@import lE48aa@x lE48ab@y) (eq? (lE31e0@syntax->datum lE48a9@import) 'import)) lE48a7@ls/false)) (apply (lambda (lE48af@import lE48b0@x lE48b1@y) (lE31da@syntax-violation 'expander '"invalid syntax of top-level program" (lE2eed@syntax-car lE4893@e*))) lE48a7@ls/false) (let ((lE48b5@t lE48a5@t)) (let ((lE48b7@ls/false (lE30fa@syntax-dispatch lE48b5@t '_))) (if lE48b7@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) lE48b7@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE48b5@t)))))))))))) (set! lE4c3d@lE3170@parse-top-level-program lE3170@parse-top-level-program) (set! lE3172@top-level-expander (lambda (lE48b9@e*) (call-with-values (lambda () (lE3170@parse-top-level-program lE48b9@e*)) (lambda (lE48bf@lE48bc lE48c0@lE48be) (let ((lE48c3@b* lE48c0@lE48be) (lE48c4@imp* lE48bf@lE48bc)) (call-with-values (lambda () (lE316c@library-body-expander '() '() lE48c4@imp* lE48c3@b* '#t)) (lambda (lE48d5@lE48c8 lE48d6@lE48ca lE48d7@lE48cc lE48d8@lE48ce lE48d9@lE48d0 lE48da@lE48d2 lE48db@lE48d4) (let ((lE48e3@export-env lE48db@lE48d4) (lE48e4@export-subst lE48da@lE48d2) (lE48e5@visit-code lE48d9@lE48d0) (lE48e6@invoke-code lE48d8@lE48ce) (lE48e7@visit-req* lE48d7@lE48cc) (lE48e8@invoke-req* lE48d6@lE48ca) (lE48e9@imp* lE48d5@lE48c8)) (values lE48e8@invoke-req* lE48e6@invoke-code))))))))) (set! lE4c3e@lE3172@top-level-expander lE3172@top-level-expander) (set! lE3174@rp (lE2a40@lE291b@make-record-printer 'env (lambda (lE48f1@x lE48f2@p lE48f3@wr) (display '"#<environment>" lE48f2@p)))) (set! lE4c3f@lE3174@rp lE3174@rp) (set! lE317e@env? (lambda (lE48f7@x) (and (simple-struct? lE48f7@x) (eq? (simple-struct-name lE48f7@x) 'env)))) (set! lE4c40@lE317e@env? lE317e@env?) (set! lE3180@env-names (lambda (lE48f9@x) (simple-struct-ref lE48f9@x '0))) (set! lE4c41@lE3180@env-names lE3180@env-names) (set! lE3182@set-env-names! (lambda (lE48fb@x lE48fc@val) (simple-struct-set! lE48fb@x '0 lE48fc@val))) (set! lE4c42@lE3182@set-env-names! lE3182@set-env-names!) (set! lE3184@env-labels (lambda (lE48ff@x) (simple-struct-ref lE48ff@x '1))) (set! lE4c43@lE3184@env-labels lE3184@env-labels) (set! lE3186@set-env-labels! (lambda (lE4901@x lE4902@val) (simple-struct-set! lE4901@x '1 lE4902@val))) (set! lE4c44@lE3186@set-env-labels! lE3186@set-env-labels!) (set! lE3188@env-itc (lambda (lE4905@x) (simple-struct-ref lE4905@x '2))) (set! lE4c45@lE3188@env-itc lE3188@env-itc) (set! lE318a@set-env-itc! (lambda (lE4907@x lE4908@val) (simple-struct-set! lE4907@x '2 lE4908@val))) (set! lE4c46@lE318a@set-env-itc! lE318a@set-env-itc!) (set! lE318c@dummy '3) (set! lE4c47@lE318c@dummy lE318c@dummy) (set! lE318e@rp (lE2a40@lE291b@make-record-printer 'interaction-env (lambda (lE490b@x lE490c@p lE490d@wr) (display '"#<environment>" lE490c@p)))) (set! lE4c48@lE318e@rp lE318e@rp) (set! lE3198@interaction-env? (lambda (lE4911@x) (and (simple-struct? lE4911@x) (eq? (simple-struct-name lE4911@x) 'interaction-env)))) (set! lE4c49@lE3198@interaction-env? lE3198@interaction-env?) (set! lE319a@interaction-env-rib (lambda (lE4913@x) (simple-struct-ref lE4913@x '0))) (set! lE4c4a@lE319a@interaction-env-rib lE319a@interaction-env-rib) (set! lE319c@set-interaction-env-rib! (lambda (lE4915@x lE4916@val) (simple-struct-set! lE4915@x '0 lE4916@val))) (set! lE4c4b@lE319c@set-interaction-env-rib! lE319c@set-interaction-env-rib!) (set! lE319e@interaction-env-r (lambda (lE4919@x) (simple-struct-ref lE4919@x '1))) (set! lE4c4c@lE319e@interaction-env-r lE319e@interaction-env-r) (set! lE31a0@set-interaction-env-r! (lambda (lE491b@x lE491c@val) (simple-struct-set! lE491b@x '1 lE491c@val))) (set! lE4c4d@lE31a0@set-interaction-env-r! lE31a0@set-interaction-env-r!) (set! lE31a2@interaction-env-locs (lambda (lE491f@x) (simple-struct-ref lE491f@x '2))) (set! lE4c4e@lE31a2@interaction-env-locs lE31a2@interaction-env-locs) (set! lE31a4@set-interaction-env-locs! (lambda (lE4921@x lE4922@val) (simple-struct-set! lE4921@x '2 lE4922@val))) (set! lE4c4f@lE31a4@set-interaction-env-locs! lE31a4@set-interaction-env-locs!) (set! lE31a6@dummy '3) (set! lE4c50@lE31a6@dummy lE31a6@dummy) (set! lE31a8@interaction-environment-symbols (lambda () (lE31b0@environment-symbols (lE31e8@interaction-environment)))) (set! lE4c51@lE31a8@interaction-environment-symbols lE31a8@interaction-environment-symbols) (set! lE31aa@environment-bindings (lambda (lE4925@e) (vector->list (vector-map (lambda (lE4927@name lE4928@label) (lE31ac@parse-binding (cons lE4927@name (lE2d0e@lE2b5b@imported-label->binding lE4928@label)))) (lE3180@env-names lE4925@e) (lE3184@env-labels lE4925@e))))) (set! lE4c52@lE31aa@environment-bindings lE31aa@environment-bindings) (set! lE31ac@parse-binding (lambda (lE492b@b) (cons (car lE492b@b) (let ((lE492d@t (cadr lE492b@b))) (if (memv lE492d@t '(core-prim global)) 'procedure (if (memv lE492d@t '(core-macro macro global-macro)) 'syntax (if (memv lE492d@t '($core-rtd)) 'record (if (eq? (car lE492b@b) (cadr lE492b@b)) 'syntax 'unknown)))))))) (set! lE4c53@lE31ac@parse-binding lE31ac@parse-binding) (set! lE31ae@environment? (lambda (lE492f@x) (or (lE317e@env? lE492f@x) (lE3198@interaction-env? lE492f@x)))) (set! lE4c54@lE31ae@environment? lE31ae@environment?) (set! lE31b0@environment-symbols (lambda (lE4931@x) (if (lE317e@env? lE4931@x) (vector->list (lE3180@env-names lE4931@x)) (if (lE3198@interaction-env? lE4931@x) (map values (lE2e91@rib-sym* (lE319a@interaction-env-rib lE4931@x))) (assertion-violation 'environment-symbols '"not an environment" lE4931@x))))) (set! lE4c55@lE31b0@environment-symbols lE31b0@environment-symbols) (set! lE31b2@environment (lambda lE4933@imp* (let ((lE4935@itc (lE3160@make-collector))) (let ((lE493b@lE4938 lE3166@imp-collector) (lE493c@lE493a lE4935@itc)) (let ((lE493f@swap (lambda () (let ((lE4941@t (lE493b@lE4938))) (begin (lE493b@lE4938 lE493c@lE493a) (set! lE493c@lE493a lE4941@t)))))) (dynamic-wind lE493f@swap (lambda () (call-with-values (lambda () (lE315c@parse-import-spec* lE4933@imp*)) (lambda (lE4947@lE4944 lE4948@lE4946) (let ((lE494b@subst-labels lE4948@lE4946) (lE494c@subst-names lE4947@lE4944)) (make-simple-struct 'env '4 (list lE494c@subst-names lE494b@subst-labels lE4935@itc)))))) lE493f@swap)))))) (set! lE4c56@lE31b2@environment lE31b2@environment) (set! lE31b4@null-environment (lambda (lE494f@n) (begin (if (not (eqv? lE494f@n '5)) (assertion-violation 'null-environment '"not 5" lE494f@n) (void)) (lE31b2@environment '(psyntax null-environment-5))))) (set! lE4c57@lE31b4@null-environment lE31b4@null-environment) (set! lE31b6@scheme-report-environment (lambda (lE4951@n) (begin (if (not (eqv? lE4951@n '5)) (assertion-violation 'scheme-report-environment '"not 5" lE4951@n) (void)) (lE31b2@environment '(psyntax scheme-report-environment-5))))) (set! lE4c58@lE31b6@scheme-report-environment lE31b6@scheme-report-environment) (set! lE31b8@expand (lambda (lE4953@x lE4954@env) (if (lE317e@env? lE4954@env) (let ((lE4957@rib (lE315e@make-top-rib (lE3180@env-names lE4954@env) (lE3184@env-labels lE4954@env)))) (let ((lE4959@x (make-simple-struct 'stx '5 (list lE4953@x lE2e77@top-mark* (list lE4957@rib) '()))) (lE495a@itc (lE3188@env-itc lE4954@env)) (lE495b@rtc (lE3160@make-collector)) (lE495c@vtc (lE3160@make-collector))) (let ((lE4961@x (let ((lE4973@lE4964 lE31ea@top-level-context) (lE4974@lE4966 lE3162@inv-collector) (lE4975@lE4968 lE3164@vis-collector) (lE4976@lE496a lE3166@imp-collector) (lE4977@lE496c '#f) (lE4978@lE496e lE495b@rtc) (lE4979@lE4970 lE495c@vtc) (lE497a@lE4972 lE495a@itc)) (let ((lE4983@swap (lambda () (begin (let ((lE4985@t (lE4973@lE4964))) (begin (lE4973@lE4964 lE4977@lE496c) (set! lE4977@lE496c lE4985@t))) (let ((lE4987@t (lE4974@lE4966))) (begin (lE4974@lE4966 lE4978@lE496e) (set! lE4978@lE496e lE4987@t))) (let ((lE4989@t (lE4975@lE4968))) (begin (lE4975@lE4968 lE4979@lE4970) (set! lE4979@lE4970 lE4989@t))) (let ((lE498b@t (lE4976@lE496a))) (begin (lE4976@lE496a lE497a@lE4972) (set! lE497a@lE4972 lE498b@t))))))) (dynamic-wind lE4983@swap (lambda () (lE311c@chi-expr lE4959@x '() '())) lE4983@swap))))) (begin (lE2eaf@seal-rib! lE4957@rib) (values lE4961@x (lE495b@rtc)))))) (if (lE3198@interaction-env? lE4954@env) (let ((lE498d@rib (lE319a@interaction-env-rib lE4954@env)) (lE498e@r (lE319e@interaction-env-r lE4954@env)) (lE498f@rtc (lE3160@make-collector))) (let ((lE4993@x (make-simple-struct 'stx '5 (list lE4953@x lE2e77@top-mark* (list lE498d@rib) '())))) (call-with-values (lambda () (let ((lE49a9@lE499a lE31ea@top-level-context) (lE49aa@lE499c lE3162@inv-collector) (lE49ab@lE499e lE3164@vis-collector) (lE49ac@lE49a0 lE3166@imp-collector) (lE49ad@lE49a2 lE4954@env) (lE49ae@lE49a4 lE498f@rtc) (lE49af@lE49a6 (lE3160@make-collector)) (lE49b0@lE49a8 (lE3160@make-collector))) (let ((lE49b9@swap (lambda () (begin (let ((lE49bb@t (lE49a9@lE499a))) (begin (lE49a9@lE499a lE49ad@lE49a2) (set! lE49ad@lE49a2 lE49bb@t))) (let ((lE49bd@t (lE49aa@lE499c))) (begin (lE49aa@lE499c lE49ae@lE49a4) (set! lE49ae@lE49a4 lE49bd@t))) (let ((lE49bf@t (lE49ab@lE499e))) (begin (lE49ab@lE499e lE49af@lE49a6) (set! lE49af@lE49a6 lE49bf@t))) (let ((lE49c1@t (lE49ac@lE49a0))) (begin (lE49ac@lE49a0 lE49b0@lE49a8) (set! lE49b0@lE49a8 lE49c1@t))))))) (dynamic-wind lE49b9@swap (lambda () (lE316a@chi-interaction-expr lE4993@x lE498d@rib lE498e@r)) lE49b9@swap)))) (lambda (lE49c3@lE4996 lE49c4@lE4998) (let ((lE49c7@r^ lE49c4@lE4998) (lE49c8@e lE49c3@lE4996)) (begin (lE31a0@set-interaction-env-r! lE4954@env lE49c7@r^) (values lE49c8@e (lE498f@rtc)))))))) (assertion-violation 'expand '"not an environment" lE4954@env))))) (set! lE4c59@lE31b8@expand lE31b8@expand) (set! lE31ba@eval (lambda (lE49cb@x lE49cc@env) (begin (if (not (lE31ae@environment? lE49cc@env)) (error 'eval '"not an environment" lE49cc@env) (void)) (call-with-values (lambda () (lE31b8@expand lE49cb@x lE49cc@env)) (lambda (lE49d3@lE49d0 lE49d4@lE49d2) (let ((lE49d7@invoke-req* lE49d4@lE49d2) (lE49d8@x lE49d3@lE49d0)) (begin (for-each lE2d0f@lE2b5d@invoke-library lE49d7@invoke-req*) (eval-core (lE2a99@lE2a51@expanded->core lE49d8@x))))))))) (set! lE4c5a@lE31ba@eval lE31ba@eval) (set! lE31bc@library-expander (lambda lE4a49 (let ((lE4a4a (length lE4a49))) (if (= lE4a4a '3) (apply (lambda (lE49db@x lE49dc@filename lE49dd@verify-name) (letrec* ((lE49e2@build-visit-code (lambda (lE4a37@macro*) (if (null? lE4a37@macro*) (lE2e59@lE2dba@build-void) (lE2e58@lE2db8@build-sequence '#f (map (lambda (lE4a39@x) (let ((lE4a3b@loc (car lE4a39@x)) (lE4a3c@src (cddr lE4a39@x))) (list 'set! lE4a3b@loc lE4a3c@src))) lE4a37@macro*))))) (lE49e4@visit! (lambda (lE4a2f@macro*) (for-each (lambda (lE4a31@x) (let ((lE4a33@loc (car lE4a31@x)) (lE4a34@proc (cadr lE4a31@x))) (set-symbol-value! lE4a33@loc lE4a34@proc))) lE4a2f@macro*)))) (call-with-values (lambda () (lE316e@core-library-expander lE49db@x lE49dd@verify-name)) (lambda (lE49f7@lE49e6 lE49f8@lE49e8 lE49f9@lE49ea lE49fa@lE49ec lE49fb@lE49ee lE49fc@lE49f0 lE49fd@lE49f2 lE49fe@lE49f4 lE49ff@lE49f6) (let ((lE4a09@export-env lE49ff@lE49f6) (lE4a0a@export-subst lE49fe@lE49f4) (lE4a0b@macro* lE49fd@lE49f2) (lE4a0c@invoke-code lE49fc@lE49f0) (lE4a0d@vis* lE49fb@lE49ee) (lE4a0e@inv* lE49fa@lE49ec) (lE4a0f@imp* lE49f9@lE49ea) (lE4a10@ver lE49f8@lE49e8) (lE4a11@name lE49f7@lE49e6)) (let ((lE4a1b@id (gensym)) (lE4a1c@name lE4a11@name) (lE4a1d@ver lE4a10@ver) (lE4a1e@imp* (map lE2d13@lE2b65@library-spec lE4a0f@imp*)) (lE4a1f@vis* (map lE2d13@lE2b65@library-spec lE4a0d@vis*)) (lE4a20@inv* (map lE2d13@lE2b65@library-spec lE4a0e@inv*)) (lE4a21@visit-proc (lambda () (lE49e4@visit! lE4a0b@macro*))) (lE4a22@invoke-proc (lambda () (eval-core (lE2a99@lE2a51@expanded->core lE4a0c@invoke-code)))) (lE4a23@visit-code (lE49e2@build-visit-code lE4a0b@macro*)) (lE4a24@invoke-code lE4a0c@invoke-code)) (begin (lE2d0d@lE2b59@install-library lE4a1b@id lE4a1c@name lE4a1d@ver lE4a1e@imp* lE4a1f@vis* lE4a20@inv* lE4a0a@export-subst lE4a09@export-env lE4a21@visit-proc lE4a22@invoke-proc lE4a23@visit-code lE4a24@invoke-code '#t lE49dc@filename) (values lE4a1b@id lE4a1c@name lE4a1d@ver lE4a1e@imp* lE4a1f@vis* lE4a20@inv* lE4a24@invoke-code lE4a23@visit-code lE4a0a@export-subst lE4a09@export-env)))))))) lE4a49) (if (= lE4a4a '2) (apply (lambda (lE4a3f@x lE4a40@filename) (lE31bc@library-expander lE4a3f@x lE4a40@filename (lambda (lE4a43@x) (values)))) lE4a49) (if (= lE4a4a '1) (apply (lambda (lE4a45@x) (lE31bc@library-expander lE4a45@x '#f (lambda (lE4a47@x) (values)))) lE4a49) (error 'apply '"invalid arg count"))))))) (set! lE4c5b@lE31bc@library-expander lE31bc@library-expander) (set! lE31be@boot-library-expand (lambda (lE4a4b@x) (call-with-values (lambda () (lE31bc@library-expander lE4a4b@x)) (lambda (lE4a61@lE4a4e lE4a62@lE4a50 lE4a63@lE4a52 lE4a64@lE4a54 lE4a65@lE4a56 lE4a66@lE4a58 lE4a67@lE4a5a lE4a68@lE4a5c lE4a69@lE4a5e lE4a6a@lE4a60) (let ((lE4a75@export-env lE4a6a@lE4a60) (lE4a76@export-subst lE4a69@lE4a5e) (lE4a77@visit-code lE4a68@lE4a5c) (lE4a78@invoke-code lE4a67@lE4a5a) (lE4a79@inv* lE4a66@lE4a58) (lE4a7a@vis* lE4a65@lE4a56) (lE4a7b@imp* lE4a64@lE4a54) (lE4a7c@ver lE4a63@lE4a52) (lE4a7d@name lE4a62@lE4a50) (lE4a7e@id lE4a61@lE4a4e)) (values lE4a7d@name lE4a78@invoke-code lE4a76@export-subst lE4a75@export-env)))))) (set! lE4c5c@lE31be@boot-library-expand lE31be@boot-library-expand) (set! lE31c0@rev-map-append (lambda (lE4a89@f lE4a8a@ls lE4a8b@ac) (if (null? lE4a8a@ls) lE4a8b@ac (lE31c0@rev-map-append lE4a89@f (cdr lE4a8a@ls) (cons (lE4a89@f (car lE4a8a@ls)) lE4a8b@ac))))) (set! lE4c5d@lE31c0@rev-map-append lE31c0@rev-map-append) (set! lE31c2@build-exports (lambda (lE4a8f@lex*+loc* lE4a90@init*) (lE2e58@lE2db8@build-sequence '#f (cons (lE2e59@lE2dba@build-void) (lE31c0@rev-map-append (lambda (lE4a93@x) (list 'set! (cdr lE4a93@x) (car lE4a93@x))) lE4a8f@lex*+loc* lE4a90@init*))))) (set! lE4c5e@lE31c2@build-exports lE31c2@build-exports) (set! lE31c4@make-export-subst (lambda (lE4a95@name* lE4a96@id*) (map (lambda (lE4a99@name lE4a9a@id) (let ((lE4a9d@label (lE2f09@id->label lE4a9a@id))) (begin (if (not lE4a9d@label) (lE31da@syntax-violation '#f '"cannot export unbound identifier" lE4a9a@id) (void)) (cons lE4a99@name lE4a9d@label)))) lE4a95@name* lE4a96@id*))) (set! lE4c5f@lE31c4@make-export-subst lE31c4@make-export-subst) (set! lE31c6@make-export-env/macros (lambda (lE4a9f@lex* lE4aa0@loc* lE4aa1@r) (letrec* ((lE4aa6@lookup (lambda (lE4ac3@x) (let lE4acb@f ((lE4ac5@x lE4ac3@x) (lE4ac6@lex* lE4a9f@lex*) (lE4ac7@loc* lE4aa0@loc*)) (if (pair? lE4ac6@lex*) (if (eq? lE4ac5@x (car lE4ac6@lex*)) (car lE4ac7@loc*) (lE4acb@f lE4ac5@x (cdr lE4ac6@lex*) (cdr lE4ac7@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let lE4aaf@f ((lE4aa7@r lE4aa1@r) (lE4aa8@env '()) (lE4aa9@global* '()) (lE4aaa@macro* '())) (if (null? lE4aa7@r) (values lE4aa8@env lE4aa9@global* lE4aaa@macro*) (let ((lE4ab1@x (car lE4aa7@r))) (let ((lE4ab3@label (car lE4ab1@x)) (lE4ab4@b (cdr lE4ab1@x))) (let ((lE4ab7@t (lE2f0f@binding-type lE4ab4@b))) (if (memv lE4ab7@t '(lexical)) (let ((lE4ab9@v (lE2f11@binding-value lE4ab4@b))) (let ((lE4abb@loc (lE4aa6@lookup (lE3084@lexical-var lE4ab9@v))) (lE4abc@type (if (lE3086@lexical-mutable? lE4ab9@v) 'mutable 'global))) (lE4aaf@f (cdr lE4aa7@r) (cons (cons* lE4ab3@label lE4abc@type lE4abb@loc) lE4aa8@env) (cons (cons (lE3084@lexical-var lE4ab9@v) lE4abb@loc) lE4aa9@global*) lE4aaa@macro*))) (if (memv lE4ab7@t '(local-macro)) (let ((lE4abf@loc (gensym))) (lE4aaf@f (cdr lE4aa7@r) (cons (cons* lE4ab3@label 'global-macro lE4abf@loc) lE4aa8@env) lE4aa9@global* (cons (cons lE4abf@loc (lE2f11@binding-value lE4ab4@b)) lE4aaa@macro*))) (if (memv lE4ab7@t '(local-macro!)) (let ((lE4ac1@loc (gensym))) (lE4aaf@f (cdr lE4aa7@r) (cons (cons* lE4ab3@label 'global-macro! lE4ac1@loc) lE4aa8@env) lE4aa9@global* (cons (cons lE4ac1@loc (lE2f11@binding-value lE4ab4@b)) lE4aaa@macro*))) (if (memv lE4ab7@t '($rtd $module)) (lE4aaf@f (cdr lE4aa7@r) (cons lE4ab1@x lE4aa8@env) lE4aa9@global* lE4aaa@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (lE2f0f@binding-type lE4ab4@b) (lE2f11@binding-value lE4ab4@b)))))))))))))) (set! lE4c60@lE31c6@make-export-env/macros lE31c6@make-export-env/macros) (set! lE31c8@generate-temporaries (lambda (lE4acd@ls) (let ((lE4acf@t lE4acd@ls)) (let ((lE4ad1@ls/false (lE30fa@syntax-dispatch lE4acf@t 'each-any))) (if lE4ad1@ls/false (apply (lambda (lE4ad3@ls) (map (lambda (lE4ad5@x) (make-simple-struct 'stx '5 (list (let ((lE4ad7@x (lE31e0@syntax->datum lE4ad5@x))) (if (or (symbol? lE4ad7@x) (string? lE4ad7@x)) (gensym lE4ad7@x) (gensym 't))) lE2e77@top-mark* '() '()))) lE4ad3@ls)) lE4ad1@ls/false) (let ((lE4ad9@t lE4acf@t)) (let ((lE4adb@ls/false (lE30fa@syntax-dispatch lE4ad9@t '_))) (if lE4adb@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) lE4adb@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE4ad9@t))))))))) (set! lE4c61@lE31c8@generate-temporaries lE31c8@generate-temporaries) (set! lE31ca@free-identifier=? (lambda (lE4add@x lE4ade@y) (if (lE2ef3@id? lE4add@x) (if (lE2ef3@id? lE4ade@y) (lE2ef9@free-id=? lE4add@x lE4ade@y) (assertion-violation 'free-identifier=? '"not an identifier" lE4ade@y)) (assertion-violation 'free-identifier=? '"not an identifier" lE4add@x)))) (set! lE4c62@lE31ca@free-identifier=? lE31ca@free-identifier=?) (set! lE31cc@bound-identifier=? (lambda (lE4ae1@x lE4ae2@y) (if (lE2ef3@id? lE4ae1@x) (if (lE2ef3@id? lE4ae2@y) (lE2ef7@bound-id=? lE4ae1@x lE4ae2@y) (assertion-violation 'bound-identifier=? '"not an identifier" lE4ae2@y)) (assertion-violation 'bound-identifier=? '"not an identifier" lE4ae1@x)))) (set! lE4c63@lE31cc@bound-identifier=? lE31cc@bound-identifier=?) (set! lE31ce@make-source-condition (lambda (lE4ae5@x) (letrec* ((lE4aef@lE4aea (make-record-type-descriptor '&source-information &condition-rtd 'lE4aed '#f '#f '#((immutable file-name) (immutable line)))) (lE4af1@lE4aec '#f) (lE4af3@lE4aeb (make-record-constructor-descriptor lE4aef@lE4aea &condition-rcd lE4af1@lE4aec)) (lE4af6@lE4ae9 (record-predicate lE4aef@lE4aea)) (lE4af8@make-source-condition (record-constructor lE4af3@lE4aeb)) (lE4afa@lE4ae7 (record-accessor lE4aef@lE4aea '0)) (lE4afc@lE4ae8 (record-accessor lE4aef@lE4aea '1)) (lE4afe@source-condition? (condition-predicate lE4aef@lE4aea)) (lE4b00@source-filename (condition-accessor lE4aef@lE4aea lE4afa@lE4ae7)) (lE4b02@source-character (condition-accessor lE4aef@lE4aea lE4afc@lE4ae8))) (if (and (pair? lE4ae5@x) (pair? (cdr lE4ae5@x))) (lE4af8@make-source-condition (car lE4ae5@x) (cadr lE4ae5@x)) (condition))))) (set! lE4c64@lE31ce@make-source-condition lE31ce@make-source-condition) (set! lE31d0@extract-position-condition (lambda (lE4b03@x) (lE31ce@make-source-condition (lE31d2@expression-position lE4b03@x)))) (set! lE4c65@lE31d0@extract-position-condition lE31d0@extract-position-condition) (set! lE31d2@expression-position (lambda (lE4b05@x) (and (lE2ebf@stx? lE4b05@x) (let ((lE4b07@x (lE2ec1@stx-expr lE4b05@x))) (and (lE2a37@lE2909@annotation? lE4b07@x) (lE2a38@lE290b@annotation-source lE4b07@x)))))) (set! lE4c66@lE31d2@expression-position lE31d2@expression-position) (set! lE31d4@assertion-error (lambda (lE4b09@expr lE4b0a@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list lE4b09@expr)) (lE31ce@make-source-condition lE4b0a@pos))))) (set! lE4c67@lE31d4@assertion-error lE31d4@assertion-error) (set! lE31d6@syntax-error (lambda (lE4b0d@x . lE4b0f@args) (begin (if (not (for-all string? lE4b0f@args)) (assertion-violation 'syntax-error '"invalid argument" lE4b0f@args) (void)) (raise (condition (make-message-condition (if (null? lE4b0f@args) '"invalid syntax" (apply string-append lE4b0f@args))) (make-syntax-violation (lE31e0@syntax->datum lE4b0d@x) '#f) (lE31d0@extract-position-condition lE4b0d@x)))))) (set! lE4c68@lE31d6@syntax-error lE31d6@syntax-error) (set! lE31d8@syntax-violation* (lambda (lE4b11@who lE4b12@msg lE4b13@form lE4b14@condition-object) (begin (if (not (string? lE4b12@msg)) (assertion-violation 'syntax-violation '"message is not a string" lE4b12@msg) (void)) (let ((lE4b19@who (if (or (string? lE4b11@who) (symbol? lE4b11@who)) lE4b11@who (if (not lE4b11@who) (let ((lE4b1b@t lE4b13@form)) (let ((lE4b1d@ls/false (lE30fa@syntax-dispatch lE4b1b@t 'any))) (if (and lE4b1d@ls/false (apply (lambda (lE4b1f@id) (lE2ef3@id? lE4b1f@id)) lE4b1d@ls/false)) (apply (lambda (lE4b21@id) (lE31e0@syntax->datum lE4b21@id)) lE4b1d@ls/false) (let ((lE4b23@t lE4b1b@t)) (let ((lE4b25@ls/false (lE30fa@syntax-dispatch lE4b23@t '(any . any)))) (if (and lE4b25@ls/false (apply (lambda (lE4b27@id lE4b28@rest) (lE2ef3@id? lE4b27@id)) lE4b25@ls/false)) (apply (lambda (lE4b2b@id lE4b2c@rest) (lE31e0@syntax->datum lE4b2b@id)) lE4b25@ls/false) (let ((lE4b2f@t lE4b23@t)) (let ((lE4b31@ls/false (lE30fa@syntax-dispatch lE4b2f@t '_))) (if lE4b31@ls/false (apply (lambda () '#f) lE4b31@ls/false) (lE31da@syntax-violation '#f '"invalid syntax" lE4b2f@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" lE4b11@who))))) (raise (condition (if lE4b19@who (make-who-condition lE4b19@who) (condition)) (make-message-condition lE4b12@msg) lE4b14@condition-object (lE31d0@extract-position-condition lE4b13@form))))))) (set! lE4c69@lE31d8@syntax-violation* lE31d8@syntax-violation*) (set! lE31da@syntax-violation (lambda lE4b41 (let ((lE4b42 (length lE4b41))) (if (= lE4b42 '3) (apply (lambda (lE4b33@who lE4b34@msg lE4b35@form) (lE31da@syntax-violation lE4b33@who lE4b34@msg lE4b35@form '#f)) lE4b41) (if (= lE4b42 '4) (apply (lambda (lE4b39@who lE4b3a@msg lE4b3b@form lE4b3c@subform) (lE31d8@syntax-violation* lE4b39@who lE4b3a@msg lE4b3b@form (make-syntax-violation (lE31e0@syntax->datum lE4b3b@form) (lE31e0@syntax->datum lE4b3c@subform)))) lE4b41) (error 'apply '"invalid arg count")))))) (set! lE4c6a@lE31da@syntax-violation lE31da@syntax-violation) (set! lE31dc@identifier? (lambda (lE4b43@x) (lE2ef3@id? lE4b43@x))) (set! lE4c6b@lE31dc@identifier? lE31dc@identifier?) (set! lE31de@datum->syntax (lambda (lE4b45@id lE4b46@datum) (if (lE2ef3@id? lE4b45@id) (lE2ed3@datum->stx lE4b45@id lE4b46@datum) (assertion-violation 'datum->syntax '"not an identifier" lE4b45@id)))) (set! lE4c6c@lE31de@datum->syntax lE31de@datum->syntax) (set! lE31e0@syntax->datum (lambda (lE4b49@x) (lE2f07@stx->datum lE4b49@x))) (set! lE4c6d@lE31e0@syntax->datum lE31e0@syntax->datum) (set! lE31e2@ungensym-all (lambda (lE4b4b@code) (if (pair? lE4b4b@code) (cons (lE31e2@ungensym-all (car lE4b4b@code)) (lE31e2@ungensym-all (cdr lE4b4b@code))) (if (symbol? lE4b4b@code) (ungensym lE4b4b@code) lE4b4b@code)))) (set! lE4c6e@lE31e2@ungensym-all lE31e2@ungensym-all) (set! lE31e4@compile-r6rs-top-level (lambda (lE4b4d@x*) (call-with-values (lambda () (lE3172@top-level-expander lE4b4d@x*)) (lambda (lE4b53@lE4b50 lE4b54@lE4b52) (let ((lE4b57@invoke-code lE4b54@lE4b52) (lE4b58@lib* lE4b53@lE4b50)) (lambda () (begin (for-each lE2d0f@lE2b5d@invoke-library lE4b58@lib*) (let ((lE4b5b@expanded (lE2a99@lE2a51@expanded->core lE4b57@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (lE31e2@ungensym-all lE4b5b@expanded)) (void)) (eval-core lE4b5b@expanded)))))))))) (set! lE4c6f@lE31e4@compile-r6rs-top-level lE31e4@compile-r6rs-top-level) (set! lE31e6@pre-compile-r6rs-top-level (lambda (lE4b5d@x*) (call-with-values (lambda () (lE3172@top-level-expander lE4b5d@x*)) (lambda (lE4b63@lE4b60 lE4b64@lE4b62) (let ((lE4b67@invoke-code lE4b64@lE4b62) (lE4b68@lib* lE4b63@lE4b60)) (begin (for-each lE2d0f@lE2b5d@invoke-library lE4b68@lib*) (lE2a41@lE291d@compile-core (lE2a99@lE2a51@expanded->core lE4b67@invoke-code)))))))) (set! lE4c70@lE31e6@pre-compile-r6rs-top-level lE31e6@pre-compile-r6rs-top-level) (set! lE31e8@interaction-environment (let ((lE4b6b@the-env '#f)) (lambda () (or lE4b6b@the-env (let ((lE4b6d@lib (lE2d08@lE2b4f@find-library-by-name '(mosh interaction))) (lE4b6e@rib (lE2ea7@make-empty-rib))) (begin (let ((lE4b71@subst (lE2cea@lE2b13@library-subst lE4b6d@lib))) (begin (lE2e93@set-rib-sym*! lE4b6e@rib (map car lE4b71@subst)) (lE2e97@set-rib-mark**! lE4b6e@rib (map (lambda (lE4b73@x) lE2e77@top-mark*) lE4b71@subst)) (lE2e9b@set-rib-label*! lE4b6e@rib (map cdr lE4b71@subst)))) (let ((lE4b75@env (make-simple-struct 'interaction-env '4 (list lE4b6e@rib '() '())))) (begin (set! lE4b6b@the-env lE4b75@env) lE4b75@env)))))))) (set! lE4c71@lE31e8@interaction-environment lE31e8@interaction-environment) (set! lE31ea@top-level-context (lE2a43@lE2921@make-parameter '#f)) (set! lE4c72@lE31ea@top-level-context lE31ea@top-level-context) (lE2d05@lE2b49@current-library-expander lE31bc@library-expander))
(begin (begin (lE2a96@lE2a4b@current-primitive-locations (lambda (lE51c9@x) (let ((lE51cb@t (assq lE51c9@x '((syntax-error . lE4c68@lE31d6@syntax-error) (syntax-dispatch . lE4c06@lE30fa@syntax-dispatch) (load . lE4df2@lE4c99@load) (interaction-environment . lE4c71@lE31e8@interaction-environment) (library-path . lE2cfd@lE2b39@library-path) (mosh-cache-dir . lE2a44@lE2923@mosh-cache-dir) (make-parameter . lE2a43@lE2921@make-parameter) (make-variable-transformer . lE4bc3@lE2f25@make-variable-transformer) (identifier? . lE4c6b@lE31dc@identifier?) (generate-temporaries . lE4c61@lE31c8@generate-temporaries) (free-identifier=? . lE4c62@lE31ca@free-identifier=?) (syntax->datum . lE4c6d@lE31e0@syntax->datum) (datum->syntax . lE4c6c@lE31de@datum->syntax) (bound-identifier=? . lE4c63@lE31cc@bound-identifier=?) (scheme-report-environment . lE4c58@lE31b6@scheme-report-environment) (null-environment . lE4c57@lE31b4@null-environment) (command-line . lE4def@lE4c93@command-line) (eval . lE4c5a@lE31ba@eval) (environment . lE4c56@lE31b2@environment) (syntax-violation . lE4c6a@lE31da@syntax-violation) (assertion-error . lE4c67@lE31d4@assertion-error))))) (if lE51cb@t (cdr lE51cb@t) '#f)))) (lE2d0d@lE2b59@install-library 'lE51a6 '(mosh interaction) '() '() '() '() '((regexp? . lE5166) (alist->eq-hash-table . lE5162) (format . lE515f) (string-split . lE514f) (call-process . lE5148) (set-current-directory! . lE5144) (expand-path . lE5143) (current-directory . lE5142) (%getpid . lE5141) (%spawn . lE5140) (%waitpid . lE513f) (simple-struct-name . lE513e) (simple-struct-set! . lE513d) (simple-struct-ref . lE513c) (make-simple-struct . lE513b) (simple-struct? . lE513a) (pointer-ref-c-int64 . lE5139) (pointer-ref-c-int32 . lE5138) (pointer-ref-c-int16 . lE5137) (pointer-ref-c-int8 . lE5136) (pointer-ref-c-uint64 . lE5135) (pointer-ref-c-uint32 . lE5134) (pointer-ref-c-uint16 . lE5133) (pointer-ref-c-uint8 . lE5132) (pointer-set-c-uint64! . lE5131) (pointer-set-c-uint32! . lE5130) (pointer-set-c-uint16! . lE512f) (pointer-set-c-uint8! . lE512e) (pointer-set-c-int64! . lE512d) (pointer-set-c-int32! . lE512c) (pointer-set-c-int16! . lE512b) (pointer-set-c-int8! . lE512a) (pointer-set-c-pointer! . lE5129) (pointer-set-c-double! . lE5128) (pointer-set-c-float! . lE5127) (pointer-set-c-long-long! . lE5126) (pointer-set-c-long! . lE5125) (pointer-set-c-int! . lE5124) (pointer-set-c-short! . lE5123) (pointer-set-c-char! . lE5122) (pointer-ref-c-pointer . lE5121) (pointer-ref-c-double . lE5120) (pointer-ref-c-float . lE511f) (pointer-ref-c-unsigned-long-long . lE511e) (pointer-ref-c-signed-long-long . lE511d) (pointer-ref-c-unsigned-long . lE511c) (pointer-ref-c-signed-long . lE511b) (pointer-ref-c-unsigned-int . lE511a) (pointer-ref-c-signed-int . lE5119) (pointer-ref-c-unsigned-short . lE5118) (pointer-ref-c-signed-short . lE5117) (pointer-ref-c-unsigned-char . lE5116) (pointer-ref-c-signed-char . lE5115) (pointer->integer . lE5114) (integer->pointer . lE5113) (pointer? . lE5112) (shared-errno . lE5111) (%ffi-supported? . lE510c) (%ffi-pointer->string . lE510b) (%ffi-call . lE510a) (%ffi-lookup . lE5109) (%ffi-open . lE5108) (null-terminated-utf8->string . lE5107) (null-terminated-bytevector->string . lE5106) (%exec . lE5105) (%fork . lE5104) (%pipe . lE5103) (p . lE5102) (whereis . lE50e6) (register . lE50e5) (vm-join! . lE50e4) (vm-set-value! . lE50e3) (vm? . lE50e2) (main-vm? . lE50e1) (vm-eval . lE50e0) (vm-self . lE50df) (vm-start! . lE50de) (make-vm . lE50dd) (mutex-try-lock! . lE50dc) (mutex-unlock! . lE50db) (mutex-lock! . lE50da) (mutex? . lE50d9) (make-mutex . lE50d8) (condition-variable-notify-all! . lE50d7) (condition-variable-notify! . lE50d6) (condition-variable-wait! . lE50d5) (make-condition-variable . lE50d4) (write/ss . lE50d3) (string-upcase . lE50ba) (string-titlecase . lE50b9) (string-normalize-nfkd . lE50b8) (string-normalize-nfkc . lE50b7) (string-normalize-nfd . lE50b6) (string-normalize-nfc . lE50b5) (string-foldcase . lE50b4) (string-downcase . lE50b3) (string-ci>? . lE50b2) (string-ci>=? . lE50b1) (string-ci=? . lE50b0) (string-ci<? . lE50af) (string-ci<=? . lE50ae) (char-whitespace? . lE50ad) (char-upper-case? . lE50ac) (char-title-case? . lE50ab) (char-numeric? . lE50aa) (char-lower-case? . lE50a9) (char-general-category . lE50a8) (char-upcase . lE50a7) (char-titlecase . lE50a6) (char-foldcase . lE50a5) (char-downcase . lE50a4) (char-ci>? . lE50a3) (char-ci>=? . lE50a2) (char-ci=? . lE50a1) (char-ci<? . lE50a0) (char-ci<=? . lE509f) (char-alphabetic? . lE509e) (make-variable-transformer . lE2f24) (identifier? . lE31db) (generate-temporaries . lE31c7) (free-identifier=? . lE31c9) (syntax->datum . lE31df) (datum->syntax . lE31dd) (bound-identifier=? . lE31cb) (record-type-descriptor? . lE509d) (record-predicate . lE509c) (record-mutator . lE509b) (record-constructor . lE509a) (record-accessor . lE5099) (make-record-type-descriptor . lE5098) (make-record-constructor-descriptor . lE5097) (record? . lE5096) (record-type-uid . lE5095) (record-type-sealed? . lE5094) (record-type-parent . lE5093) (record-type-opaque? . lE5092) (record-type-name . lE5091) (record-type-generative? . lE5090) (record-type-field-names . lE508f) (record-rtd . lE508e) (record-field-mutable? . lE508d) (delete-file . lE508c) (file-exists? . lE508b) (vector-sort! . lE508a) (vector-sort . lE5089) (list-sort . lE5088) (symbol-hash . lE5087) (string-ci-hash . lE5086) (string-hash . lE5085) (equal-hash . lE5084) (hashtable-equivalence-function . lE5083) (make-hashtable . lE5082) (hashtable-hash-function . lE5081) (make-eqv-hashtable . lE5080) (make-eq-hashtable . lE507f) (hashtable? . lE507e) (hashtable-update! . lE507d) (hashtable-size . lE507c) (hashtable-set! . lE507b) (hashtable-ref . lE507a) (hashtable-mutable? . lE5079) (hashtable-keys . lE5078) (hashtable-entries . lE5077) (hashtable-delete! . lE5076) (hashtable-copy . lE5075) (hashtable-contains? . lE5074) (hashtable-clear! . lE5073) (call-with-output-file . lE5072) (call-with-input-file . lE5071) (write-char . lE5070) (write . lE506f) (with-output-to-file . lE506e) (with-input-from-file . lE506d) (read-char . lE506c) (read . lE506b) (peek-char . lE506a) (open-output-file . lE5069) (open-input-file . lE5068) (newline . lE5067) (display . lE5066) (close-output-port . lE5065) (close-input-port . lE5064) (eof-object? . lE5063) (eof-object . lE5062) (current-error-port . lE5061) (current-output-port . lE5060) (current-input-port . lE505f) (output-port? . lE505e) (input-port? . lE505d) (utf-8-codec . lE505c) (utf-16-codec . lE505b) (transcoder-error-handling-mode . lE505a) (transcoder-eol-style . lE5059) (transcoder-codec . lE5058) (transcoded-port . lE5057) (textual-port? . lE5056) (string->bytevector . lE5055) (standard-output-port . lE5054) (standard-input-port . lE5053) (standard-error-port . lE5052) (set-port-position! . lE5051) (put-u8 . lE5050) (put-string . lE504f) (put-datum . lE504e) (put-char . lE504d) (put-bytevector . lE504c) (port? . lE504b) (port-transcoder . lE504a) (port-position . lE5049) (port-has-set-port-position!? . lE5048) (port-has-port-position? . lE5047) (port-eof? . lE5046) (output-port-buffer-mode . lE5045) (open-string-output-port . lE5044) (open-string-input-port . lE5043) (open-file-output-port . lE5042) (open-file-input/output-port . lE5041) (open-file-input-port . lE5040) (open-bytevector-output-port . lE503f) (open-bytevector-input-port . lE503e) (native-transcoder . lE503d) (native-eol-style . lE503c) (make-transcoder . lE503b) (latin-1-codec . lE503a) (make-i/o-write-error . lE5039) (make-i/o-read-error . lE5038) (make-i/o-port-error . lE5037) (make-i/o-invalid-position-error . lE5036) (make-i/o-filename-error . lE5035) (make-i/o-file-protection-error . lE5034) (make-i/o-file-is-read-only-error . lE5033) (make-i/o-file-does-not-exist-error . lE5032) (make-i/o-file-already-exists-error . lE5031) (make-i/o-error . lE5030) (make-i/o-encoding-error . lE502f) (make-i/o-decoding-error . lE502e) (make-custom-textual-output-port . lE502d) (make-custom-textual-input/output-port . lE502c) (make-custom-textual-input-port . lE502b) (make-custom-binary-output-port . lE502a) (make-custom-binary-input/output-port . lE5029) (make-custom-binary-input-port . lE5028) (make-bytevector . lE5027) (lookahead-u8 . lE5026) (lookahead-char . lE5025) (i/o-write-error? . lE5024) (i/o-read-error? . lE5023) (i/o-port-error? . lE5022) (i/o-invalid-position-error? . lE5021) (i/o-filename-error? . lE5020) (i/o-file-protection-error? . lE501f) (i/o-file-is-read-only-error? . lE501e) (i/o-file-does-not-exist-error? . lE501d) (i/o-file-already-exists-error? . lE501c) (i/o-error? . lE501b) (i/o-error-position . lE501a) (i/o-error-port . lE5019) (i/o-error-filename . lE5018) (i/o-encoding-error? . lE5017) (i/o-encoding-error-char . lE5016) (i/o-decoding-error? . lE5015) (get-u8 . lE5014) (get-string-n! . lE5013) (get-string-n . lE5012) (get-string-all . lE5011) (get-line . lE5010) (get-datum . lE500f) (get-char . lE500e) (get-bytevector-some . lE500d) (get-bytevector-n! . lE500c) (get-bytevector-n . lE500b) (get-bytevector-all . lE500a) (flush-output-port . lE5009) (close-port . lE5008) (exit . lE5000) (command-line . lE4c92) (string-fill! . lE4fff) (string-set! . lE4ffe) (set-cdr! . lE4ffd) (set-car! . lE4ffc) (remove . lE4ffb) (remv . lE4ffa) (remp . lE4ff9) (remq . lE4ff8) (partition . lE4ff7) (memv . lE4ff6) (memq . lE4ff5) (memp . lE4ff4) (member . lE4ff3) (exists . lE4ff2) (for-all . lE4ff1) (fold-right . lE4ff0) (fold-left . lE4fef) (find . lE4fee) (filter . lE4fed) (cons* . lE4fec) (assv . lE4feb) (assq . lE4fea) (assp . lE4fe9) (assoc . lE4fe8) (call-with-string-output-port . lE4fe7) (call-with-port . lE4fe6) (call-with-bytevector-output-port . lE4fe5) (bytevector->string . lE4fe4) (buffer-mode? . lE4fe3) (binary-port? . lE4fe2) (with-exception-handler . lE4fe1) (raise-continuable . lE4fe0) (raise . lE4fdf) (eval . lE31b9) (environment . lE31b1) (make-enumeration . lE4fde) (enum-set=? . lE4fdd) (enum-set-universe . lE4fdc) (enum-set-union . lE4fdb) (enum-set-subset? . lE4fda) (enum-set-projection . lE4fd9) (enum-set-member? . lE4fd8) (enum-set-intersection . lE4fd7) (enum-set-indexer . lE4fd6) (enum-set-difference . lE4fd5) (enum-set-constructor . lE4fd4) (enum-set-complement . lE4fd3) (enum-set->list . lE4fd2) (who-condition? . lE4fd1) (warning? . lE4fd0) (violation? . lE4fcf) (undefined-violation? . lE4fce) (syntax-violation? . lE4fcd) (syntax-violation-subform . lE4fcc) (syntax-violation-form . lE4fcb) (syntax-violation . lE31d9) (simple-conditions . lE4fca) (serious-condition? . lE4fc9) (non-continuable-violation? . lE4fc8) (message-condition? . lE4fc7) (make-who-condition . lE4fc6) (make-warning . lE4fc5) (make-violation . lE4fc4) (make-undefined-violation . lE4fc3) (make-syntax-violation . lE4fc2) (make-serious-condition . lE4fc1) (make-non-continuable-violation . lE4fc0) (make-message-condition . lE4fbf) (make-lexical-violation . lE4fbe) (make-irritants-condition . lE4fbd) (make-implementation-restriction-violation . lE4fbc) (make-error . lE4fbb) (make-assertion-violation . lE4fba) (lexical-violation? . lE4fb9) (irritants-condition? . lE4fb8) (implementation-restriction-violation? . lE4fb7) (error? . lE4fb6) (condition-who . lE4fb5) (condition-predicate . lE4fb4) (condition-message . lE4fb3) (condition-irritants . lE4fb2) (condition-accessor . lE4fb1) (condition . lE4fb0) (assertion-violation? . lE4faf) (condition? . lE4fae) (utf32->string . lE4fad) (utf16->string . lE4fac) (utf8->string . lE4fab) (uint-list->bytevector . lE4faa) (u8-list->bytevector . lE4fa9) (string->utf8 . lE4fa8) (string->utf32 . lE4fa7) (string->utf16 . lE4fa6) (sint-list->bytevector . lE4fa5) (native-endianness . lE4fa4) (bytevector? . lE4fa3) (bytevector=? . lE4fa2) (bytevector-uint-set! . lE4fa1) (bytevector-uint-ref . lE4fa0) (bytevector-u8-set! . lE4f9f) (bytevector-u8-ref . lE4f9e) (bytevector-u64-set! . lE4f9d) (bytevector-u64-ref . lE4f9c) (bytevector-u64-native-set! . lE4f9b) (bytevector-u64-native-ref . lE4f9a) (bytevector-u32-set! . lE4f99) (bytevector-u32-ref . lE4f98) (bytevector-u32-native-set! . lE4f97) (bytevector-u32-native-ref . lE4f96) (bytevector-u16-set! . lE4f95) (bytevector-u16-ref . lE4f94) (bytevector-u16-native-set! . lE4f93) (bytevector-u16-native-ref . lE4f92) (bytevector-sint-set! . lE4f91) (bytevector-sint-ref . lE4f90) (bytevector-s8-set! . lE4f8f) (bytevector-s8-ref . lE4f8e) (bytevector-s64-set! . lE4f8d) (bytevector-s64-ref . lE4f8c) (bytevector-s64-native-set! . lE4f8b) (bytevector-s64-native-ref . lE4f8a) (bytevector-s32-set! . lE4f89) (bytevector-s32-ref . lE4f88) (bytevector-s32-native-set! . lE4f87) (bytevector-s32-native-ref . lE4f86) (bytevector-s16-set! . lE4f85) (bytevector-s16-ref . lE4f84) (bytevector-s16-native-set! . lE4f83) (bytevector-s16-native-ref . lE4f82) (bytevector-length . lE4f81) (bytevector-ieee-single-ref . lE4f80) (bytevector-ieee-single-set! . lE4f7f) (bytevector-ieee-single-native-set! . lE4f7e) (bytevector-ieee-single-native-ref . lE4f7d) (bytevector-ieee-double-set! . lE4f7c) (bytevector-ieee-double-ref . lE4f7b) (bytevector-ieee-double-native-set! . lE4f7a) (bytevector-ieee-double-native-ref . lE4f79) (bytevector-fill! . lE4f78) (bytevector-copy! . lE4f77) (bytevector-copy . lE4f76) (bytevector->uint-list . lE4f75) (bytevector->u8-list . lE4f74) (bytevector->sint-list . lE4f73) (no-nans-violation? . lE4f72) (no-infinities-violation? . lE4f71) (make-no-nans-violation . lE4f70) (make-no-infinities-violation . lE4f6f) (real->flonum . lE4f6e) (flzero? . lE4f6d) (fltruncate . lE4f6c) (fltan . lE4f6b) (flsqrt . lE4f6a) (flsin . lE4f69) (flround . lE4f68) (flpositive? . lE4f67) (flonum? . lE4f66) (flodd? . lE4f65) (flnumerator . lE4f64) (flnegative? . lE4f63) (flnan? . lE4f62) (flmod0 . lE4f61) (flmod . lE4f60) (flmin . lE4f5f) (flmax . lE4f5e) (fllog . lE4f5d) (flinteger? . lE4f5c) (flinfinite? . lE4f5b) (flfloor . lE4f5a) (flfinite? . lE4f59) (flexpt . lE4f58) (flexp . lE4f57) (fleven? . lE4f56) (fldiv0-and-mod0 . lE4f55) (fldiv0 . lE4f54) (fldiv-and-mod . lE4f53) (fldiv . lE4f52) (fldenominator . lE4f51) (flcos . lE4f50) (flceiling . lE4f4f) (flatan . lE4f4e) (flasin . lE4f4d) (flacos . lE4f4c) (flabs . lE4f4b) (fl>? . lE4f4a) (fl>=? . lE4f49) (fl=? . lE4f48) (fl<? . lE4f47) (fl<=? . lE4f46) (fl/ . lE4f45) (fl- . lE4f44) (fl+ . lE4f43) (fl* . lE4f42) (fixnum->flonum . lE4f41) (fxzero? . lE4f40) (fxxor . lE4f3f) (fxrotate-bit-field . lE4f3e) (fxreverse-bit-field . lE4f3d) (fxpositive? . lE4f3c) (fxodd? . lE4f3b) (fxnot . lE4f3a) (fxnegative? . lE4f39) (fxmod0 . lE4f38) (fxmod . lE4f37) (fxmin . lE4f36) (fxmax . lE4f35) (fxlength . lE4f34) (fxior . lE4f33) (fxif . lE4f32) (fxfirst-bit-set . lE4f31) (fxeven? . lE4f30) (fxdiv0-and-mod0 . lE4f2f) (fxdiv0 . lE4f2e) (fxdiv-and-mod . lE4f2d) (fxdiv . lE4f2c) (fxcopy-bit-field . lE4f2b) (fxcopy-bit . lE4f2a) (fxbit-set? . lE4f29) (fxbit-field . lE4f28) (fxbit-count . lE4f27) (fxarithmetic-shift-right . lE4f26) (fxarithmetic-shift-left . lE4f25) (fxarithmetic-shift . lE4f24) (fxand . lE4f23) (fx>? . lE4f22) (fx>=? . lE4f21) (fx=? . lE4f20) (fx<? . lE4f1f) (fx<=? . lE4f1e) (fx-/carry . lE4f1d) (fx- . lE4f1c) (fx+/carry . lE4f1b) (fx+ . lE4f1a) (fx*/carry . lE4f19) (fx* . lE4f18) (greatest-fixnum . lE4f17) (least-fixnum . lE4f16) (fixnum-width . lE4f15) (fixnum? . lE4f14) (bitwise-rotate-bit-field . lE4f13) (bitwise-reverse-bit-field . lE4f12) (bitwise-length . lE4f11) (bitwise-if . lE4f10) (bitwise-first-bit-set . lE4f0f) (bitwise-copy-bit-field . lE4f0e) (bitwise-copy-bit . lE4f0d) (bitwise-bit-set? . lE4f0c) (bitwise-bit-field . lE4f0b) (bitwise-bit-count . lE4f0a) (bitwise-xor . lE4f09) (bitwise-ior . lE4f08) (bitwise-and . lE4f07) (bitwise-not . lE4f06) (bitwise-arithmetic-shift-right . lE4f05) (bitwise-arithmetic-shift-left . lE4f04) (bitwise-arithmetic-shift . lE4f03) (zero? . lE4f02) (vector? . lE4f01) (vector-set! . lE4f00) (vector-ref . lE4eff) (vector-map . lE4efe) (vector-length . lE4efd) (vector-for-each . lE4efc) (vector-fill! . lE4efb) (vector->list . lE4efa) (vector . lE4ef9) (values . lE4ef8) (truncate . lE4ef7) (tan . lE4ef6) (symbol? . lE4ef5) (symbol=? . lE4ef4) (symbol->string . lE4ef3) (substring . lE4ef2) (string? . lE4ef1) (string>? . lE4ef0) (string>=? . lE4eef) (string=? . lE4eee) (string<? . lE4eed) (string<=? . lE4eec) (string-ref . lE4eeb) (string-length . lE4eea) (string-for-each . lE4ee9) (string-copy . lE4ee8) (string-append . lE4ee7) (string->symbol . lE4ee6) (string->number . lE4ee5) (string->list . lE4ee4) (string . lE4ee3) (sqrt . lE4ee2) (sin . lE4ee1) (round . lE4ee0) (reverse . lE4edf) (real? . lE4ede) (real-valued? . lE4edd) (real-part . lE4edc) (rationalize . lE4edb) (rational? . lE4eda) (rational-valued? . lE4ed9) (procedure? . lE4ed8) (positive? . lE4ed7) (pair? . lE4ed6) (odd? . lE4ed5) (numerator . lE4ed4) (number? . lE4ed3) (number->string . lE4ed2) (null? . lE4ed1) (not . lE4ed0) (negative? . lE4ecf) (nan? . lE4ece) (min . lE4ecd) (max . lE4ecc) (map . lE4ecb) (make-vector . lE4eca) (make-string . lE4ec9) (make-rectangular . lE4ec8) (make-polar . lE4ec7) (magnitude . lE4ec6) (log . lE4ec5) (list? . lE4ec4) (list-tail . lE4ec3) (list-ref . lE4ec2) (list->vector . lE4ec1) (list->string . lE4ec0) (list . lE4ebf) (length . lE4ebe) (lcm . lE4ebd) (integer? . lE4ebc) (integer-valued? . lE4ebb) (integer->char . lE4eba) (infinite? . lE4eb9) (inexact? . lE4eb8) (inexact . lE4eb7) (imag-part . lE4eb6) (gcd . lE4eb5) (for-each . lE4eb4) (floor . lE4eb3) (finite? . lE4eb2) (expt . lE4eb1) (exp . lE4eb0) (exact? . lE4eaf) (exact-integer-sqrt . lE4eae) (exact . lE4ead) (even? . lE4eac) (error . lE4eab) (eqv? . lE4eaa) (equal? . lE4ea9) (eq? . lE4ea8) (dynamic-wind . lE4ea7) (div0-and-mod0 . lE4ea6) (mod0 . lE4ea5) (div0 . lE4ea4) (div-and-mod . lE4ea3) (mod . lE4ea2) (div . lE4ea1) (denominator . lE4ea0) (cos . lE4e9f) (cons . lE4e9e) (complex? . lE4e9d) (char? . lE4e9c) (char>? . lE4e9b) (char>=? . lE4e9a) (char=? . lE4e99) (char<? . lE4e98) (char<=? . lE4e97) (char->integer . lE4e96) (ceiling . lE4e95) (call-with-values . lE4e94) (call/cc . lE4e93) (call-with-current-continuation . lE4e92) (cddddr . lE4e91) (cdddar . lE4e90) (cddadr . lE4e8f) (cddaar . lE4e8e) (cdaddr . lE4e8d) (cdadar . lE4e8c) (cdaadr . lE4e8b) (cdaaar . lE4e8a) (cadddr . lE4e89) (caddar . lE4e88) (cadadr . lE4e87) (cadaar . lE4e86) (caaddr . lE4e85) (caadar . lE4e84) (caaadr . lE4e83) (caaaar . lE4e82) (cdddr . lE4e81) (cddar . lE4e80) (cdadr . lE4e7f) (cdaar . lE4e7e) (caddr . lE4e7d) (cadar . lE4e7c) (caadr . lE4e7b) (caaar . lE4e7a) (cddr . lE4e79) (cdar . lE4e78) (cadr . lE4e77) (caar . lE4e76) (cdr . lE4e75) (car . lE4e74) (boolean? . lE4e73) (boolean=? . lE4e72) (atan . lE4e71) (assertion-violation . lE4e70) (asin . lE4e6f) (apply . lE4e6e) (append . lE4e6d) (angle . lE4e6c) (acos . lE4e6b) (abs . lE4e6a) (/ . lE4e69) (* . lE4e68) (- . lE4e67) (+ . lE4e66) (>= . lE4e65) (> . lE4e64) (= . lE4e63) (<= . lE4e62) (< . lE4e61) (library . lE4e60) (&no-nans . lE4e5f) (&no-infinities . lE4e5e) (&i/o-encoding . lE4e5d) (&i/o-decoding . lE4e5c) (&i/o-port . lE4e5b) (&i/o-file-does-not-exist . lE4e5a) (&i/o-file-already-exists . lE4e59) (&i/o-file-is-read-only . lE4e58) (&i/o-file-protection . lE4e57) (&i/o-filename . lE4e56) (&i/o-invalid-position . lE4e55) (&i/o-write . lE4e54) (&i/o-read . lE4e53) (&i/o . lE4e52) (&undefined . lE4e51) (&syntax . lE4e50) (&lexical . lE4e4f) (&implementation-restriction . lE4e4e) (&non-continuable . lE4e4d) (&who . lE4e4c) (&irritants . lE4e4b) (&assertion . lE4e4a) (&violation . lE4e49) (&error . lE4e48) (&serious . lE4e47) (&warning . lE4e46) (&message . lE4e45) (&condition . lE4e44) (define-condition-type . lE4e43) (define-enumeration . lE4e42) (define-record-type . lE4e41) (parent-rtd . lE4e40) (nongenerative . lE4e3f) (opaque . lE4e3e) (sealed . lE4e3d) (protocol . lE4e3c) (parent . lE4e3b) (immutable . lE4e3a) (mutable . lE4e39) (fields . lE4e38) (error-handling-mode . lE4e37) (file-options . lE4e36) (buffer-mode . lE4e35) (eol-style . lE4e34) (guard . lE4e33) (unsyntax-splicing . lE4e30) (unsyntax . lE4e2f) (unquote-splicing . lE4e2e) (unquote . lE4e2d) (_ . lE4e2c) (else . lE4e2b) (=> . lE4e2a) (... . lE4e29) (assert . lE4e28) (endianness . lE4e27) (time . lE4e25) (do . lE4e24) (cond . lE4e23) (let* . lE4e22) (let*-values . lE4e21) (let-values . lE4e20) (identifier-syntax . lE4e1f) (with-syntax . lE4e1e) (quasisyntax . lE4e1d) (quasiquote . lE4e1c) (syntax-rules . lE4e1b) (include . lE4e1a) (record-constructor-descriptor . lE4e18) (record-type-descriptor . lE4e17) (case . lE4e16) (unless . lE4e14) (when . lE4e13) (or . lE4e12) (and . lE4e11) (if . lE4e10) (let . lE4e0f) (letrec* . lE4e0e) (letrec . lE4e0d) (case-lambda . lE4e0b) (lambda . lE4e0a) (syntax . lE4e09) (syntax-case . lE4e08) (quote . lE4e07) (letrec-syntax . lE4e05) (let-syntax . lE4e04) (set! . lE4e03) (import . lE4e02) (begin . lE4e01) (define-syntax . lE4dff) (define . lE4dfe)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51a7 '(psyntax null-environment-5) '() '() '() '() '((make-promise . lE5001) (unquote-splicing . lE4e2e) (unquote . lE4e2d) (_ . lE4e2c) (else . lE4e2b) (=> . lE4e2a) (... . lE4e29) (delay . lE4e26) (do . lE4e24) (cond . lE4e23) (let* . lE4e22) (quasiquote . lE4e1c) (syntax-rules . lE4e1b) (case . lE4e16) (or . lE4e12) (and . lE4e11) (if . lE4e10) (let . lE4e0f) (letrec . lE4e0d) (lambda . lE4e0a) (quote . lE4e07) (letrec-syntax . lE4e05) (let-syntax . lE4e04) (set! . lE4e03) (begin . lE4e01) (define-syntax . lE4dff) (define . lE4dfe)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51a8 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . lE50b2) (string-ci>=? . lE50b1) (string-ci=? . lE50b0) (string-ci<? . lE50af) (string-ci<=? . lE50ae) (char-whitespace? . lE50ad) (char-upper-case? . lE50ac) (char-numeric? . lE50aa) (char-lower-case? . lE50a9) (char-upcase . lE50a7) (char-downcase . lE50a4) (char-ci>? . lE50a3) (char-ci>=? . lE50a2) (char-ci=? . lE50a1) (char-ci<? . lE50a0) (char-ci<=? . lE509f) (char-alphabetic? . lE509e) (call-with-output-file . lE5072) (call-with-input-file . lE5071) (write-char . lE5070) (write . lE506f) (with-output-to-file . lE506e) (with-input-from-file . lE506d) (read-char . lE506c) (read . lE506b) (peek-char . lE506a) (open-output-file . lE5069) (open-input-file . lE5068) (newline . lE5067) (display . lE5066) (close-output-port . lE5065) (close-input-port . lE5064) (eof-object . lE5062) (current-output-port . lE5060) (current-input-port . lE505f) (output-port? . lE505e) (input-port? . lE505d) (scheme-report-environment . lE31b5) (quotient . lE5007) (null-environment . lE31b3) (remainder . lE5006) (modulo . lE5005) (inexact->exact . lE5004) (force . lE5003) (exact->inexact . lE5002) (make-promise . lE5001) (string-fill! . lE4fff) (string-set! . lE4ffe) (set-cdr! . lE4ffd) (set-car! . lE4ffc) (memv . lE4ff6) (memq . lE4ff5) (member . lE4ff3) (assv . lE4feb) (assq . lE4fea) (assoc . lE4fe8) (eval . lE31b9) (zero? . lE4f02) (vector? . lE4f01) (vector-set! . lE4f00) (vector-ref . lE4eff) (vector-length . lE4efd) (vector-fill! . lE4efb) (vector->list . lE4efa) (vector . lE4ef9) (values . lE4ef8) (truncate . lE4ef7) (tan . lE4ef6) (symbol? . lE4ef5) (symbol->string . lE4ef3) (substring . lE4ef2) (string? . lE4ef1) (string>? . lE4ef0) (string>=? . lE4eef) (string=? . lE4eee) (string<? . lE4eed) (string<=? . lE4eec) (string-ref . lE4eeb) (string-length . lE4eea) (string-copy . lE4ee8) (string-append . lE4ee7) (string->symbol . lE4ee6) (string->number . lE4ee5) (string->list . lE4ee4) (string . lE4ee3) (sqrt . lE4ee2) (sin . lE4ee1) (round . lE4ee0) (reverse . lE4edf) (real? . lE4ede) (real-part . lE4edc) (rationalize . lE4edb) (rational? . lE4eda) (procedure? . lE4ed8) (positive? . lE4ed7) (pair? . lE4ed6) (odd? . lE4ed5) (numerator . lE4ed4) (number? . lE4ed3) (number->string . lE4ed2) (not . lE4ed0) (negative? . lE4ecf) (min . lE4ecd) (max . lE4ecc) (map . lE4ecb) (make-vector . lE4eca) (make-string . lE4ec9) (make-rectangular . lE4ec8) (make-polar . lE4ec7) (magnitude . lE4ec6) (log . lE4ec5) (list? . lE4ec4) (list-tail . lE4ec3) (list-ref . lE4ec2) (list->vector . lE4ec1) (list->string . lE4ec0) (list . lE4ebf) (length . lE4ebe) (lcm . lE4ebd) (integer? . lE4ebc) (integer->char . lE4eba) (inexact? . lE4eb8) (imag-part . lE4eb6) (gcd . lE4eb5) (for-each . lE4eb4) (floor . lE4eb3) (expt . lE4eb1) (exp . lE4eb0) (exact? . lE4eaf) (even? . lE4eac) (eqv? . lE4eaa) (equal? . lE4ea9) (eq? . lE4ea8) (dynamic-wind . lE4ea7) (denominator . lE4ea0) (cos . lE4e9f) (cons . lE4e9e) (complex? . lE4e9d) (char? . lE4e9c) (char>? . lE4e9b) (char>=? . lE4e9a) (char=? . lE4e99) (char<? . lE4e98) (char<=? . lE4e97) (char->integer . lE4e96) (ceiling . lE4e95) (call-with-values . lE4e94) (call-with-current-continuation . lE4e92) (cddddr . lE4e91) (cdddar . lE4e90) (cddadr . lE4e8f) (cddaar . lE4e8e) (cdaddr . lE4e8d) (cdadar . lE4e8c) (cdaadr . lE4e8b) (cdaaar . lE4e8a) (cadddr . lE4e89) (caddar . lE4e88) (cadadr . lE4e87) (cadaar . lE4e86) (caaddr . lE4e85) (caadar . lE4e84) (caaadr . lE4e83) (caaaar . lE4e82) (cdddr . lE4e81) (cddar . lE4e80) (cdadr . lE4e7f) (cdaar . lE4e7e) (caddr . lE4e7d) (cadar . lE4e7c) (caadr . lE4e7b) (caaar . lE4e7a) (cddr . lE4e79) (cdar . lE4e78) (cadr . lE4e77) (caar . lE4e76) (cdr . lE4e75) (car . lE4e74) (boolean? . lE4e73) (atan . lE4e71) (asin . lE4e6f) (apply . lE4e6e) (append . lE4e6d) (angle . lE4e6c) (acos . lE4e6b) (abs . lE4e6a) (/ . lE4e69) (* . lE4e68) (- . lE4e67) (+ . lE4e66) (>= . lE4e65) (> . lE4e64) (= . lE4e63) (<= . lE4e62) (< . lE4e61) (unquote-splicing . lE4e2e) (unquote . lE4e2d) (else . lE4e2b) (=> . lE4e2a) (... . lE4e29) (delay . lE4e26) (do . lE4e24) (cond . lE4e23) (let* . lE4e22) (quasiquote . lE4e1c) (syntax-rules . lE4e1b) (case . lE4e16) (or . lE4e12) (and . lE4e11) (if . lE4e10) (let . lE4e0f) (letrec . lE4e0d) (lambda . lE4e0a) (quote . lE4e07) (letrec-syntax . lE4e05) (let-syntax . lE4e04) (set! . lE4e03) (begin . lE4e01) (define-syntax . lE4dff) (define . lE4dfe)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51a9 '(psyntax modules) '() '() '() '() '((module . lE4e00)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51aa '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51ab '(rnrs) '(6) '() '() '() '((regexp? . lE5166) (string-upcase . lE50ba) (string-titlecase . lE50b9) (string-normalize-nfkd . lE50b8) (string-normalize-nfkc . lE50b7) (string-normalize-nfd . lE50b6) (string-normalize-nfc . lE50b5) (string-foldcase . lE50b4) (string-downcase . lE50b3) (string-ci>? . lE50b2) (string-ci>=? . lE50b1) (string-ci=? . lE50b0) (string-ci<? . lE50af) (string-ci<=? . lE50ae) (char-whitespace? . lE50ad) (char-upper-case? . lE50ac) (char-title-case? . lE50ab) (char-numeric? . lE50aa) (char-lower-case? . lE50a9) (char-general-category . lE50a8) (char-upcase . lE50a7) (char-titlecase . lE50a6) (char-foldcase . lE50a5) (char-downcase . lE50a4) (char-ci>? . lE50a3) (char-ci>=? . lE50a2) (char-ci=? . lE50a1) (char-ci<? . lE50a0) (char-ci<=? . lE509f) (char-alphabetic? . lE509e) (make-variable-transformer . lE2f24) (identifier? . lE31db) (generate-temporaries . lE31c7) (free-identifier=? . lE31c9) (syntax->datum . lE31df) (datum->syntax . lE31dd) (bound-identifier=? . lE31cb) (record-type-descriptor? . lE509d) (record-predicate . lE509c) (record-mutator . lE509b) (record-constructor . lE509a) (record-accessor . lE5099) (make-record-type-descriptor . lE5098) (make-record-constructor-descriptor . lE5097) (record? . lE5096) (record-type-uid . lE5095) (record-type-sealed? . lE5094) (record-type-parent . lE5093) (record-type-opaque? . lE5092) (record-type-name . lE5091) (record-type-generative? . lE5090) (record-type-field-names . lE508f) (record-rtd . lE508e) (record-field-mutable? . lE508d) (delete-file . lE508c) (file-exists? . lE508b) (vector-sort! . lE508a) (vector-sort . lE5089) (list-sort . lE5088) (symbol-hash . lE5087) (string-ci-hash . lE5086) (string-hash . lE5085) (equal-hash . lE5084) (hashtable-equivalence-function . lE5083) (make-hashtable . lE5082) (hashtable-hash-function . lE5081) (make-eqv-hashtable . lE5080) (make-eq-hashtable . lE507f) (hashtable? . lE507e) (hashtable-update! . lE507d) (hashtable-size . lE507c) (hashtable-set! . lE507b) (hashtable-ref . lE507a) (hashtable-mutable? . lE5079) (hashtable-keys . lE5078) (hashtable-entries . lE5077) (hashtable-delete! . lE5076) (hashtable-copy . lE5075) (hashtable-contains? . lE5074) (hashtable-clear! . lE5073) (call-with-output-file . lE5072) (call-with-input-file . lE5071) (write-char . lE5070) (write . lE506f) (with-output-to-file . lE506e) (with-input-from-file . lE506d) (read-char . lE506c) (read . lE506b) (peek-char . lE506a) (open-output-file . lE5069) (open-input-file . lE5068) (newline . lE5067) (display . lE5066) (close-output-port . lE5065) (close-input-port . lE5064) (eof-object? . lE5063) (eof-object . lE5062) (current-error-port . lE5061) (current-output-port . lE5060) (current-input-port . lE505f) (output-port? . lE505e) (input-port? . lE505d) (utf-8-codec . lE505c) (utf-16-codec . lE505b) (transcoder-error-handling-mode . lE505a) (transcoder-eol-style . lE5059) (transcoder-codec . lE5058) (transcoded-port . lE5057) (textual-port? . lE5056) (string->bytevector . lE5055) (standard-output-port . lE5054) (standard-input-port . lE5053) (standard-error-port . lE5052) (set-port-position! . lE5051) (put-u8 . lE5050) (put-string . lE504f) (put-datum . lE504e) (put-char . lE504d) (put-bytevector . lE504c) (port? . lE504b) (port-transcoder . lE504a) (port-position . lE5049) (port-has-set-port-position!? . lE5048) (port-has-port-position? . lE5047) (port-eof? . lE5046) (output-port-buffer-mode . lE5045) (open-string-output-port . lE5044) (open-string-input-port . lE5043) (open-file-output-port . lE5042) (open-file-input/output-port . lE5041) (open-file-input-port . lE5040) (open-bytevector-output-port . lE503f) (open-bytevector-input-port . lE503e) (native-transcoder . lE503d) (native-eol-style . lE503c) (make-transcoder . lE503b) (latin-1-codec . lE503a) (make-i/o-write-error . lE5039) (make-i/o-read-error . lE5038) (make-i/o-port-error . lE5037) (make-i/o-invalid-position-error . lE5036) (make-i/o-filename-error . lE5035) (make-i/o-file-protection-error . lE5034) (make-i/o-file-is-read-only-error . lE5033) (make-i/o-file-does-not-exist-error . lE5032) (make-i/o-file-already-exists-error . lE5031) (make-i/o-error . lE5030) (make-i/o-encoding-error . lE502f) (make-i/o-decoding-error . lE502e) (make-custom-textual-output-port . lE502d) (make-custom-textual-input/output-port . lE502c) (make-custom-textual-input-port . lE502b) (make-custom-binary-output-port . lE502a) (make-custom-binary-input/output-port . lE5029) (make-custom-binary-input-port . lE5028) (make-bytevector . lE5027) (lookahead-u8 . lE5026) (lookahead-char . lE5025) (i/o-write-error? . lE5024) (i/o-read-error? . lE5023) (i/o-port-error? . lE5022) (i/o-invalid-position-error? . lE5021) (i/o-filename-error? . lE5020) (i/o-file-protection-error? . lE501f) (i/o-file-is-read-only-error? . lE501e) (i/o-file-does-not-exist-error? . lE501d) (i/o-file-already-exists-error? . lE501c) (i/o-error? . lE501b) (i/o-error-position . lE501a) (i/o-error-port . lE5019) (i/o-error-filename . lE5018) (i/o-encoding-error? . lE5017) (i/o-encoding-error-char . lE5016) (i/o-decoding-error? . lE5015) (get-u8 . lE5014) (get-string-n! . lE5013) (get-string-n . lE5012) (get-string-all . lE5011) (get-line . lE5010) (get-datum . lE500f) (get-char . lE500e) (get-bytevector-some . lE500d) (get-bytevector-n! . lE500c) (get-bytevector-n . lE500b) (get-bytevector-all . lE500a) (flush-output-port . lE5009) (close-port . lE5008) (exit . lE5000) (command-line . lE4c92) (remove . lE4ffb) (remv . lE4ffa) (remp . lE4ff9) (remq . lE4ff8) (partition . lE4ff7) (memv . lE4ff6) (memq . lE4ff5) (memp . lE4ff4) (member . lE4ff3) (exists . lE4ff2) (for-all . lE4ff1) (fold-right . lE4ff0) (fold-left . lE4fef) (find . lE4fee) (filter . lE4fed) (cons* . lE4fec) (assv . lE4feb) (assq . lE4fea) (assp . lE4fe9) (assoc . lE4fe8) (call-with-string-output-port . lE4fe7) (call-with-port . lE4fe6) (call-with-bytevector-output-port . lE4fe5) (bytevector->string . lE4fe4) (buffer-mode? . lE4fe3) (binary-port? . lE4fe2) (with-exception-handler . lE4fe1) (raise-continuable . lE4fe0) (raise . lE4fdf) (make-enumeration . lE4fde) (enum-set=? . lE4fdd) (enum-set-universe . lE4fdc) (enum-set-union . lE4fdb) (enum-set-subset? . lE4fda) (enum-set-projection . lE4fd9) (enum-set-member? . lE4fd8) (enum-set-intersection . lE4fd7) (enum-set-indexer . lE4fd6) (enum-set-difference . lE4fd5) (enum-set-constructor . lE4fd4) (enum-set-complement . lE4fd3) (enum-set->list . lE4fd2) (who-condition? . lE4fd1) (warning? . lE4fd0) (violation? . lE4fcf) (undefined-violation? . lE4fce) (syntax-violation? . lE4fcd) (syntax-violation-subform . lE4fcc) (syntax-violation-form . lE4fcb) (syntax-violation . lE31d9) (simple-conditions . lE4fca) (serious-condition? . lE4fc9) (non-continuable-violation? . lE4fc8) (message-condition? . lE4fc7) (make-who-condition . lE4fc6) (make-warning . lE4fc5) (make-violation . lE4fc4) (make-undefined-violation . lE4fc3) (make-syntax-violation . lE4fc2) (make-serious-condition . lE4fc1) (make-non-continuable-violation . lE4fc0) (make-message-condition . lE4fbf) (make-lexical-violation . lE4fbe) (make-irritants-condition . lE4fbd) (make-implementation-restriction-violation . lE4fbc) (make-error . lE4fbb) (make-assertion-violation . lE4fba) (lexical-violation? . lE4fb9) (irritants-condition? . lE4fb8) (implementation-restriction-violation? . lE4fb7) (error? . lE4fb6) (condition-who . lE4fb5) (condition-predicate . lE4fb4) (condition-message . lE4fb3) (condition-irritants . lE4fb2) (condition-accessor . lE4fb1) (condition . lE4fb0) (assertion-violation? . lE4faf) (condition? . lE4fae) (utf32->string . lE4fad) (utf16->string . lE4fac) (utf8->string . lE4fab) (uint-list->bytevector . lE4faa) (u8-list->bytevector . lE4fa9) (string->utf8 . lE4fa8) (string->utf32 . lE4fa7) (string->utf16 . lE4fa6) (sint-list->bytevector . lE4fa5) (native-endianness . lE4fa4) (bytevector? . lE4fa3) (bytevector=? . lE4fa2) (bytevector-uint-set! . lE4fa1) (bytevector-uint-ref . lE4fa0) (bytevector-u8-set! . lE4f9f) (bytevector-u8-ref . lE4f9e) (bytevector-u64-set! . lE4f9d) (bytevector-u64-ref . lE4f9c) (bytevector-u64-native-set! . lE4f9b) (bytevector-u64-native-ref . lE4f9a) (bytevector-u32-set! . lE4f99) (bytevector-u32-ref . lE4f98) (bytevector-u32-native-set! . lE4f97) (bytevector-u32-native-ref . lE4f96) (bytevector-u16-set! . lE4f95) (bytevector-u16-ref . lE4f94) (bytevector-u16-native-set! . lE4f93) (bytevector-u16-native-ref . lE4f92) (bytevector-sint-set! . lE4f91) (bytevector-sint-ref . lE4f90) (bytevector-s8-set! . lE4f8f) (bytevector-s8-ref . lE4f8e) (bytevector-s64-set! . lE4f8d) (bytevector-s64-ref . lE4f8c) (bytevector-s64-native-set! . lE4f8b) (bytevector-s64-native-ref . lE4f8a) (bytevector-s32-set! . lE4f89) (bytevector-s32-ref . lE4f88) (bytevector-s32-native-set! . lE4f87) (bytevector-s32-native-ref . lE4f86) (bytevector-s16-set! . lE4f85) (bytevector-s16-ref . lE4f84) (bytevector-s16-native-set! . lE4f83) (bytevector-s16-native-ref . lE4f82) (bytevector-length . lE4f81) (bytevector-ieee-single-ref . lE4f80) (bytevector-ieee-single-set! . lE4f7f) (bytevector-ieee-single-native-set! . lE4f7e) (bytevector-ieee-single-native-ref . lE4f7d) (bytevector-ieee-double-set! . lE4f7c) (bytevector-ieee-double-ref . lE4f7b) (bytevector-ieee-double-native-set! . lE4f7a) (bytevector-ieee-double-native-ref . lE4f79) (bytevector-fill! . lE4f78) (bytevector-copy! . lE4f77) (bytevector-copy . lE4f76) (bytevector->uint-list . lE4f75) (bytevector->u8-list . lE4f74) (bytevector->sint-list . lE4f73) (no-nans-violation? . lE4f72) (no-infinities-violation? . lE4f71) (make-no-nans-violation . lE4f70) (make-no-infinities-violation . lE4f6f) (real->flonum . lE4f6e) (flzero? . lE4f6d) (fltruncate . lE4f6c) (fltan . lE4f6b) (flsqrt . lE4f6a) (flsin . lE4f69) (flround . lE4f68) (flpositive? . lE4f67) (flonum? . lE4f66) (flodd? . lE4f65) (flnumerator . lE4f64) (flnegative? . lE4f63) (flnan? . lE4f62) (flmod0 . lE4f61) (flmod . lE4f60) (flmin . lE4f5f) (flmax . lE4f5e) (fllog . lE4f5d) (flinteger? . lE4f5c) (flinfinite? . lE4f5b) (flfloor . lE4f5a) (flfinite? . lE4f59) (flexpt . lE4f58) (flexp . lE4f57) (fleven? . lE4f56) (fldiv0-and-mod0 . lE4f55) (fldiv0 . lE4f54) (fldiv-and-mod . lE4f53) (fldiv . lE4f52) (fldenominator . lE4f51) (flcos . lE4f50) (flceiling . lE4f4f) (flatan . lE4f4e) (flasin . lE4f4d) (flacos . lE4f4c) (flabs . lE4f4b) (fl>? . lE4f4a) (fl>=? . lE4f49) (fl=? . lE4f48) (fl<? . lE4f47) (fl<=? . lE4f46) (fl/ . lE4f45) (fl- . lE4f44) (fl+ . lE4f43) (fl* . lE4f42) (fixnum->flonum . lE4f41) (fxzero? . lE4f40) (fxxor . lE4f3f) (fxrotate-bit-field . lE4f3e) (fxreverse-bit-field . lE4f3d) (fxpositive? . lE4f3c) (fxodd? . lE4f3b) (fxnot . lE4f3a) (fxnegative? . lE4f39) (fxmod0 . lE4f38) (fxmod . lE4f37) (fxmin . lE4f36) (fxmax . lE4f35) (fxlength . lE4f34) (fxior . lE4f33) (fxif . lE4f32) (fxfirst-bit-set . lE4f31) (fxeven? . lE4f30) (fxdiv0-and-mod0 . lE4f2f) (fxdiv0 . lE4f2e) (fxdiv-and-mod . lE4f2d) (fxdiv . lE4f2c) (fxcopy-bit-field . lE4f2b) (fxcopy-bit . lE4f2a) (fxbit-set? . lE4f29) (fxbit-field . lE4f28) (fxbit-count . lE4f27) (fxarithmetic-shift-right . lE4f26) (fxarithmetic-shift-left . lE4f25) (fxarithmetic-shift . lE4f24) (fxand . lE4f23) (fx>? . lE4f22) (fx>=? . lE4f21) (fx=? . lE4f20) (fx<? . lE4f1f) (fx<=? . lE4f1e) (fx-/carry . lE4f1d) (fx- . lE4f1c) (fx+/carry . lE4f1b) (fx+ . lE4f1a) (fx*/carry . lE4f19) (fx* . lE4f18) (greatest-fixnum . lE4f17) (least-fixnum . lE4f16) (fixnum-width . lE4f15) (fixnum? . lE4f14) (bitwise-rotate-bit-field . lE4f13) (bitwise-reverse-bit-field . lE4f12) (bitwise-length . lE4f11) (bitwise-if . lE4f10) (bitwise-first-bit-set . lE4f0f) (bitwise-copy-bit-field . lE4f0e) (bitwise-copy-bit . lE4f0d) (bitwise-bit-set? . lE4f0c) (bitwise-bit-field . lE4f0b) (bitwise-bit-count . lE4f0a) (bitwise-xor . lE4f09) (bitwise-ior . lE4f08) (bitwise-and . lE4f07) (bitwise-not . lE4f06) (bitwise-arithmetic-shift-right . lE4f05) (bitwise-arithmetic-shift-left . lE4f04) (bitwise-arithmetic-shift . lE4f03) (zero? . lE4f02) (vector? . lE4f01) (vector-set! . lE4f00) (vector-ref . lE4eff) (vector-map . lE4efe) (vector-length . lE4efd) (vector-for-each . lE4efc) (vector-fill! . lE4efb) (vector->list . lE4efa) (vector . lE4ef9) (values . lE4ef8) (truncate . lE4ef7) (tan . lE4ef6) (symbol? . lE4ef5) (symbol=? . lE4ef4) (symbol->string . lE4ef3) (substring . lE4ef2) (string? . lE4ef1) (string>? . lE4ef0) (string>=? . lE4eef) (string=? . lE4eee) (string<? . lE4eed) (string<=? . lE4eec) (string-ref . lE4eeb) (string-length . lE4eea) (string-for-each . lE4ee9) (string-copy . lE4ee8) (string-append . lE4ee7) (string->symbol . lE4ee6) (string->number . lE4ee5) (string->list . lE4ee4) (string . lE4ee3) (sqrt . lE4ee2) (sin . lE4ee1) (round . lE4ee0) (reverse . lE4edf) (real? . lE4ede) (real-valued? . lE4edd) (real-part . lE4edc) (rationalize . lE4edb) (rational? . lE4eda) (rational-valued? . lE4ed9) (procedure? . lE4ed8) (positive? . lE4ed7) (pair? . lE4ed6) (odd? . lE4ed5) (numerator . lE4ed4) (number? . lE4ed3) (number->string . lE4ed2) (null? . lE4ed1) (not . lE4ed0) (negative? . lE4ecf) (nan? . lE4ece) (min . lE4ecd) (max . lE4ecc) (map . lE4ecb) (make-vector . lE4eca) (make-string . lE4ec9) (make-rectangular . lE4ec8) (make-polar . lE4ec7) (magnitude . lE4ec6) (log . lE4ec5) (list? . lE4ec4) (list-tail . lE4ec3) (list-ref . lE4ec2) (list->vector . lE4ec1) (list->string . lE4ec0) (list . lE4ebf) (length . lE4ebe) (lcm . lE4ebd) (integer? . lE4ebc) (integer-valued? . lE4ebb) (integer->char . lE4eba) (infinite? . lE4eb9) (inexact? . lE4eb8) (inexact . lE4eb7) (imag-part . lE4eb6) (gcd . lE4eb5) (for-each . lE4eb4) (floor . lE4eb3) (finite? . lE4eb2) (expt . lE4eb1) (exp . lE4eb0) (exact? . lE4eaf) (exact-integer-sqrt . lE4eae) (exact . lE4ead) (even? . lE4eac) (error . lE4eab) (eqv? . lE4eaa) (equal? . lE4ea9) (eq? . lE4ea8) (dynamic-wind . lE4ea7) (div0-and-mod0 . lE4ea6) (mod0 . lE4ea5) (div0 . lE4ea4) (div-and-mod . lE4ea3) (mod . lE4ea2) (div . lE4ea1) (denominator . lE4ea0) (cos . lE4e9f) (cons . lE4e9e) (complex? . lE4e9d) (char? . lE4e9c) (char>? . lE4e9b) (char>=? . lE4e9a) (char=? . lE4e99) (char<? . lE4e98) (char<=? . lE4e97) (char->integer . lE4e96) (ceiling . lE4e95) (call-with-values . lE4e94) (call/cc . lE4e93) (call-with-current-continuation . lE4e92) (cddddr . lE4e91) (cdddar . lE4e90) (cddadr . lE4e8f) (cddaar . lE4e8e) (cdaddr . lE4e8d) (cdadar . lE4e8c) (cdaadr . lE4e8b) (cdaaar . lE4e8a) (cadddr . lE4e89) (caddar . lE4e88) (cadadr . lE4e87) (cadaar . lE4e86) (caaddr . lE4e85) (caadar . lE4e84) (caaadr . lE4e83) (caaaar . lE4e82) (cdddr . lE4e81) (cddar . lE4e80) (cdadr . lE4e7f) (cdaar . lE4e7e) (caddr . lE4e7d) (cadar . lE4e7c) (caadr . lE4e7b) (caaar . lE4e7a) (cddr . lE4e79) (cdar . lE4e78) (cadr . lE4e77) (caar . lE4e76) (cdr . lE4e75) (car . lE4e74) (boolean? . lE4e73) (boolean=? . lE4e72) (atan . lE4e71) (assertion-violation . lE4e70) (asin . lE4e6f) (apply . lE4e6e) (append . lE4e6d) (angle . lE4e6c) (acos . lE4e6b) (abs . lE4e6a) (/ . lE4e69) (* . lE4e68) (- . lE4e67) (+ . lE4e66) (>= . lE4e65) (> . lE4e64) (= . lE4e63) (<= . lE4e62) (< . lE4e61) (&no-nans . lE4e5f) (&no-infinities . lE4e5e) (&i/o-encoding . lE4e5d) (&i/o-decoding . lE4e5c) (&i/o-port . lE4e5b) (&i/o-file-does-not-exist . lE4e5a) (&i/o-file-already-exists . lE4e59) (&i/o-file-is-read-only . lE4e58) (&i/o-file-protection . lE4e57) (&i/o-filename . lE4e56) (&i/o-invalid-position . lE4e55) (&i/o-write . lE4e54) (&i/o-read . lE4e53) (&i/o . lE4e52) (&undefined . lE4e51) (&syntax . lE4e50) (&lexical . lE4e4f) (&implementation-restriction . lE4e4e) (&non-continuable . lE4e4d) (&who . lE4e4c) (&irritants . lE4e4b) (&assertion . lE4e4a) (&violation . lE4e49) (&error . lE4e48) (&serious . lE4e47) (&warning . lE4e46) (&message . lE4e45) (&condition . lE4e44) (define-condition-type . lE4e43) (define-enumeration . lE4e42) (define-record-type . lE4e41) (parent-rtd . lE4e40) (nongenerative . lE4e3f) (opaque . lE4e3e) (sealed . lE4e3d) (protocol . lE4e3c) (parent . lE4e3b) (immutable . lE4e3a) (mutable . lE4e39) (fields . lE4e38) (error-handling-mode . lE4e37) (file-options . lE4e36) (buffer-mode . lE4e35) (eol-style . lE4e34) (guard . lE4e33) (unsyntax-splicing . lE4e30) (unsyntax . lE4e2f) (unquote-splicing . lE4e2e) (unquote . lE4e2d) (_ . lE4e2c) (else . lE4e2b) (=> . lE4e2a) (... . lE4e29) (assert . lE4e28) (endianness . lE4e27) (do . lE4e24) (cond . lE4e23) (let* . lE4e22) (let*-values . lE4e21) (let-values . lE4e20) (identifier-syntax . lE4e1f) (with-syntax . lE4e1e) (quasisyntax . lE4e1d) (quasiquote . lE4e1c) (syntax-rules . lE4e1b) (record-constructor-descriptor . lE4e18) (record-type-descriptor . lE4e17) (case . lE4e16) (unless . lE4e14) (when . lE4e13) (or . lE4e12) (and . lE4e11) (if . lE4e10) (let . lE4e0f) (letrec* . lE4e0e) (letrec . lE4e0d) (case-lambda . lE4e0b) (lambda . lE4e0a) (syntax . lE4e09) (syntax-case . lE4e08) (quote . lE4e07) (letrec-syntax . lE4e05) (let-syntax . lE4e04) (set! . lE4e03) (begin . lE4e01) (define-syntax . lE4dff) (define . lE4dfe)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51ac '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . lE31b5) (quotient . lE5007) (null-environment . lE31b3) (remainder . lE5006) (modulo . lE5005) (inexact->exact . lE5004) (force . lE5003) (exact->inexact . lE5002) (make-promise . lE5001) (delay . lE4e26)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51ad '(rnrs control) '(6) '() '() '() '((do . lE4e24) (unless . lE4e14) (when . lE4e13) (case-lambda . lE4e0b)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51ae '(rnrs eval) '(6) '() '() '() '((eval . lE31b9) (environment . lE31b1)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51af '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . lE4ffd) (set-car! . lE4ffc)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51b0 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . lE4fff) (string-set! . lE4ffe)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51b1 '(rnrs programs) '(6) '() '() '() '((exit . lE5000) (command-line . lE4c92)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51b2 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . lE2f24) (identifier? . lE31db) (generate-temporaries . lE31c7) (free-identifier=? . lE31c9) (syntax->datum . lE31df) (datum->syntax . lE31dd) (bound-identifier=? . lE31cb) (syntax-violation . lE31d9) (unsyntax-splicing . lE4e30) (unsyntax . lE4e2f) (_ . lE4e2c) (... . lE4e29) (with-syntax . lE4e1e) (quasisyntax . lE4e1d) (syntax . lE4e09) (syntax-case . lE4e08)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51b3 '(rnrs files) '(6) '() '() '() '((delete-file . lE508c) (file-exists? . lE508b) (make-i/o-write-error . lE5039) (make-i/o-read-error . lE5038) (make-i/o-port-error . lE5037) (make-i/o-invalid-position-error . lE5036) (make-i/o-filename-error . lE5035) (make-i/o-file-protection-error . lE5034) (make-i/o-file-is-read-only-error . lE5033) (make-i/o-file-does-not-exist-error . lE5032) (make-i/o-file-already-exists-error . lE5031) (make-i/o-error . lE5030) (i/o-write-error? . lE5024) (i/o-read-error? . lE5023) (i/o-port-error? . lE5022) (i/o-invalid-position-error? . lE5021) (i/o-filename-error? . lE5020) (i/o-file-protection-error? . lE501f) (i/o-file-is-read-only-error? . lE501e) (i/o-file-does-not-exist-error? . lE501d) (i/o-file-already-exists-error? . lE501c) (i/o-error? . lE501b) (i/o-error-position . lE501a) (i/o-error-port . lE5019) (i/o-error-filename . lE5018) (&i/o-port . lE4e5b) (&i/o-file-does-not-exist . lE4e5a) (&i/o-file-already-exists . lE4e59) (&i/o-file-is-read-only . lE4e58) (&i/o-file-protection . lE4e57) (&i/o-filename . lE4e56) (&i/o-invalid-position . lE4e55) (&i/o-write . lE4e54) (&i/o-read . lE4e53) (&i/o . lE4e52)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51b4 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . lE508a) (vector-sort . lE5089) (list-sort . lE5088)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51b5 '(rnrs base) '(6) '() '() '() '((zero? . lE4f02) (vector? . lE4f01) (vector-set! . lE4f00) (vector-ref . lE4eff) (vector-map . lE4efe) (vector-length . lE4efd) (vector-for-each . lE4efc) (vector-fill! . lE4efb) (vector->list . lE4efa) (vector . lE4ef9) (values . lE4ef8) (truncate . lE4ef7) (tan . lE4ef6) (symbol? . lE4ef5) (symbol=? . lE4ef4) (symbol->string . lE4ef3) (substring . lE4ef2) (string? . lE4ef1) (string>? . lE4ef0) (string>=? . lE4eef) (string=? . lE4eee) (string<? . lE4eed) (string<=? . lE4eec) (string-ref . lE4eeb) (string-length . lE4eea) (string-for-each . lE4ee9) (string-copy . lE4ee8) (string-append . lE4ee7) (string->symbol . lE4ee6) (string->number . lE4ee5) (string->list . lE4ee4) (string . lE4ee3) (sqrt . lE4ee2) (sin . lE4ee1) (round . lE4ee0) (reverse . lE4edf) (real? . lE4ede) (real-valued? . lE4edd) (real-part . lE4edc) (rationalize . lE4edb) (rational? . lE4eda) (rational-valued? . lE4ed9) (procedure? . lE4ed8) (positive? . lE4ed7) (pair? . lE4ed6) (odd? . lE4ed5) (numerator . lE4ed4) (number? . lE4ed3) (number->string . lE4ed2) (null? . lE4ed1) (not . lE4ed0) (negative? . lE4ecf) (nan? . lE4ece) (min . lE4ecd) (max . lE4ecc) (map . lE4ecb) (make-vector . lE4eca) (make-string . lE4ec9) (make-rectangular . lE4ec8) (make-polar . lE4ec7) (magnitude . lE4ec6) (log . lE4ec5) (list? . lE4ec4) (list-tail . lE4ec3) (list-ref . lE4ec2) (list->vector . lE4ec1) (list->string . lE4ec0) (list . lE4ebf) (length . lE4ebe) (lcm . lE4ebd) (integer? . lE4ebc) (integer-valued? . lE4ebb) (integer->char . lE4eba) (infinite? . lE4eb9) (inexact? . lE4eb8) (inexact . lE4eb7) (imag-part . lE4eb6) (gcd . lE4eb5) (for-each . lE4eb4) (floor . lE4eb3) (finite? . lE4eb2) (expt . lE4eb1) (exp . lE4eb0) (exact? . lE4eaf) (exact-integer-sqrt . lE4eae) (exact . lE4ead) (even? . lE4eac) (error . lE4eab) (eqv? . lE4eaa) (equal? . lE4ea9) (eq? . lE4ea8) (dynamic-wind . lE4ea7) (div0-and-mod0 . lE4ea6) (mod0 . lE4ea5) (div0 . lE4ea4) (div-and-mod . lE4ea3) (mod . lE4ea2) (div . lE4ea1) (denominator . lE4ea0) (cos . lE4e9f) (cons . lE4e9e) (complex? . lE4e9d) (char? . lE4e9c) (char>? . lE4e9b) (char>=? . lE4e9a) (char=? . lE4e99) (char<? . lE4e98) (char<=? . lE4e97) (char->integer . lE4e96) (ceiling . lE4e95) (call-with-values . lE4e94) (call/cc . lE4e93) (call-with-current-continuation . lE4e92) (cddddr . lE4e91) (cdddar . lE4e90) (cddadr . lE4e8f) (cddaar . lE4e8e) (cdaddr . lE4e8d) (cdadar . lE4e8c) (cdaadr . lE4e8b) (cdaaar . lE4e8a) (cadddr . lE4e89) (caddar . lE4e88) (cadadr . lE4e87) (cadaar . lE4e86) (caaddr . lE4e85) (caadar . lE4e84) (caaadr . lE4e83) (caaaar . lE4e82) (cdddr . lE4e81) (cddar . lE4e80) (cdadr . lE4e7f) (cdaar . lE4e7e) (caddr . lE4e7d) (cadar . lE4e7c) (caadr . lE4e7b) (caaar . lE4e7a) (cddr . lE4e79) (cdar . lE4e78) (cadr . lE4e77) (caar . lE4e76) (cdr . lE4e75) (car . lE4e74) (boolean? . lE4e73) (boolean=? . lE4e72) (atan . lE4e71) (assertion-violation . lE4e70) (asin . lE4e6f) (apply . lE4e6e) (append . lE4e6d) (angle . lE4e6c) (acos . lE4e6b) (abs . lE4e6a) (/ . lE4e69) (* . lE4e68) (- . lE4e67) (+ . lE4e66) (>= . lE4e65) (> . lE4e64) (= . lE4e63) (<= . lE4e62) (< . lE4e61) (unquote-splicing . lE4e2e) (unquote . lE4e2d) (_ . lE4e2c) (else . lE4e2b) (=> . lE4e2a) (... . lE4e29) (assert . lE4e28) (cond . lE4e23) (let* . lE4e22) (let*-values . lE4e21) (let-values . lE4e20) (identifier-syntax . lE4e1f) (quasiquote . lE4e1c) (syntax-rules . lE4e1b) (case . lE4e16) (or . lE4e12) (and . lE4e11) (if . lE4e10) (let . lE4e0f) (letrec* . lE4e0e) (letrec . lE4e0d) (lambda . lE4e0a) (quote . lE4e07) (letrec-syntax . lE4e05) (let-syntax . lE4e04) (set! . lE4e03) (begin . lE4e01) (define-syntax . lE4dff) (define . lE4dfe)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51b6 '(rnrs lists) '(6) '() '() '() '((remove . lE4ffb) (remv . lE4ffa) (remp . lE4ff9) (remq . lE4ff8) (partition . lE4ff7) (memv . lE4ff6) (memq . lE4ff5) (memp . lE4ff4) (member . lE4ff3) (exists . lE4ff2) (for-all . lE4ff1) (fold-right . lE4ff0) (fold-left . lE4fef) (find . lE4fee) (filter . lE4fed) (cons* . lE4fec) (assv . lE4feb) (assq . lE4fea) (assp . lE4fe9) (assoc . lE4fe8)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51b7 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . lE5072) (call-with-input-file . lE5071) (write-char . lE5070) (write . lE506f) (with-output-to-file . lE506e) (with-input-from-file . lE506d) (read-char . lE506c) (read . lE506b) (peek-char . lE506a) (open-output-file . lE5069) (open-input-file . lE5068) (newline . lE5067) (display . lE5066) (close-output-port . lE5065) (close-input-port . lE5064) (eof-object? . lE5063) (eof-object . lE5062) (current-error-port . lE5061) (current-output-port . lE5060) (current-input-port . lE505f) (output-port? . lE505e) (input-port? . lE505d) (make-i/o-write-error . lE5039) (make-i/o-read-error . lE5038) (make-i/o-port-error . lE5037) (make-i/o-invalid-position-error . lE5036) (make-i/o-filename-error . lE5035) (make-i/o-file-protection-error . lE5034) (make-i/o-file-is-read-only-error . lE5033) (make-i/o-file-does-not-exist-error . lE5032) (make-i/o-file-already-exists-error . lE5031) (make-i/o-error . lE5030) (i/o-write-error? . lE5024) (i/o-read-error? . lE5023) (i/o-port-error? . lE5022) (i/o-invalid-position-error? . lE5021) (i/o-filename-error? . lE5020) (i/o-file-protection-error? . lE501f) (i/o-file-is-read-only-error? . lE501e) (i/o-file-does-not-exist-error? . lE501d) (i/o-file-already-exists-error? . lE501c) (i/o-error? . lE501b) (i/o-error-position . lE501a) (i/o-error-port . lE5019) (i/o-error-filename . lE5018) (&i/o-port . lE4e5b) (&i/o-file-does-not-exist . lE4e5a) (&i/o-file-already-exists . lE4e59) (&i/o-file-is-read-only . lE4e58) (&i/o-file-protection . lE4e57) (&i/o-filename . lE4e56) (&i/o-invalid-position . lE4e55) (&i/o-write . lE4e54) (&i/o-read . lE4e53) (&i/o . lE4e52)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51b8 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . lE5027) (utf32->string . lE4fad) (utf16->string . lE4fac) (utf8->string . lE4fab) (uint-list->bytevector . lE4faa) (u8-list->bytevector . lE4fa9) (string->utf8 . lE4fa8) (string->utf32 . lE4fa7) (string->utf16 . lE4fa6) (sint-list->bytevector . lE4fa5) (native-endianness . lE4fa4) (bytevector? . lE4fa3) (bytevector=? . lE4fa2) (bytevector-uint-set! . lE4fa1) (bytevector-uint-ref . lE4fa0) (bytevector-u8-set! . lE4f9f) (bytevector-u8-ref . lE4f9e) (bytevector-u64-set! . lE4f9d) (bytevector-u64-ref . lE4f9c) (bytevector-u64-native-set! . lE4f9b) (bytevector-u64-native-ref . lE4f9a) (bytevector-u32-set! . lE4f99) (bytevector-u32-ref . lE4f98) (bytevector-u32-native-set! . lE4f97) (bytevector-u32-native-ref . lE4f96) (bytevector-u16-set! . lE4f95) (bytevector-u16-ref . lE4f94) (bytevector-u16-native-set! . lE4f93) (bytevector-u16-native-ref . lE4f92) (bytevector-sint-set! . lE4f91) (bytevector-sint-ref . lE4f90) (bytevector-s8-set! . lE4f8f) (bytevector-s8-ref . lE4f8e) (bytevector-s64-set! . lE4f8d) (bytevector-s64-ref . lE4f8c) (bytevector-s64-native-set! . lE4f8b) (bytevector-s64-native-ref . lE4f8a) (bytevector-s32-set! . lE4f89) (bytevector-s32-ref . lE4f88) (bytevector-s32-native-set! . lE4f87) (bytevector-s32-native-ref . lE4f86) (bytevector-s16-set! . lE4f85) (bytevector-s16-ref . lE4f84) (bytevector-s16-native-set! . lE4f83) (bytevector-s16-native-ref . lE4f82) (bytevector-length . lE4f81) (bytevector-ieee-single-ref . lE4f80) (bytevector-ieee-single-set! . lE4f7f) (bytevector-ieee-single-native-set! . lE4f7e) (bytevector-ieee-single-native-ref . lE4f7d) (bytevector-ieee-double-set! . lE4f7c) (bytevector-ieee-double-ref . lE4f7b) (bytevector-ieee-double-native-set! . lE4f7a) (bytevector-ieee-double-native-ref . lE4f79) (bytevector-fill! . lE4f78) (bytevector-copy! . lE4f77) (bytevector-copy . lE4f76) (bytevector->uint-list . lE4f75) (bytevector->u8-list . lE4f74) (bytevector->sint-list . lE4f73) (endianness . lE4e27)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51b9 '(rnrs unicode) '(6) '() '() '() '((string-upcase . lE50ba) (string-titlecase . lE50b9) (string-normalize-nfkd . lE50b8) (string-normalize-nfkc . lE50b7) (string-normalize-nfd . lE50b6) (string-normalize-nfc . lE50b5) (string-foldcase . lE50b4) (string-downcase . lE50b3) (string-ci>? . lE50b2) (string-ci>=? . lE50b1) (string-ci=? . lE50b0) (string-ci<? . lE50af) (string-ci<=? . lE50ae) (char-whitespace? . lE50ad) (char-upper-case? . lE50ac) (char-title-case? . lE50ab) (char-numeric? . lE50aa) (char-lower-case? . lE50a9) (char-general-category . lE50a8) (char-upcase . lE50a7) (char-titlecase . lE50a6) (char-foldcase . lE50a5) (char-downcase . lE50a4) (char-ci>? . lE50a3) (char-ci>=? . lE50a2) (char-ci=? . lE50a1) (char-ci<? . lE50a0) (char-ci<=? . lE509f) (char-alphabetic? . lE509e)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51ba '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . lE4fe1) (raise-continuable . lE4fe0) (raise . lE4fdf) (guard . lE4e33) (else . lE4e2b) (=> . lE4e2a)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51bb '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . lE4f13) (bitwise-reverse-bit-field . lE4f12) (bitwise-length . lE4f11) (bitwise-if . lE4f10) (bitwise-first-bit-set . lE4f0f) (bitwise-copy-bit-field . lE4f0e) (bitwise-copy-bit . lE4f0d) (bitwise-bit-set? . lE4f0c) (bitwise-bit-field . lE4f0b) (bitwise-bit-count . lE4f0a) (bitwise-xor . lE4f09) (bitwise-ior . lE4f08) (bitwise-and . lE4f07) (bitwise-not . lE4f06) (bitwise-arithmetic-shift-right . lE4f05) (bitwise-arithmetic-shift-left . lE4f04) (bitwise-arithmetic-shift . lE4f03)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51bc '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . lE4f40) (fxxor . lE4f3f) (fxrotate-bit-field . lE4f3e) (fxreverse-bit-field . lE4f3d) (fxpositive? . lE4f3c) (fxodd? . lE4f3b) (fxnot . lE4f3a) (fxnegative? . lE4f39) (fxmod0 . lE4f38) (fxmod . lE4f37) (fxmin . lE4f36) (fxmax . lE4f35) (fxlength . lE4f34) (fxior . lE4f33) (fxif . lE4f32) (fxfirst-bit-set . lE4f31) (fxeven? . lE4f30) (fxdiv0-and-mod0 . lE4f2f) (fxdiv0 . lE4f2e) (fxdiv-and-mod . lE4f2d) (fxdiv . lE4f2c) (fxcopy-bit-field . lE4f2b) (fxcopy-bit . lE4f2a) (fxbit-set? . lE4f29) (fxbit-field . lE4f28) (fxbit-count . lE4f27) (fxarithmetic-shift-right . lE4f26) (fxarithmetic-shift-left . lE4f25) (fxarithmetic-shift . lE4f24) (fxand . lE4f23) (fx>? . lE4f22) (fx>=? . lE4f21) (fx=? . lE4f20) (fx<? . lE4f1f) (fx<=? . lE4f1e) (fx-/carry . lE4f1d) (fx- . lE4f1c) (fx+/carry . lE4f1b) (fx+ . lE4f1a) (fx*/carry . lE4f19) (fx* . lE4f18) (greatest-fixnum . lE4f17) (least-fixnum . lE4f16) (fixnum-width . lE4f15) (fixnum? . lE4f14)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51bd '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . lE4f72) (no-infinities-violation? . lE4f71) (make-no-nans-violation . lE4f70) (make-no-infinities-violation . lE4f6f) (real->flonum . lE4f6e) (flzero? . lE4f6d) (fltruncate . lE4f6c) (fltan . lE4f6b) (flsqrt . lE4f6a) (flsin . lE4f69) (flround . lE4f68) (flpositive? . lE4f67) (flonum? . lE4f66) (flodd? . lE4f65) (flnumerator . lE4f64) (flnegative? . lE4f63) (flnan? . lE4f62) (flmod0 . lE4f61) (flmod . lE4f60) (flmin . lE4f5f) (flmax . lE4f5e) (fllog . lE4f5d) (flinteger? . lE4f5c) (flinfinite? . lE4f5b) (flfloor . lE4f5a) (flfinite? . lE4f59) (flexpt . lE4f58) (flexp . lE4f57) (fleven? . lE4f56) (fldiv0-and-mod0 . lE4f55) (fldiv0 . lE4f54) (fldiv-and-mod . lE4f53) (fldiv . lE4f52) (fldenominator . lE4f51) (flcos . lE4f50) (flceiling . lE4f4f) (flatan . lE4f4e) (flasin . lE4f4d) (flacos . lE4f4c) (flabs . lE4f4b) (fl>? . lE4f4a) (fl>=? . lE4f49) (fl=? . lE4f48) (fl<? . lE4f47) (fl<=? . lE4f46) (fl/ . lE4f45) (fl- . lE4f44) (fl+ . lE4f43) (fl* . lE4f42) (fixnum->flonum . lE4f41) (&no-nans . lE4e5f) (&no-infinities . lE4e5e)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51be '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . lE5087) (string-ci-hash . lE5086) (string-hash . lE5085) (equal-hash . lE5084) (hashtable-equivalence-function . lE5083) (make-hashtable . lE5082) (hashtable-hash-function . lE5081) (make-eqv-hashtable . lE5080) (make-eq-hashtable . lE507f) (hashtable? . lE507e) (hashtable-update! . lE507d) (hashtable-size . lE507c) (hashtable-set! . lE507b) (hashtable-ref . lE507a) (hashtable-mutable? . lE5079) (hashtable-keys . lE5078) (hashtable-entries . lE5077) (hashtable-delete! . lE5076) (hashtable-copy . lE5075) (hashtable-contains? . lE5074) (hashtable-clear! . lE5073)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51bf '(rnrs io ports) '(6) '() '() '() '((eof-object? . lE5063) (eof-object . lE5062) (current-error-port . lE5061) (current-output-port . lE5060) (current-input-port . lE505f) (output-port? . lE505e) (input-port? . lE505d) (utf-8-codec . lE505c) (utf-16-codec . lE505b) (transcoder-error-handling-mode . lE505a) (transcoder-eol-style . lE5059) (transcoder-codec . lE5058) (transcoded-port . lE5057) (textual-port? . lE5056) (string->bytevector . lE5055) (standard-output-port . lE5054) (standard-input-port . lE5053) (standard-error-port . lE5052) (set-port-position! . lE5051) (put-u8 . lE5050) (put-string . lE504f) (put-datum . lE504e) (put-char . lE504d) (put-bytevector . lE504c) (port? . lE504b) (port-transcoder . lE504a) (port-position . lE5049) (port-has-set-port-position!? . lE5048) (port-has-port-position? . lE5047) (port-eof? . lE5046) (output-port-buffer-mode . lE5045) (open-string-output-port . lE5044) (open-string-input-port . lE5043) (open-file-output-port . lE5042) (open-file-input/output-port . lE5041) (open-file-input-port . lE5040) (open-bytevector-output-port . lE503f) (open-bytevector-input-port . lE503e) (native-transcoder . lE503d) (native-eol-style . lE503c) (make-transcoder . lE503b) (latin-1-codec . lE503a) (make-i/o-write-error . lE5039) (make-i/o-read-error . lE5038) (make-i/o-port-error . lE5037) (make-i/o-invalid-position-error . lE5036) (make-i/o-filename-error . lE5035) (make-i/o-file-protection-error . lE5034) (make-i/o-file-is-read-only-error . lE5033) (make-i/o-file-does-not-exist-error . lE5032) (make-i/o-file-already-exists-error . lE5031) (make-i/o-error . lE5030) (make-i/o-encoding-error . lE502f) (make-i/o-decoding-error . lE502e) (make-custom-textual-output-port . lE502d) (make-custom-textual-input/output-port . lE502c) (make-custom-textual-input-port . lE502b) (make-custom-binary-output-port . lE502a) (make-custom-binary-input/output-port . lE5029) (make-custom-binary-input-port . lE5028) (lookahead-u8 . lE5026) (lookahead-char . lE5025) (i/o-write-error? . lE5024) (i/o-read-error? . lE5023) (i/o-port-error? . lE5022) (i/o-invalid-position-error? . lE5021) (i/o-filename-error? . lE5020) (i/o-file-protection-error? . lE501f) (i/o-file-is-read-only-error? . lE501e) (i/o-file-does-not-exist-error? . lE501d) (i/o-file-already-exists-error? . lE501c) (i/o-error? . lE501b) (i/o-error-position . lE501a) (i/o-error-port . lE5019) (i/o-error-filename . lE5018) (i/o-encoding-error? . lE5017) (i/o-encoding-error-char . lE5016) (i/o-decoding-error? . lE5015) (get-u8 . lE5014) (get-string-n! . lE5013) (get-string-n . lE5012) (get-string-all . lE5011) (get-line . lE5010) (get-datum . lE500f) (get-char . lE500e) (get-bytevector-some . lE500d) (get-bytevector-n! . lE500c) (get-bytevector-n . lE500b) (get-bytevector-all . lE500a) (flush-output-port . lE5009) (close-port . lE5008) (call-with-string-output-port . lE4fe7) (call-with-port . lE4fe6) (call-with-bytevector-output-port . lE4fe5) (bytevector->string . lE4fe4) (buffer-mode? . lE4fe3) (binary-port? . lE4fe2) (&i/o-encoding . lE4e5d) (&i/o-decoding . lE4e5c) (&i/o-port . lE4e5b) (&i/o-file-does-not-exist . lE4e5a) (&i/o-file-already-exists . lE4e59) (&i/o-file-is-read-only . lE4e58) (&i/o-file-protection . lE4e57) (&i/o-filename . lE4e56) (&i/o-invalid-position . lE4e55) (&i/o-write . lE4e54) (&i/o-read . lE4e53) (&i/o . lE4e52) (error-handling-mode . lE4e37) (file-options . lE4e36) (buffer-mode . lE4e35) (eol-style . lE4e34)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51c0 '(rnrs enums) '(6) '() '() '() '((make-enumeration . lE4fde) (enum-set=? . lE4fdd) (enum-set-universe . lE4fdc) (enum-set-union . lE4fdb) (enum-set-subset? . lE4fda) (enum-set-projection . lE4fd9) (enum-set-member? . lE4fd8) (enum-set-intersection . lE4fd7) (enum-set-indexer . lE4fd6) (enum-set-difference . lE4fd5) (enum-set-constructor . lE4fd4) (enum-set-complement . lE4fd3) (enum-set->list . lE4fd2) (define-enumeration . lE4e42)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51c1 '(rnrs conditions) '(6) '() '() '() '((who-condition? . lE4fd1) (warning? . lE4fd0) (violation? . lE4fcf) (undefined-violation? . lE4fce) (syntax-violation? . lE4fcd) (syntax-violation-subform . lE4fcc) (syntax-violation-form . lE4fcb) (syntax-violation . lE31d9) (simple-conditions . lE4fca) (serious-condition? . lE4fc9) (non-continuable-violation? . lE4fc8) (message-condition? . lE4fc7) (make-who-condition . lE4fc6) (make-warning . lE4fc5) (make-violation . lE4fc4) (make-undefined-violation . lE4fc3) (make-syntax-violation . lE4fc2) (make-serious-condition . lE4fc1) (make-non-continuable-violation . lE4fc0) (make-message-condition . lE4fbf) (make-lexical-violation . lE4fbe) (make-irritants-condition . lE4fbd) (make-implementation-restriction-violation . lE4fbc) (make-error . lE4fbb) (make-assertion-violation . lE4fba) (lexical-violation? . lE4fb9) (irritants-condition? . lE4fb8) (implementation-restriction-violation? . lE4fb7) (error? . lE4fb6) (condition-who . lE4fb5) (condition-predicate . lE4fb4) (condition-message . lE4fb3) (condition-irritants . lE4fb2) (condition-accessor . lE4fb1) (condition . lE4fb0) (assertion-violation? . lE4faf) (condition? . lE4fae) (&undefined . lE4e51) (&syntax . lE4e50) (&lexical . lE4e4f) (&implementation-restriction . lE4e4e) (&non-continuable . lE4e4d) (&who . lE4e4c) (&irritants . lE4e4b) (&assertion . lE4e4a) (&violation . lE4e49) (&error . lE4e48) (&serious . lE4e47) (&warning . lE4e46) (&message . lE4e45) (&condition . lE4e44) (define-condition-type . lE4e43)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51c2 '(rnrs records inspection) '(6) '() '() '() '((record? . lE5096) (record-type-uid . lE5095) (record-type-sealed? . lE5094) (record-type-parent . lE5093) (record-type-opaque? . lE5092) (record-type-name . lE5091) (record-type-generative? . lE5090) (record-type-field-names . lE508f) (record-rtd . lE508e) (record-field-mutable? . lE508d)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51c3 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . lE509d) (record-predicate . lE509c) (record-mutator . lE509b) (record-constructor . lE509a) (record-accessor . lE5099) (make-record-type-descriptor . lE5098) (make-record-constructor-descriptor . lE5097)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51c4 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . lE4e41) (parent-rtd . lE4e40) (nongenerative . lE4e3f) (opaque . lE4e3e) (sealed . lE4e3d) (protocol . lE4e3c) (parent . lE4e3b) (immutable . lE4e3a) (mutable . lE4e39) (fields . lE4e38) (record-constructor-descriptor . lE4e18) (record-type-descriptor . lE4e17)) '() values values '#f '#f '#t '#f) (lE2d0d@lE2b59@install-library 'lE51c5 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . lE51a5) (&no-nans-rtd . lE51a4) (&no-infinities-rcd . lE51a3) (&no-infinities-rtd . lE51a2) (&i/o-encoding-rcd . lE51a1) (&i/o-encoding-rtd . lE51a0) (&i/o-decoding-rcd . lE519f) (&i/o-decoding-rtd . lE519e) (&i/o-port-rcd . lE519d) (&i/o-port-rtd . lE519c) (&i/o-file-does-not-exist-rcd . lE519b) (&i/o-file-does-not-exist-rtd . lE519a) (&i/o-file-already-exists-rcd . lE5199) (&i/o-file-already-exists-rtd . lE5198) (&i/o-file-is-read-only-rcd . lE5197) (&i/o-file-is-read-only-rtd . lE5196) (&i/o-file-protection-rcd . lE5195) (&i/o-file-protection-rtd . lE5194) (&i/o-filename-rcd . lE5193) (&i/o-filename-rtd . lE5192) (&i/o-invalid-position-rcd . lE5191) (&i/o-invalid-position-rtd . lE5190) (&i/o-write-rcd . lE518f) (&i/o-write-rtd . lE518e) (&i/o-read-rcd . lE518d) (&i/o-read-rtd . lE518c) (&i/o-rcd . lE518b) (&i/o-rtd . lE518a) (&undefined-rcd . lE5189) (&undefined-rtd . lE5188) (&syntax-rcd . lE5187) (&syntax-rtd . lE5186) (&lexical-rcd . lE5185) (&lexical-rtd . lE5184) (&implementation-restriction-rcd . lE5183) (&implementation-restriction-rtd . lE5182) (&non-continuable-rcd . lE5181) (&non-continuable-rtd . lE5180) (&who-rcd . lE517f) (&who-rtd . lE517e) (&irritants-rcd . lE517d) (&irritants-rtd . lE517c) (&assertion-rcd . lE517b) (&assertion-rtd . lE517a) (&violation-rcd . lE5179) (&violation-rtd . lE5178) (&error-rcd . lE5177) (&error-rtd . lE5176) (&serious-rcd . lE5175) (&serious-rtd . lE5174) (&warning-rcd . lE5173) (&warning-rtd . lE5172) (&message-rcd . lE5171) (&message-rtd . lE5170) (&condition-rcd . lE516f) (&condition-rtd . lE516e) (syntax-error . lE31d5) (syntax-dispatch . lE30f9) (pretty-print . lE516d) (eval-core . lE516c) (set-symbol-value! . lE516b) (symbol-value . lE516a) (gensym . lE5169) (void . lE5168) (load . lE4c98) (interaction-environment . lE31e7) (char-ready? . lE5167) (regexp? . lE5166) (read-line . lE5165) (gensym-prefix-set! . lE5164) (ungensym . lE5163) (alist->eq-hash-table . lE5162) (assoc-ref . lE5161) (print . lE5160) (format . lE515f) (host-os . lE515e) (library-path . lE2b38) (standard-library-path . lE515d) (ssl-supported? . lE515c) (ssl-socket? . lE515b) (socket-sslize! . lE515a) (%monapi-name-whereis . lE5159) (%monapi-message-send . lE5158) (file-newer? . lE5157) (stat-mtime . lE5156) (write-to-file . lE5155) (file->list . lE5154) (file->string . lE5153) (digit->integer . lE5152) (call-with-string-input-port . lE5151) (call-with-string-io . lE5150) (string-split . lE514f) (bytevector-for-each . lE514e) (string->regexp . lE514d) (rxmatch . lE514c) (regexp-replace-all . lE514b) (hashtable-fold-left . lE514a) (hashtable-for-each . lE5149) (mosh-cache-dir . lE2922) (call-process . lE5148) (local-tz-offset . lE5147) (microseconds . lE5146) (directory-list . lE5145) (set-current-directory! . lE5144) (expand-path . lE5143) (current-directory . lE5142) (%getpid . lE5141) (%spawn . lE5140) (%waitpid . lE513f) (simple-struct-name . lE513e) (simple-struct-set! . lE513d) (simple-struct-ref . lE513c) (make-simple-struct . lE513b) (simple-struct? . lE513a) (pointer-ref-c-int64 . lE5139) (pointer-ref-c-int32 . lE5138) (pointer-ref-c-int16 . lE5137) (pointer-ref-c-int8 . lE5136) (pointer-ref-c-uint64 . lE5135) (pointer-ref-c-uint32 . lE5134) (pointer-ref-c-uint16 . lE5133) (pointer-ref-c-uint8 . lE5132) (pointer-set-c-uint64! . lE5131) (pointer-set-c-uint32! . lE5130) (pointer-set-c-uint16! . lE512f) (pointer-set-c-uint8! . lE512e) (pointer-set-c-int64! . lE512d) (pointer-set-c-int32! . lE512c) (pointer-set-c-int16! . lE512b) (pointer-set-c-int8! . lE512a) (pointer-set-c-pointer! . lE5129) (pointer-set-c-double! . lE5128) (pointer-set-c-float! . lE5127) (pointer-set-c-long-long! . lE5126) (pointer-set-c-long! . lE5125) (pointer-set-c-int! . lE5124) (pointer-set-c-short! . lE5123) (pointer-set-c-char! . lE5122) (pointer-ref-c-pointer . lE5121) (pointer-ref-c-double . lE5120) (pointer-ref-c-float . lE511f) (pointer-ref-c-unsigned-long-long . lE511e) (pointer-ref-c-signed-long-long . lE511d) (pointer-ref-c-unsigned-long . lE511c) (pointer-ref-c-signed-long . lE511b) (pointer-ref-c-unsigned-int . lE511a) (pointer-ref-c-signed-int . lE5119) (pointer-ref-c-unsigned-short . lE5118) (pointer-ref-c-signed-short . lE5117) (pointer-ref-c-unsigned-char . lE5116) (pointer-ref-c-signed-char . lE5115) (pointer->integer . lE5114) (integer->pointer . lE5113) (pointer? . lE5112) (shared-errno . lE5111) (%ffi-free-c-callback-trampoline . lE5110) (%ffi-make-c-callback-trampoline . lE510f) (%ffi-free . lE510e) (%ffi-malloc . lE510d) (%ffi-supported? . lE510c) (%ffi-pointer->string . lE510b) (%ffi-call . lE510a) (%ffi-lookup . lE5109) (%ffi-open . lE5108) (null-terminated-utf8->string . lE5107) (null-terminated-bytevector->string . lE5106) (%exec . lE5105) (%fork . lE5104) (%pipe . lE5103) (p . lE5102) (open-output-string . lE5101) (get-output-string . lE5100) (file-stat-ctime . lE50ff) (file-stat-atime . lE50fe) (file-stat-mtime . lE50fd) (file-size-in-bytes . lE50fc) (file-writable? . lE50fb) (file-executable? . lE50fa) (file-readable? . lE50f9) (file-regular? . lE50f8) (file-symbolic-link? . lE50f7) (file-directory? . lE50f6) (create-symbolic-link . lE50f5) (rename-file . lE50f4) (delete-directory . lE50f3) (create-directory . lE50f2) (create-mosh-cache-dir . lE50f1) (get-environment-variables . lE50f0) (current-exception-handler . lE50ef) (get-environment-variable . lE50ee) (join-wraps . lE50ed) (id->real-label . lE50ec) (same-marks? . lE50eb) (same-marks*? . lE50ea) (get-timeofday . lE50e9) (get-command-line . lE50e8) (sys-display . lE50e7) (whereis . lE50e6) (register . lE50e5) (vm-join! . lE50e4) (vm-set-value! . lE50e3) (vm? . lE50e2) (main-vm? . lE50e1) (vm-eval . lE50e0) (vm-self . lE50df) (vm-start! . lE50de) (make-vm . lE50dd) (mutex-try-lock! . lE50dc) (mutex-unlock! . lE50db) (mutex-lock! . lE50da) (mutex? . lE50d9) (make-mutex . lE50d8) (condition-variable-notify-all! . lE50d7) (condition-variable-notify! . lE50d6) (condition-variable-wait! . lE50d5) (make-condition-variable . lE50d4) (write/ss . lE50d3) (mosh-executable-path . lE50d2) (make-file-options . lE50d1) (source-info . lE50d0) (make-compiler-instruction . lE50cf) (make-instruction . lE50ce) (set-source-info! . lE50cd) (bignum? . lE50cc) (fast-equal? . lE50cb) (fasl-read . lE50ca) (fasl-write . lE50c9) (time-usage . lE50c8) (os-constant . lE50c7) (condition-printer . lE50c6) (disasm . lE50c5) (make-parameter . lE2920) (socket-port . lE50c4) (socket-shutdown . lE50c3) (socket-close . lE50c2) (socket-send . lE50c1) (socket-recv! . lE50c0) (socket-recv . lE50bf) (make-server-socket . lE50be) (make-client-socket . lE50bd) (socket-accept . lE50bc) (socket? . lE50bb) (string-upcase . lE50ba) (string-titlecase . lE50b9) (string-normalize-nfkd . lE50b8) (string-normalize-nfkc . lE50b7) (string-normalize-nfd . lE50b6) (string-normalize-nfc . lE50b5) (string-foldcase . lE50b4) (string-downcase . lE50b3) (string-ci>? . lE50b2) (string-ci>=? . lE50b1) (string-ci=? . lE50b0) (string-ci<? . lE50af) (string-ci<=? . lE50ae) (char-whitespace? . lE50ad) (char-upper-case? . lE50ac) (char-title-case? . lE50ab) (char-numeric? . lE50aa) (char-lower-case? . lE50a9) (char-general-category . lE50a8) (char-upcase . lE50a7) (char-titlecase . lE50a6) (char-foldcase . lE50a5) (char-downcase . lE50a4) (char-ci>? . lE50a3) (char-ci>=? . lE50a2) (char-ci=? . lE50a1) (char-ci<? . lE50a0) (char-ci<=? . lE509f) (char-alphabetic? . lE509e) (make-variable-transformer . lE2f24) (identifier? . lE31db) (generate-temporaries . lE31c7) (free-identifier=? . lE31c9) (syntax->datum . lE31df) (datum->syntax . lE31dd) (bound-identifier=? . lE31cb) (record-type-descriptor? . lE509d) (record-predicate . lE509c) (record-mutator . lE509b) (record-constructor . lE509a) (record-accessor . lE5099) (make-record-type-descriptor . lE5098) (make-record-constructor-descriptor . lE5097) (record? . lE5096) (record-type-uid . lE5095) (record-type-sealed? . lE5094) (record-type-parent . lE5093) (record-type-opaque? . lE5092) (record-type-name . lE5091) (record-type-generative? . lE5090) (record-type-field-names . lE508f) (record-rtd . lE508e) (record-field-mutable? . lE508d) (delete-file . lE508c) (file-exists? . lE508b) (vector-sort! . lE508a) (vector-sort . lE5089) (list-sort . lE5088) (symbol-hash . lE5087) (string-ci-hash . lE5086) (string-hash . lE5085) (equal-hash . lE5084) (hashtable-equivalence-function . lE5083) (make-hashtable . lE5082) (hashtable-hash-function . lE5081) (make-eqv-hashtable . lE5080) (make-eq-hashtable . lE507f) (hashtable? . lE507e) (hashtable-update! . lE507d) (hashtable-size . lE507c) (hashtable-set! . lE507b) (hashtable-ref . lE507a) (hashtable-mutable? . lE5079) (hashtable-keys . lE5078) (hashtable-entries . lE5077) (hashtable-delete! . lE5076) (hashtable-copy . lE5075) (hashtable-contains? . lE5074) (hashtable-clear! . lE5073) (call-with-output-file . lE5072) (call-with-input-file . lE5071) (write-char . lE5070) (write . lE506f) (with-output-to-file . lE506e) (with-input-from-file . lE506d) (read-char . lE506c) (read . lE506b) (peek-char . lE506a) (open-output-file . lE5069) (open-input-file . lE5068) (newline . lE5067) (display . lE5066) (close-output-port . lE5065) (close-input-port . lE5064) (eof-object? . lE5063) (eof-object . lE5062) (current-error-port . lE5061) (current-output-port . lE5060) (current-input-port . lE505f) (output-port? . lE505e) (input-port? . lE505d) (utf-8-codec . lE505c) (utf-16-codec . lE505b) (transcoder-error-handling-mode . lE505a) (transcoder-eol-style . lE5059) (transcoder-codec . lE5058) (transcoded-port . lE5057) (textual-port? . lE5056) (string->bytevector . lE5055) (standard-output-port . lE5054) (standard-input-port . lE5053) (standard-error-port . lE5052) (set-port-position! . lE5051) (put-u8 . lE5050) (put-string . lE504f) (put-datum . lE504e) (put-char . lE504d) (put-bytevector . lE504c) (port? . lE504b) (port-transcoder . lE504a) (port-position . lE5049) (port-has-set-port-position!? . lE5048) (port-has-port-position? . lE5047) (port-eof? . lE5046) (output-port-buffer-mode . lE5045) (open-string-output-port . lE5044) (open-string-input-port . lE5043) (open-file-output-port . lE5042) (open-file-input/output-port . lE5041) (open-file-input-port . lE5040) (open-bytevector-output-port . lE503f) (open-bytevector-input-port . lE503e) (native-transcoder . lE503d) (native-eol-style . lE503c) (make-transcoder . lE503b) (latin-1-codec . lE503a) (make-i/o-write-error . lE5039) (make-i/o-read-error . lE5038) (make-i/o-port-error . lE5037) (make-i/o-invalid-position-error . lE5036) (make-i/o-filename-error . lE5035) (make-i/o-file-protection-error . lE5034) (make-i/o-file-is-read-only-error . lE5033) (make-i/o-file-does-not-exist-error . lE5032) (make-i/o-file-already-exists-error . lE5031) (make-i/o-error . lE5030) (make-i/o-encoding-error . lE502f) (make-i/o-decoding-error . lE502e) (make-custom-textual-output-port . lE502d) (make-custom-textual-input/output-port . lE502c) (make-custom-textual-input-port . lE502b) (make-custom-binary-output-port . lE502a) (make-custom-binary-input/output-port . lE5029) (make-custom-binary-input-port . lE5028) (make-bytevector . lE5027) (lookahead-u8 . lE5026) (lookahead-char . lE5025) (i/o-write-error? . lE5024) (i/o-read-error? . lE5023) (i/o-port-error? . lE5022) (i/o-invalid-position-error? . lE5021) (i/o-filename-error? . lE5020) (i/o-file-protection-error? . lE501f) (i/o-file-is-read-only-error? . lE501e) (i/o-file-does-not-exist-error? . lE501d) (i/o-file-already-exists-error? . lE501c) (i/o-error? . lE501b) (i/o-error-position . lE501a) (i/o-error-port . lE5019) (i/o-error-filename . lE5018) (i/o-encoding-error? . lE5017) (i/o-encoding-error-char . lE5016) (i/o-decoding-error? . lE5015) (get-u8 . lE5014) (get-string-n! . lE5013) (get-string-n . lE5012) (get-string-all . lE5011) (get-line . lE5010) (get-datum . lE500f) (get-char . lE500e) (get-bytevector-some . lE500d) (get-bytevector-n! . lE500c) (get-bytevector-n . lE500b) (get-bytevector-all . lE500a) (flush-output-port . lE5009) (close-port . lE5008) (scheme-report-environment . lE31b5) (quotient . lE5007) (null-environment . lE31b3) (remainder . lE5006) (modulo . lE5005) (inexact->exact . lE5004) (force . lE5003) (exact->inexact . lE5002) (make-promise . lE5001) (exit . lE5000) (command-line . lE4c92) (string-fill! . lE4fff) (string-set! . lE4ffe) (set-cdr! . lE4ffd) (set-car! . lE4ffc) (remove . lE4ffb) (remv . lE4ffa) (remp . lE4ff9) (remq . lE4ff8) (partition . lE4ff7) (memv . lE4ff6) (memq . lE4ff5) (memp . lE4ff4) (member . lE4ff3) (exists . lE4ff2) (for-all . lE4ff1) (fold-right . lE4ff0) (fold-left . lE4fef) (find . lE4fee) (filter . lE4fed) (cons* . lE4fec) (assv . lE4feb) (assq . lE4fea) (assp . lE4fe9) (assoc . lE4fe8) (call-with-string-output-port . lE4fe7) (call-with-port . lE4fe6) (call-with-bytevector-output-port . lE4fe5) (bytevector->string . lE4fe4) (buffer-mode? . lE4fe3) (binary-port? . lE4fe2) (with-exception-handler . lE4fe1) (raise-continuable . lE4fe0) (raise . lE4fdf) (eval . lE31b9) (environment . lE31b1) (make-enumeration . lE4fde) (enum-set=? . lE4fdd) (enum-set-universe . lE4fdc) (enum-set-union . lE4fdb) (enum-set-subset? . lE4fda) (enum-set-projection . lE4fd9) (enum-set-member? . lE4fd8) (enum-set-intersection . lE4fd7) (enum-set-indexer . lE4fd6) (enum-set-difference . lE4fd5) (enum-set-constructor . lE4fd4) (enum-set-complement . lE4fd3) (enum-set->list . lE4fd2) (who-condition? . lE4fd1) (warning? . lE4fd0) (violation? . lE4fcf) (undefined-violation? . lE4fce) (syntax-violation? . lE4fcd) (syntax-violation-subform . lE4fcc) (syntax-violation-form . lE4fcb) (syntax-violation . lE31d9) (simple-conditions . lE4fca) (serious-condition? . lE4fc9) (non-continuable-violation? . lE4fc8) (message-condition? . lE4fc7) (make-who-condition . lE4fc6) (make-warning . lE4fc5) (make-violation . lE4fc4) (make-undefined-violation . lE4fc3) (make-syntax-violation . lE4fc2) (make-serious-condition . lE4fc1) (make-non-continuable-violation . lE4fc0) (make-message-condition . lE4fbf) (make-lexical-violation . lE4fbe) (make-irritants-condition . lE4fbd) (make-implementation-restriction-violation . lE4fbc) (make-error . lE4fbb) (make-assertion-violation . lE4fba) (lexical-violation? . lE4fb9) (irritants-condition? . lE4fb8) (implementation-restriction-violation? . lE4fb7) (error? . lE4fb6) (condition-who . lE4fb5) (condition-predicate . lE4fb4) (condition-message . lE4fb3) (condition-irritants . lE4fb2) (condition-accessor . lE4fb1) (condition . lE4fb0) (assertion-violation? . lE4faf) (condition? . lE4fae) (utf32->string . lE4fad) (utf16->string . lE4fac) (utf8->string . lE4fab) (uint-list->bytevector . lE4faa) (u8-list->bytevector . lE4fa9) (string->utf8 . lE4fa8) (string->utf32 . lE4fa7) (string->utf16 . lE4fa6) (sint-list->bytevector . lE4fa5) (native-endianness . lE4fa4) (bytevector? . lE4fa3) (bytevector=? . lE4fa2) (bytevector-uint-set! . lE4fa1) (bytevector-uint-ref . lE4fa0) (bytevector-u8-set! . lE4f9f) (bytevector-u8-ref . lE4f9e) (bytevector-u64-set! . lE4f9d) (bytevector-u64-ref . lE4f9c) (bytevector-u64-native-set! . lE4f9b) (bytevector-u64-native-ref . lE4f9a) (bytevector-u32-set! . lE4f99) (bytevector-u32-ref . lE4f98) (bytevector-u32-native-set! . lE4f97) (bytevector-u32-native-ref . lE4f96) (bytevector-u16-set! . lE4f95) (bytevector-u16-ref . lE4f94) (bytevector-u16-native-set! . lE4f93) (bytevector-u16-native-ref . lE4f92) (bytevector-sint-set! . lE4f91) (bytevector-sint-ref . lE4f90) (bytevector-s8-set! . lE4f8f) (bytevector-s8-ref . lE4f8e) (bytevector-s64-set! . lE4f8d) (bytevector-s64-ref . lE4f8c) (bytevector-s64-native-set! . lE4f8b) (bytevector-s64-native-ref . lE4f8a) (bytevector-s32-set! . lE4f89) (bytevector-s32-ref . lE4f88) (bytevector-s32-native-set! . lE4f87) (bytevector-s32-native-ref . lE4f86) (bytevector-s16-set! . lE4f85) (bytevector-s16-ref . lE4f84) (bytevector-s16-native-set! . lE4f83) (bytevector-s16-native-ref . lE4f82) (bytevector-length . lE4f81) (bytevector-ieee-single-ref . lE4f80) (bytevector-ieee-single-set! . lE4f7f) (bytevector-ieee-single-native-set! . lE4f7e) (bytevector-ieee-single-native-ref . lE4f7d) (bytevector-ieee-double-set! . lE4f7c) (bytevector-ieee-double-ref . lE4f7b) (bytevector-ieee-double-native-set! . lE4f7a) (bytevector-ieee-double-native-ref . lE4f79) (bytevector-fill! . lE4f78) (bytevector-copy! . lE4f77) (bytevector-copy . lE4f76) (bytevector->uint-list . lE4f75) (bytevector->u8-list . lE4f74) (bytevector->sint-list . lE4f73) (no-nans-violation? . lE4f72) (no-infinities-violation? . lE4f71) (make-no-nans-violation . lE4f70) (make-no-infinities-violation . lE4f6f) (real->flonum . lE4f6e) (flzero? . lE4f6d) (fltruncate . lE4f6c) (fltan . lE4f6b) (flsqrt . lE4f6a) (flsin . lE4f69) (flround . lE4f68) (flpositive? . lE4f67) (flonum? . lE4f66) (flodd? . lE4f65) (flnumerator . lE4f64) (flnegative? . lE4f63) (flnan? . lE4f62) (flmod0 . lE4f61) (flmod . lE4f60) (flmin . lE4f5f) (flmax . lE4f5e) (fllog . lE4f5d) (flinteger? . lE4f5c) (flinfinite? . lE4f5b) (flfloor . lE4f5a) (flfinite? . lE4f59) (flexpt . lE4f58) (flexp . lE4f57) (fleven? . lE4f56) (fldiv0-and-mod0 . lE4f55) (fldiv0 . lE4f54) (fldiv-and-mod . lE4f53) (fldiv . lE4f52) (fldenominator . lE4f51) (flcos . lE4f50) (flceiling . lE4f4f) (flatan . lE4f4e) (flasin . lE4f4d) (flacos . lE4f4c) (flabs . lE4f4b) (fl>? . lE4f4a) (fl>=? . lE4f49) (fl=? . lE4f48) (fl<? . lE4f47) (fl<=? . lE4f46) (fl/ . lE4f45) (fl- . lE4f44) (fl+ . lE4f43) (fl* . lE4f42) (fixnum->flonum . lE4f41) (fxzero? . lE4f40) (fxxor . lE4f3f) (fxrotate-bit-field . lE4f3e) (fxreverse-bit-field . lE4f3d) (fxpositive? . lE4f3c) (fxodd? . lE4f3b) (fxnot . lE4f3a) (fxnegative? . lE4f39) (fxmod0 . lE4f38) (fxmod . lE4f37) (fxmin . lE4f36) (fxmax . lE4f35) (fxlength . lE4f34) (fxior . lE4f33) (fxif . lE4f32) (fxfirst-bit-set . lE4f31) (fxeven? . lE4f30) (fxdiv0-and-mod0 . lE4f2f) (fxdiv0 . lE4f2e) (fxdiv-and-mod . lE4f2d) (fxdiv . lE4f2c) (fxcopy-bit-field . lE4f2b) (fxcopy-bit . lE4f2a) (fxbit-set? . lE4f29) (fxbit-field . lE4f28) (fxbit-count . lE4f27) (fxarithmetic-shift-right . lE4f26) (fxarithmetic-shift-left . lE4f25) (fxarithmetic-shift . lE4f24) (fxand . lE4f23) (fx>? . lE4f22) (fx>=? . lE4f21) (fx=? . lE4f20) (fx<? . lE4f1f) (fx<=? . lE4f1e) (fx-/carry . lE4f1d) (fx- . lE4f1c) (fx+/carry . lE4f1b) (fx+ . lE4f1a) (fx*/carry . lE4f19) (fx* . lE4f18) (greatest-fixnum . lE4f17) (least-fixnum . lE4f16) (fixnum-width . lE4f15) (fixnum? . lE4f14) (bitwise-rotate-bit-field . lE4f13) (bitwise-reverse-bit-field . lE4f12) (bitwise-length . lE4f11) (bitwise-if . lE4f10) (bitwise-first-bit-set . lE4f0f) (bitwise-copy-bit-field . lE4f0e) (bitwise-copy-bit . lE4f0d) (bitwise-bit-set? . lE4f0c) (bitwise-bit-field . lE4f0b) (bitwise-bit-count . lE4f0a) (bitwise-xor . lE4f09) (bitwise-ior . lE4f08) (bitwise-and . lE4f07) (bitwise-not . lE4f06) (bitwise-arithmetic-shift-right . lE4f05) (bitwise-arithmetic-shift-left . lE4f04) (bitwise-arithmetic-shift . lE4f03) (zero? . lE4f02) (vector? . lE4f01) (vector-set! . lE4f00) (vector-ref . lE4eff) (vector-map . lE4efe) (vector-length . lE4efd) (vector-for-each . lE4efc) (vector-fill! . lE4efb) (vector->list . lE4efa) (vector . lE4ef9) (values . lE4ef8) (truncate . lE4ef7) (tan . lE4ef6) (symbol? . lE4ef5) (symbol=? . lE4ef4) (symbol->string . lE4ef3) (substring . lE4ef2) (string? . lE4ef1) (string>? . lE4ef0) (string>=? . lE4eef) (string=? . lE4eee) (string<? . lE4eed) (string<=? . lE4eec) (string-ref . lE4eeb) (string-length . lE4eea) (string-for-each . lE4ee9) (string-copy . lE4ee8) (string-append . lE4ee7) (string->symbol . lE4ee6) (string->number . lE4ee5) (string->list . lE4ee4) (string . lE4ee3) (sqrt . lE4ee2) (sin . lE4ee1) (round . lE4ee0) (reverse . lE4edf) (real? . lE4ede) (real-valued? . lE4edd) (real-part . lE4edc) (rationalize . lE4edb) (rational? . lE4eda) (rational-valued? . lE4ed9) (procedure? . lE4ed8) (positive? . lE4ed7) (pair? . lE4ed6) (odd? . lE4ed5) (numerator . lE4ed4) (number? . lE4ed3) (number->string . lE4ed2) (null? . lE4ed1) (not . lE4ed0) (negative? . lE4ecf) (nan? . lE4ece) (min . lE4ecd) (max . lE4ecc) (map . lE4ecb) (make-vector . lE4eca) (make-string . lE4ec9) (make-rectangular . lE4ec8) (make-polar . lE4ec7) (magnitude . lE4ec6) (log . lE4ec5) (list? . lE4ec4) (list-tail . lE4ec3) (list-ref . lE4ec2) (list->vector . lE4ec1) (list->string . lE4ec0) (list . lE4ebf) (length . lE4ebe) (lcm . lE4ebd) (integer? . lE4ebc) (integer-valued? . lE4ebb) (integer->char . lE4eba) (infinite? . lE4eb9) (inexact? . lE4eb8) (inexact . lE4eb7) (imag-part . lE4eb6) (gcd . lE4eb5) (for-each . lE4eb4) (floor . lE4eb3) (finite? . lE4eb2) (expt . lE4eb1) (exp . lE4eb0) (exact? . lE4eaf) (exact-integer-sqrt . lE4eae) (exact . lE4ead) (even? . lE4eac) (error . lE4eab) (eqv? . lE4eaa) (equal? . lE4ea9) (eq? . lE4ea8) (dynamic-wind . lE4ea7) (div0-and-mod0 . lE4ea6) (mod0 . lE4ea5) (div0 . lE4ea4) (div-and-mod . lE4ea3) (mod . lE4ea2) (div . lE4ea1) (denominator . lE4ea0) (cos . lE4e9f) (cons . lE4e9e) (complex? . lE4e9d) (char? . lE4e9c) (char>? . lE4e9b) (char>=? . lE4e9a) (char=? . lE4e99) (char<? . lE4e98) (char<=? . lE4e97) (char->integer . lE4e96) (ceiling . lE4e95) (call-with-values . lE4e94) (call/cc . lE4e93) (call-with-current-continuation . lE4e92) (cddddr . lE4e91) (cdddar . lE4e90) (cddadr . lE4e8f) (cddaar . lE4e8e) (cdaddr . lE4e8d) (cdadar . lE4e8c) (cdaadr . lE4e8b) (cdaaar . lE4e8a) (cadddr . lE4e89) (caddar . lE4e88) (cadadr . lE4e87) (cadaar . lE4e86) (caaddr . lE4e85) (caadar . lE4e84) (caaadr . lE4e83) (caaaar . lE4e82) (cdddr . lE4e81) (cddar . lE4e80) (cdadr . lE4e7f) (cdaar . lE4e7e) (caddr . lE4e7d) (cadar . lE4e7c) (caadr . lE4e7b) (caaar . lE4e7a) (cddr . lE4e79) (cdar . lE4e78) (cadr . lE4e77) (caar . lE4e76) (cdr . lE4e75) (car . lE4e74) (boolean? . lE4e73) (boolean=? . lE4e72) (atan . lE4e71) (assertion-violation . lE4e70) (assertion-error . lE31d3) (asin . lE4e6f) (apply . lE4e6e) (append . lE4e6d) (angle . lE4e6c) (acos . lE4e6b) (abs . lE4e6a) (/ . lE4e69) (* . lE4e68) (- . lE4e67) (+ . lE4e66) (>= . lE4e65) (> . lE4e64) (= . lE4e63) (<= . lE4e62) (< . lE4e61) (library . lE4e60) (&no-nans . lE4e5f) (&no-infinities . lE4e5e) (&i/o-encoding . lE4e5d) (&i/o-decoding . lE4e5c) (&i/o-port . lE4e5b) (&i/o-file-does-not-exist . lE4e5a) (&i/o-file-already-exists . lE4e59) (&i/o-file-is-read-only . lE4e58) (&i/o-file-protection . lE4e57) (&i/o-filename . lE4e56) (&i/o-invalid-position . lE4e55) (&i/o-write . lE4e54) (&i/o-read . lE4e53) (&i/o . lE4e52) (&undefined . lE4e51) (&syntax . lE4e50) (&lexical . lE4e4f) (&implementation-restriction . lE4e4e) (&non-continuable . lE4e4d) (&who . lE4e4c) (&irritants . lE4e4b) (&assertion . lE4e4a) (&violation . lE4e49) (&error . lE4e48) (&serious . lE4e47) (&warning . lE4e46) (&message . lE4e45) (&condition . lE4e44) (define-condition-type . lE4e43) (define-enumeration . lE4e42) (define-record-type . lE4e41) (parent-rtd . lE4e40) (nongenerative . lE4e3f) (opaque . lE4e3e) (sealed . lE4e3d) (protocol . lE4e3c) (parent . lE4e3b) (immutable . lE4e3a) (mutable . lE4e39) (fields . lE4e38) (error-handling-mode . lE4e37) (file-options . lE4e36) (buffer-mode . lE4e35) (eol-style . lE4e34) (guard . lE4e33) (trace-define . lE4e32) (trace-lambda . lE4e31) (unsyntax-splicing . lE4e30) (unsyntax . lE4e2f) (unquote-splicing . lE4e2e) (unquote . lE4e2d) (_ . lE4e2c) (else . lE4e2b) (=> . lE4e2a) (... . lE4e29) (assert . lE4e28) (endianness . lE4e27) (delay . lE4e26) (time . lE4e25) (do . lE4e24) (cond . lE4e23) (let* . lE4e22) (let*-values . lE4e21) (let-values . lE4e20) (identifier-syntax . lE4e1f) (with-syntax . lE4e1e) (quasisyntax . lE4e1d) (quasiquote . lE4e1c) (syntax-rules . lE4e1b) (include . lE4e1a) (define-struct . lE4e19) (record-constructor-descriptor . lE4e18) (record-type-descriptor . lE4e17) (case . lE4e16) (parameterize . lE4e15) (unless . lE4e14) (when . lE4e13) (or . lE4e12) (and . lE4e11) (if . lE4e10) (let . lE4e0f) (letrec* . lE4e0e) (letrec . lE4e0d) (type-descriptor . lE4e0c) (case-lambda . lE4e0b) (lambda . lE4e0a) (syntax . lE4e09) (syntax-case . lE4e08) (quote . lE4e07) (foreign-call . lE4e06) (letrec-syntax . lE4e05) (let-syntax . lE4e04) (set! . lE4e03) (import . lE4e02) (begin . lE4e01) (module . lE4e00) (define-syntax . lE4dff) (define . lE4dfe)) '((lE51a5 core-prim . &no-nans-rcd) (lE51a4 core-prim . &no-nans-rtd) (lE51a3 core-prim . &no-infinities-rcd) (lE51a2 core-prim . &no-infinities-rtd) (lE51a1 core-prim . &i/o-encoding-rcd) (lE51a0 core-prim . &i/o-encoding-rtd) (lE519f core-prim . &i/o-decoding-rcd) (lE519e core-prim . &i/o-decoding-rtd) (lE519d core-prim . &i/o-port-rcd) (lE519c core-prim . &i/o-port-rtd) (lE519b core-prim . &i/o-file-does-not-exist-rcd) (lE519a core-prim . &i/o-file-does-not-exist-rtd) (lE5199 core-prim . &i/o-file-already-exists-rcd) (lE5198 core-prim . &i/o-file-already-exists-rtd) (lE5197 core-prim . &i/o-file-is-read-only-rcd) (lE5196 core-prim . &i/o-file-is-read-only-rtd) (lE5195 core-prim . &i/o-file-protection-rcd) (lE5194 core-prim . &i/o-file-protection-rtd) (lE5193 core-prim . &i/o-filename-rcd) (lE5192 core-prim . &i/o-filename-rtd) (lE5191 core-prim . &i/o-invalid-position-rcd) (lE5190 core-prim . &i/o-invalid-position-rtd) (lE518f core-prim . &i/o-write-rcd) (lE518e core-prim . &i/o-write-rtd) (lE518d core-prim . &i/o-read-rcd) (lE518c core-prim . &i/o-read-rtd) (lE518b core-prim . &i/o-rcd) (lE518a core-prim . &i/o-rtd) (lE5189 core-prim . &undefined-rcd) (lE5188 core-prim . &undefined-rtd) (lE5187 core-prim . &syntax-rcd) (lE5186 core-prim . &syntax-rtd) (lE5185 core-prim . &lexical-rcd) (lE5184 core-prim . &lexical-rtd) (lE5183 core-prim . &implementation-restriction-rcd) (lE5182 core-prim . &implementation-restriction-rtd) (lE5181 core-prim . &non-continuable-rcd) (lE5180 core-prim . &non-continuable-rtd) (lE517f core-prim . &who-rcd) (lE517e core-prim . &who-rtd) (lE517d core-prim . &irritants-rcd) (lE517c core-prim . &irritants-rtd) (lE517b core-prim . &assertion-rcd) (lE517a core-prim . &assertion-rtd) (lE5179 core-prim . &violation-rcd) (lE5178 core-prim . &violation-rtd) (lE5177 core-prim . &error-rcd) (lE5176 core-prim . &error-rtd) (lE5175 core-prim . &serious-rcd) (lE5174 core-prim . &serious-rtd) (lE5173 core-prim . &warning-rcd) (lE5172 core-prim . &warning-rtd) (lE5171 core-prim . &message-rcd) (lE5170 core-prim . &message-rtd) (lE516f core-prim . &condition-rcd) (lE516e core-prim . &condition-rtd) (lE31d5 core-prim . syntax-error) (lE30f9 core-prim . syntax-dispatch) (lE516d core-prim . pretty-print) (lE516c core-prim . eval-core) (lE516b core-prim . set-symbol-value!) (lE516a core-prim . symbol-value) (lE5169 core-prim . gensym) (lE5168 core-prim . void) (lE4c98 core-prim . load) (lE31e7 core-prim . interaction-environment) (lE5167 core-prim . char-ready?) (lE5166 core-prim . regexp?) (lE5165 core-prim . read-line) (lE5164 core-prim . gensym-prefix-set!) (lE5163 core-prim . ungensym) (lE5162 core-prim . alist->eq-hash-table) (lE5161 core-prim . assoc-ref) (lE5160 core-prim . print) (lE515f core-prim . format) (lE515e core-prim . host-os) (lE2b38 core-prim . library-path) (lE515d core-prim . standard-library-path) (lE515c core-prim . ssl-supported?) (lE515b core-prim . ssl-socket?) (lE515a core-prim . socket-sslize!) (lE5159 core-prim . %monapi-name-whereis) (lE5158 core-prim . %monapi-message-send) (lE5157 core-prim . file-newer?) (lE5156 core-prim . stat-mtime) (lE5155 core-prim . write-to-file) (lE5154 core-prim . file->list) (lE5153 core-prim . file->string) (lE5152 core-prim . digit->integer) (lE5151 core-prim . call-with-string-input-port) (lE5150 core-prim . call-with-string-io) (lE514f core-prim . string-split) (lE514e core-prim . bytevector-for-each) (lE514d core-prim . string->regexp) (lE514c core-prim . rxmatch) (lE514b core-prim . regexp-replace-all) (lE514a core-prim . hashtable-fold-left) (lE5149 core-prim . hashtable-for-each) (lE2922 core-prim . mosh-cache-dir) (lE5148 core-prim . call-process) (lE5147 core-prim . local-tz-offset) (lE5146 core-prim . microseconds) (lE5145 core-prim . directory-list) (lE5144 core-prim . set-current-directory!) (lE5143 core-prim . expand-path) (lE5142 core-prim . current-directory) (lE5141 core-prim . %getpid) (lE5140 core-prim . %spawn) (lE513f core-prim . %waitpid) (lE513e core-prim . simple-struct-name) (lE513d core-prim . simple-struct-set!) (lE513c core-prim . simple-struct-ref) (lE513b core-prim . make-simple-struct) (lE513a core-prim . simple-struct?) (lE5139 core-prim . pointer-ref-c-int64) (lE5138 core-prim . pointer-ref-c-int32) (lE5137 core-prim . pointer-ref-c-int16) (lE5136 core-prim . pointer-ref-c-int8) (lE5135 core-prim . pointer-ref-c-uint64) (lE5134 core-prim . pointer-ref-c-uint32) (lE5133 core-prim . pointer-ref-c-uint16) (lE5132 core-prim . pointer-ref-c-uint8) (lE5131 core-prim . pointer-set-c-uint64!) (lE5130 core-prim . pointer-set-c-uint32!) (lE512f core-prim . pointer-set-c-uint16!) (lE512e core-prim . pointer-set-c-uint8!) (lE512d core-prim . pointer-set-c-int64!) (lE512c core-prim . pointer-set-c-int32!) (lE512b core-prim . pointer-set-c-int16!) (lE512a core-prim . pointer-set-c-int8!) (lE5129 core-prim . pointer-set-c-pointer!) (lE5128 core-prim . pointer-set-c-double!) (lE5127 core-prim . pointer-set-c-float!) (lE5126 core-prim . pointer-set-c-long-long!) (lE5125 core-prim . pointer-set-c-long!) (lE5124 core-prim . pointer-set-c-int!) (lE5123 core-prim . pointer-set-c-short!) (lE5122 core-prim . pointer-set-c-char!) (lE5121 core-prim . pointer-ref-c-pointer) (lE5120 core-prim . pointer-ref-c-double) (lE511f core-prim . pointer-ref-c-float) (lE511e core-prim . pointer-ref-c-unsigned-long-long) (lE511d core-prim . pointer-ref-c-signed-long-long) (lE511c core-prim . pointer-ref-c-unsigned-long) (lE511b core-prim . pointer-ref-c-signed-long) (lE511a core-prim . pointer-ref-c-unsigned-int) (lE5119 core-prim . pointer-ref-c-signed-int) (lE5118 core-prim . pointer-ref-c-unsigned-short) (lE5117 core-prim . pointer-ref-c-signed-short) (lE5116 core-prim . pointer-ref-c-unsigned-char) (lE5115 core-prim . pointer-ref-c-signed-char) (lE5114 core-prim . pointer->integer) (lE5113 core-prim . integer->pointer) (lE5112 core-prim . pointer?) (lE5111 core-prim . shared-errno) (lE5110 core-prim . %ffi-free-c-callback-trampoline) (lE510f core-prim . %ffi-make-c-callback-trampoline) (lE510e core-prim . %ffi-free) (lE510d core-prim . %ffi-malloc) (lE510c core-prim . %ffi-supported?) (lE510b core-prim . %ffi-pointer->string) (lE510a core-prim . %ffi-call) (lE5109 core-prim . %ffi-lookup) (lE5108 core-prim . %ffi-open) (lE5107 core-prim . null-terminated-utf8->string) (lE5106 core-prim . null-terminated-bytevector->string) (lE5105 core-prim . %exec) (lE5104 core-prim . %fork) (lE5103 core-prim . %pipe) (lE5102 core-prim . p) (lE5101 core-prim . open-output-string) (lE5100 core-prim . get-output-string) (lE50ff core-prim . file-stat-ctime) (lE50fe core-prim . file-stat-atime) (lE50fd core-prim . file-stat-mtime) (lE50fc core-prim . file-size-in-bytes) (lE50fb core-prim . file-writable?) (lE50fa core-prim . file-executable?) (lE50f9 core-prim . file-readable?) (lE50f8 core-prim . file-regular?) (lE50f7 core-prim . file-symbolic-link?) (lE50f6 core-prim . file-directory?) (lE50f5 core-prim . create-symbolic-link) (lE50f4 core-prim . rename-file) (lE50f3 core-prim . delete-directory) (lE50f2 core-prim . create-directory) (lE50f1 core-prim . create-mosh-cache-dir) (lE50f0 core-prim . get-environment-variables) (lE50ef core-prim . current-exception-handler) (lE50ee core-prim . get-environment-variable) (lE50ed core-prim . join-wraps) (lE50ec core-prim . id->real-label) (lE50eb core-prim . same-marks?) (lE50ea core-prim . same-marks*?) (lE50e9 core-prim . get-timeofday) (lE50e8 core-prim . get-command-line) (lE50e7 core-prim . sys-display) (lE50e6 core-prim . whereis) (lE50e5 core-prim . register) (lE50e4 core-prim . vm-join!) (lE50e3 core-prim . vm-set-value!) (lE50e2 core-prim . vm?) (lE50e1 core-prim . main-vm?) (lE50e0 core-prim . vm-eval) (lE50df core-prim . vm-self) (lE50de core-prim . vm-start!) (lE50dd core-prim . make-vm) (lE50dc core-prim . mutex-try-lock!) (lE50db core-prim . mutex-unlock!) (lE50da core-prim . mutex-lock!) (lE50d9 core-prim . mutex?) (lE50d8 core-prim . make-mutex) (lE50d7 core-prim . condition-variable-notify-all!) (lE50d6 core-prim . condition-variable-notify!) (lE50d5 core-prim . condition-variable-wait!) (lE50d4 core-prim . make-condition-variable) (lE50d3 core-prim . write/ss) (lE50d2 core-prim . mosh-executable-path) (lE50d1 core-prim . make-file-options) (lE50d0 core-prim . source-info) (lE50cf core-prim . make-compiler-instruction) (lE50ce core-prim . make-instruction) (lE50cd core-prim . set-source-info!) (lE50cc core-prim . bignum?) (lE50cb core-prim . fast-equal?) (lE50ca core-prim . fasl-read) (lE50c9 core-prim . fasl-write) (lE50c8 core-prim . time-usage) (lE50c7 core-prim . os-constant) (lE50c6 core-prim . condition-printer) (lE50c5 core-prim . disasm) (lE2920 core-prim . make-parameter) (lE50c4 core-prim . socket-port) (lE50c3 core-prim . socket-shutdown) (lE50c2 core-prim . socket-close) (lE50c1 core-prim . socket-send) (lE50c0 core-prim . socket-recv!) (lE50bf core-prim . socket-recv) (lE50be core-prim . make-server-socket) (lE50bd core-prim . make-client-socket) (lE50bc core-prim . socket-accept) (lE50bb core-prim . socket?) (lE50ba core-prim . string-upcase) (lE50b9 core-prim . string-titlecase) (lE50b8 core-prim . string-normalize-nfkd) (lE50b7 core-prim . string-normalize-nfkc) (lE50b6 core-prim . string-normalize-nfd) (lE50b5 core-prim . string-normalize-nfc) (lE50b4 core-prim . string-foldcase) (lE50b3 core-prim . string-downcase) (lE50b2 core-prim . string-ci>?) (lE50b1 core-prim . string-ci>=?) (lE50b0 core-prim . string-ci=?) (lE50af core-prim . string-ci<?) (lE50ae core-prim . string-ci<=?) (lE50ad core-prim . char-whitespace?) (lE50ac core-prim . char-upper-case?) (lE50ab core-prim . char-title-case?) (lE50aa core-prim . char-numeric?) (lE50a9 core-prim . char-lower-case?) (lE50a8 core-prim . char-general-category) (lE50a7 core-prim . char-upcase) (lE50a6 core-prim . char-titlecase) (lE50a5 core-prim . char-foldcase) (lE50a4 core-prim . char-downcase) (lE50a3 core-prim . char-ci>?) (lE50a2 core-prim . char-ci>=?) (lE50a1 core-prim . char-ci=?) (lE50a0 core-prim . char-ci<?) (lE509f core-prim . char-ci<=?) (lE509e core-prim . char-alphabetic?) (lE2f24 core-prim . make-variable-transformer) (lE31db core-prim . identifier?) (lE31c7 core-prim . generate-temporaries) (lE31c9 core-prim . free-identifier=?) (lE31df core-prim . syntax->datum) (lE31dd core-prim . datum->syntax) (lE31cb core-prim . bound-identifier=?) (lE509d core-prim . record-type-descriptor?) (lE509c core-prim . record-predicate) (lE509b core-prim . record-mutator) (lE509a core-prim . record-constructor) (lE5099 core-prim . record-accessor) (lE5098 core-prim . make-record-type-descriptor) (lE5097 core-prim . make-record-constructor-descriptor) (lE5096 core-prim . record?) (lE5095 core-prim . record-type-uid) (lE5094 core-prim . record-type-sealed?) (lE5093 core-prim . record-type-parent) (lE5092 core-prim . record-type-opaque?) (lE5091 core-prim . record-type-name) (lE5090 core-prim . record-type-generative?) (lE508f core-prim . record-type-field-names) (lE508e core-prim . record-rtd) (lE508d core-prim . record-field-mutable?) (lE508c core-prim . delete-file) (lE508b core-prim . file-exists?) (lE508a core-prim . vector-sort!) (lE5089 core-prim . vector-sort) (lE5088 core-prim . list-sort) (lE5087 core-prim . symbol-hash) (lE5086 core-prim . string-ci-hash) (lE5085 core-prim . string-hash) (lE5084 core-prim . equal-hash) (lE5083 core-prim . hashtable-equivalence-function) (lE5082 core-prim . make-hashtable) (lE5081 core-prim . hashtable-hash-function) (lE5080 core-prim . make-eqv-hashtable) (lE507f core-prim . make-eq-hashtable) (lE507e core-prim . hashtable?) (lE507d core-prim . hashtable-update!) (lE507c core-prim . hashtable-size) (lE507b core-prim . hashtable-set!) (lE507a core-prim . hashtable-ref) (lE5079 core-prim . hashtable-mutable?) (lE5078 core-prim . hashtable-keys) (lE5077 core-prim . hashtable-entries) (lE5076 core-prim . hashtable-delete!) (lE5075 core-prim . hashtable-copy) (lE5074 core-prim . hashtable-contains?) (lE5073 core-prim . hashtable-clear!) (lE5072 core-prim . call-with-output-file) (lE5071 core-prim . call-with-input-file) (lE5070 core-prim . write-char) (lE506f core-prim . write) (lE506e core-prim . with-output-to-file) (lE506d core-prim . with-input-from-file) (lE506c core-prim . read-char) (lE506b core-prim . read) (lE506a core-prim . peek-char) (lE5069 core-prim . open-output-file) (lE5068 core-prim . open-input-file) (lE5067 core-prim . newline) (lE5066 core-prim . display) (lE5065 core-prim . close-output-port) (lE5064 core-prim . close-input-port) (lE5063 core-prim . eof-object?) (lE5062 core-prim . eof-object) (lE5061 core-prim . current-error-port) (lE5060 core-prim . current-output-port) (lE505f core-prim . current-input-port) (lE505e core-prim . output-port?) (lE505d core-prim . input-port?) (lE505c core-prim . utf-8-codec) (lE505b core-prim . utf-16-codec) (lE505a core-prim . transcoder-error-handling-mode) (lE5059 core-prim . transcoder-eol-style) (lE5058 core-prim . transcoder-codec) (lE5057 core-prim . transcoded-port) (lE5056 core-prim . textual-port?) (lE5055 core-prim . string->bytevector) (lE5054 core-prim . standard-output-port) (lE5053 core-prim . standard-input-port) (lE5052 core-prim . standard-error-port) (lE5051 core-prim . set-port-position!) (lE5050 core-prim . put-u8) (lE504f core-prim . put-string) (lE504e core-prim . put-datum) (lE504d core-prim . put-char) (lE504c core-prim . put-bytevector) (lE504b core-prim . port?) (lE504a core-prim . port-transcoder) (lE5049 core-prim . port-position) (lE5048 core-prim . port-has-set-port-position!?) (lE5047 core-prim . port-has-port-position?) (lE5046 core-prim . port-eof?) (lE5045 core-prim . output-port-buffer-mode) (lE5044 core-prim . open-string-output-port) (lE5043 core-prim . open-string-input-port) (lE5042 core-prim . open-file-output-port) (lE5041 core-prim . open-file-input/output-port) (lE5040 core-prim . open-file-input-port) (lE503f core-prim . open-bytevector-output-port) (lE503e core-prim . open-bytevector-input-port) (lE503d core-prim . native-transcoder) (lE503c core-prim . native-eol-style) (lE503b core-prim . make-transcoder) (lE503a core-prim . latin-1-codec) (lE5039 core-prim . make-i/o-write-error) (lE5038 core-prim . make-i/o-read-error) (lE5037 core-prim . make-i/o-port-error) (lE5036 core-prim . make-i/o-invalid-position-error) (lE5035 core-prim . make-i/o-filename-error) (lE5034 core-prim . make-i/o-file-protection-error) (lE5033 core-prim . make-i/o-file-is-read-only-error) (lE5032 core-prim . make-i/o-file-does-not-exist-error) (lE5031 core-prim . make-i/o-file-already-exists-error) (lE5030 core-prim . make-i/o-error) (lE502f core-prim . make-i/o-encoding-error) (lE502e core-prim . make-i/o-decoding-error) (lE502d core-prim . make-custom-textual-output-port) (lE502c core-prim . make-custom-textual-input/output-port) (lE502b core-prim . make-custom-textual-input-port) (lE502a core-prim . make-custom-binary-output-port) (lE5029 core-prim . make-custom-binary-input/output-port) (lE5028 core-prim . make-custom-binary-input-port) (lE5027 core-prim . make-bytevector) (lE5026 core-prim . lookahead-u8) (lE5025 core-prim . lookahead-char) (lE5024 core-prim . i/o-write-error?) (lE5023 core-prim . i/o-read-error?) (lE5022 core-prim . i/o-port-error?) (lE5021 core-prim . i/o-invalid-position-error?) (lE5020 core-prim . i/o-filename-error?) (lE501f core-prim . i/o-file-protection-error?) (lE501e core-prim . i/o-file-is-read-only-error?) (lE501d core-prim . i/o-file-does-not-exist-error?) (lE501c core-prim . i/o-file-already-exists-error?) (lE501b core-prim . i/o-error?) (lE501a core-prim . i/o-error-position) (lE5019 core-prim . i/o-error-port) (lE5018 core-prim . i/o-error-filename) (lE5017 core-prim . i/o-encoding-error?) (lE5016 core-prim . i/o-encoding-error-char) (lE5015 core-prim . i/o-decoding-error?) (lE5014 core-prim . get-u8) (lE5013 core-prim . get-string-n!) (lE5012 core-prim . get-string-n) (lE5011 core-prim . get-string-all) (lE5010 core-prim . get-line) (lE500f core-prim . get-datum) (lE500e core-prim . get-char) (lE500d core-prim . get-bytevector-some) (lE500c core-prim . get-bytevector-n!) (lE500b core-prim . get-bytevector-n) (lE500a core-prim . get-bytevector-all) (lE5009 core-prim . flush-output-port) (lE5008 core-prim . close-port) (lE31b5 core-prim . scheme-report-environment) (lE5007 core-prim . quotient) (lE31b3 core-prim . null-environment) (lE5006 core-prim . remainder) (lE5005 core-prim . modulo) (lE5004 core-prim . inexact->exact) (lE5003 core-prim . force) (lE5002 core-prim . exact->inexact) (lE5001 core-prim . make-promise) (lE5000 core-prim . exit) (lE4c92 core-prim . command-line) (lE4fff core-prim . string-fill!) (lE4ffe core-prim . string-set!) (lE4ffd core-prim . set-cdr!) (lE4ffc core-prim . set-car!) (lE4ffb core-prim . remove) (lE4ffa core-prim . remv) (lE4ff9 core-prim . remp) (lE4ff8 core-prim . remq) (lE4ff7 core-prim . partition) (lE4ff6 core-prim . memv) (lE4ff5 core-prim . memq) (lE4ff4 core-prim . memp) (lE4ff3 core-prim . member) (lE4ff2 core-prim . exists) (lE4ff1 core-prim . for-all) (lE4ff0 core-prim . fold-right) (lE4fef core-prim . fold-left) (lE4fee core-prim . find) (lE4fed core-prim . filter) (lE4fec core-prim . cons*) (lE4feb core-prim . assv) (lE4fea core-prim . assq) (lE4fe9 core-prim . assp) (lE4fe8 core-prim . assoc) (lE4fe7 core-prim . call-with-string-output-port) (lE4fe6 core-prim . call-with-port) (lE4fe5 core-prim . call-with-bytevector-output-port) (lE4fe4 core-prim . bytevector->string) (lE4fe3 core-prim . buffer-mode?) (lE4fe2 core-prim . binary-port?) (lE4fe1 core-prim . with-exception-handler) (lE4fe0 core-prim . raise-continuable) (lE4fdf core-prim . raise) (lE31b9 core-prim . eval) (lE31b1 core-prim . environment) (lE4fde core-prim . make-enumeration) (lE4fdd core-prim . enum-set=?) (lE4fdc core-prim . enum-set-universe) (lE4fdb core-prim . enum-set-union) (lE4fda core-prim . enum-set-subset?) (lE4fd9 core-prim . enum-set-projection) (lE4fd8 core-prim . enum-set-member?) (lE4fd7 core-prim . enum-set-intersection) (lE4fd6 core-prim . enum-set-indexer) (lE4fd5 core-prim . enum-set-difference) (lE4fd4 core-prim . enum-set-constructor) (lE4fd3 core-prim . enum-set-complement) (lE4fd2 core-prim . enum-set->list) (lE4fd1 core-prim . who-condition?) (lE4fd0 core-prim . warning?) (lE4fcf core-prim . violation?) (lE4fce core-prim . undefined-violation?) (lE4fcd core-prim . syntax-violation?) (lE4fcc core-prim . syntax-violation-subform) (lE4fcb core-prim . syntax-violation-form) (lE31d9 core-prim . syntax-violation) (lE4fca core-prim . simple-conditions) (lE4fc9 core-prim . serious-condition?) (lE4fc8 core-prim . non-continuable-violation?) (lE4fc7 core-prim . message-condition?) (lE4fc6 core-prim . make-who-condition) (lE4fc5 core-prim . make-warning) (lE4fc4 core-prim . make-violation) (lE4fc3 core-prim . make-undefined-violation) (lE4fc2 core-prim . make-syntax-violation) (lE4fc1 core-prim . make-serious-condition) (lE4fc0 core-prim . make-non-continuable-violation) (lE4fbf core-prim . make-message-condition) (lE4fbe core-prim . make-lexical-violation) (lE4fbd core-prim . make-irritants-condition) (lE4fbc core-prim . make-implementation-restriction-violation) (lE4fbb core-prim . make-error) (lE4fba core-prim . make-assertion-violation) (lE4fb9 core-prim . lexical-violation?) (lE4fb8 core-prim . irritants-condition?) (lE4fb7 core-prim . implementation-restriction-violation?) (lE4fb6 core-prim . error?) (lE4fb5 core-prim . condition-who) (lE4fb4 core-prim . condition-predicate) (lE4fb3 core-prim . condition-message) (lE4fb2 core-prim . condition-irritants) (lE4fb1 core-prim . condition-accessor) (lE4fb0 core-prim . condition) (lE4faf core-prim . assertion-violation?) (lE4fae core-prim . condition?) (lE4fad core-prim . utf32->string) (lE4fac core-prim . utf16->string) (lE4fab core-prim . utf8->string) (lE4faa core-prim . uint-list->bytevector) (lE4fa9 core-prim . u8-list->bytevector) (lE4fa8 core-prim . string->utf8) (lE4fa7 core-prim . string->utf32) (lE4fa6 core-prim . string->utf16) (lE4fa5 core-prim . sint-list->bytevector) (lE4fa4 core-prim . native-endianness) (lE4fa3 core-prim . bytevector?) (lE4fa2 core-prim . bytevector=?) (lE4fa1 core-prim . bytevector-uint-set!) (lE4fa0 core-prim . bytevector-uint-ref) (lE4f9f core-prim . bytevector-u8-set!) (lE4f9e core-prim . bytevector-u8-ref) (lE4f9d core-prim . bytevector-u64-set!) (lE4f9c core-prim . bytevector-u64-ref) (lE4f9b core-prim . bytevector-u64-native-set!) (lE4f9a core-prim . bytevector-u64-native-ref) (lE4f99 core-prim . bytevector-u32-set!) (lE4f98 core-prim . bytevector-u32-ref) (lE4f97 core-prim . bytevector-u32-native-set!) (lE4f96 core-prim . bytevector-u32-native-ref) (lE4f95 core-prim . bytevector-u16-set!) (lE4f94 core-prim . bytevector-u16-ref) (lE4f93 core-prim . bytevector-u16-native-set!) (lE4f92 core-prim . bytevector-u16-native-ref) (lE4f91 core-prim . bytevector-sint-set!) (lE4f90 core-prim . bytevector-sint-ref) (lE4f8f core-prim . bytevector-s8-set!) (lE4f8e core-prim . bytevector-s8-ref) (lE4f8d core-prim . bytevector-s64-set!) (lE4f8c core-prim . bytevector-s64-ref) (lE4f8b core-prim . bytevector-s64-native-set!) (lE4f8a core-prim . bytevector-s64-native-ref) (lE4f89 core-prim . bytevector-s32-set!) (lE4f88 core-prim . bytevector-s32-ref) (lE4f87 core-prim . bytevector-s32-native-set!) (lE4f86 core-prim . bytevector-s32-native-ref) (lE4f85 core-prim . bytevector-s16-set!) (lE4f84 core-prim . bytevector-s16-ref) (lE4f83 core-prim . bytevector-s16-native-set!) (lE4f82 core-prim . bytevector-s16-native-ref) (lE4f81 core-prim . bytevector-length) (lE4f80 core-prim . bytevector-ieee-single-ref) (lE4f7f core-prim . bytevector-ieee-single-set!) (lE4f7e core-prim . bytevector-ieee-single-native-set!) (lE4f7d core-prim . bytevector-ieee-single-native-ref) (lE4f7c core-prim . bytevector-ieee-double-set!) (lE4f7b core-prim . bytevector-ieee-double-ref) (lE4f7a core-prim . bytevector-ieee-double-native-set!) (lE4f79 core-prim . bytevector-ieee-double-native-ref) (lE4f78 core-prim . bytevector-fill!) (lE4f77 core-prim . bytevector-copy!) (lE4f76 core-prim . bytevector-copy) (lE4f75 core-prim . bytevector->uint-list) (lE4f74 core-prim . bytevector->u8-list) (lE4f73 core-prim . bytevector->sint-list) (lE4f72 core-prim . no-nans-violation?) (lE4f71 core-prim . no-infinities-violation?) (lE4f70 core-prim . make-no-nans-violation) (lE4f6f core-prim . make-no-infinities-violation) (lE4f6e core-prim . real->flonum) (lE4f6d core-prim . flzero?) (lE4f6c core-prim . fltruncate) (lE4f6b core-prim . fltan) (lE4f6a core-prim . flsqrt) (lE4f69 core-prim . flsin) (lE4f68 core-prim . flround) (lE4f67 core-prim . flpositive?) (lE4f66 core-prim . flonum?) (lE4f65 core-prim . flodd?) (lE4f64 core-prim . flnumerator) (lE4f63 core-prim . flnegative?) (lE4f62 core-prim . flnan?) (lE4f61 core-prim . flmod0) (lE4f60 core-prim . flmod) (lE4f5f core-prim . flmin) (lE4f5e core-prim . flmax) (lE4f5d core-prim . fllog) (lE4f5c core-prim . flinteger?) (lE4f5b core-prim . flinfinite?) (lE4f5a core-prim . flfloor) (lE4f59 core-prim . flfinite?) (lE4f58 core-prim . flexpt) (lE4f57 core-prim . flexp) (lE4f56 core-prim . fleven?) (lE4f55 core-prim . fldiv0-and-mod0) (lE4f54 core-prim . fldiv0) (lE4f53 core-prim . fldiv-and-mod) (lE4f52 core-prim . fldiv) (lE4f51 core-prim . fldenominator) (lE4f50 core-prim . flcos) (lE4f4f core-prim . flceiling) (lE4f4e core-prim . flatan) (lE4f4d core-prim . flasin) (lE4f4c core-prim . flacos) (lE4f4b core-prim . flabs) (lE4f4a core-prim . fl>?) (lE4f49 core-prim . fl>=?) (lE4f48 core-prim . fl=?) (lE4f47 core-prim . fl<?) (lE4f46 core-prim . fl<=?) (lE4f45 core-prim . fl/) (lE4f44 core-prim . fl-) (lE4f43 core-prim . fl+) (lE4f42 core-prim . fl*) (lE4f41 core-prim . fixnum->flonum) (lE4f40 core-prim . fxzero?) (lE4f3f core-prim . fxxor) (lE4f3e core-prim . fxrotate-bit-field) (lE4f3d core-prim . fxreverse-bit-field) (lE4f3c core-prim . fxpositive?) (lE4f3b core-prim . fxodd?) (lE4f3a core-prim . fxnot) (lE4f39 core-prim . fxnegative?) (lE4f38 core-prim . fxmod0) (lE4f37 core-prim . fxmod) (lE4f36 core-prim . fxmin) (lE4f35 core-prim . fxmax) (lE4f34 core-prim . fxlength) (lE4f33 core-prim . fxior) (lE4f32 core-prim . fxif) (lE4f31 core-prim . fxfirst-bit-set) (lE4f30 core-prim . fxeven?) (lE4f2f core-prim . fxdiv0-and-mod0) (lE4f2e core-prim . fxdiv0) (lE4f2d core-prim . fxdiv-and-mod) (lE4f2c core-prim . fxdiv) (lE4f2b core-prim . fxcopy-bit-field) (lE4f2a core-prim . fxcopy-bit) (lE4f29 core-prim . fxbit-set?) (lE4f28 core-prim . fxbit-field) (lE4f27 core-prim . fxbit-count) (lE4f26 core-prim . fxarithmetic-shift-right) (lE4f25 core-prim . fxarithmetic-shift-left) (lE4f24 core-prim . fxarithmetic-shift) (lE4f23 core-prim . fxand) (lE4f22 core-prim . fx>?) (lE4f21 core-prim . fx>=?) (lE4f20 core-prim . fx=?) (lE4f1f core-prim . fx<?) (lE4f1e core-prim . fx<=?) (lE4f1d core-prim . fx-/carry) (lE4f1c core-prim . fx-) (lE4f1b core-prim . fx+/carry) (lE4f1a core-prim . fx+) (lE4f19 core-prim . fx*/carry) (lE4f18 core-prim . fx*) (lE4f17 core-prim . greatest-fixnum) (lE4f16 core-prim . least-fixnum) (lE4f15 core-prim . fixnum-width) (lE4f14 core-prim . fixnum?) (lE4f13 core-prim . bitwise-rotate-bit-field) (lE4f12 core-prim . bitwise-reverse-bit-field) (lE4f11 core-prim . bitwise-length) (lE4f10 core-prim . bitwise-if) (lE4f0f core-prim . bitwise-first-bit-set) (lE4f0e core-prim . bitwise-copy-bit-field) (lE4f0d core-prim . bitwise-copy-bit) (lE4f0c core-prim . bitwise-bit-set?) (lE4f0b core-prim . bitwise-bit-field) (lE4f0a core-prim . bitwise-bit-count) (lE4f09 core-prim . bitwise-xor) (lE4f08 core-prim . bitwise-ior) (lE4f07 core-prim . bitwise-and) (lE4f06 core-prim . bitwise-not) (lE4f05 core-prim . bitwise-arithmetic-shift-right) (lE4f04 core-prim . bitwise-arithmetic-shift-left) (lE4f03 core-prim . bitwise-arithmetic-shift) (lE4f02 core-prim . zero?) (lE4f01 core-prim . vector?) (lE4f00 core-prim . vector-set!) (lE4eff core-prim . vector-ref) (lE4efe core-prim . vector-map) (lE4efd core-prim . vector-length) (lE4efc core-prim . vector-for-each) (lE4efb core-prim . vector-fill!) (lE4efa core-prim . vector->list) (lE4ef9 core-prim . vector) (lE4ef8 core-prim . values) (lE4ef7 core-prim . truncate) (lE4ef6 core-prim . tan) (lE4ef5 core-prim . symbol?) (lE4ef4 core-prim . symbol=?) (lE4ef3 core-prim . symbol->string) (lE4ef2 core-prim . substring) (lE4ef1 core-prim . string?) (lE4ef0 core-prim . string>?) (lE4eef core-prim . string>=?) (lE4eee core-prim . string=?) (lE4eed core-prim . string<?) (lE4eec core-prim . string<=?) (lE4eeb core-prim . string-ref) (lE4eea core-prim . string-length) (lE4ee9 core-prim . string-for-each) (lE4ee8 core-prim . string-copy) (lE4ee7 core-prim . string-append) (lE4ee6 core-prim . string->symbol) (lE4ee5 core-prim . string->number) (lE4ee4 core-prim . string->list) (lE4ee3 core-prim . string) (lE4ee2 core-prim . sqrt) (lE4ee1 core-prim . sin) (lE4ee0 core-prim . round) (lE4edf core-prim . reverse) (lE4ede core-prim . real?) (lE4edd core-prim . real-valued?) (lE4edc core-prim . real-part) (lE4edb core-prim . rationalize) (lE4eda core-prim . rational?) (lE4ed9 core-prim . rational-valued?) (lE4ed8 core-prim . procedure?) (lE4ed7 core-prim . positive?) (lE4ed6 core-prim . pair?) (lE4ed5 core-prim . odd?) (lE4ed4 core-prim . numerator) (lE4ed3 core-prim . number?) (lE4ed2 core-prim . number->string) (lE4ed1 core-prim . null?) (lE4ed0 core-prim . not) (lE4ecf core-prim . negative?) (lE4ece core-prim . nan?) (lE4ecd core-prim . min) (lE4ecc core-prim . max) (lE4ecb core-prim . map) (lE4eca core-prim . make-vector) (lE4ec9 core-prim . make-string) (lE4ec8 core-prim . make-rectangular) (lE4ec7 core-prim . make-polar) (lE4ec6 core-prim . magnitude) (lE4ec5 core-prim . log) (lE4ec4 core-prim . list?) (lE4ec3 core-prim . list-tail) (lE4ec2 core-prim . list-ref) (lE4ec1 core-prim . list->vector) (lE4ec0 core-prim . list->string) (lE4ebf core-prim . list) (lE4ebe core-prim . length) (lE4ebd core-prim . lcm) (lE4ebc core-prim . integer?) (lE4ebb core-prim . integer-valued?) (lE4eba core-prim . integer->char) (lE4eb9 core-prim . infinite?) (lE4eb8 core-prim . inexact?) (lE4eb7 core-prim . inexact) (lE4eb6 core-prim . imag-part) (lE4eb5 core-prim . gcd) (lE4eb4 core-prim . for-each) (lE4eb3 core-prim . floor) (lE4eb2 core-prim . finite?) (lE4eb1 core-prim . expt) (lE4eb0 core-prim . exp) (lE4eaf core-prim . exact?) (lE4eae core-prim . exact-integer-sqrt) (lE4ead core-prim . exact) (lE4eac core-prim . even?) (lE4eab core-prim . error) (lE4eaa core-prim . eqv?) (lE4ea9 core-prim . equal?) (lE4ea8 core-prim . eq?) (lE4ea7 core-prim . dynamic-wind) (lE4ea6 core-prim . div0-and-mod0) (lE4ea5 core-prim . mod0) (lE4ea4 core-prim . div0) (lE4ea3 core-prim . div-and-mod) (lE4ea2 core-prim . mod) (lE4ea1 core-prim . div) (lE4ea0 core-prim . denominator) (lE4e9f core-prim . cos) (lE4e9e core-prim . cons) (lE4e9d core-prim . complex?) (lE4e9c core-prim . char?) (lE4e9b core-prim . char>?) (lE4e9a core-prim . char>=?) (lE4e99 core-prim . char=?) (lE4e98 core-prim . char<?) (lE4e97 core-prim . char<=?) (lE4e96 core-prim . char->integer) (lE4e95 core-prim . ceiling) (lE4e94 core-prim . call-with-values) (lE4e93 core-prim . call/cc) (lE4e92 core-prim . call-with-current-continuation) (lE4e91 core-prim . cddddr) (lE4e90 core-prim . cdddar) (lE4e8f core-prim . cddadr) (lE4e8e core-prim . cddaar) (lE4e8d core-prim . cdaddr) (lE4e8c core-prim . cdadar) (lE4e8b core-prim . cdaadr) (lE4e8a core-prim . cdaaar) (lE4e89 core-prim . cadddr) (lE4e88 core-prim . caddar) (lE4e87 core-prim . cadadr) (lE4e86 core-prim . cadaar) (lE4e85 core-prim . caaddr) (lE4e84 core-prim . caadar) (lE4e83 core-prim . caaadr) (lE4e82 core-prim . caaaar) (lE4e81 core-prim . cdddr) (lE4e80 core-prim . cddar) (lE4e7f core-prim . cdadr) (lE4e7e core-prim . cdaar) (lE4e7d core-prim . caddr) (lE4e7c core-prim . cadar) (lE4e7b core-prim . caadr) (lE4e7a core-prim . caaar) (lE4e79 core-prim . cddr) (lE4e78 core-prim . cdar) (lE4e77 core-prim . cadr) (lE4e76 core-prim . caar) (lE4e75 core-prim . cdr) (lE4e74 core-prim . car) (lE4e73 core-prim . boolean?) (lE4e72 core-prim . boolean=?) (lE4e71 core-prim . atan) (lE4e70 core-prim . assertion-violation) (lE31d3 core-prim . assertion-error) (lE4e6f core-prim . asin) (lE4e6e core-prim . apply) (lE4e6d core-prim . append) (lE4e6c core-prim . angle) (lE4e6b core-prim . acos) (lE4e6a core-prim . abs) (lE4e69 core-prim . /) (lE4e68 core-prim . *) (lE4e67 core-prim . -) (lE4e66 core-prim . +) (lE4e65 core-prim . >=) (lE4e64 core-prim . >) (lE4e63 core-prim . =) (lE4e62 core-prim . <=) (lE4e61 core-prim . <) (lE4e60 core-prim . library) (lE4e5f $core-rtd &no-nans-rtd &no-nans-rcd) (lE4e5e $core-rtd &no-infinities-rtd &no-infinities-rcd) (lE4e5d $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (lE4e5c $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (lE4e5b $core-rtd &i/o-port-rtd &i/o-port-rcd) (lE4e5a $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (lE4e59 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (lE4e58 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (lE4e57 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (lE4e56 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (lE4e55 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (lE4e54 $core-rtd &i/o-write-rtd &i/o-write-rcd) (lE4e53 $core-rtd &i/o-read-rtd &i/o-read-rcd) (lE4e52 $core-rtd &i/o-rtd &i/o-rcd) (lE4e51 $core-rtd &undefined-rtd &undefined-rcd) (lE4e50 $core-rtd &syntax-rtd &syntax-rcd) (lE4e4f $core-rtd &lexical-rtd &lexical-rcd) (lE4e4e $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (lE4e4d $core-rtd &non-continuable-rtd &non-continuable-rcd) (lE4e4c $core-rtd &who-rtd &who-rcd) (lE4e4b $core-rtd &irritants-rtd &irritants-rcd) (lE4e4a $core-rtd &assertion-rtd &assertion-rcd) (lE4e49 $core-rtd &violation-rtd &violation-rcd) (lE4e48 $core-rtd &error-rtd &error-rcd) (lE4e47 $core-rtd &serious-rtd &serious-rcd) (lE4e46 $core-rtd &warning-rtd &warning-rcd) (lE4e45 $core-rtd &message-rtd &message-rcd) (lE4e44 $core-rtd &condition-rtd &condition-rcd) (lE4e43 macro . define-condition-type) (lE4e42 macro . define-enumeration) (lE4e41 macro . define-record-type) (lE4e40 macro . parent-rtd) (lE4e3f macro . nongenerative) (lE4e3e macro . opaque) (lE4e3d macro . sealed) (lE4e3c macro . protocol) (lE4e3b macro . parent) (lE4e3a macro . immutable) (lE4e39 macro . mutable) (lE4e38 macro . fields) (lE4e37 macro . error-handling-mode) (lE4e36 macro . file-options) (lE4e35 macro . buffer-mode) (lE4e34 macro . eol-style) (lE4e33 macro . guard) (lE4e32 macro . trace-define) (lE4e31 macro . trace-lambda) (lE4e30 macro . unsyntax-splicing) (lE4e2f macro . unsyntax) (lE4e2e macro . unquote-splicing) (lE4e2d macro . unquote) (lE4e2c macro . _) (lE4e2b macro . else) (lE4e2a macro . =>) (lE4e29 macro . ...) (lE4e28 macro . assert) (lE4e27 macro . endianness) (lE4e26 macro . delay) (lE4e25 macro . time) (lE4e24 macro . do) (lE4e23 macro . cond) (lE4e22 macro . let*) (lE4e21 macro . let*-values) (lE4e20 macro . let-values) (lE4e1f macro . identifier-syntax) (lE4e1e macro . with-syntax) (lE4e1d macro . quasisyntax) (lE4e1c macro . quasiquote) (lE4e1b macro . syntax-rules) (lE4e1a macro . include) (lE4e19 macro . define-struct) (lE4e18 core-macro . record-constructor-descriptor) (lE4e17 core-macro . record-type-descriptor) (lE4e16 macro . case) (lE4e15 macro . parameterize) (lE4e14 macro . unless) (lE4e13 macro . when) (lE4e12 core-macro . or) (lE4e11 core-macro . and) (lE4e10 core-macro . if) (lE4e0f core-macro . let) (lE4e0e core-macro . letrec*) (lE4e0d core-macro . letrec) (lE4e0c core-macro . type-descriptor) (lE4e0b core-macro . case-lambda) (lE4e0a core-macro . lambda) (lE4e09 core-macro . syntax) (lE4e08 core-macro . syntax-case) (lE4e07 core-macro . quote) (lE4e06 core-macro . foreign-call) (lE4e05 letrec-syntax) (lE4e04 let-syntax) (lE4e03 set!) (lE4e02 import) (lE4e01 begin) (lE4e00 module) (lE4dff define-syntax) (lE4dfe define)) values values '#f '#f '#f '#f) (lE2d0d@lE2b59@install-library 'lE51c6 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . lE516d) (eval-core . lE516c) (set-symbol-value! . lE516b) (symbol-value . lE516a) (gensym . lE5169) (void . lE5168)) '() values values '#f '#f '#f '#f) (lE2d0d@lE2b59@install-library 'lE51c7 '(mosh) '() '() '() '() '((set-symbol-value! . lE516b) (symbol-value . lE516a) (regexp? . lE5166) (read-line . lE5165) (ungensym . lE5163) (alist->eq-hash-table . lE5162) (assoc-ref . lE5161) (print . lE5160) (format . lE515f) (host-os . lE515e) (library-path . lE2b38) (standard-library-path . lE515d) (file-newer? . lE5157) (stat-mtime . lE5156) (digit->integer . lE5152) (call-with-string-input-port . lE5151) (call-with-string-io . lE5150) (string-split . lE514f) (bytevector-for-each . lE514e) (string->regexp . lE514d) (rxmatch . lE514c) (regexp-replace-all . lE514b) (hashtable-fold-left . lE514a) (hashtable-for-each . lE5149) (set-current-directory! . lE5144) (expand-path . lE5143) (current-directory . lE5142) (p . lE5102) (get-timeofday . lE50e9) (get-command-line . lE50e8) (sys-display . lE50e7) (whereis . lE50e6) (register . lE50e5) (vm-join! . lE50e4) (vm-set-value! . lE50e3) (vm? . lE50e2) (main-vm? . lE50e1) (vm-eval . lE50e0) (vm-self . lE50df) (vm-start! . lE50de) (make-vm . lE50dd) (mutex-try-lock! . lE50dc) (mutex-unlock! . lE50db) (mutex-lock! . lE50da) (mutex? . lE50d9) (make-mutex . lE50d8) (condition-variable-notify-all! . lE50d7) (condition-variable-notify! . lE50d6) (condition-variable-wait! . lE50d5) (make-condition-variable . lE50d4) (write/ss . lE50d3) (mosh-executable-path . lE50d2) (make-file-options . lE50d1) (source-info . lE50d0) (make-compiler-instruction . lE50cf) (make-instruction . lE50ce) (set-source-info! . lE50cd) (bignum? . lE50cc) (fast-equal? . lE50cb) (fasl-read . lE50ca) (fasl-write . lE50c9) (time-usage . lE50c8) (os-constant . lE50c7) (condition-printer . lE50c6) (time . lE4e25) (include . lE4e1a)) '() values values '#f '#f '#f '#f) (lE2d0d@lE2b59@install-library 'lE51c8 '(system) '() '() '() '() '((gensym-prefix-set! . lE5164) (ssl-supported? . lE515c) (ssl-socket? . lE515b) (socket-sslize! . lE515a) (%monapi-name-whereis . lE5159) (%monapi-message-send . lE5158) (write-to-file . lE5155) (file->list . lE5154) (file->string . lE5153) (mosh-cache-dir . lE2922) (call-process . lE5148) (local-tz-offset . lE5147) (microseconds . lE5146) (directory-list . lE5145) (expand-path . lE5143) (%getpid . lE5141) (%spawn . lE5140) (%waitpid . lE513f) (simple-struct-name . lE513e) (simple-struct-set! . lE513d) (simple-struct-ref . lE513c) (make-simple-struct . lE513b) (simple-struct? . lE513a) (pointer-ref-c-int64 . lE5139) (pointer-ref-c-int32 . lE5138) (pointer-ref-c-int16 . lE5137) (pointer-ref-c-int8 . lE5136) (pointer-ref-c-uint64 . lE5135) (pointer-ref-c-uint32 . lE5134) (pointer-ref-c-uint16 . lE5133) (pointer-ref-c-uint8 . lE5132) (pointer-set-c-uint64! . lE5131) (pointer-set-c-uint32! . lE5130) (pointer-set-c-uint16! . lE512f) (pointer-set-c-uint8! . lE512e) (pointer-set-c-int64! . lE512d) (pointer-set-c-int32! . lE512c) (pointer-set-c-int16! . lE512b) (pointer-set-c-int8! . lE512a) (pointer-set-c-pointer! . lE5129) (pointer-set-c-double! . lE5128) (pointer-set-c-float! . lE5127) (pointer-set-c-long-long! . lE5126) (pointer-set-c-long! . lE5125) (pointer-set-c-int! . lE5124) (pointer-set-c-short! . lE5123) (pointer-set-c-char! . lE5122) (pointer-ref-c-pointer . lE5121) (pointer-ref-c-double . lE5120) (pointer-ref-c-float . lE511f) (pointer-ref-c-unsigned-long-long . lE511e) (pointer-ref-c-signed-long-long . lE511d) (pointer-ref-c-unsigned-long . lE511c) (pointer-ref-c-signed-long . lE511b) (pointer-ref-c-unsigned-int . lE511a) (pointer-ref-c-signed-int . lE5119) (pointer-ref-c-unsigned-short . lE5118) (pointer-ref-c-signed-short . lE5117) (pointer-ref-c-unsigned-char . lE5116) (pointer-ref-c-signed-char . lE5115) (pointer->integer . lE5114) (integer->pointer . lE5113) (pointer? . lE5112) (shared-errno . lE5111) (%ffi-free-c-callback-trampoline . lE5110) (%ffi-make-c-callback-trampoline . lE510f) (%ffi-free . lE510e) (%ffi-malloc . lE510d) (%ffi-supported? . lE510c) (%ffi-pointer->string . lE510b) (%ffi-call . lE510a) (%ffi-lookup . lE5109) (%ffi-open . lE5108) (null-terminated-utf8->string . lE5107) (null-terminated-bytevector->string . lE5106) (%exec . lE5105) (%fork . lE5104) (%pipe . lE5103) (open-output-string . lE5101) (get-output-string . lE5100) (file-stat-ctime . lE50ff) (file-stat-atime . lE50fe) (file-stat-mtime . lE50fd) (file-size-in-bytes . lE50fc) (file-writable? . lE50fb) (file-executable? . lE50fa) (file-readable? . lE50f9) (file-regular? . lE50f8) (file-symbolic-link? . lE50f7) (file-directory? . lE50f6) (create-symbolic-link . lE50f5) (rename-file . lE50f4) (delete-directory . lE50f3) (create-directory . lE50f2) (create-mosh-cache-dir . lE50f1) (get-environment-variables . lE50f0) (current-exception-handler . lE50ef) (get-environment-variable . lE50ee) (join-wraps . lE50ed) (id->real-label . lE50ec) (same-marks? . lE50eb) (same-marks*? . lE50ea) (disasm . lE50c5) (make-parameter . lE2920) (socket-port . lE50c4) (socket-shutdown . lE50c3) (socket-close . lE50c2) (socket-send . lE50c1) (socket-recv! . lE50c0) (socket-recv . lE50bf) (make-server-socket . lE50be) (make-client-socket . lE50bd) (socket-accept . lE50bc) (socket? . lE50bb) (parameterize . lE4e15)) '() values values '#f '#f '#f '#f)))
(begin (set! lE4c7d@ref (unspecified)) (set! lE4c7f@x* (unspecified)) (set! lE4c81@add-library-path! (unspecified)) (set! lE4c83@parse-and-add-library-path (unspecified)) (set! lE4c85@for-each-with-index (unspecified)) (set! lE4c87@rpad (unspecified)) (set! lE4c89@condition-printer/p (unspecified)) (set! lE4c8b@record->field-alist (unspecified)) (set! lE4c8d@map-with-index (unspecified)) (set! lE4c8f@repl (unspecified)) (set! lE4c91@trace-printer (unspecified)) (set! lE4c93@command-line (unspecified)) (set! lE4c95@local-library-path (unspecified)) (set! lE4c97@load/args (unspecified)) (set! lE4c99@load (unspecified)) (set! lE4c9b@ironscheme-build (unspecified)) (set! lE4c9d@eval-top-level (unspecified)) (set! lE4c9f@compile-system-libraries (unspecified)) (set! lE4ca1@compile (unspecified)) (set! lE4ca3@compile->closure (unspecified)) (set! lE4ca5@pre-compile-r6rs-file (unspecified)) (set! lE4ca7@load-r6rs-top-level (unspecified)) (set! lE4ca9@load-r6rs-top-level-sexp (unspecified)) (set! lE4cab@prefix-inc (unspecified)) (set! lE4cad@prefix-inc! (unspecified)) (set! lE4c7d@ref (lambda (lE4ce8@rtd lE4ce9@i lE4cea@x) (let ((lE4cee@val ((record-accessor lE4ce8@rtd lE4ce9@i) lE4cea@x))) (if (symbol? lE4cee@val) (ungensym lE4cee@val) lE4cee@val)))) (set! lE4de4@lE4c7d@ref lE4c7d@ref) (set! lE4c7f@x* '()) (set! lE4de5@lE4c7f@x* lE4c7f@x*) (set! lE4c81@add-library-path! (lambda (lE4cf0@path) (lE2cfd@lE2b39@library-path (append (lE2cfd@lE2b39@library-path) (list lE4cf0@path))))) (set! lE4de6@lE4c81@add-library-path! lE4c81@add-library-path!) (set! lE4c83@parse-and-add-library-path (lambda (lE4cf2@paths lE4cf3@message) (letrec* ((lE4cf7@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((lE4cf8@t lE4cf2@paths)) (if lE4cf8@t ((lambda (lE4cfa@paths) (for-each (lambda (lE4cfc@path) (if (file-exists? lE4cfc@path) (lE4c81@add-library-path! (expand-path lE4cfc@path)) (format (current-error-port) lE4cf3@message lE4cfc@path))) (string-split lE4cfa@paths lE4cf7@separator))) lE4cf8@t) (void)))))) (set! lE4de7@lE4c83@parse-and-add-library-path lE4c83@parse-and-add-library-path) (set! lE4c85@for-each-with-index (lambda (lE4cfe@proc lE4cff@lst) (letrec ((lE4d02@loop (lambda (lE4d04@i lE4d05@lst) (if (null? lE4d05@lst) (if '#f '#f (void)) (begin (lE4cfe@proc lE4d04@i (car lE4d05@lst)) (lE4d02@loop (+ lE4d04@i '1) (cdr lE4d05@lst))))))) (lE4d02@loop '1 lE4cff@lst)))) (set! lE4de8@lE4c85@for-each-with-index lE4c85@for-each-with-index) (set! lE4c87@rpad (lambda (lE4d08@str lE4d09@pad lE4d0a@n) (let ((lE4d0e@rest (- lE4d0a@n (string-length (format '"~a" lE4d08@str))))) (let lE4d14@loop ((lE4d10@rest lE4d0e@rest) (lE4d11@ret (format '"~a" lE4d08@str))) (if (<= lE4d10@rest '0) lE4d11@ret (lE4d14@loop (- lE4d10@rest '1) (string-append lE4d11@ret lE4d09@pad))))))) (set! lE4de9@lE4c87@rpad lE4c87@rpad) (set! lE4c89@condition-printer/p (lambda (lE4d16@e lE4d17@port) (letrec* ((lE4d1b@max-condition-len (apply max (map (lambda (lE4d2c@c) (string-length (symbol->string (record-type-name (record-rtd lE4d2c@c))))) (simple-conditions lE4d16@e))))) (begin (display '" Condition components:\n" lE4d17@port) (lE4c85@for-each-with-index (lambda (lE4d1c@i lE4d1d@x) (let ((lE4d20@rtd (record-rtd lE4d1d@x)) (lE4d21@fields-alist (lE4c8b@record->field-alist lE4d1d@x))) (begin (format lE4d17@port '" ~d. ~a" lE4d1c@i (lE4c87@rpad (symbol->string (record-type-name lE4d20@rtd)) '" " lE4d1b@max-condition-len)) (if (null? lE4d21@fields-alist) (newline lE4d17@port) (void)) (let lE4d28@loop ((lE4d24@first '#t) (lE4d25@fields-alist lE4d21@fields-alist)) (if (null? lE4d25@fields-alist) '() (let ((lE4d2a@field (car lE4d25@fields-alist))) (begin (if (not lE4d24@first) (display (lE4c87@rpad '"" '" " (+ '4 lE4d1b@max-condition-len)) lE4d17@port) (void)) (display '"       " lE4d17@port) (display (car lE4d2a@field) lE4d17@port) (display '": " lE4d17@port) (write (cdr lE4d2a@field) lE4d17@port) (newline lE4d17@port) (lE4d28@loop '#f (cdr lE4d25@fields-alist))))))))) (simple-conditions lE4d16@e)))))) (set! lE4dea@lE4c89@condition-printer/p lE4c89@condition-printer/p) (set! lE4c8b@record->field-alist (lambda (lE4d2e@r) (letrec* ((lE4d31@ref (lambda (lE4d3c@rtd lE4d3d@i lE4d3e@x) (let ((lE4d42@val ((record-accessor lE4d3c@rtd lE4d3d@i) lE4d3e@x))) (if (symbol? lE4d42@val) (ungensym lE4d42@val) lE4d42@val))))) (let lE4d36@loop ((lE4d32@ret '()) (lE4d33@rtd (record-rtd lE4d2e@r))) (if lE4d33@rtd (lE4d36@loop (append lE4d32@ret (lE4c8d@map-with-index (lambda (lE4d38@i lE4d39@field) (cons lE4d39@field (lE4d31@ref lE4d33@rtd lE4d38@i lE4d2e@r))) (vector->list (record-type-field-names lE4d33@rtd)))) (record-type-parent lE4d33@rtd)) lE4d32@ret))))) (set! lE4deb@lE4c8b@record->field-alist lE4c8b@record->field-alist) (set! lE4c8d@map-with-index (lambda (lE4d44@proc lE4d45@lst) (let lE4d4e@loop ((lE4d48@i '0) (lE4d49@lst lE4d45@lst) (lE4d4a@ret '())) (if (null? lE4d49@lst) (reverse lE4d4a@ret) (lE4d4e@loop (+ lE4d48@i '1) (cdr lE4d49@lst) (cons (lE4d44@proc lE4d48@i (car lE4d49@lst)) lE4d4a@ret)))))) (set! lE4dec@lE4c8d@map-with-index lE4c8d@map-with-index) (set! lE4c8f@repl (lambda lE4d50@x (letrec* ((lE4d53@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (lE4d56@lE4d54) (lambda () (with-exception-handler (lambda (lE4d58@e) ((call/cc (lambda (lE4d5a@lE4d55) (lE4d56@lE4d54 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? lE4d58@e) (lE4c89@condition-printer/p lE4d58@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" lE4d58@e))) (lE4d5a@lE4d55 (lambda () (raise-continuable lE4d58@e)))))))))) (lambda () (let lE4d60@loop ((lE4d5c@line (get-line (current-input-port))) (lE4d5d@accum '"")) (letrec* ((lE4d63@parentheses-ok? (lambda (lE4d6e@text) (let lE4d76@loop ((lE4d70@chars (string->list lE4d6e@text)) (lE4d71@p0 '0) (lE4d72@p1 '0)) (if (null? lE4d70@chars) (= '0 lE4d71@p0 lE4d72@p1) (let ((lE4d78@t (car lE4d70@chars))) (if (memv lE4d78@t '(#\()) (lE4d76@loop (cdr lE4d70@chars) (+ lE4d71@p0 '1) lE4d72@p1) (if (memv lE4d78@t '(#\))) (lE4d76@loop (cdr lE4d70@chars) (- lE4d71@p0 '1) lE4d72@p1) (if (memv lE4d78@t '(#\[)) (lE4d76@loop (cdr lE4d70@chars) lE4d71@p0 (+ lE4d72@p1 '1)) (if (memv lE4d78@t '(#\])) (lE4d76@loop (cdr lE4d70@chars) lE4d71@p0 (- lE4d72@p1 '1)) (lE4d76@loop (cdr lE4d70@chars) lE4d71@p0 lE4d72@p1)))))))))) (lE4d65@eval-string-print (lambda (lE4d68@text) (if (not (or (string=? '"\n" lE4d68@text) (= '0 (string-length lE4d68@text)))) (call-with-values (lambda () (lE4c9d@eval-top-level (call-with-port (open-string-input-port lE4d68@text) read))) (lambda lE4d6a@out* (for-each (lambda (lE4d6c@out) (begin (write/ss lE4d6c@out) (newline))) lE4d6a@out*))) (void))))) (if (eof-object? lE4d5c@line) (begin (lE4d65@eval-string-print lE4d5d@accum) (exit)) (let ((lE4d66@current (string-append lE4d5d@accum lE4d5c@line))) (if (lE4d63@parentheses-ok? lE4d66@current) (lE4d65@eval-string-print lE4d66@current) (lE4d60@loop (get-line (current-input-port)) lE4d66@current)))))))))))) (newline) (lE4d53@rec))))) (lE4d53@rec)))) (set! lE4ded@lE4c8f@repl lE4c8f@repl) (set! lE4c91@trace-printer (lE2a43@lE2921@make-parameter write)) (set! lE4dee@lE4c91@trace-printer lE4c91@trace-printer) (set! lE4c93@command-line (lE2a43@lE2921@make-parameter (get-command-line))) (set! lE4def@lE4c93@command-line lE4c93@command-line) (set! lE4c95@local-library-path (lambda (lE4d7a@filename) (lE2cfd@lE2b39@library-path))) (set! lE4df0@lE4c95@local-library-path lE4c95@local-library-path) (set! lE4c97@load/args (lambda (lE4d7c@filename . lE4d7e@args) (begin (apply lE4ca7@load-r6rs-top-level lE4d7c@filename 'load lE4d7e@args) (void)))) (set! lE4df1@lE4c97@load/args lE4c97@load/args) (set! lE4c99@load (lambda (lE4d80@filename) (begin (apply lE4ca7@load-r6rs-top-level lE4d80@filename 'load (lE4c93@command-line)) (void)))) (set! lE4df2@lE4c99@load lE4c99@load) (set! lE4c9b@ironscheme-build (lambda () (lE4c99@load '"ironscheme-buildscript.ss"))) (set! lE4df3@lE4c9b@ironscheme-build lE4c9b@ironscheme-build) (set! lE4c9d@eval-top-level (lambda (lE4d82@x) (lE4c5a@lE31ba@eval lE4d82@x (lE4c71@lE31e8@interaction-environment)))) (set! lE4df4@lE4c9d@eval-top-level lE4c9d@eval-top-level) (set! lE4c9f@compile-system-libraries (lambda () (lE4c9d@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! lE4df5@lE4c9f@compile-system-libraries lE4c9f@compile-system-libraries) (set! lE4ca1@compile (lambda (lE4d84@filename) (lE4ca7@load-r6rs-top-level lE4d84@filename 'compile))) (set! lE4df6@lE4ca1@compile lE4ca1@compile) (set! lE4ca3@compile->closure (lambda (lE4d86@filename) (lE4ca7@load-r6rs-top-level lE4d86@filename 'closure))) (set! lE4df7@lE4ca3@compile->closure lE4ca3@compile->closure) (set! lE4ca5@pre-compile-r6rs-file (lambda (lE4d88@filename) (lE4ca7@load-r6rs-top-level lE4d88@filename 'compile))) (set! lE4df8@lE4ca5@pre-compile-r6rs-file lE4ca5@pre-compile-r6rs-file) (set! lE4ca7@load-r6rs-top-level (lambda (lE4d8a@filename lE4d8b@how . lE4d8e@args) (begin (lE2cfd@lE2b39@library-path (lE4c95@local-library-path lE4d8a@filename)) (let ((lE4d90@x* (with-input-from-file lE4d8a@filename (lambda () (let lE4d92@f () (let ((lE4d94@x (lE2a35@lE2905@read-annotated))) (if (eof-object? lE4d94@x) '() (cons lE4d94@x (lE4d92@f))))))))) (let ((lE4d96@t lE4d8b@how)) (if (memv lE4d96@t '(closure)) (lE4c70@lE31e6@pre-compile-r6rs-top-level lE4d90@x*) (if (memv lE4d96@t '(load)) (begin (lE4c93@command-line (cons lE4d8a@filename (car lE4d8e@args))) (lE2a44@lE2923@mosh-cache-dir (create-mosh-cache-dir)) (if (lE2a44@lE2923@mosh-cache-dir) (gensym-prefix-set! (lE4cad@prefix-inc! (string-append (lE2a44@lE2923@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (lE4d98@file) ((call/cc (lambda (lE4d9c@lE4d9a) (lambda () (with-exception-handler (lambda (lE4d9e@c) ((call/cc (lambda (lE4da0@lE4d9b) (lE4d9c@lE4d9a (lambda () (if '#t '#t (lE4da0@lE4d9b (lambda () (raise-continuable lE4d9e@c)))))))))) (lambda () (delete-file (string-append (lE2a44@lE2923@mosh-cache-dir) '"/" lE4d98@file))))))))) (directory-list (lE2a44@lE2923@mosh-cache-dir))) (void)) (let ((lE4da2@compiled (lE4c6f@lE31e4@compile-r6rs-top-level lE4d90@x*))) (begin (if (and (lE2a44@lE2923@mosh-cache-dir) (not (symbol-value '%disable-acc))) (lE2d01@lE2b41@serialize-all lE2a3e@lE2917@serialize-library lE2a9a@lE2a53@compile-core-expr) (void)) (lE4da2@compiled)))) (if (memv lE4d96@t '(compile)) (begin (lE4c6f@lE31e4@compile-r6rs-top-level lE4d90@x*) (lE2d01@lE2b41@serialize-all lE2a3e@lE2917@serialize-library lE2a9a@lE2a53@compile-core-expr)) (if '#f '#f (void)))))))))) (set! lE4df9@lE4ca7@load-r6rs-top-level lE4ca7@load-r6rs-top-level) (set! lE4ca9@load-r6rs-top-level-sexp (lambda (lE4da4@import-spec lE4da5@thunk) (let ((lE4db0@lE4da9 lE2cfd@lE2b39@library-path) (lE4db1@lE4dab lE2a44@lE2923@mosh-cache-dir) (lE4db2@lE4dad (lE4c95@local-library-path '"")) (lE4db3@lE4daf (create-mosh-cache-dir))) (let ((lE4db8@swap (lambda () (begin (let ((lE4dba@t (lE4db0@lE4da9))) (begin (lE4db0@lE4da9 lE4db2@lE4dad) (set! lE4db2@lE4dad lE4dba@t))) (let ((lE4dbc@t (lE4db1@lE4dab))) (begin (lE4db1@lE4dab lE4db3@lE4daf) (set! lE4db3@lE4daf lE4dbc@t))))))) (dynamic-wind lE4db8@swap (lambda () (begin (if (lE2a44@lE2923@mosh-cache-dir) (gensym-prefix-set! (lE4cad@prefix-inc! (string-append (lE2a44@lE2923@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((lE4dc2@lE4dbf lE4c93@command-line) (lE4dc3@lE4dc1 '())) (let ((lE4dc6@swap (lambda () (let ((lE4dc8@t (lE4dc2@lE4dbf))) (begin (lE4dc2@lE4dbf lE4dc3@lE4dc1) (set! lE4dc3@lE4dc1 lE4dc8@t)))))) (dynamic-wind lE4dc6@swap (lambda () ((lE4c6f@lE31e4@compile-r6rs-top-level (list (cons 'import lE4da4@import-spec) (list lE4da5@thunk))))) lE4dc6@swap))))) lE4db8@swap))))) (set! lE4dfa@lE4ca9@load-r6rs-top-level-sexp lE4ca9@load-r6rs-top-level-sexp) (set! lE4cab@prefix-inc (lambda (lE4dca@prefix-string) (let ((lE4dcc@prefix (symbol->string lE4dca@prefix-string))) (let ((lE4dce@len (string-length lE4dcc@prefix))) (let lE4dd6@loop ((lE4dd0@i (- lE4dce@len '1)) (lE4dd1@carry? '#t) (lE4dd2@accum '())) (if (< lE4dd0@i '0) (string->symbol (list->string (if lE4dd1@carry? (cons '#\a lE4dd2@accum) lE4dd2@accum))) (if lE4dd1@carry? (let ((lE4dd8@next-integer (+ '1 (char->integer (string-ref lE4dcc@prefix lE4dd0@i))))) (if (= lE4dd8@next-integer '123) (lE4dd6@loop (- lE4dd0@i '1) '#f (cons '#\A lE4dd2@accum)) (if (= lE4dd8@next-integer '91) (lE4dd6@loop (- lE4dd0@i '1) '#t (cons '#\a lE4dd2@accum)) (lE4dd6@loop (- lE4dd0@i '1) '#f (cons (integer->char lE4dd8@next-integer) lE4dd2@accum))))) (lE4dd6@loop (- lE4dd0@i '1) '#f (cons (string-ref lE4dcc@prefix lE4dd0@i) lE4dd2@accum))))))))) (set! lE4dfb@lE4cab@prefix-inc lE4cab@prefix-inc) (set! lE4cad@prefix-inc! (lambda (lE4dda@file) (begin (if (not (file-exists? lE4dda@file)) (call-with-output-file lE4dda@file (lambda (lE4ddc@port) (write 'd lE4ddc@port))) (void)) (let ((lE4dde@prefix (call-with-input-file lE4dda@file read))) (if (main-vm?) (let ((lE4de0@next-prefix (lE4cab@prefix-inc lE4dde@prefix))) (begin (call-with-port (open-file-output-port lE4dda@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (lE4de2@port) (write lE4de0@next-prefix lE4de2@port))) lE4dde@prefix)) lE4dde@prefix))))) (set! lE4dfc@lE4cad@prefix-inc! lE4cad@prefix-inc!) (begin (lE2d02@lE2b43@current-precompiled-library-loader lE2a3f@lE2919@load-serialized-library) (set-symbol-value! 'load lE4c99@load) (set-symbol-value! 'pre-compile-r6rs-file lE4ca5@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs lE4c9d@eval-top-level) (set-symbol-value! 'int-env-syms lE4c51@lE31a8@interaction-environment-symbols) (set-symbol-value! 'expanded2core lE2a99@lE2a51@expanded->core) (set-symbol-value! 'trace-printer lE4c91@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (lE4cae@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list lE4cae@c))))) (lE4c83@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (lE4c83@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (lE4c81@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (lE4c81@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (lE4c81@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((lE4cb0@prefix (lambda (lE4cb2@ext lE4cb3@ls) (append (map (lambda (lE4cb6@x) (string-append lE4cb2@ext lE4cb6@x)) lE4cb3@ls) lE4cb3@ls)))) (lE2cfe@lE2b3b@library-extensions (lE4cb0@prefix '".mosh" (lE2cfe@lE2b3b@library-extensions)))) (current-exception-handler (lambda (lE4cb8@c) (begin (if (condition? lE4cb8@c) (lE4c89@condition-printer/p lE4cb8@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" lE4cb8@c)) lE4cb8@c))) (if ((call/cc (lambda (lE4cbc@lE4cba) (lambda () (with-exception-handler (lambda (lE4cbe@c) ((call/cc (lambda (lE4cc0@lE4cbb) (lE4cbc@lE4cba (lambda () (if '#t '#f (lE4cc0@lE4cbb (lambda () (raise-continuable lE4cbe@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (lE4ca9@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (lE4c93@command-line)) (let ((lE4cca@lE4cc3 lE4c93@command-line) (lE4ccb@lE4cc5 lE2a44@lE2923@mosh-cache-dir) (lE4ccc@lE4cc7 '()) (lE4ccd@lE4cc9 (create-mosh-cache-dir))) (let ((lE4cd2@swap (lambda () (begin (let ((lE4cd4@t (lE4cca@lE4cc3))) (begin (lE4cca@lE4cc3 lE4ccc@lE4cc7) (set! lE4ccc@lE4cc7 lE4cd4@t))) (let ((lE4cd6@t (lE4ccb@lE4cc5))) (begin (lE4ccb@lE4cc5 lE4ccd@lE4cc9) (set! lE4ccd@lE4cc9 lE4cd6@t))))))) (dynamic-wind lE4cd2@swap (lambda () (begin (if (lE2a44@lE2923@mosh-cache-dir) (gensym-prefix-set! (lE4cad@prefix-inc! (string-append (lE2a44@lE2923@mosh-cache-dir) '"/prefix.txt"))) (void)) (lE4c8f@repl))) lE4cd2@swap))) (begin (lE2cfd@lE2b39@library-path (lE4c95@local-library-path (car (lE4c93@command-line)))) (set! lE4c7f@x* (with-input-from-file (car (lE4c93@command-line)) (lambda () (let lE4cd8@f () (let ((lE4cda@x (lE2a35@lE2905@read-annotated))) (if (eof-object? lE4cda@x) '() (cons lE4cda@x (lE4cd8@f)))))))) (lE4c93@command-line (cons (car (lE4c93@command-line)) (cdr (lE4c93@command-line)))) (lE2a44@lE2923@mosh-cache-dir (create-mosh-cache-dir)) (if (lE2a44@lE2923@mosh-cache-dir) (gensym-prefix-set! (lE4cad@prefix-inc! (string-append (lE2a44@lE2923@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (lE4cdc@file) ((call/cc (lambda (lE4ce0@lE4cde) (lambda () (with-exception-handler (lambda (lE4ce2@c) ((call/cc (lambda (lE4ce4@lE4cdf) (lE4ce0@lE4cde (lambda () (if '#t '#t (lE4ce4@lE4cdf (lambda () (raise-continuable lE4ce2@c)))))))))) (lambda () (delete-file (string-append (lE2a44@lE2923@mosh-cache-dir) '"/" lE4cdc@file))))))))) (directory-list (lE2a44@lE2923@mosh-cache-dir))) (void)) (let ((lE4ce6@compiled (lE4c6f@lE31e4@compile-r6rs-top-level lE4c7f@x*))) (begin (if (and (lE2a44@lE2923@mosh-cache-dir) (not (symbol-value '%disable-acc))) (lE2d01@lE2b41@serialize-all lE2a3e@lE2917@serialize-library lE2a9a@lE2a53@compile-core-expr) (void)) (lE4ce6@compiled))))))))
