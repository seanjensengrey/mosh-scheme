;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! bC28c3@library-file-path->cache-path (unspecified)) (set! bC28c5@read-annotated (unspecified)) (set! bC28c7@annotation-stripped (unspecified)) (set! bC28c9@annotation? (unspecified)) (set! bC28cb@annotation-source (unspecified)) (set! bC28cd@annotation-expression (unspecified)) (set! bC28cf@scm->fasl (unspecified)) (set! bC28d1@fasl-save (unspecified)) (set! bC28d3@fasl-load (unspecified)) (set! bC28d5@verbose? (unspecified)) (set! bC28d7@serialize-library (unspecified)) (set! bC28d9@load-serialized-library (unspecified)) (set! bC28db@make-record-printer (unspecified)) (set! bC28dd@compile-core (unspecified)) (set! bC28df@read-library-source-file (unspecified)) (set! bC28e1@make-parameter (unspecified)) (set! bC28e3@mosh-cache-dir (unspecified)) (set! bC2979@file-options-spec (unspecified)) (set! bC28c3@library-file-path->cache-path (lambda (bC297a@x) (call-with-values (lambda () (open-string-output-port)) (lambda (bC2980@bC297d bC2981@bC297f) (let ((bC2984@extract bC2981@bC297f) (bC2985@p bC2980@bC297d)) (letrec* ((bC2989@display-hex (lambda (bC2992@n) (if (<= '0 bC2992@n '9) (display bC2992@n bC2985@p) (display (integer->char (+ (char->integer '#\a) (- bC2992@n '10))) bC2985@p))))) (begin (let bC298c@f ((bC298a@ls (string-split bC297a@x '#\/))) (if (not (null? bC298a@ls)) (begin (display '"_" bC2985@p) (for-each (lambda (bC298e@c) (if (or (char<=? '#\a bC298e@c '#\z) (char<=? '#\A bC298e@c '#\Z) (char<=? '#\0 bC298e@c '#\9) (memv bC298e@c '(#\- #\. #\_ #\~))) (display bC298e@c bC2985@p) (begin (display '"%" bC2985@p) (let ((bC2990@n (char->integer bC298e@c))) (begin (bC2989@display-hex (quotient bC2990@n '16)) (bC2989@display-hex (remainder bC2990@n '16))))))) (string->list (car bC298a@ls))) (bC298c@f (cdr bC298a@ls))) (void))) (bC2984@extract)))))))) (set! bC29f4@bC28c3@library-file-path->cache-path bC28c3@library-file-path->cache-path) (set! bC28c5@read-annotated read) (set! bC29f5@bC28c5@read-annotated bC28c5@read-annotated) (set! bC28c7@annotation-stripped (lambda (bC2994@x) (bC28cd@annotation-expression bC2994@x))) (set! bC29f6@bC28c7@annotation-stripped bC28c7@annotation-stripped) (set! bC28c9@annotation? (lambda (bC2996@x) (source-info bC2996@x))) (set! bC29f7@bC28c9@annotation? bC28c9@annotation?) (set! bC28cb@annotation-source (lambda (bC2998@x) (source-info bC2998@x))) (set! bC29f8@bC28cb@annotation-source bC28cb@annotation-source) (set! bC28cd@annotation-expression (lambda (bC299a@x) (if (pair? bC299a@x) (cons (car bC299a@x) (cdr bC299a@x)) (if (procedure? bC299a@x) (set-source-info! bC299a@x '#f) bC299a@x)))) (set! bC29f9@bC28cd@annotation-expression bC28cd@annotation-expression) (set! bC28cf@scm->fasl (lambda (bC299c@filename) (string-append (bC28e3@mosh-cache-dir) '"/" (bC28c3@library-file-path->cache-path bC299c@filename) '".mosh-fasl"))) (set! bC29fa@bC28cf@scm->fasl bC28cf@scm->fasl) (set! bC28d1@fasl-save (lambda (bC299e@filename bC299f@obj) (call-with-port (open-file-output-port bC299e@filename) (lambda (bC29a2@port) ((symbol-value 'fasl-write!) bC299f@obj bC29a2@port))))) (set! bC29fb@bC28d1@fasl-save bC28d1@fasl-save) (set! bC28d3@fasl-load (lambda (bC29a4@filename) (call-with-port (open-file-input-port bC29a4@filename) (symbol-value 'fasl-read!)))) (set! bC29fc@bC28d3@fasl-load bC28d3@fasl-load) (set! bC28d5@verbose? (symbol-value '%verbose)) (set! bC29fd@bC28d5@verbose? bC28d5@verbose?) (set! bC28d7@serialize-library (lambda (bC29a6@filename bC29a7@obj) (begin (if bC28d5@verbose? (format (current-error-port) '"serialize-library ~a\n..." bC29a6@filename) (void)) (let ((bC29aa@expanded2core (symbol-value 'expanded2core))) (let ((bC29ac@compile (symbol-value 'compile-w/o-halt))) (let ((bC29ae@code bC29a7@obj)) (let ((bC29b0@pivot (cddddr (cddddr bC29ae@code)))) (let ((bC29b2@visit (bC29ac@compile (bC29aa@expanded2core (car bC29b0@pivot))))) (begin (set-car! bC29b0@pivot bC29b2@visit) (let ((bC29b4@pivot (cdr bC29b0@pivot))) (let ((bC29b6@invoke (bC29ac@compile (bC29aa@expanded2core (car bC29b4@pivot))))) (set-car! bC29b4@pivot bC29b6@invoke))))))))) (let ((bC29b8@fasl-file (bC28cf@scm->fasl bC29a6@filename))) (begin (if (file-exists? bC29b8@fasl-file) (delete-file bC29b8@fasl-file) (void)) ((call/cc (lambda (bC29bc@bC29ba) (lambda () (with-exception-handler (lambda (bC29be@c) ((call/cc (lambda (bC29c0@bC29bb) (bC29bc@bC29ba (lambda () (if '#t (begin (if bC28d5@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" bC29a6@filename) (void)) (if (file-exists? bC29b8@fasl-file) (delete-file bC29b8@fasl-file) (void)) '#f) (bC29c0@bC29bb (lambda () (raise-continuable bC29be@c)))))))))) (lambda () (bC28d1@fasl-save bC29b8@fasl-file bC29a7@obj)))))))))))) (set! bC29fe@bC28d7@serialize-library bC28d7@serialize-library) (set! bC28d9@load-serialized-library (lambda (bC29c2@filename bC29c3@obj) (and (bC28e3@mosh-cache-dir) (let ((bC29c6@fasl-file (bC28cf@scm->fasl bC29c2@filename))) (if (and (file-exists? bC29c6@fasl-file) ((symbol-value 'file-newer?) bC29c6@fasl-file bC29c2@filename)) (let ((bC29c8@expanded2core (symbol-value 'expanded2core))) (let ((bC29ca@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((bC29cc@code (bC28d3@fasl-load bC29c6@fasl-file))) (let ((bC29ce@pivot (cddddr (cddddr bC29cc@code)))) (let ((bC29d0@visit (car bC29ce@pivot))) (let ((bC29d2@visit-proc (lambda () (bC29ca@eval-compiled-core bC29d0@visit)))) (begin (set-car! bC29ce@pivot bC29d2@visit-proc) (let ((bC29d4@pivot (cdr bC29ce@pivot))) (let ((bC29d6@invoke (car bC29d4@pivot))) (begin (set-car! bC29d4@pivot (lambda () (bC29ca@eval-compiled-core bC29d6@invoke))) (apply bC29c3@obj bC29cc@code))))))))))) '#f))))) (set! bC29ff@bC28d9@load-serialized-library bC28d9@load-serialized-library) (set! bC28db@make-record-printer (lambda (bC29d8@name bC29d9@printer) (lambda bC29dc@x (begin (display '"record printer") (for-each display bC29dc@x))))) (set! bC2a00@bC28db@make-record-printer bC28db@make-record-printer) (set! bC28dd@compile-core (lambda bC29de@x (apply error 'comile-core '"not implementated" bC29de@x))) (set! bC2a01@bC28dd@compile-core bC28dd@compile-core) (set! bC28df@read-library-source-file (lambda (bC29e0@file-name) (with-input-from-file bC29e0@file-name bC28c5@read-annotated))) (set! bC2a02@bC28df@read-library-source-file bC28df@read-library-source-file) (set! bC28e1@make-parameter (lambda bC29f0 (let ((bC29f1 (length bC29f0))) (if (= bC29f1 '1) (apply (lambda (bC29e2@x) (bC28e1@make-parameter bC29e2@x (lambda (bC29e4@x) bC29e4@x))) bC29f0) (if (= bC29f1 '2) (apply (lambda (bC29e6@x bC29e7@fender) (let ((bC29ea@x (bC29e7@fender bC29e6@x))) (lambda bC29ee (let ((bC29ef (length bC29ee))) (if (= bC29ef '0) (apply (lambda () bC29ea@x) bC29ee) (if (= bC29ef '1) (apply (lambda (bC29ec@v) (set! bC29ea@x (bC29e7@fender bC29ec@v))) bC29ee) (error 'apply '"invalid arg count"))))))) bC29f0) (error 'apply '"invalid arg count")))))) (set! bC2a03@bC28e1@make-parameter bC28e1@make-parameter) (set! bC28e3@mosh-cache-dir (bC28e1@make-parameter '#f)) (set! bC2a04@bC28e3@mosh-cache-dir bC28e3@mosh-cache-dir) (set! bC2979@file-options-spec (lambda (bC29f2@x) bC29f2@x)) (set! bC2a05@bC2979@file-options-spec bC2979@file-options-spec) (void))
(begin (set! bC2a0b@current-primitive-locations (unspecified)) (set! bC2a0d@mutable? (unspecified)) (set! bC2a0f@rewriter (unspecified)) (set! bC2a11@expanded->core (unspecified)) (set! bC2a13@compile-core-expr (unspecified)) (set! bC2a15@pretty-print (unspecified)) (set! bC2a17@compile-core-expr-to-port (unspecified)) (set! bC2a0b@current-primitive-locations (bC2a03@bC28e1@make-parameter (lambda (bC2a18@x) '#f) (lambda (bC2a1a@p) bC2a1a@p))) (set! bC2a56@bC2a0b@current-primitive-locations bC2a0b@current-primitive-locations) (set! bC2a0d@mutable? (lambda (bC2a1c@x) (or (pair? bC2a1c@x) (vector? bC2a1c@x) (hashtable? bC2a1c@x)))) (set! bC2a57@bC2a0d@mutable? bC2a0d@mutable?) (set! bC2a0f@rewriter (lambda (bC2a1e@quote-hack?) (letrec* ((bC2a21@f (lambda (bC2a22@x) (if (pair? bC2a22@x) (let ((bC2a24@t (car bC2a22@x))) (if (memv bC2a24@t '(quote)) (if (and bC2a1e@quote-hack? (bC2a0d@mutable? (cadr bC2a22@x))) (let ((bC2a26@g (gensym))) (begin (set-symbol-value! bC2a26@g (cadr bC2a22@x)) bC2a26@g)) bC2a22@x) (if (memv bC2a24@t '(case-lambda)) (cons 'case-lambda (map (lambda (bC2a28@x) (cons (car bC2a28@x) (map bC2a21@f (cdr bC2a28@x)))) (cdr bC2a22@x))) (if (memv bC2a24@t '(lambda)) (cons* 'lambda (cadr bC2a22@x) (map bC2a21@f (cddr bC2a22@x))) (if (memv bC2a24@t '(letrec)) (let ((bC2a2a@bindings (cadr bC2a22@x)) (bC2a2b@body* (cddr bC2a22@x))) (let ((bC2a2e@lhs* (map car bC2a2a@bindings)) (bC2a2f@rhs* (map cadr bC2a2a@bindings))) (cons* 'letrec (map list bC2a2e@lhs* (map bC2a21@f bC2a2f@rhs*)) (map bC2a21@f bC2a2b@body*)))) (if (memv bC2a24@t '(letrec*)) (let ((bC2a32@bindings (cadr bC2a22@x)) (bC2a33@body* (cddr bC2a22@x))) (let ((bC2a36@lhs* (map car bC2a32@bindings)) (bC2a37@rhs* (map cadr bC2a32@bindings))) (cons* 'letrec* (map list bC2a36@lhs* (map bC2a21@f bC2a37@rhs*)) (map bC2a21@f bC2a33@body*)))) (if (memv bC2a24@t '(library-letrec*)) (let ((bC2a3a@name (cadr bC2a22@x)) (bC2a3b@x (cdr bC2a22@x))) (let ((bC2a3e@bindings (cadr bC2a3b@x)) (bC2a3f@body* (cddr bC2a3b@x))) (let ((bC2a42@lhs* (map car bC2a3e@bindings)) (bC2a43@lhs** (map cadr bC2a3e@bindings)) (bC2a44@rhs* (map caddr bC2a3e@bindings))) (cons* 'library-letrec* bC2a3a@name (map list bC2a42@lhs* bC2a43@lhs** (map bC2a21@f bC2a44@rhs*)) (map bC2a21@f bC2a3f@body*))))) (if (memv bC2a24@t '(begin)) (cons 'begin (map bC2a21@f (cdr bC2a22@x))) (if (memv bC2a24@t '(set!)) (list 'set! (cadr bC2a22@x) (bC2a21@f (caddr bC2a22@x))) (if (memv bC2a24@t '(primitive)) (let ((bC2a48@op (cadr bC2a22@x))) (let ((bC2a4a@t ((bC2a0b@current-primitive-locations) bC2a48@op))) (if bC2a4a@t ((lambda (bC2a4c@loc) bC2a4c@loc) bC2a4a@t) bC2a48@op))) (if (memv bC2a24@t '(define)) bC2a22@x (if (list? bC2a22@x) (map bC2a21@f bC2a22@x) (error 'rewrite '"invalid form ~s ~s" bC2a22@x (list? bC2a22@x)))))))))))))) bC2a22@x)))) bC2a21@f))) (set! bC2a58@bC2a0f@rewriter bC2a0f@rewriter) (set! bC2a11@expanded->core (lambda (bC2a4e@x) ((bC2a0f@rewriter '#f) bC2a4e@x))) (set! bC2a59@bC2a11@expanded->core bC2a11@expanded->core) (set! bC2a13@compile-core-expr (lambda (bC2a50@x) ((bC2a0f@rewriter '#f) bC2a50@x))) (set! bC2a5a@bC2a13@compile-core-expr bC2a13@compile-core-expr) (set! bC2a15@pretty-print write) (set! bC2a5b@bC2a15@pretty-print bC2a15@pretty-print) (set! bC2a17@compile-core-expr-to-port (lambda (bC2a52@x bC2a53@p) (bC2a15@pretty-print ((bC2a0f@rewriter '#f) bC2a52@x) bC2a53@p))) (set! bC2a5c@bC2a17@compile-core-expr-to-port bC2a17@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! bC2aab@make-collection (unspecified)) (set! bC2aad@current-library-collection (unspecified)) (set! bC2aaf@rp (unspecified)) (set! bC2ab9@library? (unspecified)) (set! bC2abb@library-id (unspecified)) (set! bC2abd@set-library-id! (unspecified)) (set! bC2abf@library-name (unspecified)) (set! bC2ac1@set-library-name! (unspecified)) (set! bC2ac3@library-version (unspecified)) (set! bC2ac5@set-library-version! (unspecified)) (set! bC2ac7@library-imp* (unspecified)) (set! bC2ac9@set-library-imp*! (unspecified)) (set! bC2acb@library-vis* (unspecified)) (set! bC2acd@set-library-vis*! (unspecified)) (set! bC2acf@library-inv* (unspecified)) (set! bC2ad1@set-library-inv*! (unspecified)) (set! bC2ad3@library-subst (unspecified)) (set! bC2ad5@set-library-subst! (unspecified)) (set! bC2ad7@library-env (unspecified)) (set! bC2ad9@set-library-env! (unspecified)) (set! bC2adb@library-visit-state (unspecified)) (set! bC2add@set-library-visit-state! (unspecified)) (set! bC2adf@library-invoke-state (unspecified)) (set! bC2ae1@set-library-invoke-state! (unspecified)) (set! bC2ae3@library-visit-code (unspecified)) (set! bC2ae5@set-library-visit-code! (unspecified)) (set! bC2ae7@library-invoke-code (unspecified)) (set! bC2ae9@set-library-invoke-code! (unspecified)) (set! bC2aeb@library-visible? (unspecified)) (set! bC2aed@set-library-visible?! (unspecified)) (set! bC2aef@library-source-file-name (unspecified)) (set! bC2af1@set-library-source-file-name! (unspecified)) (set! bC2af3@dummy (unspecified)) (set! bC2af5@find-dependencies (unspecified)) (set! bC2af7@find-library-by (unspecified)) (set! bC2af9@library-path (unspecified)) (set! bC2afb@library-extensions (unspecified)) (set! bC2afd@library-name->file-name (unspecified)) (set! bC2aff@file-locator (unspecified)) (set! bC2b01@serialize-all (unspecified)) (set! bC2b03@current-precompiled-library-loader (unspecified)) (set! bC2b05@try-load-from-file (unspecified)) (set! bC2b07@library-loader (unspecified)) (set! bC2b09@current-library-expander (unspecified)) (set! bC2b0b@external-pending-libraries (unspecified)) (set! bC2b0d@find-external-library (unspecified)) (set! bC2b0f@find-library-by-name (unspecified)) (set! bC2b11@library-exists? (unspecified)) (set! bC2b13@find-library-by-spec/die (unspecified)) (set! bC2b15@label->binding-table (unspecified)) (set! bC2b17@install-library-record (unspecified)) (set! bC2b19@install-library (unspecified)) (set! bC2b1b@imported-label->binding (unspecified)) (set! bC2b1d@invoke-library (unspecified)) (set! bC2b1f@visit-library (unspecified)) (set! bC2b21@invoke-library-by-spec (unspecified)) (set! bC2b23@installed-libraries (unspecified)) (set! bC2b25@library-spec (unspecified)) (set! bC2aab@make-collection (lambda () (let ((bC2b26@set '())) (letrec* ((bC2b29@set-cons (lambda (bC2b2e@x bC2b2f@ls) (if (memq bC2b2e@x bC2b2f@ls) bC2b2f@ls (cons bC2b2e@x bC2b2f@ls))))) (lambda bC2b2c (let ((bC2b2d (length bC2b2c))) (if (= bC2b2d '0) (apply (lambda () bC2b26@set) bC2b2c) (if (= bC2b2d '1) (apply (lambda (bC2b2a@x) (set! bC2b26@set (bC2b29@set-cons bC2b2a@x bC2b26@set))) bC2b2c) (error 'apply '"invalid arg count"))))))))) (set! bC2c9a@bC2aab@make-collection bC2aab@make-collection) (set! bC2aad@current-library-collection (bC2a03@bC28e1@make-parameter (bC2aab@make-collection) (lambda (bC2b32@x) (begin (if (not (procedure? bC2b32@x)) (assertion-violation 'current-library-collection '"not a procedure" bC2b32@x) (void)) bC2b32@x)))) (set! bC2c9b@bC2aad@current-library-collection bC2aad@current-library-collection) (set! bC2aaf@rp (bC2a00@bC28db@make-record-printer 'library (lambda (bC2b34@x bC2b35@p bC2b36@wr) (begin (if (not (bC2ab9@library? bC2b34@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (bC2ac3@library-version bC2b34@x)) (bC2abf@library-name bC2b34@x) (append (bC2abf@library-name bC2b34@x) (list (bC2ac3@library-version bC2b34@x))))) bC2b35@p))))) (set! bC2c9c@bC2aaf@rp bC2aaf@rp) (set! bC2ab9@library? (lambda (bC2b3a@x) (and (simple-struct? bC2b3a@x) (eq? (simple-struct-name bC2b3a@x) 'library)))) (set! bC2c9d@bC2ab9@library? bC2ab9@library?) (set! bC2abb@library-id (lambda (bC2b3c@x) (simple-struct-ref bC2b3c@x '0))) (set! bC2c9e@bC2abb@library-id bC2abb@library-id) (set! bC2abd@set-library-id! (lambda (bC2b3e@x bC2b3f@val) (simple-struct-set! bC2b3e@x '0 bC2b3f@val))) (set! bC2c9f@bC2abd@set-library-id! bC2abd@set-library-id!) (set! bC2abf@library-name (lambda (bC2b42@x) (simple-struct-ref bC2b42@x '1))) (set! bC2ca0@bC2abf@library-name bC2abf@library-name) (set! bC2ac1@set-library-name! (lambda (bC2b44@x bC2b45@val) (simple-struct-set! bC2b44@x '1 bC2b45@val))) (set! bC2ca1@bC2ac1@set-library-name! bC2ac1@set-library-name!) (set! bC2ac3@library-version (lambda (bC2b48@x) (simple-struct-ref bC2b48@x '2))) (set! bC2ca2@bC2ac3@library-version bC2ac3@library-version) (set! bC2ac5@set-library-version! (lambda (bC2b4a@x bC2b4b@val) (simple-struct-set! bC2b4a@x '2 bC2b4b@val))) (set! bC2ca3@bC2ac5@set-library-version! bC2ac5@set-library-version!) (set! bC2ac7@library-imp* (lambda (bC2b4e@x) (simple-struct-ref bC2b4e@x '3))) (set! bC2ca4@bC2ac7@library-imp* bC2ac7@library-imp*) (set! bC2ac9@set-library-imp*! (lambda (bC2b50@x bC2b51@val) (simple-struct-set! bC2b50@x '3 bC2b51@val))) (set! bC2ca5@bC2ac9@set-library-imp*! bC2ac9@set-library-imp*!) (set! bC2acb@library-vis* (lambda (bC2b54@x) (simple-struct-ref bC2b54@x '4))) (set! bC2ca6@bC2acb@library-vis* bC2acb@library-vis*) (set! bC2acd@set-library-vis*! (lambda (bC2b56@x bC2b57@val) (simple-struct-set! bC2b56@x '4 bC2b57@val))) (set! bC2ca7@bC2acd@set-library-vis*! bC2acd@set-library-vis*!) (set! bC2acf@library-inv* (lambda (bC2b5a@x) (simple-struct-ref bC2b5a@x '5))) (set! bC2ca8@bC2acf@library-inv* bC2acf@library-inv*) (set! bC2ad1@set-library-inv*! (lambda (bC2b5c@x bC2b5d@val) (simple-struct-set! bC2b5c@x '5 bC2b5d@val))) (set! bC2ca9@bC2ad1@set-library-inv*! bC2ad1@set-library-inv*!) (set! bC2ad3@library-subst (lambda (bC2b60@x) (simple-struct-ref bC2b60@x '6))) (set! bC2caa@bC2ad3@library-subst bC2ad3@library-subst) (set! bC2ad5@set-library-subst! (lambda (bC2b62@x bC2b63@val) (simple-struct-set! bC2b62@x '6 bC2b63@val))) (set! bC2cab@bC2ad5@set-library-subst! bC2ad5@set-library-subst!) (set! bC2ad7@library-env (lambda (bC2b66@x) (simple-struct-ref bC2b66@x '7))) (set! bC2cac@bC2ad7@library-env bC2ad7@library-env) (set! bC2ad9@set-library-env! (lambda (bC2b68@x bC2b69@val) (simple-struct-set! bC2b68@x '7 bC2b69@val))) (set! bC2cad@bC2ad9@set-library-env! bC2ad9@set-library-env!) (set! bC2adb@library-visit-state (lambda (bC2b6c@x) (simple-struct-ref bC2b6c@x '8))) (set! bC2cae@bC2adb@library-visit-state bC2adb@library-visit-state) (set! bC2add@set-library-visit-state! (lambda (bC2b6e@x bC2b6f@val) (simple-struct-set! bC2b6e@x '8 bC2b6f@val))) (set! bC2caf@bC2add@set-library-visit-state! bC2add@set-library-visit-state!) (set! bC2adf@library-invoke-state (lambda (bC2b72@x) (simple-struct-ref bC2b72@x '9))) (set! bC2cb0@bC2adf@library-invoke-state bC2adf@library-invoke-state) (set! bC2ae1@set-library-invoke-state! (lambda (bC2b74@x bC2b75@val) (simple-struct-set! bC2b74@x '9 bC2b75@val))) (set! bC2cb1@bC2ae1@set-library-invoke-state! bC2ae1@set-library-invoke-state!) (set! bC2ae3@library-visit-code (lambda (bC2b78@x) (simple-struct-ref bC2b78@x '10))) (set! bC2cb2@bC2ae3@library-visit-code bC2ae3@library-visit-code) (set! bC2ae5@set-library-visit-code! (lambda (bC2b7a@x bC2b7b@val) (simple-struct-set! bC2b7a@x '10 bC2b7b@val))) (set! bC2cb3@bC2ae5@set-library-visit-code! bC2ae5@set-library-visit-code!) (set! bC2ae7@library-invoke-code (lambda (bC2b7e@x) (simple-struct-ref bC2b7e@x '11))) (set! bC2cb4@bC2ae7@library-invoke-code bC2ae7@library-invoke-code) (set! bC2ae9@set-library-invoke-code! (lambda (bC2b80@x bC2b81@val) (simple-struct-set! bC2b80@x '11 bC2b81@val))) (set! bC2cb5@bC2ae9@set-library-invoke-code! bC2ae9@set-library-invoke-code!) (set! bC2aeb@library-visible? (lambda (bC2b84@x) (simple-struct-ref bC2b84@x '12))) (set! bC2cb6@bC2aeb@library-visible? bC2aeb@library-visible?) (set! bC2aed@set-library-visible?! (lambda (bC2b86@x bC2b87@val) (simple-struct-set! bC2b86@x '12 bC2b87@val))) (set! bC2cb7@bC2aed@set-library-visible?! bC2aed@set-library-visible?!) (set! bC2aef@library-source-file-name (lambda (bC2b8a@x) (simple-struct-ref bC2b8a@x '13))) (set! bC2cb8@bC2aef@library-source-file-name bC2aef@library-source-file-name) (set! bC2af1@set-library-source-file-name! (lambda (bC2b8c@x bC2b8d@val) (simple-struct-set! bC2b8c@x '13 bC2b8d@val))) (set! bC2cb9@bC2af1@set-library-source-file-name! bC2af1@set-library-source-file-name!) (set! bC2af3@dummy '3) (set! bC2cba@bC2af3@dummy bC2af3@dummy) (set! bC2af5@find-dependencies (lambda (bC2b90@ls) (if (null? bC2b90@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! bC2cbb@bC2af5@find-dependencies bC2af5@find-dependencies) (set! bC2af7@find-library-by (lambda (bC2b92@pred) (let bC2b96@f ((bC2b94@ls ((bC2aad@current-library-collection)))) (if (null? bC2b94@ls) '#f (if (bC2b92@pred (car bC2b94@ls)) (car bC2b94@ls) (bC2b96@f (cdr bC2b94@ls))))))) (set! bC2cbc@bC2af7@find-library-by bC2af7@find-library-by) (set! bC2af9@library-path (bC2a03@bC28e1@make-parameter '(".") (lambda (bC2b98@x) (if (and (list? bC2b98@x) (for-all string? bC2b98@x)) (map (lambda (bC2b9a@x) bC2b9a@x) bC2b98@x) (assertion-violation 'library-path '"not a list of strings" bC2b98@x))))) (set! bC2cbd@bC2af9@library-path bC2af9@library-path) (set! bC2afb@library-extensions (bC2a03@bC28e1@make-parameter '(".sls" ".ss" ".scm") (lambda (bC2b9c@x) (if (and (list? bC2b9c@x) (for-all string? bC2b9c@x)) (map (lambda (bC2b9e@x) bC2b9e@x) bC2b9c@x) (assertion-violation 'library-extensions '"not a list of strings" bC2b9c@x))))) (set! bC2cbe@bC2afb@library-extensions bC2afb@library-extensions) (set! bC2afd@library-name->file-name (lambda (bC2ba0@x) (call-with-values (lambda () (open-string-output-port)) (lambda (bC2ba6@bC2ba3 bC2ba7@bC2ba5) (let ((bC2baa@extract bC2ba7@bC2ba5) (bC2bab@p bC2ba6@bC2ba3)) (letrec* ((bC2baf@display-hex (lambda (bC2bb8@n) (if (<= '0 bC2bb8@n '9) (display bC2bb8@n bC2bab@p) (display (integer->char (+ (char->integer '#\a) (- bC2bb8@n '10))) bC2bab@p))))) (begin (let bC2bb2@f ((bC2bb0@ls bC2ba0@x)) (if (not (null? bC2bb0@ls)) (begin (display '"/" bC2bab@p) (for-each (lambda (bC2bb4@c) (if (or (char<=? '#\a bC2bb4@c '#\z) (char<=? '#\A bC2bb4@c '#\Z) (char<=? '#\0 bC2bb4@c '#\9) (memv bC2bb4@c '(#\- #\. #\_ #\~))) (display bC2bb4@c bC2bab@p) (begin (display '"%" bC2bab@p) (let ((bC2bb6@n (char->integer bC2bb4@c))) (begin (bC2baf@display-hex (quotient bC2bb6@n '16)) (bC2baf@display-hex (remainder bC2bb6@n '16))))))) (string->list (symbol->string (car bC2bb0@ls)))) (bC2bb2@f (cdr bC2bb0@ls))) (void))) (bC2baa@extract)))))))) (set! bC2cbf@bC2afd@library-name->file-name bC2afd@library-name->file-name) (set! bC2aff@file-locator (bC2a03@bC28e1@make-parameter (lambda (bC2bba@x) (let ((bC2bbc@str (bC2afd@library-name->file-name bC2bba@x))) (let bC2bc4@f ((bC2bbe@ls (bC2af9@library-path)) (bC2bbf@exts (bC2afb@library-extensions)) (bC2bc0@failed-list '())) (if (null? bC2bbe@ls) (letrec* ((bC2bce@bC2bc9 (make-record-type-descriptor '&library-resolution bC4ecf@bC4c16@&condition-rtd 'bC2bcc '#f '#f '#((immutable library) (immutable files)))) (bC2bd0@bC2bcb '#f) (bC2bd2@bC2bca (make-record-constructor-descriptor bC2bce@bC2bc9 bC4ed0@bC4c18@&condition-rcd bC2bd0@bC2bcb)) (bC2bd5@bC2bc8 (record-predicate bC2bce@bC2bc9)) (bC2bd7@make-library-resolution-condition (record-constructor bC2bd2@bC2bca)) (bC2bd9@bC2bc6 (record-accessor bC2bce@bC2bc9 '0)) (bC2bdb@bC2bc7 (record-accessor bC2bce@bC2bc9 '1)) (bC2bdd@library-resolution-condition? (condition-predicate bC2bce@bC2bc9)) (bC2bdf@condition-library (condition-accessor bC2bce@bC2bc9 bC2bd9@bC2bc6)) (bC2be1@condition-files (condition-accessor bC2bce@bC2bc9 bC2bdb@bC2bc7))) (raise (condition (bC4eef@bC4cb0@make-error) (bC4f11@bC4d0c@make-who-condition 'expander) (bC4ed5@bC4c6d@make-message-condition '"cannot locate library in library-path") (bC2bd7@make-library-resolution-condition bC2bba@x (reverse bC2bc0@failed-list))))) (if (null? bC2bbf@exts) (bC2bc4@f (cdr bC2bbe@ls) (bC2afb@library-extensions) bC2bc0@failed-list) (let ((bC2be2@name (string-append (car bC2bbe@ls) bC2bbc@str (car bC2bbf@exts)))) (if (file-exists? bC2be2@name) bC2be2@name (bC2bc4@f bC2bbe@ls (cdr bC2bbf@exts) (cons bC2be2@name bC2bc0@failed-list))))))))) (lambda (bC2be4@f) (if (procedure? bC2be4@f) bC2be4@f (assertion-violation 'file-locator '"not a procedure" bC2be4@f))))) (set! bC2cc0@bC2aff@file-locator bC2aff@file-locator) (set! bC2b01@serialize-all (lambda (bC2be6@serialize bC2be7@compile) (letrec* ((bC2beb@library-desc (lambda (bC2bee@x) (list (bC2abb@library-id bC2bee@x) (bC2abf@library-name bC2bee@x))))) (for-each (lambda (bC2bec@x) (if (bC2aef@library-source-file-name bC2bec@x) (bC2be6@serialize (bC2aef@library-source-file-name bC2bec@x) (list (bC2abb@library-id bC2bec@x) (bC2abf@library-name bC2bec@x) (bC2ac3@library-version bC2bec@x) (map bC2beb@library-desc (bC2ac7@library-imp* bC2bec@x)) (map bC2beb@library-desc (bC2acb@library-vis* bC2bec@x)) (map bC2beb@library-desc (bC2acf@library-inv* bC2bec@x)) (bC2ad3@library-subst bC2bec@x) (bC2ad7@library-env bC2bec@x) (bC2be7@compile (bC2ae3@library-visit-code bC2bec@x)) (bC2be7@compile (bC2ae7@library-invoke-code bC2bec@x)) (bC2aeb@library-visible? bC2bec@x))) (void))) ((bC2aad@current-library-collection)))))) (set! bC2cc1@bC2b01@serialize-all bC2b01@serialize-all) (set! bC2b03@current-precompiled-library-loader (bC2a03@bC28e1@make-parameter (lambda (bC2bf0@filename bC2bf1@sk) '#f))) (set! bC2cc2@bC2b03@current-precompiled-library-loader bC2b03@current-precompiled-library-loader) (set! bC2b05@try-load-from-file (lambda (bC2bf4@filename) ((bC2b03@current-precompiled-library-loader) bC2bf4@filename (lambda bC2c1a (let ((bC2c1b (length bC2c1a))) (if (= bC2c1b '11) (apply (lambda (bC2bf6@id bC2bf7@name bC2bf8@ver bC2bf9@imp* bC2bfa@vis* bC2bfb@inv* bC2bfc@exp-subst bC2bfd@exp-env bC2bfe@visit-proc bC2bff@invoke-proc bC2c00@visible?) (let bC2c0e@f ((bC2c0c@deps (append bC2bf9@imp* bC2bfa@vis* bC2bfb@inv*))) (if (null? bC2c0c@deps) (begin (bC2b19@install-library bC2bf6@id bC2bf7@name bC2bf8@ver bC2bf9@imp* bC2bfa@vis* bC2bfb@inv* bC2bfc@exp-subst bC2bfd@exp-env bC2bfe@visit-proc bC2bff@invoke-proc '#f '#f bC2c00@visible? '#f) '#t) (let ((bC2c10@d (car bC2c0c@deps))) (let ((bC2c12@label (car bC2c10@d)) (bC2c13@dname (cadr bC2c10@d))) (let ((bC2c16@l (bC2b0f@find-library-by-name bC2c13@dname))) (if (and (bC2ab9@library? bC2c16@l) (eq? bC2c12@label (bC2abb@library-id bC2c16@l))) (bC2c0e@f (cdr bC2c0c@deps)) (begin (if bC29fd@bC28d5@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" bC2bf7@name bC2c13@dname bC2bf4@filename bC2c16@l bC2c12@label (bC2abb@library-id bC2c16@l)) (void)) '#f)))))))) bC2c1a) (if (>= bC2c1b '0) (apply (lambda bC2c18@others '#f) bC2c1a) (error 'apply '"invalid arg count")))))))) (set! bC2cc3@bC2b05@try-load-from-file bC2b05@try-load-from-file) (set! bC2b07@library-loader (bC2a03@bC28e1@make-parameter (lambda (bC2c1c@x) (let ((bC2c1e@file-name ((bC2aff@file-locator) bC2c1c@x))) (if (not bC2c1e@file-name) (assertion-violation '#f '"cannot file library" bC2c1c@x) (or (bC2b05@try-load-from-file bC2c1e@file-name) ((bC2b09@current-library-expander) (bC2a02@bC28df@read-library-source-file bC2c1e@file-name) bC2c1e@file-name (lambda (bC2c20@name) (if (not (fast-equal? bC2c20@name bC2c1c@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (bC2c26@bC2c23 bC2c27@bC2c25) (let ((bC2c2a@e bC2c27@bC2c25) (bC2c2b@p bC2c26@bC2c23)) (begin (display '"expected to find library " bC2c2b@p) (write bC2c1c@x bC2c2b@p) (display '" in file " bC2c2b@p) (display bC2c1e@file-name bC2c2b@p) (display '", found " bC2c2b@p) (write bC2c20@name bC2c2b@p) (display '" instead" bC2c2b@p) (bC2c2a@e)))))) (void)))))))) (lambda (bC2c2e@f) (if (procedure? bC2c2e@f) bC2c2e@f (assertion-violation 'library-locator '"not a procedure" bC2c2e@f))))) (set! bC2cc4@bC2b07@library-loader bC2b07@library-loader) (set! bC2b09@current-library-expander (bC2a03@bC28e1@make-parameter (lambda (bC2c30@x) (assertion-violation 'library-expander '"not initialized")) (lambda (bC2c32@f) (if (procedure? bC2c32@f) bC2c32@f (assertion-violation 'library-expander '"not a procedure" bC2c32@f))))) (set! bC2cc5@bC2b09@current-library-expander bC2b09@current-library-expander) (set! bC2b0b@external-pending-libraries (bC2a03@bC28e1@make-parameter '())) (set! bC2cc6@bC2b0b@external-pending-libraries bC2b0b@external-pending-libraries) (set! bC2b0d@find-external-library (lambda (bC2c34@name) (begin (if (member bC2c34@name (bC2b0b@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" bC2c34@name) (void)) (let ((bC2c3a@bC2c37 bC2b0b@external-pending-libraries) (bC2c3b@bC2c39 (cons bC2c34@name (bC2b0b@external-pending-libraries)))) (let ((bC2c3e@swap (lambda () (let ((bC2c40@t (bC2c3a@bC2c37))) (begin (bC2c3a@bC2c37 bC2c3b@bC2c39) (set! bC2c3b@bC2c39 bC2c40@t)))))) (dynamic-wind bC2c3e@swap (lambda () (begin ((bC2b07@library-loader) bC2c34@name) (or (bC2af7@find-library-by (lambda (bC2c42@x) (fast-equal? (bC2abf@library-name bC2c42@x) bC2c34@name))) (assertion-violation '#f '"handling external library did not yield the correct library" bC2c34@name)))) bC2c3e@swap)))))) (set! bC2cc7@bC2b0d@find-external-library bC2b0d@find-external-library) (set! bC2b0f@find-library-by-name (lambda (bC2c44@name) (or (bC2af7@find-library-by (lambda (bC2c46@x) (fast-equal? (bC2abf@library-name bC2c46@x) bC2c44@name))) (bC2b0d@find-external-library bC2c44@name)))) (set! bC2cc8@bC2b0f@find-library-by-name bC2b0f@find-library-by-name) (set! bC2b11@library-exists? (lambda (bC2c48@name) (and (bC2af7@find-library-by (lambda (bC2c4a@x) (fast-equal? (bC2abf@library-name bC2c4a@x) bC2c48@name))) '#t))) (set! bC2cc9@bC2b11@library-exists? bC2b11@library-exists?) (set! bC2b13@find-library-by-spec/die (lambda (bC2c4c@spec) (let ((bC2c4e@id (car bC2c4c@spec))) (or (bC2af7@find-library-by (lambda (bC2c50@x) (eq? bC2c4e@id (bC2abb@library-id bC2c50@x)))) (assertion-violation '#f '"cannot find library with required spec" bC2c4c@spec))))) (set! bC2cca@bC2b13@find-library-by-spec/die bC2b13@find-library-by-spec/die) (set! bC2b15@label->binding-table (make-eq-hashtable)) (set! bC2ccb@bC2b15@label->binding-table bC2b15@label->binding-table) (set! bC2b17@install-library-record (lambda (bC2c52@lib) (begin (let ((bC2c54@exp-env (bC2ad7@library-env bC2c52@lib))) (for-each (lambda (bC2c56@x) (let ((bC2c58@label (car bC2c56@x)) (bC2c59@binding (cdr bC2c56@x))) (let ((bC2c5c@binding (let ((bC2c5e@t (car bC2c59@binding))) (if (memv bC2c5e@t '(global)) (cons 'global (cons bC2c52@lib (cdr bC2c59@binding))) (if (memv bC2c5e@t '(global-macro)) (cons 'global-macro (cons bC2c52@lib (cdr bC2c59@binding))) (if (memv bC2c5e@t '(global-macro!)) (cons 'global-macro! (cons bC2c52@lib (cdr bC2c59@binding))) bC2c59@binding)))))) (begin (if (hashtable-ref bC2b15@label->binding-table bC2c58@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" bC2c58@label (hashtable-ref bC2b15@label->binding-table bC2c58@label '#f) bC2c5c@binding) (exit)) (void)) (hashtable-set! bC2b15@label->binding-table bC2c58@label bC2c5c@binding))))) bC2c54@exp-env)) ((bC2aad@current-library-collection) bC2c52@lib)))) (set! bC2ccc@bC2b17@install-library-record bC2b17@install-library-record) (set! bC2b19@install-library (lambda (bC2c60@id bC2c61@name bC2c62@ver bC2c63@imp* bC2c64@vis* bC2c65@inv* bC2c66@exp-subst bC2c67@exp-env bC2c68@visit-proc bC2c69@invoke-proc bC2c6a@visit-code bC2c6b@invoke-code bC2c6c@visible? bC2c6d@source-file-name) (let ((bC2c7c@imp-lib* (map bC2b13@find-library-by-spec/die bC2c63@imp*)) (bC2c7d@vis-lib* (map bC2b13@find-library-by-spec/die bC2c64@vis*)) (bC2c7e@inv-lib* (map bC2b13@find-library-by-spec/die bC2c65@inv*))) (begin (if (not (and (symbol? bC2c60@id) (list? bC2c61@name) (list? bC2c62@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" bC2c60@id bC2c61@name bC2c62@ver) (void)) (if (bC2b11@library-exists? bC2c61@name) (assertion-violation 'install-library '"library is already installed" bC2c61@name) (void)) (let ((bC2c82@lib (make-simple-struct 'library '15 (list bC2c60@id bC2c61@name bC2c62@ver bC2c7c@imp-lib* bC2c7d@vis-lib* bC2c7e@inv-lib* bC2c66@exp-subst bC2c67@exp-env bC2c68@visit-proc bC2c69@invoke-proc bC2c6a@visit-code bC2c6b@invoke-code bC2c6c@visible? bC2c6d@source-file-name)))) (bC2b17@install-library-record bC2c82@lib)))))) (set! bC2ccd@bC2b19@install-library bC2b19@install-library) (set! bC2b1b@imported-label->binding (lambda (bC2c84@lab) (hashtable-ref bC2b15@label->binding-table bC2c84@lab '#f))) (set! bC2cce@bC2b1b@imported-label->binding bC2b1b@imported-label->binding) (set! bC2b1d@invoke-library (lambda (bC2c86@lib) (let ((bC2c88@invoke (bC2adf@library-invoke-state bC2c86@lib))) (if (procedure? bC2c88@invoke) (begin (bC2ae1@set-library-invoke-state! bC2c86@lib (lambda () (assertion-violation 'invoke '"circularity detected" bC2c86@lib))) (for-each bC2b1d@invoke-library (bC2acf@library-inv* bC2c86@lib)) (bC2ae1@set-library-invoke-state! bC2c86@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" bC2c86@lib))) (bC2c88@invoke) (bC2ae1@set-library-invoke-state! bC2c86@lib '#t)) (void))))) (set! bC2ccf@bC2b1d@invoke-library bC2b1d@invoke-library) (set! bC2b1f@visit-library (lambda (bC2c8a@lib) (let ((bC2c8c@visit (bC2adb@library-visit-state bC2c8a@lib))) (if (procedure? bC2c8c@visit) (begin (bC2add@set-library-visit-state! bC2c8a@lib (lambda () (assertion-violation 'visit '"circularity detected" bC2c8a@lib))) (for-each bC2b1d@invoke-library (bC2acb@library-vis* bC2c8a@lib)) (bC2add@set-library-visit-state! bC2c8a@lib (lambda () (assertion-violation 'invoke '"first visit did not return" bC2c8a@lib))) (bC2c8c@visit) (bC2add@set-library-visit-state! bC2c8a@lib '#t)) (void))))) (set! bC2cd0@bC2b1f@visit-library bC2b1f@visit-library) (set! bC2b21@invoke-library-by-spec (lambda (bC2c8e@spec) (bC2b1d@invoke-library (bC2b13@find-library-by-spec/die bC2c8e@spec)))) (set! bC2cd1@bC2b21@invoke-library-by-spec bC2b21@invoke-library-by-spec) (set! bC2b23@installed-libraries (lambda bC2c96 (let ((bC2c97 (length bC2c96))) (if (= bC2c97 '1) (apply (lambda (bC2c90@all?) (let bC2c94@f ((bC2c92@ls ((bC2aad@current-library-collection)))) (if (null? bC2c92@ls) '() (if (or bC2c90@all? (bC2aeb@library-visible? (car bC2c92@ls))) (cons (car bC2c92@ls) (bC2c94@f (cdr bC2c92@ls))) (bC2c94@f (cdr bC2c92@ls)))))) bC2c96) (if (= bC2c97 '0) (apply (lambda () (bC2b23@installed-libraries '#f)) bC2c96) (error 'apply '"invalid arg count")))))) (set! bC2cd2@bC2b23@installed-libraries bC2b23@installed-libraries) (set! bC2b25@library-spec (lambda (bC2c98@x) (begin (if (not (bC2ab9@library? bC2c98@x)) (assertion-violation 'library-spec '"not a library" bC2c98@x) (void)) (list (bC2abb@library-id bC2c98@x) (bC2abf@library-name bC2c98@x) (bC2ac3@library-version bC2c98@x))))) (set! bC2cd3@bC2b25@library-spec bC2b25@library-spec) (void))
(begin (set! bC2cd7@build-global-define (unspecified)) (set! bC2d48@build-lambda (unspecified)) (set! bC2d4a@build-case-lambda (unspecified)) (set! bC2d78@build-sequence (unspecified)) (set! bC2d7a@build-void (unspecified)) (set! bC2d7c@build-letrec (unspecified)) (set! bC2d7e@build-let (unspecified)) (set! bC2d80@build-named-let (unspecified)) (set! bC2d82@build-letrec* (unspecified)) (set! bC2d84@build-library-letrec* (unspecified)) (set! bC2d86@build-receive (unspecified)) (set! bC2cd7@build-global-define (lambda (bC2d87@x) (bC2d7a@build-void))) (set! bC2e15@bC2cd7@build-global-define bC2cd7@build-global-define) (set! bC2d48@build-lambda (lambda (bC2d89@ae bC2d8a@vars bC2d8b@exp) (list 'lambda bC2d8a@vars bC2d8b@exp))) (set! bC2e16@bC2d48@build-lambda bC2d48@build-lambda) (set! bC2d4a@build-case-lambda (lambda (bC2d8f@ae bC2d90@vars* bC2d91@exp*) (letrec* ((bC2d96@build-error (lambda (bC2dcd@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (bC2d98@build-pred (lambda (bC2db5@ae bC2db6@n bC2db7@vars) (call-with-values (lambda () (let bC2dc3@f ((bC2dbf@vars bC2db7@vars) (bC2dc0@count '0)) (if (pair? bC2dbf@vars) (bC2dc3@f (cdr bC2dbf@vars) (+ bC2dc0@count '1)) (if (null? bC2dbf@vars) (values bC2dc0@count '=) (values bC2dc0@count '>=))))) (lambda (bC2dc5@bC2dbc bC2dc6@bC2dbe) (let ((bC2dc9@pred bC2dc6@bC2dbe) (bC2dca@count bC2dc5@bC2dbc)) (list (list 'primitive bC2dc9@pred) bC2db6@n (list 'quote bC2dca@count))))))) (bC2d9a@build-apply (lambda (bC2dad@ae bC2dae@g bC2daf@vars bC2db0@exp) (list '(primitive apply) (bC2d48@build-lambda bC2dad@ae bC2daf@vars bC2db0@exp) bC2dae@g))) (bC2d9c@expand-case-lambda (lambda (bC2d9d@ae bC2d9e@vars bC2d9f@exp*) (let ((bC2da3@g (gensym)) (bC2da4@n (gensym))) (list 'lambda bC2da3@g (bC2d7e@build-let bC2d9d@ae (list bC2da4@n) (list (list '(primitive length) bC2da3@g)) (let bC2dab@f ((bC2da7@vars* bC2d90@vars*) (bC2da8@exp* bC2d9f@exp*)) (if (null? bC2da7@vars*) (bC2d96@build-error bC2d9d@ae) (list 'if (bC2d98@build-pred bC2d9d@ae bC2da4@n (car bC2da7@vars*)) (bC2d9a@build-apply bC2d9d@ae bC2da3@g (car bC2da7@vars*) (car bC2da8@exp*)) (bC2dab@f (cdr bC2da7@vars*) (cdr bC2da8@exp*))))))))))) (if (= (length bC2d91@exp*) '1) (bC2d48@build-lambda bC2d8f@ae (car bC2d90@vars*) (car bC2d91@exp*)) (bC2d9c@expand-case-lambda bC2d8f@ae bC2d90@vars* bC2d91@exp*))))) (set! bC2e17@bC2d4a@build-case-lambda bC2d4a@build-case-lambda) (set! bC2d78@build-sequence (lambda (bC2dcf@ae bC2dd0@exps) (let bC2dd5@loop ((bC2dd3@exps bC2dd0@exps)) (if (null? (cdr bC2dd3@exps)) (car bC2dd3@exps) (if (equal? (car bC2dd3@exps) (bC2d7a@build-void)) (bC2dd5@loop (cdr bC2dd3@exps)) (cons 'begin bC2dd3@exps)))))) (set! bC2e18@bC2d78@build-sequence bC2d78@build-sequence) (set! bC2d7a@build-void (lambda () '((primitive void)))) (set! bC2e19@bC2d7a@build-void bC2d7a@build-void) (set! bC2d7c@build-letrec (lambda (bC2dd7@ae bC2dd8@vars bC2dd9@val-exps bC2dda@body-exp) (if (null? bC2dd8@vars) bC2dda@body-exp (list 'letrec (map list bC2dd8@vars bC2dd9@val-exps) bC2dda@body-exp)))) (set! bC2e1a@bC2d7c@build-letrec bC2d7c@build-letrec) (set! bC2d7e@build-let (lambda (bC2ddf@ae bC2de0@vars bC2de1@val-exps bC2de2@body-exp) (if (null? bC2de0@vars) bC2de2@body-exp (list 'let (map list bC2de0@vars bC2de1@val-exps) bC2de2@body-exp)))) (set! bC2e1b@bC2d7e@build-let bC2d7e@build-let) (set! bC2d80@build-named-let (lambda (bC2de7@ae bC2de8@name bC2de9@vars bC2dea@val-exps bC2deb@body-exp) (list 'let bC2de8@name (map list bC2de9@vars bC2dea@val-exps) bC2deb@body-exp))) (set! bC2e1c@bC2d80@build-named-let bC2d80@build-named-let) (set! bC2d82@build-letrec* (lambda (bC2df1@ae bC2df2@vars bC2df3@val-exps bC2df4@body-exp) (if (null? bC2df2@vars) bC2df4@body-exp (list 'letrec* (map list bC2df2@vars bC2df3@val-exps) bC2df4@body-exp)))) (set! bC2e1d@bC2d82@build-letrec* bC2d82@build-letrec*) (set! bC2d84@build-library-letrec* (lambda (bC2df9@ae bC2dfa@name bC2dfb@vars bC2dfc@locs bC2dfd@val-exps bC2dfe@body-exp) (cons 'begin (append (map (lambda (bC2e05@var) (cons 'set! (cons bC2e05@var '((unspecified))))) bC2dfb@vars) (append (apply append (map (lambda (bC2e07@var bC2e08@loc bC2e09@val-exp) (list (list 'set! bC2e07@var bC2e09@val-exp) (list 'set! bC2e08@loc bC2e07@var))) bC2dfb@vars bC2dfc@locs bC2dfd@val-exps)) (list bC2dfe@body-exp)))))) (set! bC2e1e@bC2d84@build-library-letrec* bC2d84@build-library-letrec*) (set! bC2d86@build-receive (lambda (bC2e0d@ae bC2e0e@vars bC2e0f@producer bC2e10@body*) (begin (display '"************** in ") (cons 'receive (cons bC2e0e@vars (cons bC2e0f@producer bC2e10@body*)))))) (set! bC2e1f@bC2d86@build-receive bC2d86@build-receive) (void))
(begin (set! bC2e2e@file-options-macro (unspecified)) (set! bC2e30@set-cons (unspecified)) (set! bC2e32@set-union (unspecified)) (set! bC2e37@top-mark* (unspecified)) (set! bC2e39@top-marked? (unspecified)) (set! bC2e3b@gen-lexical (unspecified)) (set! bC2e3d@gen-global (unspecified)) (set! bC2e3f@gen-label (unspecified)) (set! bC2e41@gen-top-level-label (unspecified)) (set! bC2e43@gen-define-label+loc (unspecified)) (set! bC2e45@gen-define-label (unspecified)) (set! bC2e4f@rib? (unspecified)) (set! bC2e51@rib-sym* (unspecified)) (set! bC2e53@set-rib-sym*! (unspecified)) (set! bC2e55@rib-mark** (unspecified)) (set! bC2e57@set-rib-mark**! (unspecified)) (set! bC2e59@rib-label* (unspecified)) (set! bC2e5b@set-rib-label*! (unspecified)) (set! bC2e5d@rib-sealed/freq (unspecified)) (set! bC2e5f@set-rib-sealed/freq! (unspecified)) (set! bC2e61@rib-cache (unspecified)) (set! bC2e63@set-rib-cache! (unspecified)) (set! bC2e65@dummy (unspecified)) (set! bC2e67@make-empty-rib (unspecified)) (set! bC2e69@extend-rib! (unspecified)) (set! bC2e6b@extend-rib/nc! (unspecified)) (set! bC2e6d@make-rib-map (unspecified)) (set! bC2e6f@seal-rib! (unspecified)) (set! bC2e71@unseal-rib! (unspecified)) (set! bC2e73@make-full-rib (unspecified)) (set! bC2e75@rp (unspecified)) (set! bC2e7f@stx? (unspecified)) (set! bC2e81@stx-expr (unspecified)) (set! bC2e83@set-stx-expr! (unspecified)) (set! bC2e85@stx-mark* (unspecified)) (set! bC2e87@set-stx-mark*! (unspecified)) (set! bC2e89@stx-subst* (unspecified)) (set! bC2e8b@set-stx-subst*! (unspecified)) (set! bC2e8d@stx-ae* (unspecified)) (set! bC2e8f@set-stx-ae*! (unspecified)) (set! bC2e91@dummy (unspecified)) (set! bC2e93@datum->stx (unspecified)) (set! bC2e95@gen-mark (unspecified)) (set! bC2e97@anti-mark (unspecified)) (set! bC2e99@anti-mark? (unspecified)) (set! bC2e9b@mkstx (unspecified)) (set! bC2e9d@add-mark (unspecified)) (set! bC2e9f@add-subst (unspecified)) (set! bC2ea1@syntax-kind? (unspecified)) (set! bC2ea3@syntax-vector->list (unspecified)) (set! bC2ea5@syntax-pair? (unspecified)) (set! bC2ea7@syntax-vector? (unspecified)) (set! bC2ea9@syntax-null? (unspecified)) (set! bC2eab@syntax-list? (unspecified)) (set! bC2ead@syntax-car (unspecified)) (set! bC2eaf@syntax-cdr (unspecified)) (set! bC2eb1@syntax->list (unspecified)) (set! bC2eb3@id? (unspecified)) (set! bC2eb5@id->sym (unspecified)) (set! bC2eb7@bound-id=? (unspecified)) (set! bC2eb9@free-id=? (unspecified)) (set! bC2ebb@valid-bound-ids? (unspecified)) (set! bC2ebd@distinct-bound-ids? (unspecified)) (set! bC2ebf@bound-id-member? (unspecified)) (set! bC2ec1@self-evaluating? (unspecified)) (set! bC2ec3@strip-annotations (unspecified)) (set! bC2ec5@strip (unspecified)) (set! bC2ec7@stx->datum (unspecified)) (set! bC2ec9@id->label (unspecified)) (set! bC2ecb@label->binding (unspecified)) (set! bC2ecd@make-binding (unspecified)) (set! bC2ecf@binding-type (unspecified)) (set! bC2ed1@binding-value (unspecified)) (set! bC2ed3@raise-unbound-error (unspecified)) (set! bC2ed5@syntax-type (unspecified)) (set! bC2ee3@sanitize-binding (unspecified)) (set! bC2ee5@make-variable-transformer (unspecified)) (set! bC2ee7@variable-transformer? (unspecified)) (set! bC2ee9@variable-transformer-procedure (unspecified)) (set! bC2eeb@make-eval-transformer (unspecified)) (set! bC303c@parse-define (unspecified)) (set! bC303e@parse-define-syntax (unspecified)) (set! bC3040@scheme-stx-hashtable (unspecified)) (set! bC3042@scheme-stx (unspecified)) (set! bC3044@lexical-var (unspecified)) (set! bC3046@lexical-mutable? (unspecified)) (set! bC3048@set-lexical-mutable! (unspecified)) (set! bC304a@add-lexical (unspecified)) (set! bC304c@add-lexicals (unspecified)) (set! bC304e@letrec-helper (unspecified)) (set! bC3050@let-transformer (unspecified)) (set! bC3052@letrec-transformer (unspecified)) (set! bC3054@letrec*-transformer (unspecified)) (set! bC3056@fluid-let-syntax-transformer (unspecified)) (set! bC3058@type-descriptor-transformer (unspecified)) (set! bC305a@record-type-descriptor-transformer (unspecified)) (set! bC305c@record-constructor-descriptor-transformer (unspecified)) (set! bC305e@when-macro (unspecified)) (set! bC3060@unless-macro (unspecified)) (set! bC3062@if-transformer (unspecified)) (set! bC3064@and-transformer (unspecified)) (set! bC3066@or-transformer (unspecified)) (set! bC3068@case-macro (unspecified)) (set! bC306a@quote-transformer (unspecified)) (set! bC306c@case-lambda-transformer (unspecified)) (set! bC306e@lambda-transformer (unspecified)) (set! bC3070@bless (unspecified)) (set! bC3072@with-syntax-macro (unspecified)) (set! bC3074@invalid-fmls-error (unspecified)) (set! bC3076@let-macro (unspecified)) (set! bC3078@let-values-macro (unspecified)) (set! bC307a@let*-values-macro (unspecified)) (set! bC307c@trace-lambda-macro (unspecified)) (set! bC307e@trace-define-macro (unspecified)) (set! bC3080@trace-define-syntax-macro (unspecified)) (set! bC3082@trace-let/rec-syntax (unspecified)) (set! bC3084@trace-let-syntax-macro (unspecified)) (set! bC3086@trace-letrec-syntax-macro (unspecified)) (set! bC3088@guard-macro (unspecified)) (set! bC308a@define-enumeration-macro (unspecified)) (set! bC308c@time-macro (unspecified)) (set! bC308e@delay-macro (unspecified)) (set! bC3090@assert-macro (unspecified)) (set! bC3092@endianness-macro (unspecified)) (set! bC3094@identifier-syntax-macro (unspecified)) (set! bC3096@do-macro (unspecified)) (set! bC3098@let*-macro (unspecified)) (set! bC309a@or-macro (unspecified)) (set! bC309c@and-macro (unspecified)) (set! bC309e@cond-macro (unspecified)) (set! bC30a0@do-include (unspecified)) (set! bC30a2@include-macro (unspecified)) (set! bC30a4@include-into-macro (unspecified)) (set! bC30a6@syntax-rules-macro (unspecified)) (set! bC30a8@quasiquote-macro (unspecified)) (set! bC30aa@quasisyntax-macro (unspecified)) (set! bC30ac@define-struct-macro (unspecified)) (set! bC30ae@define-record-type-macro (unspecified)) (set! bC30b0@define-condition-type-macro (unspecified)) (set! bC30b2@incorrect-usage-macro (unspecified)) (set! bC30b4@parameterize-macro (unspecified)) (set! bC30b6@foreign-call-transformer (unspecified)) (set! bC30b8@convert-pattern (unspecified)) (set! bC30ba@syntax-dispatch (unspecified)) (set! bC30bc@ellipsis? (unspecified)) (set! bC30be@underscore? (unspecified)) (set! bC30c0@verify-literals (unspecified)) (set! bC30c2@syntax-case-transformer (unspecified)) (set! bC30c4@ellipsis-map (unspecified)) (set! bC30c6@syntax-transformer (unspecified)) (set! bC30c8@core-macro-transformer (unspecified)) (set! bC30ca@symbol-macro (unspecified)) (set! bC30cc@macro-transformer (unspecified)) (set! bC30ce@local-macro-transformer (unspecified)) (set! bC30d0@do-macro-call (unspecified)) (set! bC30d2@chi-macro (unspecified)) (set! bC30d4@chi-local-macro (unspecified)) (set! bC30d6@chi-global-macro (unspecified)) (set! bC30d8@chi-expr* (unspecified)) (set! bC30da@chi-application (unspecified)) (set! bC30dc@chi-expr (unspecified)) (set! bC30de@chi-set! (unspecified)) (set! bC30e0@verify-formals (unspecified)) (set! bC30e2@chi-lambda-clause (unspecified)) (set! bC30e4@chi-lambda-clause* (unspecified)) (set! bC30e6@chi-defun (unspecified)) (set! bC30e8@chi-rhs (unspecified)) (set! bC30ea@expand-interaction-rhs*/init* (unspecified)) (set! bC30ec@chi-rhs* (unspecified)) (set! bC30ee@find-bound=? (unspecified)) (set! bC30f0@find-dups (unspecified)) (set! bC30f2@chi-internal (unspecified)) (set! bC30f4@parse-module (unspecified)) (set! bC30fe@module-interface? (unspecified)) (set! bC3100@module-interface-first-mark (unspecified)) (set! bC3102@set-module-interface-first-mark! (unspecified)) (set! bC3104@module-interface-exp-id-vec (unspecified)) (set! bC3106@set-module-interface-exp-id-vec! (unspecified)) (set! bC3108@module-interface-exp-lab-vec (unspecified)) (set! bC310a@set-module-interface-exp-lab-vec! (unspecified)) (set! bC310c@dummy (unspecified)) (set! bC310e@module-interface-exp-id* (unspecified)) (set! bC3110@chi-internal-module (unspecified)) (set! bC3112@chi-body* (unspecified)) (set! bC3114@expand-transformer (unspecified)) (set! bC3116@parse-exports (unspecified)) (set! bC3118@parse-library-name (unspecified)) (set! bC311a@parse-library (unspecified)) (set! bC311c@parse-import-spec* (unspecified)) (set! bC311e@make-top-rib (unspecified)) (set! bC3120@make-collector (unspecified)) (set! bC3122@inv-collector (unspecified)) (set! bC3124@vis-collector (unspecified)) (set! bC3126@imp-collector (unspecified)) (set! bC3128@chi-library-internal (unspecified)) (set! bC312a@chi-interaction-expr (unspecified)) (set! bC312c@library-body-expander (unspecified)) (set! bC312e@core-library-expander (unspecified)) (set! bC3130@parse-top-level-program (unspecified)) (set! bC3132@top-level-expander (unspecified)) (set! bC3134@rp (unspecified)) (set! bC313e@env? (unspecified)) (set! bC3140@env-names (unspecified)) (set! bC3142@set-env-names! (unspecified)) (set! bC3144@env-labels (unspecified)) (set! bC3146@set-env-labels! (unspecified)) (set! bC3148@env-itc (unspecified)) (set! bC314a@set-env-itc! (unspecified)) (set! bC314c@dummy (unspecified)) (set! bC314e@rp (unspecified)) (set! bC3158@interaction-env? (unspecified)) (set! bC315a@interaction-env-rib (unspecified)) (set! bC315c@set-interaction-env-rib! (unspecified)) (set! bC315e@interaction-env-r (unspecified)) (set! bC3160@set-interaction-env-r! (unspecified)) (set! bC3162@interaction-env-locs (unspecified)) (set! bC3164@set-interaction-env-locs! (unspecified)) (set! bC3166@dummy (unspecified)) (set! bC3168@interaction-environment-symbols (unspecified)) (set! bC316a@environment-bindings (unspecified)) (set! bC316c@parse-binding (unspecified)) (set! bC316e@environment? (unspecified)) (set! bC3170@environment-symbols (unspecified)) (set! bC3172@environment (unspecified)) (set! bC3174@null-environment (unspecified)) (set! bC3176@scheme-report-environment (unspecified)) (set! bC3178@expand (unspecified)) (set! bC317a@eval (unspecified)) (set! bC317c@library-expander (unspecified)) (set! bC317e@boot-library-expand (unspecified)) (set! bC3180@rev-map-append (unspecified)) (set! bC3182@build-exports (unspecified)) (set! bC3184@make-export-subst (unspecified)) (set! bC3186@make-export-env/macros (unspecified)) (set! bC3188@generate-temporaries (unspecified)) (set! bC318a@free-identifier=? (unspecified)) (set! bC318c@bound-identifier=? (unspecified)) (set! bC318e@make-source-condition (unspecified)) (set! bC3190@extract-position-condition (unspecified)) (set! bC3192@expression-position (unspecified)) (set! bC3194@assertion-error (unspecified)) (set! bC3196@syntax-error (unspecified)) (set! bC3198@syntax-violation* (unspecified)) (set! bC319a@syntax-violation (unspecified)) (set! bC319c@identifier? (unspecified)) (set! bC319e@datum->syntax (unspecified)) (set! bC31a0@syntax->datum (unspecified)) (set! bC31a2@ungensym-all (unspecified)) (set! bC31a4@compile-r6rs-top-level (unspecified)) (set! bC31a6@pre-compile-r6rs-top-level (unspecified)) (set! bC31a8@interaction-environment (unspecified)) (set! bC31aa@top-level-context (unspecified)) (set! bC2e2e@file-options-macro (lambda (bC31ab@x) (letrec* ((bC31ae@valid-option? (lambda (bC31b7@x) (and (bC2eb3@id? bC31b7@x) (memq (bC2eb5@id->sym bC31b7@x) '(no-fail no-create no-truncate)))))) (let ((bC31af@t bC31ab@x)) (let ((bC31b1@ls/false (bC30ba@syntax-dispatch bC31af@t '(_ . each-any)))) (if (and bC31b1@ls/false (apply (lambda (bC31b3@opt*) (for-all bC31ae@valid-option? bC31b3@opt*)) bC31b1@ls/false)) (apply (lambda (bC31b5@opt*) (bC3070@bless (list 'make-file-options (list 'quote bC31b5@opt*)))) bC31b1@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC31af@t))))))) (set! bC4b01@bC2e2e@file-options-macro bC2e2e@file-options-macro) (set! bC2e30@set-cons (lambda (bC31b9@x bC31ba@ls) (if (memq bC31b9@x bC31ba@ls) bC31ba@ls (cons bC31b9@x bC31ba@ls)))) (set! bC4b02@bC2e30@set-cons bC2e30@set-cons) (set! bC2e32@set-union (lambda (bC31bd@ls1 bC31be@ls2) (if (null? bC31bd@ls1) bC31be@ls2 (if (memq (car bC31bd@ls1) bC31be@ls2) (bC2e32@set-union (cdr bC31bd@ls1) bC31be@ls2) (cons (car bC31bd@ls1) (bC2e32@set-union (cdr bC31bd@ls1) bC31be@ls2)))))) (set! bC4b03@bC2e32@set-union bC2e32@set-union) (set! bC2e37@top-mark* '(top)) (set! bC4b04@bC2e37@top-mark* bC2e37@top-mark*) (set! bC2e39@top-marked? (lambda (bC31c1@m*) (memq 'top bC31c1@m*))) (set! bC4b05@bC2e39@top-marked? bC2e39@top-marked?) (set! bC2e3b@gen-lexical (lambda (bC31c3@sym) (if (symbol? bC31c3@sym) (gensym bC31c3@sym) (if (bC2e7f@stx? bC31c3@sym) (bC2e3b@gen-lexical (bC2eb5@id->sym bC31c3@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" bC31c3@sym))))) (set! bC4b06@bC2e3b@gen-lexical bC2e3b@gen-lexical) (set! bC2e3d@gen-global (lambda (bC31c5@x) (bC2e3b@gen-lexical bC31c5@x))) (set! bC4b07@bC2e3d@gen-global bC2e3d@gen-global) (set! bC2e3f@gen-label (lambda (bC31c7@_) (gensym))) (set! bC4b08@bC2e3f@gen-label bC2e3f@gen-label) (set! bC2e41@gen-top-level-label (lambda (bC31c9@id bC31ca@rib) (letrec* ((bC31ce@find (lambda (bC31d9@sym bC31da@mark* bC31db@sym* bC31dc@mark** bC31dd@label*) (and (pair? bC31db@sym*) (if (and (eq? bC31d9@sym (car bC31db@sym*)) (same-marks? bC31da@mark* (car bC31dc@mark**))) (car bC31dd@label*) (bC31ce@find bC31d9@sym bC31da@mark* (cdr bC31db@sym*) (cdr bC31dc@mark**) (cdr bC31dd@label*))))))) (let ((bC31cf@sym (bC2eb5@id->sym bC31c9@id)) (bC31d0@mark* (bC2e85@stx-mark* bC31c9@id))) (let ((bC31d3@sym* (bC2e51@rib-sym* bC31ca@rib))) (let ((bC31d5@t (and (memq bC31cf@sym (bC2e51@rib-sym* bC31ca@rib)) (bC31ce@find bC31cf@sym bC31d0@mark* bC31d3@sym* (bC2e55@rib-mark** bC31ca@rib) (bC2e59@rib-label* bC31ca@rib))))) (if bC31d5@t ((lambda (bC31d7@label) (if (bC2cce@bC2b1b@imported-label->binding bC31d7@label) (gensym) bC31d7@label)) bC31d5@t) (gensym)))))))) (set! bC4b09@bC2e41@gen-top-level-label bC2e41@gen-top-level-label) (set! bC2e43@gen-define-label+loc (lambda (bC31e3@id bC31e4@rib) (let ((bC31e7@t (bC31aa@top-level-context))) (if bC31e7@t ((lambda (bC31e9@env) (let ((bC31eb@label (bC2e41@gen-top-level-label bC31e3@id bC31e4@rib)) (bC31ec@locs (bC3162@interaction-env-locs bC31e9@env))) (values bC31eb@label (let ((bC31ef@t (assq bC31eb@label bC31ec@locs))) (if bC31ef@t (cdr bC31ef@t) (let ((bC31f1@loc (bC2e3b@gen-lexical bC31e3@id))) (begin (bC3164@set-interaction-env-locs! bC31e9@env (cons (cons bC31eb@label bC31f1@loc) bC31ec@locs)) bC31f1@loc))))))) bC31e7@t) (values (gensym) (bC2e3b@gen-lexical bC31e3@id)))))) (set! bC4b0a@bC2e43@gen-define-label+loc bC2e43@gen-define-label+loc) (set! bC2e45@gen-define-label (lambda (bC31f3@id bC31f4@rib) (if (bC31aa@top-level-context) (bC2e41@gen-top-level-label bC31f3@id bC31f4@rib) (gensym)))) (set! bC4b0b@bC2e45@gen-define-label bC2e45@gen-define-label) (set! bC2e4f@rib? (lambda (bC31f7@x) (and (simple-struct? bC31f7@x) (eq? (simple-struct-name bC31f7@x) 'rib)))) (set! bC4b0c@bC2e4f@rib? bC2e4f@rib?) (set! bC2e51@rib-sym* (lambda (bC31f9@x) (simple-struct-ref bC31f9@x '0))) (set! bC4b0d@bC2e51@rib-sym* bC2e51@rib-sym*) (set! bC2e53@set-rib-sym*! (lambda (bC31fb@x bC31fc@val) (simple-struct-set! bC31fb@x '0 bC31fc@val))) (set! bC4b0e@bC2e53@set-rib-sym*! bC2e53@set-rib-sym*!) (set! bC2e55@rib-mark** (lambda (bC31ff@x) (simple-struct-ref bC31ff@x '1))) (set! bC4b0f@bC2e55@rib-mark** bC2e55@rib-mark**) (set! bC2e57@set-rib-mark**! (lambda (bC3201@x bC3202@val) (simple-struct-set! bC3201@x '1 bC3202@val))) (set! bC4b10@bC2e57@set-rib-mark**! bC2e57@set-rib-mark**!) (set! bC2e59@rib-label* (lambda (bC3205@x) (simple-struct-ref bC3205@x '2))) (set! bC4b11@bC2e59@rib-label* bC2e59@rib-label*) (set! bC2e5b@set-rib-label*! (lambda (bC3207@x bC3208@val) (simple-struct-set! bC3207@x '2 bC3208@val))) (set! bC4b12@bC2e5b@set-rib-label*! bC2e5b@set-rib-label*!) (set! bC2e5d@rib-sealed/freq (lambda (bC320b@x) (simple-struct-ref bC320b@x '3))) (set! bC4b13@bC2e5d@rib-sealed/freq bC2e5d@rib-sealed/freq) (set! bC2e5f@set-rib-sealed/freq! (lambda (bC320d@x bC320e@val) (simple-struct-set! bC320d@x '3 bC320e@val))) (set! bC4b14@bC2e5f@set-rib-sealed/freq! bC2e5f@set-rib-sealed/freq!) (set! bC2e61@rib-cache (lambda (bC3211@x) (simple-struct-ref bC3211@x '4))) (set! bC4b15@bC2e61@rib-cache bC2e61@rib-cache) (set! bC2e63@set-rib-cache! (lambda (bC3213@x bC3214@val) (simple-struct-set! bC3213@x '4 bC3214@val))) (set! bC4b16@bC2e63@set-rib-cache! bC2e63@set-rib-cache!) (set! bC2e65@dummy '3) (set! bC4b17@bC2e65@dummy bC2e65@dummy) (set! bC2e67@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! bC4b18@bC2e67@make-empty-rib bC2e67@make-empty-rib) (set! bC2e69@extend-rib! (lambda (bC3217@rib bC3218@id bC3219@label) (letrec* ((bC321e@find (lambda (bC322b@sym bC322c@mark* bC322d@sym* bC322e@mark** bC322f@label*) (and (pair? bC322d@sym*) (if (and (eq? bC322b@sym (car bC322d@sym*)) (same-marks? bC322c@mark* (car bC322e@mark**))) bC322f@label* (bC321e@find bC322b@sym bC322c@mark* (cdr bC322d@sym*) (cdr bC322e@mark**) (cdr bC322f@label*))))))) (begin (if (bC2e5d@rib-sealed/freq bC3217@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" bC3217@rib) (void)) (let ((bC321f@sym (bC2eb5@id->sym bC3218@id)) (bC3220@mark* (bC2e85@stx-mark* bC3218@id))) (let ((bC3223@sym* (bC2e51@rib-sym* bC3217@rib))) (let ((bC3225@t (and (memq bC321f@sym (bC2e51@rib-sym* bC3217@rib)) (bC321e@find bC321f@sym bC3220@mark* bC3223@sym* (bC2e55@rib-mark** bC3217@rib) (bC2e59@rib-label* bC3217@rib))))) (if bC3225@t ((lambda (bC3227@p) (if (not (eq? bC3219@label (car bC3227@p))) (if (bC31aa@top-level-context) (set-car! bC3227@p bC3219@label) (bC319a@syntax-violation '#f '"multiple definitions of identifier" bC3218@id)) (void))) bC3225@t) (begin (if (bC2e61@rib-cache bC3217@rib) (hashtable-update! (bC2e61@rib-cache bC3217@rib) bC321f@sym (lambda (bC3229@e) (cons (cons bC3220@mark* bC3219@label) bC3229@e)) '()) (void)) (bC2e53@set-rib-sym*! bC3217@rib (cons bC321f@sym bC3223@sym*)) (bC2e57@set-rib-mark**! bC3217@rib (cons bC3220@mark* (bC2e55@rib-mark** bC3217@rib))) (bC2e5b@set-rib-label*! bC3217@rib (cons bC3219@label (bC2e59@rib-label* bC3217@rib)))))))))))) (set! bC4b19@bC2e69@extend-rib! bC2e69@extend-rib!) (set! bC2e6b@extend-rib/nc! (lambda (bC3235@rib bC3236@id bC3237@label) (let ((bC323b@sym (bC2eb5@id->sym bC3236@id)) (bC323c@mark* (bC2e85@stx-mark* bC3236@id))) (let ((bC323f@sym* (bC2e51@rib-sym* bC3235@rib))) (begin (if (bC2e61@rib-cache bC3235@rib) (hashtable-update! (bC2e61@rib-cache bC3235@rib) bC323b@sym (lambda (bC3241@e) (cons (cons bC323c@mark* bC3237@label) bC3241@e)) '()) (void)) (bC2e53@set-rib-sym*! bC3235@rib (cons bC323b@sym bC323f@sym*)) (bC2e57@set-rib-mark**! bC3235@rib (cons bC323c@mark* (bC2e55@rib-mark** bC3235@rib))) (bC2e5b@set-rib-label*! bC3235@rib (cons bC3237@label (bC2e59@rib-label* bC3235@rib)))))))) (set! bC4b1a@bC2e6b@extend-rib/nc! bC2e6b@extend-rib/nc!) (set! bC2e6d@make-rib-map (lambda (bC3243@sym*) (let ((bC3245@ht (make-eq-hashtable))) (let bC324b@f ((bC3247@i '0) (bC3248@sym* bC3243@sym*)) (if (null? bC3248@sym*) bC3245@ht (begin (hashtable-update! bC3245@ht (car bC3248@sym*) (lambda (bC324d@x) (cons bC3247@i bC324d@x)) '()) (bC324b@f (+ bC3247@i '1) (cdr bC3248@sym*)))))))) (set! bC4b1b@bC2e6d@make-rib-map bC2e6d@make-rib-map) (set! bC2e6f@seal-rib! (lambda (bC324f@rib) (let ((bC3251@sym* (bC2e51@rib-sym* bC324f@rib))) (if (not (null? bC3251@sym*)) (begin (bC2e53@set-rib-sym*! bC324f@rib (list->vector bC3251@sym*)) (bC2e57@set-rib-mark**! bC324f@rib (list->vector (bC2e55@rib-mark** bC324f@rib))) (bC2e5b@set-rib-label*! bC324f@rib (list->vector (bC2e59@rib-label* bC324f@rib))) (bC2e5f@set-rib-sealed/freq! bC324f@rib (bC2e6d@make-rib-map bC3251@sym*))) (void))))) (set! bC4b1c@bC2e6f@seal-rib! bC2e6f@seal-rib!) (set! bC2e71@unseal-rib! (lambda (bC3253@rib) (if (bC2e5d@rib-sealed/freq bC3253@rib) (begin (bC2e5f@set-rib-sealed/freq! bC3253@rib '#f) (bC2e53@set-rib-sym*! bC3253@rib (vector->list (bC2e51@rib-sym* bC3253@rib))) (bC2e57@set-rib-mark**! bC3253@rib (vector->list (bC2e55@rib-mark** bC3253@rib))) (bC2e5b@set-rib-label*! bC3253@rib (vector->list (bC2e59@rib-label* bC3253@rib)))) (void)))) (set! bC4b1d@bC2e71@unseal-rib! bC2e71@unseal-rib!) (set! bC2e73@make-full-rib (lambda (bC3255@id* bC3256@label*) (let ((bC3259@r (make-simple-struct 'rib '6 (list (map bC2eb5@id->sym bC3255@id*) (map bC2e85@stx-mark* bC3255@id*) bC3256@label* '#f '#f)))) (begin (bC2e6f@seal-rib! bC3259@r) bC3259@r)))) (set! bC4b1e@bC2e73@make-full-rib bC2e73@make-full-rib) (set! bC2e75@rp (bC2a00@bC28db@make-record-printer 'stx (lambda (bC325b@x bC325c@p bC325d@wr) (begin (display '"#<syntax " bC325c@p) (write (bC2ec7@stx->datum bC325b@x) bC325c@p) (let ((bC3261@expr (bC2e81@stx-expr bC325b@x))) (if (bC29f7@bC28c9@annotation? bC3261@expr) (let ((bC3263@src (bC29f8@bC28cb@annotation-source bC3261@expr))) (if (pair? bC3263@src) (begin (display '" [" bC325c@p) (display (cdr bC3263@src) bC325c@p) (display '" of " bC325c@p) (display (car bC3263@src) bC325c@p) (display '"]" bC325c@p)) (void))) (void))) (display '">" bC325c@p))))) (set! bC4b1f@bC2e75@rp bC2e75@rp) (set! bC2e7f@stx? (lambda (bC3265@x) (and (simple-struct? bC3265@x) (eq? (simple-struct-name bC3265@x) 'stx)))) (set! bC4b20@bC2e7f@stx? bC2e7f@stx?) (set! bC2e81@stx-expr (lambda (bC3267@x) (simple-struct-ref bC3267@x '0))) (set! bC4b21@bC2e81@stx-expr bC2e81@stx-expr) (set! bC2e83@set-stx-expr! (lambda (bC3269@x bC326a@val) (simple-struct-set! bC3269@x '0 bC326a@val))) (set! bC4b22@bC2e83@set-stx-expr! bC2e83@set-stx-expr!) (set! bC2e85@stx-mark* (lambda (bC326d@x) (simple-struct-ref bC326d@x '1))) (set! bC4b23@bC2e85@stx-mark* bC2e85@stx-mark*) (set! bC2e87@set-stx-mark*! (lambda (bC326f@x bC3270@val) (simple-struct-set! bC326f@x '1 bC3270@val))) (set! bC4b24@bC2e87@set-stx-mark*! bC2e87@set-stx-mark*!) (set! bC2e89@stx-subst* (lambda (bC3273@x) (simple-struct-ref bC3273@x '2))) (set! bC4b25@bC2e89@stx-subst* bC2e89@stx-subst*) (set! bC2e8b@set-stx-subst*! (lambda (bC3275@x bC3276@val) (simple-struct-set! bC3275@x '2 bC3276@val))) (set! bC4b26@bC2e8b@set-stx-subst*! bC2e8b@set-stx-subst*!) (set! bC2e8d@stx-ae* (lambda (bC3279@x) (simple-struct-ref bC3279@x '3))) (set! bC4b27@bC2e8d@stx-ae* bC2e8d@stx-ae*) (set! bC2e8f@set-stx-ae*! (lambda (bC327b@x bC327c@val) (simple-struct-set! bC327b@x '3 bC327c@val))) (set! bC4b28@bC2e8f@set-stx-ae*! bC2e8f@set-stx-ae*!) (set! bC2e91@dummy '3) (set! bC4b29@bC2e91@dummy bC2e91@dummy) (set! bC2e93@datum->stx (lambda (bC327f@id bC3280@datum) (make-simple-struct 'stx '5 (list bC3280@datum (bC2e85@stx-mark* bC327f@id) (bC2e89@stx-subst* bC327f@id) (bC2e8d@stx-ae* bC327f@id))))) (set! bC4b2a@bC2e93@datum->stx bC2e93@datum->stx) (set! bC2e95@gen-mark (lambda () (string '#\m))) (set! bC4b2b@bC2e95@gen-mark bC2e95@gen-mark) (set! bC2e97@anti-mark '#f) (set! bC4b2c@bC2e97@anti-mark bC2e97@anti-mark) (set! bC2e99@anti-mark? not) (set! bC4b2d@bC2e99@anti-mark? bC2e99@anti-mark?) (set! bC2e9b@mkstx (lambda (bC3283@e bC3284@m* bC3285@s* bC3286@ae*) (if (and (bC2e7f@stx? bC3283@e) (not (bC2e39@top-marked? bC3284@m*))) (call-with-values (lambda () (join-wraps bC3284@m* bC3285@s* bC3286@ae* bC3283@e)) (lambda (bC3291@bC328c bC3292@bC328e bC3293@bC3290) (let ((bC3297@ae* bC3293@bC3290) (bC3298@s* bC3292@bC328e) (bC3299@m* bC3291@bC328c)) (make-simple-struct 'stx '5 (list (bC2e81@stx-expr bC3283@e) bC3299@m* bC3298@s* bC3297@ae*))))) (make-simple-struct 'stx '5 (list bC3283@e bC3284@m* bC3285@s* bC3286@ae*))))) (set! bC4b2e@bC2e9b@mkstx bC2e9b@mkstx) (set! bC2e9d@add-mark (lambda (bC329d@m bC329e@e bC329f@ae) (bC2e9b@mkstx bC329e@e (list bC329d@m) '(shift) (list bC329f@ae)))) (set! bC4b2f@bC2e9d@add-mark bC2e9d@add-mark) (set! bC2e9f@add-subst (lambda (bC32a3@subst bC32a4@e) (bC2e9b@mkstx bC32a4@e '() (list bC32a3@subst) '()))) (set! bC4b30@bC2e9f@add-subst bC2e9f@add-subst) (set! bC2ea1@syntax-kind? (lambda (bC32a7@x bC32a8@p?) (if (bC2e7f@stx? bC32a7@x) (bC2ea1@syntax-kind? (bC2e81@stx-expr bC32a7@x) bC32a8@p?) (if (bC29f7@bC28c9@annotation? bC32a7@x) (bC2ea1@syntax-kind? (bC29f9@bC28cd@annotation-expression bC32a7@x) bC32a8@p?) (bC32a8@p? bC32a7@x))))) (set! bC4b31@bC2ea1@syntax-kind? bC2ea1@syntax-kind?) (set! bC2ea3@syntax-vector->list (lambda (bC32ab@x) (if (bC2e7f@stx? bC32ab@x) (let ((bC32ad@ls (bC2ea3@syntax-vector->list (bC2e81@stx-expr bC32ab@x))) (bC32ae@m* (bC2e85@stx-mark* bC32ab@x)) (bC32af@s* (bC2e89@stx-subst* bC32ab@x)) (bC32b0@ae* (bC2e8d@stx-ae* bC32ab@x))) (map (lambda (bC32b5@x) (bC2e9b@mkstx bC32b5@x bC32ae@m* bC32af@s* bC32b0@ae*)) bC32ad@ls)) (if (bC29f7@bC28c9@annotation? bC32ab@x) (bC2ea3@syntax-vector->list (bC29f9@bC28cd@annotation-expression bC32ab@x)) (if (vector? bC32ab@x) (vector->list bC32ab@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" bC32ab@x)))))) (set! bC4b32@bC2ea3@syntax-vector->list bC2ea3@syntax-vector->list) (set! bC2ea5@syntax-pair? (lambda (bC32b7@x) (bC2ea1@syntax-kind? bC32b7@x pair?))) (set! bC4b33@bC2ea5@syntax-pair? bC2ea5@syntax-pair?) (set! bC2ea7@syntax-vector? (lambda (bC32b9@x) (bC2ea1@syntax-kind? bC32b9@x vector?))) (set! bC4b34@bC2ea7@syntax-vector? bC2ea7@syntax-vector?) (set! bC2ea9@syntax-null? (lambda (bC32bb@x) (bC2ea1@syntax-kind? bC32bb@x null?))) (set! bC4b35@bC2ea9@syntax-null? bC2ea9@syntax-null?) (set! bC2eab@syntax-list? (lambda (bC32bd@x) (or (bC2ea9@syntax-null? bC32bd@x) (and (bC2ea5@syntax-pair? bC32bd@x) (bC2eab@syntax-list? (bC2eaf@syntax-cdr bC32bd@x)))))) (set! bC4b36@bC2eab@syntax-list? bC2eab@syntax-list?) (set! bC2ead@syntax-car (lambda (bC32bf@x) (if (bC2e7f@stx? bC32bf@x) (bC2e9b@mkstx (bC2ead@syntax-car (bC2e81@stx-expr bC32bf@x)) (bC2e85@stx-mark* bC32bf@x) (bC2e89@stx-subst* bC32bf@x) (bC2e8d@stx-ae* bC32bf@x)) (if (bC29f7@bC28c9@annotation? bC32bf@x) (bC2ead@syntax-car (bC29f9@bC28cd@annotation-expression bC32bf@x)) (if (pair? bC32bf@x) (car bC32bf@x) (assertion-violation 'syntax-car '"BUG: not a pair" bC32bf@x)))))) (set! bC4b37@bC2ead@syntax-car bC2ead@syntax-car) (set! bC2eaf@syntax-cdr (lambda (bC32c1@x) (if (bC2e7f@stx? bC32c1@x) (bC2e9b@mkstx (bC2eaf@syntax-cdr (bC2e81@stx-expr bC32c1@x)) (bC2e85@stx-mark* bC32c1@x) (bC2e89@stx-subst* bC32c1@x) (bC2e8d@stx-ae* bC32c1@x)) (if (bC29f7@bC28c9@annotation? bC32c1@x) (bC2eaf@syntax-cdr (bC29f9@bC28cd@annotation-expression bC32c1@x)) (if (pair? bC32c1@x) (cdr bC32c1@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" bC32c1@x)))))) (set! bC4b38@bC2eaf@syntax-cdr bC2eaf@syntax-cdr) (set! bC2eb1@syntax->list (lambda (bC32c3@x) (if (bC2ea5@syntax-pair? bC32c3@x) (cons (bC2ead@syntax-car bC32c3@x) (bC2eb1@syntax->list (bC2eaf@syntax-cdr bC32c3@x))) (if (bC2ea9@syntax-null? bC32c3@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" bC32c3@x))))) (set! bC4b39@bC2eb1@syntax->list bC2eb1@syntax->list) (set! bC2eb3@id? (lambda (bC32c5@x) (and (bC2e7f@stx? bC32c5@x) (symbol? (bC2e81@stx-expr bC32c5@x))))) (set! bC4b3a@bC2eb3@id? bC2eb3@id?) (set! bC2eb5@id->sym (lambda (bC32c7@x) (bC2e81@stx-expr bC32c7@x))) (set! bC4b3b@bC2eb5@id->sym bC2eb5@id->sym) (set! bC2eb7@bound-id=? (lambda (bC32c9@x bC32ca@y) (and (eq? (bC2eb5@id->sym bC32c9@x) (bC2eb5@id->sym bC32ca@y)) (same-marks? (bC2e85@stx-mark* bC32c9@x) (bC2e85@stx-mark* bC32ca@y))))) (set! bC4b3c@bC2eb7@bound-id=? bC2eb7@bound-id=?) (set! bC2eb9@free-id=? (lambda (bC32cd@i bC32ce@j) (let ((bC32d1@t0 (id->real-label bC32cd@i)) (bC32d2@t1 (id->real-label bC32ce@j))) (if (or bC32d1@t0 bC32d2@t1) (eq? bC32d1@t0 bC32d2@t1) (eq? (bC2eb5@id->sym bC32cd@i) (bC2eb5@id->sym bC32ce@j)))))) (set! bC4b3d@bC2eb9@free-id=? bC2eb9@free-id=?) (set! bC2ebb@valid-bound-ids? (lambda (bC32d5@id*) (and (for-all bC2eb3@id? bC32d5@id*) (bC2ebd@distinct-bound-ids? bC32d5@id*)))) (set! bC4b3e@bC2ebb@valid-bound-ids? bC2ebb@valid-bound-ids?) (set! bC2ebd@distinct-bound-ids? (lambda (bC32d7@id*) (or (null? bC32d7@id*) (and (not (bC2ebf@bound-id-member? (car bC32d7@id*) (cdr bC32d7@id*))) (bC2ebd@distinct-bound-ids? (cdr bC32d7@id*)))))) (set! bC4b3f@bC2ebd@distinct-bound-ids? bC2ebd@distinct-bound-ids?) (set! bC2ebf@bound-id-member? (lambda (bC32d9@id bC32da@id*) (and (pair? bC32da@id*) (or (bC2eb7@bound-id=? bC32d9@id (car bC32da@id*)) (bC2ebf@bound-id-member? bC32d9@id (cdr bC32da@id*)))))) (set! bC4b40@bC2ebf@bound-id-member? bC2ebf@bound-id-member?) (set! bC2ec1@self-evaluating? (lambda (bC32dd@x) (or (number? bC32dd@x) (string? bC32dd@x) (char? bC32dd@x) (boolean? bC32dd@x) (regexp? bC32dd@x) (bytevector? bC32dd@x)))) (set! bC4b41@bC2ec1@self-evaluating? bC2ec1@self-evaluating?) (set! bC2ec3@strip-annotations (lambda (bC32df@x) (if (pair? bC32df@x) (cons (bC2ec3@strip-annotations (car bC32df@x)) (bC2ec3@strip-annotations (cdr bC32df@x))) (if (vector? bC32df@x) (vector-map bC2ec3@strip-annotations bC32df@x) (if (bC29f7@bC28c9@annotation? bC32df@x) (bC29f6@bC28c7@annotation-stripped bC32df@x) bC32df@x))))) (set! bC4b42@bC2ec3@strip-annotations bC2ec3@strip-annotations) (set! bC2ec5@strip (lambda (bC32e1@x bC32e2@m*) (if (bC2e39@top-marked? bC32e2@m*) (if (or (bC29f7@bC28c9@annotation? bC32e1@x) (and (pair? bC32e1@x) (bC29f7@bC28c9@annotation? (car bC32e1@x))) (and (vector? bC32e1@x) (> (vector-length bC32e1@x) '0) (bC29f7@bC28c9@annotation? (vector-ref bC32e1@x '0)))) (bC2ec3@strip-annotations bC32e1@x) bC32e1@x) (let bC32e7@f ((bC32e5@x bC32e1@x)) (if (bC2e7f@stx? bC32e5@x) (bC2ec5@strip (bC2e81@stx-expr bC32e5@x) (bC2e85@stx-mark* bC32e5@x)) (if (bC29f7@bC28c9@annotation? bC32e5@x) (bC29f6@bC28c7@annotation-stripped bC32e5@x) (if (pair? bC32e5@x) (let ((bC32e9@a (bC32e7@f (car bC32e5@x))) (bC32ea@d (bC32e7@f (cdr bC32e5@x)))) (if (and (eq? bC32e9@a (car bC32e5@x)) (eq? bC32ea@d (cdr bC32e5@x))) bC32e5@x (cons bC32e9@a bC32ea@d))) (if (vector? bC32e5@x) (let ((bC32ed@old (vector->list bC32e5@x))) (let ((bC32ef@new (map bC32e7@f bC32ed@old))) (if (for-all eq? bC32ed@old bC32ef@new) bC32e5@x (list->vector bC32ef@new)))) bC32e5@x)))))))) (set! bC4b43@bC2ec5@strip bC2ec5@strip) (set! bC2ec7@stx->datum (lambda (bC32f1@x) (bC2ec5@strip bC32f1@x '()))) (set! bC4b44@bC2ec7@stx->datum bC2ec7@stx->datum) (set! bC2ec9@id->label (lambda (bC32f3@id) (or (id->real-label bC32f3@id) (let ((bC32f5@t (bC31aa@top-level-context))) (if bC32f5@t ((lambda (bC32f7@env) (let ((bC32f9@rib (bC315a@interaction-env-rib bC32f7@env))) (call-with-values (lambda () (bC2e43@gen-define-label+loc bC32f3@id bC32f9@rib)) (lambda (bC32ff@bC32fc bC3300@bC32fe) (let ((bC3303@loc_ bC3300@bC32fe) (bC3304@lab bC32ff@bC32fc)) (begin (bC2e69@extend-rib! bC32f9@rib bC32f3@id bC3304@lab) bC3304@lab)))))) bC32f5@t) '#f))))) (set! bC4b45@bC2ec9@id->label bC2ec9@id->label) (set! bC2ecb@label->binding (lambda (bC3307@x bC3308@r) (let ((bC330b@t (bC2cce@bC2b1b@imported-label->binding bC3307@x))) (if bC330b@t ((lambda (bC330d@b) (if (and (pair? bC330d@b) (eq? (car bC330d@b) '$core-rtd)) (cons '$rtd (map bC3070@bless (cdr bC330d@b))) (if (and (pair? bC330d@b) (eq? (car bC330d@b) 'global-rtd)) (let ((bC330f@lib (cadr bC330d@b)) (bC3310@loc (cddr bC330d@b))) (cons '$rtd (symbol-value bC3310@loc))) bC330d@b))) bC330b@t) (let ((bC3313@t (assq bC3307@x bC3308@r))) (if bC3313@t (cdr bC3313@t) (let ((bC3315@t (bC31aa@top-level-context))) (if bC3315@t ((lambda (bC3317@env) (let ((bC3319@t (assq bC3307@x (bC3162@interaction-env-locs bC3317@env)))) (if bC3319@t ((lambda (bC331b@p) (cons* 'lexical (cdr bC331b@p) '#f)) bC3319@t) '(displaced-lexical . #f)))) bC3315@t) '(displaced-lexical . #f))))))))) (set! bC4b46@bC2ecb@label->binding bC2ecb@label->binding) (set! bC2ecd@make-binding cons) (set! bC4b47@bC2ecd@make-binding bC2ecd@make-binding) (set! bC2ecf@binding-type car) (set! bC4b48@bC2ecf@binding-type bC2ecf@binding-type) (set! bC2ed1@binding-value cdr) (set! bC4b49@bC2ed1@binding-value bC2ed1@binding-value) (set! bC2ed3@raise-unbound-error (lambda (bC331d@id) (bC3198@syntax-violation* '#f '"unbound identifier" bC331d@id (bC4f3f@bC4d85@make-undefined-violation)))) (set! bC4b4a@bC2ed3@raise-unbound-error bC2ed3@raise-unbound-error) (set! bC2ed5@syntax-type (lambda (bC331f@e bC3320@r) (if (bC2eb3@id? bC331f@e) (let ((bC3323@id bC331f@e)) (let ((bC3325@label (bC2ec9@id->label bC3323@id))) (let ((bC3327@b (bC2ecb@label->binding bC3325@label bC3320@r))) (let ((bC3329@type (bC2ecf@binding-type bC3327@b))) (begin (if (not bC3325@label) (bC2ed3@raise-unbound-error bC3323@id) (void)) (let ((bC332b@t bC3329@type)) (if (memv bC332b@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values bC3329@type (bC2ed1@binding-value bC3327@b) bC3323@id) (values 'other '#f '#f)))))))) (if (bC2ea5@syntax-pair? bC331f@e) (let ((bC332d@id (bC2ead@syntax-car bC331f@e))) (if (bC2eb3@id? bC332d@id) (let ((bC332f@label (bC2ec9@id->label bC332d@id))) (let ((bC3331@b (bC2ecb@label->binding bC332f@label bC3320@r))) (let ((bC3333@type (bC2ecf@binding-type bC3331@b))) (begin (if (not bC332f@label) (bC2ed3@raise-unbound-error bC332d@id) (void)) (let ((bC3335@t bC3333@type)) (if (memv bC3335@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values bC3333@type (bC2ed1@binding-value bC3331@b) bC332d@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((bC3337@d (bC2ec7@stx->datum bC331f@e))) (if (bC2ec1@self-evaluating? bC3337@d) (values 'constant bC3337@d '#f) (values 'other '#f '#f))))))) (set! bC4b4b@bC2ed5@syntax-type bC2ed5@syntax-type) (set! bC2ee3@sanitize-binding (lambda (bC3339@x bC333a@src) (if (procedure? bC3339@x) (cons* 'local-macro bC3339@x bC333a@src) (if (and (pair? bC3339@x) (eq? (car bC3339@x) 'macro!) (procedure? (cdr bC3339@x))) (cons* 'local-macro! (cdr bC3339@x) bC333a@src) (if (and (pair? bC3339@x) (eq? (car bC3339@x) '$rtd)) bC3339@x (assertion-violation 'expand '"invalid transformer" bC3339@x)))))) (set! bC4b4c@bC2ee3@sanitize-binding bC2ee3@sanitize-binding) (set! bC2ee5@make-variable-transformer (lambda (bC333d@x) (if (procedure? bC333d@x) (cons 'macro! bC333d@x) (assertion-violation 'make-variable-transformer '"not a procedure" bC333d@x)))) (set! bC4b4d@bC2ee5@make-variable-transformer bC2ee5@make-variable-transformer) (set! bC2ee7@variable-transformer? (lambda (bC333f@x) (and (pair? bC333f@x) (eq? (car bC333f@x) 'macro!) (procedure? (cdr bC333f@x))))) (set! bC4b4e@bC2ee7@variable-transformer? bC2ee7@variable-transformer?) (set! bC2ee9@variable-transformer-procedure (lambda (bC3341@x) (if (bC2ee7@variable-transformer? bC3341@x) (cdr bC3341@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" bC3341@x)))) (set! bC4b4f@bC2ee9@variable-transformer-procedure bC2ee9@variable-transformer-procedure) (set! bC2eeb@make-eval-transformer (lambda (bC3343@x) (bC2ee3@sanitize-binding (eval-core (bC2a59@bC2a11@expanded->core bC3343@x)) bC3343@x))) (set! bC4b50@bC2eeb@make-eval-transformer bC2eeb@make-eval-transformer) (set! bC303c@parse-define (lambda (bC3345@x) (let ((bC3347@t bC3345@x)) (let ((bC3349@ls/false (bC30ba@syntax-dispatch bC3347@t '(_ (any . any) any . each-any)))) (if (and bC3349@ls/false (apply (lambda (bC334b@id bC334c@fmls bC334d@b bC334e@b*) (bC2eb3@id? bC334b@id)) bC3349@ls/false)) (apply (lambda (bC3353@id bC3354@fmls bC3355@b bC3356@b*) (begin (bC30e0@verify-formals bC3354@fmls bC3345@x) (values bC3353@id (cons 'defun (cons bC3354@fmls (cons bC3355@b bC3356@b*)))))) bC3349@ls/false) (let ((bC335b@t bC3347@t)) (let ((bC335d@ls/false (bC30ba@syntax-dispatch bC335b@t '(_ any any)))) (if (and bC335d@ls/false (apply (lambda (bC335f@id bC3360@val) (bC2eb3@id? bC335f@id)) bC335d@ls/false)) (apply (lambda (bC3363@id bC3364@val) (values bC3363@id (cons 'expr bC3364@val))) bC335d@ls/false) (let ((bC3367@t bC335b@t)) (let ((bC3369@ls/false (bC30ba@syntax-dispatch bC3367@t '(_ any)))) (if (and bC3369@ls/false (apply (lambda (bC336b@id) (bC2eb3@id? bC336b@id)) bC3369@ls/false)) (apply (lambda (bC336d@id) (values bC336d@id (cons 'expr (bC3070@bless '(void))))) bC3369@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3367@t)))))))))))) (set! bC4b51@bC303c@parse-define bC303c@parse-define) (set! bC303e@parse-define-syntax (lambda (bC336f@x) (let ((bC3371@t bC336f@x)) (let ((bC3373@ls/false (bC30ba@syntax-dispatch bC3371@t '(_ any any)))) (if (and bC3373@ls/false (apply (lambda (bC3375@id bC3376@val) (bC2eb3@id? bC3375@id)) bC3373@ls/false)) (apply (lambda (bC3379@id bC337a@val) (values bC3379@id bC337a@val)) bC3373@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3371@t)))))) (set! bC4b52@bC303e@parse-define-syntax bC303e@parse-define-syntax) (set! bC3040@scheme-stx-hashtable (make-eq-hashtable)) (set! bC4b53@bC3040@scheme-stx-hashtable bC3040@scheme-stx-hashtable) (set! bC3042@scheme-stx (lambda (bC337d@sym) (or (hashtable-ref bC3040@scheme-stx-hashtable bC337d@sym '#f) (let ((bC337f@subst (bC2caa@bC2ad3@library-subst (bC2cc8@bC2b0f@find-library-by-name '(psyntax system $all))))) (let ((bC3381@stx (make-simple-struct 'stx '5 (list bC337d@sym bC2e37@top-mark* '() '())))) (let ((bC3383@stx (let ((bC3385@t (assq bC337d@sym bC337f@subst))) (if bC3385@t ((lambda (bC3387@x) (let ((bC3389@name (car bC3387@x)) (bC338a@label (cdr bC3387@x))) (bC2e9f@add-subst (make-simple-struct 'rib '6 (list (list bC3389@name) (list bC2e37@top-mark*) (list bC338a@label) '#f '#f)) bC3381@stx))) bC3385@t) bC3381@stx)))) (begin (hashtable-set! bC3040@scheme-stx-hashtable bC337d@sym bC3383@stx) bC3383@stx))))))) (set! bC4b54@bC3042@scheme-stx bC3042@scheme-stx) (set! bC3044@lexical-var car) (set! bC4b55@bC3044@lexical-var bC3044@lexical-var) (set! bC3046@lexical-mutable? cdr) (set! bC4b56@bC3046@lexical-mutable? bC3046@lexical-mutable?) (set! bC3048@set-lexical-mutable! set-cdr!) (set! bC4b57@bC3048@set-lexical-mutable! bC3048@set-lexical-mutable!) (set! bC304a@add-lexical (lambda (bC338d@lab bC338e@lex bC338f@r) (cons (cons* bC338d@lab 'lexical bC338e@lex '#f) bC338f@r))) (set! bC4b58@bC304a@add-lexical bC304a@add-lexical) (set! bC304c@add-lexicals (lambda (bC3393@lab* bC3394@lex* bC3395@r) (if (null? bC3393@lab*) bC3395@r (bC304c@add-lexicals (cdr bC3393@lab*) (cdr bC3394@lex*) (bC304a@add-lexical (car bC3393@lab*) (car bC3394@lex*) bC3395@r))))) (set! bC4b59@bC304c@add-lexicals bC304c@add-lexicals) (set! bC304e@letrec-helper (lambda (bC3399@e bC339a@r bC339b@mr bC339c@build) (let ((bC33a1@t bC3399@e)) (let ((bC33a3@ls/false (bC30ba@syntax-dispatch bC33a1@t '(_ #(each (any any)) any . each-any)))) (if bC33a3@ls/false (apply (lambda (bC33a5@lhs* bC33a6@rhs* bC33a7@b bC33a8@b*) (if (not (bC2ebb@valid-bound-ids? bC33a5@lhs*)) (bC3074@invalid-fmls-error bC3399@e bC33a5@lhs*) (let ((bC33ad@lex* (map bC2e3b@gen-lexical bC33a5@lhs*)) (bC33ae@lab* (map bC2e3f@gen-label bC33a5@lhs*))) (let ((bC33b1@rib (bC2e73@make-full-rib bC33a5@lhs* bC33ae@lab*)) (bC33b2@r (bC304c@add-lexicals bC33ae@lab* bC33ad@lex* bC339a@r))) (let ((bC33b5@body (bC30f2@chi-internal (bC2e9f@add-subst bC33b1@rib (cons bC33a7@b bC33a8@b*)) bC33b2@r bC339b@mr)) (bC33b6@rhs* (bC30d8@chi-expr* (map (lambda (bC33b9@x) (bC2e9f@add-subst bC33b1@rib bC33b9@x)) bC33a6@rhs*) bC33b2@r bC339b@mr))) (bC339c@build '#f bC33ad@lex* bC33b6@rhs* bC33b5@body)))))) bC33a3@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC33a1@t)))))) (set! bC4b5a@bC304e@letrec-helper bC304e@letrec-helper) (set! bC3050@let-transformer (lambda (bC33bb@e bC33bc@r bC33bd@mr) (let ((bC33c1@t bC33bb@e)) (let ((bC33c3@ls/false (bC30ba@syntax-dispatch bC33c1@t '(_ #(each (any any)) any . each-any)))) (if bC33c3@ls/false (apply (lambda (bC33c5@lhs* bC33c6@rhs* bC33c7@b bC33c8@b*) (if (not (bC2ebb@valid-bound-ids? bC33c5@lhs*)) (bC3074@invalid-fmls-error bC33bb@e bC33c5@lhs*) (let ((bC33cd@lex* (map bC2e3b@gen-lexical bC33c5@lhs*)) (bC33ce@lab* (map bC2e3f@gen-label bC33c5@lhs*)) (bC33cf@rhs* (bC30d8@chi-expr* bC33c6@rhs* bC33bc@r bC33bd@mr))) (let ((bC33d3@rib (bC2e73@make-full-rib bC33c5@lhs* bC33ce@lab*)) (bC33d4@r (bC304c@add-lexicals bC33ce@lab* bC33cd@lex* bC33bc@r))) (let ((bC33d7@body (bC30f2@chi-internal (bC2e9f@add-subst bC33d3@rib (cons bC33c7@b bC33c8@b*)) bC33d4@r bC33bd@mr))) (bC2e1b@bC2d7e@build-let '#f bC33cd@lex* bC33cf@rhs* bC33d7@body)))))) bC33c3@ls/false) (let ((bC33d9@t bC33c1@t)) (let ((bC33db@ls/false (bC30ba@syntax-dispatch bC33d9@t '(_ any #(each (any any)) any . each-any)))) (if bC33db@ls/false (apply (lambda (bC33dd@loop bC33de@lhs* bC33df@rhs* bC33e0@b bC33e1@b*) (if (not (bC2ebb@valid-bound-ids? bC33de@lhs*)) (bC3074@invalid-fmls-error bC33bb@e bC33de@lhs*) (let ((bC33e7@lex* (map bC2e3b@gen-lexical bC33de@lhs*)) (bC33e8@lab* (map bC2e3f@gen-label bC33de@lhs*)) (bC33e9@rhs* (bC30d8@chi-expr* bC33df@rhs* bC33bc@r bC33bd@mr)) (bC33ea@loop-lex (bC2e3b@gen-lexical bC33dd@loop)) (bC33eb@loop-lab (bC2e3f@gen-label bC33dd@loop))) (let ((bC33f1@loop-rib (bC2e73@make-full-rib (list bC33dd@loop) (list bC33eb@loop-lab))) (bC33f2@rib (bC2e73@make-full-rib bC33de@lhs* bC33e8@lab*)) (bC33f3@r (bC304c@add-lexicals (cons bC33eb@loop-lab bC33e8@lab*) (cons bC33ea@loop-lex bC33e7@lex*) bC33bc@r))) (let ((bC33f7@body (bC30f2@chi-internal (bC2e9f@add-subst bC33f1@loop-rib (bC2e9f@add-subst bC33f2@rib (cons bC33e0@b bC33e1@b*))) bC33f3@r bC33bd@mr))) (bC2e1c@bC2d80@build-named-let '#f bC33ea@loop-lex bC33e7@lex* bC33e9@rhs* bC33f7@body)))))) bC33db@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC33d9@t))))))))) (set! bC4b5b@bC3050@let-transformer bC3050@let-transformer) (set! bC3052@letrec-transformer (lambda (bC33f9@e bC33fa@r bC33fb@mr) (bC304e@letrec-helper bC33f9@e bC33fa@r bC33fb@mr bC2e1a@bC2d7c@build-letrec))) (set! bC4b5c@bC3052@letrec-transformer bC3052@letrec-transformer) (set! bC3054@letrec*-transformer (lambda (bC33ff@e bC3400@r bC3401@mr) (bC304e@letrec-helper bC33ff@e bC3400@r bC3401@mr bC2e1d@bC2d82@build-letrec*))) (set! bC4b5d@bC3054@letrec*-transformer bC3054@letrec*-transformer) (set! bC3056@fluid-let-syntax-transformer (lambda (bC3405@e bC3406@r bC3407@mr) (letrec* ((bC340c@lookup (lambda (bC341f@x) (or (bC2ec9@id->label bC341f@x) (bC319a@syntax-violation '#f '"unbound identifier" bC3405@e bC341f@x))))) (let ((bC340d@t bC3405@e)) (let ((bC340f@ls/false (bC30ba@syntax-dispatch bC340d@t '(_ #(each (any any)) any . each-any)))) (if bC340f@ls/false (apply (lambda (bC3411@lhs* bC3412@rhs* bC3413@b bC3414@b*) (if (not (bC2ebb@valid-bound-ids? bC3411@lhs*)) (bC3074@invalid-fmls-error bC3405@e bC3411@lhs*) (let ((bC3419@lab* (map bC340c@lookup bC3411@lhs*)) (bC341a@rhs* (map (lambda (bC341d@x) (bC2eeb@make-eval-transformer (bC3114@expand-transformer bC341d@x bC3407@mr))) bC3412@rhs*))) (bC30f2@chi-internal (cons bC3413@b bC3414@b*) (append (map cons bC3419@lab* bC341a@rhs*) bC3406@r) (append (map cons bC3419@lab* bC341a@rhs*) bC3407@mr))))) bC340f@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC340d@t))))))) (set! bC4b5e@bC3056@fluid-let-syntax-transformer bC3056@fluid-let-syntax-transformer) (set! bC3058@type-descriptor-transformer (lambda (bC3421@e bC3422@r bC3423@mr) (let ((bC3427@t bC3421@e)) (let ((bC3429@ls/false (bC30ba@syntax-dispatch bC3427@t '(_ any)))) (if (and bC3429@ls/false (apply (lambda (bC342b@id) (bC2eb3@id? bC342b@id)) bC3429@ls/false)) (apply (lambda (bC342d@id) (let ((bC342f@lab (bC2ec9@id->label bC342d@id))) (let ((bC3431@b (bC2ecb@label->binding bC342f@lab bC3422@r))) (let ((bC3433@type (bC2ecf@binding-type bC3431@b))) (begin (if (not bC342f@lab) (bC2ed3@raise-unbound-error bC342d@id) (void)) (if (not (and (eq? bC3433@type '$rtd) (not (list? (bC2ed1@binding-value bC3431@b))))) (bC319a@syntax-violation '#f '"not a record type" bC3421@e) (void)) (list 'quote (bC2ed1@binding-value bC3431@b))))))) bC3429@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3427@t)))))) (set! bC4b5f@bC3058@type-descriptor-transformer bC3058@type-descriptor-transformer) (set! bC305a@record-type-descriptor-transformer (lambda (bC3435@e bC3436@r bC3437@mr) (let ((bC343b@t bC3435@e)) (let ((bC343d@ls/false (bC30ba@syntax-dispatch bC343b@t '(_ any)))) (if (and bC343d@ls/false (apply (lambda (bC343f@id) (bC2eb3@id? bC343f@id)) bC343d@ls/false)) (apply (lambda (bC3441@id) (let ((bC3443@lab (bC2ec9@id->label bC3441@id))) (let ((bC3445@b (bC2ecb@label->binding bC3443@lab bC3436@r))) (let ((bC3447@type (bC2ecf@binding-type bC3445@b))) (begin (if (not bC3443@lab) (bC2ed3@raise-unbound-error bC3441@id) (void)) (if (not (and (eq? bC3447@type '$rtd) (list? (bC2ed1@binding-value bC3445@b)))) (bC319a@syntax-violation '#f '"not a record type" bC3435@e) (void)) (bC30dc@chi-expr (car (bC2ed1@binding-value bC3445@b)) bC3436@r bC3437@mr)))))) bC343d@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC343b@t)))))) (set! bC4b60@bC305a@record-type-descriptor-transformer bC305a@record-type-descriptor-transformer) (set! bC305c@record-constructor-descriptor-transformer (lambda (bC3449@e bC344a@r bC344b@mr) (let ((bC344f@t bC3449@e)) (let ((bC3451@ls/false (bC30ba@syntax-dispatch bC344f@t '(_ any)))) (if (and bC3451@ls/false (apply (lambda (bC3453@id) (bC2eb3@id? bC3453@id)) bC3451@ls/false)) (apply (lambda (bC3455@id) (let ((bC3457@lab (bC2ec9@id->label bC3455@id))) (let ((bC3459@b (bC2ecb@label->binding bC3457@lab bC344a@r))) (let ((bC345b@type (bC2ecf@binding-type bC3459@b))) (begin (if (not bC3457@lab) (bC2ed3@raise-unbound-error bC3455@id) (void)) (if (not (and (eq? bC345b@type '$rtd) (list? (bC2ed1@binding-value bC3459@b)))) (bC319a@syntax-violation '#f '"invalid type" bC3449@e) (void)) (bC30dc@chi-expr (cadr (bC2ed1@binding-value bC3459@b)) bC344a@r bC344b@mr)))))) bC3451@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC344f@t)))))) (set! bC4b61@bC305c@record-constructor-descriptor-transformer bC305c@record-constructor-descriptor-transformer) (set! bC305e@when-macro (lambda (bC345d@e) (let ((bC345f@t bC345d@e)) (let ((bC3461@ls/false (bC30ba@syntax-dispatch bC345f@t '(_ any any . each-any)))) (if bC3461@ls/false (apply (lambda (bC3463@test bC3464@e bC3465@e*) (bC3070@bless (list 'if bC3463@test (cons 'begin (cons bC3464@e bC3465@e*))))) bC3461@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC345f@t)))))) (set! bC4b62@bC305e@when-macro bC305e@when-macro) (set! bC3060@unless-macro (lambda (bC3469@e) (let ((bC346b@t bC3469@e)) (let ((bC346d@ls/false (bC30ba@syntax-dispatch bC346b@t '(_ any any . each-any)))) (if bC346d@ls/false (apply (lambda (bC346f@test bC3470@e bC3471@e*) (bC3070@bless (list 'if (list 'not bC346f@test) (cons 'begin (cons bC3470@e bC3471@e*))))) bC346d@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC346b@t)))))) (set! bC4b63@bC3060@unless-macro bC3060@unless-macro) (set! bC3062@if-transformer (lambda (bC3475@e bC3476@r bC3477@mr) (let ((bC347b@t bC3475@e)) (let ((bC347d@ls/false (bC30ba@syntax-dispatch bC347b@t '(_ any any any)))) (if bC347d@ls/false (apply (lambda (bC347f@e0 bC3480@e1 bC3481@e2) (list 'if (bC30dc@chi-expr bC347f@e0 bC3476@r bC3477@mr) (bC30dc@chi-expr bC3480@e1 bC3476@r bC3477@mr) (bC30dc@chi-expr bC3481@e2 bC3476@r bC3477@mr))) bC347d@ls/false) (let ((bC3485@t bC347b@t)) (let ((bC3487@ls/false (bC30ba@syntax-dispatch bC3485@t '(_ any any)))) (if bC3487@ls/false (apply (lambda (bC3489@e0 bC348a@e1) (list 'if (bC30dc@chi-expr bC3489@e0 bC3476@r bC3477@mr) (bC30dc@chi-expr bC348a@e1 bC3476@r bC3477@mr) (bC2e19@bC2d7a@build-void))) bC3487@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3485@t))))))))) (set! bC4b64@bC3062@if-transformer bC3062@if-transformer) (set! bC3064@and-transformer (lambda (bC348d@e bC348e@r bC348f@mr) (let ((bC3493@t bC348d@e)) (let ((bC3495@ls/false (bC30ba@syntax-dispatch bC3493@t '(_ . each-any)))) (if bC3495@ls/false (apply (lambda (bC3497@e*) (cons 'and (bC30d8@chi-expr* bC3497@e* bC348e@r bC348f@mr))) bC3495@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3493@t)))))) (set! bC4b65@bC3064@and-transformer bC3064@and-transformer) (set! bC3066@or-transformer (lambda (bC3499@e bC349a@r bC349b@mr) (let ((bC349f@t bC3499@e)) (let ((bC34a1@ls/false (bC30ba@syntax-dispatch bC349f@t '(_ . each-any)))) (if bC34a1@ls/false (apply (lambda (bC34a3@e*) (cons 'or (bC30d8@chi-expr* bC34a3@e* bC349a@r bC349b@mr))) bC34a1@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC349f@t)))))) (set! bC4b66@bC3066@or-transformer bC3066@or-transformer) (set! bC3068@case-macro (lambda (bC34a5@e) (letrec* ((bC34a8@build-last (lambda (bC34cf@cls) (let ((bC34d1@t bC34cf@cls)) (let ((bC34d3@ls/false (bC30ba@syntax-dispatch bC34d1@t '(#(scheme-id else) any . each-any)))) (if bC34d3@ls/false (apply (lambda (bC34d5@e bC34d6@e*) (cons 'begin (cons bC34d5@e bC34d6@e*))) bC34d3@ls/false) (let ((bC34d9@t bC34d1@t)) (let ((bC34db@ls/false (bC30ba@syntax-dispatch bC34d9@t '_))) (if bC34db@ls/false (apply (lambda () (bC34aa@build-one bC34cf@cls '(if #f #f))) bC34db@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC34d9@t))))))))) (bC34aa@build-one (lambda (bC34c1@cls bC34c2@k) (let ((bC34c5@t bC34c1@cls)) (let ((bC34c7@ls/false (bC30ba@syntax-dispatch bC34c5@t '(each-any any . each-any)))) (if bC34c7@ls/false (apply (lambda (bC34c9@d* bC34ca@e bC34cb@e*) (list 'if (list 'memv 't (list 'quote bC34c9@d*)) (cons 'begin (cons bC34ca@e bC34cb@e*)) bC34c2@k)) bC34c7@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC34c5@t))))))) (let ((bC34ab@t bC34a5@e)) (let ((bC34ad@ls/false (bC30ba@syntax-dispatch bC34ab@t '(_ any)))) (if bC34ad@ls/false (apply (lambda (bC34af@expr) (bC3070@bless (cons 'let (cons (list (list 't bC34af@expr)) '((if #f #f)))))) bC34ad@ls/false) (let ((bC34b1@t bC34ab@t)) (let ((bC34b3@ls/false (bC30ba@syntax-dispatch bC34b1@t '(_ any any . each-any)))) (if bC34b3@ls/false (apply (lambda (bC34b5@expr bC34b6@cls bC34b7@cls*) (bC3070@bless (list 'let (list (list 't bC34b5@expr)) (let bC34bf@f ((bC34bb@cls bC34b6@cls) (bC34bc@cls* bC34b7@cls*)) (if (null? bC34bc@cls*) (bC34a8@build-last bC34bb@cls) (bC34aa@build-one bC34bb@cls (bC34bf@f (car bC34bc@cls*) (cdr bC34bc@cls*)))))))) bC34b3@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC34b1@t)))))))))) (set! bC4b67@bC3068@case-macro bC3068@case-macro) (set! bC306a@quote-transformer (lambda (bC34dd@e bC34de@r bC34df@mr) (let ((bC34e3@t bC34dd@e)) (let ((bC34e5@ls/false (bC30ba@syntax-dispatch bC34e3@t '(_ any)))) (if bC34e5@ls/false (apply (lambda (bC34e7@datum) (list 'quote (bC2ec7@stx->datum bC34e7@datum))) bC34e5@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC34e3@t)))))) (set! bC4b68@bC306a@quote-transformer bC306a@quote-transformer) (set! bC306c@case-lambda-transformer (lambda (bC34e9@e bC34ea@r bC34eb@mr) (let ((bC34ef@t bC34e9@e)) (let ((bC34f1@ls/false (bC30ba@syntax-dispatch bC34ef@t '(_ . #(each (any any . each-any)))))) (if bC34f1@ls/false (apply (lambda (bC34f3@fmls* bC34f4@b* bC34f5@b**) (call-with-values (lambda () (bC30e4@chi-lambda-clause* bC34e9@e bC34f3@fmls* (map cons bC34f4@b* bC34f5@b**) bC34ea@r bC34eb@mr)) (lambda (bC34fd@bC34fa bC34fe@bC34fc) (let ((bC3501@body* bC34fe@bC34fc) (bC3502@fmls* bC34fd@bC34fa)) (bC2e17@bC2d4a@build-case-lambda '#f bC3502@fmls* bC3501@body*))))) bC34f1@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC34ef@t)))))) (set! bC4b69@bC306c@case-lambda-transformer bC306c@case-lambda-transformer) (set! bC306e@lambda-transformer (lambda (bC3505@e bC3506@r bC3507@mr) (let ((bC350b@t bC3505@e)) (let ((bC350d@ls/false (bC30ba@syntax-dispatch bC350b@t '(_ any any . each-any)))) (if bC350d@ls/false (apply (lambda (bC350f@fmls bC3510@b bC3511@b*) (call-with-values (lambda () (bC30e2@chi-lambda-clause bC3505@e bC350f@fmls (cons bC3510@b bC3511@b*) bC3506@r bC3507@mr)) (lambda (bC3519@bC3516 bC351a@bC3518) (let ((bC351d@body bC351a@bC3518) (bC351e@fmls bC3519@bC3516)) (bC2e16@bC2d48@build-lambda '#f bC351e@fmls bC351d@body))))) bC350d@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC350b@t)))))) (set! bC4b6a@bC306e@lambda-transformer bC306e@lambda-transformer) (set! bC3070@bless (lambda (bC3521@x) (bC2e9b@mkstx (let bC3525@f ((bC3523@x bC3521@x)) (if (bC2e7f@stx? bC3523@x) bC3523@x (if (pair? bC3523@x) (cons (bC3525@f (car bC3523@x)) (bC3525@f (cdr bC3523@x))) (if (symbol? bC3523@x) (bC3042@scheme-stx bC3523@x) (if (vector? bC3523@x) (vector-map bC3525@f bC3523@x) bC3523@x))))) '() '() '()))) (set! bC4b6b@bC3070@bless bC3070@bless) (set! bC3072@with-syntax-macro (lambda (bC3527@e) (let ((bC3529@t bC3527@e)) (let ((bC352b@ls/false (bC30ba@syntax-dispatch bC3529@t '(_ #(each (any any)) any . each-any)))) (if bC352b@ls/false (apply (lambda (bC352d@pat* bC352e@expr* bC352f@b bC3530@b*) (let ((bC3535@idn* (let bC3539@f ((bC3537@pat* bC352d@pat*)) (if (null? bC3537@pat*) '() (call-with-values (lambda () (bC30b8@convert-pattern (car bC3537@pat*) '())) (lambda (bC353f@bC353c bC3540@bC353e) (let ((bC3543@idn* bC3540@bC353e) (bC3544@pat bC353f@bC353c)) (append bC3543@idn* (bC3539@f (cdr bC3537@pat*)))))))))) (begin (bC30e0@verify-formals (map car bC3535@idn*) bC3527@e) (let ((bC3547@t* (bC3188@generate-temporaries bC352e@expr*))) (bC3070@bless (list 'let (map list bC3547@t* bC352e@expr*) (let bC354d@f ((bC3549@pat* bC352d@pat*) (bC354a@t* bC3547@t*)) (if (null? bC3549@pat*) (cons 'begin (cons '#f (cons bC352f@b bC3530@b*))) (list 'syntax-case (car bC354a@t*) '() (list (car bC3549@pat*) (bC354d@f (cdr bC3549@pat*) (cdr bC354a@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car bC3549@pat*)) (car bC354a@t*)))))))))))) bC352b@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3529@t)))))) (set! bC4b6c@bC3072@with-syntax-macro bC3072@with-syntax-macro) (set! bC3074@invalid-fmls-error (lambda (bC354f@stx bC3550@fmls) (let ((bC3553@t bC3550@fmls)) (let ((bC3555@ls/false (bC30ba@syntax-dispatch bC3553@t '#(each+ any () any)))) (if bC3555@ls/false (apply (lambda (bC3557@id* bC3558@last) (let bC355d@f ((bC355b@id* (if (bC2eb3@id? bC3558@last) (cons bC3558@last bC3557@id*) (if (bC2ea9@syntax-null? bC3558@last) bC3557@id* (bC319a@syntax-violation '#f '"not an identifier" bC354f@stx bC3558@last))))) (if (null? bC355b@id*) (values) (if (not (bC2eb3@id? (car bC355b@id*))) (bC319a@syntax-violation '#f '"not an identifier" bC354f@stx (car bC355b@id*)) (begin (bC355d@f (cdr bC355b@id*)) (if (bC2ebf@bound-id-member? (car bC355b@id*) (cdr bC355b@id*)) (bC319a@syntax-violation '#f '"duplicate binding" bC354f@stx (car bC355b@id*)) (void))))))) bC3555@ls/false) (let ((bC355f@t bC3553@t)) (let ((bC3561@ls/false (bC30ba@syntax-dispatch bC355f@t '_))) (if bC3561@ls/false (apply (lambda () (bC319a@syntax-violation '#f '"malformed binding form" bC354f@stx bC3550@fmls)) bC3561@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC355f@t))))))))) (set! bC4b6d@bC3074@invalid-fmls-error bC3074@invalid-fmls-error) (set! bC3076@let-macro (lambda (bC3563@stx) (let ((bC3565@t bC3563@stx)) (let ((bC3567@ls/false (bC30ba@syntax-dispatch bC3565@t '(_ #(each (any any)) any . each-any)))) (if bC3567@ls/false (apply (lambda (bC3569@lhs* bC356a@rhs* bC356b@b bC356c@b*) (if (bC2ebb@valid-bound-ids? bC3569@lhs*) (bC3070@bless (cons (cons 'lambda (cons bC3569@lhs* (cons bC356b@b bC356c@b*))) bC356a@rhs*)) (bC3074@invalid-fmls-error bC3563@stx bC3569@lhs*))) bC3567@ls/false) (let ((bC3571@t bC3565@t)) (let ((bC3573@ls/false (bC30ba@syntax-dispatch bC3571@t '(_ any #(each (any any)) any . each-any)))) (if (and bC3573@ls/false (apply (lambda (bC3575@f bC3576@lhs* bC3577@rhs* bC3578@b bC3579@b*) (bC2eb3@id? bC3575@f)) bC3573@ls/false)) (apply (lambda (bC357f@f bC3580@lhs* bC3581@rhs* bC3582@b bC3583@b*) (if (bC2ebb@valid-bound-ids? bC3580@lhs*) (bC3070@bless (cons (list 'letrec (list (list bC357f@f (cons 'lambda (cons bC3580@lhs* (cons bC3582@b bC3583@b*))))) bC357f@f) bC3581@rhs*)) (bC3074@invalid-fmls-error bC3563@stx bC3580@lhs*))) bC3573@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3571@t))))))))) (set! bC4b6e@bC3076@let-macro bC3076@let-macro) (set! bC3078@let-values-macro (lambda (bC3589@stx) (letrec* ((bC358c@rename (lambda (bC35f1@x bC35f2@old* bC35f3@new*) (begin (if (not (bC2eb3@id? bC35f1@x)) (bC319a@syntax-violation '#f '"not an indentifier" bC3589@stx bC35f1@x) (void)) (if (bC2ebf@bound-id-member? bC35f1@x bC35f2@old*) (bC319a@syntax-violation '#f '"duplicate binding" bC3589@stx bC35f1@x) (void)) (let ((bC35f7@y (gensym (bC31a0@syntax->datum bC35f1@x)))) (values bC35f7@y (cons bC35f1@x bC35f2@old*) (cons bC35f7@y bC35f3@new*)))))) (bC358e@rename* (lambda (bC35df@x* bC35e0@old* bC35e1@new*) (if (null? bC35df@x*) (values '() bC35e0@old* bC35e1@new*) (call-with-values (lambda () (bC358c@rename (car bC35df@x*) bC35e0@old* bC35e1@new*)) (lambda (bC35e5@x bC35e6@old* bC35e7@new*) (call-with-values (lambda () (bC358e@rename* (cdr bC35df@x*) bC35e6@old* bC35e7@new*)) (lambda (bC35eb@x* bC35ec@old* bC35ed@new*) (values (cons bC35e5@x bC35eb@x*) bC35ec@old* bC35ed@new*))))))))) (let ((bC358f@t bC3589@stx)) (let ((bC3591@ls/false (bC30ba@syntax-dispatch bC358f@t '(_ () any . each-any)))) (if bC3591@ls/false (apply (lambda (bC3593@b bC3594@b*) (cons* (bC3070@bless 'let) '() bC3593@b bC3594@b*)) bC3591@ls/false) (let ((bC3597@t bC358f@t)) (let ((bC3599@ls/false (bC30ba@syntax-dispatch bC3597@t '(_ #(each (any any)) any . each-any)))) (if bC3599@ls/false (apply (lambda (bC359b@lhs* bC359c@rhs* bC359d@b bC359e@b*) (bC3070@bless (let bC35ab@f ((bC35a3@lhs* bC359b@lhs*) (bC35a4@rhs* bC359c@rhs*) (bC35a5@old* '()) (bC35a6@new* '())) (if (null? bC35a3@lhs*) (cons 'let (cons (map list bC35a5@old* bC35a6@new*) (cons bC359d@b bC359e@b*))) (let ((bC35ad@t (car bC35a3@lhs*))) (let ((bC35af@ls/false (bC30ba@syntax-dispatch bC35ad@t 'each-any))) (if bC35af@ls/false (apply (lambda (bC35b1@x*) (call-with-values (lambda () (bC358e@rename* bC35b1@x* bC35a5@old* bC35a6@new*)) (lambda (bC35b9@bC35b4 bC35ba@bC35b6 bC35bb@bC35b8) (let ((bC35bf@new* bC35bb@bC35b8) (bC35c0@old* bC35ba@bC35b6) (bC35c1@y* bC35b9@bC35b4)) (list 'call-with-values (list 'lambda '() (car bC35a4@rhs*)) (list 'lambda bC35c1@y* (bC35ab@f (cdr bC35a3@lhs*) (cdr bC35a4@rhs*) bC35c0@old* bC35bf@new*))))))) bC35af@ls/false) (let ((bC35c5@t bC35ad@t)) (let ((bC35c7@ls/false (bC30ba@syntax-dispatch bC35c5@t '#(each+ any () any)))) (if bC35c7@ls/false (apply (lambda (bC35c9@x* bC35ca@x) (call-with-values (lambda () (bC358c@rename bC35ca@x bC35a5@old* bC35a6@new*)) (lambda (bC35cd@y bC35ce@old* bC35cf@new*) (call-with-values (lambda () (bC358e@rename* bC35c9@x* bC35ce@old* bC35cf@new*)) (lambda (bC35d3@y* bC35d4@old* bC35d5@new*) (list 'call-with-values (list 'lambda '() (car bC35a4@rhs*)) (list 'lambda (append bC35d3@y* bC35cd@y) (bC35ab@f (cdr bC35a3@lhs*) (cdr bC35a4@rhs*) bC35d4@old* bC35d5@new*)))))))) bC35c7@ls/false) (let ((bC35d9@t bC35c5@t)) (let ((bC35db@ls/false (bC30ba@syntax-dispatch bC35d9@t 'any))) (if bC35db@ls/false (apply (lambda (bC35dd@others) (bC319a@syntax-violation '#f '"malformed bindings" bC3589@stx bC35dd@others)) bC35db@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC35d9@t)))))))))))))) bC3599@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3597@t)))))))))) (set! bC4b6f@bC3078@let-values-macro bC3078@let-values-macro) (set! bC307a@let*-values-macro (lambda (bC35f9@stx) (letrec* ((bC35fc@check (lambda (bC362b@x*) (if (not (null? bC362b@x*)) (let ((bC362d@x (car bC362b@x*))) (begin (if (not (bC2eb3@id? bC362d@x)) (bC319a@syntax-violation '#f '"not an identifier" bC35f9@stx bC362d@x) (void)) (bC35fc@check (cdr bC362b@x*)) (if (bC2ebf@bound-id-member? bC362d@x (cdr bC362b@x*)) (bC319a@syntax-violation '#f '"duplicate identifier" bC35f9@stx bC362d@x) (void)))) (void))))) (let ((bC35fd@t bC35f9@stx)) (let ((bC35ff@ls/false (bC30ba@syntax-dispatch bC35fd@t '(_ () any . each-any)))) (if bC35ff@ls/false (apply (lambda (bC3601@b bC3602@b*) (cons* (bC3070@bless 'let) '() bC3601@b bC3602@b*)) bC35ff@ls/false) (let ((bC3605@t bC35fd@t)) (let ((bC3607@ls/false (bC30ba@syntax-dispatch bC3605@t '(_ #(each (any any)) any . each-any)))) (if bC3607@ls/false (apply (lambda (bC3609@lhs* bC360a@rhs* bC360b@b bC360c@b*) (bC3070@bless (let bC3615@f ((bC3611@lhs* bC3609@lhs*) (bC3612@rhs* bC360a@rhs*)) (if (null? bC3611@lhs*) (cons 'begin (cons bC360b@b bC360c@b*)) (let ((bC3617@t (car bC3611@lhs*))) (let ((bC3619@ls/false (bC30ba@syntax-dispatch bC3617@t 'each-any))) (if bC3619@ls/false (apply (lambda (bC361b@x*) (begin (bC35fc@check bC361b@x*) (list 'call-with-values (list 'lambda '() (car bC3612@rhs*)) (list 'lambda bC361b@x* (bC3615@f (cdr bC3611@lhs*) (cdr bC3612@rhs*)))))) bC3619@ls/false) (let ((bC361d@t bC3617@t)) (let ((bC361f@ls/false (bC30ba@syntax-dispatch bC361d@t '#(each+ any () any)))) (if bC361f@ls/false (apply (lambda (bC3621@x* bC3622@x) (begin (bC35fc@check (cons bC3622@x bC3621@x*)) (list 'call-with-values (list 'lambda '() (car bC3612@rhs*)) (list 'lambda (append bC3621@x* bC3622@x) (bC3615@f (cdr bC3611@lhs*) (cdr bC3612@rhs*)))))) bC361f@ls/false) (let ((bC3625@t bC361d@t)) (let ((bC3627@ls/false (bC30ba@syntax-dispatch bC3625@t 'any))) (if bC3627@ls/false (apply (lambda (bC3629@others) (bC319a@syntax-violation '#f '"malformed bindings" bC35f9@stx bC3629@others)) bC3627@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3625@t)))))))))))))) bC3607@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3605@t)))))))))) (set! bC4b70@bC307a@let*-values-macro bC307a@let*-values-macro) (set! bC307c@trace-lambda-macro (lambda (bC362f@stx) (let ((bC3631@t bC362f@stx)) (let ((bC3633@ls/false (bC30ba@syntax-dispatch bC3631@t '(_ any each-any any . each-any)))) (if bC3633@ls/false (apply (lambda (bC3635@who bC3636@fmls bC3637@b bC3638@b*) (if (bC2ebb@valid-bound-ids? bC3636@fmls) (bC3070@bless (list 'make-traced-procedure (list 'quote bC3635@who) (cons 'lambda (cons bC3636@fmls (cons bC3637@b bC3638@b*))))) (bC3074@invalid-fmls-error bC362f@stx bC3636@fmls))) bC3633@ls/false) (let ((bC363d@t bC3631@t)) (let ((bC363f@ls/false (bC30ba@syntax-dispatch bC363d@t '(_ any #(each+ any () any) any . each-any)))) (if bC363f@ls/false (apply (lambda (bC3641@who bC3642@fmls bC3643@last bC3644@b bC3645@b*) (if (bC2ebb@valid-bound-ids? (cons bC3643@last bC3642@fmls)) (bC3070@bless (list 'make-traced-procedure (list 'quote bC3641@who) (cons 'lambda (cons (append bC3642@fmls bC3643@last) (cons bC3644@b bC3645@b*))))) (bC3074@invalid-fmls-error bC362f@stx (append bC3642@fmls bC3643@last)))) bC363f@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC363d@t))))))))) (set! bC4b71@bC307c@trace-lambda-macro bC307c@trace-lambda-macro) (set! bC307e@trace-define-macro (lambda (bC364b@stx) (let ((bC364d@t bC364b@stx)) (let ((bC364f@ls/false (bC30ba@syntax-dispatch bC364d@t '(_ (any . each-any) any . each-any)))) (if bC364f@ls/false (apply (lambda (bC3651@who bC3652@fmls bC3653@b bC3654@b*) (if (bC2ebb@valid-bound-ids? bC3652@fmls) (bC3070@bless (list 'define bC3651@who (list 'make-traced-procedure (list 'quote bC3651@who) (cons 'lambda (cons bC3652@fmls (cons bC3653@b bC3654@b*)))))) (bC3074@invalid-fmls-error bC364b@stx bC3652@fmls))) bC364f@ls/false) (let ((bC3659@t bC364d@t)) (let ((bC365b@ls/false (bC30ba@syntax-dispatch bC3659@t '(_ (any . #(each+ any () any)) any . each-any)))) (if bC365b@ls/false (apply (lambda (bC365d@who bC365e@fmls bC365f@last bC3660@b bC3661@b*) (if (bC2ebb@valid-bound-ids? (cons bC365f@last bC365e@fmls)) (bC3070@bless (list 'define bC365d@who (list 'make-traced-procedure (list 'quote bC365d@who) (cons 'lambda (cons (append bC365e@fmls bC365f@last) (cons bC3660@b bC3661@b*)))))) (bC3074@invalid-fmls-error bC364b@stx (append bC365e@fmls bC365f@last)))) bC365b@ls/false) (let ((bC3667@t bC3659@t)) (let ((bC3669@ls/false (bC30ba@syntax-dispatch bC3667@t '(_ any any)))) (if bC3669@ls/false (apply (lambda (bC366b@who bC366c@expr) (if (bC2eb3@id? bC366b@who) (bC3070@bless (list 'define bC366b@who (list 'let (list (list 'v bC366c@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote bC366b@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (bC319a@syntax-violation '#f '"invalid name" bC364b@stx))) bC3669@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3667@t)))))))))))) (set! bC4b72@bC307e@trace-define-macro bC307e@trace-define-macro) (set! bC3080@trace-define-syntax-macro (lambda (bC366f@stx) (let ((bC3671@t bC366f@stx)) (let ((bC3673@ls/false (bC30ba@syntax-dispatch bC3671@t '(_ any any)))) (if bC3673@ls/false (apply (lambda (bC3675@who bC3676@expr) (if (bC2eb3@id? bC3675@who) (bC3070@bless (list 'define-syntax bC3675@who (list 'make-traced-macro (list 'quote bC3675@who) bC3676@expr))) (bC319a@syntax-violation '#f '"invalid name" bC366f@stx))) bC3673@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3671@t)))))) (set! bC4b73@bC3080@trace-define-syntax-macro bC3080@trace-define-syntax-macro) (set! bC3082@trace-let/rec-syntax (lambda (bC3679@who) (lambda (bC367b@stx) (let ((bC367d@t bC367b@stx)) (let ((bC367f@ls/false (bC30ba@syntax-dispatch bC367d@t '(_ #(each (any any)) any . each-any)))) (if bC367f@ls/false (apply (lambda (bC3681@lhs* bC3682@rhs* bC3683@b bC3684@b*) (if (bC2ebb@valid-bound-ids? bC3681@lhs*) (let ((bC3689@rhs* (map (lambda (bC368b@lhs bC368c@rhs) (list 'make-traced-macro (list 'quote bC368b@lhs) bC368c@rhs)) bC3681@lhs* bC3682@rhs*))) (bC3070@bless (cons bC3679@who (cons (map list bC3681@lhs* bC3689@rhs*) (cons bC3683@b bC3684@b*))))) (bC3074@invalid-fmls-error bC367b@stx bC3681@lhs*))) bC367f@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC367d@t))))))) (set! bC4b74@bC3082@trace-let/rec-syntax bC3082@trace-let/rec-syntax) (set! bC3084@trace-let-syntax-macro (bC3082@trace-let/rec-syntax 'let-syntax)) (set! bC4b75@bC3084@trace-let-syntax-macro bC3084@trace-let-syntax-macro) (set! bC3086@trace-letrec-syntax-macro (bC3082@trace-let/rec-syntax 'letrec-syntax)) (set! bC4b76@bC3086@trace-letrec-syntax-macro bC3086@trace-letrec-syntax-macro) (set! bC3088@guard-macro (lambda (bC368f@x) (letrec* ((bC3692@gen-clauses (lambda (bC36a9@con bC36aa@outerk bC36ab@clause*) (letrec* ((bC36b0@f (lambda (bC36e9@x bC36ea@k) (let ((bC36ed@t bC36e9@x)) (let ((bC36ef@ls/false (bC30ba@syntax-dispatch bC36ed@t '(any #(scheme-id =>) any)))) (if bC36ef@ls/false (apply (lambda (bC36f1@e bC36f2@p) (let ((bC36f5@t (gensym))) (list 'let (list (list bC36f5@t bC36f1@e)) (list 'if bC36f5@t (list bC36f2@p bC36f5@t) bC36ea@k)))) bC36ef@ls/false) (let ((bC36f7@t bC36ed@t)) (let ((bC36f9@ls/false (bC30ba@syntax-dispatch bC36f7@t '(any)))) (if bC36f9@ls/false (apply (lambda (bC36fb@e) (let ((bC36fd@t (gensym))) (list 'let (list (list bC36fd@t bC36fb@e)) (list 'if bC36fd@t bC36fd@t bC36ea@k)))) bC36f9@ls/false) (let ((bC36ff@t bC36f7@t)) (let ((bC3701@ls/false (bC30ba@syntax-dispatch bC36ff@t '(any any . each-any)))) (if bC3701@ls/false (apply (lambda (bC3703@e bC3704@v bC3705@v*) (list 'if bC3703@e (cons 'begin (cons bC3704@v bC3705@v*)) bC36ea@k)) bC3701@ls/false) (let ((bC3709@t bC36ff@t)) (let ((bC370b@ls/false (bC30ba@syntax-dispatch bC3709@t '_))) (if bC370b@ls/false (apply (lambda () (bC319a@syntax-violation '#f '"invalid guard clause" bC36e9@x)) bC370b@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3709@t))))))))))))))) (bC36b2@f* (lambda (bC36bf@x*) (let ((bC36c1@t bC36bf@x*)) (let ((bC36c3@ls/false (bC30ba@syntax-dispatch bC36c1@t '()))) (if bC36c3@ls/false (apply (lambda () (let ((bC36c5@g (gensym))) (values (list bC36c5@g (list 'lambda '() (list 'raise-continuable bC36a9@con))) bC36c5@g))) bC36c3@ls/false) (let ((bC36c7@t bC36c1@t)) (let ((bC36c9@ls/false (bC30ba@syntax-dispatch bC36c7@t '((#(scheme-id else) any . each-any))))) (if bC36c9@ls/false (apply (lambda (bC36cb@e bC36cc@e*) (values (cons 'begin (cons bC36cb@e bC36cc@e*)) '#f)) bC36c9@ls/false) (let ((bC36cf@t bC36c7@t)) (let ((bC36d1@ls/false (bC30ba@syntax-dispatch bC36cf@t '(any . any)))) (if bC36d1@ls/false (apply (lambda (bC36d3@cls bC36d4@cls*) (call-with-values (lambda () (bC36b2@f* bC36d4@cls*)) (lambda (bC36db@bC36d8 bC36dc@bC36da) (let ((bC36df@g bC36dc@bC36da) (bC36e0@e bC36db@bC36d8)) (values (bC36b0@f bC36d3@cls bC36e0@e) bC36df@g))))) bC36d1@ls/false) (let ((bC36e3@t bC36cf@t)) (let ((bC36e5@ls/false (bC30ba@syntax-dispatch bC36e3@t 'any))) (if bC36e5@ls/false (apply (lambda (bC36e7@others) (bC319a@syntax-violation '#f '"invalid guard clause" bC36e7@others)) bC36e5@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC36e3@t)))))))))))))))) (call-with-values (lambda () (bC36b2@f* bC36ab@clause*)) (lambda (bC36b7@bC36b4 bC36b8@bC36b6) (let ((bC36bb@raisek bC36b8@bC36b6) (bC36bc@code bC36b7@bC36b4)) (if bC36bb@raisek (list (list 'call/cc (list 'lambda (list bC36bb@raisek) (list bC36aa@outerk (list 'lambda '() bC36bc@code))))) (list bC36aa@outerk (list 'lambda '() bC36bc@code)))))))))) (let ((bC3693@t bC368f@x)) (let ((bC3695@ls/false (bC30ba@syntax-dispatch bC3693@t '(_ (any . each-any) any . each-any)))) (if (and bC3695@ls/false (apply (lambda (bC3697@con bC3698@clause* bC3699@b bC369a@b*) (bC2eb3@id? bC3697@con)) bC3695@ls/false)) (apply (lambda (bC369f@con bC36a0@clause* bC36a1@b bC36a2@b*) (let ((bC36a7@outerk (gensym))) (bC3070@bless (list (list 'call/cc (list 'lambda (list bC36a7@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list bC369f@con) (bC3692@gen-clauses bC369f@con bC36a7@outerk bC36a0@clause*)) (cons 'lambda (cons '() (cons bC36a1@b bC36a2@b*))))))))))) bC3695@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3693@t))))))) (set! bC4b77@bC3088@guard-macro bC3088@guard-macro) (set! bC308a@define-enumeration-macro (lambda (bC370d@stx) (letrec* ((bC3710@set? (lambda (bC3729@x) (or (null? bC3729@x) (and (not (memq (car bC3729@x) (cdr bC3729@x))) (bC3710@set? (cdr bC3729@x)))))) (bC3712@remove-dups (lambda (bC3727@ls) (if (null? bC3727@ls) '() (cons (car bC3727@ls) (bC3712@remove-dups (remq (car bC3727@ls) (cdr bC3727@ls)))))))) (let ((bC3713@t bC370d@stx)) (let ((bC3715@ls/false (bC30ba@syntax-dispatch bC3713@t '(_ any each-any any)))) (if (and bC3715@ls/false (apply (lambda (bC3717@name bC3718@id* bC3719@maker) (and (bC2eb3@id? bC3717@name) (bC2eb3@id? bC3719@maker) (for-all bC2eb3@id? bC3718@id*))) bC3715@ls/false)) (apply (lambda (bC371d@name bC371e@id* bC371f@maker) (let ((bC3723@name* (bC3712@remove-dups (bC31a0@syntax->datum bC371e@id*))) (bC3724@mk (gensym))) (bC3070@bless (list 'begin (list 'define bC3724@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote bC3723@name*)))) (list 'define-syntax bC371d@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote bC3723@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote bC371d@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax bC371f@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote bC371f@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote bC3723@name*)) (cons 'syntax-violation (cons (list 'quote bC371f@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons bC3724@mk '('(n* ...))))))))))))) bC3715@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3713@t))))))) (set! bC4b78@bC308a@define-enumeration-macro bC308a@define-enumeration-macro) (set! bC308c@time-macro (lambda (bC372b@stx) (let ((bC372d@t bC372b@stx)) (let ((bC372f@ls/false (bC30ba@syntax-dispatch bC372d@t '(_ any)))) (if bC372f@ls/false (apply (lambda (bC3731@expr) (bC3070@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() bC3731@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) bC372f@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC372d@t)))))) (set! bC4b79@bC308c@time-macro bC308c@time-macro) (set! bC308e@delay-macro (lambda (bC3733@stx) (let ((bC3735@t bC3733@stx)) (let ((bC3737@ls/false (bC30ba@syntax-dispatch bC3735@t '(_ any)))) (if bC3737@ls/false (apply (lambda (bC3739@expr) (bC3070@bless (list 'make-promise (list 'lambda '() bC3739@expr)))) bC3737@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3735@t)))))) (set! bC4b7a@bC308e@delay-macro bC308e@delay-macro) (set! bC3090@assert-macro (lambda (bC373b@stx) (let ((bC373d@t bC373b@stx)) (let ((bC373f@ls/false (bC30ba@syntax-dispatch bC373d@t '(_ any)))) (if bC373f@ls/false (apply (lambda (bC3741@expr) (let ((bC3743@pos (or (bC3192@expression-position bC373b@stx) (bC3192@expression-position bC3741@expr)))) (bC3070@bless (list 'let (list (list 'x bC3741@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote bC3741@expr) (list 'quote bC3743@pos))))))) bC373f@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC373d@t)))))) (set! bC4b7b@bC3090@assert-macro bC3090@assert-macro) (set! bC3092@endianness-macro (lambda (bC3745@stx) (let ((bC3747@t bC3745@stx)) (let ((bC3749@ls/false (bC30ba@syntax-dispatch bC3747@t '(_ any)))) (if bC3749@ls/false (apply (lambda (bC374b@e) (let ((bC374d@t (bC31a0@syntax->datum bC374b@e))) (if (memv bC374d@t '(little)) (bC3070@bless ''little) (if (memv bC374d@t '(big)) (bC3070@bless ''big) (bC319a@syntax-violation '#f '"endianness must be big or little" bC3745@stx))))) bC3749@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3747@t)))))) (set! bC4b7c@bC3092@endianness-macro bC3092@endianness-macro) (set! bC3094@identifier-syntax-macro (lambda (bC374f@stx) (let ((bC3751@t bC374f@stx)) (let ((bC3753@ls/false (bC30ba@syntax-dispatch bC3751@t '(_ any)))) (if bC3753@ls/false (apply (lambda (bC3755@expr) (bC3070@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax bC3755@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax bC3755@expr) '((syntax (e* ...)))))))))) bC3753@ls/false) (let ((bC3757@t bC3751@t)) (let ((bC3759@ls/false (bC30ba@syntax-dispatch bC3757@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and bC3759@ls/false (apply (lambda (bC375b@id1 bC375c@expr1 bC375d@id2 bC375e@expr2 bC375f@expr3) (and (bC2eb3@id? bC375b@id1) (bC2eb3@id? bC375d@id2) (bC2eb3@id? bC375e@expr2))) bC3759@ls/false)) (apply (lambda (bC3765@id1 bC3766@expr1 bC3767@id2 bC3768@expr2 bC3769@expr3) (bC3070@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax bC3766@expr1)) (list (list 'set! 'id bC3768@expr2) (list 'syntax bC3769@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons bC3766@expr1 '(e* ...))))))))) bC3759@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3757@t))))))))) (set! bC4b7d@bC3094@identifier-syntax-macro bC3094@identifier-syntax-macro) (set! bC3096@do-macro (lambda (bC376f@stx) (letrec* ((bC3772@bind (lambda (bC3789@x) (let ((bC378b@t bC3789@x)) (let ((bC378d@ls/false (bC30ba@syntax-dispatch bC378b@t '(any any)))) (if bC378d@ls/false (apply (lambda (bC378f@x bC3790@init) (list bC378f@x bC3790@init bC378f@x)) bC378d@ls/false) (let ((bC3793@t bC378b@t)) (let ((bC3795@ls/false (bC30ba@syntax-dispatch bC3793@t '(any any any)))) (if bC3795@ls/false (apply (lambda (bC3797@x bC3798@init bC3799@step) (list bC3797@x bC3798@init bC3799@step)) bC3795@ls/false) (let ((bC379d@t bC3793@t)) (let ((bC379f@ls/false (bC30ba@syntax-dispatch bC379d@t '_))) (if bC379f@ls/false (apply (lambda () (bC319a@syntax-violation '#f '"invalid binding" bC376f@stx)) bC379f@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC379d@t))))))))))))) (let ((bC3773@t bC376f@stx)) (let ((bC3775@ls/false (bC30ba@syntax-dispatch bC3773@t '(_ each-any (any . each-any) . each-any)))) (if bC3775@ls/false (apply (lambda (bC3777@binding* bC3778@test bC3779@expr* bC377a@command*) (let ((bC377f@t (map bC3772@bind bC3777@binding*))) (let ((bC3781@ls/false (bC30ba@syntax-dispatch bC377f@t '#(each (any any any))))) (if bC3781@ls/false (apply (lambda (bC3783@x* bC3784@init* bC3785@step*) (if (bC2ebb@valid-bound-ids? bC3783@x*) (bC3070@bless (list 'letrec (list (list 'loop (list 'lambda bC3783@x* (list 'if bC3778@test (cons 'begin (cons '(if #f #f) bC3779@expr*)) (cons 'begin (append bC377a@command* (list (cons 'loop bC3785@step*)))))))) (cons 'loop bC3784@init*))) (bC319a@syntax-violation '#f '"invalid bindings" bC376f@stx))) bC3781@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC377f@t))))) bC3775@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3773@t))))))) (set! bC4b7e@bC3096@do-macro bC3096@do-macro) (set! bC3098@let*-macro (lambda (bC37a1@stx) (let ((bC37a3@t bC37a1@stx)) (let ((bC37a5@ls/false (bC30ba@syntax-dispatch bC37a3@t '(_ #(each (any any)) any . each-any)))) (if (and bC37a5@ls/false (apply (lambda (bC37a7@lhs* bC37a8@rhs* bC37a9@b bC37aa@b*) (for-all bC2eb3@id? bC37a7@lhs*)) bC37a5@ls/false)) (apply (lambda (bC37af@lhs* bC37b0@rhs* bC37b1@b bC37b2@b*) (bC3070@bless (let bC37b9@f ((bC37b7@x* (map list bC37af@lhs* bC37b0@rhs*))) (if (null? bC37b7@x*) (cons 'let (cons '() (cons bC37b1@b bC37b2@b*))) (list 'let (list (car bC37b7@x*)) (bC37b9@f (cdr bC37b7@x*))))))) bC37a5@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC37a3@t)))))) (set! bC4b7f@bC3098@let*-macro bC3098@let*-macro) (set! bC309a@or-macro (lambda (bC37bb@stx) (let ((bC37bd@t bC37bb@stx)) (let ((bC37bf@ls/false (bC30ba@syntax-dispatch bC37bd@t '(_)))) (if bC37bf@ls/false (apply (lambda () '#f) bC37bf@ls/false) (let ((bC37c1@t bC37bd@t)) (let ((bC37c3@ls/false (bC30ba@syntax-dispatch bC37c1@t '(_ any . each-any)))) (if bC37c3@ls/false (apply (lambda (bC37c5@e bC37c6@e*) (bC3070@bless (let bC37cd@f ((bC37c9@e bC37c5@e) (bC37ca@e* bC37c6@e*)) (if (null? bC37ca@e*) (list 'begin '#f bC37c9@e) (list 'let (list (list 't bC37c9@e)) (list 'if 't 't (bC37cd@f (car bC37ca@e*) (cdr bC37ca@e*)))))))) bC37c3@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC37c1@t))))))))) (set! bC4b80@bC309a@or-macro bC309a@or-macro) (set! bC309c@and-macro (lambda (bC37cf@stx) (let ((bC37d1@t bC37cf@stx)) (let ((bC37d3@ls/false (bC30ba@syntax-dispatch bC37d1@t '(_)))) (if bC37d3@ls/false (apply (lambda () '#t) bC37d3@ls/false) (let ((bC37d5@t bC37d1@t)) (let ((bC37d7@ls/false (bC30ba@syntax-dispatch bC37d5@t '(_ any . each-any)))) (if bC37d7@ls/false (apply (lambda (bC37d9@e bC37da@e*) (bC3070@bless (let bC37e1@f ((bC37dd@e bC37d9@e) (bC37de@e* bC37da@e*)) (if (null? bC37de@e*) (list 'begin '#f bC37dd@e) (cons 'if (cons bC37dd@e (cons (bC37e1@f (car bC37de@e*) (cdr bC37de@e*)) '(#f)))))))) bC37d7@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC37d5@t))))))))) (set! bC4b81@bC309c@and-macro bC309c@and-macro) (set! bC309e@cond-macro (lambda (bC37e3@stx) (let ((bC37e5@t bC37e3@stx)) (let ((bC37e7@ls/false (bC30ba@syntax-dispatch bC37e5@t '(_ any . each-any)))) (if bC37e7@ls/false (apply (lambda (bC37e9@cls bC37ea@cls*) (bC3070@bless (let bC37f1@f ((bC37ed@cls bC37e9@cls) (bC37ee@cls* bC37ea@cls*)) (if (null? bC37ee@cls*) (let ((bC37f3@t bC37ed@cls)) (let ((bC37f5@ls/false (bC30ba@syntax-dispatch bC37f3@t '(#(scheme-id else) any . each-any)))) (if bC37f5@ls/false (apply (lambda (bC37f7@e bC37f8@e*) (cons 'begin (cons bC37f7@e bC37f8@e*))) bC37f5@ls/false) (let ((bC37fb@t bC37f3@t)) (let ((bC37fd@ls/false (bC30ba@syntax-dispatch bC37fb@t '(any #(scheme-id =>) any)))) (if bC37fd@ls/false (apply (lambda (bC37ff@e bC3800@p) (list 'let (list (list 't bC37ff@e)) (list 'if 't (cons bC3800@p '(t))))) bC37fd@ls/false) (let ((bC3803@t bC37fb@t)) (let ((bC3805@ls/false (bC30ba@syntax-dispatch bC3803@t '(any)))) (if bC3805@ls/false (apply (lambda (bC3807@e) (cons 'or (cons bC3807@e '((if #f #f))))) bC3805@ls/false) (let ((bC3809@t bC3803@t)) (let ((bC380b@ls/false (bC30ba@syntax-dispatch bC3809@t '(any . each-any)))) (if bC380b@ls/false (apply (lambda (bC380d@e bC380e@e*) (list 'if bC380d@e (cons 'begin bC380e@e*))) bC380b@ls/false) (let ((bC3811@t bC3809@t)) (let ((bC3813@ls/false (bC30ba@syntax-dispatch bC3811@t '_))) (if bC3813@ls/false (apply (lambda () (bC319a@syntax-violation '#f '"invalid last clause" bC37e3@stx)) bC3813@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3811@t)))))))))))))))) (let ((bC3815@t bC37ed@cls)) (let ((bC3817@ls/false (bC30ba@syntax-dispatch bC3815@t '(#(scheme-id else) any . each-any)))) (if bC3817@ls/false (apply (lambda (bC3819@e bC381a@e*) (bC319a@syntax-violation '#f '"incorrect position of keyword else" bC37e3@stx)) bC3817@ls/false) (let ((bC381d@t bC3815@t)) (let ((bC381f@ls/false (bC30ba@syntax-dispatch bC381d@t '(any #(scheme-id =>) any)))) (if bC381f@ls/false (apply (lambda (bC3821@e bC3822@p) (list 'let (list (list 't bC3821@e)) (list 'if 't (cons bC3822@p '(t)) (bC37f1@f (car bC37ee@cls*) (cdr bC37ee@cls*))))) bC381f@ls/false) (let ((bC3825@t bC381d@t)) (let ((bC3827@ls/false (bC30ba@syntax-dispatch bC3825@t '(any)))) (if bC3827@ls/false (apply (lambda (bC3829@e) (list 'or bC3829@e (bC37f1@f (car bC37ee@cls*) (cdr bC37ee@cls*)))) bC3827@ls/false) (let ((bC382b@t bC3825@t)) (let ((bC382d@ls/false (bC30ba@syntax-dispatch bC382b@t '(any . each-any)))) (if bC382d@ls/false (apply (lambda (bC382f@e bC3830@e*) (list 'if bC382f@e (cons 'begin bC3830@e*) (bC37f1@f (car bC37ee@cls*) (cdr bC37ee@cls*)))) bC382d@ls/false) (let ((bC3833@t bC382b@t)) (let ((bC3835@ls/false (bC30ba@syntax-dispatch bC3833@t '_))) (if bC3835@ls/false (apply (lambda () (bC319a@syntax-violation '#f '"invalid last clause" bC37e3@stx)) bC3835@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3833@t)))))))))))))))))))) bC37e7@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC37e5@t)))))) (set! bC4b82@bC309e@cond-macro bC309e@cond-macro) (set! bC30a0@do-include (lambda (bC3837@stx bC3838@id bC3839@filename) (let ((bC383d@filename (bC2ec7@stx->datum bC3839@filename))) (begin (if (not (and (string? bC383d@filename) (bC2eb3@id? bC3838@id))) (bC319a@syntax-violation '#f '"invalid syntax" bC3837@stx) (void)) (cons (bC3070@bless 'begin) (with-input-from-file bC383d@filename (lambda () (let bC3841@f ((bC383f@ls '())) (let ((bC3843@x (bC29f5@bC28c5@read-annotated))) (if (eof-object? bC3843@x) (reverse bC383f@ls) (bC3841@f (cons (bC2e93@datum->stx bC3838@id bC3843@x) bC383f@ls)))))))))))) (set! bC4b83@bC30a0@do-include bC30a0@do-include) (set! bC30a2@include-macro (lambda (bC3845@e) (let ((bC3847@t bC3845@e)) (let ((bC3849@ls/false (bC30ba@syntax-dispatch bC3847@t '(any any)))) (if bC3849@ls/false (apply (lambda (bC384b@id bC384c@filename) (bC30a0@do-include bC3845@e bC384b@id bC384c@filename)) bC3849@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3847@t)))))) (set! bC4b84@bC30a2@include-macro bC30a2@include-macro) (set! bC30a4@include-into-macro (lambda (bC384f@e) (let ((bC3851@t bC384f@e)) (let ((bC3853@ls/false (bC30ba@syntax-dispatch bC3851@t '(_ any any)))) (if bC3853@ls/false (apply (lambda (bC3855@id bC3856@filename) (bC30a0@do-include bC384f@e bC3855@id bC3856@filename)) bC3853@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3851@t)))))) (set! bC4b85@bC30a4@include-into-macro bC30a4@include-into-macro) (set! bC30a6@syntax-rules-macro (lambda (bC3859@e) (let ((bC385b@t bC3859@e)) (let ((bC385d@ls/false (bC30ba@syntax-dispatch bC385b@t '(_ each-any . #(each (any any)))))) (if bC385d@ls/false (apply (lambda (bC385f@lits bC3860@pat* bC3861@tmp*) (begin (bC30c0@verify-literals bC385f@lits bC3859@e) (bC3070@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons bC385f@lits (map (lambda (bC3865@pat bC3866@tmp) (let ((bC3869@t bC3865@pat)) (let ((bC386b@ls/false (bC30ba@syntax-dispatch bC3869@t '(_ . any)))) (if bC386b@ls/false (apply (lambda (bC386d@rest) (list (cons 'g bC386d@rest) (list 'syntax bC3866@tmp))) bC386b@ls/false) (let ((bC386f@t bC3869@t)) (let ((bC3871@ls/false (bC30ba@syntax-dispatch bC386f@t '_))) (if bC3871@ls/false (apply (lambda () (bC319a@syntax-violation '#f '"invalid syntax-rules pattern" bC3859@e bC3865@pat)) bC3871@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC386f@t)))))))) bC3860@pat* bC3861@tmp*)))))))) bC385d@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC385b@t)))))) (set! bC4b86@bC30a6@syntax-rules-macro bC30a6@syntax-rules-macro) (set! bC30a8@quasiquote-macro (letrec* ((bC3874@datum (lambda (bC3975@x) (list (bC3042@scheme-stx 'quote) (bC2e9b@mkstx bC3975@x '() '() '())))) (bC3890@quasicons* (lambda (bC396d@x bC396e@y) (let bC3973@f ((bC3971@x bC396d@x)) (if (null? bC3971@x) bC396e@y (bC3892@quasicons (car bC3971@x) (bC3973@f (cdr bC3971@x))))))) (bC3892@quasicons (lambda (bC3947@x bC3948@y) (let ((bC394b@t bC3948@y)) (let ((bC394d@ls/false (bC30ba@syntax-dispatch bC394b@t '(#(scheme-id quote) any)))) (if bC394d@ls/false (apply (lambda (bC394f@dy) (let ((bC3951@t bC3947@x)) (let ((bC3953@ls/false (bC30ba@syntax-dispatch bC3951@t '(#(scheme-id quote) any)))) (if bC3953@ls/false (apply (lambda (bC3955@dx) (list (bC3042@scheme-stx 'quote) (cons bC3955@dx bC394f@dy))) bC3953@ls/false) (let ((bC3957@t bC3951@t)) (let ((bC3959@ls/false (bC30ba@syntax-dispatch bC3957@t '_))) (if bC3959@ls/false (apply (lambda () (let ((bC395b@t bC394f@dy)) (let ((bC395d@ls/false (bC30ba@syntax-dispatch bC395b@t '()))) (if bC395d@ls/false (apply (lambda () (list (bC3042@scheme-stx 'list) bC3947@x)) bC395d@ls/false) (let ((bC395f@t bC395b@t)) (let ((bC3961@ls/false (bC30ba@syntax-dispatch bC395f@t '_))) (if bC3961@ls/false (apply (lambda () (list (bC3042@scheme-stx 'cons) bC3947@x bC3948@y)) bC3961@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC395f@t)))))))) bC3959@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3957@t)))))))) bC394d@ls/false) (let ((bC3963@t bC394b@t)) (let ((bC3965@ls/false (bC30ba@syntax-dispatch bC3963@t '(#(scheme-id list) . each-any)))) (if bC3965@ls/false (apply (lambda (bC3967@stuff) (cons* (bC3042@scheme-stx 'list) bC3947@x bC3967@stuff)) bC3965@ls/false) (let ((bC3969@t bC3963@t)) (let ((bC396b@ls/false (bC30ba@syntax-dispatch bC3969@t '_))) (if bC396b@ls/false (apply (lambda () (list (bC3042@scheme-stx 'cons) bC3947@x bC3948@y)) bC396b@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3969@t)))))))))))) (bC3894@quasiappend (lambda (bC392d@x bC392e@y) (let ((bC3931@ls (let bC3935@f ((bC3933@x bC392d@x)) (if (null? bC3933@x) (let ((bC3937@t bC392e@y)) (let ((bC3939@ls/false (bC30ba@syntax-dispatch bC3937@t '(#(scheme-id quote) ())))) (if bC3939@ls/false (apply (lambda () '()) bC3939@ls/false) (let ((bC393b@t bC3937@t)) (let ((bC393d@ls/false (bC30ba@syntax-dispatch bC393b@t '_))) (if bC393d@ls/false (apply (lambda () (list bC392e@y)) bC393d@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC393b@t))))))) (let ((bC393f@t (car bC3933@x))) (let ((bC3941@ls/false (bC30ba@syntax-dispatch bC393f@t '(#(scheme-id quote) ())))) (if bC3941@ls/false (apply (lambda () (bC3935@f (cdr bC3933@x))) bC3941@ls/false) (let ((bC3943@t bC393f@t)) (let ((bC3945@ls/false (bC30ba@syntax-dispatch bC3943@t '_))) (if bC3945@ls/false (apply (lambda () (cons (car bC3933@x) (bC3935@f (cdr bC3933@x)))) bC3945@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3943@t))))))))))) (if (null? bC3931@ls) (list (bC3042@scheme-stx 'quote) '()) (if (null? (cdr bC3931@ls)) (car bC3931@ls) (cons* (bC3042@scheme-stx 'append) bC3931@ls)))))) (bC3896@quasivector (lambda (bC38fb@x) (let ((bC38fd@pat-x bC38fb@x)) (let ((bC38ff@t bC38fd@pat-x)) (let ((bC3901@ls/false (bC30ba@syntax-dispatch bC38ff@t '(#(scheme-id quote) each-any)))) (if bC3901@ls/false (apply (lambda (bC3903@x*) (list (bC3042@scheme-stx 'quote) (list->vector bC3903@x*))) bC3901@ls/false) (let ((bC3905@t bC38ff@t)) (let ((bC3907@ls/false (bC30ba@syntax-dispatch bC3905@t '_))) (if bC3907@ls/false (apply (lambda () (let bC390f@f ((bC3909@x bC38fb@x) (bC390a@k (lambda (bC390d@ls) (cons* (bC3042@scheme-stx 'vector) bC390d@ls)))) (let ((bC3911@t bC3909@x)) (let ((bC3913@ls/false (bC30ba@syntax-dispatch bC3911@t '(#(scheme-id quote) each-any)))) (if bC3913@ls/false (apply (lambda (bC3915@x*) (bC390a@k (map (lambda (bC3917@x) (list (bC3042@scheme-stx 'quote) bC3917@x)) bC3915@x*))) bC3913@ls/false) (let ((bC3919@t bC3911@t)) (let ((bC391b@ls/false (bC30ba@syntax-dispatch bC3919@t '(#(scheme-id list) . each-any)))) (if bC391b@ls/false (apply (lambda (bC391d@x*) (bC390a@k bC391d@x*)) bC391b@ls/false) (let ((bC391f@t bC3919@t)) (let ((bC3921@ls/false (bC30ba@syntax-dispatch bC391f@t '(#(scheme-id cons) any any)))) (if bC3921@ls/false (apply (lambda (bC3923@x bC3924@y) (bC390f@f bC3924@y (lambda (bC3927@ls) (bC390a@k (cons bC3923@x bC3927@ls))))) bC3921@ls/false) (let ((bC3929@t bC391f@t)) (let ((bC392b@ls/false (bC30ba@syntax-dispatch bC3929@t '_))) (if bC392b@ls/false (apply (lambda () (list (bC3042@scheme-stx 'list->vector) bC38fd@pat-x)) bC392b@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3929@t))))))))))))))) bC3907@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3905@t)))))))))) (bC3898@vquasi (lambda (bC38d9@p bC38da@lev) (let ((bC38dd@t bC38d9@p)) (let ((bC38df@ls/false (bC30ba@syntax-dispatch bC38dd@t '(any . any)))) (if bC38df@ls/false (apply (lambda (bC38e1@p bC38e2@q) (let ((bC38e5@t bC38e1@p)) (let ((bC38e7@ls/false (bC30ba@syntax-dispatch bC38e5@t '(#(scheme-id unquote) . each-any)))) (if bC38e7@ls/false (apply (lambda (bC38e9@p) (if (= bC38da@lev '0) (bC3890@quasicons* bC38e9@p (bC3898@vquasi bC38e2@q bC38da@lev)) (bC3892@quasicons (bC3892@quasicons (bC3874@datum 'unquote) (bC389a@quasi bC38e9@p (- bC38da@lev '1))) (bC3898@vquasi bC38e2@q bC38da@lev)))) bC38e7@ls/false) (let ((bC38eb@t bC38e5@t)) (let ((bC38ed@ls/false (bC30ba@syntax-dispatch bC38eb@t '(#(scheme-id unquote-splicing) . each-any)))) (if bC38ed@ls/false (apply (lambda (bC38ef@p) (if (= bC38da@lev '0) (bC3894@quasiappend bC38ef@p (bC3898@vquasi bC38e2@q bC38da@lev)) (bC3892@quasicons (bC3892@quasicons (bC3874@datum 'unquote-splicing) (bC389a@quasi bC38ef@p (- bC38da@lev '1))) (bC3898@vquasi bC38e2@q bC38da@lev)))) bC38ed@ls/false) (let ((bC38f1@t bC38eb@t)) (let ((bC38f3@ls/false (bC30ba@syntax-dispatch bC38f1@t 'any))) (if bC38f3@ls/false (apply (lambda (bC38f5@p) (bC3892@quasicons (bC389a@quasi bC38f5@p bC38da@lev) (bC3898@vquasi bC38e2@q bC38da@lev))) bC38f3@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC38f1@t))))))))))) bC38df@ls/false) (let ((bC38f7@t bC38dd@t)) (let ((bC38f9@ls/false (bC30ba@syntax-dispatch bC38f7@t '()))) (if bC38f9@ls/false (apply (lambda () (list (bC3042@scheme-stx 'quote) '())) bC38f9@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC38f7@t))))))))) (bC389a@quasi (lambda (bC38a3@p bC38a4@lev) (let ((bC38a7@t bC38a3@p)) (let ((bC38a9@ls/false (bC30ba@syntax-dispatch bC38a7@t '(#(scheme-id unquote) any)))) (if bC38a9@ls/false (apply (lambda (bC38ab@p) (if (= bC38a4@lev '0) bC38ab@p (bC3892@quasicons (bC3874@datum 'unquote) (bC389a@quasi (list bC38ab@p) (- bC38a4@lev '1))))) bC38a9@ls/false) (let ((bC38ad@t bC38a7@t)) (let ((bC38af@ls/false (bC30ba@syntax-dispatch bC38ad@t '((#(scheme-id unquote) . each-any) . any)))) (if bC38af@ls/false (apply (lambda (bC38b1@p bC38b2@q) (if (= bC38a4@lev '0) (bC3890@quasicons* bC38b1@p (bC389a@quasi bC38b2@q bC38a4@lev)) (bC3892@quasicons (bC3892@quasicons (bC3874@datum 'unquote) (bC389a@quasi bC38b1@p (- bC38a4@lev '1))) (bC389a@quasi bC38b2@q bC38a4@lev)))) bC38af@ls/false) (let ((bC38b5@t bC38ad@t)) (let ((bC38b7@ls/false (bC30ba@syntax-dispatch bC38b5@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if bC38b7@ls/false (apply (lambda (bC38b9@p bC38ba@q) (if (= bC38a4@lev '0) (bC3894@quasiappend bC38b9@p (bC389a@quasi bC38ba@q bC38a4@lev)) (bC3892@quasicons (bC3892@quasicons (bC3874@datum 'unquote-splicing) (bC389a@quasi bC38b9@p (- bC38a4@lev '1))) (bC389a@quasi bC38ba@q bC38a4@lev)))) bC38b7@ls/false) (let ((bC38bd@t bC38b5@t)) (let ((bC38bf@ls/false (bC30ba@syntax-dispatch bC38bd@t '(#(scheme-id quasiquote) any)))) (if bC38bf@ls/false (apply (lambda (bC38c1@p) (bC3892@quasicons (bC3874@datum 'quasiquote) (bC389a@quasi (list bC38c1@p) (+ bC38a4@lev '1)))) bC38bf@ls/false) (let ((bC38c3@t bC38bd@t)) (let ((bC38c5@ls/false (bC30ba@syntax-dispatch bC38c3@t '(any . any)))) (if bC38c5@ls/false (apply (lambda (bC38c7@p bC38c8@q) (bC3892@quasicons (bC389a@quasi bC38c7@p bC38a4@lev) (bC389a@quasi bC38c8@q bC38a4@lev))) bC38c5@ls/false) (let ((bC38cb@t bC38c3@t)) (let ((bC38cd@ls/false (bC30ba@syntax-dispatch bC38cb@t '#(vector each-any)))) (if (and bC38cd@ls/false (apply (lambda (bC38cf@x) (not (bC2e7f@stx? bC38cf@x))) bC38cd@ls/false)) (apply (lambda (bC38d1@x) (bC3896@quasivector (bC3898@vquasi bC38d1@x bC38a4@lev))) bC38cd@ls/false) (let ((bC38d3@t bC38cb@t)) (let ((bC38d5@ls/false (bC30ba@syntax-dispatch bC38d3@t 'any))) (if bC38d5@ls/false (apply (lambda (bC38d7@p) (list (bC3042@scheme-stx 'quote) bC38d7@p)) bC38d5@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC38d3@t))))))))))))))))))))))))) (lambda (bC389b@x) (let ((bC389d@t bC389b@x)) (let ((bC389f@ls/false (bC30ba@syntax-dispatch bC389d@t '(_ any)))) (if bC389f@ls/false (apply (lambda (bC38a1@e) (bC389a@quasi bC38a1@e '0)) bC389f@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC389d@t))))))) (set! bC4b87@bC30a8@quasiquote-macro bC30a8@quasiquote-macro) (set! bC30aa@quasisyntax-macro (letrec* ((bC3978@quasi (lambda (bC3993@p bC3994@lev) (let ((bC3997@t bC3993@p)) (let ((bC3999@ls/false (bC30ba@syntax-dispatch bC3997@t '(#(scheme-id unsyntax) any)))) (if bC3999@ls/false (apply (lambda (bC399b@p) (if (= bC3994@lev '0) (let ((bC399d@g (gensym))) (values (list bC399d@g) (list bC399b@p) bC399d@g)) (call-with-values (lambda () (bC3978@quasi bC399b@p (- bC3994@lev '1))) (lambda (bC39a5@bC39a0 bC39a6@bC39a2 bC39a7@bC39a4) (let ((bC39ab@p bC39a7@bC39a4) (bC39ac@rhs* bC39a6@bC39a2) (bC39ad@lhs* bC39a5@bC39a0)) (values bC39ad@lhs* bC39ac@rhs* (list 'unsyntax bC39ab@p))))))) bC3999@ls/false) (let ((bC39b1@t bC3997@t)) (let ((bC39b3@ls/false (bC30ba@syntax-dispatch bC39b1@t '#(scheme-id unsyntax)))) (if (and bC39b3@ls/false (apply (lambda () (= bC3994@lev '0)) bC39b3@ls/false)) (apply (lambda () (bC319a@syntax-violation '#f '"incorrect use of unsyntax" bC3993@p)) bC39b3@ls/false) (let ((bC39b5@t bC39b1@t)) (let ((bC39b7@ls/false (bC30ba@syntax-dispatch bC39b5@t '((#(scheme-id unsyntax) . each-any) . any)))) (if bC39b7@ls/false (apply (lambda (bC39b9@p* bC39ba@q) (call-with-values (lambda () (bC3978@quasi bC39ba@q bC3994@lev)) (lambda (bC39c3@bC39be bC39c4@bC39c0 bC39c5@bC39c2) (let ((bC39c9@q bC39c5@bC39c2) (bC39ca@rhs* bC39c4@bC39c0) (bC39cb@lhs* bC39c3@bC39be)) (if (= bC3994@lev '0) (let ((bC39cf@g* (map (lambda (bC39d1@x) (gensym)) bC39b9@p*))) (values (append bC39cf@g* bC39cb@lhs*) (append bC39b9@p* bC39ca@rhs*) (append bC39cf@g* bC39c9@q))) (call-with-values (lambda () (bC3978@quasi bC39b9@p* (- bC3994@lev '1))) (lambda (bC39d9@bC39d4 bC39da@bC39d6 bC39db@bC39d8) (let ((bC39df@p* bC39db@bC39d8) (bC39e0@rhs2* bC39da@bC39d6) (bC39e1@lhs2* bC39d9@bC39d4)) (values (append bC39e1@lhs2* bC39cb@lhs*) (append bC39e0@rhs2* bC39ca@rhs*) (cons (cons 'unsyntax bC39df@p*) bC39c9@q)))))))))) bC39b7@ls/false) (let ((bC39e5@t bC39b5@t)) (let ((bC39e7@ls/false (bC30ba@syntax-dispatch bC39e5@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if bC39e7@ls/false (apply (lambda (bC39e9@p* bC39ea@q) (call-with-values (lambda () (bC3978@quasi bC39ea@q bC3994@lev)) (lambda (bC39f3@bC39ee bC39f4@bC39f0 bC39f5@bC39f2) (let ((bC39f9@q bC39f5@bC39f2) (bC39fa@rhs* bC39f4@bC39f0) (bC39fb@lhs* bC39f3@bC39ee)) (if (= bC3994@lev '0) (let ((bC39ff@g* (map (lambda (bC3a01@x) (gensym)) bC39e9@p*))) (values (append (map (lambda (bC3a03@g) (cons bC3a03@g '(...))) bC39ff@g*) bC39fb@lhs*) (append bC39e9@p* bC39fa@rhs*) (append (apply append (map (lambda (bC3a05@g) (cons bC3a05@g '(...))) bC39ff@g*)) bC39f9@q))) (call-with-values (lambda () (bC3978@quasi bC39e9@p* (- bC3994@lev '1))) (lambda (bC3a0d@bC3a08 bC3a0e@bC3a0a bC3a0f@bC3a0c) (let ((bC3a13@p* bC3a0f@bC3a0c) (bC3a14@rhs2* bC3a0e@bC3a0a) (bC3a15@lhs2* bC3a0d@bC3a08)) (values (append bC3a15@lhs2* bC39fb@lhs*) (append bC3a14@rhs2* bC39fa@rhs*) (cons (cons 'unsyntax-splicing bC3a13@p*) bC39f9@q)))))))))) bC39e7@ls/false) (let ((bC3a19@t bC39e5@t)) (let ((bC3a1b@ls/false (bC30ba@syntax-dispatch bC3a19@t '#(scheme-id unsyntax-splicing)))) (if (and bC3a1b@ls/false (apply (lambda () (= bC3994@lev '0)) bC3a1b@ls/false)) (apply (lambda () (bC319a@syntax-violation '#f '"incorrect use of unsyntax-splicing" bC3993@p)) bC3a1b@ls/false) (let ((bC3a1d@t bC3a19@t)) (let ((bC3a1f@ls/false (bC30ba@syntax-dispatch bC3a1d@t '(#(scheme-id quasisyntax) any)))) (if bC3a1f@ls/false (apply (lambda (bC3a21@p) (call-with-values (lambda () (bC3978@quasi bC3a21@p (+ bC3994@lev '1))) (lambda (bC3a29@bC3a24 bC3a2a@bC3a26 bC3a2b@bC3a28) (let ((bC3a2f@p bC3a2b@bC3a28) (bC3a30@rhs* bC3a2a@bC3a26) (bC3a31@lhs* bC3a29@bC3a24)) (values bC3a31@lhs* bC3a30@rhs* (list 'quasisyntax bC3a2f@p)))))) bC3a1f@ls/false) (let ((bC3a35@t bC3a1d@t)) (let ((bC3a37@ls/false (bC30ba@syntax-dispatch bC3a35@t '(any . any)))) (if bC3a37@ls/false (apply (lambda (bC3a39@p bC3a3a@q) (call-with-values (lambda () (bC3978@quasi bC3a39@p bC3994@lev)) (lambda (bC3a49@bC3a3e bC3a4a@bC3a40 bC3a4b@bC3a42) (call-with-values (lambda () (bC3978@quasi bC3a3a@q bC3994@lev)) (lambda (bC3a4f@bC3a44 bC3a50@bC3a46 bC3a51@bC3a48) (let ((bC3a55@q bC3a51@bC3a48) (bC3a56@rhs2* bC3a50@bC3a46) (bC3a57@lhs2* bC3a4f@bC3a44) (bC3a58@p bC3a4b@bC3a42) (bC3a59@rhs* bC3a4a@bC3a40) (bC3a5a@lhs* bC3a49@bC3a3e)) (values (append bC3a57@lhs2* bC3a5a@lhs*) (append bC3a56@rhs2* bC3a59@rhs*) (cons bC3a58@p bC3a55@q)))))))) bC3a37@ls/false) (let ((bC3a61@t bC3a35@t)) (let ((bC3a63@ls/false (bC30ba@syntax-dispatch bC3a61@t '#(vector each-any)))) (if bC3a63@ls/false (apply (lambda (bC3a65@x*) (call-with-values (lambda () (bC3978@quasi bC3a65@x* bC3994@lev)) (lambda (bC3a6d@bC3a68 bC3a6e@bC3a6a bC3a6f@bC3a6c) (let ((bC3a73@x* bC3a6f@bC3a6c) (bC3a74@rhs* bC3a6e@bC3a6a) (bC3a75@lhs* bC3a6d@bC3a68)) (values bC3a75@lhs* bC3a74@rhs* (list->vector bC3a73@x*)))))) bC3a63@ls/false) (let ((bC3a79@t bC3a61@t)) (let ((bC3a7b@ls/false (bC30ba@syntax-dispatch bC3a79@t '_))) (if bC3a7b@ls/false (apply (lambda () (values '() '() bC3993@p)) bC3a7b@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3a79@t))))))))))))))))))))))))))))))) (lambda (bC3979@x) (let ((bC397b@t bC3979@x)) (let ((bC397d@ls/false (bC30ba@syntax-dispatch bC397b@t '(_ any)))) (if bC397d@ls/false (apply (lambda (bC397f@e) (call-with-values (lambda () (bC3978@quasi bC397f@e '0)) (lambda (bC3987@bC3982 bC3988@bC3984 bC3989@bC3986) (let ((bC398d@v bC3989@bC3986) (bC398e@rhs* bC3988@bC3984) (bC398f@lhs* bC3987@bC3982)) (bC3070@bless (list 'syntax-case (cons 'list bC398e@rhs*) '() (list bC398f@lhs* (list 'syntax bC398d@v)))))))) bC397d@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC397b@t))))))) (set! bC4b88@bC30aa@quasisyntax-macro bC30aa@quasisyntax-macro) (set! bC30ac@define-struct-macro (lambda (bC3a7d@stx) (bC319a@syntax-violation '#f '"define-struct not supported" bC3a7d@stx))) (set! bC4b89@bC30ac@define-struct-macro bC30ac@define-struct-macro) (set! bC30ae@define-record-type-macro (lambda (bC3a7f@x) (letrec* ((bC3a82@id (lambda (bC3c75@ctxt . bC3c77@str*) (bC319e@datum->syntax bC3c75@ctxt (string->symbol (apply string-append (map (lambda (bC3c79@x) (if (symbol? bC3c79@x) (symbol->string bC3c79@x) (if (string? bC3c79@x) bC3c79@x (assertion-violation 'define-record-type '"BUG")))) bC3c77@str*)))))) (bC3a84@get-record-name (lambda (bC3c63@spec) (let ((bC3c65@t bC3c63@spec)) (let ((bC3c67@ls/false (bC30ba@syntax-dispatch bC3c65@t '(any any any)))) (if bC3c67@ls/false (apply (lambda (bC3c69@foo bC3c6a@make-foo bC3c6b@foo?) bC3c69@foo) bC3c67@ls/false) (let ((bC3c6f@t bC3c65@t)) (let ((bC3c71@ls/false (bC30ba@syntax-dispatch bC3c6f@t 'any))) (if bC3c71@ls/false (apply (lambda (bC3c73@foo) bC3c73@foo) bC3c71@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3c6f@t))))))))) (bC3a86@get-record-constructor-name (lambda (bC3c4f@spec) (let ((bC3c51@t bC3c4f@spec)) (let ((bC3c53@ls/false (bC30ba@syntax-dispatch bC3c51@t '(any any any)))) (if bC3c53@ls/false (apply (lambda (bC3c55@foo bC3c56@make-foo bC3c57@foo?) bC3c56@make-foo) bC3c53@ls/false) (let ((bC3c5b@t bC3c51@t)) (let ((bC3c5d@ls/false (bC30ba@syntax-dispatch bC3c5b@t 'any))) (if (and bC3c5d@ls/false (apply (lambda (bC3c5f@foo) (bC2eb3@id? bC3c5f@foo)) bC3c5d@ls/false)) (apply (lambda (bC3c61@foo) (bC3a82@id bC3c61@foo '"make-" (bC2ec7@stx->datum bC3c61@foo))) bC3c5d@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3c5b@t))))))))) (bC3a88@get-record-predicate-name (lambda (bC3c3b@spec) (let ((bC3c3d@t bC3c3b@spec)) (let ((bC3c3f@ls/false (bC30ba@syntax-dispatch bC3c3d@t '(any any any)))) (if bC3c3f@ls/false (apply (lambda (bC3c41@foo bC3c42@make-foo bC3c43@foo?) bC3c43@foo?) bC3c3f@ls/false) (let ((bC3c47@t bC3c3d@t)) (let ((bC3c49@ls/false (bC30ba@syntax-dispatch bC3c47@t 'any))) (if (and bC3c49@ls/false (apply (lambda (bC3c4b@foo) (bC2eb3@id? bC3c4b@foo)) bC3c49@ls/false)) (apply (lambda (bC3c4d@foo) (bC3a82@id bC3c4d@foo (bC2ec7@stx->datum bC3c4d@foo) '"?")) bC3c49@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3c47@t))))))))) (bC3a8a@get-clause (lambda (bC3c29@id bC3c2a@ls) (let ((bC3c2d@t bC3c2a@ls)) (let ((bC3c2f@ls/false (bC30ba@syntax-dispatch bC3c2d@t '()))) (if bC3c2f@ls/false (apply (lambda () '#f) bC3c2f@ls/false) (let ((bC3c31@t bC3c2d@t)) (let ((bC3c33@ls/false (bC30ba@syntax-dispatch bC3c31@t '((any . any) . any)))) (if bC3c33@ls/false (apply (lambda (bC3c35@x bC3c36@rest bC3c37@ls) (if (bC2eb9@free-id=? (bC3070@bless bC3c29@id) bC3c35@x) (cons bC3c35@x bC3c36@rest) (bC3a8a@get-clause bC3c29@id bC3c37@ls))) bC3c33@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3c31@t))))))))) (bC3a8c@foo-rtd-code (lambda (bC3bd7@name bC3bd8@clause* bC3bd9@parent-rtd-code) (letrec* ((bC3bde@convert-field-spec* (lambda (bC3c0f@ls) (list->vector (map (lambda (bC3c11@x) (let ((bC3c13@t bC3c11@x)) (let ((bC3c15@ls/false (bC30ba@syntax-dispatch bC3c13@t '(#(scheme-id mutable) any . any)))) (if bC3c15@ls/false (apply (lambda (bC3c17@name bC3c18@rest) (list 'mutable bC3c17@name)) bC3c15@ls/false) (let ((bC3c1b@t bC3c13@t)) (let ((bC3c1d@ls/false (bC30ba@syntax-dispatch bC3c1b@t '(#(scheme-id immutable) any . any)))) (if bC3c1d@ls/false (apply (lambda (bC3c1f@name bC3c20@rest) (list 'immutable bC3c1f@name)) bC3c1d@ls/false) (let ((bC3c23@t bC3c1b@t)) (let ((bC3c25@ls/false (bC30ba@syntax-dispatch bC3c23@t 'any))) (if bC3c25@ls/false (apply (lambda (bC3c27@name) (list 'immutable bC3c27@name)) bC3c25@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3c23@t))))))))))) bC3c0f@ls))))) (let ((bC3bdf@uid-code (let ((bC3be7@t (bC3a8a@get-clause 'nongenerative bC3bd8@clause*))) (let ((bC3be9@ls/false (bC30ba@syntax-dispatch bC3be7@t '(_)))) (if bC3be9@ls/false (apply (lambda () (list 'quote (gensym))) bC3be9@ls/false) (let ((bC3beb@t bC3be7@t)) (let ((bC3bed@ls/false (bC30ba@syntax-dispatch bC3beb@t '(_ any)))) (if bC3bed@ls/false (apply (lambda (bC3bef@uid) (list 'quote bC3bef@uid)) bC3bed@ls/false) (let ((bC3bf1@t bC3beb@t)) (let ((bC3bf3@ls/false (bC30ba@syntax-dispatch bC3bf1@t '_))) (if bC3bf3@ls/false (apply (lambda () '#f) bC3bf3@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3bf1@t))))))))))) (bC3be0@sealed? (let ((bC3bf5@t (bC3a8a@get-clause 'sealed bC3bd8@clause*))) (let ((bC3bf7@ls/false (bC30ba@syntax-dispatch bC3bf5@t '(_ #(atom #t))))) (if bC3bf7@ls/false (apply (lambda () '#t) bC3bf7@ls/false) (let ((bC3bf9@t bC3bf5@t)) (let ((bC3bfb@ls/false (bC30ba@syntax-dispatch bC3bf9@t '_))) (if bC3bfb@ls/false (apply (lambda () '#f) bC3bfb@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3bf9@t)))))))) (bC3be1@opaque? (let ((bC3bfd@t (bC3a8a@get-clause 'opaque bC3bd8@clause*))) (let ((bC3bff@ls/false (bC30ba@syntax-dispatch bC3bfd@t '(_ #(atom #t))))) (if bC3bff@ls/false (apply (lambda () '#t) bC3bff@ls/false) (let ((bC3c01@t bC3bfd@t)) (let ((bC3c03@ls/false (bC30ba@syntax-dispatch bC3c01@t '_))) (if bC3c03@ls/false (apply (lambda () '#f) bC3c03@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3c01@t)))))))) (bC3be2@fields (let ((bC3c05@t (bC3a8a@get-clause 'fields bC3bd8@clause*))) (let ((bC3c07@ls/false (bC30ba@syntax-dispatch bC3c05@t '(_ . each-any)))) (if bC3c07@ls/false (apply (lambda (bC3c09@field-spec*) (list 'quote (bC3bde@convert-field-spec* bC3c09@field-spec*))) bC3c07@ls/false) (let ((bC3c0b@t bC3c05@t)) (let ((bC3c0d@ls/false (bC30ba@syntax-dispatch bC3c0b@t '_))) (if bC3c0d@ls/false (apply (lambda () ''#()) bC3c0d@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3c0b@t))))))))) (bC3070@bless (list 'make-record-type-descriptor (list 'quote bC3bd7@name) bC3bd9@parent-rtd-code bC3bdf@uid-code bC3be0@sealed? bC3be1@opaque? bC3be2@fields)))))) (bC3a8e@parent-rtd-code (lambda (bC3bbf@clause*) (let ((bC3bc1@t (bC3a8a@get-clause 'parent bC3bbf@clause*))) (let ((bC3bc3@ls/false (bC30ba@syntax-dispatch bC3bc1@t '(_ any)))) (if bC3bc3@ls/false (apply (lambda (bC3bc5@name) (list 'record-type-descriptor bC3bc5@name)) bC3bc3@ls/false) (let ((bC3bc7@t bC3bc1@t)) (let ((bC3bc9@ls/false (bC30ba@syntax-dispatch bC3bc7@t '#(atom #f)))) (if bC3bc9@ls/false (apply (lambda () (let ((bC3bcb@t (bC3a8a@get-clause 'parent-rtd bC3bbf@clause*))) (let ((bC3bcd@ls/false (bC30ba@syntax-dispatch bC3bcb@t '(_ any any)))) (if bC3bcd@ls/false (apply (lambda (bC3bcf@rtd bC3bd0@rcd) bC3bcf@rtd) bC3bcd@ls/false) (let ((bC3bd3@t bC3bcb@t)) (let ((bC3bd5@ls/false (bC30ba@syntax-dispatch bC3bd3@t '#(atom #f)))) (if bC3bd5@ls/false (apply (lambda () '#f) bC3bd5@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3bd3@t)))))))) bC3bc9@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3bc7@t))))))))) (bC3a90@parent-rcd-code (lambda (bC3ba7@clause*) (let ((bC3ba9@t (bC3a8a@get-clause 'parent bC3ba7@clause*))) (let ((bC3bab@ls/false (bC30ba@syntax-dispatch bC3ba9@t '(_ any)))) (if bC3bab@ls/false (apply (lambda (bC3bad@name) (list 'record-constructor-descriptor bC3bad@name)) bC3bab@ls/false) (let ((bC3baf@t bC3ba9@t)) (let ((bC3bb1@ls/false (bC30ba@syntax-dispatch bC3baf@t '#(atom #f)))) (if bC3bb1@ls/false (apply (lambda () (let ((bC3bb3@t (bC3a8a@get-clause 'parent-rtd bC3ba7@clause*))) (let ((bC3bb5@ls/false (bC30ba@syntax-dispatch bC3bb3@t '(_ any any)))) (if bC3bb5@ls/false (apply (lambda (bC3bb7@rtd bC3bb8@rcd) bC3bb8@rcd) bC3bb5@ls/false) (let ((bC3bbb@t bC3bb3@t)) (let ((bC3bbd@ls/false (bC30ba@syntax-dispatch bC3bbb@t '#(atom #f)))) (if bC3bbd@ls/false (apply (lambda () '#f) bC3bbd@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3bbb@t)))))))) bC3bb1@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3baf@t))))))))) (bC3a92@foo-rcd-code (lambda (bC3b9f@clause* bC3ba0@foo-rtd bC3ba1@protocol bC3ba2@parent-rcd-code) (list 'make-record-constructor-descriptor bC3ba0@foo-rtd bC3ba2@parent-rcd-code bC3ba1@protocol))) (bC3a94@get-protocol-code (lambda (bC3b93@clause*) (let ((bC3b95@t (bC3a8a@get-clause 'protocol bC3b93@clause*))) (let ((bC3b97@ls/false (bC30ba@syntax-dispatch bC3b95@t '(_ any)))) (if bC3b97@ls/false (apply (lambda (bC3b99@expr) bC3b99@expr) bC3b97@ls/false) (let ((bC3b9b@t bC3b95@t)) (let ((bC3b9d@ls/false (bC30ba@syntax-dispatch bC3b9b@t '_))) (if bC3b9d@ls/false (apply (lambda () '#f) bC3b9d@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3b9b@t))))))))) (bC3a96@get-fields (lambda (bC3b81@clause*) (let ((bC3b83@t bC3b81@clause*)) (let ((bC3b85@ls/false (bC30ba@syntax-dispatch bC3b83@t '()))) (if bC3b85@ls/false (apply (lambda () '()) bC3b85@ls/false) (let ((bC3b87@t bC3b83@t)) (let ((bC3b89@ls/false (bC30ba@syntax-dispatch bC3b87@t '((#(scheme-id fields) . each-any) . _)))) (if bC3b89@ls/false (apply (lambda (bC3b8b@f*) bC3b8b@f*) bC3b89@ls/false) (let ((bC3b8d@t bC3b87@t)) (let ((bC3b8f@ls/false (bC30ba@syntax-dispatch bC3b8d@t '(_ . any)))) (if bC3b8f@ls/false (apply (lambda (bC3b91@rest) (bC3a96@get-fields bC3b91@rest)) bC3b8f@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3b8d@t)))))))))))) (bC3a98@get-mutator-indices (lambda (bC3b69@fields) (let bC3b6f@f ((bC3b6b@fields bC3b69@fields) (bC3b6c@i '0)) (let ((bC3b71@t bC3b6b@fields)) (let ((bC3b73@ls/false (bC30ba@syntax-dispatch bC3b71@t '()))) (if bC3b73@ls/false (apply (lambda () '()) bC3b73@ls/false) (let ((bC3b75@t bC3b71@t)) (let ((bC3b77@ls/false (bC30ba@syntax-dispatch bC3b75@t '((#(scheme-id mutable) . _) . any)))) (if bC3b77@ls/false (apply (lambda (bC3b79@rest) (cons bC3b6c@i (bC3b6f@f bC3b79@rest (+ bC3b6c@i '1)))) bC3b77@ls/false) (let ((bC3b7b@t bC3b75@t)) (let ((bC3b7d@ls/false (bC30ba@syntax-dispatch bC3b7b@t '(_ . any)))) (if bC3b7d@ls/false (apply (lambda (bC3b7f@rest) (bC3b6f@f bC3b7f@rest (+ bC3b6c@i '1))) bC3b7d@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3b7b@t))))))))))))) (bC3a9a@get-mutators (lambda (bC3b3f@foo bC3b40@fields) (letrec* ((bC3b44@gen-name (lambda (bC3b67@x) (bC319e@datum->syntax bC3b3f@foo (string->symbol (string-append (symbol->string (bC31a0@syntax->datum bC3b3f@foo)) '"-" (symbol->string (bC31a0@syntax->datum bC3b67@x)) '"-set!")))))) (let bC3b47@f ((bC3b45@fields bC3b40@fields)) (let ((bC3b49@t bC3b45@fields)) (let ((bC3b4b@ls/false (bC30ba@syntax-dispatch bC3b49@t '()))) (if bC3b4b@ls/false (apply (lambda () '()) bC3b4b@ls/false) (let ((bC3b4d@t bC3b49@t)) (let ((bC3b4f@ls/false (bC30ba@syntax-dispatch bC3b4d@t '((#(scheme-id mutable) any any any) . any)))) (if bC3b4f@ls/false (apply (lambda (bC3b51@name bC3b52@accessor bC3b53@mutator bC3b54@rest) (cons bC3b53@mutator (bC3b47@f bC3b54@rest))) bC3b4f@ls/false) (let ((bC3b59@t bC3b4d@t)) (let ((bC3b5b@ls/false (bC30ba@syntax-dispatch bC3b59@t '((#(scheme-id mutable) any) . any)))) (if bC3b5b@ls/false (apply (lambda (bC3b5d@name bC3b5e@rest) (cons (bC3b44@gen-name bC3b5d@name) (bC3b47@f bC3b5e@rest))) bC3b5b@ls/false) (let ((bC3b61@t bC3b59@t)) (let ((bC3b63@ls/false (bC30ba@syntax-dispatch bC3b61@t '(_ . any)))) (if bC3b63@ls/false (apply (lambda (bC3b65@rest) (bC3b47@f bC3b65@rest)) bC3b63@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3b61@t))))))))))))))))) (bC3a9c@get-accessors (lambda (bC3afb@foo bC3afc@fields) (letrec* ((bC3b00@gen-name (lambda (bC3b3d@x) (bC319e@datum->syntax bC3afb@foo (string->symbol (string-append (symbol->string (bC31a0@syntax->datum bC3afb@foo)) '"-" (symbol->string (bC31a0@syntax->datum bC3b3d@x)))))))) (map (lambda (bC3b01@field) (let ((bC3b03@t bC3b01@field)) (let ((bC3b05@ls/false (bC30ba@syntax-dispatch bC3b03@t '(#(scheme-id mutable) any any any)))) (if (and bC3b05@ls/false (apply (lambda (bC3b07@name bC3b08@accessor bC3b09@mutator) (bC2eb3@id? bC3b08@accessor)) bC3b05@ls/false)) (apply (lambda (bC3b0d@name bC3b0e@accessor bC3b0f@mutator) bC3b0e@accessor) bC3b05@ls/false) (let ((bC3b13@t bC3b03@t)) (let ((bC3b15@ls/false (bC30ba@syntax-dispatch bC3b13@t '(#(scheme-id immutable) any any)))) (if (and bC3b15@ls/false (apply (lambda (bC3b17@name bC3b18@accessor) (bC2eb3@id? bC3b18@accessor)) bC3b15@ls/false)) (apply (lambda (bC3b1b@name bC3b1c@accessor) bC3b1c@accessor) bC3b15@ls/false) (let ((bC3b1f@t bC3b13@t)) (let ((bC3b21@ls/false (bC30ba@syntax-dispatch bC3b1f@t '(#(scheme-id mutable) any)))) (if (and bC3b21@ls/false (apply (lambda (bC3b23@name) (bC2eb3@id? bC3b23@name)) bC3b21@ls/false)) (apply (lambda (bC3b25@name) (bC3b00@gen-name bC3b25@name)) bC3b21@ls/false) (let ((bC3b27@t bC3b1f@t)) (let ((bC3b29@ls/false (bC30ba@syntax-dispatch bC3b27@t '(#(scheme-id immutable) any)))) (if (and bC3b29@ls/false (apply (lambda (bC3b2b@name) (bC2eb3@id? bC3b2b@name)) bC3b29@ls/false)) (apply (lambda (bC3b2d@name) (bC3b00@gen-name bC3b2d@name)) bC3b29@ls/false) (let ((bC3b2f@t bC3b27@t)) (let ((bC3b31@ls/false (bC30ba@syntax-dispatch bC3b2f@t 'any))) (if (and bC3b31@ls/false (apply (lambda (bC3b33@name) (bC2eb3@id? bC3b33@name)) bC3b31@ls/false)) (apply (lambda (bC3b35@name) (bC3b00@gen-name bC3b35@name)) bC3b31@ls/false) (let ((bC3b37@t bC3b2f@t)) (let ((bC3b39@ls/false (bC30ba@syntax-dispatch bC3b37@t 'any))) (if bC3b39@ls/false (apply (lambda (bC3b3b@others) (bC319a@syntax-violation '#f '"invalid field spec" bC3b01@field)) bC3b39@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3b37@t)))))))))))))))))))) bC3afc@fields)))) (bC3a9e@enumerate (lambda (bC3af3@ls) (let bC3af9@f ((bC3af5@ls bC3af3@ls) (bC3af6@i '0)) (if (null? bC3af5@ls) '() (cons bC3af6@i (bC3af9@f (cdr bC3af5@ls) (+ bC3af6@i '1))))))) (bC3aa0@do-define-record (lambda (bC3acb@namespec bC3acc@clause*) (let ((bC3acf@foo (bC3a84@get-record-name bC3acb@namespec))) (let ((bC3ad1@foo-rtd (gensym))) (let ((bC3ad3@foo-rcd (gensym))) (let ((bC3ad5@protocol (gensym))) (let ((bC3ad7@make-foo (bC3a86@get-record-constructor-name bC3acb@namespec))) (let ((bC3ad9@fields (bC3a96@get-fields bC3acc@clause*))) (let ((bC3adb@idx* (bC3a9e@enumerate bC3ad9@fields))) (let ((bC3add@foo-x* (bC3a9c@get-accessors bC3acf@foo bC3ad9@fields))) (let ((bC3adf@set-foo-x!* (bC3a9a@get-mutators bC3acf@foo bC3ad9@fields))) (let ((bC3ae1@set-foo-idx* (bC3a98@get-mutator-indices bC3ad9@fields))) (let ((bC3ae3@foo? (bC3a88@get-record-predicate-name bC3acb@namespec))) (let ((bC3ae5@foo-rtd-code (bC3a8c@foo-rtd-code bC3acf@foo bC3acc@clause* (bC3a8e@parent-rtd-code bC3acc@clause*)))) (let ((bC3ae7@foo-rcd-code (bC3a92@foo-rcd-code bC3acc@clause* bC3ad1@foo-rtd bC3ad5@protocol (bC3a90@parent-rcd-code bC3acc@clause*)))) (let ((bC3ae9@protocol-code (bC3a94@get-protocol-code bC3acc@clause*))) (bC3070@bless (cons 'begin (cons (list 'define bC3ad1@foo-rtd bC3ae5@foo-rtd-code) (cons (list 'define bC3ad5@protocol bC3ae9@protocol-code) (cons (list 'define bC3ad3@foo-rcd bC3ae7@foo-rcd-code) (cons (list 'define-syntax bC3acf@foo (list 'list ''$rtd (list 'syntax bC3ad1@foo-rtd) (list 'syntax bC3ad3@foo-rcd))) (cons (list 'define bC3ae3@foo? (list 'record-predicate bC3ad1@foo-rtd)) (cons (list 'define bC3ad7@make-foo (list 'record-constructor bC3ad3@foo-rcd)) (append (map (lambda (bC3aeb@foo-x bC3aec@idx) (list 'define bC3aeb@foo-x (list 'record-accessor bC3ad1@foo-rtd bC3aec@idx))) bC3add@foo-x* bC3adb@idx*) (map (lambda (bC3aef@set-foo-x! bC3af0@idx) (list 'define bC3aef@set-foo-x! (list 'record-mutator bC3ad1@foo-rtd bC3af0@idx))) bC3adf@set-foo-x!* bC3ae1@set-foo-idx*)))))))))))))))))))))))))) (bC3aa2@verify-clauses (lambda (bC3aab@x bC3aac@cls*) (letrec* ((bC3ab0@valid-kwds (map bC3070@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (bC3ab2@free-id-member? (lambda (bC3ac7@x bC3ac8@ls) (and (pair? bC3ac8@ls) (or (bC2eb9@free-id=? bC3ac7@x (car bC3ac8@ls)) (bC3ab2@free-id-member? bC3ac7@x (cdr bC3ac8@ls))))))) (let bC3ab7@f ((bC3ab3@cls* bC3aac@cls*) (bC3ab4@seen* '())) (if (not (null? bC3ab3@cls*)) (let ((bC3ab9@t (car bC3ab3@cls*))) (let ((bC3abb@ls/false (bC30ba@syntax-dispatch bC3ab9@t '(any . any)))) (if bC3abb@ls/false (apply (lambda (bC3abd@kwd bC3abe@rest) (if (or (not (bC2eb3@id? bC3abd@kwd)) (not (bC3ab2@free-id-member? bC3abd@kwd bC3ab0@valid-kwds))) (bC319a@syntax-violation '#f '"not a valid define-record-type keyword" bC3abd@kwd) (if (bC2ebf@bound-id-member? bC3abd@kwd bC3ab4@seen*) (bC319a@syntax-violation '#f '"duplicate use of keyword " bC3aab@x bC3abd@kwd) (bC3ab7@f (cdr bC3ab3@cls*) (cons bC3abd@kwd bC3ab4@seen*))))) bC3abb@ls/false) (let ((bC3ac1@t bC3ab9@t)) (let ((bC3ac3@ls/false (bC30ba@syntax-dispatch bC3ac1@t 'any))) (if bC3ac3@ls/false (apply (lambda (bC3ac5@cls) (bC319a@syntax-violation '#f '"malformed define-record-type clause" bC3ac5@cls)) bC3ac3@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3ac1@t))))))) (void))))))) (let ((bC3aa3@t bC3a7f@x)) (let ((bC3aa5@ls/false (bC30ba@syntax-dispatch bC3aa3@t '(_ any . each-any)))) (if bC3aa5@ls/false (apply (lambda (bC3aa7@namespec bC3aa8@clause*) (begin (bC3aa2@verify-clauses bC3a7f@x bC3aa8@clause*) (bC3aa0@do-define-record bC3aa7@namespec bC3aa8@clause*))) bC3aa5@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3aa3@t))))))) (set! bC4b8a@bC30ae@define-record-type-macro bC30ae@define-record-type-macro) (set! bC30b0@define-condition-type-macro (lambda (bC3c7b@x) (letrec* ((bC3c7e@mkname (lambda (bC3cab@name bC3cac@suffix) (bC319e@datum->syntax bC3cab@name (string->symbol (string-append (symbol->string (bC31a0@syntax->datum bC3cab@name)) bC3cac@suffix)))))) (let ((bC3c7f@t bC3c7b@x)) (let ((bC3c81@ls/false (bC30ba@syntax-dispatch bC3c7f@t '(any any any any any . #(each (any any)))))) (if (and bC3c81@ls/false (apply (lambda (bC3c83@ctxt bC3c84@name bC3c85@super bC3c86@constructor bC3c87@predicate bC3c88@field* bC3c89@accessor*) (and (bC2eb3@id? bC3c84@name) (bC2eb3@id? bC3c85@super) (bC2eb3@id? bC3c86@constructor) (bC2eb3@id? bC3c87@predicate) (for-all bC2eb3@id? bC3c88@field*) (for-all bC2eb3@id? bC3c89@accessor*))) bC3c81@ls/false)) (apply (lambda (bC3c91@ctxt bC3c92@name bC3c93@super bC3c94@constructor bC3c95@predicate bC3c96@field* bC3c97@accessor*) (let ((bC3c9f@aux-accessor* (map (lambda (bC3ca1@x) (gensym)) bC3c97@accessor*))) (bC3070@bless (cons 'begin (cons (cons 'define-record-type (cons (list bC3c92@name bC3c94@constructor (gensym)) (cons (list 'parent bC3c93@super) (cons (cons 'fields (map (lambda (bC3ca3@field bC3ca4@aux) (list 'immutable bC3ca3@field bC3ca4@aux)) bC3c96@field* bC3c9f@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define bC3c95@predicate (list 'condition-predicate (list 'record-type-descriptor bC3c92@name))) (map (lambda (bC3ca7@accessor bC3ca8@aux) (list 'define bC3ca7@accessor (list 'condition-accessor (list 'record-type-descriptor bC3c92@name) bC3ca8@aux))) bC3c97@accessor* bC3c9f@aux-accessor*))))))) bC3c81@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3c7f@t))))))) (set! bC4b8b@bC30b0@define-condition-type-macro bC30b0@define-condition-type-macro) (set! bC30b2@incorrect-usage-macro (lambda (bC3caf@e) (bC319a@syntax-violation '#f '"incorrect usage of auxiliary keyword" bC3caf@e))) (set! bC4b8c@bC30b2@incorrect-usage-macro bC30b2@incorrect-usage-macro) (set! bC30b4@parameterize-macro (lambda (bC3cb1@e) (let ((bC3cb3@t bC3cb1@e)) (let ((bC3cb5@ls/false (bC30ba@syntax-dispatch bC3cb3@t '(_ () any . each-any)))) (if bC3cb5@ls/false (apply (lambda (bC3cb7@b bC3cb8@b*) (bC3070@bless (cons 'let (cons '() (cons bC3cb7@b bC3cb8@b*))))) bC3cb5@ls/false) (let ((bC3cbb@t bC3cb3@t)) (let ((bC3cbd@ls/false (bC30ba@syntax-dispatch bC3cbb@t '(_ #(each (any any)) any . each-any)))) (if bC3cbd@ls/false (apply (lambda (bC3cbf@olhs* bC3cc0@orhs* bC3cc1@b bC3cc2@b*) (let ((bC3cc7@lhs* (bC3188@generate-temporaries bC3cbf@olhs*)) (bC3cc8@rhs* (bC3188@generate-temporaries bC3cc0@orhs*))) (bC3070@bless (cons (list 'lambda (append bC3cc7@lhs* bC3cc8@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (bC3ccb@lhs bC3ccc@rhs) (list 'let (list (list 't (list bC3ccb@lhs))) (list bC3ccb@lhs bC3ccc@rhs) (cons 'set! (cons bC3ccc@rhs '(t))))) bC3cc7@lhs* bC3cc8@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons bC3cc1@b bC3cc2@b*))) '(swap)))))) (append bC3cbf@olhs* bC3cc0@orhs*))))) bC3cbd@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3cbb@t))))))))) (set! bC4b8d@bC30b4@parameterize-macro bC30b4@parameterize-macro) (set! bC30b6@foreign-call-transformer (lambda (bC3ccf@e bC3cd0@r bC3cd1@mr) (let ((bC3cd5@t bC3ccf@e)) (let ((bC3cd7@ls/false (bC30ba@syntax-dispatch bC3cd5@t '(_ any . each-any)))) (if bC3cd7@ls/false (apply (lambda (bC3cd9@name bC3cda@arg*) (cons 'foreign-call (cons (bC30dc@chi-expr bC3cd9@name bC3cd0@r bC3cd1@mr) (bC30d8@chi-expr* bC3cda@arg* bC3cd0@r bC3cd1@mr)))) bC3cd7@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3cd5@t)))))) (set! bC4b8e@bC30b6@foreign-call-transformer bC30b6@foreign-call-transformer) (set! bC30b8@convert-pattern (lambda (bC3cdd@pattern bC3cde@keys) (letrec* ((bC3ce2@cvt* (lambda (bC3d81@p* bC3d82@n bC3d83@ids) (if (null? bC3d81@p*) (values '() bC3d83@ids) (call-with-values (lambda () (bC3ce2@cvt* (cdr bC3d81@p*) bC3d82@n bC3d83@ids)) (lambda (bC3d8b@bC3d88 bC3d8c@bC3d8a) (let ((bC3d8f@ids bC3d8c@bC3d8a) (bC3d90@y bC3d8b@bC3d88)) (call-with-values (lambda () (bC3ce4@cvt (car bC3d81@p*) bC3d82@n bC3d8f@ids)) (lambda (bC3d97@bC3d94 bC3d98@bC3d96) (let ((bC3d9b@ids bC3d98@bC3d96) (bC3d9c@x bC3d97@bC3d94)) (values (cons bC3d9c@x bC3d90@y) bC3d9b@ids)))))))))) (bC3ce4@cvt (lambda (bC3ce5@p bC3ce6@n bC3ce7@ids) (let ((bC3ceb@t bC3ce5@p)) (let ((bC3ced@ls/false (bC30ba@syntax-dispatch bC3ceb@t 'any))) (if (and bC3ced@ls/false (apply (lambda (bC3cef@id) (bC2eb3@id? bC3cef@id)) bC3ced@ls/false)) (apply (lambda (bC3cf1@id) (if (bC2ebf@bound-id-member? bC3ce5@p bC3cde@keys) (values (vector 'free-id bC3ce5@p) bC3ce7@ids) (if (bC2eb9@free-id=? bC3ce5@p (bC3042@scheme-stx '_)) (values '_ bC3ce7@ids) (values 'any (cons (cons bC3ce5@p bC3ce6@n) bC3ce7@ids))))) bC3ced@ls/false) (let ((bC3cf3@t bC3ceb@t)) (let ((bC3cf5@ls/false (bC30ba@syntax-dispatch bC3cf3@t '(any any)))) (if (and bC3cf5@ls/false (apply (lambda (bC3cf7@p bC3cf8@dots) (bC30bc@ellipsis? bC3cf8@dots)) bC3cf5@ls/false)) (apply (lambda (bC3cfb@p bC3cfc@dots) (call-with-values (lambda () (bC3ce4@cvt bC3cfb@p (+ bC3ce6@n '1) bC3ce7@ids)) (lambda (bC3d03@bC3d00 bC3d04@bC3d02) (let ((bC3d07@ids bC3d04@bC3d02) (bC3d08@p bC3d03@bC3d00)) (values (if (eq? bC3d08@p 'any) 'each-any (vector 'each bC3d08@p)) bC3d07@ids))))) bC3cf5@ls/false) (let ((bC3d0b@t bC3cf3@t)) (let ((bC3d0d@ls/false (bC30ba@syntax-dispatch bC3d0b@t '(any any . #(each+ any () any))))) (if (and bC3d0d@ls/false (apply (lambda (bC3d0f@x bC3d10@dots bC3d11@ys bC3d12@z) (bC30bc@ellipsis? bC3d10@dots)) bC3d0d@ls/false)) (apply (lambda (bC3d17@x bC3d18@dots bC3d19@ys bC3d1a@z) (call-with-values (lambda () (bC3ce4@cvt bC3d1a@z bC3ce6@n bC3ce7@ids)) (lambda (bC3d23@bC3d20 bC3d24@bC3d22) (let ((bC3d27@ids bC3d24@bC3d22) (bC3d28@z bC3d23@bC3d20)) (call-with-values (lambda () (bC3ce2@cvt* bC3d19@ys bC3ce6@n bC3d27@ids)) (lambda (bC3d2f@bC3d2c bC3d30@bC3d2e) (let ((bC3d33@ids bC3d30@bC3d2e) (bC3d34@ys bC3d2f@bC3d2c)) (call-with-values (lambda () (bC3ce4@cvt bC3d17@x (+ bC3ce6@n '1) bC3d33@ids)) (lambda (bC3d3b@bC3d38 bC3d3c@bC3d3a) (let ((bC3d3f@ids bC3d3c@bC3d3a) (bC3d40@x bC3d3b@bC3d38)) (values (vector 'each+ bC3d40@x (reverse bC3d34@ys) bC3d28@z) bC3d3f@ids))))))))))) bC3d0d@ls/false) (let ((bC3d43@t bC3d0b@t)) (let ((bC3d45@ls/false (bC30ba@syntax-dispatch bC3d43@t '(any . any)))) (if bC3d45@ls/false (apply (lambda (bC3d47@x bC3d48@y) (call-with-values (lambda () (bC3ce4@cvt bC3d48@y bC3ce6@n bC3ce7@ids)) (lambda (bC3d4f@bC3d4c bC3d50@bC3d4e) (let ((bC3d53@ids bC3d50@bC3d4e) (bC3d54@y bC3d4f@bC3d4c)) (call-with-values (lambda () (bC3ce4@cvt bC3d47@x bC3ce6@n bC3d53@ids)) (lambda (bC3d5b@bC3d58 bC3d5c@bC3d5a) (let ((bC3d5f@ids bC3d5c@bC3d5a) (bC3d60@x bC3d5b@bC3d58)) (values (cons bC3d60@x bC3d54@y) bC3d5f@ids)))))))) bC3d45@ls/false) (let ((bC3d63@t bC3d43@t)) (let ((bC3d65@ls/false (bC30ba@syntax-dispatch bC3d63@t '()))) (if bC3d65@ls/false (apply (lambda () (values '() bC3ce7@ids)) bC3d65@ls/false) (let ((bC3d67@t bC3d63@t)) (let ((bC3d69@ls/false (bC30ba@syntax-dispatch bC3d67@t '#(vector each-any)))) (if (and bC3d69@ls/false (apply (lambda (bC3d6b@p) (not (bC2e7f@stx? bC3d6b@p))) bC3d69@ls/false)) (apply (lambda (bC3d6d@p) (call-with-values (lambda () (bC3ce4@cvt bC3d6d@p bC3ce6@n bC3ce7@ids)) (lambda (bC3d73@bC3d70 bC3d74@bC3d72) (let ((bC3d77@ids bC3d74@bC3d72) (bC3d78@p bC3d73@bC3d70)) (values (vector 'vector bC3d78@p) bC3d77@ids))))) bC3d69@ls/false) (let ((bC3d7b@t bC3d67@t)) (let ((bC3d7d@ls/false (bC30ba@syntax-dispatch bC3d7b@t 'any))) (if bC3d7d@ls/false (apply (lambda (bC3d7f@datum) (values (vector 'atom (bC2ec7@stx->datum bC3d7f@datum)) bC3ce7@ids)) bC3d7d@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3d7b@t))))))))))))))))))))))))) (bC3ce4@cvt bC3cdd@pattern '0 '())))) (set! bC4b8f@bC30b8@convert-pattern bC30b8@convert-pattern) (set! bC30ba@syntax-dispatch (letrec* ((bC3da0@stx^ (lambda (bC3e7b@e bC3e7c@m* bC3e7d@s* bC3e7e@ae*) (if (and (null? bC3e7c@m*) (null? bC3e7d@s*) (null? bC3e7e@ae*)) bC3e7b@e (bC2e9b@mkstx bC3e7b@e bC3e7c@m* bC3e7d@s* bC3e7e@ae*)))) (bC3da2@match-each (lambda (bC3e5b@e bC3e5c@p bC3e5d@m* bC3e5e@s* bC3e5f@ae*) (if (pair? bC3e5b@e) (let ((bC3e65@first (bC3dae@match (car bC3e5b@e) bC3e5c@p bC3e5d@m* bC3e5e@s* bC3e5f@ae* '()))) (and bC3e65@first (let ((bC3e67@rest (bC3da2@match-each (cdr bC3e5b@e) bC3e5c@p bC3e5d@m* bC3e5e@s* bC3e5f@ae*))) (and bC3e67@rest (cons bC3e65@first bC3e67@rest))))) (if (null? bC3e5b@e) '() (if (bC2e7f@stx? bC3e5b@e) (and (not (bC2e39@top-marked? bC3e5d@m*)) (call-with-values (lambda () (join-wraps bC3e5d@m* bC3e5e@s* bC3e5f@ae* bC3e5b@e)) (lambda (bC3e6f@bC3e6a bC3e70@bC3e6c bC3e71@bC3e6e) (let ((bC3e75@ae* bC3e71@bC3e6e) (bC3e76@s* bC3e70@bC3e6c) (bC3e77@m* bC3e6f@bC3e6a)) (bC3da2@match-each (bC2e81@stx-expr bC3e5b@e) bC3e5c@p bC3e77@m* bC3e76@s* bC3e75@ae*))))) (if (bC29f7@bC28c9@annotation? bC3e5b@e) (bC3da2@match-each (bC29f9@bC28cd@annotation-expression bC3e5b@e) bC3e5c@p bC3e5d@m* bC3e5e@s* bC3e5f@ae*) '#f)))))) (bC3da4@match-each+ (lambda (bC3e1b@e bC3e1c@x-pat bC3e1d@y-pat bC3e1e@z-pat bC3e1f@m* bC3e20@s* bC3e21@ae* bC3e22@r) (let bC3e33@f ((bC3e2b@e bC3e1b@e) (bC3e2c@m* bC3e1f@m*) (bC3e2d@s* bC3e20@s*) (bC3e2e@ae* bC3e21@ae*)) (if (pair? bC3e2b@e) (call-with-values (lambda () (bC3e33@f (cdr bC3e2b@e) bC3e2c@m* bC3e2d@s* bC3e2e@ae*)) (lambda (bC3e3b@bC3e36 bC3e3c@bC3e38 bC3e3d@bC3e3a) (let ((bC3e41@r bC3e3d@bC3e3a) (bC3e42@y-pat bC3e3c@bC3e38) (bC3e43@xr* bC3e3b@bC3e36)) (if bC3e41@r (if (null? bC3e42@y-pat) (let ((bC3e47@xr (bC3dae@match (car bC3e2b@e) bC3e1c@x-pat bC3e2c@m* bC3e2d@s* bC3e2e@ae* '()))) (if bC3e47@xr (values (cons bC3e47@xr bC3e43@xr*) bC3e42@y-pat bC3e41@r) (values '#f '#f '#f))) (values '() (cdr bC3e42@y-pat) (bC3dae@match (car bC3e2b@e) (car bC3e42@y-pat) bC3e2c@m* bC3e2d@s* bC3e2e@ae* bC3e41@r))) (values '#f '#f '#f))))) (if (bC2e7f@stx? bC3e2b@e) (if (bC2e39@top-marked? bC3e2c@m*) (values '() bC3e1d@y-pat (bC3dae@match bC3e2b@e bC3e1e@z-pat bC3e2c@m* bC3e2d@s* bC3e2e@ae* bC3e22@r)) (call-with-values (lambda () (join-wraps bC3e2c@m* bC3e2d@s* bC3e2e@ae* bC3e2b@e)) (lambda (bC3e4f@bC3e4a bC3e50@bC3e4c bC3e51@bC3e4e) (let ((bC3e55@ae* bC3e51@bC3e4e) (bC3e56@s* bC3e50@bC3e4c) (bC3e57@m* bC3e4f@bC3e4a)) (bC3e33@f (bC2e81@stx-expr bC3e2b@e) bC3e57@m* bC3e56@s* bC3e55@ae*))))) (if (bC29f7@bC28c9@annotation? bC3e2b@e) (bC3e33@f (bC29f9@bC28cd@annotation-expression bC3e2b@e) bC3e2c@m* bC3e2d@s* bC3e2e@ae*) (values '() bC3e1d@y-pat (bC3dae@match bC3e2b@e bC3e1e@z-pat bC3e2c@m* bC3e2d@s* bC3e2e@ae* bC3e22@r)))))))) (bC3da6@match-each-any (lambda (bC3dff@e bC3e00@m* bC3e01@s* bC3e02@ae*) (if (pair? bC3dff@e) (let ((bC3e07@l (bC3da6@match-each-any (cdr bC3dff@e) bC3e00@m* bC3e01@s* bC3e02@ae*))) (and bC3e07@l (cons (bC3da0@stx^ (car bC3dff@e) bC3e00@m* bC3e01@s* bC3e02@ae*) bC3e07@l))) (if (null? bC3dff@e) '() (if (bC2e7f@stx? bC3dff@e) (and (not (bC2e39@top-marked? bC3e00@m*)) (call-with-values (lambda () (join-wraps bC3e00@m* bC3e01@s* bC3e02@ae* bC3dff@e)) (lambda (bC3e0f@bC3e0a bC3e10@bC3e0c bC3e11@bC3e0e) (let ((bC3e15@ae* bC3e11@bC3e0e) (bC3e16@s* bC3e10@bC3e0c) (bC3e17@m* bC3e0f@bC3e0a)) (bC3da6@match-each-any (bC2e81@stx-expr bC3dff@e) bC3e17@m* bC3e16@s* bC3e15@ae*))))) (if (bC29f7@bC28c9@annotation? bC3dff@e) (bC3da6@match-each-any (bC29f9@bC28cd@annotation-expression bC3dff@e) bC3e00@m* bC3e01@s* bC3e02@ae*) '#f)))))) (bC3da8@match-empty (lambda (bC3df9@p bC3dfa@r) (if (null? bC3df9@p) bC3dfa@r (if (eq? bC3df9@p '_) bC3dfa@r (if (eq? bC3df9@p 'any) (cons '() bC3dfa@r) (if (pair? bC3df9@p) (bC3da8@match-empty (car bC3df9@p) (bC3da8@match-empty (cdr bC3df9@p) bC3dfa@r)) (if (eq? bC3df9@p 'each-any) (cons '() bC3dfa@r) (let ((bC3dfd@t (vector-ref bC3df9@p '0))) (if (memv bC3dfd@t '(each)) (bC3da8@match-empty (vector-ref bC3df9@p '1) bC3dfa@r) (if (memv bC3dfd@t '(each+)) (bC3da8@match-empty (vector-ref bC3df9@p '1) (bC3da8@match-empty (reverse (vector-ref bC3df9@p '2)) (bC3da8@match-empty (vector-ref bC3df9@p '3) bC3dfa@r))) (if (memv bC3dfd@t '(free-id atom)) bC3dfa@r (if (memv bC3dfd@t '(scheme-id atom)) bC3dfa@r (if (memv bC3dfd@t '(vector)) (bC3da8@match-empty (vector-ref bC3df9@p '1) bC3dfa@r) (assertion-violation 'syntax-dispatch '"invalid pattern" bC3df9@p)))))))))))))) (bC3daa@combine (lambda (bC3df5@r* bC3df6@r) (if (null? (car bC3df5@r*)) bC3df6@r (cons (map car bC3df5@r*) (bC3daa@combine (map cdr bC3df5@r*) bC3df6@r))))) (bC3dac@match* (lambda (bC3dd1@e bC3dd2@p bC3dd3@m* bC3dd4@s* bC3dd5@ae* bC3dd6@r) (if (null? bC3dd2@p) (and (null? bC3dd1@e) bC3dd6@r) (if (pair? bC3dd2@p) (and (pair? bC3dd1@e) (bC3dae@match (car bC3dd1@e) (car bC3dd2@p) bC3dd3@m* bC3dd4@s* bC3dd5@ae* (bC3dae@match (cdr bC3dd1@e) (cdr bC3dd2@p) bC3dd3@m* bC3dd4@s* bC3dd5@ae* bC3dd6@r))) (if (eq? bC3dd2@p 'each-any) (let ((bC3ddd@l (bC3da6@match-each-any bC3dd1@e bC3dd3@m* bC3dd4@s* bC3dd5@ae*))) (and bC3ddd@l (cons bC3ddd@l bC3dd6@r))) (let ((bC3ddf@t (vector-ref bC3dd2@p '0))) (if (memv bC3ddf@t '(each)) (if (null? bC3dd1@e) (bC3da8@match-empty (vector-ref bC3dd2@p '1) bC3dd6@r) (let ((bC3de1@r* (bC3da2@match-each bC3dd1@e (vector-ref bC3dd2@p '1) bC3dd3@m* bC3dd4@s* bC3dd5@ae*))) (and bC3de1@r* (bC3daa@combine bC3de1@r* bC3dd6@r)))) (if (memv bC3ddf@t '(free-id)) (and (symbol? bC3dd1@e) (bC2e39@top-marked? bC3dd3@m*) (bC2eb9@free-id=? (bC3da0@stx^ bC3dd1@e bC3dd3@m* bC3dd4@s* bC3dd5@ae*) (vector-ref bC3dd2@p '1)) bC3dd6@r) (if (memv bC3ddf@t '(scheme-id)) (and (symbol? bC3dd1@e) (bC2e39@top-marked? bC3dd3@m*) (bC2eb9@free-id=? (bC3da0@stx^ bC3dd1@e bC3dd3@m* bC3dd4@s* bC3dd5@ae*) (bC3042@scheme-stx (vector-ref bC3dd2@p '1))) bC3dd6@r) (if (memv bC3ddf@t '(each+)) (call-with-values (lambda () (bC3da4@match-each+ bC3dd1@e (vector-ref bC3dd2@p '1) (vector-ref bC3dd2@p '2) (vector-ref bC3dd2@p '3) bC3dd3@m* bC3dd4@s* bC3dd5@ae* bC3dd6@r)) (lambda (bC3de9@bC3de4 bC3dea@bC3de6 bC3deb@bC3de8) (let ((bC3def@r bC3deb@bC3de8) (bC3df0@y-pat bC3dea@bC3de6) (bC3df1@xr* bC3de9@bC3de4)) (and bC3def@r (null? bC3df0@y-pat) (if (null? bC3df1@xr*) (bC3da8@match-empty (vector-ref bC3dd2@p '1) bC3def@r) (bC3daa@combine bC3df1@xr* bC3def@r)))))) (if (memv bC3ddf@t '(atom)) (and (fast-equal? (vector-ref bC3dd2@p '1) (bC2ec5@strip bC3dd1@e bC3dd3@m*)) bC3dd6@r) (if (memv bC3ddf@t '(vector)) (and (vector? bC3dd1@e) (bC3dae@match (vector->list bC3dd1@e) (vector-ref bC3dd2@p '1) bC3dd3@m* bC3dd4@s* bC3dd5@ae* bC3dd6@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" bC3dd2@p))))))))))))) (bC3dae@match (lambda (bC3db3@e bC3db4@p bC3db5@m* bC3db6@s* bC3db7@ae* bC3db8@r) (if (not bC3db8@r) '#f (if (eq? bC3db4@p '_) bC3db8@r (if (eq? bC3db4@p 'any) (cons (bC3da0@stx^ bC3db3@e bC3db5@m* bC3db6@s* bC3db7@ae*) bC3db8@r) (if (bC2e7f@stx? bC3db3@e) (and (not (bC2e39@top-marked? bC3db5@m*)) (call-with-values (lambda () (join-wraps bC3db5@m* bC3db6@s* bC3db7@ae* bC3db3@e)) (lambda (bC3dc5@bC3dc0 bC3dc6@bC3dc2 bC3dc7@bC3dc4) (let ((bC3dcb@ae* bC3dc7@bC3dc4) (bC3dcc@s* bC3dc6@bC3dc2) (bC3dcd@m* bC3dc5@bC3dc0)) (bC3dae@match (bC2e81@stx-expr bC3db3@e) bC3db4@p bC3dcd@m* bC3dcc@s* bC3dcb@ae* bC3db8@r))))) (if (bC29f7@bC28c9@annotation? bC3db3@e) (bC3dae@match (bC29f9@bC28cd@annotation-expression bC3db3@e) bC3db4@p bC3db5@m* bC3db6@s* bC3db7@ae* bC3db8@r) (bC3dac@match* bC3db3@e bC3db4@p bC3db5@m* bC3db6@s* bC3db7@ae* bC3db8@r))))))))) (lambda (bC3daf@e bC3db0@p) (bC3dae@match bC3daf@e bC3db0@p '() '() '() '())))) (set! bC4b90@bC30ba@syntax-dispatch bC30ba@syntax-dispatch) (set! bC30bc@ellipsis? (lambda (bC3e83@x) (and (bC2eb3@id? bC3e83@x) (bC2eb9@free-id=? bC3e83@x (bC3042@scheme-stx '...))))) (set! bC4b91@bC30bc@ellipsis? bC30bc@ellipsis?) (set! bC30be@underscore? (lambda (bC3e85@x) (and (bC2eb3@id? bC3e85@x) (bC2eb9@free-id=? bC3e85@x (bC3042@scheme-stx '_))))) (set! bC4b92@bC30be@underscore? bC30be@underscore?) (set! bC30c0@verify-literals (lambda (bC3e87@lits bC3e88@expr) (for-each (lambda (bC3e8b@x) (if (or (not (bC2eb3@id? bC3e8b@x)) (bC30bc@ellipsis? bC3e8b@x) (bC30be@underscore? bC3e8b@x)) (bC319a@syntax-violation '#f '"invalid literal" bC3e88@expr bC3e8b@x) (void))) bC3e87@lits))) (set! bC4b93@bC30c0@verify-literals bC30c0@verify-literals) (set! bC30c2@syntax-case-transformer (letrec* ((bC3e8e@build-dispatch-call (lambda (bC3eff@pvars bC3f00@expr bC3f01@y bC3f02@r bC3f03@mr) (let ((bC3f09@ids (map car bC3eff@pvars)) (bC3f0a@levels (map cdr bC3eff@pvars))) (let ((bC3f0d@labels (map bC2e3f@gen-label bC3f09@ids)) (bC3f0e@new-vars (map bC2e3b@gen-lexical bC3f09@ids))) (let ((bC3f11@body (bC30dc@chi-expr (bC2e9f@add-subst (bC2e73@make-full-rib bC3f09@ids bC3f0d@labels) bC3f00@expr) (append (map (lambda (bC3f13@label bC3f14@var bC3f15@level) (cons bC3f13@label (bC2ecd@make-binding 'syntax (cons bC3f14@var bC3f15@level)))) bC3f0d@labels bC3f0e@new-vars (map cdr bC3eff@pvars)) bC3f02@r) bC3f03@mr))) (list '(primitive apply) (bC2e16@bC2d48@build-lambda '#f bC3f0e@new-vars bC3f11@body) bC3f01@y)))))) (bC3e90@invalid-ids-error (lambda (bC3ef3@id* bC3ef4@e bC3ef5@class) (let bC3efd@find ((bC3ef9@id* bC3ef3@id*) (bC3efa@ok* '())) (if (null? bC3ef9@id*) (bC319a@syntax-violation '#f '"invalid syntax" bC3ef4@e) (if (bC2eb3@id? (car bC3ef9@id*)) (if (bC2ebf@bound-id-member? (car bC3ef9@id*) bC3efa@ok*) (bC3196@syntax-error (car bC3ef9@id*) '"duplicate " bC3ef5@class) (bC3efd@find (cdr bC3ef9@id*) (cons (car bC3ef9@id*) bC3efa@ok*))) (bC3196@syntax-error (car bC3ef9@id*) '"invalid " bC3ef5@class)))))) (bC3e92@gen-clause (lambda (bC3ecb@x bC3ecc@keys bC3ecd@clauses bC3ece@r bC3ecf@mr bC3ed0@pat bC3ed1@fender bC3ed2@expr) (call-with-values (lambda () (bC30b8@convert-pattern bC3ed0@pat bC3ecc@keys)) (lambda (bC3edf@bC3edc bC3ee0@bC3ede) (let ((bC3ee3@pvars bC3ee0@bC3ede) (bC3ee4@p bC3edf@bC3edc)) (if (not (bC2ebd@distinct-bound-ids? (map car bC3ee3@pvars))) (bC3e90@invalid-ids-error (map car bC3ee3@pvars) bC3ed0@pat '"pattern variable") (if (not (for-all (lambda (bC3ee7@x) (not (bC30bc@ellipsis? (car bC3ee7@x)))) bC3ee3@pvars)) (bC319a@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" bC3ed0@pat) (let ((bC3ee9@y (bC2e3b@gen-lexical 'tmp))) (let ((bC3eeb@test (if (eq? bC3ed1@fender '#t) bC3ee9@y (let ((bC3eed@call (bC3e8e@build-dispatch-call bC3ee3@pvars bC3ed1@fender bC3ee9@y bC3ece@r bC3ecf@mr))) (list 'if bC3ee9@y bC3eed@call (list 'quote '#f)))))) (let ((bC3eef@conseq (bC3e8e@build-dispatch-call bC3ee3@pvars bC3ed2@expr bC3ee9@y bC3ece@r bC3ecf@mr))) (let ((bC3ef1@altern (bC3e94@gen-syntax-case bC3ecb@x bC3ecc@keys bC3ecd@clauses bC3ece@r bC3ecf@mr))) (list (bC2e16@bC2d48@build-lambda '#f (list bC3ee9@y) (list 'if bC3eeb@test bC3eef@conseq bC3ef1@altern)) (list '(primitive syntax-dispatch) bC3ecb@x (list 'quote bC3ee4@p)))))))))))))) (bC3e94@gen-syntax-case (lambda (bC3ea9@x bC3eaa@keys bC3eab@clauses bC3eac@r bC3ead@mr) (if (null? bC3eab@clauses) (list '(primitive syntax-error) bC3ea9@x) (let ((bC3eb3@t (car bC3eab@clauses))) (let ((bC3eb5@ls/false (bC30ba@syntax-dispatch bC3eb3@t '(any any)))) (if bC3eb5@ls/false (apply (lambda (bC3eb7@pat bC3eb8@expr) (if (and (bC2eb3@id? bC3eb7@pat) (not (bC2ebf@bound-id-member? bC3eb7@pat bC3eaa@keys)) (not (bC30bc@ellipsis? bC3eb7@pat))) (if (bC2eb9@free-id=? bC3eb7@pat (bC3042@scheme-stx '_)) (bC30dc@chi-expr bC3eb8@expr bC3eac@r bC3ead@mr) (let ((bC3ebb@lab (bC2e3f@gen-label bC3eb7@pat)) (bC3ebc@lex (bC2e3b@gen-lexical bC3eb7@pat))) (let ((bC3ebf@body (bC30dc@chi-expr (bC2e9f@add-subst (bC2e73@make-full-rib (list bC3eb7@pat) (list bC3ebb@lab)) bC3eb8@expr) (cons (cons bC3ebb@lab (bC2ecd@make-binding 'syntax (cons bC3ebc@lex '0))) bC3eac@r) bC3ead@mr))) (list (bC2e16@bC2d48@build-lambda '#f (list bC3ebc@lex) bC3ebf@body) bC3ea9@x)))) (bC3e92@gen-clause bC3ea9@x bC3eaa@keys (cdr bC3eab@clauses) bC3eac@r bC3ead@mr bC3eb7@pat '#t bC3eb8@expr))) bC3eb5@ls/false) (let ((bC3ec1@t bC3eb3@t)) (let ((bC3ec3@ls/false (bC30ba@syntax-dispatch bC3ec1@t '(any any any)))) (if bC3ec3@ls/false (apply (lambda (bC3ec5@pat bC3ec6@fender bC3ec7@expr) (bC3e92@gen-clause bC3ea9@x bC3eaa@keys (cdr bC3eab@clauses) bC3eac@r bC3ead@mr bC3ec5@pat bC3ec6@fender bC3ec7@expr)) bC3ec3@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3ec1@t))))))))))) (lambda (bC3e95@e bC3e96@r bC3e97@mr) (let ((bC3e9b@t bC3e95@e)) (let ((bC3e9d@ls/false (bC30ba@syntax-dispatch bC3e9b@t '(_ any each-any . each-any)))) (if bC3e9d@ls/false (apply (lambda (bC3e9f@expr bC3ea0@keys bC3ea1@clauses) (begin (bC30c0@verify-literals bC3ea0@keys bC3e95@e) (let ((bC3ea5@x (bC2e3b@gen-lexical 'tmp))) (let ((bC3ea7@body (bC3e94@gen-syntax-case bC3ea5@x bC3ea0@keys bC3ea1@clauses bC3e96@r bC3e97@mr))) (list (bC2e16@bC2d48@build-lambda '#f (list bC3ea5@x) bC3ea7@body) (bC30dc@chi-expr bC3e9f@expr bC3e96@r bC3e97@mr)))))) bC3e9d@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3e9b@t))))))) (set! bC4b94@bC30c2@syntax-case-transformer bC30c2@syntax-case-transformer) (set! bC30c4@ellipsis-map (lambda (bC3f19@proc bC3f1a@ls . bC3f1d@ls*) (letrec* ((bC3f20@who '...)) (begin (if (not (list? bC3f1a@ls)) (assertion-violation bC3f20@who '"not a list" bC3f1a@ls) (void)) (if (not (null? bC3f1d@ls*)) (let ((bC3f21@n (length bC3f1a@ls))) (for-each (lambda (bC3f23@x) (begin (if (not (list? bC3f23@x)) (assertion-violation bC3f20@who '"not a list" bC3f23@x) (void)) (if (not (= (length bC3f23@x) bC3f21@n)) (assertion-violation bC3f20@who '"length mismatch" bC3f1a@ls bC3f23@x) (void)))) bC3f1d@ls*)) (void)) (apply map bC3f19@proc bC3f1a@ls bC3f1d@ls*))))) (set! bC4b95@bC30c4@ellipsis-map bC30c4@ellipsis-map) (set! bC30c6@syntax-transformer (letrec* ((bC3f26@gen-syntax (lambda (bC3f9d@src bC3f9e@e bC3f9f@r bC3fa0@maps bC3fa1@ellipsis? bC3fa2@vec?) (let ((bC3fa9@t bC3f9e@e)) (let ((bC3fab@ls/false (bC30ba@syntax-dispatch bC3fa9@t 'any))) (if (and bC3fab@ls/false (apply (lambda (bC3fad@dots) (bC3fa1@ellipsis? bC3fad@dots)) bC3fab@ls/false)) (apply (lambda (bC3faf@dots) (bC319a@syntax-violation '#f '"misplaced ellipsis in syntax form" bC3f9d@src)) bC3fab@ls/false) (let ((bC3fb1@t bC3fa9@t)) (let ((bC3fb3@ls/false (bC30ba@syntax-dispatch bC3fb1@t 'any))) (if (and bC3fb3@ls/false (apply (lambda (bC3fb5@id) (bC2eb3@id? bC3fb5@id)) bC3fb3@ls/false)) (apply (lambda (bC3fb7@id) (let ((bC3fb9@label (bC2ec9@id->label bC3f9e@e))) (let ((bC3fbb@b (bC2ecb@label->binding bC3fb9@label bC3f9f@r))) (if (eq? (bC2ecf@binding-type bC3fbb@b) 'syntax) (call-with-values (lambda () (let ((bC3fc1@var.lev (bC2ed1@binding-value bC3fbb@b))) (bC3f28@gen-ref bC3f9d@src (car bC3fc1@var.lev) (cdr bC3fc1@var.lev) bC3fa0@maps))) (lambda (bC3fc3@bC3fbe bC3fc4@bC3fc0) (let ((bC3fc7@maps bC3fc4@bC3fc0) (bC3fc8@var bC3fc3@bC3fbe)) (values (list 'ref bC3fc8@var) bC3fc7@maps)))) (values (list 'quote bC3f9e@e) bC3fa0@maps))))) bC3fb3@ls/false) (let ((bC3fcb@t bC3fb1@t)) (let ((bC3fcd@ls/false (bC30ba@syntax-dispatch bC3fcb@t '(any any)))) (if (and bC3fcd@ls/false (apply (lambda (bC3fcf@dots bC3fd0@e) (bC3fa1@ellipsis? bC3fcf@dots)) bC3fcd@ls/false)) (apply (lambda (bC3fd3@dots bC3fd4@e) (if bC3fa2@vec? (bC319a@syntax-violation '#f '"misplaced ellipsis in syntax form" bC3f9d@src) (bC3f26@gen-syntax bC3f9d@src bC3fd4@e bC3f9f@r bC3fa0@maps (lambda (bC3fd7@x) '#f) '#f))) bC3fcd@ls/false) (let ((bC3fd9@t bC3fcb@t)) (let ((bC3fdb@ls/false (bC30ba@syntax-dispatch bC3fd9@t '(any any . any)))) (if (and bC3fdb@ls/false (apply (lambda (bC3fdd@x bC3fde@dots bC3fdf@y) (bC3fa1@ellipsis? bC3fde@dots)) bC3fdb@ls/false)) (apply (lambda (bC3fe3@x bC3fe4@dots bC3fe5@y) (let bC3ffb@f ((bC3fe9@y bC3fe5@y) (bC3fea@k (lambda (bC3fed@maps) (call-with-values (lambda () (bC3f26@gen-syntax bC3f9d@src bC3fe3@x bC3f9f@r (cons '() bC3fed@maps) bC3fa1@ellipsis? '#f)) (lambda (bC3ff3@bC3ff0 bC3ff4@bC3ff2) (let ((bC3ff7@maps bC3ff4@bC3ff2) (bC3ff8@x bC3ff3@bC3ff0)) (if (null? (car bC3ff7@maps)) (bC319a@syntax-violation '#f '"extra ellipsis in syntax form" bC3f9d@src) (values (bC3f2e@gen-map bC3ff8@x (car bC3ff7@maps)) (cdr bC3ff7@maps))))))))) (let ((bC3ffd@t bC3fe9@y)) (let ((bC3fff@ls/false (bC30ba@syntax-dispatch bC3ffd@t '()))) (if bC3fff@ls/false (apply (lambda () (bC3fea@k bC3fa0@maps)) bC3fff@ls/false) (let ((bC4001@t bC3ffd@t)) (let ((bC4003@ls/false (bC30ba@syntax-dispatch bC4001@t '(any . any)))) (if (and bC4003@ls/false (apply (lambda (bC4005@dots bC4006@y) (bC3fa1@ellipsis? bC4005@dots)) bC4003@ls/false)) (apply (lambda (bC4009@dots bC400a@y) (bC3ffb@f bC400a@y (lambda (bC400d@maps) (call-with-values (lambda () (bC3fea@k (cons '() bC400d@maps))) (lambda (bC4013@bC4010 bC4014@bC4012) (let ((bC4017@maps bC4014@bC4012) (bC4018@x bC4013@bC4010)) (if (null? (car bC4017@maps)) (bC319a@syntax-violation '#f '"extra ellipsis in syntax form" bC3f9d@src) (values (bC3f2c@gen-mappend bC4018@x (car bC4017@maps)) (cdr bC4017@maps))))))))) bC4003@ls/false) (let ((bC401b@t bC4001@t)) (let ((bC401d@ls/false (bC30ba@syntax-dispatch bC401b@t '_))) (if bC401d@ls/false (apply (lambda () (call-with-values (lambda () (bC3f26@gen-syntax bC3f9d@src bC3fe9@y bC3f9f@r bC3fa0@maps bC3fa1@ellipsis? bC3fa2@vec?)) (lambda (bC4023@bC4020 bC4024@bC4022) (let ((bC4027@maps bC4024@bC4022) (bC4028@y bC4023@bC4020)) (call-with-values (lambda () (bC3fea@k bC4027@maps)) (lambda (bC402f@bC402c bC4030@bC402e) (let ((bC4033@maps bC4030@bC402e) (bC4034@x bC402f@bC402c)) (values (bC3f2a@gen-append bC4034@x bC4028@y) bC4033@maps)))))))) bC401d@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC401b@t)))))))))))) bC3fdb@ls/false) (let ((bC4037@t bC3fd9@t)) (let ((bC4039@ls/false (bC30ba@syntax-dispatch bC4037@t '(any . any)))) (if bC4039@ls/false (apply (lambda (bC403b@x bC403c@y) (call-with-values (lambda () (bC3f26@gen-syntax bC3f9d@src bC403b@x bC3f9f@r bC3fa0@maps bC3fa1@ellipsis? '#f)) (lambda (bC4043@bC4040 bC4044@bC4042) (let ((bC4047@maps bC4044@bC4042) (bC4048@xnew bC4043@bC4040)) (call-with-values (lambda () (bC3f26@gen-syntax bC3f9d@src bC403c@y bC3f9f@r bC4047@maps bC3fa1@ellipsis? bC3fa2@vec?)) (lambda (bC404f@bC404c bC4050@bC404e) (let ((bC4053@maps bC4050@bC404e) (bC4054@ynew bC404f@bC404c)) (values (bC3f30@gen-cons bC3f9e@e bC403b@x bC403c@y bC4048@xnew bC4054@ynew) bC4053@maps)))))))) bC4039@ls/false) (let ((bC4057@t bC4037@t)) (let ((bC4059@ls/false (bC30ba@syntax-dispatch bC4057@t '#(vector each-any)))) (if bC4059@ls/false (apply (lambda (bC405b@ls) (call-with-values (lambda () (bC3f26@gen-syntax bC3f9d@src bC405b@ls bC3f9f@r bC3fa0@maps bC3fa1@ellipsis? '#t)) (lambda (bC4061@bC405e bC4062@bC4060) (let ((bC4065@maps bC4062@bC4060) (bC4066@lsnew bC4061@bC405e)) (values (bC3f32@gen-vector bC3f9e@e bC405b@ls bC4066@lsnew) bC4065@maps))))) bC4059@ls/false) (let ((bC4069@t bC4057@t)) (let ((bC406b@ls/false (bC30ba@syntax-dispatch bC4069@t '_))) (if bC406b@ls/false (apply (lambda () (values (list 'quote bC3f9e@e) bC3fa0@maps)) bC406b@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC4069@t)))))))))))))))))))))))) (bC3f28@gen-ref (lambda (bC3f83@src bC3f84@var bC3f85@level bC3f86@maps) (if (= bC3f85@level '0) (values bC3f84@var bC3f86@maps) (if (null? bC3f86@maps) (bC319a@syntax-violation '#f '"missing ellipsis in syntax form" bC3f83@src) (call-with-values (lambda () (bC3f28@gen-ref bC3f83@src bC3f84@var (- bC3f85@level '1) (cdr bC3f86@maps))) (lambda (bC3f8f@bC3f8c bC3f90@bC3f8e) (let ((bC3f93@outer-maps bC3f90@bC3f8e) (bC3f94@outer-var bC3f8f@bC3f8c)) (let ((bC3f97@t (assq bC3f94@outer-var (car bC3f86@maps)))) (if bC3f97@t ((lambda (bC3f99@b) (values (cdr bC3f99@b) bC3f86@maps)) bC3f97@t) (let ((bC3f9b@inner-var (bC2e3b@gen-lexical 'tmp))) (values bC3f9b@inner-var (cons (cons (cons bC3f94@outer-var bC3f9b@inner-var) (car bC3f86@maps)) bC3f93@outer-maps)))))))))))) (bC3f2a@gen-append (lambda (bC3f7f@x bC3f80@y) (if (fast-equal? bC3f80@y ''()) bC3f7f@x (list 'append bC3f7f@x bC3f80@y)))) (bC3f2c@gen-mappend (lambda (bC3f7b@e bC3f7c@map-env) (list 'apply '(primitive append) (bC3f2e@gen-map bC3f7b@e bC3f7c@map-env)))) (bC3f2e@gen-map (lambda (bC3f69@e bC3f6a@map-env) (let ((bC3f6d@formals (map cdr bC3f6a@map-env)) (bC3f6e@actuals (map (lambda (bC3f71@x) (list 'ref (car bC3f71@x))) bC3f6a@map-env))) (if (eq? (car bC3f69@e) 'ref) (car bC3f6e@actuals) (if (for-all (lambda (bC3f73@x) (and (eq? (car bC3f73@x) 'ref) (memq (cadr bC3f73@x) bC3f6d@formals))) (cdr bC3f69@e)) (let ((bC3f75@args (map (let ((bC3f77@r (map cons bC3f6d@formals bC3f6e@actuals))) (lambda (bC3f79@x) (cdr (assq (cadr bC3f79@x) bC3f77@r)))) (cdr bC3f69@e)))) (cons 'map (cons (list 'primitive (car bC3f69@e)) bC3f75@args))) (cons* 'map (list 'lambda bC3f6d@formals bC3f69@e) bC3f6e@actuals)))))) (bC3f30@gen-cons (lambda (bC3f59@e bC3f5a@x bC3f5b@y bC3f5c@xnew bC3f5d@ynew) (let ((bC3f63@t (car bC3f5d@ynew))) (if (memv bC3f63@t '(quote)) (if (eq? (car bC3f5c@xnew) 'quote) (let ((bC3f65@xnew (cadr bC3f5c@xnew)) (bC3f66@ynew (cadr bC3f5d@ynew))) (if (and (eq? bC3f65@xnew bC3f5a@x) (eq? bC3f66@ynew bC3f5b@y)) (list 'quote bC3f59@e) (list 'quote (cons bC3f65@xnew bC3f66@ynew)))) (if (null? (cadr bC3f5d@ynew)) (list 'list bC3f5c@xnew) (list 'cons bC3f5c@xnew bC3f5d@ynew))) (if (memv bC3f63@t '(list)) (cons 'list (cons bC3f5c@xnew (cdr bC3f5d@ynew))) (list 'cons bC3f5c@xnew bC3f5d@ynew)))))) (bC3f32@gen-vector (lambda (bC3f53@e bC3f54@ls bC3f55@lsnew) (if (eq? (car bC3f55@lsnew) 'quote) (if (eq? (cadr bC3f55@lsnew) bC3f54@ls) (list 'quote bC3f53@e) (list 'quote (list->vector (cadr bC3f55@lsnew)))) (if (eq? (car bC3f55@lsnew) 'list) (cons 'vector (cdr bC3f55@lsnew)) (list 'list->vector bC3f55@lsnew))))) (bC3f34@regen (lambda (bC3f4d@x) (let ((bC3f4f@t (car bC3f4d@x))) (if (memv bC3f4f@t '(ref)) (cadr bC3f4d@x) (if (memv bC3f4f@t '(primitive)) (list 'primitive (cadr bC3f4d@x)) (if (memv bC3f4f@t '(quote)) (list 'quote (cadr bC3f4d@x)) (if (memv bC3f4f@t '(lambda)) (bC2e16@bC2d48@build-lambda '#f (cadr bC3f4d@x) (bC3f34@regen (caddr bC3f4d@x))) (if (memv bC3f4f@t '(map)) (let ((bC3f51@ls (map bC3f34@regen (cdr bC3f4d@x)))) (cons '(primitive ellipsis-map) bC3f51@ls)) (cons (list 'primitive (car bC3f4d@x)) (map bC3f34@regen (cdr bC3f4d@x)))))))))))) (lambda (bC3f35@e bC3f36@r bC3f37@mr) (let ((bC3f3b@t bC3f35@e)) (let ((bC3f3d@ls/false (bC30ba@syntax-dispatch bC3f3b@t '(_ any)))) (if bC3f3d@ls/false (apply (lambda (bC3f3f@x) (call-with-values (lambda () (bC3f26@gen-syntax bC3f35@e bC3f3f@x bC3f36@r '() bC30bc@ellipsis? '#f)) (lambda (bC3f45@bC3f42 bC3f46@bC3f44) (let ((bC3f49@maps bC3f46@bC3f44) (bC3f4a@e bC3f45@bC3f42)) (bC3f34@regen bC3f4a@e))))) bC3f3d@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC3f3b@t))))))) (set! bC4b96@bC30c6@syntax-transformer bC30c6@syntax-transformer) (set! bC30c8@core-macro-transformer (lambda (bC406d@name) (let ((bC406f@t bC406d@name)) (if (memv bC406f@t '(quote)) bC306a@quote-transformer (if (memv bC406f@t '(lambda)) bC306e@lambda-transformer (if (memv bC406f@t '(case-lambda)) bC306c@case-lambda-transformer (if (memv bC406f@t '(letrec)) bC3052@letrec-transformer (if (memv bC406f@t '(letrec*)) bC3054@letrec*-transformer (if (memv bC406f@t '(let)) bC3050@let-transformer (if (memv bC406f@t '(if)) bC3062@if-transformer (if (memv bC406f@t '(and)) bC3064@and-transformer (if (memv bC406f@t '(or)) bC3066@or-transformer (if (memv bC406f@t '(foreign-call)) bC30b6@foreign-call-transformer (if (memv bC406f@t '(syntax-case)) bC30c2@syntax-case-transformer (if (memv bC406f@t '(syntax)) bC30c6@syntax-transformer (if (memv bC406f@t '(type-descriptor)) bC3058@type-descriptor-transformer (if (memv bC406f@t '(record-type-descriptor)) bC305a@record-type-descriptor-transformer (if (memv bC406f@t '(record-constructor-descriptor)) bC305c@record-constructor-descriptor-transformer (if (memv bC406f@t '(fluid-let-syntax)) bC3056@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" bC406d@name)))))))))))))))))))) (set! bC4b97@bC30c8@core-macro-transformer bC30c8@core-macro-transformer) (set! bC30ca@symbol-macro (lambda (bC4071@x bC4072@set) (let ((bC4075@t bC4071@x)) (let ((bC4077@ls/false (bC30ba@syntax-dispatch bC4075@t '(_ any)))) (if (and bC4077@ls/false (apply (lambda (bC4079@name) (and (bC2eb3@id? bC4079@name) (memq (bC2eb5@id->sym bC4079@name) bC4072@set))) bC4077@ls/false)) (apply (lambda (bC407b@name) (bC3070@bless (list 'quote bC407b@name))) bC4077@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC4075@t)))))) (set! bC4b98@bC30ca@symbol-macro bC30ca@symbol-macro) (set! bC30cc@macro-transformer (lambda (bC407d@x) (if (procedure? bC407d@x) bC407d@x (if (symbol? bC407d@x) (let ((bC407f@t bC407d@x)) (if (memv bC407f@t '(define-record-type)) bC30ae@define-record-type-macro (if (memv bC407f@t '(define-struct)) bC30ac@define-struct-macro (if (memv bC407f@t '(include)) bC30a2@include-macro (if (memv bC407f@t '(cond)) bC309e@cond-macro (if (memv bC407f@t '(let)) bC3076@let-macro (if (memv bC407f@t '(do)) bC3096@do-macro (if (memv bC407f@t '(or)) bC309a@or-macro (if (memv bC407f@t '(and)) bC309c@and-macro (if (memv bC407f@t '(let*)) bC3098@let*-macro (if (memv bC407f@t '(let-values)) bC3078@let-values-macro (if (memv bC407f@t '(let*-values)) bC307a@let*-values-macro (if (memv bC407f@t '(syntax-rules)) bC30a6@syntax-rules-macro (if (memv bC407f@t '(quasiquote)) bC30a8@quasiquote-macro (if (memv bC407f@t '(quasisyntax)) bC30aa@quasisyntax-macro (if (memv bC407f@t '(with-syntax)) bC3072@with-syntax-macro (if (memv bC407f@t '(when)) bC305e@when-macro (if (memv bC407f@t '(unless)) bC3060@unless-macro (if (memv bC407f@t '(case)) bC3068@case-macro (if (memv bC407f@t '(identifier-syntax)) bC3094@identifier-syntax-macro (if (memv bC407f@t '(time)) bC308c@time-macro (if (memv bC407f@t '(delay)) bC308e@delay-macro (if (memv bC407f@t '(assert)) bC3090@assert-macro (if (memv bC407f@t '(endianness)) bC3092@endianness-macro (if (memv bC407f@t '(guard)) bC3088@guard-macro (if (memv bC407f@t '(define-enumeration)) bC308a@define-enumeration-macro (if (memv bC407f@t '(trace-lambda)) bC307c@trace-lambda-macro (if (memv bC407f@t '(trace-define)) bC307e@trace-define-macro (if (memv bC407f@t '(trace-define-syntax)) bC3080@trace-define-syntax-macro (if (memv bC407f@t '(trace-let-syntax)) bC3084@trace-let-syntax-macro (if (memv bC407f@t '(trace-letrec-syntax)) bC3086@trace-letrec-syntax-macro (if (memv bC407f@t '(define-condition-type)) bC30b0@define-condition-type-macro (if (memv bC407f@t '(parameterize)) bC30b4@parameterize-macro (if (memv bC407f@t '(include-into)) bC30a4@include-into-macro (if (memv bC407f@t '(eol-style)) (lambda (bC4081@x) (bC30ca@symbol-macro bC4081@x '(none lf cr crlf nel crnel ls))) (if (memv bC407f@t '(error-handling-mode)) (lambda (bC4083@x) (bC30ca@symbol-macro bC4083@x '(ignore raise replace))) (if (memv bC407f@t '(buffer-mode)) (lambda (bC4085@x) (bC30ca@symbol-macro bC4085@x '(none line block))) (if (memv bC407f@t '(file-options)) bC2e2e@file-options-macro (if (memv bC407f@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) bC30b2@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" bC407d@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" bC407d@x))))) (set! bC4b99@bC30cc@macro-transformer bC30cc@macro-transformer) (set! bC30ce@local-macro-transformer (lambda (bC4087@x) (car bC4087@x))) (set! bC4b9a@bC30ce@local-macro-transformer bC30ce@local-macro-transformer) (set! bC30d0@do-macro-call (lambda (bC4089@transformer bC408a@expr) (let ((bC408d@out (bC4089@transformer (bC2e9d@add-mark bC2e97@anti-mark bC408a@expr '#f)))) (begin (let bC4091@f ((bC408f@x bC408d@out)) (if (not (bC2e7f@stx? bC408f@x)) (if (pair? bC408f@x) (begin (bC4091@f (car bC408f@x)) (bC4091@f (cdr bC408f@x))) (if (vector? bC408f@x) (vector-for-each bC4091@f bC408f@x) (if (symbol? bC408f@x) (bC319a@syntax-violation '#f '"raw symbol encountered in output of macro" bC408a@expr bC408f@x) (void)))) (void))) (bC2e9d@add-mark (bC2e95@gen-mark) bC408d@out bC408a@expr))))) (set! bC4b9b@bC30d0@do-macro-call bC30d0@do-macro-call) (set! bC30d2@chi-macro (lambda (bC4093@p bC4094@e) (bC30d0@do-macro-call (bC30cc@macro-transformer bC4093@p) bC4094@e))) (set! bC4b9c@bC30d2@chi-macro bC30d2@chi-macro) (set! bC30d4@chi-local-macro (lambda (bC4097@p bC4098@e) (bC30d0@do-macro-call (bC30ce@local-macro-transformer bC4097@p) bC4098@e))) (set! bC4b9d@bC30d4@chi-local-macro bC30d4@chi-local-macro) (set! bC30d6@chi-global-macro (lambda (bC409b@p bC409c@e) (let ((bC409f@lib (car bC409b@p)) (bC40a0@loc (cdr bC409b@p))) (begin (bC2cd0@bC2b1f@visit-library bC409f@lib) (let ((bC40a3@x (symbol-value bC40a0@loc))) (let ((bC40a5@transformer (if (procedure? bC40a3@x) bC40a3@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" bC40a3@x)))) (bC30d0@do-macro-call bC40a5@transformer bC409c@e))))))) (set! bC4b9e@bC30d6@chi-global-macro bC30d6@chi-global-macro) (set! bC30d8@chi-expr* (lambda (bC40a7@e* bC40a8@r bC40a9@mr) (if (null? bC40a7@e*) '() (let ((bC40ad@e (bC30dc@chi-expr (car bC40a7@e*) bC40a8@r bC40a9@mr))) (cons bC40ad@e (bC30d8@chi-expr* (cdr bC40a7@e*) bC40a8@r bC40a9@mr)))))) (set! bC4b9f@bC30d8@chi-expr* bC30d8@chi-expr*) (set! bC30da@chi-application (lambda (bC40af@e bC40b0@r bC40b1@mr) (let ((bC40b5@t bC40af@e)) (let ((bC40b7@ls/false (bC30ba@syntax-dispatch bC40b5@t '(any . each-any)))) (if bC40b7@ls/false (apply (lambda (bC40b9@rator bC40ba@rands) (let ((bC40bd@rator (bC30dc@chi-expr bC40b9@rator bC40b0@r bC40b1@mr))) (cons bC40bd@rator (bC30d8@chi-expr* bC40ba@rands bC40b0@r bC40b1@mr)))) bC40b7@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC40b5@t)))))) (set! bC4ba0@bC30da@chi-application bC30da@chi-application) (set! bC30dc@chi-expr (lambda (bC40bf@e bC40c0@r bC40c1@mr) (call-with-values (lambda () (bC2ed5@syntax-type bC40bf@e bC40c0@r)) (lambda (bC40cb@bC40c6 bC40cc@bC40c8 bC40cd@bC40ca) (let ((bC40d1@kwd bC40cd@bC40ca) (bC40d2@value bC40cc@bC40c8) (bC40d3@type bC40cb@bC40c6)) (let ((bC40d7@t bC40d3@type)) (if (memv bC40d7@t '(core-macro)) (let ((bC40d9@transformer (bC30c8@core-macro-transformer bC40d2@value))) (bC40d9@transformer bC40bf@e bC40c0@r bC40c1@mr)) (if (memv bC40d7@t '(global)) (let ((bC40db@lib (car bC40d2@value))) (let ((bC40dd@loc (cdr bC40d2@value))) (begin ((bC3122@inv-collector) bC40db@lib) bC40dd@loc))) (if (memv bC40d7@t '(core-prim)) (let ((bC40df@name bC40d2@value)) (list 'primitive bC40df@name)) (if (memv bC40d7@t '(call)) (bC30da@chi-application bC40bf@e bC40c0@r bC40c1@mr) (if (memv bC40d7@t '(lexical)) (let ((bC40e1@lex (bC3044@lexical-var bC40d2@value))) bC40e1@lex) (if (memv bC40d7@t '(global-macro global-macro!)) (bC30dc@chi-expr (bC30d6@chi-global-macro bC40d2@value bC40bf@e) bC40c0@r bC40c1@mr) (if (memv bC40d7@t '(local-macro local-macro!)) (bC30dc@chi-expr (bC30d4@chi-local-macro bC40d2@value bC40bf@e) bC40c0@r bC40c1@mr) (if (memv bC40d7@t '(macro macro!)) (bC30dc@chi-expr (bC30d2@chi-macro bC40d2@value bC40bf@e) bC40c0@r bC40c1@mr) (if (memv bC40d7@t '(constant)) (let ((bC40e3@datum bC40d2@value)) (list 'quote bC40e3@datum)) (if (memv bC40d7@t '(set!)) (bC30de@chi-set! bC40bf@e bC40c0@r bC40c1@mr) (if (memv bC40d7@t '(begin)) (let ((bC40e5@t bC40bf@e)) (let ((bC40e7@ls/false (bC30ba@syntax-dispatch bC40e5@t '(_ any . each-any)))) (if bC40e7@ls/false (apply (lambda (bC40e9@x bC40ea@x*) (bC2e18@bC2d78@build-sequence '#f (bC30d8@chi-expr* (cons bC40e9@x bC40ea@x*) bC40c0@r bC40c1@mr))) bC40e7@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC40e5@t)))) (if (memv bC40d7@t '(let-syntax letrec-syntax)) (let ((bC40ed@t bC40bf@e)) (let ((bC40ef@ls/false (bC30ba@syntax-dispatch bC40ed@t '(_ #(each (any any)) any . each-any)))) (if (and bC40ef@ls/false (apply (lambda (bC40f1@xlhs* bC40f2@xrhs* bC40f3@xbody bC40f4@xbody*) (if (not (bC2ebb@valid-bound-ids? bC40f1@xlhs*)) (bC319a@syntax-violation '#f '"invalid identifiers" bC40bf@e) (void))) bC40ef@ls/false)) (apply (lambda (bC40f9@xlhs* bC40fa@xrhs* bC40fb@xbody bC40fc@xbody*) (let ((bC4101@xlab* (map bC2e3f@gen-label bC40f9@xlhs*))) (let ((bC4103@xrib (bC2e73@make-full-rib bC40f9@xlhs* bC4101@xlab*))) (let ((bC4105@xb* (map (lambda (bC4107@x) (bC2eeb@make-eval-transformer (bC3114@expand-transformer (if (eq? bC40d3@type 'let-syntax) bC4107@x (bC2e9f@add-subst bC4103@xrib bC4107@x)) bC40c1@mr))) bC40fa@xrhs*))) (bC2e18@bC2d78@build-sequence '#f (bC30d8@chi-expr* (map (lambda (bC4109@x) (bC2e9f@add-subst bC4103@xrib bC4109@x)) (cons bC40fb@xbody bC40fc@xbody*)) (append (map cons bC4101@xlab* bC4105@xb*) bC40c0@r) (append (map cons bC4101@xlab* bC4105@xb*) bC40c1@mr))))))) bC40ef@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC40ed@t)))) (if (memv bC40d7@t '(displaced-lexical)) (bC319a@syntax-violation '#f '"identifier out of context" bC40bf@e) (if (memv bC40d7@t '(syntax)) (bC319a@syntax-violation '#f '"reference to pattern variable outside a syntax form" bC40bf@e) (if (memv bC40d7@t '(define define-syntax module import library)) (bC319a@syntax-violation '#f (string-append (let ((bC410b@t bC40d3@type)) (if (memv bC410b@t '(define)) '"a definition" (if (memv bC410b@t '(define-syntax)) '"a define-syntax" (if (memv bC410b@t '(module)) '"a module definition" (if (memv bC410b@t '(library)) '"a library definition" (if (memv bC410b@t '(import)) '"an import declaration" (if (memv bC410b@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") bC40bf@e) (if (memv bC40d7@t '(mutable)) (bC319a@syntax-violation '#f '"attempt to reference an unexportable variable" bC40bf@e) (bC319a@syntax-violation '#f '"invalid expression" bC40bf@e))))))))))))))))))))))) (set! bC4ba1@bC30dc@chi-expr bC30dc@chi-expr) (set! bC30de@chi-set! (lambda (bC410d@e bC410e@r bC410f@mr) (let ((bC4113@t bC410d@e)) (let ((bC4115@ls/false (bC30ba@syntax-dispatch bC4113@t '(_ any any)))) (if (and bC4115@ls/false (apply (lambda (bC4117@x bC4118@v) (bC2eb3@id? bC4117@x)) bC4115@ls/false)) (apply (lambda (bC411b@x bC411c@v) (call-with-values (lambda () (bC2ed5@syntax-type bC411b@x bC410e@r)) (lambda (bC4125@bC4120 bC4126@bC4122 bC4127@bC4124) (let ((bC412b@kwd bC4127@bC4124) (bC412c@value bC4126@bC4122) (bC412d@type bC4125@bC4120)) (let ((bC4131@t bC412d@type)) (if (memv bC4131@t '(lexical)) (begin (bC3048@set-lexical-mutable! bC412c@value '#t) (list 'set! (bC3044@lexical-var bC412c@value) (bC30dc@chi-expr bC411c@v bC410e@r bC410f@mr))) (if (memv bC4131@t '(core-prim)) (bC319a@syntax-violation '#f '"cannot modify imported core primitive" bC410d@e) (if (memv bC4131@t '(global)) (bC319a@syntax-violation '#f '"attempt to modify imported binding" bC410d@e) (if (memv bC4131@t '(global-macro!)) (bC30dc@chi-expr (bC30d6@chi-global-macro bC412c@value bC410d@e) bC410e@r bC410f@mr) (if (memv bC4131@t '(local-macro!)) (bC30dc@chi-expr (bC30d4@chi-local-macro bC412c@value bC410d@e) bC410e@r bC410f@mr) (if (memv bC4131@t '(mutable)) (bC319a@syntax-violation '#f '"attempt to assign to an unexportable variable" bC410d@e) (bC319a@syntax-violation '#f '"invalid syntax" bC410d@e)))))))))))) bC4115@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC4113@t)))))) (set! bC4ba2@bC30de@chi-set! bC30de@chi-set!) (set! bC30e0@verify-formals (lambda (bC4133@fmls bC4134@stx) (let ((bC4137@t bC4133@fmls)) (let ((bC4139@ls/false (bC30ba@syntax-dispatch bC4137@t 'each-any))) (if bC4139@ls/false (apply (lambda (bC413b@x*) (if (not (bC2ebb@valid-bound-ids? bC413b@x*)) (bC3074@invalid-fmls-error bC4134@stx bC4133@fmls) (void))) bC4139@ls/false) (let ((bC413d@t bC4137@t)) (let ((bC413f@ls/false (bC30ba@syntax-dispatch bC413d@t '#(each+ any () any)))) (if bC413f@ls/false (apply (lambda (bC4141@x* bC4142@x) (if (not (bC2ebb@valid-bound-ids? (cons bC4142@x bC4141@x*))) (bC3074@invalid-fmls-error bC4134@stx bC4133@fmls) (void))) bC413f@ls/false) (let ((bC4145@t bC413d@t)) (let ((bC4147@ls/false (bC30ba@syntax-dispatch bC4145@t '_))) (if bC4147@ls/false (apply (lambda () (bC319a@syntax-violation '#f '"invalid syntax" bC4134@stx)) bC4147@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC4145@t)))))))))))) (set! bC4ba3@bC30e0@verify-formals bC30e0@verify-formals) (set! bC30e2@chi-lambda-clause (lambda (bC4149@stx bC414a@fmls bC414b@body* bC414c@r bC414d@mr) (let ((bC4153@t bC414a@fmls)) (let ((bC4155@ls/false (bC30ba@syntax-dispatch bC4153@t 'each-any))) (if bC4155@ls/false (apply (lambda (bC4157@x*) (begin (bC30e0@verify-formals bC414a@fmls bC4149@stx) (let ((bC4159@lex* (map bC2e3b@gen-lexical bC4157@x*)) (bC415a@lab* (map bC2e3f@gen-label bC4157@x*))) (values bC4159@lex* (bC30f2@chi-internal (bC2e9f@add-subst (bC2e73@make-full-rib bC4157@x* bC415a@lab*) bC414b@body*) (bC304c@add-lexicals bC415a@lab* bC4159@lex* bC414c@r) bC414d@mr))))) bC4155@ls/false) (let ((bC415d@t bC4153@t)) (let ((bC415f@ls/false (bC30ba@syntax-dispatch bC415d@t '#(each+ any () any)))) (if bC415f@ls/false (apply (lambda (bC4161@x* bC4162@x) (begin (bC30e0@verify-formals bC414a@fmls bC4149@stx) (let ((bC4165@lex* (map bC2e3b@gen-lexical bC4161@x*)) (bC4166@lab* (map bC2e3f@gen-label bC4161@x*)) (bC4167@lex (bC2e3b@gen-lexical bC4162@x)) (bC4168@lab (bC2e3f@gen-label bC4162@x))) (values (append bC4165@lex* bC4167@lex) (bC30f2@chi-internal (bC2e9f@add-subst (bC2e73@make-full-rib (cons bC4162@x bC4161@x*) (cons bC4168@lab bC4166@lab*)) bC414b@body*) (bC304c@add-lexicals (cons bC4168@lab bC4166@lab*) (cons bC4167@lex bC4165@lex*) bC414c@r) bC414d@mr))))) bC415f@ls/false) (let ((bC416d@t bC415d@t)) (let ((bC416f@ls/false (bC30ba@syntax-dispatch bC416d@t '_))) (if bC416f@ls/false (apply (lambda () (bC319a@syntax-violation '#f '"invalid syntax" bC414a@fmls)) bC416f@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC416d@t)))))))))))) (set! bC4ba4@bC30e2@chi-lambda-clause bC30e2@chi-lambda-clause) (set! bC30e4@chi-lambda-clause* (lambda (bC4171@stx bC4172@fmls* bC4173@body** bC4174@r bC4175@mr) (if (null? bC4172@fmls*) (values '() '()) (call-with-values (lambda () (bC30e2@chi-lambda-clause bC4171@stx (car bC4172@fmls*) (car bC4173@body**) bC4174@r bC4175@mr)) (lambda (bC417f@bC417c bC4180@bC417e) (let ((bC4183@b bC4180@bC417e) (bC4184@a bC417f@bC417c)) (call-with-values (lambda () (bC30e4@chi-lambda-clause* bC4171@stx (cdr bC4172@fmls*) (cdr bC4173@body**) bC4174@r bC4175@mr)) (lambda (bC418b@bC4188 bC418c@bC418a) (let ((bC418f@b* bC418c@bC418a) (bC4190@a* bC418b@bC4188)) (values (cons bC4184@a bC4190@a*) (cons bC4183@b bC418f@b*))))))))))) (set! bC4ba5@bC30e4@chi-lambda-clause* bC30e4@chi-lambda-clause*) (set! bC30e6@chi-defun (lambda (bC4193@x bC4194@r bC4195@mr) (let ((bC4199@fmls (car bC4193@x)) (bC419a@body* (cdr bC4193@x))) (call-with-values (lambda () (bC30e2@chi-lambda-clause bC4199@fmls bC4199@fmls bC419a@body* bC4194@r bC4195@mr)) (lambda (bC41a1@bC419e bC41a2@bC41a0) (let ((bC41a5@body bC41a2@bC41a0) (bC41a6@fmls bC41a1@bC419e)) (bC2e16@bC2d48@build-lambda '#f bC41a6@fmls bC41a5@body))))))) (set! bC4ba6@bC30e6@chi-defun bC30e6@chi-defun) (set! bC30e8@chi-rhs (lambda (bC41a9@rhs bC41aa@r bC41ab@mr) (let ((bC41af@t (car bC41a9@rhs))) (if (memv bC41af@t '(defun)) (bC30e6@chi-defun (cdr bC41a9@rhs) bC41aa@r bC41ab@mr) (if (memv bC41af@t '(expr)) (let ((bC41b1@expr (cdr bC41a9@rhs))) (bC30dc@chi-expr bC41b1@expr bC41aa@r bC41ab@mr)) (if (memv bC41af@t '(top-expr)) (let ((bC41b3@expr (cdr bC41a9@rhs))) (bC2e18@bC2d78@build-sequence '#f (list (bC30dc@chi-expr bC41b3@expr bC41aa@r bC41ab@mr) (bC2e19@bC2d7a@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" bC41a9@rhs))))))) (set! bC4ba7@bC30e8@chi-rhs bC30e8@chi-rhs) (set! bC30ea@expand-interaction-rhs*/init* (lambda (bC41b5@lhs* bC41b6@rhs* bC41b7@init* bC41b8@r bC41b9@mr) (let bC41c3@f ((bC41bf@lhs* bC41b5@lhs*) (bC41c0@rhs* bC41b6@rhs*)) (if (null? bC41bf@lhs*) (map (lambda (bC41c5@x) (bC30dc@chi-expr bC41c5@x bC41b8@r bC41b9@mr)) bC41b7@init*) (let ((bC41c7@lhs (car bC41bf@lhs*)) (bC41c8@rhs (car bC41c0@rhs*))) (let ((bC41cb@t (car bC41c8@rhs))) (if (memv bC41cb@t '(defun)) (let ((bC41cd@rhs (bC30e6@chi-defun (cdr bC41c8@rhs) bC41b8@r bC41b9@mr))) (cons (list 'set! bC41c7@lhs bC41cd@rhs) (bC41c3@f (cdr bC41bf@lhs*) (cdr bC41c0@rhs*)))) (if (memv bC41cb@t '(expr)) (let ((bC41cf@rhs (bC30dc@chi-expr (cdr bC41c8@rhs) bC41b8@r bC41b9@mr))) (cons (list 'set! bC41c7@lhs bC41cf@rhs) (bC41c3@f (cdr bC41bf@lhs*) (cdr bC41c0@rhs*)))) (if (memv bC41cb@t '(top-expr)) (let ((bC41d1@e (bC30dc@chi-expr (cdr bC41c8@rhs) bC41b8@r bC41b9@mr))) (cons bC41d1@e (bC41c3@f (cdr bC41bf@lhs*) (cdr bC41c0@rhs*)))) (error 'expand-interaction '"invallid" bC41c8@rhs)))))))))) (set! bC4ba8@bC30ea@expand-interaction-rhs*/init* bC30ea@expand-interaction-rhs*/init*) (set! bC30ec@chi-rhs* (lambda (bC41d3@rhs* bC41d4@r bC41d5@mr) (let bC41db@f ((bC41d9@ls bC41d3@rhs*)) (if (null? bC41d9@ls) '() (let ((bC41dd@a (bC30e8@chi-rhs (car bC41d9@ls) bC41d4@r bC41d5@mr))) (cons bC41dd@a (bC41db@f (cdr bC41d9@ls)))))))) (set! bC4ba9@bC30ec@chi-rhs* bC30ec@chi-rhs*) (set! bC30ee@find-bound=? (lambda (bC41df@x bC41e0@lhs* bC41e1@rhs*) (if (null? bC41e0@lhs*) '#f (if (bC2eb7@bound-id=? bC41df@x (car bC41e0@lhs*)) (car bC41e1@rhs*) (bC30ee@find-bound=? bC41df@x (cdr bC41e0@lhs*) (cdr bC41e1@rhs*)))))) (set! bC4baa@bC30ee@find-bound=? bC30ee@find-bound=?) (set! bC30f0@find-dups (lambda (bC41e5@ls) (let bC41eb@f ((bC41e7@ls bC41e5@ls) (bC41e8@dups '())) (if (null? bC41e7@ls) bC41e8@dups (let ((bC41ed@t (bC30ee@find-bound=? (car bC41e7@ls) (cdr bC41e7@ls) (cdr bC41e7@ls)))) (if bC41ed@t ((lambda (bC41ef@x) (bC41eb@f (cdr bC41e7@ls) (cons (list (car bC41e7@ls) bC41ef@x) bC41e8@dups))) bC41ed@t) (bC41eb@f (cdr bC41e7@ls) bC41e8@dups))))))) (set! bC4bab@bC30f0@find-dups bC30f0@find-dups) (set! bC30f2@chi-internal (lambda (bC41f1@e* bC41f2@r bC41f3@mr) (let ((bC41f7@rib (bC2e67@make-empty-rib))) (call-with-values (lambda () (bC3112@chi-body* (map (lambda (bC4209@x) (bC2e9f@add-subst bC41f7@rib bC4209@x)) (bC2eb1@syntax->list bC41f1@e*)) bC41f2@r bC41f3@mr '() '() '() '() '() bC41f7@rib '#f)) (lambda (bC420b@bC41fa bC420c@bC41fc bC420d@bC41fe bC420e@bC4200 bC420f@bC4202 bC4210@bC4204 bC4211@bC4206 bC4212@bC4208) (let ((bC421b@_exp* bC4212@bC4208) (bC421c@kwd* bC4211@bC4206) (bC421d@mod** bC4210@bC4204) (bC421e@rhs* bC420f@bC4202) (bC421f@lex* bC420e@bC4200) (bC4220@mr bC420d@bC41fe) (bC4221@r bC420c@bC41fc) (bC4222@e* bC420b@bC41fa)) (begin (if (null? bC4222@e*) (bC319a@syntax-violation '#f '"no expression in body" bC4222@e*) (void)) (let ((bC422b@init* (bC30d8@chi-expr* (append (apply append (reverse bC421d@mod**)) bC4222@e*) bC4221@r bC4220@mr))) (let ((bC422d@rhs* (bC30ec@chi-rhs* bC421e@rhs* bC4221@r bC4220@mr))) (bC2e1d@bC2d82@build-letrec* '#f (reverse bC421f@lex*) (reverse bC422d@rhs*) (bC2e18@bC2d78@build-sequence '#f bC422b@init*))))))))))) (set! bC4bac@bC30f2@chi-internal bC30f2@chi-internal) (set! bC30f4@parse-module (lambda (bC422f@e) (let ((bC4231@t bC422f@e)) (let ((bC4233@ls/false (bC30ba@syntax-dispatch bC4231@t '(_ each-any . each-any)))) (if bC4233@ls/false (apply (lambda (bC4235@export* bC4236@b*) (begin (if (not (for-all bC2eb3@id? bC4235@export*)) (bC319a@syntax-violation '#f '"module exports must be identifiers" bC422f@e) (void)) (values '#f (list->vector bC4235@export*) bC4236@b*))) bC4233@ls/false) (let ((bC4239@t bC4231@t)) (let ((bC423b@ls/false (bC30ba@syntax-dispatch bC4239@t '(_ any each-any . each-any)))) (if bC423b@ls/false (apply (lambda (bC423d@name bC423e@export* bC423f@b*) (begin (if (not (bC2eb3@id? bC423d@name)) (bC319a@syntax-violation '#f '"module name must be an identifier" bC422f@e) (void)) (if (not (for-all bC2eb3@id? bC423e@export*)) (bC319a@syntax-violation '#f '"module exports must be identifiers" bC422f@e) (void)) (values bC423d@name (list->vector bC423e@export*) bC423f@b*))) bC423b@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC4239@t))))))))) (set! bC4bad@bC30f4@parse-module bC30f4@parse-module) (set! bC30fe@module-interface? (lambda (bC4243@x) (and (simple-struct? bC4243@x) (eq? (simple-struct-name bC4243@x) 'module-interface)))) (set! bC4bae@bC30fe@module-interface? bC30fe@module-interface?) (set! bC3100@module-interface-first-mark (lambda (bC4245@x) (simple-struct-ref bC4245@x '0))) (set! bC4baf@bC3100@module-interface-first-mark bC3100@module-interface-first-mark) (set! bC3102@set-module-interface-first-mark! (lambda (bC4247@x bC4248@val) (simple-struct-set! bC4247@x '0 bC4248@val))) (set! bC4bb0@bC3102@set-module-interface-first-mark! bC3102@set-module-interface-first-mark!) (set! bC3104@module-interface-exp-id-vec (lambda (bC424b@x) (simple-struct-ref bC424b@x '1))) (set! bC4bb1@bC3104@module-interface-exp-id-vec bC3104@module-interface-exp-id-vec) (set! bC3106@set-module-interface-exp-id-vec! (lambda (bC424d@x bC424e@val) (simple-struct-set! bC424d@x '1 bC424e@val))) (set! bC4bb2@bC3106@set-module-interface-exp-id-vec! bC3106@set-module-interface-exp-id-vec!) (set! bC3108@module-interface-exp-lab-vec (lambda (bC4251@x) (simple-struct-ref bC4251@x '2))) (set! bC4bb3@bC3108@module-interface-exp-lab-vec bC3108@module-interface-exp-lab-vec) (set! bC310a@set-module-interface-exp-lab-vec! (lambda (bC4253@x bC4254@val) (simple-struct-set! bC4253@x '2 bC4254@val))) (set! bC4bb4@bC310a@set-module-interface-exp-lab-vec! bC310a@set-module-interface-exp-lab-vec!) (set! bC310c@dummy '3) (set! bC4bb5@bC310c@dummy bC310c@dummy) (set! bC310e@module-interface-exp-id* (lambda (bC4257@iface bC4258@id) (letrec* ((bC425c@diff-marks (lambda (bC4263@ls bC4264@x) (begin (if (null? bC4263@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((bC4267@a (car bC4263@ls))) (if (eq? bC4267@a bC4264@x) '() (cons bC4267@a (bC425c@diff-marks (cdr bC4263@ls) bC4264@x)))))))) (let ((bC425d@diff (bC425c@diff-marks (bC2e85@stx-mark* bC4258@id) (bC3100@module-interface-first-mark bC4257@iface))) (bC425e@id-vec (bC3104@module-interface-exp-id-vec bC4257@iface))) (if (null? bC425d@diff) bC425e@id-vec (vector-map (lambda (bC4261@x) (make-simple-struct 'stx '5 (list (bC2e81@stx-expr bC4261@x) (append bC425d@diff (bC2e85@stx-mark* bC4261@x)) '() '()))) bC425e@id-vec)))))) (set! bC4bb6@bC310e@module-interface-exp-id* bC310e@module-interface-exp-id*) (set! bC3110@chi-internal-module (lambda (bC4269@e bC426a@r bC426b@mr bC426c@lex* bC426d@rhs* bC426e@mod** bC426f@kwd*) (call-with-values (lambda () (bC30f4@parse-module bC4269@e)) (lambda (bC427d@bC4278 bC427e@bC427a bC427f@bC427c) (let ((bC4283@e* bC427f@bC427c) (bC4284@exp-id* bC427e@bC427a) (bC4285@name bC427d@bC4278)) (let ((bC4289@rib (bC2e67@make-empty-rib))) (let ((bC428b@e* (map (lambda (bC428d@x) (bC2e9f@add-subst bC4289@rib bC428d@x)) (bC2eb1@syntax->list bC4283@e*)))) (call-with-values (lambda () (bC3112@chi-body* bC428b@e* bC426a@r bC426b@mr bC426c@lex* bC426d@rhs* bC426e@mod** bC426f@kwd* '() bC4289@rib '#f)) (lambda (bC429f@bC4290 bC42a0@bC4292 bC42a1@bC4294 bC42a2@bC4296 bC42a3@bC4298 bC42a4@bC429a bC42a5@bC429c bC42a6@bC429e) (let ((bC42af@_exp* bC42a6@bC429e) (bC42b0@kwd* bC42a5@bC429c) (bC42b1@mod** bC42a4@bC429a) (bC42b2@rhs* bC42a3@bC4298) (bC42b3@lex* bC42a2@bC4296) (bC42b4@mr bC42a1@bC4294) (bC42b5@r bC42a0@bC4292) (bC42b6@e* bC429f@bC4290)) (let ((bC42bf@exp-lab* (vector-map (lambda (bC42c3@x) (or (bC2ec9@id->label (make-simple-struct 'stx '5 (list (bC2eb5@id->sym bC42c3@x) (bC2e85@stx-mark* bC42c3@x) (list bC4289@rib) '()))) (bC319a@syntax-violation '#f '"cannot find module export" bC42c3@x))) bC4284@exp-id*)) (bC42c0@mod** (cons bC42b6@e* bC42b1@mod**))) (if (not bC4285@name) (values bC42b3@lex* bC42b2@rhs* bC4284@exp-id* bC42bf@exp-lab* bC42b5@r bC42b4@mr bC42c0@mod** bC42b0@kwd*) (let ((bC42c5@lab (bC2e3f@gen-label 'module)) (bC42c6@iface (make-simple-struct 'module-interface '4 (list (car (bC2e85@stx-mark* bC4285@name)) (vector-map (lambda (bC42c9@x) (make-simple-struct 'stx '5 (list (bC2e81@stx-expr bC42c9@x) (bC2e85@stx-mark* bC42c9@x) '() '()))) bC4284@exp-id*) bC42bf@exp-lab*)))) (values bC42b3@lex* bC42b2@rhs* (vector bC4285@name) (vector bC42c5@lab) (cons (cons bC42c5@lab (cons '$module bC42c6@iface)) bC42b5@r) (cons (cons bC42c5@lab (cons '$module bC42c6@iface)) bC42b4@mr) bC42c0@mod** bC42b0@kwd*)))))))))))))) (set! bC4bb7@bC3110@chi-internal-module bC3110@chi-internal-module) (set! bC3112@chi-body* (lambda (bC42cb@e* bC42cc@r bC42cd@mr bC42ce@lex* bC42cf@rhs* bC42d0@mod** bC42d1@kwd* bC42d2@exp* bC42d3@rib bC42d4@top?) (if (null? bC42cb@e*) (values bC42cb@e* bC42cc@r bC42cd@mr bC42ce@lex* bC42cf@rhs* bC42d0@mod** bC42d1@kwd* bC42d2@exp*) (let ((bC42df@e (car bC42cb@e*))) (call-with-values (lambda () (bC2ed5@syntax-type bC42df@e bC42cc@r)) (lambda (bC42e7@bC42e2 bC42e8@bC42e4 bC42e9@bC42e6) (let ((bC42ed@kwd bC42e9@bC42e6) (bC42ee@value bC42e8@bC42e4) (bC42ef@type bC42e7@bC42e2)) (let ((bC42f3@kwd* (if (bC2eb3@id? bC42ed@kwd) (cons bC42ed@kwd bC42d1@kwd*) bC42d1@kwd*))) (let ((bC42f5@t bC42ef@type)) (if (memv bC42f5@t '(define)) (call-with-values (lambda () (bC303c@parse-define bC42df@e)) (lambda (bC42fb@bC42f8 bC42fc@bC42fa) (let ((bC42ff@rhs bC42fc@bC42fa) (bC4300@id bC42fb@bC42f8)) (begin (if (bC2ebf@bound-id-member? bC4300@id bC42f3@kwd*) (bC319a@syntax-violation '#f '"cannot redefine keyword" bC42df@e) (void)) (call-with-values (lambda () (bC2e43@gen-define-label+loc bC4300@id bC42d3@rib)) (lambda (bC4307@bC4304 bC4308@bC4306) (let ((bC430b@lex bC4308@bC4306) (bC430c@lab bC4307@bC4304)) (begin (bC2e69@extend-rib! bC42d3@rib bC4300@id bC430c@lab) (bC3112@chi-body* (cdr bC42cb@e*) (bC304a@add-lexical bC430c@lab bC430b@lex bC42cc@r) bC42cd@mr (cons bC430b@lex bC42ce@lex*) (cons bC42ff@rhs bC42cf@rhs*) bC42d0@mod** bC42f3@kwd* bC42d2@exp* bC42d3@rib bC42d4@top?))))))))) (if (memv bC42f5@t '(define-syntax)) (call-with-values (lambda () (bC303e@parse-define-syntax bC42df@e)) (lambda (bC4313@bC4310 bC4314@bC4312) (let ((bC4317@rhs bC4314@bC4312) (bC4318@id bC4313@bC4310)) (begin (if (bC2ebf@bound-id-member? bC4318@id bC42f3@kwd*) (bC319a@syntax-violation '#f '"cannot redefine keyword" bC42df@e) (void)) (let ((bC431b@lab (bC2e45@gen-define-label bC4318@id bC42d3@rib)) (bC431c@expanded-rhs (bC3114@expand-transformer bC4317@rhs bC42cd@mr))) (begin (bC2e69@extend-rib! bC42d3@rib bC4318@id bC431b@lab) (let ((bC431f@b (bC2eeb@make-eval-transformer bC431c@expanded-rhs))) (bC3112@chi-body* (cdr bC42cb@e*) (cons (cons bC431b@lab bC431f@b) bC42cc@r) (cons (cons bC431b@lab bC431f@b) bC42cd@mr) bC42ce@lex* bC42cf@rhs* bC42d0@mod** bC42f3@kwd* bC42d2@exp* bC42d3@rib bC42d4@top?)))))))) (if (memv bC42f5@t '(let-syntax letrec-syntax)) (let ((bC4321@t bC42df@e)) (let ((bC4323@ls/false (bC30ba@syntax-dispatch bC4321@t '(_ #(each (any any)) . each-any)))) (if (and bC4323@ls/false (apply (lambda (bC4325@xlhs* bC4326@xrhs* bC4327@xbody*) (if (not (bC2ebb@valid-bound-ids? bC4325@xlhs*)) (bC319a@syntax-violation '#f '"invalid identifiers" bC42df@e) (void))) bC4323@ls/false)) (apply (lambda (bC432b@xlhs* bC432c@xrhs* bC432d@xbody*) (let ((bC4331@xlab* (map bC2e3f@gen-label bC432b@xlhs*))) (let ((bC4333@xrib (bC2e73@make-full-rib bC432b@xlhs* bC4331@xlab*))) (let ((bC4335@xb* (map (lambda (bC4337@x) (bC2eeb@make-eval-transformer (bC3114@expand-transformer (if (eq? bC42ef@type 'let-syntax) bC4337@x (bC2e9f@add-subst bC4333@xrib bC4337@x)) bC42cd@mr))) bC432c@xrhs*))) (bC3112@chi-body* (append (map (lambda (bC4339@x) (bC2e9f@add-subst bC4333@xrib bC4339@x)) bC432d@xbody*) (cdr bC42cb@e*)) (append (map cons bC4331@xlab* bC4335@xb*) bC42cc@r) (append (map cons bC4331@xlab* bC4335@xb*) bC42cd@mr) bC42ce@lex* bC42cf@rhs* bC42d0@mod** bC42f3@kwd* bC42d2@exp* bC42d3@rib bC42d4@top?))))) bC4323@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC4321@t)))) (if (memv bC42f5@t '(begin)) (let ((bC433b@t bC42df@e)) (let ((bC433d@ls/false (bC30ba@syntax-dispatch bC433b@t '(_ . each-any)))) (if bC433d@ls/false (apply (lambda (bC433f@x*) (bC3112@chi-body* (append bC433f@x* (cdr bC42cb@e*)) bC42cc@r bC42cd@mr bC42ce@lex* bC42cf@rhs* bC42d0@mod** bC42f3@kwd* bC42d2@exp* bC42d3@rib bC42d4@top?)) bC433d@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC433b@t)))) (if (memv bC42f5@t '(global-macro global-macro!)) (bC3112@chi-body* (cons (bC2e9f@add-subst bC42d3@rib (bC30d6@chi-global-macro bC42ee@value bC42df@e)) (cdr bC42cb@e*)) bC42cc@r bC42cd@mr bC42ce@lex* bC42cf@rhs* bC42d0@mod** bC42f3@kwd* bC42d2@exp* bC42d3@rib bC42d4@top?) (if (memv bC42f5@t '(local-macro local-macro!)) (bC3112@chi-body* (cons (bC2e9f@add-subst bC42d3@rib (bC30d4@chi-local-macro bC42ee@value bC42df@e)) (cdr bC42cb@e*)) bC42cc@r bC42cd@mr bC42ce@lex* bC42cf@rhs* bC42d0@mod** bC42f3@kwd* bC42d2@exp* bC42d3@rib bC42d4@top?) (if (memv bC42f5@t '(macro macro!)) (bC3112@chi-body* (cons (bC2e9f@add-subst bC42d3@rib (bC30d2@chi-macro bC42ee@value bC42df@e)) (cdr bC42cb@e*)) bC42cc@r bC42cd@mr bC42ce@lex* bC42cf@rhs* bC42d0@mod** bC42f3@kwd* bC42d2@exp* bC42d3@rib bC42d4@top?) (if (memv bC42f5@t '(module)) (call-with-values (lambda () (bC3110@chi-internal-module bC42df@e bC42cc@r bC42cd@mr bC42ce@lex* bC42cf@rhs* bC42d0@mod** bC42f3@kwd*)) (lambda (bC4351@bC4342 bC4352@bC4344 bC4353@bC4346 bC4354@bC4348 bC4355@bC434a bC4356@bC434c bC4357@bC434e bC4358@bC4350) (let ((bC4361@kwd* bC4358@bC4350) (bC4362@mod** bC4357@bC434e) (bC4363@mr bC4356@bC434c) (bC4364@r bC4355@bC434a) (bC4365@m-exp-lab* bC4354@bC4348) (bC4366@m-exp-id* bC4353@bC4346) (bC4367@rhs* bC4352@bC4344) (bC4368@lex* bC4351@bC4342)) (begin (vector-for-each (lambda (bC4371@id bC4372@lab) (bC2e69@extend-rib! bC42d3@rib bC4371@id bC4372@lab)) bC4366@m-exp-id* bC4365@m-exp-lab*) (bC3112@chi-body* (cdr bC42cb@e*) bC4364@r bC4363@mr bC4368@lex* bC4367@rhs* bC4362@mod** bC4361@kwd* bC42d2@exp* bC42d3@rib bC42d4@top?))))) (if (memv bC42f5@t '(library)) (begin (bC317c@library-expander (bC2ec7@stx->datum bC42df@e)) (bC3112@chi-body* (cdr bC42cb@e*) bC42cc@r bC42cd@mr bC42ce@lex* bC42cf@rhs* bC42d0@mod** bC42f3@kwd* bC42d2@exp* bC42d3@rib bC42d4@top?)) (if (memv bC42f5@t '(export)) (let ((bC4375@t bC42df@e)) (let ((bC4377@ls/false (bC30ba@syntax-dispatch bC4375@t '(_ . each-any)))) (if bC4377@ls/false (apply (lambda (bC4379@exp-decl*) (bC3112@chi-body* (cdr bC42cb@e*) bC42cc@r bC42cd@mr bC42ce@lex* bC42cf@rhs* bC42d0@mod** bC42f3@kwd* (append bC4379@exp-decl* bC42d2@exp*) bC42d3@rib bC42d4@top?)) bC4377@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC4375@t)))) (if (memv bC42f5@t '(import)) (letrec* ((bC437c@module-import? (lambda (bC43cf@e) (let ((bC43d1@t bC43cf@e)) (let ((bC43d3@ls/false (bC30ba@syntax-dispatch bC43d1@t '(_ any)))) (if (and bC43d3@ls/false (apply (lambda (bC43d5@id) (bC2eb3@id? bC43d5@id)) bC43d3@ls/false)) (apply (lambda (bC43d7@id) '#t) bC43d3@ls/false) (let ((bC43d9@t bC43d1@t)) (let ((bC43db@ls/false (bC30ba@syntax-dispatch bC43d9@t '(_ . each-any)))) (if bC43db@ls/false (apply (lambda (bC43dd@imp*) '#f) bC43db@ls/false) (let ((bC43df@t bC43d9@t)) (let ((bC43e1@ls/false (bC30ba@syntax-dispatch bC43df@t '_))) (if bC43e1@ls/false (apply (lambda () (bC319a@syntax-violation '#f '"malformed import form" bC43cf@e)) bC43e1@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC43df@t)))))))))))) (bC437e@module-import (lambda (bC43ad@e bC43ae@r) (let ((bC43b1@t bC43ad@e)) (let ((bC43b3@ls/false (bC30ba@syntax-dispatch bC43b1@t '(_ any)))) (if (and bC43b3@ls/false (apply (lambda (bC43b5@id) (bC2eb3@id? bC43b5@id)) bC43b3@ls/false)) (apply (lambda (bC43b7@id) (call-with-values (lambda () (bC2ed5@syntax-type bC43b7@id bC43ae@r)) (lambda (bC43bf@bC43ba bC43c0@bC43bc bC43c1@bC43be) (let ((bC43c5@kwd bC43c1@bC43be) (bC43c6@value bC43c0@bC43bc) (bC43c7@type bC43bf@bC43ba)) (let ((bC43cb@t bC43c7@type)) (if (memv bC43cb@t '($module)) (let ((bC43cd@iface bC43c6@value)) (values (bC310e@module-interface-exp-id* bC43cd@iface bC43b7@id) (bC3108@module-interface-exp-lab-vec bC43cd@iface))) (bC319a@syntax-violation '#f '"invalid import" bC43ad@e))))))) bC43b3@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC43b1@t)))))) (bC4380@library-import (lambda (bC4391@e) (let ((bC4393@t bC4391@e)) (let ((bC4395@ls/false (bC30ba@syntax-dispatch bC4393@t '(any . each-any)))) (if bC4395@ls/false (apply (lambda (bC4397@ctxt bC4398@imp*) (call-with-values (lambda () (bC311c@parse-import-spec* (bC31a0@syntax->datum bC4398@imp*))) (lambda (bC439f@bC439c bC43a0@bC439e) (let ((bC43a3@subst-labels bC43a0@bC439e) (bC43a4@subst-names bC439f@bC439c)) (values (vector-map (lambda (bC43a7@name) (bC2e93@datum->stx bC4397@ctxt bC43a7@name)) bC43a4@subst-names) bC43a3@subst-labels))))) bC4395@ls/false) (let ((bC43a9@t bC4393@t)) (let ((bC43ab@ls/false (bC30ba@syntax-dispatch bC43a9@t '_))) (if bC43ab@ls/false (apply (lambda () (bC319a@syntax-violation '#f '"invalid import form" bC4391@e)) bC43ab@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC43a9@t)))))))))) (begin (call-with-values (lambda () (if (bC437c@module-import? bC42df@e) (bC437e@module-import bC42df@e bC42cc@r) (bC4380@library-import bC42df@e))) (lambda (bC4385@bC4382 bC4386@bC4384) (let ((bC4389@lab* bC4386@bC4384) (bC438a@id* bC4385@bC4382)) (vector-for-each (lambda (bC438d@id bC438e@lab) (bC2e69@extend-rib! bC42d3@rib bC438d@id bC438e@lab)) bC438a@id* bC4389@lab*)))) (bC3112@chi-body* (cdr bC42cb@e*) bC42cc@r bC42cd@mr bC42ce@lex* bC42cf@rhs* bC42d0@mod** bC42f3@kwd* bC42d2@exp* bC42d3@rib bC42d4@top?))) (if bC42d4@top? (bC3112@chi-body* (cdr bC42cb@e*) bC42cc@r bC42cd@mr (cons (bC2e3b@gen-lexical 'dummy) bC42ce@lex*) (cons (cons 'top-expr bC42df@e) bC42cf@rhs*) bC42d0@mod** bC42f3@kwd* bC42d2@exp* bC42d3@rib bC42d4@top?) (values bC42cb@e* bC42cc@r bC42cd@mr bC42ce@lex* bC42cf@rhs* bC42d0@mod** bC42f3@kwd* bC42d2@exp*)))))))))))))))))))))) (set! bC4bb8@bC3112@chi-body* bC3112@chi-body*) (set! bC3114@expand-transformer (lambda (bC43e3@expr bC43e4@r) (let ((bC43e7@rtc (bC3120@make-collector))) (let ((bC43e9@expanded-rhs (let ((bC43f3@bC43ec bC3122@inv-collector) (bC43f4@bC43ee bC3124@vis-collector) (bC43f5@bC43f0 bC43e7@rtc) (bC43f6@bC43f2 (lambda (bC43fb@x) (values)))) (let ((bC43fd@swap (lambda () (begin (let ((bC43ff@t (bC43f3@bC43ec))) (begin (bC43f3@bC43ec bC43f5@bC43f0) (set! bC43f5@bC43f0 bC43ff@t))) (let ((bC4401@t (bC43f4@bC43ee))) (begin (bC43f4@bC43ee bC43f6@bC43f2) (set! bC43f6@bC43f2 bC4401@t))))))) (dynamic-wind bC43fd@swap (lambda () (bC30dc@chi-expr bC43e3@expr bC43e4@r bC43e4@r)) bC43fd@swap))))) (begin (for-each (let ((bC4403@mark-visit (bC3124@vis-collector))) (lambda (bC4405@x) (begin (bC2ccf@bC2b1d@invoke-library bC4405@x) (bC4403@mark-visit bC4405@x)))) (bC43e7@rtc)) bC43e9@expanded-rhs))))) (set! bC4bb9@bC3114@expand-transformer bC3114@expand-transformer) (set! bC3116@parse-exports (lambda (bC4407@exp*) (let bC440f@f ((bC4409@exp* bC4407@exp*) (bC440a@int* '()) (bC440b@ext* '())) (if (null? bC4409@exp*) (begin (if (not (bC2ebb@valid-bound-ids? bC440b@ext*)) (bC319a@syntax-violation 'export '"invalid exports" (bC30f0@find-dups bC440b@ext*)) (void)) (values (map bC31a0@syntax->datum bC440b@ext*) bC440a@int*)) (let ((bC4411@t (car bC4409@exp*))) (let ((bC4413@ls/false (bC30ba@syntax-dispatch bC4411@t '(any . #(each (any any)))))) (if bC4413@ls/false (apply (lambda (bC4415@rename bC4416@i* bC4417@e*) (begin (if (not (and (eq? (bC31a0@syntax->datum bC4415@rename) 'rename) (for-all bC2eb3@id? bC4416@i*) (for-all bC2eb3@id? bC4417@e*))) (bC319a@syntax-violation 'export '"invalid export specifier" (car bC4409@exp*)) (void)) (bC440f@f (cdr bC4409@exp*) (append bC4416@i* bC440a@int*) (append bC4417@e* bC440b@ext*)))) bC4413@ls/false) (let ((bC441b@t bC4411@t)) (let ((bC441d@ls/false (bC30ba@syntax-dispatch bC441b@t 'any))) (if bC441d@ls/false (apply (lambda (bC441f@ie) (begin (if (not (bC2eb3@id? bC441f@ie)) (bC319a@syntax-violation 'export '"invalid export" bC441f@ie) (void)) (bC440f@f (cdr bC4409@exp*) (cons bC441f@ie bC440a@int*) (cons bC441f@ie bC440b@ext*)))) bC441d@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC441b@t))))))))))) (set! bC4bba@bC3116@parse-exports bC3116@parse-exports) (set! bC3118@parse-library-name (lambda (bC4421@spec) (letrec* ((bC4424@parse (lambda (bC4431@x) (let ((bC4433@t bC4431@x)) (let ((bC4435@ls/false (bC30ba@syntax-dispatch bC4433@t '(each-any)))) (if (and bC4435@ls/false (apply (lambda (bC4437@v*) (for-all (lambda (bC4439@x) (let ((bC443b@x (bC31a0@syntax->datum bC4439@x))) (and (integer? bC443b@x) (exact? bC443b@x)))) bC4437@v*)) bC4435@ls/false)) (apply (lambda (bC443d@v*) (values '() (map bC31a0@syntax->datum bC443d@v*))) bC4435@ls/false) (let ((bC443f@t bC4433@t)) (let ((bC4441@ls/false (bC30ba@syntax-dispatch bC443f@t '(any . any)))) (if (and bC4441@ls/false (apply (lambda (bC4443@x bC4444@rest) (symbol? (bC31a0@syntax->datum bC4443@x))) bC4441@ls/false)) (apply (lambda (bC4447@x bC4448@rest) (call-with-values (lambda () (bC4424@parse bC4448@rest)) (lambda (bC444f@bC444c bC4450@bC444e) (let ((bC4453@v* bC4450@bC444e) (bC4454@x* bC444f@bC444c)) (values (cons (bC31a0@syntax->datum bC4447@x) bC4454@x*) bC4453@v*))))) bC4441@ls/false) (let ((bC4457@t bC443f@t)) (let ((bC4459@ls/false (bC30ba@syntax-dispatch bC4457@t '()))) (if bC4459@ls/false (apply (lambda () (values '() '())) bC4459@ls/false) (let ((bC445b@t bC4457@t)) (let ((bC445d@ls/false (bC30ba@syntax-dispatch bC445b@t '_))) (if bC445d@ls/false (apply (lambda () (bC319a@syntax-violation '#f '"invalid library name" bC4421@spec)) bC445d@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC445b@t)))))))))))))))) (call-with-values (lambda () (bC4424@parse bC4421@spec)) (lambda (bC4429@bC4426 bC442a@bC4428) (let ((bC442d@ver* bC442a@bC4428) (bC442e@name* bC4429@bC4426)) (begin (if (null? bC442e@name*) (bC319a@syntax-violation '#f '"empty library name" bC4421@spec) (void)) (values bC442e@name* bC442d@ver*)))))))) (set! bC4bbb@bC3118@parse-library-name bC3118@parse-library-name) (set! bC311a@parse-library (lambda (bC445f@e) (let ((bC4461@t bC445f@e)) (let ((bC4463@ls/false (bC30ba@syntax-dispatch bC4461@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and bC4463@ls/false (apply (lambda (bC4465@library bC4466@name* bC4467@export bC4468@exp* bC4469@import bC446a@imp* bC446b@b*) (and (eq? (bC31a0@syntax->datum bC4467@export) 'export) (eq? (bC31a0@syntax->datum bC4469@import) 'import) (eq? (bC31a0@syntax->datum bC4465@library) 'library))) bC4463@ls/false)) (apply (lambda (bC4473@library bC4474@name* bC4475@export bC4476@exp* bC4477@import bC4478@imp* bC4479@b*) (values bC4474@name* bC4476@exp* bC4478@imp* bC4479@b*)) bC4463@ls/false) (let ((bC4481@t bC4461@t)) (let ((bC4483@ls/false (bC30ba@syntax-dispatch bC4481@t '_))) (if bC4483@ls/false (apply (lambda () (bC319a@syntax-violation '#f '"malformed library" bC445f@e)) bC4483@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC4481@t))))))))) (set! bC4bbc@bC311a@parse-library bC311a@parse-library) (set! bC311c@parse-import-spec* (letrec* ((bC4486@idsyn? (lambda (bC468f@x) (symbol? (bC31a0@syntax->datum bC468f@x)))) (bC4488@dup-error (lambda (bC468d@name) (bC319a@syntax-violation 'import '"two imports with different bindings" bC468d@name))) (bC448a@merge-substs (lambda (bC467b@s bC467c@subst) (letrec* ((bC4680@insert-to-subst (lambda (bC4681@a bC4682@subst) (let ((bC4685@name (car bC4681@a)) (bC4686@label (cdr bC4681@a))) (let ((bC4689@t (assq bC4685@name bC4682@subst))) (if bC4689@t ((lambda (bC468b@x) (if (eq? (cdr bC468b@x) bC4686@label) bC4682@subst (bC4488@dup-error bC4685@name))) bC4689@t) (cons bC4681@a bC4682@subst))))))) (if (null? bC467b@s) bC467c@subst (bC4680@insert-to-subst (car bC467b@s) (bC448a@merge-substs (cdr bC467b@s) bC467c@subst)))))) (bC448c@exclude* (lambda (bC464b@sym* bC464c@subst) (letrec* ((bC4650@exclude (lambda (bC4669@sym bC466a@subst) (if (null? bC466a@subst) (bC319a@syntax-violation 'import '"cannot rename unbound identifier" bC4669@sym) (if (eq? bC4669@sym (caar bC466a@subst)) (values (cdar bC466a@subst) (cdr bC466a@subst)) (let ((bC466d@a (car bC466a@subst))) (call-with-values (lambda () (bC4650@exclude bC4669@sym (cdr bC466a@subst))) (lambda (bC4673@bC4670 bC4674@bC4672) (let ((bC4677@subst bC4674@bC4672) (bC4678@old bC4673@bC4670)) (values bC4678@old (cons bC466d@a bC4677@subst))))))))))) (if (null? bC464b@sym*) (values '() bC464c@subst) (call-with-values (lambda () (bC4650@exclude (car bC464b@sym*) bC464c@subst)) (lambda (bC4655@bC4652 bC4656@bC4654) (let ((bC4659@subst bC4656@bC4654) (bC465a@old bC4655@bC4652)) (call-with-values (lambda () (bC448c@exclude* (cdr bC464b@sym*) bC4659@subst)) (lambda (bC4661@bC465e bC4662@bC4660) (let ((bC4665@subst bC4662@bC4660) (bC4666@old* bC4661@bC465e)) (values (cons bC465a@old bC4666@old*) bC4665@subst))))))))))) (bC448e@find* (lambda (bC4643@sym* bC4644@subst) (map (lambda (bC4647@x) (let ((bC4649@t (assq bC4647@x bC4644@subst))) (if bC4649@t (cdr bC4649@t) (bC319a@syntax-violation 'import '"cannot find identifier" bC4647@x)))) bC4643@sym*))) (bC4490@rem* (lambda (bC463b@sym* bC463c@subst) (let bC4641@f ((bC463f@subst bC463c@subst)) (if (null? bC463f@subst) '() (if (memq (caar bC463f@subst) bC463b@sym*) (bC4641@f (cdr bC463f@subst)) (cons (car bC463f@subst) (bC4641@f (cdr bC463f@subst)))))))) (bC4492@remove-dups (lambda (bC4639@ls) (if (null? bC4639@ls) '() (if (memq (car bC4639@ls) (cdr bC4639@ls)) (bC4492@remove-dups (cdr bC4639@ls)) (cons (car bC4639@ls) (bC4492@remove-dups (cdr bC4639@ls))))))) (bC4494@parse-library-name (lambda (bC4551@spec) (letrec* ((bC4554@subversion? (lambda (bC4635@x) (let ((bC4637@x (bC31a0@syntax->datum bC4635@x))) (and (integer? bC4637@x) (exact? bC4637@x) (>= bC4637@x '0))))) (bC4556@subversion-pred (lambda (bC45d5@x*) (let ((bC45d7@t bC45d5@x*)) (let ((bC45d9@ls/false (bC30ba@syntax-dispatch bC45d7@t 'any))) (if (and bC45d9@ls/false (apply (lambda (bC45db@n) (bC4554@subversion? bC45db@n)) bC45d9@ls/false)) (apply (lambda (bC45dd@n) (lambda (bC45df@x) (= bC45df@x (bC31a0@syntax->datum bC45dd@n)))) bC45d9@ls/false) (let ((bC45e1@t bC45d7@t)) (let ((bC45e3@ls/false (bC30ba@syntax-dispatch bC45e1@t '(any . each-any)))) (if (and bC45e3@ls/false (apply (lambda (bC45e5@p? bC45e6@sub*) (eq? (bC31a0@syntax->datum bC45e5@p?) 'and)) bC45e3@ls/false)) (apply (lambda (bC45e9@p? bC45ea@sub*) (let ((bC45ed@p* (map bC4556@subversion-pred bC45ea@sub*))) (lambda (bC45ef@x) (for-all (lambda (bC45f1@p) (bC45f1@p bC45ef@x)) bC45ed@p*)))) bC45e3@ls/false) (let ((bC45f3@t bC45e1@t)) (let ((bC45f5@ls/false (bC30ba@syntax-dispatch bC45f3@t '(any . each-any)))) (if (and bC45f5@ls/false (apply (lambda (bC45f7@p? bC45f8@sub*) (eq? (bC31a0@syntax->datum bC45f7@p?) 'or)) bC45f5@ls/false)) (apply (lambda (bC45fb@p? bC45fc@sub*) (let ((bC45ff@p* (map bC4556@subversion-pred bC45fc@sub*))) (lambda (bC4601@x) (exists (lambda (bC4603@p) (bC4603@p bC4601@x)) bC45ff@p*)))) bC45f5@ls/false) (let ((bC4605@t bC45f3@t)) (let ((bC4607@ls/false (bC30ba@syntax-dispatch bC4605@t '(any any)))) (if (and bC4607@ls/false (apply (lambda (bC4609@p? bC460a@sub) (eq? (bC31a0@syntax->datum bC4609@p?) 'not)) bC4607@ls/false)) (apply (lambda (bC460d@p? bC460e@sub) (let ((bC4611@p (bC4556@subversion-pred bC460e@sub))) (lambda (bC4613@x) (not (bC4611@p bC4613@x))))) bC4607@ls/false) (let ((bC4615@t bC4605@t)) (let ((bC4617@ls/false (bC30ba@syntax-dispatch bC4615@t '(any any)))) (if (and bC4617@ls/false (apply (lambda (bC4619@p? bC461a@n) (and (eq? (bC31a0@syntax->datum bC4619@p?) '<=) (bC4554@subversion? bC461a@n))) bC4617@ls/false)) (apply (lambda (bC461d@p? bC461e@n) (lambda (bC4621@x) (<= bC4621@x (bC31a0@syntax->datum bC461e@n)))) bC4617@ls/false) (let ((bC4623@t bC4615@t)) (let ((bC4625@ls/false (bC30ba@syntax-dispatch bC4623@t '(any any)))) (if (and bC4625@ls/false (apply (lambda (bC4627@p? bC4628@n) (and (eq? (bC31a0@syntax->datum bC4627@p?) '>=) (bC4554@subversion? bC4628@n))) bC4625@ls/false)) (apply (lambda (bC462b@p? bC462c@n) (lambda (bC462f@x) (>= bC462f@x (bC31a0@syntax->datum bC462c@n)))) bC4625@ls/false) (let ((bC4631@t bC4623@t)) (let ((bC4633@ls/false (bC30ba@syntax-dispatch bC4631@t '_))) (if bC4633@ls/false (apply (lambda () (bC319a@syntax-violation 'import '"invalid sub-version spec" bC4551@spec bC45d5@x*)) bC4633@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC4631@t)))))))))))))))))))))))) (bC4558@version-pred (lambda (bC4585@x*) (let ((bC4587@t bC4585@x*)) (let ((bC4589@ls/false (bC30ba@syntax-dispatch bC4587@t '()))) (if bC4589@ls/false (apply (lambda () (lambda (bC458b@x) '#t)) bC4589@ls/false) (let ((bC458d@t bC4587@t)) (let ((bC458f@ls/false (bC30ba@syntax-dispatch bC458d@t '(any . each-any)))) (if (and bC458f@ls/false (apply (lambda (bC4591@c bC4592@ver*) (eq? (bC31a0@syntax->datum bC4591@c) 'and)) bC458f@ls/false)) (apply (lambda (bC4595@c bC4596@ver*) (let ((bC4599@p* (map bC4558@version-pred bC4596@ver*))) (lambda (bC459b@x) (for-all (lambda (bC459d@p) (bC459d@p bC459b@x)) bC4599@p*)))) bC458f@ls/false) (let ((bC459f@t bC458d@t)) (let ((bC45a1@ls/false (bC30ba@syntax-dispatch bC459f@t '(any . each-any)))) (if (and bC45a1@ls/false (apply (lambda (bC45a3@c bC45a4@ver*) (eq? (bC31a0@syntax->datum bC45a3@c) 'or)) bC45a1@ls/false)) (apply (lambda (bC45a7@c bC45a8@ver*) (let ((bC45ab@p* (map bC4558@version-pred bC45a8@ver*))) (lambda (bC45ad@x) (exists (lambda (bC45af@p) (bC45af@p bC45ad@x)) bC45ab@p*)))) bC45a1@ls/false) (let ((bC45b1@t bC459f@t)) (let ((bC45b3@ls/false (bC30ba@syntax-dispatch bC45b1@t '(any any)))) (if (and bC45b3@ls/false (apply (lambda (bC45b5@c bC45b6@ver) (eq? (bC31a0@syntax->datum bC45b5@c) 'not)) bC45b3@ls/false)) (apply (lambda (bC45b9@c bC45ba@ver) (let ((bC45bd@p (bC4558@version-pred bC45ba@ver))) (lambda (bC45bf@x) (not (bC45bd@p bC45bf@x))))) bC45b3@ls/false) (let ((bC45c1@t bC45b1@t)) (let ((bC45c3@ls/false (bC30ba@syntax-dispatch bC45c1@t 'each-any))) (if bC45c3@ls/false (apply (lambda (bC45c5@sub*) (let ((bC45c7@p* (map bC4556@subversion-pred bC45c5@sub*))) (lambda (bC45c9@x) (let bC45cf@f ((bC45cb@p* bC45c7@p*) (bC45cc@x bC45c9@x)) (if (null? bC45cb@p*) '#t (if (null? bC45cc@x) '#f (and ((car bC45cb@p*) (car bC45cc@x)) (bC45cf@f (cdr bC45cb@p*) (cdr bC45cc@x))))))))) bC45c3@ls/false) (let ((bC45d1@t bC45c1@t)) (let ((bC45d3@ls/false (bC30ba@syntax-dispatch bC45d1@t '_))) (if bC45d3@ls/false (apply (lambda () (bC319a@syntax-violation 'import '"invalid version spec" bC4551@spec bC4585@x*)) bC45d3@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC45d1@t)))))))))))))))))))))) (let bC455b@f ((bC4559@x bC4551@spec)) (let ((bC455d@t bC4559@x)) (let ((bC455f@ls/false (bC30ba@syntax-dispatch bC455d@t '(each-any)))) (if bC455f@ls/false (apply (lambda (bC4561@version-spec*) (values '() (bC4558@version-pred bC4561@version-spec*))) bC455f@ls/false) (let ((bC4563@t bC455d@t)) (let ((bC4565@ls/false (bC30ba@syntax-dispatch bC4563@t '(any . any)))) (if (and bC4565@ls/false (apply (lambda (bC4567@x bC4568@x*) (bC4486@idsyn? bC4567@x)) bC4565@ls/false)) (apply (lambda (bC456b@x bC456c@x*) (call-with-values (lambda () (bC455b@f bC456c@x*)) (lambda (bC4573@bC4570 bC4574@bC4572) (let ((bC4577@pred bC4574@bC4572) (bC4578@name bC4573@bC4570)) (values (cons (bC31a0@syntax->datum bC456b@x) bC4578@name) bC4577@pred))))) bC4565@ls/false) (let ((bC457b@t bC4563@t)) (let ((bC457d@ls/false (bC30ba@syntax-dispatch bC457b@t '()))) (if bC457d@ls/false (apply (lambda () (values '() (lambda (bC457f@x) '#t))) bC457d@ls/false) (let ((bC4581@t bC457b@t)) (let ((bC4583@ls/false (bC30ba@syntax-dispatch bC4581@t '_))) (if bC4583@ls/false (apply (lambda () (bC319a@syntax-violation '#f '"invalid import spec" bC4551@spec)) bC4583@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC4581@t))))))))))))))))) (bC4496@import-library (lambda (bC4541@spec*) (call-with-values (lambda () (bC4494@parse-library-name bC4541@spec*)) (lambda (bC4547@bC4544 bC4548@bC4546) (let ((bC454b@pred bC4548@bC4546) (bC454c@name bC4547@bC4544)) (begin (if (null? bC454c@name) (bC319a@syntax-violation 'import '"empty library name" bC4541@spec*) (void)) (let ((bC454f@lib (bC2cc8@bC2b0f@find-library-by-name bC454c@name))) (begin (if (not bC454f@lib) (bC319a@syntax-violation 'import '"cannot find library with required name" bC454c@name) (void)) (if (not (bC454b@pred (bC2ca2@bC2ac3@library-version bC454f@lib))) (bC319a@syntax-violation 'import '"library does not satisfy version specification" bC4541@spec* bC454f@lib) (void)) ((bC3126@imp-collector) bC454f@lib) (bC2caa@bC2ad3@library-subst bC454f@lib))))))))) (bC4498@get-import (lambda (bC44b3@spec) (let ((bC44b5@t bC44b3@spec)) (let ((bC44b7@ls/false (bC30ba@syntax-dispatch bC44b5@t '(any . each-any)))) (if (and bC44b7@ls/false (apply (lambda (bC44b9@x bC44ba@x*) (not (memq (bC31a0@syntax->datum bC44b9@x) '(for rename except only prefix library)))) bC44b7@ls/false)) (apply (lambda (bC44bd@x bC44be@x*) (bC4496@import-library (cons bC44bd@x bC44be@x*))) bC44b7@ls/false) (let ((bC44c1@t bC44b5@t)) (let ((bC44c3@ls/false (bC30ba@syntax-dispatch bC44c1@t '(any any . #(each (any any)))))) (if (and bC44c3@ls/false (apply (lambda (bC44c5@rename bC44c6@isp bC44c7@old* bC44c8@new*) (and (eq? (bC31a0@syntax->datum bC44c5@rename) 'rename) (for-all bC4486@idsyn? bC44c7@old*) (for-all bC4486@idsyn? bC44c8@new*))) bC44c3@ls/false)) (apply (lambda (bC44cd@rename bC44ce@isp bC44cf@old* bC44d0@new*) (let ((bC44d5@subst (bC4498@get-import bC44ce@isp)) (bC44d6@old* (map bC31a0@syntax->datum bC44cf@old*)) (bC44d7@new* (map bC31a0@syntax->datum bC44d0@new*))) (let ((bC44db@old-label* (bC448e@find* bC44d6@old* bC44d5@subst))) (let ((bC44dd@subst (bC4490@rem* bC44d6@old* bC44d5@subst))) (bC448a@merge-substs (map cons bC44d7@new* bC44db@old-label*) bC44dd@subst))))) bC44c3@ls/false) (let ((bC44df@t bC44c1@t)) (let ((bC44e1@ls/false (bC30ba@syntax-dispatch bC44df@t '(any any . each-any)))) (if (and bC44e1@ls/false (apply (lambda (bC44e3@except bC44e4@isp bC44e5@sym*) (and (eq? (bC31a0@syntax->datum bC44e3@except) 'except) (for-all bC4486@idsyn? bC44e5@sym*))) bC44e1@ls/false)) (apply (lambda (bC44e9@except bC44ea@isp bC44eb@sym*) (let ((bC44ef@subst (bC4498@get-import bC44ea@isp))) (bC4490@rem* (map bC31a0@syntax->datum bC44eb@sym*) bC44ef@subst))) bC44e1@ls/false) (let ((bC44f1@t bC44df@t)) (let ((bC44f3@ls/false (bC30ba@syntax-dispatch bC44f1@t '(any any . each-any)))) (if (and bC44f3@ls/false (apply (lambda (bC44f5@only bC44f6@isp bC44f7@sym*) (and (eq? (bC31a0@syntax->datum bC44f5@only) 'only) (for-all bC4486@idsyn? bC44f7@sym*))) bC44f3@ls/false)) (apply (lambda (bC44fb@only bC44fc@isp bC44fd@sym*) (let ((bC4501@subst (bC4498@get-import bC44fc@isp)) (bC4502@sym* (map bC31a0@syntax->datum bC44fd@sym*))) (let ((bC4505@sym* (bC4492@remove-dups bC4502@sym*))) (let ((bC4507@lab* (bC448e@find* bC4505@sym* bC4501@subst))) (map cons bC4505@sym* bC4507@lab*))))) bC44f3@ls/false) (let ((bC4509@t bC44f1@t)) (let ((bC450b@ls/false (bC30ba@syntax-dispatch bC4509@t '(any any any)))) (if (and bC450b@ls/false (apply (lambda (bC450d@prefix bC450e@isp bC450f@p) (and (eq? (bC31a0@syntax->datum bC450d@prefix) 'prefix) (bC4486@idsyn? bC450f@p))) bC450b@ls/false)) (apply (lambda (bC4513@prefix bC4514@isp bC4515@p) (let ((bC4519@subst (bC4498@get-import bC4514@isp)) (bC451a@prefix (symbol->string (bC31a0@syntax->datum bC4515@p)))) (map (lambda (bC451d@x) (cons (string->symbol (string-append bC451a@prefix (symbol->string (car bC451d@x)))) (cdr bC451d@x))) bC4519@subst))) bC450b@ls/false) (let ((bC451f@t bC4509@t)) (let ((bC4521@ls/false (bC30ba@syntax-dispatch bC451f@t '(any each-any)))) (if (and bC4521@ls/false (apply (lambda (bC4523@library bC4524@spec*) (eq? (bC31a0@syntax->datum bC4523@library) 'library)) bC4521@ls/false)) (apply (lambda (bC4527@library bC4528@spec*) (bC4496@import-library bC4528@spec*)) bC4521@ls/false) (let ((bC452b@t bC451f@t)) (let ((bC452d@ls/false (bC30ba@syntax-dispatch bC452b@t '(any any . any)))) (if (and bC452d@ls/false (apply (lambda (bC452f@for bC4530@isp bC4531@rest) (eq? (bC31a0@syntax->datum bC452f@for) 'for)) bC452d@ls/false)) (apply (lambda (bC4535@for bC4536@isp bC4537@rest) (bC4498@get-import bC4536@isp)) bC452d@ls/false) (let ((bC453b@t bC452b@t)) (let ((bC453d@ls/false (bC30ba@syntax-dispatch bC453b@t 'any))) (if bC453d@ls/false (apply (lambda (bC453f@spec) (bC319a@syntax-violation 'import '"invalid import spec" bC453f@spec)) bC453d@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC453b@t))))))))))))))))))))))))))) (bC449a@add-imports! (lambda (bC44a3@imp bC44a4@h) (let ((bC44a7@subst (bC4498@get-import bC44a3@imp))) (for-each (lambda (bC44a9@x) (let ((bC44ab@name (car bC44a9@x)) (bC44ac@label (cdr bC44a9@x))) (let ((bC44af@t (hashtable-ref bC44a4@h bC44ab@name '#f))) (if bC44af@t ((lambda (bC44b1@l) (if (not (eq? bC44b1@l bC44ac@label)) (bC4488@dup-error bC44ab@name) (void))) bC44af@t) (hashtable-set! bC44a4@h bC44ab@name bC44ac@label))))) bC44a7@subst))))) (lambda (bC449b@imp*) (let bC44a1@f ((bC449d@imp* bC449b@imp*) (bC449e@h (make-eq-hashtable))) (if (null? bC449d@imp*) (hashtable-entries bC449e@h) (begin (bC449a@add-imports! (car bC449d@imp*) bC449e@h) (bC44a1@f (cdr bC449d@imp*) bC449e@h))))))) (set! bC4bbd@bC311c@parse-import-spec* bC311c@parse-import-spec*) (set! bC311e@make-top-rib (lambda (bC4691@names bC4692@labels) (let ((bC4695@rib (bC2e67@make-empty-rib))) (begin (vector-for-each (lambda (bC4697@name bC4698@label) (begin (if (not (symbol? bC4697@name)) (error 'make-top-rib '"BUG: not a symbol" bC4697@name) (void)) (bC2e6b@extend-rib/nc! bC4695@rib (make-simple-struct 'stx '5 (list bC4697@name bC2e37@top-mark* '() '())) bC4698@label))) bC4691@names bC4692@labels) bC4695@rib)))) (set! bC4bbe@bC311e@make-top-rib bC311e@make-top-rib) (set! bC3120@make-collector (lambda () (let ((bC469b@ls '())) (lambda bC469f (let ((bC46a0 (length bC469f))) (if (= bC46a0 '0) (apply (lambda () bC469b@ls) bC469f) (if (= bC46a0 '1) (apply (lambda (bC469d@x) (set! bC469b@ls (bC2e30@set-cons bC469d@x bC469b@ls))) bC469f) (error 'apply '"invalid arg count")))))))) (set! bC4bbf@bC3120@make-collector bC3120@make-collector) (set! bC3122@inv-collector (bC2a03@bC28e1@make-parameter (lambda bC46a1@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (bC46a3@x) (begin (if (not (procedure? bC46a3@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" bC46a3@x) (void)) bC46a3@x)))) (set! bC4bc0@bC3122@inv-collector bC3122@inv-collector) (set! bC3124@vis-collector (bC2a03@bC28e1@make-parameter (lambda bC46a5@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (bC46a7@x) (begin (if (not (procedure? bC46a7@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" bC46a7@x) (void)) bC46a7@x)))) (set! bC4bc1@bC3124@vis-collector bC3124@vis-collector) (set! bC3126@imp-collector (bC2a03@bC28e1@make-parameter (lambda bC46a9@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (bC46ab@x) (begin (if (not (procedure? bC46ab@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" bC46ab@x) (void)) bC46ab@x)))) (set! bC4bc2@bC3126@imp-collector bC3126@imp-collector) (set! bC3128@chi-library-internal (lambda (bC46ad@e* bC46ae@rib bC46af@top?) (call-with-values (lambda () (bC3112@chi-body* bC46ad@e* '() '() '() '() '() '() '() bC46ae@rib bC46af@top?)) (lambda (bC46c3@bC46b4 bC46c4@bC46b6 bC46c5@bC46b8 bC46c6@bC46ba bC46c7@bC46bc bC46c8@bC46be bC46c9@bC46c0 bC46ca@bC46c2) (let ((bC46d3@exp* bC46ca@bC46c2) (bC46d4@_kwd* bC46c9@bC46c0) (bC46d5@mod** bC46c8@bC46be) (bC46d6@rhs* bC46c7@bC46bc) (bC46d7@lex* bC46c6@bC46ba) (bC46d8@mr bC46c5@bC46b8) (bC46d9@r bC46c4@bC46b6) (bC46da@e* bC46c3@bC46b4)) (values (append (apply append (reverse bC46d5@mod**)) bC46da@e*) bC46d9@r bC46d8@mr (reverse bC46d7@lex*) (reverse bC46d6@rhs*) bC46d3@exp*)))))) (set! bC4bc3@bC3128@chi-library-internal bC3128@chi-library-internal) (set! bC312a@chi-interaction-expr (lambda (bC46e3@e bC46e4@rib bC46e5@r) (call-with-values (lambda () (bC3112@chi-body* (list bC46e3@e) bC46e5@r bC46e5@r '() '() '() '() '() bC46e4@rib '#t)) (lambda (bC46f9@bC46ea bC46fa@bC46ec bC46fb@bC46ee bC46fc@bC46f0 bC46fd@bC46f2 bC46fe@bC46f4 bC46ff@bC46f6 bC4700@bC46f8) (let ((bC4709@_exp* bC4700@bC46f8) (bC470a@_kwd* bC46ff@bC46f6) (bC470b@mod** bC46fe@bC46f4) (bC470c@rhs* bC46fd@bC46f2) (bC470d@lex* bC46fc@bC46f0) (bC470e@mr bC46fb@bC46ee) (bC470f@r bC46fa@bC46ec) (bC4710@e* bC46f9@bC46ea)) (let ((bC4719@e* (bC30ea@expand-interaction-rhs*/init* (reverse bC470d@lex*) (reverse bC470c@rhs*) (append (apply append (reverse bC470b@mod**)) bC4710@e*) bC470f@r bC470e@mr))) (let ((bC471b@e (if (null? bC4719@e*) (bC2e19@bC2d7a@build-void) (if (null? (cdr bC4719@e*)) (car bC4719@e*) (bC2e18@bC2d78@build-sequence '#f bC4719@e*))))) (values bC471b@e bC470f@r)))))))) (set! bC4bc4@bC312a@chi-interaction-expr bC312a@chi-interaction-expr) (set! bC312c@library-body-expander (lambda (bC471d@name bC471e@main-exp* bC471f@imp* bC4720@b* bC4721@top?) (letrec* ((bC4728@itc (bC3120@make-collector))) (let ((bC4731@bC472a bC3126@imp-collector) (bC4732@bC472c bC31aa@top-level-context) (bC4733@bC472e bC4728@itc) (bC4734@bC4730 '#f)) (let ((bC4739@swap (lambda () (begin (let ((bC473b@t (bC4731@bC472a))) (begin (bC4731@bC472a bC4733@bC472e) (set! bC4733@bC472e bC473b@t))) (let ((bC473d@t (bC4732@bC472c))) (begin (bC4732@bC472c bC4734@bC4730) (set! bC4734@bC4730 bC473d@t))))))) (dynamic-wind bC4739@swap (lambda () (call-with-values (lambda () (bC311c@parse-import-spec* bC471f@imp*)) (lambda (bC4743@bC4740 bC4744@bC4742) (let ((bC4747@subst-labels bC4744@bC4742) (bC4748@subst-names bC4743@bC4740)) (let ((bC474b@rib (bC311e@make-top-rib bC4748@subst-names bC4747@subst-labels))) (letrec* ((bC474e@wrap (lambda (bC47c9@x) (make-simple-struct 'stx '5 (list bC47c9@x bC2e37@top-mark* (list bC474b@rib) '()))))) (let ((bC474f@b* (map bC474e@wrap bC4720@b*)) (bC4750@main-exp* (map bC474e@wrap bC471e@main-exp*)) (bC4751@rtc (bC3120@make-collector)) (bC4752@vtc (bC3120@make-collector))) (let ((bC475f@bC4758 bC3122@inv-collector) (bC4760@bC475a bC3124@vis-collector) (bC4761@bC475c bC4751@rtc) (bC4762@bC475e bC4752@vtc)) (let ((bC4767@swap (lambda () (begin (let ((bC4769@t (bC475f@bC4758))) (begin (bC475f@bC4758 bC4761@bC475c) (set! bC4761@bC475c bC4769@t))) (let ((bC476b@t (bC4760@bC475a))) (begin (bC4760@bC475a bC4762@bC475e) (set! bC4762@bC475e bC476b@t))))))) (dynamic-wind bC4767@swap (lambda () (call-with-values (lambda () (bC3128@chi-library-internal bC474f@b* bC474b@rib bC4721@top?)) (lambda (bC4779@bC476e bC477a@bC4770 bC477b@bC4772 bC477c@bC4774 bC477d@bC4776 bC477e@bC4778) (let ((bC4785@internal-exp* bC477e@bC4778) (bC4786@rhs* bC477d@bC4776) (bC4787@lex* bC477c@bC4774) (bC4788@mr bC477b@bC4772) (bC4789@r bC477a@bC4770) (bC478a@init* bC4779@bC476e)) (call-with-values (lambda () (bC3116@parse-exports (append bC4750@main-exp* bC4785@internal-exp*))) (lambda (bC4795@bC4792 bC4796@bC4794) (let ((bC4799@exp-id* bC4796@bC4794) (bC479a@exp-name* bC4795@bC4792)) (begin (bC2e6f@seal-rib! bC474b@rib) (let ((bC479d@init* (bC30d8@chi-expr* bC478a@init* bC4789@r bC4788@mr))) (let ((bC479f@rhs* (bC30ec@chi-rhs* bC4786@rhs* bC4789@r bC4788@mr))) (begin (bC2e71@unseal-rib! bC474b@rib) (let ((bC47a1@loc* (map bC2e3d@gen-global bC4787@lex*)) (bC47a2@export-subst (bC3184@make-export-subst bC479a@exp-name* bC4799@exp-id*))) (letrec* ((bC47a6@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (bC3186@make-export-env/macros bC4787@lex* bC47a1@loc* bC4789@r)) (lambda (bC47ad@bC47a8 bC47ae@bC47aa bC47af@bC47ac) (let ((bC47b3@macro* bC47af@bC47ac) (bC47b4@global* bC47ae@bC47aa) (bC47b5@export-env bC47ad@bC47a8)) (begin (for-each (lambda (bC47b9@s) (let ((bC47bb@name (car bC47b9@s)) (bC47bc@label (cdr bC47b9@s))) (let ((bC47bf@p (assq bC47bc@label bC47b5@export-env))) (if bC47bf@p (let ((bC47c1@b (cdr bC47bf@p))) (let ((bC47c3@type (car bC47c1@b))) (if (eq? bC47c3@type 'mutable) (bC319a@syntax-violation 'export bC47a6@errstr bC47bb@name) (void)))) (void))))) bC47a2@export-subst) (let ((bC47c5@invoke-body (bC2e1e@bC2d84@build-library-letrec* '#f bC471d@name bC4787@lex* bC47a1@loc* bC479f@rhs* (if (null? bC479d@init*) (bC2e19@bC2d7a@build-void) (bC2e18@bC2d78@build-sequence '#f bC479d@init*)))) (bC47c6@invoke-definitions (map bC2e15@bC2cd7@build-global-define (map cdr bC47b4@global*)))) (values (bC4728@itc) (bC4751@rtc) (bC4752@vtc) (bC2e18@bC2d78@build-sequence '#f (append bC47c6@invoke-definitions (list bC47c5@invoke-body))) bC47b3@macro* bC47a2@export-subst bC47b5@export-env))))))))))))))))))) bC4767@swap)))))))))) bC4739@swap)))))) (set! bC4bc5@bC312c@library-body-expander bC312c@library-body-expander) (set! bC312e@core-library-expander (lambda (bC47cb@e bC47cc@verify-name) (call-with-values (lambda () (bC311a@parse-library bC47cb@e)) (lambda (bC47d7@bC47d0 bC47d8@bC47d2 bC47d9@bC47d4 bC47da@bC47d6) (let ((bC47df@b* bC47da@bC47d6) (bC47e0@imp* bC47d9@bC47d4) (bC47e1@exp* bC47d8@bC47d2) (bC47e2@name* bC47d7@bC47d0)) (call-with-values (lambda () (bC3118@parse-library-name bC47e2@name*)) (lambda (bC47eb@bC47e8 bC47ec@bC47ea) (let ((bC47ef@ver bC47ec@bC47ea) (bC47f0@name bC47eb@bC47e8)) (begin (bC47cc@verify-name bC47f0@name) (call-with-values (lambda () (bC312c@library-body-expander bC47f0@name bC47e1@exp* bC47e0@imp* bC47df@b* '#f)) (lambda (bC4801@bC47f4 bC4802@bC47f6 bC4803@bC47f8 bC4804@bC47fa bC4805@bC47fc bC4806@bC47fe bC4807@bC4800) (let ((bC480f@export-env bC4807@bC4800) (bC4810@export-subst bC4806@bC47fe) (bC4811@visit-code bC4805@bC47fc) (bC4812@invoke-code bC4804@bC47fa) (bC4813@visit-req* bC4803@bC47f8) (bC4814@invoke-req* bC4802@bC47f6) (bC4815@imp* bC4801@bC47f4)) (values bC47f0@name bC47ef@ver bC4815@imp* bC4814@invoke-req* bC4813@visit-req* bC4812@invoke-code bC4811@visit-code bC4810@export-subst bC480f@export-env))))))))))))) (set! bC4bc6@bC312e@core-library-expander bC312e@core-library-expander) (set! bC3130@parse-top-level-program (lambda (bC481d@e*) (let ((bC481f@t bC481d@e*)) (let ((bC4821@ls/false (bC30ba@syntax-dispatch bC481f@t '((any . each-any) . each-any)))) (if (and bC4821@ls/false (apply (lambda (bC4823@import bC4824@imp* bC4825@b*) (eq? (bC31a0@syntax->datum bC4823@import) 'import)) bC4821@ls/false)) (apply (lambda (bC4829@import bC482a@imp* bC482b@b*) (values bC482a@imp* bC482b@b*)) bC4821@ls/false) (let ((bC482f@t bC481f@t)) (let ((bC4831@ls/false (bC30ba@syntax-dispatch bC482f@t '((any . any) . any)))) (if (and bC4831@ls/false (apply (lambda (bC4833@import bC4834@x bC4835@y) (eq? (bC31a0@syntax->datum bC4833@import) 'import)) bC4831@ls/false)) (apply (lambda (bC4839@import bC483a@x bC483b@y) (bC319a@syntax-violation 'expander '"invalid syntax of top-level program" (bC2ead@syntax-car bC481d@e*))) bC4831@ls/false) (let ((bC483f@t bC482f@t)) (let ((bC4841@ls/false (bC30ba@syntax-dispatch bC483f@t '_))) (if bC4841@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) bC4841@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC483f@t)))))))))))) (set! bC4bc7@bC3130@parse-top-level-program bC3130@parse-top-level-program) (set! bC3132@top-level-expander (lambda (bC4843@e*) (call-with-values (lambda () (bC3130@parse-top-level-program bC4843@e*)) (lambda (bC4849@bC4846 bC484a@bC4848) (let ((bC484d@b* bC484a@bC4848) (bC484e@imp* bC4849@bC4846)) (call-with-values (lambda () (bC312c@library-body-expander '() '() bC484e@imp* bC484d@b* '#t)) (lambda (bC485f@bC4852 bC4860@bC4854 bC4861@bC4856 bC4862@bC4858 bC4863@bC485a bC4864@bC485c bC4865@bC485e) (let ((bC486d@export-env bC4865@bC485e) (bC486e@export-subst bC4864@bC485c) (bC486f@visit-code bC4863@bC485a) (bC4870@invoke-code bC4862@bC4858) (bC4871@visit-req* bC4861@bC4856) (bC4872@invoke-req* bC4860@bC4854) (bC4873@imp* bC485f@bC4852)) (values bC4872@invoke-req* bC4870@invoke-code))))))))) (set! bC4bc8@bC3132@top-level-expander bC3132@top-level-expander) (set! bC3134@rp (bC2a00@bC28db@make-record-printer 'env (lambda (bC487b@x bC487c@p bC487d@wr) (display '"#<environment>" bC487c@p)))) (set! bC4bc9@bC3134@rp bC3134@rp) (set! bC313e@env? (lambda (bC4881@x) (and (simple-struct? bC4881@x) (eq? (simple-struct-name bC4881@x) 'env)))) (set! bC4bca@bC313e@env? bC313e@env?) (set! bC3140@env-names (lambda (bC4883@x) (simple-struct-ref bC4883@x '0))) (set! bC4bcb@bC3140@env-names bC3140@env-names) (set! bC3142@set-env-names! (lambda (bC4885@x bC4886@val) (simple-struct-set! bC4885@x '0 bC4886@val))) (set! bC4bcc@bC3142@set-env-names! bC3142@set-env-names!) (set! bC3144@env-labels (lambda (bC4889@x) (simple-struct-ref bC4889@x '1))) (set! bC4bcd@bC3144@env-labels bC3144@env-labels) (set! bC3146@set-env-labels! (lambda (bC488b@x bC488c@val) (simple-struct-set! bC488b@x '1 bC488c@val))) (set! bC4bce@bC3146@set-env-labels! bC3146@set-env-labels!) (set! bC3148@env-itc (lambda (bC488f@x) (simple-struct-ref bC488f@x '2))) (set! bC4bcf@bC3148@env-itc bC3148@env-itc) (set! bC314a@set-env-itc! (lambda (bC4891@x bC4892@val) (simple-struct-set! bC4891@x '2 bC4892@val))) (set! bC4bd0@bC314a@set-env-itc! bC314a@set-env-itc!) (set! bC314c@dummy '3) (set! bC4bd1@bC314c@dummy bC314c@dummy) (set! bC314e@rp (bC2a00@bC28db@make-record-printer 'interaction-env (lambda (bC4895@x bC4896@p bC4897@wr) (display '"#<environment>" bC4896@p)))) (set! bC4bd2@bC314e@rp bC314e@rp) (set! bC3158@interaction-env? (lambda (bC489b@x) (and (simple-struct? bC489b@x) (eq? (simple-struct-name bC489b@x) 'interaction-env)))) (set! bC4bd3@bC3158@interaction-env? bC3158@interaction-env?) (set! bC315a@interaction-env-rib (lambda (bC489d@x) (simple-struct-ref bC489d@x '0))) (set! bC4bd4@bC315a@interaction-env-rib bC315a@interaction-env-rib) (set! bC315c@set-interaction-env-rib! (lambda (bC489f@x bC48a0@val) (simple-struct-set! bC489f@x '0 bC48a0@val))) (set! bC4bd5@bC315c@set-interaction-env-rib! bC315c@set-interaction-env-rib!) (set! bC315e@interaction-env-r (lambda (bC48a3@x) (simple-struct-ref bC48a3@x '1))) (set! bC4bd6@bC315e@interaction-env-r bC315e@interaction-env-r) (set! bC3160@set-interaction-env-r! (lambda (bC48a5@x bC48a6@val) (simple-struct-set! bC48a5@x '1 bC48a6@val))) (set! bC4bd7@bC3160@set-interaction-env-r! bC3160@set-interaction-env-r!) (set! bC3162@interaction-env-locs (lambda (bC48a9@x) (simple-struct-ref bC48a9@x '2))) (set! bC4bd8@bC3162@interaction-env-locs bC3162@interaction-env-locs) (set! bC3164@set-interaction-env-locs! (lambda (bC48ab@x bC48ac@val) (simple-struct-set! bC48ab@x '2 bC48ac@val))) (set! bC4bd9@bC3164@set-interaction-env-locs! bC3164@set-interaction-env-locs!) (set! bC3166@dummy '3) (set! bC4bda@bC3166@dummy bC3166@dummy) (set! bC3168@interaction-environment-symbols (lambda () (bC3170@environment-symbols (bC31a8@interaction-environment)))) (set! bC4bdb@bC3168@interaction-environment-symbols bC3168@interaction-environment-symbols) (set! bC316a@environment-bindings (lambda (bC48af@e) (vector->list (vector-map (lambda (bC48b1@name bC48b2@label) (bC316c@parse-binding (cons bC48b1@name (bC2cce@bC2b1b@imported-label->binding bC48b2@label)))) (bC3140@env-names bC48af@e) (bC3144@env-labels bC48af@e))))) (set! bC4bdc@bC316a@environment-bindings bC316a@environment-bindings) (set! bC316c@parse-binding (lambda (bC48b5@b) (cons (car bC48b5@b) (let ((bC48b7@t (cadr bC48b5@b))) (if (memv bC48b7@t '(core-prim global)) 'procedure (if (memv bC48b7@t '(core-macro macro global-macro)) 'syntax (if (memv bC48b7@t '($core-rtd)) 'record (if (eq? (car bC48b5@b) (cadr bC48b5@b)) 'syntax 'unknown)))))))) (set! bC4bdd@bC316c@parse-binding bC316c@parse-binding) (set! bC316e@environment? (lambda (bC48b9@x) (or (bC313e@env? bC48b9@x) (bC3158@interaction-env? bC48b9@x)))) (set! bC4bde@bC316e@environment? bC316e@environment?) (set! bC3170@environment-symbols (lambda (bC48bb@x) (if (bC313e@env? bC48bb@x) (vector->list (bC3140@env-names bC48bb@x)) (if (bC3158@interaction-env? bC48bb@x) (map values (bC2e51@rib-sym* (bC315a@interaction-env-rib bC48bb@x))) (assertion-violation 'environment-symbols '"not an environment" bC48bb@x))))) (set! bC4bdf@bC3170@environment-symbols bC3170@environment-symbols) (set! bC3172@environment (lambda bC48bd@imp* (let ((bC48bf@itc (bC3120@make-collector))) (let ((bC48c5@bC48c2 bC3126@imp-collector) (bC48c6@bC48c4 bC48bf@itc)) (let ((bC48c9@swap (lambda () (let ((bC48cb@t (bC48c5@bC48c2))) (begin (bC48c5@bC48c2 bC48c6@bC48c4) (set! bC48c6@bC48c4 bC48cb@t)))))) (dynamic-wind bC48c9@swap (lambda () (call-with-values (lambda () (bC311c@parse-import-spec* bC48bd@imp*)) (lambda (bC48d1@bC48ce bC48d2@bC48d0) (let ((bC48d5@subst-labels bC48d2@bC48d0) (bC48d6@subst-names bC48d1@bC48ce)) (make-simple-struct 'env '4 (list bC48d6@subst-names bC48d5@subst-labels bC48bf@itc)))))) bC48c9@swap)))))) (set! bC4be0@bC3172@environment bC3172@environment) (set! bC3174@null-environment (lambda (bC48d9@n) (begin (if (not (eqv? bC48d9@n '5)) (assertion-violation 'null-environment '"not 5" bC48d9@n) (void)) (bC3172@environment '(psyntax null-environment-5))))) (set! bC4be1@bC3174@null-environment bC3174@null-environment) (set! bC3176@scheme-report-environment (lambda (bC48db@n) (begin (if (not (eqv? bC48db@n '5)) (assertion-violation 'scheme-report-environment '"not 5" bC48db@n) (void)) (bC3172@environment '(psyntax scheme-report-environment-5))))) (set! bC4be2@bC3176@scheme-report-environment bC3176@scheme-report-environment) (set! bC3178@expand (lambda (bC48dd@x bC48de@env) (if (bC313e@env? bC48de@env) (let ((bC48e1@rib (bC311e@make-top-rib (bC3140@env-names bC48de@env) (bC3144@env-labels bC48de@env)))) (let ((bC48e3@x (make-simple-struct 'stx '5 (list bC48dd@x bC2e37@top-mark* (list bC48e1@rib) '()))) (bC48e4@itc (bC3148@env-itc bC48de@env)) (bC48e5@rtc (bC3120@make-collector)) (bC48e6@vtc (bC3120@make-collector))) (let ((bC48eb@x (let ((bC48fd@bC48ee bC31aa@top-level-context) (bC48fe@bC48f0 bC3122@inv-collector) (bC48ff@bC48f2 bC3124@vis-collector) (bC4900@bC48f4 bC3126@imp-collector) (bC4901@bC48f6 '#f) (bC4902@bC48f8 bC48e5@rtc) (bC4903@bC48fa bC48e6@vtc) (bC4904@bC48fc bC48e4@itc)) (let ((bC490d@swap (lambda () (begin (let ((bC490f@t (bC48fd@bC48ee))) (begin (bC48fd@bC48ee bC4901@bC48f6) (set! bC4901@bC48f6 bC490f@t))) (let ((bC4911@t (bC48fe@bC48f0))) (begin (bC48fe@bC48f0 bC4902@bC48f8) (set! bC4902@bC48f8 bC4911@t))) (let ((bC4913@t (bC48ff@bC48f2))) (begin (bC48ff@bC48f2 bC4903@bC48fa) (set! bC4903@bC48fa bC4913@t))) (let ((bC4915@t (bC4900@bC48f4))) (begin (bC4900@bC48f4 bC4904@bC48fc) (set! bC4904@bC48fc bC4915@t))))))) (dynamic-wind bC490d@swap (lambda () (bC30dc@chi-expr bC48e3@x '() '())) bC490d@swap))))) (begin (bC2e6f@seal-rib! bC48e1@rib) (values bC48eb@x (bC48e5@rtc)))))) (if (bC3158@interaction-env? bC48de@env) (let ((bC4917@rib (bC315a@interaction-env-rib bC48de@env)) (bC4918@r (bC315e@interaction-env-r bC48de@env)) (bC4919@rtc (bC3120@make-collector))) (let ((bC491d@x (make-simple-struct 'stx '5 (list bC48dd@x bC2e37@top-mark* (list bC4917@rib) '())))) (call-with-values (lambda () (let ((bC4933@bC4924 bC31aa@top-level-context) (bC4934@bC4926 bC3122@inv-collector) (bC4935@bC4928 bC3124@vis-collector) (bC4936@bC492a bC3126@imp-collector) (bC4937@bC492c bC48de@env) (bC4938@bC492e bC4919@rtc) (bC4939@bC4930 (bC3120@make-collector)) (bC493a@bC4932 (bC3120@make-collector))) (let ((bC4943@swap (lambda () (begin (let ((bC4945@t (bC4933@bC4924))) (begin (bC4933@bC4924 bC4937@bC492c) (set! bC4937@bC492c bC4945@t))) (let ((bC4947@t (bC4934@bC4926))) (begin (bC4934@bC4926 bC4938@bC492e) (set! bC4938@bC492e bC4947@t))) (let ((bC4949@t (bC4935@bC4928))) (begin (bC4935@bC4928 bC4939@bC4930) (set! bC4939@bC4930 bC4949@t))) (let ((bC494b@t (bC4936@bC492a))) (begin (bC4936@bC492a bC493a@bC4932) (set! bC493a@bC4932 bC494b@t))))))) (dynamic-wind bC4943@swap (lambda () (bC312a@chi-interaction-expr bC491d@x bC4917@rib bC4918@r)) bC4943@swap)))) (lambda (bC494d@bC4920 bC494e@bC4922) (let ((bC4951@r^ bC494e@bC4922) (bC4952@e bC494d@bC4920)) (begin (bC3160@set-interaction-env-r! bC48de@env bC4951@r^) (values bC4952@e (bC4919@rtc)))))))) (assertion-violation 'expand '"not an environment" bC48de@env))))) (set! bC4be3@bC3178@expand bC3178@expand) (set! bC317a@eval (lambda (bC4955@x bC4956@env) (begin (if (not (bC316e@environment? bC4956@env)) (error 'eval '"not an environment" bC4956@env) (void)) (call-with-values (lambda () (bC3178@expand bC4955@x bC4956@env)) (lambda (bC495d@bC495a bC495e@bC495c) (let ((bC4961@invoke-req* bC495e@bC495c) (bC4962@x bC495d@bC495a)) (begin (for-each bC2ccf@bC2b1d@invoke-library bC4961@invoke-req*) (eval-core (bC2a59@bC2a11@expanded->core bC4962@x))))))))) (set! bC4be4@bC317a@eval bC317a@eval) (set! bC317c@library-expander (lambda bC49d3 (let ((bC49d4 (length bC49d3))) (if (= bC49d4 '3) (apply (lambda (bC4965@x bC4966@filename bC4967@verify-name) (letrec* ((bC496c@build-visit-code (lambda (bC49c1@macro*) (if (null? bC49c1@macro*) (bC2e19@bC2d7a@build-void) (bC2e18@bC2d78@build-sequence '#f (map (lambda (bC49c3@x) (let ((bC49c5@loc (car bC49c3@x)) (bC49c6@src (cddr bC49c3@x))) (list 'set! bC49c5@loc bC49c6@src))) bC49c1@macro*))))) (bC496e@visit! (lambda (bC49b9@macro*) (for-each (lambda (bC49bb@x) (let ((bC49bd@loc (car bC49bb@x)) (bC49be@proc (cadr bC49bb@x))) (set-symbol-value! bC49bd@loc bC49be@proc))) bC49b9@macro*)))) (call-with-values (lambda () (bC312e@core-library-expander bC4965@x bC4967@verify-name)) (lambda (bC4981@bC4970 bC4982@bC4972 bC4983@bC4974 bC4984@bC4976 bC4985@bC4978 bC4986@bC497a bC4987@bC497c bC4988@bC497e bC4989@bC4980) (let ((bC4993@export-env bC4989@bC4980) (bC4994@export-subst bC4988@bC497e) (bC4995@macro* bC4987@bC497c) (bC4996@invoke-code bC4986@bC497a) (bC4997@vis* bC4985@bC4978) (bC4998@inv* bC4984@bC4976) (bC4999@imp* bC4983@bC4974) (bC499a@ver bC4982@bC4972) (bC499b@name bC4981@bC4970)) (let ((bC49a5@id (gensym)) (bC49a6@name bC499b@name) (bC49a7@ver bC499a@ver) (bC49a8@imp* (map bC2cd3@bC2b25@library-spec bC4999@imp*)) (bC49a9@vis* (map bC2cd3@bC2b25@library-spec bC4997@vis*)) (bC49aa@inv* (map bC2cd3@bC2b25@library-spec bC4998@inv*)) (bC49ab@visit-proc (lambda () (bC496e@visit! bC4995@macro*))) (bC49ac@invoke-proc (lambda () (eval-core (bC2a59@bC2a11@expanded->core bC4996@invoke-code)))) (bC49ad@visit-code (bC496c@build-visit-code bC4995@macro*)) (bC49ae@invoke-code bC4996@invoke-code)) (begin (bC2ccd@bC2b19@install-library bC49a5@id bC49a6@name bC49a7@ver bC49a8@imp* bC49a9@vis* bC49aa@inv* bC4994@export-subst bC4993@export-env bC49ab@visit-proc bC49ac@invoke-proc bC49ad@visit-code bC49ae@invoke-code '#t bC4966@filename) (values bC49a5@id bC49a6@name bC49a7@ver bC49a8@imp* bC49a9@vis* bC49aa@inv* bC49ae@invoke-code bC49ad@visit-code bC4994@export-subst bC4993@export-env)))))))) bC49d3) (if (= bC49d4 '2) (apply (lambda (bC49c9@x bC49ca@filename) (bC317c@library-expander bC49c9@x bC49ca@filename (lambda (bC49cd@x) (values)))) bC49d3) (if (= bC49d4 '1) (apply (lambda (bC49cf@x) (bC317c@library-expander bC49cf@x '#f (lambda (bC49d1@x) (values)))) bC49d3) (error 'apply '"invalid arg count"))))))) (set! bC4be5@bC317c@library-expander bC317c@library-expander) (set! bC317e@boot-library-expand (lambda (bC49d5@x) (call-with-values (lambda () (bC317c@library-expander bC49d5@x)) (lambda (bC49eb@bC49d8 bC49ec@bC49da bC49ed@bC49dc bC49ee@bC49de bC49ef@bC49e0 bC49f0@bC49e2 bC49f1@bC49e4 bC49f2@bC49e6 bC49f3@bC49e8 bC49f4@bC49ea) (let ((bC49ff@export-env bC49f4@bC49ea) (bC4a00@export-subst bC49f3@bC49e8) (bC4a01@visit-code bC49f2@bC49e6) (bC4a02@invoke-code bC49f1@bC49e4) (bC4a03@inv* bC49f0@bC49e2) (bC4a04@vis* bC49ef@bC49e0) (bC4a05@imp* bC49ee@bC49de) (bC4a06@ver bC49ed@bC49dc) (bC4a07@name bC49ec@bC49da) (bC4a08@id bC49eb@bC49d8)) (values bC4a07@name bC4a02@invoke-code bC4a00@export-subst bC49ff@export-env)))))) (set! bC4be6@bC317e@boot-library-expand bC317e@boot-library-expand) (set! bC3180@rev-map-append (lambda (bC4a13@f bC4a14@ls bC4a15@ac) (if (null? bC4a14@ls) bC4a15@ac (bC3180@rev-map-append bC4a13@f (cdr bC4a14@ls) (cons (bC4a13@f (car bC4a14@ls)) bC4a15@ac))))) (set! bC4be7@bC3180@rev-map-append bC3180@rev-map-append) (set! bC3182@build-exports (lambda (bC4a19@lex*+loc* bC4a1a@init*) (bC2e18@bC2d78@build-sequence '#f (cons (bC2e19@bC2d7a@build-void) (bC3180@rev-map-append (lambda (bC4a1d@x) (list 'set! (cdr bC4a1d@x) (car bC4a1d@x))) bC4a19@lex*+loc* bC4a1a@init*))))) (set! bC4be8@bC3182@build-exports bC3182@build-exports) (set! bC3184@make-export-subst (lambda (bC4a1f@name* bC4a20@id*) (map (lambda (bC4a23@name bC4a24@id) (let ((bC4a27@label (bC2ec9@id->label bC4a24@id))) (begin (if (not bC4a27@label) (bC319a@syntax-violation '#f '"cannot export unbound identifier" bC4a24@id) (void)) (cons bC4a23@name bC4a27@label)))) bC4a1f@name* bC4a20@id*))) (set! bC4be9@bC3184@make-export-subst bC3184@make-export-subst) (set! bC3186@make-export-env/macros (lambda (bC4a29@lex* bC4a2a@loc* bC4a2b@r) (letrec* ((bC4a30@lookup (lambda (bC4a4d@x) (let bC4a55@f ((bC4a4f@x bC4a4d@x) (bC4a50@lex* bC4a29@lex*) (bC4a51@loc* bC4a2a@loc*)) (if (pair? bC4a50@lex*) (if (eq? bC4a4f@x (car bC4a50@lex*)) (car bC4a51@loc*) (bC4a55@f bC4a4f@x (cdr bC4a50@lex*) (cdr bC4a51@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let bC4a39@f ((bC4a31@r bC4a2b@r) (bC4a32@env '()) (bC4a33@global* '()) (bC4a34@macro* '())) (if (null? bC4a31@r) (values bC4a32@env bC4a33@global* bC4a34@macro*) (let ((bC4a3b@x (car bC4a31@r))) (let ((bC4a3d@label (car bC4a3b@x)) (bC4a3e@b (cdr bC4a3b@x))) (let ((bC4a41@t (bC2ecf@binding-type bC4a3e@b))) (if (memv bC4a41@t '(lexical)) (let ((bC4a43@v (bC2ed1@binding-value bC4a3e@b))) (let ((bC4a45@loc (bC4a30@lookup (bC3044@lexical-var bC4a43@v))) (bC4a46@type (if (bC3046@lexical-mutable? bC4a43@v) 'mutable 'global))) (bC4a39@f (cdr bC4a31@r) (cons (cons* bC4a3d@label bC4a46@type bC4a45@loc) bC4a32@env) (cons (cons (bC3044@lexical-var bC4a43@v) bC4a45@loc) bC4a33@global*) bC4a34@macro*))) (if (memv bC4a41@t '(local-macro)) (let ((bC4a49@loc (gensym))) (bC4a39@f (cdr bC4a31@r) (cons (cons* bC4a3d@label 'global-macro bC4a49@loc) bC4a32@env) bC4a33@global* (cons (cons bC4a49@loc (bC2ed1@binding-value bC4a3e@b)) bC4a34@macro*))) (if (memv bC4a41@t '(local-macro!)) (let ((bC4a4b@loc (gensym))) (bC4a39@f (cdr bC4a31@r) (cons (cons* bC4a3d@label 'global-macro! bC4a4b@loc) bC4a32@env) bC4a33@global* (cons (cons bC4a4b@loc (bC2ed1@binding-value bC4a3e@b)) bC4a34@macro*))) (if (memv bC4a41@t '($rtd $module)) (bC4a39@f (cdr bC4a31@r) (cons bC4a3b@x bC4a32@env) bC4a33@global* bC4a34@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (bC2ecf@binding-type bC4a3e@b) (bC2ed1@binding-value bC4a3e@b)))))))))))))) (set! bC4bea@bC3186@make-export-env/macros bC3186@make-export-env/macros) (set! bC3188@generate-temporaries (lambda (bC4a57@ls) (let ((bC4a59@t bC4a57@ls)) (let ((bC4a5b@ls/false (bC30ba@syntax-dispatch bC4a59@t 'each-any))) (if bC4a5b@ls/false (apply (lambda (bC4a5d@ls) (map (lambda (bC4a5f@x) (make-simple-struct 'stx '5 (list (let ((bC4a61@x (bC31a0@syntax->datum bC4a5f@x))) (if (or (symbol? bC4a61@x) (string? bC4a61@x)) (gensym bC4a61@x) (gensym 't))) bC2e37@top-mark* '() '()))) bC4a5d@ls)) bC4a5b@ls/false) (let ((bC4a63@t bC4a59@t)) (let ((bC4a65@ls/false (bC30ba@syntax-dispatch bC4a63@t '_))) (if bC4a65@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) bC4a65@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC4a63@t))))))))) (set! bC4beb@bC3188@generate-temporaries bC3188@generate-temporaries) (set! bC318a@free-identifier=? (lambda (bC4a67@x bC4a68@y) (if (bC2eb3@id? bC4a67@x) (if (bC2eb3@id? bC4a68@y) (bC2eb9@free-id=? bC4a67@x bC4a68@y) (assertion-violation 'free-identifier=? '"not an identifier" bC4a68@y)) (assertion-violation 'free-identifier=? '"not an identifier" bC4a67@x)))) (set! bC4bec@bC318a@free-identifier=? bC318a@free-identifier=?) (set! bC318c@bound-identifier=? (lambda (bC4a6b@x bC4a6c@y) (if (bC2eb3@id? bC4a6b@x) (if (bC2eb3@id? bC4a6c@y) (bC2eb7@bound-id=? bC4a6b@x bC4a6c@y) (assertion-violation 'bound-identifier=? '"not an identifier" bC4a6c@y)) (assertion-violation 'bound-identifier=? '"not an identifier" bC4a6b@x)))) (set! bC4bed@bC318c@bound-identifier=? bC318c@bound-identifier=?) (set! bC318e@make-source-condition (lambda (bC4a6f@x) (letrec* ((bC4a79@bC4a74 (make-record-type-descriptor '&source-information bC4ecf@bC4c16@&condition-rtd 'bC4a77 '#f '#f '#((immutable file-name) (immutable line)))) (bC4a7b@bC4a76 '#f) (bC4a7d@bC4a75 (make-record-constructor-descriptor bC4a79@bC4a74 bC4ed0@bC4c18@&condition-rcd bC4a7b@bC4a76)) (bC4a80@bC4a73 (record-predicate bC4a79@bC4a74)) (bC4a82@make-source-condition (record-constructor bC4a7d@bC4a75)) (bC4a84@bC4a71 (record-accessor bC4a79@bC4a74 '0)) (bC4a86@bC4a72 (record-accessor bC4a79@bC4a74 '1)) (bC4a88@source-condition? (condition-predicate bC4a79@bC4a74)) (bC4a8a@source-filename (condition-accessor bC4a79@bC4a74 bC4a84@bC4a71)) (bC4a8c@source-character (condition-accessor bC4a79@bC4a74 bC4a86@bC4a72))) (if (and (pair? bC4a6f@x) (pair? (cdr bC4a6f@x))) (bC4a82@make-source-condition (car bC4a6f@x) (cadr bC4a6f@x)) (condition))))) (set! bC4bee@bC318e@make-source-condition bC318e@make-source-condition) (set! bC3190@extract-position-condition (lambda (bC4a8d@x) (bC318e@make-source-condition (bC3192@expression-position bC4a8d@x)))) (set! bC4bef@bC3190@extract-position-condition bC3190@extract-position-condition) (set! bC3192@expression-position (lambda (bC4a8f@x) (and (bC2e7f@stx? bC4a8f@x) (let ((bC4a91@x (bC2e81@stx-expr bC4a8f@x))) (and (bC29f7@bC28c9@annotation? bC4a91@x) (bC29f8@bC28cb@annotation-source bC4a91@x)))))) (set! bC4bf0@bC3192@expression-position bC3192@expression-position) (set! bC3194@assertion-error (lambda (bC4a93@expr bC4a94@pos) (raise (condition (bC4eff@bC4cda@make-assertion-violation) (bC4f11@bC4d0c@make-who-condition 'assert) (bC4ed5@bC4c6d@make-message-condition '"assertion failed") (bC4f07@bC4cf1@make-irritants-condition (list bC4a93@expr)) (bC318e@make-source-condition bC4a94@pos))))) (set! bC4bf1@bC3194@assertion-error bC3194@assertion-error) (set! bC3196@syntax-error (lambda (bC4a97@x . bC4a99@args) (begin (if (not (for-all string? bC4a99@args)) (assertion-violation 'syntax-error '"invalid argument" bC4a99@args) (void)) (raise (condition (bC4ed5@bC4c6d@make-message-condition (if (null? bC4a99@args) '"invalid syntax" (apply string-append bC4a99@args))) (bC4f33@bC4d68@make-syntax-violation (bC31a0@syntax->datum bC4a97@x) '#f) (bC3190@extract-position-condition bC4a97@x)))))) (set! bC4bf2@bC3196@syntax-error bC3196@syntax-error) (set! bC3198@syntax-violation* (lambda (bC4a9b@who bC4a9c@msg bC4a9d@form bC4a9e@condition-object) (begin (if (not (string? bC4a9c@msg)) (assertion-violation 'syntax-violation '"message is not a string" bC4a9c@msg) (void)) (let ((bC4aa3@who (if (or (string? bC4a9b@who) (symbol? bC4a9b@who)) bC4a9b@who (if (not bC4a9b@who) (let ((bC4aa5@t bC4a9d@form)) (let ((bC4aa7@ls/false (bC30ba@syntax-dispatch bC4aa5@t 'any))) (if (and bC4aa7@ls/false (apply (lambda (bC4aa9@id) (bC2eb3@id? bC4aa9@id)) bC4aa7@ls/false)) (apply (lambda (bC4aab@id) (bC31a0@syntax->datum bC4aab@id)) bC4aa7@ls/false) (let ((bC4aad@t bC4aa5@t)) (let ((bC4aaf@ls/false (bC30ba@syntax-dispatch bC4aad@t '(any . any)))) (if (and bC4aaf@ls/false (apply (lambda (bC4ab1@id bC4ab2@rest) (bC2eb3@id? bC4ab1@id)) bC4aaf@ls/false)) (apply (lambda (bC4ab5@id bC4ab6@rest) (bC31a0@syntax->datum bC4ab5@id)) bC4aaf@ls/false) (let ((bC4ab9@t bC4aad@t)) (let ((bC4abb@ls/false (bC30ba@syntax-dispatch bC4ab9@t '_))) (if bC4abb@ls/false (apply (lambda () '#f) bC4abb@ls/false) (bC319a@syntax-violation '#f '"invalid syntax" bC4ab9@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" bC4a9b@who))))) (raise (condition (if bC4aa3@who (bC4f11@bC4d0c@make-who-condition bC4aa3@who) (condition)) (bC4ed5@bC4c6d@make-message-condition bC4a9c@msg) bC4a9e@condition-object (bC3190@extract-position-condition bC4a9d@form))))))) (set! bC4bf3@bC3198@syntax-violation* bC3198@syntax-violation*) (set! bC319a@syntax-violation (lambda bC4acb (let ((bC4acc (length bC4acb))) (if (= bC4acc '3) (apply (lambda (bC4abd@who bC4abe@msg bC4abf@form) (bC319a@syntax-violation bC4abd@who bC4abe@msg bC4abf@form '#f)) bC4acb) (if (= bC4acc '4) (apply (lambda (bC4ac3@who bC4ac4@msg bC4ac5@form bC4ac6@subform) (bC3198@syntax-violation* bC4ac3@who bC4ac4@msg bC4ac5@form (bC4f33@bC4d68@make-syntax-violation (bC31a0@syntax->datum bC4ac5@form) (bC31a0@syntax->datum bC4ac6@subform)))) bC4acb) (error 'apply '"invalid arg count")))))) (set! bC4bf4@bC319a@syntax-violation bC319a@syntax-violation) (set! bC319c@identifier? (lambda (bC4acd@x) (bC2eb3@id? bC4acd@x))) (set! bC4bf5@bC319c@identifier? bC319c@identifier?) (set! bC319e@datum->syntax (lambda (bC4acf@id bC4ad0@datum) (if (bC2eb3@id? bC4acf@id) (bC2e93@datum->stx bC4acf@id bC4ad0@datum) (assertion-violation 'datum->syntax '"not an identifier" bC4acf@id)))) (set! bC4bf6@bC319e@datum->syntax bC319e@datum->syntax) (set! bC31a0@syntax->datum (lambda (bC4ad3@x) (bC2ec7@stx->datum bC4ad3@x))) (set! bC4bf7@bC31a0@syntax->datum bC31a0@syntax->datum) (set! bC31a2@ungensym-all (lambda (bC4ad5@code) (if (pair? bC4ad5@code) (cons (bC31a2@ungensym-all (car bC4ad5@code)) (bC31a2@ungensym-all (cdr bC4ad5@code))) (if (symbol? bC4ad5@code) (ungensym bC4ad5@code) bC4ad5@code)))) (set! bC4bf8@bC31a2@ungensym-all bC31a2@ungensym-all) (set! bC31a4@compile-r6rs-top-level (lambda (bC4ad7@x*) (call-with-values (lambda () (bC3132@top-level-expander bC4ad7@x*)) (lambda (bC4add@bC4ada bC4ade@bC4adc) (let ((bC4ae1@invoke-code bC4ade@bC4adc) (bC4ae2@lib* bC4add@bC4ada)) (lambda () (begin (for-each bC2ccf@bC2b1d@invoke-library bC4ae2@lib*) (let ((bC4ae5@expanded (bC2a59@bC2a11@expanded->core bC4ae1@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (bC31a2@ungensym-all bC4ae5@expanded)) (void)) (eval-core bC4ae5@expanded)))))))))) (set! bC4bf9@bC31a4@compile-r6rs-top-level bC31a4@compile-r6rs-top-level) (set! bC31a6@pre-compile-r6rs-top-level (lambda (bC4ae7@x*) (call-with-values (lambda () (bC3132@top-level-expander bC4ae7@x*)) (lambda (bC4aed@bC4aea bC4aee@bC4aec) (let ((bC4af1@invoke-code bC4aee@bC4aec) (bC4af2@lib* bC4aed@bC4aea)) (begin (for-each bC2ccf@bC2b1d@invoke-library bC4af2@lib*) (bC2a01@bC28dd@compile-core (bC2a59@bC2a11@expanded->core bC4af1@invoke-code)))))))) (set! bC4bfa@bC31a6@pre-compile-r6rs-top-level bC31a6@pre-compile-r6rs-top-level) (set! bC31a8@interaction-environment (let ((bC4af5@the-env '#f)) (lambda () (or bC4af5@the-env (let ((bC4af7@lib (bC2cc8@bC2b0f@find-library-by-name '(mosh interaction))) (bC4af8@rib (bC2e67@make-empty-rib))) (begin (let ((bC4afb@subst (bC2caa@bC2ad3@library-subst bC4af7@lib))) (begin (bC2e53@set-rib-sym*! bC4af8@rib (map car bC4afb@subst)) (bC2e57@set-rib-mark**! bC4af8@rib (map (lambda (bC4afd@x) bC2e37@top-mark*) bC4afb@subst)) (bC2e5b@set-rib-label*! bC4af8@rib (map cdr bC4afb@subst)))) (let ((bC4aff@env (make-simple-struct 'interaction-env '4 (list bC4af8@rib '() '())))) (begin (set! bC4af5@the-env bC4aff@env) bC4aff@env)))))))) (set! bC4bfb@bC31a8@interaction-environment bC31a8@interaction-environment) (set! bC31aa@top-level-context (bC2a03@bC28e1@make-parameter '#f)) (set! bC4bfc@bC31aa@top-level-context bC31aa@top-level-context) (bC2cc5@bC2b09@current-library-expander bC317c@library-expander))
(begin (set! bC4c0b@bC4c06 (unspecified)) (set! bC4c0d@bC4c08 (unspecified)) (set! bC4c0f@bC4c07 (unspecified)) (set! bC4c12@&condition? (unspecified)) (set! bC4c14@make-&condition (unspecified)) (set! bC4c16@&condition-rtd (unspecified)) (set! bC4c18@&condition-rcd (unspecified)) (set! bC4c64@bC4c5f (unspecified)) (set! bC4c66@bC4c61 (unspecified)) (set! bC4c68@bC4c60 (unspecified)) (set! bC4c6b@p? (unspecified)) (set! bC4c6d@make-message-condition (unspecified)) (set! bC4c6f@bC4c5e (unspecified)) (set! bC4c71@message-condition? (unspecified)) (set! bC4c73@condition-message (unspecified)) (set! bC4c75@&message-rtd (unspecified)) (set! bC4c77@&message-rcd (unspecified)) (set! bC4c7d@bC4c78 (unspecified)) (set! bC4c7f@bC4c7a (unspecified)) (set! bC4c81@bC4c79 (unspecified)) (set! bC4c84@p? (unspecified)) (set! bC4c86@make-warning (unspecified)) (set! bC4c88@warning? (unspecified)) (set! bC4c8a@&warning-rtd (unspecified)) (set! bC4c8c@&warning-rcd (unspecified)) (set! bC4c92@bC4c8d (unspecified)) (set! bC4c94@bC4c8f (unspecified)) (set! bC4c96@bC4c8e (unspecified)) (set! bC4c99@p? (unspecified)) (set! bC4c9b@make-serious-condition (unspecified)) (set! bC4c9d@serious-condition? (unspecified)) (set! bC4c9f@&serious-rtd (unspecified)) (set! bC4ca1@&serious-rcd (unspecified)) (set! bC4ca7@bC4ca2 (unspecified)) (set! bC4ca9@bC4ca4 (unspecified)) (set! bC4cab@bC4ca3 (unspecified)) (set! bC4cae@p? (unspecified)) (set! bC4cb0@make-error (unspecified)) (set! bC4cb2@error? (unspecified)) (set! bC4cb4@&error-rtd (unspecified)) (set! bC4cb6@&error-rcd (unspecified)) (set! bC4cbc@bC4cb7 (unspecified)) (set! bC4cbe@bC4cb9 (unspecified)) (set! bC4cc0@bC4cb8 (unspecified)) (set! bC4cc3@p? (unspecified)) (set! bC4cc5@make-violation (unspecified)) (set! bC4cc7@violation? (unspecified)) (set! bC4cc9@&violation-rtd (unspecified)) (set! bC4ccb@&violation-rcd (unspecified)) (set! bC4cd1@bC4ccc (unspecified)) (set! bC4cd3@bC4cce (unspecified)) (set! bC4cd5@bC4ccd (unspecified)) (set! bC4cd8@p? (unspecified)) (set! bC4cda@make-assertion-violation (unspecified)) (set! bC4cdc@assertion-violation? (unspecified)) (set! bC4cde@&assertion-rtd (unspecified)) (set! bC4ce0@&assertion-rcd (unspecified)) (set! bC4ce8@bC4ce3 (unspecified)) (set! bC4cea@bC4ce5 (unspecified)) (set! bC4cec@bC4ce4 (unspecified)) (set! bC4cef@p? (unspecified)) (set! bC4cf1@make-irritants-condition (unspecified)) (set! bC4cf3@bC4ce2 (unspecified)) (set! bC4cf5@irritants-condition? (unspecified)) (set! bC4cf7@condition-irritants (unspecified)) (set! bC4cf9@&irritants-rtd (unspecified)) (set! bC4cfb@&irritants-rcd (unspecified)) (set! bC4d03@bC4cfe (unspecified)) (set! bC4d05@bC4d00 (unspecified)) (set! bC4d07@bC4cff (unspecified)) (set! bC4d0a@p? (unspecified)) (set! bC4d0c@make-who-condition (unspecified)) (set! bC4d0e@bC4cfd (unspecified)) (set! bC4d10@who-condition? (unspecified)) (set! bC4d12@condition-who (unspecified)) (set! bC4d14@&who-rtd (unspecified)) (set! bC4d16@&who-rcd (unspecified)) (set! bC4d1c@bC4d17 (unspecified)) (set! bC4d1e@bC4d19 (unspecified)) (set! bC4d20@bC4d18 (unspecified)) (set! bC4d23@p? (unspecified)) (set! bC4d25@make-non-continuable-violation (unspecified)) (set! bC4d27@non-continuable-violation? (unspecified)) (set! bC4d29@&non-continuable-rtd (unspecified)) (set! bC4d2b@&non-continuable-rcd (unspecified)) (set! bC4d31@bC4d2c (unspecified)) (set! bC4d33@bC4d2e (unspecified)) (set! bC4d35@bC4d2d (unspecified)) (set! bC4d38@p? (unspecified)) (set! bC4d3a@make-implementation-restriction-violation (unspecified)) (set! bC4d3c@implementation-restriction-violation? (unspecified)) (set! bC4d3e@&implementation-restriction-rtd (unspecified)) (set! bC4d40@&implementation-restriction-rcd (unspecified)) (set! bC4d46@bC4d41 (unspecified)) (set! bC4d48@bC4d43 (unspecified)) (set! bC4d4a@bC4d42 (unspecified)) (set! bC4d4d@p? (unspecified)) (set! bC4d4f@make-lexical-violation (unspecified)) (set! bC4d51@lexical-violation? (unspecified)) (set! bC4d53@&lexical-rtd (unspecified)) (set! bC4d55@&lexical-rcd (unspecified)) (set! bC4d5f@bC4d5a (unspecified)) (set! bC4d61@bC4d5c (unspecified)) (set! bC4d63@bC4d5b (unspecified)) (set! bC4d66@p? (unspecified)) (set! bC4d68@make-syntax-violation (unspecified)) (set! bC4d6a@bC4d57 (unspecified)) (set! bC4d6c@bC4d59 (unspecified)) (set! bC4d6e@syntax-violation? (unspecified)) (set! bC4d70@syntax-violation-form (unspecified)) (set! bC4d72@syntax-violation-subform (unspecified)) (set! bC4d74@&syntax-rtd (unspecified)) (set! bC4d76@&syntax-rcd (unspecified)) (set! bC4d7c@bC4d77 (unspecified)) (set! bC4d7e@bC4d79 (unspecified)) (set! bC4d80@bC4d78 (unspecified)) (set! bC4d83@p? (unspecified)) (set! bC4d85@make-undefined-violation (unspecified)) (set! bC4d87@undefined-violation? (unspecified)) (set! bC4d89@&undefined-rtd (unspecified)) (set! bC4d8b@&undefined-rcd (unspecified)) (set! bC4d91@bC4d8c (unspecified)) (set! bC4d93@bC4d8e (unspecified)) (set! bC4d95@bC4d8d (unspecified)) (set! bC4d98@p? (unspecified)) (set! bC4d9a@make-i/o-error (unspecified)) (set! bC4d9c@i/o-error? (unspecified)) (set! bC4d9e@&i/o-rtd (unspecified)) (set! bC4da0@&i/o-rcd (unspecified)) (set! bC4da6@bC4da1 (unspecified)) (set! bC4da8@bC4da3 (unspecified)) (set! bC4daa@bC4da2 (unspecified)) (set! bC4dad@p? (unspecified)) (set! bC4daf@make-i/o-read-error (unspecified)) (set! bC4db1@i/o-read-error? (unspecified)) (set! bC4db3@&i/o-read-rtd (unspecified)) (set! bC4db5@&i/o-read-rcd (unspecified)) (set! bC4dbb@bC4db6 (unspecified)) (set! bC4dbd@bC4db8 (unspecified)) (set! bC4dbf@bC4db7 (unspecified)) (set! bC4dc2@p? (unspecified)) (set! bC4dc4@make-i/o-write-error (unspecified)) (set! bC4dc6@i/o-write-error? (unspecified)) (set! bC4dc8@&i/o-write-rtd (unspecified)) (set! bC4dca@&i/o-write-rcd (unspecified)) (set! bC4dd2@bC4dcd (unspecified)) (set! bC4dd4@bC4dcf (unspecified)) (set! bC4dd6@bC4dce (unspecified)) (set! bC4dd9@p? (unspecified)) (set! bC4ddb@make-i/o-invalid-position-error (unspecified)) (set! bC4ddd@bC4dcc (unspecified)) (set! bC4ddf@i/o-invalid-position-error? (unspecified)) (set! bC4de1@i/o-error-position (unspecified)) (set! bC4de3@&i/o-invalid-position-rtd (unspecified)) (set! bC4de5@&i/o-invalid-position-rcd (unspecified)) (set! bC4ded@bC4de8 (unspecified)) (set! bC4def@bC4dea (unspecified)) (set! bC4df1@bC4de9 (unspecified)) (set! bC4df4@p? (unspecified)) (set! bC4df6@make-i/o-filename-error (unspecified)) (set! bC4df8@bC4de7 (unspecified)) (set! bC4dfa@i/o-filename-error? (unspecified)) (set! bC4dfc@i/o-error-filename (unspecified)) (set! bC4dfe@&i/o-filename-rtd (unspecified)) (set! bC4e00@&i/o-filename-rcd (unspecified)) (set! bC4e06@bC4e01 (unspecified)) (set! bC4e08@bC4e03 (unspecified)) (set! bC4e0a@bC4e02 (unspecified)) (set! bC4e0d@p? (unspecified)) (set! bC4e0f@make-i/o-file-protection-error (unspecified)) (set! bC4e11@i/o-file-protection-error? (unspecified)) (set! bC4e13@&i/o-file-protection-rtd (unspecified)) (set! bC4e15@&i/o-file-protection-rcd (unspecified)) (set! bC4e1b@bC4e16 (unspecified)) (set! bC4e1d@bC4e18 (unspecified)) (set! bC4e1f@bC4e17 (unspecified)) (set! bC4e22@p? (unspecified)) (set! bC4e24@make-i/o-file-is-read-only-error (unspecified)) (set! bC4e26@i/o-file-is-read-only-error? (unspecified)) (set! bC4e28@&i/o-file-is-read-only-rtd (unspecified)) (set! bC4e2a@&i/o-file-is-read-only-rcd (unspecified)) (set! bC4e30@bC4e2b (unspecified)) (set! bC4e32@bC4e2d (unspecified)) (set! bC4e34@bC4e2c (unspecified)) (set! bC4e37@p? (unspecified)) (set! bC4e39@make-i/o-file-already-exists-error (unspecified)) (set! bC4e3b@i/o-file-already-exists-error? (unspecified)) (set! bC4e3d@&i/o-file-already-exists-rtd (unspecified)) (set! bC4e3f@&i/o-file-already-exists-rcd (unspecified)) (set! bC4e45@bC4e40 (unspecified)) (set! bC4e47@bC4e42 (unspecified)) (set! bC4e49@bC4e41 (unspecified)) (set! bC4e4c@p? (unspecified)) (set! bC4e4e@make-i/o-file-does-not-exist-error (unspecified)) (set! bC4e50@i/o-file-does-not-exist-error? (unspecified)) (set! bC4e52@&i/o-file-does-not-exist-rtd (unspecified)) (set! bC4e54@&i/o-file-does-not-exist-rcd (unspecified)) (set! bC4e5c@bC4e57 (unspecified)) (set! bC4e5e@bC4e59 (unspecified)) (set! bC4e60@bC4e58 (unspecified)) (set! bC4e63@p? (unspecified)) (set! bC4e65@make-i/o-port-error (unspecified)) (set! bC4e67@bC4e56 (unspecified)) (set! bC4e69@i/o-port-error? (unspecified)) (set! bC4e6b@i/o-error-port (unspecified)) (set! bC4e6d@&i/o-port-rtd (unspecified)) (set! bC4e6f@&i/o-port-rcd (unspecified)) (set! bC4e75@bC4e70 (unspecified)) (set! bC4e77@bC4e72 (unspecified)) (set! bC4e79@bC4e71 (unspecified)) (set! bC4e7c@p? (unspecified)) (set! bC4e7e@make-i/o-decoding-error (unspecified)) (set! bC4e80@i/o-decoding-error? (unspecified)) (set! bC4e82@&i/o-decoding-rtd (unspecified)) (set! bC4e84@&i/o-decoding-rcd (unspecified)) (set! bC4e8c@bC4e87 (unspecified)) (set! bC4e8e@bC4e89 (unspecified)) (set! bC4e90@bC4e88 (unspecified)) (set! bC4e93@p? (unspecified)) (set! bC4e95@make-i/o-encoding-error (unspecified)) (set! bC4e97@bC4e86 (unspecified)) (set! bC4e99@i/o-encoding-error? (unspecified)) (set! bC4e9b@i/o-encoding-error-char (unspecified)) (set! bC4e9d@&i/o-encoding-rtd (unspecified)) (set! bC4e9f@&i/o-encoding-rcd (unspecified)) (set! bC4ea5@bC4ea0 (unspecified)) (set! bC4ea7@bC4ea2 (unspecified)) (set! bC4ea9@bC4ea1 (unspecified)) (set! bC4eac@p? (unspecified)) (set! bC4eae@make-no-infinities-violation (unspecified)) (set! bC4eb0@no-infinities-violation? (unspecified)) (set! bC4eb2@&no-infinities-rtd (unspecified)) (set! bC4eb4@&no-infinities-rcd (unspecified)) (set! bC4eba@bC4eb5 (unspecified)) (set! bC4ebc@bC4eb7 (unspecified)) (set! bC4ebe@bC4eb6 (unspecified)) (set! bC4ec1@p? (unspecified)) (set! bC4ec3@make-no-nans-violation (unspecified)) (set! bC4ec5@no-nans-violation? (unspecified)) (set! bC4ec7@&no-nans-rtd (unspecified)) (set! bC4ec9@&no-nans-rcd (unspecified)) (set! bC4c0b@bC4c06 (make-record-type-descriptor '&condition '#f 'bC4c09 '#f '#f '#())) (set! bC4eca@bC4c0b@bC4c06 bC4c0b@bC4c06) (set! bC4c0d@bC4c08 '#f) (set! bC4ecb@bC4c0d@bC4c08 bC4c0d@bC4c08) (set! bC4c0f@bC4c07 (make-record-constructor-descriptor bC4c0b@bC4c06 '#f bC4c0d@bC4c08)) (set! bC4ecc@bC4c0f@bC4c07 bC4c0f@bC4c07) (set! bC4c12@&condition? (record-predicate bC4c0b@bC4c06)) (set! bC4ecd@bC4c12@&condition? bC4c12@&condition?) (set! bC4c14@make-&condition (record-constructor bC4c0f@bC4c07)) (set! bC4ece@bC4c14@make-&condition bC4c14@make-&condition) (set! bC4c16@&condition-rtd bC4c0b@bC4c06) (set! bC4ecf@bC4c16@&condition-rtd bC4c16@&condition-rtd) (set! bC4c18@&condition-rcd bC4c0f@bC4c07) (set! bC4ed0@bC4c18@&condition-rcd bC4c18@&condition-rcd) (set! bC4c64@bC4c5f (make-record-type-descriptor '&message bC4c0b@bC4c06 'bC4c62 '#f '#f '#((immutable message)))) (set! bC4ed1@bC4c64@bC4c5f bC4c64@bC4c5f) (set! bC4c66@bC4c61 '#f) (set! bC4ed2@bC4c66@bC4c61 bC4c66@bC4c61) (set! bC4c68@bC4c60 (make-record-constructor-descriptor bC4c64@bC4c5f bC4c0f@bC4c07 bC4c66@bC4c61)) (set! bC4ed3@bC4c68@bC4c60 bC4c68@bC4c60) (set! bC4c6b@p? (record-predicate bC4c64@bC4c5f)) (set! bC4ed4@bC4c6b@p? bC4c6b@p?) (set! bC4c6d@make-message-condition (record-constructor bC4c68@bC4c60)) (set! bC4ed5@bC4c6d@make-message-condition bC4c6d@make-message-condition) (set! bC4c6f@bC4c5e (record-accessor bC4c64@bC4c5f '0)) (set! bC4ed6@bC4c6f@bC4c5e bC4c6f@bC4c5e) (set! bC4c71@message-condition? (condition-predicate bC4c64@bC4c5f)) (set! bC4ed7@bC4c71@message-condition? bC4c71@message-condition?) (set! bC4c73@condition-message (condition-accessor bC4c64@bC4c5f bC4c6f@bC4c5e)) (set! bC4ed8@bC4c73@condition-message bC4c73@condition-message) (set! bC4c75@&message-rtd bC4c64@bC4c5f) (set! bC4ed9@bC4c75@&message-rtd bC4c75@&message-rtd) (set! bC4c77@&message-rcd bC4c68@bC4c60) (set! bC4eda@bC4c77@&message-rcd bC4c77@&message-rcd) (set! bC4c7d@bC4c78 (make-record-type-descriptor '&warning bC4c0b@bC4c06 'bC4c7b '#f '#f '#())) (set! bC4edb@bC4c7d@bC4c78 bC4c7d@bC4c78) (set! bC4c7f@bC4c7a '#f) (set! bC4edc@bC4c7f@bC4c7a bC4c7f@bC4c7a) (set! bC4c81@bC4c79 (make-record-constructor-descriptor bC4c7d@bC4c78 bC4c0f@bC4c07 bC4c7f@bC4c7a)) (set! bC4edd@bC4c81@bC4c79 bC4c81@bC4c79) (set! bC4c84@p? (record-predicate bC4c7d@bC4c78)) (set! bC4ede@bC4c84@p? bC4c84@p?) (set! bC4c86@make-warning (record-constructor bC4c81@bC4c79)) (set! bC4edf@bC4c86@make-warning bC4c86@make-warning) (set! bC4c88@warning? (condition-predicate bC4c7d@bC4c78)) (set! bC4ee0@bC4c88@warning? bC4c88@warning?) (set! bC4c8a@&warning-rtd bC4c7d@bC4c78) (set! bC4ee1@bC4c8a@&warning-rtd bC4c8a@&warning-rtd) (set! bC4c8c@&warning-rcd bC4c81@bC4c79) (set! bC4ee2@bC4c8c@&warning-rcd bC4c8c@&warning-rcd) (set! bC4c92@bC4c8d (make-record-type-descriptor '&serious bC4c0b@bC4c06 'bC4c90 '#f '#f '#())) (set! bC4ee3@bC4c92@bC4c8d bC4c92@bC4c8d) (set! bC4c94@bC4c8f '#f) (set! bC4ee4@bC4c94@bC4c8f bC4c94@bC4c8f) (set! bC4c96@bC4c8e (make-record-constructor-descriptor bC4c92@bC4c8d bC4c0f@bC4c07 bC4c94@bC4c8f)) (set! bC4ee5@bC4c96@bC4c8e bC4c96@bC4c8e) (set! bC4c99@p? (record-predicate bC4c92@bC4c8d)) (set! bC4ee6@bC4c99@p? bC4c99@p?) (set! bC4c9b@make-serious-condition (record-constructor bC4c96@bC4c8e)) (set! bC4ee7@bC4c9b@make-serious-condition bC4c9b@make-serious-condition) (set! bC4c9d@serious-condition? (condition-predicate bC4c92@bC4c8d)) (set! bC4ee8@bC4c9d@serious-condition? bC4c9d@serious-condition?) (set! bC4c9f@&serious-rtd bC4c92@bC4c8d) (set! bC4ee9@bC4c9f@&serious-rtd bC4c9f@&serious-rtd) (set! bC4ca1@&serious-rcd bC4c96@bC4c8e) (set! bC4eea@bC4ca1@&serious-rcd bC4ca1@&serious-rcd) (set! bC4ca7@bC4ca2 (make-record-type-descriptor '&error bC4c92@bC4c8d 'bC4ca5 '#f '#f '#())) (set! bC4eeb@bC4ca7@bC4ca2 bC4ca7@bC4ca2) (set! bC4ca9@bC4ca4 '#f) (set! bC4eec@bC4ca9@bC4ca4 bC4ca9@bC4ca4) (set! bC4cab@bC4ca3 (make-record-constructor-descriptor bC4ca7@bC4ca2 bC4c96@bC4c8e bC4ca9@bC4ca4)) (set! bC4eed@bC4cab@bC4ca3 bC4cab@bC4ca3) (set! bC4cae@p? (record-predicate bC4ca7@bC4ca2)) (set! bC4eee@bC4cae@p? bC4cae@p?) (set! bC4cb0@make-error (record-constructor bC4cab@bC4ca3)) (set! bC4eef@bC4cb0@make-error bC4cb0@make-error) (set! bC4cb2@error? (condition-predicate bC4ca7@bC4ca2)) (set! bC4ef0@bC4cb2@error? bC4cb2@error?) (set! bC4cb4@&error-rtd bC4ca7@bC4ca2) (set! bC4ef1@bC4cb4@&error-rtd bC4cb4@&error-rtd) (set! bC4cb6@&error-rcd bC4cab@bC4ca3) (set! bC4ef2@bC4cb6@&error-rcd bC4cb6@&error-rcd) (set! bC4cbc@bC4cb7 (make-record-type-descriptor '&violation bC4c92@bC4c8d 'bC4cba '#f '#f '#())) (set! bC4ef3@bC4cbc@bC4cb7 bC4cbc@bC4cb7) (set! bC4cbe@bC4cb9 '#f) (set! bC4ef4@bC4cbe@bC4cb9 bC4cbe@bC4cb9) (set! bC4cc0@bC4cb8 (make-record-constructor-descriptor bC4cbc@bC4cb7 bC4c96@bC4c8e bC4cbe@bC4cb9)) (set! bC4ef5@bC4cc0@bC4cb8 bC4cc0@bC4cb8) (set! bC4cc3@p? (record-predicate bC4cbc@bC4cb7)) (set! bC4ef6@bC4cc3@p? bC4cc3@p?) (set! bC4cc5@make-violation (record-constructor bC4cc0@bC4cb8)) (set! bC4ef7@bC4cc5@make-violation bC4cc5@make-violation) (set! bC4cc7@violation? (condition-predicate bC4cbc@bC4cb7)) (set! bC4ef8@bC4cc7@violation? bC4cc7@violation?) (set! bC4cc9@&violation-rtd bC4cbc@bC4cb7) (set! bC4ef9@bC4cc9@&violation-rtd bC4cc9@&violation-rtd) (set! bC4ccb@&violation-rcd bC4cc0@bC4cb8) (set! bC4efa@bC4ccb@&violation-rcd bC4ccb@&violation-rcd) (set! bC4cd1@bC4ccc (make-record-type-descriptor '&assertion bC4cbc@bC4cb7 'bC4ccf '#f '#f '#())) (set! bC4efb@bC4cd1@bC4ccc bC4cd1@bC4ccc) (set! bC4cd3@bC4cce '#f) (set! bC4efc@bC4cd3@bC4cce bC4cd3@bC4cce) (set! bC4cd5@bC4ccd (make-record-constructor-descriptor bC4cd1@bC4ccc bC4cc0@bC4cb8 bC4cd3@bC4cce)) (set! bC4efd@bC4cd5@bC4ccd bC4cd5@bC4ccd) (set! bC4cd8@p? (record-predicate bC4cd1@bC4ccc)) (set! bC4efe@bC4cd8@p? bC4cd8@p?) (set! bC4cda@make-assertion-violation (record-constructor bC4cd5@bC4ccd)) (set! bC4eff@bC4cda@make-assertion-violation bC4cda@make-assertion-violation) (set! bC4cdc@assertion-violation? (condition-predicate bC4cd1@bC4ccc)) (set! bC4f00@bC4cdc@assertion-violation? bC4cdc@assertion-violation?) (set! bC4cde@&assertion-rtd bC4cd1@bC4ccc) (set! bC4f01@bC4cde@&assertion-rtd bC4cde@&assertion-rtd) (set! bC4ce0@&assertion-rcd bC4cd5@bC4ccd) (set! bC4f02@bC4ce0@&assertion-rcd bC4ce0@&assertion-rcd) (set! bC4ce8@bC4ce3 (make-record-type-descriptor '&irritants bC4c0b@bC4c06 'bC4ce6 '#f '#f '#((immutable irritants)))) (set! bC4f03@bC4ce8@bC4ce3 bC4ce8@bC4ce3) (set! bC4cea@bC4ce5 '#f) (set! bC4f04@bC4cea@bC4ce5 bC4cea@bC4ce5) (set! bC4cec@bC4ce4 (make-record-constructor-descriptor bC4ce8@bC4ce3 bC4c0f@bC4c07 bC4cea@bC4ce5)) (set! bC4f05@bC4cec@bC4ce4 bC4cec@bC4ce4) (set! bC4cef@p? (record-predicate bC4ce8@bC4ce3)) (set! bC4f06@bC4cef@p? bC4cef@p?) (set! bC4cf1@make-irritants-condition (record-constructor bC4cec@bC4ce4)) (set! bC4f07@bC4cf1@make-irritants-condition bC4cf1@make-irritants-condition) (set! bC4cf3@bC4ce2 (record-accessor bC4ce8@bC4ce3 '0)) (set! bC4f08@bC4cf3@bC4ce2 bC4cf3@bC4ce2) (set! bC4cf5@irritants-condition? (condition-predicate bC4ce8@bC4ce3)) (set! bC4f09@bC4cf5@irritants-condition? bC4cf5@irritants-condition?) (set! bC4cf7@condition-irritants (condition-accessor bC4ce8@bC4ce3 bC4cf3@bC4ce2)) (set! bC4f0a@bC4cf7@condition-irritants bC4cf7@condition-irritants) (set! bC4cf9@&irritants-rtd bC4ce8@bC4ce3) (set! bC4f0b@bC4cf9@&irritants-rtd bC4cf9@&irritants-rtd) (set! bC4cfb@&irritants-rcd bC4cec@bC4ce4) (set! bC4f0c@bC4cfb@&irritants-rcd bC4cfb@&irritants-rcd) (set! bC4d03@bC4cfe (make-record-type-descriptor '&who bC4c0b@bC4c06 'bC4d01 '#f '#f '#((immutable who)))) (set! bC4f0d@bC4d03@bC4cfe bC4d03@bC4cfe) (set! bC4d05@bC4d00 '#f) (set! bC4f0e@bC4d05@bC4d00 bC4d05@bC4d00) (set! bC4d07@bC4cff (make-record-constructor-descriptor bC4d03@bC4cfe bC4c0f@bC4c07 bC4d05@bC4d00)) (set! bC4f0f@bC4d07@bC4cff bC4d07@bC4cff) (set! bC4d0a@p? (record-predicate bC4d03@bC4cfe)) (set! bC4f10@bC4d0a@p? bC4d0a@p?) (set! bC4d0c@make-who-condition (record-constructor bC4d07@bC4cff)) (set! bC4f11@bC4d0c@make-who-condition bC4d0c@make-who-condition) (set! bC4d0e@bC4cfd (record-accessor bC4d03@bC4cfe '0)) (set! bC4f12@bC4d0e@bC4cfd bC4d0e@bC4cfd) (set! bC4d10@who-condition? (condition-predicate bC4d03@bC4cfe)) (set! bC4f13@bC4d10@who-condition? bC4d10@who-condition?) (set! bC4d12@condition-who (condition-accessor bC4d03@bC4cfe bC4d0e@bC4cfd)) (set! bC4f14@bC4d12@condition-who bC4d12@condition-who) (set! bC4d14@&who-rtd bC4d03@bC4cfe) (set! bC4f15@bC4d14@&who-rtd bC4d14@&who-rtd) (set! bC4d16@&who-rcd bC4d07@bC4cff) (set! bC4f16@bC4d16@&who-rcd bC4d16@&who-rcd) (set! bC4d1c@bC4d17 (make-record-type-descriptor '&non-continuable bC4cbc@bC4cb7 'bC4d1a '#f '#f '#())) (set! bC4f17@bC4d1c@bC4d17 bC4d1c@bC4d17) (set! bC4d1e@bC4d19 '#f) (set! bC4f18@bC4d1e@bC4d19 bC4d1e@bC4d19) (set! bC4d20@bC4d18 (make-record-constructor-descriptor bC4d1c@bC4d17 bC4cc0@bC4cb8 bC4d1e@bC4d19)) (set! bC4f19@bC4d20@bC4d18 bC4d20@bC4d18) (set! bC4d23@p? (record-predicate bC4d1c@bC4d17)) (set! bC4f1a@bC4d23@p? bC4d23@p?) (set! bC4d25@make-non-continuable-violation (record-constructor bC4d20@bC4d18)) (set! bC4f1b@bC4d25@make-non-continuable-violation bC4d25@make-non-continuable-violation) (set! bC4d27@non-continuable-violation? (condition-predicate bC4d1c@bC4d17)) (set! bC4f1c@bC4d27@non-continuable-violation? bC4d27@non-continuable-violation?) (set! bC4d29@&non-continuable-rtd bC4d1c@bC4d17) (set! bC4f1d@bC4d29@&non-continuable-rtd bC4d29@&non-continuable-rtd) (set! bC4d2b@&non-continuable-rcd bC4d20@bC4d18) (set! bC4f1e@bC4d2b@&non-continuable-rcd bC4d2b@&non-continuable-rcd) (set! bC4d31@bC4d2c (make-record-type-descriptor '&implementation-restriction bC4cbc@bC4cb7 'bC4d2f '#f '#f '#())) (set! bC4f1f@bC4d31@bC4d2c bC4d31@bC4d2c) (set! bC4d33@bC4d2e '#f) (set! bC4f20@bC4d33@bC4d2e bC4d33@bC4d2e) (set! bC4d35@bC4d2d (make-record-constructor-descriptor bC4d31@bC4d2c bC4cc0@bC4cb8 bC4d33@bC4d2e)) (set! bC4f21@bC4d35@bC4d2d bC4d35@bC4d2d) (set! bC4d38@p? (record-predicate bC4d31@bC4d2c)) (set! bC4f22@bC4d38@p? bC4d38@p?) (set! bC4d3a@make-implementation-restriction-violation (record-constructor bC4d35@bC4d2d)) (set! bC4f23@bC4d3a@make-implementation-restriction-violation bC4d3a@make-implementation-restriction-violation) (set! bC4d3c@implementation-restriction-violation? (condition-predicate bC4d31@bC4d2c)) (set! bC4f24@bC4d3c@implementation-restriction-violation? bC4d3c@implementation-restriction-violation?) (set! bC4d3e@&implementation-restriction-rtd bC4d31@bC4d2c) (set! bC4f25@bC4d3e@&implementation-restriction-rtd bC4d3e@&implementation-restriction-rtd) (set! bC4d40@&implementation-restriction-rcd bC4d35@bC4d2d) (set! bC4f26@bC4d40@&implementation-restriction-rcd bC4d40@&implementation-restriction-rcd) (set! bC4d46@bC4d41 (make-record-type-descriptor '&lexical bC4cbc@bC4cb7 'bC4d44 '#f '#f '#())) (set! bC4f27@bC4d46@bC4d41 bC4d46@bC4d41) (set! bC4d48@bC4d43 '#f) (set! bC4f28@bC4d48@bC4d43 bC4d48@bC4d43) (set! bC4d4a@bC4d42 (make-record-constructor-descriptor bC4d46@bC4d41 bC4cc0@bC4cb8 bC4d48@bC4d43)) (set! bC4f29@bC4d4a@bC4d42 bC4d4a@bC4d42) (set! bC4d4d@p? (record-predicate bC4d46@bC4d41)) (set! bC4f2a@bC4d4d@p? bC4d4d@p?) (set! bC4d4f@make-lexical-violation (record-constructor bC4d4a@bC4d42)) (set! bC4f2b@bC4d4f@make-lexical-violation bC4d4f@make-lexical-violation) (set! bC4d51@lexical-violation? (condition-predicate bC4d46@bC4d41)) (set! bC4f2c@bC4d51@lexical-violation? bC4d51@lexical-violation?) (set! bC4d53@&lexical-rtd bC4d46@bC4d41) (set! bC4f2d@bC4d53@&lexical-rtd bC4d53@&lexical-rtd) (set! bC4d55@&lexical-rcd bC4d4a@bC4d42) (set! bC4f2e@bC4d55@&lexical-rcd bC4d55@&lexical-rcd) (set! bC4d5f@bC4d5a (make-record-type-descriptor '&syntax bC4cbc@bC4cb7 'bC4d5d '#f '#f '#((immutable form) (immutable subform)))) (set! bC4f2f@bC4d5f@bC4d5a bC4d5f@bC4d5a) (set! bC4d61@bC4d5c '#f) (set! bC4f30@bC4d61@bC4d5c bC4d61@bC4d5c) (set! bC4d63@bC4d5b (make-record-constructor-descriptor bC4d5f@bC4d5a bC4cc0@bC4cb8 bC4d61@bC4d5c)) (set! bC4f31@bC4d63@bC4d5b bC4d63@bC4d5b) (set! bC4d66@p? (record-predicate bC4d5f@bC4d5a)) (set! bC4f32@bC4d66@p? bC4d66@p?) (set! bC4d68@make-syntax-violation (record-constructor bC4d63@bC4d5b)) (set! bC4f33@bC4d68@make-syntax-violation bC4d68@make-syntax-violation) (set! bC4d6a@bC4d57 (record-accessor bC4d5f@bC4d5a '0)) (set! bC4f34@bC4d6a@bC4d57 bC4d6a@bC4d57) (set! bC4d6c@bC4d59 (record-accessor bC4d5f@bC4d5a '1)) (set! bC4f35@bC4d6c@bC4d59 bC4d6c@bC4d59) (set! bC4d6e@syntax-violation? (condition-predicate bC4d5f@bC4d5a)) (set! bC4f36@bC4d6e@syntax-violation? bC4d6e@syntax-violation?) (set! bC4d70@syntax-violation-form (condition-accessor bC4d5f@bC4d5a bC4d6a@bC4d57)) (set! bC4f37@bC4d70@syntax-violation-form bC4d70@syntax-violation-form) (set! bC4d72@syntax-violation-subform (condition-accessor bC4d5f@bC4d5a bC4d6c@bC4d59)) (set! bC4f38@bC4d72@syntax-violation-subform bC4d72@syntax-violation-subform) (set! bC4d74@&syntax-rtd bC4d5f@bC4d5a) (set! bC4f39@bC4d74@&syntax-rtd bC4d74@&syntax-rtd) (set! bC4d76@&syntax-rcd bC4d63@bC4d5b) (set! bC4f3a@bC4d76@&syntax-rcd bC4d76@&syntax-rcd) (set! bC4d7c@bC4d77 (make-record-type-descriptor '&undefined bC4cbc@bC4cb7 'bC4d7a '#f '#f '#())) (set! bC4f3b@bC4d7c@bC4d77 bC4d7c@bC4d77) (set! bC4d7e@bC4d79 '#f) (set! bC4f3c@bC4d7e@bC4d79 bC4d7e@bC4d79) (set! bC4d80@bC4d78 (make-record-constructor-descriptor bC4d7c@bC4d77 bC4cc0@bC4cb8 bC4d7e@bC4d79)) (set! bC4f3d@bC4d80@bC4d78 bC4d80@bC4d78) (set! bC4d83@p? (record-predicate bC4d7c@bC4d77)) (set! bC4f3e@bC4d83@p? bC4d83@p?) (set! bC4d85@make-undefined-violation (record-constructor bC4d80@bC4d78)) (set! bC4f3f@bC4d85@make-undefined-violation bC4d85@make-undefined-violation) (set! bC4d87@undefined-violation? (condition-predicate bC4d7c@bC4d77)) (set! bC4f40@bC4d87@undefined-violation? bC4d87@undefined-violation?) (set! bC4d89@&undefined-rtd bC4d7c@bC4d77) (set! bC4f41@bC4d89@&undefined-rtd bC4d89@&undefined-rtd) (set! bC4d8b@&undefined-rcd bC4d80@bC4d78) (set! bC4f42@bC4d8b@&undefined-rcd bC4d8b@&undefined-rcd) (set! bC4d91@bC4d8c (make-record-type-descriptor '&i/o bC4ca7@bC4ca2 'bC4d8f '#f '#f '#())) (set! bC4f43@bC4d91@bC4d8c bC4d91@bC4d8c) (set! bC4d93@bC4d8e '#f) (set! bC4f44@bC4d93@bC4d8e bC4d93@bC4d8e) (set! bC4d95@bC4d8d (make-record-constructor-descriptor bC4d91@bC4d8c bC4cab@bC4ca3 bC4d93@bC4d8e)) (set! bC4f45@bC4d95@bC4d8d bC4d95@bC4d8d) (set! bC4d98@p? (record-predicate bC4d91@bC4d8c)) (set! bC4f46@bC4d98@p? bC4d98@p?) (set! bC4d9a@make-i/o-error (record-constructor bC4d95@bC4d8d)) (set! bC4f47@bC4d9a@make-i/o-error bC4d9a@make-i/o-error) (set! bC4d9c@i/o-error? (condition-predicate bC4d91@bC4d8c)) (set! bC4f48@bC4d9c@i/o-error? bC4d9c@i/o-error?) (set! bC4d9e@&i/o-rtd bC4d91@bC4d8c) (set! bC4f49@bC4d9e@&i/o-rtd bC4d9e@&i/o-rtd) (set! bC4da0@&i/o-rcd bC4d95@bC4d8d) (set! bC4f4a@bC4da0@&i/o-rcd bC4da0@&i/o-rcd) (set! bC4da6@bC4da1 (make-record-type-descriptor '&i/o-read bC4d91@bC4d8c 'bC4da4 '#f '#f '#())) (set! bC4f4b@bC4da6@bC4da1 bC4da6@bC4da1) (set! bC4da8@bC4da3 '#f) (set! bC4f4c@bC4da8@bC4da3 bC4da8@bC4da3) (set! bC4daa@bC4da2 (make-record-constructor-descriptor bC4da6@bC4da1 bC4d95@bC4d8d bC4da8@bC4da3)) (set! bC4f4d@bC4daa@bC4da2 bC4daa@bC4da2) (set! bC4dad@p? (record-predicate bC4da6@bC4da1)) (set! bC4f4e@bC4dad@p? bC4dad@p?) (set! bC4daf@make-i/o-read-error (record-constructor bC4daa@bC4da2)) (set! bC4f4f@bC4daf@make-i/o-read-error bC4daf@make-i/o-read-error) (set! bC4db1@i/o-read-error? (condition-predicate bC4da6@bC4da1)) (set! bC4f50@bC4db1@i/o-read-error? bC4db1@i/o-read-error?) (set! bC4db3@&i/o-read-rtd bC4da6@bC4da1) (set! bC4f51@bC4db3@&i/o-read-rtd bC4db3@&i/o-read-rtd) (set! bC4db5@&i/o-read-rcd bC4daa@bC4da2) (set! bC4f52@bC4db5@&i/o-read-rcd bC4db5@&i/o-read-rcd) (set! bC4dbb@bC4db6 (make-record-type-descriptor '&i/o-write bC4d91@bC4d8c 'bC4db9 '#f '#f '#())) (set! bC4f53@bC4dbb@bC4db6 bC4dbb@bC4db6) (set! bC4dbd@bC4db8 '#f) (set! bC4f54@bC4dbd@bC4db8 bC4dbd@bC4db8) (set! bC4dbf@bC4db7 (make-record-constructor-descriptor bC4dbb@bC4db6 bC4d95@bC4d8d bC4dbd@bC4db8)) (set! bC4f55@bC4dbf@bC4db7 bC4dbf@bC4db7) (set! bC4dc2@p? (record-predicate bC4dbb@bC4db6)) (set! bC4f56@bC4dc2@p? bC4dc2@p?) (set! bC4dc4@make-i/o-write-error (record-constructor bC4dbf@bC4db7)) (set! bC4f57@bC4dc4@make-i/o-write-error bC4dc4@make-i/o-write-error) (set! bC4dc6@i/o-write-error? (condition-predicate bC4dbb@bC4db6)) (set! bC4f58@bC4dc6@i/o-write-error? bC4dc6@i/o-write-error?) (set! bC4dc8@&i/o-write-rtd bC4dbb@bC4db6) (set! bC4f59@bC4dc8@&i/o-write-rtd bC4dc8@&i/o-write-rtd) (set! bC4dca@&i/o-write-rcd bC4dbf@bC4db7) (set! bC4f5a@bC4dca@&i/o-write-rcd bC4dca@&i/o-write-rcd) (set! bC4dd2@bC4dcd (make-record-type-descriptor '&i/o-invalid-position bC4d91@bC4d8c 'bC4dd0 '#f '#f '#((immutable position)))) (set! bC4f5b@bC4dd2@bC4dcd bC4dd2@bC4dcd) (set! bC4dd4@bC4dcf '#f) (set! bC4f5c@bC4dd4@bC4dcf bC4dd4@bC4dcf) (set! bC4dd6@bC4dce (make-record-constructor-descriptor bC4dd2@bC4dcd bC4d95@bC4d8d bC4dd4@bC4dcf)) (set! bC4f5d@bC4dd6@bC4dce bC4dd6@bC4dce) (set! bC4dd9@p? (record-predicate bC4dd2@bC4dcd)) (set! bC4f5e@bC4dd9@p? bC4dd9@p?) (set! bC4ddb@make-i/o-invalid-position-error (record-constructor bC4dd6@bC4dce)) (set! bC4f5f@bC4ddb@make-i/o-invalid-position-error bC4ddb@make-i/o-invalid-position-error) (set! bC4ddd@bC4dcc (record-accessor bC4dd2@bC4dcd '0)) (set! bC4f60@bC4ddd@bC4dcc bC4ddd@bC4dcc) (set! bC4ddf@i/o-invalid-position-error? (condition-predicate bC4dd2@bC4dcd)) (set! bC4f61@bC4ddf@i/o-invalid-position-error? bC4ddf@i/o-invalid-position-error?) (set! bC4de1@i/o-error-position (condition-accessor bC4dd2@bC4dcd bC4ddd@bC4dcc)) (set! bC4f62@bC4de1@i/o-error-position bC4de1@i/o-error-position) (set! bC4de3@&i/o-invalid-position-rtd bC4dd2@bC4dcd) (set! bC4f63@bC4de3@&i/o-invalid-position-rtd bC4de3@&i/o-invalid-position-rtd) (set! bC4de5@&i/o-invalid-position-rcd bC4dd6@bC4dce) (set! bC4f64@bC4de5@&i/o-invalid-position-rcd bC4de5@&i/o-invalid-position-rcd) (set! bC4ded@bC4de8 (make-record-type-descriptor '&i/o-filename bC4d91@bC4d8c 'bC4deb '#f '#f '#((immutable filename)))) (set! bC4f65@bC4ded@bC4de8 bC4ded@bC4de8) (set! bC4def@bC4dea '#f) (set! bC4f66@bC4def@bC4dea bC4def@bC4dea) (set! bC4df1@bC4de9 (make-record-constructor-descriptor bC4ded@bC4de8 bC4d95@bC4d8d bC4def@bC4dea)) (set! bC4f67@bC4df1@bC4de9 bC4df1@bC4de9) (set! bC4df4@p? (record-predicate bC4ded@bC4de8)) (set! bC4f68@bC4df4@p? bC4df4@p?) (set! bC4df6@make-i/o-filename-error (record-constructor bC4df1@bC4de9)) (set! bC4f69@bC4df6@make-i/o-filename-error bC4df6@make-i/o-filename-error) (set! bC4df8@bC4de7 (record-accessor bC4ded@bC4de8 '0)) (set! bC4f6a@bC4df8@bC4de7 bC4df8@bC4de7) (set! bC4dfa@i/o-filename-error? (condition-predicate bC4ded@bC4de8)) (set! bC4f6b@bC4dfa@i/o-filename-error? bC4dfa@i/o-filename-error?) (set! bC4dfc@i/o-error-filename (condition-accessor bC4ded@bC4de8 bC4df8@bC4de7)) (set! bC4f6c@bC4dfc@i/o-error-filename bC4dfc@i/o-error-filename) (set! bC4dfe@&i/o-filename-rtd bC4ded@bC4de8) (set! bC4f6d@bC4dfe@&i/o-filename-rtd bC4dfe@&i/o-filename-rtd) (set! bC4e00@&i/o-filename-rcd bC4df1@bC4de9) (set! bC4f6e@bC4e00@&i/o-filename-rcd bC4e00@&i/o-filename-rcd) (set! bC4e06@bC4e01 (make-record-type-descriptor '&i/o-file-protection bC4ded@bC4de8 'bC4e04 '#f '#f '#())) (set! bC4f6f@bC4e06@bC4e01 bC4e06@bC4e01) (set! bC4e08@bC4e03 '#f) (set! bC4f70@bC4e08@bC4e03 bC4e08@bC4e03) (set! bC4e0a@bC4e02 (make-record-constructor-descriptor bC4e06@bC4e01 bC4df1@bC4de9 bC4e08@bC4e03)) (set! bC4f71@bC4e0a@bC4e02 bC4e0a@bC4e02) (set! bC4e0d@p? (record-predicate bC4e06@bC4e01)) (set! bC4f72@bC4e0d@p? bC4e0d@p?) (set! bC4e0f@make-i/o-file-protection-error (record-constructor bC4e0a@bC4e02)) (set! bC4f73@bC4e0f@make-i/o-file-protection-error bC4e0f@make-i/o-file-protection-error) (set! bC4e11@i/o-file-protection-error? (condition-predicate bC4e06@bC4e01)) (set! bC4f74@bC4e11@i/o-file-protection-error? bC4e11@i/o-file-protection-error?) (set! bC4e13@&i/o-file-protection-rtd bC4e06@bC4e01) (set! bC4f75@bC4e13@&i/o-file-protection-rtd bC4e13@&i/o-file-protection-rtd) (set! bC4e15@&i/o-file-protection-rcd bC4e0a@bC4e02) (set! bC4f76@bC4e15@&i/o-file-protection-rcd bC4e15@&i/o-file-protection-rcd) (set! bC4e1b@bC4e16 (make-record-type-descriptor '&i/o-file-is-read-only bC4e06@bC4e01 'bC4e19 '#f '#f '#())) (set! bC4f77@bC4e1b@bC4e16 bC4e1b@bC4e16) (set! bC4e1d@bC4e18 '#f) (set! bC4f78@bC4e1d@bC4e18 bC4e1d@bC4e18) (set! bC4e1f@bC4e17 (make-record-constructor-descriptor bC4e1b@bC4e16 bC4e0a@bC4e02 bC4e1d@bC4e18)) (set! bC4f79@bC4e1f@bC4e17 bC4e1f@bC4e17) (set! bC4e22@p? (record-predicate bC4e1b@bC4e16)) (set! bC4f7a@bC4e22@p? bC4e22@p?) (set! bC4e24@make-i/o-file-is-read-only-error (record-constructor bC4e1f@bC4e17)) (set! bC4f7b@bC4e24@make-i/o-file-is-read-only-error bC4e24@make-i/o-file-is-read-only-error) (set! bC4e26@i/o-file-is-read-only-error? (condition-predicate bC4e1b@bC4e16)) (set! bC4f7c@bC4e26@i/o-file-is-read-only-error? bC4e26@i/o-file-is-read-only-error?) (set! bC4e28@&i/o-file-is-read-only-rtd bC4e1b@bC4e16) (set! bC4f7d@bC4e28@&i/o-file-is-read-only-rtd bC4e28@&i/o-file-is-read-only-rtd) (set! bC4e2a@&i/o-file-is-read-only-rcd bC4e1f@bC4e17) (set! bC4f7e@bC4e2a@&i/o-file-is-read-only-rcd bC4e2a@&i/o-file-is-read-only-rcd) (set! bC4e30@bC4e2b (make-record-type-descriptor '&i/o-file-already-exists bC4ded@bC4de8 'bC4e2e '#f '#f '#())) (set! bC4f7f@bC4e30@bC4e2b bC4e30@bC4e2b) (set! bC4e32@bC4e2d '#f) (set! bC4f80@bC4e32@bC4e2d bC4e32@bC4e2d) (set! bC4e34@bC4e2c (make-record-constructor-descriptor bC4e30@bC4e2b bC4df1@bC4de9 bC4e32@bC4e2d)) (set! bC4f81@bC4e34@bC4e2c bC4e34@bC4e2c) (set! bC4e37@p? (record-predicate bC4e30@bC4e2b)) (set! bC4f82@bC4e37@p? bC4e37@p?) (set! bC4e39@make-i/o-file-already-exists-error (record-constructor bC4e34@bC4e2c)) (set! bC4f83@bC4e39@make-i/o-file-already-exists-error bC4e39@make-i/o-file-already-exists-error) (set! bC4e3b@i/o-file-already-exists-error? (condition-predicate bC4e30@bC4e2b)) (set! bC4f84@bC4e3b@i/o-file-already-exists-error? bC4e3b@i/o-file-already-exists-error?) (set! bC4e3d@&i/o-file-already-exists-rtd bC4e30@bC4e2b) (set! bC4f85@bC4e3d@&i/o-file-already-exists-rtd bC4e3d@&i/o-file-already-exists-rtd) (set! bC4e3f@&i/o-file-already-exists-rcd bC4e34@bC4e2c) (set! bC4f86@bC4e3f@&i/o-file-already-exists-rcd bC4e3f@&i/o-file-already-exists-rcd) (set! bC4e45@bC4e40 (make-record-type-descriptor '&i/o-file-does-not-exist bC4ded@bC4de8 'bC4e43 '#f '#f '#())) (set! bC4f87@bC4e45@bC4e40 bC4e45@bC4e40) (set! bC4e47@bC4e42 '#f) (set! bC4f88@bC4e47@bC4e42 bC4e47@bC4e42) (set! bC4e49@bC4e41 (make-record-constructor-descriptor bC4e45@bC4e40 bC4df1@bC4de9 bC4e47@bC4e42)) (set! bC4f89@bC4e49@bC4e41 bC4e49@bC4e41) (set! bC4e4c@p? (record-predicate bC4e45@bC4e40)) (set! bC4f8a@bC4e4c@p? bC4e4c@p?) (set! bC4e4e@make-i/o-file-does-not-exist-error (record-constructor bC4e49@bC4e41)) (set! bC4f8b@bC4e4e@make-i/o-file-does-not-exist-error bC4e4e@make-i/o-file-does-not-exist-error) (set! bC4e50@i/o-file-does-not-exist-error? (condition-predicate bC4e45@bC4e40)) (set! bC4f8c@bC4e50@i/o-file-does-not-exist-error? bC4e50@i/o-file-does-not-exist-error?) (set! bC4e52@&i/o-file-does-not-exist-rtd bC4e45@bC4e40) (set! bC4f8d@bC4e52@&i/o-file-does-not-exist-rtd bC4e52@&i/o-file-does-not-exist-rtd) (set! bC4e54@&i/o-file-does-not-exist-rcd bC4e49@bC4e41) (set! bC4f8e@bC4e54@&i/o-file-does-not-exist-rcd bC4e54@&i/o-file-does-not-exist-rcd) (set! bC4e5c@bC4e57 (make-record-type-descriptor '&i/o-port bC4d91@bC4d8c 'bC4e5a '#f '#f '#((immutable port)))) (set! bC4f8f@bC4e5c@bC4e57 bC4e5c@bC4e57) (set! bC4e5e@bC4e59 '#f) (set! bC4f90@bC4e5e@bC4e59 bC4e5e@bC4e59) (set! bC4e60@bC4e58 (make-record-constructor-descriptor bC4e5c@bC4e57 bC4d95@bC4d8d bC4e5e@bC4e59)) (set! bC4f91@bC4e60@bC4e58 bC4e60@bC4e58) (set! bC4e63@p? (record-predicate bC4e5c@bC4e57)) (set! bC4f92@bC4e63@p? bC4e63@p?) (set! bC4e65@make-i/o-port-error (record-constructor bC4e60@bC4e58)) (set! bC4f93@bC4e65@make-i/o-port-error bC4e65@make-i/o-port-error) (set! bC4e67@bC4e56 (record-accessor bC4e5c@bC4e57 '0)) (set! bC4f94@bC4e67@bC4e56 bC4e67@bC4e56) (set! bC4e69@i/o-port-error? (condition-predicate bC4e5c@bC4e57)) (set! bC4f95@bC4e69@i/o-port-error? bC4e69@i/o-port-error?) (set! bC4e6b@i/o-error-port (condition-accessor bC4e5c@bC4e57 bC4e67@bC4e56)) (set! bC4f96@bC4e6b@i/o-error-port bC4e6b@i/o-error-port) (set! bC4e6d@&i/o-port-rtd bC4e5c@bC4e57) (set! bC4f97@bC4e6d@&i/o-port-rtd bC4e6d@&i/o-port-rtd) (set! bC4e6f@&i/o-port-rcd bC4e60@bC4e58) (set! bC4f98@bC4e6f@&i/o-port-rcd bC4e6f@&i/o-port-rcd) (set! bC4e75@bC4e70 (make-record-type-descriptor '&i/o-decoding bC4e5c@bC4e57 'bC4e73 '#f '#f '#())) (set! bC4f99@bC4e75@bC4e70 bC4e75@bC4e70) (set! bC4e77@bC4e72 '#f) (set! bC4f9a@bC4e77@bC4e72 bC4e77@bC4e72) (set! bC4e79@bC4e71 (make-record-constructor-descriptor bC4e75@bC4e70 bC4e60@bC4e58 bC4e77@bC4e72)) (set! bC4f9b@bC4e79@bC4e71 bC4e79@bC4e71) (set! bC4e7c@p? (record-predicate bC4e75@bC4e70)) (set! bC4f9c@bC4e7c@p? bC4e7c@p?) (set! bC4e7e@make-i/o-decoding-error (record-constructor bC4e79@bC4e71)) (set! bC4f9d@bC4e7e@make-i/o-decoding-error bC4e7e@make-i/o-decoding-error) (set! bC4e80@i/o-decoding-error? (condition-predicate bC4e75@bC4e70)) (set! bC4f9e@bC4e80@i/o-decoding-error? bC4e80@i/o-decoding-error?) (set! bC4e82@&i/o-decoding-rtd bC4e75@bC4e70) (set! bC4f9f@bC4e82@&i/o-decoding-rtd bC4e82@&i/o-decoding-rtd) (set! bC4e84@&i/o-decoding-rcd bC4e79@bC4e71) (set! bC4fa0@bC4e84@&i/o-decoding-rcd bC4e84@&i/o-decoding-rcd) (set! bC4e8c@bC4e87 (make-record-type-descriptor '&i/o-encoding bC4e5c@bC4e57 'bC4e8a '#f '#f '#((immutable char)))) (set! bC4fa1@bC4e8c@bC4e87 bC4e8c@bC4e87) (set! bC4e8e@bC4e89 '#f) (set! bC4fa2@bC4e8e@bC4e89 bC4e8e@bC4e89) (set! bC4e90@bC4e88 (make-record-constructor-descriptor bC4e8c@bC4e87 bC4e60@bC4e58 bC4e8e@bC4e89)) (set! bC4fa3@bC4e90@bC4e88 bC4e90@bC4e88) (set! bC4e93@p? (record-predicate bC4e8c@bC4e87)) (set! bC4fa4@bC4e93@p? bC4e93@p?) (set! bC4e95@make-i/o-encoding-error (record-constructor bC4e90@bC4e88)) (set! bC4fa5@bC4e95@make-i/o-encoding-error bC4e95@make-i/o-encoding-error) (set! bC4e97@bC4e86 (record-accessor bC4e8c@bC4e87 '0)) (set! bC4fa6@bC4e97@bC4e86 bC4e97@bC4e86) (set! bC4e99@i/o-encoding-error? (condition-predicate bC4e8c@bC4e87)) (set! bC4fa7@bC4e99@i/o-encoding-error? bC4e99@i/o-encoding-error?) (set! bC4e9b@i/o-encoding-error-char (condition-accessor bC4e8c@bC4e87 bC4e97@bC4e86)) (set! bC4fa8@bC4e9b@i/o-encoding-error-char bC4e9b@i/o-encoding-error-char) (set! bC4e9d@&i/o-encoding-rtd bC4e8c@bC4e87) (set! bC4fa9@bC4e9d@&i/o-encoding-rtd bC4e9d@&i/o-encoding-rtd) (set! bC4e9f@&i/o-encoding-rcd bC4e90@bC4e88) (set! bC4faa@bC4e9f@&i/o-encoding-rcd bC4e9f@&i/o-encoding-rcd) (set! bC4ea5@bC4ea0 (make-record-type-descriptor '&no-infinities bC4d31@bC4d2c 'bC4ea3 '#f '#f '#())) (set! bC4fab@bC4ea5@bC4ea0 bC4ea5@bC4ea0) (set! bC4ea7@bC4ea2 '#f) (set! bC4fac@bC4ea7@bC4ea2 bC4ea7@bC4ea2) (set! bC4ea9@bC4ea1 (make-record-constructor-descriptor bC4ea5@bC4ea0 bC4d35@bC4d2d bC4ea7@bC4ea2)) (set! bC4fad@bC4ea9@bC4ea1 bC4ea9@bC4ea1) (set! bC4eac@p? (record-predicate bC4ea5@bC4ea0)) (set! bC4fae@bC4eac@p? bC4eac@p?) (set! bC4eae@make-no-infinities-violation (record-constructor bC4ea9@bC4ea1)) (set! bC4faf@bC4eae@make-no-infinities-violation bC4eae@make-no-infinities-violation) (set! bC4eb0@no-infinities-violation? (condition-predicate bC4ea5@bC4ea0)) (set! bC4fb0@bC4eb0@no-infinities-violation? bC4eb0@no-infinities-violation?) (set! bC4eb2@&no-infinities-rtd bC4ea5@bC4ea0) (set! bC4fb1@bC4eb2@&no-infinities-rtd bC4eb2@&no-infinities-rtd) (set! bC4eb4@&no-infinities-rcd bC4ea9@bC4ea1) (set! bC4fb2@bC4eb4@&no-infinities-rcd bC4eb4@&no-infinities-rcd) (set! bC4eba@bC4eb5 (make-record-type-descriptor '&no-nans bC4d31@bC4d2c 'bC4eb8 '#f '#f '#())) (set! bC4fb3@bC4eba@bC4eb5 bC4eba@bC4eb5) (set! bC4ebc@bC4eb7 '#f) (set! bC4fb4@bC4ebc@bC4eb7 bC4ebc@bC4eb7) (set! bC4ebe@bC4eb6 (make-record-constructor-descriptor bC4eba@bC4eb5 bC4d35@bC4d2d bC4ebc@bC4eb7)) (set! bC4fb5@bC4ebe@bC4eb6 bC4ebe@bC4eb6) (set! bC4ec1@p? (record-predicate bC4eba@bC4eb5)) (set! bC4fb6@bC4ec1@p? bC4ec1@p?) (set! bC4ec3@make-no-nans-violation (record-constructor bC4ebe@bC4eb6)) (set! bC4fb7@bC4ec3@make-no-nans-violation bC4ec3@make-no-nans-violation) (set! bC4ec5@no-nans-violation? (condition-predicate bC4eba@bC4eb5)) (set! bC4fb8@bC4ec5@no-nans-violation? bC4ec5@no-nans-violation?) (set! bC4ec7@&no-nans-rtd bC4eba@bC4eb5) (set! bC4fb9@bC4ec7@&no-nans-rtd bC4ec7@&no-nans-rtd) (set! bC4ec9@&no-nans-rcd bC4ebe@bC4eb6) (set! bC4fba@bC4ec9@&no-nans-rcd bC4ec9@&no-nans-rcd) (void))
(begin (begin (bC2a56@bC2a0b@current-primitive-locations (lambda (bC5485@x) (let ((bC5487@t (assq bC5485@x '((&no-nans-rcd . bC4fba@bC4ec9@&no-nans-rcd) (&no-nans-rtd . bC4fb9@bC4ec7@&no-nans-rtd) (&no-infinities-rcd . bC4fb2@bC4eb4@&no-infinities-rcd) (&no-infinities-rtd . bC4fb1@bC4eb2@&no-infinities-rtd) (&i/o-encoding-rcd . bC4faa@bC4e9f@&i/o-encoding-rcd) (&i/o-encoding-rtd . bC4fa9@bC4e9d@&i/o-encoding-rtd) (&i/o-decoding-rcd . bC4fa0@bC4e84@&i/o-decoding-rcd) (&i/o-decoding-rtd . bC4f9f@bC4e82@&i/o-decoding-rtd) (&i/o-port-rcd . bC4f98@bC4e6f@&i/o-port-rcd) (&i/o-port-rtd . bC4f97@bC4e6d@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . bC4f8e@bC4e54@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . bC4f8d@bC4e52@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . bC4f86@bC4e3f@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . bC4f85@bC4e3d@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . bC4f7e@bC4e2a@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . bC4f7d@bC4e28@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . bC4f76@bC4e15@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . bC4f75@bC4e13@&i/o-file-protection-rtd) (&i/o-filename-rcd . bC4f6e@bC4e00@&i/o-filename-rcd) (&i/o-filename-rtd . bC4f6d@bC4dfe@&i/o-filename-rtd) (&i/o-invalid-position-rcd . bC4f64@bC4de5@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . bC4f63@bC4de3@&i/o-invalid-position-rtd) (&i/o-write-rcd . bC4f5a@bC4dca@&i/o-write-rcd) (&i/o-write-rtd . bC4f59@bC4dc8@&i/o-write-rtd) (&i/o-read-rcd . bC4f52@bC4db5@&i/o-read-rcd) (&i/o-read-rtd . bC4f51@bC4db3@&i/o-read-rtd) (&i/o-rcd . bC4f4a@bC4da0@&i/o-rcd) (&i/o-rtd . bC4f49@bC4d9e@&i/o-rtd) (&undefined-rcd . bC4f42@bC4d8b@&undefined-rcd) (&undefined-rtd . bC4f41@bC4d89@&undefined-rtd) (&syntax-rcd . bC4f3a@bC4d76@&syntax-rcd) (&syntax-rtd . bC4f39@bC4d74@&syntax-rtd) (&lexical-rcd . bC4f2e@bC4d55@&lexical-rcd) (&lexical-rtd . bC4f2d@bC4d53@&lexical-rtd) (&implementation-restriction-rcd . bC4f26@bC4d40@&implementation-restriction-rcd) (&implementation-restriction-rtd . bC4f25@bC4d3e@&implementation-restriction-rtd) (&non-continuable-rcd . bC4f1e@bC4d2b@&non-continuable-rcd) (&non-continuable-rtd . bC4f1d@bC4d29@&non-continuable-rtd) (&who-rcd . bC4f16@bC4d16@&who-rcd) (&who-rtd . bC4f15@bC4d14@&who-rtd) (&irritants-rcd . bC4f0c@bC4cfb@&irritants-rcd) (&irritants-rtd . bC4f0b@bC4cf9@&irritants-rtd) (&assertion-rcd . bC4f02@bC4ce0@&assertion-rcd) (&assertion-rtd . bC4f01@bC4cde@&assertion-rtd) (&violation-rcd . bC4efa@bC4ccb@&violation-rcd) (&violation-rtd . bC4ef9@bC4cc9@&violation-rtd) (&error-rcd . bC4ef2@bC4cb6@&error-rcd) (&error-rtd . bC4ef1@bC4cb4@&error-rtd) (&serious-rcd . bC4eea@bC4ca1@&serious-rcd) (&serious-rtd . bC4ee9@bC4c9f@&serious-rtd) (&warning-rcd . bC4ee2@bC4c8c@&warning-rcd) (&warning-rtd . bC4ee1@bC4c8a@&warning-rtd) (&message-rcd . bC4eda@bC4c77@&message-rcd) (&message-rtd . bC4ed9@bC4c75@&message-rtd) (&condition-rcd . bC4ed0@bC4c18@&condition-rcd) (&condition-rtd . bC4ecf@bC4c16@&condition-rtd) (syntax-error . bC4bf2@bC3196@syntax-error) (syntax-dispatch . bC4b90@bC30ba@syntax-dispatch) (load . bC512f@bC4fda@load) (interaction-environment . bC4bfb@bC31a8@interaction-environment) (library-path . bC2cbd@bC2af9@library-path) (mosh-cache-dir . bC2a04@bC28e3@mosh-cache-dir) (make-parameter . bC2a03@bC28e1@make-parameter) (make-variable-transformer . bC4b4d@bC2ee5@make-variable-transformer) (identifier? . bC4bf5@bC319c@identifier?) (generate-temporaries . bC4beb@bC3188@generate-temporaries) (free-identifier=? . bC4bec@bC318a@free-identifier=?) (syntax->datum . bC4bf7@bC31a0@syntax->datum) (datum->syntax . bC4bf6@bC319e@datum->syntax) (bound-identifier=? . bC4bed@bC318c@bound-identifier=?) (make-i/o-write-error . bC4f57@bC4dc4@make-i/o-write-error) (make-i/o-read-error . bC4f4f@bC4daf@make-i/o-read-error) (make-i/o-port-error . bC4f93@bC4e65@make-i/o-port-error) (make-i/o-invalid-position-error . bC4f5f@bC4ddb@make-i/o-invalid-position-error) (make-i/o-filename-error . bC4f69@bC4df6@make-i/o-filename-error) (make-i/o-file-protection-error . bC4f73@bC4e0f@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . bC4f7b@bC4e24@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . bC4f8b@bC4e4e@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . bC4f83@bC4e39@make-i/o-file-already-exists-error) (make-i/o-error . bC4f47@bC4d9a@make-i/o-error) (make-i/o-encoding-error . bC4fa5@bC4e95@make-i/o-encoding-error) (make-i/o-decoding-error . bC4f9d@bC4e7e@make-i/o-decoding-error) (i/o-write-error? . bC4f58@bC4dc6@i/o-write-error?) (i/o-read-error? . bC4f50@bC4db1@i/o-read-error?) (i/o-port-error? . bC4f95@bC4e69@i/o-port-error?) (i/o-invalid-position-error? . bC4f61@bC4ddf@i/o-invalid-position-error?) (i/o-filename-error? . bC4f6b@bC4dfa@i/o-filename-error?) (i/o-file-protection-error? . bC4f74@bC4e11@i/o-file-protection-error?) (i/o-file-is-read-only-error? . bC4f7c@bC4e26@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . bC4f8c@bC4e50@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . bC4f84@bC4e3b@i/o-file-already-exists-error?) (i/o-error? . bC4f48@bC4d9c@i/o-error?) (i/o-error-position . bC4f62@bC4de1@i/o-error-position) (i/o-error-port . bC4f96@bC4e6b@i/o-error-port) (i/o-error-filename . bC4f6c@bC4dfc@i/o-error-filename) (i/o-encoding-error? . bC4fa7@bC4e99@i/o-encoding-error?) (i/o-encoding-error-char . bC4fa8@bC4e9b@i/o-encoding-error-char) (i/o-decoding-error? . bC4f9e@bC4e80@i/o-decoding-error?) (scheme-report-environment . bC4be2@bC3176@scheme-report-environment) (null-environment . bC4be1@bC3174@null-environment) (command-line . bC512c@bC4fd4@command-line) (eval . bC4be4@bC317a@eval) (environment . bC4be0@bC3172@environment) (who-condition? . bC4f13@bC4d10@who-condition?) (warning? . bC4ee0@bC4c88@warning?) (violation? . bC4ef8@bC4cc7@violation?) (undefined-violation? . bC4f40@bC4d87@undefined-violation?) (syntax-violation? . bC4f36@bC4d6e@syntax-violation?) (syntax-violation-subform . bC4f38@bC4d72@syntax-violation-subform) (syntax-violation-form . bC4f37@bC4d70@syntax-violation-form) (syntax-violation . bC4bf4@bC319a@syntax-violation) (serious-condition? . bC4ee8@bC4c9d@serious-condition?) (non-continuable-violation? . bC4f1c@bC4d27@non-continuable-violation?) (message-condition? . bC4ed7@bC4c71@message-condition?) (make-who-condition . bC4f11@bC4d0c@make-who-condition) (make-warning . bC4edf@bC4c86@make-warning) (make-violation . bC4ef7@bC4cc5@make-violation) (make-undefined-violation . bC4f3f@bC4d85@make-undefined-violation) (make-syntax-violation . bC4f33@bC4d68@make-syntax-violation) (make-serious-condition . bC4ee7@bC4c9b@make-serious-condition) (make-non-continuable-violation . bC4f1b@bC4d25@make-non-continuable-violation) (make-message-condition . bC4ed5@bC4c6d@make-message-condition) (make-lexical-violation . bC4f2b@bC4d4f@make-lexical-violation) (make-irritants-condition . bC4f07@bC4cf1@make-irritants-condition) (make-implementation-restriction-violation . bC4f23@bC4d3a@make-implementation-restriction-violation) (make-error . bC4eef@bC4cb0@make-error) (make-assertion-violation . bC4eff@bC4cda@make-assertion-violation) (lexical-violation? . bC4f2c@bC4d51@lexical-violation?) (irritants-condition? . bC4f09@bC4cf5@irritants-condition?) (implementation-restriction-violation? . bC4f24@bC4d3c@implementation-restriction-violation?) (error? . bC4ef0@bC4cb2@error?) (condition-who . bC4f14@bC4d12@condition-who) (condition-message . bC4ed8@bC4c73@condition-message) (condition-irritants . bC4f0a@bC4cf7@condition-irritants) (assertion-violation? . bC4f00@bC4cdc@assertion-violation?) (no-nans-violation? . bC4fb8@bC4ec5@no-nans-violation?) (no-infinities-violation? . bC4fb0@bC4eb0@no-infinities-violation?) (make-no-nans-violation . bC4fb7@bC4ec3@make-no-nans-violation) (make-no-infinities-violation . bC4faf@bC4eae@make-no-infinities-violation) (assertion-error . bC4bf1@bC3194@assertion-error))))) (if bC5487@t (cdr bC5487@t) '#f)))) (bC2ccd@bC2b19@install-library 'bC5462 '(mosh interaction) '() '() '() '() '((regexp? . bC545a) (alist->eq-hash-table . bC5456) (format . bC5453) (string-split . bC5448) (call-process . bC5442) (set-current-directory! . bC543e) (expand-path . bC543d) (current-directory . bC543c) (%spawn . bC543b) (%waitpid . bC543a) (simple-struct-name . bC5439) (simple-struct-set! . bC5438) (simple-struct-ref . bC5437) (make-simple-struct . bC5436) (simple-struct? . bC5435) (pointer-ref-c-int64 . bC5434) (pointer-ref-c-int32 . bC5433) (pointer-ref-c-int16 . bC5432) (pointer-ref-c-int8 . bC5431) (pointer-ref-c-uint64 . bC5430) (pointer-ref-c-uint32 . bC542f) (pointer-ref-c-uint16 . bC542e) (pointer-ref-c-uint8 . bC542d) (pointer-set-c-uint64! . bC542c) (pointer-set-c-uint32! . bC542b) (pointer-set-c-uint16! . bC542a) (pointer-set-c-uint8! . bC5429) (pointer-set-c-int64! . bC5428) (pointer-set-c-int32! . bC5427) (pointer-set-c-int16! . bC5426) (pointer-set-c-int8! . bC5425) (pointer-set-c-pointer! . bC5424) (pointer-set-c-double! . bC5423) (pointer-set-c-float! . bC5422) (pointer-set-c-long-long! . bC5421) (pointer-set-c-long! . bC5420) (pointer-set-c-int! . bC541f) (pointer-set-c-short! . bC541e) (pointer-set-c-char! . bC541d) (pointer-ref-c-pointer . bC541c) (pointer-ref-c-double . bC541b) (pointer-ref-c-float . bC541a) (pointer-ref-c-unsigned-long-long . bC5419) (pointer-ref-c-signed-long-long . bC5418) (pointer-ref-c-unsigned-long . bC5417) (pointer-ref-c-signed-long . bC5416) (pointer-ref-c-unsigned-int . bC5415) (pointer-ref-c-signed-int . bC5414) (pointer-ref-c-unsigned-short . bC5413) (pointer-ref-c-signed-short . bC5412) (pointer-ref-c-unsigned-char . bC5411) (pointer-ref-c-signed-char . bC5410) (pointer->integer . bC540f) (integer->pointer . bC540e) (pointer? . bC540d) (shared-errno . bC540c) (%ffi-supported? . bC5407) (%ffi-pointer->string . bC5406) (%ffi-call . bC5405) (%ffi-lookup . bC5404) (%ffi-open . bC5403) (null-terminated-utf8->string . bC5402) (null-terminated-bytevector->string . bC5401) (%fork . bC5400) (%pipe . bC53ff) (p . bC53fe) (whereis . bC53e2) (register . bC53e1) (vm-join! . bC53e0) (vm-set-value! . bC53df) (vm? . bC53de) (main-vm? . bC53dd) (vm-eval . bC53dc) (vm-self . bC53db) (vm-start! . bC53da) (make-vm . bC53d9) (mutex-try-lock! . bC53d8) (mutex-unlock! . bC53d7) (mutex-lock! . bC53d6) (mutex? . bC53d5) (make-mutex . bC53d4) (condition-variable-notify-all! . bC53d3) (condition-variable-notify! . bC53d2) (condition-variable-wait! . bC53d1) (make-condition-variable . bC53d0) (string-upcase . bC53b8) (string-titlecase . bC53b7) (string-normalize-nfkd . bC53b6) (string-normalize-nfkc . bC53b5) (string-normalize-nfd . bC53b4) (string-normalize-nfc . bC53b3) (string-foldcase . bC53b2) (string-downcase . bC53b1) (string-ci>? . bC53b0) (string-ci>=? . bC53af) (string-ci=? . bC53ae) (string-ci<? . bC53ad) (string-ci<=? . bC53ac) (char-whitespace? . bC53ab) (char-upper-case? . bC53aa) (char-title-case? . bC53a9) (char-numeric? . bC53a8) (char-lower-case? . bC53a7) (char-general-category . bC53a6) (char-upcase . bC53a5) (char-titlecase . bC53a4) (char-foldcase . bC53a3) (char-downcase . bC53a2) (char-ci>? . bC53a1) (char-ci>=? . bC53a0) (char-ci=? . bC539f) (char-ci<? . bC539e) (char-ci<=? . bC539d) (char-alphabetic? . bC539c) (make-variable-transformer . bC2ee4) (identifier? . bC319b) (generate-temporaries . bC3187) (free-identifier=? . bC3189) (syntax->datum . bC319f) (datum->syntax . bC319d) (bound-identifier=? . bC318b) (record-type-descriptor? . bC539b) (record-predicate . bC539a) (record-mutator . bC5399) (record-constructor . bC5398) (record-accessor . bC5397) (make-record-type-descriptor . bC5396) (make-record-constructor-descriptor . bC5395) (record? . bC5394) (record-type-uid . bC5393) (record-type-sealed? . bC5392) (record-type-parent . bC5391) (record-type-opaque? . bC5390) (record-type-name . bC538f) (record-type-generative? . bC538e) (record-type-field-names . bC538d) (record-rtd . bC538c) (record-field-mutable? . bC538b) (delete-file . bC538a) (file-exists? . bC5389) (vector-sort! . bC5388) (vector-sort . bC5387) (list-sort . bC5386) (symbol-hash . bC5385) (string-ci-hash . bC5384) (string-hash . bC5383) (equal-hash . bC5382) (hashtable-equivalence-function . bC5381) (make-hashtable . bC5380) (hashtable-hash-function . bC537f) (make-eqv-hashtable . bC537e) (make-eq-hashtable . bC537d) (hashtable? . bC537c) (hashtable-update! . bC537b) (hashtable-size . bC537a) (hashtable-set! . bC5379) (hashtable-ref . bC5378) (hashtable-mutable? . bC5377) (hashtable-keys . bC5376) (hashtable-entries . bC5375) (hashtable-delete! . bC5374) (hashtable-copy . bC5373) (hashtable-contains? . bC5372) (hashtable-clear! . bC5371) (call-with-output-file . bC5370) (call-with-input-file . bC536f) (write-char . bC536e) (write . bC536d) (with-output-to-file . bC536c) (with-input-from-file . bC536b) (read-char . bC536a) (read . bC5369) (peek-char . bC5368) (open-output-file . bC5367) (open-input-file . bC5366) (newline . bC5365) (display . bC5364) (close-output-port . bC5363) (close-input-port . bC5362) (eof-object? . bC5361) (eof-object . bC5360) (current-error-port . bC535f) (current-output-port . bC535e) (current-input-port . bC535d) (output-port? . bC535c) (input-port? . bC535b) (utf-8-codec . bC535a) (utf-16-codec . bC5359) (transcoder-error-handling-mode . bC5358) (transcoder-eol-style . bC5357) (transcoder-codec . bC5356) (transcoded-port . bC5355) (textual-port? . bC5354) (string->bytevector . bC5353) (standard-output-port . bC5352) (standard-input-port . bC5351) (standard-error-port . bC5350) (set-port-position! . bC534f) (put-u8 . bC534e) (put-string . bC534d) (put-datum . bC534c) (put-char . bC534b) (put-bytevector . bC534a) (port? . bC5349) (port-transcoder . bC5348) (port-position . bC5347) (port-has-set-port-position!? . bC5346) (port-has-port-position? . bC5345) (port-eof? . bC5344) (output-port-buffer-mode . bC5343) (open-string-output-port . bC5342) (open-string-input-port . bC5341) (open-file-output-port . bC5340) (open-file-input/output-port . bC533f) (open-file-input-port . bC533e) (open-bytevector-output-port . bC533d) (open-bytevector-input-port . bC533c) (native-transcoder . bC533b) (native-eol-style . bC533a) (make-transcoder . bC5339) (latin-1-codec . bC5338) (make-i/o-write-error . bC4dc3) (make-i/o-read-error . bC4dae) (make-i/o-port-error . bC4e64) (make-i/o-invalid-position-error . bC4dda) (make-i/o-filename-error . bC4df5) (make-i/o-file-protection-error . bC4e0e) (make-i/o-file-is-read-only-error . bC4e23) (make-i/o-file-does-not-exist-error . bC4e4d) (make-i/o-file-already-exists-error . bC4e38) (make-i/o-error . bC4d99) (make-i/o-encoding-error . bC4e94) (make-i/o-decoding-error . bC4e7d) (make-custom-textual-output-port . bC5337) (make-custom-textual-input/output-port . bC5336) (make-custom-textual-input-port . bC5335) (make-custom-binary-output-port . bC5334) (make-custom-binary-input/output-port . bC5333) (make-custom-binary-input-port . bC5332) (make-bytevector . bC5331) (lookahead-u8 . bC5330) (lookahead-char . bC532f) (i/o-write-error? . bC4dc5) (i/o-read-error? . bC4db0) (i/o-port-error? . bC4e68) (i/o-invalid-position-error? . bC4dde) (i/o-filename-error? . bC4df9) (i/o-file-protection-error? . bC4e10) (i/o-file-is-read-only-error? . bC4e25) (i/o-file-does-not-exist-error? . bC4e4f) (i/o-file-already-exists-error? . bC4e3a) (i/o-error? . bC4d9b) (i/o-error-position . bC4de0) (i/o-error-port . bC4e6a) (i/o-error-filename . bC4dfb) (i/o-encoding-error? . bC4e98) (i/o-encoding-error-char . bC4e9a) (i/o-decoding-error? . bC4e7f) (get-u8 . bC532e) (get-string-n! . bC532d) (get-string-n . bC532c) (get-string-all . bC532b) (get-line . bC532a) (get-datum . bC5329) (get-char . bC5328) (get-bytevector-some . bC5327) (get-bytevector-n! . bC5326) (get-bytevector-n . bC5325) (get-bytevector-all . bC5324) (flush-output-port . bC5323) (close-port . bC5322) (exit . bC531a) (command-line . bC4fd3) (string-fill! . bC5319) (string-set! . bC5318) (set-cdr! . bC5317) (set-car! . bC5316) (remove . bC5315) (remv . bC5314) (remp . bC5313) (remq . bC5312) (partition . bC5311) (memv . bC5310) (memq . bC530f) (memp . bC530e) (member . bC530d) (exists . bC530c) (for-all . bC530b) (fold-right . bC530a) (fold-left . bC5309) (find . bC5308) (filter . bC5307) (cons* . bC5306) (assv . bC5305) (assq . bC5304) (assp . bC5303) (assoc . bC5302) (call-with-string-output-port . bC5301) (call-with-port . bC5300) (call-with-bytevector-output-port . bC52ff) (bytevector->string . bC52fe) (buffer-mode? . bC52fd) (binary-port? . bC52fc) (with-exception-handler . bC52fb) (raise-continuable . bC52fa) (raise . bC52f9) (eval . bC3179) (environment . bC3171) (make-enumeration . bC52f8) (enum-set=? . bC52f7) (enum-set-universe . bC52f6) (enum-set-union . bC52f5) (enum-set-subset? . bC52f4) (enum-set-projection . bC52f3) (enum-set-member? . bC52f2) (enum-set-intersection . bC52f1) (enum-set-indexer . bC52f0) (enum-set-difference . bC52ef) (enum-set-constructor . bC52ee) (enum-set-complement . bC52ed) (enum-set->list . bC52ec) (who-condition? . bC4d0f) (warning? . bC4c87) (violation? . bC4cc6) (undefined-violation? . bC4d86) (syntax-violation? . bC4d6d) (syntax-violation-subform . bC4d71) (syntax-violation-form . bC4d6f) (syntax-violation . bC3199) (simple-conditions . bC52eb) (serious-condition? . bC4c9c) (non-continuable-violation? . bC4d26) (message-condition? . bC4c70) (make-who-condition . bC4d0b) (make-warning . bC4c85) (make-violation . bC4cc4) (make-undefined-violation . bC4d84) (make-syntax-violation . bC4d67) (make-serious-condition . bC4c9a) (make-non-continuable-violation . bC4d24) (make-message-condition . bC4c6c) (make-lexical-violation . bC4d4e) (make-irritants-condition . bC4cf0) (make-implementation-restriction-violation . bC4d39) (make-error . bC4caf) (make-assertion-violation . bC4cd9) (lexical-violation? . bC4d50) (irritants-condition? . bC4cf4) (implementation-restriction-violation? . bC4d3b) (error? . bC4cb1) (condition-who . bC4d11) (condition-predicate . bC52ea) (condition-message . bC4c72) (condition-irritants . bC4cf6) (condition-accessor . bC52e9) (condition . bC52e8) (assertion-violation? . bC4cdb) (condition? . bC52e7) (utf32->string . bC52e6) (utf16->string . bC52e5) (utf8->string . bC52e4) (uint-list->bytevector . bC52e3) (u8-list->bytevector . bC52e2) (string->utf8 . bC52e1) (string->utf32 . bC52e0) (string->utf16 . bC52df) (sint-list->bytevector . bC52de) (native-endianness . bC52dd) (bytevector? . bC52dc) (bytevector=? . bC52db) (bytevector-uint-set! . bC52da) (bytevector-uint-ref . bC52d9) (bytevector-u8-set! . bC52d8) (bytevector-u8-ref . bC52d7) (bytevector-u64-set! . bC52d6) (bytevector-u64-ref . bC52d5) (bytevector-u64-native-set! . bC52d4) (bytevector-u64-native-ref . bC52d3) (bytevector-u32-set! . bC52d2) (bytevector-u32-ref . bC52d1) (bytevector-u32-native-set! . bC52d0) (bytevector-u32-native-ref . bC52cf) (bytevector-u16-set! . bC52ce) (bytevector-u16-ref . bC52cd) (bytevector-u16-native-set! . bC52cc) (bytevector-u16-native-ref . bC52cb) (bytevector-sint-set! . bC52ca) (bytevector-sint-ref . bC52c9) (bytevector-s8-set! . bC52c8) (bytevector-s8-ref . bC52c7) (bytevector-s64-set! . bC52c6) (bytevector-s64-ref . bC52c5) (bytevector-s64-native-set! . bC52c4) (bytevector-s64-native-ref . bC52c3) (bytevector-s32-set! . bC52c2) (bytevector-s32-ref . bC52c1) (bytevector-s32-native-set! . bC52c0) (bytevector-s32-native-ref . bC52bf) (bytevector-s16-set! . bC52be) (bytevector-s16-ref . bC52bd) (bytevector-s16-native-set! . bC52bc) (bytevector-s16-native-ref . bC52bb) (bytevector-length . bC52ba) (bytevector-ieee-single-ref . bC52b9) (bytevector-ieee-single-set! . bC52b8) (bytevector-ieee-single-native-set! . bC52b7) (bytevector-ieee-single-native-ref . bC52b6) (bytevector-ieee-double-set! . bC52b5) (bytevector-ieee-double-ref . bC52b4) (bytevector-ieee-double-native-set! . bC52b3) (bytevector-ieee-double-native-ref . bC52b2) (bytevector-fill! . bC52b1) (bytevector-copy! . bC52b0) (bytevector-copy . bC52af) (bytevector->uint-list . bC52ae) (bytevector->u8-list . bC52ad) (bytevector->sint-list . bC52ac) (no-nans-violation? . bC4ec4) (no-infinities-violation? . bC4eaf) (make-no-nans-violation . bC4ec2) (make-no-infinities-violation . bC4ead) (real->flonum . bC52ab) (flzero? . bC52aa) (fltruncate . bC52a9) (fltan . bC52a8) (flsqrt . bC52a7) (flsin . bC52a6) (flround . bC52a5) (flpositive? . bC52a4) (flonum? . bC52a3) (flodd? . bC52a2) (flnumerator . bC52a1) (flnegative? . bC52a0) (flnan? . bC529f) (flmod0 . bC529e) (flmod . bC529d) (flmin . bC529c) (flmax . bC529b) (fllog . bC529a) (flinteger? . bC5299) (flinfinite? . bC5298) (flfloor . bC5297) (flfinite? . bC5296) (flexpt . bC5295) (flexp . bC5294) (fleven? . bC5293) (fldiv0-and-mod0 . bC5292) (fldiv0 . bC5291) (fldiv-and-mod . bC5290) (fldiv . bC528f) (fldenominator . bC528e) (flcos . bC528d) (flceiling . bC528c) (flatan . bC528b) (flasin . bC528a) (flacos . bC5289) (flabs . bC5288) (fl>? . bC5287) (fl>=? . bC5286) (fl=? . bC5285) (fl<? . bC5284) (fl<=? . bC5283) (fl/ . bC5282) (fl- . bC5281) (fl+ . bC5280) (fl* . bC527f) (fixnum->flonum . bC527e) (fxzero? . bC527d) (fxxor . bC527c) (fxrotate-bit-field . bC527b) (fxreverse-bit-field . bC527a) (fxpositive? . bC5279) (fxodd? . bC5278) (fxnot . bC5277) (fxnegative? . bC5276) (fxmod0 . bC5275) (fxmod . bC5274) (fxmin . bC5273) (fxmax . bC5272) (fxlength . bC5271) (fxior . bC5270) (fxif . bC526f) (fxfirst-bit-set . bC526e) (fxeven? . bC526d) (fxdiv0-and-mod0 . bC526c) (fxdiv0 . bC526b) (fxdiv-and-mod . bC526a) (fxdiv . bC5269) (fxcopy-bit-field . bC5268) (fxcopy-bit . bC5267) (fxbit-set? . bC5266) (fxbit-field . bC5265) (fxbit-count . bC5264) (fxarithmetic-shift-right . bC5263) (fxarithmetic-shift-left . bC5262) (fxarithmetic-shift . bC5261) (fxand . bC5260) (fx>? . bC525f) (fx>=? . bC525e) (fx=? . bC525d) (fx<? . bC525c) (fx<=? . bC525b) (fx-/carry . bC525a) (fx- . bC5259) (fx+/carry . bC5258) (fx+ . bC5257) (fx*/carry . bC5256) (fx* . bC5255) (greatest-fixnum . bC5254) (least-fixnum . bC5253) (fixnum-width . bC5252) (fixnum? . bC5251) (bitwise-rotate-bit-field . bC5250) (bitwise-reverse-bit-field . bC524f) (bitwise-length . bC524e) (bitwise-if . bC524d) (bitwise-first-bit-set . bC524c) (bitwise-copy-bit-field . bC524b) (bitwise-copy-bit . bC524a) (bitwise-bit-set? . bC5249) (bitwise-bit-field . bC5248) (bitwise-bit-count . bC5247) (bitwise-xor . bC5246) (bitwise-ior . bC5245) (bitwise-and . bC5244) (bitwise-not . bC5243) (bitwise-arithmetic-shift-right . bC5242) (bitwise-arithmetic-shift-left . bC5241) (bitwise-arithmetic-shift . bC5240) (zero? . bC523f) (vector? . bC523e) (vector-set! . bC523d) (vector-ref . bC523c) (vector-map . bC523b) (vector-length . bC523a) (vector-for-each . bC5239) (vector-fill! . bC5238) (vector->list . bC5237) (vector . bC5236) (values . bC5235) (truncate . bC5234) (tan . bC5233) (symbol? . bC5232) (symbol=? . bC5231) (symbol->string . bC5230) (substring . bC522f) (string? . bC522e) (string>? . bC522d) (string>=? . bC522c) (string=? . bC522b) (string<? . bC522a) (string<=? . bC5229) (string-ref . bC5228) (string-length . bC5227) (string-for-each . bC5226) (string-copy . bC5225) (string-append . bC5224) (string->symbol . bC5223) (string->number . bC5222) (string->list . bC5221) (string . bC5220) (sqrt . bC521f) (sin . bC521e) (round . bC521d) (reverse . bC521c) (real? . bC521b) (real-valued? . bC521a) (real-part . bC5219) (rationalize . bC5218) (rational? . bC5217) (rational-valued? . bC5216) (procedure? . bC5215) (positive? . bC5214) (pair? . bC5213) (odd? . bC5212) (numerator . bC5211) (number? . bC5210) (number->string . bC520f) (null? . bC520e) (not . bC520d) (negative? . bC520c) (nan? . bC520b) (min . bC520a) (max . bC5209) (map . bC5208) (make-vector . bC5207) (make-string . bC5206) (make-rectangular . bC5205) (make-polar . bC5204) (magnitude . bC5203) (log . bC5202) (list? . bC5201) (list-tail . bC5200) (list-ref . bC51ff) (list->vector . bC51fe) (list->string . bC51fd) (list . bC51fc) (length . bC51fb) (lcm . bC51fa) (integer? . bC51f9) (integer-valued? . bC51f8) (integer->char . bC51f7) (infinite? . bC51f6) (inexact? . bC51f5) (inexact . bC51f4) (imag-part . bC51f3) (gcd . bC51f2) (for-each . bC51f1) (floor . bC51f0) (finite? . bC51ef) (expt . bC51ee) (exp . bC51ed) (exact? . bC51ec) (exact-integer-sqrt . bC51eb) (exact . bC51ea) (even? . bC51e9) (error . bC51e8) (eqv? . bC51e7) (equal? . bC51e6) (eq? . bC51e5) (dynamic-wind . bC51e4) (div0-and-mod0 . bC51e3) (mod0 . bC51e2) (div0 . bC51e1) (div-and-mod . bC51e0) (mod . bC51df) (div . bC51de) (denominator . bC51dd) (cos . bC51dc) (cons . bC51db) (complex? . bC51da) (char? . bC51d9) (char>? . bC51d8) (char>=? . bC51d7) (char=? . bC51d6) (char<? . bC51d5) (char<=? . bC51d4) (char->integer . bC51d3) (ceiling . bC51d2) (call-with-values . bC51d1) (call/cc . bC51d0) (call-with-current-continuation . bC51cf) (cddddr . bC51ce) (cdddar . bC51cd) (cddadr . bC51cc) (cddaar . bC51cb) (cdaddr . bC51ca) (cdadar . bC51c9) (cdaadr . bC51c8) (cdaaar . bC51c7) (cadddr . bC51c6) (caddar . bC51c5) (cadadr . bC51c4) (cadaar . bC51c3) (caaddr . bC51c2) (caadar . bC51c1) (caaadr . bC51c0) (caaaar . bC51bf) (cdddr . bC51be) (cddar . bC51bd) (cdadr . bC51bc) (cdaar . bC51bb) (caddr . bC51ba) (cadar . bC51b9) (caadr . bC51b8) (caaar . bC51b7) (cddr . bC51b6) (cdar . bC51b5) (cadr . bC51b4) (caar . bC51b3) (cdr . bC51b2) (car . bC51b1) (boolean? . bC51b0) (boolean=? . bC51af) (atan . bC51ae) (assertion-violation . bC51ad) (asin . bC51ac) (apply . bC51ab) (append . bC51aa) (angle . bC51a9) (acos . bC51a8) (abs . bC51a7) (/ . bC51a6) (* . bC51a5) (- . bC51a4) (+ . bC51a3) (>= . bC51a2) (> . bC51a1) (= . bC51a0) (<= . bC519f) (< . bC519e) (library . bC519d) (&no-nans . bC519c) (&no-infinities . bC519b) (&i/o-encoding . bC519a) (&i/o-decoding . bC5199) (&i/o-port . bC5198) (&i/o-file-does-not-exist . bC5197) (&i/o-file-already-exists . bC5196) (&i/o-file-is-read-only . bC5195) (&i/o-file-protection . bC5194) (&i/o-filename . bC5193) (&i/o-invalid-position . bC5192) (&i/o-write . bC5191) (&i/o-read . bC5190) (&i/o . bC518f) (&undefined . bC518e) (&syntax . bC518d) (&lexical . bC518c) (&implementation-restriction . bC518b) (&non-continuable . bC518a) (&who . bC5189) (&irritants . bC5188) (&assertion . bC5187) (&violation . bC5186) (&error . bC5185) (&serious . bC5184) (&warning . bC5183) (&message . bC5182) (&condition . bC5181) (define-condition-type . bC5180) (define-enumeration . bC517f) (define-record-type . bC517e) (parent-rtd . bC517d) (nongenerative . bC517c) (opaque . bC517b) (sealed . bC517a) (protocol . bC5179) (parent . bC5178) (immutable . bC5177) (mutable . bC5176) (fields . bC5175) (error-handling-mode . bC5174) (file-options . bC5173) (buffer-mode . bC5172) (eol-style . bC5171) (guard . bC5170) (unsyntax-splicing . bC516d) (unsyntax . bC516c) (unquote-splicing . bC516b) (unquote . bC516a) (_ . bC5169) (else . bC5168) (=> . bC5167) (... . bC5166) (assert . bC5165) (endianness . bC5164) (time . bC5162) (do . bC5161) (cond . bC5160) (let* . bC515f) (let*-values . bC515e) (let-values . bC515d) (identifier-syntax . bC515c) (with-syntax . bC515b) (quasisyntax . bC515a) (quasiquote . bC5159) (syntax-rules . bC5158) (include . bC5157) (record-constructor-descriptor . bC5155) (record-type-descriptor . bC5154) (case . bC5153) (unless . bC5151) (when . bC5150) (or . bC514f) (and . bC514e) (if . bC514d) (let . bC514c) (letrec* . bC514b) (letrec . bC514a) (case-lambda . bC5148) (lambda . bC5147) (syntax . bC5146) (syntax-case . bC5145) (quote . bC5144) (letrec-syntax . bC5142) (let-syntax . bC5141) (set! . bC5140) (import . bC513f) (begin . bC513e) (define-syntax . bC513c) (define . bC513b)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC5463 '(psyntax null-environment-5) '() '() '() '() '((make-promise . bC531b) (unquote-splicing . bC516b) (unquote . bC516a) (_ . bC5169) (else . bC5168) (=> . bC5167) (... . bC5166) (delay . bC5163) (do . bC5161) (cond . bC5160) (let* . bC515f) (quasiquote . bC5159) (syntax-rules . bC5158) (case . bC5153) (or . bC514f) (and . bC514e) (if . bC514d) (let . bC514c) (letrec . bC514a) (lambda . bC5147) (quote . bC5144) (letrec-syntax . bC5142) (let-syntax . bC5141) (set! . bC5140) (begin . bC513e) (define-syntax . bC513c) (define . bC513b)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC5464 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . bC53b0) (string-ci>=? . bC53af) (string-ci=? . bC53ae) (string-ci<? . bC53ad) (string-ci<=? . bC53ac) (char-whitespace? . bC53ab) (char-upper-case? . bC53aa) (char-numeric? . bC53a8) (char-lower-case? . bC53a7) (char-upcase . bC53a5) (char-downcase . bC53a2) (char-ci>? . bC53a1) (char-ci>=? . bC53a0) (char-ci=? . bC539f) (char-ci<? . bC539e) (char-ci<=? . bC539d) (char-alphabetic? . bC539c) (call-with-output-file . bC5370) (call-with-input-file . bC536f) (write-char . bC536e) (write . bC536d) (with-output-to-file . bC536c) (with-input-from-file . bC536b) (read-char . bC536a) (read . bC5369) (peek-char . bC5368) (open-output-file . bC5367) (open-input-file . bC5366) (newline . bC5365) (display . bC5364) (close-output-port . bC5363) (close-input-port . bC5362) (eof-object . bC5360) (current-output-port . bC535e) (current-input-port . bC535d) (output-port? . bC535c) (input-port? . bC535b) (scheme-report-environment . bC3175) (quotient . bC5321) (null-environment . bC3173) (remainder . bC5320) (modulo . bC531f) (inexact->exact . bC531e) (force . bC531d) (exact->inexact . bC531c) (make-promise . bC531b) (string-fill! . bC5319) (string-set! . bC5318) (set-cdr! . bC5317) (set-car! . bC5316) (memv . bC5310) (memq . bC530f) (member . bC530d) (assv . bC5305) (assq . bC5304) (assoc . bC5302) (eval . bC3179) (zero? . bC523f) (vector? . bC523e) (vector-set! . bC523d) (vector-ref . bC523c) (vector-length . bC523a) (vector-fill! . bC5238) (vector->list . bC5237) (vector . bC5236) (values . bC5235) (truncate . bC5234) (tan . bC5233) (symbol? . bC5232) (symbol->string . bC5230) (substring . bC522f) (string? . bC522e) (string>? . bC522d) (string>=? . bC522c) (string=? . bC522b) (string<? . bC522a) (string<=? . bC5229) (string-ref . bC5228) (string-length . bC5227) (string-copy . bC5225) (string-append . bC5224) (string->symbol . bC5223) (string->number . bC5222) (string->list . bC5221) (string . bC5220) (sqrt . bC521f) (sin . bC521e) (round . bC521d) (reverse . bC521c) (real? . bC521b) (real-part . bC5219) (rationalize . bC5218) (rational? . bC5217) (procedure? . bC5215) (positive? . bC5214) (pair? . bC5213) (odd? . bC5212) (numerator . bC5211) (number? . bC5210) (number->string . bC520f) (not . bC520d) (negative? . bC520c) (min . bC520a) (max . bC5209) (map . bC5208) (make-vector . bC5207) (make-string . bC5206) (make-rectangular . bC5205) (make-polar . bC5204) (magnitude . bC5203) (log . bC5202) (list? . bC5201) (list-tail . bC5200) (list-ref . bC51ff) (list->vector . bC51fe) (list->string . bC51fd) (list . bC51fc) (length . bC51fb) (lcm . bC51fa) (integer? . bC51f9) (integer->char . bC51f7) (inexact? . bC51f5) (imag-part . bC51f3) (gcd . bC51f2) (for-each . bC51f1) (floor . bC51f0) (expt . bC51ee) (exp . bC51ed) (exact? . bC51ec) (even? . bC51e9) (eqv? . bC51e7) (equal? . bC51e6) (eq? . bC51e5) (dynamic-wind . bC51e4) (denominator . bC51dd) (cos . bC51dc) (cons . bC51db) (complex? . bC51da) (char? . bC51d9) (char>? . bC51d8) (char>=? . bC51d7) (char=? . bC51d6) (char<? . bC51d5) (char<=? . bC51d4) (char->integer . bC51d3) (ceiling . bC51d2) (call-with-values . bC51d1) (call-with-current-continuation . bC51cf) (cddddr . bC51ce) (cdddar . bC51cd) (cddadr . bC51cc) (cddaar . bC51cb) (cdaddr . bC51ca) (cdadar . bC51c9) (cdaadr . bC51c8) (cdaaar . bC51c7) (cadddr . bC51c6) (caddar . bC51c5) (cadadr . bC51c4) (cadaar . bC51c3) (caaddr . bC51c2) (caadar . bC51c1) (caaadr . bC51c0) (caaaar . bC51bf) (cdddr . bC51be) (cddar . bC51bd) (cdadr . bC51bc) (cdaar . bC51bb) (caddr . bC51ba) (cadar . bC51b9) (caadr . bC51b8) (caaar . bC51b7) (cddr . bC51b6) (cdar . bC51b5) (cadr . bC51b4) (caar . bC51b3) (cdr . bC51b2) (car . bC51b1) (boolean? . bC51b0) (atan . bC51ae) (asin . bC51ac) (apply . bC51ab) (append . bC51aa) (angle . bC51a9) (acos . bC51a8) (abs . bC51a7) (/ . bC51a6) (* . bC51a5) (- . bC51a4) (+ . bC51a3) (>= . bC51a2) (> . bC51a1) (= . bC51a0) (<= . bC519f) (< . bC519e) (unquote-splicing . bC516b) (unquote . bC516a) (else . bC5168) (=> . bC5167) (... . bC5166) (delay . bC5163) (do . bC5161) (cond . bC5160) (let* . bC515f) (quasiquote . bC5159) (syntax-rules . bC5158) (case . bC5153) (or . bC514f) (and . bC514e) (if . bC514d) (let . bC514c) (letrec . bC514a) (lambda . bC5147) (quote . bC5144) (letrec-syntax . bC5142) (let-syntax . bC5141) (set! . bC5140) (begin . bC513e) (define-syntax . bC513c) (define . bC513b)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC5465 '(psyntax modules) '() '() '() '() '((module . bC513d)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC5466 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC5467 '(rnrs) '(6) '() '() '() '((regexp? . bC545a) (string-upcase . bC53b8) (string-titlecase . bC53b7) (string-normalize-nfkd . bC53b6) (string-normalize-nfkc . bC53b5) (string-normalize-nfd . bC53b4) (string-normalize-nfc . bC53b3) (string-foldcase . bC53b2) (string-downcase . bC53b1) (string-ci>? . bC53b0) (string-ci>=? . bC53af) (string-ci=? . bC53ae) (string-ci<? . bC53ad) (string-ci<=? . bC53ac) (char-whitespace? . bC53ab) (char-upper-case? . bC53aa) (char-title-case? . bC53a9) (char-numeric? . bC53a8) (char-lower-case? . bC53a7) (char-general-category . bC53a6) (char-upcase . bC53a5) (char-titlecase . bC53a4) (char-foldcase . bC53a3) (char-downcase . bC53a2) (char-ci>? . bC53a1) (char-ci>=? . bC53a0) (char-ci=? . bC539f) (char-ci<? . bC539e) (char-ci<=? . bC539d) (char-alphabetic? . bC539c) (make-variable-transformer . bC2ee4) (identifier? . bC319b) (generate-temporaries . bC3187) (free-identifier=? . bC3189) (syntax->datum . bC319f) (datum->syntax . bC319d) (bound-identifier=? . bC318b) (record-type-descriptor? . bC539b) (record-predicate . bC539a) (record-mutator . bC5399) (record-constructor . bC5398) (record-accessor . bC5397) (make-record-type-descriptor . bC5396) (make-record-constructor-descriptor . bC5395) (record? . bC5394) (record-type-uid . bC5393) (record-type-sealed? . bC5392) (record-type-parent . bC5391) (record-type-opaque? . bC5390) (record-type-name . bC538f) (record-type-generative? . bC538e) (record-type-field-names . bC538d) (record-rtd . bC538c) (record-field-mutable? . bC538b) (delete-file . bC538a) (file-exists? . bC5389) (vector-sort! . bC5388) (vector-sort . bC5387) (list-sort . bC5386) (symbol-hash . bC5385) (string-ci-hash . bC5384) (string-hash . bC5383) (equal-hash . bC5382) (hashtable-equivalence-function . bC5381) (make-hashtable . bC5380) (hashtable-hash-function . bC537f) (make-eqv-hashtable . bC537e) (make-eq-hashtable . bC537d) (hashtable? . bC537c) (hashtable-update! . bC537b) (hashtable-size . bC537a) (hashtable-set! . bC5379) (hashtable-ref . bC5378) (hashtable-mutable? . bC5377) (hashtable-keys . bC5376) (hashtable-entries . bC5375) (hashtable-delete! . bC5374) (hashtable-copy . bC5373) (hashtable-contains? . bC5372) (hashtable-clear! . bC5371) (call-with-output-file . bC5370) (call-with-input-file . bC536f) (write-char . bC536e) (write . bC536d) (with-output-to-file . bC536c) (with-input-from-file . bC536b) (read-char . bC536a) (read . bC5369) (peek-char . bC5368) (open-output-file . bC5367) (open-input-file . bC5366) (newline . bC5365) (display . bC5364) (close-output-port . bC5363) (close-input-port . bC5362) (eof-object? . bC5361) (eof-object . bC5360) (current-error-port . bC535f) (current-output-port . bC535e) (current-input-port . bC535d) (output-port? . bC535c) (input-port? . bC535b) (utf-8-codec . bC535a) (utf-16-codec . bC5359) (transcoder-error-handling-mode . bC5358) (transcoder-eol-style . bC5357) (transcoder-codec . bC5356) (transcoded-port . bC5355) (textual-port? . bC5354) (string->bytevector . bC5353) (standard-output-port . bC5352) (standard-input-port . bC5351) (standard-error-port . bC5350) (set-port-position! . bC534f) (put-u8 . bC534e) (put-string . bC534d) (put-datum . bC534c) (put-char . bC534b) (put-bytevector . bC534a) (port? . bC5349) (port-transcoder . bC5348) (port-position . bC5347) (port-has-set-port-position!? . bC5346) (port-has-port-position? . bC5345) (port-eof? . bC5344) (output-port-buffer-mode . bC5343) (open-string-output-port . bC5342) (open-string-input-port . bC5341) (open-file-output-port . bC5340) (open-file-input/output-port . bC533f) (open-file-input-port . bC533e) (open-bytevector-output-port . bC533d) (open-bytevector-input-port . bC533c) (native-transcoder . bC533b) (native-eol-style . bC533a) (make-transcoder . bC5339) (latin-1-codec . bC5338) (make-i/o-write-error . bC4dc3) (make-i/o-read-error . bC4dae) (make-i/o-port-error . bC4e64) (make-i/o-invalid-position-error . bC4dda) (make-i/o-filename-error . bC4df5) (make-i/o-file-protection-error . bC4e0e) (make-i/o-file-is-read-only-error . bC4e23) (make-i/o-file-does-not-exist-error . bC4e4d) (make-i/o-file-already-exists-error . bC4e38) (make-i/o-error . bC4d99) (make-i/o-encoding-error . bC4e94) (make-i/o-decoding-error . bC4e7d) (make-custom-textual-output-port . bC5337) (make-custom-textual-input/output-port . bC5336) (make-custom-textual-input-port . bC5335) (make-custom-binary-output-port . bC5334) (make-custom-binary-input/output-port . bC5333) (make-custom-binary-input-port . bC5332) (make-bytevector . bC5331) (lookahead-u8 . bC5330) (lookahead-char . bC532f) (i/o-write-error? . bC4dc5) (i/o-read-error? . bC4db0) (i/o-port-error? . bC4e68) (i/o-invalid-position-error? . bC4dde) (i/o-filename-error? . bC4df9) (i/o-file-protection-error? . bC4e10) (i/o-file-is-read-only-error? . bC4e25) (i/o-file-does-not-exist-error? . bC4e4f) (i/o-file-already-exists-error? . bC4e3a) (i/o-error? . bC4d9b) (i/o-error-position . bC4de0) (i/o-error-port . bC4e6a) (i/o-error-filename . bC4dfb) (i/o-encoding-error? . bC4e98) (i/o-encoding-error-char . bC4e9a) (i/o-decoding-error? . bC4e7f) (get-u8 . bC532e) (get-string-n! . bC532d) (get-string-n . bC532c) (get-string-all . bC532b) (get-line . bC532a) (get-datum . bC5329) (get-char . bC5328) (get-bytevector-some . bC5327) (get-bytevector-n! . bC5326) (get-bytevector-n . bC5325) (get-bytevector-all . bC5324) (flush-output-port . bC5323) (close-port . bC5322) (exit . bC531a) (command-line . bC4fd3) (remove . bC5315) (remv . bC5314) (remp . bC5313) (remq . bC5312) (partition . bC5311) (memv . bC5310) (memq . bC530f) (memp . bC530e) (member . bC530d) (exists . bC530c) (for-all . bC530b) (fold-right . bC530a) (fold-left . bC5309) (find . bC5308) (filter . bC5307) (cons* . bC5306) (assv . bC5305) (assq . bC5304) (assp . bC5303) (assoc . bC5302) (call-with-string-output-port . bC5301) (call-with-port . bC5300) (call-with-bytevector-output-port . bC52ff) (bytevector->string . bC52fe) (buffer-mode? . bC52fd) (binary-port? . bC52fc) (with-exception-handler . bC52fb) (raise-continuable . bC52fa) (raise . bC52f9) (make-enumeration . bC52f8) (enum-set=? . bC52f7) (enum-set-universe . bC52f6) (enum-set-union . bC52f5) (enum-set-subset? . bC52f4) (enum-set-projection . bC52f3) (enum-set-member? . bC52f2) (enum-set-intersection . bC52f1) (enum-set-indexer . bC52f0) (enum-set-difference . bC52ef) (enum-set-constructor . bC52ee) (enum-set-complement . bC52ed) (enum-set->list . bC52ec) (who-condition? . bC4d0f) (warning? . bC4c87) (violation? . bC4cc6) (undefined-violation? . bC4d86) (syntax-violation? . bC4d6d) (syntax-violation-subform . bC4d71) (syntax-violation-form . bC4d6f) (syntax-violation . bC3199) (simple-conditions . bC52eb) (serious-condition? . bC4c9c) (non-continuable-violation? . bC4d26) (message-condition? . bC4c70) (make-who-condition . bC4d0b) (make-warning . bC4c85) (make-violation . bC4cc4) (make-undefined-violation . bC4d84) (make-syntax-violation . bC4d67) (make-serious-condition . bC4c9a) (make-non-continuable-violation . bC4d24) (make-message-condition . bC4c6c) (make-lexical-violation . bC4d4e) (make-irritants-condition . bC4cf0) (make-implementation-restriction-violation . bC4d39) (make-error . bC4caf) (make-assertion-violation . bC4cd9) (lexical-violation? . bC4d50) (irritants-condition? . bC4cf4) (implementation-restriction-violation? . bC4d3b) (error? . bC4cb1) (condition-who . bC4d11) (condition-predicate . bC52ea) (condition-message . bC4c72) (condition-irritants . bC4cf6) (condition-accessor . bC52e9) (condition . bC52e8) (assertion-violation? . bC4cdb) (condition? . bC52e7) (utf32->string . bC52e6) (utf16->string . bC52e5) (utf8->string . bC52e4) (uint-list->bytevector . bC52e3) (u8-list->bytevector . bC52e2) (string->utf8 . bC52e1) (string->utf32 . bC52e0) (string->utf16 . bC52df) (sint-list->bytevector . bC52de) (native-endianness . bC52dd) (bytevector? . bC52dc) (bytevector=? . bC52db) (bytevector-uint-set! . bC52da) (bytevector-uint-ref . bC52d9) (bytevector-u8-set! . bC52d8) (bytevector-u8-ref . bC52d7) (bytevector-u64-set! . bC52d6) (bytevector-u64-ref . bC52d5) (bytevector-u64-native-set! . bC52d4) (bytevector-u64-native-ref . bC52d3) (bytevector-u32-set! . bC52d2) (bytevector-u32-ref . bC52d1) (bytevector-u32-native-set! . bC52d0) (bytevector-u32-native-ref . bC52cf) (bytevector-u16-set! . bC52ce) (bytevector-u16-ref . bC52cd) (bytevector-u16-native-set! . bC52cc) (bytevector-u16-native-ref . bC52cb) (bytevector-sint-set! . bC52ca) (bytevector-sint-ref . bC52c9) (bytevector-s8-set! . bC52c8) (bytevector-s8-ref . bC52c7) (bytevector-s64-set! . bC52c6) (bytevector-s64-ref . bC52c5) (bytevector-s64-native-set! . bC52c4) (bytevector-s64-native-ref . bC52c3) (bytevector-s32-set! . bC52c2) (bytevector-s32-ref . bC52c1) (bytevector-s32-native-set! . bC52c0) (bytevector-s32-native-ref . bC52bf) (bytevector-s16-set! . bC52be) (bytevector-s16-ref . bC52bd) (bytevector-s16-native-set! . bC52bc) (bytevector-s16-native-ref . bC52bb) (bytevector-length . bC52ba) (bytevector-ieee-single-ref . bC52b9) (bytevector-ieee-single-set! . bC52b8) (bytevector-ieee-single-native-set! . bC52b7) (bytevector-ieee-single-native-ref . bC52b6) (bytevector-ieee-double-set! . bC52b5) (bytevector-ieee-double-ref . bC52b4) (bytevector-ieee-double-native-set! . bC52b3) (bytevector-ieee-double-native-ref . bC52b2) (bytevector-fill! . bC52b1) (bytevector-copy! . bC52b0) (bytevector-copy . bC52af) (bytevector->uint-list . bC52ae) (bytevector->u8-list . bC52ad) (bytevector->sint-list . bC52ac) (no-nans-violation? . bC4ec4) (no-infinities-violation? . bC4eaf) (make-no-nans-violation . bC4ec2) (make-no-infinities-violation . bC4ead) (real->flonum . bC52ab) (flzero? . bC52aa) (fltruncate . bC52a9) (fltan . bC52a8) (flsqrt . bC52a7) (flsin . bC52a6) (flround . bC52a5) (flpositive? . bC52a4) (flonum? . bC52a3) (flodd? . bC52a2) (flnumerator . bC52a1) (flnegative? . bC52a0) (flnan? . bC529f) (flmod0 . bC529e) (flmod . bC529d) (flmin . bC529c) (flmax . bC529b) (fllog . bC529a) (flinteger? . bC5299) (flinfinite? . bC5298) (flfloor . bC5297) (flfinite? . bC5296) (flexpt . bC5295) (flexp . bC5294) (fleven? . bC5293) (fldiv0-and-mod0 . bC5292) (fldiv0 . bC5291) (fldiv-and-mod . bC5290) (fldiv . bC528f) (fldenominator . bC528e) (flcos . bC528d) (flceiling . bC528c) (flatan . bC528b) (flasin . bC528a) (flacos . bC5289) (flabs . bC5288) (fl>? . bC5287) (fl>=? . bC5286) (fl=? . bC5285) (fl<? . bC5284) (fl<=? . bC5283) (fl/ . bC5282) (fl- . bC5281) (fl+ . bC5280) (fl* . bC527f) (fixnum->flonum . bC527e) (fxzero? . bC527d) (fxxor . bC527c) (fxrotate-bit-field . bC527b) (fxreverse-bit-field . bC527a) (fxpositive? . bC5279) (fxodd? . bC5278) (fxnot . bC5277) (fxnegative? . bC5276) (fxmod0 . bC5275) (fxmod . bC5274) (fxmin . bC5273) (fxmax . bC5272) (fxlength . bC5271) (fxior . bC5270) (fxif . bC526f) (fxfirst-bit-set . bC526e) (fxeven? . bC526d) (fxdiv0-and-mod0 . bC526c) (fxdiv0 . bC526b) (fxdiv-and-mod . bC526a) (fxdiv . bC5269) (fxcopy-bit-field . bC5268) (fxcopy-bit . bC5267) (fxbit-set? . bC5266) (fxbit-field . bC5265) (fxbit-count . bC5264) (fxarithmetic-shift-right . bC5263) (fxarithmetic-shift-left . bC5262) (fxarithmetic-shift . bC5261) (fxand . bC5260) (fx>? . bC525f) (fx>=? . bC525e) (fx=? . bC525d) (fx<? . bC525c) (fx<=? . bC525b) (fx-/carry . bC525a) (fx- . bC5259) (fx+/carry . bC5258) (fx+ . bC5257) (fx*/carry . bC5256) (fx* . bC5255) (greatest-fixnum . bC5254) (least-fixnum . bC5253) (fixnum-width . bC5252) (fixnum? . bC5251) (bitwise-rotate-bit-field . bC5250) (bitwise-reverse-bit-field . bC524f) (bitwise-length . bC524e) (bitwise-if . bC524d) (bitwise-first-bit-set . bC524c) (bitwise-copy-bit-field . bC524b) (bitwise-copy-bit . bC524a) (bitwise-bit-set? . bC5249) (bitwise-bit-field . bC5248) (bitwise-bit-count . bC5247) (bitwise-xor . bC5246) (bitwise-ior . bC5245) (bitwise-and . bC5244) (bitwise-not . bC5243) (bitwise-arithmetic-shift-right . bC5242) (bitwise-arithmetic-shift-left . bC5241) (bitwise-arithmetic-shift . bC5240) (zero? . bC523f) (vector? . bC523e) (vector-set! . bC523d) (vector-ref . bC523c) (vector-map . bC523b) (vector-length . bC523a) (vector-for-each . bC5239) (vector-fill! . bC5238) (vector->list . bC5237) (vector . bC5236) (values . bC5235) (truncate . bC5234) (tan . bC5233) (symbol? . bC5232) (symbol=? . bC5231) (symbol->string . bC5230) (substring . bC522f) (string? . bC522e) (string>? . bC522d) (string>=? . bC522c) (string=? . bC522b) (string<? . bC522a) (string<=? . bC5229) (string-ref . bC5228) (string-length . bC5227) (string-for-each . bC5226) (string-copy . bC5225) (string-append . bC5224) (string->symbol . bC5223) (string->number . bC5222) (string->list . bC5221) (string . bC5220) (sqrt . bC521f) (sin . bC521e) (round . bC521d) (reverse . bC521c) (real? . bC521b) (real-valued? . bC521a) (real-part . bC5219) (rationalize . bC5218) (rational? . bC5217) (rational-valued? . bC5216) (procedure? . bC5215) (positive? . bC5214) (pair? . bC5213) (odd? . bC5212) (numerator . bC5211) (number? . bC5210) (number->string . bC520f) (null? . bC520e) (not . bC520d) (negative? . bC520c) (nan? . bC520b) (min . bC520a) (max . bC5209) (map . bC5208) (make-vector . bC5207) (make-string . bC5206) (make-rectangular . bC5205) (make-polar . bC5204) (magnitude . bC5203) (log . bC5202) (list? . bC5201) (list-tail . bC5200) (list-ref . bC51ff) (list->vector . bC51fe) (list->string . bC51fd) (list . bC51fc) (length . bC51fb) (lcm . bC51fa) (integer? . bC51f9) (integer-valued? . bC51f8) (integer->char . bC51f7) (infinite? . bC51f6) (inexact? . bC51f5) (inexact . bC51f4) (imag-part . bC51f3) (gcd . bC51f2) (for-each . bC51f1) (floor . bC51f0) (finite? . bC51ef) (expt . bC51ee) (exp . bC51ed) (exact? . bC51ec) (exact-integer-sqrt . bC51eb) (exact . bC51ea) (even? . bC51e9) (error . bC51e8) (eqv? . bC51e7) (equal? . bC51e6) (eq? . bC51e5) (dynamic-wind . bC51e4) (div0-and-mod0 . bC51e3) (mod0 . bC51e2) (div0 . bC51e1) (div-and-mod . bC51e0) (mod . bC51df) (div . bC51de) (denominator . bC51dd) (cos . bC51dc) (cons . bC51db) (complex? . bC51da) (char? . bC51d9) (char>? . bC51d8) (char>=? . bC51d7) (char=? . bC51d6) (char<? . bC51d5) (char<=? . bC51d4) (char->integer . bC51d3) (ceiling . bC51d2) (call-with-values . bC51d1) (call/cc . bC51d0) (call-with-current-continuation . bC51cf) (cddddr . bC51ce) (cdddar . bC51cd) (cddadr . bC51cc) (cddaar . bC51cb) (cdaddr . bC51ca) (cdadar . bC51c9) (cdaadr . bC51c8) (cdaaar . bC51c7) (cadddr . bC51c6) (caddar . bC51c5) (cadadr . bC51c4) (cadaar . bC51c3) (caaddr . bC51c2) (caadar . bC51c1) (caaadr . bC51c0) (caaaar . bC51bf) (cdddr . bC51be) (cddar . bC51bd) (cdadr . bC51bc) (cdaar . bC51bb) (caddr . bC51ba) (cadar . bC51b9) (caadr . bC51b8) (caaar . bC51b7) (cddr . bC51b6) (cdar . bC51b5) (cadr . bC51b4) (caar . bC51b3) (cdr . bC51b2) (car . bC51b1) (boolean? . bC51b0) (boolean=? . bC51af) (atan . bC51ae) (assertion-violation . bC51ad) (asin . bC51ac) (apply . bC51ab) (append . bC51aa) (angle . bC51a9) (acos . bC51a8) (abs . bC51a7) (/ . bC51a6) (* . bC51a5) (- . bC51a4) (+ . bC51a3) (>= . bC51a2) (> . bC51a1) (= . bC51a0) (<= . bC519f) (< . bC519e) (&no-nans . bC519c) (&no-infinities . bC519b) (&i/o-encoding . bC519a) (&i/o-decoding . bC5199) (&i/o-port . bC5198) (&i/o-file-does-not-exist . bC5197) (&i/o-file-already-exists . bC5196) (&i/o-file-is-read-only . bC5195) (&i/o-file-protection . bC5194) (&i/o-filename . bC5193) (&i/o-invalid-position . bC5192) (&i/o-write . bC5191) (&i/o-read . bC5190) (&i/o . bC518f) (&undefined . bC518e) (&syntax . bC518d) (&lexical . bC518c) (&implementation-restriction . bC518b) (&non-continuable . bC518a) (&who . bC5189) (&irritants . bC5188) (&assertion . bC5187) (&violation . bC5186) (&error . bC5185) (&serious . bC5184) (&warning . bC5183) (&message . bC5182) (&condition . bC5181) (define-condition-type . bC5180) (define-enumeration . bC517f) (define-record-type . bC517e) (parent-rtd . bC517d) (nongenerative . bC517c) (opaque . bC517b) (sealed . bC517a) (protocol . bC5179) (parent . bC5178) (immutable . bC5177) (mutable . bC5176) (fields . bC5175) (error-handling-mode . bC5174) (file-options . bC5173) (buffer-mode . bC5172) (eol-style . bC5171) (guard . bC5170) (unsyntax-splicing . bC516d) (unsyntax . bC516c) (unquote-splicing . bC516b) (unquote . bC516a) (_ . bC5169) (else . bC5168) (=> . bC5167) (... . bC5166) (assert . bC5165) (endianness . bC5164) (do . bC5161) (cond . bC5160) (let* . bC515f) (let*-values . bC515e) (let-values . bC515d) (identifier-syntax . bC515c) (with-syntax . bC515b) (quasisyntax . bC515a) (quasiquote . bC5159) (syntax-rules . bC5158) (record-constructor-descriptor . bC5155) (record-type-descriptor . bC5154) (case . bC5153) (unless . bC5151) (when . bC5150) (or . bC514f) (and . bC514e) (if . bC514d) (let . bC514c) (letrec* . bC514b) (letrec . bC514a) (case-lambda . bC5148) (lambda . bC5147) (syntax . bC5146) (syntax-case . bC5145) (quote . bC5144) (letrec-syntax . bC5142) (let-syntax . bC5141) (set! . bC5140) (begin . bC513e) (define-syntax . bC513c) (define . bC513b)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC5468 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . bC3175) (quotient . bC5321) (null-environment . bC3173) (remainder . bC5320) (modulo . bC531f) (inexact->exact . bC531e) (force . bC531d) (exact->inexact . bC531c) (make-promise . bC531b) (delay . bC5163)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC5469 '(rnrs control) '(6) '() '() '() '((do . bC5161) (unless . bC5151) (when . bC5150) (case-lambda . bC5148)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC546a '(rnrs eval) '(6) '() '() '() '((eval . bC3179) (environment . bC3171)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC546b '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . bC5317) (set-car! . bC5316)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC546c '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . bC5319) (string-set! . bC5318)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC546d '(rnrs programs) '(6) '() '() '() '((exit . bC531a) (command-line . bC4fd3)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC546e '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . bC2ee4) (identifier? . bC319b) (generate-temporaries . bC3187) (free-identifier=? . bC3189) (syntax->datum . bC319f) (datum->syntax . bC319d) (bound-identifier=? . bC318b) (syntax-violation . bC3199) (unsyntax-splicing . bC516d) (unsyntax . bC516c) (_ . bC5169) (... . bC5166) (with-syntax . bC515b) (quasisyntax . bC515a) (syntax . bC5146) (syntax-case . bC5145)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC546f '(rnrs files) '(6) '() '() '() '((delete-file . bC538a) (file-exists? . bC5389) (make-i/o-write-error . bC4dc3) (make-i/o-read-error . bC4dae) (make-i/o-port-error . bC4e64) (make-i/o-invalid-position-error . bC4dda) (make-i/o-filename-error . bC4df5) (make-i/o-file-protection-error . bC4e0e) (make-i/o-file-is-read-only-error . bC4e23) (make-i/o-file-does-not-exist-error . bC4e4d) (make-i/o-file-already-exists-error . bC4e38) (make-i/o-error . bC4d99) (i/o-write-error? . bC4dc5) (i/o-read-error? . bC4db0) (i/o-port-error? . bC4e68) (i/o-invalid-position-error? . bC4dde) (i/o-filename-error? . bC4df9) (i/o-file-protection-error? . bC4e10) (i/o-file-is-read-only-error? . bC4e25) (i/o-file-does-not-exist-error? . bC4e4f) (i/o-file-already-exists-error? . bC4e3a) (i/o-error? . bC4d9b) (i/o-error-position . bC4de0) (i/o-error-port . bC4e6a) (i/o-error-filename . bC4dfb) (&i/o-port . bC5198) (&i/o-file-does-not-exist . bC5197) (&i/o-file-already-exists . bC5196) (&i/o-file-is-read-only . bC5195) (&i/o-file-protection . bC5194) (&i/o-filename . bC5193) (&i/o-invalid-position . bC5192) (&i/o-write . bC5191) (&i/o-read . bC5190) (&i/o . bC518f)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC5470 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . bC5388) (vector-sort . bC5387) (list-sort . bC5386)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC5471 '(rnrs base) '(6) '() '() '() '((zero? . bC523f) (vector? . bC523e) (vector-set! . bC523d) (vector-ref . bC523c) (vector-map . bC523b) (vector-length . bC523a) (vector-for-each . bC5239) (vector-fill! . bC5238) (vector->list . bC5237) (vector . bC5236) (values . bC5235) (truncate . bC5234) (tan . bC5233) (symbol? . bC5232) (symbol=? . bC5231) (symbol->string . bC5230) (substring . bC522f) (string? . bC522e) (string>? . bC522d) (string>=? . bC522c) (string=? . bC522b) (string<? . bC522a) (string<=? . bC5229) (string-ref . bC5228) (string-length . bC5227) (string-for-each . bC5226) (string-copy . bC5225) (string-append . bC5224) (string->symbol . bC5223) (string->number . bC5222) (string->list . bC5221) (string . bC5220) (sqrt . bC521f) (sin . bC521e) (round . bC521d) (reverse . bC521c) (real? . bC521b) (real-valued? . bC521a) (real-part . bC5219) (rationalize . bC5218) (rational? . bC5217) (rational-valued? . bC5216) (procedure? . bC5215) (positive? . bC5214) (pair? . bC5213) (odd? . bC5212) (numerator . bC5211) (number? . bC5210) (number->string . bC520f) (null? . bC520e) (not . bC520d) (negative? . bC520c) (nan? . bC520b) (min . bC520a) (max . bC5209) (map . bC5208) (make-vector . bC5207) (make-string . bC5206) (make-rectangular . bC5205) (make-polar . bC5204) (magnitude . bC5203) (log . bC5202) (list? . bC5201) (list-tail . bC5200) (list-ref . bC51ff) (list->vector . bC51fe) (list->string . bC51fd) (list . bC51fc) (length . bC51fb) (lcm . bC51fa) (integer? . bC51f9) (integer-valued? . bC51f8) (integer->char . bC51f7) (infinite? . bC51f6) (inexact? . bC51f5) (inexact . bC51f4) (imag-part . bC51f3) (gcd . bC51f2) (for-each . bC51f1) (floor . bC51f0) (finite? . bC51ef) (expt . bC51ee) (exp . bC51ed) (exact? . bC51ec) (exact-integer-sqrt . bC51eb) (exact . bC51ea) (even? . bC51e9) (error . bC51e8) (eqv? . bC51e7) (equal? . bC51e6) (eq? . bC51e5) (dynamic-wind . bC51e4) (div0-and-mod0 . bC51e3) (mod0 . bC51e2) (div0 . bC51e1) (div-and-mod . bC51e0) (mod . bC51df) (div . bC51de) (denominator . bC51dd) (cos . bC51dc) (cons . bC51db) (complex? . bC51da) (char? . bC51d9) (char>? . bC51d8) (char>=? . bC51d7) (char=? . bC51d6) (char<? . bC51d5) (char<=? . bC51d4) (char->integer . bC51d3) (ceiling . bC51d2) (call-with-values . bC51d1) (call/cc . bC51d0) (call-with-current-continuation . bC51cf) (cddddr . bC51ce) (cdddar . bC51cd) (cddadr . bC51cc) (cddaar . bC51cb) (cdaddr . bC51ca) (cdadar . bC51c9) (cdaadr . bC51c8) (cdaaar . bC51c7) (cadddr . bC51c6) (caddar . bC51c5) (cadadr . bC51c4) (cadaar . bC51c3) (caaddr . bC51c2) (caadar . bC51c1) (caaadr . bC51c0) (caaaar . bC51bf) (cdddr . bC51be) (cddar . bC51bd) (cdadr . bC51bc) (cdaar . bC51bb) (caddr . bC51ba) (cadar . bC51b9) (caadr . bC51b8) (caaar . bC51b7) (cddr . bC51b6) (cdar . bC51b5) (cadr . bC51b4) (caar . bC51b3) (cdr . bC51b2) (car . bC51b1) (boolean? . bC51b0) (boolean=? . bC51af) (atan . bC51ae) (assertion-violation . bC51ad) (asin . bC51ac) (apply . bC51ab) (append . bC51aa) (angle . bC51a9) (acos . bC51a8) (abs . bC51a7) (/ . bC51a6) (* . bC51a5) (- . bC51a4) (+ . bC51a3) (>= . bC51a2) (> . bC51a1) (= . bC51a0) (<= . bC519f) (< . bC519e) (unquote-splicing . bC516b) (unquote . bC516a) (_ . bC5169) (else . bC5168) (=> . bC5167) (... . bC5166) (assert . bC5165) (cond . bC5160) (let* . bC515f) (let*-values . bC515e) (let-values . bC515d) (identifier-syntax . bC515c) (quasiquote . bC5159) (syntax-rules . bC5158) (case . bC5153) (or . bC514f) (and . bC514e) (if . bC514d) (let . bC514c) (letrec* . bC514b) (letrec . bC514a) (lambda . bC5147) (quote . bC5144) (letrec-syntax . bC5142) (let-syntax . bC5141) (set! . bC5140) (begin . bC513e) (define-syntax . bC513c) (define . bC513b)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC5472 '(rnrs lists) '(6) '() '() '() '((remove . bC5315) (remv . bC5314) (remp . bC5313) (remq . bC5312) (partition . bC5311) (memv . bC5310) (memq . bC530f) (memp . bC530e) (member . bC530d) (exists . bC530c) (for-all . bC530b) (fold-right . bC530a) (fold-left . bC5309) (find . bC5308) (filter . bC5307) (cons* . bC5306) (assv . bC5305) (assq . bC5304) (assp . bC5303) (assoc . bC5302)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC5473 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . bC5370) (call-with-input-file . bC536f) (write-char . bC536e) (write . bC536d) (with-output-to-file . bC536c) (with-input-from-file . bC536b) (read-char . bC536a) (read . bC5369) (peek-char . bC5368) (open-output-file . bC5367) (open-input-file . bC5366) (newline . bC5365) (display . bC5364) (close-output-port . bC5363) (close-input-port . bC5362) (eof-object? . bC5361) (eof-object . bC5360) (current-error-port . bC535f) (current-output-port . bC535e) (current-input-port . bC535d) (output-port? . bC535c) (input-port? . bC535b) (make-i/o-write-error . bC4dc3) (make-i/o-read-error . bC4dae) (make-i/o-port-error . bC4e64) (make-i/o-invalid-position-error . bC4dda) (make-i/o-filename-error . bC4df5) (make-i/o-file-protection-error . bC4e0e) (make-i/o-file-is-read-only-error . bC4e23) (make-i/o-file-does-not-exist-error . bC4e4d) (make-i/o-file-already-exists-error . bC4e38) (make-i/o-error . bC4d99) (i/o-write-error? . bC4dc5) (i/o-read-error? . bC4db0) (i/o-port-error? . bC4e68) (i/o-invalid-position-error? . bC4dde) (i/o-filename-error? . bC4df9) (i/o-file-protection-error? . bC4e10) (i/o-file-is-read-only-error? . bC4e25) (i/o-file-does-not-exist-error? . bC4e4f) (i/o-file-already-exists-error? . bC4e3a) (i/o-error? . bC4d9b) (i/o-error-position . bC4de0) (i/o-error-port . bC4e6a) (i/o-error-filename . bC4dfb) (&i/o-port . bC5198) (&i/o-file-does-not-exist . bC5197) (&i/o-file-already-exists . bC5196) (&i/o-file-is-read-only . bC5195) (&i/o-file-protection . bC5194) (&i/o-filename . bC5193) (&i/o-invalid-position . bC5192) (&i/o-write . bC5191) (&i/o-read . bC5190) (&i/o . bC518f)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC5474 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . bC5331) (utf32->string . bC52e6) (utf16->string . bC52e5) (utf8->string . bC52e4) (uint-list->bytevector . bC52e3) (u8-list->bytevector . bC52e2) (string->utf8 . bC52e1) (string->utf32 . bC52e0) (string->utf16 . bC52df) (sint-list->bytevector . bC52de) (native-endianness . bC52dd) (bytevector? . bC52dc) (bytevector=? . bC52db) (bytevector-uint-set! . bC52da) (bytevector-uint-ref . bC52d9) (bytevector-u8-set! . bC52d8) (bytevector-u8-ref . bC52d7) (bytevector-u64-set! . bC52d6) (bytevector-u64-ref . bC52d5) (bytevector-u64-native-set! . bC52d4) (bytevector-u64-native-ref . bC52d3) (bytevector-u32-set! . bC52d2) (bytevector-u32-ref . bC52d1) (bytevector-u32-native-set! . bC52d0) (bytevector-u32-native-ref . bC52cf) (bytevector-u16-set! . bC52ce) (bytevector-u16-ref . bC52cd) (bytevector-u16-native-set! . bC52cc) (bytevector-u16-native-ref . bC52cb) (bytevector-sint-set! . bC52ca) (bytevector-sint-ref . bC52c9) (bytevector-s8-set! . bC52c8) (bytevector-s8-ref . bC52c7) (bytevector-s64-set! . bC52c6) (bytevector-s64-ref . bC52c5) (bytevector-s64-native-set! . bC52c4) (bytevector-s64-native-ref . bC52c3) (bytevector-s32-set! . bC52c2) (bytevector-s32-ref . bC52c1) (bytevector-s32-native-set! . bC52c0) (bytevector-s32-native-ref . bC52bf) (bytevector-s16-set! . bC52be) (bytevector-s16-ref . bC52bd) (bytevector-s16-native-set! . bC52bc) (bytevector-s16-native-ref . bC52bb) (bytevector-length . bC52ba) (bytevector-ieee-single-ref . bC52b9) (bytevector-ieee-single-set! . bC52b8) (bytevector-ieee-single-native-set! . bC52b7) (bytevector-ieee-single-native-ref . bC52b6) (bytevector-ieee-double-set! . bC52b5) (bytevector-ieee-double-ref . bC52b4) (bytevector-ieee-double-native-set! . bC52b3) (bytevector-ieee-double-native-ref . bC52b2) (bytevector-fill! . bC52b1) (bytevector-copy! . bC52b0) (bytevector-copy . bC52af) (bytevector->uint-list . bC52ae) (bytevector->u8-list . bC52ad) (bytevector->sint-list . bC52ac) (endianness . bC5164)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC5475 '(rnrs unicode) '(6) '() '() '() '((string-upcase . bC53b8) (string-titlecase . bC53b7) (string-normalize-nfkd . bC53b6) (string-normalize-nfkc . bC53b5) (string-normalize-nfd . bC53b4) (string-normalize-nfc . bC53b3) (string-foldcase . bC53b2) (string-downcase . bC53b1) (string-ci>? . bC53b0) (string-ci>=? . bC53af) (string-ci=? . bC53ae) (string-ci<? . bC53ad) (string-ci<=? . bC53ac) (char-whitespace? . bC53ab) (char-upper-case? . bC53aa) (char-title-case? . bC53a9) (char-numeric? . bC53a8) (char-lower-case? . bC53a7) (char-general-category . bC53a6) (char-upcase . bC53a5) (char-titlecase . bC53a4) (char-foldcase . bC53a3) (char-downcase . bC53a2) (char-ci>? . bC53a1) (char-ci>=? . bC53a0) (char-ci=? . bC539f) (char-ci<? . bC539e) (char-ci<=? . bC539d) (char-alphabetic? . bC539c)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC5476 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . bC52fb) (raise-continuable . bC52fa) (raise . bC52f9) (guard . bC5170) (else . bC5168) (=> . bC5167)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC5477 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . bC5250) (bitwise-reverse-bit-field . bC524f) (bitwise-length . bC524e) (bitwise-if . bC524d) (bitwise-first-bit-set . bC524c) (bitwise-copy-bit-field . bC524b) (bitwise-copy-bit . bC524a) (bitwise-bit-set? . bC5249) (bitwise-bit-field . bC5248) (bitwise-bit-count . bC5247) (bitwise-xor . bC5246) (bitwise-ior . bC5245) (bitwise-and . bC5244) (bitwise-not . bC5243) (bitwise-arithmetic-shift-right . bC5242) (bitwise-arithmetic-shift-left . bC5241) (bitwise-arithmetic-shift . bC5240)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC5478 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . bC527d) (fxxor . bC527c) (fxrotate-bit-field . bC527b) (fxreverse-bit-field . bC527a) (fxpositive? . bC5279) (fxodd? . bC5278) (fxnot . bC5277) (fxnegative? . bC5276) (fxmod0 . bC5275) (fxmod . bC5274) (fxmin . bC5273) (fxmax . bC5272) (fxlength . bC5271) (fxior . bC5270) (fxif . bC526f) (fxfirst-bit-set . bC526e) (fxeven? . bC526d) (fxdiv0-and-mod0 . bC526c) (fxdiv0 . bC526b) (fxdiv-and-mod . bC526a) (fxdiv . bC5269) (fxcopy-bit-field . bC5268) (fxcopy-bit . bC5267) (fxbit-set? . bC5266) (fxbit-field . bC5265) (fxbit-count . bC5264) (fxarithmetic-shift-right . bC5263) (fxarithmetic-shift-left . bC5262) (fxarithmetic-shift . bC5261) (fxand . bC5260) (fx>? . bC525f) (fx>=? . bC525e) (fx=? . bC525d) (fx<? . bC525c) (fx<=? . bC525b) (fx-/carry . bC525a) (fx- . bC5259) (fx+/carry . bC5258) (fx+ . bC5257) (fx*/carry . bC5256) (fx* . bC5255) (greatest-fixnum . bC5254) (least-fixnum . bC5253) (fixnum-width . bC5252) (fixnum? . bC5251)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC5479 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . bC4ec4) (no-infinities-violation? . bC4eaf) (make-no-nans-violation . bC4ec2) (make-no-infinities-violation . bC4ead) (real->flonum . bC52ab) (flzero? . bC52aa) (fltruncate . bC52a9) (fltan . bC52a8) (flsqrt . bC52a7) (flsin . bC52a6) (flround . bC52a5) (flpositive? . bC52a4) (flonum? . bC52a3) (flodd? . bC52a2) (flnumerator . bC52a1) (flnegative? . bC52a0) (flnan? . bC529f) (flmod0 . bC529e) (flmod . bC529d) (flmin . bC529c) (flmax . bC529b) (fllog . bC529a) (flinteger? . bC5299) (flinfinite? . bC5298) (flfloor . bC5297) (flfinite? . bC5296) (flexpt . bC5295) (flexp . bC5294) (fleven? . bC5293) (fldiv0-and-mod0 . bC5292) (fldiv0 . bC5291) (fldiv-and-mod . bC5290) (fldiv . bC528f) (fldenominator . bC528e) (flcos . bC528d) (flceiling . bC528c) (flatan . bC528b) (flasin . bC528a) (flacos . bC5289) (flabs . bC5288) (fl>? . bC5287) (fl>=? . bC5286) (fl=? . bC5285) (fl<? . bC5284) (fl<=? . bC5283) (fl/ . bC5282) (fl- . bC5281) (fl+ . bC5280) (fl* . bC527f) (fixnum->flonum . bC527e) (&no-nans . bC519c) (&no-infinities . bC519b)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC547a '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . bC5385) (string-ci-hash . bC5384) (string-hash . bC5383) (equal-hash . bC5382) (hashtable-equivalence-function . bC5381) (make-hashtable . bC5380) (hashtable-hash-function . bC537f) (make-eqv-hashtable . bC537e) (make-eq-hashtable . bC537d) (hashtable? . bC537c) (hashtable-update! . bC537b) (hashtable-size . bC537a) (hashtable-set! . bC5379) (hashtable-ref . bC5378) (hashtable-mutable? . bC5377) (hashtable-keys . bC5376) (hashtable-entries . bC5375) (hashtable-delete! . bC5374) (hashtable-copy . bC5373) (hashtable-contains? . bC5372) (hashtable-clear! . bC5371)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC547b '(rnrs io ports) '(6) '() '() '() '((eof-object? . bC5361) (eof-object . bC5360) (current-error-port . bC535f) (current-output-port . bC535e) (current-input-port . bC535d) (output-port? . bC535c) (input-port? . bC535b) (utf-8-codec . bC535a) (utf-16-codec . bC5359) (transcoder-error-handling-mode . bC5358) (transcoder-eol-style . bC5357) (transcoder-codec . bC5356) (transcoded-port . bC5355) (textual-port? . bC5354) (string->bytevector . bC5353) (standard-output-port . bC5352) (standard-input-port . bC5351) (standard-error-port . bC5350) (set-port-position! . bC534f) (put-u8 . bC534e) (put-string . bC534d) (put-datum . bC534c) (put-char . bC534b) (put-bytevector . bC534a) (port? . bC5349) (port-transcoder . bC5348) (port-position . bC5347) (port-has-set-port-position!? . bC5346) (port-has-port-position? . bC5345) (port-eof? . bC5344) (output-port-buffer-mode . bC5343) (open-string-output-port . bC5342) (open-string-input-port . bC5341) (open-file-output-port . bC5340) (open-file-input/output-port . bC533f) (open-file-input-port . bC533e) (open-bytevector-output-port . bC533d) (open-bytevector-input-port . bC533c) (native-transcoder . bC533b) (native-eol-style . bC533a) (make-transcoder . bC5339) (latin-1-codec . bC5338) (make-i/o-write-error . bC4dc3) (make-i/o-read-error . bC4dae) (make-i/o-port-error . bC4e64) (make-i/o-invalid-position-error . bC4dda) (make-i/o-filename-error . bC4df5) (make-i/o-file-protection-error . bC4e0e) (make-i/o-file-is-read-only-error . bC4e23) (make-i/o-file-does-not-exist-error . bC4e4d) (make-i/o-file-already-exists-error . bC4e38) (make-i/o-error . bC4d99) (make-i/o-encoding-error . bC4e94) (make-i/o-decoding-error . bC4e7d) (make-custom-textual-output-port . bC5337) (make-custom-textual-input/output-port . bC5336) (make-custom-textual-input-port . bC5335) (make-custom-binary-output-port . bC5334) (make-custom-binary-input/output-port . bC5333) (make-custom-binary-input-port . bC5332) (lookahead-u8 . bC5330) (lookahead-char . bC532f) (i/o-write-error? . bC4dc5) (i/o-read-error? . bC4db0) (i/o-port-error? . bC4e68) (i/o-invalid-position-error? . bC4dde) (i/o-filename-error? . bC4df9) (i/o-file-protection-error? . bC4e10) (i/o-file-is-read-only-error? . bC4e25) (i/o-file-does-not-exist-error? . bC4e4f) (i/o-file-already-exists-error? . bC4e3a) (i/o-error? . bC4d9b) (i/o-error-position . bC4de0) (i/o-error-port . bC4e6a) (i/o-error-filename . bC4dfb) (i/o-encoding-error? . bC4e98) (i/o-encoding-error-char . bC4e9a) (i/o-decoding-error? . bC4e7f) (get-u8 . bC532e) (get-string-n! . bC532d) (get-string-n . bC532c) (get-string-all . bC532b) (get-line . bC532a) (get-datum . bC5329) (get-char . bC5328) (get-bytevector-some . bC5327) (get-bytevector-n! . bC5326) (get-bytevector-n . bC5325) (get-bytevector-all . bC5324) (flush-output-port . bC5323) (close-port . bC5322) (call-with-string-output-port . bC5301) (call-with-port . bC5300) (call-with-bytevector-output-port . bC52ff) (bytevector->string . bC52fe) (buffer-mode? . bC52fd) (binary-port? . bC52fc) (&i/o-encoding . bC519a) (&i/o-decoding . bC5199) (&i/o-port . bC5198) (&i/o-file-does-not-exist . bC5197) (&i/o-file-already-exists . bC5196) (&i/o-file-is-read-only . bC5195) (&i/o-file-protection . bC5194) (&i/o-filename . bC5193) (&i/o-invalid-position . bC5192) (&i/o-write . bC5191) (&i/o-read . bC5190) (&i/o . bC518f) (error-handling-mode . bC5174) (file-options . bC5173) (buffer-mode . bC5172) (eol-style . bC5171)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC547c '(rnrs enums) '(6) '() '() '() '((make-enumeration . bC52f8) (enum-set=? . bC52f7) (enum-set-universe . bC52f6) (enum-set-union . bC52f5) (enum-set-subset? . bC52f4) (enum-set-projection . bC52f3) (enum-set-member? . bC52f2) (enum-set-intersection . bC52f1) (enum-set-indexer . bC52f0) (enum-set-difference . bC52ef) (enum-set-constructor . bC52ee) (enum-set-complement . bC52ed) (enum-set->list . bC52ec) (define-enumeration . bC517f)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC547d '(rnrs conditions) '(6) '() '() '() '((who-condition? . bC4d0f) (warning? . bC4c87) (violation? . bC4cc6) (undefined-violation? . bC4d86) (syntax-violation? . bC4d6d) (syntax-violation-subform . bC4d71) (syntax-violation-form . bC4d6f) (syntax-violation . bC3199) (simple-conditions . bC52eb) (serious-condition? . bC4c9c) (non-continuable-violation? . bC4d26) (message-condition? . bC4c70) (make-who-condition . bC4d0b) (make-warning . bC4c85) (make-violation . bC4cc4) (make-undefined-violation . bC4d84) (make-syntax-violation . bC4d67) (make-serious-condition . bC4c9a) (make-non-continuable-violation . bC4d24) (make-message-condition . bC4c6c) (make-lexical-violation . bC4d4e) (make-irritants-condition . bC4cf0) (make-implementation-restriction-violation . bC4d39) (make-error . bC4caf) (make-assertion-violation . bC4cd9) (lexical-violation? . bC4d50) (irritants-condition? . bC4cf4) (implementation-restriction-violation? . bC4d3b) (error? . bC4cb1) (condition-who . bC4d11) (condition-predicate . bC52ea) (condition-message . bC4c72) (condition-irritants . bC4cf6) (condition-accessor . bC52e9) (condition . bC52e8) (assertion-violation? . bC4cdb) (condition? . bC52e7) (&undefined . bC518e) (&syntax . bC518d) (&lexical . bC518c) (&implementation-restriction . bC518b) (&non-continuable . bC518a) (&who . bC5189) (&irritants . bC5188) (&assertion . bC5187) (&violation . bC5186) (&error . bC5185) (&serious . bC5184) (&warning . bC5183) (&message . bC5182) (&condition . bC5181) (define-condition-type . bC5180)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC547e '(rnrs records inspection) '(6) '() '() '() '((record? . bC5394) (record-type-uid . bC5393) (record-type-sealed? . bC5392) (record-type-parent . bC5391) (record-type-opaque? . bC5390) (record-type-name . bC538f) (record-type-generative? . bC538e) (record-type-field-names . bC538d) (record-rtd . bC538c) (record-field-mutable? . bC538b)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC547f '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . bC539b) (record-predicate . bC539a) (record-mutator . bC5399) (record-constructor . bC5398) (record-accessor . bC5397) (make-record-type-descriptor . bC5396) (make-record-constructor-descriptor . bC5395)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC5480 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . bC517e) (parent-rtd . bC517d) (nongenerative . bC517c) (opaque . bC517b) (sealed . bC517a) (protocol . bC5179) (parent . bC5178) (immutable . bC5177) (mutable . bC5176) (fields . bC5175) (record-constructor-descriptor . bC5155) (record-type-descriptor . bC5154)) '() values values '#f '#f '#t '#f) (bC2ccd@bC2b19@install-library 'bC5481 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . bC4ec8) (&no-nans-rtd . bC4ec6) (&no-infinities-rcd . bC4eb3) (&no-infinities-rtd . bC4eb1) (&i/o-encoding-rcd . bC4e9e) (&i/o-encoding-rtd . bC4e9c) (&i/o-decoding-rcd . bC4e83) (&i/o-decoding-rtd . bC4e81) (&i/o-port-rcd . bC4e6e) (&i/o-port-rtd . bC4e6c) (&i/o-file-does-not-exist-rcd . bC4e53) (&i/o-file-does-not-exist-rtd . bC4e51) (&i/o-file-already-exists-rcd . bC4e3e) (&i/o-file-already-exists-rtd . bC4e3c) (&i/o-file-is-read-only-rcd . bC4e29) (&i/o-file-is-read-only-rtd . bC4e27) (&i/o-file-protection-rcd . bC4e14) (&i/o-file-protection-rtd . bC4e12) (&i/o-filename-rcd . bC4dff) (&i/o-filename-rtd . bC4dfd) (&i/o-invalid-position-rcd . bC4de4) (&i/o-invalid-position-rtd . bC4de2) (&i/o-write-rcd . bC4dc9) (&i/o-write-rtd . bC4dc7) (&i/o-read-rcd . bC4db4) (&i/o-read-rtd . bC4db2) (&i/o-rcd . bC4d9f) (&i/o-rtd . bC4d9d) (&undefined-rcd . bC4d8a) (&undefined-rtd . bC4d88) (&syntax-rcd . bC4d75) (&syntax-rtd . bC4d73) (&lexical-rcd . bC4d54) (&lexical-rtd . bC4d52) (&implementation-restriction-rcd . bC4d3f) (&implementation-restriction-rtd . bC4d3d) (&non-continuable-rcd . bC4d2a) (&non-continuable-rtd . bC4d28) (&who-rcd . bC4d15) (&who-rtd . bC4d13) (&irritants-rcd . bC4cfa) (&irritants-rtd . bC4cf8) (&assertion-rcd . bC4cdf) (&assertion-rtd . bC4cdd) (&violation-rcd . bC4cca) (&violation-rtd . bC4cc8) (&error-rcd . bC4cb5) (&error-rtd . bC4cb3) (&serious-rcd . bC4ca0) (&serious-rtd . bC4c9e) (&warning-rcd . bC4c8b) (&warning-rtd . bC4c89) (&message-rcd . bC4c76) (&message-rtd . bC4c74) (&condition-rcd . bC4c17) (&condition-rtd . bC4c15) (syntax-error . bC3195) (syntax-dispatch . bC30b9) (pretty-print . bC5461) (eval-core . bC5460) (set-symbol-value! . bC545f) (symbol-value . bC545e) (gensym . bC545d) (void . bC545c) (load . bC4fd9) (interaction-environment . bC31a7) (char-ready? . bC545b) (regexp? . bC545a) (read-line . bC5459) (gensym-prefix-set! . bC5458) (ungensym . bC5457) (alist->eq-hash-table . bC5456) (assoc-ref . bC5455) (print . bC5454) (format . bC5453) (host-os . bC5452) (library-path . bC2af8) (standard-library-path . bC5451) (file-newer? . bC5450) (stat-mtime . bC544f) (write-to-file . bC544e) (file->list . bC544d) (file->string . bC544c) (digit->integer . bC544b) (call-with-string-input-port . bC544a) (call-with-string-io . bC5449) (string-split . bC5448) (bytevector-for-each . bC5447) (string->regexp . bC5446) (rxmatch . bC5445) (regexp-replace-all . bC5444) (hashtable-for-each . bC5443) (mosh-cache-dir . bC28e2) (call-process . bC5442) (local-tz-offset . bC5441) (microseconds . bC5440) (directory-list . bC543f) (set-current-directory! . bC543e) (expand-path . bC543d) (current-directory . bC543c) (%spawn . bC543b) (%waitpid . bC543a) (simple-struct-name . bC5439) (simple-struct-set! . bC5438) (simple-struct-ref . bC5437) (make-simple-struct . bC5436) (simple-struct? . bC5435) (pointer-ref-c-int64 . bC5434) (pointer-ref-c-int32 . bC5433) (pointer-ref-c-int16 . bC5432) (pointer-ref-c-int8 . bC5431) (pointer-ref-c-uint64 . bC5430) (pointer-ref-c-uint32 . bC542f) (pointer-ref-c-uint16 . bC542e) (pointer-ref-c-uint8 . bC542d) (pointer-set-c-uint64! . bC542c) (pointer-set-c-uint32! . bC542b) (pointer-set-c-uint16! . bC542a) (pointer-set-c-uint8! . bC5429) (pointer-set-c-int64! . bC5428) (pointer-set-c-int32! . bC5427) (pointer-set-c-int16! . bC5426) (pointer-set-c-int8! . bC5425) (pointer-set-c-pointer! . bC5424) (pointer-set-c-double! . bC5423) (pointer-set-c-float! . bC5422) (pointer-set-c-long-long! . bC5421) (pointer-set-c-long! . bC5420) (pointer-set-c-int! . bC541f) (pointer-set-c-short! . bC541e) (pointer-set-c-char! . bC541d) (pointer-ref-c-pointer . bC541c) (pointer-ref-c-double . bC541b) (pointer-ref-c-float . bC541a) (pointer-ref-c-unsigned-long-long . bC5419) (pointer-ref-c-signed-long-long . bC5418) (pointer-ref-c-unsigned-long . bC5417) (pointer-ref-c-signed-long . bC5416) (pointer-ref-c-unsigned-int . bC5415) (pointer-ref-c-signed-int . bC5414) (pointer-ref-c-unsigned-short . bC5413) (pointer-ref-c-signed-short . bC5412) (pointer-ref-c-unsigned-char . bC5411) (pointer-ref-c-signed-char . bC5410) (pointer->integer . bC540f) (integer->pointer . bC540e) (pointer? . bC540d) (shared-errno . bC540c) (%ffi-free-c-callback-trampoline . bC540b) (%ffi-make-c-callback-trampoline . bC540a) (%ffi-free . bC5409) (%ffi-malloc . bC5408) (%ffi-supported? . bC5407) (%ffi-pointer->string . bC5406) (%ffi-call . bC5405) (%ffi-lookup . bC5404) (%ffi-open . bC5403) (null-terminated-utf8->string . bC5402) (null-terminated-bytevector->string . bC5401) (%fork . bC5400) (%pipe . bC53ff) (p . bC53fe) (open-output-string . bC53fd) (get-output-string . bC53fc) (file-stat-ctime . bC53fb) (file-stat-atime . bC53fa) (file-stat-mtime . bC53f9) (file-size-in-bytes . bC53f8) (file-writable? . bC53f7) (file-executable? . bC53f6) (file-readable? . bC53f5) (file-regular? . bC53f4) (file-symbolic-link? . bC53f3) (file-directory? . bC53f2) (create-symbolic-link . bC53f1) (rename-file . bC53f0) (delete-directory . bC53ef) (create-directory . bC53ee) (create-mosh-cache-dir . bC53ed) (get-environment-variables . bC53ec) (current-exception-handler . bC53eb) (get-environment-variable . bC53ea) (join-wraps . bC53e9) (id->real-label . bC53e8) (same-marks? . bC53e7) (same-marks*? . bC53e6) (get-timeofday . bC53e5) (get-command-line . bC53e4) (sys-display . bC53e3) (whereis . bC53e2) (register . bC53e1) (vm-join! . bC53e0) (vm-set-value! . bC53df) (vm? . bC53de) (main-vm? . bC53dd) (vm-eval . bC53dc) (vm-self . bC53db) (vm-start! . bC53da) (make-vm . bC53d9) (mutex-try-lock! . bC53d8) (mutex-unlock! . bC53d7) (mutex-lock! . bC53d6) (mutex? . bC53d5) (make-mutex . bC53d4) (condition-variable-notify-all! . bC53d3) (condition-variable-notify! . bC53d2) (condition-variable-wait! . bC53d1) (make-condition-variable . bC53d0) (mosh-executable-path . bC53cf) (make-file-options . bC53ce) (source-info . bC53cd) (make-compiler-instruction . bC53cc) (make-instruction . bC53cb) (set-source-info! . bC53ca) (bignum? . bC53c9) (fast-equal? . bC53c8) (fasl-read . bC53c7) (fasl-write . bC53c6) (time-usage . bC53c5) (os-constant . bC53c4) (disasm . bC53c3) (make-parameter . bC28e0) (socket-port . bC53c2) (socket-shutdown . bC53c1) (socket-close . bC53c0) (socket-send . bC53bf) (socket-recv! . bC53be) (socket-recv . bC53bd) (make-server-socket . bC53bc) (make-client-socket . bC53bb) (socket-accept . bC53ba) (socket? . bC53b9) (string-upcase . bC53b8) (string-titlecase . bC53b7) (string-normalize-nfkd . bC53b6) (string-normalize-nfkc . bC53b5) (string-normalize-nfd . bC53b4) (string-normalize-nfc . bC53b3) (string-foldcase . bC53b2) (string-downcase . bC53b1) (string-ci>? . bC53b0) (string-ci>=? . bC53af) (string-ci=? . bC53ae) (string-ci<? . bC53ad) (string-ci<=? . bC53ac) (char-whitespace? . bC53ab) (char-upper-case? . bC53aa) (char-title-case? . bC53a9) (char-numeric? . bC53a8) (char-lower-case? . bC53a7) (char-general-category . bC53a6) (char-upcase . bC53a5) (char-titlecase . bC53a4) (char-foldcase . bC53a3) (char-downcase . bC53a2) (char-ci>? . bC53a1) (char-ci>=? . bC53a0) (char-ci=? . bC539f) (char-ci<? . bC539e) (char-ci<=? . bC539d) (char-alphabetic? . bC539c) (make-variable-transformer . bC2ee4) (identifier? . bC319b) (generate-temporaries . bC3187) (free-identifier=? . bC3189) (syntax->datum . bC319f) (datum->syntax . bC319d) (bound-identifier=? . bC318b) (record-type-descriptor? . bC539b) (record-predicate . bC539a) (record-mutator . bC5399) (record-constructor . bC5398) (record-accessor . bC5397) (make-record-type-descriptor . bC5396) (make-record-constructor-descriptor . bC5395) (record? . bC5394) (record-type-uid . bC5393) (record-type-sealed? . bC5392) (record-type-parent . bC5391) (record-type-opaque? . bC5390) (record-type-name . bC538f) (record-type-generative? . bC538e) (record-type-field-names . bC538d) (record-rtd . bC538c) (record-field-mutable? . bC538b) (delete-file . bC538a) (file-exists? . bC5389) (vector-sort! . bC5388) (vector-sort . bC5387) (list-sort . bC5386) (symbol-hash . bC5385) (string-ci-hash . bC5384) (string-hash . bC5383) (equal-hash . bC5382) (hashtable-equivalence-function . bC5381) (make-hashtable . bC5380) (hashtable-hash-function . bC537f) (make-eqv-hashtable . bC537e) (make-eq-hashtable . bC537d) (hashtable? . bC537c) (hashtable-update! . bC537b) (hashtable-size . bC537a) (hashtable-set! . bC5379) (hashtable-ref . bC5378) (hashtable-mutable? . bC5377) (hashtable-keys . bC5376) (hashtable-entries . bC5375) (hashtable-delete! . bC5374) (hashtable-copy . bC5373) (hashtable-contains? . bC5372) (hashtable-clear! . bC5371) (call-with-output-file . bC5370) (call-with-input-file . bC536f) (write-char . bC536e) (write . bC536d) (with-output-to-file . bC536c) (with-input-from-file . bC536b) (read-char . bC536a) (read . bC5369) (peek-char . bC5368) (open-output-file . bC5367) (open-input-file . bC5366) (newline . bC5365) (display . bC5364) (close-output-port . bC5363) (close-input-port . bC5362) (eof-object? . bC5361) (eof-object . bC5360) (current-error-port . bC535f) (current-output-port . bC535e) (current-input-port . bC535d) (output-port? . bC535c) (input-port? . bC535b) (utf-8-codec . bC535a) (utf-16-codec . bC5359) (transcoder-error-handling-mode . bC5358) (transcoder-eol-style . bC5357) (transcoder-codec . bC5356) (transcoded-port . bC5355) (textual-port? . bC5354) (string->bytevector . bC5353) (standard-output-port . bC5352) (standard-input-port . bC5351) (standard-error-port . bC5350) (set-port-position! . bC534f) (put-u8 . bC534e) (put-string . bC534d) (put-datum . bC534c) (put-char . bC534b) (put-bytevector . bC534a) (port? . bC5349) (port-transcoder . bC5348) (port-position . bC5347) (port-has-set-port-position!? . bC5346) (port-has-port-position? . bC5345) (port-eof? . bC5344) (output-port-buffer-mode . bC5343) (open-string-output-port . bC5342) (open-string-input-port . bC5341) (open-file-output-port . bC5340) (open-file-input/output-port . bC533f) (open-file-input-port . bC533e) (open-bytevector-output-port . bC533d) (open-bytevector-input-port . bC533c) (native-transcoder . bC533b) (native-eol-style . bC533a) (make-transcoder . bC5339) (latin-1-codec . bC5338) (make-i/o-write-error . bC4dc3) (make-i/o-read-error . bC4dae) (make-i/o-port-error . bC4e64) (make-i/o-invalid-position-error . bC4dda) (make-i/o-filename-error . bC4df5) (make-i/o-file-protection-error . bC4e0e) (make-i/o-file-is-read-only-error . bC4e23) (make-i/o-file-does-not-exist-error . bC4e4d) (make-i/o-file-already-exists-error . bC4e38) (make-i/o-error . bC4d99) (make-i/o-encoding-error . bC4e94) (make-i/o-decoding-error . bC4e7d) (make-custom-textual-output-port . bC5337) (make-custom-textual-input/output-port . bC5336) (make-custom-textual-input-port . bC5335) (make-custom-binary-output-port . bC5334) (make-custom-binary-input/output-port . bC5333) (make-custom-binary-input-port . bC5332) (make-bytevector . bC5331) (lookahead-u8 . bC5330) (lookahead-char . bC532f) (i/o-write-error? . bC4dc5) (i/o-read-error? . bC4db0) (i/o-port-error? . bC4e68) (i/o-invalid-position-error? . bC4dde) (i/o-filename-error? . bC4df9) (i/o-file-protection-error? . bC4e10) (i/o-file-is-read-only-error? . bC4e25) (i/o-file-does-not-exist-error? . bC4e4f) (i/o-file-already-exists-error? . bC4e3a) (i/o-error? . bC4d9b) (i/o-error-position . bC4de0) (i/o-error-port . bC4e6a) (i/o-error-filename . bC4dfb) (i/o-encoding-error? . bC4e98) (i/o-encoding-error-char . bC4e9a) (i/o-decoding-error? . bC4e7f) (get-u8 . bC532e) (get-string-n! . bC532d) (get-string-n . bC532c) (get-string-all . bC532b) (get-line . bC532a) (get-datum . bC5329) (get-char . bC5328) (get-bytevector-some . bC5327) (get-bytevector-n! . bC5326) (get-bytevector-n . bC5325) (get-bytevector-all . bC5324) (flush-output-port . bC5323) (close-port . bC5322) (scheme-report-environment . bC3175) (quotient . bC5321) (null-environment . bC3173) (remainder . bC5320) (modulo . bC531f) (inexact->exact . bC531e) (force . bC531d) (exact->inexact . bC531c) (make-promise . bC531b) (exit . bC531a) (command-line . bC4fd3) (string-fill! . bC5319) (string-set! . bC5318) (set-cdr! . bC5317) (set-car! . bC5316) (remove . bC5315) (remv . bC5314) (remp . bC5313) (remq . bC5312) (partition . bC5311) (memv . bC5310) (memq . bC530f) (memp . bC530e) (member . bC530d) (exists . bC530c) (for-all . bC530b) (fold-right . bC530a) (fold-left . bC5309) (find . bC5308) (filter . bC5307) (cons* . bC5306) (assv . bC5305) (assq . bC5304) (assp . bC5303) (assoc . bC5302) (call-with-string-output-port . bC5301) (call-with-port . bC5300) (call-with-bytevector-output-port . bC52ff) (bytevector->string . bC52fe) (buffer-mode? . bC52fd) (binary-port? . bC52fc) (with-exception-handler . bC52fb) (raise-continuable . bC52fa) (raise . bC52f9) (eval . bC3179) (environment . bC3171) (make-enumeration . bC52f8) (enum-set=? . bC52f7) (enum-set-universe . bC52f6) (enum-set-union . bC52f5) (enum-set-subset? . bC52f4) (enum-set-projection . bC52f3) (enum-set-member? . bC52f2) (enum-set-intersection . bC52f1) (enum-set-indexer . bC52f0) (enum-set-difference . bC52ef) (enum-set-constructor . bC52ee) (enum-set-complement . bC52ed) (enum-set->list . bC52ec) (who-condition? . bC4d0f) (warning? . bC4c87) (violation? . bC4cc6) (undefined-violation? . bC4d86) (syntax-violation? . bC4d6d) (syntax-violation-subform . bC4d71) (syntax-violation-form . bC4d6f) (syntax-violation . bC3199) (simple-conditions . bC52eb) (serious-condition? . bC4c9c) (non-continuable-violation? . bC4d26) (message-condition? . bC4c70) (make-who-condition . bC4d0b) (make-warning . bC4c85) (make-violation . bC4cc4) (make-undefined-violation . bC4d84) (make-syntax-violation . bC4d67) (make-serious-condition . bC4c9a) (make-non-continuable-violation . bC4d24) (make-message-condition . bC4c6c) (make-lexical-violation . bC4d4e) (make-irritants-condition . bC4cf0) (make-implementation-restriction-violation . bC4d39) (make-error . bC4caf) (make-assertion-violation . bC4cd9) (lexical-violation? . bC4d50) (irritants-condition? . bC4cf4) (implementation-restriction-violation? . bC4d3b) (error? . bC4cb1) (condition-who . bC4d11) (condition-predicate . bC52ea) (condition-message . bC4c72) (condition-irritants . bC4cf6) (condition-accessor . bC52e9) (condition . bC52e8) (assertion-violation? . bC4cdb) (condition? . bC52e7) (utf32->string . bC52e6) (utf16->string . bC52e5) (utf8->string . bC52e4) (uint-list->bytevector . bC52e3) (u8-list->bytevector . bC52e2) (string->utf8 . bC52e1) (string->utf32 . bC52e0) (string->utf16 . bC52df) (sint-list->bytevector . bC52de) (native-endianness . bC52dd) (bytevector? . bC52dc) (bytevector=? . bC52db) (bytevector-uint-set! . bC52da) (bytevector-uint-ref . bC52d9) (bytevector-u8-set! . bC52d8) (bytevector-u8-ref . bC52d7) (bytevector-u64-set! . bC52d6) (bytevector-u64-ref . bC52d5) (bytevector-u64-native-set! . bC52d4) (bytevector-u64-native-ref . bC52d3) (bytevector-u32-set! . bC52d2) (bytevector-u32-ref . bC52d1) (bytevector-u32-native-set! . bC52d0) (bytevector-u32-native-ref . bC52cf) (bytevector-u16-set! . bC52ce) (bytevector-u16-ref . bC52cd) (bytevector-u16-native-set! . bC52cc) (bytevector-u16-native-ref . bC52cb) (bytevector-sint-set! . bC52ca) (bytevector-sint-ref . bC52c9) (bytevector-s8-set! . bC52c8) (bytevector-s8-ref . bC52c7) (bytevector-s64-set! . bC52c6) (bytevector-s64-ref . bC52c5) (bytevector-s64-native-set! . bC52c4) (bytevector-s64-native-ref . bC52c3) (bytevector-s32-set! . bC52c2) (bytevector-s32-ref . bC52c1) (bytevector-s32-native-set! . bC52c0) (bytevector-s32-native-ref . bC52bf) (bytevector-s16-set! . bC52be) (bytevector-s16-ref . bC52bd) (bytevector-s16-native-set! . bC52bc) (bytevector-s16-native-ref . bC52bb) (bytevector-length . bC52ba) (bytevector-ieee-single-ref . bC52b9) (bytevector-ieee-single-set! . bC52b8) (bytevector-ieee-single-native-set! . bC52b7) (bytevector-ieee-single-native-ref . bC52b6) (bytevector-ieee-double-set! . bC52b5) (bytevector-ieee-double-ref . bC52b4) (bytevector-ieee-double-native-set! . bC52b3) (bytevector-ieee-double-native-ref . bC52b2) (bytevector-fill! . bC52b1) (bytevector-copy! . bC52b0) (bytevector-copy . bC52af) (bytevector->uint-list . bC52ae) (bytevector->u8-list . bC52ad) (bytevector->sint-list . bC52ac) (no-nans-violation? . bC4ec4) (no-infinities-violation? . bC4eaf) (make-no-nans-violation . bC4ec2) (make-no-infinities-violation . bC4ead) (real->flonum . bC52ab) (flzero? . bC52aa) (fltruncate . bC52a9) (fltan . bC52a8) (flsqrt . bC52a7) (flsin . bC52a6) (flround . bC52a5) (flpositive? . bC52a4) (flonum? . bC52a3) (flodd? . bC52a2) (flnumerator . bC52a1) (flnegative? . bC52a0) (flnan? . bC529f) (flmod0 . bC529e) (flmod . bC529d) (flmin . bC529c) (flmax . bC529b) (fllog . bC529a) (flinteger? . bC5299) (flinfinite? . bC5298) (flfloor . bC5297) (flfinite? . bC5296) (flexpt . bC5295) (flexp . bC5294) (fleven? . bC5293) (fldiv0-and-mod0 . bC5292) (fldiv0 . bC5291) (fldiv-and-mod . bC5290) (fldiv . bC528f) (fldenominator . bC528e) (flcos . bC528d) (flceiling . bC528c) (flatan . bC528b) (flasin . bC528a) (flacos . bC5289) (flabs . bC5288) (fl>? . bC5287) (fl>=? . bC5286) (fl=? . bC5285) (fl<? . bC5284) (fl<=? . bC5283) (fl/ . bC5282) (fl- . bC5281) (fl+ . bC5280) (fl* . bC527f) (fixnum->flonum . bC527e) (fxzero? . bC527d) (fxxor . bC527c) (fxrotate-bit-field . bC527b) (fxreverse-bit-field . bC527a) (fxpositive? . bC5279) (fxodd? . bC5278) (fxnot . bC5277) (fxnegative? . bC5276) (fxmod0 . bC5275) (fxmod . bC5274) (fxmin . bC5273) (fxmax . bC5272) (fxlength . bC5271) (fxior . bC5270) (fxif . bC526f) (fxfirst-bit-set . bC526e) (fxeven? . bC526d) (fxdiv0-and-mod0 . bC526c) (fxdiv0 . bC526b) (fxdiv-and-mod . bC526a) (fxdiv . bC5269) (fxcopy-bit-field . bC5268) (fxcopy-bit . bC5267) (fxbit-set? . bC5266) (fxbit-field . bC5265) (fxbit-count . bC5264) (fxarithmetic-shift-right . bC5263) (fxarithmetic-shift-left . bC5262) (fxarithmetic-shift . bC5261) (fxand . bC5260) (fx>? . bC525f) (fx>=? . bC525e) (fx=? . bC525d) (fx<? . bC525c) (fx<=? . bC525b) (fx-/carry . bC525a) (fx- . bC5259) (fx+/carry . bC5258) (fx+ . bC5257) (fx*/carry . bC5256) (fx* . bC5255) (greatest-fixnum . bC5254) (least-fixnum . bC5253) (fixnum-width . bC5252) (fixnum? . bC5251) (bitwise-rotate-bit-field . bC5250) (bitwise-reverse-bit-field . bC524f) (bitwise-length . bC524e) (bitwise-if . bC524d) (bitwise-first-bit-set . bC524c) (bitwise-copy-bit-field . bC524b) (bitwise-copy-bit . bC524a) (bitwise-bit-set? . bC5249) (bitwise-bit-field . bC5248) (bitwise-bit-count . bC5247) (bitwise-xor . bC5246) (bitwise-ior . bC5245) (bitwise-and . bC5244) (bitwise-not . bC5243) (bitwise-arithmetic-shift-right . bC5242) (bitwise-arithmetic-shift-left . bC5241) (bitwise-arithmetic-shift . bC5240) (zero? . bC523f) (vector? . bC523e) (vector-set! . bC523d) (vector-ref . bC523c) (vector-map . bC523b) (vector-length . bC523a) (vector-for-each . bC5239) (vector-fill! . bC5238) (vector->list . bC5237) (vector . bC5236) (values . bC5235) (truncate . bC5234) (tan . bC5233) (symbol? . bC5232) (symbol=? . bC5231) (symbol->string . bC5230) (substring . bC522f) (string? . bC522e) (string>? . bC522d) (string>=? . bC522c) (string=? . bC522b) (string<? . bC522a) (string<=? . bC5229) (string-ref . bC5228) (string-length . bC5227) (string-for-each . bC5226) (string-copy . bC5225) (string-append . bC5224) (string->symbol . bC5223) (string->number . bC5222) (string->list . bC5221) (string . bC5220) (sqrt . bC521f) (sin . bC521e) (round . bC521d) (reverse . bC521c) (real? . bC521b) (real-valued? . bC521a) (real-part . bC5219) (rationalize . bC5218) (rational? . bC5217) (rational-valued? . bC5216) (procedure? . bC5215) (positive? . bC5214) (pair? . bC5213) (odd? . bC5212) (numerator . bC5211) (number? . bC5210) (number->string . bC520f) (null? . bC520e) (not . bC520d) (negative? . bC520c) (nan? . bC520b) (min . bC520a) (max . bC5209) (map . bC5208) (make-vector . bC5207) (make-string . bC5206) (make-rectangular . bC5205) (make-polar . bC5204) (magnitude . bC5203) (log . bC5202) (list? . bC5201) (list-tail . bC5200) (list-ref . bC51ff) (list->vector . bC51fe) (list->string . bC51fd) (list . bC51fc) (length . bC51fb) (lcm . bC51fa) (integer? . bC51f9) (integer-valued? . bC51f8) (integer->char . bC51f7) (infinite? . bC51f6) (inexact? . bC51f5) (inexact . bC51f4) (imag-part . bC51f3) (gcd . bC51f2) (for-each . bC51f1) (floor . bC51f0) (finite? . bC51ef) (expt . bC51ee) (exp . bC51ed) (exact? . bC51ec) (exact-integer-sqrt . bC51eb) (exact . bC51ea) (even? . bC51e9) (error . bC51e8) (eqv? . bC51e7) (equal? . bC51e6) (eq? . bC51e5) (dynamic-wind . bC51e4) (div0-and-mod0 . bC51e3) (mod0 . bC51e2) (div0 . bC51e1) (div-and-mod . bC51e0) (mod . bC51df) (div . bC51de) (denominator . bC51dd) (cos . bC51dc) (cons . bC51db) (complex? . bC51da) (char? . bC51d9) (char>? . bC51d8) (char>=? . bC51d7) (char=? . bC51d6) (char<? . bC51d5) (char<=? . bC51d4) (char->integer . bC51d3) (ceiling . bC51d2) (call-with-values . bC51d1) (call/cc . bC51d0) (call-with-current-continuation . bC51cf) (cddddr . bC51ce) (cdddar . bC51cd) (cddadr . bC51cc) (cddaar . bC51cb) (cdaddr . bC51ca) (cdadar . bC51c9) (cdaadr . bC51c8) (cdaaar . bC51c7) (cadddr . bC51c6) (caddar . bC51c5) (cadadr . bC51c4) (cadaar . bC51c3) (caaddr . bC51c2) (caadar . bC51c1) (caaadr . bC51c0) (caaaar . bC51bf) (cdddr . bC51be) (cddar . bC51bd) (cdadr . bC51bc) (cdaar . bC51bb) (caddr . bC51ba) (cadar . bC51b9) (caadr . bC51b8) (caaar . bC51b7) (cddr . bC51b6) (cdar . bC51b5) (cadr . bC51b4) (caar . bC51b3) (cdr . bC51b2) (car . bC51b1) (boolean? . bC51b0) (boolean=? . bC51af) (atan . bC51ae) (assertion-violation . bC51ad) (assertion-error . bC3193) (asin . bC51ac) (apply . bC51ab) (append . bC51aa) (angle . bC51a9) (acos . bC51a8) (abs . bC51a7) (/ . bC51a6) (* . bC51a5) (- . bC51a4) (+ . bC51a3) (>= . bC51a2) (> . bC51a1) (= . bC51a0) (<= . bC519f) (< . bC519e) (library . bC519d) (&no-nans . bC519c) (&no-infinities . bC519b) (&i/o-encoding . bC519a) (&i/o-decoding . bC5199) (&i/o-port . bC5198) (&i/o-file-does-not-exist . bC5197) (&i/o-file-already-exists . bC5196) (&i/o-file-is-read-only . bC5195) (&i/o-file-protection . bC5194) (&i/o-filename . bC5193) (&i/o-invalid-position . bC5192) (&i/o-write . bC5191) (&i/o-read . bC5190) (&i/o . bC518f) (&undefined . bC518e) (&syntax . bC518d) (&lexical . bC518c) (&implementation-restriction . bC518b) (&non-continuable . bC518a) (&who . bC5189) (&irritants . bC5188) (&assertion . bC5187) (&violation . bC5186) (&error . bC5185) (&serious . bC5184) (&warning . bC5183) (&message . bC5182) (&condition . bC5181) (define-condition-type . bC5180) (define-enumeration . bC517f) (define-record-type . bC517e) (parent-rtd . bC517d) (nongenerative . bC517c) (opaque . bC517b) (sealed . bC517a) (protocol . bC5179) (parent . bC5178) (immutable . bC5177) (mutable . bC5176) (fields . bC5175) (error-handling-mode . bC5174) (file-options . bC5173) (buffer-mode . bC5172) (eol-style . bC5171) (guard . bC5170) (trace-define . bC516f) (trace-lambda . bC516e) (unsyntax-splicing . bC516d) (unsyntax . bC516c) (unquote-splicing . bC516b) (unquote . bC516a) (_ . bC5169) (else . bC5168) (=> . bC5167) (... . bC5166) (assert . bC5165) (endianness . bC5164) (delay . bC5163) (time . bC5162) (do . bC5161) (cond . bC5160) (let* . bC515f) (let*-values . bC515e) (let-values . bC515d) (identifier-syntax . bC515c) (with-syntax . bC515b) (quasisyntax . bC515a) (quasiquote . bC5159) (syntax-rules . bC5158) (include . bC5157) (define-struct . bC5156) (record-constructor-descriptor . bC5155) (record-type-descriptor . bC5154) (case . bC5153) (parameterize . bC5152) (unless . bC5151) (when . bC5150) (or . bC514f) (and . bC514e) (if . bC514d) (let . bC514c) (letrec* . bC514b) (letrec . bC514a) (type-descriptor . bC5149) (case-lambda . bC5148) (lambda . bC5147) (syntax . bC5146) (syntax-case . bC5145) (quote . bC5144) (foreign-call . bC5143) (letrec-syntax . bC5142) (let-syntax . bC5141) (set! . bC5140) (import . bC513f) (begin . bC513e) (module . bC513d) (define-syntax . bC513c) (define . bC513b)) '((bC4ec8 core-prim . &no-nans-rcd) (bC4ec6 core-prim . &no-nans-rtd) (bC4eb3 core-prim . &no-infinities-rcd) (bC4eb1 core-prim . &no-infinities-rtd) (bC4e9e core-prim . &i/o-encoding-rcd) (bC4e9c core-prim . &i/o-encoding-rtd) (bC4e83 core-prim . &i/o-decoding-rcd) (bC4e81 core-prim . &i/o-decoding-rtd) (bC4e6e core-prim . &i/o-port-rcd) (bC4e6c core-prim . &i/o-port-rtd) (bC4e53 core-prim . &i/o-file-does-not-exist-rcd) (bC4e51 core-prim . &i/o-file-does-not-exist-rtd) (bC4e3e core-prim . &i/o-file-already-exists-rcd) (bC4e3c core-prim . &i/o-file-already-exists-rtd) (bC4e29 core-prim . &i/o-file-is-read-only-rcd) (bC4e27 core-prim . &i/o-file-is-read-only-rtd) (bC4e14 core-prim . &i/o-file-protection-rcd) (bC4e12 core-prim . &i/o-file-protection-rtd) (bC4dff core-prim . &i/o-filename-rcd) (bC4dfd core-prim . &i/o-filename-rtd) (bC4de4 core-prim . &i/o-invalid-position-rcd) (bC4de2 core-prim . &i/o-invalid-position-rtd) (bC4dc9 core-prim . &i/o-write-rcd) (bC4dc7 core-prim . &i/o-write-rtd) (bC4db4 core-prim . &i/o-read-rcd) (bC4db2 core-prim . &i/o-read-rtd) (bC4d9f core-prim . &i/o-rcd) (bC4d9d core-prim . &i/o-rtd) (bC4d8a core-prim . &undefined-rcd) (bC4d88 core-prim . &undefined-rtd) (bC4d75 core-prim . &syntax-rcd) (bC4d73 core-prim . &syntax-rtd) (bC4d54 core-prim . &lexical-rcd) (bC4d52 core-prim . &lexical-rtd) (bC4d3f core-prim . &implementation-restriction-rcd) (bC4d3d core-prim . &implementation-restriction-rtd) (bC4d2a core-prim . &non-continuable-rcd) (bC4d28 core-prim . &non-continuable-rtd) (bC4d15 core-prim . &who-rcd) (bC4d13 core-prim . &who-rtd) (bC4cfa core-prim . &irritants-rcd) (bC4cf8 core-prim . &irritants-rtd) (bC4cdf core-prim . &assertion-rcd) (bC4cdd core-prim . &assertion-rtd) (bC4cca core-prim . &violation-rcd) (bC4cc8 core-prim . &violation-rtd) (bC4cb5 core-prim . &error-rcd) (bC4cb3 core-prim . &error-rtd) (bC4ca0 core-prim . &serious-rcd) (bC4c9e core-prim . &serious-rtd) (bC4c8b core-prim . &warning-rcd) (bC4c89 core-prim . &warning-rtd) (bC4c76 core-prim . &message-rcd) (bC4c74 core-prim . &message-rtd) (bC4c17 core-prim . &condition-rcd) (bC4c15 core-prim . &condition-rtd) (bC3195 core-prim . syntax-error) (bC30b9 core-prim . syntax-dispatch) (bC5461 core-prim . pretty-print) (bC5460 core-prim . eval-core) (bC545f core-prim . set-symbol-value!) (bC545e core-prim . symbol-value) (bC545d core-prim . gensym) (bC545c core-prim . void) (bC4fd9 core-prim . load) (bC31a7 core-prim . interaction-environment) (bC545b core-prim . char-ready?) (bC545a core-prim . regexp?) (bC5459 core-prim . read-line) (bC5458 core-prim . gensym-prefix-set!) (bC5457 core-prim . ungensym) (bC5456 core-prim . alist->eq-hash-table) (bC5455 core-prim . assoc-ref) (bC5454 core-prim . print) (bC5453 core-prim . format) (bC5452 core-prim . host-os) (bC2af8 core-prim . library-path) (bC5451 core-prim . standard-library-path) (bC5450 core-prim . file-newer?) (bC544f core-prim . stat-mtime) (bC544e core-prim . write-to-file) (bC544d core-prim . file->list) (bC544c core-prim . file->string) (bC544b core-prim . digit->integer) (bC544a core-prim . call-with-string-input-port) (bC5449 core-prim . call-with-string-io) (bC5448 core-prim . string-split) (bC5447 core-prim . bytevector-for-each) (bC5446 core-prim . string->regexp) (bC5445 core-prim . rxmatch) (bC5444 core-prim . regexp-replace-all) (bC5443 core-prim . hashtable-for-each) (bC28e2 core-prim . mosh-cache-dir) (bC5442 core-prim . call-process) (bC5441 core-prim . local-tz-offset) (bC5440 core-prim . microseconds) (bC543f core-prim . directory-list) (bC543e core-prim . set-current-directory!) (bC543d core-prim . expand-path) (bC543c core-prim . current-directory) (bC543b core-prim . %spawn) (bC543a core-prim . %waitpid) (bC5439 core-prim . simple-struct-name) (bC5438 core-prim . simple-struct-set!) (bC5437 core-prim . simple-struct-ref) (bC5436 core-prim . make-simple-struct) (bC5435 core-prim . simple-struct?) (bC5434 core-prim . pointer-ref-c-int64) (bC5433 core-prim . pointer-ref-c-int32) (bC5432 core-prim . pointer-ref-c-int16) (bC5431 core-prim . pointer-ref-c-int8) (bC5430 core-prim . pointer-ref-c-uint64) (bC542f core-prim . pointer-ref-c-uint32) (bC542e core-prim . pointer-ref-c-uint16) (bC542d core-prim . pointer-ref-c-uint8) (bC542c core-prim . pointer-set-c-uint64!) (bC542b core-prim . pointer-set-c-uint32!) (bC542a core-prim . pointer-set-c-uint16!) (bC5429 core-prim . pointer-set-c-uint8!) (bC5428 core-prim . pointer-set-c-int64!) (bC5427 core-prim . pointer-set-c-int32!) (bC5426 core-prim . pointer-set-c-int16!) (bC5425 core-prim . pointer-set-c-int8!) (bC5424 core-prim . pointer-set-c-pointer!) (bC5423 core-prim . pointer-set-c-double!) (bC5422 core-prim . pointer-set-c-float!) (bC5421 core-prim . pointer-set-c-long-long!) (bC5420 core-prim . pointer-set-c-long!) (bC541f core-prim . pointer-set-c-int!) (bC541e core-prim . pointer-set-c-short!) (bC541d core-prim . pointer-set-c-char!) (bC541c core-prim . pointer-ref-c-pointer) (bC541b core-prim . pointer-ref-c-double) (bC541a core-prim . pointer-ref-c-float) (bC5419 core-prim . pointer-ref-c-unsigned-long-long) (bC5418 core-prim . pointer-ref-c-signed-long-long) (bC5417 core-prim . pointer-ref-c-unsigned-long) (bC5416 core-prim . pointer-ref-c-signed-long) (bC5415 core-prim . pointer-ref-c-unsigned-int) (bC5414 core-prim . pointer-ref-c-signed-int) (bC5413 core-prim . pointer-ref-c-unsigned-short) (bC5412 core-prim . pointer-ref-c-signed-short) (bC5411 core-prim . pointer-ref-c-unsigned-char) (bC5410 core-prim . pointer-ref-c-signed-char) (bC540f core-prim . pointer->integer) (bC540e core-prim . integer->pointer) (bC540d core-prim . pointer?) (bC540c core-prim . shared-errno) (bC540b core-prim . %ffi-free-c-callback-trampoline) (bC540a core-prim . %ffi-make-c-callback-trampoline) (bC5409 core-prim . %ffi-free) (bC5408 core-prim . %ffi-malloc) (bC5407 core-prim . %ffi-supported?) (bC5406 core-prim . %ffi-pointer->string) (bC5405 core-prim . %ffi-call) (bC5404 core-prim . %ffi-lookup) (bC5403 core-prim . %ffi-open) (bC5402 core-prim . null-terminated-utf8->string) (bC5401 core-prim . null-terminated-bytevector->string) (bC5400 core-prim . %fork) (bC53ff core-prim . %pipe) (bC53fe core-prim . p) (bC53fd core-prim . open-output-string) (bC53fc core-prim . get-output-string) (bC53fb core-prim . file-stat-ctime) (bC53fa core-prim . file-stat-atime) (bC53f9 core-prim . file-stat-mtime) (bC53f8 core-prim . file-size-in-bytes) (bC53f7 core-prim . file-writable?) (bC53f6 core-prim . file-executable?) (bC53f5 core-prim . file-readable?) (bC53f4 core-prim . file-regular?) (bC53f3 core-prim . file-symbolic-link?) (bC53f2 core-prim . file-directory?) (bC53f1 core-prim . create-symbolic-link) (bC53f0 core-prim . rename-file) (bC53ef core-prim . delete-directory) (bC53ee core-prim . create-directory) (bC53ed core-prim . create-mosh-cache-dir) (bC53ec core-prim . get-environment-variables) (bC53eb core-prim . current-exception-handler) (bC53ea core-prim . get-environment-variable) (bC53e9 core-prim . join-wraps) (bC53e8 core-prim . id->real-label) (bC53e7 core-prim . same-marks?) (bC53e6 core-prim . same-marks*?) (bC53e5 core-prim . get-timeofday) (bC53e4 core-prim . get-command-line) (bC53e3 core-prim . sys-display) (bC53e2 core-prim . whereis) (bC53e1 core-prim . register) (bC53e0 core-prim . vm-join!) (bC53df core-prim . vm-set-value!) (bC53de core-prim . vm?) (bC53dd core-prim . main-vm?) (bC53dc core-prim . vm-eval) (bC53db core-prim . vm-self) (bC53da core-prim . vm-start!) (bC53d9 core-prim . make-vm) (bC53d8 core-prim . mutex-try-lock!) (bC53d7 core-prim . mutex-unlock!) (bC53d6 core-prim . mutex-lock!) (bC53d5 core-prim . mutex?) (bC53d4 core-prim . make-mutex) (bC53d3 core-prim . condition-variable-notify-all!) (bC53d2 core-prim . condition-variable-notify!) (bC53d1 core-prim . condition-variable-wait!) (bC53d0 core-prim . make-condition-variable) (bC53cf core-prim . mosh-executable-path) (bC53ce core-prim . make-file-options) (bC53cd core-prim . source-info) (bC53cc core-prim . make-compiler-instruction) (bC53cb core-prim . make-instruction) (bC53ca core-prim . set-source-info!) (bC53c9 core-prim . bignum?) (bC53c8 core-prim . fast-equal?) (bC53c7 core-prim . fasl-read) (bC53c6 core-prim . fasl-write) (bC53c5 core-prim . time-usage) (bC53c4 core-prim . os-constant) (bC53c3 core-prim . disasm) (bC28e0 core-prim . make-parameter) (bC53c2 core-prim . socket-port) (bC53c1 core-prim . socket-shutdown) (bC53c0 core-prim . socket-close) (bC53bf core-prim . socket-send) (bC53be core-prim . socket-recv!) (bC53bd core-prim . socket-recv) (bC53bc core-prim . make-server-socket) (bC53bb core-prim . make-client-socket) (bC53ba core-prim . socket-accept) (bC53b9 core-prim . socket?) (bC53b8 core-prim . string-upcase) (bC53b7 core-prim . string-titlecase) (bC53b6 core-prim . string-normalize-nfkd) (bC53b5 core-prim . string-normalize-nfkc) (bC53b4 core-prim . string-normalize-nfd) (bC53b3 core-prim . string-normalize-nfc) (bC53b2 core-prim . string-foldcase) (bC53b1 core-prim . string-downcase) (bC53b0 core-prim . string-ci>?) (bC53af core-prim . string-ci>=?) (bC53ae core-prim . string-ci=?) (bC53ad core-prim . string-ci<?) (bC53ac core-prim . string-ci<=?) (bC53ab core-prim . char-whitespace?) (bC53aa core-prim . char-upper-case?) (bC53a9 core-prim . char-title-case?) (bC53a8 core-prim . char-numeric?) (bC53a7 core-prim . char-lower-case?) (bC53a6 core-prim . char-general-category) (bC53a5 core-prim . char-upcase) (bC53a4 core-prim . char-titlecase) (bC53a3 core-prim . char-foldcase) (bC53a2 core-prim . char-downcase) (bC53a1 core-prim . char-ci>?) (bC53a0 core-prim . char-ci>=?) (bC539f core-prim . char-ci=?) (bC539e core-prim . char-ci<?) (bC539d core-prim . char-ci<=?) (bC539c core-prim . char-alphabetic?) (bC2ee4 core-prim . make-variable-transformer) (bC319b core-prim . identifier?) (bC3187 core-prim . generate-temporaries) (bC3189 core-prim . free-identifier=?) (bC319f core-prim . syntax->datum) (bC319d core-prim . datum->syntax) (bC318b core-prim . bound-identifier=?) (bC539b core-prim . record-type-descriptor?) (bC539a core-prim . record-predicate) (bC5399 core-prim . record-mutator) (bC5398 core-prim . record-constructor) (bC5397 core-prim . record-accessor) (bC5396 core-prim . make-record-type-descriptor) (bC5395 core-prim . make-record-constructor-descriptor) (bC5394 core-prim . record?) (bC5393 core-prim . record-type-uid) (bC5392 core-prim . record-type-sealed?) (bC5391 core-prim . record-type-parent) (bC5390 core-prim . record-type-opaque?) (bC538f core-prim . record-type-name) (bC538e core-prim . record-type-generative?) (bC538d core-prim . record-type-field-names) (bC538c core-prim . record-rtd) (bC538b core-prim . record-field-mutable?) (bC538a core-prim . delete-file) (bC5389 core-prim . file-exists?) (bC5388 core-prim . vector-sort!) (bC5387 core-prim . vector-sort) (bC5386 core-prim . list-sort) (bC5385 core-prim . symbol-hash) (bC5384 core-prim . string-ci-hash) (bC5383 core-prim . string-hash) (bC5382 core-prim . equal-hash) (bC5381 core-prim . hashtable-equivalence-function) (bC5380 core-prim . make-hashtable) (bC537f core-prim . hashtable-hash-function) (bC537e core-prim . make-eqv-hashtable) (bC537d core-prim . make-eq-hashtable) (bC537c core-prim . hashtable?) (bC537b core-prim . hashtable-update!) (bC537a core-prim . hashtable-size) (bC5379 core-prim . hashtable-set!) (bC5378 core-prim . hashtable-ref) (bC5377 core-prim . hashtable-mutable?) (bC5376 core-prim . hashtable-keys) (bC5375 core-prim . hashtable-entries) (bC5374 core-prim . hashtable-delete!) (bC5373 core-prim . hashtable-copy) (bC5372 core-prim . hashtable-contains?) (bC5371 core-prim . hashtable-clear!) (bC5370 core-prim . call-with-output-file) (bC536f core-prim . call-with-input-file) (bC536e core-prim . write-char) (bC536d core-prim . write) (bC536c core-prim . with-output-to-file) (bC536b core-prim . with-input-from-file) (bC536a core-prim . read-char) (bC5369 core-prim . read) (bC5368 core-prim . peek-char) (bC5367 core-prim . open-output-file) (bC5366 core-prim . open-input-file) (bC5365 core-prim . newline) (bC5364 core-prim . display) (bC5363 core-prim . close-output-port) (bC5362 core-prim . close-input-port) (bC5361 core-prim . eof-object?) (bC5360 core-prim . eof-object) (bC535f core-prim . current-error-port) (bC535e core-prim . current-output-port) (bC535d core-prim . current-input-port) (bC535c core-prim . output-port?) (bC535b core-prim . input-port?) (bC535a core-prim . utf-8-codec) (bC5359 core-prim . utf-16-codec) (bC5358 core-prim . transcoder-error-handling-mode) (bC5357 core-prim . transcoder-eol-style) (bC5356 core-prim . transcoder-codec) (bC5355 core-prim . transcoded-port) (bC5354 core-prim . textual-port?) (bC5353 core-prim . string->bytevector) (bC5352 core-prim . standard-output-port) (bC5351 core-prim . standard-input-port) (bC5350 core-prim . standard-error-port) (bC534f core-prim . set-port-position!) (bC534e core-prim . put-u8) (bC534d core-prim . put-string) (bC534c core-prim . put-datum) (bC534b core-prim . put-char) (bC534a core-prim . put-bytevector) (bC5349 core-prim . port?) (bC5348 core-prim . port-transcoder) (bC5347 core-prim . port-position) (bC5346 core-prim . port-has-set-port-position!?) (bC5345 core-prim . port-has-port-position?) (bC5344 core-prim . port-eof?) (bC5343 core-prim . output-port-buffer-mode) (bC5342 core-prim . open-string-output-port) (bC5341 core-prim . open-string-input-port) (bC5340 core-prim . open-file-output-port) (bC533f core-prim . open-file-input/output-port) (bC533e core-prim . open-file-input-port) (bC533d core-prim . open-bytevector-output-port) (bC533c core-prim . open-bytevector-input-port) (bC533b core-prim . native-transcoder) (bC533a core-prim . native-eol-style) (bC5339 core-prim . make-transcoder) (bC5338 core-prim . latin-1-codec) (bC4dc3 core-prim . make-i/o-write-error) (bC4dae core-prim . make-i/o-read-error) (bC4e64 core-prim . make-i/o-port-error) (bC4dda core-prim . make-i/o-invalid-position-error) (bC4df5 core-prim . make-i/o-filename-error) (bC4e0e core-prim . make-i/o-file-protection-error) (bC4e23 core-prim . make-i/o-file-is-read-only-error) (bC4e4d core-prim . make-i/o-file-does-not-exist-error) (bC4e38 core-prim . make-i/o-file-already-exists-error) (bC4d99 core-prim . make-i/o-error) (bC4e94 core-prim . make-i/o-encoding-error) (bC4e7d core-prim . make-i/o-decoding-error) (bC5337 core-prim . make-custom-textual-output-port) (bC5336 core-prim . make-custom-textual-input/output-port) (bC5335 core-prim . make-custom-textual-input-port) (bC5334 core-prim . make-custom-binary-output-port) (bC5333 core-prim . make-custom-binary-input/output-port) (bC5332 core-prim . make-custom-binary-input-port) (bC5331 core-prim . make-bytevector) (bC5330 core-prim . lookahead-u8) (bC532f core-prim . lookahead-char) (bC4dc5 core-prim . i/o-write-error?) (bC4db0 core-prim . i/o-read-error?) (bC4e68 core-prim . i/o-port-error?) (bC4dde core-prim . i/o-invalid-position-error?) (bC4df9 core-prim . i/o-filename-error?) (bC4e10 core-prim . i/o-file-protection-error?) (bC4e25 core-prim . i/o-file-is-read-only-error?) (bC4e4f core-prim . i/o-file-does-not-exist-error?) (bC4e3a core-prim . i/o-file-already-exists-error?) (bC4d9b core-prim . i/o-error?) (bC4de0 core-prim . i/o-error-position) (bC4e6a core-prim . i/o-error-port) (bC4dfb core-prim . i/o-error-filename) (bC4e98 core-prim . i/o-encoding-error?) (bC4e9a core-prim . i/o-encoding-error-char) (bC4e7f core-prim . i/o-decoding-error?) (bC532e core-prim . get-u8) (bC532d core-prim . get-string-n!) (bC532c core-prim . get-string-n) (bC532b core-prim . get-string-all) (bC532a core-prim . get-line) (bC5329 core-prim . get-datum) (bC5328 core-prim . get-char) (bC5327 core-prim . get-bytevector-some) (bC5326 core-prim . get-bytevector-n!) (bC5325 core-prim . get-bytevector-n) (bC5324 core-prim . get-bytevector-all) (bC5323 core-prim . flush-output-port) (bC5322 core-prim . close-port) (bC3175 core-prim . scheme-report-environment) (bC5321 core-prim . quotient) (bC3173 core-prim . null-environment) (bC5320 core-prim . remainder) (bC531f core-prim . modulo) (bC531e core-prim . inexact->exact) (bC531d core-prim . force) (bC531c core-prim . exact->inexact) (bC531b core-prim . make-promise) (bC531a core-prim . exit) (bC4fd3 core-prim . command-line) (bC5319 core-prim . string-fill!) (bC5318 core-prim . string-set!) (bC5317 core-prim . set-cdr!) (bC5316 core-prim . set-car!) (bC5315 core-prim . remove) (bC5314 core-prim . remv) (bC5313 core-prim . remp) (bC5312 core-prim . remq) (bC5311 core-prim . partition) (bC5310 core-prim . memv) (bC530f core-prim . memq) (bC530e core-prim . memp) (bC530d core-prim . member) (bC530c core-prim . exists) (bC530b core-prim . for-all) (bC530a core-prim . fold-right) (bC5309 core-prim . fold-left) (bC5308 core-prim . find) (bC5307 core-prim . filter) (bC5306 core-prim . cons*) (bC5305 core-prim . assv) (bC5304 core-prim . assq) (bC5303 core-prim . assp) (bC5302 core-prim . assoc) (bC5301 core-prim . call-with-string-output-port) (bC5300 core-prim . call-with-port) (bC52ff core-prim . call-with-bytevector-output-port) (bC52fe core-prim . bytevector->string) (bC52fd core-prim . buffer-mode?) (bC52fc core-prim . binary-port?) (bC52fb core-prim . with-exception-handler) (bC52fa core-prim . raise-continuable) (bC52f9 core-prim . raise) (bC3179 core-prim . eval) (bC3171 core-prim . environment) (bC52f8 core-prim . make-enumeration) (bC52f7 core-prim . enum-set=?) (bC52f6 core-prim . enum-set-universe) (bC52f5 core-prim . enum-set-union) (bC52f4 core-prim . enum-set-subset?) (bC52f3 core-prim . enum-set-projection) (bC52f2 core-prim . enum-set-member?) (bC52f1 core-prim . enum-set-intersection) (bC52f0 core-prim . enum-set-indexer) (bC52ef core-prim . enum-set-difference) (bC52ee core-prim . enum-set-constructor) (bC52ed core-prim . enum-set-complement) (bC52ec core-prim . enum-set->list) (bC4d0f core-prim . who-condition?) (bC4c87 core-prim . warning?) (bC4cc6 core-prim . violation?) (bC4d86 core-prim . undefined-violation?) (bC4d6d core-prim . syntax-violation?) (bC4d71 core-prim . syntax-violation-subform) (bC4d6f core-prim . syntax-violation-form) (bC3199 core-prim . syntax-violation) (bC52eb core-prim . simple-conditions) (bC4c9c core-prim . serious-condition?) (bC4d26 core-prim . non-continuable-violation?) (bC4c70 core-prim . message-condition?) (bC4d0b core-prim . make-who-condition) (bC4c85 core-prim . make-warning) (bC4cc4 core-prim . make-violation) (bC4d84 core-prim . make-undefined-violation) (bC4d67 core-prim . make-syntax-violation) (bC4c9a core-prim . make-serious-condition) (bC4d24 core-prim . make-non-continuable-violation) (bC4c6c core-prim . make-message-condition) (bC4d4e core-prim . make-lexical-violation) (bC4cf0 core-prim . make-irritants-condition) (bC4d39 core-prim . make-implementation-restriction-violation) (bC4caf core-prim . make-error) (bC4cd9 core-prim . make-assertion-violation) (bC4d50 core-prim . lexical-violation?) (bC4cf4 core-prim . irritants-condition?) (bC4d3b core-prim . implementation-restriction-violation?) (bC4cb1 core-prim . error?) (bC4d11 core-prim . condition-who) (bC52ea core-prim . condition-predicate) (bC4c72 core-prim . condition-message) (bC4cf6 core-prim . condition-irritants) (bC52e9 core-prim . condition-accessor) (bC52e8 core-prim . condition) (bC4cdb core-prim . assertion-violation?) (bC52e7 core-prim . condition?) (bC52e6 core-prim . utf32->string) (bC52e5 core-prim . utf16->string) (bC52e4 core-prim . utf8->string) (bC52e3 core-prim . uint-list->bytevector) (bC52e2 core-prim . u8-list->bytevector) (bC52e1 core-prim . string->utf8) (bC52e0 core-prim . string->utf32) (bC52df core-prim . string->utf16) (bC52de core-prim . sint-list->bytevector) (bC52dd core-prim . native-endianness) (bC52dc core-prim . bytevector?) (bC52db core-prim . bytevector=?) (bC52da core-prim . bytevector-uint-set!) (bC52d9 core-prim . bytevector-uint-ref) (bC52d8 core-prim . bytevector-u8-set!) (bC52d7 core-prim . bytevector-u8-ref) (bC52d6 core-prim . bytevector-u64-set!) (bC52d5 core-prim . bytevector-u64-ref) (bC52d4 core-prim . bytevector-u64-native-set!) (bC52d3 core-prim . bytevector-u64-native-ref) (bC52d2 core-prim . bytevector-u32-set!) (bC52d1 core-prim . bytevector-u32-ref) (bC52d0 core-prim . bytevector-u32-native-set!) (bC52cf core-prim . bytevector-u32-native-ref) (bC52ce core-prim . bytevector-u16-set!) (bC52cd core-prim . bytevector-u16-ref) (bC52cc core-prim . bytevector-u16-native-set!) (bC52cb core-prim . bytevector-u16-native-ref) (bC52ca core-prim . bytevector-sint-set!) (bC52c9 core-prim . bytevector-sint-ref) (bC52c8 core-prim . bytevector-s8-set!) (bC52c7 core-prim . bytevector-s8-ref) (bC52c6 core-prim . bytevector-s64-set!) (bC52c5 core-prim . bytevector-s64-ref) (bC52c4 core-prim . bytevector-s64-native-set!) (bC52c3 core-prim . bytevector-s64-native-ref) (bC52c2 core-prim . bytevector-s32-set!) (bC52c1 core-prim . bytevector-s32-ref) (bC52c0 core-prim . bytevector-s32-native-set!) (bC52bf core-prim . bytevector-s32-native-ref) (bC52be core-prim . bytevector-s16-set!) (bC52bd core-prim . bytevector-s16-ref) (bC52bc core-prim . bytevector-s16-native-set!) (bC52bb core-prim . bytevector-s16-native-ref) (bC52ba core-prim . bytevector-length) (bC52b9 core-prim . bytevector-ieee-single-ref) (bC52b8 core-prim . bytevector-ieee-single-set!) (bC52b7 core-prim . bytevector-ieee-single-native-set!) (bC52b6 core-prim . bytevector-ieee-single-native-ref) (bC52b5 core-prim . bytevector-ieee-double-set!) (bC52b4 core-prim . bytevector-ieee-double-ref) (bC52b3 core-prim . bytevector-ieee-double-native-set!) (bC52b2 core-prim . bytevector-ieee-double-native-ref) (bC52b1 core-prim . bytevector-fill!) (bC52b0 core-prim . bytevector-copy!) (bC52af core-prim . bytevector-copy) (bC52ae core-prim . bytevector->uint-list) (bC52ad core-prim . bytevector->u8-list) (bC52ac core-prim . bytevector->sint-list) (bC4ec4 core-prim . no-nans-violation?) (bC4eaf core-prim . no-infinities-violation?) (bC4ec2 core-prim . make-no-nans-violation) (bC4ead core-prim . make-no-infinities-violation) (bC52ab core-prim . real->flonum) (bC52aa core-prim . flzero?) (bC52a9 core-prim . fltruncate) (bC52a8 core-prim . fltan) (bC52a7 core-prim . flsqrt) (bC52a6 core-prim . flsin) (bC52a5 core-prim . flround) (bC52a4 core-prim . flpositive?) (bC52a3 core-prim . flonum?) (bC52a2 core-prim . flodd?) (bC52a1 core-prim . flnumerator) (bC52a0 core-prim . flnegative?) (bC529f core-prim . flnan?) (bC529e core-prim . flmod0) (bC529d core-prim . flmod) (bC529c core-prim . flmin) (bC529b core-prim . flmax) (bC529a core-prim . fllog) (bC5299 core-prim . flinteger?) (bC5298 core-prim . flinfinite?) (bC5297 core-prim . flfloor) (bC5296 core-prim . flfinite?) (bC5295 core-prim . flexpt) (bC5294 core-prim . flexp) (bC5293 core-prim . fleven?) (bC5292 core-prim . fldiv0-and-mod0) (bC5291 core-prim . fldiv0) (bC5290 core-prim . fldiv-and-mod) (bC528f core-prim . fldiv) (bC528e core-prim . fldenominator) (bC528d core-prim . flcos) (bC528c core-prim . flceiling) (bC528b core-prim . flatan) (bC528a core-prim . flasin) (bC5289 core-prim . flacos) (bC5288 core-prim . flabs) (bC5287 core-prim . fl>?) (bC5286 core-prim . fl>=?) (bC5285 core-prim . fl=?) (bC5284 core-prim . fl<?) (bC5283 core-prim . fl<=?) (bC5282 core-prim . fl/) (bC5281 core-prim . fl-) (bC5280 core-prim . fl+) (bC527f core-prim . fl*) (bC527e core-prim . fixnum->flonum) (bC527d core-prim . fxzero?) (bC527c core-prim . fxxor) (bC527b core-prim . fxrotate-bit-field) (bC527a core-prim . fxreverse-bit-field) (bC5279 core-prim . fxpositive?) (bC5278 core-prim . fxodd?) (bC5277 core-prim . fxnot) (bC5276 core-prim . fxnegative?) (bC5275 core-prim . fxmod0) (bC5274 core-prim . fxmod) (bC5273 core-prim . fxmin) (bC5272 core-prim . fxmax) (bC5271 core-prim . fxlength) (bC5270 core-prim . fxior) (bC526f core-prim . fxif) (bC526e core-prim . fxfirst-bit-set) (bC526d core-prim . fxeven?) (bC526c core-prim . fxdiv0-and-mod0) (bC526b core-prim . fxdiv0) (bC526a core-prim . fxdiv-and-mod) (bC5269 core-prim . fxdiv) (bC5268 core-prim . fxcopy-bit-field) (bC5267 core-prim . fxcopy-bit) (bC5266 core-prim . fxbit-set?) (bC5265 core-prim . fxbit-field) (bC5264 core-prim . fxbit-count) (bC5263 core-prim . fxarithmetic-shift-right) (bC5262 core-prim . fxarithmetic-shift-left) (bC5261 core-prim . fxarithmetic-shift) (bC5260 core-prim . fxand) (bC525f core-prim . fx>?) (bC525e core-prim . fx>=?) (bC525d core-prim . fx=?) (bC525c core-prim . fx<?) (bC525b core-prim . fx<=?) (bC525a core-prim . fx-/carry) (bC5259 core-prim . fx-) (bC5258 core-prim . fx+/carry) (bC5257 core-prim . fx+) (bC5256 core-prim . fx*/carry) (bC5255 core-prim . fx*) (bC5254 core-prim . greatest-fixnum) (bC5253 core-prim . least-fixnum) (bC5252 core-prim . fixnum-width) (bC5251 core-prim . fixnum?) (bC5250 core-prim . bitwise-rotate-bit-field) (bC524f core-prim . bitwise-reverse-bit-field) (bC524e core-prim . bitwise-length) (bC524d core-prim . bitwise-if) (bC524c core-prim . bitwise-first-bit-set) (bC524b core-prim . bitwise-copy-bit-field) (bC524a core-prim . bitwise-copy-bit) (bC5249 core-prim . bitwise-bit-set?) (bC5248 core-prim . bitwise-bit-field) (bC5247 core-prim . bitwise-bit-count) (bC5246 core-prim . bitwise-xor) (bC5245 core-prim . bitwise-ior) (bC5244 core-prim . bitwise-and) (bC5243 core-prim . bitwise-not) (bC5242 core-prim . bitwise-arithmetic-shift-right) (bC5241 core-prim . bitwise-arithmetic-shift-left) (bC5240 core-prim . bitwise-arithmetic-shift) (bC523f core-prim . zero?) (bC523e core-prim . vector?) (bC523d core-prim . vector-set!) (bC523c core-prim . vector-ref) (bC523b core-prim . vector-map) (bC523a core-prim . vector-length) (bC5239 core-prim . vector-for-each) (bC5238 core-prim . vector-fill!) (bC5237 core-prim . vector->list) (bC5236 core-prim . vector) (bC5235 core-prim . values) (bC5234 core-prim . truncate) (bC5233 core-prim . tan) (bC5232 core-prim . symbol?) (bC5231 core-prim . symbol=?) (bC5230 core-prim . symbol->string) (bC522f core-prim . substring) (bC522e core-prim . string?) (bC522d core-prim . string>?) (bC522c core-prim . string>=?) (bC522b core-prim . string=?) (bC522a core-prim . string<?) (bC5229 core-prim . string<=?) (bC5228 core-prim . string-ref) (bC5227 core-prim . string-length) (bC5226 core-prim . string-for-each) (bC5225 core-prim . string-copy) (bC5224 core-prim . string-append) (bC5223 core-prim . string->symbol) (bC5222 core-prim . string->number) (bC5221 core-prim . string->list) (bC5220 core-prim . string) (bC521f core-prim . sqrt) (bC521e core-prim . sin) (bC521d core-prim . round) (bC521c core-prim . reverse) (bC521b core-prim . real?) (bC521a core-prim . real-valued?) (bC5219 core-prim . real-part) (bC5218 core-prim . rationalize) (bC5217 core-prim . rational?) (bC5216 core-prim . rational-valued?) (bC5215 core-prim . procedure?) (bC5214 core-prim . positive?) (bC5213 core-prim . pair?) (bC5212 core-prim . odd?) (bC5211 core-prim . numerator) (bC5210 core-prim . number?) (bC520f core-prim . number->string) (bC520e core-prim . null?) (bC520d core-prim . not) (bC520c core-prim . negative?) (bC520b core-prim . nan?) (bC520a core-prim . min) (bC5209 core-prim . max) (bC5208 core-prim . map) (bC5207 core-prim . make-vector) (bC5206 core-prim . make-string) (bC5205 core-prim . make-rectangular) (bC5204 core-prim . make-polar) (bC5203 core-prim . magnitude) (bC5202 core-prim . log) (bC5201 core-prim . list?) (bC5200 core-prim . list-tail) (bC51ff core-prim . list-ref) (bC51fe core-prim . list->vector) (bC51fd core-prim . list->string) (bC51fc core-prim . list) (bC51fb core-prim . length) (bC51fa core-prim . lcm) (bC51f9 core-prim . integer?) (bC51f8 core-prim . integer-valued?) (bC51f7 core-prim . integer->char) (bC51f6 core-prim . infinite?) (bC51f5 core-prim . inexact?) (bC51f4 core-prim . inexact) (bC51f3 core-prim . imag-part) (bC51f2 core-prim . gcd) (bC51f1 core-prim . for-each) (bC51f0 core-prim . floor) (bC51ef core-prim . finite?) (bC51ee core-prim . expt) (bC51ed core-prim . exp) (bC51ec core-prim . exact?) (bC51eb core-prim . exact-integer-sqrt) (bC51ea core-prim . exact) (bC51e9 core-prim . even?) (bC51e8 core-prim . error) (bC51e7 core-prim . eqv?) (bC51e6 core-prim . equal?) (bC51e5 core-prim . eq?) (bC51e4 core-prim . dynamic-wind) (bC51e3 core-prim . div0-and-mod0) (bC51e2 core-prim . mod0) (bC51e1 core-prim . div0) (bC51e0 core-prim . div-and-mod) (bC51df core-prim . mod) (bC51de core-prim . div) (bC51dd core-prim . denominator) (bC51dc core-prim . cos) (bC51db core-prim . cons) (bC51da core-prim . complex?) (bC51d9 core-prim . char?) (bC51d8 core-prim . char>?) (bC51d7 core-prim . char>=?) (bC51d6 core-prim . char=?) (bC51d5 core-prim . char<?) (bC51d4 core-prim . char<=?) (bC51d3 core-prim . char->integer) (bC51d2 core-prim . ceiling) (bC51d1 core-prim . call-with-values) (bC51d0 core-prim . call/cc) (bC51cf core-prim . call-with-current-continuation) (bC51ce core-prim . cddddr) (bC51cd core-prim . cdddar) (bC51cc core-prim . cddadr) (bC51cb core-prim . cddaar) (bC51ca core-prim . cdaddr) (bC51c9 core-prim . cdadar) (bC51c8 core-prim . cdaadr) (bC51c7 core-prim . cdaaar) (bC51c6 core-prim . cadddr) (bC51c5 core-prim . caddar) (bC51c4 core-prim . cadadr) (bC51c3 core-prim . cadaar) (bC51c2 core-prim . caaddr) (bC51c1 core-prim . caadar) (bC51c0 core-prim . caaadr) (bC51bf core-prim . caaaar) (bC51be core-prim . cdddr) (bC51bd core-prim . cddar) (bC51bc core-prim . cdadr) (bC51bb core-prim . cdaar) (bC51ba core-prim . caddr) (bC51b9 core-prim . cadar) (bC51b8 core-prim . caadr) (bC51b7 core-prim . caaar) (bC51b6 core-prim . cddr) (bC51b5 core-prim . cdar) (bC51b4 core-prim . cadr) (bC51b3 core-prim . caar) (bC51b2 core-prim . cdr) (bC51b1 core-prim . car) (bC51b0 core-prim . boolean?) (bC51af core-prim . boolean=?) (bC51ae core-prim . atan) (bC51ad core-prim . assertion-violation) (bC3193 core-prim . assertion-error) (bC51ac core-prim . asin) (bC51ab core-prim . apply) (bC51aa core-prim . append) (bC51a9 core-prim . angle) (bC51a8 core-prim . acos) (bC51a7 core-prim . abs) (bC51a6 core-prim . /) (bC51a5 core-prim . *) (bC51a4 core-prim . -) (bC51a3 core-prim . +) (bC51a2 core-prim . >=) (bC51a1 core-prim . >) (bC51a0 core-prim . =) (bC519f core-prim . <=) (bC519e core-prim . <) (bC519d core-prim . library) (bC519c $core-rtd &no-nans-rtd &no-nans-rcd) (bC519b $core-rtd &no-infinities-rtd &no-infinities-rcd) (bC519a $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (bC5199 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (bC5198 $core-rtd &i/o-port-rtd &i/o-port-rcd) (bC5197 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (bC5196 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (bC5195 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (bC5194 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (bC5193 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (bC5192 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (bC5191 $core-rtd &i/o-write-rtd &i/o-write-rcd) (bC5190 $core-rtd &i/o-read-rtd &i/o-read-rcd) (bC518f $core-rtd &i/o-rtd &i/o-rcd) (bC518e $core-rtd &undefined-rtd &undefined-rcd) (bC518d $core-rtd &syntax-rtd &syntax-rcd) (bC518c $core-rtd &lexical-rtd &lexical-rcd) (bC518b $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (bC518a $core-rtd &non-continuable-rtd &non-continuable-rcd) (bC5189 $core-rtd &who-rtd &who-rcd) (bC5188 $core-rtd &irritants-rtd &irritants-rcd) (bC5187 $core-rtd &assertion-rtd &assertion-rcd) (bC5186 $core-rtd &violation-rtd &violation-rcd) (bC5185 $core-rtd &error-rtd &error-rcd) (bC5184 $core-rtd &serious-rtd &serious-rcd) (bC5183 $core-rtd &warning-rtd &warning-rcd) (bC5182 $core-rtd &message-rtd &message-rcd) (bC5181 $core-rtd &condition-rtd &condition-rcd) (bC5180 macro . define-condition-type) (bC517f macro . define-enumeration) (bC517e macro . define-record-type) (bC517d macro . parent-rtd) (bC517c macro . nongenerative) (bC517b macro . opaque) (bC517a macro . sealed) (bC5179 macro . protocol) (bC5178 macro . parent) (bC5177 macro . immutable) (bC5176 macro . mutable) (bC5175 macro . fields) (bC5174 macro . error-handling-mode) (bC5173 macro . file-options) (bC5172 macro . buffer-mode) (bC5171 macro . eol-style) (bC5170 macro . guard) (bC516f macro . trace-define) (bC516e macro . trace-lambda) (bC516d macro . unsyntax-splicing) (bC516c macro . unsyntax) (bC516b macro . unquote-splicing) (bC516a macro . unquote) (bC5169 macro . _) (bC5168 macro . else) (bC5167 macro . =>) (bC5166 macro . ...) (bC5165 macro . assert) (bC5164 macro . endianness) (bC5163 macro . delay) (bC5162 macro . time) (bC5161 macro . do) (bC5160 macro . cond) (bC515f macro . let*) (bC515e macro . let*-values) (bC515d macro . let-values) (bC515c macro . identifier-syntax) (bC515b macro . with-syntax) (bC515a macro . quasisyntax) (bC5159 macro . quasiquote) (bC5158 macro . syntax-rules) (bC5157 macro . include) (bC5156 macro . define-struct) (bC5155 core-macro . record-constructor-descriptor) (bC5154 core-macro . record-type-descriptor) (bC5153 macro . case) (bC5152 macro . parameterize) (bC5151 macro . unless) (bC5150 macro . when) (bC514f core-macro . or) (bC514e core-macro . and) (bC514d core-macro . if) (bC514c core-macro . let) (bC514b core-macro . letrec*) (bC514a core-macro . letrec) (bC5149 core-macro . type-descriptor) (bC5148 core-macro . case-lambda) (bC5147 core-macro . lambda) (bC5146 core-macro . syntax) (bC5145 core-macro . syntax-case) (bC5144 core-macro . quote) (bC5143 core-macro . foreign-call) (bC5142 letrec-syntax) (bC5141 let-syntax) (bC5140 set!) (bC513f import) (bC513e begin) (bC513d module) (bC513c define-syntax) (bC513b define)) values values '#f '#f '#f '#f) (bC2ccd@bC2b19@install-library 'bC5482 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . bC5461) (eval-core . bC5460) (set-symbol-value! . bC545f) (symbol-value . bC545e) (gensym . bC545d) (void . bC545c)) '() values values '#f '#f '#f '#f) (bC2ccd@bC2b19@install-library 'bC5483 '(mosh) '() '() '() '() '((set-symbol-value! . bC545f) (symbol-value . bC545e) (regexp? . bC545a) (read-line . bC5459) (ungensym . bC5457) (alist->eq-hash-table . bC5456) (assoc-ref . bC5455) (print . bC5454) (format . bC5453) (host-os . bC5452) (library-path . bC2af8) (standard-library-path . bC5451) (file-newer? . bC5450) (stat-mtime . bC544f) (digit->integer . bC544b) (call-with-string-input-port . bC544a) (call-with-string-io . bC5449) (string-split . bC5448) (bytevector-for-each . bC5447) (string->regexp . bC5446) (rxmatch . bC5445) (regexp-replace-all . bC5444) (hashtable-for-each . bC5443) (set-current-directory! . bC543e) (expand-path . bC543d) (current-directory . bC543c) (p . bC53fe) (get-timeofday . bC53e5) (get-command-line . bC53e4) (sys-display . bC53e3) (whereis . bC53e2) (register . bC53e1) (vm-join! . bC53e0) (vm-set-value! . bC53df) (vm? . bC53de) (main-vm? . bC53dd) (vm-eval . bC53dc) (vm-self . bC53db) (vm-start! . bC53da) (make-vm . bC53d9) (mutex-try-lock! . bC53d8) (mutex-unlock! . bC53d7) (mutex-lock! . bC53d6) (mutex? . bC53d5) (make-mutex . bC53d4) (condition-variable-notify-all! . bC53d3) (condition-variable-notify! . bC53d2) (condition-variable-wait! . bC53d1) (make-condition-variable . bC53d0) (mosh-executable-path . bC53cf) (make-file-options . bC53ce) (source-info . bC53cd) (make-compiler-instruction . bC53cc) (make-instruction . bC53cb) (set-source-info! . bC53ca) (bignum? . bC53c9) (fast-equal? . bC53c8) (fasl-read . bC53c7) (fasl-write . bC53c6) (time-usage . bC53c5) (os-constant . bC53c4) (time . bC5162) (include . bC5157)) '() values values '#f '#f '#f '#f) (bC2ccd@bC2b19@install-library 'bC5484 '(system) '() '() '() '() '((gensym-prefix-set! . bC5458) (write-to-file . bC544e) (file->list . bC544d) (file->string . bC544c) (mosh-cache-dir . bC28e2) (call-process . bC5442) (local-tz-offset . bC5441) (microseconds . bC5440) (directory-list . bC543f) (expand-path . bC543d) (%spawn . bC543b) (%waitpid . bC543a) (simple-struct-name . bC5439) (simple-struct-set! . bC5438) (simple-struct-ref . bC5437) (make-simple-struct . bC5436) (simple-struct? . bC5435) (pointer-ref-c-int64 . bC5434) (pointer-ref-c-int32 . bC5433) (pointer-ref-c-int16 . bC5432) (pointer-ref-c-int8 . bC5431) (pointer-ref-c-uint64 . bC5430) (pointer-ref-c-uint32 . bC542f) (pointer-ref-c-uint16 . bC542e) (pointer-ref-c-uint8 . bC542d) (pointer-set-c-uint64! . bC542c) (pointer-set-c-uint32! . bC542b) (pointer-set-c-uint16! . bC542a) (pointer-set-c-uint8! . bC5429) (pointer-set-c-int64! . bC5428) (pointer-set-c-int32! . bC5427) (pointer-set-c-int16! . bC5426) (pointer-set-c-int8! . bC5425) (pointer-set-c-pointer! . bC5424) (pointer-set-c-double! . bC5423) (pointer-set-c-float! . bC5422) (pointer-set-c-long-long! . bC5421) (pointer-set-c-long! . bC5420) (pointer-set-c-int! . bC541f) (pointer-set-c-short! . bC541e) (pointer-set-c-char! . bC541d) (pointer-ref-c-pointer . bC541c) (pointer-ref-c-double . bC541b) (pointer-ref-c-float . bC541a) (pointer-ref-c-unsigned-long-long . bC5419) (pointer-ref-c-signed-long-long . bC5418) (pointer-ref-c-unsigned-long . bC5417) (pointer-ref-c-signed-long . bC5416) (pointer-ref-c-unsigned-int . bC5415) (pointer-ref-c-signed-int . bC5414) (pointer-ref-c-unsigned-short . bC5413) (pointer-ref-c-signed-short . bC5412) (pointer-ref-c-unsigned-char . bC5411) (pointer-ref-c-signed-char . bC5410) (pointer->integer . bC540f) (integer->pointer . bC540e) (pointer? . bC540d) (shared-errno . bC540c) (%ffi-free-c-callback-trampoline . bC540b) (%ffi-make-c-callback-trampoline . bC540a) (%ffi-free . bC5409) (%ffi-malloc . bC5408) (%ffi-supported? . bC5407) (%ffi-pointer->string . bC5406) (%ffi-call . bC5405) (%ffi-lookup . bC5404) (%ffi-open . bC5403) (null-terminated-utf8->string . bC5402) (null-terminated-bytevector->string . bC5401) (%fork . bC5400) (%pipe . bC53ff) (open-output-string . bC53fd) (get-output-string . bC53fc) (file-stat-ctime . bC53fb) (file-stat-atime . bC53fa) (file-stat-mtime . bC53f9) (file-size-in-bytes . bC53f8) (file-writable? . bC53f7) (file-executable? . bC53f6) (file-readable? . bC53f5) (file-regular? . bC53f4) (file-symbolic-link? . bC53f3) (file-directory? . bC53f2) (create-symbolic-link . bC53f1) (rename-file . bC53f0) (delete-directory . bC53ef) (create-directory . bC53ee) (create-mosh-cache-dir . bC53ed) (get-environment-variables . bC53ec) (current-exception-handler . bC53eb) (get-environment-variable . bC53ea) (join-wraps . bC53e9) (id->real-label . bC53e8) (same-marks? . bC53e7) (same-marks*? . bC53e6) (disasm . bC53c3) (make-parameter . bC28e0) (socket-port . bC53c2) (socket-shutdown . bC53c1) (socket-close . bC53c0) (socket-send . bC53bf) (socket-recv! . bC53be) (socket-recv . bC53bd) (make-server-socket . bC53bc) (make-client-socket . bC53bb) (socket-accept . bC53ba) (socket? . bC53b9) (parameterize . bC5152)) '() values values '#f '#f '#f '#f)))
(begin (set! bC4fbe@ref (unspecified)) (set! bC4fc0@x* (unspecified)) (set! bC4fc2@add-library-path! (unspecified)) (set! bC4fc4@parse-and-add-library-path (unspecified)) (set! bC4fc6@for-each-with-index (unspecified)) (set! bC4fc8@rpad (unspecified)) (set! bC4fca@condition-printer (unspecified)) (set! bC4fcc@record->field-alist (unspecified)) (set! bC4fce@map-with-index (unspecified)) (set! bC4fd0@repl (unspecified)) (set! bC4fd2@trace-printer (unspecified)) (set! bC4fd4@command-line (unspecified)) (set! bC4fd6@local-library-path (unspecified)) (set! bC4fd8@load/args (unspecified)) (set! bC4fda@load (unspecified)) (set! bC4fdc@ironscheme-build (unspecified)) (set! bC4fde@eval-top-level (unspecified)) (set! bC4fe0@compile-system-libraries (unspecified)) (set! bC4fe2@compile (unspecified)) (set! bC4fe4@compile->closure (unspecified)) (set! bC4fe6@pre-compile-r6rs-file (unspecified)) (set! bC4fe8@load-r6rs-top-level (unspecified)) (set! bC4fea@load-r6rs-top-level-sexp (unspecified)) (set! bC4fec@prefix-inc (unspecified)) (set! bC4fee@prefix-inc! (unspecified)) (set! bC4fbe@ref (lambda (bC5029@rtd bC502a@i bC502b@x) (let ((bC502f@val ((record-accessor bC5029@rtd bC502a@i) bC502b@x))) (if (symbol? bC502f@val) (ungensym bC502f@val) bC502f@val)))) (set! bC5121@bC4fbe@ref bC4fbe@ref) (set! bC4fc0@x* '()) (set! bC5122@bC4fc0@x* bC4fc0@x*) (set! bC4fc2@add-library-path! (lambda (bC5031@path) (bC2cbd@bC2af9@library-path (append (bC2cbd@bC2af9@library-path) (list bC5031@path))))) (set! bC5123@bC4fc2@add-library-path! bC4fc2@add-library-path!) (set! bC4fc4@parse-and-add-library-path (lambda (bC5033@paths bC5034@message) (letrec* ((bC5038@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((bC5039@t bC5033@paths)) (if bC5039@t ((lambda (bC503b@paths) (for-each (lambda (bC503d@path) (if (file-exists? bC503d@path) (bC4fc2@add-library-path! (expand-path bC503d@path)) (format (current-error-port) bC5034@message bC503d@path))) (string-split bC503b@paths bC5038@separator))) bC5039@t) (void)))))) (set! bC5124@bC4fc4@parse-and-add-library-path bC4fc4@parse-and-add-library-path) (set! bC4fc6@for-each-with-index (lambda (bC503f@proc bC5040@lst) (letrec ((bC5043@loop (lambda (bC5045@i bC5046@lst) (if (null? bC5046@lst) (if '#f '#f (void)) (begin (bC503f@proc bC5045@i (car bC5046@lst)) (bC5043@loop (+ bC5045@i '1) (cdr bC5046@lst))))))) (bC5043@loop '1 bC5040@lst)))) (set! bC5125@bC4fc6@for-each-with-index bC4fc6@for-each-with-index) (set! bC4fc8@rpad (lambda (bC5049@str bC504a@pad bC504b@n) (let ((bC504f@rest (- bC504b@n (string-length (format '"~a" bC5049@str))))) (let bC5055@loop ((bC5051@rest bC504f@rest) (bC5052@ret (format '"~a" bC5049@str))) (if (<= bC5051@rest '0) bC5052@ret (bC5055@loop (- bC5051@rest '1) (string-append bC5052@ret bC504a@pad))))))) (set! bC5126@bC4fc8@rpad bC4fc8@rpad) (set! bC4fca@condition-printer (lambda (bC5057@e bC5058@port) (letrec* ((bC505c@max-condition-len (apply max (map (lambda (bC506d@c) (string-length (symbol->string (record-type-name (record-rtd bC506d@c))))) (simple-conditions bC5057@e))))) (begin (display '" Condition components:\n" bC5058@port) (bC4fc6@for-each-with-index (lambda (bC505d@i bC505e@x) (let ((bC5061@rtd (record-rtd bC505e@x)) (bC5062@fields-alist (bC4fcc@record->field-alist bC505e@x))) (begin (format bC5058@port '" ~d. ~a" bC505d@i (bC4fc8@rpad (symbol->string (record-type-name bC5061@rtd)) '" " bC505c@max-condition-len)) (if (null? bC5062@fields-alist) (newline bC5058@port) (void)) (let bC5069@loop ((bC5065@first '#t) (bC5066@fields-alist bC5062@fields-alist)) (if (null? bC5066@fields-alist) '() (let ((bC506b@field (car bC5066@fields-alist))) (begin (if (not bC5065@first) (display (bC4fc8@rpad '"" '" " (+ '4 bC505c@max-condition-len)) bC5058@port) (void)) (display '"       " bC5058@port) (display (car bC506b@field) bC5058@port) (display '": " bC5058@port) (write (cdr bC506b@field) bC5058@port) (newline bC5058@port) (bC5069@loop '#f (cdr bC5066@fields-alist))))))))) (simple-conditions bC5057@e)))))) (set! bC5127@bC4fca@condition-printer bC4fca@condition-printer) (set! bC4fcc@record->field-alist (lambda (bC506f@r) (letrec* ((bC5072@ref (lambda (bC507d@rtd bC507e@i bC507f@x) (let ((bC5083@val ((record-accessor bC507d@rtd bC507e@i) bC507f@x))) (if (symbol? bC5083@val) (ungensym bC5083@val) bC5083@val))))) (let bC5077@loop ((bC5073@ret '()) (bC5074@rtd (record-rtd bC506f@r))) (if bC5074@rtd (bC5077@loop (append bC5073@ret (bC4fce@map-with-index (lambda (bC5079@i bC507a@field) (cons bC507a@field (bC5072@ref bC5074@rtd bC5079@i bC506f@r))) (vector->list (record-type-field-names bC5074@rtd)))) (record-type-parent bC5074@rtd)) bC5073@ret))))) (set! bC5128@bC4fcc@record->field-alist bC4fcc@record->field-alist) (set! bC4fce@map-with-index (lambda (bC5085@proc bC5086@lst) (let bC508f@loop ((bC5089@i '0) (bC508a@lst bC5086@lst) (bC508b@ret '())) (if (null? bC508a@lst) (reverse bC508b@ret) (bC508f@loop (+ bC5089@i '1) (cdr bC508a@lst) (cons (bC5085@proc bC5089@i (car bC508a@lst)) bC508b@ret)))))) (set! bC5129@bC4fce@map-with-index bC4fce@map-with-index) (set! bC4fd0@repl (lambda bC5091@x (letrec* ((bC5094@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (bC5097@bC5095) (lambda () (with-exception-handler (lambda (bC5099@e) ((call/cc (lambda (bC509b@bC5096) (bC5097@bC5095 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? bC5099@e) (bC4fca@condition-printer bC5099@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" bC5099@e))) (bC509b@bC5096 (lambda () (raise-continuable bC5099@e)))))))))) (lambda () (let bC50a1@loop ((bC509d@line (get-line (current-input-port))) (bC509e@accum '"")) (letrec* ((bC50a4@parentheses-ok? (lambda (bC50ab@text) (let bC50b3@loop ((bC50ad@chars (string->list bC50ab@text)) (bC50ae@p0 '0) (bC50af@p1 '0)) (if (null? bC50ad@chars) (= '0 bC50ae@p0 bC50af@p1) (let ((bC50b5@t (car bC50ad@chars))) (if (memv bC50b5@t '(#\()) (bC50b3@loop (cdr bC50ad@chars) (+ bC50ae@p0 '1) bC50af@p1) (if (memv bC50b5@t '(#\))) (bC50b3@loop (cdr bC50ad@chars) (- bC50ae@p0 '1) bC50af@p1) (if (memv bC50b5@t '(#\[)) (bC50b3@loop (cdr bC50ad@chars) bC50ae@p0 (+ bC50af@p1 '1)) (if (memv bC50b5@t '(#\])) (bC50b3@loop (cdr bC50ad@chars) bC50ae@p0 (- bC50af@p1 '1)) (bC50b3@loop (cdr bC50ad@chars) bC50ae@p0 bC50af@p1)))))))))) (bC50a6@eval-string-print (lambda (bC50a9@text) (if (not (or (string=? '"\n" bC50a9@text) (= '0 (string-length bC50a9@text)))) (write (bC4fde@eval-top-level (call-with-port (open-string-input-port bC50a9@text) read))) (void))))) (if (eof-object? bC509d@line) (begin (bC50a6@eval-string-print bC509e@accum) (exit)) (let ((bC50a7@current (string-append bC509e@accum bC509d@line))) (if (bC50a4@parentheses-ok? bC50a7@current) (bC50a6@eval-string-print bC50a7@current) (bC50a1@loop (get-line (current-input-port)) bC50a7@current)))))))))))) (newline) (bC5094@rec))))) (bC5094@rec)))) (set! bC512a@bC4fd0@repl bC4fd0@repl) (set! bC4fd2@trace-printer (bC2a03@bC28e1@make-parameter write)) (set! bC512b@bC4fd2@trace-printer bC4fd2@trace-printer) (set! bC4fd4@command-line (bC2a03@bC28e1@make-parameter (get-command-line))) (set! bC512c@bC4fd4@command-line bC4fd4@command-line) (set! bC4fd6@local-library-path (lambda (bC50b7@filename) (bC2cbd@bC2af9@library-path))) (set! bC512d@bC4fd6@local-library-path bC4fd6@local-library-path) (set! bC4fd8@load/args (lambda (bC50b9@filename . bC50bb@args) (begin (apply bC4fe8@load-r6rs-top-level bC50b9@filename 'load bC50bb@args) (void)))) (set! bC512e@bC4fd8@load/args bC4fd8@load/args) (set! bC4fda@load (lambda (bC50bd@filename) (begin (apply bC4fe8@load-r6rs-top-level bC50bd@filename 'load (bC4fd4@command-line)) (void)))) (set! bC512f@bC4fda@load bC4fda@load) (set! bC4fdc@ironscheme-build (lambda () (bC4fda@load '"ironscheme-buildscript.ss"))) (set! bC5130@bC4fdc@ironscheme-build bC4fdc@ironscheme-build) (set! bC4fde@eval-top-level (lambda (bC50bf@x) (bC4be4@bC317a@eval bC50bf@x (bC4bfb@bC31a8@interaction-environment)))) (set! bC5131@bC4fde@eval-top-level bC4fde@eval-top-level) (set! bC4fe0@compile-system-libraries (lambda () (bC4fde@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! bC5132@bC4fe0@compile-system-libraries bC4fe0@compile-system-libraries) (set! bC4fe2@compile (lambda (bC50c1@filename) (bC4fe8@load-r6rs-top-level bC50c1@filename 'compile))) (set! bC5133@bC4fe2@compile bC4fe2@compile) (set! bC4fe4@compile->closure (lambda (bC50c3@filename) (bC4fe8@load-r6rs-top-level bC50c3@filename 'closure))) (set! bC5134@bC4fe4@compile->closure bC4fe4@compile->closure) (set! bC4fe6@pre-compile-r6rs-file (lambda (bC50c5@filename) (bC4fe8@load-r6rs-top-level bC50c5@filename 'compile))) (set! bC5135@bC4fe6@pre-compile-r6rs-file bC4fe6@pre-compile-r6rs-file) (set! bC4fe8@load-r6rs-top-level (lambda (bC50c7@filename bC50c8@how . bC50cb@args) (begin (bC2cbd@bC2af9@library-path (bC4fd6@local-library-path bC50c7@filename)) (let ((bC50cd@x* (with-input-from-file bC50c7@filename (lambda () (let bC50cf@f () (let ((bC50d1@x (bC29f5@bC28c5@read-annotated))) (if (eof-object? bC50d1@x) '() (cons bC50d1@x (bC50cf@f))))))))) (let ((bC50d3@t bC50c8@how)) (if (memv bC50d3@t '(closure)) (bC4bfa@bC31a6@pre-compile-r6rs-top-level bC50cd@x*) (if (memv bC50d3@t '(load)) (begin (bC4fd4@command-line (cons bC50c7@filename (car bC50cb@args))) (bC2a04@bC28e3@mosh-cache-dir (create-mosh-cache-dir)) (if (bC2a04@bC28e3@mosh-cache-dir) (gensym-prefix-set! (bC4fee@prefix-inc! (string-append (bC2a04@bC28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (bC50d5@file) ((call/cc (lambda (bC50d9@bC50d7) (lambda () (with-exception-handler (lambda (bC50db@c) ((call/cc (lambda (bC50dd@bC50d8) (bC50d9@bC50d7 (lambda () (if '#t '#t (bC50dd@bC50d8 (lambda () (raise-continuable bC50db@c)))))))))) (lambda () (delete-file (string-append (bC2a04@bC28e3@mosh-cache-dir) '"/" bC50d5@file))))))))) (directory-list (bC2a04@bC28e3@mosh-cache-dir))) (void)) (let ((bC50df@compiled (bC4bf9@bC31a4@compile-r6rs-top-level bC50cd@x*))) (begin (if (and (bC2a04@bC28e3@mosh-cache-dir) (not (symbol-value '%disable-acc))) (bC2cc1@bC2b01@serialize-all bC29fe@bC28d7@serialize-library bC2a5a@bC2a13@compile-core-expr) (void)) (bC50df@compiled)))) (if (memv bC50d3@t '(compile)) (begin (bC4bf9@bC31a4@compile-r6rs-top-level bC50cd@x*) (bC2cc1@bC2b01@serialize-all bC29fe@bC28d7@serialize-library bC2a5a@bC2a13@compile-core-expr)) (if '#f '#f (void)))))))))) (set! bC5136@bC4fe8@load-r6rs-top-level bC4fe8@load-r6rs-top-level) (set! bC4fea@load-r6rs-top-level-sexp (lambda (bC50e1@import-spec bC50e2@thunk) (let ((bC50ed@bC50e6 bC2cbd@bC2af9@library-path) (bC50ee@bC50e8 bC2a04@bC28e3@mosh-cache-dir) (bC50ef@bC50ea (bC4fd6@local-library-path '"")) (bC50f0@bC50ec (create-mosh-cache-dir))) (let ((bC50f5@swap (lambda () (begin (let ((bC50f7@t (bC50ed@bC50e6))) (begin (bC50ed@bC50e6 bC50ef@bC50ea) (set! bC50ef@bC50ea bC50f7@t))) (let ((bC50f9@t (bC50ee@bC50e8))) (begin (bC50ee@bC50e8 bC50f0@bC50ec) (set! bC50f0@bC50ec bC50f9@t))))))) (dynamic-wind bC50f5@swap (lambda () (begin (if (bC2a04@bC28e3@mosh-cache-dir) (gensym-prefix-set! (bC4fee@prefix-inc! (string-append (bC2a04@bC28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((bC50ff@bC50fc bC4fd4@command-line) (bC5100@bC50fe '())) (let ((bC5103@swap (lambda () (let ((bC5105@t (bC50ff@bC50fc))) (begin (bC50ff@bC50fc bC5100@bC50fe) (set! bC5100@bC50fe bC5105@t)))))) (dynamic-wind bC5103@swap (lambda () ((bC4bf9@bC31a4@compile-r6rs-top-level (list (cons 'import bC50e1@import-spec) (list bC50e2@thunk))))) bC5103@swap))))) bC50f5@swap))))) (set! bC5137@bC4fea@load-r6rs-top-level-sexp bC4fea@load-r6rs-top-level-sexp) (set! bC4fec@prefix-inc (lambda (bC5107@prefix-string) (let ((bC5109@prefix (symbol->string bC5107@prefix-string))) (let ((bC510b@len (string-length bC5109@prefix))) (let bC5113@loop ((bC510d@i (- bC510b@len '1)) (bC510e@carry? '#t) (bC510f@accum '())) (if (< bC510d@i '0) (string->symbol (list->string (if bC510e@carry? (cons '#\a bC510f@accum) bC510f@accum))) (if bC510e@carry? (let ((bC5115@next-integer (+ '1 (char->integer (string-ref bC5109@prefix bC510d@i))))) (if (= bC5115@next-integer '123) (bC5113@loop (- bC510d@i '1) '#f (cons '#\A bC510f@accum)) (if (= bC5115@next-integer '91) (bC5113@loop (- bC510d@i '1) '#t (cons '#\a bC510f@accum)) (bC5113@loop (- bC510d@i '1) '#f (cons (integer->char bC5115@next-integer) bC510f@accum))))) (bC5113@loop (- bC510d@i '1) '#f (cons (string-ref bC5109@prefix bC510d@i) bC510f@accum))))))))) (set! bC5138@bC4fec@prefix-inc bC4fec@prefix-inc) (set! bC4fee@prefix-inc! (lambda (bC5117@file) (begin (if (not (file-exists? bC5117@file)) (call-with-output-file bC5117@file (lambda (bC5119@port) (write 'd bC5119@port))) (void)) (let ((bC511b@prefix (call-with-input-file bC5117@file read))) (if (main-vm?) (let ((bC511d@next-prefix (bC4fec@prefix-inc bC511b@prefix))) (begin (call-with-port (open-file-output-port bC5117@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (bC511f@port) (write bC511d@next-prefix bC511f@port))) bC511b@prefix)) bC511b@prefix))))) (set! bC5139@bC4fee@prefix-inc! bC4fee@prefix-inc!) (begin (bC2cc2@bC2b03@current-precompiled-library-loader bC29ff@bC28d9@load-serialized-library) (set-symbol-value! 'load bC4fda@load) (set-symbol-value! 'pre-compile-r6rs-file bC4fe6@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs bC4fde@eval-top-level) (set-symbol-value! 'int-env-syms bC4bdb@bC3168@interaction-environment-symbols) (set-symbol-value! 'expanded2core bC2a59@bC2a11@expanded->core) (set-symbol-value! 'trace-printer bC4fd2@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (bC4fef@c) (condition (bC4f1b@bC4d25@make-non-continuable-violation) (bC4f11@bC4d0c@make-who-condition 'raise) (bC4ed5@bC4c6d@make-message-condition '"returned from non-continuable exception") (bC4f07@bC4cf1@make-irritants-condition (list bC4fef@c))))) (bC4fc4@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (bC4fc4@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (bC4fc2@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (bC4fc2@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (bC4fc2@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((bC4ff1@prefix (lambda (bC4ff3@ext bC4ff4@ls) (append (map (lambda (bC4ff7@x) (string-append bC4ff3@ext bC4ff7@x)) bC4ff4@ls) bC4ff4@ls)))) (bC2cbe@bC2afb@library-extensions (bC4ff1@prefix '".mosh" (bC2cbe@bC2afb@library-extensions)))) (current-exception-handler (lambda (bC4ff9@c) (begin (if (condition? bC4ff9@c) (bC4fca@condition-printer bC4ff9@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" bC4ff9@c)) bC4ff9@c))) (if ((call/cc (lambda (bC4ffd@bC4ffb) (lambda () (with-exception-handler (lambda (bC4fff@c) ((call/cc (lambda (bC5001@bC4ffc) (bC4ffd@bC4ffb (lambda () (if '#t '#f (bC5001@bC4ffc (lambda () (raise-continuable bC4fff@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (bC4fea@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (bC4fd4@command-line)) (let ((bC500b@bC5004 bC4fd4@command-line) (bC500c@bC5006 bC2a04@bC28e3@mosh-cache-dir) (bC500d@bC5008 '()) (bC500e@bC500a (create-mosh-cache-dir))) (let ((bC5013@swap (lambda () (begin (let ((bC5015@t (bC500b@bC5004))) (begin (bC500b@bC5004 bC500d@bC5008) (set! bC500d@bC5008 bC5015@t))) (let ((bC5017@t (bC500c@bC5006))) (begin (bC500c@bC5006 bC500e@bC500a) (set! bC500e@bC500a bC5017@t))))))) (dynamic-wind bC5013@swap (lambda () (begin (if (bC2a04@bC28e3@mosh-cache-dir) (gensym-prefix-set! (bC4fee@prefix-inc! (string-append (bC2a04@bC28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (bC4fd0@repl))) bC5013@swap))) (begin (bC2cbd@bC2af9@library-path (bC4fd6@local-library-path (car (bC4fd4@command-line)))) (set! bC4fc0@x* (with-input-from-file (car (bC4fd4@command-line)) (lambda () (let bC5019@f () (let ((bC501b@x (bC29f5@bC28c5@read-annotated))) (if (eof-object? bC501b@x) '() (cons bC501b@x (bC5019@f)))))))) (bC4fd4@command-line (cons (car (bC4fd4@command-line)) (cdr (bC4fd4@command-line)))) (bC2a04@bC28e3@mosh-cache-dir (create-mosh-cache-dir)) (if (bC2a04@bC28e3@mosh-cache-dir) (gensym-prefix-set! (bC4fee@prefix-inc! (string-append (bC2a04@bC28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (bC501d@file) ((call/cc (lambda (bC5021@bC501f) (lambda () (with-exception-handler (lambda (bC5023@c) ((call/cc (lambda (bC5025@bC5020) (bC5021@bC501f (lambda () (if '#t '#t (bC5025@bC5020 (lambda () (raise-continuable bC5023@c)))))))))) (lambda () (delete-file (string-append (bC2a04@bC28e3@mosh-cache-dir) '"/" bC501d@file))))))))) (directory-list (bC2a04@bC28e3@mosh-cache-dir))) (void)) (let ((bC5027@compiled (bC4bf9@bC31a4@compile-r6rs-top-level bC4fc0@x*))) (begin (if (and (bC2a04@bC28e3@mosh-cache-dir) (not (symbol-value '%disable-acc))) (bC2cc1@bC2b01@serialize-all bC29fe@bC28d7@serialize-library bC2a5a@bC2a13@compile-core-expr) (void)) (bC5027@compiled))))))))
