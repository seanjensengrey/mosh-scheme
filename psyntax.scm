;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! xu599@library-file-path->cache-path (unspecified)) (set! xu59b@read-annotated (unspecified)) (set! xu59d@annotation-stripped (unspecified)) (set! xu59f@annotation? (unspecified)) (set! xu5a1@annotation-source (unspecified)) (set! xu5a3@annotation-expression (unspecified)) (set! xu5a5@scm->fasl (unspecified)) (set! xu5a7@fasl-save (unspecified)) (set! xu5a9@fasl-load (unspecified)) (set! xu5ab@verbose? (unspecified)) (set! xu5ad@serialize-library (unspecified)) (set! xu5af@load-serialized-library (unspecified)) (set! xu5b1@make-record-printer (unspecified)) (set! xu5b3@compile-core (unspecified)) (set! xu5b5@read-library-source-file (unspecified)) (set! xu5b7@make-parameter (unspecified)) (set! xu5b9@mosh-cache-dir (unspecified)) (set! xu64f@file-options-spec (unspecified)) (set! xu599@library-file-path->cache-path (lambda (xu650@x) (call-with-values (lambda () (open-string-output-port)) (lambda (xu656@xu653 xu657@xu655) (let ((xu65a@extract xu657@xu655) (xu65b@p xu656@xu653)) (letrec* ((xu65f@display-hex (lambda (xu668@n) (if (<= '0 xu668@n '9) (display xu668@n xu65b@p) (display (integer->char (+ (char->integer '#\a) (- xu668@n '10))) xu65b@p))))) (begin (let xu662@f ((xu660@ls (string-split xu650@x '#\/))) (if (not (null? xu660@ls)) (begin (display '"_" xu65b@p) (for-each (lambda (xu664@c) (if (or (char<=? '#\a xu664@c '#\z) (char<=? '#\A xu664@c '#\Z) (char<=? '#\0 xu664@c '#\9) (memv xu664@c '(#\- #\. #\_ #\~))) (display xu664@c xu65b@p) (begin (display '"%" xu65b@p) (let ((xu666@n (char->integer xu664@c))) (begin (xu65f@display-hex (quotient xu666@n '16)) (xu65f@display-hex (remainder xu666@n '16))))))) (string->list (car xu660@ls))) (xu662@f (cdr xu660@ls))) (void))) (xu65a@extract)))))))) (set! xu6ca@xu599@library-file-path->cache-path xu599@library-file-path->cache-path) (set! xu59b@read-annotated read) (set! xu6cb@xu59b@read-annotated xu59b@read-annotated) (set! xu59d@annotation-stripped (lambda (xu66a@x) (if (pair? xu66a@x) (cons (xu59d@annotation-stripped (car xu66a@x)) (xu59d@annotation-stripped (cdr xu66a@x))) (if (procedure? xu66a@x) (set-source-info! xu66a@x '#f) xu66a@x)))) (set! xu6cc@xu59d@annotation-stripped xu59d@annotation-stripped) (set! xu59f@annotation? (lambda (xu66c@x) (or (and (annotated-pair? xu66c@x) (source-info xu66c@x)) (and (procedure? xu66c@x) (source-info xu66c@x))))) (set! xu6cd@xu59f@annotation? xu59f@annotation?) (set! xu5a1@annotation-source (lambda (xu66e@x) (source-info xu66e@x))) (set! xu6ce@xu5a1@annotation-source xu5a1@annotation-source) (set! xu5a3@annotation-expression (lambda (xu670@x) (if (annotated-pair? xu670@x) (cons (car xu670@x) (cdr xu670@x)) (if (procedure? xu670@x) (set-source-info! xu670@x '#f) xu670@x)))) (set! xu6cf@xu5a3@annotation-expression xu5a3@annotation-expression) (set! xu5a5@scm->fasl (lambda (xu672@filename) (string-append (xu5b9@mosh-cache-dir) '"/" (xu599@library-file-path->cache-path xu672@filename) '".mosh-fasl"))) (set! xu6d0@xu5a5@scm->fasl xu5a5@scm->fasl) (set! xu5a7@fasl-save (lambda (xu674@filename xu675@obj) (call-with-port (open-file-output-port xu674@filename) (lambda (xu678@port) ((symbol-value 'fasl-write!) xu675@obj xu678@port))))) (set! xu6d1@xu5a7@fasl-save xu5a7@fasl-save) (set! xu5a9@fasl-load (lambda (xu67a@filename) (call-with-port (open-file-input-port xu67a@filename) (symbol-value 'fasl-read!)))) (set! xu6d2@xu5a9@fasl-load xu5a9@fasl-load) (set! xu5ab@verbose? (symbol-value '%verbose)) (set! xu6d3@xu5ab@verbose? xu5ab@verbose?) (set! xu5ad@serialize-library (lambda (xu67c@filename xu67d@obj) (begin (if xu5ab@verbose? (format (current-error-port) '"serialize-library ~a\n..." xu67c@filename) (void)) (let ((xu680@expanded2core (symbol-value 'expanded2core))) (let ((xu682@compile (symbol-value 'compile-w/o-halt))) (let ((xu684@code xu67d@obj)) (let ((xu686@pivot (cddddr (cddddr xu684@code)))) (let ((xu688@visit (xu682@compile (xu680@expanded2core (car xu686@pivot))))) (begin (set-car! xu686@pivot xu688@visit) (let ((xu68a@pivot (cdr xu686@pivot))) (let ((xu68c@invoke (xu682@compile (xu680@expanded2core (car xu68a@pivot))))) (set-car! xu68a@pivot xu68c@invoke))))))))) (let ((xu68e@fasl-file (xu5a5@scm->fasl xu67c@filename))) (begin (if (file-exists? xu68e@fasl-file) (delete-file xu68e@fasl-file) (void)) ((call/cc (lambda (xu692@xu690) (lambda () (with-exception-handler (lambda (xu694@c) ((call/cc (lambda (xu696@xu691) (xu692@xu690 (lambda () (if '#t (begin (if xu5ab@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" xu67c@filename) (void)) (if (file-exists? xu68e@fasl-file) (delete-file xu68e@fasl-file) (void)) '#f) (xu696@xu691 (lambda () (raise-continuable xu694@c)))))))))) (lambda () (xu5a7@fasl-save xu68e@fasl-file xu67d@obj)))))))))))) (set! xu6d4@xu5ad@serialize-library xu5ad@serialize-library) (set! xu5af@load-serialized-library (lambda (xu698@filename xu699@obj) (and (xu5b9@mosh-cache-dir) (let ((xu69c@fasl-file (xu5a5@scm->fasl xu698@filename))) (if (and (file-exists? xu69c@fasl-file) ((symbol-value 'file-newer?) xu69c@fasl-file xu698@filename)) (let ((xu69e@expanded2core (symbol-value 'expanded2core))) (let ((xu6a0@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((xu6a2@code (xu5a9@fasl-load xu69c@fasl-file))) (let ((xu6a4@pivot (cddddr (cddddr xu6a2@code)))) (let ((xu6a6@visit (car xu6a4@pivot))) (let ((xu6a8@visit-proc (lambda () (xu6a0@eval-compiled-core xu6a6@visit)))) (begin (set-car! xu6a4@pivot xu6a8@visit-proc) (let ((xu6aa@pivot (cdr xu6a4@pivot))) (let ((xu6ac@invoke (car xu6aa@pivot))) (begin (set-car! xu6aa@pivot (lambda () (xu6a0@eval-compiled-core xu6ac@invoke))) (apply xu699@obj xu6a2@code))))))))))) '#f))))) (set! xu6d5@xu5af@load-serialized-library xu5af@load-serialized-library) (set! xu5b1@make-record-printer (lambda (xu6ae@name xu6af@printer) (lambda xu6b2@x (begin (display '"record printer") (for-each display xu6b2@x))))) (set! xu6d6@xu5b1@make-record-printer xu5b1@make-record-printer) (set! xu5b3@compile-core (lambda xu6b4@x (apply error 'comile-core '"not implementated" xu6b4@x))) (set! xu6d7@xu5b3@compile-core xu5b3@compile-core) (set! xu5b5@read-library-source-file (lambda (xu6b6@file-name) (with-input-from-file xu6b6@file-name xu59b@read-annotated))) (set! xu6d8@xu5b5@read-library-source-file xu5b5@read-library-source-file) (set! xu5b7@make-parameter (lambda xu6c6 (let ((xu6c7 (length xu6c6))) (if (= xu6c7 '1) (apply (lambda (xu6b8@x) (xu5b7@make-parameter xu6b8@x (lambda (xu6ba@x) xu6ba@x))) xu6c6) (if (= xu6c7 '2) (apply (lambda (xu6bc@x xu6bd@fender) (let ((xu6c0@x (xu6bd@fender xu6bc@x))) (lambda xu6c4 (let ((xu6c5 (length xu6c4))) (if (= xu6c5 '0) (apply (lambda () xu6c0@x) xu6c4) (if (= xu6c5 '1) (apply (lambda (xu6c2@v) (set! xu6c0@x (xu6bd@fender xu6c2@v))) xu6c4) (error 'apply '"invalid arg count"))))))) xu6c6) (error 'apply '"invalid arg count")))))) (set! xu6d9@xu5b7@make-parameter xu5b7@make-parameter) (set! xu5b9@mosh-cache-dir (xu5b7@make-parameter '#f)) (set! xu6da@xu5b9@mosh-cache-dir xu5b9@mosh-cache-dir) (set! xu64f@file-options-spec (lambda (xu6c8@x) xu6c8@x)) (set! xu6db@xu64f@file-options-spec xu64f@file-options-spec) (void))
(begin (set! xu6e1@current-primitive-locations (unspecified)) (set! xu6e3@mutable? (unspecified)) (set! xu6e5@rewriter (unspecified)) (set! xu6e7@expanded->core (unspecified)) (set! xu6e9@compile-core-expr (unspecified)) (set! xu6eb@pretty-print (unspecified)) (set! xu6ed@compile-core-expr-to-port (unspecified)) (set! xu6e1@current-primitive-locations (xu6d9@xu5b7@make-parameter (lambda (xu6ee@x) '#f) (lambda (xu6f0@p) xu6f0@p))) (set! xu72c@xu6e1@current-primitive-locations xu6e1@current-primitive-locations) (set! xu6e3@mutable? (lambda (xu6f2@x) (or (pair? xu6f2@x) (vector? xu6f2@x) (hashtable? xu6f2@x)))) (set! xu72d@xu6e3@mutable? xu6e3@mutable?) (set! xu6e5@rewriter (lambda (xu6f4@quote-hack?) (letrec* ((xu6f7@f (lambda (xu6f8@x) (if (pair? xu6f8@x) (let ((xu6fa@t (car xu6f8@x))) (if (memv xu6fa@t '(quote)) (if (and xu6f4@quote-hack? (xu6e3@mutable? (cadr xu6f8@x))) (let ((xu6fc@g (gensym))) (begin (set-symbol-value! xu6fc@g (cadr xu6f8@x)) xu6fc@g)) xu6f8@x) (if (memv xu6fa@t '(case-lambda)) (cons 'case-lambda (map (lambda (xu6fe@x) (cons (car xu6fe@x) (map xu6f7@f (cdr xu6fe@x)))) (cdr xu6f8@x))) (if (memv xu6fa@t '(lambda)) (cons* 'lambda (cadr xu6f8@x) (map xu6f7@f (cddr xu6f8@x))) (if (memv xu6fa@t '(letrec)) (let ((xu700@bindings (cadr xu6f8@x)) (xu701@body* (cddr xu6f8@x))) (let ((xu704@lhs* (map car xu700@bindings)) (xu705@rhs* (map cadr xu700@bindings))) (cons* 'letrec (map list xu704@lhs* (map xu6f7@f xu705@rhs*)) (map xu6f7@f xu701@body*)))) (if (memv xu6fa@t '(letrec*)) (let ((xu708@bindings (cadr xu6f8@x)) (xu709@body* (cddr xu6f8@x))) (let ((xu70c@lhs* (map car xu708@bindings)) (xu70d@rhs* (map cadr xu708@bindings))) (cons* 'letrec* (map list xu70c@lhs* (map xu6f7@f xu70d@rhs*)) (map xu6f7@f xu709@body*)))) (if (memv xu6fa@t '(library-letrec*)) (let ((xu710@name (cadr xu6f8@x)) (xu711@x (cdr xu6f8@x))) (let ((xu714@bindings (cadr xu711@x)) (xu715@body* (cddr xu711@x))) (let ((xu718@lhs* (map car xu714@bindings)) (xu719@lhs** (map cadr xu714@bindings)) (xu71a@rhs* (map caddr xu714@bindings))) (cons* 'library-letrec* xu710@name (map list xu718@lhs* xu719@lhs** (map xu6f7@f xu71a@rhs*)) (map xu6f7@f xu715@body*))))) (if (memv xu6fa@t '(begin)) (cons 'begin (map xu6f7@f (cdr xu6f8@x))) (if (memv xu6fa@t '(set!)) (list 'set! (cadr xu6f8@x) (xu6f7@f (caddr xu6f8@x))) (if (memv xu6fa@t '(primitive)) (let ((xu71e@op (cadr xu6f8@x))) (let ((xu720@t ((xu6e1@current-primitive-locations) xu71e@op))) (if xu720@t ((lambda (xu722@loc) xu722@loc) xu720@t) xu71e@op))) (if (memv xu6fa@t '(define)) xu6f8@x (if (list? xu6f8@x) (map xu6f7@f xu6f8@x) (error 'rewrite '"invalid form ~s ~s" xu6f8@x (list? xu6f8@x)))))))))))))) xu6f8@x)))) xu6f7@f))) (set! xu72e@xu6e5@rewriter xu6e5@rewriter) (set! xu6e7@expanded->core (lambda (xu724@x) ((xu6e5@rewriter '#f) xu724@x))) (set! xu72f@xu6e7@expanded->core xu6e7@expanded->core) (set! xu6e9@compile-core-expr (lambda (xu726@x) ((xu6e5@rewriter '#f) xu726@x))) (set! xu730@xu6e9@compile-core-expr xu6e9@compile-core-expr) (set! xu6eb@pretty-print write) (set! xu731@xu6eb@pretty-print xu6eb@pretty-print) (set! xu6ed@compile-core-expr-to-port (lambda (xu728@x xu729@p) (xu6eb@pretty-print ((xu6e5@rewriter '#f) xu728@x) xu729@p))) (set! xu732@xu6ed@compile-core-expr-to-port xu6ed@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! xu781@make-collection (unspecified)) (set! xu783@current-library-collection (unspecified)) (set! xu785@rp (unspecified)) (set! xu78f@library? (unspecified)) (set! xu791@library-id (unspecified)) (set! xu793@set-library-id! (unspecified)) (set! xu795@library-name (unspecified)) (set! xu797@set-library-name! (unspecified)) (set! xu799@library-version (unspecified)) (set! xu79b@set-library-version! (unspecified)) (set! xu79d@library-imp* (unspecified)) (set! xu79f@set-library-imp*! (unspecified)) (set! xu7a1@library-vis* (unspecified)) (set! xu7a3@set-library-vis*! (unspecified)) (set! xu7a5@library-inv* (unspecified)) (set! xu7a7@set-library-inv*! (unspecified)) (set! xu7a9@library-subst (unspecified)) (set! xu7ab@set-library-subst! (unspecified)) (set! xu7ad@library-env (unspecified)) (set! xu7af@set-library-env! (unspecified)) (set! xu7b1@library-visit-state (unspecified)) (set! xu7b3@set-library-visit-state! (unspecified)) (set! xu7b5@library-invoke-state (unspecified)) (set! xu7b7@set-library-invoke-state! (unspecified)) (set! xu7b9@library-visit-code (unspecified)) (set! xu7bb@set-library-visit-code! (unspecified)) (set! xu7bd@library-invoke-code (unspecified)) (set! xu7bf@set-library-invoke-code! (unspecified)) (set! xu7c1@library-visible? (unspecified)) (set! xu7c3@set-library-visible?! (unspecified)) (set! xu7c5@library-source-file-name (unspecified)) (set! xu7c7@set-library-source-file-name! (unspecified)) (set! xu7c9@dummy (unspecified)) (set! xu7cb@find-dependencies (unspecified)) (set! xu7cd@find-library-by (unspecified)) (set! xu7cf@library-path (unspecified)) (set! xu7d1@library-extensions (unspecified)) (set! xu7d3@library-name->file-name (unspecified)) (set! xu7d5@file-locator (unspecified)) (set! xu7d7@serialize-all (unspecified)) (set! xu7d9@current-precompiled-library-loader (unspecified)) (set! xu7db@try-load-from-file (unspecified)) (set! xu7dd@library-loader (unspecified)) (set! xu7df@current-library-expander (unspecified)) (set! xu7e1@external-pending-libraries (unspecified)) (set! xu7e3@find-external-library (unspecified)) (set! xu7e5@find-library-by-name (unspecified)) (set! xu7e7@library-exists? (unspecified)) (set! xu7e9@find-library-by-spec/die (unspecified)) (set! xu7eb@label->binding-table (unspecified)) (set! xu7ed@install-library-record (unspecified)) (set! xu7ef@install-library (unspecified)) (set! xu7f1@imported-label->binding (unspecified)) (set! xu7f3@invoke-library (unspecified)) (set! xu7f5@visit-library (unspecified)) (set! xu7f7@invoke-library-by-spec (unspecified)) (set! xu7f9@installed-libraries (unspecified)) (set! xu7fb@library-spec (unspecified)) (set! xu781@make-collection (lambda () (let ((xu7fc@set '())) (letrec* ((xu7ff@set-cons (lambda (xu804@x xu805@ls) (if (memq xu804@x xu805@ls) xu805@ls (cons xu804@x xu805@ls))))) (lambda xu802 (let ((xu803 (length xu802))) (if (= xu803 '0) (apply (lambda () xu7fc@set) xu802) (if (= xu803 '1) (apply (lambda (xu800@x) (set! xu7fc@set (xu7ff@set-cons xu800@x xu7fc@set))) xu802) (error 'apply '"invalid arg count"))))))))) (set! xu970@xu781@make-collection xu781@make-collection) (set! xu783@current-library-collection (xu6d9@xu5b7@make-parameter (xu781@make-collection) (lambda (xu808@x) (begin (if (not (procedure? xu808@x)) (assertion-violation 'current-library-collection '"not a procedure" xu808@x) (void)) xu808@x)))) (set! xu971@xu783@current-library-collection xu783@current-library-collection) (set! xu785@rp (xu6d6@xu5b1@make-record-printer 'library (lambda (xu80a@x xu80b@p xu80c@wr) (begin (if (not (xu78f@library? xu80a@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (xu799@library-version xu80a@x)) (xu795@library-name xu80a@x) (append (xu795@library-name xu80a@x) (list (xu799@library-version xu80a@x))))) xu80b@p))))) (set! xu972@xu785@rp xu785@rp) (set! xu78f@library? (lambda (xu810@x) (and (simple-struct? xu810@x) (eq? (simple-struct-name xu810@x) 'library)))) (set! xu973@xu78f@library? xu78f@library?) (set! xu791@library-id (lambda (xu812@x) (simple-struct-ref xu812@x '0))) (set! xu974@xu791@library-id xu791@library-id) (set! xu793@set-library-id! (lambda (xu814@x xu815@val) (simple-struct-set! xu814@x '0 xu815@val))) (set! xu975@xu793@set-library-id! xu793@set-library-id!) (set! xu795@library-name (lambda (xu818@x) (simple-struct-ref xu818@x '1))) (set! xu976@xu795@library-name xu795@library-name) (set! xu797@set-library-name! (lambda (xu81a@x xu81b@val) (simple-struct-set! xu81a@x '1 xu81b@val))) (set! xu977@xu797@set-library-name! xu797@set-library-name!) (set! xu799@library-version (lambda (xu81e@x) (simple-struct-ref xu81e@x '2))) (set! xu978@xu799@library-version xu799@library-version) (set! xu79b@set-library-version! (lambda (xu820@x xu821@val) (simple-struct-set! xu820@x '2 xu821@val))) (set! xu979@xu79b@set-library-version! xu79b@set-library-version!) (set! xu79d@library-imp* (lambda (xu824@x) (simple-struct-ref xu824@x '3))) (set! xu97a@xu79d@library-imp* xu79d@library-imp*) (set! xu79f@set-library-imp*! (lambda (xu826@x xu827@val) (simple-struct-set! xu826@x '3 xu827@val))) (set! xu97b@xu79f@set-library-imp*! xu79f@set-library-imp*!) (set! xu7a1@library-vis* (lambda (xu82a@x) (simple-struct-ref xu82a@x '4))) (set! xu97c@xu7a1@library-vis* xu7a1@library-vis*) (set! xu7a3@set-library-vis*! (lambda (xu82c@x xu82d@val) (simple-struct-set! xu82c@x '4 xu82d@val))) (set! xu97d@xu7a3@set-library-vis*! xu7a3@set-library-vis*!) (set! xu7a5@library-inv* (lambda (xu830@x) (simple-struct-ref xu830@x '5))) (set! xu97e@xu7a5@library-inv* xu7a5@library-inv*) (set! xu7a7@set-library-inv*! (lambda (xu832@x xu833@val) (simple-struct-set! xu832@x '5 xu833@val))) (set! xu97f@xu7a7@set-library-inv*! xu7a7@set-library-inv*!) (set! xu7a9@library-subst (lambda (xu836@x) (simple-struct-ref xu836@x '6))) (set! xu980@xu7a9@library-subst xu7a9@library-subst) (set! xu7ab@set-library-subst! (lambda (xu838@x xu839@val) (simple-struct-set! xu838@x '6 xu839@val))) (set! xu981@xu7ab@set-library-subst! xu7ab@set-library-subst!) (set! xu7ad@library-env (lambda (xu83c@x) (simple-struct-ref xu83c@x '7))) (set! xu982@xu7ad@library-env xu7ad@library-env) (set! xu7af@set-library-env! (lambda (xu83e@x xu83f@val) (simple-struct-set! xu83e@x '7 xu83f@val))) (set! xu983@xu7af@set-library-env! xu7af@set-library-env!) (set! xu7b1@library-visit-state (lambda (xu842@x) (simple-struct-ref xu842@x '8))) (set! xu984@xu7b1@library-visit-state xu7b1@library-visit-state) (set! xu7b3@set-library-visit-state! (lambda (xu844@x xu845@val) (simple-struct-set! xu844@x '8 xu845@val))) (set! xu985@xu7b3@set-library-visit-state! xu7b3@set-library-visit-state!) (set! xu7b5@library-invoke-state (lambda (xu848@x) (simple-struct-ref xu848@x '9))) (set! xu986@xu7b5@library-invoke-state xu7b5@library-invoke-state) (set! xu7b7@set-library-invoke-state! (lambda (xu84a@x xu84b@val) (simple-struct-set! xu84a@x '9 xu84b@val))) (set! xu987@xu7b7@set-library-invoke-state! xu7b7@set-library-invoke-state!) (set! xu7b9@library-visit-code (lambda (xu84e@x) (simple-struct-ref xu84e@x '10))) (set! xu988@xu7b9@library-visit-code xu7b9@library-visit-code) (set! xu7bb@set-library-visit-code! (lambda (xu850@x xu851@val) (simple-struct-set! xu850@x '10 xu851@val))) (set! xu989@xu7bb@set-library-visit-code! xu7bb@set-library-visit-code!) (set! xu7bd@library-invoke-code (lambda (xu854@x) (simple-struct-ref xu854@x '11))) (set! xu98a@xu7bd@library-invoke-code xu7bd@library-invoke-code) (set! xu7bf@set-library-invoke-code! (lambda (xu856@x xu857@val) (simple-struct-set! xu856@x '11 xu857@val))) (set! xu98b@xu7bf@set-library-invoke-code! xu7bf@set-library-invoke-code!) (set! xu7c1@library-visible? (lambda (xu85a@x) (simple-struct-ref xu85a@x '12))) (set! xu98c@xu7c1@library-visible? xu7c1@library-visible?) (set! xu7c3@set-library-visible?! (lambda (xu85c@x xu85d@val) (simple-struct-set! xu85c@x '12 xu85d@val))) (set! xu98d@xu7c3@set-library-visible?! xu7c3@set-library-visible?!) (set! xu7c5@library-source-file-name (lambda (xu860@x) (simple-struct-ref xu860@x '13))) (set! xu98e@xu7c5@library-source-file-name xu7c5@library-source-file-name) (set! xu7c7@set-library-source-file-name! (lambda (xu862@x xu863@val) (simple-struct-set! xu862@x '13 xu863@val))) (set! xu98f@xu7c7@set-library-source-file-name! xu7c7@set-library-source-file-name!) (set! xu7c9@dummy '3) (set! xu990@xu7c9@dummy xu7c9@dummy) (set! xu7cb@find-dependencies (lambda (xu866@ls) (if (null? xu866@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! xu991@xu7cb@find-dependencies xu7cb@find-dependencies) (set! xu7cd@find-library-by (lambda (xu868@pred) (let xu86c@f ((xu86a@ls ((xu783@current-library-collection)))) (if (null? xu86a@ls) '#f (if (xu868@pred (car xu86a@ls)) (car xu86a@ls) (xu86c@f (cdr xu86a@ls))))))) (set! xu992@xu7cd@find-library-by xu7cd@find-library-by) (set! xu7cf@library-path (xu6d9@xu5b7@make-parameter '(".") (lambda (xu86e@x) (if (and (list? xu86e@x) (for-all string? xu86e@x)) (map (lambda (xu870@x) xu870@x) xu86e@x) (assertion-violation 'library-path '"not a list of strings" xu86e@x))))) (set! xu993@xu7cf@library-path xu7cf@library-path) (set! xu7d1@library-extensions (xu6d9@xu5b7@make-parameter '(".sls" ".ss" ".scm") (lambda (xu872@x) (if (and (list? xu872@x) (for-all string? xu872@x)) (map (lambda (xu874@x) xu874@x) xu872@x) (assertion-violation 'library-extensions '"not a list of strings" xu872@x))))) (set! xu994@xu7d1@library-extensions xu7d1@library-extensions) (set! xu7d3@library-name->file-name (lambda (xu876@x) (call-with-values (lambda () (open-string-output-port)) (lambda (xu87c@xu879 xu87d@xu87b) (let ((xu880@extract xu87d@xu87b) (xu881@p xu87c@xu879)) (letrec* ((xu885@display-hex (lambda (xu88e@n) (if (<= '0 xu88e@n '9) (display xu88e@n xu881@p) (display (integer->char (+ (char->integer '#\a) (- xu88e@n '10))) xu881@p))))) (begin (let xu888@f ((xu886@ls xu876@x)) (if (not (null? xu886@ls)) (begin (display '"/" xu881@p) (for-each (lambda (xu88a@c) (if (or (char<=? '#\a xu88a@c '#\z) (char<=? '#\A xu88a@c '#\Z) (char<=? '#\0 xu88a@c '#\9) (memv xu88a@c '(#\- #\. #\_ #\~))) (display xu88a@c xu881@p) (begin (display '"%" xu881@p) (let ((xu88c@n (char->integer xu88a@c))) (begin (xu885@display-hex (quotient xu88c@n '16)) (xu885@display-hex (remainder xu88c@n '16))))))) (string->list (symbol->string (car xu886@ls)))) (xu888@f (cdr xu886@ls))) (void))) (xu880@extract)))))))) (set! xu995@xu7d3@library-name->file-name xu7d3@library-name->file-name) (set! xu7d5@file-locator (xu6d9@xu5b7@make-parameter (lambda (xu890@x) (let ((xu892@str (xu7d3@library-name->file-name xu890@x))) (let xu89a@f ((xu894@ls (xu7cf@library-path)) (xu895@exts (xu7d1@library-extensions)) (xu896@failed-list '())) (if (null? xu894@ls) (letrec* ((xu8a4@xu89f (make-record-type-descriptor '&library-resolution &condition-rtd 'xu8a2 '#f '#f '#((immutable library) (immutable files)))) (xu8a6@xu8a1 '#f) (xu8a8@xu8a0 (make-record-constructor-descriptor xu8a4@xu89f &condition-rcd xu8a6@xu8a1)) (xu8ab@xu89e (record-predicate xu8a4@xu89f)) (xu8ad@make-library-resolution-condition (record-constructor xu8a8@xu8a0)) (xu8af@xu89c (record-accessor xu8a4@xu89f '0)) (xu8b1@xu89d (record-accessor xu8a4@xu89f '1)) (xu8b3@library-resolution-condition? (condition-predicate xu8a4@xu89f)) (xu8b5@condition-library (condition-accessor xu8a4@xu89f xu8af@xu89c)) (xu8b7@condition-files (condition-accessor xu8a4@xu89f xu8b1@xu89d))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (xu8ad@make-library-resolution-condition xu890@x (reverse xu896@failed-list))))) (if (null? xu895@exts) (xu89a@f (cdr xu894@ls) (xu7d1@library-extensions) xu896@failed-list) (let ((xu8b8@name (string-append (car xu894@ls) xu892@str (car xu895@exts)))) (if (file-exists? xu8b8@name) xu8b8@name (xu89a@f xu894@ls (cdr xu895@exts) (cons xu8b8@name xu896@failed-list))))))))) (lambda (xu8ba@f) (if (procedure? xu8ba@f) xu8ba@f (assertion-violation 'file-locator '"not a procedure" xu8ba@f))))) (set! xu996@xu7d5@file-locator xu7d5@file-locator) (set! xu7d7@serialize-all (lambda (xu8bc@serialize xu8bd@compile) (letrec* ((xu8c1@library-desc (lambda (xu8c4@x) (list (xu791@library-id xu8c4@x) (xu795@library-name xu8c4@x))))) (for-each (lambda (xu8c2@x) (if (xu7c5@library-source-file-name xu8c2@x) (xu8bc@serialize (xu7c5@library-source-file-name xu8c2@x) (list (xu791@library-id xu8c2@x) (xu795@library-name xu8c2@x) (xu799@library-version xu8c2@x) (map xu8c1@library-desc (xu79d@library-imp* xu8c2@x)) (map xu8c1@library-desc (xu7a1@library-vis* xu8c2@x)) (map xu8c1@library-desc (xu7a5@library-inv* xu8c2@x)) (xu7a9@library-subst xu8c2@x) (xu7ad@library-env xu8c2@x) (xu8bd@compile (xu7b9@library-visit-code xu8c2@x)) (xu8bd@compile (xu7bd@library-invoke-code xu8c2@x)) (xu7c1@library-visible? xu8c2@x))) (void))) ((xu783@current-library-collection)))))) (set! xu997@xu7d7@serialize-all xu7d7@serialize-all) (set! xu7d9@current-precompiled-library-loader (xu6d9@xu5b7@make-parameter (lambda (xu8c6@filename xu8c7@sk) '#f))) (set! xu998@xu7d9@current-precompiled-library-loader xu7d9@current-precompiled-library-loader) (set! xu7db@try-load-from-file (lambda (xu8ca@filename) ((xu7d9@current-precompiled-library-loader) xu8ca@filename (lambda xu8f0 (let ((xu8f1 (length xu8f0))) (if (= xu8f1 '11) (apply (lambda (xu8cc@id xu8cd@name xu8ce@ver xu8cf@imp* xu8d0@vis* xu8d1@inv* xu8d2@exp-subst xu8d3@exp-env xu8d4@visit-proc xu8d5@invoke-proc xu8d6@visible?) (let xu8e4@f ((xu8e2@deps (append xu8cf@imp* xu8d0@vis* xu8d1@inv*))) (if (null? xu8e2@deps) (begin (xu7ef@install-library xu8cc@id xu8cd@name xu8ce@ver xu8cf@imp* xu8d0@vis* xu8d1@inv* xu8d2@exp-subst xu8d3@exp-env xu8d4@visit-proc xu8d5@invoke-proc '#f '#f xu8d6@visible? '#f) '#t) (let ((xu8e6@d (car xu8e2@deps))) (let ((xu8e8@label (car xu8e6@d)) (xu8e9@dname (cadr xu8e6@d))) (let ((xu8ec@l (xu7e5@find-library-by-name xu8e9@dname))) (if (and (xu78f@library? xu8ec@l) (eq? xu8e8@label (xu791@library-id xu8ec@l))) (xu8e4@f (cdr xu8e2@deps)) (begin (if xu6d3@xu5ab@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" xu8cd@name xu8e9@dname xu8ca@filename) (void)) '#f)))))))) xu8f0) (if (>= xu8f1 '0) (apply (lambda xu8ee@others '#f) xu8f0) (error 'apply '"invalid arg count")))))))) (set! xu999@xu7db@try-load-from-file xu7db@try-load-from-file) (set! xu7dd@library-loader (xu6d9@xu5b7@make-parameter (lambda (xu8f2@x) (let ((xu8f4@file-name ((xu7d5@file-locator) xu8f2@x))) (if (not xu8f4@file-name) (assertion-violation '#f '"cannot file library" xu8f2@x) (or (xu7db@try-load-from-file xu8f4@file-name) ((xu7df@current-library-expander) (xu6d8@xu5b5@read-library-source-file xu8f4@file-name) xu8f4@file-name (lambda (xu8f6@name) (if (not (fast-equal? xu8f6@name xu8f2@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (xu8fc@xu8f9 xu8fd@xu8fb) (let ((xu900@e xu8fd@xu8fb) (xu901@p xu8fc@xu8f9)) (begin (display '"expected to find library " xu901@p) (write xu8f2@x xu901@p) (display '" in file " xu901@p) (display xu8f4@file-name xu901@p) (display '", found " xu901@p) (write xu8f6@name xu901@p) (display '" instead" xu901@p) (xu900@e)))))) (void)))))))) (lambda (xu904@f) (if (procedure? xu904@f) xu904@f (assertion-violation 'library-locator '"not a procedure" xu904@f))))) (set! xu99a@xu7dd@library-loader xu7dd@library-loader) (set! xu7df@current-library-expander (xu6d9@xu5b7@make-parameter (lambda (xu906@x) (assertion-violation 'library-expander '"not initialized")) (lambda (xu908@f) (if (procedure? xu908@f) xu908@f (assertion-violation 'library-expander '"not a procedure" xu908@f))))) (set! xu99b@xu7df@current-library-expander xu7df@current-library-expander) (set! xu7e1@external-pending-libraries (xu6d9@xu5b7@make-parameter '())) (set! xu99c@xu7e1@external-pending-libraries xu7e1@external-pending-libraries) (set! xu7e3@find-external-library (lambda (xu90a@name) (begin (if (member xu90a@name (xu7e1@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" xu90a@name) (void)) (let ((xu910@xu90d xu7e1@external-pending-libraries) (xu911@xu90f (cons xu90a@name (xu7e1@external-pending-libraries)))) (let ((xu914@swap (lambda () (let ((xu916@t (xu910@xu90d))) (begin (xu910@xu90d xu911@xu90f) (set! xu911@xu90f xu916@t)))))) (dynamic-wind xu914@swap (lambda () (begin ((xu7dd@library-loader) xu90a@name) (or (xu7cd@find-library-by (lambda (xu918@x) (fast-equal? (xu795@library-name xu918@x) xu90a@name))) (assertion-violation '#f '"handling external library did not yield the correct library" xu90a@name)))) xu914@swap)))))) (set! xu99d@xu7e3@find-external-library xu7e3@find-external-library) (set! xu7e5@find-library-by-name (lambda (xu91a@name) (or (xu7cd@find-library-by (lambda (xu91c@x) (fast-equal? (xu795@library-name xu91c@x) xu91a@name))) (xu7e3@find-external-library xu91a@name)))) (set! xu99e@xu7e5@find-library-by-name xu7e5@find-library-by-name) (set! xu7e7@library-exists? (lambda (xu91e@name) (and (xu7cd@find-library-by (lambda (xu920@x) (fast-equal? (xu795@library-name xu920@x) xu91e@name))) '#t))) (set! xu99f@xu7e7@library-exists? xu7e7@library-exists?) (set! xu7e9@find-library-by-spec/die (lambda (xu922@spec) (let ((xu924@id (car xu922@spec))) (or (xu7cd@find-library-by (lambda (xu926@x) (eq? xu924@id (xu791@library-id xu926@x)))) (assertion-violation '#f '"cannot find library with required spec" xu922@spec))))) (set! xu9a0@xu7e9@find-library-by-spec/die xu7e9@find-library-by-spec/die) (set! xu7eb@label->binding-table (make-eq-hashtable)) (set! xu9a1@xu7eb@label->binding-table xu7eb@label->binding-table) (set! xu7ed@install-library-record (lambda (xu928@lib) (begin (let ((xu92a@exp-env (xu7ad@library-env xu928@lib))) (for-each (lambda (xu92c@x) (let ((xu92e@label (car xu92c@x)) (xu92f@binding (cdr xu92c@x))) (let ((xu932@binding (let ((xu934@t (car xu92f@binding))) (if (memv xu934@t '(global)) (cons 'global (cons xu928@lib (cdr xu92f@binding))) (if (memv xu934@t '(global-macro)) (cons 'global-macro (cons xu928@lib (cdr xu92f@binding))) (if (memv xu934@t '(global-macro!)) (cons 'global-macro! (cons xu928@lib (cdr xu92f@binding))) xu92f@binding)))))) (begin (if (hashtable-ref xu7eb@label->binding-table xu92e@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" xu92e@label (hashtable-ref xu7eb@label->binding-table xu92e@label '#f) xu932@binding) (exit)) (void)) (hashtable-set! xu7eb@label->binding-table xu92e@label xu932@binding))))) xu92a@exp-env)) ((xu783@current-library-collection) xu928@lib)))) (set! xu9a2@xu7ed@install-library-record xu7ed@install-library-record) (set! xu7ef@install-library (lambda (xu936@id xu937@name xu938@ver xu939@imp* xu93a@vis* xu93b@inv* xu93c@exp-subst xu93d@exp-env xu93e@visit-proc xu93f@invoke-proc xu940@visit-code xu941@invoke-code xu942@visible? xu943@source-file-name) (let ((xu952@imp-lib* (map xu7e9@find-library-by-spec/die xu939@imp*)) (xu953@vis-lib* (map xu7e9@find-library-by-spec/die xu93a@vis*)) (xu954@inv-lib* (map xu7e9@find-library-by-spec/die xu93b@inv*))) (begin (if (not (and (symbol? xu936@id) (list? xu937@name) (list? xu938@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" xu936@id xu937@name xu938@ver) (void)) (if (xu7e7@library-exists? xu937@name) (assertion-violation 'install-library '"library is already installed" xu937@name) (void)) (let ((xu958@lib (make-simple-struct 'library '15 (list xu936@id xu937@name xu938@ver xu952@imp-lib* xu953@vis-lib* xu954@inv-lib* xu93c@exp-subst xu93d@exp-env xu93e@visit-proc xu93f@invoke-proc xu940@visit-code xu941@invoke-code xu942@visible? xu943@source-file-name)))) (xu7ed@install-library-record xu958@lib)))))) (set! xu9a3@xu7ef@install-library xu7ef@install-library) (set! xu7f1@imported-label->binding (lambda (xu95a@lab) (hashtable-ref xu7eb@label->binding-table xu95a@lab '#f))) (set! xu9a4@xu7f1@imported-label->binding xu7f1@imported-label->binding) (set! xu7f3@invoke-library (lambda (xu95c@lib) (let ((xu95e@invoke (xu7b5@library-invoke-state xu95c@lib))) (if (procedure? xu95e@invoke) (begin (xu7b7@set-library-invoke-state! xu95c@lib (lambda () (assertion-violation 'invoke '"circularity detected" xu95c@lib))) (for-each xu7f3@invoke-library (xu7a5@library-inv* xu95c@lib)) (xu7b7@set-library-invoke-state! xu95c@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" xu95c@lib))) (xu95e@invoke) (xu7b7@set-library-invoke-state! xu95c@lib '#t)) (void))))) (set! xu9a5@xu7f3@invoke-library xu7f3@invoke-library) (set! xu7f5@visit-library (lambda (xu960@lib) (let ((xu962@visit (xu7b1@library-visit-state xu960@lib))) (if (procedure? xu962@visit) (begin (xu7b3@set-library-visit-state! xu960@lib (lambda () (assertion-violation 'visit '"circularity detected" xu960@lib))) (for-each xu7f3@invoke-library (xu7a1@library-vis* xu960@lib)) (xu7b3@set-library-visit-state! xu960@lib (lambda () (assertion-violation 'invoke '"first visit did not return" xu960@lib))) (xu962@visit) (xu7b3@set-library-visit-state! xu960@lib '#t)) (void))))) (set! xu9a6@xu7f5@visit-library xu7f5@visit-library) (set! xu7f7@invoke-library-by-spec (lambda (xu964@spec) (xu7f3@invoke-library (xu7e9@find-library-by-spec/die xu964@spec)))) (set! xu9a7@xu7f7@invoke-library-by-spec xu7f7@invoke-library-by-spec) (set! xu7f9@installed-libraries (lambda xu96c (let ((xu96d (length xu96c))) (if (= xu96d '1) (apply (lambda (xu966@all?) (let xu96a@f ((xu968@ls ((xu783@current-library-collection)))) (if (null? xu968@ls) '() (if (or xu966@all? (xu7c1@library-visible? (car xu968@ls))) (cons (car xu968@ls) (xu96a@f (cdr xu968@ls))) (xu96a@f (cdr xu968@ls)))))) xu96c) (if (= xu96d '0) (apply (lambda () (xu7f9@installed-libraries '#f)) xu96c) (error 'apply '"invalid arg count")))))) (set! xu9a8@xu7f9@installed-libraries xu7f9@installed-libraries) (set! xu7fb@library-spec (lambda (xu96e@x) (begin (if (not (xu78f@library? xu96e@x)) (assertion-violation 'library-spec '"not a library" xu96e@x) (void)) (list (xu791@library-id xu96e@x) (xu795@library-name xu96e@x) (xu799@library-version xu96e@x))))) (set! xu9a9@xu7fb@library-spec xu7fb@library-spec) (void))
(begin (set! xu9ad@build-global-define (unspecified)) (set! xua1e@build-lambda (unspecified)) (set! xua20@build-case-lambda (unspecified)) (set! xua4e@build-sequence (unspecified)) (set! xua50@build-void (unspecified)) (set! xua52@build-letrec (unspecified)) (set! xua54@build-let (unspecified)) (set! xua56@build-named-let (unspecified)) (set! xua58@build-letrec* (unspecified)) (set! xua5a@build-library-letrec* (unspecified)) (set! xua5c@build-receive (unspecified)) (set! xu9ad@build-global-define (lambda (xua5d@x) (xua50@build-void))) (set! xuaeb@xu9ad@build-global-define xu9ad@build-global-define) (set! xua1e@build-lambda (lambda (xua5f@ae xua60@vars xua61@exp) (list 'lambda xua60@vars xua61@exp))) (set! xuaec@xua1e@build-lambda xua1e@build-lambda) (set! xua20@build-case-lambda (lambda (xua65@ae xua66@vars* xua67@exp*) (letrec* ((xua6c@build-error (lambda (xuaa3@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (xua6e@build-pred (lambda (xua8b@ae xua8c@n xua8d@vars) (call-with-values (lambda () (let xua99@f ((xua95@vars xua8d@vars) (xua96@count '0)) (if (pair? xua95@vars) (xua99@f (cdr xua95@vars) (+ xua96@count '1)) (if (null? xua95@vars) (values xua96@count '=) (values xua96@count '>=))))) (lambda (xua9b@xua92 xua9c@xua94) (let ((xua9f@pred xua9c@xua94) (xuaa0@count xua9b@xua92)) (list (list 'primitive xua9f@pred) xua8c@n (list 'quote xuaa0@count))))))) (xua70@build-apply (lambda (xua83@ae xua84@g xua85@vars xua86@exp) (list '(primitive apply) (xua1e@build-lambda xua83@ae xua85@vars xua86@exp) xua84@g))) (xua72@expand-case-lambda (lambda (xua73@ae xua74@vars xua75@exp*) (let ((xua79@g (gensym)) (xua7a@n (gensym))) (list 'lambda xua79@g (xua54@build-let xua73@ae (list xua7a@n) (list (list '(primitive length) xua79@g)) (let xua81@f ((xua7d@vars* xua66@vars*) (xua7e@exp* xua75@exp*)) (if (null? xua7d@vars*) (xua6c@build-error xua73@ae) (list 'if (xua6e@build-pred xua73@ae xua7a@n (car xua7d@vars*)) (xua70@build-apply xua73@ae xua79@g (car xua7d@vars*) (car xua7e@exp*)) (xua81@f (cdr xua7d@vars*) (cdr xua7e@exp*))))))))))) (if (= (length xua67@exp*) '1) (xua1e@build-lambda xua65@ae (car xua66@vars*) (car xua67@exp*)) (xua72@expand-case-lambda xua65@ae xua66@vars* xua67@exp*))))) (set! xuaed@xua20@build-case-lambda xua20@build-case-lambda) (set! xua4e@build-sequence (lambda (xuaa5@ae xuaa6@exps) (let xuaab@loop ((xuaa9@exps xuaa6@exps)) (if (null? (cdr xuaa9@exps)) (car xuaa9@exps) (if (equal? (car xuaa9@exps) (xua50@build-void)) (xuaab@loop (cdr xuaa9@exps)) (cons 'begin xuaa9@exps)))))) (set! xuaee@xua4e@build-sequence xua4e@build-sequence) (set! xua50@build-void (lambda () '((primitive void)))) (set! xuaef@xua50@build-void xua50@build-void) (set! xua52@build-letrec (lambda (xuaad@ae xuaae@vars xuaaf@val-exps xuab0@body-exp) (if (null? xuaae@vars) xuab0@body-exp (list 'letrec (map list xuaae@vars xuaaf@val-exps) xuab0@body-exp)))) (set! xuaf0@xua52@build-letrec xua52@build-letrec) (set! xua54@build-let (lambda (xuab5@ae xuab6@vars xuab7@val-exps xuab8@body-exp) (if (null? xuab6@vars) xuab8@body-exp (list 'let (map list xuab6@vars xuab7@val-exps) xuab8@body-exp)))) (set! xuaf1@xua54@build-let xua54@build-let) (set! xua56@build-named-let (lambda (xuabd@ae xuabe@name xuabf@vars xuac0@val-exps xuac1@body-exp) (list 'let xuabe@name (map list xuabf@vars xuac0@val-exps) xuac1@body-exp))) (set! xuaf2@xua56@build-named-let xua56@build-named-let) (set! xua58@build-letrec* (lambda (xuac7@ae xuac8@vars xuac9@val-exps xuaca@body-exp) (if (null? xuac8@vars) xuaca@body-exp (list 'letrec* (map list xuac8@vars xuac9@val-exps) xuaca@body-exp)))) (set! xuaf3@xua58@build-letrec* xua58@build-letrec*) (set! xua5a@build-library-letrec* (lambda (xuacf@ae xuad0@name xuad1@vars xuad2@locs xuad3@val-exps xuad4@body-exp) (cons 'begin (append (map (lambda (xuadb@var) (cons 'set! (cons xuadb@var '((unspecified))))) xuad1@vars) (append (apply append (map (lambda (xuadd@var xuade@loc xuadf@val-exp) (list (list 'set! xuadd@var xuadf@val-exp) (list 'set! xuade@loc xuadd@var))) xuad1@vars xuad2@locs xuad3@val-exps)) (list xuad4@body-exp)))))) (set! xuaf4@xua5a@build-library-letrec* xua5a@build-library-letrec*) (set! xua5c@build-receive (lambda (xuae3@ae xuae4@vars xuae5@producer xuae6@body*) (begin (display '"************** in ") (cons 'receive (cons xuae4@vars (cons xuae5@producer xuae6@body*)))))) (set! xuaf5@xua5c@build-receive xua5c@build-receive) (void))
(begin (set! xub04@file-options-macro (unspecified)) (set! xub06@set-cons (unspecified)) (set! xub08@set-union (unspecified)) (set! xub0d@top-mark* (unspecified)) (set! xub0f@top-marked? (unspecified)) (set! xub11@gen-lexical (unspecified)) (set! xub13@gen-global (unspecified)) (set! xub15@gen-label (unspecified)) (set! xub17@gen-top-level-label (unspecified)) (set! xub19@gen-define-label+loc (unspecified)) (set! xub1b@gen-define-label (unspecified)) (set! xub25@rib? (unspecified)) (set! xub27@rib-sym* (unspecified)) (set! xub29@set-rib-sym*! (unspecified)) (set! xub2b@rib-mark** (unspecified)) (set! xub2d@set-rib-mark**! (unspecified)) (set! xub2f@rib-label* (unspecified)) (set! xub31@set-rib-label*! (unspecified)) (set! xub33@rib-sealed/freq (unspecified)) (set! xub35@set-rib-sealed/freq! (unspecified)) (set! xub37@rib-cache (unspecified)) (set! xub39@set-rib-cache! (unspecified)) (set! xub3b@dummy (unspecified)) (set! xub3d@make-empty-rib (unspecified)) (set! xub3f@extend-rib! (unspecified)) (set! xub41@extend-rib/nc! (unspecified)) (set! xub43@make-rib-map (unspecified)) (set! xub45@seal-rib! (unspecified)) (set! xub47@unseal-rib! (unspecified)) (set! xub49@make-full-rib (unspecified)) (set! xub4b@rp (unspecified)) (set! xub55@stx? (unspecified)) (set! xub57@stx-expr (unspecified)) (set! xub59@set-stx-expr! (unspecified)) (set! xub5b@stx-mark* (unspecified)) (set! xub5d@set-stx-mark*! (unspecified)) (set! xub5f@stx-subst* (unspecified)) (set! xub61@set-stx-subst*! (unspecified)) (set! xub63@stx-ae* (unspecified)) (set! xub65@set-stx-ae*! (unspecified)) (set! xub67@dummy (unspecified)) (set! xub69@datum->stx (unspecified)) (set! xub6b@gen-mark (unspecified)) (set! xub6d@anti-mark (unspecified)) (set! xub6f@anti-mark? (unspecified)) (set! xub71@mkstx (unspecified)) (set! xub73@add-subst (unspecified)) (set! xub75@add-mark (unspecified)) (set! xub77@syntax-kind? (unspecified)) (set! xub79@syntax-vector->list (unspecified)) (set! xub7b@syntax-pair? (unspecified)) (set! xub7d@syntax-vector? (unspecified)) (set! xub7f@syntax-null? (unspecified)) (set! xub81@syntax-list? (unspecified)) (set! xub83@syntax-car (unspecified)) (set! xub85@syntax-cdr (unspecified)) (set! xub87@syntax->list (unspecified)) (set! xub89@id? (unspecified)) (set! xub8b@id->sym (unspecified)) (set! xub8d@bound-id=? (unspecified)) (set! xub8f@free-id=? (unspecified)) (set! xub91@valid-bound-ids? (unspecified)) (set! xub93@distinct-bound-ids? (unspecified)) (set! xub95@bound-id-member? (unspecified)) (set! xub97@self-evaluating? (unspecified)) (set! xub99@strip-annotations (unspecified)) (set! xub9b@strip (unspecified)) (set! xub9d@stx->datum (unspecified)) (set! xub9f@id->label (unspecified)) (set! xuba1@label->binding (unspecified)) (set! xuba3@make-binding (unspecified)) (set! xuba5@binding-type (unspecified)) (set! xuba7@binding-value (unspecified)) (set! xuba9@raise-unbound-error (unspecified)) (set! xubab@syntax-type (unspecified)) (set! xubb9@sanitize-binding (unspecified)) (set! xubbb@make-variable-transformer (unspecified)) (set! xubbd@variable-transformer? (unspecified)) (set! xubbf@variable-transformer-procedure (unspecified)) (set! xubc1@make-eval-transformer (unspecified)) (set! xud12@parse-define (unspecified)) (set! xud14@parse-define-syntax (unspecified)) (set! xud16@scheme-stx-hashtable (unspecified)) (set! xud18@scheme-stx (unspecified)) (set! xud1a@lexical-var (unspecified)) (set! xud1c@lexical-mutable? (unspecified)) (set! xud1e@set-lexical-mutable! (unspecified)) (set! xud20@add-lexical (unspecified)) (set! xud22@add-lexicals (unspecified)) (set! xud24@letrec-helper (unspecified)) (set! xud26@let-transformer (unspecified)) (set! xud28@letrec-transformer (unspecified)) (set! xud2a@letrec*-transformer (unspecified)) (set! xud2c@fluid-let-syntax-transformer (unspecified)) (set! xud2e@type-descriptor-transformer (unspecified)) (set! xud30@record-type-descriptor-transformer (unspecified)) (set! xud32@record-constructor-descriptor-transformer (unspecified)) (set! xud34@when-macro (unspecified)) (set! xud36@unless-macro (unspecified)) (set! xud38@if-transformer (unspecified)) (set! xud3a@and-transformer (unspecified)) (set! xud3c@or-transformer (unspecified)) (set! xud3e@case-macro (unspecified)) (set! xud40@quote-transformer (unspecified)) (set! xud42@case-lambda-transformer (unspecified)) (set! xud44@lambda-transformer (unspecified)) (set! xud46@bless (unspecified)) (set! xud48@with-syntax-macro (unspecified)) (set! xud4a@invalid-fmls-error (unspecified)) (set! xud4c@let-macro (unspecified)) (set! xud4e@let-values-macro (unspecified)) (set! xud50@let*-values-macro (unspecified)) (set! xud52@trace-lambda-macro (unspecified)) (set! xud54@trace-define-macro (unspecified)) (set! xud56@trace-define-syntax-macro (unspecified)) (set! xud58@trace-let/rec-syntax (unspecified)) (set! xud5a@trace-let-syntax-macro (unspecified)) (set! xud5c@trace-letrec-syntax-macro (unspecified)) (set! xud5e@guard-macro (unspecified)) (set! xud60@define-enumeration-macro (unspecified)) (set! xud62@time-macro (unspecified)) (set! xud64@delay-macro (unspecified)) (set! xud66@assert-macro (unspecified)) (set! xud68@endianness-macro (unspecified)) (set! xud6a@identifier-syntax-macro (unspecified)) (set! xud6c@do-macro (unspecified)) (set! xud6e@let*-macro (unspecified)) (set! xud70@or-macro (unspecified)) (set! xud72@and-macro (unspecified)) (set! xud74@cond-macro (unspecified)) (set! xud76@do-include (unspecified)) (set! xud78@include-macro (unspecified)) (set! xud7a@include-into-macro (unspecified)) (set! xud7c@syntax-rules-macro (unspecified)) (set! xud7e@quasiquote-macro (unspecified)) (set! xud80@quasisyntax-macro (unspecified)) (set! xud82@define-struct-macro (unspecified)) (set! xud84@define-record-type-macro (unspecified)) (set! xud86@define-condition-type-macro (unspecified)) (set! xud88@incorrect-usage-macro (unspecified)) (set! xud8a@parameterize-macro (unspecified)) (set! xud8c@foreign-call-transformer (unspecified)) (set! xud8e@convert-pattern (unspecified)) (set! xud90@syntax-dispatch (unspecified)) (set! xud92@ellipsis? (unspecified)) (set! xud94@underscore? (unspecified)) (set! xud96@verify-literals (unspecified)) (set! xud98@syntax-case-transformer (unspecified)) (set! xud9a@ellipsis-map (unspecified)) (set! xud9c@syntax-transformer (unspecified)) (set! xud9e@core-macro-transformer (unspecified)) (set! xuda0@symbol-macro (unspecified)) (set! xuda2@macro-transformer (unspecified)) (set! xuda4@local-macro-transformer (unspecified)) (set! xuda6@do-macro-call (unspecified)) (set! xuda8@chi-macro (unspecified)) (set! xudaa@chi-local-macro (unspecified)) (set! xudac@chi-global-macro (unspecified)) (set! xudae@chi-expr* (unspecified)) (set! xudb0@chi-application (unspecified)) (set! xudb2@chi-expr (unspecified)) (set! xudb4@chi-set! (unspecified)) (set! xudb6@verify-formals (unspecified)) (set! xudb8@chi-lambda-clause (unspecified)) (set! xudba@chi-lambda-clause* (unspecified)) (set! xudbc@chi-defun (unspecified)) (set! xudbe@chi-rhs (unspecified)) (set! xudc0@expand-interaction-rhs*/init* (unspecified)) (set! xudc2@chi-rhs* (unspecified)) (set! xudc4@find-bound=? (unspecified)) (set! xudc6@find-dups (unspecified)) (set! xudc8@chi-internal (unspecified)) (set! xudca@parse-module (unspecified)) (set! xudd4@module-interface? (unspecified)) (set! xudd6@module-interface-first-mark (unspecified)) (set! xudd8@set-module-interface-first-mark! (unspecified)) (set! xudda@module-interface-exp-id-vec (unspecified)) (set! xuddc@set-module-interface-exp-id-vec! (unspecified)) (set! xudde@module-interface-exp-lab-vec (unspecified)) (set! xude0@set-module-interface-exp-lab-vec! (unspecified)) (set! xude2@dummy (unspecified)) (set! xude4@module-interface-exp-id* (unspecified)) (set! xude6@chi-internal-module (unspecified)) (set! xude8@chi-body* (unspecified)) (set! xudea@expand-transformer (unspecified)) (set! xudec@parse-exports (unspecified)) (set! xudee@parse-library-name (unspecified)) (set! xudf0@parse-library (unspecified)) (set! xudf2@parse-import-spec* (unspecified)) (set! xudf4@make-top-rib (unspecified)) (set! xudf6@make-collector (unspecified)) (set! xudf8@inv-collector (unspecified)) (set! xudfa@vis-collector (unspecified)) (set! xudfc@imp-collector (unspecified)) (set! xudfe@chi-library-internal (unspecified)) (set! xue00@chi-interaction-expr (unspecified)) (set! xue02@library-body-expander (unspecified)) (set! xue04@core-library-expander (unspecified)) (set! xue06@parse-top-level-program (unspecified)) (set! xue08@top-level-expander (unspecified)) (set! xue0a@rp (unspecified)) (set! xue14@env? (unspecified)) (set! xue16@env-names (unspecified)) (set! xue18@set-env-names! (unspecified)) (set! xue1a@env-labels (unspecified)) (set! xue1c@set-env-labels! (unspecified)) (set! xue1e@env-itc (unspecified)) (set! xue20@set-env-itc! (unspecified)) (set! xue22@dummy (unspecified)) (set! xue24@rp (unspecified)) (set! xue2e@interaction-env? (unspecified)) (set! xue30@interaction-env-rib (unspecified)) (set! xue32@set-interaction-env-rib! (unspecified)) (set! xue34@interaction-env-r (unspecified)) (set! xue36@set-interaction-env-r! (unspecified)) (set! xue38@interaction-env-locs (unspecified)) (set! xue3a@set-interaction-env-locs! (unspecified)) (set! xue3c@dummy (unspecified)) (set! xue3e@interaction-environment-symbols (unspecified)) (set! xue40@environment-bindings (unspecified)) (set! xue42@parse-binding (unspecified)) (set! xue44@environment? (unspecified)) (set! xue46@environment-symbols (unspecified)) (set! xue48@environment (unspecified)) (set! xue4a@null-environment (unspecified)) (set! xue4c@scheme-report-environment (unspecified)) (set! xue4e@expand (unspecified)) (set! xue50@eval (unspecified)) (set! xue52@library-expander (unspecified)) (set! xue54@boot-library-expand (unspecified)) (set! xue56@rev-map-append (unspecified)) (set! xue58@build-exports (unspecified)) (set! xue5a@make-export-subst (unspecified)) (set! xue5c@make-export-env/macros (unspecified)) (set! xue5e@generate-temporaries (unspecified)) (set! xue60@free-identifier=? (unspecified)) (set! xue62@bound-identifier=? (unspecified)) (set! xue64@make-source-condition (unspecified)) (set! xue66@extract-position-condition (unspecified)) (set! xue68@expression-position (unspecified)) (set! xue6a@assertion-error (unspecified)) (set! xue6c@syntax-error (unspecified)) (set! xue6e@syntax-violation* (unspecified)) (set! xue70@syntax-violation (unspecified)) (set! xue72@identifier? (unspecified)) (set! xue74@datum->syntax (unspecified)) (set! xue76@syntax->datum (unspecified)) (set! xue78@ungensym-all (unspecified)) (set! xue7a@compile-r6rs-top-level (unspecified)) (set! xue7c@pre-compile-r6rs-top-level (unspecified)) (set! xue7e@interaction-environment (unspecified)) (set! xue80@top-level-context (unspecified)) (set! xub04@file-options-macro (lambda (xue81@x) (letrec* ((xue84@valid-option? (lambda (xue8d@x) (and (xub89@id? xue8d@x) (memq (xub8b@id->sym xue8d@x) '(no-fail no-create no-truncate)))))) (let ((xue85@t xue81@x)) (let ((xue87@ls/false (xud90@syntax-dispatch xue85@t '(_ . each-any)))) (if (and xue87@ls/false (apply (lambda (xue89@opt*) (for-all xue84@valid-option? xue89@opt*)) xue87@ls/false)) (apply (lambda (xue8b@opt*) (xud46@bless (list 'make-file-options (list 'quote xue8b@opt*)))) xue87@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xue85@t))))))) (set! xu280d@xub04@file-options-macro xub04@file-options-macro) (set! xub06@set-cons (lambda (xue8f@x xue90@ls) (if (memq xue8f@x xue90@ls) xue90@ls (cons xue8f@x xue90@ls)))) (set! xu280e@xub06@set-cons xub06@set-cons) (set! xub08@set-union (lambda (xue93@ls1 xue94@ls2) (if (null? xue93@ls1) xue94@ls2 (if (memq (car xue93@ls1) xue94@ls2) (xub08@set-union (cdr xue93@ls1) xue94@ls2) (cons (car xue93@ls1) (xub08@set-union (cdr xue93@ls1) xue94@ls2)))))) (set! xu280f@xub08@set-union xub08@set-union) (set! xub0d@top-mark* '(top)) (set! xu2810@xub0d@top-mark* xub0d@top-mark*) (set! xub0f@top-marked? (lambda (xue97@m*) (memq 'top xue97@m*))) (set! xu2811@xub0f@top-marked? xub0f@top-marked?) (set! xub11@gen-lexical (lambda (xue99@sym) (if (symbol? xue99@sym) (gensym xue99@sym) (if (xub55@stx? xue99@sym) (xub11@gen-lexical (xub8b@id->sym xue99@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" xue99@sym))))) (set! xu2812@xub11@gen-lexical xub11@gen-lexical) (set! xub13@gen-global (lambda (xue9b@x) (xub11@gen-lexical xue9b@x))) (set! xu2813@xub13@gen-global xub13@gen-global) (set! xub15@gen-label (lambda (xue9d@_) (gensym))) (set! xu2814@xub15@gen-label xub15@gen-label) (set! xub17@gen-top-level-label (lambda (xue9f@id xuea0@rib) (letrec* ((xuea4@find (lambda (xueaf@sym xueb0@mark* xueb1@sym* xueb2@mark** xueb3@label*) (and (pair? xueb1@sym*) (if (and (eq? xueaf@sym (car xueb1@sym*)) (same-marks? xueb0@mark* (car xueb2@mark**))) (car xueb3@label*) (xuea4@find xueaf@sym xueb0@mark* (cdr xueb1@sym*) (cdr xueb2@mark**) (cdr xueb3@label*))))))) (let ((xuea5@sym (xub8b@id->sym xue9f@id)) (xuea6@mark* (xub5b@stx-mark* xue9f@id))) (let ((xuea9@sym* (xub27@rib-sym* xuea0@rib))) (let ((xueab@t (and (memq xuea5@sym (xub27@rib-sym* xuea0@rib)) (xuea4@find xuea5@sym xuea6@mark* xuea9@sym* (xub2b@rib-mark** xuea0@rib) (xub2f@rib-label* xuea0@rib))))) (if xueab@t ((lambda (xuead@label) (if (xu9a4@xu7f1@imported-label->binding xuead@label) (gensym) xuead@label)) xueab@t) (gensym)))))))) (set! xu2815@xub17@gen-top-level-label xub17@gen-top-level-label) (set! xub19@gen-define-label+loc (lambda (xueb9@id xueba@rib) (let ((xuebd@t (xue80@top-level-context))) (if xuebd@t ((lambda (xuebf@env) (let ((xuec1@label (xub17@gen-top-level-label xueb9@id xueba@rib)) (xuec2@locs (xue38@interaction-env-locs xuebf@env))) (values xuec1@label (let ((xuec5@t (assq xuec1@label xuec2@locs))) (if xuec5@t (cdr xuec5@t) (let ((xuec7@loc (xub11@gen-lexical xueb9@id))) (begin (xue3a@set-interaction-env-locs! xuebf@env (cons (cons xuec1@label xuec7@loc) xuec2@locs)) xuec7@loc))))))) xuebd@t) (values (gensym) (xub11@gen-lexical xueb9@id)))))) (set! xu2816@xub19@gen-define-label+loc xub19@gen-define-label+loc) (set! xub1b@gen-define-label (lambda (xuec9@id xueca@rib) (if (xue80@top-level-context) (xub17@gen-top-level-label xuec9@id xueca@rib) (gensym)))) (set! xu2817@xub1b@gen-define-label xub1b@gen-define-label) (set! xub25@rib? (lambda (xuecd@x) (and (simple-struct? xuecd@x) (eq? (simple-struct-name xuecd@x) 'rib)))) (set! xu2818@xub25@rib? xub25@rib?) (set! xub27@rib-sym* (lambda (xuecf@x) (simple-struct-ref xuecf@x '0))) (set! xu2819@xub27@rib-sym* xub27@rib-sym*) (set! xub29@set-rib-sym*! (lambda (xued1@x xued2@val) (simple-struct-set! xued1@x '0 xued2@val))) (set! xu281a@xub29@set-rib-sym*! xub29@set-rib-sym*!) (set! xub2b@rib-mark** (lambda (xued5@x) (simple-struct-ref xued5@x '1))) (set! xu281b@xub2b@rib-mark** xub2b@rib-mark**) (set! xub2d@set-rib-mark**! (lambda (xued7@x xued8@val) (simple-struct-set! xued7@x '1 xued8@val))) (set! xu281c@xub2d@set-rib-mark**! xub2d@set-rib-mark**!) (set! xub2f@rib-label* (lambda (xuedb@x) (simple-struct-ref xuedb@x '2))) (set! xu281d@xub2f@rib-label* xub2f@rib-label*) (set! xub31@set-rib-label*! (lambda (xuedd@x xuede@val) (simple-struct-set! xuedd@x '2 xuede@val))) (set! xu281e@xub31@set-rib-label*! xub31@set-rib-label*!) (set! xub33@rib-sealed/freq (lambda (xuee1@x) (simple-struct-ref xuee1@x '3))) (set! xu281f@xub33@rib-sealed/freq xub33@rib-sealed/freq) (set! xub35@set-rib-sealed/freq! (lambda (xuee3@x xuee4@val) (simple-struct-set! xuee3@x '3 xuee4@val))) (set! xu2820@xub35@set-rib-sealed/freq! xub35@set-rib-sealed/freq!) (set! xub37@rib-cache (lambda (xuee7@x) (simple-struct-ref xuee7@x '4))) (set! xu2821@xub37@rib-cache xub37@rib-cache) (set! xub39@set-rib-cache! (lambda (xuee9@x xueea@val) (simple-struct-set! xuee9@x '4 xueea@val))) (set! xu2822@xub39@set-rib-cache! xub39@set-rib-cache!) (set! xub3b@dummy '3) (set! xu2823@xub3b@dummy xub3b@dummy) (set! xub3d@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! xu2824@xub3d@make-empty-rib xub3d@make-empty-rib) (set! xub3f@extend-rib! (lambda (xueed@rib xueee@id xueef@label) (letrec* ((xuef4@find (lambda (xuf01@sym xuf02@mark* xuf03@sym* xuf04@mark** xuf05@label*) (and (pair? xuf03@sym*) (if (and (eq? xuf01@sym (car xuf03@sym*)) (same-marks? xuf02@mark* (car xuf04@mark**))) xuf05@label* (xuef4@find xuf01@sym xuf02@mark* (cdr xuf03@sym*) (cdr xuf04@mark**) (cdr xuf05@label*))))))) (begin (if (xub33@rib-sealed/freq xueed@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" xueed@rib) (void)) (let ((xuef5@sym (xub8b@id->sym xueee@id)) (xuef6@mark* (xub5b@stx-mark* xueee@id))) (let ((xuef9@sym* (xub27@rib-sym* xueed@rib))) (let ((xuefb@t (and (memq xuef5@sym (xub27@rib-sym* xueed@rib)) (xuef4@find xuef5@sym xuef6@mark* xuef9@sym* (xub2b@rib-mark** xueed@rib) (xub2f@rib-label* xueed@rib))))) (if xuefb@t ((lambda (xuefd@p) (if (not (eq? xueef@label (car xuefd@p))) (if (xue80@top-level-context) (set-car! xuefd@p xueef@label) (xue70@syntax-violation '#f '"multiple definitions of identifier" xueee@id)) (void))) xuefb@t) (begin (if (xub37@rib-cache xueed@rib) (hashtable-update! (xub37@rib-cache xueed@rib) xuef5@sym (lambda (xueff@e) (cons (cons xuef6@mark* xueef@label) xueff@e)) '()) (void)) (xub29@set-rib-sym*! xueed@rib (cons xuef5@sym xuef9@sym*)) (xub2d@set-rib-mark**! xueed@rib (cons xuef6@mark* (xub2b@rib-mark** xueed@rib))) (xub31@set-rib-label*! xueed@rib (cons xueef@label (xub2f@rib-label* xueed@rib)))))))))))) (set! xu2825@xub3f@extend-rib! xub3f@extend-rib!) (set! xub41@extend-rib/nc! (lambda (xuf0b@rib xuf0c@id xuf0d@label) (let ((xuf11@sym (xub8b@id->sym xuf0c@id)) (xuf12@mark* (xub5b@stx-mark* xuf0c@id))) (let ((xuf15@sym* (xub27@rib-sym* xuf0b@rib))) (begin (if (xub37@rib-cache xuf0b@rib) (hashtable-update! (xub37@rib-cache xuf0b@rib) xuf11@sym (lambda (xuf17@e) (cons (cons xuf12@mark* xuf0d@label) xuf17@e)) '()) (void)) (xub29@set-rib-sym*! xuf0b@rib (cons xuf11@sym xuf15@sym*)) (xub2d@set-rib-mark**! xuf0b@rib (cons xuf12@mark* (xub2b@rib-mark** xuf0b@rib))) (xub31@set-rib-label*! xuf0b@rib (cons xuf0d@label (xub2f@rib-label* xuf0b@rib)))))))) (set! xu2826@xub41@extend-rib/nc! xub41@extend-rib/nc!) (set! xub43@make-rib-map (lambda (xuf19@sym*) (let ((xuf1b@ht (make-eq-hashtable))) (let xuf21@f ((xuf1d@i '0) (xuf1e@sym* xuf19@sym*)) (if (null? xuf1e@sym*) xuf1b@ht (begin (hashtable-update! xuf1b@ht (car xuf1e@sym*) (lambda (xuf23@x) (cons xuf1d@i xuf23@x)) '()) (xuf21@f (+ xuf1d@i '1) (cdr xuf1e@sym*)))))))) (set! xu2827@xub43@make-rib-map xub43@make-rib-map) (set! xub45@seal-rib! (lambda (xuf25@rib) (let ((xuf27@sym* (xub27@rib-sym* xuf25@rib))) (if (not (null? xuf27@sym*)) (begin (xub29@set-rib-sym*! xuf25@rib (list->vector xuf27@sym*)) (xub2d@set-rib-mark**! xuf25@rib (list->vector (xub2b@rib-mark** xuf25@rib))) (xub31@set-rib-label*! xuf25@rib (list->vector (xub2f@rib-label* xuf25@rib))) (xub35@set-rib-sealed/freq! xuf25@rib (xub43@make-rib-map xuf27@sym*))) (void))))) (set! xu2828@xub45@seal-rib! xub45@seal-rib!) (set! xub47@unseal-rib! (lambda (xuf29@rib) (if (xub33@rib-sealed/freq xuf29@rib) (begin (xub35@set-rib-sealed/freq! xuf29@rib '#f) (xub29@set-rib-sym*! xuf29@rib (vector->list (xub27@rib-sym* xuf29@rib))) (xub2d@set-rib-mark**! xuf29@rib (vector->list (xub2b@rib-mark** xuf29@rib))) (xub31@set-rib-label*! xuf29@rib (vector->list (xub2f@rib-label* xuf29@rib)))) (void)))) (set! xu2829@xub47@unseal-rib! xub47@unseal-rib!) (set! xub49@make-full-rib (lambda (xuf2b@id* xuf2c@label*) (let ((xuf2f@r (make-simple-struct 'rib '6 (list (map xub8b@id->sym xuf2b@id*) (map xub5b@stx-mark* xuf2b@id*) xuf2c@label* '#f '#f)))) (begin (xub45@seal-rib! xuf2f@r) xuf2f@r)))) (set! xu282a@xub49@make-full-rib xub49@make-full-rib) (set! xub4b@rp (xu6d6@xu5b1@make-record-printer 'stx (lambda (xuf31@x xuf32@p xuf33@wr) (begin (display '"#<syntax " xuf32@p) (write (xub9d@stx->datum xuf31@x) xuf32@p) (let ((xuf37@expr (xub57@stx-expr xuf31@x))) (if (xu6cd@xu59f@annotation? xuf37@expr) (let ((xuf39@src (xu6ce@xu5a1@annotation-source xuf37@expr))) (if (pair? xuf39@src) (begin (display '" [" xuf32@p) (display (cdr xuf39@src) xuf32@p) (display '" of " xuf32@p) (display (car xuf39@src) xuf32@p) (display '"]" xuf32@p)) (void))) (void))) (display '">" xuf32@p))))) (set! xu282b@xub4b@rp xub4b@rp) (set! xub55@stx? (lambda (xuf3b@x) (and (simple-struct? xuf3b@x) (eq? (simple-struct-name xuf3b@x) 'stx)))) (set! xu282c@xub55@stx? xub55@stx?) (set! xub57@stx-expr (lambda (xuf3d@x) (simple-struct-ref xuf3d@x '0))) (set! xu282d@xub57@stx-expr xub57@stx-expr) (set! xub59@set-stx-expr! (lambda (xuf3f@x xuf40@val) (simple-struct-set! xuf3f@x '0 xuf40@val))) (set! xu282e@xub59@set-stx-expr! xub59@set-stx-expr!) (set! xub5b@stx-mark* (lambda (xuf43@x) (simple-struct-ref xuf43@x '1))) (set! xu282f@xub5b@stx-mark* xub5b@stx-mark*) (set! xub5d@set-stx-mark*! (lambda (xuf45@x xuf46@val) (simple-struct-set! xuf45@x '1 xuf46@val))) (set! xu2830@xub5d@set-stx-mark*! xub5d@set-stx-mark*!) (set! xub5f@stx-subst* (lambda (xuf49@x) (simple-struct-ref xuf49@x '2))) (set! xu2831@xub5f@stx-subst* xub5f@stx-subst*) (set! xub61@set-stx-subst*! (lambda (xuf4b@x xuf4c@val) (simple-struct-set! xuf4b@x '2 xuf4c@val))) (set! xu2832@xub61@set-stx-subst*! xub61@set-stx-subst*!) (set! xub63@stx-ae* (lambda (xuf4f@x) (simple-struct-ref xuf4f@x '3))) (set! xu2833@xub63@stx-ae* xub63@stx-ae*) (set! xub65@set-stx-ae*! (lambda (xuf51@x xuf52@val) (simple-struct-set! xuf51@x '3 xuf52@val))) (set! xu2834@xub65@set-stx-ae*! xub65@set-stx-ae*!) (set! xub67@dummy '3) (set! xu2835@xub67@dummy xub67@dummy) (set! xub69@datum->stx (lambda (xuf55@id xuf56@datum) (make-simple-struct 'stx '5 (list xuf56@datum (xub5b@stx-mark* xuf55@id) (xub5f@stx-subst* xuf55@id) (xub63@stx-ae* xuf55@id))))) (set! xu2836@xub69@datum->stx xub69@datum->stx) (set! xub6b@gen-mark (lambda () (string '#\m))) (set! xu2837@xub6b@gen-mark xub6b@gen-mark) (set! xub6d@anti-mark '#f) (set! xu2838@xub6d@anti-mark xub6d@anti-mark) (set! xub6f@anti-mark? not) (set! xu2839@xub6f@anti-mark? xub6f@anti-mark?) (set! xub71@mkstx (lambda (xuf59@e xuf5a@m* xuf5b@s* xuf5c@ae*) (if (and (xub55@stx? xuf59@e) (not (xub0f@top-marked? xuf5a@m*))) (call-with-values (lambda () (join-wraps xuf5a@m* xuf5b@s* xuf5c@ae* xuf59@e)) (lambda (xuf67@xuf62 xuf68@xuf64 xuf69@xuf66) (let ((xuf6d@ae* xuf69@xuf66) (xuf6e@s* xuf68@xuf64) (xuf6f@m* xuf67@xuf62)) (make-simple-struct 'stx '5 (list (xub57@stx-expr xuf59@e) xuf6f@m* xuf6e@s* xuf6d@ae*))))) (make-simple-struct 'stx '5 (list xuf59@e xuf5a@m* xuf5b@s* xuf5c@ae*))))) (set! xu283a@xub71@mkstx xub71@mkstx) (set! xub73@add-subst (lambda (xuf73@subst xuf74@e) (xub71@mkstx xuf74@e '() (list xuf73@subst) '()))) (set! xu283b@xub73@add-subst xub73@add-subst) (set! xub75@add-mark (lambda (xuf77@mark xuf78@subst xuf79@expr xuf7a@ae) (letrec* ((xuf80@merge-ae* (lambda (xufa7@ls1 xufa8@ls2) (if (and (pair? xufa7@ls1) (pair? xufa8@ls2) (not (car xufa8@ls2))) (xuf82@cancel xufa7@ls1 xufa8@ls2) (append xufa7@ls1 xufa8@ls2)))) (xuf82@cancel (lambda (xuf9d@ls1 xuf9e@ls2) (let xufa5@f ((xufa1@x (car xuf9d@ls1)) (xufa2@ls1 (cdr xuf9d@ls1))) (if (null? xufa2@ls1) (cdr xuf9e@ls2) (cons xufa1@x (xufa5@f (car xufa2@ls1) (cdr xufa2@ls1))))))) (xuf84@f (lambda (xuf85@e xuf86@m xuf87@s1* xuf88@ae*) (if (pair? xuf85@e) (let ((xuf8d@a (xuf84@f (car xuf85@e) xuf86@m xuf87@s1* xuf88@ae*)) (xuf8e@d (xuf84@f (cdr xuf85@e) xuf86@m xuf87@s1* xuf88@ae*))) (if (eq? xuf8d@a xuf8e@d) xuf85@e (cons xuf8d@a xuf8e@d))) (if (vector? xuf85@e) (let ((xuf91@ls1 (vector->list xuf85@e))) (let ((xuf93@ls2 (map (lambda (xuf95@x) (xuf84@f xuf95@x xuf86@m xuf87@s1* xuf88@ae*)) xuf91@ls1))) (if (for-all eq? xuf91@ls1 xuf93@ls2) xuf85@e (list->vector xuf93@ls2)))) (if (xub55@stx? xuf85@e) (let ((xuf97@m* (xub5b@stx-mark* xuf85@e)) (xuf98@s2* (xub5f@stx-subst* xuf85@e))) (if (null? xuf97@m*) (xuf84@f (xub57@stx-expr xuf85@e) xuf86@m (append xuf87@s1* xuf98@s2*) (xuf80@merge-ae* xuf88@ae* (xub63@stx-ae* xuf85@e))) (if (eq? (car xuf97@m*) xub6d@anti-mark) (make-simple-struct 'stx '5 (list (xub57@stx-expr xuf85@e) (cdr xuf97@m*) (cdr (append xuf87@s1* xuf98@s2*)) (xuf80@merge-ae* xuf88@ae* (xub63@stx-ae* xuf85@e)))) (make-simple-struct 'stx '5 (list (xub57@stx-expr xuf85@e) (cons xuf86@m xuf97@m*) (let ((xuf9b@s* (cons 'shift (append xuf87@s1* xuf98@s2*)))) (if xuf78@subst (cons xuf78@subst xuf9b@s*) xuf9b@s*)) (xuf80@merge-ae* xuf88@ae* (xub63@stx-ae* xuf85@e))))))) (if (symbol? xuf85@e) (xue70@syntax-violation '#f '"raw symbol encountered in output of macro" xuf79@expr xuf85@e) (make-simple-struct 'stx '5 (list xuf85@e (list xuf86@m) xuf87@s1* xuf88@ae*))))))))) (xub71@mkstx (xuf84@f xuf79@expr xuf77@mark '() '()) '() '() (list xuf7a@ae))))) (set! xu283c@xub75@add-mark xub75@add-mark) (set! xub77@syntax-kind? (lambda (xufab@x xufac@p?) (if (xub55@stx? xufab@x) (xub77@syntax-kind? (xub57@stx-expr xufab@x) xufac@p?) (if (xu6cd@xu59f@annotation? xufab@x) (xub77@syntax-kind? (xu6cf@xu5a3@annotation-expression xufab@x) xufac@p?) (xufac@p? xufab@x))))) (set! xu283d@xub77@syntax-kind? xub77@syntax-kind?) (set! xub79@syntax-vector->list (lambda (xufaf@x) (if (xub55@stx? xufaf@x) (let ((xufb1@ls (xub79@syntax-vector->list (xub57@stx-expr xufaf@x))) (xufb2@m* (xub5b@stx-mark* xufaf@x)) (xufb3@s* (xub5f@stx-subst* xufaf@x)) (xufb4@ae* (xub63@stx-ae* xufaf@x))) (map (lambda (xufb9@x) (xub71@mkstx xufb9@x xufb2@m* xufb3@s* xufb4@ae*)) xufb1@ls)) (if (xu6cd@xu59f@annotation? xufaf@x) (xub79@syntax-vector->list (xu6cf@xu5a3@annotation-expression xufaf@x)) (if (vector? xufaf@x) (vector->list xufaf@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" xufaf@x)))))) (set! xu283e@xub79@syntax-vector->list xub79@syntax-vector->list) (set! xub7b@syntax-pair? (lambda (xufbb@x) (xub77@syntax-kind? xufbb@x pair?))) (set! xu283f@xub7b@syntax-pair? xub7b@syntax-pair?) (set! xub7d@syntax-vector? (lambda (xufbd@x) (xub77@syntax-kind? xufbd@x vector?))) (set! xu2840@xub7d@syntax-vector? xub7d@syntax-vector?) (set! xub7f@syntax-null? (lambda (xufbf@x) (xub77@syntax-kind? xufbf@x null?))) (set! xu2841@xub7f@syntax-null? xub7f@syntax-null?) (set! xub81@syntax-list? (lambda (xufc1@x) (or (xub7f@syntax-null? xufc1@x) (and (xub7b@syntax-pair? xufc1@x) (xub81@syntax-list? (xub85@syntax-cdr xufc1@x)))))) (set! xu2842@xub81@syntax-list? xub81@syntax-list?) (set! xub83@syntax-car (lambda (xufc3@x) (if (xub55@stx? xufc3@x) (xub71@mkstx (xub83@syntax-car (xub57@stx-expr xufc3@x)) (xub5b@stx-mark* xufc3@x) (xub5f@stx-subst* xufc3@x) (xub63@stx-ae* xufc3@x)) (if (xu6cd@xu59f@annotation? xufc3@x) (xub83@syntax-car (xu6cf@xu5a3@annotation-expression xufc3@x)) (if (pair? xufc3@x) (car xufc3@x) (assertion-violation 'syntax-car '"BUG: not a pair" xufc3@x)))))) (set! xu2843@xub83@syntax-car xub83@syntax-car) (set! xub85@syntax-cdr (lambda (xufc5@x) (if (xub55@stx? xufc5@x) (xub71@mkstx (xub85@syntax-cdr (xub57@stx-expr xufc5@x)) (xub5b@stx-mark* xufc5@x) (xub5f@stx-subst* xufc5@x) (xub63@stx-ae* xufc5@x)) (if (xu6cd@xu59f@annotation? xufc5@x) (xub85@syntax-cdr (xu6cf@xu5a3@annotation-expression xufc5@x)) (if (pair? xufc5@x) (cdr xufc5@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" xufc5@x)))))) (set! xu2844@xub85@syntax-cdr xub85@syntax-cdr) (set! xub87@syntax->list (lambda (xufc7@x) (if (xub7b@syntax-pair? xufc7@x) (cons (xub83@syntax-car xufc7@x) (xub87@syntax->list (xub85@syntax-cdr xufc7@x))) (if (xub7f@syntax-null? xufc7@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" xufc7@x))))) (set! xu2845@xub87@syntax->list xub87@syntax->list) (set! xub89@id? (lambda (xufc9@x) (and (xub55@stx? xufc9@x) (symbol? (xub57@stx-expr xufc9@x))))) (set! xu2846@xub89@id? xub89@id?) (set! xub8b@id->sym (lambda (xufcb@x) (xub57@stx-expr xufcb@x))) (set! xu2847@xub8b@id->sym xub8b@id->sym) (set! xub8d@bound-id=? (lambda (xufcd@x xufce@y) (and (eq? (xub8b@id->sym xufcd@x) (xub8b@id->sym xufce@y)) (same-marks? (xub5b@stx-mark* xufcd@x) (xub5b@stx-mark* xufce@y))))) (set! xu2848@xub8d@bound-id=? xub8d@bound-id=?) (set! xub8f@free-id=? (lambda (xufd1@i xufd2@j) (let ((xufd5@t0 (id->real-label xufd1@i)) (xufd6@t1 (id->real-label xufd2@j))) (if (or xufd5@t0 xufd6@t1) (eq? xufd5@t0 xufd6@t1) (eq? (xub8b@id->sym xufd1@i) (xub8b@id->sym xufd2@j)))))) (set! xu2849@xub8f@free-id=? xub8f@free-id=?) (set! xub91@valid-bound-ids? (lambda (xufd9@id*) (and (for-all xub89@id? xufd9@id*) (xub93@distinct-bound-ids? xufd9@id*)))) (set! xu284a@xub91@valid-bound-ids? xub91@valid-bound-ids?) (set! xub93@distinct-bound-ids? (lambda (xufdb@id*) (or (null? xufdb@id*) (and (not (xub95@bound-id-member? (car xufdb@id*) (cdr xufdb@id*))) (xub93@distinct-bound-ids? (cdr xufdb@id*)))))) (set! xu284b@xub93@distinct-bound-ids? xub93@distinct-bound-ids?) (set! xub95@bound-id-member? (lambda (xufdd@id xufde@id*) (and (pair? xufde@id*) (or (xub8d@bound-id=? xufdd@id (car xufde@id*)) (xub95@bound-id-member? xufdd@id (cdr xufde@id*)))))) (set! xu284c@xub95@bound-id-member? xub95@bound-id-member?) (set! xub97@self-evaluating? (lambda (xufe1@x) (or (number? xufe1@x) (string? xufe1@x) (char? xufe1@x) (boolean? xufe1@x) (regexp? xufe1@x) (bytevector? xufe1@x)))) (set! xu284d@xub97@self-evaluating? xub97@self-evaluating?) (set! xub99@strip-annotations (lambda (xufe3@x) (if (pair? xufe3@x) (cons (xub99@strip-annotations (car xufe3@x)) (xub99@strip-annotations (cdr xufe3@x))) (if (vector? xufe3@x) (vector-map xub99@strip-annotations xufe3@x) (if (xu6cd@xu59f@annotation? xufe3@x) (xu6cc@xu59d@annotation-stripped xufe3@x) xufe3@x))))) (set! xu284e@xub99@strip-annotations xub99@strip-annotations) (set! xub9b@strip (lambda (xufe5@x xufe6@m*) (if (xub0f@top-marked? xufe6@m*) (if (or (xu6cd@xu59f@annotation? xufe5@x) (and (pair? xufe5@x) (xu6cd@xu59f@annotation? (car xufe5@x))) (and (vector? xufe5@x) (> (vector-length xufe5@x) '0) (xu6cd@xu59f@annotation? (vector-ref xufe5@x '0)))) (xub99@strip-annotations xufe5@x) xufe5@x) (let xufeb@f ((xufe9@x xufe5@x)) (if (xub55@stx? xufe9@x) (begin (if (pair? (xub57@stx-expr xufe9@x)) (begin (set-source-info! (xub57@stx-expr xufe9@x) '#f) (set-source-info! (cdr (xub57@stx-expr xufe9@x)) '#f) (set-source-info! (car (xub57@stx-expr xufe9@x)) '#f)) (void)) (xub9b@strip (xub57@stx-expr xufe9@x) (xub5b@stx-mark* xufe9@x))) (if (xu6cd@xu59f@annotation? xufe9@x) (xu6cc@xu59d@annotation-stripped xufe9@x) (if (pair? xufe9@x) (let ((xufed@a (xufeb@f (car xufe9@x))) (xufee@d (xufeb@f (cdr xufe9@x)))) (if (and (eq? xufed@a (car xufe9@x)) (eq? xufee@d (cdr xufe9@x))) xufe9@x (cons xufed@a xufee@d))) (if (vector? xufe9@x) (let ((xuff1@old (vector->list xufe9@x))) (let ((xuff3@new (map xufeb@f xuff1@old))) (if (for-all eq? xuff1@old xuff3@new) xufe9@x (list->vector xuff3@new)))) xufe9@x)))))))) (set! xu284f@xub9b@strip xub9b@strip) (set! xub9d@stx->datum (lambda (xuff5@x) (xub9b@strip xuff5@x '()))) (set! xu2850@xub9d@stx->datum xub9d@stx->datum) (set! xub9f@id->label (lambda (xuff7@id) (or (id->real-label xuff7@id) (let ((xuff9@t (xue80@top-level-context))) (if xuff9@t ((lambda (xuffb@env) (let ((xuffd@rib (xue30@interaction-env-rib xuffb@env))) (call-with-values (lambda () (xub19@gen-define-label+loc xuff7@id xuffd@rib)) (lambda (xu1003@xu1000 xu1004@xu1002) (let ((xu1007@loc_ xu1004@xu1002) (xu1008@lab xu1003@xu1000)) (begin (xub3f@extend-rib! xuffd@rib xuff7@id xu1008@lab) xu1008@lab)))))) xuff9@t) '#f))))) (set! xu2851@xub9f@id->label xub9f@id->label) (set! xuba1@label->binding (lambda (xu100b@x xu100c@r) (let ((xu100f@t (xu9a4@xu7f1@imported-label->binding xu100b@x))) (if xu100f@t ((lambda (xu1011@b) (if (and (pair? xu1011@b) (eq? (car xu1011@b) '$core-rtd)) (cons '$rtd (map xud46@bless (cdr xu1011@b))) (if (and (pair? xu1011@b) (eq? (car xu1011@b) 'global-rtd)) (let ((xu1013@lib (cadr xu1011@b)) (xu1014@loc (cddr xu1011@b))) (cons '$rtd (symbol-value xu1014@loc))) xu1011@b))) xu100f@t) (let ((xu1017@t (assq xu100b@x xu100c@r))) (if xu1017@t (cdr xu1017@t) (let ((xu1019@t (xue80@top-level-context))) (if xu1019@t ((lambda (xu101b@env) (let ((xu101d@t (assq xu100b@x (xue38@interaction-env-locs xu101b@env)))) (if xu101d@t ((lambda (xu101f@p) (cons* 'lexical (cdr xu101f@p) '#f)) xu101d@t) '(displaced-lexical . #f)))) xu1019@t) '(displaced-lexical . #f))))))))) (set! xu2852@xuba1@label->binding xuba1@label->binding) (set! xuba3@make-binding cons) (set! xu2853@xuba3@make-binding xuba3@make-binding) (set! xuba5@binding-type car) (set! xu2854@xuba5@binding-type xuba5@binding-type) (set! xuba7@binding-value cdr) (set! xu2855@xuba7@binding-value xuba7@binding-value) (set! xuba9@raise-unbound-error (lambda (xu1021@id) (xue6e@syntax-violation* '#f '"unbound identifier" xu1021@id (make-undefined-violation)))) (set! xu2856@xuba9@raise-unbound-error xuba9@raise-unbound-error) (set! xubab@syntax-type (lambda (xu1023@e xu1024@r) (if (xub89@id? xu1023@e) (let ((xu1027@id xu1023@e)) (let ((xu1029@label (xub9f@id->label xu1027@id))) (let ((xu102b@b (xuba1@label->binding xu1029@label xu1024@r))) (let ((xu102d@type (xuba5@binding-type xu102b@b))) (begin (if (not xu1029@label) (xuba9@raise-unbound-error xu1027@id) (void)) (let ((xu102f@t xu102d@type)) (if (memv xu102f@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values xu102d@type (xuba7@binding-value xu102b@b) xu1027@id) (values 'other '#f '#f)))))))) (if (xub7b@syntax-pair? xu1023@e) (let ((xu1031@id (xub83@syntax-car xu1023@e))) (if (xub89@id? xu1031@id) (let ((xu1033@label (xub9f@id->label xu1031@id))) (let ((xu1035@b (xuba1@label->binding xu1033@label xu1024@r))) (let ((xu1037@type (xuba5@binding-type xu1035@b))) (begin (if (not xu1033@label) (xuba9@raise-unbound-error xu1031@id) (void)) (let ((xu1039@t xu1037@type)) (if (memv xu1039@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values xu1037@type (xuba7@binding-value xu1035@b) xu1031@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((xu103b@d (xub9d@stx->datum xu1023@e))) (if (xub97@self-evaluating? xu103b@d) (values 'constant xu103b@d '#f) (values 'other '#f '#f))))))) (set! xu2857@xubab@syntax-type xubab@syntax-type) (set! xubb9@sanitize-binding (lambda (xu103d@x xu103e@src) (if (procedure? xu103d@x) (cons* 'local-macro xu103d@x xu103e@src) (if (and (pair? xu103d@x) (eq? (car xu103d@x) 'macro!) (procedure? (cdr xu103d@x))) (cons* 'local-macro! (cdr xu103d@x) xu103e@src) (if (and (pair? xu103d@x) (eq? (car xu103d@x) '$rtd)) xu103d@x (assertion-violation 'expand '"invalid transformer" xu103d@x)))))) (set! xu2858@xubb9@sanitize-binding xubb9@sanitize-binding) (set! xubbb@make-variable-transformer (lambda (xu1041@x) (if (procedure? xu1041@x) (cons 'macro! xu1041@x) (assertion-violation 'make-variable-transformer '"not a procedure" xu1041@x)))) (set! xu2859@xubbb@make-variable-transformer xubbb@make-variable-transformer) (set! xubbd@variable-transformer? (lambda (xu1043@x) (and (pair? xu1043@x) (eq? (car xu1043@x) 'macro!) (procedure? (cdr xu1043@x))))) (set! xu285a@xubbd@variable-transformer? xubbd@variable-transformer?) (set! xubbf@variable-transformer-procedure (lambda (xu1045@x) (if (xubbd@variable-transformer? xu1045@x) (cdr xu1045@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" xu1045@x)))) (set! xu285b@xubbf@variable-transformer-procedure xubbf@variable-transformer-procedure) (set! xubc1@make-eval-transformer (lambda (xu1047@x) (xubb9@sanitize-binding (eval-core (xu72f@xu6e7@expanded->core xu1047@x)) xu1047@x))) (set! xu285c@xubc1@make-eval-transformer xubc1@make-eval-transformer) (set! xud12@parse-define (lambda (xu1049@x) (let ((xu104b@t xu1049@x)) (let ((xu104d@ls/false (xud90@syntax-dispatch xu104b@t '(_ (any . any) any . each-any)))) (if (and xu104d@ls/false (apply (lambda (xu104f@id xu1050@fmls xu1051@b xu1052@b*) (xub89@id? xu104f@id)) xu104d@ls/false)) (apply (lambda (xu1057@id xu1058@fmls xu1059@b xu105a@b*) (begin (xudb6@verify-formals xu1058@fmls xu1049@x) (values xu1057@id (cons 'defun (cons xu1058@fmls (cons xu1059@b xu105a@b*)))))) xu104d@ls/false) (let ((xu105f@t xu104b@t)) (let ((xu1061@ls/false (xud90@syntax-dispatch xu105f@t '(_ any any)))) (if (and xu1061@ls/false (apply (lambda (xu1063@id xu1064@val) (xub89@id? xu1063@id)) xu1061@ls/false)) (apply (lambda (xu1067@id xu1068@val) (values xu1067@id (cons 'expr xu1068@val))) xu1061@ls/false) (let ((xu106b@t xu105f@t)) (let ((xu106d@ls/false (xud90@syntax-dispatch xu106b@t '(_ any)))) (if (and xu106d@ls/false (apply (lambda (xu106f@id) (xub89@id? xu106f@id)) xu106d@ls/false)) (apply (lambda (xu1071@id) (values xu1071@id (cons 'expr (xud46@bless '(void))))) xu106d@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu106b@t)))))))))))) (set! xu285d@xud12@parse-define xud12@parse-define) (set! xud14@parse-define-syntax (lambda (xu1073@x) (let ((xu1075@t xu1073@x)) (let ((xu1077@ls/false (xud90@syntax-dispatch xu1075@t '(_ any any)))) (if (and xu1077@ls/false (apply (lambda (xu1079@id xu107a@val) (xub89@id? xu1079@id)) xu1077@ls/false)) (apply (lambda (xu107d@id xu107e@val) (values xu107d@id xu107e@val)) xu1077@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1075@t)))))) (set! xu285e@xud14@parse-define-syntax xud14@parse-define-syntax) (set! xud16@scheme-stx-hashtable (make-eq-hashtable)) (set! xu285f@xud16@scheme-stx-hashtable xud16@scheme-stx-hashtable) (set! xud18@scheme-stx (lambda (xu1081@sym) (or (hashtable-ref xud16@scheme-stx-hashtable xu1081@sym '#f) (let ((xu1083@subst (xu980@xu7a9@library-subst (xu99e@xu7e5@find-library-by-name '(psyntax system $all))))) (let ((xu1085@stx (make-simple-struct 'stx '5 (list xu1081@sym xub0d@top-mark* '() '())))) (let ((xu1087@stx (let ((xu1089@t (assq xu1081@sym xu1083@subst))) (if xu1089@t ((lambda (xu108b@x) (let ((xu108d@name (car xu108b@x)) (xu108e@label (cdr xu108b@x))) (xub73@add-subst (make-simple-struct 'rib '6 (list (list xu108d@name) (list xub0d@top-mark*) (list xu108e@label) '#f '#f)) xu1085@stx))) xu1089@t) xu1085@stx)))) (begin (hashtable-set! xud16@scheme-stx-hashtable xu1081@sym xu1087@stx) xu1087@stx))))))) (set! xu2860@xud18@scheme-stx xud18@scheme-stx) (set! xud1a@lexical-var car) (set! xu2861@xud1a@lexical-var xud1a@lexical-var) (set! xud1c@lexical-mutable? cdr) (set! xu2862@xud1c@lexical-mutable? xud1c@lexical-mutable?) (set! xud1e@set-lexical-mutable! set-cdr!) (set! xu2863@xud1e@set-lexical-mutable! xud1e@set-lexical-mutable!) (set! xud20@add-lexical (lambda (xu1091@lab xu1092@lex xu1093@r) (cons (cons* xu1091@lab 'lexical xu1092@lex '#f) xu1093@r))) (set! xu2864@xud20@add-lexical xud20@add-lexical) (set! xud22@add-lexicals (lambda (xu1097@lab* xu1098@lex* xu1099@r) (if (null? xu1097@lab*) xu1099@r (xud22@add-lexicals (cdr xu1097@lab*) (cdr xu1098@lex*) (xud20@add-lexical (car xu1097@lab*) (car xu1098@lex*) xu1099@r))))) (set! xu2865@xud22@add-lexicals xud22@add-lexicals) (set! xud24@letrec-helper (lambda (xu109d@e xu109e@r xu109f@mr xu10a0@build) (let ((xu10a5@t xu109d@e)) (let ((xu10a7@ls/false (xud90@syntax-dispatch xu10a5@t '(_ #(each (any any)) any . each-any)))) (if xu10a7@ls/false (apply (lambda (xu10a9@lhs* xu10aa@rhs* xu10ab@b xu10ac@b*) (if (not (xub91@valid-bound-ids? xu10a9@lhs*)) (xud4a@invalid-fmls-error xu109d@e xu10a9@lhs*) (let ((xu10b1@lex* (map xub11@gen-lexical xu10a9@lhs*)) (xu10b2@lab* (map xub15@gen-label xu10a9@lhs*))) (let ((xu10b5@rib (xub49@make-full-rib xu10a9@lhs* xu10b2@lab*)) (xu10b6@r (xud22@add-lexicals xu10b2@lab* xu10b1@lex* xu109e@r))) (let ((xu10b9@body (xudc8@chi-internal (xub73@add-subst xu10b5@rib (cons xu10ab@b xu10ac@b*)) xu10b6@r xu109f@mr)) (xu10ba@rhs* (xudae@chi-expr* (map (lambda (xu10bd@x) (xub73@add-subst xu10b5@rib xu10bd@x)) xu10aa@rhs*) xu10b6@r xu109f@mr))) (xu10a0@build '#f xu10b1@lex* xu10ba@rhs* xu10b9@body)))))) xu10a7@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu10a5@t)))))) (set! xu2866@xud24@letrec-helper xud24@letrec-helper) (set! xud26@let-transformer (lambda (xu10bf@e xu10c0@r xu10c1@mr) (let ((xu10c5@t xu10bf@e)) (let ((xu10c7@ls/false (xud90@syntax-dispatch xu10c5@t '(_ #(each (any any)) any . each-any)))) (if xu10c7@ls/false (apply (lambda (xu10c9@lhs* xu10ca@rhs* xu10cb@b xu10cc@b*) (if (not (xub91@valid-bound-ids? xu10c9@lhs*)) (xud4a@invalid-fmls-error xu10bf@e xu10c9@lhs*) (let ((xu10d1@lex* (map xub11@gen-lexical xu10c9@lhs*)) (xu10d2@lab* (map xub15@gen-label xu10c9@lhs*)) (xu10d3@rhs* (xudae@chi-expr* xu10ca@rhs* xu10c0@r xu10c1@mr))) (let ((xu10d7@rib (xub49@make-full-rib xu10c9@lhs* xu10d2@lab*)) (xu10d8@r (xud22@add-lexicals xu10d2@lab* xu10d1@lex* xu10c0@r))) (let ((xu10db@body (xudc8@chi-internal (xub73@add-subst xu10d7@rib (cons xu10cb@b xu10cc@b*)) xu10d8@r xu10c1@mr))) (xuaf1@xua54@build-let '#f xu10d1@lex* xu10d3@rhs* xu10db@body)))))) xu10c7@ls/false) (let ((xu10dd@t xu10c5@t)) (let ((xu10df@ls/false (xud90@syntax-dispatch xu10dd@t '(_ any #(each (any any)) any . each-any)))) (if xu10df@ls/false (apply (lambda (xu10e1@loop xu10e2@lhs* xu10e3@rhs* xu10e4@b xu10e5@b*) (if (not (xub91@valid-bound-ids? xu10e2@lhs*)) (xud4a@invalid-fmls-error xu10bf@e xu10e2@lhs*) (let ((xu10eb@lex* (map xub11@gen-lexical xu10e2@lhs*)) (xu10ec@lab* (map xub15@gen-label xu10e2@lhs*)) (xu10ed@rhs* (xudae@chi-expr* xu10e3@rhs* xu10c0@r xu10c1@mr)) (xu10ee@loop-lex (xub11@gen-lexical xu10e1@loop)) (xu10ef@loop-lab (xub15@gen-label xu10e1@loop))) (let ((xu10f5@loop-rib (xub49@make-full-rib (list xu10e1@loop) (list xu10ef@loop-lab))) (xu10f6@rib (xub49@make-full-rib xu10e2@lhs* xu10ec@lab*)) (xu10f7@r (xud22@add-lexicals (cons xu10ef@loop-lab xu10ec@lab*) (cons xu10ee@loop-lex xu10eb@lex*) xu10c0@r))) (let ((xu10fb@body (xudc8@chi-internal (xub73@add-subst xu10f5@loop-rib (xub73@add-subst xu10f6@rib (cons xu10e4@b xu10e5@b*))) xu10f7@r xu10c1@mr))) (xuaf2@xua56@build-named-let '#f xu10ee@loop-lex xu10eb@lex* xu10ed@rhs* xu10fb@body)))))) xu10df@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu10dd@t))))))))) (set! xu2867@xud26@let-transformer xud26@let-transformer) (set! xud28@letrec-transformer (lambda (xu10fd@e xu10fe@r xu10ff@mr) (xud24@letrec-helper xu10fd@e xu10fe@r xu10ff@mr xuaf0@xua52@build-letrec))) (set! xu2868@xud28@letrec-transformer xud28@letrec-transformer) (set! xud2a@letrec*-transformer (lambda (xu1103@e xu1104@r xu1105@mr) (xud24@letrec-helper xu1103@e xu1104@r xu1105@mr xuaf3@xua58@build-letrec*))) (set! xu2869@xud2a@letrec*-transformer xud2a@letrec*-transformer) (set! xud2c@fluid-let-syntax-transformer (lambda (xu1109@e xu110a@r xu110b@mr) (letrec* ((xu1110@lookup (lambda (xu1123@x) (or (xub9f@id->label xu1123@x) (xue70@syntax-violation '#f '"unbound identifier" xu1109@e xu1123@x))))) (let ((xu1111@t xu1109@e)) (let ((xu1113@ls/false (xud90@syntax-dispatch xu1111@t '(_ #(each (any any)) any . each-any)))) (if xu1113@ls/false (apply (lambda (xu1115@lhs* xu1116@rhs* xu1117@b xu1118@b*) (if (not (xub91@valid-bound-ids? xu1115@lhs*)) (xud4a@invalid-fmls-error xu1109@e xu1115@lhs*) (let ((xu111d@lab* (map xu1110@lookup xu1115@lhs*)) (xu111e@rhs* (map (lambda (xu1121@x) (xubc1@make-eval-transformer (xudea@expand-transformer xu1121@x xu110b@mr))) xu1116@rhs*))) (xudc8@chi-internal (cons xu1117@b xu1118@b*) (append (map cons xu111d@lab* xu111e@rhs*) xu110a@r) (append (map cons xu111d@lab* xu111e@rhs*) xu110b@mr))))) xu1113@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1111@t))))))) (set! xu286a@xud2c@fluid-let-syntax-transformer xud2c@fluid-let-syntax-transformer) (set! xud2e@type-descriptor-transformer (lambda (xu1125@e xu1126@r xu1127@mr) (let ((xu112b@t xu1125@e)) (let ((xu112d@ls/false (xud90@syntax-dispatch xu112b@t '(_ any)))) (if (and xu112d@ls/false (apply (lambda (xu112f@id) (xub89@id? xu112f@id)) xu112d@ls/false)) (apply (lambda (xu1131@id) (let ((xu1133@lab (xub9f@id->label xu1131@id))) (let ((xu1135@b (xuba1@label->binding xu1133@lab xu1126@r))) (let ((xu1137@type (xuba5@binding-type xu1135@b))) (begin (if (not xu1133@lab) (xuba9@raise-unbound-error xu1131@id) (void)) (if (not (and (eq? xu1137@type '$rtd) (not (list? (xuba7@binding-value xu1135@b))))) (xue70@syntax-violation '#f '"not a record type" xu1125@e) (void)) (list 'quote (xuba7@binding-value xu1135@b))))))) xu112d@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu112b@t)))))) (set! xu286b@xud2e@type-descriptor-transformer xud2e@type-descriptor-transformer) (set! xud30@record-type-descriptor-transformer (lambda (xu1139@e xu113a@r xu113b@mr) (let ((xu113f@t xu1139@e)) (let ((xu1141@ls/false (xud90@syntax-dispatch xu113f@t '(_ any)))) (if (and xu1141@ls/false (apply (lambda (xu1143@id) (xub89@id? xu1143@id)) xu1141@ls/false)) (apply (lambda (xu1145@id) (let ((xu1147@lab (xub9f@id->label xu1145@id))) (let ((xu1149@b (xuba1@label->binding xu1147@lab xu113a@r))) (let ((xu114b@type (xuba5@binding-type xu1149@b))) (begin (if (not xu1147@lab) (xuba9@raise-unbound-error xu1145@id) (void)) (if (not (and (eq? xu114b@type '$rtd) (list? (xuba7@binding-value xu1149@b)))) (xue70@syntax-violation '#f '"not a record type" xu1139@e) (void)) (xudb2@chi-expr (car (xuba7@binding-value xu1149@b)) xu113a@r xu113b@mr)))))) xu1141@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu113f@t)))))) (set! xu286c@xud30@record-type-descriptor-transformer xud30@record-type-descriptor-transformer) (set! xud32@record-constructor-descriptor-transformer (lambda (xu114d@e xu114e@r xu114f@mr) (let ((xu1153@t xu114d@e)) (let ((xu1155@ls/false (xud90@syntax-dispatch xu1153@t '(_ any)))) (if (and xu1155@ls/false (apply (lambda (xu1157@id) (xub89@id? xu1157@id)) xu1155@ls/false)) (apply (lambda (xu1159@id) (let ((xu115b@lab (xub9f@id->label xu1159@id))) (let ((xu115d@b (xuba1@label->binding xu115b@lab xu114e@r))) (let ((xu115f@type (xuba5@binding-type xu115d@b))) (begin (if (not xu115b@lab) (xuba9@raise-unbound-error xu1159@id) (void)) (if (not (and (eq? xu115f@type '$rtd) (list? (xuba7@binding-value xu115d@b)))) (xue70@syntax-violation '#f '"invalid type" xu114d@e) (void)) (xudb2@chi-expr (cadr (xuba7@binding-value xu115d@b)) xu114e@r xu114f@mr)))))) xu1155@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1153@t)))))) (set! xu286d@xud32@record-constructor-descriptor-transformer xud32@record-constructor-descriptor-transformer) (set! xud34@when-macro (lambda (xu1161@e) (let ((xu1163@t xu1161@e)) (let ((xu1165@ls/false (xud90@syntax-dispatch xu1163@t '(_ any any . each-any)))) (if xu1165@ls/false (apply (lambda (xu1167@test xu1168@e xu1169@e*) (xud46@bless (list 'if xu1167@test (cons 'begin (cons xu1168@e xu1169@e*))))) xu1165@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1163@t)))))) (set! xu286e@xud34@when-macro xud34@when-macro) (set! xud36@unless-macro (lambda (xu116d@e) (let ((xu116f@t xu116d@e)) (let ((xu1171@ls/false (xud90@syntax-dispatch xu116f@t '(_ any any . each-any)))) (if xu1171@ls/false (apply (lambda (xu1173@test xu1174@e xu1175@e*) (xud46@bless (list 'if (list 'not xu1173@test) (cons 'begin (cons xu1174@e xu1175@e*))))) xu1171@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu116f@t)))))) (set! xu286f@xud36@unless-macro xud36@unless-macro) (set! xud38@if-transformer (lambda (xu1179@e xu117a@r xu117b@mr) (let ((xu117f@t xu1179@e)) (let ((xu1181@ls/false (xud90@syntax-dispatch xu117f@t '(_ any any any)))) (if xu1181@ls/false (apply (lambda (xu1183@e0 xu1184@e1 xu1185@e2) (list 'if (xudb2@chi-expr xu1183@e0 xu117a@r xu117b@mr) (xudb2@chi-expr xu1184@e1 xu117a@r xu117b@mr) (xudb2@chi-expr xu1185@e2 xu117a@r xu117b@mr))) xu1181@ls/false) (let ((xu1189@t xu117f@t)) (let ((xu118b@ls/false (xud90@syntax-dispatch xu1189@t '(_ any any)))) (if xu118b@ls/false (apply (lambda (xu118d@e0 xu118e@e1) (list 'if (xudb2@chi-expr xu118d@e0 xu117a@r xu117b@mr) (xudb2@chi-expr xu118e@e1 xu117a@r xu117b@mr) (xuaef@xua50@build-void))) xu118b@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1189@t))))))))) (set! xu2870@xud38@if-transformer xud38@if-transformer) (set! xud3a@and-transformer (lambda (xu1191@e xu1192@r xu1193@mr) (let ((xu1197@t xu1191@e)) (let ((xu1199@ls/false (xud90@syntax-dispatch xu1197@t '(_ . each-any)))) (if xu1199@ls/false (apply (lambda (xu119b@e*) (cons 'and (xudae@chi-expr* xu119b@e* xu1192@r xu1193@mr))) xu1199@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1197@t)))))) (set! xu2871@xud3a@and-transformer xud3a@and-transformer) (set! xud3c@or-transformer (lambda (xu119d@e xu119e@r xu119f@mr) (let ((xu11a3@t xu119d@e)) (let ((xu11a5@ls/false (xud90@syntax-dispatch xu11a3@t '(_ . each-any)))) (if xu11a5@ls/false (apply (lambda (xu11a7@e*) (cons 'or (xudae@chi-expr* xu11a7@e* xu119e@r xu119f@mr))) xu11a5@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu11a3@t)))))) (set! xu2872@xud3c@or-transformer xud3c@or-transformer) (set! xud3e@case-macro (lambda (xu11a9@e) (letrec* ((xu11ac@build-last (lambda (xu11d3@cls) (let ((xu11d5@t xu11d3@cls)) (let ((xu11d7@ls/false (xud90@syntax-dispatch xu11d5@t '(#(scheme-id else) any . each-any)))) (if xu11d7@ls/false (apply (lambda (xu11d9@e xu11da@e*) (cons 'begin (cons xu11d9@e xu11da@e*))) xu11d7@ls/false) (let ((xu11dd@t xu11d5@t)) (let ((xu11df@ls/false (xud90@syntax-dispatch xu11dd@t '_))) (if xu11df@ls/false (apply (lambda () (xu11ae@build-one xu11d3@cls '(if #f #f))) xu11df@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu11dd@t))))))))) (xu11ae@build-one (lambda (xu11c5@cls xu11c6@k) (let ((xu11c9@t xu11c5@cls)) (let ((xu11cb@ls/false (xud90@syntax-dispatch xu11c9@t '(each-any any . each-any)))) (if xu11cb@ls/false (apply (lambda (xu11cd@d* xu11ce@e xu11cf@e*) (list 'if (list 'memv 't (list 'quote xu11cd@d*)) (cons 'begin (cons xu11ce@e xu11cf@e*)) xu11c6@k)) xu11cb@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu11c9@t))))))) (let ((xu11af@t xu11a9@e)) (let ((xu11b1@ls/false (xud90@syntax-dispatch xu11af@t '(_ any)))) (if xu11b1@ls/false (apply (lambda (xu11b3@expr) (xud46@bless (cons 'let (cons (list (list 't xu11b3@expr)) '((if #f #f)))))) xu11b1@ls/false) (let ((xu11b5@t xu11af@t)) (let ((xu11b7@ls/false (xud90@syntax-dispatch xu11b5@t '(_ any any . each-any)))) (if xu11b7@ls/false (apply (lambda (xu11b9@expr xu11ba@cls xu11bb@cls*) (xud46@bless (list 'let (list (list 't xu11b9@expr)) (let xu11c3@f ((xu11bf@cls xu11ba@cls) (xu11c0@cls* xu11bb@cls*)) (if (null? xu11c0@cls*) (xu11ac@build-last xu11bf@cls) (xu11ae@build-one xu11bf@cls (xu11c3@f (car xu11c0@cls*) (cdr xu11c0@cls*)))))))) xu11b7@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu11b5@t)))))))))) (set! xu2873@xud3e@case-macro xud3e@case-macro) (set! xud40@quote-transformer (lambda (xu11e1@e xu11e2@r xu11e3@mr) (let ((xu11e7@t xu11e1@e)) (let ((xu11e9@ls/false (xud90@syntax-dispatch xu11e7@t '(_ any)))) (if xu11e9@ls/false (apply (lambda (xu11eb@datum) (list 'quote (xub9d@stx->datum xu11eb@datum))) xu11e9@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu11e7@t)))))) (set! xu2874@xud40@quote-transformer xud40@quote-transformer) (set! xud42@case-lambda-transformer (lambda (xu11ed@e xu11ee@r xu11ef@mr) (let ((xu11f3@t xu11ed@e)) (let ((xu11f5@ls/false (xud90@syntax-dispatch xu11f3@t '(_ . #(each (any any . each-any)))))) (if xu11f5@ls/false (apply (lambda (xu11f7@fmls* xu11f8@b* xu11f9@b**) (call-with-values (lambda () (xudba@chi-lambda-clause* xu11ed@e xu11f7@fmls* (map cons xu11f8@b* xu11f9@b**) xu11ee@r xu11ef@mr)) (lambda (xu1201@xu11fe xu1202@xu1200) (let ((xu1205@body* xu1202@xu1200) (xu1206@fmls* xu1201@xu11fe)) (xuaed@xua20@build-case-lambda '#f xu1206@fmls* xu1205@body*))))) xu11f5@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu11f3@t)))))) (set! xu2875@xud42@case-lambda-transformer xud42@case-lambda-transformer) (set! xud44@lambda-transformer (lambda (xu1209@e xu120a@r xu120b@mr) (let ((xu120f@t xu1209@e)) (let ((xu1211@ls/false (xud90@syntax-dispatch xu120f@t '(_ any any . each-any)))) (if xu1211@ls/false (apply (lambda (xu1213@fmls xu1214@b xu1215@b*) (call-with-values (lambda () (xudb8@chi-lambda-clause xu1209@e xu1213@fmls (cons xu1214@b xu1215@b*) xu120a@r xu120b@mr)) (lambda (xu121d@xu121a xu121e@xu121c) (let ((xu1221@body xu121e@xu121c) (xu1222@fmls xu121d@xu121a)) (xuaec@xua1e@build-lambda '#f xu1222@fmls xu1221@body))))) xu1211@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu120f@t)))))) (set! xu2876@xud44@lambda-transformer xud44@lambda-transformer) (set! xud46@bless (lambda (xu1225@x) (xub71@mkstx (let xu1229@f ((xu1227@x xu1225@x)) (if (xub55@stx? xu1227@x) xu1227@x (if (pair? xu1227@x) (cons (xu1229@f (car xu1227@x)) (xu1229@f (cdr xu1227@x))) (if (symbol? xu1227@x) (xud18@scheme-stx xu1227@x) (if (vector? xu1227@x) (vector-map xu1229@f xu1227@x) xu1227@x))))) '() '() '()))) (set! xu2877@xud46@bless xud46@bless) (set! xud48@with-syntax-macro (lambda (xu122b@e) (let ((xu122d@t xu122b@e)) (let ((xu122f@ls/false (xud90@syntax-dispatch xu122d@t '(_ #(each (any any)) any . each-any)))) (if xu122f@ls/false (apply (lambda (xu1231@pat* xu1232@expr* xu1233@b xu1234@b*) (let ((xu1239@idn* (let xu123d@f ((xu123b@pat* xu1231@pat*)) (if (null? xu123b@pat*) '() (call-with-values (lambda () (xud8e@convert-pattern (car xu123b@pat*) '())) (lambda (xu1243@xu1240 xu1244@xu1242) (let ((xu1247@idn* xu1244@xu1242) (xu1248@pat xu1243@xu1240)) (append xu1247@idn* (xu123d@f (cdr xu123b@pat*)))))))))) (begin (xudb6@verify-formals (map car xu1239@idn*) xu122b@e) (let ((xu124b@t* (xue5e@generate-temporaries xu1232@expr*))) (xud46@bless (list 'let (map list xu124b@t* xu1232@expr*) (let xu1251@f ((xu124d@pat* xu1231@pat*) (xu124e@t* xu124b@t*)) (if (null? xu124d@pat*) (cons 'let (cons '() (cons xu1233@b xu1234@b*))) (list 'syntax-case (car xu124e@t*) '() (list (car xu124d@pat*) (xu1251@f (cdr xu124d@pat*) (cdr xu124e@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car xu124d@pat*)) (car xu124e@t*)))))))))))) xu122f@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu122d@t)))))) (set! xu2878@xud48@with-syntax-macro xud48@with-syntax-macro) (set! xud4a@invalid-fmls-error (lambda (xu1253@stx xu1254@fmls) (let ((xu1257@t xu1254@fmls)) (let ((xu1259@ls/false (xud90@syntax-dispatch xu1257@t '#(each+ any () any)))) (if xu1259@ls/false (apply (lambda (xu125b@id* xu125c@last) (let xu1261@f ((xu125f@id* (if (xub89@id? xu125c@last) (cons xu125c@last xu125b@id*) (if (xub7f@syntax-null? xu125c@last) xu125b@id* (xue70@syntax-violation '#f '"not an identifier" xu1253@stx xu125c@last))))) (if (null? xu125f@id*) (values) (if (not (xub89@id? (car xu125f@id*))) (xue70@syntax-violation '#f '"not an identifier" xu1253@stx (car xu125f@id*)) (begin (xu1261@f (cdr xu125f@id*)) (if (xub95@bound-id-member? (car xu125f@id*) (cdr xu125f@id*)) (xue70@syntax-violation '#f '"duplicate binding" xu1253@stx (car xu125f@id*)) (void))))))) xu1259@ls/false) (let ((xu1263@t xu1257@t)) (let ((xu1265@ls/false (xud90@syntax-dispatch xu1263@t '_))) (if xu1265@ls/false (apply (lambda () (xue70@syntax-violation '#f '"malformed binding form" xu1253@stx xu1254@fmls)) xu1265@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1263@t))))))))) (set! xu2879@xud4a@invalid-fmls-error xud4a@invalid-fmls-error) (set! xud4c@let-macro (lambda (xu1267@stx) (let ((xu1269@t xu1267@stx)) (let ((xu126b@ls/false (xud90@syntax-dispatch xu1269@t '(_ #(each (any any)) any . each-any)))) (if xu126b@ls/false (apply (lambda (xu126d@lhs* xu126e@rhs* xu126f@b xu1270@b*) (if (xub91@valid-bound-ids? xu126d@lhs*) (xud46@bless (cons (cons 'lambda (cons xu126d@lhs* (cons xu126f@b xu1270@b*))) xu126e@rhs*)) (xud4a@invalid-fmls-error xu1267@stx xu126d@lhs*))) xu126b@ls/false) (let ((xu1275@t xu1269@t)) (let ((xu1277@ls/false (xud90@syntax-dispatch xu1275@t '(_ any #(each (any any)) any . each-any)))) (if (and xu1277@ls/false (apply (lambda (xu1279@f xu127a@lhs* xu127b@rhs* xu127c@b xu127d@b*) (xub89@id? xu1279@f)) xu1277@ls/false)) (apply (lambda (xu1283@f xu1284@lhs* xu1285@rhs* xu1286@b xu1287@b*) (if (xub91@valid-bound-ids? xu1284@lhs*) (xud46@bless (cons (list 'letrec (list (list xu1283@f (cons 'lambda (cons xu1284@lhs* (cons xu1286@b xu1287@b*))))) xu1283@f) xu1285@rhs*)) (xud4a@invalid-fmls-error xu1267@stx xu1284@lhs*))) xu1277@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1275@t))))))))) (set! xu287a@xud4c@let-macro xud4c@let-macro) (set! xud4e@let-values-macro (lambda (xu128d@stx) (letrec* ((xu1290@rename (lambda (xu12f5@x xu12f6@old* xu12f7@new*) (begin (if (not (xub89@id? xu12f5@x)) (xue70@syntax-violation '#f '"not an indentifier" xu128d@stx xu12f5@x) (void)) (if (xub95@bound-id-member? xu12f5@x xu12f6@old*) (xue70@syntax-violation '#f '"duplicate binding" xu128d@stx xu12f5@x) (void)) (let ((xu12fb@y (gensym (xue76@syntax->datum xu12f5@x)))) (values xu12fb@y (cons xu12f5@x xu12f6@old*) (cons xu12fb@y xu12f7@new*)))))) (xu1292@rename* (lambda (xu12e3@x* xu12e4@old* xu12e5@new*) (if (null? xu12e3@x*) (values '() xu12e4@old* xu12e5@new*) (call-with-values (lambda () (xu1290@rename (car xu12e3@x*) xu12e4@old* xu12e5@new*)) (lambda (xu12e9@x xu12ea@old* xu12eb@new*) (call-with-values (lambda () (xu1292@rename* (cdr xu12e3@x*) xu12ea@old* xu12eb@new*)) (lambda (xu12ef@x* xu12f0@old* xu12f1@new*) (values (cons xu12e9@x xu12ef@x*) xu12f0@old* xu12f1@new*))))))))) (let ((xu1293@t xu128d@stx)) (let ((xu1295@ls/false (xud90@syntax-dispatch xu1293@t '(_ () any . each-any)))) (if xu1295@ls/false (apply (lambda (xu1297@b xu1298@b*) (cons* (xud46@bless 'let) '() xu1297@b xu1298@b*)) xu1295@ls/false) (let ((xu129b@t xu1293@t)) (let ((xu129d@ls/false (xud90@syntax-dispatch xu129b@t '(_ #(each (any any)) any . each-any)))) (if xu129d@ls/false (apply (lambda (xu129f@lhs* xu12a0@rhs* xu12a1@b xu12a2@b*) (xud46@bless (let xu12af@f ((xu12a7@lhs* xu129f@lhs*) (xu12a8@rhs* xu12a0@rhs*) (xu12a9@old* '()) (xu12aa@new* '())) (if (null? xu12a7@lhs*) (cons 'let (cons (map list xu12a9@old* xu12aa@new*) (cons xu12a1@b xu12a2@b*))) (let ((xu12b1@t (car xu12a7@lhs*))) (let ((xu12b3@ls/false (xud90@syntax-dispatch xu12b1@t 'each-any))) (if xu12b3@ls/false (apply (lambda (xu12b5@x*) (call-with-values (lambda () (xu1292@rename* xu12b5@x* xu12a9@old* xu12aa@new*)) (lambda (xu12bd@xu12b8 xu12be@xu12ba xu12bf@xu12bc) (let ((xu12c3@new* xu12bf@xu12bc) (xu12c4@old* xu12be@xu12ba) (xu12c5@y* xu12bd@xu12b8)) (list 'call-with-values (list 'lambda '() (car xu12a8@rhs*)) (list 'lambda xu12c5@y* (xu12af@f (cdr xu12a7@lhs*) (cdr xu12a8@rhs*) xu12c4@old* xu12c3@new*))))))) xu12b3@ls/false) (let ((xu12c9@t xu12b1@t)) (let ((xu12cb@ls/false (xud90@syntax-dispatch xu12c9@t '#(each+ any () any)))) (if xu12cb@ls/false (apply (lambda (xu12cd@x* xu12ce@x) (call-with-values (lambda () (xu1290@rename xu12ce@x xu12a9@old* xu12aa@new*)) (lambda (xu12d1@y xu12d2@old* xu12d3@new*) (call-with-values (lambda () (xu1292@rename* xu12cd@x* xu12d2@old* xu12d3@new*)) (lambda (xu12d7@y* xu12d8@old* xu12d9@new*) (list 'call-with-values (list 'lambda '() (car xu12a8@rhs*)) (list 'lambda (append xu12d7@y* xu12d1@y) (xu12af@f (cdr xu12a7@lhs*) (cdr xu12a8@rhs*) xu12d8@old* xu12d9@new*)))))))) xu12cb@ls/false) (let ((xu12dd@t xu12c9@t)) (let ((xu12df@ls/false (xud90@syntax-dispatch xu12dd@t 'any))) (if xu12df@ls/false (apply (lambda (xu12e1@others) (xue70@syntax-violation '#f '"malformed bindings" xu128d@stx xu12e1@others)) xu12df@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu12dd@t)))))))))))))) xu129d@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu129b@t)))))))))) (set! xu287b@xud4e@let-values-macro xud4e@let-values-macro) (set! xud50@let*-values-macro (lambda (xu12fd@stx) (letrec* ((xu1300@check (lambda (xu132f@x*) (if (not (null? xu132f@x*)) (let ((xu1331@x (car xu132f@x*))) (begin (if (not (xub89@id? xu1331@x)) (xue70@syntax-violation '#f '"not an identifier" xu12fd@stx xu1331@x) (void)) (xu1300@check (cdr xu132f@x*)) (if (xub95@bound-id-member? xu1331@x (cdr xu132f@x*)) (xue70@syntax-violation '#f '"duplicate identifier" xu12fd@stx xu1331@x) (void)))) (void))))) (let ((xu1301@t xu12fd@stx)) (let ((xu1303@ls/false (xud90@syntax-dispatch xu1301@t '(_ () any . each-any)))) (if xu1303@ls/false (apply (lambda (xu1305@b xu1306@b*) (cons* (xud46@bless 'let) '() xu1305@b xu1306@b*)) xu1303@ls/false) (let ((xu1309@t xu1301@t)) (let ((xu130b@ls/false (xud90@syntax-dispatch xu1309@t '(_ #(each (any any)) any . each-any)))) (if xu130b@ls/false (apply (lambda (xu130d@lhs* xu130e@rhs* xu130f@b xu1310@b*) (xud46@bless (let xu1319@f ((xu1315@lhs* xu130d@lhs*) (xu1316@rhs* xu130e@rhs*)) (if (null? xu1315@lhs*) (cons 'begin (cons xu130f@b xu1310@b*)) (let ((xu131b@t (car xu1315@lhs*))) (let ((xu131d@ls/false (xud90@syntax-dispatch xu131b@t 'each-any))) (if xu131d@ls/false (apply (lambda (xu131f@x*) (begin (xu1300@check xu131f@x*) (list 'call-with-values (list 'lambda '() (car xu1316@rhs*)) (list 'lambda xu131f@x* (xu1319@f (cdr xu1315@lhs*) (cdr xu1316@rhs*)))))) xu131d@ls/false) (let ((xu1321@t xu131b@t)) (let ((xu1323@ls/false (xud90@syntax-dispatch xu1321@t '#(each+ any () any)))) (if xu1323@ls/false (apply (lambda (xu1325@x* xu1326@x) (begin (xu1300@check (cons xu1326@x xu1325@x*)) (list 'call-with-values (list 'lambda '() (car xu1316@rhs*)) (list 'lambda (append xu1325@x* xu1326@x) (xu1319@f (cdr xu1315@lhs*) (cdr xu1316@rhs*)))))) xu1323@ls/false) (let ((xu1329@t xu1321@t)) (let ((xu132b@ls/false (xud90@syntax-dispatch xu1329@t 'any))) (if xu132b@ls/false (apply (lambda (xu132d@others) (xue70@syntax-violation '#f '"malformed bindings" xu12fd@stx xu132d@others)) xu132b@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1329@t)))))))))))))) xu130b@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1309@t)))))))))) (set! xu287c@xud50@let*-values-macro xud50@let*-values-macro) (set! xud52@trace-lambda-macro (lambda (xu1333@stx) (let ((xu1335@t xu1333@stx)) (let ((xu1337@ls/false (xud90@syntax-dispatch xu1335@t '(_ any each-any any . each-any)))) (if xu1337@ls/false (apply (lambda (xu1339@who xu133a@fmls xu133b@b xu133c@b*) (if (xub91@valid-bound-ids? xu133a@fmls) (xud46@bless (list 'make-traced-procedure (list 'quote xu1339@who) (cons 'lambda (cons xu133a@fmls (cons xu133b@b xu133c@b*))))) (xud4a@invalid-fmls-error xu1333@stx xu133a@fmls))) xu1337@ls/false) (let ((xu1341@t xu1335@t)) (let ((xu1343@ls/false (xud90@syntax-dispatch xu1341@t '(_ any #(each+ any () any) any . each-any)))) (if xu1343@ls/false (apply (lambda (xu1345@who xu1346@fmls xu1347@last xu1348@b xu1349@b*) (if (xub91@valid-bound-ids? (cons xu1347@last xu1346@fmls)) (xud46@bless (list 'make-traced-procedure (list 'quote xu1345@who) (cons 'lambda (cons (append xu1346@fmls xu1347@last) (cons xu1348@b xu1349@b*))))) (xud4a@invalid-fmls-error xu1333@stx (append xu1346@fmls xu1347@last)))) xu1343@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1341@t))))))))) (set! xu287d@xud52@trace-lambda-macro xud52@trace-lambda-macro) (set! xud54@trace-define-macro (lambda (xu134f@stx) (let ((xu1351@t xu134f@stx)) (let ((xu1353@ls/false (xud90@syntax-dispatch xu1351@t '(_ (any . each-any) any . each-any)))) (if xu1353@ls/false (apply (lambda (xu1355@who xu1356@fmls xu1357@b xu1358@b*) (if (xub91@valid-bound-ids? xu1356@fmls) (xud46@bless (list 'define xu1355@who (list 'make-traced-procedure (list 'quote xu1355@who) (cons 'lambda (cons xu1356@fmls (cons xu1357@b xu1358@b*)))))) (xud4a@invalid-fmls-error xu134f@stx xu1356@fmls))) xu1353@ls/false) (let ((xu135d@t xu1351@t)) (let ((xu135f@ls/false (xud90@syntax-dispatch xu135d@t '(_ (any . #(each+ any () any)) any . each-any)))) (if xu135f@ls/false (apply (lambda (xu1361@who xu1362@fmls xu1363@last xu1364@b xu1365@b*) (if (xub91@valid-bound-ids? (cons xu1363@last xu1362@fmls)) (xud46@bless (list 'define xu1361@who (list 'make-traced-procedure (list 'quote xu1361@who) (cons 'lambda (cons (append xu1362@fmls xu1363@last) (cons xu1364@b xu1365@b*)))))) (xud4a@invalid-fmls-error xu134f@stx (append xu1362@fmls xu1363@last)))) xu135f@ls/false) (let ((xu136b@t xu135d@t)) (let ((xu136d@ls/false (xud90@syntax-dispatch xu136b@t '(_ any any)))) (if xu136d@ls/false (apply (lambda (xu136f@who xu1370@expr) (if (xub89@id? xu136f@who) (xud46@bless (list 'define xu136f@who (list 'let (list (list 'v xu1370@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote xu136f@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (xue70@syntax-violation '#f '"invalid name" xu134f@stx))) xu136d@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu136b@t)))))))))))) (set! xu287e@xud54@trace-define-macro xud54@trace-define-macro) (set! xud56@trace-define-syntax-macro (lambda (xu1373@stx) (let ((xu1375@t xu1373@stx)) (let ((xu1377@ls/false (xud90@syntax-dispatch xu1375@t '(_ any any)))) (if xu1377@ls/false (apply (lambda (xu1379@who xu137a@expr) (if (xub89@id? xu1379@who) (xud46@bless (list 'define-syntax xu1379@who (list 'make-traced-macro (list 'quote xu1379@who) xu137a@expr))) (xue70@syntax-violation '#f '"invalid name" xu1373@stx))) xu1377@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1375@t)))))) (set! xu287f@xud56@trace-define-syntax-macro xud56@trace-define-syntax-macro) (set! xud58@trace-let/rec-syntax (lambda (xu137d@who) (lambda (xu137f@stx) (let ((xu1381@t xu137f@stx)) (let ((xu1383@ls/false (xud90@syntax-dispatch xu1381@t '(_ #(each (any any)) any . each-any)))) (if xu1383@ls/false (apply (lambda (xu1385@lhs* xu1386@rhs* xu1387@b xu1388@b*) (if (xub91@valid-bound-ids? xu1385@lhs*) (let ((xu138d@rhs* (map (lambda (xu138f@lhs xu1390@rhs) (list 'make-traced-macro (list 'quote xu138f@lhs) xu1390@rhs)) xu1385@lhs* xu1386@rhs*))) (xud46@bless (cons xu137d@who (cons (map list xu1385@lhs* xu138d@rhs*) (cons xu1387@b xu1388@b*))))) (xud4a@invalid-fmls-error xu137f@stx xu1385@lhs*))) xu1383@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1381@t))))))) (set! xu2880@xud58@trace-let/rec-syntax xud58@trace-let/rec-syntax) (set! xud5a@trace-let-syntax-macro (xud58@trace-let/rec-syntax 'let-syntax)) (set! xu2881@xud5a@trace-let-syntax-macro xud5a@trace-let-syntax-macro) (set! xud5c@trace-letrec-syntax-macro (xud58@trace-let/rec-syntax 'letrec-syntax)) (set! xu2882@xud5c@trace-letrec-syntax-macro xud5c@trace-letrec-syntax-macro) (set! xud5e@guard-macro (lambda (xu1393@x) (letrec* ((xu1396@gen-clauses (lambda (xu13ad@con xu13ae@outerk xu13af@clause*) (letrec* ((xu13b4@f (lambda (xu13ed@x xu13ee@k) (let ((xu13f1@t xu13ed@x)) (let ((xu13f3@ls/false (xud90@syntax-dispatch xu13f1@t '(any #(scheme-id =>) any)))) (if xu13f3@ls/false (apply (lambda (xu13f5@e xu13f6@p) (let ((xu13f9@t (gensym))) (list 'let (list (list xu13f9@t xu13f5@e)) (list 'if xu13f9@t (list xu13f6@p xu13f9@t) xu13ee@k)))) xu13f3@ls/false) (let ((xu13fb@t xu13f1@t)) (let ((xu13fd@ls/false (xud90@syntax-dispatch xu13fb@t '(any)))) (if xu13fd@ls/false (apply (lambda (xu13ff@e) (let ((xu1401@t (gensym))) (list 'let (list (list xu1401@t xu13ff@e)) (list 'if xu1401@t xu1401@t xu13ee@k)))) xu13fd@ls/false) (let ((xu1403@t xu13fb@t)) (let ((xu1405@ls/false (xud90@syntax-dispatch xu1403@t '(any any . each-any)))) (if xu1405@ls/false (apply (lambda (xu1407@e xu1408@v xu1409@v*) (list 'if xu1407@e (cons 'begin (cons xu1408@v xu1409@v*)) xu13ee@k)) xu1405@ls/false) (let ((xu140d@t xu1403@t)) (let ((xu140f@ls/false (xud90@syntax-dispatch xu140d@t '_))) (if xu140f@ls/false (apply (lambda () (xue70@syntax-violation '#f '"invalid guard clause" xu13ed@x)) xu140f@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu140d@t))))))))))))))) (xu13b6@f* (lambda (xu13c3@x*) (let ((xu13c5@t xu13c3@x*)) (let ((xu13c7@ls/false (xud90@syntax-dispatch xu13c5@t '()))) (if xu13c7@ls/false (apply (lambda () (let ((xu13c9@g (gensym))) (values (list xu13c9@g (list 'lambda '() (list 'raise-continuable xu13ad@con))) xu13c9@g))) xu13c7@ls/false) (let ((xu13cb@t xu13c5@t)) (let ((xu13cd@ls/false (xud90@syntax-dispatch xu13cb@t '((#(scheme-id else) any . each-any))))) (if xu13cd@ls/false (apply (lambda (xu13cf@e xu13d0@e*) (values (cons 'begin (cons xu13cf@e xu13d0@e*)) '#f)) xu13cd@ls/false) (let ((xu13d3@t xu13cb@t)) (let ((xu13d5@ls/false (xud90@syntax-dispatch xu13d3@t '(any . any)))) (if xu13d5@ls/false (apply (lambda (xu13d7@cls xu13d8@cls*) (call-with-values (lambda () (xu13b6@f* xu13d8@cls*)) (lambda (xu13df@xu13dc xu13e0@xu13de) (let ((xu13e3@g xu13e0@xu13de) (xu13e4@e xu13df@xu13dc)) (values (xu13b4@f xu13d7@cls xu13e4@e) xu13e3@g))))) xu13d5@ls/false) (let ((xu13e7@t xu13d3@t)) (let ((xu13e9@ls/false (xud90@syntax-dispatch xu13e7@t 'any))) (if xu13e9@ls/false (apply (lambda (xu13eb@others) (xue70@syntax-violation '#f '"invalid guard clause" xu13eb@others)) xu13e9@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu13e7@t)))))))))))))))) (call-with-values (lambda () (xu13b6@f* xu13af@clause*)) (lambda (xu13bb@xu13b8 xu13bc@xu13ba) (let ((xu13bf@raisek xu13bc@xu13ba) (xu13c0@code xu13bb@xu13b8)) (if xu13bf@raisek (list (list 'call/cc (list 'lambda (list xu13bf@raisek) (list xu13ae@outerk (list 'lambda '() xu13c0@code))))) (list xu13ae@outerk (list 'lambda '() xu13c0@code)))))))))) (let ((xu1397@t xu1393@x)) (let ((xu1399@ls/false (xud90@syntax-dispatch xu1397@t '(_ (any . each-any) any . each-any)))) (if (and xu1399@ls/false (apply (lambda (xu139b@con xu139c@clause* xu139d@b xu139e@b*) (xub89@id? xu139b@con)) xu1399@ls/false)) (apply (lambda (xu13a3@con xu13a4@clause* xu13a5@b xu13a6@b*) (let ((xu13ab@outerk (gensym))) (xud46@bless (list (list 'call/cc (list 'lambda (list xu13ab@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list xu13a3@con) (xu1396@gen-clauses xu13a3@con xu13ab@outerk xu13a4@clause*)) (cons 'lambda (cons '() (cons xu13a5@b xu13a6@b*))))))))))) xu1399@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1397@t))))))) (set! xu2883@xud5e@guard-macro xud5e@guard-macro) (set! xud60@define-enumeration-macro (lambda (xu1411@stx) (letrec* ((xu1414@set? (lambda (xu142d@x) (or (null? xu142d@x) (and (not (memq (car xu142d@x) (cdr xu142d@x))) (xu1414@set? (cdr xu142d@x)))))) (xu1416@remove-dups (lambda (xu142b@ls) (if (null? xu142b@ls) '() (cons (car xu142b@ls) (xu1416@remove-dups (remq (car xu142b@ls) (cdr xu142b@ls)))))))) (let ((xu1417@t xu1411@stx)) (let ((xu1419@ls/false (xud90@syntax-dispatch xu1417@t '(_ any each-any any)))) (if (and xu1419@ls/false (apply (lambda (xu141b@name xu141c@id* xu141d@maker) (and (xub89@id? xu141b@name) (xub89@id? xu141d@maker) (for-all xub89@id? xu141c@id*))) xu1419@ls/false)) (apply (lambda (xu1421@name xu1422@id* xu1423@maker) (let ((xu1427@name* (xu1416@remove-dups (xue76@syntax->datum xu1422@id*))) (xu1428@mk (gensym))) (xud46@bless (list 'begin (list 'define xu1428@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote xu1427@name*)))) (list 'define-syntax xu1421@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote xu1427@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote xu1421@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax xu1423@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote xu1423@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote xu1427@name*)) (cons 'syntax-violation (cons (list 'quote xu1423@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons xu1428@mk '('(n* ...))))))))))))) xu1419@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1417@t))))))) (set! xu2884@xud60@define-enumeration-macro xud60@define-enumeration-macro) (set! xud62@time-macro (lambda (xu142f@stx) (let ((xu1431@t xu142f@stx)) (let ((xu1433@ls/false (xud90@syntax-dispatch xu1431@t '(_ any)))) (if xu1433@ls/false (apply (lambda (xu1435@expr) (xud46@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() xu1435@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) xu1433@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1431@t)))))) (set! xu2885@xud62@time-macro xud62@time-macro) (set! xud64@delay-macro (lambda (xu1437@stx) (let ((xu1439@t xu1437@stx)) (let ((xu143b@ls/false (xud90@syntax-dispatch xu1439@t '(_ any)))) (if xu143b@ls/false (apply (lambda (xu143d@expr) (xud46@bless (list 'make-promise (list 'lambda '() xu143d@expr)))) xu143b@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1439@t)))))) (set! xu2886@xud64@delay-macro xud64@delay-macro) (set! xud66@assert-macro (lambda (xu143f@stx) (let ((xu1441@t xu143f@stx)) (let ((xu1443@ls/false (xud90@syntax-dispatch xu1441@t '(_ any)))) (if xu1443@ls/false (apply (lambda (xu1445@expr) (let ((xu1447@pos (or (xue68@expression-position xu143f@stx) (xue68@expression-position xu1445@expr)))) (xud46@bless (list 'let (list (list 'x xu1445@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote xu1445@expr) (list 'quote xu1447@pos))))))) xu1443@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1441@t)))))) (set! xu2887@xud66@assert-macro xud66@assert-macro) (set! xud68@endianness-macro (lambda (xu1449@stx) (let ((xu144b@t xu1449@stx)) (let ((xu144d@ls/false (xud90@syntax-dispatch xu144b@t '(_ any)))) (if xu144d@ls/false (apply (lambda (xu144f@e) (let ((xu1451@t (xue76@syntax->datum xu144f@e))) (if (memv xu1451@t '(little)) (xud46@bless ''little) (if (memv xu1451@t '(big)) (xud46@bless ''big) (xue70@syntax-violation '#f '"endianness must be big or little" xu1449@stx))))) xu144d@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu144b@t)))))) (set! xu2888@xud68@endianness-macro xud68@endianness-macro) (set! xud6a@identifier-syntax-macro (lambda (xu1453@stx) (let ((xu1455@t xu1453@stx)) (let ((xu1457@ls/false (xud90@syntax-dispatch xu1455@t '(_ any)))) (if xu1457@ls/false (apply (lambda (xu1459@expr) (xud46@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax xu1459@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax xu1459@expr) '((syntax (e* ...)))))))))) xu1457@ls/false) (let ((xu145b@t xu1455@t)) (let ((xu145d@ls/false (xud90@syntax-dispatch xu145b@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and xu145d@ls/false (apply (lambda (xu145f@id1 xu1460@expr1 xu1461@id2 xu1462@expr2 xu1463@expr3) (and (xub89@id? xu145f@id1) (xub89@id? xu1461@id2) (xub89@id? xu1462@expr2))) xu145d@ls/false)) (apply (lambda (xu1469@id1 xu146a@expr1 xu146b@id2 xu146c@expr2 xu146d@expr3) (xud46@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax xu146a@expr1)) (list (list 'set! 'id xu146c@expr2) (list 'syntax xu146d@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons xu146a@expr1 '(e* ...))))))))) xu145d@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu145b@t))))))))) (set! xu2889@xud6a@identifier-syntax-macro xud6a@identifier-syntax-macro) (set! xud6c@do-macro (lambda (xu1473@stx) (letrec* ((xu1476@bind (lambda (xu148d@x) (let ((xu148f@t xu148d@x)) (let ((xu1491@ls/false (xud90@syntax-dispatch xu148f@t '(any any)))) (if xu1491@ls/false (apply (lambda (xu1493@x xu1494@init) (list xu1493@x xu1494@init xu1493@x)) xu1491@ls/false) (let ((xu1497@t xu148f@t)) (let ((xu1499@ls/false (xud90@syntax-dispatch xu1497@t '(any any any)))) (if xu1499@ls/false (apply (lambda (xu149b@x xu149c@init xu149d@step) (list xu149b@x xu149c@init xu149d@step)) xu1499@ls/false) (let ((xu14a1@t xu1497@t)) (let ((xu14a3@ls/false (xud90@syntax-dispatch xu14a1@t '_))) (if xu14a3@ls/false (apply (lambda () (xue70@syntax-violation '#f '"invalid binding" xu1473@stx)) xu14a3@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu14a1@t))))))))))))) (let ((xu1477@t xu1473@stx)) (let ((xu1479@ls/false (xud90@syntax-dispatch xu1477@t '(_ each-any (any . each-any) . each-any)))) (if xu1479@ls/false (apply (lambda (xu147b@binding* xu147c@test xu147d@expr* xu147e@command*) (let ((xu1483@t (map xu1476@bind xu147b@binding*))) (let ((xu1485@ls/false (xud90@syntax-dispatch xu1483@t '#(each (any any any))))) (if xu1485@ls/false (apply (lambda (xu1487@x* xu1488@init* xu1489@step*) (if (xub91@valid-bound-ids? xu1487@x*) (xud46@bless (list 'letrec (list (list 'loop (list 'lambda xu1487@x* (list 'if xu147c@test (cons 'begin (cons '(if #f #f) xu147d@expr*)) (cons 'begin (append xu147e@command* (list (cons 'loop xu1489@step*)))))))) (cons 'loop xu1488@init*))) (xue70@syntax-violation '#f '"invalid bindings" xu1473@stx))) xu1485@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1483@t))))) xu1479@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1477@t))))))) (set! xu288a@xud6c@do-macro xud6c@do-macro) (set! xud6e@let*-macro (lambda (xu14a5@stx) (let ((xu14a7@t xu14a5@stx)) (let ((xu14a9@ls/false (xud90@syntax-dispatch xu14a7@t '(_ #(each (any any)) any . each-any)))) (if (and xu14a9@ls/false (apply (lambda (xu14ab@lhs* xu14ac@rhs* xu14ad@b xu14ae@b*) (for-all xub89@id? xu14ab@lhs*)) xu14a9@ls/false)) (apply (lambda (xu14b3@lhs* xu14b4@rhs* xu14b5@b xu14b6@b*) (xud46@bless (let xu14bd@f ((xu14bb@x* (map list xu14b3@lhs* xu14b4@rhs*))) (if (null? xu14bb@x*) (cons 'let (cons '() (cons xu14b5@b xu14b6@b*))) (list 'let (list (car xu14bb@x*)) (xu14bd@f (cdr xu14bb@x*))))))) xu14a9@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu14a7@t)))))) (set! xu288b@xud6e@let*-macro xud6e@let*-macro) (set! xud70@or-macro (lambda (xu14bf@stx) (let ((xu14c1@t xu14bf@stx)) (let ((xu14c3@ls/false (xud90@syntax-dispatch xu14c1@t '(_)))) (if xu14c3@ls/false (apply (lambda () '#f) xu14c3@ls/false) (let ((xu14c5@t xu14c1@t)) (let ((xu14c7@ls/false (xud90@syntax-dispatch xu14c5@t '(_ any . each-any)))) (if xu14c7@ls/false (apply (lambda (xu14c9@e xu14ca@e*) (xud46@bless (let xu14d1@f ((xu14cd@e xu14c9@e) (xu14ce@e* xu14ca@e*)) (if (null? xu14ce@e*) (list 'begin '#f xu14cd@e) (list 'let (list (list 't xu14cd@e)) (list 'if 't 't (xu14d1@f (car xu14ce@e*) (cdr xu14ce@e*)))))))) xu14c7@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu14c5@t))))))))) (set! xu288c@xud70@or-macro xud70@or-macro) (set! xud72@and-macro (lambda (xu14d3@stx) (let ((xu14d5@t xu14d3@stx)) (let ((xu14d7@ls/false (xud90@syntax-dispatch xu14d5@t '(_)))) (if xu14d7@ls/false (apply (lambda () '#t) xu14d7@ls/false) (let ((xu14d9@t xu14d5@t)) (let ((xu14db@ls/false (xud90@syntax-dispatch xu14d9@t '(_ any . each-any)))) (if xu14db@ls/false (apply (lambda (xu14dd@e xu14de@e*) (xud46@bless (let xu14e5@f ((xu14e1@e xu14dd@e) (xu14e2@e* xu14de@e*)) (if (null? xu14e2@e*) (list 'begin '#f xu14e1@e) (cons 'if (cons xu14e1@e (cons (xu14e5@f (car xu14e2@e*) (cdr xu14e2@e*)) '(#f)))))))) xu14db@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu14d9@t))))))))) (set! xu288d@xud72@and-macro xud72@and-macro) (set! xud74@cond-macro (lambda (xu14e7@stx) (let ((xu14e9@t xu14e7@stx)) (let ((xu14eb@ls/false (xud90@syntax-dispatch xu14e9@t '(_ any . each-any)))) (if xu14eb@ls/false (apply (lambda (xu14ed@cls xu14ee@cls*) (xud46@bless (let xu14f5@f ((xu14f1@cls xu14ed@cls) (xu14f2@cls* xu14ee@cls*)) (if (null? xu14f2@cls*) (let ((xu14f7@t xu14f1@cls)) (let ((xu14f9@ls/false (xud90@syntax-dispatch xu14f7@t '(#(scheme-id else) any . each-any)))) (if xu14f9@ls/false (apply (lambda (xu14fb@e xu14fc@e*) (cons 'begin (cons xu14fb@e xu14fc@e*))) xu14f9@ls/false) (let ((xu14ff@t xu14f7@t)) (let ((xu1501@ls/false (xud90@syntax-dispatch xu14ff@t '(any #(scheme-id =>) any)))) (if xu1501@ls/false (apply (lambda (xu1503@e xu1504@p) (list 'let (list (list 't xu1503@e)) (list 'if 't (cons xu1504@p '(t))))) xu1501@ls/false) (let ((xu1507@t xu14ff@t)) (let ((xu1509@ls/false (xud90@syntax-dispatch xu1507@t '(any)))) (if xu1509@ls/false (apply (lambda (xu150b@e) (cons 'or (cons xu150b@e '((if #f #f))))) xu1509@ls/false) (let ((xu150d@t xu1507@t)) (let ((xu150f@ls/false (xud90@syntax-dispatch xu150d@t '(any . each-any)))) (if xu150f@ls/false (apply (lambda (xu1511@e xu1512@e*) (list 'if xu1511@e (cons 'begin xu1512@e*))) xu150f@ls/false) (let ((xu1515@t xu150d@t)) (let ((xu1517@ls/false (xud90@syntax-dispatch xu1515@t '_))) (if xu1517@ls/false (apply (lambda () (xue70@syntax-violation '#f '"invalid last clause" xu14e7@stx)) xu1517@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1515@t)))))))))))))))) (let ((xu1519@t xu14f1@cls)) (let ((xu151b@ls/false (xud90@syntax-dispatch xu1519@t '(#(scheme-id else) any . each-any)))) (if xu151b@ls/false (apply (lambda (xu151d@e xu151e@e*) (xue70@syntax-violation '#f '"incorrect position of keyword else" xu14e7@stx)) xu151b@ls/false) (let ((xu1521@t xu1519@t)) (let ((xu1523@ls/false (xud90@syntax-dispatch xu1521@t '(any #(scheme-id =>) any)))) (if xu1523@ls/false (apply (lambda (xu1525@e xu1526@p) (list 'let (list (list 't xu1525@e)) (list 'if 't (cons xu1526@p '(t)) (xu14f5@f (car xu14f2@cls*) (cdr xu14f2@cls*))))) xu1523@ls/false) (let ((xu1529@t xu1521@t)) (let ((xu152b@ls/false (xud90@syntax-dispatch xu1529@t '(any)))) (if xu152b@ls/false (apply (lambda (xu152d@e) (list 'or xu152d@e (xu14f5@f (car xu14f2@cls*) (cdr xu14f2@cls*)))) xu152b@ls/false) (let ((xu152f@t xu1529@t)) (let ((xu1531@ls/false (xud90@syntax-dispatch xu152f@t '(any . each-any)))) (if xu1531@ls/false (apply (lambda (xu1533@e xu1534@e*) (list 'if xu1533@e (cons 'begin xu1534@e*) (xu14f5@f (car xu14f2@cls*) (cdr xu14f2@cls*)))) xu1531@ls/false) (let ((xu1537@t xu152f@t)) (let ((xu1539@ls/false (xud90@syntax-dispatch xu1537@t '_))) (if xu1539@ls/false (apply (lambda () (xue70@syntax-violation '#f '"invalid last clause" xu14e7@stx)) xu1539@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1537@t)))))))))))))))))))) xu14eb@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu14e9@t)))))) (set! xu288e@xud74@cond-macro xud74@cond-macro) (set! xud76@do-include (lambda (xu153b@stx xu153c@id xu153d@filename) (let ((xu1541@filename (xub9d@stx->datum xu153d@filename))) (begin (if (not (and (string? xu1541@filename) (xub89@id? xu153c@id))) (xue70@syntax-violation '#f '"invalid syntax" xu153b@stx) (void)) (cons (xud46@bless 'begin) (with-input-from-file xu1541@filename (lambda () (let xu1545@f ((xu1543@ls '())) (let ((xu1547@x (xu6cb@xu59b@read-annotated))) (if (eof-object? xu1547@x) (reverse xu1543@ls) (xu1545@f (cons (xub69@datum->stx xu153c@id xu1547@x) xu1543@ls)))))))))))) (set! xu288f@xud76@do-include xud76@do-include) (set! xud78@include-macro (lambda (xu1549@e) (let ((xu154b@t xu1549@e)) (let ((xu154d@ls/false (xud90@syntax-dispatch xu154b@t '(any any)))) (if xu154d@ls/false (apply (lambda (xu154f@id xu1550@filename) (xud76@do-include xu1549@e xu154f@id xu1550@filename)) xu154d@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu154b@t)))))) (set! xu2890@xud78@include-macro xud78@include-macro) (set! xud7a@include-into-macro (lambda (xu1553@e) (let ((xu1555@t xu1553@e)) (let ((xu1557@ls/false (xud90@syntax-dispatch xu1555@t '(_ any any)))) (if xu1557@ls/false (apply (lambda (xu1559@id xu155a@filename) (xud76@do-include xu1553@e xu1559@id xu155a@filename)) xu1557@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1555@t)))))) (set! xu2891@xud7a@include-into-macro xud7a@include-into-macro) (set! xud7c@syntax-rules-macro (lambda (xu155d@e) (let ((xu155f@t xu155d@e)) (let ((xu1561@ls/false (xud90@syntax-dispatch xu155f@t '(_ each-any . #(each (any any)))))) (if xu1561@ls/false (apply (lambda (xu1563@lits xu1564@pat* xu1565@tmp*) (begin (xud96@verify-literals xu1563@lits xu155d@e) (xud46@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons xu1563@lits (map (lambda (xu1569@pat xu156a@tmp) (let ((xu156d@t xu1569@pat)) (let ((xu156f@ls/false (xud90@syntax-dispatch xu156d@t '(_ . any)))) (if xu156f@ls/false (apply (lambda (xu1571@rest) (list (cons 'g xu1571@rest) (list 'syntax xu156a@tmp))) xu156f@ls/false) (let ((xu1573@t xu156d@t)) (let ((xu1575@ls/false (xud90@syntax-dispatch xu1573@t '_))) (if xu1575@ls/false (apply (lambda () (xue70@syntax-violation '#f '"invalid syntax-rules pattern" xu155d@e xu1569@pat)) xu1575@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1573@t)))))))) xu1564@pat* xu1565@tmp*)))))))) xu1561@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu155f@t)))))) (set! xu2892@xud7c@syntax-rules-macro xud7c@syntax-rules-macro) (set! xud7e@quasiquote-macro (letrec* ((xu1578@datum (lambda (xu1679@x) (list (xud18@scheme-stx 'quote) (xub71@mkstx xu1679@x xub0d@top-mark* '() '())))) (xu1594@quasicons* (lambda (xu1671@x xu1672@y) (let xu1677@f ((xu1675@x xu1671@x)) (if (null? xu1675@x) xu1672@y (xu1596@quasicons (car xu1675@x) (xu1677@f (cdr xu1675@x))))))) (xu1596@quasicons (lambda (xu164b@x xu164c@y) (let ((xu164f@t xu164c@y)) (let ((xu1651@ls/false (xud90@syntax-dispatch xu164f@t '(#(scheme-id quote) any)))) (if xu1651@ls/false (apply (lambda (xu1653@dy) (let ((xu1655@t xu164b@x)) (let ((xu1657@ls/false (xud90@syntax-dispatch xu1655@t '(#(scheme-id quote) any)))) (if xu1657@ls/false (apply (lambda (xu1659@dx) (list (xud18@scheme-stx 'quote) (cons xu1659@dx xu1653@dy))) xu1657@ls/false) (let ((xu165b@t xu1655@t)) (let ((xu165d@ls/false (xud90@syntax-dispatch xu165b@t '_))) (if xu165d@ls/false (apply (lambda () (let ((xu165f@t xu1653@dy)) (let ((xu1661@ls/false (xud90@syntax-dispatch xu165f@t '()))) (if xu1661@ls/false (apply (lambda () (list (xud18@scheme-stx 'list) xu164b@x)) xu1661@ls/false) (let ((xu1663@t xu165f@t)) (let ((xu1665@ls/false (xud90@syntax-dispatch xu1663@t '_))) (if xu1665@ls/false (apply (lambda () (list (xud18@scheme-stx 'cons) xu164b@x xu164c@y)) xu1665@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1663@t)))))))) xu165d@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu165b@t)))))))) xu1651@ls/false) (let ((xu1667@t xu164f@t)) (let ((xu1669@ls/false (xud90@syntax-dispatch xu1667@t '(#(scheme-id list) . each-any)))) (if xu1669@ls/false (apply (lambda (xu166b@stuff) (cons* (xud18@scheme-stx 'list) xu164b@x xu166b@stuff)) xu1669@ls/false) (let ((xu166d@t xu1667@t)) (let ((xu166f@ls/false (xud90@syntax-dispatch xu166d@t '_))) (if xu166f@ls/false (apply (lambda () (list (xud18@scheme-stx 'cons) xu164b@x xu164c@y)) xu166f@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu166d@t)))))))))))) (xu1598@quasiappend (lambda (xu1631@x xu1632@y) (let ((xu1635@ls (let xu1639@f ((xu1637@x xu1631@x)) (if (null? xu1637@x) (let ((xu163b@t xu1632@y)) (let ((xu163d@ls/false (xud90@syntax-dispatch xu163b@t '(#(scheme-id quote) ())))) (if xu163d@ls/false (apply (lambda () '()) xu163d@ls/false) (let ((xu163f@t xu163b@t)) (let ((xu1641@ls/false (xud90@syntax-dispatch xu163f@t '_))) (if xu1641@ls/false (apply (lambda () (list xu1632@y)) xu1641@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu163f@t))))))) (let ((xu1643@t (car xu1637@x))) (let ((xu1645@ls/false (xud90@syntax-dispatch xu1643@t '(#(scheme-id quote) ())))) (if xu1645@ls/false (apply (lambda () (xu1639@f (cdr xu1637@x))) xu1645@ls/false) (let ((xu1647@t xu1643@t)) (let ((xu1649@ls/false (xud90@syntax-dispatch xu1647@t '_))) (if xu1649@ls/false (apply (lambda () (cons (car xu1637@x) (xu1639@f (cdr xu1637@x)))) xu1649@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1647@t))))))))))) (if (null? xu1635@ls) (list (xud18@scheme-stx 'quote) '()) (if (null? (cdr xu1635@ls)) (car xu1635@ls) (cons* (xud18@scheme-stx 'append) xu1635@ls)))))) (xu159a@quasivector (lambda (xu15ff@x) (let ((xu1601@pat-x xu15ff@x)) (let ((xu1603@t xu1601@pat-x)) (let ((xu1605@ls/false (xud90@syntax-dispatch xu1603@t '(#(scheme-id quote) each-any)))) (if xu1605@ls/false (apply (lambda (xu1607@x*) (list (xud18@scheme-stx 'quote) (list->vector xu1607@x*))) xu1605@ls/false) (let ((xu1609@t xu1603@t)) (let ((xu160b@ls/false (xud90@syntax-dispatch xu1609@t '_))) (if xu160b@ls/false (apply (lambda () (let xu1613@f ((xu160d@x xu15ff@x) (xu160e@k (lambda (xu1611@ls) (cons* (xud18@scheme-stx 'vector) xu1611@ls)))) (let ((xu1615@t xu160d@x)) (let ((xu1617@ls/false (xud90@syntax-dispatch xu1615@t '(#(scheme-id quote) each-any)))) (if xu1617@ls/false (apply (lambda (xu1619@x*) (xu160e@k (map (lambda (xu161b@x) (list (xud18@scheme-stx 'quote) xu161b@x)) xu1619@x*))) xu1617@ls/false) (let ((xu161d@t xu1615@t)) (let ((xu161f@ls/false (xud90@syntax-dispatch xu161d@t '(#(scheme-id list) . each-any)))) (if xu161f@ls/false (apply (lambda (xu1621@x*) (xu160e@k xu1621@x*)) xu161f@ls/false) (let ((xu1623@t xu161d@t)) (let ((xu1625@ls/false (xud90@syntax-dispatch xu1623@t '(#(scheme-id cons) any any)))) (if xu1625@ls/false (apply (lambda (xu1627@x xu1628@y) (xu1613@f xu1628@y (lambda (xu162b@ls) (xu160e@k (cons xu1627@x xu162b@ls))))) xu1625@ls/false) (let ((xu162d@t xu1623@t)) (let ((xu162f@ls/false (xud90@syntax-dispatch xu162d@t '_))) (if xu162f@ls/false (apply (lambda () (list (xud18@scheme-stx 'list->vector) xu1601@pat-x)) xu162f@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu162d@t))))))))))))))) xu160b@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1609@t)))))))))) (xu159c@vquasi (lambda (xu15dd@p xu15de@lev) (let ((xu15e1@t xu15dd@p)) (let ((xu15e3@ls/false (xud90@syntax-dispatch xu15e1@t '(any . any)))) (if xu15e3@ls/false (apply (lambda (xu15e5@p xu15e6@q) (let ((xu15e9@t xu15e5@p)) (let ((xu15eb@ls/false (xud90@syntax-dispatch xu15e9@t '(#(scheme-id unquote) . each-any)))) (if xu15eb@ls/false (apply (lambda (xu15ed@p) (if (= xu15de@lev '0) (xu1594@quasicons* xu15ed@p (xu159c@vquasi xu15e6@q xu15de@lev)) (xu1596@quasicons (xu1596@quasicons (xu1578@datum 'unquote) (xu159e@quasi xu15ed@p (- xu15de@lev '1))) (xu159c@vquasi xu15e6@q xu15de@lev)))) xu15eb@ls/false) (let ((xu15ef@t xu15e9@t)) (let ((xu15f1@ls/false (xud90@syntax-dispatch xu15ef@t '(#(scheme-id unquote-splicing) . each-any)))) (if xu15f1@ls/false (apply (lambda (xu15f3@p) (if (= xu15de@lev '0) (xu1598@quasiappend xu15f3@p (xu159c@vquasi xu15e6@q xu15de@lev)) (xu1596@quasicons (xu1596@quasicons (xu1578@datum 'unquote-splicing) (xu159e@quasi xu15f3@p (- xu15de@lev '1))) (xu159c@vquasi xu15e6@q xu15de@lev)))) xu15f1@ls/false) (let ((xu15f5@t xu15ef@t)) (let ((xu15f7@ls/false (xud90@syntax-dispatch xu15f5@t 'any))) (if xu15f7@ls/false (apply (lambda (xu15f9@p) (xu1596@quasicons (xu159e@quasi xu15f9@p xu15de@lev) (xu159c@vquasi xu15e6@q xu15de@lev))) xu15f7@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu15f5@t))))))))))) xu15e3@ls/false) (let ((xu15fb@t xu15e1@t)) (let ((xu15fd@ls/false (xud90@syntax-dispatch xu15fb@t '()))) (if xu15fd@ls/false (apply (lambda () (list (xud18@scheme-stx 'quote) '())) xu15fd@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu15fb@t))))))))) (xu159e@quasi (lambda (xu15a7@p xu15a8@lev) (let ((xu15ab@t xu15a7@p)) (let ((xu15ad@ls/false (xud90@syntax-dispatch xu15ab@t '(#(scheme-id unquote) any)))) (if xu15ad@ls/false (apply (lambda (xu15af@p) (if (= xu15a8@lev '0) xu15af@p (xu1596@quasicons (xu1578@datum 'unquote) (xu159e@quasi (list xu15af@p) (- xu15a8@lev '1))))) xu15ad@ls/false) (let ((xu15b1@t xu15ab@t)) (let ((xu15b3@ls/false (xud90@syntax-dispatch xu15b1@t '((#(scheme-id unquote) . each-any) . any)))) (if xu15b3@ls/false (apply (lambda (xu15b5@p xu15b6@q) (if (= xu15a8@lev '0) (xu1594@quasicons* xu15b5@p (xu159e@quasi xu15b6@q xu15a8@lev)) (xu1596@quasicons (xu1596@quasicons (xu1578@datum 'unquote) (xu159e@quasi xu15b5@p (- xu15a8@lev '1))) (xu159e@quasi xu15b6@q xu15a8@lev)))) xu15b3@ls/false) (let ((xu15b9@t xu15b1@t)) (let ((xu15bb@ls/false (xud90@syntax-dispatch xu15b9@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if xu15bb@ls/false (apply (lambda (xu15bd@p xu15be@q) (if (= xu15a8@lev '0) (xu1598@quasiappend xu15bd@p (xu159e@quasi xu15be@q xu15a8@lev)) (xu1596@quasicons (xu1596@quasicons (xu1578@datum 'unquote-splicing) (xu159e@quasi xu15bd@p (- xu15a8@lev '1))) (xu159e@quasi xu15be@q xu15a8@lev)))) xu15bb@ls/false) (let ((xu15c1@t xu15b9@t)) (let ((xu15c3@ls/false (xud90@syntax-dispatch xu15c1@t '(#(scheme-id quasiquote) any)))) (if xu15c3@ls/false (apply (lambda (xu15c5@p) (xu1596@quasicons (xu1578@datum 'quasiquote) (xu159e@quasi (list xu15c5@p) (+ xu15a8@lev '1)))) xu15c3@ls/false) (let ((xu15c7@t xu15c1@t)) (let ((xu15c9@ls/false (xud90@syntax-dispatch xu15c7@t '(any . any)))) (if xu15c9@ls/false (apply (lambda (xu15cb@p xu15cc@q) (xu1596@quasicons (xu159e@quasi xu15cb@p xu15a8@lev) (xu159e@quasi xu15cc@q xu15a8@lev))) xu15c9@ls/false) (let ((xu15cf@t xu15c7@t)) (let ((xu15d1@ls/false (xud90@syntax-dispatch xu15cf@t '#(vector each-any)))) (if (and xu15d1@ls/false (apply (lambda (xu15d3@x) (not (xub55@stx? xu15d3@x))) xu15d1@ls/false)) (apply (lambda (xu15d5@x) (xu159a@quasivector (xu159c@vquasi xu15d5@x xu15a8@lev))) xu15d1@ls/false) (let ((xu15d7@t xu15cf@t)) (let ((xu15d9@ls/false (xud90@syntax-dispatch xu15d7@t 'any))) (if xu15d9@ls/false (apply (lambda (xu15db@p) (list (xud18@scheme-stx 'quote) xu15db@p)) xu15d9@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu15d7@t))))))))))))))))))))))))) (lambda (xu159f@x) (let ((xu15a1@t xu159f@x)) (let ((xu15a3@ls/false (xud90@syntax-dispatch xu15a1@t '(_ any)))) (if xu15a3@ls/false (apply (lambda (xu15a5@e) (xu159e@quasi xu15a5@e '0)) xu15a3@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu15a1@t))))))) (set! xu2893@xud7e@quasiquote-macro xud7e@quasiquote-macro) (set! xud80@quasisyntax-macro (letrec* ((xu167c@quasi (lambda (xu1697@p xu1698@lev) (let ((xu169b@t xu1697@p)) (let ((xu169d@ls/false (xud90@syntax-dispatch xu169b@t '(#(scheme-id unsyntax) any)))) (if xu169d@ls/false (apply (lambda (xu169f@p) (if (= xu1698@lev '0) (let ((xu16a1@g (gensym))) (values (list xu16a1@g) (list xu169f@p) xu16a1@g)) (call-with-values (lambda () (xu167c@quasi xu169f@p (- xu1698@lev '1))) (lambda (xu16a9@xu16a4 xu16aa@xu16a6 xu16ab@xu16a8) (let ((xu16af@p xu16ab@xu16a8) (xu16b0@rhs* xu16aa@xu16a6) (xu16b1@lhs* xu16a9@xu16a4)) (values xu16b1@lhs* xu16b0@rhs* (list 'unsyntax xu16af@p))))))) xu169d@ls/false) (let ((xu16b5@t xu169b@t)) (let ((xu16b7@ls/false (xud90@syntax-dispatch xu16b5@t '#(scheme-id unsyntax)))) (if (and xu16b7@ls/false (apply (lambda () (= xu1698@lev '0)) xu16b7@ls/false)) (apply (lambda () (xue70@syntax-violation '#f '"incorrect use of unsyntax" xu1697@p)) xu16b7@ls/false) (let ((xu16b9@t xu16b5@t)) (let ((xu16bb@ls/false (xud90@syntax-dispatch xu16b9@t '((#(scheme-id unsyntax) . each-any) . any)))) (if xu16bb@ls/false (apply (lambda (xu16bd@p* xu16be@q) (call-with-values (lambda () (xu167c@quasi xu16be@q xu1698@lev)) (lambda (xu16c7@xu16c2 xu16c8@xu16c4 xu16c9@xu16c6) (let ((xu16cd@q xu16c9@xu16c6) (xu16ce@rhs* xu16c8@xu16c4) (xu16cf@lhs* xu16c7@xu16c2)) (if (= xu1698@lev '0) (let ((xu16d3@g* (map (lambda (xu16d5@x) (gensym)) xu16bd@p*))) (values (append xu16d3@g* xu16cf@lhs*) (append xu16bd@p* xu16ce@rhs*) (append xu16d3@g* xu16cd@q))) (call-with-values (lambda () (xu167c@quasi xu16bd@p* (- xu1698@lev '1))) (lambda (xu16dd@xu16d8 xu16de@xu16da xu16df@xu16dc) (let ((xu16e3@p* xu16df@xu16dc) (xu16e4@rhs2* xu16de@xu16da) (xu16e5@lhs2* xu16dd@xu16d8)) (values (append xu16e5@lhs2* xu16cf@lhs*) (append xu16e4@rhs2* xu16ce@rhs*) (cons (cons 'unsyntax xu16e3@p*) xu16cd@q)))))))))) xu16bb@ls/false) (let ((xu16e9@t xu16b9@t)) (let ((xu16eb@ls/false (xud90@syntax-dispatch xu16e9@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if xu16eb@ls/false (apply (lambda (xu16ed@p* xu16ee@q) (call-with-values (lambda () (xu167c@quasi xu16ee@q xu1698@lev)) (lambda (xu16f7@xu16f2 xu16f8@xu16f4 xu16f9@xu16f6) (let ((xu16fd@q xu16f9@xu16f6) (xu16fe@rhs* xu16f8@xu16f4) (xu16ff@lhs* xu16f7@xu16f2)) (if (= xu1698@lev '0) (let ((xu1703@g* (map (lambda (xu1705@x) (gensym)) xu16ed@p*))) (values (append (map (lambda (xu1707@g) (cons xu1707@g '(...))) xu1703@g*) xu16ff@lhs*) (append xu16ed@p* xu16fe@rhs*) (append (apply append (map (lambda (xu1709@g) (cons xu1709@g '(...))) xu1703@g*)) xu16fd@q))) (call-with-values (lambda () (xu167c@quasi xu16ed@p* (- xu1698@lev '1))) (lambda (xu1711@xu170c xu1712@xu170e xu1713@xu1710) (let ((xu1717@p* xu1713@xu1710) (xu1718@rhs2* xu1712@xu170e) (xu1719@lhs2* xu1711@xu170c)) (values (append xu1719@lhs2* xu16ff@lhs*) (append xu1718@rhs2* xu16fe@rhs*) (cons (cons 'unsyntax-splicing xu1717@p*) xu16fd@q)))))))))) xu16eb@ls/false) (let ((xu171d@t xu16e9@t)) (let ((xu171f@ls/false (xud90@syntax-dispatch xu171d@t '#(scheme-id unsyntax-splicing)))) (if (and xu171f@ls/false (apply (lambda () (= xu1698@lev '0)) xu171f@ls/false)) (apply (lambda () (xue70@syntax-violation '#f '"incorrect use of unsyntax-splicing" xu1697@p)) xu171f@ls/false) (let ((xu1721@t xu171d@t)) (let ((xu1723@ls/false (xud90@syntax-dispatch xu1721@t '(#(scheme-id quasisyntax) any)))) (if xu1723@ls/false (apply (lambda (xu1725@p) (call-with-values (lambda () (xu167c@quasi xu1725@p (+ xu1698@lev '1))) (lambda (xu172d@xu1728 xu172e@xu172a xu172f@xu172c) (let ((xu1733@p xu172f@xu172c) (xu1734@rhs* xu172e@xu172a) (xu1735@lhs* xu172d@xu1728)) (values xu1735@lhs* xu1734@rhs* (list 'quasisyntax xu1733@p)))))) xu1723@ls/false) (let ((xu1739@t xu1721@t)) (let ((xu173b@ls/false (xud90@syntax-dispatch xu1739@t '(any . any)))) (if xu173b@ls/false (apply (lambda (xu173d@p xu173e@q) (call-with-values (lambda () (xu167c@quasi xu173d@p xu1698@lev)) (lambda (xu174d@xu1742 xu174e@xu1744 xu174f@xu1746) (call-with-values (lambda () (xu167c@quasi xu173e@q xu1698@lev)) (lambda (xu1753@xu1748 xu1754@xu174a xu1755@xu174c) (let ((xu1759@q xu1755@xu174c) (xu175a@rhs2* xu1754@xu174a) (xu175b@lhs2* xu1753@xu1748) (xu175c@p xu174f@xu1746) (xu175d@rhs* xu174e@xu1744) (xu175e@lhs* xu174d@xu1742)) (values (append xu175b@lhs2* xu175e@lhs*) (append xu175a@rhs2* xu175d@rhs*) (cons xu175c@p xu1759@q)))))))) xu173b@ls/false) (let ((xu1765@t xu1739@t)) (let ((xu1767@ls/false (xud90@syntax-dispatch xu1765@t '#(vector each-any)))) (if xu1767@ls/false (apply (lambda (xu1769@x*) (call-with-values (lambda () (xu167c@quasi xu1769@x* xu1698@lev)) (lambda (xu1771@xu176c xu1772@xu176e xu1773@xu1770) (let ((xu1777@x* xu1773@xu1770) (xu1778@rhs* xu1772@xu176e) (xu1779@lhs* xu1771@xu176c)) (values xu1779@lhs* xu1778@rhs* (list->vector xu1777@x*)))))) xu1767@ls/false) (let ((xu177d@t xu1765@t)) (let ((xu177f@ls/false (xud90@syntax-dispatch xu177d@t '_))) (if xu177f@ls/false (apply (lambda () (values '() '() xu1697@p)) xu177f@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu177d@t))))))))))))))))))))))))))))))) (lambda (xu167d@x) (let ((xu167f@t xu167d@x)) (let ((xu1681@ls/false (xud90@syntax-dispatch xu167f@t '(_ any)))) (if xu1681@ls/false (apply (lambda (xu1683@e) (call-with-values (lambda () (xu167c@quasi xu1683@e '0)) (lambda (xu168b@xu1686 xu168c@xu1688 xu168d@xu168a) (let ((xu1691@v xu168d@xu168a) (xu1692@rhs* xu168c@xu1688) (xu1693@lhs* xu168b@xu1686)) (xud46@bless (list 'syntax-case (cons 'list xu1692@rhs*) '() (list xu1693@lhs* (list 'syntax xu1691@v)))))))) xu1681@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu167f@t))))))) (set! xu2894@xud80@quasisyntax-macro xud80@quasisyntax-macro) (set! xud82@define-struct-macro (lambda (xu1781@stx) (xue70@syntax-violation '#f '"define-struct not supported" xu1781@stx))) (set! xu2895@xud82@define-struct-macro xud82@define-struct-macro) (set! xud84@define-record-type-macro (lambda (xu1783@x) (letrec* ((xu1786@id (lambda (xu1979@ctxt . xu197b@str*) (xue74@datum->syntax xu1979@ctxt (string->symbol (apply string-append (map (lambda (xu197d@x) (if (symbol? xu197d@x) (symbol->string xu197d@x) (if (string? xu197d@x) xu197d@x (assertion-violation 'define-record-type '"BUG")))) xu197b@str*)))))) (xu1788@get-record-name (lambda (xu1967@spec) (let ((xu1969@t xu1967@spec)) (let ((xu196b@ls/false (xud90@syntax-dispatch xu1969@t '(any any any)))) (if xu196b@ls/false (apply (lambda (xu196d@foo xu196e@make-foo xu196f@foo?) xu196d@foo) xu196b@ls/false) (let ((xu1973@t xu1969@t)) (let ((xu1975@ls/false (xud90@syntax-dispatch xu1973@t 'any))) (if xu1975@ls/false (apply (lambda (xu1977@foo) xu1977@foo) xu1975@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1973@t))))))))) (xu178a@get-record-constructor-name (lambda (xu1953@spec) (let ((xu1955@t xu1953@spec)) (let ((xu1957@ls/false (xud90@syntax-dispatch xu1955@t '(any any any)))) (if xu1957@ls/false (apply (lambda (xu1959@foo xu195a@make-foo xu195b@foo?) xu195a@make-foo) xu1957@ls/false) (let ((xu195f@t xu1955@t)) (let ((xu1961@ls/false (xud90@syntax-dispatch xu195f@t 'any))) (if (and xu1961@ls/false (apply (lambda (xu1963@foo) (xub89@id? xu1963@foo)) xu1961@ls/false)) (apply (lambda (xu1965@foo) (xu1786@id xu1965@foo '"make-" (xub9d@stx->datum xu1965@foo))) xu1961@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu195f@t))))))))) (xu178c@get-record-predicate-name (lambda (xu193f@spec) (let ((xu1941@t xu193f@spec)) (let ((xu1943@ls/false (xud90@syntax-dispatch xu1941@t '(any any any)))) (if xu1943@ls/false (apply (lambda (xu1945@foo xu1946@make-foo xu1947@foo?) xu1947@foo?) xu1943@ls/false) (let ((xu194b@t xu1941@t)) (let ((xu194d@ls/false (xud90@syntax-dispatch xu194b@t 'any))) (if (and xu194d@ls/false (apply (lambda (xu194f@foo) (xub89@id? xu194f@foo)) xu194d@ls/false)) (apply (lambda (xu1951@foo) (xu1786@id xu1951@foo (xub9d@stx->datum xu1951@foo) '"?")) xu194d@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu194b@t))))))))) (xu178e@get-clause (lambda (xu192d@id xu192e@ls) (let ((xu1931@t xu192e@ls)) (let ((xu1933@ls/false (xud90@syntax-dispatch xu1931@t '()))) (if xu1933@ls/false (apply (lambda () '#f) xu1933@ls/false) (let ((xu1935@t xu1931@t)) (let ((xu1937@ls/false (xud90@syntax-dispatch xu1935@t '((any . any) . any)))) (if xu1937@ls/false (apply (lambda (xu1939@x xu193a@rest xu193b@ls) (if (xub8f@free-id=? (xud46@bless xu192d@id) xu1939@x) (cons xu1939@x xu193a@rest) (xu178e@get-clause xu192d@id xu193b@ls))) xu1937@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1935@t))))))))) (xu1790@foo-rtd-code (lambda (xu18db@name xu18dc@clause* xu18dd@parent-rtd-code) (letrec* ((xu18e2@convert-field-spec* (lambda (xu1913@ls) (list->vector (map (lambda (xu1915@x) (let ((xu1917@t xu1915@x)) (let ((xu1919@ls/false (xud90@syntax-dispatch xu1917@t '(#(scheme-id mutable) any . any)))) (if xu1919@ls/false (apply (lambda (xu191b@name xu191c@rest) (list 'mutable xu191b@name)) xu1919@ls/false) (let ((xu191f@t xu1917@t)) (let ((xu1921@ls/false (xud90@syntax-dispatch xu191f@t '(#(scheme-id immutable) any . any)))) (if xu1921@ls/false (apply (lambda (xu1923@name xu1924@rest) (list 'immutable xu1923@name)) xu1921@ls/false) (let ((xu1927@t xu191f@t)) (let ((xu1929@ls/false (xud90@syntax-dispatch xu1927@t 'any))) (if xu1929@ls/false (apply (lambda (xu192b@name) (list 'immutable xu192b@name)) xu1929@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1927@t))))))))))) xu1913@ls))))) (let ((xu18e3@uid-code (let ((xu18eb@t (xu178e@get-clause 'nongenerative xu18dc@clause*))) (let ((xu18ed@ls/false (xud90@syntax-dispatch xu18eb@t '(_)))) (if xu18ed@ls/false (apply (lambda () (list 'quote (gensym))) xu18ed@ls/false) (let ((xu18ef@t xu18eb@t)) (let ((xu18f1@ls/false (xud90@syntax-dispatch xu18ef@t '(_ any)))) (if xu18f1@ls/false (apply (lambda (xu18f3@uid) (list 'quote xu18f3@uid)) xu18f1@ls/false) (let ((xu18f5@t xu18ef@t)) (let ((xu18f7@ls/false (xud90@syntax-dispatch xu18f5@t '_))) (if xu18f7@ls/false (apply (lambda () '#f) xu18f7@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu18f5@t))))))))))) (xu18e4@sealed? (let ((xu18f9@t (xu178e@get-clause 'sealed xu18dc@clause*))) (let ((xu18fb@ls/false (xud90@syntax-dispatch xu18f9@t '(_ #(atom #t))))) (if xu18fb@ls/false (apply (lambda () '#t) xu18fb@ls/false) (let ((xu18fd@t xu18f9@t)) (let ((xu18ff@ls/false (xud90@syntax-dispatch xu18fd@t '_))) (if xu18ff@ls/false (apply (lambda () '#f) xu18ff@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu18fd@t)))))))) (xu18e5@opaque? (let ((xu1901@t (xu178e@get-clause 'opaque xu18dc@clause*))) (let ((xu1903@ls/false (xud90@syntax-dispatch xu1901@t '(_ #(atom #t))))) (if xu1903@ls/false (apply (lambda () '#t) xu1903@ls/false) (let ((xu1905@t xu1901@t)) (let ((xu1907@ls/false (xud90@syntax-dispatch xu1905@t '_))) (if xu1907@ls/false (apply (lambda () '#f) xu1907@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1905@t)))))))) (xu18e6@fields (let ((xu1909@t (xu178e@get-clause 'fields xu18dc@clause*))) (let ((xu190b@ls/false (xud90@syntax-dispatch xu1909@t '(_ . each-any)))) (if xu190b@ls/false (apply (lambda (xu190d@field-spec*) (list 'quote (xu18e2@convert-field-spec* xu190d@field-spec*))) xu190b@ls/false) (let ((xu190f@t xu1909@t)) (let ((xu1911@ls/false (xud90@syntax-dispatch xu190f@t '_))) (if xu1911@ls/false (apply (lambda () ''#()) xu1911@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu190f@t))))))))) (xud46@bless (list 'make-record-type-descriptor (list 'quote xu18db@name) xu18dd@parent-rtd-code xu18e3@uid-code xu18e4@sealed? xu18e5@opaque? xu18e6@fields)))))) (xu1792@parent-rtd-code (lambda (xu18c3@clause*) (let ((xu18c5@t (xu178e@get-clause 'parent xu18c3@clause*))) (let ((xu18c7@ls/false (xud90@syntax-dispatch xu18c5@t '(_ any)))) (if xu18c7@ls/false (apply (lambda (xu18c9@name) (list 'record-type-descriptor xu18c9@name)) xu18c7@ls/false) (let ((xu18cb@t xu18c5@t)) (let ((xu18cd@ls/false (xud90@syntax-dispatch xu18cb@t '#(atom #f)))) (if xu18cd@ls/false (apply (lambda () (let ((xu18cf@t (xu178e@get-clause 'parent-rtd xu18c3@clause*))) (let ((xu18d1@ls/false (xud90@syntax-dispatch xu18cf@t '(_ any any)))) (if xu18d1@ls/false (apply (lambda (xu18d3@rtd xu18d4@rcd) xu18d3@rtd) xu18d1@ls/false) (let ((xu18d7@t xu18cf@t)) (let ((xu18d9@ls/false (xud90@syntax-dispatch xu18d7@t '#(atom #f)))) (if xu18d9@ls/false (apply (lambda () '#f) xu18d9@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu18d7@t)))))))) xu18cd@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu18cb@t))))))))) (xu1794@parent-rcd-code (lambda (xu18ab@clause*) (let ((xu18ad@t (xu178e@get-clause 'parent xu18ab@clause*))) (let ((xu18af@ls/false (xud90@syntax-dispatch xu18ad@t '(_ any)))) (if xu18af@ls/false (apply (lambda (xu18b1@name) (list 'record-constructor-descriptor xu18b1@name)) xu18af@ls/false) (let ((xu18b3@t xu18ad@t)) (let ((xu18b5@ls/false (xud90@syntax-dispatch xu18b3@t '#(atom #f)))) (if xu18b5@ls/false (apply (lambda () (let ((xu18b7@t (xu178e@get-clause 'parent-rtd xu18ab@clause*))) (let ((xu18b9@ls/false (xud90@syntax-dispatch xu18b7@t '(_ any any)))) (if xu18b9@ls/false (apply (lambda (xu18bb@rtd xu18bc@rcd) xu18bc@rcd) xu18b9@ls/false) (let ((xu18bf@t xu18b7@t)) (let ((xu18c1@ls/false (xud90@syntax-dispatch xu18bf@t '#(atom #f)))) (if xu18c1@ls/false (apply (lambda () '#f) xu18c1@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu18bf@t)))))))) xu18b5@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu18b3@t))))))))) (xu1796@foo-rcd-code (lambda (xu18a3@clause* xu18a4@foo-rtd xu18a5@protocol xu18a6@parent-rcd-code) (list 'make-record-constructor-descriptor xu18a4@foo-rtd xu18a6@parent-rcd-code xu18a5@protocol))) (xu1798@get-protocol-code (lambda (xu1897@clause*) (let ((xu1899@t (xu178e@get-clause 'protocol xu1897@clause*))) (let ((xu189b@ls/false (xud90@syntax-dispatch xu1899@t '(_ any)))) (if xu189b@ls/false (apply (lambda (xu189d@expr) xu189d@expr) xu189b@ls/false) (let ((xu189f@t xu1899@t)) (let ((xu18a1@ls/false (xud90@syntax-dispatch xu189f@t '_))) (if xu18a1@ls/false (apply (lambda () '#f) xu18a1@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu189f@t))))))))) (xu179a@get-fields (lambda (xu1885@clause*) (let ((xu1887@t xu1885@clause*)) (let ((xu1889@ls/false (xud90@syntax-dispatch xu1887@t '()))) (if xu1889@ls/false (apply (lambda () '()) xu1889@ls/false) (let ((xu188b@t xu1887@t)) (let ((xu188d@ls/false (xud90@syntax-dispatch xu188b@t '((#(scheme-id fields) . each-any) . _)))) (if xu188d@ls/false (apply (lambda (xu188f@f*) xu188f@f*) xu188d@ls/false) (let ((xu1891@t xu188b@t)) (let ((xu1893@ls/false (xud90@syntax-dispatch xu1891@t '(_ . any)))) (if xu1893@ls/false (apply (lambda (xu1895@rest) (xu179a@get-fields xu1895@rest)) xu1893@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1891@t)))))))))))) (xu179c@get-mutator-indices (lambda (xu186d@fields) (let xu1873@f ((xu186f@fields xu186d@fields) (xu1870@i '0)) (let ((xu1875@t xu186f@fields)) (let ((xu1877@ls/false (xud90@syntax-dispatch xu1875@t '()))) (if xu1877@ls/false (apply (lambda () '()) xu1877@ls/false) (let ((xu1879@t xu1875@t)) (let ((xu187b@ls/false (xud90@syntax-dispatch xu1879@t '((#(scheme-id mutable) . _) . any)))) (if xu187b@ls/false (apply (lambda (xu187d@rest) (cons xu1870@i (xu1873@f xu187d@rest (+ xu1870@i '1)))) xu187b@ls/false) (let ((xu187f@t xu1879@t)) (let ((xu1881@ls/false (xud90@syntax-dispatch xu187f@t '(_ . any)))) (if xu1881@ls/false (apply (lambda (xu1883@rest) (xu1873@f xu1883@rest (+ xu1870@i '1))) xu1881@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu187f@t))))))))))))) (xu179e@get-mutators (lambda (xu1843@foo xu1844@fields) (letrec* ((xu1848@gen-name (lambda (xu186b@x) (xue74@datum->syntax xu1843@foo (string->symbol (string-append (symbol->string (xue76@syntax->datum xu1843@foo)) '"-" (symbol->string (xue76@syntax->datum xu186b@x)) '"-set!")))))) (let xu184b@f ((xu1849@fields xu1844@fields)) (let ((xu184d@t xu1849@fields)) (let ((xu184f@ls/false (xud90@syntax-dispatch xu184d@t '()))) (if xu184f@ls/false (apply (lambda () '()) xu184f@ls/false) (let ((xu1851@t xu184d@t)) (let ((xu1853@ls/false (xud90@syntax-dispatch xu1851@t '((#(scheme-id mutable) any any any) . any)))) (if xu1853@ls/false (apply (lambda (xu1855@name xu1856@accessor xu1857@mutator xu1858@rest) (cons xu1857@mutator (xu184b@f xu1858@rest))) xu1853@ls/false) (let ((xu185d@t xu1851@t)) (let ((xu185f@ls/false (xud90@syntax-dispatch xu185d@t '((#(scheme-id mutable) any) . any)))) (if xu185f@ls/false (apply (lambda (xu1861@name xu1862@rest) (cons (xu1848@gen-name xu1861@name) (xu184b@f xu1862@rest))) xu185f@ls/false) (let ((xu1865@t xu185d@t)) (let ((xu1867@ls/false (xud90@syntax-dispatch xu1865@t '(_ . any)))) (if xu1867@ls/false (apply (lambda (xu1869@rest) (xu184b@f xu1869@rest)) xu1867@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1865@t))))))))))))))))) (xu17a0@get-accessors (lambda (xu17ff@foo xu1800@fields) (letrec* ((xu1804@gen-name (lambda (xu1841@x) (xue74@datum->syntax xu17ff@foo (string->symbol (string-append (symbol->string (xue76@syntax->datum xu17ff@foo)) '"-" (symbol->string (xue76@syntax->datum xu1841@x)))))))) (map (lambda (xu1805@field) (let ((xu1807@t xu1805@field)) (let ((xu1809@ls/false (xud90@syntax-dispatch xu1807@t '(#(scheme-id mutable) any any any)))) (if (and xu1809@ls/false (apply (lambda (xu180b@name xu180c@accessor xu180d@mutator) (xub89@id? xu180c@accessor)) xu1809@ls/false)) (apply (lambda (xu1811@name xu1812@accessor xu1813@mutator) xu1812@accessor) xu1809@ls/false) (let ((xu1817@t xu1807@t)) (let ((xu1819@ls/false (xud90@syntax-dispatch xu1817@t '(#(scheme-id immutable) any any)))) (if (and xu1819@ls/false (apply (lambda (xu181b@name xu181c@accessor) (xub89@id? xu181c@accessor)) xu1819@ls/false)) (apply (lambda (xu181f@name xu1820@accessor) xu1820@accessor) xu1819@ls/false) (let ((xu1823@t xu1817@t)) (let ((xu1825@ls/false (xud90@syntax-dispatch xu1823@t '(#(scheme-id mutable) any)))) (if (and xu1825@ls/false (apply (lambda (xu1827@name) (xub89@id? xu1827@name)) xu1825@ls/false)) (apply (lambda (xu1829@name) (xu1804@gen-name xu1829@name)) xu1825@ls/false) (let ((xu182b@t xu1823@t)) (let ((xu182d@ls/false (xud90@syntax-dispatch xu182b@t '(#(scheme-id immutable) any)))) (if (and xu182d@ls/false (apply (lambda (xu182f@name) (xub89@id? xu182f@name)) xu182d@ls/false)) (apply (lambda (xu1831@name) (xu1804@gen-name xu1831@name)) xu182d@ls/false) (let ((xu1833@t xu182b@t)) (let ((xu1835@ls/false (xud90@syntax-dispatch xu1833@t 'any))) (if (and xu1835@ls/false (apply (lambda (xu1837@name) (xub89@id? xu1837@name)) xu1835@ls/false)) (apply (lambda (xu1839@name) (xu1804@gen-name xu1839@name)) xu1835@ls/false) (let ((xu183b@t xu1833@t)) (let ((xu183d@ls/false (xud90@syntax-dispatch xu183b@t 'any))) (if xu183d@ls/false (apply (lambda (xu183f@others) (xue70@syntax-violation '#f '"invalid field spec" xu1805@field)) xu183d@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu183b@t)))))))))))))))))))) xu1800@fields)))) (xu17a2@enumerate (lambda (xu17f7@ls) (let xu17fd@f ((xu17f9@ls xu17f7@ls) (xu17fa@i '0)) (if (null? xu17f9@ls) '() (cons xu17fa@i (xu17fd@f (cdr xu17f9@ls) (+ xu17fa@i '1))))))) (xu17a4@do-define-record (lambda (xu17cf@namespec xu17d0@clause*) (let ((xu17d3@foo (xu1788@get-record-name xu17cf@namespec))) (let ((xu17d5@foo-rtd (gensym))) (let ((xu17d7@foo-rcd (gensym))) (let ((xu17d9@protocol (gensym))) (let ((xu17db@make-foo (xu178a@get-record-constructor-name xu17cf@namespec))) (let ((xu17dd@fields (xu179a@get-fields xu17d0@clause*))) (let ((xu17df@idx* (xu17a2@enumerate xu17dd@fields))) (let ((xu17e1@foo-x* (xu17a0@get-accessors xu17d3@foo xu17dd@fields))) (let ((xu17e3@set-foo-x!* (xu179e@get-mutators xu17d3@foo xu17dd@fields))) (let ((xu17e5@set-foo-idx* (xu179c@get-mutator-indices xu17dd@fields))) (let ((xu17e7@foo? (xu178c@get-record-predicate-name xu17cf@namespec))) (let ((xu17e9@foo-rtd-code (xu1790@foo-rtd-code xu17d3@foo xu17d0@clause* (xu1792@parent-rtd-code xu17d0@clause*)))) (let ((xu17eb@foo-rcd-code (xu1796@foo-rcd-code xu17d0@clause* xu17d5@foo-rtd xu17d9@protocol (xu1794@parent-rcd-code xu17d0@clause*)))) (let ((xu17ed@protocol-code (xu1798@get-protocol-code xu17d0@clause*))) (xud46@bless (cons 'begin (cons (list 'define xu17d5@foo-rtd xu17e9@foo-rtd-code) (cons (list 'define xu17d9@protocol xu17ed@protocol-code) (cons (list 'define xu17d7@foo-rcd xu17eb@foo-rcd-code) (cons (list 'define-syntax xu17d3@foo (list 'list ''$rtd (list 'syntax xu17d5@foo-rtd) (list 'syntax xu17d7@foo-rcd))) (cons (list 'define xu17e7@foo? (list 'record-predicate xu17d5@foo-rtd)) (cons (list 'define xu17db@make-foo (list 'record-constructor xu17d7@foo-rcd)) (append (map (lambda (xu17ef@foo-x xu17f0@idx) (list 'define xu17ef@foo-x (list 'record-accessor xu17d5@foo-rtd xu17f0@idx))) xu17e1@foo-x* xu17df@idx*) (map (lambda (xu17f3@set-foo-x! xu17f4@idx) (list 'define xu17f3@set-foo-x! (list 'record-mutator xu17d5@foo-rtd xu17f4@idx))) xu17e3@set-foo-x!* xu17e5@set-foo-idx*)))))))))))))))))))))))))) (xu17a6@verify-clauses (lambda (xu17af@x xu17b0@cls*) (letrec* ((xu17b4@valid-kwds (map xud46@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (xu17b6@free-id-member? (lambda (xu17cb@x xu17cc@ls) (and (pair? xu17cc@ls) (or (xub8f@free-id=? xu17cb@x (car xu17cc@ls)) (xu17b6@free-id-member? xu17cb@x (cdr xu17cc@ls))))))) (let xu17bb@f ((xu17b7@cls* xu17b0@cls*) (xu17b8@seen* '())) (if (not (null? xu17b7@cls*)) (let ((xu17bd@t (car xu17b7@cls*))) (let ((xu17bf@ls/false (xud90@syntax-dispatch xu17bd@t '(any . any)))) (if xu17bf@ls/false (apply (lambda (xu17c1@kwd xu17c2@rest) (if (or (not (xub89@id? xu17c1@kwd)) (not (xu17b6@free-id-member? xu17c1@kwd xu17b4@valid-kwds))) (xue70@syntax-violation '#f '"not a valid define-record-type keyword" xu17c1@kwd) (if (xub95@bound-id-member? xu17c1@kwd xu17b8@seen*) (xue70@syntax-violation '#f '"duplicate use of keyword " xu17af@x xu17c1@kwd) (xu17bb@f (cdr xu17b7@cls*) (cons xu17c1@kwd xu17b8@seen*))))) xu17bf@ls/false) (let ((xu17c5@t xu17bd@t)) (let ((xu17c7@ls/false (xud90@syntax-dispatch xu17c5@t 'any))) (if xu17c7@ls/false (apply (lambda (xu17c9@cls) (xue70@syntax-violation '#f '"malformed define-record-type clause" xu17c9@cls)) xu17c7@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu17c5@t))))))) (void))))))) (let ((xu17a7@t xu1783@x)) (let ((xu17a9@ls/false (xud90@syntax-dispatch xu17a7@t '(_ any . each-any)))) (if xu17a9@ls/false (apply (lambda (xu17ab@namespec xu17ac@clause*) (begin (xu17a6@verify-clauses xu1783@x xu17ac@clause*) (xu17a4@do-define-record xu17ab@namespec xu17ac@clause*))) xu17a9@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu17a7@t))))))) (set! xu2896@xud84@define-record-type-macro xud84@define-record-type-macro) (set! xud86@define-condition-type-macro (lambda (xu197f@x) (letrec* ((xu1982@mkname (lambda (xu19af@name xu19b0@suffix) (xue74@datum->syntax xu19af@name (string->symbol (string-append (symbol->string (xue76@syntax->datum xu19af@name)) xu19b0@suffix)))))) (let ((xu1983@t xu197f@x)) (let ((xu1985@ls/false (xud90@syntax-dispatch xu1983@t '(any any any any any . #(each (any any)))))) (if (and xu1985@ls/false (apply (lambda (xu1987@ctxt xu1988@name xu1989@super xu198a@constructor xu198b@predicate xu198c@field* xu198d@accessor*) (and (xub89@id? xu1988@name) (xub89@id? xu1989@super) (xub89@id? xu198a@constructor) (xub89@id? xu198b@predicate) (for-all xub89@id? xu198c@field*) (for-all xub89@id? xu198d@accessor*))) xu1985@ls/false)) (apply (lambda (xu1995@ctxt xu1996@name xu1997@super xu1998@constructor xu1999@predicate xu199a@field* xu199b@accessor*) (let ((xu19a3@aux-accessor* (map (lambda (xu19a5@x) (gensym)) xu199b@accessor*))) (xud46@bless (cons 'begin (cons (cons 'define-record-type (cons (list xu1996@name xu1998@constructor (gensym)) (cons (list 'parent xu1997@super) (cons (cons 'fields (map (lambda (xu19a7@field xu19a8@aux) (list 'immutable xu19a7@field xu19a8@aux)) xu199a@field* xu19a3@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define xu1999@predicate (list 'condition-predicate (list 'record-type-descriptor xu1996@name))) (map (lambda (xu19ab@accessor xu19ac@aux) (list 'define xu19ab@accessor (list 'condition-accessor (list 'record-type-descriptor xu1996@name) xu19ac@aux))) xu199b@accessor* xu19a3@aux-accessor*))))))) xu1985@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1983@t))))))) (set! xu2897@xud86@define-condition-type-macro xud86@define-condition-type-macro) (set! xud88@incorrect-usage-macro (lambda (xu19b3@e) (xue70@syntax-violation '#f '"incorrect usage of auxiliary keyword" xu19b3@e))) (set! xu2898@xud88@incorrect-usage-macro xud88@incorrect-usage-macro) (set! xud8a@parameterize-macro (lambda (xu19b5@e) (let ((xu19b7@t xu19b5@e)) (let ((xu19b9@ls/false (xud90@syntax-dispatch xu19b7@t '(_ () any . each-any)))) (if xu19b9@ls/false (apply (lambda (xu19bb@b xu19bc@b*) (xud46@bless (cons 'let (cons '() (cons xu19bb@b xu19bc@b*))))) xu19b9@ls/false) (let ((xu19bf@t xu19b7@t)) (let ((xu19c1@ls/false (xud90@syntax-dispatch xu19bf@t '(_ #(each (any any)) any . each-any)))) (if xu19c1@ls/false (apply (lambda (xu19c3@olhs* xu19c4@orhs* xu19c5@b xu19c6@b*) (let ((xu19cb@lhs* (xue5e@generate-temporaries xu19c3@olhs*)) (xu19cc@rhs* (xue5e@generate-temporaries xu19c4@orhs*))) (xud46@bless (cons (list 'lambda (append xu19cb@lhs* xu19cc@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (xu19cf@lhs xu19d0@rhs) (list 'let (list (list 't (list xu19cf@lhs))) (list xu19cf@lhs xu19d0@rhs) (cons 'set! (cons xu19d0@rhs '(t))))) xu19cb@lhs* xu19cc@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons xu19c5@b xu19c6@b*))) '(swap)))))) (append xu19c3@olhs* xu19c4@orhs*))))) xu19c1@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu19bf@t))))))))) (set! xu2899@xud8a@parameterize-macro xud8a@parameterize-macro) (set! xud8c@foreign-call-transformer (lambda (xu19d3@e xu19d4@r xu19d5@mr) (let ((xu19d9@t xu19d3@e)) (let ((xu19db@ls/false (xud90@syntax-dispatch xu19d9@t '(_ any . each-any)))) (if xu19db@ls/false (apply (lambda (xu19dd@name xu19de@arg*) (cons 'foreign-call (cons (xudb2@chi-expr xu19dd@name xu19d4@r xu19d5@mr) (xudae@chi-expr* xu19de@arg* xu19d4@r xu19d5@mr)))) xu19db@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu19d9@t)))))) (set! xu289a@xud8c@foreign-call-transformer xud8c@foreign-call-transformer) (set! xud8e@convert-pattern (lambda (xu19e1@pattern xu19e2@keys) (letrec* ((xu19e6@cvt* (lambda (xu1a85@p* xu1a86@n xu1a87@ids) (if (null? xu1a85@p*) (values '() xu1a87@ids) (call-with-values (lambda () (xu19e6@cvt* (cdr xu1a85@p*) xu1a86@n xu1a87@ids)) (lambda (xu1a8f@xu1a8c xu1a90@xu1a8e) (let ((xu1a93@ids xu1a90@xu1a8e) (xu1a94@y xu1a8f@xu1a8c)) (call-with-values (lambda () (xu19e8@cvt (car xu1a85@p*) xu1a86@n xu1a93@ids)) (lambda (xu1a9b@xu1a98 xu1a9c@xu1a9a) (let ((xu1a9f@ids xu1a9c@xu1a9a) (xu1aa0@x xu1a9b@xu1a98)) (values (cons xu1aa0@x xu1a94@y) xu1a9f@ids)))))))))) (xu19e8@cvt (lambda (xu19e9@p xu19ea@n xu19eb@ids) (let ((xu19ef@t xu19e9@p)) (let ((xu19f1@ls/false (xud90@syntax-dispatch xu19ef@t 'any))) (if (and xu19f1@ls/false (apply (lambda (xu19f3@id) (xub89@id? xu19f3@id)) xu19f1@ls/false)) (apply (lambda (xu19f5@id) (if (xub95@bound-id-member? xu19e9@p xu19e2@keys) (values (vector 'free-id xu19e9@p) xu19eb@ids) (if (xub8f@free-id=? xu19e9@p (xud18@scheme-stx '_)) (values '_ xu19eb@ids) (values 'any (cons (cons xu19e9@p xu19ea@n) xu19eb@ids))))) xu19f1@ls/false) (let ((xu19f7@t xu19ef@t)) (let ((xu19f9@ls/false (xud90@syntax-dispatch xu19f7@t '(any any)))) (if (and xu19f9@ls/false (apply (lambda (xu19fb@p xu19fc@dots) (xud92@ellipsis? xu19fc@dots)) xu19f9@ls/false)) (apply (lambda (xu19ff@p xu1a00@dots) (call-with-values (lambda () (xu19e8@cvt xu19ff@p (+ xu19ea@n '1) xu19eb@ids)) (lambda (xu1a07@xu1a04 xu1a08@xu1a06) (let ((xu1a0b@ids xu1a08@xu1a06) (xu1a0c@p xu1a07@xu1a04)) (values (if (eq? xu1a0c@p 'any) 'each-any (vector 'each xu1a0c@p)) xu1a0b@ids))))) xu19f9@ls/false) (let ((xu1a0f@t xu19f7@t)) (let ((xu1a11@ls/false (xud90@syntax-dispatch xu1a0f@t '(any any . #(each+ any () any))))) (if (and xu1a11@ls/false (apply (lambda (xu1a13@x xu1a14@dots xu1a15@ys xu1a16@z) (xud92@ellipsis? xu1a14@dots)) xu1a11@ls/false)) (apply (lambda (xu1a1b@x xu1a1c@dots xu1a1d@ys xu1a1e@z) (call-with-values (lambda () (xu19e8@cvt xu1a1e@z xu19ea@n xu19eb@ids)) (lambda (xu1a27@xu1a24 xu1a28@xu1a26) (let ((xu1a2b@ids xu1a28@xu1a26) (xu1a2c@z xu1a27@xu1a24)) (call-with-values (lambda () (xu19e6@cvt* xu1a1d@ys xu19ea@n xu1a2b@ids)) (lambda (xu1a33@xu1a30 xu1a34@xu1a32) (let ((xu1a37@ids xu1a34@xu1a32) (xu1a38@ys xu1a33@xu1a30)) (call-with-values (lambda () (xu19e8@cvt xu1a1b@x (+ xu19ea@n '1) xu1a37@ids)) (lambda (xu1a3f@xu1a3c xu1a40@xu1a3e) (let ((xu1a43@ids xu1a40@xu1a3e) (xu1a44@x xu1a3f@xu1a3c)) (values (vector 'each+ xu1a44@x (reverse xu1a38@ys) xu1a2c@z) xu1a43@ids))))))))))) xu1a11@ls/false) (let ((xu1a47@t xu1a0f@t)) (let ((xu1a49@ls/false (xud90@syntax-dispatch xu1a47@t '(any . any)))) (if xu1a49@ls/false (apply (lambda (xu1a4b@x xu1a4c@y) (call-with-values (lambda () (xu19e8@cvt xu1a4c@y xu19ea@n xu19eb@ids)) (lambda (xu1a53@xu1a50 xu1a54@xu1a52) (let ((xu1a57@ids xu1a54@xu1a52) (xu1a58@y xu1a53@xu1a50)) (call-with-values (lambda () (xu19e8@cvt xu1a4b@x xu19ea@n xu1a57@ids)) (lambda (xu1a5f@xu1a5c xu1a60@xu1a5e) (let ((xu1a63@ids xu1a60@xu1a5e) (xu1a64@x xu1a5f@xu1a5c)) (values (cons xu1a64@x xu1a58@y) xu1a63@ids)))))))) xu1a49@ls/false) (let ((xu1a67@t xu1a47@t)) (let ((xu1a69@ls/false (xud90@syntax-dispatch xu1a67@t '()))) (if xu1a69@ls/false (apply (lambda () (values '() xu19eb@ids)) xu1a69@ls/false) (let ((xu1a6b@t xu1a67@t)) (let ((xu1a6d@ls/false (xud90@syntax-dispatch xu1a6b@t '#(vector each-any)))) (if (and xu1a6d@ls/false (apply (lambda (xu1a6f@p) (not (xub55@stx? xu1a6f@p))) xu1a6d@ls/false)) (apply (lambda (xu1a71@p) (call-with-values (lambda () (xu19e8@cvt xu1a71@p xu19ea@n xu19eb@ids)) (lambda (xu1a77@xu1a74 xu1a78@xu1a76) (let ((xu1a7b@ids xu1a78@xu1a76) (xu1a7c@p xu1a77@xu1a74)) (values (vector 'vector xu1a7c@p) xu1a7b@ids))))) xu1a6d@ls/false) (let ((xu1a7f@t xu1a6b@t)) (let ((xu1a81@ls/false (xud90@syntax-dispatch xu1a7f@t 'any))) (if xu1a81@ls/false (apply (lambda (xu1a83@datum) (values (vector 'atom (xub9d@stx->datum xu1a83@datum)) xu19eb@ids)) xu1a81@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1a7f@t))))))))))))))))))))))))) (xu19e8@cvt xu19e1@pattern '0 '())))) (set! xu289b@xud8e@convert-pattern xud8e@convert-pattern) (set! xud90@syntax-dispatch (letrec* ((xu1aa4@stx^ (lambda (xu1b7f@e xu1b80@m* xu1b81@s* xu1b82@ae*) (if (and (null? xu1b80@m*) (null? xu1b81@s*) (null? xu1b82@ae*)) xu1b7f@e (xub71@mkstx xu1b7f@e xu1b80@m* xu1b81@s* xu1b82@ae*)))) (xu1aa6@match-each (lambda (xu1b5f@e xu1b60@p xu1b61@m* xu1b62@s* xu1b63@ae*) (if (pair? xu1b5f@e) (let ((xu1b69@first (xu1ab2@match (car xu1b5f@e) xu1b60@p xu1b61@m* xu1b62@s* xu1b63@ae* '()))) (and xu1b69@first (let ((xu1b6b@rest (xu1aa6@match-each (cdr xu1b5f@e) xu1b60@p xu1b61@m* xu1b62@s* xu1b63@ae*))) (and xu1b6b@rest (cons xu1b69@first xu1b6b@rest))))) (if (null? xu1b5f@e) '() (if (xub55@stx? xu1b5f@e) (and (not (xub0f@top-marked? xu1b61@m*)) (call-with-values (lambda () (join-wraps xu1b61@m* xu1b62@s* xu1b63@ae* xu1b5f@e)) (lambda (xu1b73@xu1b6e xu1b74@xu1b70 xu1b75@xu1b72) (let ((xu1b79@ae* xu1b75@xu1b72) (xu1b7a@s* xu1b74@xu1b70) (xu1b7b@m* xu1b73@xu1b6e)) (xu1aa6@match-each (xub57@stx-expr xu1b5f@e) xu1b60@p xu1b7b@m* xu1b7a@s* xu1b79@ae*))))) (if (xu6cd@xu59f@annotation? xu1b5f@e) (xu1aa6@match-each (xu6cf@xu5a3@annotation-expression xu1b5f@e) xu1b60@p xu1b61@m* xu1b62@s* xu1b63@ae*) '#f)))))) (xu1aa8@match-each+ (lambda (xu1b1f@e xu1b20@x-pat xu1b21@y-pat xu1b22@z-pat xu1b23@m* xu1b24@s* xu1b25@ae* xu1b26@r) (let xu1b37@f ((xu1b2f@e xu1b1f@e) (xu1b30@m* xu1b23@m*) (xu1b31@s* xu1b24@s*) (xu1b32@ae* xu1b25@ae*)) (if (pair? xu1b2f@e) (call-with-values (lambda () (xu1b37@f (cdr xu1b2f@e) xu1b30@m* xu1b31@s* xu1b32@ae*)) (lambda (xu1b3f@xu1b3a xu1b40@xu1b3c xu1b41@xu1b3e) (let ((xu1b45@r xu1b41@xu1b3e) (xu1b46@y-pat xu1b40@xu1b3c) (xu1b47@xr* xu1b3f@xu1b3a)) (if xu1b45@r (if (null? xu1b46@y-pat) (let ((xu1b4b@xr (xu1ab2@match (car xu1b2f@e) xu1b20@x-pat xu1b30@m* xu1b31@s* xu1b32@ae* '()))) (if xu1b4b@xr (values (cons xu1b4b@xr xu1b47@xr*) xu1b46@y-pat xu1b45@r) (values '#f '#f '#f))) (values '() (cdr xu1b46@y-pat) (xu1ab2@match (car xu1b2f@e) (car xu1b46@y-pat) xu1b30@m* xu1b31@s* xu1b32@ae* xu1b45@r))) (values '#f '#f '#f))))) (if (xub55@stx? xu1b2f@e) (if (xub0f@top-marked? xu1b30@m*) (values '() xu1b21@y-pat (xu1ab2@match xu1b2f@e xu1b22@z-pat xu1b30@m* xu1b31@s* xu1b32@ae* xu1b26@r)) (call-with-values (lambda () (join-wraps xu1b30@m* xu1b31@s* xu1b32@ae* xu1b2f@e)) (lambda (xu1b53@xu1b4e xu1b54@xu1b50 xu1b55@xu1b52) (let ((xu1b59@ae* xu1b55@xu1b52) (xu1b5a@s* xu1b54@xu1b50) (xu1b5b@m* xu1b53@xu1b4e)) (xu1b37@f (xub57@stx-expr xu1b2f@e) xu1b5b@m* xu1b5a@s* xu1b59@ae*))))) (if (xu6cd@xu59f@annotation? xu1b2f@e) (xu1b37@f (xu6cf@xu5a3@annotation-expression xu1b2f@e) xu1b30@m* xu1b31@s* xu1b32@ae*) (values '() xu1b21@y-pat (xu1ab2@match xu1b2f@e xu1b22@z-pat xu1b30@m* xu1b31@s* xu1b32@ae* xu1b26@r)))))))) (xu1aaa@match-each-any (lambda (xu1b03@e xu1b04@m* xu1b05@s* xu1b06@ae*) (if (pair? xu1b03@e) (let ((xu1b0b@l (xu1aaa@match-each-any (cdr xu1b03@e) xu1b04@m* xu1b05@s* xu1b06@ae*))) (and xu1b0b@l (cons (xu1aa4@stx^ (car xu1b03@e) xu1b04@m* xu1b05@s* xu1b06@ae*) xu1b0b@l))) (if (null? xu1b03@e) '() (if (xub55@stx? xu1b03@e) (and (not (xub0f@top-marked? xu1b04@m*)) (call-with-values (lambda () (join-wraps xu1b04@m* xu1b05@s* xu1b06@ae* xu1b03@e)) (lambda (xu1b13@xu1b0e xu1b14@xu1b10 xu1b15@xu1b12) (let ((xu1b19@ae* xu1b15@xu1b12) (xu1b1a@s* xu1b14@xu1b10) (xu1b1b@m* xu1b13@xu1b0e)) (xu1aaa@match-each-any (xub57@stx-expr xu1b03@e) xu1b1b@m* xu1b1a@s* xu1b19@ae*))))) (if (xu6cd@xu59f@annotation? xu1b03@e) (xu1aaa@match-each-any (xu6cf@xu5a3@annotation-expression xu1b03@e) xu1b04@m* xu1b05@s* xu1b06@ae*) '#f)))))) (xu1aac@match-empty (lambda (xu1afd@p xu1afe@r) (if (null? xu1afd@p) xu1afe@r (if (eq? xu1afd@p '_) xu1afe@r (if (eq? xu1afd@p 'any) (cons '() xu1afe@r) (if (pair? xu1afd@p) (xu1aac@match-empty (car xu1afd@p) (xu1aac@match-empty (cdr xu1afd@p) xu1afe@r)) (if (eq? xu1afd@p 'each-any) (cons '() xu1afe@r) (let ((xu1b01@t (vector-ref xu1afd@p '0))) (if (memv xu1b01@t '(each)) (xu1aac@match-empty (vector-ref xu1afd@p '1) xu1afe@r) (if (memv xu1b01@t '(each+)) (xu1aac@match-empty (vector-ref xu1afd@p '1) (xu1aac@match-empty (reverse (vector-ref xu1afd@p '2)) (xu1aac@match-empty (vector-ref xu1afd@p '3) xu1afe@r))) (if (memv xu1b01@t '(free-id atom)) xu1afe@r (if (memv xu1b01@t '(scheme-id atom)) xu1afe@r (if (memv xu1b01@t '(vector)) (xu1aac@match-empty (vector-ref xu1afd@p '1) xu1afe@r) (assertion-violation 'syntax-dispatch '"invalid pattern" xu1afd@p)))))))))))))) (xu1aae@combine (lambda (xu1af9@r* xu1afa@r) (if (null? (car xu1af9@r*)) xu1afa@r (cons (map car xu1af9@r*) (xu1aae@combine (map cdr xu1af9@r*) xu1afa@r))))) (xu1ab0@match* (lambda (xu1ad5@e xu1ad6@p xu1ad7@m* xu1ad8@s* xu1ad9@ae* xu1ada@r) (if (null? xu1ad6@p) (and (null? xu1ad5@e) xu1ada@r) (if (pair? xu1ad6@p) (and (pair? xu1ad5@e) (xu1ab2@match (car xu1ad5@e) (car xu1ad6@p) xu1ad7@m* xu1ad8@s* xu1ad9@ae* (xu1ab2@match (cdr xu1ad5@e) (cdr xu1ad6@p) xu1ad7@m* xu1ad8@s* xu1ad9@ae* xu1ada@r))) (if (eq? xu1ad6@p 'each-any) (let ((xu1ae1@l (xu1aaa@match-each-any xu1ad5@e xu1ad7@m* xu1ad8@s* xu1ad9@ae*))) (and xu1ae1@l (cons xu1ae1@l xu1ada@r))) (let ((xu1ae3@t (vector-ref xu1ad6@p '0))) (if (memv xu1ae3@t '(each)) (if (null? xu1ad5@e) (xu1aac@match-empty (vector-ref xu1ad6@p '1) xu1ada@r) (let ((xu1ae5@r* (xu1aa6@match-each xu1ad5@e (vector-ref xu1ad6@p '1) xu1ad7@m* xu1ad8@s* xu1ad9@ae*))) (and xu1ae5@r* (xu1aae@combine xu1ae5@r* xu1ada@r)))) (if (memv xu1ae3@t '(free-id)) (and (symbol? xu1ad5@e) (xub0f@top-marked? xu1ad7@m*) (xub8f@free-id=? (xu1aa4@stx^ xu1ad5@e xu1ad7@m* xu1ad8@s* xu1ad9@ae*) (vector-ref xu1ad6@p '1)) xu1ada@r) (if (memv xu1ae3@t '(scheme-id)) (and (symbol? xu1ad5@e) (xub0f@top-marked? xu1ad7@m*) (xub8f@free-id=? (xu1aa4@stx^ xu1ad5@e xu1ad7@m* xu1ad8@s* xu1ad9@ae*) (xud18@scheme-stx (vector-ref xu1ad6@p '1))) xu1ada@r) (if (memv xu1ae3@t '(each+)) (call-with-values (lambda () (xu1aa8@match-each+ xu1ad5@e (vector-ref xu1ad6@p '1) (vector-ref xu1ad6@p '2) (vector-ref xu1ad6@p '3) xu1ad7@m* xu1ad8@s* xu1ad9@ae* xu1ada@r)) (lambda (xu1aed@xu1ae8 xu1aee@xu1aea xu1aef@xu1aec) (let ((xu1af3@r xu1aef@xu1aec) (xu1af4@y-pat xu1aee@xu1aea) (xu1af5@xr* xu1aed@xu1ae8)) (and xu1af3@r (null? xu1af4@y-pat) (if (null? xu1af5@xr*) (xu1aac@match-empty (vector-ref xu1ad6@p '1) xu1af3@r) (xu1aae@combine xu1af5@xr* xu1af3@r)))))) (if (memv xu1ae3@t '(atom)) (and (fast-equal? (vector-ref xu1ad6@p '1) (xub9b@strip xu1ad5@e xu1ad7@m*)) xu1ada@r) (if (memv xu1ae3@t '(vector)) (and (vector? xu1ad5@e) (xu1ab2@match (vector->list xu1ad5@e) (vector-ref xu1ad6@p '1) xu1ad7@m* xu1ad8@s* xu1ad9@ae* xu1ada@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" xu1ad6@p))))))))))))) (xu1ab2@match (lambda (xu1ab7@e xu1ab8@p xu1ab9@m* xu1aba@s* xu1abb@ae* xu1abc@r) (if (not xu1abc@r) '#f (if (eq? xu1ab8@p '_) xu1abc@r (if (eq? xu1ab8@p 'any) (cons (xu1aa4@stx^ xu1ab7@e xu1ab9@m* xu1aba@s* xu1abb@ae*) xu1abc@r) (if (xub55@stx? xu1ab7@e) (and (not (xub0f@top-marked? xu1ab9@m*)) (call-with-values (lambda () (join-wraps xu1ab9@m* xu1aba@s* xu1abb@ae* xu1ab7@e)) (lambda (xu1ac9@xu1ac4 xu1aca@xu1ac6 xu1acb@xu1ac8) (let ((xu1acf@ae* xu1acb@xu1ac8) (xu1ad0@s* xu1aca@xu1ac6) (xu1ad1@m* xu1ac9@xu1ac4)) (xu1ab2@match (xub57@stx-expr xu1ab7@e) xu1ab8@p xu1ad1@m* xu1ad0@s* xu1acf@ae* xu1abc@r))))) (if (xu6cd@xu59f@annotation? xu1ab7@e) (xu1ab2@match (xu6cf@xu5a3@annotation-expression xu1ab7@e) xu1ab8@p xu1ab9@m* xu1aba@s* xu1abb@ae* xu1abc@r) (xu1ab0@match* xu1ab7@e xu1ab8@p xu1ab9@m* xu1aba@s* xu1abb@ae* xu1abc@r))))))))) (lambda (xu1ab3@e xu1ab4@p) (xu1ab2@match xu1ab3@e xu1ab4@p '() '() '() '())))) (set! xu289c@xud90@syntax-dispatch xud90@syntax-dispatch) (set! xud92@ellipsis? (lambda (xu1b87@x) (and (xub89@id? xu1b87@x) (xub8f@free-id=? xu1b87@x (xud18@scheme-stx '...))))) (set! xu289d@xud92@ellipsis? xud92@ellipsis?) (set! xud94@underscore? (lambda (xu1b89@x) (and (xub89@id? xu1b89@x) (xub8f@free-id=? xu1b89@x (xud18@scheme-stx '_))))) (set! xu289e@xud94@underscore? xud94@underscore?) (set! xud96@verify-literals (lambda (xu1b8b@lits xu1b8c@expr) (for-each (lambda (xu1b8f@x) (if (or (not (xub89@id? xu1b8f@x)) (xud92@ellipsis? xu1b8f@x) (xud94@underscore? xu1b8f@x)) (xue70@syntax-violation '#f '"invalid literal" xu1b8c@expr xu1b8f@x) (void))) xu1b8b@lits))) (set! xu289f@xud96@verify-literals xud96@verify-literals) (set! xud98@syntax-case-transformer (letrec* ((xu1b92@build-dispatch-call (lambda (xu1c03@pvars xu1c04@expr xu1c05@y xu1c06@r xu1c07@mr) (let ((xu1c0d@ids (map car xu1c03@pvars)) (xu1c0e@levels (map cdr xu1c03@pvars))) (let ((xu1c11@labels (map xub15@gen-label xu1c0d@ids)) (xu1c12@new-vars (map xub11@gen-lexical xu1c0d@ids))) (let ((xu1c15@body (xudb2@chi-expr (xub73@add-subst (xub49@make-full-rib xu1c0d@ids xu1c11@labels) xu1c04@expr) (append (map (lambda (xu1c17@label xu1c18@var xu1c19@level) (cons xu1c17@label (xuba3@make-binding 'syntax (cons xu1c18@var xu1c19@level)))) xu1c11@labels xu1c12@new-vars (map cdr xu1c03@pvars)) xu1c06@r) xu1c07@mr))) (list '(primitive apply) (xuaec@xua1e@build-lambda '#f xu1c12@new-vars xu1c15@body) xu1c05@y)))))) (xu1b94@invalid-ids-error (lambda (xu1bf7@id* xu1bf8@e xu1bf9@class) (let xu1c01@find ((xu1bfd@id* xu1bf7@id*) (xu1bfe@ok* '())) (if (null? xu1bfd@id*) (xue70@syntax-violation '#f '"invalid syntax" xu1bf8@e) (if (xub89@id? (car xu1bfd@id*)) (if (xub95@bound-id-member? (car xu1bfd@id*) xu1bfe@ok*) (xue6c@syntax-error (car xu1bfd@id*) '"duplicate " xu1bf9@class) (xu1c01@find (cdr xu1bfd@id*) (cons (car xu1bfd@id*) xu1bfe@ok*))) (xue6c@syntax-error (car xu1bfd@id*) '"invalid " xu1bf9@class)))))) (xu1b96@gen-clause (lambda (xu1bcf@x xu1bd0@keys xu1bd1@clauses xu1bd2@r xu1bd3@mr xu1bd4@pat xu1bd5@fender xu1bd6@expr) (call-with-values (lambda () (xud8e@convert-pattern xu1bd4@pat xu1bd0@keys)) (lambda (xu1be3@xu1be0 xu1be4@xu1be2) (let ((xu1be7@pvars xu1be4@xu1be2) (xu1be8@p xu1be3@xu1be0)) (if (not (xub93@distinct-bound-ids? (map car xu1be7@pvars))) (xu1b94@invalid-ids-error (map car xu1be7@pvars) xu1bd4@pat '"pattern variable") (if (not (for-all (lambda (xu1beb@x) (not (xud92@ellipsis? (car xu1beb@x)))) xu1be7@pvars)) (xue70@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" xu1bd4@pat) (let ((xu1bed@y (xub11@gen-lexical 'tmp))) (let ((xu1bef@test (if (eq? xu1bd5@fender '#t) xu1bed@y (let ((xu1bf1@call (xu1b92@build-dispatch-call xu1be7@pvars xu1bd5@fender xu1bed@y xu1bd2@r xu1bd3@mr))) (list 'if xu1bed@y xu1bf1@call (list 'quote '#f)))))) (let ((xu1bf3@conseq (xu1b92@build-dispatch-call xu1be7@pvars xu1bd6@expr xu1bed@y xu1bd2@r xu1bd3@mr))) (let ((xu1bf5@altern (xu1b98@gen-syntax-case xu1bcf@x xu1bd0@keys xu1bd1@clauses xu1bd2@r xu1bd3@mr))) (list (xuaec@xua1e@build-lambda '#f (list xu1bed@y) (list 'if xu1bef@test xu1bf3@conseq xu1bf5@altern)) (list '(primitive syntax-dispatch) xu1bcf@x (list 'quote xu1be8@p)))))))))))))) (xu1b98@gen-syntax-case (lambda (xu1bad@x xu1bae@keys xu1baf@clauses xu1bb0@r xu1bb1@mr) (if (null? xu1baf@clauses) (list '(primitive syntax-error) xu1bad@x) (let ((xu1bb7@t (car xu1baf@clauses))) (let ((xu1bb9@ls/false (xud90@syntax-dispatch xu1bb7@t '(any any)))) (if xu1bb9@ls/false (apply (lambda (xu1bbb@pat xu1bbc@expr) (if (and (xub89@id? xu1bbb@pat) (not (xub95@bound-id-member? xu1bbb@pat xu1bae@keys)) (not (xud92@ellipsis? xu1bbb@pat))) (if (xub8f@free-id=? xu1bbb@pat (xud18@scheme-stx '_)) (xudb2@chi-expr xu1bbc@expr xu1bb0@r xu1bb1@mr) (let ((xu1bbf@lab (xub15@gen-label xu1bbb@pat)) (xu1bc0@lex (xub11@gen-lexical xu1bbb@pat))) (let ((xu1bc3@body (xudb2@chi-expr (xub73@add-subst (xub49@make-full-rib (list xu1bbb@pat) (list xu1bbf@lab)) xu1bbc@expr) (cons (cons xu1bbf@lab (xuba3@make-binding 'syntax (cons xu1bc0@lex '0))) xu1bb0@r) xu1bb1@mr))) (list (xuaec@xua1e@build-lambda '#f (list xu1bc0@lex) xu1bc3@body) xu1bad@x)))) (xu1b96@gen-clause xu1bad@x xu1bae@keys (cdr xu1baf@clauses) xu1bb0@r xu1bb1@mr xu1bbb@pat '#t xu1bbc@expr))) xu1bb9@ls/false) (let ((xu1bc5@t xu1bb7@t)) (let ((xu1bc7@ls/false (xud90@syntax-dispatch xu1bc5@t '(any any any)))) (if xu1bc7@ls/false (apply (lambda (xu1bc9@pat xu1bca@fender xu1bcb@expr) (xu1b96@gen-clause xu1bad@x xu1bae@keys (cdr xu1baf@clauses) xu1bb0@r xu1bb1@mr xu1bc9@pat xu1bca@fender xu1bcb@expr)) xu1bc7@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1bc5@t))))))))))) (lambda (xu1b99@e xu1b9a@r xu1b9b@mr) (let ((xu1b9f@t xu1b99@e)) (let ((xu1ba1@ls/false (xud90@syntax-dispatch xu1b9f@t '(_ any each-any . each-any)))) (if xu1ba1@ls/false (apply (lambda (xu1ba3@expr xu1ba4@keys xu1ba5@clauses) (begin (xud96@verify-literals xu1ba4@keys xu1b99@e) (let ((xu1ba9@x (xub11@gen-lexical 'tmp))) (let ((xu1bab@body (xu1b98@gen-syntax-case xu1ba9@x xu1ba4@keys xu1ba5@clauses xu1b9a@r xu1b9b@mr))) (list (xuaec@xua1e@build-lambda '#f (list xu1ba9@x) xu1bab@body) (xudb2@chi-expr xu1ba3@expr xu1b9a@r xu1b9b@mr)))))) xu1ba1@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1b9f@t))))))) (set! xu28a0@xud98@syntax-case-transformer xud98@syntax-case-transformer) (set! xud9a@ellipsis-map (lambda (xu1c1d@proc xu1c1e@ls . xu1c21@ls*) (letrec* ((xu1c24@who '...)) (begin (if (not (list? xu1c1e@ls)) (assertion-violation xu1c24@who '"not a list" xu1c1e@ls) (void)) (if (not (null? xu1c21@ls*)) (let ((xu1c25@n (length xu1c1e@ls))) (for-each (lambda (xu1c27@x) (begin (if (not (list? xu1c27@x)) (assertion-violation xu1c24@who '"not a list" xu1c27@x) (void)) (if (not (= (length xu1c27@x) xu1c25@n)) (assertion-violation xu1c24@who '"length mismatch" xu1c1e@ls xu1c27@x) (void)))) xu1c21@ls*)) (void)) (apply map xu1c1d@proc xu1c1e@ls xu1c21@ls*))))) (set! xu28a1@xud9a@ellipsis-map xud9a@ellipsis-map) (set! xud9c@syntax-transformer (letrec* ((xu1c2a@gen-syntax (lambda (xu1ca1@src xu1ca2@e xu1ca3@r xu1ca4@maps xu1ca5@ellipsis? xu1ca6@vec?) (let ((xu1cad@t xu1ca2@e)) (let ((xu1caf@ls/false (xud90@syntax-dispatch xu1cad@t 'any))) (if (and xu1caf@ls/false (apply (lambda (xu1cb1@dots) (xu1ca5@ellipsis? xu1cb1@dots)) xu1caf@ls/false)) (apply (lambda (xu1cb3@dots) (xue70@syntax-violation '#f '"misplaced ellipsis in syntax form" xu1ca1@src)) xu1caf@ls/false) (let ((xu1cb5@t xu1cad@t)) (let ((xu1cb7@ls/false (xud90@syntax-dispatch xu1cb5@t 'any))) (if (and xu1cb7@ls/false (apply (lambda (xu1cb9@id) (xub89@id? xu1cb9@id)) xu1cb7@ls/false)) (apply (lambda (xu1cbb@id) (let ((xu1cbd@label (xub9f@id->label xu1ca2@e))) (let ((xu1cbf@b (xuba1@label->binding xu1cbd@label xu1ca3@r))) (if (eq? (xuba5@binding-type xu1cbf@b) 'syntax) (call-with-values (lambda () (let ((xu1cc5@var.lev (xuba7@binding-value xu1cbf@b))) (xu1c2c@gen-ref xu1ca1@src (car xu1cc5@var.lev) (cdr xu1cc5@var.lev) xu1ca4@maps))) (lambda (xu1cc7@xu1cc2 xu1cc8@xu1cc4) (let ((xu1ccb@maps xu1cc8@xu1cc4) (xu1ccc@var xu1cc7@xu1cc2)) (values (list 'ref xu1ccc@var) xu1ccb@maps)))) (values (list 'quote xu1ca2@e) xu1ca4@maps))))) xu1cb7@ls/false) (let ((xu1ccf@t xu1cb5@t)) (let ((xu1cd1@ls/false (xud90@syntax-dispatch xu1ccf@t '(any any)))) (if (and xu1cd1@ls/false (apply (lambda (xu1cd3@dots xu1cd4@e) (xu1ca5@ellipsis? xu1cd3@dots)) xu1cd1@ls/false)) (apply (lambda (xu1cd7@dots xu1cd8@e) (if xu1ca6@vec? (xue70@syntax-violation '#f '"misplaced ellipsis in syntax form" xu1ca1@src) (xu1c2a@gen-syntax xu1ca1@src xu1cd8@e xu1ca3@r xu1ca4@maps (lambda (xu1cdb@x) '#f) '#f))) xu1cd1@ls/false) (let ((xu1cdd@t xu1ccf@t)) (let ((xu1cdf@ls/false (xud90@syntax-dispatch xu1cdd@t '(any any . any)))) (if (and xu1cdf@ls/false (apply (lambda (xu1ce1@x xu1ce2@dots xu1ce3@y) (xu1ca5@ellipsis? xu1ce2@dots)) xu1cdf@ls/false)) (apply (lambda (xu1ce7@x xu1ce8@dots xu1ce9@y) (let xu1cff@f ((xu1ced@y xu1ce9@y) (xu1cee@k (lambda (xu1cf1@maps) (call-with-values (lambda () (xu1c2a@gen-syntax xu1ca1@src xu1ce7@x xu1ca3@r (cons '() xu1cf1@maps) xu1ca5@ellipsis? '#f)) (lambda (xu1cf7@xu1cf4 xu1cf8@xu1cf6) (let ((xu1cfb@maps xu1cf8@xu1cf6) (xu1cfc@x xu1cf7@xu1cf4)) (if (null? (car xu1cfb@maps)) (xue70@syntax-violation '#f '"extra ellipsis in syntax form" xu1ca1@src) (values (xu1c32@gen-map xu1cfc@x (car xu1cfb@maps)) (cdr xu1cfb@maps))))))))) (let ((xu1d01@t xu1ced@y)) (let ((xu1d03@ls/false (xud90@syntax-dispatch xu1d01@t '()))) (if xu1d03@ls/false (apply (lambda () (xu1cee@k xu1ca4@maps)) xu1d03@ls/false) (let ((xu1d05@t xu1d01@t)) (let ((xu1d07@ls/false (xud90@syntax-dispatch xu1d05@t '(any . any)))) (if (and xu1d07@ls/false (apply (lambda (xu1d09@dots xu1d0a@y) (xu1ca5@ellipsis? xu1d09@dots)) xu1d07@ls/false)) (apply (lambda (xu1d0d@dots xu1d0e@y) (xu1cff@f xu1d0e@y (lambda (xu1d11@maps) (call-with-values (lambda () (xu1cee@k (cons '() xu1d11@maps))) (lambda (xu1d17@xu1d14 xu1d18@xu1d16) (let ((xu1d1b@maps xu1d18@xu1d16) (xu1d1c@x xu1d17@xu1d14)) (if (null? (car xu1d1b@maps)) (xue70@syntax-violation '#f '"extra ellipsis in syntax form" xu1ca1@src) (values (xu1c30@gen-mappend xu1d1c@x (car xu1d1b@maps)) (cdr xu1d1b@maps))))))))) xu1d07@ls/false) (let ((xu1d1f@t xu1d05@t)) (let ((xu1d21@ls/false (xud90@syntax-dispatch xu1d1f@t '_))) (if xu1d21@ls/false (apply (lambda () (call-with-values (lambda () (xu1c2a@gen-syntax xu1ca1@src xu1ced@y xu1ca3@r xu1ca4@maps xu1ca5@ellipsis? xu1ca6@vec?)) (lambda (xu1d27@xu1d24 xu1d28@xu1d26) (let ((xu1d2b@maps xu1d28@xu1d26) (xu1d2c@y xu1d27@xu1d24)) (call-with-values (lambda () (xu1cee@k xu1d2b@maps)) (lambda (xu1d33@xu1d30 xu1d34@xu1d32) (let ((xu1d37@maps xu1d34@xu1d32) (xu1d38@x xu1d33@xu1d30)) (values (xu1c2e@gen-append xu1d38@x xu1d2c@y) xu1d37@maps)))))))) xu1d21@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1d1f@t)))))))))))) xu1cdf@ls/false) (let ((xu1d3b@t xu1cdd@t)) (let ((xu1d3d@ls/false (xud90@syntax-dispatch xu1d3b@t '(any . any)))) (if xu1d3d@ls/false (apply (lambda (xu1d3f@x xu1d40@y) (call-with-values (lambda () (xu1c2a@gen-syntax xu1ca1@src xu1d3f@x xu1ca3@r xu1ca4@maps xu1ca5@ellipsis? '#f)) (lambda (xu1d47@xu1d44 xu1d48@xu1d46) (let ((xu1d4b@maps xu1d48@xu1d46) (xu1d4c@xnew xu1d47@xu1d44)) (call-with-values (lambda () (xu1c2a@gen-syntax xu1ca1@src xu1d40@y xu1ca3@r xu1d4b@maps xu1ca5@ellipsis? xu1ca6@vec?)) (lambda (xu1d53@xu1d50 xu1d54@xu1d52) (let ((xu1d57@maps xu1d54@xu1d52) (xu1d58@ynew xu1d53@xu1d50)) (values (xu1c34@gen-cons xu1ca2@e xu1d3f@x xu1d40@y xu1d4c@xnew xu1d58@ynew) xu1d57@maps)))))))) xu1d3d@ls/false) (let ((xu1d5b@t xu1d3b@t)) (let ((xu1d5d@ls/false (xud90@syntax-dispatch xu1d5b@t '#(vector each-any)))) (if xu1d5d@ls/false (apply (lambda (xu1d5f@ls) (call-with-values (lambda () (xu1c2a@gen-syntax xu1ca1@src xu1d5f@ls xu1ca3@r xu1ca4@maps xu1ca5@ellipsis? '#t)) (lambda (xu1d65@xu1d62 xu1d66@xu1d64) (let ((xu1d69@maps xu1d66@xu1d64) (xu1d6a@lsnew xu1d65@xu1d62)) (values (xu1c36@gen-vector xu1ca2@e xu1d5f@ls xu1d6a@lsnew) xu1d69@maps))))) xu1d5d@ls/false) (let ((xu1d6d@t xu1d5b@t)) (let ((xu1d6f@ls/false (xud90@syntax-dispatch xu1d6d@t '_))) (if xu1d6f@ls/false (apply (lambda () (values (list 'quote xu1ca2@e) xu1ca4@maps)) xu1d6f@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1d6d@t)))))))))))))))))))))))) (xu1c2c@gen-ref (lambda (xu1c87@src xu1c88@var xu1c89@level xu1c8a@maps) (if (= xu1c89@level '0) (values xu1c88@var xu1c8a@maps) (if (null? xu1c8a@maps) (xue70@syntax-violation '#f '"missing ellipsis in syntax form" xu1c87@src) (call-with-values (lambda () (xu1c2c@gen-ref xu1c87@src xu1c88@var (- xu1c89@level '1) (cdr xu1c8a@maps))) (lambda (xu1c93@xu1c90 xu1c94@xu1c92) (let ((xu1c97@outer-maps xu1c94@xu1c92) (xu1c98@outer-var xu1c93@xu1c90)) (let ((xu1c9b@t (assq xu1c98@outer-var (car xu1c8a@maps)))) (if xu1c9b@t ((lambda (xu1c9d@b) (values (cdr xu1c9d@b) xu1c8a@maps)) xu1c9b@t) (let ((xu1c9f@inner-var (xub11@gen-lexical 'tmp))) (values xu1c9f@inner-var (cons (cons (cons xu1c98@outer-var xu1c9f@inner-var) (car xu1c8a@maps)) xu1c97@outer-maps)))))))))))) (xu1c2e@gen-append (lambda (xu1c83@x xu1c84@y) (if (fast-equal? xu1c84@y ''()) xu1c83@x (list 'append xu1c83@x xu1c84@y)))) (xu1c30@gen-mappend (lambda (xu1c7f@e xu1c80@map-env) (list 'apply '(primitive append) (xu1c32@gen-map xu1c7f@e xu1c80@map-env)))) (xu1c32@gen-map (lambda (xu1c6d@e xu1c6e@map-env) (let ((xu1c71@formals (map cdr xu1c6e@map-env)) (xu1c72@actuals (map (lambda (xu1c75@x) (list 'ref (car xu1c75@x))) xu1c6e@map-env))) (if (eq? (car xu1c6d@e) 'ref) (car xu1c72@actuals) (if (for-all (lambda (xu1c77@x) (and (eq? (car xu1c77@x) 'ref) (memq (cadr xu1c77@x) xu1c71@formals))) (cdr xu1c6d@e)) (let ((xu1c79@args (map (let ((xu1c7b@r (map cons xu1c71@formals xu1c72@actuals))) (lambda (xu1c7d@x) (cdr (assq (cadr xu1c7d@x) xu1c7b@r)))) (cdr xu1c6d@e)))) (cons 'map (cons (list 'primitive (car xu1c6d@e)) xu1c79@args))) (cons* 'map (list 'lambda xu1c71@formals xu1c6d@e) xu1c72@actuals)))))) (xu1c34@gen-cons (lambda (xu1c5d@e xu1c5e@x xu1c5f@y xu1c60@xnew xu1c61@ynew) (let ((xu1c67@t (car xu1c61@ynew))) (if (memv xu1c67@t '(quote)) (if (eq? (car xu1c60@xnew) 'quote) (let ((xu1c69@xnew (cadr xu1c60@xnew)) (xu1c6a@ynew (cadr xu1c61@ynew))) (if (and (eq? xu1c69@xnew xu1c5e@x) (eq? xu1c6a@ynew xu1c5f@y)) (list 'quote xu1c5d@e) (list 'quote (cons xu1c69@xnew xu1c6a@ynew)))) (if (null? (cadr xu1c61@ynew)) (list 'list xu1c60@xnew) (list 'cons xu1c60@xnew xu1c61@ynew))) (if (memv xu1c67@t '(list)) (cons 'list (cons xu1c60@xnew (cdr xu1c61@ynew))) (list 'cons xu1c60@xnew xu1c61@ynew)))))) (xu1c36@gen-vector (lambda (xu1c57@e xu1c58@ls xu1c59@lsnew) (if (eq? (car xu1c59@lsnew) 'quote) (if (eq? (cadr xu1c59@lsnew) xu1c58@ls) (list 'quote xu1c57@e) (list 'quote (list->vector (cadr xu1c59@lsnew)))) (if (eq? (car xu1c59@lsnew) 'list) (cons 'vector (cdr xu1c59@lsnew)) (list 'list->vector xu1c59@lsnew))))) (xu1c38@regen (lambda (xu1c51@x) (let ((xu1c53@t (car xu1c51@x))) (if (memv xu1c53@t '(ref)) (cadr xu1c51@x) (if (memv xu1c53@t '(primitive)) (list 'primitive (cadr xu1c51@x)) (if (memv xu1c53@t '(quote)) (list 'quote (cadr xu1c51@x)) (if (memv xu1c53@t '(lambda)) (xuaec@xua1e@build-lambda '#f (cadr xu1c51@x) (xu1c38@regen (caddr xu1c51@x))) (if (memv xu1c53@t '(map)) (let ((xu1c55@ls (map xu1c38@regen (cdr xu1c51@x)))) (cons '(primitive ellipsis-map) xu1c55@ls)) (cons (list 'primitive (car xu1c51@x)) (map xu1c38@regen (cdr xu1c51@x)))))))))))) (lambda (xu1c39@e xu1c3a@r xu1c3b@mr) (let ((xu1c3f@t xu1c39@e)) (let ((xu1c41@ls/false (xud90@syntax-dispatch xu1c3f@t '(_ any)))) (if xu1c41@ls/false (apply (lambda (xu1c43@x) (call-with-values (lambda () (xu1c2a@gen-syntax xu1c39@e xu1c43@x xu1c3a@r '() xud92@ellipsis? '#f)) (lambda (xu1c49@xu1c46 xu1c4a@xu1c48) (let ((xu1c4d@maps xu1c4a@xu1c48) (xu1c4e@e xu1c49@xu1c46)) (xu1c38@regen xu1c4e@e))))) xu1c41@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1c3f@t))))))) (set! xu28a2@xud9c@syntax-transformer xud9c@syntax-transformer) (set! xud9e@core-macro-transformer (lambda (xu1d71@name) (let ((xu1d73@t xu1d71@name)) (if (memv xu1d73@t '(quote)) xud40@quote-transformer (if (memv xu1d73@t '(lambda)) xud44@lambda-transformer (if (memv xu1d73@t '(case-lambda)) xud42@case-lambda-transformer (if (memv xu1d73@t '(letrec)) xud28@letrec-transformer (if (memv xu1d73@t '(letrec*)) xud2a@letrec*-transformer (if (memv xu1d73@t '(let)) xud26@let-transformer (if (memv xu1d73@t '(if)) xud38@if-transformer (if (memv xu1d73@t '(and)) xud3a@and-transformer (if (memv xu1d73@t '(or)) xud3c@or-transformer (if (memv xu1d73@t '(foreign-call)) xud8c@foreign-call-transformer (if (memv xu1d73@t '(syntax-case)) xud98@syntax-case-transformer (if (memv xu1d73@t '(syntax)) xud9c@syntax-transformer (if (memv xu1d73@t '(type-descriptor)) xud2e@type-descriptor-transformer (if (memv xu1d73@t '(record-type-descriptor)) xud30@record-type-descriptor-transformer (if (memv xu1d73@t '(record-constructor-descriptor)) xud32@record-constructor-descriptor-transformer (if (memv xu1d73@t '(fluid-let-syntax)) xud2c@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" xu1d71@name)))))))))))))))))))) (set! xu28a3@xud9e@core-macro-transformer xud9e@core-macro-transformer) (set! xuda0@symbol-macro (lambda (xu1d75@x xu1d76@set) (let ((xu1d79@t xu1d75@x)) (let ((xu1d7b@ls/false (xud90@syntax-dispatch xu1d79@t '(_ any)))) (if (and xu1d7b@ls/false (apply (lambda (xu1d7d@name) (and (xub89@id? xu1d7d@name) (memq (xub8b@id->sym xu1d7d@name) xu1d76@set))) xu1d7b@ls/false)) (apply (lambda (xu1d7f@name) (xud46@bless (list 'quote xu1d7f@name))) xu1d7b@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1d79@t)))))) (set! xu28a4@xuda0@symbol-macro xuda0@symbol-macro) (set! xuda2@macro-transformer (lambda (xu1d81@x) (if (procedure? xu1d81@x) xu1d81@x (if (symbol? xu1d81@x) (let ((xu1d83@t xu1d81@x)) (if (memv xu1d83@t '(define-record-type)) xud84@define-record-type-macro (if (memv xu1d83@t '(define-struct)) xud82@define-struct-macro (if (memv xu1d83@t '(include)) xud78@include-macro (if (memv xu1d83@t '(cond)) xud74@cond-macro (if (memv xu1d83@t '(let)) xud4c@let-macro (if (memv xu1d83@t '(do)) xud6c@do-macro (if (memv xu1d83@t '(or)) xud70@or-macro (if (memv xu1d83@t '(and)) xud72@and-macro (if (memv xu1d83@t '(let*)) xud6e@let*-macro (if (memv xu1d83@t '(let-values)) xud4e@let-values-macro (if (memv xu1d83@t '(let*-values)) xud50@let*-values-macro (if (memv xu1d83@t '(syntax-rules)) xud7c@syntax-rules-macro (if (memv xu1d83@t '(quasiquote)) xud7e@quasiquote-macro (if (memv xu1d83@t '(quasisyntax)) xud80@quasisyntax-macro (if (memv xu1d83@t '(with-syntax)) xud48@with-syntax-macro (if (memv xu1d83@t '(when)) xud34@when-macro (if (memv xu1d83@t '(unless)) xud36@unless-macro (if (memv xu1d83@t '(case)) xud3e@case-macro (if (memv xu1d83@t '(identifier-syntax)) xud6a@identifier-syntax-macro (if (memv xu1d83@t '(time)) xud62@time-macro (if (memv xu1d83@t '(delay)) xud64@delay-macro (if (memv xu1d83@t '(assert)) xud66@assert-macro (if (memv xu1d83@t '(endianness)) xud68@endianness-macro (if (memv xu1d83@t '(guard)) xud5e@guard-macro (if (memv xu1d83@t '(define-enumeration)) xud60@define-enumeration-macro (if (memv xu1d83@t '(trace-lambda)) xud52@trace-lambda-macro (if (memv xu1d83@t '(trace-define)) xud54@trace-define-macro (if (memv xu1d83@t '(trace-define-syntax)) xud56@trace-define-syntax-macro (if (memv xu1d83@t '(trace-let-syntax)) xud5a@trace-let-syntax-macro (if (memv xu1d83@t '(trace-letrec-syntax)) xud5c@trace-letrec-syntax-macro (if (memv xu1d83@t '(define-condition-type)) xud86@define-condition-type-macro (if (memv xu1d83@t '(parameterize)) xud8a@parameterize-macro (if (memv xu1d83@t '(include-into)) xud7a@include-into-macro (if (memv xu1d83@t '(eol-style)) (lambda (xu1d85@x) (xuda0@symbol-macro xu1d85@x '(none lf cr crlf nel crnel ls))) (if (memv xu1d83@t '(error-handling-mode)) (lambda (xu1d87@x) (xuda0@symbol-macro xu1d87@x '(ignore raise replace))) (if (memv xu1d83@t '(buffer-mode)) (lambda (xu1d89@x) (xuda0@symbol-macro xu1d89@x '(none line block))) (if (memv xu1d83@t '(file-options)) xub04@file-options-macro (if (memv xu1d83@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) xud88@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" xu1d81@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" xu1d81@x))))) (set! xu28a5@xuda2@macro-transformer xuda2@macro-transformer) (set! xuda4@local-macro-transformer (lambda (xu1d8b@x) (car xu1d8b@x))) (set! xu28a6@xuda4@local-macro-transformer xuda4@local-macro-transformer) (set! xuda6@do-macro-call (lambda (xu1d8d@transformer xu1d8e@expr xu1d8f@rib) (let ((xu1d93@out (xu1d8d@transformer (xub75@add-mark xub6d@anti-mark '#f xu1d8e@expr '#f)))) (begin (let xu1d97@f ((xu1d95@x xu1d93@out)) (if (not (xub55@stx? xu1d95@x)) (if (pair? xu1d95@x) (begin (xu1d97@f (car xu1d95@x)) (xu1d97@f (cdr xu1d95@x))) (if (vector? xu1d95@x) (vector-for-each xu1d97@f xu1d95@x) (if (symbol? xu1d95@x) (xue70@syntax-violation '#f '"raw symbol encountered in output of macro" xu1d8e@expr xu1d95@x) (void)))) (void))) (xub75@add-mark (xub6b@gen-mark) xu1d8f@rib xu1d93@out xu1d8e@expr))))) (set! xu28a7@xuda6@do-macro-call xuda6@do-macro-call) (set! xuda8@chi-macro (lambda (xu1d99@p xu1d9a@e xu1d9b@rib) (xuda6@do-macro-call (xuda2@macro-transformer xu1d99@p) xu1d9a@e xu1d9b@rib))) (set! xu28a8@xuda8@chi-macro xuda8@chi-macro) (set! xudaa@chi-local-macro (lambda (xu1d9f@p xu1da0@e xu1da1@rib) (xuda6@do-macro-call (xuda4@local-macro-transformer xu1d9f@p) xu1da0@e xu1da1@rib))) (set! xu28a9@xudaa@chi-local-macro xudaa@chi-local-macro) (set! xudac@chi-global-macro (lambda (xu1da5@p xu1da6@e xu1da7@rib) (let ((xu1dab@lib (car xu1da5@p)) (xu1dac@loc (cdr xu1da5@p))) (begin (xu9a6@xu7f5@visit-library xu1dab@lib) (let ((xu1daf@x (symbol-value xu1dac@loc))) (let ((xu1db1@transformer (if (procedure? xu1daf@x) xu1daf@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" xu1daf@x)))) (xuda6@do-macro-call xu1db1@transformer xu1da6@e xu1da7@rib))))))) (set! xu28aa@xudac@chi-global-macro xudac@chi-global-macro) (set! xudae@chi-expr* (lambda (xu1db3@e* xu1db4@r xu1db5@mr) (if (null? xu1db3@e*) '() (let ((xu1db9@e (xudb2@chi-expr (car xu1db3@e*) xu1db4@r xu1db5@mr))) (cons xu1db9@e (xudae@chi-expr* (cdr xu1db3@e*) xu1db4@r xu1db5@mr)))))) (set! xu28ab@xudae@chi-expr* xudae@chi-expr*) (set! xudb0@chi-application (lambda (xu1dbb@e xu1dbc@r xu1dbd@mr) (let ((xu1dc1@t xu1dbb@e)) (let ((xu1dc3@ls/false (xud90@syntax-dispatch xu1dc1@t '(any . each-any)))) (if xu1dc3@ls/false (apply (lambda (xu1dc5@rator xu1dc6@rands) (let ((xu1dc9@rator (xudb2@chi-expr xu1dc5@rator xu1dbc@r xu1dbd@mr))) (cons xu1dc9@rator (xudae@chi-expr* xu1dc6@rands xu1dbc@r xu1dbd@mr)))) xu1dc3@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1dc1@t)))))) (set! xu28ac@xudb0@chi-application xudb0@chi-application) (set! xudb2@chi-expr (lambda (xu1dcb@e xu1dcc@r xu1dcd@mr) (call-with-values (lambda () (xubab@syntax-type xu1dcb@e xu1dcc@r)) (lambda (xu1dd7@xu1dd2 xu1dd8@xu1dd4 xu1dd9@xu1dd6) (let ((xu1ddd@kwd xu1dd9@xu1dd6) (xu1dde@value xu1dd8@xu1dd4) (xu1ddf@type xu1dd7@xu1dd2)) (let ((xu1de3@t xu1ddf@type)) (if (memv xu1de3@t '(core-macro)) (let ((xu1de5@transformer (xud9e@core-macro-transformer xu1dde@value))) (xu1de5@transformer xu1dcb@e xu1dcc@r xu1dcd@mr)) (if (memv xu1de3@t '(global)) (let ((xu1de7@lib (car xu1dde@value))) (let ((xu1de9@loc (cdr xu1dde@value))) (begin ((xudf8@inv-collector) xu1de7@lib) xu1de9@loc))) (if (memv xu1de3@t '(core-prim)) (let ((xu1deb@name xu1dde@value)) (list 'primitive xu1deb@name)) (if (memv xu1de3@t '(call)) (xudb0@chi-application xu1dcb@e xu1dcc@r xu1dcd@mr) (if (memv xu1de3@t '(lexical)) (let ((xu1ded@lex (xud1a@lexical-var xu1dde@value))) xu1ded@lex) (if (memv xu1de3@t '(global-macro global-macro!)) (xudb2@chi-expr (xudac@chi-global-macro xu1dde@value xu1dcb@e '#f) xu1dcc@r xu1dcd@mr) (if (memv xu1de3@t '(local-macro local-macro!)) (xudb2@chi-expr (xudaa@chi-local-macro xu1dde@value xu1dcb@e '#f) xu1dcc@r xu1dcd@mr) (if (memv xu1de3@t '(macro macro!)) (xudb2@chi-expr (xuda8@chi-macro xu1dde@value xu1dcb@e '#f) xu1dcc@r xu1dcd@mr) (if (memv xu1de3@t '(constant)) (let ((xu1def@datum xu1dde@value)) (list 'quote xu1def@datum)) (if (memv xu1de3@t '(set!)) (xudb4@chi-set! xu1dcb@e xu1dcc@r xu1dcd@mr) (if (memv xu1de3@t '(begin)) (let ((xu1df1@t xu1dcb@e)) (let ((xu1df3@ls/false (xud90@syntax-dispatch xu1df1@t '(_ any . each-any)))) (if xu1df3@ls/false (apply (lambda (xu1df5@x xu1df6@x*) (xuaee@xua4e@build-sequence '#f (xudae@chi-expr* (cons xu1df5@x xu1df6@x*) xu1dcc@r xu1dcd@mr))) xu1df3@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1df1@t)))) (if (memv xu1de3@t '(let-syntax letrec-syntax)) (let ((xu1df9@t xu1dcb@e)) (let ((xu1dfb@ls/false (xud90@syntax-dispatch xu1df9@t '(_ #(each (any any)) any . each-any)))) (if (and xu1dfb@ls/false (apply (lambda (xu1dfd@xlhs* xu1dfe@xrhs* xu1dff@xbody xu1e00@xbody*) (if (not (xub91@valid-bound-ids? xu1dfd@xlhs*)) (xue70@syntax-violation '#f '"invalid identifiers" xu1dcb@e) (void))) xu1dfb@ls/false)) (apply (lambda (xu1e05@xlhs* xu1e06@xrhs* xu1e07@xbody xu1e08@xbody*) (let ((xu1e0d@xlab* (map xub15@gen-label xu1e05@xlhs*))) (let ((xu1e0f@xrib (xub49@make-full-rib xu1e05@xlhs* xu1e0d@xlab*))) (let ((xu1e11@xb* (map (lambda (xu1e13@x) (xubc1@make-eval-transformer (xudea@expand-transformer (if (eq? xu1ddf@type 'let-syntax) xu1e13@x (xub73@add-subst xu1e0f@xrib xu1e13@x)) xu1dcd@mr))) xu1e06@xrhs*))) (xuaee@xua4e@build-sequence '#f (xudae@chi-expr* (map (lambda (xu1e15@x) (xub73@add-subst xu1e0f@xrib xu1e15@x)) (cons xu1e07@xbody xu1e08@xbody*)) (append (map cons xu1e0d@xlab* xu1e11@xb*) xu1dcc@r) (append (map cons xu1e0d@xlab* xu1e11@xb*) xu1dcd@mr))))))) xu1dfb@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1df9@t)))) (if (memv xu1de3@t '(displaced-lexical)) (xue70@syntax-violation '#f '"identifier out of context" xu1dcb@e) (if (memv xu1de3@t '(syntax)) (xue70@syntax-violation '#f '"reference to pattern variable outside a syntax form" xu1dcb@e) (if (memv xu1de3@t '(define define-syntax module import library)) (xue70@syntax-violation '#f (string-append (let ((xu1e17@t xu1ddf@type)) (if (memv xu1e17@t '(define)) '"a definition" (if (memv xu1e17@t '(define-syntax)) '"a define-syntax" (if (memv xu1e17@t '(module)) '"a module definition" (if (memv xu1e17@t '(library)) '"a library definition" (if (memv xu1e17@t '(import)) '"an import declaration" (if (memv xu1e17@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") xu1dcb@e) (if (memv xu1de3@t '(mutable)) (xue70@syntax-violation '#f '"attempt to reference an unexportable variable" xu1dcb@e) (xue70@syntax-violation '#f '"invalid expression" xu1dcb@e))))))))))))))))))))))) (set! xu28ad@xudb2@chi-expr xudb2@chi-expr) (set! xudb4@chi-set! (lambda (xu1e19@e xu1e1a@r xu1e1b@mr) (let ((xu1e1f@t xu1e19@e)) (let ((xu1e21@ls/false (xud90@syntax-dispatch xu1e1f@t '(_ any any)))) (if (and xu1e21@ls/false (apply (lambda (xu1e23@x xu1e24@v) (xub89@id? xu1e23@x)) xu1e21@ls/false)) (apply (lambda (xu1e27@x xu1e28@v) (call-with-values (lambda () (xubab@syntax-type xu1e27@x xu1e1a@r)) (lambda (xu1e31@xu1e2c xu1e32@xu1e2e xu1e33@xu1e30) (let ((xu1e37@kwd xu1e33@xu1e30) (xu1e38@value xu1e32@xu1e2e) (xu1e39@type xu1e31@xu1e2c)) (let ((xu1e3d@t xu1e39@type)) (if (memv xu1e3d@t '(lexical)) (begin (xud1e@set-lexical-mutable! xu1e38@value '#t) (list 'set! (xud1a@lexical-var xu1e38@value) (xudb2@chi-expr xu1e28@v xu1e1a@r xu1e1b@mr))) (if (memv xu1e3d@t '(core-prim)) (xue70@syntax-violation '#f '"cannot modify imported core primitive" xu1e19@e) (if (memv xu1e3d@t '(global)) (xue70@syntax-violation '#f '"attempt to modify imported binding" xu1e19@e) (if (memv xu1e3d@t '(global-macro!)) (xudb2@chi-expr (xudac@chi-global-macro xu1e38@value xu1e19@e '#f) xu1e1a@r xu1e1b@mr) (if (memv xu1e3d@t '(local-macro!)) (xudb2@chi-expr (xudaa@chi-local-macro xu1e38@value xu1e19@e '#f) xu1e1a@r xu1e1b@mr) (if (memv xu1e3d@t '(mutable)) (xue70@syntax-violation '#f '"attempt to assign to an unexportable variable" xu1e19@e) (xue70@syntax-violation '#f '"invalid syntax" xu1e19@e)))))))))))) xu1e21@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1e1f@t)))))) (set! xu28ae@xudb4@chi-set! xudb4@chi-set!) (set! xudb6@verify-formals (lambda (xu1e3f@fmls xu1e40@stx) (let ((xu1e43@t xu1e3f@fmls)) (let ((xu1e45@ls/false (xud90@syntax-dispatch xu1e43@t 'each-any))) (if xu1e45@ls/false (apply (lambda (xu1e47@x*) (if (not (xub91@valid-bound-ids? xu1e47@x*)) (xud4a@invalid-fmls-error xu1e40@stx xu1e3f@fmls) (void))) xu1e45@ls/false) (let ((xu1e49@t xu1e43@t)) (let ((xu1e4b@ls/false (xud90@syntax-dispatch xu1e49@t '#(each+ any () any)))) (if xu1e4b@ls/false (apply (lambda (xu1e4d@x* xu1e4e@x) (if (not (xub91@valid-bound-ids? (cons xu1e4e@x xu1e4d@x*))) (xud4a@invalid-fmls-error xu1e40@stx xu1e3f@fmls) (void))) xu1e4b@ls/false) (let ((xu1e51@t xu1e49@t)) (let ((xu1e53@ls/false (xud90@syntax-dispatch xu1e51@t '_))) (if xu1e53@ls/false (apply (lambda () (xue70@syntax-violation '#f '"invalid syntax" xu1e40@stx)) xu1e53@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1e51@t)))))))))))) (set! xu28af@xudb6@verify-formals xudb6@verify-formals) (set! xudb8@chi-lambda-clause (lambda (xu1e55@stx xu1e56@fmls xu1e57@body* xu1e58@r xu1e59@mr) (let ((xu1e5f@t xu1e56@fmls)) (let ((xu1e61@ls/false (xud90@syntax-dispatch xu1e5f@t 'each-any))) (if xu1e61@ls/false (apply (lambda (xu1e63@x*) (begin (xudb6@verify-formals xu1e56@fmls xu1e55@stx) (let ((xu1e65@lex* (map xub11@gen-lexical xu1e63@x*)) (xu1e66@lab* (map xub15@gen-label xu1e63@x*))) (values xu1e65@lex* (xudc8@chi-internal (xub73@add-subst (xub49@make-full-rib xu1e63@x* xu1e66@lab*) xu1e57@body*) (xud22@add-lexicals xu1e66@lab* xu1e65@lex* xu1e58@r) xu1e59@mr))))) xu1e61@ls/false) (let ((xu1e69@t xu1e5f@t)) (let ((xu1e6b@ls/false (xud90@syntax-dispatch xu1e69@t '#(each+ any () any)))) (if xu1e6b@ls/false (apply (lambda (xu1e6d@x* xu1e6e@x) (begin (xudb6@verify-formals xu1e56@fmls xu1e55@stx) (let ((xu1e71@lex* (map xub11@gen-lexical xu1e6d@x*)) (xu1e72@lab* (map xub15@gen-label xu1e6d@x*)) (xu1e73@lex (xub11@gen-lexical xu1e6e@x)) (xu1e74@lab (xub15@gen-label xu1e6e@x))) (values (append xu1e71@lex* xu1e73@lex) (xudc8@chi-internal (xub73@add-subst (xub49@make-full-rib (cons xu1e6e@x xu1e6d@x*) (cons xu1e74@lab xu1e72@lab*)) xu1e57@body*) (xud22@add-lexicals (cons xu1e74@lab xu1e72@lab*) (cons xu1e73@lex xu1e71@lex*) xu1e58@r) xu1e59@mr))))) xu1e6b@ls/false) (let ((xu1e79@t xu1e69@t)) (let ((xu1e7b@ls/false (xud90@syntax-dispatch xu1e79@t '_))) (if xu1e7b@ls/false (apply (lambda () (xue70@syntax-violation '#f '"invalid syntax" xu1e56@fmls)) xu1e7b@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1e79@t)))))))))))) (set! xu28b0@xudb8@chi-lambda-clause xudb8@chi-lambda-clause) (set! xudba@chi-lambda-clause* (lambda (xu1e7d@stx xu1e7e@fmls* xu1e7f@body** xu1e80@r xu1e81@mr) (if (null? xu1e7e@fmls*) (values '() '()) (call-with-values (lambda () (xudb8@chi-lambda-clause xu1e7d@stx (car xu1e7e@fmls*) (car xu1e7f@body**) xu1e80@r xu1e81@mr)) (lambda (xu1e8b@xu1e88 xu1e8c@xu1e8a) (let ((xu1e8f@b xu1e8c@xu1e8a) (xu1e90@a xu1e8b@xu1e88)) (call-with-values (lambda () (xudba@chi-lambda-clause* xu1e7d@stx (cdr xu1e7e@fmls*) (cdr xu1e7f@body**) xu1e80@r xu1e81@mr)) (lambda (xu1e97@xu1e94 xu1e98@xu1e96) (let ((xu1e9b@b* xu1e98@xu1e96) (xu1e9c@a* xu1e97@xu1e94)) (values (cons xu1e90@a xu1e9c@a*) (cons xu1e8f@b xu1e9b@b*))))))))))) (set! xu28b1@xudba@chi-lambda-clause* xudba@chi-lambda-clause*) (set! xudbc@chi-defun (lambda (xu1e9f@x xu1ea0@r xu1ea1@mr) (let ((xu1ea5@fmls (car xu1e9f@x)) (xu1ea6@body* (cdr xu1e9f@x))) (call-with-values (lambda () (xudb8@chi-lambda-clause xu1ea5@fmls xu1ea5@fmls xu1ea6@body* xu1ea0@r xu1ea1@mr)) (lambda (xu1ead@xu1eaa xu1eae@xu1eac) (let ((xu1eb1@body xu1eae@xu1eac) (xu1eb2@fmls xu1ead@xu1eaa)) (xuaec@xua1e@build-lambda '#f xu1eb2@fmls xu1eb1@body))))))) (set! xu28b2@xudbc@chi-defun xudbc@chi-defun) (set! xudbe@chi-rhs (lambda (xu1eb5@rhs xu1eb6@r xu1eb7@mr) (let ((xu1ebb@t (car xu1eb5@rhs))) (if (memv xu1ebb@t '(defun)) (xudbc@chi-defun (cdr xu1eb5@rhs) xu1eb6@r xu1eb7@mr) (if (memv xu1ebb@t '(expr)) (let ((xu1ebd@expr (cdr xu1eb5@rhs))) (xudb2@chi-expr xu1ebd@expr xu1eb6@r xu1eb7@mr)) (if (memv xu1ebb@t '(top-expr)) (let ((xu1ebf@expr (cdr xu1eb5@rhs))) (xuaee@xua4e@build-sequence '#f (list (xudb2@chi-expr xu1ebf@expr xu1eb6@r xu1eb7@mr) (xuaef@xua50@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" xu1eb5@rhs))))))) (set! xu28b3@xudbe@chi-rhs xudbe@chi-rhs) (set! xudc0@expand-interaction-rhs*/init* (lambda (xu1ec1@lhs* xu1ec2@rhs* xu1ec3@init* xu1ec4@r xu1ec5@mr) (let xu1ecf@f ((xu1ecb@lhs* xu1ec1@lhs*) (xu1ecc@rhs* xu1ec2@rhs*)) (if (null? xu1ecb@lhs*) (map (lambda (xu1ed1@x) (xudb2@chi-expr xu1ed1@x xu1ec4@r xu1ec5@mr)) xu1ec3@init*) (let ((xu1ed3@lhs (car xu1ecb@lhs*)) (xu1ed4@rhs (car xu1ecc@rhs*))) (let ((xu1ed7@t (car xu1ed4@rhs))) (if (memv xu1ed7@t '(defun)) (let ((xu1ed9@rhs (xudbc@chi-defun (cdr xu1ed4@rhs) xu1ec4@r xu1ec5@mr))) (cons (list 'set! xu1ed3@lhs xu1ed9@rhs) (xu1ecf@f (cdr xu1ecb@lhs*) (cdr xu1ecc@rhs*)))) (if (memv xu1ed7@t '(expr)) (let ((xu1edb@rhs (xudb2@chi-expr (cdr xu1ed4@rhs) xu1ec4@r xu1ec5@mr))) (cons (list 'set! xu1ed3@lhs xu1edb@rhs) (xu1ecf@f (cdr xu1ecb@lhs*) (cdr xu1ecc@rhs*)))) (if (memv xu1ed7@t '(top-expr)) (let ((xu1edd@e (xudb2@chi-expr (cdr xu1ed4@rhs) xu1ec4@r xu1ec5@mr))) (cons xu1edd@e (xu1ecf@f (cdr xu1ecb@lhs*) (cdr xu1ecc@rhs*)))) (error 'expand-interaction '"invallid" xu1ed4@rhs)))))))))) (set! xu28b4@xudc0@expand-interaction-rhs*/init* xudc0@expand-interaction-rhs*/init*) (set! xudc2@chi-rhs* (lambda (xu1edf@rhs* xu1ee0@r xu1ee1@mr) (let xu1ee7@f ((xu1ee5@ls xu1edf@rhs*)) (if (null? xu1ee5@ls) '() (let ((xu1ee9@a (xudbe@chi-rhs (car xu1ee5@ls) xu1ee0@r xu1ee1@mr))) (cons xu1ee9@a (xu1ee7@f (cdr xu1ee5@ls)))))))) (set! xu28b5@xudc2@chi-rhs* xudc2@chi-rhs*) (set! xudc4@find-bound=? (lambda (xu1eeb@x xu1eec@lhs* xu1eed@rhs*) (if (null? xu1eec@lhs*) '#f (if (xub8d@bound-id=? xu1eeb@x (car xu1eec@lhs*)) (car xu1eed@rhs*) (xudc4@find-bound=? xu1eeb@x (cdr xu1eec@lhs*) (cdr xu1eed@rhs*)))))) (set! xu28b6@xudc4@find-bound=? xudc4@find-bound=?) (set! xudc6@find-dups (lambda (xu1ef1@ls) (let xu1ef7@f ((xu1ef3@ls xu1ef1@ls) (xu1ef4@dups '())) (if (null? xu1ef3@ls) xu1ef4@dups (let ((xu1ef9@t (xudc4@find-bound=? (car xu1ef3@ls) (cdr xu1ef3@ls) (cdr xu1ef3@ls)))) (if xu1ef9@t ((lambda (xu1efb@x) (xu1ef7@f (cdr xu1ef3@ls) (cons (list (car xu1ef3@ls) xu1efb@x) xu1ef4@dups))) xu1ef9@t) (xu1ef7@f (cdr xu1ef3@ls) xu1ef4@dups))))))) (set! xu28b7@xudc6@find-dups xudc6@find-dups) (set! xudc8@chi-internal (lambda (xu1efd@e* xu1efe@r xu1eff@mr) (let ((xu1f03@rib (xub3d@make-empty-rib))) (call-with-values (lambda () (xude8@chi-body* (map (lambda (xu1f15@x) (xub73@add-subst xu1f03@rib xu1f15@x)) (xub87@syntax->list xu1efd@e*)) xu1efe@r xu1eff@mr '() '() '() '() '() xu1f03@rib '#f)) (lambda (xu1f17@xu1f06 xu1f18@xu1f08 xu1f19@xu1f0a xu1f1a@xu1f0c xu1f1b@xu1f0e xu1f1c@xu1f10 xu1f1d@xu1f12 xu1f1e@xu1f14) (let ((xu1f27@_exp* xu1f1e@xu1f14) (xu1f28@kwd* xu1f1d@xu1f12) (xu1f29@mod** xu1f1c@xu1f10) (xu1f2a@rhs* xu1f1b@xu1f0e) (xu1f2b@lex* xu1f1a@xu1f0c) (xu1f2c@mr xu1f19@xu1f0a) (xu1f2d@r xu1f18@xu1f08) (xu1f2e@e* xu1f17@xu1f06)) (begin (if (null? xu1f2e@e*) (xue70@syntax-violation '#f '"no expression in body" xu1f2e@e*) (void)) (let ((xu1f37@init* (xudae@chi-expr* (append (apply append (reverse xu1f29@mod**)) xu1f2e@e*) xu1f2d@r xu1f2c@mr))) (let ((xu1f39@rhs* (xudc2@chi-rhs* xu1f2a@rhs* xu1f2d@r xu1f2c@mr))) (xuaf3@xua58@build-letrec* '#f (reverse xu1f2b@lex*) (reverse xu1f39@rhs*) (xuaee@xua4e@build-sequence '#f xu1f37@init*))))))))))) (set! xu28b8@xudc8@chi-internal xudc8@chi-internal) (set! xudca@parse-module (lambda (xu1f3b@e) (let ((xu1f3d@t xu1f3b@e)) (let ((xu1f3f@ls/false (xud90@syntax-dispatch xu1f3d@t '(_ each-any . each-any)))) (if xu1f3f@ls/false (apply (lambda (xu1f41@export* xu1f42@b*) (begin (if (not (for-all xub89@id? xu1f41@export*)) (xue70@syntax-violation '#f '"module exports must be identifiers" xu1f3b@e) (void)) (values '#f (list->vector xu1f41@export*) xu1f42@b*))) xu1f3f@ls/false) (let ((xu1f45@t xu1f3d@t)) (let ((xu1f47@ls/false (xud90@syntax-dispatch xu1f45@t '(_ any each-any . each-any)))) (if xu1f47@ls/false (apply (lambda (xu1f49@name xu1f4a@export* xu1f4b@b*) (begin (if (not (xub89@id? xu1f49@name)) (xue70@syntax-violation '#f '"module name must be an identifier" xu1f3b@e) (void)) (if (not (for-all xub89@id? xu1f4a@export*)) (xue70@syntax-violation '#f '"module exports must be identifiers" xu1f3b@e) (void)) (values xu1f49@name (list->vector xu1f4a@export*) xu1f4b@b*))) xu1f47@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu1f45@t))))))))) (set! xu28b9@xudca@parse-module xudca@parse-module) (set! xudd4@module-interface? (lambda (xu1f4f@x) (and (simple-struct? xu1f4f@x) (eq? (simple-struct-name xu1f4f@x) 'module-interface)))) (set! xu28ba@xudd4@module-interface? xudd4@module-interface?) (set! xudd6@module-interface-first-mark (lambda (xu1f51@x) (simple-struct-ref xu1f51@x '0))) (set! xu28bb@xudd6@module-interface-first-mark xudd6@module-interface-first-mark) (set! xudd8@set-module-interface-first-mark! (lambda (xu1f53@x xu1f54@val) (simple-struct-set! xu1f53@x '0 xu1f54@val))) (set! xu28bc@xudd8@set-module-interface-first-mark! xudd8@set-module-interface-first-mark!) (set! xudda@module-interface-exp-id-vec (lambda (xu1f57@x) (simple-struct-ref xu1f57@x '1))) (set! xu28bd@xudda@module-interface-exp-id-vec xudda@module-interface-exp-id-vec) (set! xuddc@set-module-interface-exp-id-vec! (lambda (xu1f59@x xu1f5a@val) (simple-struct-set! xu1f59@x '1 xu1f5a@val))) (set! xu28be@xuddc@set-module-interface-exp-id-vec! xuddc@set-module-interface-exp-id-vec!) (set! xudde@module-interface-exp-lab-vec (lambda (xu1f5d@x) (simple-struct-ref xu1f5d@x '2))) (set! xu28bf@xudde@module-interface-exp-lab-vec xudde@module-interface-exp-lab-vec) (set! xude0@set-module-interface-exp-lab-vec! (lambda (xu1f5f@x xu1f60@val) (simple-struct-set! xu1f5f@x '2 xu1f60@val))) (set! xu28c0@xude0@set-module-interface-exp-lab-vec! xude0@set-module-interface-exp-lab-vec!) (set! xude2@dummy '3) (set! xu28c1@xude2@dummy xude2@dummy) (set! xude4@module-interface-exp-id* (lambda (xu1f63@iface xu1f64@id) (letrec* ((xu1f68@diff-marks (lambda (xu1f6f@ls xu1f70@x) (begin (if (null? xu1f6f@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((xu1f73@a (car xu1f6f@ls))) (if (eq? xu1f73@a xu1f70@x) '() (cons xu1f73@a (xu1f68@diff-marks (cdr xu1f6f@ls) xu1f70@x)))))))) (let ((xu1f69@diff (xu1f68@diff-marks (xub5b@stx-mark* xu1f64@id) (xudd6@module-interface-first-mark xu1f63@iface))) (xu1f6a@id-vec (xudda@module-interface-exp-id-vec xu1f63@iface))) (if (null? xu1f69@diff) xu1f6a@id-vec (vector-map (lambda (xu1f6d@x) (make-simple-struct 'stx '5 (list (xub57@stx-expr xu1f6d@x) (append xu1f69@diff (xub5b@stx-mark* xu1f6d@x)) '() '()))) xu1f6a@id-vec)))))) (set! xu28c2@xude4@module-interface-exp-id* xude4@module-interface-exp-id*) (set! xude6@chi-internal-module (lambda (xu1f75@e xu1f76@r xu1f77@mr xu1f78@lex* xu1f79@rhs* xu1f7a@mod** xu1f7b@kwd*) (call-with-values (lambda () (xudca@parse-module xu1f75@e)) (lambda (xu1f89@xu1f84 xu1f8a@xu1f86 xu1f8b@xu1f88) (let ((xu1f8f@e* xu1f8b@xu1f88) (xu1f90@exp-id* xu1f8a@xu1f86) (xu1f91@name xu1f89@xu1f84)) (let ((xu1f95@rib (xub3d@make-empty-rib))) (let ((xu1f97@e* (map (lambda (xu1f99@x) (xub73@add-subst xu1f95@rib xu1f99@x)) (xub87@syntax->list xu1f8f@e*)))) (call-with-values (lambda () (xude8@chi-body* xu1f97@e* xu1f76@r xu1f77@mr xu1f78@lex* xu1f79@rhs* xu1f7a@mod** xu1f7b@kwd* '() xu1f95@rib '#f)) (lambda (xu1fab@xu1f9c xu1fac@xu1f9e xu1fad@xu1fa0 xu1fae@xu1fa2 xu1faf@xu1fa4 xu1fb0@xu1fa6 xu1fb1@xu1fa8 xu1fb2@xu1faa) (let ((xu1fbb@_exp* xu1fb2@xu1faa) (xu1fbc@kwd* xu1fb1@xu1fa8) (xu1fbd@mod** xu1fb0@xu1fa6) (xu1fbe@rhs* xu1faf@xu1fa4) (xu1fbf@lex* xu1fae@xu1fa2) (xu1fc0@mr xu1fad@xu1fa0) (xu1fc1@r xu1fac@xu1f9e) (xu1fc2@e* xu1fab@xu1f9c)) (let ((xu1fcb@exp-lab* (vector-map (lambda (xu1fcf@x) (or (xub9f@id->label (make-simple-struct 'stx '5 (list (xub8b@id->sym xu1fcf@x) (xub5b@stx-mark* xu1fcf@x) (list xu1f95@rib) '()))) (xue70@syntax-violation '#f '"cannot find module export" xu1fcf@x))) xu1f90@exp-id*)) (xu1fcc@mod** (cons xu1fc2@e* xu1fbd@mod**))) (if (not xu1f91@name) (values xu1fbf@lex* xu1fbe@rhs* xu1f90@exp-id* xu1fcb@exp-lab* xu1fc1@r xu1fc0@mr xu1fcc@mod** xu1fbc@kwd*) (let ((xu1fd1@lab (xub15@gen-label 'module)) (xu1fd2@iface (make-simple-struct 'module-interface '4 (list (car (xub5b@stx-mark* xu1f91@name)) (vector-map (lambda (xu1fd5@x) (make-simple-struct 'stx '5 (list (xub57@stx-expr xu1fd5@x) (xub5b@stx-mark* xu1fd5@x) '() '()))) xu1f90@exp-id*) xu1fcb@exp-lab*)))) (values xu1fbf@lex* xu1fbe@rhs* (vector xu1f91@name) (vector xu1fd1@lab) (cons (cons xu1fd1@lab (cons '$module xu1fd2@iface)) xu1fc1@r) (cons (cons xu1fd1@lab (cons '$module xu1fd2@iface)) xu1fc0@mr) xu1fcc@mod** xu1fbc@kwd*)))))))))))))) (set! xu28c3@xude6@chi-internal-module xude6@chi-internal-module) (set! xude8@chi-body* (lambda (xu1fd7@e* xu1fd8@r xu1fd9@mr xu1fda@lex* xu1fdb@rhs* xu1fdc@mod** xu1fdd@kwd* xu1fde@exp* xu1fdf@rib xu1fe0@top?) (if (null? xu1fd7@e*) (values xu1fd7@e* xu1fd8@r xu1fd9@mr xu1fda@lex* xu1fdb@rhs* xu1fdc@mod** xu1fdd@kwd* xu1fde@exp*) (let ((xu1feb@e (car xu1fd7@e*))) (call-with-values (lambda () (xubab@syntax-type xu1feb@e xu1fd8@r)) (lambda (xu1ff3@xu1fee xu1ff4@xu1ff0 xu1ff5@xu1ff2) (let ((xu1ff9@kwd xu1ff5@xu1ff2) (xu1ffa@value xu1ff4@xu1ff0) (xu1ffb@type xu1ff3@xu1fee)) (let ((xu1fff@kwd* (if (xub89@id? xu1ff9@kwd) (cons xu1ff9@kwd xu1fdd@kwd*) xu1fdd@kwd*))) (let ((xu2001@t xu1ffb@type)) (if (memv xu2001@t '(define)) (call-with-values (lambda () (xud12@parse-define xu1feb@e)) (lambda (xu2007@xu2004 xu2008@xu2006) (let ((xu200b@rhs xu2008@xu2006) (xu200c@id xu2007@xu2004)) (begin (if (xub95@bound-id-member? xu200c@id xu1fff@kwd*) (xue70@syntax-violation '#f '"cannot redefine keyword" xu1feb@e) (void)) (call-with-values (lambda () (xub19@gen-define-label+loc xu200c@id xu1fdf@rib)) (lambda (xu2013@xu2010 xu2014@xu2012) (let ((xu2017@lex xu2014@xu2012) (xu2018@lab xu2013@xu2010)) (begin (xub3f@extend-rib! xu1fdf@rib xu200c@id xu2018@lab) (xude8@chi-body* (cdr xu1fd7@e*) (xud20@add-lexical xu2018@lab xu2017@lex xu1fd8@r) xu1fd9@mr (cons xu2017@lex xu1fda@lex*) (cons xu200b@rhs xu1fdb@rhs*) xu1fdc@mod** xu1fff@kwd* xu1fde@exp* xu1fdf@rib xu1fe0@top?))))))))) (if (memv xu2001@t '(define-syntax)) (call-with-values (lambda () (xud14@parse-define-syntax xu1feb@e)) (lambda (xu201f@xu201c xu2020@xu201e) (let ((xu2023@rhs xu2020@xu201e) (xu2024@id xu201f@xu201c)) (begin (if (xub95@bound-id-member? xu2024@id xu1fff@kwd*) (xue70@syntax-violation '#f '"cannot redefine keyword" xu1feb@e) (void)) (let ((xu2027@lab (xub1b@gen-define-label xu2024@id xu1fdf@rib)) (xu2028@expanded-rhs (xudea@expand-transformer xu2023@rhs xu1fd9@mr))) (begin (xub3f@extend-rib! xu1fdf@rib xu2024@id xu2027@lab) (let ((xu202b@b (xubc1@make-eval-transformer xu2028@expanded-rhs))) (xude8@chi-body* (cdr xu1fd7@e*) (cons (cons xu2027@lab xu202b@b) xu1fd8@r) (cons (cons xu2027@lab xu202b@b) xu1fd9@mr) xu1fda@lex* xu1fdb@rhs* xu1fdc@mod** xu1fff@kwd* xu1fde@exp* xu1fdf@rib xu1fe0@top?)))))))) (if (memv xu2001@t '(let-syntax letrec-syntax)) (let ((xu202d@t xu1feb@e)) (let ((xu202f@ls/false (xud90@syntax-dispatch xu202d@t '(_ #(each (any any)) . each-any)))) (if (and xu202f@ls/false (apply (lambda (xu2031@xlhs* xu2032@xrhs* xu2033@xbody*) (if (not (xub91@valid-bound-ids? xu2031@xlhs*)) (xue70@syntax-violation '#f '"invalid identifiers" xu1feb@e) (void))) xu202f@ls/false)) (apply (lambda (xu2037@xlhs* xu2038@xrhs* xu2039@xbody*) (let ((xu203d@xlab* (map xub15@gen-label xu2037@xlhs*))) (let ((xu203f@xrib (xub49@make-full-rib xu2037@xlhs* xu203d@xlab*))) (let ((xu2041@xb* (map (lambda (xu2043@x) (xubc1@make-eval-transformer (xudea@expand-transformer (if (eq? xu1ffb@type 'let-syntax) xu2043@x (xub73@add-subst xu203f@xrib xu2043@x)) xu1fd9@mr))) xu2038@xrhs*))) (xude8@chi-body* (append (map (lambda (xu2045@x) (xub73@add-subst xu203f@xrib xu2045@x)) xu2039@xbody*) (cdr xu1fd7@e*)) (append (map cons xu203d@xlab* xu2041@xb*) xu1fd8@r) (append (map cons xu203d@xlab* xu2041@xb*) xu1fd9@mr) xu1fda@lex* xu1fdb@rhs* xu1fdc@mod** xu1fff@kwd* xu1fde@exp* xu1fdf@rib xu1fe0@top?))))) xu202f@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu202d@t)))) (if (memv xu2001@t '(begin)) (let ((xu2047@t xu1feb@e)) (let ((xu2049@ls/false (xud90@syntax-dispatch xu2047@t '(_ . each-any)))) (if xu2049@ls/false (apply (lambda (xu204b@x*) (xude8@chi-body* (append xu204b@x* (cdr xu1fd7@e*)) xu1fd8@r xu1fd9@mr xu1fda@lex* xu1fdb@rhs* xu1fdc@mod** xu1fff@kwd* xu1fde@exp* xu1fdf@rib xu1fe0@top?)) xu2049@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu2047@t)))) (if (memv xu2001@t '(global-macro global-macro!)) (xude8@chi-body* (cons (xudac@chi-global-macro xu1ffa@value xu1feb@e xu1fdf@rib) (cdr xu1fd7@e*)) xu1fd8@r xu1fd9@mr xu1fda@lex* xu1fdb@rhs* xu1fdc@mod** xu1fff@kwd* xu1fde@exp* xu1fdf@rib xu1fe0@top?) (if (memv xu2001@t '(local-macro local-macro!)) (xude8@chi-body* (cons (xudaa@chi-local-macro xu1ffa@value xu1feb@e xu1fdf@rib) (cdr xu1fd7@e*)) xu1fd8@r xu1fd9@mr xu1fda@lex* xu1fdb@rhs* xu1fdc@mod** xu1fff@kwd* xu1fde@exp* xu1fdf@rib xu1fe0@top?) (if (memv xu2001@t '(macro macro!)) (xude8@chi-body* (cons (xuda8@chi-macro xu1ffa@value xu1feb@e xu1fdf@rib) (cdr xu1fd7@e*)) xu1fd8@r xu1fd9@mr xu1fda@lex* xu1fdb@rhs* xu1fdc@mod** xu1fff@kwd* xu1fde@exp* xu1fdf@rib xu1fe0@top?) (if (memv xu2001@t '(module)) (call-with-values (lambda () (xude6@chi-internal-module xu1feb@e xu1fd8@r xu1fd9@mr xu1fda@lex* xu1fdb@rhs* xu1fdc@mod** xu1fff@kwd*)) (lambda (xu205d@xu204e xu205e@xu2050 xu205f@xu2052 xu2060@xu2054 xu2061@xu2056 xu2062@xu2058 xu2063@xu205a xu2064@xu205c) (let ((xu206d@kwd* xu2064@xu205c) (xu206e@mod** xu2063@xu205a) (xu206f@mr xu2062@xu2058) (xu2070@r xu2061@xu2056) (xu2071@m-exp-lab* xu2060@xu2054) (xu2072@m-exp-id* xu205f@xu2052) (xu2073@rhs* xu205e@xu2050) (xu2074@lex* xu205d@xu204e)) (begin (vector-for-each (lambda (xu207d@id xu207e@lab) (xub3f@extend-rib! xu1fdf@rib xu207d@id xu207e@lab)) xu2072@m-exp-id* xu2071@m-exp-lab*) (xude8@chi-body* (cdr xu1fd7@e*) xu2070@r xu206f@mr xu2074@lex* xu2073@rhs* xu206e@mod** xu206d@kwd* xu1fde@exp* xu1fdf@rib xu1fe0@top?))))) (if (memv xu2001@t '(library)) (begin (xue52@library-expander (xub9d@stx->datum xu1feb@e)) (xude8@chi-body* (cdr xu1fd7@e*) xu1fd8@r xu1fd9@mr xu1fda@lex* xu1fdb@rhs* xu1fdc@mod** xu1fff@kwd* xu1fde@exp* xu1fdf@rib xu1fe0@top?)) (if (memv xu2001@t '(export)) (let ((xu2081@t xu1feb@e)) (let ((xu2083@ls/false (xud90@syntax-dispatch xu2081@t '(_ . each-any)))) (if xu2083@ls/false (apply (lambda (xu2085@exp-decl*) (xude8@chi-body* (cdr xu1fd7@e*) xu1fd8@r xu1fd9@mr xu1fda@lex* xu1fdb@rhs* xu1fdc@mod** xu1fff@kwd* (append xu2085@exp-decl* xu1fde@exp*) xu1fdf@rib xu1fe0@top?)) xu2083@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu2081@t)))) (if (memv xu2001@t '(import)) (letrec* ((xu2088@module-import? (lambda (xu20db@e) (let ((xu20dd@t xu20db@e)) (let ((xu20df@ls/false (xud90@syntax-dispatch xu20dd@t '(_ any)))) (if (and xu20df@ls/false (apply (lambda (xu20e1@id) (xub89@id? xu20e1@id)) xu20df@ls/false)) (apply (lambda (xu20e3@id) '#t) xu20df@ls/false) (let ((xu20e5@t xu20dd@t)) (let ((xu20e7@ls/false (xud90@syntax-dispatch xu20e5@t '(_ . each-any)))) (if xu20e7@ls/false (apply (lambda (xu20e9@imp*) '#f) xu20e7@ls/false) (let ((xu20eb@t xu20e5@t)) (let ((xu20ed@ls/false (xud90@syntax-dispatch xu20eb@t '_))) (if xu20ed@ls/false (apply (lambda () (xue70@syntax-violation '#f '"malformed import form" xu20db@e)) xu20ed@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu20eb@t)))))))))))) (xu208a@module-import (lambda (xu20b9@e xu20ba@r) (let ((xu20bd@t xu20b9@e)) (let ((xu20bf@ls/false (xud90@syntax-dispatch xu20bd@t '(_ any)))) (if (and xu20bf@ls/false (apply (lambda (xu20c1@id) (xub89@id? xu20c1@id)) xu20bf@ls/false)) (apply (lambda (xu20c3@id) (call-with-values (lambda () (xubab@syntax-type xu20c3@id xu20ba@r)) (lambda (xu20cb@xu20c6 xu20cc@xu20c8 xu20cd@xu20ca) (let ((xu20d1@kwd xu20cd@xu20ca) (xu20d2@value xu20cc@xu20c8) (xu20d3@type xu20cb@xu20c6)) (let ((xu20d7@t xu20d3@type)) (if (memv xu20d7@t '($module)) (let ((xu20d9@iface xu20d2@value)) (values (xude4@module-interface-exp-id* xu20d9@iface xu20c3@id) (xudde@module-interface-exp-lab-vec xu20d9@iface))) (xue70@syntax-violation '#f '"invalid import" xu20b9@e))))))) xu20bf@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu20bd@t)))))) (xu208c@library-import (lambda (xu209d@e) (let ((xu209f@t xu209d@e)) (let ((xu20a1@ls/false (xud90@syntax-dispatch xu209f@t '(any . each-any)))) (if xu20a1@ls/false (apply (lambda (xu20a3@ctxt xu20a4@imp*) (call-with-values (lambda () (xudf2@parse-import-spec* (xue76@syntax->datum xu20a4@imp*))) (lambda (xu20ab@xu20a8 xu20ac@xu20aa) (let ((xu20af@subst-labels xu20ac@xu20aa) (xu20b0@subst-names xu20ab@xu20a8)) (values (vector-map (lambda (xu20b3@name) (xub69@datum->stx xu20a3@ctxt xu20b3@name)) xu20b0@subst-names) xu20af@subst-labels))))) xu20a1@ls/false) (let ((xu20b5@t xu209f@t)) (let ((xu20b7@ls/false (xud90@syntax-dispatch xu20b5@t '_))) (if xu20b7@ls/false (apply (lambda () (xue70@syntax-violation '#f '"invalid import form" xu209d@e)) xu20b7@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu20b5@t)))))))))) (begin (call-with-values (lambda () (if (xu2088@module-import? xu1feb@e) (xu208a@module-import xu1feb@e xu1fd8@r) (xu208c@library-import xu1feb@e))) (lambda (xu2091@xu208e xu2092@xu2090) (let ((xu2095@lab* xu2092@xu2090) (xu2096@id* xu2091@xu208e)) (vector-for-each (lambda (xu2099@id xu209a@lab) (xub3f@extend-rib! xu1fdf@rib xu2099@id xu209a@lab)) xu2096@id* xu2095@lab*)))) (xude8@chi-body* (cdr xu1fd7@e*) xu1fd8@r xu1fd9@mr xu1fda@lex* xu1fdb@rhs* xu1fdc@mod** xu1fff@kwd* xu1fde@exp* xu1fdf@rib xu1fe0@top?))) (if xu1fe0@top? (xude8@chi-body* (cdr xu1fd7@e*) xu1fd8@r xu1fd9@mr (cons (xub11@gen-lexical 'dummy) xu1fda@lex*) (cons (cons 'top-expr xu1feb@e) xu1fdb@rhs*) xu1fdc@mod** xu1fff@kwd* xu1fde@exp* xu1fdf@rib xu1fe0@top?) (values xu1fd7@e* xu1fd8@r xu1fd9@mr xu1fda@lex* xu1fdb@rhs* xu1fdc@mod** xu1fff@kwd* xu1fde@exp*)))))))))))))))))))))) (set! xu28c4@xude8@chi-body* xude8@chi-body*) (set! xudea@expand-transformer (lambda (xu20ef@expr xu20f0@r) (let ((xu20f3@rtc (xudf6@make-collector))) (let ((xu20f5@expanded-rhs (let ((xu20ff@xu20f8 xudf8@inv-collector) (xu2100@xu20fa xudfa@vis-collector) (xu2101@xu20fc xu20f3@rtc) (xu2102@xu20fe (lambda (xu2107@x) (values)))) (let ((xu2109@swap (lambda () (begin (let ((xu210b@t (xu20ff@xu20f8))) (begin (xu20ff@xu20f8 xu2101@xu20fc) (set! xu2101@xu20fc xu210b@t))) (let ((xu210d@t (xu2100@xu20fa))) (begin (xu2100@xu20fa xu2102@xu20fe) (set! xu2102@xu20fe xu210d@t))))))) (dynamic-wind xu2109@swap (lambda () (xudb2@chi-expr xu20ef@expr xu20f0@r xu20f0@r)) xu2109@swap))))) (begin (for-each (let ((xu210f@mark-visit (xudfa@vis-collector))) (lambda (xu2111@x) (begin (xu9a5@xu7f3@invoke-library xu2111@x) (xu210f@mark-visit xu2111@x)))) (xu20f3@rtc)) xu20f5@expanded-rhs))))) (set! xu28c5@xudea@expand-transformer xudea@expand-transformer) (set! xudec@parse-exports (lambda (xu2113@exp*) (let xu211b@f ((xu2115@exp* xu2113@exp*) (xu2116@int* '()) (xu2117@ext* '())) (if (null? xu2115@exp*) (begin (if (not (xub91@valid-bound-ids? xu2117@ext*)) (xue70@syntax-violation 'export '"invalid exports" (xudc6@find-dups xu2117@ext*)) (void)) (values (map xue76@syntax->datum xu2117@ext*) xu2116@int*)) (let ((xu211d@t (car xu2115@exp*))) (let ((xu211f@ls/false (xud90@syntax-dispatch xu211d@t '(any . #(each (any any)))))) (if xu211f@ls/false (apply (lambda (xu2121@rename xu2122@i* xu2123@e*) (begin (if (not (and (eq? (xue76@syntax->datum xu2121@rename) 'rename) (for-all xub89@id? xu2122@i*) (for-all xub89@id? xu2123@e*))) (xue70@syntax-violation 'export '"invalid export specifier" (car xu2115@exp*)) (void)) (xu211b@f (cdr xu2115@exp*) (append xu2122@i* xu2116@int*) (append xu2123@e* xu2117@ext*)))) xu211f@ls/false) (let ((xu2127@t xu211d@t)) (let ((xu2129@ls/false (xud90@syntax-dispatch xu2127@t 'any))) (if xu2129@ls/false (apply (lambda (xu212b@ie) (begin (if (not (xub89@id? xu212b@ie)) (xue70@syntax-violation 'export '"invalid export" xu212b@ie) (void)) (xu211b@f (cdr xu2115@exp*) (cons xu212b@ie xu2116@int*) (cons xu212b@ie xu2117@ext*)))) xu2129@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu2127@t))))))))))) (set! xu28c6@xudec@parse-exports xudec@parse-exports) (set! xudee@parse-library-name (lambda (xu212d@spec) (letrec* ((xu2130@parse (lambda (xu213d@x) (let ((xu213f@t xu213d@x)) (let ((xu2141@ls/false (xud90@syntax-dispatch xu213f@t '(each-any)))) (if (and xu2141@ls/false (apply (lambda (xu2143@v*) (for-all (lambda (xu2145@x) (let ((xu2147@x (xue76@syntax->datum xu2145@x))) (and (integer? xu2147@x) (exact? xu2147@x)))) xu2143@v*)) xu2141@ls/false)) (apply (lambda (xu2149@v*) (values '() (map xue76@syntax->datum xu2149@v*))) xu2141@ls/false) (let ((xu214b@t xu213f@t)) (let ((xu214d@ls/false (xud90@syntax-dispatch xu214b@t '(any . any)))) (if (and xu214d@ls/false (apply (lambda (xu214f@x xu2150@rest) (symbol? (xue76@syntax->datum xu214f@x))) xu214d@ls/false)) (apply (lambda (xu2153@x xu2154@rest) (call-with-values (lambda () (xu2130@parse xu2154@rest)) (lambda (xu215b@xu2158 xu215c@xu215a) (let ((xu215f@v* xu215c@xu215a) (xu2160@x* xu215b@xu2158)) (values (cons (xue76@syntax->datum xu2153@x) xu2160@x*) xu215f@v*))))) xu214d@ls/false) (let ((xu2163@t xu214b@t)) (let ((xu2165@ls/false (xud90@syntax-dispatch xu2163@t '()))) (if xu2165@ls/false (apply (lambda () (values '() '())) xu2165@ls/false) (let ((xu2167@t xu2163@t)) (let ((xu2169@ls/false (xud90@syntax-dispatch xu2167@t '_))) (if xu2169@ls/false (apply (lambda () (xue70@syntax-violation '#f '"invalid library name" xu212d@spec)) xu2169@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu2167@t)))))))))))))))) (call-with-values (lambda () (xu2130@parse xu212d@spec)) (lambda (xu2135@xu2132 xu2136@xu2134) (let ((xu2139@ver* xu2136@xu2134) (xu213a@name* xu2135@xu2132)) (begin (if (null? xu213a@name*) (xue70@syntax-violation '#f '"empty library name" xu212d@spec) (void)) (values xu213a@name* xu2139@ver*)))))))) (set! xu28c7@xudee@parse-library-name xudee@parse-library-name) (set! xudf0@parse-library (lambda (xu216b@e) (let ((xu216d@t xu216b@e)) (let ((xu216f@ls/false (xud90@syntax-dispatch xu216d@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and xu216f@ls/false (apply (lambda (xu2171@library xu2172@name* xu2173@export xu2174@exp* xu2175@import xu2176@imp* xu2177@b*) (and (eq? (xue76@syntax->datum xu2173@export) 'export) (eq? (xue76@syntax->datum xu2175@import) 'import) (eq? (xue76@syntax->datum xu2171@library) 'library))) xu216f@ls/false)) (apply (lambda (xu217f@library xu2180@name* xu2181@export xu2182@exp* xu2183@import xu2184@imp* xu2185@b*) (values xu2180@name* xu2182@exp* xu2184@imp* xu2185@b*)) xu216f@ls/false) (let ((xu218d@t xu216d@t)) (let ((xu218f@ls/false (xud90@syntax-dispatch xu218d@t '_))) (if xu218f@ls/false (apply (lambda () (xue70@syntax-violation '#f '"malformed library" xu216b@e)) xu218f@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu218d@t))))))))) (set! xu28c8@xudf0@parse-library xudf0@parse-library) (set! xudf2@parse-import-spec* (letrec* ((xu2192@idsyn? (lambda (xu239b@x) (symbol? (xue76@syntax->datum xu239b@x)))) (xu2194@dup-error (lambda (xu2399@name) (xue70@syntax-violation 'import '"two imports with different bindings" xu2399@name))) (xu2196@merge-substs (lambda (xu2387@s xu2388@subst) (letrec* ((xu238c@insert-to-subst (lambda (xu238d@a xu238e@subst) (let ((xu2391@name (car xu238d@a)) (xu2392@label (cdr xu238d@a))) (let ((xu2395@t (assq xu2391@name xu238e@subst))) (if xu2395@t ((lambda (xu2397@x) (if (eq? (cdr xu2397@x) xu2392@label) xu238e@subst (xu2194@dup-error xu2391@name))) xu2395@t) (cons xu238d@a xu238e@subst))))))) (if (null? xu2387@s) xu2388@subst (xu238c@insert-to-subst (car xu2387@s) (xu2196@merge-substs (cdr xu2387@s) xu2388@subst)))))) (xu2198@exclude* (lambda (xu2357@sym* xu2358@subst) (letrec* ((xu235c@exclude (lambda (xu2375@sym xu2376@subst) (if (null? xu2376@subst) (xue70@syntax-violation 'import '"cannot rename unbound identifier" xu2375@sym) (if (eq? xu2375@sym (caar xu2376@subst)) (values (cdar xu2376@subst) (cdr xu2376@subst)) (let ((xu2379@a (car xu2376@subst))) (call-with-values (lambda () (xu235c@exclude xu2375@sym (cdr xu2376@subst))) (lambda (xu237f@xu237c xu2380@xu237e) (let ((xu2383@subst xu2380@xu237e) (xu2384@old xu237f@xu237c)) (values xu2384@old (cons xu2379@a xu2383@subst))))))))))) (if (null? xu2357@sym*) (values '() xu2358@subst) (call-with-values (lambda () (xu235c@exclude (car xu2357@sym*) xu2358@subst)) (lambda (xu2361@xu235e xu2362@xu2360) (let ((xu2365@subst xu2362@xu2360) (xu2366@old xu2361@xu235e)) (call-with-values (lambda () (xu2198@exclude* (cdr xu2357@sym*) xu2365@subst)) (lambda (xu236d@xu236a xu236e@xu236c) (let ((xu2371@subst xu236e@xu236c) (xu2372@old* xu236d@xu236a)) (values (cons xu2366@old xu2372@old*) xu2371@subst))))))))))) (xu219a@find* (lambda (xu234f@sym* xu2350@subst) (map (lambda (xu2353@x) (let ((xu2355@t (assq xu2353@x xu2350@subst))) (if xu2355@t (cdr xu2355@t) (xue70@syntax-violation 'import '"cannot find identifier" xu2353@x)))) xu234f@sym*))) (xu219c@rem* (lambda (xu2347@sym* xu2348@subst) (let xu234d@f ((xu234b@subst xu2348@subst)) (if (null? xu234b@subst) '() (if (memq (caar xu234b@subst) xu2347@sym*) (xu234d@f (cdr xu234b@subst)) (cons (car xu234b@subst) (xu234d@f (cdr xu234b@subst)))))))) (xu219e@remove-dups (lambda (xu2345@ls) (if (null? xu2345@ls) '() (if (memq (car xu2345@ls) (cdr xu2345@ls)) (xu219e@remove-dups (cdr xu2345@ls)) (cons (car xu2345@ls) (xu219e@remove-dups (cdr xu2345@ls))))))) (xu21a0@parse-library-name (lambda (xu225d@spec) (letrec* ((xu2260@subversion? (lambda (xu2341@x) (let ((xu2343@x (xue76@syntax->datum xu2341@x))) (and (integer? xu2343@x) (exact? xu2343@x) (>= xu2343@x '0))))) (xu2262@subversion-pred (lambda (xu22e1@x*) (let ((xu22e3@t xu22e1@x*)) (let ((xu22e5@ls/false (xud90@syntax-dispatch xu22e3@t 'any))) (if (and xu22e5@ls/false (apply (lambda (xu22e7@n) (xu2260@subversion? xu22e7@n)) xu22e5@ls/false)) (apply (lambda (xu22e9@n) (lambda (xu22eb@x) (= xu22eb@x (xue76@syntax->datum xu22e9@n)))) xu22e5@ls/false) (let ((xu22ed@t xu22e3@t)) (let ((xu22ef@ls/false (xud90@syntax-dispatch xu22ed@t '(any . each-any)))) (if (and xu22ef@ls/false (apply (lambda (xu22f1@p? xu22f2@sub*) (eq? (xue76@syntax->datum xu22f1@p?) 'and)) xu22ef@ls/false)) (apply (lambda (xu22f5@p? xu22f6@sub*) (let ((xu22f9@p* (map xu2262@subversion-pred xu22f6@sub*))) (lambda (xu22fb@x) (for-all (lambda (xu22fd@p) (xu22fd@p xu22fb@x)) xu22f9@p*)))) xu22ef@ls/false) (let ((xu22ff@t xu22ed@t)) (let ((xu2301@ls/false (xud90@syntax-dispatch xu22ff@t '(any . each-any)))) (if (and xu2301@ls/false (apply (lambda (xu2303@p? xu2304@sub*) (eq? (xue76@syntax->datum xu2303@p?) 'or)) xu2301@ls/false)) (apply (lambda (xu2307@p? xu2308@sub*) (let ((xu230b@p* (map xu2262@subversion-pred xu2308@sub*))) (lambda (xu230d@x) (exists (lambda (xu230f@p) (xu230f@p xu230d@x)) xu230b@p*)))) xu2301@ls/false) (let ((xu2311@t xu22ff@t)) (let ((xu2313@ls/false (xud90@syntax-dispatch xu2311@t '(any any)))) (if (and xu2313@ls/false (apply (lambda (xu2315@p? xu2316@sub) (eq? (xue76@syntax->datum xu2315@p?) 'not)) xu2313@ls/false)) (apply (lambda (xu2319@p? xu231a@sub) (let ((xu231d@p (xu2262@subversion-pred xu231a@sub))) (lambda (xu231f@x) (not (xu231d@p xu231f@x))))) xu2313@ls/false) (let ((xu2321@t xu2311@t)) (let ((xu2323@ls/false (xud90@syntax-dispatch xu2321@t '(any any)))) (if (and xu2323@ls/false (apply (lambda (xu2325@p? xu2326@n) (and (eq? (xue76@syntax->datum xu2325@p?) '<=) (xu2260@subversion? xu2326@n))) xu2323@ls/false)) (apply (lambda (xu2329@p? xu232a@n) (lambda (xu232d@x) (<= xu232d@x (xue76@syntax->datum xu232a@n)))) xu2323@ls/false) (let ((xu232f@t xu2321@t)) (let ((xu2331@ls/false (xud90@syntax-dispatch xu232f@t '(any any)))) (if (and xu2331@ls/false (apply (lambda (xu2333@p? xu2334@n) (and (eq? (xue76@syntax->datum xu2333@p?) '>=) (xu2260@subversion? xu2334@n))) xu2331@ls/false)) (apply (lambda (xu2337@p? xu2338@n) (lambda (xu233b@x) (>= xu233b@x (xue76@syntax->datum xu2338@n)))) xu2331@ls/false) (let ((xu233d@t xu232f@t)) (let ((xu233f@ls/false (xud90@syntax-dispatch xu233d@t '_))) (if xu233f@ls/false (apply (lambda () (xue70@syntax-violation 'import '"invalid sub-version spec" xu225d@spec xu22e1@x*)) xu233f@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu233d@t)))))))))))))))))))))))) (xu2264@version-pred (lambda (xu2291@x*) (let ((xu2293@t xu2291@x*)) (let ((xu2295@ls/false (xud90@syntax-dispatch xu2293@t '()))) (if xu2295@ls/false (apply (lambda () (lambda (xu2297@x) '#t)) xu2295@ls/false) (let ((xu2299@t xu2293@t)) (let ((xu229b@ls/false (xud90@syntax-dispatch xu2299@t '(any . each-any)))) (if (and xu229b@ls/false (apply (lambda (xu229d@c xu229e@ver*) (eq? (xue76@syntax->datum xu229d@c) 'and)) xu229b@ls/false)) (apply (lambda (xu22a1@c xu22a2@ver*) (let ((xu22a5@p* (map xu2264@version-pred xu22a2@ver*))) (lambda (xu22a7@x) (for-all (lambda (xu22a9@p) (xu22a9@p xu22a7@x)) xu22a5@p*)))) xu229b@ls/false) (let ((xu22ab@t xu2299@t)) (let ((xu22ad@ls/false (xud90@syntax-dispatch xu22ab@t '(any . each-any)))) (if (and xu22ad@ls/false (apply (lambda (xu22af@c xu22b0@ver*) (eq? (xue76@syntax->datum xu22af@c) 'or)) xu22ad@ls/false)) (apply (lambda (xu22b3@c xu22b4@ver*) (let ((xu22b7@p* (map xu2264@version-pred xu22b4@ver*))) (lambda (xu22b9@x) (exists (lambda (xu22bb@p) (xu22bb@p xu22b9@x)) xu22b7@p*)))) xu22ad@ls/false) (let ((xu22bd@t xu22ab@t)) (let ((xu22bf@ls/false (xud90@syntax-dispatch xu22bd@t '(any any)))) (if (and xu22bf@ls/false (apply (lambda (xu22c1@c xu22c2@ver) (eq? (xue76@syntax->datum xu22c1@c) 'not)) xu22bf@ls/false)) (apply (lambda (xu22c5@c xu22c6@ver) (let ((xu22c9@p (xu2264@version-pred xu22c6@ver))) (lambda (xu22cb@x) (not (xu22c9@p xu22cb@x))))) xu22bf@ls/false) (let ((xu22cd@t xu22bd@t)) (let ((xu22cf@ls/false (xud90@syntax-dispatch xu22cd@t 'each-any))) (if xu22cf@ls/false (apply (lambda (xu22d1@sub*) (let ((xu22d3@p* (map xu2262@subversion-pred xu22d1@sub*))) (lambda (xu22d5@x) (let xu22db@f ((xu22d7@p* xu22d3@p*) (xu22d8@x xu22d5@x)) (if (null? xu22d7@p*) '#t (if (null? xu22d8@x) '#f (and ((car xu22d7@p*) (car xu22d8@x)) (xu22db@f (cdr xu22d7@p*) (cdr xu22d8@x))))))))) xu22cf@ls/false) (let ((xu22dd@t xu22cd@t)) (let ((xu22df@ls/false (xud90@syntax-dispatch xu22dd@t '_))) (if xu22df@ls/false (apply (lambda () (xue70@syntax-violation 'import '"invalid version spec" xu225d@spec xu2291@x*)) xu22df@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu22dd@t)))))))))))))))))))))) (let xu2267@f ((xu2265@x xu225d@spec)) (let ((xu2269@t xu2265@x)) (let ((xu226b@ls/false (xud90@syntax-dispatch xu2269@t '(each-any)))) (if xu226b@ls/false (apply (lambda (xu226d@version-spec*) (values '() (xu2264@version-pred xu226d@version-spec*))) xu226b@ls/false) (let ((xu226f@t xu2269@t)) (let ((xu2271@ls/false (xud90@syntax-dispatch xu226f@t '(any . any)))) (if (and xu2271@ls/false (apply (lambda (xu2273@x xu2274@x*) (xu2192@idsyn? xu2273@x)) xu2271@ls/false)) (apply (lambda (xu2277@x xu2278@x*) (call-with-values (lambda () (xu2267@f xu2278@x*)) (lambda (xu227f@xu227c xu2280@xu227e) (let ((xu2283@pred xu2280@xu227e) (xu2284@name xu227f@xu227c)) (values (cons (xue76@syntax->datum xu2277@x) xu2284@name) xu2283@pred))))) xu2271@ls/false) (let ((xu2287@t xu226f@t)) (let ((xu2289@ls/false (xud90@syntax-dispatch xu2287@t '()))) (if xu2289@ls/false (apply (lambda () (values '() (lambda (xu228b@x) '#t))) xu2289@ls/false) (let ((xu228d@t xu2287@t)) (let ((xu228f@ls/false (xud90@syntax-dispatch xu228d@t '_))) (if xu228f@ls/false (apply (lambda () (xue70@syntax-violation '#f '"invalid import spec" xu225d@spec)) xu228f@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu228d@t))))))))))))))))) (xu21a2@import-library (lambda (xu224d@spec*) (call-with-values (lambda () (xu21a0@parse-library-name xu224d@spec*)) (lambda (xu2253@xu2250 xu2254@xu2252) (let ((xu2257@pred xu2254@xu2252) (xu2258@name xu2253@xu2250)) (begin (if (null? xu2258@name) (xue70@syntax-violation 'import '"empty library name" xu224d@spec*) (void)) (let ((xu225b@lib (xu99e@xu7e5@find-library-by-name xu2258@name))) (begin (if (not xu225b@lib) (xue70@syntax-violation 'import '"cannot find library with required name" xu2258@name) (void)) (if (not (xu2257@pred (xu978@xu799@library-version xu225b@lib))) (xue70@syntax-violation 'import '"library does not satisfy version specification" xu224d@spec* xu225b@lib) (void)) ((xudfc@imp-collector) xu225b@lib) (xu980@xu7a9@library-subst xu225b@lib))))))))) (xu21a4@get-import (lambda (xu21bf@spec) (let ((xu21c1@t xu21bf@spec)) (let ((xu21c3@ls/false (xud90@syntax-dispatch xu21c1@t '(any . each-any)))) (if (and xu21c3@ls/false (apply (lambda (xu21c5@x xu21c6@x*) (not (memq (xue76@syntax->datum xu21c5@x) '(for rename except only prefix library)))) xu21c3@ls/false)) (apply (lambda (xu21c9@x xu21ca@x*) (xu21a2@import-library (cons xu21c9@x xu21ca@x*))) xu21c3@ls/false) (let ((xu21cd@t xu21c1@t)) (let ((xu21cf@ls/false (xud90@syntax-dispatch xu21cd@t '(any any . #(each (any any)))))) (if (and xu21cf@ls/false (apply (lambda (xu21d1@rename xu21d2@isp xu21d3@old* xu21d4@new*) (and (eq? (xue76@syntax->datum xu21d1@rename) 'rename) (for-all xu2192@idsyn? xu21d3@old*) (for-all xu2192@idsyn? xu21d4@new*))) xu21cf@ls/false)) (apply (lambda (xu21d9@rename xu21da@isp xu21db@old* xu21dc@new*) (let ((xu21e1@subst (xu21a4@get-import xu21da@isp)) (xu21e2@old* (map xue76@syntax->datum xu21db@old*)) (xu21e3@new* (map xue76@syntax->datum xu21dc@new*))) (let ((xu21e7@old-label* (xu219a@find* xu21e2@old* xu21e1@subst))) (let ((xu21e9@subst (xu219c@rem* xu21e2@old* xu21e1@subst))) (xu2196@merge-substs (map cons xu21e3@new* xu21e7@old-label*) xu21e9@subst))))) xu21cf@ls/false) (let ((xu21eb@t xu21cd@t)) (let ((xu21ed@ls/false (xud90@syntax-dispatch xu21eb@t '(any any . each-any)))) (if (and xu21ed@ls/false (apply (lambda (xu21ef@except xu21f0@isp xu21f1@sym*) (and (eq? (xue76@syntax->datum xu21ef@except) 'except) (for-all xu2192@idsyn? xu21f1@sym*))) xu21ed@ls/false)) (apply (lambda (xu21f5@except xu21f6@isp xu21f7@sym*) (let ((xu21fb@subst (xu21a4@get-import xu21f6@isp))) (xu219c@rem* (map xue76@syntax->datum xu21f7@sym*) xu21fb@subst))) xu21ed@ls/false) (let ((xu21fd@t xu21eb@t)) (let ((xu21ff@ls/false (xud90@syntax-dispatch xu21fd@t '(any any . each-any)))) (if (and xu21ff@ls/false (apply (lambda (xu2201@only xu2202@isp xu2203@sym*) (and (eq? (xue76@syntax->datum xu2201@only) 'only) (for-all xu2192@idsyn? xu2203@sym*))) xu21ff@ls/false)) (apply (lambda (xu2207@only xu2208@isp xu2209@sym*) (let ((xu220d@subst (xu21a4@get-import xu2208@isp)) (xu220e@sym* (map xue76@syntax->datum xu2209@sym*))) (let ((xu2211@sym* (xu219e@remove-dups xu220e@sym*))) (let ((xu2213@lab* (xu219a@find* xu2211@sym* xu220d@subst))) (map cons xu2211@sym* xu2213@lab*))))) xu21ff@ls/false) (let ((xu2215@t xu21fd@t)) (let ((xu2217@ls/false (xud90@syntax-dispatch xu2215@t '(any any any)))) (if (and xu2217@ls/false (apply (lambda (xu2219@prefix xu221a@isp xu221b@p) (and (eq? (xue76@syntax->datum xu2219@prefix) 'prefix) (xu2192@idsyn? xu221b@p))) xu2217@ls/false)) (apply (lambda (xu221f@prefix xu2220@isp xu2221@p) (let ((xu2225@subst (xu21a4@get-import xu2220@isp)) (xu2226@prefix (symbol->string (xue76@syntax->datum xu2221@p)))) (map (lambda (xu2229@x) (cons (string->symbol (string-append xu2226@prefix (symbol->string (car xu2229@x)))) (cdr xu2229@x))) xu2225@subst))) xu2217@ls/false) (let ((xu222b@t xu2215@t)) (let ((xu222d@ls/false (xud90@syntax-dispatch xu222b@t '(any each-any)))) (if (and xu222d@ls/false (apply (lambda (xu222f@library xu2230@spec*) (eq? (xue76@syntax->datum xu222f@library) 'library)) xu222d@ls/false)) (apply (lambda (xu2233@library xu2234@spec*) (xu21a2@import-library xu2234@spec*)) xu222d@ls/false) (let ((xu2237@t xu222b@t)) (let ((xu2239@ls/false (xud90@syntax-dispatch xu2237@t '(any any . any)))) (if (and xu2239@ls/false (apply (lambda (xu223b@for xu223c@isp xu223d@rest) (eq? (xue76@syntax->datum xu223b@for) 'for)) xu2239@ls/false)) (apply (lambda (xu2241@for xu2242@isp xu2243@rest) (xu21a4@get-import xu2242@isp)) xu2239@ls/false) (let ((xu2247@t xu2237@t)) (let ((xu2249@ls/false (xud90@syntax-dispatch xu2247@t 'any))) (if xu2249@ls/false (apply (lambda (xu224b@spec) (xue70@syntax-violation 'import '"invalid import spec" xu224b@spec)) xu2249@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu2247@t))))))))))))))))))))))))))) (xu21a6@add-imports! (lambda (xu21af@imp xu21b0@h) (let ((xu21b3@subst (xu21a4@get-import xu21af@imp))) (for-each (lambda (xu21b5@x) (let ((xu21b7@name (car xu21b5@x)) (xu21b8@label (cdr xu21b5@x))) (let ((xu21bb@t (hashtable-ref xu21b0@h xu21b7@name '#f))) (if xu21bb@t ((lambda (xu21bd@l) (if (not (eq? xu21bd@l xu21b8@label)) (xu2194@dup-error xu21b7@name) (void))) xu21bb@t) (hashtable-set! xu21b0@h xu21b7@name xu21b8@label))))) xu21b3@subst))))) (lambda (xu21a7@imp*) (let xu21ad@f ((xu21a9@imp* xu21a7@imp*) (xu21aa@h (make-eq-hashtable))) (if (null? xu21a9@imp*) (hashtable-entries xu21aa@h) (begin (xu21a6@add-imports! (car xu21a9@imp*) xu21aa@h) (xu21ad@f (cdr xu21a9@imp*) xu21aa@h))))))) (set! xu28c9@xudf2@parse-import-spec* xudf2@parse-import-spec*) (set! xudf4@make-top-rib (lambda (xu239d@names xu239e@labels) (let ((xu23a1@rib (xub3d@make-empty-rib))) (begin (vector-for-each (lambda (xu23a3@name xu23a4@label) (begin (if (not (symbol? xu23a3@name)) (error 'make-top-rib '"BUG: not a symbol" xu23a3@name) (void)) (xub41@extend-rib/nc! xu23a1@rib (make-simple-struct 'stx '5 (list xu23a3@name xub0d@top-mark* '() '())) xu23a4@label))) xu239d@names xu239e@labels) xu23a1@rib)))) (set! xu28ca@xudf4@make-top-rib xudf4@make-top-rib) (set! xudf6@make-collector (lambda () (let ((xu23a7@ls '())) (lambda xu23ab (let ((xu23ac (length xu23ab))) (if (= xu23ac '0) (apply (lambda () xu23a7@ls) xu23ab) (if (= xu23ac '1) (apply (lambda (xu23a9@x) (set! xu23a7@ls (xub06@set-cons xu23a9@x xu23a7@ls))) xu23ab) (error 'apply '"invalid arg count")))))))) (set! xu28cb@xudf6@make-collector xudf6@make-collector) (set! xudf8@inv-collector (xu6d9@xu5b7@make-parameter (lambda xu23ad@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (xu23af@x) (begin (if (not (procedure? xu23af@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" xu23af@x) (void)) xu23af@x)))) (set! xu28cc@xudf8@inv-collector xudf8@inv-collector) (set! xudfa@vis-collector (xu6d9@xu5b7@make-parameter (lambda xu23b1@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (xu23b3@x) (begin (if (not (procedure? xu23b3@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" xu23b3@x) (void)) xu23b3@x)))) (set! xu28cd@xudfa@vis-collector xudfa@vis-collector) (set! xudfc@imp-collector (xu6d9@xu5b7@make-parameter (lambda xu23b5@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (xu23b7@x) (begin (if (not (procedure? xu23b7@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" xu23b7@x) (void)) xu23b7@x)))) (set! xu28ce@xudfc@imp-collector xudfc@imp-collector) (set! xudfe@chi-library-internal (lambda (xu23b9@e* xu23ba@rib xu23bb@top?) (call-with-values (lambda () (xude8@chi-body* xu23b9@e* '() '() '() '() '() '() '() xu23ba@rib xu23bb@top?)) (lambda (xu23cf@xu23c0 xu23d0@xu23c2 xu23d1@xu23c4 xu23d2@xu23c6 xu23d3@xu23c8 xu23d4@xu23ca xu23d5@xu23cc xu23d6@xu23ce) (let ((xu23df@exp* xu23d6@xu23ce) (xu23e0@_kwd* xu23d5@xu23cc) (xu23e1@mod** xu23d4@xu23ca) (xu23e2@rhs* xu23d3@xu23c8) (xu23e3@lex* xu23d2@xu23c6) (xu23e4@mr xu23d1@xu23c4) (xu23e5@r xu23d0@xu23c2) (xu23e6@e* xu23cf@xu23c0)) (values (append (apply append (reverse xu23e1@mod**)) xu23e6@e*) xu23e5@r xu23e4@mr (reverse xu23e3@lex*) (reverse xu23e2@rhs*) xu23df@exp*)))))) (set! xu28cf@xudfe@chi-library-internal xudfe@chi-library-internal) (set! xue00@chi-interaction-expr (lambda (xu23ef@e xu23f0@rib xu23f1@r) (call-with-values (lambda () (xude8@chi-body* (list xu23ef@e) xu23f1@r xu23f1@r '() '() '() '() '() xu23f0@rib '#t)) (lambda (xu2405@xu23f6 xu2406@xu23f8 xu2407@xu23fa xu2408@xu23fc xu2409@xu23fe xu240a@xu2400 xu240b@xu2402 xu240c@xu2404) (let ((xu2415@_exp* xu240c@xu2404) (xu2416@_kwd* xu240b@xu2402) (xu2417@mod** xu240a@xu2400) (xu2418@rhs* xu2409@xu23fe) (xu2419@lex* xu2408@xu23fc) (xu241a@mr xu2407@xu23fa) (xu241b@r xu2406@xu23f8) (xu241c@e* xu2405@xu23f6)) (let ((xu2425@e* (xudc0@expand-interaction-rhs*/init* (reverse xu2419@lex*) (reverse xu2418@rhs*) (append (apply append (reverse xu2417@mod**)) xu241c@e*) xu241b@r xu241a@mr))) (let ((xu2427@e (if (null? xu2425@e*) (xuaef@xua50@build-void) (if (null? (cdr xu2425@e*)) (car xu2425@e*) (xuaee@xua4e@build-sequence '#f xu2425@e*))))) (values xu2427@e xu241b@r)))))))) (set! xu28d0@xue00@chi-interaction-expr xue00@chi-interaction-expr) (set! xue02@library-body-expander (lambda (xu2429@name xu242a@main-exp* xu242b@imp* xu242c@b* xu242d@top?) (letrec* ((xu2434@itc (xudf6@make-collector))) (let ((xu243d@xu2436 xudfc@imp-collector) (xu243e@xu2438 xue80@top-level-context) (xu243f@xu243a xu2434@itc) (xu2440@xu243c '#f)) (let ((xu2445@swap (lambda () (begin (let ((xu2447@t (xu243d@xu2436))) (begin (xu243d@xu2436 xu243f@xu243a) (set! xu243f@xu243a xu2447@t))) (let ((xu2449@t (xu243e@xu2438))) (begin (xu243e@xu2438 xu2440@xu243c) (set! xu2440@xu243c xu2449@t))))))) (dynamic-wind xu2445@swap (lambda () (call-with-values (lambda () (xudf2@parse-import-spec* xu242b@imp*)) (lambda (xu244f@xu244c xu2450@xu244e) (let ((xu2453@subst-labels xu2450@xu244e) (xu2454@subst-names xu244f@xu244c)) (let ((xu2457@rib (xudf4@make-top-rib xu2454@subst-names xu2453@subst-labels))) (letrec* ((xu245a@wrap (lambda (xu24d5@x) (make-simple-struct 'stx '5 (list xu24d5@x xub0d@top-mark* (list xu2457@rib) '()))))) (let ((xu245b@b* (map xu245a@wrap xu242c@b*)) (xu245c@main-exp* (map xu245a@wrap xu242a@main-exp*)) (xu245d@rtc (xudf6@make-collector)) (xu245e@vtc (xudf6@make-collector))) (let ((xu246b@xu2464 xudf8@inv-collector) (xu246c@xu2466 xudfa@vis-collector) (xu246d@xu2468 xu245d@rtc) (xu246e@xu246a xu245e@vtc)) (let ((xu2473@swap (lambda () (begin (let ((xu2475@t (xu246b@xu2464))) (begin (xu246b@xu2464 xu246d@xu2468) (set! xu246d@xu2468 xu2475@t))) (let ((xu2477@t (xu246c@xu2466))) (begin (xu246c@xu2466 xu246e@xu246a) (set! xu246e@xu246a xu2477@t))))))) (dynamic-wind xu2473@swap (lambda () (call-with-values (lambda () (xudfe@chi-library-internal xu245b@b* xu2457@rib xu242d@top?)) (lambda (xu2485@xu247a xu2486@xu247c xu2487@xu247e xu2488@xu2480 xu2489@xu2482 xu248a@xu2484) (let ((xu2491@internal-exp* xu248a@xu2484) (xu2492@rhs* xu2489@xu2482) (xu2493@lex* xu2488@xu2480) (xu2494@mr xu2487@xu247e) (xu2495@r xu2486@xu247c) (xu2496@init* xu2485@xu247a)) (call-with-values (lambda () (xudec@parse-exports (append xu245c@main-exp* xu2491@internal-exp*))) (lambda (xu24a1@xu249e xu24a2@xu24a0) (let ((xu24a5@exp-id* xu24a2@xu24a0) (xu24a6@exp-name* xu24a1@xu249e)) (begin (xub45@seal-rib! xu2457@rib) (let ((xu24a9@init* (xudae@chi-expr* xu2496@init* xu2495@r xu2494@mr))) (let ((xu24ab@rhs* (xudc2@chi-rhs* xu2492@rhs* xu2495@r xu2494@mr))) (begin (xub47@unseal-rib! xu2457@rib) (let ((xu24ad@loc* (map xub13@gen-global xu2493@lex*)) (xu24ae@export-subst (xue5a@make-export-subst xu24a6@exp-name* xu24a5@exp-id*))) (letrec* ((xu24b2@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (xue5c@make-export-env/macros xu2493@lex* xu24ad@loc* xu2495@r)) (lambda (xu24b9@xu24b4 xu24ba@xu24b6 xu24bb@xu24b8) (let ((xu24bf@macro* xu24bb@xu24b8) (xu24c0@global* xu24ba@xu24b6) (xu24c1@export-env xu24b9@xu24b4)) (begin (for-each (lambda (xu24c5@s) (let ((xu24c7@name (car xu24c5@s)) (xu24c8@label (cdr xu24c5@s))) (let ((xu24cb@p (assq xu24c8@label xu24c1@export-env))) (if xu24cb@p (let ((xu24cd@b (cdr xu24cb@p))) (let ((xu24cf@type (car xu24cd@b))) (if (eq? xu24cf@type 'mutable) (xue70@syntax-violation 'export xu24b2@errstr xu24c7@name) (void)))) (void))))) xu24ae@export-subst) (let ((xu24d1@invoke-body (xuaf4@xua5a@build-library-letrec* '#f xu2429@name xu2493@lex* xu24ad@loc* xu24ab@rhs* (if (null? xu24a9@init*) (xuaef@xua50@build-void) (xuaee@xua4e@build-sequence '#f xu24a9@init*)))) (xu24d2@invoke-definitions (map xuaeb@xu9ad@build-global-define (map cdr xu24c0@global*)))) (values (xu2434@itc) (xu245d@rtc) (xu245e@vtc) (xuaee@xua4e@build-sequence '#f (append xu24d2@invoke-definitions (list xu24d1@invoke-body))) xu24bf@macro* xu24ae@export-subst xu24c1@export-env))))))))))))))))))) xu2473@swap)))))))))) xu2445@swap)))))) (set! xu28d1@xue02@library-body-expander xue02@library-body-expander) (set! xue04@core-library-expander (lambda (xu24d7@e xu24d8@verify-name) (call-with-values (lambda () (xudf0@parse-library xu24d7@e)) (lambda (xu24e3@xu24dc xu24e4@xu24de xu24e5@xu24e0 xu24e6@xu24e2) (let ((xu24eb@b* xu24e6@xu24e2) (xu24ec@imp* xu24e5@xu24e0) (xu24ed@exp* xu24e4@xu24de) (xu24ee@name* xu24e3@xu24dc)) (call-with-values (lambda () (xudee@parse-library-name xu24ee@name*)) (lambda (xu24f7@xu24f4 xu24f8@xu24f6) (let ((xu24fb@ver xu24f8@xu24f6) (xu24fc@name xu24f7@xu24f4)) (begin (xu24d8@verify-name xu24fc@name) (call-with-values (lambda () (xue02@library-body-expander xu24fc@name xu24ed@exp* xu24ec@imp* xu24eb@b* '#f)) (lambda (xu250d@xu2500 xu250e@xu2502 xu250f@xu2504 xu2510@xu2506 xu2511@xu2508 xu2512@xu250a xu2513@xu250c) (let ((xu251b@export-env xu2513@xu250c) (xu251c@export-subst xu2512@xu250a) (xu251d@visit-code xu2511@xu2508) (xu251e@invoke-code xu2510@xu2506) (xu251f@visit-req* xu250f@xu2504) (xu2520@invoke-req* xu250e@xu2502) (xu2521@imp* xu250d@xu2500)) (values xu24fc@name xu24fb@ver xu2521@imp* xu2520@invoke-req* xu251f@visit-req* xu251e@invoke-code xu251d@visit-code xu251c@export-subst xu251b@export-env))))))))))))) (set! xu28d2@xue04@core-library-expander xue04@core-library-expander) (set! xue06@parse-top-level-program (lambda (xu2529@e*) (let ((xu252b@t xu2529@e*)) (let ((xu252d@ls/false (xud90@syntax-dispatch xu252b@t '((any . each-any) . each-any)))) (if (and xu252d@ls/false (apply (lambda (xu252f@import xu2530@imp* xu2531@b*) (eq? (xue76@syntax->datum xu252f@import) 'import)) xu252d@ls/false)) (apply (lambda (xu2535@import xu2536@imp* xu2537@b*) (values xu2536@imp* xu2537@b*)) xu252d@ls/false) (let ((xu253b@t xu252b@t)) (let ((xu253d@ls/false (xud90@syntax-dispatch xu253b@t '((any . any) . any)))) (if (and xu253d@ls/false (apply (lambda (xu253f@import xu2540@x xu2541@y) (eq? (xue76@syntax->datum xu253f@import) 'import)) xu253d@ls/false)) (apply (lambda (xu2545@import xu2546@x xu2547@y) (xue70@syntax-violation 'expander '"invalid syntax of top-level program" (xub83@syntax-car xu2529@e*))) xu253d@ls/false) (let ((xu254b@t xu253b@t)) (let ((xu254d@ls/false (xud90@syntax-dispatch xu254b@t '_))) (if xu254d@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) xu254d@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu254b@t)))))))))))) (set! xu28d3@xue06@parse-top-level-program xue06@parse-top-level-program) (set! xue08@top-level-expander (lambda (xu254f@e*) (call-with-values (lambda () (xue06@parse-top-level-program xu254f@e*)) (lambda (xu2555@xu2552 xu2556@xu2554) (let ((xu2559@b* xu2556@xu2554) (xu255a@imp* xu2555@xu2552)) (call-with-values (lambda () (xue02@library-body-expander '() '() xu255a@imp* xu2559@b* '#t)) (lambda (xu256b@xu255e xu256c@xu2560 xu256d@xu2562 xu256e@xu2564 xu256f@xu2566 xu2570@xu2568 xu2571@xu256a) (let ((xu2579@export-env xu2571@xu256a) (xu257a@export-subst xu2570@xu2568) (xu257b@visit-code xu256f@xu2566) (xu257c@invoke-code xu256e@xu2564) (xu257d@visit-req* xu256d@xu2562) (xu257e@invoke-req* xu256c@xu2560) (xu257f@imp* xu256b@xu255e)) (values xu257e@invoke-req* xu257c@invoke-code))))))))) (set! xu28d4@xue08@top-level-expander xue08@top-level-expander) (set! xue0a@rp (xu6d6@xu5b1@make-record-printer 'env (lambda (xu2587@x xu2588@p xu2589@wr) (display '"#<environment>" xu2588@p)))) (set! xu28d5@xue0a@rp xue0a@rp) (set! xue14@env? (lambda (xu258d@x) (and (simple-struct? xu258d@x) (eq? (simple-struct-name xu258d@x) 'env)))) (set! xu28d6@xue14@env? xue14@env?) (set! xue16@env-names (lambda (xu258f@x) (simple-struct-ref xu258f@x '0))) (set! xu28d7@xue16@env-names xue16@env-names) (set! xue18@set-env-names! (lambda (xu2591@x xu2592@val) (simple-struct-set! xu2591@x '0 xu2592@val))) (set! xu28d8@xue18@set-env-names! xue18@set-env-names!) (set! xue1a@env-labels (lambda (xu2595@x) (simple-struct-ref xu2595@x '1))) (set! xu28d9@xue1a@env-labels xue1a@env-labels) (set! xue1c@set-env-labels! (lambda (xu2597@x xu2598@val) (simple-struct-set! xu2597@x '1 xu2598@val))) (set! xu28da@xue1c@set-env-labels! xue1c@set-env-labels!) (set! xue1e@env-itc (lambda (xu259b@x) (simple-struct-ref xu259b@x '2))) (set! xu28db@xue1e@env-itc xue1e@env-itc) (set! xue20@set-env-itc! (lambda (xu259d@x xu259e@val) (simple-struct-set! xu259d@x '2 xu259e@val))) (set! xu28dc@xue20@set-env-itc! xue20@set-env-itc!) (set! xue22@dummy '3) (set! xu28dd@xue22@dummy xue22@dummy) (set! xue24@rp (xu6d6@xu5b1@make-record-printer 'interaction-env (lambda (xu25a1@x xu25a2@p xu25a3@wr) (display '"#<environment>" xu25a2@p)))) (set! xu28de@xue24@rp xue24@rp) (set! xue2e@interaction-env? (lambda (xu25a7@x) (and (simple-struct? xu25a7@x) (eq? (simple-struct-name xu25a7@x) 'interaction-env)))) (set! xu28df@xue2e@interaction-env? xue2e@interaction-env?) (set! xue30@interaction-env-rib (lambda (xu25a9@x) (simple-struct-ref xu25a9@x '0))) (set! xu28e0@xue30@interaction-env-rib xue30@interaction-env-rib) (set! xue32@set-interaction-env-rib! (lambda (xu25ab@x xu25ac@val) (simple-struct-set! xu25ab@x '0 xu25ac@val))) (set! xu28e1@xue32@set-interaction-env-rib! xue32@set-interaction-env-rib!) (set! xue34@interaction-env-r (lambda (xu25af@x) (simple-struct-ref xu25af@x '1))) (set! xu28e2@xue34@interaction-env-r xue34@interaction-env-r) (set! xue36@set-interaction-env-r! (lambda (xu25b1@x xu25b2@val) (simple-struct-set! xu25b1@x '1 xu25b2@val))) (set! xu28e3@xue36@set-interaction-env-r! xue36@set-interaction-env-r!) (set! xue38@interaction-env-locs (lambda (xu25b5@x) (simple-struct-ref xu25b5@x '2))) (set! xu28e4@xue38@interaction-env-locs xue38@interaction-env-locs) (set! xue3a@set-interaction-env-locs! (lambda (xu25b7@x xu25b8@val) (simple-struct-set! xu25b7@x '2 xu25b8@val))) (set! xu28e5@xue3a@set-interaction-env-locs! xue3a@set-interaction-env-locs!) (set! xue3c@dummy '3) (set! xu28e6@xue3c@dummy xue3c@dummy) (set! xue3e@interaction-environment-symbols (lambda () (xue46@environment-symbols (xue7e@interaction-environment)))) (set! xu28e7@xue3e@interaction-environment-symbols xue3e@interaction-environment-symbols) (set! xue40@environment-bindings (lambda (xu25bb@e) (vector->list (vector-map (lambda (xu25bd@name xu25be@label) (xue42@parse-binding (cons xu25bd@name (xu9a4@xu7f1@imported-label->binding xu25be@label)))) (xue16@env-names xu25bb@e) (xue1a@env-labels xu25bb@e))))) (set! xu28e8@xue40@environment-bindings xue40@environment-bindings) (set! xue42@parse-binding (lambda (xu25c1@b) (cons (car xu25c1@b) (let ((xu25c3@t (cadr xu25c1@b))) (if (memv xu25c3@t '(core-prim global)) 'procedure (if (memv xu25c3@t '(core-macro macro global-macro)) 'syntax (if (memv xu25c3@t '($core-rtd)) 'record (if (eq? (car xu25c1@b) (cadr xu25c1@b)) 'syntax 'unknown)))))))) (set! xu28e9@xue42@parse-binding xue42@parse-binding) (set! xue44@environment? (lambda (xu25c5@x) (or (xue14@env? xu25c5@x) (xue2e@interaction-env? xu25c5@x)))) (set! xu28ea@xue44@environment? xue44@environment?) (set! xue46@environment-symbols (lambda (xu25c7@x) (if (xue14@env? xu25c7@x) (vector->list (xue16@env-names xu25c7@x)) (if (xue2e@interaction-env? xu25c7@x) (map values (xub27@rib-sym* (xue30@interaction-env-rib xu25c7@x))) (assertion-violation 'environment-symbols '"not an environment" xu25c7@x))))) (set! xu28eb@xue46@environment-symbols xue46@environment-symbols) (set! xue48@environment (lambda xu25c9@imp* (let ((xu25cb@itc (xudf6@make-collector))) (let ((xu25d1@xu25ce xudfc@imp-collector) (xu25d2@xu25d0 xu25cb@itc)) (let ((xu25d5@swap (lambda () (let ((xu25d7@t (xu25d1@xu25ce))) (begin (xu25d1@xu25ce xu25d2@xu25d0) (set! xu25d2@xu25d0 xu25d7@t)))))) (dynamic-wind xu25d5@swap (lambda () (call-with-values (lambda () (xudf2@parse-import-spec* xu25c9@imp*)) (lambda (xu25dd@xu25da xu25de@xu25dc) (let ((xu25e1@subst-labels xu25de@xu25dc) (xu25e2@subst-names xu25dd@xu25da)) (make-simple-struct 'env '4 (list xu25e2@subst-names xu25e1@subst-labels xu25cb@itc)))))) xu25d5@swap)))))) (set! xu28ec@xue48@environment xue48@environment) (set! xue4a@null-environment (lambda (xu25e5@n) (begin (if (not (eqv? xu25e5@n '5)) (assertion-violation 'null-environment '"not 5" xu25e5@n) (void)) (xue48@environment '(psyntax null-environment-5))))) (set! xu28ed@xue4a@null-environment xue4a@null-environment) (set! xue4c@scheme-report-environment (lambda (xu25e7@n) (begin (if (not (eqv? xu25e7@n '5)) (assertion-violation 'scheme-report-environment '"not 5" xu25e7@n) (void)) (xue48@environment '(psyntax scheme-report-environment-5))))) (set! xu28ee@xue4c@scheme-report-environment xue4c@scheme-report-environment) (set! xue4e@expand (lambda (xu25e9@x xu25ea@env) (if (xue14@env? xu25ea@env) (let ((xu25ed@rib (xudf4@make-top-rib (xue16@env-names xu25ea@env) (xue1a@env-labels xu25ea@env)))) (let ((xu25ef@x (make-simple-struct 'stx '5 (list xu25e9@x xub0d@top-mark* (list xu25ed@rib) '()))) (xu25f0@itc (xue1e@env-itc xu25ea@env)) (xu25f1@rtc (xudf6@make-collector)) (xu25f2@vtc (xudf6@make-collector))) (let ((xu25f7@x (let ((xu2609@xu25fa xue80@top-level-context) (xu260a@xu25fc xudf8@inv-collector) (xu260b@xu25fe xudfa@vis-collector) (xu260c@xu2600 xudfc@imp-collector) (xu260d@xu2602 '#f) (xu260e@xu2604 xu25f1@rtc) (xu260f@xu2606 xu25f2@vtc) (xu2610@xu2608 xu25f0@itc)) (let ((xu2619@swap (lambda () (begin (let ((xu261b@t (xu2609@xu25fa))) (begin (xu2609@xu25fa xu260d@xu2602) (set! xu260d@xu2602 xu261b@t))) (let ((xu261d@t (xu260a@xu25fc))) (begin (xu260a@xu25fc xu260e@xu2604) (set! xu260e@xu2604 xu261d@t))) (let ((xu261f@t (xu260b@xu25fe))) (begin (xu260b@xu25fe xu260f@xu2606) (set! xu260f@xu2606 xu261f@t))) (let ((xu2621@t (xu260c@xu2600))) (begin (xu260c@xu2600 xu2610@xu2608) (set! xu2610@xu2608 xu2621@t))))))) (dynamic-wind xu2619@swap (lambda () (xudb2@chi-expr xu25ef@x '() '())) xu2619@swap))))) (begin (xub45@seal-rib! xu25ed@rib) (values xu25f7@x (xu25f1@rtc)))))) (if (xue2e@interaction-env? xu25ea@env) (let ((xu2623@rib (xue30@interaction-env-rib xu25ea@env)) (xu2624@r (xue34@interaction-env-r xu25ea@env)) (xu2625@rtc (xudf6@make-collector))) (let ((xu2629@x (make-simple-struct 'stx '5 (list xu25e9@x xub0d@top-mark* (list xu2623@rib) '())))) (call-with-values (lambda () (let ((xu263f@xu2630 xue80@top-level-context) (xu2640@xu2632 xudf8@inv-collector) (xu2641@xu2634 xudfa@vis-collector) (xu2642@xu2636 xudfc@imp-collector) (xu2643@xu2638 xu25ea@env) (xu2644@xu263a xu2625@rtc) (xu2645@xu263c (xudf6@make-collector)) (xu2646@xu263e (xudf6@make-collector))) (let ((xu264f@swap (lambda () (begin (let ((xu2651@t (xu263f@xu2630))) (begin (xu263f@xu2630 xu2643@xu2638) (set! xu2643@xu2638 xu2651@t))) (let ((xu2653@t (xu2640@xu2632))) (begin (xu2640@xu2632 xu2644@xu263a) (set! xu2644@xu263a xu2653@t))) (let ((xu2655@t (xu2641@xu2634))) (begin (xu2641@xu2634 xu2645@xu263c) (set! xu2645@xu263c xu2655@t))) (let ((xu2657@t (xu2642@xu2636))) (begin (xu2642@xu2636 xu2646@xu263e) (set! xu2646@xu263e xu2657@t))))))) (dynamic-wind xu264f@swap (lambda () (xue00@chi-interaction-expr xu2629@x xu2623@rib xu2624@r)) xu264f@swap)))) (lambda (xu2659@xu262c xu265a@xu262e) (let ((xu265d@r^ xu265a@xu262e) (xu265e@e xu2659@xu262c)) (begin (xue36@set-interaction-env-r! xu25ea@env xu265d@r^) (values xu265e@e (xu2625@rtc)))))))) (assertion-violation 'expand '"not an environment" xu25ea@env))))) (set! xu28ef@xue4e@expand xue4e@expand) (set! xue50@eval (lambda (xu2661@x xu2662@env) (begin (if (not (xue44@environment? xu2662@env)) (error 'eval '"not an environment" xu2662@env) (void)) (call-with-values (lambda () (xue4e@expand xu2661@x xu2662@env)) (lambda (xu2669@xu2666 xu266a@xu2668) (let ((xu266d@invoke-req* xu266a@xu2668) (xu266e@x xu2669@xu2666)) (begin (for-each xu9a5@xu7f3@invoke-library xu266d@invoke-req*) (eval-core (xu72f@xu6e7@expanded->core xu266e@x))))))))) (set! xu28f0@xue50@eval xue50@eval) (set! xue52@library-expander (lambda xu26df (let ((xu26e0 (length xu26df))) (if (= xu26e0 '3) (apply (lambda (xu2671@x xu2672@filename xu2673@verify-name) (letrec* ((xu2678@build-visit-code (lambda (xu26cd@macro*) (if (null? xu26cd@macro*) (xuaef@xua50@build-void) (xuaee@xua4e@build-sequence '#f (map (lambda (xu26cf@x) (let ((xu26d1@loc (car xu26cf@x)) (xu26d2@src (cddr xu26cf@x))) (list 'set! xu26d1@loc xu26d2@src))) xu26cd@macro*))))) (xu267a@visit! (lambda (xu26c5@macro*) (for-each (lambda (xu26c7@x) (let ((xu26c9@loc (car xu26c7@x)) (xu26ca@proc (cadr xu26c7@x))) (set-symbol-value! xu26c9@loc xu26ca@proc))) xu26c5@macro*)))) (call-with-values (lambda () (xue04@core-library-expander xu2671@x xu2673@verify-name)) (lambda (xu268d@xu267c xu268e@xu267e xu268f@xu2680 xu2690@xu2682 xu2691@xu2684 xu2692@xu2686 xu2693@xu2688 xu2694@xu268a xu2695@xu268c) (let ((xu269f@export-env xu2695@xu268c) (xu26a0@export-subst xu2694@xu268a) (xu26a1@macro* xu2693@xu2688) (xu26a2@invoke-code xu2692@xu2686) (xu26a3@vis* xu2691@xu2684) (xu26a4@inv* xu2690@xu2682) (xu26a5@imp* xu268f@xu2680) (xu26a6@ver xu268e@xu267e) (xu26a7@name xu268d@xu267c)) (let ((xu26b1@id (gensym)) (xu26b2@name xu26a7@name) (xu26b3@ver xu26a6@ver) (xu26b4@imp* (map xu9a9@xu7fb@library-spec xu26a5@imp*)) (xu26b5@vis* (map xu9a9@xu7fb@library-spec xu26a3@vis*)) (xu26b6@inv* (map xu9a9@xu7fb@library-spec xu26a4@inv*)) (xu26b7@visit-proc (lambda () (xu267a@visit! xu26a1@macro*))) (xu26b8@invoke-proc (lambda () (eval-core (xu72f@xu6e7@expanded->core xu26a2@invoke-code)))) (xu26b9@visit-code (xu2678@build-visit-code xu26a1@macro*)) (xu26ba@invoke-code xu26a2@invoke-code)) (begin (xu9a3@xu7ef@install-library xu26b1@id xu26b2@name xu26b3@ver xu26b4@imp* xu26b5@vis* xu26b6@inv* xu26a0@export-subst xu269f@export-env xu26b7@visit-proc xu26b8@invoke-proc xu26b9@visit-code xu26ba@invoke-code '#t xu2672@filename) (values xu26b1@id xu26b2@name xu26b3@ver xu26b4@imp* xu26b5@vis* xu26b6@inv* xu26ba@invoke-code xu26b9@visit-code xu26a0@export-subst xu269f@export-env)))))))) xu26df) (if (= xu26e0 '2) (apply (lambda (xu26d5@x xu26d6@filename) (xue52@library-expander xu26d5@x xu26d6@filename (lambda (xu26d9@x) (values)))) xu26df) (if (= xu26e0 '1) (apply (lambda (xu26db@x) (xue52@library-expander xu26db@x '#f (lambda (xu26dd@x) (values)))) xu26df) (error 'apply '"invalid arg count"))))))) (set! xu28f1@xue52@library-expander xue52@library-expander) (set! xue54@boot-library-expand (lambda (xu26e1@x) (call-with-values (lambda () (xue52@library-expander xu26e1@x)) (lambda (xu26f7@xu26e4 xu26f8@xu26e6 xu26f9@xu26e8 xu26fa@xu26ea xu26fb@xu26ec xu26fc@xu26ee xu26fd@xu26f0 xu26fe@xu26f2 xu26ff@xu26f4 xu2700@xu26f6) (let ((xu270b@export-env xu2700@xu26f6) (xu270c@export-subst xu26ff@xu26f4) (xu270d@visit-code xu26fe@xu26f2) (xu270e@invoke-code xu26fd@xu26f0) (xu270f@inv* xu26fc@xu26ee) (xu2710@vis* xu26fb@xu26ec) (xu2711@imp* xu26fa@xu26ea) (xu2712@ver xu26f9@xu26e8) (xu2713@name xu26f8@xu26e6) (xu2714@id xu26f7@xu26e4)) (values xu2713@name xu270e@invoke-code xu270c@export-subst xu270b@export-env)))))) (set! xu28f2@xue54@boot-library-expand xue54@boot-library-expand) (set! xue56@rev-map-append (lambda (xu271f@f xu2720@ls xu2721@ac) (if (null? xu2720@ls) xu2721@ac (xue56@rev-map-append xu271f@f (cdr xu2720@ls) (cons (xu271f@f (car xu2720@ls)) xu2721@ac))))) (set! xu28f3@xue56@rev-map-append xue56@rev-map-append) (set! xue58@build-exports (lambda (xu2725@lex*+loc* xu2726@init*) (xuaee@xua4e@build-sequence '#f (cons (xuaef@xua50@build-void) (xue56@rev-map-append (lambda (xu2729@x) (list 'set! (cdr xu2729@x) (car xu2729@x))) xu2725@lex*+loc* xu2726@init*))))) (set! xu28f4@xue58@build-exports xue58@build-exports) (set! xue5a@make-export-subst (lambda (xu272b@name* xu272c@id*) (map (lambda (xu272f@name xu2730@id) (let ((xu2733@label (xub9f@id->label xu2730@id))) (begin (if (not xu2733@label) (xue70@syntax-violation '#f '"cannot export unbound identifier" xu2730@id) (void)) (cons xu272f@name xu2733@label)))) xu272b@name* xu272c@id*))) (set! xu28f5@xue5a@make-export-subst xue5a@make-export-subst) (set! xue5c@make-export-env/macros (lambda (xu2735@lex* xu2736@loc* xu2737@r) (letrec* ((xu273c@lookup (lambda (xu2759@x) (let xu2761@f ((xu275b@x xu2759@x) (xu275c@lex* xu2735@lex*) (xu275d@loc* xu2736@loc*)) (if (pair? xu275c@lex*) (if (eq? xu275b@x (car xu275c@lex*)) (car xu275d@loc*) (xu2761@f xu275b@x (cdr xu275c@lex*) (cdr xu275d@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let xu2745@f ((xu273d@r xu2737@r) (xu273e@env '()) (xu273f@global* '()) (xu2740@macro* '())) (if (null? xu273d@r) (values xu273e@env xu273f@global* xu2740@macro*) (let ((xu2747@x (car xu273d@r))) (let ((xu2749@label (car xu2747@x)) (xu274a@b (cdr xu2747@x))) (let ((xu274d@t (xuba5@binding-type xu274a@b))) (if (memv xu274d@t '(lexical)) (let ((xu274f@v (xuba7@binding-value xu274a@b))) (let ((xu2751@loc (xu273c@lookup (xud1a@lexical-var xu274f@v))) (xu2752@type (if (xud1c@lexical-mutable? xu274f@v) 'mutable 'global))) (xu2745@f (cdr xu273d@r) (cons (cons* xu2749@label xu2752@type xu2751@loc) xu273e@env) (cons (cons (xud1a@lexical-var xu274f@v) xu2751@loc) xu273f@global*) xu2740@macro*))) (if (memv xu274d@t '(local-macro)) (let ((xu2755@loc (gensym))) (xu2745@f (cdr xu273d@r) (cons (cons* xu2749@label 'global-macro xu2755@loc) xu273e@env) xu273f@global* (cons (cons xu2755@loc (xuba7@binding-value xu274a@b)) xu2740@macro*))) (if (memv xu274d@t '(local-macro!)) (let ((xu2757@loc (gensym))) (xu2745@f (cdr xu273d@r) (cons (cons* xu2749@label 'global-macro! xu2757@loc) xu273e@env) xu273f@global* (cons (cons xu2757@loc (xuba7@binding-value xu274a@b)) xu2740@macro*))) (if (memv xu274d@t '($rtd $module)) (xu2745@f (cdr xu273d@r) (cons xu2747@x xu273e@env) xu273f@global* xu2740@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (xuba5@binding-type xu274a@b) (xuba7@binding-value xu274a@b)))))))))))))) (set! xu28f6@xue5c@make-export-env/macros xue5c@make-export-env/macros) (set! xue5e@generate-temporaries (lambda (xu2763@ls) (let ((xu2765@t xu2763@ls)) (let ((xu2767@ls/false (xud90@syntax-dispatch xu2765@t 'each-any))) (if xu2767@ls/false (apply (lambda (xu2769@ls) (map (lambda (xu276b@x) (make-simple-struct 'stx '5 (list (let ((xu276d@x (xue76@syntax->datum xu276b@x))) (if (or (symbol? xu276d@x) (string? xu276d@x)) (gensym xu276d@x) (gensym 't))) xub0d@top-mark* '() '()))) xu2769@ls)) xu2767@ls/false) (let ((xu276f@t xu2765@t)) (let ((xu2771@ls/false (xud90@syntax-dispatch xu276f@t '_))) (if xu2771@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) xu2771@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu276f@t))))))))) (set! xu28f7@xue5e@generate-temporaries xue5e@generate-temporaries) (set! xue60@free-identifier=? (lambda (xu2773@x xu2774@y) (if (xub89@id? xu2773@x) (if (xub89@id? xu2774@y) (xub8f@free-id=? xu2773@x xu2774@y) (assertion-violation 'free-identifier=? '"not an identifier" xu2774@y)) (assertion-violation 'free-identifier=? '"not an identifier" xu2773@x)))) (set! xu28f8@xue60@free-identifier=? xue60@free-identifier=?) (set! xue62@bound-identifier=? (lambda (xu2777@x xu2778@y) (if (xub89@id? xu2777@x) (if (xub89@id? xu2778@y) (xub8d@bound-id=? xu2777@x xu2778@y) (assertion-violation 'bound-identifier=? '"not an identifier" xu2778@y)) (assertion-violation 'bound-identifier=? '"not an identifier" xu2777@x)))) (set! xu28f9@xue62@bound-identifier=? xue62@bound-identifier=?) (set! xue64@make-source-condition (lambda (xu277b@x) (letrec* ((xu2785@xu2780 (make-record-type-descriptor '&source-information &condition-rtd 'xu2783 '#f '#f '#((immutable file-name) (immutable line)))) (xu2787@xu2782 '#f) (xu2789@xu2781 (make-record-constructor-descriptor xu2785@xu2780 &condition-rcd xu2787@xu2782)) (xu278c@xu277f (record-predicate xu2785@xu2780)) (xu278e@make-source-condition (record-constructor xu2789@xu2781)) (xu2790@xu277d (record-accessor xu2785@xu2780 '0)) (xu2792@xu277e (record-accessor xu2785@xu2780 '1)) (xu2794@source-condition? (condition-predicate xu2785@xu2780)) (xu2796@source-filename (condition-accessor xu2785@xu2780 xu2790@xu277d)) (xu2798@source-character (condition-accessor xu2785@xu2780 xu2792@xu277e))) (if (and (pair? xu277b@x) (pair? (cdr xu277b@x))) (xu278e@make-source-condition (car xu277b@x) (cadr xu277b@x)) (condition))))) (set! xu28fa@xue64@make-source-condition xue64@make-source-condition) (set! xue66@extract-position-condition (lambda (xu2799@x) (xue64@make-source-condition (xue68@expression-position xu2799@x)))) (set! xu28fb@xue66@extract-position-condition xue66@extract-position-condition) (set! xue68@expression-position (lambda (xu279b@x) (and (xub55@stx? xu279b@x) (let ((xu279d@x (xub57@stx-expr xu279b@x))) (and (xu6cd@xu59f@annotation? xu279d@x) (xu6ce@xu5a1@annotation-source xu279d@x)))))) (set! xu28fc@xue68@expression-position xue68@expression-position) (set! xue6a@assertion-error (lambda (xu279f@expr xu27a0@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list xu279f@expr)) (xue64@make-source-condition xu27a0@pos))))) (set! xu28fd@xue6a@assertion-error xue6a@assertion-error) (set! xue6c@syntax-error (lambda (xu27a3@x . xu27a5@args) (begin (if (not (for-all string? xu27a5@args)) (assertion-violation 'syntax-error '"invalid argument" xu27a5@args) (void)) (raise (condition (make-message-condition (if (null? xu27a5@args) '"invalid syntax" (apply string-append xu27a5@args))) (make-syntax-violation (xue76@syntax->datum xu27a3@x) '#f) (xue66@extract-position-condition xu27a3@x)))))) (set! xu28fe@xue6c@syntax-error xue6c@syntax-error) (set! xue6e@syntax-violation* (lambda (xu27a7@who xu27a8@msg xu27a9@form xu27aa@condition-object) (begin (if (not (string? xu27a8@msg)) (assertion-violation 'syntax-violation '"message is not a string" xu27a8@msg) (void)) (let ((xu27af@who (if (or (string? xu27a7@who) (symbol? xu27a7@who)) xu27a7@who (if (not xu27a7@who) (let ((xu27b1@t xu27a9@form)) (let ((xu27b3@ls/false (xud90@syntax-dispatch xu27b1@t 'any))) (if (and xu27b3@ls/false (apply (lambda (xu27b5@id) (xub89@id? xu27b5@id)) xu27b3@ls/false)) (apply (lambda (xu27b7@id) (xue76@syntax->datum xu27b7@id)) xu27b3@ls/false) (let ((xu27b9@t xu27b1@t)) (let ((xu27bb@ls/false (xud90@syntax-dispatch xu27b9@t '(any . any)))) (if (and xu27bb@ls/false (apply (lambda (xu27bd@id xu27be@rest) (xub89@id? xu27bd@id)) xu27bb@ls/false)) (apply (lambda (xu27c1@id xu27c2@rest) (xue76@syntax->datum xu27c1@id)) xu27bb@ls/false) (let ((xu27c5@t xu27b9@t)) (let ((xu27c7@ls/false (xud90@syntax-dispatch xu27c5@t '_))) (if xu27c7@ls/false (apply (lambda () '#f) xu27c7@ls/false) (xue70@syntax-violation '#f '"invalid syntax" xu27c5@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" xu27a7@who))))) (raise (condition (if xu27af@who (make-who-condition xu27af@who) (condition)) (make-message-condition xu27a8@msg) xu27aa@condition-object (xue66@extract-position-condition xu27a9@form))))))) (set! xu28ff@xue6e@syntax-violation* xue6e@syntax-violation*) (set! xue70@syntax-violation (lambda xu27d7 (let ((xu27d8 (length xu27d7))) (if (= xu27d8 '3) (apply (lambda (xu27c9@who xu27ca@msg xu27cb@form) (xue70@syntax-violation xu27c9@who xu27ca@msg xu27cb@form '#f)) xu27d7) (if (= xu27d8 '4) (apply (lambda (xu27cf@who xu27d0@msg xu27d1@form xu27d2@subform) (xue6e@syntax-violation* xu27cf@who xu27d0@msg xu27d1@form (make-syntax-violation (xue76@syntax->datum xu27d1@form) (xue76@syntax->datum xu27d2@subform)))) xu27d7) (error 'apply '"invalid arg count")))))) (set! xu2900@xue70@syntax-violation xue70@syntax-violation) (set! xue72@identifier? (lambda (xu27d9@x) (xub89@id? xu27d9@x))) (set! xu2901@xue72@identifier? xue72@identifier?) (set! xue74@datum->syntax (lambda (xu27db@id xu27dc@datum) (if (xub89@id? xu27db@id) (xub69@datum->stx xu27db@id xu27dc@datum) (assertion-violation 'datum->syntax '"not an identifier" xu27db@id)))) (set! xu2902@xue74@datum->syntax xue74@datum->syntax) (set! xue76@syntax->datum (lambda (xu27df@x) (xub9d@stx->datum xu27df@x))) (set! xu2903@xue76@syntax->datum xue76@syntax->datum) (set! xue78@ungensym-all (lambda (xu27e1@code) (if (pair? xu27e1@code) (cons (xue78@ungensym-all (car xu27e1@code)) (xue78@ungensym-all (cdr xu27e1@code))) (if (symbol? xu27e1@code) (ungensym xu27e1@code) xu27e1@code)))) (set! xu2904@xue78@ungensym-all xue78@ungensym-all) (set! xue7a@compile-r6rs-top-level (lambda (xu27e3@x*) (call-with-values (lambda () (xue08@top-level-expander xu27e3@x*)) (lambda (xu27e9@xu27e6 xu27ea@xu27e8) (let ((xu27ed@invoke-code xu27ea@xu27e8) (xu27ee@lib* xu27e9@xu27e6)) (lambda () (begin (for-each xu9a5@xu7f3@invoke-library xu27ee@lib*) (let ((xu27f1@expanded (xu72f@xu6e7@expanded->core xu27ed@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (xue78@ungensym-all xu27f1@expanded)) (void)) (eval-core xu27f1@expanded)))))))))) (set! xu2905@xue7a@compile-r6rs-top-level xue7a@compile-r6rs-top-level) (set! xue7c@pre-compile-r6rs-top-level (lambda (xu27f3@x*) (call-with-values (lambda () (xue08@top-level-expander xu27f3@x*)) (lambda (xu27f9@xu27f6 xu27fa@xu27f8) (let ((xu27fd@invoke-code xu27fa@xu27f8) (xu27fe@lib* xu27f9@xu27f6)) (begin (for-each xu9a5@xu7f3@invoke-library xu27fe@lib*) (xu6d7@xu5b3@compile-core (xu72f@xu6e7@expanded->core xu27fd@invoke-code)))))))) (set! xu2906@xue7c@pre-compile-r6rs-top-level xue7c@pre-compile-r6rs-top-level) (set! xue7e@interaction-environment (let ((xu2801@the-env '#f)) (lambda () (or xu2801@the-env (let ((xu2803@lib (xu99e@xu7e5@find-library-by-name '(mosh interaction))) (xu2804@rib (xub3d@make-empty-rib))) (begin (let ((xu2807@subst (xu980@xu7a9@library-subst xu2803@lib))) (begin (xub29@set-rib-sym*! xu2804@rib (map car xu2807@subst)) (xub2d@set-rib-mark**! xu2804@rib (map (lambda (xu2809@x) xub0d@top-mark*) xu2807@subst)) (xub31@set-rib-label*! xu2804@rib (map cdr xu2807@subst)))) (let ((xu280b@env (make-simple-struct 'interaction-env '4 (list xu2804@rib '() '())))) (begin (set! xu2801@the-env xu280b@env) xu280b@env)))))))) (set! xu2907@xue7e@interaction-environment xue7e@interaction-environment) (set! xue80@top-level-context (xu6d9@xu5b7@make-parameter '#f)) (set! xu2908@xue80@top-level-context xue80@top-level-context) (xu99b@xu7df@current-library-expander xue52@library-expander))
(begin (begin (xu72c@xu6e1@current-primitive-locations (lambda (xu2e6f@x) (let ((xu2e71@t (assq xu2e6f@x '((syntax-error . xu28fe@xue6c@syntax-error) (syntax-dispatch . xu289c@xud90@syntax-dispatch) (load . xu2a88@xu292f@load) (interaction-environment . xu2907@xue7e@interaction-environment) (library-path . xu993@xu7cf@library-path) (mosh-cache-dir . xu6da@xu5b9@mosh-cache-dir) (make-parameter . xu6d9@xu5b7@make-parameter) (make-variable-transformer . xu2859@xubbb@make-variable-transformer) (identifier? . xu2901@xue72@identifier?) (generate-temporaries . xu28f7@xue5e@generate-temporaries) (free-identifier=? . xu28f8@xue60@free-identifier=?) (syntax->datum . xu2903@xue76@syntax->datum) (datum->syntax . xu2902@xue74@datum->syntax) (bound-identifier=? . xu28f9@xue62@bound-identifier=?) (scheme-report-environment . xu28ee@xue4c@scheme-report-environment) (null-environment . xu28ed@xue4a@null-environment) (command-line . xu2a85@xu2929@command-line) (eval . xu28f0@xue50@eval) (environment . xu28ec@xue48@environment) (syntax-violation . xu2900@xue70@syntax-violation) (assertion-error . xu28fd@xue6a@assertion-error))))) (if xu2e71@t (cdr xu2e71@t) '#f)))) (xu9a3@xu7ef@install-library 'xu2e4c '(mosh interaction) '() '() '() '() '((regexp? . xu2e0c) (alist->eq-hash-table . xu2e08) (format . xu2e05) (string-split . xu2deb) (%start-process . xu2de4) (%call-process . xu2de3) (set-current-directory! . xu2ddf) (expand-path . xu2dde) (current-directory . xu2ddd) (%getpid . xu2ddc) (%waitpid . xu2ddb) (simple-struct-name . xu2dda) (simple-struct-set! . xu2dd9) (simple-struct-ref . xu2dd8) (make-simple-struct . xu2dd7) (simple-struct? . xu2dd6) (pointer-ref-c-int64 . xu2dd5) (pointer-ref-c-int32 . xu2dd4) (pointer-ref-c-int16 . xu2dd3) (pointer-ref-c-int8 . xu2dd2) (pointer-ref-c-uint64 . xu2dd1) (pointer-ref-c-uint32 . xu2dd0) (pointer-ref-c-uint16 . xu2dcf) (pointer-ref-c-uint8 . xu2dce) (pointer-set-c-uint64! . xu2dcd) (pointer-set-c-uint32! . xu2dcc) (pointer-set-c-uint16! . xu2dcb) (pointer-set-c-uint8! . xu2dca) (pointer-set-c-int64! . xu2dc9) (pointer-set-c-int32! . xu2dc8) (pointer-set-c-int16! . xu2dc7) (pointer-set-c-int8! . xu2dc6) (pointer-set-c-pointer! . xu2dc5) (pointer-set-c-double! . xu2dc4) (pointer-set-c-float! . xu2dc3) (pointer-set-c-long-long! . xu2dc2) (pointer-set-c-long! . xu2dc1) (pointer-set-c-int! . xu2dc0) (pointer-set-c-short! . xu2dbf) (pointer-set-c-char! . xu2dbe) (pointer-ref-c-pointer . xu2dbd) (pointer-ref-c-double . xu2dbc) (pointer-ref-c-float . xu2dbb) (pointer-ref-c-unsigned-long-long . xu2dba) (pointer-ref-c-signed-long-long . xu2db9) (pointer-ref-c-unsigned-long . xu2db8) (pointer-ref-c-signed-long . xu2db7) (pointer-ref-c-unsigned-int . xu2db6) (pointer-ref-c-signed-int . xu2db5) (pointer-ref-c-unsigned-short . xu2db4) (pointer-ref-c-signed-short . xu2db3) (pointer-ref-c-unsigned-char . xu2db2) (pointer-ref-c-signed-char . xu2db1) (pointer->integer . xu2db0) (integer->pointer . xu2daf) (pointer? . xu2dae) (shared-errno . xu2dad) (%ffi-supported? . xu2da8) (%ffi-pointer->string . xu2da7) (%ffi-call . xu2da6) (%ffi-lookup . xu2da5) (%ffi-open . xu2da4) (null-terminated-utf8->string . xu2da3) (null-terminated-bytevector->string . xu2da2) (%exec . xu2da1) (%fork . xu2da0) (%pipe . xu2d9f) (p . xu2d9c) (whereis . xu2d80) (register . xu2d7f) (vm-join! . xu2d7e) (vm-set-value! . xu2d7d) (vm? . xu2d7c) (main-vm? . xu2d7b) (vm-eval . xu2d7a) (vm-self . xu2d79) (vm-start! . xu2d78) (make-vm . xu2d77) (mutex-try-lock! . xu2d76) (mutex-unlock! . xu2d75) (mutex-lock! . xu2d74) (mutex? . xu2d73) (make-mutex . xu2d72) (condition-variable-notify-all! . xu2d71) (condition-variable-notify! . xu2d70) (condition-variable-wait! . xu2d6f) (make-condition-variable . xu2d6e) (write/ss . xu2d6d) (string-upcase . xu2d50) (string-titlecase . xu2d4f) (string-normalize-nfkd . xu2d4e) (string-normalize-nfkc . xu2d4d) (string-normalize-nfd . xu2d4c) (string-normalize-nfc . xu2d4b) (string-foldcase . xu2d4a) (string-downcase . xu2d49) (string-ci>? . xu2d48) (string-ci>=? . xu2d47) (string-ci=? . xu2d46) (string-ci<? . xu2d45) (string-ci<=? . xu2d44) (char-whitespace? . xu2d43) (char-upper-case? . xu2d42) (char-title-case? . xu2d41) (char-numeric? . xu2d40) (char-lower-case? . xu2d3f) (char-general-category . xu2d3e) (char-upcase . xu2d3d) (char-titlecase . xu2d3c) (char-foldcase . xu2d3b) (char-downcase . xu2d3a) (char-ci>? . xu2d39) (char-ci>=? . xu2d38) (char-ci=? . xu2d37) (char-ci<? . xu2d36) (char-ci<=? . xu2d35) (char-alphabetic? . xu2d34) (make-variable-transformer . xubba) (identifier? . xue71) (generate-temporaries . xue5d) (free-identifier=? . xue5f) (syntax->datum . xue75) (datum->syntax . xue73) (bound-identifier=? . xue61) (record-type-descriptor? . xu2d33) (record-predicate . xu2d32) (record-mutator . xu2d31) (record-constructor . xu2d30) (record-accessor . xu2d2f) (make-record-type-descriptor . xu2d2e) (make-record-constructor-descriptor . xu2d2d) (record? . xu2d2c) (record-type-uid . xu2d2b) (record-type-sealed? . xu2d2a) (record-type-parent . xu2d29) (record-type-opaque? . xu2d28) (record-type-name . xu2d27) (record-type-generative? . xu2d26) (record-type-field-names . xu2d25) (record-rtd . xu2d24) (record-field-mutable? . xu2d23) (delete-file . xu2d22) (file-exists? . xu2d21) (vector-sort! . xu2d20) (vector-sort . xu2d1f) (list-sort . xu2d1e) (symbol-hash . xu2d1d) (string-ci-hash . xu2d1c) (string-hash . xu2d1b) (equal-hash . xu2d1a) (hashtable-equivalence-function . xu2d19) (make-hashtable . xu2d18) (hashtable-hash-function . xu2d17) (make-eqv-hashtable . xu2d16) (make-eq-hashtable . xu2d15) (hashtable? . xu2d14) (hashtable-update! . xu2d13) (hashtable-size . xu2d12) (hashtable-set! . xu2d11) (hashtable-ref . xu2d10) (hashtable-mutable? . xu2d0f) (hashtable-keys . xu2d0e) (hashtable-entries . xu2d0d) (hashtable-delete! . xu2d0c) (hashtable-copy . xu2d0b) (hashtable-contains? . xu2d0a) (hashtable-clear! . xu2d09) (call-with-output-file . xu2d08) (call-with-input-file . xu2d07) (write-char . xu2d06) (write . xu2d05) (with-output-to-file . xu2d04) (with-input-from-file . xu2d03) (read-char . xu2d02) (read . xu2d01) (peek-char . xu2d00) (open-output-file . xu2cff) (open-input-file . xu2cfe) (newline . xu2cfd) (display . xu2cfc) (close-output-port . xu2cfb) (close-input-port . xu2cfa) (eof-object? . xu2cf9) (eof-object . xu2cf8) (current-error-port . xu2cf7) (current-output-port . xu2cf6) (current-input-port . xu2cf5) (output-port? . xu2cf4) (input-port? . xu2cf3) (utf-8-codec . xu2cf2) (utf-16-codec . xu2cf1) (transcoder-error-handling-mode . xu2cf0) (transcoder-eol-style . xu2cef) (transcoder-codec . xu2cee) (transcoded-port . xu2ced) (textual-port? . xu2cec) (string->bytevector . xu2ceb) (standard-output-port . xu2cea) (standard-input-port . xu2ce9) (standard-error-port . xu2ce8) (set-port-position! . xu2ce7) (put-u8 . xu2ce6) (put-string . xu2ce5) (put-datum . xu2ce4) (put-char . xu2ce3) (put-bytevector . xu2ce2) (port? . xu2ce1) (port-transcoder . xu2ce0) (port-position . xu2cdf) (port-has-set-port-position!? . xu2cde) (port-has-port-position? . xu2cdd) (port-eof? . xu2cdc) (output-port-buffer-mode . xu2cdb) (open-string-output-port . xu2cda) (open-string-input-port . xu2cd9) (open-file-output-port . xu2cd8) (open-file-input/output-port . xu2cd7) (open-file-input-port . xu2cd6) (open-bytevector-output-port . xu2cd5) (open-bytevector-input-port . xu2cd4) (native-transcoder . xu2cd3) (native-eol-style . xu2cd2) (make-transcoder . xu2cd1) (latin-1-codec . xu2cd0) (make-i/o-write-error . xu2ccf) (make-i/o-read-error . xu2cce) (make-i/o-port-error . xu2ccd) (make-i/o-invalid-position-error . xu2ccc) (make-i/o-filename-error . xu2ccb) (make-i/o-file-protection-error . xu2cca) (make-i/o-file-is-read-only-error . xu2cc9) (make-i/o-file-does-not-exist-error . xu2cc8) (make-i/o-file-already-exists-error . xu2cc7) (make-i/o-error . xu2cc6) (make-i/o-encoding-error . xu2cc5) (make-i/o-decoding-error . xu2cc4) (make-custom-textual-output-port . xu2cc3) (make-custom-textual-input/output-port . xu2cc2) (make-custom-textual-input-port . xu2cc1) (make-custom-binary-output-port . xu2cc0) (make-custom-binary-input/output-port . xu2cbf) (make-custom-binary-input-port . xu2cbe) (make-bytevector . xu2cbd) (lookahead-u8 . xu2cbc) (lookahead-char . xu2cbb) (i/o-write-error? . xu2cba) (i/o-read-error? . xu2cb9) (i/o-port-error? . xu2cb8) (i/o-invalid-position-error? . xu2cb7) (i/o-filename-error? . xu2cb6) (i/o-file-protection-error? . xu2cb5) (i/o-file-is-read-only-error? . xu2cb4) (i/o-file-does-not-exist-error? . xu2cb3) (i/o-file-already-exists-error? . xu2cb2) (i/o-error? . xu2cb1) (i/o-error-position . xu2cb0) (i/o-error-port . xu2caf) (i/o-error-filename . xu2cae) (i/o-encoding-error? . xu2cad) (i/o-encoding-error-char . xu2cac) (i/o-decoding-error? . xu2cab) (get-u8 . xu2caa) (get-string-n! . xu2ca9) (get-string-n . xu2ca8) (get-string-all . xu2ca7) (get-line . xu2ca6) (get-datum . xu2ca5) (get-char . xu2ca4) (get-bytevector-some . xu2ca3) (get-bytevector-n! . xu2ca2) (get-bytevector-n . xu2ca1) (get-bytevector-all . xu2ca0) (flush-output-port . xu2c9f) (close-port . xu2c9e) (exit . xu2c96) (command-line . xu2928) (string-fill! . xu2c95) (string-set! . xu2c94) (set-cdr! . xu2c93) (set-car! . xu2c92) (remove . xu2c91) (remv . xu2c90) (remp . xu2c8f) (remq . xu2c8e) (partition . xu2c8d) (memv . xu2c8c) (memq . xu2c8b) (memp . xu2c8a) (member . xu2c89) (exists . xu2c88) (for-all . xu2c87) (fold-right . xu2c86) (fold-left . xu2c85) (find . xu2c84) (filter . xu2c83) (cons* . xu2c82) (assv . xu2c81) (assq . xu2c80) (assp . xu2c7f) (assoc . xu2c7e) (call-with-string-output-port . xu2c7d) (call-with-port . xu2c7c) (call-with-bytevector-output-port . xu2c7b) (bytevector->string . xu2c7a) (buffer-mode? . xu2c79) (binary-port? . xu2c78) (with-exception-handler . xu2c77) (raise-continuable . xu2c76) (raise . xu2c75) (eval . xue4f) (environment . xue47) (make-enumeration . xu2c74) (enum-set=? . xu2c73) (enum-set-universe . xu2c72) (enum-set-union . xu2c71) (enum-set-subset? . xu2c70) (enum-set-projection . xu2c6f) (enum-set-member? . xu2c6e) (enum-set-intersection . xu2c6d) (enum-set-indexer . xu2c6c) (enum-set-difference . xu2c6b) (enum-set-constructor . xu2c6a) (enum-set-complement . xu2c69) (enum-set->list . xu2c68) (who-condition? . xu2c67) (warning? . xu2c66) (violation? . xu2c65) (undefined-violation? . xu2c64) (syntax-violation? . xu2c63) (syntax-violation-subform . xu2c62) (syntax-violation-form . xu2c61) (syntax-violation . xue6f) (simple-conditions . xu2c60) (serious-condition? . xu2c5f) (non-continuable-violation? . xu2c5e) (message-condition? . xu2c5d) (make-who-condition . xu2c5c) (make-warning . xu2c5b) (make-violation . xu2c5a) (make-undefined-violation . xu2c59) (make-syntax-violation . xu2c58) (make-serious-condition . xu2c57) (make-non-continuable-violation . xu2c56) (make-message-condition . xu2c55) (make-lexical-violation . xu2c54) (make-irritants-condition . xu2c53) (make-implementation-restriction-violation . xu2c52) (make-error . xu2c51) (make-assertion-violation . xu2c50) (lexical-violation? . xu2c4f) (irritants-condition? . xu2c4e) (implementation-restriction-violation? . xu2c4d) (error? . xu2c4c) (condition-who . xu2c4b) (condition-predicate . xu2c4a) (condition-message . xu2c49) (condition-irritants . xu2c48) (condition-accessor . xu2c47) (condition . xu2c46) (assertion-violation? . xu2c45) (condition? . xu2c44) (utf32->string . xu2c43) (utf16->string . xu2c42) (utf8->string . xu2c41) (uint-list->bytevector . xu2c40) (u8-list->bytevector . xu2c3f) (string->utf8 . xu2c3e) (string->utf32 . xu2c3d) (string->utf16 . xu2c3c) (sint-list->bytevector . xu2c3b) (native-endianness . xu2c3a) (bytevector? . xu2c39) (bytevector=? . xu2c38) (bytevector-uint-set! . xu2c37) (bytevector-uint-ref . xu2c36) (bytevector-u8-set! . xu2c35) (bytevector-u8-ref . xu2c34) (bytevector-u64-set! . xu2c33) (bytevector-u64-ref . xu2c32) (bytevector-u64-native-set! . xu2c31) (bytevector-u64-native-ref . xu2c30) (bytevector-u32-set! . xu2c2f) (bytevector-u32-ref . xu2c2e) (bytevector-u32-native-set! . xu2c2d) (bytevector-u32-native-ref . xu2c2c) (bytevector-u16-set! . xu2c2b) (bytevector-u16-ref . xu2c2a) (bytevector-u16-native-set! . xu2c29) (bytevector-u16-native-ref . xu2c28) (bytevector-sint-set! . xu2c27) (bytevector-sint-ref . xu2c26) (bytevector-s8-set! . xu2c25) (bytevector-s8-ref . xu2c24) (bytevector-s64-set! . xu2c23) (bytevector-s64-ref . xu2c22) (bytevector-s64-native-set! . xu2c21) (bytevector-s64-native-ref . xu2c20) (bytevector-s32-set! . xu2c1f) (bytevector-s32-ref . xu2c1e) (bytevector-s32-native-set! . xu2c1d) (bytevector-s32-native-ref . xu2c1c) (bytevector-s16-set! . xu2c1b) (bytevector-s16-ref . xu2c1a) (bytevector-s16-native-set! . xu2c19) (bytevector-s16-native-ref . xu2c18) (bytevector-length . xu2c17) (bytevector-ieee-single-ref . xu2c16) (bytevector-ieee-single-set! . xu2c15) (bytevector-ieee-single-native-set! . xu2c14) (bytevector-ieee-single-native-ref . xu2c13) (bytevector-ieee-double-set! . xu2c12) (bytevector-ieee-double-ref . xu2c11) (bytevector-ieee-double-native-set! . xu2c10) (bytevector-ieee-double-native-ref . xu2c0f) (bytevector-fill! . xu2c0e) (bytevector-copy! . xu2c0d) (bytevector-copy . xu2c0c) (bytevector->uint-list . xu2c0b) (bytevector->u8-list . xu2c0a) (bytevector->sint-list . xu2c09) (no-nans-violation? . xu2c08) (no-infinities-violation? . xu2c07) (make-no-nans-violation . xu2c06) (make-no-infinities-violation . xu2c05) (real->flonum . xu2c04) (flzero? . xu2c03) (fltruncate . xu2c02) (fltan . xu2c01) (flsqrt . xu2c00) (flsin . xu2bff) (flround . xu2bfe) (flpositive? . xu2bfd) (flonum? . xu2bfc) (flodd? . xu2bfb) (flnumerator . xu2bfa) (flnegative? . xu2bf9) (flnan? . xu2bf8) (flmod0 . xu2bf7) (flmod . xu2bf6) (flmin . xu2bf5) (flmax . xu2bf4) (fllog . xu2bf3) (flinteger? . xu2bf2) (flinfinite? . xu2bf1) (flfloor . xu2bf0) (flfinite? . xu2bef) (flexpt . xu2bee) (flexp . xu2bed) (fleven? . xu2bec) (fldiv0-and-mod0 . xu2beb) (fldiv0 . xu2bea) (fldiv-and-mod . xu2be9) (fldiv . xu2be8) (fldenominator . xu2be7) (flcos . xu2be6) (flceiling . xu2be5) (flatan . xu2be4) (flasin . xu2be3) (flacos . xu2be2) (flabs . xu2be1) (fl>? . xu2be0) (fl>=? . xu2bdf) (fl=? . xu2bde) (fl<? . xu2bdd) (fl<=? . xu2bdc) (fl/ . xu2bdb) (fl- . xu2bda) (fl+ . xu2bd9) (fl* . xu2bd8) (fixnum->flonum . xu2bd7) (fxzero? . xu2bd6) (fxxor . xu2bd5) (fxrotate-bit-field . xu2bd4) (fxreverse-bit-field . xu2bd3) (fxpositive? . xu2bd2) (fxodd? . xu2bd1) (fxnot . xu2bd0) (fxnegative? . xu2bcf) (fxmod0 . xu2bce) (fxmod . xu2bcd) (fxmin . xu2bcc) (fxmax . xu2bcb) (fxlength . xu2bca) (fxior . xu2bc9) (fxif . xu2bc8) (fxfirst-bit-set . xu2bc7) (fxeven? . xu2bc6) (fxdiv0-and-mod0 . xu2bc5) (fxdiv0 . xu2bc4) (fxdiv-and-mod . xu2bc3) (fxdiv . xu2bc2) (fxcopy-bit-field . xu2bc1) (fxcopy-bit . xu2bc0) (fxbit-set? . xu2bbf) (fxbit-field . xu2bbe) (fxbit-count . xu2bbd) (fxarithmetic-shift-right . xu2bbc) (fxarithmetic-shift-left . xu2bbb) (fxarithmetic-shift . xu2bba) (fxand . xu2bb9) (fx>? . xu2bb8) (fx>=? . xu2bb7) (fx=? . xu2bb6) (fx<? . xu2bb5) (fx<=? . xu2bb4) (fx-/carry . xu2bb3) (fx- . xu2bb2) (fx+/carry . xu2bb1) (fx+ . xu2bb0) (fx*/carry . xu2baf) (fx* . xu2bae) (greatest-fixnum . xu2bad) (least-fixnum . xu2bac) (fixnum-width . xu2bab) (fixnum? . xu2baa) (bitwise-rotate-bit-field . xu2ba9) (bitwise-reverse-bit-field . xu2ba8) (bitwise-length . xu2ba7) (bitwise-if . xu2ba6) (bitwise-first-bit-set . xu2ba5) (bitwise-copy-bit-field . xu2ba4) (bitwise-copy-bit . xu2ba3) (bitwise-bit-set? . xu2ba2) (bitwise-bit-field . xu2ba1) (bitwise-bit-count . xu2ba0) (bitwise-xor . xu2b9f) (bitwise-ior . xu2b9e) (bitwise-and . xu2b9d) (bitwise-not . xu2b9c) (bitwise-arithmetic-shift-right . xu2b9b) (bitwise-arithmetic-shift-left . xu2b9a) (bitwise-arithmetic-shift . xu2b99) (zero? . xu2b98) (vector? . xu2b97) (vector-set! . xu2b96) (vector-ref . xu2b95) (vector-map . xu2b94) (vector-length . xu2b93) (vector-for-each . xu2b92) (vector-fill! . xu2b91) (vector->list . xu2b90) (vector . xu2b8f) (values . xu2b8e) (truncate . xu2b8d) (tan . xu2b8c) (symbol? . xu2b8b) (symbol=? . xu2b8a) (symbol->string . xu2b89) (substring . xu2b88) (string? . xu2b87) (string>? . xu2b86) (string>=? . xu2b85) (string=? . xu2b84) (string<? . xu2b83) (string<=? . xu2b82) (string-ref . xu2b81) (string-length . xu2b80) (string-for-each . xu2b7f) (string-copy . xu2b7e) (string-append . xu2b7d) (string->symbol . xu2b7c) (string->number . xu2b7b) (string->list . xu2b7a) (string . xu2b79) (sqrt . xu2b78) (sin . xu2b77) (round . xu2b76) (reverse . xu2b75) (real? . xu2b74) (real-valued? . xu2b73) (real-part . xu2b72) (rationalize . xu2b71) (rational? . xu2b70) (rational-valued? . xu2b6f) (procedure? . xu2b6e) (positive? . xu2b6d) (pair? . xu2b6c) (odd? . xu2b6b) (numerator . xu2b6a) (number? . xu2b69) (number->string . xu2b68) (null? . xu2b67) (not . xu2b66) (negative? . xu2b65) (nan? . xu2b64) (min . xu2b63) (max . xu2b62) (map . xu2b61) (make-vector . xu2b60) (make-string . xu2b5f) (make-rectangular . xu2b5e) (make-polar . xu2b5d) (magnitude . xu2b5c) (log . xu2b5b) (list? . xu2b5a) (list-tail . xu2b59) (list-ref . xu2b58) (list->vector . xu2b57) (list->string . xu2b56) (list . xu2b55) (length . xu2b54) (lcm . xu2b53) (integer? . xu2b52) (integer-valued? . xu2b51) (integer->char . xu2b50) (infinite? . xu2b4f) (inexact? . xu2b4e) (inexact . xu2b4d) (imag-part . xu2b4c) (gcd . xu2b4b) (for-each . xu2b4a) (floor . xu2b49) (finite? . xu2b48) (expt . xu2b47) (exp . xu2b46) (exact? . xu2b45) (exact-integer-sqrt . xu2b44) (exact . xu2b43) (even? . xu2b42) (error . xu2b41) (eqv? . xu2b40) (equal? . xu2b3f) (eq? . xu2b3e) (dynamic-wind . xu2b3d) (div0-and-mod0 . xu2b3c) (mod0 . xu2b3b) (div0 . xu2b3a) (div-and-mod . xu2b39) (mod . xu2b38) (div . xu2b37) (denominator . xu2b36) (cos . xu2b35) (cons . xu2b34) (complex? . xu2b33) (char? . xu2b32) (char>? . xu2b31) (char>=? . xu2b30) (char=? . xu2b2f) (char<? . xu2b2e) (char<=? . xu2b2d) (char->integer . xu2b2c) (ceiling . xu2b2b) (call-with-values . xu2b2a) (call/cc . xu2b29) (call-with-current-continuation . xu2b28) (cddddr . xu2b27) (cdddar . xu2b26) (cddadr . xu2b25) (cddaar . xu2b24) (cdaddr . xu2b23) (cdadar . xu2b22) (cdaadr . xu2b21) (cdaaar . xu2b20) (cadddr . xu2b1f) (caddar . xu2b1e) (cadadr . xu2b1d) (cadaar . xu2b1c) (caaddr . xu2b1b) (caadar . xu2b1a) (caaadr . xu2b19) (caaaar . xu2b18) (cdddr . xu2b17) (cddar . xu2b16) (cdadr . xu2b15) (cdaar . xu2b14) (caddr . xu2b13) (cadar . xu2b12) (caadr . xu2b11) (caaar . xu2b10) (cddr . xu2b0f) (cdar . xu2b0e) (cadr . xu2b0d) (caar . xu2b0c) (cdr . xu2b0b) (car . xu2b0a) (boolean? . xu2b09) (boolean=? . xu2b08) (atan . xu2b07) (assertion-violation . xu2b06) (asin . xu2b05) (apply . xu2b04) (append . xu2b03) (angle . xu2b02) (acos . xu2b01) (abs . xu2b00) (/ . xu2aff) (* . xu2afe) (- . xu2afd) (+ . xu2afc) (>= . xu2afb) (> . xu2afa) (= . xu2af9) (<= . xu2af8) (< . xu2af7) (library . xu2af6) (&no-nans . xu2af5) (&no-infinities . xu2af4) (&i/o-encoding . xu2af3) (&i/o-decoding . xu2af2) (&i/o-port . xu2af1) (&i/o-file-does-not-exist . xu2af0) (&i/o-file-already-exists . xu2aef) (&i/o-file-is-read-only . xu2aee) (&i/o-file-protection . xu2aed) (&i/o-filename . xu2aec) (&i/o-invalid-position . xu2aeb) (&i/o-write . xu2aea) (&i/o-read . xu2ae9) (&i/o . xu2ae8) (&undefined . xu2ae7) (&syntax . xu2ae6) (&lexical . xu2ae5) (&implementation-restriction . xu2ae4) (&non-continuable . xu2ae3) (&who . xu2ae2) (&irritants . xu2ae1) (&assertion . xu2ae0) (&violation . xu2adf) (&error . xu2ade) (&serious . xu2add) (&warning . xu2adc) (&message . xu2adb) (&condition . xu2ada) (define-condition-type . xu2ad9) (define-enumeration . xu2ad8) (define-record-type . xu2ad7) (parent-rtd . xu2ad6) (nongenerative . xu2ad5) (opaque . xu2ad4) (sealed . xu2ad3) (protocol . xu2ad2) (parent . xu2ad1) (immutable . xu2ad0) (mutable . xu2acf) (fields . xu2ace) (error-handling-mode . xu2acd) (file-options . xu2acc) (buffer-mode . xu2acb) (eol-style . xu2aca) (guard . xu2ac9) (unsyntax-splicing . xu2ac6) (unsyntax . xu2ac5) (unquote-splicing . xu2ac4) (unquote . xu2ac3) (_ . xu2ac2) (else . xu2ac1) (=> . xu2ac0) (... . xu2abf) (assert . xu2abe) (endianness . xu2abd) (time . xu2abb) (do . xu2aba) (cond . xu2ab9) (let* . xu2ab8) (let*-values . xu2ab7) (let-values . xu2ab6) (identifier-syntax . xu2ab5) (with-syntax . xu2ab4) (quasisyntax . xu2ab3) (quasiquote . xu2ab2) (syntax-rules . xu2ab1) (include . xu2ab0) (record-constructor-descriptor . xu2aae) (record-type-descriptor . xu2aad) (case . xu2aac) (unless . xu2aaa) (when . xu2aa9) (or . xu2aa8) (and . xu2aa7) (if . xu2aa6) (let . xu2aa5) (letrec* . xu2aa4) (letrec . xu2aa3) (case-lambda . xu2aa1) (lambda . xu2aa0) (syntax . xu2a9f) (syntax-case . xu2a9e) (quote . xu2a9d) (letrec-syntax . xu2a9b) (let-syntax . xu2a9a) (set! . xu2a99) (import . xu2a98) (begin . xu2a97) (define-syntax . xu2a95) (define . xu2a94)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e4d '(psyntax null-environment-5) '() '() '() '() '((make-promise . xu2c97) (unquote-splicing . xu2ac4) (unquote . xu2ac3) (_ . xu2ac2) (else . xu2ac1) (=> . xu2ac0) (... . xu2abf) (delay . xu2abc) (do . xu2aba) (cond . xu2ab9) (let* . xu2ab8) (quasiquote . xu2ab2) (syntax-rules . xu2ab1) (case . xu2aac) (or . xu2aa8) (and . xu2aa7) (if . xu2aa6) (let . xu2aa5) (letrec . xu2aa3) (lambda . xu2aa0) (quote . xu2a9d) (letrec-syntax . xu2a9b) (let-syntax . xu2a9a) (set! . xu2a99) (begin . xu2a97) (define-syntax . xu2a95) (define . xu2a94)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e4e '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . xu2d48) (string-ci>=? . xu2d47) (string-ci=? . xu2d46) (string-ci<? . xu2d45) (string-ci<=? . xu2d44) (char-whitespace? . xu2d43) (char-upper-case? . xu2d42) (char-numeric? . xu2d40) (char-lower-case? . xu2d3f) (char-upcase . xu2d3d) (char-downcase . xu2d3a) (char-ci>? . xu2d39) (char-ci>=? . xu2d38) (char-ci=? . xu2d37) (char-ci<? . xu2d36) (char-ci<=? . xu2d35) (char-alphabetic? . xu2d34) (call-with-output-file . xu2d08) (call-with-input-file . xu2d07) (write-char . xu2d06) (write . xu2d05) (with-output-to-file . xu2d04) (with-input-from-file . xu2d03) (read-char . xu2d02) (read . xu2d01) (peek-char . xu2d00) (open-output-file . xu2cff) (open-input-file . xu2cfe) (newline . xu2cfd) (display . xu2cfc) (close-output-port . xu2cfb) (close-input-port . xu2cfa) (eof-object . xu2cf8) (current-output-port . xu2cf6) (current-input-port . xu2cf5) (output-port? . xu2cf4) (input-port? . xu2cf3) (scheme-report-environment . xue4b) (quotient . xu2c9d) (null-environment . xue49) (remainder . xu2c9c) (modulo . xu2c9b) (inexact->exact . xu2c9a) (force . xu2c99) (exact->inexact . xu2c98) (make-promise . xu2c97) (string-fill! . xu2c95) (string-set! . xu2c94) (set-cdr! . xu2c93) (set-car! . xu2c92) (memv . xu2c8c) (memq . xu2c8b) (member . xu2c89) (assv . xu2c81) (assq . xu2c80) (assoc . xu2c7e) (eval . xue4f) (zero? . xu2b98) (vector? . xu2b97) (vector-set! . xu2b96) (vector-ref . xu2b95) (vector-length . xu2b93) (vector-fill! . xu2b91) (vector->list . xu2b90) (vector . xu2b8f) (values . xu2b8e) (truncate . xu2b8d) (tan . xu2b8c) (symbol? . xu2b8b) (symbol->string . xu2b89) (substring . xu2b88) (string? . xu2b87) (string>? . xu2b86) (string>=? . xu2b85) (string=? . xu2b84) (string<? . xu2b83) (string<=? . xu2b82) (string-ref . xu2b81) (string-length . xu2b80) (string-copy . xu2b7e) (string-append . xu2b7d) (string->symbol . xu2b7c) (string->number . xu2b7b) (string->list . xu2b7a) (string . xu2b79) (sqrt . xu2b78) (sin . xu2b77) (round . xu2b76) (reverse . xu2b75) (real? . xu2b74) (real-part . xu2b72) (rationalize . xu2b71) (rational? . xu2b70) (procedure? . xu2b6e) (positive? . xu2b6d) (pair? . xu2b6c) (odd? . xu2b6b) (numerator . xu2b6a) (number? . xu2b69) (number->string . xu2b68) (not . xu2b66) (negative? . xu2b65) (min . xu2b63) (max . xu2b62) (map . xu2b61) (make-vector . xu2b60) (make-string . xu2b5f) (make-rectangular . xu2b5e) (make-polar . xu2b5d) (magnitude . xu2b5c) (log . xu2b5b) (list? . xu2b5a) (list-tail . xu2b59) (list-ref . xu2b58) (list->vector . xu2b57) (list->string . xu2b56) (list . xu2b55) (length . xu2b54) (lcm . xu2b53) (integer? . xu2b52) (integer->char . xu2b50) (inexact? . xu2b4e) (imag-part . xu2b4c) (gcd . xu2b4b) (for-each . xu2b4a) (floor . xu2b49) (expt . xu2b47) (exp . xu2b46) (exact? . xu2b45) (even? . xu2b42) (eqv? . xu2b40) (equal? . xu2b3f) (eq? . xu2b3e) (dynamic-wind . xu2b3d) (denominator . xu2b36) (cos . xu2b35) (cons . xu2b34) (complex? . xu2b33) (char? . xu2b32) (char>? . xu2b31) (char>=? . xu2b30) (char=? . xu2b2f) (char<? . xu2b2e) (char<=? . xu2b2d) (char->integer . xu2b2c) (ceiling . xu2b2b) (call-with-values . xu2b2a) (call-with-current-continuation . xu2b28) (cddddr . xu2b27) (cdddar . xu2b26) (cddadr . xu2b25) (cddaar . xu2b24) (cdaddr . xu2b23) (cdadar . xu2b22) (cdaadr . xu2b21) (cdaaar . xu2b20) (cadddr . xu2b1f) (caddar . xu2b1e) (cadadr . xu2b1d) (cadaar . xu2b1c) (caaddr . xu2b1b) (caadar . xu2b1a) (caaadr . xu2b19) (caaaar . xu2b18) (cdddr . xu2b17) (cddar . xu2b16) (cdadr . xu2b15) (cdaar . xu2b14) (caddr . xu2b13) (cadar . xu2b12) (caadr . xu2b11) (caaar . xu2b10) (cddr . xu2b0f) (cdar . xu2b0e) (cadr . xu2b0d) (caar . xu2b0c) (cdr . xu2b0b) (car . xu2b0a) (boolean? . xu2b09) (atan . xu2b07) (asin . xu2b05) (apply . xu2b04) (append . xu2b03) (angle . xu2b02) (acos . xu2b01) (abs . xu2b00) (/ . xu2aff) (* . xu2afe) (- . xu2afd) (+ . xu2afc) (>= . xu2afb) (> . xu2afa) (= . xu2af9) (<= . xu2af8) (< . xu2af7) (unquote-splicing . xu2ac4) (unquote . xu2ac3) (else . xu2ac1) (=> . xu2ac0) (... . xu2abf) (delay . xu2abc) (do . xu2aba) (cond . xu2ab9) (let* . xu2ab8) (quasiquote . xu2ab2) (syntax-rules . xu2ab1) (case . xu2aac) (or . xu2aa8) (and . xu2aa7) (if . xu2aa6) (let . xu2aa5) (letrec . xu2aa3) (lambda . xu2aa0) (quote . xu2a9d) (letrec-syntax . xu2a9b) (let-syntax . xu2a9a) (set! . xu2a99) (begin . xu2a97) (define-syntax . xu2a95) (define . xu2a94)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e4f '(psyntax modules) '() '() '() '() '((module . xu2a96)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e50 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e51 '(rnrs) '(6) '() '() '() '((regexp? . xu2e0c) (string-upcase . xu2d50) (string-titlecase . xu2d4f) (string-normalize-nfkd . xu2d4e) (string-normalize-nfkc . xu2d4d) (string-normalize-nfd . xu2d4c) (string-normalize-nfc . xu2d4b) (string-foldcase . xu2d4a) (string-downcase . xu2d49) (string-ci>? . xu2d48) (string-ci>=? . xu2d47) (string-ci=? . xu2d46) (string-ci<? . xu2d45) (string-ci<=? . xu2d44) (char-whitespace? . xu2d43) (char-upper-case? . xu2d42) (char-title-case? . xu2d41) (char-numeric? . xu2d40) (char-lower-case? . xu2d3f) (char-general-category . xu2d3e) (char-upcase . xu2d3d) (char-titlecase . xu2d3c) (char-foldcase . xu2d3b) (char-downcase . xu2d3a) (char-ci>? . xu2d39) (char-ci>=? . xu2d38) (char-ci=? . xu2d37) (char-ci<? . xu2d36) (char-ci<=? . xu2d35) (char-alphabetic? . xu2d34) (make-variable-transformer . xubba) (identifier? . xue71) (generate-temporaries . xue5d) (free-identifier=? . xue5f) (syntax->datum . xue75) (datum->syntax . xue73) (bound-identifier=? . xue61) (record-type-descriptor? . xu2d33) (record-predicate . xu2d32) (record-mutator . xu2d31) (record-constructor . xu2d30) (record-accessor . xu2d2f) (make-record-type-descriptor . xu2d2e) (make-record-constructor-descriptor . xu2d2d) (record? . xu2d2c) (record-type-uid . xu2d2b) (record-type-sealed? . xu2d2a) (record-type-parent . xu2d29) (record-type-opaque? . xu2d28) (record-type-name . xu2d27) (record-type-generative? . xu2d26) (record-type-field-names . xu2d25) (record-rtd . xu2d24) (record-field-mutable? . xu2d23) (delete-file . xu2d22) (file-exists? . xu2d21) (vector-sort! . xu2d20) (vector-sort . xu2d1f) (list-sort . xu2d1e) (symbol-hash . xu2d1d) (string-ci-hash . xu2d1c) (string-hash . xu2d1b) (equal-hash . xu2d1a) (hashtable-equivalence-function . xu2d19) (make-hashtable . xu2d18) (hashtable-hash-function . xu2d17) (make-eqv-hashtable . xu2d16) (make-eq-hashtable . xu2d15) (hashtable? . xu2d14) (hashtable-update! . xu2d13) (hashtable-size . xu2d12) (hashtable-set! . xu2d11) (hashtable-ref . xu2d10) (hashtable-mutable? . xu2d0f) (hashtable-keys . xu2d0e) (hashtable-entries . xu2d0d) (hashtable-delete! . xu2d0c) (hashtable-copy . xu2d0b) (hashtable-contains? . xu2d0a) (hashtable-clear! . xu2d09) (call-with-output-file . xu2d08) (call-with-input-file . xu2d07) (write-char . xu2d06) (write . xu2d05) (with-output-to-file . xu2d04) (with-input-from-file . xu2d03) (read-char . xu2d02) (read . xu2d01) (peek-char . xu2d00) (open-output-file . xu2cff) (open-input-file . xu2cfe) (newline . xu2cfd) (display . xu2cfc) (close-output-port . xu2cfb) (close-input-port . xu2cfa) (eof-object? . xu2cf9) (eof-object . xu2cf8) (current-error-port . xu2cf7) (current-output-port . xu2cf6) (current-input-port . xu2cf5) (output-port? . xu2cf4) (input-port? . xu2cf3) (utf-8-codec . xu2cf2) (utf-16-codec . xu2cf1) (transcoder-error-handling-mode . xu2cf0) (transcoder-eol-style . xu2cef) (transcoder-codec . xu2cee) (transcoded-port . xu2ced) (textual-port? . xu2cec) (string->bytevector . xu2ceb) (standard-output-port . xu2cea) (standard-input-port . xu2ce9) (standard-error-port . xu2ce8) (set-port-position! . xu2ce7) (put-u8 . xu2ce6) (put-string . xu2ce5) (put-datum . xu2ce4) (put-char . xu2ce3) (put-bytevector . xu2ce2) (port? . xu2ce1) (port-transcoder . xu2ce0) (port-position . xu2cdf) (port-has-set-port-position!? . xu2cde) (port-has-port-position? . xu2cdd) (port-eof? . xu2cdc) (output-port-buffer-mode . xu2cdb) (open-string-output-port . xu2cda) (open-string-input-port . xu2cd9) (open-file-output-port . xu2cd8) (open-file-input/output-port . xu2cd7) (open-file-input-port . xu2cd6) (open-bytevector-output-port . xu2cd5) (open-bytevector-input-port . xu2cd4) (native-transcoder . xu2cd3) (native-eol-style . xu2cd2) (make-transcoder . xu2cd1) (latin-1-codec . xu2cd0) (make-i/o-write-error . xu2ccf) (make-i/o-read-error . xu2cce) (make-i/o-port-error . xu2ccd) (make-i/o-invalid-position-error . xu2ccc) (make-i/o-filename-error . xu2ccb) (make-i/o-file-protection-error . xu2cca) (make-i/o-file-is-read-only-error . xu2cc9) (make-i/o-file-does-not-exist-error . xu2cc8) (make-i/o-file-already-exists-error . xu2cc7) (make-i/o-error . xu2cc6) (make-i/o-encoding-error . xu2cc5) (make-i/o-decoding-error . xu2cc4) (make-custom-textual-output-port . xu2cc3) (make-custom-textual-input/output-port . xu2cc2) (make-custom-textual-input-port . xu2cc1) (make-custom-binary-output-port . xu2cc0) (make-custom-binary-input/output-port . xu2cbf) (make-custom-binary-input-port . xu2cbe) (make-bytevector . xu2cbd) (lookahead-u8 . xu2cbc) (lookahead-char . xu2cbb) (i/o-write-error? . xu2cba) (i/o-read-error? . xu2cb9) (i/o-port-error? . xu2cb8) (i/o-invalid-position-error? . xu2cb7) (i/o-filename-error? . xu2cb6) (i/o-file-protection-error? . xu2cb5) (i/o-file-is-read-only-error? . xu2cb4) (i/o-file-does-not-exist-error? . xu2cb3) (i/o-file-already-exists-error? . xu2cb2) (i/o-error? . xu2cb1) (i/o-error-position . xu2cb0) (i/o-error-port . xu2caf) (i/o-error-filename . xu2cae) (i/o-encoding-error? . xu2cad) (i/o-encoding-error-char . xu2cac) (i/o-decoding-error? . xu2cab) (get-u8 . xu2caa) (get-string-n! . xu2ca9) (get-string-n . xu2ca8) (get-string-all . xu2ca7) (get-line . xu2ca6) (get-datum . xu2ca5) (get-char . xu2ca4) (get-bytevector-some . xu2ca3) (get-bytevector-n! . xu2ca2) (get-bytevector-n . xu2ca1) (get-bytevector-all . xu2ca0) (flush-output-port . xu2c9f) (close-port . xu2c9e) (exit . xu2c96) (command-line . xu2928) (remove . xu2c91) (remv . xu2c90) (remp . xu2c8f) (remq . xu2c8e) (partition . xu2c8d) (memv . xu2c8c) (memq . xu2c8b) (memp . xu2c8a) (member . xu2c89) (exists . xu2c88) (for-all . xu2c87) (fold-right . xu2c86) (fold-left . xu2c85) (find . xu2c84) (filter . xu2c83) (cons* . xu2c82) (assv . xu2c81) (assq . xu2c80) (assp . xu2c7f) (assoc . xu2c7e) (call-with-string-output-port . xu2c7d) (call-with-port . xu2c7c) (call-with-bytevector-output-port . xu2c7b) (bytevector->string . xu2c7a) (buffer-mode? . xu2c79) (binary-port? . xu2c78) (with-exception-handler . xu2c77) (raise-continuable . xu2c76) (raise . xu2c75) (make-enumeration . xu2c74) (enum-set=? . xu2c73) (enum-set-universe . xu2c72) (enum-set-union . xu2c71) (enum-set-subset? . xu2c70) (enum-set-projection . xu2c6f) (enum-set-member? . xu2c6e) (enum-set-intersection . xu2c6d) (enum-set-indexer . xu2c6c) (enum-set-difference . xu2c6b) (enum-set-constructor . xu2c6a) (enum-set-complement . xu2c69) (enum-set->list . xu2c68) (who-condition? . xu2c67) (warning? . xu2c66) (violation? . xu2c65) (undefined-violation? . xu2c64) (syntax-violation? . xu2c63) (syntax-violation-subform . xu2c62) (syntax-violation-form . xu2c61) (syntax-violation . xue6f) (simple-conditions . xu2c60) (serious-condition? . xu2c5f) (non-continuable-violation? . xu2c5e) (message-condition? . xu2c5d) (make-who-condition . xu2c5c) (make-warning . xu2c5b) (make-violation . xu2c5a) (make-undefined-violation . xu2c59) (make-syntax-violation . xu2c58) (make-serious-condition . xu2c57) (make-non-continuable-violation . xu2c56) (make-message-condition . xu2c55) (make-lexical-violation . xu2c54) (make-irritants-condition . xu2c53) (make-implementation-restriction-violation . xu2c52) (make-error . xu2c51) (make-assertion-violation . xu2c50) (lexical-violation? . xu2c4f) (irritants-condition? . xu2c4e) (implementation-restriction-violation? . xu2c4d) (error? . xu2c4c) (condition-who . xu2c4b) (condition-predicate . xu2c4a) (condition-message . xu2c49) (condition-irritants . xu2c48) (condition-accessor . xu2c47) (condition . xu2c46) (assertion-violation? . xu2c45) (condition? . xu2c44) (utf32->string . xu2c43) (utf16->string . xu2c42) (utf8->string . xu2c41) (uint-list->bytevector . xu2c40) (u8-list->bytevector . xu2c3f) (string->utf8 . xu2c3e) (string->utf32 . xu2c3d) (string->utf16 . xu2c3c) (sint-list->bytevector . xu2c3b) (native-endianness . xu2c3a) (bytevector? . xu2c39) (bytevector=? . xu2c38) (bytevector-uint-set! . xu2c37) (bytevector-uint-ref . xu2c36) (bytevector-u8-set! . xu2c35) (bytevector-u8-ref . xu2c34) (bytevector-u64-set! . xu2c33) (bytevector-u64-ref . xu2c32) (bytevector-u64-native-set! . xu2c31) (bytevector-u64-native-ref . xu2c30) (bytevector-u32-set! . xu2c2f) (bytevector-u32-ref . xu2c2e) (bytevector-u32-native-set! . xu2c2d) (bytevector-u32-native-ref . xu2c2c) (bytevector-u16-set! . xu2c2b) (bytevector-u16-ref . xu2c2a) (bytevector-u16-native-set! . xu2c29) (bytevector-u16-native-ref . xu2c28) (bytevector-sint-set! . xu2c27) (bytevector-sint-ref . xu2c26) (bytevector-s8-set! . xu2c25) (bytevector-s8-ref . xu2c24) (bytevector-s64-set! . xu2c23) (bytevector-s64-ref . xu2c22) (bytevector-s64-native-set! . xu2c21) (bytevector-s64-native-ref . xu2c20) (bytevector-s32-set! . xu2c1f) (bytevector-s32-ref . xu2c1e) (bytevector-s32-native-set! . xu2c1d) (bytevector-s32-native-ref . xu2c1c) (bytevector-s16-set! . xu2c1b) (bytevector-s16-ref . xu2c1a) (bytevector-s16-native-set! . xu2c19) (bytevector-s16-native-ref . xu2c18) (bytevector-length . xu2c17) (bytevector-ieee-single-ref . xu2c16) (bytevector-ieee-single-set! . xu2c15) (bytevector-ieee-single-native-set! . xu2c14) (bytevector-ieee-single-native-ref . xu2c13) (bytevector-ieee-double-set! . xu2c12) (bytevector-ieee-double-ref . xu2c11) (bytevector-ieee-double-native-set! . xu2c10) (bytevector-ieee-double-native-ref . xu2c0f) (bytevector-fill! . xu2c0e) (bytevector-copy! . xu2c0d) (bytevector-copy . xu2c0c) (bytevector->uint-list . xu2c0b) (bytevector->u8-list . xu2c0a) (bytevector->sint-list . xu2c09) (no-nans-violation? . xu2c08) (no-infinities-violation? . xu2c07) (make-no-nans-violation . xu2c06) (make-no-infinities-violation . xu2c05) (real->flonum . xu2c04) (flzero? . xu2c03) (fltruncate . xu2c02) (fltan . xu2c01) (flsqrt . xu2c00) (flsin . xu2bff) (flround . xu2bfe) (flpositive? . xu2bfd) (flonum? . xu2bfc) (flodd? . xu2bfb) (flnumerator . xu2bfa) (flnegative? . xu2bf9) (flnan? . xu2bf8) (flmod0 . xu2bf7) (flmod . xu2bf6) (flmin . xu2bf5) (flmax . xu2bf4) (fllog . xu2bf3) (flinteger? . xu2bf2) (flinfinite? . xu2bf1) (flfloor . xu2bf0) (flfinite? . xu2bef) (flexpt . xu2bee) (flexp . xu2bed) (fleven? . xu2bec) (fldiv0-and-mod0 . xu2beb) (fldiv0 . xu2bea) (fldiv-and-mod . xu2be9) (fldiv . xu2be8) (fldenominator . xu2be7) (flcos . xu2be6) (flceiling . xu2be5) (flatan . xu2be4) (flasin . xu2be3) (flacos . xu2be2) (flabs . xu2be1) (fl>? . xu2be0) (fl>=? . xu2bdf) (fl=? . xu2bde) (fl<? . xu2bdd) (fl<=? . xu2bdc) (fl/ . xu2bdb) (fl- . xu2bda) (fl+ . xu2bd9) (fl* . xu2bd8) (fixnum->flonum . xu2bd7) (fxzero? . xu2bd6) (fxxor . xu2bd5) (fxrotate-bit-field . xu2bd4) (fxreverse-bit-field . xu2bd3) (fxpositive? . xu2bd2) (fxodd? . xu2bd1) (fxnot . xu2bd0) (fxnegative? . xu2bcf) (fxmod0 . xu2bce) (fxmod . xu2bcd) (fxmin . xu2bcc) (fxmax . xu2bcb) (fxlength . xu2bca) (fxior . xu2bc9) (fxif . xu2bc8) (fxfirst-bit-set . xu2bc7) (fxeven? . xu2bc6) (fxdiv0-and-mod0 . xu2bc5) (fxdiv0 . xu2bc4) (fxdiv-and-mod . xu2bc3) (fxdiv . xu2bc2) (fxcopy-bit-field . xu2bc1) (fxcopy-bit . xu2bc0) (fxbit-set? . xu2bbf) (fxbit-field . xu2bbe) (fxbit-count . xu2bbd) (fxarithmetic-shift-right . xu2bbc) (fxarithmetic-shift-left . xu2bbb) (fxarithmetic-shift . xu2bba) (fxand . xu2bb9) (fx>? . xu2bb8) (fx>=? . xu2bb7) (fx=? . xu2bb6) (fx<? . xu2bb5) (fx<=? . xu2bb4) (fx-/carry . xu2bb3) (fx- . xu2bb2) (fx+/carry . xu2bb1) (fx+ . xu2bb0) (fx*/carry . xu2baf) (fx* . xu2bae) (greatest-fixnum . xu2bad) (least-fixnum . xu2bac) (fixnum-width . xu2bab) (fixnum? . xu2baa) (bitwise-rotate-bit-field . xu2ba9) (bitwise-reverse-bit-field . xu2ba8) (bitwise-length . xu2ba7) (bitwise-if . xu2ba6) (bitwise-first-bit-set . xu2ba5) (bitwise-copy-bit-field . xu2ba4) (bitwise-copy-bit . xu2ba3) (bitwise-bit-set? . xu2ba2) (bitwise-bit-field . xu2ba1) (bitwise-bit-count . xu2ba0) (bitwise-xor . xu2b9f) (bitwise-ior . xu2b9e) (bitwise-and . xu2b9d) (bitwise-not . xu2b9c) (bitwise-arithmetic-shift-right . xu2b9b) (bitwise-arithmetic-shift-left . xu2b9a) (bitwise-arithmetic-shift . xu2b99) (zero? . xu2b98) (vector? . xu2b97) (vector-set! . xu2b96) (vector-ref . xu2b95) (vector-map . xu2b94) (vector-length . xu2b93) (vector-for-each . xu2b92) (vector-fill! . xu2b91) (vector->list . xu2b90) (vector . xu2b8f) (values . xu2b8e) (truncate . xu2b8d) (tan . xu2b8c) (symbol? . xu2b8b) (symbol=? . xu2b8a) (symbol->string . xu2b89) (substring . xu2b88) (string? . xu2b87) (string>? . xu2b86) (string>=? . xu2b85) (string=? . xu2b84) (string<? . xu2b83) (string<=? . xu2b82) (string-ref . xu2b81) (string-length . xu2b80) (string-for-each . xu2b7f) (string-copy . xu2b7e) (string-append . xu2b7d) (string->symbol . xu2b7c) (string->number . xu2b7b) (string->list . xu2b7a) (string . xu2b79) (sqrt . xu2b78) (sin . xu2b77) (round . xu2b76) (reverse . xu2b75) (real? . xu2b74) (real-valued? . xu2b73) (real-part . xu2b72) (rationalize . xu2b71) (rational? . xu2b70) (rational-valued? . xu2b6f) (procedure? . xu2b6e) (positive? . xu2b6d) (pair? . xu2b6c) (odd? . xu2b6b) (numerator . xu2b6a) (number? . xu2b69) (number->string . xu2b68) (null? . xu2b67) (not . xu2b66) (negative? . xu2b65) (nan? . xu2b64) (min . xu2b63) (max . xu2b62) (map . xu2b61) (make-vector . xu2b60) (make-string . xu2b5f) (make-rectangular . xu2b5e) (make-polar . xu2b5d) (magnitude . xu2b5c) (log . xu2b5b) (list? . xu2b5a) (list-tail . xu2b59) (list-ref . xu2b58) (list->vector . xu2b57) (list->string . xu2b56) (list . xu2b55) (length . xu2b54) (lcm . xu2b53) (integer? . xu2b52) (integer-valued? . xu2b51) (integer->char . xu2b50) (infinite? . xu2b4f) (inexact? . xu2b4e) (inexact . xu2b4d) (imag-part . xu2b4c) (gcd . xu2b4b) (for-each . xu2b4a) (floor . xu2b49) (finite? . xu2b48) (expt . xu2b47) (exp . xu2b46) (exact? . xu2b45) (exact-integer-sqrt . xu2b44) (exact . xu2b43) (even? . xu2b42) (error . xu2b41) (eqv? . xu2b40) (equal? . xu2b3f) (eq? . xu2b3e) (dynamic-wind . xu2b3d) (div0-and-mod0 . xu2b3c) (mod0 . xu2b3b) (div0 . xu2b3a) (div-and-mod . xu2b39) (mod . xu2b38) (div . xu2b37) (denominator . xu2b36) (cos . xu2b35) (cons . xu2b34) (complex? . xu2b33) (char? . xu2b32) (char>? . xu2b31) (char>=? . xu2b30) (char=? . xu2b2f) (char<? . xu2b2e) (char<=? . xu2b2d) (char->integer . xu2b2c) (ceiling . xu2b2b) (call-with-values . xu2b2a) (call/cc . xu2b29) (call-with-current-continuation . xu2b28) (cddddr . xu2b27) (cdddar . xu2b26) (cddadr . xu2b25) (cddaar . xu2b24) (cdaddr . xu2b23) (cdadar . xu2b22) (cdaadr . xu2b21) (cdaaar . xu2b20) (cadddr . xu2b1f) (caddar . xu2b1e) (cadadr . xu2b1d) (cadaar . xu2b1c) (caaddr . xu2b1b) (caadar . xu2b1a) (caaadr . xu2b19) (caaaar . xu2b18) (cdddr . xu2b17) (cddar . xu2b16) (cdadr . xu2b15) (cdaar . xu2b14) (caddr . xu2b13) (cadar . xu2b12) (caadr . xu2b11) (caaar . xu2b10) (cddr . xu2b0f) (cdar . xu2b0e) (cadr . xu2b0d) (caar . xu2b0c) (cdr . xu2b0b) (car . xu2b0a) (boolean? . xu2b09) (boolean=? . xu2b08) (atan . xu2b07) (assertion-violation . xu2b06) (asin . xu2b05) (apply . xu2b04) (append . xu2b03) (angle . xu2b02) (acos . xu2b01) (abs . xu2b00) (/ . xu2aff) (* . xu2afe) (- . xu2afd) (+ . xu2afc) (>= . xu2afb) (> . xu2afa) (= . xu2af9) (<= . xu2af8) (< . xu2af7) (&no-nans . xu2af5) (&no-infinities . xu2af4) (&i/o-encoding . xu2af3) (&i/o-decoding . xu2af2) (&i/o-port . xu2af1) (&i/o-file-does-not-exist . xu2af0) (&i/o-file-already-exists . xu2aef) (&i/o-file-is-read-only . xu2aee) (&i/o-file-protection . xu2aed) (&i/o-filename . xu2aec) (&i/o-invalid-position . xu2aeb) (&i/o-write . xu2aea) (&i/o-read . xu2ae9) (&i/o . xu2ae8) (&undefined . xu2ae7) (&syntax . xu2ae6) (&lexical . xu2ae5) (&implementation-restriction . xu2ae4) (&non-continuable . xu2ae3) (&who . xu2ae2) (&irritants . xu2ae1) (&assertion . xu2ae0) (&violation . xu2adf) (&error . xu2ade) (&serious . xu2add) (&warning . xu2adc) (&message . xu2adb) (&condition . xu2ada) (define-condition-type . xu2ad9) (define-enumeration . xu2ad8) (define-record-type . xu2ad7) (parent-rtd . xu2ad6) (nongenerative . xu2ad5) (opaque . xu2ad4) (sealed . xu2ad3) (protocol . xu2ad2) (parent . xu2ad1) (immutable . xu2ad0) (mutable . xu2acf) (fields . xu2ace) (error-handling-mode . xu2acd) (file-options . xu2acc) (buffer-mode . xu2acb) (eol-style . xu2aca) (guard . xu2ac9) (unsyntax-splicing . xu2ac6) (unsyntax . xu2ac5) (unquote-splicing . xu2ac4) (unquote . xu2ac3) (_ . xu2ac2) (else . xu2ac1) (=> . xu2ac0) (... . xu2abf) (assert . xu2abe) (endianness . xu2abd) (do . xu2aba) (cond . xu2ab9) (let* . xu2ab8) (let*-values . xu2ab7) (let-values . xu2ab6) (identifier-syntax . xu2ab5) (with-syntax . xu2ab4) (quasisyntax . xu2ab3) (quasiquote . xu2ab2) (syntax-rules . xu2ab1) (record-constructor-descriptor . xu2aae) (record-type-descriptor . xu2aad) (case . xu2aac) (unless . xu2aaa) (when . xu2aa9) (or . xu2aa8) (and . xu2aa7) (if . xu2aa6) (let . xu2aa5) (letrec* . xu2aa4) (letrec . xu2aa3) (case-lambda . xu2aa1) (lambda . xu2aa0) (syntax . xu2a9f) (syntax-case . xu2a9e) (quote . xu2a9d) (letrec-syntax . xu2a9b) (let-syntax . xu2a9a) (set! . xu2a99) (begin . xu2a97) (define-syntax . xu2a95) (define . xu2a94)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e52 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . xue4b) (quotient . xu2c9d) (null-environment . xue49) (remainder . xu2c9c) (modulo . xu2c9b) (inexact->exact . xu2c9a) (force . xu2c99) (exact->inexact . xu2c98) (make-promise . xu2c97) (delay . xu2abc)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e53 '(rnrs control) '(6) '() '() '() '((do . xu2aba) (unless . xu2aaa) (when . xu2aa9) (case-lambda . xu2aa1)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e54 '(rnrs eval) '(6) '() '() '() '((eval . xue4f) (environment . xue47)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e55 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . xu2c93) (set-car! . xu2c92)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e56 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . xu2c95) (string-set! . xu2c94)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e57 '(rnrs programs) '(6) '() '() '() '((exit . xu2c96) (command-line . xu2928)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e58 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . xubba) (identifier? . xue71) (generate-temporaries . xue5d) (free-identifier=? . xue5f) (syntax->datum . xue75) (datum->syntax . xue73) (bound-identifier=? . xue61) (syntax-violation . xue6f) (unsyntax-splicing . xu2ac6) (unsyntax . xu2ac5) (_ . xu2ac2) (... . xu2abf) (with-syntax . xu2ab4) (quasisyntax . xu2ab3) (syntax . xu2a9f) (syntax-case . xu2a9e)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e59 '(rnrs files) '(6) '() '() '() '((delete-file . xu2d22) (file-exists? . xu2d21) (make-i/o-write-error . xu2ccf) (make-i/o-read-error . xu2cce) (make-i/o-port-error . xu2ccd) (make-i/o-invalid-position-error . xu2ccc) (make-i/o-filename-error . xu2ccb) (make-i/o-file-protection-error . xu2cca) (make-i/o-file-is-read-only-error . xu2cc9) (make-i/o-file-does-not-exist-error . xu2cc8) (make-i/o-file-already-exists-error . xu2cc7) (make-i/o-error . xu2cc6) (i/o-write-error? . xu2cba) (i/o-read-error? . xu2cb9) (i/o-port-error? . xu2cb8) (i/o-invalid-position-error? . xu2cb7) (i/o-filename-error? . xu2cb6) (i/o-file-protection-error? . xu2cb5) (i/o-file-is-read-only-error? . xu2cb4) (i/o-file-does-not-exist-error? . xu2cb3) (i/o-file-already-exists-error? . xu2cb2) (i/o-error? . xu2cb1) (i/o-error-position . xu2cb0) (i/o-error-port . xu2caf) (i/o-error-filename . xu2cae) (&i/o-port . xu2af1) (&i/o-file-does-not-exist . xu2af0) (&i/o-file-already-exists . xu2aef) (&i/o-file-is-read-only . xu2aee) (&i/o-file-protection . xu2aed) (&i/o-filename . xu2aec) (&i/o-invalid-position . xu2aeb) (&i/o-write . xu2aea) (&i/o-read . xu2ae9) (&i/o . xu2ae8)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e5a '(rnrs sorting) '(6) '() '() '() '((vector-sort! . xu2d20) (vector-sort . xu2d1f) (list-sort . xu2d1e)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e5b '(rnrs base) '(6) '() '() '() '((zero? . xu2b98) (vector? . xu2b97) (vector-set! . xu2b96) (vector-ref . xu2b95) (vector-map . xu2b94) (vector-length . xu2b93) (vector-for-each . xu2b92) (vector-fill! . xu2b91) (vector->list . xu2b90) (vector . xu2b8f) (values . xu2b8e) (truncate . xu2b8d) (tan . xu2b8c) (symbol? . xu2b8b) (symbol=? . xu2b8a) (symbol->string . xu2b89) (substring . xu2b88) (string? . xu2b87) (string>? . xu2b86) (string>=? . xu2b85) (string=? . xu2b84) (string<? . xu2b83) (string<=? . xu2b82) (string-ref . xu2b81) (string-length . xu2b80) (string-for-each . xu2b7f) (string-copy . xu2b7e) (string-append . xu2b7d) (string->symbol . xu2b7c) (string->number . xu2b7b) (string->list . xu2b7a) (string . xu2b79) (sqrt . xu2b78) (sin . xu2b77) (round . xu2b76) (reverse . xu2b75) (real? . xu2b74) (real-valued? . xu2b73) (real-part . xu2b72) (rationalize . xu2b71) (rational? . xu2b70) (rational-valued? . xu2b6f) (procedure? . xu2b6e) (positive? . xu2b6d) (pair? . xu2b6c) (odd? . xu2b6b) (numerator . xu2b6a) (number? . xu2b69) (number->string . xu2b68) (null? . xu2b67) (not . xu2b66) (negative? . xu2b65) (nan? . xu2b64) (min . xu2b63) (max . xu2b62) (map . xu2b61) (make-vector . xu2b60) (make-string . xu2b5f) (make-rectangular . xu2b5e) (make-polar . xu2b5d) (magnitude . xu2b5c) (log . xu2b5b) (list? . xu2b5a) (list-tail . xu2b59) (list-ref . xu2b58) (list->vector . xu2b57) (list->string . xu2b56) (list . xu2b55) (length . xu2b54) (lcm . xu2b53) (integer? . xu2b52) (integer-valued? . xu2b51) (integer->char . xu2b50) (infinite? . xu2b4f) (inexact? . xu2b4e) (inexact . xu2b4d) (imag-part . xu2b4c) (gcd . xu2b4b) (for-each . xu2b4a) (floor . xu2b49) (finite? . xu2b48) (expt . xu2b47) (exp . xu2b46) (exact? . xu2b45) (exact-integer-sqrt . xu2b44) (exact . xu2b43) (even? . xu2b42) (error . xu2b41) (eqv? . xu2b40) (equal? . xu2b3f) (eq? . xu2b3e) (dynamic-wind . xu2b3d) (div0-and-mod0 . xu2b3c) (mod0 . xu2b3b) (div0 . xu2b3a) (div-and-mod . xu2b39) (mod . xu2b38) (div . xu2b37) (denominator . xu2b36) (cos . xu2b35) (cons . xu2b34) (complex? . xu2b33) (char? . xu2b32) (char>? . xu2b31) (char>=? . xu2b30) (char=? . xu2b2f) (char<? . xu2b2e) (char<=? . xu2b2d) (char->integer . xu2b2c) (ceiling . xu2b2b) (call-with-values . xu2b2a) (call/cc . xu2b29) (call-with-current-continuation . xu2b28) (cddddr . xu2b27) (cdddar . xu2b26) (cddadr . xu2b25) (cddaar . xu2b24) (cdaddr . xu2b23) (cdadar . xu2b22) (cdaadr . xu2b21) (cdaaar . xu2b20) (cadddr . xu2b1f) (caddar . xu2b1e) (cadadr . xu2b1d) (cadaar . xu2b1c) (caaddr . xu2b1b) (caadar . xu2b1a) (caaadr . xu2b19) (caaaar . xu2b18) (cdddr . xu2b17) (cddar . xu2b16) (cdadr . xu2b15) (cdaar . xu2b14) (caddr . xu2b13) (cadar . xu2b12) (caadr . xu2b11) (caaar . xu2b10) (cddr . xu2b0f) (cdar . xu2b0e) (cadr . xu2b0d) (caar . xu2b0c) (cdr . xu2b0b) (car . xu2b0a) (boolean? . xu2b09) (boolean=? . xu2b08) (atan . xu2b07) (assertion-violation . xu2b06) (asin . xu2b05) (apply . xu2b04) (append . xu2b03) (angle . xu2b02) (acos . xu2b01) (abs . xu2b00) (/ . xu2aff) (* . xu2afe) (- . xu2afd) (+ . xu2afc) (>= . xu2afb) (> . xu2afa) (= . xu2af9) (<= . xu2af8) (< . xu2af7) (unquote-splicing . xu2ac4) (unquote . xu2ac3) (_ . xu2ac2) (else . xu2ac1) (=> . xu2ac0) (... . xu2abf) (assert . xu2abe) (cond . xu2ab9) (let* . xu2ab8) (let*-values . xu2ab7) (let-values . xu2ab6) (identifier-syntax . xu2ab5) (quasiquote . xu2ab2) (syntax-rules . xu2ab1) (case . xu2aac) (or . xu2aa8) (and . xu2aa7) (if . xu2aa6) (let . xu2aa5) (letrec* . xu2aa4) (letrec . xu2aa3) (lambda . xu2aa0) (quote . xu2a9d) (letrec-syntax . xu2a9b) (let-syntax . xu2a9a) (set! . xu2a99) (begin . xu2a97) (define-syntax . xu2a95) (define . xu2a94)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e5c '(rnrs lists) '(6) '() '() '() '((remove . xu2c91) (remv . xu2c90) (remp . xu2c8f) (remq . xu2c8e) (partition . xu2c8d) (memv . xu2c8c) (memq . xu2c8b) (memp . xu2c8a) (member . xu2c89) (exists . xu2c88) (for-all . xu2c87) (fold-right . xu2c86) (fold-left . xu2c85) (find . xu2c84) (filter . xu2c83) (cons* . xu2c82) (assv . xu2c81) (assq . xu2c80) (assp . xu2c7f) (assoc . xu2c7e)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e5d '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . xu2d08) (call-with-input-file . xu2d07) (write-char . xu2d06) (write . xu2d05) (with-output-to-file . xu2d04) (with-input-from-file . xu2d03) (read-char . xu2d02) (read . xu2d01) (peek-char . xu2d00) (open-output-file . xu2cff) (open-input-file . xu2cfe) (newline . xu2cfd) (display . xu2cfc) (close-output-port . xu2cfb) (close-input-port . xu2cfa) (eof-object? . xu2cf9) (eof-object . xu2cf8) (current-error-port . xu2cf7) (current-output-port . xu2cf6) (current-input-port . xu2cf5) (output-port? . xu2cf4) (input-port? . xu2cf3) (make-i/o-write-error . xu2ccf) (make-i/o-read-error . xu2cce) (make-i/o-port-error . xu2ccd) (make-i/o-invalid-position-error . xu2ccc) (make-i/o-filename-error . xu2ccb) (make-i/o-file-protection-error . xu2cca) (make-i/o-file-is-read-only-error . xu2cc9) (make-i/o-file-does-not-exist-error . xu2cc8) (make-i/o-file-already-exists-error . xu2cc7) (make-i/o-error . xu2cc6) (i/o-write-error? . xu2cba) (i/o-read-error? . xu2cb9) (i/o-port-error? . xu2cb8) (i/o-invalid-position-error? . xu2cb7) (i/o-filename-error? . xu2cb6) (i/o-file-protection-error? . xu2cb5) (i/o-file-is-read-only-error? . xu2cb4) (i/o-file-does-not-exist-error? . xu2cb3) (i/o-file-already-exists-error? . xu2cb2) (i/o-error? . xu2cb1) (i/o-error-position . xu2cb0) (i/o-error-port . xu2caf) (i/o-error-filename . xu2cae) (&i/o-port . xu2af1) (&i/o-file-does-not-exist . xu2af0) (&i/o-file-already-exists . xu2aef) (&i/o-file-is-read-only . xu2aee) (&i/o-file-protection . xu2aed) (&i/o-filename . xu2aec) (&i/o-invalid-position . xu2aeb) (&i/o-write . xu2aea) (&i/o-read . xu2ae9) (&i/o . xu2ae8)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e5e '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . xu2cbd) (utf32->string . xu2c43) (utf16->string . xu2c42) (utf8->string . xu2c41) (uint-list->bytevector . xu2c40) (u8-list->bytevector . xu2c3f) (string->utf8 . xu2c3e) (string->utf32 . xu2c3d) (string->utf16 . xu2c3c) (sint-list->bytevector . xu2c3b) (native-endianness . xu2c3a) (bytevector? . xu2c39) (bytevector=? . xu2c38) (bytevector-uint-set! . xu2c37) (bytevector-uint-ref . xu2c36) (bytevector-u8-set! . xu2c35) (bytevector-u8-ref . xu2c34) (bytevector-u64-set! . xu2c33) (bytevector-u64-ref . xu2c32) (bytevector-u64-native-set! . xu2c31) (bytevector-u64-native-ref . xu2c30) (bytevector-u32-set! . xu2c2f) (bytevector-u32-ref . xu2c2e) (bytevector-u32-native-set! . xu2c2d) (bytevector-u32-native-ref . xu2c2c) (bytevector-u16-set! . xu2c2b) (bytevector-u16-ref . xu2c2a) (bytevector-u16-native-set! . xu2c29) (bytevector-u16-native-ref . xu2c28) (bytevector-sint-set! . xu2c27) (bytevector-sint-ref . xu2c26) (bytevector-s8-set! . xu2c25) (bytevector-s8-ref . xu2c24) (bytevector-s64-set! . xu2c23) (bytevector-s64-ref . xu2c22) (bytevector-s64-native-set! . xu2c21) (bytevector-s64-native-ref . xu2c20) (bytevector-s32-set! . xu2c1f) (bytevector-s32-ref . xu2c1e) (bytevector-s32-native-set! . xu2c1d) (bytevector-s32-native-ref . xu2c1c) (bytevector-s16-set! . xu2c1b) (bytevector-s16-ref . xu2c1a) (bytevector-s16-native-set! . xu2c19) (bytevector-s16-native-ref . xu2c18) (bytevector-length . xu2c17) (bytevector-ieee-single-ref . xu2c16) (bytevector-ieee-single-set! . xu2c15) (bytevector-ieee-single-native-set! . xu2c14) (bytevector-ieee-single-native-ref . xu2c13) (bytevector-ieee-double-set! . xu2c12) (bytevector-ieee-double-ref . xu2c11) (bytevector-ieee-double-native-set! . xu2c10) (bytevector-ieee-double-native-ref . xu2c0f) (bytevector-fill! . xu2c0e) (bytevector-copy! . xu2c0d) (bytevector-copy . xu2c0c) (bytevector->uint-list . xu2c0b) (bytevector->u8-list . xu2c0a) (bytevector->sint-list . xu2c09) (endianness . xu2abd)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e5f '(rnrs unicode) '(6) '() '() '() '((string-upcase . xu2d50) (string-titlecase . xu2d4f) (string-normalize-nfkd . xu2d4e) (string-normalize-nfkc . xu2d4d) (string-normalize-nfd . xu2d4c) (string-normalize-nfc . xu2d4b) (string-foldcase . xu2d4a) (string-downcase . xu2d49) (string-ci>? . xu2d48) (string-ci>=? . xu2d47) (string-ci=? . xu2d46) (string-ci<? . xu2d45) (string-ci<=? . xu2d44) (char-whitespace? . xu2d43) (char-upper-case? . xu2d42) (char-title-case? . xu2d41) (char-numeric? . xu2d40) (char-lower-case? . xu2d3f) (char-general-category . xu2d3e) (char-upcase . xu2d3d) (char-titlecase . xu2d3c) (char-foldcase . xu2d3b) (char-downcase . xu2d3a) (char-ci>? . xu2d39) (char-ci>=? . xu2d38) (char-ci=? . xu2d37) (char-ci<? . xu2d36) (char-ci<=? . xu2d35) (char-alphabetic? . xu2d34)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e60 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . xu2c77) (raise-continuable . xu2c76) (raise . xu2c75) (guard . xu2ac9) (else . xu2ac1) (=> . xu2ac0)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e61 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . xu2ba9) (bitwise-reverse-bit-field . xu2ba8) (bitwise-length . xu2ba7) (bitwise-if . xu2ba6) (bitwise-first-bit-set . xu2ba5) (bitwise-copy-bit-field . xu2ba4) (bitwise-copy-bit . xu2ba3) (bitwise-bit-set? . xu2ba2) (bitwise-bit-field . xu2ba1) (bitwise-bit-count . xu2ba0) (bitwise-xor . xu2b9f) (bitwise-ior . xu2b9e) (bitwise-and . xu2b9d) (bitwise-not . xu2b9c) (bitwise-arithmetic-shift-right . xu2b9b) (bitwise-arithmetic-shift-left . xu2b9a) (bitwise-arithmetic-shift . xu2b99)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e62 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . xu2bd6) (fxxor . xu2bd5) (fxrotate-bit-field . xu2bd4) (fxreverse-bit-field . xu2bd3) (fxpositive? . xu2bd2) (fxodd? . xu2bd1) (fxnot . xu2bd0) (fxnegative? . xu2bcf) (fxmod0 . xu2bce) (fxmod . xu2bcd) (fxmin . xu2bcc) (fxmax . xu2bcb) (fxlength . xu2bca) (fxior . xu2bc9) (fxif . xu2bc8) (fxfirst-bit-set . xu2bc7) (fxeven? . xu2bc6) (fxdiv0-and-mod0 . xu2bc5) (fxdiv0 . xu2bc4) (fxdiv-and-mod . xu2bc3) (fxdiv . xu2bc2) (fxcopy-bit-field . xu2bc1) (fxcopy-bit . xu2bc0) (fxbit-set? . xu2bbf) (fxbit-field . xu2bbe) (fxbit-count . xu2bbd) (fxarithmetic-shift-right . xu2bbc) (fxarithmetic-shift-left . xu2bbb) (fxarithmetic-shift . xu2bba) (fxand . xu2bb9) (fx>? . xu2bb8) (fx>=? . xu2bb7) (fx=? . xu2bb6) (fx<? . xu2bb5) (fx<=? . xu2bb4) (fx-/carry . xu2bb3) (fx- . xu2bb2) (fx+/carry . xu2bb1) (fx+ . xu2bb0) (fx*/carry . xu2baf) (fx* . xu2bae) (greatest-fixnum . xu2bad) (least-fixnum . xu2bac) (fixnum-width . xu2bab) (fixnum? . xu2baa)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e63 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . xu2c08) (no-infinities-violation? . xu2c07) (make-no-nans-violation . xu2c06) (make-no-infinities-violation . xu2c05) (real->flonum . xu2c04) (flzero? . xu2c03) (fltruncate . xu2c02) (fltan . xu2c01) (flsqrt . xu2c00) (flsin . xu2bff) (flround . xu2bfe) (flpositive? . xu2bfd) (flonum? . xu2bfc) (flodd? . xu2bfb) (flnumerator . xu2bfa) (flnegative? . xu2bf9) (flnan? . xu2bf8) (flmod0 . xu2bf7) (flmod . xu2bf6) (flmin . xu2bf5) (flmax . xu2bf4) (fllog . xu2bf3) (flinteger? . xu2bf2) (flinfinite? . xu2bf1) (flfloor . xu2bf0) (flfinite? . xu2bef) (flexpt . xu2bee) (flexp . xu2bed) (fleven? . xu2bec) (fldiv0-and-mod0 . xu2beb) (fldiv0 . xu2bea) (fldiv-and-mod . xu2be9) (fldiv . xu2be8) (fldenominator . xu2be7) (flcos . xu2be6) (flceiling . xu2be5) (flatan . xu2be4) (flasin . xu2be3) (flacos . xu2be2) (flabs . xu2be1) (fl>? . xu2be0) (fl>=? . xu2bdf) (fl=? . xu2bde) (fl<? . xu2bdd) (fl<=? . xu2bdc) (fl/ . xu2bdb) (fl- . xu2bda) (fl+ . xu2bd9) (fl* . xu2bd8) (fixnum->flonum . xu2bd7) (&no-nans . xu2af5) (&no-infinities . xu2af4)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e64 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . xu2d1d) (string-ci-hash . xu2d1c) (string-hash . xu2d1b) (equal-hash . xu2d1a) (hashtable-equivalence-function . xu2d19) (make-hashtable . xu2d18) (hashtable-hash-function . xu2d17) (make-eqv-hashtable . xu2d16) (make-eq-hashtable . xu2d15) (hashtable? . xu2d14) (hashtable-update! . xu2d13) (hashtable-size . xu2d12) (hashtable-set! . xu2d11) (hashtable-ref . xu2d10) (hashtable-mutable? . xu2d0f) (hashtable-keys . xu2d0e) (hashtable-entries . xu2d0d) (hashtable-delete! . xu2d0c) (hashtable-copy . xu2d0b) (hashtable-contains? . xu2d0a) (hashtable-clear! . xu2d09)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e65 '(rnrs io ports) '(6) '() '() '() '((eof-object? . xu2cf9) (eof-object . xu2cf8) (current-error-port . xu2cf7) (current-output-port . xu2cf6) (current-input-port . xu2cf5) (output-port? . xu2cf4) (input-port? . xu2cf3) (utf-8-codec . xu2cf2) (utf-16-codec . xu2cf1) (transcoder-error-handling-mode . xu2cf0) (transcoder-eol-style . xu2cef) (transcoder-codec . xu2cee) (transcoded-port . xu2ced) (textual-port? . xu2cec) (string->bytevector . xu2ceb) (standard-output-port . xu2cea) (standard-input-port . xu2ce9) (standard-error-port . xu2ce8) (set-port-position! . xu2ce7) (put-u8 . xu2ce6) (put-string . xu2ce5) (put-datum . xu2ce4) (put-char . xu2ce3) (put-bytevector . xu2ce2) (port? . xu2ce1) (port-transcoder . xu2ce0) (port-position . xu2cdf) (port-has-set-port-position!? . xu2cde) (port-has-port-position? . xu2cdd) (port-eof? . xu2cdc) (output-port-buffer-mode . xu2cdb) (open-string-output-port . xu2cda) (open-string-input-port . xu2cd9) (open-file-output-port . xu2cd8) (open-file-input/output-port . xu2cd7) (open-file-input-port . xu2cd6) (open-bytevector-output-port . xu2cd5) (open-bytevector-input-port . xu2cd4) (native-transcoder . xu2cd3) (native-eol-style . xu2cd2) (make-transcoder . xu2cd1) (latin-1-codec . xu2cd0) (make-i/o-write-error . xu2ccf) (make-i/o-read-error . xu2cce) (make-i/o-port-error . xu2ccd) (make-i/o-invalid-position-error . xu2ccc) (make-i/o-filename-error . xu2ccb) (make-i/o-file-protection-error . xu2cca) (make-i/o-file-is-read-only-error . xu2cc9) (make-i/o-file-does-not-exist-error . xu2cc8) (make-i/o-file-already-exists-error . xu2cc7) (make-i/o-error . xu2cc6) (make-i/o-encoding-error . xu2cc5) (make-i/o-decoding-error . xu2cc4) (make-custom-textual-output-port . xu2cc3) (make-custom-textual-input/output-port . xu2cc2) (make-custom-textual-input-port . xu2cc1) (make-custom-binary-output-port . xu2cc0) (make-custom-binary-input/output-port . xu2cbf) (make-custom-binary-input-port . xu2cbe) (lookahead-u8 . xu2cbc) (lookahead-char . xu2cbb) (i/o-write-error? . xu2cba) (i/o-read-error? . xu2cb9) (i/o-port-error? . xu2cb8) (i/o-invalid-position-error? . xu2cb7) (i/o-filename-error? . xu2cb6) (i/o-file-protection-error? . xu2cb5) (i/o-file-is-read-only-error? . xu2cb4) (i/o-file-does-not-exist-error? . xu2cb3) (i/o-file-already-exists-error? . xu2cb2) (i/o-error? . xu2cb1) (i/o-error-position . xu2cb0) (i/o-error-port . xu2caf) (i/o-error-filename . xu2cae) (i/o-encoding-error? . xu2cad) (i/o-encoding-error-char . xu2cac) (i/o-decoding-error? . xu2cab) (get-u8 . xu2caa) (get-string-n! . xu2ca9) (get-string-n . xu2ca8) (get-string-all . xu2ca7) (get-line . xu2ca6) (get-datum . xu2ca5) (get-char . xu2ca4) (get-bytevector-some . xu2ca3) (get-bytevector-n! . xu2ca2) (get-bytevector-n . xu2ca1) (get-bytevector-all . xu2ca0) (flush-output-port . xu2c9f) (close-port . xu2c9e) (call-with-string-output-port . xu2c7d) (call-with-port . xu2c7c) (call-with-bytevector-output-port . xu2c7b) (bytevector->string . xu2c7a) (buffer-mode? . xu2c79) (binary-port? . xu2c78) (&i/o-encoding . xu2af3) (&i/o-decoding . xu2af2) (&i/o-port . xu2af1) (&i/o-file-does-not-exist . xu2af0) (&i/o-file-already-exists . xu2aef) (&i/o-file-is-read-only . xu2aee) (&i/o-file-protection . xu2aed) (&i/o-filename . xu2aec) (&i/o-invalid-position . xu2aeb) (&i/o-write . xu2aea) (&i/o-read . xu2ae9) (&i/o . xu2ae8) (error-handling-mode . xu2acd) (file-options . xu2acc) (buffer-mode . xu2acb) (eol-style . xu2aca)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e66 '(rnrs enums) '(6) '() '() '() '((make-enumeration . xu2c74) (enum-set=? . xu2c73) (enum-set-universe . xu2c72) (enum-set-union . xu2c71) (enum-set-subset? . xu2c70) (enum-set-projection . xu2c6f) (enum-set-member? . xu2c6e) (enum-set-intersection . xu2c6d) (enum-set-indexer . xu2c6c) (enum-set-difference . xu2c6b) (enum-set-constructor . xu2c6a) (enum-set-complement . xu2c69) (enum-set->list . xu2c68) (define-enumeration . xu2ad8)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e67 '(rnrs conditions) '(6) '() '() '() '((who-condition? . xu2c67) (warning? . xu2c66) (violation? . xu2c65) (undefined-violation? . xu2c64) (syntax-violation? . xu2c63) (syntax-violation-subform . xu2c62) (syntax-violation-form . xu2c61) (syntax-violation . xue6f) (simple-conditions . xu2c60) (serious-condition? . xu2c5f) (non-continuable-violation? . xu2c5e) (message-condition? . xu2c5d) (make-who-condition . xu2c5c) (make-warning . xu2c5b) (make-violation . xu2c5a) (make-undefined-violation . xu2c59) (make-syntax-violation . xu2c58) (make-serious-condition . xu2c57) (make-non-continuable-violation . xu2c56) (make-message-condition . xu2c55) (make-lexical-violation . xu2c54) (make-irritants-condition . xu2c53) (make-implementation-restriction-violation . xu2c52) (make-error . xu2c51) (make-assertion-violation . xu2c50) (lexical-violation? . xu2c4f) (irritants-condition? . xu2c4e) (implementation-restriction-violation? . xu2c4d) (error? . xu2c4c) (condition-who . xu2c4b) (condition-predicate . xu2c4a) (condition-message . xu2c49) (condition-irritants . xu2c48) (condition-accessor . xu2c47) (condition . xu2c46) (assertion-violation? . xu2c45) (condition? . xu2c44) (&undefined . xu2ae7) (&syntax . xu2ae6) (&lexical . xu2ae5) (&implementation-restriction . xu2ae4) (&non-continuable . xu2ae3) (&who . xu2ae2) (&irritants . xu2ae1) (&assertion . xu2ae0) (&violation . xu2adf) (&error . xu2ade) (&serious . xu2add) (&warning . xu2adc) (&message . xu2adb) (&condition . xu2ada) (define-condition-type . xu2ad9)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e68 '(rnrs records inspection) '(6) '() '() '() '((record? . xu2d2c) (record-type-uid . xu2d2b) (record-type-sealed? . xu2d2a) (record-type-parent . xu2d29) (record-type-opaque? . xu2d28) (record-type-name . xu2d27) (record-type-generative? . xu2d26) (record-type-field-names . xu2d25) (record-rtd . xu2d24) (record-field-mutable? . xu2d23)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e69 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . xu2d33) (record-predicate . xu2d32) (record-mutator . xu2d31) (record-constructor . xu2d30) (record-accessor . xu2d2f) (make-record-type-descriptor . xu2d2e) (make-record-constructor-descriptor . xu2d2d)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e6a '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . xu2ad7) (parent-rtd . xu2ad6) (nongenerative . xu2ad5) (opaque . xu2ad4) (sealed . xu2ad3) (protocol . xu2ad2) (parent . xu2ad1) (immutable . xu2ad0) (mutable . xu2acf) (fields . xu2ace) (record-constructor-descriptor . xu2aae) (record-type-descriptor . xu2aad)) '() values values '#f '#f '#t '#f) (xu9a3@xu7ef@install-library 'xu2e6b '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . xu2e4b) (&no-nans-rtd . xu2e4a) (&no-infinities-rcd . xu2e49) (&no-infinities-rtd . xu2e48) (&i/o-encoding-rcd . xu2e47) (&i/o-encoding-rtd . xu2e46) (&i/o-decoding-rcd . xu2e45) (&i/o-decoding-rtd . xu2e44) (&i/o-port-rcd . xu2e43) (&i/o-port-rtd . xu2e42) (&i/o-file-does-not-exist-rcd . xu2e41) (&i/o-file-does-not-exist-rtd . xu2e40) (&i/o-file-already-exists-rcd . xu2e3f) (&i/o-file-already-exists-rtd . xu2e3e) (&i/o-file-is-read-only-rcd . xu2e3d) (&i/o-file-is-read-only-rtd . xu2e3c) (&i/o-file-protection-rcd . xu2e3b) (&i/o-file-protection-rtd . xu2e3a) (&i/o-filename-rcd . xu2e39) (&i/o-filename-rtd . xu2e38) (&i/o-invalid-position-rcd . xu2e37) (&i/o-invalid-position-rtd . xu2e36) (&i/o-write-rcd . xu2e35) (&i/o-write-rtd . xu2e34) (&i/o-read-rcd . xu2e33) (&i/o-read-rtd . xu2e32) (&i/o-rcd . xu2e31) (&i/o-rtd . xu2e30) (&undefined-rcd . xu2e2f) (&undefined-rtd . xu2e2e) (&syntax-rcd . xu2e2d) (&syntax-rtd . xu2e2c) (&lexical-rcd . xu2e2b) (&lexical-rtd . xu2e2a) (&implementation-restriction-rcd . xu2e29) (&implementation-restriction-rtd . xu2e28) (&non-continuable-rcd . xu2e27) (&non-continuable-rtd . xu2e26) (&who-rcd . xu2e25) (&who-rtd . xu2e24) (&irritants-rcd . xu2e23) (&irritants-rtd . xu2e22) (&assertion-rcd . xu2e21) (&assertion-rtd . xu2e20) (&violation-rcd . xu2e1f) (&violation-rtd . xu2e1e) (&error-rcd . xu2e1d) (&error-rtd . xu2e1c) (&serious-rcd . xu2e1b) (&serious-rtd . xu2e1a) (&warning-rcd . xu2e19) (&warning-rtd . xu2e18) (&message-rcd . xu2e17) (&message-rtd . xu2e16) (&condition-rcd . xu2e15) (&condition-rtd . xu2e14) (syntax-error . xue6b) (syntax-dispatch . xud8f) (pretty-print . xu2e13) (eval-core . xu2e12) (set-symbol-value! . xu2e11) (symbol-value . xu2e10) (gensym . xu2e0f) (void . xu2e0e) (load . xu292e) (interaction-environment . xue7d) (char-ready? . xu2e0d) (regexp? . xu2e0c) (read-line . xu2e0b) (gensym-prefix-set! . xu2e0a) (ungensym . xu2e09) (alist->eq-hash-table . xu2e08) (assoc-ref . xu2e07) (print . xu2e06) (format . xu2e05) (host-os . xu2e04) (library-path . xu7ce) (standard-library-path . xu2e03) (ssl-supported? . xu2e02) (ssl-socket? . xu2e01) (socket-sslize! . xu2e00) (%monapi-stream-read . xu2dff) (%monapi-stream-write . xu2dfe) (%monapi-stream-handle . xu2dfd) (%monapi-make-stream . xu2dfc) (%monapi-name-add! . xu2dfb) (%monapi-message-receive . xu2dfa) (%monapi-name-whereis . xu2df9) (%monapi-message-reply . xu2df8) (%monapi-message-send-receive . xu2df7) (%monapi-message-send . xu2df6) (process-terminate! . xu2df5) (process-list . xu2df4) (file-newer? . xu2df3) (stat-mtime . xu2df2) (write-to-file . xu2df1) (file->list . xu2df0) (file->string . xu2def) (digit->integer . xu2dee) (call-with-string-input-port . xu2ded) (call-with-string-io . xu2dec) (string-split . xu2deb) (bytevector-for-each . xu2dea) (string->regexp . xu2de9) (rxmatch . xu2de8) (regexp-replace-all . xu2de7) (hashtable-fold-left . xu2de6) (hashtable-for-each . xu2de5) (mosh-cache-dir . xu5b8) (%start-process . xu2de4) (%call-process . xu2de3) (local-tz-offset . xu2de2) (microseconds . xu2de1) (directory-list . xu2de0) (set-current-directory! . xu2ddf) (expand-path . xu2dde) (current-directory . xu2ddd) (%getpid . xu2ddc) (%waitpid . xu2ddb) (simple-struct-name . xu2dda) (simple-struct-set! . xu2dd9) (simple-struct-ref . xu2dd8) (make-simple-struct . xu2dd7) (simple-struct? . xu2dd6) (pointer-ref-c-int64 . xu2dd5) (pointer-ref-c-int32 . xu2dd4) (pointer-ref-c-int16 . xu2dd3) (pointer-ref-c-int8 . xu2dd2) (pointer-ref-c-uint64 . xu2dd1) (pointer-ref-c-uint32 . xu2dd0) (pointer-ref-c-uint16 . xu2dcf) (pointer-ref-c-uint8 . xu2dce) (pointer-set-c-uint64! . xu2dcd) (pointer-set-c-uint32! . xu2dcc) (pointer-set-c-uint16! . xu2dcb) (pointer-set-c-uint8! . xu2dca) (pointer-set-c-int64! . xu2dc9) (pointer-set-c-int32! . xu2dc8) (pointer-set-c-int16! . xu2dc7) (pointer-set-c-int8! . xu2dc6) (pointer-set-c-pointer! . xu2dc5) (pointer-set-c-double! . xu2dc4) (pointer-set-c-float! . xu2dc3) (pointer-set-c-long-long! . xu2dc2) (pointer-set-c-long! . xu2dc1) (pointer-set-c-int! . xu2dc0) (pointer-set-c-short! . xu2dbf) (pointer-set-c-char! . xu2dbe) (pointer-ref-c-pointer . xu2dbd) (pointer-ref-c-double . xu2dbc) (pointer-ref-c-float . xu2dbb) (pointer-ref-c-unsigned-long-long . xu2dba) (pointer-ref-c-signed-long-long . xu2db9) (pointer-ref-c-unsigned-long . xu2db8) (pointer-ref-c-signed-long . xu2db7) (pointer-ref-c-unsigned-int . xu2db6) (pointer-ref-c-signed-int . xu2db5) (pointer-ref-c-unsigned-short . xu2db4) (pointer-ref-c-signed-short . xu2db3) (pointer-ref-c-unsigned-char . xu2db2) (pointer-ref-c-signed-char . xu2db1) (pointer->integer . xu2db0) (integer->pointer . xu2daf) (pointer? . xu2dae) (shared-errno . xu2dad) (%ffi-free-c-callback-trampoline . xu2dac) (%ffi-make-c-callback-trampoline . xu2dab) (%ffi-free . xu2daa) (%ffi-malloc . xu2da9) (%ffi-supported? . xu2da8) (%ffi-pointer->string . xu2da7) (%ffi-call . xu2da6) (%ffi-lookup . xu2da5) (%ffi-open . xu2da4) (null-terminated-utf8->string . xu2da3) (null-terminated-bytevector->string . xu2da2) (%exec . xu2da1) (%fork . xu2da0) (%pipe . xu2d9f) (%confstr . xu2d9e) (%dup . xu2d9d) (p . xu2d9c) (open-output-string . xu2d9b) (get-output-string . xu2d9a) (file-stat-ctime . xu2d99) (file-stat-atime . xu2d98) (file-stat-mtime . xu2d97) (file-size-in-bytes . xu2d96) (file-writable? . xu2d95) (file-executable? . xu2d94) (file-readable? . xu2d93) (file-regular? . xu2d92) (file-symbolic-link? . xu2d91) (file-directory? . xu2d90) (create-symbolic-link . xu2d8f) (rename-file . xu2d8e) (delete-directory . xu2d8d) (create-directory . xu2d8c) (create-mosh-cache-dir . xu2d8b) (get-environment-variables . xu2d8a) (current-exception-handler . xu2d89) (get-environment-variable . xu2d88) (join-wraps . xu2d87) (id->real-label . xu2d86) (same-marks? . xu2d85) (same-marks*? . xu2d84) (get-timeofday . xu2d83) (get-command-line . xu2d82) (sys-display . xu2d81) (whereis . xu2d80) (register . xu2d7f) (vm-join! . xu2d7e) (vm-set-value! . xu2d7d) (vm? . xu2d7c) (main-vm? . xu2d7b) (vm-eval . xu2d7a) (vm-self . xu2d79) (vm-start! . xu2d78) (make-vm . xu2d77) (mutex-try-lock! . xu2d76) (mutex-unlock! . xu2d75) (mutex-lock! . xu2d74) (mutex? . xu2d73) (make-mutex . xu2d72) (condition-variable-notify-all! . xu2d71) (condition-variable-notify! . xu2d70) (condition-variable-wait! . xu2d6f) (make-condition-variable . xu2d6e) (write/ss . xu2d6d) (mosh-executable-path . xu2d6c) (make-file-options . xu2d6b) (source-info . xu2d6a) (make-compiler-instruction . xu2d69) (make-instruction . xu2d68) (set-annotation! . xu2d67) (get-annotation . xu2d66) (annotated-pair? . xu2d65) (annotated-cons . xu2d64) (set-source-info! . xu2d63) (bignum? . xu2d62) (fast-equal? . xu2d61) (fasl-read . xu2d60) (fasl-write . xu2d5f) (time-usage . xu2d5e) (os-constant . xu2d5d) (condition-printer . xu2d5c) (disasm . xu2d5b) (make-parameter . xu5b6) (socket-port . xu2d5a) (socket-shutdown . xu2d59) (socket-close . xu2d58) (socket-send . xu2d57) (socket-recv! . xu2d56) (socket-recv . xu2d55) (make-server-socket . xu2d54) (make-client-socket . xu2d53) (socket-accept . xu2d52) (socket? . xu2d51) (string-upcase . xu2d50) (string-titlecase . xu2d4f) (string-normalize-nfkd . xu2d4e) (string-normalize-nfkc . xu2d4d) (string-normalize-nfd . xu2d4c) (string-normalize-nfc . xu2d4b) (string-foldcase . xu2d4a) (string-downcase . xu2d49) (string-ci>? . xu2d48) (string-ci>=? . xu2d47) (string-ci=? . xu2d46) (string-ci<? . xu2d45) (string-ci<=? . xu2d44) (char-whitespace? . xu2d43) (char-upper-case? . xu2d42) (char-title-case? . xu2d41) (char-numeric? . xu2d40) (char-lower-case? . xu2d3f) (char-general-category . xu2d3e) (char-upcase . xu2d3d) (char-titlecase . xu2d3c) (char-foldcase . xu2d3b) (char-downcase . xu2d3a) (char-ci>? . xu2d39) (char-ci>=? . xu2d38) (char-ci=? . xu2d37) (char-ci<? . xu2d36) (char-ci<=? . xu2d35) (char-alphabetic? . xu2d34) (make-variable-transformer . xubba) (identifier? . xue71) (generate-temporaries . xue5d) (free-identifier=? . xue5f) (syntax->datum . xue75) (datum->syntax . xue73) (bound-identifier=? . xue61) (record-type-descriptor? . xu2d33) (record-predicate . xu2d32) (record-mutator . xu2d31) (record-constructor . xu2d30) (record-accessor . xu2d2f) (make-record-type-descriptor . xu2d2e) (make-record-constructor-descriptor . xu2d2d) (record? . xu2d2c) (record-type-uid . xu2d2b) (record-type-sealed? . xu2d2a) (record-type-parent . xu2d29) (record-type-opaque? . xu2d28) (record-type-name . xu2d27) (record-type-generative? . xu2d26) (record-type-field-names . xu2d25) (record-rtd . xu2d24) (record-field-mutable? . xu2d23) (delete-file . xu2d22) (file-exists? . xu2d21) (vector-sort! . xu2d20) (vector-sort . xu2d1f) (list-sort . xu2d1e) (symbol-hash . xu2d1d) (string-ci-hash . xu2d1c) (string-hash . xu2d1b) (equal-hash . xu2d1a) (hashtable-equivalence-function . xu2d19) (make-hashtable . xu2d18) (hashtable-hash-function . xu2d17) (make-eqv-hashtable . xu2d16) (make-eq-hashtable . xu2d15) (hashtable? . xu2d14) (hashtable-update! . xu2d13) (hashtable-size . xu2d12) (hashtable-set! . xu2d11) (hashtable-ref . xu2d10) (hashtable-mutable? . xu2d0f) (hashtable-keys . xu2d0e) (hashtable-entries . xu2d0d) (hashtable-delete! . xu2d0c) (hashtable-copy . xu2d0b) (hashtable-contains? . xu2d0a) (hashtable-clear! . xu2d09) (call-with-output-file . xu2d08) (call-with-input-file . xu2d07) (write-char . xu2d06) (write . xu2d05) (with-output-to-file . xu2d04) (with-input-from-file . xu2d03) (read-char . xu2d02) (read . xu2d01) (peek-char . xu2d00) (open-output-file . xu2cff) (open-input-file . xu2cfe) (newline . xu2cfd) (display . xu2cfc) (close-output-port . xu2cfb) (close-input-port . xu2cfa) (eof-object? . xu2cf9) (eof-object . xu2cf8) (current-error-port . xu2cf7) (current-output-port . xu2cf6) (current-input-port . xu2cf5) (output-port? . xu2cf4) (input-port? . xu2cf3) (utf-8-codec . xu2cf2) (utf-16-codec . xu2cf1) (transcoder-error-handling-mode . xu2cf0) (transcoder-eol-style . xu2cef) (transcoder-codec . xu2cee) (transcoded-port . xu2ced) (textual-port? . xu2cec) (string->bytevector . xu2ceb) (standard-output-port . xu2cea) (standard-input-port . xu2ce9) (standard-error-port . xu2ce8) (set-port-position! . xu2ce7) (put-u8 . xu2ce6) (put-string . xu2ce5) (put-datum . xu2ce4) (put-char . xu2ce3) (put-bytevector . xu2ce2) (port? . xu2ce1) (port-transcoder . xu2ce0) (port-position . xu2cdf) (port-has-set-port-position!? . xu2cde) (port-has-port-position? . xu2cdd) (port-eof? . xu2cdc) (output-port-buffer-mode . xu2cdb) (open-string-output-port . xu2cda) (open-string-input-port . xu2cd9) (open-file-output-port . xu2cd8) (open-file-input/output-port . xu2cd7) (open-file-input-port . xu2cd6) (open-bytevector-output-port . xu2cd5) (open-bytevector-input-port . xu2cd4) (native-transcoder . xu2cd3) (native-eol-style . xu2cd2) (make-transcoder . xu2cd1) (latin-1-codec . xu2cd0) (make-i/o-write-error . xu2ccf) (make-i/o-read-error . xu2cce) (make-i/o-port-error . xu2ccd) (make-i/o-invalid-position-error . xu2ccc) (make-i/o-filename-error . xu2ccb) (make-i/o-file-protection-error . xu2cca) (make-i/o-file-is-read-only-error . xu2cc9) (make-i/o-file-does-not-exist-error . xu2cc8) (make-i/o-file-already-exists-error . xu2cc7) (make-i/o-error . xu2cc6) (make-i/o-encoding-error . xu2cc5) (make-i/o-decoding-error . xu2cc4) (make-custom-textual-output-port . xu2cc3) (make-custom-textual-input/output-port . xu2cc2) (make-custom-textual-input-port . xu2cc1) (make-custom-binary-output-port . xu2cc0) (make-custom-binary-input/output-port . xu2cbf) (make-custom-binary-input-port . xu2cbe) (make-bytevector . xu2cbd) (lookahead-u8 . xu2cbc) (lookahead-char . xu2cbb) (i/o-write-error? . xu2cba) (i/o-read-error? . xu2cb9) (i/o-port-error? . xu2cb8) (i/o-invalid-position-error? . xu2cb7) (i/o-filename-error? . xu2cb6) (i/o-file-protection-error? . xu2cb5) (i/o-file-is-read-only-error? . xu2cb4) (i/o-file-does-not-exist-error? . xu2cb3) (i/o-file-already-exists-error? . xu2cb2) (i/o-error? . xu2cb1) (i/o-error-position . xu2cb0) (i/o-error-port . xu2caf) (i/o-error-filename . xu2cae) (i/o-encoding-error? . xu2cad) (i/o-encoding-error-char . xu2cac) (i/o-decoding-error? . xu2cab) (get-u8 . xu2caa) (get-string-n! . xu2ca9) (get-string-n . xu2ca8) (get-string-all . xu2ca7) (get-line . xu2ca6) (get-datum . xu2ca5) (get-char . xu2ca4) (get-bytevector-some . xu2ca3) (get-bytevector-n! . xu2ca2) (get-bytevector-n . xu2ca1) (get-bytevector-all . xu2ca0) (flush-output-port . xu2c9f) (close-port . xu2c9e) (scheme-report-environment . xue4b) (quotient . xu2c9d) (null-environment . xue49) (remainder . xu2c9c) (modulo . xu2c9b) (inexact->exact . xu2c9a) (force . xu2c99) (exact->inexact . xu2c98) (make-promise . xu2c97) (exit . xu2c96) (command-line . xu2928) (string-fill! . xu2c95) (string-set! . xu2c94) (set-cdr! . xu2c93) (set-car! . xu2c92) (remove . xu2c91) (remv . xu2c90) (remp . xu2c8f) (remq . xu2c8e) (partition . xu2c8d) (memv . xu2c8c) (memq . xu2c8b) (memp . xu2c8a) (member . xu2c89) (exists . xu2c88) (for-all . xu2c87) (fold-right . xu2c86) (fold-left . xu2c85) (find . xu2c84) (filter . xu2c83) (cons* . xu2c82) (assv . xu2c81) (assq . xu2c80) (assp . xu2c7f) (assoc . xu2c7e) (call-with-string-output-port . xu2c7d) (call-with-port . xu2c7c) (call-with-bytevector-output-port . xu2c7b) (bytevector->string . xu2c7a) (buffer-mode? . xu2c79) (binary-port? . xu2c78) (with-exception-handler . xu2c77) (raise-continuable . xu2c76) (raise . xu2c75) (eval . xue4f) (environment . xue47) (make-enumeration . xu2c74) (enum-set=? . xu2c73) (enum-set-universe . xu2c72) (enum-set-union . xu2c71) (enum-set-subset? . xu2c70) (enum-set-projection . xu2c6f) (enum-set-member? . xu2c6e) (enum-set-intersection . xu2c6d) (enum-set-indexer . xu2c6c) (enum-set-difference . xu2c6b) (enum-set-constructor . xu2c6a) (enum-set-complement . xu2c69) (enum-set->list . xu2c68) (who-condition? . xu2c67) (warning? . xu2c66) (violation? . xu2c65) (undefined-violation? . xu2c64) (syntax-violation? . xu2c63) (syntax-violation-subform . xu2c62) (syntax-violation-form . xu2c61) (syntax-violation . xue6f) (simple-conditions . xu2c60) (serious-condition? . xu2c5f) (non-continuable-violation? . xu2c5e) (message-condition? . xu2c5d) (make-who-condition . xu2c5c) (make-warning . xu2c5b) (make-violation . xu2c5a) (make-undefined-violation . xu2c59) (make-syntax-violation . xu2c58) (make-serious-condition . xu2c57) (make-non-continuable-violation . xu2c56) (make-message-condition . xu2c55) (make-lexical-violation . xu2c54) (make-irritants-condition . xu2c53) (make-implementation-restriction-violation . xu2c52) (make-error . xu2c51) (make-assertion-violation . xu2c50) (lexical-violation? . xu2c4f) (irritants-condition? . xu2c4e) (implementation-restriction-violation? . xu2c4d) (error? . xu2c4c) (condition-who . xu2c4b) (condition-predicate . xu2c4a) (condition-message . xu2c49) (condition-irritants . xu2c48) (condition-accessor . xu2c47) (condition . xu2c46) (assertion-violation? . xu2c45) (condition? . xu2c44) (utf32->string . xu2c43) (utf16->string . xu2c42) (utf8->string . xu2c41) (uint-list->bytevector . xu2c40) (u8-list->bytevector . xu2c3f) (string->utf8 . xu2c3e) (string->utf32 . xu2c3d) (string->utf16 . xu2c3c) (sint-list->bytevector . xu2c3b) (native-endianness . xu2c3a) (bytevector? . xu2c39) (bytevector=? . xu2c38) (bytevector-uint-set! . xu2c37) (bytevector-uint-ref . xu2c36) (bytevector-u8-set! . xu2c35) (bytevector-u8-ref . xu2c34) (bytevector-u64-set! . xu2c33) (bytevector-u64-ref . xu2c32) (bytevector-u64-native-set! . xu2c31) (bytevector-u64-native-ref . xu2c30) (bytevector-u32-set! . xu2c2f) (bytevector-u32-ref . xu2c2e) (bytevector-u32-native-set! . xu2c2d) (bytevector-u32-native-ref . xu2c2c) (bytevector-u16-set! . xu2c2b) (bytevector-u16-ref . xu2c2a) (bytevector-u16-native-set! . xu2c29) (bytevector-u16-native-ref . xu2c28) (bytevector-sint-set! . xu2c27) (bytevector-sint-ref . xu2c26) (bytevector-s8-set! . xu2c25) (bytevector-s8-ref . xu2c24) (bytevector-s64-set! . xu2c23) (bytevector-s64-ref . xu2c22) (bytevector-s64-native-set! . xu2c21) (bytevector-s64-native-ref . xu2c20) (bytevector-s32-set! . xu2c1f) (bytevector-s32-ref . xu2c1e) (bytevector-s32-native-set! . xu2c1d) (bytevector-s32-native-ref . xu2c1c) (bytevector-s16-set! . xu2c1b) (bytevector-s16-ref . xu2c1a) (bytevector-s16-native-set! . xu2c19) (bytevector-s16-native-ref . xu2c18) (bytevector-length . xu2c17) (bytevector-ieee-single-ref . xu2c16) (bytevector-ieee-single-set! . xu2c15) (bytevector-ieee-single-native-set! . xu2c14) (bytevector-ieee-single-native-ref . xu2c13) (bytevector-ieee-double-set! . xu2c12) (bytevector-ieee-double-ref . xu2c11) (bytevector-ieee-double-native-set! . xu2c10) (bytevector-ieee-double-native-ref . xu2c0f) (bytevector-fill! . xu2c0e) (bytevector-copy! . xu2c0d) (bytevector-copy . xu2c0c) (bytevector->uint-list . xu2c0b) (bytevector->u8-list . xu2c0a) (bytevector->sint-list . xu2c09) (no-nans-violation? . xu2c08) (no-infinities-violation? . xu2c07) (make-no-nans-violation . xu2c06) (make-no-infinities-violation . xu2c05) (real->flonum . xu2c04) (flzero? . xu2c03) (fltruncate . xu2c02) (fltan . xu2c01) (flsqrt . xu2c00) (flsin . xu2bff) (flround . xu2bfe) (flpositive? . xu2bfd) (flonum? . xu2bfc) (flodd? . xu2bfb) (flnumerator . xu2bfa) (flnegative? . xu2bf9) (flnan? . xu2bf8) (flmod0 . xu2bf7) (flmod . xu2bf6) (flmin . xu2bf5) (flmax . xu2bf4) (fllog . xu2bf3) (flinteger? . xu2bf2) (flinfinite? . xu2bf1) (flfloor . xu2bf0) (flfinite? . xu2bef) (flexpt . xu2bee) (flexp . xu2bed) (fleven? . xu2bec) (fldiv0-and-mod0 . xu2beb) (fldiv0 . xu2bea) (fldiv-and-mod . xu2be9) (fldiv . xu2be8) (fldenominator . xu2be7) (flcos . xu2be6) (flceiling . xu2be5) (flatan . xu2be4) (flasin . xu2be3) (flacos . xu2be2) (flabs . xu2be1) (fl>? . xu2be0) (fl>=? . xu2bdf) (fl=? . xu2bde) (fl<? . xu2bdd) (fl<=? . xu2bdc) (fl/ . xu2bdb) (fl- . xu2bda) (fl+ . xu2bd9) (fl* . xu2bd8) (fixnum->flonum . xu2bd7) (fxzero? . xu2bd6) (fxxor . xu2bd5) (fxrotate-bit-field . xu2bd4) (fxreverse-bit-field . xu2bd3) (fxpositive? . xu2bd2) (fxodd? . xu2bd1) (fxnot . xu2bd0) (fxnegative? . xu2bcf) (fxmod0 . xu2bce) (fxmod . xu2bcd) (fxmin . xu2bcc) (fxmax . xu2bcb) (fxlength . xu2bca) (fxior . xu2bc9) (fxif . xu2bc8) (fxfirst-bit-set . xu2bc7) (fxeven? . xu2bc6) (fxdiv0-and-mod0 . xu2bc5) (fxdiv0 . xu2bc4) (fxdiv-and-mod . xu2bc3) (fxdiv . xu2bc2) (fxcopy-bit-field . xu2bc1) (fxcopy-bit . xu2bc0) (fxbit-set? . xu2bbf) (fxbit-field . xu2bbe) (fxbit-count . xu2bbd) (fxarithmetic-shift-right . xu2bbc) (fxarithmetic-shift-left . xu2bbb) (fxarithmetic-shift . xu2bba) (fxand . xu2bb9) (fx>? . xu2bb8) (fx>=? . xu2bb7) (fx=? . xu2bb6) (fx<? . xu2bb5) (fx<=? . xu2bb4) (fx-/carry . xu2bb3) (fx- . xu2bb2) (fx+/carry . xu2bb1) (fx+ . xu2bb0) (fx*/carry . xu2baf) (fx* . xu2bae) (greatest-fixnum . xu2bad) (least-fixnum . xu2bac) (fixnum-width . xu2bab) (fixnum? . xu2baa) (bitwise-rotate-bit-field . xu2ba9) (bitwise-reverse-bit-field . xu2ba8) (bitwise-length . xu2ba7) (bitwise-if . xu2ba6) (bitwise-first-bit-set . xu2ba5) (bitwise-copy-bit-field . xu2ba4) (bitwise-copy-bit . xu2ba3) (bitwise-bit-set? . xu2ba2) (bitwise-bit-field . xu2ba1) (bitwise-bit-count . xu2ba0) (bitwise-xor . xu2b9f) (bitwise-ior . xu2b9e) (bitwise-and . xu2b9d) (bitwise-not . xu2b9c) (bitwise-arithmetic-shift-right . xu2b9b) (bitwise-arithmetic-shift-left . xu2b9a) (bitwise-arithmetic-shift . xu2b99) (zero? . xu2b98) (vector? . xu2b97) (vector-set! . xu2b96) (vector-ref . xu2b95) (vector-map . xu2b94) (vector-length . xu2b93) (vector-for-each . xu2b92) (vector-fill! . xu2b91) (vector->list . xu2b90) (vector . xu2b8f) (values . xu2b8e) (truncate . xu2b8d) (tan . xu2b8c) (symbol? . xu2b8b) (symbol=? . xu2b8a) (symbol->string . xu2b89) (substring . xu2b88) (string? . xu2b87) (string>? . xu2b86) (string>=? . xu2b85) (string=? . xu2b84) (string<? . xu2b83) (string<=? . xu2b82) (string-ref . xu2b81) (string-length . xu2b80) (string-for-each . xu2b7f) (string-copy . xu2b7e) (string-append . xu2b7d) (string->symbol . xu2b7c) (string->number . xu2b7b) (string->list . xu2b7a) (string . xu2b79) (sqrt . xu2b78) (sin . xu2b77) (round . xu2b76) (reverse . xu2b75) (real? . xu2b74) (real-valued? . xu2b73) (real-part . xu2b72) (rationalize . xu2b71) (rational? . xu2b70) (rational-valued? . xu2b6f) (procedure? . xu2b6e) (positive? . xu2b6d) (pair? . xu2b6c) (odd? . xu2b6b) (numerator . xu2b6a) (number? . xu2b69) (number->string . xu2b68) (null? . xu2b67) (not . xu2b66) (negative? . xu2b65) (nan? . xu2b64) (min . xu2b63) (max . xu2b62) (map . xu2b61) (make-vector . xu2b60) (make-string . xu2b5f) (make-rectangular . xu2b5e) (make-polar . xu2b5d) (magnitude . xu2b5c) (log . xu2b5b) (list? . xu2b5a) (list-tail . xu2b59) (list-ref . xu2b58) (list->vector . xu2b57) (list->string . xu2b56) (list . xu2b55) (length . xu2b54) (lcm . xu2b53) (integer? . xu2b52) (integer-valued? . xu2b51) (integer->char . xu2b50) (infinite? . xu2b4f) (inexact? . xu2b4e) (inexact . xu2b4d) (imag-part . xu2b4c) (gcd . xu2b4b) (for-each . xu2b4a) (floor . xu2b49) (finite? . xu2b48) (expt . xu2b47) (exp . xu2b46) (exact? . xu2b45) (exact-integer-sqrt . xu2b44) (exact . xu2b43) (even? . xu2b42) (error . xu2b41) (eqv? . xu2b40) (equal? . xu2b3f) (eq? . xu2b3e) (dynamic-wind . xu2b3d) (div0-and-mod0 . xu2b3c) (mod0 . xu2b3b) (div0 . xu2b3a) (div-and-mod . xu2b39) (mod . xu2b38) (div . xu2b37) (denominator . xu2b36) (cos . xu2b35) (cons . xu2b34) (complex? . xu2b33) (char? . xu2b32) (char>? . xu2b31) (char>=? . xu2b30) (char=? . xu2b2f) (char<? . xu2b2e) (char<=? . xu2b2d) (char->integer . xu2b2c) (ceiling . xu2b2b) (call-with-values . xu2b2a) (call/cc . xu2b29) (call-with-current-continuation . xu2b28) (cddddr . xu2b27) (cdddar . xu2b26) (cddadr . xu2b25) (cddaar . xu2b24) (cdaddr . xu2b23) (cdadar . xu2b22) (cdaadr . xu2b21) (cdaaar . xu2b20) (cadddr . xu2b1f) (caddar . xu2b1e) (cadadr . xu2b1d) (cadaar . xu2b1c) (caaddr . xu2b1b) (caadar . xu2b1a) (caaadr . xu2b19) (caaaar . xu2b18) (cdddr . xu2b17) (cddar . xu2b16) (cdadr . xu2b15) (cdaar . xu2b14) (caddr . xu2b13) (cadar . xu2b12) (caadr . xu2b11) (caaar . xu2b10) (cddr . xu2b0f) (cdar . xu2b0e) (cadr . xu2b0d) (caar . xu2b0c) (cdr . xu2b0b) (car . xu2b0a) (boolean? . xu2b09) (boolean=? . xu2b08) (atan . xu2b07) (assertion-violation . xu2b06) (assertion-error . xue69) (asin . xu2b05) (apply . xu2b04) (append . xu2b03) (angle . xu2b02) (acos . xu2b01) (abs . xu2b00) (/ . xu2aff) (* . xu2afe) (- . xu2afd) (+ . xu2afc) (>= . xu2afb) (> . xu2afa) (= . xu2af9) (<= . xu2af8) (< . xu2af7) (library . xu2af6) (&no-nans . xu2af5) (&no-infinities . xu2af4) (&i/o-encoding . xu2af3) (&i/o-decoding . xu2af2) (&i/o-port . xu2af1) (&i/o-file-does-not-exist . xu2af0) (&i/o-file-already-exists . xu2aef) (&i/o-file-is-read-only . xu2aee) (&i/o-file-protection . xu2aed) (&i/o-filename . xu2aec) (&i/o-invalid-position . xu2aeb) (&i/o-write . xu2aea) (&i/o-read . xu2ae9) (&i/o . xu2ae8) (&undefined . xu2ae7) (&syntax . xu2ae6) (&lexical . xu2ae5) (&implementation-restriction . xu2ae4) (&non-continuable . xu2ae3) (&who . xu2ae2) (&irritants . xu2ae1) (&assertion . xu2ae0) (&violation . xu2adf) (&error . xu2ade) (&serious . xu2add) (&warning . xu2adc) (&message . xu2adb) (&condition . xu2ada) (define-condition-type . xu2ad9) (define-enumeration . xu2ad8) (define-record-type . xu2ad7) (parent-rtd . xu2ad6) (nongenerative . xu2ad5) (opaque . xu2ad4) (sealed . xu2ad3) (protocol . xu2ad2) (parent . xu2ad1) (immutable . xu2ad0) (mutable . xu2acf) (fields . xu2ace) (error-handling-mode . xu2acd) (file-options . xu2acc) (buffer-mode . xu2acb) (eol-style . xu2aca) (guard . xu2ac9) (trace-define . xu2ac8) (trace-lambda . xu2ac7) (unsyntax-splicing . xu2ac6) (unsyntax . xu2ac5) (unquote-splicing . xu2ac4) (unquote . xu2ac3) (_ . xu2ac2) (else . xu2ac1) (=> . xu2ac0) (... . xu2abf) (assert . xu2abe) (endianness . xu2abd) (delay . xu2abc) (time . xu2abb) (do . xu2aba) (cond . xu2ab9) (let* . xu2ab8) (let*-values . xu2ab7) (let-values . xu2ab6) (identifier-syntax . xu2ab5) (with-syntax . xu2ab4) (quasisyntax . xu2ab3) (quasiquote . xu2ab2) (syntax-rules . xu2ab1) (include . xu2ab0) (define-struct . xu2aaf) (record-constructor-descriptor . xu2aae) (record-type-descriptor . xu2aad) (case . xu2aac) (parameterize . xu2aab) (unless . xu2aaa) (when . xu2aa9) (or . xu2aa8) (and . xu2aa7) (if . xu2aa6) (let . xu2aa5) (letrec* . xu2aa4) (letrec . xu2aa3) (type-descriptor . xu2aa2) (case-lambda . xu2aa1) (lambda . xu2aa0) (syntax . xu2a9f) (syntax-case . xu2a9e) (quote . xu2a9d) (foreign-call . xu2a9c) (letrec-syntax . xu2a9b) (let-syntax . xu2a9a) (set! . xu2a99) (import . xu2a98) (begin . xu2a97) (module . xu2a96) (define-syntax . xu2a95) (define . xu2a94)) '((xu2e4b core-prim . &no-nans-rcd) (xu2e4a core-prim . &no-nans-rtd) (xu2e49 core-prim . &no-infinities-rcd) (xu2e48 core-prim . &no-infinities-rtd) (xu2e47 core-prim . &i/o-encoding-rcd) (xu2e46 core-prim . &i/o-encoding-rtd) (xu2e45 core-prim . &i/o-decoding-rcd) (xu2e44 core-prim . &i/o-decoding-rtd) (xu2e43 core-prim . &i/o-port-rcd) (xu2e42 core-prim . &i/o-port-rtd) (xu2e41 core-prim . &i/o-file-does-not-exist-rcd) (xu2e40 core-prim . &i/o-file-does-not-exist-rtd) (xu2e3f core-prim . &i/o-file-already-exists-rcd) (xu2e3e core-prim . &i/o-file-already-exists-rtd) (xu2e3d core-prim . &i/o-file-is-read-only-rcd) (xu2e3c core-prim . &i/o-file-is-read-only-rtd) (xu2e3b core-prim . &i/o-file-protection-rcd) (xu2e3a core-prim . &i/o-file-protection-rtd) (xu2e39 core-prim . &i/o-filename-rcd) (xu2e38 core-prim . &i/o-filename-rtd) (xu2e37 core-prim . &i/o-invalid-position-rcd) (xu2e36 core-prim . &i/o-invalid-position-rtd) (xu2e35 core-prim . &i/o-write-rcd) (xu2e34 core-prim . &i/o-write-rtd) (xu2e33 core-prim . &i/o-read-rcd) (xu2e32 core-prim . &i/o-read-rtd) (xu2e31 core-prim . &i/o-rcd) (xu2e30 core-prim . &i/o-rtd) (xu2e2f core-prim . &undefined-rcd) (xu2e2e core-prim . &undefined-rtd) (xu2e2d core-prim . &syntax-rcd) (xu2e2c core-prim . &syntax-rtd) (xu2e2b core-prim . &lexical-rcd) (xu2e2a core-prim . &lexical-rtd) (xu2e29 core-prim . &implementation-restriction-rcd) (xu2e28 core-prim . &implementation-restriction-rtd) (xu2e27 core-prim . &non-continuable-rcd) (xu2e26 core-prim . &non-continuable-rtd) (xu2e25 core-prim . &who-rcd) (xu2e24 core-prim . &who-rtd) (xu2e23 core-prim . &irritants-rcd) (xu2e22 core-prim . &irritants-rtd) (xu2e21 core-prim . &assertion-rcd) (xu2e20 core-prim . &assertion-rtd) (xu2e1f core-prim . &violation-rcd) (xu2e1e core-prim . &violation-rtd) (xu2e1d core-prim . &error-rcd) (xu2e1c core-prim . &error-rtd) (xu2e1b core-prim . &serious-rcd) (xu2e1a core-prim . &serious-rtd) (xu2e19 core-prim . &warning-rcd) (xu2e18 core-prim . &warning-rtd) (xu2e17 core-prim . &message-rcd) (xu2e16 core-prim . &message-rtd) (xu2e15 core-prim . &condition-rcd) (xu2e14 core-prim . &condition-rtd) (xue6b core-prim . syntax-error) (xud8f core-prim . syntax-dispatch) (xu2e13 core-prim . pretty-print) (xu2e12 core-prim . eval-core) (xu2e11 core-prim . set-symbol-value!) (xu2e10 core-prim . symbol-value) (xu2e0f core-prim . gensym) (xu2e0e core-prim . void) (xu292e core-prim . load) (xue7d core-prim . interaction-environment) (xu2e0d core-prim . char-ready?) (xu2e0c core-prim . regexp?) (xu2e0b core-prim . read-line) (xu2e0a core-prim . gensym-prefix-set!) (xu2e09 core-prim . ungensym) (xu2e08 core-prim . alist->eq-hash-table) (xu2e07 core-prim . assoc-ref) (xu2e06 core-prim . print) (xu2e05 core-prim . format) (xu2e04 core-prim . host-os) (xu7ce core-prim . library-path) (xu2e03 core-prim . standard-library-path) (xu2e02 core-prim . ssl-supported?) (xu2e01 core-prim . ssl-socket?) (xu2e00 core-prim . socket-sslize!) (xu2dff core-prim . %monapi-stream-read) (xu2dfe core-prim . %monapi-stream-write) (xu2dfd core-prim . %monapi-stream-handle) (xu2dfc core-prim . %monapi-make-stream) (xu2dfb core-prim . %monapi-name-add!) (xu2dfa core-prim . %monapi-message-receive) (xu2df9 core-prim . %monapi-name-whereis) (xu2df8 core-prim . %monapi-message-reply) (xu2df7 core-prim . %monapi-message-send-receive) (xu2df6 core-prim . %monapi-message-send) (xu2df5 core-prim . process-terminate!) (xu2df4 core-prim . process-list) (xu2df3 core-prim . file-newer?) (xu2df2 core-prim . stat-mtime) (xu2df1 core-prim . write-to-file) (xu2df0 core-prim . file->list) (xu2def core-prim . file->string) (xu2dee core-prim . digit->integer) (xu2ded core-prim . call-with-string-input-port) (xu2dec core-prim . call-with-string-io) (xu2deb core-prim . string-split) (xu2dea core-prim . bytevector-for-each) (xu2de9 core-prim . string->regexp) (xu2de8 core-prim . rxmatch) (xu2de7 core-prim . regexp-replace-all) (xu2de6 core-prim . hashtable-fold-left) (xu2de5 core-prim . hashtable-for-each) (xu5b8 core-prim . mosh-cache-dir) (xu2de4 core-prim . %start-process) (xu2de3 core-prim . %call-process) (xu2de2 core-prim . local-tz-offset) (xu2de1 core-prim . microseconds) (xu2de0 core-prim . directory-list) (xu2ddf core-prim . set-current-directory!) (xu2dde core-prim . expand-path) (xu2ddd core-prim . current-directory) (xu2ddc core-prim . %getpid) (xu2ddb core-prim . %waitpid) (xu2dda core-prim . simple-struct-name) (xu2dd9 core-prim . simple-struct-set!) (xu2dd8 core-prim . simple-struct-ref) (xu2dd7 core-prim . make-simple-struct) (xu2dd6 core-prim . simple-struct?) (xu2dd5 core-prim . pointer-ref-c-int64) (xu2dd4 core-prim . pointer-ref-c-int32) (xu2dd3 core-prim . pointer-ref-c-int16) (xu2dd2 core-prim . pointer-ref-c-int8) (xu2dd1 core-prim . pointer-ref-c-uint64) (xu2dd0 core-prim . pointer-ref-c-uint32) (xu2dcf core-prim . pointer-ref-c-uint16) (xu2dce core-prim . pointer-ref-c-uint8) (xu2dcd core-prim . pointer-set-c-uint64!) (xu2dcc core-prim . pointer-set-c-uint32!) (xu2dcb core-prim . pointer-set-c-uint16!) (xu2dca core-prim . pointer-set-c-uint8!) (xu2dc9 core-prim . pointer-set-c-int64!) (xu2dc8 core-prim . pointer-set-c-int32!) (xu2dc7 core-prim . pointer-set-c-int16!) (xu2dc6 core-prim . pointer-set-c-int8!) (xu2dc5 core-prim . pointer-set-c-pointer!) (xu2dc4 core-prim . pointer-set-c-double!) (xu2dc3 core-prim . pointer-set-c-float!) (xu2dc2 core-prim . pointer-set-c-long-long!) (xu2dc1 core-prim . pointer-set-c-long!) (xu2dc0 core-prim . pointer-set-c-int!) (xu2dbf core-prim . pointer-set-c-short!) (xu2dbe core-prim . pointer-set-c-char!) (xu2dbd core-prim . pointer-ref-c-pointer) (xu2dbc core-prim . pointer-ref-c-double) (xu2dbb core-prim . pointer-ref-c-float) (xu2dba core-prim . pointer-ref-c-unsigned-long-long) (xu2db9 core-prim . pointer-ref-c-signed-long-long) (xu2db8 core-prim . pointer-ref-c-unsigned-long) (xu2db7 core-prim . pointer-ref-c-signed-long) (xu2db6 core-prim . pointer-ref-c-unsigned-int) (xu2db5 core-prim . pointer-ref-c-signed-int) (xu2db4 core-prim . pointer-ref-c-unsigned-short) (xu2db3 core-prim . pointer-ref-c-signed-short) (xu2db2 core-prim . pointer-ref-c-unsigned-char) (xu2db1 core-prim . pointer-ref-c-signed-char) (xu2db0 core-prim . pointer->integer) (xu2daf core-prim . integer->pointer) (xu2dae core-prim . pointer?) (xu2dad core-prim . shared-errno) (xu2dac core-prim . %ffi-free-c-callback-trampoline) (xu2dab core-prim . %ffi-make-c-callback-trampoline) (xu2daa core-prim . %ffi-free) (xu2da9 core-prim . %ffi-malloc) (xu2da8 core-prim . %ffi-supported?) (xu2da7 core-prim . %ffi-pointer->string) (xu2da6 core-prim . %ffi-call) (xu2da5 core-prim . %ffi-lookup) (xu2da4 core-prim . %ffi-open) (xu2da3 core-prim . null-terminated-utf8->string) (xu2da2 core-prim . null-terminated-bytevector->string) (xu2da1 core-prim . %exec) (xu2da0 core-prim . %fork) (xu2d9f core-prim . %pipe) (xu2d9e core-prim . %confstr) (xu2d9d core-prim . %dup) (xu2d9c core-prim . p) (xu2d9b core-prim . open-output-string) (xu2d9a core-prim . get-output-string) (xu2d99 core-prim . file-stat-ctime) (xu2d98 core-prim . file-stat-atime) (xu2d97 core-prim . file-stat-mtime) (xu2d96 core-prim . file-size-in-bytes) (xu2d95 core-prim . file-writable?) (xu2d94 core-prim . file-executable?) (xu2d93 core-prim . file-readable?) (xu2d92 core-prim . file-regular?) (xu2d91 core-prim . file-symbolic-link?) (xu2d90 core-prim . file-directory?) (xu2d8f core-prim . create-symbolic-link) (xu2d8e core-prim . rename-file) (xu2d8d core-prim . delete-directory) (xu2d8c core-prim . create-directory) (xu2d8b core-prim . create-mosh-cache-dir) (xu2d8a core-prim . get-environment-variables) (xu2d89 core-prim . current-exception-handler) (xu2d88 core-prim . get-environment-variable) (xu2d87 core-prim . join-wraps) (xu2d86 core-prim . id->real-label) (xu2d85 core-prim . same-marks?) (xu2d84 core-prim . same-marks*?) (xu2d83 core-prim . get-timeofday) (xu2d82 core-prim . get-command-line) (xu2d81 core-prim . sys-display) (xu2d80 core-prim . whereis) (xu2d7f core-prim . register) (xu2d7e core-prim . vm-join!) (xu2d7d core-prim . vm-set-value!) (xu2d7c core-prim . vm?) (xu2d7b core-prim . main-vm?) (xu2d7a core-prim . vm-eval) (xu2d79 core-prim . vm-self) (xu2d78 core-prim . vm-start!) (xu2d77 core-prim . make-vm) (xu2d76 core-prim . mutex-try-lock!) (xu2d75 core-prim . mutex-unlock!) (xu2d74 core-prim . mutex-lock!) (xu2d73 core-prim . mutex?) (xu2d72 core-prim . make-mutex) (xu2d71 core-prim . condition-variable-notify-all!) (xu2d70 core-prim . condition-variable-notify!) (xu2d6f core-prim . condition-variable-wait!) (xu2d6e core-prim . make-condition-variable) (xu2d6d core-prim . write/ss) (xu2d6c core-prim . mosh-executable-path) (xu2d6b core-prim . make-file-options) (xu2d6a core-prim . source-info) (xu2d69 core-prim . make-compiler-instruction) (xu2d68 core-prim . make-instruction) (xu2d67 core-prim . set-annotation!) (xu2d66 core-prim . get-annotation) (xu2d65 core-prim . annotated-pair?) (xu2d64 core-prim . annotated-cons) (xu2d63 core-prim . set-source-info!) (xu2d62 core-prim . bignum?) (xu2d61 core-prim . fast-equal?) (xu2d60 core-prim . fasl-read) (xu2d5f core-prim . fasl-write) (xu2d5e core-prim . time-usage) (xu2d5d core-prim . os-constant) (xu2d5c core-prim . condition-printer) (xu2d5b core-prim . disasm) (xu5b6 core-prim . make-parameter) (xu2d5a core-prim . socket-port) (xu2d59 core-prim . socket-shutdown) (xu2d58 core-prim . socket-close) (xu2d57 core-prim . socket-send) (xu2d56 core-prim . socket-recv!) (xu2d55 core-prim . socket-recv) (xu2d54 core-prim . make-server-socket) (xu2d53 core-prim . make-client-socket) (xu2d52 core-prim . socket-accept) (xu2d51 core-prim . socket?) (xu2d50 core-prim . string-upcase) (xu2d4f core-prim . string-titlecase) (xu2d4e core-prim . string-normalize-nfkd) (xu2d4d core-prim . string-normalize-nfkc) (xu2d4c core-prim . string-normalize-nfd) (xu2d4b core-prim . string-normalize-nfc) (xu2d4a core-prim . string-foldcase) (xu2d49 core-prim . string-downcase) (xu2d48 core-prim . string-ci>?) (xu2d47 core-prim . string-ci>=?) (xu2d46 core-prim . string-ci=?) (xu2d45 core-prim . string-ci<?) (xu2d44 core-prim . string-ci<=?) (xu2d43 core-prim . char-whitespace?) (xu2d42 core-prim . char-upper-case?) (xu2d41 core-prim . char-title-case?) (xu2d40 core-prim . char-numeric?) (xu2d3f core-prim . char-lower-case?) (xu2d3e core-prim . char-general-category) (xu2d3d core-prim . char-upcase) (xu2d3c core-prim . char-titlecase) (xu2d3b core-prim . char-foldcase) (xu2d3a core-prim . char-downcase) (xu2d39 core-prim . char-ci>?) (xu2d38 core-prim . char-ci>=?) (xu2d37 core-prim . char-ci=?) (xu2d36 core-prim . char-ci<?) (xu2d35 core-prim . char-ci<=?) (xu2d34 core-prim . char-alphabetic?) (xubba core-prim . make-variable-transformer) (xue71 core-prim . identifier?) (xue5d core-prim . generate-temporaries) (xue5f core-prim . free-identifier=?) (xue75 core-prim . syntax->datum) (xue73 core-prim . datum->syntax) (xue61 core-prim . bound-identifier=?) (xu2d33 core-prim . record-type-descriptor?) (xu2d32 core-prim . record-predicate) (xu2d31 core-prim . record-mutator) (xu2d30 core-prim . record-constructor) (xu2d2f core-prim . record-accessor) (xu2d2e core-prim . make-record-type-descriptor) (xu2d2d core-prim . make-record-constructor-descriptor) (xu2d2c core-prim . record?) (xu2d2b core-prim . record-type-uid) (xu2d2a core-prim . record-type-sealed?) (xu2d29 core-prim . record-type-parent) (xu2d28 core-prim . record-type-opaque?) (xu2d27 core-prim . record-type-name) (xu2d26 core-prim . record-type-generative?) (xu2d25 core-prim . record-type-field-names) (xu2d24 core-prim . record-rtd) (xu2d23 core-prim . record-field-mutable?) (xu2d22 core-prim . delete-file) (xu2d21 core-prim . file-exists?) (xu2d20 core-prim . vector-sort!) (xu2d1f core-prim . vector-sort) (xu2d1e core-prim . list-sort) (xu2d1d core-prim . symbol-hash) (xu2d1c core-prim . string-ci-hash) (xu2d1b core-prim . string-hash) (xu2d1a core-prim . equal-hash) (xu2d19 core-prim . hashtable-equivalence-function) (xu2d18 core-prim . make-hashtable) (xu2d17 core-prim . hashtable-hash-function) (xu2d16 core-prim . make-eqv-hashtable) (xu2d15 core-prim . make-eq-hashtable) (xu2d14 core-prim . hashtable?) (xu2d13 core-prim . hashtable-update!) (xu2d12 core-prim . hashtable-size) (xu2d11 core-prim . hashtable-set!) (xu2d10 core-prim . hashtable-ref) (xu2d0f core-prim . hashtable-mutable?) (xu2d0e core-prim . hashtable-keys) (xu2d0d core-prim . hashtable-entries) (xu2d0c core-prim . hashtable-delete!) (xu2d0b core-prim . hashtable-copy) (xu2d0a core-prim . hashtable-contains?) (xu2d09 core-prim . hashtable-clear!) (xu2d08 core-prim . call-with-output-file) (xu2d07 core-prim . call-with-input-file) (xu2d06 core-prim . write-char) (xu2d05 core-prim . write) (xu2d04 core-prim . with-output-to-file) (xu2d03 core-prim . with-input-from-file) (xu2d02 core-prim . read-char) (xu2d01 core-prim . read) (xu2d00 core-prim . peek-char) (xu2cff core-prim . open-output-file) (xu2cfe core-prim . open-input-file) (xu2cfd core-prim . newline) (xu2cfc core-prim . display) (xu2cfb core-prim . close-output-port) (xu2cfa core-prim . close-input-port) (xu2cf9 core-prim . eof-object?) (xu2cf8 core-prim . eof-object) (xu2cf7 core-prim . current-error-port) (xu2cf6 core-prim . current-output-port) (xu2cf5 core-prim . current-input-port) (xu2cf4 core-prim . output-port?) (xu2cf3 core-prim . input-port?) (xu2cf2 core-prim . utf-8-codec) (xu2cf1 core-prim . utf-16-codec) (xu2cf0 core-prim . transcoder-error-handling-mode) (xu2cef core-prim . transcoder-eol-style) (xu2cee core-prim . transcoder-codec) (xu2ced core-prim . transcoded-port) (xu2cec core-prim . textual-port?) (xu2ceb core-prim . string->bytevector) (xu2cea core-prim . standard-output-port) (xu2ce9 core-prim . standard-input-port) (xu2ce8 core-prim . standard-error-port) (xu2ce7 core-prim . set-port-position!) (xu2ce6 core-prim . put-u8) (xu2ce5 core-prim . put-string) (xu2ce4 core-prim . put-datum) (xu2ce3 core-prim . put-char) (xu2ce2 core-prim . put-bytevector) (xu2ce1 core-prim . port?) (xu2ce0 core-prim . port-transcoder) (xu2cdf core-prim . port-position) (xu2cde core-prim . port-has-set-port-position!?) (xu2cdd core-prim . port-has-port-position?) (xu2cdc core-prim . port-eof?) (xu2cdb core-prim . output-port-buffer-mode) (xu2cda core-prim . open-string-output-port) (xu2cd9 core-prim . open-string-input-port) (xu2cd8 core-prim . open-file-output-port) (xu2cd7 core-prim . open-file-input/output-port) (xu2cd6 core-prim . open-file-input-port) (xu2cd5 core-prim . open-bytevector-output-port) (xu2cd4 core-prim . open-bytevector-input-port) (xu2cd3 core-prim . native-transcoder) (xu2cd2 core-prim . native-eol-style) (xu2cd1 core-prim . make-transcoder) (xu2cd0 core-prim . latin-1-codec) (xu2ccf core-prim . make-i/o-write-error) (xu2cce core-prim . make-i/o-read-error) (xu2ccd core-prim . make-i/o-port-error) (xu2ccc core-prim . make-i/o-invalid-position-error) (xu2ccb core-prim . make-i/o-filename-error) (xu2cca core-prim . make-i/o-file-protection-error) (xu2cc9 core-prim . make-i/o-file-is-read-only-error) (xu2cc8 core-prim . make-i/o-file-does-not-exist-error) (xu2cc7 core-prim . make-i/o-file-already-exists-error) (xu2cc6 core-prim . make-i/o-error) (xu2cc5 core-prim . make-i/o-encoding-error) (xu2cc4 core-prim . make-i/o-decoding-error) (xu2cc3 core-prim . make-custom-textual-output-port) (xu2cc2 core-prim . make-custom-textual-input/output-port) (xu2cc1 core-prim . make-custom-textual-input-port) (xu2cc0 core-prim . make-custom-binary-output-port) (xu2cbf core-prim . make-custom-binary-input/output-port) (xu2cbe core-prim . make-custom-binary-input-port) (xu2cbd core-prim . make-bytevector) (xu2cbc core-prim . lookahead-u8) (xu2cbb core-prim . lookahead-char) (xu2cba core-prim . i/o-write-error?) (xu2cb9 core-prim . i/o-read-error?) (xu2cb8 core-prim . i/o-port-error?) (xu2cb7 core-prim . i/o-invalid-position-error?) (xu2cb6 core-prim . i/o-filename-error?) (xu2cb5 core-prim . i/o-file-protection-error?) (xu2cb4 core-prim . i/o-file-is-read-only-error?) (xu2cb3 core-prim . i/o-file-does-not-exist-error?) (xu2cb2 core-prim . i/o-file-already-exists-error?) (xu2cb1 core-prim . i/o-error?) (xu2cb0 core-prim . i/o-error-position) (xu2caf core-prim . i/o-error-port) (xu2cae core-prim . i/o-error-filename) (xu2cad core-prim . i/o-encoding-error?) (xu2cac core-prim . i/o-encoding-error-char) (xu2cab core-prim . i/o-decoding-error?) (xu2caa core-prim . get-u8) (xu2ca9 core-prim . get-string-n!) (xu2ca8 core-prim . get-string-n) (xu2ca7 core-prim . get-string-all) (xu2ca6 core-prim . get-line) (xu2ca5 core-prim . get-datum) (xu2ca4 core-prim . get-char) (xu2ca3 core-prim . get-bytevector-some) (xu2ca2 core-prim . get-bytevector-n!) (xu2ca1 core-prim . get-bytevector-n) (xu2ca0 core-prim . get-bytevector-all) (xu2c9f core-prim . flush-output-port) (xu2c9e core-prim . close-port) (xue4b core-prim . scheme-report-environment) (xu2c9d core-prim . quotient) (xue49 core-prim . null-environment) (xu2c9c core-prim . remainder) (xu2c9b core-prim . modulo) (xu2c9a core-prim . inexact->exact) (xu2c99 core-prim . force) (xu2c98 core-prim . exact->inexact) (xu2c97 core-prim . make-promise) (xu2c96 core-prim . exit) (xu2928 core-prim . command-line) (xu2c95 core-prim . string-fill!) (xu2c94 core-prim . string-set!) (xu2c93 core-prim . set-cdr!) (xu2c92 core-prim . set-car!) (xu2c91 core-prim . remove) (xu2c90 core-prim . remv) (xu2c8f core-prim . remp) (xu2c8e core-prim . remq) (xu2c8d core-prim . partition) (xu2c8c core-prim . memv) (xu2c8b core-prim . memq) (xu2c8a core-prim . memp) (xu2c89 core-prim . member) (xu2c88 core-prim . exists) (xu2c87 core-prim . for-all) (xu2c86 core-prim . fold-right) (xu2c85 core-prim . fold-left) (xu2c84 core-prim . find) (xu2c83 core-prim . filter) (xu2c82 core-prim . cons*) (xu2c81 core-prim . assv) (xu2c80 core-prim . assq) (xu2c7f core-prim . assp) (xu2c7e core-prim . assoc) (xu2c7d core-prim . call-with-string-output-port) (xu2c7c core-prim . call-with-port) (xu2c7b core-prim . call-with-bytevector-output-port) (xu2c7a core-prim . bytevector->string) (xu2c79 core-prim . buffer-mode?) (xu2c78 core-prim . binary-port?) (xu2c77 core-prim . with-exception-handler) (xu2c76 core-prim . raise-continuable) (xu2c75 core-prim . raise) (xue4f core-prim . eval) (xue47 core-prim . environment) (xu2c74 core-prim . make-enumeration) (xu2c73 core-prim . enum-set=?) (xu2c72 core-prim . enum-set-universe) (xu2c71 core-prim . enum-set-union) (xu2c70 core-prim . enum-set-subset?) (xu2c6f core-prim . enum-set-projection) (xu2c6e core-prim . enum-set-member?) (xu2c6d core-prim . enum-set-intersection) (xu2c6c core-prim . enum-set-indexer) (xu2c6b core-prim . enum-set-difference) (xu2c6a core-prim . enum-set-constructor) (xu2c69 core-prim . enum-set-complement) (xu2c68 core-prim . enum-set->list) (xu2c67 core-prim . who-condition?) (xu2c66 core-prim . warning?) (xu2c65 core-prim . violation?) (xu2c64 core-prim . undefined-violation?) (xu2c63 core-prim . syntax-violation?) (xu2c62 core-prim . syntax-violation-subform) (xu2c61 core-prim . syntax-violation-form) (xue6f core-prim . syntax-violation) (xu2c60 core-prim . simple-conditions) (xu2c5f core-prim . serious-condition?) (xu2c5e core-prim . non-continuable-violation?) (xu2c5d core-prim . message-condition?) (xu2c5c core-prim . make-who-condition) (xu2c5b core-prim . make-warning) (xu2c5a core-prim . make-violation) (xu2c59 core-prim . make-undefined-violation) (xu2c58 core-prim . make-syntax-violation) (xu2c57 core-prim . make-serious-condition) (xu2c56 core-prim . make-non-continuable-violation) (xu2c55 core-prim . make-message-condition) (xu2c54 core-prim . make-lexical-violation) (xu2c53 core-prim . make-irritants-condition) (xu2c52 core-prim . make-implementation-restriction-violation) (xu2c51 core-prim . make-error) (xu2c50 core-prim . make-assertion-violation) (xu2c4f core-prim . lexical-violation?) (xu2c4e core-prim . irritants-condition?) (xu2c4d core-prim . implementation-restriction-violation?) (xu2c4c core-prim . error?) (xu2c4b core-prim . condition-who) (xu2c4a core-prim . condition-predicate) (xu2c49 core-prim . condition-message) (xu2c48 core-prim . condition-irritants) (xu2c47 core-prim . condition-accessor) (xu2c46 core-prim . condition) (xu2c45 core-prim . assertion-violation?) (xu2c44 core-prim . condition?) (xu2c43 core-prim . utf32->string) (xu2c42 core-prim . utf16->string) (xu2c41 core-prim . utf8->string) (xu2c40 core-prim . uint-list->bytevector) (xu2c3f core-prim . u8-list->bytevector) (xu2c3e core-prim . string->utf8) (xu2c3d core-prim . string->utf32) (xu2c3c core-prim . string->utf16) (xu2c3b core-prim . sint-list->bytevector) (xu2c3a core-prim . native-endianness) (xu2c39 core-prim . bytevector?) (xu2c38 core-prim . bytevector=?) (xu2c37 core-prim . bytevector-uint-set!) (xu2c36 core-prim . bytevector-uint-ref) (xu2c35 core-prim . bytevector-u8-set!) (xu2c34 core-prim . bytevector-u8-ref) (xu2c33 core-prim . bytevector-u64-set!) (xu2c32 core-prim . bytevector-u64-ref) (xu2c31 core-prim . bytevector-u64-native-set!) (xu2c30 core-prim . bytevector-u64-native-ref) (xu2c2f core-prim . bytevector-u32-set!) (xu2c2e core-prim . bytevector-u32-ref) (xu2c2d core-prim . bytevector-u32-native-set!) (xu2c2c core-prim . bytevector-u32-native-ref) (xu2c2b core-prim . bytevector-u16-set!) (xu2c2a core-prim . bytevector-u16-ref) (xu2c29 core-prim . bytevector-u16-native-set!) (xu2c28 core-prim . bytevector-u16-native-ref) (xu2c27 core-prim . bytevector-sint-set!) (xu2c26 core-prim . bytevector-sint-ref) (xu2c25 core-prim . bytevector-s8-set!) (xu2c24 core-prim . bytevector-s8-ref) (xu2c23 core-prim . bytevector-s64-set!) (xu2c22 core-prim . bytevector-s64-ref) (xu2c21 core-prim . bytevector-s64-native-set!) (xu2c20 core-prim . bytevector-s64-native-ref) (xu2c1f core-prim . bytevector-s32-set!) (xu2c1e core-prim . bytevector-s32-ref) (xu2c1d core-prim . bytevector-s32-native-set!) (xu2c1c core-prim . bytevector-s32-native-ref) (xu2c1b core-prim . bytevector-s16-set!) (xu2c1a core-prim . bytevector-s16-ref) (xu2c19 core-prim . bytevector-s16-native-set!) (xu2c18 core-prim . bytevector-s16-native-ref) (xu2c17 core-prim . bytevector-length) (xu2c16 core-prim . bytevector-ieee-single-ref) (xu2c15 core-prim . bytevector-ieee-single-set!) (xu2c14 core-prim . bytevector-ieee-single-native-set!) (xu2c13 core-prim . bytevector-ieee-single-native-ref) (xu2c12 core-prim . bytevector-ieee-double-set!) (xu2c11 core-prim . bytevector-ieee-double-ref) (xu2c10 core-prim . bytevector-ieee-double-native-set!) (xu2c0f core-prim . bytevector-ieee-double-native-ref) (xu2c0e core-prim . bytevector-fill!) (xu2c0d core-prim . bytevector-copy!) (xu2c0c core-prim . bytevector-copy) (xu2c0b core-prim . bytevector->uint-list) (xu2c0a core-prim . bytevector->u8-list) (xu2c09 core-prim . bytevector->sint-list) (xu2c08 core-prim . no-nans-violation?) (xu2c07 core-prim . no-infinities-violation?) (xu2c06 core-prim . make-no-nans-violation) (xu2c05 core-prim . make-no-infinities-violation) (xu2c04 core-prim . real->flonum) (xu2c03 core-prim . flzero?) (xu2c02 core-prim . fltruncate) (xu2c01 core-prim . fltan) (xu2c00 core-prim . flsqrt) (xu2bff core-prim . flsin) (xu2bfe core-prim . flround) (xu2bfd core-prim . flpositive?) (xu2bfc core-prim . flonum?) (xu2bfb core-prim . flodd?) (xu2bfa core-prim . flnumerator) (xu2bf9 core-prim . flnegative?) (xu2bf8 core-prim . flnan?) (xu2bf7 core-prim . flmod0) (xu2bf6 core-prim . flmod) (xu2bf5 core-prim . flmin) (xu2bf4 core-prim . flmax) (xu2bf3 core-prim . fllog) (xu2bf2 core-prim . flinteger?) (xu2bf1 core-prim . flinfinite?) (xu2bf0 core-prim . flfloor) (xu2bef core-prim . flfinite?) (xu2bee core-prim . flexpt) (xu2bed core-prim . flexp) (xu2bec core-prim . fleven?) (xu2beb core-prim . fldiv0-and-mod0) (xu2bea core-prim . fldiv0) (xu2be9 core-prim . fldiv-and-mod) (xu2be8 core-prim . fldiv) (xu2be7 core-prim . fldenominator) (xu2be6 core-prim . flcos) (xu2be5 core-prim . flceiling) (xu2be4 core-prim . flatan) (xu2be3 core-prim . flasin) (xu2be2 core-prim . flacos) (xu2be1 core-prim . flabs) (xu2be0 core-prim . fl>?) (xu2bdf core-prim . fl>=?) (xu2bde core-prim . fl=?) (xu2bdd core-prim . fl<?) (xu2bdc core-prim . fl<=?) (xu2bdb core-prim . fl/) (xu2bda core-prim . fl-) (xu2bd9 core-prim . fl+) (xu2bd8 core-prim . fl*) (xu2bd7 core-prim . fixnum->flonum) (xu2bd6 core-prim . fxzero?) (xu2bd5 core-prim . fxxor) (xu2bd4 core-prim . fxrotate-bit-field) (xu2bd3 core-prim . fxreverse-bit-field) (xu2bd2 core-prim . fxpositive?) (xu2bd1 core-prim . fxodd?) (xu2bd0 core-prim . fxnot) (xu2bcf core-prim . fxnegative?) (xu2bce core-prim . fxmod0) (xu2bcd core-prim . fxmod) (xu2bcc core-prim . fxmin) (xu2bcb core-prim . fxmax) (xu2bca core-prim . fxlength) (xu2bc9 core-prim . fxior) (xu2bc8 core-prim . fxif) (xu2bc7 core-prim . fxfirst-bit-set) (xu2bc6 core-prim . fxeven?) (xu2bc5 core-prim . fxdiv0-and-mod0) (xu2bc4 core-prim . fxdiv0) (xu2bc3 core-prim . fxdiv-and-mod) (xu2bc2 core-prim . fxdiv) (xu2bc1 core-prim . fxcopy-bit-field) (xu2bc0 core-prim . fxcopy-bit) (xu2bbf core-prim . fxbit-set?) (xu2bbe core-prim . fxbit-field) (xu2bbd core-prim . fxbit-count) (xu2bbc core-prim . fxarithmetic-shift-right) (xu2bbb core-prim . fxarithmetic-shift-left) (xu2bba core-prim . fxarithmetic-shift) (xu2bb9 core-prim . fxand) (xu2bb8 core-prim . fx>?) (xu2bb7 core-prim . fx>=?) (xu2bb6 core-prim . fx=?) (xu2bb5 core-prim . fx<?) (xu2bb4 core-prim . fx<=?) (xu2bb3 core-prim . fx-/carry) (xu2bb2 core-prim . fx-) (xu2bb1 core-prim . fx+/carry) (xu2bb0 core-prim . fx+) (xu2baf core-prim . fx*/carry) (xu2bae core-prim . fx*) (xu2bad core-prim . greatest-fixnum) (xu2bac core-prim . least-fixnum) (xu2bab core-prim . fixnum-width) (xu2baa core-prim . fixnum?) (xu2ba9 core-prim . bitwise-rotate-bit-field) (xu2ba8 core-prim . bitwise-reverse-bit-field) (xu2ba7 core-prim . bitwise-length) (xu2ba6 core-prim . bitwise-if) (xu2ba5 core-prim . bitwise-first-bit-set) (xu2ba4 core-prim . bitwise-copy-bit-field) (xu2ba3 core-prim . bitwise-copy-bit) (xu2ba2 core-prim . bitwise-bit-set?) (xu2ba1 core-prim . bitwise-bit-field) (xu2ba0 core-prim . bitwise-bit-count) (xu2b9f core-prim . bitwise-xor) (xu2b9e core-prim . bitwise-ior) (xu2b9d core-prim . bitwise-and) (xu2b9c core-prim . bitwise-not) (xu2b9b core-prim . bitwise-arithmetic-shift-right) (xu2b9a core-prim . bitwise-arithmetic-shift-left) (xu2b99 core-prim . bitwise-arithmetic-shift) (xu2b98 core-prim . zero?) (xu2b97 core-prim . vector?) (xu2b96 core-prim . vector-set!) (xu2b95 core-prim . vector-ref) (xu2b94 core-prim . vector-map) (xu2b93 core-prim . vector-length) (xu2b92 core-prim . vector-for-each) (xu2b91 core-prim . vector-fill!) (xu2b90 core-prim . vector->list) (xu2b8f core-prim . vector) (xu2b8e core-prim . values) (xu2b8d core-prim . truncate) (xu2b8c core-prim . tan) (xu2b8b core-prim . symbol?) (xu2b8a core-prim . symbol=?) (xu2b89 core-prim . symbol->string) (xu2b88 core-prim . substring) (xu2b87 core-prim . string?) (xu2b86 core-prim . string>?) (xu2b85 core-prim . string>=?) (xu2b84 core-prim . string=?) (xu2b83 core-prim . string<?) (xu2b82 core-prim . string<=?) (xu2b81 core-prim . string-ref) (xu2b80 core-prim . string-length) (xu2b7f core-prim . string-for-each) (xu2b7e core-prim . string-copy) (xu2b7d core-prim . string-append) (xu2b7c core-prim . string->symbol) (xu2b7b core-prim . string->number) (xu2b7a core-prim . string->list) (xu2b79 core-prim . string) (xu2b78 core-prim . sqrt) (xu2b77 core-prim . sin) (xu2b76 core-prim . round) (xu2b75 core-prim . reverse) (xu2b74 core-prim . real?) (xu2b73 core-prim . real-valued?) (xu2b72 core-prim . real-part) (xu2b71 core-prim . rationalize) (xu2b70 core-prim . rational?) (xu2b6f core-prim . rational-valued?) (xu2b6e core-prim . procedure?) (xu2b6d core-prim . positive?) (xu2b6c core-prim . pair?) (xu2b6b core-prim . odd?) (xu2b6a core-prim . numerator) (xu2b69 core-prim . number?) (xu2b68 core-prim . number->string) (xu2b67 core-prim . null?) (xu2b66 core-prim . not) (xu2b65 core-prim . negative?) (xu2b64 core-prim . nan?) (xu2b63 core-prim . min) (xu2b62 core-prim . max) (xu2b61 core-prim . map) (xu2b60 core-prim . make-vector) (xu2b5f core-prim . make-string) (xu2b5e core-prim . make-rectangular) (xu2b5d core-prim . make-polar) (xu2b5c core-prim . magnitude) (xu2b5b core-prim . log) (xu2b5a core-prim . list?) (xu2b59 core-prim . list-tail) (xu2b58 core-prim . list-ref) (xu2b57 core-prim . list->vector) (xu2b56 core-prim . list->string) (xu2b55 core-prim . list) (xu2b54 core-prim . length) (xu2b53 core-prim . lcm) (xu2b52 core-prim . integer?) (xu2b51 core-prim . integer-valued?) (xu2b50 core-prim . integer->char) (xu2b4f core-prim . infinite?) (xu2b4e core-prim . inexact?) (xu2b4d core-prim . inexact) (xu2b4c core-prim . imag-part) (xu2b4b core-prim . gcd) (xu2b4a core-prim . for-each) (xu2b49 core-prim . floor) (xu2b48 core-prim . finite?) (xu2b47 core-prim . expt) (xu2b46 core-prim . exp) (xu2b45 core-prim . exact?) (xu2b44 core-prim . exact-integer-sqrt) (xu2b43 core-prim . exact) (xu2b42 core-prim . even?) (xu2b41 core-prim . error) (xu2b40 core-prim . eqv?) (xu2b3f core-prim . equal?) (xu2b3e core-prim . eq?) (xu2b3d core-prim . dynamic-wind) (xu2b3c core-prim . div0-and-mod0) (xu2b3b core-prim . mod0) (xu2b3a core-prim . div0) (xu2b39 core-prim . div-and-mod) (xu2b38 core-prim . mod) (xu2b37 core-prim . div) (xu2b36 core-prim . denominator) (xu2b35 core-prim . cos) (xu2b34 core-prim . cons) (xu2b33 core-prim . complex?) (xu2b32 core-prim . char?) (xu2b31 core-prim . char>?) (xu2b30 core-prim . char>=?) (xu2b2f core-prim . char=?) (xu2b2e core-prim . char<?) (xu2b2d core-prim . char<=?) (xu2b2c core-prim . char->integer) (xu2b2b core-prim . ceiling) (xu2b2a core-prim . call-with-values) (xu2b29 core-prim . call/cc) (xu2b28 core-prim . call-with-current-continuation) (xu2b27 core-prim . cddddr) (xu2b26 core-prim . cdddar) (xu2b25 core-prim . cddadr) (xu2b24 core-prim . cddaar) (xu2b23 core-prim . cdaddr) (xu2b22 core-prim . cdadar) (xu2b21 core-prim . cdaadr) (xu2b20 core-prim . cdaaar) (xu2b1f core-prim . cadddr) (xu2b1e core-prim . caddar) (xu2b1d core-prim . cadadr) (xu2b1c core-prim . cadaar) (xu2b1b core-prim . caaddr) (xu2b1a core-prim . caadar) (xu2b19 core-prim . caaadr) (xu2b18 core-prim . caaaar) (xu2b17 core-prim . cdddr) (xu2b16 core-prim . cddar) (xu2b15 core-prim . cdadr) (xu2b14 core-prim . cdaar) (xu2b13 core-prim . caddr) (xu2b12 core-prim . cadar) (xu2b11 core-prim . caadr) (xu2b10 core-prim . caaar) (xu2b0f core-prim . cddr) (xu2b0e core-prim . cdar) (xu2b0d core-prim . cadr) (xu2b0c core-prim . caar) (xu2b0b core-prim . cdr) (xu2b0a core-prim . car) (xu2b09 core-prim . boolean?) (xu2b08 core-prim . boolean=?) (xu2b07 core-prim . atan) (xu2b06 core-prim . assertion-violation) (xue69 core-prim . assertion-error) (xu2b05 core-prim . asin) (xu2b04 core-prim . apply) (xu2b03 core-prim . append) (xu2b02 core-prim . angle) (xu2b01 core-prim . acos) (xu2b00 core-prim . abs) (xu2aff core-prim . /) (xu2afe core-prim . *) (xu2afd core-prim . -) (xu2afc core-prim . +) (xu2afb core-prim . >=) (xu2afa core-prim . >) (xu2af9 core-prim . =) (xu2af8 core-prim . <=) (xu2af7 core-prim . <) (xu2af6 core-prim . library) (xu2af5 $core-rtd &no-nans-rtd &no-nans-rcd) (xu2af4 $core-rtd &no-infinities-rtd &no-infinities-rcd) (xu2af3 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (xu2af2 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (xu2af1 $core-rtd &i/o-port-rtd &i/o-port-rcd) (xu2af0 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (xu2aef $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (xu2aee $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (xu2aed $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (xu2aec $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (xu2aeb $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (xu2aea $core-rtd &i/o-write-rtd &i/o-write-rcd) (xu2ae9 $core-rtd &i/o-read-rtd &i/o-read-rcd) (xu2ae8 $core-rtd &i/o-rtd &i/o-rcd) (xu2ae7 $core-rtd &undefined-rtd &undefined-rcd) (xu2ae6 $core-rtd &syntax-rtd &syntax-rcd) (xu2ae5 $core-rtd &lexical-rtd &lexical-rcd) (xu2ae4 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (xu2ae3 $core-rtd &non-continuable-rtd &non-continuable-rcd) (xu2ae2 $core-rtd &who-rtd &who-rcd) (xu2ae1 $core-rtd &irritants-rtd &irritants-rcd) (xu2ae0 $core-rtd &assertion-rtd &assertion-rcd) (xu2adf $core-rtd &violation-rtd &violation-rcd) (xu2ade $core-rtd &error-rtd &error-rcd) (xu2add $core-rtd &serious-rtd &serious-rcd) (xu2adc $core-rtd &warning-rtd &warning-rcd) (xu2adb $core-rtd &message-rtd &message-rcd) (xu2ada $core-rtd &condition-rtd &condition-rcd) (xu2ad9 macro . define-condition-type) (xu2ad8 macro . define-enumeration) (xu2ad7 macro . define-record-type) (xu2ad6 macro . parent-rtd) (xu2ad5 macro . nongenerative) (xu2ad4 macro . opaque) (xu2ad3 macro . sealed) (xu2ad2 macro . protocol) (xu2ad1 macro . parent) (xu2ad0 macro . immutable) (xu2acf macro . mutable) (xu2ace macro . fields) (xu2acd macro . error-handling-mode) (xu2acc macro . file-options) (xu2acb macro . buffer-mode) (xu2aca macro . eol-style) (xu2ac9 macro . guard) (xu2ac8 macro . trace-define) (xu2ac7 macro . trace-lambda) (xu2ac6 macro . unsyntax-splicing) (xu2ac5 macro . unsyntax) (xu2ac4 macro . unquote-splicing) (xu2ac3 macro . unquote) (xu2ac2 macro . _) (xu2ac1 macro . else) (xu2ac0 macro . =>) (xu2abf macro . ...) (xu2abe macro . assert) (xu2abd macro . endianness) (xu2abc macro . delay) (xu2abb macro . time) (xu2aba macro . do) (xu2ab9 macro . cond) (xu2ab8 macro . let*) (xu2ab7 macro . let*-values) (xu2ab6 macro . let-values) (xu2ab5 macro . identifier-syntax) (xu2ab4 macro . with-syntax) (xu2ab3 macro . quasisyntax) (xu2ab2 macro . quasiquote) (xu2ab1 macro . syntax-rules) (xu2ab0 macro . include) (xu2aaf macro . define-struct) (xu2aae core-macro . record-constructor-descriptor) (xu2aad core-macro . record-type-descriptor) (xu2aac macro . case) (xu2aab macro . parameterize) (xu2aaa macro . unless) (xu2aa9 macro . when) (xu2aa8 core-macro . or) (xu2aa7 core-macro . and) (xu2aa6 core-macro . if) (xu2aa5 core-macro . let) (xu2aa4 core-macro . letrec*) (xu2aa3 core-macro . letrec) (xu2aa2 core-macro . type-descriptor) (xu2aa1 core-macro . case-lambda) (xu2aa0 core-macro . lambda) (xu2a9f core-macro . syntax) (xu2a9e core-macro . syntax-case) (xu2a9d core-macro . quote) (xu2a9c core-macro . foreign-call) (xu2a9b letrec-syntax) (xu2a9a let-syntax) (xu2a99 set!) (xu2a98 import) (xu2a97 begin) (xu2a96 module) (xu2a95 define-syntax) (xu2a94 define)) values values '#f '#f '#f '#f) (xu9a3@xu7ef@install-library 'xu2e6c '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . xu2e13) (eval-core . xu2e12) (set-symbol-value! . xu2e11) (symbol-value . xu2e10) (gensym . xu2e0f) (void . xu2e0e)) '() values values '#f '#f '#f '#f) (xu9a3@xu7ef@install-library 'xu2e6d '(mosh) '() '() '() '() '((set-symbol-value! . xu2e11) (symbol-value . xu2e10) (regexp? . xu2e0c) (read-line . xu2e0b) (ungensym . xu2e09) (alist->eq-hash-table . xu2e08) (assoc-ref . xu2e07) (print . xu2e06) (format . xu2e05) (host-os . xu2e04) (library-path . xu7ce) (standard-library-path . xu2e03) (file-newer? . xu2df3) (stat-mtime . xu2df2) (digit->integer . xu2dee) (call-with-string-input-port . xu2ded) (call-with-string-io . xu2dec) (string-split . xu2deb) (bytevector-for-each . xu2dea) (string->regexp . xu2de9) (rxmatch . xu2de8) (regexp-replace-all . xu2de7) (hashtable-fold-left . xu2de6) (hashtable-for-each . xu2de5) (set-current-directory! . xu2ddf) (expand-path . xu2dde) (current-directory . xu2ddd) (p . xu2d9c) (get-timeofday . xu2d83) (get-command-line . xu2d82) (sys-display . xu2d81) (whereis . xu2d80) (register . xu2d7f) (vm-join! . xu2d7e) (vm-set-value! . xu2d7d) (vm? . xu2d7c) (main-vm? . xu2d7b) (vm-eval . xu2d7a) (vm-self . xu2d79) (vm-start! . xu2d78) (make-vm . xu2d77) (mutex-try-lock! . xu2d76) (mutex-unlock! . xu2d75) (mutex-lock! . xu2d74) (mutex? . xu2d73) (make-mutex . xu2d72) (condition-variable-notify-all! . xu2d71) (condition-variable-notify! . xu2d70) (condition-variable-wait! . xu2d6f) (make-condition-variable . xu2d6e) (write/ss . xu2d6d) (mosh-executable-path . xu2d6c) (make-file-options . xu2d6b) (source-info . xu2d6a) (make-compiler-instruction . xu2d69) (make-instruction . xu2d68) (set-annotation! . xu2d67) (get-annotation . xu2d66) (annotated-pair? . xu2d65) (annotated-cons . xu2d64) (set-source-info! . xu2d63) (bignum? . xu2d62) (fast-equal? . xu2d61) (fasl-read . xu2d60) (fasl-write . xu2d5f) (time-usage . xu2d5e) (os-constant . xu2d5d) (condition-printer . xu2d5c) (time . xu2abb) (include . xu2ab0)) '() values values '#f '#f '#f '#f) (xu9a3@xu7ef@install-library 'xu2e6e '(system) '() '() '() '() '((gensym-prefix-set! . xu2e0a) (ssl-supported? . xu2e02) (ssl-socket? . xu2e01) (socket-sslize! . xu2e00) (%monapi-stream-read . xu2dff) (%monapi-stream-write . xu2dfe) (%monapi-stream-handle . xu2dfd) (%monapi-make-stream . xu2dfc) (%monapi-name-add! . xu2dfb) (%monapi-message-receive . xu2dfa) (%monapi-name-whereis . xu2df9) (%monapi-message-reply . xu2df8) (%monapi-message-send-receive . xu2df7) (%monapi-message-send . xu2df6) (process-terminate! . xu2df5) (process-list . xu2df4) (write-to-file . xu2df1) (file->list . xu2df0) (file->string . xu2def) (mosh-cache-dir . xu5b8) (%start-process . xu2de4) (%call-process . xu2de3) (local-tz-offset . xu2de2) (microseconds . xu2de1) (directory-list . xu2de0) (expand-path . xu2dde) (%getpid . xu2ddc) (%waitpid . xu2ddb) (simple-struct-name . xu2dda) (simple-struct-set! . xu2dd9) (simple-struct-ref . xu2dd8) (make-simple-struct . xu2dd7) (simple-struct? . xu2dd6) (pointer-ref-c-int64 . xu2dd5) (pointer-ref-c-int32 . xu2dd4) (pointer-ref-c-int16 . xu2dd3) (pointer-ref-c-int8 . xu2dd2) (pointer-ref-c-uint64 . xu2dd1) (pointer-ref-c-uint32 . xu2dd0) (pointer-ref-c-uint16 . xu2dcf) (pointer-ref-c-uint8 . xu2dce) (pointer-set-c-uint64! . xu2dcd) (pointer-set-c-uint32! . xu2dcc) (pointer-set-c-uint16! . xu2dcb) (pointer-set-c-uint8! . xu2dca) (pointer-set-c-int64! . xu2dc9) (pointer-set-c-int32! . xu2dc8) (pointer-set-c-int16! . xu2dc7) (pointer-set-c-int8! . xu2dc6) (pointer-set-c-pointer! . xu2dc5) (pointer-set-c-double! . xu2dc4) (pointer-set-c-float! . xu2dc3) (pointer-set-c-long-long! . xu2dc2) (pointer-set-c-long! . xu2dc1) (pointer-set-c-int! . xu2dc0) (pointer-set-c-short! . xu2dbf) (pointer-set-c-char! . xu2dbe) (pointer-ref-c-pointer . xu2dbd) (pointer-ref-c-double . xu2dbc) (pointer-ref-c-float . xu2dbb) (pointer-ref-c-unsigned-long-long . xu2dba) (pointer-ref-c-signed-long-long . xu2db9) (pointer-ref-c-unsigned-long . xu2db8) (pointer-ref-c-signed-long . xu2db7) (pointer-ref-c-unsigned-int . xu2db6) (pointer-ref-c-signed-int . xu2db5) (pointer-ref-c-unsigned-short . xu2db4) (pointer-ref-c-signed-short . xu2db3) (pointer-ref-c-unsigned-char . xu2db2) (pointer-ref-c-signed-char . xu2db1) (pointer->integer . xu2db0) (integer->pointer . xu2daf) (pointer? . xu2dae) (shared-errno . xu2dad) (%ffi-free-c-callback-trampoline . xu2dac) (%ffi-make-c-callback-trampoline . xu2dab) (%ffi-free . xu2daa) (%ffi-malloc . xu2da9) (%ffi-supported? . xu2da8) (%ffi-pointer->string . xu2da7) (%ffi-call . xu2da6) (%ffi-lookup . xu2da5) (%ffi-open . xu2da4) (null-terminated-utf8->string . xu2da3) (null-terminated-bytevector->string . xu2da2) (%exec . xu2da1) (%fork . xu2da0) (%pipe . xu2d9f) (%confstr . xu2d9e) (%dup . xu2d9d) (open-output-string . xu2d9b) (get-output-string . xu2d9a) (file-stat-ctime . xu2d99) (file-stat-atime . xu2d98) (file-stat-mtime . xu2d97) (file-size-in-bytes . xu2d96) (file-writable? . xu2d95) (file-executable? . xu2d94) (file-readable? . xu2d93) (file-regular? . xu2d92) (file-symbolic-link? . xu2d91) (file-directory? . xu2d90) (create-symbolic-link . xu2d8f) (rename-file . xu2d8e) (delete-directory . xu2d8d) (create-directory . xu2d8c) (create-mosh-cache-dir . xu2d8b) (get-environment-variables . xu2d8a) (current-exception-handler . xu2d89) (get-environment-variable . xu2d88) (join-wraps . xu2d87) (id->real-label . xu2d86) (same-marks? . xu2d85) (same-marks*? . xu2d84) (disasm . xu2d5b) (make-parameter . xu5b6) (socket-port . xu2d5a) (socket-shutdown . xu2d59) (socket-close . xu2d58) (socket-send . xu2d57) (socket-recv! . xu2d56) (socket-recv . xu2d55) (make-server-socket . xu2d54) (make-client-socket . xu2d53) (socket-accept . xu2d52) (socket? . xu2d51) (parameterize . xu2aab)) '() values values '#f '#f '#f '#f)))
(begin (set! xu2913@ref (unspecified)) (set! xu2915@x* (unspecified)) (set! xu2917@add-library-path! (unspecified)) (set! xu2919@parse-and-add-library-path (unspecified)) (set! xu291b@for-each-with-index (unspecified)) (set! xu291d@rpad (unspecified)) (set! xu291f@condition-printer/p (unspecified)) (set! xu2921@record->field-alist (unspecified)) (set! xu2923@map-with-index (unspecified)) (set! xu2925@repl (unspecified)) (set! xu2927@trace-printer (unspecified)) (set! xu2929@command-line (unspecified)) (set! xu292b@local-library-path (unspecified)) (set! xu292d@load/args (unspecified)) (set! xu292f@load (unspecified)) (set! xu2931@ironscheme-build (unspecified)) (set! xu2933@eval-top-level (unspecified)) (set! xu2935@compile-system-libraries (unspecified)) (set! xu2937@compile (unspecified)) (set! xu2939@compile->closure (unspecified)) (set! xu293b@pre-compile-r6rs-file (unspecified)) (set! xu293d@load-r6rs-top-level (unspecified)) (set! xu293f@load-r6rs-top-level-sexp (unspecified)) (set! xu2941@prefix-inc (unspecified)) (set! xu2943@prefix-inc! (unspecified)) (set! xu2913@ref (lambda (xu297e@rtd xu297f@i xu2980@x) (let ((xu2984@val ((record-accessor xu297e@rtd xu297f@i) xu2980@x))) (if (symbol? xu2984@val) (ungensym xu2984@val) xu2984@val)))) (set! xu2a7a@xu2913@ref xu2913@ref) (set! xu2915@x* '()) (set! xu2a7b@xu2915@x* xu2915@x*) (set! xu2917@add-library-path! (lambda (xu2986@path) (xu993@xu7cf@library-path (append (xu993@xu7cf@library-path) (list xu2986@path))))) (set! xu2a7c@xu2917@add-library-path! xu2917@add-library-path!) (set! xu2919@parse-and-add-library-path (lambda (xu2988@paths xu2989@message) (letrec* ((xu298d@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((xu298e@t xu2988@paths)) (if xu298e@t ((lambda (xu2990@paths) (for-each (lambda (xu2992@path) (if (file-exists? xu2992@path) (xu2917@add-library-path! (expand-path xu2992@path)) (format (current-error-port) xu2989@message xu2992@path))) (string-split xu2990@paths xu298d@separator))) xu298e@t) (void)))))) (set! xu2a7d@xu2919@parse-and-add-library-path xu2919@parse-and-add-library-path) (set! xu291b@for-each-with-index (lambda (xu2994@proc xu2995@lst) (letrec ((xu2998@loop (lambda (xu299a@i xu299b@lst) (if (null? xu299b@lst) (if '#f '#f (void)) (begin (xu2994@proc xu299a@i (car xu299b@lst)) (xu2998@loop (+ xu299a@i '1) (cdr xu299b@lst))))))) (xu2998@loop '1 xu2995@lst)))) (set! xu2a7e@xu291b@for-each-with-index xu291b@for-each-with-index) (set! xu291d@rpad (lambda (xu299e@str xu299f@pad xu29a0@n) (let ((xu29a4@rest (- xu29a0@n (string-length (format '"~a" xu299e@str))))) (let xu29aa@loop ((xu29a6@rest xu29a4@rest) (xu29a7@ret (format '"~a" xu299e@str))) (if (<= xu29a6@rest '0) xu29a7@ret (xu29aa@loop (- xu29a6@rest '1) (string-append xu29a7@ret xu299f@pad))))))) (set! xu2a7f@xu291d@rpad xu291d@rpad) (set! xu291f@condition-printer/p (lambda (xu29ac@e xu29ad@port) (letrec* ((xu29b1@max-condition-len (apply max (map (lambda (xu29c2@c) (string-length (symbol->string (record-type-name (record-rtd xu29c2@c))))) (simple-conditions xu29ac@e))))) (begin (display '" Condition components:\n" xu29ad@port) (xu291b@for-each-with-index (lambda (xu29b2@i xu29b3@x) (let ((xu29b6@rtd (record-rtd xu29b3@x)) (xu29b7@fields-alist (xu2921@record->field-alist xu29b3@x))) (begin (format xu29ad@port '" ~d. ~a" xu29b2@i (xu291d@rpad (symbol->string (record-type-name xu29b6@rtd)) '" " xu29b1@max-condition-len)) (if (null? xu29b7@fields-alist) (newline xu29ad@port) (void)) (let xu29be@loop ((xu29ba@first '#t) (xu29bb@fields-alist xu29b7@fields-alist)) (if (null? xu29bb@fields-alist) '() (let ((xu29c0@field (car xu29bb@fields-alist))) (begin (if (not xu29ba@first) (display (xu291d@rpad '"" '" " (+ '4 xu29b1@max-condition-len)) xu29ad@port) (void)) (display '"       " xu29ad@port) (display (car xu29c0@field) xu29ad@port) (display '": " xu29ad@port) (write (cdr xu29c0@field) xu29ad@port) (newline xu29ad@port) (xu29be@loop '#f (cdr xu29bb@fields-alist))))))))) (simple-conditions xu29ac@e)))))) (set! xu2a80@xu291f@condition-printer/p xu291f@condition-printer/p) (set! xu2921@record->field-alist (lambda (xu29c4@r) (letrec* ((xu29c7@ref (lambda (xu29d2@rtd xu29d3@i xu29d4@x) (let ((xu29d8@val ((record-accessor xu29d2@rtd xu29d3@i) xu29d4@x))) (if (symbol? xu29d8@val) (ungensym xu29d8@val) xu29d8@val))))) (let xu29cc@loop ((xu29c8@ret '()) (xu29c9@rtd (record-rtd xu29c4@r))) (if xu29c9@rtd (xu29cc@loop (append xu29c8@ret (xu2923@map-with-index (lambda (xu29ce@i xu29cf@field) (cons xu29cf@field (xu29c7@ref xu29c9@rtd xu29ce@i xu29c4@r))) (vector->list (record-type-field-names xu29c9@rtd)))) (record-type-parent xu29c9@rtd)) xu29c8@ret))))) (set! xu2a81@xu2921@record->field-alist xu2921@record->field-alist) (set! xu2923@map-with-index (lambda (xu29da@proc xu29db@lst) (let xu29e4@loop ((xu29de@i '0) (xu29df@lst xu29db@lst) (xu29e0@ret '())) (if (null? xu29df@lst) (reverse xu29e0@ret) (xu29e4@loop (+ xu29de@i '1) (cdr xu29df@lst) (cons (xu29da@proc xu29de@i (car xu29df@lst)) xu29e0@ret)))))) (set! xu2a82@xu2923@map-with-index xu2923@map-with-index) (set! xu2925@repl (lambda xu29e6@x (letrec* ((xu29e9@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (xu29ec@xu29ea) (lambda () (with-exception-handler (lambda (xu29ee@e) ((call/cc (lambda (xu29f0@xu29eb) (xu29ec@xu29ea (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? xu29ee@e) (xu291f@condition-printer/p xu29ee@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" xu29ee@e))) (xu29f0@xu29eb (lambda () (raise-continuable xu29ee@e)))))))))) (lambda () (let xu29f6@loop ((xu29f2@line (get-line (current-input-port))) (xu29f3@accum '"")) (letrec* ((xu29f9@parentheses-ok? (lambda (xu2a04@text) (let xu2a0c@loop ((xu2a06@chars (string->list xu2a04@text)) (xu2a07@p0 '0) (xu2a08@p1 '0)) (if (null? xu2a06@chars) (= '0 xu2a07@p0 xu2a08@p1) (let ((xu2a0e@t (car xu2a06@chars))) (if (memv xu2a0e@t '(#\()) (xu2a0c@loop (cdr xu2a06@chars) (+ xu2a07@p0 '1) xu2a08@p1) (if (memv xu2a0e@t '(#\))) (xu2a0c@loop (cdr xu2a06@chars) (- xu2a07@p0 '1) xu2a08@p1) (if (memv xu2a0e@t '(#\[)) (xu2a0c@loop (cdr xu2a06@chars) xu2a07@p0 (+ xu2a08@p1 '1)) (if (memv xu2a0e@t '(#\])) (xu2a0c@loop (cdr xu2a06@chars) xu2a07@p0 (- xu2a08@p1 '1)) (xu2a0c@loop (cdr xu2a06@chars) xu2a07@p0 xu2a08@p1)))))))))) (xu29fb@eval-string-print (lambda (xu29fe@text) (if (not (or (string=? '"\n" xu29fe@text) (= '0 (string-length xu29fe@text)))) (call-with-values (lambda () (xu2933@eval-top-level (call-with-port (open-string-input-port xu29fe@text) read))) (lambda xu2a00@out* (for-each (lambda (xu2a02@out) (begin (write/ss xu2a02@out) (newline))) xu2a00@out*))) (void))))) (if (eof-object? xu29f2@line) (begin (xu29fb@eval-string-print xu29f3@accum) (exit)) (let ((xu29fc@current (string-append xu29f3@accum xu29f2@line))) (if (xu29f9@parentheses-ok? xu29fc@current) (xu29fb@eval-string-print xu29fc@current) (xu29f6@loop (get-line (current-input-port)) xu29fc@current)))))))))))) (newline) (xu29e9@rec))))) (xu29e9@rec)))) (set! xu2a83@xu2925@repl xu2925@repl) (set! xu2927@trace-printer (xu6d9@xu5b7@make-parameter write)) (set! xu2a84@xu2927@trace-printer xu2927@trace-printer) (set! xu2929@command-line (xu6d9@xu5b7@make-parameter (get-command-line))) (set! xu2a85@xu2929@command-line xu2929@command-line) (set! xu292b@local-library-path (lambda (xu2a10@filename) (xu993@xu7cf@library-path))) (set! xu2a86@xu292b@local-library-path xu292b@local-library-path) (set! xu292d@load/args (lambda (xu2a12@filename . xu2a14@args) (begin (apply xu293d@load-r6rs-top-level xu2a12@filename 'load xu2a14@args) (void)))) (set! xu2a87@xu292d@load/args xu292d@load/args) (set! xu292f@load (lambda (xu2a16@filename) (begin (apply xu293d@load-r6rs-top-level xu2a16@filename 'load (xu2929@command-line)) (void)))) (set! xu2a88@xu292f@load xu292f@load) (set! xu2931@ironscheme-build (lambda () (xu292f@load '"ironscheme-buildscript.ss"))) (set! xu2a89@xu2931@ironscheme-build xu2931@ironscheme-build) (set! xu2933@eval-top-level (lambda (xu2a18@x) (xu28f0@xue50@eval xu2a18@x (xu2907@xue7e@interaction-environment)))) (set! xu2a8a@xu2933@eval-top-level xu2933@eval-top-level) (set! xu2935@compile-system-libraries (lambda () (xu2933@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! xu2a8b@xu2935@compile-system-libraries xu2935@compile-system-libraries) (set! xu2937@compile (lambda (xu2a1a@filename) (xu293d@load-r6rs-top-level xu2a1a@filename 'compile))) (set! xu2a8c@xu2937@compile xu2937@compile) (set! xu2939@compile->closure (lambda (xu2a1c@filename) (xu293d@load-r6rs-top-level xu2a1c@filename 'closure))) (set! xu2a8d@xu2939@compile->closure xu2939@compile->closure) (set! xu293b@pre-compile-r6rs-file (lambda (xu2a1e@filename) (xu293d@load-r6rs-top-level xu2a1e@filename 'compile))) (set! xu2a8e@xu293b@pre-compile-r6rs-file xu293b@pre-compile-r6rs-file) (set! xu293d@load-r6rs-top-level (lambda (xu2a20@filename xu2a21@how . xu2a24@args) (begin (xu993@xu7cf@library-path (xu292b@local-library-path xu2a20@filename)) (let ((xu2a26@x* (with-input-from-file xu2a20@filename (lambda () (let xu2a28@f () (let ((xu2a2a@x (xu6cb@xu59b@read-annotated))) (if (eof-object? xu2a2a@x) '() (cons xu2a2a@x (xu2a28@f))))))))) (let ((xu2a2c@t xu2a21@how)) (if (memv xu2a2c@t '(closure)) (xu2906@xue7c@pre-compile-r6rs-top-level xu2a26@x*) (if (memv xu2a2c@t '(load)) (begin (xu2929@command-line (cons xu2a20@filename (car xu2a24@args))) (xu6da@xu5b9@mosh-cache-dir (create-mosh-cache-dir)) (if (xu6da@xu5b9@mosh-cache-dir) (gensym-prefix-set! (xu2943@prefix-inc! (string-append (xu6da@xu5b9@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (xu2a2e@file) ((call/cc (lambda (xu2a32@xu2a30) (lambda () (with-exception-handler (lambda (xu2a34@c) ((call/cc (lambda (xu2a36@xu2a31) (xu2a32@xu2a30 (lambda () (if '#t '#t (xu2a36@xu2a31 (lambda () (raise-continuable xu2a34@c)))))))))) (lambda () (delete-file (string-append (xu6da@xu5b9@mosh-cache-dir) '"/" xu2a2e@file))))))))) (directory-list (xu6da@xu5b9@mosh-cache-dir))) (void)) (let ((xu2a38@compiled (xu2905@xue7a@compile-r6rs-top-level xu2a26@x*))) (begin (if (and (xu6da@xu5b9@mosh-cache-dir) (not (symbol-value '%disable-acc))) (xu997@xu7d7@serialize-all xu6d4@xu5ad@serialize-library xu730@xu6e9@compile-core-expr) (void)) (xu2a38@compiled)))) (if (memv xu2a2c@t '(compile)) (begin (xu2905@xue7a@compile-r6rs-top-level xu2a26@x*) (xu997@xu7d7@serialize-all xu6d4@xu5ad@serialize-library xu730@xu6e9@compile-core-expr)) (if '#f '#f (void)))))))))) (set! xu2a8f@xu293d@load-r6rs-top-level xu293d@load-r6rs-top-level) (set! xu293f@load-r6rs-top-level-sexp (lambda (xu2a3a@import-spec xu2a3b@thunk) (let ((xu2a46@xu2a3f xu993@xu7cf@library-path) (xu2a47@xu2a41 xu6da@xu5b9@mosh-cache-dir) (xu2a48@xu2a43 (xu292b@local-library-path '"")) (xu2a49@xu2a45 (create-mosh-cache-dir))) (let ((xu2a4e@swap (lambda () (begin (let ((xu2a50@t (xu2a46@xu2a3f))) (begin (xu2a46@xu2a3f xu2a48@xu2a43) (set! xu2a48@xu2a43 xu2a50@t))) (let ((xu2a52@t (xu2a47@xu2a41))) (begin (xu2a47@xu2a41 xu2a49@xu2a45) (set! xu2a49@xu2a45 xu2a52@t))))))) (dynamic-wind xu2a4e@swap (lambda () (begin (if (xu6da@xu5b9@mosh-cache-dir) (gensym-prefix-set! (xu2943@prefix-inc! (string-append (xu6da@xu5b9@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((xu2a58@xu2a55 xu2929@command-line) (xu2a59@xu2a57 '())) (let ((xu2a5c@swap (lambda () (let ((xu2a5e@t (xu2a58@xu2a55))) (begin (xu2a58@xu2a55 xu2a59@xu2a57) (set! xu2a59@xu2a57 xu2a5e@t)))))) (dynamic-wind xu2a5c@swap (lambda () ((xu2905@xue7a@compile-r6rs-top-level (list (cons 'import xu2a3a@import-spec) (list xu2a3b@thunk))))) xu2a5c@swap))))) xu2a4e@swap))))) (set! xu2a90@xu293f@load-r6rs-top-level-sexp xu293f@load-r6rs-top-level-sexp) (set! xu2941@prefix-inc (lambda (xu2a60@prefix-string) (let ((xu2a62@prefix (symbol->string xu2a60@prefix-string))) (let ((xu2a64@len (string-length xu2a62@prefix))) (let xu2a6c@loop ((xu2a66@i (- xu2a64@len '1)) (xu2a67@carry? '#t) (xu2a68@accum '())) (if (< xu2a66@i '0) (string->symbol (list->string (if xu2a67@carry? (cons '#\a xu2a68@accum) xu2a68@accum))) (if xu2a67@carry? (let ((xu2a6e@next-integer (+ '1 (char->integer (string-ref xu2a62@prefix xu2a66@i))))) (if (= xu2a6e@next-integer '123) (xu2a6c@loop (- xu2a66@i '1) '#f (cons '#\A xu2a68@accum)) (if (= xu2a6e@next-integer '91) (xu2a6c@loop (- xu2a66@i '1) '#t (cons '#\a xu2a68@accum)) (xu2a6c@loop (- xu2a66@i '1) '#f (cons (integer->char xu2a6e@next-integer) xu2a68@accum))))) (xu2a6c@loop (- xu2a66@i '1) '#f (cons (string-ref xu2a62@prefix xu2a66@i) xu2a68@accum))))))))) (set! xu2a91@xu2941@prefix-inc xu2941@prefix-inc) (set! xu2943@prefix-inc! (lambda (xu2a70@file) (begin (if (not (file-exists? xu2a70@file)) (call-with-output-file xu2a70@file (lambda (xu2a72@port) (write 'd xu2a72@port))) (void)) (let ((xu2a74@prefix (call-with-input-file xu2a70@file read))) (if (main-vm?) (let ((xu2a76@next-prefix (xu2941@prefix-inc xu2a74@prefix))) (begin (call-with-port (open-file-output-port xu2a70@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (xu2a78@port) (write xu2a76@next-prefix xu2a78@port))) xu2a74@prefix)) xu2a74@prefix))))) (set! xu2a92@xu2943@prefix-inc! xu2943@prefix-inc!) (begin (xu998@xu7d9@current-precompiled-library-loader xu6d5@xu5af@load-serialized-library) (set-symbol-value! 'load xu292f@load) (set-symbol-value! 'pre-compile-r6rs-file xu293b@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs xu2933@eval-top-level) (set-symbol-value! 'int-env-syms xu28e7@xue3e@interaction-environment-symbols) (set-symbol-value! 'expanded2core xu72f@xu6e7@expanded->core) (set-symbol-value! 'trace-printer xu2927@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (xu2944@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list xu2944@c))))) (xu2919@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (xu2919@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (xu2917@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (xu2917@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (xu2917@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((xu2946@prefix (lambda (xu2948@ext xu2949@ls) (append (map (lambda (xu294c@x) (string-append xu2948@ext xu294c@x)) xu2949@ls) xu2949@ls)))) (xu994@xu7d1@library-extensions (xu2946@prefix '".mosh" (xu994@xu7d1@library-extensions)))) (current-exception-handler (lambda (xu294e@c) (begin (if (condition? xu294e@c) (xu291f@condition-printer/p xu294e@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" xu294e@c)) xu294e@c))) (if ((call/cc (lambda (xu2952@xu2950) (lambda () (with-exception-handler (lambda (xu2954@c) ((call/cc (lambda (xu2956@xu2951) (xu2952@xu2950 (lambda () (if '#t '#f (xu2956@xu2951 (lambda () (raise-continuable xu2954@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (xu293f@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (xu2929@command-line)) (let ((xu2960@xu2959 xu2929@command-line) (xu2961@xu295b xu6da@xu5b9@mosh-cache-dir) (xu2962@xu295d '()) (xu2963@xu295f (create-mosh-cache-dir))) (let ((xu2968@swap (lambda () (begin (let ((xu296a@t (xu2960@xu2959))) (begin (xu2960@xu2959 xu2962@xu295d) (set! xu2962@xu295d xu296a@t))) (let ((xu296c@t (xu2961@xu295b))) (begin (xu2961@xu295b xu2963@xu295f) (set! xu2963@xu295f xu296c@t))))))) (dynamic-wind xu2968@swap (lambda () (begin (if (xu6da@xu5b9@mosh-cache-dir) (gensym-prefix-set! (xu2943@prefix-inc! (string-append (xu6da@xu5b9@mosh-cache-dir) '"/prefix.txt"))) (void)) (xu2925@repl))) xu2968@swap))) (begin (xu993@xu7cf@library-path (xu292b@local-library-path (car (xu2929@command-line)))) (set! xu2915@x* (with-input-from-file (car (xu2929@command-line)) (lambda () (let xu296e@f () (let ((xu2970@x (xu6cb@xu59b@read-annotated))) (if (eof-object? xu2970@x) '() (cons xu2970@x (xu296e@f)))))))) (xu2929@command-line (cons (car (xu2929@command-line)) (cdr (xu2929@command-line)))) (xu6da@xu5b9@mosh-cache-dir (create-mosh-cache-dir)) (if (xu6da@xu5b9@mosh-cache-dir) (gensym-prefix-set! (xu2943@prefix-inc! (string-append (xu6da@xu5b9@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (xu2972@file) ((call/cc (lambda (xu2976@xu2974) (lambda () (with-exception-handler (lambda (xu2978@c) ((call/cc (lambda (xu297a@xu2975) (xu2976@xu2974 (lambda () (if '#t '#t (xu297a@xu2975 (lambda () (raise-continuable xu2978@c)))))))))) (lambda () (delete-file (string-append (xu6da@xu5b9@mosh-cache-dir) '"/" xu2972@file))))))))) (directory-list (xu6da@xu5b9@mosh-cache-dir))) (void)) (let ((xu297c@compiled (xu2905@xue7a@compile-r6rs-top-level xu2915@x*))) (begin (if (and (xu6da@xu5b9@mosh-cache-dir) (not (symbol-value '%disable-acc))) (xu997@xu7d7@serialize-all xu6d4@xu5ad@serialize-library xu730@xu6e9@compile-core-expr) (void)) (xu297c@compiled))))))))
