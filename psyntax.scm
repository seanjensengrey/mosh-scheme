;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! r28c3@library-file-path->cache-path (unspecified)) (set! r28c5@read-annotated (unspecified)) (set! r28c7@annotation-stripped (unspecified)) (set! r28c9@annotation? (unspecified)) (set! r28cb@annotation-source (unspecified)) (set! r28cd@annotation-expression (unspecified)) (set! r28cf@scm->fasl (unspecified)) (set! r28d1@fasl-save (unspecified)) (set! r28d3@fasl-load (unspecified)) (set! r28d5@verbose? (unspecified)) (set! r28d7@serialize-library (unspecified)) (set! r28d9@load-serialized-library (unspecified)) (set! r28db@make-record-printer (unspecified)) (set! r28dd@compile-core (unspecified)) (set! r28df@read-library-source-file (unspecified)) (set! r28e1@make-parameter (unspecified)) (set! r28e3@mosh-cache-dir (unspecified)) (set! r2979@file-options-spec (unspecified)) (set! r28c3@library-file-path->cache-path (lambda (r297a@x) (call-with-values (lambda () (open-string-output-port)) (lambda (r2980@r297d r2981@r297f) (let ((r2984@extract r2981@r297f) (r2985@p r2980@r297d)) (letrec* ((r2989@display-hex (lambda (r2992@n) (if (<= '0 r2992@n '9) (display r2992@n r2985@p) (display (integer->char (+ (char->integer '#\a) (- r2992@n '10))) r2985@p))))) (begin (let r298c@f ((r298a@ls (string-split r297a@x '#\/))) (if (not (null? r298a@ls)) (begin (display '"_" r2985@p) (for-each (lambda (r298e@c) (if (or (char<=? '#\a r298e@c '#\z) (char<=? '#\A r298e@c '#\Z) (char<=? '#\0 r298e@c '#\9) (memv r298e@c '(#\- #\. #\_ #\~))) (display r298e@c r2985@p) (begin (display '"%" r2985@p) (let ((r2990@n (char->integer r298e@c))) (begin (r2989@display-hex (quotient r2990@n '16)) (r2989@display-hex (remainder r2990@n '16))))))) (string->list (car r298a@ls))) (r298c@f (cdr r298a@ls))) (void))) (r2984@extract)))))))) (set! r29f4@r28c3@library-file-path->cache-path r28c3@library-file-path->cache-path) (set! r28c5@read-annotated read) (set! r29f5@r28c5@read-annotated r28c5@read-annotated) (set! r28c7@annotation-stripped (lambda (r2994@x) (r28cd@annotation-expression r2994@x))) (set! r29f6@r28c7@annotation-stripped r28c7@annotation-stripped) (set! r28c9@annotation? (lambda (r2996@x) (source-info r2996@x))) (set! r29f7@r28c9@annotation? r28c9@annotation?) (set! r28cb@annotation-source (lambda (r2998@x) (source-info r2998@x))) (set! r29f8@r28cb@annotation-source r28cb@annotation-source) (set! r28cd@annotation-expression (lambda (r299a@x) (if (pair? r299a@x) (cons (car r299a@x) (cdr r299a@x)) (if (procedure? r299a@x) (set-source-info! r299a@x '#f) r299a@x)))) (set! r29f9@r28cd@annotation-expression r28cd@annotation-expression) (set! r28cf@scm->fasl (lambda (r299c@filename) (string-append (r28e3@mosh-cache-dir) '"/" (r28c3@library-file-path->cache-path r299c@filename) '".mosh-fasl"))) (set! r29fa@r28cf@scm->fasl r28cf@scm->fasl) (set! r28d1@fasl-save (lambda (r299e@filename r299f@obj) (call-with-port (open-file-output-port r299e@filename) (lambda (r29a2@port) ((symbol-value 'fasl-write!) r299f@obj r29a2@port))))) (set! r29fb@r28d1@fasl-save r28d1@fasl-save) (set! r28d3@fasl-load (lambda (r29a4@filename) (call-with-port (open-file-input-port r29a4@filename) (symbol-value 'fasl-read!)))) (set! r29fc@r28d3@fasl-load r28d3@fasl-load) (set! r28d5@verbose? (symbol-value '%verbose)) (set! r29fd@r28d5@verbose? r28d5@verbose?) (set! r28d7@serialize-library (lambda (r29a6@filename r29a7@obj) (begin (if r28d5@verbose? (format (current-error-port) '"serialize-library ~a\n..." r29a6@filename) (void)) (let ((r29aa@expanded2core (symbol-value 'expanded2core))) (let ((r29ac@compile (symbol-value 'compile-w/o-halt))) (let ((r29ae@code r29a7@obj)) (let ((r29b0@pivot (cddddr (cddddr r29ae@code)))) (let ((r29b2@visit (r29ac@compile (r29aa@expanded2core (car r29b0@pivot))))) (begin (set-car! r29b0@pivot r29b2@visit) (let ((r29b4@pivot (cdr r29b0@pivot))) (let ((r29b6@invoke (r29ac@compile (r29aa@expanded2core (car r29b4@pivot))))) (set-car! r29b4@pivot r29b6@invoke))))))))) (let ((r29b8@fasl-file (r28cf@scm->fasl r29a6@filename))) (begin (if (file-exists? r29b8@fasl-file) (delete-file r29b8@fasl-file) (void)) ((call/cc (lambda (r29bc@r29ba) (lambda () (with-exception-handler (lambda (r29be@c) ((call/cc (lambda (r29c0@r29bb) (r29bc@r29ba (lambda () (if '#t (begin (if r28d5@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" r29a6@filename) (void)) (if (file-exists? r29b8@fasl-file) (delete-file r29b8@fasl-file) (void)) '#f) (r29c0@r29bb (lambda () (raise-continuable r29be@c)))))))))) (lambda () (r28d1@fasl-save r29b8@fasl-file r29a7@obj)))))))))))) (set! r29fe@r28d7@serialize-library r28d7@serialize-library) (set! r28d9@load-serialized-library (lambda (r29c2@filename r29c3@obj) (and (r28e3@mosh-cache-dir) (let ((r29c6@fasl-file (r28cf@scm->fasl r29c2@filename))) (if (and (file-exists? r29c6@fasl-file) ((symbol-value 'file-newer?) r29c6@fasl-file r29c2@filename)) (let ((r29c8@expanded2core (symbol-value 'expanded2core))) (let ((r29ca@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((r29cc@code (r28d3@fasl-load r29c6@fasl-file))) (let ((r29ce@pivot (cddddr (cddddr r29cc@code)))) (let ((r29d0@visit (car r29ce@pivot))) (let ((r29d2@visit-proc (lambda () (r29ca@eval-compiled-core r29d0@visit)))) (begin (set-car! r29ce@pivot r29d2@visit-proc) (let ((r29d4@pivot (cdr r29ce@pivot))) (let ((r29d6@invoke (car r29d4@pivot))) (begin (set-car! r29d4@pivot (lambda () (r29ca@eval-compiled-core r29d6@invoke))) (apply r29c3@obj r29cc@code))))))))))) '#f))))) (set! r29ff@r28d9@load-serialized-library r28d9@load-serialized-library) (set! r28db@make-record-printer (lambda (r29d8@name r29d9@printer) (lambda r29dc@x (begin (display '"record printer") (for-each display r29dc@x))))) (set! r2a00@r28db@make-record-printer r28db@make-record-printer) (set! r28dd@compile-core (lambda r29de@x (apply error 'comile-core '"not implementated" r29de@x))) (set! r2a01@r28dd@compile-core r28dd@compile-core) (set! r28df@read-library-source-file (lambda (r29e0@file-name) (with-input-from-file r29e0@file-name r28c5@read-annotated))) (set! r2a02@r28df@read-library-source-file r28df@read-library-source-file) (set! r28e1@make-parameter (lambda r29f0 (let ((r29f1 (length r29f0))) (if (= r29f1 '1) (apply (lambda (r29e2@x) (r28e1@make-parameter r29e2@x (lambda (r29e4@x) r29e4@x))) r29f0) (if (= r29f1 '2) (apply (lambda (r29e6@x r29e7@fender) (let ((r29ea@x (r29e7@fender r29e6@x))) (lambda r29ee (let ((r29ef (length r29ee))) (if (= r29ef '0) (apply (lambda () r29ea@x) r29ee) (if (= r29ef '1) (apply (lambda (r29ec@v) (set! r29ea@x (r29e7@fender r29ec@v))) r29ee) (error 'apply '"invalid arg count"))))))) r29f0) (error 'apply '"invalid arg count")))))) (set! r2a03@r28e1@make-parameter r28e1@make-parameter) (set! r28e3@mosh-cache-dir (r28e1@make-parameter '#f)) (set! r2a04@r28e3@mosh-cache-dir r28e3@mosh-cache-dir) (set! r2979@file-options-spec (lambda (r29f2@x) r29f2@x)) (set! r2a05@r2979@file-options-spec r2979@file-options-spec) (void))
(begin (set! r2a0b@current-primitive-locations (unspecified)) (set! r2a0d@mutable? (unspecified)) (set! r2a0f@rewriter (unspecified)) (set! r2a11@expanded->core (unspecified)) (set! r2a13@compile-core-expr (unspecified)) (set! r2a15@pretty-print (unspecified)) (set! r2a17@compile-core-expr-to-port (unspecified)) (set! r2a0b@current-primitive-locations (r2a03@r28e1@make-parameter (lambda (r2a18@x) '#f) (lambda (r2a1a@p) r2a1a@p))) (set! r2a56@r2a0b@current-primitive-locations r2a0b@current-primitive-locations) (set! r2a0d@mutable? (lambda (r2a1c@x) (or (pair? r2a1c@x) (vector? r2a1c@x) (hashtable? r2a1c@x)))) (set! r2a57@r2a0d@mutable? r2a0d@mutable?) (set! r2a0f@rewriter (lambda (r2a1e@quote-hack?) (letrec* ((r2a21@f (lambda (r2a22@x) (if (pair? r2a22@x) (let ((r2a24@t (car r2a22@x))) (if (memv r2a24@t '(quote)) (if (and r2a1e@quote-hack? (r2a0d@mutable? (cadr r2a22@x))) (let ((r2a26@g (gensym))) (begin (set-symbol-value! r2a26@g (cadr r2a22@x)) r2a26@g)) r2a22@x) (if (memv r2a24@t '(case-lambda)) (cons 'case-lambda (map (lambda (r2a28@x) (cons (car r2a28@x) (map r2a21@f (cdr r2a28@x)))) (cdr r2a22@x))) (if (memv r2a24@t '(lambda)) (cons* 'lambda (cadr r2a22@x) (map r2a21@f (cddr r2a22@x))) (if (memv r2a24@t '(letrec)) (let ((r2a2a@bindings (cadr r2a22@x)) (r2a2b@body* (cddr r2a22@x))) (let ((r2a2e@lhs* (map car r2a2a@bindings)) (r2a2f@rhs* (map cadr r2a2a@bindings))) (cons* 'letrec (map list r2a2e@lhs* (map r2a21@f r2a2f@rhs*)) (map r2a21@f r2a2b@body*)))) (if (memv r2a24@t '(letrec*)) (let ((r2a32@bindings (cadr r2a22@x)) (r2a33@body* (cddr r2a22@x))) (let ((r2a36@lhs* (map car r2a32@bindings)) (r2a37@rhs* (map cadr r2a32@bindings))) (cons* 'letrec* (map list r2a36@lhs* (map r2a21@f r2a37@rhs*)) (map r2a21@f r2a33@body*)))) (if (memv r2a24@t '(library-letrec*)) (let ((r2a3a@name (cadr r2a22@x)) (r2a3b@x (cdr r2a22@x))) (let ((r2a3e@bindings (cadr r2a3b@x)) (r2a3f@body* (cddr r2a3b@x))) (let ((r2a42@lhs* (map car r2a3e@bindings)) (r2a43@lhs** (map cadr r2a3e@bindings)) (r2a44@rhs* (map caddr r2a3e@bindings))) (cons* 'library-letrec* r2a3a@name (map list r2a42@lhs* r2a43@lhs** (map r2a21@f r2a44@rhs*)) (map r2a21@f r2a3f@body*))))) (if (memv r2a24@t '(begin)) (cons 'begin (map r2a21@f (cdr r2a22@x))) (if (memv r2a24@t '(set!)) (list 'set! (cadr r2a22@x) (r2a21@f (caddr r2a22@x))) (if (memv r2a24@t '(primitive)) (let ((r2a48@op (cadr r2a22@x))) (let ((r2a4a@t ((r2a0b@current-primitive-locations) r2a48@op))) (if r2a4a@t ((lambda (r2a4c@loc) r2a4c@loc) r2a4a@t) r2a48@op))) (if (memv r2a24@t '(define)) r2a22@x (if (list? r2a22@x) (map r2a21@f r2a22@x) (error 'rewrite '"invalid form ~s ~s" r2a22@x (list? r2a22@x)))))))))))))) r2a22@x)))) r2a21@f))) (set! r2a58@r2a0f@rewriter r2a0f@rewriter) (set! r2a11@expanded->core (lambda (r2a4e@x) ((r2a0f@rewriter '#f) r2a4e@x))) (set! r2a59@r2a11@expanded->core r2a11@expanded->core) (set! r2a13@compile-core-expr (lambda (r2a50@x) ((r2a0f@rewriter '#f) r2a50@x))) (set! r2a5a@r2a13@compile-core-expr r2a13@compile-core-expr) (set! r2a15@pretty-print write) (set! r2a5b@r2a15@pretty-print r2a15@pretty-print) (set! r2a17@compile-core-expr-to-port (lambda (r2a52@x r2a53@p) (r2a15@pretty-print ((r2a0f@rewriter '#f) r2a52@x) r2a53@p))) (set! r2a5c@r2a17@compile-core-expr-to-port r2a17@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! r2aab@make-collection (unspecified)) (set! r2aad@current-library-collection (unspecified)) (set! r2aaf@rp (unspecified)) (set! r2ab9@library? (unspecified)) (set! r2abb@library-id (unspecified)) (set! r2abd@set-library-id! (unspecified)) (set! r2abf@library-name (unspecified)) (set! r2ac1@set-library-name! (unspecified)) (set! r2ac3@library-version (unspecified)) (set! r2ac5@set-library-version! (unspecified)) (set! r2ac7@library-imp* (unspecified)) (set! r2ac9@set-library-imp*! (unspecified)) (set! r2acb@library-vis* (unspecified)) (set! r2acd@set-library-vis*! (unspecified)) (set! r2acf@library-inv* (unspecified)) (set! r2ad1@set-library-inv*! (unspecified)) (set! r2ad3@library-subst (unspecified)) (set! r2ad5@set-library-subst! (unspecified)) (set! r2ad7@library-env (unspecified)) (set! r2ad9@set-library-env! (unspecified)) (set! r2adb@library-visit-state (unspecified)) (set! r2add@set-library-visit-state! (unspecified)) (set! r2adf@library-invoke-state (unspecified)) (set! r2ae1@set-library-invoke-state! (unspecified)) (set! r2ae3@library-visit-code (unspecified)) (set! r2ae5@set-library-visit-code! (unspecified)) (set! r2ae7@library-invoke-code (unspecified)) (set! r2ae9@set-library-invoke-code! (unspecified)) (set! r2aeb@library-visible? (unspecified)) (set! r2aed@set-library-visible?! (unspecified)) (set! r2aef@library-source-file-name (unspecified)) (set! r2af1@set-library-source-file-name! (unspecified)) (set! r2af3@dummy (unspecified)) (set! r2af5@find-dependencies (unspecified)) (set! r2af7@find-library-by (unspecified)) (set! r2af9@library-path (unspecified)) (set! r2afb@library-extensions (unspecified)) (set! r2afd@library-name->file-name (unspecified)) (set! r2aff@file-locator (unspecified)) (set! r2b01@serialize-all (unspecified)) (set! r2b03@current-precompiled-library-loader (unspecified)) (set! r2b05@try-load-from-file (unspecified)) (set! r2b07@library-loader (unspecified)) (set! r2b09@current-library-expander (unspecified)) (set! r2b0b@external-pending-libraries (unspecified)) (set! r2b0d@find-external-library (unspecified)) (set! r2b0f@find-library-by-name (unspecified)) (set! r2b11@library-exists? (unspecified)) (set! r2b13@find-library-by-spec/die (unspecified)) (set! r2b15@label->binding-table (unspecified)) (set! r2b17@install-library-record (unspecified)) (set! r2b19@install-library (unspecified)) (set! r2b1b@imported-label->binding (unspecified)) (set! r2b1d@invoke-library (unspecified)) (set! r2b1f@visit-library (unspecified)) (set! r2b21@invoke-library-by-spec (unspecified)) (set! r2b23@installed-libraries (unspecified)) (set! r2b25@library-spec (unspecified)) (set! r2aab@make-collection (lambda () (let ((r2b26@set '())) (letrec* ((r2b29@set-cons (lambda (r2b2e@x r2b2f@ls) (if (memq r2b2e@x r2b2f@ls) r2b2f@ls (cons r2b2e@x r2b2f@ls))))) (lambda r2b2c (let ((r2b2d (length r2b2c))) (if (= r2b2d '0) (apply (lambda () r2b26@set) r2b2c) (if (= r2b2d '1) (apply (lambda (r2b2a@x) (set! r2b26@set (r2b29@set-cons r2b2a@x r2b26@set))) r2b2c) (error 'apply '"invalid arg count"))))))))) (set! r2c9a@r2aab@make-collection r2aab@make-collection) (set! r2aad@current-library-collection (r2a03@r28e1@make-parameter (r2aab@make-collection) (lambda (r2b32@x) (begin (if (not (procedure? r2b32@x)) (assertion-violation 'current-library-collection '"not a procedure" r2b32@x) (void)) r2b32@x)))) (set! r2c9b@r2aad@current-library-collection r2aad@current-library-collection) (set! r2aaf@rp (r2a00@r28db@make-record-printer 'library (lambda (r2b34@x r2b35@p r2b36@wr) (begin (if (not (r2ab9@library? r2b34@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (r2ac3@library-version r2b34@x)) (r2abf@library-name r2b34@x) (append (r2abf@library-name r2b34@x) (list (r2ac3@library-version r2b34@x))))) r2b35@p))))) (set! r2c9c@r2aaf@rp r2aaf@rp) (set! r2ab9@library? (lambda (r2b3a@x) (and (simple-struct? r2b3a@x) (eq? (simple-struct-name r2b3a@x) 'library)))) (set! r2c9d@r2ab9@library? r2ab9@library?) (set! r2abb@library-id (lambda (r2b3c@x) (simple-struct-ref r2b3c@x '0))) (set! r2c9e@r2abb@library-id r2abb@library-id) (set! r2abd@set-library-id! (lambda (r2b3e@x r2b3f@val) (simple-struct-set! r2b3e@x '0 r2b3f@val))) (set! r2c9f@r2abd@set-library-id! r2abd@set-library-id!) (set! r2abf@library-name (lambda (r2b42@x) (simple-struct-ref r2b42@x '1))) (set! r2ca0@r2abf@library-name r2abf@library-name) (set! r2ac1@set-library-name! (lambda (r2b44@x r2b45@val) (simple-struct-set! r2b44@x '1 r2b45@val))) (set! r2ca1@r2ac1@set-library-name! r2ac1@set-library-name!) (set! r2ac3@library-version (lambda (r2b48@x) (simple-struct-ref r2b48@x '2))) (set! r2ca2@r2ac3@library-version r2ac3@library-version) (set! r2ac5@set-library-version! (lambda (r2b4a@x r2b4b@val) (simple-struct-set! r2b4a@x '2 r2b4b@val))) (set! r2ca3@r2ac5@set-library-version! r2ac5@set-library-version!) (set! r2ac7@library-imp* (lambda (r2b4e@x) (simple-struct-ref r2b4e@x '3))) (set! r2ca4@r2ac7@library-imp* r2ac7@library-imp*) (set! r2ac9@set-library-imp*! (lambda (r2b50@x r2b51@val) (simple-struct-set! r2b50@x '3 r2b51@val))) (set! r2ca5@r2ac9@set-library-imp*! r2ac9@set-library-imp*!) (set! r2acb@library-vis* (lambda (r2b54@x) (simple-struct-ref r2b54@x '4))) (set! r2ca6@r2acb@library-vis* r2acb@library-vis*) (set! r2acd@set-library-vis*! (lambda (r2b56@x r2b57@val) (simple-struct-set! r2b56@x '4 r2b57@val))) (set! r2ca7@r2acd@set-library-vis*! r2acd@set-library-vis*!) (set! r2acf@library-inv* (lambda (r2b5a@x) (simple-struct-ref r2b5a@x '5))) (set! r2ca8@r2acf@library-inv* r2acf@library-inv*) (set! r2ad1@set-library-inv*! (lambda (r2b5c@x r2b5d@val) (simple-struct-set! r2b5c@x '5 r2b5d@val))) (set! r2ca9@r2ad1@set-library-inv*! r2ad1@set-library-inv*!) (set! r2ad3@library-subst (lambda (r2b60@x) (simple-struct-ref r2b60@x '6))) (set! r2caa@r2ad3@library-subst r2ad3@library-subst) (set! r2ad5@set-library-subst! (lambda (r2b62@x r2b63@val) (simple-struct-set! r2b62@x '6 r2b63@val))) (set! r2cab@r2ad5@set-library-subst! r2ad5@set-library-subst!) (set! r2ad7@library-env (lambda (r2b66@x) (simple-struct-ref r2b66@x '7))) (set! r2cac@r2ad7@library-env r2ad7@library-env) (set! r2ad9@set-library-env! (lambda (r2b68@x r2b69@val) (simple-struct-set! r2b68@x '7 r2b69@val))) (set! r2cad@r2ad9@set-library-env! r2ad9@set-library-env!) (set! r2adb@library-visit-state (lambda (r2b6c@x) (simple-struct-ref r2b6c@x '8))) (set! r2cae@r2adb@library-visit-state r2adb@library-visit-state) (set! r2add@set-library-visit-state! (lambda (r2b6e@x r2b6f@val) (simple-struct-set! r2b6e@x '8 r2b6f@val))) (set! r2caf@r2add@set-library-visit-state! r2add@set-library-visit-state!) (set! r2adf@library-invoke-state (lambda (r2b72@x) (simple-struct-ref r2b72@x '9))) (set! r2cb0@r2adf@library-invoke-state r2adf@library-invoke-state) (set! r2ae1@set-library-invoke-state! (lambda (r2b74@x r2b75@val) (simple-struct-set! r2b74@x '9 r2b75@val))) (set! r2cb1@r2ae1@set-library-invoke-state! r2ae1@set-library-invoke-state!) (set! r2ae3@library-visit-code (lambda (r2b78@x) (simple-struct-ref r2b78@x '10))) (set! r2cb2@r2ae3@library-visit-code r2ae3@library-visit-code) (set! r2ae5@set-library-visit-code! (lambda (r2b7a@x r2b7b@val) (simple-struct-set! r2b7a@x '10 r2b7b@val))) (set! r2cb3@r2ae5@set-library-visit-code! r2ae5@set-library-visit-code!) (set! r2ae7@library-invoke-code (lambda (r2b7e@x) (simple-struct-ref r2b7e@x '11))) (set! r2cb4@r2ae7@library-invoke-code r2ae7@library-invoke-code) (set! r2ae9@set-library-invoke-code! (lambda (r2b80@x r2b81@val) (simple-struct-set! r2b80@x '11 r2b81@val))) (set! r2cb5@r2ae9@set-library-invoke-code! r2ae9@set-library-invoke-code!) (set! r2aeb@library-visible? (lambda (r2b84@x) (simple-struct-ref r2b84@x '12))) (set! r2cb6@r2aeb@library-visible? r2aeb@library-visible?) (set! r2aed@set-library-visible?! (lambda (r2b86@x r2b87@val) (simple-struct-set! r2b86@x '12 r2b87@val))) (set! r2cb7@r2aed@set-library-visible?! r2aed@set-library-visible?!) (set! r2aef@library-source-file-name (lambda (r2b8a@x) (simple-struct-ref r2b8a@x '13))) (set! r2cb8@r2aef@library-source-file-name r2aef@library-source-file-name) (set! r2af1@set-library-source-file-name! (lambda (r2b8c@x r2b8d@val) (simple-struct-set! r2b8c@x '13 r2b8d@val))) (set! r2cb9@r2af1@set-library-source-file-name! r2af1@set-library-source-file-name!) (set! r2af3@dummy '3) (set! r2cba@r2af3@dummy r2af3@dummy) (set! r2af5@find-dependencies (lambda (r2b90@ls) (if (null? r2b90@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! r2cbb@r2af5@find-dependencies r2af5@find-dependencies) (set! r2af7@find-library-by (lambda (r2b92@pred) (let r2b96@f ((r2b94@ls ((r2aad@current-library-collection)))) (if (null? r2b94@ls) '#f (if (r2b92@pred (car r2b94@ls)) (car r2b94@ls) (r2b96@f (cdr r2b94@ls))))))) (set! r2cbc@r2af7@find-library-by r2af7@find-library-by) (set! r2af9@library-path (r2a03@r28e1@make-parameter '(".") (lambda (r2b98@x) (if (and (list? r2b98@x) (for-all string? r2b98@x)) (map (lambda (r2b9a@x) r2b9a@x) r2b98@x) (assertion-violation 'library-path '"not a list of strings" r2b98@x))))) (set! r2cbd@r2af9@library-path r2af9@library-path) (set! r2afb@library-extensions (r2a03@r28e1@make-parameter '(".sls" ".ss" ".scm") (lambda (r2b9c@x) (if (and (list? r2b9c@x) (for-all string? r2b9c@x)) (map (lambda (r2b9e@x) r2b9e@x) r2b9c@x) (assertion-violation 'library-extensions '"not a list of strings" r2b9c@x))))) (set! r2cbe@r2afb@library-extensions r2afb@library-extensions) (set! r2afd@library-name->file-name (lambda (r2ba0@x) (call-with-values (lambda () (open-string-output-port)) (lambda (r2ba6@r2ba3 r2ba7@r2ba5) (let ((r2baa@extract r2ba7@r2ba5) (r2bab@p r2ba6@r2ba3)) (letrec* ((r2baf@display-hex (lambda (r2bb8@n) (if (<= '0 r2bb8@n '9) (display r2bb8@n r2bab@p) (display (integer->char (+ (char->integer '#\a) (- r2bb8@n '10))) r2bab@p))))) (begin (let r2bb2@f ((r2bb0@ls r2ba0@x)) (if (not (null? r2bb0@ls)) (begin (display '"/" r2bab@p) (for-each (lambda (r2bb4@c) (if (or (char<=? '#\a r2bb4@c '#\z) (char<=? '#\A r2bb4@c '#\Z) (char<=? '#\0 r2bb4@c '#\9) (memv r2bb4@c '(#\- #\. #\_ #\~))) (display r2bb4@c r2bab@p) (begin (display '"%" r2bab@p) (let ((r2bb6@n (char->integer r2bb4@c))) (begin (r2baf@display-hex (quotient r2bb6@n '16)) (r2baf@display-hex (remainder r2bb6@n '16))))))) (string->list (symbol->string (car r2bb0@ls)))) (r2bb2@f (cdr r2bb0@ls))) (void))) (r2baa@extract)))))))) (set! r2cbf@r2afd@library-name->file-name r2afd@library-name->file-name) (set! r2aff@file-locator (r2a03@r28e1@make-parameter (lambda (r2bba@x) (let ((r2bbc@str (r2afd@library-name->file-name r2bba@x))) (let r2bc4@f ((r2bbe@ls (r2af9@library-path)) (r2bbf@exts (r2afb@library-extensions)) (r2bc0@failed-list '())) (if (null? r2bbe@ls) (letrec* ((r2bce@r2bc9 (make-record-type-descriptor '&library-resolution r4ecf@r4c16@&condition-rtd 'r2bcc '#f '#f '#((immutable library) (immutable files)))) (r2bd0@r2bcb '#f) (r2bd2@r2bca (make-record-constructor-descriptor r2bce@r2bc9 r4ed0@r4c18@&condition-rcd r2bd0@r2bcb)) (r2bd5@r2bc8 (record-predicate r2bce@r2bc9)) (r2bd7@make-library-resolution-condition (record-constructor r2bd2@r2bca)) (r2bd9@r2bc6 (record-accessor r2bce@r2bc9 '0)) (r2bdb@r2bc7 (record-accessor r2bce@r2bc9 '1)) (r2bdd@library-resolution-condition? (condition-predicate r2bce@r2bc9)) (r2bdf@condition-library (condition-accessor r2bce@r2bc9 r2bd9@r2bc6)) (r2be1@condition-files (condition-accessor r2bce@r2bc9 r2bdb@r2bc7))) (raise (condition (r4eef@r4cb0@make-error) (r4f11@r4d0c@make-who-condition 'expander) (r4ed5@r4c6d@make-message-condition '"cannot locate library in library-path") (r2bd7@make-library-resolution-condition r2bba@x (reverse r2bc0@failed-list))))) (if (null? r2bbf@exts) (r2bc4@f (cdr r2bbe@ls) (r2afb@library-extensions) r2bc0@failed-list) (let ((r2be2@name (string-append (car r2bbe@ls) r2bbc@str (car r2bbf@exts)))) (if (file-exists? r2be2@name) r2be2@name (r2bc4@f r2bbe@ls (cdr r2bbf@exts) (cons r2be2@name r2bc0@failed-list))))))))) (lambda (r2be4@f) (if (procedure? r2be4@f) r2be4@f (assertion-violation 'file-locator '"not a procedure" r2be4@f))))) (set! r2cc0@r2aff@file-locator r2aff@file-locator) (set! r2b01@serialize-all (lambda (r2be6@serialize r2be7@compile) (letrec* ((r2beb@library-desc (lambda (r2bee@x) (list (r2abb@library-id r2bee@x) (r2abf@library-name r2bee@x))))) (for-each (lambda (r2bec@x) (if (r2aef@library-source-file-name r2bec@x) (r2be6@serialize (r2aef@library-source-file-name r2bec@x) (list (r2abb@library-id r2bec@x) (r2abf@library-name r2bec@x) (r2ac3@library-version r2bec@x) (map r2beb@library-desc (r2ac7@library-imp* r2bec@x)) (map r2beb@library-desc (r2acb@library-vis* r2bec@x)) (map r2beb@library-desc (r2acf@library-inv* r2bec@x)) (r2ad3@library-subst r2bec@x) (r2ad7@library-env r2bec@x) (r2be7@compile (r2ae3@library-visit-code r2bec@x)) (r2be7@compile (r2ae7@library-invoke-code r2bec@x)) (r2aeb@library-visible? r2bec@x))) (void))) ((r2aad@current-library-collection)))))) (set! r2cc1@r2b01@serialize-all r2b01@serialize-all) (set! r2b03@current-precompiled-library-loader (r2a03@r28e1@make-parameter (lambda (r2bf0@filename r2bf1@sk) '#f))) (set! r2cc2@r2b03@current-precompiled-library-loader r2b03@current-precompiled-library-loader) (set! r2b05@try-load-from-file (lambda (r2bf4@filename) ((r2b03@current-precompiled-library-loader) r2bf4@filename (lambda r2c1a (let ((r2c1b (length r2c1a))) (if (= r2c1b '11) (apply (lambda (r2bf6@id r2bf7@name r2bf8@ver r2bf9@imp* r2bfa@vis* r2bfb@inv* r2bfc@exp-subst r2bfd@exp-env r2bfe@visit-proc r2bff@invoke-proc r2c00@visible?) (let r2c0e@f ((r2c0c@deps (append r2bf9@imp* r2bfa@vis* r2bfb@inv*))) (if (null? r2c0c@deps) (begin (r2b19@install-library r2bf6@id r2bf7@name r2bf8@ver r2bf9@imp* r2bfa@vis* r2bfb@inv* r2bfc@exp-subst r2bfd@exp-env r2bfe@visit-proc r2bff@invoke-proc '#f '#f r2c00@visible? '#f) '#t) (let ((r2c10@d (car r2c0c@deps))) (let ((r2c12@label (car r2c10@d)) (r2c13@dname (cadr r2c10@d))) (let ((r2c16@l (r2b0f@find-library-by-name r2c13@dname))) (if (and (r2ab9@library? r2c16@l) (eq? r2c12@label (r2abb@library-id r2c16@l))) (r2c0e@f (cdr r2c0c@deps)) (begin (if r29fd@r28d5@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" r2bf7@name r2c13@dname r2bf4@filename r2c16@l r2c12@label (r2abb@library-id r2c16@l)) (void)) '#f)))))))) r2c1a) (if (>= r2c1b '0) (apply (lambda r2c18@others '#f) r2c1a) (error 'apply '"invalid arg count")))))))) (set! r2cc3@r2b05@try-load-from-file r2b05@try-load-from-file) (set! r2b07@library-loader (r2a03@r28e1@make-parameter (lambda (r2c1c@x) (let ((r2c1e@file-name ((r2aff@file-locator) r2c1c@x))) (if (not r2c1e@file-name) (assertion-violation '#f '"cannot file library" r2c1c@x) (or (r2b05@try-load-from-file r2c1e@file-name) ((r2b09@current-library-expander) (r2a02@r28df@read-library-source-file r2c1e@file-name) r2c1e@file-name (lambda (r2c20@name) (if (not (fast-equal? r2c20@name r2c1c@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (r2c26@r2c23 r2c27@r2c25) (let ((r2c2a@e r2c27@r2c25) (r2c2b@p r2c26@r2c23)) (begin (display '"expected to find library " r2c2b@p) (write r2c1c@x r2c2b@p) (display '" in file " r2c2b@p) (display r2c1e@file-name r2c2b@p) (display '", found " r2c2b@p) (write r2c20@name r2c2b@p) (display '" instead" r2c2b@p) (r2c2a@e)))))) (void)))))))) (lambda (r2c2e@f) (if (procedure? r2c2e@f) r2c2e@f (assertion-violation 'library-locator '"not a procedure" r2c2e@f))))) (set! r2cc4@r2b07@library-loader r2b07@library-loader) (set! r2b09@current-library-expander (r2a03@r28e1@make-parameter (lambda (r2c30@x) (assertion-violation 'library-expander '"not initialized")) (lambda (r2c32@f) (if (procedure? r2c32@f) r2c32@f (assertion-violation 'library-expander '"not a procedure" r2c32@f))))) (set! r2cc5@r2b09@current-library-expander r2b09@current-library-expander) (set! r2b0b@external-pending-libraries (r2a03@r28e1@make-parameter '())) (set! r2cc6@r2b0b@external-pending-libraries r2b0b@external-pending-libraries) (set! r2b0d@find-external-library (lambda (r2c34@name) (begin (if (member r2c34@name (r2b0b@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" r2c34@name) (void)) (let ((r2c3a@r2c37 r2b0b@external-pending-libraries) (r2c3b@r2c39 (cons r2c34@name (r2b0b@external-pending-libraries)))) (let ((r2c3e@swap (lambda () (let ((r2c40@t (r2c3a@r2c37))) (begin (r2c3a@r2c37 r2c3b@r2c39) (set! r2c3b@r2c39 r2c40@t)))))) (dynamic-wind r2c3e@swap (lambda () (begin ((r2b07@library-loader) r2c34@name) (or (r2af7@find-library-by (lambda (r2c42@x) (fast-equal? (r2abf@library-name r2c42@x) r2c34@name))) (assertion-violation '#f '"handling external library did not yield the correct library" r2c34@name)))) r2c3e@swap)))))) (set! r2cc7@r2b0d@find-external-library r2b0d@find-external-library) (set! r2b0f@find-library-by-name (lambda (r2c44@name) (or (r2af7@find-library-by (lambda (r2c46@x) (fast-equal? (r2abf@library-name r2c46@x) r2c44@name))) (r2b0d@find-external-library r2c44@name)))) (set! r2cc8@r2b0f@find-library-by-name r2b0f@find-library-by-name) (set! r2b11@library-exists? (lambda (r2c48@name) (and (r2af7@find-library-by (lambda (r2c4a@x) (fast-equal? (r2abf@library-name r2c4a@x) r2c48@name))) '#t))) (set! r2cc9@r2b11@library-exists? r2b11@library-exists?) (set! r2b13@find-library-by-spec/die (lambda (r2c4c@spec) (let ((r2c4e@id (car r2c4c@spec))) (or (r2af7@find-library-by (lambda (r2c50@x) (eq? r2c4e@id (r2abb@library-id r2c50@x)))) (assertion-violation '#f '"cannot find library with required spec" r2c4c@spec))))) (set! r2cca@r2b13@find-library-by-spec/die r2b13@find-library-by-spec/die) (set! r2b15@label->binding-table (make-eq-hashtable)) (set! r2ccb@r2b15@label->binding-table r2b15@label->binding-table) (set! r2b17@install-library-record (lambda (r2c52@lib) (begin (let ((r2c54@exp-env (r2ad7@library-env r2c52@lib))) (for-each (lambda (r2c56@x) (let ((r2c58@label (car r2c56@x)) (r2c59@binding (cdr r2c56@x))) (let ((r2c5c@binding (let ((r2c5e@t (car r2c59@binding))) (if (memv r2c5e@t '(global)) (cons 'global (cons r2c52@lib (cdr r2c59@binding))) (if (memv r2c5e@t '(global-macro)) (cons 'global-macro (cons r2c52@lib (cdr r2c59@binding))) (if (memv r2c5e@t '(global-macro!)) (cons 'global-macro! (cons r2c52@lib (cdr r2c59@binding))) r2c59@binding)))))) (begin (if (hashtable-ref r2b15@label->binding-table r2c58@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" r2c58@label (hashtable-ref r2b15@label->binding-table r2c58@label '#f) r2c5c@binding) (exit)) (void)) (hashtable-set! r2b15@label->binding-table r2c58@label r2c5c@binding))))) r2c54@exp-env)) ((r2aad@current-library-collection) r2c52@lib)))) (set! r2ccc@r2b17@install-library-record r2b17@install-library-record) (set! r2b19@install-library (lambda (r2c60@id r2c61@name r2c62@ver r2c63@imp* r2c64@vis* r2c65@inv* r2c66@exp-subst r2c67@exp-env r2c68@visit-proc r2c69@invoke-proc r2c6a@visit-code r2c6b@invoke-code r2c6c@visible? r2c6d@source-file-name) (let ((r2c7c@imp-lib* (map r2b13@find-library-by-spec/die r2c63@imp*)) (r2c7d@vis-lib* (map r2b13@find-library-by-spec/die r2c64@vis*)) (r2c7e@inv-lib* (map r2b13@find-library-by-spec/die r2c65@inv*))) (begin (if (not (and (symbol? r2c60@id) (list? r2c61@name) (list? r2c62@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" r2c60@id r2c61@name r2c62@ver) (void)) (if (r2b11@library-exists? r2c61@name) (assertion-violation 'install-library '"library is already installed" r2c61@name) (void)) (let ((r2c82@lib (make-simple-struct 'library '15 (list r2c60@id r2c61@name r2c62@ver r2c7c@imp-lib* r2c7d@vis-lib* r2c7e@inv-lib* r2c66@exp-subst r2c67@exp-env r2c68@visit-proc r2c69@invoke-proc r2c6a@visit-code r2c6b@invoke-code r2c6c@visible? r2c6d@source-file-name)))) (r2b17@install-library-record r2c82@lib)))))) (set! r2ccd@r2b19@install-library r2b19@install-library) (set! r2b1b@imported-label->binding (lambda (r2c84@lab) (hashtable-ref r2b15@label->binding-table r2c84@lab '#f))) (set! r2cce@r2b1b@imported-label->binding r2b1b@imported-label->binding) (set! r2b1d@invoke-library (lambda (r2c86@lib) (let ((r2c88@invoke (r2adf@library-invoke-state r2c86@lib))) (if (procedure? r2c88@invoke) (begin (r2ae1@set-library-invoke-state! r2c86@lib (lambda () (assertion-violation 'invoke '"circularity detected" r2c86@lib))) (for-each r2b1d@invoke-library (r2acf@library-inv* r2c86@lib)) (r2ae1@set-library-invoke-state! r2c86@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" r2c86@lib))) (r2c88@invoke) (r2ae1@set-library-invoke-state! r2c86@lib '#t)) (void))))) (set! r2ccf@r2b1d@invoke-library r2b1d@invoke-library) (set! r2b1f@visit-library (lambda (r2c8a@lib) (let ((r2c8c@visit (r2adb@library-visit-state r2c8a@lib))) (if (procedure? r2c8c@visit) (begin (r2add@set-library-visit-state! r2c8a@lib (lambda () (assertion-violation 'visit '"circularity detected" r2c8a@lib))) (for-each r2b1d@invoke-library (r2acb@library-vis* r2c8a@lib)) (r2add@set-library-visit-state! r2c8a@lib (lambda () (assertion-violation 'invoke '"first visit did not return" r2c8a@lib))) (r2c8c@visit) (r2add@set-library-visit-state! r2c8a@lib '#t)) (void))))) (set! r2cd0@r2b1f@visit-library r2b1f@visit-library) (set! r2b21@invoke-library-by-spec (lambda (r2c8e@spec) (r2b1d@invoke-library (r2b13@find-library-by-spec/die r2c8e@spec)))) (set! r2cd1@r2b21@invoke-library-by-spec r2b21@invoke-library-by-spec) (set! r2b23@installed-libraries (lambda r2c96 (let ((r2c97 (length r2c96))) (if (= r2c97 '1) (apply (lambda (r2c90@all?) (let r2c94@f ((r2c92@ls ((r2aad@current-library-collection)))) (if (null? r2c92@ls) '() (if (or r2c90@all? (r2aeb@library-visible? (car r2c92@ls))) (cons (car r2c92@ls) (r2c94@f (cdr r2c92@ls))) (r2c94@f (cdr r2c92@ls)))))) r2c96) (if (= r2c97 '0) (apply (lambda () (r2b23@installed-libraries '#f)) r2c96) (error 'apply '"invalid arg count")))))) (set! r2cd2@r2b23@installed-libraries r2b23@installed-libraries) (set! r2b25@library-spec (lambda (r2c98@x) (begin (if (not (r2ab9@library? r2c98@x)) (assertion-violation 'library-spec '"not a library" r2c98@x) (void)) (list (r2abb@library-id r2c98@x) (r2abf@library-name r2c98@x) (r2ac3@library-version r2c98@x))))) (set! r2cd3@r2b25@library-spec r2b25@library-spec) (void))
(begin (set! r2cd7@build-global-define (unspecified)) (set! r2d48@build-lambda (unspecified)) (set! r2d4a@build-case-lambda (unspecified)) (set! r2d78@build-sequence (unspecified)) (set! r2d7a@build-void (unspecified)) (set! r2d7c@build-letrec (unspecified)) (set! r2d7e@build-let (unspecified)) (set! r2d80@build-named-let (unspecified)) (set! r2d82@build-letrec* (unspecified)) (set! r2d84@build-library-letrec* (unspecified)) (set! r2d86@build-receive (unspecified)) (set! r2cd7@build-global-define (lambda (r2d87@x) (r2d7a@build-void))) (set! r2e15@r2cd7@build-global-define r2cd7@build-global-define) (set! r2d48@build-lambda (lambda (r2d89@ae r2d8a@vars r2d8b@exp) (list 'lambda r2d8a@vars r2d8b@exp))) (set! r2e16@r2d48@build-lambda r2d48@build-lambda) (set! r2d4a@build-case-lambda (lambda (r2d8f@ae r2d90@vars* r2d91@exp*) (letrec* ((r2d96@build-error (lambda (r2dcd@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (r2d98@build-pred (lambda (r2db5@ae r2db6@n r2db7@vars) (call-with-values (lambda () (let r2dc3@f ((r2dbf@vars r2db7@vars) (r2dc0@count '0)) (if (pair? r2dbf@vars) (r2dc3@f (cdr r2dbf@vars) (+ r2dc0@count '1)) (if (null? r2dbf@vars) (values r2dc0@count '=) (values r2dc0@count '>=))))) (lambda (r2dc5@r2dbc r2dc6@r2dbe) (let ((r2dc9@pred r2dc6@r2dbe) (r2dca@count r2dc5@r2dbc)) (list (list 'primitive r2dc9@pred) r2db6@n (list 'quote r2dca@count))))))) (r2d9a@build-apply (lambda (r2dad@ae r2dae@g r2daf@vars r2db0@exp) (list '(primitive apply) (r2d48@build-lambda r2dad@ae r2daf@vars r2db0@exp) r2dae@g))) (r2d9c@expand-case-lambda (lambda (r2d9d@ae r2d9e@vars r2d9f@exp*) (let ((r2da3@g (gensym)) (r2da4@n (gensym))) (list 'lambda r2da3@g (r2d7e@build-let r2d9d@ae (list r2da4@n) (list (list '(primitive length) r2da3@g)) (let r2dab@f ((r2da7@vars* r2d90@vars*) (r2da8@exp* r2d9f@exp*)) (if (null? r2da7@vars*) (r2d96@build-error r2d9d@ae) (list 'if (r2d98@build-pred r2d9d@ae r2da4@n (car r2da7@vars*)) (r2d9a@build-apply r2d9d@ae r2da3@g (car r2da7@vars*) (car r2da8@exp*)) (r2dab@f (cdr r2da7@vars*) (cdr r2da8@exp*))))))))))) (if (= (length r2d91@exp*) '1) (r2d48@build-lambda r2d8f@ae (car r2d90@vars*) (car r2d91@exp*)) (r2d9c@expand-case-lambda r2d8f@ae r2d90@vars* r2d91@exp*))))) (set! r2e17@r2d4a@build-case-lambda r2d4a@build-case-lambda) (set! r2d78@build-sequence (lambda (r2dcf@ae r2dd0@exps) (let r2dd5@loop ((r2dd3@exps r2dd0@exps)) (if (null? (cdr r2dd3@exps)) (car r2dd3@exps) (if (equal? (car r2dd3@exps) (r2d7a@build-void)) (r2dd5@loop (cdr r2dd3@exps)) (cons 'begin r2dd3@exps)))))) (set! r2e18@r2d78@build-sequence r2d78@build-sequence) (set! r2d7a@build-void (lambda () '((primitive void)))) (set! r2e19@r2d7a@build-void r2d7a@build-void) (set! r2d7c@build-letrec (lambda (r2dd7@ae r2dd8@vars r2dd9@val-exps r2dda@body-exp) (if (null? r2dd8@vars) r2dda@body-exp (list 'letrec (map list r2dd8@vars r2dd9@val-exps) r2dda@body-exp)))) (set! r2e1a@r2d7c@build-letrec r2d7c@build-letrec) (set! r2d7e@build-let (lambda (r2ddf@ae r2de0@vars r2de1@val-exps r2de2@body-exp) (if (null? r2de0@vars) r2de2@body-exp (list 'let (map list r2de0@vars r2de1@val-exps) r2de2@body-exp)))) (set! r2e1b@r2d7e@build-let r2d7e@build-let) (set! r2d80@build-named-let (lambda (r2de7@ae r2de8@name r2de9@vars r2dea@val-exps r2deb@body-exp) (list 'let r2de8@name (map list r2de9@vars r2dea@val-exps) r2deb@body-exp))) (set! r2e1c@r2d80@build-named-let r2d80@build-named-let) (set! r2d82@build-letrec* (lambda (r2df1@ae r2df2@vars r2df3@val-exps r2df4@body-exp) (if (null? r2df2@vars) r2df4@body-exp (list 'letrec* (map list r2df2@vars r2df3@val-exps) r2df4@body-exp)))) (set! r2e1d@r2d82@build-letrec* r2d82@build-letrec*) (set! r2d84@build-library-letrec* (lambda (r2df9@ae r2dfa@name r2dfb@vars r2dfc@locs r2dfd@val-exps r2dfe@body-exp) (cons 'begin (append (map (lambda (r2e05@var) (cons 'set! (cons r2e05@var '((unspecified))))) r2dfb@vars) (append (apply append (map (lambda (r2e07@var r2e08@loc r2e09@val-exp) (list (list 'set! r2e07@var r2e09@val-exp) (list 'set! r2e08@loc r2e07@var))) r2dfb@vars r2dfc@locs r2dfd@val-exps)) (list r2dfe@body-exp)))))) (set! r2e1e@r2d84@build-library-letrec* r2d84@build-library-letrec*) (set! r2d86@build-receive (lambda (r2e0d@ae r2e0e@vars r2e0f@producer r2e10@body*) (begin (display '"************** in ") (cons 'receive (cons r2e0e@vars (cons r2e0f@producer r2e10@body*)))))) (set! r2e1f@r2d86@build-receive r2d86@build-receive) (void))
(begin (set! r2e2e@file-options-macro (unspecified)) (set! r2e30@set-cons (unspecified)) (set! r2e32@set-union (unspecified)) (set! r2e37@top-mark* (unspecified)) (set! r2e39@top-marked? (unspecified)) (set! r2e3b@gen-lexical (unspecified)) (set! r2e3d@gen-global (unspecified)) (set! r2e3f@gen-label (unspecified)) (set! r2e41@gen-top-level-label (unspecified)) (set! r2e43@gen-define-label+loc (unspecified)) (set! r2e45@gen-define-label (unspecified)) (set! r2e4f@rib? (unspecified)) (set! r2e51@rib-sym* (unspecified)) (set! r2e53@set-rib-sym*! (unspecified)) (set! r2e55@rib-mark** (unspecified)) (set! r2e57@set-rib-mark**! (unspecified)) (set! r2e59@rib-label* (unspecified)) (set! r2e5b@set-rib-label*! (unspecified)) (set! r2e5d@rib-sealed/freq (unspecified)) (set! r2e5f@set-rib-sealed/freq! (unspecified)) (set! r2e61@rib-cache (unspecified)) (set! r2e63@set-rib-cache! (unspecified)) (set! r2e65@dummy (unspecified)) (set! r2e67@make-empty-rib (unspecified)) (set! r2e69@extend-rib! (unspecified)) (set! r2e6b@extend-rib/nc! (unspecified)) (set! r2e6d@make-rib-map (unspecified)) (set! r2e6f@seal-rib! (unspecified)) (set! r2e71@unseal-rib! (unspecified)) (set! r2e73@make-full-rib (unspecified)) (set! r2e75@rp (unspecified)) (set! r2e7f@stx? (unspecified)) (set! r2e81@stx-expr (unspecified)) (set! r2e83@set-stx-expr! (unspecified)) (set! r2e85@stx-mark* (unspecified)) (set! r2e87@set-stx-mark*! (unspecified)) (set! r2e89@stx-subst* (unspecified)) (set! r2e8b@set-stx-subst*! (unspecified)) (set! r2e8d@stx-ae* (unspecified)) (set! r2e8f@set-stx-ae*! (unspecified)) (set! r2e91@dummy (unspecified)) (set! r2e93@datum->stx (unspecified)) (set! r2e95@gen-mark (unspecified)) (set! r2e97@anti-mark (unspecified)) (set! r2e99@anti-mark? (unspecified)) (set! r2e9b@mkstx (unspecified)) (set! r2e9d@add-mark (unspecified)) (set! r2e9f@add-subst (unspecified)) (set! r2ea1@syntax-kind? (unspecified)) (set! r2ea3@syntax-vector->list (unspecified)) (set! r2ea5@syntax-pair? (unspecified)) (set! r2ea7@syntax-vector? (unspecified)) (set! r2ea9@syntax-null? (unspecified)) (set! r2eab@syntax-list? (unspecified)) (set! r2ead@syntax-car (unspecified)) (set! r2eaf@syntax-cdr (unspecified)) (set! r2eb1@syntax->list (unspecified)) (set! r2eb3@id? (unspecified)) (set! r2eb5@id->sym (unspecified)) (set! r2eb7@bound-id=? (unspecified)) (set! r2eb9@free-id=? (unspecified)) (set! r2ebb@valid-bound-ids? (unspecified)) (set! r2ebd@distinct-bound-ids? (unspecified)) (set! r2ebf@bound-id-member? (unspecified)) (set! r2ec1@self-evaluating? (unspecified)) (set! r2ec3@strip-annotations (unspecified)) (set! r2ec5@strip (unspecified)) (set! r2ec7@stx->datum (unspecified)) (set! r2ec9@id->label (unspecified)) (set! r2ecb@label->binding (unspecified)) (set! r2ecd@make-binding (unspecified)) (set! r2ecf@binding-type (unspecified)) (set! r2ed1@binding-value (unspecified)) (set! r2ed3@raise-unbound-error (unspecified)) (set! r2ed5@syntax-type (unspecified)) (set! r2ee3@sanitize-binding (unspecified)) (set! r2ee5@make-variable-transformer (unspecified)) (set! r2ee7@variable-transformer? (unspecified)) (set! r2ee9@variable-transformer-procedure (unspecified)) (set! r2eeb@make-eval-transformer (unspecified)) (set! r303c@parse-define (unspecified)) (set! r303e@parse-define-syntax (unspecified)) (set! r3040@scheme-stx-hashtable (unspecified)) (set! r3042@scheme-stx (unspecified)) (set! r3044@lexical-var (unspecified)) (set! r3046@lexical-mutable? (unspecified)) (set! r3048@set-lexical-mutable! (unspecified)) (set! r304a@add-lexical (unspecified)) (set! r304c@add-lexicals (unspecified)) (set! r304e@letrec-helper (unspecified)) (set! r3050@let-transformer (unspecified)) (set! r3052@letrec-transformer (unspecified)) (set! r3054@letrec*-transformer (unspecified)) (set! r3056@fluid-let-syntax-transformer (unspecified)) (set! r3058@type-descriptor-transformer (unspecified)) (set! r305a@record-type-descriptor-transformer (unspecified)) (set! r305c@record-constructor-descriptor-transformer (unspecified)) (set! r305e@when-macro (unspecified)) (set! r3060@unless-macro (unspecified)) (set! r3062@if-transformer (unspecified)) (set! r3064@and-transformer (unspecified)) (set! r3066@or-transformer (unspecified)) (set! r3068@case-macro (unspecified)) (set! r306a@quote-transformer (unspecified)) (set! r306c@case-lambda-transformer (unspecified)) (set! r306e@lambda-transformer (unspecified)) (set! r3070@bless (unspecified)) (set! r3072@with-syntax-macro (unspecified)) (set! r3074@invalid-fmls-error (unspecified)) (set! r3076@let-macro (unspecified)) (set! r3078@let-values-macro (unspecified)) (set! r307a@let*-values-macro (unspecified)) (set! r307c@trace-lambda-macro (unspecified)) (set! r307e@trace-define-macro (unspecified)) (set! r3080@trace-define-syntax-macro (unspecified)) (set! r3082@trace-let/rec-syntax (unspecified)) (set! r3084@trace-let-syntax-macro (unspecified)) (set! r3086@trace-letrec-syntax-macro (unspecified)) (set! r3088@guard-macro (unspecified)) (set! r308a@define-enumeration-macro (unspecified)) (set! r308c@time-macro (unspecified)) (set! r308e@delay-macro (unspecified)) (set! r3090@assert-macro (unspecified)) (set! r3092@endianness-macro (unspecified)) (set! r3094@identifier-syntax-macro (unspecified)) (set! r3096@do-macro (unspecified)) (set! r3098@let*-macro (unspecified)) (set! r309a@or-macro (unspecified)) (set! r309c@and-macro (unspecified)) (set! r309e@cond-macro (unspecified)) (set! r30a0@do-include (unspecified)) (set! r30a2@include-macro (unspecified)) (set! r30a4@include-into-macro (unspecified)) (set! r30a6@syntax-rules-macro (unspecified)) (set! r30a8@quasiquote-macro (unspecified)) (set! r30aa@quasisyntax-macro (unspecified)) (set! r30ac@define-struct-macro (unspecified)) (set! r30ae@define-record-type-macro (unspecified)) (set! r30b0@define-condition-type-macro (unspecified)) (set! r30b2@incorrect-usage-macro (unspecified)) (set! r30b4@parameterize-macro (unspecified)) (set! r30b6@foreign-call-transformer (unspecified)) (set! r30b8@convert-pattern (unspecified)) (set! r30ba@syntax-dispatch (unspecified)) (set! r30bc@ellipsis? (unspecified)) (set! r30be@underscore? (unspecified)) (set! r30c0@verify-literals (unspecified)) (set! r30c2@syntax-case-transformer (unspecified)) (set! r30c4@ellipsis-map (unspecified)) (set! r30c6@syntax-transformer (unspecified)) (set! r30c8@core-macro-transformer (unspecified)) (set! r30ca@symbol-macro (unspecified)) (set! r30cc@macro-transformer (unspecified)) (set! r30ce@local-macro-transformer (unspecified)) (set! r30d0@do-macro-call (unspecified)) (set! r30d2@chi-macro (unspecified)) (set! r30d4@chi-local-macro (unspecified)) (set! r30d6@chi-global-macro (unspecified)) (set! r30d8@chi-expr* (unspecified)) (set! r30da@chi-application (unspecified)) (set! r30dc@chi-expr (unspecified)) (set! r30de@chi-set! (unspecified)) (set! r30e0@verify-formals (unspecified)) (set! r30e2@chi-lambda-clause (unspecified)) (set! r30e4@chi-lambda-clause* (unspecified)) (set! r30e6@chi-defun (unspecified)) (set! r30e8@chi-rhs (unspecified)) (set! r30ea@expand-interaction-rhs*/init* (unspecified)) (set! r30ec@chi-rhs* (unspecified)) (set! r30ee@find-bound=? (unspecified)) (set! r30f0@find-dups (unspecified)) (set! r30f2@chi-internal (unspecified)) (set! r30f4@parse-module (unspecified)) (set! r30fe@module-interface? (unspecified)) (set! r3100@module-interface-first-mark (unspecified)) (set! r3102@set-module-interface-first-mark! (unspecified)) (set! r3104@module-interface-exp-id-vec (unspecified)) (set! r3106@set-module-interface-exp-id-vec! (unspecified)) (set! r3108@module-interface-exp-lab-vec (unspecified)) (set! r310a@set-module-interface-exp-lab-vec! (unspecified)) (set! r310c@dummy (unspecified)) (set! r310e@module-interface-exp-id* (unspecified)) (set! r3110@chi-internal-module (unspecified)) (set! r3112@chi-body* (unspecified)) (set! r3114@expand-transformer (unspecified)) (set! r3116@parse-exports (unspecified)) (set! r3118@parse-library-name (unspecified)) (set! r311a@parse-library (unspecified)) (set! r311c@parse-import-spec* (unspecified)) (set! r311e@make-top-rib (unspecified)) (set! r3120@make-collector (unspecified)) (set! r3122@inv-collector (unspecified)) (set! r3124@vis-collector (unspecified)) (set! r3126@imp-collector (unspecified)) (set! r3128@chi-library-internal (unspecified)) (set! r312a@chi-interaction-expr (unspecified)) (set! r312c@library-body-expander (unspecified)) (set! r312e@core-library-expander (unspecified)) (set! r3130@parse-top-level-program (unspecified)) (set! r3132@top-level-expander (unspecified)) (set! r3134@rp (unspecified)) (set! r313e@env? (unspecified)) (set! r3140@env-names (unspecified)) (set! r3142@set-env-names! (unspecified)) (set! r3144@env-labels (unspecified)) (set! r3146@set-env-labels! (unspecified)) (set! r3148@env-itc (unspecified)) (set! r314a@set-env-itc! (unspecified)) (set! r314c@dummy (unspecified)) (set! r314e@rp (unspecified)) (set! r3158@interaction-env? (unspecified)) (set! r315a@interaction-env-rib (unspecified)) (set! r315c@set-interaction-env-rib! (unspecified)) (set! r315e@interaction-env-r (unspecified)) (set! r3160@set-interaction-env-r! (unspecified)) (set! r3162@interaction-env-locs (unspecified)) (set! r3164@set-interaction-env-locs! (unspecified)) (set! r3166@dummy (unspecified)) (set! r3168@interaction-environment-symbols (unspecified)) (set! r316a@environment-bindings (unspecified)) (set! r316c@parse-binding (unspecified)) (set! r316e@environment? (unspecified)) (set! r3170@environment-symbols (unspecified)) (set! r3172@environment (unspecified)) (set! r3174@null-environment (unspecified)) (set! r3176@scheme-report-environment (unspecified)) (set! r3178@expand (unspecified)) (set! r317a@eval (unspecified)) (set! r317c@library-expander (unspecified)) (set! r317e@boot-library-expand (unspecified)) (set! r3180@rev-map-append (unspecified)) (set! r3182@build-exports (unspecified)) (set! r3184@make-export-subst (unspecified)) (set! r3186@make-export-env/macros (unspecified)) (set! r3188@generate-temporaries (unspecified)) (set! r318a@free-identifier=? (unspecified)) (set! r318c@bound-identifier=? (unspecified)) (set! r318e@make-source-condition (unspecified)) (set! r3190@extract-position-condition (unspecified)) (set! r3192@expression-position (unspecified)) (set! r3194@assertion-error (unspecified)) (set! r3196@syntax-error (unspecified)) (set! r3198@syntax-violation* (unspecified)) (set! r319a@syntax-violation (unspecified)) (set! r319c@identifier? (unspecified)) (set! r319e@datum->syntax (unspecified)) (set! r31a0@syntax->datum (unspecified)) (set! r31a2@ungensym-all (unspecified)) (set! r31a4@compile-r6rs-top-level (unspecified)) (set! r31a6@pre-compile-r6rs-top-level (unspecified)) (set! r31a8@interaction-environment (unspecified)) (set! r31aa@top-level-context (unspecified)) (set! r2e2e@file-options-macro (lambda (r31ab@x) (letrec* ((r31ae@valid-option? (lambda (r31b7@x) (and (r2eb3@id? r31b7@x) (memq (r2eb5@id->sym r31b7@x) '(no-fail no-create no-truncate)))))) (let ((r31af@t r31ab@x)) (let ((r31b1@ls/false (r30ba@syntax-dispatch r31af@t '(_ . each-any)))) (if (and r31b1@ls/false (apply (lambda (r31b3@opt*) (for-all r31ae@valid-option? r31b3@opt*)) r31b1@ls/false)) (apply (lambda (r31b5@opt*) (r3070@bless (list 'make-file-options (list 'quote r31b5@opt*)))) r31b1@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r31af@t))))))) (set! r4b01@r2e2e@file-options-macro r2e2e@file-options-macro) (set! r2e30@set-cons (lambda (r31b9@x r31ba@ls) (if (memq r31b9@x r31ba@ls) r31ba@ls (cons r31b9@x r31ba@ls)))) (set! r4b02@r2e30@set-cons r2e30@set-cons) (set! r2e32@set-union (lambda (r31bd@ls1 r31be@ls2) (if (null? r31bd@ls1) r31be@ls2 (if (memq (car r31bd@ls1) r31be@ls2) (r2e32@set-union (cdr r31bd@ls1) r31be@ls2) (cons (car r31bd@ls1) (r2e32@set-union (cdr r31bd@ls1) r31be@ls2)))))) (set! r4b03@r2e32@set-union r2e32@set-union) (set! r2e37@top-mark* '(top)) (set! r4b04@r2e37@top-mark* r2e37@top-mark*) (set! r2e39@top-marked? (lambda (r31c1@m*) (memq 'top r31c1@m*))) (set! r4b05@r2e39@top-marked? r2e39@top-marked?) (set! r2e3b@gen-lexical (lambda (r31c3@sym) (if (symbol? r31c3@sym) (gensym r31c3@sym) (if (r2e7f@stx? r31c3@sym) (r2e3b@gen-lexical (r2eb5@id->sym r31c3@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" r31c3@sym))))) (set! r4b06@r2e3b@gen-lexical r2e3b@gen-lexical) (set! r2e3d@gen-global (lambda (r31c5@x) (r2e3b@gen-lexical r31c5@x))) (set! r4b07@r2e3d@gen-global r2e3d@gen-global) (set! r2e3f@gen-label (lambda (r31c7@_) (gensym))) (set! r4b08@r2e3f@gen-label r2e3f@gen-label) (set! r2e41@gen-top-level-label (lambda (r31c9@id r31ca@rib) (letrec* ((r31ce@find (lambda (r31d9@sym r31da@mark* r31db@sym* r31dc@mark** r31dd@label*) (and (pair? r31db@sym*) (if (and (eq? r31d9@sym (car r31db@sym*)) (same-marks? r31da@mark* (car r31dc@mark**))) (car r31dd@label*) (r31ce@find r31d9@sym r31da@mark* (cdr r31db@sym*) (cdr r31dc@mark**) (cdr r31dd@label*))))))) (let ((r31cf@sym (r2eb5@id->sym r31c9@id)) (r31d0@mark* (r2e85@stx-mark* r31c9@id))) (let ((r31d3@sym* (r2e51@rib-sym* r31ca@rib))) (let ((r31d5@t (and (memq r31cf@sym (r2e51@rib-sym* r31ca@rib)) (r31ce@find r31cf@sym r31d0@mark* r31d3@sym* (r2e55@rib-mark** r31ca@rib) (r2e59@rib-label* r31ca@rib))))) (if r31d5@t ((lambda (r31d7@label) (if (r2cce@r2b1b@imported-label->binding r31d7@label) (gensym) r31d7@label)) r31d5@t) (gensym)))))))) (set! r4b09@r2e41@gen-top-level-label r2e41@gen-top-level-label) (set! r2e43@gen-define-label+loc (lambda (r31e3@id r31e4@rib) (let ((r31e7@t (r31aa@top-level-context))) (if r31e7@t ((lambda (r31e9@env) (let ((r31eb@label (r2e41@gen-top-level-label r31e3@id r31e4@rib)) (r31ec@locs (r3162@interaction-env-locs r31e9@env))) (values r31eb@label (let ((r31ef@t (assq r31eb@label r31ec@locs))) (if r31ef@t (cdr r31ef@t) (let ((r31f1@loc (r2e3b@gen-lexical r31e3@id))) (begin (r3164@set-interaction-env-locs! r31e9@env (cons (cons r31eb@label r31f1@loc) r31ec@locs)) r31f1@loc))))))) r31e7@t) (values (gensym) (r2e3b@gen-lexical r31e3@id)))))) (set! r4b0a@r2e43@gen-define-label+loc r2e43@gen-define-label+loc) (set! r2e45@gen-define-label (lambda (r31f3@id r31f4@rib) (if (r31aa@top-level-context) (r2e41@gen-top-level-label r31f3@id r31f4@rib) (gensym)))) (set! r4b0b@r2e45@gen-define-label r2e45@gen-define-label) (set! r2e4f@rib? (lambda (r31f7@x) (and (simple-struct? r31f7@x) (eq? (simple-struct-name r31f7@x) 'rib)))) (set! r4b0c@r2e4f@rib? r2e4f@rib?) (set! r2e51@rib-sym* (lambda (r31f9@x) (simple-struct-ref r31f9@x '0))) (set! r4b0d@r2e51@rib-sym* r2e51@rib-sym*) (set! r2e53@set-rib-sym*! (lambda (r31fb@x r31fc@val) (simple-struct-set! r31fb@x '0 r31fc@val))) (set! r4b0e@r2e53@set-rib-sym*! r2e53@set-rib-sym*!) (set! r2e55@rib-mark** (lambda (r31ff@x) (simple-struct-ref r31ff@x '1))) (set! r4b0f@r2e55@rib-mark** r2e55@rib-mark**) (set! r2e57@set-rib-mark**! (lambda (r3201@x r3202@val) (simple-struct-set! r3201@x '1 r3202@val))) (set! r4b10@r2e57@set-rib-mark**! r2e57@set-rib-mark**!) (set! r2e59@rib-label* (lambda (r3205@x) (simple-struct-ref r3205@x '2))) (set! r4b11@r2e59@rib-label* r2e59@rib-label*) (set! r2e5b@set-rib-label*! (lambda (r3207@x r3208@val) (simple-struct-set! r3207@x '2 r3208@val))) (set! r4b12@r2e5b@set-rib-label*! r2e5b@set-rib-label*!) (set! r2e5d@rib-sealed/freq (lambda (r320b@x) (simple-struct-ref r320b@x '3))) (set! r4b13@r2e5d@rib-sealed/freq r2e5d@rib-sealed/freq) (set! r2e5f@set-rib-sealed/freq! (lambda (r320d@x r320e@val) (simple-struct-set! r320d@x '3 r320e@val))) (set! r4b14@r2e5f@set-rib-sealed/freq! r2e5f@set-rib-sealed/freq!) (set! r2e61@rib-cache (lambda (r3211@x) (simple-struct-ref r3211@x '4))) (set! r4b15@r2e61@rib-cache r2e61@rib-cache) (set! r2e63@set-rib-cache! (lambda (r3213@x r3214@val) (simple-struct-set! r3213@x '4 r3214@val))) (set! r4b16@r2e63@set-rib-cache! r2e63@set-rib-cache!) (set! r2e65@dummy '3) (set! r4b17@r2e65@dummy r2e65@dummy) (set! r2e67@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! r4b18@r2e67@make-empty-rib r2e67@make-empty-rib) (set! r2e69@extend-rib! (lambda (r3217@rib r3218@id r3219@label) (letrec* ((r321e@find (lambda (r322b@sym r322c@mark* r322d@sym* r322e@mark** r322f@label*) (and (pair? r322d@sym*) (if (and (eq? r322b@sym (car r322d@sym*)) (same-marks? r322c@mark* (car r322e@mark**))) r322f@label* (r321e@find r322b@sym r322c@mark* (cdr r322d@sym*) (cdr r322e@mark**) (cdr r322f@label*))))))) (begin (if (r2e5d@rib-sealed/freq r3217@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" r3217@rib) (void)) (let ((r321f@sym (r2eb5@id->sym r3218@id)) (r3220@mark* (r2e85@stx-mark* r3218@id))) (let ((r3223@sym* (r2e51@rib-sym* r3217@rib))) (let ((r3225@t (and (memq r321f@sym (r2e51@rib-sym* r3217@rib)) (r321e@find r321f@sym r3220@mark* r3223@sym* (r2e55@rib-mark** r3217@rib) (r2e59@rib-label* r3217@rib))))) (if r3225@t ((lambda (r3227@p) (if (not (eq? r3219@label (car r3227@p))) (if (r31aa@top-level-context) (set-car! r3227@p r3219@label) (r319a@syntax-violation '#f '"multiple definitions of identifier" r3218@id)) (void))) r3225@t) (begin (if (r2e61@rib-cache r3217@rib) (hashtable-update! (r2e61@rib-cache r3217@rib) r321f@sym (lambda (r3229@e) (cons (cons r3220@mark* r3219@label) r3229@e)) '()) (void)) (r2e53@set-rib-sym*! r3217@rib (cons r321f@sym r3223@sym*)) (r2e57@set-rib-mark**! r3217@rib (cons r3220@mark* (r2e55@rib-mark** r3217@rib))) (r2e5b@set-rib-label*! r3217@rib (cons r3219@label (r2e59@rib-label* r3217@rib)))))))))))) (set! r4b19@r2e69@extend-rib! r2e69@extend-rib!) (set! r2e6b@extend-rib/nc! (lambda (r3235@rib r3236@id r3237@label) (let ((r323b@sym (r2eb5@id->sym r3236@id)) (r323c@mark* (r2e85@stx-mark* r3236@id))) (let ((r323f@sym* (r2e51@rib-sym* r3235@rib))) (begin (if (r2e61@rib-cache r3235@rib) (hashtable-update! (r2e61@rib-cache r3235@rib) r323b@sym (lambda (r3241@e) (cons (cons r323c@mark* r3237@label) r3241@e)) '()) (void)) (r2e53@set-rib-sym*! r3235@rib (cons r323b@sym r323f@sym*)) (r2e57@set-rib-mark**! r3235@rib (cons r323c@mark* (r2e55@rib-mark** r3235@rib))) (r2e5b@set-rib-label*! r3235@rib (cons r3237@label (r2e59@rib-label* r3235@rib)))))))) (set! r4b1a@r2e6b@extend-rib/nc! r2e6b@extend-rib/nc!) (set! r2e6d@make-rib-map (lambda (r3243@sym*) (let ((r3245@ht (make-eq-hashtable))) (let r324b@f ((r3247@i '0) (r3248@sym* r3243@sym*)) (if (null? r3248@sym*) r3245@ht (begin (hashtable-update! r3245@ht (car r3248@sym*) (lambda (r324d@x) (cons r3247@i r324d@x)) '()) (r324b@f (+ r3247@i '1) (cdr r3248@sym*)))))))) (set! r4b1b@r2e6d@make-rib-map r2e6d@make-rib-map) (set! r2e6f@seal-rib! (lambda (r324f@rib) (let ((r3251@sym* (r2e51@rib-sym* r324f@rib))) (if (not (null? r3251@sym*)) (begin (r2e53@set-rib-sym*! r324f@rib (list->vector r3251@sym*)) (r2e57@set-rib-mark**! r324f@rib (list->vector (r2e55@rib-mark** r324f@rib))) (r2e5b@set-rib-label*! r324f@rib (list->vector (r2e59@rib-label* r324f@rib))) (r2e5f@set-rib-sealed/freq! r324f@rib (r2e6d@make-rib-map r3251@sym*))) (void))))) (set! r4b1c@r2e6f@seal-rib! r2e6f@seal-rib!) (set! r2e71@unseal-rib! (lambda (r3253@rib) (if (r2e5d@rib-sealed/freq r3253@rib) (begin (r2e5f@set-rib-sealed/freq! r3253@rib '#f) (r2e53@set-rib-sym*! r3253@rib (vector->list (r2e51@rib-sym* r3253@rib))) (r2e57@set-rib-mark**! r3253@rib (vector->list (r2e55@rib-mark** r3253@rib))) (r2e5b@set-rib-label*! r3253@rib (vector->list (r2e59@rib-label* r3253@rib)))) (void)))) (set! r4b1d@r2e71@unseal-rib! r2e71@unseal-rib!) (set! r2e73@make-full-rib (lambda (r3255@id* r3256@label*) (let ((r3259@r (make-simple-struct 'rib '6 (list (map r2eb5@id->sym r3255@id*) (map r2e85@stx-mark* r3255@id*) r3256@label* '#f '#f)))) (begin (r2e6f@seal-rib! r3259@r) r3259@r)))) (set! r4b1e@r2e73@make-full-rib r2e73@make-full-rib) (set! r2e75@rp (r2a00@r28db@make-record-printer 'stx (lambda (r325b@x r325c@p r325d@wr) (begin (display '"#<syntax " r325c@p) (write (r2ec7@stx->datum r325b@x) r325c@p) (let ((r3261@expr (r2e81@stx-expr r325b@x))) (if (r29f7@r28c9@annotation? r3261@expr) (let ((r3263@src (r29f8@r28cb@annotation-source r3261@expr))) (if (pair? r3263@src) (begin (display '" [" r325c@p) (display (cdr r3263@src) r325c@p) (display '" of " r325c@p) (display (car r3263@src) r325c@p) (display '"]" r325c@p)) (void))) (void))) (display '">" r325c@p))))) (set! r4b1f@r2e75@rp r2e75@rp) (set! r2e7f@stx? (lambda (r3265@x) (and (simple-struct? r3265@x) (eq? (simple-struct-name r3265@x) 'stx)))) (set! r4b20@r2e7f@stx? r2e7f@stx?) (set! r2e81@stx-expr (lambda (r3267@x) (simple-struct-ref r3267@x '0))) (set! r4b21@r2e81@stx-expr r2e81@stx-expr) (set! r2e83@set-stx-expr! (lambda (r3269@x r326a@val) (simple-struct-set! r3269@x '0 r326a@val))) (set! r4b22@r2e83@set-stx-expr! r2e83@set-stx-expr!) (set! r2e85@stx-mark* (lambda (r326d@x) (simple-struct-ref r326d@x '1))) (set! r4b23@r2e85@stx-mark* r2e85@stx-mark*) (set! r2e87@set-stx-mark*! (lambda (r326f@x r3270@val) (simple-struct-set! r326f@x '1 r3270@val))) (set! r4b24@r2e87@set-stx-mark*! r2e87@set-stx-mark*!) (set! r2e89@stx-subst* (lambda (r3273@x) (simple-struct-ref r3273@x '2))) (set! r4b25@r2e89@stx-subst* r2e89@stx-subst*) (set! r2e8b@set-stx-subst*! (lambda (r3275@x r3276@val) (simple-struct-set! r3275@x '2 r3276@val))) (set! r4b26@r2e8b@set-stx-subst*! r2e8b@set-stx-subst*!) (set! r2e8d@stx-ae* (lambda (r3279@x) (simple-struct-ref r3279@x '3))) (set! r4b27@r2e8d@stx-ae* r2e8d@stx-ae*) (set! r2e8f@set-stx-ae*! (lambda (r327b@x r327c@val) (simple-struct-set! r327b@x '3 r327c@val))) (set! r4b28@r2e8f@set-stx-ae*! r2e8f@set-stx-ae*!) (set! r2e91@dummy '3) (set! r4b29@r2e91@dummy r2e91@dummy) (set! r2e93@datum->stx (lambda (r327f@id r3280@datum) (make-simple-struct 'stx '5 (list r3280@datum (r2e85@stx-mark* r327f@id) (r2e89@stx-subst* r327f@id) (r2e8d@stx-ae* r327f@id))))) (set! r4b2a@r2e93@datum->stx r2e93@datum->stx) (set! r2e95@gen-mark (lambda () (string '#\m))) (set! r4b2b@r2e95@gen-mark r2e95@gen-mark) (set! r2e97@anti-mark '#f) (set! r4b2c@r2e97@anti-mark r2e97@anti-mark) (set! r2e99@anti-mark? not) (set! r4b2d@r2e99@anti-mark? r2e99@anti-mark?) (set! r2e9b@mkstx (lambda (r3283@e r3284@m* r3285@s* r3286@ae*) (if (and (r2e7f@stx? r3283@e) (not (r2e39@top-marked? r3284@m*))) (call-with-values (lambda () (join-wraps r3284@m* r3285@s* r3286@ae* r3283@e)) (lambda (r3291@r328c r3292@r328e r3293@r3290) (let ((r3297@ae* r3293@r3290) (r3298@s* r3292@r328e) (r3299@m* r3291@r328c)) (make-simple-struct 'stx '5 (list (r2e81@stx-expr r3283@e) r3299@m* r3298@s* r3297@ae*))))) (make-simple-struct 'stx '5 (list r3283@e r3284@m* r3285@s* r3286@ae*))))) (set! r4b2e@r2e9b@mkstx r2e9b@mkstx) (set! r2e9d@add-mark (lambda (r329d@m r329e@e r329f@ae) (r2e9b@mkstx r329e@e (list r329d@m) '(shift) (list r329f@ae)))) (set! r4b2f@r2e9d@add-mark r2e9d@add-mark) (set! r2e9f@add-subst (lambda (r32a3@subst r32a4@e) (r2e9b@mkstx r32a4@e '() (list r32a3@subst) '()))) (set! r4b30@r2e9f@add-subst r2e9f@add-subst) (set! r2ea1@syntax-kind? (lambda (r32a7@x r32a8@p?) (if (r2e7f@stx? r32a7@x) (r2ea1@syntax-kind? (r2e81@stx-expr r32a7@x) r32a8@p?) (if (r29f7@r28c9@annotation? r32a7@x) (r2ea1@syntax-kind? (r29f9@r28cd@annotation-expression r32a7@x) r32a8@p?) (r32a8@p? r32a7@x))))) (set! r4b31@r2ea1@syntax-kind? r2ea1@syntax-kind?) (set! r2ea3@syntax-vector->list (lambda (r32ab@x) (if (r2e7f@stx? r32ab@x) (let ((r32ad@ls (r2ea3@syntax-vector->list (r2e81@stx-expr r32ab@x))) (r32ae@m* (r2e85@stx-mark* r32ab@x)) (r32af@s* (r2e89@stx-subst* r32ab@x)) (r32b0@ae* (r2e8d@stx-ae* r32ab@x))) (map (lambda (r32b5@x) (r2e9b@mkstx r32b5@x r32ae@m* r32af@s* r32b0@ae*)) r32ad@ls)) (if (r29f7@r28c9@annotation? r32ab@x) (r2ea3@syntax-vector->list (r29f9@r28cd@annotation-expression r32ab@x)) (if (vector? r32ab@x) (vector->list r32ab@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" r32ab@x)))))) (set! r4b32@r2ea3@syntax-vector->list r2ea3@syntax-vector->list) (set! r2ea5@syntax-pair? (lambda (r32b7@x) (r2ea1@syntax-kind? r32b7@x pair?))) (set! r4b33@r2ea5@syntax-pair? r2ea5@syntax-pair?) (set! r2ea7@syntax-vector? (lambda (r32b9@x) (r2ea1@syntax-kind? r32b9@x vector?))) (set! r4b34@r2ea7@syntax-vector? r2ea7@syntax-vector?) (set! r2ea9@syntax-null? (lambda (r32bb@x) (r2ea1@syntax-kind? r32bb@x null?))) (set! r4b35@r2ea9@syntax-null? r2ea9@syntax-null?) (set! r2eab@syntax-list? (lambda (r32bd@x) (or (r2ea9@syntax-null? r32bd@x) (and (r2ea5@syntax-pair? r32bd@x) (r2eab@syntax-list? (r2eaf@syntax-cdr r32bd@x)))))) (set! r4b36@r2eab@syntax-list? r2eab@syntax-list?) (set! r2ead@syntax-car (lambda (r32bf@x) (if (r2e7f@stx? r32bf@x) (r2e9b@mkstx (r2ead@syntax-car (r2e81@stx-expr r32bf@x)) (r2e85@stx-mark* r32bf@x) (r2e89@stx-subst* r32bf@x) (r2e8d@stx-ae* r32bf@x)) (if (r29f7@r28c9@annotation? r32bf@x) (r2ead@syntax-car (r29f9@r28cd@annotation-expression r32bf@x)) (if (pair? r32bf@x) (car r32bf@x) (assertion-violation 'syntax-car '"BUG: not a pair" r32bf@x)))))) (set! r4b37@r2ead@syntax-car r2ead@syntax-car) (set! r2eaf@syntax-cdr (lambda (r32c1@x) (if (r2e7f@stx? r32c1@x) (r2e9b@mkstx (r2eaf@syntax-cdr (r2e81@stx-expr r32c1@x)) (r2e85@stx-mark* r32c1@x) (r2e89@stx-subst* r32c1@x) (r2e8d@stx-ae* r32c1@x)) (if (r29f7@r28c9@annotation? r32c1@x) (r2eaf@syntax-cdr (r29f9@r28cd@annotation-expression r32c1@x)) (if (pair? r32c1@x) (cdr r32c1@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" r32c1@x)))))) (set! r4b38@r2eaf@syntax-cdr r2eaf@syntax-cdr) (set! r2eb1@syntax->list (lambda (r32c3@x) (if (r2ea5@syntax-pair? r32c3@x) (cons (r2ead@syntax-car r32c3@x) (r2eb1@syntax->list (r2eaf@syntax-cdr r32c3@x))) (if (r2ea9@syntax-null? r32c3@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" r32c3@x))))) (set! r4b39@r2eb1@syntax->list r2eb1@syntax->list) (set! r2eb3@id? (lambda (r32c5@x) (and (r2e7f@stx? r32c5@x) (symbol? (r2e81@stx-expr r32c5@x))))) (set! r4b3a@r2eb3@id? r2eb3@id?) (set! r2eb5@id->sym (lambda (r32c7@x) (r2e81@stx-expr r32c7@x))) (set! r4b3b@r2eb5@id->sym r2eb5@id->sym) (set! r2eb7@bound-id=? (lambda (r32c9@x r32ca@y) (and (eq? (r2eb5@id->sym r32c9@x) (r2eb5@id->sym r32ca@y)) (same-marks? (r2e85@stx-mark* r32c9@x) (r2e85@stx-mark* r32ca@y))))) (set! r4b3c@r2eb7@bound-id=? r2eb7@bound-id=?) (set! r2eb9@free-id=? (lambda (r32cd@i r32ce@j) (let ((r32d1@t0 (id->real-label r32cd@i)) (r32d2@t1 (id->real-label r32ce@j))) (if (or r32d1@t0 r32d2@t1) (eq? r32d1@t0 r32d2@t1) (eq? (r2eb5@id->sym r32cd@i) (r2eb5@id->sym r32ce@j)))))) (set! r4b3d@r2eb9@free-id=? r2eb9@free-id=?) (set! r2ebb@valid-bound-ids? (lambda (r32d5@id*) (and (for-all r2eb3@id? r32d5@id*) (r2ebd@distinct-bound-ids? r32d5@id*)))) (set! r4b3e@r2ebb@valid-bound-ids? r2ebb@valid-bound-ids?) (set! r2ebd@distinct-bound-ids? (lambda (r32d7@id*) (or (null? r32d7@id*) (and (not (r2ebf@bound-id-member? (car r32d7@id*) (cdr r32d7@id*))) (r2ebd@distinct-bound-ids? (cdr r32d7@id*)))))) (set! r4b3f@r2ebd@distinct-bound-ids? r2ebd@distinct-bound-ids?) (set! r2ebf@bound-id-member? (lambda (r32d9@id r32da@id*) (and (pair? r32da@id*) (or (r2eb7@bound-id=? r32d9@id (car r32da@id*)) (r2ebf@bound-id-member? r32d9@id (cdr r32da@id*)))))) (set! r4b40@r2ebf@bound-id-member? r2ebf@bound-id-member?) (set! r2ec1@self-evaluating? (lambda (r32dd@x) (or (number? r32dd@x) (string? r32dd@x) (char? r32dd@x) (boolean? r32dd@x) (regexp? r32dd@x) (bytevector? r32dd@x)))) (set! r4b41@r2ec1@self-evaluating? r2ec1@self-evaluating?) (set! r2ec3@strip-annotations (lambda (r32df@x) (if (pair? r32df@x) (cons (r2ec3@strip-annotations (car r32df@x)) (r2ec3@strip-annotations (cdr r32df@x))) (if (vector? r32df@x) (vector-map r2ec3@strip-annotations r32df@x) (if (r29f7@r28c9@annotation? r32df@x) (r29f6@r28c7@annotation-stripped r32df@x) r32df@x))))) (set! r4b42@r2ec3@strip-annotations r2ec3@strip-annotations) (set! r2ec5@strip (lambda (r32e1@x r32e2@m*) (if (r2e39@top-marked? r32e2@m*) (if (or (r29f7@r28c9@annotation? r32e1@x) (and (pair? r32e1@x) (r29f7@r28c9@annotation? (car r32e1@x))) (and (vector? r32e1@x) (> (vector-length r32e1@x) '0) (r29f7@r28c9@annotation? (vector-ref r32e1@x '0)))) (r2ec3@strip-annotations r32e1@x) r32e1@x) (let r32e7@f ((r32e5@x r32e1@x)) (if (r2e7f@stx? r32e5@x) (r2ec5@strip (r2e81@stx-expr r32e5@x) (r2e85@stx-mark* r32e5@x)) (if (r29f7@r28c9@annotation? r32e5@x) (r29f6@r28c7@annotation-stripped r32e5@x) (if (pair? r32e5@x) (let ((r32e9@a (r32e7@f (car r32e5@x))) (r32ea@d (r32e7@f (cdr r32e5@x)))) (if (and (eq? r32e9@a (car r32e5@x)) (eq? r32ea@d (cdr r32e5@x))) r32e5@x (cons r32e9@a r32ea@d))) (if (vector? r32e5@x) (let ((r32ed@old (vector->list r32e5@x))) (let ((r32ef@new (map r32e7@f r32ed@old))) (if (for-all eq? r32ed@old r32ef@new) r32e5@x (list->vector r32ef@new)))) r32e5@x)))))))) (set! r4b43@r2ec5@strip r2ec5@strip) (set! r2ec7@stx->datum (lambda (r32f1@x) (r2ec5@strip r32f1@x '()))) (set! r4b44@r2ec7@stx->datum r2ec7@stx->datum) (set! r2ec9@id->label (lambda (r32f3@id) (or (id->real-label r32f3@id) (let ((r32f5@t (r31aa@top-level-context))) (if r32f5@t ((lambda (r32f7@env) (let ((r32f9@rib (r315a@interaction-env-rib r32f7@env))) (call-with-values (lambda () (r2e43@gen-define-label+loc r32f3@id r32f9@rib)) (lambda (r32ff@r32fc r3300@r32fe) (let ((r3303@loc_ r3300@r32fe) (r3304@lab r32ff@r32fc)) (begin (r2e69@extend-rib! r32f9@rib r32f3@id r3304@lab) r3304@lab)))))) r32f5@t) '#f))))) (set! r4b45@r2ec9@id->label r2ec9@id->label) (set! r2ecb@label->binding (lambda (r3307@x r3308@r) (let ((r330b@t (r2cce@r2b1b@imported-label->binding r3307@x))) (if r330b@t ((lambda (r330d@b) (if (and (pair? r330d@b) (eq? (car r330d@b) '$core-rtd)) (cons '$rtd (map r3070@bless (cdr r330d@b))) (if (and (pair? r330d@b) (eq? (car r330d@b) 'global-rtd)) (let ((r330f@lib (cadr r330d@b)) (r3310@loc (cddr r330d@b))) (cons '$rtd (symbol-value r3310@loc))) r330d@b))) r330b@t) (let ((r3313@t (assq r3307@x r3308@r))) (if r3313@t (cdr r3313@t) (let ((r3315@t (r31aa@top-level-context))) (if r3315@t ((lambda (r3317@env) (let ((r3319@t (assq r3307@x (r3162@interaction-env-locs r3317@env)))) (if r3319@t ((lambda (r331b@p) (cons* 'lexical (cdr r331b@p) '#f)) r3319@t) '(displaced-lexical . #f)))) r3315@t) '(displaced-lexical . #f))))))))) (set! r4b46@r2ecb@label->binding r2ecb@label->binding) (set! r2ecd@make-binding cons) (set! r4b47@r2ecd@make-binding r2ecd@make-binding) (set! r2ecf@binding-type car) (set! r4b48@r2ecf@binding-type r2ecf@binding-type) (set! r2ed1@binding-value cdr) (set! r4b49@r2ed1@binding-value r2ed1@binding-value) (set! r2ed3@raise-unbound-error (lambda (r331d@id) (r3198@syntax-violation* '#f '"unbound identifier" r331d@id (r4f3f@r4d85@make-undefined-violation)))) (set! r4b4a@r2ed3@raise-unbound-error r2ed3@raise-unbound-error) (set! r2ed5@syntax-type (lambda (r331f@e r3320@r) (if (r2eb3@id? r331f@e) (let ((r3323@id r331f@e)) (let ((r3325@label (r2ec9@id->label r3323@id))) (let ((r3327@b (r2ecb@label->binding r3325@label r3320@r))) (let ((r3329@type (r2ecf@binding-type r3327@b))) (begin (if (not r3325@label) (r2ed3@raise-unbound-error r3323@id) (void)) (let ((r332b@t r3329@type)) (if (memv r332b@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values r3329@type (r2ed1@binding-value r3327@b) r3323@id) (values 'other '#f '#f)))))))) (if (r2ea5@syntax-pair? r331f@e) (let ((r332d@id (r2ead@syntax-car r331f@e))) (if (r2eb3@id? r332d@id) (let ((r332f@label (r2ec9@id->label r332d@id))) (let ((r3331@b (r2ecb@label->binding r332f@label r3320@r))) (let ((r3333@type (r2ecf@binding-type r3331@b))) (begin (if (not r332f@label) (r2ed3@raise-unbound-error r332d@id) (void)) (let ((r3335@t r3333@type)) (if (memv r3335@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values r3333@type (r2ed1@binding-value r3331@b) r332d@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((r3337@d (r2ec7@stx->datum r331f@e))) (if (r2ec1@self-evaluating? r3337@d) (values 'constant r3337@d '#f) (values 'other '#f '#f))))))) (set! r4b4b@r2ed5@syntax-type r2ed5@syntax-type) (set! r2ee3@sanitize-binding (lambda (r3339@x r333a@src) (if (procedure? r3339@x) (cons* 'local-macro r3339@x r333a@src) (if (and (pair? r3339@x) (eq? (car r3339@x) 'macro!) (procedure? (cdr r3339@x))) (cons* 'local-macro! (cdr r3339@x) r333a@src) (if (and (pair? r3339@x) (eq? (car r3339@x) '$rtd)) r3339@x (assertion-violation 'expand '"invalid transformer" r3339@x)))))) (set! r4b4c@r2ee3@sanitize-binding r2ee3@sanitize-binding) (set! r2ee5@make-variable-transformer (lambda (r333d@x) (if (procedure? r333d@x) (cons 'macro! r333d@x) (assertion-violation 'make-variable-transformer '"not a procedure" r333d@x)))) (set! r4b4d@r2ee5@make-variable-transformer r2ee5@make-variable-transformer) (set! r2ee7@variable-transformer? (lambda (r333f@x) (and (pair? r333f@x) (eq? (car r333f@x) 'macro!) (procedure? (cdr r333f@x))))) (set! r4b4e@r2ee7@variable-transformer? r2ee7@variable-transformer?) (set! r2ee9@variable-transformer-procedure (lambda (r3341@x) (if (r2ee7@variable-transformer? r3341@x) (cdr r3341@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" r3341@x)))) (set! r4b4f@r2ee9@variable-transformer-procedure r2ee9@variable-transformer-procedure) (set! r2eeb@make-eval-transformer (lambda (r3343@x) (r2ee3@sanitize-binding (eval-core (r2a59@r2a11@expanded->core r3343@x)) r3343@x))) (set! r4b50@r2eeb@make-eval-transformer r2eeb@make-eval-transformer) (set! r303c@parse-define (lambda (r3345@x) (let ((r3347@t r3345@x)) (let ((r3349@ls/false (r30ba@syntax-dispatch r3347@t '(_ (any . any) any . each-any)))) (if (and r3349@ls/false (apply (lambda (r334b@id r334c@fmls r334d@b r334e@b*) (r2eb3@id? r334b@id)) r3349@ls/false)) (apply (lambda (r3353@id r3354@fmls r3355@b r3356@b*) (begin (r30e0@verify-formals r3354@fmls r3345@x) (values r3353@id (cons 'defun (cons r3354@fmls (cons r3355@b r3356@b*)))))) r3349@ls/false) (let ((r335b@t r3347@t)) (let ((r335d@ls/false (r30ba@syntax-dispatch r335b@t '(_ any any)))) (if (and r335d@ls/false (apply (lambda (r335f@id r3360@val) (r2eb3@id? r335f@id)) r335d@ls/false)) (apply (lambda (r3363@id r3364@val) (values r3363@id (cons 'expr r3364@val))) r335d@ls/false) (let ((r3367@t r335b@t)) (let ((r3369@ls/false (r30ba@syntax-dispatch r3367@t '(_ any)))) (if (and r3369@ls/false (apply (lambda (r336b@id) (r2eb3@id? r336b@id)) r3369@ls/false)) (apply (lambda (r336d@id) (values r336d@id (cons 'expr (r3070@bless '(void))))) r3369@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3367@t)))))))))))) (set! r4b51@r303c@parse-define r303c@parse-define) (set! r303e@parse-define-syntax (lambda (r336f@x) (let ((r3371@t r336f@x)) (let ((r3373@ls/false (r30ba@syntax-dispatch r3371@t '(_ any any)))) (if (and r3373@ls/false (apply (lambda (r3375@id r3376@val) (r2eb3@id? r3375@id)) r3373@ls/false)) (apply (lambda (r3379@id r337a@val) (values r3379@id r337a@val)) r3373@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3371@t)))))) (set! r4b52@r303e@parse-define-syntax r303e@parse-define-syntax) (set! r3040@scheme-stx-hashtable (make-eq-hashtable)) (set! r4b53@r3040@scheme-stx-hashtable r3040@scheme-stx-hashtable) (set! r3042@scheme-stx (lambda (r337d@sym) (or (hashtable-ref r3040@scheme-stx-hashtable r337d@sym '#f) (let ((r337f@subst (r2caa@r2ad3@library-subst (r2cc8@r2b0f@find-library-by-name '(psyntax system $all))))) (let ((r3381@stx (make-simple-struct 'stx '5 (list r337d@sym r2e37@top-mark* '() '())))) (let ((r3383@stx (let ((r3385@t (assq r337d@sym r337f@subst))) (if r3385@t ((lambda (r3387@x) (let ((r3389@name (car r3387@x)) (r338a@label (cdr r3387@x))) (r2e9f@add-subst (make-simple-struct 'rib '6 (list (list r3389@name) (list r2e37@top-mark*) (list r338a@label) '#f '#f)) r3381@stx))) r3385@t) r3381@stx)))) (begin (hashtable-set! r3040@scheme-stx-hashtable r337d@sym r3383@stx) r3383@stx))))))) (set! r4b54@r3042@scheme-stx r3042@scheme-stx) (set! r3044@lexical-var car) (set! r4b55@r3044@lexical-var r3044@lexical-var) (set! r3046@lexical-mutable? cdr) (set! r4b56@r3046@lexical-mutable? r3046@lexical-mutable?) (set! r3048@set-lexical-mutable! set-cdr!) (set! r4b57@r3048@set-lexical-mutable! r3048@set-lexical-mutable!) (set! r304a@add-lexical (lambda (r338d@lab r338e@lex r338f@r) (cons (cons* r338d@lab 'lexical r338e@lex '#f) r338f@r))) (set! r4b58@r304a@add-lexical r304a@add-lexical) (set! r304c@add-lexicals (lambda (r3393@lab* r3394@lex* r3395@r) (if (null? r3393@lab*) r3395@r (r304c@add-lexicals (cdr r3393@lab*) (cdr r3394@lex*) (r304a@add-lexical (car r3393@lab*) (car r3394@lex*) r3395@r))))) (set! r4b59@r304c@add-lexicals r304c@add-lexicals) (set! r304e@letrec-helper (lambda (r3399@e r339a@r r339b@mr r339c@build) (let ((r33a1@t r3399@e)) (let ((r33a3@ls/false (r30ba@syntax-dispatch r33a1@t '(_ #(each (any any)) any . each-any)))) (if r33a3@ls/false (apply (lambda (r33a5@lhs* r33a6@rhs* r33a7@b r33a8@b*) (if (not (r2ebb@valid-bound-ids? r33a5@lhs*)) (r3074@invalid-fmls-error r3399@e r33a5@lhs*) (let ((r33ad@lex* (map r2e3b@gen-lexical r33a5@lhs*)) (r33ae@lab* (map r2e3f@gen-label r33a5@lhs*))) (let ((r33b1@rib (r2e73@make-full-rib r33a5@lhs* r33ae@lab*)) (r33b2@r (r304c@add-lexicals r33ae@lab* r33ad@lex* r339a@r))) (let ((r33b5@body (r30f2@chi-internal (r2e9f@add-subst r33b1@rib (cons r33a7@b r33a8@b*)) r33b2@r r339b@mr)) (r33b6@rhs* (r30d8@chi-expr* (map (lambda (r33b9@x) (r2e9f@add-subst r33b1@rib r33b9@x)) r33a6@rhs*) r33b2@r r339b@mr))) (r339c@build '#f r33ad@lex* r33b6@rhs* r33b5@body)))))) r33a3@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r33a1@t)))))) (set! r4b5a@r304e@letrec-helper r304e@letrec-helper) (set! r3050@let-transformer (lambda (r33bb@e r33bc@r r33bd@mr) (let ((r33c1@t r33bb@e)) (let ((r33c3@ls/false (r30ba@syntax-dispatch r33c1@t '(_ #(each (any any)) any . each-any)))) (if r33c3@ls/false (apply (lambda (r33c5@lhs* r33c6@rhs* r33c7@b r33c8@b*) (if (not (r2ebb@valid-bound-ids? r33c5@lhs*)) (r3074@invalid-fmls-error r33bb@e r33c5@lhs*) (let ((r33cd@lex* (map r2e3b@gen-lexical r33c5@lhs*)) (r33ce@lab* (map r2e3f@gen-label r33c5@lhs*)) (r33cf@rhs* (r30d8@chi-expr* r33c6@rhs* r33bc@r r33bd@mr))) (let ((r33d3@rib (r2e73@make-full-rib r33c5@lhs* r33ce@lab*)) (r33d4@r (r304c@add-lexicals r33ce@lab* r33cd@lex* r33bc@r))) (let ((r33d7@body (r30f2@chi-internal (r2e9f@add-subst r33d3@rib (cons r33c7@b r33c8@b*)) r33d4@r r33bd@mr))) (r2e1b@r2d7e@build-let '#f r33cd@lex* r33cf@rhs* r33d7@body)))))) r33c3@ls/false) (let ((r33d9@t r33c1@t)) (let ((r33db@ls/false (r30ba@syntax-dispatch r33d9@t '(_ any #(each (any any)) any . each-any)))) (if r33db@ls/false (apply (lambda (r33dd@loop r33de@lhs* r33df@rhs* r33e0@b r33e1@b*) (if (not (r2ebb@valid-bound-ids? r33de@lhs*)) (r3074@invalid-fmls-error r33bb@e r33de@lhs*) (let ((r33e7@lex* (map r2e3b@gen-lexical r33de@lhs*)) (r33e8@lab* (map r2e3f@gen-label r33de@lhs*)) (r33e9@rhs* (r30d8@chi-expr* r33df@rhs* r33bc@r r33bd@mr)) (r33ea@loop-lex (r2e3b@gen-lexical r33dd@loop)) (r33eb@loop-lab (r2e3f@gen-label r33dd@loop))) (let ((r33f1@loop-rib (r2e73@make-full-rib (list r33dd@loop) (list r33eb@loop-lab))) (r33f2@rib (r2e73@make-full-rib r33de@lhs* r33e8@lab*)) (r33f3@r (r304c@add-lexicals (cons r33eb@loop-lab r33e8@lab*) (cons r33ea@loop-lex r33e7@lex*) r33bc@r))) (let ((r33f7@body (r30f2@chi-internal (r2e9f@add-subst r33f1@loop-rib (r2e9f@add-subst r33f2@rib (cons r33e0@b r33e1@b*))) r33f3@r r33bd@mr))) (r2e1c@r2d80@build-named-let '#f r33ea@loop-lex r33e7@lex* r33e9@rhs* r33f7@body)))))) r33db@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r33d9@t))))))))) (set! r4b5b@r3050@let-transformer r3050@let-transformer) (set! r3052@letrec-transformer (lambda (r33f9@e r33fa@r r33fb@mr) (r304e@letrec-helper r33f9@e r33fa@r r33fb@mr r2e1a@r2d7c@build-letrec))) (set! r4b5c@r3052@letrec-transformer r3052@letrec-transformer) (set! r3054@letrec*-transformer (lambda (r33ff@e r3400@r r3401@mr) (r304e@letrec-helper r33ff@e r3400@r r3401@mr r2e1d@r2d82@build-letrec*))) (set! r4b5d@r3054@letrec*-transformer r3054@letrec*-transformer) (set! r3056@fluid-let-syntax-transformer (lambda (r3405@e r3406@r r3407@mr) (letrec* ((r340c@lookup (lambda (r341f@x) (or (r2ec9@id->label r341f@x) (r319a@syntax-violation '#f '"unbound identifier" r3405@e r341f@x))))) (let ((r340d@t r3405@e)) (let ((r340f@ls/false (r30ba@syntax-dispatch r340d@t '(_ #(each (any any)) any . each-any)))) (if r340f@ls/false (apply (lambda (r3411@lhs* r3412@rhs* r3413@b r3414@b*) (if (not (r2ebb@valid-bound-ids? r3411@lhs*)) (r3074@invalid-fmls-error r3405@e r3411@lhs*) (let ((r3419@lab* (map r340c@lookup r3411@lhs*)) (r341a@rhs* (map (lambda (r341d@x) (r2eeb@make-eval-transformer (r3114@expand-transformer r341d@x r3407@mr))) r3412@rhs*))) (r30f2@chi-internal (cons r3413@b r3414@b*) (append (map cons r3419@lab* r341a@rhs*) r3406@r) (append (map cons r3419@lab* r341a@rhs*) r3407@mr))))) r340f@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r340d@t))))))) (set! r4b5e@r3056@fluid-let-syntax-transformer r3056@fluid-let-syntax-transformer) (set! r3058@type-descriptor-transformer (lambda (r3421@e r3422@r r3423@mr) (let ((r3427@t r3421@e)) (let ((r3429@ls/false (r30ba@syntax-dispatch r3427@t '(_ any)))) (if (and r3429@ls/false (apply (lambda (r342b@id) (r2eb3@id? r342b@id)) r3429@ls/false)) (apply (lambda (r342d@id) (let ((r342f@lab (r2ec9@id->label r342d@id))) (let ((r3431@b (r2ecb@label->binding r342f@lab r3422@r))) (let ((r3433@type (r2ecf@binding-type r3431@b))) (begin (if (not r342f@lab) (r2ed3@raise-unbound-error r342d@id) (void)) (if (not (and (eq? r3433@type '$rtd) (not (list? (r2ed1@binding-value r3431@b))))) (r319a@syntax-violation '#f '"not a record type" r3421@e) (void)) (list 'quote (r2ed1@binding-value r3431@b))))))) r3429@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3427@t)))))) (set! r4b5f@r3058@type-descriptor-transformer r3058@type-descriptor-transformer) (set! r305a@record-type-descriptor-transformer (lambda (r3435@e r3436@r r3437@mr) (let ((r343b@t r3435@e)) (let ((r343d@ls/false (r30ba@syntax-dispatch r343b@t '(_ any)))) (if (and r343d@ls/false (apply (lambda (r343f@id) (r2eb3@id? r343f@id)) r343d@ls/false)) (apply (lambda (r3441@id) (let ((r3443@lab (r2ec9@id->label r3441@id))) (let ((r3445@b (r2ecb@label->binding r3443@lab r3436@r))) (let ((r3447@type (r2ecf@binding-type r3445@b))) (begin (if (not r3443@lab) (r2ed3@raise-unbound-error r3441@id) (void)) (if (not (and (eq? r3447@type '$rtd) (list? (r2ed1@binding-value r3445@b)))) (r319a@syntax-violation '#f '"not a record type" r3435@e) (void)) (r30dc@chi-expr (car (r2ed1@binding-value r3445@b)) r3436@r r3437@mr)))))) r343d@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r343b@t)))))) (set! r4b60@r305a@record-type-descriptor-transformer r305a@record-type-descriptor-transformer) (set! r305c@record-constructor-descriptor-transformer (lambda (r3449@e r344a@r r344b@mr) (let ((r344f@t r3449@e)) (let ((r3451@ls/false (r30ba@syntax-dispatch r344f@t '(_ any)))) (if (and r3451@ls/false (apply (lambda (r3453@id) (r2eb3@id? r3453@id)) r3451@ls/false)) (apply (lambda (r3455@id) (let ((r3457@lab (r2ec9@id->label r3455@id))) (let ((r3459@b (r2ecb@label->binding r3457@lab r344a@r))) (let ((r345b@type (r2ecf@binding-type r3459@b))) (begin (if (not r3457@lab) (r2ed3@raise-unbound-error r3455@id) (void)) (if (not (and (eq? r345b@type '$rtd) (list? (r2ed1@binding-value r3459@b)))) (r319a@syntax-violation '#f '"invalid type" r3449@e) (void)) (r30dc@chi-expr (cadr (r2ed1@binding-value r3459@b)) r344a@r r344b@mr)))))) r3451@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r344f@t)))))) (set! r4b61@r305c@record-constructor-descriptor-transformer r305c@record-constructor-descriptor-transformer) (set! r305e@when-macro (lambda (r345d@e) (let ((r345f@t r345d@e)) (let ((r3461@ls/false (r30ba@syntax-dispatch r345f@t '(_ any any . each-any)))) (if r3461@ls/false (apply (lambda (r3463@test r3464@e r3465@e*) (r3070@bless (list 'if r3463@test (cons 'begin (cons r3464@e r3465@e*))))) r3461@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r345f@t)))))) (set! r4b62@r305e@when-macro r305e@when-macro) (set! r3060@unless-macro (lambda (r3469@e) (let ((r346b@t r3469@e)) (let ((r346d@ls/false (r30ba@syntax-dispatch r346b@t '(_ any any . each-any)))) (if r346d@ls/false (apply (lambda (r346f@test r3470@e r3471@e*) (r3070@bless (list 'if (list 'not r346f@test) (cons 'begin (cons r3470@e r3471@e*))))) r346d@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r346b@t)))))) (set! r4b63@r3060@unless-macro r3060@unless-macro) (set! r3062@if-transformer (lambda (r3475@e r3476@r r3477@mr) (let ((r347b@t r3475@e)) (let ((r347d@ls/false (r30ba@syntax-dispatch r347b@t '(_ any any any)))) (if r347d@ls/false (apply (lambda (r347f@e0 r3480@e1 r3481@e2) (list 'if (r30dc@chi-expr r347f@e0 r3476@r r3477@mr) (r30dc@chi-expr r3480@e1 r3476@r r3477@mr) (r30dc@chi-expr r3481@e2 r3476@r r3477@mr))) r347d@ls/false) (let ((r3485@t r347b@t)) (let ((r3487@ls/false (r30ba@syntax-dispatch r3485@t '(_ any any)))) (if r3487@ls/false (apply (lambda (r3489@e0 r348a@e1) (list 'if (r30dc@chi-expr r3489@e0 r3476@r r3477@mr) (r30dc@chi-expr r348a@e1 r3476@r r3477@mr) (r2e19@r2d7a@build-void))) r3487@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3485@t))))))))) (set! r4b64@r3062@if-transformer r3062@if-transformer) (set! r3064@and-transformer (lambda (r348d@e r348e@r r348f@mr) (let ((r3493@t r348d@e)) (let ((r3495@ls/false (r30ba@syntax-dispatch r3493@t '(_ . each-any)))) (if r3495@ls/false (apply (lambda (r3497@e*) (cons 'and (r30d8@chi-expr* r3497@e* r348e@r r348f@mr))) r3495@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3493@t)))))) (set! r4b65@r3064@and-transformer r3064@and-transformer) (set! r3066@or-transformer (lambda (r3499@e r349a@r r349b@mr) (let ((r349f@t r3499@e)) (let ((r34a1@ls/false (r30ba@syntax-dispatch r349f@t '(_ . each-any)))) (if r34a1@ls/false (apply (lambda (r34a3@e*) (cons 'or (r30d8@chi-expr* r34a3@e* r349a@r r349b@mr))) r34a1@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r349f@t)))))) (set! r4b66@r3066@or-transformer r3066@or-transformer) (set! r3068@case-macro (lambda (r34a5@e) (letrec* ((r34a8@build-last (lambda (r34cf@cls) (let ((r34d1@t r34cf@cls)) (let ((r34d3@ls/false (r30ba@syntax-dispatch r34d1@t '(#(scheme-id else) any . each-any)))) (if r34d3@ls/false (apply (lambda (r34d5@e r34d6@e*) (cons 'begin (cons r34d5@e r34d6@e*))) r34d3@ls/false) (let ((r34d9@t r34d1@t)) (let ((r34db@ls/false (r30ba@syntax-dispatch r34d9@t '_))) (if r34db@ls/false (apply (lambda () (r34aa@build-one r34cf@cls '(if #f #f))) r34db@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r34d9@t))))))))) (r34aa@build-one (lambda (r34c1@cls r34c2@k) (let ((r34c5@t r34c1@cls)) (let ((r34c7@ls/false (r30ba@syntax-dispatch r34c5@t '(each-any any . each-any)))) (if r34c7@ls/false (apply (lambda (r34c9@d* r34ca@e r34cb@e*) (list 'if (list 'memv 't (list 'quote r34c9@d*)) (cons 'begin (cons r34ca@e r34cb@e*)) r34c2@k)) r34c7@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r34c5@t))))))) (let ((r34ab@t r34a5@e)) (let ((r34ad@ls/false (r30ba@syntax-dispatch r34ab@t '(_ any)))) (if r34ad@ls/false (apply (lambda (r34af@expr) (r3070@bless (cons 'let (cons (list (list 't r34af@expr)) '((if #f #f)))))) r34ad@ls/false) (let ((r34b1@t r34ab@t)) (let ((r34b3@ls/false (r30ba@syntax-dispatch r34b1@t '(_ any any . each-any)))) (if r34b3@ls/false (apply (lambda (r34b5@expr r34b6@cls r34b7@cls*) (r3070@bless (list 'let (list (list 't r34b5@expr)) (let r34bf@f ((r34bb@cls r34b6@cls) (r34bc@cls* r34b7@cls*)) (if (null? r34bc@cls*) (r34a8@build-last r34bb@cls) (r34aa@build-one r34bb@cls (r34bf@f (car r34bc@cls*) (cdr r34bc@cls*)))))))) r34b3@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r34b1@t)))))))))) (set! r4b67@r3068@case-macro r3068@case-macro) (set! r306a@quote-transformer (lambda (r34dd@e r34de@r r34df@mr) (let ((r34e3@t r34dd@e)) (let ((r34e5@ls/false (r30ba@syntax-dispatch r34e3@t '(_ any)))) (if r34e5@ls/false (apply (lambda (r34e7@datum) (list 'quote (r2ec7@stx->datum r34e7@datum))) r34e5@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r34e3@t)))))) (set! r4b68@r306a@quote-transformer r306a@quote-transformer) (set! r306c@case-lambda-transformer (lambda (r34e9@e r34ea@r r34eb@mr) (let ((r34ef@t r34e9@e)) (let ((r34f1@ls/false (r30ba@syntax-dispatch r34ef@t '(_ . #(each (any any . each-any)))))) (if r34f1@ls/false (apply (lambda (r34f3@fmls* r34f4@b* r34f5@b**) (call-with-values (lambda () (r30e4@chi-lambda-clause* r34e9@e r34f3@fmls* (map cons r34f4@b* r34f5@b**) r34ea@r r34eb@mr)) (lambda (r34fd@r34fa r34fe@r34fc) (let ((r3501@body* r34fe@r34fc) (r3502@fmls* r34fd@r34fa)) (r2e17@r2d4a@build-case-lambda '#f r3502@fmls* r3501@body*))))) r34f1@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r34ef@t)))))) (set! r4b69@r306c@case-lambda-transformer r306c@case-lambda-transformer) (set! r306e@lambda-transformer (lambda (r3505@e r3506@r r3507@mr) (let ((r350b@t r3505@e)) (let ((r350d@ls/false (r30ba@syntax-dispatch r350b@t '(_ any any . each-any)))) (if r350d@ls/false (apply (lambda (r350f@fmls r3510@b r3511@b*) (call-with-values (lambda () (r30e2@chi-lambda-clause r3505@e r350f@fmls (cons r3510@b r3511@b*) r3506@r r3507@mr)) (lambda (r3519@r3516 r351a@r3518) (let ((r351d@body r351a@r3518) (r351e@fmls r3519@r3516)) (r2e16@r2d48@build-lambda '#f r351e@fmls r351d@body))))) r350d@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r350b@t)))))) (set! r4b6a@r306e@lambda-transformer r306e@lambda-transformer) (set! r3070@bless (lambda (r3521@x) (r2e9b@mkstx (let r3525@f ((r3523@x r3521@x)) (if (r2e7f@stx? r3523@x) r3523@x (if (pair? r3523@x) (cons (r3525@f (car r3523@x)) (r3525@f (cdr r3523@x))) (if (symbol? r3523@x) (r3042@scheme-stx r3523@x) (if (vector? r3523@x) (vector-map r3525@f r3523@x) r3523@x))))) '() '() '()))) (set! r4b6b@r3070@bless r3070@bless) (set! r3072@with-syntax-macro (lambda (r3527@e) (let ((r3529@t r3527@e)) (let ((r352b@ls/false (r30ba@syntax-dispatch r3529@t '(_ #(each (any any)) any . each-any)))) (if r352b@ls/false (apply (lambda (r352d@pat* r352e@expr* r352f@b r3530@b*) (let ((r3535@idn* (let r3539@f ((r3537@pat* r352d@pat*)) (if (null? r3537@pat*) '() (call-with-values (lambda () (r30b8@convert-pattern (car r3537@pat*) '())) (lambda (r353f@r353c r3540@r353e) (let ((r3543@idn* r3540@r353e) (r3544@pat r353f@r353c)) (append r3543@idn* (r3539@f (cdr r3537@pat*)))))))))) (begin (r30e0@verify-formals (map car r3535@idn*) r3527@e) (let ((r3547@t* (r3188@generate-temporaries r352e@expr*))) (r3070@bless (list 'let (map list r3547@t* r352e@expr*) (let r354d@f ((r3549@pat* r352d@pat*) (r354a@t* r3547@t*)) (if (null? r3549@pat*) (cons 'begin (cons '#f (cons r352f@b r3530@b*))) (list 'syntax-case (car r354a@t*) '() (list (car r3549@pat*) (r354d@f (cdr r3549@pat*) (cdr r354a@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car r3549@pat*)) (car r354a@t*)))))))))))) r352b@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3529@t)))))) (set! r4b6c@r3072@with-syntax-macro r3072@with-syntax-macro) (set! r3074@invalid-fmls-error (lambda (r354f@stx r3550@fmls) (let ((r3553@t r3550@fmls)) (let ((r3555@ls/false (r30ba@syntax-dispatch r3553@t '#(each+ any () any)))) (if r3555@ls/false (apply (lambda (r3557@id* r3558@last) (let r355d@f ((r355b@id* (if (r2eb3@id? r3558@last) (cons r3558@last r3557@id*) (if (r2ea9@syntax-null? r3558@last) r3557@id* (r319a@syntax-violation '#f '"not an identifier" r354f@stx r3558@last))))) (if (null? r355b@id*) (values) (if (not (r2eb3@id? (car r355b@id*))) (r319a@syntax-violation '#f '"not an identifier" r354f@stx (car r355b@id*)) (begin (r355d@f (cdr r355b@id*)) (if (r2ebf@bound-id-member? (car r355b@id*) (cdr r355b@id*)) (r319a@syntax-violation '#f '"duplicate binding" r354f@stx (car r355b@id*)) (void))))))) r3555@ls/false) (let ((r355f@t r3553@t)) (let ((r3561@ls/false (r30ba@syntax-dispatch r355f@t '_))) (if r3561@ls/false (apply (lambda () (r319a@syntax-violation '#f '"malformed binding form" r354f@stx r3550@fmls)) r3561@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r355f@t))))))))) (set! r4b6d@r3074@invalid-fmls-error r3074@invalid-fmls-error) (set! r3076@let-macro (lambda (r3563@stx) (let ((r3565@t r3563@stx)) (let ((r3567@ls/false (r30ba@syntax-dispatch r3565@t '(_ #(each (any any)) any . each-any)))) (if r3567@ls/false (apply (lambda (r3569@lhs* r356a@rhs* r356b@b r356c@b*) (if (r2ebb@valid-bound-ids? r3569@lhs*) (r3070@bless (cons (cons 'lambda (cons r3569@lhs* (cons r356b@b r356c@b*))) r356a@rhs*)) (r3074@invalid-fmls-error r3563@stx r3569@lhs*))) r3567@ls/false) (let ((r3571@t r3565@t)) (let ((r3573@ls/false (r30ba@syntax-dispatch r3571@t '(_ any #(each (any any)) any . each-any)))) (if (and r3573@ls/false (apply (lambda (r3575@f r3576@lhs* r3577@rhs* r3578@b r3579@b*) (r2eb3@id? r3575@f)) r3573@ls/false)) (apply (lambda (r357f@f r3580@lhs* r3581@rhs* r3582@b r3583@b*) (if (r2ebb@valid-bound-ids? r3580@lhs*) (r3070@bless (cons (list 'letrec (list (list r357f@f (cons 'lambda (cons r3580@lhs* (cons r3582@b r3583@b*))))) r357f@f) r3581@rhs*)) (r3074@invalid-fmls-error r3563@stx r3580@lhs*))) r3573@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3571@t))))))))) (set! r4b6e@r3076@let-macro r3076@let-macro) (set! r3078@let-values-macro (lambda (r3589@stx) (letrec* ((r358c@rename (lambda (r35f1@x r35f2@old* r35f3@new*) (begin (if (not (r2eb3@id? r35f1@x)) (r319a@syntax-violation '#f '"not an indentifier" r3589@stx r35f1@x) (void)) (if (r2ebf@bound-id-member? r35f1@x r35f2@old*) (r319a@syntax-violation '#f '"duplicate binding" r3589@stx r35f1@x) (void)) (let ((r35f7@y (gensym (r31a0@syntax->datum r35f1@x)))) (values r35f7@y (cons r35f1@x r35f2@old*) (cons r35f7@y r35f3@new*)))))) (r358e@rename* (lambda (r35df@x* r35e0@old* r35e1@new*) (if (null? r35df@x*) (values '() r35e0@old* r35e1@new*) (call-with-values (lambda () (r358c@rename (car r35df@x*) r35e0@old* r35e1@new*)) (lambda (r35e5@x r35e6@old* r35e7@new*) (call-with-values (lambda () (r358e@rename* (cdr r35df@x*) r35e6@old* r35e7@new*)) (lambda (r35eb@x* r35ec@old* r35ed@new*) (values (cons r35e5@x r35eb@x*) r35ec@old* r35ed@new*))))))))) (let ((r358f@t r3589@stx)) (let ((r3591@ls/false (r30ba@syntax-dispatch r358f@t '(_ () any . each-any)))) (if r3591@ls/false (apply (lambda (r3593@b r3594@b*) (cons* (r3070@bless 'let) '() r3593@b r3594@b*)) r3591@ls/false) (let ((r3597@t r358f@t)) (let ((r3599@ls/false (r30ba@syntax-dispatch r3597@t '(_ #(each (any any)) any . each-any)))) (if r3599@ls/false (apply (lambda (r359b@lhs* r359c@rhs* r359d@b r359e@b*) (r3070@bless (let r35ab@f ((r35a3@lhs* r359b@lhs*) (r35a4@rhs* r359c@rhs*) (r35a5@old* '()) (r35a6@new* '())) (if (null? r35a3@lhs*) (cons 'let (cons (map list r35a5@old* r35a6@new*) (cons r359d@b r359e@b*))) (let ((r35ad@t (car r35a3@lhs*))) (let ((r35af@ls/false (r30ba@syntax-dispatch r35ad@t 'each-any))) (if r35af@ls/false (apply (lambda (r35b1@x*) (call-with-values (lambda () (r358e@rename* r35b1@x* r35a5@old* r35a6@new*)) (lambda (r35b9@r35b4 r35ba@r35b6 r35bb@r35b8) (let ((r35bf@new* r35bb@r35b8) (r35c0@old* r35ba@r35b6) (r35c1@y* r35b9@r35b4)) (list 'call-with-values (list 'lambda '() (car r35a4@rhs*)) (list 'lambda r35c1@y* (r35ab@f (cdr r35a3@lhs*) (cdr r35a4@rhs*) r35c0@old* r35bf@new*))))))) r35af@ls/false) (let ((r35c5@t r35ad@t)) (let ((r35c7@ls/false (r30ba@syntax-dispatch r35c5@t '#(each+ any () any)))) (if r35c7@ls/false (apply (lambda (r35c9@x* r35ca@x) (call-with-values (lambda () (r358c@rename r35ca@x r35a5@old* r35a6@new*)) (lambda (r35cd@y r35ce@old* r35cf@new*) (call-with-values (lambda () (r358e@rename* r35c9@x* r35ce@old* r35cf@new*)) (lambda (r35d3@y* r35d4@old* r35d5@new*) (list 'call-with-values (list 'lambda '() (car r35a4@rhs*)) (list 'lambda (append r35d3@y* r35cd@y) (r35ab@f (cdr r35a3@lhs*) (cdr r35a4@rhs*) r35d4@old* r35d5@new*)))))))) r35c7@ls/false) (let ((r35d9@t r35c5@t)) (let ((r35db@ls/false (r30ba@syntax-dispatch r35d9@t 'any))) (if r35db@ls/false (apply (lambda (r35dd@others) (r319a@syntax-violation '#f '"malformed bindings" r3589@stx r35dd@others)) r35db@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r35d9@t)))))))))))))) r3599@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3597@t)))))))))) (set! r4b6f@r3078@let-values-macro r3078@let-values-macro) (set! r307a@let*-values-macro (lambda (r35f9@stx) (letrec* ((r35fc@check (lambda (r362b@x*) (if (not (null? r362b@x*)) (let ((r362d@x (car r362b@x*))) (begin (if (not (r2eb3@id? r362d@x)) (r319a@syntax-violation '#f '"not an identifier" r35f9@stx r362d@x) (void)) (r35fc@check (cdr r362b@x*)) (if (r2ebf@bound-id-member? r362d@x (cdr r362b@x*)) (r319a@syntax-violation '#f '"duplicate identifier" r35f9@stx r362d@x) (void)))) (void))))) (let ((r35fd@t r35f9@stx)) (let ((r35ff@ls/false (r30ba@syntax-dispatch r35fd@t '(_ () any . each-any)))) (if r35ff@ls/false (apply (lambda (r3601@b r3602@b*) (cons* (r3070@bless 'let) '() r3601@b r3602@b*)) r35ff@ls/false) (let ((r3605@t r35fd@t)) (let ((r3607@ls/false (r30ba@syntax-dispatch r3605@t '(_ #(each (any any)) any . each-any)))) (if r3607@ls/false (apply (lambda (r3609@lhs* r360a@rhs* r360b@b r360c@b*) (r3070@bless (let r3615@f ((r3611@lhs* r3609@lhs*) (r3612@rhs* r360a@rhs*)) (if (null? r3611@lhs*) (cons 'begin (cons r360b@b r360c@b*)) (let ((r3617@t (car r3611@lhs*))) (let ((r3619@ls/false (r30ba@syntax-dispatch r3617@t 'each-any))) (if r3619@ls/false (apply (lambda (r361b@x*) (begin (r35fc@check r361b@x*) (list 'call-with-values (list 'lambda '() (car r3612@rhs*)) (list 'lambda r361b@x* (r3615@f (cdr r3611@lhs*) (cdr r3612@rhs*)))))) r3619@ls/false) (let ((r361d@t r3617@t)) (let ((r361f@ls/false (r30ba@syntax-dispatch r361d@t '#(each+ any () any)))) (if r361f@ls/false (apply (lambda (r3621@x* r3622@x) (begin (r35fc@check (cons r3622@x r3621@x*)) (list 'call-with-values (list 'lambda '() (car r3612@rhs*)) (list 'lambda (append r3621@x* r3622@x) (r3615@f (cdr r3611@lhs*) (cdr r3612@rhs*)))))) r361f@ls/false) (let ((r3625@t r361d@t)) (let ((r3627@ls/false (r30ba@syntax-dispatch r3625@t 'any))) (if r3627@ls/false (apply (lambda (r3629@others) (r319a@syntax-violation '#f '"malformed bindings" r35f9@stx r3629@others)) r3627@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3625@t)))))))))))))) r3607@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3605@t)))))))))) (set! r4b70@r307a@let*-values-macro r307a@let*-values-macro) (set! r307c@trace-lambda-macro (lambda (r362f@stx) (let ((r3631@t r362f@stx)) (let ((r3633@ls/false (r30ba@syntax-dispatch r3631@t '(_ any each-any any . each-any)))) (if r3633@ls/false (apply (lambda (r3635@who r3636@fmls r3637@b r3638@b*) (if (r2ebb@valid-bound-ids? r3636@fmls) (r3070@bless (list 'make-traced-procedure (list 'quote r3635@who) (cons 'lambda (cons r3636@fmls (cons r3637@b r3638@b*))))) (r3074@invalid-fmls-error r362f@stx r3636@fmls))) r3633@ls/false) (let ((r363d@t r3631@t)) (let ((r363f@ls/false (r30ba@syntax-dispatch r363d@t '(_ any #(each+ any () any) any . each-any)))) (if r363f@ls/false (apply (lambda (r3641@who r3642@fmls r3643@last r3644@b r3645@b*) (if (r2ebb@valid-bound-ids? (cons r3643@last r3642@fmls)) (r3070@bless (list 'make-traced-procedure (list 'quote r3641@who) (cons 'lambda (cons (append r3642@fmls r3643@last) (cons r3644@b r3645@b*))))) (r3074@invalid-fmls-error r362f@stx (append r3642@fmls r3643@last)))) r363f@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r363d@t))))))))) (set! r4b71@r307c@trace-lambda-macro r307c@trace-lambda-macro) (set! r307e@trace-define-macro (lambda (r364b@stx) (let ((r364d@t r364b@stx)) (let ((r364f@ls/false (r30ba@syntax-dispatch r364d@t '(_ (any . each-any) any . each-any)))) (if r364f@ls/false (apply (lambda (r3651@who r3652@fmls r3653@b r3654@b*) (if (r2ebb@valid-bound-ids? r3652@fmls) (r3070@bless (list 'define r3651@who (list 'make-traced-procedure (list 'quote r3651@who) (cons 'lambda (cons r3652@fmls (cons r3653@b r3654@b*)))))) (r3074@invalid-fmls-error r364b@stx r3652@fmls))) r364f@ls/false) (let ((r3659@t r364d@t)) (let ((r365b@ls/false (r30ba@syntax-dispatch r3659@t '(_ (any . #(each+ any () any)) any . each-any)))) (if r365b@ls/false (apply (lambda (r365d@who r365e@fmls r365f@last r3660@b r3661@b*) (if (r2ebb@valid-bound-ids? (cons r365f@last r365e@fmls)) (r3070@bless (list 'define r365d@who (list 'make-traced-procedure (list 'quote r365d@who) (cons 'lambda (cons (append r365e@fmls r365f@last) (cons r3660@b r3661@b*)))))) (r3074@invalid-fmls-error r364b@stx (append r365e@fmls r365f@last)))) r365b@ls/false) (let ((r3667@t r3659@t)) (let ((r3669@ls/false (r30ba@syntax-dispatch r3667@t '(_ any any)))) (if r3669@ls/false (apply (lambda (r366b@who r366c@expr) (if (r2eb3@id? r366b@who) (r3070@bless (list 'define r366b@who (list 'let (list (list 'v r366c@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote r366b@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (r319a@syntax-violation '#f '"invalid name" r364b@stx))) r3669@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3667@t)))))))))))) (set! r4b72@r307e@trace-define-macro r307e@trace-define-macro) (set! r3080@trace-define-syntax-macro (lambda (r366f@stx) (let ((r3671@t r366f@stx)) (let ((r3673@ls/false (r30ba@syntax-dispatch r3671@t '(_ any any)))) (if r3673@ls/false (apply (lambda (r3675@who r3676@expr) (if (r2eb3@id? r3675@who) (r3070@bless (list 'define-syntax r3675@who (list 'make-traced-macro (list 'quote r3675@who) r3676@expr))) (r319a@syntax-violation '#f '"invalid name" r366f@stx))) r3673@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3671@t)))))) (set! r4b73@r3080@trace-define-syntax-macro r3080@trace-define-syntax-macro) (set! r3082@trace-let/rec-syntax (lambda (r3679@who) (lambda (r367b@stx) (let ((r367d@t r367b@stx)) (let ((r367f@ls/false (r30ba@syntax-dispatch r367d@t '(_ #(each (any any)) any . each-any)))) (if r367f@ls/false (apply (lambda (r3681@lhs* r3682@rhs* r3683@b r3684@b*) (if (r2ebb@valid-bound-ids? r3681@lhs*) (let ((r3689@rhs* (map (lambda (r368b@lhs r368c@rhs) (list 'make-traced-macro (list 'quote r368b@lhs) r368c@rhs)) r3681@lhs* r3682@rhs*))) (r3070@bless (cons r3679@who (cons (map list r3681@lhs* r3689@rhs*) (cons r3683@b r3684@b*))))) (r3074@invalid-fmls-error r367b@stx r3681@lhs*))) r367f@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r367d@t))))))) (set! r4b74@r3082@trace-let/rec-syntax r3082@trace-let/rec-syntax) (set! r3084@trace-let-syntax-macro (r3082@trace-let/rec-syntax 'let-syntax)) (set! r4b75@r3084@trace-let-syntax-macro r3084@trace-let-syntax-macro) (set! r3086@trace-letrec-syntax-macro (r3082@trace-let/rec-syntax 'letrec-syntax)) (set! r4b76@r3086@trace-letrec-syntax-macro r3086@trace-letrec-syntax-macro) (set! r3088@guard-macro (lambda (r368f@x) (letrec* ((r3692@gen-clauses (lambda (r36a9@con r36aa@outerk r36ab@clause*) (letrec* ((r36b0@f (lambda (r36e9@x r36ea@k) (let ((r36ed@t r36e9@x)) (let ((r36ef@ls/false (r30ba@syntax-dispatch r36ed@t '(any #(scheme-id =>) any)))) (if r36ef@ls/false (apply (lambda (r36f1@e r36f2@p) (let ((r36f5@t (gensym))) (list 'let (list (list r36f5@t r36f1@e)) (list 'if r36f5@t (list r36f2@p r36f5@t) r36ea@k)))) r36ef@ls/false) (let ((r36f7@t r36ed@t)) (let ((r36f9@ls/false (r30ba@syntax-dispatch r36f7@t '(any)))) (if r36f9@ls/false (apply (lambda (r36fb@e) (let ((r36fd@t (gensym))) (list 'let (list (list r36fd@t r36fb@e)) (list 'if r36fd@t r36fd@t r36ea@k)))) r36f9@ls/false) (let ((r36ff@t r36f7@t)) (let ((r3701@ls/false (r30ba@syntax-dispatch r36ff@t '(any any . each-any)))) (if r3701@ls/false (apply (lambda (r3703@e r3704@v r3705@v*) (list 'if r3703@e (cons 'begin (cons r3704@v r3705@v*)) r36ea@k)) r3701@ls/false) (let ((r3709@t r36ff@t)) (let ((r370b@ls/false (r30ba@syntax-dispatch r3709@t '_))) (if r370b@ls/false (apply (lambda () (r319a@syntax-violation '#f '"invalid guard clause" r36e9@x)) r370b@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3709@t))))))))))))))) (r36b2@f* (lambda (r36bf@x*) (let ((r36c1@t r36bf@x*)) (let ((r36c3@ls/false (r30ba@syntax-dispatch r36c1@t '()))) (if r36c3@ls/false (apply (lambda () (let ((r36c5@g (gensym))) (values (list r36c5@g (list 'lambda '() (list 'raise-continuable r36a9@con))) r36c5@g))) r36c3@ls/false) (let ((r36c7@t r36c1@t)) (let ((r36c9@ls/false (r30ba@syntax-dispatch r36c7@t '((#(scheme-id else) any . each-any))))) (if r36c9@ls/false (apply (lambda (r36cb@e r36cc@e*) (values (cons 'begin (cons r36cb@e r36cc@e*)) '#f)) r36c9@ls/false) (let ((r36cf@t r36c7@t)) (let ((r36d1@ls/false (r30ba@syntax-dispatch r36cf@t '(any . any)))) (if r36d1@ls/false (apply (lambda (r36d3@cls r36d4@cls*) (call-with-values (lambda () (r36b2@f* r36d4@cls*)) (lambda (r36db@r36d8 r36dc@r36da) (let ((r36df@g r36dc@r36da) (r36e0@e r36db@r36d8)) (values (r36b0@f r36d3@cls r36e0@e) r36df@g))))) r36d1@ls/false) (let ((r36e3@t r36cf@t)) (let ((r36e5@ls/false (r30ba@syntax-dispatch r36e3@t 'any))) (if r36e5@ls/false (apply (lambda (r36e7@others) (r319a@syntax-violation '#f '"invalid guard clause" r36e7@others)) r36e5@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r36e3@t)))))))))))))))) (call-with-values (lambda () (r36b2@f* r36ab@clause*)) (lambda (r36b7@r36b4 r36b8@r36b6) (let ((r36bb@raisek r36b8@r36b6) (r36bc@code r36b7@r36b4)) (if r36bb@raisek (list (list 'call/cc (list 'lambda (list r36bb@raisek) (list r36aa@outerk (list 'lambda '() r36bc@code))))) (list r36aa@outerk (list 'lambda '() r36bc@code)))))))))) (let ((r3693@t r368f@x)) (let ((r3695@ls/false (r30ba@syntax-dispatch r3693@t '(_ (any . each-any) any . each-any)))) (if (and r3695@ls/false (apply (lambda (r3697@con r3698@clause* r3699@b r369a@b*) (r2eb3@id? r3697@con)) r3695@ls/false)) (apply (lambda (r369f@con r36a0@clause* r36a1@b r36a2@b*) (let ((r36a7@outerk (gensym))) (r3070@bless (list (list 'call/cc (list 'lambda (list r36a7@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list r369f@con) (r3692@gen-clauses r369f@con r36a7@outerk r36a0@clause*)) (cons 'lambda (cons '() (cons r36a1@b r36a2@b*))))))))))) r3695@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3693@t))))))) (set! r4b77@r3088@guard-macro r3088@guard-macro) (set! r308a@define-enumeration-macro (lambda (r370d@stx) (letrec* ((r3710@set? (lambda (r3729@x) (or (null? r3729@x) (and (not (memq (car r3729@x) (cdr r3729@x))) (r3710@set? (cdr r3729@x)))))) (r3712@remove-dups (lambda (r3727@ls) (if (null? r3727@ls) '() (cons (car r3727@ls) (r3712@remove-dups (remq (car r3727@ls) (cdr r3727@ls)))))))) (let ((r3713@t r370d@stx)) (let ((r3715@ls/false (r30ba@syntax-dispatch r3713@t '(_ any each-any any)))) (if (and r3715@ls/false (apply (lambda (r3717@name r3718@id* r3719@maker) (and (r2eb3@id? r3717@name) (r2eb3@id? r3719@maker) (for-all r2eb3@id? r3718@id*))) r3715@ls/false)) (apply (lambda (r371d@name r371e@id* r371f@maker) (let ((r3723@name* (r3712@remove-dups (r31a0@syntax->datum r371e@id*))) (r3724@mk (gensym))) (r3070@bless (list 'begin (list 'define r3724@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote r3723@name*)))) (list 'define-syntax r371d@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote r3723@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote r371d@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax r371f@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote r371f@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote r3723@name*)) (cons 'syntax-violation (cons (list 'quote r371f@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons r3724@mk '('(n* ...))))))))))))) r3715@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3713@t))))))) (set! r4b78@r308a@define-enumeration-macro r308a@define-enumeration-macro) (set! r308c@time-macro (lambda (r372b@stx) (let ((r372d@t r372b@stx)) (let ((r372f@ls/false (r30ba@syntax-dispatch r372d@t '(_ any)))) (if r372f@ls/false (apply (lambda (r3731@expr) (r3070@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() r3731@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) r372f@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r372d@t)))))) (set! r4b79@r308c@time-macro r308c@time-macro) (set! r308e@delay-macro (lambda (r3733@stx) (let ((r3735@t r3733@stx)) (let ((r3737@ls/false (r30ba@syntax-dispatch r3735@t '(_ any)))) (if r3737@ls/false (apply (lambda (r3739@expr) (r3070@bless (list 'make-promise (list 'lambda '() r3739@expr)))) r3737@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3735@t)))))) (set! r4b7a@r308e@delay-macro r308e@delay-macro) (set! r3090@assert-macro (lambda (r373b@stx) (let ((r373d@t r373b@stx)) (let ((r373f@ls/false (r30ba@syntax-dispatch r373d@t '(_ any)))) (if r373f@ls/false (apply (lambda (r3741@expr) (let ((r3743@pos (or (r3192@expression-position r373b@stx) (r3192@expression-position r3741@expr)))) (r3070@bless (list 'let (list (list 'x r3741@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote r3741@expr) (list 'quote r3743@pos))))))) r373f@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r373d@t)))))) (set! r4b7b@r3090@assert-macro r3090@assert-macro) (set! r3092@endianness-macro (lambda (r3745@stx) (let ((r3747@t r3745@stx)) (let ((r3749@ls/false (r30ba@syntax-dispatch r3747@t '(_ any)))) (if r3749@ls/false (apply (lambda (r374b@e) (let ((r374d@t (r31a0@syntax->datum r374b@e))) (if (memv r374d@t '(little)) (r3070@bless ''little) (if (memv r374d@t '(big)) (r3070@bless ''big) (r319a@syntax-violation '#f '"endianness must be big or little" r3745@stx))))) r3749@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3747@t)))))) (set! r4b7c@r3092@endianness-macro r3092@endianness-macro) (set! r3094@identifier-syntax-macro (lambda (r374f@stx) (let ((r3751@t r374f@stx)) (let ((r3753@ls/false (r30ba@syntax-dispatch r3751@t '(_ any)))) (if r3753@ls/false (apply (lambda (r3755@expr) (r3070@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax r3755@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax r3755@expr) '((syntax (e* ...)))))))))) r3753@ls/false) (let ((r3757@t r3751@t)) (let ((r3759@ls/false (r30ba@syntax-dispatch r3757@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and r3759@ls/false (apply (lambda (r375b@id1 r375c@expr1 r375d@id2 r375e@expr2 r375f@expr3) (and (r2eb3@id? r375b@id1) (r2eb3@id? r375d@id2) (r2eb3@id? r375e@expr2))) r3759@ls/false)) (apply (lambda (r3765@id1 r3766@expr1 r3767@id2 r3768@expr2 r3769@expr3) (r3070@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax r3766@expr1)) (list (list 'set! 'id r3768@expr2) (list 'syntax r3769@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons r3766@expr1 '(e* ...))))))))) r3759@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3757@t))))))))) (set! r4b7d@r3094@identifier-syntax-macro r3094@identifier-syntax-macro) (set! r3096@do-macro (lambda (r376f@stx) (letrec* ((r3772@bind (lambda (r3789@x) (let ((r378b@t r3789@x)) (let ((r378d@ls/false (r30ba@syntax-dispatch r378b@t '(any any)))) (if r378d@ls/false (apply (lambda (r378f@x r3790@init) (list r378f@x r3790@init r378f@x)) r378d@ls/false) (let ((r3793@t r378b@t)) (let ((r3795@ls/false (r30ba@syntax-dispatch r3793@t '(any any any)))) (if r3795@ls/false (apply (lambda (r3797@x r3798@init r3799@step) (list r3797@x r3798@init r3799@step)) r3795@ls/false) (let ((r379d@t r3793@t)) (let ((r379f@ls/false (r30ba@syntax-dispatch r379d@t '_))) (if r379f@ls/false (apply (lambda () (r319a@syntax-violation '#f '"invalid binding" r376f@stx)) r379f@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r379d@t))))))))))))) (let ((r3773@t r376f@stx)) (let ((r3775@ls/false (r30ba@syntax-dispatch r3773@t '(_ each-any (any . each-any) . each-any)))) (if r3775@ls/false (apply (lambda (r3777@binding* r3778@test r3779@expr* r377a@command*) (let ((r377f@t (map r3772@bind r3777@binding*))) (let ((r3781@ls/false (r30ba@syntax-dispatch r377f@t '#(each (any any any))))) (if r3781@ls/false (apply (lambda (r3783@x* r3784@init* r3785@step*) (if (r2ebb@valid-bound-ids? r3783@x*) (r3070@bless (list 'letrec (list (list 'loop (list 'lambda r3783@x* (list 'if r3778@test (cons 'begin (cons '(if #f #f) r3779@expr*)) (cons 'begin (append r377a@command* (list (cons 'loop r3785@step*)))))))) (cons 'loop r3784@init*))) (r319a@syntax-violation '#f '"invalid bindings" r376f@stx))) r3781@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r377f@t))))) r3775@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3773@t))))))) (set! r4b7e@r3096@do-macro r3096@do-macro) (set! r3098@let*-macro (lambda (r37a1@stx) (let ((r37a3@t r37a1@stx)) (let ((r37a5@ls/false (r30ba@syntax-dispatch r37a3@t '(_ #(each (any any)) any . each-any)))) (if (and r37a5@ls/false (apply (lambda (r37a7@lhs* r37a8@rhs* r37a9@b r37aa@b*) (for-all r2eb3@id? r37a7@lhs*)) r37a5@ls/false)) (apply (lambda (r37af@lhs* r37b0@rhs* r37b1@b r37b2@b*) (r3070@bless (let r37b9@f ((r37b7@x* (map list r37af@lhs* r37b0@rhs*))) (if (null? r37b7@x*) (cons 'let (cons '() (cons r37b1@b r37b2@b*))) (list 'let (list (car r37b7@x*)) (r37b9@f (cdr r37b7@x*))))))) r37a5@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r37a3@t)))))) (set! r4b7f@r3098@let*-macro r3098@let*-macro) (set! r309a@or-macro (lambda (r37bb@stx) (let ((r37bd@t r37bb@stx)) (let ((r37bf@ls/false (r30ba@syntax-dispatch r37bd@t '(_)))) (if r37bf@ls/false (apply (lambda () '#f) r37bf@ls/false) (let ((r37c1@t r37bd@t)) (let ((r37c3@ls/false (r30ba@syntax-dispatch r37c1@t '(_ any . each-any)))) (if r37c3@ls/false (apply (lambda (r37c5@e r37c6@e*) (r3070@bless (let r37cd@f ((r37c9@e r37c5@e) (r37ca@e* r37c6@e*)) (if (null? r37ca@e*) (list 'begin '#f r37c9@e) (list 'let (list (list 't r37c9@e)) (list 'if 't 't (r37cd@f (car r37ca@e*) (cdr r37ca@e*)))))))) r37c3@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r37c1@t))))))))) (set! r4b80@r309a@or-macro r309a@or-macro) (set! r309c@and-macro (lambda (r37cf@stx) (let ((r37d1@t r37cf@stx)) (let ((r37d3@ls/false (r30ba@syntax-dispatch r37d1@t '(_)))) (if r37d3@ls/false (apply (lambda () '#t) r37d3@ls/false) (let ((r37d5@t r37d1@t)) (let ((r37d7@ls/false (r30ba@syntax-dispatch r37d5@t '(_ any . each-any)))) (if r37d7@ls/false (apply (lambda (r37d9@e r37da@e*) (r3070@bless (let r37e1@f ((r37dd@e r37d9@e) (r37de@e* r37da@e*)) (if (null? r37de@e*) (list 'begin '#f r37dd@e) (cons 'if (cons r37dd@e (cons (r37e1@f (car r37de@e*) (cdr r37de@e*)) '(#f)))))))) r37d7@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r37d5@t))))))))) (set! r4b81@r309c@and-macro r309c@and-macro) (set! r309e@cond-macro (lambda (r37e3@stx) (let ((r37e5@t r37e3@stx)) (let ((r37e7@ls/false (r30ba@syntax-dispatch r37e5@t '(_ any . each-any)))) (if r37e7@ls/false (apply (lambda (r37e9@cls r37ea@cls*) (r3070@bless (let r37f1@f ((r37ed@cls r37e9@cls) (r37ee@cls* r37ea@cls*)) (if (null? r37ee@cls*) (let ((r37f3@t r37ed@cls)) (let ((r37f5@ls/false (r30ba@syntax-dispatch r37f3@t '(#(scheme-id else) any . each-any)))) (if r37f5@ls/false (apply (lambda (r37f7@e r37f8@e*) (cons 'begin (cons r37f7@e r37f8@e*))) r37f5@ls/false) (let ((r37fb@t r37f3@t)) (let ((r37fd@ls/false (r30ba@syntax-dispatch r37fb@t '(any #(scheme-id =>) any)))) (if r37fd@ls/false (apply (lambda (r37ff@e r3800@p) (list 'let (list (list 't r37ff@e)) (list 'if 't (cons r3800@p '(t))))) r37fd@ls/false) (let ((r3803@t r37fb@t)) (let ((r3805@ls/false (r30ba@syntax-dispatch r3803@t '(any)))) (if r3805@ls/false (apply (lambda (r3807@e) (cons 'or (cons r3807@e '((if #f #f))))) r3805@ls/false) (let ((r3809@t r3803@t)) (let ((r380b@ls/false (r30ba@syntax-dispatch r3809@t '(any . each-any)))) (if r380b@ls/false (apply (lambda (r380d@e r380e@e*) (list 'if r380d@e (cons 'begin r380e@e*))) r380b@ls/false) (let ((r3811@t r3809@t)) (let ((r3813@ls/false (r30ba@syntax-dispatch r3811@t '_))) (if r3813@ls/false (apply (lambda () (r319a@syntax-violation '#f '"invalid last clause" r37e3@stx)) r3813@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3811@t)))))))))))))))) (let ((r3815@t r37ed@cls)) (let ((r3817@ls/false (r30ba@syntax-dispatch r3815@t '(#(scheme-id else) any . each-any)))) (if r3817@ls/false (apply (lambda (r3819@e r381a@e*) (r319a@syntax-violation '#f '"incorrect position of keyword else" r37e3@stx)) r3817@ls/false) (let ((r381d@t r3815@t)) (let ((r381f@ls/false (r30ba@syntax-dispatch r381d@t '(any #(scheme-id =>) any)))) (if r381f@ls/false (apply (lambda (r3821@e r3822@p) (list 'let (list (list 't r3821@e)) (list 'if 't (cons r3822@p '(t)) (r37f1@f (car r37ee@cls*) (cdr r37ee@cls*))))) r381f@ls/false) (let ((r3825@t r381d@t)) (let ((r3827@ls/false (r30ba@syntax-dispatch r3825@t '(any)))) (if r3827@ls/false (apply (lambda (r3829@e) (list 'or r3829@e (r37f1@f (car r37ee@cls*) (cdr r37ee@cls*)))) r3827@ls/false) (let ((r382b@t r3825@t)) (let ((r382d@ls/false (r30ba@syntax-dispatch r382b@t '(any . each-any)))) (if r382d@ls/false (apply (lambda (r382f@e r3830@e*) (list 'if r382f@e (cons 'begin r3830@e*) (r37f1@f (car r37ee@cls*) (cdr r37ee@cls*)))) r382d@ls/false) (let ((r3833@t r382b@t)) (let ((r3835@ls/false (r30ba@syntax-dispatch r3833@t '_))) (if r3835@ls/false (apply (lambda () (r319a@syntax-violation '#f '"invalid last clause" r37e3@stx)) r3835@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3833@t)))))))))))))))))))) r37e7@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r37e5@t)))))) (set! r4b82@r309e@cond-macro r309e@cond-macro) (set! r30a0@do-include (lambda (r3837@stx r3838@id r3839@filename) (let ((r383d@filename (r2ec7@stx->datum r3839@filename))) (begin (if (not (and (string? r383d@filename) (r2eb3@id? r3838@id))) (r319a@syntax-violation '#f '"invalid syntax" r3837@stx) (void)) (cons (r3070@bless 'begin) (with-input-from-file r383d@filename (lambda () (let r3841@f ((r383f@ls '())) (let ((r3843@x (r29f5@r28c5@read-annotated))) (if (eof-object? r3843@x) (reverse r383f@ls) (r3841@f (cons (r2e93@datum->stx r3838@id r3843@x) r383f@ls)))))))))))) (set! r4b83@r30a0@do-include r30a0@do-include) (set! r30a2@include-macro (lambda (r3845@e) (let ((r3847@t r3845@e)) (let ((r3849@ls/false (r30ba@syntax-dispatch r3847@t '(any any)))) (if r3849@ls/false (apply (lambda (r384b@id r384c@filename) (r30a0@do-include r3845@e r384b@id r384c@filename)) r3849@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3847@t)))))) (set! r4b84@r30a2@include-macro r30a2@include-macro) (set! r30a4@include-into-macro (lambda (r384f@e) (let ((r3851@t r384f@e)) (let ((r3853@ls/false (r30ba@syntax-dispatch r3851@t '(_ any any)))) (if r3853@ls/false (apply (lambda (r3855@id r3856@filename) (r30a0@do-include r384f@e r3855@id r3856@filename)) r3853@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3851@t)))))) (set! r4b85@r30a4@include-into-macro r30a4@include-into-macro) (set! r30a6@syntax-rules-macro (lambda (r3859@e) (let ((r385b@t r3859@e)) (let ((r385d@ls/false (r30ba@syntax-dispatch r385b@t '(_ each-any . #(each (any any)))))) (if r385d@ls/false (apply (lambda (r385f@lits r3860@pat* r3861@tmp*) (begin (r30c0@verify-literals r385f@lits r3859@e) (r3070@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons r385f@lits (map (lambda (r3865@pat r3866@tmp) (let ((r3869@t r3865@pat)) (let ((r386b@ls/false (r30ba@syntax-dispatch r3869@t '(_ . any)))) (if r386b@ls/false (apply (lambda (r386d@rest) (list (cons 'g r386d@rest) (list 'syntax r3866@tmp))) r386b@ls/false) (let ((r386f@t r3869@t)) (let ((r3871@ls/false (r30ba@syntax-dispatch r386f@t '_))) (if r3871@ls/false (apply (lambda () (r319a@syntax-violation '#f '"invalid syntax-rules pattern" r3859@e r3865@pat)) r3871@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r386f@t)))))))) r3860@pat* r3861@tmp*)))))))) r385d@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r385b@t)))))) (set! r4b86@r30a6@syntax-rules-macro r30a6@syntax-rules-macro) (set! r30a8@quasiquote-macro (letrec* ((r3874@datum (lambda (r3975@x) (list (r3042@scheme-stx 'quote) (r2e9b@mkstx r3975@x '() '() '())))) (r3890@quasicons* (lambda (r396d@x r396e@y) (let r3973@f ((r3971@x r396d@x)) (if (null? r3971@x) r396e@y (r3892@quasicons (car r3971@x) (r3973@f (cdr r3971@x))))))) (r3892@quasicons (lambda (r3947@x r3948@y) (let ((r394b@t r3948@y)) (let ((r394d@ls/false (r30ba@syntax-dispatch r394b@t '(#(scheme-id quote) any)))) (if r394d@ls/false (apply (lambda (r394f@dy) (let ((r3951@t r3947@x)) (let ((r3953@ls/false (r30ba@syntax-dispatch r3951@t '(#(scheme-id quote) any)))) (if r3953@ls/false (apply (lambda (r3955@dx) (list (r3042@scheme-stx 'quote) (cons r3955@dx r394f@dy))) r3953@ls/false) (let ((r3957@t r3951@t)) (let ((r3959@ls/false (r30ba@syntax-dispatch r3957@t '_))) (if r3959@ls/false (apply (lambda () (let ((r395b@t r394f@dy)) (let ((r395d@ls/false (r30ba@syntax-dispatch r395b@t '()))) (if r395d@ls/false (apply (lambda () (list (r3042@scheme-stx 'list) r3947@x)) r395d@ls/false) (let ((r395f@t r395b@t)) (let ((r3961@ls/false (r30ba@syntax-dispatch r395f@t '_))) (if r3961@ls/false (apply (lambda () (list (r3042@scheme-stx 'cons) r3947@x r3948@y)) r3961@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r395f@t)))))))) r3959@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3957@t)))))))) r394d@ls/false) (let ((r3963@t r394b@t)) (let ((r3965@ls/false (r30ba@syntax-dispatch r3963@t '(#(scheme-id list) . each-any)))) (if r3965@ls/false (apply (lambda (r3967@stuff) (cons* (r3042@scheme-stx 'list) r3947@x r3967@stuff)) r3965@ls/false) (let ((r3969@t r3963@t)) (let ((r396b@ls/false (r30ba@syntax-dispatch r3969@t '_))) (if r396b@ls/false (apply (lambda () (list (r3042@scheme-stx 'cons) r3947@x r3948@y)) r396b@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3969@t)))))))))))) (r3894@quasiappend (lambda (r392d@x r392e@y) (let ((r3931@ls (let r3935@f ((r3933@x r392d@x)) (if (null? r3933@x) (let ((r3937@t r392e@y)) (let ((r3939@ls/false (r30ba@syntax-dispatch r3937@t '(#(scheme-id quote) ())))) (if r3939@ls/false (apply (lambda () '()) r3939@ls/false) (let ((r393b@t r3937@t)) (let ((r393d@ls/false (r30ba@syntax-dispatch r393b@t '_))) (if r393d@ls/false (apply (lambda () (list r392e@y)) r393d@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r393b@t))))))) (let ((r393f@t (car r3933@x))) (let ((r3941@ls/false (r30ba@syntax-dispatch r393f@t '(#(scheme-id quote) ())))) (if r3941@ls/false (apply (lambda () (r3935@f (cdr r3933@x))) r3941@ls/false) (let ((r3943@t r393f@t)) (let ((r3945@ls/false (r30ba@syntax-dispatch r3943@t '_))) (if r3945@ls/false (apply (lambda () (cons (car r3933@x) (r3935@f (cdr r3933@x)))) r3945@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3943@t))))))))))) (if (null? r3931@ls) (list (r3042@scheme-stx 'quote) '()) (if (null? (cdr r3931@ls)) (car r3931@ls) (cons* (r3042@scheme-stx 'append) r3931@ls)))))) (r3896@quasivector (lambda (r38fb@x) (let ((r38fd@pat-x r38fb@x)) (let ((r38ff@t r38fd@pat-x)) (let ((r3901@ls/false (r30ba@syntax-dispatch r38ff@t '(#(scheme-id quote) each-any)))) (if r3901@ls/false (apply (lambda (r3903@x*) (list (r3042@scheme-stx 'quote) (list->vector r3903@x*))) r3901@ls/false) (let ((r3905@t r38ff@t)) (let ((r3907@ls/false (r30ba@syntax-dispatch r3905@t '_))) (if r3907@ls/false (apply (lambda () (let r390f@f ((r3909@x r38fb@x) (r390a@k (lambda (r390d@ls) (cons* (r3042@scheme-stx 'vector) r390d@ls)))) (let ((r3911@t r3909@x)) (let ((r3913@ls/false (r30ba@syntax-dispatch r3911@t '(#(scheme-id quote) each-any)))) (if r3913@ls/false (apply (lambda (r3915@x*) (r390a@k (map (lambda (r3917@x) (list (r3042@scheme-stx 'quote) r3917@x)) r3915@x*))) r3913@ls/false) (let ((r3919@t r3911@t)) (let ((r391b@ls/false (r30ba@syntax-dispatch r3919@t '(#(scheme-id list) . each-any)))) (if r391b@ls/false (apply (lambda (r391d@x*) (r390a@k r391d@x*)) r391b@ls/false) (let ((r391f@t r3919@t)) (let ((r3921@ls/false (r30ba@syntax-dispatch r391f@t '(#(scheme-id cons) any any)))) (if r3921@ls/false (apply (lambda (r3923@x r3924@y) (r390f@f r3924@y (lambda (r3927@ls) (r390a@k (cons r3923@x r3927@ls))))) r3921@ls/false) (let ((r3929@t r391f@t)) (let ((r392b@ls/false (r30ba@syntax-dispatch r3929@t '_))) (if r392b@ls/false (apply (lambda () (list (r3042@scheme-stx 'list->vector) r38fd@pat-x)) r392b@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3929@t))))))))))))))) r3907@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3905@t)))))))))) (r3898@vquasi (lambda (r38d9@p r38da@lev) (let ((r38dd@t r38d9@p)) (let ((r38df@ls/false (r30ba@syntax-dispatch r38dd@t '(any . any)))) (if r38df@ls/false (apply (lambda (r38e1@p r38e2@q) (let ((r38e5@t r38e1@p)) (let ((r38e7@ls/false (r30ba@syntax-dispatch r38e5@t '(#(scheme-id unquote) . each-any)))) (if r38e7@ls/false (apply (lambda (r38e9@p) (if (= r38da@lev '0) (r3890@quasicons* r38e9@p (r3898@vquasi r38e2@q r38da@lev)) (r3892@quasicons (r3892@quasicons (r3874@datum 'unquote) (r389a@quasi r38e9@p (- r38da@lev '1))) (r3898@vquasi r38e2@q r38da@lev)))) r38e7@ls/false) (let ((r38eb@t r38e5@t)) (let ((r38ed@ls/false (r30ba@syntax-dispatch r38eb@t '(#(scheme-id unquote-splicing) . each-any)))) (if r38ed@ls/false (apply (lambda (r38ef@p) (if (= r38da@lev '0) (r3894@quasiappend r38ef@p (r3898@vquasi r38e2@q r38da@lev)) (r3892@quasicons (r3892@quasicons (r3874@datum 'unquote-splicing) (r389a@quasi r38ef@p (- r38da@lev '1))) (r3898@vquasi r38e2@q r38da@lev)))) r38ed@ls/false) (let ((r38f1@t r38eb@t)) (let ((r38f3@ls/false (r30ba@syntax-dispatch r38f1@t 'any))) (if r38f3@ls/false (apply (lambda (r38f5@p) (r3892@quasicons (r389a@quasi r38f5@p r38da@lev) (r3898@vquasi r38e2@q r38da@lev))) r38f3@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r38f1@t))))))))))) r38df@ls/false) (let ((r38f7@t r38dd@t)) (let ((r38f9@ls/false (r30ba@syntax-dispatch r38f7@t '()))) (if r38f9@ls/false (apply (lambda () (list (r3042@scheme-stx 'quote) '())) r38f9@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r38f7@t))))))))) (r389a@quasi (lambda (r38a3@p r38a4@lev) (let ((r38a7@t r38a3@p)) (let ((r38a9@ls/false (r30ba@syntax-dispatch r38a7@t '(#(scheme-id unquote) any)))) (if r38a9@ls/false (apply (lambda (r38ab@p) (if (= r38a4@lev '0) r38ab@p (r3892@quasicons (r3874@datum 'unquote) (r389a@quasi (list r38ab@p) (- r38a4@lev '1))))) r38a9@ls/false) (let ((r38ad@t r38a7@t)) (let ((r38af@ls/false (r30ba@syntax-dispatch r38ad@t '((#(scheme-id unquote) . each-any) . any)))) (if r38af@ls/false (apply (lambda (r38b1@p r38b2@q) (if (= r38a4@lev '0) (r3890@quasicons* r38b1@p (r389a@quasi r38b2@q r38a4@lev)) (r3892@quasicons (r3892@quasicons (r3874@datum 'unquote) (r389a@quasi r38b1@p (- r38a4@lev '1))) (r389a@quasi r38b2@q r38a4@lev)))) r38af@ls/false) (let ((r38b5@t r38ad@t)) (let ((r38b7@ls/false (r30ba@syntax-dispatch r38b5@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if r38b7@ls/false (apply (lambda (r38b9@p r38ba@q) (if (= r38a4@lev '0) (r3894@quasiappend r38b9@p (r389a@quasi r38ba@q r38a4@lev)) (r3892@quasicons (r3892@quasicons (r3874@datum 'unquote-splicing) (r389a@quasi r38b9@p (- r38a4@lev '1))) (r389a@quasi r38ba@q r38a4@lev)))) r38b7@ls/false) (let ((r38bd@t r38b5@t)) (let ((r38bf@ls/false (r30ba@syntax-dispatch r38bd@t '(#(scheme-id quasiquote) any)))) (if r38bf@ls/false (apply (lambda (r38c1@p) (r3892@quasicons (r3874@datum 'quasiquote) (r389a@quasi (list r38c1@p) (+ r38a4@lev '1)))) r38bf@ls/false) (let ((r38c3@t r38bd@t)) (let ((r38c5@ls/false (r30ba@syntax-dispatch r38c3@t '(any . any)))) (if r38c5@ls/false (apply (lambda (r38c7@p r38c8@q) (r3892@quasicons (r389a@quasi r38c7@p r38a4@lev) (r389a@quasi r38c8@q r38a4@lev))) r38c5@ls/false) (let ((r38cb@t r38c3@t)) (let ((r38cd@ls/false (r30ba@syntax-dispatch r38cb@t '#(vector each-any)))) (if (and r38cd@ls/false (apply (lambda (r38cf@x) (not (r2e7f@stx? r38cf@x))) r38cd@ls/false)) (apply (lambda (r38d1@x) (r3896@quasivector (r3898@vquasi r38d1@x r38a4@lev))) r38cd@ls/false) (let ((r38d3@t r38cb@t)) (let ((r38d5@ls/false (r30ba@syntax-dispatch r38d3@t 'any))) (if r38d5@ls/false (apply (lambda (r38d7@p) (list (r3042@scheme-stx 'quote) r38d7@p)) r38d5@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r38d3@t))))))))))))))))))))))))) (lambda (r389b@x) (let ((r389d@t r389b@x)) (let ((r389f@ls/false (r30ba@syntax-dispatch r389d@t '(_ any)))) (if r389f@ls/false (apply (lambda (r38a1@e) (r389a@quasi r38a1@e '0)) r389f@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r389d@t))))))) (set! r4b87@r30a8@quasiquote-macro r30a8@quasiquote-macro) (set! r30aa@quasisyntax-macro (letrec* ((r3978@quasi (lambda (r3993@p r3994@lev) (let ((r3997@t r3993@p)) (let ((r3999@ls/false (r30ba@syntax-dispatch r3997@t '(#(scheme-id unsyntax) any)))) (if r3999@ls/false (apply (lambda (r399b@p) (if (= r3994@lev '0) (let ((r399d@g (gensym))) (values (list r399d@g) (list r399b@p) r399d@g)) (call-with-values (lambda () (r3978@quasi r399b@p (- r3994@lev '1))) (lambda (r39a5@r39a0 r39a6@r39a2 r39a7@r39a4) (let ((r39ab@p r39a7@r39a4) (r39ac@rhs* r39a6@r39a2) (r39ad@lhs* r39a5@r39a0)) (values r39ad@lhs* r39ac@rhs* (list 'unsyntax r39ab@p))))))) r3999@ls/false) (let ((r39b1@t r3997@t)) (let ((r39b3@ls/false (r30ba@syntax-dispatch r39b1@t '#(scheme-id unsyntax)))) (if (and r39b3@ls/false (apply (lambda () (= r3994@lev '0)) r39b3@ls/false)) (apply (lambda () (r319a@syntax-violation '#f '"incorrect use of unsyntax" r3993@p)) r39b3@ls/false) (let ((r39b5@t r39b1@t)) (let ((r39b7@ls/false (r30ba@syntax-dispatch r39b5@t '((#(scheme-id unsyntax) . each-any) . any)))) (if r39b7@ls/false (apply (lambda (r39b9@p* r39ba@q) (call-with-values (lambda () (r3978@quasi r39ba@q r3994@lev)) (lambda (r39c3@r39be r39c4@r39c0 r39c5@r39c2) (let ((r39c9@q r39c5@r39c2) (r39ca@rhs* r39c4@r39c0) (r39cb@lhs* r39c3@r39be)) (if (= r3994@lev '0) (let ((r39cf@g* (map (lambda (r39d1@x) (gensym)) r39b9@p*))) (values (append r39cf@g* r39cb@lhs*) (append r39b9@p* r39ca@rhs*) (append r39cf@g* r39c9@q))) (call-with-values (lambda () (r3978@quasi r39b9@p* (- r3994@lev '1))) (lambda (r39d9@r39d4 r39da@r39d6 r39db@r39d8) (let ((r39df@p* r39db@r39d8) (r39e0@rhs2* r39da@r39d6) (r39e1@lhs2* r39d9@r39d4)) (values (append r39e1@lhs2* r39cb@lhs*) (append r39e0@rhs2* r39ca@rhs*) (cons (cons 'unsyntax r39df@p*) r39c9@q)))))))))) r39b7@ls/false) (let ((r39e5@t r39b5@t)) (let ((r39e7@ls/false (r30ba@syntax-dispatch r39e5@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if r39e7@ls/false (apply (lambda (r39e9@p* r39ea@q) (call-with-values (lambda () (r3978@quasi r39ea@q r3994@lev)) (lambda (r39f3@r39ee r39f4@r39f0 r39f5@r39f2) (let ((r39f9@q r39f5@r39f2) (r39fa@rhs* r39f4@r39f0) (r39fb@lhs* r39f3@r39ee)) (if (= r3994@lev '0) (let ((r39ff@g* (map (lambda (r3a01@x) (gensym)) r39e9@p*))) (values (append (map (lambda (r3a03@g) (cons r3a03@g '(...))) r39ff@g*) r39fb@lhs*) (append r39e9@p* r39fa@rhs*) (append (apply append (map (lambda (r3a05@g) (cons r3a05@g '(...))) r39ff@g*)) r39f9@q))) (call-with-values (lambda () (r3978@quasi r39e9@p* (- r3994@lev '1))) (lambda (r3a0d@r3a08 r3a0e@r3a0a r3a0f@r3a0c) (let ((r3a13@p* r3a0f@r3a0c) (r3a14@rhs2* r3a0e@r3a0a) (r3a15@lhs2* r3a0d@r3a08)) (values (append r3a15@lhs2* r39fb@lhs*) (append r3a14@rhs2* r39fa@rhs*) (cons (cons 'unsyntax-splicing r3a13@p*) r39f9@q)))))))))) r39e7@ls/false) (let ((r3a19@t r39e5@t)) (let ((r3a1b@ls/false (r30ba@syntax-dispatch r3a19@t '#(scheme-id unsyntax-splicing)))) (if (and r3a1b@ls/false (apply (lambda () (= r3994@lev '0)) r3a1b@ls/false)) (apply (lambda () (r319a@syntax-violation '#f '"incorrect use of unsyntax-splicing" r3993@p)) r3a1b@ls/false) (let ((r3a1d@t r3a19@t)) (let ((r3a1f@ls/false (r30ba@syntax-dispatch r3a1d@t '(#(scheme-id quasisyntax) any)))) (if r3a1f@ls/false (apply (lambda (r3a21@p) (call-with-values (lambda () (r3978@quasi r3a21@p (+ r3994@lev '1))) (lambda (r3a29@r3a24 r3a2a@r3a26 r3a2b@r3a28) (let ((r3a2f@p r3a2b@r3a28) (r3a30@rhs* r3a2a@r3a26) (r3a31@lhs* r3a29@r3a24)) (values r3a31@lhs* r3a30@rhs* (list 'quasisyntax r3a2f@p)))))) r3a1f@ls/false) (let ((r3a35@t r3a1d@t)) (let ((r3a37@ls/false (r30ba@syntax-dispatch r3a35@t '(any . any)))) (if r3a37@ls/false (apply (lambda (r3a39@p r3a3a@q) (call-with-values (lambda () (r3978@quasi r3a39@p r3994@lev)) (lambda (r3a49@r3a3e r3a4a@r3a40 r3a4b@r3a42) (call-with-values (lambda () (r3978@quasi r3a3a@q r3994@lev)) (lambda (r3a4f@r3a44 r3a50@r3a46 r3a51@r3a48) (let ((r3a55@q r3a51@r3a48) (r3a56@rhs2* r3a50@r3a46) (r3a57@lhs2* r3a4f@r3a44) (r3a58@p r3a4b@r3a42) (r3a59@rhs* r3a4a@r3a40) (r3a5a@lhs* r3a49@r3a3e)) (values (append r3a57@lhs2* r3a5a@lhs*) (append r3a56@rhs2* r3a59@rhs*) (cons r3a58@p r3a55@q)))))))) r3a37@ls/false) (let ((r3a61@t r3a35@t)) (let ((r3a63@ls/false (r30ba@syntax-dispatch r3a61@t '#(vector each-any)))) (if r3a63@ls/false (apply (lambda (r3a65@x*) (call-with-values (lambda () (r3978@quasi r3a65@x* r3994@lev)) (lambda (r3a6d@r3a68 r3a6e@r3a6a r3a6f@r3a6c) (let ((r3a73@x* r3a6f@r3a6c) (r3a74@rhs* r3a6e@r3a6a) (r3a75@lhs* r3a6d@r3a68)) (values r3a75@lhs* r3a74@rhs* (list->vector r3a73@x*)))))) r3a63@ls/false) (let ((r3a79@t r3a61@t)) (let ((r3a7b@ls/false (r30ba@syntax-dispatch r3a79@t '_))) (if r3a7b@ls/false (apply (lambda () (values '() '() r3993@p)) r3a7b@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3a79@t))))))))))))))))))))))))))))))) (lambda (r3979@x) (let ((r397b@t r3979@x)) (let ((r397d@ls/false (r30ba@syntax-dispatch r397b@t '(_ any)))) (if r397d@ls/false (apply (lambda (r397f@e) (call-with-values (lambda () (r3978@quasi r397f@e '0)) (lambda (r3987@r3982 r3988@r3984 r3989@r3986) (let ((r398d@v r3989@r3986) (r398e@rhs* r3988@r3984) (r398f@lhs* r3987@r3982)) (r3070@bless (list 'syntax-case (cons 'list r398e@rhs*) '() (list r398f@lhs* (list 'syntax r398d@v)))))))) r397d@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r397b@t))))))) (set! r4b88@r30aa@quasisyntax-macro r30aa@quasisyntax-macro) (set! r30ac@define-struct-macro (lambda (r3a7d@stx) (r319a@syntax-violation '#f '"define-struct not supported" r3a7d@stx))) (set! r4b89@r30ac@define-struct-macro r30ac@define-struct-macro) (set! r30ae@define-record-type-macro (lambda (r3a7f@x) (letrec* ((r3a82@id (lambda (r3c75@ctxt . r3c77@str*) (r319e@datum->syntax r3c75@ctxt (string->symbol (apply string-append (map (lambda (r3c79@x) (if (symbol? r3c79@x) (symbol->string r3c79@x) (if (string? r3c79@x) r3c79@x (assertion-violation 'define-record-type '"BUG")))) r3c77@str*)))))) (r3a84@get-record-name (lambda (r3c63@spec) (let ((r3c65@t r3c63@spec)) (let ((r3c67@ls/false (r30ba@syntax-dispatch r3c65@t '(any any any)))) (if r3c67@ls/false (apply (lambda (r3c69@foo r3c6a@make-foo r3c6b@foo?) r3c69@foo) r3c67@ls/false) (let ((r3c6f@t r3c65@t)) (let ((r3c71@ls/false (r30ba@syntax-dispatch r3c6f@t 'any))) (if r3c71@ls/false (apply (lambda (r3c73@foo) r3c73@foo) r3c71@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3c6f@t))))))))) (r3a86@get-record-constructor-name (lambda (r3c4f@spec) (let ((r3c51@t r3c4f@spec)) (let ((r3c53@ls/false (r30ba@syntax-dispatch r3c51@t '(any any any)))) (if r3c53@ls/false (apply (lambda (r3c55@foo r3c56@make-foo r3c57@foo?) r3c56@make-foo) r3c53@ls/false) (let ((r3c5b@t r3c51@t)) (let ((r3c5d@ls/false (r30ba@syntax-dispatch r3c5b@t 'any))) (if (and r3c5d@ls/false (apply (lambda (r3c5f@foo) (r2eb3@id? r3c5f@foo)) r3c5d@ls/false)) (apply (lambda (r3c61@foo) (r3a82@id r3c61@foo '"make-" (r2ec7@stx->datum r3c61@foo))) r3c5d@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3c5b@t))))))))) (r3a88@get-record-predicate-name (lambda (r3c3b@spec) (let ((r3c3d@t r3c3b@spec)) (let ((r3c3f@ls/false (r30ba@syntax-dispatch r3c3d@t '(any any any)))) (if r3c3f@ls/false (apply (lambda (r3c41@foo r3c42@make-foo r3c43@foo?) r3c43@foo?) r3c3f@ls/false) (let ((r3c47@t r3c3d@t)) (let ((r3c49@ls/false (r30ba@syntax-dispatch r3c47@t 'any))) (if (and r3c49@ls/false (apply (lambda (r3c4b@foo) (r2eb3@id? r3c4b@foo)) r3c49@ls/false)) (apply (lambda (r3c4d@foo) (r3a82@id r3c4d@foo (r2ec7@stx->datum r3c4d@foo) '"?")) r3c49@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3c47@t))))))))) (r3a8a@get-clause (lambda (r3c29@id r3c2a@ls) (let ((r3c2d@t r3c2a@ls)) (let ((r3c2f@ls/false (r30ba@syntax-dispatch r3c2d@t '()))) (if r3c2f@ls/false (apply (lambda () '#f) r3c2f@ls/false) (let ((r3c31@t r3c2d@t)) (let ((r3c33@ls/false (r30ba@syntax-dispatch r3c31@t '((any . any) . any)))) (if r3c33@ls/false (apply (lambda (r3c35@x r3c36@rest r3c37@ls) (if (r2eb9@free-id=? (r3070@bless r3c29@id) r3c35@x) (cons r3c35@x r3c36@rest) (r3a8a@get-clause r3c29@id r3c37@ls))) r3c33@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3c31@t))))))))) (r3a8c@foo-rtd-code (lambda (r3bd7@name r3bd8@clause* r3bd9@parent-rtd-code) (letrec* ((r3bde@convert-field-spec* (lambda (r3c0f@ls) (list->vector (map (lambda (r3c11@x) (let ((r3c13@t r3c11@x)) (let ((r3c15@ls/false (r30ba@syntax-dispatch r3c13@t '(#(scheme-id mutable) any . any)))) (if r3c15@ls/false (apply (lambda (r3c17@name r3c18@rest) (list 'mutable r3c17@name)) r3c15@ls/false) (let ((r3c1b@t r3c13@t)) (let ((r3c1d@ls/false (r30ba@syntax-dispatch r3c1b@t '(#(scheme-id immutable) any . any)))) (if r3c1d@ls/false (apply (lambda (r3c1f@name r3c20@rest) (list 'immutable r3c1f@name)) r3c1d@ls/false) (let ((r3c23@t r3c1b@t)) (let ((r3c25@ls/false (r30ba@syntax-dispatch r3c23@t 'any))) (if r3c25@ls/false (apply (lambda (r3c27@name) (list 'immutable r3c27@name)) r3c25@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3c23@t))))))))))) r3c0f@ls))))) (let ((r3bdf@uid-code (let ((r3be7@t (r3a8a@get-clause 'nongenerative r3bd8@clause*))) (let ((r3be9@ls/false (r30ba@syntax-dispatch r3be7@t '(_)))) (if r3be9@ls/false (apply (lambda () (list 'quote (gensym))) r3be9@ls/false) (let ((r3beb@t r3be7@t)) (let ((r3bed@ls/false (r30ba@syntax-dispatch r3beb@t '(_ any)))) (if r3bed@ls/false (apply (lambda (r3bef@uid) (list 'quote r3bef@uid)) r3bed@ls/false) (let ((r3bf1@t r3beb@t)) (let ((r3bf3@ls/false (r30ba@syntax-dispatch r3bf1@t '_))) (if r3bf3@ls/false (apply (lambda () '#f) r3bf3@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3bf1@t))))))))))) (r3be0@sealed? (let ((r3bf5@t (r3a8a@get-clause 'sealed r3bd8@clause*))) (let ((r3bf7@ls/false (r30ba@syntax-dispatch r3bf5@t '(_ #(atom #t))))) (if r3bf7@ls/false (apply (lambda () '#t) r3bf7@ls/false) (let ((r3bf9@t r3bf5@t)) (let ((r3bfb@ls/false (r30ba@syntax-dispatch r3bf9@t '_))) (if r3bfb@ls/false (apply (lambda () '#f) r3bfb@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3bf9@t)))))))) (r3be1@opaque? (let ((r3bfd@t (r3a8a@get-clause 'opaque r3bd8@clause*))) (let ((r3bff@ls/false (r30ba@syntax-dispatch r3bfd@t '(_ #(atom #t))))) (if r3bff@ls/false (apply (lambda () '#t) r3bff@ls/false) (let ((r3c01@t r3bfd@t)) (let ((r3c03@ls/false (r30ba@syntax-dispatch r3c01@t '_))) (if r3c03@ls/false (apply (lambda () '#f) r3c03@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3c01@t)))))))) (r3be2@fields (let ((r3c05@t (r3a8a@get-clause 'fields r3bd8@clause*))) (let ((r3c07@ls/false (r30ba@syntax-dispatch r3c05@t '(_ . each-any)))) (if r3c07@ls/false (apply (lambda (r3c09@field-spec*) (list 'quote (r3bde@convert-field-spec* r3c09@field-spec*))) r3c07@ls/false) (let ((r3c0b@t r3c05@t)) (let ((r3c0d@ls/false (r30ba@syntax-dispatch r3c0b@t '_))) (if r3c0d@ls/false (apply (lambda () ''#()) r3c0d@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3c0b@t))))))))) (r3070@bless (list 'make-record-type-descriptor (list 'quote r3bd7@name) r3bd9@parent-rtd-code r3bdf@uid-code r3be0@sealed? r3be1@opaque? r3be2@fields)))))) (r3a8e@parent-rtd-code (lambda (r3bbf@clause*) (let ((r3bc1@t (r3a8a@get-clause 'parent r3bbf@clause*))) (let ((r3bc3@ls/false (r30ba@syntax-dispatch r3bc1@t '(_ any)))) (if r3bc3@ls/false (apply (lambda (r3bc5@name) (list 'record-type-descriptor r3bc5@name)) r3bc3@ls/false) (let ((r3bc7@t r3bc1@t)) (let ((r3bc9@ls/false (r30ba@syntax-dispatch r3bc7@t '#(atom #f)))) (if r3bc9@ls/false (apply (lambda () (let ((r3bcb@t (r3a8a@get-clause 'parent-rtd r3bbf@clause*))) (let ((r3bcd@ls/false (r30ba@syntax-dispatch r3bcb@t '(_ any any)))) (if r3bcd@ls/false (apply (lambda (r3bcf@rtd r3bd0@rcd) r3bcf@rtd) r3bcd@ls/false) (let ((r3bd3@t r3bcb@t)) (let ((r3bd5@ls/false (r30ba@syntax-dispatch r3bd3@t '#(atom #f)))) (if r3bd5@ls/false (apply (lambda () '#f) r3bd5@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3bd3@t)))))))) r3bc9@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3bc7@t))))))))) (r3a90@parent-rcd-code (lambda (r3ba7@clause*) (let ((r3ba9@t (r3a8a@get-clause 'parent r3ba7@clause*))) (let ((r3bab@ls/false (r30ba@syntax-dispatch r3ba9@t '(_ any)))) (if r3bab@ls/false (apply (lambda (r3bad@name) (list 'record-constructor-descriptor r3bad@name)) r3bab@ls/false) (let ((r3baf@t r3ba9@t)) (let ((r3bb1@ls/false (r30ba@syntax-dispatch r3baf@t '#(atom #f)))) (if r3bb1@ls/false (apply (lambda () (let ((r3bb3@t (r3a8a@get-clause 'parent-rtd r3ba7@clause*))) (let ((r3bb5@ls/false (r30ba@syntax-dispatch r3bb3@t '(_ any any)))) (if r3bb5@ls/false (apply (lambda (r3bb7@rtd r3bb8@rcd) r3bb8@rcd) r3bb5@ls/false) (let ((r3bbb@t r3bb3@t)) (let ((r3bbd@ls/false (r30ba@syntax-dispatch r3bbb@t '#(atom #f)))) (if r3bbd@ls/false (apply (lambda () '#f) r3bbd@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3bbb@t)))))))) r3bb1@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3baf@t))))))))) (r3a92@foo-rcd-code (lambda (r3b9f@clause* r3ba0@foo-rtd r3ba1@protocol r3ba2@parent-rcd-code) (list 'make-record-constructor-descriptor r3ba0@foo-rtd r3ba2@parent-rcd-code r3ba1@protocol))) (r3a94@get-protocol-code (lambda (r3b93@clause*) (let ((r3b95@t (r3a8a@get-clause 'protocol r3b93@clause*))) (let ((r3b97@ls/false (r30ba@syntax-dispatch r3b95@t '(_ any)))) (if r3b97@ls/false (apply (lambda (r3b99@expr) r3b99@expr) r3b97@ls/false) (let ((r3b9b@t r3b95@t)) (let ((r3b9d@ls/false (r30ba@syntax-dispatch r3b9b@t '_))) (if r3b9d@ls/false (apply (lambda () '#f) r3b9d@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3b9b@t))))))))) (r3a96@get-fields (lambda (r3b81@clause*) (let ((r3b83@t r3b81@clause*)) (let ((r3b85@ls/false (r30ba@syntax-dispatch r3b83@t '()))) (if r3b85@ls/false (apply (lambda () '()) r3b85@ls/false) (let ((r3b87@t r3b83@t)) (let ((r3b89@ls/false (r30ba@syntax-dispatch r3b87@t '((#(scheme-id fields) . each-any) . _)))) (if r3b89@ls/false (apply (lambda (r3b8b@f*) r3b8b@f*) r3b89@ls/false) (let ((r3b8d@t r3b87@t)) (let ((r3b8f@ls/false (r30ba@syntax-dispatch r3b8d@t '(_ . any)))) (if r3b8f@ls/false (apply (lambda (r3b91@rest) (r3a96@get-fields r3b91@rest)) r3b8f@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3b8d@t)))))))))))) (r3a98@get-mutator-indices (lambda (r3b69@fields) (let r3b6f@f ((r3b6b@fields r3b69@fields) (r3b6c@i '0)) (let ((r3b71@t r3b6b@fields)) (let ((r3b73@ls/false (r30ba@syntax-dispatch r3b71@t '()))) (if r3b73@ls/false (apply (lambda () '()) r3b73@ls/false) (let ((r3b75@t r3b71@t)) (let ((r3b77@ls/false (r30ba@syntax-dispatch r3b75@t '((#(scheme-id mutable) . _) . any)))) (if r3b77@ls/false (apply (lambda (r3b79@rest) (cons r3b6c@i (r3b6f@f r3b79@rest (+ r3b6c@i '1)))) r3b77@ls/false) (let ((r3b7b@t r3b75@t)) (let ((r3b7d@ls/false (r30ba@syntax-dispatch r3b7b@t '(_ . any)))) (if r3b7d@ls/false (apply (lambda (r3b7f@rest) (r3b6f@f r3b7f@rest (+ r3b6c@i '1))) r3b7d@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3b7b@t))))))))))))) (r3a9a@get-mutators (lambda (r3b3f@foo r3b40@fields) (letrec* ((r3b44@gen-name (lambda (r3b67@x) (r319e@datum->syntax r3b3f@foo (string->symbol (string-append (symbol->string (r31a0@syntax->datum r3b3f@foo)) '"-" (symbol->string (r31a0@syntax->datum r3b67@x)) '"-set!")))))) (let r3b47@f ((r3b45@fields r3b40@fields)) (let ((r3b49@t r3b45@fields)) (let ((r3b4b@ls/false (r30ba@syntax-dispatch r3b49@t '()))) (if r3b4b@ls/false (apply (lambda () '()) r3b4b@ls/false) (let ((r3b4d@t r3b49@t)) (let ((r3b4f@ls/false (r30ba@syntax-dispatch r3b4d@t '((#(scheme-id mutable) any any any) . any)))) (if r3b4f@ls/false (apply (lambda (r3b51@name r3b52@accessor r3b53@mutator r3b54@rest) (cons r3b53@mutator (r3b47@f r3b54@rest))) r3b4f@ls/false) (let ((r3b59@t r3b4d@t)) (let ((r3b5b@ls/false (r30ba@syntax-dispatch r3b59@t '((#(scheme-id mutable) any) . any)))) (if r3b5b@ls/false (apply (lambda (r3b5d@name r3b5e@rest) (cons (r3b44@gen-name r3b5d@name) (r3b47@f r3b5e@rest))) r3b5b@ls/false) (let ((r3b61@t r3b59@t)) (let ((r3b63@ls/false (r30ba@syntax-dispatch r3b61@t '(_ . any)))) (if r3b63@ls/false (apply (lambda (r3b65@rest) (r3b47@f r3b65@rest)) r3b63@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3b61@t))))))))))))))))) (r3a9c@get-accessors (lambda (r3afb@foo r3afc@fields) (letrec* ((r3b00@gen-name (lambda (r3b3d@x) (r319e@datum->syntax r3afb@foo (string->symbol (string-append (symbol->string (r31a0@syntax->datum r3afb@foo)) '"-" (symbol->string (r31a0@syntax->datum r3b3d@x)))))))) (map (lambda (r3b01@field) (let ((r3b03@t r3b01@field)) (let ((r3b05@ls/false (r30ba@syntax-dispatch r3b03@t '(#(scheme-id mutable) any any any)))) (if (and r3b05@ls/false (apply (lambda (r3b07@name r3b08@accessor r3b09@mutator) (r2eb3@id? r3b08@accessor)) r3b05@ls/false)) (apply (lambda (r3b0d@name r3b0e@accessor r3b0f@mutator) r3b0e@accessor) r3b05@ls/false) (let ((r3b13@t r3b03@t)) (let ((r3b15@ls/false (r30ba@syntax-dispatch r3b13@t '(#(scheme-id immutable) any any)))) (if (and r3b15@ls/false (apply (lambda (r3b17@name r3b18@accessor) (r2eb3@id? r3b18@accessor)) r3b15@ls/false)) (apply (lambda (r3b1b@name r3b1c@accessor) r3b1c@accessor) r3b15@ls/false) (let ((r3b1f@t r3b13@t)) (let ((r3b21@ls/false (r30ba@syntax-dispatch r3b1f@t '(#(scheme-id mutable) any)))) (if (and r3b21@ls/false (apply (lambda (r3b23@name) (r2eb3@id? r3b23@name)) r3b21@ls/false)) (apply (lambda (r3b25@name) (r3b00@gen-name r3b25@name)) r3b21@ls/false) (let ((r3b27@t r3b1f@t)) (let ((r3b29@ls/false (r30ba@syntax-dispatch r3b27@t '(#(scheme-id immutable) any)))) (if (and r3b29@ls/false (apply (lambda (r3b2b@name) (r2eb3@id? r3b2b@name)) r3b29@ls/false)) (apply (lambda (r3b2d@name) (r3b00@gen-name r3b2d@name)) r3b29@ls/false) (let ((r3b2f@t r3b27@t)) (let ((r3b31@ls/false (r30ba@syntax-dispatch r3b2f@t 'any))) (if (and r3b31@ls/false (apply (lambda (r3b33@name) (r2eb3@id? r3b33@name)) r3b31@ls/false)) (apply (lambda (r3b35@name) (r3b00@gen-name r3b35@name)) r3b31@ls/false) (let ((r3b37@t r3b2f@t)) (let ((r3b39@ls/false (r30ba@syntax-dispatch r3b37@t 'any))) (if r3b39@ls/false (apply (lambda (r3b3b@others) (r319a@syntax-violation '#f '"invalid field spec" r3b01@field)) r3b39@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3b37@t)))))))))))))))))))) r3afc@fields)))) (r3a9e@enumerate (lambda (r3af3@ls) (let r3af9@f ((r3af5@ls r3af3@ls) (r3af6@i '0)) (if (null? r3af5@ls) '() (cons r3af6@i (r3af9@f (cdr r3af5@ls) (+ r3af6@i '1))))))) (r3aa0@do-define-record (lambda (r3acb@namespec r3acc@clause*) (let ((r3acf@foo (r3a84@get-record-name r3acb@namespec))) (let ((r3ad1@foo-rtd (gensym))) (let ((r3ad3@foo-rcd (gensym))) (let ((r3ad5@protocol (gensym))) (let ((r3ad7@make-foo (r3a86@get-record-constructor-name r3acb@namespec))) (let ((r3ad9@fields (r3a96@get-fields r3acc@clause*))) (let ((r3adb@idx* (r3a9e@enumerate r3ad9@fields))) (let ((r3add@foo-x* (r3a9c@get-accessors r3acf@foo r3ad9@fields))) (let ((r3adf@set-foo-x!* (r3a9a@get-mutators r3acf@foo r3ad9@fields))) (let ((r3ae1@set-foo-idx* (r3a98@get-mutator-indices r3ad9@fields))) (let ((r3ae3@foo? (r3a88@get-record-predicate-name r3acb@namespec))) (let ((r3ae5@foo-rtd-code (r3a8c@foo-rtd-code r3acf@foo r3acc@clause* (r3a8e@parent-rtd-code r3acc@clause*)))) (let ((r3ae7@foo-rcd-code (r3a92@foo-rcd-code r3acc@clause* r3ad1@foo-rtd r3ad5@protocol (r3a90@parent-rcd-code r3acc@clause*)))) (let ((r3ae9@protocol-code (r3a94@get-protocol-code r3acc@clause*))) (r3070@bless (cons 'begin (cons (list 'define r3ad1@foo-rtd r3ae5@foo-rtd-code) (cons (list 'define r3ad5@protocol r3ae9@protocol-code) (cons (list 'define r3ad3@foo-rcd r3ae7@foo-rcd-code) (cons (list 'define-syntax r3acf@foo (list 'list ''$rtd (list 'syntax r3ad1@foo-rtd) (list 'syntax r3ad3@foo-rcd))) (cons (list 'define r3ae3@foo? (list 'record-predicate r3ad1@foo-rtd)) (cons (list 'define r3ad7@make-foo (list 'record-constructor r3ad3@foo-rcd)) (append (map (lambda (r3aeb@foo-x r3aec@idx) (list 'define r3aeb@foo-x (list 'record-accessor r3ad1@foo-rtd r3aec@idx))) r3add@foo-x* r3adb@idx*) (map (lambda (r3aef@set-foo-x! r3af0@idx) (list 'define r3aef@set-foo-x! (list 'record-mutator r3ad1@foo-rtd r3af0@idx))) r3adf@set-foo-x!* r3ae1@set-foo-idx*)))))))))))))))))))))))))) (r3aa2@verify-clauses (lambda (r3aab@x r3aac@cls*) (letrec* ((r3ab0@valid-kwds (map r3070@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (r3ab2@free-id-member? (lambda (r3ac7@x r3ac8@ls) (and (pair? r3ac8@ls) (or (r2eb9@free-id=? r3ac7@x (car r3ac8@ls)) (r3ab2@free-id-member? r3ac7@x (cdr r3ac8@ls))))))) (let r3ab7@f ((r3ab3@cls* r3aac@cls*) (r3ab4@seen* '())) (if (not (null? r3ab3@cls*)) (let ((r3ab9@t (car r3ab3@cls*))) (let ((r3abb@ls/false (r30ba@syntax-dispatch r3ab9@t '(any . any)))) (if r3abb@ls/false (apply (lambda (r3abd@kwd r3abe@rest) (if (or (not (r2eb3@id? r3abd@kwd)) (not (r3ab2@free-id-member? r3abd@kwd r3ab0@valid-kwds))) (r319a@syntax-violation '#f '"not a valid define-record-type keyword" r3abd@kwd) (if (r2ebf@bound-id-member? r3abd@kwd r3ab4@seen*) (r319a@syntax-violation '#f '"duplicate use of keyword " r3aab@x r3abd@kwd) (r3ab7@f (cdr r3ab3@cls*) (cons r3abd@kwd r3ab4@seen*))))) r3abb@ls/false) (let ((r3ac1@t r3ab9@t)) (let ((r3ac3@ls/false (r30ba@syntax-dispatch r3ac1@t 'any))) (if r3ac3@ls/false (apply (lambda (r3ac5@cls) (r319a@syntax-violation '#f '"malformed define-record-type clause" r3ac5@cls)) r3ac3@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3ac1@t))))))) (void))))))) (let ((r3aa3@t r3a7f@x)) (let ((r3aa5@ls/false (r30ba@syntax-dispatch r3aa3@t '(_ any . each-any)))) (if r3aa5@ls/false (apply (lambda (r3aa7@namespec r3aa8@clause*) (begin (r3aa2@verify-clauses r3a7f@x r3aa8@clause*) (r3aa0@do-define-record r3aa7@namespec r3aa8@clause*))) r3aa5@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3aa3@t))))))) (set! r4b8a@r30ae@define-record-type-macro r30ae@define-record-type-macro) (set! r30b0@define-condition-type-macro (lambda (r3c7b@x) (letrec* ((r3c7e@mkname (lambda (r3cab@name r3cac@suffix) (r319e@datum->syntax r3cab@name (string->symbol (string-append (symbol->string (r31a0@syntax->datum r3cab@name)) r3cac@suffix)))))) (let ((r3c7f@t r3c7b@x)) (let ((r3c81@ls/false (r30ba@syntax-dispatch r3c7f@t '(any any any any any . #(each (any any)))))) (if (and r3c81@ls/false (apply (lambda (r3c83@ctxt r3c84@name r3c85@super r3c86@constructor r3c87@predicate r3c88@field* r3c89@accessor*) (and (r2eb3@id? r3c84@name) (r2eb3@id? r3c85@super) (r2eb3@id? r3c86@constructor) (r2eb3@id? r3c87@predicate) (for-all r2eb3@id? r3c88@field*) (for-all r2eb3@id? r3c89@accessor*))) r3c81@ls/false)) (apply (lambda (r3c91@ctxt r3c92@name r3c93@super r3c94@constructor r3c95@predicate r3c96@field* r3c97@accessor*) (let ((r3c9f@aux-accessor* (map (lambda (r3ca1@x) (gensym)) r3c97@accessor*))) (r3070@bless (cons 'begin (cons (cons 'define-record-type (cons (list r3c92@name r3c94@constructor (gensym)) (cons (list 'parent r3c93@super) (cons (cons 'fields (map (lambda (r3ca3@field r3ca4@aux) (list 'immutable r3ca3@field r3ca4@aux)) r3c96@field* r3c9f@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define r3c95@predicate (list 'condition-predicate (list 'record-type-descriptor r3c92@name))) (map (lambda (r3ca7@accessor r3ca8@aux) (list 'define r3ca7@accessor (list 'condition-accessor (list 'record-type-descriptor r3c92@name) r3ca8@aux))) r3c97@accessor* r3c9f@aux-accessor*))))))) r3c81@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3c7f@t))))))) (set! r4b8b@r30b0@define-condition-type-macro r30b0@define-condition-type-macro) (set! r30b2@incorrect-usage-macro (lambda (r3caf@e) (r319a@syntax-violation '#f '"incorrect usage of auxiliary keyword" r3caf@e))) (set! r4b8c@r30b2@incorrect-usage-macro r30b2@incorrect-usage-macro) (set! r30b4@parameterize-macro (lambda (r3cb1@e) (let ((r3cb3@t r3cb1@e)) (let ((r3cb5@ls/false (r30ba@syntax-dispatch r3cb3@t '(_ () any . each-any)))) (if r3cb5@ls/false (apply (lambda (r3cb7@b r3cb8@b*) (r3070@bless (cons 'let (cons '() (cons r3cb7@b r3cb8@b*))))) r3cb5@ls/false) (let ((r3cbb@t r3cb3@t)) (let ((r3cbd@ls/false (r30ba@syntax-dispatch r3cbb@t '(_ #(each (any any)) any . each-any)))) (if r3cbd@ls/false (apply (lambda (r3cbf@olhs* r3cc0@orhs* r3cc1@b r3cc2@b*) (let ((r3cc7@lhs* (r3188@generate-temporaries r3cbf@olhs*)) (r3cc8@rhs* (r3188@generate-temporaries r3cc0@orhs*))) (r3070@bless (cons (list 'lambda (append r3cc7@lhs* r3cc8@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (r3ccb@lhs r3ccc@rhs) (list 'let (list (list 't (list r3ccb@lhs))) (list r3ccb@lhs r3ccc@rhs) (cons 'set! (cons r3ccc@rhs '(t))))) r3cc7@lhs* r3cc8@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons r3cc1@b r3cc2@b*))) '(swap)))))) (append r3cbf@olhs* r3cc0@orhs*))))) r3cbd@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3cbb@t))))))))) (set! r4b8d@r30b4@parameterize-macro r30b4@parameterize-macro) (set! r30b6@foreign-call-transformer (lambda (r3ccf@e r3cd0@r r3cd1@mr) (let ((r3cd5@t r3ccf@e)) (let ((r3cd7@ls/false (r30ba@syntax-dispatch r3cd5@t '(_ any . each-any)))) (if r3cd7@ls/false (apply (lambda (r3cd9@name r3cda@arg*) (cons 'foreign-call (cons (r30dc@chi-expr r3cd9@name r3cd0@r r3cd1@mr) (r30d8@chi-expr* r3cda@arg* r3cd0@r r3cd1@mr)))) r3cd7@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3cd5@t)))))) (set! r4b8e@r30b6@foreign-call-transformer r30b6@foreign-call-transformer) (set! r30b8@convert-pattern (lambda (r3cdd@pattern r3cde@keys) (letrec* ((r3ce2@cvt* (lambda (r3d81@p* r3d82@n r3d83@ids) (if (null? r3d81@p*) (values '() r3d83@ids) (call-with-values (lambda () (r3ce2@cvt* (cdr r3d81@p*) r3d82@n r3d83@ids)) (lambda (r3d8b@r3d88 r3d8c@r3d8a) (let ((r3d8f@ids r3d8c@r3d8a) (r3d90@y r3d8b@r3d88)) (call-with-values (lambda () (r3ce4@cvt (car r3d81@p*) r3d82@n r3d8f@ids)) (lambda (r3d97@r3d94 r3d98@r3d96) (let ((r3d9b@ids r3d98@r3d96) (r3d9c@x r3d97@r3d94)) (values (cons r3d9c@x r3d90@y) r3d9b@ids)))))))))) (r3ce4@cvt (lambda (r3ce5@p r3ce6@n r3ce7@ids) (let ((r3ceb@t r3ce5@p)) (let ((r3ced@ls/false (r30ba@syntax-dispatch r3ceb@t 'any))) (if (and r3ced@ls/false (apply (lambda (r3cef@id) (r2eb3@id? r3cef@id)) r3ced@ls/false)) (apply (lambda (r3cf1@id) (if (r2ebf@bound-id-member? r3ce5@p r3cde@keys) (values (vector 'free-id r3ce5@p) r3ce7@ids) (if (r2eb9@free-id=? r3ce5@p (r3042@scheme-stx '_)) (values '_ r3ce7@ids) (values 'any (cons (cons r3ce5@p r3ce6@n) r3ce7@ids))))) r3ced@ls/false) (let ((r3cf3@t r3ceb@t)) (let ((r3cf5@ls/false (r30ba@syntax-dispatch r3cf3@t '(any any)))) (if (and r3cf5@ls/false (apply (lambda (r3cf7@p r3cf8@dots) (r30bc@ellipsis? r3cf8@dots)) r3cf5@ls/false)) (apply (lambda (r3cfb@p r3cfc@dots) (call-with-values (lambda () (r3ce4@cvt r3cfb@p (+ r3ce6@n '1) r3ce7@ids)) (lambda (r3d03@r3d00 r3d04@r3d02) (let ((r3d07@ids r3d04@r3d02) (r3d08@p r3d03@r3d00)) (values (if (eq? r3d08@p 'any) 'each-any (vector 'each r3d08@p)) r3d07@ids))))) r3cf5@ls/false) (let ((r3d0b@t r3cf3@t)) (let ((r3d0d@ls/false (r30ba@syntax-dispatch r3d0b@t '(any any . #(each+ any () any))))) (if (and r3d0d@ls/false (apply (lambda (r3d0f@x r3d10@dots r3d11@ys r3d12@z) (r30bc@ellipsis? r3d10@dots)) r3d0d@ls/false)) (apply (lambda (r3d17@x r3d18@dots r3d19@ys r3d1a@z) (call-with-values (lambda () (r3ce4@cvt r3d1a@z r3ce6@n r3ce7@ids)) (lambda (r3d23@r3d20 r3d24@r3d22) (let ((r3d27@ids r3d24@r3d22) (r3d28@z r3d23@r3d20)) (call-with-values (lambda () (r3ce2@cvt* r3d19@ys r3ce6@n r3d27@ids)) (lambda (r3d2f@r3d2c r3d30@r3d2e) (let ((r3d33@ids r3d30@r3d2e) (r3d34@ys r3d2f@r3d2c)) (call-with-values (lambda () (r3ce4@cvt r3d17@x (+ r3ce6@n '1) r3d33@ids)) (lambda (r3d3b@r3d38 r3d3c@r3d3a) (let ((r3d3f@ids r3d3c@r3d3a) (r3d40@x r3d3b@r3d38)) (values (vector 'each+ r3d40@x (reverse r3d34@ys) r3d28@z) r3d3f@ids))))))))))) r3d0d@ls/false) (let ((r3d43@t r3d0b@t)) (let ((r3d45@ls/false (r30ba@syntax-dispatch r3d43@t '(any . any)))) (if r3d45@ls/false (apply (lambda (r3d47@x r3d48@y) (call-with-values (lambda () (r3ce4@cvt r3d48@y r3ce6@n r3ce7@ids)) (lambda (r3d4f@r3d4c r3d50@r3d4e) (let ((r3d53@ids r3d50@r3d4e) (r3d54@y r3d4f@r3d4c)) (call-with-values (lambda () (r3ce4@cvt r3d47@x r3ce6@n r3d53@ids)) (lambda (r3d5b@r3d58 r3d5c@r3d5a) (let ((r3d5f@ids r3d5c@r3d5a) (r3d60@x r3d5b@r3d58)) (values (cons r3d60@x r3d54@y) r3d5f@ids)))))))) r3d45@ls/false) (let ((r3d63@t r3d43@t)) (let ((r3d65@ls/false (r30ba@syntax-dispatch r3d63@t '()))) (if r3d65@ls/false (apply (lambda () (values '() r3ce7@ids)) r3d65@ls/false) (let ((r3d67@t r3d63@t)) (let ((r3d69@ls/false (r30ba@syntax-dispatch r3d67@t '#(vector each-any)))) (if (and r3d69@ls/false (apply (lambda (r3d6b@p) (not (r2e7f@stx? r3d6b@p))) r3d69@ls/false)) (apply (lambda (r3d6d@p) (call-with-values (lambda () (r3ce4@cvt r3d6d@p r3ce6@n r3ce7@ids)) (lambda (r3d73@r3d70 r3d74@r3d72) (let ((r3d77@ids r3d74@r3d72) (r3d78@p r3d73@r3d70)) (values (vector 'vector r3d78@p) r3d77@ids))))) r3d69@ls/false) (let ((r3d7b@t r3d67@t)) (let ((r3d7d@ls/false (r30ba@syntax-dispatch r3d7b@t 'any))) (if r3d7d@ls/false (apply (lambda (r3d7f@datum) (values (vector 'atom (r2ec7@stx->datum r3d7f@datum)) r3ce7@ids)) r3d7d@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3d7b@t))))))))))))))))))))))))) (r3ce4@cvt r3cdd@pattern '0 '())))) (set! r4b8f@r30b8@convert-pattern r30b8@convert-pattern) (set! r30ba@syntax-dispatch (letrec* ((r3da0@stx^ (lambda (r3e7b@e r3e7c@m* r3e7d@s* r3e7e@ae*) (if (and (null? r3e7c@m*) (null? r3e7d@s*) (null? r3e7e@ae*)) r3e7b@e (r2e9b@mkstx r3e7b@e r3e7c@m* r3e7d@s* r3e7e@ae*)))) (r3da2@match-each (lambda (r3e5b@e r3e5c@p r3e5d@m* r3e5e@s* r3e5f@ae*) (if (pair? r3e5b@e) (let ((r3e65@first (r3dae@match (car r3e5b@e) r3e5c@p r3e5d@m* r3e5e@s* r3e5f@ae* '()))) (and r3e65@first (let ((r3e67@rest (r3da2@match-each (cdr r3e5b@e) r3e5c@p r3e5d@m* r3e5e@s* r3e5f@ae*))) (and r3e67@rest (cons r3e65@first r3e67@rest))))) (if (null? r3e5b@e) '() (if (r2e7f@stx? r3e5b@e) (and (not (r2e39@top-marked? r3e5d@m*)) (call-with-values (lambda () (join-wraps r3e5d@m* r3e5e@s* r3e5f@ae* r3e5b@e)) (lambda (r3e6f@r3e6a r3e70@r3e6c r3e71@r3e6e) (let ((r3e75@ae* r3e71@r3e6e) (r3e76@s* r3e70@r3e6c) (r3e77@m* r3e6f@r3e6a)) (r3da2@match-each (r2e81@stx-expr r3e5b@e) r3e5c@p r3e77@m* r3e76@s* r3e75@ae*))))) (if (r29f7@r28c9@annotation? r3e5b@e) (r3da2@match-each (r29f9@r28cd@annotation-expression r3e5b@e) r3e5c@p r3e5d@m* r3e5e@s* r3e5f@ae*) '#f)))))) (r3da4@match-each+ (lambda (r3e1b@e r3e1c@x-pat r3e1d@y-pat r3e1e@z-pat r3e1f@m* r3e20@s* r3e21@ae* r3e22@r) (let r3e33@f ((r3e2b@e r3e1b@e) (r3e2c@m* r3e1f@m*) (r3e2d@s* r3e20@s*) (r3e2e@ae* r3e21@ae*)) (if (pair? r3e2b@e) (call-with-values (lambda () (r3e33@f (cdr r3e2b@e) r3e2c@m* r3e2d@s* r3e2e@ae*)) (lambda (r3e3b@r3e36 r3e3c@r3e38 r3e3d@r3e3a) (let ((r3e41@r r3e3d@r3e3a) (r3e42@y-pat r3e3c@r3e38) (r3e43@xr* r3e3b@r3e36)) (if r3e41@r (if (null? r3e42@y-pat) (let ((r3e47@xr (r3dae@match (car r3e2b@e) r3e1c@x-pat r3e2c@m* r3e2d@s* r3e2e@ae* '()))) (if r3e47@xr (values (cons r3e47@xr r3e43@xr*) r3e42@y-pat r3e41@r) (values '#f '#f '#f))) (values '() (cdr r3e42@y-pat) (r3dae@match (car r3e2b@e) (car r3e42@y-pat) r3e2c@m* r3e2d@s* r3e2e@ae* r3e41@r))) (values '#f '#f '#f))))) (if (r2e7f@stx? r3e2b@e) (if (r2e39@top-marked? r3e2c@m*) (values '() r3e1d@y-pat (r3dae@match r3e2b@e r3e1e@z-pat r3e2c@m* r3e2d@s* r3e2e@ae* r3e22@r)) (call-with-values (lambda () (join-wraps r3e2c@m* r3e2d@s* r3e2e@ae* r3e2b@e)) (lambda (r3e4f@r3e4a r3e50@r3e4c r3e51@r3e4e) (let ((r3e55@ae* r3e51@r3e4e) (r3e56@s* r3e50@r3e4c) (r3e57@m* r3e4f@r3e4a)) (r3e33@f (r2e81@stx-expr r3e2b@e) r3e57@m* r3e56@s* r3e55@ae*))))) (if (r29f7@r28c9@annotation? r3e2b@e) (r3e33@f (r29f9@r28cd@annotation-expression r3e2b@e) r3e2c@m* r3e2d@s* r3e2e@ae*) (values '() r3e1d@y-pat (r3dae@match r3e2b@e r3e1e@z-pat r3e2c@m* r3e2d@s* r3e2e@ae* r3e22@r)))))))) (r3da6@match-each-any (lambda (r3dff@e r3e00@m* r3e01@s* r3e02@ae*) (if (pair? r3dff@e) (let ((r3e07@l (r3da6@match-each-any (cdr r3dff@e) r3e00@m* r3e01@s* r3e02@ae*))) (and r3e07@l (cons (r3da0@stx^ (car r3dff@e) r3e00@m* r3e01@s* r3e02@ae*) r3e07@l))) (if (null? r3dff@e) '() (if (r2e7f@stx? r3dff@e) (and (not (r2e39@top-marked? r3e00@m*)) (call-with-values (lambda () (join-wraps r3e00@m* r3e01@s* r3e02@ae* r3dff@e)) (lambda (r3e0f@r3e0a r3e10@r3e0c r3e11@r3e0e) (let ((r3e15@ae* r3e11@r3e0e) (r3e16@s* r3e10@r3e0c) (r3e17@m* r3e0f@r3e0a)) (r3da6@match-each-any (r2e81@stx-expr r3dff@e) r3e17@m* r3e16@s* r3e15@ae*))))) (if (r29f7@r28c9@annotation? r3dff@e) (r3da6@match-each-any (r29f9@r28cd@annotation-expression r3dff@e) r3e00@m* r3e01@s* r3e02@ae*) '#f)))))) (r3da8@match-empty (lambda (r3df9@p r3dfa@r) (if (null? r3df9@p) r3dfa@r (if (eq? r3df9@p '_) r3dfa@r (if (eq? r3df9@p 'any) (cons '() r3dfa@r) (if (pair? r3df9@p) (r3da8@match-empty (car r3df9@p) (r3da8@match-empty (cdr r3df9@p) r3dfa@r)) (if (eq? r3df9@p 'each-any) (cons '() r3dfa@r) (let ((r3dfd@t (vector-ref r3df9@p '0))) (if (memv r3dfd@t '(each)) (r3da8@match-empty (vector-ref r3df9@p '1) r3dfa@r) (if (memv r3dfd@t '(each+)) (r3da8@match-empty (vector-ref r3df9@p '1) (r3da8@match-empty (reverse (vector-ref r3df9@p '2)) (r3da8@match-empty (vector-ref r3df9@p '3) r3dfa@r))) (if (memv r3dfd@t '(free-id atom)) r3dfa@r (if (memv r3dfd@t '(scheme-id atom)) r3dfa@r (if (memv r3dfd@t '(vector)) (r3da8@match-empty (vector-ref r3df9@p '1) r3dfa@r) (assertion-violation 'syntax-dispatch '"invalid pattern" r3df9@p)))))))))))))) (r3daa@combine (lambda (r3df5@r* r3df6@r) (if (null? (car r3df5@r*)) r3df6@r (cons (map car r3df5@r*) (r3daa@combine (map cdr r3df5@r*) r3df6@r))))) (r3dac@match* (lambda (r3dd1@e r3dd2@p r3dd3@m* r3dd4@s* r3dd5@ae* r3dd6@r) (if (null? r3dd2@p) (and (null? r3dd1@e) r3dd6@r) (if (pair? r3dd2@p) (and (pair? r3dd1@e) (r3dae@match (car r3dd1@e) (car r3dd2@p) r3dd3@m* r3dd4@s* r3dd5@ae* (r3dae@match (cdr r3dd1@e) (cdr r3dd2@p) r3dd3@m* r3dd4@s* r3dd5@ae* r3dd6@r))) (if (eq? r3dd2@p 'each-any) (let ((r3ddd@l (r3da6@match-each-any r3dd1@e r3dd3@m* r3dd4@s* r3dd5@ae*))) (and r3ddd@l (cons r3ddd@l r3dd6@r))) (let ((r3ddf@t (vector-ref r3dd2@p '0))) (if (memv r3ddf@t '(each)) (if (null? r3dd1@e) (r3da8@match-empty (vector-ref r3dd2@p '1) r3dd6@r) (let ((r3de1@r* (r3da2@match-each r3dd1@e (vector-ref r3dd2@p '1) r3dd3@m* r3dd4@s* r3dd5@ae*))) (and r3de1@r* (r3daa@combine r3de1@r* r3dd6@r)))) (if (memv r3ddf@t '(free-id)) (and (symbol? r3dd1@e) (r2e39@top-marked? r3dd3@m*) (r2eb9@free-id=? (r3da0@stx^ r3dd1@e r3dd3@m* r3dd4@s* r3dd5@ae*) (vector-ref r3dd2@p '1)) r3dd6@r) (if (memv r3ddf@t '(scheme-id)) (and (symbol? r3dd1@e) (r2e39@top-marked? r3dd3@m*) (r2eb9@free-id=? (r3da0@stx^ r3dd1@e r3dd3@m* r3dd4@s* r3dd5@ae*) (r3042@scheme-stx (vector-ref r3dd2@p '1))) r3dd6@r) (if (memv r3ddf@t '(each+)) (call-with-values (lambda () (r3da4@match-each+ r3dd1@e (vector-ref r3dd2@p '1) (vector-ref r3dd2@p '2) (vector-ref r3dd2@p '3) r3dd3@m* r3dd4@s* r3dd5@ae* r3dd6@r)) (lambda (r3de9@r3de4 r3dea@r3de6 r3deb@r3de8) (let ((r3def@r r3deb@r3de8) (r3df0@y-pat r3dea@r3de6) (r3df1@xr* r3de9@r3de4)) (and r3def@r (null? r3df0@y-pat) (if (null? r3df1@xr*) (r3da8@match-empty (vector-ref r3dd2@p '1) r3def@r) (r3daa@combine r3df1@xr* r3def@r)))))) (if (memv r3ddf@t '(atom)) (and (fast-equal? (vector-ref r3dd2@p '1) (r2ec5@strip r3dd1@e r3dd3@m*)) r3dd6@r) (if (memv r3ddf@t '(vector)) (and (vector? r3dd1@e) (r3dae@match (vector->list r3dd1@e) (vector-ref r3dd2@p '1) r3dd3@m* r3dd4@s* r3dd5@ae* r3dd6@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" r3dd2@p))))))))))))) (r3dae@match (lambda (r3db3@e r3db4@p r3db5@m* r3db6@s* r3db7@ae* r3db8@r) (if (not r3db8@r) '#f (if (eq? r3db4@p '_) r3db8@r (if (eq? r3db4@p 'any) (cons (r3da0@stx^ r3db3@e r3db5@m* r3db6@s* r3db7@ae*) r3db8@r) (if (r2e7f@stx? r3db3@e) (and (not (r2e39@top-marked? r3db5@m*)) (call-with-values (lambda () (join-wraps r3db5@m* r3db6@s* r3db7@ae* r3db3@e)) (lambda (r3dc5@r3dc0 r3dc6@r3dc2 r3dc7@r3dc4) (let ((r3dcb@ae* r3dc7@r3dc4) (r3dcc@s* r3dc6@r3dc2) (r3dcd@m* r3dc5@r3dc0)) (r3dae@match (r2e81@stx-expr r3db3@e) r3db4@p r3dcd@m* r3dcc@s* r3dcb@ae* r3db8@r))))) (if (r29f7@r28c9@annotation? r3db3@e) (r3dae@match (r29f9@r28cd@annotation-expression r3db3@e) r3db4@p r3db5@m* r3db6@s* r3db7@ae* r3db8@r) (r3dac@match* r3db3@e r3db4@p r3db5@m* r3db6@s* r3db7@ae* r3db8@r))))))))) (lambda (r3daf@e r3db0@p) (r3dae@match r3daf@e r3db0@p '() '() '() '())))) (set! r4b90@r30ba@syntax-dispatch r30ba@syntax-dispatch) (set! r30bc@ellipsis? (lambda (r3e83@x) (and (r2eb3@id? r3e83@x) (r2eb9@free-id=? r3e83@x (r3042@scheme-stx '...))))) (set! r4b91@r30bc@ellipsis? r30bc@ellipsis?) (set! r30be@underscore? (lambda (r3e85@x) (and (r2eb3@id? r3e85@x) (r2eb9@free-id=? r3e85@x (r3042@scheme-stx '_))))) (set! r4b92@r30be@underscore? r30be@underscore?) (set! r30c0@verify-literals (lambda (r3e87@lits r3e88@expr) (for-each (lambda (r3e8b@x) (if (or (not (r2eb3@id? r3e8b@x)) (r30bc@ellipsis? r3e8b@x) (r30be@underscore? r3e8b@x)) (r319a@syntax-violation '#f '"invalid literal" r3e88@expr r3e8b@x) (void))) r3e87@lits))) (set! r4b93@r30c0@verify-literals r30c0@verify-literals) (set! r30c2@syntax-case-transformer (letrec* ((r3e8e@build-dispatch-call (lambda (r3eff@pvars r3f00@expr r3f01@y r3f02@r r3f03@mr) (let ((r3f09@ids (map car r3eff@pvars)) (r3f0a@levels (map cdr r3eff@pvars))) (let ((r3f0d@labels (map r2e3f@gen-label r3f09@ids)) (r3f0e@new-vars (map r2e3b@gen-lexical r3f09@ids))) (let ((r3f11@body (r30dc@chi-expr (r2e9f@add-subst (r2e73@make-full-rib r3f09@ids r3f0d@labels) r3f00@expr) (append (map (lambda (r3f13@label r3f14@var r3f15@level) (cons r3f13@label (r2ecd@make-binding 'syntax (cons r3f14@var r3f15@level)))) r3f0d@labels r3f0e@new-vars (map cdr r3eff@pvars)) r3f02@r) r3f03@mr))) (list '(primitive apply) (r2e16@r2d48@build-lambda '#f r3f0e@new-vars r3f11@body) r3f01@y)))))) (r3e90@invalid-ids-error (lambda (r3ef3@id* r3ef4@e r3ef5@class) (let r3efd@find ((r3ef9@id* r3ef3@id*) (r3efa@ok* '())) (if (null? r3ef9@id*) (r319a@syntax-violation '#f '"invalid syntax" r3ef4@e) (if (r2eb3@id? (car r3ef9@id*)) (if (r2ebf@bound-id-member? (car r3ef9@id*) r3efa@ok*) (r3196@syntax-error (car r3ef9@id*) '"duplicate " r3ef5@class) (r3efd@find (cdr r3ef9@id*) (cons (car r3ef9@id*) r3efa@ok*))) (r3196@syntax-error (car r3ef9@id*) '"invalid " r3ef5@class)))))) (r3e92@gen-clause (lambda (r3ecb@x r3ecc@keys r3ecd@clauses r3ece@r r3ecf@mr r3ed0@pat r3ed1@fender r3ed2@expr) (call-with-values (lambda () (r30b8@convert-pattern r3ed0@pat r3ecc@keys)) (lambda (r3edf@r3edc r3ee0@r3ede) (let ((r3ee3@pvars r3ee0@r3ede) (r3ee4@p r3edf@r3edc)) (if (not (r2ebd@distinct-bound-ids? (map car r3ee3@pvars))) (r3e90@invalid-ids-error (map car r3ee3@pvars) r3ed0@pat '"pattern variable") (if (not (for-all (lambda (r3ee7@x) (not (r30bc@ellipsis? (car r3ee7@x)))) r3ee3@pvars)) (r319a@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" r3ed0@pat) (let ((r3ee9@y (r2e3b@gen-lexical 'tmp))) (let ((r3eeb@test (if (eq? r3ed1@fender '#t) r3ee9@y (let ((r3eed@call (r3e8e@build-dispatch-call r3ee3@pvars r3ed1@fender r3ee9@y r3ece@r r3ecf@mr))) (list 'if r3ee9@y r3eed@call (list 'quote '#f)))))) (let ((r3eef@conseq (r3e8e@build-dispatch-call r3ee3@pvars r3ed2@expr r3ee9@y r3ece@r r3ecf@mr))) (let ((r3ef1@altern (r3e94@gen-syntax-case r3ecb@x r3ecc@keys r3ecd@clauses r3ece@r r3ecf@mr))) (list (r2e16@r2d48@build-lambda '#f (list r3ee9@y) (list 'if r3eeb@test r3eef@conseq r3ef1@altern)) (list '(primitive syntax-dispatch) r3ecb@x (list 'quote r3ee4@p)))))))))))))) (r3e94@gen-syntax-case (lambda (r3ea9@x r3eaa@keys r3eab@clauses r3eac@r r3ead@mr) (if (null? r3eab@clauses) (list '(primitive syntax-error) r3ea9@x) (let ((r3eb3@t (car r3eab@clauses))) (let ((r3eb5@ls/false (r30ba@syntax-dispatch r3eb3@t '(any any)))) (if r3eb5@ls/false (apply (lambda (r3eb7@pat r3eb8@expr) (if (and (r2eb3@id? r3eb7@pat) (not (r2ebf@bound-id-member? r3eb7@pat r3eaa@keys)) (not (r30bc@ellipsis? r3eb7@pat))) (if (r2eb9@free-id=? r3eb7@pat (r3042@scheme-stx '_)) (r30dc@chi-expr r3eb8@expr r3eac@r r3ead@mr) (let ((r3ebb@lab (r2e3f@gen-label r3eb7@pat)) (r3ebc@lex (r2e3b@gen-lexical r3eb7@pat))) (let ((r3ebf@body (r30dc@chi-expr (r2e9f@add-subst (r2e73@make-full-rib (list r3eb7@pat) (list r3ebb@lab)) r3eb8@expr) (cons (cons r3ebb@lab (r2ecd@make-binding 'syntax (cons r3ebc@lex '0))) r3eac@r) r3ead@mr))) (list (r2e16@r2d48@build-lambda '#f (list r3ebc@lex) r3ebf@body) r3ea9@x)))) (r3e92@gen-clause r3ea9@x r3eaa@keys (cdr r3eab@clauses) r3eac@r r3ead@mr r3eb7@pat '#t r3eb8@expr))) r3eb5@ls/false) (let ((r3ec1@t r3eb3@t)) (let ((r3ec3@ls/false (r30ba@syntax-dispatch r3ec1@t '(any any any)))) (if r3ec3@ls/false (apply (lambda (r3ec5@pat r3ec6@fender r3ec7@expr) (r3e92@gen-clause r3ea9@x r3eaa@keys (cdr r3eab@clauses) r3eac@r r3ead@mr r3ec5@pat r3ec6@fender r3ec7@expr)) r3ec3@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3ec1@t))))))))))) (lambda (r3e95@e r3e96@r r3e97@mr) (let ((r3e9b@t r3e95@e)) (let ((r3e9d@ls/false (r30ba@syntax-dispatch r3e9b@t '(_ any each-any . each-any)))) (if r3e9d@ls/false (apply (lambda (r3e9f@expr r3ea0@keys r3ea1@clauses) (begin (r30c0@verify-literals r3ea0@keys r3e95@e) (let ((r3ea5@x (r2e3b@gen-lexical 'tmp))) (let ((r3ea7@body (r3e94@gen-syntax-case r3ea5@x r3ea0@keys r3ea1@clauses r3e96@r r3e97@mr))) (list (r2e16@r2d48@build-lambda '#f (list r3ea5@x) r3ea7@body) (r30dc@chi-expr r3e9f@expr r3e96@r r3e97@mr)))))) r3e9d@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3e9b@t))))))) (set! r4b94@r30c2@syntax-case-transformer r30c2@syntax-case-transformer) (set! r30c4@ellipsis-map (lambda (r3f19@proc r3f1a@ls . r3f1d@ls*) (letrec* ((r3f20@who '...)) (begin (if (not (list? r3f1a@ls)) (assertion-violation r3f20@who '"not a list" r3f1a@ls) (void)) (if (not (null? r3f1d@ls*)) (let ((r3f21@n (length r3f1a@ls))) (for-each (lambda (r3f23@x) (begin (if (not (list? r3f23@x)) (assertion-violation r3f20@who '"not a list" r3f23@x) (void)) (if (not (= (length r3f23@x) r3f21@n)) (assertion-violation r3f20@who '"length mismatch" r3f1a@ls r3f23@x) (void)))) r3f1d@ls*)) (void)) (apply map r3f19@proc r3f1a@ls r3f1d@ls*))))) (set! r4b95@r30c4@ellipsis-map r30c4@ellipsis-map) (set! r30c6@syntax-transformer (letrec* ((r3f26@gen-syntax (lambda (r3f9d@src r3f9e@e r3f9f@r r3fa0@maps r3fa1@ellipsis? r3fa2@vec?) (let ((r3fa9@t r3f9e@e)) (let ((r3fab@ls/false (r30ba@syntax-dispatch r3fa9@t 'any))) (if (and r3fab@ls/false (apply (lambda (r3fad@dots) (r3fa1@ellipsis? r3fad@dots)) r3fab@ls/false)) (apply (lambda (r3faf@dots) (r319a@syntax-violation '#f '"misplaced ellipsis in syntax form" r3f9d@src)) r3fab@ls/false) (let ((r3fb1@t r3fa9@t)) (let ((r3fb3@ls/false (r30ba@syntax-dispatch r3fb1@t 'any))) (if (and r3fb3@ls/false (apply (lambda (r3fb5@id) (r2eb3@id? r3fb5@id)) r3fb3@ls/false)) (apply (lambda (r3fb7@id) (let ((r3fb9@label (r2ec9@id->label r3f9e@e))) (let ((r3fbb@b (r2ecb@label->binding r3fb9@label r3f9f@r))) (if (eq? (r2ecf@binding-type r3fbb@b) 'syntax) (call-with-values (lambda () (let ((r3fc1@var.lev (r2ed1@binding-value r3fbb@b))) (r3f28@gen-ref r3f9d@src (car r3fc1@var.lev) (cdr r3fc1@var.lev) r3fa0@maps))) (lambda (r3fc3@r3fbe r3fc4@r3fc0) (let ((r3fc7@maps r3fc4@r3fc0) (r3fc8@var r3fc3@r3fbe)) (values (list 'ref r3fc8@var) r3fc7@maps)))) (values (list 'quote r3f9e@e) r3fa0@maps))))) r3fb3@ls/false) (let ((r3fcb@t r3fb1@t)) (let ((r3fcd@ls/false (r30ba@syntax-dispatch r3fcb@t '(any any)))) (if (and r3fcd@ls/false (apply (lambda (r3fcf@dots r3fd0@e) (r3fa1@ellipsis? r3fcf@dots)) r3fcd@ls/false)) (apply (lambda (r3fd3@dots r3fd4@e) (if r3fa2@vec? (r319a@syntax-violation '#f '"misplaced ellipsis in syntax form" r3f9d@src) (r3f26@gen-syntax r3f9d@src r3fd4@e r3f9f@r r3fa0@maps (lambda (r3fd7@x) '#f) '#f))) r3fcd@ls/false) (let ((r3fd9@t r3fcb@t)) (let ((r3fdb@ls/false (r30ba@syntax-dispatch r3fd9@t '(any any . any)))) (if (and r3fdb@ls/false (apply (lambda (r3fdd@x r3fde@dots r3fdf@y) (r3fa1@ellipsis? r3fde@dots)) r3fdb@ls/false)) (apply (lambda (r3fe3@x r3fe4@dots r3fe5@y) (let r3ffb@f ((r3fe9@y r3fe5@y) (r3fea@k (lambda (r3fed@maps) (call-with-values (lambda () (r3f26@gen-syntax r3f9d@src r3fe3@x r3f9f@r (cons '() r3fed@maps) r3fa1@ellipsis? '#f)) (lambda (r3ff3@r3ff0 r3ff4@r3ff2) (let ((r3ff7@maps r3ff4@r3ff2) (r3ff8@x r3ff3@r3ff0)) (if (null? (car r3ff7@maps)) (r319a@syntax-violation '#f '"extra ellipsis in syntax form" r3f9d@src) (values (r3f2e@gen-map r3ff8@x (car r3ff7@maps)) (cdr r3ff7@maps))))))))) (let ((r3ffd@t r3fe9@y)) (let ((r3fff@ls/false (r30ba@syntax-dispatch r3ffd@t '()))) (if r3fff@ls/false (apply (lambda () (r3fea@k r3fa0@maps)) r3fff@ls/false) (let ((r4001@t r3ffd@t)) (let ((r4003@ls/false (r30ba@syntax-dispatch r4001@t '(any . any)))) (if (and r4003@ls/false (apply (lambda (r4005@dots r4006@y) (r3fa1@ellipsis? r4005@dots)) r4003@ls/false)) (apply (lambda (r4009@dots r400a@y) (r3ffb@f r400a@y (lambda (r400d@maps) (call-with-values (lambda () (r3fea@k (cons '() r400d@maps))) (lambda (r4013@r4010 r4014@r4012) (let ((r4017@maps r4014@r4012) (r4018@x r4013@r4010)) (if (null? (car r4017@maps)) (r319a@syntax-violation '#f '"extra ellipsis in syntax form" r3f9d@src) (values (r3f2c@gen-mappend r4018@x (car r4017@maps)) (cdr r4017@maps))))))))) r4003@ls/false) (let ((r401b@t r4001@t)) (let ((r401d@ls/false (r30ba@syntax-dispatch r401b@t '_))) (if r401d@ls/false (apply (lambda () (call-with-values (lambda () (r3f26@gen-syntax r3f9d@src r3fe9@y r3f9f@r r3fa0@maps r3fa1@ellipsis? r3fa2@vec?)) (lambda (r4023@r4020 r4024@r4022) (let ((r4027@maps r4024@r4022) (r4028@y r4023@r4020)) (call-with-values (lambda () (r3fea@k r4027@maps)) (lambda (r402f@r402c r4030@r402e) (let ((r4033@maps r4030@r402e) (r4034@x r402f@r402c)) (values (r3f2a@gen-append r4034@x r4028@y) r4033@maps)))))))) r401d@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r401b@t)))))))))))) r3fdb@ls/false) (let ((r4037@t r3fd9@t)) (let ((r4039@ls/false (r30ba@syntax-dispatch r4037@t '(any . any)))) (if r4039@ls/false (apply (lambda (r403b@x r403c@y) (call-with-values (lambda () (r3f26@gen-syntax r3f9d@src r403b@x r3f9f@r r3fa0@maps r3fa1@ellipsis? '#f)) (lambda (r4043@r4040 r4044@r4042) (let ((r4047@maps r4044@r4042) (r4048@xnew r4043@r4040)) (call-with-values (lambda () (r3f26@gen-syntax r3f9d@src r403c@y r3f9f@r r4047@maps r3fa1@ellipsis? r3fa2@vec?)) (lambda (r404f@r404c r4050@r404e) (let ((r4053@maps r4050@r404e) (r4054@ynew r404f@r404c)) (values (r3f30@gen-cons r3f9e@e r403b@x r403c@y r4048@xnew r4054@ynew) r4053@maps)))))))) r4039@ls/false) (let ((r4057@t r4037@t)) (let ((r4059@ls/false (r30ba@syntax-dispatch r4057@t '#(vector each-any)))) (if r4059@ls/false (apply (lambda (r405b@ls) (call-with-values (lambda () (r3f26@gen-syntax r3f9d@src r405b@ls r3f9f@r r3fa0@maps r3fa1@ellipsis? '#t)) (lambda (r4061@r405e r4062@r4060) (let ((r4065@maps r4062@r4060) (r4066@lsnew r4061@r405e)) (values (r3f32@gen-vector r3f9e@e r405b@ls r4066@lsnew) r4065@maps))))) r4059@ls/false) (let ((r4069@t r4057@t)) (let ((r406b@ls/false (r30ba@syntax-dispatch r4069@t '_))) (if r406b@ls/false (apply (lambda () (values (list 'quote r3f9e@e) r3fa0@maps)) r406b@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r4069@t)))))))))))))))))))))))) (r3f28@gen-ref (lambda (r3f83@src r3f84@var r3f85@level r3f86@maps) (if (= r3f85@level '0) (values r3f84@var r3f86@maps) (if (null? r3f86@maps) (r319a@syntax-violation '#f '"missing ellipsis in syntax form" r3f83@src) (call-with-values (lambda () (r3f28@gen-ref r3f83@src r3f84@var (- r3f85@level '1) (cdr r3f86@maps))) (lambda (r3f8f@r3f8c r3f90@r3f8e) (let ((r3f93@outer-maps r3f90@r3f8e) (r3f94@outer-var r3f8f@r3f8c)) (let ((r3f97@t (assq r3f94@outer-var (car r3f86@maps)))) (if r3f97@t ((lambda (r3f99@b) (values (cdr r3f99@b) r3f86@maps)) r3f97@t) (let ((r3f9b@inner-var (r2e3b@gen-lexical 'tmp))) (values r3f9b@inner-var (cons (cons (cons r3f94@outer-var r3f9b@inner-var) (car r3f86@maps)) r3f93@outer-maps)))))))))))) (r3f2a@gen-append (lambda (r3f7f@x r3f80@y) (if (fast-equal? r3f80@y ''()) r3f7f@x (list 'append r3f7f@x r3f80@y)))) (r3f2c@gen-mappend (lambda (r3f7b@e r3f7c@map-env) (list 'apply '(primitive append) (r3f2e@gen-map r3f7b@e r3f7c@map-env)))) (r3f2e@gen-map (lambda (r3f69@e r3f6a@map-env) (let ((r3f6d@formals (map cdr r3f6a@map-env)) (r3f6e@actuals (map (lambda (r3f71@x) (list 'ref (car r3f71@x))) r3f6a@map-env))) (if (eq? (car r3f69@e) 'ref) (car r3f6e@actuals) (if (for-all (lambda (r3f73@x) (and (eq? (car r3f73@x) 'ref) (memq (cadr r3f73@x) r3f6d@formals))) (cdr r3f69@e)) (let ((r3f75@args (map (let ((r3f77@r (map cons r3f6d@formals r3f6e@actuals))) (lambda (r3f79@x) (cdr (assq (cadr r3f79@x) r3f77@r)))) (cdr r3f69@e)))) (cons 'map (cons (list 'primitive (car r3f69@e)) r3f75@args))) (cons* 'map (list 'lambda r3f6d@formals r3f69@e) r3f6e@actuals)))))) (r3f30@gen-cons (lambda (r3f59@e r3f5a@x r3f5b@y r3f5c@xnew r3f5d@ynew) (let ((r3f63@t (car r3f5d@ynew))) (if (memv r3f63@t '(quote)) (if (eq? (car r3f5c@xnew) 'quote) (let ((r3f65@xnew (cadr r3f5c@xnew)) (r3f66@ynew (cadr r3f5d@ynew))) (if (and (eq? r3f65@xnew r3f5a@x) (eq? r3f66@ynew r3f5b@y)) (list 'quote r3f59@e) (list 'quote (cons r3f65@xnew r3f66@ynew)))) (if (null? (cadr r3f5d@ynew)) (list 'list r3f5c@xnew) (list 'cons r3f5c@xnew r3f5d@ynew))) (if (memv r3f63@t '(list)) (cons 'list (cons r3f5c@xnew (cdr r3f5d@ynew))) (list 'cons r3f5c@xnew r3f5d@ynew)))))) (r3f32@gen-vector (lambda (r3f53@e r3f54@ls r3f55@lsnew) (if (eq? (car r3f55@lsnew) 'quote) (if (eq? (cadr r3f55@lsnew) r3f54@ls) (list 'quote r3f53@e) (list 'quote (list->vector (cadr r3f55@lsnew)))) (if (eq? (car r3f55@lsnew) 'list) (cons 'vector (cdr r3f55@lsnew)) (list 'list->vector r3f55@lsnew))))) (r3f34@regen (lambda (r3f4d@x) (let ((r3f4f@t (car r3f4d@x))) (if (memv r3f4f@t '(ref)) (cadr r3f4d@x) (if (memv r3f4f@t '(primitive)) (list 'primitive (cadr r3f4d@x)) (if (memv r3f4f@t '(quote)) (list 'quote (cadr r3f4d@x)) (if (memv r3f4f@t '(lambda)) (r2e16@r2d48@build-lambda '#f (cadr r3f4d@x) (r3f34@regen (caddr r3f4d@x))) (if (memv r3f4f@t '(map)) (let ((r3f51@ls (map r3f34@regen (cdr r3f4d@x)))) (cons '(primitive ellipsis-map) r3f51@ls)) (cons (list 'primitive (car r3f4d@x)) (map r3f34@regen (cdr r3f4d@x)))))))))))) (lambda (r3f35@e r3f36@r r3f37@mr) (let ((r3f3b@t r3f35@e)) (let ((r3f3d@ls/false (r30ba@syntax-dispatch r3f3b@t '(_ any)))) (if r3f3d@ls/false (apply (lambda (r3f3f@x) (call-with-values (lambda () (r3f26@gen-syntax r3f35@e r3f3f@x r3f36@r '() r30bc@ellipsis? '#f)) (lambda (r3f45@r3f42 r3f46@r3f44) (let ((r3f49@maps r3f46@r3f44) (r3f4a@e r3f45@r3f42)) (r3f34@regen r3f4a@e))))) r3f3d@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r3f3b@t))))))) (set! r4b96@r30c6@syntax-transformer r30c6@syntax-transformer) (set! r30c8@core-macro-transformer (lambda (r406d@name) (let ((r406f@t r406d@name)) (if (memv r406f@t '(quote)) r306a@quote-transformer (if (memv r406f@t '(lambda)) r306e@lambda-transformer (if (memv r406f@t '(case-lambda)) r306c@case-lambda-transformer (if (memv r406f@t '(letrec)) r3052@letrec-transformer (if (memv r406f@t '(letrec*)) r3054@letrec*-transformer (if (memv r406f@t '(let)) r3050@let-transformer (if (memv r406f@t '(if)) r3062@if-transformer (if (memv r406f@t '(and)) r3064@and-transformer (if (memv r406f@t '(or)) r3066@or-transformer (if (memv r406f@t '(foreign-call)) r30b6@foreign-call-transformer (if (memv r406f@t '(syntax-case)) r30c2@syntax-case-transformer (if (memv r406f@t '(syntax)) r30c6@syntax-transformer (if (memv r406f@t '(type-descriptor)) r3058@type-descriptor-transformer (if (memv r406f@t '(record-type-descriptor)) r305a@record-type-descriptor-transformer (if (memv r406f@t '(record-constructor-descriptor)) r305c@record-constructor-descriptor-transformer (if (memv r406f@t '(fluid-let-syntax)) r3056@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" r406d@name)))))))))))))))))))) (set! r4b97@r30c8@core-macro-transformer r30c8@core-macro-transformer) (set! r30ca@symbol-macro (lambda (r4071@x r4072@set) (let ((r4075@t r4071@x)) (let ((r4077@ls/false (r30ba@syntax-dispatch r4075@t '(_ any)))) (if (and r4077@ls/false (apply (lambda (r4079@name) (and (r2eb3@id? r4079@name) (memq (r2eb5@id->sym r4079@name) r4072@set))) r4077@ls/false)) (apply (lambda (r407b@name) (r3070@bless (list 'quote r407b@name))) r4077@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r4075@t)))))) (set! r4b98@r30ca@symbol-macro r30ca@symbol-macro) (set! r30cc@macro-transformer (lambda (r407d@x) (if (procedure? r407d@x) r407d@x (if (symbol? r407d@x) (let ((r407f@t r407d@x)) (if (memv r407f@t '(define-record-type)) r30ae@define-record-type-macro (if (memv r407f@t '(define-struct)) r30ac@define-struct-macro (if (memv r407f@t '(include)) r30a2@include-macro (if (memv r407f@t '(cond)) r309e@cond-macro (if (memv r407f@t '(let)) r3076@let-macro (if (memv r407f@t '(do)) r3096@do-macro (if (memv r407f@t '(or)) r309a@or-macro (if (memv r407f@t '(and)) r309c@and-macro (if (memv r407f@t '(let*)) r3098@let*-macro (if (memv r407f@t '(let-values)) r3078@let-values-macro (if (memv r407f@t '(let*-values)) r307a@let*-values-macro (if (memv r407f@t '(syntax-rules)) r30a6@syntax-rules-macro (if (memv r407f@t '(quasiquote)) r30a8@quasiquote-macro (if (memv r407f@t '(quasisyntax)) r30aa@quasisyntax-macro (if (memv r407f@t '(with-syntax)) r3072@with-syntax-macro (if (memv r407f@t '(when)) r305e@when-macro (if (memv r407f@t '(unless)) r3060@unless-macro (if (memv r407f@t '(case)) r3068@case-macro (if (memv r407f@t '(identifier-syntax)) r3094@identifier-syntax-macro (if (memv r407f@t '(time)) r308c@time-macro (if (memv r407f@t '(delay)) r308e@delay-macro (if (memv r407f@t '(assert)) r3090@assert-macro (if (memv r407f@t '(endianness)) r3092@endianness-macro (if (memv r407f@t '(guard)) r3088@guard-macro (if (memv r407f@t '(define-enumeration)) r308a@define-enumeration-macro (if (memv r407f@t '(trace-lambda)) r307c@trace-lambda-macro (if (memv r407f@t '(trace-define)) r307e@trace-define-macro (if (memv r407f@t '(trace-define-syntax)) r3080@trace-define-syntax-macro (if (memv r407f@t '(trace-let-syntax)) r3084@trace-let-syntax-macro (if (memv r407f@t '(trace-letrec-syntax)) r3086@trace-letrec-syntax-macro (if (memv r407f@t '(define-condition-type)) r30b0@define-condition-type-macro (if (memv r407f@t '(parameterize)) r30b4@parameterize-macro (if (memv r407f@t '(include-into)) r30a4@include-into-macro (if (memv r407f@t '(eol-style)) (lambda (r4081@x) (r30ca@symbol-macro r4081@x '(none lf cr crlf nel crnel ls))) (if (memv r407f@t '(error-handling-mode)) (lambda (r4083@x) (r30ca@symbol-macro r4083@x '(ignore raise replace))) (if (memv r407f@t '(buffer-mode)) (lambda (r4085@x) (r30ca@symbol-macro r4085@x '(none line block))) (if (memv r407f@t '(file-options)) r2e2e@file-options-macro (if (memv r407f@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) r30b2@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" r407d@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" r407d@x))))) (set! r4b99@r30cc@macro-transformer r30cc@macro-transformer) (set! r30ce@local-macro-transformer (lambda (r4087@x) (car r4087@x))) (set! r4b9a@r30ce@local-macro-transformer r30ce@local-macro-transformer) (set! r30d0@do-macro-call (lambda (r4089@transformer r408a@expr) (let ((r408d@out (r4089@transformer (r2e9d@add-mark r2e97@anti-mark r408a@expr '#f)))) (begin (let r4091@f ((r408f@x r408d@out)) (if (not (r2e7f@stx? r408f@x)) (if (pair? r408f@x) (begin (r4091@f (car r408f@x)) (r4091@f (cdr r408f@x))) (if (vector? r408f@x) (vector-for-each r4091@f r408f@x) (if (symbol? r408f@x) (r319a@syntax-violation '#f '"raw symbol encountered in output of macro" r408a@expr r408f@x) (void)))) (void))) (r2e9d@add-mark (r2e95@gen-mark) r408d@out r408a@expr))))) (set! r4b9b@r30d0@do-macro-call r30d0@do-macro-call) (set! r30d2@chi-macro (lambda (r4093@p r4094@e) (r30d0@do-macro-call (r30cc@macro-transformer r4093@p) r4094@e))) (set! r4b9c@r30d2@chi-macro r30d2@chi-macro) (set! r30d4@chi-local-macro (lambda (r4097@p r4098@e) (r30d0@do-macro-call (r30ce@local-macro-transformer r4097@p) r4098@e))) (set! r4b9d@r30d4@chi-local-macro r30d4@chi-local-macro) (set! r30d6@chi-global-macro (lambda (r409b@p r409c@e) (let ((r409f@lib (car r409b@p)) (r40a0@loc (cdr r409b@p))) (begin (r2cd0@r2b1f@visit-library r409f@lib) (let ((r40a3@x (symbol-value r40a0@loc))) (let ((r40a5@transformer (if (procedure? r40a3@x) r40a3@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" r40a3@x)))) (r30d0@do-macro-call r40a5@transformer r409c@e))))))) (set! r4b9e@r30d6@chi-global-macro r30d6@chi-global-macro) (set! r30d8@chi-expr* (lambda (r40a7@e* r40a8@r r40a9@mr) (if (null? r40a7@e*) '() (let ((r40ad@e (r30dc@chi-expr (car r40a7@e*) r40a8@r r40a9@mr))) (cons r40ad@e (r30d8@chi-expr* (cdr r40a7@e*) r40a8@r r40a9@mr)))))) (set! r4b9f@r30d8@chi-expr* r30d8@chi-expr*) (set! r30da@chi-application (lambda (r40af@e r40b0@r r40b1@mr) (let ((r40b5@t r40af@e)) (let ((r40b7@ls/false (r30ba@syntax-dispatch r40b5@t '(any . each-any)))) (if r40b7@ls/false (apply (lambda (r40b9@rator r40ba@rands) (let ((r40bd@rator (r30dc@chi-expr r40b9@rator r40b0@r r40b1@mr))) (cons r40bd@rator (r30d8@chi-expr* r40ba@rands r40b0@r r40b1@mr)))) r40b7@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r40b5@t)))))) (set! r4ba0@r30da@chi-application r30da@chi-application) (set! r30dc@chi-expr (lambda (r40bf@e r40c0@r r40c1@mr) (call-with-values (lambda () (r2ed5@syntax-type r40bf@e r40c0@r)) (lambda (r40cb@r40c6 r40cc@r40c8 r40cd@r40ca) (let ((r40d1@kwd r40cd@r40ca) (r40d2@value r40cc@r40c8) (r40d3@type r40cb@r40c6)) (let ((r40d7@t r40d3@type)) (if (memv r40d7@t '(core-macro)) (let ((r40d9@transformer (r30c8@core-macro-transformer r40d2@value))) (r40d9@transformer r40bf@e r40c0@r r40c1@mr)) (if (memv r40d7@t '(global)) (let ((r40db@lib (car r40d2@value))) (let ((r40dd@loc (cdr r40d2@value))) (begin ((r3122@inv-collector) r40db@lib) r40dd@loc))) (if (memv r40d7@t '(core-prim)) (let ((r40df@name r40d2@value)) (list 'primitive r40df@name)) (if (memv r40d7@t '(call)) (r30da@chi-application r40bf@e r40c0@r r40c1@mr) (if (memv r40d7@t '(lexical)) (let ((r40e1@lex (r3044@lexical-var r40d2@value))) r40e1@lex) (if (memv r40d7@t '(global-macro global-macro!)) (r30dc@chi-expr (r30d6@chi-global-macro r40d2@value r40bf@e) r40c0@r r40c1@mr) (if (memv r40d7@t '(local-macro local-macro!)) (r30dc@chi-expr (r30d4@chi-local-macro r40d2@value r40bf@e) r40c0@r r40c1@mr) (if (memv r40d7@t '(macro macro!)) (r30dc@chi-expr (r30d2@chi-macro r40d2@value r40bf@e) r40c0@r r40c1@mr) (if (memv r40d7@t '(constant)) (let ((r40e3@datum r40d2@value)) (list 'quote r40e3@datum)) (if (memv r40d7@t '(set!)) (r30de@chi-set! r40bf@e r40c0@r r40c1@mr) (if (memv r40d7@t '(begin)) (let ((r40e5@t r40bf@e)) (let ((r40e7@ls/false (r30ba@syntax-dispatch r40e5@t '(_ any . each-any)))) (if r40e7@ls/false (apply (lambda (r40e9@x r40ea@x*) (r2e18@r2d78@build-sequence '#f (r30d8@chi-expr* (cons r40e9@x r40ea@x*) r40c0@r r40c1@mr))) r40e7@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r40e5@t)))) (if (memv r40d7@t '(let-syntax letrec-syntax)) (let ((r40ed@t r40bf@e)) (let ((r40ef@ls/false (r30ba@syntax-dispatch r40ed@t '(_ #(each (any any)) any . each-any)))) (if (and r40ef@ls/false (apply (lambda (r40f1@xlhs* r40f2@xrhs* r40f3@xbody r40f4@xbody*) (if (not (r2ebb@valid-bound-ids? r40f1@xlhs*)) (r319a@syntax-violation '#f '"invalid identifiers" r40bf@e) (void))) r40ef@ls/false)) (apply (lambda (r40f9@xlhs* r40fa@xrhs* r40fb@xbody r40fc@xbody*) (let ((r4101@xlab* (map r2e3f@gen-label r40f9@xlhs*))) (let ((r4103@xrib (r2e73@make-full-rib r40f9@xlhs* r4101@xlab*))) (let ((r4105@xb* (map (lambda (r4107@x) (r2eeb@make-eval-transformer (r3114@expand-transformer (if (eq? r40d3@type 'let-syntax) r4107@x (r2e9f@add-subst r4103@xrib r4107@x)) r40c1@mr))) r40fa@xrhs*))) (r2e18@r2d78@build-sequence '#f (r30d8@chi-expr* (map (lambda (r4109@x) (r2e9f@add-subst r4103@xrib r4109@x)) (cons r40fb@xbody r40fc@xbody*)) (append (map cons r4101@xlab* r4105@xb*) r40c0@r) (append (map cons r4101@xlab* r4105@xb*) r40c1@mr))))))) r40ef@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r40ed@t)))) (if (memv r40d7@t '(displaced-lexical)) (r319a@syntax-violation '#f '"identifier out of context" r40bf@e) (if (memv r40d7@t '(syntax)) (r319a@syntax-violation '#f '"reference to pattern variable outside a syntax form" r40bf@e) (if (memv r40d7@t '(define define-syntax module import library)) (r319a@syntax-violation '#f (string-append (let ((r410b@t r40d3@type)) (if (memv r410b@t '(define)) '"a definition" (if (memv r410b@t '(define-syntax)) '"a define-syntax" (if (memv r410b@t '(module)) '"a module definition" (if (memv r410b@t '(library)) '"a library definition" (if (memv r410b@t '(import)) '"an import declaration" (if (memv r410b@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") r40bf@e) (if (memv r40d7@t '(mutable)) (r319a@syntax-violation '#f '"attempt to reference an unexportable variable" r40bf@e) (r319a@syntax-violation '#f '"invalid expression" r40bf@e))))))))))))))))))))))) (set! r4ba1@r30dc@chi-expr r30dc@chi-expr) (set! r30de@chi-set! (lambda (r410d@e r410e@r r410f@mr) (let ((r4113@t r410d@e)) (let ((r4115@ls/false (r30ba@syntax-dispatch r4113@t '(_ any any)))) (if (and r4115@ls/false (apply (lambda (r4117@x r4118@v) (r2eb3@id? r4117@x)) r4115@ls/false)) (apply (lambda (r411b@x r411c@v) (call-with-values (lambda () (r2ed5@syntax-type r411b@x r410e@r)) (lambda (r4125@r4120 r4126@r4122 r4127@r4124) (let ((r412b@kwd r4127@r4124) (r412c@value r4126@r4122) (r412d@type r4125@r4120)) (let ((r4131@t r412d@type)) (if (memv r4131@t '(lexical)) (begin (r3048@set-lexical-mutable! r412c@value '#t) (list 'set! (r3044@lexical-var r412c@value) (r30dc@chi-expr r411c@v r410e@r r410f@mr))) (if (memv r4131@t '(core-prim)) (r319a@syntax-violation '#f '"cannot modify imported core primitive" r410d@e) (if (memv r4131@t '(global)) (r319a@syntax-violation '#f '"attempt to modify imported binding" r410d@e) (if (memv r4131@t '(global-macro!)) (r30dc@chi-expr (r30d6@chi-global-macro r412c@value r410d@e) r410e@r r410f@mr) (if (memv r4131@t '(local-macro!)) (r30dc@chi-expr (r30d4@chi-local-macro r412c@value r410d@e) r410e@r r410f@mr) (if (memv r4131@t '(mutable)) (r319a@syntax-violation '#f '"attempt to assign to an unexportable variable" r410d@e) (r319a@syntax-violation '#f '"invalid syntax" r410d@e)))))))))))) r4115@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r4113@t)))))) (set! r4ba2@r30de@chi-set! r30de@chi-set!) (set! r30e0@verify-formals (lambda (r4133@fmls r4134@stx) (let ((r4137@t r4133@fmls)) (let ((r4139@ls/false (r30ba@syntax-dispatch r4137@t 'each-any))) (if r4139@ls/false (apply (lambda (r413b@x*) (if (not (r2ebb@valid-bound-ids? r413b@x*)) (r3074@invalid-fmls-error r4134@stx r4133@fmls) (void))) r4139@ls/false) (let ((r413d@t r4137@t)) (let ((r413f@ls/false (r30ba@syntax-dispatch r413d@t '#(each+ any () any)))) (if r413f@ls/false (apply (lambda (r4141@x* r4142@x) (if (not (r2ebb@valid-bound-ids? (cons r4142@x r4141@x*))) (r3074@invalid-fmls-error r4134@stx r4133@fmls) (void))) r413f@ls/false) (let ((r4145@t r413d@t)) (let ((r4147@ls/false (r30ba@syntax-dispatch r4145@t '_))) (if r4147@ls/false (apply (lambda () (r319a@syntax-violation '#f '"invalid syntax" r4134@stx)) r4147@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r4145@t)))))))))))) (set! r4ba3@r30e0@verify-formals r30e0@verify-formals) (set! r30e2@chi-lambda-clause (lambda (r4149@stx r414a@fmls r414b@body* r414c@r r414d@mr) (let ((r4153@t r414a@fmls)) (let ((r4155@ls/false (r30ba@syntax-dispatch r4153@t 'each-any))) (if r4155@ls/false (apply (lambda (r4157@x*) (begin (r30e0@verify-formals r414a@fmls r4149@stx) (let ((r4159@lex* (map r2e3b@gen-lexical r4157@x*)) (r415a@lab* (map r2e3f@gen-label r4157@x*))) (values r4159@lex* (r30f2@chi-internal (r2e9f@add-subst (r2e73@make-full-rib r4157@x* r415a@lab*) r414b@body*) (r304c@add-lexicals r415a@lab* r4159@lex* r414c@r) r414d@mr))))) r4155@ls/false) (let ((r415d@t r4153@t)) (let ((r415f@ls/false (r30ba@syntax-dispatch r415d@t '#(each+ any () any)))) (if r415f@ls/false (apply (lambda (r4161@x* r4162@x) (begin (r30e0@verify-formals r414a@fmls r4149@stx) (let ((r4165@lex* (map r2e3b@gen-lexical r4161@x*)) (r4166@lab* (map r2e3f@gen-label r4161@x*)) (r4167@lex (r2e3b@gen-lexical r4162@x)) (r4168@lab (r2e3f@gen-label r4162@x))) (values (append r4165@lex* r4167@lex) (r30f2@chi-internal (r2e9f@add-subst (r2e73@make-full-rib (cons r4162@x r4161@x*) (cons r4168@lab r4166@lab*)) r414b@body*) (r304c@add-lexicals (cons r4168@lab r4166@lab*) (cons r4167@lex r4165@lex*) r414c@r) r414d@mr))))) r415f@ls/false) (let ((r416d@t r415d@t)) (let ((r416f@ls/false (r30ba@syntax-dispatch r416d@t '_))) (if r416f@ls/false (apply (lambda () (r319a@syntax-violation '#f '"invalid syntax" r414a@fmls)) r416f@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r416d@t)))))))))))) (set! r4ba4@r30e2@chi-lambda-clause r30e2@chi-lambda-clause) (set! r30e4@chi-lambda-clause* (lambda (r4171@stx r4172@fmls* r4173@body** r4174@r r4175@mr) (if (null? r4172@fmls*) (values '() '()) (call-with-values (lambda () (r30e2@chi-lambda-clause r4171@stx (car r4172@fmls*) (car r4173@body**) r4174@r r4175@mr)) (lambda (r417f@r417c r4180@r417e) (let ((r4183@b r4180@r417e) (r4184@a r417f@r417c)) (call-with-values (lambda () (r30e4@chi-lambda-clause* r4171@stx (cdr r4172@fmls*) (cdr r4173@body**) r4174@r r4175@mr)) (lambda (r418b@r4188 r418c@r418a) (let ((r418f@b* r418c@r418a) (r4190@a* r418b@r4188)) (values (cons r4184@a r4190@a*) (cons r4183@b r418f@b*))))))))))) (set! r4ba5@r30e4@chi-lambda-clause* r30e4@chi-lambda-clause*) (set! r30e6@chi-defun (lambda (r4193@x r4194@r r4195@mr) (let ((r4199@fmls (car r4193@x)) (r419a@body* (cdr r4193@x))) (call-with-values (lambda () (r30e2@chi-lambda-clause r4199@fmls r4199@fmls r419a@body* r4194@r r4195@mr)) (lambda (r41a1@r419e r41a2@r41a0) (let ((r41a5@body r41a2@r41a0) (r41a6@fmls r41a1@r419e)) (r2e16@r2d48@build-lambda '#f r41a6@fmls r41a5@body))))))) (set! r4ba6@r30e6@chi-defun r30e6@chi-defun) (set! r30e8@chi-rhs (lambda (r41a9@rhs r41aa@r r41ab@mr) (let ((r41af@t (car r41a9@rhs))) (if (memv r41af@t '(defun)) (r30e6@chi-defun (cdr r41a9@rhs) r41aa@r r41ab@mr) (if (memv r41af@t '(expr)) (let ((r41b1@expr (cdr r41a9@rhs))) (r30dc@chi-expr r41b1@expr r41aa@r r41ab@mr)) (if (memv r41af@t '(top-expr)) (let ((r41b3@expr (cdr r41a9@rhs))) (r2e18@r2d78@build-sequence '#f (list (r30dc@chi-expr r41b3@expr r41aa@r r41ab@mr) (r2e19@r2d7a@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" r41a9@rhs))))))) (set! r4ba7@r30e8@chi-rhs r30e8@chi-rhs) (set! r30ea@expand-interaction-rhs*/init* (lambda (r41b5@lhs* r41b6@rhs* r41b7@init* r41b8@r r41b9@mr) (let r41c3@f ((r41bf@lhs* r41b5@lhs*) (r41c0@rhs* r41b6@rhs*)) (if (null? r41bf@lhs*) (map (lambda (r41c5@x) (r30dc@chi-expr r41c5@x r41b8@r r41b9@mr)) r41b7@init*) (let ((r41c7@lhs (car r41bf@lhs*)) (r41c8@rhs (car r41c0@rhs*))) (let ((r41cb@t (car r41c8@rhs))) (if (memv r41cb@t '(defun)) (let ((r41cd@rhs (r30e6@chi-defun (cdr r41c8@rhs) r41b8@r r41b9@mr))) (cons (list 'set! r41c7@lhs r41cd@rhs) (r41c3@f (cdr r41bf@lhs*) (cdr r41c0@rhs*)))) (if (memv r41cb@t '(expr)) (let ((r41cf@rhs (r30dc@chi-expr (cdr r41c8@rhs) r41b8@r r41b9@mr))) (cons (list 'set! r41c7@lhs r41cf@rhs) (r41c3@f (cdr r41bf@lhs*) (cdr r41c0@rhs*)))) (if (memv r41cb@t '(top-expr)) (let ((r41d1@e (r30dc@chi-expr (cdr r41c8@rhs) r41b8@r r41b9@mr))) (cons r41d1@e (r41c3@f (cdr r41bf@lhs*) (cdr r41c0@rhs*)))) (error 'expand-interaction '"invallid" r41c8@rhs)))))))))) (set! r4ba8@r30ea@expand-interaction-rhs*/init* r30ea@expand-interaction-rhs*/init*) (set! r30ec@chi-rhs* (lambda (r41d3@rhs* r41d4@r r41d5@mr) (let r41db@f ((r41d9@ls r41d3@rhs*)) (if (null? r41d9@ls) '() (let ((r41dd@a (r30e8@chi-rhs (car r41d9@ls) r41d4@r r41d5@mr))) (cons r41dd@a (r41db@f (cdr r41d9@ls)))))))) (set! r4ba9@r30ec@chi-rhs* r30ec@chi-rhs*) (set! r30ee@find-bound=? (lambda (r41df@x r41e0@lhs* r41e1@rhs*) (if (null? r41e0@lhs*) '#f (if (r2eb7@bound-id=? r41df@x (car r41e0@lhs*)) (car r41e1@rhs*) (r30ee@find-bound=? r41df@x (cdr r41e0@lhs*) (cdr r41e1@rhs*)))))) (set! r4baa@r30ee@find-bound=? r30ee@find-bound=?) (set! r30f0@find-dups (lambda (r41e5@ls) (let r41eb@f ((r41e7@ls r41e5@ls) (r41e8@dups '())) (if (null? r41e7@ls) r41e8@dups (let ((r41ed@t (r30ee@find-bound=? (car r41e7@ls) (cdr r41e7@ls) (cdr r41e7@ls)))) (if r41ed@t ((lambda (r41ef@x) (r41eb@f (cdr r41e7@ls) (cons (list (car r41e7@ls) r41ef@x) r41e8@dups))) r41ed@t) (r41eb@f (cdr r41e7@ls) r41e8@dups))))))) (set! r4bab@r30f0@find-dups r30f0@find-dups) (set! r30f2@chi-internal (lambda (r41f1@e* r41f2@r r41f3@mr) (let ((r41f7@rib (r2e67@make-empty-rib))) (call-with-values (lambda () (r3112@chi-body* (map (lambda (r4209@x) (r2e9f@add-subst r41f7@rib r4209@x)) (r2eb1@syntax->list r41f1@e*)) r41f2@r r41f3@mr '() '() '() '() '() r41f7@rib '#f)) (lambda (r420b@r41fa r420c@r41fc r420d@r41fe r420e@r4200 r420f@r4202 r4210@r4204 r4211@r4206 r4212@r4208) (let ((r421b@_exp* r4212@r4208) (r421c@kwd* r4211@r4206) (r421d@mod** r4210@r4204) (r421e@rhs* r420f@r4202) (r421f@lex* r420e@r4200) (r4220@mr r420d@r41fe) (r4221@r r420c@r41fc) (r4222@e* r420b@r41fa)) (begin (if (null? r4222@e*) (r319a@syntax-violation '#f '"no expression in body" r4222@e*) (void)) (let ((r422b@init* (r30d8@chi-expr* (append (apply append (reverse r421d@mod**)) r4222@e*) r4221@r r4220@mr))) (let ((r422d@rhs* (r30ec@chi-rhs* r421e@rhs* r4221@r r4220@mr))) (r2e1d@r2d82@build-letrec* '#f (reverse r421f@lex*) (reverse r422d@rhs*) (r2e18@r2d78@build-sequence '#f r422b@init*))))))))))) (set! r4bac@r30f2@chi-internal r30f2@chi-internal) (set! r30f4@parse-module (lambda (r422f@e) (let ((r4231@t r422f@e)) (let ((r4233@ls/false (r30ba@syntax-dispatch r4231@t '(_ each-any . each-any)))) (if r4233@ls/false (apply (lambda (r4235@export* r4236@b*) (begin (if (not (for-all r2eb3@id? r4235@export*)) (r319a@syntax-violation '#f '"module exports must be identifiers" r422f@e) (void)) (values '#f (list->vector r4235@export*) r4236@b*))) r4233@ls/false) (let ((r4239@t r4231@t)) (let ((r423b@ls/false (r30ba@syntax-dispatch r4239@t '(_ any each-any . each-any)))) (if r423b@ls/false (apply (lambda (r423d@name r423e@export* r423f@b*) (begin (if (not (r2eb3@id? r423d@name)) (r319a@syntax-violation '#f '"module name must be an identifier" r422f@e) (void)) (if (not (for-all r2eb3@id? r423e@export*)) (r319a@syntax-violation '#f '"module exports must be identifiers" r422f@e) (void)) (values r423d@name (list->vector r423e@export*) r423f@b*))) r423b@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r4239@t))))))))) (set! r4bad@r30f4@parse-module r30f4@parse-module) (set! r30fe@module-interface? (lambda (r4243@x) (and (simple-struct? r4243@x) (eq? (simple-struct-name r4243@x) 'module-interface)))) (set! r4bae@r30fe@module-interface? r30fe@module-interface?) (set! r3100@module-interface-first-mark (lambda (r4245@x) (simple-struct-ref r4245@x '0))) (set! r4baf@r3100@module-interface-first-mark r3100@module-interface-first-mark) (set! r3102@set-module-interface-first-mark! (lambda (r4247@x r4248@val) (simple-struct-set! r4247@x '0 r4248@val))) (set! r4bb0@r3102@set-module-interface-first-mark! r3102@set-module-interface-first-mark!) (set! r3104@module-interface-exp-id-vec (lambda (r424b@x) (simple-struct-ref r424b@x '1))) (set! r4bb1@r3104@module-interface-exp-id-vec r3104@module-interface-exp-id-vec) (set! r3106@set-module-interface-exp-id-vec! (lambda (r424d@x r424e@val) (simple-struct-set! r424d@x '1 r424e@val))) (set! r4bb2@r3106@set-module-interface-exp-id-vec! r3106@set-module-interface-exp-id-vec!) (set! r3108@module-interface-exp-lab-vec (lambda (r4251@x) (simple-struct-ref r4251@x '2))) (set! r4bb3@r3108@module-interface-exp-lab-vec r3108@module-interface-exp-lab-vec) (set! r310a@set-module-interface-exp-lab-vec! (lambda (r4253@x r4254@val) (simple-struct-set! r4253@x '2 r4254@val))) (set! r4bb4@r310a@set-module-interface-exp-lab-vec! r310a@set-module-interface-exp-lab-vec!) (set! r310c@dummy '3) (set! r4bb5@r310c@dummy r310c@dummy) (set! r310e@module-interface-exp-id* (lambda (r4257@iface r4258@id) (letrec* ((r425c@diff-marks (lambda (r4263@ls r4264@x) (begin (if (null? r4263@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((r4267@a (car r4263@ls))) (if (eq? r4267@a r4264@x) '() (cons r4267@a (r425c@diff-marks (cdr r4263@ls) r4264@x)))))))) (let ((r425d@diff (r425c@diff-marks (r2e85@stx-mark* r4258@id) (r3100@module-interface-first-mark r4257@iface))) (r425e@id-vec (r3104@module-interface-exp-id-vec r4257@iface))) (if (null? r425d@diff) r425e@id-vec (vector-map (lambda (r4261@x) (make-simple-struct 'stx '5 (list (r2e81@stx-expr r4261@x) (append r425d@diff (r2e85@stx-mark* r4261@x)) '() '()))) r425e@id-vec)))))) (set! r4bb6@r310e@module-interface-exp-id* r310e@module-interface-exp-id*) (set! r3110@chi-internal-module (lambda (r4269@e r426a@r r426b@mr r426c@lex* r426d@rhs* r426e@mod** r426f@kwd*) (call-with-values (lambda () (r30f4@parse-module r4269@e)) (lambda (r427d@r4278 r427e@r427a r427f@r427c) (let ((r4283@e* r427f@r427c) (r4284@exp-id* r427e@r427a) (r4285@name r427d@r4278)) (let ((r4289@rib (r2e67@make-empty-rib))) (let ((r428b@e* (map (lambda (r428d@x) (r2e9f@add-subst r4289@rib r428d@x)) (r2eb1@syntax->list r4283@e*)))) (call-with-values (lambda () (r3112@chi-body* r428b@e* r426a@r r426b@mr r426c@lex* r426d@rhs* r426e@mod** r426f@kwd* '() r4289@rib '#f)) (lambda (r429f@r4290 r42a0@r4292 r42a1@r4294 r42a2@r4296 r42a3@r4298 r42a4@r429a r42a5@r429c r42a6@r429e) (let ((r42af@_exp* r42a6@r429e) (r42b0@kwd* r42a5@r429c) (r42b1@mod** r42a4@r429a) (r42b2@rhs* r42a3@r4298) (r42b3@lex* r42a2@r4296) (r42b4@mr r42a1@r4294) (r42b5@r r42a0@r4292) (r42b6@e* r429f@r4290)) (let ((r42bf@exp-lab* (vector-map (lambda (r42c3@x) (or (r2ec9@id->label (make-simple-struct 'stx '5 (list (r2eb5@id->sym r42c3@x) (r2e85@stx-mark* r42c3@x) (list r4289@rib) '()))) (r319a@syntax-violation '#f '"cannot find module export" r42c3@x))) r4284@exp-id*)) (r42c0@mod** (cons r42b6@e* r42b1@mod**))) (if (not r4285@name) (values r42b3@lex* r42b2@rhs* r4284@exp-id* r42bf@exp-lab* r42b5@r r42b4@mr r42c0@mod** r42b0@kwd*) (let ((r42c5@lab (r2e3f@gen-label 'module)) (r42c6@iface (make-simple-struct 'module-interface '4 (list (car (r2e85@stx-mark* r4285@name)) (vector-map (lambda (r42c9@x) (make-simple-struct 'stx '5 (list (r2e81@stx-expr r42c9@x) (r2e85@stx-mark* r42c9@x) '() '()))) r4284@exp-id*) r42bf@exp-lab*)))) (values r42b3@lex* r42b2@rhs* (vector r4285@name) (vector r42c5@lab) (cons (cons r42c5@lab (cons '$module r42c6@iface)) r42b5@r) (cons (cons r42c5@lab (cons '$module r42c6@iface)) r42b4@mr) r42c0@mod** r42b0@kwd*)))))))))))))) (set! r4bb7@r3110@chi-internal-module r3110@chi-internal-module) (set! r3112@chi-body* (lambda (r42cb@e* r42cc@r r42cd@mr r42ce@lex* r42cf@rhs* r42d0@mod** r42d1@kwd* r42d2@exp* r42d3@rib r42d4@top?) (if (null? r42cb@e*) (values r42cb@e* r42cc@r r42cd@mr r42ce@lex* r42cf@rhs* r42d0@mod** r42d1@kwd* r42d2@exp*) (let ((r42df@e (car r42cb@e*))) (call-with-values (lambda () (r2ed5@syntax-type r42df@e r42cc@r)) (lambda (r42e7@r42e2 r42e8@r42e4 r42e9@r42e6) (let ((r42ed@kwd r42e9@r42e6) (r42ee@value r42e8@r42e4) (r42ef@type r42e7@r42e2)) (let ((r42f3@kwd* (if (r2eb3@id? r42ed@kwd) (cons r42ed@kwd r42d1@kwd*) r42d1@kwd*))) (let ((r42f5@t r42ef@type)) (if (memv r42f5@t '(define)) (call-with-values (lambda () (r303c@parse-define r42df@e)) (lambda (r42fb@r42f8 r42fc@r42fa) (let ((r42ff@rhs r42fc@r42fa) (r4300@id r42fb@r42f8)) (begin (if (r2ebf@bound-id-member? r4300@id r42f3@kwd*) (r319a@syntax-violation '#f '"cannot redefine keyword" r42df@e) (void)) (call-with-values (lambda () (r2e43@gen-define-label+loc r4300@id r42d3@rib)) (lambda (r4307@r4304 r4308@r4306) (let ((r430b@lex r4308@r4306) (r430c@lab r4307@r4304)) (begin (r2e69@extend-rib! r42d3@rib r4300@id r430c@lab) (r3112@chi-body* (cdr r42cb@e*) (r304a@add-lexical r430c@lab r430b@lex r42cc@r) r42cd@mr (cons r430b@lex r42ce@lex*) (cons r42ff@rhs r42cf@rhs*) r42d0@mod** r42f3@kwd* r42d2@exp* r42d3@rib r42d4@top?))))))))) (if (memv r42f5@t '(define-syntax)) (call-with-values (lambda () (r303e@parse-define-syntax r42df@e)) (lambda (r4313@r4310 r4314@r4312) (let ((r4317@rhs r4314@r4312) (r4318@id r4313@r4310)) (begin (if (r2ebf@bound-id-member? r4318@id r42f3@kwd*) (r319a@syntax-violation '#f '"cannot redefine keyword" r42df@e) (void)) (let ((r431b@lab (r2e45@gen-define-label r4318@id r42d3@rib)) (r431c@expanded-rhs (r3114@expand-transformer r4317@rhs r42cd@mr))) (begin (r2e69@extend-rib! r42d3@rib r4318@id r431b@lab) (let ((r431f@b (r2eeb@make-eval-transformer r431c@expanded-rhs))) (r3112@chi-body* (cdr r42cb@e*) (cons (cons r431b@lab r431f@b) r42cc@r) (cons (cons r431b@lab r431f@b) r42cd@mr) r42ce@lex* r42cf@rhs* r42d0@mod** r42f3@kwd* r42d2@exp* r42d3@rib r42d4@top?)))))))) (if (memv r42f5@t '(let-syntax letrec-syntax)) (let ((r4321@t r42df@e)) (let ((r4323@ls/false (r30ba@syntax-dispatch r4321@t '(_ #(each (any any)) . each-any)))) (if (and r4323@ls/false (apply (lambda (r4325@xlhs* r4326@xrhs* r4327@xbody*) (if (not (r2ebb@valid-bound-ids? r4325@xlhs*)) (r319a@syntax-violation '#f '"invalid identifiers" r42df@e) (void))) r4323@ls/false)) (apply (lambda (r432b@xlhs* r432c@xrhs* r432d@xbody*) (let ((r4331@xlab* (map r2e3f@gen-label r432b@xlhs*))) (let ((r4333@xrib (r2e73@make-full-rib r432b@xlhs* r4331@xlab*))) (let ((r4335@xb* (map (lambda (r4337@x) (r2eeb@make-eval-transformer (r3114@expand-transformer (if (eq? r42ef@type 'let-syntax) r4337@x (r2e9f@add-subst r4333@xrib r4337@x)) r42cd@mr))) r432c@xrhs*))) (r3112@chi-body* (append (map (lambda (r4339@x) (r2e9f@add-subst r4333@xrib r4339@x)) r432d@xbody*) (cdr r42cb@e*)) (append (map cons r4331@xlab* r4335@xb*) r42cc@r) (append (map cons r4331@xlab* r4335@xb*) r42cd@mr) r42ce@lex* r42cf@rhs* r42d0@mod** r42f3@kwd* r42d2@exp* r42d3@rib r42d4@top?))))) r4323@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r4321@t)))) (if (memv r42f5@t '(begin)) (let ((r433b@t r42df@e)) (let ((r433d@ls/false (r30ba@syntax-dispatch r433b@t '(_ . each-any)))) (if r433d@ls/false (apply (lambda (r433f@x*) (r3112@chi-body* (append r433f@x* (cdr r42cb@e*)) r42cc@r r42cd@mr r42ce@lex* r42cf@rhs* r42d0@mod** r42f3@kwd* r42d2@exp* r42d3@rib r42d4@top?)) r433d@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r433b@t)))) (if (memv r42f5@t '(global-macro global-macro!)) (r3112@chi-body* (cons (r2e9f@add-subst r42d3@rib (r30d6@chi-global-macro r42ee@value r42df@e)) (cdr r42cb@e*)) r42cc@r r42cd@mr r42ce@lex* r42cf@rhs* r42d0@mod** r42f3@kwd* r42d2@exp* r42d3@rib r42d4@top?) (if (memv r42f5@t '(local-macro local-macro!)) (r3112@chi-body* (cons (r2e9f@add-subst r42d3@rib (r30d4@chi-local-macro r42ee@value r42df@e)) (cdr r42cb@e*)) r42cc@r r42cd@mr r42ce@lex* r42cf@rhs* r42d0@mod** r42f3@kwd* r42d2@exp* r42d3@rib r42d4@top?) (if (memv r42f5@t '(macro macro!)) (r3112@chi-body* (cons (r2e9f@add-subst r42d3@rib (r30d2@chi-macro r42ee@value r42df@e)) (cdr r42cb@e*)) r42cc@r r42cd@mr r42ce@lex* r42cf@rhs* r42d0@mod** r42f3@kwd* r42d2@exp* r42d3@rib r42d4@top?) (if (memv r42f5@t '(module)) (call-with-values (lambda () (r3110@chi-internal-module r42df@e r42cc@r r42cd@mr r42ce@lex* r42cf@rhs* r42d0@mod** r42f3@kwd*)) (lambda (r4351@r4342 r4352@r4344 r4353@r4346 r4354@r4348 r4355@r434a r4356@r434c r4357@r434e r4358@r4350) (let ((r4361@kwd* r4358@r4350) (r4362@mod** r4357@r434e) (r4363@mr r4356@r434c) (r4364@r r4355@r434a) (r4365@m-exp-lab* r4354@r4348) (r4366@m-exp-id* r4353@r4346) (r4367@rhs* r4352@r4344) (r4368@lex* r4351@r4342)) (begin (vector-for-each (lambda (r4371@id r4372@lab) (r2e69@extend-rib! r42d3@rib r4371@id r4372@lab)) r4366@m-exp-id* r4365@m-exp-lab*) (r3112@chi-body* (cdr r42cb@e*) r4364@r r4363@mr r4368@lex* r4367@rhs* r4362@mod** r4361@kwd* r42d2@exp* r42d3@rib r42d4@top?))))) (if (memv r42f5@t '(library)) (begin (r317c@library-expander (r2ec7@stx->datum r42df@e)) (r3112@chi-body* (cdr r42cb@e*) r42cc@r r42cd@mr r42ce@lex* r42cf@rhs* r42d0@mod** r42f3@kwd* r42d2@exp* r42d3@rib r42d4@top?)) (if (memv r42f5@t '(export)) (let ((r4375@t r42df@e)) (let ((r4377@ls/false (r30ba@syntax-dispatch r4375@t '(_ . each-any)))) (if r4377@ls/false (apply (lambda (r4379@exp-decl*) (r3112@chi-body* (cdr r42cb@e*) r42cc@r r42cd@mr r42ce@lex* r42cf@rhs* r42d0@mod** r42f3@kwd* (append r4379@exp-decl* r42d2@exp*) r42d3@rib r42d4@top?)) r4377@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r4375@t)))) (if (memv r42f5@t '(import)) (letrec* ((r437c@module-import? (lambda (r43cf@e) (let ((r43d1@t r43cf@e)) (let ((r43d3@ls/false (r30ba@syntax-dispatch r43d1@t '(_ any)))) (if (and r43d3@ls/false (apply (lambda (r43d5@id) (r2eb3@id? r43d5@id)) r43d3@ls/false)) (apply (lambda (r43d7@id) '#t) r43d3@ls/false) (let ((r43d9@t r43d1@t)) (let ((r43db@ls/false (r30ba@syntax-dispatch r43d9@t '(_ . each-any)))) (if r43db@ls/false (apply (lambda (r43dd@imp*) '#f) r43db@ls/false) (let ((r43df@t r43d9@t)) (let ((r43e1@ls/false (r30ba@syntax-dispatch r43df@t '_))) (if r43e1@ls/false (apply (lambda () (r319a@syntax-violation '#f '"malformed import form" r43cf@e)) r43e1@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r43df@t)))))))))))) (r437e@module-import (lambda (r43ad@e r43ae@r) (let ((r43b1@t r43ad@e)) (let ((r43b3@ls/false (r30ba@syntax-dispatch r43b1@t '(_ any)))) (if (and r43b3@ls/false (apply (lambda (r43b5@id) (r2eb3@id? r43b5@id)) r43b3@ls/false)) (apply (lambda (r43b7@id) (call-with-values (lambda () (r2ed5@syntax-type r43b7@id r43ae@r)) (lambda (r43bf@r43ba r43c0@r43bc r43c1@r43be) (let ((r43c5@kwd r43c1@r43be) (r43c6@value r43c0@r43bc) (r43c7@type r43bf@r43ba)) (let ((r43cb@t r43c7@type)) (if (memv r43cb@t '($module)) (let ((r43cd@iface r43c6@value)) (values (r310e@module-interface-exp-id* r43cd@iface r43b7@id) (r3108@module-interface-exp-lab-vec r43cd@iface))) (r319a@syntax-violation '#f '"invalid import" r43ad@e))))))) r43b3@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r43b1@t)))))) (r4380@library-import (lambda (r4391@e) (let ((r4393@t r4391@e)) (let ((r4395@ls/false (r30ba@syntax-dispatch r4393@t '(any . each-any)))) (if r4395@ls/false (apply (lambda (r4397@ctxt r4398@imp*) (call-with-values (lambda () (r311c@parse-import-spec* (r31a0@syntax->datum r4398@imp*))) (lambda (r439f@r439c r43a0@r439e) (let ((r43a3@subst-labels r43a0@r439e) (r43a4@subst-names r439f@r439c)) (values (vector-map (lambda (r43a7@name) (r2e93@datum->stx r4397@ctxt r43a7@name)) r43a4@subst-names) r43a3@subst-labels))))) r4395@ls/false) (let ((r43a9@t r4393@t)) (let ((r43ab@ls/false (r30ba@syntax-dispatch r43a9@t '_))) (if r43ab@ls/false (apply (lambda () (r319a@syntax-violation '#f '"invalid import form" r4391@e)) r43ab@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r43a9@t)))))))))) (begin (call-with-values (lambda () (if (r437c@module-import? r42df@e) (r437e@module-import r42df@e r42cc@r) (r4380@library-import r42df@e))) (lambda (r4385@r4382 r4386@r4384) (let ((r4389@lab* r4386@r4384) (r438a@id* r4385@r4382)) (vector-for-each (lambda (r438d@id r438e@lab) (r2e69@extend-rib! r42d3@rib r438d@id r438e@lab)) r438a@id* r4389@lab*)))) (r3112@chi-body* (cdr r42cb@e*) r42cc@r r42cd@mr r42ce@lex* r42cf@rhs* r42d0@mod** r42f3@kwd* r42d2@exp* r42d3@rib r42d4@top?))) (if r42d4@top? (r3112@chi-body* (cdr r42cb@e*) r42cc@r r42cd@mr (cons (r2e3b@gen-lexical 'dummy) r42ce@lex*) (cons (cons 'top-expr r42df@e) r42cf@rhs*) r42d0@mod** r42f3@kwd* r42d2@exp* r42d3@rib r42d4@top?) (values r42cb@e* r42cc@r r42cd@mr r42ce@lex* r42cf@rhs* r42d0@mod** r42f3@kwd* r42d2@exp*)))))))))))))))))))))) (set! r4bb8@r3112@chi-body* r3112@chi-body*) (set! r3114@expand-transformer (lambda (r43e3@expr r43e4@r) (let ((r43e7@rtc (r3120@make-collector))) (let ((r43e9@expanded-rhs (let ((r43f3@r43ec r3122@inv-collector) (r43f4@r43ee r3124@vis-collector) (r43f5@r43f0 r43e7@rtc) (r43f6@r43f2 (lambda (r43fb@x) (values)))) (let ((r43fd@swap (lambda () (begin (let ((r43ff@t (r43f3@r43ec))) (begin (r43f3@r43ec r43f5@r43f0) (set! r43f5@r43f0 r43ff@t))) (let ((r4401@t (r43f4@r43ee))) (begin (r43f4@r43ee r43f6@r43f2) (set! r43f6@r43f2 r4401@t))))))) (dynamic-wind r43fd@swap (lambda () (r30dc@chi-expr r43e3@expr r43e4@r r43e4@r)) r43fd@swap))))) (begin (for-each (let ((r4403@mark-visit (r3124@vis-collector))) (lambda (r4405@x) (begin (r2ccf@r2b1d@invoke-library r4405@x) (r4403@mark-visit r4405@x)))) (r43e7@rtc)) r43e9@expanded-rhs))))) (set! r4bb9@r3114@expand-transformer r3114@expand-transformer) (set! r3116@parse-exports (lambda (r4407@exp*) (let r440f@f ((r4409@exp* r4407@exp*) (r440a@int* '()) (r440b@ext* '())) (if (null? r4409@exp*) (begin (if (not (r2ebb@valid-bound-ids? r440b@ext*)) (r319a@syntax-violation 'export '"invalid exports" (r30f0@find-dups r440b@ext*)) (void)) (values (map r31a0@syntax->datum r440b@ext*) r440a@int*)) (let ((r4411@t (car r4409@exp*))) (let ((r4413@ls/false (r30ba@syntax-dispatch r4411@t '(any . #(each (any any)))))) (if r4413@ls/false (apply (lambda (r4415@rename r4416@i* r4417@e*) (begin (if (not (and (eq? (r31a0@syntax->datum r4415@rename) 'rename) (for-all r2eb3@id? r4416@i*) (for-all r2eb3@id? r4417@e*))) (r319a@syntax-violation 'export '"invalid export specifier" (car r4409@exp*)) (void)) (r440f@f (cdr r4409@exp*) (append r4416@i* r440a@int*) (append r4417@e* r440b@ext*)))) r4413@ls/false) (let ((r441b@t r4411@t)) (let ((r441d@ls/false (r30ba@syntax-dispatch r441b@t 'any))) (if r441d@ls/false (apply (lambda (r441f@ie) (begin (if (not (r2eb3@id? r441f@ie)) (r319a@syntax-violation 'export '"invalid export" r441f@ie) (void)) (r440f@f (cdr r4409@exp*) (cons r441f@ie r440a@int*) (cons r441f@ie r440b@ext*)))) r441d@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r441b@t))))))))))) (set! r4bba@r3116@parse-exports r3116@parse-exports) (set! r3118@parse-library-name (lambda (r4421@spec) (letrec* ((r4424@parse (lambda (r4431@x) (let ((r4433@t r4431@x)) (let ((r4435@ls/false (r30ba@syntax-dispatch r4433@t '(each-any)))) (if (and r4435@ls/false (apply (lambda (r4437@v*) (for-all (lambda (r4439@x) (let ((r443b@x (r31a0@syntax->datum r4439@x))) (and (integer? r443b@x) (exact? r443b@x)))) r4437@v*)) r4435@ls/false)) (apply (lambda (r443d@v*) (values '() (map r31a0@syntax->datum r443d@v*))) r4435@ls/false) (let ((r443f@t r4433@t)) (let ((r4441@ls/false (r30ba@syntax-dispatch r443f@t '(any . any)))) (if (and r4441@ls/false (apply (lambda (r4443@x r4444@rest) (symbol? (r31a0@syntax->datum r4443@x))) r4441@ls/false)) (apply (lambda (r4447@x r4448@rest) (call-with-values (lambda () (r4424@parse r4448@rest)) (lambda (r444f@r444c r4450@r444e) (let ((r4453@v* r4450@r444e) (r4454@x* r444f@r444c)) (values (cons (r31a0@syntax->datum r4447@x) r4454@x*) r4453@v*))))) r4441@ls/false) (let ((r4457@t r443f@t)) (let ((r4459@ls/false (r30ba@syntax-dispatch r4457@t '()))) (if r4459@ls/false (apply (lambda () (values '() '())) r4459@ls/false) (let ((r445b@t r4457@t)) (let ((r445d@ls/false (r30ba@syntax-dispatch r445b@t '_))) (if r445d@ls/false (apply (lambda () (r319a@syntax-violation '#f '"invalid library name" r4421@spec)) r445d@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r445b@t)))))))))))))))) (call-with-values (lambda () (r4424@parse r4421@spec)) (lambda (r4429@r4426 r442a@r4428) (let ((r442d@ver* r442a@r4428) (r442e@name* r4429@r4426)) (begin (if (null? r442e@name*) (r319a@syntax-violation '#f '"empty library name" r4421@spec) (void)) (values r442e@name* r442d@ver*)))))))) (set! r4bbb@r3118@parse-library-name r3118@parse-library-name) (set! r311a@parse-library (lambda (r445f@e) (let ((r4461@t r445f@e)) (let ((r4463@ls/false (r30ba@syntax-dispatch r4461@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and r4463@ls/false (apply (lambda (r4465@library r4466@name* r4467@export r4468@exp* r4469@import r446a@imp* r446b@b*) (and (eq? (r31a0@syntax->datum r4467@export) 'export) (eq? (r31a0@syntax->datum r4469@import) 'import) (eq? (r31a0@syntax->datum r4465@library) 'library))) r4463@ls/false)) (apply (lambda (r4473@library r4474@name* r4475@export r4476@exp* r4477@import r4478@imp* r4479@b*) (values r4474@name* r4476@exp* r4478@imp* r4479@b*)) r4463@ls/false) (let ((r4481@t r4461@t)) (let ((r4483@ls/false (r30ba@syntax-dispatch r4481@t '_))) (if r4483@ls/false (apply (lambda () (r319a@syntax-violation '#f '"malformed library" r445f@e)) r4483@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r4481@t))))))))) (set! r4bbc@r311a@parse-library r311a@parse-library) (set! r311c@parse-import-spec* (letrec* ((r4486@idsyn? (lambda (r468f@x) (symbol? (r31a0@syntax->datum r468f@x)))) (r4488@dup-error (lambda (r468d@name) (r319a@syntax-violation 'import '"two imports with different bindings" r468d@name))) (r448a@merge-substs (lambda (r467b@s r467c@subst) (letrec* ((r4680@insert-to-subst (lambda (r4681@a r4682@subst) (let ((r4685@name (car r4681@a)) (r4686@label (cdr r4681@a))) (let ((r4689@t (assq r4685@name r4682@subst))) (if r4689@t ((lambda (r468b@x) (if (eq? (cdr r468b@x) r4686@label) r4682@subst (r4488@dup-error r4685@name))) r4689@t) (cons r4681@a r4682@subst))))))) (if (null? r467b@s) r467c@subst (r4680@insert-to-subst (car r467b@s) (r448a@merge-substs (cdr r467b@s) r467c@subst)))))) (r448c@exclude* (lambda (r464b@sym* r464c@subst) (letrec* ((r4650@exclude (lambda (r4669@sym r466a@subst) (if (null? r466a@subst) (r319a@syntax-violation 'import '"cannot rename unbound identifier" r4669@sym) (if (eq? r4669@sym (caar r466a@subst)) (values (cdar r466a@subst) (cdr r466a@subst)) (let ((r466d@a (car r466a@subst))) (call-with-values (lambda () (r4650@exclude r4669@sym (cdr r466a@subst))) (lambda (r4673@r4670 r4674@r4672) (let ((r4677@subst r4674@r4672) (r4678@old r4673@r4670)) (values r4678@old (cons r466d@a r4677@subst))))))))))) (if (null? r464b@sym*) (values '() r464c@subst) (call-with-values (lambda () (r4650@exclude (car r464b@sym*) r464c@subst)) (lambda (r4655@r4652 r4656@r4654) (let ((r4659@subst r4656@r4654) (r465a@old r4655@r4652)) (call-with-values (lambda () (r448c@exclude* (cdr r464b@sym*) r4659@subst)) (lambda (r4661@r465e r4662@r4660) (let ((r4665@subst r4662@r4660) (r4666@old* r4661@r465e)) (values (cons r465a@old r4666@old*) r4665@subst))))))))))) (r448e@find* (lambda (r4643@sym* r4644@subst) (map (lambda (r4647@x) (let ((r4649@t (assq r4647@x r4644@subst))) (if r4649@t (cdr r4649@t) (r319a@syntax-violation 'import '"cannot find identifier" r4647@x)))) r4643@sym*))) (r4490@rem* (lambda (r463b@sym* r463c@subst) (let r4641@f ((r463f@subst r463c@subst)) (if (null? r463f@subst) '() (if (memq (caar r463f@subst) r463b@sym*) (r4641@f (cdr r463f@subst)) (cons (car r463f@subst) (r4641@f (cdr r463f@subst)))))))) (r4492@remove-dups (lambda (r4639@ls) (if (null? r4639@ls) '() (if (memq (car r4639@ls) (cdr r4639@ls)) (r4492@remove-dups (cdr r4639@ls)) (cons (car r4639@ls) (r4492@remove-dups (cdr r4639@ls))))))) (r4494@parse-library-name (lambda (r4551@spec) (letrec* ((r4554@subversion? (lambda (r4635@x) (let ((r4637@x (r31a0@syntax->datum r4635@x))) (and (integer? r4637@x) (exact? r4637@x) (>= r4637@x '0))))) (r4556@subversion-pred (lambda (r45d5@x*) (let ((r45d7@t r45d5@x*)) (let ((r45d9@ls/false (r30ba@syntax-dispatch r45d7@t 'any))) (if (and r45d9@ls/false (apply (lambda (r45db@n) (r4554@subversion? r45db@n)) r45d9@ls/false)) (apply (lambda (r45dd@n) (lambda (r45df@x) (= r45df@x (r31a0@syntax->datum r45dd@n)))) r45d9@ls/false) (let ((r45e1@t r45d7@t)) (let ((r45e3@ls/false (r30ba@syntax-dispatch r45e1@t '(any . each-any)))) (if (and r45e3@ls/false (apply (lambda (r45e5@p? r45e6@sub*) (eq? (r31a0@syntax->datum r45e5@p?) 'and)) r45e3@ls/false)) (apply (lambda (r45e9@p? r45ea@sub*) (let ((r45ed@p* (map r4556@subversion-pred r45ea@sub*))) (lambda (r45ef@x) (for-all (lambda (r45f1@p) (r45f1@p r45ef@x)) r45ed@p*)))) r45e3@ls/false) (let ((r45f3@t r45e1@t)) (let ((r45f5@ls/false (r30ba@syntax-dispatch r45f3@t '(any . each-any)))) (if (and r45f5@ls/false (apply (lambda (r45f7@p? r45f8@sub*) (eq? (r31a0@syntax->datum r45f7@p?) 'or)) r45f5@ls/false)) (apply (lambda (r45fb@p? r45fc@sub*) (let ((r45ff@p* (map r4556@subversion-pred r45fc@sub*))) (lambda (r4601@x) (exists (lambda (r4603@p) (r4603@p r4601@x)) r45ff@p*)))) r45f5@ls/false) (let ((r4605@t r45f3@t)) (let ((r4607@ls/false (r30ba@syntax-dispatch r4605@t '(any any)))) (if (and r4607@ls/false (apply (lambda (r4609@p? r460a@sub) (eq? (r31a0@syntax->datum r4609@p?) 'not)) r4607@ls/false)) (apply (lambda (r460d@p? r460e@sub) (let ((r4611@p (r4556@subversion-pred r460e@sub))) (lambda (r4613@x) (not (r4611@p r4613@x))))) r4607@ls/false) (let ((r4615@t r4605@t)) (let ((r4617@ls/false (r30ba@syntax-dispatch r4615@t '(any any)))) (if (and r4617@ls/false (apply (lambda (r4619@p? r461a@n) (and (eq? (r31a0@syntax->datum r4619@p?) '<=) (r4554@subversion? r461a@n))) r4617@ls/false)) (apply (lambda (r461d@p? r461e@n) (lambda (r4621@x) (<= r4621@x (r31a0@syntax->datum r461e@n)))) r4617@ls/false) (let ((r4623@t r4615@t)) (let ((r4625@ls/false (r30ba@syntax-dispatch r4623@t '(any any)))) (if (and r4625@ls/false (apply (lambda (r4627@p? r4628@n) (and (eq? (r31a0@syntax->datum r4627@p?) '>=) (r4554@subversion? r4628@n))) r4625@ls/false)) (apply (lambda (r462b@p? r462c@n) (lambda (r462f@x) (>= r462f@x (r31a0@syntax->datum r462c@n)))) r4625@ls/false) (let ((r4631@t r4623@t)) (let ((r4633@ls/false (r30ba@syntax-dispatch r4631@t '_))) (if r4633@ls/false (apply (lambda () (r319a@syntax-violation 'import '"invalid sub-version spec" r4551@spec r45d5@x*)) r4633@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r4631@t)))))))))))))))))))))))) (r4558@version-pred (lambda (r4585@x*) (let ((r4587@t r4585@x*)) (let ((r4589@ls/false (r30ba@syntax-dispatch r4587@t '()))) (if r4589@ls/false (apply (lambda () (lambda (r458b@x) '#t)) r4589@ls/false) (let ((r458d@t r4587@t)) (let ((r458f@ls/false (r30ba@syntax-dispatch r458d@t '(any . each-any)))) (if (and r458f@ls/false (apply (lambda (r4591@c r4592@ver*) (eq? (r31a0@syntax->datum r4591@c) 'and)) r458f@ls/false)) (apply (lambda (r4595@c r4596@ver*) (let ((r4599@p* (map r4558@version-pred r4596@ver*))) (lambda (r459b@x) (for-all (lambda (r459d@p) (r459d@p r459b@x)) r4599@p*)))) r458f@ls/false) (let ((r459f@t r458d@t)) (let ((r45a1@ls/false (r30ba@syntax-dispatch r459f@t '(any . each-any)))) (if (and r45a1@ls/false (apply (lambda (r45a3@c r45a4@ver*) (eq? (r31a0@syntax->datum r45a3@c) 'or)) r45a1@ls/false)) (apply (lambda (r45a7@c r45a8@ver*) (let ((r45ab@p* (map r4558@version-pred r45a8@ver*))) (lambda (r45ad@x) (exists (lambda (r45af@p) (r45af@p r45ad@x)) r45ab@p*)))) r45a1@ls/false) (let ((r45b1@t r459f@t)) (let ((r45b3@ls/false (r30ba@syntax-dispatch r45b1@t '(any any)))) (if (and r45b3@ls/false (apply (lambda (r45b5@c r45b6@ver) (eq? (r31a0@syntax->datum r45b5@c) 'not)) r45b3@ls/false)) (apply (lambda (r45b9@c r45ba@ver) (let ((r45bd@p (r4558@version-pred r45ba@ver))) (lambda (r45bf@x) (not (r45bd@p r45bf@x))))) r45b3@ls/false) (let ((r45c1@t r45b1@t)) (let ((r45c3@ls/false (r30ba@syntax-dispatch r45c1@t 'each-any))) (if r45c3@ls/false (apply (lambda (r45c5@sub*) (let ((r45c7@p* (map r4556@subversion-pred r45c5@sub*))) (lambda (r45c9@x) (let r45cf@f ((r45cb@p* r45c7@p*) (r45cc@x r45c9@x)) (if (null? r45cb@p*) '#t (if (null? r45cc@x) '#f (and ((car r45cb@p*) (car r45cc@x)) (r45cf@f (cdr r45cb@p*) (cdr r45cc@x))))))))) r45c3@ls/false) (let ((r45d1@t r45c1@t)) (let ((r45d3@ls/false (r30ba@syntax-dispatch r45d1@t '_))) (if r45d3@ls/false (apply (lambda () (r319a@syntax-violation 'import '"invalid version spec" r4551@spec r4585@x*)) r45d3@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r45d1@t)))))))))))))))))))))) (let r455b@f ((r4559@x r4551@spec)) (let ((r455d@t r4559@x)) (let ((r455f@ls/false (r30ba@syntax-dispatch r455d@t '(each-any)))) (if r455f@ls/false (apply (lambda (r4561@version-spec*) (values '() (r4558@version-pred r4561@version-spec*))) r455f@ls/false) (let ((r4563@t r455d@t)) (let ((r4565@ls/false (r30ba@syntax-dispatch r4563@t '(any . any)))) (if (and r4565@ls/false (apply (lambda (r4567@x r4568@x*) (r4486@idsyn? r4567@x)) r4565@ls/false)) (apply (lambda (r456b@x r456c@x*) (call-with-values (lambda () (r455b@f r456c@x*)) (lambda (r4573@r4570 r4574@r4572) (let ((r4577@pred r4574@r4572) (r4578@name r4573@r4570)) (values (cons (r31a0@syntax->datum r456b@x) r4578@name) r4577@pred))))) r4565@ls/false) (let ((r457b@t r4563@t)) (let ((r457d@ls/false (r30ba@syntax-dispatch r457b@t '()))) (if r457d@ls/false (apply (lambda () (values '() (lambda (r457f@x) '#t))) r457d@ls/false) (let ((r4581@t r457b@t)) (let ((r4583@ls/false (r30ba@syntax-dispatch r4581@t '_))) (if r4583@ls/false (apply (lambda () (r319a@syntax-violation '#f '"invalid import spec" r4551@spec)) r4583@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r4581@t))))))))))))))))) (r4496@import-library (lambda (r4541@spec*) (call-with-values (lambda () (r4494@parse-library-name r4541@spec*)) (lambda (r4547@r4544 r4548@r4546) (let ((r454b@pred r4548@r4546) (r454c@name r4547@r4544)) (begin (if (null? r454c@name) (r319a@syntax-violation 'import '"empty library name" r4541@spec*) (void)) (let ((r454f@lib (r2cc8@r2b0f@find-library-by-name r454c@name))) (begin (if (not r454f@lib) (r319a@syntax-violation 'import '"cannot find library with required name" r454c@name) (void)) (if (not (r454b@pred (r2ca2@r2ac3@library-version r454f@lib))) (r319a@syntax-violation 'import '"library does not satisfy version specification" r4541@spec* r454f@lib) (void)) ((r3126@imp-collector) r454f@lib) (r2caa@r2ad3@library-subst r454f@lib))))))))) (r4498@get-import (lambda (r44b3@spec) (let ((r44b5@t r44b3@spec)) (let ((r44b7@ls/false (r30ba@syntax-dispatch r44b5@t '(any . each-any)))) (if (and r44b7@ls/false (apply (lambda (r44b9@x r44ba@x*) (not (memq (r31a0@syntax->datum r44b9@x) '(for rename except only prefix library)))) r44b7@ls/false)) (apply (lambda (r44bd@x r44be@x*) (r4496@import-library (cons r44bd@x r44be@x*))) r44b7@ls/false) (let ((r44c1@t r44b5@t)) (let ((r44c3@ls/false (r30ba@syntax-dispatch r44c1@t '(any any . #(each (any any)))))) (if (and r44c3@ls/false (apply (lambda (r44c5@rename r44c6@isp r44c7@old* r44c8@new*) (and (eq? (r31a0@syntax->datum r44c5@rename) 'rename) (for-all r4486@idsyn? r44c7@old*) (for-all r4486@idsyn? r44c8@new*))) r44c3@ls/false)) (apply (lambda (r44cd@rename r44ce@isp r44cf@old* r44d0@new*) (let ((r44d5@subst (r4498@get-import r44ce@isp)) (r44d6@old* (map r31a0@syntax->datum r44cf@old*)) (r44d7@new* (map r31a0@syntax->datum r44d0@new*))) (let ((r44db@old-label* (r448e@find* r44d6@old* r44d5@subst))) (let ((r44dd@subst (r4490@rem* r44d6@old* r44d5@subst))) (r448a@merge-substs (map cons r44d7@new* r44db@old-label*) r44dd@subst))))) r44c3@ls/false) (let ((r44df@t r44c1@t)) (let ((r44e1@ls/false (r30ba@syntax-dispatch r44df@t '(any any . each-any)))) (if (and r44e1@ls/false (apply (lambda (r44e3@except r44e4@isp r44e5@sym*) (and (eq? (r31a0@syntax->datum r44e3@except) 'except) (for-all r4486@idsyn? r44e5@sym*))) r44e1@ls/false)) (apply (lambda (r44e9@except r44ea@isp r44eb@sym*) (let ((r44ef@subst (r4498@get-import r44ea@isp))) (r4490@rem* (map r31a0@syntax->datum r44eb@sym*) r44ef@subst))) r44e1@ls/false) (let ((r44f1@t r44df@t)) (let ((r44f3@ls/false (r30ba@syntax-dispatch r44f1@t '(any any . each-any)))) (if (and r44f3@ls/false (apply (lambda (r44f5@only r44f6@isp r44f7@sym*) (and (eq? (r31a0@syntax->datum r44f5@only) 'only) (for-all r4486@idsyn? r44f7@sym*))) r44f3@ls/false)) (apply (lambda (r44fb@only r44fc@isp r44fd@sym*) (let ((r4501@subst (r4498@get-import r44fc@isp)) (r4502@sym* (map r31a0@syntax->datum r44fd@sym*))) (let ((r4505@sym* (r4492@remove-dups r4502@sym*))) (let ((r4507@lab* (r448e@find* r4505@sym* r4501@subst))) (map cons r4505@sym* r4507@lab*))))) r44f3@ls/false) (let ((r4509@t r44f1@t)) (let ((r450b@ls/false (r30ba@syntax-dispatch r4509@t '(any any any)))) (if (and r450b@ls/false (apply (lambda (r450d@prefix r450e@isp r450f@p) (and (eq? (r31a0@syntax->datum r450d@prefix) 'prefix) (r4486@idsyn? r450f@p))) r450b@ls/false)) (apply (lambda (r4513@prefix r4514@isp r4515@p) (let ((r4519@subst (r4498@get-import r4514@isp)) (r451a@prefix (symbol->string (r31a0@syntax->datum r4515@p)))) (map (lambda (r451d@x) (cons (string->symbol (string-append r451a@prefix (symbol->string (car r451d@x)))) (cdr r451d@x))) r4519@subst))) r450b@ls/false) (let ((r451f@t r4509@t)) (let ((r4521@ls/false (r30ba@syntax-dispatch r451f@t '(any each-any)))) (if (and r4521@ls/false (apply (lambda (r4523@library r4524@spec*) (eq? (r31a0@syntax->datum r4523@library) 'library)) r4521@ls/false)) (apply (lambda (r4527@library r4528@spec*) (r4496@import-library r4528@spec*)) r4521@ls/false) (let ((r452b@t r451f@t)) (let ((r452d@ls/false (r30ba@syntax-dispatch r452b@t '(any any . any)))) (if (and r452d@ls/false (apply (lambda (r452f@for r4530@isp r4531@rest) (eq? (r31a0@syntax->datum r452f@for) 'for)) r452d@ls/false)) (apply (lambda (r4535@for r4536@isp r4537@rest) (r4498@get-import r4536@isp)) r452d@ls/false) (let ((r453b@t r452b@t)) (let ((r453d@ls/false (r30ba@syntax-dispatch r453b@t 'any))) (if r453d@ls/false (apply (lambda (r453f@spec) (r319a@syntax-violation 'import '"invalid import spec" r453f@spec)) r453d@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r453b@t))))))))))))))))))))))))))) (r449a@add-imports! (lambda (r44a3@imp r44a4@h) (let ((r44a7@subst (r4498@get-import r44a3@imp))) (for-each (lambda (r44a9@x) (let ((r44ab@name (car r44a9@x)) (r44ac@label (cdr r44a9@x))) (let ((r44af@t (hashtable-ref r44a4@h r44ab@name '#f))) (if r44af@t ((lambda (r44b1@l) (if (not (eq? r44b1@l r44ac@label)) (r4488@dup-error r44ab@name) (void))) r44af@t) (hashtable-set! r44a4@h r44ab@name r44ac@label))))) r44a7@subst))))) (lambda (r449b@imp*) (let r44a1@f ((r449d@imp* r449b@imp*) (r449e@h (make-eq-hashtable))) (if (null? r449d@imp*) (hashtable-entries r449e@h) (begin (r449a@add-imports! (car r449d@imp*) r449e@h) (r44a1@f (cdr r449d@imp*) r449e@h))))))) (set! r4bbd@r311c@parse-import-spec* r311c@parse-import-spec*) (set! r311e@make-top-rib (lambda (r4691@names r4692@labels) (let ((r4695@rib (r2e67@make-empty-rib))) (begin (vector-for-each (lambda (r4697@name r4698@label) (begin (if (not (symbol? r4697@name)) (error 'make-top-rib '"BUG: not a symbol" r4697@name) (void)) (r2e6b@extend-rib/nc! r4695@rib (make-simple-struct 'stx '5 (list r4697@name r2e37@top-mark* '() '())) r4698@label))) r4691@names r4692@labels) r4695@rib)))) (set! r4bbe@r311e@make-top-rib r311e@make-top-rib) (set! r3120@make-collector (lambda () (let ((r469b@ls '())) (lambda r469f (let ((r46a0 (length r469f))) (if (= r46a0 '0) (apply (lambda () r469b@ls) r469f) (if (= r46a0 '1) (apply (lambda (r469d@x) (set! r469b@ls (r2e30@set-cons r469d@x r469b@ls))) r469f) (error 'apply '"invalid arg count")))))))) (set! r4bbf@r3120@make-collector r3120@make-collector) (set! r3122@inv-collector (r2a03@r28e1@make-parameter (lambda r46a1@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (r46a3@x) (begin (if (not (procedure? r46a3@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" r46a3@x) (void)) r46a3@x)))) (set! r4bc0@r3122@inv-collector r3122@inv-collector) (set! r3124@vis-collector (r2a03@r28e1@make-parameter (lambda r46a5@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (r46a7@x) (begin (if (not (procedure? r46a7@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" r46a7@x) (void)) r46a7@x)))) (set! r4bc1@r3124@vis-collector r3124@vis-collector) (set! r3126@imp-collector (r2a03@r28e1@make-parameter (lambda r46a9@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (r46ab@x) (begin (if (not (procedure? r46ab@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" r46ab@x) (void)) r46ab@x)))) (set! r4bc2@r3126@imp-collector r3126@imp-collector) (set! r3128@chi-library-internal (lambda (r46ad@e* r46ae@rib r46af@top?) (call-with-values (lambda () (r3112@chi-body* r46ad@e* '() '() '() '() '() '() '() r46ae@rib r46af@top?)) (lambda (r46c3@r46b4 r46c4@r46b6 r46c5@r46b8 r46c6@r46ba r46c7@r46bc r46c8@r46be r46c9@r46c0 r46ca@r46c2) (let ((r46d3@exp* r46ca@r46c2) (r46d4@_kwd* r46c9@r46c0) (r46d5@mod** r46c8@r46be) (r46d6@rhs* r46c7@r46bc) (r46d7@lex* r46c6@r46ba) (r46d8@mr r46c5@r46b8) (r46d9@r r46c4@r46b6) (r46da@e* r46c3@r46b4)) (values (append (apply append (reverse r46d5@mod**)) r46da@e*) r46d9@r r46d8@mr (reverse r46d7@lex*) (reverse r46d6@rhs*) r46d3@exp*)))))) (set! r4bc3@r3128@chi-library-internal r3128@chi-library-internal) (set! r312a@chi-interaction-expr (lambda (r46e3@e r46e4@rib r46e5@r) (call-with-values (lambda () (r3112@chi-body* (list r46e3@e) r46e5@r r46e5@r '() '() '() '() '() r46e4@rib '#t)) (lambda (r46f9@r46ea r46fa@r46ec r46fb@r46ee r46fc@r46f0 r46fd@r46f2 r46fe@r46f4 r46ff@r46f6 r4700@r46f8) (let ((r4709@_exp* r4700@r46f8) (r470a@_kwd* r46ff@r46f6) (r470b@mod** r46fe@r46f4) (r470c@rhs* r46fd@r46f2) (r470d@lex* r46fc@r46f0) (r470e@mr r46fb@r46ee) (r470f@r r46fa@r46ec) (r4710@e* r46f9@r46ea)) (let ((r4719@e* (r30ea@expand-interaction-rhs*/init* (reverse r470d@lex*) (reverse r470c@rhs*) (append (apply append (reverse r470b@mod**)) r4710@e*) r470f@r r470e@mr))) (let ((r471b@e (if (null? r4719@e*) (r2e19@r2d7a@build-void) (if (null? (cdr r4719@e*)) (car r4719@e*) (r2e18@r2d78@build-sequence '#f r4719@e*))))) (values r471b@e r470f@r)))))))) (set! r4bc4@r312a@chi-interaction-expr r312a@chi-interaction-expr) (set! r312c@library-body-expander (lambda (r471d@name r471e@main-exp* r471f@imp* r4720@b* r4721@top?) (letrec* ((r4728@itc (r3120@make-collector))) (let ((r4731@r472a r3126@imp-collector) (r4732@r472c r31aa@top-level-context) (r4733@r472e r4728@itc) (r4734@r4730 '#f)) (let ((r4739@swap (lambda () (begin (let ((r473b@t (r4731@r472a))) (begin (r4731@r472a r4733@r472e) (set! r4733@r472e r473b@t))) (let ((r473d@t (r4732@r472c))) (begin (r4732@r472c r4734@r4730) (set! r4734@r4730 r473d@t))))))) (dynamic-wind r4739@swap (lambda () (call-with-values (lambda () (r311c@parse-import-spec* r471f@imp*)) (lambda (r4743@r4740 r4744@r4742) (let ((r4747@subst-labels r4744@r4742) (r4748@subst-names r4743@r4740)) (let ((r474b@rib (r311e@make-top-rib r4748@subst-names r4747@subst-labels))) (letrec* ((r474e@wrap (lambda (r47c9@x) (make-simple-struct 'stx '5 (list r47c9@x r2e37@top-mark* (list r474b@rib) '()))))) (let ((r474f@b* (map r474e@wrap r4720@b*)) (r4750@main-exp* (map r474e@wrap r471e@main-exp*)) (r4751@rtc (r3120@make-collector)) (r4752@vtc (r3120@make-collector))) (let ((r475f@r4758 r3122@inv-collector) (r4760@r475a r3124@vis-collector) (r4761@r475c r4751@rtc) (r4762@r475e r4752@vtc)) (let ((r4767@swap (lambda () (begin (let ((r4769@t (r475f@r4758))) (begin (r475f@r4758 r4761@r475c) (set! r4761@r475c r4769@t))) (let ((r476b@t (r4760@r475a))) (begin (r4760@r475a r4762@r475e) (set! r4762@r475e r476b@t))))))) (dynamic-wind r4767@swap (lambda () (call-with-values (lambda () (r3128@chi-library-internal r474f@b* r474b@rib r4721@top?)) (lambda (r4779@r476e r477a@r4770 r477b@r4772 r477c@r4774 r477d@r4776 r477e@r4778) (let ((r4785@internal-exp* r477e@r4778) (r4786@rhs* r477d@r4776) (r4787@lex* r477c@r4774) (r4788@mr r477b@r4772) (r4789@r r477a@r4770) (r478a@init* r4779@r476e)) (call-with-values (lambda () (r3116@parse-exports (append r4750@main-exp* r4785@internal-exp*))) (lambda (r4795@r4792 r4796@r4794) (let ((r4799@exp-id* r4796@r4794) (r479a@exp-name* r4795@r4792)) (begin (r2e6f@seal-rib! r474b@rib) (let ((r479d@init* (r30d8@chi-expr* r478a@init* r4789@r r4788@mr))) (let ((r479f@rhs* (r30ec@chi-rhs* r4786@rhs* r4789@r r4788@mr))) (begin (r2e71@unseal-rib! r474b@rib) (let ((r47a1@loc* (map r2e3d@gen-global r4787@lex*)) (r47a2@export-subst (r3184@make-export-subst r479a@exp-name* r4799@exp-id*))) (letrec* ((r47a6@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (r3186@make-export-env/macros r4787@lex* r47a1@loc* r4789@r)) (lambda (r47ad@r47a8 r47ae@r47aa r47af@r47ac) (let ((r47b3@macro* r47af@r47ac) (r47b4@global* r47ae@r47aa) (r47b5@export-env r47ad@r47a8)) (begin (for-each (lambda (r47b9@s) (let ((r47bb@name (car r47b9@s)) (r47bc@label (cdr r47b9@s))) (let ((r47bf@p (assq r47bc@label r47b5@export-env))) (if r47bf@p (let ((r47c1@b (cdr r47bf@p))) (let ((r47c3@type (car r47c1@b))) (if (eq? r47c3@type 'mutable) (r319a@syntax-violation 'export r47a6@errstr r47bb@name) (void)))) (void))))) r47a2@export-subst) (let ((r47c5@invoke-body (r2e1e@r2d84@build-library-letrec* '#f r471d@name r4787@lex* r47a1@loc* r479f@rhs* (if (null? r479d@init*) (r2e19@r2d7a@build-void) (r2e18@r2d78@build-sequence '#f r479d@init*)))) (r47c6@invoke-definitions (map r2e15@r2cd7@build-global-define (map cdr r47b4@global*)))) (values (r4728@itc) (r4751@rtc) (r4752@vtc) (r2e18@r2d78@build-sequence '#f (append r47c6@invoke-definitions (list r47c5@invoke-body))) r47b3@macro* r47a2@export-subst r47b5@export-env))))))))))))))))))) r4767@swap)))))))))) r4739@swap)))))) (set! r4bc5@r312c@library-body-expander r312c@library-body-expander) (set! r312e@core-library-expander (lambda (r47cb@e r47cc@verify-name) (call-with-values (lambda () (r311a@parse-library r47cb@e)) (lambda (r47d7@r47d0 r47d8@r47d2 r47d9@r47d4 r47da@r47d6) (let ((r47df@b* r47da@r47d6) (r47e0@imp* r47d9@r47d4) (r47e1@exp* r47d8@r47d2) (r47e2@name* r47d7@r47d0)) (call-with-values (lambda () (r3118@parse-library-name r47e2@name*)) (lambda (r47eb@r47e8 r47ec@r47ea) (let ((r47ef@ver r47ec@r47ea) (r47f0@name r47eb@r47e8)) (begin (r47cc@verify-name r47f0@name) (call-with-values (lambda () (r312c@library-body-expander r47f0@name r47e1@exp* r47e0@imp* r47df@b* '#f)) (lambda (r4801@r47f4 r4802@r47f6 r4803@r47f8 r4804@r47fa r4805@r47fc r4806@r47fe r4807@r4800) (let ((r480f@export-env r4807@r4800) (r4810@export-subst r4806@r47fe) (r4811@visit-code r4805@r47fc) (r4812@invoke-code r4804@r47fa) (r4813@visit-req* r4803@r47f8) (r4814@invoke-req* r4802@r47f6) (r4815@imp* r4801@r47f4)) (values r47f0@name r47ef@ver r4815@imp* r4814@invoke-req* r4813@visit-req* r4812@invoke-code r4811@visit-code r4810@export-subst r480f@export-env))))))))))))) (set! r4bc6@r312e@core-library-expander r312e@core-library-expander) (set! r3130@parse-top-level-program (lambda (r481d@e*) (let ((r481f@t r481d@e*)) (let ((r4821@ls/false (r30ba@syntax-dispatch r481f@t '((any . each-any) . each-any)))) (if (and r4821@ls/false (apply (lambda (r4823@import r4824@imp* r4825@b*) (eq? (r31a0@syntax->datum r4823@import) 'import)) r4821@ls/false)) (apply (lambda (r4829@import r482a@imp* r482b@b*) (values r482a@imp* r482b@b*)) r4821@ls/false) (let ((r482f@t r481f@t)) (let ((r4831@ls/false (r30ba@syntax-dispatch r482f@t '((any . any) . any)))) (if (and r4831@ls/false (apply (lambda (r4833@import r4834@x r4835@y) (eq? (r31a0@syntax->datum r4833@import) 'import)) r4831@ls/false)) (apply (lambda (r4839@import r483a@x r483b@y) (r319a@syntax-violation 'expander '"invalid syntax of top-level program" (r2ead@syntax-car r481d@e*))) r4831@ls/false) (let ((r483f@t r482f@t)) (let ((r4841@ls/false (r30ba@syntax-dispatch r483f@t '_))) (if r4841@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) r4841@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r483f@t)))))))))))) (set! r4bc7@r3130@parse-top-level-program r3130@parse-top-level-program) (set! r3132@top-level-expander (lambda (r4843@e*) (call-with-values (lambda () (r3130@parse-top-level-program r4843@e*)) (lambda (r4849@r4846 r484a@r4848) (let ((r484d@b* r484a@r4848) (r484e@imp* r4849@r4846)) (call-with-values (lambda () (r312c@library-body-expander '() '() r484e@imp* r484d@b* '#t)) (lambda (r485f@r4852 r4860@r4854 r4861@r4856 r4862@r4858 r4863@r485a r4864@r485c r4865@r485e) (let ((r486d@export-env r4865@r485e) (r486e@export-subst r4864@r485c) (r486f@visit-code r4863@r485a) (r4870@invoke-code r4862@r4858) (r4871@visit-req* r4861@r4856) (r4872@invoke-req* r4860@r4854) (r4873@imp* r485f@r4852)) (values r4872@invoke-req* r4870@invoke-code))))))))) (set! r4bc8@r3132@top-level-expander r3132@top-level-expander) (set! r3134@rp (r2a00@r28db@make-record-printer 'env (lambda (r487b@x r487c@p r487d@wr) (display '"#<environment>" r487c@p)))) (set! r4bc9@r3134@rp r3134@rp) (set! r313e@env? (lambda (r4881@x) (and (simple-struct? r4881@x) (eq? (simple-struct-name r4881@x) 'env)))) (set! r4bca@r313e@env? r313e@env?) (set! r3140@env-names (lambda (r4883@x) (simple-struct-ref r4883@x '0))) (set! r4bcb@r3140@env-names r3140@env-names) (set! r3142@set-env-names! (lambda (r4885@x r4886@val) (simple-struct-set! r4885@x '0 r4886@val))) (set! r4bcc@r3142@set-env-names! r3142@set-env-names!) (set! r3144@env-labels (lambda (r4889@x) (simple-struct-ref r4889@x '1))) (set! r4bcd@r3144@env-labels r3144@env-labels) (set! r3146@set-env-labels! (lambda (r488b@x r488c@val) (simple-struct-set! r488b@x '1 r488c@val))) (set! r4bce@r3146@set-env-labels! r3146@set-env-labels!) (set! r3148@env-itc (lambda (r488f@x) (simple-struct-ref r488f@x '2))) (set! r4bcf@r3148@env-itc r3148@env-itc) (set! r314a@set-env-itc! (lambda (r4891@x r4892@val) (simple-struct-set! r4891@x '2 r4892@val))) (set! r4bd0@r314a@set-env-itc! r314a@set-env-itc!) (set! r314c@dummy '3) (set! r4bd1@r314c@dummy r314c@dummy) (set! r314e@rp (r2a00@r28db@make-record-printer 'interaction-env (lambda (r4895@x r4896@p r4897@wr) (display '"#<environment>" r4896@p)))) (set! r4bd2@r314e@rp r314e@rp) (set! r3158@interaction-env? (lambda (r489b@x) (and (simple-struct? r489b@x) (eq? (simple-struct-name r489b@x) 'interaction-env)))) (set! r4bd3@r3158@interaction-env? r3158@interaction-env?) (set! r315a@interaction-env-rib (lambda (r489d@x) (simple-struct-ref r489d@x '0))) (set! r4bd4@r315a@interaction-env-rib r315a@interaction-env-rib) (set! r315c@set-interaction-env-rib! (lambda (r489f@x r48a0@val) (simple-struct-set! r489f@x '0 r48a0@val))) (set! r4bd5@r315c@set-interaction-env-rib! r315c@set-interaction-env-rib!) (set! r315e@interaction-env-r (lambda (r48a3@x) (simple-struct-ref r48a3@x '1))) (set! r4bd6@r315e@interaction-env-r r315e@interaction-env-r) (set! r3160@set-interaction-env-r! (lambda (r48a5@x r48a6@val) (simple-struct-set! r48a5@x '1 r48a6@val))) (set! r4bd7@r3160@set-interaction-env-r! r3160@set-interaction-env-r!) (set! r3162@interaction-env-locs (lambda (r48a9@x) (simple-struct-ref r48a9@x '2))) (set! r4bd8@r3162@interaction-env-locs r3162@interaction-env-locs) (set! r3164@set-interaction-env-locs! (lambda (r48ab@x r48ac@val) (simple-struct-set! r48ab@x '2 r48ac@val))) (set! r4bd9@r3164@set-interaction-env-locs! r3164@set-interaction-env-locs!) (set! r3166@dummy '3) (set! r4bda@r3166@dummy r3166@dummy) (set! r3168@interaction-environment-symbols (lambda () (r3170@environment-symbols (r31a8@interaction-environment)))) (set! r4bdb@r3168@interaction-environment-symbols r3168@interaction-environment-symbols) (set! r316a@environment-bindings (lambda (r48af@e) (vector->list (vector-map (lambda (r48b1@name r48b2@label) (r316c@parse-binding (cons r48b1@name (r2cce@r2b1b@imported-label->binding r48b2@label)))) (r3140@env-names r48af@e) (r3144@env-labels r48af@e))))) (set! r4bdc@r316a@environment-bindings r316a@environment-bindings) (set! r316c@parse-binding (lambda (r48b5@b) (cons (car r48b5@b) (let ((r48b7@t (cadr r48b5@b))) (if (memv r48b7@t '(core-prim global)) 'procedure (if (memv r48b7@t '(core-macro macro global-macro)) 'syntax (if (memv r48b7@t '($core-rtd)) 'record (if (eq? (car r48b5@b) (cadr r48b5@b)) 'syntax 'unknown)))))))) (set! r4bdd@r316c@parse-binding r316c@parse-binding) (set! r316e@environment? (lambda (r48b9@x) (or (r313e@env? r48b9@x) (r3158@interaction-env? r48b9@x)))) (set! r4bde@r316e@environment? r316e@environment?) (set! r3170@environment-symbols (lambda (r48bb@x) (if (r313e@env? r48bb@x) (vector->list (r3140@env-names r48bb@x)) (if (r3158@interaction-env? r48bb@x) (map values (r2e51@rib-sym* (r315a@interaction-env-rib r48bb@x))) (assertion-violation 'environment-symbols '"not an environment" r48bb@x))))) (set! r4bdf@r3170@environment-symbols r3170@environment-symbols) (set! r3172@environment (lambda r48bd@imp* (let ((r48bf@itc (r3120@make-collector))) (let ((r48c5@r48c2 r3126@imp-collector) (r48c6@r48c4 r48bf@itc)) (let ((r48c9@swap (lambda () (let ((r48cb@t (r48c5@r48c2))) (begin (r48c5@r48c2 r48c6@r48c4) (set! r48c6@r48c4 r48cb@t)))))) (dynamic-wind r48c9@swap (lambda () (call-with-values (lambda () (r311c@parse-import-spec* r48bd@imp*)) (lambda (r48d1@r48ce r48d2@r48d0) (let ((r48d5@subst-labels r48d2@r48d0) (r48d6@subst-names r48d1@r48ce)) (make-simple-struct 'env '4 (list r48d6@subst-names r48d5@subst-labels r48bf@itc)))))) r48c9@swap)))))) (set! r4be0@r3172@environment r3172@environment) (set! r3174@null-environment (lambda (r48d9@n) (begin (if (not (eqv? r48d9@n '5)) (assertion-violation 'null-environment '"not 5" r48d9@n) (void)) (r3172@environment '(psyntax null-environment-5))))) (set! r4be1@r3174@null-environment r3174@null-environment) (set! r3176@scheme-report-environment (lambda (r48db@n) (begin (if (not (eqv? r48db@n '5)) (assertion-violation 'scheme-report-environment '"not 5" r48db@n) (void)) (r3172@environment '(psyntax scheme-report-environment-5))))) (set! r4be2@r3176@scheme-report-environment r3176@scheme-report-environment) (set! r3178@expand (lambda (r48dd@x r48de@env) (if (r313e@env? r48de@env) (let ((r48e1@rib (r311e@make-top-rib (r3140@env-names r48de@env) (r3144@env-labels r48de@env)))) (let ((r48e3@x (make-simple-struct 'stx '5 (list r48dd@x r2e37@top-mark* (list r48e1@rib) '()))) (r48e4@itc (r3148@env-itc r48de@env)) (r48e5@rtc (r3120@make-collector)) (r48e6@vtc (r3120@make-collector))) (let ((r48eb@x (let ((r48fd@r48ee r31aa@top-level-context) (r48fe@r48f0 r3122@inv-collector) (r48ff@r48f2 r3124@vis-collector) (r4900@r48f4 r3126@imp-collector) (r4901@r48f6 '#f) (r4902@r48f8 r48e5@rtc) (r4903@r48fa r48e6@vtc) (r4904@r48fc r48e4@itc)) (let ((r490d@swap (lambda () (begin (let ((r490f@t (r48fd@r48ee))) (begin (r48fd@r48ee r4901@r48f6) (set! r4901@r48f6 r490f@t))) (let ((r4911@t (r48fe@r48f0))) (begin (r48fe@r48f0 r4902@r48f8) (set! r4902@r48f8 r4911@t))) (let ((r4913@t (r48ff@r48f2))) (begin (r48ff@r48f2 r4903@r48fa) (set! r4903@r48fa r4913@t))) (let ((r4915@t (r4900@r48f4))) (begin (r4900@r48f4 r4904@r48fc) (set! r4904@r48fc r4915@t))))))) (dynamic-wind r490d@swap (lambda () (r30dc@chi-expr r48e3@x '() '())) r490d@swap))))) (begin (r2e6f@seal-rib! r48e1@rib) (values r48eb@x (r48e5@rtc)))))) (if (r3158@interaction-env? r48de@env) (let ((r4917@rib (r315a@interaction-env-rib r48de@env)) (r4918@r (r315e@interaction-env-r r48de@env)) (r4919@rtc (r3120@make-collector))) (let ((r491d@x (make-simple-struct 'stx '5 (list r48dd@x r2e37@top-mark* (list r4917@rib) '())))) (call-with-values (lambda () (let ((r4933@r4924 r31aa@top-level-context) (r4934@r4926 r3122@inv-collector) (r4935@r4928 r3124@vis-collector) (r4936@r492a r3126@imp-collector) (r4937@r492c r48de@env) (r4938@r492e r4919@rtc) (r4939@r4930 (r3120@make-collector)) (r493a@r4932 (r3120@make-collector))) (let ((r4943@swap (lambda () (begin (let ((r4945@t (r4933@r4924))) (begin (r4933@r4924 r4937@r492c) (set! r4937@r492c r4945@t))) (let ((r4947@t (r4934@r4926))) (begin (r4934@r4926 r4938@r492e) (set! r4938@r492e r4947@t))) (let ((r4949@t (r4935@r4928))) (begin (r4935@r4928 r4939@r4930) (set! r4939@r4930 r4949@t))) (let ((r494b@t (r4936@r492a))) (begin (r4936@r492a r493a@r4932) (set! r493a@r4932 r494b@t))))))) (dynamic-wind r4943@swap (lambda () (r312a@chi-interaction-expr r491d@x r4917@rib r4918@r)) r4943@swap)))) (lambda (r494d@r4920 r494e@r4922) (let ((r4951@r^ r494e@r4922) (r4952@e r494d@r4920)) (begin (r3160@set-interaction-env-r! r48de@env r4951@r^) (values r4952@e (r4919@rtc)))))))) (assertion-violation 'expand '"not an environment" r48de@env))))) (set! r4be3@r3178@expand r3178@expand) (set! r317a@eval (lambda (r4955@x r4956@env) (begin (if (not (r316e@environment? r4956@env)) (error 'eval '"not an environment" r4956@env) (void)) (call-with-values (lambda () (r3178@expand r4955@x r4956@env)) (lambda (r495d@r495a r495e@r495c) (let ((r4961@invoke-req* r495e@r495c) (r4962@x r495d@r495a)) (begin (for-each r2ccf@r2b1d@invoke-library r4961@invoke-req*) (eval-core (r2a59@r2a11@expanded->core r4962@x))))))))) (set! r4be4@r317a@eval r317a@eval) (set! r317c@library-expander (lambda r49d3 (let ((r49d4 (length r49d3))) (if (= r49d4 '3) (apply (lambda (r4965@x r4966@filename r4967@verify-name) (letrec* ((r496c@build-visit-code (lambda (r49c1@macro*) (if (null? r49c1@macro*) (r2e19@r2d7a@build-void) (r2e18@r2d78@build-sequence '#f (map (lambda (r49c3@x) (let ((r49c5@loc (car r49c3@x)) (r49c6@src (cddr r49c3@x))) (list 'set! r49c5@loc r49c6@src))) r49c1@macro*))))) (r496e@visit! (lambda (r49b9@macro*) (for-each (lambda (r49bb@x) (let ((r49bd@loc (car r49bb@x)) (r49be@proc (cadr r49bb@x))) (set-symbol-value! r49bd@loc r49be@proc))) r49b9@macro*)))) (call-with-values (lambda () (r312e@core-library-expander r4965@x r4967@verify-name)) (lambda (r4981@r4970 r4982@r4972 r4983@r4974 r4984@r4976 r4985@r4978 r4986@r497a r4987@r497c r4988@r497e r4989@r4980) (let ((r4993@export-env r4989@r4980) (r4994@export-subst r4988@r497e) (r4995@macro* r4987@r497c) (r4996@invoke-code r4986@r497a) (r4997@vis* r4985@r4978) (r4998@inv* r4984@r4976) (r4999@imp* r4983@r4974) (r499a@ver r4982@r4972) (r499b@name r4981@r4970)) (let ((r49a5@id (gensym)) (r49a6@name r499b@name) (r49a7@ver r499a@ver) (r49a8@imp* (map r2cd3@r2b25@library-spec r4999@imp*)) (r49a9@vis* (map r2cd3@r2b25@library-spec r4997@vis*)) (r49aa@inv* (map r2cd3@r2b25@library-spec r4998@inv*)) (r49ab@visit-proc (lambda () (r496e@visit! r4995@macro*))) (r49ac@invoke-proc (lambda () (eval-core (r2a59@r2a11@expanded->core r4996@invoke-code)))) (r49ad@visit-code (r496c@build-visit-code r4995@macro*)) (r49ae@invoke-code r4996@invoke-code)) (begin (r2ccd@r2b19@install-library r49a5@id r49a6@name r49a7@ver r49a8@imp* r49a9@vis* r49aa@inv* r4994@export-subst r4993@export-env r49ab@visit-proc r49ac@invoke-proc r49ad@visit-code r49ae@invoke-code '#t r4966@filename) (values r49a5@id r49a6@name r49a7@ver r49a8@imp* r49a9@vis* r49aa@inv* r49ae@invoke-code r49ad@visit-code r4994@export-subst r4993@export-env)))))))) r49d3) (if (= r49d4 '2) (apply (lambda (r49c9@x r49ca@filename) (r317c@library-expander r49c9@x r49ca@filename (lambda (r49cd@x) (values)))) r49d3) (if (= r49d4 '1) (apply (lambda (r49cf@x) (r317c@library-expander r49cf@x '#f (lambda (r49d1@x) (values)))) r49d3) (error 'apply '"invalid arg count"))))))) (set! r4be5@r317c@library-expander r317c@library-expander) (set! r317e@boot-library-expand (lambda (r49d5@x) (call-with-values (lambda () (r317c@library-expander r49d5@x)) (lambda (r49eb@r49d8 r49ec@r49da r49ed@r49dc r49ee@r49de r49ef@r49e0 r49f0@r49e2 r49f1@r49e4 r49f2@r49e6 r49f3@r49e8 r49f4@r49ea) (let ((r49ff@export-env r49f4@r49ea) (r4a00@export-subst r49f3@r49e8) (r4a01@visit-code r49f2@r49e6) (r4a02@invoke-code r49f1@r49e4) (r4a03@inv* r49f0@r49e2) (r4a04@vis* r49ef@r49e0) (r4a05@imp* r49ee@r49de) (r4a06@ver r49ed@r49dc) (r4a07@name r49ec@r49da) (r4a08@id r49eb@r49d8)) (values r4a07@name r4a02@invoke-code r4a00@export-subst r49ff@export-env)))))) (set! r4be6@r317e@boot-library-expand r317e@boot-library-expand) (set! r3180@rev-map-append (lambda (r4a13@f r4a14@ls r4a15@ac) (if (null? r4a14@ls) r4a15@ac (r3180@rev-map-append r4a13@f (cdr r4a14@ls) (cons (r4a13@f (car r4a14@ls)) r4a15@ac))))) (set! r4be7@r3180@rev-map-append r3180@rev-map-append) (set! r3182@build-exports (lambda (r4a19@lex*+loc* r4a1a@init*) (r2e18@r2d78@build-sequence '#f (cons (r2e19@r2d7a@build-void) (r3180@rev-map-append (lambda (r4a1d@x) (list 'set! (cdr r4a1d@x) (car r4a1d@x))) r4a19@lex*+loc* r4a1a@init*))))) (set! r4be8@r3182@build-exports r3182@build-exports) (set! r3184@make-export-subst (lambda (r4a1f@name* r4a20@id*) (map (lambda (r4a23@name r4a24@id) (let ((r4a27@label (r2ec9@id->label r4a24@id))) (begin (if (not r4a27@label) (r319a@syntax-violation '#f '"cannot export unbound identifier" r4a24@id) (void)) (cons r4a23@name r4a27@label)))) r4a1f@name* r4a20@id*))) (set! r4be9@r3184@make-export-subst r3184@make-export-subst) (set! r3186@make-export-env/macros (lambda (r4a29@lex* r4a2a@loc* r4a2b@r) (letrec* ((r4a30@lookup (lambda (r4a4d@x) (let r4a55@f ((r4a4f@x r4a4d@x) (r4a50@lex* r4a29@lex*) (r4a51@loc* r4a2a@loc*)) (if (pair? r4a50@lex*) (if (eq? r4a4f@x (car r4a50@lex*)) (car r4a51@loc*) (r4a55@f r4a4f@x (cdr r4a50@lex*) (cdr r4a51@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let r4a39@f ((r4a31@r r4a2b@r) (r4a32@env '()) (r4a33@global* '()) (r4a34@macro* '())) (if (null? r4a31@r) (values r4a32@env r4a33@global* r4a34@macro*) (let ((r4a3b@x (car r4a31@r))) (let ((r4a3d@label (car r4a3b@x)) (r4a3e@b (cdr r4a3b@x))) (let ((r4a41@t (r2ecf@binding-type r4a3e@b))) (if (memv r4a41@t '(lexical)) (let ((r4a43@v (r2ed1@binding-value r4a3e@b))) (let ((r4a45@loc (r4a30@lookup (r3044@lexical-var r4a43@v))) (r4a46@type (if (r3046@lexical-mutable? r4a43@v) 'mutable 'global))) (r4a39@f (cdr r4a31@r) (cons (cons* r4a3d@label r4a46@type r4a45@loc) r4a32@env) (cons (cons (r3044@lexical-var r4a43@v) r4a45@loc) r4a33@global*) r4a34@macro*))) (if (memv r4a41@t '(local-macro)) (let ((r4a49@loc (gensym))) (r4a39@f (cdr r4a31@r) (cons (cons* r4a3d@label 'global-macro r4a49@loc) r4a32@env) r4a33@global* (cons (cons r4a49@loc (r2ed1@binding-value r4a3e@b)) r4a34@macro*))) (if (memv r4a41@t '(local-macro!)) (let ((r4a4b@loc (gensym))) (r4a39@f (cdr r4a31@r) (cons (cons* r4a3d@label 'global-macro! r4a4b@loc) r4a32@env) r4a33@global* (cons (cons r4a4b@loc (r2ed1@binding-value r4a3e@b)) r4a34@macro*))) (if (memv r4a41@t '($rtd $module)) (r4a39@f (cdr r4a31@r) (cons r4a3b@x r4a32@env) r4a33@global* r4a34@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (r2ecf@binding-type r4a3e@b) (r2ed1@binding-value r4a3e@b)))))))))))))) (set! r4bea@r3186@make-export-env/macros r3186@make-export-env/macros) (set! r3188@generate-temporaries (lambda (r4a57@ls) (let ((r4a59@t r4a57@ls)) (let ((r4a5b@ls/false (r30ba@syntax-dispatch r4a59@t 'each-any))) (if r4a5b@ls/false (apply (lambda (r4a5d@ls) (map (lambda (r4a5f@x) (make-simple-struct 'stx '5 (list (let ((r4a61@x (r31a0@syntax->datum r4a5f@x))) (if (or (symbol? r4a61@x) (string? r4a61@x)) (gensym r4a61@x) (gensym 't))) r2e37@top-mark* '() '()))) r4a5d@ls)) r4a5b@ls/false) (let ((r4a63@t r4a59@t)) (let ((r4a65@ls/false (r30ba@syntax-dispatch r4a63@t '_))) (if r4a65@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) r4a65@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r4a63@t))))))))) (set! r4beb@r3188@generate-temporaries r3188@generate-temporaries) (set! r318a@free-identifier=? (lambda (r4a67@x r4a68@y) (if (r2eb3@id? r4a67@x) (if (r2eb3@id? r4a68@y) (r2eb9@free-id=? r4a67@x r4a68@y) (assertion-violation 'free-identifier=? '"not an identifier" r4a68@y)) (assertion-violation 'free-identifier=? '"not an identifier" r4a67@x)))) (set! r4bec@r318a@free-identifier=? r318a@free-identifier=?) (set! r318c@bound-identifier=? (lambda (r4a6b@x r4a6c@y) (if (r2eb3@id? r4a6b@x) (if (r2eb3@id? r4a6c@y) (r2eb7@bound-id=? r4a6b@x r4a6c@y) (assertion-violation 'bound-identifier=? '"not an identifier" r4a6c@y)) (assertion-violation 'bound-identifier=? '"not an identifier" r4a6b@x)))) (set! r4bed@r318c@bound-identifier=? r318c@bound-identifier=?) (set! r318e@make-source-condition (lambda (r4a6f@x) (letrec* ((r4a79@r4a74 (make-record-type-descriptor '&source-information r4ecf@r4c16@&condition-rtd 'r4a77 '#f '#f '#((immutable file-name) (immutable line)))) (r4a7b@r4a76 '#f) (r4a7d@r4a75 (make-record-constructor-descriptor r4a79@r4a74 r4ed0@r4c18@&condition-rcd r4a7b@r4a76)) (r4a80@r4a73 (record-predicate r4a79@r4a74)) (r4a82@make-source-condition (record-constructor r4a7d@r4a75)) (r4a84@r4a71 (record-accessor r4a79@r4a74 '0)) (r4a86@r4a72 (record-accessor r4a79@r4a74 '1)) (r4a88@source-condition? (condition-predicate r4a79@r4a74)) (r4a8a@source-filename (condition-accessor r4a79@r4a74 r4a84@r4a71)) (r4a8c@source-character (condition-accessor r4a79@r4a74 r4a86@r4a72))) (if (and (pair? r4a6f@x) (pair? (cdr r4a6f@x))) (r4a82@make-source-condition (car r4a6f@x) (cadr r4a6f@x)) (condition))))) (set! r4bee@r318e@make-source-condition r318e@make-source-condition) (set! r3190@extract-position-condition (lambda (r4a8d@x) (r318e@make-source-condition (r3192@expression-position r4a8d@x)))) (set! r4bef@r3190@extract-position-condition r3190@extract-position-condition) (set! r3192@expression-position (lambda (r4a8f@x) (and (r2e7f@stx? r4a8f@x) (let ((r4a91@x (r2e81@stx-expr r4a8f@x))) (and (r29f7@r28c9@annotation? r4a91@x) (r29f8@r28cb@annotation-source r4a91@x)))))) (set! r4bf0@r3192@expression-position r3192@expression-position) (set! r3194@assertion-error (lambda (r4a93@expr r4a94@pos) (raise (condition (r4eff@r4cda@make-assertion-violation) (r4f11@r4d0c@make-who-condition 'assert) (r4ed5@r4c6d@make-message-condition '"assertion failed") (r4f07@r4cf1@make-irritants-condition (list r4a93@expr)) (r318e@make-source-condition r4a94@pos))))) (set! r4bf1@r3194@assertion-error r3194@assertion-error) (set! r3196@syntax-error (lambda (r4a97@x . r4a99@args) (begin (if (not (for-all string? r4a99@args)) (assertion-violation 'syntax-error '"invalid argument" r4a99@args) (void)) (raise (condition (r4ed5@r4c6d@make-message-condition (if (null? r4a99@args) '"invalid syntax" (apply string-append r4a99@args))) (r4f33@r4d68@make-syntax-violation (r31a0@syntax->datum r4a97@x) '#f) (r3190@extract-position-condition r4a97@x)))))) (set! r4bf2@r3196@syntax-error r3196@syntax-error) (set! r3198@syntax-violation* (lambda (r4a9b@who r4a9c@msg r4a9d@form r4a9e@condition-object) (begin (if (not (string? r4a9c@msg)) (assertion-violation 'syntax-violation '"message is not a string" r4a9c@msg) (void)) (let ((r4aa3@who (if (or (string? r4a9b@who) (symbol? r4a9b@who)) r4a9b@who (if (not r4a9b@who) (let ((r4aa5@t r4a9d@form)) (let ((r4aa7@ls/false (r30ba@syntax-dispatch r4aa5@t 'any))) (if (and r4aa7@ls/false (apply (lambda (r4aa9@id) (r2eb3@id? r4aa9@id)) r4aa7@ls/false)) (apply (lambda (r4aab@id) (r31a0@syntax->datum r4aab@id)) r4aa7@ls/false) (let ((r4aad@t r4aa5@t)) (let ((r4aaf@ls/false (r30ba@syntax-dispatch r4aad@t '(any . any)))) (if (and r4aaf@ls/false (apply (lambda (r4ab1@id r4ab2@rest) (r2eb3@id? r4ab1@id)) r4aaf@ls/false)) (apply (lambda (r4ab5@id r4ab6@rest) (r31a0@syntax->datum r4ab5@id)) r4aaf@ls/false) (let ((r4ab9@t r4aad@t)) (let ((r4abb@ls/false (r30ba@syntax-dispatch r4ab9@t '_))) (if r4abb@ls/false (apply (lambda () '#f) r4abb@ls/false) (r319a@syntax-violation '#f '"invalid syntax" r4ab9@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" r4a9b@who))))) (raise (condition (if r4aa3@who (r4f11@r4d0c@make-who-condition r4aa3@who) (condition)) (r4ed5@r4c6d@make-message-condition r4a9c@msg) r4a9e@condition-object (r3190@extract-position-condition r4a9d@form))))))) (set! r4bf3@r3198@syntax-violation* r3198@syntax-violation*) (set! r319a@syntax-violation (lambda r4acb (let ((r4acc (length r4acb))) (if (= r4acc '3) (apply (lambda (r4abd@who r4abe@msg r4abf@form) (r319a@syntax-violation r4abd@who r4abe@msg r4abf@form '#f)) r4acb) (if (= r4acc '4) (apply (lambda (r4ac3@who r4ac4@msg r4ac5@form r4ac6@subform) (r3198@syntax-violation* r4ac3@who r4ac4@msg r4ac5@form (r4f33@r4d68@make-syntax-violation (r31a0@syntax->datum r4ac5@form) (r31a0@syntax->datum r4ac6@subform)))) r4acb) (error 'apply '"invalid arg count")))))) (set! r4bf4@r319a@syntax-violation r319a@syntax-violation) (set! r319c@identifier? (lambda (r4acd@x) (r2eb3@id? r4acd@x))) (set! r4bf5@r319c@identifier? r319c@identifier?) (set! r319e@datum->syntax (lambda (r4acf@id r4ad0@datum) (if (r2eb3@id? r4acf@id) (r2e93@datum->stx r4acf@id r4ad0@datum) (assertion-violation 'datum->syntax '"not an identifier" r4acf@id)))) (set! r4bf6@r319e@datum->syntax r319e@datum->syntax) (set! r31a0@syntax->datum (lambda (r4ad3@x) (r2ec7@stx->datum r4ad3@x))) (set! r4bf7@r31a0@syntax->datum r31a0@syntax->datum) (set! r31a2@ungensym-all (lambda (r4ad5@code) (if (pair? r4ad5@code) (cons (r31a2@ungensym-all (car r4ad5@code)) (r31a2@ungensym-all (cdr r4ad5@code))) (if (symbol? r4ad5@code) (ungensym r4ad5@code) r4ad5@code)))) (set! r4bf8@r31a2@ungensym-all r31a2@ungensym-all) (set! r31a4@compile-r6rs-top-level (lambda (r4ad7@x*) (call-with-values (lambda () (r3132@top-level-expander r4ad7@x*)) (lambda (r4add@r4ada r4ade@r4adc) (let ((r4ae1@invoke-code r4ade@r4adc) (r4ae2@lib* r4add@r4ada)) (lambda () (begin (for-each r2ccf@r2b1d@invoke-library r4ae2@lib*) (let ((r4ae5@expanded (r2a59@r2a11@expanded->core r4ae1@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (r31a2@ungensym-all r4ae5@expanded)) (void)) (eval-core r4ae5@expanded)))))))))) (set! r4bf9@r31a4@compile-r6rs-top-level r31a4@compile-r6rs-top-level) (set! r31a6@pre-compile-r6rs-top-level (lambda (r4ae7@x*) (call-with-values (lambda () (r3132@top-level-expander r4ae7@x*)) (lambda (r4aed@r4aea r4aee@r4aec) (let ((r4af1@invoke-code r4aee@r4aec) (r4af2@lib* r4aed@r4aea)) (begin (for-each r2ccf@r2b1d@invoke-library r4af2@lib*) (r2a01@r28dd@compile-core (r2a59@r2a11@expanded->core r4af1@invoke-code)))))))) (set! r4bfa@r31a6@pre-compile-r6rs-top-level r31a6@pre-compile-r6rs-top-level) (set! r31a8@interaction-environment (let ((r4af5@the-env '#f)) (lambda () (or r4af5@the-env (let ((r4af7@lib (r2cc8@r2b0f@find-library-by-name '(mosh interaction))) (r4af8@rib (r2e67@make-empty-rib))) (begin (let ((r4afb@subst (r2caa@r2ad3@library-subst r4af7@lib))) (begin (r2e53@set-rib-sym*! r4af8@rib (map car r4afb@subst)) (r2e57@set-rib-mark**! r4af8@rib (map (lambda (r4afd@x) r2e37@top-mark*) r4afb@subst)) (r2e5b@set-rib-label*! r4af8@rib (map cdr r4afb@subst)))) (let ((r4aff@env (make-simple-struct 'interaction-env '4 (list r4af8@rib '() '())))) (begin (set! r4af5@the-env r4aff@env) r4aff@env)))))))) (set! r4bfb@r31a8@interaction-environment r31a8@interaction-environment) (set! r31aa@top-level-context (r2a03@r28e1@make-parameter '#f)) (set! r4bfc@r31aa@top-level-context r31aa@top-level-context) (r2cc5@r2b09@current-library-expander r317c@library-expander))
(begin (set! r4c0b@r4c06 (unspecified)) (set! r4c0d@r4c08 (unspecified)) (set! r4c0f@r4c07 (unspecified)) (set! r4c12@&condition? (unspecified)) (set! r4c14@make-&condition (unspecified)) (set! r4c16@&condition-rtd (unspecified)) (set! r4c18@&condition-rcd (unspecified)) (set! r4c64@r4c5f (unspecified)) (set! r4c66@r4c61 (unspecified)) (set! r4c68@r4c60 (unspecified)) (set! r4c6b@p? (unspecified)) (set! r4c6d@make-message-condition (unspecified)) (set! r4c6f@r4c5e (unspecified)) (set! r4c71@message-condition? (unspecified)) (set! r4c73@condition-message (unspecified)) (set! r4c75@&message-rtd (unspecified)) (set! r4c77@&message-rcd (unspecified)) (set! r4c7d@r4c78 (unspecified)) (set! r4c7f@r4c7a (unspecified)) (set! r4c81@r4c79 (unspecified)) (set! r4c84@p? (unspecified)) (set! r4c86@make-warning (unspecified)) (set! r4c88@warning? (unspecified)) (set! r4c8a@&warning-rtd (unspecified)) (set! r4c8c@&warning-rcd (unspecified)) (set! r4c92@r4c8d (unspecified)) (set! r4c94@r4c8f (unspecified)) (set! r4c96@r4c8e (unspecified)) (set! r4c99@p? (unspecified)) (set! r4c9b@make-serious-condition (unspecified)) (set! r4c9d@serious-condition? (unspecified)) (set! r4c9f@&serious-rtd (unspecified)) (set! r4ca1@&serious-rcd (unspecified)) (set! r4ca7@r4ca2 (unspecified)) (set! r4ca9@r4ca4 (unspecified)) (set! r4cab@r4ca3 (unspecified)) (set! r4cae@p? (unspecified)) (set! r4cb0@make-error (unspecified)) (set! r4cb2@error? (unspecified)) (set! r4cb4@&error-rtd (unspecified)) (set! r4cb6@&error-rcd (unspecified)) (set! r4cbc@r4cb7 (unspecified)) (set! r4cbe@r4cb9 (unspecified)) (set! r4cc0@r4cb8 (unspecified)) (set! r4cc3@p? (unspecified)) (set! r4cc5@make-violation (unspecified)) (set! r4cc7@violation? (unspecified)) (set! r4cc9@&violation-rtd (unspecified)) (set! r4ccb@&violation-rcd (unspecified)) (set! r4cd1@r4ccc (unspecified)) (set! r4cd3@r4cce (unspecified)) (set! r4cd5@r4ccd (unspecified)) (set! r4cd8@p? (unspecified)) (set! r4cda@make-assertion-violation (unspecified)) (set! r4cdc@assertion-violation? (unspecified)) (set! r4cde@&assertion-rtd (unspecified)) (set! r4ce0@&assertion-rcd (unspecified)) (set! r4ce8@r4ce3 (unspecified)) (set! r4cea@r4ce5 (unspecified)) (set! r4cec@r4ce4 (unspecified)) (set! r4cef@p? (unspecified)) (set! r4cf1@make-irritants-condition (unspecified)) (set! r4cf3@r4ce2 (unspecified)) (set! r4cf5@irritants-condition? (unspecified)) (set! r4cf7@condition-irritants (unspecified)) (set! r4cf9@&irritants-rtd (unspecified)) (set! r4cfb@&irritants-rcd (unspecified)) (set! r4d03@r4cfe (unspecified)) (set! r4d05@r4d00 (unspecified)) (set! r4d07@r4cff (unspecified)) (set! r4d0a@p? (unspecified)) (set! r4d0c@make-who-condition (unspecified)) (set! r4d0e@r4cfd (unspecified)) (set! r4d10@who-condition? (unspecified)) (set! r4d12@condition-who (unspecified)) (set! r4d14@&who-rtd (unspecified)) (set! r4d16@&who-rcd (unspecified)) (set! r4d1c@r4d17 (unspecified)) (set! r4d1e@r4d19 (unspecified)) (set! r4d20@r4d18 (unspecified)) (set! r4d23@p? (unspecified)) (set! r4d25@make-non-continuable-violation (unspecified)) (set! r4d27@non-continuable-violation? (unspecified)) (set! r4d29@&non-continuable-rtd (unspecified)) (set! r4d2b@&non-continuable-rcd (unspecified)) (set! r4d31@r4d2c (unspecified)) (set! r4d33@r4d2e (unspecified)) (set! r4d35@r4d2d (unspecified)) (set! r4d38@p? (unspecified)) (set! r4d3a@make-implementation-restriction-violation (unspecified)) (set! r4d3c@implementation-restriction-violation? (unspecified)) (set! r4d3e@&implementation-restriction-rtd (unspecified)) (set! r4d40@&implementation-restriction-rcd (unspecified)) (set! r4d46@r4d41 (unspecified)) (set! r4d48@r4d43 (unspecified)) (set! r4d4a@r4d42 (unspecified)) (set! r4d4d@p? (unspecified)) (set! r4d4f@make-lexical-violation (unspecified)) (set! r4d51@lexical-violation? (unspecified)) (set! r4d53@&lexical-rtd (unspecified)) (set! r4d55@&lexical-rcd (unspecified)) (set! r4d5f@r4d5a (unspecified)) (set! r4d61@r4d5c (unspecified)) (set! r4d63@r4d5b (unspecified)) (set! r4d66@p? (unspecified)) (set! r4d68@make-syntax-violation (unspecified)) (set! r4d6a@r4d57 (unspecified)) (set! r4d6c@r4d59 (unspecified)) (set! r4d6e@syntax-violation? (unspecified)) (set! r4d70@syntax-violation-form (unspecified)) (set! r4d72@syntax-violation-subform (unspecified)) (set! r4d74@&syntax-rtd (unspecified)) (set! r4d76@&syntax-rcd (unspecified)) (set! r4d7c@r4d77 (unspecified)) (set! r4d7e@r4d79 (unspecified)) (set! r4d80@r4d78 (unspecified)) (set! r4d83@p? (unspecified)) (set! r4d85@make-undefined-violation (unspecified)) (set! r4d87@undefined-violation? (unspecified)) (set! r4d89@&undefined-rtd (unspecified)) (set! r4d8b@&undefined-rcd (unspecified)) (set! r4d91@r4d8c (unspecified)) (set! r4d93@r4d8e (unspecified)) (set! r4d95@r4d8d (unspecified)) (set! r4d98@p? (unspecified)) (set! r4d9a@make-i/o-error (unspecified)) (set! r4d9c@i/o-error? (unspecified)) (set! r4d9e@&i/o-rtd (unspecified)) (set! r4da0@&i/o-rcd (unspecified)) (set! r4da6@r4da1 (unspecified)) (set! r4da8@r4da3 (unspecified)) (set! r4daa@r4da2 (unspecified)) (set! r4dad@p? (unspecified)) (set! r4daf@make-i/o-read-error (unspecified)) (set! r4db1@i/o-read-error? (unspecified)) (set! r4db3@&i/o-read-rtd (unspecified)) (set! r4db5@&i/o-read-rcd (unspecified)) (set! r4dbb@r4db6 (unspecified)) (set! r4dbd@r4db8 (unspecified)) (set! r4dbf@r4db7 (unspecified)) (set! r4dc2@p? (unspecified)) (set! r4dc4@make-i/o-write-error (unspecified)) (set! r4dc6@i/o-write-error? (unspecified)) (set! r4dc8@&i/o-write-rtd (unspecified)) (set! r4dca@&i/o-write-rcd (unspecified)) (set! r4dd2@r4dcd (unspecified)) (set! r4dd4@r4dcf (unspecified)) (set! r4dd6@r4dce (unspecified)) (set! r4dd9@p? (unspecified)) (set! r4ddb@make-i/o-invalid-position-error (unspecified)) (set! r4ddd@r4dcc (unspecified)) (set! r4ddf@i/o-invalid-position-error? (unspecified)) (set! r4de1@i/o-error-position (unspecified)) (set! r4de3@&i/o-invalid-position-rtd (unspecified)) (set! r4de5@&i/o-invalid-position-rcd (unspecified)) (set! r4ded@r4de8 (unspecified)) (set! r4def@r4dea (unspecified)) (set! r4df1@r4de9 (unspecified)) (set! r4df4@p? (unspecified)) (set! r4df6@make-i/o-filename-error (unspecified)) (set! r4df8@r4de7 (unspecified)) (set! r4dfa@i/o-filename-error? (unspecified)) (set! r4dfc@i/o-error-filename (unspecified)) (set! r4dfe@&i/o-filename-rtd (unspecified)) (set! r4e00@&i/o-filename-rcd (unspecified)) (set! r4e06@r4e01 (unspecified)) (set! r4e08@r4e03 (unspecified)) (set! r4e0a@r4e02 (unspecified)) (set! r4e0d@p? (unspecified)) (set! r4e0f@make-i/o-file-protection-error (unspecified)) (set! r4e11@i/o-file-protection-error? (unspecified)) (set! r4e13@&i/o-file-protection-rtd (unspecified)) (set! r4e15@&i/o-file-protection-rcd (unspecified)) (set! r4e1b@r4e16 (unspecified)) (set! r4e1d@r4e18 (unspecified)) (set! r4e1f@r4e17 (unspecified)) (set! r4e22@p? (unspecified)) (set! r4e24@make-i/o-file-is-read-only-error (unspecified)) (set! r4e26@i/o-file-is-read-only-error? (unspecified)) (set! r4e28@&i/o-file-is-read-only-rtd (unspecified)) (set! r4e2a@&i/o-file-is-read-only-rcd (unspecified)) (set! r4e30@r4e2b (unspecified)) (set! r4e32@r4e2d (unspecified)) (set! r4e34@r4e2c (unspecified)) (set! r4e37@p? (unspecified)) (set! r4e39@make-i/o-file-already-exists-error (unspecified)) (set! r4e3b@i/o-file-already-exists-error? (unspecified)) (set! r4e3d@&i/o-file-already-exists-rtd (unspecified)) (set! r4e3f@&i/o-file-already-exists-rcd (unspecified)) (set! r4e45@r4e40 (unspecified)) (set! r4e47@r4e42 (unspecified)) (set! r4e49@r4e41 (unspecified)) (set! r4e4c@p? (unspecified)) (set! r4e4e@make-i/o-file-does-not-exist-error (unspecified)) (set! r4e50@i/o-file-does-not-exist-error? (unspecified)) (set! r4e52@&i/o-file-does-not-exist-rtd (unspecified)) (set! r4e54@&i/o-file-does-not-exist-rcd (unspecified)) (set! r4e5c@r4e57 (unspecified)) (set! r4e5e@r4e59 (unspecified)) (set! r4e60@r4e58 (unspecified)) (set! r4e63@p? (unspecified)) (set! r4e65@make-i/o-port-error (unspecified)) (set! r4e67@r4e56 (unspecified)) (set! r4e69@i/o-port-error? (unspecified)) (set! r4e6b@i/o-error-port (unspecified)) (set! r4e6d@&i/o-port-rtd (unspecified)) (set! r4e6f@&i/o-port-rcd (unspecified)) (set! r4e75@r4e70 (unspecified)) (set! r4e77@r4e72 (unspecified)) (set! r4e79@r4e71 (unspecified)) (set! r4e7c@p? (unspecified)) (set! r4e7e@make-i/o-decoding-error (unspecified)) (set! r4e80@i/o-decoding-error? (unspecified)) (set! r4e82@&i/o-decoding-rtd (unspecified)) (set! r4e84@&i/o-decoding-rcd (unspecified)) (set! r4e8c@r4e87 (unspecified)) (set! r4e8e@r4e89 (unspecified)) (set! r4e90@r4e88 (unspecified)) (set! r4e93@p? (unspecified)) (set! r4e95@make-i/o-encoding-error (unspecified)) (set! r4e97@r4e86 (unspecified)) (set! r4e99@i/o-encoding-error? (unspecified)) (set! r4e9b@i/o-encoding-error-char (unspecified)) (set! r4e9d@&i/o-encoding-rtd (unspecified)) (set! r4e9f@&i/o-encoding-rcd (unspecified)) (set! r4ea5@r4ea0 (unspecified)) (set! r4ea7@r4ea2 (unspecified)) (set! r4ea9@r4ea1 (unspecified)) (set! r4eac@p? (unspecified)) (set! r4eae@make-no-infinities-violation (unspecified)) (set! r4eb0@no-infinities-violation? (unspecified)) (set! r4eb2@&no-infinities-rtd (unspecified)) (set! r4eb4@&no-infinities-rcd (unspecified)) (set! r4eba@r4eb5 (unspecified)) (set! r4ebc@r4eb7 (unspecified)) (set! r4ebe@r4eb6 (unspecified)) (set! r4ec1@p? (unspecified)) (set! r4ec3@make-no-nans-violation (unspecified)) (set! r4ec5@no-nans-violation? (unspecified)) (set! r4ec7@&no-nans-rtd (unspecified)) (set! r4ec9@&no-nans-rcd (unspecified)) (set! r4c0b@r4c06 (make-record-type-descriptor '&condition '#f 'r4c09 '#f '#f '#())) (set! r4eca@r4c0b@r4c06 r4c0b@r4c06) (set! r4c0d@r4c08 '#f) (set! r4ecb@r4c0d@r4c08 r4c0d@r4c08) (set! r4c0f@r4c07 (make-record-constructor-descriptor r4c0b@r4c06 '#f r4c0d@r4c08)) (set! r4ecc@r4c0f@r4c07 r4c0f@r4c07) (set! r4c12@&condition? (record-predicate r4c0b@r4c06)) (set! r4ecd@r4c12@&condition? r4c12@&condition?) (set! r4c14@make-&condition (record-constructor r4c0f@r4c07)) (set! r4ece@r4c14@make-&condition r4c14@make-&condition) (set! r4c16@&condition-rtd r4c0b@r4c06) (set! r4ecf@r4c16@&condition-rtd r4c16@&condition-rtd) (set! r4c18@&condition-rcd r4c0f@r4c07) (set! r4ed0@r4c18@&condition-rcd r4c18@&condition-rcd) (set! r4c64@r4c5f (make-record-type-descriptor '&message r4c0b@r4c06 'r4c62 '#f '#f '#((immutable message)))) (set! r4ed1@r4c64@r4c5f r4c64@r4c5f) (set! r4c66@r4c61 '#f) (set! r4ed2@r4c66@r4c61 r4c66@r4c61) (set! r4c68@r4c60 (make-record-constructor-descriptor r4c64@r4c5f r4c0f@r4c07 r4c66@r4c61)) (set! r4ed3@r4c68@r4c60 r4c68@r4c60) (set! r4c6b@p? (record-predicate r4c64@r4c5f)) (set! r4ed4@r4c6b@p? r4c6b@p?) (set! r4c6d@make-message-condition (record-constructor r4c68@r4c60)) (set! r4ed5@r4c6d@make-message-condition r4c6d@make-message-condition) (set! r4c6f@r4c5e (record-accessor r4c64@r4c5f '0)) (set! r4ed6@r4c6f@r4c5e r4c6f@r4c5e) (set! r4c71@message-condition? (condition-predicate r4c64@r4c5f)) (set! r4ed7@r4c71@message-condition? r4c71@message-condition?) (set! r4c73@condition-message (condition-accessor r4c64@r4c5f r4c6f@r4c5e)) (set! r4ed8@r4c73@condition-message r4c73@condition-message) (set! r4c75@&message-rtd r4c64@r4c5f) (set! r4ed9@r4c75@&message-rtd r4c75@&message-rtd) (set! r4c77@&message-rcd r4c68@r4c60) (set! r4eda@r4c77@&message-rcd r4c77@&message-rcd) (set! r4c7d@r4c78 (make-record-type-descriptor '&warning r4c0b@r4c06 'r4c7b '#f '#f '#())) (set! r4edb@r4c7d@r4c78 r4c7d@r4c78) (set! r4c7f@r4c7a '#f) (set! r4edc@r4c7f@r4c7a r4c7f@r4c7a) (set! r4c81@r4c79 (make-record-constructor-descriptor r4c7d@r4c78 r4c0f@r4c07 r4c7f@r4c7a)) (set! r4edd@r4c81@r4c79 r4c81@r4c79) (set! r4c84@p? (record-predicate r4c7d@r4c78)) (set! r4ede@r4c84@p? r4c84@p?) (set! r4c86@make-warning (record-constructor r4c81@r4c79)) (set! r4edf@r4c86@make-warning r4c86@make-warning) (set! r4c88@warning? (condition-predicate r4c7d@r4c78)) (set! r4ee0@r4c88@warning? r4c88@warning?) (set! r4c8a@&warning-rtd r4c7d@r4c78) (set! r4ee1@r4c8a@&warning-rtd r4c8a@&warning-rtd) (set! r4c8c@&warning-rcd r4c81@r4c79) (set! r4ee2@r4c8c@&warning-rcd r4c8c@&warning-rcd) (set! r4c92@r4c8d (make-record-type-descriptor '&serious r4c0b@r4c06 'r4c90 '#f '#f '#())) (set! r4ee3@r4c92@r4c8d r4c92@r4c8d) (set! r4c94@r4c8f '#f) (set! r4ee4@r4c94@r4c8f r4c94@r4c8f) (set! r4c96@r4c8e (make-record-constructor-descriptor r4c92@r4c8d r4c0f@r4c07 r4c94@r4c8f)) (set! r4ee5@r4c96@r4c8e r4c96@r4c8e) (set! r4c99@p? (record-predicate r4c92@r4c8d)) (set! r4ee6@r4c99@p? r4c99@p?) (set! r4c9b@make-serious-condition (record-constructor r4c96@r4c8e)) (set! r4ee7@r4c9b@make-serious-condition r4c9b@make-serious-condition) (set! r4c9d@serious-condition? (condition-predicate r4c92@r4c8d)) (set! r4ee8@r4c9d@serious-condition? r4c9d@serious-condition?) (set! r4c9f@&serious-rtd r4c92@r4c8d) (set! r4ee9@r4c9f@&serious-rtd r4c9f@&serious-rtd) (set! r4ca1@&serious-rcd r4c96@r4c8e) (set! r4eea@r4ca1@&serious-rcd r4ca1@&serious-rcd) (set! r4ca7@r4ca2 (make-record-type-descriptor '&error r4c92@r4c8d 'r4ca5 '#f '#f '#())) (set! r4eeb@r4ca7@r4ca2 r4ca7@r4ca2) (set! r4ca9@r4ca4 '#f) (set! r4eec@r4ca9@r4ca4 r4ca9@r4ca4) (set! r4cab@r4ca3 (make-record-constructor-descriptor r4ca7@r4ca2 r4c96@r4c8e r4ca9@r4ca4)) (set! r4eed@r4cab@r4ca3 r4cab@r4ca3) (set! r4cae@p? (record-predicate r4ca7@r4ca2)) (set! r4eee@r4cae@p? r4cae@p?) (set! r4cb0@make-error (record-constructor r4cab@r4ca3)) (set! r4eef@r4cb0@make-error r4cb0@make-error) (set! r4cb2@error? (condition-predicate r4ca7@r4ca2)) (set! r4ef0@r4cb2@error? r4cb2@error?) (set! r4cb4@&error-rtd r4ca7@r4ca2) (set! r4ef1@r4cb4@&error-rtd r4cb4@&error-rtd) (set! r4cb6@&error-rcd r4cab@r4ca3) (set! r4ef2@r4cb6@&error-rcd r4cb6@&error-rcd) (set! r4cbc@r4cb7 (make-record-type-descriptor '&violation r4c92@r4c8d 'r4cba '#f '#f '#())) (set! r4ef3@r4cbc@r4cb7 r4cbc@r4cb7) (set! r4cbe@r4cb9 '#f) (set! r4ef4@r4cbe@r4cb9 r4cbe@r4cb9) (set! r4cc0@r4cb8 (make-record-constructor-descriptor r4cbc@r4cb7 r4c96@r4c8e r4cbe@r4cb9)) (set! r4ef5@r4cc0@r4cb8 r4cc0@r4cb8) (set! r4cc3@p? (record-predicate r4cbc@r4cb7)) (set! r4ef6@r4cc3@p? r4cc3@p?) (set! r4cc5@make-violation (record-constructor r4cc0@r4cb8)) (set! r4ef7@r4cc5@make-violation r4cc5@make-violation) (set! r4cc7@violation? (condition-predicate r4cbc@r4cb7)) (set! r4ef8@r4cc7@violation? r4cc7@violation?) (set! r4cc9@&violation-rtd r4cbc@r4cb7) (set! r4ef9@r4cc9@&violation-rtd r4cc9@&violation-rtd) (set! r4ccb@&violation-rcd r4cc0@r4cb8) (set! r4efa@r4ccb@&violation-rcd r4ccb@&violation-rcd) (set! r4cd1@r4ccc (make-record-type-descriptor '&assertion r4cbc@r4cb7 'r4ccf '#f '#f '#())) (set! r4efb@r4cd1@r4ccc r4cd1@r4ccc) (set! r4cd3@r4cce '#f) (set! r4efc@r4cd3@r4cce r4cd3@r4cce) (set! r4cd5@r4ccd (make-record-constructor-descriptor r4cd1@r4ccc r4cc0@r4cb8 r4cd3@r4cce)) (set! r4efd@r4cd5@r4ccd r4cd5@r4ccd) (set! r4cd8@p? (record-predicate r4cd1@r4ccc)) (set! r4efe@r4cd8@p? r4cd8@p?) (set! r4cda@make-assertion-violation (record-constructor r4cd5@r4ccd)) (set! r4eff@r4cda@make-assertion-violation r4cda@make-assertion-violation) (set! r4cdc@assertion-violation? (condition-predicate r4cd1@r4ccc)) (set! r4f00@r4cdc@assertion-violation? r4cdc@assertion-violation?) (set! r4cde@&assertion-rtd r4cd1@r4ccc) (set! r4f01@r4cde@&assertion-rtd r4cde@&assertion-rtd) (set! r4ce0@&assertion-rcd r4cd5@r4ccd) (set! r4f02@r4ce0@&assertion-rcd r4ce0@&assertion-rcd) (set! r4ce8@r4ce3 (make-record-type-descriptor '&irritants r4c0b@r4c06 'r4ce6 '#f '#f '#((immutable irritants)))) (set! r4f03@r4ce8@r4ce3 r4ce8@r4ce3) (set! r4cea@r4ce5 '#f) (set! r4f04@r4cea@r4ce5 r4cea@r4ce5) (set! r4cec@r4ce4 (make-record-constructor-descriptor r4ce8@r4ce3 r4c0f@r4c07 r4cea@r4ce5)) (set! r4f05@r4cec@r4ce4 r4cec@r4ce4) (set! r4cef@p? (record-predicate r4ce8@r4ce3)) (set! r4f06@r4cef@p? r4cef@p?) (set! r4cf1@make-irritants-condition (record-constructor r4cec@r4ce4)) (set! r4f07@r4cf1@make-irritants-condition r4cf1@make-irritants-condition) (set! r4cf3@r4ce2 (record-accessor r4ce8@r4ce3 '0)) (set! r4f08@r4cf3@r4ce2 r4cf3@r4ce2) (set! r4cf5@irritants-condition? (condition-predicate r4ce8@r4ce3)) (set! r4f09@r4cf5@irritants-condition? r4cf5@irritants-condition?) (set! r4cf7@condition-irritants (condition-accessor r4ce8@r4ce3 r4cf3@r4ce2)) (set! r4f0a@r4cf7@condition-irritants r4cf7@condition-irritants) (set! r4cf9@&irritants-rtd r4ce8@r4ce3) (set! r4f0b@r4cf9@&irritants-rtd r4cf9@&irritants-rtd) (set! r4cfb@&irritants-rcd r4cec@r4ce4) (set! r4f0c@r4cfb@&irritants-rcd r4cfb@&irritants-rcd) (set! r4d03@r4cfe (make-record-type-descriptor '&who r4c0b@r4c06 'r4d01 '#f '#f '#((immutable who)))) (set! r4f0d@r4d03@r4cfe r4d03@r4cfe) (set! r4d05@r4d00 '#f) (set! r4f0e@r4d05@r4d00 r4d05@r4d00) (set! r4d07@r4cff (make-record-constructor-descriptor r4d03@r4cfe r4c0f@r4c07 r4d05@r4d00)) (set! r4f0f@r4d07@r4cff r4d07@r4cff) (set! r4d0a@p? (record-predicate r4d03@r4cfe)) (set! r4f10@r4d0a@p? r4d0a@p?) (set! r4d0c@make-who-condition (record-constructor r4d07@r4cff)) (set! r4f11@r4d0c@make-who-condition r4d0c@make-who-condition) (set! r4d0e@r4cfd (record-accessor r4d03@r4cfe '0)) (set! r4f12@r4d0e@r4cfd r4d0e@r4cfd) (set! r4d10@who-condition? (condition-predicate r4d03@r4cfe)) (set! r4f13@r4d10@who-condition? r4d10@who-condition?) (set! r4d12@condition-who (condition-accessor r4d03@r4cfe r4d0e@r4cfd)) (set! r4f14@r4d12@condition-who r4d12@condition-who) (set! r4d14@&who-rtd r4d03@r4cfe) (set! r4f15@r4d14@&who-rtd r4d14@&who-rtd) (set! r4d16@&who-rcd r4d07@r4cff) (set! r4f16@r4d16@&who-rcd r4d16@&who-rcd) (set! r4d1c@r4d17 (make-record-type-descriptor '&non-continuable r4cbc@r4cb7 'r4d1a '#f '#f '#())) (set! r4f17@r4d1c@r4d17 r4d1c@r4d17) (set! r4d1e@r4d19 '#f) (set! r4f18@r4d1e@r4d19 r4d1e@r4d19) (set! r4d20@r4d18 (make-record-constructor-descriptor r4d1c@r4d17 r4cc0@r4cb8 r4d1e@r4d19)) (set! r4f19@r4d20@r4d18 r4d20@r4d18) (set! r4d23@p? (record-predicate r4d1c@r4d17)) (set! r4f1a@r4d23@p? r4d23@p?) (set! r4d25@make-non-continuable-violation (record-constructor r4d20@r4d18)) (set! r4f1b@r4d25@make-non-continuable-violation r4d25@make-non-continuable-violation) (set! r4d27@non-continuable-violation? (condition-predicate r4d1c@r4d17)) (set! r4f1c@r4d27@non-continuable-violation? r4d27@non-continuable-violation?) (set! r4d29@&non-continuable-rtd r4d1c@r4d17) (set! r4f1d@r4d29@&non-continuable-rtd r4d29@&non-continuable-rtd) (set! r4d2b@&non-continuable-rcd r4d20@r4d18) (set! r4f1e@r4d2b@&non-continuable-rcd r4d2b@&non-continuable-rcd) (set! r4d31@r4d2c (make-record-type-descriptor '&implementation-restriction r4cbc@r4cb7 'r4d2f '#f '#f '#())) (set! r4f1f@r4d31@r4d2c r4d31@r4d2c) (set! r4d33@r4d2e '#f) (set! r4f20@r4d33@r4d2e r4d33@r4d2e) (set! r4d35@r4d2d (make-record-constructor-descriptor r4d31@r4d2c r4cc0@r4cb8 r4d33@r4d2e)) (set! r4f21@r4d35@r4d2d r4d35@r4d2d) (set! r4d38@p? (record-predicate r4d31@r4d2c)) (set! r4f22@r4d38@p? r4d38@p?) (set! r4d3a@make-implementation-restriction-violation (record-constructor r4d35@r4d2d)) (set! r4f23@r4d3a@make-implementation-restriction-violation r4d3a@make-implementation-restriction-violation) (set! r4d3c@implementation-restriction-violation? (condition-predicate r4d31@r4d2c)) (set! r4f24@r4d3c@implementation-restriction-violation? r4d3c@implementation-restriction-violation?) (set! r4d3e@&implementation-restriction-rtd r4d31@r4d2c) (set! r4f25@r4d3e@&implementation-restriction-rtd r4d3e@&implementation-restriction-rtd) (set! r4d40@&implementation-restriction-rcd r4d35@r4d2d) (set! r4f26@r4d40@&implementation-restriction-rcd r4d40@&implementation-restriction-rcd) (set! r4d46@r4d41 (make-record-type-descriptor '&lexical r4cbc@r4cb7 'r4d44 '#f '#f '#())) (set! r4f27@r4d46@r4d41 r4d46@r4d41) (set! r4d48@r4d43 '#f) (set! r4f28@r4d48@r4d43 r4d48@r4d43) (set! r4d4a@r4d42 (make-record-constructor-descriptor r4d46@r4d41 r4cc0@r4cb8 r4d48@r4d43)) (set! r4f29@r4d4a@r4d42 r4d4a@r4d42) (set! r4d4d@p? (record-predicate r4d46@r4d41)) (set! r4f2a@r4d4d@p? r4d4d@p?) (set! r4d4f@make-lexical-violation (record-constructor r4d4a@r4d42)) (set! r4f2b@r4d4f@make-lexical-violation r4d4f@make-lexical-violation) (set! r4d51@lexical-violation? (condition-predicate r4d46@r4d41)) (set! r4f2c@r4d51@lexical-violation? r4d51@lexical-violation?) (set! r4d53@&lexical-rtd r4d46@r4d41) (set! r4f2d@r4d53@&lexical-rtd r4d53@&lexical-rtd) (set! r4d55@&lexical-rcd r4d4a@r4d42) (set! r4f2e@r4d55@&lexical-rcd r4d55@&lexical-rcd) (set! r4d5f@r4d5a (make-record-type-descriptor '&syntax r4cbc@r4cb7 'r4d5d '#f '#f '#((immutable form) (immutable subform)))) (set! r4f2f@r4d5f@r4d5a r4d5f@r4d5a) (set! r4d61@r4d5c '#f) (set! r4f30@r4d61@r4d5c r4d61@r4d5c) (set! r4d63@r4d5b (make-record-constructor-descriptor r4d5f@r4d5a r4cc0@r4cb8 r4d61@r4d5c)) (set! r4f31@r4d63@r4d5b r4d63@r4d5b) (set! r4d66@p? (record-predicate r4d5f@r4d5a)) (set! r4f32@r4d66@p? r4d66@p?) (set! r4d68@make-syntax-violation (record-constructor r4d63@r4d5b)) (set! r4f33@r4d68@make-syntax-violation r4d68@make-syntax-violation) (set! r4d6a@r4d57 (record-accessor r4d5f@r4d5a '0)) (set! r4f34@r4d6a@r4d57 r4d6a@r4d57) (set! r4d6c@r4d59 (record-accessor r4d5f@r4d5a '1)) (set! r4f35@r4d6c@r4d59 r4d6c@r4d59) (set! r4d6e@syntax-violation? (condition-predicate r4d5f@r4d5a)) (set! r4f36@r4d6e@syntax-violation? r4d6e@syntax-violation?) (set! r4d70@syntax-violation-form (condition-accessor r4d5f@r4d5a r4d6a@r4d57)) (set! r4f37@r4d70@syntax-violation-form r4d70@syntax-violation-form) (set! r4d72@syntax-violation-subform (condition-accessor r4d5f@r4d5a r4d6c@r4d59)) (set! r4f38@r4d72@syntax-violation-subform r4d72@syntax-violation-subform) (set! r4d74@&syntax-rtd r4d5f@r4d5a) (set! r4f39@r4d74@&syntax-rtd r4d74@&syntax-rtd) (set! r4d76@&syntax-rcd r4d63@r4d5b) (set! r4f3a@r4d76@&syntax-rcd r4d76@&syntax-rcd) (set! r4d7c@r4d77 (make-record-type-descriptor '&undefined r4cbc@r4cb7 'r4d7a '#f '#f '#())) (set! r4f3b@r4d7c@r4d77 r4d7c@r4d77) (set! r4d7e@r4d79 '#f) (set! r4f3c@r4d7e@r4d79 r4d7e@r4d79) (set! r4d80@r4d78 (make-record-constructor-descriptor r4d7c@r4d77 r4cc0@r4cb8 r4d7e@r4d79)) (set! r4f3d@r4d80@r4d78 r4d80@r4d78) (set! r4d83@p? (record-predicate r4d7c@r4d77)) (set! r4f3e@r4d83@p? r4d83@p?) (set! r4d85@make-undefined-violation (record-constructor r4d80@r4d78)) (set! r4f3f@r4d85@make-undefined-violation r4d85@make-undefined-violation) (set! r4d87@undefined-violation? (condition-predicate r4d7c@r4d77)) (set! r4f40@r4d87@undefined-violation? r4d87@undefined-violation?) (set! r4d89@&undefined-rtd r4d7c@r4d77) (set! r4f41@r4d89@&undefined-rtd r4d89@&undefined-rtd) (set! r4d8b@&undefined-rcd r4d80@r4d78) (set! r4f42@r4d8b@&undefined-rcd r4d8b@&undefined-rcd) (set! r4d91@r4d8c (make-record-type-descriptor '&i/o r4ca7@r4ca2 'r4d8f '#f '#f '#())) (set! r4f43@r4d91@r4d8c r4d91@r4d8c) (set! r4d93@r4d8e '#f) (set! r4f44@r4d93@r4d8e r4d93@r4d8e) (set! r4d95@r4d8d (make-record-constructor-descriptor r4d91@r4d8c r4cab@r4ca3 r4d93@r4d8e)) (set! r4f45@r4d95@r4d8d r4d95@r4d8d) (set! r4d98@p? (record-predicate r4d91@r4d8c)) (set! r4f46@r4d98@p? r4d98@p?) (set! r4d9a@make-i/o-error (record-constructor r4d95@r4d8d)) (set! r4f47@r4d9a@make-i/o-error r4d9a@make-i/o-error) (set! r4d9c@i/o-error? (condition-predicate r4d91@r4d8c)) (set! r4f48@r4d9c@i/o-error? r4d9c@i/o-error?) (set! r4d9e@&i/o-rtd r4d91@r4d8c) (set! r4f49@r4d9e@&i/o-rtd r4d9e@&i/o-rtd) (set! r4da0@&i/o-rcd r4d95@r4d8d) (set! r4f4a@r4da0@&i/o-rcd r4da0@&i/o-rcd) (set! r4da6@r4da1 (make-record-type-descriptor '&i/o-read r4d91@r4d8c 'r4da4 '#f '#f '#())) (set! r4f4b@r4da6@r4da1 r4da6@r4da1) (set! r4da8@r4da3 '#f) (set! r4f4c@r4da8@r4da3 r4da8@r4da3) (set! r4daa@r4da2 (make-record-constructor-descriptor r4da6@r4da1 r4d95@r4d8d r4da8@r4da3)) (set! r4f4d@r4daa@r4da2 r4daa@r4da2) (set! r4dad@p? (record-predicate r4da6@r4da1)) (set! r4f4e@r4dad@p? r4dad@p?) (set! r4daf@make-i/o-read-error (record-constructor r4daa@r4da2)) (set! r4f4f@r4daf@make-i/o-read-error r4daf@make-i/o-read-error) (set! r4db1@i/o-read-error? (condition-predicate r4da6@r4da1)) (set! r4f50@r4db1@i/o-read-error? r4db1@i/o-read-error?) (set! r4db3@&i/o-read-rtd r4da6@r4da1) (set! r4f51@r4db3@&i/o-read-rtd r4db3@&i/o-read-rtd) (set! r4db5@&i/o-read-rcd r4daa@r4da2) (set! r4f52@r4db5@&i/o-read-rcd r4db5@&i/o-read-rcd) (set! r4dbb@r4db6 (make-record-type-descriptor '&i/o-write r4d91@r4d8c 'r4db9 '#f '#f '#())) (set! r4f53@r4dbb@r4db6 r4dbb@r4db6) (set! r4dbd@r4db8 '#f) (set! r4f54@r4dbd@r4db8 r4dbd@r4db8) (set! r4dbf@r4db7 (make-record-constructor-descriptor r4dbb@r4db6 r4d95@r4d8d r4dbd@r4db8)) (set! r4f55@r4dbf@r4db7 r4dbf@r4db7) (set! r4dc2@p? (record-predicate r4dbb@r4db6)) (set! r4f56@r4dc2@p? r4dc2@p?) (set! r4dc4@make-i/o-write-error (record-constructor r4dbf@r4db7)) (set! r4f57@r4dc4@make-i/o-write-error r4dc4@make-i/o-write-error) (set! r4dc6@i/o-write-error? (condition-predicate r4dbb@r4db6)) (set! r4f58@r4dc6@i/o-write-error? r4dc6@i/o-write-error?) (set! r4dc8@&i/o-write-rtd r4dbb@r4db6) (set! r4f59@r4dc8@&i/o-write-rtd r4dc8@&i/o-write-rtd) (set! r4dca@&i/o-write-rcd r4dbf@r4db7) (set! r4f5a@r4dca@&i/o-write-rcd r4dca@&i/o-write-rcd) (set! r4dd2@r4dcd (make-record-type-descriptor '&i/o-invalid-position r4d91@r4d8c 'r4dd0 '#f '#f '#((immutable position)))) (set! r4f5b@r4dd2@r4dcd r4dd2@r4dcd) (set! r4dd4@r4dcf '#f) (set! r4f5c@r4dd4@r4dcf r4dd4@r4dcf) (set! r4dd6@r4dce (make-record-constructor-descriptor r4dd2@r4dcd r4d95@r4d8d r4dd4@r4dcf)) (set! r4f5d@r4dd6@r4dce r4dd6@r4dce) (set! r4dd9@p? (record-predicate r4dd2@r4dcd)) (set! r4f5e@r4dd9@p? r4dd9@p?) (set! r4ddb@make-i/o-invalid-position-error (record-constructor r4dd6@r4dce)) (set! r4f5f@r4ddb@make-i/o-invalid-position-error r4ddb@make-i/o-invalid-position-error) (set! r4ddd@r4dcc (record-accessor r4dd2@r4dcd '0)) (set! r4f60@r4ddd@r4dcc r4ddd@r4dcc) (set! r4ddf@i/o-invalid-position-error? (condition-predicate r4dd2@r4dcd)) (set! r4f61@r4ddf@i/o-invalid-position-error? r4ddf@i/o-invalid-position-error?) (set! r4de1@i/o-error-position (condition-accessor r4dd2@r4dcd r4ddd@r4dcc)) (set! r4f62@r4de1@i/o-error-position r4de1@i/o-error-position) (set! r4de3@&i/o-invalid-position-rtd r4dd2@r4dcd) (set! r4f63@r4de3@&i/o-invalid-position-rtd r4de3@&i/o-invalid-position-rtd) (set! r4de5@&i/o-invalid-position-rcd r4dd6@r4dce) (set! r4f64@r4de5@&i/o-invalid-position-rcd r4de5@&i/o-invalid-position-rcd) (set! r4ded@r4de8 (make-record-type-descriptor '&i/o-filename r4d91@r4d8c 'r4deb '#f '#f '#((immutable filename)))) (set! r4f65@r4ded@r4de8 r4ded@r4de8) (set! r4def@r4dea '#f) (set! r4f66@r4def@r4dea r4def@r4dea) (set! r4df1@r4de9 (make-record-constructor-descriptor r4ded@r4de8 r4d95@r4d8d r4def@r4dea)) (set! r4f67@r4df1@r4de9 r4df1@r4de9) (set! r4df4@p? (record-predicate r4ded@r4de8)) (set! r4f68@r4df4@p? r4df4@p?) (set! r4df6@make-i/o-filename-error (record-constructor r4df1@r4de9)) (set! r4f69@r4df6@make-i/o-filename-error r4df6@make-i/o-filename-error) (set! r4df8@r4de7 (record-accessor r4ded@r4de8 '0)) (set! r4f6a@r4df8@r4de7 r4df8@r4de7) (set! r4dfa@i/o-filename-error? (condition-predicate r4ded@r4de8)) (set! r4f6b@r4dfa@i/o-filename-error? r4dfa@i/o-filename-error?) (set! r4dfc@i/o-error-filename (condition-accessor r4ded@r4de8 r4df8@r4de7)) (set! r4f6c@r4dfc@i/o-error-filename r4dfc@i/o-error-filename) (set! r4dfe@&i/o-filename-rtd r4ded@r4de8) (set! r4f6d@r4dfe@&i/o-filename-rtd r4dfe@&i/o-filename-rtd) (set! r4e00@&i/o-filename-rcd r4df1@r4de9) (set! r4f6e@r4e00@&i/o-filename-rcd r4e00@&i/o-filename-rcd) (set! r4e06@r4e01 (make-record-type-descriptor '&i/o-file-protection r4ded@r4de8 'r4e04 '#f '#f '#())) (set! r4f6f@r4e06@r4e01 r4e06@r4e01) (set! r4e08@r4e03 '#f) (set! r4f70@r4e08@r4e03 r4e08@r4e03) (set! r4e0a@r4e02 (make-record-constructor-descriptor r4e06@r4e01 r4df1@r4de9 r4e08@r4e03)) (set! r4f71@r4e0a@r4e02 r4e0a@r4e02) (set! r4e0d@p? (record-predicate r4e06@r4e01)) (set! r4f72@r4e0d@p? r4e0d@p?) (set! r4e0f@make-i/o-file-protection-error (record-constructor r4e0a@r4e02)) (set! r4f73@r4e0f@make-i/o-file-protection-error r4e0f@make-i/o-file-protection-error) (set! r4e11@i/o-file-protection-error? (condition-predicate r4e06@r4e01)) (set! r4f74@r4e11@i/o-file-protection-error? r4e11@i/o-file-protection-error?) (set! r4e13@&i/o-file-protection-rtd r4e06@r4e01) (set! r4f75@r4e13@&i/o-file-protection-rtd r4e13@&i/o-file-protection-rtd) (set! r4e15@&i/o-file-protection-rcd r4e0a@r4e02) (set! r4f76@r4e15@&i/o-file-protection-rcd r4e15@&i/o-file-protection-rcd) (set! r4e1b@r4e16 (make-record-type-descriptor '&i/o-file-is-read-only r4e06@r4e01 'r4e19 '#f '#f '#())) (set! r4f77@r4e1b@r4e16 r4e1b@r4e16) (set! r4e1d@r4e18 '#f) (set! r4f78@r4e1d@r4e18 r4e1d@r4e18) (set! r4e1f@r4e17 (make-record-constructor-descriptor r4e1b@r4e16 r4e0a@r4e02 r4e1d@r4e18)) (set! r4f79@r4e1f@r4e17 r4e1f@r4e17) (set! r4e22@p? (record-predicate r4e1b@r4e16)) (set! r4f7a@r4e22@p? r4e22@p?) (set! r4e24@make-i/o-file-is-read-only-error (record-constructor r4e1f@r4e17)) (set! r4f7b@r4e24@make-i/o-file-is-read-only-error r4e24@make-i/o-file-is-read-only-error) (set! r4e26@i/o-file-is-read-only-error? (condition-predicate r4e1b@r4e16)) (set! r4f7c@r4e26@i/o-file-is-read-only-error? r4e26@i/o-file-is-read-only-error?) (set! r4e28@&i/o-file-is-read-only-rtd r4e1b@r4e16) (set! r4f7d@r4e28@&i/o-file-is-read-only-rtd r4e28@&i/o-file-is-read-only-rtd) (set! r4e2a@&i/o-file-is-read-only-rcd r4e1f@r4e17) (set! r4f7e@r4e2a@&i/o-file-is-read-only-rcd r4e2a@&i/o-file-is-read-only-rcd) (set! r4e30@r4e2b (make-record-type-descriptor '&i/o-file-already-exists r4ded@r4de8 'r4e2e '#f '#f '#())) (set! r4f7f@r4e30@r4e2b r4e30@r4e2b) (set! r4e32@r4e2d '#f) (set! r4f80@r4e32@r4e2d r4e32@r4e2d) (set! r4e34@r4e2c (make-record-constructor-descriptor r4e30@r4e2b r4df1@r4de9 r4e32@r4e2d)) (set! r4f81@r4e34@r4e2c r4e34@r4e2c) (set! r4e37@p? (record-predicate r4e30@r4e2b)) (set! r4f82@r4e37@p? r4e37@p?) (set! r4e39@make-i/o-file-already-exists-error (record-constructor r4e34@r4e2c)) (set! r4f83@r4e39@make-i/o-file-already-exists-error r4e39@make-i/o-file-already-exists-error) (set! r4e3b@i/o-file-already-exists-error? (condition-predicate r4e30@r4e2b)) (set! r4f84@r4e3b@i/o-file-already-exists-error? r4e3b@i/o-file-already-exists-error?) (set! r4e3d@&i/o-file-already-exists-rtd r4e30@r4e2b) (set! r4f85@r4e3d@&i/o-file-already-exists-rtd r4e3d@&i/o-file-already-exists-rtd) (set! r4e3f@&i/o-file-already-exists-rcd r4e34@r4e2c) (set! r4f86@r4e3f@&i/o-file-already-exists-rcd r4e3f@&i/o-file-already-exists-rcd) (set! r4e45@r4e40 (make-record-type-descriptor '&i/o-file-does-not-exist r4ded@r4de8 'r4e43 '#f '#f '#())) (set! r4f87@r4e45@r4e40 r4e45@r4e40) (set! r4e47@r4e42 '#f) (set! r4f88@r4e47@r4e42 r4e47@r4e42) (set! r4e49@r4e41 (make-record-constructor-descriptor r4e45@r4e40 r4df1@r4de9 r4e47@r4e42)) (set! r4f89@r4e49@r4e41 r4e49@r4e41) (set! r4e4c@p? (record-predicate r4e45@r4e40)) (set! r4f8a@r4e4c@p? r4e4c@p?) (set! r4e4e@make-i/o-file-does-not-exist-error (record-constructor r4e49@r4e41)) (set! r4f8b@r4e4e@make-i/o-file-does-not-exist-error r4e4e@make-i/o-file-does-not-exist-error) (set! r4e50@i/o-file-does-not-exist-error? (condition-predicate r4e45@r4e40)) (set! r4f8c@r4e50@i/o-file-does-not-exist-error? r4e50@i/o-file-does-not-exist-error?) (set! r4e52@&i/o-file-does-not-exist-rtd r4e45@r4e40) (set! r4f8d@r4e52@&i/o-file-does-not-exist-rtd r4e52@&i/o-file-does-not-exist-rtd) (set! r4e54@&i/o-file-does-not-exist-rcd r4e49@r4e41) (set! r4f8e@r4e54@&i/o-file-does-not-exist-rcd r4e54@&i/o-file-does-not-exist-rcd) (set! r4e5c@r4e57 (make-record-type-descriptor '&i/o-port r4d91@r4d8c 'r4e5a '#f '#f '#((immutable port)))) (set! r4f8f@r4e5c@r4e57 r4e5c@r4e57) (set! r4e5e@r4e59 '#f) (set! r4f90@r4e5e@r4e59 r4e5e@r4e59) (set! r4e60@r4e58 (make-record-constructor-descriptor r4e5c@r4e57 r4d95@r4d8d r4e5e@r4e59)) (set! r4f91@r4e60@r4e58 r4e60@r4e58) (set! r4e63@p? (record-predicate r4e5c@r4e57)) (set! r4f92@r4e63@p? r4e63@p?) (set! r4e65@make-i/o-port-error (record-constructor r4e60@r4e58)) (set! r4f93@r4e65@make-i/o-port-error r4e65@make-i/o-port-error) (set! r4e67@r4e56 (record-accessor r4e5c@r4e57 '0)) (set! r4f94@r4e67@r4e56 r4e67@r4e56) (set! r4e69@i/o-port-error? (condition-predicate r4e5c@r4e57)) (set! r4f95@r4e69@i/o-port-error? r4e69@i/o-port-error?) (set! r4e6b@i/o-error-port (condition-accessor r4e5c@r4e57 r4e67@r4e56)) (set! r4f96@r4e6b@i/o-error-port r4e6b@i/o-error-port) (set! r4e6d@&i/o-port-rtd r4e5c@r4e57) (set! r4f97@r4e6d@&i/o-port-rtd r4e6d@&i/o-port-rtd) (set! r4e6f@&i/o-port-rcd r4e60@r4e58) (set! r4f98@r4e6f@&i/o-port-rcd r4e6f@&i/o-port-rcd) (set! r4e75@r4e70 (make-record-type-descriptor '&i/o-decoding r4e5c@r4e57 'r4e73 '#f '#f '#())) (set! r4f99@r4e75@r4e70 r4e75@r4e70) (set! r4e77@r4e72 '#f) (set! r4f9a@r4e77@r4e72 r4e77@r4e72) (set! r4e79@r4e71 (make-record-constructor-descriptor r4e75@r4e70 r4e60@r4e58 r4e77@r4e72)) (set! r4f9b@r4e79@r4e71 r4e79@r4e71) (set! r4e7c@p? (record-predicate r4e75@r4e70)) (set! r4f9c@r4e7c@p? r4e7c@p?) (set! r4e7e@make-i/o-decoding-error (record-constructor r4e79@r4e71)) (set! r4f9d@r4e7e@make-i/o-decoding-error r4e7e@make-i/o-decoding-error) (set! r4e80@i/o-decoding-error? (condition-predicate r4e75@r4e70)) (set! r4f9e@r4e80@i/o-decoding-error? r4e80@i/o-decoding-error?) (set! r4e82@&i/o-decoding-rtd r4e75@r4e70) (set! r4f9f@r4e82@&i/o-decoding-rtd r4e82@&i/o-decoding-rtd) (set! r4e84@&i/o-decoding-rcd r4e79@r4e71) (set! r4fa0@r4e84@&i/o-decoding-rcd r4e84@&i/o-decoding-rcd) (set! r4e8c@r4e87 (make-record-type-descriptor '&i/o-encoding r4e5c@r4e57 'r4e8a '#f '#f '#((immutable char)))) (set! r4fa1@r4e8c@r4e87 r4e8c@r4e87) (set! r4e8e@r4e89 '#f) (set! r4fa2@r4e8e@r4e89 r4e8e@r4e89) (set! r4e90@r4e88 (make-record-constructor-descriptor r4e8c@r4e87 r4e60@r4e58 r4e8e@r4e89)) (set! r4fa3@r4e90@r4e88 r4e90@r4e88) (set! r4e93@p? (record-predicate r4e8c@r4e87)) (set! r4fa4@r4e93@p? r4e93@p?) (set! r4e95@make-i/o-encoding-error (record-constructor r4e90@r4e88)) (set! r4fa5@r4e95@make-i/o-encoding-error r4e95@make-i/o-encoding-error) (set! r4e97@r4e86 (record-accessor r4e8c@r4e87 '0)) (set! r4fa6@r4e97@r4e86 r4e97@r4e86) (set! r4e99@i/o-encoding-error? (condition-predicate r4e8c@r4e87)) (set! r4fa7@r4e99@i/o-encoding-error? r4e99@i/o-encoding-error?) (set! r4e9b@i/o-encoding-error-char (condition-accessor r4e8c@r4e87 r4e97@r4e86)) (set! r4fa8@r4e9b@i/o-encoding-error-char r4e9b@i/o-encoding-error-char) (set! r4e9d@&i/o-encoding-rtd r4e8c@r4e87) (set! r4fa9@r4e9d@&i/o-encoding-rtd r4e9d@&i/o-encoding-rtd) (set! r4e9f@&i/o-encoding-rcd r4e90@r4e88) (set! r4faa@r4e9f@&i/o-encoding-rcd r4e9f@&i/o-encoding-rcd) (set! r4ea5@r4ea0 (make-record-type-descriptor '&no-infinities r4d31@r4d2c 'r4ea3 '#f '#f '#())) (set! r4fab@r4ea5@r4ea0 r4ea5@r4ea0) (set! r4ea7@r4ea2 '#f) (set! r4fac@r4ea7@r4ea2 r4ea7@r4ea2) (set! r4ea9@r4ea1 (make-record-constructor-descriptor r4ea5@r4ea0 r4d35@r4d2d r4ea7@r4ea2)) (set! r4fad@r4ea9@r4ea1 r4ea9@r4ea1) (set! r4eac@p? (record-predicate r4ea5@r4ea0)) (set! r4fae@r4eac@p? r4eac@p?) (set! r4eae@make-no-infinities-violation (record-constructor r4ea9@r4ea1)) (set! r4faf@r4eae@make-no-infinities-violation r4eae@make-no-infinities-violation) (set! r4eb0@no-infinities-violation? (condition-predicate r4ea5@r4ea0)) (set! r4fb0@r4eb0@no-infinities-violation? r4eb0@no-infinities-violation?) (set! r4eb2@&no-infinities-rtd r4ea5@r4ea0) (set! r4fb1@r4eb2@&no-infinities-rtd r4eb2@&no-infinities-rtd) (set! r4eb4@&no-infinities-rcd r4ea9@r4ea1) (set! r4fb2@r4eb4@&no-infinities-rcd r4eb4@&no-infinities-rcd) (set! r4eba@r4eb5 (make-record-type-descriptor '&no-nans r4d31@r4d2c 'r4eb8 '#f '#f '#())) (set! r4fb3@r4eba@r4eb5 r4eba@r4eb5) (set! r4ebc@r4eb7 '#f) (set! r4fb4@r4ebc@r4eb7 r4ebc@r4eb7) (set! r4ebe@r4eb6 (make-record-constructor-descriptor r4eba@r4eb5 r4d35@r4d2d r4ebc@r4eb7)) (set! r4fb5@r4ebe@r4eb6 r4ebe@r4eb6) (set! r4ec1@p? (record-predicate r4eba@r4eb5)) (set! r4fb6@r4ec1@p? r4ec1@p?) (set! r4ec3@make-no-nans-violation (record-constructor r4ebe@r4eb6)) (set! r4fb7@r4ec3@make-no-nans-violation r4ec3@make-no-nans-violation) (set! r4ec5@no-nans-violation? (condition-predicate r4eba@r4eb5)) (set! r4fb8@r4ec5@no-nans-violation? r4ec5@no-nans-violation?) (set! r4ec7@&no-nans-rtd r4eba@r4eb5) (set! r4fb9@r4ec7@&no-nans-rtd r4ec7@&no-nans-rtd) (set! r4ec9@&no-nans-rcd r4ebe@r4eb6) (set! r4fba@r4ec9@&no-nans-rcd r4ec9@&no-nans-rcd) (void))
(begin (begin (r2a56@r2a0b@current-primitive-locations (lambda (r5485@x) (let ((r5487@t (assq r5485@x '((&no-nans-rcd . r4fba@r4ec9@&no-nans-rcd) (&no-nans-rtd . r4fb9@r4ec7@&no-nans-rtd) (&no-infinities-rcd . r4fb2@r4eb4@&no-infinities-rcd) (&no-infinities-rtd . r4fb1@r4eb2@&no-infinities-rtd) (&i/o-encoding-rcd . r4faa@r4e9f@&i/o-encoding-rcd) (&i/o-encoding-rtd . r4fa9@r4e9d@&i/o-encoding-rtd) (&i/o-decoding-rcd . r4fa0@r4e84@&i/o-decoding-rcd) (&i/o-decoding-rtd . r4f9f@r4e82@&i/o-decoding-rtd) (&i/o-port-rcd . r4f98@r4e6f@&i/o-port-rcd) (&i/o-port-rtd . r4f97@r4e6d@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . r4f8e@r4e54@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . r4f8d@r4e52@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . r4f86@r4e3f@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . r4f85@r4e3d@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . r4f7e@r4e2a@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . r4f7d@r4e28@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . r4f76@r4e15@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . r4f75@r4e13@&i/o-file-protection-rtd) (&i/o-filename-rcd . r4f6e@r4e00@&i/o-filename-rcd) (&i/o-filename-rtd . r4f6d@r4dfe@&i/o-filename-rtd) (&i/o-invalid-position-rcd . r4f64@r4de5@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . r4f63@r4de3@&i/o-invalid-position-rtd) (&i/o-write-rcd . r4f5a@r4dca@&i/o-write-rcd) (&i/o-write-rtd . r4f59@r4dc8@&i/o-write-rtd) (&i/o-read-rcd . r4f52@r4db5@&i/o-read-rcd) (&i/o-read-rtd . r4f51@r4db3@&i/o-read-rtd) (&i/o-rcd . r4f4a@r4da0@&i/o-rcd) (&i/o-rtd . r4f49@r4d9e@&i/o-rtd) (&undefined-rcd . r4f42@r4d8b@&undefined-rcd) (&undefined-rtd . r4f41@r4d89@&undefined-rtd) (&syntax-rcd . r4f3a@r4d76@&syntax-rcd) (&syntax-rtd . r4f39@r4d74@&syntax-rtd) (&lexical-rcd . r4f2e@r4d55@&lexical-rcd) (&lexical-rtd . r4f2d@r4d53@&lexical-rtd) (&implementation-restriction-rcd . r4f26@r4d40@&implementation-restriction-rcd) (&implementation-restriction-rtd . r4f25@r4d3e@&implementation-restriction-rtd) (&non-continuable-rcd . r4f1e@r4d2b@&non-continuable-rcd) (&non-continuable-rtd . r4f1d@r4d29@&non-continuable-rtd) (&who-rcd . r4f16@r4d16@&who-rcd) (&who-rtd . r4f15@r4d14@&who-rtd) (&irritants-rcd . r4f0c@r4cfb@&irritants-rcd) (&irritants-rtd . r4f0b@r4cf9@&irritants-rtd) (&assertion-rcd . r4f02@r4ce0@&assertion-rcd) (&assertion-rtd . r4f01@r4cde@&assertion-rtd) (&violation-rcd . r4efa@r4ccb@&violation-rcd) (&violation-rtd . r4ef9@r4cc9@&violation-rtd) (&error-rcd . r4ef2@r4cb6@&error-rcd) (&error-rtd . r4ef1@r4cb4@&error-rtd) (&serious-rcd . r4eea@r4ca1@&serious-rcd) (&serious-rtd . r4ee9@r4c9f@&serious-rtd) (&warning-rcd . r4ee2@r4c8c@&warning-rcd) (&warning-rtd . r4ee1@r4c8a@&warning-rtd) (&message-rcd . r4eda@r4c77@&message-rcd) (&message-rtd . r4ed9@r4c75@&message-rtd) (&condition-rcd . r4ed0@r4c18@&condition-rcd) (&condition-rtd . r4ecf@r4c16@&condition-rtd) (syntax-error . r4bf2@r3196@syntax-error) (syntax-dispatch . r4b90@r30ba@syntax-dispatch) (load . r512f@r4fda@load) (interaction-environment . r4bfb@r31a8@interaction-environment) (library-path . r2cbd@r2af9@library-path) (mosh-cache-dir . r2a04@r28e3@mosh-cache-dir) (make-parameter . r2a03@r28e1@make-parameter) (make-variable-transformer . r4b4d@r2ee5@make-variable-transformer) (identifier? . r4bf5@r319c@identifier?) (generate-temporaries . r4beb@r3188@generate-temporaries) (free-identifier=? . r4bec@r318a@free-identifier=?) (syntax->datum . r4bf7@r31a0@syntax->datum) (datum->syntax . r4bf6@r319e@datum->syntax) (bound-identifier=? . r4bed@r318c@bound-identifier=?) (make-i/o-write-error . r4f57@r4dc4@make-i/o-write-error) (make-i/o-read-error . r4f4f@r4daf@make-i/o-read-error) (make-i/o-port-error . r4f93@r4e65@make-i/o-port-error) (make-i/o-invalid-position-error . r4f5f@r4ddb@make-i/o-invalid-position-error) (make-i/o-filename-error . r4f69@r4df6@make-i/o-filename-error) (make-i/o-file-protection-error . r4f73@r4e0f@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . r4f7b@r4e24@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . r4f8b@r4e4e@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . r4f83@r4e39@make-i/o-file-already-exists-error) (make-i/o-error . r4f47@r4d9a@make-i/o-error) (make-i/o-encoding-error . r4fa5@r4e95@make-i/o-encoding-error) (make-i/o-decoding-error . r4f9d@r4e7e@make-i/o-decoding-error) (i/o-write-error? . r4f58@r4dc6@i/o-write-error?) (i/o-read-error? . r4f50@r4db1@i/o-read-error?) (i/o-port-error? . r4f95@r4e69@i/o-port-error?) (i/o-invalid-position-error? . r4f61@r4ddf@i/o-invalid-position-error?) (i/o-filename-error? . r4f6b@r4dfa@i/o-filename-error?) (i/o-file-protection-error? . r4f74@r4e11@i/o-file-protection-error?) (i/o-file-is-read-only-error? . r4f7c@r4e26@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . r4f8c@r4e50@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . r4f84@r4e3b@i/o-file-already-exists-error?) (i/o-error? . r4f48@r4d9c@i/o-error?) (i/o-error-position . r4f62@r4de1@i/o-error-position) (i/o-error-port . r4f96@r4e6b@i/o-error-port) (i/o-error-filename . r4f6c@r4dfc@i/o-error-filename) (i/o-encoding-error? . r4fa7@r4e99@i/o-encoding-error?) (i/o-encoding-error-char . r4fa8@r4e9b@i/o-encoding-error-char) (i/o-decoding-error? . r4f9e@r4e80@i/o-decoding-error?) (scheme-report-environment . r4be2@r3176@scheme-report-environment) (null-environment . r4be1@r3174@null-environment) (command-line . r512c@r4fd4@command-line) (eval . r4be4@r317a@eval) (environment . r4be0@r3172@environment) (who-condition? . r4f13@r4d10@who-condition?) (warning? . r4ee0@r4c88@warning?) (violation? . r4ef8@r4cc7@violation?) (undefined-violation? . r4f40@r4d87@undefined-violation?) (syntax-violation? . r4f36@r4d6e@syntax-violation?) (syntax-violation-subform . r4f38@r4d72@syntax-violation-subform) (syntax-violation-form . r4f37@r4d70@syntax-violation-form) (syntax-violation . r4bf4@r319a@syntax-violation) (serious-condition? . r4ee8@r4c9d@serious-condition?) (non-continuable-violation? . r4f1c@r4d27@non-continuable-violation?) (message-condition? . r4ed7@r4c71@message-condition?) (make-who-condition . r4f11@r4d0c@make-who-condition) (make-warning . r4edf@r4c86@make-warning) (make-violation . r4ef7@r4cc5@make-violation) (make-undefined-violation . r4f3f@r4d85@make-undefined-violation) (make-syntax-violation . r4f33@r4d68@make-syntax-violation) (make-serious-condition . r4ee7@r4c9b@make-serious-condition) (make-non-continuable-violation . r4f1b@r4d25@make-non-continuable-violation) (make-message-condition . r4ed5@r4c6d@make-message-condition) (make-lexical-violation . r4f2b@r4d4f@make-lexical-violation) (make-irritants-condition . r4f07@r4cf1@make-irritants-condition) (make-implementation-restriction-violation . r4f23@r4d3a@make-implementation-restriction-violation) (make-error . r4eef@r4cb0@make-error) (make-assertion-violation . r4eff@r4cda@make-assertion-violation) (lexical-violation? . r4f2c@r4d51@lexical-violation?) (irritants-condition? . r4f09@r4cf5@irritants-condition?) (implementation-restriction-violation? . r4f24@r4d3c@implementation-restriction-violation?) (error? . r4ef0@r4cb2@error?) (condition-who . r4f14@r4d12@condition-who) (condition-message . r4ed8@r4c73@condition-message) (condition-irritants . r4f0a@r4cf7@condition-irritants) (assertion-violation? . r4f00@r4cdc@assertion-violation?) (no-nans-violation? . r4fb8@r4ec5@no-nans-violation?) (no-infinities-violation? . r4fb0@r4eb0@no-infinities-violation?) (make-no-nans-violation . r4fb7@r4ec3@make-no-nans-violation) (make-no-infinities-violation . r4faf@r4eae@make-no-infinities-violation) (assertion-error . r4bf1@r3194@assertion-error))))) (if r5487@t (cdr r5487@t) '#f)))) (r2ccd@r2b19@install-library 'r5462 '(mosh interaction) '() '() '() '() '((regexp? . r545a) (alist->eq-hash-table . r5456) (format . r5453) (string-split . r5448) (call-process . r5442) (set-current-directory! . r543e) (expand-path . r543d) (current-directory . r543c) (%spawn . r543b) (%waitpid . r543a) (simple-struct-name . r5439) (simple-struct-set! . r5438) (simple-struct-ref . r5437) (make-simple-struct . r5436) (simple-struct? . r5435) (pointer-ref-c-int64 . r5434) (pointer-ref-c-int32 . r5433) (pointer-ref-c-int16 . r5432) (pointer-ref-c-int8 . r5431) (pointer-ref-c-uint64 . r5430) (pointer-ref-c-uint32 . r542f) (pointer-ref-c-uint16 . r542e) (pointer-ref-c-uint8 . r542d) (pointer-set-c-uint64! . r542c) (pointer-set-c-uint32! . r542b) (pointer-set-c-uint16! . r542a) (pointer-set-c-uint8! . r5429) (pointer-set-c-int64! . r5428) (pointer-set-c-int32! . r5427) (pointer-set-c-int16! . r5426) (pointer-set-c-int8! . r5425) (pointer-set-c-pointer! . r5424) (pointer-set-c-double! . r5423) (pointer-set-c-float! . r5422) (pointer-set-c-long-long! . r5421) (pointer-set-c-long! . r5420) (pointer-set-c-int! . r541f) (pointer-set-c-short! . r541e) (pointer-set-c-char! . r541d) (pointer-ref-c-pointer . r541c) (pointer-ref-c-double . r541b) (pointer-ref-c-float . r541a) (pointer-ref-c-unsigned-long-long . r5419) (pointer-ref-c-signed-long-long . r5418) (pointer-ref-c-unsigned-long . r5417) (pointer-ref-c-signed-long . r5416) (pointer-ref-c-unsigned-int . r5415) (pointer-ref-c-signed-int . r5414) (pointer-ref-c-unsigned-short . r5413) (pointer-ref-c-signed-short . r5412) (pointer-ref-c-unsigned-char . r5411) (pointer-ref-c-signed-char . r5410) (pointer->integer . r540f) (integer->pointer . r540e) (pointer? . r540d) (shared-errno . r540c) (%ffi-supported? . r5407) (%ffi-pointer->string . r5406) (%ffi-call . r5405) (%ffi-lookup . r5404) (%ffi-open . r5403) (null-terminated-utf8->string . r5402) (null-terminated-bytevector->string . r5401) (%fork . r5400) (%pipe . r53ff) (p . r53fe) (whereis . r53e2) (register . r53e1) (vm-join! . r53e0) (vm-set-value! . r53df) (vm? . r53de) (main-vm? . r53dd) (vm-eval . r53dc) (vm-self . r53db) (vm-start! . r53da) (make-vm . r53d9) (mutex-try-lock! . r53d8) (mutex-unlock! . r53d7) (mutex-lock! . r53d6) (mutex? . r53d5) (make-mutex . r53d4) (condition-variable-notify-all! . r53d3) (condition-variable-notify! . r53d2) (condition-variable-wait! . r53d1) (make-condition-variable . r53d0) (string-upcase . r53b8) (string-titlecase . r53b7) (string-normalize-nfkd . r53b6) (string-normalize-nfkc . r53b5) (string-normalize-nfd . r53b4) (string-normalize-nfc . r53b3) (string-foldcase . r53b2) (string-downcase . r53b1) (string-ci>? . r53b0) (string-ci>=? . r53af) (string-ci=? . r53ae) (string-ci<? . r53ad) (string-ci<=? . r53ac) (char-whitespace? . r53ab) (char-upper-case? . r53aa) (char-title-case? . r53a9) (char-numeric? . r53a8) (char-lower-case? . r53a7) (char-general-category . r53a6) (char-upcase . r53a5) (char-titlecase . r53a4) (char-foldcase . r53a3) (char-downcase . r53a2) (char-ci>? . r53a1) (char-ci>=? . r53a0) (char-ci=? . r539f) (char-ci<? . r539e) (char-ci<=? . r539d) (char-alphabetic? . r539c) (make-variable-transformer . r2ee4) (identifier? . r319b) (generate-temporaries . r3187) (free-identifier=? . r3189) (syntax->datum . r319f) (datum->syntax . r319d) (bound-identifier=? . r318b) (record-type-descriptor? . r539b) (record-predicate . r539a) (record-mutator . r5399) (record-constructor . r5398) (record-accessor . r5397) (make-record-type-descriptor . r5396) (make-record-constructor-descriptor . r5395) (record? . r5394) (record-type-uid . r5393) (record-type-sealed? . r5392) (record-type-parent . r5391) (record-type-opaque? . r5390) (record-type-name . r538f) (record-type-generative? . r538e) (record-type-field-names . r538d) (record-rtd . r538c) (record-field-mutable? . r538b) (delete-file . r538a) (file-exists? . r5389) (vector-sort! . r5388) (vector-sort . r5387) (list-sort . r5386) (symbol-hash . r5385) (string-ci-hash . r5384) (string-hash . r5383) (equal-hash . r5382) (hashtable-equivalence-function . r5381) (make-hashtable . r5380) (hashtable-hash-function . r537f) (make-eqv-hashtable . r537e) (make-eq-hashtable . r537d) (hashtable? . r537c) (hashtable-update! . r537b) (hashtable-size . r537a) (hashtable-set! . r5379) (hashtable-ref . r5378) (hashtable-mutable? . r5377) (hashtable-keys . r5376) (hashtable-entries . r5375) (hashtable-delete! . r5374) (hashtable-copy . r5373) (hashtable-contains? . r5372) (hashtable-clear! . r5371) (call-with-output-file . r5370) (call-with-input-file . r536f) (write-char . r536e) (write . r536d) (with-output-to-file . r536c) (with-input-from-file . r536b) (read-char . r536a) (read . r5369) (peek-char . r5368) (open-output-file . r5367) (open-input-file . r5366) (newline . r5365) (display . r5364) (close-output-port . r5363) (close-input-port . r5362) (eof-object? . r5361) (eof-object . r5360) (current-error-port . r535f) (current-output-port . r535e) (current-input-port . r535d) (output-port? . r535c) (input-port? . r535b) (utf-8-codec . r535a) (utf-16-codec . r5359) (transcoder-error-handling-mode . r5358) (transcoder-eol-style . r5357) (transcoder-codec . r5356) (transcoded-port . r5355) (textual-port? . r5354) (string->bytevector . r5353) (standard-output-port . r5352) (standard-input-port . r5351) (standard-error-port . r5350) (set-port-position! . r534f) (put-u8 . r534e) (put-string . r534d) (put-datum . r534c) (put-char . r534b) (put-bytevector . r534a) (port? . r5349) (port-transcoder . r5348) (port-position . r5347) (port-has-set-port-position!? . r5346) (port-has-port-position? . r5345) (port-eof? . r5344) (output-port-buffer-mode . r5343) (open-string-output-port . r5342) (open-string-input-port . r5341) (open-file-output-port . r5340) (open-file-input/output-port . r533f) (open-file-input-port . r533e) (open-bytevector-output-port . r533d) (open-bytevector-input-port . r533c) (native-transcoder . r533b) (native-eol-style . r533a) (make-transcoder . r5339) (latin-1-codec . r5338) (make-i/o-write-error . r4dc3) (make-i/o-read-error . r4dae) (make-i/o-port-error . r4e64) (make-i/o-invalid-position-error . r4dda) (make-i/o-filename-error . r4df5) (make-i/o-file-protection-error . r4e0e) (make-i/o-file-is-read-only-error . r4e23) (make-i/o-file-does-not-exist-error . r4e4d) (make-i/o-file-already-exists-error . r4e38) (make-i/o-error . r4d99) (make-i/o-encoding-error . r4e94) (make-i/o-decoding-error . r4e7d) (make-custom-textual-output-port . r5337) (make-custom-textual-input/output-port . r5336) (make-custom-textual-input-port . r5335) (make-custom-binary-output-port . r5334) (make-custom-binary-input/output-port . r5333) (make-custom-binary-input-port . r5332) (make-bytevector . r5331) (lookahead-u8 . r5330) (lookahead-char . r532f) (i/o-write-error? . r4dc5) (i/o-read-error? . r4db0) (i/o-port-error? . r4e68) (i/o-invalid-position-error? . r4dde) (i/o-filename-error? . r4df9) (i/o-file-protection-error? . r4e10) (i/o-file-is-read-only-error? . r4e25) (i/o-file-does-not-exist-error? . r4e4f) (i/o-file-already-exists-error? . r4e3a) (i/o-error? . r4d9b) (i/o-error-position . r4de0) (i/o-error-port . r4e6a) (i/o-error-filename . r4dfb) (i/o-encoding-error? . r4e98) (i/o-encoding-error-char . r4e9a) (i/o-decoding-error? . r4e7f) (get-u8 . r532e) (get-string-n! . r532d) (get-string-n . r532c) (get-string-all . r532b) (get-line . r532a) (get-datum . r5329) (get-char . r5328) (get-bytevector-some . r5327) (get-bytevector-n! . r5326) (get-bytevector-n . r5325) (get-bytevector-all . r5324) (flush-output-port . r5323) (close-port . r5322) (exit . r531a) (command-line . r4fd3) (string-fill! . r5319) (string-set! . r5318) (set-cdr! . r5317) (set-car! . r5316) (remove . r5315) (remv . r5314) (remp . r5313) (remq . r5312) (partition . r5311) (memv . r5310) (memq . r530f) (memp . r530e) (member . r530d) (exists . r530c) (for-all . r530b) (fold-right . r530a) (fold-left . r5309) (find . r5308) (filter . r5307) (cons* . r5306) (assv . r5305) (assq . r5304) (assp . r5303) (assoc . r5302) (call-with-string-output-port . r5301) (call-with-port . r5300) (call-with-bytevector-output-port . r52ff) (bytevector->string . r52fe) (buffer-mode? . r52fd) (binary-port? . r52fc) (with-exception-handler . r52fb) (raise-continuable . r52fa) (raise . r52f9) (eval . r3179) (environment . r3171) (make-enumeration . r52f8) (enum-set=? . r52f7) (enum-set-universe . r52f6) (enum-set-union . r52f5) (enum-set-subset? . r52f4) (enum-set-projection . r52f3) (enum-set-member? . r52f2) (enum-set-intersection . r52f1) (enum-set-indexer . r52f0) (enum-set-difference . r52ef) (enum-set-constructor . r52ee) (enum-set-complement . r52ed) (enum-set->list . r52ec) (who-condition? . r4d0f) (warning? . r4c87) (violation? . r4cc6) (undefined-violation? . r4d86) (syntax-violation? . r4d6d) (syntax-violation-subform . r4d71) (syntax-violation-form . r4d6f) (syntax-violation . r3199) (simple-conditions . r52eb) (serious-condition? . r4c9c) (non-continuable-violation? . r4d26) (message-condition? . r4c70) (make-who-condition . r4d0b) (make-warning . r4c85) (make-violation . r4cc4) (make-undefined-violation . r4d84) (make-syntax-violation . r4d67) (make-serious-condition . r4c9a) (make-non-continuable-violation . r4d24) (make-message-condition . r4c6c) (make-lexical-violation . r4d4e) (make-irritants-condition . r4cf0) (make-implementation-restriction-violation . r4d39) (make-error . r4caf) (make-assertion-violation . r4cd9) (lexical-violation? . r4d50) (irritants-condition? . r4cf4) (implementation-restriction-violation? . r4d3b) (error? . r4cb1) (condition-who . r4d11) (condition-predicate . r52ea) (condition-message . r4c72) (condition-irritants . r4cf6) (condition-accessor . r52e9) (condition . r52e8) (assertion-violation? . r4cdb) (condition? . r52e7) (utf32->string . r52e6) (utf16->string . r52e5) (utf8->string . r52e4) (uint-list->bytevector . r52e3) (u8-list->bytevector . r52e2) (string->utf8 . r52e1) (string->utf32 . r52e0) (string->utf16 . r52df) (sint-list->bytevector . r52de) (native-endianness . r52dd) (bytevector? . r52dc) (bytevector=? . r52db) (bytevector-uint-set! . r52da) (bytevector-uint-ref . r52d9) (bytevector-u8-set! . r52d8) (bytevector-u8-ref . r52d7) (bytevector-u64-set! . r52d6) (bytevector-u64-ref . r52d5) (bytevector-u64-native-set! . r52d4) (bytevector-u64-native-ref . r52d3) (bytevector-u32-set! . r52d2) (bytevector-u32-ref . r52d1) (bytevector-u32-native-set! . r52d0) (bytevector-u32-native-ref . r52cf) (bytevector-u16-set! . r52ce) (bytevector-u16-ref . r52cd) (bytevector-u16-native-set! . r52cc) (bytevector-u16-native-ref . r52cb) (bytevector-sint-set! . r52ca) (bytevector-sint-ref . r52c9) (bytevector-s8-set! . r52c8) (bytevector-s8-ref . r52c7) (bytevector-s64-set! . r52c6) (bytevector-s64-ref . r52c5) (bytevector-s64-native-set! . r52c4) (bytevector-s64-native-ref . r52c3) (bytevector-s32-set! . r52c2) (bytevector-s32-ref . r52c1) (bytevector-s32-native-set! . r52c0) (bytevector-s32-native-ref . r52bf) (bytevector-s16-set! . r52be) (bytevector-s16-ref . r52bd) (bytevector-s16-native-set! . r52bc) (bytevector-s16-native-ref . r52bb) (bytevector-length . r52ba) (bytevector-ieee-single-ref . r52b9) (bytevector-ieee-single-set! . r52b8) (bytevector-ieee-single-native-set! . r52b7) (bytevector-ieee-single-native-ref . r52b6) (bytevector-ieee-double-set! . r52b5) (bytevector-ieee-double-ref . r52b4) (bytevector-ieee-double-native-set! . r52b3) (bytevector-ieee-double-native-ref . r52b2) (bytevector-fill! . r52b1) (bytevector-copy! . r52b0) (bytevector-copy . r52af) (bytevector->uint-list . r52ae) (bytevector->u8-list . r52ad) (bytevector->sint-list . r52ac) (no-nans-violation? . r4ec4) (no-infinities-violation? . r4eaf) (make-no-nans-violation . r4ec2) (make-no-infinities-violation . r4ead) (real->flonum . r52ab) (flzero? . r52aa) (fltruncate . r52a9) (fltan . r52a8) (flsqrt . r52a7) (flsin . r52a6) (flround . r52a5) (flpositive? . r52a4) (flonum? . r52a3) (flodd? . r52a2) (flnumerator . r52a1) (flnegative? . r52a0) (flnan? . r529f) (flmod0 . r529e) (flmod . r529d) (flmin . r529c) (flmax . r529b) (fllog . r529a) (flinteger? . r5299) (flinfinite? . r5298) (flfloor . r5297) (flfinite? . r5296) (flexpt . r5295) (flexp . r5294) (fleven? . r5293) (fldiv0-and-mod0 . r5292) (fldiv0 . r5291) (fldiv-and-mod . r5290) (fldiv . r528f) (fldenominator . r528e) (flcos . r528d) (flceiling . r528c) (flatan . r528b) (flasin . r528a) (flacos . r5289) (flabs . r5288) (fl>? . r5287) (fl>=? . r5286) (fl=? . r5285) (fl<? . r5284) (fl<=? . r5283) (fl/ . r5282) (fl- . r5281) (fl+ . r5280) (fl* . r527f) (fixnum->flonum . r527e) (fxzero? . r527d) (fxxor . r527c) (fxrotate-bit-field . r527b) (fxreverse-bit-field . r527a) (fxpositive? . r5279) (fxodd? . r5278) (fxnot . r5277) (fxnegative? . r5276) (fxmod0 . r5275) (fxmod . r5274) (fxmin . r5273) (fxmax . r5272) (fxlength . r5271) (fxior . r5270) (fxif . r526f) (fxfirst-bit-set . r526e) (fxeven? . r526d) (fxdiv0-and-mod0 . r526c) (fxdiv0 . r526b) (fxdiv-and-mod . r526a) (fxdiv . r5269) (fxcopy-bit-field . r5268) (fxcopy-bit . r5267) (fxbit-set? . r5266) (fxbit-field . r5265) (fxbit-count . r5264) (fxarithmetic-shift-right . r5263) (fxarithmetic-shift-left . r5262) (fxarithmetic-shift . r5261) (fxand . r5260) (fx>? . r525f) (fx>=? . r525e) (fx=? . r525d) (fx<? . r525c) (fx<=? . r525b) (fx-/carry . r525a) (fx- . r5259) (fx+/carry . r5258) (fx+ . r5257) (fx*/carry . r5256) (fx* . r5255) (greatest-fixnum . r5254) (least-fixnum . r5253) (fixnum-width . r5252) (fixnum? . r5251) (bitwise-rotate-bit-field . r5250) (bitwise-reverse-bit-field . r524f) (bitwise-length . r524e) (bitwise-if . r524d) (bitwise-first-bit-set . r524c) (bitwise-copy-bit-field . r524b) (bitwise-copy-bit . r524a) (bitwise-bit-set? . r5249) (bitwise-bit-field . r5248) (bitwise-bit-count . r5247) (bitwise-xor . r5246) (bitwise-ior . r5245) (bitwise-and . r5244) (bitwise-not . r5243) (bitwise-arithmetic-shift-right . r5242) (bitwise-arithmetic-shift-left . r5241) (bitwise-arithmetic-shift . r5240) (zero? . r523f) (vector? . r523e) (vector-set! . r523d) (vector-ref . r523c) (vector-map . r523b) (vector-length . r523a) (vector-for-each . r5239) (vector-fill! . r5238) (vector->list . r5237) (vector . r5236) (values . r5235) (truncate . r5234) (tan . r5233) (symbol? . r5232) (symbol=? . r5231) (symbol->string . r5230) (substring . r522f) (string? . r522e) (string>? . r522d) (string>=? . r522c) (string=? . r522b) (string<? . r522a) (string<=? . r5229) (string-ref . r5228) (string-length . r5227) (string-for-each . r5226) (string-copy . r5225) (string-append . r5224) (string->symbol . r5223) (string->number . r5222) (string->list . r5221) (string . r5220) (sqrt . r521f) (sin . r521e) (round . r521d) (reverse . r521c) (real? . r521b) (real-valued? . r521a) (real-part . r5219) (rationalize . r5218) (rational? . r5217) (rational-valued? . r5216) (procedure? . r5215) (positive? . r5214) (pair? . r5213) (odd? . r5212) (numerator . r5211) (number? . r5210) (number->string . r520f) (null? . r520e) (not . r520d) (negative? . r520c) (nan? . r520b) (min . r520a) (max . r5209) (map . r5208) (make-vector . r5207) (make-string . r5206) (make-rectangular . r5205) (make-polar . r5204) (magnitude . r5203) (log . r5202) (list? . r5201) (list-tail . r5200) (list-ref . r51ff) (list->vector . r51fe) (list->string . r51fd) (list . r51fc) (length . r51fb) (lcm . r51fa) (integer? . r51f9) (integer-valued? . r51f8) (integer->char . r51f7) (infinite? . r51f6) (inexact? . r51f5) (inexact . r51f4) (imag-part . r51f3) (gcd . r51f2) (for-each . r51f1) (floor . r51f0) (finite? . r51ef) (expt . r51ee) (exp . r51ed) (exact? . r51ec) (exact-integer-sqrt . r51eb) (exact . r51ea) (even? . r51e9) (error . r51e8) (eqv? . r51e7) (equal? . r51e6) (eq? . r51e5) (dynamic-wind . r51e4) (div0-and-mod0 . r51e3) (mod0 . r51e2) (div0 . r51e1) (div-and-mod . r51e0) (mod . r51df) (div . r51de) (denominator . r51dd) (cos . r51dc) (cons . r51db) (complex? . r51da) (char? . r51d9) (char>? . r51d8) (char>=? . r51d7) (char=? . r51d6) (char<? . r51d5) (char<=? . r51d4) (char->integer . r51d3) (ceiling . r51d2) (call-with-values . r51d1) (call/cc . r51d0) (call-with-current-continuation . r51cf) (cddddr . r51ce) (cdddar . r51cd) (cddadr . r51cc) (cddaar . r51cb) (cdaddr . r51ca) (cdadar . r51c9) (cdaadr . r51c8) (cdaaar . r51c7) (cadddr . r51c6) (caddar . r51c5) (cadadr . r51c4) (cadaar . r51c3) (caaddr . r51c2) (caadar . r51c1) (caaadr . r51c0) (caaaar . r51bf) (cdddr . r51be) (cddar . r51bd) (cdadr . r51bc) (cdaar . r51bb) (caddr . r51ba) (cadar . r51b9) (caadr . r51b8) (caaar . r51b7) (cddr . r51b6) (cdar . r51b5) (cadr . r51b4) (caar . r51b3) (cdr . r51b2) (car . r51b1) (boolean? . r51b0) (boolean=? . r51af) (atan . r51ae) (assertion-violation . r51ad) (asin . r51ac) (apply . r51ab) (append . r51aa) (angle . r51a9) (acos . r51a8) (abs . r51a7) (/ . r51a6) (* . r51a5) (- . r51a4) (+ . r51a3) (>= . r51a2) (> . r51a1) (= . r51a0) (<= . r519f) (< . r519e) (library . r519d) (&no-nans . r519c) (&no-infinities . r519b) (&i/o-encoding . r519a) (&i/o-decoding . r5199) (&i/o-port . r5198) (&i/o-file-does-not-exist . r5197) (&i/o-file-already-exists . r5196) (&i/o-file-is-read-only . r5195) (&i/o-file-protection . r5194) (&i/o-filename . r5193) (&i/o-invalid-position . r5192) (&i/o-write . r5191) (&i/o-read . r5190) (&i/o . r518f) (&undefined . r518e) (&syntax . r518d) (&lexical . r518c) (&implementation-restriction . r518b) (&non-continuable . r518a) (&who . r5189) (&irritants . r5188) (&assertion . r5187) (&violation . r5186) (&error . r5185) (&serious . r5184) (&warning . r5183) (&message . r5182) (&condition . r5181) (define-condition-type . r5180) (define-enumeration . r517f) (define-record-type . r517e) (parent-rtd . r517d) (nongenerative . r517c) (opaque . r517b) (sealed . r517a) (protocol . r5179) (parent . r5178) (immutable . r5177) (mutable . r5176) (fields . r5175) (error-handling-mode . r5174) (file-options . r5173) (buffer-mode . r5172) (eol-style . r5171) (guard . r5170) (unsyntax-splicing . r516d) (unsyntax . r516c) (unquote-splicing . r516b) (unquote . r516a) (_ . r5169) (else . r5168) (=> . r5167) (... . r5166) (assert . r5165) (endianness . r5164) (time . r5162) (do . r5161) (cond . r5160) (let* . r515f) (let*-values . r515e) (let-values . r515d) (identifier-syntax . r515c) (with-syntax . r515b) (quasisyntax . r515a) (quasiquote . r5159) (syntax-rules . r5158) (include . r5157) (record-constructor-descriptor . r5155) (record-type-descriptor . r5154) (case . r5153) (unless . r5151) (when . r5150) (or . r514f) (and . r514e) (if . r514d) (let . r514c) (letrec* . r514b) (letrec . r514a) (case-lambda . r5148) (lambda . r5147) (syntax . r5146) (syntax-case . r5145) (quote . r5144) (letrec-syntax . r5142) (let-syntax . r5141) (set! . r5140) (import . r513f) (begin . r513e) (define-syntax . r513c) (define . r513b)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r5463 '(psyntax null-environment-5) '() '() '() '() '((make-promise . r531b) (unquote-splicing . r516b) (unquote . r516a) (_ . r5169) (else . r5168) (=> . r5167) (... . r5166) (delay . r5163) (do . r5161) (cond . r5160) (let* . r515f) (quasiquote . r5159) (syntax-rules . r5158) (case . r5153) (or . r514f) (and . r514e) (if . r514d) (let . r514c) (letrec . r514a) (lambda . r5147) (quote . r5144) (letrec-syntax . r5142) (let-syntax . r5141) (set! . r5140) (begin . r513e) (define-syntax . r513c) (define . r513b)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r5464 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . r53b0) (string-ci>=? . r53af) (string-ci=? . r53ae) (string-ci<? . r53ad) (string-ci<=? . r53ac) (char-whitespace? . r53ab) (char-upper-case? . r53aa) (char-numeric? . r53a8) (char-lower-case? . r53a7) (char-upcase . r53a5) (char-downcase . r53a2) (char-ci>? . r53a1) (char-ci>=? . r53a0) (char-ci=? . r539f) (char-ci<? . r539e) (char-ci<=? . r539d) (char-alphabetic? . r539c) (call-with-output-file . r5370) (call-with-input-file . r536f) (write-char . r536e) (write . r536d) (with-output-to-file . r536c) (with-input-from-file . r536b) (read-char . r536a) (read . r5369) (peek-char . r5368) (open-output-file . r5367) (open-input-file . r5366) (newline . r5365) (display . r5364) (close-output-port . r5363) (close-input-port . r5362) (eof-object . r5360) (current-output-port . r535e) (current-input-port . r535d) (output-port? . r535c) (input-port? . r535b) (scheme-report-environment . r3175) (quotient . r5321) (null-environment . r3173) (remainder . r5320) (modulo . r531f) (inexact->exact . r531e) (force . r531d) (exact->inexact . r531c) (make-promise . r531b) (string-fill! . r5319) (string-set! . r5318) (set-cdr! . r5317) (set-car! . r5316) (memv . r5310) (memq . r530f) (member . r530d) (assv . r5305) (assq . r5304) (assoc . r5302) (eval . r3179) (zero? . r523f) (vector? . r523e) (vector-set! . r523d) (vector-ref . r523c) (vector-length . r523a) (vector-fill! . r5238) (vector->list . r5237) (vector . r5236) (values . r5235) (truncate . r5234) (tan . r5233) (symbol? . r5232) (symbol->string . r5230) (substring . r522f) (string? . r522e) (string>? . r522d) (string>=? . r522c) (string=? . r522b) (string<? . r522a) (string<=? . r5229) (string-ref . r5228) (string-length . r5227) (string-copy . r5225) (string-append . r5224) (string->symbol . r5223) (string->number . r5222) (string->list . r5221) (string . r5220) (sqrt . r521f) (sin . r521e) (round . r521d) (reverse . r521c) (real? . r521b) (real-part . r5219) (rationalize . r5218) (rational? . r5217) (procedure? . r5215) (positive? . r5214) (pair? . r5213) (odd? . r5212) (numerator . r5211) (number? . r5210) (number->string . r520f) (not . r520d) (negative? . r520c) (min . r520a) (max . r5209) (map . r5208) (make-vector . r5207) (make-string . r5206) (make-rectangular . r5205) (make-polar . r5204) (magnitude . r5203) (log . r5202) (list? . r5201) (list-tail . r5200) (list-ref . r51ff) (list->vector . r51fe) (list->string . r51fd) (list . r51fc) (length . r51fb) (lcm . r51fa) (integer? . r51f9) (integer->char . r51f7) (inexact? . r51f5) (imag-part . r51f3) (gcd . r51f2) (for-each . r51f1) (floor . r51f0) (expt . r51ee) (exp . r51ed) (exact? . r51ec) (even? . r51e9) (eqv? . r51e7) (equal? . r51e6) (eq? . r51e5) (dynamic-wind . r51e4) (denominator . r51dd) (cos . r51dc) (cons . r51db) (complex? . r51da) (char? . r51d9) (char>? . r51d8) (char>=? . r51d7) (char=? . r51d6) (char<? . r51d5) (char<=? . r51d4) (char->integer . r51d3) (ceiling . r51d2) (call-with-values . r51d1) (call-with-current-continuation . r51cf) (cddddr . r51ce) (cdddar . r51cd) (cddadr . r51cc) (cddaar . r51cb) (cdaddr . r51ca) (cdadar . r51c9) (cdaadr . r51c8) (cdaaar . r51c7) (cadddr . r51c6) (caddar . r51c5) (cadadr . r51c4) (cadaar . r51c3) (caaddr . r51c2) (caadar . r51c1) (caaadr . r51c0) (caaaar . r51bf) (cdddr . r51be) (cddar . r51bd) (cdadr . r51bc) (cdaar . r51bb) (caddr . r51ba) (cadar . r51b9) (caadr . r51b8) (caaar . r51b7) (cddr . r51b6) (cdar . r51b5) (cadr . r51b4) (caar . r51b3) (cdr . r51b2) (car . r51b1) (boolean? . r51b0) (atan . r51ae) (asin . r51ac) (apply . r51ab) (append . r51aa) (angle . r51a9) (acos . r51a8) (abs . r51a7) (/ . r51a6) (* . r51a5) (- . r51a4) (+ . r51a3) (>= . r51a2) (> . r51a1) (= . r51a0) (<= . r519f) (< . r519e) (unquote-splicing . r516b) (unquote . r516a) (else . r5168) (=> . r5167) (... . r5166) (delay . r5163) (do . r5161) (cond . r5160) (let* . r515f) (quasiquote . r5159) (syntax-rules . r5158) (case . r5153) (or . r514f) (and . r514e) (if . r514d) (let . r514c) (letrec . r514a) (lambda . r5147) (quote . r5144) (letrec-syntax . r5142) (let-syntax . r5141) (set! . r5140) (begin . r513e) (define-syntax . r513c) (define . r513b)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r5465 '(psyntax modules) '() '() '() '() '((module . r513d)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r5466 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r5467 '(rnrs) '(6) '() '() '() '((regexp? . r545a) (string-upcase . r53b8) (string-titlecase . r53b7) (string-normalize-nfkd . r53b6) (string-normalize-nfkc . r53b5) (string-normalize-nfd . r53b4) (string-normalize-nfc . r53b3) (string-foldcase . r53b2) (string-downcase . r53b1) (string-ci>? . r53b0) (string-ci>=? . r53af) (string-ci=? . r53ae) (string-ci<? . r53ad) (string-ci<=? . r53ac) (char-whitespace? . r53ab) (char-upper-case? . r53aa) (char-title-case? . r53a9) (char-numeric? . r53a8) (char-lower-case? . r53a7) (char-general-category . r53a6) (char-upcase . r53a5) (char-titlecase . r53a4) (char-foldcase . r53a3) (char-downcase . r53a2) (char-ci>? . r53a1) (char-ci>=? . r53a0) (char-ci=? . r539f) (char-ci<? . r539e) (char-ci<=? . r539d) (char-alphabetic? . r539c) (make-variable-transformer . r2ee4) (identifier? . r319b) (generate-temporaries . r3187) (free-identifier=? . r3189) (syntax->datum . r319f) (datum->syntax . r319d) (bound-identifier=? . r318b) (record-type-descriptor? . r539b) (record-predicate . r539a) (record-mutator . r5399) (record-constructor . r5398) (record-accessor . r5397) (make-record-type-descriptor . r5396) (make-record-constructor-descriptor . r5395) (record? . r5394) (record-type-uid . r5393) (record-type-sealed? . r5392) (record-type-parent . r5391) (record-type-opaque? . r5390) (record-type-name . r538f) (record-type-generative? . r538e) (record-type-field-names . r538d) (record-rtd . r538c) (record-field-mutable? . r538b) (delete-file . r538a) (file-exists? . r5389) (vector-sort! . r5388) (vector-sort . r5387) (list-sort . r5386) (symbol-hash . r5385) (string-ci-hash . r5384) (string-hash . r5383) (equal-hash . r5382) (hashtable-equivalence-function . r5381) (make-hashtable . r5380) (hashtable-hash-function . r537f) (make-eqv-hashtable . r537e) (make-eq-hashtable . r537d) (hashtable? . r537c) (hashtable-update! . r537b) (hashtable-size . r537a) (hashtable-set! . r5379) (hashtable-ref . r5378) (hashtable-mutable? . r5377) (hashtable-keys . r5376) (hashtable-entries . r5375) (hashtable-delete! . r5374) (hashtable-copy . r5373) (hashtable-contains? . r5372) (hashtable-clear! . r5371) (call-with-output-file . r5370) (call-with-input-file . r536f) (write-char . r536e) (write . r536d) (with-output-to-file . r536c) (with-input-from-file . r536b) (read-char . r536a) (read . r5369) (peek-char . r5368) (open-output-file . r5367) (open-input-file . r5366) (newline . r5365) (display . r5364) (close-output-port . r5363) (close-input-port . r5362) (eof-object? . r5361) (eof-object . r5360) (current-error-port . r535f) (current-output-port . r535e) (current-input-port . r535d) (output-port? . r535c) (input-port? . r535b) (utf-8-codec . r535a) (utf-16-codec . r5359) (transcoder-error-handling-mode . r5358) (transcoder-eol-style . r5357) (transcoder-codec . r5356) (transcoded-port . r5355) (textual-port? . r5354) (string->bytevector . r5353) (standard-output-port . r5352) (standard-input-port . r5351) (standard-error-port . r5350) (set-port-position! . r534f) (put-u8 . r534e) (put-string . r534d) (put-datum . r534c) (put-char . r534b) (put-bytevector . r534a) (port? . r5349) (port-transcoder . r5348) (port-position . r5347) (port-has-set-port-position!? . r5346) (port-has-port-position? . r5345) (port-eof? . r5344) (output-port-buffer-mode . r5343) (open-string-output-port . r5342) (open-string-input-port . r5341) (open-file-output-port . r5340) (open-file-input/output-port . r533f) (open-file-input-port . r533e) (open-bytevector-output-port . r533d) (open-bytevector-input-port . r533c) (native-transcoder . r533b) (native-eol-style . r533a) (make-transcoder . r5339) (latin-1-codec . r5338) (make-i/o-write-error . r4dc3) (make-i/o-read-error . r4dae) (make-i/o-port-error . r4e64) (make-i/o-invalid-position-error . r4dda) (make-i/o-filename-error . r4df5) (make-i/o-file-protection-error . r4e0e) (make-i/o-file-is-read-only-error . r4e23) (make-i/o-file-does-not-exist-error . r4e4d) (make-i/o-file-already-exists-error . r4e38) (make-i/o-error . r4d99) (make-i/o-encoding-error . r4e94) (make-i/o-decoding-error . r4e7d) (make-custom-textual-output-port . r5337) (make-custom-textual-input/output-port . r5336) (make-custom-textual-input-port . r5335) (make-custom-binary-output-port . r5334) (make-custom-binary-input/output-port . r5333) (make-custom-binary-input-port . r5332) (make-bytevector . r5331) (lookahead-u8 . r5330) (lookahead-char . r532f) (i/o-write-error? . r4dc5) (i/o-read-error? . r4db0) (i/o-port-error? . r4e68) (i/o-invalid-position-error? . r4dde) (i/o-filename-error? . r4df9) (i/o-file-protection-error? . r4e10) (i/o-file-is-read-only-error? . r4e25) (i/o-file-does-not-exist-error? . r4e4f) (i/o-file-already-exists-error? . r4e3a) (i/o-error? . r4d9b) (i/o-error-position . r4de0) (i/o-error-port . r4e6a) (i/o-error-filename . r4dfb) (i/o-encoding-error? . r4e98) (i/o-encoding-error-char . r4e9a) (i/o-decoding-error? . r4e7f) (get-u8 . r532e) (get-string-n! . r532d) (get-string-n . r532c) (get-string-all . r532b) (get-line . r532a) (get-datum . r5329) (get-char . r5328) (get-bytevector-some . r5327) (get-bytevector-n! . r5326) (get-bytevector-n . r5325) (get-bytevector-all . r5324) (flush-output-port . r5323) (close-port . r5322) (exit . r531a) (command-line . r4fd3) (remove . r5315) (remv . r5314) (remp . r5313) (remq . r5312) (partition . r5311) (memv . r5310) (memq . r530f) (memp . r530e) (member . r530d) (exists . r530c) (for-all . r530b) (fold-right . r530a) (fold-left . r5309) (find . r5308) (filter . r5307) (cons* . r5306) (assv . r5305) (assq . r5304) (assp . r5303) (assoc . r5302) (call-with-string-output-port . r5301) (call-with-port . r5300) (call-with-bytevector-output-port . r52ff) (bytevector->string . r52fe) (buffer-mode? . r52fd) (binary-port? . r52fc) (with-exception-handler . r52fb) (raise-continuable . r52fa) (raise . r52f9) (make-enumeration . r52f8) (enum-set=? . r52f7) (enum-set-universe . r52f6) (enum-set-union . r52f5) (enum-set-subset? . r52f4) (enum-set-projection . r52f3) (enum-set-member? . r52f2) (enum-set-intersection . r52f1) (enum-set-indexer . r52f0) (enum-set-difference . r52ef) (enum-set-constructor . r52ee) (enum-set-complement . r52ed) (enum-set->list . r52ec) (who-condition? . r4d0f) (warning? . r4c87) (violation? . r4cc6) (undefined-violation? . r4d86) (syntax-violation? . r4d6d) (syntax-violation-subform . r4d71) (syntax-violation-form . r4d6f) (syntax-violation . r3199) (simple-conditions . r52eb) (serious-condition? . r4c9c) (non-continuable-violation? . r4d26) (message-condition? . r4c70) (make-who-condition . r4d0b) (make-warning . r4c85) (make-violation . r4cc4) (make-undefined-violation . r4d84) (make-syntax-violation . r4d67) (make-serious-condition . r4c9a) (make-non-continuable-violation . r4d24) (make-message-condition . r4c6c) (make-lexical-violation . r4d4e) (make-irritants-condition . r4cf0) (make-implementation-restriction-violation . r4d39) (make-error . r4caf) (make-assertion-violation . r4cd9) (lexical-violation? . r4d50) (irritants-condition? . r4cf4) (implementation-restriction-violation? . r4d3b) (error? . r4cb1) (condition-who . r4d11) (condition-predicate . r52ea) (condition-message . r4c72) (condition-irritants . r4cf6) (condition-accessor . r52e9) (condition . r52e8) (assertion-violation? . r4cdb) (condition? . r52e7) (utf32->string . r52e6) (utf16->string . r52e5) (utf8->string . r52e4) (uint-list->bytevector . r52e3) (u8-list->bytevector . r52e2) (string->utf8 . r52e1) (string->utf32 . r52e0) (string->utf16 . r52df) (sint-list->bytevector . r52de) (native-endianness . r52dd) (bytevector? . r52dc) (bytevector=? . r52db) (bytevector-uint-set! . r52da) (bytevector-uint-ref . r52d9) (bytevector-u8-set! . r52d8) (bytevector-u8-ref . r52d7) (bytevector-u64-set! . r52d6) (bytevector-u64-ref . r52d5) (bytevector-u64-native-set! . r52d4) (bytevector-u64-native-ref . r52d3) (bytevector-u32-set! . r52d2) (bytevector-u32-ref . r52d1) (bytevector-u32-native-set! . r52d0) (bytevector-u32-native-ref . r52cf) (bytevector-u16-set! . r52ce) (bytevector-u16-ref . r52cd) (bytevector-u16-native-set! . r52cc) (bytevector-u16-native-ref . r52cb) (bytevector-sint-set! . r52ca) (bytevector-sint-ref . r52c9) (bytevector-s8-set! . r52c8) (bytevector-s8-ref . r52c7) (bytevector-s64-set! . r52c6) (bytevector-s64-ref . r52c5) (bytevector-s64-native-set! . r52c4) (bytevector-s64-native-ref . r52c3) (bytevector-s32-set! . r52c2) (bytevector-s32-ref . r52c1) (bytevector-s32-native-set! . r52c0) (bytevector-s32-native-ref . r52bf) (bytevector-s16-set! . r52be) (bytevector-s16-ref . r52bd) (bytevector-s16-native-set! . r52bc) (bytevector-s16-native-ref . r52bb) (bytevector-length . r52ba) (bytevector-ieee-single-ref . r52b9) (bytevector-ieee-single-set! . r52b8) (bytevector-ieee-single-native-set! . r52b7) (bytevector-ieee-single-native-ref . r52b6) (bytevector-ieee-double-set! . r52b5) (bytevector-ieee-double-ref . r52b4) (bytevector-ieee-double-native-set! . r52b3) (bytevector-ieee-double-native-ref . r52b2) (bytevector-fill! . r52b1) (bytevector-copy! . r52b0) (bytevector-copy . r52af) (bytevector->uint-list . r52ae) (bytevector->u8-list . r52ad) (bytevector->sint-list . r52ac) (no-nans-violation? . r4ec4) (no-infinities-violation? . r4eaf) (make-no-nans-violation . r4ec2) (make-no-infinities-violation . r4ead) (real->flonum . r52ab) (flzero? . r52aa) (fltruncate . r52a9) (fltan . r52a8) (flsqrt . r52a7) (flsin . r52a6) (flround . r52a5) (flpositive? . r52a4) (flonum? . r52a3) (flodd? . r52a2) (flnumerator . r52a1) (flnegative? . r52a0) (flnan? . r529f) (flmod0 . r529e) (flmod . r529d) (flmin . r529c) (flmax . r529b) (fllog . r529a) (flinteger? . r5299) (flinfinite? . r5298) (flfloor . r5297) (flfinite? . r5296) (flexpt . r5295) (flexp . r5294) (fleven? . r5293) (fldiv0-and-mod0 . r5292) (fldiv0 . r5291) (fldiv-and-mod . r5290) (fldiv . r528f) (fldenominator . r528e) (flcos . r528d) (flceiling . r528c) (flatan . r528b) (flasin . r528a) (flacos . r5289) (flabs . r5288) (fl>? . r5287) (fl>=? . r5286) (fl=? . r5285) (fl<? . r5284) (fl<=? . r5283) (fl/ . r5282) (fl- . r5281) (fl+ . r5280) (fl* . r527f) (fixnum->flonum . r527e) (fxzero? . r527d) (fxxor . r527c) (fxrotate-bit-field . r527b) (fxreverse-bit-field . r527a) (fxpositive? . r5279) (fxodd? . r5278) (fxnot . r5277) (fxnegative? . r5276) (fxmod0 . r5275) (fxmod . r5274) (fxmin . r5273) (fxmax . r5272) (fxlength . r5271) (fxior . r5270) (fxif . r526f) (fxfirst-bit-set . r526e) (fxeven? . r526d) (fxdiv0-and-mod0 . r526c) (fxdiv0 . r526b) (fxdiv-and-mod . r526a) (fxdiv . r5269) (fxcopy-bit-field . r5268) (fxcopy-bit . r5267) (fxbit-set? . r5266) (fxbit-field . r5265) (fxbit-count . r5264) (fxarithmetic-shift-right . r5263) (fxarithmetic-shift-left . r5262) (fxarithmetic-shift . r5261) (fxand . r5260) (fx>? . r525f) (fx>=? . r525e) (fx=? . r525d) (fx<? . r525c) (fx<=? . r525b) (fx-/carry . r525a) (fx- . r5259) (fx+/carry . r5258) (fx+ . r5257) (fx*/carry . r5256) (fx* . r5255) (greatest-fixnum . r5254) (least-fixnum . r5253) (fixnum-width . r5252) (fixnum? . r5251) (bitwise-rotate-bit-field . r5250) (bitwise-reverse-bit-field . r524f) (bitwise-length . r524e) (bitwise-if . r524d) (bitwise-first-bit-set . r524c) (bitwise-copy-bit-field . r524b) (bitwise-copy-bit . r524a) (bitwise-bit-set? . r5249) (bitwise-bit-field . r5248) (bitwise-bit-count . r5247) (bitwise-xor . r5246) (bitwise-ior . r5245) (bitwise-and . r5244) (bitwise-not . r5243) (bitwise-arithmetic-shift-right . r5242) (bitwise-arithmetic-shift-left . r5241) (bitwise-arithmetic-shift . r5240) (zero? . r523f) (vector? . r523e) (vector-set! . r523d) (vector-ref . r523c) (vector-map . r523b) (vector-length . r523a) (vector-for-each . r5239) (vector-fill! . r5238) (vector->list . r5237) (vector . r5236) (values . r5235) (truncate . r5234) (tan . r5233) (symbol? . r5232) (symbol=? . r5231) (symbol->string . r5230) (substring . r522f) (string? . r522e) (string>? . r522d) (string>=? . r522c) (string=? . r522b) (string<? . r522a) (string<=? . r5229) (string-ref . r5228) (string-length . r5227) (string-for-each . r5226) (string-copy . r5225) (string-append . r5224) (string->symbol . r5223) (string->number . r5222) (string->list . r5221) (string . r5220) (sqrt . r521f) (sin . r521e) (round . r521d) (reverse . r521c) (real? . r521b) (real-valued? . r521a) (real-part . r5219) (rationalize . r5218) (rational? . r5217) (rational-valued? . r5216) (procedure? . r5215) (positive? . r5214) (pair? . r5213) (odd? . r5212) (numerator . r5211) (number? . r5210) (number->string . r520f) (null? . r520e) (not . r520d) (negative? . r520c) (nan? . r520b) (min . r520a) (max . r5209) (map . r5208) (make-vector . r5207) (make-string . r5206) (make-rectangular . r5205) (make-polar . r5204) (magnitude . r5203) (log . r5202) (list? . r5201) (list-tail . r5200) (list-ref . r51ff) (list->vector . r51fe) (list->string . r51fd) (list . r51fc) (length . r51fb) (lcm . r51fa) (integer? . r51f9) (integer-valued? . r51f8) (integer->char . r51f7) (infinite? . r51f6) (inexact? . r51f5) (inexact . r51f4) (imag-part . r51f3) (gcd . r51f2) (for-each . r51f1) (floor . r51f0) (finite? . r51ef) (expt . r51ee) (exp . r51ed) (exact? . r51ec) (exact-integer-sqrt . r51eb) (exact . r51ea) (even? . r51e9) (error . r51e8) (eqv? . r51e7) (equal? . r51e6) (eq? . r51e5) (dynamic-wind . r51e4) (div0-and-mod0 . r51e3) (mod0 . r51e2) (div0 . r51e1) (div-and-mod . r51e0) (mod . r51df) (div . r51de) (denominator . r51dd) (cos . r51dc) (cons . r51db) (complex? . r51da) (char? . r51d9) (char>? . r51d8) (char>=? . r51d7) (char=? . r51d6) (char<? . r51d5) (char<=? . r51d4) (char->integer . r51d3) (ceiling . r51d2) (call-with-values . r51d1) (call/cc . r51d0) (call-with-current-continuation . r51cf) (cddddr . r51ce) (cdddar . r51cd) (cddadr . r51cc) (cddaar . r51cb) (cdaddr . r51ca) (cdadar . r51c9) (cdaadr . r51c8) (cdaaar . r51c7) (cadddr . r51c6) (caddar . r51c5) (cadadr . r51c4) (cadaar . r51c3) (caaddr . r51c2) (caadar . r51c1) (caaadr . r51c0) (caaaar . r51bf) (cdddr . r51be) (cddar . r51bd) (cdadr . r51bc) (cdaar . r51bb) (caddr . r51ba) (cadar . r51b9) (caadr . r51b8) (caaar . r51b7) (cddr . r51b6) (cdar . r51b5) (cadr . r51b4) (caar . r51b3) (cdr . r51b2) (car . r51b1) (boolean? . r51b0) (boolean=? . r51af) (atan . r51ae) (assertion-violation . r51ad) (asin . r51ac) (apply . r51ab) (append . r51aa) (angle . r51a9) (acos . r51a8) (abs . r51a7) (/ . r51a6) (* . r51a5) (- . r51a4) (+ . r51a3) (>= . r51a2) (> . r51a1) (= . r51a0) (<= . r519f) (< . r519e) (&no-nans . r519c) (&no-infinities . r519b) (&i/o-encoding . r519a) (&i/o-decoding . r5199) (&i/o-port . r5198) (&i/o-file-does-not-exist . r5197) (&i/o-file-already-exists . r5196) (&i/o-file-is-read-only . r5195) (&i/o-file-protection . r5194) (&i/o-filename . r5193) (&i/o-invalid-position . r5192) (&i/o-write . r5191) (&i/o-read . r5190) (&i/o . r518f) (&undefined . r518e) (&syntax . r518d) (&lexical . r518c) (&implementation-restriction . r518b) (&non-continuable . r518a) (&who . r5189) (&irritants . r5188) (&assertion . r5187) (&violation . r5186) (&error . r5185) (&serious . r5184) (&warning . r5183) (&message . r5182) (&condition . r5181) (define-condition-type . r5180) (define-enumeration . r517f) (define-record-type . r517e) (parent-rtd . r517d) (nongenerative . r517c) (opaque . r517b) (sealed . r517a) (protocol . r5179) (parent . r5178) (immutable . r5177) (mutable . r5176) (fields . r5175) (error-handling-mode . r5174) (file-options . r5173) (buffer-mode . r5172) (eol-style . r5171) (guard . r5170) (unsyntax-splicing . r516d) (unsyntax . r516c) (unquote-splicing . r516b) (unquote . r516a) (_ . r5169) (else . r5168) (=> . r5167) (... . r5166) (assert . r5165) (endianness . r5164) (do . r5161) (cond . r5160) (let* . r515f) (let*-values . r515e) (let-values . r515d) (identifier-syntax . r515c) (with-syntax . r515b) (quasisyntax . r515a) (quasiquote . r5159) (syntax-rules . r5158) (record-constructor-descriptor . r5155) (record-type-descriptor . r5154) (case . r5153) (unless . r5151) (when . r5150) (or . r514f) (and . r514e) (if . r514d) (let . r514c) (letrec* . r514b) (letrec . r514a) (case-lambda . r5148) (lambda . r5147) (syntax . r5146) (syntax-case . r5145) (quote . r5144) (letrec-syntax . r5142) (let-syntax . r5141) (set! . r5140) (begin . r513e) (define-syntax . r513c) (define . r513b)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r5468 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . r3175) (quotient . r5321) (null-environment . r3173) (remainder . r5320) (modulo . r531f) (inexact->exact . r531e) (force . r531d) (exact->inexact . r531c) (make-promise . r531b) (delay . r5163)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r5469 '(rnrs control) '(6) '() '() '() '((do . r5161) (unless . r5151) (when . r5150) (case-lambda . r5148)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r546a '(rnrs eval) '(6) '() '() '() '((eval . r3179) (environment . r3171)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r546b '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . r5317) (set-car! . r5316)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r546c '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . r5319) (string-set! . r5318)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r546d '(rnrs programs) '(6) '() '() '() '((exit . r531a) (command-line . r4fd3)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r546e '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . r2ee4) (identifier? . r319b) (generate-temporaries . r3187) (free-identifier=? . r3189) (syntax->datum . r319f) (datum->syntax . r319d) (bound-identifier=? . r318b) (syntax-violation . r3199) (unsyntax-splicing . r516d) (unsyntax . r516c) (_ . r5169) (... . r5166) (with-syntax . r515b) (quasisyntax . r515a) (syntax . r5146) (syntax-case . r5145)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r546f '(rnrs files) '(6) '() '() '() '((delete-file . r538a) (file-exists? . r5389) (make-i/o-write-error . r4dc3) (make-i/o-read-error . r4dae) (make-i/o-port-error . r4e64) (make-i/o-invalid-position-error . r4dda) (make-i/o-filename-error . r4df5) (make-i/o-file-protection-error . r4e0e) (make-i/o-file-is-read-only-error . r4e23) (make-i/o-file-does-not-exist-error . r4e4d) (make-i/o-file-already-exists-error . r4e38) (make-i/o-error . r4d99) (i/o-write-error? . r4dc5) (i/o-read-error? . r4db0) (i/o-port-error? . r4e68) (i/o-invalid-position-error? . r4dde) (i/o-filename-error? . r4df9) (i/o-file-protection-error? . r4e10) (i/o-file-is-read-only-error? . r4e25) (i/o-file-does-not-exist-error? . r4e4f) (i/o-file-already-exists-error? . r4e3a) (i/o-error? . r4d9b) (i/o-error-position . r4de0) (i/o-error-port . r4e6a) (i/o-error-filename . r4dfb) (&i/o-port . r5198) (&i/o-file-does-not-exist . r5197) (&i/o-file-already-exists . r5196) (&i/o-file-is-read-only . r5195) (&i/o-file-protection . r5194) (&i/o-filename . r5193) (&i/o-invalid-position . r5192) (&i/o-write . r5191) (&i/o-read . r5190) (&i/o . r518f)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r5470 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . r5388) (vector-sort . r5387) (list-sort . r5386)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r5471 '(rnrs base) '(6) '() '() '() '((zero? . r523f) (vector? . r523e) (vector-set! . r523d) (vector-ref . r523c) (vector-map . r523b) (vector-length . r523a) (vector-for-each . r5239) (vector-fill! . r5238) (vector->list . r5237) (vector . r5236) (values . r5235) (truncate . r5234) (tan . r5233) (symbol? . r5232) (symbol=? . r5231) (symbol->string . r5230) (substring . r522f) (string? . r522e) (string>? . r522d) (string>=? . r522c) (string=? . r522b) (string<? . r522a) (string<=? . r5229) (string-ref . r5228) (string-length . r5227) (string-for-each . r5226) (string-copy . r5225) (string-append . r5224) (string->symbol . r5223) (string->number . r5222) (string->list . r5221) (string . r5220) (sqrt . r521f) (sin . r521e) (round . r521d) (reverse . r521c) (real? . r521b) (real-valued? . r521a) (real-part . r5219) (rationalize . r5218) (rational? . r5217) (rational-valued? . r5216) (procedure? . r5215) (positive? . r5214) (pair? . r5213) (odd? . r5212) (numerator . r5211) (number? . r5210) (number->string . r520f) (null? . r520e) (not . r520d) (negative? . r520c) (nan? . r520b) (min . r520a) (max . r5209) (map . r5208) (make-vector . r5207) (make-string . r5206) (make-rectangular . r5205) (make-polar . r5204) (magnitude . r5203) (log . r5202) (list? . r5201) (list-tail . r5200) (list-ref . r51ff) (list->vector . r51fe) (list->string . r51fd) (list . r51fc) (length . r51fb) (lcm . r51fa) (integer? . r51f9) (integer-valued? . r51f8) (integer->char . r51f7) (infinite? . r51f6) (inexact? . r51f5) (inexact . r51f4) (imag-part . r51f3) (gcd . r51f2) (for-each . r51f1) (floor . r51f0) (finite? . r51ef) (expt . r51ee) (exp . r51ed) (exact? . r51ec) (exact-integer-sqrt . r51eb) (exact . r51ea) (even? . r51e9) (error . r51e8) (eqv? . r51e7) (equal? . r51e6) (eq? . r51e5) (dynamic-wind . r51e4) (div0-and-mod0 . r51e3) (mod0 . r51e2) (div0 . r51e1) (div-and-mod . r51e0) (mod . r51df) (div . r51de) (denominator . r51dd) (cos . r51dc) (cons . r51db) (complex? . r51da) (char? . r51d9) (char>? . r51d8) (char>=? . r51d7) (char=? . r51d6) (char<? . r51d5) (char<=? . r51d4) (char->integer . r51d3) (ceiling . r51d2) (call-with-values . r51d1) (call/cc . r51d0) (call-with-current-continuation . r51cf) (cddddr . r51ce) (cdddar . r51cd) (cddadr . r51cc) (cddaar . r51cb) (cdaddr . r51ca) (cdadar . r51c9) (cdaadr . r51c8) (cdaaar . r51c7) (cadddr . r51c6) (caddar . r51c5) (cadadr . r51c4) (cadaar . r51c3) (caaddr . r51c2) (caadar . r51c1) (caaadr . r51c0) (caaaar . r51bf) (cdddr . r51be) (cddar . r51bd) (cdadr . r51bc) (cdaar . r51bb) (caddr . r51ba) (cadar . r51b9) (caadr . r51b8) (caaar . r51b7) (cddr . r51b6) (cdar . r51b5) (cadr . r51b4) (caar . r51b3) (cdr . r51b2) (car . r51b1) (boolean? . r51b0) (boolean=? . r51af) (atan . r51ae) (assertion-violation . r51ad) (asin . r51ac) (apply . r51ab) (append . r51aa) (angle . r51a9) (acos . r51a8) (abs . r51a7) (/ . r51a6) (* . r51a5) (- . r51a4) (+ . r51a3) (>= . r51a2) (> . r51a1) (= . r51a0) (<= . r519f) (< . r519e) (unquote-splicing . r516b) (unquote . r516a) (_ . r5169) (else . r5168) (=> . r5167) (... . r5166) (assert . r5165) (cond . r5160) (let* . r515f) (let*-values . r515e) (let-values . r515d) (identifier-syntax . r515c) (quasiquote . r5159) (syntax-rules . r5158) (case . r5153) (or . r514f) (and . r514e) (if . r514d) (let . r514c) (letrec* . r514b) (letrec . r514a) (lambda . r5147) (quote . r5144) (letrec-syntax . r5142) (let-syntax . r5141) (set! . r5140) (begin . r513e) (define-syntax . r513c) (define . r513b)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r5472 '(rnrs lists) '(6) '() '() '() '((remove . r5315) (remv . r5314) (remp . r5313) (remq . r5312) (partition . r5311) (memv . r5310) (memq . r530f) (memp . r530e) (member . r530d) (exists . r530c) (for-all . r530b) (fold-right . r530a) (fold-left . r5309) (find . r5308) (filter . r5307) (cons* . r5306) (assv . r5305) (assq . r5304) (assp . r5303) (assoc . r5302)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r5473 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . r5370) (call-with-input-file . r536f) (write-char . r536e) (write . r536d) (with-output-to-file . r536c) (with-input-from-file . r536b) (read-char . r536a) (read . r5369) (peek-char . r5368) (open-output-file . r5367) (open-input-file . r5366) (newline . r5365) (display . r5364) (close-output-port . r5363) (close-input-port . r5362) (eof-object? . r5361) (eof-object . r5360) (current-error-port . r535f) (current-output-port . r535e) (current-input-port . r535d) (output-port? . r535c) (input-port? . r535b) (make-i/o-write-error . r4dc3) (make-i/o-read-error . r4dae) (make-i/o-port-error . r4e64) (make-i/o-invalid-position-error . r4dda) (make-i/o-filename-error . r4df5) (make-i/o-file-protection-error . r4e0e) (make-i/o-file-is-read-only-error . r4e23) (make-i/o-file-does-not-exist-error . r4e4d) (make-i/o-file-already-exists-error . r4e38) (make-i/o-error . r4d99) (i/o-write-error? . r4dc5) (i/o-read-error? . r4db0) (i/o-port-error? . r4e68) (i/o-invalid-position-error? . r4dde) (i/o-filename-error? . r4df9) (i/o-file-protection-error? . r4e10) (i/o-file-is-read-only-error? . r4e25) (i/o-file-does-not-exist-error? . r4e4f) (i/o-file-already-exists-error? . r4e3a) (i/o-error? . r4d9b) (i/o-error-position . r4de0) (i/o-error-port . r4e6a) (i/o-error-filename . r4dfb) (&i/o-port . r5198) (&i/o-file-does-not-exist . r5197) (&i/o-file-already-exists . r5196) (&i/o-file-is-read-only . r5195) (&i/o-file-protection . r5194) (&i/o-filename . r5193) (&i/o-invalid-position . r5192) (&i/o-write . r5191) (&i/o-read . r5190) (&i/o . r518f)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r5474 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . r5331) (utf32->string . r52e6) (utf16->string . r52e5) (utf8->string . r52e4) (uint-list->bytevector . r52e3) (u8-list->bytevector . r52e2) (string->utf8 . r52e1) (string->utf32 . r52e0) (string->utf16 . r52df) (sint-list->bytevector . r52de) (native-endianness . r52dd) (bytevector? . r52dc) (bytevector=? . r52db) (bytevector-uint-set! . r52da) (bytevector-uint-ref . r52d9) (bytevector-u8-set! . r52d8) (bytevector-u8-ref . r52d7) (bytevector-u64-set! . r52d6) (bytevector-u64-ref . r52d5) (bytevector-u64-native-set! . r52d4) (bytevector-u64-native-ref . r52d3) (bytevector-u32-set! . r52d2) (bytevector-u32-ref . r52d1) (bytevector-u32-native-set! . r52d0) (bytevector-u32-native-ref . r52cf) (bytevector-u16-set! . r52ce) (bytevector-u16-ref . r52cd) (bytevector-u16-native-set! . r52cc) (bytevector-u16-native-ref . r52cb) (bytevector-sint-set! . r52ca) (bytevector-sint-ref . r52c9) (bytevector-s8-set! . r52c8) (bytevector-s8-ref . r52c7) (bytevector-s64-set! . r52c6) (bytevector-s64-ref . r52c5) (bytevector-s64-native-set! . r52c4) (bytevector-s64-native-ref . r52c3) (bytevector-s32-set! . r52c2) (bytevector-s32-ref . r52c1) (bytevector-s32-native-set! . r52c0) (bytevector-s32-native-ref . r52bf) (bytevector-s16-set! . r52be) (bytevector-s16-ref . r52bd) (bytevector-s16-native-set! . r52bc) (bytevector-s16-native-ref . r52bb) (bytevector-length . r52ba) (bytevector-ieee-single-ref . r52b9) (bytevector-ieee-single-set! . r52b8) (bytevector-ieee-single-native-set! . r52b7) (bytevector-ieee-single-native-ref . r52b6) (bytevector-ieee-double-set! . r52b5) (bytevector-ieee-double-ref . r52b4) (bytevector-ieee-double-native-set! . r52b3) (bytevector-ieee-double-native-ref . r52b2) (bytevector-fill! . r52b1) (bytevector-copy! . r52b0) (bytevector-copy . r52af) (bytevector->uint-list . r52ae) (bytevector->u8-list . r52ad) (bytevector->sint-list . r52ac) (endianness . r5164)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r5475 '(rnrs unicode) '(6) '() '() '() '((string-upcase . r53b8) (string-titlecase . r53b7) (string-normalize-nfkd . r53b6) (string-normalize-nfkc . r53b5) (string-normalize-nfd . r53b4) (string-normalize-nfc . r53b3) (string-foldcase . r53b2) (string-downcase . r53b1) (string-ci>? . r53b0) (string-ci>=? . r53af) (string-ci=? . r53ae) (string-ci<? . r53ad) (string-ci<=? . r53ac) (char-whitespace? . r53ab) (char-upper-case? . r53aa) (char-title-case? . r53a9) (char-numeric? . r53a8) (char-lower-case? . r53a7) (char-general-category . r53a6) (char-upcase . r53a5) (char-titlecase . r53a4) (char-foldcase . r53a3) (char-downcase . r53a2) (char-ci>? . r53a1) (char-ci>=? . r53a0) (char-ci=? . r539f) (char-ci<? . r539e) (char-ci<=? . r539d) (char-alphabetic? . r539c)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r5476 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . r52fb) (raise-continuable . r52fa) (raise . r52f9) (guard . r5170) (else . r5168) (=> . r5167)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r5477 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . r5250) (bitwise-reverse-bit-field . r524f) (bitwise-length . r524e) (bitwise-if . r524d) (bitwise-first-bit-set . r524c) (bitwise-copy-bit-field . r524b) (bitwise-copy-bit . r524a) (bitwise-bit-set? . r5249) (bitwise-bit-field . r5248) (bitwise-bit-count . r5247) (bitwise-xor . r5246) (bitwise-ior . r5245) (bitwise-and . r5244) (bitwise-not . r5243) (bitwise-arithmetic-shift-right . r5242) (bitwise-arithmetic-shift-left . r5241) (bitwise-arithmetic-shift . r5240)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r5478 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . r527d) (fxxor . r527c) (fxrotate-bit-field . r527b) (fxreverse-bit-field . r527a) (fxpositive? . r5279) (fxodd? . r5278) (fxnot . r5277) (fxnegative? . r5276) (fxmod0 . r5275) (fxmod . r5274) (fxmin . r5273) (fxmax . r5272) (fxlength . r5271) (fxior . r5270) (fxif . r526f) (fxfirst-bit-set . r526e) (fxeven? . r526d) (fxdiv0-and-mod0 . r526c) (fxdiv0 . r526b) (fxdiv-and-mod . r526a) (fxdiv . r5269) (fxcopy-bit-field . r5268) (fxcopy-bit . r5267) (fxbit-set? . r5266) (fxbit-field . r5265) (fxbit-count . r5264) (fxarithmetic-shift-right . r5263) (fxarithmetic-shift-left . r5262) (fxarithmetic-shift . r5261) (fxand . r5260) (fx>? . r525f) (fx>=? . r525e) (fx=? . r525d) (fx<? . r525c) (fx<=? . r525b) (fx-/carry . r525a) (fx- . r5259) (fx+/carry . r5258) (fx+ . r5257) (fx*/carry . r5256) (fx* . r5255) (greatest-fixnum . r5254) (least-fixnum . r5253) (fixnum-width . r5252) (fixnum? . r5251)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r5479 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . r4ec4) (no-infinities-violation? . r4eaf) (make-no-nans-violation . r4ec2) (make-no-infinities-violation . r4ead) (real->flonum . r52ab) (flzero? . r52aa) (fltruncate . r52a9) (fltan . r52a8) (flsqrt . r52a7) (flsin . r52a6) (flround . r52a5) (flpositive? . r52a4) (flonum? . r52a3) (flodd? . r52a2) (flnumerator . r52a1) (flnegative? . r52a0) (flnan? . r529f) (flmod0 . r529e) (flmod . r529d) (flmin . r529c) (flmax . r529b) (fllog . r529a) (flinteger? . r5299) (flinfinite? . r5298) (flfloor . r5297) (flfinite? . r5296) (flexpt . r5295) (flexp . r5294) (fleven? . r5293) (fldiv0-and-mod0 . r5292) (fldiv0 . r5291) (fldiv-and-mod . r5290) (fldiv . r528f) (fldenominator . r528e) (flcos . r528d) (flceiling . r528c) (flatan . r528b) (flasin . r528a) (flacos . r5289) (flabs . r5288) (fl>? . r5287) (fl>=? . r5286) (fl=? . r5285) (fl<? . r5284) (fl<=? . r5283) (fl/ . r5282) (fl- . r5281) (fl+ . r5280) (fl* . r527f) (fixnum->flonum . r527e) (&no-nans . r519c) (&no-infinities . r519b)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r547a '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . r5385) (string-ci-hash . r5384) (string-hash . r5383) (equal-hash . r5382) (hashtable-equivalence-function . r5381) (make-hashtable . r5380) (hashtable-hash-function . r537f) (make-eqv-hashtable . r537e) (make-eq-hashtable . r537d) (hashtable? . r537c) (hashtable-update! . r537b) (hashtable-size . r537a) (hashtable-set! . r5379) (hashtable-ref . r5378) (hashtable-mutable? . r5377) (hashtable-keys . r5376) (hashtable-entries . r5375) (hashtable-delete! . r5374) (hashtable-copy . r5373) (hashtable-contains? . r5372) (hashtable-clear! . r5371)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r547b '(rnrs io ports) '(6) '() '() '() '((eof-object? . r5361) (eof-object . r5360) (current-error-port . r535f) (current-output-port . r535e) (current-input-port . r535d) (output-port? . r535c) (input-port? . r535b) (utf-8-codec . r535a) (utf-16-codec . r5359) (transcoder-error-handling-mode . r5358) (transcoder-eol-style . r5357) (transcoder-codec . r5356) (transcoded-port . r5355) (textual-port? . r5354) (string->bytevector . r5353) (standard-output-port . r5352) (standard-input-port . r5351) (standard-error-port . r5350) (set-port-position! . r534f) (put-u8 . r534e) (put-string . r534d) (put-datum . r534c) (put-char . r534b) (put-bytevector . r534a) (port? . r5349) (port-transcoder . r5348) (port-position . r5347) (port-has-set-port-position!? . r5346) (port-has-port-position? . r5345) (port-eof? . r5344) (output-port-buffer-mode . r5343) (open-string-output-port . r5342) (open-string-input-port . r5341) (open-file-output-port . r5340) (open-file-input/output-port . r533f) (open-file-input-port . r533e) (open-bytevector-output-port . r533d) (open-bytevector-input-port . r533c) (native-transcoder . r533b) (native-eol-style . r533a) (make-transcoder . r5339) (latin-1-codec . r5338) (make-i/o-write-error . r4dc3) (make-i/o-read-error . r4dae) (make-i/o-port-error . r4e64) (make-i/o-invalid-position-error . r4dda) (make-i/o-filename-error . r4df5) (make-i/o-file-protection-error . r4e0e) (make-i/o-file-is-read-only-error . r4e23) (make-i/o-file-does-not-exist-error . r4e4d) (make-i/o-file-already-exists-error . r4e38) (make-i/o-error . r4d99) (make-i/o-encoding-error . r4e94) (make-i/o-decoding-error . r4e7d) (make-custom-textual-output-port . r5337) (make-custom-textual-input/output-port . r5336) (make-custom-textual-input-port . r5335) (make-custom-binary-output-port . r5334) (make-custom-binary-input/output-port . r5333) (make-custom-binary-input-port . r5332) (lookahead-u8 . r5330) (lookahead-char . r532f) (i/o-write-error? . r4dc5) (i/o-read-error? . r4db0) (i/o-port-error? . r4e68) (i/o-invalid-position-error? . r4dde) (i/o-filename-error? . r4df9) (i/o-file-protection-error? . r4e10) (i/o-file-is-read-only-error? . r4e25) (i/o-file-does-not-exist-error? . r4e4f) (i/o-file-already-exists-error? . r4e3a) (i/o-error? . r4d9b) (i/o-error-position . r4de0) (i/o-error-port . r4e6a) (i/o-error-filename . r4dfb) (i/o-encoding-error? . r4e98) (i/o-encoding-error-char . r4e9a) (i/o-decoding-error? . r4e7f) (get-u8 . r532e) (get-string-n! . r532d) (get-string-n . r532c) (get-string-all . r532b) (get-line . r532a) (get-datum . r5329) (get-char . r5328) (get-bytevector-some . r5327) (get-bytevector-n! . r5326) (get-bytevector-n . r5325) (get-bytevector-all . r5324) (flush-output-port . r5323) (close-port . r5322) (call-with-string-output-port . r5301) (call-with-port . r5300) (call-with-bytevector-output-port . r52ff) (bytevector->string . r52fe) (buffer-mode? . r52fd) (binary-port? . r52fc) (&i/o-encoding . r519a) (&i/o-decoding . r5199) (&i/o-port . r5198) (&i/o-file-does-not-exist . r5197) (&i/o-file-already-exists . r5196) (&i/o-file-is-read-only . r5195) (&i/o-file-protection . r5194) (&i/o-filename . r5193) (&i/o-invalid-position . r5192) (&i/o-write . r5191) (&i/o-read . r5190) (&i/o . r518f) (error-handling-mode . r5174) (file-options . r5173) (buffer-mode . r5172) (eol-style . r5171)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r547c '(rnrs enums) '(6) '() '() '() '((make-enumeration . r52f8) (enum-set=? . r52f7) (enum-set-universe . r52f6) (enum-set-union . r52f5) (enum-set-subset? . r52f4) (enum-set-projection . r52f3) (enum-set-member? . r52f2) (enum-set-intersection . r52f1) (enum-set-indexer . r52f0) (enum-set-difference . r52ef) (enum-set-constructor . r52ee) (enum-set-complement . r52ed) (enum-set->list . r52ec) (define-enumeration . r517f)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r547d '(rnrs conditions) '(6) '() '() '() '((who-condition? . r4d0f) (warning? . r4c87) (violation? . r4cc6) (undefined-violation? . r4d86) (syntax-violation? . r4d6d) (syntax-violation-subform . r4d71) (syntax-violation-form . r4d6f) (syntax-violation . r3199) (simple-conditions . r52eb) (serious-condition? . r4c9c) (non-continuable-violation? . r4d26) (message-condition? . r4c70) (make-who-condition . r4d0b) (make-warning . r4c85) (make-violation . r4cc4) (make-undefined-violation . r4d84) (make-syntax-violation . r4d67) (make-serious-condition . r4c9a) (make-non-continuable-violation . r4d24) (make-message-condition . r4c6c) (make-lexical-violation . r4d4e) (make-irritants-condition . r4cf0) (make-implementation-restriction-violation . r4d39) (make-error . r4caf) (make-assertion-violation . r4cd9) (lexical-violation? . r4d50) (irritants-condition? . r4cf4) (implementation-restriction-violation? . r4d3b) (error? . r4cb1) (condition-who . r4d11) (condition-predicate . r52ea) (condition-message . r4c72) (condition-irritants . r4cf6) (condition-accessor . r52e9) (condition . r52e8) (assertion-violation? . r4cdb) (condition? . r52e7) (&undefined . r518e) (&syntax . r518d) (&lexical . r518c) (&implementation-restriction . r518b) (&non-continuable . r518a) (&who . r5189) (&irritants . r5188) (&assertion . r5187) (&violation . r5186) (&error . r5185) (&serious . r5184) (&warning . r5183) (&message . r5182) (&condition . r5181) (define-condition-type . r5180)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r547e '(rnrs records inspection) '(6) '() '() '() '((record? . r5394) (record-type-uid . r5393) (record-type-sealed? . r5392) (record-type-parent . r5391) (record-type-opaque? . r5390) (record-type-name . r538f) (record-type-generative? . r538e) (record-type-field-names . r538d) (record-rtd . r538c) (record-field-mutable? . r538b)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r547f '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . r539b) (record-predicate . r539a) (record-mutator . r5399) (record-constructor . r5398) (record-accessor . r5397) (make-record-type-descriptor . r5396) (make-record-constructor-descriptor . r5395)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r5480 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . r517e) (parent-rtd . r517d) (nongenerative . r517c) (opaque . r517b) (sealed . r517a) (protocol . r5179) (parent . r5178) (immutable . r5177) (mutable . r5176) (fields . r5175) (record-constructor-descriptor . r5155) (record-type-descriptor . r5154)) '() values values '#f '#f '#t '#f) (r2ccd@r2b19@install-library 'r5481 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . r4ec8) (&no-nans-rtd . r4ec6) (&no-infinities-rcd . r4eb3) (&no-infinities-rtd . r4eb1) (&i/o-encoding-rcd . r4e9e) (&i/o-encoding-rtd . r4e9c) (&i/o-decoding-rcd . r4e83) (&i/o-decoding-rtd . r4e81) (&i/o-port-rcd . r4e6e) (&i/o-port-rtd . r4e6c) (&i/o-file-does-not-exist-rcd . r4e53) (&i/o-file-does-not-exist-rtd . r4e51) (&i/o-file-already-exists-rcd . r4e3e) (&i/o-file-already-exists-rtd . r4e3c) (&i/o-file-is-read-only-rcd . r4e29) (&i/o-file-is-read-only-rtd . r4e27) (&i/o-file-protection-rcd . r4e14) (&i/o-file-protection-rtd . r4e12) (&i/o-filename-rcd . r4dff) (&i/o-filename-rtd . r4dfd) (&i/o-invalid-position-rcd . r4de4) (&i/o-invalid-position-rtd . r4de2) (&i/o-write-rcd . r4dc9) (&i/o-write-rtd . r4dc7) (&i/o-read-rcd . r4db4) (&i/o-read-rtd . r4db2) (&i/o-rcd . r4d9f) (&i/o-rtd . r4d9d) (&undefined-rcd . r4d8a) (&undefined-rtd . r4d88) (&syntax-rcd . r4d75) (&syntax-rtd . r4d73) (&lexical-rcd . r4d54) (&lexical-rtd . r4d52) (&implementation-restriction-rcd . r4d3f) (&implementation-restriction-rtd . r4d3d) (&non-continuable-rcd . r4d2a) (&non-continuable-rtd . r4d28) (&who-rcd . r4d15) (&who-rtd . r4d13) (&irritants-rcd . r4cfa) (&irritants-rtd . r4cf8) (&assertion-rcd . r4cdf) (&assertion-rtd . r4cdd) (&violation-rcd . r4cca) (&violation-rtd . r4cc8) (&error-rcd . r4cb5) (&error-rtd . r4cb3) (&serious-rcd . r4ca0) (&serious-rtd . r4c9e) (&warning-rcd . r4c8b) (&warning-rtd . r4c89) (&message-rcd . r4c76) (&message-rtd . r4c74) (&condition-rcd . r4c17) (&condition-rtd . r4c15) (syntax-error . r3195) (syntax-dispatch . r30b9) (pretty-print . r5461) (eval-core . r5460) (set-symbol-value! . r545f) (symbol-value . r545e) (gensym . r545d) (void . r545c) (load . r4fd9) (interaction-environment . r31a7) (char-ready? . r545b) (regexp? . r545a) (read-line . r5459) (gensym-prefix-set! . r5458) (ungensym . r5457) (alist->eq-hash-table . r5456) (assoc-ref . r5455) (print . r5454) (format . r5453) (host-os . r5452) (library-path . r2af8) (standard-library-path . r5451) (file-newer? . r5450) (stat-mtime . r544f) (write-to-file . r544e) (file->list . r544d) (file->string . r544c) (digit->integer . r544b) (call-with-string-input-port . r544a) (call-with-string-io . r5449) (string-split . r5448) (bytevector-for-each . r5447) (string->regexp . r5446) (rxmatch . r5445) (regexp-replace-all . r5444) (hashtable-for-each . r5443) (mosh-cache-dir . r28e2) (call-process . r5442) (local-tz-offset . r5441) (microseconds . r5440) (directory-list . r543f) (set-current-directory! . r543e) (expand-path . r543d) (current-directory . r543c) (%spawn . r543b) (%waitpid . r543a) (simple-struct-name . r5439) (simple-struct-set! . r5438) (simple-struct-ref . r5437) (make-simple-struct . r5436) (simple-struct? . r5435) (pointer-ref-c-int64 . r5434) (pointer-ref-c-int32 . r5433) (pointer-ref-c-int16 . r5432) (pointer-ref-c-int8 . r5431) (pointer-ref-c-uint64 . r5430) (pointer-ref-c-uint32 . r542f) (pointer-ref-c-uint16 . r542e) (pointer-ref-c-uint8 . r542d) (pointer-set-c-uint64! . r542c) (pointer-set-c-uint32! . r542b) (pointer-set-c-uint16! . r542a) (pointer-set-c-uint8! . r5429) (pointer-set-c-int64! . r5428) (pointer-set-c-int32! . r5427) (pointer-set-c-int16! . r5426) (pointer-set-c-int8! . r5425) (pointer-set-c-pointer! . r5424) (pointer-set-c-double! . r5423) (pointer-set-c-float! . r5422) (pointer-set-c-long-long! . r5421) (pointer-set-c-long! . r5420) (pointer-set-c-int! . r541f) (pointer-set-c-short! . r541e) (pointer-set-c-char! . r541d) (pointer-ref-c-pointer . r541c) (pointer-ref-c-double . r541b) (pointer-ref-c-float . r541a) (pointer-ref-c-unsigned-long-long . r5419) (pointer-ref-c-signed-long-long . r5418) (pointer-ref-c-unsigned-long . r5417) (pointer-ref-c-signed-long . r5416) (pointer-ref-c-unsigned-int . r5415) (pointer-ref-c-signed-int . r5414) (pointer-ref-c-unsigned-short . r5413) (pointer-ref-c-signed-short . r5412) (pointer-ref-c-unsigned-char . r5411) (pointer-ref-c-signed-char . r5410) (pointer->integer . r540f) (integer->pointer . r540e) (pointer? . r540d) (shared-errno . r540c) (%ffi-free-c-callback-trampoline . r540b) (%ffi-make-c-callback-trampoline . r540a) (%ffi-free . r5409) (%ffi-malloc . r5408) (%ffi-supported? . r5407) (%ffi-pointer->string . r5406) (%ffi-call . r5405) (%ffi-lookup . r5404) (%ffi-open . r5403) (null-terminated-utf8->string . r5402) (null-terminated-bytevector->string . r5401) (%fork . r5400) (%pipe . r53ff) (p . r53fe) (open-output-string . r53fd) (get-output-string . r53fc) (file-stat-ctime . r53fb) (file-stat-atime . r53fa) (file-stat-mtime . r53f9) (file-size-in-bytes . r53f8) (file-writable? . r53f7) (file-executable? . r53f6) (file-readable? . r53f5) (file-regular? . r53f4) (file-symbolic-link? . r53f3) (file-directory? . r53f2) (create-symbolic-link . r53f1) (rename-file . r53f0) (delete-directory . r53ef) (create-directory . r53ee) (create-mosh-cache-dir . r53ed) (get-environment-variables . r53ec) (current-exception-handler . r53eb) (get-environment-variable . r53ea) (join-wraps . r53e9) (id->real-label . r53e8) (same-marks? . r53e7) (same-marks*? . r53e6) (get-timeofday . r53e5) (get-command-line . r53e4) (sys-display . r53e3) (whereis . r53e2) (register . r53e1) (vm-join! . r53e0) (vm-set-value! . r53df) (vm? . r53de) (main-vm? . r53dd) (vm-eval . r53dc) (vm-self . r53db) (vm-start! . r53da) (make-vm . r53d9) (mutex-try-lock! . r53d8) (mutex-unlock! . r53d7) (mutex-lock! . r53d6) (mutex? . r53d5) (make-mutex . r53d4) (condition-variable-notify-all! . r53d3) (condition-variable-notify! . r53d2) (condition-variable-wait! . r53d1) (make-condition-variable . r53d0) (mosh-executable-path . r53cf) (make-file-options . r53ce) (source-info . r53cd) (make-compiler-instruction . r53cc) (make-instruction . r53cb) (set-source-info! . r53ca) (bignum? . r53c9) (fast-equal? . r53c8) (fasl-read . r53c7) (fasl-write . r53c6) (time-usage . r53c5) (os-constant . r53c4) (disasm . r53c3) (make-parameter . r28e0) (socket-port . r53c2) (socket-shutdown . r53c1) (socket-close . r53c0) (socket-send . r53bf) (socket-recv! . r53be) (socket-recv . r53bd) (make-server-socket . r53bc) (make-client-socket . r53bb) (socket-accept . r53ba) (socket? . r53b9) (string-upcase . r53b8) (string-titlecase . r53b7) (string-normalize-nfkd . r53b6) (string-normalize-nfkc . r53b5) (string-normalize-nfd . r53b4) (string-normalize-nfc . r53b3) (string-foldcase . r53b2) (string-downcase . r53b1) (string-ci>? . r53b0) (string-ci>=? . r53af) (string-ci=? . r53ae) (string-ci<? . r53ad) (string-ci<=? . r53ac) (char-whitespace? . r53ab) (char-upper-case? . r53aa) (char-title-case? . r53a9) (char-numeric? . r53a8) (char-lower-case? . r53a7) (char-general-category . r53a6) (char-upcase . r53a5) (char-titlecase . r53a4) (char-foldcase . r53a3) (char-downcase . r53a2) (char-ci>? . r53a1) (char-ci>=? . r53a0) (char-ci=? . r539f) (char-ci<? . r539e) (char-ci<=? . r539d) (char-alphabetic? . r539c) (make-variable-transformer . r2ee4) (identifier? . r319b) (generate-temporaries . r3187) (free-identifier=? . r3189) (syntax->datum . r319f) (datum->syntax . r319d) (bound-identifier=? . r318b) (record-type-descriptor? . r539b) (record-predicate . r539a) (record-mutator . r5399) (record-constructor . r5398) (record-accessor . r5397) (make-record-type-descriptor . r5396) (make-record-constructor-descriptor . r5395) (record? . r5394) (record-type-uid . r5393) (record-type-sealed? . r5392) (record-type-parent . r5391) (record-type-opaque? . r5390) (record-type-name . r538f) (record-type-generative? . r538e) (record-type-field-names . r538d) (record-rtd . r538c) (record-field-mutable? . r538b) (delete-file . r538a) (file-exists? . r5389) (vector-sort! . r5388) (vector-sort . r5387) (list-sort . r5386) (symbol-hash . r5385) (string-ci-hash . r5384) (string-hash . r5383) (equal-hash . r5382) (hashtable-equivalence-function . r5381) (make-hashtable . r5380) (hashtable-hash-function . r537f) (make-eqv-hashtable . r537e) (make-eq-hashtable . r537d) (hashtable? . r537c) (hashtable-update! . r537b) (hashtable-size . r537a) (hashtable-set! . r5379) (hashtable-ref . r5378) (hashtable-mutable? . r5377) (hashtable-keys . r5376) (hashtable-entries . r5375) (hashtable-delete! . r5374) (hashtable-copy . r5373) (hashtable-contains? . r5372) (hashtable-clear! . r5371) (call-with-output-file . r5370) (call-with-input-file . r536f) (write-char . r536e) (write . r536d) (with-output-to-file . r536c) (with-input-from-file . r536b) (read-char . r536a) (read . r5369) (peek-char . r5368) (open-output-file . r5367) (open-input-file . r5366) (newline . r5365) (display . r5364) (close-output-port . r5363) (close-input-port . r5362) (eof-object? . r5361) (eof-object . r5360) (current-error-port . r535f) (current-output-port . r535e) (current-input-port . r535d) (output-port? . r535c) (input-port? . r535b) (utf-8-codec . r535a) (utf-16-codec . r5359) (transcoder-error-handling-mode . r5358) (transcoder-eol-style . r5357) (transcoder-codec . r5356) (transcoded-port . r5355) (textual-port? . r5354) (string->bytevector . r5353) (standard-output-port . r5352) (standard-input-port . r5351) (standard-error-port . r5350) (set-port-position! . r534f) (put-u8 . r534e) (put-string . r534d) (put-datum . r534c) (put-char . r534b) (put-bytevector . r534a) (port? . r5349) (port-transcoder . r5348) (port-position . r5347) (port-has-set-port-position!? . r5346) (port-has-port-position? . r5345) (port-eof? . r5344) (output-port-buffer-mode . r5343) (open-string-output-port . r5342) (open-string-input-port . r5341) (open-file-output-port . r5340) (open-file-input/output-port . r533f) (open-file-input-port . r533e) (open-bytevector-output-port . r533d) (open-bytevector-input-port . r533c) (native-transcoder . r533b) (native-eol-style . r533a) (make-transcoder . r5339) (latin-1-codec . r5338) (make-i/o-write-error . r4dc3) (make-i/o-read-error . r4dae) (make-i/o-port-error . r4e64) (make-i/o-invalid-position-error . r4dda) (make-i/o-filename-error . r4df5) (make-i/o-file-protection-error . r4e0e) (make-i/o-file-is-read-only-error . r4e23) (make-i/o-file-does-not-exist-error . r4e4d) (make-i/o-file-already-exists-error . r4e38) (make-i/o-error . r4d99) (make-i/o-encoding-error . r4e94) (make-i/o-decoding-error . r4e7d) (make-custom-textual-output-port . r5337) (make-custom-textual-input/output-port . r5336) (make-custom-textual-input-port . r5335) (make-custom-binary-output-port . r5334) (make-custom-binary-input/output-port . r5333) (make-custom-binary-input-port . r5332) (make-bytevector . r5331) (lookahead-u8 . r5330) (lookahead-char . r532f) (i/o-write-error? . r4dc5) (i/o-read-error? . r4db0) (i/o-port-error? . r4e68) (i/o-invalid-position-error? . r4dde) (i/o-filename-error? . r4df9) (i/o-file-protection-error? . r4e10) (i/o-file-is-read-only-error? . r4e25) (i/o-file-does-not-exist-error? . r4e4f) (i/o-file-already-exists-error? . r4e3a) (i/o-error? . r4d9b) (i/o-error-position . r4de0) (i/o-error-port . r4e6a) (i/o-error-filename . r4dfb) (i/o-encoding-error? . r4e98) (i/o-encoding-error-char . r4e9a) (i/o-decoding-error? . r4e7f) (get-u8 . r532e) (get-string-n! . r532d) (get-string-n . r532c) (get-string-all . r532b) (get-line . r532a) (get-datum . r5329) (get-char . r5328) (get-bytevector-some . r5327) (get-bytevector-n! . r5326) (get-bytevector-n . r5325) (get-bytevector-all . r5324) (flush-output-port . r5323) (close-port . r5322) (scheme-report-environment . r3175) (quotient . r5321) (null-environment . r3173) (remainder . r5320) (modulo . r531f) (inexact->exact . r531e) (force . r531d) (exact->inexact . r531c) (make-promise . r531b) (exit . r531a) (command-line . r4fd3) (string-fill! . r5319) (string-set! . r5318) (set-cdr! . r5317) (set-car! . r5316) (remove . r5315) (remv . r5314) (remp . r5313) (remq . r5312) (partition . r5311) (memv . r5310) (memq . r530f) (memp . r530e) (member . r530d) (exists . r530c) (for-all . r530b) (fold-right . r530a) (fold-left . r5309) (find . r5308) (filter . r5307) (cons* . r5306) (assv . r5305) (assq . r5304) (assp . r5303) (assoc . r5302) (call-with-string-output-port . r5301) (call-with-port . r5300) (call-with-bytevector-output-port . r52ff) (bytevector->string . r52fe) (buffer-mode? . r52fd) (binary-port? . r52fc) (with-exception-handler . r52fb) (raise-continuable . r52fa) (raise . r52f9) (eval . r3179) (environment . r3171) (make-enumeration . r52f8) (enum-set=? . r52f7) (enum-set-universe . r52f6) (enum-set-union . r52f5) (enum-set-subset? . r52f4) (enum-set-projection . r52f3) (enum-set-member? . r52f2) (enum-set-intersection . r52f1) (enum-set-indexer . r52f0) (enum-set-difference . r52ef) (enum-set-constructor . r52ee) (enum-set-complement . r52ed) (enum-set->list . r52ec) (who-condition? . r4d0f) (warning? . r4c87) (violation? . r4cc6) (undefined-violation? . r4d86) (syntax-violation? . r4d6d) (syntax-violation-subform . r4d71) (syntax-violation-form . r4d6f) (syntax-violation . r3199) (simple-conditions . r52eb) (serious-condition? . r4c9c) (non-continuable-violation? . r4d26) (message-condition? . r4c70) (make-who-condition . r4d0b) (make-warning . r4c85) (make-violation . r4cc4) (make-undefined-violation . r4d84) (make-syntax-violation . r4d67) (make-serious-condition . r4c9a) (make-non-continuable-violation . r4d24) (make-message-condition . r4c6c) (make-lexical-violation . r4d4e) (make-irritants-condition . r4cf0) (make-implementation-restriction-violation . r4d39) (make-error . r4caf) (make-assertion-violation . r4cd9) (lexical-violation? . r4d50) (irritants-condition? . r4cf4) (implementation-restriction-violation? . r4d3b) (error? . r4cb1) (condition-who . r4d11) (condition-predicate . r52ea) (condition-message . r4c72) (condition-irritants . r4cf6) (condition-accessor . r52e9) (condition . r52e8) (assertion-violation? . r4cdb) (condition? . r52e7) (utf32->string . r52e6) (utf16->string . r52e5) (utf8->string . r52e4) (uint-list->bytevector . r52e3) (u8-list->bytevector . r52e2) (string->utf8 . r52e1) (string->utf32 . r52e0) (string->utf16 . r52df) (sint-list->bytevector . r52de) (native-endianness . r52dd) (bytevector? . r52dc) (bytevector=? . r52db) (bytevector-uint-set! . r52da) (bytevector-uint-ref . r52d9) (bytevector-u8-set! . r52d8) (bytevector-u8-ref . r52d7) (bytevector-u64-set! . r52d6) (bytevector-u64-ref . r52d5) (bytevector-u64-native-set! . r52d4) (bytevector-u64-native-ref . r52d3) (bytevector-u32-set! . r52d2) (bytevector-u32-ref . r52d1) (bytevector-u32-native-set! . r52d0) (bytevector-u32-native-ref . r52cf) (bytevector-u16-set! . r52ce) (bytevector-u16-ref . r52cd) (bytevector-u16-native-set! . r52cc) (bytevector-u16-native-ref . r52cb) (bytevector-sint-set! . r52ca) (bytevector-sint-ref . r52c9) (bytevector-s8-set! . r52c8) (bytevector-s8-ref . r52c7) (bytevector-s64-set! . r52c6) (bytevector-s64-ref . r52c5) (bytevector-s64-native-set! . r52c4) (bytevector-s64-native-ref . r52c3) (bytevector-s32-set! . r52c2) (bytevector-s32-ref . r52c1) (bytevector-s32-native-set! . r52c0) (bytevector-s32-native-ref . r52bf) (bytevector-s16-set! . r52be) (bytevector-s16-ref . r52bd) (bytevector-s16-native-set! . r52bc) (bytevector-s16-native-ref . r52bb) (bytevector-length . r52ba) (bytevector-ieee-single-ref . r52b9) (bytevector-ieee-single-set! . r52b8) (bytevector-ieee-single-native-set! . r52b7) (bytevector-ieee-single-native-ref . r52b6) (bytevector-ieee-double-set! . r52b5) (bytevector-ieee-double-ref . r52b4) (bytevector-ieee-double-native-set! . r52b3) (bytevector-ieee-double-native-ref . r52b2) (bytevector-fill! . r52b1) (bytevector-copy! . r52b0) (bytevector-copy . r52af) (bytevector->uint-list . r52ae) (bytevector->u8-list . r52ad) (bytevector->sint-list . r52ac) (no-nans-violation? . r4ec4) (no-infinities-violation? . r4eaf) (make-no-nans-violation . r4ec2) (make-no-infinities-violation . r4ead) (real->flonum . r52ab) (flzero? . r52aa) (fltruncate . r52a9) (fltan . r52a8) (flsqrt . r52a7) (flsin . r52a6) (flround . r52a5) (flpositive? . r52a4) (flonum? . r52a3) (flodd? . r52a2) (flnumerator . r52a1) (flnegative? . r52a0) (flnan? . r529f) (flmod0 . r529e) (flmod . r529d) (flmin . r529c) (flmax . r529b) (fllog . r529a) (flinteger? . r5299) (flinfinite? . r5298) (flfloor . r5297) (flfinite? . r5296) (flexpt . r5295) (flexp . r5294) (fleven? . r5293) (fldiv0-and-mod0 . r5292) (fldiv0 . r5291) (fldiv-and-mod . r5290) (fldiv . r528f) (fldenominator . r528e) (flcos . r528d) (flceiling . r528c) (flatan . r528b) (flasin . r528a) (flacos . r5289) (flabs . r5288) (fl>? . r5287) (fl>=? . r5286) (fl=? . r5285) (fl<? . r5284) (fl<=? . r5283) (fl/ . r5282) (fl- . r5281) (fl+ . r5280) (fl* . r527f) (fixnum->flonum . r527e) (fxzero? . r527d) (fxxor . r527c) (fxrotate-bit-field . r527b) (fxreverse-bit-field . r527a) (fxpositive? . r5279) (fxodd? . r5278) (fxnot . r5277) (fxnegative? . r5276) (fxmod0 . r5275) (fxmod . r5274) (fxmin . r5273) (fxmax . r5272) (fxlength . r5271) (fxior . r5270) (fxif . r526f) (fxfirst-bit-set . r526e) (fxeven? . r526d) (fxdiv0-and-mod0 . r526c) (fxdiv0 . r526b) (fxdiv-and-mod . r526a) (fxdiv . r5269) (fxcopy-bit-field . r5268) (fxcopy-bit . r5267) (fxbit-set? . r5266) (fxbit-field . r5265) (fxbit-count . r5264) (fxarithmetic-shift-right . r5263) (fxarithmetic-shift-left . r5262) (fxarithmetic-shift . r5261) (fxand . r5260) (fx>? . r525f) (fx>=? . r525e) (fx=? . r525d) (fx<? . r525c) (fx<=? . r525b) (fx-/carry . r525a) (fx- . r5259) (fx+/carry . r5258) (fx+ . r5257) (fx*/carry . r5256) (fx* . r5255) (greatest-fixnum . r5254) (least-fixnum . r5253) (fixnum-width . r5252) (fixnum? . r5251) (bitwise-rotate-bit-field . r5250) (bitwise-reverse-bit-field . r524f) (bitwise-length . r524e) (bitwise-if . r524d) (bitwise-first-bit-set . r524c) (bitwise-copy-bit-field . r524b) (bitwise-copy-bit . r524a) (bitwise-bit-set? . r5249) (bitwise-bit-field . r5248) (bitwise-bit-count . r5247) (bitwise-xor . r5246) (bitwise-ior . r5245) (bitwise-and . r5244) (bitwise-not . r5243) (bitwise-arithmetic-shift-right . r5242) (bitwise-arithmetic-shift-left . r5241) (bitwise-arithmetic-shift . r5240) (zero? . r523f) (vector? . r523e) (vector-set! . r523d) (vector-ref . r523c) (vector-map . r523b) (vector-length . r523a) (vector-for-each . r5239) (vector-fill! . r5238) (vector->list . r5237) (vector . r5236) (values . r5235) (truncate . r5234) (tan . r5233) (symbol? . r5232) (symbol=? . r5231) (symbol->string . r5230) (substring . r522f) (string? . r522e) (string>? . r522d) (string>=? . r522c) (string=? . r522b) (string<? . r522a) (string<=? . r5229) (string-ref . r5228) (string-length . r5227) (string-for-each . r5226) (string-copy . r5225) (string-append . r5224) (string->symbol . r5223) (string->number . r5222) (string->list . r5221) (string . r5220) (sqrt . r521f) (sin . r521e) (round . r521d) (reverse . r521c) (real? . r521b) (real-valued? . r521a) (real-part . r5219) (rationalize . r5218) (rational? . r5217) (rational-valued? . r5216) (procedure? . r5215) (positive? . r5214) (pair? . r5213) (odd? . r5212) (numerator . r5211) (number? . r5210) (number->string . r520f) (null? . r520e) (not . r520d) (negative? . r520c) (nan? . r520b) (min . r520a) (max . r5209) (map . r5208) (make-vector . r5207) (make-string . r5206) (make-rectangular . r5205) (make-polar . r5204) (magnitude . r5203) (log . r5202) (list? . r5201) (list-tail . r5200) (list-ref . r51ff) (list->vector . r51fe) (list->string . r51fd) (list . r51fc) (length . r51fb) (lcm . r51fa) (integer? . r51f9) (integer-valued? . r51f8) (integer->char . r51f7) (infinite? . r51f6) (inexact? . r51f5) (inexact . r51f4) (imag-part . r51f3) (gcd . r51f2) (for-each . r51f1) (floor . r51f0) (finite? . r51ef) (expt . r51ee) (exp . r51ed) (exact? . r51ec) (exact-integer-sqrt . r51eb) (exact . r51ea) (even? . r51e9) (error . r51e8) (eqv? . r51e7) (equal? . r51e6) (eq? . r51e5) (dynamic-wind . r51e4) (div0-and-mod0 . r51e3) (mod0 . r51e2) (div0 . r51e1) (div-and-mod . r51e0) (mod . r51df) (div . r51de) (denominator . r51dd) (cos . r51dc) (cons . r51db) (complex? . r51da) (char? . r51d9) (char>? . r51d8) (char>=? . r51d7) (char=? . r51d6) (char<? . r51d5) (char<=? . r51d4) (char->integer . r51d3) (ceiling . r51d2) (call-with-values . r51d1) (call/cc . r51d0) (call-with-current-continuation . r51cf) (cddddr . r51ce) (cdddar . r51cd) (cddadr . r51cc) (cddaar . r51cb) (cdaddr . r51ca) (cdadar . r51c9) (cdaadr . r51c8) (cdaaar . r51c7) (cadddr . r51c6) (caddar . r51c5) (cadadr . r51c4) (cadaar . r51c3) (caaddr . r51c2) (caadar . r51c1) (caaadr . r51c0) (caaaar . r51bf) (cdddr . r51be) (cddar . r51bd) (cdadr . r51bc) (cdaar . r51bb) (caddr . r51ba) (cadar . r51b9) (caadr . r51b8) (caaar . r51b7) (cddr . r51b6) (cdar . r51b5) (cadr . r51b4) (caar . r51b3) (cdr . r51b2) (car . r51b1) (boolean? . r51b0) (boolean=? . r51af) (atan . r51ae) (assertion-violation . r51ad) (assertion-error . r3193) (asin . r51ac) (apply . r51ab) (append . r51aa) (angle . r51a9) (acos . r51a8) (abs . r51a7) (/ . r51a6) (* . r51a5) (- . r51a4) (+ . r51a3) (>= . r51a2) (> . r51a1) (= . r51a0) (<= . r519f) (< . r519e) (library . r519d) (&no-nans . r519c) (&no-infinities . r519b) (&i/o-encoding . r519a) (&i/o-decoding . r5199) (&i/o-port . r5198) (&i/o-file-does-not-exist . r5197) (&i/o-file-already-exists . r5196) (&i/o-file-is-read-only . r5195) (&i/o-file-protection . r5194) (&i/o-filename . r5193) (&i/o-invalid-position . r5192) (&i/o-write . r5191) (&i/o-read . r5190) (&i/o . r518f) (&undefined . r518e) (&syntax . r518d) (&lexical . r518c) (&implementation-restriction . r518b) (&non-continuable . r518a) (&who . r5189) (&irritants . r5188) (&assertion . r5187) (&violation . r5186) (&error . r5185) (&serious . r5184) (&warning . r5183) (&message . r5182) (&condition . r5181) (define-condition-type . r5180) (define-enumeration . r517f) (define-record-type . r517e) (parent-rtd . r517d) (nongenerative . r517c) (opaque . r517b) (sealed . r517a) (protocol . r5179) (parent . r5178) (immutable . r5177) (mutable . r5176) (fields . r5175) (error-handling-mode . r5174) (file-options . r5173) (buffer-mode . r5172) (eol-style . r5171) (guard . r5170) (trace-define . r516f) (trace-lambda . r516e) (unsyntax-splicing . r516d) (unsyntax . r516c) (unquote-splicing . r516b) (unquote . r516a) (_ . r5169) (else . r5168) (=> . r5167) (... . r5166) (assert . r5165) (endianness . r5164) (delay . r5163) (time . r5162) (do . r5161) (cond . r5160) (let* . r515f) (let*-values . r515e) (let-values . r515d) (identifier-syntax . r515c) (with-syntax . r515b) (quasisyntax . r515a) (quasiquote . r5159) (syntax-rules . r5158) (include . r5157) (define-struct . r5156) (record-constructor-descriptor . r5155) (record-type-descriptor . r5154) (case . r5153) (parameterize . r5152) (unless . r5151) (when . r5150) (or . r514f) (and . r514e) (if . r514d) (let . r514c) (letrec* . r514b) (letrec . r514a) (type-descriptor . r5149) (case-lambda . r5148) (lambda . r5147) (syntax . r5146) (syntax-case . r5145) (quote . r5144) (foreign-call . r5143) (letrec-syntax . r5142) (let-syntax . r5141) (set! . r5140) (import . r513f) (begin . r513e) (module . r513d) (define-syntax . r513c) (define . r513b)) '((r4ec8 core-prim . &no-nans-rcd) (r4ec6 core-prim . &no-nans-rtd) (r4eb3 core-prim . &no-infinities-rcd) (r4eb1 core-prim . &no-infinities-rtd) (r4e9e core-prim . &i/o-encoding-rcd) (r4e9c core-prim . &i/o-encoding-rtd) (r4e83 core-prim . &i/o-decoding-rcd) (r4e81 core-prim . &i/o-decoding-rtd) (r4e6e core-prim . &i/o-port-rcd) (r4e6c core-prim . &i/o-port-rtd) (r4e53 core-prim . &i/o-file-does-not-exist-rcd) (r4e51 core-prim . &i/o-file-does-not-exist-rtd) (r4e3e core-prim . &i/o-file-already-exists-rcd) (r4e3c core-prim . &i/o-file-already-exists-rtd) (r4e29 core-prim . &i/o-file-is-read-only-rcd) (r4e27 core-prim . &i/o-file-is-read-only-rtd) (r4e14 core-prim . &i/o-file-protection-rcd) (r4e12 core-prim . &i/o-file-protection-rtd) (r4dff core-prim . &i/o-filename-rcd) (r4dfd core-prim . &i/o-filename-rtd) (r4de4 core-prim . &i/o-invalid-position-rcd) (r4de2 core-prim . &i/o-invalid-position-rtd) (r4dc9 core-prim . &i/o-write-rcd) (r4dc7 core-prim . &i/o-write-rtd) (r4db4 core-prim . &i/o-read-rcd) (r4db2 core-prim . &i/o-read-rtd) (r4d9f core-prim . &i/o-rcd) (r4d9d core-prim . &i/o-rtd) (r4d8a core-prim . &undefined-rcd) (r4d88 core-prim . &undefined-rtd) (r4d75 core-prim . &syntax-rcd) (r4d73 core-prim . &syntax-rtd) (r4d54 core-prim . &lexical-rcd) (r4d52 core-prim . &lexical-rtd) (r4d3f core-prim . &implementation-restriction-rcd) (r4d3d core-prim . &implementation-restriction-rtd) (r4d2a core-prim . &non-continuable-rcd) (r4d28 core-prim . &non-continuable-rtd) (r4d15 core-prim . &who-rcd) (r4d13 core-prim . &who-rtd) (r4cfa core-prim . &irritants-rcd) (r4cf8 core-prim . &irritants-rtd) (r4cdf core-prim . &assertion-rcd) (r4cdd core-prim . &assertion-rtd) (r4cca core-prim . &violation-rcd) (r4cc8 core-prim . &violation-rtd) (r4cb5 core-prim . &error-rcd) (r4cb3 core-prim . &error-rtd) (r4ca0 core-prim . &serious-rcd) (r4c9e core-prim . &serious-rtd) (r4c8b core-prim . &warning-rcd) (r4c89 core-prim . &warning-rtd) (r4c76 core-prim . &message-rcd) (r4c74 core-prim . &message-rtd) (r4c17 core-prim . &condition-rcd) (r4c15 core-prim . &condition-rtd) (r3195 core-prim . syntax-error) (r30b9 core-prim . syntax-dispatch) (r5461 core-prim . pretty-print) (r5460 core-prim . eval-core) (r545f core-prim . set-symbol-value!) (r545e core-prim . symbol-value) (r545d core-prim . gensym) (r545c core-prim . void) (r4fd9 core-prim . load) (r31a7 core-prim . interaction-environment) (r545b core-prim . char-ready?) (r545a core-prim . regexp?) (r5459 core-prim . read-line) (r5458 core-prim . gensym-prefix-set!) (r5457 core-prim . ungensym) (r5456 core-prim . alist->eq-hash-table) (r5455 core-prim . assoc-ref) (r5454 core-prim . print) (r5453 core-prim . format) (r5452 core-prim . host-os) (r2af8 core-prim . library-path) (r5451 core-prim . standard-library-path) (r5450 core-prim . file-newer?) (r544f core-prim . stat-mtime) (r544e core-prim . write-to-file) (r544d core-prim . file->list) (r544c core-prim . file->string) (r544b core-prim . digit->integer) (r544a core-prim . call-with-string-input-port) (r5449 core-prim . call-with-string-io) (r5448 core-prim . string-split) (r5447 core-prim . bytevector-for-each) (r5446 core-prim . string->regexp) (r5445 core-prim . rxmatch) (r5444 core-prim . regexp-replace-all) (r5443 core-prim . hashtable-for-each) (r28e2 core-prim . mosh-cache-dir) (r5442 core-prim . call-process) (r5441 core-prim . local-tz-offset) (r5440 core-prim . microseconds) (r543f core-prim . directory-list) (r543e core-prim . set-current-directory!) (r543d core-prim . expand-path) (r543c core-prim . current-directory) (r543b core-prim . %spawn) (r543a core-prim . %waitpid) (r5439 core-prim . simple-struct-name) (r5438 core-prim . simple-struct-set!) (r5437 core-prim . simple-struct-ref) (r5436 core-prim . make-simple-struct) (r5435 core-prim . simple-struct?) (r5434 core-prim . pointer-ref-c-int64) (r5433 core-prim . pointer-ref-c-int32) (r5432 core-prim . pointer-ref-c-int16) (r5431 core-prim . pointer-ref-c-int8) (r5430 core-prim . pointer-ref-c-uint64) (r542f core-prim . pointer-ref-c-uint32) (r542e core-prim . pointer-ref-c-uint16) (r542d core-prim . pointer-ref-c-uint8) (r542c core-prim . pointer-set-c-uint64!) (r542b core-prim . pointer-set-c-uint32!) (r542a core-prim . pointer-set-c-uint16!) (r5429 core-prim . pointer-set-c-uint8!) (r5428 core-prim . pointer-set-c-int64!) (r5427 core-prim . pointer-set-c-int32!) (r5426 core-prim . pointer-set-c-int16!) (r5425 core-prim . pointer-set-c-int8!) (r5424 core-prim . pointer-set-c-pointer!) (r5423 core-prim . pointer-set-c-double!) (r5422 core-prim . pointer-set-c-float!) (r5421 core-prim . pointer-set-c-long-long!) (r5420 core-prim . pointer-set-c-long!) (r541f core-prim . pointer-set-c-int!) (r541e core-prim . pointer-set-c-short!) (r541d core-prim . pointer-set-c-char!) (r541c core-prim . pointer-ref-c-pointer) (r541b core-prim . pointer-ref-c-double) (r541a core-prim . pointer-ref-c-float) (r5419 core-prim . pointer-ref-c-unsigned-long-long) (r5418 core-prim . pointer-ref-c-signed-long-long) (r5417 core-prim . pointer-ref-c-unsigned-long) (r5416 core-prim . pointer-ref-c-signed-long) (r5415 core-prim . pointer-ref-c-unsigned-int) (r5414 core-prim . pointer-ref-c-signed-int) (r5413 core-prim . pointer-ref-c-unsigned-short) (r5412 core-prim . pointer-ref-c-signed-short) (r5411 core-prim . pointer-ref-c-unsigned-char) (r5410 core-prim . pointer-ref-c-signed-char) (r540f core-prim . pointer->integer) (r540e core-prim . integer->pointer) (r540d core-prim . pointer?) (r540c core-prim . shared-errno) (r540b core-prim . %ffi-free-c-callback-trampoline) (r540a core-prim . %ffi-make-c-callback-trampoline) (r5409 core-prim . %ffi-free) (r5408 core-prim . %ffi-malloc) (r5407 core-prim . %ffi-supported?) (r5406 core-prim . %ffi-pointer->string) (r5405 core-prim . %ffi-call) (r5404 core-prim . %ffi-lookup) (r5403 core-prim . %ffi-open) (r5402 core-prim . null-terminated-utf8->string) (r5401 core-prim . null-terminated-bytevector->string) (r5400 core-prim . %fork) (r53ff core-prim . %pipe) (r53fe core-prim . p) (r53fd core-prim . open-output-string) (r53fc core-prim . get-output-string) (r53fb core-prim . file-stat-ctime) (r53fa core-prim . file-stat-atime) (r53f9 core-prim . file-stat-mtime) (r53f8 core-prim . file-size-in-bytes) (r53f7 core-prim . file-writable?) (r53f6 core-prim . file-executable?) (r53f5 core-prim . file-readable?) (r53f4 core-prim . file-regular?) (r53f3 core-prim . file-symbolic-link?) (r53f2 core-prim . file-directory?) (r53f1 core-prim . create-symbolic-link) (r53f0 core-prim . rename-file) (r53ef core-prim . delete-directory) (r53ee core-prim . create-directory) (r53ed core-prim . create-mosh-cache-dir) (r53ec core-prim . get-environment-variables) (r53eb core-prim . current-exception-handler) (r53ea core-prim . get-environment-variable) (r53e9 core-prim . join-wraps) (r53e8 core-prim . id->real-label) (r53e7 core-prim . same-marks?) (r53e6 core-prim . same-marks*?) (r53e5 core-prim . get-timeofday) (r53e4 core-prim . get-command-line) (r53e3 core-prim . sys-display) (r53e2 core-prim . whereis) (r53e1 core-prim . register) (r53e0 core-prim . vm-join!) (r53df core-prim . vm-set-value!) (r53de core-prim . vm?) (r53dd core-prim . main-vm?) (r53dc core-prim . vm-eval) (r53db core-prim . vm-self) (r53da core-prim . vm-start!) (r53d9 core-prim . make-vm) (r53d8 core-prim . mutex-try-lock!) (r53d7 core-prim . mutex-unlock!) (r53d6 core-prim . mutex-lock!) (r53d5 core-prim . mutex?) (r53d4 core-prim . make-mutex) (r53d3 core-prim . condition-variable-notify-all!) (r53d2 core-prim . condition-variable-notify!) (r53d1 core-prim . condition-variable-wait!) (r53d0 core-prim . make-condition-variable) (r53cf core-prim . mosh-executable-path) (r53ce core-prim . make-file-options) (r53cd core-prim . source-info) (r53cc core-prim . make-compiler-instruction) (r53cb core-prim . make-instruction) (r53ca core-prim . set-source-info!) (r53c9 core-prim . bignum?) (r53c8 core-prim . fast-equal?) (r53c7 core-prim . fasl-read) (r53c6 core-prim . fasl-write) (r53c5 core-prim . time-usage) (r53c4 core-prim . os-constant) (r53c3 core-prim . disasm) (r28e0 core-prim . make-parameter) (r53c2 core-prim . socket-port) (r53c1 core-prim . socket-shutdown) (r53c0 core-prim . socket-close) (r53bf core-prim . socket-send) (r53be core-prim . socket-recv!) (r53bd core-prim . socket-recv) (r53bc core-prim . make-server-socket) (r53bb core-prim . make-client-socket) (r53ba core-prim . socket-accept) (r53b9 core-prim . socket?) (r53b8 core-prim . string-upcase) (r53b7 core-prim . string-titlecase) (r53b6 core-prim . string-normalize-nfkd) (r53b5 core-prim . string-normalize-nfkc) (r53b4 core-prim . string-normalize-nfd) (r53b3 core-prim . string-normalize-nfc) (r53b2 core-prim . string-foldcase) (r53b1 core-prim . string-downcase) (r53b0 core-prim . string-ci>?) (r53af core-prim . string-ci>=?) (r53ae core-prim . string-ci=?) (r53ad core-prim . string-ci<?) (r53ac core-prim . string-ci<=?) (r53ab core-prim . char-whitespace?) (r53aa core-prim . char-upper-case?) (r53a9 core-prim . char-title-case?) (r53a8 core-prim . char-numeric?) (r53a7 core-prim . char-lower-case?) (r53a6 core-prim . char-general-category) (r53a5 core-prim . char-upcase) (r53a4 core-prim . char-titlecase) (r53a3 core-prim . char-foldcase) (r53a2 core-prim . char-downcase) (r53a1 core-prim . char-ci>?) (r53a0 core-prim . char-ci>=?) (r539f core-prim . char-ci=?) (r539e core-prim . char-ci<?) (r539d core-prim . char-ci<=?) (r539c core-prim . char-alphabetic?) (r2ee4 core-prim . make-variable-transformer) (r319b core-prim . identifier?) (r3187 core-prim . generate-temporaries) (r3189 core-prim . free-identifier=?) (r319f core-prim . syntax->datum) (r319d core-prim . datum->syntax) (r318b core-prim . bound-identifier=?) (r539b core-prim . record-type-descriptor?) (r539a core-prim . record-predicate) (r5399 core-prim . record-mutator) (r5398 core-prim . record-constructor) (r5397 core-prim . record-accessor) (r5396 core-prim . make-record-type-descriptor) (r5395 core-prim . make-record-constructor-descriptor) (r5394 core-prim . record?) (r5393 core-prim . record-type-uid) (r5392 core-prim . record-type-sealed?) (r5391 core-prim . record-type-parent) (r5390 core-prim . record-type-opaque?) (r538f core-prim . record-type-name) (r538e core-prim . record-type-generative?) (r538d core-prim . record-type-field-names) (r538c core-prim . record-rtd) (r538b core-prim . record-field-mutable?) (r538a core-prim . delete-file) (r5389 core-prim . file-exists?) (r5388 core-prim . vector-sort!) (r5387 core-prim . vector-sort) (r5386 core-prim . list-sort) (r5385 core-prim . symbol-hash) (r5384 core-prim . string-ci-hash) (r5383 core-prim . string-hash) (r5382 core-prim . equal-hash) (r5381 core-prim . hashtable-equivalence-function) (r5380 core-prim . make-hashtable) (r537f core-prim . hashtable-hash-function) (r537e core-prim . make-eqv-hashtable) (r537d core-prim . make-eq-hashtable) (r537c core-prim . hashtable?) (r537b core-prim . hashtable-update!) (r537a core-prim . hashtable-size) (r5379 core-prim . hashtable-set!) (r5378 core-prim . hashtable-ref) (r5377 core-prim . hashtable-mutable?) (r5376 core-prim . hashtable-keys) (r5375 core-prim . hashtable-entries) (r5374 core-prim . hashtable-delete!) (r5373 core-prim . hashtable-copy) (r5372 core-prim . hashtable-contains?) (r5371 core-prim . hashtable-clear!) (r5370 core-prim . call-with-output-file) (r536f core-prim . call-with-input-file) (r536e core-prim . write-char) (r536d core-prim . write) (r536c core-prim . with-output-to-file) (r536b core-prim . with-input-from-file) (r536a core-prim . read-char) (r5369 core-prim . read) (r5368 core-prim . peek-char) (r5367 core-prim . open-output-file) (r5366 core-prim . open-input-file) (r5365 core-prim . newline) (r5364 core-prim . display) (r5363 core-prim . close-output-port) (r5362 core-prim . close-input-port) (r5361 core-prim . eof-object?) (r5360 core-prim . eof-object) (r535f core-prim . current-error-port) (r535e core-prim . current-output-port) (r535d core-prim . current-input-port) (r535c core-prim . output-port?) (r535b core-prim . input-port?) (r535a core-prim . utf-8-codec) (r5359 core-prim . utf-16-codec) (r5358 core-prim . transcoder-error-handling-mode) (r5357 core-prim . transcoder-eol-style) (r5356 core-prim . transcoder-codec) (r5355 core-prim . transcoded-port) (r5354 core-prim . textual-port?) (r5353 core-prim . string->bytevector) (r5352 core-prim . standard-output-port) (r5351 core-prim . standard-input-port) (r5350 core-prim . standard-error-port) (r534f core-prim . set-port-position!) (r534e core-prim . put-u8) (r534d core-prim . put-string) (r534c core-prim . put-datum) (r534b core-prim . put-char) (r534a core-prim . put-bytevector) (r5349 core-prim . port?) (r5348 core-prim . port-transcoder) (r5347 core-prim . port-position) (r5346 core-prim . port-has-set-port-position!?) (r5345 core-prim . port-has-port-position?) (r5344 core-prim . port-eof?) (r5343 core-prim . output-port-buffer-mode) (r5342 core-prim . open-string-output-port) (r5341 core-prim . open-string-input-port) (r5340 core-prim . open-file-output-port) (r533f core-prim . open-file-input/output-port) (r533e core-prim . open-file-input-port) (r533d core-prim . open-bytevector-output-port) (r533c core-prim . open-bytevector-input-port) (r533b core-prim . native-transcoder) (r533a core-prim . native-eol-style) (r5339 core-prim . make-transcoder) (r5338 core-prim . latin-1-codec) (r4dc3 core-prim . make-i/o-write-error) (r4dae core-prim . make-i/o-read-error) (r4e64 core-prim . make-i/o-port-error) (r4dda core-prim . make-i/o-invalid-position-error) (r4df5 core-prim . make-i/o-filename-error) (r4e0e core-prim . make-i/o-file-protection-error) (r4e23 core-prim . make-i/o-file-is-read-only-error) (r4e4d core-prim . make-i/o-file-does-not-exist-error) (r4e38 core-prim . make-i/o-file-already-exists-error) (r4d99 core-prim . make-i/o-error) (r4e94 core-prim . make-i/o-encoding-error) (r4e7d core-prim . make-i/o-decoding-error) (r5337 core-prim . make-custom-textual-output-port) (r5336 core-prim . make-custom-textual-input/output-port) (r5335 core-prim . make-custom-textual-input-port) (r5334 core-prim . make-custom-binary-output-port) (r5333 core-prim . make-custom-binary-input/output-port) (r5332 core-prim . make-custom-binary-input-port) (r5331 core-prim . make-bytevector) (r5330 core-prim . lookahead-u8) (r532f core-prim . lookahead-char) (r4dc5 core-prim . i/o-write-error?) (r4db0 core-prim . i/o-read-error?) (r4e68 core-prim . i/o-port-error?) (r4dde core-prim . i/o-invalid-position-error?) (r4df9 core-prim . i/o-filename-error?) (r4e10 core-prim . i/o-file-protection-error?) (r4e25 core-prim . i/o-file-is-read-only-error?) (r4e4f core-prim . i/o-file-does-not-exist-error?) (r4e3a core-prim . i/o-file-already-exists-error?) (r4d9b core-prim . i/o-error?) (r4de0 core-prim . i/o-error-position) (r4e6a core-prim . i/o-error-port) (r4dfb core-prim . i/o-error-filename) (r4e98 core-prim . i/o-encoding-error?) (r4e9a core-prim . i/o-encoding-error-char) (r4e7f core-prim . i/o-decoding-error?) (r532e core-prim . get-u8) (r532d core-prim . get-string-n!) (r532c core-prim . get-string-n) (r532b core-prim . get-string-all) (r532a core-prim . get-line) (r5329 core-prim . get-datum) (r5328 core-prim . get-char) (r5327 core-prim . get-bytevector-some) (r5326 core-prim . get-bytevector-n!) (r5325 core-prim . get-bytevector-n) (r5324 core-prim . get-bytevector-all) (r5323 core-prim . flush-output-port) (r5322 core-prim . close-port) (r3175 core-prim . scheme-report-environment) (r5321 core-prim . quotient) (r3173 core-prim . null-environment) (r5320 core-prim . remainder) (r531f core-prim . modulo) (r531e core-prim . inexact->exact) (r531d core-prim . force) (r531c core-prim . exact->inexact) (r531b core-prim . make-promise) (r531a core-prim . exit) (r4fd3 core-prim . command-line) (r5319 core-prim . string-fill!) (r5318 core-prim . string-set!) (r5317 core-prim . set-cdr!) (r5316 core-prim . set-car!) (r5315 core-prim . remove) (r5314 core-prim . remv) (r5313 core-prim . remp) (r5312 core-prim . remq) (r5311 core-prim . partition) (r5310 core-prim . memv) (r530f core-prim . memq) (r530e core-prim . memp) (r530d core-prim . member) (r530c core-prim . exists) (r530b core-prim . for-all) (r530a core-prim . fold-right) (r5309 core-prim . fold-left) (r5308 core-prim . find) (r5307 core-prim . filter) (r5306 core-prim . cons*) (r5305 core-prim . assv) (r5304 core-prim . assq) (r5303 core-prim . assp) (r5302 core-prim . assoc) (r5301 core-prim . call-with-string-output-port) (r5300 core-prim . call-with-port) (r52ff core-prim . call-with-bytevector-output-port) (r52fe core-prim . bytevector->string) (r52fd core-prim . buffer-mode?) (r52fc core-prim . binary-port?) (r52fb core-prim . with-exception-handler) (r52fa core-prim . raise-continuable) (r52f9 core-prim . raise) (r3179 core-prim . eval) (r3171 core-prim . environment) (r52f8 core-prim . make-enumeration) (r52f7 core-prim . enum-set=?) (r52f6 core-prim . enum-set-universe) (r52f5 core-prim . enum-set-union) (r52f4 core-prim . enum-set-subset?) (r52f3 core-prim . enum-set-projection) (r52f2 core-prim . enum-set-member?) (r52f1 core-prim . enum-set-intersection) (r52f0 core-prim . enum-set-indexer) (r52ef core-prim . enum-set-difference) (r52ee core-prim . enum-set-constructor) (r52ed core-prim . enum-set-complement) (r52ec core-prim . enum-set->list) (r4d0f core-prim . who-condition?) (r4c87 core-prim . warning?) (r4cc6 core-prim . violation?) (r4d86 core-prim . undefined-violation?) (r4d6d core-prim . syntax-violation?) (r4d71 core-prim . syntax-violation-subform) (r4d6f core-prim . syntax-violation-form) (r3199 core-prim . syntax-violation) (r52eb core-prim . simple-conditions) (r4c9c core-prim . serious-condition?) (r4d26 core-prim . non-continuable-violation?) (r4c70 core-prim . message-condition?) (r4d0b core-prim . make-who-condition) (r4c85 core-prim . make-warning) (r4cc4 core-prim . make-violation) (r4d84 core-prim . make-undefined-violation) (r4d67 core-prim . make-syntax-violation) (r4c9a core-prim . make-serious-condition) (r4d24 core-prim . make-non-continuable-violation) (r4c6c core-prim . make-message-condition) (r4d4e core-prim . make-lexical-violation) (r4cf0 core-prim . make-irritants-condition) (r4d39 core-prim . make-implementation-restriction-violation) (r4caf core-prim . make-error) (r4cd9 core-prim . make-assertion-violation) (r4d50 core-prim . lexical-violation?) (r4cf4 core-prim . irritants-condition?) (r4d3b core-prim . implementation-restriction-violation?) (r4cb1 core-prim . error?) (r4d11 core-prim . condition-who) (r52ea core-prim . condition-predicate) (r4c72 core-prim . condition-message) (r4cf6 core-prim . condition-irritants) (r52e9 core-prim . condition-accessor) (r52e8 core-prim . condition) (r4cdb core-prim . assertion-violation?) (r52e7 core-prim . condition?) (r52e6 core-prim . utf32->string) (r52e5 core-prim . utf16->string) (r52e4 core-prim . utf8->string) (r52e3 core-prim . uint-list->bytevector) (r52e2 core-prim . u8-list->bytevector) (r52e1 core-prim . string->utf8) (r52e0 core-prim . string->utf32) (r52df core-prim . string->utf16) (r52de core-prim . sint-list->bytevector) (r52dd core-prim . native-endianness) (r52dc core-prim . bytevector?) (r52db core-prim . bytevector=?) (r52da core-prim . bytevector-uint-set!) (r52d9 core-prim . bytevector-uint-ref) (r52d8 core-prim . bytevector-u8-set!) (r52d7 core-prim . bytevector-u8-ref) (r52d6 core-prim . bytevector-u64-set!) (r52d5 core-prim . bytevector-u64-ref) (r52d4 core-prim . bytevector-u64-native-set!) (r52d3 core-prim . bytevector-u64-native-ref) (r52d2 core-prim . bytevector-u32-set!) (r52d1 core-prim . bytevector-u32-ref) (r52d0 core-prim . bytevector-u32-native-set!) (r52cf core-prim . bytevector-u32-native-ref) (r52ce core-prim . bytevector-u16-set!) (r52cd core-prim . bytevector-u16-ref) (r52cc core-prim . bytevector-u16-native-set!) (r52cb core-prim . bytevector-u16-native-ref) (r52ca core-prim . bytevector-sint-set!) (r52c9 core-prim . bytevector-sint-ref) (r52c8 core-prim . bytevector-s8-set!) (r52c7 core-prim . bytevector-s8-ref) (r52c6 core-prim . bytevector-s64-set!) (r52c5 core-prim . bytevector-s64-ref) (r52c4 core-prim . bytevector-s64-native-set!) (r52c3 core-prim . bytevector-s64-native-ref) (r52c2 core-prim . bytevector-s32-set!) (r52c1 core-prim . bytevector-s32-ref) (r52c0 core-prim . bytevector-s32-native-set!) (r52bf core-prim . bytevector-s32-native-ref) (r52be core-prim . bytevector-s16-set!) (r52bd core-prim . bytevector-s16-ref) (r52bc core-prim . bytevector-s16-native-set!) (r52bb core-prim . bytevector-s16-native-ref) (r52ba core-prim . bytevector-length) (r52b9 core-prim . bytevector-ieee-single-ref) (r52b8 core-prim . bytevector-ieee-single-set!) (r52b7 core-prim . bytevector-ieee-single-native-set!) (r52b6 core-prim . bytevector-ieee-single-native-ref) (r52b5 core-prim . bytevector-ieee-double-set!) (r52b4 core-prim . bytevector-ieee-double-ref) (r52b3 core-prim . bytevector-ieee-double-native-set!) (r52b2 core-prim . bytevector-ieee-double-native-ref) (r52b1 core-prim . bytevector-fill!) (r52b0 core-prim . bytevector-copy!) (r52af core-prim . bytevector-copy) (r52ae core-prim . bytevector->uint-list) (r52ad core-prim . bytevector->u8-list) (r52ac core-prim . bytevector->sint-list) (r4ec4 core-prim . no-nans-violation?) (r4eaf core-prim . no-infinities-violation?) (r4ec2 core-prim . make-no-nans-violation) (r4ead core-prim . make-no-infinities-violation) (r52ab core-prim . real->flonum) (r52aa core-prim . flzero?) (r52a9 core-prim . fltruncate) (r52a8 core-prim . fltan) (r52a7 core-prim . flsqrt) (r52a6 core-prim . flsin) (r52a5 core-prim . flround) (r52a4 core-prim . flpositive?) (r52a3 core-prim . flonum?) (r52a2 core-prim . flodd?) (r52a1 core-prim . flnumerator) (r52a0 core-prim . flnegative?) (r529f core-prim . flnan?) (r529e core-prim . flmod0) (r529d core-prim . flmod) (r529c core-prim . flmin) (r529b core-prim . flmax) (r529a core-prim . fllog) (r5299 core-prim . flinteger?) (r5298 core-prim . flinfinite?) (r5297 core-prim . flfloor) (r5296 core-prim . flfinite?) (r5295 core-prim . flexpt) (r5294 core-prim . flexp) (r5293 core-prim . fleven?) (r5292 core-prim . fldiv0-and-mod0) (r5291 core-prim . fldiv0) (r5290 core-prim . fldiv-and-mod) (r528f core-prim . fldiv) (r528e core-prim . fldenominator) (r528d core-prim . flcos) (r528c core-prim . flceiling) (r528b core-prim . flatan) (r528a core-prim . flasin) (r5289 core-prim . flacos) (r5288 core-prim . flabs) (r5287 core-prim . fl>?) (r5286 core-prim . fl>=?) (r5285 core-prim . fl=?) (r5284 core-prim . fl<?) (r5283 core-prim . fl<=?) (r5282 core-prim . fl/) (r5281 core-prim . fl-) (r5280 core-prim . fl+) (r527f core-prim . fl*) (r527e core-prim . fixnum->flonum) (r527d core-prim . fxzero?) (r527c core-prim . fxxor) (r527b core-prim . fxrotate-bit-field) (r527a core-prim . fxreverse-bit-field) (r5279 core-prim . fxpositive?) (r5278 core-prim . fxodd?) (r5277 core-prim . fxnot) (r5276 core-prim . fxnegative?) (r5275 core-prim . fxmod0) (r5274 core-prim . fxmod) (r5273 core-prim . fxmin) (r5272 core-prim . fxmax) (r5271 core-prim . fxlength) (r5270 core-prim . fxior) (r526f core-prim . fxif) (r526e core-prim . fxfirst-bit-set) (r526d core-prim . fxeven?) (r526c core-prim . fxdiv0-and-mod0) (r526b core-prim . fxdiv0) (r526a core-prim . fxdiv-and-mod) (r5269 core-prim . fxdiv) (r5268 core-prim . fxcopy-bit-field) (r5267 core-prim . fxcopy-bit) (r5266 core-prim . fxbit-set?) (r5265 core-prim . fxbit-field) (r5264 core-prim . fxbit-count) (r5263 core-prim . fxarithmetic-shift-right) (r5262 core-prim . fxarithmetic-shift-left) (r5261 core-prim . fxarithmetic-shift) (r5260 core-prim . fxand) (r525f core-prim . fx>?) (r525e core-prim . fx>=?) (r525d core-prim . fx=?) (r525c core-prim . fx<?) (r525b core-prim . fx<=?) (r525a core-prim . fx-/carry) (r5259 core-prim . fx-) (r5258 core-prim . fx+/carry) (r5257 core-prim . fx+) (r5256 core-prim . fx*/carry) (r5255 core-prim . fx*) (r5254 core-prim . greatest-fixnum) (r5253 core-prim . least-fixnum) (r5252 core-prim . fixnum-width) (r5251 core-prim . fixnum?) (r5250 core-prim . bitwise-rotate-bit-field) (r524f core-prim . bitwise-reverse-bit-field) (r524e core-prim . bitwise-length) (r524d core-prim . bitwise-if) (r524c core-prim . bitwise-first-bit-set) (r524b core-prim . bitwise-copy-bit-field) (r524a core-prim . bitwise-copy-bit) (r5249 core-prim . bitwise-bit-set?) (r5248 core-prim . bitwise-bit-field) (r5247 core-prim . bitwise-bit-count) (r5246 core-prim . bitwise-xor) (r5245 core-prim . bitwise-ior) (r5244 core-prim . bitwise-and) (r5243 core-prim . bitwise-not) (r5242 core-prim . bitwise-arithmetic-shift-right) (r5241 core-prim . bitwise-arithmetic-shift-left) (r5240 core-prim . bitwise-arithmetic-shift) (r523f core-prim . zero?) (r523e core-prim . vector?) (r523d core-prim . vector-set!) (r523c core-prim . vector-ref) (r523b core-prim . vector-map) (r523a core-prim . vector-length) (r5239 core-prim . vector-for-each) (r5238 core-prim . vector-fill!) (r5237 core-prim . vector->list) (r5236 core-prim . vector) (r5235 core-prim . values) (r5234 core-prim . truncate) (r5233 core-prim . tan) (r5232 core-prim . symbol?) (r5231 core-prim . symbol=?) (r5230 core-prim . symbol->string) (r522f core-prim . substring) (r522e core-prim . string?) (r522d core-prim . string>?) (r522c core-prim . string>=?) (r522b core-prim . string=?) (r522a core-prim . string<?) (r5229 core-prim . string<=?) (r5228 core-prim . string-ref) (r5227 core-prim . string-length) (r5226 core-prim . string-for-each) (r5225 core-prim . string-copy) (r5224 core-prim . string-append) (r5223 core-prim . string->symbol) (r5222 core-prim . string->number) (r5221 core-prim . string->list) (r5220 core-prim . string) (r521f core-prim . sqrt) (r521e core-prim . sin) (r521d core-prim . round) (r521c core-prim . reverse) (r521b core-prim . real?) (r521a core-prim . real-valued?) (r5219 core-prim . real-part) (r5218 core-prim . rationalize) (r5217 core-prim . rational?) (r5216 core-prim . rational-valued?) (r5215 core-prim . procedure?) (r5214 core-prim . positive?) (r5213 core-prim . pair?) (r5212 core-prim . odd?) (r5211 core-prim . numerator) (r5210 core-prim . number?) (r520f core-prim . number->string) (r520e core-prim . null?) (r520d core-prim . not) (r520c core-prim . negative?) (r520b core-prim . nan?) (r520a core-prim . min) (r5209 core-prim . max) (r5208 core-prim . map) (r5207 core-prim . make-vector) (r5206 core-prim . make-string) (r5205 core-prim . make-rectangular) (r5204 core-prim . make-polar) (r5203 core-prim . magnitude) (r5202 core-prim . log) (r5201 core-prim . list?) (r5200 core-prim . list-tail) (r51ff core-prim . list-ref) (r51fe core-prim . list->vector) (r51fd core-prim . list->string) (r51fc core-prim . list) (r51fb core-prim . length) (r51fa core-prim . lcm) (r51f9 core-prim . integer?) (r51f8 core-prim . integer-valued?) (r51f7 core-prim . integer->char) (r51f6 core-prim . infinite?) (r51f5 core-prim . inexact?) (r51f4 core-prim . inexact) (r51f3 core-prim . imag-part) (r51f2 core-prim . gcd) (r51f1 core-prim . for-each) (r51f0 core-prim . floor) (r51ef core-prim . finite?) (r51ee core-prim . expt) (r51ed core-prim . exp) (r51ec core-prim . exact?) (r51eb core-prim . exact-integer-sqrt) (r51ea core-prim . exact) (r51e9 core-prim . even?) (r51e8 core-prim . error) (r51e7 core-prim . eqv?) (r51e6 core-prim . equal?) (r51e5 core-prim . eq?) (r51e4 core-prim . dynamic-wind) (r51e3 core-prim . div0-and-mod0) (r51e2 core-prim . mod0) (r51e1 core-prim . div0) (r51e0 core-prim . div-and-mod) (r51df core-prim . mod) (r51de core-prim . div) (r51dd core-prim . denominator) (r51dc core-prim . cos) (r51db core-prim . cons) (r51da core-prim . complex?) (r51d9 core-prim . char?) (r51d8 core-prim . char>?) (r51d7 core-prim . char>=?) (r51d6 core-prim . char=?) (r51d5 core-prim . char<?) (r51d4 core-prim . char<=?) (r51d3 core-prim . char->integer) (r51d2 core-prim . ceiling) (r51d1 core-prim . call-with-values) (r51d0 core-prim . call/cc) (r51cf core-prim . call-with-current-continuation) (r51ce core-prim . cddddr) (r51cd core-prim . cdddar) (r51cc core-prim . cddadr) (r51cb core-prim . cddaar) (r51ca core-prim . cdaddr) (r51c9 core-prim . cdadar) (r51c8 core-prim . cdaadr) (r51c7 core-prim . cdaaar) (r51c6 core-prim . cadddr) (r51c5 core-prim . caddar) (r51c4 core-prim . cadadr) (r51c3 core-prim . cadaar) (r51c2 core-prim . caaddr) (r51c1 core-prim . caadar) (r51c0 core-prim . caaadr) (r51bf core-prim . caaaar) (r51be core-prim . cdddr) (r51bd core-prim . cddar) (r51bc core-prim . cdadr) (r51bb core-prim . cdaar) (r51ba core-prim . caddr) (r51b9 core-prim . cadar) (r51b8 core-prim . caadr) (r51b7 core-prim . caaar) (r51b6 core-prim . cddr) (r51b5 core-prim . cdar) (r51b4 core-prim . cadr) (r51b3 core-prim . caar) (r51b2 core-prim . cdr) (r51b1 core-prim . car) (r51b0 core-prim . boolean?) (r51af core-prim . boolean=?) (r51ae core-prim . atan) (r51ad core-prim . assertion-violation) (r3193 core-prim . assertion-error) (r51ac core-prim . asin) (r51ab core-prim . apply) (r51aa core-prim . append) (r51a9 core-prim . angle) (r51a8 core-prim . acos) (r51a7 core-prim . abs) (r51a6 core-prim . /) (r51a5 core-prim . *) (r51a4 core-prim . -) (r51a3 core-prim . +) (r51a2 core-prim . >=) (r51a1 core-prim . >) (r51a0 core-prim . =) (r519f core-prim . <=) (r519e core-prim . <) (r519d core-prim . library) (r519c $core-rtd &no-nans-rtd &no-nans-rcd) (r519b $core-rtd &no-infinities-rtd &no-infinities-rcd) (r519a $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (r5199 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (r5198 $core-rtd &i/o-port-rtd &i/o-port-rcd) (r5197 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (r5196 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (r5195 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (r5194 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (r5193 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (r5192 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (r5191 $core-rtd &i/o-write-rtd &i/o-write-rcd) (r5190 $core-rtd &i/o-read-rtd &i/o-read-rcd) (r518f $core-rtd &i/o-rtd &i/o-rcd) (r518e $core-rtd &undefined-rtd &undefined-rcd) (r518d $core-rtd &syntax-rtd &syntax-rcd) (r518c $core-rtd &lexical-rtd &lexical-rcd) (r518b $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (r518a $core-rtd &non-continuable-rtd &non-continuable-rcd) (r5189 $core-rtd &who-rtd &who-rcd) (r5188 $core-rtd &irritants-rtd &irritants-rcd) (r5187 $core-rtd &assertion-rtd &assertion-rcd) (r5186 $core-rtd &violation-rtd &violation-rcd) (r5185 $core-rtd &error-rtd &error-rcd) (r5184 $core-rtd &serious-rtd &serious-rcd) (r5183 $core-rtd &warning-rtd &warning-rcd) (r5182 $core-rtd &message-rtd &message-rcd) (r5181 $core-rtd &condition-rtd &condition-rcd) (r5180 macro . define-condition-type) (r517f macro . define-enumeration) (r517e macro . define-record-type) (r517d macro . parent-rtd) (r517c macro . nongenerative) (r517b macro . opaque) (r517a macro . sealed) (r5179 macro . protocol) (r5178 macro . parent) (r5177 macro . immutable) (r5176 macro . mutable) (r5175 macro . fields) (r5174 macro . error-handling-mode) (r5173 macro . file-options) (r5172 macro . buffer-mode) (r5171 macro . eol-style) (r5170 macro . guard) (r516f macro . trace-define) (r516e macro . trace-lambda) (r516d macro . unsyntax-splicing) (r516c macro . unsyntax) (r516b macro . unquote-splicing) (r516a macro . unquote) (r5169 macro . _) (r5168 macro . else) (r5167 macro . =>) (r5166 macro . ...) (r5165 macro . assert) (r5164 macro . endianness) (r5163 macro . delay) (r5162 macro . time) (r5161 macro . do) (r5160 macro . cond) (r515f macro . let*) (r515e macro . let*-values) (r515d macro . let-values) (r515c macro . identifier-syntax) (r515b macro . with-syntax) (r515a macro . quasisyntax) (r5159 macro . quasiquote) (r5158 macro . syntax-rules) (r5157 macro . include) (r5156 macro . define-struct) (r5155 core-macro . record-constructor-descriptor) (r5154 core-macro . record-type-descriptor) (r5153 macro . case) (r5152 macro . parameterize) (r5151 macro . unless) (r5150 macro . when) (r514f core-macro . or) (r514e core-macro . and) (r514d core-macro . if) (r514c core-macro . let) (r514b core-macro . letrec*) (r514a core-macro . letrec) (r5149 core-macro . type-descriptor) (r5148 core-macro . case-lambda) (r5147 core-macro . lambda) (r5146 core-macro . syntax) (r5145 core-macro . syntax-case) (r5144 core-macro . quote) (r5143 core-macro . foreign-call) (r5142 letrec-syntax) (r5141 let-syntax) (r5140 set!) (r513f import) (r513e begin) (r513d module) (r513c define-syntax) (r513b define)) values values '#f '#f '#f '#f) (r2ccd@r2b19@install-library 'r5482 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . r5461) (eval-core . r5460) (set-symbol-value! . r545f) (symbol-value . r545e) (gensym . r545d) (void . r545c)) '() values values '#f '#f '#f '#f) (r2ccd@r2b19@install-library 'r5483 '(mosh) '() '() '() '() '((set-symbol-value! . r545f) (symbol-value . r545e) (regexp? . r545a) (read-line . r5459) (ungensym . r5457) (alist->eq-hash-table . r5456) (assoc-ref . r5455) (print . r5454) (format . r5453) (host-os . r5452) (library-path . r2af8) (standard-library-path . r5451) (file-newer? . r5450) (stat-mtime . r544f) (digit->integer . r544b) (call-with-string-input-port . r544a) (call-with-string-io . r5449) (string-split . r5448) (bytevector-for-each . r5447) (string->regexp . r5446) (rxmatch . r5445) (regexp-replace-all . r5444) (hashtable-for-each . r5443) (set-current-directory! . r543e) (expand-path . r543d) (current-directory . r543c) (p . r53fe) (get-timeofday . r53e5) (get-command-line . r53e4) (sys-display . r53e3) (whereis . r53e2) (register . r53e1) (vm-join! . r53e0) (vm-set-value! . r53df) (vm? . r53de) (main-vm? . r53dd) (vm-eval . r53dc) (vm-self . r53db) (vm-start! . r53da) (make-vm . r53d9) (mutex-try-lock! . r53d8) (mutex-unlock! . r53d7) (mutex-lock! . r53d6) (mutex? . r53d5) (make-mutex . r53d4) (condition-variable-notify-all! . r53d3) (condition-variable-notify! . r53d2) (condition-variable-wait! . r53d1) (make-condition-variable . r53d0) (mosh-executable-path . r53cf) (make-file-options . r53ce) (source-info . r53cd) (make-compiler-instruction . r53cc) (make-instruction . r53cb) (set-source-info! . r53ca) (bignum? . r53c9) (fast-equal? . r53c8) (fasl-read . r53c7) (fasl-write . r53c6) (time-usage . r53c5) (os-constant . r53c4) (time . r5162) (include . r5157)) '() values values '#f '#f '#f '#f) (r2ccd@r2b19@install-library 'r5484 '(system) '() '() '() '() '((gensym-prefix-set! . r5458) (write-to-file . r544e) (file->list . r544d) (file->string . r544c) (mosh-cache-dir . r28e2) (call-process . r5442) (local-tz-offset . r5441) (microseconds . r5440) (directory-list . r543f) (expand-path . r543d) (%spawn . r543b) (%waitpid . r543a) (simple-struct-name . r5439) (simple-struct-set! . r5438) (simple-struct-ref . r5437) (make-simple-struct . r5436) (simple-struct? . r5435) (pointer-ref-c-int64 . r5434) (pointer-ref-c-int32 . r5433) (pointer-ref-c-int16 . r5432) (pointer-ref-c-int8 . r5431) (pointer-ref-c-uint64 . r5430) (pointer-ref-c-uint32 . r542f) (pointer-ref-c-uint16 . r542e) (pointer-ref-c-uint8 . r542d) (pointer-set-c-uint64! . r542c) (pointer-set-c-uint32! . r542b) (pointer-set-c-uint16! . r542a) (pointer-set-c-uint8! . r5429) (pointer-set-c-int64! . r5428) (pointer-set-c-int32! . r5427) (pointer-set-c-int16! . r5426) (pointer-set-c-int8! . r5425) (pointer-set-c-pointer! . r5424) (pointer-set-c-double! . r5423) (pointer-set-c-float! . r5422) (pointer-set-c-long-long! . r5421) (pointer-set-c-long! . r5420) (pointer-set-c-int! . r541f) (pointer-set-c-short! . r541e) (pointer-set-c-char! . r541d) (pointer-ref-c-pointer . r541c) (pointer-ref-c-double . r541b) (pointer-ref-c-float . r541a) (pointer-ref-c-unsigned-long-long . r5419) (pointer-ref-c-signed-long-long . r5418) (pointer-ref-c-unsigned-long . r5417) (pointer-ref-c-signed-long . r5416) (pointer-ref-c-unsigned-int . r5415) (pointer-ref-c-signed-int . r5414) (pointer-ref-c-unsigned-short . r5413) (pointer-ref-c-signed-short . r5412) (pointer-ref-c-unsigned-char . r5411) (pointer-ref-c-signed-char . r5410) (pointer->integer . r540f) (integer->pointer . r540e) (pointer? . r540d) (shared-errno . r540c) (%ffi-free-c-callback-trampoline . r540b) (%ffi-make-c-callback-trampoline . r540a) (%ffi-free . r5409) (%ffi-malloc . r5408) (%ffi-supported? . r5407) (%ffi-pointer->string . r5406) (%ffi-call . r5405) (%ffi-lookup . r5404) (%ffi-open . r5403) (null-terminated-utf8->string . r5402) (null-terminated-bytevector->string . r5401) (%fork . r5400) (%pipe . r53ff) (open-output-string . r53fd) (get-output-string . r53fc) (file-stat-ctime . r53fb) (file-stat-atime . r53fa) (file-stat-mtime . r53f9) (file-size-in-bytes . r53f8) (file-writable? . r53f7) (file-executable? . r53f6) (file-readable? . r53f5) (file-regular? . r53f4) (file-symbolic-link? . r53f3) (file-directory? . r53f2) (create-symbolic-link . r53f1) (rename-file . r53f0) (delete-directory . r53ef) (create-directory . r53ee) (create-mosh-cache-dir . r53ed) (get-environment-variables . r53ec) (current-exception-handler . r53eb) (get-environment-variable . r53ea) (join-wraps . r53e9) (id->real-label . r53e8) (same-marks? . r53e7) (same-marks*? . r53e6) (disasm . r53c3) (make-parameter . r28e0) (socket-port . r53c2) (socket-shutdown . r53c1) (socket-close . r53c0) (socket-send . r53bf) (socket-recv! . r53be) (socket-recv . r53bd) (make-server-socket . r53bc) (make-client-socket . r53bb) (socket-accept . r53ba) (socket? . r53b9) (parameterize . r5152)) '() values values '#f '#f '#f '#f)))
(begin (set! r4fbe@ref (unspecified)) (set! r4fc0@x* (unspecified)) (set! r4fc2@add-library-path! (unspecified)) (set! r4fc4@parse-and-add-library-path (unspecified)) (set! r4fc6@for-each-with-index (unspecified)) (set! r4fc8@rpad (unspecified)) (set! r4fca@condition-printer (unspecified)) (set! r4fcc@record->field-alist (unspecified)) (set! r4fce@map-with-index (unspecified)) (set! r4fd0@repl (unspecified)) (set! r4fd2@trace-printer (unspecified)) (set! r4fd4@command-line (unspecified)) (set! r4fd6@local-library-path (unspecified)) (set! r4fd8@load/args (unspecified)) (set! r4fda@load (unspecified)) (set! r4fdc@ironscheme-build (unspecified)) (set! r4fde@eval-top-level (unspecified)) (set! r4fe0@compile-system-libraries (unspecified)) (set! r4fe2@compile (unspecified)) (set! r4fe4@compile->closure (unspecified)) (set! r4fe6@pre-compile-r6rs-file (unspecified)) (set! r4fe8@load-r6rs-top-level (unspecified)) (set! r4fea@load-r6rs-top-level-sexp (unspecified)) (set! r4fec@prefix-inc (unspecified)) (set! r4fee@prefix-inc! (unspecified)) (set! r4fbe@ref (lambda (r5029@rtd r502a@i r502b@x) (let ((r502f@val ((record-accessor r5029@rtd r502a@i) r502b@x))) (if (symbol? r502f@val) (ungensym r502f@val) r502f@val)))) (set! r5121@r4fbe@ref r4fbe@ref) (set! r4fc0@x* '()) (set! r5122@r4fc0@x* r4fc0@x*) (set! r4fc2@add-library-path! (lambda (r5031@path) (r2cbd@r2af9@library-path (append (r2cbd@r2af9@library-path) (list r5031@path))))) (set! r5123@r4fc2@add-library-path! r4fc2@add-library-path!) (set! r4fc4@parse-and-add-library-path (lambda (r5033@paths r5034@message) (letrec* ((r5038@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((r5039@t r5033@paths)) (if r5039@t ((lambda (r503b@paths) (for-each (lambda (r503d@path) (if (file-exists? r503d@path) (r4fc2@add-library-path! (expand-path r503d@path)) (format (current-error-port) r5034@message r503d@path))) (string-split r503b@paths r5038@separator))) r5039@t) (void)))))) (set! r5124@r4fc4@parse-and-add-library-path r4fc4@parse-and-add-library-path) (set! r4fc6@for-each-with-index (lambda (r503f@proc r5040@lst) (letrec ((r5043@loop (lambda (r5045@i r5046@lst) (if (null? r5046@lst) (if '#f '#f (void)) (begin (r503f@proc r5045@i (car r5046@lst)) (r5043@loop (+ r5045@i '1) (cdr r5046@lst))))))) (r5043@loop '1 r5040@lst)))) (set! r5125@r4fc6@for-each-with-index r4fc6@for-each-with-index) (set! r4fc8@rpad (lambda (r5049@str r504a@pad r504b@n) (let ((r504f@rest (- r504b@n (string-length (format '"~a" r5049@str))))) (let r5055@loop ((r5051@rest r504f@rest) (r5052@ret (format '"~a" r5049@str))) (if (<= r5051@rest '0) r5052@ret (r5055@loop (- r5051@rest '1) (string-append r5052@ret r504a@pad))))))) (set! r5126@r4fc8@rpad r4fc8@rpad) (set! r4fca@condition-printer (lambda (r5057@e r5058@port) (letrec* ((r505c@max-condition-len (apply max (map (lambda (r506d@c) (string-length (symbol->string (record-type-name (record-rtd r506d@c))))) (simple-conditions r5057@e))))) (begin (display '" Condition components:\n" r5058@port) (r4fc6@for-each-with-index (lambda (r505d@i r505e@x) (let ((r5061@rtd (record-rtd r505e@x)) (r5062@fields-alist (r4fcc@record->field-alist r505e@x))) (begin (format r5058@port '" ~d. ~a" r505d@i (r4fc8@rpad (symbol->string (record-type-name r5061@rtd)) '" " r505c@max-condition-len)) (if (null? r5062@fields-alist) (newline r5058@port) (void)) (let r5069@loop ((r5065@first '#t) (r5066@fields-alist r5062@fields-alist)) (if (null? r5066@fields-alist) '() (let ((r506b@field (car r5066@fields-alist))) (begin (if (not r5065@first) (display (r4fc8@rpad '"" '" " (+ '4 r505c@max-condition-len)) r5058@port) (void)) (display '"       " r5058@port) (display (car r506b@field) r5058@port) (display '": " r5058@port) (write (cdr r506b@field) r5058@port) (newline r5058@port) (r5069@loop '#f (cdr r5066@fields-alist))))))))) (simple-conditions r5057@e)))))) (set! r5127@r4fca@condition-printer r4fca@condition-printer) (set! r4fcc@record->field-alist (lambda (r506f@r) (letrec* ((r5072@ref (lambda (r507d@rtd r507e@i r507f@x) (let ((r5083@val ((record-accessor r507d@rtd r507e@i) r507f@x))) (if (symbol? r5083@val) (ungensym r5083@val) r5083@val))))) (let r5077@loop ((r5073@ret '()) (r5074@rtd (record-rtd r506f@r))) (if r5074@rtd (r5077@loop (append r5073@ret (r4fce@map-with-index (lambda (r5079@i r507a@field) (cons r507a@field (r5072@ref r5074@rtd r5079@i r506f@r))) (vector->list (record-type-field-names r5074@rtd)))) (record-type-parent r5074@rtd)) r5073@ret))))) (set! r5128@r4fcc@record->field-alist r4fcc@record->field-alist) (set! r4fce@map-with-index (lambda (r5085@proc r5086@lst) (let r508f@loop ((r5089@i '0) (r508a@lst r5086@lst) (r508b@ret '())) (if (null? r508a@lst) (reverse r508b@ret) (r508f@loop (+ r5089@i '1) (cdr r508a@lst) (cons (r5085@proc r5089@i (car r508a@lst)) r508b@ret)))))) (set! r5129@r4fce@map-with-index r4fce@map-with-index) (set! r4fd0@repl (lambda r5091@x (letrec* ((r5094@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (r5097@r5095) (lambda () (with-exception-handler (lambda (r5099@e) ((call/cc (lambda (r509b@r5096) (r5097@r5095 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? r5099@e) (r4fca@condition-printer r5099@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" r5099@e))) (r509b@r5096 (lambda () (raise-continuable r5099@e)))))))))) (lambda () (let r50a1@loop ((r509d@line (get-line (current-input-port))) (r509e@accum '"")) (letrec* ((r50a4@parentheses-ok? (lambda (r50ab@text) (let r50b3@loop ((r50ad@chars (string->list r50ab@text)) (r50ae@p0 '0) (r50af@p1 '0)) (if (null? r50ad@chars) (= '0 r50ae@p0 r50af@p1) (let ((r50b5@t (car r50ad@chars))) (if (memv r50b5@t '(#\()) (r50b3@loop (cdr r50ad@chars) (+ r50ae@p0 '1) r50af@p1) (if (memv r50b5@t '(#\))) (r50b3@loop (cdr r50ad@chars) (- r50ae@p0 '1) r50af@p1) (if (memv r50b5@t '(#\[)) (r50b3@loop (cdr r50ad@chars) r50ae@p0 (+ r50af@p1 '1)) (if (memv r50b5@t '(#\])) (r50b3@loop (cdr r50ad@chars) r50ae@p0 (- r50af@p1 '1)) (r50b3@loop (cdr r50ad@chars) r50ae@p0 r50af@p1)))))))))) (r50a6@eval-string-print (lambda (r50a9@text) (if (not (or (string=? '"\n" r50a9@text) (= '0 (string-length r50a9@text)))) (write (r4fde@eval-top-level (call-with-port (open-string-input-port r50a9@text) read))) (void))))) (if (eof-object? r509d@line) (begin (r50a6@eval-string-print r509e@accum) (exit)) (let ((r50a7@current (string-append r509e@accum r509d@line))) (if (r50a4@parentheses-ok? r50a7@current) (r50a6@eval-string-print r50a7@current) (r50a1@loop (get-line (current-input-port)) r50a7@current)))))))))))) (newline) (r5094@rec))))) (r5094@rec)))) (set! r512a@r4fd0@repl r4fd0@repl) (set! r4fd2@trace-printer (r2a03@r28e1@make-parameter write)) (set! r512b@r4fd2@trace-printer r4fd2@trace-printer) (set! r4fd4@command-line (r2a03@r28e1@make-parameter (get-command-line))) (set! r512c@r4fd4@command-line r4fd4@command-line) (set! r4fd6@local-library-path (lambda (r50b7@filename) (r2cbd@r2af9@library-path))) (set! r512d@r4fd6@local-library-path r4fd6@local-library-path) (set! r4fd8@load/args (lambda (r50b9@filename . r50bb@args) (begin (apply r4fe8@load-r6rs-top-level r50b9@filename 'load r50bb@args) (void)))) (set! r512e@r4fd8@load/args r4fd8@load/args) (set! r4fda@load (lambda (r50bd@filename) (begin (apply r4fe8@load-r6rs-top-level r50bd@filename 'load (r4fd4@command-line)) (void)))) (set! r512f@r4fda@load r4fda@load) (set! r4fdc@ironscheme-build (lambda () (r4fda@load '"ironscheme-buildscript.ss"))) (set! r5130@r4fdc@ironscheme-build r4fdc@ironscheme-build) (set! r4fde@eval-top-level (lambda (r50bf@x) (r4be4@r317a@eval r50bf@x (r4bfb@r31a8@interaction-environment)))) (set! r5131@r4fde@eval-top-level r4fde@eval-top-level) (set! r4fe0@compile-system-libraries (lambda () (r4fde@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! r5132@r4fe0@compile-system-libraries r4fe0@compile-system-libraries) (set! r4fe2@compile (lambda (r50c1@filename) (r4fe8@load-r6rs-top-level r50c1@filename 'compile))) (set! r5133@r4fe2@compile r4fe2@compile) (set! r4fe4@compile->closure (lambda (r50c3@filename) (r4fe8@load-r6rs-top-level r50c3@filename 'closure))) (set! r5134@r4fe4@compile->closure r4fe4@compile->closure) (set! r4fe6@pre-compile-r6rs-file (lambda (r50c5@filename) (r4fe8@load-r6rs-top-level r50c5@filename 'compile))) (set! r5135@r4fe6@pre-compile-r6rs-file r4fe6@pre-compile-r6rs-file) (set! r4fe8@load-r6rs-top-level (lambda (r50c7@filename r50c8@how . r50cb@args) (begin (r2cbd@r2af9@library-path (r4fd6@local-library-path r50c7@filename)) (let ((r50cd@x* (with-input-from-file r50c7@filename (lambda () (let r50cf@f () (let ((r50d1@x (r29f5@r28c5@read-annotated))) (if (eof-object? r50d1@x) '() (cons r50d1@x (r50cf@f))))))))) (let ((r50d3@t r50c8@how)) (if (memv r50d3@t '(closure)) (r4bfa@r31a6@pre-compile-r6rs-top-level r50cd@x*) (if (memv r50d3@t '(load)) (begin (r4fd4@command-line (cons r50c7@filename (car r50cb@args))) (r2a04@r28e3@mosh-cache-dir (create-mosh-cache-dir)) (if (r2a04@r28e3@mosh-cache-dir) (gensym-prefix-set! (r4fee@prefix-inc! (string-append (r2a04@r28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (r50d5@file) ((call/cc (lambda (r50d9@r50d7) (lambda () (with-exception-handler (lambda (r50db@c) ((call/cc (lambda (r50dd@r50d8) (r50d9@r50d7 (lambda () (if '#t '#t (r50dd@r50d8 (lambda () (raise-continuable r50db@c)))))))))) (lambda () (delete-file (string-append (r2a04@r28e3@mosh-cache-dir) '"/" r50d5@file))))))))) (directory-list (r2a04@r28e3@mosh-cache-dir))) (void)) (let ((r50df@compiled (r4bf9@r31a4@compile-r6rs-top-level r50cd@x*))) (begin (if (and (r2a04@r28e3@mosh-cache-dir) (not (symbol-value '%disable-acc))) (r2cc1@r2b01@serialize-all r29fe@r28d7@serialize-library r2a5a@r2a13@compile-core-expr) (void)) (r50df@compiled)))) (if (memv r50d3@t '(compile)) (begin (r4bf9@r31a4@compile-r6rs-top-level r50cd@x*) (r2cc1@r2b01@serialize-all r29fe@r28d7@serialize-library r2a5a@r2a13@compile-core-expr)) (if '#f '#f (void)))))))))) (set! r5136@r4fe8@load-r6rs-top-level r4fe8@load-r6rs-top-level) (set! r4fea@load-r6rs-top-level-sexp (lambda (r50e1@import-spec r50e2@thunk) (let ((r50ed@r50e6 r2cbd@r2af9@library-path) (r50ee@r50e8 r2a04@r28e3@mosh-cache-dir) (r50ef@r50ea (r4fd6@local-library-path '"")) (r50f0@r50ec (create-mosh-cache-dir))) (let ((r50f5@swap (lambda () (begin (let ((r50f7@t (r50ed@r50e6))) (begin (r50ed@r50e6 r50ef@r50ea) (set! r50ef@r50ea r50f7@t))) (let ((r50f9@t (r50ee@r50e8))) (begin (r50ee@r50e8 r50f0@r50ec) (set! r50f0@r50ec r50f9@t))))))) (dynamic-wind r50f5@swap (lambda () (begin (if (r2a04@r28e3@mosh-cache-dir) (gensym-prefix-set! (r4fee@prefix-inc! (string-append (r2a04@r28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((r50ff@r50fc r4fd4@command-line) (r5100@r50fe '())) (let ((r5103@swap (lambda () (let ((r5105@t (r50ff@r50fc))) (begin (r50ff@r50fc r5100@r50fe) (set! r5100@r50fe r5105@t)))))) (dynamic-wind r5103@swap (lambda () ((r4bf9@r31a4@compile-r6rs-top-level (list (cons 'import r50e1@import-spec) (list r50e2@thunk))))) r5103@swap))))) r50f5@swap))))) (set! r5137@r4fea@load-r6rs-top-level-sexp r4fea@load-r6rs-top-level-sexp) (set! r4fec@prefix-inc (lambda (r5107@prefix-string) (let ((r5109@prefix (symbol->string r5107@prefix-string))) (let ((r510b@len (string-length r5109@prefix))) (let r5113@loop ((r510d@i (- r510b@len '1)) (r510e@carry? '#t) (r510f@accum '())) (if (< r510d@i '0) (string->symbol (list->string (if r510e@carry? (cons '#\a r510f@accum) r510f@accum))) (if r510e@carry? (let ((r5115@next-integer (+ '1 (char->integer (string-ref r5109@prefix r510d@i))))) (if (= r5115@next-integer '123) (r5113@loop (- r510d@i '1) '#f (cons '#\A r510f@accum)) (if (= r5115@next-integer '91) (r5113@loop (- r510d@i '1) '#t (cons '#\a r510f@accum)) (r5113@loop (- r510d@i '1) '#f (cons (integer->char r5115@next-integer) r510f@accum))))) (r5113@loop (- r510d@i '1) '#f (cons (string-ref r5109@prefix r510d@i) r510f@accum))))))))) (set! r5138@r4fec@prefix-inc r4fec@prefix-inc) (set! r4fee@prefix-inc! (lambda (r5117@file) (begin (if (not (file-exists? r5117@file)) (call-with-output-file r5117@file (lambda (r5119@port) (write 'd r5119@port))) (void)) (let ((r511b@prefix (call-with-input-file r5117@file read))) (if (main-vm?) (let ((r511d@next-prefix (r4fec@prefix-inc r511b@prefix))) (begin (call-with-port (open-file-output-port r5117@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (r511f@port) (write r511d@next-prefix r511f@port))) r511b@prefix)) r511b@prefix))))) (set! r5139@r4fee@prefix-inc! r4fee@prefix-inc!) (begin (r2cc2@r2b03@current-precompiled-library-loader r29ff@r28d9@load-serialized-library) (set-symbol-value! 'load r4fda@load) (set-symbol-value! 'pre-compile-r6rs-file r4fe6@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs r4fde@eval-top-level) (set-symbol-value! 'int-env-syms r4bdb@r3168@interaction-environment-symbols) (set-symbol-value! 'expanded2core r2a59@r2a11@expanded->core) (set-symbol-value! 'trace-printer r4fd2@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (r4fef@c) (condition (r4f1b@r4d25@make-non-continuable-violation) (r4f11@r4d0c@make-who-condition 'raise) (r4ed5@r4c6d@make-message-condition '"returned from non-continuable exception") (r4f07@r4cf1@make-irritants-condition (list r4fef@c))))) (r4fc4@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (r4fc4@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (r4fc2@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (r4fc2@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (r4fc2@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((r4ff1@prefix (lambda (r4ff3@ext r4ff4@ls) (append (map (lambda (r4ff7@x) (string-append r4ff3@ext r4ff7@x)) r4ff4@ls) r4ff4@ls)))) (r2cbe@r2afb@library-extensions (r4ff1@prefix '".mosh" (r2cbe@r2afb@library-extensions)))) (current-exception-handler (lambda (r4ff9@c) (begin (if (condition? r4ff9@c) (r4fca@condition-printer r4ff9@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" r4ff9@c)) r4ff9@c))) (if ((call/cc (lambda (r4ffd@r4ffb) (lambda () (with-exception-handler (lambda (r4fff@c) ((call/cc (lambda (r5001@r4ffc) (r4ffd@r4ffb (lambda () (if '#t '#f (r5001@r4ffc (lambda () (raise-continuable r4fff@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (r4fea@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (r4fd4@command-line)) (let ((r500b@r5004 r4fd4@command-line) (r500c@r5006 r2a04@r28e3@mosh-cache-dir) (r500d@r5008 '()) (r500e@r500a (create-mosh-cache-dir))) (let ((r5013@swap (lambda () (begin (let ((r5015@t (r500b@r5004))) (begin (r500b@r5004 r500d@r5008) (set! r500d@r5008 r5015@t))) (let ((r5017@t (r500c@r5006))) (begin (r500c@r5006 r500e@r500a) (set! r500e@r500a r5017@t))))))) (dynamic-wind r5013@swap (lambda () (begin (if (r2a04@r28e3@mosh-cache-dir) (gensym-prefix-set! (r4fee@prefix-inc! (string-append (r2a04@r28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (r4fd0@repl))) r5013@swap))) (begin (r2cbd@r2af9@library-path (r4fd6@local-library-path (car (r4fd4@command-line)))) (set! r4fc0@x* (with-input-from-file (car (r4fd4@command-line)) (lambda () (let r5019@f () (let ((r501b@x (r29f5@r28c5@read-annotated))) (if (eof-object? r501b@x) '() (cons r501b@x (r5019@f)))))))) (r4fd4@command-line (cons (car (r4fd4@command-line)) (cdr (r4fd4@command-line)))) (r2a04@r28e3@mosh-cache-dir (create-mosh-cache-dir)) (if (r2a04@r28e3@mosh-cache-dir) (gensym-prefix-set! (r4fee@prefix-inc! (string-append (r2a04@r28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (r501d@file) ((call/cc (lambda (r5021@r501f) (lambda () (with-exception-handler (lambda (r5023@c) ((call/cc (lambda (r5025@r5020) (r5021@r501f (lambda () (if '#t '#t (r5025@r5020 (lambda () (raise-continuable r5023@c)))))))))) (lambda () (delete-file (string-append (r2a04@r28e3@mosh-cache-dir) '"/" r501d@file))))))))) (directory-list (r2a04@r28e3@mosh-cache-dir))) (void)) (let ((r5027@compiled (r4bf9@r31a4@compile-r6rs-top-level r4fc0@x*))) (begin (if (and (r2a04@r28e3@mosh-cache-dir) (not (symbol-value '%disable-acc))) (r2cc1@r2b01@serialize-all r29fe@r28d7@serialize-library r2a5a@r2a13@compile-core-expr) (void)) (r5027@compiled))))))))
