;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! pG59b@library-file-path->cache-path (unspecified)) (set! pG59d@read-annotated (unspecified)) (set! pG59f@annotation-stripped (unspecified)) (set! pG5a1@annotation? (unspecified)) (set! pG5a3@annotation-source (unspecified)) (set! pG5a5@annotation-expression (unspecified)) (set! pG5a7@scm->fasl (unspecified)) (set! pG5a9@fasl-save (unspecified)) (set! pG5ab@fasl-load (unspecified)) (set! pG5ad@verbose? (unspecified)) (set! pG5af@serialize-library (unspecified)) (set! pG5b1@load-serialized-library (unspecified)) (set! pG5b3@make-record-printer (unspecified)) (set! pG5b5@compile-core (unspecified)) (set! pG5b7@read-library-source-file (unspecified)) (set! pG5b9@make-parameter (unspecified)) (set! pG5bb@mosh-cache-dir (unspecified)) (set! pG651@file-options-spec (unspecified)) (set! pG59b@library-file-path->cache-path (lambda (pG652@x) (call-with-values (lambda () (open-string-output-port)) (lambda (pG658@pG655 pG659@pG657) (let ((pG65c@extract pG659@pG657) (pG65d@p pG658@pG655)) (letrec* ((pG661@display-hex (lambda (pG66a@n) (if (<= '0 pG66a@n '9) (display pG66a@n pG65d@p) (display (integer->char (+ (char->integer '#\a) (- pG66a@n '10))) pG65d@p))))) (begin (let pG664@f ((pG662@ls (string-split pG652@x '#\/))) (if (not (null? pG662@ls)) (begin (display '"_" pG65d@p) (for-each (lambda (pG666@c) (if (or (char<=? '#\a pG666@c '#\z) (char<=? '#\A pG666@c '#\Z) (char<=? '#\0 pG666@c '#\9) (memv pG666@c '(#\- #\. #\_ #\~))) (display pG666@c pG65d@p) (begin (display '"%" pG65d@p) (let ((pG668@n (char->integer pG666@c))) (begin (pG661@display-hex (quotient pG668@n '16)) (pG661@display-hex (remainder pG668@n '16))))))) (string->list (car pG662@ls))) (pG664@f (cdr pG662@ls))) (void))) (pG65c@extract)))))))) (set! pG6cc@pG59b@library-file-path->cache-path pG59b@library-file-path->cache-path) (set! pG59d@read-annotated read) (set! pG6cd@pG59d@read-annotated pG59d@read-annotated) (set! pG59f@annotation-stripped (lambda (pG66c@x) (if (pair? pG66c@x) (cons (pG59f@annotation-stripped (car pG66c@x)) (pG59f@annotation-stripped (cdr pG66c@x))) (if (procedure? pG66c@x) (set-source-info! pG66c@x '#f) pG66c@x)))) (set! pG6ce@pG59f@annotation-stripped pG59f@annotation-stripped) (set! pG5a1@annotation? (lambda (pG66e@x) (or (and (annotated-pair? pG66e@x) (source-info pG66e@x)) (and (procedure? pG66e@x) (source-info pG66e@x))))) (set! pG6cf@pG5a1@annotation? pG5a1@annotation?) (set! pG5a3@annotation-source (lambda (pG670@x) (source-info pG670@x))) (set! pG6d0@pG5a3@annotation-source pG5a3@annotation-source) (set! pG5a5@annotation-expression (lambda (pG672@x) (if (annotated-pair? pG672@x) (cons (car pG672@x) (cdr pG672@x)) (if (procedure? pG672@x) (set-source-info! pG672@x '#f) pG672@x)))) (set! pG6d1@pG5a5@annotation-expression pG5a5@annotation-expression) (set! pG5a7@scm->fasl (lambda (pG674@filename) (string-append (pG5bb@mosh-cache-dir) '"/" (pG59b@library-file-path->cache-path pG674@filename) '".mosh-fasl"))) (set! pG6d2@pG5a7@scm->fasl pG5a7@scm->fasl) (set! pG5a9@fasl-save (lambda (pG676@filename pG677@obj) (call-with-port (open-file-output-port pG676@filename) (lambda (pG67a@port) ((symbol-value 'fasl-write!) pG677@obj pG67a@port))))) (set! pG6d3@pG5a9@fasl-save pG5a9@fasl-save) (set! pG5ab@fasl-load (lambda (pG67c@filename) (call-with-port (open-file-input-port pG67c@filename) (symbol-value 'fasl-read!)))) (set! pG6d4@pG5ab@fasl-load pG5ab@fasl-load) (set! pG5ad@verbose? (symbol-value '%verbose)) (set! pG6d5@pG5ad@verbose? pG5ad@verbose?) (set! pG5af@serialize-library (lambda (pG67e@filename pG67f@obj) (begin (if pG5ad@verbose? (format (current-error-port) '"serialize-library ~a\n..." pG67e@filename) (void)) (let ((pG682@expanded2core (symbol-value 'expanded2core))) (let ((pG684@compile (symbol-value 'compile-w/o-halt))) (let ((pG686@code pG67f@obj)) (let ((pG688@pivot (cddddr (cddddr pG686@code)))) (let ((pG68a@visit (pG684@compile (pG682@expanded2core (car pG688@pivot))))) (begin (set-car! pG688@pivot pG68a@visit) (let ((pG68c@pivot (cdr pG688@pivot))) (let ((pG68e@invoke (pG684@compile (pG682@expanded2core (car pG68c@pivot))))) (set-car! pG68c@pivot pG68e@invoke))))))))) (let ((pG690@fasl-file (pG5a7@scm->fasl pG67e@filename))) (begin (if (file-exists? pG690@fasl-file) (delete-file pG690@fasl-file) (void)) ((call/cc (lambda (pG694@pG692) (lambda () (with-exception-handler (lambda (pG696@c) ((call/cc (lambda (pG698@pG693) (pG694@pG692 (lambda () (if '#t (begin (if pG5ad@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" pG67e@filename) (void)) (if (file-exists? pG690@fasl-file) (delete-file pG690@fasl-file) (void)) '#f) (pG698@pG693 (lambda () (raise-continuable pG696@c)))))))))) (lambda () (pG5a9@fasl-save pG690@fasl-file pG67f@obj)))))))))))) (set! pG6d6@pG5af@serialize-library pG5af@serialize-library) (set! pG5b1@load-serialized-library (lambda (pG69a@filename pG69b@obj) (and (pG5bb@mosh-cache-dir) (let ((pG69e@fasl-file (pG5a7@scm->fasl pG69a@filename))) (if (and (file-exists? pG69e@fasl-file) ((symbol-value 'file-newer?) pG69e@fasl-file pG69a@filename)) (let ((pG6a0@expanded2core (symbol-value 'expanded2core))) (let ((pG6a2@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((pG6a4@code (pG5ab@fasl-load pG69e@fasl-file))) (let ((pG6a6@pivot (cddddr (cddddr pG6a4@code)))) (let ((pG6a8@visit (car pG6a6@pivot))) (let ((pG6aa@visit-proc (lambda () (pG6a2@eval-compiled-core pG6a8@visit)))) (begin (set-car! pG6a6@pivot pG6aa@visit-proc) (let ((pG6ac@pivot (cdr pG6a6@pivot))) (let ((pG6ae@invoke (car pG6ac@pivot))) (begin (set-car! pG6ac@pivot (lambda () (pG6a2@eval-compiled-core pG6ae@invoke))) (apply pG69b@obj pG6a4@code))))))))))) '#f))))) (set! pG6d7@pG5b1@load-serialized-library pG5b1@load-serialized-library) (set! pG5b3@make-record-printer (lambda (pG6b0@name pG6b1@printer) (lambda pG6b4@x (begin (display '"record printer") (for-each display pG6b4@x))))) (set! pG6d8@pG5b3@make-record-printer pG5b3@make-record-printer) (set! pG5b5@compile-core (lambda pG6b6@x (apply error 'comile-core '"not implementated" pG6b6@x))) (set! pG6d9@pG5b5@compile-core pG5b5@compile-core) (set! pG5b7@read-library-source-file (lambda (pG6b8@file-name) (with-input-from-file pG6b8@file-name pG59d@read-annotated))) (set! pG6da@pG5b7@read-library-source-file pG5b7@read-library-source-file) (set! pG5b9@make-parameter (lambda pG6c8 (let ((pG6c9 (length pG6c8))) (if (= pG6c9 '1) (apply (lambda (pG6ba@x) (pG5b9@make-parameter pG6ba@x (lambda (pG6bc@x) pG6bc@x))) pG6c8) (if (= pG6c9 '2) (apply (lambda (pG6be@x pG6bf@fender) (let ((pG6c2@x (pG6bf@fender pG6be@x))) (lambda pG6c6 (let ((pG6c7 (length pG6c6))) (if (= pG6c7 '0) (apply (lambda () pG6c2@x) pG6c6) (if (= pG6c7 '1) (apply (lambda (pG6c4@v) (set! pG6c2@x (pG6bf@fender pG6c4@v))) pG6c6) (error 'apply '"invalid arg count"))))))) pG6c8) (error 'apply '"invalid arg count")))))) (set! pG6db@pG5b9@make-parameter pG5b9@make-parameter) (set! pG5bb@mosh-cache-dir (pG5b9@make-parameter '#f)) (set! pG6dc@pG5bb@mosh-cache-dir pG5bb@mosh-cache-dir) (set! pG651@file-options-spec (lambda (pG6ca@x) pG6ca@x)) (set! pG6dd@pG651@file-options-spec pG651@file-options-spec) (void))
(begin (set! pG6e3@current-primitive-locations (unspecified)) (set! pG6e5@mutable? (unspecified)) (set! pG6e7@rewriter (unspecified)) (set! pG6e9@expanded->core (unspecified)) (set! pG6eb@compile-core-expr (unspecified)) (set! pG6ed@pretty-print (unspecified)) (set! pG6ef@compile-core-expr-to-port (unspecified)) (set! pG6e3@current-primitive-locations (pG6db@pG5b9@make-parameter (lambda (pG6f0@x) '#f) (lambda (pG6f2@p) pG6f2@p))) (set! pG72e@pG6e3@current-primitive-locations pG6e3@current-primitive-locations) (set! pG6e5@mutable? (lambda (pG6f4@x) (or (pair? pG6f4@x) (vector? pG6f4@x) (hashtable? pG6f4@x)))) (set! pG72f@pG6e5@mutable? pG6e5@mutable?) (set! pG6e7@rewriter (lambda (pG6f6@quote-hack?) (letrec* ((pG6f9@f (lambda (pG6fa@x) (if (pair? pG6fa@x) (let ((pG6fc@t (car pG6fa@x))) (if (memv pG6fc@t '(quote)) (if (and pG6f6@quote-hack? (pG6e5@mutable? (cadr pG6fa@x))) (let ((pG6fe@g (gensym))) (begin (set-symbol-value! pG6fe@g (cadr pG6fa@x)) pG6fe@g)) pG6fa@x) (if (memv pG6fc@t '(case-lambda)) (cons 'case-lambda (map (lambda (pG700@x) (cons (car pG700@x) (map pG6f9@f (cdr pG700@x)))) (cdr pG6fa@x))) (if (memv pG6fc@t '(lambda)) (cons* 'lambda (cadr pG6fa@x) (map pG6f9@f (cddr pG6fa@x))) (if (memv pG6fc@t '(letrec)) (let ((pG702@bindings (cadr pG6fa@x)) (pG703@body* (cddr pG6fa@x))) (let ((pG706@lhs* (map car pG702@bindings)) (pG707@rhs* (map cadr pG702@bindings))) (cons* 'letrec (map list pG706@lhs* (map pG6f9@f pG707@rhs*)) (map pG6f9@f pG703@body*)))) (if (memv pG6fc@t '(letrec*)) (let ((pG70a@bindings (cadr pG6fa@x)) (pG70b@body* (cddr pG6fa@x))) (let ((pG70e@lhs* (map car pG70a@bindings)) (pG70f@rhs* (map cadr pG70a@bindings))) (cons* 'letrec* (map list pG70e@lhs* (map pG6f9@f pG70f@rhs*)) (map pG6f9@f pG70b@body*)))) (if (memv pG6fc@t '(library-letrec*)) (let ((pG712@name (cadr pG6fa@x)) (pG713@x (cdr pG6fa@x))) (let ((pG716@bindings (cadr pG713@x)) (pG717@body* (cddr pG713@x))) (let ((pG71a@lhs* (map car pG716@bindings)) (pG71b@lhs** (map cadr pG716@bindings)) (pG71c@rhs* (map caddr pG716@bindings))) (cons* 'library-letrec* pG712@name (map list pG71a@lhs* pG71b@lhs** (map pG6f9@f pG71c@rhs*)) (map pG6f9@f pG717@body*))))) (if (memv pG6fc@t '(begin)) (cons 'begin (map pG6f9@f (cdr pG6fa@x))) (if (memv pG6fc@t '(set!)) (list 'set! (cadr pG6fa@x) (pG6f9@f (caddr pG6fa@x))) (if (memv pG6fc@t '(primitive)) (let ((pG720@op (cadr pG6fa@x))) (let ((pG722@t ((pG6e3@current-primitive-locations) pG720@op))) (if pG722@t ((lambda (pG724@loc) pG724@loc) pG722@t) pG720@op))) (if (memv pG6fc@t '(define)) pG6fa@x (if (list? pG6fa@x) (map pG6f9@f pG6fa@x) (error 'rewrite '"invalid form ~s ~s" pG6fa@x (list? pG6fa@x)))))))))))))) pG6fa@x)))) pG6f9@f))) (set! pG730@pG6e7@rewriter pG6e7@rewriter) (set! pG6e9@expanded->core (lambda (pG726@x) ((pG6e7@rewriter '#f) pG726@x))) (set! pG731@pG6e9@expanded->core pG6e9@expanded->core) (set! pG6eb@compile-core-expr (lambda (pG728@x) ((pG6e7@rewriter '#f) pG728@x))) (set! pG732@pG6eb@compile-core-expr pG6eb@compile-core-expr) (set! pG6ed@pretty-print write) (set! pG733@pG6ed@pretty-print pG6ed@pretty-print) (set! pG6ef@compile-core-expr-to-port (lambda (pG72a@x pG72b@p) (pG6ed@pretty-print ((pG6e7@rewriter '#f) pG72a@x) pG72b@p))) (set! pG734@pG6ef@compile-core-expr-to-port pG6ef@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! pG783@make-collection (unspecified)) (set! pG785@current-library-collection (unspecified)) (set! pG787@rp (unspecified)) (set! pG791@library? (unspecified)) (set! pG793@library-id (unspecified)) (set! pG795@set-library-id! (unspecified)) (set! pG797@library-name (unspecified)) (set! pG799@set-library-name! (unspecified)) (set! pG79b@library-version (unspecified)) (set! pG79d@set-library-version! (unspecified)) (set! pG79f@library-imp* (unspecified)) (set! pG7a1@set-library-imp*! (unspecified)) (set! pG7a3@library-vis* (unspecified)) (set! pG7a5@set-library-vis*! (unspecified)) (set! pG7a7@library-inv* (unspecified)) (set! pG7a9@set-library-inv*! (unspecified)) (set! pG7ab@library-subst (unspecified)) (set! pG7ad@set-library-subst! (unspecified)) (set! pG7af@library-env (unspecified)) (set! pG7b1@set-library-env! (unspecified)) (set! pG7b3@library-visit-state (unspecified)) (set! pG7b5@set-library-visit-state! (unspecified)) (set! pG7b7@library-invoke-state (unspecified)) (set! pG7b9@set-library-invoke-state! (unspecified)) (set! pG7bb@library-visit-code (unspecified)) (set! pG7bd@set-library-visit-code! (unspecified)) (set! pG7bf@library-invoke-code (unspecified)) (set! pG7c1@set-library-invoke-code! (unspecified)) (set! pG7c3@library-visible? (unspecified)) (set! pG7c5@set-library-visible?! (unspecified)) (set! pG7c7@library-source-file-name (unspecified)) (set! pG7c9@set-library-source-file-name! (unspecified)) (set! pG7cb@dummy (unspecified)) (set! pG7cd@find-dependencies (unspecified)) (set! pG7cf@find-library-by (unspecified)) (set! pG7d1@library-path (unspecified)) (set! pG7d3@library-extensions (unspecified)) (set! pG7d5@library-name->file-name (unspecified)) (set! pG7d7@file-locator (unspecified)) (set! pG7d9@serialize-all (unspecified)) (set! pG7db@current-precompiled-library-loader (unspecified)) (set! pG7dd@try-load-from-file (unspecified)) (set! pG7df@library-loader (unspecified)) (set! pG7e1@current-library-expander (unspecified)) (set! pG7e3@external-pending-libraries (unspecified)) (set! pG7e5@find-external-library (unspecified)) (set! pG7e7@find-library-by-name (unspecified)) (set! pG7e9@library-exists? (unspecified)) (set! pG7eb@find-library-by-spec/die (unspecified)) (set! pG7ed@label->binding-table (unspecified)) (set! pG7ef@install-library-record (unspecified)) (set! pG7f1@install-library (unspecified)) (set! pG7f3@imported-label->binding (unspecified)) (set! pG7f5@invoke-library (unspecified)) (set! pG7f7@visit-library (unspecified)) (set! pG7f9@invoke-library-by-spec (unspecified)) (set! pG7fb@installed-libraries (unspecified)) (set! pG7fd@library-spec (unspecified)) (set! pG783@make-collection (lambda () (let ((pG7fe@set '())) (letrec* ((pG801@set-cons (lambda (pG806@x pG807@ls) (if (memq pG806@x pG807@ls) pG807@ls (cons pG806@x pG807@ls))))) (lambda pG804 (let ((pG805 (length pG804))) (if (= pG805 '0) (apply (lambda () pG7fe@set) pG804) (if (= pG805 '1) (apply (lambda (pG802@x) (set! pG7fe@set (pG801@set-cons pG802@x pG7fe@set))) pG804) (error 'apply '"invalid arg count"))))))))) (set! pG972@pG783@make-collection pG783@make-collection) (set! pG785@current-library-collection (pG6db@pG5b9@make-parameter (pG783@make-collection) (lambda (pG80a@x) (begin (if (not (procedure? pG80a@x)) (assertion-violation 'current-library-collection '"not a procedure" pG80a@x) (void)) pG80a@x)))) (set! pG973@pG785@current-library-collection pG785@current-library-collection) (set! pG787@rp (pG6d8@pG5b3@make-record-printer 'library (lambda (pG80c@x pG80d@p pG80e@wr) (begin (if (not (pG791@library? pG80c@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (pG79b@library-version pG80c@x)) (pG797@library-name pG80c@x) (append (pG797@library-name pG80c@x) (list (pG79b@library-version pG80c@x))))) pG80d@p))))) (set! pG974@pG787@rp pG787@rp) (set! pG791@library? (lambda (pG812@x) (and (simple-struct? pG812@x) (eq? (simple-struct-name pG812@x) 'library)))) (set! pG975@pG791@library? pG791@library?) (set! pG793@library-id (lambda (pG814@x) (simple-struct-ref pG814@x '0))) (set! pG976@pG793@library-id pG793@library-id) (set! pG795@set-library-id! (lambda (pG816@x pG817@val) (simple-struct-set! pG816@x '0 pG817@val))) (set! pG977@pG795@set-library-id! pG795@set-library-id!) (set! pG797@library-name (lambda (pG81a@x) (simple-struct-ref pG81a@x '1))) (set! pG978@pG797@library-name pG797@library-name) (set! pG799@set-library-name! (lambda (pG81c@x pG81d@val) (simple-struct-set! pG81c@x '1 pG81d@val))) (set! pG979@pG799@set-library-name! pG799@set-library-name!) (set! pG79b@library-version (lambda (pG820@x) (simple-struct-ref pG820@x '2))) (set! pG97a@pG79b@library-version pG79b@library-version) (set! pG79d@set-library-version! (lambda (pG822@x pG823@val) (simple-struct-set! pG822@x '2 pG823@val))) (set! pG97b@pG79d@set-library-version! pG79d@set-library-version!) (set! pG79f@library-imp* (lambda (pG826@x) (simple-struct-ref pG826@x '3))) (set! pG97c@pG79f@library-imp* pG79f@library-imp*) (set! pG7a1@set-library-imp*! (lambda (pG828@x pG829@val) (simple-struct-set! pG828@x '3 pG829@val))) (set! pG97d@pG7a1@set-library-imp*! pG7a1@set-library-imp*!) (set! pG7a3@library-vis* (lambda (pG82c@x) (simple-struct-ref pG82c@x '4))) (set! pG97e@pG7a3@library-vis* pG7a3@library-vis*) (set! pG7a5@set-library-vis*! (lambda (pG82e@x pG82f@val) (simple-struct-set! pG82e@x '4 pG82f@val))) (set! pG97f@pG7a5@set-library-vis*! pG7a5@set-library-vis*!) (set! pG7a7@library-inv* (lambda (pG832@x) (simple-struct-ref pG832@x '5))) (set! pG980@pG7a7@library-inv* pG7a7@library-inv*) (set! pG7a9@set-library-inv*! (lambda (pG834@x pG835@val) (simple-struct-set! pG834@x '5 pG835@val))) (set! pG981@pG7a9@set-library-inv*! pG7a9@set-library-inv*!) (set! pG7ab@library-subst (lambda (pG838@x) (simple-struct-ref pG838@x '6))) (set! pG982@pG7ab@library-subst pG7ab@library-subst) (set! pG7ad@set-library-subst! (lambda (pG83a@x pG83b@val) (simple-struct-set! pG83a@x '6 pG83b@val))) (set! pG983@pG7ad@set-library-subst! pG7ad@set-library-subst!) (set! pG7af@library-env (lambda (pG83e@x) (simple-struct-ref pG83e@x '7))) (set! pG984@pG7af@library-env pG7af@library-env) (set! pG7b1@set-library-env! (lambda (pG840@x pG841@val) (simple-struct-set! pG840@x '7 pG841@val))) (set! pG985@pG7b1@set-library-env! pG7b1@set-library-env!) (set! pG7b3@library-visit-state (lambda (pG844@x) (simple-struct-ref pG844@x '8))) (set! pG986@pG7b3@library-visit-state pG7b3@library-visit-state) (set! pG7b5@set-library-visit-state! (lambda (pG846@x pG847@val) (simple-struct-set! pG846@x '8 pG847@val))) (set! pG987@pG7b5@set-library-visit-state! pG7b5@set-library-visit-state!) (set! pG7b7@library-invoke-state (lambda (pG84a@x) (simple-struct-ref pG84a@x '9))) (set! pG988@pG7b7@library-invoke-state pG7b7@library-invoke-state) (set! pG7b9@set-library-invoke-state! (lambda (pG84c@x pG84d@val) (simple-struct-set! pG84c@x '9 pG84d@val))) (set! pG989@pG7b9@set-library-invoke-state! pG7b9@set-library-invoke-state!) (set! pG7bb@library-visit-code (lambda (pG850@x) (simple-struct-ref pG850@x '10))) (set! pG98a@pG7bb@library-visit-code pG7bb@library-visit-code) (set! pG7bd@set-library-visit-code! (lambda (pG852@x pG853@val) (simple-struct-set! pG852@x '10 pG853@val))) (set! pG98b@pG7bd@set-library-visit-code! pG7bd@set-library-visit-code!) (set! pG7bf@library-invoke-code (lambda (pG856@x) (simple-struct-ref pG856@x '11))) (set! pG98c@pG7bf@library-invoke-code pG7bf@library-invoke-code) (set! pG7c1@set-library-invoke-code! (lambda (pG858@x pG859@val) (simple-struct-set! pG858@x '11 pG859@val))) (set! pG98d@pG7c1@set-library-invoke-code! pG7c1@set-library-invoke-code!) (set! pG7c3@library-visible? (lambda (pG85c@x) (simple-struct-ref pG85c@x '12))) (set! pG98e@pG7c3@library-visible? pG7c3@library-visible?) (set! pG7c5@set-library-visible?! (lambda (pG85e@x pG85f@val) (simple-struct-set! pG85e@x '12 pG85f@val))) (set! pG98f@pG7c5@set-library-visible?! pG7c5@set-library-visible?!) (set! pG7c7@library-source-file-name (lambda (pG862@x) (simple-struct-ref pG862@x '13))) (set! pG990@pG7c7@library-source-file-name pG7c7@library-source-file-name) (set! pG7c9@set-library-source-file-name! (lambda (pG864@x pG865@val) (simple-struct-set! pG864@x '13 pG865@val))) (set! pG991@pG7c9@set-library-source-file-name! pG7c9@set-library-source-file-name!) (set! pG7cb@dummy '3) (set! pG992@pG7cb@dummy pG7cb@dummy) (set! pG7cd@find-dependencies (lambda (pG868@ls) (if (null? pG868@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! pG993@pG7cd@find-dependencies pG7cd@find-dependencies) (set! pG7cf@find-library-by (lambda (pG86a@pred) (let pG86e@f ((pG86c@ls ((pG785@current-library-collection)))) (if (null? pG86c@ls) '#f (if (pG86a@pred (car pG86c@ls)) (car pG86c@ls) (pG86e@f (cdr pG86c@ls))))))) (set! pG994@pG7cf@find-library-by pG7cf@find-library-by) (set! pG7d1@library-path (pG6db@pG5b9@make-parameter '(".") (lambda (pG870@x) (if (and (list? pG870@x) (for-all string? pG870@x)) (map (lambda (pG872@x) pG872@x) pG870@x) (assertion-violation 'library-path '"not a list of strings" pG870@x))))) (set! pG995@pG7d1@library-path pG7d1@library-path) (set! pG7d3@library-extensions (pG6db@pG5b9@make-parameter '(".sls" ".ss" ".scm") (lambda (pG874@x) (if (and (list? pG874@x) (for-all string? pG874@x)) (map (lambda (pG876@x) pG876@x) pG874@x) (assertion-violation 'library-extensions '"not a list of strings" pG874@x))))) (set! pG996@pG7d3@library-extensions pG7d3@library-extensions) (set! pG7d5@library-name->file-name (lambda (pG878@x) (call-with-values (lambda () (open-string-output-port)) (lambda (pG87e@pG87b pG87f@pG87d) (let ((pG882@extract pG87f@pG87d) (pG883@p pG87e@pG87b)) (letrec* ((pG887@display-hex (lambda (pG890@n) (if (<= '0 pG890@n '9) (display pG890@n pG883@p) (display (integer->char (+ (char->integer '#\a) (- pG890@n '10))) pG883@p))))) (begin (let pG88a@f ((pG888@ls pG878@x)) (if (not (null? pG888@ls)) (begin (display '"/" pG883@p) (for-each (lambda (pG88c@c) (if (or (char<=? '#\a pG88c@c '#\z) (char<=? '#\A pG88c@c '#\Z) (char<=? '#\0 pG88c@c '#\9) (memv pG88c@c '(#\- #\. #\_ #\~))) (display pG88c@c pG883@p) (begin (display '"%" pG883@p) (let ((pG88e@n (char->integer pG88c@c))) (begin (pG887@display-hex (quotient pG88e@n '16)) (pG887@display-hex (remainder pG88e@n '16))))))) (string->list (symbol->string (car pG888@ls)))) (pG88a@f (cdr pG888@ls))) (void))) (pG882@extract)))))))) (set! pG997@pG7d5@library-name->file-name pG7d5@library-name->file-name) (set! pG7d7@file-locator (pG6db@pG5b9@make-parameter (lambda (pG892@x) (let ((pG894@str (pG7d5@library-name->file-name pG892@x))) (let pG89c@f ((pG896@ls (pG7d1@library-path)) (pG897@exts (pG7d3@library-extensions)) (pG898@failed-list '())) (if (null? pG896@ls) (letrec* ((pG8a6@pG8a1 (make-record-type-descriptor '&library-resolution &condition-rtd 'pG8a4 '#f '#f '#((immutable library) (immutable files)))) (pG8a8@pG8a3 '#f) (pG8aa@pG8a2 (make-record-constructor-descriptor pG8a6@pG8a1 &condition-rcd pG8a8@pG8a3)) (pG8ad@pG8a0 (record-predicate pG8a6@pG8a1)) (pG8af@make-library-resolution-condition (record-constructor pG8aa@pG8a2)) (pG8b1@pG89e (record-accessor pG8a6@pG8a1 '0)) (pG8b3@pG89f (record-accessor pG8a6@pG8a1 '1)) (pG8b5@library-resolution-condition? (condition-predicate pG8a6@pG8a1)) (pG8b7@condition-library (condition-accessor pG8a6@pG8a1 pG8b1@pG89e)) (pG8b9@condition-files (condition-accessor pG8a6@pG8a1 pG8b3@pG89f))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (pG8af@make-library-resolution-condition pG892@x (reverse pG898@failed-list))))) (if (null? pG897@exts) (pG89c@f (cdr pG896@ls) (pG7d3@library-extensions) pG898@failed-list) (let ((pG8ba@name (string-append (car pG896@ls) pG894@str (car pG897@exts)))) (if (file-exists? pG8ba@name) pG8ba@name (pG89c@f pG896@ls (cdr pG897@exts) (cons pG8ba@name pG898@failed-list))))))))) (lambda (pG8bc@f) (if (procedure? pG8bc@f) pG8bc@f (assertion-violation 'file-locator '"not a procedure" pG8bc@f))))) (set! pG998@pG7d7@file-locator pG7d7@file-locator) (set! pG7d9@serialize-all (lambda (pG8be@serialize pG8bf@compile) (letrec* ((pG8c3@library-desc (lambda (pG8c6@x) (list (pG793@library-id pG8c6@x) (pG797@library-name pG8c6@x))))) (for-each (lambda (pG8c4@x) (if (pG7c7@library-source-file-name pG8c4@x) (pG8be@serialize (pG7c7@library-source-file-name pG8c4@x) (list (pG793@library-id pG8c4@x) (pG797@library-name pG8c4@x) (pG79b@library-version pG8c4@x) (map pG8c3@library-desc (pG79f@library-imp* pG8c4@x)) (map pG8c3@library-desc (pG7a3@library-vis* pG8c4@x)) (map pG8c3@library-desc (pG7a7@library-inv* pG8c4@x)) (pG7ab@library-subst pG8c4@x) (pG7af@library-env pG8c4@x) (pG8bf@compile (pG7bb@library-visit-code pG8c4@x)) (pG8bf@compile (pG7bf@library-invoke-code pG8c4@x)) (pG7c3@library-visible? pG8c4@x))) (void))) ((pG785@current-library-collection)))))) (set! pG999@pG7d9@serialize-all pG7d9@serialize-all) (set! pG7db@current-precompiled-library-loader (pG6db@pG5b9@make-parameter (lambda (pG8c8@filename pG8c9@sk) '#f))) (set! pG99a@pG7db@current-precompiled-library-loader pG7db@current-precompiled-library-loader) (set! pG7dd@try-load-from-file (lambda (pG8cc@filename) ((pG7db@current-precompiled-library-loader) pG8cc@filename (lambda pG8f2 (let ((pG8f3 (length pG8f2))) (if (= pG8f3 '11) (apply (lambda (pG8ce@id pG8cf@name pG8d0@ver pG8d1@imp* pG8d2@vis* pG8d3@inv* pG8d4@exp-subst pG8d5@exp-env pG8d6@visit-proc pG8d7@invoke-proc pG8d8@visible?) (let pG8e6@f ((pG8e4@deps (append pG8d1@imp* pG8d2@vis* pG8d3@inv*))) (if (null? pG8e4@deps) (begin (pG7f1@install-library pG8ce@id pG8cf@name pG8d0@ver pG8d1@imp* pG8d2@vis* pG8d3@inv* pG8d4@exp-subst pG8d5@exp-env pG8d6@visit-proc pG8d7@invoke-proc '#f '#f pG8d8@visible? '#f) '#t) (let ((pG8e8@d (car pG8e4@deps))) (let ((pG8ea@label (car pG8e8@d)) (pG8eb@dname (cadr pG8e8@d))) (let ((pG8ee@l (pG7e7@find-library-by-name pG8eb@dname))) (if (and (pG791@library? pG8ee@l) (eq? pG8ea@label (pG793@library-id pG8ee@l))) (pG8e6@f (cdr pG8e4@deps)) (begin (if pG6d5@pG5ad@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" pG8cf@name pG8eb@dname pG8cc@filename) (void)) '#f)))))))) pG8f2) (if (>= pG8f3 '0) (apply (lambda pG8f0@others '#f) pG8f2) (error 'apply '"invalid arg count")))))))) (set! pG99b@pG7dd@try-load-from-file pG7dd@try-load-from-file) (set! pG7df@library-loader (pG6db@pG5b9@make-parameter (lambda (pG8f4@x) (let ((pG8f6@file-name ((pG7d7@file-locator) pG8f4@x))) (if (not pG8f6@file-name) (assertion-violation '#f '"cannot file library" pG8f4@x) (or (pG7dd@try-load-from-file pG8f6@file-name) ((pG7e1@current-library-expander) (pG6da@pG5b7@read-library-source-file pG8f6@file-name) pG8f6@file-name (lambda (pG8f8@name) (if (not (fast-equal? pG8f8@name pG8f4@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (pG8fe@pG8fb pG8ff@pG8fd) (let ((pG902@e pG8ff@pG8fd) (pG903@p pG8fe@pG8fb)) (begin (display '"expected to find library " pG903@p) (write pG8f4@x pG903@p) (display '" in file " pG903@p) (display pG8f6@file-name pG903@p) (display '", found " pG903@p) (write pG8f8@name pG903@p) (display '" instead" pG903@p) (pG902@e)))))) (void)))))))) (lambda (pG906@f) (if (procedure? pG906@f) pG906@f (assertion-violation 'library-locator '"not a procedure" pG906@f))))) (set! pG99c@pG7df@library-loader pG7df@library-loader) (set! pG7e1@current-library-expander (pG6db@pG5b9@make-parameter (lambda (pG908@x) (assertion-violation 'library-expander '"not initialized")) (lambda (pG90a@f) (if (procedure? pG90a@f) pG90a@f (assertion-violation 'library-expander '"not a procedure" pG90a@f))))) (set! pG99d@pG7e1@current-library-expander pG7e1@current-library-expander) (set! pG7e3@external-pending-libraries (pG6db@pG5b9@make-parameter '())) (set! pG99e@pG7e3@external-pending-libraries pG7e3@external-pending-libraries) (set! pG7e5@find-external-library (lambda (pG90c@name) (begin (if (member pG90c@name (pG7e3@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" pG90c@name) (void)) (let ((pG912@pG90f pG7e3@external-pending-libraries) (pG913@pG911 (cons pG90c@name (pG7e3@external-pending-libraries)))) (let ((pG916@swap (lambda () (let ((pG918@t (pG912@pG90f))) (begin (pG912@pG90f pG913@pG911) (set! pG913@pG911 pG918@t)))))) (dynamic-wind pG916@swap (lambda () (begin ((pG7df@library-loader) pG90c@name) (or (pG7cf@find-library-by (lambda (pG91a@x) (fast-equal? (pG797@library-name pG91a@x) pG90c@name))) (assertion-violation '#f '"handling external library did not yield the correct library" pG90c@name)))) pG916@swap)))))) (set! pG99f@pG7e5@find-external-library pG7e5@find-external-library) (set! pG7e7@find-library-by-name (lambda (pG91c@name) (or (pG7cf@find-library-by (lambda (pG91e@x) (fast-equal? (pG797@library-name pG91e@x) pG91c@name))) (pG7e5@find-external-library pG91c@name)))) (set! pG9a0@pG7e7@find-library-by-name pG7e7@find-library-by-name) (set! pG7e9@library-exists? (lambda (pG920@name) (and (pG7cf@find-library-by (lambda (pG922@x) (fast-equal? (pG797@library-name pG922@x) pG920@name))) '#t))) (set! pG9a1@pG7e9@library-exists? pG7e9@library-exists?) (set! pG7eb@find-library-by-spec/die (lambda (pG924@spec) (let ((pG926@id (car pG924@spec))) (or (pG7cf@find-library-by (lambda (pG928@x) (eq? pG926@id (pG793@library-id pG928@x)))) (assertion-violation '#f '"cannot find library with required spec" pG924@spec))))) (set! pG9a2@pG7eb@find-library-by-spec/die pG7eb@find-library-by-spec/die) (set! pG7ed@label->binding-table (make-eq-hashtable)) (set! pG9a3@pG7ed@label->binding-table pG7ed@label->binding-table) (set! pG7ef@install-library-record (lambda (pG92a@lib) (begin (let ((pG92c@exp-env (pG7af@library-env pG92a@lib))) (for-each (lambda (pG92e@x) (let ((pG930@label (car pG92e@x)) (pG931@binding (cdr pG92e@x))) (let ((pG934@binding (let ((pG936@t (car pG931@binding))) (if (memv pG936@t '(global)) (cons 'global (cons pG92a@lib (cdr pG931@binding))) (if (memv pG936@t '(global-macro)) (cons 'global-macro (cons pG92a@lib (cdr pG931@binding))) (if (memv pG936@t '(global-macro!)) (cons 'global-macro! (cons pG92a@lib (cdr pG931@binding))) pG931@binding)))))) (begin (if (hashtable-ref pG7ed@label->binding-table pG930@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" pG930@label (hashtable-ref pG7ed@label->binding-table pG930@label '#f) pG934@binding) (exit)) (void)) (hashtable-set! pG7ed@label->binding-table pG930@label pG934@binding))))) pG92c@exp-env)) ((pG785@current-library-collection) pG92a@lib)))) (set! pG9a4@pG7ef@install-library-record pG7ef@install-library-record) (set! pG7f1@install-library (lambda (pG938@id pG939@name pG93a@ver pG93b@imp* pG93c@vis* pG93d@inv* pG93e@exp-subst pG93f@exp-env pG940@visit-proc pG941@invoke-proc pG942@visit-code pG943@invoke-code pG944@visible? pG945@source-file-name) (let ((pG954@imp-lib* (map pG7eb@find-library-by-spec/die pG93b@imp*)) (pG955@vis-lib* (map pG7eb@find-library-by-spec/die pG93c@vis*)) (pG956@inv-lib* (map pG7eb@find-library-by-spec/die pG93d@inv*))) (begin (if (not (and (symbol? pG938@id) (list? pG939@name) (list? pG93a@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" pG938@id pG939@name pG93a@ver) (void)) (if (pG7e9@library-exists? pG939@name) (assertion-violation 'install-library '"library is already installed" pG939@name) (void)) (let ((pG95a@lib (make-simple-struct 'library '15 (list pG938@id pG939@name pG93a@ver pG954@imp-lib* pG955@vis-lib* pG956@inv-lib* pG93e@exp-subst pG93f@exp-env pG940@visit-proc pG941@invoke-proc pG942@visit-code pG943@invoke-code pG944@visible? pG945@source-file-name)))) (pG7ef@install-library-record pG95a@lib)))))) (set! pG9a5@pG7f1@install-library pG7f1@install-library) (set! pG7f3@imported-label->binding (lambda (pG95c@lab) (hashtable-ref pG7ed@label->binding-table pG95c@lab '#f))) (set! pG9a6@pG7f3@imported-label->binding pG7f3@imported-label->binding) (set! pG7f5@invoke-library (lambda (pG95e@lib) (let ((pG960@invoke (pG7b7@library-invoke-state pG95e@lib))) (if (procedure? pG960@invoke) (begin (pG7b9@set-library-invoke-state! pG95e@lib (lambda () (assertion-violation 'invoke '"circularity detected" pG95e@lib))) (for-each pG7f5@invoke-library (pG7a7@library-inv* pG95e@lib)) (pG7b9@set-library-invoke-state! pG95e@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" pG95e@lib))) (pG960@invoke) (pG7b9@set-library-invoke-state! pG95e@lib '#t)) (void))))) (set! pG9a7@pG7f5@invoke-library pG7f5@invoke-library) (set! pG7f7@visit-library (lambda (pG962@lib) (let ((pG964@visit (pG7b3@library-visit-state pG962@lib))) (if (procedure? pG964@visit) (begin (pG7b5@set-library-visit-state! pG962@lib (lambda () (assertion-violation 'visit '"circularity detected" pG962@lib))) (for-each pG7f5@invoke-library (pG7a3@library-vis* pG962@lib)) (pG7b5@set-library-visit-state! pG962@lib (lambda () (assertion-violation 'invoke '"first visit did not return" pG962@lib))) (pG964@visit) (pG7b5@set-library-visit-state! pG962@lib '#t)) (void))))) (set! pG9a8@pG7f7@visit-library pG7f7@visit-library) (set! pG7f9@invoke-library-by-spec (lambda (pG966@spec) (pG7f5@invoke-library (pG7eb@find-library-by-spec/die pG966@spec)))) (set! pG9a9@pG7f9@invoke-library-by-spec pG7f9@invoke-library-by-spec) (set! pG7fb@installed-libraries (lambda pG96e (let ((pG96f (length pG96e))) (if (= pG96f '1) (apply (lambda (pG968@all?) (let pG96c@f ((pG96a@ls ((pG785@current-library-collection)))) (if (null? pG96a@ls) '() (if (or pG968@all? (pG7c3@library-visible? (car pG96a@ls))) (cons (car pG96a@ls) (pG96c@f (cdr pG96a@ls))) (pG96c@f (cdr pG96a@ls)))))) pG96e) (if (= pG96f '0) (apply (lambda () (pG7fb@installed-libraries '#f)) pG96e) (error 'apply '"invalid arg count")))))) (set! pG9aa@pG7fb@installed-libraries pG7fb@installed-libraries) (set! pG7fd@library-spec (lambda (pG970@x) (begin (if (not (pG791@library? pG970@x)) (assertion-violation 'library-spec '"not a library" pG970@x) (void)) (list (pG793@library-id pG970@x) (pG797@library-name pG970@x) (pG79b@library-version pG970@x))))) (set! pG9ab@pG7fd@library-spec pG7fd@library-spec) (void))
(begin (set! pG9af@build-global-define (unspecified)) (set! pGa20@build-lambda (unspecified)) (set! pGa22@build-case-lambda (unspecified)) (set! pGa50@build-sequence (unspecified)) (set! pGa52@build-void (unspecified)) (set! pGa54@build-letrec (unspecified)) (set! pGa56@build-let (unspecified)) (set! pGa58@build-named-let (unspecified)) (set! pGa5a@build-letrec* (unspecified)) (set! pGa5c@build-library-letrec* (unspecified)) (set! pGa5e@build-receive (unspecified)) (set! pG9af@build-global-define (lambda (pGa5f@x) (pGa52@build-void))) (set! pGaed@pG9af@build-global-define pG9af@build-global-define) (set! pGa20@build-lambda (lambda (pGa61@ae pGa62@vars pGa63@exp) (list 'lambda pGa62@vars pGa63@exp))) (set! pGaee@pGa20@build-lambda pGa20@build-lambda) (set! pGa22@build-case-lambda (lambda (pGa67@ae pGa68@vars* pGa69@exp*) (letrec* ((pGa6e@build-error (lambda (pGaa5@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (pGa70@build-pred (lambda (pGa8d@ae pGa8e@n pGa8f@vars) (call-with-values (lambda () (let pGa9b@f ((pGa97@vars pGa8f@vars) (pGa98@count '0)) (if (pair? pGa97@vars) (pGa9b@f (cdr pGa97@vars) (+ pGa98@count '1)) (if (null? pGa97@vars) (values pGa98@count '=) (values pGa98@count '>=))))) (lambda (pGa9d@pGa94 pGa9e@pGa96) (let ((pGaa1@pred pGa9e@pGa96) (pGaa2@count pGa9d@pGa94)) (list (list 'primitive pGaa1@pred) pGa8e@n (list 'quote pGaa2@count))))))) (pGa72@build-apply (lambda (pGa85@ae pGa86@g pGa87@vars pGa88@exp) (list '(primitive apply) (pGa20@build-lambda pGa85@ae pGa87@vars pGa88@exp) pGa86@g))) (pGa74@expand-case-lambda (lambda (pGa75@ae pGa76@vars pGa77@exp*) (let ((pGa7b@g (gensym)) (pGa7c@n (gensym))) (list 'lambda pGa7b@g (pGa56@build-let pGa75@ae (list pGa7c@n) (list (list '(primitive length) pGa7b@g)) (let pGa83@f ((pGa7f@vars* pGa68@vars*) (pGa80@exp* pGa77@exp*)) (if (null? pGa7f@vars*) (pGa6e@build-error pGa75@ae) (list 'if (pGa70@build-pred pGa75@ae pGa7c@n (car pGa7f@vars*)) (pGa72@build-apply pGa75@ae pGa7b@g (car pGa7f@vars*) (car pGa80@exp*)) (pGa83@f (cdr pGa7f@vars*) (cdr pGa80@exp*))))))))))) (if (= (length pGa69@exp*) '1) (pGa20@build-lambda pGa67@ae (car pGa68@vars*) (car pGa69@exp*)) (pGa74@expand-case-lambda pGa67@ae pGa68@vars* pGa69@exp*))))) (set! pGaef@pGa22@build-case-lambda pGa22@build-case-lambda) (set! pGa50@build-sequence (lambda (pGaa7@ae pGaa8@exps) (let pGaad@loop ((pGaab@exps pGaa8@exps)) (if (null? (cdr pGaab@exps)) (car pGaab@exps) (if (equal? (car pGaab@exps) (pGa52@build-void)) (pGaad@loop (cdr pGaab@exps)) (cons 'begin pGaab@exps)))))) (set! pGaf0@pGa50@build-sequence pGa50@build-sequence) (set! pGa52@build-void (lambda () '((primitive void)))) (set! pGaf1@pGa52@build-void pGa52@build-void) (set! pGa54@build-letrec (lambda (pGaaf@ae pGab0@vars pGab1@val-exps pGab2@body-exp) (if (null? pGab0@vars) pGab2@body-exp (list 'letrec (map list pGab0@vars pGab1@val-exps) pGab2@body-exp)))) (set! pGaf2@pGa54@build-letrec pGa54@build-letrec) (set! pGa56@build-let (lambda (pGab7@ae pGab8@vars pGab9@val-exps pGaba@body-exp) (if (null? pGab8@vars) pGaba@body-exp (list 'let (map list pGab8@vars pGab9@val-exps) pGaba@body-exp)))) (set! pGaf3@pGa56@build-let pGa56@build-let) (set! pGa58@build-named-let (lambda (pGabf@ae pGac0@name pGac1@vars pGac2@val-exps pGac3@body-exp) (list 'let pGac0@name (map list pGac1@vars pGac2@val-exps) pGac3@body-exp))) (set! pGaf4@pGa58@build-named-let pGa58@build-named-let) (set! pGa5a@build-letrec* (lambda (pGac9@ae pGaca@vars pGacb@val-exps pGacc@body-exp) (if (null? pGaca@vars) pGacc@body-exp (list 'letrec* (map list pGaca@vars pGacb@val-exps) pGacc@body-exp)))) (set! pGaf5@pGa5a@build-letrec* pGa5a@build-letrec*) (set! pGa5c@build-library-letrec* (lambda (pGad1@ae pGad2@name pGad3@vars pGad4@locs pGad5@val-exps pGad6@body-exp) (cons 'begin (append (map (lambda (pGadd@var) (cons 'set! (cons pGadd@var '((unspecified))))) pGad3@vars) (append (apply append (map (lambda (pGadf@var pGae0@loc pGae1@val-exp) (list (list 'set! pGadf@var pGae1@val-exp) (list 'set! pGae0@loc pGadf@var))) pGad3@vars pGad4@locs pGad5@val-exps)) (list pGad6@body-exp)))))) (set! pGaf6@pGa5c@build-library-letrec* pGa5c@build-library-letrec*) (set! pGa5e@build-receive (lambda (pGae5@ae pGae6@vars pGae7@producer pGae8@body*) (begin (display '"************** in ") (cons 'receive (cons pGae6@vars (cons pGae7@producer pGae8@body*)))))) (set! pGaf7@pGa5e@build-receive pGa5e@build-receive) (void))
(begin (set! pGb06@file-options-macro (unspecified)) (set! pGb08@set-cons (unspecified)) (set! pGb0a@set-union (unspecified)) (set! pGb0f@top-mark* (unspecified)) (set! pGb11@top-marked? (unspecified)) (set! pGb13@gen-lexical (unspecified)) (set! pGb15@gen-global (unspecified)) (set! pGb17@gen-label (unspecified)) (set! pGb19@gen-top-level-label (unspecified)) (set! pGb1b@gen-define-label+loc (unspecified)) (set! pGb1d@gen-define-label (unspecified)) (set! pGb27@rib? (unspecified)) (set! pGb29@rib-sym* (unspecified)) (set! pGb2b@set-rib-sym*! (unspecified)) (set! pGb2d@rib-mark** (unspecified)) (set! pGb2f@set-rib-mark**! (unspecified)) (set! pGb31@rib-label* (unspecified)) (set! pGb33@set-rib-label*! (unspecified)) (set! pGb35@rib-sealed/freq (unspecified)) (set! pGb37@set-rib-sealed/freq! (unspecified)) (set! pGb39@rib-cache (unspecified)) (set! pGb3b@set-rib-cache! (unspecified)) (set! pGb3d@dummy (unspecified)) (set! pGb3f@make-empty-rib (unspecified)) (set! pGb41@extend-rib! (unspecified)) (set! pGb43@extend-rib/nc! (unspecified)) (set! pGb45@make-rib-map (unspecified)) (set! pGb47@seal-rib! (unspecified)) (set! pGb49@unseal-rib! (unspecified)) (set! pGb4b@make-full-rib (unspecified)) (set! pGb4d@rp (unspecified)) (set! pGb57@stx? (unspecified)) (set! pGb59@stx-expr (unspecified)) (set! pGb5b@set-stx-expr! (unspecified)) (set! pGb5d@stx-mark* (unspecified)) (set! pGb5f@set-stx-mark*! (unspecified)) (set! pGb61@stx-subst* (unspecified)) (set! pGb63@set-stx-subst*! (unspecified)) (set! pGb65@stx-ae* (unspecified)) (set! pGb67@set-stx-ae*! (unspecified)) (set! pGb69@dummy (unspecified)) (set! pGb6b@datum->stx (unspecified)) (set! pGb6d@gen-mark (unspecified)) (set! pGb6f@anti-mark (unspecified)) (set! pGb71@anti-mark? (unspecified)) (set! pGb73@mkstx (unspecified)) (set! pGb75@add-subst (unspecified)) (set! pGb77@add-mark (unspecified)) (set! pGb79@syntax-kind? (unspecified)) (set! pGb7b@syntax-vector->list (unspecified)) (set! pGb7d@syntax-pair? (unspecified)) (set! pGb7f@syntax-vector? (unspecified)) (set! pGb81@syntax-null? (unspecified)) (set! pGb83@syntax-list? (unspecified)) (set! pGb85@syntax-car (unspecified)) (set! pGb87@syntax-cdr (unspecified)) (set! pGb89@syntax->list (unspecified)) (set! pGb8b@id? (unspecified)) (set! pGb8d@id->sym (unspecified)) (set! pGb8f@bound-id=? (unspecified)) (set! pGb91@free-id=? (unspecified)) (set! pGb93@valid-bound-ids? (unspecified)) (set! pGb95@distinct-bound-ids? (unspecified)) (set! pGb97@bound-id-member? (unspecified)) (set! pGb99@self-evaluating? (unspecified)) (set! pGb9b@strip-annotations (unspecified)) (set! pGb9d@strip (unspecified)) (set! pGb9f@stx->datum (unspecified)) (set! pGba1@id->label (unspecified)) (set! pGba3@label->binding (unspecified)) (set! pGba5@make-binding (unspecified)) (set! pGba7@binding-type (unspecified)) (set! pGba9@binding-value (unspecified)) (set! pGbab@raise-unbound-error (unspecified)) (set! pGbad@syntax-type (unspecified)) (set! pGbbb@sanitize-binding (unspecified)) (set! pGbbd@make-variable-transformer (unspecified)) (set! pGbbf@variable-transformer? (unspecified)) (set! pGbc1@variable-transformer-procedure (unspecified)) (set! pGbc3@make-eval-transformer (unspecified)) (set! pGd14@parse-define (unspecified)) (set! pGd16@parse-define-syntax (unspecified)) (set! pGd18@scheme-stx-hashtable (unspecified)) (set! pGd1a@scheme-stx (unspecified)) (set! pGd1c@lexical-var (unspecified)) (set! pGd1e@lexical-mutable? (unspecified)) (set! pGd20@set-lexical-mutable! (unspecified)) (set! pGd22@add-lexical (unspecified)) (set! pGd24@add-lexicals (unspecified)) (set! pGd26@letrec-helper (unspecified)) (set! pGd28@let-transformer (unspecified)) (set! pGd2a@letrec-transformer (unspecified)) (set! pGd2c@letrec*-transformer (unspecified)) (set! pGd2e@fluid-let-syntax-transformer (unspecified)) (set! pGd30@type-descriptor-transformer (unspecified)) (set! pGd32@record-type-descriptor-transformer (unspecified)) (set! pGd34@record-constructor-descriptor-transformer (unspecified)) (set! pGd36@when-macro (unspecified)) (set! pGd38@unless-macro (unspecified)) (set! pGd3a@if-transformer (unspecified)) (set! pGd3c@and-transformer (unspecified)) (set! pGd3e@or-transformer (unspecified)) (set! pGd40@case-macro (unspecified)) (set! pGd42@quote-transformer (unspecified)) (set! pGd44@case-lambda-transformer (unspecified)) (set! pGd46@lambda-transformer (unspecified)) (set! pGd48@bless (unspecified)) (set! pGd4a@with-syntax-macro (unspecified)) (set! pGd4c@invalid-fmls-error (unspecified)) (set! pGd4e@let-macro (unspecified)) (set! pGd50@let-values-macro (unspecified)) (set! pGd52@let*-values-macro (unspecified)) (set! pGd54@trace-lambda-macro (unspecified)) (set! pGd56@trace-define-macro (unspecified)) (set! pGd58@trace-define-syntax-macro (unspecified)) (set! pGd5a@trace-let/rec-syntax (unspecified)) (set! pGd5c@trace-let-syntax-macro (unspecified)) (set! pGd5e@trace-letrec-syntax-macro (unspecified)) (set! pGd60@guard-macro (unspecified)) (set! pGd62@define-enumeration-macro (unspecified)) (set! pGd64@time-macro (unspecified)) (set! pGd66@delay-macro (unspecified)) (set! pGd68@assert-macro (unspecified)) (set! pGd6a@endianness-macro (unspecified)) (set! pGd6c@identifier-syntax-macro (unspecified)) (set! pGd6e@do-macro (unspecified)) (set! pGd70@let*-macro (unspecified)) (set! pGd72@or-macro (unspecified)) (set! pGd74@and-macro (unspecified)) (set! pGd76@cond-macro (unspecified)) (set! pGd78@do-include (unspecified)) (set! pGd7a@include-macro (unspecified)) (set! pGd7c@include-into-macro (unspecified)) (set! pGd7e@syntax-rules-macro (unspecified)) (set! pGd80@quasiquote-macro (unspecified)) (set! pGd82@quasisyntax-macro (unspecified)) (set! pGd84@define-struct-macro (unspecified)) (set! pGd86@define-record-type-macro (unspecified)) (set! pGd88@define-condition-type-macro (unspecified)) (set! pGd8a@incorrect-usage-macro (unspecified)) (set! pGd8c@parameterize-macro (unspecified)) (set! pGd8e@foreign-call-transformer (unspecified)) (set! pGd90@convert-pattern (unspecified)) (set! pGd92@syntax-dispatch (unspecified)) (set! pGd94@ellipsis? (unspecified)) (set! pGd96@underscore? (unspecified)) (set! pGd98@verify-literals (unspecified)) (set! pGd9a@syntax-case-transformer (unspecified)) (set! pGd9c@ellipsis-map (unspecified)) (set! pGd9e@syntax-transformer (unspecified)) (set! pGda0@core-macro-transformer (unspecified)) (set! pGda2@symbol-macro (unspecified)) (set! pGda4@macro-transformer (unspecified)) (set! pGda6@local-macro-transformer (unspecified)) (set! pGda8@do-macro-call (unspecified)) (set! pGdaa@chi-macro (unspecified)) (set! pGdac@chi-local-macro (unspecified)) (set! pGdae@chi-global-macro (unspecified)) (set! pGdb0@chi-expr* (unspecified)) (set! pGdb2@chi-application (unspecified)) (set! pGdb4@chi-expr (unspecified)) (set! pGdb6@chi-set! (unspecified)) (set! pGdb8@verify-formals (unspecified)) (set! pGdba@chi-lambda-clause (unspecified)) (set! pGdbc@chi-lambda-clause* (unspecified)) (set! pGdbe@chi-defun (unspecified)) (set! pGdc0@chi-rhs (unspecified)) (set! pGdc2@expand-interaction-rhs*/init* (unspecified)) (set! pGdc4@chi-rhs* (unspecified)) (set! pGdc6@find-bound=? (unspecified)) (set! pGdc8@find-dups (unspecified)) (set! pGdca@chi-internal (unspecified)) (set! pGdcc@parse-module (unspecified)) (set! pGdd6@module-interface? (unspecified)) (set! pGdd8@module-interface-first-mark (unspecified)) (set! pGdda@set-module-interface-first-mark! (unspecified)) (set! pGddc@module-interface-exp-id-vec (unspecified)) (set! pGdde@set-module-interface-exp-id-vec! (unspecified)) (set! pGde0@module-interface-exp-lab-vec (unspecified)) (set! pGde2@set-module-interface-exp-lab-vec! (unspecified)) (set! pGde4@dummy (unspecified)) (set! pGde6@module-interface-exp-id* (unspecified)) (set! pGde8@chi-internal-module (unspecified)) (set! pGdea@chi-body* (unspecified)) (set! pGdec@expand-transformer (unspecified)) (set! pGdee@parse-exports (unspecified)) (set! pGdf0@parse-library-name (unspecified)) (set! pGdf2@parse-library (unspecified)) (set! pGdf4@parse-import-spec* (unspecified)) (set! pGdf6@make-top-rib (unspecified)) (set! pGdf8@make-collector (unspecified)) (set! pGdfa@inv-collector (unspecified)) (set! pGdfc@vis-collector (unspecified)) (set! pGdfe@imp-collector (unspecified)) (set! pGe00@chi-library-internal (unspecified)) (set! pGe02@chi-interaction-expr (unspecified)) (set! pGe04@library-body-expander (unspecified)) (set! pGe06@core-library-expander (unspecified)) (set! pGe08@parse-top-level-program (unspecified)) (set! pGe0a@top-level-expander (unspecified)) (set! pGe0c@rp (unspecified)) (set! pGe16@env? (unspecified)) (set! pGe18@env-names (unspecified)) (set! pGe1a@set-env-names! (unspecified)) (set! pGe1c@env-labels (unspecified)) (set! pGe1e@set-env-labels! (unspecified)) (set! pGe20@env-itc (unspecified)) (set! pGe22@set-env-itc! (unspecified)) (set! pGe24@dummy (unspecified)) (set! pGe26@rp (unspecified)) (set! pGe30@interaction-env? (unspecified)) (set! pGe32@interaction-env-rib (unspecified)) (set! pGe34@set-interaction-env-rib! (unspecified)) (set! pGe36@interaction-env-r (unspecified)) (set! pGe38@set-interaction-env-r! (unspecified)) (set! pGe3a@interaction-env-locs (unspecified)) (set! pGe3c@set-interaction-env-locs! (unspecified)) (set! pGe3e@dummy (unspecified)) (set! pGe40@interaction-environment-symbols (unspecified)) (set! pGe42@environment-bindings (unspecified)) (set! pGe44@parse-binding (unspecified)) (set! pGe46@environment? (unspecified)) (set! pGe48@environment-symbols (unspecified)) (set! pGe4a@environment (unspecified)) (set! pGe4c@null-environment (unspecified)) (set! pGe4e@scheme-report-environment (unspecified)) (set! pGe50@expand (unspecified)) (set! pGe52@eval (unspecified)) (set! pGe54@library-expander (unspecified)) (set! pGe56@boot-library-expand (unspecified)) (set! pGe58@rev-map-append (unspecified)) (set! pGe5a@build-exports (unspecified)) (set! pGe5c@make-export-subst (unspecified)) (set! pGe5e@make-export-env/macros (unspecified)) (set! pGe60@generate-temporaries (unspecified)) (set! pGe62@free-identifier=? (unspecified)) (set! pGe64@bound-identifier=? (unspecified)) (set! pGe66@make-source-condition (unspecified)) (set! pGe68@extract-position-condition (unspecified)) (set! pGe6a@expression-position (unspecified)) (set! pGe6c@assertion-error (unspecified)) (set! pGe6e@syntax-error (unspecified)) (set! pGe70@syntax-violation* (unspecified)) (set! pGe72@syntax-violation (unspecified)) (set! pGe74@identifier? (unspecified)) (set! pGe76@datum->syntax (unspecified)) (set! pGe78@syntax->datum (unspecified)) (set! pGe7a@ungensym-all (unspecified)) (set! pGe7c@compile-r6rs-top-level (unspecified)) (set! pGe7e@pre-compile-r6rs-top-level (unspecified)) (set! pGe80@interaction-environment (unspecified)) (set! pGe82@top-level-context (unspecified)) (set! pGb06@file-options-macro (lambda (pGe83@x) (letrec* ((pGe86@valid-option? (lambda (pGe8f@x) (and (pGb8b@id? pGe8f@x) (memq (pGb8d@id->sym pGe8f@x) '(no-fail no-create no-truncate)))))) (let ((pGe87@t pGe83@x)) (let ((pGe89@ls/false (pGd92@syntax-dispatch pGe87@t '(_ . each-any)))) (if (and pGe89@ls/false (apply (lambda (pGe8b@opt*) (for-all pGe86@valid-option? pGe8b@opt*)) pGe89@ls/false)) (apply (lambda (pGe8d@opt*) (pGd48@bless (list 'make-file-options (list 'quote pGe8d@opt*)))) pGe89@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pGe87@t))))))) (set! pG280f@pGb06@file-options-macro pGb06@file-options-macro) (set! pGb08@set-cons (lambda (pGe91@x pGe92@ls) (if (memq pGe91@x pGe92@ls) pGe92@ls (cons pGe91@x pGe92@ls)))) (set! pG2810@pGb08@set-cons pGb08@set-cons) (set! pGb0a@set-union (lambda (pGe95@ls1 pGe96@ls2) (if (null? pGe95@ls1) pGe96@ls2 (if (memq (car pGe95@ls1) pGe96@ls2) (pGb0a@set-union (cdr pGe95@ls1) pGe96@ls2) (cons (car pGe95@ls1) (pGb0a@set-union (cdr pGe95@ls1) pGe96@ls2)))))) (set! pG2811@pGb0a@set-union pGb0a@set-union) (set! pGb0f@top-mark* '(top)) (set! pG2812@pGb0f@top-mark* pGb0f@top-mark*) (set! pGb11@top-marked? (lambda (pGe99@m*) (memq 'top pGe99@m*))) (set! pG2813@pGb11@top-marked? pGb11@top-marked?) (set! pGb13@gen-lexical (lambda (pGe9b@sym) (if (symbol? pGe9b@sym) (gensym pGe9b@sym) (if (pGb57@stx? pGe9b@sym) (pGb13@gen-lexical (pGb8d@id->sym pGe9b@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" pGe9b@sym))))) (set! pG2814@pGb13@gen-lexical pGb13@gen-lexical) (set! pGb15@gen-global (lambda (pGe9d@x) (pGb13@gen-lexical pGe9d@x))) (set! pG2815@pGb15@gen-global pGb15@gen-global) (set! pGb17@gen-label (lambda (pGe9f@_) (gensym))) (set! pG2816@pGb17@gen-label pGb17@gen-label) (set! pGb19@gen-top-level-label (lambda (pGea1@id pGea2@rib) (letrec* ((pGea6@find (lambda (pGeb1@sym pGeb2@mark* pGeb3@sym* pGeb4@mark** pGeb5@label*) (and (pair? pGeb3@sym*) (if (and (eq? pGeb1@sym (car pGeb3@sym*)) (same-marks? pGeb2@mark* (car pGeb4@mark**))) (car pGeb5@label*) (pGea6@find pGeb1@sym pGeb2@mark* (cdr pGeb3@sym*) (cdr pGeb4@mark**) (cdr pGeb5@label*))))))) (let ((pGea7@sym (pGb8d@id->sym pGea1@id)) (pGea8@mark* (pGb5d@stx-mark* pGea1@id))) (let ((pGeab@sym* (pGb29@rib-sym* pGea2@rib))) (let ((pGead@t (and (memq pGea7@sym (pGb29@rib-sym* pGea2@rib)) (pGea6@find pGea7@sym pGea8@mark* pGeab@sym* (pGb2d@rib-mark** pGea2@rib) (pGb31@rib-label* pGea2@rib))))) (if pGead@t ((lambda (pGeaf@label) (if (pG9a6@pG7f3@imported-label->binding pGeaf@label) (gensym) pGeaf@label)) pGead@t) (gensym)))))))) (set! pG2817@pGb19@gen-top-level-label pGb19@gen-top-level-label) (set! pGb1b@gen-define-label+loc (lambda (pGebb@id pGebc@rib) (let ((pGebf@t (pGe82@top-level-context))) (if pGebf@t ((lambda (pGec1@env) (let ((pGec3@label (pGb19@gen-top-level-label pGebb@id pGebc@rib)) (pGec4@locs (pGe3a@interaction-env-locs pGec1@env))) (values pGec3@label (let ((pGec7@t (assq pGec3@label pGec4@locs))) (if pGec7@t (cdr pGec7@t) (let ((pGec9@loc (pGb13@gen-lexical pGebb@id))) (begin (pGe3c@set-interaction-env-locs! pGec1@env (cons (cons pGec3@label pGec9@loc) pGec4@locs)) pGec9@loc))))))) pGebf@t) (values (gensym) (pGb13@gen-lexical pGebb@id)))))) (set! pG2818@pGb1b@gen-define-label+loc pGb1b@gen-define-label+loc) (set! pGb1d@gen-define-label (lambda (pGecb@id pGecc@rib) (if (pGe82@top-level-context) (pGb19@gen-top-level-label pGecb@id pGecc@rib) (gensym)))) (set! pG2819@pGb1d@gen-define-label pGb1d@gen-define-label) (set! pGb27@rib? (lambda (pGecf@x) (and (simple-struct? pGecf@x) (eq? (simple-struct-name pGecf@x) 'rib)))) (set! pG281a@pGb27@rib? pGb27@rib?) (set! pGb29@rib-sym* (lambda (pGed1@x) (simple-struct-ref pGed1@x '0))) (set! pG281b@pGb29@rib-sym* pGb29@rib-sym*) (set! pGb2b@set-rib-sym*! (lambda (pGed3@x pGed4@val) (simple-struct-set! pGed3@x '0 pGed4@val))) (set! pG281c@pGb2b@set-rib-sym*! pGb2b@set-rib-sym*!) (set! pGb2d@rib-mark** (lambda (pGed7@x) (simple-struct-ref pGed7@x '1))) (set! pG281d@pGb2d@rib-mark** pGb2d@rib-mark**) (set! pGb2f@set-rib-mark**! (lambda (pGed9@x pGeda@val) (simple-struct-set! pGed9@x '1 pGeda@val))) (set! pG281e@pGb2f@set-rib-mark**! pGb2f@set-rib-mark**!) (set! pGb31@rib-label* (lambda (pGedd@x) (simple-struct-ref pGedd@x '2))) (set! pG281f@pGb31@rib-label* pGb31@rib-label*) (set! pGb33@set-rib-label*! (lambda (pGedf@x pGee0@val) (simple-struct-set! pGedf@x '2 pGee0@val))) (set! pG2820@pGb33@set-rib-label*! pGb33@set-rib-label*!) (set! pGb35@rib-sealed/freq (lambda (pGee3@x) (simple-struct-ref pGee3@x '3))) (set! pG2821@pGb35@rib-sealed/freq pGb35@rib-sealed/freq) (set! pGb37@set-rib-sealed/freq! (lambda (pGee5@x pGee6@val) (simple-struct-set! pGee5@x '3 pGee6@val))) (set! pG2822@pGb37@set-rib-sealed/freq! pGb37@set-rib-sealed/freq!) (set! pGb39@rib-cache (lambda (pGee9@x) (simple-struct-ref pGee9@x '4))) (set! pG2823@pGb39@rib-cache pGb39@rib-cache) (set! pGb3b@set-rib-cache! (lambda (pGeeb@x pGeec@val) (simple-struct-set! pGeeb@x '4 pGeec@val))) (set! pG2824@pGb3b@set-rib-cache! pGb3b@set-rib-cache!) (set! pGb3d@dummy '3) (set! pG2825@pGb3d@dummy pGb3d@dummy) (set! pGb3f@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! pG2826@pGb3f@make-empty-rib pGb3f@make-empty-rib) (set! pGb41@extend-rib! (lambda (pGeef@rib pGef0@id pGef1@label) (letrec* ((pGef6@find (lambda (pGf03@sym pGf04@mark* pGf05@sym* pGf06@mark** pGf07@label*) (and (pair? pGf05@sym*) (if (and (eq? pGf03@sym (car pGf05@sym*)) (same-marks? pGf04@mark* (car pGf06@mark**))) pGf07@label* (pGef6@find pGf03@sym pGf04@mark* (cdr pGf05@sym*) (cdr pGf06@mark**) (cdr pGf07@label*))))))) (begin (if (pGb35@rib-sealed/freq pGeef@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" pGeef@rib) (void)) (let ((pGef7@sym (pGb8d@id->sym pGef0@id)) (pGef8@mark* (pGb5d@stx-mark* pGef0@id))) (let ((pGefb@sym* (pGb29@rib-sym* pGeef@rib))) (let ((pGefd@t (and (memq pGef7@sym (pGb29@rib-sym* pGeef@rib)) (pGef6@find pGef7@sym pGef8@mark* pGefb@sym* (pGb2d@rib-mark** pGeef@rib) (pGb31@rib-label* pGeef@rib))))) (if pGefd@t ((lambda (pGeff@p) (if (not (eq? pGef1@label (car pGeff@p))) (if (pGe82@top-level-context) (set-car! pGeff@p pGef1@label) (pGe72@syntax-violation '#f '"multiple definitions of identifier" pGef0@id)) (void))) pGefd@t) (begin (if (pGb39@rib-cache pGeef@rib) (hashtable-update! (pGb39@rib-cache pGeef@rib) pGef7@sym (lambda (pGf01@e) (cons (cons pGef8@mark* pGef1@label) pGf01@e)) '()) (void)) (pGb2b@set-rib-sym*! pGeef@rib (cons pGef7@sym pGefb@sym*)) (pGb2f@set-rib-mark**! pGeef@rib (cons pGef8@mark* (pGb2d@rib-mark** pGeef@rib))) (pGb33@set-rib-label*! pGeef@rib (cons pGef1@label (pGb31@rib-label* pGeef@rib)))))))))))) (set! pG2827@pGb41@extend-rib! pGb41@extend-rib!) (set! pGb43@extend-rib/nc! (lambda (pGf0d@rib pGf0e@id pGf0f@label) (let ((pGf13@sym (pGb8d@id->sym pGf0e@id)) (pGf14@mark* (pGb5d@stx-mark* pGf0e@id))) (let ((pGf17@sym* (pGb29@rib-sym* pGf0d@rib))) (begin (if (pGb39@rib-cache pGf0d@rib) (hashtable-update! (pGb39@rib-cache pGf0d@rib) pGf13@sym (lambda (pGf19@e) (cons (cons pGf14@mark* pGf0f@label) pGf19@e)) '()) (void)) (pGb2b@set-rib-sym*! pGf0d@rib (cons pGf13@sym pGf17@sym*)) (pGb2f@set-rib-mark**! pGf0d@rib (cons pGf14@mark* (pGb2d@rib-mark** pGf0d@rib))) (pGb33@set-rib-label*! pGf0d@rib (cons pGf0f@label (pGb31@rib-label* pGf0d@rib)))))))) (set! pG2828@pGb43@extend-rib/nc! pGb43@extend-rib/nc!) (set! pGb45@make-rib-map (lambda (pGf1b@sym*) (let ((pGf1d@ht (make-eq-hashtable))) (let pGf23@f ((pGf1f@i '0) (pGf20@sym* pGf1b@sym*)) (if (null? pGf20@sym*) pGf1d@ht (begin (hashtable-update! pGf1d@ht (car pGf20@sym*) (lambda (pGf25@x) (cons pGf1f@i pGf25@x)) '()) (pGf23@f (+ pGf1f@i '1) (cdr pGf20@sym*)))))))) (set! pG2829@pGb45@make-rib-map pGb45@make-rib-map) (set! pGb47@seal-rib! (lambda (pGf27@rib) (let ((pGf29@sym* (pGb29@rib-sym* pGf27@rib))) (if (not (null? pGf29@sym*)) (begin (pGb2b@set-rib-sym*! pGf27@rib (list->vector pGf29@sym*)) (pGb2f@set-rib-mark**! pGf27@rib (list->vector (pGb2d@rib-mark** pGf27@rib))) (pGb33@set-rib-label*! pGf27@rib (list->vector (pGb31@rib-label* pGf27@rib))) (pGb37@set-rib-sealed/freq! pGf27@rib (pGb45@make-rib-map pGf29@sym*))) (void))))) (set! pG282a@pGb47@seal-rib! pGb47@seal-rib!) (set! pGb49@unseal-rib! (lambda (pGf2b@rib) (if (pGb35@rib-sealed/freq pGf2b@rib) (begin (pGb37@set-rib-sealed/freq! pGf2b@rib '#f) (pGb2b@set-rib-sym*! pGf2b@rib (vector->list (pGb29@rib-sym* pGf2b@rib))) (pGb2f@set-rib-mark**! pGf2b@rib (vector->list (pGb2d@rib-mark** pGf2b@rib))) (pGb33@set-rib-label*! pGf2b@rib (vector->list (pGb31@rib-label* pGf2b@rib)))) (void)))) (set! pG282b@pGb49@unseal-rib! pGb49@unseal-rib!) (set! pGb4b@make-full-rib (lambda (pGf2d@id* pGf2e@label*) (let ((pGf31@r (make-simple-struct 'rib '6 (list (map pGb8d@id->sym pGf2d@id*) (map pGb5d@stx-mark* pGf2d@id*) pGf2e@label* '#f '#f)))) (begin (pGb47@seal-rib! pGf31@r) pGf31@r)))) (set! pG282c@pGb4b@make-full-rib pGb4b@make-full-rib) (set! pGb4d@rp (pG6d8@pG5b3@make-record-printer 'stx (lambda (pGf33@x pGf34@p pGf35@wr) (begin (display '"#<syntax " pGf34@p) (write (pGb9f@stx->datum pGf33@x) pGf34@p) (let ((pGf39@expr (pGb59@stx-expr pGf33@x))) (if (pG6cf@pG5a1@annotation? pGf39@expr) (let ((pGf3b@src (pG6d0@pG5a3@annotation-source pGf39@expr))) (if (pair? pGf3b@src) (begin (display '" [" pGf34@p) (display (cdr pGf3b@src) pGf34@p) (display '" of " pGf34@p) (display (car pGf3b@src) pGf34@p) (display '"]" pGf34@p)) (void))) (void))) (display '">" pGf34@p))))) (set! pG282d@pGb4d@rp pGb4d@rp) (set! pGb57@stx? (lambda (pGf3d@x) (and (simple-struct? pGf3d@x) (eq? (simple-struct-name pGf3d@x) 'stx)))) (set! pG282e@pGb57@stx? pGb57@stx?) (set! pGb59@stx-expr (lambda (pGf3f@x) (simple-struct-ref pGf3f@x '0))) (set! pG282f@pGb59@stx-expr pGb59@stx-expr) (set! pGb5b@set-stx-expr! (lambda (pGf41@x pGf42@val) (simple-struct-set! pGf41@x '0 pGf42@val))) (set! pG2830@pGb5b@set-stx-expr! pGb5b@set-stx-expr!) (set! pGb5d@stx-mark* (lambda (pGf45@x) (simple-struct-ref pGf45@x '1))) (set! pG2831@pGb5d@stx-mark* pGb5d@stx-mark*) (set! pGb5f@set-stx-mark*! (lambda (pGf47@x pGf48@val) (simple-struct-set! pGf47@x '1 pGf48@val))) (set! pG2832@pGb5f@set-stx-mark*! pGb5f@set-stx-mark*!) (set! pGb61@stx-subst* (lambda (pGf4b@x) (simple-struct-ref pGf4b@x '2))) (set! pG2833@pGb61@stx-subst* pGb61@stx-subst*) (set! pGb63@set-stx-subst*! (lambda (pGf4d@x pGf4e@val) (simple-struct-set! pGf4d@x '2 pGf4e@val))) (set! pG2834@pGb63@set-stx-subst*! pGb63@set-stx-subst*!) (set! pGb65@stx-ae* (lambda (pGf51@x) (simple-struct-ref pGf51@x '3))) (set! pG2835@pGb65@stx-ae* pGb65@stx-ae*) (set! pGb67@set-stx-ae*! (lambda (pGf53@x pGf54@val) (simple-struct-set! pGf53@x '3 pGf54@val))) (set! pG2836@pGb67@set-stx-ae*! pGb67@set-stx-ae*!) (set! pGb69@dummy '3) (set! pG2837@pGb69@dummy pGb69@dummy) (set! pGb6b@datum->stx (lambda (pGf57@id pGf58@datum) (make-simple-struct 'stx '5 (list pGf58@datum (pGb5d@stx-mark* pGf57@id) (pGb61@stx-subst* pGf57@id) (pGb65@stx-ae* pGf57@id))))) (set! pG2838@pGb6b@datum->stx pGb6b@datum->stx) (set! pGb6d@gen-mark (lambda () (string '#\m))) (set! pG2839@pGb6d@gen-mark pGb6d@gen-mark) (set! pGb6f@anti-mark '#f) (set! pG283a@pGb6f@anti-mark pGb6f@anti-mark) (set! pGb71@anti-mark? not) (set! pG283b@pGb71@anti-mark? pGb71@anti-mark?) (set! pGb73@mkstx (lambda (pGf5b@e pGf5c@m* pGf5d@s* pGf5e@ae*) (if (and (pGb57@stx? pGf5b@e) (not (pGb11@top-marked? pGf5c@m*))) (call-with-values (lambda () (join-wraps pGf5c@m* pGf5d@s* pGf5e@ae* pGf5b@e)) (lambda (pGf69@pGf64 pGf6a@pGf66 pGf6b@pGf68) (let ((pGf6f@ae* pGf6b@pGf68) (pGf70@s* pGf6a@pGf66) (pGf71@m* pGf69@pGf64)) (make-simple-struct 'stx '5 (list (pGb59@stx-expr pGf5b@e) pGf71@m* pGf70@s* pGf6f@ae*))))) (make-simple-struct 'stx '5 (list pGf5b@e pGf5c@m* pGf5d@s* pGf5e@ae*))))) (set! pG283c@pGb73@mkstx pGb73@mkstx) (set! pGb75@add-subst (lambda (pGf75@subst pGf76@e) (pGb73@mkstx pGf76@e '() (list pGf75@subst) '()))) (set! pG283d@pGb75@add-subst pGb75@add-subst) (set! pGb77@add-mark (lambda (pGf79@mark pGf7a@subst pGf7b@expr pGf7c@ae) (letrec* ((pGf82@merge-ae* (lambda (pGfa9@ls1 pGfaa@ls2) (if (and (pair? pGfa9@ls1) (pair? pGfaa@ls2) (not (car pGfaa@ls2))) (pGf84@cancel pGfa9@ls1 pGfaa@ls2) (append pGfa9@ls1 pGfaa@ls2)))) (pGf84@cancel (lambda (pGf9f@ls1 pGfa0@ls2) (let pGfa7@f ((pGfa3@x (car pGf9f@ls1)) (pGfa4@ls1 (cdr pGf9f@ls1))) (if (null? pGfa4@ls1) (cdr pGfa0@ls2) (cons pGfa3@x (pGfa7@f (car pGfa4@ls1) (cdr pGfa4@ls1))))))) (pGf86@f (lambda (pGf87@e pGf88@m pGf89@s1* pGf8a@ae*) (if (pair? pGf87@e) (let ((pGf8f@a (pGf86@f (car pGf87@e) pGf88@m pGf89@s1* pGf8a@ae*)) (pGf90@d (pGf86@f (cdr pGf87@e) pGf88@m pGf89@s1* pGf8a@ae*))) (if (eq? pGf8f@a pGf90@d) pGf87@e (cons pGf8f@a pGf90@d))) (if (vector? pGf87@e) (let ((pGf93@ls1 (vector->list pGf87@e))) (let ((pGf95@ls2 (map (lambda (pGf97@x) (pGf86@f pGf97@x pGf88@m pGf89@s1* pGf8a@ae*)) pGf93@ls1))) (if (for-all eq? pGf93@ls1 pGf95@ls2) pGf87@e (list->vector pGf95@ls2)))) (if (pGb57@stx? pGf87@e) (let ((pGf99@m* (pGb5d@stx-mark* pGf87@e)) (pGf9a@s2* (pGb61@stx-subst* pGf87@e))) (if (null? pGf99@m*) (pGf86@f (pGb59@stx-expr pGf87@e) pGf88@m (append pGf89@s1* pGf9a@s2*) (pGf82@merge-ae* pGf8a@ae* (pGb65@stx-ae* pGf87@e))) (if (eq? (car pGf99@m*) pGb6f@anti-mark) (make-simple-struct 'stx '5 (list (pGb59@stx-expr pGf87@e) (cdr pGf99@m*) (cdr (append pGf89@s1* pGf9a@s2*)) (pGf82@merge-ae* pGf8a@ae* (pGb65@stx-ae* pGf87@e)))) (make-simple-struct 'stx '5 (list (pGb59@stx-expr pGf87@e) (cons pGf88@m pGf99@m*) (let ((pGf9d@s* (cons 'shift (append pGf89@s1* pGf9a@s2*)))) (if pGf7a@subst (cons pGf7a@subst pGf9d@s*) pGf9d@s*)) (pGf82@merge-ae* pGf8a@ae* (pGb65@stx-ae* pGf87@e))))))) (if (symbol? pGf87@e) (pGe72@syntax-violation '#f '"raw symbol encountered in output of macro" pGf7b@expr pGf87@e) (make-simple-struct 'stx '5 (list pGf87@e (list pGf88@m) pGf89@s1* pGf8a@ae*))))))))) (pGb73@mkstx (pGf86@f pGf7b@expr pGf79@mark '() '()) '() '() (list pGf7c@ae))))) (set! pG283e@pGb77@add-mark pGb77@add-mark) (set! pGb79@syntax-kind? (lambda (pGfad@x pGfae@p?) (if (pGb57@stx? pGfad@x) (pGb79@syntax-kind? (pGb59@stx-expr pGfad@x) pGfae@p?) (if (pG6cf@pG5a1@annotation? pGfad@x) (pGb79@syntax-kind? (pG6d1@pG5a5@annotation-expression pGfad@x) pGfae@p?) (pGfae@p? pGfad@x))))) (set! pG283f@pGb79@syntax-kind? pGb79@syntax-kind?) (set! pGb7b@syntax-vector->list (lambda (pGfb1@x) (if (pGb57@stx? pGfb1@x) (let ((pGfb3@ls (pGb7b@syntax-vector->list (pGb59@stx-expr pGfb1@x))) (pGfb4@m* (pGb5d@stx-mark* pGfb1@x)) (pGfb5@s* (pGb61@stx-subst* pGfb1@x)) (pGfb6@ae* (pGb65@stx-ae* pGfb1@x))) (map (lambda (pGfbb@x) (pGb73@mkstx pGfbb@x pGfb4@m* pGfb5@s* pGfb6@ae*)) pGfb3@ls)) (if (pG6cf@pG5a1@annotation? pGfb1@x) (pGb7b@syntax-vector->list (pG6d1@pG5a5@annotation-expression pGfb1@x)) (if (vector? pGfb1@x) (vector->list pGfb1@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" pGfb1@x)))))) (set! pG2840@pGb7b@syntax-vector->list pGb7b@syntax-vector->list) (set! pGb7d@syntax-pair? (lambda (pGfbd@x) (pGb79@syntax-kind? pGfbd@x pair?))) (set! pG2841@pGb7d@syntax-pair? pGb7d@syntax-pair?) (set! pGb7f@syntax-vector? (lambda (pGfbf@x) (pGb79@syntax-kind? pGfbf@x vector?))) (set! pG2842@pGb7f@syntax-vector? pGb7f@syntax-vector?) (set! pGb81@syntax-null? (lambda (pGfc1@x) (pGb79@syntax-kind? pGfc1@x null?))) (set! pG2843@pGb81@syntax-null? pGb81@syntax-null?) (set! pGb83@syntax-list? (lambda (pGfc3@x) (or (pGb81@syntax-null? pGfc3@x) (and (pGb7d@syntax-pair? pGfc3@x) (pGb83@syntax-list? (pGb87@syntax-cdr pGfc3@x)))))) (set! pG2844@pGb83@syntax-list? pGb83@syntax-list?) (set! pGb85@syntax-car (lambda (pGfc5@x) (if (pGb57@stx? pGfc5@x) (pGb73@mkstx (pGb85@syntax-car (pGb59@stx-expr pGfc5@x)) (pGb5d@stx-mark* pGfc5@x) (pGb61@stx-subst* pGfc5@x) (pGb65@stx-ae* pGfc5@x)) (if (pG6cf@pG5a1@annotation? pGfc5@x) (pGb85@syntax-car (pG6d1@pG5a5@annotation-expression pGfc5@x)) (if (pair? pGfc5@x) (car pGfc5@x) (assertion-violation 'syntax-car '"BUG: not a pair" pGfc5@x)))))) (set! pG2845@pGb85@syntax-car pGb85@syntax-car) (set! pGb87@syntax-cdr (lambda (pGfc7@x) (if (pGb57@stx? pGfc7@x) (pGb73@mkstx (pGb87@syntax-cdr (pGb59@stx-expr pGfc7@x)) (pGb5d@stx-mark* pGfc7@x) (pGb61@stx-subst* pGfc7@x) (pGb65@stx-ae* pGfc7@x)) (if (pG6cf@pG5a1@annotation? pGfc7@x) (pGb87@syntax-cdr (pG6d1@pG5a5@annotation-expression pGfc7@x)) (if (pair? pGfc7@x) (cdr pGfc7@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" pGfc7@x)))))) (set! pG2846@pGb87@syntax-cdr pGb87@syntax-cdr) (set! pGb89@syntax->list (lambda (pGfc9@x) (if (pGb7d@syntax-pair? pGfc9@x) (cons (pGb85@syntax-car pGfc9@x) (pGb89@syntax->list (pGb87@syntax-cdr pGfc9@x))) (if (pGb81@syntax-null? pGfc9@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" pGfc9@x))))) (set! pG2847@pGb89@syntax->list pGb89@syntax->list) (set! pGb8b@id? (lambda (pGfcb@x) (and (pGb57@stx? pGfcb@x) (symbol? (pGb59@stx-expr pGfcb@x))))) (set! pG2848@pGb8b@id? pGb8b@id?) (set! pGb8d@id->sym (lambda (pGfcd@x) (pGb59@stx-expr pGfcd@x))) (set! pG2849@pGb8d@id->sym pGb8d@id->sym) (set! pGb8f@bound-id=? (lambda (pGfcf@x pGfd0@y) (and (eq? (pGb8d@id->sym pGfcf@x) (pGb8d@id->sym pGfd0@y)) (same-marks? (pGb5d@stx-mark* pGfcf@x) (pGb5d@stx-mark* pGfd0@y))))) (set! pG284a@pGb8f@bound-id=? pGb8f@bound-id=?) (set! pGb91@free-id=? (lambda (pGfd3@i pGfd4@j) (let ((pGfd7@t0 (id->real-label pGfd3@i)) (pGfd8@t1 (id->real-label pGfd4@j))) (if (or pGfd7@t0 pGfd8@t1) (eq? pGfd7@t0 pGfd8@t1) (eq? (pGb8d@id->sym pGfd3@i) (pGb8d@id->sym pGfd4@j)))))) (set! pG284b@pGb91@free-id=? pGb91@free-id=?) (set! pGb93@valid-bound-ids? (lambda (pGfdb@id*) (and (for-all pGb8b@id? pGfdb@id*) (pGb95@distinct-bound-ids? pGfdb@id*)))) (set! pG284c@pGb93@valid-bound-ids? pGb93@valid-bound-ids?) (set! pGb95@distinct-bound-ids? (lambda (pGfdd@id*) (or (null? pGfdd@id*) (and (not (pGb97@bound-id-member? (car pGfdd@id*) (cdr pGfdd@id*))) (pGb95@distinct-bound-ids? (cdr pGfdd@id*)))))) (set! pG284d@pGb95@distinct-bound-ids? pGb95@distinct-bound-ids?) (set! pGb97@bound-id-member? (lambda (pGfdf@id pGfe0@id*) (and (pair? pGfe0@id*) (or (pGb8f@bound-id=? pGfdf@id (car pGfe0@id*)) (pGb97@bound-id-member? pGfdf@id (cdr pGfe0@id*)))))) (set! pG284e@pGb97@bound-id-member? pGb97@bound-id-member?) (set! pGb99@self-evaluating? (lambda (pGfe3@x) (or (number? pGfe3@x) (string? pGfe3@x) (char? pGfe3@x) (boolean? pGfe3@x) (regexp? pGfe3@x) (bytevector? pGfe3@x)))) (set! pG284f@pGb99@self-evaluating? pGb99@self-evaluating?) (set! pGb9b@strip-annotations (lambda (pGfe5@x) (if (pair? pGfe5@x) (cons (pGb9b@strip-annotations (car pGfe5@x)) (pGb9b@strip-annotations (cdr pGfe5@x))) (if (vector? pGfe5@x) (vector-map pGb9b@strip-annotations pGfe5@x) (if (pG6cf@pG5a1@annotation? pGfe5@x) (pG6ce@pG59f@annotation-stripped pGfe5@x) pGfe5@x))))) (set! pG2850@pGb9b@strip-annotations pGb9b@strip-annotations) (set! pGb9d@strip (lambda (pGfe7@x pGfe8@m*) (if (pGb11@top-marked? pGfe8@m*) (if (or (pG6cf@pG5a1@annotation? pGfe7@x) (and (pair? pGfe7@x) (pG6cf@pG5a1@annotation? (car pGfe7@x))) (and (vector? pGfe7@x) (> (vector-length pGfe7@x) '0) (pG6cf@pG5a1@annotation? (vector-ref pGfe7@x '0)))) (pGb9b@strip-annotations pGfe7@x) pGfe7@x) (let pGfed@f ((pGfeb@x pGfe7@x)) (if (pGb57@stx? pGfeb@x) (begin (if (pair? (pGb59@stx-expr pGfeb@x)) (begin (set-source-info! (pGb59@stx-expr pGfeb@x) '#f) (set-source-info! (cdr (pGb59@stx-expr pGfeb@x)) '#f) (set-source-info! (car (pGb59@stx-expr pGfeb@x)) '#f)) (void)) (pGb9d@strip (pGb59@stx-expr pGfeb@x) (pGb5d@stx-mark* pGfeb@x))) (if (pG6cf@pG5a1@annotation? pGfeb@x) (pG6ce@pG59f@annotation-stripped pGfeb@x) (if (pair? pGfeb@x) (let ((pGfef@a (pGfed@f (car pGfeb@x))) (pGff0@d (pGfed@f (cdr pGfeb@x)))) (if (and (eq? pGfef@a (car pGfeb@x)) (eq? pGff0@d (cdr pGfeb@x))) pGfeb@x (cons pGfef@a pGff0@d))) (if (vector? pGfeb@x) (let ((pGff3@old (vector->list pGfeb@x))) (let ((pGff5@new (map pGfed@f pGff3@old))) (if (for-all eq? pGff3@old pGff5@new) pGfeb@x (list->vector pGff5@new)))) pGfeb@x)))))))) (set! pG2851@pGb9d@strip pGb9d@strip) (set! pGb9f@stx->datum (lambda (pGff7@x) (pGb9d@strip pGff7@x '()))) (set! pG2852@pGb9f@stx->datum pGb9f@stx->datum) (set! pGba1@id->label (lambda (pGff9@id) (or (id->real-label pGff9@id) (let ((pGffb@t (pGe82@top-level-context))) (if pGffb@t ((lambda (pGffd@env) (let ((pGfff@rib (pGe32@interaction-env-rib pGffd@env))) (call-with-values (lambda () (pGb1b@gen-define-label+loc pGff9@id pGfff@rib)) (lambda (pG1005@pG1002 pG1006@pG1004) (let ((pG1009@loc_ pG1006@pG1004) (pG100a@lab pG1005@pG1002)) (begin (pGb41@extend-rib! pGfff@rib pGff9@id pG100a@lab) pG100a@lab)))))) pGffb@t) '#f))))) (set! pG2853@pGba1@id->label pGba1@id->label) (set! pGba3@label->binding (lambda (pG100d@x pG100e@r) (let ((pG1011@t (pG9a6@pG7f3@imported-label->binding pG100d@x))) (if pG1011@t ((lambda (pG1013@b) (if (and (pair? pG1013@b) (eq? (car pG1013@b) '$core-rtd)) (cons '$rtd (map pGd48@bless (cdr pG1013@b))) (if (and (pair? pG1013@b) (eq? (car pG1013@b) 'global-rtd)) (let ((pG1015@lib (cadr pG1013@b)) (pG1016@loc (cddr pG1013@b))) (cons '$rtd (symbol-value pG1016@loc))) pG1013@b))) pG1011@t) (let ((pG1019@t (assq pG100d@x pG100e@r))) (if pG1019@t (cdr pG1019@t) (let ((pG101b@t (pGe82@top-level-context))) (if pG101b@t ((lambda (pG101d@env) (let ((pG101f@t (assq pG100d@x (pGe3a@interaction-env-locs pG101d@env)))) (if pG101f@t ((lambda (pG1021@p) (cons* 'lexical (cdr pG1021@p) '#f)) pG101f@t) '(displaced-lexical . #f)))) pG101b@t) '(displaced-lexical . #f))))))))) (set! pG2854@pGba3@label->binding pGba3@label->binding) (set! pGba5@make-binding cons) (set! pG2855@pGba5@make-binding pGba5@make-binding) (set! pGba7@binding-type car) (set! pG2856@pGba7@binding-type pGba7@binding-type) (set! pGba9@binding-value cdr) (set! pG2857@pGba9@binding-value pGba9@binding-value) (set! pGbab@raise-unbound-error (lambda (pG1023@id) (pGe70@syntax-violation* '#f '"unbound identifier" pG1023@id (make-undefined-violation)))) (set! pG2858@pGbab@raise-unbound-error pGbab@raise-unbound-error) (set! pGbad@syntax-type (lambda (pG1025@e pG1026@r) (if (pGb8b@id? pG1025@e) (let ((pG1029@id pG1025@e)) (let ((pG102b@label (pGba1@id->label pG1029@id))) (let ((pG102d@b (pGba3@label->binding pG102b@label pG1026@r))) (let ((pG102f@type (pGba7@binding-type pG102d@b))) (begin (if (not pG102b@label) (pGbab@raise-unbound-error pG1029@id) (void)) (let ((pG1031@t pG102f@type)) (if (memv pG1031@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values pG102f@type (pGba9@binding-value pG102d@b) pG1029@id) (values 'other '#f '#f)))))))) (if (pGb7d@syntax-pair? pG1025@e) (let ((pG1033@id (pGb85@syntax-car pG1025@e))) (if (pGb8b@id? pG1033@id) (let ((pG1035@label (pGba1@id->label pG1033@id))) (let ((pG1037@b (pGba3@label->binding pG1035@label pG1026@r))) (let ((pG1039@type (pGba7@binding-type pG1037@b))) (begin (if (not pG1035@label) (pGbab@raise-unbound-error pG1033@id) (void)) (let ((pG103b@t pG1039@type)) (if (memv pG103b@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values pG1039@type (pGba9@binding-value pG1037@b) pG1033@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((pG103d@d (pGb9f@stx->datum pG1025@e))) (if (pGb99@self-evaluating? pG103d@d) (values 'constant pG103d@d '#f) (values 'other '#f '#f))))))) (set! pG2859@pGbad@syntax-type pGbad@syntax-type) (set! pGbbb@sanitize-binding (lambda (pG103f@x pG1040@src) (if (procedure? pG103f@x) (cons* 'local-macro pG103f@x pG1040@src) (if (and (pair? pG103f@x) (eq? (car pG103f@x) 'macro!) (procedure? (cdr pG103f@x))) (cons* 'local-macro! (cdr pG103f@x) pG1040@src) (if (and (pair? pG103f@x) (eq? (car pG103f@x) '$rtd)) pG103f@x (assertion-violation 'expand '"invalid transformer" pG103f@x)))))) (set! pG285a@pGbbb@sanitize-binding pGbbb@sanitize-binding) (set! pGbbd@make-variable-transformer (lambda (pG1043@x) (if (procedure? pG1043@x) (cons 'macro! pG1043@x) (assertion-violation 'make-variable-transformer '"not a procedure" pG1043@x)))) (set! pG285b@pGbbd@make-variable-transformer pGbbd@make-variable-transformer) (set! pGbbf@variable-transformer? (lambda (pG1045@x) (and (pair? pG1045@x) (eq? (car pG1045@x) 'macro!) (procedure? (cdr pG1045@x))))) (set! pG285c@pGbbf@variable-transformer? pGbbf@variable-transformer?) (set! pGbc1@variable-transformer-procedure (lambda (pG1047@x) (if (pGbbf@variable-transformer? pG1047@x) (cdr pG1047@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" pG1047@x)))) (set! pG285d@pGbc1@variable-transformer-procedure pGbc1@variable-transformer-procedure) (set! pGbc3@make-eval-transformer (lambda (pG1049@x) (pGbbb@sanitize-binding (eval-core (pG731@pG6e9@expanded->core pG1049@x)) pG1049@x))) (set! pG285e@pGbc3@make-eval-transformer pGbc3@make-eval-transformer) (set! pGd14@parse-define (lambda (pG104b@x) (let ((pG104d@t pG104b@x)) (let ((pG104f@ls/false (pGd92@syntax-dispatch pG104d@t '(_ (any . any) any . each-any)))) (if (and pG104f@ls/false (apply (lambda (pG1051@id pG1052@fmls pG1053@b pG1054@b*) (pGb8b@id? pG1051@id)) pG104f@ls/false)) (apply (lambda (pG1059@id pG105a@fmls pG105b@b pG105c@b*) (begin (pGdb8@verify-formals pG105a@fmls pG104b@x) (values pG1059@id (cons 'defun (cons pG105a@fmls (cons pG105b@b pG105c@b*)))))) pG104f@ls/false) (let ((pG1061@t pG104d@t)) (let ((pG1063@ls/false (pGd92@syntax-dispatch pG1061@t '(_ any any)))) (if (and pG1063@ls/false (apply (lambda (pG1065@id pG1066@val) (pGb8b@id? pG1065@id)) pG1063@ls/false)) (apply (lambda (pG1069@id pG106a@val) (values pG1069@id (cons 'expr pG106a@val))) pG1063@ls/false) (let ((pG106d@t pG1061@t)) (let ((pG106f@ls/false (pGd92@syntax-dispatch pG106d@t '(_ any)))) (if (and pG106f@ls/false (apply (lambda (pG1071@id) (pGb8b@id? pG1071@id)) pG106f@ls/false)) (apply (lambda (pG1073@id) (values pG1073@id (cons 'expr (pGd48@bless '(void))))) pG106f@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG106d@t)))))))))))) (set! pG285f@pGd14@parse-define pGd14@parse-define) (set! pGd16@parse-define-syntax (lambda (pG1075@x) (let ((pG1077@t pG1075@x)) (let ((pG1079@ls/false (pGd92@syntax-dispatch pG1077@t '(_ any any)))) (if (and pG1079@ls/false (apply (lambda (pG107b@id pG107c@val) (pGb8b@id? pG107b@id)) pG1079@ls/false)) (apply (lambda (pG107f@id pG1080@val) (values pG107f@id pG1080@val)) pG1079@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1077@t)))))) (set! pG2860@pGd16@parse-define-syntax pGd16@parse-define-syntax) (set! pGd18@scheme-stx-hashtable (make-eq-hashtable)) (set! pG2861@pGd18@scheme-stx-hashtable pGd18@scheme-stx-hashtable) (set! pGd1a@scheme-stx (lambda (pG1083@sym) (or (hashtable-ref pGd18@scheme-stx-hashtable pG1083@sym '#f) (let ((pG1085@subst (pG982@pG7ab@library-subst (pG9a0@pG7e7@find-library-by-name '(psyntax system $all))))) (let ((pG1087@stx (make-simple-struct 'stx '5 (list pG1083@sym pGb0f@top-mark* '() '())))) (let ((pG1089@stx (let ((pG108b@t (assq pG1083@sym pG1085@subst))) (if pG108b@t ((lambda (pG108d@x) (let ((pG108f@name (car pG108d@x)) (pG1090@label (cdr pG108d@x))) (pGb75@add-subst (make-simple-struct 'rib '6 (list (list pG108f@name) (list pGb0f@top-mark*) (list pG1090@label) '#f '#f)) pG1087@stx))) pG108b@t) pG1087@stx)))) (begin (hashtable-set! pGd18@scheme-stx-hashtable pG1083@sym pG1089@stx) pG1089@stx))))))) (set! pG2862@pGd1a@scheme-stx pGd1a@scheme-stx) (set! pGd1c@lexical-var car) (set! pG2863@pGd1c@lexical-var pGd1c@lexical-var) (set! pGd1e@lexical-mutable? cdr) (set! pG2864@pGd1e@lexical-mutable? pGd1e@lexical-mutable?) (set! pGd20@set-lexical-mutable! set-cdr!) (set! pG2865@pGd20@set-lexical-mutable! pGd20@set-lexical-mutable!) (set! pGd22@add-lexical (lambda (pG1093@lab pG1094@lex pG1095@r) (cons (cons* pG1093@lab 'lexical pG1094@lex '#f) pG1095@r))) (set! pG2866@pGd22@add-lexical pGd22@add-lexical) (set! pGd24@add-lexicals (lambda (pG1099@lab* pG109a@lex* pG109b@r) (if (null? pG1099@lab*) pG109b@r (pGd24@add-lexicals (cdr pG1099@lab*) (cdr pG109a@lex*) (pGd22@add-lexical (car pG1099@lab*) (car pG109a@lex*) pG109b@r))))) (set! pG2867@pGd24@add-lexicals pGd24@add-lexicals) (set! pGd26@letrec-helper (lambda (pG109f@e pG10a0@r pG10a1@mr pG10a2@build) (let ((pG10a7@t pG109f@e)) (let ((pG10a9@ls/false (pGd92@syntax-dispatch pG10a7@t '(_ #(each (any any)) any . each-any)))) (if pG10a9@ls/false (apply (lambda (pG10ab@lhs* pG10ac@rhs* pG10ad@b pG10ae@b*) (if (not (pGb93@valid-bound-ids? pG10ab@lhs*)) (pGd4c@invalid-fmls-error pG109f@e pG10ab@lhs*) (let ((pG10b3@lex* (map pGb13@gen-lexical pG10ab@lhs*)) (pG10b4@lab* (map pGb17@gen-label pG10ab@lhs*))) (let ((pG10b7@rib (pGb4b@make-full-rib pG10ab@lhs* pG10b4@lab*)) (pG10b8@r (pGd24@add-lexicals pG10b4@lab* pG10b3@lex* pG10a0@r))) (let ((pG10bb@body (pGdca@chi-internal (pGb75@add-subst pG10b7@rib (cons pG10ad@b pG10ae@b*)) pG10b8@r pG10a1@mr)) (pG10bc@rhs* (pGdb0@chi-expr* (map (lambda (pG10bf@x) (pGb75@add-subst pG10b7@rib pG10bf@x)) pG10ac@rhs*) pG10b8@r pG10a1@mr))) (pG10a2@build '#f pG10b3@lex* pG10bc@rhs* pG10bb@body)))))) pG10a9@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG10a7@t)))))) (set! pG2868@pGd26@letrec-helper pGd26@letrec-helper) (set! pGd28@let-transformer (lambda (pG10c1@e pG10c2@r pG10c3@mr) (let ((pG10c7@t pG10c1@e)) (let ((pG10c9@ls/false (pGd92@syntax-dispatch pG10c7@t '(_ #(each (any any)) any . each-any)))) (if pG10c9@ls/false (apply (lambda (pG10cb@lhs* pG10cc@rhs* pG10cd@b pG10ce@b*) (if (not (pGb93@valid-bound-ids? pG10cb@lhs*)) (pGd4c@invalid-fmls-error pG10c1@e pG10cb@lhs*) (let ((pG10d3@lex* (map pGb13@gen-lexical pG10cb@lhs*)) (pG10d4@lab* (map pGb17@gen-label pG10cb@lhs*)) (pG10d5@rhs* (pGdb0@chi-expr* pG10cc@rhs* pG10c2@r pG10c3@mr))) (let ((pG10d9@rib (pGb4b@make-full-rib pG10cb@lhs* pG10d4@lab*)) (pG10da@r (pGd24@add-lexicals pG10d4@lab* pG10d3@lex* pG10c2@r))) (let ((pG10dd@body (pGdca@chi-internal (pGb75@add-subst pG10d9@rib (cons pG10cd@b pG10ce@b*)) pG10da@r pG10c3@mr))) (pGaf3@pGa56@build-let '#f pG10d3@lex* pG10d5@rhs* pG10dd@body)))))) pG10c9@ls/false) (let ((pG10df@t pG10c7@t)) (let ((pG10e1@ls/false (pGd92@syntax-dispatch pG10df@t '(_ any #(each (any any)) any . each-any)))) (if pG10e1@ls/false (apply (lambda (pG10e3@loop pG10e4@lhs* pG10e5@rhs* pG10e6@b pG10e7@b*) (if (not (pGb93@valid-bound-ids? pG10e4@lhs*)) (pGd4c@invalid-fmls-error pG10c1@e pG10e4@lhs*) (let ((pG10ed@lex* (map pGb13@gen-lexical pG10e4@lhs*)) (pG10ee@lab* (map pGb17@gen-label pG10e4@lhs*)) (pG10ef@rhs* (pGdb0@chi-expr* pG10e5@rhs* pG10c2@r pG10c3@mr)) (pG10f0@loop-lex (pGb13@gen-lexical pG10e3@loop)) (pG10f1@loop-lab (pGb17@gen-label pG10e3@loop))) (let ((pG10f7@loop-rib (pGb4b@make-full-rib (list pG10e3@loop) (list pG10f1@loop-lab))) (pG10f8@rib (pGb4b@make-full-rib pG10e4@lhs* pG10ee@lab*)) (pG10f9@r (pGd24@add-lexicals (cons pG10f1@loop-lab pG10ee@lab*) (cons pG10f0@loop-lex pG10ed@lex*) pG10c2@r))) (let ((pG10fd@body (pGdca@chi-internal (pGb75@add-subst pG10f7@loop-rib (pGb75@add-subst pG10f8@rib (cons pG10e6@b pG10e7@b*))) pG10f9@r pG10c3@mr))) (pGaf4@pGa58@build-named-let '#f pG10f0@loop-lex pG10ed@lex* pG10ef@rhs* pG10fd@body)))))) pG10e1@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG10df@t))))))))) (set! pG2869@pGd28@let-transformer pGd28@let-transformer) (set! pGd2a@letrec-transformer (lambda (pG10ff@e pG1100@r pG1101@mr) (pGd26@letrec-helper pG10ff@e pG1100@r pG1101@mr pGaf2@pGa54@build-letrec))) (set! pG286a@pGd2a@letrec-transformer pGd2a@letrec-transformer) (set! pGd2c@letrec*-transformer (lambda (pG1105@e pG1106@r pG1107@mr) (pGd26@letrec-helper pG1105@e pG1106@r pG1107@mr pGaf5@pGa5a@build-letrec*))) (set! pG286b@pGd2c@letrec*-transformer pGd2c@letrec*-transformer) (set! pGd2e@fluid-let-syntax-transformer (lambda (pG110b@e pG110c@r pG110d@mr) (letrec* ((pG1112@lookup (lambda (pG1125@x) (or (pGba1@id->label pG1125@x) (pGe72@syntax-violation '#f '"unbound identifier" pG110b@e pG1125@x))))) (let ((pG1113@t pG110b@e)) (let ((pG1115@ls/false (pGd92@syntax-dispatch pG1113@t '(_ #(each (any any)) any . each-any)))) (if pG1115@ls/false (apply (lambda (pG1117@lhs* pG1118@rhs* pG1119@b pG111a@b*) (if (not (pGb93@valid-bound-ids? pG1117@lhs*)) (pGd4c@invalid-fmls-error pG110b@e pG1117@lhs*) (let ((pG111f@lab* (map pG1112@lookup pG1117@lhs*)) (pG1120@rhs* (map (lambda (pG1123@x) (pGbc3@make-eval-transformer (pGdec@expand-transformer pG1123@x pG110d@mr))) pG1118@rhs*))) (pGdca@chi-internal (cons pG1119@b pG111a@b*) (append (map cons pG111f@lab* pG1120@rhs*) pG110c@r) (append (map cons pG111f@lab* pG1120@rhs*) pG110d@mr))))) pG1115@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1113@t))))))) (set! pG286c@pGd2e@fluid-let-syntax-transformer pGd2e@fluid-let-syntax-transformer) (set! pGd30@type-descriptor-transformer (lambda (pG1127@e pG1128@r pG1129@mr) (let ((pG112d@t pG1127@e)) (let ((pG112f@ls/false (pGd92@syntax-dispatch pG112d@t '(_ any)))) (if (and pG112f@ls/false (apply (lambda (pG1131@id) (pGb8b@id? pG1131@id)) pG112f@ls/false)) (apply (lambda (pG1133@id) (let ((pG1135@lab (pGba1@id->label pG1133@id))) (let ((pG1137@b (pGba3@label->binding pG1135@lab pG1128@r))) (let ((pG1139@type (pGba7@binding-type pG1137@b))) (begin (if (not pG1135@lab) (pGbab@raise-unbound-error pG1133@id) (void)) (if (not (and (eq? pG1139@type '$rtd) (not (list? (pGba9@binding-value pG1137@b))))) (pGe72@syntax-violation '#f '"not a record type" pG1127@e) (void)) (list 'quote (pGba9@binding-value pG1137@b))))))) pG112f@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG112d@t)))))) (set! pG286d@pGd30@type-descriptor-transformer pGd30@type-descriptor-transformer) (set! pGd32@record-type-descriptor-transformer (lambda (pG113b@e pG113c@r pG113d@mr) (let ((pG1141@t pG113b@e)) (let ((pG1143@ls/false (pGd92@syntax-dispatch pG1141@t '(_ any)))) (if (and pG1143@ls/false (apply (lambda (pG1145@id) (pGb8b@id? pG1145@id)) pG1143@ls/false)) (apply (lambda (pG1147@id) (let ((pG1149@lab (pGba1@id->label pG1147@id))) (let ((pG114b@b (pGba3@label->binding pG1149@lab pG113c@r))) (let ((pG114d@type (pGba7@binding-type pG114b@b))) (begin (if (not pG1149@lab) (pGbab@raise-unbound-error pG1147@id) (void)) (if (not (and (eq? pG114d@type '$rtd) (list? (pGba9@binding-value pG114b@b)))) (pGe72@syntax-violation '#f '"not a record type" pG113b@e) (void)) (pGdb4@chi-expr (car (pGba9@binding-value pG114b@b)) pG113c@r pG113d@mr)))))) pG1143@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1141@t)))))) (set! pG286e@pGd32@record-type-descriptor-transformer pGd32@record-type-descriptor-transformer) (set! pGd34@record-constructor-descriptor-transformer (lambda (pG114f@e pG1150@r pG1151@mr) (let ((pG1155@t pG114f@e)) (let ((pG1157@ls/false (pGd92@syntax-dispatch pG1155@t '(_ any)))) (if (and pG1157@ls/false (apply (lambda (pG1159@id) (pGb8b@id? pG1159@id)) pG1157@ls/false)) (apply (lambda (pG115b@id) (let ((pG115d@lab (pGba1@id->label pG115b@id))) (let ((pG115f@b (pGba3@label->binding pG115d@lab pG1150@r))) (let ((pG1161@type (pGba7@binding-type pG115f@b))) (begin (if (not pG115d@lab) (pGbab@raise-unbound-error pG115b@id) (void)) (if (not (and (eq? pG1161@type '$rtd) (list? (pGba9@binding-value pG115f@b)))) (pGe72@syntax-violation '#f '"invalid type" pG114f@e) (void)) (pGdb4@chi-expr (cadr (pGba9@binding-value pG115f@b)) pG1150@r pG1151@mr)))))) pG1157@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1155@t)))))) (set! pG286f@pGd34@record-constructor-descriptor-transformer pGd34@record-constructor-descriptor-transformer) (set! pGd36@when-macro (lambda (pG1163@e) (let ((pG1165@t pG1163@e)) (let ((pG1167@ls/false (pGd92@syntax-dispatch pG1165@t '(_ any any . each-any)))) (if pG1167@ls/false (apply (lambda (pG1169@test pG116a@e pG116b@e*) (pGd48@bless (list 'if pG1169@test (cons 'begin (cons pG116a@e pG116b@e*))))) pG1167@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1165@t)))))) (set! pG2870@pGd36@when-macro pGd36@when-macro) (set! pGd38@unless-macro (lambda (pG116f@e) (let ((pG1171@t pG116f@e)) (let ((pG1173@ls/false (pGd92@syntax-dispatch pG1171@t '(_ any any . each-any)))) (if pG1173@ls/false (apply (lambda (pG1175@test pG1176@e pG1177@e*) (pGd48@bless (list 'if (list 'not pG1175@test) (cons 'begin (cons pG1176@e pG1177@e*))))) pG1173@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1171@t)))))) (set! pG2871@pGd38@unless-macro pGd38@unless-macro) (set! pGd3a@if-transformer (lambda (pG117b@e pG117c@r pG117d@mr) (let ((pG1181@t pG117b@e)) (let ((pG1183@ls/false (pGd92@syntax-dispatch pG1181@t '(_ any any any)))) (if pG1183@ls/false (apply (lambda (pG1185@e0 pG1186@e1 pG1187@e2) (list 'if (pGdb4@chi-expr pG1185@e0 pG117c@r pG117d@mr) (pGdb4@chi-expr pG1186@e1 pG117c@r pG117d@mr) (pGdb4@chi-expr pG1187@e2 pG117c@r pG117d@mr))) pG1183@ls/false) (let ((pG118b@t pG1181@t)) (let ((pG118d@ls/false (pGd92@syntax-dispatch pG118b@t '(_ any any)))) (if pG118d@ls/false (apply (lambda (pG118f@e0 pG1190@e1) (list 'if (pGdb4@chi-expr pG118f@e0 pG117c@r pG117d@mr) (pGdb4@chi-expr pG1190@e1 pG117c@r pG117d@mr) (pGaf1@pGa52@build-void))) pG118d@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG118b@t))))))))) (set! pG2872@pGd3a@if-transformer pGd3a@if-transformer) (set! pGd3c@and-transformer (lambda (pG1193@e pG1194@r pG1195@mr) (let ((pG1199@t pG1193@e)) (let ((pG119b@ls/false (pGd92@syntax-dispatch pG1199@t '(_ . each-any)))) (if pG119b@ls/false (apply (lambda (pG119d@e*) (cons 'and (pGdb0@chi-expr* pG119d@e* pG1194@r pG1195@mr))) pG119b@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1199@t)))))) (set! pG2873@pGd3c@and-transformer pGd3c@and-transformer) (set! pGd3e@or-transformer (lambda (pG119f@e pG11a0@r pG11a1@mr) (let ((pG11a5@t pG119f@e)) (let ((pG11a7@ls/false (pGd92@syntax-dispatch pG11a5@t '(_ . each-any)))) (if pG11a7@ls/false (apply (lambda (pG11a9@e*) (cons 'or (pGdb0@chi-expr* pG11a9@e* pG11a0@r pG11a1@mr))) pG11a7@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG11a5@t)))))) (set! pG2874@pGd3e@or-transformer pGd3e@or-transformer) (set! pGd40@case-macro (lambda (pG11ab@e) (letrec* ((pG11ae@build-last (lambda (pG11d5@cls) (let ((pG11d7@t pG11d5@cls)) (let ((pG11d9@ls/false (pGd92@syntax-dispatch pG11d7@t '(#(scheme-id else) any . each-any)))) (if pG11d9@ls/false (apply (lambda (pG11db@e pG11dc@e*) (cons 'begin (cons pG11db@e pG11dc@e*))) pG11d9@ls/false) (let ((pG11df@t pG11d7@t)) (let ((pG11e1@ls/false (pGd92@syntax-dispatch pG11df@t '_))) (if pG11e1@ls/false (apply (lambda () (pG11b0@build-one pG11d5@cls '(if #f #f))) pG11e1@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG11df@t))))))))) (pG11b0@build-one (lambda (pG11c7@cls pG11c8@k) (let ((pG11cb@t pG11c7@cls)) (let ((pG11cd@ls/false (pGd92@syntax-dispatch pG11cb@t '(each-any any . each-any)))) (if pG11cd@ls/false (apply (lambda (pG11cf@d* pG11d0@e pG11d1@e*) (list 'if (list 'memv 't (list 'quote pG11cf@d*)) (cons 'begin (cons pG11d0@e pG11d1@e*)) pG11c8@k)) pG11cd@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG11cb@t))))))) (let ((pG11b1@t pG11ab@e)) (let ((pG11b3@ls/false (pGd92@syntax-dispatch pG11b1@t '(_ any)))) (if pG11b3@ls/false (apply (lambda (pG11b5@expr) (pGd48@bless (cons 'let (cons (list (list 't pG11b5@expr)) '((if #f #f)))))) pG11b3@ls/false) (let ((pG11b7@t pG11b1@t)) (let ((pG11b9@ls/false (pGd92@syntax-dispatch pG11b7@t '(_ any any . each-any)))) (if pG11b9@ls/false (apply (lambda (pG11bb@expr pG11bc@cls pG11bd@cls*) (pGd48@bless (list 'let (list (list 't pG11bb@expr)) (let pG11c5@f ((pG11c1@cls pG11bc@cls) (pG11c2@cls* pG11bd@cls*)) (if (null? pG11c2@cls*) (pG11ae@build-last pG11c1@cls) (pG11b0@build-one pG11c1@cls (pG11c5@f (car pG11c2@cls*) (cdr pG11c2@cls*)))))))) pG11b9@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG11b7@t)))))))))) (set! pG2875@pGd40@case-macro pGd40@case-macro) (set! pGd42@quote-transformer (lambda (pG11e3@e pG11e4@r pG11e5@mr) (let ((pG11e9@t pG11e3@e)) (let ((pG11eb@ls/false (pGd92@syntax-dispatch pG11e9@t '(_ any)))) (if pG11eb@ls/false (apply (lambda (pG11ed@datum) (list 'quote (pGb9f@stx->datum pG11ed@datum))) pG11eb@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG11e9@t)))))) (set! pG2876@pGd42@quote-transformer pGd42@quote-transformer) (set! pGd44@case-lambda-transformer (lambda (pG11ef@e pG11f0@r pG11f1@mr) (let ((pG11f5@t pG11ef@e)) (let ((pG11f7@ls/false (pGd92@syntax-dispatch pG11f5@t '(_ . #(each (any any . each-any)))))) (if pG11f7@ls/false (apply (lambda (pG11f9@fmls* pG11fa@b* pG11fb@b**) (call-with-values (lambda () (pGdbc@chi-lambda-clause* pG11ef@e pG11f9@fmls* (map cons pG11fa@b* pG11fb@b**) pG11f0@r pG11f1@mr)) (lambda (pG1203@pG1200 pG1204@pG1202) (let ((pG1207@body* pG1204@pG1202) (pG1208@fmls* pG1203@pG1200)) (pGaef@pGa22@build-case-lambda '#f pG1208@fmls* pG1207@body*))))) pG11f7@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG11f5@t)))))) (set! pG2877@pGd44@case-lambda-transformer pGd44@case-lambda-transformer) (set! pGd46@lambda-transformer (lambda (pG120b@e pG120c@r pG120d@mr) (let ((pG1211@t pG120b@e)) (let ((pG1213@ls/false (pGd92@syntax-dispatch pG1211@t '(_ any any . each-any)))) (if pG1213@ls/false (apply (lambda (pG1215@fmls pG1216@b pG1217@b*) (call-with-values (lambda () (pGdba@chi-lambda-clause pG120b@e pG1215@fmls (cons pG1216@b pG1217@b*) pG120c@r pG120d@mr)) (lambda (pG121f@pG121c pG1220@pG121e) (let ((pG1223@body pG1220@pG121e) (pG1224@fmls pG121f@pG121c)) (pGaee@pGa20@build-lambda '#f pG1224@fmls pG1223@body))))) pG1213@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1211@t)))))) (set! pG2878@pGd46@lambda-transformer pGd46@lambda-transformer) (set! pGd48@bless (lambda (pG1227@x) (pGb73@mkstx (let pG122b@f ((pG1229@x pG1227@x)) (if (pGb57@stx? pG1229@x) pG1229@x (if (pair? pG1229@x) (cons (pG122b@f (car pG1229@x)) (pG122b@f (cdr pG1229@x))) (if (symbol? pG1229@x) (pGd1a@scheme-stx pG1229@x) (if (vector? pG1229@x) (vector-map pG122b@f pG1229@x) pG1229@x))))) '() '() '()))) (set! pG2879@pGd48@bless pGd48@bless) (set! pGd4a@with-syntax-macro (lambda (pG122d@e) (let ((pG122f@t pG122d@e)) (let ((pG1231@ls/false (pGd92@syntax-dispatch pG122f@t '(_ #(each (any any)) any . each-any)))) (if pG1231@ls/false (apply (lambda (pG1233@pat* pG1234@expr* pG1235@b pG1236@b*) (let ((pG123b@idn* (let pG123f@f ((pG123d@pat* pG1233@pat*)) (if (null? pG123d@pat*) '() (call-with-values (lambda () (pGd90@convert-pattern (car pG123d@pat*) '())) (lambda (pG1245@pG1242 pG1246@pG1244) (let ((pG1249@idn* pG1246@pG1244) (pG124a@pat pG1245@pG1242)) (append pG1249@idn* (pG123f@f (cdr pG123d@pat*)))))))))) (begin (pGdb8@verify-formals (map car pG123b@idn*) pG122d@e) (let ((pG124d@t* (pGe60@generate-temporaries pG1234@expr*))) (pGd48@bless (list 'let (map list pG124d@t* pG1234@expr*) (let pG1253@f ((pG124f@pat* pG1233@pat*) (pG1250@t* pG124d@t*)) (if (null? pG124f@pat*) (cons 'let (cons '() (cons pG1235@b pG1236@b*))) (list 'syntax-case (car pG1250@t*) '() (list (car pG124f@pat*) (pG1253@f (cdr pG124f@pat*) (cdr pG1250@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car pG124f@pat*)) (car pG1250@t*)))))))))))) pG1231@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG122f@t)))))) (set! pG287a@pGd4a@with-syntax-macro pGd4a@with-syntax-macro) (set! pGd4c@invalid-fmls-error (lambda (pG1255@stx pG1256@fmls) (let ((pG1259@t pG1256@fmls)) (let ((pG125b@ls/false (pGd92@syntax-dispatch pG1259@t '#(each+ any () any)))) (if pG125b@ls/false (apply (lambda (pG125d@id* pG125e@last) (let pG1263@f ((pG1261@id* (if (pGb8b@id? pG125e@last) (cons pG125e@last pG125d@id*) (if (pGb81@syntax-null? pG125e@last) pG125d@id* (pGe72@syntax-violation '#f '"not an identifier" pG1255@stx pG125e@last))))) (if (null? pG1261@id*) (values) (if (not (pGb8b@id? (car pG1261@id*))) (pGe72@syntax-violation '#f '"not an identifier" pG1255@stx (car pG1261@id*)) (begin (pG1263@f (cdr pG1261@id*)) (if (pGb97@bound-id-member? (car pG1261@id*) (cdr pG1261@id*)) (pGe72@syntax-violation '#f '"duplicate binding" pG1255@stx (car pG1261@id*)) (void))))))) pG125b@ls/false) (let ((pG1265@t pG1259@t)) (let ((pG1267@ls/false (pGd92@syntax-dispatch pG1265@t '_))) (if pG1267@ls/false (apply (lambda () (pGe72@syntax-violation '#f '"malformed binding form" pG1255@stx pG1256@fmls)) pG1267@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1265@t))))))))) (set! pG287b@pGd4c@invalid-fmls-error pGd4c@invalid-fmls-error) (set! pGd4e@let-macro (lambda (pG1269@stx) (let ((pG126b@t pG1269@stx)) (let ((pG126d@ls/false (pGd92@syntax-dispatch pG126b@t '(_ #(each (any any)) any . each-any)))) (if pG126d@ls/false (apply (lambda (pG126f@lhs* pG1270@rhs* pG1271@b pG1272@b*) (if (pGb93@valid-bound-ids? pG126f@lhs*) (pGd48@bless (cons (cons 'lambda (cons pG126f@lhs* (cons pG1271@b pG1272@b*))) pG1270@rhs*)) (pGd4c@invalid-fmls-error pG1269@stx pG126f@lhs*))) pG126d@ls/false) (let ((pG1277@t pG126b@t)) (let ((pG1279@ls/false (pGd92@syntax-dispatch pG1277@t '(_ any #(each (any any)) any . each-any)))) (if (and pG1279@ls/false (apply (lambda (pG127b@f pG127c@lhs* pG127d@rhs* pG127e@b pG127f@b*) (pGb8b@id? pG127b@f)) pG1279@ls/false)) (apply (lambda (pG1285@f pG1286@lhs* pG1287@rhs* pG1288@b pG1289@b*) (if (pGb93@valid-bound-ids? pG1286@lhs*) (pGd48@bless (cons (list 'letrec (list (list pG1285@f (cons 'lambda (cons pG1286@lhs* (cons pG1288@b pG1289@b*))))) pG1285@f) pG1287@rhs*)) (pGd4c@invalid-fmls-error pG1269@stx pG1286@lhs*))) pG1279@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1277@t))))))))) (set! pG287c@pGd4e@let-macro pGd4e@let-macro) (set! pGd50@let-values-macro (lambda (pG128f@stx) (letrec* ((pG1292@rename (lambda (pG12f7@x pG12f8@old* pG12f9@new*) (begin (if (not (pGb8b@id? pG12f7@x)) (pGe72@syntax-violation '#f '"not an indentifier" pG128f@stx pG12f7@x) (void)) (if (pGb97@bound-id-member? pG12f7@x pG12f8@old*) (pGe72@syntax-violation '#f '"duplicate binding" pG128f@stx pG12f7@x) (void)) (let ((pG12fd@y (gensym (pGe78@syntax->datum pG12f7@x)))) (values pG12fd@y (cons pG12f7@x pG12f8@old*) (cons pG12fd@y pG12f9@new*)))))) (pG1294@rename* (lambda (pG12e5@x* pG12e6@old* pG12e7@new*) (if (null? pG12e5@x*) (values '() pG12e6@old* pG12e7@new*) (call-with-values (lambda () (pG1292@rename (car pG12e5@x*) pG12e6@old* pG12e7@new*)) (lambda (pG12eb@x pG12ec@old* pG12ed@new*) (call-with-values (lambda () (pG1294@rename* (cdr pG12e5@x*) pG12ec@old* pG12ed@new*)) (lambda (pG12f1@x* pG12f2@old* pG12f3@new*) (values (cons pG12eb@x pG12f1@x*) pG12f2@old* pG12f3@new*))))))))) (let ((pG1295@t pG128f@stx)) (let ((pG1297@ls/false (pGd92@syntax-dispatch pG1295@t '(_ () any . each-any)))) (if pG1297@ls/false (apply (lambda (pG1299@b pG129a@b*) (cons* (pGd48@bless 'let) '() pG1299@b pG129a@b*)) pG1297@ls/false) (let ((pG129d@t pG1295@t)) (let ((pG129f@ls/false (pGd92@syntax-dispatch pG129d@t '(_ #(each (any any)) any . each-any)))) (if pG129f@ls/false (apply (lambda (pG12a1@lhs* pG12a2@rhs* pG12a3@b pG12a4@b*) (pGd48@bless (let pG12b1@f ((pG12a9@lhs* pG12a1@lhs*) (pG12aa@rhs* pG12a2@rhs*) (pG12ab@old* '()) (pG12ac@new* '())) (if (null? pG12a9@lhs*) (cons 'let (cons (map list pG12ab@old* pG12ac@new*) (cons pG12a3@b pG12a4@b*))) (let ((pG12b3@t (car pG12a9@lhs*))) (let ((pG12b5@ls/false (pGd92@syntax-dispatch pG12b3@t 'each-any))) (if pG12b5@ls/false (apply (lambda (pG12b7@x*) (call-with-values (lambda () (pG1294@rename* pG12b7@x* pG12ab@old* pG12ac@new*)) (lambda (pG12bf@pG12ba pG12c0@pG12bc pG12c1@pG12be) (let ((pG12c5@new* pG12c1@pG12be) (pG12c6@old* pG12c0@pG12bc) (pG12c7@y* pG12bf@pG12ba)) (list 'call-with-values (list 'lambda '() (car pG12aa@rhs*)) (list 'lambda pG12c7@y* (pG12b1@f (cdr pG12a9@lhs*) (cdr pG12aa@rhs*) pG12c6@old* pG12c5@new*))))))) pG12b5@ls/false) (let ((pG12cb@t pG12b3@t)) (let ((pG12cd@ls/false (pGd92@syntax-dispatch pG12cb@t '#(each+ any () any)))) (if pG12cd@ls/false (apply (lambda (pG12cf@x* pG12d0@x) (call-with-values (lambda () (pG1292@rename pG12d0@x pG12ab@old* pG12ac@new*)) (lambda (pG12d3@y pG12d4@old* pG12d5@new*) (call-with-values (lambda () (pG1294@rename* pG12cf@x* pG12d4@old* pG12d5@new*)) (lambda (pG12d9@y* pG12da@old* pG12db@new*) (list 'call-with-values (list 'lambda '() (car pG12aa@rhs*)) (list 'lambda (append pG12d9@y* pG12d3@y) (pG12b1@f (cdr pG12a9@lhs*) (cdr pG12aa@rhs*) pG12da@old* pG12db@new*)))))))) pG12cd@ls/false) (let ((pG12df@t pG12cb@t)) (let ((pG12e1@ls/false (pGd92@syntax-dispatch pG12df@t 'any))) (if pG12e1@ls/false (apply (lambda (pG12e3@others) (pGe72@syntax-violation '#f '"malformed bindings" pG128f@stx pG12e3@others)) pG12e1@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG12df@t)))))))))))))) pG129f@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG129d@t)))))))))) (set! pG287d@pGd50@let-values-macro pGd50@let-values-macro) (set! pGd52@let*-values-macro (lambda (pG12ff@stx) (letrec* ((pG1302@check (lambda (pG1331@x*) (if (not (null? pG1331@x*)) (let ((pG1333@x (car pG1331@x*))) (begin (if (not (pGb8b@id? pG1333@x)) (pGe72@syntax-violation '#f '"not an identifier" pG12ff@stx pG1333@x) (void)) (pG1302@check (cdr pG1331@x*)) (if (pGb97@bound-id-member? pG1333@x (cdr pG1331@x*)) (pGe72@syntax-violation '#f '"duplicate identifier" pG12ff@stx pG1333@x) (void)))) (void))))) (let ((pG1303@t pG12ff@stx)) (let ((pG1305@ls/false (pGd92@syntax-dispatch pG1303@t '(_ () any . each-any)))) (if pG1305@ls/false (apply (lambda (pG1307@b pG1308@b*) (cons* (pGd48@bless 'let) '() pG1307@b pG1308@b*)) pG1305@ls/false) (let ((pG130b@t pG1303@t)) (let ((pG130d@ls/false (pGd92@syntax-dispatch pG130b@t '(_ #(each (any any)) any . each-any)))) (if pG130d@ls/false (apply (lambda (pG130f@lhs* pG1310@rhs* pG1311@b pG1312@b*) (pGd48@bless (let pG131b@f ((pG1317@lhs* pG130f@lhs*) (pG1318@rhs* pG1310@rhs*)) (if (null? pG1317@lhs*) (cons 'begin (cons pG1311@b pG1312@b*)) (let ((pG131d@t (car pG1317@lhs*))) (let ((pG131f@ls/false (pGd92@syntax-dispatch pG131d@t 'each-any))) (if pG131f@ls/false (apply (lambda (pG1321@x*) (begin (pG1302@check pG1321@x*) (list 'call-with-values (list 'lambda '() (car pG1318@rhs*)) (list 'lambda pG1321@x* (pG131b@f (cdr pG1317@lhs*) (cdr pG1318@rhs*)))))) pG131f@ls/false) (let ((pG1323@t pG131d@t)) (let ((pG1325@ls/false (pGd92@syntax-dispatch pG1323@t '#(each+ any () any)))) (if pG1325@ls/false (apply (lambda (pG1327@x* pG1328@x) (begin (pG1302@check (cons pG1328@x pG1327@x*)) (list 'call-with-values (list 'lambda '() (car pG1318@rhs*)) (list 'lambda (append pG1327@x* pG1328@x) (pG131b@f (cdr pG1317@lhs*) (cdr pG1318@rhs*)))))) pG1325@ls/false) (let ((pG132b@t pG1323@t)) (let ((pG132d@ls/false (pGd92@syntax-dispatch pG132b@t 'any))) (if pG132d@ls/false (apply (lambda (pG132f@others) (pGe72@syntax-violation '#f '"malformed bindings" pG12ff@stx pG132f@others)) pG132d@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG132b@t)))))))))))))) pG130d@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG130b@t)))))))))) (set! pG287e@pGd52@let*-values-macro pGd52@let*-values-macro) (set! pGd54@trace-lambda-macro (lambda (pG1335@stx) (let ((pG1337@t pG1335@stx)) (let ((pG1339@ls/false (pGd92@syntax-dispatch pG1337@t '(_ any each-any any . each-any)))) (if pG1339@ls/false (apply (lambda (pG133b@who pG133c@fmls pG133d@b pG133e@b*) (if (pGb93@valid-bound-ids? pG133c@fmls) (pGd48@bless (list 'make-traced-procedure (list 'quote pG133b@who) (cons 'lambda (cons pG133c@fmls (cons pG133d@b pG133e@b*))))) (pGd4c@invalid-fmls-error pG1335@stx pG133c@fmls))) pG1339@ls/false) (let ((pG1343@t pG1337@t)) (let ((pG1345@ls/false (pGd92@syntax-dispatch pG1343@t '(_ any #(each+ any () any) any . each-any)))) (if pG1345@ls/false (apply (lambda (pG1347@who pG1348@fmls pG1349@last pG134a@b pG134b@b*) (if (pGb93@valid-bound-ids? (cons pG1349@last pG1348@fmls)) (pGd48@bless (list 'make-traced-procedure (list 'quote pG1347@who) (cons 'lambda (cons (append pG1348@fmls pG1349@last) (cons pG134a@b pG134b@b*))))) (pGd4c@invalid-fmls-error pG1335@stx (append pG1348@fmls pG1349@last)))) pG1345@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1343@t))))))))) (set! pG287f@pGd54@trace-lambda-macro pGd54@trace-lambda-macro) (set! pGd56@trace-define-macro (lambda (pG1351@stx) (let ((pG1353@t pG1351@stx)) (let ((pG1355@ls/false (pGd92@syntax-dispatch pG1353@t '(_ (any . each-any) any . each-any)))) (if pG1355@ls/false (apply (lambda (pG1357@who pG1358@fmls pG1359@b pG135a@b*) (if (pGb93@valid-bound-ids? pG1358@fmls) (pGd48@bless (list 'define pG1357@who (list 'make-traced-procedure (list 'quote pG1357@who) (cons 'lambda (cons pG1358@fmls (cons pG1359@b pG135a@b*)))))) (pGd4c@invalid-fmls-error pG1351@stx pG1358@fmls))) pG1355@ls/false) (let ((pG135f@t pG1353@t)) (let ((pG1361@ls/false (pGd92@syntax-dispatch pG135f@t '(_ (any . #(each+ any () any)) any . each-any)))) (if pG1361@ls/false (apply (lambda (pG1363@who pG1364@fmls pG1365@last pG1366@b pG1367@b*) (if (pGb93@valid-bound-ids? (cons pG1365@last pG1364@fmls)) (pGd48@bless (list 'define pG1363@who (list 'make-traced-procedure (list 'quote pG1363@who) (cons 'lambda (cons (append pG1364@fmls pG1365@last) (cons pG1366@b pG1367@b*)))))) (pGd4c@invalid-fmls-error pG1351@stx (append pG1364@fmls pG1365@last)))) pG1361@ls/false) (let ((pG136d@t pG135f@t)) (let ((pG136f@ls/false (pGd92@syntax-dispatch pG136d@t '(_ any any)))) (if pG136f@ls/false (apply (lambda (pG1371@who pG1372@expr) (if (pGb8b@id? pG1371@who) (pGd48@bless (list 'define pG1371@who (list 'let (list (list 'v pG1372@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote pG1371@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (pGe72@syntax-violation '#f '"invalid name" pG1351@stx))) pG136f@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG136d@t)))))))))))) (set! pG2880@pGd56@trace-define-macro pGd56@trace-define-macro) (set! pGd58@trace-define-syntax-macro (lambda (pG1375@stx) (let ((pG1377@t pG1375@stx)) (let ((pG1379@ls/false (pGd92@syntax-dispatch pG1377@t '(_ any any)))) (if pG1379@ls/false (apply (lambda (pG137b@who pG137c@expr) (if (pGb8b@id? pG137b@who) (pGd48@bless (list 'define-syntax pG137b@who (list 'make-traced-macro (list 'quote pG137b@who) pG137c@expr))) (pGe72@syntax-violation '#f '"invalid name" pG1375@stx))) pG1379@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1377@t)))))) (set! pG2881@pGd58@trace-define-syntax-macro pGd58@trace-define-syntax-macro) (set! pGd5a@trace-let/rec-syntax (lambda (pG137f@who) (lambda (pG1381@stx) (let ((pG1383@t pG1381@stx)) (let ((pG1385@ls/false (pGd92@syntax-dispatch pG1383@t '(_ #(each (any any)) any . each-any)))) (if pG1385@ls/false (apply (lambda (pG1387@lhs* pG1388@rhs* pG1389@b pG138a@b*) (if (pGb93@valid-bound-ids? pG1387@lhs*) (let ((pG138f@rhs* (map (lambda (pG1391@lhs pG1392@rhs) (list 'make-traced-macro (list 'quote pG1391@lhs) pG1392@rhs)) pG1387@lhs* pG1388@rhs*))) (pGd48@bless (cons pG137f@who (cons (map list pG1387@lhs* pG138f@rhs*) (cons pG1389@b pG138a@b*))))) (pGd4c@invalid-fmls-error pG1381@stx pG1387@lhs*))) pG1385@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1383@t))))))) (set! pG2882@pGd5a@trace-let/rec-syntax pGd5a@trace-let/rec-syntax) (set! pGd5c@trace-let-syntax-macro (pGd5a@trace-let/rec-syntax 'let-syntax)) (set! pG2883@pGd5c@trace-let-syntax-macro pGd5c@trace-let-syntax-macro) (set! pGd5e@trace-letrec-syntax-macro (pGd5a@trace-let/rec-syntax 'letrec-syntax)) (set! pG2884@pGd5e@trace-letrec-syntax-macro pGd5e@trace-letrec-syntax-macro) (set! pGd60@guard-macro (lambda (pG1395@x) (letrec* ((pG1398@gen-clauses (lambda (pG13af@con pG13b0@outerk pG13b1@clause*) (letrec* ((pG13b6@f (lambda (pG13ef@x pG13f0@k) (let ((pG13f3@t pG13ef@x)) (let ((pG13f5@ls/false (pGd92@syntax-dispatch pG13f3@t '(any #(scheme-id =>) any)))) (if pG13f5@ls/false (apply (lambda (pG13f7@e pG13f8@p) (let ((pG13fb@t (gensym))) (list 'let (list (list pG13fb@t pG13f7@e)) (list 'if pG13fb@t (list pG13f8@p pG13fb@t) pG13f0@k)))) pG13f5@ls/false) (let ((pG13fd@t pG13f3@t)) (let ((pG13ff@ls/false (pGd92@syntax-dispatch pG13fd@t '(any)))) (if pG13ff@ls/false (apply (lambda (pG1401@e) (let ((pG1403@t (gensym))) (list 'let (list (list pG1403@t pG1401@e)) (list 'if pG1403@t pG1403@t pG13f0@k)))) pG13ff@ls/false) (let ((pG1405@t pG13fd@t)) (let ((pG1407@ls/false (pGd92@syntax-dispatch pG1405@t '(any any . each-any)))) (if pG1407@ls/false (apply (lambda (pG1409@e pG140a@v pG140b@v*) (list 'if pG1409@e (cons 'begin (cons pG140a@v pG140b@v*)) pG13f0@k)) pG1407@ls/false) (let ((pG140f@t pG1405@t)) (let ((pG1411@ls/false (pGd92@syntax-dispatch pG140f@t '_))) (if pG1411@ls/false (apply (lambda () (pGe72@syntax-violation '#f '"invalid guard clause" pG13ef@x)) pG1411@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG140f@t))))))))))))))) (pG13b8@f* (lambda (pG13c5@x*) (let ((pG13c7@t pG13c5@x*)) (let ((pG13c9@ls/false (pGd92@syntax-dispatch pG13c7@t '()))) (if pG13c9@ls/false (apply (lambda () (let ((pG13cb@g (gensym))) (values (list pG13cb@g (list 'lambda '() (list 'raise-continuable pG13af@con))) pG13cb@g))) pG13c9@ls/false) (let ((pG13cd@t pG13c7@t)) (let ((pG13cf@ls/false (pGd92@syntax-dispatch pG13cd@t '((#(scheme-id else) any . each-any))))) (if pG13cf@ls/false (apply (lambda (pG13d1@e pG13d2@e*) (values (cons 'begin (cons pG13d1@e pG13d2@e*)) '#f)) pG13cf@ls/false) (let ((pG13d5@t pG13cd@t)) (let ((pG13d7@ls/false (pGd92@syntax-dispatch pG13d5@t '(any . any)))) (if pG13d7@ls/false (apply (lambda (pG13d9@cls pG13da@cls*) (call-with-values (lambda () (pG13b8@f* pG13da@cls*)) (lambda (pG13e1@pG13de pG13e2@pG13e0) (let ((pG13e5@g pG13e2@pG13e0) (pG13e6@e pG13e1@pG13de)) (values (pG13b6@f pG13d9@cls pG13e6@e) pG13e5@g))))) pG13d7@ls/false) (let ((pG13e9@t pG13d5@t)) (let ((pG13eb@ls/false (pGd92@syntax-dispatch pG13e9@t 'any))) (if pG13eb@ls/false (apply (lambda (pG13ed@others) (pGe72@syntax-violation '#f '"invalid guard clause" pG13ed@others)) pG13eb@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG13e9@t)))))))))))))))) (call-with-values (lambda () (pG13b8@f* pG13b1@clause*)) (lambda (pG13bd@pG13ba pG13be@pG13bc) (let ((pG13c1@raisek pG13be@pG13bc) (pG13c2@code pG13bd@pG13ba)) (if pG13c1@raisek (list (list 'call/cc (list 'lambda (list pG13c1@raisek) (list pG13b0@outerk (list 'lambda '() pG13c2@code))))) (list pG13b0@outerk (list 'lambda '() pG13c2@code)))))))))) (let ((pG1399@t pG1395@x)) (let ((pG139b@ls/false (pGd92@syntax-dispatch pG1399@t '(_ (any . each-any) any . each-any)))) (if (and pG139b@ls/false (apply (lambda (pG139d@con pG139e@clause* pG139f@b pG13a0@b*) (pGb8b@id? pG139d@con)) pG139b@ls/false)) (apply (lambda (pG13a5@con pG13a6@clause* pG13a7@b pG13a8@b*) (let ((pG13ad@outerk (gensym))) (pGd48@bless (list (list 'call/cc (list 'lambda (list pG13ad@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list pG13a5@con) (pG1398@gen-clauses pG13a5@con pG13ad@outerk pG13a6@clause*)) (cons 'lambda (cons '() (cons pG13a7@b pG13a8@b*))))))))))) pG139b@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1399@t))))))) (set! pG2885@pGd60@guard-macro pGd60@guard-macro) (set! pGd62@define-enumeration-macro (lambda (pG1413@stx) (letrec* ((pG1416@set? (lambda (pG142f@x) (or (null? pG142f@x) (and (not (memq (car pG142f@x) (cdr pG142f@x))) (pG1416@set? (cdr pG142f@x)))))) (pG1418@remove-dups (lambda (pG142d@ls) (if (null? pG142d@ls) '() (cons (car pG142d@ls) (pG1418@remove-dups (remq (car pG142d@ls) (cdr pG142d@ls)))))))) (let ((pG1419@t pG1413@stx)) (let ((pG141b@ls/false (pGd92@syntax-dispatch pG1419@t '(_ any each-any any)))) (if (and pG141b@ls/false (apply (lambda (pG141d@name pG141e@id* pG141f@maker) (and (pGb8b@id? pG141d@name) (pGb8b@id? pG141f@maker) (for-all pGb8b@id? pG141e@id*))) pG141b@ls/false)) (apply (lambda (pG1423@name pG1424@id* pG1425@maker) (let ((pG1429@name* (pG1418@remove-dups (pGe78@syntax->datum pG1424@id*))) (pG142a@mk (gensym))) (pGd48@bless (list 'begin (list 'define pG142a@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote pG1429@name*)))) (list 'define-syntax pG1423@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote pG1429@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote pG1423@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax pG1425@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote pG1425@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote pG1429@name*)) (cons 'syntax-violation (cons (list 'quote pG1425@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons pG142a@mk '('(n* ...))))))))))))) pG141b@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1419@t))))))) (set! pG2886@pGd62@define-enumeration-macro pGd62@define-enumeration-macro) (set! pGd64@time-macro (lambda (pG1431@stx) (let ((pG1433@t pG1431@stx)) (let ((pG1435@ls/false (pGd92@syntax-dispatch pG1433@t '(_ any)))) (if pG1435@ls/false (apply (lambda (pG1437@expr) (pGd48@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() pG1437@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) pG1435@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1433@t)))))) (set! pG2887@pGd64@time-macro pGd64@time-macro) (set! pGd66@delay-macro (lambda (pG1439@stx) (let ((pG143b@t pG1439@stx)) (let ((pG143d@ls/false (pGd92@syntax-dispatch pG143b@t '(_ any)))) (if pG143d@ls/false (apply (lambda (pG143f@expr) (pGd48@bless (list 'make-promise (list 'lambda '() pG143f@expr)))) pG143d@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG143b@t)))))) (set! pG2888@pGd66@delay-macro pGd66@delay-macro) (set! pGd68@assert-macro (lambda (pG1441@stx) (let ((pG1443@t pG1441@stx)) (let ((pG1445@ls/false (pGd92@syntax-dispatch pG1443@t '(_ any)))) (if pG1445@ls/false (apply (lambda (pG1447@expr) (let ((pG1449@pos (or (pGe6a@expression-position pG1441@stx) (pGe6a@expression-position pG1447@expr)))) (pGd48@bless (list 'let (list (list 'x pG1447@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote pG1447@expr) (list 'quote pG1449@pos))))))) pG1445@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1443@t)))))) (set! pG2889@pGd68@assert-macro pGd68@assert-macro) (set! pGd6a@endianness-macro (lambda (pG144b@stx) (let ((pG144d@t pG144b@stx)) (let ((pG144f@ls/false (pGd92@syntax-dispatch pG144d@t '(_ any)))) (if pG144f@ls/false (apply (lambda (pG1451@e) (let ((pG1453@t (pGe78@syntax->datum pG1451@e))) (if (memv pG1453@t '(little)) (pGd48@bless ''little) (if (memv pG1453@t '(big)) (pGd48@bless ''big) (pGe72@syntax-violation '#f '"endianness must be big or little" pG144b@stx))))) pG144f@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG144d@t)))))) (set! pG288a@pGd6a@endianness-macro pGd6a@endianness-macro) (set! pGd6c@identifier-syntax-macro (lambda (pG1455@stx) (let ((pG1457@t pG1455@stx)) (let ((pG1459@ls/false (pGd92@syntax-dispatch pG1457@t '(_ any)))) (if pG1459@ls/false (apply (lambda (pG145b@expr) (pGd48@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax pG145b@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax pG145b@expr) '((syntax (e* ...)))))))))) pG1459@ls/false) (let ((pG145d@t pG1457@t)) (let ((pG145f@ls/false (pGd92@syntax-dispatch pG145d@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and pG145f@ls/false (apply (lambda (pG1461@id1 pG1462@expr1 pG1463@id2 pG1464@expr2 pG1465@expr3) (and (pGb8b@id? pG1461@id1) (pGb8b@id? pG1463@id2) (pGb8b@id? pG1464@expr2))) pG145f@ls/false)) (apply (lambda (pG146b@id1 pG146c@expr1 pG146d@id2 pG146e@expr2 pG146f@expr3) (pGd48@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax pG146c@expr1)) (list (list 'set! 'id pG146e@expr2) (list 'syntax pG146f@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons pG146c@expr1 '(e* ...))))))))) pG145f@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG145d@t))))))))) (set! pG288b@pGd6c@identifier-syntax-macro pGd6c@identifier-syntax-macro) (set! pGd6e@do-macro (lambda (pG1475@stx) (letrec* ((pG1478@bind (lambda (pG148f@x) (let ((pG1491@t pG148f@x)) (let ((pG1493@ls/false (pGd92@syntax-dispatch pG1491@t '(any any)))) (if pG1493@ls/false (apply (lambda (pG1495@x pG1496@init) (list pG1495@x pG1496@init pG1495@x)) pG1493@ls/false) (let ((pG1499@t pG1491@t)) (let ((pG149b@ls/false (pGd92@syntax-dispatch pG1499@t '(any any any)))) (if pG149b@ls/false (apply (lambda (pG149d@x pG149e@init pG149f@step) (list pG149d@x pG149e@init pG149f@step)) pG149b@ls/false) (let ((pG14a3@t pG1499@t)) (let ((pG14a5@ls/false (pGd92@syntax-dispatch pG14a3@t '_))) (if pG14a5@ls/false (apply (lambda () (pGe72@syntax-violation '#f '"invalid binding" pG1475@stx)) pG14a5@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG14a3@t))))))))))))) (let ((pG1479@t pG1475@stx)) (let ((pG147b@ls/false (pGd92@syntax-dispatch pG1479@t '(_ each-any (any . each-any) . each-any)))) (if pG147b@ls/false (apply (lambda (pG147d@binding* pG147e@test pG147f@expr* pG1480@command*) (let ((pG1485@t (map pG1478@bind pG147d@binding*))) (let ((pG1487@ls/false (pGd92@syntax-dispatch pG1485@t '#(each (any any any))))) (if pG1487@ls/false (apply (lambda (pG1489@x* pG148a@init* pG148b@step*) (if (pGb93@valid-bound-ids? pG1489@x*) (pGd48@bless (list 'letrec (list (list 'loop (list 'lambda pG1489@x* (list 'if pG147e@test (cons 'begin (cons '(if #f #f) pG147f@expr*)) (cons 'begin (append pG1480@command* (list (cons 'loop pG148b@step*)))))))) (cons 'loop pG148a@init*))) (pGe72@syntax-violation '#f '"invalid bindings" pG1475@stx))) pG1487@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1485@t))))) pG147b@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1479@t))))))) (set! pG288c@pGd6e@do-macro pGd6e@do-macro) (set! pGd70@let*-macro (lambda (pG14a7@stx) (let ((pG14a9@t pG14a7@stx)) (let ((pG14ab@ls/false (pGd92@syntax-dispatch pG14a9@t '(_ #(each (any any)) any . each-any)))) (if (and pG14ab@ls/false (apply (lambda (pG14ad@lhs* pG14ae@rhs* pG14af@b pG14b0@b*) (for-all pGb8b@id? pG14ad@lhs*)) pG14ab@ls/false)) (apply (lambda (pG14b5@lhs* pG14b6@rhs* pG14b7@b pG14b8@b*) (pGd48@bless (let pG14bf@f ((pG14bd@x* (map list pG14b5@lhs* pG14b6@rhs*))) (if (null? pG14bd@x*) (cons 'let (cons '() (cons pG14b7@b pG14b8@b*))) (list 'let (list (car pG14bd@x*)) (pG14bf@f (cdr pG14bd@x*))))))) pG14ab@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG14a9@t)))))) (set! pG288d@pGd70@let*-macro pGd70@let*-macro) (set! pGd72@or-macro (lambda (pG14c1@stx) (let ((pG14c3@t pG14c1@stx)) (let ((pG14c5@ls/false (pGd92@syntax-dispatch pG14c3@t '(_)))) (if pG14c5@ls/false (apply (lambda () '#f) pG14c5@ls/false) (let ((pG14c7@t pG14c3@t)) (let ((pG14c9@ls/false (pGd92@syntax-dispatch pG14c7@t '(_ any . each-any)))) (if pG14c9@ls/false (apply (lambda (pG14cb@e pG14cc@e*) (pGd48@bless (let pG14d3@f ((pG14cf@e pG14cb@e) (pG14d0@e* pG14cc@e*)) (if (null? pG14d0@e*) (list 'begin '#f pG14cf@e) (list 'let (list (list 't pG14cf@e)) (list 'if 't 't (pG14d3@f (car pG14d0@e*) (cdr pG14d0@e*)))))))) pG14c9@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG14c7@t))))))))) (set! pG288e@pGd72@or-macro pGd72@or-macro) (set! pGd74@and-macro (lambda (pG14d5@stx) (let ((pG14d7@t pG14d5@stx)) (let ((pG14d9@ls/false (pGd92@syntax-dispatch pG14d7@t '(_)))) (if pG14d9@ls/false (apply (lambda () '#t) pG14d9@ls/false) (let ((pG14db@t pG14d7@t)) (let ((pG14dd@ls/false (pGd92@syntax-dispatch pG14db@t '(_ any . each-any)))) (if pG14dd@ls/false (apply (lambda (pG14df@e pG14e0@e*) (pGd48@bless (let pG14e7@f ((pG14e3@e pG14df@e) (pG14e4@e* pG14e0@e*)) (if (null? pG14e4@e*) (list 'begin '#f pG14e3@e) (cons 'if (cons pG14e3@e (cons (pG14e7@f (car pG14e4@e*) (cdr pG14e4@e*)) '(#f)))))))) pG14dd@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG14db@t))))))))) (set! pG288f@pGd74@and-macro pGd74@and-macro) (set! pGd76@cond-macro (lambda (pG14e9@stx) (let ((pG14eb@t pG14e9@stx)) (let ((pG14ed@ls/false (pGd92@syntax-dispatch pG14eb@t '(_ any . each-any)))) (if pG14ed@ls/false (apply (lambda (pG14ef@cls pG14f0@cls*) (pGd48@bless (let pG14f7@f ((pG14f3@cls pG14ef@cls) (pG14f4@cls* pG14f0@cls*)) (if (null? pG14f4@cls*) (let ((pG14f9@t pG14f3@cls)) (let ((pG14fb@ls/false (pGd92@syntax-dispatch pG14f9@t '(#(scheme-id else) any . each-any)))) (if pG14fb@ls/false (apply (lambda (pG14fd@e pG14fe@e*) (cons 'begin (cons pG14fd@e pG14fe@e*))) pG14fb@ls/false) (let ((pG1501@t pG14f9@t)) (let ((pG1503@ls/false (pGd92@syntax-dispatch pG1501@t '(any #(scheme-id =>) any)))) (if pG1503@ls/false (apply (lambda (pG1505@e pG1506@p) (list 'let (list (list 't pG1505@e)) (list 'if 't (cons pG1506@p '(t))))) pG1503@ls/false) (let ((pG1509@t pG1501@t)) (let ((pG150b@ls/false (pGd92@syntax-dispatch pG1509@t '(any)))) (if pG150b@ls/false (apply (lambda (pG150d@e) (cons 'or (cons pG150d@e '((if #f #f))))) pG150b@ls/false) (let ((pG150f@t pG1509@t)) (let ((pG1511@ls/false (pGd92@syntax-dispatch pG150f@t '(any . each-any)))) (if pG1511@ls/false (apply (lambda (pG1513@e pG1514@e*) (list 'if pG1513@e (cons 'begin pG1514@e*))) pG1511@ls/false) (let ((pG1517@t pG150f@t)) (let ((pG1519@ls/false (pGd92@syntax-dispatch pG1517@t '_))) (if pG1519@ls/false (apply (lambda () (pGe72@syntax-violation '#f '"invalid last clause" pG14e9@stx)) pG1519@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1517@t)))))))))))))))) (let ((pG151b@t pG14f3@cls)) (let ((pG151d@ls/false (pGd92@syntax-dispatch pG151b@t '(#(scheme-id else) any . each-any)))) (if pG151d@ls/false (apply (lambda (pG151f@e pG1520@e*) (pGe72@syntax-violation '#f '"incorrect position of keyword else" pG14e9@stx)) pG151d@ls/false) (let ((pG1523@t pG151b@t)) (let ((pG1525@ls/false (pGd92@syntax-dispatch pG1523@t '(any #(scheme-id =>) any)))) (if pG1525@ls/false (apply (lambda (pG1527@e pG1528@p) (list 'let (list (list 't pG1527@e)) (list 'if 't (cons pG1528@p '(t)) (pG14f7@f (car pG14f4@cls*) (cdr pG14f4@cls*))))) pG1525@ls/false) (let ((pG152b@t pG1523@t)) (let ((pG152d@ls/false (pGd92@syntax-dispatch pG152b@t '(any)))) (if pG152d@ls/false (apply (lambda (pG152f@e) (list 'or pG152f@e (pG14f7@f (car pG14f4@cls*) (cdr pG14f4@cls*)))) pG152d@ls/false) (let ((pG1531@t pG152b@t)) (let ((pG1533@ls/false (pGd92@syntax-dispatch pG1531@t '(any . each-any)))) (if pG1533@ls/false (apply (lambda (pG1535@e pG1536@e*) (list 'if pG1535@e (cons 'begin pG1536@e*) (pG14f7@f (car pG14f4@cls*) (cdr pG14f4@cls*)))) pG1533@ls/false) (let ((pG1539@t pG1531@t)) (let ((pG153b@ls/false (pGd92@syntax-dispatch pG1539@t '_))) (if pG153b@ls/false (apply (lambda () (pGe72@syntax-violation '#f '"invalid last clause" pG14e9@stx)) pG153b@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1539@t)))))))))))))))))))) pG14ed@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG14eb@t)))))) (set! pG2890@pGd76@cond-macro pGd76@cond-macro) (set! pGd78@do-include (lambda (pG153d@stx pG153e@id pG153f@filename) (let ((pG1543@filename (pGb9f@stx->datum pG153f@filename))) (begin (if (not (and (string? pG1543@filename) (pGb8b@id? pG153e@id))) (pGe72@syntax-violation '#f '"invalid syntax" pG153d@stx) (void)) (cons (pGd48@bless 'begin) (with-input-from-file pG1543@filename (lambda () (let pG1547@f ((pG1545@ls '())) (let ((pG1549@x (pG6cd@pG59d@read-annotated))) (if (eof-object? pG1549@x) (reverse pG1545@ls) (pG1547@f (cons (pGb6b@datum->stx pG153e@id pG1549@x) pG1545@ls)))))))))))) (set! pG2891@pGd78@do-include pGd78@do-include) (set! pGd7a@include-macro (lambda (pG154b@e) (let ((pG154d@t pG154b@e)) (let ((pG154f@ls/false (pGd92@syntax-dispatch pG154d@t '(any any)))) (if pG154f@ls/false (apply (lambda (pG1551@id pG1552@filename) (pGd78@do-include pG154b@e pG1551@id pG1552@filename)) pG154f@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG154d@t)))))) (set! pG2892@pGd7a@include-macro pGd7a@include-macro) (set! pGd7c@include-into-macro (lambda (pG1555@e) (let ((pG1557@t pG1555@e)) (let ((pG1559@ls/false (pGd92@syntax-dispatch pG1557@t '(_ any any)))) (if pG1559@ls/false (apply (lambda (pG155b@id pG155c@filename) (pGd78@do-include pG1555@e pG155b@id pG155c@filename)) pG1559@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1557@t)))))) (set! pG2893@pGd7c@include-into-macro pGd7c@include-into-macro) (set! pGd7e@syntax-rules-macro (lambda (pG155f@e) (let ((pG1561@t pG155f@e)) (let ((pG1563@ls/false (pGd92@syntax-dispatch pG1561@t '(_ each-any . #(each (any any)))))) (if pG1563@ls/false (apply (lambda (pG1565@lits pG1566@pat* pG1567@tmp*) (begin (pGd98@verify-literals pG1565@lits pG155f@e) (pGd48@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons pG1565@lits (map (lambda (pG156b@pat pG156c@tmp) (let ((pG156f@t pG156b@pat)) (let ((pG1571@ls/false (pGd92@syntax-dispatch pG156f@t '(_ . any)))) (if pG1571@ls/false (apply (lambda (pG1573@rest) (list (cons 'g pG1573@rest) (list 'syntax pG156c@tmp))) pG1571@ls/false) (let ((pG1575@t pG156f@t)) (let ((pG1577@ls/false (pGd92@syntax-dispatch pG1575@t '_))) (if pG1577@ls/false (apply (lambda () (pGe72@syntax-violation '#f '"invalid syntax-rules pattern" pG155f@e pG156b@pat)) pG1577@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1575@t)))))))) pG1566@pat* pG1567@tmp*)))))))) pG1563@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1561@t)))))) (set! pG2894@pGd7e@syntax-rules-macro pGd7e@syntax-rules-macro) (set! pGd80@quasiquote-macro (letrec* ((pG157a@datum (lambda (pG167b@x) (list (pGd1a@scheme-stx 'quote) (pGb73@mkstx pG167b@x pGb0f@top-mark* '() '())))) (pG1596@quasicons* (lambda (pG1673@x pG1674@y) (let pG1679@f ((pG1677@x pG1673@x)) (if (null? pG1677@x) pG1674@y (pG1598@quasicons (car pG1677@x) (pG1679@f (cdr pG1677@x))))))) (pG1598@quasicons (lambda (pG164d@x pG164e@y) (let ((pG1651@t pG164e@y)) (let ((pG1653@ls/false (pGd92@syntax-dispatch pG1651@t '(#(scheme-id quote) any)))) (if pG1653@ls/false (apply (lambda (pG1655@dy) (let ((pG1657@t pG164d@x)) (let ((pG1659@ls/false (pGd92@syntax-dispatch pG1657@t '(#(scheme-id quote) any)))) (if pG1659@ls/false (apply (lambda (pG165b@dx) (list (pGd1a@scheme-stx 'quote) (cons pG165b@dx pG1655@dy))) pG1659@ls/false) (let ((pG165d@t pG1657@t)) (let ((pG165f@ls/false (pGd92@syntax-dispatch pG165d@t '_))) (if pG165f@ls/false (apply (lambda () (let ((pG1661@t pG1655@dy)) (let ((pG1663@ls/false (pGd92@syntax-dispatch pG1661@t '()))) (if pG1663@ls/false (apply (lambda () (list (pGd1a@scheme-stx 'list) pG164d@x)) pG1663@ls/false) (let ((pG1665@t pG1661@t)) (let ((pG1667@ls/false (pGd92@syntax-dispatch pG1665@t '_))) (if pG1667@ls/false (apply (lambda () (list (pGd1a@scheme-stx 'cons) pG164d@x pG164e@y)) pG1667@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1665@t)))))))) pG165f@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG165d@t)))))))) pG1653@ls/false) (let ((pG1669@t pG1651@t)) (let ((pG166b@ls/false (pGd92@syntax-dispatch pG1669@t '(#(scheme-id list) . each-any)))) (if pG166b@ls/false (apply (lambda (pG166d@stuff) (cons* (pGd1a@scheme-stx 'list) pG164d@x pG166d@stuff)) pG166b@ls/false) (let ((pG166f@t pG1669@t)) (let ((pG1671@ls/false (pGd92@syntax-dispatch pG166f@t '_))) (if pG1671@ls/false (apply (lambda () (list (pGd1a@scheme-stx 'cons) pG164d@x pG164e@y)) pG1671@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG166f@t)))))))))))) (pG159a@quasiappend (lambda (pG1633@x pG1634@y) (let ((pG1637@ls (let pG163b@f ((pG1639@x pG1633@x)) (if (null? pG1639@x) (let ((pG163d@t pG1634@y)) (let ((pG163f@ls/false (pGd92@syntax-dispatch pG163d@t '(#(scheme-id quote) ())))) (if pG163f@ls/false (apply (lambda () '()) pG163f@ls/false) (let ((pG1641@t pG163d@t)) (let ((pG1643@ls/false (pGd92@syntax-dispatch pG1641@t '_))) (if pG1643@ls/false (apply (lambda () (list pG1634@y)) pG1643@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1641@t))))))) (let ((pG1645@t (car pG1639@x))) (let ((pG1647@ls/false (pGd92@syntax-dispatch pG1645@t '(#(scheme-id quote) ())))) (if pG1647@ls/false (apply (lambda () (pG163b@f (cdr pG1639@x))) pG1647@ls/false) (let ((pG1649@t pG1645@t)) (let ((pG164b@ls/false (pGd92@syntax-dispatch pG1649@t '_))) (if pG164b@ls/false (apply (lambda () (cons (car pG1639@x) (pG163b@f (cdr pG1639@x)))) pG164b@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1649@t))))))))))) (if (null? pG1637@ls) (list (pGd1a@scheme-stx 'quote) '()) (if (null? (cdr pG1637@ls)) (car pG1637@ls) (cons* (pGd1a@scheme-stx 'append) pG1637@ls)))))) (pG159c@quasivector (lambda (pG1601@x) (let ((pG1603@pat-x pG1601@x)) (let ((pG1605@t pG1603@pat-x)) (let ((pG1607@ls/false (pGd92@syntax-dispatch pG1605@t '(#(scheme-id quote) each-any)))) (if pG1607@ls/false (apply (lambda (pG1609@x*) (list (pGd1a@scheme-stx 'quote) (list->vector pG1609@x*))) pG1607@ls/false) (let ((pG160b@t pG1605@t)) (let ((pG160d@ls/false (pGd92@syntax-dispatch pG160b@t '_))) (if pG160d@ls/false (apply (lambda () (let pG1615@f ((pG160f@x pG1601@x) (pG1610@k (lambda (pG1613@ls) (cons* (pGd1a@scheme-stx 'vector) pG1613@ls)))) (let ((pG1617@t pG160f@x)) (let ((pG1619@ls/false (pGd92@syntax-dispatch pG1617@t '(#(scheme-id quote) each-any)))) (if pG1619@ls/false (apply (lambda (pG161b@x*) (pG1610@k (map (lambda (pG161d@x) (list (pGd1a@scheme-stx 'quote) pG161d@x)) pG161b@x*))) pG1619@ls/false) (let ((pG161f@t pG1617@t)) (let ((pG1621@ls/false (pGd92@syntax-dispatch pG161f@t '(#(scheme-id list) . each-any)))) (if pG1621@ls/false (apply (lambda (pG1623@x*) (pG1610@k pG1623@x*)) pG1621@ls/false) (let ((pG1625@t pG161f@t)) (let ((pG1627@ls/false (pGd92@syntax-dispatch pG1625@t '(#(scheme-id cons) any any)))) (if pG1627@ls/false (apply (lambda (pG1629@x pG162a@y) (pG1615@f pG162a@y (lambda (pG162d@ls) (pG1610@k (cons pG1629@x pG162d@ls))))) pG1627@ls/false) (let ((pG162f@t pG1625@t)) (let ((pG1631@ls/false (pGd92@syntax-dispatch pG162f@t '_))) (if pG1631@ls/false (apply (lambda () (list (pGd1a@scheme-stx 'list->vector) pG1603@pat-x)) pG1631@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG162f@t))))))))))))))) pG160d@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG160b@t)))))))))) (pG159e@vquasi (lambda (pG15df@p pG15e0@lev) (let ((pG15e3@t pG15df@p)) (let ((pG15e5@ls/false (pGd92@syntax-dispatch pG15e3@t '(any . any)))) (if pG15e5@ls/false (apply (lambda (pG15e7@p pG15e8@q) (let ((pG15eb@t pG15e7@p)) (let ((pG15ed@ls/false (pGd92@syntax-dispatch pG15eb@t '(#(scheme-id unquote) . each-any)))) (if pG15ed@ls/false (apply (lambda (pG15ef@p) (if (= pG15e0@lev '0) (pG1596@quasicons* pG15ef@p (pG159e@vquasi pG15e8@q pG15e0@lev)) (pG1598@quasicons (pG1598@quasicons (pG157a@datum 'unquote) (pG15a0@quasi pG15ef@p (- pG15e0@lev '1))) (pG159e@vquasi pG15e8@q pG15e0@lev)))) pG15ed@ls/false) (let ((pG15f1@t pG15eb@t)) (let ((pG15f3@ls/false (pGd92@syntax-dispatch pG15f1@t '(#(scheme-id unquote-splicing) . each-any)))) (if pG15f3@ls/false (apply (lambda (pG15f5@p) (if (= pG15e0@lev '0) (pG159a@quasiappend pG15f5@p (pG159e@vquasi pG15e8@q pG15e0@lev)) (pG1598@quasicons (pG1598@quasicons (pG157a@datum 'unquote-splicing) (pG15a0@quasi pG15f5@p (- pG15e0@lev '1))) (pG159e@vquasi pG15e8@q pG15e0@lev)))) pG15f3@ls/false) (let ((pG15f7@t pG15f1@t)) (let ((pG15f9@ls/false (pGd92@syntax-dispatch pG15f7@t 'any))) (if pG15f9@ls/false (apply (lambda (pG15fb@p) (pG1598@quasicons (pG15a0@quasi pG15fb@p pG15e0@lev) (pG159e@vquasi pG15e8@q pG15e0@lev))) pG15f9@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG15f7@t))))))))))) pG15e5@ls/false) (let ((pG15fd@t pG15e3@t)) (let ((pG15ff@ls/false (pGd92@syntax-dispatch pG15fd@t '()))) (if pG15ff@ls/false (apply (lambda () (list (pGd1a@scheme-stx 'quote) '())) pG15ff@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG15fd@t))))))))) (pG15a0@quasi (lambda (pG15a9@p pG15aa@lev) (let ((pG15ad@t pG15a9@p)) (let ((pG15af@ls/false (pGd92@syntax-dispatch pG15ad@t '(#(scheme-id unquote) any)))) (if pG15af@ls/false (apply (lambda (pG15b1@p) (if (= pG15aa@lev '0) pG15b1@p (pG1598@quasicons (pG157a@datum 'unquote) (pG15a0@quasi (list pG15b1@p) (- pG15aa@lev '1))))) pG15af@ls/false) (let ((pG15b3@t pG15ad@t)) (let ((pG15b5@ls/false (pGd92@syntax-dispatch pG15b3@t '((#(scheme-id unquote) . each-any) . any)))) (if pG15b5@ls/false (apply (lambda (pG15b7@p pG15b8@q) (if (= pG15aa@lev '0) (pG1596@quasicons* pG15b7@p (pG15a0@quasi pG15b8@q pG15aa@lev)) (pG1598@quasicons (pG1598@quasicons (pG157a@datum 'unquote) (pG15a0@quasi pG15b7@p (- pG15aa@lev '1))) (pG15a0@quasi pG15b8@q pG15aa@lev)))) pG15b5@ls/false) (let ((pG15bb@t pG15b3@t)) (let ((pG15bd@ls/false (pGd92@syntax-dispatch pG15bb@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if pG15bd@ls/false (apply (lambda (pG15bf@p pG15c0@q) (if (= pG15aa@lev '0) (pG159a@quasiappend pG15bf@p (pG15a0@quasi pG15c0@q pG15aa@lev)) (pG1598@quasicons (pG1598@quasicons (pG157a@datum 'unquote-splicing) (pG15a0@quasi pG15bf@p (- pG15aa@lev '1))) (pG15a0@quasi pG15c0@q pG15aa@lev)))) pG15bd@ls/false) (let ((pG15c3@t pG15bb@t)) (let ((pG15c5@ls/false (pGd92@syntax-dispatch pG15c3@t '(#(scheme-id quasiquote) any)))) (if pG15c5@ls/false (apply (lambda (pG15c7@p) (pG1598@quasicons (pG157a@datum 'quasiquote) (pG15a0@quasi (list pG15c7@p) (+ pG15aa@lev '1)))) pG15c5@ls/false) (let ((pG15c9@t pG15c3@t)) (let ((pG15cb@ls/false (pGd92@syntax-dispatch pG15c9@t '(any . any)))) (if pG15cb@ls/false (apply (lambda (pG15cd@p pG15ce@q) (pG1598@quasicons (pG15a0@quasi pG15cd@p pG15aa@lev) (pG15a0@quasi pG15ce@q pG15aa@lev))) pG15cb@ls/false) (let ((pG15d1@t pG15c9@t)) (let ((pG15d3@ls/false (pGd92@syntax-dispatch pG15d1@t '#(vector each-any)))) (if (and pG15d3@ls/false (apply (lambda (pG15d5@x) (not (pGb57@stx? pG15d5@x))) pG15d3@ls/false)) (apply (lambda (pG15d7@x) (pG159c@quasivector (pG159e@vquasi pG15d7@x pG15aa@lev))) pG15d3@ls/false) (let ((pG15d9@t pG15d1@t)) (let ((pG15db@ls/false (pGd92@syntax-dispatch pG15d9@t 'any))) (if pG15db@ls/false (apply (lambda (pG15dd@p) (list (pGd1a@scheme-stx 'quote) pG15dd@p)) pG15db@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG15d9@t))))))))))))))))))))))))) (lambda (pG15a1@x) (let ((pG15a3@t pG15a1@x)) (let ((pG15a5@ls/false (pGd92@syntax-dispatch pG15a3@t '(_ any)))) (if pG15a5@ls/false (apply (lambda (pG15a7@e) (pG15a0@quasi pG15a7@e '0)) pG15a5@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG15a3@t))))))) (set! pG2895@pGd80@quasiquote-macro pGd80@quasiquote-macro) (set! pGd82@quasisyntax-macro (letrec* ((pG167e@quasi (lambda (pG1699@p pG169a@lev) (let ((pG169d@t pG1699@p)) (let ((pG169f@ls/false (pGd92@syntax-dispatch pG169d@t '(#(scheme-id unsyntax) any)))) (if pG169f@ls/false (apply (lambda (pG16a1@p) (if (= pG169a@lev '0) (let ((pG16a3@g (gensym))) (values (list pG16a3@g) (list pG16a1@p) pG16a3@g)) (call-with-values (lambda () (pG167e@quasi pG16a1@p (- pG169a@lev '1))) (lambda (pG16ab@pG16a6 pG16ac@pG16a8 pG16ad@pG16aa) (let ((pG16b1@p pG16ad@pG16aa) (pG16b2@rhs* pG16ac@pG16a8) (pG16b3@lhs* pG16ab@pG16a6)) (values pG16b3@lhs* pG16b2@rhs* (list 'unsyntax pG16b1@p))))))) pG169f@ls/false) (let ((pG16b7@t pG169d@t)) (let ((pG16b9@ls/false (pGd92@syntax-dispatch pG16b7@t '#(scheme-id unsyntax)))) (if (and pG16b9@ls/false (apply (lambda () (= pG169a@lev '0)) pG16b9@ls/false)) (apply (lambda () (pGe72@syntax-violation '#f '"incorrect use of unsyntax" pG1699@p)) pG16b9@ls/false) (let ((pG16bb@t pG16b7@t)) (let ((pG16bd@ls/false (pGd92@syntax-dispatch pG16bb@t '((#(scheme-id unsyntax) . each-any) . any)))) (if pG16bd@ls/false (apply (lambda (pG16bf@p* pG16c0@q) (call-with-values (lambda () (pG167e@quasi pG16c0@q pG169a@lev)) (lambda (pG16c9@pG16c4 pG16ca@pG16c6 pG16cb@pG16c8) (let ((pG16cf@q pG16cb@pG16c8) (pG16d0@rhs* pG16ca@pG16c6) (pG16d1@lhs* pG16c9@pG16c4)) (if (= pG169a@lev '0) (let ((pG16d5@g* (map (lambda (pG16d7@x) (gensym)) pG16bf@p*))) (values (append pG16d5@g* pG16d1@lhs*) (append pG16bf@p* pG16d0@rhs*) (append pG16d5@g* pG16cf@q))) (call-with-values (lambda () (pG167e@quasi pG16bf@p* (- pG169a@lev '1))) (lambda (pG16df@pG16da pG16e0@pG16dc pG16e1@pG16de) (let ((pG16e5@p* pG16e1@pG16de) (pG16e6@rhs2* pG16e0@pG16dc) (pG16e7@lhs2* pG16df@pG16da)) (values (append pG16e7@lhs2* pG16d1@lhs*) (append pG16e6@rhs2* pG16d0@rhs*) (cons (cons 'unsyntax pG16e5@p*) pG16cf@q)))))))))) pG16bd@ls/false) (let ((pG16eb@t pG16bb@t)) (let ((pG16ed@ls/false (pGd92@syntax-dispatch pG16eb@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if pG16ed@ls/false (apply (lambda (pG16ef@p* pG16f0@q) (call-with-values (lambda () (pG167e@quasi pG16f0@q pG169a@lev)) (lambda (pG16f9@pG16f4 pG16fa@pG16f6 pG16fb@pG16f8) (let ((pG16ff@q pG16fb@pG16f8) (pG1700@rhs* pG16fa@pG16f6) (pG1701@lhs* pG16f9@pG16f4)) (if (= pG169a@lev '0) (let ((pG1705@g* (map (lambda (pG1707@x) (gensym)) pG16ef@p*))) (values (append (map (lambda (pG1709@g) (cons pG1709@g '(...))) pG1705@g*) pG1701@lhs*) (append pG16ef@p* pG1700@rhs*) (append (apply append (map (lambda (pG170b@g) (cons pG170b@g '(...))) pG1705@g*)) pG16ff@q))) (call-with-values (lambda () (pG167e@quasi pG16ef@p* (- pG169a@lev '1))) (lambda (pG1713@pG170e pG1714@pG1710 pG1715@pG1712) (let ((pG1719@p* pG1715@pG1712) (pG171a@rhs2* pG1714@pG1710) (pG171b@lhs2* pG1713@pG170e)) (values (append pG171b@lhs2* pG1701@lhs*) (append pG171a@rhs2* pG1700@rhs*) (cons (cons 'unsyntax-splicing pG1719@p*) pG16ff@q)))))))))) pG16ed@ls/false) (let ((pG171f@t pG16eb@t)) (let ((pG1721@ls/false (pGd92@syntax-dispatch pG171f@t '#(scheme-id unsyntax-splicing)))) (if (and pG1721@ls/false (apply (lambda () (= pG169a@lev '0)) pG1721@ls/false)) (apply (lambda () (pGe72@syntax-violation '#f '"incorrect use of unsyntax-splicing" pG1699@p)) pG1721@ls/false) (let ((pG1723@t pG171f@t)) (let ((pG1725@ls/false (pGd92@syntax-dispatch pG1723@t '(#(scheme-id quasisyntax) any)))) (if pG1725@ls/false (apply (lambda (pG1727@p) (call-with-values (lambda () (pG167e@quasi pG1727@p (+ pG169a@lev '1))) (lambda (pG172f@pG172a pG1730@pG172c pG1731@pG172e) (let ((pG1735@p pG1731@pG172e) (pG1736@rhs* pG1730@pG172c) (pG1737@lhs* pG172f@pG172a)) (values pG1737@lhs* pG1736@rhs* (list 'quasisyntax pG1735@p)))))) pG1725@ls/false) (let ((pG173b@t pG1723@t)) (let ((pG173d@ls/false (pGd92@syntax-dispatch pG173b@t '(any . any)))) (if pG173d@ls/false (apply (lambda (pG173f@p pG1740@q) (call-with-values (lambda () (pG167e@quasi pG173f@p pG169a@lev)) (lambda (pG174f@pG1744 pG1750@pG1746 pG1751@pG1748) (call-with-values (lambda () (pG167e@quasi pG1740@q pG169a@lev)) (lambda (pG1755@pG174a pG1756@pG174c pG1757@pG174e) (let ((pG175b@q pG1757@pG174e) (pG175c@rhs2* pG1756@pG174c) (pG175d@lhs2* pG1755@pG174a) (pG175e@p pG1751@pG1748) (pG175f@rhs* pG1750@pG1746) (pG1760@lhs* pG174f@pG1744)) (values (append pG175d@lhs2* pG1760@lhs*) (append pG175c@rhs2* pG175f@rhs*) (cons pG175e@p pG175b@q)))))))) pG173d@ls/false) (let ((pG1767@t pG173b@t)) (let ((pG1769@ls/false (pGd92@syntax-dispatch pG1767@t '#(vector each-any)))) (if pG1769@ls/false (apply (lambda (pG176b@x*) (call-with-values (lambda () (pG167e@quasi pG176b@x* pG169a@lev)) (lambda (pG1773@pG176e pG1774@pG1770 pG1775@pG1772) (let ((pG1779@x* pG1775@pG1772) (pG177a@rhs* pG1774@pG1770) (pG177b@lhs* pG1773@pG176e)) (values pG177b@lhs* pG177a@rhs* (list->vector pG1779@x*)))))) pG1769@ls/false) (let ((pG177f@t pG1767@t)) (let ((pG1781@ls/false (pGd92@syntax-dispatch pG177f@t '_))) (if pG1781@ls/false (apply (lambda () (values '() '() pG1699@p)) pG1781@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG177f@t))))))))))))))))))))))))))))))) (lambda (pG167f@x) (let ((pG1681@t pG167f@x)) (let ((pG1683@ls/false (pGd92@syntax-dispatch pG1681@t '(_ any)))) (if pG1683@ls/false (apply (lambda (pG1685@e) (call-with-values (lambda () (pG167e@quasi pG1685@e '0)) (lambda (pG168d@pG1688 pG168e@pG168a pG168f@pG168c) (let ((pG1693@v pG168f@pG168c) (pG1694@rhs* pG168e@pG168a) (pG1695@lhs* pG168d@pG1688)) (pGd48@bless (list 'syntax-case (cons 'list pG1694@rhs*) '() (list pG1695@lhs* (list 'syntax pG1693@v)))))))) pG1683@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1681@t))))))) (set! pG2896@pGd82@quasisyntax-macro pGd82@quasisyntax-macro) (set! pGd84@define-struct-macro (lambda (pG1783@stx) (pGe72@syntax-violation '#f '"define-struct not supported" pG1783@stx))) (set! pG2897@pGd84@define-struct-macro pGd84@define-struct-macro) (set! pGd86@define-record-type-macro (lambda (pG1785@x) (letrec* ((pG1788@id (lambda (pG197b@ctxt . pG197d@str*) (pGe76@datum->syntax pG197b@ctxt (string->symbol (apply string-append (map (lambda (pG197f@x) (if (symbol? pG197f@x) (symbol->string pG197f@x) (if (string? pG197f@x) pG197f@x (assertion-violation 'define-record-type '"BUG")))) pG197d@str*)))))) (pG178a@get-record-name (lambda (pG1969@spec) (let ((pG196b@t pG1969@spec)) (let ((pG196d@ls/false (pGd92@syntax-dispatch pG196b@t '(any any any)))) (if pG196d@ls/false (apply (lambda (pG196f@foo pG1970@make-foo pG1971@foo?) pG196f@foo) pG196d@ls/false) (let ((pG1975@t pG196b@t)) (let ((pG1977@ls/false (pGd92@syntax-dispatch pG1975@t 'any))) (if pG1977@ls/false (apply (lambda (pG1979@foo) pG1979@foo) pG1977@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1975@t))))))))) (pG178c@get-record-constructor-name (lambda (pG1955@spec) (let ((pG1957@t pG1955@spec)) (let ((pG1959@ls/false (pGd92@syntax-dispatch pG1957@t '(any any any)))) (if pG1959@ls/false (apply (lambda (pG195b@foo pG195c@make-foo pG195d@foo?) pG195c@make-foo) pG1959@ls/false) (let ((pG1961@t pG1957@t)) (let ((pG1963@ls/false (pGd92@syntax-dispatch pG1961@t 'any))) (if (and pG1963@ls/false (apply (lambda (pG1965@foo) (pGb8b@id? pG1965@foo)) pG1963@ls/false)) (apply (lambda (pG1967@foo) (pG1788@id pG1967@foo '"make-" (pGb9f@stx->datum pG1967@foo))) pG1963@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1961@t))))))))) (pG178e@get-record-predicate-name (lambda (pG1941@spec) (let ((pG1943@t pG1941@spec)) (let ((pG1945@ls/false (pGd92@syntax-dispatch pG1943@t '(any any any)))) (if pG1945@ls/false (apply (lambda (pG1947@foo pG1948@make-foo pG1949@foo?) pG1949@foo?) pG1945@ls/false) (let ((pG194d@t pG1943@t)) (let ((pG194f@ls/false (pGd92@syntax-dispatch pG194d@t 'any))) (if (and pG194f@ls/false (apply (lambda (pG1951@foo) (pGb8b@id? pG1951@foo)) pG194f@ls/false)) (apply (lambda (pG1953@foo) (pG1788@id pG1953@foo (pGb9f@stx->datum pG1953@foo) '"?")) pG194f@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG194d@t))))))))) (pG1790@get-clause (lambda (pG192f@id pG1930@ls) (let ((pG1933@t pG1930@ls)) (let ((pG1935@ls/false (pGd92@syntax-dispatch pG1933@t '()))) (if pG1935@ls/false (apply (lambda () '#f) pG1935@ls/false) (let ((pG1937@t pG1933@t)) (let ((pG1939@ls/false (pGd92@syntax-dispatch pG1937@t '((any . any) . any)))) (if pG1939@ls/false (apply (lambda (pG193b@x pG193c@rest pG193d@ls) (if (pGb91@free-id=? (pGd48@bless pG192f@id) pG193b@x) (cons pG193b@x pG193c@rest) (pG1790@get-clause pG192f@id pG193d@ls))) pG1939@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1937@t))))))))) (pG1792@foo-rtd-code (lambda (pG18dd@name pG18de@clause* pG18df@parent-rtd-code) (letrec* ((pG18e4@convert-field-spec* (lambda (pG1915@ls) (list->vector (map (lambda (pG1917@x) (let ((pG1919@t pG1917@x)) (let ((pG191b@ls/false (pGd92@syntax-dispatch pG1919@t '(#(scheme-id mutable) any . any)))) (if pG191b@ls/false (apply (lambda (pG191d@name pG191e@rest) (list 'mutable pG191d@name)) pG191b@ls/false) (let ((pG1921@t pG1919@t)) (let ((pG1923@ls/false (pGd92@syntax-dispatch pG1921@t '(#(scheme-id immutable) any . any)))) (if pG1923@ls/false (apply (lambda (pG1925@name pG1926@rest) (list 'immutable pG1925@name)) pG1923@ls/false) (let ((pG1929@t pG1921@t)) (let ((pG192b@ls/false (pGd92@syntax-dispatch pG1929@t 'any))) (if pG192b@ls/false (apply (lambda (pG192d@name) (list 'immutable pG192d@name)) pG192b@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1929@t))))))))))) pG1915@ls))))) (let ((pG18e5@uid-code (let ((pG18ed@t (pG1790@get-clause 'nongenerative pG18de@clause*))) (let ((pG18ef@ls/false (pGd92@syntax-dispatch pG18ed@t '(_)))) (if pG18ef@ls/false (apply (lambda () (list 'quote (gensym))) pG18ef@ls/false) (let ((pG18f1@t pG18ed@t)) (let ((pG18f3@ls/false (pGd92@syntax-dispatch pG18f1@t '(_ any)))) (if pG18f3@ls/false (apply (lambda (pG18f5@uid) (list 'quote pG18f5@uid)) pG18f3@ls/false) (let ((pG18f7@t pG18f1@t)) (let ((pG18f9@ls/false (pGd92@syntax-dispatch pG18f7@t '_))) (if pG18f9@ls/false (apply (lambda () '#f) pG18f9@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG18f7@t))))))))))) (pG18e6@sealed? (let ((pG18fb@t (pG1790@get-clause 'sealed pG18de@clause*))) (let ((pG18fd@ls/false (pGd92@syntax-dispatch pG18fb@t '(_ #(atom #t))))) (if pG18fd@ls/false (apply (lambda () '#t) pG18fd@ls/false) (let ((pG18ff@t pG18fb@t)) (let ((pG1901@ls/false (pGd92@syntax-dispatch pG18ff@t '_))) (if pG1901@ls/false (apply (lambda () '#f) pG1901@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG18ff@t)))))))) (pG18e7@opaque? (let ((pG1903@t (pG1790@get-clause 'opaque pG18de@clause*))) (let ((pG1905@ls/false (pGd92@syntax-dispatch pG1903@t '(_ #(atom #t))))) (if pG1905@ls/false (apply (lambda () '#t) pG1905@ls/false) (let ((pG1907@t pG1903@t)) (let ((pG1909@ls/false (pGd92@syntax-dispatch pG1907@t '_))) (if pG1909@ls/false (apply (lambda () '#f) pG1909@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1907@t)))))))) (pG18e8@fields (let ((pG190b@t (pG1790@get-clause 'fields pG18de@clause*))) (let ((pG190d@ls/false (pGd92@syntax-dispatch pG190b@t '(_ . each-any)))) (if pG190d@ls/false (apply (lambda (pG190f@field-spec*) (list 'quote (pG18e4@convert-field-spec* pG190f@field-spec*))) pG190d@ls/false) (let ((pG1911@t pG190b@t)) (let ((pG1913@ls/false (pGd92@syntax-dispatch pG1911@t '_))) (if pG1913@ls/false (apply (lambda () ''#()) pG1913@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1911@t))))))))) (pGd48@bless (list 'make-record-type-descriptor (list 'quote pG18dd@name) pG18df@parent-rtd-code pG18e5@uid-code pG18e6@sealed? pG18e7@opaque? pG18e8@fields)))))) (pG1794@parent-rtd-code (lambda (pG18c5@clause*) (let ((pG18c7@t (pG1790@get-clause 'parent pG18c5@clause*))) (let ((pG18c9@ls/false (pGd92@syntax-dispatch pG18c7@t '(_ any)))) (if pG18c9@ls/false (apply (lambda (pG18cb@name) (list 'record-type-descriptor pG18cb@name)) pG18c9@ls/false) (let ((pG18cd@t pG18c7@t)) (let ((pG18cf@ls/false (pGd92@syntax-dispatch pG18cd@t '#(atom #f)))) (if pG18cf@ls/false (apply (lambda () (let ((pG18d1@t (pG1790@get-clause 'parent-rtd pG18c5@clause*))) (let ((pG18d3@ls/false (pGd92@syntax-dispatch pG18d1@t '(_ any any)))) (if pG18d3@ls/false (apply (lambda (pG18d5@rtd pG18d6@rcd) pG18d5@rtd) pG18d3@ls/false) (let ((pG18d9@t pG18d1@t)) (let ((pG18db@ls/false (pGd92@syntax-dispatch pG18d9@t '#(atom #f)))) (if pG18db@ls/false (apply (lambda () '#f) pG18db@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG18d9@t)))))))) pG18cf@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG18cd@t))))))))) (pG1796@parent-rcd-code (lambda (pG18ad@clause*) (let ((pG18af@t (pG1790@get-clause 'parent pG18ad@clause*))) (let ((pG18b1@ls/false (pGd92@syntax-dispatch pG18af@t '(_ any)))) (if pG18b1@ls/false (apply (lambda (pG18b3@name) (list 'record-constructor-descriptor pG18b3@name)) pG18b1@ls/false) (let ((pG18b5@t pG18af@t)) (let ((pG18b7@ls/false (pGd92@syntax-dispatch pG18b5@t '#(atom #f)))) (if pG18b7@ls/false (apply (lambda () (let ((pG18b9@t (pG1790@get-clause 'parent-rtd pG18ad@clause*))) (let ((pG18bb@ls/false (pGd92@syntax-dispatch pG18b9@t '(_ any any)))) (if pG18bb@ls/false (apply (lambda (pG18bd@rtd pG18be@rcd) pG18be@rcd) pG18bb@ls/false) (let ((pG18c1@t pG18b9@t)) (let ((pG18c3@ls/false (pGd92@syntax-dispatch pG18c1@t '#(atom #f)))) (if pG18c3@ls/false (apply (lambda () '#f) pG18c3@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG18c1@t)))))))) pG18b7@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG18b5@t))))))))) (pG1798@foo-rcd-code (lambda (pG18a5@clause* pG18a6@foo-rtd pG18a7@protocol pG18a8@parent-rcd-code) (list 'make-record-constructor-descriptor pG18a6@foo-rtd pG18a8@parent-rcd-code pG18a7@protocol))) (pG179a@get-protocol-code (lambda (pG1899@clause*) (let ((pG189b@t (pG1790@get-clause 'protocol pG1899@clause*))) (let ((pG189d@ls/false (pGd92@syntax-dispatch pG189b@t '(_ any)))) (if pG189d@ls/false (apply (lambda (pG189f@expr) pG189f@expr) pG189d@ls/false) (let ((pG18a1@t pG189b@t)) (let ((pG18a3@ls/false (pGd92@syntax-dispatch pG18a1@t '_))) (if pG18a3@ls/false (apply (lambda () '#f) pG18a3@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG18a1@t))))))))) (pG179c@get-fields (lambda (pG1887@clause*) (let ((pG1889@t pG1887@clause*)) (let ((pG188b@ls/false (pGd92@syntax-dispatch pG1889@t '()))) (if pG188b@ls/false (apply (lambda () '()) pG188b@ls/false) (let ((pG188d@t pG1889@t)) (let ((pG188f@ls/false (pGd92@syntax-dispatch pG188d@t '((#(scheme-id fields) . each-any) . _)))) (if pG188f@ls/false (apply (lambda (pG1891@f*) pG1891@f*) pG188f@ls/false) (let ((pG1893@t pG188d@t)) (let ((pG1895@ls/false (pGd92@syntax-dispatch pG1893@t '(_ . any)))) (if pG1895@ls/false (apply (lambda (pG1897@rest) (pG179c@get-fields pG1897@rest)) pG1895@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1893@t)))))))))))) (pG179e@get-mutator-indices (lambda (pG186f@fields) (let pG1875@f ((pG1871@fields pG186f@fields) (pG1872@i '0)) (let ((pG1877@t pG1871@fields)) (let ((pG1879@ls/false (pGd92@syntax-dispatch pG1877@t '()))) (if pG1879@ls/false (apply (lambda () '()) pG1879@ls/false) (let ((pG187b@t pG1877@t)) (let ((pG187d@ls/false (pGd92@syntax-dispatch pG187b@t '((#(scheme-id mutable) . _) . any)))) (if pG187d@ls/false (apply (lambda (pG187f@rest) (cons pG1872@i (pG1875@f pG187f@rest (+ pG1872@i '1)))) pG187d@ls/false) (let ((pG1881@t pG187b@t)) (let ((pG1883@ls/false (pGd92@syntax-dispatch pG1881@t '(_ . any)))) (if pG1883@ls/false (apply (lambda (pG1885@rest) (pG1875@f pG1885@rest (+ pG1872@i '1))) pG1883@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1881@t))))))))))))) (pG17a0@get-mutators (lambda (pG1845@foo pG1846@fields) (letrec* ((pG184a@gen-name (lambda (pG186d@x) (pGe76@datum->syntax pG1845@foo (string->symbol (string-append (symbol->string (pGe78@syntax->datum pG1845@foo)) '"-" (symbol->string (pGe78@syntax->datum pG186d@x)) '"-set!")))))) (let pG184d@f ((pG184b@fields pG1846@fields)) (let ((pG184f@t pG184b@fields)) (let ((pG1851@ls/false (pGd92@syntax-dispatch pG184f@t '()))) (if pG1851@ls/false (apply (lambda () '()) pG1851@ls/false) (let ((pG1853@t pG184f@t)) (let ((pG1855@ls/false (pGd92@syntax-dispatch pG1853@t '((#(scheme-id mutable) any any any) . any)))) (if pG1855@ls/false (apply (lambda (pG1857@name pG1858@accessor pG1859@mutator pG185a@rest) (cons pG1859@mutator (pG184d@f pG185a@rest))) pG1855@ls/false) (let ((pG185f@t pG1853@t)) (let ((pG1861@ls/false (pGd92@syntax-dispatch pG185f@t '((#(scheme-id mutable) any) . any)))) (if pG1861@ls/false (apply (lambda (pG1863@name pG1864@rest) (cons (pG184a@gen-name pG1863@name) (pG184d@f pG1864@rest))) pG1861@ls/false) (let ((pG1867@t pG185f@t)) (let ((pG1869@ls/false (pGd92@syntax-dispatch pG1867@t '(_ . any)))) (if pG1869@ls/false (apply (lambda (pG186b@rest) (pG184d@f pG186b@rest)) pG1869@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1867@t))))))))))))))))) (pG17a2@get-accessors (lambda (pG1801@foo pG1802@fields) (letrec* ((pG1806@gen-name (lambda (pG1843@x) (pGe76@datum->syntax pG1801@foo (string->symbol (string-append (symbol->string (pGe78@syntax->datum pG1801@foo)) '"-" (symbol->string (pGe78@syntax->datum pG1843@x)))))))) (map (lambda (pG1807@field) (let ((pG1809@t pG1807@field)) (let ((pG180b@ls/false (pGd92@syntax-dispatch pG1809@t '(#(scheme-id mutable) any any any)))) (if (and pG180b@ls/false (apply (lambda (pG180d@name pG180e@accessor pG180f@mutator) (pGb8b@id? pG180e@accessor)) pG180b@ls/false)) (apply (lambda (pG1813@name pG1814@accessor pG1815@mutator) pG1814@accessor) pG180b@ls/false) (let ((pG1819@t pG1809@t)) (let ((pG181b@ls/false (pGd92@syntax-dispatch pG1819@t '(#(scheme-id immutable) any any)))) (if (and pG181b@ls/false (apply (lambda (pG181d@name pG181e@accessor) (pGb8b@id? pG181e@accessor)) pG181b@ls/false)) (apply (lambda (pG1821@name pG1822@accessor) pG1822@accessor) pG181b@ls/false) (let ((pG1825@t pG1819@t)) (let ((pG1827@ls/false (pGd92@syntax-dispatch pG1825@t '(#(scheme-id mutable) any)))) (if (and pG1827@ls/false (apply (lambda (pG1829@name) (pGb8b@id? pG1829@name)) pG1827@ls/false)) (apply (lambda (pG182b@name) (pG1806@gen-name pG182b@name)) pG1827@ls/false) (let ((pG182d@t pG1825@t)) (let ((pG182f@ls/false (pGd92@syntax-dispatch pG182d@t '(#(scheme-id immutable) any)))) (if (and pG182f@ls/false (apply (lambda (pG1831@name) (pGb8b@id? pG1831@name)) pG182f@ls/false)) (apply (lambda (pG1833@name) (pG1806@gen-name pG1833@name)) pG182f@ls/false) (let ((pG1835@t pG182d@t)) (let ((pG1837@ls/false (pGd92@syntax-dispatch pG1835@t 'any))) (if (and pG1837@ls/false (apply (lambda (pG1839@name) (pGb8b@id? pG1839@name)) pG1837@ls/false)) (apply (lambda (pG183b@name) (pG1806@gen-name pG183b@name)) pG1837@ls/false) (let ((pG183d@t pG1835@t)) (let ((pG183f@ls/false (pGd92@syntax-dispatch pG183d@t 'any))) (if pG183f@ls/false (apply (lambda (pG1841@others) (pGe72@syntax-violation '#f '"invalid field spec" pG1807@field)) pG183f@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG183d@t)))))))))))))))))))) pG1802@fields)))) (pG17a4@enumerate (lambda (pG17f9@ls) (let pG17ff@f ((pG17fb@ls pG17f9@ls) (pG17fc@i '0)) (if (null? pG17fb@ls) '() (cons pG17fc@i (pG17ff@f (cdr pG17fb@ls) (+ pG17fc@i '1))))))) (pG17a6@do-define-record (lambda (pG17d1@namespec pG17d2@clause*) (let ((pG17d5@foo (pG178a@get-record-name pG17d1@namespec))) (let ((pG17d7@foo-rtd (gensym))) (let ((pG17d9@foo-rcd (gensym))) (let ((pG17db@protocol (gensym))) (let ((pG17dd@make-foo (pG178c@get-record-constructor-name pG17d1@namespec))) (let ((pG17df@fields (pG179c@get-fields pG17d2@clause*))) (let ((pG17e1@idx* (pG17a4@enumerate pG17df@fields))) (let ((pG17e3@foo-x* (pG17a2@get-accessors pG17d5@foo pG17df@fields))) (let ((pG17e5@set-foo-x!* (pG17a0@get-mutators pG17d5@foo pG17df@fields))) (let ((pG17e7@set-foo-idx* (pG179e@get-mutator-indices pG17df@fields))) (let ((pG17e9@foo? (pG178e@get-record-predicate-name pG17d1@namespec))) (let ((pG17eb@foo-rtd-code (pG1792@foo-rtd-code pG17d5@foo pG17d2@clause* (pG1794@parent-rtd-code pG17d2@clause*)))) (let ((pG17ed@foo-rcd-code (pG1798@foo-rcd-code pG17d2@clause* pG17d7@foo-rtd pG17db@protocol (pG1796@parent-rcd-code pG17d2@clause*)))) (let ((pG17ef@protocol-code (pG179a@get-protocol-code pG17d2@clause*))) (pGd48@bless (cons 'begin (cons (list 'define pG17d7@foo-rtd pG17eb@foo-rtd-code) (cons (list 'define pG17db@protocol pG17ef@protocol-code) (cons (list 'define pG17d9@foo-rcd pG17ed@foo-rcd-code) (cons (list 'define-syntax pG17d5@foo (list 'list ''$rtd (list 'syntax pG17d7@foo-rtd) (list 'syntax pG17d9@foo-rcd))) (cons (list 'define pG17e9@foo? (list 'record-predicate pG17d7@foo-rtd)) (cons (list 'define pG17dd@make-foo (list 'record-constructor pG17d9@foo-rcd)) (append (map (lambda (pG17f1@foo-x pG17f2@idx) (list 'define pG17f1@foo-x (list 'record-accessor pG17d7@foo-rtd pG17f2@idx))) pG17e3@foo-x* pG17e1@idx*) (map (lambda (pG17f5@set-foo-x! pG17f6@idx) (list 'define pG17f5@set-foo-x! (list 'record-mutator pG17d7@foo-rtd pG17f6@idx))) pG17e5@set-foo-x!* pG17e7@set-foo-idx*)))))))))))))))))))))))))) (pG17a8@verify-clauses (lambda (pG17b1@x pG17b2@cls*) (letrec* ((pG17b6@valid-kwds (map pGd48@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (pG17b8@free-id-member? (lambda (pG17cd@x pG17ce@ls) (and (pair? pG17ce@ls) (or (pGb91@free-id=? pG17cd@x (car pG17ce@ls)) (pG17b8@free-id-member? pG17cd@x (cdr pG17ce@ls))))))) (let pG17bd@f ((pG17b9@cls* pG17b2@cls*) (pG17ba@seen* '())) (if (not (null? pG17b9@cls*)) (let ((pG17bf@t (car pG17b9@cls*))) (let ((pG17c1@ls/false (pGd92@syntax-dispatch pG17bf@t '(any . any)))) (if pG17c1@ls/false (apply (lambda (pG17c3@kwd pG17c4@rest) (if (or (not (pGb8b@id? pG17c3@kwd)) (not (pG17b8@free-id-member? pG17c3@kwd pG17b6@valid-kwds))) (pGe72@syntax-violation '#f '"not a valid define-record-type keyword" pG17c3@kwd) (if (pGb97@bound-id-member? pG17c3@kwd pG17ba@seen*) (pGe72@syntax-violation '#f '"duplicate use of keyword " pG17b1@x pG17c3@kwd) (pG17bd@f (cdr pG17b9@cls*) (cons pG17c3@kwd pG17ba@seen*))))) pG17c1@ls/false) (let ((pG17c7@t pG17bf@t)) (let ((pG17c9@ls/false (pGd92@syntax-dispatch pG17c7@t 'any))) (if pG17c9@ls/false (apply (lambda (pG17cb@cls) (pGe72@syntax-violation '#f '"malformed define-record-type clause" pG17cb@cls)) pG17c9@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG17c7@t))))))) (void))))))) (let ((pG17a9@t pG1785@x)) (let ((pG17ab@ls/false (pGd92@syntax-dispatch pG17a9@t '(_ any . each-any)))) (if pG17ab@ls/false (apply (lambda (pG17ad@namespec pG17ae@clause*) (begin (pG17a8@verify-clauses pG1785@x pG17ae@clause*) (pG17a6@do-define-record pG17ad@namespec pG17ae@clause*))) pG17ab@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG17a9@t))))))) (set! pG2898@pGd86@define-record-type-macro pGd86@define-record-type-macro) (set! pGd88@define-condition-type-macro (lambda (pG1981@x) (letrec* ((pG1984@mkname (lambda (pG19b1@name pG19b2@suffix) (pGe76@datum->syntax pG19b1@name (string->symbol (string-append (symbol->string (pGe78@syntax->datum pG19b1@name)) pG19b2@suffix)))))) (let ((pG1985@t pG1981@x)) (let ((pG1987@ls/false (pGd92@syntax-dispatch pG1985@t '(any any any any any . #(each (any any)))))) (if (and pG1987@ls/false (apply (lambda (pG1989@ctxt pG198a@name pG198b@super pG198c@constructor pG198d@predicate pG198e@field* pG198f@accessor*) (and (pGb8b@id? pG198a@name) (pGb8b@id? pG198b@super) (pGb8b@id? pG198c@constructor) (pGb8b@id? pG198d@predicate) (for-all pGb8b@id? pG198e@field*) (for-all pGb8b@id? pG198f@accessor*))) pG1987@ls/false)) (apply (lambda (pG1997@ctxt pG1998@name pG1999@super pG199a@constructor pG199b@predicate pG199c@field* pG199d@accessor*) (let ((pG19a5@aux-accessor* (map (lambda (pG19a7@x) (gensym)) pG199d@accessor*))) (pGd48@bless (cons 'begin (cons (cons 'define-record-type (cons (list pG1998@name pG199a@constructor (gensym)) (cons (list 'parent pG1999@super) (cons (cons 'fields (map (lambda (pG19a9@field pG19aa@aux) (list 'immutable pG19a9@field pG19aa@aux)) pG199c@field* pG19a5@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define pG199b@predicate (list 'condition-predicate (list 'record-type-descriptor pG1998@name))) (map (lambda (pG19ad@accessor pG19ae@aux) (list 'define pG19ad@accessor (list 'condition-accessor (list 'record-type-descriptor pG1998@name) pG19ae@aux))) pG199d@accessor* pG19a5@aux-accessor*))))))) pG1987@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1985@t))))))) (set! pG2899@pGd88@define-condition-type-macro pGd88@define-condition-type-macro) (set! pGd8a@incorrect-usage-macro (lambda (pG19b5@e) (pGe72@syntax-violation '#f '"incorrect usage of auxiliary keyword" pG19b5@e))) (set! pG289a@pGd8a@incorrect-usage-macro pGd8a@incorrect-usage-macro) (set! pGd8c@parameterize-macro (lambda (pG19b7@e) (let ((pG19b9@t pG19b7@e)) (let ((pG19bb@ls/false (pGd92@syntax-dispatch pG19b9@t '(_ () any . each-any)))) (if pG19bb@ls/false (apply (lambda (pG19bd@b pG19be@b*) (pGd48@bless (cons 'let (cons '() (cons pG19bd@b pG19be@b*))))) pG19bb@ls/false) (let ((pG19c1@t pG19b9@t)) (let ((pG19c3@ls/false (pGd92@syntax-dispatch pG19c1@t '(_ #(each (any any)) any . each-any)))) (if pG19c3@ls/false (apply (lambda (pG19c5@olhs* pG19c6@orhs* pG19c7@b pG19c8@b*) (let ((pG19cd@lhs* (pGe60@generate-temporaries pG19c5@olhs*)) (pG19ce@rhs* (pGe60@generate-temporaries pG19c6@orhs*))) (pGd48@bless (cons (list 'lambda (append pG19cd@lhs* pG19ce@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (pG19d1@lhs pG19d2@rhs) (list 'let (list (list 't (list pG19d1@lhs))) (list pG19d1@lhs pG19d2@rhs) (cons 'set! (cons pG19d2@rhs '(t))))) pG19cd@lhs* pG19ce@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons pG19c7@b pG19c8@b*))) '(swap)))))) (append pG19c5@olhs* pG19c6@orhs*))))) pG19c3@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG19c1@t))))))))) (set! pG289b@pGd8c@parameterize-macro pGd8c@parameterize-macro) (set! pGd8e@foreign-call-transformer (lambda (pG19d5@e pG19d6@r pG19d7@mr) (let ((pG19db@t pG19d5@e)) (let ((pG19dd@ls/false (pGd92@syntax-dispatch pG19db@t '(_ any . each-any)))) (if pG19dd@ls/false (apply (lambda (pG19df@name pG19e0@arg*) (cons 'foreign-call (cons (pGdb4@chi-expr pG19df@name pG19d6@r pG19d7@mr) (pGdb0@chi-expr* pG19e0@arg* pG19d6@r pG19d7@mr)))) pG19dd@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG19db@t)))))) (set! pG289c@pGd8e@foreign-call-transformer pGd8e@foreign-call-transformer) (set! pGd90@convert-pattern (lambda (pG19e3@pattern pG19e4@keys) (letrec* ((pG19e8@cvt* (lambda (pG1a87@p* pG1a88@n pG1a89@ids) (if (null? pG1a87@p*) (values '() pG1a89@ids) (call-with-values (lambda () (pG19e8@cvt* (cdr pG1a87@p*) pG1a88@n pG1a89@ids)) (lambda (pG1a91@pG1a8e pG1a92@pG1a90) (let ((pG1a95@ids pG1a92@pG1a90) (pG1a96@y pG1a91@pG1a8e)) (call-with-values (lambda () (pG19ea@cvt (car pG1a87@p*) pG1a88@n pG1a95@ids)) (lambda (pG1a9d@pG1a9a pG1a9e@pG1a9c) (let ((pG1aa1@ids pG1a9e@pG1a9c) (pG1aa2@x pG1a9d@pG1a9a)) (values (cons pG1aa2@x pG1a96@y) pG1aa1@ids)))))))))) (pG19ea@cvt (lambda (pG19eb@p pG19ec@n pG19ed@ids) (let ((pG19f1@t pG19eb@p)) (let ((pG19f3@ls/false (pGd92@syntax-dispatch pG19f1@t 'any))) (if (and pG19f3@ls/false (apply (lambda (pG19f5@id) (pGb8b@id? pG19f5@id)) pG19f3@ls/false)) (apply (lambda (pG19f7@id) (if (pGb97@bound-id-member? pG19eb@p pG19e4@keys) (values (vector 'free-id pG19eb@p) pG19ed@ids) (if (pGb91@free-id=? pG19eb@p (pGd1a@scheme-stx '_)) (values '_ pG19ed@ids) (values 'any (cons (cons pG19eb@p pG19ec@n) pG19ed@ids))))) pG19f3@ls/false) (let ((pG19f9@t pG19f1@t)) (let ((pG19fb@ls/false (pGd92@syntax-dispatch pG19f9@t '(any any)))) (if (and pG19fb@ls/false (apply (lambda (pG19fd@p pG19fe@dots) (pGd94@ellipsis? pG19fe@dots)) pG19fb@ls/false)) (apply (lambda (pG1a01@p pG1a02@dots) (call-with-values (lambda () (pG19ea@cvt pG1a01@p (+ pG19ec@n '1) pG19ed@ids)) (lambda (pG1a09@pG1a06 pG1a0a@pG1a08) (let ((pG1a0d@ids pG1a0a@pG1a08) (pG1a0e@p pG1a09@pG1a06)) (values (if (eq? pG1a0e@p 'any) 'each-any (vector 'each pG1a0e@p)) pG1a0d@ids))))) pG19fb@ls/false) (let ((pG1a11@t pG19f9@t)) (let ((pG1a13@ls/false (pGd92@syntax-dispatch pG1a11@t '(any any . #(each+ any () any))))) (if (and pG1a13@ls/false (apply (lambda (pG1a15@x pG1a16@dots pG1a17@ys pG1a18@z) (pGd94@ellipsis? pG1a16@dots)) pG1a13@ls/false)) (apply (lambda (pG1a1d@x pG1a1e@dots pG1a1f@ys pG1a20@z) (call-with-values (lambda () (pG19ea@cvt pG1a20@z pG19ec@n pG19ed@ids)) (lambda (pG1a29@pG1a26 pG1a2a@pG1a28) (let ((pG1a2d@ids pG1a2a@pG1a28) (pG1a2e@z pG1a29@pG1a26)) (call-with-values (lambda () (pG19e8@cvt* pG1a1f@ys pG19ec@n pG1a2d@ids)) (lambda (pG1a35@pG1a32 pG1a36@pG1a34) (let ((pG1a39@ids pG1a36@pG1a34) (pG1a3a@ys pG1a35@pG1a32)) (call-with-values (lambda () (pG19ea@cvt pG1a1d@x (+ pG19ec@n '1) pG1a39@ids)) (lambda (pG1a41@pG1a3e pG1a42@pG1a40) (let ((pG1a45@ids pG1a42@pG1a40) (pG1a46@x pG1a41@pG1a3e)) (values (vector 'each+ pG1a46@x (reverse pG1a3a@ys) pG1a2e@z) pG1a45@ids))))))))))) pG1a13@ls/false) (let ((pG1a49@t pG1a11@t)) (let ((pG1a4b@ls/false (pGd92@syntax-dispatch pG1a49@t '(any . any)))) (if pG1a4b@ls/false (apply (lambda (pG1a4d@x pG1a4e@y) (call-with-values (lambda () (pG19ea@cvt pG1a4e@y pG19ec@n pG19ed@ids)) (lambda (pG1a55@pG1a52 pG1a56@pG1a54) (let ((pG1a59@ids pG1a56@pG1a54) (pG1a5a@y pG1a55@pG1a52)) (call-with-values (lambda () (pG19ea@cvt pG1a4d@x pG19ec@n pG1a59@ids)) (lambda (pG1a61@pG1a5e pG1a62@pG1a60) (let ((pG1a65@ids pG1a62@pG1a60) (pG1a66@x pG1a61@pG1a5e)) (values (cons pG1a66@x pG1a5a@y) pG1a65@ids)))))))) pG1a4b@ls/false) (let ((pG1a69@t pG1a49@t)) (let ((pG1a6b@ls/false (pGd92@syntax-dispatch pG1a69@t '()))) (if pG1a6b@ls/false (apply (lambda () (values '() pG19ed@ids)) pG1a6b@ls/false) (let ((pG1a6d@t pG1a69@t)) (let ((pG1a6f@ls/false (pGd92@syntax-dispatch pG1a6d@t '#(vector each-any)))) (if (and pG1a6f@ls/false (apply (lambda (pG1a71@p) (not (pGb57@stx? pG1a71@p))) pG1a6f@ls/false)) (apply (lambda (pG1a73@p) (call-with-values (lambda () (pG19ea@cvt pG1a73@p pG19ec@n pG19ed@ids)) (lambda (pG1a79@pG1a76 pG1a7a@pG1a78) (let ((pG1a7d@ids pG1a7a@pG1a78) (pG1a7e@p pG1a79@pG1a76)) (values (vector 'vector pG1a7e@p) pG1a7d@ids))))) pG1a6f@ls/false) (let ((pG1a81@t pG1a6d@t)) (let ((pG1a83@ls/false (pGd92@syntax-dispatch pG1a81@t 'any))) (if pG1a83@ls/false (apply (lambda (pG1a85@datum) (values (vector 'atom (pGb9f@stx->datum pG1a85@datum)) pG19ed@ids)) pG1a83@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1a81@t))))))))))))))))))))))))) (pG19ea@cvt pG19e3@pattern '0 '())))) (set! pG289d@pGd90@convert-pattern pGd90@convert-pattern) (set! pGd92@syntax-dispatch (letrec* ((pG1aa6@stx^ (lambda (pG1b81@e pG1b82@m* pG1b83@s* pG1b84@ae*) (if (and (null? pG1b82@m*) (null? pG1b83@s*) (null? pG1b84@ae*)) pG1b81@e (pGb73@mkstx pG1b81@e pG1b82@m* pG1b83@s* pG1b84@ae*)))) (pG1aa8@match-each (lambda (pG1b61@e pG1b62@p pG1b63@m* pG1b64@s* pG1b65@ae*) (if (pair? pG1b61@e) (let ((pG1b6b@first (pG1ab4@match (car pG1b61@e) pG1b62@p pG1b63@m* pG1b64@s* pG1b65@ae* '()))) (and pG1b6b@first (let ((pG1b6d@rest (pG1aa8@match-each (cdr pG1b61@e) pG1b62@p pG1b63@m* pG1b64@s* pG1b65@ae*))) (and pG1b6d@rest (cons pG1b6b@first pG1b6d@rest))))) (if (null? pG1b61@e) '() (if (pGb57@stx? pG1b61@e) (and (not (pGb11@top-marked? pG1b63@m*)) (call-with-values (lambda () (join-wraps pG1b63@m* pG1b64@s* pG1b65@ae* pG1b61@e)) (lambda (pG1b75@pG1b70 pG1b76@pG1b72 pG1b77@pG1b74) (let ((pG1b7b@ae* pG1b77@pG1b74) (pG1b7c@s* pG1b76@pG1b72) (pG1b7d@m* pG1b75@pG1b70)) (pG1aa8@match-each (pGb59@stx-expr pG1b61@e) pG1b62@p pG1b7d@m* pG1b7c@s* pG1b7b@ae*))))) (if (pG6cf@pG5a1@annotation? pG1b61@e) (pG1aa8@match-each (pG6d1@pG5a5@annotation-expression pG1b61@e) pG1b62@p pG1b63@m* pG1b64@s* pG1b65@ae*) '#f)))))) (pG1aaa@match-each+ (lambda (pG1b21@e pG1b22@x-pat pG1b23@y-pat pG1b24@z-pat pG1b25@m* pG1b26@s* pG1b27@ae* pG1b28@r) (let pG1b39@f ((pG1b31@e pG1b21@e) (pG1b32@m* pG1b25@m*) (pG1b33@s* pG1b26@s*) (pG1b34@ae* pG1b27@ae*)) (if (pair? pG1b31@e) (call-with-values (lambda () (pG1b39@f (cdr pG1b31@e) pG1b32@m* pG1b33@s* pG1b34@ae*)) (lambda (pG1b41@pG1b3c pG1b42@pG1b3e pG1b43@pG1b40) (let ((pG1b47@r pG1b43@pG1b40) (pG1b48@y-pat pG1b42@pG1b3e) (pG1b49@xr* pG1b41@pG1b3c)) (if pG1b47@r (if (null? pG1b48@y-pat) (let ((pG1b4d@xr (pG1ab4@match (car pG1b31@e) pG1b22@x-pat pG1b32@m* pG1b33@s* pG1b34@ae* '()))) (if pG1b4d@xr (values (cons pG1b4d@xr pG1b49@xr*) pG1b48@y-pat pG1b47@r) (values '#f '#f '#f))) (values '() (cdr pG1b48@y-pat) (pG1ab4@match (car pG1b31@e) (car pG1b48@y-pat) pG1b32@m* pG1b33@s* pG1b34@ae* pG1b47@r))) (values '#f '#f '#f))))) (if (pGb57@stx? pG1b31@e) (if (pGb11@top-marked? pG1b32@m*) (values '() pG1b23@y-pat (pG1ab4@match pG1b31@e pG1b24@z-pat pG1b32@m* pG1b33@s* pG1b34@ae* pG1b28@r)) (call-with-values (lambda () (join-wraps pG1b32@m* pG1b33@s* pG1b34@ae* pG1b31@e)) (lambda (pG1b55@pG1b50 pG1b56@pG1b52 pG1b57@pG1b54) (let ((pG1b5b@ae* pG1b57@pG1b54) (pG1b5c@s* pG1b56@pG1b52) (pG1b5d@m* pG1b55@pG1b50)) (pG1b39@f (pGb59@stx-expr pG1b31@e) pG1b5d@m* pG1b5c@s* pG1b5b@ae*))))) (if (pG6cf@pG5a1@annotation? pG1b31@e) (pG1b39@f (pG6d1@pG5a5@annotation-expression pG1b31@e) pG1b32@m* pG1b33@s* pG1b34@ae*) (values '() pG1b23@y-pat (pG1ab4@match pG1b31@e pG1b24@z-pat pG1b32@m* pG1b33@s* pG1b34@ae* pG1b28@r)))))))) (pG1aac@match-each-any (lambda (pG1b05@e pG1b06@m* pG1b07@s* pG1b08@ae*) (if (pair? pG1b05@e) (let ((pG1b0d@l (pG1aac@match-each-any (cdr pG1b05@e) pG1b06@m* pG1b07@s* pG1b08@ae*))) (and pG1b0d@l (cons (pG1aa6@stx^ (car pG1b05@e) pG1b06@m* pG1b07@s* pG1b08@ae*) pG1b0d@l))) (if (null? pG1b05@e) '() (if (pGb57@stx? pG1b05@e) (and (not (pGb11@top-marked? pG1b06@m*)) (call-with-values (lambda () (join-wraps pG1b06@m* pG1b07@s* pG1b08@ae* pG1b05@e)) (lambda (pG1b15@pG1b10 pG1b16@pG1b12 pG1b17@pG1b14) (let ((pG1b1b@ae* pG1b17@pG1b14) (pG1b1c@s* pG1b16@pG1b12) (pG1b1d@m* pG1b15@pG1b10)) (pG1aac@match-each-any (pGb59@stx-expr pG1b05@e) pG1b1d@m* pG1b1c@s* pG1b1b@ae*))))) (if (pG6cf@pG5a1@annotation? pG1b05@e) (pG1aac@match-each-any (pG6d1@pG5a5@annotation-expression pG1b05@e) pG1b06@m* pG1b07@s* pG1b08@ae*) '#f)))))) (pG1aae@match-empty (lambda (pG1aff@p pG1b00@r) (if (null? pG1aff@p) pG1b00@r (if (eq? pG1aff@p '_) pG1b00@r (if (eq? pG1aff@p 'any) (cons '() pG1b00@r) (if (pair? pG1aff@p) (pG1aae@match-empty (car pG1aff@p) (pG1aae@match-empty (cdr pG1aff@p) pG1b00@r)) (if (eq? pG1aff@p 'each-any) (cons '() pG1b00@r) (let ((pG1b03@t (vector-ref pG1aff@p '0))) (if (memv pG1b03@t '(each)) (pG1aae@match-empty (vector-ref pG1aff@p '1) pG1b00@r) (if (memv pG1b03@t '(each+)) (pG1aae@match-empty (vector-ref pG1aff@p '1) (pG1aae@match-empty (reverse (vector-ref pG1aff@p '2)) (pG1aae@match-empty (vector-ref pG1aff@p '3) pG1b00@r))) (if (memv pG1b03@t '(free-id atom)) pG1b00@r (if (memv pG1b03@t '(scheme-id atom)) pG1b00@r (if (memv pG1b03@t '(vector)) (pG1aae@match-empty (vector-ref pG1aff@p '1) pG1b00@r) (assertion-violation 'syntax-dispatch '"invalid pattern" pG1aff@p)))))))))))))) (pG1ab0@combine (lambda (pG1afb@r* pG1afc@r) (if (null? (car pG1afb@r*)) pG1afc@r (cons (map car pG1afb@r*) (pG1ab0@combine (map cdr pG1afb@r*) pG1afc@r))))) (pG1ab2@match* (lambda (pG1ad7@e pG1ad8@p pG1ad9@m* pG1ada@s* pG1adb@ae* pG1adc@r) (if (null? pG1ad8@p) (and (null? pG1ad7@e) pG1adc@r) (if (pair? pG1ad8@p) (and (pair? pG1ad7@e) (pG1ab4@match (car pG1ad7@e) (car pG1ad8@p) pG1ad9@m* pG1ada@s* pG1adb@ae* (pG1ab4@match (cdr pG1ad7@e) (cdr pG1ad8@p) pG1ad9@m* pG1ada@s* pG1adb@ae* pG1adc@r))) (if (eq? pG1ad8@p 'each-any) (let ((pG1ae3@l (pG1aac@match-each-any pG1ad7@e pG1ad9@m* pG1ada@s* pG1adb@ae*))) (and pG1ae3@l (cons pG1ae3@l pG1adc@r))) (let ((pG1ae5@t (vector-ref pG1ad8@p '0))) (if (memv pG1ae5@t '(each)) (if (null? pG1ad7@e) (pG1aae@match-empty (vector-ref pG1ad8@p '1) pG1adc@r) (let ((pG1ae7@r* (pG1aa8@match-each pG1ad7@e (vector-ref pG1ad8@p '1) pG1ad9@m* pG1ada@s* pG1adb@ae*))) (and pG1ae7@r* (pG1ab0@combine pG1ae7@r* pG1adc@r)))) (if (memv pG1ae5@t '(free-id)) (and (symbol? pG1ad7@e) (pGb11@top-marked? pG1ad9@m*) (pGb91@free-id=? (pG1aa6@stx^ pG1ad7@e pG1ad9@m* pG1ada@s* pG1adb@ae*) (vector-ref pG1ad8@p '1)) pG1adc@r) (if (memv pG1ae5@t '(scheme-id)) (and (symbol? pG1ad7@e) (pGb11@top-marked? pG1ad9@m*) (pGb91@free-id=? (pG1aa6@stx^ pG1ad7@e pG1ad9@m* pG1ada@s* pG1adb@ae*) (pGd1a@scheme-stx (vector-ref pG1ad8@p '1))) pG1adc@r) (if (memv pG1ae5@t '(each+)) (call-with-values (lambda () (pG1aaa@match-each+ pG1ad7@e (vector-ref pG1ad8@p '1) (vector-ref pG1ad8@p '2) (vector-ref pG1ad8@p '3) pG1ad9@m* pG1ada@s* pG1adb@ae* pG1adc@r)) (lambda (pG1aef@pG1aea pG1af0@pG1aec pG1af1@pG1aee) (let ((pG1af5@r pG1af1@pG1aee) (pG1af6@y-pat pG1af0@pG1aec) (pG1af7@xr* pG1aef@pG1aea)) (and pG1af5@r (null? pG1af6@y-pat) (if (null? pG1af7@xr*) (pG1aae@match-empty (vector-ref pG1ad8@p '1) pG1af5@r) (pG1ab0@combine pG1af7@xr* pG1af5@r)))))) (if (memv pG1ae5@t '(atom)) (and (fast-equal? (vector-ref pG1ad8@p '1) (pGb9d@strip pG1ad7@e pG1ad9@m*)) pG1adc@r) (if (memv pG1ae5@t '(vector)) (and (vector? pG1ad7@e) (pG1ab4@match (vector->list pG1ad7@e) (vector-ref pG1ad8@p '1) pG1ad9@m* pG1ada@s* pG1adb@ae* pG1adc@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" pG1ad8@p))))))))))))) (pG1ab4@match (lambda (pG1ab9@e pG1aba@p pG1abb@m* pG1abc@s* pG1abd@ae* pG1abe@r) (if (not pG1abe@r) '#f (if (eq? pG1aba@p '_) pG1abe@r (if (eq? pG1aba@p 'any) (cons (pG1aa6@stx^ pG1ab9@e pG1abb@m* pG1abc@s* pG1abd@ae*) pG1abe@r) (if (pGb57@stx? pG1ab9@e) (and (not (pGb11@top-marked? pG1abb@m*)) (call-with-values (lambda () (join-wraps pG1abb@m* pG1abc@s* pG1abd@ae* pG1ab9@e)) (lambda (pG1acb@pG1ac6 pG1acc@pG1ac8 pG1acd@pG1aca) (let ((pG1ad1@ae* pG1acd@pG1aca) (pG1ad2@s* pG1acc@pG1ac8) (pG1ad3@m* pG1acb@pG1ac6)) (pG1ab4@match (pGb59@stx-expr pG1ab9@e) pG1aba@p pG1ad3@m* pG1ad2@s* pG1ad1@ae* pG1abe@r))))) (if (pG6cf@pG5a1@annotation? pG1ab9@e) (pG1ab4@match (pG6d1@pG5a5@annotation-expression pG1ab9@e) pG1aba@p pG1abb@m* pG1abc@s* pG1abd@ae* pG1abe@r) (pG1ab2@match* pG1ab9@e pG1aba@p pG1abb@m* pG1abc@s* pG1abd@ae* pG1abe@r))))))))) (lambda (pG1ab5@e pG1ab6@p) (pG1ab4@match pG1ab5@e pG1ab6@p '() '() '() '())))) (set! pG289e@pGd92@syntax-dispatch pGd92@syntax-dispatch) (set! pGd94@ellipsis? (lambda (pG1b89@x) (and (pGb8b@id? pG1b89@x) (pGb91@free-id=? pG1b89@x (pGd1a@scheme-stx '...))))) (set! pG289f@pGd94@ellipsis? pGd94@ellipsis?) (set! pGd96@underscore? (lambda (pG1b8b@x) (and (pGb8b@id? pG1b8b@x) (pGb91@free-id=? pG1b8b@x (pGd1a@scheme-stx '_))))) (set! pG28a0@pGd96@underscore? pGd96@underscore?) (set! pGd98@verify-literals (lambda (pG1b8d@lits pG1b8e@expr) (for-each (lambda (pG1b91@x) (if (or (not (pGb8b@id? pG1b91@x)) (pGd94@ellipsis? pG1b91@x) (pGd96@underscore? pG1b91@x)) (pGe72@syntax-violation '#f '"invalid literal" pG1b8e@expr pG1b91@x) (void))) pG1b8d@lits))) (set! pG28a1@pGd98@verify-literals pGd98@verify-literals) (set! pGd9a@syntax-case-transformer (letrec* ((pG1b94@build-dispatch-call (lambda (pG1c05@pvars pG1c06@expr pG1c07@y pG1c08@r pG1c09@mr) (let ((pG1c0f@ids (map car pG1c05@pvars)) (pG1c10@levels (map cdr pG1c05@pvars))) (let ((pG1c13@labels (map pGb17@gen-label pG1c0f@ids)) (pG1c14@new-vars (map pGb13@gen-lexical pG1c0f@ids))) (let ((pG1c17@body (pGdb4@chi-expr (pGb75@add-subst (pGb4b@make-full-rib pG1c0f@ids pG1c13@labels) pG1c06@expr) (append (map (lambda (pG1c19@label pG1c1a@var pG1c1b@level) (cons pG1c19@label (pGba5@make-binding 'syntax (cons pG1c1a@var pG1c1b@level)))) pG1c13@labels pG1c14@new-vars (map cdr pG1c05@pvars)) pG1c08@r) pG1c09@mr))) (list '(primitive apply) (pGaee@pGa20@build-lambda '#f pG1c14@new-vars pG1c17@body) pG1c07@y)))))) (pG1b96@invalid-ids-error (lambda (pG1bf9@id* pG1bfa@e pG1bfb@class) (let pG1c03@find ((pG1bff@id* pG1bf9@id*) (pG1c00@ok* '())) (if (null? pG1bff@id*) (pGe72@syntax-violation '#f '"invalid syntax" pG1bfa@e) (if (pGb8b@id? (car pG1bff@id*)) (if (pGb97@bound-id-member? (car pG1bff@id*) pG1c00@ok*) (pGe6e@syntax-error (car pG1bff@id*) '"duplicate " pG1bfb@class) (pG1c03@find (cdr pG1bff@id*) (cons (car pG1bff@id*) pG1c00@ok*))) (pGe6e@syntax-error (car pG1bff@id*) '"invalid " pG1bfb@class)))))) (pG1b98@gen-clause (lambda (pG1bd1@x pG1bd2@keys pG1bd3@clauses pG1bd4@r pG1bd5@mr pG1bd6@pat pG1bd7@fender pG1bd8@expr) (call-with-values (lambda () (pGd90@convert-pattern pG1bd6@pat pG1bd2@keys)) (lambda (pG1be5@pG1be2 pG1be6@pG1be4) (let ((pG1be9@pvars pG1be6@pG1be4) (pG1bea@p pG1be5@pG1be2)) (if (not (pGb95@distinct-bound-ids? (map car pG1be9@pvars))) (pG1b96@invalid-ids-error (map car pG1be9@pvars) pG1bd6@pat '"pattern variable") (if (not (for-all (lambda (pG1bed@x) (not (pGd94@ellipsis? (car pG1bed@x)))) pG1be9@pvars)) (pGe72@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" pG1bd6@pat) (let ((pG1bef@y (pGb13@gen-lexical 'tmp))) (let ((pG1bf1@test (if (eq? pG1bd7@fender '#t) pG1bef@y (let ((pG1bf3@call (pG1b94@build-dispatch-call pG1be9@pvars pG1bd7@fender pG1bef@y pG1bd4@r pG1bd5@mr))) (list 'if pG1bef@y pG1bf3@call (list 'quote '#f)))))) (let ((pG1bf5@conseq (pG1b94@build-dispatch-call pG1be9@pvars pG1bd8@expr pG1bef@y pG1bd4@r pG1bd5@mr))) (let ((pG1bf7@altern (pG1b9a@gen-syntax-case pG1bd1@x pG1bd2@keys pG1bd3@clauses pG1bd4@r pG1bd5@mr))) (list (pGaee@pGa20@build-lambda '#f (list pG1bef@y) (list 'if pG1bf1@test pG1bf5@conseq pG1bf7@altern)) (list '(primitive syntax-dispatch) pG1bd1@x (list 'quote pG1bea@p)))))))))))))) (pG1b9a@gen-syntax-case (lambda (pG1baf@x pG1bb0@keys pG1bb1@clauses pG1bb2@r pG1bb3@mr) (if (null? pG1bb1@clauses) (list '(primitive syntax-error) pG1baf@x) (let ((pG1bb9@t (car pG1bb1@clauses))) (let ((pG1bbb@ls/false (pGd92@syntax-dispatch pG1bb9@t '(any any)))) (if pG1bbb@ls/false (apply (lambda (pG1bbd@pat pG1bbe@expr) (if (and (pGb8b@id? pG1bbd@pat) (not (pGb97@bound-id-member? pG1bbd@pat pG1bb0@keys)) (not (pGd94@ellipsis? pG1bbd@pat))) (if (pGb91@free-id=? pG1bbd@pat (pGd1a@scheme-stx '_)) (pGdb4@chi-expr pG1bbe@expr pG1bb2@r pG1bb3@mr) (let ((pG1bc1@lab (pGb17@gen-label pG1bbd@pat)) (pG1bc2@lex (pGb13@gen-lexical pG1bbd@pat))) (let ((pG1bc5@body (pGdb4@chi-expr (pGb75@add-subst (pGb4b@make-full-rib (list pG1bbd@pat) (list pG1bc1@lab)) pG1bbe@expr) (cons (cons pG1bc1@lab (pGba5@make-binding 'syntax (cons pG1bc2@lex '0))) pG1bb2@r) pG1bb3@mr))) (list (pGaee@pGa20@build-lambda '#f (list pG1bc2@lex) pG1bc5@body) pG1baf@x)))) (pG1b98@gen-clause pG1baf@x pG1bb0@keys (cdr pG1bb1@clauses) pG1bb2@r pG1bb3@mr pG1bbd@pat '#t pG1bbe@expr))) pG1bbb@ls/false) (let ((pG1bc7@t pG1bb9@t)) (let ((pG1bc9@ls/false (pGd92@syntax-dispatch pG1bc7@t '(any any any)))) (if pG1bc9@ls/false (apply (lambda (pG1bcb@pat pG1bcc@fender pG1bcd@expr) (pG1b98@gen-clause pG1baf@x pG1bb0@keys (cdr pG1bb1@clauses) pG1bb2@r pG1bb3@mr pG1bcb@pat pG1bcc@fender pG1bcd@expr)) pG1bc9@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1bc7@t))))))))))) (lambda (pG1b9b@e pG1b9c@r pG1b9d@mr) (let ((pG1ba1@t pG1b9b@e)) (let ((pG1ba3@ls/false (pGd92@syntax-dispatch pG1ba1@t '(_ any each-any . each-any)))) (if pG1ba3@ls/false (apply (lambda (pG1ba5@expr pG1ba6@keys pG1ba7@clauses) (begin (pGd98@verify-literals pG1ba6@keys pG1b9b@e) (let ((pG1bab@x (pGb13@gen-lexical 'tmp))) (let ((pG1bad@body (pG1b9a@gen-syntax-case pG1bab@x pG1ba6@keys pG1ba7@clauses pG1b9c@r pG1b9d@mr))) (list (pGaee@pGa20@build-lambda '#f (list pG1bab@x) pG1bad@body) (pGdb4@chi-expr pG1ba5@expr pG1b9c@r pG1b9d@mr)))))) pG1ba3@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1ba1@t))))))) (set! pG28a2@pGd9a@syntax-case-transformer pGd9a@syntax-case-transformer) (set! pGd9c@ellipsis-map (lambda (pG1c1f@proc pG1c20@ls . pG1c23@ls*) (letrec* ((pG1c26@who '...)) (begin (if (not (list? pG1c20@ls)) (assertion-violation pG1c26@who '"not a list" pG1c20@ls) (void)) (if (not (null? pG1c23@ls*)) (let ((pG1c27@n (length pG1c20@ls))) (for-each (lambda (pG1c29@x) (begin (if (not (list? pG1c29@x)) (assertion-violation pG1c26@who '"not a list" pG1c29@x) (void)) (if (not (= (length pG1c29@x) pG1c27@n)) (assertion-violation pG1c26@who '"length mismatch" pG1c20@ls pG1c29@x) (void)))) pG1c23@ls*)) (void)) (apply map pG1c1f@proc pG1c20@ls pG1c23@ls*))))) (set! pG28a3@pGd9c@ellipsis-map pGd9c@ellipsis-map) (set! pGd9e@syntax-transformer (letrec* ((pG1c2c@gen-syntax (lambda (pG1ca3@src pG1ca4@e pG1ca5@r pG1ca6@maps pG1ca7@ellipsis? pG1ca8@vec?) (let ((pG1caf@t pG1ca4@e)) (let ((pG1cb1@ls/false (pGd92@syntax-dispatch pG1caf@t 'any))) (if (and pG1cb1@ls/false (apply (lambda (pG1cb3@dots) (pG1ca7@ellipsis? pG1cb3@dots)) pG1cb1@ls/false)) (apply (lambda (pG1cb5@dots) (pGe72@syntax-violation '#f '"misplaced ellipsis in syntax form" pG1ca3@src)) pG1cb1@ls/false) (let ((pG1cb7@t pG1caf@t)) (let ((pG1cb9@ls/false (pGd92@syntax-dispatch pG1cb7@t 'any))) (if (and pG1cb9@ls/false (apply (lambda (pG1cbb@id) (pGb8b@id? pG1cbb@id)) pG1cb9@ls/false)) (apply (lambda (pG1cbd@id) (let ((pG1cbf@label (pGba1@id->label pG1ca4@e))) (let ((pG1cc1@b (pGba3@label->binding pG1cbf@label pG1ca5@r))) (if (eq? (pGba7@binding-type pG1cc1@b) 'syntax) (call-with-values (lambda () (let ((pG1cc7@var.lev (pGba9@binding-value pG1cc1@b))) (pG1c2e@gen-ref pG1ca3@src (car pG1cc7@var.lev) (cdr pG1cc7@var.lev) pG1ca6@maps))) (lambda (pG1cc9@pG1cc4 pG1cca@pG1cc6) (let ((pG1ccd@maps pG1cca@pG1cc6) (pG1cce@var pG1cc9@pG1cc4)) (values (list 'ref pG1cce@var) pG1ccd@maps)))) (values (list 'quote pG1ca4@e) pG1ca6@maps))))) pG1cb9@ls/false) (let ((pG1cd1@t pG1cb7@t)) (let ((pG1cd3@ls/false (pGd92@syntax-dispatch pG1cd1@t '(any any)))) (if (and pG1cd3@ls/false (apply (lambda (pG1cd5@dots pG1cd6@e) (pG1ca7@ellipsis? pG1cd5@dots)) pG1cd3@ls/false)) (apply (lambda (pG1cd9@dots pG1cda@e) (if pG1ca8@vec? (pGe72@syntax-violation '#f '"misplaced ellipsis in syntax form" pG1ca3@src) (pG1c2c@gen-syntax pG1ca3@src pG1cda@e pG1ca5@r pG1ca6@maps (lambda (pG1cdd@x) '#f) '#f))) pG1cd3@ls/false) (let ((pG1cdf@t pG1cd1@t)) (let ((pG1ce1@ls/false (pGd92@syntax-dispatch pG1cdf@t '(any any . any)))) (if (and pG1ce1@ls/false (apply (lambda (pG1ce3@x pG1ce4@dots pG1ce5@y) (pG1ca7@ellipsis? pG1ce4@dots)) pG1ce1@ls/false)) (apply (lambda (pG1ce9@x pG1cea@dots pG1ceb@y) (let pG1d01@f ((pG1cef@y pG1ceb@y) (pG1cf0@k (lambda (pG1cf3@maps) (call-with-values (lambda () (pG1c2c@gen-syntax pG1ca3@src pG1ce9@x pG1ca5@r (cons '() pG1cf3@maps) pG1ca7@ellipsis? '#f)) (lambda (pG1cf9@pG1cf6 pG1cfa@pG1cf8) (let ((pG1cfd@maps pG1cfa@pG1cf8) (pG1cfe@x pG1cf9@pG1cf6)) (if (null? (car pG1cfd@maps)) (pGe72@syntax-violation '#f '"extra ellipsis in syntax form" pG1ca3@src) (values (pG1c34@gen-map pG1cfe@x (car pG1cfd@maps)) (cdr pG1cfd@maps))))))))) (let ((pG1d03@t pG1cef@y)) (let ((pG1d05@ls/false (pGd92@syntax-dispatch pG1d03@t '()))) (if pG1d05@ls/false (apply (lambda () (pG1cf0@k pG1ca6@maps)) pG1d05@ls/false) (let ((pG1d07@t pG1d03@t)) (let ((pG1d09@ls/false (pGd92@syntax-dispatch pG1d07@t '(any . any)))) (if (and pG1d09@ls/false (apply (lambda (pG1d0b@dots pG1d0c@y) (pG1ca7@ellipsis? pG1d0b@dots)) pG1d09@ls/false)) (apply (lambda (pG1d0f@dots pG1d10@y) (pG1d01@f pG1d10@y (lambda (pG1d13@maps) (call-with-values (lambda () (pG1cf0@k (cons '() pG1d13@maps))) (lambda (pG1d19@pG1d16 pG1d1a@pG1d18) (let ((pG1d1d@maps pG1d1a@pG1d18) (pG1d1e@x pG1d19@pG1d16)) (if (null? (car pG1d1d@maps)) (pGe72@syntax-violation '#f '"extra ellipsis in syntax form" pG1ca3@src) (values (pG1c32@gen-mappend pG1d1e@x (car pG1d1d@maps)) (cdr pG1d1d@maps))))))))) pG1d09@ls/false) (let ((pG1d21@t pG1d07@t)) (let ((pG1d23@ls/false (pGd92@syntax-dispatch pG1d21@t '_))) (if pG1d23@ls/false (apply (lambda () (call-with-values (lambda () (pG1c2c@gen-syntax pG1ca3@src pG1cef@y pG1ca5@r pG1ca6@maps pG1ca7@ellipsis? pG1ca8@vec?)) (lambda (pG1d29@pG1d26 pG1d2a@pG1d28) (let ((pG1d2d@maps pG1d2a@pG1d28) (pG1d2e@y pG1d29@pG1d26)) (call-with-values (lambda () (pG1cf0@k pG1d2d@maps)) (lambda (pG1d35@pG1d32 pG1d36@pG1d34) (let ((pG1d39@maps pG1d36@pG1d34) (pG1d3a@x pG1d35@pG1d32)) (values (pG1c30@gen-append pG1d3a@x pG1d2e@y) pG1d39@maps)))))))) pG1d23@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1d21@t)))))))))))) pG1ce1@ls/false) (let ((pG1d3d@t pG1cdf@t)) (let ((pG1d3f@ls/false (pGd92@syntax-dispatch pG1d3d@t '(any . any)))) (if pG1d3f@ls/false (apply (lambda (pG1d41@x pG1d42@y) (call-with-values (lambda () (pG1c2c@gen-syntax pG1ca3@src pG1d41@x pG1ca5@r pG1ca6@maps pG1ca7@ellipsis? '#f)) (lambda (pG1d49@pG1d46 pG1d4a@pG1d48) (let ((pG1d4d@maps pG1d4a@pG1d48) (pG1d4e@xnew pG1d49@pG1d46)) (call-with-values (lambda () (pG1c2c@gen-syntax pG1ca3@src pG1d42@y pG1ca5@r pG1d4d@maps pG1ca7@ellipsis? pG1ca8@vec?)) (lambda (pG1d55@pG1d52 pG1d56@pG1d54) (let ((pG1d59@maps pG1d56@pG1d54) (pG1d5a@ynew pG1d55@pG1d52)) (values (pG1c36@gen-cons pG1ca4@e pG1d41@x pG1d42@y pG1d4e@xnew pG1d5a@ynew) pG1d59@maps)))))))) pG1d3f@ls/false) (let ((pG1d5d@t pG1d3d@t)) (let ((pG1d5f@ls/false (pGd92@syntax-dispatch pG1d5d@t '#(vector each-any)))) (if pG1d5f@ls/false (apply (lambda (pG1d61@ls) (call-with-values (lambda () (pG1c2c@gen-syntax pG1ca3@src pG1d61@ls pG1ca5@r pG1ca6@maps pG1ca7@ellipsis? '#t)) (lambda (pG1d67@pG1d64 pG1d68@pG1d66) (let ((pG1d6b@maps pG1d68@pG1d66) (pG1d6c@lsnew pG1d67@pG1d64)) (values (pG1c38@gen-vector pG1ca4@e pG1d61@ls pG1d6c@lsnew) pG1d6b@maps))))) pG1d5f@ls/false) (let ((pG1d6f@t pG1d5d@t)) (let ((pG1d71@ls/false (pGd92@syntax-dispatch pG1d6f@t '_))) (if pG1d71@ls/false (apply (lambda () (values (list 'quote pG1ca4@e) pG1ca6@maps)) pG1d71@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1d6f@t)))))))))))))))))))))))) (pG1c2e@gen-ref (lambda (pG1c89@src pG1c8a@var pG1c8b@level pG1c8c@maps) (if (= pG1c8b@level '0) (values pG1c8a@var pG1c8c@maps) (if (null? pG1c8c@maps) (pGe72@syntax-violation '#f '"missing ellipsis in syntax form" pG1c89@src) (call-with-values (lambda () (pG1c2e@gen-ref pG1c89@src pG1c8a@var (- pG1c8b@level '1) (cdr pG1c8c@maps))) (lambda (pG1c95@pG1c92 pG1c96@pG1c94) (let ((pG1c99@outer-maps pG1c96@pG1c94) (pG1c9a@outer-var pG1c95@pG1c92)) (let ((pG1c9d@t (assq pG1c9a@outer-var (car pG1c8c@maps)))) (if pG1c9d@t ((lambda (pG1c9f@b) (values (cdr pG1c9f@b) pG1c8c@maps)) pG1c9d@t) (let ((pG1ca1@inner-var (pGb13@gen-lexical 'tmp))) (values pG1ca1@inner-var (cons (cons (cons pG1c9a@outer-var pG1ca1@inner-var) (car pG1c8c@maps)) pG1c99@outer-maps)))))))))))) (pG1c30@gen-append (lambda (pG1c85@x pG1c86@y) (if (fast-equal? pG1c86@y ''()) pG1c85@x (list 'append pG1c85@x pG1c86@y)))) (pG1c32@gen-mappend (lambda (pG1c81@e pG1c82@map-env) (list 'apply '(primitive append) (pG1c34@gen-map pG1c81@e pG1c82@map-env)))) (pG1c34@gen-map (lambda (pG1c6f@e pG1c70@map-env) (let ((pG1c73@formals (map cdr pG1c70@map-env)) (pG1c74@actuals (map (lambda (pG1c77@x) (list 'ref (car pG1c77@x))) pG1c70@map-env))) (if (eq? (car pG1c6f@e) 'ref) (car pG1c74@actuals) (if (for-all (lambda (pG1c79@x) (and (eq? (car pG1c79@x) 'ref) (memq (cadr pG1c79@x) pG1c73@formals))) (cdr pG1c6f@e)) (let ((pG1c7b@args (map (let ((pG1c7d@r (map cons pG1c73@formals pG1c74@actuals))) (lambda (pG1c7f@x) (cdr (assq (cadr pG1c7f@x) pG1c7d@r)))) (cdr pG1c6f@e)))) (cons 'map (cons (list 'primitive (car pG1c6f@e)) pG1c7b@args))) (cons* 'map (list 'lambda pG1c73@formals pG1c6f@e) pG1c74@actuals)))))) (pG1c36@gen-cons (lambda (pG1c5f@e pG1c60@x pG1c61@y pG1c62@xnew pG1c63@ynew) (let ((pG1c69@t (car pG1c63@ynew))) (if (memv pG1c69@t '(quote)) (if (eq? (car pG1c62@xnew) 'quote) (let ((pG1c6b@xnew (cadr pG1c62@xnew)) (pG1c6c@ynew (cadr pG1c63@ynew))) (if (and (eq? pG1c6b@xnew pG1c60@x) (eq? pG1c6c@ynew pG1c61@y)) (list 'quote pG1c5f@e) (list 'quote (cons pG1c6b@xnew pG1c6c@ynew)))) (if (null? (cadr pG1c63@ynew)) (list 'list pG1c62@xnew) (list 'cons pG1c62@xnew pG1c63@ynew))) (if (memv pG1c69@t '(list)) (cons 'list (cons pG1c62@xnew (cdr pG1c63@ynew))) (list 'cons pG1c62@xnew pG1c63@ynew)))))) (pG1c38@gen-vector (lambda (pG1c59@e pG1c5a@ls pG1c5b@lsnew) (if (eq? (car pG1c5b@lsnew) 'quote) (if (eq? (cadr pG1c5b@lsnew) pG1c5a@ls) (list 'quote pG1c59@e) (list 'quote (list->vector (cadr pG1c5b@lsnew)))) (if (eq? (car pG1c5b@lsnew) 'list) (cons 'vector (cdr pG1c5b@lsnew)) (list 'list->vector pG1c5b@lsnew))))) (pG1c3a@regen (lambda (pG1c53@x) (let ((pG1c55@t (car pG1c53@x))) (if (memv pG1c55@t '(ref)) (cadr pG1c53@x) (if (memv pG1c55@t '(primitive)) (list 'primitive (cadr pG1c53@x)) (if (memv pG1c55@t '(quote)) (list 'quote (cadr pG1c53@x)) (if (memv pG1c55@t '(lambda)) (pGaee@pGa20@build-lambda '#f (cadr pG1c53@x) (pG1c3a@regen (caddr pG1c53@x))) (if (memv pG1c55@t '(map)) (let ((pG1c57@ls (map pG1c3a@regen (cdr pG1c53@x)))) (cons '(primitive ellipsis-map) pG1c57@ls)) (cons (list 'primitive (car pG1c53@x)) (map pG1c3a@regen (cdr pG1c53@x)))))))))))) (lambda (pG1c3b@e pG1c3c@r pG1c3d@mr) (let ((pG1c41@t pG1c3b@e)) (let ((pG1c43@ls/false (pGd92@syntax-dispatch pG1c41@t '(_ any)))) (if pG1c43@ls/false (apply (lambda (pG1c45@x) (call-with-values (lambda () (pG1c2c@gen-syntax pG1c3b@e pG1c45@x pG1c3c@r '() pGd94@ellipsis? '#f)) (lambda (pG1c4b@pG1c48 pG1c4c@pG1c4a) (let ((pG1c4f@maps pG1c4c@pG1c4a) (pG1c50@e pG1c4b@pG1c48)) (pG1c3a@regen pG1c50@e))))) pG1c43@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1c41@t))))))) (set! pG28a4@pGd9e@syntax-transformer pGd9e@syntax-transformer) (set! pGda0@core-macro-transformer (lambda (pG1d73@name) (let ((pG1d75@t pG1d73@name)) (if (memv pG1d75@t '(quote)) pGd42@quote-transformer (if (memv pG1d75@t '(lambda)) pGd46@lambda-transformer (if (memv pG1d75@t '(case-lambda)) pGd44@case-lambda-transformer (if (memv pG1d75@t '(letrec)) pGd2a@letrec-transformer (if (memv pG1d75@t '(letrec*)) pGd2c@letrec*-transformer (if (memv pG1d75@t '(let)) pGd28@let-transformer (if (memv pG1d75@t '(if)) pGd3a@if-transformer (if (memv pG1d75@t '(and)) pGd3c@and-transformer (if (memv pG1d75@t '(or)) pGd3e@or-transformer (if (memv pG1d75@t '(foreign-call)) pGd8e@foreign-call-transformer (if (memv pG1d75@t '(syntax-case)) pGd9a@syntax-case-transformer (if (memv pG1d75@t '(syntax)) pGd9e@syntax-transformer (if (memv pG1d75@t '(type-descriptor)) pGd30@type-descriptor-transformer (if (memv pG1d75@t '(record-type-descriptor)) pGd32@record-type-descriptor-transformer (if (memv pG1d75@t '(record-constructor-descriptor)) pGd34@record-constructor-descriptor-transformer (if (memv pG1d75@t '(fluid-let-syntax)) pGd2e@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" pG1d73@name)))))))))))))))))))) (set! pG28a5@pGda0@core-macro-transformer pGda0@core-macro-transformer) (set! pGda2@symbol-macro (lambda (pG1d77@x pG1d78@set) (let ((pG1d7b@t pG1d77@x)) (let ((pG1d7d@ls/false (pGd92@syntax-dispatch pG1d7b@t '(_ any)))) (if (and pG1d7d@ls/false (apply (lambda (pG1d7f@name) (and (pGb8b@id? pG1d7f@name) (memq (pGb8d@id->sym pG1d7f@name) pG1d78@set))) pG1d7d@ls/false)) (apply (lambda (pG1d81@name) (pGd48@bless (list 'quote pG1d81@name))) pG1d7d@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1d7b@t)))))) (set! pG28a6@pGda2@symbol-macro pGda2@symbol-macro) (set! pGda4@macro-transformer (lambda (pG1d83@x) (if (procedure? pG1d83@x) pG1d83@x (if (symbol? pG1d83@x) (let ((pG1d85@t pG1d83@x)) (if (memv pG1d85@t '(define-record-type)) pGd86@define-record-type-macro (if (memv pG1d85@t '(define-struct)) pGd84@define-struct-macro (if (memv pG1d85@t '(include)) pGd7a@include-macro (if (memv pG1d85@t '(cond)) pGd76@cond-macro (if (memv pG1d85@t '(let)) pGd4e@let-macro (if (memv pG1d85@t '(do)) pGd6e@do-macro (if (memv pG1d85@t '(or)) pGd72@or-macro (if (memv pG1d85@t '(and)) pGd74@and-macro (if (memv pG1d85@t '(let*)) pGd70@let*-macro (if (memv pG1d85@t '(let-values)) pGd50@let-values-macro (if (memv pG1d85@t '(let*-values)) pGd52@let*-values-macro (if (memv pG1d85@t '(syntax-rules)) pGd7e@syntax-rules-macro (if (memv pG1d85@t '(quasiquote)) pGd80@quasiquote-macro (if (memv pG1d85@t '(quasisyntax)) pGd82@quasisyntax-macro (if (memv pG1d85@t '(with-syntax)) pGd4a@with-syntax-macro (if (memv pG1d85@t '(when)) pGd36@when-macro (if (memv pG1d85@t '(unless)) pGd38@unless-macro (if (memv pG1d85@t '(case)) pGd40@case-macro (if (memv pG1d85@t '(identifier-syntax)) pGd6c@identifier-syntax-macro (if (memv pG1d85@t '(time)) pGd64@time-macro (if (memv pG1d85@t '(delay)) pGd66@delay-macro (if (memv pG1d85@t '(assert)) pGd68@assert-macro (if (memv pG1d85@t '(endianness)) pGd6a@endianness-macro (if (memv pG1d85@t '(guard)) pGd60@guard-macro (if (memv pG1d85@t '(define-enumeration)) pGd62@define-enumeration-macro (if (memv pG1d85@t '(trace-lambda)) pGd54@trace-lambda-macro (if (memv pG1d85@t '(trace-define)) pGd56@trace-define-macro (if (memv pG1d85@t '(trace-define-syntax)) pGd58@trace-define-syntax-macro (if (memv pG1d85@t '(trace-let-syntax)) pGd5c@trace-let-syntax-macro (if (memv pG1d85@t '(trace-letrec-syntax)) pGd5e@trace-letrec-syntax-macro (if (memv pG1d85@t '(define-condition-type)) pGd88@define-condition-type-macro (if (memv pG1d85@t '(parameterize)) pGd8c@parameterize-macro (if (memv pG1d85@t '(include-into)) pGd7c@include-into-macro (if (memv pG1d85@t '(eol-style)) (lambda (pG1d87@x) (pGda2@symbol-macro pG1d87@x '(none lf cr crlf nel crnel ls))) (if (memv pG1d85@t '(error-handling-mode)) (lambda (pG1d89@x) (pGda2@symbol-macro pG1d89@x '(ignore raise replace))) (if (memv pG1d85@t '(buffer-mode)) (lambda (pG1d8b@x) (pGda2@symbol-macro pG1d8b@x '(none line block))) (if (memv pG1d85@t '(file-options)) pGb06@file-options-macro (if (memv pG1d85@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) pGd8a@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" pG1d83@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" pG1d83@x))))) (set! pG28a7@pGda4@macro-transformer pGda4@macro-transformer) (set! pGda6@local-macro-transformer (lambda (pG1d8d@x) (car pG1d8d@x))) (set! pG28a8@pGda6@local-macro-transformer pGda6@local-macro-transformer) (set! pGda8@do-macro-call (lambda (pG1d8f@transformer pG1d90@expr pG1d91@rib) (let ((pG1d95@out (pG1d8f@transformer (pGb77@add-mark pGb6f@anti-mark '#f pG1d90@expr '#f)))) (begin (let pG1d99@f ((pG1d97@x pG1d95@out)) (if (not (pGb57@stx? pG1d97@x)) (if (pair? pG1d97@x) (begin (pG1d99@f (car pG1d97@x)) (pG1d99@f (cdr pG1d97@x))) (if (vector? pG1d97@x) (vector-for-each pG1d99@f pG1d97@x) (if (symbol? pG1d97@x) (pGe72@syntax-violation '#f '"raw symbol encountered in output of macro" pG1d90@expr pG1d97@x) (void)))) (void))) (pGb77@add-mark (pGb6d@gen-mark) pG1d91@rib pG1d95@out pG1d90@expr))))) (set! pG28a9@pGda8@do-macro-call pGda8@do-macro-call) (set! pGdaa@chi-macro (lambda (pG1d9b@p pG1d9c@e pG1d9d@rib) (pGda8@do-macro-call (pGda4@macro-transformer pG1d9b@p) pG1d9c@e pG1d9d@rib))) (set! pG28aa@pGdaa@chi-macro pGdaa@chi-macro) (set! pGdac@chi-local-macro (lambda (pG1da1@p pG1da2@e pG1da3@rib) (pGda8@do-macro-call (pGda6@local-macro-transformer pG1da1@p) pG1da2@e pG1da3@rib))) (set! pG28ab@pGdac@chi-local-macro pGdac@chi-local-macro) (set! pGdae@chi-global-macro (lambda (pG1da7@p pG1da8@e pG1da9@rib) (let ((pG1dad@lib (car pG1da7@p)) (pG1dae@loc (cdr pG1da7@p))) (begin (pG9a8@pG7f7@visit-library pG1dad@lib) (let ((pG1db1@x (symbol-value pG1dae@loc))) (let ((pG1db3@transformer (if (procedure? pG1db1@x) pG1db1@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" pG1db1@x)))) (pGda8@do-macro-call pG1db3@transformer pG1da8@e pG1da9@rib))))))) (set! pG28ac@pGdae@chi-global-macro pGdae@chi-global-macro) (set! pGdb0@chi-expr* (lambda (pG1db5@e* pG1db6@r pG1db7@mr) (if (null? pG1db5@e*) '() (let ((pG1dbb@e (pGdb4@chi-expr (car pG1db5@e*) pG1db6@r pG1db7@mr))) (cons pG1dbb@e (pGdb0@chi-expr* (cdr pG1db5@e*) pG1db6@r pG1db7@mr)))))) (set! pG28ad@pGdb0@chi-expr* pGdb0@chi-expr*) (set! pGdb2@chi-application (lambda (pG1dbd@e pG1dbe@r pG1dbf@mr) (let ((pG1dc3@t pG1dbd@e)) (let ((pG1dc5@ls/false (pGd92@syntax-dispatch pG1dc3@t '(any . each-any)))) (if pG1dc5@ls/false (apply (lambda (pG1dc7@rator pG1dc8@rands) (let ((pG1dcb@rator (pGdb4@chi-expr pG1dc7@rator pG1dbe@r pG1dbf@mr))) (cons pG1dcb@rator (pGdb0@chi-expr* pG1dc8@rands pG1dbe@r pG1dbf@mr)))) pG1dc5@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1dc3@t)))))) (set! pG28ae@pGdb2@chi-application pGdb2@chi-application) (set! pGdb4@chi-expr (lambda (pG1dcd@e pG1dce@r pG1dcf@mr) (call-with-values (lambda () (pGbad@syntax-type pG1dcd@e pG1dce@r)) (lambda (pG1dd9@pG1dd4 pG1dda@pG1dd6 pG1ddb@pG1dd8) (let ((pG1ddf@kwd pG1ddb@pG1dd8) (pG1de0@value pG1dda@pG1dd6) (pG1de1@type pG1dd9@pG1dd4)) (let ((pG1de5@t pG1de1@type)) (if (memv pG1de5@t '(core-macro)) (let ((pG1de7@transformer (pGda0@core-macro-transformer pG1de0@value))) (pG1de7@transformer pG1dcd@e pG1dce@r pG1dcf@mr)) (if (memv pG1de5@t '(global)) (let ((pG1de9@lib (car pG1de0@value))) (let ((pG1deb@loc (cdr pG1de0@value))) (begin ((pGdfa@inv-collector) pG1de9@lib) pG1deb@loc))) (if (memv pG1de5@t '(core-prim)) (let ((pG1ded@name pG1de0@value)) (list 'primitive pG1ded@name)) (if (memv pG1de5@t '(call)) (pGdb2@chi-application pG1dcd@e pG1dce@r pG1dcf@mr) (if (memv pG1de5@t '(lexical)) (let ((pG1def@lex (pGd1c@lexical-var pG1de0@value))) pG1def@lex) (if (memv pG1de5@t '(global-macro global-macro!)) (pGdb4@chi-expr (pGdae@chi-global-macro pG1de0@value pG1dcd@e '#f) pG1dce@r pG1dcf@mr) (if (memv pG1de5@t '(local-macro local-macro!)) (pGdb4@chi-expr (pGdac@chi-local-macro pG1de0@value pG1dcd@e '#f) pG1dce@r pG1dcf@mr) (if (memv pG1de5@t '(macro macro!)) (pGdb4@chi-expr (pGdaa@chi-macro pG1de0@value pG1dcd@e '#f) pG1dce@r pG1dcf@mr) (if (memv pG1de5@t '(constant)) (let ((pG1df1@datum pG1de0@value)) (list 'quote pG1df1@datum)) (if (memv pG1de5@t '(set!)) (pGdb6@chi-set! pG1dcd@e pG1dce@r pG1dcf@mr) (if (memv pG1de5@t '(begin)) (let ((pG1df3@t pG1dcd@e)) (let ((pG1df5@ls/false (pGd92@syntax-dispatch pG1df3@t '(_ any . each-any)))) (if pG1df5@ls/false (apply (lambda (pG1df7@x pG1df8@x*) (pGaf0@pGa50@build-sequence '#f (pGdb0@chi-expr* (cons pG1df7@x pG1df8@x*) pG1dce@r pG1dcf@mr))) pG1df5@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1df3@t)))) (if (memv pG1de5@t '(let-syntax letrec-syntax)) (let ((pG1dfb@t pG1dcd@e)) (let ((pG1dfd@ls/false (pGd92@syntax-dispatch pG1dfb@t '(_ #(each (any any)) any . each-any)))) (if (and pG1dfd@ls/false (apply (lambda (pG1dff@xlhs* pG1e00@xrhs* pG1e01@xbody pG1e02@xbody*) (if (not (pGb93@valid-bound-ids? pG1dff@xlhs*)) (pGe72@syntax-violation '#f '"invalid identifiers" pG1dcd@e) (void))) pG1dfd@ls/false)) (apply (lambda (pG1e07@xlhs* pG1e08@xrhs* pG1e09@xbody pG1e0a@xbody*) (let ((pG1e0f@xlab* (map pGb17@gen-label pG1e07@xlhs*))) (let ((pG1e11@xrib (pGb4b@make-full-rib pG1e07@xlhs* pG1e0f@xlab*))) (let ((pG1e13@xb* (map (lambda (pG1e15@x) (pGbc3@make-eval-transformer (pGdec@expand-transformer (if (eq? pG1de1@type 'let-syntax) pG1e15@x (pGb75@add-subst pG1e11@xrib pG1e15@x)) pG1dcf@mr))) pG1e08@xrhs*))) (pGaf0@pGa50@build-sequence '#f (pGdb0@chi-expr* (map (lambda (pG1e17@x) (pGb75@add-subst pG1e11@xrib pG1e17@x)) (cons pG1e09@xbody pG1e0a@xbody*)) (append (map cons pG1e0f@xlab* pG1e13@xb*) pG1dce@r) (append (map cons pG1e0f@xlab* pG1e13@xb*) pG1dcf@mr))))))) pG1dfd@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1dfb@t)))) (if (memv pG1de5@t '(displaced-lexical)) (pGe72@syntax-violation '#f '"identifier out of context" pG1dcd@e) (if (memv pG1de5@t '(syntax)) (pGe72@syntax-violation '#f '"reference to pattern variable outside a syntax form" pG1dcd@e) (if (memv pG1de5@t '(define define-syntax module import library)) (pGe72@syntax-violation '#f (string-append (let ((pG1e19@t pG1de1@type)) (if (memv pG1e19@t '(define)) '"a definition" (if (memv pG1e19@t '(define-syntax)) '"a define-syntax" (if (memv pG1e19@t '(module)) '"a module definition" (if (memv pG1e19@t '(library)) '"a library definition" (if (memv pG1e19@t '(import)) '"an import declaration" (if (memv pG1e19@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") pG1dcd@e) (if (memv pG1de5@t '(mutable)) (pGe72@syntax-violation '#f '"attempt to reference an unexportable variable" pG1dcd@e) (pGe72@syntax-violation '#f '"invalid expression" pG1dcd@e))))))))))))))))))))))) (set! pG28af@pGdb4@chi-expr pGdb4@chi-expr) (set! pGdb6@chi-set! (lambda (pG1e1b@e pG1e1c@r pG1e1d@mr) (let ((pG1e21@t pG1e1b@e)) (let ((pG1e23@ls/false (pGd92@syntax-dispatch pG1e21@t '(_ any any)))) (if (and pG1e23@ls/false (apply (lambda (pG1e25@x pG1e26@v) (pGb8b@id? pG1e25@x)) pG1e23@ls/false)) (apply (lambda (pG1e29@x pG1e2a@v) (call-with-values (lambda () (pGbad@syntax-type pG1e29@x pG1e1c@r)) (lambda (pG1e33@pG1e2e pG1e34@pG1e30 pG1e35@pG1e32) (let ((pG1e39@kwd pG1e35@pG1e32) (pG1e3a@value pG1e34@pG1e30) (pG1e3b@type pG1e33@pG1e2e)) (let ((pG1e3f@t pG1e3b@type)) (if (memv pG1e3f@t '(lexical)) (begin (pGd20@set-lexical-mutable! pG1e3a@value '#t) (list 'set! (pGd1c@lexical-var pG1e3a@value) (pGdb4@chi-expr pG1e2a@v pG1e1c@r pG1e1d@mr))) (if (memv pG1e3f@t '(core-prim)) (pGe72@syntax-violation '#f '"cannot modify imported core primitive" pG1e1b@e) (if (memv pG1e3f@t '(global)) (pGe72@syntax-violation '#f '"attempt to modify imported binding" pG1e1b@e) (if (memv pG1e3f@t '(global-macro!)) (pGdb4@chi-expr (pGdae@chi-global-macro pG1e3a@value pG1e1b@e '#f) pG1e1c@r pG1e1d@mr) (if (memv pG1e3f@t '(local-macro!)) (pGdb4@chi-expr (pGdac@chi-local-macro pG1e3a@value pG1e1b@e '#f) pG1e1c@r pG1e1d@mr) (if (memv pG1e3f@t '(mutable)) (pGe72@syntax-violation '#f '"attempt to assign to an unexportable variable" pG1e1b@e) (pGe72@syntax-violation '#f '"invalid syntax" pG1e1b@e)))))))))))) pG1e23@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1e21@t)))))) (set! pG28b0@pGdb6@chi-set! pGdb6@chi-set!) (set! pGdb8@verify-formals (lambda (pG1e41@fmls pG1e42@stx) (let ((pG1e45@t pG1e41@fmls)) (let ((pG1e47@ls/false (pGd92@syntax-dispatch pG1e45@t 'each-any))) (if pG1e47@ls/false (apply (lambda (pG1e49@x*) (if (not (pGb93@valid-bound-ids? pG1e49@x*)) (pGd4c@invalid-fmls-error pG1e42@stx pG1e41@fmls) (void))) pG1e47@ls/false) (let ((pG1e4b@t pG1e45@t)) (let ((pG1e4d@ls/false (pGd92@syntax-dispatch pG1e4b@t '#(each+ any () any)))) (if pG1e4d@ls/false (apply (lambda (pG1e4f@x* pG1e50@x) (if (not (pGb93@valid-bound-ids? (cons pG1e50@x pG1e4f@x*))) (pGd4c@invalid-fmls-error pG1e42@stx pG1e41@fmls) (void))) pG1e4d@ls/false) (let ((pG1e53@t pG1e4b@t)) (let ((pG1e55@ls/false (pGd92@syntax-dispatch pG1e53@t '_))) (if pG1e55@ls/false (apply (lambda () (pGe72@syntax-violation '#f '"invalid syntax" pG1e42@stx)) pG1e55@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1e53@t)))))))))))) (set! pG28b1@pGdb8@verify-formals pGdb8@verify-formals) (set! pGdba@chi-lambda-clause (lambda (pG1e57@stx pG1e58@fmls pG1e59@body* pG1e5a@r pG1e5b@mr) (let ((pG1e61@t pG1e58@fmls)) (let ((pG1e63@ls/false (pGd92@syntax-dispatch pG1e61@t 'each-any))) (if pG1e63@ls/false (apply (lambda (pG1e65@x*) (begin (pGdb8@verify-formals pG1e58@fmls pG1e57@stx) (let ((pG1e67@lex* (map pGb13@gen-lexical pG1e65@x*)) (pG1e68@lab* (map pGb17@gen-label pG1e65@x*))) (values pG1e67@lex* (pGdca@chi-internal (pGb75@add-subst (pGb4b@make-full-rib pG1e65@x* pG1e68@lab*) pG1e59@body*) (pGd24@add-lexicals pG1e68@lab* pG1e67@lex* pG1e5a@r) pG1e5b@mr))))) pG1e63@ls/false) (let ((pG1e6b@t pG1e61@t)) (let ((pG1e6d@ls/false (pGd92@syntax-dispatch pG1e6b@t '#(each+ any () any)))) (if pG1e6d@ls/false (apply (lambda (pG1e6f@x* pG1e70@x) (begin (pGdb8@verify-formals pG1e58@fmls pG1e57@stx) (let ((pG1e73@lex* (map pGb13@gen-lexical pG1e6f@x*)) (pG1e74@lab* (map pGb17@gen-label pG1e6f@x*)) (pG1e75@lex (pGb13@gen-lexical pG1e70@x)) (pG1e76@lab (pGb17@gen-label pG1e70@x))) (values (append pG1e73@lex* pG1e75@lex) (pGdca@chi-internal (pGb75@add-subst (pGb4b@make-full-rib (cons pG1e70@x pG1e6f@x*) (cons pG1e76@lab pG1e74@lab*)) pG1e59@body*) (pGd24@add-lexicals (cons pG1e76@lab pG1e74@lab*) (cons pG1e75@lex pG1e73@lex*) pG1e5a@r) pG1e5b@mr))))) pG1e6d@ls/false) (let ((pG1e7b@t pG1e6b@t)) (let ((pG1e7d@ls/false (pGd92@syntax-dispatch pG1e7b@t '_))) (if pG1e7d@ls/false (apply (lambda () (pGe72@syntax-violation '#f '"invalid syntax" pG1e58@fmls)) pG1e7d@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1e7b@t)))))))))))) (set! pG28b2@pGdba@chi-lambda-clause pGdba@chi-lambda-clause) (set! pGdbc@chi-lambda-clause* (lambda (pG1e7f@stx pG1e80@fmls* pG1e81@body** pG1e82@r pG1e83@mr) (if (null? pG1e80@fmls*) (values '() '()) (call-with-values (lambda () (pGdba@chi-lambda-clause pG1e7f@stx (car pG1e80@fmls*) (car pG1e81@body**) pG1e82@r pG1e83@mr)) (lambda (pG1e8d@pG1e8a pG1e8e@pG1e8c) (let ((pG1e91@b pG1e8e@pG1e8c) (pG1e92@a pG1e8d@pG1e8a)) (call-with-values (lambda () (pGdbc@chi-lambda-clause* pG1e7f@stx (cdr pG1e80@fmls*) (cdr pG1e81@body**) pG1e82@r pG1e83@mr)) (lambda (pG1e99@pG1e96 pG1e9a@pG1e98) (let ((pG1e9d@b* pG1e9a@pG1e98) (pG1e9e@a* pG1e99@pG1e96)) (values (cons pG1e92@a pG1e9e@a*) (cons pG1e91@b pG1e9d@b*))))))))))) (set! pG28b3@pGdbc@chi-lambda-clause* pGdbc@chi-lambda-clause*) (set! pGdbe@chi-defun (lambda (pG1ea1@x pG1ea2@r pG1ea3@mr) (let ((pG1ea7@fmls (car pG1ea1@x)) (pG1ea8@body* (cdr pG1ea1@x))) (call-with-values (lambda () (pGdba@chi-lambda-clause pG1ea7@fmls pG1ea7@fmls pG1ea8@body* pG1ea2@r pG1ea3@mr)) (lambda (pG1eaf@pG1eac pG1eb0@pG1eae) (let ((pG1eb3@body pG1eb0@pG1eae) (pG1eb4@fmls pG1eaf@pG1eac)) (pGaee@pGa20@build-lambda '#f pG1eb4@fmls pG1eb3@body))))))) (set! pG28b4@pGdbe@chi-defun pGdbe@chi-defun) (set! pGdc0@chi-rhs (lambda (pG1eb7@rhs pG1eb8@r pG1eb9@mr) (let ((pG1ebd@t (car pG1eb7@rhs))) (if (memv pG1ebd@t '(defun)) (pGdbe@chi-defun (cdr pG1eb7@rhs) pG1eb8@r pG1eb9@mr) (if (memv pG1ebd@t '(expr)) (let ((pG1ebf@expr (cdr pG1eb7@rhs))) (pGdb4@chi-expr pG1ebf@expr pG1eb8@r pG1eb9@mr)) (if (memv pG1ebd@t '(top-expr)) (let ((pG1ec1@expr (cdr pG1eb7@rhs))) (pGaf0@pGa50@build-sequence '#f (list (pGdb4@chi-expr pG1ec1@expr pG1eb8@r pG1eb9@mr) (pGaf1@pGa52@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" pG1eb7@rhs))))))) (set! pG28b5@pGdc0@chi-rhs pGdc0@chi-rhs) (set! pGdc2@expand-interaction-rhs*/init* (lambda (pG1ec3@lhs* pG1ec4@rhs* pG1ec5@init* pG1ec6@r pG1ec7@mr) (let pG1ed1@f ((pG1ecd@lhs* pG1ec3@lhs*) (pG1ece@rhs* pG1ec4@rhs*)) (if (null? pG1ecd@lhs*) (map (lambda (pG1ed3@x) (pGdb4@chi-expr pG1ed3@x pG1ec6@r pG1ec7@mr)) pG1ec5@init*) (let ((pG1ed5@lhs (car pG1ecd@lhs*)) (pG1ed6@rhs (car pG1ece@rhs*))) (let ((pG1ed9@t (car pG1ed6@rhs))) (if (memv pG1ed9@t '(defun)) (let ((pG1edb@rhs (pGdbe@chi-defun (cdr pG1ed6@rhs) pG1ec6@r pG1ec7@mr))) (cons (list 'set! pG1ed5@lhs pG1edb@rhs) (pG1ed1@f (cdr pG1ecd@lhs*) (cdr pG1ece@rhs*)))) (if (memv pG1ed9@t '(expr)) (let ((pG1edd@rhs (pGdb4@chi-expr (cdr pG1ed6@rhs) pG1ec6@r pG1ec7@mr))) (cons (list 'set! pG1ed5@lhs pG1edd@rhs) (pG1ed1@f (cdr pG1ecd@lhs*) (cdr pG1ece@rhs*)))) (if (memv pG1ed9@t '(top-expr)) (let ((pG1edf@e (pGdb4@chi-expr (cdr pG1ed6@rhs) pG1ec6@r pG1ec7@mr))) (cons pG1edf@e (pG1ed1@f (cdr pG1ecd@lhs*) (cdr pG1ece@rhs*)))) (error 'expand-interaction '"invallid" pG1ed6@rhs)))))))))) (set! pG28b6@pGdc2@expand-interaction-rhs*/init* pGdc2@expand-interaction-rhs*/init*) (set! pGdc4@chi-rhs* (lambda (pG1ee1@rhs* pG1ee2@r pG1ee3@mr) (let pG1ee9@f ((pG1ee7@ls pG1ee1@rhs*)) (if (null? pG1ee7@ls) '() (let ((pG1eeb@a (pGdc0@chi-rhs (car pG1ee7@ls) pG1ee2@r pG1ee3@mr))) (cons pG1eeb@a (pG1ee9@f (cdr pG1ee7@ls)))))))) (set! pG28b7@pGdc4@chi-rhs* pGdc4@chi-rhs*) (set! pGdc6@find-bound=? (lambda (pG1eed@x pG1eee@lhs* pG1eef@rhs*) (if (null? pG1eee@lhs*) '#f (if (pGb8f@bound-id=? pG1eed@x (car pG1eee@lhs*)) (car pG1eef@rhs*) (pGdc6@find-bound=? pG1eed@x (cdr pG1eee@lhs*) (cdr pG1eef@rhs*)))))) (set! pG28b8@pGdc6@find-bound=? pGdc6@find-bound=?) (set! pGdc8@find-dups (lambda (pG1ef3@ls) (let pG1ef9@f ((pG1ef5@ls pG1ef3@ls) (pG1ef6@dups '())) (if (null? pG1ef5@ls) pG1ef6@dups (let ((pG1efb@t (pGdc6@find-bound=? (car pG1ef5@ls) (cdr pG1ef5@ls) (cdr pG1ef5@ls)))) (if pG1efb@t ((lambda (pG1efd@x) (pG1ef9@f (cdr pG1ef5@ls) (cons (list (car pG1ef5@ls) pG1efd@x) pG1ef6@dups))) pG1efb@t) (pG1ef9@f (cdr pG1ef5@ls) pG1ef6@dups))))))) (set! pG28b9@pGdc8@find-dups pGdc8@find-dups) (set! pGdca@chi-internal (lambda (pG1eff@e* pG1f00@r pG1f01@mr) (let ((pG1f05@rib (pGb3f@make-empty-rib))) (call-with-values (lambda () (pGdea@chi-body* (map (lambda (pG1f17@x) (pGb75@add-subst pG1f05@rib pG1f17@x)) (pGb89@syntax->list pG1eff@e*)) pG1f00@r pG1f01@mr '() '() '() '() '() pG1f05@rib '#f)) (lambda (pG1f19@pG1f08 pG1f1a@pG1f0a pG1f1b@pG1f0c pG1f1c@pG1f0e pG1f1d@pG1f10 pG1f1e@pG1f12 pG1f1f@pG1f14 pG1f20@pG1f16) (let ((pG1f29@_exp* pG1f20@pG1f16) (pG1f2a@kwd* pG1f1f@pG1f14) (pG1f2b@mod** pG1f1e@pG1f12) (pG1f2c@rhs* pG1f1d@pG1f10) (pG1f2d@lex* pG1f1c@pG1f0e) (pG1f2e@mr pG1f1b@pG1f0c) (pG1f2f@r pG1f1a@pG1f0a) (pG1f30@e* pG1f19@pG1f08)) (begin (if (null? pG1f30@e*) (pGe72@syntax-violation '#f '"no expression in body" pG1f30@e*) (void)) (let ((pG1f39@init* (pGdb0@chi-expr* (append (apply append (reverse pG1f2b@mod**)) pG1f30@e*) pG1f2f@r pG1f2e@mr))) (let ((pG1f3b@rhs* (pGdc4@chi-rhs* pG1f2c@rhs* pG1f2f@r pG1f2e@mr))) (pGaf5@pGa5a@build-letrec* '#f (reverse pG1f2d@lex*) (reverse pG1f3b@rhs*) (pGaf0@pGa50@build-sequence '#f pG1f39@init*))))))))))) (set! pG28ba@pGdca@chi-internal pGdca@chi-internal) (set! pGdcc@parse-module (lambda (pG1f3d@e) (let ((pG1f3f@t pG1f3d@e)) (let ((pG1f41@ls/false (pGd92@syntax-dispatch pG1f3f@t '(_ each-any . each-any)))) (if pG1f41@ls/false (apply (lambda (pG1f43@export* pG1f44@b*) (begin (if (not (for-all pGb8b@id? pG1f43@export*)) (pGe72@syntax-violation '#f '"module exports must be identifiers" pG1f3d@e) (void)) (values '#f (list->vector pG1f43@export*) pG1f44@b*))) pG1f41@ls/false) (let ((pG1f47@t pG1f3f@t)) (let ((pG1f49@ls/false (pGd92@syntax-dispatch pG1f47@t '(_ any each-any . each-any)))) (if pG1f49@ls/false (apply (lambda (pG1f4b@name pG1f4c@export* pG1f4d@b*) (begin (if (not (pGb8b@id? pG1f4b@name)) (pGe72@syntax-violation '#f '"module name must be an identifier" pG1f3d@e) (void)) (if (not (for-all pGb8b@id? pG1f4c@export*)) (pGe72@syntax-violation '#f '"module exports must be identifiers" pG1f3d@e) (void)) (values pG1f4b@name (list->vector pG1f4c@export*) pG1f4d@b*))) pG1f49@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG1f47@t))))))))) (set! pG28bb@pGdcc@parse-module pGdcc@parse-module) (set! pGdd6@module-interface? (lambda (pG1f51@x) (and (simple-struct? pG1f51@x) (eq? (simple-struct-name pG1f51@x) 'module-interface)))) (set! pG28bc@pGdd6@module-interface? pGdd6@module-interface?) (set! pGdd8@module-interface-first-mark (lambda (pG1f53@x) (simple-struct-ref pG1f53@x '0))) (set! pG28bd@pGdd8@module-interface-first-mark pGdd8@module-interface-first-mark) (set! pGdda@set-module-interface-first-mark! (lambda (pG1f55@x pG1f56@val) (simple-struct-set! pG1f55@x '0 pG1f56@val))) (set! pG28be@pGdda@set-module-interface-first-mark! pGdda@set-module-interface-first-mark!) (set! pGddc@module-interface-exp-id-vec (lambda (pG1f59@x) (simple-struct-ref pG1f59@x '1))) (set! pG28bf@pGddc@module-interface-exp-id-vec pGddc@module-interface-exp-id-vec) (set! pGdde@set-module-interface-exp-id-vec! (lambda (pG1f5b@x pG1f5c@val) (simple-struct-set! pG1f5b@x '1 pG1f5c@val))) (set! pG28c0@pGdde@set-module-interface-exp-id-vec! pGdde@set-module-interface-exp-id-vec!) (set! pGde0@module-interface-exp-lab-vec (lambda (pG1f5f@x) (simple-struct-ref pG1f5f@x '2))) (set! pG28c1@pGde0@module-interface-exp-lab-vec pGde0@module-interface-exp-lab-vec) (set! pGde2@set-module-interface-exp-lab-vec! (lambda (pG1f61@x pG1f62@val) (simple-struct-set! pG1f61@x '2 pG1f62@val))) (set! pG28c2@pGde2@set-module-interface-exp-lab-vec! pGde2@set-module-interface-exp-lab-vec!) (set! pGde4@dummy '3) (set! pG28c3@pGde4@dummy pGde4@dummy) (set! pGde6@module-interface-exp-id* (lambda (pG1f65@iface pG1f66@id) (letrec* ((pG1f6a@diff-marks (lambda (pG1f71@ls pG1f72@x) (begin (if (null? pG1f71@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((pG1f75@a (car pG1f71@ls))) (if (eq? pG1f75@a pG1f72@x) '() (cons pG1f75@a (pG1f6a@diff-marks (cdr pG1f71@ls) pG1f72@x)))))))) (let ((pG1f6b@diff (pG1f6a@diff-marks (pGb5d@stx-mark* pG1f66@id) (pGdd8@module-interface-first-mark pG1f65@iface))) (pG1f6c@id-vec (pGddc@module-interface-exp-id-vec pG1f65@iface))) (if (null? pG1f6b@diff) pG1f6c@id-vec (vector-map (lambda (pG1f6f@x) (make-simple-struct 'stx '5 (list (pGb59@stx-expr pG1f6f@x) (append pG1f6b@diff (pGb5d@stx-mark* pG1f6f@x)) '() '()))) pG1f6c@id-vec)))))) (set! pG28c4@pGde6@module-interface-exp-id* pGde6@module-interface-exp-id*) (set! pGde8@chi-internal-module (lambda (pG1f77@e pG1f78@r pG1f79@mr pG1f7a@lex* pG1f7b@rhs* pG1f7c@mod** pG1f7d@kwd*) (call-with-values (lambda () (pGdcc@parse-module pG1f77@e)) (lambda (pG1f8b@pG1f86 pG1f8c@pG1f88 pG1f8d@pG1f8a) (let ((pG1f91@e* pG1f8d@pG1f8a) (pG1f92@exp-id* pG1f8c@pG1f88) (pG1f93@name pG1f8b@pG1f86)) (let ((pG1f97@rib (pGb3f@make-empty-rib))) (let ((pG1f99@e* (map (lambda (pG1f9b@x) (pGb75@add-subst pG1f97@rib pG1f9b@x)) (pGb89@syntax->list pG1f91@e*)))) (call-with-values (lambda () (pGdea@chi-body* pG1f99@e* pG1f78@r pG1f79@mr pG1f7a@lex* pG1f7b@rhs* pG1f7c@mod** pG1f7d@kwd* '() pG1f97@rib '#f)) (lambda (pG1fad@pG1f9e pG1fae@pG1fa0 pG1faf@pG1fa2 pG1fb0@pG1fa4 pG1fb1@pG1fa6 pG1fb2@pG1fa8 pG1fb3@pG1faa pG1fb4@pG1fac) (let ((pG1fbd@_exp* pG1fb4@pG1fac) (pG1fbe@kwd* pG1fb3@pG1faa) (pG1fbf@mod** pG1fb2@pG1fa8) (pG1fc0@rhs* pG1fb1@pG1fa6) (pG1fc1@lex* pG1fb0@pG1fa4) (pG1fc2@mr pG1faf@pG1fa2) (pG1fc3@r pG1fae@pG1fa0) (pG1fc4@e* pG1fad@pG1f9e)) (let ((pG1fcd@exp-lab* (vector-map (lambda (pG1fd1@x) (or (pGba1@id->label (make-simple-struct 'stx '5 (list (pGb8d@id->sym pG1fd1@x) (pGb5d@stx-mark* pG1fd1@x) (list pG1f97@rib) '()))) (pGe72@syntax-violation '#f '"cannot find module export" pG1fd1@x))) pG1f92@exp-id*)) (pG1fce@mod** (cons pG1fc4@e* pG1fbf@mod**))) (if (not pG1f93@name) (values pG1fc1@lex* pG1fc0@rhs* pG1f92@exp-id* pG1fcd@exp-lab* pG1fc3@r pG1fc2@mr pG1fce@mod** pG1fbe@kwd*) (let ((pG1fd3@lab (pGb17@gen-label 'module)) (pG1fd4@iface (make-simple-struct 'module-interface '4 (list (car (pGb5d@stx-mark* pG1f93@name)) (vector-map (lambda (pG1fd7@x) (make-simple-struct 'stx '5 (list (pGb59@stx-expr pG1fd7@x) (pGb5d@stx-mark* pG1fd7@x) '() '()))) pG1f92@exp-id*) pG1fcd@exp-lab*)))) (values pG1fc1@lex* pG1fc0@rhs* (vector pG1f93@name) (vector pG1fd3@lab) (cons (cons pG1fd3@lab (cons '$module pG1fd4@iface)) pG1fc3@r) (cons (cons pG1fd3@lab (cons '$module pG1fd4@iface)) pG1fc2@mr) pG1fce@mod** pG1fbe@kwd*)))))))))))))) (set! pG28c5@pGde8@chi-internal-module pGde8@chi-internal-module) (set! pGdea@chi-body* (lambda (pG1fd9@e* pG1fda@r pG1fdb@mr pG1fdc@lex* pG1fdd@rhs* pG1fde@mod** pG1fdf@kwd* pG1fe0@exp* pG1fe1@rib pG1fe2@top?) (if (null? pG1fd9@e*) (values pG1fd9@e* pG1fda@r pG1fdb@mr pG1fdc@lex* pG1fdd@rhs* pG1fde@mod** pG1fdf@kwd* pG1fe0@exp*) (let ((pG1fed@e (car pG1fd9@e*))) (call-with-values (lambda () (pGbad@syntax-type pG1fed@e pG1fda@r)) (lambda (pG1ff5@pG1ff0 pG1ff6@pG1ff2 pG1ff7@pG1ff4) (let ((pG1ffb@kwd pG1ff7@pG1ff4) (pG1ffc@value pG1ff6@pG1ff2) (pG1ffd@type pG1ff5@pG1ff0)) (let ((pG2001@kwd* (if (pGb8b@id? pG1ffb@kwd) (cons pG1ffb@kwd pG1fdf@kwd*) pG1fdf@kwd*))) (let ((pG2003@t pG1ffd@type)) (if (memv pG2003@t '(define)) (call-with-values (lambda () (pGd14@parse-define pG1fed@e)) (lambda (pG2009@pG2006 pG200a@pG2008) (let ((pG200d@rhs pG200a@pG2008) (pG200e@id pG2009@pG2006)) (begin (if (pGb97@bound-id-member? pG200e@id pG2001@kwd*) (pGe72@syntax-violation '#f '"cannot redefine keyword" pG1fed@e) (void)) (call-with-values (lambda () (pGb1b@gen-define-label+loc pG200e@id pG1fe1@rib)) (lambda (pG2015@pG2012 pG2016@pG2014) (let ((pG2019@lex pG2016@pG2014) (pG201a@lab pG2015@pG2012)) (begin (pGb41@extend-rib! pG1fe1@rib pG200e@id pG201a@lab) (pGdea@chi-body* (cdr pG1fd9@e*) (pGd22@add-lexical pG201a@lab pG2019@lex pG1fda@r) pG1fdb@mr (cons pG2019@lex pG1fdc@lex*) (cons pG200d@rhs pG1fdd@rhs*) pG1fde@mod** pG2001@kwd* pG1fe0@exp* pG1fe1@rib pG1fe2@top?))))))))) (if (memv pG2003@t '(define-syntax)) (call-with-values (lambda () (pGd16@parse-define-syntax pG1fed@e)) (lambda (pG2021@pG201e pG2022@pG2020) (let ((pG2025@rhs pG2022@pG2020) (pG2026@id pG2021@pG201e)) (begin (if (pGb97@bound-id-member? pG2026@id pG2001@kwd*) (pGe72@syntax-violation '#f '"cannot redefine keyword" pG1fed@e) (void)) (let ((pG2029@lab (pGb1d@gen-define-label pG2026@id pG1fe1@rib)) (pG202a@expanded-rhs (pGdec@expand-transformer pG2025@rhs pG1fdb@mr))) (begin (pGb41@extend-rib! pG1fe1@rib pG2026@id pG2029@lab) (let ((pG202d@b (pGbc3@make-eval-transformer pG202a@expanded-rhs))) (pGdea@chi-body* (cdr pG1fd9@e*) (cons (cons pG2029@lab pG202d@b) pG1fda@r) (cons (cons pG2029@lab pG202d@b) pG1fdb@mr) pG1fdc@lex* pG1fdd@rhs* pG1fde@mod** pG2001@kwd* pG1fe0@exp* pG1fe1@rib pG1fe2@top?)))))))) (if (memv pG2003@t '(let-syntax letrec-syntax)) (let ((pG202f@t pG1fed@e)) (let ((pG2031@ls/false (pGd92@syntax-dispatch pG202f@t '(_ #(each (any any)) . each-any)))) (if (and pG2031@ls/false (apply (lambda (pG2033@xlhs* pG2034@xrhs* pG2035@xbody*) (if (not (pGb93@valid-bound-ids? pG2033@xlhs*)) (pGe72@syntax-violation '#f '"invalid identifiers" pG1fed@e) (void))) pG2031@ls/false)) (apply (lambda (pG2039@xlhs* pG203a@xrhs* pG203b@xbody*) (let ((pG203f@xlab* (map pGb17@gen-label pG2039@xlhs*))) (let ((pG2041@xrib (pGb4b@make-full-rib pG2039@xlhs* pG203f@xlab*))) (let ((pG2043@xb* (map (lambda (pG2045@x) (pGbc3@make-eval-transformer (pGdec@expand-transformer (if (eq? pG1ffd@type 'let-syntax) pG2045@x (pGb75@add-subst pG2041@xrib pG2045@x)) pG1fdb@mr))) pG203a@xrhs*))) (pGdea@chi-body* (append (map (lambda (pG2047@x) (pGb75@add-subst pG2041@xrib pG2047@x)) pG203b@xbody*) (cdr pG1fd9@e*)) (append (map cons pG203f@xlab* pG2043@xb*) pG1fda@r) (append (map cons pG203f@xlab* pG2043@xb*) pG1fdb@mr) pG1fdc@lex* pG1fdd@rhs* pG1fde@mod** pG2001@kwd* pG1fe0@exp* pG1fe1@rib pG1fe2@top?))))) pG2031@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG202f@t)))) (if (memv pG2003@t '(begin)) (let ((pG2049@t pG1fed@e)) (let ((pG204b@ls/false (pGd92@syntax-dispatch pG2049@t '(_ . each-any)))) (if pG204b@ls/false (apply (lambda (pG204d@x*) (pGdea@chi-body* (append pG204d@x* (cdr pG1fd9@e*)) pG1fda@r pG1fdb@mr pG1fdc@lex* pG1fdd@rhs* pG1fde@mod** pG2001@kwd* pG1fe0@exp* pG1fe1@rib pG1fe2@top?)) pG204b@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG2049@t)))) (if (memv pG2003@t '(global-macro global-macro!)) (pGdea@chi-body* (cons (pGdae@chi-global-macro pG1ffc@value pG1fed@e pG1fe1@rib) (cdr pG1fd9@e*)) pG1fda@r pG1fdb@mr pG1fdc@lex* pG1fdd@rhs* pG1fde@mod** pG2001@kwd* pG1fe0@exp* pG1fe1@rib pG1fe2@top?) (if (memv pG2003@t '(local-macro local-macro!)) (pGdea@chi-body* (cons (pGdac@chi-local-macro pG1ffc@value pG1fed@e pG1fe1@rib) (cdr pG1fd9@e*)) pG1fda@r pG1fdb@mr pG1fdc@lex* pG1fdd@rhs* pG1fde@mod** pG2001@kwd* pG1fe0@exp* pG1fe1@rib pG1fe2@top?) (if (memv pG2003@t '(macro macro!)) (pGdea@chi-body* (cons (pGdaa@chi-macro pG1ffc@value pG1fed@e pG1fe1@rib) (cdr pG1fd9@e*)) pG1fda@r pG1fdb@mr pG1fdc@lex* pG1fdd@rhs* pG1fde@mod** pG2001@kwd* pG1fe0@exp* pG1fe1@rib pG1fe2@top?) (if (memv pG2003@t '(module)) (call-with-values (lambda () (pGde8@chi-internal-module pG1fed@e pG1fda@r pG1fdb@mr pG1fdc@lex* pG1fdd@rhs* pG1fde@mod** pG2001@kwd*)) (lambda (pG205f@pG2050 pG2060@pG2052 pG2061@pG2054 pG2062@pG2056 pG2063@pG2058 pG2064@pG205a pG2065@pG205c pG2066@pG205e) (let ((pG206f@kwd* pG2066@pG205e) (pG2070@mod** pG2065@pG205c) (pG2071@mr pG2064@pG205a) (pG2072@r pG2063@pG2058) (pG2073@m-exp-lab* pG2062@pG2056) (pG2074@m-exp-id* pG2061@pG2054) (pG2075@rhs* pG2060@pG2052) (pG2076@lex* pG205f@pG2050)) (begin (vector-for-each (lambda (pG207f@id pG2080@lab) (pGb41@extend-rib! pG1fe1@rib pG207f@id pG2080@lab)) pG2074@m-exp-id* pG2073@m-exp-lab*) (pGdea@chi-body* (cdr pG1fd9@e*) pG2072@r pG2071@mr pG2076@lex* pG2075@rhs* pG2070@mod** pG206f@kwd* pG1fe0@exp* pG1fe1@rib pG1fe2@top?))))) (if (memv pG2003@t '(library)) (begin (pGe54@library-expander (pGb9f@stx->datum pG1fed@e)) (pGdea@chi-body* (cdr pG1fd9@e*) pG1fda@r pG1fdb@mr pG1fdc@lex* pG1fdd@rhs* pG1fde@mod** pG2001@kwd* pG1fe0@exp* pG1fe1@rib pG1fe2@top?)) (if (memv pG2003@t '(export)) (let ((pG2083@t pG1fed@e)) (let ((pG2085@ls/false (pGd92@syntax-dispatch pG2083@t '(_ . each-any)))) (if pG2085@ls/false (apply (lambda (pG2087@exp-decl*) (pGdea@chi-body* (cdr pG1fd9@e*) pG1fda@r pG1fdb@mr pG1fdc@lex* pG1fdd@rhs* pG1fde@mod** pG2001@kwd* (append pG2087@exp-decl* pG1fe0@exp*) pG1fe1@rib pG1fe2@top?)) pG2085@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG2083@t)))) (if (memv pG2003@t '(import)) (letrec* ((pG208a@module-import? (lambda (pG20dd@e) (let ((pG20df@t pG20dd@e)) (let ((pG20e1@ls/false (pGd92@syntax-dispatch pG20df@t '(_ any)))) (if (and pG20e1@ls/false (apply (lambda (pG20e3@id) (pGb8b@id? pG20e3@id)) pG20e1@ls/false)) (apply (lambda (pG20e5@id) '#t) pG20e1@ls/false) (let ((pG20e7@t pG20df@t)) (let ((pG20e9@ls/false (pGd92@syntax-dispatch pG20e7@t '(_ . each-any)))) (if pG20e9@ls/false (apply (lambda (pG20eb@imp*) '#f) pG20e9@ls/false) (let ((pG20ed@t pG20e7@t)) (let ((pG20ef@ls/false (pGd92@syntax-dispatch pG20ed@t '_))) (if pG20ef@ls/false (apply (lambda () (pGe72@syntax-violation '#f '"malformed import form" pG20dd@e)) pG20ef@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG20ed@t)))))))))))) (pG208c@module-import (lambda (pG20bb@e pG20bc@r) (let ((pG20bf@t pG20bb@e)) (let ((pG20c1@ls/false (pGd92@syntax-dispatch pG20bf@t '(_ any)))) (if (and pG20c1@ls/false (apply (lambda (pG20c3@id) (pGb8b@id? pG20c3@id)) pG20c1@ls/false)) (apply (lambda (pG20c5@id) (call-with-values (lambda () (pGbad@syntax-type pG20c5@id pG20bc@r)) (lambda (pG20cd@pG20c8 pG20ce@pG20ca pG20cf@pG20cc) (let ((pG20d3@kwd pG20cf@pG20cc) (pG20d4@value pG20ce@pG20ca) (pG20d5@type pG20cd@pG20c8)) (let ((pG20d9@t pG20d5@type)) (if (memv pG20d9@t '($module)) (let ((pG20db@iface pG20d4@value)) (values (pGde6@module-interface-exp-id* pG20db@iface pG20c5@id) (pGde0@module-interface-exp-lab-vec pG20db@iface))) (pGe72@syntax-violation '#f '"invalid import" pG20bb@e))))))) pG20c1@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG20bf@t)))))) (pG208e@library-import (lambda (pG209f@e) (let ((pG20a1@t pG209f@e)) (let ((pG20a3@ls/false (pGd92@syntax-dispatch pG20a1@t '(any . each-any)))) (if pG20a3@ls/false (apply (lambda (pG20a5@ctxt pG20a6@imp*) (call-with-values (lambda () (pGdf4@parse-import-spec* (pGe78@syntax->datum pG20a6@imp*))) (lambda (pG20ad@pG20aa pG20ae@pG20ac) (let ((pG20b1@subst-labels pG20ae@pG20ac) (pG20b2@subst-names pG20ad@pG20aa)) (values (vector-map (lambda (pG20b5@name) (pGb6b@datum->stx pG20a5@ctxt pG20b5@name)) pG20b2@subst-names) pG20b1@subst-labels))))) pG20a3@ls/false) (let ((pG20b7@t pG20a1@t)) (let ((pG20b9@ls/false (pGd92@syntax-dispatch pG20b7@t '_))) (if pG20b9@ls/false (apply (lambda () (pGe72@syntax-violation '#f '"invalid import form" pG209f@e)) pG20b9@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG20b7@t)))))))))) (begin (call-with-values (lambda () (if (pG208a@module-import? pG1fed@e) (pG208c@module-import pG1fed@e pG1fda@r) (pG208e@library-import pG1fed@e))) (lambda (pG2093@pG2090 pG2094@pG2092) (let ((pG2097@lab* pG2094@pG2092) (pG2098@id* pG2093@pG2090)) (vector-for-each (lambda (pG209b@id pG209c@lab) (pGb41@extend-rib! pG1fe1@rib pG209b@id pG209c@lab)) pG2098@id* pG2097@lab*)))) (pGdea@chi-body* (cdr pG1fd9@e*) pG1fda@r pG1fdb@mr pG1fdc@lex* pG1fdd@rhs* pG1fde@mod** pG2001@kwd* pG1fe0@exp* pG1fe1@rib pG1fe2@top?))) (if pG1fe2@top? (pGdea@chi-body* (cdr pG1fd9@e*) pG1fda@r pG1fdb@mr (cons (pGb13@gen-lexical 'dummy) pG1fdc@lex*) (cons (cons 'top-expr pG1fed@e) pG1fdd@rhs*) pG1fde@mod** pG2001@kwd* pG1fe0@exp* pG1fe1@rib pG1fe2@top?) (values pG1fd9@e* pG1fda@r pG1fdb@mr pG1fdc@lex* pG1fdd@rhs* pG1fde@mod** pG2001@kwd* pG1fe0@exp*)))))))))))))))))))))) (set! pG28c6@pGdea@chi-body* pGdea@chi-body*) (set! pGdec@expand-transformer (lambda (pG20f1@expr pG20f2@r) (let ((pG20f5@rtc (pGdf8@make-collector))) (let ((pG20f7@expanded-rhs (let ((pG2101@pG20fa pGdfa@inv-collector) (pG2102@pG20fc pGdfc@vis-collector) (pG2103@pG20fe pG20f5@rtc) (pG2104@pG2100 (lambda (pG2109@x) (values)))) (let ((pG210b@swap (lambda () (begin (let ((pG210d@t (pG2101@pG20fa))) (begin (pG2101@pG20fa pG2103@pG20fe) (set! pG2103@pG20fe pG210d@t))) (let ((pG210f@t (pG2102@pG20fc))) (begin (pG2102@pG20fc pG2104@pG2100) (set! pG2104@pG2100 pG210f@t))))))) (dynamic-wind pG210b@swap (lambda () (pGdb4@chi-expr pG20f1@expr pG20f2@r pG20f2@r)) pG210b@swap))))) (begin (for-each (let ((pG2111@mark-visit (pGdfc@vis-collector))) (lambda (pG2113@x) (begin (pG9a7@pG7f5@invoke-library pG2113@x) (pG2111@mark-visit pG2113@x)))) (pG20f5@rtc)) pG20f7@expanded-rhs))))) (set! pG28c7@pGdec@expand-transformer pGdec@expand-transformer) (set! pGdee@parse-exports (lambda (pG2115@exp*) (let pG211d@f ((pG2117@exp* pG2115@exp*) (pG2118@int* '()) (pG2119@ext* '())) (if (null? pG2117@exp*) (begin (if (not (pGb93@valid-bound-ids? pG2119@ext*)) (pGe72@syntax-violation 'export '"invalid exports" (pGdc8@find-dups pG2119@ext*)) (void)) (values (map pGe78@syntax->datum pG2119@ext*) pG2118@int*)) (let ((pG211f@t (car pG2117@exp*))) (let ((pG2121@ls/false (pGd92@syntax-dispatch pG211f@t '(any . #(each (any any)))))) (if pG2121@ls/false (apply (lambda (pG2123@rename pG2124@i* pG2125@e*) (begin (if (not (and (eq? (pGe78@syntax->datum pG2123@rename) 'rename) (for-all pGb8b@id? pG2124@i*) (for-all pGb8b@id? pG2125@e*))) (pGe72@syntax-violation 'export '"invalid export specifier" (car pG2117@exp*)) (void)) (pG211d@f (cdr pG2117@exp*) (append pG2124@i* pG2118@int*) (append pG2125@e* pG2119@ext*)))) pG2121@ls/false) (let ((pG2129@t pG211f@t)) (let ((pG212b@ls/false (pGd92@syntax-dispatch pG2129@t 'any))) (if pG212b@ls/false (apply (lambda (pG212d@ie) (begin (if (not (pGb8b@id? pG212d@ie)) (pGe72@syntax-violation 'export '"invalid export" pG212d@ie) (void)) (pG211d@f (cdr pG2117@exp*) (cons pG212d@ie pG2118@int*) (cons pG212d@ie pG2119@ext*)))) pG212b@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG2129@t))))))))))) (set! pG28c8@pGdee@parse-exports pGdee@parse-exports) (set! pGdf0@parse-library-name (lambda (pG212f@spec) (letrec* ((pG2132@parse (lambda (pG213f@x) (let ((pG2141@t pG213f@x)) (let ((pG2143@ls/false (pGd92@syntax-dispatch pG2141@t '(each-any)))) (if (and pG2143@ls/false (apply (lambda (pG2145@v*) (for-all (lambda (pG2147@x) (let ((pG2149@x (pGe78@syntax->datum pG2147@x))) (and (integer? pG2149@x) (exact? pG2149@x)))) pG2145@v*)) pG2143@ls/false)) (apply (lambda (pG214b@v*) (values '() (map pGe78@syntax->datum pG214b@v*))) pG2143@ls/false) (let ((pG214d@t pG2141@t)) (let ((pG214f@ls/false (pGd92@syntax-dispatch pG214d@t '(any . any)))) (if (and pG214f@ls/false (apply (lambda (pG2151@x pG2152@rest) (symbol? (pGe78@syntax->datum pG2151@x))) pG214f@ls/false)) (apply (lambda (pG2155@x pG2156@rest) (call-with-values (lambda () (pG2132@parse pG2156@rest)) (lambda (pG215d@pG215a pG215e@pG215c) (let ((pG2161@v* pG215e@pG215c) (pG2162@x* pG215d@pG215a)) (values (cons (pGe78@syntax->datum pG2155@x) pG2162@x*) pG2161@v*))))) pG214f@ls/false) (let ((pG2165@t pG214d@t)) (let ((pG2167@ls/false (pGd92@syntax-dispatch pG2165@t '()))) (if pG2167@ls/false (apply (lambda () (values '() '())) pG2167@ls/false) (let ((pG2169@t pG2165@t)) (let ((pG216b@ls/false (pGd92@syntax-dispatch pG2169@t '_))) (if pG216b@ls/false (apply (lambda () (pGe72@syntax-violation '#f '"invalid library name" pG212f@spec)) pG216b@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG2169@t)))))))))))))))) (call-with-values (lambda () (pG2132@parse pG212f@spec)) (lambda (pG2137@pG2134 pG2138@pG2136) (let ((pG213b@ver* pG2138@pG2136) (pG213c@name* pG2137@pG2134)) (begin (if (null? pG213c@name*) (pGe72@syntax-violation '#f '"empty library name" pG212f@spec) (void)) (values pG213c@name* pG213b@ver*)))))))) (set! pG28c9@pGdf0@parse-library-name pGdf0@parse-library-name) (set! pGdf2@parse-library (lambda (pG216d@e) (let ((pG216f@t pG216d@e)) (let ((pG2171@ls/false (pGd92@syntax-dispatch pG216f@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and pG2171@ls/false (apply (lambda (pG2173@library pG2174@name* pG2175@export pG2176@exp* pG2177@import pG2178@imp* pG2179@b*) (and (eq? (pGe78@syntax->datum pG2175@export) 'export) (eq? (pGe78@syntax->datum pG2177@import) 'import) (eq? (pGe78@syntax->datum pG2173@library) 'library))) pG2171@ls/false)) (apply (lambda (pG2181@library pG2182@name* pG2183@export pG2184@exp* pG2185@import pG2186@imp* pG2187@b*) (values pG2182@name* pG2184@exp* pG2186@imp* pG2187@b*)) pG2171@ls/false) (let ((pG218f@t pG216f@t)) (let ((pG2191@ls/false (pGd92@syntax-dispatch pG218f@t '_))) (if pG2191@ls/false (apply (lambda () (pGe72@syntax-violation '#f '"malformed library" pG216d@e)) pG2191@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG218f@t))))))))) (set! pG28ca@pGdf2@parse-library pGdf2@parse-library) (set! pGdf4@parse-import-spec* (letrec* ((pG2194@idsyn? (lambda (pG239d@x) (symbol? (pGe78@syntax->datum pG239d@x)))) (pG2196@dup-error (lambda (pG239b@name) (pGe72@syntax-violation 'import '"two imports with different bindings" pG239b@name))) (pG2198@merge-substs (lambda (pG2389@s pG238a@subst) (letrec* ((pG238e@insert-to-subst (lambda (pG238f@a pG2390@subst) (let ((pG2393@name (car pG238f@a)) (pG2394@label (cdr pG238f@a))) (let ((pG2397@t (assq pG2393@name pG2390@subst))) (if pG2397@t ((lambda (pG2399@x) (if (eq? (cdr pG2399@x) pG2394@label) pG2390@subst (pG2196@dup-error pG2393@name))) pG2397@t) (cons pG238f@a pG2390@subst))))))) (if (null? pG2389@s) pG238a@subst (pG238e@insert-to-subst (car pG2389@s) (pG2198@merge-substs (cdr pG2389@s) pG238a@subst)))))) (pG219a@exclude* (lambda (pG2359@sym* pG235a@subst) (letrec* ((pG235e@exclude (lambda (pG2377@sym pG2378@subst) (if (null? pG2378@subst) (pGe72@syntax-violation 'import '"cannot rename unbound identifier" pG2377@sym) (if (eq? pG2377@sym (caar pG2378@subst)) (values (cdar pG2378@subst) (cdr pG2378@subst)) (let ((pG237b@a (car pG2378@subst))) (call-with-values (lambda () (pG235e@exclude pG2377@sym (cdr pG2378@subst))) (lambda (pG2381@pG237e pG2382@pG2380) (let ((pG2385@subst pG2382@pG2380) (pG2386@old pG2381@pG237e)) (values pG2386@old (cons pG237b@a pG2385@subst))))))))))) (if (null? pG2359@sym*) (values '() pG235a@subst) (call-with-values (lambda () (pG235e@exclude (car pG2359@sym*) pG235a@subst)) (lambda (pG2363@pG2360 pG2364@pG2362) (let ((pG2367@subst pG2364@pG2362) (pG2368@old pG2363@pG2360)) (call-with-values (lambda () (pG219a@exclude* (cdr pG2359@sym*) pG2367@subst)) (lambda (pG236f@pG236c pG2370@pG236e) (let ((pG2373@subst pG2370@pG236e) (pG2374@old* pG236f@pG236c)) (values (cons pG2368@old pG2374@old*) pG2373@subst))))))))))) (pG219c@find* (lambda (pG2351@sym* pG2352@subst) (map (lambda (pG2355@x) (let ((pG2357@t (assq pG2355@x pG2352@subst))) (if pG2357@t (cdr pG2357@t) (pGe72@syntax-violation 'import '"cannot find identifier" pG2355@x)))) pG2351@sym*))) (pG219e@rem* (lambda (pG2349@sym* pG234a@subst) (let pG234f@f ((pG234d@subst pG234a@subst)) (if (null? pG234d@subst) '() (if (memq (caar pG234d@subst) pG2349@sym*) (pG234f@f (cdr pG234d@subst)) (cons (car pG234d@subst) (pG234f@f (cdr pG234d@subst)))))))) (pG21a0@remove-dups (lambda (pG2347@ls) (if (null? pG2347@ls) '() (if (memq (car pG2347@ls) (cdr pG2347@ls)) (pG21a0@remove-dups (cdr pG2347@ls)) (cons (car pG2347@ls) (pG21a0@remove-dups (cdr pG2347@ls))))))) (pG21a2@parse-library-name (lambda (pG225f@spec) (letrec* ((pG2262@subversion? (lambda (pG2343@x) (let ((pG2345@x (pGe78@syntax->datum pG2343@x))) (and (integer? pG2345@x) (exact? pG2345@x) (>= pG2345@x '0))))) (pG2264@subversion-pred (lambda (pG22e3@x*) (let ((pG22e5@t pG22e3@x*)) (let ((pG22e7@ls/false (pGd92@syntax-dispatch pG22e5@t 'any))) (if (and pG22e7@ls/false (apply (lambda (pG22e9@n) (pG2262@subversion? pG22e9@n)) pG22e7@ls/false)) (apply (lambda (pG22eb@n) (lambda (pG22ed@x) (= pG22ed@x (pGe78@syntax->datum pG22eb@n)))) pG22e7@ls/false) (let ((pG22ef@t pG22e5@t)) (let ((pG22f1@ls/false (pGd92@syntax-dispatch pG22ef@t '(any . each-any)))) (if (and pG22f1@ls/false (apply (lambda (pG22f3@p? pG22f4@sub*) (eq? (pGe78@syntax->datum pG22f3@p?) 'and)) pG22f1@ls/false)) (apply (lambda (pG22f7@p? pG22f8@sub*) (let ((pG22fb@p* (map pG2264@subversion-pred pG22f8@sub*))) (lambda (pG22fd@x) (for-all (lambda (pG22ff@p) (pG22ff@p pG22fd@x)) pG22fb@p*)))) pG22f1@ls/false) (let ((pG2301@t pG22ef@t)) (let ((pG2303@ls/false (pGd92@syntax-dispatch pG2301@t '(any . each-any)))) (if (and pG2303@ls/false (apply (lambda (pG2305@p? pG2306@sub*) (eq? (pGe78@syntax->datum pG2305@p?) 'or)) pG2303@ls/false)) (apply (lambda (pG2309@p? pG230a@sub*) (let ((pG230d@p* (map pG2264@subversion-pred pG230a@sub*))) (lambda (pG230f@x) (exists (lambda (pG2311@p) (pG2311@p pG230f@x)) pG230d@p*)))) pG2303@ls/false) (let ((pG2313@t pG2301@t)) (let ((pG2315@ls/false (pGd92@syntax-dispatch pG2313@t '(any any)))) (if (and pG2315@ls/false (apply (lambda (pG2317@p? pG2318@sub) (eq? (pGe78@syntax->datum pG2317@p?) 'not)) pG2315@ls/false)) (apply (lambda (pG231b@p? pG231c@sub) (let ((pG231f@p (pG2264@subversion-pred pG231c@sub))) (lambda (pG2321@x) (not (pG231f@p pG2321@x))))) pG2315@ls/false) (let ((pG2323@t pG2313@t)) (let ((pG2325@ls/false (pGd92@syntax-dispatch pG2323@t '(any any)))) (if (and pG2325@ls/false (apply (lambda (pG2327@p? pG2328@n) (and (eq? (pGe78@syntax->datum pG2327@p?) '<=) (pG2262@subversion? pG2328@n))) pG2325@ls/false)) (apply (lambda (pG232b@p? pG232c@n) (lambda (pG232f@x) (<= pG232f@x (pGe78@syntax->datum pG232c@n)))) pG2325@ls/false) (let ((pG2331@t pG2323@t)) (let ((pG2333@ls/false (pGd92@syntax-dispatch pG2331@t '(any any)))) (if (and pG2333@ls/false (apply (lambda (pG2335@p? pG2336@n) (and (eq? (pGe78@syntax->datum pG2335@p?) '>=) (pG2262@subversion? pG2336@n))) pG2333@ls/false)) (apply (lambda (pG2339@p? pG233a@n) (lambda (pG233d@x) (>= pG233d@x (pGe78@syntax->datum pG233a@n)))) pG2333@ls/false) (let ((pG233f@t pG2331@t)) (let ((pG2341@ls/false (pGd92@syntax-dispatch pG233f@t '_))) (if pG2341@ls/false (apply (lambda () (pGe72@syntax-violation 'import '"invalid sub-version spec" pG225f@spec pG22e3@x*)) pG2341@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG233f@t)))))))))))))))))))))))) (pG2266@version-pred (lambda (pG2293@x*) (let ((pG2295@t pG2293@x*)) (let ((pG2297@ls/false (pGd92@syntax-dispatch pG2295@t '()))) (if pG2297@ls/false (apply (lambda () (lambda (pG2299@x) '#t)) pG2297@ls/false) (let ((pG229b@t pG2295@t)) (let ((pG229d@ls/false (pGd92@syntax-dispatch pG229b@t '(any . each-any)))) (if (and pG229d@ls/false (apply (lambda (pG229f@c pG22a0@ver*) (eq? (pGe78@syntax->datum pG229f@c) 'and)) pG229d@ls/false)) (apply (lambda (pG22a3@c pG22a4@ver*) (let ((pG22a7@p* (map pG2266@version-pred pG22a4@ver*))) (lambda (pG22a9@x) (for-all (lambda (pG22ab@p) (pG22ab@p pG22a9@x)) pG22a7@p*)))) pG229d@ls/false) (let ((pG22ad@t pG229b@t)) (let ((pG22af@ls/false (pGd92@syntax-dispatch pG22ad@t '(any . each-any)))) (if (and pG22af@ls/false (apply (lambda (pG22b1@c pG22b2@ver*) (eq? (pGe78@syntax->datum pG22b1@c) 'or)) pG22af@ls/false)) (apply (lambda (pG22b5@c pG22b6@ver*) (let ((pG22b9@p* (map pG2266@version-pred pG22b6@ver*))) (lambda (pG22bb@x) (exists (lambda (pG22bd@p) (pG22bd@p pG22bb@x)) pG22b9@p*)))) pG22af@ls/false) (let ((pG22bf@t pG22ad@t)) (let ((pG22c1@ls/false (pGd92@syntax-dispatch pG22bf@t '(any any)))) (if (and pG22c1@ls/false (apply (lambda (pG22c3@c pG22c4@ver) (eq? (pGe78@syntax->datum pG22c3@c) 'not)) pG22c1@ls/false)) (apply (lambda (pG22c7@c pG22c8@ver) (let ((pG22cb@p (pG2266@version-pred pG22c8@ver))) (lambda (pG22cd@x) (not (pG22cb@p pG22cd@x))))) pG22c1@ls/false) (let ((pG22cf@t pG22bf@t)) (let ((pG22d1@ls/false (pGd92@syntax-dispatch pG22cf@t 'each-any))) (if pG22d1@ls/false (apply (lambda (pG22d3@sub*) (let ((pG22d5@p* (map pG2264@subversion-pred pG22d3@sub*))) (lambda (pG22d7@x) (let pG22dd@f ((pG22d9@p* pG22d5@p*) (pG22da@x pG22d7@x)) (if (null? pG22d9@p*) '#t (if (null? pG22da@x) '#f (and ((car pG22d9@p*) (car pG22da@x)) (pG22dd@f (cdr pG22d9@p*) (cdr pG22da@x))))))))) pG22d1@ls/false) (let ((pG22df@t pG22cf@t)) (let ((pG22e1@ls/false (pGd92@syntax-dispatch pG22df@t '_))) (if pG22e1@ls/false (apply (lambda () (pGe72@syntax-violation 'import '"invalid version spec" pG225f@spec pG2293@x*)) pG22e1@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG22df@t)))))))))))))))))))))) (let pG2269@f ((pG2267@x pG225f@spec)) (let ((pG226b@t pG2267@x)) (let ((pG226d@ls/false (pGd92@syntax-dispatch pG226b@t '(each-any)))) (if pG226d@ls/false (apply (lambda (pG226f@version-spec*) (values '() (pG2266@version-pred pG226f@version-spec*))) pG226d@ls/false) (let ((pG2271@t pG226b@t)) (let ((pG2273@ls/false (pGd92@syntax-dispatch pG2271@t '(any . any)))) (if (and pG2273@ls/false (apply (lambda (pG2275@x pG2276@x*) (pG2194@idsyn? pG2275@x)) pG2273@ls/false)) (apply (lambda (pG2279@x pG227a@x*) (call-with-values (lambda () (pG2269@f pG227a@x*)) (lambda (pG2281@pG227e pG2282@pG2280) (let ((pG2285@pred pG2282@pG2280) (pG2286@name pG2281@pG227e)) (values (cons (pGe78@syntax->datum pG2279@x) pG2286@name) pG2285@pred))))) pG2273@ls/false) (let ((pG2289@t pG2271@t)) (let ((pG228b@ls/false (pGd92@syntax-dispatch pG2289@t '()))) (if pG228b@ls/false (apply (lambda () (values '() (lambda (pG228d@x) '#t))) pG228b@ls/false) (let ((pG228f@t pG2289@t)) (let ((pG2291@ls/false (pGd92@syntax-dispatch pG228f@t '_))) (if pG2291@ls/false (apply (lambda () (pGe72@syntax-violation '#f '"invalid import spec" pG225f@spec)) pG2291@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG228f@t))))))))))))))))) (pG21a4@import-library (lambda (pG224f@spec*) (call-with-values (lambda () (pG21a2@parse-library-name pG224f@spec*)) (lambda (pG2255@pG2252 pG2256@pG2254) (let ((pG2259@pred pG2256@pG2254) (pG225a@name pG2255@pG2252)) (begin (if (null? pG225a@name) (pGe72@syntax-violation 'import '"empty library name" pG224f@spec*) (void)) (let ((pG225d@lib (pG9a0@pG7e7@find-library-by-name pG225a@name))) (begin (if (not pG225d@lib) (pGe72@syntax-violation 'import '"cannot find library with required name" pG225a@name) (void)) (if (not (pG2259@pred (pG97a@pG79b@library-version pG225d@lib))) (pGe72@syntax-violation 'import '"library does not satisfy version specification" pG224f@spec* pG225d@lib) (void)) ((pGdfe@imp-collector) pG225d@lib) (pG982@pG7ab@library-subst pG225d@lib))))))))) (pG21a6@get-import (lambda (pG21c1@spec) (let ((pG21c3@t pG21c1@spec)) (let ((pG21c5@ls/false (pGd92@syntax-dispatch pG21c3@t '(any . each-any)))) (if (and pG21c5@ls/false (apply (lambda (pG21c7@x pG21c8@x*) (not (memq (pGe78@syntax->datum pG21c7@x) '(for rename except only prefix library)))) pG21c5@ls/false)) (apply (lambda (pG21cb@x pG21cc@x*) (pG21a4@import-library (cons pG21cb@x pG21cc@x*))) pG21c5@ls/false) (let ((pG21cf@t pG21c3@t)) (let ((pG21d1@ls/false (pGd92@syntax-dispatch pG21cf@t '(any any . #(each (any any)))))) (if (and pG21d1@ls/false (apply (lambda (pG21d3@rename pG21d4@isp pG21d5@old* pG21d6@new*) (and (eq? (pGe78@syntax->datum pG21d3@rename) 'rename) (for-all pG2194@idsyn? pG21d5@old*) (for-all pG2194@idsyn? pG21d6@new*))) pG21d1@ls/false)) (apply (lambda (pG21db@rename pG21dc@isp pG21dd@old* pG21de@new*) (let ((pG21e3@subst (pG21a6@get-import pG21dc@isp)) (pG21e4@old* (map pGe78@syntax->datum pG21dd@old*)) (pG21e5@new* (map pGe78@syntax->datum pG21de@new*))) (let ((pG21e9@old-label* (pG219c@find* pG21e4@old* pG21e3@subst))) (let ((pG21eb@subst (pG219e@rem* pG21e4@old* pG21e3@subst))) (pG2198@merge-substs (map cons pG21e5@new* pG21e9@old-label*) pG21eb@subst))))) pG21d1@ls/false) (let ((pG21ed@t pG21cf@t)) (let ((pG21ef@ls/false (pGd92@syntax-dispatch pG21ed@t '(any any . each-any)))) (if (and pG21ef@ls/false (apply (lambda (pG21f1@except pG21f2@isp pG21f3@sym*) (and (eq? (pGe78@syntax->datum pG21f1@except) 'except) (for-all pG2194@idsyn? pG21f3@sym*))) pG21ef@ls/false)) (apply (lambda (pG21f7@except pG21f8@isp pG21f9@sym*) (let ((pG21fd@subst (pG21a6@get-import pG21f8@isp))) (pG219e@rem* (map pGe78@syntax->datum pG21f9@sym*) pG21fd@subst))) pG21ef@ls/false) (let ((pG21ff@t pG21ed@t)) (let ((pG2201@ls/false (pGd92@syntax-dispatch pG21ff@t '(any any . each-any)))) (if (and pG2201@ls/false (apply (lambda (pG2203@only pG2204@isp pG2205@sym*) (and (eq? (pGe78@syntax->datum pG2203@only) 'only) (for-all pG2194@idsyn? pG2205@sym*))) pG2201@ls/false)) (apply (lambda (pG2209@only pG220a@isp pG220b@sym*) (let ((pG220f@subst (pG21a6@get-import pG220a@isp)) (pG2210@sym* (map pGe78@syntax->datum pG220b@sym*))) (let ((pG2213@sym* (pG21a0@remove-dups pG2210@sym*))) (let ((pG2215@lab* (pG219c@find* pG2213@sym* pG220f@subst))) (map cons pG2213@sym* pG2215@lab*))))) pG2201@ls/false) (let ((pG2217@t pG21ff@t)) (let ((pG2219@ls/false (pGd92@syntax-dispatch pG2217@t '(any any any)))) (if (and pG2219@ls/false (apply (lambda (pG221b@prefix pG221c@isp pG221d@p) (and (eq? (pGe78@syntax->datum pG221b@prefix) 'prefix) (pG2194@idsyn? pG221d@p))) pG2219@ls/false)) (apply (lambda (pG2221@prefix pG2222@isp pG2223@p) (let ((pG2227@subst (pG21a6@get-import pG2222@isp)) (pG2228@prefix (symbol->string (pGe78@syntax->datum pG2223@p)))) (map (lambda (pG222b@x) (cons (string->symbol (string-append pG2228@prefix (symbol->string (car pG222b@x)))) (cdr pG222b@x))) pG2227@subst))) pG2219@ls/false) (let ((pG222d@t pG2217@t)) (let ((pG222f@ls/false (pGd92@syntax-dispatch pG222d@t '(any each-any)))) (if (and pG222f@ls/false (apply (lambda (pG2231@library pG2232@spec*) (eq? (pGe78@syntax->datum pG2231@library) 'library)) pG222f@ls/false)) (apply (lambda (pG2235@library pG2236@spec*) (pG21a4@import-library pG2236@spec*)) pG222f@ls/false) (let ((pG2239@t pG222d@t)) (let ((pG223b@ls/false (pGd92@syntax-dispatch pG2239@t '(any any . any)))) (if (and pG223b@ls/false (apply (lambda (pG223d@for pG223e@isp pG223f@rest) (eq? (pGe78@syntax->datum pG223d@for) 'for)) pG223b@ls/false)) (apply (lambda (pG2243@for pG2244@isp pG2245@rest) (pG21a6@get-import pG2244@isp)) pG223b@ls/false) (let ((pG2249@t pG2239@t)) (let ((pG224b@ls/false (pGd92@syntax-dispatch pG2249@t 'any))) (if pG224b@ls/false (apply (lambda (pG224d@spec) (pGe72@syntax-violation 'import '"invalid import spec" pG224d@spec)) pG224b@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG2249@t))))))))))))))))))))))))))) (pG21a8@add-imports! (lambda (pG21b1@imp pG21b2@h) (let ((pG21b5@subst (pG21a6@get-import pG21b1@imp))) (for-each (lambda (pG21b7@x) (let ((pG21b9@name (car pG21b7@x)) (pG21ba@label (cdr pG21b7@x))) (let ((pG21bd@t (hashtable-ref pG21b2@h pG21b9@name '#f))) (if pG21bd@t ((lambda (pG21bf@l) (if (not (eq? pG21bf@l pG21ba@label)) (pG2196@dup-error pG21b9@name) (void))) pG21bd@t) (hashtable-set! pG21b2@h pG21b9@name pG21ba@label))))) pG21b5@subst))))) (lambda (pG21a9@imp*) (let pG21af@f ((pG21ab@imp* pG21a9@imp*) (pG21ac@h (make-eq-hashtable))) (if (null? pG21ab@imp*) (hashtable-entries pG21ac@h) (begin (pG21a8@add-imports! (car pG21ab@imp*) pG21ac@h) (pG21af@f (cdr pG21ab@imp*) pG21ac@h))))))) (set! pG28cb@pGdf4@parse-import-spec* pGdf4@parse-import-spec*) (set! pGdf6@make-top-rib (lambda (pG239f@names pG23a0@labels) (let ((pG23a3@rib (pGb3f@make-empty-rib))) (begin (vector-for-each (lambda (pG23a5@name pG23a6@label) (begin (if (not (symbol? pG23a5@name)) (error 'make-top-rib '"BUG: not a symbol" pG23a5@name) (void)) (pGb43@extend-rib/nc! pG23a3@rib (make-simple-struct 'stx '5 (list pG23a5@name pGb0f@top-mark* '() '())) pG23a6@label))) pG239f@names pG23a0@labels) pG23a3@rib)))) (set! pG28cc@pGdf6@make-top-rib pGdf6@make-top-rib) (set! pGdf8@make-collector (lambda () (let ((pG23a9@ls '())) (lambda pG23ad (let ((pG23ae (length pG23ad))) (if (= pG23ae '0) (apply (lambda () pG23a9@ls) pG23ad) (if (= pG23ae '1) (apply (lambda (pG23ab@x) (set! pG23a9@ls (pGb08@set-cons pG23ab@x pG23a9@ls))) pG23ad) (error 'apply '"invalid arg count")))))))) (set! pG28cd@pGdf8@make-collector pGdf8@make-collector) (set! pGdfa@inv-collector (pG6db@pG5b9@make-parameter (lambda pG23af@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (pG23b1@x) (begin (if (not (procedure? pG23b1@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" pG23b1@x) (void)) pG23b1@x)))) (set! pG28ce@pGdfa@inv-collector pGdfa@inv-collector) (set! pGdfc@vis-collector (pG6db@pG5b9@make-parameter (lambda pG23b3@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (pG23b5@x) (begin (if (not (procedure? pG23b5@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" pG23b5@x) (void)) pG23b5@x)))) (set! pG28cf@pGdfc@vis-collector pGdfc@vis-collector) (set! pGdfe@imp-collector (pG6db@pG5b9@make-parameter (lambda pG23b7@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (pG23b9@x) (begin (if (not (procedure? pG23b9@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" pG23b9@x) (void)) pG23b9@x)))) (set! pG28d0@pGdfe@imp-collector pGdfe@imp-collector) (set! pGe00@chi-library-internal (lambda (pG23bb@e* pG23bc@rib pG23bd@top?) (call-with-values (lambda () (pGdea@chi-body* pG23bb@e* '() '() '() '() '() '() '() pG23bc@rib pG23bd@top?)) (lambda (pG23d1@pG23c2 pG23d2@pG23c4 pG23d3@pG23c6 pG23d4@pG23c8 pG23d5@pG23ca pG23d6@pG23cc pG23d7@pG23ce pG23d8@pG23d0) (let ((pG23e1@exp* pG23d8@pG23d0) (pG23e2@_kwd* pG23d7@pG23ce) (pG23e3@mod** pG23d6@pG23cc) (pG23e4@rhs* pG23d5@pG23ca) (pG23e5@lex* pG23d4@pG23c8) (pG23e6@mr pG23d3@pG23c6) (pG23e7@r pG23d2@pG23c4) (pG23e8@e* pG23d1@pG23c2)) (values (append (apply append (reverse pG23e3@mod**)) pG23e8@e*) pG23e7@r pG23e6@mr (reverse pG23e5@lex*) (reverse pG23e4@rhs*) pG23e1@exp*)))))) (set! pG28d1@pGe00@chi-library-internal pGe00@chi-library-internal) (set! pGe02@chi-interaction-expr (lambda (pG23f1@e pG23f2@rib pG23f3@r) (call-with-values (lambda () (pGdea@chi-body* (list pG23f1@e) pG23f3@r pG23f3@r '() '() '() '() '() pG23f2@rib '#t)) (lambda (pG2407@pG23f8 pG2408@pG23fa pG2409@pG23fc pG240a@pG23fe pG240b@pG2400 pG240c@pG2402 pG240d@pG2404 pG240e@pG2406) (let ((pG2417@_exp* pG240e@pG2406) (pG2418@_kwd* pG240d@pG2404) (pG2419@mod** pG240c@pG2402) (pG241a@rhs* pG240b@pG2400) (pG241b@lex* pG240a@pG23fe) (pG241c@mr pG2409@pG23fc) (pG241d@r pG2408@pG23fa) (pG241e@e* pG2407@pG23f8)) (let ((pG2427@e* (pGdc2@expand-interaction-rhs*/init* (reverse pG241b@lex*) (reverse pG241a@rhs*) (append (apply append (reverse pG2419@mod**)) pG241e@e*) pG241d@r pG241c@mr))) (let ((pG2429@e (if (null? pG2427@e*) (pGaf1@pGa52@build-void) (if (null? (cdr pG2427@e*)) (car pG2427@e*) (pGaf0@pGa50@build-sequence '#f pG2427@e*))))) (values pG2429@e pG241d@r)))))))) (set! pG28d2@pGe02@chi-interaction-expr pGe02@chi-interaction-expr) (set! pGe04@library-body-expander (lambda (pG242b@name pG242c@main-exp* pG242d@imp* pG242e@b* pG242f@top?) (letrec* ((pG2436@itc (pGdf8@make-collector))) (let ((pG243f@pG2438 pGdfe@imp-collector) (pG2440@pG243a pGe82@top-level-context) (pG2441@pG243c pG2436@itc) (pG2442@pG243e '#f)) (let ((pG2447@swap (lambda () (begin (let ((pG2449@t (pG243f@pG2438))) (begin (pG243f@pG2438 pG2441@pG243c) (set! pG2441@pG243c pG2449@t))) (let ((pG244b@t (pG2440@pG243a))) (begin (pG2440@pG243a pG2442@pG243e) (set! pG2442@pG243e pG244b@t))))))) (dynamic-wind pG2447@swap (lambda () (call-with-values (lambda () (pGdf4@parse-import-spec* pG242d@imp*)) (lambda (pG2451@pG244e pG2452@pG2450) (let ((pG2455@subst-labels pG2452@pG2450) (pG2456@subst-names pG2451@pG244e)) (let ((pG2459@rib (pGdf6@make-top-rib pG2456@subst-names pG2455@subst-labels))) (letrec* ((pG245c@wrap (lambda (pG24d7@x) (make-simple-struct 'stx '5 (list pG24d7@x pGb0f@top-mark* (list pG2459@rib) '()))))) (let ((pG245d@b* (map pG245c@wrap pG242e@b*)) (pG245e@main-exp* (map pG245c@wrap pG242c@main-exp*)) (pG245f@rtc (pGdf8@make-collector)) (pG2460@vtc (pGdf8@make-collector))) (let ((pG246d@pG2466 pGdfa@inv-collector) (pG246e@pG2468 pGdfc@vis-collector) (pG246f@pG246a pG245f@rtc) (pG2470@pG246c pG2460@vtc)) (let ((pG2475@swap (lambda () (begin (let ((pG2477@t (pG246d@pG2466))) (begin (pG246d@pG2466 pG246f@pG246a) (set! pG246f@pG246a pG2477@t))) (let ((pG2479@t (pG246e@pG2468))) (begin (pG246e@pG2468 pG2470@pG246c) (set! pG2470@pG246c pG2479@t))))))) (dynamic-wind pG2475@swap (lambda () (call-with-values (lambda () (pGe00@chi-library-internal pG245d@b* pG2459@rib pG242f@top?)) (lambda (pG2487@pG247c pG2488@pG247e pG2489@pG2480 pG248a@pG2482 pG248b@pG2484 pG248c@pG2486) (let ((pG2493@internal-exp* pG248c@pG2486) (pG2494@rhs* pG248b@pG2484) (pG2495@lex* pG248a@pG2482) (pG2496@mr pG2489@pG2480) (pG2497@r pG2488@pG247e) (pG2498@init* pG2487@pG247c)) (call-with-values (lambda () (pGdee@parse-exports (append pG245e@main-exp* pG2493@internal-exp*))) (lambda (pG24a3@pG24a0 pG24a4@pG24a2) (let ((pG24a7@exp-id* pG24a4@pG24a2) (pG24a8@exp-name* pG24a3@pG24a0)) (begin (pGb47@seal-rib! pG2459@rib) (let ((pG24ab@init* (pGdb0@chi-expr* pG2498@init* pG2497@r pG2496@mr))) (let ((pG24ad@rhs* (pGdc4@chi-rhs* pG2494@rhs* pG2497@r pG2496@mr))) (begin (pGb49@unseal-rib! pG2459@rib) (let ((pG24af@loc* (map pGb15@gen-global pG2495@lex*)) (pG24b0@export-subst (pGe5c@make-export-subst pG24a8@exp-name* pG24a7@exp-id*))) (letrec* ((pG24b4@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (pGe5e@make-export-env/macros pG2495@lex* pG24af@loc* pG2497@r)) (lambda (pG24bb@pG24b6 pG24bc@pG24b8 pG24bd@pG24ba) (let ((pG24c1@macro* pG24bd@pG24ba) (pG24c2@global* pG24bc@pG24b8) (pG24c3@export-env pG24bb@pG24b6)) (begin (for-each (lambda (pG24c7@s) (let ((pG24c9@name (car pG24c7@s)) (pG24ca@label (cdr pG24c7@s))) (let ((pG24cd@p (assq pG24ca@label pG24c3@export-env))) (if pG24cd@p (let ((pG24cf@b (cdr pG24cd@p))) (let ((pG24d1@type (car pG24cf@b))) (if (eq? pG24d1@type 'mutable) (pGe72@syntax-violation 'export pG24b4@errstr pG24c9@name) (void)))) (void))))) pG24b0@export-subst) (let ((pG24d3@invoke-body (pGaf6@pGa5c@build-library-letrec* '#f pG242b@name pG2495@lex* pG24af@loc* pG24ad@rhs* (if (null? pG24ab@init*) (pGaf1@pGa52@build-void) (pGaf0@pGa50@build-sequence '#f pG24ab@init*)))) (pG24d4@invoke-definitions (map pGaed@pG9af@build-global-define (map cdr pG24c2@global*)))) (values (pG2436@itc) (pG245f@rtc) (pG2460@vtc) (pGaf0@pGa50@build-sequence '#f (append pG24d4@invoke-definitions (list pG24d3@invoke-body))) pG24c1@macro* pG24b0@export-subst pG24c3@export-env))))))))))))))))))) pG2475@swap)))))))))) pG2447@swap)))))) (set! pG28d3@pGe04@library-body-expander pGe04@library-body-expander) (set! pGe06@core-library-expander (lambda (pG24d9@e pG24da@verify-name) (call-with-values (lambda () (pGdf2@parse-library pG24d9@e)) (lambda (pG24e5@pG24de pG24e6@pG24e0 pG24e7@pG24e2 pG24e8@pG24e4) (let ((pG24ed@b* pG24e8@pG24e4) (pG24ee@imp* pG24e7@pG24e2) (pG24ef@exp* pG24e6@pG24e0) (pG24f0@name* pG24e5@pG24de)) (call-with-values (lambda () (pGdf0@parse-library-name pG24f0@name*)) (lambda (pG24f9@pG24f6 pG24fa@pG24f8) (let ((pG24fd@ver pG24fa@pG24f8) (pG24fe@name pG24f9@pG24f6)) (begin (pG24da@verify-name pG24fe@name) (call-with-values (lambda () (pGe04@library-body-expander pG24fe@name pG24ef@exp* pG24ee@imp* pG24ed@b* '#f)) (lambda (pG250f@pG2502 pG2510@pG2504 pG2511@pG2506 pG2512@pG2508 pG2513@pG250a pG2514@pG250c pG2515@pG250e) (let ((pG251d@export-env pG2515@pG250e) (pG251e@export-subst pG2514@pG250c) (pG251f@visit-code pG2513@pG250a) (pG2520@invoke-code pG2512@pG2508) (pG2521@visit-req* pG2511@pG2506) (pG2522@invoke-req* pG2510@pG2504) (pG2523@imp* pG250f@pG2502)) (values pG24fe@name pG24fd@ver pG2523@imp* pG2522@invoke-req* pG2521@visit-req* pG2520@invoke-code pG251f@visit-code pG251e@export-subst pG251d@export-env))))))))))))) (set! pG28d4@pGe06@core-library-expander pGe06@core-library-expander) (set! pGe08@parse-top-level-program (lambda (pG252b@e*) (let ((pG252d@t pG252b@e*)) (let ((pG252f@ls/false (pGd92@syntax-dispatch pG252d@t '((any . each-any) . each-any)))) (if (and pG252f@ls/false (apply (lambda (pG2531@import pG2532@imp* pG2533@b*) (eq? (pGe78@syntax->datum pG2531@import) 'import)) pG252f@ls/false)) (apply (lambda (pG2537@import pG2538@imp* pG2539@b*) (values pG2538@imp* pG2539@b*)) pG252f@ls/false) (let ((pG253d@t pG252d@t)) (let ((pG253f@ls/false (pGd92@syntax-dispatch pG253d@t '((any . any) . any)))) (if (and pG253f@ls/false (apply (lambda (pG2541@import pG2542@x pG2543@y) (eq? (pGe78@syntax->datum pG2541@import) 'import)) pG253f@ls/false)) (apply (lambda (pG2547@import pG2548@x pG2549@y) (pGe72@syntax-violation 'expander '"invalid syntax of top-level program" (pGb85@syntax-car pG252b@e*))) pG253f@ls/false) (let ((pG254d@t pG253d@t)) (let ((pG254f@ls/false (pGd92@syntax-dispatch pG254d@t '_))) (if pG254f@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) pG254f@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG254d@t)))))))))))) (set! pG28d5@pGe08@parse-top-level-program pGe08@parse-top-level-program) (set! pGe0a@top-level-expander (lambda (pG2551@e*) (call-with-values (lambda () (pGe08@parse-top-level-program pG2551@e*)) (lambda (pG2557@pG2554 pG2558@pG2556) (let ((pG255b@b* pG2558@pG2556) (pG255c@imp* pG2557@pG2554)) (call-with-values (lambda () (pGe04@library-body-expander '() '() pG255c@imp* pG255b@b* '#t)) (lambda (pG256d@pG2560 pG256e@pG2562 pG256f@pG2564 pG2570@pG2566 pG2571@pG2568 pG2572@pG256a pG2573@pG256c) (let ((pG257b@export-env pG2573@pG256c) (pG257c@export-subst pG2572@pG256a) (pG257d@visit-code pG2571@pG2568) (pG257e@invoke-code pG2570@pG2566) (pG257f@visit-req* pG256f@pG2564) (pG2580@invoke-req* pG256e@pG2562) (pG2581@imp* pG256d@pG2560)) (values pG2580@invoke-req* pG257e@invoke-code))))))))) (set! pG28d6@pGe0a@top-level-expander pGe0a@top-level-expander) (set! pGe0c@rp (pG6d8@pG5b3@make-record-printer 'env (lambda (pG2589@x pG258a@p pG258b@wr) (display '"#<environment>" pG258a@p)))) (set! pG28d7@pGe0c@rp pGe0c@rp) (set! pGe16@env? (lambda (pG258f@x) (and (simple-struct? pG258f@x) (eq? (simple-struct-name pG258f@x) 'env)))) (set! pG28d8@pGe16@env? pGe16@env?) (set! pGe18@env-names (lambda (pG2591@x) (simple-struct-ref pG2591@x '0))) (set! pG28d9@pGe18@env-names pGe18@env-names) (set! pGe1a@set-env-names! (lambda (pG2593@x pG2594@val) (simple-struct-set! pG2593@x '0 pG2594@val))) (set! pG28da@pGe1a@set-env-names! pGe1a@set-env-names!) (set! pGe1c@env-labels (lambda (pG2597@x) (simple-struct-ref pG2597@x '1))) (set! pG28db@pGe1c@env-labels pGe1c@env-labels) (set! pGe1e@set-env-labels! (lambda (pG2599@x pG259a@val) (simple-struct-set! pG2599@x '1 pG259a@val))) (set! pG28dc@pGe1e@set-env-labels! pGe1e@set-env-labels!) (set! pGe20@env-itc (lambda (pG259d@x) (simple-struct-ref pG259d@x '2))) (set! pG28dd@pGe20@env-itc pGe20@env-itc) (set! pGe22@set-env-itc! (lambda (pG259f@x pG25a0@val) (simple-struct-set! pG259f@x '2 pG25a0@val))) (set! pG28de@pGe22@set-env-itc! pGe22@set-env-itc!) (set! pGe24@dummy '3) (set! pG28df@pGe24@dummy pGe24@dummy) (set! pGe26@rp (pG6d8@pG5b3@make-record-printer 'interaction-env (lambda (pG25a3@x pG25a4@p pG25a5@wr) (display '"#<environment>" pG25a4@p)))) (set! pG28e0@pGe26@rp pGe26@rp) (set! pGe30@interaction-env? (lambda (pG25a9@x) (and (simple-struct? pG25a9@x) (eq? (simple-struct-name pG25a9@x) 'interaction-env)))) (set! pG28e1@pGe30@interaction-env? pGe30@interaction-env?) (set! pGe32@interaction-env-rib (lambda (pG25ab@x) (simple-struct-ref pG25ab@x '0))) (set! pG28e2@pGe32@interaction-env-rib pGe32@interaction-env-rib) (set! pGe34@set-interaction-env-rib! (lambda (pG25ad@x pG25ae@val) (simple-struct-set! pG25ad@x '0 pG25ae@val))) (set! pG28e3@pGe34@set-interaction-env-rib! pGe34@set-interaction-env-rib!) (set! pGe36@interaction-env-r (lambda (pG25b1@x) (simple-struct-ref pG25b1@x '1))) (set! pG28e4@pGe36@interaction-env-r pGe36@interaction-env-r) (set! pGe38@set-interaction-env-r! (lambda (pG25b3@x pG25b4@val) (simple-struct-set! pG25b3@x '1 pG25b4@val))) (set! pG28e5@pGe38@set-interaction-env-r! pGe38@set-interaction-env-r!) (set! pGe3a@interaction-env-locs (lambda (pG25b7@x) (simple-struct-ref pG25b7@x '2))) (set! pG28e6@pGe3a@interaction-env-locs pGe3a@interaction-env-locs) (set! pGe3c@set-interaction-env-locs! (lambda (pG25b9@x pG25ba@val) (simple-struct-set! pG25b9@x '2 pG25ba@val))) (set! pG28e7@pGe3c@set-interaction-env-locs! pGe3c@set-interaction-env-locs!) (set! pGe3e@dummy '3) (set! pG28e8@pGe3e@dummy pGe3e@dummy) (set! pGe40@interaction-environment-symbols (lambda () (pGe48@environment-symbols (pGe80@interaction-environment)))) (set! pG28e9@pGe40@interaction-environment-symbols pGe40@interaction-environment-symbols) (set! pGe42@environment-bindings (lambda (pG25bd@e) (vector->list (vector-map (lambda (pG25bf@name pG25c0@label) (pGe44@parse-binding (cons pG25bf@name (pG9a6@pG7f3@imported-label->binding pG25c0@label)))) (pGe18@env-names pG25bd@e) (pGe1c@env-labels pG25bd@e))))) (set! pG28ea@pGe42@environment-bindings pGe42@environment-bindings) (set! pGe44@parse-binding (lambda (pG25c3@b) (cons (car pG25c3@b) (let ((pG25c5@t (cadr pG25c3@b))) (if (memv pG25c5@t '(core-prim global)) 'procedure (if (memv pG25c5@t '(core-macro macro global-macro)) 'syntax (if (memv pG25c5@t '($core-rtd)) 'record (if (eq? (car pG25c3@b) (cadr pG25c3@b)) 'syntax 'unknown)))))))) (set! pG28eb@pGe44@parse-binding pGe44@parse-binding) (set! pGe46@environment? (lambda (pG25c7@x) (or (pGe16@env? pG25c7@x) (pGe30@interaction-env? pG25c7@x)))) (set! pG28ec@pGe46@environment? pGe46@environment?) (set! pGe48@environment-symbols (lambda (pG25c9@x) (if (pGe16@env? pG25c9@x) (vector->list (pGe18@env-names pG25c9@x)) (if (pGe30@interaction-env? pG25c9@x) (map values (pGb29@rib-sym* (pGe32@interaction-env-rib pG25c9@x))) (assertion-violation 'environment-symbols '"not an environment" pG25c9@x))))) (set! pG28ed@pGe48@environment-symbols pGe48@environment-symbols) (set! pGe4a@environment (lambda pG25cb@imp* (let ((pG25cd@itc (pGdf8@make-collector))) (let ((pG25d3@pG25d0 pGdfe@imp-collector) (pG25d4@pG25d2 pG25cd@itc)) (let ((pG25d7@swap (lambda () (let ((pG25d9@t (pG25d3@pG25d0))) (begin (pG25d3@pG25d0 pG25d4@pG25d2) (set! pG25d4@pG25d2 pG25d9@t)))))) (dynamic-wind pG25d7@swap (lambda () (call-with-values (lambda () (pGdf4@parse-import-spec* pG25cb@imp*)) (lambda (pG25df@pG25dc pG25e0@pG25de) (let ((pG25e3@subst-labels pG25e0@pG25de) (pG25e4@subst-names pG25df@pG25dc)) (make-simple-struct 'env '4 (list pG25e4@subst-names pG25e3@subst-labels pG25cd@itc)))))) pG25d7@swap)))))) (set! pG28ee@pGe4a@environment pGe4a@environment) (set! pGe4c@null-environment (lambda (pG25e7@n) (begin (if (not (eqv? pG25e7@n '5)) (assertion-violation 'null-environment '"not 5" pG25e7@n) (void)) (pGe4a@environment '(psyntax null-environment-5))))) (set! pG28ef@pGe4c@null-environment pGe4c@null-environment) (set! pGe4e@scheme-report-environment (lambda (pG25e9@n) (begin (if (not (eqv? pG25e9@n '5)) (assertion-violation 'scheme-report-environment '"not 5" pG25e9@n) (void)) (pGe4a@environment '(psyntax scheme-report-environment-5))))) (set! pG28f0@pGe4e@scheme-report-environment pGe4e@scheme-report-environment) (set! pGe50@expand (lambda (pG25eb@x pG25ec@env) (if (pGe16@env? pG25ec@env) (let ((pG25ef@rib (pGdf6@make-top-rib (pGe18@env-names pG25ec@env) (pGe1c@env-labels pG25ec@env)))) (let ((pG25f1@x (make-simple-struct 'stx '5 (list pG25eb@x pGb0f@top-mark* (list pG25ef@rib) '()))) (pG25f2@itc (pGe20@env-itc pG25ec@env)) (pG25f3@rtc (pGdf8@make-collector)) (pG25f4@vtc (pGdf8@make-collector))) (let ((pG25f9@x (let ((pG260b@pG25fc pGe82@top-level-context) (pG260c@pG25fe pGdfa@inv-collector) (pG260d@pG2600 pGdfc@vis-collector) (pG260e@pG2602 pGdfe@imp-collector) (pG260f@pG2604 '#f) (pG2610@pG2606 pG25f3@rtc) (pG2611@pG2608 pG25f4@vtc) (pG2612@pG260a pG25f2@itc)) (let ((pG261b@swap (lambda () (begin (let ((pG261d@t (pG260b@pG25fc))) (begin (pG260b@pG25fc pG260f@pG2604) (set! pG260f@pG2604 pG261d@t))) (let ((pG261f@t (pG260c@pG25fe))) (begin (pG260c@pG25fe pG2610@pG2606) (set! pG2610@pG2606 pG261f@t))) (let ((pG2621@t (pG260d@pG2600))) (begin (pG260d@pG2600 pG2611@pG2608) (set! pG2611@pG2608 pG2621@t))) (let ((pG2623@t (pG260e@pG2602))) (begin (pG260e@pG2602 pG2612@pG260a) (set! pG2612@pG260a pG2623@t))))))) (dynamic-wind pG261b@swap (lambda () (pGdb4@chi-expr pG25f1@x '() '())) pG261b@swap))))) (begin (pGb47@seal-rib! pG25ef@rib) (values pG25f9@x (pG25f3@rtc)))))) (if (pGe30@interaction-env? pG25ec@env) (let ((pG2625@rib (pGe32@interaction-env-rib pG25ec@env)) (pG2626@r (pGe36@interaction-env-r pG25ec@env)) (pG2627@rtc (pGdf8@make-collector))) (let ((pG262b@x (make-simple-struct 'stx '5 (list pG25eb@x pGb0f@top-mark* (list pG2625@rib) '())))) (call-with-values (lambda () (let ((pG2641@pG2632 pGe82@top-level-context) (pG2642@pG2634 pGdfa@inv-collector) (pG2643@pG2636 pGdfc@vis-collector) (pG2644@pG2638 pGdfe@imp-collector) (pG2645@pG263a pG25ec@env) (pG2646@pG263c pG2627@rtc) (pG2647@pG263e (pGdf8@make-collector)) (pG2648@pG2640 (pGdf8@make-collector))) (let ((pG2651@swap (lambda () (begin (let ((pG2653@t (pG2641@pG2632))) (begin (pG2641@pG2632 pG2645@pG263a) (set! pG2645@pG263a pG2653@t))) (let ((pG2655@t (pG2642@pG2634))) (begin (pG2642@pG2634 pG2646@pG263c) (set! pG2646@pG263c pG2655@t))) (let ((pG2657@t (pG2643@pG2636))) (begin (pG2643@pG2636 pG2647@pG263e) (set! pG2647@pG263e pG2657@t))) (let ((pG2659@t (pG2644@pG2638))) (begin (pG2644@pG2638 pG2648@pG2640) (set! pG2648@pG2640 pG2659@t))))))) (dynamic-wind pG2651@swap (lambda () (pGe02@chi-interaction-expr pG262b@x pG2625@rib pG2626@r)) pG2651@swap)))) (lambda (pG265b@pG262e pG265c@pG2630) (let ((pG265f@r^ pG265c@pG2630) (pG2660@e pG265b@pG262e)) (begin (pGe38@set-interaction-env-r! pG25ec@env pG265f@r^) (values pG2660@e (pG2627@rtc)))))))) (assertion-violation 'expand '"not an environment" pG25ec@env))))) (set! pG28f1@pGe50@expand pGe50@expand) (set! pGe52@eval (lambda (pG2663@x pG2664@env) (begin (if (not (pGe46@environment? pG2664@env)) (error 'eval '"not an environment" pG2664@env) (void)) (call-with-values (lambda () (pGe50@expand pG2663@x pG2664@env)) (lambda (pG266b@pG2668 pG266c@pG266a) (let ((pG266f@invoke-req* pG266c@pG266a) (pG2670@x pG266b@pG2668)) (begin (for-each pG9a7@pG7f5@invoke-library pG266f@invoke-req*) (eval-core (pG731@pG6e9@expanded->core pG2670@x))))))))) (set! pG28f2@pGe52@eval pGe52@eval) (set! pGe54@library-expander (lambda pG26e1 (let ((pG26e2 (length pG26e1))) (if (= pG26e2 '3) (apply (lambda (pG2673@x pG2674@filename pG2675@verify-name) (letrec* ((pG267a@build-visit-code (lambda (pG26cf@macro*) (if (null? pG26cf@macro*) (pGaf1@pGa52@build-void) (pGaf0@pGa50@build-sequence '#f (map (lambda (pG26d1@x) (let ((pG26d3@loc (car pG26d1@x)) (pG26d4@src (cddr pG26d1@x))) (list 'set! pG26d3@loc pG26d4@src))) pG26cf@macro*))))) (pG267c@visit! (lambda (pG26c7@macro*) (for-each (lambda (pG26c9@x) (let ((pG26cb@loc (car pG26c9@x)) (pG26cc@proc (cadr pG26c9@x))) (set-symbol-value! pG26cb@loc pG26cc@proc))) pG26c7@macro*)))) (call-with-values (lambda () (pGe06@core-library-expander pG2673@x pG2675@verify-name)) (lambda (pG268f@pG267e pG2690@pG2680 pG2691@pG2682 pG2692@pG2684 pG2693@pG2686 pG2694@pG2688 pG2695@pG268a pG2696@pG268c pG2697@pG268e) (let ((pG26a1@export-env pG2697@pG268e) (pG26a2@export-subst pG2696@pG268c) (pG26a3@macro* pG2695@pG268a) (pG26a4@invoke-code pG2694@pG2688) (pG26a5@vis* pG2693@pG2686) (pG26a6@inv* pG2692@pG2684) (pG26a7@imp* pG2691@pG2682) (pG26a8@ver pG2690@pG2680) (pG26a9@name pG268f@pG267e)) (let ((pG26b3@id (gensym)) (pG26b4@name pG26a9@name) (pG26b5@ver pG26a8@ver) (pG26b6@imp* (map pG9ab@pG7fd@library-spec pG26a7@imp*)) (pG26b7@vis* (map pG9ab@pG7fd@library-spec pG26a5@vis*)) (pG26b8@inv* (map pG9ab@pG7fd@library-spec pG26a6@inv*)) (pG26b9@visit-proc (lambda () (pG267c@visit! pG26a3@macro*))) (pG26ba@invoke-proc (lambda () (eval-core (pG731@pG6e9@expanded->core pG26a4@invoke-code)))) (pG26bb@visit-code (pG267a@build-visit-code pG26a3@macro*)) (pG26bc@invoke-code pG26a4@invoke-code)) (begin (pG9a5@pG7f1@install-library pG26b3@id pG26b4@name pG26b5@ver pG26b6@imp* pG26b7@vis* pG26b8@inv* pG26a2@export-subst pG26a1@export-env pG26b9@visit-proc pG26ba@invoke-proc pG26bb@visit-code pG26bc@invoke-code '#t pG2674@filename) (values pG26b3@id pG26b4@name pG26b5@ver pG26b6@imp* pG26b7@vis* pG26b8@inv* pG26bc@invoke-code pG26bb@visit-code pG26a2@export-subst pG26a1@export-env)))))))) pG26e1) (if (= pG26e2 '2) (apply (lambda (pG26d7@x pG26d8@filename) (pGe54@library-expander pG26d7@x pG26d8@filename (lambda (pG26db@x) (values)))) pG26e1) (if (= pG26e2 '1) (apply (lambda (pG26dd@x) (pGe54@library-expander pG26dd@x '#f (lambda (pG26df@x) (values)))) pG26e1) (error 'apply '"invalid arg count"))))))) (set! pG28f3@pGe54@library-expander pGe54@library-expander) (set! pGe56@boot-library-expand (lambda (pG26e3@x) (call-with-values (lambda () (pGe54@library-expander pG26e3@x)) (lambda (pG26f9@pG26e6 pG26fa@pG26e8 pG26fb@pG26ea pG26fc@pG26ec pG26fd@pG26ee pG26fe@pG26f0 pG26ff@pG26f2 pG2700@pG26f4 pG2701@pG26f6 pG2702@pG26f8) (let ((pG270d@export-env pG2702@pG26f8) (pG270e@export-subst pG2701@pG26f6) (pG270f@visit-code pG2700@pG26f4) (pG2710@invoke-code pG26ff@pG26f2) (pG2711@inv* pG26fe@pG26f0) (pG2712@vis* pG26fd@pG26ee) (pG2713@imp* pG26fc@pG26ec) (pG2714@ver pG26fb@pG26ea) (pG2715@name pG26fa@pG26e8) (pG2716@id pG26f9@pG26e6)) (values pG2715@name pG2710@invoke-code pG270e@export-subst pG270d@export-env)))))) (set! pG28f4@pGe56@boot-library-expand pGe56@boot-library-expand) (set! pGe58@rev-map-append (lambda (pG2721@f pG2722@ls pG2723@ac) (if (null? pG2722@ls) pG2723@ac (pGe58@rev-map-append pG2721@f (cdr pG2722@ls) (cons (pG2721@f (car pG2722@ls)) pG2723@ac))))) (set! pG28f5@pGe58@rev-map-append pGe58@rev-map-append) (set! pGe5a@build-exports (lambda (pG2727@lex*+loc* pG2728@init*) (pGaf0@pGa50@build-sequence '#f (cons (pGaf1@pGa52@build-void) (pGe58@rev-map-append (lambda (pG272b@x) (list 'set! (cdr pG272b@x) (car pG272b@x))) pG2727@lex*+loc* pG2728@init*))))) (set! pG28f6@pGe5a@build-exports pGe5a@build-exports) (set! pGe5c@make-export-subst (lambda (pG272d@name* pG272e@id*) (map (lambda (pG2731@name pG2732@id) (let ((pG2735@label (pGba1@id->label pG2732@id))) (begin (if (not pG2735@label) (pGe72@syntax-violation '#f '"cannot export unbound identifier" pG2732@id) (void)) (cons pG2731@name pG2735@label)))) pG272d@name* pG272e@id*))) (set! pG28f7@pGe5c@make-export-subst pGe5c@make-export-subst) (set! pGe5e@make-export-env/macros (lambda (pG2737@lex* pG2738@loc* pG2739@r) (letrec* ((pG273e@lookup (lambda (pG275b@x) (let pG2763@f ((pG275d@x pG275b@x) (pG275e@lex* pG2737@lex*) (pG275f@loc* pG2738@loc*)) (if (pair? pG275e@lex*) (if (eq? pG275d@x (car pG275e@lex*)) (car pG275f@loc*) (pG2763@f pG275d@x (cdr pG275e@lex*) (cdr pG275f@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let pG2747@f ((pG273f@r pG2739@r) (pG2740@env '()) (pG2741@global* '()) (pG2742@macro* '())) (if (null? pG273f@r) (values pG2740@env pG2741@global* pG2742@macro*) (let ((pG2749@x (car pG273f@r))) (let ((pG274b@label (car pG2749@x)) (pG274c@b (cdr pG2749@x))) (let ((pG274f@t (pGba7@binding-type pG274c@b))) (if (memv pG274f@t '(lexical)) (let ((pG2751@v (pGba9@binding-value pG274c@b))) (let ((pG2753@loc (pG273e@lookup (pGd1c@lexical-var pG2751@v))) (pG2754@type (if (pGd1e@lexical-mutable? pG2751@v) 'mutable 'global))) (pG2747@f (cdr pG273f@r) (cons (cons* pG274b@label pG2754@type pG2753@loc) pG2740@env) (cons (cons (pGd1c@lexical-var pG2751@v) pG2753@loc) pG2741@global*) pG2742@macro*))) (if (memv pG274f@t '(local-macro)) (let ((pG2757@loc (gensym))) (pG2747@f (cdr pG273f@r) (cons (cons* pG274b@label 'global-macro pG2757@loc) pG2740@env) pG2741@global* (cons (cons pG2757@loc (pGba9@binding-value pG274c@b)) pG2742@macro*))) (if (memv pG274f@t '(local-macro!)) (let ((pG2759@loc (gensym))) (pG2747@f (cdr pG273f@r) (cons (cons* pG274b@label 'global-macro! pG2759@loc) pG2740@env) pG2741@global* (cons (cons pG2759@loc (pGba9@binding-value pG274c@b)) pG2742@macro*))) (if (memv pG274f@t '($rtd $module)) (pG2747@f (cdr pG273f@r) (cons pG2749@x pG2740@env) pG2741@global* pG2742@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (pGba7@binding-type pG274c@b) (pGba9@binding-value pG274c@b)))))))))))))) (set! pG28f8@pGe5e@make-export-env/macros pGe5e@make-export-env/macros) (set! pGe60@generate-temporaries (lambda (pG2765@ls) (let ((pG2767@t pG2765@ls)) (let ((pG2769@ls/false (pGd92@syntax-dispatch pG2767@t 'each-any))) (if pG2769@ls/false (apply (lambda (pG276b@ls) (map (lambda (pG276d@x) (make-simple-struct 'stx '5 (list (let ((pG276f@x (pGe78@syntax->datum pG276d@x))) (if (or (symbol? pG276f@x) (string? pG276f@x)) (gensym pG276f@x) (gensym 't))) pGb0f@top-mark* '() '()))) pG276b@ls)) pG2769@ls/false) (let ((pG2771@t pG2767@t)) (let ((pG2773@ls/false (pGd92@syntax-dispatch pG2771@t '_))) (if pG2773@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) pG2773@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG2771@t))))))))) (set! pG28f9@pGe60@generate-temporaries pGe60@generate-temporaries) (set! pGe62@free-identifier=? (lambda (pG2775@x pG2776@y) (if (pGb8b@id? pG2775@x) (if (pGb8b@id? pG2776@y) (pGb91@free-id=? pG2775@x pG2776@y) (assertion-violation 'free-identifier=? '"not an identifier" pG2776@y)) (assertion-violation 'free-identifier=? '"not an identifier" pG2775@x)))) (set! pG28fa@pGe62@free-identifier=? pGe62@free-identifier=?) (set! pGe64@bound-identifier=? (lambda (pG2779@x pG277a@y) (if (pGb8b@id? pG2779@x) (if (pGb8b@id? pG277a@y) (pGb8f@bound-id=? pG2779@x pG277a@y) (assertion-violation 'bound-identifier=? '"not an identifier" pG277a@y)) (assertion-violation 'bound-identifier=? '"not an identifier" pG2779@x)))) (set! pG28fb@pGe64@bound-identifier=? pGe64@bound-identifier=?) (set! pGe66@make-source-condition (lambda (pG277d@x) (letrec* ((pG2787@pG2782 (make-record-type-descriptor '&source-information &condition-rtd 'pG2785 '#f '#f '#((immutable file-name) (immutable line)))) (pG2789@pG2784 '#f) (pG278b@pG2783 (make-record-constructor-descriptor pG2787@pG2782 &condition-rcd pG2789@pG2784)) (pG278e@pG2781 (record-predicate pG2787@pG2782)) (pG2790@make-source-condition (record-constructor pG278b@pG2783)) (pG2792@pG277f (record-accessor pG2787@pG2782 '0)) (pG2794@pG2780 (record-accessor pG2787@pG2782 '1)) (pG2796@source-condition? (condition-predicate pG2787@pG2782)) (pG2798@source-filename (condition-accessor pG2787@pG2782 pG2792@pG277f)) (pG279a@source-character (condition-accessor pG2787@pG2782 pG2794@pG2780))) (if (and (pair? pG277d@x) (pair? (cdr pG277d@x))) (pG2790@make-source-condition (car pG277d@x) (cadr pG277d@x)) (condition))))) (set! pG28fc@pGe66@make-source-condition pGe66@make-source-condition) (set! pGe68@extract-position-condition (lambda (pG279b@x) (pGe66@make-source-condition (pGe6a@expression-position pG279b@x)))) (set! pG28fd@pGe68@extract-position-condition pGe68@extract-position-condition) (set! pGe6a@expression-position (lambda (pG279d@x) (and (pGb57@stx? pG279d@x) (let ((pG279f@x (pGb59@stx-expr pG279d@x))) (and (pG6cf@pG5a1@annotation? pG279f@x) (pG6d0@pG5a3@annotation-source pG279f@x)))))) (set! pG28fe@pGe6a@expression-position pGe6a@expression-position) (set! pGe6c@assertion-error (lambda (pG27a1@expr pG27a2@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list pG27a1@expr)) (pGe66@make-source-condition pG27a2@pos))))) (set! pG28ff@pGe6c@assertion-error pGe6c@assertion-error) (set! pGe6e@syntax-error (lambda (pG27a5@x . pG27a7@args) (begin (if (not (for-all string? pG27a7@args)) (assertion-violation 'syntax-error '"invalid argument" pG27a7@args) (void)) (raise (condition (make-message-condition (if (null? pG27a7@args) '"invalid syntax" (apply string-append pG27a7@args))) (make-syntax-violation (pGe78@syntax->datum pG27a5@x) '#f) (pGe68@extract-position-condition pG27a5@x)))))) (set! pG2900@pGe6e@syntax-error pGe6e@syntax-error) (set! pGe70@syntax-violation* (lambda (pG27a9@who pG27aa@msg pG27ab@form pG27ac@condition-object) (begin (if (not (string? pG27aa@msg)) (assertion-violation 'syntax-violation '"message is not a string" pG27aa@msg) (void)) (let ((pG27b1@who (if (or (string? pG27a9@who) (symbol? pG27a9@who)) pG27a9@who (if (not pG27a9@who) (let ((pG27b3@t pG27ab@form)) (let ((pG27b5@ls/false (pGd92@syntax-dispatch pG27b3@t 'any))) (if (and pG27b5@ls/false (apply (lambda (pG27b7@id) (pGb8b@id? pG27b7@id)) pG27b5@ls/false)) (apply (lambda (pG27b9@id) (pGe78@syntax->datum pG27b9@id)) pG27b5@ls/false) (let ((pG27bb@t pG27b3@t)) (let ((pG27bd@ls/false (pGd92@syntax-dispatch pG27bb@t '(any . any)))) (if (and pG27bd@ls/false (apply (lambda (pG27bf@id pG27c0@rest) (pGb8b@id? pG27bf@id)) pG27bd@ls/false)) (apply (lambda (pG27c3@id pG27c4@rest) (pGe78@syntax->datum pG27c3@id)) pG27bd@ls/false) (let ((pG27c7@t pG27bb@t)) (let ((pG27c9@ls/false (pGd92@syntax-dispatch pG27c7@t '_))) (if pG27c9@ls/false (apply (lambda () '#f) pG27c9@ls/false) (pGe72@syntax-violation '#f '"invalid syntax" pG27c7@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" pG27a9@who))))) (raise (condition (if pG27b1@who (make-who-condition pG27b1@who) (condition)) (make-message-condition pG27aa@msg) pG27ac@condition-object (pGe68@extract-position-condition pG27ab@form))))))) (set! pG2901@pGe70@syntax-violation* pGe70@syntax-violation*) (set! pGe72@syntax-violation (lambda pG27d9 (let ((pG27da (length pG27d9))) (if (= pG27da '3) (apply (lambda (pG27cb@who pG27cc@msg pG27cd@form) (pGe72@syntax-violation pG27cb@who pG27cc@msg pG27cd@form '#f)) pG27d9) (if (= pG27da '4) (apply (lambda (pG27d1@who pG27d2@msg pG27d3@form pG27d4@subform) (pGe70@syntax-violation* pG27d1@who pG27d2@msg pG27d3@form (make-syntax-violation (pGe78@syntax->datum pG27d3@form) (pGe78@syntax->datum pG27d4@subform)))) pG27d9) (error 'apply '"invalid arg count")))))) (set! pG2902@pGe72@syntax-violation pGe72@syntax-violation) (set! pGe74@identifier? (lambda (pG27db@x) (pGb8b@id? pG27db@x))) (set! pG2903@pGe74@identifier? pGe74@identifier?) (set! pGe76@datum->syntax (lambda (pG27dd@id pG27de@datum) (if (pGb8b@id? pG27dd@id) (pGb6b@datum->stx pG27dd@id pG27de@datum) (assertion-violation 'datum->syntax '"not an identifier" pG27dd@id)))) (set! pG2904@pGe76@datum->syntax pGe76@datum->syntax) (set! pGe78@syntax->datum (lambda (pG27e1@x) (pGb9f@stx->datum pG27e1@x))) (set! pG2905@pGe78@syntax->datum pGe78@syntax->datum) (set! pGe7a@ungensym-all (lambda (pG27e3@code) (if (pair? pG27e3@code) (cons (pGe7a@ungensym-all (car pG27e3@code)) (pGe7a@ungensym-all (cdr pG27e3@code))) (if (symbol? pG27e3@code) (ungensym pG27e3@code) pG27e3@code)))) (set! pG2906@pGe7a@ungensym-all pGe7a@ungensym-all) (set! pGe7c@compile-r6rs-top-level (lambda (pG27e5@x*) (call-with-values (lambda () (pGe0a@top-level-expander pG27e5@x*)) (lambda (pG27eb@pG27e8 pG27ec@pG27ea) (let ((pG27ef@invoke-code pG27ec@pG27ea) (pG27f0@lib* pG27eb@pG27e8)) (lambda () (begin (for-each pG9a7@pG7f5@invoke-library pG27f0@lib*) (let ((pG27f3@expanded (pG731@pG6e9@expanded->core pG27ef@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (pGe7a@ungensym-all pG27f3@expanded)) (void)) (eval-core pG27f3@expanded)))))))))) (set! pG2907@pGe7c@compile-r6rs-top-level pGe7c@compile-r6rs-top-level) (set! pGe7e@pre-compile-r6rs-top-level (lambda (pG27f5@x*) (call-with-values (lambda () (pGe0a@top-level-expander pG27f5@x*)) (lambda (pG27fb@pG27f8 pG27fc@pG27fa) (let ((pG27ff@invoke-code pG27fc@pG27fa) (pG2800@lib* pG27fb@pG27f8)) (begin (for-each pG9a7@pG7f5@invoke-library pG2800@lib*) (pG6d9@pG5b5@compile-core (pG731@pG6e9@expanded->core pG27ff@invoke-code)))))))) (set! pG2908@pGe7e@pre-compile-r6rs-top-level pGe7e@pre-compile-r6rs-top-level) (set! pGe80@interaction-environment (let ((pG2803@the-env '#f)) (lambda () (or pG2803@the-env (let ((pG2805@lib (pG9a0@pG7e7@find-library-by-name '(mosh interaction))) (pG2806@rib (pGb3f@make-empty-rib))) (begin (let ((pG2809@subst (pG982@pG7ab@library-subst pG2805@lib))) (begin (pGb2b@set-rib-sym*! pG2806@rib (map car pG2809@subst)) (pGb2f@set-rib-mark**! pG2806@rib (map (lambda (pG280b@x) pGb0f@top-mark*) pG2809@subst)) (pGb33@set-rib-label*! pG2806@rib (map cdr pG2809@subst)))) (let ((pG280d@env (make-simple-struct 'interaction-env '4 (list pG2806@rib '() '())))) (begin (set! pG2803@the-env pG280d@env) pG280d@env)))))))) (set! pG2909@pGe80@interaction-environment pGe80@interaction-environment) (set! pGe82@top-level-context (pG6db@pG5b9@make-parameter '#f)) (set! pG290a@pGe82@top-level-context pGe82@top-level-context) (pG99d@pG7e1@current-library-expander pGe54@library-expander))
(begin (begin (pG72e@pG6e3@current-primitive-locations (lambda (pG2e73@x) (let ((pG2e75@t (assq pG2e73@x '((syntax-error . pG2900@pGe6e@syntax-error) (syntax-dispatch . pG289e@pGd92@syntax-dispatch) (load . pG2a8a@pG2931@load) (interaction-environment . pG2909@pGe80@interaction-environment) (library-path . pG995@pG7d1@library-path) (mosh-cache-dir . pG6dc@pG5bb@mosh-cache-dir) (make-parameter . pG6db@pG5b9@make-parameter) (make-variable-transformer . pG285b@pGbbd@make-variable-transformer) (identifier? . pG2903@pGe74@identifier?) (generate-temporaries . pG28f9@pGe60@generate-temporaries) (free-identifier=? . pG28fa@pGe62@free-identifier=?) (syntax->datum . pG2905@pGe78@syntax->datum) (datum->syntax . pG2904@pGe76@datum->syntax) (bound-identifier=? . pG28fb@pGe64@bound-identifier=?) (scheme-report-environment . pG28f0@pGe4e@scheme-report-environment) (null-environment . pG28ef@pGe4c@null-environment) (command-line . pG2a87@pG292b@command-line) (eval . pG28f2@pGe52@eval) (environment . pG28ee@pGe4a@environment) (syntax-violation . pG2902@pGe72@syntax-violation) (assertion-error . pG28ff@pGe6c@assertion-error))))) (if pG2e75@t (cdr pG2e75@t) '#f)))) (pG9a5@pG7f1@install-library 'pG2e50 '(mosh interaction) '() '() '() '() '((regexp? . pG2e10) (alist->eq-hash-table . pG2e0c) (format . pG2e09) (string-split . pG2def) (%start-process . pG2de8) (%call-process . pG2de7) (set-current-directory! . pG2de3) (expand-path . pG2de2) (current-directory . pG2de1) (%getpid . pG2de0) (%waitpid . pG2ddf) (simple-struct-name . pG2dde) (simple-struct-set! . pG2ddd) (simple-struct-ref . pG2ddc) (make-simple-struct . pG2ddb) (simple-struct? . pG2dda) (pointer-ref-c-int64 . pG2dd9) (pointer-ref-c-int32 . pG2dd8) (pointer-ref-c-int16 . pG2dd7) (pointer-ref-c-int8 . pG2dd6) (pointer-ref-c-uint64 . pG2dd5) (pointer-ref-c-uint32 . pG2dd4) (pointer-ref-c-uint16 . pG2dd3) (pointer-ref-c-uint8 . pG2dd2) (pointer-set-c-uint64! . pG2dd1) (pointer-set-c-uint32! . pG2dd0) (pointer-set-c-uint16! . pG2dcf) (pointer-set-c-uint8! . pG2dce) (pointer-set-c-int64! . pG2dcd) (pointer-set-c-int32! . pG2dcc) (pointer-set-c-int16! . pG2dcb) (pointer-set-c-int8! . pG2dca) (pointer-set-c-pointer! . pG2dc9) (pointer-set-c-double! . pG2dc8) (pointer-set-c-float! . pG2dc7) (pointer-set-c-long-long! . pG2dc6) (pointer-set-c-long! . pG2dc5) (pointer-set-c-int! . pG2dc4) (pointer-set-c-short! . pG2dc3) (pointer-set-c-char! . pG2dc2) (pointer-ref-c-pointer . pG2dc1) (pointer-ref-c-double . pG2dc0) (pointer-ref-c-float . pG2dbf) (pointer-ref-c-unsigned-long-long . pG2dbe) (pointer-ref-c-signed-long-long . pG2dbd) (pointer-ref-c-unsigned-long . pG2dbc) (pointer-ref-c-signed-long . pG2dbb) (pointer-ref-c-unsigned-int . pG2dba) (pointer-ref-c-signed-int . pG2db9) (pointer-ref-c-unsigned-short . pG2db8) (pointer-ref-c-signed-short . pG2db7) (pointer-ref-c-unsigned-char . pG2db6) (pointer-ref-c-signed-char . pG2db5) (pointer->integer . pG2db4) (integer->pointer . pG2db3) (pointer? . pG2db2) (shared-errno . pG2db1) (%ffi-supported? . pG2daa) (%ffi-pointer->string . pG2da9) (%ffi-call . pG2da8) (%ffi-lookup . pG2da7) (%ffi-open . pG2da6) (null-terminated-utf8->string . pG2da5) (null-terminated-bytevector->string . pG2da4) (%exec . pG2da3) (%fork . pG2da2) (%pipe . pG2da1) (p . pG2d9e) (whereis . pG2d82) (register . pG2d81) (vm-join! . pG2d80) (vm-set-value! . pG2d7f) (vm? . pG2d7e) (main-vm? . pG2d7d) (vm-eval . pG2d7c) (vm-self . pG2d7b) (vm-start! . pG2d7a) (make-vm . pG2d79) (mutex-try-lock! . pG2d78) (mutex-unlock! . pG2d77) (mutex-lock! . pG2d76) (mutex? . pG2d75) (make-mutex . pG2d74) (condition-variable-notify-all! . pG2d73) (condition-variable-notify! . pG2d72) (condition-variable-wait! . pG2d71) (make-condition-variable . pG2d70) (write/ss . pG2d6f) (string-upcase . pG2d52) (string-titlecase . pG2d51) (string-normalize-nfkd . pG2d50) (string-normalize-nfkc . pG2d4f) (string-normalize-nfd . pG2d4e) (string-normalize-nfc . pG2d4d) (string-foldcase . pG2d4c) (string-downcase . pG2d4b) (string-ci>? . pG2d4a) (string-ci>=? . pG2d49) (string-ci=? . pG2d48) (string-ci<? . pG2d47) (string-ci<=? . pG2d46) (char-whitespace? . pG2d45) (char-upper-case? . pG2d44) (char-title-case? . pG2d43) (char-numeric? . pG2d42) (char-lower-case? . pG2d41) (char-general-category . pG2d40) (char-upcase . pG2d3f) (char-titlecase . pG2d3e) (char-foldcase . pG2d3d) (char-downcase . pG2d3c) (char-ci>? . pG2d3b) (char-ci>=? . pG2d3a) (char-ci=? . pG2d39) (char-ci<? . pG2d38) (char-ci<=? . pG2d37) (char-alphabetic? . pG2d36) (make-variable-transformer . pGbbc) (identifier? . pGe73) (generate-temporaries . pGe5f) (free-identifier=? . pGe61) (syntax->datum . pGe77) (datum->syntax . pGe75) (bound-identifier=? . pGe63) (record-type-descriptor? . pG2d35) (record-predicate . pG2d34) (record-mutator . pG2d33) (record-constructor . pG2d32) (record-accessor . pG2d31) (make-record-type-descriptor . pG2d30) (make-record-constructor-descriptor . pG2d2f) (record? . pG2d2e) (record-type-uid . pG2d2d) (record-type-sealed? . pG2d2c) (record-type-parent . pG2d2b) (record-type-opaque? . pG2d2a) (record-type-name . pG2d29) (record-type-generative? . pG2d28) (record-type-field-names . pG2d27) (record-rtd . pG2d26) (record-field-mutable? . pG2d25) (delete-file . pG2d24) (file-exists? . pG2d23) (vector-sort! . pG2d22) (vector-sort . pG2d21) (list-sort . pG2d20) (symbol-hash . pG2d1f) (string-ci-hash . pG2d1e) (string-hash . pG2d1d) (equal-hash . pG2d1c) (hashtable-equivalence-function . pG2d1b) (make-hashtable . pG2d1a) (hashtable-hash-function . pG2d19) (make-eqv-hashtable . pG2d18) (make-eq-hashtable . pG2d17) (hashtable? . pG2d16) (hashtable-update! . pG2d15) (hashtable-size . pG2d14) (hashtable-set! . pG2d13) (hashtable-ref . pG2d12) (hashtable-mutable? . pG2d11) (hashtable-keys . pG2d10) (hashtable-entries . pG2d0f) (hashtable-delete! . pG2d0e) (hashtable-copy . pG2d0d) (hashtable-contains? . pG2d0c) (hashtable-clear! . pG2d0b) (call-with-output-file . pG2d0a) (call-with-input-file . pG2d09) (write-char . pG2d08) (write . pG2d07) (with-output-to-file . pG2d06) (with-input-from-file . pG2d05) (read-char . pG2d04) (read . pG2d03) (peek-char . pG2d02) (open-output-file . pG2d01) (open-input-file . pG2d00) (newline . pG2cff) (display . pG2cfe) (close-output-port . pG2cfd) (close-input-port . pG2cfc) (eof-object? . pG2cfb) (eof-object . pG2cfa) (current-error-port . pG2cf9) (current-output-port . pG2cf8) (current-input-port . pG2cf7) (output-port? . pG2cf6) (input-port? . pG2cf5) (utf-8-codec . pG2cf4) (utf-16-codec . pG2cf3) (transcoder-error-handling-mode . pG2cf2) (transcoder-eol-style . pG2cf1) (transcoder-codec . pG2cf0) (transcoded-port . pG2cef) (textual-port? . pG2cee) (string->bytevector . pG2ced) (standard-output-port . pG2cec) (standard-input-port . pG2ceb) (standard-error-port . pG2cea) (set-port-position! . pG2ce9) (put-u8 . pG2ce8) (put-string . pG2ce7) (put-datum . pG2ce6) (put-char . pG2ce5) (put-bytevector . pG2ce4) (port? . pG2ce3) (port-transcoder . pG2ce2) (port-position . pG2ce1) (port-has-set-port-position!? . pG2ce0) (port-has-port-position? . pG2cdf) (port-eof? . pG2cde) (output-port-buffer-mode . pG2cdd) (open-string-output-port . pG2cdc) (open-string-input-port . pG2cdb) (open-file-output-port . pG2cda) (open-file-input/output-port . pG2cd9) (open-file-input-port . pG2cd8) (open-bytevector-output-port . pG2cd7) (open-bytevector-input-port . pG2cd6) (native-transcoder . pG2cd5) (native-eol-style . pG2cd4) (make-transcoder . pG2cd3) (latin-1-codec . pG2cd2) (make-i/o-write-error . pG2cd1) (make-i/o-read-error . pG2cd0) (make-i/o-port-error . pG2ccf) (make-i/o-invalid-position-error . pG2cce) (make-i/o-filename-error . pG2ccd) (make-i/o-file-protection-error . pG2ccc) (make-i/o-file-is-read-only-error . pG2ccb) (make-i/o-file-does-not-exist-error . pG2cca) (make-i/o-file-already-exists-error . pG2cc9) (make-i/o-error . pG2cc8) (make-i/o-encoding-error . pG2cc7) (make-i/o-decoding-error . pG2cc6) (make-custom-textual-output-port . pG2cc5) (make-custom-textual-input/output-port . pG2cc4) (make-custom-textual-input-port . pG2cc3) (make-custom-binary-output-port . pG2cc2) (make-custom-binary-input/output-port . pG2cc1) (make-custom-binary-input-port . pG2cc0) (make-bytevector . pG2cbf) (lookahead-u8 . pG2cbe) (lookahead-char . pG2cbd) (i/o-write-error? . pG2cbc) (i/o-read-error? . pG2cbb) (i/o-port-error? . pG2cba) (i/o-invalid-position-error? . pG2cb9) (i/o-filename-error? . pG2cb8) (i/o-file-protection-error? . pG2cb7) (i/o-file-is-read-only-error? . pG2cb6) (i/o-file-does-not-exist-error? . pG2cb5) (i/o-file-already-exists-error? . pG2cb4) (i/o-error? . pG2cb3) (i/o-error-position . pG2cb2) (i/o-error-port . pG2cb1) (i/o-error-filename . pG2cb0) (i/o-encoding-error? . pG2caf) (i/o-encoding-error-char . pG2cae) (i/o-decoding-error? . pG2cad) (get-u8 . pG2cac) (get-string-n! . pG2cab) (get-string-n . pG2caa) (get-string-all . pG2ca9) (get-line . pG2ca8) (get-datum . pG2ca7) (get-char . pG2ca6) (get-bytevector-some . pG2ca5) (get-bytevector-n! . pG2ca4) (get-bytevector-n . pG2ca3) (get-bytevector-all . pG2ca2) (flush-output-port . pG2ca1) (close-port . pG2ca0) (exit . pG2c98) (command-line . pG292a) (string-fill! . pG2c97) (string-set! . pG2c96) (set-cdr! . pG2c95) (set-car! . pG2c94) (remove . pG2c93) (remv . pG2c92) (remp . pG2c91) (remq . pG2c90) (partition . pG2c8f) (memv . pG2c8e) (memq . pG2c8d) (memp . pG2c8c) (member . pG2c8b) (exists . pG2c8a) (for-all . pG2c89) (fold-right . pG2c88) (fold-left . pG2c87) (find . pG2c86) (filter . pG2c85) (cons* . pG2c84) (assv . pG2c83) (assq . pG2c82) (assp . pG2c81) (assoc . pG2c80) (call-with-string-output-port . pG2c7f) (call-with-port . pG2c7e) (call-with-bytevector-output-port . pG2c7d) (bytevector->string . pG2c7c) (buffer-mode? . pG2c7b) (binary-port? . pG2c7a) (with-exception-handler . pG2c79) (raise-continuable . pG2c78) (raise . pG2c77) (eval . pGe51) (environment . pGe49) (make-enumeration . pG2c76) (enum-set=? . pG2c75) (enum-set-universe . pG2c74) (enum-set-union . pG2c73) (enum-set-subset? . pG2c72) (enum-set-projection . pG2c71) (enum-set-member? . pG2c70) (enum-set-intersection . pG2c6f) (enum-set-indexer . pG2c6e) (enum-set-difference . pG2c6d) (enum-set-constructor . pG2c6c) (enum-set-complement . pG2c6b) (enum-set->list . pG2c6a) (who-condition? . pG2c69) (warning? . pG2c68) (violation? . pG2c67) (undefined-violation? . pG2c66) (syntax-violation? . pG2c65) (syntax-violation-subform . pG2c64) (syntax-violation-form . pG2c63) (syntax-violation . pGe71) (simple-conditions . pG2c62) (serious-condition? . pG2c61) (non-continuable-violation? . pG2c60) (message-condition? . pG2c5f) (make-who-condition . pG2c5e) (make-warning . pG2c5d) (make-violation . pG2c5c) (make-undefined-violation . pG2c5b) (make-syntax-violation . pG2c5a) (make-serious-condition . pG2c59) (make-non-continuable-violation . pG2c58) (make-message-condition . pG2c57) (make-lexical-violation . pG2c56) (make-irritants-condition . pG2c55) (make-implementation-restriction-violation . pG2c54) (make-error . pG2c53) (make-assertion-violation . pG2c52) (lexical-violation? . pG2c51) (irritants-condition? . pG2c50) (implementation-restriction-violation? . pG2c4f) (error? . pG2c4e) (condition-who . pG2c4d) (condition-predicate . pG2c4c) (condition-message . pG2c4b) (condition-irritants . pG2c4a) (condition-accessor . pG2c49) (condition . pG2c48) (assertion-violation? . pG2c47) (condition? . pG2c46) (utf32->string . pG2c45) (utf16->string . pG2c44) (utf8->string . pG2c43) (uint-list->bytevector . pG2c42) (u8-list->bytevector . pG2c41) (string->utf8 . pG2c40) (string->utf32 . pG2c3f) (string->utf16 . pG2c3e) (sint-list->bytevector . pG2c3d) (native-endianness . pG2c3c) (bytevector? . pG2c3b) (bytevector=? . pG2c3a) (bytevector-uint-set! . pG2c39) (bytevector-uint-ref . pG2c38) (bytevector-u8-set! . pG2c37) (bytevector-u8-ref . pG2c36) (bytevector-u64-set! . pG2c35) (bytevector-u64-ref . pG2c34) (bytevector-u64-native-set! . pG2c33) (bytevector-u64-native-ref . pG2c32) (bytevector-u32-set! . pG2c31) (bytevector-u32-ref . pG2c30) (bytevector-u32-native-set! . pG2c2f) (bytevector-u32-native-ref . pG2c2e) (bytevector-u16-set! . pG2c2d) (bytevector-u16-ref . pG2c2c) (bytevector-u16-native-set! . pG2c2b) (bytevector-u16-native-ref . pG2c2a) (bytevector-sint-set! . pG2c29) (bytevector-sint-ref . pG2c28) (bytevector-s8-set! . pG2c27) (bytevector-s8-ref . pG2c26) (bytevector-s64-set! . pG2c25) (bytevector-s64-ref . pG2c24) (bytevector-s64-native-set! . pG2c23) (bytevector-s64-native-ref . pG2c22) (bytevector-s32-set! . pG2c21) (bytevector-s32-ref . pG2c20) (bytevector-s32-native-set! . pG2c1f) (bytevector-s32-native-ref . pG2c1e) (bytevector-s16-set! . pG2c1d) (bytevector-s16-ref . pG2c1c) (bytevector-s16-native-set! . pG2c1b) (bytevector-s16-native-ref . pG2c1a) (bytevector-length . pG2c19) (bytevector-ieee-single-ref . pG2c18) (bytevector-ieee-single-set! . pG2c17) (bytevector-ieee-single-native-set! . pG2c16) (bytevector-ieee-single-native-ref . pG2c15) (bytevector-ieee-double-set! . pG2c14) (bytevector-ieee-double-ref . pG2c13) (bytevector-ieee-double-native-set! . pG2c12) (bytevector-ieee-double-native-ref . pG2c11) (bytevector-fill! . pG2c10) (bytevector-copy! . pG2c0f) (bytevector-copy . pG2c0e) (bytevector->uint-list . pG2c0d) (bytevector->u8-list . pG2c0c) (bytevector->sint-list . pG2c0b) (no-nans-violation? . pG2c0a) (no-infinities-violation? . pG2c09) (make-no-nans-violation . pG2c08) (make-no-infinities-violation . pG2c07) (real->flonum . pG2c06) (flzero? . pG2c05) (fltruncate . pG2c04) (fltan . pG2c03) (flsqrt . pG2c02) (flsin . pG2c01) (flround . pG2c00) (flpositive? . pG2bff) (flonum? . pG2bfe) (flodd? . pG2bfd) (flnumerator . pG2bfc) (flnegative? . pG2bfb) (flnan? . pG2bfa) (flmod0 . pG2bf9) (flmod . pG2bf8) (flmin . pG2bf7) (flmax . pG2bf6) (fllog . pG2bf5) (flinteger? . pG2bf4) (flinfinite? . pG2bf3) (flfloor . pG2bf2) (flfinite? . pG2bf1) (flexpt . pG2bf0) (flexp . pG2bef) (fleven? . pG2bee) (fldiv0-and-mod0 . pG2bed) (fldiv0 . pG2bec) (fldiv-and-mod . pG2beb) (fldiv . pG2bea) (fldenominator . pG2be9) (flcos . pG2be8) (flceiling . pG2be7) (flatan . pG2be6) (flasin . pG2be5) (flacos . pG2be4) (flabs . pG2be3) (fl>? . pG2be2) (fl>=? . pG2be1) (fl=? . pG2be0) (fl<? . pG2bdf) (fl<=? . pG2bde) (fl/ . pG2bdd) (fl- . pG2bdc) (fl+ . pG2bdb) (fl* . pG2bda) (fixnum->flonum . pG2bd9) (fxzero? . pG2bd8) (fxxor . pG2bd7) (fxrotate-bit-field . pG2bd6) (fxreverse-bit-field . pG2bd5) (fxpositive? . pG2bd4) (fxodd? . pG2bd3) (fxnot . pG2bd2) (fxnegative? . pG2bd1) (fxmod0 . pG2bd0) (fxmod . pG2bcf) (fxmin . pG2bce) (fxmax . pG2bcd) (fxlength . pG2bcc) (fxior . pG2bcb) (fxif . pG2bca) (fxfirst-bit-set . pG2bc9) (fxeven? . pG2bc8) (fxdiv0-and-mod0 . pG2bc7) (fxdiv0 . pG2bc6) (fxdiv-and-mod . pG2bc5) (fxdiv . pG2bc4) (fxcopy-bit-field . pG2bc3) (fxcopy-bit . pG2bc2) (fxbit-set? . pG2bc1) (fxbit-field . pG2bc0) (fxbit-count . pG2bbf) (fxarithmetic-shift-right . pG2bbe) (fxarithmetic-shift-left . pG2bbd) (fxarithmetic-shift . pG2bbc) (fxand . pG2bbb) (fx>? . pG2bba) (fx>=? . pG2bb9) (fx=? . pG2bb8) (fx<? . pG2bb7) (fx<=? . pG2bb6) (fx-/carry . pG2bb5) (fx- . pG2bb4) (fx+/carry . pG2bb3) (fx+ . pG2bb2) (fx*/carry . pG2bb1) (fx* . pG2bb0) (greatest-fixnum . pG2baf) (least-fixnum . pG2bae) (fixnum-width . pG2bad) (fixnum? . pG2bac) (bitwise-rotate-bit-field . pG2bab) (bitwise-reverse-bit-field . pG2baa) (bitwise-length . pG2ba9) (bitwise-if . pG2ba8) (bitwise-first-bit-set . pG2ba7) (bitwise-copy-bit-field . pG2ba6) (bitwise-copy-bit . pG2ba5) (bitwise-bit-set? . pG2ba4) (bitwise-bit-field . pG2ba3) (bitwise-bit-count . pG2ba2) (bitwise-xor . pG2ba1) (bitwise-ior . pG2ba0) (bitwise-and . pG2b9f) (bitwise-not . pG2b9e) (bitwise-arithmetic-shift-right . pG2b9d) (bitwise-arithmetic-shift-left . pG2b9c) (bitwise-arithmetic-shift . pG2b9b) (zero? . pG2b9a) (vector? . pG2b99) (vector-set! . pG2b98) (vector-ref . pG2b97) (vector-map . pG2b96) (vector-length . pG2b95) (vector-for-each . pG2b94) (vector-fill! . pG2b93) (vector->list . pG2b92) (vector . pG2b91) (values . pG2b90) (truncate . pG2b8f) (tan . pG2b8e) (symbol? . pG2b8d) (symbol=? . pG2b8c) (symbol->string . pG2b8b) (substring . pG2b8a) (string? . pG2b89) (string>? . pG2b88) (string>=? . pG2b87) (string=? . pG2b86) (string<? . pG2b85) (string<=? . pG2b84) (string-ref . pG2b83) (string-length . pG2b82) (string-for-each . pG2b81) (string-copy . pG2b80) (string-append . pG2b7f) (string->symbol . pG2b7e) (string->number . pG2b7d) (string->list . pG2b7c) (string . pG2b7b) (sqrt . pG2b7a) (sin . pG2b79) (round . pG2b78) (reverse . pG2b77) (real? . pG2b76) (real-valued? . pG2b75) (real-part . pG2b74) (rationalize . pG2b73) (rational? . pG2b72) (rational-valued? . pG2b71) (procedure? . pG2b70) (positive? . pG2b6f) (pair? . pG2b6e) (odd? . pG2b6d) (numerator . pG2b6c) (number? . pG2b6b) (number->string . pG2b6a) (null? . pG2b69) (not . pG2b68) (negative? . pG2b67) (nan? . pG2b66) (min . pG2b65) (max . pG2b64) (map . pG2b63) (make-vector . pG2b62) (make-string . pG2b61) (make-rectangular . pG2b60) (make-polar . pG2b5f) (magnitude . pG2b5e) (log . pG2b5d) (list? . pG2b5c) (list-tail . pG2b5b) (list-ref . pG2b5a) (list->vector . pG2b59) (list->string . pG2b58) (list . pG2b57) (length . pG2b56) (lcm . pG2b55) (integer? . pG2b54) (integer-valued? . pG2b53) (integer->char . pG2b52) (infinite? . pG2b51) (inexact? . pG2b50) (inexact . pG2b4f) (imag-part . pG2b4e) (gcd . pG2b4d) (for-each . pG2b4c) (floor . pG2b4b) (finite? . pG2b4a) (expt . pG2b49) (exp . pG2b48) (exact? . pG2b47) (exact-integer-sqrt . pG2b46) (exact . pG2b45) (even? . pG2b44) (error . pG2b43) (eqv? . pG2b42) (equal? . pG2b41) (eq? . pG2b40) (dynamic-wind . pG2b3f) (div0-and-mod0 . pG2b3e) (mod0 . pG2b3d) (div0 . pG2b3c) (div-and-mod . pG2b3b) (mod . pG2b3a) (div . pG2b39) (denominator . pG2b38) (cos . pG2b37) (cons . pG2b36) (complex? . pG2b35) (char? . pG2b34) (char>? . pG2b33) (char>=? . pG2b32) (char=? . pG2b31) (char<? . pG2b30) (char<=? . pG2b2f) (char->integer . pG2b2e) (ceiling . pG2b2d) (call-with-values . pG2b2c) (call/cc . pG2b2b) (call-with-current-continuation . pG2b2a) (cddddr . pG2b29) (cdddar . pG2b28) (cddadr . pG2b27) (cddaar . pG2b26) (cdaddr . pG2b25) (cdadar . pG2b24) (cdaadr . pG2b23) (cdaaar . pG2b22) (cadddr . pG2b21) (caddar . pG2b20) (cadadr . pG2b1f) (cadaar . pG2b1e) (caaddr . pG2b1d) (caadar . pG2b1c) (caaadr . pG2b1b) (caaaar . pG2b1a) (cdddr . pG2b19) (cddar . pG2b18) (cdadr . pG2b17) (cdaar . pG2b16) (caddr . pG2b15) (cadar . pG2b14) (caadr . pG2b13) (caaar . pG2b12) (cddr . pG2b11) (cdar . pG2b10) (cadr . pG2b0f) (caar . pG2b0e) (cdr . pG2b0d) (car . pG2b0c) (boolean? . pG2b0b) (boolean=? . pG2b0a) (atan . pG2b09) (assertion-violation . pG2b08) (asin . pG2b07) (apply . pG2b06) (append . pG2b05) (angle . pG2b04) (acos . pG2b03) (abs . pG2b02) (/ . pG2b01) (* . pG2b00) (- . pG2aff) (+ . pG2afe) (>= . pG2afd) (> . pG2afc) (= . pG2afb) (<= . pG2afa) (< . pG2af9) (library . pG2af8) (&no-nans . pG2af7) (&no-infinities . pG2af6) (&i/o-encoding . pG2af5) (&i/o-decoding . pG2af4) (&i/o-port . pG2af3) (&i/o-file-does-not-exist . pG2af2) (&i/o-file-already-exists . pG2af1) (&i/o-file-is-read-only . pG2af0) (&i/o-file-protection . pG2aef) (&i/o-filename . pG2aee) (&i/o-invalid-position . pG2aed) (&i/o-write . pG2aec) (&i/o-read . pG2aeb) (&i/o . pG2aea) (&undefined . pG2ae9) (&syntax . pG2ae8) (&lexical . pG2ae7) (&implementation-restriction . pG2ae6) (&non-continuable . pG2ae5) (&who . pG2ae4) (&irritants . pG2ae3) (&assertion . pG2ae2) (&violation . pG2ae1) (&error . pG2ae0) (&serious . pG2adf) (&warning . pG2ade) (&message . pG2add) (&condition . pG2adc) (define-condition-type . pG2adb) (define-enumeration . pG2ada) (define-record-type . pG2ad9) (parent-rtd . pG2ad8) (nongenerative . pG2ad7) (opaque . pG2ad6) (sealed . pG2ad5) (protocol . pG2ad4) (parent . pG2ad3) (immutable . pG2ad2) (mutable . pG2ad1) (fields . pG2ad0) (error-handling-mode . pG2acf) (file-options . pG2ace) (buffer-mode . pG2acd) (eol-style . pG2acc) (guard . pG2acb) (unsyntax-splicing . pG2ac8) (unsyntax . pG2ac7) (unquote-splicing . pG2ac6) (unquote . pG2ac5) (_ . pG2ac4) (else . pG2ac3) (=> . pG2ac2) (... . pG2ac1) (assert . pG2ac0) (endianness . pG2abf) (time . pG2abd) (do . pG2abc) (cond . pG2abb) (let* . pG2aba) (let*-values . pG2ab9) (let-values . pG2ab8) (identifier-syntax . pG2ab7) (with-syntax . pG2ab6) (quasisyntax . pG2ab5) (quasiquote . pG2ab4) (syntax-rules . pG2ab3) (include . pG2ab2) (record-constructor-descriptor . pG2ab0) (record-type-descriptor . pG2aaf) (case . pG2aae) (unless . pG2aac) (when . pG2aab) (or . pG2aaa) (and . pG2aa9) (if . pG2aa8) (let . pG2aa7) (letrec* . pG2aa6) (letrec . pG2aa5) (case-lambda . pG2aa3) (lambda . pG2aa2) (syntax . pG2aa1) (syntax-case . pG2aa0) (quote . pG2a9f) (letrec-syntax . pG2a9d) (let-syntax . pG2a9c) (set! . pG2a9b) (import . pG2a9a) (begin . pG2a99) (define-syntax . pG2a97) (define . pG2a96)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e51 '(psyntax null-environment-5) '() '() '() '() '((make-promise . pG2c99) (unquote-splicing . pG2ac6) (unquote . pG2ac5) (_ . pG2ac4) (else . pG2ac3) (=> . pG2ac2) (... . pG2ac1) (delay . pG2abe) (do . pG2abc) (cond . pG2abb) (let* . pG2aba) (quasiquote . pG2ab4) (syntax-rules . pG2ab3) (case . pG2aae) (or . pG2aaa) (and . pG2aa9) (if . pG2aa8) (let . pG2aa7) (letrec . pG2aa5) (lambda . pG2aa2) (quote . pG2a9f) (letrec-syntax . pG2a9d) (let-syntax . pG2a9c) (set! . pG2a9b) (begin . pG2a99) (define-syntax . pG2a97) (define . pG2a96)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e52 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . pG2d4a) (string-ci>=? . pG2d49) (string-ci=? . pG2d48) (string-ci<? . pG2d47) (string-ci<=? . pG2d46) (char-whitespace? . pG2d45) (char-upper-case? . pG2d44) (char-numeric? . pG2d42) (char-lower-case? . pG2d41) (char-upcase . pG2d3f) (char-downcase . pG2d3c) (char-ci>? . pG2d3b) (char-ci>=? . pG2d3a) (char-ci=? . pG2d39) (char-ci<? . pG2d38) (char-ci<=? . pG2d37) (char-alphabetic? . pG2d36) (call-with-output-file . pG2d0a) (call-with-input-file . pG2d09) (write-char . pG2d08) (write . pG2d07) (with-output-to-file . pG2d06) (with-input-from-file . pG2d05) (read-char . pG2d04) (read . pG2d03) (peek-char . pG2d02) (open-output-file . pG2d01) (open-input-file . pG2d00) (newline . pG2cff) (display . pG2cfe) (close-output-port . pG2cfd) (close-input-port . pG2cfc) (eof-object . pG2cfa) (current-output-port . pG2cf8) (current-input-port . pG2cf7) (output-port? . pG2cf6) (input-port? . pG2cf5) (scheme-report-environment . pGe4d) (quotient . pG2c9f) (null-environment . pGe4b) (remainder . pG2c9e) (modulo . pG2c9d) (inexact->exact . pG2c9c) (force . pG2c9b) (exact->inexact . pG2c9a) (make-promise . pG2c99) (string-fill! . pG2c97) (string-set! . pG2c96) (set-cdr! . pG2c95) (set-car! . pG2c94) (memv . pG2c8e) (memq . pG2c8d) (member . pG2c8b) (assv . pG2c83) (assq . pG2c82) (assoc . pG2c80) (eval . pGe51) (zero? . pG2b9a) (vector? . pG2b99) (vector-set! . pG2b98) (vector-ref . pG2b97) (vector-length . pG2b95) (vector-fill! . pG2b93) (vector->list . pG2b92) (vector . pG2b91) (values . pG2b90) (truncate . pG2b8f) (tan . pG2b8e) (symbol? . pG2b8d) (symbol->string . pG2b8b) (substring . pG2b8a) (string? . pG2b89) (string>? . pG2b88) (string>=? . pG2b87) (string=? . pG2b86) (string<? . pG2b85) (string<=? . pG2b84) (string-ref . pG2b83) (string-length . pG2b82) (string-copy . pG2b80) (string-append . pG2b7f) (string->symbol . pG2b7e) (string->number . pG2b7d) (string->list . pG2b7c) (string . pG2b7b) (sqrt . pG2b7a) (sin . pG2b79) (round . pG2b78) (reverse . pG2b77) (real? . pG2b76) (real-part . pG2b74) (rationalize . pG2b73) (rational? . pG2b72) (procedure? . pG2b70) (positive? . pG2b6f) (pair? . pG2b6e) (odd? . pG2b6d) (numerator . pG2b6c) (number? . pG2b6b) (number->string . pG2b6a) (not . pG2b68) (negative? . pG2b67) (min . pG2b65) (max . pG2b64) (map . pG2b63) (make-vector . pG2b62) (make-string . pG2b61) (make-rectangular . pG2b60) (make-polar . pG2b5f) (magnitude . pG2b5e) (log . pG2b5d) (list? . pG2b5c) (list-tail . pG2b5b) (list-ref . pG2b5a) (list->vector . pG2b59) (list->string . pG2b58) (list . pG2b57) (length . pG2b56) (lcm . pG2b55) (integer? . pG2b54) (integer->char . pG2b52) (inexact? . pG2b50) (imag-part . pG2b4e) (gcd . pG2b4d) (for-each . pG2b4c) (floor . pG2b4b) (expt . pG2b49) (exp . pG2b48) (exact? . pG2b47) (even? . pG2b44) (eqv? . pG2b42) (equal? . pG2b41) (eq? . pG2b40) (dynamic-wind . pG2b3f) (denominator . pG2b38) (cos . pG2b37) (cons . pG2b36) (complex? . pG2b35) (char? . pG2b34) (char>? . pG2b33) (char>=? . pG2b32) (char=? . pG2b31) (char<? . pG2b30) (char<=? . pG2b2f) (char->integer . pG2b2e) (ceiling . pG2b2d) (call-with-values . pG2b2c) (call-with-current-continuation . pG2b2a) (cddddr . pG2b29) (cdddar . pG2b28) (cddadr . pG2b27) (cddaar . pG2b26) (cdaddr . pG2b25) (cdadar . pG2b24) (cdaadr . pG2b23) (cdaaar . pG2b22) (cadddr . pG2b21) (caddar . pG2b20) (cadadr . pG2b1f) (cadaar . pG2b1e) (caaddr . pG2b1d) (caadar . pG2b1c) (caaadr . pG2b1b) (caaaar . pG2b1a) (cdddr . pG2b19) (cddar . pG2b18) (cdadr . pG2b17) (cdaar . pG2b16) (caddr . pG2b15) (cadar . pG2b14) (caadr . pG2b13) (caaar . pG2b12) (cddr . pG2b11) (cdar . pG2b10) (cadr . pG2b0f) (caar . pG2b0e) (cdr . pG2b0d) (car . pG2b0c) (boolean? . pG2b0b) (atan . pG2b09) (asin . pG2b07) (apply . pG2b06) (append . pG2b05) (angle . pG2b04) (acos . pG2b03) (abs . pG2b02) (/ . pG2b01) (* . pG2b00) (- . pG2aff) (+ . pG2afe) (>= . pG2afd) (> . pG2afc) (= . pG2afb) (<= . pG2afa) (< . pG2af9) (unquote-splicing . pG2ac6) (unquote . pG2ac5) (else . pG2ac3) (=> . pG2ac2) (... . pG2ac1) (delay . pG2abe) (do . pG2abc) (cond . pG2abb) (let* . pG2aba) (quasiquote . pG2ab4) (syntax-rules . pG2ab3) (case . pG2aae) (or . pG2aaa) (and . pG2aa9) (if . pG2aa8) (let . pG2aa7) (letrec . pG2aa5) (lambda . pG2aa2) (quote . pG2a9f) (letrec-syntax . pG2a9d) (let-syntax . pG2a9c) (set! . pG2a9b) (begin . pG2a99) (define-syntax . pG2a97) (define . pG2a96)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e53 '(psyntax modules) '() '() '() '() '((module . pG2a98)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e54 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e55 '(rnrs) '(6) '() '() '() '((regexp? . pG2e10) (string-upcase . pG2d52) (string-titlecase . pG2d51) (string-normalize-nfkd . pG2d50) (string-normalize-nfkc . pG2d4f) (string-normalize-nfd . pG2d4e) (string-normalize-nfc . pG2d4d) (string-foldcase . pG2d4c) (string-downcase . pG2d4b) (string-ci>? . pG2d4a) (string-ci>=? . pG2d49) (string-ci=? . pG2d48) (string-ci<? . pG2d47) (string-ci<=? . pG2d46) (char-whitespace? . pG2d45) (char-upper-case? . pG2d44) (char-title-case? . pG2d43) (char-numeric? . pG2d42) (char-lower-case? . pG2d41) (char-general-category . pG2d40) (char-upcase . pG2d3f) (char-titlecase . pG2d3e) (char-foldcase . pG2d3d) (char-downcase . pG2d3c) (char-ci>? . pG2d3b) (char-ci>=? . pG2d3a) (char-ci=? . pG2d39) (char-ci<? . pG2d38) (char-ci<=? . pG2d37) (char-alphabetic? . pG2d36) (make-variable-transformer . pGbbc) (identifier? . pGe73) (generate-temporaries . pGe5f) (free-identifier=? . pGe61) (syntax->datum . pGe77) (datum->syntax . pGe75) (bound-identifier=? . pGe63) (record-type-descriptor? . pG2d35) (record-predicate . pG2d34) (record-mutator . pG2d33) (record-constructor . pG2d32) (record-accessor . pG2d31) (make-record-type-descriptor . pG2d30) (make-record-constructor-descriptor . pG2d2f) (record? . pG2d2e) (record-type-uid . pG2d2d) (record-type-sealed? . pG2d2c) (record-type-parent . pG2d2b) (record-type-opaque? . pG2d2a) (record-type-name . pG2d29) (record-type-generative? . pG2d28) (record-type-field-names . pG2d27) (record-rtd . pG2d26) (record-field-mutable? . pG2d25) (delete-file . pG2d24) (file-exists? . pG2d23) (vector-sort! . pG2d22) (vector-sort . pG2d21) (list-sort . pG2d20) (symbol-hash . pG2d1f) (string-ci-hash . pG2d1e) (string-hash . pG2d1d) (equal-hash . pG2d1c) (hashtable-equivalence-function . pG2d1b) (make-hashtable . pG2d1a) (hashtable-hash-function . pG2d19) (make-eqv-hashtable . pG2d18) (make-eq-hashtable . pG2d17) (hashtable? . pG2d16) (hashtable-update! . pG2d15) (hashtable-size . pG2d14) (hashtable-set! . pG2d13) (hashtable-ref . pG2d12) (hashtable-mutable? . pG2d11) (hashtable-keys . pG2d10) (hashtable-entries . pG2d0f) (hashtable-delete! . pG2d0e) (hashtable-copy . pG2d0d) (hashtable-contains? . pG2d0c) (hashtable-clear! . pG2d0b) (call-with-output-file . pG2d0a) (call-with-input-file . pG2d09) (write-char . pG2d08) (write . pG2d07) (with-output-to-file . pG2d06) (with-input-from-file . pG2d05) (read-char . pG2d04) (read . pG2d03) (peek-char . pG2d02) (open-output-file . pG2d01) (open-input-file . pG2d00) (newline . pG2cff) (display . pG2cfe) (close-output-port . pG2cfd) (close-input-port . pG2cfc) (eof-object? . pG2cfb) (eof-object . pG2cfa) (current-error-port . pG2cf9) (current-output-port . pG2cf8) (current-input-port . pG2cf7) (output-port? . pG2cf6) (input-port? . pG2cf5) (utf-8-codec . pG2cf4) (utf-16-codec . pG2cf3) (transcoder-error-handling-mode . pG2cf2) (transcoder-eol-style . pG2cf1) (transcoder-codec . pG2cf0) (transcoded-port . pG2cef) (textual-port? . pG2cee) (string->bytevector . pG2ced) (standard-output-port . pG2cec) (standard-input-port . pG2ceb) (standard-error-port . pG2cea) (set-port-position! . pG2ce9) (put-u8 . pG2ce8) (put-string . pG2ce7) (put-datum . pG2ce6) (put-char . pG2ce5) (put-bytevector . pG2ce4) (port? . pG2ce3) (port-transcoder . pG2ce2) (port-position . pG2ce1) (port-has-set-port-position!? . pG2ce0) (port-has-port-position? . pG2cdf) (port-eof? . pG2cde) (output-port-buffer-mode . pG2cdd) (open-string-output-port . pG2cdc) (open-string-input-port . pG2cdb) (open-file-output-port . pG2cda) (open-file-input/output-port . pG2cd9) (open-file-input-port . pG2cd8) (open-bytevector-output-port . pG2cd7) (open-bytevector-input-port . pG2cd6) (native-transcoder . pG2cd5) (native-eol-style . pG2cd4) (make-transcoder . pG2cd3) (latin-1-codec . pG2cd2) (make-i/o-write-error . pG2cd1) (make-i/o-read-error . pG2cd0) (make-i/o-port-error . pG2ccf) (make-i/o-invalid-position-error . pG2cce) (make-i/o-filename-error . pG2ccd) (make-i/o-file-protection-error . pG2ccc) (make-i/o-file-is-read-only-error . pG2ccb) (make-i/o-file-does-not-exist-error . pG2cca) (make-i/o-file-already-exists-error . pG2cc9) (make-i/o-error . pG2cc8) (make-i/o-encoding-error . pG2cc7) (make-i/o-decoding-error . pG2cc6) (make-custom-textual-output-port . pG2cc5) (make-custom-textual-input/output-port . pG2cc4) (make-custom-textual-input-port . pG2cc3) (make-custom-binary-output-port . pG2cc2) (make-custom-binary-input/output-port . pG2cc1) (make-custom-binary-input-port . pG2cc0) (make-bytevector . pG2cbf) (lookahead-u8 . pG2cbe) (lookahead-char . pG2cbd) (i/o-write-error? . pG2cbc) (i/o-read-error? . pG2cbb) (i/o-port-error? . pG2cba) (i/o-invalid-position-error? . pG2cb9) (i/o-filename-error? . pG2cb8) (i/o-file-protection-error? . pG2cb7) (i/o-file-is-read-only-error? . pG2cb6) (i/o-file-does-not-exist-error? . pG2cb5) (i/o-file-already-exists-error? . pG2cb4) (i/o-error? . pG2cb3) (i/o-error-position . pG2cb2) (i/o-error-port . pG2cb1) (i/o-error-filename . pG2cb0) (i/o-encoding-error? . pG2caf) (i/o-encoding-error-char . pG2cae) (i/o-decoding-error? . pG2cad) (get-u8 . pG2cac) (get-string-n! . pG2cab) (get-string-n . pG2caa) (get-string-all . pG2ca9) (get-line . pG2ca8) (get-datum . pG2ca7) (get-char . pG2ca6) (get-bytevector-some . pG2ca5) (get-bytevector-n! . pG2ca4) (get-bytevector-n . pG2ca3) (get-bytevector-all . pG2ca2) (flush-output-port . pG2ca1) (close-port . pG2ca0) (exit . pG2c98) (command-line . pG292a) (remove . pG2c93) (remv . pG2c92) (remp . pG2c91) (remq . pG2c90) (partition . pG2c8f) (memv . pG2c8e) (memq . pG2c8d) (memp . pG2c8c) (member . pG2c8b) (exists . pG2c8a) (for-all . pG2c89) (fold-right . pG2c88) (fold-left . pG2c87) (find . pG2c86) (filter . pG2c85) (cons* . pG2c84) (assv . pG2c83) (assq . pG2c82) (assp . pG2c81) (assoc . pG2c80) (call-with-string-output-port . pG2c7f) (call-with-port . pG2c7e) (call-with-bytevector-output-port . pG2c7d) (bytevector->string . pG2c7c) (buffer-mode? . pG2c7b) (binary-port? . pG2c7a) (with-exception-handler . pG2c79) (raise-continuable . pG2c78) (raise . pG2c77) (make-enumeration . pG2c76) (enum-set=? . pG2c75) (enum-set-universe . pG2c74) (enum-set-union . pG2c73) (enum-set-subset? . pG2c72) (enum-set-projection . pG2c71) (enum-set-member? . pG2c70) (enum-set-intersection . pG2c6f) (enum-set-indexer . pG2c6e) (enum-set-difference . pG2c6d) (enum-set-constructor . pG2c6c) (enum-set-complement . pG2c6b) (enum-set->list . pG2c6a) (who-condition? . pG2c69) (warning? . pG2c68) (violation? . pG2c67) (undefined-violation? . pG2c66) (syntax-violation? . pG2c65) (syntax-violation-subform . pG2c64) (syntax-violation-form . pG2c63) (syntax-violation . pGe71) (simple-conditions . pG2c62) (serious-condition? . pG2c61) (non-continuable-violation? . pG2c60) (message-condition? . pG2c5f) (make-who-condition . pG2c5e) (make-warning . pG2c5d) (make-violation . pG2c5c) (make-undefined-violation . pG2c5b) (make-syntax-violation . pG2c5a) (make-serious-condition . pG2c59) (make-non-continuable-violation . pG2c58) (make-message-condition . pG2c57) (make-lexical-violation . pG2c56) (make-irritants-condition . pG2c55) (make-implementation-restriction-violation . pG2c54) (make-error . pG2c53) (make-assertion-violation . pG2c52) (lexical-violation? . pG2c51) (irritants-condition? . pG2c50) (implementation-restriction-violation? . pG2c4f) (error? . pG2c4e) (condition-who . pG2c4d) (condition-predicate . pG2c4c) (condition-message . pG2c4b) (condition-irritants . pG2c4a) (condition-accessor . pG2c49) (condition . pG2c48) (assertion-violation? . pG2c47) (condition? . pG2c46) (utf32->string . pG2c45) (utf16->string . pG2c44) (utf8->string . pG2c43) (uint-list->bytevector . pG2c42) (u8-list->bytevector . pG2c41) (string->utf8 . pG2c40) (string->utf32 . pG2c3f) (string->utf16 . pG2c3e) (sint-list->bytevector . pG2c3d) (native-endianness . pG2c3c) (bytevector? . pG2c3b) (bytevector=? . pG2c3a) (bytevector-uint-set! . pG2c39) (bytevector-uint-ref . pG2c38) (bytevector-u8-set! . pG2c37) (bytevector-u8-ref . pG2c36) (bytevector-u64-set! . pG2c35) (bytevector-u64-ref . pG2c34) (bytevector-u64-native-set! . pG2c33) (bytevector-u64-native-ref . pG2c32) (bytevector-u32-set! . pG2c31) (bytevector-u32-ref . pG2c30) (bytevector-u32-native-set! . pG2c2f) (bytevector-u32-native-ref . pG2c2e) (bytevector-u16-set! . pG2c2d) (bytevector-u16-ref . pG2c2c) (bytevector-u16-native-set! . pG2c2b) (bytevector-u16-native-ref . pG2c2a) (bytevector-sint-set! . pG2c29) (bytevector-sint-ref . pG2c28) (bytevector-s8-set! . pG2c27) (bytevector-s8-ref . pG2c26) (bytevector-s64-set! . pG2c25) (bytevector-s64-ref . pG2c24) (bytevector-s64-native-set! . pG2c23) (bytevector-s64-native-ref . pG2c22) (bytevector-s32-set! . pG2c21) (bytevector-s32-ref . pG2c20) (bytevector-s32-native-set! . pG2c1f) (bytevector-s32-native-ref . pG2c1e) (bytevector-s16-set! . pG2c1d) (bytevector-s16-ref . pG2c1c) (bytevector-s16-native-set! . pG2c1b) (bytevector-s16-native-ref . pG2c1a) (bytevector-length . pG2c19) (bytevector-ieee-single-ref . pG2c18) (bytevector-ieee-single-set! . pG2c17) (bytevector-ieee-single-native-set! . pG2c16) (bytevector-ieee-single-native-ref . pG2c15) (bytevector-ieee-double-set! . pG2c14) (bytevector-ieee-double-ref . pG2c13) (bytevector-ieee-double-native-set! . pG2c12) (bytevector-ieee-double-native-ref . pG2c11) (bytevector-fill! . pG2c10) (bytevector-copy! . pG2c0f) (bytevector-copy . pG2c0e) (bytevector->uint-list . pG2c0d) (bytevector->u8-list . pG2c0c) (bytevector->sint-list . pG2c0b) (no-nans-violation? . pG2c0a) (no-infinities-violation? . pG2c09) (make-no-nans-violation . pG2c08) (make-no-infinities-violation . pG2c07) (real->flonum . pG2c06) (flzero? . pG2c05) (fltruncate . pG2c04) (fltan . pG2c03) (flsqrt . pG2c02) (flsin . pG2c01) (flround . pG2c00) (flpositive? . pG2bff) (flonum? . pG2bfe) (flodd? . pG2bfd) (flnumerator . pG2bfc) (flnegative? . pG2bfb) (flnan? . pG2bfa) (flmod0 . pG2bf9) (flmod . pG2bf8) (flmin . pG2bf7) (flmax . pG2bf6) (fllog . pG2bf5) (flinteger? . pG2bf4) (flinfinite? . pG2bf3) (flfloor . pG2bf2) (flfinite? . pG2bf1) (flexpt . pG2bf0) (flexp . pG2bef) (fleven? . pG2bee) (fldiv0-and-mod0 . pG2bed) (fldiv0 . pG2bec) (fldiv-and-mod . pG2beb) (fldiv . pG2bea) (fldenominator . pG2be9) (flcos . pG2be8) (flceiling . pG2be7) (flatan . pG2be6) (flasin . pG2be5) (flacos . pG2be4) (flabs . pG2be3) (fl>? . pG2be2) (fl>=? . pG2be1) (fl=? . pG2be0) (fl<? . pG2bdf) (fl<=? . pG2bde) (fl/ . pG2bdd) (fl- . pG2bdc) (fl+ . pG2bdb) (fl* . pG2bda) (fixnum->flonum . pG2bd9) (fxzero? . pG2bd8) (fxxor . pG2bd7) (fxrotate-bit-field . pG2bd6) (fxreverse-bit-field . pG2bd5) (fxpositive? . pG2bd4) (fxodd? . pG2bd3) (fxnot . pG2bd2) (fxnegative? . pG2bd1) (fxmod0 . pG2bd0) (fxmod . pG2bcf) (fxmin . pG2bce) (fxmax . pG2bcd) (fxlength . pG2bcc) (fxior . pG2bcb) (fxif . pG2bca) (fxfirst-bit-set . pG2bc9) (fxeven? . pG2bc8) (fxdiv0-and-mod0 . pG2bc7) (fxdiv0 . pG2bc6) (fxdiv-and-mod . pG2bc5) (fxdiv . pG2bc4) (fxcopy-bit-field . pG2bc3) (fxcopy-bit . pG2bc2) (fxbit-set? . pG2bc1) (fxbit-field . pG2bc0) (fxbit-count . pG2bbf) (fxarithmetic-shift-right . pG2bbe) (fxarithmetic-shift-left . pG2bbd) (fxarithmetic-shift . pG2bbc) (fxand . pG2bbb) (fx>? . pG2bba) (fx>=? . pG2bb9) (fx=? . pG2bb8) (fx<? . pG2bb7) (fx<=? . pG2bb6) (fx-/carry . pG2bb5) (fx- . pG2bb4) (fx+/carry . pG2bb3) (fx+ . pG2bb2) (fx*/carry . pG2bb1) (fx* . pG2bb0) (greatest-fixnum . pG2baf) (least-fixnum . pG2bae) (fixnum-width . pG2bad) (fixnum? . pG2bac) (bitwise-rotate-bit-field . pG2bab) (bitwise-reverse-bit-field . pG2baa) (bitwise-length . pG2ba9) (bitwise-if . pG2ba8) (bitwise-first-bit-set . pG2ba7) (bitwise-copy-bit-field . pG2ba6) (bitwise-copy-bit . pG2ba5) (bitwise-bit-set? . pG2ba4) (bitwise-bit-field . pG2ba3) (bitwise-bit-count . pG2ba2) (bitwise-xor . pG2ba1) (bitwise-ior . pG2ba0) (bitwise-and . pG2b9f) (bitwise-not . pG2b9e) (bitwise-arithmetic-shift-right . pG2b9d) (bitwise-arithmetic-shift-left . pG2b9c) (bitwise-arithmetic-shift . pG2b9b) (zero? . pG2b9a) (vector? . pG2b99) (vector-set! . pG2b98) (vector-ref . pG2b97) (vector-map . pG2b96) (vector-length . pG2b95) (vector-for-each . pG2b94) (vector-fill! . pG2b93) (vector->list . pG2b92) (vector . pG2b91) (values . pG2b90) (truncate . pG2b8f) (tan . pG2b8e) (symbol? . pG2b8d) (symbol=? . pG2b8c) (symbol->string . pG2b8b) (substring . pG2b8a) (string? . pG2b89) (string>? . pG2b88) (string>=? . pG2b87) (string=? . pG2b86) (string<? . pG2b85) (string<=? . pG2b84) (string-ref . pG2b83) (string-length . pG2b82) (string-for-each . pG2b81) (string-copy . pG2b80) (string-append . pG2b7f) (string->symbol . pG2b7e) (string->number . pG2b7d) (string->list . pG2b7c) (string . pG2b7b) (sqrt . pG2b7a) (sin . pG2b79) (round . pG2b78) (reverse . pG2b77) (real? . pG2b76) (real-valued? . pG2b75) (real-part . pG2b74) (rationalize . pG2b73) (rational? . pG2b72) (rational-valued? . pG2b71) (procedure? . pG2b70) (positive? . pG2b6f) (pair? . pG2b6e) (odd? . pG2b6d) (numerator . pG2b6c) (number? . pG2b6b) (number->string . pG2b6a) (null? . pG2b69) (not . pG2b68) (negative? . pG2b67) (nan? . pG2b66) (min . pG2b65) (max . pG2b64) (map . pG2b63) (make-vector . pG2b62) (make-string . pG2b61) (make-rectangular . pG2b60) (make-polar . pG2b5f) (magnitude . pG2b5e) (log . pG2b5d) (list? . pG2b5c) (list-tail . pG2b5b) (list-ref . pG2b5a) (list->vector . pG2b59) (list->string . pG2b58) (list . pG2b57) (length . pG2b56) (lcm . pG2b55) (integer? . pG2b54) (integer-valued? . pG2b53) (integer->char . pG2b52) (infinite? . pG2b51) (inexact? . pG2b50) (inexact . pG2b4f) (imag-part . pG2b4e) (gcd . pG2b4d) (for-each . pG2b4c) (floor . pG2b4b) (finite? . pG2b4a) (expt . pG2b49) (exp . pG2b48) (exact? . pG2b47) (exact-integer-sqrt . pG2b46) (exact . pG2b45) (even? . pG2b44) (error . pG2b43) (eqv? . pG2b42) (equal? . pG2b41) (eq? . pG2b40) (dynamic-wind . pG2b3f) (div0-and-mod0 . pG2b3e) (mod0 . pG2b3d) (div0 . pG2b3c) (div-and-mod . pG2b3b) (mod . pG2b3a) (div . pG2b39) (denominator . pG2b38) (cos . pG2b37) (cons . pG2b36) (complex? . pG2b35) (char? . pG2b34) (char>? . pG2b33) (char>=? . pG2b32) (char=? . pG2b31) (char<? . pG2b30) (char<=? . pG2b2f) (char->integer . pG2b2e) (ceiling . pG2b2d) (call-with-values . pG2b2c) (call/cc . pG2b2b) (call-with-current-continuation . pG2b2a) (cddddr . pG2b29) (cdddar . pG2b28) (cddadr . pG2b27) (cddaar . pG2b26) (cdaddr . pG2b25) (cdadar . pG2b24) (cdaadr . pG2b23) (cdaaar . pG2b22) (cadddr . pG2b21) (caddar . pG2b20) (cadadr . pG2b1f) (cadaar . pG2b1e) (caaddr . pG2b1d) (caadar . pG2b1c) (caaadr . pG2b1b) (caaaar . pG2b1a) (cdddr . pG2b19) (cddar . pG2b18) (cdadr . pG2b17) (cdaar . pG2b16) (caddr . pG2b15) (cadar . pG2b14) (caadr . pG2b13) (caaar . pG2b12) (cddr . pG2b11) (cdar . pG2b10) (cadr . pG2b0f) (caar . pG2b0e) (cdr . pG2b0d) (car . pG2b0c) (boolean? . pG2b0b) (boolean=? . pG2b0a) (atan . pG2b09) (assertion-violation . pG2b08) (asin . pG2b07) (apply . pG2b06) (append . pG2b05) (angle . pG2b04) (acos . pG2b03) (abs . pG2b02) (/ . pG2b01) (* . pG2b00) (- . pG2aff) (+ . pG2afe) (>= . pG2afd) (> . pG2afc) (= . pG2afb) (<= . pG2afa) (< . pG2af9) (&no-nans . pG2af7) (&no-infinities . pG2af6) (&i/o-encoding . pG2af5) (&i/o-decoding . pG2af4) (&i/o-port . pG2af3) (&i/o-file-does-not-exist . pG2af2) (&i/o-file-already-exists . pG2af1) (&i/o-file-is-read-only . pG2af0) (&i/o-file-protection . pG2aef) (&i/o-filename . pG2aee) (&i/o-invalid-position . pG2aed) (&i/o-write . pG2aec) (&i/o-read . pG2aeb) (&i/o . pG2aea) (&undefined . pG2ae9) (&syntax . pG2ae8) (&lexical . pG2ae7) (&implementation-restriction . pG2ae6) (&non-continuable . pG2ae5) (&who . pG2ae4) (&irritants . pG2ae3) (&assertion . pG2ae2) (&violation . pG2ae1) (&error . pG2ae0) (&serious . pG2adf) (&warning . pG2ade) (&message . pG2add) (&condition . pG2adc) (define-condition-type . pG2adb) (define-enumeration . pG2ada) (define-record-type . pG2ad9) (parent-rtd . pG2ad8) (nongenerative . pG2ad7) (opaque . pG2ad6) (sealed . pG2ad5) (protocol . pG2ad4) (parent . pG2ad3) (immutable . pG2ad2) (mutable . pG2ad1) (fields . pG2ad0) (error-handling-mode . pG2acf) (file-options . pG2ace) (buffer-mode . pG2acd) (eol-style . pG2acc) (guard . pG2acb) (unsyntax-splicing . pG2ac8) (unsyntax . pG2ac7) (unquote-splicing . pG2ac6) (unquote . pG2ac5) (_ . pG2ac4) (else . pG2ac3) (=> . pG2ac2) (... . pG2ac1) (assert . pG2ac0) (endianness . pG2abf) (do . pG2abc) (cond . pG2abb) (let* . pG2aba) (let*-values . pG2ab9) (let-values . pG2ab8) (identifier-syntax . pG2ab7) (with-syntax . pG2ab6) (quasisyntax . pG2ab5) (quasiquote . pG2ab4) (syntax-rules . pG2ab3) (record-constructor-descriptor . pG2ab0) (record-type-descriptor . pG2aaf) (case . pG2aae) (unless . pG2aac) (when . pG2aab) (or . pG2aaa) (and . pG2aa9) (if . pG2aa8) (let . pG2aa7) (letrec* . pG2aa6) (letrec . pG2aa5) (case-lambda . pG2aa3) (lambda . pG2aa2) (syntax . pG2aa1) (syntax-case . pG2aa0) (quote . pG2a9f) (letrec-syntax . pG2a9d) (let-syntax . pG2a9c) (set! . pG2a9b) (begin . pG2a99) (define-syntax . pG2a97) (define . pG2a96)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e56 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . pGe4d) (quotient . pG2c9f) (null-environment . pGe4b) (remainder . pG2c9e) (modulo . pG2c9d) (inexact->exact . pG2c9c) (force . pG2c9b) (exact->inexact . pG2c9a) (make-promise . pG2c99) (delay . pG2abe)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e57 '(rnrs control) '(6) '() '() '() '((do . pG2abc) (unless . pG2aac) (when . pG2aab) (case-lambda . pG2aa3)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e58 '(rnrs eval) '(6) '() '() '() '((eval . pGe51) (environment . pGe49)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e59 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . pG2c95) (set-car! . pG2c94)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e5a '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . pG2c97) (string-set! . pG2c96)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e5b '(rnrs programs) '(6) '() '() '() '((exit . pG2c98) (command-line . pG292a)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e5c '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . pGbbc) (identifier? . pGe73) (generate-temporaries . pGe5f) (free-identifier=? . pGe61) (syntax->datum . pGe77) (datum->syntax . pGe75) (bound-identifier=? . pGe63) (syntax-violation . pGe71) (unsyntax-splicing . pG2ac8) (unsyntax . pG2ac7) (_ . pG2ac4) (... . pG2ac1) (with-syntax . pG2ab6) (quasisyntax . pG2ab5) (syntax . pG2aa1) (syntax-case . pG2aa0)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e5d '(rnrs files) '(6) '() '() '() '((delete-file . pG2d24) (file-exists? . pG2d23) (make-i/o-write-error . pG2cd1) (make-i/o-read-error . pG2cd0) (make-i/o-port-error . pG2ccf) (make-i/o-invalid-position-error . pG2cce) (make-i/o-filename-error . pG2ccd) (make-i/o-file-protection-error . pG2ccc) (make-i/o-file-is-read-only-error . pG2ccb) (make-i/o-file-does-not-exist-error . pG2cca) (make-i/o-file-already-exists-error . pG2cc9) (make-i/o-error . pG2cc8) (i/o-write-error? . pG2cbc) (i/o-read-error? . pG2cbb) (i/o-port-error? . pG2cba) (i/o-invalid-position-error? . pG2cb9) (i/o-filename-error? . pG2cb8) (i/o-file-protection-error? . pG2cb7) (i/o-file-is-read-only-error? . pG2cb6) (i/o-file-does-not-exist-error? . pG2cb5) (i/o-file-already-exists-error? . pG2cb4) (i/o-error? . pG2cb3) (i/o-error-position . pG2cb2) (i/o-error-port . pG2cb1) (i/o-error-filename . pG2cb0) (&i/o-port . pG2af3) (&i/o-file-does-not-exist . pG2af2) (&i/o-file-already-exists . pG2af1) (&i/o-file-is-read-only . pG2af0) (&i/o-file-protection . pG2aef) (&i/o-filename . pG2aee) (&i/o-invalid-position . pG2aed) (&i/o-write . pG2aec) (&i/o-read . pG2aeb) (&i/o . pG2aea)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e5e '(rnrs sorting) '(6) '() '() '() '((vector-sort! . pG2d22) (vector-sort . pG2d21) (list-sort . pG2d20)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e5f '(rnrs base) '(6) '() '() '() '((zero? . pG2b9a) (vector? . pG2b99) (vector-set! . pG2b98) (vector-ref . pG2b97) (vector-map . pG2b96) (vector-length . pG2b95) (vector-for-each . pG2b94) (vector-fill! . pG2b93) (vector->list . pG2b92) (vector . pG2b91) (values . pG2b90) (truncate . pG2b8f) (tan . pG2b8e) (symbol? . pG2b8d) (symbol=? . pG2b8c) (symbol->string . pG2b8b) (substring . pG2b8a) (string? . pG2b89) (string>? . pG2b88) (string>=? . pG2b87) (string=? . pG2b86) (string<? . pG2b85) (string<=? . pG2b84) (string-ref . pG2b83) (string-length . pG2b82) (string-for-each . pG2b81) (string-copy . pG2b80) (string-append . pG2b7f) (string->symbol . pG2b7e) (string->number . pG2b7d) (string->list . pG2b7c) (string . pG2b7b) (sqrt . pG2b7a) (sin . pG2b79) (round . pG2b78) (reverse . pG2b77) (real? . pG2b76) (real-valued? . pG2b75) (real-part . pG2b74) (rationalize . pG2b73) (rational? . pG2b72) (rational-valued? . pG2b71) (procedure? . pG2b70) (positive? . pG2b6f) (pair? . pG2b6e) (odd? . pG2b6d) (numerator . pG2b6c) (number? . pG2b6b) (number->string . pG2b6a) (null? . pG2b69) (not . pG2b68) (negative? . pG2b67) (nan? . pG2b66) (min . pG2b65) (max . pG2b64) (map . pG2b63) (make-vector . pG2b62) (make-string . pG2b61) (make-rectangular . pG2b60) (make-polar . pG2b5f) (magnitude . pG2b5e) (log . pG2b5d) (list? . pG2b5c) (list-tail . pG2b5b) (list-ref . pG2b5a) (list->vector . pG2b59) (list->string . pG2b58) (list . pG2b57) (length . pG2b56) (lcm . pG2b55) (integer? . pG2b54) (integer-valued? . pG2b53) (integer->char . pG2b52) (infinite? . pG2b51) (inexact? . pG2b50) (inexact . pG2b4f) (imag-part . pG2b4e) (gcd . pG2b4d) (for-each . pG2b4c) (floor . pG2b4b) (finite? . pG2b4a) (expt . pG2b49) (exp . pG2b48) (exact? . pG2b47) (exact-integer-sqrt . pG2b46) (exact . pG2b45) (even? . pG2b44) (error . pG2b43) (eqv? . pG2b42) (equal? . pG2b41) (eq? . pG2b40) (dynamic-wind . pG2b3f) (div0-and-mod0 . pG2b3e) (mod0 . pG2b3d) (div0 . pG2b3c) (div-and-mod . pG2b3b) (mod . pG2b3a) (div . pG2b39) (denominator . pG2b38) (cos . pG2b37) (cons . pG2b36) (complex? . pG2b35) (char? . pG2b34) (char>? . pG2b33) (char>=? . pG2b32) (char=? . pG2b31) (char<? . pG2b30) (char<=? . pG2b2f) (char->integer . pG2b2e) (ceiling . pG2b2d) (call-with-values . pG2b2c) (call/cc . pG2b2b) (call-with-current-continuation . pG2b2a) (cddddr . pG2b29) (cdddar . pG2b28) (cddadr . pG2b27) (cddaar . pG2b26) (cdaddr . pG2b25) (cdadar . pG2b24) (cdaadr . pG2b23) (cdaaar . pG2b22) (cadddr . pG2b21) (caddar . pG2b20) (cadadr . pG2b1f) (cadaar . pG2b1e) (caaddr . pG2b1d) (caadar . pG2b1c) (caaadr . pG2b1b) (caaaar . pG2b1a) (cdddr . pG2b19) (cddar . pG2b18) (cdadr . pG2b17) (cdaar . pG2b16) (caddr . pG2b15) (cadar . pG2b14) (caadr . pG2b13) (caaar . pG2b12) (cddr . pG2b11) (cdar . pG2b10) (cadr . pG2b0f) (caar . pG2b0e) (cdr . pG2b0d) (car . pG2b0c) (boolean? . pG2b0b) (boolean=? . pG2b0a) (atan . pG2b09) (assertion-violation . pG2b08) (asin . pG2b07) (apply . pG2b06) (append . pG2b05) (angle . pG2b04) (acos . pG2b03) (abs . pG2b02) (/ . pG2b01) (* . pG2b00) (- . pG2aff) (+ . pG2afe) (>= . pG2afd) (> . pG2afc) (= . pG2afb) (<= . pG2afa) (< . pG2af9) (unquote-splicing . pG2ac6) (unquote . pG2ac5) (_ . pG2ac4) (else . pG2ac3) (=> . pG2ac2) (... . pG2ac1) (assert . pG2ac0) (cond . pG2abb) (let* . pG2aba) (let*-values . pG2ab9) (let-values . pG2ab8) (identifier-syntax . pG2ab7) (quasiquote . pG2ab4) (syntax-rules . pG2ab3) (case . pG2aae) (or . pG2aaa) (and . pG2aa9) (if . pG2aa8) (let . pG2aa7) (letrec* . pG2aa6) (letrec . pG2aa5) (lambda . pG2aa2) (quote . pG2a9f) (letrec-syntax . pG2a9d) (let-syntax . pG2a9c) (set! . pG2a9b) (begin . pG2a99) (define-syntax . pG2a97) (define . pG2a96)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e60 '(rnrs lists) '(6) '() '() '() '((remove . pG2c93) (remv . pG2c92) (remp . pG2c91) (remq . pG2c90) (partition . pG2c8f) (memv . pG2c8e) (memq . pG2c8d) (memp . pG2c8c) (member . pG2c8b) (exists . pG2c8a) (for-all . pG2c89) (fold-right . pG2c88) (fold-left . pG2c87) (find . pG2c86) (filter . pG2c85) (cons* . pG2c84) (assv . pG2c83) (assq . pG2c82) (assp . pG2c81) (assoc . pG2c80)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e61 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . pG2d0a) (call-with-input-file . pG2d09) (write-char . pG2d08) (write . pG2d07) (with-output-to-file . pG2d06) (with-input-from-file . pG2d05) (read-char . pG2d04) (read . pG2d03) (peek-char . pG2d02) (open-output-file . pG2d01) (open-input-file . pG2d00) (newline . pG2cff) (display . pG2cfe) (close-output-port . pG2cfd) (close-input-port . pG2cfc) (eof-object? . pG2cfb) (eof-object . pG2cfa) (current-error-port . pG2cf9) (current-output-port . pG2cf8) (current-input-port . pG2cf7) (output-port? . pG2cf6) (input-port? . pG2cf5) (make-i/o-write-error . pG2cd1) (make-i/o-read-error . pG2cd0) (make-i/o-port-error . pG2ccf) (make-i/o-invalid-position-error . pG2cce) (make-i/o-filename-error . pG2ccd) (make-i/o-file-protection-error . pG2ccc) (make-i/o-file-is-read-only-error . pG2ccb) (make-i/o-file-does-not-exist-error . pG2cca) (make-i/o-file-already-exists-error . pG2cc9) (make-i/o-error . pG2cc8) (i/o-write-error? . pG2cbc) (i/o-read-error? . pG2cbb) (i/o-port-error? . pG2cba) (i/o-invalid-position-error? . pG2cb9) (i/o-filename-error? . pG2cb8) (i/o-file-protection-error? . pG2cb7) (i/o-file-is-read-only-error? . pG2cb6) (i/o-file-does-not-exist-error? . pG2cb5) (i/o-file-already-exists-error? . pG2cb4) (i/o-error? . pG2cb3) (i/o-error-position . pG2cb2) (i/o-error-port . pG2cb1) (i/o-error-filename . pG2cb0) (&i/o-port . pG2af3) (&i/o-file-does-not-exist . pG2af2) (&i/o-file-already-exists . pG2af1) (&i/o-file-is-read-only . pG2af0) (&i/o-file-protection . pG2aef) (&i/o-filename . pG2aee) (&i/o-invalid-position . pG2aed) (&i/o-write . pG2aec) (&i/o-read . pG2aeb) (&i/o . pG2aea)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e62 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . pG2cbf) (utf32->string . pG2c45) (utf16->string . pG2c44) (utf8->string . pG2c43) (uint-list->bytevector . pG2c42) (u8-list->bytevector . pG2c41) (string->utf8 . pG2c40) (string->utf32 . pG2c3f) (string->utf16 . pG2c3e) (sint-list->bytevector . pG2c3d) (native-endianness . pG2c3c) (bytevector? . pG2c3b) (bytevector=? . pG2c3a) (bytevector-uint-set! . pG2c39) (bytevector-uint-ref . pG2c38) (bytevector-u8-set! . pG2c37) (bytevector-u8-ref . pG2c36) (bytevector-u64-set! . pG2c35) (bytevector-u64-ref . pG2c34) (bytevector-u64-native-set! . pG2c33) (bytevector-u64-native-ref . pG2c32) (bytevector-u32-set! . pG2c31) (bytevector-u32-ref . pG2c30) (bytevector-u32-native-set! . pG2c2f) (bytevector-u32-native-ref . pG2c2e) (bytevector-u16-set! . pG2c2d) (bytevector-u16-ref . pG2c2c) (bytevector-u16-native-set! . pG2c2b) (bytevector-u16-native-ref . pG2c2a) (bytevector-sint-set! . pG2c29) (bytevector-sint-ref . pG2c28) (bytevector-s8-set! . pG2c27) (bytevector-s8-ref . pG2c26) (bytevector-s64-set! . pG2c25) (bytevector-s64-ref . pG2c24) (bytevector-s64-native-set! . pG2c23) (bytevector-s64-native-ref . pG2c22) (bytevector-s32-set! . pG2c21) (bytevector-s32-ref . pG2c20) (bytevector-s32-native-set! . pG2c1f) (bytevector-s32-native-ref . pG2c1e) (bytevector-s16-set! . pG2c1d) (bytevector-s16-ref . pG2c1c) (bytevector-s16-native-set! . pG2c1b) (bytevector-s16-native-ref . pG2c1a) (bytevector-length . pG2c19) (bytevector-ieee-single-ref . pG2c18) (bytevector-ieee-single-set! . pG2c17) (bytevector-ieee-single-native-set! . pG2c16) (bytevector-ieee-single-native-ref . pG2c15) (bytevector-ieee-double-set! . pG2c14) (bytevector-ieee-double-ref . pG2c13) (bytevector-ieee-double-native-set! . pG2c12) (bytevector-ieee-double-native-ref . pG2c11) (bytevector-fill! . pG2c10) (bytevector-copy! . pG2c0f) (bytevector-copy . pG2c0e) (bytevector->uint-list . pG2c0d) (bytevector->u8-list . pG2c0c) (bytevector->sint-list . pG2c0b) (endianness . pG2abf)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e63 '(rnrs unicode) '(6) '() '() '() '((string-upcase . pG2d52) (string-titlecase . pG2d51) (string-normalize-nfkd . pG2d50) (string-normalize-nfkc . pG2d4f) (string-normalize-nfd . pG2d4e) (string-normalize-nfc . pG2d4d) (string-foldcase . pG2d4c) (string-downcase . pG2d4b) (string-ci>? . pG2d4a) (string-ci>=? . pG2d49) (string-ci=? . pG2d48) (string-ci<? . pG2d47) (string-ci<=? . pG2d46) (char-whitespace? . pG2d45) (char-upper-case? . pG2d44) (char-title-case? . pG2d43) (char-numeric? . pG2d42) (char-lower-case? . pG2d41) (char-general-category . pG2d40) (char-upcase . pG2d3f) (char-titlecase . pG2d3e) (char-foldcase . pG2d3d) (char-downcase . pG2d3c) (char-ci>? . pG2d3b) (char-ci>=? . pG2d3a) (char-ci=? . pG2d39) (char-ci<? . pG2d38) (char-ci<=? . pG2d37) (char-alphabetic? . pG2d36)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e64 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . pG2c79) (raise-continuable . pG2c78) (raise . pG2c77) (guard . pG2acb) (else . pG2ac3) (=> . pG2ac2)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e65 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . pG2bab) (bitwise-reverse-bit-field . pG2baa) (bitwise-length . pG2ba9) (bitwise-if . pG2ba8) (bitwise-first-bit-set . pG2ba7) (bitwise-copy-bit-field . pG2ba6) (bitwise-copy-bit . pG2ba5) (bitwise-bit-set? . pG2ba4) (bitwise-bit-field . pG2ba3) (bitwise-bit-count . pG2ba2) (bitwise-xor . pG2ba1) (bitwise-ior . pG2ba0) (bitwise-and . pG2b9f) (bitwise-not . pG2b9e) (bitwise-arithmetic-shift-right . pG2b9d) (bitwise-arithmetic-shift-left . pG2b9c) (bitwise-arithmetic-shift . pG2b9b)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e66 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . pG2bd8) (fxxor . pG2bd7) (fxrotate-bit-field . pG2bd6) (fxreverse-bit-field . pG2bd5) (fxpositive? . pG2bd4) (fxodd? . pG2bd3) (fxnot . pG2bd2) (fxnegative? . pG2bd1) (fxmod0 . pG2bd0) (fxmod . pG2bcf) (fxmin . pG2bce) (fxmax . pG2bcd) (fxlength . pG2bcc) (fxior . pG2bcb) (fxif . pG2bca) (fxfirst-bit-set . pG2bc9) (fxeven? . pG2bc8) (fxdiv0-and-mod0 . pG2bc7) (fxdiv0 . pG2bc6) (fxdiv-and-mod . pG2bc5) (fxdiv . pG2bc4) (fxcopy-bit-field . pG2bc3) (fxcopy-bit . pG2bc2) (fxbit-set? . pG2bc1) (fxbit-field . pG2bc0) (fxbit-count . pG2bbf) (fxarithmetic-shift-right . pG2bbe) (fxarithmetic-shift-left . pG2bbd) (fxarithmetic-shift . pG2bbc) (fxand . pG2bbb) (fx>? . pG2bba) (fx>=? . pG2bb9) (fx=? . pG2bb8) (fx<? . pG2bb7) (fx<=? . pG2bb6) (fx-/carry . pG2bb5) (fx- . pG2bb4) (fx+/carry . pG2bb3) (fx+ . pG2bb2) (fx*/carry . pG2bb1) (fx* . pG2bb0) (greatest-fixnum . pG2baf) (least-fixnum . pG2bae) (fixnum-width . pG2bad) (fixnum? . pG2bac)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e67 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . pG2c0a) (no-infinities-violation? . pG2c09) (make-no-nans-violation . pG2c08) (make-no-infinities-violation . pG2c07) (real->flonum . pG2c06) (flzero? . pG2c05) (fltruncate . pG2c04) (fltan . pG2c03) (flsqrt . pG2c02) (flsin . pG2c01) (flround . pG2c00) (flpositive? . pG2bff) (flonum? . pG2bfe) (flodd? . pG2bfd) (flnumerator . pG2bfc) (flnegative? . pG2bfb) (flnan? . pG2bfa) (flmod0 . pG2bf9) (flmod . pG2bf8) (flmin . pG2bf7) (flmax . pG2bf6) (fllog . pG2bf5) (flinteger? . pG2bf4) (flinfinite? . pG2bf3) (flfloor . pG2bf2) (flfinite? . pG2bf1) (flexpt . pG2bf0) (flexp . pG2bef) (fleven? . pG2bee) (fldiv0-and-mod0 . pG2bed) (fldiv0 . pG2bec) (fldiv-and-mod . pG2beb) (fldiv . pG2bea) (fldenominator . pG2be9) (flcos . pG2be8) (flceiling . pG2be7) (flatan . pG2be6) (flasin . pG2be5) (flacos . pG2be4) (flabs . pG2be3) (fl>? . pG2be2) (fl>=? . pG2be1) (fl=? . pG2be0) (fl<? . pG2bdf) (fl<=? . pG2bde) (fl/ . pG2bdd) (fl- . pG2bdc) (fl+ . pG2bdb) (fl* . pG2bda) (fixnum->flonum . pG2bd9) (&no-nans . pG2af7) (&no-infinities . pG2af6)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e68 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . pG2d1f) (string-ci-hash . pG2d1e) (string-hash . pG2d1d) (equal-hash . pG2d1c) (hashtable-equivalence-function . pG2d1b) (make-hashtable . pG2d1a) (hashtable-hash-function . pG2d19) (make-eqv-hashtable . pG2d18) (make-eq-hashtable . pG2d17) (hashtable? . pG2d16) (hashtable-update! . pG2d15) (hashtable-size . pG2d14) (hashtable-set! . pG2d13) (hashtable-ref . pG2d12) (hashtable-mutable? . pG2d11) (hashtable-keys . pG2d10) (hashtable-entries . pG2d0f) (hashtable-delete! . pG2d0e) (hashtable-copy . pG2d0d) (hashtable-contains? . pG2d0c) (hashtable-clear! . pG2d0b)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e69 '(rnrs io ports) '(6) '() '() '() '((eof-object? . pG2cfb) (eof-object . pG2cfa) (current-error-port . pG2cf9) (current-output-port . pG2cf8) (current-input-port . pG2cf7) (output-port? . pG2cf6) (input-port? . pG2cf5) (utf-8-codec . pG2cf4) (utf-16-codec . pG2cf3) (transcoder-error-handling-mode . pG2cf2) (transcoder-eol-style . pG2cf1) (transcoder-codec . pG2cf0) (transcoded-port . pG2cef) (textual-port? . pG2cee) (string->bytevector . pG2ced) (standard-output-port . pG2cec) (standard-input-port . pG2ceb) (standard-error-port . pG2cea) (set-port-position! . pG2ce9) (put-u8 . pG2ce8) (put-string . pG2ce7) (put-datum . pG2ce6) (put-char . pG2ce5) (put-bytevector . pG2ce4) (port? . pG2ce3) (port-transcoder . pG2ce2) (port-position . pG2ce1) (port-has-set-port-position!? . pG2ce0) (port-has-port-position? . pG2cdf) (port-eof? . pG2cde) (output-port-buffer-mode . pG2cdd) (open-string-output-port . pG2cdc) (open-string-input-port . pG2cdb) (open-file-output-port . pG2cda) (open-file-input/output-port . pG2cd9) (open-file-input-port . pG2cd8) (open-bytevector-output-port . pG2cd7) (open-bytevector-input-port . pG2cd6) (native-transcoder . pG2cd5) (native-eol-style . pG2cd4) (make-transcoder . pG2cd3) (latin-1-codec . pG2cd2) (make-i/o-write-error . pG2cd1) (make-i/o-read-error . pG2cd0) (make-i/o-port-error . pG2ccf) (make-i/o-invalid-position-error . pG2cce) (make-i/o-filename-error . pG2ccd) (make-i/o-file-protection-error . pG2ccc) (make-i/o-file-is-read-only-error . pG2ccb) (make-i/o-file-does-not-exist-error . pG2cca) (make-i/o-file-already-exists-error . pG2cc9) (make-i/o-error . pG2cc8) (make-i/o-encoding-error . pG2cc7) (make-i/o-decoding-error . pG2cc6) (make-custom-textual-output-port . pG2cc5) (make-custom-textual-input/output-port . pG2cc4) (make-custom-textual-input-port . pG2cc3) (make-custom-binary-output-port . pG2cc2) (make-custom-binary-input/output-port . pG2cc1) (make-custom-binary-input-port . pG2cc0) (lookahead-u8 . pG2cbe) (lookahead-char . pG2cbd) (i/o-write-error? . pG2cbc) (i/o-read-error? . pG2cbb) (i/o-port-error? . pG2cba) (i/o-invalid-position-error? . pG2cb9) (i/o-filename-error? . pG2cb8) (i/o-file-protection-error? . pG2cb7) (i/o-file-is-read-only-error? . pG2cb6) (i/o-file-does-not-exist-error? . pG2cb5) (i/o-file-already-exists-error? . pG2cb4) (i/o-error? . pG2cb3) (i/o-error-position . pG2cb2) (i/o-error-port . pG2cb1) (i/o-error-filename . pG2cb0) (i/o-encoding-error? . pG2caf) (i/o-encoding-error-char . pG2cae) (i/o-decoding-error? . pG2cad) (get-u8 . pG2cac) (get-string-n! . pG2cab) (get-string-n . pG2caa) (get-string-all . pG2ca9) (get-line . pG2ca8) (get-datum . pG2ca7) (get-char . pG2ca6) (get-bytevector-some . pG2ca5) (get-bytevector-n! . pG2ca4) (get-bytevector-n . pG2ca3) (get-bytevector-all . pG2ca2) (flush-output-port . pG2ca1) (close-port . pG2ca0) (call-with-string-output-port . pG2c7f) (call-with-port . pG2c7e) (call-with-bytevector-output-port . pG2c7d) (bytevector->string . pG2c7c) (buffer-mode? . pG2c7b) (binary-port? . pG2c7a) (&i/o-encoding . pG2af5) (&i/o-decoding . pG2af4) (&i/o-port . pG2af3) (&i/o-file-does-not-exist . pG2af2) (&i/o-file-already-exists . pG2af1) (&i/o-file-is-read-only . pG2af0) (&i/o-file-protection . pG2aef) (&i/o-filename . pG2aee) (&i/o-invalid-position . pG2aed) (&i/o-write . pG2aec) (&i/o-read . pG2aeb) (&i/o . pG2aea) (error-handling-mode . pG2acf) (file-options . pG2ace) (buffer-mode . pG2acd) (eol-style . pG2acc)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e6a '(rnrs enums) '(6) '() '() '() '((make-enumeration . pG2c76) (enum-set=? . pG2c75) (enum-set-universe . pG2c74) (enum-set-union . pG2c73) (enum-set-subset? . pG2c72) (enum-set-projection . pG2c71) (enum-set-member? . pG2c70) (enum-set-intersection . pG2c6f) (enum-set-indexer . pG2c6e) (enum-set-difference . pG2c6d) (enum-set-constructor . pG2c6c) (enum-set-complement . pG2c6b) (enum-set->list . pG2c6a) (define-enumeration . pG2ada)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e6b '(rnrs conditions) '(6) '() '() '() '((who-condition? . pG2c69) (warning? . pG2c68) (violation? . pG2c67) (undefined-violation? . pG2c66) (syntax-violation? . pG2c65) (syntax-violation-subform . pG2c64) (syntax-violation-form . pG2c63) (syntax-violation . pGe71) (simple-conditions . pG2c62) (serious-condition? . pG2c61) (non-continuable-violation? . pG2c60) (message-condition? . pG2c5f) (make-who-condition . pG2c5e) (make-warning . pG2c5d) (make-violation . pG2c5c) (make-undefined-violation . pG2c5b) (make-syntax-violation . pG2c5a) (make-serious-condition . pG2c59) (make-non-continuable-violation . pG2c58) (make-message-condition . pG2c57) (make-lexical-violation . pG2c56) (make-irritants-condition . pG2c55) (make-implementation-restriction-violation . pG2c54) (make-error . pG2c53) (make-assertion-violation . pG2c52) (lexical-violation? . pG2c51) (irritants-condition? . pG2c50) (implementation-restriction-violation? . pG2c4f) (error? . pG2c4e) (condition-who . pG2c4d) (condition-predicate . pG2c4c) (condition-message . pG2c4b) (condition-irritants . pG2c4a) (condition-accessor . pG2c49) (condition . pG2c48) (assertion-violation? . pG2c47) (condition? . pG2c46) (&undefined . pG2ae9) (&syntax . pG2ae8) (&lexical . pG2ae7) (&implementation-restriction . pG2ae6) (&non-continuable . pG2ae5) (&who . pG2ae4) (&irritants . pG2ae3) (&assertion . pG2ae2) (&violation . pG2ae1) (&error . pG2ae0) (&serious . pG2adf) (&warning . pG2ade) (&message . pG2add) (&condition . pG2adc) (define-condition-type . pG2adb)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e6c '(rnrs records inspection) '(6) '() '() '() '((record? . pG2d2e) (record-type-uid . pG2d2d) (record-type-sealed? . pG2d2c) (record-type-parent . pG2d2b) (record-type-opaque? . pG2d2a) (record-type-name . pG2d29) (record-type-generative? . pG2d28) (record-type-field-names . pG2d27) (record-rtd . pG2d26) (record-field-mutable? . pG2d25)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e6d '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . pG2d35) (record-predicate . pG2d34) (record-mutator . pG2d33) (record-constructor . pG2d32) (record-accessor . pG2d31) (make-record-type-descriptor . pG2d30) (make-record-constructor-descriptor . pG2d2f)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e6e '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . pG2ad9) (parent-rtd . pG2ad8) (nongenerative . pG2ad7) (opaque . pG2ad6) (sealed . pG2ad5) (protocol . pG2ad4) (parent . pG2ad3) (immutable . pG2ad2) (mutable . pG2ad1) (fields . pG2ad0) (record-constructor-descriptor . pG2ab0) (record-type-descriptor . pG2aaf)) '() values values '#f '#f '#t '#f) (pG9a5@pG7f1@install-library 'pG2e6f '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . pG2e4f) (&no-nans-rtd . pG2e4e) (&no-infinities-rcd . pG2e4d) (&no-infinities-rtd . pG2e4c) (&i/o-encoding-rcd . pG2e4b) (&i/o-encoding-rtd . pG2e4a) (&i/o-decoding-rcd . pG2e49) (&i/o-decoding-rtd . pG2e48) (&i/o-port-rcd . pG2e47) (&i/o-port-rtd . pG2e46) (&i/o-file-does-not-exist-rcd . pG2e45) (&i/o-file-does-not-exist-rtd . pG2e44) (&i/o-file-already-exists-rcd . pG2e43) (&i/o-file-already-exists-rtd . pG2e42) (&i/o-file-is-read-only-rcd . pG2e41) (&i/o-file-is-read-only-rtd . pG2e40) (&i/o-file-protection-rcd . pG2e3f) (&i/o-file-protection-rtd . pG2e3e) (&i/o-filename-rcd . pG2e3d) (&i/o-filename-rtd . pG2e3c) (&i/o-invalid-position-rcd . pG2e3b) (&i/o-invalid-position-rtd . pG2e3a) (&i/o-write-rcd . pG2e39) (&i/o-write-rtd . pG2e38) (&i/o-read-rcd . pG2e37) (&i/o-read-rtd . pG2e36) (&i/o-rcd . pG2e35) (&i/o-rtd . pG2e34) (&undefined-rcd . pG2e33) (&undefined-rtd . pG2e32) (&syntax-rcd . pG2e31) (&syntax-rtd . pG2e30) (&lexical-rcd . pG2e2f) (&lexical-rtd . pG2e2e) (&implementation-restriction-rcd . pG2e2d) (&implementation-restriction-rtd . pG2e2c) (&non-continuable-rcd . pG2e2b) (&non-continuable-rtd . pG2e2a) (&who-rcd . pG2e29) (&who-rtd . pG2e28) (&irritants-rcd . pG2e27) (&irritants-rtd . pG2e26) (&assertion-rcd . pG2e25) (&assertion-rtd . pG2e24) (&violation-rcd . pG2e23) (&violation-rtd . pG2e22) (&error-rcd . pG2e21) (&error-rtd . pG2e20) (&serious-rcd . pG2e1f) (&serious-rtd . pG2e1e) (&warning-rcd . pG2e1d) (&warning-rtd . pG2e1c) (&message-rcd . pG2e1b) (&message-rtd . pG2e1a) (&condition-rcd . pG2e19) (&condition-rtd . pG2e18) (syntax-error . pGe6d) (syntax-dispatch . pGd91) (pretty-print . pG2e17) (eval-core . pG2e16) (set-symbol-value! . pG2e15) (symbol-value . pG2e14) (gensym . pG2e13) (void . pG2e12) (load . pG2930) (interaction-environment . pGe7f) (char-ready? . pG2e11) (regexp? . pG2e10) (read-line . pG2e0f) (gensym-prefix-set! . pG2e0e) (ungensym . pG2e0d) (alist->eq-hash-table . pG2e0c) (assoc-ref . pG2e0b) (print . pG2e0a) (format . pG2e09) (host-os . pG2e08) (library-path . pG7d0) (standard-library-path . pG2e07) (ssl-supported? . pG2e06) (ssl-socket? . pG2e05) (socket-sslize! . pG2e04) (%monapi-stream-read . pG2e03) (%monapi-stream-write . pG2e02) (%monapi-stream-handle . pG2e01) (%monapi-make-stream . pG2e00) (%monapi-name-add! . pG2dff) (%monapi-message-receive . pG2dfe) (%monapi-name-whereis . pG2dfd) (%monapi-message-reply . pG2dfc) (%monapi-message-send-receive . pG2dfb) (%monapi-message-send . pG2dfa) (process-terminate! . pG2df9) (process-list . pG2df8) (file-newer? . pG2df7) (stat-mtime . pG2df6) (write-to-file . pG2df5) (file->list . pG2df4) (file->string . pG2df3) (digit->integer . pG2df2) (call-with-string-input-port . pG2df1) (call-with-string-io . pG2df0) (string-split . pG2def) (bytevector-for-each . pG2dee) (string->regexp . pG2ded) (rxmatch . pG2dec) (regexp-replace-all . pG2deb) (hashtable-fold-left . pG2dea) (hashtable-for-each . pG2de9) (mosh-cache-dir . pG5ba) (%start-process . pG2de8) (%call-process . pG2de7) (local-tz-offset . pG2de6) (microseconds . pG2de5) (directory-list . pG2de4) (set-current-directory! . pG2de3) (expand-path . pG2de2) (current-directory . pG2de1) (%getpid . pG2de0) (%waitpid . pG2ddf) (simple-struct-name . pG2dde) (simple-struct-set! . pG2ddd) (simple-struct-ref . pG2ddc) (make-simple-struct . pG2ddb) (simple-struct? . pG2dda) (pointer-ref-c-int64 . pG2dd9) (pointer-ref-c-int32 . pG2dd8) (pointer-ref-c-int16 . pG2dd7) (pointer-ref-c-int8 . pG2dd6) (pointer-ref-c-uint64 . pG2dd5) (pointer-ref-c-uint32 . pG2dd4) (pointer-ref-c-uint16 . pG2dd3) (pointer-ref-c-uint8 . pG2dd2) (pointer-set-c-uint64! . pG2dd1) (pointer-set-c-uint32! . pG2dd0) (pointer-set-c-uint16! . pG2dcf) (pointer-set-c-uint8! . pG2dce) (pointer-set-c-int64! . pG2dcd) (pointer-set-c-int32! . pG2dcc) (pointer-set-c-int16! . pG2dcb) (pointer-set-c-int8! . pG2dca) (pointer-set-c-pointer! . pG2dc9) (pointer-set-c-double! . pG2dc8) (pointer-set-c-float! . pG2dc7) (pointer-set-c-long-long! . pG2dc6) (pointer-set-c-long! . pG2dc5) (pointer-set-c-int! . pG2dc4) (pointer-set-c-short! . pG2dc3) (pointer-set-c-char! . pG2dc2) (pointer-ref-c-pointer . pG2dc1) (pointer-ref-c-double . pG2dc0) (pointer-ref-c-float . pG2dbf) (pointer-ref-c-unsigned-long-long . pG2dbe) (pointer-ref-c-signed-long-long . pG2dbd) (pointer-ref-c-unsigned-long . pG2dbc) (pointer-ref-c-signed-long . pG2dbb) (pointer-ref-c-unsigned-int . pG2dba) (pointer-ref-c-signed-int . pG2db9) (pointer-ref-c-unsigned-short . pG2db8) (pointer-ref-c-signed-short . pG2db7) (pointer-ref-c-unsigned-char . pG2db6) (pointer-ref-c-signed-char . pG2db5) (pointer->integer . pG2db4) (integer->pointer . pG2db3) (pointer? . pG2db2) (shared-errno . pG2db1) (%ffi-error . pG2db0) (%ffi-close . pG2daf) (%ffi-free-c-callback-trampoline . pG2dae) (%ffi-make-c-callback-trampoline . pG2dad) (%ffi-free . pG2dac) (%ffi-malloc . pG2dab) (%ffi-supported? . pG2daa) (%ffi-pointer->string . pG2da9) (%ffi-call . pG2da8) (%ffi-lookup . pG2da7) (%ffi-open . pG2da6) (null-terminated-utf8->string . pG2da5) (null-terminated-bytevector->string . pG2da4) (%exec . pG2da3) (%fork . pG2da2) (%pipe . pG2da1) (%confstr . pG2da0) (%dup . pG2d9f) (p . pG2d9e) (open-output-string . pG2d9d) (get-output-string . pG2d9c) (file-stat-ctime . pG2d9b) (file-stat-atime . pG2d9a) (file-stat-mtime . pG2d99) (file-size-in-bytes . pG2d98) (file-writable? . pG2d97) (file-executable? . pG2d96) (file-readable? . pG2d95) (file-regular? . pG2d94) (file-symbolic-link? . pG2d93) (file-directory? . pG2d92) (create-symbolic-link . pG2d91) (rename-file . pG2d90) (delete-directory . pG2d8f) (create-directory . pG2d8e) (create-mosh-cache-dir . pG2d8d) (get-environment-variables . pG2d8c) (current-exception-handler . pG2d8b) (get-environment-variable . pG2d8a) (join-wraps . pG2d89) (id->real-label . pG2d88) (same-marks? . pG2d87) (same-marks*? . pG2d86) (get-timeofday . pG2d85) (get-command-line . pG2d84) (sys-display . pG2d83) (whereis . pG2d82) (register . pG2d81) (vm-join! . pG2d80) (vm-set-value! . pG2d7f) (vm? . pG2d7e) (main-vm? . pG2d7d) (vm-eval . pG2d7c) (vm-self . pG2d7b) (vm-start! . pG2d7a) (make-vm . pG2d79) (mutex-try-lock! . pG2d78) (mutex-unlock! . pG2d77) (mutex-lock! . pG2d76) (mutex? . pG2d75) (make-mutex . pG2d74) (condition-variable-notify-all! . pG2d73) (condition-variable-notify! . pG2d72) (condition-variable-wait! . pG2d71) (make-condition-variable . pG2d70) (write/ss . pG2d6f) (mosh-executable-path . pG2d6e) (make-file-options . pG2d6d) (source-info . pG2d6c) (make-compiler-instruction . pG2d6b) (make-instruction . pG2d6a) (set-annotation! . pG2d69) (get-annotation . pG2d68) (annotated-pair? . pG2d67) (annotated-cons . pG2d66) (set-source-info! . pG2d65) (bignum? . pG2d64) (fast-equal? . pG2d63) (fasl-read . pG2d62) (fasl-write . pG2d61) (time-usage . pG2d60) (os-constant . pG2d5f) (condition-printer . pG2d5e) (disasm . pG2d5d) (make-parameter . pG5b8) (socket-port . pG2d5c) (socket-shutdown . pG2d5b) (socket-close . pG2d5a) (socket-send . pG2d59) (socket-recv! . pG2d58) (socket-recv . pG2d57) (make-server-socket . pG2d56) (make-client-socket . pG2d55) (socket-accept . pG2d54) (socket? . pG2d53) (string-upcase . pG2d52) (string-titlecase . pG2d51) (string-normalize-nfkd . pG2d50) (string-normalize-nfkc . pG2d4f) (string-normalize-nfd . pG2d4e) (string-normalize-nfc . pG2d4d) (string-foldcase . pG2d4c) (string-downcase . pG2d4b) (string-ci>? . pG2d4a) (string-ci>=? . pG2d49) (string-ci=? . pG2d48) (string-ci<? . pG2d47) (string-ci<=? . pG2d46) (char-whitespace? . pG2d45) (char-upper-case? . pG2d44) (char-title-case? . pG2d43) (char-numeric? . pG2d42) (char-lower-case? . pG2d41) (char-general-category . pG2d40) (char-upcase . pG2d3f) (char-titlecase . pG2d3e) (char-foldcase . pG2d3d) (char-downcase . pG2d3c) (char-ci>? . pG2d3b) (char-ci>=? . pG2d3a) (char-ci=? . pG2d39) (char-ci<? . pG2d38) (char-ci<=? . pG2d37) (char-alphabetic? . pG2d36) (make-variable-transformer . pGbbc) (identifier? . pGe73) (generate-temporaries . pGe5f) (free-identifier=? . pGe61) (syntax->datum . pGe77) (datum->syntax . pGe75) (bound-identifier=? . pGe63) (record-type-descriptor? . pG2d35) (record-predicate . pG2d34) (record-mutator . pG2d33) (record-constructor . pG2d32) (record-accessor . pG2d31) (make-record-type-descriptor . pG2d30) (make-record-constructor-descriptor . pG2d2f) (record? . pG2d2e) (record-type-uid . pG2d2d) (record-type-sealed? . pG2d2c) (record-type-parent . pG2d2b) (record-type-opaque? . pG2d2a) (record-type-name . pG2d29) (record-type-generative? . pG2d28) (record-type-field-names . pG2d27) (record-rtd . pG2d26) (record-field-mutable? . pG2d25) (delete-file . pG2d24) (file-exists? . pG2d23) (vector-sort! . pG2d22) (vector-sort . pG2d21) (list-sort . pG2d20) (symbol-hash . pG2d1f) (string-ci-hash . pG2d1e) (string-hash . pG2d1d) (equal-hash . pG2d1c) (hashtable-equivalence-function . pG2d1b) (make-hashtable . pG2d1a) (hashtable-hash-function . pG2d19) (make-eqv-hashtable . pG2d18) (make-eq-hashtable . pG2d17) (hashtable? . pG2d16) (hashtable-update! . pG2d15) (hashtable-size . pG2d14) (hashtable-set! . pG2d13) (hashtable-ref . pG2d12) (hashtable-mutable? . pG2d11) (hashtable-keys . pG2d10) (hashtable-entries . pG2d0f) (hashtable-delete! . pG2d0e) (hashtable-copy . pG2d0d) (hashtable-contains? . pG2d0c) (hashtable-clear! . pG2d0b) (call-with-output-file . pG2d0a) (call-with-input-file . pG2d09) (write-char . pG2d08) (write . pG2d07) (with-output-to-file . pG2d06) (with-input-from-file . pG2d05) (read-char . pG2d04) (read . pG2d03) (peek-char . pG2d02) (open-output-file . pG2d01) (open-input-file . pG2d00) (newline . pG2cff) (display . pG2cfe) (close-output-port . pG2cfd) (close-input-port . pG2cfc) (eof-object? . pG2cfb) (eof-object . pG2cfa) (current-error-port . pG2cf9) (current-output-port . pG2cf8) (current-input-port . pG2cf7) (output-port? . pG2cf6) (input-port? . pG2cf5) (utf-8-codec . pG2cf4) (utf-16-codec . pG2cf3) (transcoder-error-handling-mode . pG2cf2) (transcoder-eol-style . pG2cf1) (transcoder-codec . pG2cf0) (transcoded-port . pG2cef) (textual-port? . pG2cee) (string->bytevector . pG2ced) (standard-output-port . pG2cec) (standard-input-port . pG2ceb) (standard-error-port . pG2cea) (set-port-position! . pG2ce9) (put-u8 . pG2ce8) (put-string . pG2ce7) (put-datum . pG2ce6) (put-char . pG2ce5) (put-bytevector . pG2ce4) (port? . pG2ce3) (port-transcoder . pG2ce2) (port-position . pG2ce1) (port-has-set-port-position!? . pG2ce0) (port-has-port-position? . pG2cdf) (port-eof? . pG2cde) (output-port-buffer-mode . pG2cdd) (open-string-output-port . pG2cdc) (open-string-input-port . pG2cdb) (open-file-output-port . pG2cda) (open-file-input/output-port . pG2cd9) (open-file-input-port . pG2cd8) (open-bytevector-output-port . pG2cd7) (open-bytevector-input-port . pG2cd6) (native-transcoder . pG2cd5) (native-eol-style . pG2cd4) (make-transcoder . pG2cd3) (latin-1-codec . pG2cd2) (make-i/o-write-error . pG2cd1) (make-i/o-read-error . pG2cd0) (make-i/o-port-error . pG2ccf) (make-i/o-invalid-position-error . pG2cce) (make-i/o-filename-error . pG2ccd) (make-i/o-file-protection-error . pG2ccc) (make-i/o-file-is-read-only-error . pG2ccb) (make-i/o-file-does-not-exist-error . pG2cca) (make-i/o-file-already-exists-error . pG2cc9) (make-i/o-error . pG2cc8) (make-i/o-encoding-error . pG2cc7) (make-i/o-decoding-error . pG2cc6) (make-custom-textual-output-port . pG2cc5) (make-custom-textual-input/output-port . pG2cc4) (make-custom-textual-input-port . pG2cc3) (make-custom-binary-output-port . pG2cc2) (make-custom-binary-input/output-port . pG2cc1) (make-custom-binary-input-port . pG2cc0) (make-bytevector . pG2cbf) (lookahead-u8 . pG2cbe) (lookahead-char . pG2cbd) (i/o-write-error? . pG2cbc) (i/o-read-error? . pG2cbb) (i/o-port-error? . pG2cba) (i/o-invalid-position-error? . pG2cb9) (i/o-filename-error? . pG2cb8) (i/o-file-protection-error? . pG2cb7) (i/o-file-is-read-only-error? . pG2cb6) (i/o-file-does-not-exist-error? . pG2cb5) (i/o-file-already-exists-error? . pG2cb4) (i/o-error? . pG2cb3) (i/o-error-position . pG2cb2) (i/o-error-port . pG2cb1) (i/o-error-filename . pG2cb0) (i/o-encoding-error? . pG2caf) (i/o-encoding-error-char . pG2cae) (i/o-decoding-error? . pG2cad) (get-u8 . pG2cac) (get-string-n! . pG2cab) (get-string-n . pG2caa) (get-string-all . pG2ca9) (get-line . pG2ca8) (get-datum . pG2ca7) (get-char . pG2ca6) (get-bytevector-some . pG2ca5) (get-bytevector-n! . pG2ca4) (get-bytevector-n . pG2ca3) (get-bytevector-all . pG2ca2) (flush-output-port . pG2ca1) (close-port . pG2ca0) (scheme-report-environment . pGe4d) (quotient . pG2c9f) (null-environment . pGe4b) (remainder . pG2c9e) (modulo . pG2c9d) (inexact->exact . pG2c9c) (force . pG2c9b) (exact->inexact . pG2c9a) (make-promise . pG2c99) (exit . pG2c98) (command-line . pG292a) (string-fill! . pG2c97) (string-set! . pG2c96) (set-cdr! . pG2c95) (set-car! . pG2c94) (remove . pG2c93) (remv . pG2c92) (remp . pG2c91) (remq . pG2c90) (partition . pG2c8f) (memv . pG2c8e) (memq . pG2c8d) (memp . pG2c8c) (member . pG2c8b) (exists . pG2c8a) (for-all . pG2c89) (fold-right . pG2c88) (fold-left . pG2c87) (find . pG2c86) (filter . pG2c85) (cons* . pG2c84) (assv . pG2c83) (assq . pG2c82) (assp . pG2c81) (assoc . pG2c80) (call-with-string-output-port . pG2c7f) (call-with-port . pG2c7e) (call-with-bytevector-output-port . pG2c7d) (bytevector->string . pG2c7c) (buffer-mode? . pG2c7b) (binary-port? . pG2c7a) (with-exception-handler . pG2c79) (raise-continuable . pG2c78) (raise . pG2c77) (eval . pGe51) (environment . pGe49) (make-enumeration . pG2c76) (enum-set=? . pG2c75) (enum-set-universe . pG2c74) (enum-set-union . pG2c73) (enum-set-subset? . pG2c72) (enum-set-projection . pG2c71) (enum-set-member? . pG2c70) (enum-set-intersection . pG2c6f) (enum-set-indexer . pG2c6e) (enum-set-difference . pG2c6d) (enum-set-constructor . pG2c6c) (enum-set-complement . pG2c6b) (enum-set->list . pG2c6a) (who-condition? . pG2c69) (warning? . pG2c68) (violation? . pG2c67) (undefined-violation? . pG2c66) (syntax-violation? . pG2c65) (syntax-violation-subform . pG2c64) (syntax-violation-form . pG2c63) (syntax-violation . pGe71) (simple-conditions . pG2c62) (serious-condition? . pG2c61) (non-continuable-violation? . pG2c60) (message-condition? . pG2c5f) (make-who-condition . pG2c5e) (make-warning . pG2c5d) (make-violation . pG2c5c) (make-undefined-violation . pG2c5b) (make-syntax-violation . pG2c5a) (make-serious-condition . pG2c59) (make-non-continuable-violation . pG2c58) (make-message-condition . pG2c57) (make-lexical-violation . pG2c56) (make-irritants-condition . pG2c55) (make-implementation-restriction-violation . pG2c54) (make-error . pG2c53) (make-assertion-violation . pG2c52) (lexical-violation? . pG2c51) (irritants-condition? . pG2c50) (implementation-restriction-violation? . pG2c4f) (error? . pG2c4e) (condition-who . pG2c4d) (condition-predicate . pG2c4c) (condition-message . pG2c4b) (condition-irritants . pG2c4a) (condition-accessor . pG2c49) (condition . pG2c48) (assertion-violation? . pG2c47) (condition? . pG2c46) (utf32->string . pG2c45) (utf16->string . pG2c44) (utf8->string . pG2c43) (uint-list->bytevector . pG2c42) (u8-list->bytevector . pG2c41) (string->utf8 . pG2c40) (string->utf32 . pG2c3f) (string->utf16 . pG2c3e) (sint-list->bytevector . pG2c3d) (native-endianness . pG2c3c) (bytevector? . pG2c3b) (bytevector=? . pG2c3a) (bytevector-uint-set! . pG2c39) (bytevector-uint-ref . pG2c38) (bytevector-u8-set! . pG2c37) (bytevector-u8-ref . pG2c36) (bytevector-u64-set! . pG2c35) (bytevector-u64-ref . pG2c34) (bytevector-u64-native-set! . pG2c33) (bytevector-u64-native-ref . pG2c32) (bytevector-u32-set! . pG2c31) (bytevector-u32-ref . pG2c30) (bytevector-u32-native-set! . pG2c2f) (bytevector-u32-native-ref . pG2c2e) (bytevector-u16-set! . pG2c2d) (bytevector-u16-ref . pG2c2c) (bytevector-u16-native-set! . pG2c2b) (bytevector-u16-native-ref . pG2c2a) (bytevector-sint-set! . pG2c29) (bytevector-sint-ref . pG2c28) (bytevector-s8-set! . pG2c27) (bytevector-s8-ref . pG2c26) (bytevector-s64-set! . pG2c25) (bytevector-s64-ref . pG2c24) (bytevector-s64-native-set! . pG2c23) (bytevector-s64-native-ref . pG2c22) (bytevector-s32-set! . pG2c21) (bytevector-s32-ref . pG2c20) (bytevector-s32-native-set! . pG2c1f) (bytevector-s32-native-ref . pG2c1e) (bytevector-s16-set! . pG2c1d) (bytevector-s16-ref . pG2c1c) (bytevector-s16-native-set! . pG2c1b) (bytevector-s16-native-ref . pG2c1a) (bytevector-length . pG2c19) (bytevector-ieee-single-ref . pG2c18) (bytevector-ieee-single-set! . pG2c17) (bytevector-ieee-single-native-set! . pG2c16) (bytevector-ieee-single-native-ref . pG2c15) (bytevector-ieee-double-set! . pG2c14) (bytevector-ieee-double-ref . pG2c13) (bytevector-ieee-double-native-set! . pG2c12) (bytevector-ieee-double-native-ref . pG2c11) (bytevector-fill! . pG2c10) (bytevector-copy! . pG2c0f) (bytevector-copy . pG2c0e) (bytevector->uint-list . pG2c0d) (bytevector->u8-list . pG2c0c) (bytevector->sint-list . pG2c0b) (no-nans-violation? . pG2c0a) (no-infinities-violation? . pG2c09) (make-no-nans-violation . pG2c08) (make-no-infinities-violation . pG2c07) (real->flonum . pG2c06) (flzero? . pG2c05) (fltruncate . pG2c04) (fltan . pG2c03) (flsqrt . pG2c02) (flsin . pG2c01) (flround . pG2c00) (flpositive? . pG2bff) (flonum? . pG2bfe) (flodd? . pG2bfd) (flnumerator . pG2bfc) (flnegative? . pG2bfb) (flnan? . pG2bfa) (flmod0 . pG2bf9) (flmod . pG2bf8) (flmin . pG2bf7) (flmax . pG2bf6) (fllog . pG2bf5) (flinteger? . pG2bf4) (flinfinite? . pG2bf3) (flfloor . pG2bf2) (flfinite? . pG2bf1) (flexpt . pG2bf0) (flexp . pG2bef) (fleven? . pG2bee) (fldiv0-and-mod0 . pG2bed) (fldiv0 . pG2bec) (fldiv-and-mod . pG2beb) (fldiv . pG2bea) (fldenominator . pG2be9) (flcos . pG2be8) (flceiling . pG2be7) (flatan . pG2be6) (flasin . pG2be5) (flacos . pG2be4) (flabs . pG2be3) (fl>? . pG2be2) (fl>=? . pG2be1) (fl=? . pG2be0) (fl<? . pG2bdf) (fl<=? . pG2bde) (fl/ . pG2bdd) (fl- . pG2bdc) (fl+ . pG2bdb) (fl* . pG2bda) (fixnum->flonum . pG2bd9) (fxzero? . pG2bd8) (fxxor . pG2bd7) (fxrotate-bit-field . pG2bd6) (fxreverse-bit-field . pG2bd5) (fxpositive? . pG2bd4) (fxodd? . pG2bd3) (fxnot . pG2bd2) (fxnegative? . pG2bd1) (fxmod0 . pG2bd0) (fxmod . pG2bcf) (fxmin . pG2bce) (fxmax . pG2bcd) (fxlength . pG2bcc) (fxior . pG2bcb) (fxif . pG2bca) (fxfirst-bit-set . pG2bc9) (fxeven? . pG2bc8) (fxdiv0-and-mod0 . pG2bc7) (fxdiv0 . pG2bc6) (fxdiv-and-mod . pG2bc5) (fxdiv . pG2bc4) (fxcopy-bit-field . pG2bc3) (fxcopy-bit . pG2bc2) (fxbit-set? . pG2bc1) (fxbit-field . pG2bc0) (fxbit-count . pG2bbf) (fxarithmetic-shift-right . pG2bbe) (fxarithmetic-shift-left . pG2bbd) (fxarithmetic-shift . pG2bbc) (fxand . pG2bbb) (fx>? . pG2bba) (fx>=? . pG2bb9) (fx=? . pG2bb8) (fx<? . pG2bb7) (fx<=? . pG2bb6) (fx-/carry . pG2bb5) (fx- . pG2bb4) (fx+/carry . pG2bb3) (fx+ . pG2bb2) (fx*/carry . pG2bb1) (fx* . pG2bb0) (greatest-fixnum . pG2baf) (least-fixnum . pG2bae) (fixnum-width . pG2bad) (fixnum? . pG2bac) (bitwise-rotate-bit-field . pG2bab) (bitwise-reverse-bit-field . pG2baa) (bitwise-length . pG2ba9) (bitwise-if . pG2ba8) (bitwise-first-bit-set . pG2ba7) (bitwise-copy-bit-field . pG2ba6) (bitwise-copy-bit . pG2ba5) (bitwise-bit-set? . pG2ba4) (bitwise-bit-field . pG2ba3) (bitwise-bit-count . pG2ba2) (bitwise-xor . pG2ba1) (bitwise-ior . pG2ba0) (bitwise-and . pG2b9f) (bitwise-not . pG2b9e) (bitwise-arithmetic-shift-right . pG2b9d) (bitwise-arithmetic-shift-left . pG2b9c) (bitwise-arithmetic-shift . pG2b9b) (zero? . pG2b9a) (vector? . pG2b99) (vector-set! . pG2b98) (vector-ref . pG2b97) (vector-map . pG2b96) (vector-length . pG2b95) (vector-for-each . pG2b94) (vector-fill! . pG2b93) (vector->list . pG2b92) (vector . pG2b91) (values . pG2b90) (truncate . pG2b8f) (tan . pG2b8e) (symbol? . pG2b8d) (symbol=? . pG2b8c) (symbol->string . pG2b8b) (substring . pG2b8a) (string? . pG2b89) (string>? . pG2b88) (string>=? . pG2b87) (string=? . pG2b86) (string<? . pG2b85) (string<=? . pG2b84) (string-ref . pG2b83) (string-length . pG2b82) (string-for-each . pG2b81) (string-copy . pG2b80) (string-append . pG2b7f) (string->symbol . pG2b7e) (string->number . pG2b7d) (string->list . pG2b7c) (string . pG2b7b) (sqrt . pG2b7a) (sin . pG2b79) (round . pG2b78) (reverse . pG2b77) (real? . pG2b76) (real-valued? . pG2b75) (real-part . pG2b74) (rationalize . pG2b73) (rational? . pG2b72) (rational-valued? . pG2b71) (procedure? . pG2b70) (positive? . pG2b6f) (pair? . pG2b6e) (odd? . pG2b6d) (numerator . pG2b6c) (number? . pG2b6b) (number->string . pG2b6a) (null? . pG2b69) (not . pG2b68) (negative? . pG2b67) (nan? . pG2b66) (min . pG2b65) (max . pG2b64) (map . pG2b63) (make-vector . pG2b62) (make-string . pG2b61) (make-rectangular . pG2b60) (make-polar . pG2b5f) (magnitude . pG2b5e) (log . pG2b5d) (list? . pG2b5c) (list-tail . pG2b5b) (list-ref . pG2b5a) (list->vector . pG2b59) (list->string . pG2b58) (list . pG2b57) (length . pG2b56) (lcm . pG2b55) (integer? . pG2b54) (integer-valued? . pG2b53) (integer->char . pG2b52) (infinite? . pG2b51) (inexact? . pG2b50) (inexact . pG2b4f) (imag-part . pG2b4e) (gcd . pG2b4d) (for-each . pG2b4c) (floor . pG2b4b) (finite? . pG2b4a) (expt . pG2b49) (exp . pG2b48) (exact? . pG2b47) (exact-integer-sqrt . pG2b46) (exact . pG2b45) (even? . pG2b44) (error . pG2b43) (eqv? . pG2b42) (equal? . pG2b41) (eq? . pG2b40) (dynamic-wind . pG2b3f) (div0-and-mod0 . pG2b3e) (mod0 . pG2b3d) (div0 . pG2b3c) (div-and-mod . pG2b3b) (mod . pG2b3a) (div . pG2b39) (denominator . pG2b38) (cos . pG2b37) (cons . pG2b36) (complex? . pG2b35) (char? . pG2b34) (char>? . pG2b33) (char>=? . pG2b32) (char=? . pG2b31) (char<? . pG2b30) (char<=? . pG2b2f) (char->integer . pG2b2e) (ceiling . pG2b2d) (call-with-values . pG2b2c) (call/cc . pG2b2b) (call-with-current-continuation . pG2b2a) (cddddr . pG2b29) (cdddar . pG2b28) (cddadr . pG2b27) (cddaar . pG2b26) (cdaddr . pG2b25) (cdadar . pG2b24) (cdaadr . pG2b23) (cdaaar . pG2b22) (cadddr . pG2b21) (caddar . pG2b20) (cadadr . pG2b1f) (cadaar . pG2b1e) (caaddr . pG2b1d) (caadar . pG2b1c) (caaadr . pG2b1b) (caaaar . pG2b1a) (cdddr . pG2b19) (cddar . pG2b18) (cdadr . pG2b17) (cdaar . pG2b16) (caddr . pG2b15) (cadar . pG2b14) (caadr . pG2b13) (caaar . pG2b12) (cddr . pG2b11) (cdar . pG2b10) (cadr . pG2b0f) (caar . pG2b0e) (cdr . pG2b0d) (car . pG2b0c) (boolean? . pG2b0b) (boolean=? . pG2b0a) (atan . pG2b09) (assertion-violation . pG2b08) (assertion-error . pGe6b) (asin . pG2b07) (apply . pG2b06) (append . pG2b05) (angle . pG2b04) (acos . pG2b03) (abs . pG2b02) (/ . pG2b01) (* . pG2b00) (- . pG2aff) (+ . pG2afe) (>= . pG2afd) (> . pG2afc) (= . pG2afb) (<= . pG2afa) (< . pG2af9) (library . pG2af8) (&no-nans . pG2af7) (&no-infinities . pG2af6) (&i/o-encoding . pG2af5) (&i/o-decoding . pG2af4) (&i/o-port . pG2af3) (&i/o-file-does-not-exist . pG2af2) (&i/o-file-already-exists . pG2af1) (&i/o-file-is-read-only . pG2af0) (&i/o-file-protection . pG2aef) (&i/o-filename . pG2aee) (&i/o-invalid-position . pG2aed) (&i/o-write . pG2aec) (&i/o-read . pG2aeb) (&i/o . pG2aea) (&undefined . pG2ae9) (&syntax . pG2ae8) (&lexical . pG2ae7) (&implementation-restriction . pG2ae6) (&non-continuable . pG2ae5) (&who . pG2ae4) (&irritants . pG2ae3) (&assertion . pG2ae2) (&violation . pG2ae1) (&error . pG2ae0) (&serious . pG2adf) (&warning . pG2ade) (&message . pG2add) (&condition . pG2adc) (define-condition-type . pG2adb) (define-enumeration . pG2ada) (define-record-type . pG2ad9) (parent-rtd . pG2ad8) (nongenerative . pG2ad7) (opaque . pG2ad6) (sealed . pG2ad5) (protocol . pG2ad4) (parent . pG2ad3) (immutable . pG2ad2) (mutable . pG2ad1) (fields . pG2ad0) (error-handling-mode . pG2acf) (file-options . pG2ace) (buffer-mode . pG2acd) (eol-style . pG2acc) (guard . pG2acb) (trace-define . pG2aca) (trace-lambda . pG2ac9) (unsyntax-splicing . pG2ac8) (unsyntax . pG2ac7) (unquote-splicing . pG2ac6) (unquote . pG2ac5) (_ . pG2ac4) (else . pG2ac3) (=> . pG2ac2) (... . pG2ac1) (assert . pG2ac0) (endianness . pG2abf) (delay . pG2abe) (time . pG2abd) (do . pG2abc) (cond . pG2abb) (let* . pG2aba) (let*-values . pG2ab9) (let-values . pG2ab8) (identifier-syntax . pG2ab7) (with-syntax . pG2ab6) (quasisyntax . pG2ab5) (quasiquote . pG2ab4) (syntax-rules . pG2ab3) (include . pG2ab2) (define-struct . pG2ab1) (record-constructor-descriptor . pG2ab0) (record-type-descriptor . pG2aaf) (case . pG2aae) (parameterize . pG2aad) (unless . pG2aac) (when . pG2aab) (or . pG2aaa) (and . pG2aa9) (if . pG2aa8) (let . pG2aa7) (letrec* . pG2aa6) (letrec . pG2aa5) (type-descriptor . pG2aa4) (case-lambda . pG2aa3) (lambda . pG2aa2) (syntax . pG2aa1) (syntax-case . pG2aa0) (quote . pG2a9f) (foreign-call . pG2a9e) (letrec-syntax . pG2a9d) (let-syntax . pG2a9c) (set! . pG2a9b) (import . pG2a9a) (begin . pG2a99) (module . pG2a98) (define-syntax . pG2a97) (define . pG2a96)) '((pG2e4f core-prim . &no-nans-rcd) (pG2e4e core-prim . &no-nans-rtd) (pG2e4d core-prim . &no-infinities-rcd) (pG2e4c core-prim . &no-infinities-rtd) (pG2e4b core-prim . &i/o-encoding-rcd) (pG2e4a core-prim . &i/o-encoding-rtd) (pG2e49 core-prim . &i/o-decoding-rcd) (pG2e48 core-prim . &i/o-decoding-rtd) (pG2e47 core-prim . &i/o-port-rcd) (pG2e46 core-prim . &i/o-port-rtd) (pG2e45 core-prim . &i/o-file-does-not-exist-rcd) (pG2e44 core-prim . &i/o-file-does-not-exist-rtd) (pG2e43 core-prim . &i/o-file-already-exists-rcd) (pG2e42 core-prim . &i/o-file-already-exists-rtd) (pG2e41 core-prim . &i/o-file-is-read-only-rcd) (pG2e40 core-prim . &i/o-file-is-read-only-rtd) (pG2e3f core-prim . &i/o-file-protection-rcd) (pG2e3e core-prim . &i/o-file-protection-rtd) (pG2e3d core-prim . &i/o-filename-rcd) (pG2e3c core-prim . &i/o-filename-rtd) (pG2e3b core-prim . &i/o-invalid-position-rcd) (pG2e3a core-prim . &i/o-invalid-position-rtd) (pG2e39 core-prim . &i/o-write-rcd) (pG2e38 core-prim . &i/o-write-rtd) (pG2e37 core-prim . &i/o-read-rcd) (pG2e36 core-prim . &i/o-read-rtd) (pG2e35 core-prim . &i/o-rcd) (pG2e34 core-prim . &i/o-rtd) (pG2e33 core-prim . &undefined-rcd) (pG2e32 core-prim . &undefined-rtd) (pG2e31 core-prim . &syntax-rcd) (pG2e30 core-prim . &syntax-rtd) (pG2e2f core-prim . &lexical-rcd) (pG2e2e core-prim . &lexical-rtd) (pG2e2d core-prim . &implementation-restriction-rcd) (pG2e2c core-prim . &implementation-restriction-rtd) (pG2e2b core-prim . &non-continuable-rcd) (pG2e2a core-prim . &non-continuable-rtd) (pG2e29 core-prim . &who-rcd) (pG2e28 core-prim . &who-rtd) (pG2e27 core-prim . &irritants-rcd) (pG2e26 core-prim . &irritants-rtd) (pG2e25 core-prim . &assertion-rcd) (pG2e24 core-prim . &assertion-rtd) (pG2e23 core-prim . &violation-rcd) (pG2e22 core-prim . &violation-rtd) (pG2e21 core-prim . &error-rcd) (pG2e20 core-prim . &error-rtd) (pG2e1f core-prim . &serious-rcd) (pG2e1e core-prim . &serious-rtd) (pG2e1d core-prim . &warning-rcd) (pG2e1c core-prim . &warning-rtd) (pG2e1b core-prim . &message-rcd) (pG2e1a core-prim . &message-rtd) (pG2e19 core-prim . &condition-rcd) (pG2e18 core-prim . &condition-rtd) (pGe6d core-prim . syntax-error) (pGd91 core-prim . syntax-dispatch) (pG2e17 core-prim . pretty-print) (pG2e16 core-prim . eval-core) (pG2e15 core-prim . set-symbol-value!) (pG2e14 core-prim . symbol-value) (pG2e13 core-prim . gensym) (pG2e12 core-prim . void) (pG2930 core-prim . load) (pGe7f core-prim . interaction-environment) (pG2e11 core-prim . char-ready?) (pG2e10 core-prim . regexp?) (pG2e0f core-prim . read-line) (pG2e0e core-prim . gensym-prefix-set!) (pG2e0d core-prim . ungensym) (pG2e0c core-prim . alist->eq-hash-table) (pG2e0b core-prim . assoc-ref) (pG2e0a core-prim . print) (pG2e09 core-prim . format) (pG2e08 core-prim . host-os) (pG7d0 core-prim . library-path) (pG2e07 core-prim . standard-library-path) (pG2e06 core-prim . ssl-supported?) (pG2e05 core-prim . ssl-socket?) (pG2e04 core-prim . socket-sslize!) (pG2e03 core-prim . %monapi-stream-read) (pG2e02 core-prim . %monapi-stream-write) (pG2e01 core-prim . %monapi-stream-handle) (pG2e00 core-prim . %monapi-make-stream) (pG2dff core-prim . %monapi-name-add!) (pG2dfe core-prim . %monapi-message-receive) (pG2dfd core-prim . %monapi-name-whereis) (pG2dfc core-prim . %monapi-message-reply) (pG2dfb core-prim . %monapi-message-send-receive) (pG2dfa core-prim . %monapi-message-send) (pG2df9 core-prim . process-terminate!) (pG2df8 core-prim . process-list) (pG2df7 core-prim . file-newer?) (pG2df6 core-prim . stat-mtime) (pG2df5 core-prim . write-to-file) (pG2df4 core-prim . file->list) (pG2df3 core-prim . file->string) (pG2df2 core-prim . digit->integer) (pG2df1 core-prim . call-with-string-input-port) (pG2df0 core-prim . call-with-string-io) (pG2def core-prim . string-split) (pG2dee core-prim . bytevector-for-each) (pG2ded core-prim . string->regexp) (pG2dec core-prim . rxmatch) (pG2deb core-prim . regexp-replace-all) (pG2dea core-prim . hashtable-fold-left) (pG2de9 core-prim . hashtable-for-each) (pG5ba core-prim . mosh-cache-dir) (pG2de8 core-prim . %start-process) (pG2de7 core-prim . %call-process) (pG2de6 core-prim . local-tz-offset) (pG2de5 core-prim . microseconds) (pG2de4 core-prim . directory-list) (pG2de3 core-prim . set-current-directory!) (pG2de2 core-prim . expand-path) (pG2de1 core-prim . current-directory) (pG2de0 core-prim . %getpid) (pG2ddf core-prim . %waitpid) (pG2dde core-prim . simple-struct-name) (pG2ddd core-prim . simple-struct-set!) (pG2ddc core-prim . simple-struct-ref) (pG2ddb core-prim . make-simple-struct) (pG2dda core-prim . simple-struct?) (pG2dd9 core-prim . pointer-ref-c-int64) (pG2dd8 core-prim . pointer-ref-c-int32) (pG2dd7 core-prim . pointer-ref-c-int16) (pG2dd6 core-prim . pointer-ref-c-int8) (pG2dd5 core-prim . pointer-ref-c-uint64) (pG2dd4 core-prim . pointer-ref-c-uint32) (pG2dd3 core-prim . pointer-ref-c-uint16) (pG2dd2 core-prim . pointer-ref-c-uint8) (pG2dd1 core-prim . pointer-set-c-uint64!) (pG2dd0 core-prim . pointer-set-c-uint32!) (pG2dcf core-prim . pointer-set-c-uint16!) (pG2dce core-prim . pointer-set-c-uint8!) (pG2dcd core-prim . pointer-set-c-int64!) (pG2dcc core-prim . pointer-set-c-int32!) (pG2dcb core-prim . pointer-set-c-int16!) (pG2dca core-prim . pointer-set-c-int8!) (pG2dc9 core-prim . pointer-set-c-pointer!) (pG2dc8 core-prim . pointer-set-c-double!) (pG2dc7 core-prim . pointer-set-c-float!) (pG2dc6 core-prim . pointer-set-c-long-long!) (pG2dc5 core-prim . pointer-set-c-long!) (pG2dc4 core-prim . pointer-set-c-int!) (pG2dc3 core-prim . pointer-set-c-short!) (pG2dc2 core-prim . pointer-set-c-char!) (pG2dc1 core-prim . pointer-ref-c-pointer) (pG2dc0 core-prim . pointer-ref-c-double) (pG2dbf core-prim . pointer-ref-c-float) (pG2dbe core-prim . pointer-ref-c-unsigned-long-long) (pG2dbd core-prim . pointer-ref-c-signed-long-long) (pG2dbc core-prim . pointer-ref-c-unsigned-long) (pG2dbb core-prim . pointer-ref-c-signed-long) (pG2dba core-prim . pointer-ref-c-unsigned-int) (pG2db9 core-prim . pointer-ref-c-signed-int) (pG2db8 core-prim . pointer-ref-c-unsigned-short) (pG2db7 core-prim . pointer-ref-c-signed-short) (pG2db6 core-prim . pointer-ref-c-unsigned-char) (pG2db5 core-prim . pointer-ref-c-signed-char) (pG2db4 core-prim . pointer->integer) (pG2db3 core-prim . integer->pointer) (pG2db2 core-prim . pointer?) (pG2db1 core-prim . shared-errno) (pG2db0 core-prim . %ffi-error) (pG2daf core-prim . %ffi-close) (pG2dae core-prim . %ffi-free-c-callback-trampoline) (pG2dad core-prim . %ffi-make-c-callback-trampoline) (pG2dac core-prim . %ffi-free) (pG2dab core-prim . %ffi-malloc) (pG2daa core-prim . %ffi-supported?) (pG2da9 core-prim . %ffi-pointer->string) (pG2da8 core-prim . %ffi-call) (pG2da7 core-prim . %ffi-lookup) (pG2da6 core-prim . %ffi-open) (pG2da5 core-prim . null-terminated-utf8->string) (pG2da4 core-prim . null-terminated-bytevector->string) (pG2da3 core-prim . %exec) (pG2da2 core-prim . %fork) (pG2da1 core-prim . %pipe) (pG2da0 core-prim . %confstr) (pG2d9f core-prim . %dup) (pG2d9e core-prim . p) (pG2d9d core-prim . open-output-string) (pG2d9c core-prim . get-output-string) (pG2d9b core-prim . file-stat-ctime) (pG2d9a core-prim . file-stat-atime) (pG2d99 core-prim . file-stat-mtime) (pG2d98 core-prim . file-size-in-bytes) (pG2d97 core-prim . file-writable?) (pG2d96 core-prim . file-executable?) (pG2d95 core-prim . file-readable?) (pG2d94 core-prim . file-regular?) (pG2d93 core-prim . file-symbolic-link?) (pG2d92 core-prim . file-directory?) (pG2d91 core-prim . create-symbolic-link) (pG2d90 core-prim . rename-file) (pG2d8f core-prim . delete-directory) (pG2d8e core-prim . create-directory) (pG2d8d core-prim . create-mosh-cache-dir) (pG2d8c core-prim . get-environment-variables) (pG2d8b core-prim . current-exception-handler) (pG2d8a core-prim . get-environment-variable) (pG2d89 core-prim . join-wraps) (pG2d88 core-prim . id->real-label) (pG2d87 core-prim . same-marks?) (pG2d86 core-prim . same-marks*?) (pG2d85 core-prim . get-timeofday) (pG2d84 core-prim . get-command-line) (pG2d83 core-prim . sys-display) (pG2d82 core-prim . whereis) (pG2d81 core-prim . register) (pG2d80 core-prim . vm-join!) (pG2d7f core-prim . vm-set-value!) (pG2d7e core-prim . vm?) (pG2d7d core-prim . main-vm?) (pG2d7c core-prim . vm-eval) (pG2d7b core-prim . vm-self) (pG2d7a core-prim . vm-start!) (pG2d79 core-prim . make-vm) (pG2d78 core-prim . mutex-try-lock!) (pG2d77 core-prim . mutex-unlock!) (pG2d76 core-prim . mutex-lock!) (pG2d75 core-prim . mutex?) (pG2d74 core-prim . make-mutex) (pG2d73 core-prim . condition-variable-notify-all!) (pG2d72 core-prim . condition-variable-notify!) (pG2d71 core-prim . condition-variable-wait!) (pG2d70 core-prim . make-condition-variable) (pG2d6f core-prim . write/ss) (pG2d6e core-prim . mosh-executable-path) (pG2d6d core-prim . make-file-options) (pG2d6c core-prim . source-info) (pG2d6b core-prim . make-compiler-instruction) (pG2d6a core-prim . make-instruction) (pG2d69 core-prim . set-annotation!) (pG2d68 core-prim . get-annotation) (pG2d67 core-prim . annotated-pair?) (pG2d66 core-prim . annotated-cons) (pG2d65 core-prim . set-source-info!) (pG2d64 core-prim . bignum?) (pG2d63 core-prim . fast-equal?) (pG2d62 core-prim . fasl-read) (pG2d61 core-prim . fasl-write) (pG2d60 core-prim . time-usage) (pG2d5f core-prim . os-constant) (pG2d5e core-prim . condition-printer) (pG2d5d core-prim . disasm) (pG5b8 core-prim . make-parameter) (pG2d5c core-prim . socket-port) (pG2d5b core-prim . socket-shutdown) (pG2d5a core-prim . socket-close) (pG2d59 core-prim . socket-send) (pG2d58 core-prim . socket-recv!) (pG2d57 core-prim . socket-recv) (pG2d56 core-prim . make-server-socket) (pG2d55 core-prim . make-client-socket) (pG2d54 core-prim . socket-accept) (pG2d53 core-prim . socket?) (pG2d52 core-prim . string-upcase) (pG2d51 core-prim . string-titlecase) (pG2d50 core-prim . string-normalize-nfkd) (pG2d4f core-prim . string-normalize-nfkc) (pG2d4e core-prim . string-normalize-nfd) (pG2d4d core-prim . string-normalize-nfc) (pG2d4c core-prim . string-foldcase) (pG2d4b core-prim . string-downcase) (pG2d4a core-prim . string-ci>?) (pG2d49 core-prim . string-ci>=?) (pG2d48 core-prim . string-ci=?) (pG2d47 core-prim . string-ci<?) (pG2d46 core-prim . string-ci<=?) (pG2d45 core-prim . char-whitespace?) (pG2d44 core-prim . char-upper-case?) (pG2d43 core-prim . char-title-case?) (pG2d42 core-prim . char-numeric?) (pG2d41 core-prim . char-lower-case?) (pG2d40 core-prim . char-general-category) (pG2d3f core-prim . char-upcase) (pG2d3e core-prim . char-titlecase) (pG2d3d core-prim . char-foldcase) (pG2d3c core-prim . char-downcase) (pG2d3b core-prim . char-ci>?) (pG2d3a core-prim . char-ci>=?) (pG2d39 core-prim . char-ci=?) (pG2d38 core-prim . char-ci<?) (pG2d37 core-prim . char-ci<=?) (pG2d36 core-prim . char-alphabetic?) (pGbbc core-prim . make-variable-transformer) (pGe73 core-prim . identifier?) (pGe5f core-prim . generate-temporaries) (pGe61 core-prim . free-identifier=?) (pGe77 core-prim . syntax->datum) (pGe75 core-prim . datum->syntax) (pGe63 core-prim . bound-identifier=?) (pG2d35 core-prim . record-type-descriptor?) (pG2d34 core-prim . record-predicate) (pG2d33 core-prim . record-mutator) (pG2d32 core-prim . record-constructor) (pG2d31 core-prim . record-accessor) (pG2d30 core-prim . make-record-type-descriptor) (pG2d2f core-prim . make-record-constructor-descriptor) (pG2d2e core-prim . record?) (pG2d2d core-prim . record-type-uid) (pG2d2c core-prim . record-type-sealed?) (pG2d2b core-prim . record-type-parent) (pG2d2a core-prim . record-type-opaque?) (pG2d29 core-prim . record-type-name) (pG2d28 core-prim . record-type-generative?) (pG2d27 core-prim . record-type-field-names) (pG2d26 core-prim . record-rtd) (pG2d25 core-prim . record-field-mutable?) (pG2d24 core-prim . delete-file) (pG2d23 core-prim . file-exists?) (pG2d22 core-prim . vector-sort!) (pG2d21 core-prim . vector-sort) (pG2d20 core-prim . list-sort) (pG2d1f core-prim . symbol-hash) (pG2d1e core-prim . string-ci-hash) (pG2d1d core-prim . string-hash) (pG2d1c core-prim . equal-hash) (pG2d1b core-prim . hashtable-equivalence-function) (pG2d1a core-prim . make-hashtable) (pG2d19 core-prim . hashtable-hash-function) (pG2d18 core-prim . make-eqv-hashtable) (pG2d17 core-prim . make-eq-hashtable) (pG2d16 core-prim . hashtable?) (pG2d15 core-prim . hashtable-update!) (pG2d14 core-prim . hashtable-size) (pG2d13 core-prim . hashtable-set!) (pG2d12 core-prim . hashtable-ref) (pG2d11 core-prim . hashtable-mutable?) (pG2d10 core-prim . hashtable-keys) (pG2d0f core-prim . hashtable-entries) (pG2d0e core-prim . hashtable-delete!) (pG2d0d core-prim . hashtable-copy) (pG2d0c core-prim . hashtable-contains?) (pG2d0b core-prim . hashtable-clear!) (pG2d0a core-prim . call-with-output-file) (pG2d09 core-prim . call-with-input-file) (pG2d08 core-prim . write-char) (pG2d07 core-prim . write) (pG2d06 core-prim . with-output-to-file) (pG2d05 core-prim . with-input-from-file) (pG2d04 core-prim . read-char) (pG2d03 core-prim . read) (pG2d02 core-prim . peek-char) (pG2d01 core-prim . open-output-file) (pG2d00 core-prim . open-input-file) (pG2cff core-prim . newline) (pG2cfe core-prim . display) (pG2cfd core-prim . close-output-port) (pG2cfc core-prim . close-input-port) (pG2cfb core-prim . eof-object?) (pG2cfa core-prim . eof-object) (pG2cf9 core-prim . current-error-port) (pG2cf8 core-prim . current-output-port) (pG2cf7 core-prim . current-input-port) (pG2cf6 core-prim . output-port?) (pG2cf5 core-prim . input-port?) (pG2cf4 core-prim . utf-8-codec) (pG2cf3 core-prim . utf-16-codec) (pG2cf2 core-prim . transcoder-error-handling-mode) (pG2cf1 core-prim . transcoder-eol-style) (pG2cf0 core-prim . transcoder-codec) (pG2cef core-prim . transcoded-port) (pG2cee core-prim . textual-port?) (pG2ced core-prim . string->bytevector) (pG2cec core-prim . standard-output-port) (pG2ceb core-prim . standard-input-port) (pG2cea core-prim . standard-error-port) (pG2ce9 core-prim . set-port-position!) (pG2ce8 core-prim . put-u8) (pG2ce7 core-prim . put-string) (pG2ce6 core-prim . put-datum) (pG2ce5 core-prim . put-char) (pG2ce4 core-prim . put-bytevector) (pG2ce3 core-prim . port?) (pG2ce2 core-prim . port-transcoder) (pG2ce1 core-prim . port-position) (pG2ce0 core-prim . port-has-set-port-position!?) (pG2cdf core-prim . port-has-port-position?) (pG2cde core-prim . port-eof?) (pG2cdd core-prim . output-port-buffer-mode) (pG2cdc core-prim . open-string-output-port) (pG2cdb core-prim . open-string-input-port) (pG2cda core-prim . open-file-output-port) (pG2cd9 core-prim . open-file-input/output-port) (pG2cd8 core-prim . open-file-input-port) (pG2cd7 core-prim . open-bytevector-output-port) (pG2cd6 core-prim . open-bytevector-input-port) (pG2cd5 core-prim . native-transcoder) (pG2cd4 core-prim . native-eol-style) (pG2cd3 core-prim . make-transcoder) (pG2cd2 core-prim . latin-1-codec) (pG2cd1 core-prim . make-i/o-write-error) (pG2cd0 core-prim . make-i/o-read-error) (pG2ccf core-prim . make-i/o-port-error) (pG2cce core-prim . make-i/o-invalid-position-error) (pG2ccd core-prim . make-i/o-filename-error) (pG2ccc core-prim . make-i/o-file-protection-error) (pG2ccb core-prim . make-i/o-file-is-read-only-error) (pG2cca core-prim . make-i/o-file-does-not-exist-error) (pG2cc9 core-prim . make-i/o-file-already-exists-error) (pG2cc8 core-prim . make-i/o-error) (pG2cc7 core-prim . make-i/o-encoding-error) (pG2cc6 core-prim . make-i/o-decoding-error) (pG2cc5 core-prim . make-custom-textual-output-port) (pG2cc4 core-prim . make-custom-textual-input/output-port) (pG2cc3 core-prim . make-custom-textual-input-port) (pG2cc2 core-prim . make-custom-binary-output-port) (pG2cc1 core-prim . make-custom-binary-input/output-port) (pG2cc0 core-prim . make-custom-binary-input-port) (pG2cbf core-prim . make-bytevector) (pG2cbe core-prim . lookahead-u8) (pG2cbd core-prim . lookahead-char) (pG2cbc core-prim . i/o-write-error?) (pG2cbb core-prim . i/o-read-error?) (pG2cba core-prim . i/o-port-error?) (pG2cb9 core-prim . i/o-invalid-position-error?) (pG2cb8 core-prim . i/o-filename-error?) (pG2cb7 core-prim . i/o-file-protection-error?) (pG2cb6 core-prim . i/o-file-is-read-only-error?) (pG2cb5 core-prim . i/o-file-does-not-exist-error?) (pG2cb4 core-prim . i/o-file-already-exists-error?) (pG2cb3 core-prim . i/o-error?) (pG2cb2 core-prim . i/o-error-position) (pG2cb1 core-prim . i/o-error-port) (pG2cb0 core-prim . i/o-error-filename) (pG2caf core-prim . i/o-encoding-error?) (pG2cae core-prim . i/o-encoding-error-char) (pG2cad core-prim . i/o-decoding-error?) (pG2cac core-prim . get-u8) (pG2cab core-prim . get-string-n!) (pG2caa core-prim . get-string-n) (pG2ca9 core-prim . get-string-all) (pG2ca8 core-prim . get-line) (pG2ca7 core-prim . get-datum) (pG2ca6 core-prim . get-char) (pG2ca5 core-prim . get-bytevector-some) (pG2ca4 core-prim . get-bytevector-n!) (pG2ca3 core-prim . get-bytevector-n) (pG2ca2 core-prim . get-bytevector-all) (pG2ca1 core-prim . flush-output-port) (pG2ca0 core-prim . close-port) (pGe4d core-prim . scheme-report-environment) (pG2c9f core-prim . quotient) (pGe4b core-prim . null-environment) (pG2c9e core-prim . remainder) (pG2c9d core-prim . modulo) (pG2c9c core-prim . inexact->exact) (pG2c9b core-prim . force) (pG2c9a core-prim . exact->inexact) (pG2c99 core-prim . make-promise) (pG2c98 core-prim . exit) (pG292a core-prim . command-line) (pG2c97 core-prim . string-fill!) (pG2c96 core-prim . string-set!) (pG2c95 core-prim . set-cdr!) (pG2c94 core-prim . set-car!) (pG2c93 core-prim . remove) (pG2c92 core-prim . remv) (pG2c91 core-prim . remp) (pG2c90 core-prim . remq) (pG2c8f core-prim . partition) (pG2c8e core-prim . memv) (pG2c8d core-prim . memq) (pG2c8c core-prim . memp) (pG2c8b core-prim . member) (pG2c8a core-prim . exists) (pG2c89 core-prim . for-all) (pG2c88 core-prim . fold-right) (pG2c87 core-prim . fold-left) (pG2c86 core-prim . find) (pG2c85 core-prim . filter) (pG2c84 core-prim . cons*) (pG2c83 core-prim . assv) (pG2c82 core-prim . assq) (pG2c81 core-prim . assp) (pG2c80 core-prim . assoc) (pG2c7f core-prim . call-with-string-output-port) (pG2c7e core-prim . call-with-port) (pG2c7d core-prim . call-with-bytevector-output-port) (pG2c7c core-prim . bytevector->string) (pG2c7b core-prim . buffer-mode?) (pG2c7a core-prim . binary-port?) (pG2c79 core-prim . with-exception-handler) (pG2c78 core-prim . raise-continuable) (pG2c77 core-prim . raise) (pGe51 core-prim . eval) (pGe49 core-prim . environment) (pG2c76 core-prim . make-enumeration) (pG2c75 core-prim . enum-set=?) (pG2c74 core-prim . enum-set-universe) (pG2c73 core-prim . enum-set-union) (pG2c72 core-prim . enum-set-subset?) (pG2c71 core-prim . enum-set-projection) (pG2c70 core-prim . enum-set-member?) (pG2c6f core-prim . enum-set-intersection) (pG2c6e core-prim . enum-set-indexer) (pG2c6d core-prim . enum-set-difference) (pG2c6c core-prim . enum-set-constructor) (pG2c6b core-prim . enum-set-complement) (pG2c6a core-prim . enum-set->list) (pG2c69 core-prim . who-condition?) (pG2c68 core-prim . warning?) (pG2c67 core-prim . violation?) (pG2c66 core-prim . undefined-violation?) (pG2c65 core-prim . syntax-violation?) (pG2c64 core-prim . syntax-violation-subform) (pG2c63 core-prim . syntax-violation-form) (pGe71 core-prim . syntax-violation) (pG2c62 core-prim . simple-conditions) (pG2c61 core-prim . serious-condition?) (pG2c60 core-prim . non-continuable-violation?) (pG2c5f core-prim . message-condition?) (pG2c5e core-prim . make-who-condition) (pG2c5d core-prim . make-warning) (pG2c5c core-prim . make-violation) (pG2c5b core-prim . make-undefined-violation) (pG2c5a core-prim . make-syntax-violation) (pG2c59 core-prim . make-serious-condition) (pG2c58 core-prim . make-non-continuable-violation) (pG2c57 core-prim . make-message-condition) (pG2c56 core-prim . make-lexical-violation) (pG2c55 core-prim . make-irritants-condition) (pG2c54 core-prim . make-implementation-restriction-violation) (pG2c53 core-prim . make-error) (pG2c52 core-prim . make-assertion-violation) (pG2c51 core-prim . lexical-violation?) (pG2c50 core-prim . irritants-condition?) (pG2c4f core-prim . implementation-restriction-violation?) (pG2c4e core-prim . error?) (pG2c4d core-prim . condition-who) (pG2c4c core-prim . condition-predicate) (pG2c4b core-prim . condition-message) (pG2c4a core-prim . condition-irritants) (pG2c49 core-prim . condition-accessor) (pG2c48 core-prim . condition) (pG2c47 core-prim . assertion-violation?) (pG2c46 core-prim . condition?) (pG2c45 core-prim . utf32->string) (pG2c44 core-prim . utf16->string) (pG2c43 core-prim . utf8->string) (pG2c42 core-prim . uint-list->bytevector) (pG2c41 core-prim . u8-list->bytevector) (pG2c40 core-prim . string->utf8) (pG2c3f core-prim . string->utf32) (pG2c3e core-prim . string->utf16) (pG2c3d core-prim . sint-list->bytevector) (pG2c3c core-prim . native-endianness) (pG2c3b core-prim . bytevector?) (pG2c3a core-prim . bytevector=?) (pG2c39 core-prim . bytevector-uint-set!) (pG2c38 core-prim . bytevector-uint-ref) (pG2c37 core-prim . bytevector-u8-set!) (pG2c36 core-prim . bytevector-u8-ref) (pG2c35 core-prim . bytevector-u64-set!) (pG2c34 core-prim . bytevector-u64-ref) (pG2c33 core-prim . bytevector-u64-native-set!) (pG2c32 core-prim . bytevector-u64-native-ref) (pG2c31 core-prim . bytevector-u32-set!) (pG2c30 core-prim . bytevector-u32-ref) (pG2c2f core-prim . bytevector-u32-native-set!) (pG2c2e core-prim . bytevector-u32-native-ref) (pG2c2d core-prim . bytevector-u16-set!) (pG2c2c core-prim . bytevector-u16-ref) (pG2c2b core-prim . bytevector-u16-native-set!) (pG2c2a core-prim . bytevector-u16-native-ref) (pG2c29 core-prim . bytevector-sint-set!) (pG2c28 core-prim . bytevector-sint-ref) (pG2c27 core-prim . bytevector-s8-set!) (pG2c26 core-prim . bytevector-s8-ref) (pG2c25 core-prim . bytevector-s64-set!) (pG2c24 core-prim . bytevector-s64-ref) (pG2c23 core-prim . bytevector-s64-native-set!) (pG2c22 core-prim . bytevector-s64-native-ref) (pG2c21 core-prim . bytevector-s32-set!) (pG2c20 core-prim . bytevector-s32-ref) (pG2c1f core-prim . bytevector-s32-native-set!) (pG2c1e core-prim . bytevector-s32-native-ref) (pG2c1d core-prim . bytevector-s16-set!) (pG2c1c core-prim . bytevector-s16-ref) (pG2c1b core-prim . bytevector-s16-native-set!) (pG2c1a core-prim . bytevector-s16-native-ref) (pG2c19 core-prim . bytevector-length) (pG2c18 core-prim . bytevector-ieee-single-ref) (pG2c17 core-prim . bytevector-ieee-single-set!) (pG2c16 core-prim . bytevector-ieee-single-native-set!) (pG2c15 core-prim . bytevector-ieee-single-native-ref) (pG2c14 core-prim . bytevector-ieee-double-set!) (pG2c13 core-prim . bytevector-ieee-double-ref) (pG2c12 core-prim . bytevector-ieee-double-native-set!) (pG2c11 core-prim . bytevector-ieee-double-native-ref) (pG2c10 core-prim . bytevector-fill!) (pG2c0f core-prim . bytevector-copy!) (pG2c0e core-prim . bytevector-copy) (pG2c0d core-prim . bytevector->uint-list) (pG2c0c core-prim . bytevector->u8-list) (pG2c0b core-prim . bytevector->sint-list) (pG2c0a core-prim . no-nans-violation?) (pG2c09 core-prim . no-infinities-violation?) (pG2c08 core-prim . make-no-nans-violation) (pG2c07 core-prim . make-no-infinities-violation) (pG2c06 core-prim . real->flonum) (pG2c05 core-prim . flzero?) (pG2c04 core-prim . fltruncate) (pG2c03 core-prim . fltan) (pG2c02 core-prim . flsqrt) (pG2c01 core-prim . flsin) (pG2c00 core-prim . flround) (pG2bff core-prim . flpositive?) (pG2bfe core-prim . flonum?) (pG2bfd core-prim . flodd?) (pG2bfc core-prim . flnumerator) (pG2bfb core-prim . flnegative?) (pG2bfa core-prim . flnan?) (pG2bf9 core-prim . flmod0) (pG2bf8 core-prim . flmod) (pG2bf7 core-prim . flmin) (pG2bf6 core-prim . flmax) (pG2bf5 core-prim . fllog) (pG2bf4 core-prim . flinteger?) (pG2bf3 core-prim . flinfinite?) (pG2bf2 core-prim . flfloor) (pG2bf1 core-prim . flfinite?) (pG2bf0 core-prim . flexpt) (pG2bef core-prim . flexp) (pG2bee core-prim . fleven?) (pG2bed core-prim . fldiv0-and-mod0) (pG2bec core-prim . fldiv0) (pG2beb core-prim . fldiv-and-mod) (pG2bea core-prim . fldiv) (pG2be9 core-prim . fldenominator) (pG2be8 core-prim . flcos) (pG2be7 core-prim . flceiling) (pG2be6 core-prim . flatan) (pG2be5 core-prim . flasin) (pG2be4 core-prim . flacos) (pG2be3 core-prim . flabs) (pG2be2 core-prim . fl>?) (pG2be1 core-prim . fl>=?) (pG2be0 core-prim . fl=?) (pG2bdf core-prim . fl<?) (pG2bde core-prim . fl<=?) (pG2bdd core-prim . fl/) (pG2bdc core-prim . fl-) (pG2bdb core-prim . fl+) (pG2bda core-prim . fl*) (pG2bd9 core-prim . fixnum->flonum) (pG2bd8 core-prim . fxzero?) (pG2bd7 core-prim . fxxor) (pG2bd6 core-prim . fxrotate-bit-field) (pG2bd5 core-prim . fxreverse-bit-field) (pG2bd4 core-prim . fxpositive?) (pG2bd3 core-prim . fxodd?) (pG2bd2 core-prim . fxnot) (pG2bd1 core-prim . fxnegative?) (pG2bd0 core-prim . fxmod0) (pG2bcf core-prim . fxmod) (pG2bce core-prim . fxmin) (pG2bcd core-prim . fxmax) (pG2bcc core-prim . fxlength) (pG2bcb core-prim . fxior) (pG2bca core-prim . fxif) (pG2bc9 core-prim . fxfirst-bit-set) (pG2bc8 core-prim . fxeven?) (pG2bc7 core-prim . fxdiv0-and-mod0) (pG2bc6 core-prim . fxdiv0) (pG2bc5 core-prim . fxdiv-and-mod) (pG2bc4 core-prim . fxdiv) (pG2bc3 core-prim . fxcopy-bit-field) (pG2bc2 core-prim . fxcopy-bit) (pG2bc1 core-prim . fxbit-set?) (pG2bc0 core-prim . fxbit-field) (pG2bbf core-prim . fxbit-count) (pG2bbe core-prim . fxarithmetic-shift-right) (pG2bbd core-prim . fxarithmetic-shift-left) (pG2bbc core-prim . fxarithmetic-shift) (pG2bbb core-prim . fxand) (pG2bba core-prim . fx>?) (pG2bb9 core-prim . fx>=?) (pG2bb8 core-prim . fx=?) (pG2bb7 core-prim . fx<?) (pG2bb6 core-prim . fx<=?) (pG2bb5 core-prim . fx-/carry) (pG2bb4 core-prim . fx-) (pG2bb3 core-prim . fx+/carry) (pG2bb2 core-prim . fx+) (pG2bb1 core-prim . fx*/carry) (pG2bb0 core-prim . fx*) (pG2baf core-prim . greatest-fixnum) (pG2bae core-prim . least-fixnum) (pG2bad core-prim . fixnum-width) (pG2bac core-prim . fixnum?) (pG2bab core-prim . bitwise-rotate-bit-field) (pG2baa core-prim . bitwise-reverse-bit-field) (pG2ba9 core-prim . bitwise-length) (pG2ba8 core-prim . bitwise-if) (pG2ba7 core-prim . bitwise-first-bit-set) (pG2ba6 core-prim . bitwise-copy-bit-field) (pG2ba5 core-prim . bitwise-copy-bit) (pG2ba4 core-prim . bitwise-bit-set?) (pG2ba3 core-prim . bitwise-bit-field) (pG2ba2 core-prim . bitwise-bit-count) (pG2ba1 core-prim . bitwise-xor) (pG2ba0 core-prim . bitwise-ior) (pG2b9f core-prim . bitwise-and) (pG2b9e core-prim . bitwise-not) (pG2b9d core-prim . bitwise-arithmetic-shift-right) (pG2b9c core-prim . bitwise-arithmetic-shift-left) (pG2b9b core-prim . bitwise-arithmetic-shift) (pG2b9a core-prim . zero?) (pG2b99 core-prim . vector?) (pG2b98 core-prim . vector-set!) (pG2b97 core-prim . vector-ref) (pG2b96 core-prim . vector-map) (pG2b95 core-prim . vector-length) (pG2b94 core-prim . vector-for-each) (pG2b93 core-prim . vector-fill!) (pG2b92 core-prim . vector->list) (pG2b91 core-prim . vector) (pG2b90 core-prim . values) (pG2b8f core-prim . truncate) (pG2b8e core-prim . tan) (pG2b8d core-prim . symbol?) (pG2b8c core-prim . symbol=?) (pG2b8b core-prim . symbol->string) (pG2b8a core-prim . substring) (pG2b89 core-prim . string?) (pG2b88 core-prim . string>?) (pG2b87 core-prim . string>=?) (pG2b86 core-prim . string=?) (pG2b85 core-prim . string<?) (pG2b84 core-prim . string<=?) (pG2b83 core-prim . string-ref) (pG2b82 core-prim . string-length) (pG2b81 core-prim . string-for-each) (pG2b80 core-prim . string-copy) (pG2b7f core-prim . string-append) (pG2b7e core-prim . string->symbol) (pG2b7d core-prim . string->number) (pG2b7c core-prim . string->list) (pG2b7b core-prim . string) (pG2b7a core-prim . sqrt) (pG2b79 core-prim . sin) (pG2b78 core-prim . round) (pG2b77 core-prim . reverse) (pG2b76 core-prim . real?) (pG2b75 core-prim . real-valued?) (pG2b74 core-prim . real-part) (pG2b73 core-prim . rationalize) (pG2b72 core-prim . rational?) (pG2b71 core-prim . rational-valued?) (pG2b70 core-prim . procedure?) (pG2b6f core-prim . positive?) (pG2b6e core-prim . pair?) (pG2b6d core-prim . odd?) (pG2b6c core-prim . numerator) (pG2b6b core-prim . number?) (pG2b6a core-prim . number->string) (pG2b69 core-prim . null?) (pG2b68 core-prim . not) (pG2b67 core-prim . negative?) (pG2b66 core-prim . nan?) (pG2b65 core-prim . min) (pG2b64 core-prim . max) (pG2b63 core-prim . map) (pG2b62 core-prim . make-vector) (pG2b61 core-prim . make-string) (pG2b60 core-prim . make-rectangular) (pG2b5f core-prim . make-polar) (pG2b5e core-prim . magnitude) (pG2b5d core-prim . log) (pG2b5c core-prim . list?) (pG2b5b core-prim . list-tail) (pG2b5a core-prim . list-ref) (pG2b59 core-prim . list->vector) (pG2b58 core-prim . list->string) (pG2b57 core-prim . list) (pG2b56 core-prim . length) (pG2b55 core-prim . lcm) (pG2b54 core-prim . integer?) (pG2b53 core-prim . integer-valued?) (pG2b52 core-prim . integer->char) (pG2b51 core-prim . infinite?) (pG2b50 core-prim . inexact?) (pG2b4f core-prim . inexact) (pG2b4e core-prim . imag-part) (pG2b4d core-prim . gcd) (pG2b4c core-prim . for-each) (pG2b4b core-prim . floor) (pG2b4a core-prim . finite?) (pG2b49 core-prim . expt) (pG2b48 core-prim . exp) (pG2b47 core-prim . exact?) (pG2b46 core-prim . exact-integer-sqrt) (pG2b45 core-prim . exact) (pG2b44 core-prim . even?) (pG2b43 core-prim . error) (pG2b42 core-prim . eqv?) (pG2b41 core-prim . equal?) (pG2b40 core-prim . eq?) (pG2b3f core-prim . dynamic-wind) (pG2b3e core-prim . div0-and-mod0) (pG2b3d core-prim . mod0) (pG2b3c core-prim . div0) (pG2b3b core-prim . div-and-mod) (pG2b3a core-prim . mod) (pG2b39 core-prim . div) (pG2b38 core-prim . denominator) (pG2b37 core-prim . cos) (pG2b36 core-prim . cons) (pG2b35 core-prim . complex?) (pG2b34 core-prim . char?) (pG2b33 core-prim . char>?) (pG2b32 core-prim . char>=?) (pG2b31 core-prim . char=?) (pG2b30 core-prim . char<?) (pG2b2f core-prim . char<=?) (pG2b2e core-prim . char->integer) (pG2b2d core-prim . ceiling) (pG2b2c core-prim . call-with-values) (pG2b2b core-prim . call/cc) (pG2b2a core-prim . call-with-current-continuation) (pG2b29 core-prim . cddddr) (pG2b28 core-prim . cdddar) (pG2b27 core-prim . cddadr) (pG2b26 core-prim . cddaar) (pG2b25 core-prim . cdaddr) (pG2b24 core-prim . cdadar) (pG2b23 core-prim . cdaadr) (pG2b22 core-prim . cdaaar) (pG2b21 core-prim . cadddr) (pG2b20 core-prim . caddar) (pG2b1f core-prim . cadadr) (pG2b1e core-prim . cadaar) (pG2b1d core-prim . caaddr) (pG2b1c core-prim . caadar) (pG2b1b core-prim . caaadr) (pG2b1a core-prim . caaaar) (pG2b19 core-prim . cdddr) (pG2b18 core-prim . cddar) (pG2b17 core-prim . cdadr) (pG2b16 core-prim . cdaar) (pG2b15 core-prim . caddr) (pG2b14 core-prim . cadar) (pG2b13 core-prim . caadr) (pG2b12 core-prim . caaar) (pG2b11 core-prim . cddr) (pG2b10 core-prim . cdar) (pG2b0f core-prim . cadr) (pG2b0e core-prim . caar) (pG2b0d core-prim . cdr) (pG2b0c core-prim . car) (pG2b0b core-prim . boolean?) (pG2b0a core-prim . boolean=?) (pG2b09 core-prim . atan) (pG2b08 core-prim . assertion-violation) (pGe6b core-prim . assertion-error) (pG2b07 core-prim . asin) (pG2b06 core-prim . apply) (pG2b05 core-prim . append) (pG2b04 core-prim . angle) (pG2b03 core-prim . acos) (pG2b02 core-prim . abs) (pG2b01 core-prim . /) (pG2b00 core-prim . *) (pG2aff core-prim . -) (pG2afe core-prim . +) (pG2afd core-prim . >=) (pG2afc core-prim . >) (pG2afb core-prim . =) (pG2afa core-prim . <=) (pG2af9 core-prim . <) (pG2af8 core-prim . library) (pG2af7 $core-rtd &no-nans-rtd &no-nans-rcd) (pG2af6 $core-rtd &no-infinities-rtd &no-infinities-rcd) (pG2af5 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (pG2af4 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (pG2af3 $core-rtd &i/o-port-rtd &i/o-port-rcd) (pG2af2 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (pG2af1 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (pG2af0 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (pG2aef $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (pG2aee $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (pG2aed $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (pG2aec $core-rtd &i/o-write-rtd &i/o-write-rcd) (pG2aeb $core-rtd &i/o-read-rtd &i/o-read-rcd) (pG2aea $core-rtd &i/o-rtd &i/o-rcd) (pG2ae9 $core-rtd &undefined-rtd &undefined-rcd) (pG2ae8 $core-rtd &syntax-rtd &syntax-rcd) (pG2ae7 $core-rtd &lexical-rtd &lexical-rcd) (pG2ae6 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (pG2ae5 $core-rtd &non-continuable-rtd &non-continuable-rcd) (pG2ae4 $core-rtd &who-rtd &who-rcd) (pG2ae3 $core-rtd &irritants-rtd &irritants-rcd) (pG2ae2 $core-rtd &assertion-rtd &assertion-rcd) (pG2ae1 $core-rtd &violation-rtd &violation-rcd) (pG2ae0 $core-rtd &error-rtd &error-rcd) (pG2adf $core-rtd &serious-rtd &serious-rcd) (pG2ade $core-rtd &warning-rtd &warning-rcd) (pG2add $core-rtd &message-rtd &message-rcd) (pG2adc $core-rtd &condition-rtd &condition-rcd) (pG2adb macro . define-condition-type) (pG2ada macro . define-enumeration) (pG2ad9 macro . define-record-type) (pG2ad8 macro . parent-rtd) (pG2ad7 macro . nongenerative) (pG2ad6 macro . opaque) (pG2ad5 macro . sealed) (pG2ad4 macro . protocol) (pG2ad3 macro . parent) (pG2ad2 macro . immutable) (pG2ad1 macro . mutable) (pG2ad0 macro . fields) (pG2acf macro . error-handling-mode) (pG2ace macro . file-options) (pG2acd macro . buffer-mode) (pG2acc macro . eol-style) (pG2acb macro . guard) (pG2aca macro . trace-define) (pG2ac9 macro . trace-lambda) (pG2ac8 macro . unsyntax-splicing) (pG2ac7 macro . unsyntax) (pG2ac6 macro . unquote-splicing) (pG2ac5 macro . unquote) (pG2ac4 macro . _) (pG2ac3 macro . else) (pG2ac2 macro . =>) (pG2ac1 macro . ...) (pG2ac0 macro . assert) (pG2abf macro . endianness) (pG2abe macro . delay) (pG2abd macro . time) (pG2abc macro . do) (pG2abb macro . cond) (pG2aba macro . let*) (pG2ab9 macro . let*-values) (pG2ab8 macro . let-values) (pG2ab7 macro . identifier-syntax) (pG2ab6 macro . with-syntax) (pG2ab5 macro . quasisyntax) (pG2ab4 macro . quasiquote) (pG2ab3 macro . syntax-rules) (pG2ab2 macro . include) (pG2ab1 macro . define-struct) (pG2ab0 core-macro . record-constructor-descriptor) (pG2aaf core-macro . record-type-descriptor) (pG2aae macro . case) (pG2aad macro . parameterize) (pG2aac macro . unless) (pG2aab macro . when) (pG2aaa core-macro . or) (pG2aa9 core-macro . and) (pG2aa8 core-macro . if) (pG2aa7 core-macro . let) (pG2aa6 core-macro . letrec*) (pG2aa5 core-macro . letrec) (pG2aa4 core-macro . type-descriptor) (pG2aa3 core-macro . case-lambda) (pG2aa2 core-macro . lambda) (pG2aa1 core-macro . syntax) (pG2aa0 core-macro . syntax-case) (pG2a9f core-macro . quote) (pG2a9e core-macro . foreign-call) (pG2a9d letrec-syntax) (pG2a9c let-syntax) (pG2a9b set!) (pG2a9a import) (pG2a99 begin) (pG2a98 module) (pG2a97 define-syntax) (pG2a96 define)) values values '#f '#f '#f '#f) (pG9a5@pG7f1@install-library 'pG2e70 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . pG2e17) (eval-core . pG2e16) (set-symbol-value! . pG2e15) (symbol-value . pG2e14) (gensym . pG2e13) (void . pG2e12)) '() values values '#f '#f '#f '#f) (pG9a5@pG7f1@install-library 'pG2e71 '(mosh) '() '() '() '() '((set-symbol-value! . pG2e15) (symbol-value . pG2e14) (regexp? . pG2e10) (read-line . pG2e0f) (ungensym . pG2e0d) (alist->eq-hash-table . pG2e0c) (assoc-ref . pG2e0b) (print . pG2e0a) (format . pG2e09) (host-os . pG2e08) (library-path . pG7d0) (standard-library-path . pG2e07) (file-newer? . pG2df7) (stat-mtime . pG2df6) (digit->integer . pG2df2) (call-with-string-input-port . pG2df1) (call-with-string-io . pG2df0) (string-split . pG2def) (bytevector-for-each . pG2dee) (string->regexp . pG2ded) (rxmatch . pG2dec) (regexp-replace-all . pG2deb) (hashtable-fold-left . pG2dea) (hashtable-for-each . pG2de9) (set-current-directory! . pG2de3) (expand-path . pG2de2) (current-directory . pG2de1) (p . pG2d9e) (get-timeofday . pG2d85) (get-command-line . pG2d84) (sys-display . pG2d83) (whereis . pG2d82) (register . pG2d81) (vm-join! . pG2d80) (vm-set-value! . pG2d7f) (vm? . pG2d7e) (main-vm? . pG2d7d) (vm-eval . pG2d7c) (vm-self . pG2d7b) (vm-start! . pG2d7a) (make-vm . pG2d79) (mutex-try-lock! . pG2d78) (mutex-unlock! . pG2d77) (mutex-lock! . pG2d76) (mutex? . pG2d75) (make-mutex . pG2d74) (condition-variable-notify-all! . pG2d73) (condition-variable-notify! . pG2d72) (condition-variable-wait! . pG2d71) (make-condition-variable . pG2d70) (write/ss . pG2d6f) (mosh-executable-path . pG2d6e) (make-file-options . pG2d6d) (source-info . pG2d6c) (make-compiler-instruction . pG2d6b) (make-instruction . pG2d6a) (set-annotation! . pG2d69) (get-annotation . pG2d68) (annotated-pair? . pG2d67) (annotated-cons . pG2d66) (set-source-info! . pG2d65) (bignum? . pG2d64) (fast-equal? . pG2d63) (fasl-read . pG2d62) (fasl-write . pG2d61) (time-usage . pG2d60) (os-constant . pG2d5f) (condition-printer . pG2d5e) (time . pG2abd) (include . pG2ab2)) '() values values '#f '#f '#f '#f) (pG9a5@pG7f1@install-library 'pG2e72 '(system) '() '() '() '() '((gensym-prefix-set! . pG2e0e) (ssl-supported? . pG2e06) (ssl-socket? . pG2e05) (socket-sslize! . pG2e04) (%monapi-stream-read . pG2e03) (%monapi-stream-write . pG2e02) (%monapi-stream-handle . pG2e01) (%monapi-make-stream . pG2e00) (%monapi-name-add! . pG2dff) (%monapi-message-receive . pG2dfe) (%monapi-name-whereis . pG2dfd) (%monapi-message-reply . pG2dfc) (%monapi-message-send-receive . pG2dfb) (%monapi-message-send . pG2dfa) (process-terminate! . pG2df9) (process-list . pG2df8) (write-to-file . pG2df5) (file->list . pG2df4) (file->string . pG2df3) (mosh-cache-dir . pG5ba) (%start-process . pG2de8) (%call-process . pG2de7) (local-tz-offset . pG2de6) (microseconds . pG2de5) (directory-list . pG2de4) (expand-path . pG2de2) (%getpid . pG2de0) (%waitpid . pG2ddf) (simple-struct-name . pG2dde) (simple-struct-set! . pG2ddd) (simple-struct-ref . pG2ddc) (make-simple-struct . pG2ddb) (simple-struct? . pG2dda) (pointer-ref-c-int64 . pG2dd9) (pointer-ref-c-int32 . pG2dd8) (pointer-ref-c-int16 . pG2dd7) (pointer-ref-c-int8 . pG2dd6) (pointer-ref-c-uint64 . pG2dd5) (pointer-ref-c-uint32 . pG2dd4) (pointer-ref-c-uint16 . pG2dd3) (pointer-ref-c-uint8 . pG2dd2) (pointer-set-c-uint64! . pG2dd1) (pointer-set-c-uint32! . pG2dd0) (pointer-set-c-uint16! . pG2dcf) (pointer-set-c-uint8! . pG2dce) (pointer-set-c-int64! . pG2dcd) (pointer-set-c-int32! . pG2dcc) (pointer-set-c-int16! . pG2dcb) (pointer-set-c-int8! . pG2dca) (pointer-set-c-pointer! . pG2dc9) (pointer-set-c-double! . pG2dc8) (pointer-set-c-float! . pG2dc7) (pointer-set-c-long-long! . pG2dc6) (pointer-set-c-long! . pG2dc5) (pointer-set-c-int! . pG2dc4) (pointer-set-c-short! . pG2dc3) (pointer-set-c-char! . pG2dc2) (pointer-ref-c-pointer . pG2dc1) (pointer-ref-c-double . pG2dc0) (pointer-ref-c-float . pG2dbf) (pointer-ref-c-unsigned-long-long . pG2dbe) (pointer-ref-c-signed-long-long . pG2dbd) (pointer-ref-c-unsigned-long . pG2dbc) (pointer-ref-c-signed-long . pG2dbb) (pointer-ref-c-unsigned-int . pG2dba) (pointer-ref-c-signed-int . pG2db9) (pointer-ref-c-unsigned-short . pG2db8) (pointer-ref-c-signed-short . pG2db7) (pointer-ref-c-unsigned-char . pG2db6) (pointer-ref-c-signed-char . pG2db5) (pointer->integer . pG2db4) (integer->pointer . pG2db3) (pointer? . pG2db2) (shared-errno . pG2db1) (%ffi-error . pG2db0) (%ffi-close . pG2daf) (%ffi-free-c-callback-trampoline . pG2dae) (%ffi-make-c-callback-trampoline . pG2dad) (%ffi-free . pG2dac) (%ffi-malloc . pG2dab) (%ffi-supported? . pG2daa) (%ffi-pointer->string . pG2da9) (%ffi-call . pG2da8) (%ffi-lookup . pG2da7) (%ffi-open . pG2da6) (null-terminated-utf8->string . pG2da5) (null-terminated-bytevector->string . pG2da4) (%exec . pG2da3) (%fork . pG2da2) (%pipe . pG2da1) (%confstr . pG2da0) (%dup . pG2d9f) (open-output-string . pG2d9d) (get-output-string . pG2d9c) (file-stat-ctime . pG2d9b) (file-stat-atime . pG2d9a) (file-stat-mtime . pG2d99) (file-size-in-bytes . pG2d98) (file-writable? . pG2d97) (file-executable? . pG2d96) (file-readable? . pG2d95) (file-regular? . pG2d94) (file-symbolic-link? . pG2d93) (file-directory? . pG2d92) (create-symbolic-link . pG2d91) (rename-file . pG2d90) (delete-directory . pG2d8f) (create-directory . pG2d8e) (create-mosh-cache-dir . pG2d8d) (get-environment-variables . pG2d8c) (current-exception-handler . pG2d8b) (get-environment-variable . pG2d8a) (join-wraps . pG2d89) (id->real-label . pG2d88) (same-marks? . pG2d87) (same-marks*? . pG2d86) (disasm . pG2d5d) (make-parameter . pG5b8) (socket-port . pG2d5c) (socket-shutdown . pG2d5b) (socket-close . pG2d5a) (socket-send . pG2d59) (socket-recv! . pG2d58) (socket-recv . pG2d57) (make-server-socket . pG2d56) (make-client-socket . pG2d55) (socket-accept . pG2d54) (socket? . pG2d53) (parameterize . pG2aad)) '() values values '#f '#f '#f '#f)))
(begin (set! pG2915@ref (unspecified)) (set! pG2917@x* (unspecified)) (set! pG2919@add-library-path! (unspecified)) (set! pG291b@parse-and-add-library-path (unspecified)) (set! pG291d@for-each-with-index (unspecified)) (set! pG291f@rpad (unspecified)) (set! pG2921@condition-printer/p (unspecified)) (set! pG2923@record->field-alist (unspecified)) (set! pG2925@map-with-index (unspecified)) (set! pG2927@repl (unspecified)) (set! pG2929@trace-printer (unspecified)) (set! pG292b@command-line (unspecified)) (set! pG292d@local-library-path (unspecified)) (set! pG292f@load/args (unspecified)) (set! pG2931@load (unspecified)) (set! pG2933@ironscheme-build (unspecified)) (set! pG2935@eval-top-level (unspecified)) (set! pG2937@compile-system-libraries (unspecified)) (set! pG2939@compile (unspecified)) (set! pG293b@compile->closure (unspecified)) (set! pG293d@pre-compile-r6rs-file (unspecified)) (set! pG293f@load-r6rs-top-level (unspecified)) (set! pG2941@load-r6rs-top-level-sexp (unspecified)) (set! pG2943@prefix-inc (unspecified)) (set! pG2945@prefix-inc! (unspecified)) (set! pG2915@ref (lambda (pG2980@rtd pG2981@i pG2982@x) (let ((pG2986@val ((record-accessor pG2980@rtd pG2981@i) pG2982@x))) (if (symbol? pG2986@val) (ungensym pG2986@val) pG2986@val)))) (set! pG2a7c@pG2915@ref pG2915@ref) (set! pG2917@x* '()) (set! pG2a7d@pG2917@x* pG2917@x*) (set! pG2919@add-library-path! (lambda (pG2988@path) (pG995@pG7d1@library-path (append (pG995@pG7d1@library-path) (list pG2988@path))))) (set! pG2a7e@pG2919@add-library-path! pG2919@add-library-path!) (set! pG291b@parse-and-add-library-path (lambda (pG298a@paths pG298b@message) (letrec* ((pG298f@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((pG2990@t pG298a@paths)) (if pG2990@t ((lambda (pG2992@paths) (for-each (lambda (pG2994@path) (if (file-exists? pG2994@path) (pG2919@add-library-path! (expand-path pG2994@path)) (format (current-error-port) pG298b@message pG2994@path))) (string-split pG2992@paths pG298f@separator))) pG2990@t) (void)))))) (set! pG2a7f@pG291b@parse-and-add-library-path pG291b@parse-and-add-library-path) (set! pG291d@for-each-with-index (lambda (pG2996@proc pG2997@lst) (letrec ((pG299a@loop (lambda (pG299c@i pG299d@lst) (if (null? pG299d@lst) (if '#f '#f (void)) (begin (pG2996@proc pG299c@i (car pG299d@lst)) (pG299a@loop (+ pG299c@i '1) (cdr pG299d@lst))))))) (pG299a@loop '1 pG2997@lst)))) (set! pG2a80@pG291d@for-each-with-index pG291d@for-each-with-index) (set! pG291f@rpad (lambda (pG29a0@str pG29a1@pad pG29a2@n) (let ((pG29a6@rest (- pG29a2@n (string-length (format '"~a" pG29a0@str))))) (let pG29ac@loop ((pG29a8@rest pG29a6@rest) (pG29a9@ret (format '"~a" pG29a0@str))) (if (<= pG29a8@rest '0) pG29a9@ret (pG29ac@loop (- pG29a8@rest '1) (string-append pG29a9@ret pG29a1@pad))))))) (set! pG2a81@pG291f@rpad pG291f@rpad) (set! pG2921@condition-printer/p (lambda (pG29ae@e pG29af@port) (letrec* ((pG29b3@max-condition-len (apply max (map (lambda (pG29c4@c) (string-length (symbol->string (record-type-name (record-rtd pG29c4@c))))) (simple-conditions pG29ae@e))))) (begin (display '" Condition components:\n" pG29af@port) (pG291d@for-each-with-index (lambda (pG29b4@i pG29b5@x) (let ((pG29b8@rtd (record-rtd pG29b5@x)) (pG29b9@fields-alist (pG2923@record->field-alist pG29b5@x))) (begin (format pG29af@port '" ~d. ~a" pG29b4@i (pG291f@rpad (symbol->string (record-type-name pG29b8@rtd)) '" " pG29b3@max-condition-len)) (if (null? pG29b9@fields-alist) (newline pG29af@port) (void)) (let pG29c0@loop ((pG29bc@first '#t) (pG29bd@fields-alist pG29b9@fields-alist)) (if (null? pG29bd@fields-alist) '() (let ((pG29c2@field (car pG29bd@fields-alist))) (begin (if (not pG29bc@first) (display (pG291f@rpad '"" '" " (+ '4 pG29b3@max-condition-len)) pG29af@port) (void)) (display '"       " pG29af@port) (display (car pG29c2@field) pG29af@port) (display '": " pG29af@port) (write (cdr pG29c2@field) pG29af@port) (newline pG29af@port) (pG29c0@loop '#f (cdr pG29bd@fields-alist))))))))) (simple-conditions pG29ae@e)))))) (set! pG2a82@pG2921@condition-printer/p pG2921@condition-printer/p) (set! pG2923@record->field-alist (lambda (pG29c6@r) (letrec* ((pG29c9@ref (lambda (pG29d4@rtd pG29d5@i pG29d6@x) (let ((pG29da@val ((record-accessor pG29d4@rtd pG29d5@i) pG29d6@x))) (if (symbol? pG29da@val) (ungensym pG29da@val) pG29da@val))))) (let pG29ce@loop ((pG29ca@ret '()) (pG29cb@rtd (record-rtd pG29c6@r))) (if pG29cb@rtd (pG29ce@loop (append pG29ca@ret (pG2925@map-with-index (lambda (pG29d0@i pG29d1@field) (cons pG29d1@field (pG29c9@ref pG29cb@rtd pG29d0@i pG29c6@r))) (vector->list (record-type-field-names pG29cb@rtd)))) (record-type-parent pG29cb@rtd)) pG29ca@ret))))) (set! pG2a83@pG2923@record->field-alist pG2923@record->field-alist) (set! pG2925@map-with-index (lambda (pG29dc@proc pG29dd@lst) (let pG29e6@loop ((pG29e0@i '0) (pG29e1@lst pG29dd@lst) (pG29e2@ret '())) (if (null? pG29e1@lst) (reverse pG29e2@ret) (pG29e6@loop (+ pG29e0@i '1) (cdr pG29e1@lst) (cons (pG29dc@proc pG29e0@i (car pG29e1@lst)) pG29e2@ret)))))) (set! pG2a84@pG2925@map-with-index pG2925@map-with-index) (set! pG2927@repl (lambda pG29e8@x (letrec* ((pG29eb@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (pG29ee@pG29ec) (lambda () (with-exception-handler (lambda (pG29f0@e) ((call/cc (lambda (pG29f2@pG29ed) (pG29ee@pG29ec (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? pG29f0@e) (pG2921@condition-printer/p pG29f0@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" pG29f0@e))) (pG29f2@pG29ed (lambda () (raise-continuable pG29f0@e)))))))))) (lambda () (let pG29f8@loop ((pG29f4@line (get-line (current-input-port))) (pG29f5@accum '"")) (letrec* ((pG29fb@parentheses-ok? (lambda (pG2a06@text) (let pG2a0e@loop ((pG2a08@chars (string->list pG2a06@text)) (pG2a09@p0 '0) (pG2a0a@p1 '0)) (if (null? pG2a08@chars) (= '0 pG2a09@p0 pG2a0a@p1) (let ((pG2a10@t (car pG2a08@chars))) (if (memv pG2a10@t '(#\()) (pG2a0e@loop (cdr pG2a08@chars) (+ pG2a09@p0 '1) pG2a0a@p1) (if (memv pG2a10@t '(#\))) (pG2a0e@loop (cdr pG2a08@chars) (- pG2a09@p0 '1) pG2a0a@p1) (if (memv pG2a10@t '(#\[)) (pG2a0e@loop (cdr pG2a08@chars) pG2a09@p0 (+ pG2a0a@p1 '1)) (if (memv pG2a10@t '(#\])) (pG2a0e@loop (cdr pG2a08@chars) pG2a09@p0 (- pG2a0a@p1 '1)) (pG2a0e@loop (cdr pG2a08@chars) pG2a09@p0 pG2a0a@p1)))))))))) (pG29fd@eval-string-print (lambda (pG2a00@text) (if (not (or (string=? '"\n" pG2a00@text) (= '0 (string-length pG2a00@text)))) (call-with-values (lambda () (pG2935@eval-top-level (call-with-port (open-string-input-port pG2a00@text) read))) (lambda pG2a02@out* (for-each (lambda (pG2a04@out) (begin (write/ss pG2a04@out) (newline))) pG2a02@out*))) (void))))) (if (eof-object? pG29f4@line) (begin (pG29fd@eval-string-print pG29f5@accum) (exit)) (let ((pG29fe@current (string-append pG29f5@accum pG29f4@line))) (if (pG29fb@parentheses-ok? pG29fe@current) (pG29fd@eval-string-print pG29fe@current) (pG29f8@loop (get-line (current-input-port)) pG29fe@current)))))))))))) (newline) (pG29eb@rec))))) (pG29eb@rec)))) (set! pG2a85@pG2927@repl pG2927@repl) (set! pG2929@trace-printer (pG6db@pG5b9@make-parameter write)) (set! pG2a86@pG2929@trace-printer pG2929@trace-printer) (set! pG292b@command-line (pG6db@pG5b9@make-parameter (get-command-line))) (set! pG2a87@pG292b@command-line pG292b@command-line) (set! pG292d@local-library-path (lambda (pG2a12@filename) (pG995@pG7d1@library-path))) (set! pG2a88@pG292d@local-library-path pG292d@local-library-path) (set! pG292f@load/args (lambda (pG2a14@filename . pG2a16@args) (begin (apply pG293f@load-r6rs-top-level pG2a14@filename 'load pG2a16@args) (void)))) (set! pG2a89@pG292f@load/args pG292f@load/args) (set! pG2931@load (lambda (pG2a18@filename) (begin (apply pG293f@load-r6rs-top-level pG2a18@filename 'load (pG292b@command-line)) (void)))) (set! pG2a8a@pG2931@load pG2931@load) (set! pG2933@ironscheme-build (lambda () (pG2931@load '"ironscheme-buildscript.ss"))) (set! pG2a8b@pG2933@ironscheme-build pG2933@ironscheme-build) (set! pG2935@eval-top-level (lambda (pG2a1a@x) (pG28f2@pGe52@eval pG2a1a@x (pG2909@pGe80@interaction-environment)))) (set! pG2a8c@pG2935@eval-top-level pG2935@eval-top-level) (set! pG2937@compile-system-libraries (lambda () (pG2935@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! pG2a8d@pG2937@compile-system-libraries pG2937@compile-system-libraries) (set! pG2939@compile (lambda (pG2a1c@filename) (pG293f@load-r6rs-top-level pG2a1c@filename 'compile))) (set! pG2a8e@pG2939@compile pG2939@compile) (set! pG293b@compile->closure (lambda (pG2a1e@filename) (pG293f@load-r6rs-top-level pG2a1e@filename 'closure))) (set! pG2a8f@pG293b@compile->closure pG293b@compile->closure) (set! pG293d@pre-compile-r6rs-file (lambda (pG2a20@filename) (pG293f@load-r6rs-top-level pG2a20@filename 'compile))) (set! pG2a90@pG293d@pre-compile-r6rs-file pG293d@pre-compile-r6rs-file) (set! pG293f@load-r6rs-top-level (lambda (pG2a22@filename pG2a23@how . pG2a26@args) (begin (pG995@pG7d1@library-path (pG292d@local-library-path pG2a22@filename)) (let ((pG2a28@x* (with-input-from-file pG2a22@filename (lambda () (let pG2a2a@f () (let ((pG2a2c@x (pG6cd@pG59d@read-annotated))) (if (eof-object? pG2a2c@x) '() (cons pG2a2c@x (pG2a2a@f))))))))) (let ((pG2a2e@t pG2a23@how)) (if (memv pG2a2e@t '(closure)) (pG2908@pGe7e@pre-compile-r6rs-top-level pG2a28@x*) (if (memv pG2a2e@t '(load)) (begin (pG292b@command-line (cons pG2a22@filename (car pG2a26@args))) (pG6dc@pG5bb@mosh-cache-dir (create-mosh-cache-dir)) (if (pG6dc@pG5bb@mosh-cache-dir) (gensym-prefix-set! (pG2945@prefix-inc! (string-append (pG6dc@pG5bb@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (pG2a30@file) ((call/cc (lambda (pG2a34@pG2a32) (lambda () (with-exception-handler (lambda (pG2a36@c) ((call/cc (lambda (pG2a38@pG2a33) (pG2a34@pG2a32 (lambda () (if '#t '#t (pG2a38@pG2a33 (lambda () (raise-continuable pG2a36@c)))))))))) (lambda () (delete-file (string-append (pG6dc@pG5bb@mosh-cache-dir) '"/" pG2a30@file))))))))) (directory-list (pG6dc@pG5bb@mosh-cache-dir))) (void)) (let ((pG2a3a@compiled (pG2907@pGe7c@compile-r6rs-top-level pG2a28@x*))) (begin (if (and (pG6dc@pG5bb@mosh-cache-dir) (not (symbol-value '%disable-acc))) (pG999@pG7d9@serialize-all pG6d6@pG5af@serialize-library pG732@pG6eb@compile-core-expr) (void)) (pG2a3a@compiled)))) (if (memv pG2a2e@t '(compile)) (begin (pG2907@pGe7c@compile-r6rs-top-level pG2a28@x*) (pG999@pG7d9@serialize-all pG6d6@pG5af@serialize-library pG732@pG6eb@compile-core-expr)) (if '#f '#f (void)))))))))) (set! pG2a91@pG293f@load-r6rs-top-level pG293f@load-r6rs-top-level) (set! pG2941@load-r6rs-top-level-sexp (lambda (pG2a3c@import-spec pG2a3d@thunk) (let ((pG2a48@pG2a41 pG995@pG7d1@library-path) (pG2a49@pG2a43 pG6dc@pG5bb@mosh-cache-dir) (pG2a4a@pG2a45 (pG292d@local-library-path '"")) (pG2a4b@pG2a47 (create-mosh-cache-dir))) (let ((pG2a50@swap (lambda () (begin (let ((pG2a52@t (pG2a48@pG2a41))) (begin (pG2a48@pG2a41 pG2a4a@pG2a45) (set! pG2a4a@pG2a45 pG2a52@t))) (let ((pG2a54@t (pG2a49@pG2a43))) (begin (pG2a49@pG2a43 pG2a4b@pG2a47) (set! pG2a4b@pG2a47 pG2a54@t))))))) (dynamic-wind pG2a50@swap (lambda () (begin (if (pG6dc@pG5bb@mosh-cache-dir) (gensym-prefix-set! (pG2945@prefix-inc! (string-append (pG6dc@pG5bb@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((pG2a5a@pG2a57 pG292b@command-line) (pG2a5b@pG2a59 '())) (let ((pG2a5e@swap (lambda () (let ((pG2a60@t (pG2a5a@pG2a57))) (begin (pG2a5a@pG2a57 pG2a5b@pG2a59) (set! pG2a5b@pG2a59 pG2a60@t)))))) (dynamic-wind pG2a5e@swap (lambda () ((pG2907@pGe7c@compile-r6rs-top-level (list (cons 'import pG2a3c@import-spec) (list pG2a3d@thunk))))) pG2a5e@swap))))) pG2a50@swap))))) (set! pG2a92@pG2941@load-r6rs-top-level-sexp pG2941@load-r6rs-top-level-sexp) (set! pG2943@prefix-inc (lambda (pG2a62@prefix-string) (let ((pG2a64@prefix (symbol->string pG2a62@prefix-string))) (let ((pG2a66@len (string-length pG2a64@prefix))) (let pG2a6e@loop ((pG2a68@i (- pG2a66@len '1)) (pG2a69@carry? '#t) (pG2a6a@accum '())) (if (< pG2a68@i '0) (string->symbol (list->string (if pG2a69@carry? (cons '#\a pG2a6a@accum) pG2a6a@accum))) (if pG2a69@carry? (let ((pG2a70@next-integer (+ '1 (char->integer (string-ref pG2a64@prefix pG2a68@i))))) (if (= pG2a70@next-integer '123) (pG2a6e@loop (- pG2a68@i '1) '#f (cons '#\A pG2a6a@accum)) (if (= pG2a70@next-integer '91) (pG2a6e@loop (- pG2a68@i '1) '#t (cons '#\a pG2a6a@accum)) (pG2a6e@loop (- pG2a68@i '1) '#f (cons (integer->char pG2a70@next-integer) pG2a6a@accum))))) (pG2a6e@loop (- pG2a68@i '1) '#f (cons (string-ref pG2a64@prefix pG2a68@i) pG2a6a@accum))))))))) (set! pG2a93@pG2943@prefix-inc pG2943@prefix-inc) (set! pG2945@prefix-inc! (lambda (pG2a72@file) (begin (if (not (file-exists? pG2a72@file)) (call-with-output-file pG2a72@file (lambda (pG2a74@port) (write 'd pG2a74@port))) (void)) (let ((pG2a76@prefix (call-with-input-file pG2a72@file read))) (if (main-vm?) (let ((pG2a78@next-prefix (pG2943@prefix-inc pG2a76@prefix))) (begin (call-with-port (open-file-output-port pG2a72@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (pG2a7a@port) (write pG2a78@next-prefix pG2a7a@port))) pG2a76@prefix)) pG2a76@prefix))))) (set! pG2a94@pG2945@prefix-inc! pG2945@prefix-inc!) (begin (pG99a@pG7db@current-precompiled-library-loader pG6d7@pG5b1@load-serialized-library) (set-symbol-value! 'load pG2931@load) (set-symbol-value! 'pre-compile-r6rs-file pG293d@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs pG2935@eval-top-level) (set-symbol-value! 'int-env-syms pG28e9@pGe40@interaction-environment-symbols) (set-symbol-value! 'expanded2core pG731@pG6e9@expanded->core) (set-symbol-value! 'trace-printer pG2929@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (pG2946@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list pG2946@c))))) (pG291b@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (pG291b@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (pG2919@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (pG2919@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (pG2919@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((pG2948@prefix (lambda (pG294a@ext pG294b@ls) (append (map (lambda (pG294e@x) (string-append pG294a@ext pG294e@x)) pG294b@ls) pG294b@ls)))) (pG996@pG7d3@library-extensions (pG2948@prefix '".mosh" (pG996@pG7d3@library-extensions)))) (current-exception-handler (lambda (pG2950@c) (begin (if (condition? pG2950@c) (pG2921@condition-printer/p pG2950@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" pG2950@c)) pG2950@c))) (if ((call/cc (lambda (pG2954@pG2952) (lambda () (with-exception-handler (lambda (pG2956@c) ((call/cc (lambda (pG2958@pG2953) (pG2954@pG2952 (lambda () (if '#t '#f (pG2958@pG2953 (lambda () (raise-continuable pG2956@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (pG2941@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (pG292b@command-line)) (let ((pG2962@pG295b pG292b@command-line) (pG2963@pG295d pG6dc@pG5bb@mosh-cache-dir) (pG2964@pG295f '()) (pG2965@pG2961 (create-mosh-cache-dir))) (let ((pG296a@swap (lambda () (begin (let ((pG296c@t (pG2962@pG295b))) (begin (pG2962@pG295b pG2964@pG295f) (set! pG2964@pG295f pG296c@t))) (let ((pG296e@t (pG2963@pG295d))) (begin (pG2963@pG295d pG2965@pG2961) (set! pG2965@pG2961 pG296e@t))))))) (dynamic-wind pG296a@swap (lambda () (begin (if (pG6dc@pG5bb@mosh-cache-dir) (gensym-prefix-set! (pG2945@prefix-inc! (string-append (pG6dc@pG5bb@mosh-cache-dir) '"/prefix.txt"))) (void)) (pG2927@repl))) pG296a@swap))) (begin (pG995@pG7d1@library-path (pG292d@local-library-path (car (pG292b@command-line)))) (set! pG2917@x* (with-input-from-file (car (pG292b@command-line)) (lambda () (let pG2970@f () (let ((pG2972@x (pG6cd@pG59d@read-annotated))) (if (eof-object? pG2972@x) '() (cons pG2972@x (pG2970@f)))))))) (pG292b@command-line (cons (car (pG292b@command-line)) (cdr (pG292b@command-line)))) (pG6dc@pG5bb@mosh-cache-dir (create-mosh-cache-dir)) (if (pG6dc@pG5bb@mosh-cache-dir) (gensym-prefix-set! (pG2945@prefix-inc! (string-append (pG6dc@pG5bb@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (pG2974@file) ((call/cc (lambda (pG2978@pG2976) (lambda () (with-exception-handler (lambda (pG297a@c) ((call/cc (lambda (pG297c@pG2977) (pG2978@pG2976 (lambda () (if '#t '#t (pG297c@pG2977 (lambda () (raise-continuable pG297a@c)))))))))) (lambda () (delete-file (string-append (pG6dc@pG5bb@mosh-cache-dir) '"/" pG2974@file))))))))) (directory-list (pG6dc@pG5bb@mosh-cache-dir))) (void)) (let ((pG297e@compiled (pG2907@pGe7c@compile-r6rs-top-level pG2917@x*))) (begin (if (and (pG6dc@pG5bb@mosh-cache-dir) (not (symbol-value '%disable-acc))) (pG999@pG7d9@serialize-all pG6d6@pG5af@serialize-library pG732@pG6eb@compile-core-expr) (void)) (pG297e@compiled))))))))
