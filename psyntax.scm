;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! nV28e3@library-file-path->cache-path (unspecified)) (set! nV28e5@read-annotated (unspecified)) (set! nV28e7@annotation-stripped (unspecified)) (set! nV28e9@annotation? (unspecified)) (set! nV28eb@annotation-source (unspecified)) (set! nV28ed@annotation-expression (unspecified)) (set! nV28ef@scm->fasl (unspecified)) (set! nV28f1@fasl-save (unspecified)) (set! nV28f3@fasl-load (unspecified)) (set! nV28f5@verbose? (unspecified)) (set! nV28f7@serialize-library (unspecified)) (set! nV28f9@load-serialized-library (unspecified)) (set! nV28fb@make-record-printer (unspecified)) (set! nV28fd@compile-core (unspecified)) (set! nV28ff@read-library-source-file (unspecified)) (set! nV2901@make-parameter (unspecified)) (set! nV2903@mosh-cache-dir (unspecified)) (set! nV2999@file-options-spec (unspecified)) (set! nV28e3@library-file-path->cache-path (lambda (nV299a@x) (call-with-values (lambda () (open-string-output-port)) (lambda (nV29a0@nV299d nV29a1@nV299f) (let ((nV29a4@extract nV29a1@nV299f) (nV29a5@p nV29a0@nV299d)) (let ((nV29a9@display-hex '#f)) (begin (set! nV29a9@display-hex (lambda (nV29b2@n) (if (<= '0 nV29b2@n '9) (display nV29b2@n nV29a5@p) (display (integer->char (+ (char->integer '#\a) (- nV29b2@n '10))) nV29a5@p)))) (begin (let nV29ac@f ((nV29aa@ls (string-split nV299a@x '#\/))) (if (not (null? nV29aa@ls)) (begin (display '"_" nV29a5@p) (for-each (lambda (nV29ae@c) (if (or (char<=? '#\a nV29ae@c '#\z) (char<=? '#\A nV29ae@c '#\Z) (char<=? '#\0 nV29ae@c '#\9) (memv nV29ae@c '(#\- #\. #\_ #\~))) (display nV29ae@c nV29a5@p) (begin (display '"%" nV29a5@p) (let ((nV29b0@n (char->integer nV29ae@c))) (begin (nV29a9@display-hex (quotient nV29b0@n '16)) (nV29a9@display-hex (remainder nV29b0@n '16))))))) (string->list (car nV29aa@ls))) (nV29ac@f (cdr nV29aa@ls))) (void))) (nV29a4@extract))))))))) (set! nV2a14@nV28e3@library-file-path->cache-path nV28e3@library-file-path->cache-path) (set! nV28e5@read-annotated read) (set! nV2a15@nV28e5@read-annotated nV28e5@read-annotated) (set! nV28e7@annotation-stripped (lambda (nV29b4@x) (nV28ed@annotation-expression nV29b4@x))) (set! nV2a16@nV28e7@annotation-stripped nV28e7@annotation-stripped) (set! nV28e9@annotation? (lambda (nV29b6@x) (source-info nV29b6@x))) (set! nV2a17@nV28e9@annotation? nV28e9@annotation?) (set! nV28eb@annotation-source (lambda (nV29b8@x) (source-info nV29b8@x))) (set! nV2a18@nV28eb@annotation-source nV28eb@annotation-source) (set! nV28ed@annotation-expression (lambda (nV29ba@x) (if (pair? nV29ba@x) (cons (car nV29ba@x) (cdr nV29ba@x)) (if (procedure? nV29ba@x) (set-source-info! nV29ba@x '#f) nV29ba@x)))) (set! nV2a19@nV28ed@annotation-expression nV28ed@annotation-expression) (set! nV28ef@scm->fasl (lambda (nV29bc@filename) (string-append (nV2903@mosh-cache-dir) '"/" (nV28e3@library-file-path->cache-path nV29bc@filename) '".mosh-fasl"))) (set! nV2a1a@nV28ef@scm->fasl nV28ef@scm->fasl) (set! nV28f1@fasl-save (lambda (nV29be@filename nV29bf@obj) (call-with-port (open-file-output-port nV29be@filename) (lambda (nV29c2@port) ((symbol-value 'fasl-write!) nV29bf@obj nV29c2@port))))) (set! nV2a1b@nV28f1@fasl-save nV28f1@fasl-save) (set! nV28f3@fasl-load (lambda (nV29c4@filename) (call-with-port (open-file-input-port nV29c4@filename) (symbol-value 'fasl-read!)))) (set! nV2a1c@nV28f3@fasl-load nV28f3@fasl-load) (set! nV28f5@verbose? (symbol-value '%verbose)) (set! nV2a1d@nV28f5@verbose? nV28f5@verbose?) (set! nV28f7@serialize-library (lambda (nV29c6@filename nV29c7@obj) (begin (if nV28f5@verbose? (format (current-error-port) '"serialize-library ~a\n..." nV29c6@filename) (void)) (let ((nV29ca@expanded2core (symbol-value 'expanded2core))) (let ((nV29cc@compile (symbol-value 'compile-w/o-halt))) (let ((nV29ce@code nV29c7@obj)) (let ((nV29d0@pivot (cddddr (cddddr nV29ce@code)))) (let ((nV29d2@visit (nV29cc@compile (nV29ca@expanded2core (car nV29d0@pivot))))) (begin (set-car! nV29d0@pivot nV29d2@visit) (let ((nV29d4@pivot (cdr nV29d0@pivot))) (let ((nV29d6@invoke (nV29cc@compile (nV29ca@expanded2core (car nV29d4@pivot))))) (set-car! nV29d4@pivot nV29d6@invoke))))))))) (let ((nV29d8@fasl-file (nV28ef@scm->fasl nV29c6@filename))) (begin (if (file-exists? nV29d8@fasl-file) (delete-file nV29d8@fasl-file) (void)) ((call/cc (lambda (nV29dc@nV29da) (lambda () (with-exception-handler (lambda (nV29de@c) ((call/cc (lambda (nV29e0@nV29db) (nV29dc@nV29da (lambda () (if '#t (begin (if nV28f5@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" nV29c6@filename) (void)) (if (file-exists? nV29d8@fasl-file) (delete-file nV29d8@fasl-file) (void)) '#f) (nV29e0@nV29db (lambda () (raise-continuable nV29de@c)))))))))) (lambda () (nV28f1@fasl-save nV29d8@fasl-file nV29c7@obj)))))))))))) (set! nV2a1e@nV28f7@serialize-library nV28f7@serialize-library) (set! nV28f9@load-serialized-library (lambda (nV29e2@filename nV29e3@obj) (and (nV2903@mosh-cache-dir) (let ((nV29e6@fasl-file (nV28ef@scm->fasl nV29e2@filename))) (if (and (file-exists? nV29e6@fasl-file) ((symbol-value 'file-newer?) nV29e6@fasl-file nV29e2@filename)) (let ((nV29e8@expanded2core (symbol-value 'expanded2core))) (let ((nV29ea@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((nV29ec@code (nV28f3@fasl-load nV29e6@fasl-file))) (let ((nV29ee@pivot (cddddr (cddddr nV29ec@code)))) (let ((nV29f0@visit (car nV29ee@pivot))) (let ((nV29f2@visit-proc (lambda () (nV29ea@eval-compiled-core nV29f0@visit)))) (begin (set-car! nV29ee@pivot nV29f2@visit-proc) (let ((nV29f4@pivot (cdr nV29ee@pivot))) (let ((nV29f6@invoke (car nV29f4@pivot))) (begin (set-car! nV29f4@pivot (lambda () (nV29ea@eval-compiled-core nV29f6@invoke))) (apply nV29e3@obj nV29ec@code))))))))))) '#f))))) (set! nV2a1f@nV28f9@load-serialized-library nV28f9@load-serialized-library) (set! nV28fb@make-record-printer (lambda (nV29f8@name nV29f9@printer) (lambda nV29fc@x (begin (display '"record printer") (for-each display nV29fc@x))))) (set! nV2a20@nV28fb@make-record-printer nV28fb@make-record-printer) (set! nV28fd@compile-core (lambda nV29fe@x (apply error 'comile-core '"not implementated" nV29fe@x))) (set! nV2a21@nV28fd@compile-core nV28fd@compile-core) (set! nV28ff@read-library-source-file (lambda (nV2a00@file-name) (with-input-from-file nV2a00@file-name nV28e5@read-annotated))) (set! nV2a22@nV28ff@read-library-source-file nV28ff@read-library-source-file) (set! nV2901@make-parameter (lambda nV2a10 (let ((nV2a11 (length nV2a10))) (if (= nV2a11 '1) (apply (lambda (nV2a02@x) (nV2901@make-parameter nV2a02@x (lambda (nV2a04@x) nV2a04@x))) nV2a10) (if (= nV2a11 '2) (apply (lambda (nV2a06@x nV2a07@fender) (let ((nV2a0a@x (nV2a07@fender nV2a06@x))) (lambda nV2a0e (let ((nV2a0f (length nV2a0e))) (if (= nV2a0f '0) (apply (lambda () nV2a0a@x) nV2a0e) (if (= nV2a0f '1) (apply (lambda (nV2a0c@v) (set! nV2a0a@x (nV2a07@fender nV2a0c@v))) nV2a0e) (error 'apply '"invalid arg count"))))))) nV2a10) (error 'apply '"invalid arg count")))))) (set! nV2a23@nV2901@make-parameter nV2901@make-parameter) (set! nV2903@mosh-cache-dir (nV2901@make-parameter '#f)) (set! nV2a24@nV2903@mosh-cache-dir nV2903@mosh-cache-dir) (set! nV2999@file-options-spec (lambda (nV2a12@x) nV2a12@x)) (set! nV2a25@nV2999@file-options-spec nV2999@file-options-spec) (void))
(begin (set! nV2a2b@current-primitive-locations (unspecified)) (set! nV2a2d@mutable? (unspecified)) (set! nV2a2f@rewriter (unspecified)) (set! nV2a31@expanded->core (unspecified)) (set! nV2a33@compile-core-expr (unspecified)) (set! nV2a35@pretty-print (unspecified)) (set! nV2a37@compile-core-expr-to-port (unspecified)) (set! nV2a2b@current-primitive-locations (nV2a23@nV2901@make-parameter (lambda (nV2a38@x) '#f) (lambda (nV2a3a@p) nV2a3a@p))) (set! nV2a76@nV2a2b@current-primitive-locations nV2a2b@current-primitive-locations) (set! nV2a2d@mutable? (lambda (nV2a3c@x) (or (pair? nV2a3c@x) (vector? nV2a3c@x) (hashtable? nV2a3c@x)))) (set! nV2a77@nV2a2d@mutable? nV2a2d@mutable?) (set! nV2a2f@rewriter (lambda (nV2a3e@quote-hack?) (let ((nV2a41@f '#f)) (begin (set! nV2a41@f (lambda (nV2a42@x) (if (pair? nV2a42@x) (let ((nV2a44@t (car nV2a42@x))) (if (memv nV2a44@t '(quote)) (if (and nV2a3e@quote-hack? (nV2a2d@mutable? (cadr nV2a42@x))) (let ((nV2a46@g (gensym))) (begin (set-symbol-value! nV2a46@g (cadr nV2a42@x)) nV2a46@g)) nV2a42@x) (if (memv nV2a44@t '(case-lambda)) (cons 'case-lambda (map (lambda (nV2a48@x) (cons (car nV2a48@x) (map nV2a41@f (cdr nV2a48@x)))) (cdr nV2a42@x))) (if (memv nV2a44@t '(lambda)) (cons* 'lambda (cadr nV2a42@x) (map nV2a41@f (cddr nV2a42@x))) (if (memv nV2a44@t '(letrec)) (let ((nV2a4a@bindings (cadr nV2a42@x)) (nV2a4b@body* (cddr nV2a42@x))) (let ((nV2a4e@lhs* (map car nV2a4a@bindings)) (nV2a4f@rhs* (map cadr nV2a4a@bindings))) (cons* 'letrec (map list nV2a4e@lhs* (map nV2a41@f nV2a4f@rhs*)) (map nV2a41@f nV2a4b@body*)))) (if (memv nV2a44@t '(letrec*)) (let ((nV2a52@bindings (cadr nV2a42@x)) (nV2a53@body* (cddr nV2a42@x))) (let ((nV2a56@lhs* (map car nV2a52@bindings)) (nV2a57@rhs* (map cadr nV2a52@bindings))) (cons* 'letrec* (map list nV2a56@lhs* (map nV2a41@f nV2a57@rhs*)) (map nV2a41@f nV2a53@body*)))) (if (memv nV2a44@t '(library-letrec*)) (let ((nV2a5a@name (cadr nV2a42@x)) (nV2a5b@x (cdr nV2a42@x))) (let ((nV2a5e@bindings (cadr nV2a5b@x)) (nV2a5f@body* (cddr nV2a5b@x))) (let ((nV2a62@lhs* (map car nV2a5e@bindings)) (nV2a63@lhs** (map cadr nV2a5e@bindings)) (nV2a64@rhs* (map caddr nV2a5e@bindings))) (cons* 'library-letrec* nV2a5a@name (map list nV2a62@lhs* nV2a63@lhs** (map nV2a41@f nV2a64@rhs*)) (map nV2a41@f nV2a5f@body*))))) (if (memv nV2a44@t '(begin)) (cons 'begin (map nV2a41@f (cdr nV2a42@x))) (if (memv nV2a44@t '(set!)) (list 'set! (cadr nV2a42@x) (nV2a41@f (caddr nV2a42@x))) (if (memv nV2a44@t '(primitive)) (let ((nV2a68@op (cadr nV2a42@x))) (let ((nV2a6a@t ((nV2a2b@current-primitive-locations) nV2a68@op))) (if nV2a6a@t ((lambda (nV2a6c@loc) nV2a6c@loc) nV2a6a@t) nV2a68@op))) (if (memv nV2a44@t '(define)) nV2a42@x (if (list? nV2a42@x) (map nV2a41@f nV2a42@x) (error 'rewrite '"invalid form ~s ~s" nV2a42@x (list? nV2a42@x)))))))))))))) nV2a42@x))) nV2a41@f)))) (set! nV2a78@nV2a2f@rewriter nV2a2f@rewriter) (set! nV2a31@expanded->core (lambda (nV2a6e@x) ((nV2a2f@rewriter '#f) nV2a6e@x))) (set! nV2a79@nV2a31@expanded->core nV2a31@expanded->core) (set! nV2a33@compile-core-expr (lambda (nV2a70@x) ((nV2a2f@rewriter '#f) nV2a70@x))) (set! nV2a7a@nV2a33@compile-core-expr nV2a33@compile-core-expr) (set! nV2a35@pretty-print write) (set! nV2a7b@nV2a35@pretty-print nV2a35@pretty-print) (set! nV2a37@compile-core-expr-to-port (lambda (nV2a72@x nV2a73@p) (nV2a35@pretty-print ((nV2a2f@rewriter '#f) nV2a72@x) nV2a73@p))) (set! nV2a7c@nV2a37@compile-core-expr-to-port nV2a37@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! nV2acb@make-collection (unspecified)) (set! nV2acd@current-library-collection (unspecified)) (set! nV2acf@rp (unspecified)) (set! nV2ad9@library? (unspecified)) (set! nV2adb@library-id (unspecified)) (set! nV2add@set-library-id! (unspecified)) (set! nV2adf@library-name (unspecified)) (set! nV2ae1@set-library-name! (unspecified)) (set! nV2ae3@library-version (unspecified)) (set! nV2ae5@set-library-version! (unspecified)) (set! nV2ae7@library-imp* (unspecified)) (set! nV2ae9@set-library-imp*! (unspecified)) (set! nV2aeb@library-vis* (unspecified)) (set! nV2aed@set-library-vis*! (unspecified)) (set! nV2aef@library-inv* (unspecified)) (set! nV2af1@set-library-inv*! (unspecified)) (set! nV2af3@library-subst (unspecified)) (set! nV2af5@set-library-subst! (unspecified)) (set! nV2af7@library-env (unspecified)) (set! nV2af9@set-library-env! (unspecified)) (set! nV2afb@library-visit-state (unspecified)) (set! nV2afd@set-library-visit-state! (unspecified)) (set! nV2aff@library-invoke-state (unspecified)) (set! nV2b01@set-library-invoke-state! (unspecified)) (set! nV2b03@library-visit-code (unspecified)) (set! nV2b05@set-library-visit-code! (unspecified)) (set! nV2b07@library-invoke-code (unspecified)) (set! nV2b09@set-library-invoke-code! (unspecified)) (set! nV2b0b@library-visible? (unspecified)) (set! nV2b0d@set-library-visible?! (unspecified)) (set! nV2b0f@library-source-file-name (unspecified)) (set! nV2b11@set-library-source-file-name! (unspecified)) (set! nV2b13@dummy (unspecified)) (set! nV2b15@find-dependencies (unspecified)) (set! nV2b17@find-library-by (unspecified)) (set! nV2b19@library-path (unspecified)) (set! nV2b1b@library-extensions (unspecified)) (set! nV2b1d@library-name->file-name (unspecified)) (set! nV2b1f@file-locator (unspecified)) (set! nV2b21@serialize-all (unspecified)) (set! nV2b23@current-precompiled-library-loader (unspecified)) (set! nV2b25@try-load-from-file (unspecified)) (set! nV2b27@library-loader (unspecified)) (set! nV2b29@current-library-expander (unspecified)) (set! nV2b2b@external-pending-libraries (unspecified)) (set! nV2b2d@find-external-library (unspecified)) (set! nV2b2f@find-library-by-name (unspecified)) (set! nV2b31@library-exists? (unspecified)) (set! nV2b33@find-library-by-spec/die (unspecified)) (set! nV2b35@label->binding-table (unspecified)) (set! nV2b37@install-library-record (unspecified)) (set! nV2b39@install-library (unspecified)) (set! nV2b3b@imported-label->binding (unspecified)) (set! nV2b3d@invoke-library (unspecified)) (set! nV2b3f@visit-library (unspecified)) (set! nV2b41@invoke-library-by-spec (unspecified)) (set! nV2b43@invoke-library-by-name (unspecified)) (set! nV2b45@installed-libraries (unspecified)) (set! nV2b47@library-spec (unspecified)) (set! nV2acb@make-collection (lambda () (let ((nV2b48@set '())) (let ((nV2b4b@set-cons '#f)) (begin (set! nV2b4b@set-cons (lambda (nV2b50@x nV2b51@ls) (if (memq nV2b50@x nV2b51@ls) nV2b51@ls (cons nV2b50@x nV2b51@ls)))) (lambda nV2b4e (let ((nV2b4f (length nV2b4e))) (if (= nV2b4f '0) (apply (lambda () nV2b48@set) nV2b4e) (if (= nV2b4f '1) (apply (lambda (nV2b4c@x) (set! nV2b48@set (nV2b4b@set-cons nV2b4c@x nV2b48@set))) nV2b4e) (error 'apply '"invalid arg count")))))))))) (set! nV2cca@nV2acb@make-collection nV2acb@make-collection) (set! nV2acd@current-library-collection (nV2a23@nV2901@make-parameter (nV2acb@make-collection) (lambda (nV2b54@x) (begin (if (not (procedure? nV2b54@x)) (assertion-violation 'current-library-collection '"not a procedure" nV2b54@x) (void)) nV2b54@x)))) (set! nV2ccb@nV2acd@current-library-collection nV2acd@current-library-collection) (set! nV2acf@rp (nV2a20@nV28fb@make-record-printer 'library (lambda (nV2b56@x nV2b57@p nV2b58@wr) (begin (if (not (nV2ad9@library? nV2b56@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (nV2ae3@library-version nV2b56@x)) (nV2adf@library-name nV2b56@x) (append (nV2adf@library-name nV2b56@x) (list (nV2ae3@library-version nV2b56@x))))) nV2b57@p))))) (set! nV2ccc@nV2acf@rp nV2acf@rp) (set! nV2ad9@library? (lambda (nV2b5c@x) (and (simple-struct? nV2b5c@x) (eq? (simple-struct-name nV2b5c@x) 'library)))) (set! nV2ccd@nV2ad9@library? nV2ad9@library?) (set! nV2adb@library-id (lambda (nV2b5e@x) (simple-struct-ref nV2b5e@x '0))) (set! nV2cce@nV2adb@library-id nV2adb@library-id) (set! nV2add@set-library-id! (lambda (nV2b60@x nV2b61@val) (simple-struct-set! nV2b60@x '0 nV2b61@val))) (set! nV2ccf@nV2add@set-library-id! nV2add@set-library-id!) (set! nV2adf@library-name (lambda (nV2b64@x) (simple-struct-ref nV2b64@x '1))) (set! nV2cd0@nV2adf@library-name nV2adf@library-name) (set! nV2ae1@set-library-name! (lambda (nV2b66@x nV2b67@val) (simple-struct-set! nV2b66@x '1 nV2b67@val))) (set! nV2cd1@nV2ae1@set-library-name! nV2ae1@set-library-name!) (set! nV2ae3@library-version (lambda (nV2b6a@x) (simple-struct-ref nV2b6a@x '2))) (set! nV2cd2@nV2ae3@library-version nV2ae3@library-version) (set! nV2ae5@set-library-version! (lambda (nV2b6c@x nV2b6d@val) (simple-struct-set! nV2b6c@x '2 nV2b6d@val))) (set! nV2cd3@nV2ae5@set-library-version! nV2ae5@set-library-version!) (set! nV2ae7@library-imp* (lambda (nV2b70@x) (simple-struct-ref nV2b70@x '3))) (set! nV2cd4@nV2ae7@library-imp* nV2ae7@library-imp*) (set! nV2ae9@set-library-imp*! (lambda (nV2b72@x nV2b73@val) (simple-struct-set! nV2b72@x '3 nV2b73@val))) (set! nV2cd5@nV2ae9@set-library-imp*! nV2ae9@set-library-imp*!) (set! nV2aeb@library-vis* (lambda (nV2b76@x) (simple-struct-ref nV2b76@x '4))) (set! nV2cd6@nV2aeb@library-vis* nV2aeb@library-vis*) (set! nV2aed@set-library-vis*! (lambda (nV2b78@x nV2b79@val) (simple-struct-set! nV2b78@x '4 nV2b79@val))) (set! nV2cd7@nV2aed@set-library-vis*! nV2aed@set-library-vis*!) (set! nV2aef@library-inv* (lambda (nV2b7c@x) (simple-struct-ref nV2b7c@x '5))) (set! nV2cd8@nV2aef@library-inv* nV2aef@library-inv*) (set! nV2af1@set-library-inv*! (lambda (nV2b7e@x nV2b7f@val) (simple-struct-set! nV2b7e@x '5 nV2b7f@val))) (set! nV2cd9@nV2af1@set-library-inv*! nV2af1@set-library-inv*!) (set! nV2af3@library-subst (lambda (nV2b82@x) (simple-struct-ref nV2b82@x '6))) (set! nV2cda@nV2af3@library-subst nV2af3@library-subst) (set! nV2af5@set-library-subst! (lambda (nV2b84@x nV2b85@val) (simple-struct-set! nV2b84@x '6 nV2b85@val))) (set! nV2cdb@nV2af5@set-library-subst! nV2af5@set-library-subst!) (set! nV2af7@library-env (lambda (nV2b88@x) (simple-struct-ref nV2b88@x '7))) (set! nV2cdc@nV2af7@library-env nV2af7@library-env) (set! nV2af9@set-library-env! (lambda (nV2b8a@x nV2b8b@val) (simple-struct-set! nV2b8a@x '7 nV2b8b@val))) (set! nV2cdd@nV2af9@set-library-env! nV2af9@set-library-env!) (set! nV2afb@library-visit-state (lambda (nV2b8e@x) (simple-struct-ref nV2b8e@x '8))) (set! nV2cde@nV2afb@library-visit-state nV2afb@library-visit-state) (set! nV2afd@set-library-visit-state! (lambda (nV2b90@x nV2b91@val) (simple-struct-set! nV2b90@x '8 nV2b91@val))) (set! nV2cdf@nV2afd@set-library-visit-state! nV2afd@set-library-visit-state!) (set! nV2aff@library-invoke-state (lambda (nV2b94@x) (simple-struct-ref nV2b94@x '9))) (set! nV2ce0@nV2aff@library-invoke-state nV2aff@library-invoke-state) (set! nV2b01@set-library-invoke-state! (lambda (nV2b96@x nV2b97@val) (simple-struct-set! nV2b96@x '9 nV2b97@val))) (set! nV2ce1@nV2b01@set-library-invoke-state! nV2b01@set-library-invoke-state!) (set! nV2b03@library-visit-code (lambda (nV2b9a@x) (simple-struct-ref nV2b9a@x '10))) (set! nV2ce2@nV2b03@library-visit-code nV2b03@library-visit-code) (set! nV2b05@set-library-visit-code! (lambda (nV2b9c@x nV2b9d@val) (simple-struct-set! nV2b9c@x '10 nV2b9d@val))) (set! nV2ce3@nV2b05@set-library-visit-code! nV2b05@set-library-visit-code!) (set! nV2b07@library-invoke-code (lambda (nV2ba0@x) (simple-struct-ref nV2ba0@x '11))) (set! nV2ce4@nV2b07@library-invoke-code nV2b07@library-invoke-code) (set! nV2b09@set-library-invoke-code! (lambda (nV2ba2@x nV2ba3@val) (simple-struct-set! nV2ba2@x '11 nV2ba3@val))) (set! nV2ce5@nV2b09@set-library-invoke-code! nV2b09@set-library-invoke-code!) (set! nV2b0b@library-visible? (lambda (nV2ba6@x) (simple-struct-ref nV2ba6@x '12))) (set! nV2ce6@nV2b0b@library-visible? nV2b0b@library-visible?) (set! nV2b0d@set-library-visible?! (lambda (nV2ba8@x nV2ba9@val) (simple-struct-set! nV2ba8@x '12 nV2ba9@val))) (set! nV2ce7@nV2b0d@set-library-visible?! nV2b0d@set-library-visible?!) (set! nV2b0f@library-source-file-name (lambda (nV2bac@x) (simple-struct-ref nV2bac@x '13))) (set! nV2ce8@nV2b0f@library-source-file-name nV2b0f@library-source-file-name) (set! nV2b11@set-library-source-file-name! (lambda (nV2bae@x nV2baf@val) (simple-struct-set! nV2bae@x '13 nV2baf@val))) (set! nV2ce9@nV2b11@set-library-source-file-name! nV2b11@set-library-source-file-name!) (set! nV2b13@dummy '3) (set! nV2cea@nV2b13@dummy nV2b13@dummy) (set! nV2b15@find-dependencies (lambda (nV2bb2@ls) (if (null? nV2bb2@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! nV2ceb@nV2b15@find-dependencies nV2b15@find-dependencies) (set! nV2b17@find-library-by (lambda (nV2bb4@pred) (let nV2bb8@f ((nV2bb6@ls ((nV2acd@current-library-collection)))) (if (null? nV2bb6@ls) '#f (if (nV2bb4@pred (car nV2bb6@ls)) (car nV2bb6@ls) (nV2bb8@f (cdr nV2bb6@ls))))))) (set! nV2cec@nV2b17@find-library-by nV2b17@find-library-by) (set! nV2b19@library-path (nV2a23@nV2901@make-parameter '(".") (lambda (nV2bba@x) (if (and (list? nV2bba@x) (for-all string? nV2bba@x)) (map (lambda (nV2bbc@x) nV2bbc@x) nV2bba@x) (assertion-violation 'library-path '"not a list of strings" nV2bba@x))))) (set! nV2ced@nV2b19@library-path nV2b19@library-path) (set! nV2b1b@library-extensions (nV2a23@nV2901@make-parameter '(".sls" ".ss" ".scm") (lambda (nV2bbe@x) (if (and (list? nV2bbe@x) (for-all string? nV2bbe@x)) (map (lambda (nV2bc0@x) nV2bc0@x) nV2bbe@x) (assertion-violation 'library-extensions '"not a list of strings" nV2bbe@x))))) (set! nV2cee@nV2b1b@library-extensions nV2b1b@library-extensions) (set! nV2b1d@library-name->file-name (lambda (nV2bc2@x) (call-with-values (lambda () (open-string-output-port)) (lambda (nV2bc8@nV2bc5 nV2bc9@nV2bc7) (let ((nV2bcc@extract nV2bc9@nV2bc7) (nV2bcd@p nV2bc8@nV2bc5)) (let ((nV2bd1@display-hex '#f)) (begin (set! nV2bd1@display-hex (lambda (nV2bda@n) (if (<= '0 nV2bda@n '9) (display nV2bda@n nV2bcd@p) (display (integer->char (+ (char->integer '#\a) (- nV2bda@n '10))) nV2bcd@p)))) (begin (let nV2bd4@f ((nV2bd2@ls nV2bc2@x)) (if (not (null? nV2bd2@ls)) (begin (display '"/" nV2bcd@p) (for-each (lambda (nV2bd6@c) (if (or (char<=? '#\a nV2bd6@c '#\z) (char<=? '#\A nV2bd6@c '#\Z) (char<=? '#\0 nV2bd6@c '#\9) (memv nV2bd6@c '(#\- #\. #\_ #\~))) (display nV2bd6@c nV2bcd@p) (begin (display '"%" nV2bcd@p) (let ((nV2bd8@n (char->integer nV2bd6@c))) (begin (nV2bd1@display-hex (quotient nV2bd8@n '16)) (nV2bd1@display-hex (remainder nV2bd8@n '16))))))) (string->list (symbol->string (car nV2bd2@ls)))) (nV2bd4@f (cdr nV2bd2@ls))) (void))) (nV2bcc@extract))))))))) (set! nV2cef@nV2b1d@library-name->file-name nV2b1d@library-name->file-name) (set! nV2b1f@file-locator (nV2a23@nV2901@make-parameter (lambda (nV2bdc@x) (let ((nV2bde@str (nV2b1d@library-name->file-name nV2bdc@x))) (let nV2be6@f ((nV2be0@ls (nV2b19@library-path)) (nV2be1@exts (nV2b1b@library-extensions)) (nV2be2@failed-list '())) (if (null? nV2be0@ls) (let ((nV2bf0@nV2beb '#f) (nV2bf2@nV2bed '#f) (nV2bf4@nV2bec '#f) (nV2bf7@nV2bea '#f) (nV2bf9@make-library-resolution-condition '#f) (nV2bfb@nV2be8 '#f) (nV2bfd@nV2be9 '#f) (nV2bff@library-resolution-condition? '#f) (nV2c01@condition-library '#f) (nV2c03@condition-files '#f)) (begin (set! nV2bf0@nV2beb (make-record-type-descriptor '&library-resolution nV4f06@nV4c4d@&condition-rtd 'nV2bee '#f '#f '#((immutable library) (immutable files)))) (set! nV2bf2@nV2bed '#f) (set! nV2bf4@nV2bec (make-record-constructor-descriptor nV2bf0@nV2beb nV4f07@nV4c4f@&condition-rcd nV2bf2@nV2bed)) (set! nV2bf7@nV2bea (record-predicate nV2bf0@nV2beb)) (set! nV2bf9@make-library-resolution-condition (record-constructor nV2bf4@nV2bec)) (set! nV2bfb@nV2be8 (record-accessor nV2bf0@nV2beb '0)) (set! nV2bfd@nV2be9 (record-accessor nV2bf0@nV2beb '1)) (set! nV2bff@library-resolution-condition? (condition-predicate nV2bf0@nV2beb)) (set! nV2c01@condition-library (condition-accessor nV2bf0@nV2beb nV2bfb@nV2be8)) (set! nV2c03@condition-files (condition-accessor nV2bf0@nV2beb nV2bfd@nV2be9)) (raise (condition (nV4f26@nV4ce7@make-error) (nV4f48@nV4d43@make-who-condition 'expander) (nV4f0c@nV4ca4@make-message-condition '"cannot locate library in library-path") (nV2bf9@make-library-resolution-condition nV2bdc@x (reverse nV2be2@failed-list)))))) (if (null? nV2be1@exts) (nV2be6@f (cdr nV2be0@ls) (nV2b1b@library-extensions) nV2be2@failed-list) (let ((nV2c04@name (string-append (car nV2be0@ls) nV2bde@str (car nV2be1@exts)))) (if (file-exists? nV2c04@name) nV2c04@name (nV2be6@f nV2be0@ls (cdr nV2be1@exts) (cons nV2c04@name nV2be2@failed-list))))))))) (lambda (nV2c06@f) (if (procedure? nV2c06@f) nV2c06@f (assertion-violation 'file-locator '"not a procedure" nV2c06@f))))) (set! nV2cf0@nV2b1f@file-locator nV2b1f@file-locator) (set! nV2b21@serialize-all (lambda (nV2c08@serialize nV2c09@compile) (let ((nV2c0d@library-desc '#f)) (begin (set! nV2c0d@library-desc (lambda (nV2c10@x) (list (nV2adb@library-id nV2c10@x) (nV2adf@library-name nV2c10@x)))) (for-each (lambda (nV2c0e@x) (if (nV2b0f@library-source-file-name nV2c0e@x) (nV2c08@serialize (nV2b0f@library-source-file-name nV2c0e@x) (list (nV2adb@library-id nV2c0e@x) (nV2adf@library-name nV2c0e@x) (nV2ae3@library-version nV2c0e@x) (map nV2c0d@library-desc (nV2ae7@library-imp* nV2c0e@x)) (map nV2c0d@library-desc (nV2aeb@library-vis* nV2c0e@x)) (map nV2c0d@library-desc (nV2aef@library-inv* nV2c0e@x)) (nV2af3@library-subst nV2c0e@x) (nV2af7@library-env nV2c0e@x) (nV2c09@compile (nV2b03@library-visit-code nV2c0e@x)) (nV2c09@compile (nV2b07@library-invoke-code nV2c0e@x)) (nV2b0b@library-visible? nV2c0e@x))) (void))) ((nV2acd@current-library-collection))))))) (set! nV2cf1@nV2b21@serialize-all nV2b21@serialize-all) (set! nV2b23@current-precompiled-library-loader (nV2a23@nV2901@make-parameter (lambda (nV2c12@filename nV2c13@sk) '#f))) (set! nV2cf2@nV2b23@current-precompiled-library-loader nV2b23@current-precompiled-library-loader) (set! nV2b25@try-load-from-file (lambda (nV2c16@filename) ((nV2b23@current-precompiled-library-loader) nV2c16@filename (lambda nV2c3c (let ((nV2c3d (length nV2c3c))) (if (= nV2c3d '11) (apply (lambda (nV2c18@id nV2c19@name nV2c1a@ver nV2c1b@imp* nV2c1c@vis* nV2c1d@inv* nV2c1e@exp-subst nV2c1f@exp-env nV2c20@visit-proc nV2c21@invoke-proc nV2c22@visible?) (let nV2c30@f ((nV2c2e@deps (append nV2c1b@imp* nV2c1c@vis* nV2c1d@inv*))) (if (null? nV2c2e@deps) (begin (nV2b39@install-library nV2c18@id nV2c19@name nV2c1a@ver nV2c1b@imp* nV2c1c@vis* nV2c1d@inv* nV2c1e@exp-subst nV2c1f@exp-env nV2c20@visit-proc nV2c21@invoke-proc '#f '#f nV2c22@visible? '#f) '#t) (let ((nV2c32@d (car nV2c2e@deps))) (let ((nV2c34@label (car nV2c32@d)) (nV2c35@dname (cadr nV2c32@d))) (let ((nV2c38@l (nV2b2f@find-library-by-name nV2c35@dname))) (if (and (nV2ad9@library? nV2c38@l) (eq? nV2c34@label (nV2adb@library-id nV2c38@l))) (nV2c30@f (cdr nV2c2e@deps)) (begin (if nV2a1d@nV28f5@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" nV2c19@name nV2c35@dname nV2c16@filename nV2c38@l nV2c34@label (nV2adb@library-id nV2c38@l)) (void)) '#f)))))))) nV2c3c) (if (>= nV2c3d '0) (apply (lambda nV2c3a@others '#f) nV2c3c) (error 'apply '"invalid arg count")))))))) (set! nV2cf3@nV2b25@try-load-from-file nV2b25@try-load-from-file) (set! nV2b27@library-loader (nV2a23@nV2901@make-parameter (lambda (nV2c3e@x) (let ((nV2c40@file-name ((nV2b1f@file-locator) nV2c3e@x))) (if (not nV2c40@file-name) (assertion-violation '#f '"cannot file library" nV2c3e@x) (or (nV2b25@try-load-from-file nV2c40@file-name) ((nV2b29@current-library-expander) (nV2a22@nV28ff@read-library-source-file nV2c40@file-name) nV2c40@file-name (lambda (nV2c42@name) (if (not (fast-equal? nV2c42@name nV2c3e@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (nV2c48@nV2c45 nV2c49@nV2c47) (let ((nV2c4c@e nV2c49@nV2c47) (nV2c4d@p nV2c48@nV2c45)) (begin (display '"expected to find library " nV2c4d@p) (write nV2c3e@x nV2c4d@p) (display '" in file " nV2c4d@p) (display nV2c40@file-name nV2c4d@p) (display '", found " nV2c4d@p) (write nV2c42@name nV2c4d@p) (display '" instead" nV2c4d@p) (nV2c4c@e)))))) (void)))))))) (lambda (nV2c50@f) (if (procedure? nV2c50@f) nV2c50@f (assertion-violation 'library-locator '"not a procedure" nV2c50@f))))) (set! nV2cf4@nV2b27@library-loader nV2b27@library-loader) (set! nV2b29@current-library-expander (nV2a23@nV2901@make-parameter (lambda (nV2c52@x) (assertion-violation 'library-expander '"not initialized")) (lambda (nV2c54@f) (if (procedure? nV2c54@f) nV2c54@f (assertion-violation 'library-expander '"not a procedure" nV2c54@f))))) (set! nV2cf5@nV2b29@current-library-expander nV2b29@current-library-expander) (set! nV2b2b@external-pending-libraries (nV2a23@nV2901@make-parameter '())) (set! nV2cf6@nV2b2b@external-pending-libraries nV2b2b@external-pending-libraries) (set! nV2b2d@find-external-library (lambda (nV2c56@name) (begin (if (member nV2c56@name (nV2b2b@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" nV2c56@name) (void)) (let ((nV2c5c@nV2c59 nV2b2b@external-pending-libraries) (nV2c5d@nV2c5b (cons nV2c56@name (nV2b2b@external-pending-libraries)))) (let ((nV2c60@swap (lambda () (let ((nV2c62@t (nV2c5c@nV2c59))) (begin (nV2c5c@nV2c59 nV2c5d@nV2c5b) (set! nV2c5d@nV2c5b nV2c62@t)))))) (dynamic-wind nV2c60@swap (lambda () (begin ((nV2b27@library-loader) nV2c56@name) (or (nV2b17@find-library-by (lambda (nV2c64@x) (fast-equal? (nV2adf@library-name nV2c64@x) nV2c56@name))) (assertion-violation '#f '"handling external library did not yield the correct library" nV2c56@name)))) nV2c60@swap)))))) (set! nV2cf7@nV2b2d@find-external-library nV2b2d@find-external-library) (set! nV2b2f@find-library-by-name (lambda (nV2c66@name) (or (nV2b17@find-library-by (lambda (nV2c68@x) (fast-equal? (nV2adf@library-name nV2c68@x) nV2c66@name))) (nV2b2d@find-external-library nV2c66@name)))) (set! nV2cf8@nV2b2f@find-library-by-name nV2b2f@find-library-by-name) (set! nV2b31@library-exists? (lambda (nV2c6a@name) (and (nV2b17@find-library-by (lambda (nV2c6c@x) (fast-equal? (nV2adf@library-name nV2c6c@x) nV2c6a@name))) '#t))) (set! nV2cf9@nV2b31@library-exists? nV2b31@library-exists?) (set! nV2b33@find-library-by-spec/die (lambda (nV2c6e@spec) (let ((nV2c70@id (car nV2c6e@spec))) (or (nV2b17@find-library-by (lambda (nV2c72@x) (eq? nV2c70@id (nV2adb@library-id nV2c72@x)))) (assertion-violation '#f '"cannot find library with required spec" nV2c6e@spec))))) (set! nV2cfa@nV2b33@find-library-by-spec/die nV2b33@find-library-by-spec/die) (set! nV2b35@label->binding-table (make-eq-hashtable)) (set! nV2cfb@nV2b35@label->binding-table nV2b35@label->binding-table) (set! nV2b37@install-library-record (lambda (nV2c74@lib) (begin (let ((nV2c76@exp-env (nV2af7@library-env nV2c74@lib))) (for-each (lambda (nV2c78@x) (let ((nV2c7a@label (car nV2c78@x)) (nV2c7b@binding (cdr nV2c78@x))) (let ((nV2c7e@binding (let ((nV2c80@t (car nV2c7b@binding))) (if (memv nV2c80@t '(global)) (cons 'global (cons nV2c74@lib (cdr nV2c7b@binding))) (if (memv nV2c80@t '(global-macro)) (cons 'global-macro (cons nV2c74@lib (cdr nV2c7b@binding))) (if (memv nV2c80@t '(global-macro!)) (cons 'global-macro! (cons nV2c74@lib (cdr nV2c7b@binding))) nV2c7b@binding)))))) (begin (if (hashtable-ref nV2b35@label->binding-table nV2c7a@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" nV2c7a@label (hashtable-ref nV2b35@label->binding-table nV2c7a@label '#f) nV2c7e@binding) (exit)) (void)) (hashtable-set! nV2b35@label->binding-table nV2c7a@label nV2c7e@binding))))) nV2c76@exp-env)) ((nV2acd@current-library-collection) nV2c74@lib)))) (set! nV2cfc@nV2b37@install-library-record nV2b37@install-library-record) (set! nV2b39@install-library (lambda (nV2c82@id nV2c83@name nV2c84@ver nV2c85@imp* nV2c86@vis* nV2c87@inv* nV2c88@exp-subst nV2c89@exp-env nV2c8a@visit-proc nV2c8b@invoke-proc nV2c8c@visit-code nV2c8d@invoke-code nV2c8e@visible? nV2c8f@source-file-name) (let ((nV2c9e@imp-lib* (map nV2b33@find-library-by-spec/die nV2c85@imp*)) (nV2c9f@vis-lib* (map nV2b33@find-library-by-spec/die nV2c86@vis*)) (nV2ca0@inv-lib* (map nV2b33@find-library-by-spec/die nV2c87@inv*))) (begin (if (not (and (symbol? nV2c82@id) (list? nV2c83@name) (list? nV2c84@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" nV2c82@id nV2c83@name nV2c84@ver) (void)) (if (nV2b31@library-exists? nV2c83@name) (assertion-violation 'install-library '"library is already installed" nV2c83@name) (void)) (let ((nV2ca4@lib (make-simple-struct 'library '15 (list nV2c82@id nV2c83@name nV2c84@ver nV2c9e@imp-lib* nV2c9f@vis-lib* nV2ca0@inv-lib* nV2c88@exp-subst nV2c89@exp-env nV2c8a@visit-proc nV2c8b@invoke-proc nV2c8c@visit-code nV2c8d@invoke-code nV2c8e@visible? nV2c8f@source-file-name)))) (nV2b37@install-library-record nV2ca4@lib)))))) (set! nV2cfd@nV2b39@install-library nV2b39@install-library) (set! nV2b3b@imported-label->binding (lambda (nV2ca6@lab) (hashtable-ref nV2b35@label->binding-table nV2ca6@lab '#f))) (set! nV2cfe@nV2b3b@imported-label->binding nV2b3b@imported-label->binding) (set! nV2b3d@invoke-library (lambda (nV2ca8@lib) (let ((nV2caa@invoke (nV2aff@library-invoke-state nV2ca8@lib))) (if (procedure? nV2caa@invoke) (begin (nV2b01@set-library-invoke-state! nV2ca8@lib (lambda () (assertion-violation 'invoke '"circularity detected" nV2ca8@lib))) (for-each nV2b3d@invoke-library (nV2aef@library-inv* nV2ca8@lib)) (nV2b01@set-library-invoke-state! nV2ca8@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" nV2ca8@lib))) (nV2caa@invoke) (nV2b01@set-library-invoke-state! nV2ca8@lib '#t)) (void))))) (set! nV2cff@nV2b3d@invoke-library nV2b3d@invoke-library) (set! nV2b3f@visit-library (lambda (nV2cac@lib) (let ((nV2cae@visit (nV2afb@library-visit-state nV2cac@lib))) (if (procedure? nV2cae@visit) (begin (nV2afd@set-library-visit-state! nV2cac@lib (lambda () (assertion-violation 'visit '"circularity detected" nV2cac@lib))) (for-each nV2b3d@invoke-library (nV2aeb@library-vis* nV2cac@lib)) (nV2afd@set-library-visit-state! nV2cac@lib (lambda () (assertion-violation 'invoke '"first visit did not return" nV2cac@lib))) (nV2cae@visit) (nV2afd@set-library-visit-state! nV2cac@lib '#t)) (void))))) (set! nV2d00@nV2b3f@visit-library nV2b3f@visit-library) (set! nV2b41@invoke-library-by-spec (lambda (nV2cb0@spec) (nV2b3d@invoke-library (nV2b33@find-library-by-spec/die nV2cb0@spec)))) (set! nV2d01@nV2b41@invoke-library-by-spec nV2b41@invoke-library-by-spec) (set! nV2b43@invoke-library-by-name (lambda (nV2cb2@name) (let ((nV2cb8@nV2cb5 nV2a24@nV2903@mosh-cache-dir) (nV2cb9@nV2cb7 (create-mosh-cache-dir))) (let ((nV2cbc@swap (lambda () (let ((nV2cbe@t (nV2cb8@nV2cb5))) (begin (nV2cb8@nV2cb5 nV2cb9@nV2cb7) (set! nV2cb9@nV2cb7 nV2cbe@t)))))) (dynamic-wind nV2cbc@swap (lambda () (nV2b3d@invoke-library (nV2b2f@find-library-by-name nV2cb2@name))) nV2cbc@swap))))) (set! nV2d02@nV2b43@invoke-library-by-name nV2b43@invoke-library-by-name) (set! nV2b45@installed-libraries (lambda nV2cc6 (let ((nV2cc7 (length nV2cc6))) (if (= nV2cc7 '1) (apply (lambda (nV2cc0@all?) (let nV2cc4@f ((nV2cc2@ls ((nV2acd@current-library-collection)))) (if (null? nV2cc2@ls) '() (if (or nV2cc0@all? (nV2b0b@library-visible? (car nV2cc2@ls))) (cons (car nV2cc2@ls) (nV2cc4@f (cdr nV2cc2@ls))) (nV2cc4@f (cdr nV2cc2@ls)))))) nV2cc6) (if (= nV2cc7 '0) (apply (lambda () (nV2b45@installed-libraries '#f)) nV2cc6) (error 'apply '"invalid arg count")))))) (set! nV2d03@nV2b45@installed-libraries nV2b45@installed-libraries) (set! nV2b47@library-spec (lambda (nV2cc8@x) (begin (if (not (nV2ad9@library? nV2cc8@x)) (assertion-violation 'library-spec '"not a library" nV2cc8@x) (void)) (list (nV2adb@library-id nV2cc8@x) (nV2adf@library-name nV2cc8@x) (nV2ae3@library-version nV2cc8@x))))) (set! nV2d04@nV2b47@library-spec nV2b47@library-spec) (void))
(begin (set! nV2d08@build-global-define (unspecified)) (set! nV2d79@build-lambda (unspecified)) (set! nV2d7b@build-case-lambda (unspecified)) (set! nV2da9@build-sequence (unspecified)) (set! nV2dab@build-void (unspecified)) (set! nV2dad@build-letrec (unspecified)) (set! nV2daf@build-let (unspecified)) (set! nV2db1@build-named-let (unspecified)) (set! nV2db3@build-letrec* (unspecified)) (set! nV2db5@build-library-letrec* (unspecified)) (set! nV2db7@build-receive (unspecified)) (set! nV2d08@build-global-define (lambda (nV2db8@x) (nV2dab@build-void))) (set! nV2e4c@nV2d08@build-global-define nV2d08@build-global-define) (set! nV2d79@build-lambda (lambda (nV2dba@ae nV2dbb@vars nV2dbc@exp) (list 'lambda nV2dbb@vars nV2dbc@exp))) (set! nV2e4d@nV2d79@build-lambda nV2d79@build-lambda) (set! nV2d7b@build-case-lambda (lambda (nV2dc0@ae nV2dc1@vars* nV2dc2@exp*) (let ((nV2dc7@build-error '#f) (nV2dc9@build-pred '#f) (nV2dcb@build-apply '#f) (nV2dcd@expand-case-lambda '#f)) (begin (set! nV2dc7@build-error (lambda (nV2dfe@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! nV2dc9@build-pred (lambda (nV2de6@ae nV2de7@n nV2de8@vars) (call-with-values (lambda () (let nV2df4@f ((nV2df0@vars nV2de8@vars) (nV2df1@count '0)) (if (pair? nV2df0@vars) (nV2df4@f (cdr nV2df0@vars) (+ nV2df1@count '1)) (if (null? nV2df0@vars) (values nV2df1@count '=) (values nV2df1@count '>=))))) (lambda (nV2df6@nV2ded nV2df7@nV2def) (let ((nV2dfa@pred nV2df7@nV2def) (nV2dfb@count nV2df6@nV2ded)) (list (list 'primitive nV2dfa@pred) nV2de7@n (list 'quote nV2dfb@count))))))) (set! nV2dcb@build-apply (lambda (nV2dde@ae nV2ddf@g nV2de0@vars nV2de1@exp) (list '(primitive apply) (nV2d79@build-lambda nV2dde@ae nV2de0@vars nV2de1@exp) nV2ddf@g))) (set! nV2dcd@expand-case-lambda (lambda (nV2dce@ae nV2dcf@vars nV2dd0@exp*) (let ((nV2dd4@g (gensym)) (nV2dd5@n (gensym))) (list 'lambda nV2dd4@g (nV2daf@build-let nV2dce@ae (list nV2dd5@n) (list (list '(primitive length) nV2dd4@g)) (let nV2ddc@f ((nV2dd8@vars* nV2dc1@vars*) (nV2dd9@exp* nV2dd0@exp*)) (if (null? nV2dd8@vars*) (nV2dc7@build-error nV2dce@ae) (list 'if (nV2dc9@build-pred nV2dce@ae nV2dd5@n (car nV2dd8@vars*)) (nV2dcb@build-apply nV2dce@ae nV2dd4@g (car nV2dd8@vars*) (car nV2dd9@exp*)) (nV2ddc@f (cdr nV2dd8@vars*) (cdr nV2dd9@exp*)))))))))) (if (= (length nV2dc2@exp*) '1) (nV2d79@build-lambda nV2dc0@ae (car nV2dc1@vars*) (car nV2dc2@exp*)) (nV2dcd@expand-case-lambda nV2dc0@ae nV2dc1@vars* nV2dc2@exp*)))))) (set! nV2e4e@nV2d7b@build-case-lambda nV2d7b@build-case-lambda) (set! nV2da9@build-sequence (lambda (nV2e00@ae nV2e01@exps) (let nV2e06@loop ((nV2e04@exps nV2e01@exps)) (if (null? (cdr nV2e04@exps)) (car nV2e04@exps) (if (equal? (car nV2e04@exps) (nV2dab@build-void)) (nV2e06@loop (cdr nV2e04@exps)) (cons 'begin nV2e04@exps)))))) (set! nV2e4f@nV2da9@build-sequence nV2da9@build-sequence) (set! nV2dab@build-void (lambda () '((primitive void)))) (set! nV2e50@nV2dab@build-void nV2dab@build-void) (set! nV2dad@build-letrec (lambda (nV2e08@ae nV2e09@vars nV2e0a@val-exps nV2e0b@body-exp) (if (null? nV2e09@vars) nV2e0b@body-exp (list 'letrec (map list nV2e09@vars nV2e0a@val-exps) nV2e0b@body-exp)))) (set! nV2e51@nV2dad@build-letrec nV2dad@build-letrec) (set! nV2daf@build-let (lambda (nV2e10@ae nV2e11@vars nV2e12@val-exps nV2e13@body-exp) (if (null? nV2e11@vars) nV2e13@body-exp (list 'let (map list nV2e11@vars nV2e12@val-exps) nV2e13@body-exp)))) (set! nV2e52@nV2daf@build-let nV2daf@build-let) (set! nV2db1@build-named-let (lambda (nV2e18@ae nV2e19@name nV2e1a@vars nV2e1b@val-exps nV2e1c@body-exp) (list 'let nV2e19@name (map list nV2e1a@vars nV2e1b@val-exps) nV2e1c@body-exp))) (set! nV2e53@nV2db1@build-named-let nV2db1@build-named-let) (set! nV2db3@build-letrec* (lambda (nV2e22@ae nV2e23@vars nV2e24@val-exps nV2e25@body-exp) (if (null? nV2e23@vars) nV2e25@body-exp (nV2daf@build-let nV2e22@ae nV2e23@vars (map (lambda (nV2e2a@x) (list 'quote '#f)) nV2e23@vars) (nV2da9@build-sequence nV2e22@ae (append (map (lambda (nV2e2c@lhs nV2e2d@rhs) (list 'set! nV2e2c@lhs nV2e2d@rhs)) nV2e23@vars nV2e24@val-exps) (list nV2e25@body-exp))))))) (set! nV2e54@nV2db3@build-letrec* nV2db3@build-letrec*) (set! nV2db5@build-library-letrec* (lambda (nV2e30@ae nV2e31@name nV2e32@vars nV2e33@locs nV2e34@val-exps nV2e35@body-exp) (cons 'begin (append (map (lambda (nV2e3c@var) (cons 'set! (cons nV2e3c@var '((unspecified))))) nV2e32@vars) (append (apply append (map (lambda (nV2e3e@var nV2e3f@loc nV2e40@val-exp) (list (list 'set! nV2e3e@var nV2e40@val-exp) (list 'set! nV2e3f@loc nV2e3e@var))) nV2e32@vars nV2e33@locs nV2e34@val-exps)) (list nV2e35@body-exp)))))) (set! nV2e55@nV2db5@build-library-letrec* nV2db5@build-library-letrec*) (set! nV2db7@build-receive (lambda (nV2e44@ae nV2e45@vars nV2e46@producer nV2e47@body*) (begin (display '"************** in ") (cons 'receive (cons nV2e45@vars (cons nV2e46@producer nV2e47@body*)))))) (set! nV2e56@nV2db7@build-receive nV2db7@build-receive) (void))
(begin (set! nV2e65@file-options-macro (unspecified)) (set! nV2e67@set-cons (unspecified)) (set! nV2e69@set-union (unspecified)) (set! nV2e6e@top-mark* (unspecified)) (set! nV2e70@top-marked? (unspecified)) (set! nV2e72@gen-lexical (unspecified)) (set! nV2e74@gen-global (unspecified)) (set! nV2e76@gen-label (unspecified)) (set! nV2e78@gen-top-level-label (unspecified)) (set! nV2e7a@gen-define-label+loc (unspecified)) (set! nV2e7c@gen-define-label (unspecified)) (set! nV2e86@rib? (unspecified)) (set! nV2e88@rib-sym* (unspecified)) (set! nV2e8a@set-rib-sym*! (unspecified)) (set! nV2e8c@rib-mark** (unspecified)) (set! nV2e8e@set-rib-mark**! (unspecified)) (set! nV2e90@rib-label* (unspecified)) (set! nV2e92@set-rib-label*! (unspecified)) (set! nV2e94@rib-sealed/freq (unspecified)) (set! nV2e96@set-rib-sealed/freq! (unspecified)) (set! nV2e98@rib-cache (unspecified)) (set! nV2e9a@set-rib-cache! (unspecified)) (set! nV2e9c@dummy (unspecified)) (set! nV2e9e@make-empty-rib (unspecified)) (set! nV2ea0@extend-rib! (unspecified)) (set! nV2ea2@extend-rib/nc! (unspecified)) (set! nV2ea4@make-rib-map (unspecified)) (set! nV2ea6@seal-rib! (unspecified)) (set! nV2ea8@unseal-rib! (unspecified)) (set! nV2eaa@make-full-rib (unspecified)) (set! nV2eac@rp (unspecified)) (set! nV2eb6@stx? (unspecified)) (set! nV2eb8@stx-expr (unspecified)) (set! nV2eba@set-stx-expr! (unspecified)) (set! nV2ebc@stx-mark* (unspecified)) (set! nV2ebe@set-stx-mark*! (unspecified)) (set! nV2ec0@stx-subst* (unspecified)) (set! nV2ec2@set-stx-subst*! (unspecified)) (set! nV2ec4@stx-ae* (unspecified)) (set! nV2ec6@set-stx-ae*! (unspecified)) (set! nV2ec8@dummy (unspecified)) (set! nV2eca@datum->stx (unspecified)) (set! nV2ecc@gen-mark (unspecified)) (set! nV2ece@anti-mark (unspecified)) (set! nV2ed0@anti-mark? (unspecified)) (set! nV2ed2@mkstx (unspecified)) (set! nV2ed4@add-mark (unspecified)) (set! nV2ed6@add-subst (unspecified)) (set! nV2ed8@syntax-kind? (unspecified)) (set! nV2eda@syntax-vector->list (unspecified)) (set! nV2edc@syntax-pair? (unspecified)) (set! nV2ede@syntax-vector? (unspecified)) (set! nV2ee0@syntax-null? (unspecified)) (set! nV2ee2@syntax-list? (unspecified)) (set! nV2ee4@syntax-car (unspecified)) (set! nV2ee6@syntax-cdr (unspecified)) (set! nV2ee8@syntax->list (unspecified)) (set! nV2eea@id? (unspecified)) (set! nV2eec@id->sym (unspecified)) (set! nV2eee@bound-id=? (unspecified)) (set! nV2ef0@free-id=? (unspecified)) (set! nV2ef2@valid-bound-ids? (unspecified)) (set! nV2ef4@distinct-bound-ids? (unspecified)) (set! nV2ef6@bound-id-member? (unspecified)) (set! nV2ef8@self-evaluating? (unspecified)) (set! nV2efa@strip-annotations (unspecified)) (set! nV2efc@strip (unspecified)) (set! nV2efe@stx->datum (unspecified)) (set! nV2f00@id->label (unspecified)) (set! nV2f02@label->binding (unspecified)) (set! nV2f04@make-binding (unspecified)) (set! nV2f06@binding-type (unspecified)) (set! nV2f08@binding-value (unspecified)) (set! nV2f0a@raise-unbound-error (unspecified)) (set! nV2f0c@syntax-type (unspecified)) (set! nV2f1a@sanitize-binding (unspecified)) (set! nV2f1c@make-variable-transformer (unspecified)) (set! nV2f1e@variable-transformer? (unspecified)) (set! nV2f20@variable-transformer-procedure (unspecified)) (set! nV2f22@make-eval-transformer (unspecified)) (set! nV3073@parse-define (unspecified)) (set! nV3075@parse-define-syntax (unspecified)) (set! nV3077@scheme-stx-hashtable (unspecified)) (set! nV3079@scheme-stx (unspecified)) (set! nV307b@lexical-var (unspecified)) (set! nV307d@lexical-mutable? (unspecified)) (set! nV307f@set-lexical-mutable! (unspecified)) (set! nV3081@add-lexical (unspecified)) (set! nV3083@add-lexicals (unspecified)) (set! nV3085@letrec-helper (unspecified)) (set! nV3087@let-transformer (unspecified)) (set! nV3089@letrec-transformer (unspecified)) (set! nV308b@letrec*-transformer (unspecified)) (set! nV308d@fluid-let-syntax-transformer (unspecified)) (set! nV308f@type-descriptor-transformer (unspecified)) (set! nV3091@record-type-descriptor-transformer (unspecified)) (set! nV3093@record-constructor-descriptor-transformer (unspecified)) (set! nV3095@when-macro (unspecified)) (set! nV3097@unless-macro (unspecified)) (set! nV3099@if-transformer (unspecified)) (set! nV309b@and-transformer (unspecified)) (set! nV309d@or-transformer (unspecified)) (set! nV309f@case-macro (unspecified)) (set! nV30a1@quote-transformer (unspecified)) (set! nV30a3@case-lambda-transformer (unspecified)) (set! nV30a5@lambda-transformer (unspecified)) (set! nV30a7@bless (unspecified)) (set! nV30a9@with-syntax-macro (unspecified)) (set! nV30ab@invalid-fmls-error (unspecified)) (set! nV30ad@let-macro (unspecified)) (set! nV30af@let-values-macro (unspecified)) (set! nV30b1@let*-values-macro (unspecified)) (set! nV30b3@trace-lambda-macro (unspecified)) (set! nV30b5@trace-define-macro (unspecified)) (set! nV30b7@trace-define-syntax-macro (unspecified)) (set! nV30b9@trace-let/rec-syntax (unspecified)) (set! nV30bb@trace-let-syntax-macro (unspecified)) (set! nV30bd@trace-letrec-syntax-macro (unspecified)) (set! nV30bf@guard-macro (unspecified)) (set! nV30c1@define-enumeration-macro (unspecified)) (set! nV30c3@time-macro (unspecified)) (set! nV30c5@delay-macro (unspecified)) (set! nV30c7@assert-macro (unspecified)) (set! nV30c9@endianness-macro (unspecified)) (set! nV30cb@identifier-syntax-macro (unspecified)) (set! nV30cd@do-macro (unspecified)) (set! nV30cf@let*-macro (unspecified)) (set! nV30d1@or-macro (unspecified)) (set! nV30d3@and-macro (unspecified)) (set! nV30d5@cond-macro (unspecified)) (set! nV30d7@do-include (unspecified)) (set! nV30d9@include-macro (unspecified)) (set! nV30db@include-into-macro (unspecified)) (set! nV30dd@syntax-rules-macro (unspecified)) (set! nV30df@quasiquote-macro (unspecified)) (set! nV30e1@quasisyntax-macro (unspecified)) (set! nV30e3@define-struct-macro (unspecified)) (set! nV30e5@define-record-type-macro (unspecified)) (set! nV30e7@define-condition-type-macro (unspecified)) (set! nV30e9@incorrect-usage-macro (unspecified)) (set! nV30eb@parameterize-macro (unspecified)) (set! nV30ed@foreign-call-transformer (unspecified)) (set! nV30ef@convert-pattern (unspecified)) (set! nV30f1@syntax-dispatch (unspecified)) (set! nV30f3@ellipsis? (unspecified)) (set! nV30f5@underscore? (unspecified)) (set! nV30f7@verify-literals (unspecified)) (set! nV30f9@syntax-case-transformer (unspecified)) (set! nV30fb@ellipsis-map (unspecified)) (set! nV30fd@syntax-transformer (unspecified)) (set! nV30ff@core-macro-transformer (unspecified)) (set! nV3101@symbol-macro (unspecified)) (set! nV3103@macro-transformer (unspecified)) (set! nV3105@local-macro-transformer (unspecified)) (set! nV3107@do-macro-call (unspecified)) (set! nV3109@chi-macro (unspecified)) (set! nV310b@chi-local-macro (unspecified)) (set! nV310d@chi-global-macro (unspecified)) (set! nV310f@chi-expr* (unspecified)) (set! nV3111@chi-application (unspecified)) (set! nV3113@chi-expr (unspecified)) (set! nV3115@chi-set! (unspecified)) (set! nV3117@verify-formals (unspecified)) (set! nV3119@chi-lambda-clause (unspecified)) (set! nV311b@chi-lambda-clause* (unspecified)) (set! nV311d@chi-defun (unspecified)) (set! nV311f@chi-rhs (unspecified)) (set! nV3121@expand-interaction-rhs*/init* (unspecified)) (set! nV3123@chi-rhs* (unspecified)) (set! nV3125@find-bound=? (unspecified)) (set! nV3127@find-dups (unspecified)) (set! nV3129@chi-internal (unspecified)) (set! nV312b@parse-module (unspecified)) (set! nV3135@module-interface? (unspecified)) (set! nV3137@module-interface-first-mark (unspecified)) (set! nV3139@set-module-interface-first-mark! (unspecified)) (set! nV313b@module-interface-exp-id-vec (unspecified)) (set! nV313d@set-module-interface-exp-id-vec! (unspecified)) (set! nV313f@module-interface-exp-lab-vec (unspecified)) (set! nV3141@set-module-interface-exp-lab-vec! (unspecified)) (set! nV3143@dummy (unspecified)) (set! nV3145@module-interface-exp-id* (unspecified)) (set! nV3147@chi-internal-module (unspecified)) (set! nV3149@chi-body* (unspecified)) (set! nV314b@expand-transformer (unspecified)) (set! nV314d@parse-exports (unspecified)) (set! nV314f@parse-library-name (unspecified)) (set! nV3151@parse-library (unspecified)) (set! nV3153@parse-import-spec* (unspecified)) (set! nV3155@make-top-rib (unspecified)) (set! nV3157@make-collector (unspecified)) (set! nV3159@inv-collector (unspecified)) (set! nV315b@vis-collector (unspecified)) (set! nV315d@imp-collector (unspecified)) (set! nV315f@chi-library-internal (unspecified)) (set! nV3161@chi-interaction-expr (unspecified)) (set! nV3163@library-body-expander (unspecified)) (set! nV3165@core-library-expander (unspecified)) (set! nV3167@parse-top-level-program (unspecified)) (set! nV3169@top-level-expander (unspecified)) (set! nV316b@rp (unspecified)) (set! nV3175@env? (unspecified)) (set! nV3177@env-names (unspecified)) (set! nV3179@set-env-names! (unspecified)) (set! nV317b@env-labels (unspecified)) (set! nV317d@set-env-labels! (unspecified)) (set! nV317f@env-itc (unspecified)) (set! nV3181@set-env-itc! (unspecified)) (set! nV3183@dummy (unspecified)) (set! nV3185@rp (unspecified)) (set! nV318f@interaction-env? (unspecified)) (set! nV3191@interaction-env-rib (unspecified)) (set! nV3193@set-interaction-env-rib! (unspecified)) (set! nV3195@interaction-env-r (unspecified)) (set! nV3197@set-interaction-env-r! (unspecified)) (set! nV3199@interaction-env-locs (unspecified)) (set! nV319b@set-interaction-env-locs! (unspecified)) (set! nV319d@dummy (unspecified)) (set! nV319f@interaction-environment-symbols (unspecified)) (set! nV31a1@environment-bindings (unspecified)) (set! nV31a3@parse-binding (unspecified)) (set! nV31a5@environment? (unspecified)) (set! nV31a7@environment-symbols (unspecified)) (set! nV31a9@environment (unspecified)) (set! nV31ab@null-environment (unspecified)) (set! nV31ad@scheme-report-environment (unspecified)) (set! nV31af@expand (unspecified)) (set! nV31b1@eval (unspecified)) (set! nV31b3@library-expander (unspecified)) (set! nV31b5@boot-library-expand (unspecified)) (set! nV31b7@rev-map-append (unspecified)) (set! nV31b9@build-exports (unspecified)) (set! nV31bb@make-export-subst (unspecified)) (set! nV31bd@make-export-env/macros (unspecified)) (set! nV31bf@generate-temporaries (unspecified)) (set! nV31c1@free-identifier=? (unspecified)) (set! nV31c3@bound-identifier=? (unspecified)) (set! nV31c5@make-source-condition (unspecified)) (set! nV31c7@extract-position-condition (unspecified)) (set! nV31c9@expression-position (unspecified)) (set! nV31cb@assertion-error (unspecified)) (set! nV31cd@syntax-error (unspecified)) (set! nV31cf@syntax-violation* (unspecified)) (set! nV31d1@syntax-violation (unspecified)) (set! nV31d3@identifier? (unspecified)) (set! nV31d5@datum->syntax (unspecified)) (set! nV31d7@syntax->datum (unspecified)) (set! nV31d9@ungensym-all (unspecified)) (set! nV31db@compile-r6rs-top-level (unspecified)) (set! nV31dd@pre-compile-r6rs-top-level (unspecified)) (set! nV31df@interaction-environment (unspecified)) (set! nV31e1@top-level-context (unspecified)) (set! nV2e65@file-options-macro (lambda (nV31e2@x) (let ((nV31e5@valid-option? '#f)) (begin (set! nV31e5@valid-option? (lambda (nV31ee@x) (and (nV2eea@id? nV31ee@x) (memq (nV2eec@id->sym nV31ee@x) '(no-fail no-create no-truncate))))) (let ((nV31e6@t nV31e2@x)) (let ((nV31e8@ls/false (nV30f1@syntax-dispatch nV31e6@t '(_ . each-any)))) (if (and nV31e8@ls/false (apply (lambda (nV31ea@opt*) (for-all nV31e5@valid-option? nV31ea@opt*)) nV31e8@ls/false)) (apply (lambda (nV31ec@opt*) (nV30a7@bless (list 'make-file-options (list 'quote nV31ec@opt*)))) nV31e8@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV31e6@t)))))))) (set! nV4b38@nV2e65@file-options-macro nV2e65@file-options-macro) (set! nV2e67@set-cons (lambda (nV31f0@x nV31f1@ls) (if (memq nV31f0@x nV31f1@ls) nV31f1@ls (cons nV31f0@x nV31f1@ls)))) (set! nV4b39@nV2e67@set-cons nV2e67@set-cons) (set! nV2e69@set-union (lambda (nV31f4@ls1 nV31f5@ls2) (if (null? nV31f4@ls1) nV31f5@ls2 (if (memq (car nV31f4@ls1) nV31f5@ls2) (nV2e69@set-union (cdr nV31f4@ls1) nV31f5@ls2) (cons (car nV31f4@ls1) (nV2e69@set-union (cdr nV31f4@ls1) nV31f5@ls2)))))) (set! nV4b3a@nV2e69@set-union nV2e69@set-union) (set! nV2e6e@top-mark* '(top)) (set! nV4b3b@nV2e6e@top-mark* nV2e6e@top-mark*) (set! nV2e70@top-marked? (lambda (nV31f8@m*) (memq 'top nV31f8@m*))) (set! nV4b3c@nV2e70@top-marked? nV2e70@top-marked?) (set! nV2e72@gen-lexical (lambda (nV31fa@sym) (if (symbol? nV31fa@sym) (gensym nV31fa@sym) (if (nV2eb6@stx? nV31fa@sym) (nV2e72@gen-lexical (nV2eec@id->sym nV31fa@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" nV31fa@sym))))) (set! nV4b3d@nV2e72@gen-lexical nV2e72@gen-lexical) (set! nV2e74@gen-global (lambda (nV31fc@x) (nV2e72@gen-lexical nV31fc@x))) (set! nV4b3e@nV2e74@gen-global nV2e74@gen-global) (set! nV2e76@gen-label (lambda (nV31fe@_) (gensym))) (set! nV4b3f@nV2e76@gen-label nV2e76@gen-label) (set! nV2e78@gen-top-level-label (lambda (nV3200@id nV3201@rib) (let ((nV3205@find '#f)) (begin (set! nV3205@find (lambda (nV3210@sym nV3211@mark* nV3212@sym* nV3213@mark** nV3214@label*) (and (pair? nV3212@sym*) (if (and (eq? nV3210@sym (car nV3212@sym*)) (same-marks? nV3211@mark* (car nV3213@mark**))) (car nV3214@label*) (nV3205@find nV3210@sym nV3211@mark* (cdr nV3212@sym*) (cdr nV3213@mark**) (cdr nV3214@label*)))))) (let ((nV3206@sym (nV2eec@id->sym nV3200@id)) (nV3207@mark* (nV2ebc@stx-mark* nV3200@id))) (let ((nV320a@sym* (nV2e88@rib-sym* nV3201@rib))) (let ((nV320c@t (and (memq nV3206@sym (nV2e88@rib-sym* nV3201@rib)) (nV3205@find nV3206@sym nV3207@mark* nV320a@sym* (nV2e8c@rib-mark** nV3201@rib) (nV2e90@rib-label* nV3201@rib))))) (if nV320c@t ((lambda (nV320e@label) (if (nV2cfe@nV2b3b@imported-label->binding nV320e@label) (gensym) nV320e@label)) nV320c@t) (gensym))))))))) (set! nV4b40@nV2e78@gen-top-level-label nV2e78@gen-top-level-label) (set! nV2e7a@gen-define-label+loc (lambda (nV321a@id nV321b@rib) (let ((nV321e@t (nV31e1@top-level-context))) (if nV321e@t ((lambda (nV3220@env) (let ((nV3222@label (nV2e78@gen-top-level-label nV321a@id nV321b@rib)) (nV3223@locs (nV3199@interaction-env-locs nV3220@env))) (values nV3222@label (let ((nV3226@t (assq nV3222@label nV3223@locs))) (if nV3226@t (cdr nV3226@t) (let ((nV3228@loc (nV2e72@gen-lexical nV321a@id))) (begin (nV319b@set-interaction-env-locs! nV3220@env (cons (cons nV3222@label nV3228@loc) nV3223@locs)) nV3228@loc))))))) nV321e@t) (values (gensym) (nV2e72@gen-lexical nV321a@id)))))) (set! nV4b41@nV2e7a@gen-define-label+loc nV2e7a@gen-define-label+loc) (set! nV2e7c@gen-define-label (lambda (nV322a@id nV322b@rib) (if (nV31e1@top-level-context) (nV2e78@gen-top-level-label nV322a@id nV322b@rib) (gensym)))) (set! nV4b42@nV2e7c@gen-define-label nV2e7c@gen-define-label) (set! nV2e86@rib? (lambda (nV322e@x) (and (simple-struct? nV322e@x) (eq? (simple-struct-name nV322e@x) 'rib)))) (set! nV4b43@nV2e86@rib? nV2e86@rib?) (set! nV2e88@rib-sym* (lambda (nV3230@x) (simple-struct-ref nV3230@x '0))) (set! nV4b44@nV2e88@rib-sym* nV2e88@rib-sym*) (set! nV2e8a@set-rib-sym*! (lambda (nV3232@x nV3233@val) (simple-struct-set! nV3232@x '0 nV3233@val))) (set! nV4b45@nV2e8a@set-rib-sym*! nV2e8a@set-rib-sym*!) (set! nV2e8c@rib-mark** (lambda (nV3236@x) (simple-struct-ref nV3236@x '1))) (set! nV4b46@nV2e8c@rib-mark** nV2e8c@rib-mark**) (set! nV2e8e@set-rib-mark**! (lambda (nV3238@x nV3239@val) (simple-struct-set! nV3238@x '1 nV3239@val))) (set! nV4b47@nV2e8e@set-rib-mark**! nV2e8e@set-rib-mark**!) (set! nV2e90@rib-label* (lambda (nV323c@x) (simple-struct-ref nV323c@x '2))) (set! nV4b48@nV2e90@rib-label* nV2e90@rib-label*) (set! nV2e92@set-rib-label*! (lambda (nV323e@x nV323f@val) (simple-struct-set! nV323e@x '2 nV323f@val))) (set! nV4b49@nV2e92@set-rib-label*! nV2e92@set-rib-label*!) (set! nV2e94@rib-sealed/freq (lambda (nV3242@x) (simple-struct-ref nV3242@x '3))) (set! nV4b4a@nV2e94@rib-sealed/freq nV2e94@rib-sealed/freq) (set! nV2e96@set-rib-sealed/freq! (lambda (nV3244@x nV3245@val) (simple-struct-set! nV3244@x '3 nV3245@val))) (set! nV4b4b@nV2e96@set-rib-sealed/freq! nV2e96@set-rib-sealed/freq!) (set! nV2e98@rib-cache (lambda (nV3248@x) (simple-struct-ref nV3248@x '4))) (set! nV4b4c@nV2e98@rib-cache nV2e98@rib-cache) (set! nV2e9a@set-rib-cache! (lambda (nV324a@x nV324b@val) (simple-struct-set! nV324a@x '4 nV324b@val))) (set! nV4b4d@nV2e9a@set-rib-cache! nV2e9a@set-rib-cache!) (set! nV2e9c@dummy '3) (set! nV4b4e@nV2e9c@dummy nV2e9c@dummy) (set! nV2e9e@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! nV4b4f@nV2e9e@make-empty-rib nV2e9e@make-empty-rib) (set! nV2ea0@extend-rib! (lambda (nV324e@rib nV324f@id nV3250@label) (let ((nV3255@find '#f)) (begin (set! nV3255@find (lambda (nV3262@sym nV3263@mark* nV3264@sym* nV3265@mark** nV3266@label*) (and (pair? nV3264@sym*) (if (and (eq? nV3262@sym (car nV3264@sym*)) (same-marks? nV3263@mark* (car nV3265@mark**))) nV3266@label* (nV3255@find nV3262@sym nV3263@mark* (cdr nV3264@sym*) (cdr nV3265@mark**) (cdr nV3266@label*)))))) (begin (if (nV2e94@rib-sealed/freq nV324e@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" nV324e@rib) (void)) (let ((nV3256@sym (nV2eec@id->sym nV324f@id)) (nV3257@mark* (nV2ebc@stx-mark* nV324f@id))) (let ((nV325a@sym* (nV2e88@rib-sym* nV324e@rib))) (let ((nV325c@t (and (memq nV3256@sym (nV2e88@rib-sym* nV324e@rib)) (nV3255@find nV3256@sym nV3257@mark* nV325a@sym* (nV2e8c@rib-mark** nV324e@rib) (nV2e90@rib-label* nV324e@rib))))) (if nV325c@t ((lambda (nV325e@p) (if (not (eq? nV3250@label (car nV325e@p))) (if (nV31e1@top-level-context) (set-car! nV325e@p nV3250@label) (nV31d1@syntax-violation '#f '"multiple definitions of identifier" nV324f@id)) (void))) nV325c@t) (begin (if (nV2e98@rib-cache nV324e@rib) (hashtable-update! (nV2e98@rib-cache nV324e@rib) nV3256@sym (lambda (nV3260@e) (cons (cons nV3257@mark* nV3250@label) nV3260@e)) '()) (void)) (nV2e8a@set-rib-sym*! nV324e@rib (cons nV3256@sym nV325a@sym*)) (nV2e8e@set-rib-mark**! nV324e@rib (cons nV3257@mark* (nV2e8c@rib-mark** nV324e@rib))) (nV2e92@set-rib-label*! nV324e@rib (cons nV3250@label (nV2e90@rib-label* nV324e@rib))))))))))))) (set! nV4b50@nV2ea0@extend-rib! nV2ea0@extend-rib!) (set! nV2ea2@extend-rib/nc! (lambda (nV326c@rib nV326d@id nV326e@label) (let ((nV3272@sym (nV2eec@id->sym nV326d@id)) (nV3273@mark* (nV2ebc@stx-mark* nV326d@id))) (let ((nV3276@sym* (nV2e88@rib-sym* nV326c@rib))) (begin (if (nV2e98@rib-cache nV326c@rib) (hashtable-update! (nV2e98@rib-cache nV326c@rib) nV3272@sym (lambda (nV3278@e) (cons (cons nV3273@mark* nV326e@label) nV3278@e)) '()) (void)) (nV2e8a@set-rib-sym*! nV326c@rib (cons nV3272@sym nV3276@sym*)) (nV2e8e@set-rib-mark**! nV326c@rib (cons nV3273@mark* (nV2e8c@rib-mark** nV326c@rib))) (nV2e92@set-rib-label*! nV326c@rib (cons nV326e@label (nV2e90@rib-label* nV326c@rib)))))))) (set! nV4b51@nV2ea2@extend-rib/nc! nV2ea2@extend-rib/nc!) (set! nV2ea4@make-rib-map (lambda (nV327a@sym*) (let ((nV327c@ht (make-eq-hashtable))) (let nV3282@f ((nV327e@i '0) (nV327f@sym* nV327a@sym*)) (if (null? nV327f@sym*) nV327c@ht (begin (hashtable-update! nV327c@ht (car nV327f@sym*) (lambda (nV3284@x) (cons nV327e@i nV3284@x)) '()) (nV3282@f (+ nV327e@i '1) (cdr nV327f@sym*)))))))) (set! nV4b52@nV2ea4@make-rib-map nV2ea4@make-rib-map) (set! nV2ea6@seal-rib! (lambda (nV3286@rib) (let ((nV3288@sym* (nV2e88@rib-sym* nV3286@rib))) (if (not (null? nV3288@sym*)) (begin (nV2e8a@set-rib-sym*! nV3286@rib (list->vector nV3288@sym*)) (nV2e8e@set-rib-mark**! nV3286@rib (list->vector (nV2e8c@rib-mark** nV3286@rib))) (nV2e92@set-rib-label*! nV3286@rib (list->vector (nV2e90@rib-label* nV3286@rib))) (nV2e96@set-rib-sealed/freq! nV3286@rib (nV2ea4@make-rib-map nV3288@sym*))) (void))))) (set! nV4b53@nV2ea6@seal-rib! nV2ea6@seal-rib!) (set! nV2ea8@unseal-rib! (lambda (nV328a@rib) (if (nV2e94@rib-sealed/freq nV328a@rib) (begin (nV2e96@set-rib-sealed/freq! nV328a@rib '#f) (nV2e8a@set-rib-sym*! nV328a@rib (vector->list (nV2e88@rib-sym* nV328a@rib))) (nV2e8e@set-rib-mark**! nV328a@rib (vector->list (nV2e8c@rib-mark** nV328a@rib))) (nV2e92@set-rib-label*! nV328a@rib (vector->list (nV2e90@rib-label* nV328a@rib)))) (void)))) (set! nV4b54@nV2ea8@unseal-rib! nV2ea8@unseal-rib!) (set! nV2eaa@make-full-rib (lambda (nV328c@id* nV328d@label*) (let ((nV3290@r (make-simple-struct 'rib '6 (list (map nV2eec@id->sym nV328c@id*) (map nV2ebc@stx-mark* nV328c@id*) nV328d@label* '#f '#f)))) (begin (nV2ea6@seal-rib! nV3290@r) nV3290@r)))) (set! nV4b55@nV2eaa@make-full-rib nV2eaa@make-full-rib) (set! nV2eac@rp (nV2a20@nV28fb@make-record-printer 'stx (lambda (nV3292@x nV3293@p nV3294@wr) (begin (display '"#<syntax " nV3293@p) (write (nV2efe@stx->datum nV3292@x) nV3293@p) (let ((nV3298@expr (nV2eb8@stx-expr nV3292@x))) (if (nV2a17@nV28e9@annotation? nV3298@expr) (let ((nV329a@src (nV2a18@nV28eb@annotation-source nV3298@expr))) (if (pair? nV329a@src) (begin (display '" [" nV3293@p) (display (cdr nV329a@src) nV3293@p) (display '" of " nV3293@p) (display (car nV329a@src) nV3293@p) (display '"]" nV3293@p)) (void))) (void))) (display '">" nV3293@p))))) (set! nV4b56@nV2eac@rp nV2eac@rp) (set! nV2eb6@stx? (lambda (nV329c@x) (and (simple-struct? nV329c@x) (eq? (simple-struct-name nV329c@x) 'stx)))) (set! nV4b57@nV2eb6@stx? nV2eb6@stx?) (set! nV2eb8@stx-expr (lambda (nV329e@x) (simple-struct-ref nV329e@x '0))) (set! nV4b58@nV2eb8@stx-expr nV2eb8@stx-expr) (set! nV2eba@set-stx-expr! (lambda (nV32a0@x nV32a1@val) (simple-struct-set! nV32a0@x '0 nV32a1@val))) (set! nV4b59@nV2eba@set-stx-expr! nV2eba@set-stx-expr!) (set! nV2ebc@stx-mark* (lambda (nV32a4@x) (simple-struct-ref nV32a4@x '1))) (set! nV4b5a@nV2ebc@stx-mark* nV2ebc@stx-mark*) (set! nV2ebe@set-stx-mark*! (lambda (nV32a6@x nV32a7@val) (simple-struct-set! nV32a6@x '1 nV32a7@val))) (set! nV4b5b@nV2ebe@set-stx-mark*! nV2ebe@set-stx-mark*!) (set! nV2ec0@stx-subst* (lambda (nV32aa@x) (simple-struct-ref nV32aa@x '2))) (set! nV4b5c@nV2ec0@stx-subst* nV2ec0@stx-subst*) (set! nV2ec2@set-stx-subst*! (lambda (nV32ac@x nV32ad@val) (simple-struct-set! nV32ac@x '2 nV32ad@val))) (set! nV4b5d@nV2ec2@set-stx-subst*! nV2ec2@set-stx-subst*!) (set! nV2ec4@stx-ae* (lambda (nV32b0@x) (simple-struct-ref nV32b0@x '3))) (set! nV4b5e@nV2ec4@stx-ae* nV2ec4@stx-ae*) (set! nV2ec6@set-stx-ae*! (lambda (nV32b2@x nV32b3@val) (simple-struct-set! nV32b2@x '3 nV32b3@val))) (set! nV4b5f@nV2ec6@set-stx-ae*! nV2ec6@set-stx-ae*!) (set! nV2ec8@dummy '3) (set! nV4b60@nV2ec8@dummy nV2ec8@dummy) (set! nV2eca@datum->stx (lambda (nV32b6@id nV32b7@datum) (make-simple-struct 'stx '5 (list nV32b7@datum (nV2ebc@stx-mark* nV32b6@id) (nV2ec0@stx-subst* nV32b6@id) (nV2ec4@stx-ae* nV32b6@id))))) (set! nV4b61@nV2eca@datum->stx nV2eca@datum->stx) (set! nV2ecc@gen-mark (lambda () (string '#\m))) (set! nV4b62@nV2ecc@gen-mark nV2ecc@gen-mark) (set! nV2ece@anti-mark '#f) (set! nV4b63@nV2ece@anti-mark nV2ece@anti-mark) (set! nV2ed0@anti-mark? not) (set! nV4b64@nV2ed0@anti-mark? nV2ed0@anti-mark?) (set! nV2ed2@mkstx (lambda (nV32ba@e nV32bb@m* nV32bc@s* nV32bd@ae*) (if (and (nV2eb6@stx? nV32ba@e) (not (nV2e70@top-marked? nV32bb@m*))) (call-with-values (lambda () (join-wraps nV32bb@m* nV32bc@s* nV32bd@ae* nV32ba@e)) (lambda (nV32c8@nV32c3 nV32c9@nV32c5 nV32ca@nV32c7) (let ((nV32ce@ae* nV32ca@nV32c7) (nV32cf@s* nV32c9@nV32c5) (nV32d0@m* nV32c8@nV32c3)) (make-simple-struct 'stx '5 (list (nV2eb8@stx-expr nV32ba@e) nV32d0@m* nV32cf@s* nV32ce@ae*))))) (make-simple-struct 'stx '5 (list nV32ba@e nV32bb@m* nV32bc@s* nV32bd@ae*))))) (set! nV4b65@nV2ed2@mkstx nV2ed2@mkstx) (set! nV2ed4@add-mark (lambda (nV32d4@m nV32d5@e nV32d6@ae) (nV2ed2@mkstx nV32d5@e (list nV32d4@m) '(shift) (list nV32d6@ae)))) (set! nV4b66@nV2ed4@add-mark nV2ed4@add-mark) (set! nV2ed6@add-subst (lambda (nV32da@subst nV32db@e) (nV2ed2@mkstx nV32db@e '() (list nV32da@subst) '()))) (set! nV4b67@nV2ed6@add-subst nV2ed6@add-subst) (set! nV2ed8@syntax-kind? (lambda (nV32de@x nV32df@p?) (if (nV2eb6@stx? nV32de@x) (nV2ed8@syntax-kind? (nV2eb8@stx-expr nV32de@x) nV32df@p?) (if (nV2a17@nV28e9@annotation? nV32de@x) (nV2ed8@syntax-kind? (nV2a19@nV28ed@annotation-expression nV32de@x) nV32df@p?) (nV32df@p? nV32de@x))))) (set! nV4b68@nV2ed8@syntax-kind? nV2ed8@syntax-kind?) (set! nV2eda@syntax-vector->list (lambda (nV32e2@x) (if (nV2eb6@stx? nV32e2@x) (let ((nV32e4@ls (nV2eda@syntax-vector->list (nV2eb8@stx-expr nV32e2@x))) (nV32e5@m* (nV2ebc@stx-mark* nV32e2@x)) (nV32e6@s* (nV2ec0@stx-subst* nV32e2@x)) (nV32e7@ae* (nV2ec4@stx-ae* nV32e2@x))) (map (lambda (nV32ec@x) (nV2ed2@mkstx nV32ec@x nV32e5@m* nV32e6@s* nV32e7@ae*)) nV32e4@ls)) (if (nV2a17@nV28e9@annotation? nV32e2@x) (nV2eda@syntax-vector->list (nV2a19@nV28ed@annotation-expression nV32e2@x)) (if (vector? nV32e2@x) (vector->list nV32e2@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" nV32e2@x)))))) (set! nV4b69@nV2eda@syntax-vector->list nV2eda@syntax-vector->list) (set! nV2edc@syntax-pair? (lambda (nV32ee@x) (nV2ed8@syntax-kind? nV32ee@x pair?))) (set! nV4b6a@nV2edc@syntax-pair? nV2edc@syntax-pair?) (set! nV2ede@syntax-vector? (lambda (nV32f0@x) (nV2ed8@syntax-kind? nV32f0@x vector?))) (set! nV4b6b@nV2ede@syntax-vector? nV2ede@syntax-vector?) (set! nV2ee0@syntax-null? (lambda (nV32f2@x) (nV2ed8@syntax-kind? nV32f2@x null?))) (set! nV4b6c@nV2ee0@syntax-null? nV2ee0@syntax-null?) (set! nV2ee2@syntax-list? (lambda (nV32f4@x) (or (nV2ee0@syntax-null? nV32f4@x) (and (nV2edc@syntax-pair? nV32f4@x) (nV2ee2@syntax-list? (nV2ee6@syntax-cdr nV32f4@x)))))) (set! nV4b6d@nV2ee2@syntax-list? nV2ee2@syntax-list?) (set! nV2ee4@syntax-car (lambda (nV32f6@x) (if (nV2eb6@stx? nV32f6@x) (nV2ed2@mkstx (nV2ee4@syntax-car (nV2eb8@stx-expr nV32f6@x)) (nV2ebc@stx-mark* nV32f6@x) (nV2ec0@stx-subst* nV32f6@x) (nV2ec4@stx-ae* nV32f6@x)) (if (nV2a17@nV28e9@annotation? nV32f6@x) (nV2ee4@syntax-car (nV2a19@nV28ed@annotation-expression nV32f6@x)) (if (pair? nV32f6@x) (car nV32f6@x) (assertion-violation 'syntax-car '"BUG: not a pair" nV32f6@x)))))) (set! nV4b6e@nV2ee4@syntax-car nV2ee4@syntax-car) (set! nV2ee6@syntax-cdr (lambda (nV32f8@x) (if (nV2eb6@stx? nV32f8@x) (nV2ed2@mkstx (nV2ee6@syntax-cdr (nV2eb8@stx-expr nV32f8@x)) (nV2ebc@stx-mark* nV32f8@x) (nV2ec0@stx-subst* nV32f8@x) (nV2ec4@stx-ae* nV32f8@x)) (if (nV2a17@nV28e9@annotation? nV32f8@x) (nV2ee6@syntax-cdr (nV2a19@nV28ed@annotation-expression nV32f8@x)) (if (pair? nV32f8@x) (cdr nV32f8@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" nV32f8@x)))))) (set! nV4b6f@nV2ee6@syntax-cdr nV2ee6@syntax-cdr) (set! nV2ee8@syntax->list (lambda (nV32fa@x) (if (nV2edc@syntax-pair? nV32fa@x) (cons (nV2ee4@syntax-car nV32fa@x) (nV2ee8@syntax->list (nV2ee6@syntax-cdr nV32fa@x))) (if (nV2ee0@syntax-null? nV32fa@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" nV32fa@x))))) (set! nV4b70@nV2ee8@syntax->list nV2ee8@syntax->list) (set! nV2eea@id? (lambda (nV32fc@x) (and (nV2eb6@stx? nV32fc@x) (symbol? (nV2eb8@stx-expr nV32fc@x))))) (set! nV4b71@nV2eea@id? nV2eea@id?) (set! nV2eec@id->sym (lambda (nV32fe@x) (nV2eb8@stx-expr nV32fe@x))) (set! nV4b72@nV2eec@id->sym nV2eec@id->sym) (set! nV2eee@bound-id=? (lambda (nV3300@x nV3301@y) (and (eq? (nV2eec@id->sym nV3300@x) (nV2eec@id->sym nV3301@y)) (same-marks? (nV2ebc@stx-mark* nV3300@x) (nV2ebc@stx-mark* nV3301@y))))) (set! nV4b73@nV2eee@bound-id=? nV2eee@bound-id=?) (set! nV2ef0@free-id=? (lambda (nV3304@i nV3305@j) (let ((nV3308@t0 (id->real-label nV3304@i)) (nV3309@t1 (id->real-label nV3305@j))) (if (or nV3308@t0 nV3309@t1) (eq? nV3308@t0 nV3309@t1) (eq? (nV2eec@id->sym nV3304@i) (nV2eec@id->sym nV3305@j)))))) (set! nV4b74@nV2ef0@free-id=? nV2ef0@free-id=?) (set! nV2ef2@valid-bound-ids? (lambda (nV330c@id*) (and (for-all nV2eea@id? nV330c@id*) (nV2ef4@distinct-bound-ids? nV330c@id*)))) (set! nV4b75@nV2ef2@valid-bound-ids? nV2ef2@valid-bound-ids?) (set! nV2ef4@distinct-bound-ids? (lambda (nV330e@id*) (or (null? nV330e@id*) (and (not (nV2ef6@bound-id-member? (car nV330e@id*) (cdr nV330e@id*))) (nV2ef4@distinct-bound-ids? (cdr nV330e@id*)))))) (set! nV4b76@nV2ef4@distinct-bound-ids? nV2ef4@distinct-bound-ids?) (set! nV2ef6@bound-id-member? (lambda (nV3310@id nV3311@id*) (and (pair? nV3311@id*) (or (nV2eee@bound-id=? nV3310@id (car nV3311@id*)) (nV2ef6@bound-id-member? nV3310@id (cdr nV3311@id*)))))) (set! nV4b77@nV2ef6@bound-id-member? nV2ef6@bound-id-member?) (set! nV2ef8@self-evaluating? (lambda (nV3314@x) (or (number? nV3314@x) (string? nV3314@x) (char? nV3314@x) (boolean? nV3314@x) (regexp? nV3314@x) (bytevector? nV3314@x)))) (set! nV4b78@nV2ef8@self-evaluating? nV2ef8@self-evaluating?) (set! nV2efa@strip-annotations (lambda (nV3316@x) (if (pair? nV3316@x) (cons (nV2efa@strip-annotations (car nV3316@x)) (nV2efa@strip-annotations (cdr nV3316@x))) (if (vector? nV3316@x) (vector-map nV2efa@strip-annotations nV3316@x) (if (nV2a17@nV28e9@annotation? nV3316@x) (nV2a16@nV28e7@annotation-stripped nV3316@x) nV3316@x))))) (set! nV4b79@nV2efa@strip-annotations nV2efa@strip-annotations) (set! nV2efc@strip (lambda (nV3318@x nV3319@m*) (if (nV2e70@top-marked? nV3319@m*) (if (or (nV2a17@nV28e9@annotation? nV3318@x) (and (pair? nV3318@x) (nV2a17@nV28e9@annotation? (car nV3318@x))) (and (vector? nV3318@x) (> (vector-length nV3318@x) '0) (nV2a17@nV28e9@annotation? (vector-ref nV3318@x '0)))) (nV2efa@strip-annotations nV3318@x) nV3318@x) (let nV331e@f ((nV331c@x nV3318@x)) (if (nV2eb6@stx? nV331c@x) (nV2efc@strip (nV2eb8@stx-expr nV331c@x) (nV2ebc@stx-mark* nV331c@x)) (if (nV2a17@nV28e9@annotation? nV331c@x) (nV2a16@nV28e7@annotation-stripped nV331c@x) (if (pair? nV331c@x) (let ((nV3320@a (nV331e@f (car nV331c@x))) (nV3321@d (nV331e@f (cdr nV331c@x)))) (if (and (eq? nV3320@a (car nV331c@x)) (eq? nV3321@d (cdr nV331c@x))) nV331c@x (cons nV3320@a nV3321@d))) (if (vector? nV331c@x) (let ((nV3324@old (vector->list nV331c@x))) (let ((nV3326@new (map nV331e@f nV3324@old))) (if (for-all eq? nV3324@old nV3326@new) nV331c@x (list->vector nV3326@new)))) nV331c@x)))))))) (set! nV4b7a@nV2efc@strip nV2efc@strip) (set! nV2efe@stx->datum (lambda (nV3328@x) (nV2efc@strip nV3328@x '()))) (set! nV4b7b@nV2efe@stx->datum nV2efe@stx->datum) (set! nV2f00@id->label (lambda (nV332a@id) (or (id->real-label nV332a@id) (let ((nV332c@t (nV31e1@top-level-context))) (if nV332c@t ((lambda (nV332e@env) (let ((nV3330@rib (nV3191@interaction-env-rib nV332e@env))) (call-with-values (lambda () (nV2e7a@gen-define-label+loc nV332a@id nV3330@rib)) (lambda (nV3336@nV3333 nV3337@nV3335) (let ((nV333a@loc_ nV3337@nV3335) (nV333b@lab nV3336@nV3333)) (begin (nV2ea0@extend-rib! nV3330@rib nV332a@id nV333b@lab) nV333b@lab)))))) nV332c@t) '#f))))) (set! nV4b7c@nV2f00@id->label nV2f00@id->label) (set! nV2f02@label->binding (lambda (nV333e@x nV333f@r) (let ((nV3342@t (nV2cfe@nV2b3b@imported-label->binding nV333e@x))) (if nV3342@t ((lambda (nV3344@b) (if (and (pair? nV3344@b) (eq? (car nV3344@b) '$core-rtd)) (cons '$rtd (map nV30a7@bless (cdr nV3344@b))) (if (and (pair? nV3344@b) (eq? (car nV3344@b) 'global-rtd)) (let ((nV3346@lib (cadr nV3344@b)) (nV3347@loc (cddr nV3344@b))) (cons '$rtd (symbol-value nV3347@loc))) nV3344@b))) nV3342@t) (let ((nV334a@t (assq nV333e@x nV333f@r))) (if nV334a@t (cdr nV334a@t) (let ((nV334c@t (nV31e1@top-level-context))) (if nV334c@t ((lambda (nV334e@env) (let ((nV3350@t (assq nV333e@x (nV3199@interaction-env-locs nV334e@env)))) (if nV3350@t ((lambda (nV3352@p) (cons* 'lexical (cdr nV3352@p) '#f)) nV3350@t) '(displaced-lexical . #f)))) nV334c@t) '(displaced-lexical . #f))))))))) (set! nV4b7d@nV2f02@label->binding nV2f02@label->binding) (set! nV2f04@make-binding cons) (set! nV4b7e@nV2f04@make-binding nV2f04@make-binding) (set! nV2f06@binding-type car) (set! nV4b7f@nV2f06@binding-type nV2f06@binding-type) (set! nV2f08@binding-value cdr) (set! nV4b80@nV2f08@binding-value nV2f08@binding-value) (set! nV2f0a@raise-unbound-error (lambda (nV3354@id) (nV31cf@syntax-violation* '#f '"unbound identifier" nV3354@id (nV4f76@nV4dbc@make-undefined-violation)))) (set! nV4b81@nV2f0a@raise-unbound-error nV2f0a@raise-unbound-error) (set! nV2f0c@syntax-type (lambda (nV3356@e nV3357@r) (if (nV2eea@id? nV3356@e) (let ((nV335a@id nV3356@e)) (let ((nV335c@label (nV2f00@id->label nV335a@id))) (let ((nV335e@b (nV2f02@label->binding nV335c@label nV3357@r))) (let ((nV3360@type (nV2f06@binding-type nV335e@b))) (begin (if (not nV335c@label) (nV2f0a@raise-unbound-error nV335a@id) (void)) (let ((nV3362@t nV3360@type)) (if (memv nV3362@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values nV3360@type (nV2f08@binding-value nV335e@b) nV335a@id) (values 'other '#f '#f)))))))) (if (nV2edc@syntax-pair? nV3356@e) (let ((nV3364@id (nV2ee4@syntax-car nV3356@e))) (if (nV2eea@id? nV3364@id) (let ((nV3366@label (nV2f00@id->label nV3364@id))) (let ((nV3368@b (nV2f02@label->binding nV3366@label nV3357@r))) (let ((nV336a@type (nV2f06@binding-type nV3368@b))) (begin (if (not nV3366@label) (nV2f0a@raise-unbound-error nV3364@id) (void)) (let ((nV336c@t nV336a@type)) (if (memv nV336c@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values nV336a@type (nV2f08@binding-value nV3368@b) nV3364@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((nV336e@d (nV2efe@stx->datum nV3356@e))) (if (nV2ef8@self-evaluating? nV336e@d) (values 'constant nV336e@d '#f) (values 'other '#f '#f))))))) (set! nV4b82@nV2f0c@syntax-type nV2f0c@syntax-type) (set! nV2f1a@sanitize-binding (lambda (nV3370@x nV3371@src) (if (procedure? nV3370@x) (cons* 'local-macro nV3370@x nV3371@src) (if (and (pair? nV3370@x) (eq? (car nV3370@x) 'macro!) (procedure? (cdr nV3370@x))) (cons* 'local-macro! (cdr nV3370@x) nV3371@src) (if (and (pair? nV3370@x) (eq? (car nV3370@x) '$rtd)) nV3370@x (assertion-violation 'expand '"invalid transformer" nV3370@x)))))) (set! nV4b83@nV2f1a@sanitize-binding nV2f1a@sanitize-binding) (set! nV2f1c@make-variable-transformer (lambda (nV3374@x) (if (procedure? nV3374@x) (cons 'macro! nV3374@x) (assertion-violation 'make-variable-transformer '"not a procedure" nV3374@x)))) (set! nV4b84@nV2f1c@make-variable-transformer nV2f1c@make-variable-transformer) (set! nV2f1e@variable-transformer? (lambda (nV3376@x) (and (pair? nV3376@x) (eq? (car nV3376@x) 'macro!) (procedure? (cdr nV3376@x))))) (set! nV4b85@nV2f1e@variable-transformer? nV2f1e@variable-transformer?) (set! nV2f20@variable-transformer-procedure (lambda (nV3378@x) (if (nV2f1e@variable-transformer? nV3378@x) (cdr nV3378@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" nV3378@x)))) (set! nV4b86@nV2f20@variable-transformer-procedure nV2f20@variable-transformer-procedure) (set! nV2f22@make-eval-transformer (lambda (nV337a@x) (nV2f1a@sanitize-binding (eval-core (nV2a79@nV2a31@expanded->core nV337a@x)) nV337a@x))) (set! nV4b87@nV2f22@make-eval-transformer nV2f22@make-eval-transformer) (set! nV3073@parse-define (lambda (nV337c@x) (let ((nV337e@t nV337c@x)) (let ((nV3380@ls/false (nV30f1@syntax-dispatch nV337e@t '(_ (any . any) any . each-any)))) (if (and nV3380@ls/false (apply (lambda (nV3382@id nV3383@fmls nV3384@b nV3385@b*) (nV2eea@id? nV3382@id)) nV3380@ls/false)) (apply (lambda (nV338a@id nV338b@fmls nV338c@b nV338d@b*) (begin (nV3117@verify-formals nV338b@fmls nV337c@x) (values nV338a@id (cons 'defun (cons nV338b@fmls (cons nV338c@b nV338d@b*)))))) nV3380@ls/false) (let ((nV3392@t nV337e@t)) (let ((nV3394@ls/false (nV30f1@syntax-dispatch nV3392@t '(_ any any)))) (if (and nV3394@ls/false (apply (lambda (nV3396@id nV3397@val) (nV2eea@id? nV3396@id)) nV3394@ls/false)) (apply (lambda (nV339a@id nV339b@val) (values nV339a@id (cons 'expr nV339b@val))) nV3394@ls/false) (let ((nV339e@t nV3392@t)) (let ((nV33a0@ls/false (nV30f1@syntax-dispatch nV339e@t '(_ any)))) (if (and nV33a0@ls/false (apply (lambda (nV33a2@id) (nV2eea@id? nV33a2@id)) nV33a0@ls/false)) (apply (lambda (nV33a4@id) (values nV33a4@id (cons 'expr (nV30a7@bless '(void))))) nV33a0@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV339e@t)))))))))))) (set! nV4b88@nV3073@parse-define nV3073@parse-define) (set! nV3075@parse-define-syntax (lambda (nV33a6@x) (let ((nV33a8@t nV33a6@x)) (let ((nV33aa@ls/false (nV30f1@syntax-dispatch nV33a8@t '(_ any any)))) (if (and nV33aa@ls/false (apply (lambda (nV33ac@id nV33ad@val) (nV2eea@id? nV33ac@id)) nV33aa@ls/false)) (apply (lambda (nV33b0@id nV33b1@val) (values nV33b0@id nV33b1@val)) nV33aa@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV33a8@t)))))) (set! nV4b89@nV3075@parse-define-syntax nV3075@parse-define-syntax) (set! nV3077@scheme-stx-hashtable (make-eq-hashtable)) (set! nV4b8a@nV3077@scheme-stx-hashtable nV3077@scheme-stx-hashtable) (set! nV3079@scheme-stx (lambda (nV33b4@sym) (or (hashtable-ref nV3077@scheme-stx-hashtable nV33b4@sym '#f) (let ((nV33b6@subst (nV2cda@nV2af3@library-subst (nV2cf8@nV2b2f@find-library-by-name '(psyntax system $all))))) (let ((nV33b8@stx (make-simple-struct 'stx '5 (list nV33b4@sym nV2e6e@top-mark* '() '())))) (let ((nV33ba@stx (let ((nV33bc@t (assq nV33b4@sym nV33b6@subst))) (if nV33bc@t ((lambda (nV33be@x) (let ((nV33c0@name (car nV33be@x)) (nV33c1@label (cdr nV33be@x))) (nV2ed6@add-subst (make-simple-struct 'rib '6 (list (list nV33c0@name) (list nV2e6e@top-mark*) (list nV33c1@label) '#f '#f)) nV33b8@stx))) nV33bc@t) nV33b8@stx)))) (begin (hashtable-set! nV3077@scheme-stx-hashtable nV33b4@sym nV33ba@stx) nV33ba@stx))))))) (set! nV4b8b@nV3079@scheme-stx nV3079@scheme-stx) (set! nV307b@lexical-var car) (set! nV4b8c@nV307b@lexical-var nV307b@lexical-var) (set! nV307d@lexical-mutable? cdr) (set! nV4b8d@nV307d@lexical-mutable? nV307d@lexical-mutable?) (set! nV307f@set-lexical-mutable! set-cdr!) (set! nV4b8e@nV307f@set-lexical-mutable! nV307f@set-lexical-mutable!) (set! nV3081@add-lexical (lambda (nV33c4@lab nV33c5@lex nV33c6@r) (cons (cons* nV33c4@lab 'lexical nV33c5@lex '#f) nV33c6@r))) (set! nV4b8f@nV3081@add-lexical nV3081@add-lexical) (set! nV3083@add-lexicals (lambda (nV33ca@lab* nV33cb@lex* nV33cc@r) (if (null? nV33ca@lab*) nV33cc@r (nV3083@add-lexicals (cdr nV33ca@lab*) (cdr nV33cb@lex*) (nV3081@add-lexical (car nV33ca@lab*) (car nV33cb@lex*) nV33cc@r))))) (set! nV4b90@nV3083@add-lexicals nV3083@add-lexicals) (set! nV3085@letrec-helper (lambda (nV33d0@e nV33d1@r nV33d2@mr nV33d3@build) (let ((nV33d8@t nV33d0@e)) (let ((nV33da@ls/false (nV30f1@syntax-dispatch nV33d8@t '(_ #(each (any any)) any . each-any)))) (if nV33da@ls/false (apply (lambda (nV33dc@lhs* nV33dd@rhs* nV33de@b nV33df@b*) (if (not (nV2ef2@valid-bound-ids? nV33dc@lhs*)) (nV30ab@invalid-fmls-error nV33d0@e nV33dc@lhs*) (let ((nV33e4@lex* (map nV2e72@gen-lexical nV33dc@lhs*)) (nV33e5@lab* (map nV2e76@gen-label nV33dc@lhs*))) (let ((nV33e8@rib (nV2eaa@make-full-rib nV33dc@lhs* nV33e5@lab*)) (nV33e9@r (nV3083@add-lexicals nV33e5@lab* nV33e4@lex* nV33d1@r))) (let ((nV33ec@body (nV3129@chi-internal (nV2ed6@add-subst nV33e8@rib (cons nV33de@b nV33df@b*)) nV33e9@r nV33d2@mr)) (nV33ed@rhs* (nV310f@chi-expr* (map (lambda (nV33f0@x) (nV2ed6@add-subst nV33e8@rib nV33f0@x)) nV33dd@rhs*) nV33e9@r nV33d2@mr))) (nV33d3@build '#f nV33e4@lex* nV33ed@rhs* nV33ec@body)))))) nV33da@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV33d8@t)))))) (set! nV4b91@nV3085@letrec-helper nV3085@letrec-helper) (set! nV3087@let-transformer (lambda (nV33f2@e nV33f3@r nV33f4@mr) (let ((nV33f8@t nV33f2@e)) (let ((nV33fa@ls/false (nV30f1@syntax-dispatch nV33f8@t '(_ #(each (any any)) any . each-any)))) (if nV33fa@ls/false (apply (lambda (nV33fc@lhs* nV33fd@rhs* nV33fe@b nV33ff@b*) (if (not (nV2ef2@valid-bound-ids? nV33fc@lhs*)) (nV30ab@invalid-fmls-error nV33f2@e nV33fc@lhs*) (let ((nV3404@lex* (map nV2e72@gen-lexical nV33fc@lhs*)) (nV3405@lab* (map nV2e76@gen-label nV33fc@lhs*)) (nV3406@rhs* (nV310f@chi-expr* nV33fd@rhs* nV33f3@r nV33f4@mr))) (let ((nV340a@rib (nV2eaa@make-full-rib nV33fc@lhs* nV3405@lab*)) (nV340b@r (nV3083@add-lexicals nV3405@lab* nV3404@lex* nV33f3@r))) (let ((nV340e@body (nV3129@chi-internal (nV2ed6@add-subst nV340a@rib (cons nV33fe@b nV33ff@b*)) nV340b@r nV33f4@mr))) (nV2e52@nV2daf@build-let '#f nV3404@lex* nV3406@rhs* nV340e@body)))))) nV33fa@ls/false) (let ((nV3410@t nV33f8@t)) (let ((nV3412@ls/false (nV30f1@syntax-dispatch nV3410@t '(_ any #(each (any any)) any . each-any)))) (if nV3412@ls/false (apply (lambda (nV3414@loop nV3415@lhs* nV3416@rhs* nV3417@b nV3418@b*) (if (not (nV2ef2@valid-bound-ids? nV3415@lhs*)) (nV30ab@invalid-fmls-error nV33f2@e nV3415@lhs*) (let ((nV341e@lex* (map nV2e72@gen-lexical nV3415@lhs*)) (nV341f@lab* (map nV2e76@gen-label nV3415@lhs*)) (nV3420@rhs* (nV310f@chi-expr* nV3416@rhs* nV33f3@r nV33f4@mr)) (nV3421@loop-lex (nV2e72@gen-lexical nV3414@loop)) (nV3422@loop-lab (nV2e76@gen-label nV3414@loop))) (let ((nV3428@loop-rib (nV2eaa@make-full-rib (list nV3414@loop) (list nV3422@loop-lab))) (nV3429@rib (nV2eaa@make-full-rib nV3415@lhs* nV341f@lab*)) (nV342a@r (nV3083@add-lexicals (cons nV3422@loop-lab nV341f@lab*) (cons nV3421@loop-lex nV341e@lex*) nV33f3@r))) (let ((nV342e@body (nV3129@chi-internal (nV2ed6@add-subst nV3428@loop-rib (nV2ed6@add-subst nV3429@rib (cons nV3417@b nV3418@b*))) nV342a@r nV33f4@mr))) (nV2e53@nV2db1@build-named-let '#f nV3421@loop-lex nV341e@lex* nV3420@rhs* nV342e@body)))))) nV3412@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3410@t))))))))) (set! nV4b92@nV3087@let-transformer nV3087@let-transformer) (set! nV3089@letrec-transformer (lambda (nV3430@e nV3431@r nV3432@mr) (nV3085@letrec-helper nV3430@e nV3431@r nV3432@mr nV2e51@nV2dad@build-letrec))) (set! nV4b93@nV3089@letrec-transformer nV3089@letrec-transformer) (set! nV308b@letrec*-transformer (lambda (nV3436@e nV3437@r nV3438@mr) (nV3085@letrec-helper nV3436@e nV3437@r nV3438@mr nV2e54@nV2db3@build-letrec*))) (set! nV4b94@nV308b@letrec*-transformer nV308b@letrec*-transformer) (set! nV308d@fluid-let-syntax-transformer (lambda (nV343c@e nV343d@r nV343e@mr) (let ((nV3443@lookup '#f)) (begin (set! nV3443@lookup (lambda (nV3456@x) (or (nV2f00@id->label nV3456@x) (nV31d1@syntax-violation '#f '"unbound identifier" nV343c@e nV3456@x)))) (let ((nV3444@t nV343c@e)) (let ((nV3446@ls/false (nV30f1@syntax-dispatch nV3444@t '(_ #(each (any any)) any . each-any)))) (if nV3446@ls/false (apply (lambda (nV3448@lhs* nV3449@rhs* nV344a@b nV344b@b*) (if (not (nV2ef2@valid-bound-ids? nV3448@lhs*)) (nV30ab@invalid-fmls-error nV343c@e nV3448@lhs*) (let ((nV3450@lab* (map nV3443@lookup nV3448@lhs*)) (nV3451@rhs* (map (lambda (nV3454@x) (nV2f22@make-eval-transformer (nV314b@expand-transformer nV3454@x nV343e@mr))) nV3449@rhs*))) (nV3129@chi-internal (cons nV344a@b nV344b@b*) (append (map cons nV3450@lab* nV3451@rhs*) nV343d@r) (append (map cons nV3450@lab* nV3451@rhs*) nV343e@mr))))) nV3446@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3444@t)))))))) (set! nV4b95@nV308d@fluid-let-syntax-transformer nV308d@fluid-let-syntax-transformer) (set! nV308f@type-descriptor-transformer (lambda (nV3458@e nV3459@r nV345a@mr) (let ((nV345e@t nV3458@e)) (let ((nV3460@ls/false (nV30f1@syntax-dispatch nV345e@t '(_ any)))) (if (and nV3460@ls/false (apply (lambda (nV3462@id) (nV2eea@id? nV3462@id)) nV3460@ls/false)) (apply (lambda (nV3464@id) (let ((nV3466@lab (nV2f00@id->label nV3464@id))) (let ((nV3468@b (nV2f02@label->binding nV3466@lab nV3459@r))) (let ((nV346a@type (nV2f06@binding-type nV3468@b))) (begin (if (not nV3466@lab) (nV2f0a@raise-unbound-error nV3464@id) (void)) (if (not (and (eq? nV346a@type '$rtd) (not (list? (nV2f08@binding-value nV3468@b))))) (nV31d1@syntax-violation '#f '"not a record type" nV3458@e) (void)) (list 'quote (nV2f08@binding-value nV3468@b))))))) nV3460@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV345e@t)))))) (set! nV4b96@nV308f@type-descriptor-transformer nV308f@type-descriptor-transformer) (set! nV3091@record-type-descriptor-transformer (lambda (nV346c@e nV346d@r nV346e@mr) (let ((nV3472@t nV346c@e)) (let ((nV3474@ls/false (nV30f1@syntax-dispatch nV3472@t '(_ any)))) (if (and nV3474@ls/false (apply (lambda (nV3476@id) (nV2eea@id? nV3476@id)) nV3474@ls/false)) (apply (lambda (nV3478@id) (let ((nV347a@lab (nV2f00@id->label nV3478@id))) (let ((nV347c@b (nV2f02@label->binding nV347a@lab nV346d@r))) (let ((nV347e@type (nV2f06@binding-type nV347c@b))) (begin (if (not nV347a@lab) (nV2f0a@raise-unbound-error nV3478@id) (void)) (if (not (and (eq? nV347e@type '$rtd) (list? (nV2f08@binding-value nV347c@b)))) (nV31d1@syntax-violation '#f '"not a record type" nV346c@e) (void)) (nV3113@chi-expr (car (nV2f08@binding-value nV347c@b)) nV346d@r nV346e@mr)))))) nV3474@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3472@t)))))) (set! nV4b97@nV3091@record-type-descriptor-transformer nV3091@record-type-descriptor-transformer) (set! nV3093@record-constructor-descriptor-transformer (lambda (nV3480@e nV3481@r nV3482@mr) (let ((nV3486@t nV3480@e)) (let ((nV3488@ls/false (nV30f1@syntax-dispatch nV3486@t '(_ any)))) (if (and nV3488@ls/false (apply (lambda (nV348a@id) (nV2eea@id? nV348a@id)) nV3488@ls/false)) (apply (lambda (nV348c@id) (let ((nV348e@lab (nV2f00@id->label nV348c@id))) (let ((nV3490@b (nV2f02@label->binding nV348e@lab nV3481@r))) (let ((nV3492@type (nV2f06@binding-type nV3490@b))) (begin (if (not nV348e@lab) (nV2f0a@raise-unbound-error nV348c@id) (void)) (if (not (and (eq? nV3492@type '$rtd) (list? (nV2f08@binding-value nV3490@b)))) (nV31d1@syntax-violation '#f '"invalid type" nV3480@e) (void)) (nV3113@chi-expr (cadr (nV2f08@binding-value nV3490@b)) nV3481@r nV3482@mr)))))) nV3488@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3486@t)))))) (set! nV4b98@nV3093@record-constructor-descriptor-transformer nV3093@record-constructor-descriptor-transformer) (set! nV3095@when-macro (lambda (nV3494@e) (let ((nV3496@t nV3494@e)) (let ((nV3498@ls/false (nV30f1@syntax-dispatch nV3496@t '(_ any any . each-any)))) (if nV3498@ls/false (apply (lambda (nV349a@test nV349b@e nV349c@e*) (nV30a7@bless (list 'if nV349a@test (cons 'begin (cons nV349b@e nV349c@e*))))) nV3498@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3496@t)))))) (set! nV4b99@nV3095@when-macro nV3095@when-macro) (set! nV3097@unless-macro (lambda (nV34a0@e) (let ((nV34a2@t nV34a0@e)) (let ((nV34a4@ls/false (nV30f1@syntax-dispatch nV34a2@t '(_ any any . each-any)))) (if nV34a4@ls/false (apply (lambda (nV34a6@test nV34a7@e nV34a8@e*) (nV30a7@bless (list 'if (list 'not nV34a6@test) (cons 'begin (cons nV34a7@e nV34a8@e*))))) nV34a4@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV34a2@t)))))) (set! nV4b9a@nV3097@unless-macro nV3097@unless-macro) (set! nV3099@if-transformer (lambda (nV34ac@e nV34ad@r nV34ae@mr) (let ((nV34b2@t nV34ac@e)) (let ((nV34b4@ls/false (nV30f1@syntax-dispatch nV34b2@t '(_ any any any)))) (if nV34b4@ls/false (apply (lambda (nV34b6@e0 nV34b7@e1 nV34b8@e2) (list 'if (nV3113@chi-expr nV34b6@e0 nV34ad@r nV34ae@mr) (nV3113@chi-expr nV34b7@e1 nV34ad@r nV34ae@mr) (nV3113@chi-expr nV34b8@e2 nV34ad@r nV34ae@mr))) nV34b4@ls/false) (let ((nV34bc@t nV34b2@t)) (let ((nV34be@ls/false (nV30f1@syntax-dispatch nV34bc@t '(_ any any)))) (if nV34be@ls/false (apply (lambda (nV34c0@e0 nV34c1@e1) (list 'if (nV3113@chi-expr nV34c0@e0 nV34ad@r nV34ae@mr) (nV3113@chi-expr nV34c1@e1 nV34ad@r nV34ae@mr) (nV2e50@nV2dab@build-void))) nV34be@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV34bc@t))))))))) (set! nV4b9b@nV3099@if-transformer nV3099@if-transformer) (set! nV309b@and-transformer (lambda (nV34c4@e nV34c5@r nV34c6@mr) (let ((nV34ca@t nV34c4@e)) (let ((nV34cc@ls/false (nV30f1@syntax-dispatch nV34ca@t '(_ . each-any)))) (if nV34cc@ls/false (apply (lambda (nV34ce@e*) (cons 'and (nV310f@chi-expr* nV34ce@e* nV34c5@r nV34c6@mr))) nV34cc@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV34ca@t)))))) (set! nV4b9c@nV309b@and-transformer nV309b@and-transformer) (set! nV309d@or-transformer (lambda (nV34d0@e nV34d1@r nV34d2@mr) (let ((nV34d6@t nV34d0@e)) (let ((nV34d8@ls/false (nV30f1@syntax-dispatch nV34d6@t '(_ . each-any)))) (if nV34d8@ls/false (apply (lambda (nV34da@e*) (cons 'or (nV310f@chi-expr* nV34da@e* nV34d1@r nV34d2@mr))) nV34d8@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV34d6@t)))))) (set! nV4b9d@nV309d@or-transformer nV309d@or-transformer) (set! nV309f@case-macro (lambda (nV34dc@e) (let ((nV34df@build-last '#f) (nV34e1@build-one '#f)) (begin (set! nV34df@build-last (lambda (nV3506@cls) (let ((nV3508@t nV3506@cls)) (let ((nV350a@ls/false (nV30f1@syntax-dispatch nV3508@t '(#(scheme-id else) any . each-any)))) (if nV350a@ls/false (apply (lambda (nV350c@e nV350d@e*) (cons 'begin (cons nV350c@e nV350d@e*))) nV350a@ls/false) (let ((nV3510@t nV3508@t)) (let ((nV3512@ls/false (nV30f1@syntax-dispatch nV3510@t '_))) (if nV3512@ls/false (apply (lambda () (nV34e1@build-one nV3506@cls '(if #f #f))) nV3512@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3510@t))))))))) (set! nV34e1@build-one (lambda (nV34f8@cls nV34f9@k) (let ((nV34fc@t nV34f8@cls)) (let ((nV34fe@ls/false (nV30f1@syntax-dispatch nV34fc@t '(each-any any . each-any)))) (if nV34fe@ls/false (apply (lambda (nV3500@d* nV3501@e nV3502@e*) (list 'if (list 'memv 't (list 'quote nV3500@d*)) (cons 'begin (cons nV3501@e nV3502@e*)) nV34f9@k)) nV34fe@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV34fc@t)))))) (let ((nV34e2@t nV34dc@e)) (let ((nV34e4@ls/false (nV30f1@syntax-dispatch nV34e2@t '(_ any)))) (if nV34e4@ls/false (apply (lambda (nV34e6@expr) (nV30a7@bless (cons 'let (cons (list (list 't nV34e6@expr)) '((if #f #f)))))) nV34e4@ls/false) (let ((nV34e8@t nV34e2@t)) (let ((nV34ea@ls/false (nV30f1@syntax-dispatch nV34e8@t '(_ any any . each-any)))) (if nV34ea@ls/false (apply (lambda (nV34ec@expr nV34ed@cls nV34ee@cls*) (nV30a7@bless (list 'let (list (list 't nV34ec@expr)) (let nV34f6@f ((nV34f2@cls nV34ed@cls) (nV34f3@cls* nV34ee@cls*)) (if (null? nV34f3@cls*) (nV34df@build-last nV34f2@cls) (nV34e1@build-one nV34f2@cls (nV34f6@f (car nV34f3@cls*) (cdr nV34f3@cls*)))))))) nV34ea@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV34e8@t))))))))))) (set! nV4b9e@nV309f@case-macro nV309f@case-macro) (set! nV30a1@quote-transformer (lambda (nV3514@e nV3515@r nV3516@mr) (let ((nV351a@t nV3514@e)) (let ((nV351c@ls/false (nV30f1@syntax-dispatch nV351a@t '(_ any)))) (if nV351c@ls/false (apply (lambda (nV351e@datum) (list 'quote (nV2efe@stx->datum nV351e@datum))) nV351c@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV351a@t)))))) (set! nV4b9f@nV30a1@quote-transformer nV30a1@quote-transformer) (set! nV30a3@case-lambda-transformer (lambda (nV3520@e nV3521@r nV3522@mr) (let ((nV3526@t nV3520@e)) (let ((nV3528@ls/false (nV30f1@syntax-dispatch nV3526@t '(_ . #(each (any any . each-any)))))) (if nV3528@ls/false (apply (lambda (nV352a@fmls* nV352b@b* nV352c@b**) (call-with-values (lambda () (nV311b@chi-lambda-clause* nV3520@e nV352a@fmls* (map cons nV352b@b* nV352c@b**) nV3521@r nV3522@mr)) (lambda (nV3534@nV3531 nV3535@nV3533) (let ((nV3538@body* nV3535@nV3533) (nV3539@fmls* nV3534@nV3531)) (nV2e4e@nV2d7b@build-case-lambda '#f nV3539@fmls* nV3538@body*))))) nV3528@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3526@t)))))) (set! nV4ba0@nV30a3@case-lambda-transformer nV30a3@case-lambda-transformer) (set! nV30a5@lambda-transformer (lambda (nV353c@e nV353d@r nV353e@mr) (let ((nV3542@t nV353c@e)) (let ((nV3544@ls/false (nV30f1@syntax-dispatch nV3542@t '(_ any any . each-any)))) (if nV3544@ls/false (apply (lambda (nV3546@fmls nV3547@b nV3548@b*) (call-with-values (lambda () (nV3119@chi-lambda-clause nV353c@e nV3546@fmls (cons nV3547@b nV3548@b*) nV353d@r nV353e@mr)) (lambda (nV3550@nV354d nV3551@nV354f) (let ((nV3554@body nV3551@nV354f) (nV3555@fmls nV3550@nV354d)) (nV2e4d@nV2d79@build-lambda '#f nV3555@fmls nV3554@body))))) nV3544@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3542@t)))))) (set! nV4ba1@nV30a5@lambda-transformer nV30a5@lambda-transformer) (set! nV30a7@bless (lambda (nV3558@x) (nV2ed2@mkstx (let nV355c@f ((nV355a@x nV3558@x)) (if (nV2eb6@stx? nV355a@x) nV355a@x (if (pair? nV355a@x) (cons (nV355c@f (car nV355a@x)) (nV355c@f (cdr nV355a@x))) (if (symbol? nV355a@x) (nV3079@scheme-stx nV355a@x) (if (vector? nV355a@x) (vector-map nV355c@f nV355a@x) nV355a@x))))) '() '() '()))) (set! nV4ba2@nV30a7@bless nV30a7@bless) (set! nV30a9@with-syntax-macro (lambda (nV355e@e) (let ((nV3560@t nV355e@e)) (let ((nV3562@ls/false (nV30f1@syntax-dispatch nV3560@t '(_ #(each (any any)) any . each-any)))) (if nV3562@ls/false (apply (lambda (nV3564@pat* nV3565@expr* nV3566@b nV3567@b*) (let ((nV356c@idn* (let nV3570@f ((nV356e@pat* nV3564@pat*)) (if (null? nV356e@pat*) '() (call-with-values (lambda () (nV30ef@convert-pattern (car nV356e@pat*) '())) (lambda (nV3576@nV3573 nV3577@nV3575) (let ((nV357a@idn* nV3577@nV3575) (nV357b@pat nV3576@nV3573)) (append nV357a@idn* (nV3570@f (cdr nV356e@pat*)))))))))) (begin (nV3117@verify-formals (map car nV356c@idn*) nV355e@e) (let ((nV357e@t* (nV31bf@generate-temporaries nV3565@expr*))) (nV30a7@bless (list 'let (map list nV357e@t* nV3565@expr*) (let nV3584@f ((nV3580@pat* nV3564@pat*) (nV3581@t* nV357e@t*)) (if (null? nV3580@pat*) (cons 'begin (cons '#f (cons nV3566@b nV3567@b*))) (list 'syntax-case (car nV3581@t*) '() (list (car nV3580@pat*) (nV3584@f (cdr nV3580@pat*) (cdr nV3581@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car nV3580@pat*)) (car nV3581@t*)))))))))))) nV3562@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3560@t)))))) (set! nV4ba3@nV30a9@with-syntax-macro nV30a9@with-syntax-macro) (set! nV30ab@invalid-fmls-error (lambda (nV3586@stx nV3587@fmls) (let ((nV358a@t nV3587@fmls)) (let ((nV358c@ls/false (nV30f1@syntax-dispatch nV358a@t '#(each+ any () any)))) (if nV358c@ls/false (apply (lambda (nV358e@id* nV358f@last) (let nV3594@f ((nV3592@id* (if (nV2eea@id? nV358f@last) (cons nV358f@last nV358e@id*) (if (nV2ee0@syntax-null? nV358f@last) nV358e@id* (nV31d1@syntax-violation '#f '"not an identifier" nV3586@stx nV358f@last))))) (if (null? nV3592@id*) (values) (if (not (nV2eea@id? (car nV3592@id*))) (nV31d1@syntax-violation '#f '"not an identifier" nV3586@stx (car nV3592@id*)) (begin (nV3594@f (cdr nV3592@id*)) (if (nV2ef6@bound-id-member? (car nV3592@id*) (cdr nV3592@id*)) (nV31d1@syntax-violation '#f '"duplicate binding" nV3586@stx (car nV3592@id*)) (void))))))) nV358c@ls/false) (let ((nV3596@t nV358a@t)) (let ((nV3598@ls/false (nV30f1@syntax-dispatch nV3596@t '_))) (if nV3598@ls/false (apply (lambda () (nV31d1@syntax-violation '#f '"malformed binding form" nV3586@stx nV3587@fmls)) nV3598@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3596@t))))))))) (set! nV4ba4@nV30ab@invalid-fmls-error nV30ab@invalid-fmls-error) (set! nV30ad@let-macro (lambda (nV359a@stx) (let ((nV359c@t nV359a@stx)) (let ((nV359e@ls/false (nV30f1@syntax-dispatch nV359c@t '(_ #(each (any any)) any . each-any)))) (if nV359e@ls/false (apply (lambda (nV35a0@lhs* nV35a1@rhs* nV35a2@b nV35a3@b*) (if (nV2ef2@valid-bound-ids? nV35a0@lhs*) (nV30a7@bless (cons (cons 'lambda (cons nV35a0@lhs* (cons nV35a2@b nV35a3@b*))) nV35a1@rhs*)) (nV30ab@invalid-fmls-error nV359a@stx nV35a0@lhs*))) nV359e@ls/false) (let ((nV35a8@t nV359c@t)) (let ((nV35aa@ls/false (nV30f1@syntax-dispatch nV35a8@t '(_ any #(each (any any)) any . each-any)))) (if (and nV35aa@ls/false (apply (lambda (nV35ac@f nV35ad@lhs* nV35ae@rhs* nV35af@b nV35b0@b*) (nV2eea@id? nV35ac@f)) nV35aa@ls/false)) (apply (lambda (nV35b6@f nV35b7@lhs* nV35b8@rhs* nV35b9@b nV35ba@b*) (if (nV2ef2@valid-bound-ids? nV35b7@lhs*) (nV30a7@bless (cons (list 'letrec (list (list nV35b6@f (cons 'lambda (cons nV35b7@lhs* (cons nV35b9@b nV35ba@b*))))) nV35b6@f) nV35b8@rhs*)) (nV30ab@invalid-fmls-error nV359a@stx nV35b7@lhs*))) nV35aa@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV35a8@t))))))))) (set! nV4ba5@nV30ad@let-macro nV30ad@let-macro) (set! nV30af@let-values-macro (lambda (nV35c0@stx) (let ((nV35c3@rename '#f) (nV35c5@rename* '#f)) (begin (set! nV35c3@rename (lambda (nV3628@x nV3629@old* nV362a@new*) (begin (if (not (nV2eea@id? nV3628@x)) (nV31d1@syntax-violation '#f '"not an indentifier" nV35c0@stx nV3628@x) (void)) (if (nV2ef6@bound-id-member? nV3628@x nV3629@old*) (nV31d1@syntax-violation '#f '"duplicate binding" nV35c0@stx nV3628@x) (void)) (let ((nV362e@y (gensym (nV31d7@syntax->datum nV3628@x)))) (values nV362e@y (cons nV3628@x nV3629@old*) (cons nV362e@y nV362a@new*)))))) (set! nV35c5@rename* (lambda (nV3616@x* nV3617@old* nV3618@new*) (if (null? nV3616@x*) (values '() nV3617@old* nV3618@new*) (call-with-values (lambda () (nV35c3@rename (car nV3616@x*) nV3617@old* nV3618@new*)) (lambda (nV361c@x nV361d@old* nV361e@new*) (call-with-values (lambda () (nV35c5@rename* (cdr nV3616@x*) nV361d@old* nV361e@new*)) (lambda (nV3622@x* nV3623@old* nV3624@new*) (values (cons nV361c@x nV3622@x*) nV3623@old* nV3624@new*)))))))) (let ((nV35c6@t nV35c0@stx)) (let ((nV35c8@ls/false (nV30f1@syntax-dispatch nV35c6@t '(_ () any . each-any)))) (if nV35c8@ls/false (apply (lambda (nV35ca@b nV35cb@b*) (cons* (nV30a7@bless 'let) '() nV35ca@b nV35cb@b*)) nV35c8@ls/false) (let ((nV35ce@t nV35c6@t)) (let ((nV35d0@ls/false (nV30f1@syntax-dispatch nV35ce@t '(_ #(each (any any)) any . each-any)))) (if nV35d0@ls/false (apply (lambda (nV35d2@lhs* nV35d3@rhs* nV35d4@b nV35d5@b*) (nV30a7@bless (let nV35e2@f ((nV35da@lhs* nV35d2@lhs*) (nV35db@rhs* nV35d3@rhs*) (nV35dc@old* '()) (nV35dd@new* '())) (if (null? nV35da@lhs*) (cons 'let (cons (map list nV35dc@old* nV35dd@new*) (cons nV35d4@b nV35d5@b*))) (let ((nV35e4@t (car nV35da@lhs*))) (let ((nV35e6@ls/false (nV30f1@syntax-dispatch nV35e4@t 'each-any))) (if nV35e6@ls/false (apply (lambda (nV35e8@x*) (call-with-values (lambda () (nV35c5@rename* nV35e8@x* nV35dc@old* nV35dd@new*)) (lambda (nV35f0@nV35eb nV35f1@nV35ed nV35f2@nV35ef) (let ((nV35f6@new* nV35f2@nV35ef) (nV35f7@old* nV35f1@nV35ed) (nV35f8@y* nV35f0@nV35eb)) (list 'call-with-values (list 'lambda '() (car nV35db@rhs*)) (list 'lambda nV35f8@y* (nV35e2@f (cdr nV35da@lhs*) (cdr nV35db@rhs*) nV35f7@old* nV35f6@new*))))))) nV35e6@ls/false) (let ((nV35fc@t nV35e4@t)) (let ((nV35fe@ls/false (nV30f1@syntax-dispatch nV35fc@t '#(each+ any () any)))) (if nV35fe@ls/false (apply (lambda (nV3600@x* nV3601@x) (call-with-values (lambda () (nV35c3@rename nV3601@x nV35dc@old* nV35dd@new*)) (lambda (nV3604@y nV3605@old* nV3606@new*) (call-with-values (lambda () (nV35c5@rename* nV3600@x* nV3605@old* nV3606@new*)) (lambda (nV360a@y* nV360b@old* nV360c@new*) (list 'call-with-values (list 'lambda '() (car nV35db@rhs*)) (list 'lambda (append nV360a@y* nV3604@y) (nV35e2@f (cdr nV35da@lhs*) (cdr nV35db@rhs*) nV360b@old* nV360c@new*)))))))) nV35fe@ls/false) (let ((nV3610@t nV35fc@t)) (let ((nV3612@ls/false (nV30f1@syntax-dispatch nV3610@t 'any))) (if nV3612@ls/false (apply (lambda (nV3614@others) (nV31d1@syntax-violation '#f '"malformed bindings" nV35c0@stx nV3614@others)) nV3612@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3610@t)))))))))))))) nV35d0@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV35ce@t))))))))))) (set! nV4ba6@nV30af@let-values-macro nV30af@let-values-macro) (set! nV30b1@let*-values-macro (lambda (nV3630@stx) (let ((nV3633@check '#f)) (begin (set! nV3633@check (lambda (nV3662@x*) (if (not (null? nV3662@x*)) (let ((nV3664@x (car nV3662@x*))) (begin (if (not (nV2eea@id? nV3664@x)) (nV31d1@syntax-violation '#f '"not an identifier" nV3630@stx nV3664@x) (void)) (nV3633@check (cdr nV3662@x*)) (if (nV2ef6@bound-id-member? nV3664@x (cdr nV3662@x*)) (nV31d1@syntax-violation '#f '"duplicate identifier" nV3630@stx nV3664@x) (void)))) (void)))) (let ((nV3634@t nV3630@stx)) (let ((nV3636@ls/false (nV30f1@syntax-dispatch nV3634@t '(_ () any . each-any)))) (if nV3636@ls/false (apply (lambda (nV3638@b nV3639@b*) (cons* (nV30a7@bless 'let) '() nV3638@b nV3639@b*)) nV3636@ls/false) (let ((nV363c@t nV3634@t)) (let ((nV363e@ls/false (nV30f1@syntax-dispatch nV363c@t '(_ #(each (any any)) any . each-any)))) (if nV363e@ls/false (apply (lambda (nV3640@lhs* nV3641@rhs* nV3642@b nV3643@b*) (nV30a7@bless (let nV364c@f ((nV3648@lhs* nV3640@lhs*) (nV3649@rhs* nV3641@rhs*)) (if (null? nV3648@lhs*) (cons 'begin (cons nV3642@b nV3643@b*)) (let ((nV364e@t (car nV3648@lhs*))) (let ((nV3650@ls/false (nV30f1@syntax-dispatch nV364e@t 'each-any))) (if nV3650@ls/false (apply (lambda (nV3652@x*) (begin (nV3633@check nV3652@x*) (list 'call-with-values (list 'lambda '() (car nV3649@rhs*)) (list 'lambda nV3652@x* (nV364c@f (cdr nV3648@lhs*) (cdr nV3649@rhs*)))))) nV3650@ls/false) (let ((nV3654@t nV364e@t)) (let ((nV3656@ls/false (nV30f1@syntax-dispatch nV3654@t '#(each+ any () any)))) (if nV3656@ls/false (apply (lambda (nV3658@x* nV3659@x) (begin (nV3633@check (cons nV3659@x nV3658@x*)) (list 'call-with-values (list 'lambda '() (car nV3649@rhs*)) (list 'lambda (append nV3658@x* nV3659@x) (nV364c@f (cdr nV3648@lhs*) (cdr nV3649@rhs*)))))) nV3656@ls/false) (let ((nV365c@t nV3654@t)) (let ((nV365e@ls/false (nV30f1@syntax-dispatch nV365c@t 'any))) (if nV365e@ls/false (apply (lambda (nV3660@others) (nV31d1@syntax-violation '#f '"malformed bindings" nV3630@stx nV3660@others)) nV365e@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV365c@t)))))))))))))) nV363e@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV363c@t))))))))))) (set! nV4ba7@nV30b1@let*-values-macro nV30b1@let*-values-macro) (set! nV30b3@trace-lambda-macro (lambda (nV3666@stx) (let ((nV3668@t nV3666@stx)) (let ((nV366a@ls/false (nV30f1@syntax-dispatch nV3668@t '(_ any each-any any . each-any)))) (if nV366a@ls/false (apply (lambda (nV366c@who nV366d@fmls nV366e@b nV366f@b*) (if (nV2ef2@valid-bound-ids? nV366d@fmls) (nV30a7@bless (list 'make-traced-procedure (list 'quote nV366c@who) (cons 'lambda (cons nV366d@fmls (cons nV366e@b nV366f@b*))))) (nV30ab@invalid-fmls-error nV3666@stx nV366d@fmls))) nV366a@ls/false) (let ((nV3674@t nV3668@t)) (let ((nV3676@ls/false (nV30f1@syntax-dispatch nV3674@t '(_ any #(each+ any () any) any . each-any)))) (if nV3676@ls/false (apply (lambda (nV3678@who nV3679@fmls nV367a@last nV367b@b nV367c@b*) (if (nV2ef2@valid-bound-ids? (cons nV367a@last nV3679@fmls)) (nV30a7@bless (list 'make-traced-procedure (list 'quote nV3678@who) (cons 'lambda (cons (append nV3679@fmls nV367a@last) (cons nV367b@b nV367c@b*))))) (nV30ab@invalid-fmls-error nV3666@stx (append nV3679@fmls nV367a@last)))) nV3676@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3674@t))))))))) (set! nV4ba8@nV30b3@trace-lambda-macro nV30b3@trace-lambda-macro) (set! nV30b5@trace-define-macro (lambda (nV3682@stx) (let ((nV3684@t nV3682@stx)) (let ((nV3686@ls/false (nV30f1@syntax-dispatch nV3684@t '(_ (any . each-any) any . each-any)))) (if nV3686@ls/false (apply (lambda (nV3688@who nV3689@fmls nV368a@b nV368b@b*) (if (nV2ef2@valid-bound-ids? nV3689@fmls) (nV30a7@bless (list 'define nV3688@who (list 'make-traced-procedure (list 'quote nV3688@who) (cons 'lambda (cons nV3689@fmls (cons nV368a@b nV368b@b*)))))) (nV30ab@invalid-fmls-error nV3682@stx nV3689@fmls))) nV3686@ls/false) (let ((nV3690@t nV3684@t)) (let ((nV3692@ls/false (nV30f1@syntax-dispatch nV3690@t '(_ (any . #(each+ any () any)) any . each-any)))) (if nV3692@ls/false (apply (lambda (nV3694@who nV3695@fmls nV3696@last nV3697@b nV3698@b*) (if (nV2ef2@valid-bound-ids? (cons nV3696@last nV3695@fmls)) (nV30a7@bless (list 'define nV3694@who (list 'make-traced-procedure (list 'quote nV3694@who) (cons 'lambda (cons (append nV3695@fmls nV3696@last) (cons nV3697@b nV3698@b*)))))) (nV30ab@invalid-fmls-error nV3682@stx (append nV3695@fmls nV3696@last)))) nV3692@ls/false) (let ((nV369e@t nV3690@t)) (let ((nV36a0@ls/false (nV30f1@syntax-dispatch nV369e@t '(_ any any)))) (if nV36a0@ls/false (apply (lambda (nV36a2@who nV36a3@expr) (if (nV2eea@id? nV36a2@who) (nV30a7@bless (list 'define nV36a2@who (list 'let (list (list 'v nV36a3@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote nV36a2@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (nV31d1@syntax-violation '#f '"invalid name" nV3682@stx))) nV36a0@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV369e@t)))))))))))) (set! nV4ba9@nV30b5@trace-define-macro nV30b5@trace-define-macro) (set! nV30b7@trace-define-syntax-macro (lambda (nV36a6@stx) (let ((nV36a8@t nV36a6@stx)) (let ((nV36aa@ls/false (nV30f1@syntax-dispatch nV36a8@t '(_ any any)))) (if nV36aa@ls/false (apply (lambda (nV36ac@who nV36ad@expr) (if (nV2eea@id? nV36ac@who) (nV30a7@bless (list 'define-syntax nV36ac@who (list 'make-traced-macro (list 'quote nV36ac@who) nV36ad@expr))) (nV31d1@syntax-violation '#f '"invalid name" nV36a6@stx))) nV36aa@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV36a8@t)))))) (set! nV4baa@nV30b7@trace-define-syntax-macro nV30b7@trace-define-syntax-macro) (set! nV30b9@trace-let/rec-syntax (lambda (nV36b0@who) (lambda (nV36b2@stx) (let ((nV36b4@t nV36b2@stx)) (let ((nV36b6@ls/false (nV30f1@syntax-dispatch nV36b4@t '(_ #(each (any any)) any . each-any)))) (if nV36b6@ls/false (apply (lambda (nV36b8@lhs* nV36b9@rhs* nV36ba@b nV36bb@b*) (if (nV2ef2@valid-bound-ids? nV36b8@lhs*) (let ((nV36c0@rhs* (map (lambda (nV36c2@lhs nV36c3@rhs) (list 'make-traced-macro (list 'quote nV36c2@lhs) nV36c3@rhs)) nV36b8@lhs* nV36b9@rhs*))) (nV30a7@bless (cons nV36b0@who (cons (map list nV36b8@lhs* nV36c0@rhs*) (cons nV36ba@b nV36bb@b*))))) (nV30ab@invalid-fmls-error nV36b2@stx nV36b8@lhs*))) nV36b6@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV36b4@t))))))) (set! nV4bab@nV30b9@trace-let/rec-syntax nV30b9@trace-let/rec-syntax) (set! nV30bb@trace-let-syntax-macro (nV30b9@trace-let/rec-syntax 'let-syntax)) (set! nV4bac@nV30bb@trace-let-syntax-macro nV30bb@trace-let-syntax-macro) (set! nV30bd@trace-letrec-syntax-macro (nV30b9@trace-let/rec-syntax 'letrec-syntax)) (set! nV4bad@nV30bd@trace-letrec-syntax-macro nV30bd@trace-letrec-syntax-macro) (set! nV30bf@guard-macro (lambda (nV36c6@x) (let ((nV36c9@gen-clauses '#f)) (begin (set! nV36c9@gen-clauses (lambda (nV36e0@con nV36e1@outerk nV36e2@clause*) (let ((nV36e7@f '#f) (nV36e9@f* '#f)) (begin (set! nV36e7@f (lambda (nV3720@x nV3721@k) (let ((nV3724@t nV3720@x)) (let ((nV3726@ls/false (nV30f1@syntax-dispatch nV3724@t '(any #(scheme-id =>) any)))) (if nV3726@ls/false (apply (lambda (nV3728@e nV3729@p) (let ((nV372c@t (gensym))) (list 'let (list (list nV372c@t nV3728@e)) (list 'if nV372c@t (list nV3729@p nV372c@t) nV3721@k)))) nV3726@ls/false) (let ((nV372e@t nV3724@t)) (let ((nV3730@ls/false (nV30f1@syntax-dispatch nV372e@t '(any)))) (if nV3730@ls/false (apply (lambda (nV3732@e) (let ((nV3734@t (gensym))) (list 'let (list (list nV3734@t nV3732@e)) (list 'if nV3734@t nV3734@t nV3721@k)))) nV3730@ls/false) (let ((nV3736@t nV372e@t)) (let ((nV3738@ls/false (nV30f1@syntax-dispatch nV3736@t '(any any . each-any)))) (if nV3738@ls/false (apply (lambda (nV373a@e nV373b@v nV373c@v*) (list 'if nV373a@e (cons 'begin (cons nV373b@v nV373c@v*)) nV3721@k)) nV3738@ls/false) (let ((nV3740@t nV3736@t)) (let ((nV3742@ls/false (nV30f1@syntax-dispatch nV3740@t '_))) (if nV3742@ls/false (apply (lambda () (nV31d1@syntax-violation '#f '"invalid guard clause" nV3720@x)) nV3742@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3740@t))))))))))))))) (set! nV36e9@f* (lambda (nV36f6@x*) (let ((nV36f8@t nV36f6@x*)) (let ((nV36fa@ls/false (nV30f1@syntax-dispatch nV36f8@t '()))) (if nV36fa@ls/false (apply (lambda () (let ((nV36fc@g (gensym))) (values (list nV36fc@g (list 'lambda '() (list 'raise-continuable nV36e0@con))) nV36fc@g))) nV36fa@ls/false) (let ((nV36fe@t nV36f8@t)) (let ((nV3700@ls/false (nV30f1@syntax-dispatch nV36fe@t '((#(scheme-id else) any . each-any))))) (if nV3700@ls/false (apply (lambda (nV3702@e nV3703@e*) (values (cons 'begin (cons nV3702@e nV3703@e*)) '#f)) nV3700@ls/false) (let ((nV3706@t nV36fe@t)) (let ((nV3708@ls/false (nV30f1@syntax-dispatch nV3706@t '(any . any)))) (if nV3708@ls/false (apply (lambda (nV370a@cls nV370b@cls*) (call-with-values (lambda () (nV36e9@f* nV370b@cls*)) (lambda (nV3712@nV370f nV3713@nV3711) (let ((nV3716@g nV3713@nV3711) (nV3717@e nV3712@nV370f)) (values (nV36e7@f nV370a@cls nV3717@e) nV3716@g))))) nV3708@ls/false) (let ((nV371a@t nV3706@t)) (let ((nV371c@ls/false (nV30f1@syntax-dispatch nV371a@t 'any))) (if nV371c@ls/false (apply (lambda (nV371e@others) (nV31d1@syntax-violation '#f '"invalid guard clause" nV371e@others)) nV371c@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV371a@t))))))))))))))) (call-with-values (lambda () (nV36e9@f* nV36e2@clause*)) (lambda (nV36ee@nV36eb nV36ef@nV36ed) (let ((nV36f2@raisek nV36ef@nV36ed) (nV36f3@code nV36ee@nV36eb)) (if nV36f2@raisek (list (list 'call/cc (list 'lambda (list nV36f2@raisek) (list nV36e1@outerk (list 'lambda '() nV36f3@code))))) (list nV36e1@outerk (list 'lambda '() nV36f3@code)))))))))) (let ((nV36ca@t nV36c6@x)) (let ((nV36cc@ls/false (nV30f1@syntax-dispatch nV36ca@t '(_ (any . each-any) any . each-any)))) (if (and nV36cc@ls/false (apply (lambda (nV36ce@con nV36cf@clause* nV36d0@b nV36d1@b*) (nV2eea@id? nV36ce@con)) nV36cc@ls/false)) (apply (lambda (nV36d6@con nV36d7@clause* nV36d8@b nV36d9@b*) (let ((nV36de@outerk (gensym))) (nV30a7@bless (list (list 'call/cc (list 'lambda (list nV36de@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list nV36d6@con) (nV36c9@gen-clauses nV36d6@con nV36de@outerk nV36d7@clause*)) (cons 'lambda (cons '() (cons nV36d8@b nV36d9@b*))))))))))) nV36cc@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV36ca@t)))))))) (set! nV4bae@nV30bf@guard-macro nV30bf@guard-macro) (set! nV30c1@define-enumeration-macro (lambda (nV3744@stx) (let ((nV3747@set? '#f) (nV3749@remove-dups '#f)) (begin (set! nV3747@set? (lambda (nV3760@x) (or (null? nV3760@x) (and (not (memq (car nV3760@x) (cdr nV3760@x))) (nV3747@set? (cdr nV3760@x)))))) (set! nV3749@remove-dups (lambda (nV375e@ls) (if (null? nV375e@ls) '() (cons (car nV375e@ls) (nV3749@remove-dups (remq (car nV375e@ls) (cdr nV375e@ls))))))) (let ((nV374a@t nV3744@stx)) (let ((nV374c@ls/false (nV30f1@syntax-dispatch nV374a@t '(_ any each-any any)))) (if (and nV374c@ls/false (apply (lambda (nV374e@name nV374f@id* nV3750@maker) (and (nV2eea@id? nV374e@name) (nV2eea@id? nV3750@maker) (for-all nV2eea@id? nV374f@id*))) nV374c@ls/false)) (apply (lambda (nV3754@name nV3755@id* nV3756@maker) (let ((nV375a@name* (nV3749@remove-dups (nV31d7@syntax->datum nV3755@id*))) (nV375b@mk (gensym))) (nV30a7@bless (list 'begin (list 'define nV375b@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote nV375a@name*)))) (list 'define-syntax nV3754@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote nV375a@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote nV3754@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax nV3756@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote nV3756@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote nV375a@name*)) (cons 'syntax-violation (cons (list 'quote nV3756@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons nV375b@mk '('(n* ...))))))))))))) nV374c@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV374a@t)))))))) (set! nV4baf@nV30c1@define-enumeration-macro nV30c1@define-enumeration-macro) (set! nV30c3@time-macro (lambda (nV3762@stx) (let ((nV3764@t nV3762@stx)) (let ((nV3766@ls/false (nV30f1@syntax-dispatch nV3764@t '(_ any)))) (if nV3766@ls/false (apply (lambda (nV3768@expr) (nV30a7@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() nV3768@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) nV3766@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3764@t)))))) (set! nV4bb0@nV30c3@time-macro nV30c3@time-macro) (set! nV30c5@delay-macro (lambda (nV376a@stx) (let ((nV376c@t nV376a@stx)) (let ((nV376e@ls/false (nV30f1@syntax-dispatch nV376c@t '(_ any)))) (if nV376e@ls/false (apply (lambda (nV3770@expr) (nV30a7@bless (list 'make-promise (list 'lambda '() nV3770@expr)))) nV376e@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV376c@t)))))) (set! nV4bb1@nV30c5@delay-macro nV30c5@delay-macro) (set! nV30c7@assert-macro (lambda (nV3772@stx) (let ((nV3774@t nV3772@stx)) (let ((nV3776@ls/false (nV30f1@syntax-dispatch nV3774@t '(_ any)))) (if nV3776@ls/false (apply (lambda (nV3778@expr) (let ((nV377a@pos (or (nV31c9@expression-position nV3772@stx) (nV31c9@expression-position nV3778@expr)))) (nV30a7@bless (list 'let (list (list 'x nV3778@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote nV3778@expr) (list 'quote nV377a@pos))))))) nV3776@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3774@t)))))) (set! nV4bb2@nV30c7@assert-macro nV30c7@assert-macro) (set! nV30c9@endianness-macro (lambda (nV377c@stx) (let ((nV377e@t nV377c@stx)) (let ((nV3780@ls/false (nV30f1@syntax-dispatch nV377e@t '(_ any)))) (if nV3780@ls/false (apply (lambda (nV3782@e) (let ((nV3784@t (nV31d7@syntax->datum nV3782@e))) (if (memv nV3784@t '(little)) (nV30a7@bless ''little) (if (memv nV3784@t '(big)) (nV30a7@bless ''big) (nV31d1@syntax-violation '#f '"endianness must be big or little" nV377c@stx))))) nV3780@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV377e@t)))))) (set! nV4bb3@nV30c9@endianness-macro nV30c9@endianness-macro) (set! nV30cb@identifier-syntax-macro (lambda (nV3786@stx) (let ((nV3788@t nV3786@stx)) (let ((nV378a@ls/false (nV30f1@syntax-dispatch nV3788@t '(_ any)))) (if nV378a@ls/false (apply (lambda (nV378c@expr) (nV30a7@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax nV378c@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax nV378c@expr) '((syntax (e* ...)))))))))) nV378a@ls/false) (let ((nV378e@t nV3788@t)) (let ((nV3790@ls/false (nV30f1@syntax-dispatch nV378e@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and nV3790@ls/false (apply (lambda (nV3792@id1 nV3793@expr1 nV3794@id2 nV3795@expr2 nV3796@expr3) (and (nV2eea@id? nV3792@id1) (nV2eea@id? nV3794@id2) (nV2eea@id? nV3795@expr2))) nV3790@ls/false)) (apply (lambda (nV379c@id1 nV379d@expr1 nV379e@id2 nV379f@expr2 nV37a0@expr3) (nV30a7@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax nV379d@expr1)) (list (list 'set! 'id nV379f@expr2) (list 'syntax nV37a0@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons nV379d@expr1 '(e* ...))))))))) nV3790@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV378e@t))))))))) (set! nV4bb4@nV30cb@identifier-syntax-macro nV30cb@identifier-syntax-macro) (set! nV30cd@do-macro (lambda (nV37a6@stx) (let ((nV37a9@bind '#f)) (begin (set! nV37a9@bind (lambda (nV37c0@x) (let ((nV37c2@t nV37c0@x)) (let ((nV37c4@ls/false (nV30f1@syntax-dispatch nV37c2@t '(any any)))) (if nV37c4@ls/false (apply (lambda (nV37c6@x nV37c7@init) (list nV37c6@x nV37c7@init nV37c6@x)) nV37c4@ls/false) (let ((nV37ca@t nV37c2@t)) (let ((nV37cc@ls/false (nV30f1@syntax-dispatch nV37ca@t '(any any any)))) (if nV37cc@ls/false (apply (lambda (nV37ce@x nV37cf@init nV37d0@step) (list nV37ce@x nV37cf@init nV37d0@step)) nV37cc@ls/false) (let ((nV37d4@t nV37ca@t)) (let ((nV37d6@ls/false (nV30f1@syntax-dispatch nV37d4@t '_))) (if nV37d6@ls/false (apply (lambda () (nV31d1@syntax-violation '#f '"invalid binding" nV37a6@stx)) nV37d6@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV37d4@t)))))))))))) (let ((nV37aa@t nV37a6@stx)) (let ((nV37ac@ls/false (nV30f1@syntax-dispatch nV37aa@t '(_ each-any (any . each-any) . each-any)))) (if nV37ac@ls/false (apply (lambda (nV37ae@binding* nV37af@test nV37b0@expr* nV37b1@command*) (let ((nV37b6@t (map nV37a9@bind nV37ae@binding*))) (let ((nV37b8@ls/false (nV30f1@syntax-dispatch nV37b6@t '#(each (any any any))))) (if nV37b8@ls/false (apply (lambda (nV37ba@x* nV37bb@init* nV37bc@step*) (if (nV2ef2@valid-bound-ids? nV37ba@x*) (nV30a7@bless (list 'letrec (list (list 'loop (list 'lambda nV37ba@x* (list 'if nV37af@test (cons 'begin (cons '(if #f #f) nV37b0@expr*)) (cons 'begin (append nV37b1@command* (list (cons 'loop nV37bc@step*)))))))) (cons 'loop nV37bb@init*))) (nV31d1@syntax-violation '#f '"invalid bindings" nV37a6@stx))) nV37b8@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV37b6@t))))) nV37ac@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV37aa@t)))))))) (set! nV4bb5@nV30cd@do-macro nV30cd@do-macro) (set! nV30cf@let*-macro (lambda (nV37d8@stx) (let ((nV37da@t nV37d8@stx)) (let ((nV37dc@ls/false (nV30f1@syntax-dispatch nV37da@t '(_ #(each (any any)) any . each-any)))) (if (and nV37dc@ls/false (apply (lambda (nV37de@lhs* nV37df@rhs* nV37e0@b nV37e1@b*) (for-all nV2eea@id? nV37de@lhs*)) nV37dc@ls/false)) (apply (lambda (nV37e6@lhs* nV37e7@rhs* nV37e8@b nV37e9@b*) (nV30a7@bless (let nV37f0@f ((nV37ee@x* (map list nV37e6@lhs* nV37e7@rhs*))) (if (null? nV37ee@x*) (cons 'let (cons '() (cons nV37e8@b nV37e9@b*))) (list 'let (list (car nV37ee@x*)) (nV37f0@f (cdr nV37ee@x*))))))) nV37dc@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV37da@t)))))) (set! nV4bb6@nV30cf@let*-macro nV30cf@let*-macro) (set! nV30d1@or-macro (lambda (nV37f2@stx) (let ((nV37f4@t nV37f2@stx)) (let ((nV37f6@ls/false (nV30f1@syntax-dispatch nV37f4@t '(_)))) (if nV37f6@ls/false (apply (lambda () '#f) nV37f6@ls/false) (let ((nV37f8@t nV37f4@t)) (let ((nV37fa@ls/false (nV30f1@syntax-dispatch nV37f8@t '(_ any . each-any)))) (if nV37fa@ls/false (apply (lambda (nV37fc@e nV37fd@e*) (nV30a7@bless (let nV3804@f ((nV3800@e nV37fc@e) (nV3801@e* nV37fd@e*)) (if (null? nV3801@e*) (list 'begin '#f nV3800@e) (list 'let (list (list 't nV3800@e)) (list 'if 't 't (nV3804@f (car nV3801@e*) (cdr nV3801@e*)))))))) nV37fa@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV37f8@t))))))))) (set! nV4bb7@nV30d1@or-macro nV30d1@or-macro) (set! nV30d3@and-macro (lambda (nV3806@stx) (let ((nV3808@t nV3806@stx)) (let ((nV380a@ls/false (nV30f1@syntax-dispatch nV3808@t '(_)))) (if nV380a@ls/false (apply (lambda () '#t) nV380a@ls/false) (let ((nV380c@t nV3808@t)) (let ((nV380e@ls/false (nV30f1@syntax-dispatch nV380c@t '(_ any . each-any)))) (if nV380e@ls/false (apply (lambda (nV3810@e nV3811@e*) (nV30a7@bless (let nV3818@f ((nV3814@e nV3810@e) (nV3815@e* nV3811@e*)) (if (null? nV3815@e*) (list 'begin '#f nV3814@e) (cons 'if (cons nV3814@e (cons (nV3818@f (car nV3815@e*) (cdr nV3815@e*)) '(#f)))))))) nV380e@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV380c@t))))))))) (set! nV4bb8@nV30d3@and-macro nV30d3@and-macro) (set! nV30d5@cond-macro (lambda (nV381a@stx) (let ((nV381c@t nV381a@stx)) (let ((nV381e@ls/false (nV30f1@syntax-dispatch nV381c@t '(_ any . each-any)))) (if nV381e@ls/false (apply (lambda (nV3820@cls nV3821@cls*) (nV30a7@bless (let nV3828@f ((nV3824@cls nV3820@cls) (nV3825@cls* nV3821@cls*)) (if (null? nV3825@cls*) (let ((nV382a@t nV3824@cls)) (let ((nV382c@ls/false (nV30f1@syntax-dispatch nV382a@t '(#(scheme-id else) any . each-any)))) (if nV382c@ls/false (apply (lambda (nV382e@e nV382f@e*) (cons 'begin (cons nV382e@e nV382f@e*))) nV382c@ls/false) (let ((nV3832@t nV382a@t)) (let ((nV3834@ls/false (nV30f1@syntax-dispatch nV3832@t '(any #(scheme-id =>) any)))) (if nV3834@ls/false (apply (lambda (nV3836@e nV3837@p) (list 'let (list (list 't nV3836@e)) (list 'if 't (cons nV3837@p '(t))))) nV3834@ls/false) (let ((nV383a@t nV3832@t)) (let ((nV383c@ls/false (nV30f1@syntax-dispatch nV383a@t '(any)))) (if nV383c@ls/false (apply (lambda (nV383e@e) (cons 'or (cons nV383e@e '((if #f #f))))) nV383c@ls/false) (let ((nV3840@t nV383a@t)) (let ((nV3842@ls/false (nV30f1@syntax-dispatch nV3840@t '(any . each-any)))) (if nV3842@ls/false (apply (lambda (nV3844@e nV3845@e*) (list 'if nV3844@e (cons 'begin nV3845@e*))) nV3842@ls/false) (let ((nV3848@t nV3840@t)) (let ((nV384a@ls/false (nV30f1@syntax-dispatch nV3848@t '_))) (if nV384a@ls/false (apply (lambda () (nV31d1@syntax-violation '#f '"invalid last clause" nV381a@stx)) nV384a@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3848@t)))))))))))))))) (let ((nV384c@t nV3824@cls)) (let ((nV384e@ls/false (nV30f1@syntax-dispatch nV384c@t '(#(scheme-id else) any . each-any)))) (if nV384e@ls/false (apply (lambda (nV3850@e nV3851@e*) (nV31d1@syntax-violation '#f '"incorrect position of keyword else" nV381a@stx)) nV384e@ls/false) (let ((nV3854@t nV384c@t)) (let ((nV3856@ls/false (nV30f1@syntax-dispatch nV3854@t '(any #(scheme-id =>) any)))) (if nV3856@ls/false (apply (lambda (nV3858@e nV3859@p) (list 'let (list (list 't nV3858@e)) (list 'if 't (cons nV3859@p '(t)) (nV3828@f (car nV3825@cls*) (cdr nV3825@cls*))))) nV3856@ls/false) (let ((nV385c@t nV3854@t)) (let ((nV385e@ls/false (nV30f1@syntax-dispatch nV385c@t '(any)))) (if nV385e@ls/false (apply (lambda (nV3860@e) (list 'or nV3860@e (nV3828@f (car nV3825@cls*) (cdr nV3825@cls*)))) nV385e@ls/false) (let ((nV3862@t nV385c@t)) (let ((nV3864@ls/false (nV30f1@syntax-dispatch nV3862@t '(any . each-any)))) (if nV3864@ls/false (apply (lambda (nV3866@e nV3867@e*) (list 'if nV3866@e (cons 'begin nV3867@e*) (nV3828@f (car nV3825@cls*) (cdr nV3825@cls*)))) nV3864@ls/false) (let ((nV386a@t nV3862@t)) (let ((nV386c@ls/false (nV30f1@syntax-dispatch nV386a@t '_))) (if nV386c@ls/false (apply (lambda () (nV31d1@syntax-violation '#f '"invalid last clause" nV381a@stx)) nV386c@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV386a@t)))))))))))))))))))) nV381e@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV381c@t)))))) (set! nV4bb9@nV30d5@cond-macro nV30d5@cond-macro) (set! nV30d7@do-include (lambda (nV386e@stx nV386f@id nV3870@filename) (let ((nV3874@filename (nV2efe@stx->datum nV3870@filename))) (begin (if (not (and (string? nV3874@filename) (nV2eea@id? nV386f@id))) (nV31d1@syntax-violation '#f '"invalid syntax" nV386e@stx) (void)) (cons (nV30a7@bless 'begin) (with-input-from-file nV3874@filename (lambda () (let nV3878@f ((nV3876@ls '())) (let ((nV387a@x (nV2a15@nV28e5@read-annotated))) (if (eof-object? nV387a@x) (reverse nV3876@ls) (nV3878@f (cons (nV2eca@datum->stx nV386f@id nV387a@x) nV3876@ls)))))))))))) (set! nV4bba@nV30d7@do-include nV30d7@do-include) (set! nV30d9@include-macro (lambda (nV387c@e) (let ((nV387e@t nV387c@e)) (let ((nV3880@ls/false (nV30f1@syntax-dispatch nV387e@t '(any any)))) (if nV3880@ls/false (apply (lambda (nV3882@id nV3883@filename) (nV30d7@do-include nV387c@e nV3882@id nV3883@filename)) nV3880@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV387e@t)))))) (set! nV4bbb@nV30d9@include-macro nV30d9@include-macro) (set! nV30db@include-into-macro (lambda (nV3886@e) (let ((nV3888@t nV3886@e)) (let ((nV388a@ls/false (nV30f1@syntax-dispatch nV3888@t '(_ any any)))) (if nV388a@ls/false (apply (lambda (nV388c@id nV388d@filename) (nV30d7@do-include nV3886@e nV388c@id nV388d@filename)) nV388a@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3888@t)))))) (set! nV4bbc@nV30db@include-into-macro nV30db@include-into-macro) (set! nV30dd@syntax-rules-macro (lambda (nV3890@e) (let ((nV3892@t nV3890@e)) (let ((nV3894@ls/false (nV30f1@syntax-dispatch nV3892@t '(_ each-any . #(each (any any)))))) (if nV3894@ls/false (apply (lambda (nV3896@lits nV3897@pat* nV3898@tmp*) (begin (nV30f7@verify-literals nV3896@lits nV3890@e) (nV30a7@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons nV3896@lits (map (lambda (nV389c@pat nV389d@tmp) (let ((nV38a0@t nV389c@pat)) (let ((nV38a2@ls/false (nV30f1@syntax-dispatch nV38a0@t '(_ . any)))) (if nV38a2@ls/false (apply (lambda (nV38a4@rest) (list (cons 'g nV38a4@rest) (list 'syntax nV389d@tmp))) nV38a2@ls/false) (let ((nV38a6@t nV38a0@t)) (let ((nV38a8@ls/false (nV30f1@syntax-dispatch nV38a6@t '_))) (if nV38a8@ls/false (apply (lambda () (nV31d1@syntax-violation '#f '"invalid syntax-rules pattern" nV3890@e nV389c@pat)) nV38a8@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV38a6@t)))))))) nV3897@pat* nV3898@tmp*)))))))) nV3894@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3892@t)))))) (set! nV4bbd@nV30dd@syntax-rules-macro nV30dd@syntax-rules-macro) (set! nV30df@quasiquote-macro (let ((nV38ab@datum '#f) (nV38c7@quasicons* '#f) (nV38c9@quasicons '#f) (nV38cb@quasiappend '#f) (nV38cd@quasivector '#f) (nV38cf@vquasi '#f) (nV38d1@quasi '#f)) (begin (set! nV38ab@datum (lambda (nV39ac@x) (list (nV3079@scheme-stx 'quote) (nV2ed2@mkstx nV39ac@x '() '() '())))) (set! nV38c7@quasicons* (lambda (nV39a4@x nV39a5@y) (let nV39aa@f ((nV39a8@x nV39a4@x)) (if (null? nV39a8@x) nV39a5@y (nV38c9@quasicons (car nV39a8@x) (nV39aa@f (cdr nV39a8@x))))))) (set! nV38c9@quasicons (lambda (nV397e@x nV397f@y) (let ((nV3982@t nV397f@y)) (let ((nV3984@ls/false (nV30f1@syntax-dispatch nV3982@t '(#(scheme-id quote) any)))) (if nV3984@ls/false (apply (lambda (nV3986@dy) (let ((nV3988@t nV397e@x)) (let ((nV398a@ls/false (nV30f1@syntax-dispatch nV3988@t '(#(scheme-id quote) any)))) (if nV398a@ls/false (apply (lambda (nV398c@dx) (list (nV3079@scheme-stx 'quote) (cons nV398c@dx nV3986@dy))) nV398a@ls/false) (let ((nV398e@t nV3988@t)) (let ((nV3990@ls/false (nV30f1@syntax-dispatch nV398e@t '_))) (if nV3990@ls/false (apply (lambda () (let ((nV3992@t nV3986@dy)) (let ((nV3994@ls/false (nV30f1@syntax-dispatch nV3992@t '()))) (if nV3994@ls/false (apply (lambda () (list (nV3079@scheme-stx 'list) nV397e@x)) nV3994@ls/false) (let ((nV3996@t nV3992@t)) (let ((nV3998@ls/false (nV30f1@syntax-dispatch nV3996@t '_))) (if nV3998@ls/false (apply (lambda () (list (nV3079@scheme-stx 'cons) nV397e@x nV397f@y)) nV3998@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3996@t)))))))) nV3990@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV398e@t)))))))) nV3984@ls/false) (let ((nV399a@t nV3982@t)) (let ((nV399c@ls/false (nV30f1@syntax-dispatch nV399a@t '(#(scheme-id list) . each-any)))) (if nV399c@ls/false (apply (lambda (nV399e@stuff) (cons* (nV3079@scheme-stx 'list) nV397e@x nV399e@stuff)) nV399c@ls/false) (let ((nV39a0@t nV399a@t)) (let ((nV39a2@ls/false (nV30f1@syntax-dispatch nV39a0@t '_))) (if nV39a2@ls/false (apply (lambda () (list (nV3079@scheme-stx 'cons) nV397e@x nV397f@y)) nV39a2@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV39a0@t)))))))))))) (set! nV38cb@quasiappend (lambda (nV3964@x nV3965@y) (let ((nV3968@ls (let nV396c@f ((nV396a@x nV3964@x)) (if (null? nV396a@x) (let ((nV396e@t nV3965@y)) (let ((nV3970@ls/false (nV30f1@syntax-dispatch nV396e@t '(#(scheme-id quote) ())))) (if nV3970@ls/false (apply (lambda () '()) nV3970@ls/false) (let ((nV3972@t nV396e@t)) (let ((nV3974@ls/false (nV30f1@syntax-dispatch nV3972@t '_))) (if nV3974@ls/false (apply (lambda () (list nV3965@y)) nV3974@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3972@t))))))) (let ((nV3976@t (car nV396a@x))) (let ((nV3978@ls/false (nV30f1@syntax-dispatch nV3976@t '(#(scheme-id quote) ())))) (if nV3978@ls/false (apply (lambda () (nV396c@f (cdr nV396a@x))) nV3978@ls/false) (let ((nV397a@t nV3976@t)) (let ((nV397c@ls/false (nV30f1@syntax-dispatch nV397a@t '_))) (if nV397c@ls/false (apply (lambda () (cons (car nV396a@x) (nV396c@f (cdr nV396a@x)))) nV397c@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV397a@t))))))))))) (if (null? nV3968@ls) (list (nV3079@scheme-stx 'quote) '()) (if (null? (cdr nV3968@ls)) (car nV3968@ls) (cons* (nV3079@scheme-stx 'append) nV3968@ls)))))) (set! nV38cd@quasivector (lambda (nV3932@x) (let ((nV3934@pat-x nV3932@x)) (let ((nV3936@t nV3934@pat-x)) (let ((nV3938@ls/false (nV30f1@syntax-dispatch nV3936@t '(#(scheme-id quote) each-any)))) (if nV3938@ls/false (apply (lambda (nV393a@x*) (list (nV3079@scheme-stx 'quote) (list->vector nV393a@x*))) nV3938@ls/false) (let ((nV393c@t nV3936@t)) (let ((nV393e@ls/false (nV30f1@syntax-dispatch nV393c@t '_))) (if nV393e@ls/false (apply (lambda () (let nV3946@f ((nV3940@x nV3932@x) (nV3941@k (lambda (nV3944@ls) (cons* (nV3079@scheme-stx 'vector) nV3944@ls)))) (let ((nV3948@t nV3940@x)) (let ((nV394a@ls/false (nV30f1@syntax-dispatch nV3948@t '(#(scheme-id quote) each-any)))) (if nV394a@ls/false (apply (lambda (nV394c@x*) (nV3941@k (map (lambda (nV394e@x) (list (nV3079@scheme-stx 'quote) nV394e@x)) nV394c@x*))) nV394a@ls/false) (let ((nV3950@t nV3948@t)) (let ((nV3952@ls/false (nV30f1@syntax-dispatch nV3950@t '(#(scheme-id list) . each-any)))) (if nV3952@ls/false (apply (lambda (nV3954@x*) (nV3941@k nV3954@x*)) nV3952@ls/false) (let ((nV3956@t nV3950@t)) (let ((nV3958@ls/false (nV30f1@syntax-dispatch nV3956@t '(#(scheme-id cons) any any)))) (if nV3958@ls/false (apply (lambda (nV395a@x nV395b@y) (nV3946@f nV395b@y (lambda (nV395e@ls) (nV3941@k (cons nV395a@x nV395e@ls))))) nV3958@ls/false) (let ((nV3960@t nV3956@t)) (let ((nV3962@ls/false (nV30f1@syntax-dispatch nV3960@t '_))) (if nV3962@ls/false (apply (lambda () (list (nV3079@scheme-stx 'list->vector) nV3934@pat-x)) nV3962@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3960@t))))))))))))))) nV393e@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV393c@t)))))))))) (set! nV38cf@vquasi (lambda (nV3910@p nV3911@lev) (let ((nV3914@t nV3910@p)) (let ((nV3916@ls/false (nV30f1@syntax-dispatch nV3914@t '(any . any)))) (if nV3916@ls/false (apply (lambda (nV3918@p nV3919@q) (let ((nV391c@t nV3918@p)) (let ((nV391e@ls/false (nV30f1@syntax-dispatch nV391c@t '(#(scheme-id unquote) . each-any)))) (if nV391e@ls/false (apply (lambda (nV3920@p) (if (= nV3911@lev '0) (nV38c7@quasicons* nV3920@p (nV38cf@vquasi nV3919@q nV3911@lev)) (nV38c9@quasicons (nV38c9@quasicons (nV38ab@datum 'unquote) (nV38d1@quasi nV3920@p (- nV3911@lev '1))) (nV38cf@vquasi nV3919@q nV3911@lev)))) nV391e@ls/false) (let ((nV3922@t nV391c@t)) (let ((nV3924@ls/false (nV30f1@syntax-dispatch nV3922@t '(#(scheme-id unquote-splicing) . each-any)))) (if nV3924@ls/false (apply (lambda (nV3926@p) (if (= nV3911@lev '0) (nV38cb@quasiappend nV3926@p (nV38cf@vquasi nV3919@q nV3911@lev)) (nV38c9@quasicons (nV38c9@quasicons (nV38ab@datum 'unquote-splicing) (nV38d1@quasi nV3926@p (- nV3911@lev '1))) (nV38cf@vquasi nV3919@q nV3911@lev)))) nV3924@ls/false) (let ((nV3928@t nV3922@t)) (let ((nV392a@ls/false (nV30f1@syntax-dispatch nV3928@t 'any))) (if nV392a@ls/false (apply (lambda (nV392c@p) (nV38c9@quasicons (nV38d1@quasi nV392c@p nV3911@lev) (nV38cf@vquasi nV3919@q nV3911@lev))) nV392a@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3928@t))))))))))) nV3916@ls/false) (let ((nV392e@t nV3914@t)) (let ((nV3930@ls/false (nV30f1@syntax-dispatch nV392e@t '()))) (if nV3930@ls/false (apply (lambda () (list (nV3079@scheme-stx 'quote) '())) nV3930@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV392e@t))))))))) (set! nV38d1@quasi (lambda (nV38da@p nV38db@lev) (let ((nV38de@t nV38da@p)) (let ((nV38e0@ls/false (nV30f1@syntax-dispatch nV38de@t '(#(scheme-id unquote) any)))) (if nV38e0@ls/false (apply (lambda (nV38e2@p) (if (= nV38db@lev '0) nV38e2@p (nV38c9@quasicons (nV38ab@datum 'unquote) (nV38d1@quasi (list nV38e2@p) (- nV38db@lev '1))))) nV38e0@ls/false) (let ((nV38e4@t nV38de@t)) (let ((nV38e6@ls/false (nV30f1@syntax-dispatch nV38e4@t '((#(scheme-id unquote) . each-any) . any)))) (if nV38e6@ls/false (apply (lambda (nV38e8@p nV38e9@q) (if (= nV38db@lev '0) (nV38c7@quasicons* nV38e8@p (nV38d1@quasi nV38e9@q nV38db@lev)) (nV38c9@quasicons (nV38c9@quasicons (nV38ab@datum 'unquote) (nV38d1@quasi nV38e8@p (- nV38db@lev '1))) (nV38d1@quasi nV38e9@q nV38db@lev)))) nV38e6@ls/false) (let ((nV38ec@t nV38e4@t)) (let ((nV38ee@ls/false (nV30f1@syntax-dispatch nV38ec@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if nV38ee@ls/false (apply (lambda (nV38f0@p nV38f1@q) (if (= nV38db@lev '0) (nV38cb@quasiappend nV38f0@p (nV38d1@quasi nV38f1@q nV38db@lev)) (nV38c9@quasicons (nV38c9@quasicons (nV38ab@datum 'unquote-splicing) (nV38d1@quasi nV38f0@p (- nV38db@lev '1))) (nV38d1@quasi nV38f1@q nV38db@lev)))) nV38ee@ls/false) (let ((nV38f4@t nV38ec@t)) (let ((nV38f6@ls/false (nV30f1@syntax-dispatch nV38f4@t '(#(scheme-id quasiquote) any)))) (if nV38f6@ls/false (apply (lambda (nV38f8@p) (nV38c9@quasicons (nV38ab@datum 'quasiquote) (nV38d1@quasi (list nV38f8@p) (+ nV38db@lev '1)))) nV38f6@ls/false) (let ((nV38fa@t nV38f4@t)) (let ((nV38fc@ls/false (nV30f1@syntax-dispatch nV38fa@t '(any . any)))) (if nV38fc@ls/false (apply (lambda (nV38fe@p nV38ff@q) (nV38c9@quasicons (nV38d1@quasi nV38fe@p nV38db@lev) (nV38d1@quasi nV38ff@q nV38db@lev))) nV38fc@ls/false) (let ((nV3902@t nV38fa@t)) (let ((nV3904@ls/false (nV30f1@syntax-dispatch nV3902@t '#(vector each-any)))) (if (and nV3904@ls/false (apply (lambda (nV3906@x) (not (nV2eb6@stx? nV3906@x))) nV3904@ls/false)) (apply (lambda (nV3908@x) (nV38cd@quasivector (nV38cf@vquasi nV3908@x nV38db@lev))) nV3904@ls/false) (let ((nV390a@t nV3902@t)) (let ((nV390c@ls/false (nV30f1@syntax-dispatch nV390a@t 'any))) (if nV390c@ls/false (apply (lambda (nV390e@p) (list (nV3079@scheme-stx 'quote) nV390e@p)) nV390c@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV390a@t)))))))))))))))))))))))) (lambda (nV38d2@x) (let ((nV38d4@t nV38d2@x)) (let ((nV38d6@ls/false (nV30f1@syntax-dispatch nV38d4@t '(_ any)))) (if nV38d6@ls/false (apply (lambda (nV38d8@e) (nV38d1@quasi nV38d8@e '0)) nV38d6@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV38d4@t)))))))) (set! nV4bbe@nV30df@quasiquote-macro nV30df@quasiquote-macro) (set! nV30e1@quasisyntax-macro (let ((nV39af@quasi '#f)) (begin (set! nV39af@quasi (lambda (nV39ca@p nV39cb@lev) (let ((nV39ce@t nV39ca@p)) (let ((nV39d0@ls/false (nV30f1@syntax-dispatch nV39ce@t '(#(scheme-id unsyntax) any)))) (if nV39d0@ls/false (apply (lambda (nV39d2@p) (if (= nV39cb@lev '0) (let ((nV39d4@g (gensym))) (values (list nV39d4@g) (list nV39d2@p) nV39d4@g)) (call-with-values (lambda () (nV39af@quasi nV39d2@p (- nV39cb@lev '1))) (lambda (nV39dc@nV39d7 nV39dd@nV39d9 nV39de@nV39db) (let ((nV39e2@p nV39de@nV39db) (nV39e3@rhs* nV39dd@nV39d9) (nV39e4@lhs* nV39dc@nV39d7)) (values nV39e4@lhs* nV39e3@rhs* (list 'unsyntax nV39e2@p))))))) nV39d0@ls/false) (let ((nV39e8@t nV39ce@t)) (let ((nV39ea@ls/false (nV30f1@syntax-dispatch nV39e8@t '#(scheme-id unsyntax)))) (if (and nV39ea@ls/false (apply (lambda () (= nV39cb@lev '0)) nV39ea@ls/false)) (apply (lambda () (nV31d1@syntax-violation '#f '"incorrect use of unsyntax" nV39ca@p)) nV39ea@ls/false) (let ((nV39ec@t nV39e8@t)) (let ((nV39ee@ls/false (nV30f1@syntax-dispatch nV39ec@t '((#(scheme-id unsyntax) . each-any) . any)))) (if nV39ee@ls/false (apply (lambda (nV39f0@p* nV39f1@q) (call-with-values (lambda () (nV39af@quasi nV39f1@q nV39cb@lev)) (lambda (nV39fa@nV39f5 nV39fb@nV39f7 nV39fc@nV39f9) (let ((nV3a00@q nV39fc@nV39f9) (nV3a01@rhs* nV39fb@nV39f7) (nV3a02@lhs* nV39fa@nV39f5)) (if (= nV39cb@lev '0) (let ((nV3a06@g* (map (lambda (nV3a08@x) (gensym)) nV39f0@p*))) (values (append nV3a06@g* nV3a02@lhs*) (append nV39f0@p* nV3a01@rhs*) (append nV3a06@g* nV3a00@q))) (call-with-values (lambda () (nV39af@quasi nV39f0@p* (- nV39cb@lev '1))) (lambda (nV3a10@nV3a0b nV3a11@nV3a0d nV3a12@nV3a0f) (let ((nV3a16@p* nV3a12@nV3a0f) (nV3a17@rhs2* nV3a11@nV3a0d) (nV3a18@lhs2* nV3a10@nV3a0b)) (values (append nV3a18@lhs2* nV3a02@lhs*) (append nV3a17@rhs2* nV3a01@rhs*) (cons (cons 'unsyntax nV3a16@p*) nV3a00@q)))))))))) nV39ee@ls/false) (let ((nV3a1c@t nV39ec@t)) (let ((nV3a1e@ls/false (nV30f1@syntax-dispatch nV3a1c@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if nV3a1e@ls/false (apply (lambda (nV3a20@p* nV3a21@q) (call-with-values (lambda () (nV39af@quasi nV3a21@q nV39cb@lev)) (lambda (nV3a2a@nV3a25 nV3a2b@nV3a27 nV3a2c@nV3a29) (let ((nV3a30@q nV3a2c@nV3a29) (nV3a31@rhs* nV3a2b@nV3a27) (nV3a32@lhs* nV3a2a@nV3a25)) (if (= nV39cb@lev '0) (let ((nV3a36@g* (map (lambda (nV3a38@x) (gensym)) nV3a20@p*))) (values (append (map (lambda (nV3a3a@g) (cons nV3a3a@g '(...))) nV3a36@g*) nV3a32@lhs*) (append nV3a20@p* nV3a31@rhs*) (append (apply append (map (lambda (nV3a3c@g) (cons nV3a3c@g '(...))) nV3a36@g*)) nV3a30@q))) (call-with-values (lambda () (nV39af@quasi nV3a20@p* (- nV39cb@lev '1))) (lambda (nV3a44@nV3a3f nV3a45@nV3a41 nV3a46@nV3a43) (let ((nV3a4a@p* nV3a46@nV3a43) (nV3a4b@rhs2* nV3a45@nV3a41) (nV3a4c@lhs2* nV3a44@nV3a3f)) (values (append nV3a4c@lhs2* nV3a32@lhs*) (append nV3a4b@rhs2* nV3a31@rhs*) (cons (cons 'unsyntax-splicing nV3a4a@p*) nV3a30@q)))))))))) nV3a1e@ls/false) (let ((nV3a50@t nV3a1c@t)) (let ((nV3a52@ls/false (nV30f1@syntax-dispatch nV3a50@t '#(scheme-id unsyntax-splicing)))) (if (and nV3a52@ls/false (apply (lambda () (= nV39cb@lev '0)) nV3a52@ls/false)) (apply (lambda () (nV31d1@syntax-violation '#f '"incorrect use of unsyntax-splicing" nV39ca@p)) nV3a52@ls/false) (let ((nV3a54@t nV3a50@t)) (let ((nV3a56@ls/false (nV30f1@syntax-dispatch nV3a54@t '(#(scheme-id quasisyntax) any)))) (if nV3a56@ls/false (apply (lambda (nV3a58@p) (call-with-values (lambda () (nV39af@quasi nV3a58@p (+ nV39cb@lev '1))) (lambda (nV3a60@nV3a5b nV3a61@nV3a5d nV3a62@nV3a5f) (let ((nV3a66@p nV3a62@nV3a5f) (nV3a67@rhs* nV3a61@nV3a5d) (nV3a68@lhs* nV3a60@nV3a5b)) (values nV3a68@lhs* nV3a67@rhs* (list 'quasisyntax nV3a66@p)))))) nV3a56@ls/false) (let ((nV3a6c@t nV3a54@t)) (let ((nV3a6e@ls/false (nV30f1@syntax-dispatch nV3a6c@t '(any . any)))) (if nV3a6e@ls/false (apply (lambda (nV3a70@p nV3a71@q) (call-with-values (lambda () (nV39af@quasi nV3a70@p nV39cb@lev)) (lambda (nV3a80@nV3a75 nV3a81@nV3a77 nV3a82@nV3a79) (call-with-values (lambda () (nV39af@quasi nV3a71@q nV39cb@lev)) (lambda (nV3a86@nV3a7b nV3a87@nV3a7d nV3a88@nV3a7f) (let ((nV3a8c@q nV3a88@nV3a7f) (nV3a8d@rhs2* nV3a87@nV3a7d) (nV3a8e@lhs2* nV3a86@nV3a7b) (nV3a8f@p nV3a82@nV3a79) (nV3a90@rhs* nV3a81@nV3a77) (nV3a91@lhs* nV3a80@nV3a75)) (values (append nV3a8e@lhs2* nV3a91@lhs*) (append nV3a8d@rhs2* nV3a90@rhs*) (cons nV3a8f@p nV3a8c@q)))))))) nV3a6e@ls/false) (let ((nV3a98@t nV3a6c@t)) (let ((nV3a9a@ls/false (nV30f1@syntax-dispatch nV3a98@t '#(vector each-any)))) (if nV3a9a@ls/false (apply (lambda (nV3a9c@x*) (call-with-values (lambda () (nV39af@quasi nV3a9c@x* nV39cb@lev)) (lambda (nV3aa4@nV3a9f nV3aa5@nV3aa1 nV3aa6@nV3aa3) (let ((nV3aaa@x* nV3aa6@nV3aa3) (nV3aab@rhs* nV3aa5@nV3aa1) (nV3aac@lhs* nV3aa4@nV3a9f)) (values nV3aac@lhs* nV3aab@rhs* (list->vector nV3aaa@x*)))))) nV3a9a@ls/false) (let ((nV3ab0@t nV3a98@t)) (let ((nV3ab2@ls/false (nV30f1@syntax-dispatch nV3ab0@t '_))) (if nV3ab2@ls/false (apply (lambda () (values '() '() nV39ca@p)) nV3ab2@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3ab0@t)))))))))))))))))))))))))))))) (lambda (nV39b0@x) (let ((nV39b2@t nV39b0@x)) (let ((nV39b4@ls/false (nV30f1@syntax-dispatch nV39b2@t '(_ any)))) (if nV39b4@ls/false (apply (lambda (nV39b6@e) (call-with-values (lambda () (nV39af@quasi nV39b6@e '0)) (lambda (nV39be@nV39b9 nV39bf@nV39bb nV39c0@nV39bd) (let ((nV39c4@v nV39c0@nV39bd) (nV39c5@rhs* nV39bf@nV39bb) (nV39c6@lhs* nV39be@nV39b9)) (nV30a7@bless (list 'syntax-case (cons 'list nV39c5@rhs*) '() (list nV39c6@lhs* (list 'syntax nV39c4@v)))))))) nV39b4@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV39b2@t)))))))) (set! nV4bbf@nV30e1@quasisyntax-macro nV30e1@quasisyntax-macro) (set! nV30e3@define-struct-macro (lambda (nV3ab4@stx) (nV31d1@syntax-violation '#f '"define-struct not supported" nV3ab4@stx))) (set! nV4bc0@nV30e3@define-struct-macro nV30e3@define-struct-macro) (set! nV30e5@define-record-type-macro (lambda (nV3ab6@x) (let ((nV3ab9@id '#f) (nV3abb@get-record-name '#f) (nV3abd@get-record-constructor-name '#f) (nV3abf@get-record-predicate-name '#f) (nV3ac1@get-clause '#f) (nV3ac3@foo-rtd-code '#f) (nV3ac5@parent-rtd-code '#f) (nV3ac7@parent-rcd-code '#f) (nV3ac9@foo-rcd-code '#f) (nV3acb@get-protocol-code '#f) (nV3acd@get-fields '#f) (nV3acf@get-mutator-indices '#f) (nV3ad1@get-mutators '#f) (nV3ad3@get-accessors '#f) (nV3ad5@enumerate '#f) (nV3ad7@do-define-record '#f) (nV3ad9@verify-clauses '#f)) (begin (set! nV3ab9@id (lambda (nV3cac@ctxt . nV3cae@str*) (nV31d5@datum->syntax nV3cac@ctxt (string->symbol (apply string-append (map (lambda (nV3cb0@x) (if (symbol? nV3cb0@x) (symbol->string nV3cb0@x) (if (string? nV3cb0@x) nV3cb0@x (assertion-violation 'define-record-type '"BUG")))) nV3cae@str*)))))) (set! nV3abb@get-record-name (lambda (nV3c9a@spec) (let ((nV3c9c@t nV3c9a@spec)) (let ((nV3c9e@ls/false (nV30f1@syntax-dispatch nV3c9c@t '(any any any)))) (if nV3c9e@ls/false (apply (lambda (nV3ca0@foo nV3ca1@make-foo nV3ca2@foo?) nV3ca0@foo) nV3c9e@ls/false) (let ((nV3ca6@t nV3c9c@t)) (let ((nV3ca8@ls/false (nV30f1@syntax-dispatch nV3ca6@t 'any))) (if nV3ca8@ls/false (apply (lambda (nV3caa@foo) nV3caa@foo) nV3ca8@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3ca6@t))))))))) (set! nV3abd@get-record-constructor-name (lambda (nV3c86@spec) (let ((nV3c88@t nV3c86@spec)) (let ((nV3c8a@ls/false (nV30f1@syntax-dispatch nV3c88@t '(any any any)))) (if nV3c8a@ls/false (apply (lambda (nV3c8c@foo nV3c8d@make-foo nV3c8e@foo?) nV3c8d@make-foo) nV3c8a@ls/false) (let ((nV3c92@t nV3c88@t)) (let ((nV3c94@ls/false (nV30f1@syntax-dispatch nV3c92@t 'any))) (if (and nV3c94@ls/false (apply (lambda (nV3c96@foo) (nV2eea@id? nV3c96@foo)) nV3c94@ls/false)) (apply (lambda (nV3c98@foo) (nV3ab9@id nV3c98@foo '"make-" (nV2efe@stx->datum nV3c98@foo))) nV3c94@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3c92@t))))))))) (set! nV3abf@get-record-predicate-name (lambda (nV3c72@spec) (let ((nV3c74@t nV3c72@spec)) (let ((nV3c76@ls/false (nV30f1@syntax-dispatch nV3c74@t '(any any any)))) (if nV3c76@ls/false (apply (lambda (nV3c78@foo nV3c79@make-foo nV3c7a@foo?) nV3c7a@foo?) nV3c76@ls/false) (let ((nV3c7e@t nV3c74@t)) (let ((nV3c80@ls/false (nV30f1@syntax-dispatch nV3c7e@t 'any))) (if (and nV3c80@ls/false (apply (lambda (nV3c82@foo) (nV2eea@id? nV3c82@foo)) nV3c80@ls/false)) (apply (lambda (nV3c84@foo) (nV3ab9@id nV3c84@foo (nV2efe@stx->datum nV3c84@foo) '"?")) nV3c80@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3c7e@t))))))))) (set! nV3ac1@get-clause (lambda (nV3c60@id nV3c61@ls) (let ((nV3c64@t nV3c61@ls)) (let ((nV3c66@ls/false (nV30f1@syntax-dispatch nV3c64@t '()))) (if nV3c66@ls/false (apply (lambda () '#f) nV3c66@ls/false) (let ((nV3c68@t nV3c64@t)) (let ((nV3c6a@ls/false (nV30f1@syntax-dispatch nV3c68@t '((any . any) . any)))) (if nV3c6a@ls/false (apply (lambda (nV3c6c@x nV3c6d@rest nV3c6e@ls) (if (nV2ef0@free-id=? (nV30a7@bless nV3c60@id) nV3c6c@x) (cons nV3c6c@x nV3c6d@rest) (nV3ac1@get-clause nV3c60@id nV3c6e@ls))) nV3c6a@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3c68@t))))))))) (set! nV3ac3@foo-rtd-code (lambda (nV3c0e@name nV3c0f@clause* nV3c10@parent-rtd-code) (let ((nV3c15@convert-field-spec* '#f)) (begin (set! nV3c15@convert-field-spec* (lambda (nV3c46@ls) (list->vector (map (lambda (nV3c48@x) (let ((nV3c4a@t nV3c48@x)) (let ((nV3c4c@ls/false (nV30f1@syntax-dispatch nV3c4a@t '(#(scheme-id mutable) any . any)))) (if nV3c4c@ls/false (apply (lambda (nV3c4e@name nV3c4f@rest) (list 'mutable nV3c4e@name)) nV3c4c@ls/false) (let ((nV3c52@t nV3c4a@t)) (let ((nV3c54@ls/false (nV30f1@syntax-dispatch nV3c52@t '(#(scheme-id immutable) any . any)))) (if nV3c54@ls/false (apply (lambda (nV3c56@name nV3c57@rest) (list 'immutable nV3c56@name)) nV3c54@ls/false) (let ((nV3c5a@t nV3c52@t)) (let ((nV3c5c@ls/false (nV30f1@syntax-dispatch nV3c5a@t 'any))) (if nV3c5c@ls/false (apply (lambda (nV3c5e@name) (list 'immutable nV3c5e@name)) nV3c5c@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3c5a@t))))))))))) nV3c46@ls)))) (let ((nV3c16@uid-code (let ((nV3c1e@t (nV3ac1@get-clause 'nongenerative nV3c0f@clause*))) (let ((nV3c20@ls/false (nV30f1@syntax-dispatch nV3c1e@t '(_)))) (if nV3c20@ls/false (apply (lambda () (list 'quote (gensym))) nV3c20@ls/false) (let ((nV3c22@t nV3c1e@t)) (let ((nV3c24@ls/false (nV30f1@syntax-dispatch nV3c22@t '(_ any)))) (if nV3c24@ls/false (apply (lambda (nV3c26@uid) (list 'quote nV3c26@uid)) nV3c24@ls/false) (let ((nV3c28@t nV3c22@t)) (let ((nV3c2a@ls/false (nV30f1@syntax-dispatch nV3c28@t '_))) (if nV3c2a@ls/false (apply (lambda () '#f) nV3c2a@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3c28@t))))))))))) (nV3c17@sealed? (let ((nV3c2c@t (nV3ac1@get-clause 'sealed nV3c0f@clause*))) (let ((nV3c2e@ls/false (nV30f1@syntax-dispatch nV3c2c@t '(_ #(atom #t))))) (if nV3c2e@ls/false (apply (lambda () '#t) nV3c2e@ls/false) (let ((nV3c30@t nV3c2c@t)) (let ((nV3c32@ls/false (nV30f1@syntax-dispatch nV3c30@t '_))) (if nV3c32@ls/false (apply (lambda () '#f) nV3c32@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3c30@t)))))))) (nV3c18@opaque? (let ((nV3c34@t (nV3ac1@get-clause 'opaque nV3c0f@clause*))) (let ((nV3c36@ls/false (nV30f1@syntax-dispatch nV3c34@t '(_ #(atom #t))))) (if nV3c36@ls/false (apply (lambda () '#t) nV3c36@ls/false) (let ((nV3c38@t nV3c34@t)) (let ((nV3c3a@ls/false (nV30f1@syntax-dispatch nV3c38@t '_))) (if nV3c3a@ls/false (apply (lambda () '#f) nV3c3a@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3c38@t)))))))) (nV3c19@fields (let ((nV3c3c@t (nV3ac1@get-clause 'fields nV3c0f@clause*))) (let ((nV3c3e@ls/false (nV30f1@syntax-dispatch nV3c3c@t '(_ . each-any)))) (if nV3c3e@ls/false (apply (lambda (nV3c40@field-spec*) (list 'quote (nV3c15@convert-field-spec* nV3c40@field-spec*))) nV3c3e@ls/false) (let ((nV3c42@t nV3c3c@t)) (let ((nV3c44@ls/false (nV30f1@syntax-dispatch nV3c42@t '_))) (if nV3c44@ls/false (apply (lambda () ''#()) nV3c44@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3c42@t))))))))) (nV30a7@bless (list 'make-record-type-descriptor (list 'quote nV3c0e@name) nV3c10@parent-rtd-code nV3c16@uid-code nV3c17@sealed? nV3c18@opaque? nV3c19@fields))))))) (set! nV3ac5@parent-rtd-code (lambda (nV3bf6@clause*) (let ((nV3bf8@t (nV3ac1@get-clause 'parent nV3bf6@clause*))) (let ((nV3bfa@ls/false (nV30f1@syntax-dispatch nV3bf8@t '(_ any)))) (if nV3bfa@ls/false (apply (lambda (nV3bfc@name) (list 'record-type-descriptor nV3bfc@name)) nV3bfa@ls/false) (let ((nV3bfe@t nV3bf8@t)) (let ((nV3c00@ls/false (nV30f1@syntax-dispatch nV3bfe@t '#(atom #f)))) (if nV3c00@ls/false (apply (lambda () (let ((nV3c02@t (nV3ac1@get-clause 'parent-rtd nV3bf6@clause*))) (let ((nV3c04@ls/false (nV30f1@syntax-dispatch nV3c02@t '(_ any any)))) (if nV3c04@ls/false (apply (lambda (nV3c06@rtd nV3c07@rcd) nV3c06@rtd) nV3c04@ls/false) (let ((nV3c0a@t nV3c02@t)) (let ((nV3c0c@ls/false (nV30f1@syntax-dispatch nV3c0a@t '#(atom #f)))) (if nV3c0c@ls/false (apply (lambda () '#f) nV3c0c@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3c0a@t)))))))) nV3c00@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3bfe@t))))))))) (set! nV3ac7@parent-rcd-code (lambda (nV3bde@clause*) (let ((nV3be0@t (nV3ac1@get-clause 'parent nV3bde@clause*))) (let ((nV3be2@ls/false (nV30f1@syntax-dispatch nV3be0@t '(_ any)))) (if nV3be2@ls/false (apply (lambda (nV3be4@name) (list 'record-constructor-descriptor nV3be4@name)) nV3be2@ls/false) (let ((nV3be6@t nV3be0@t)) (let ((nV3be8@ls/false (nV30f1@syntax-dispatch nV3be6@t '#(atom #f)))) (if nV3be8@ls/false (apply (lambda () (let ((nV3bea@t (nV3ac1@get-clause 'parent-rtd nV3bde@clause*))) (let ((nV3bec@ls/false (nV30f1@syntax-dispatch nV3bea@t '(_ any any)))) (if nV3bec@ls/false (apply (lambda (nV3bee@rtd nV3bef@rcd) nV3bef@rcd) nV3bec@ls/false) (let ((nV3bf2@t nV3bea@t)) (let ((nV3bf4@ls/false (nV30f1@syntax-dispatch nV3bf2@t '#(atom #f)))) (if nV3bf4@ls/false (apply (lambda () '#f) nV3bf4@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3bf2@t)))))))) nV3be8@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3be6@t))))))))) (set! nV3ac9@foo-rcd-code (lambda (nV3bd6@clause* nV3bd7@foo-rtd nV3bd8@protocol nV3bd9@parent-rcd-code) (list 'make-record-constructor-descriptor nV3bd7@foo-rtd nV3bd9@parent-rcd-code nV3bd8@protocol))) (set! nV3acb@get-protocol-code (lambda (nV3bca@clause*) (let ((nV3bcc@t (nV3ac1@get-clause 'protocol nV3bca@clause*))) (let ((nV3bce@ls/false (nV30f1@syntax-dispatch nV3bcc@t '(_ any)))) (if nV3bce@ls/false (apply (lambda (nV3bd0@expr) nV3bd0@expr) nV3bce@ls/false) (let ((nV3bd2@t nV3bcc@t)) (let ((nV3bd4@ls/false (nV30f1@syntax-dispatch nV3bd2@t '_))) (if nV3bd4@ls/false (apply (lambda () '#f) nV3bd4@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3bd2@t))))))))) (set! nV3acd@get-fields (lambda (nV3bb8@clause*) (let ((nV3bba@t nV3bb8@clause*)) (let ((nV3bbc@ls/false (nV30f1@syntax-dispatch nV3bba@t '()))) (if nV3bbc@ls/false (apply (lambda () '()) nV3bbc@ls/false) (let ((nV3bbe@t nV3bba@t)) (let ((nV3bc0@ls/false (nV30f1@syntax-dispatch nV3bbe@t '((#(scheme-id fields) . each-any) . _)))) (if nV3bc0@ls/false (apply (lambda (nV3bc2@f*) nV3bc2@f*) nV3bc0@ls/false) (let ((nV3bc4@t nV3bbe@t)) (let ((nV3bc6@ls/false (nV30f1@syntax-dispatch nV3bc4@t '(_ . any)))) (if nV3bc6@ls/false (apply (lambda (nV3bc8@rest) (nV3acd@get-fields nV3bc8@rest)) nV3bc6@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3bc4@t)))))))))))) (set! nV3acf@get-mutator-indices (lambda (nV3ba0@fields) (let nV3ba6@f ((nV3ba2@fields nV3ba0@fields) (nV3ba3@i '0)) (let ((nV3ba8@t nV3ba2@fields)) (let ((nV3baa@ls/false (nV30f1@syntax-dispatch nV3ba8@t '()))) (if nV3baa@ls/false (apply (lambda () '()) nV3baa@ls/false) (let ((nV3bac@t nV3ba8@t)) (let ((nV3bae@ls/false (nV30f1@syntax-dispatch nV3bac@t '((#(scheme-id mutable) . _) . any)))) (if nV3bae@ls/false (apply (lambda (nV3bb0@rest) (cons nV3ba3@i (nV3ba6@f nV3bb0@rest (+ nV3ba3@i '1)))) nV3bae@ls/false) (let ((nV3bb2@t nV3bac@t)) (let ((nV3bb4@ls/false (nV30f1@syntax-dispatch nV3bb2@t '(_ . any)))) (if nV3bb4@ls/false (apply (lambda (nV3bb6@rest) (nV3ba6@f nV3bb6@rest (+ nV3ba3@i '1))) nV3bb4@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3bb2@t))))))))))))) (set! nV3ad1@get-mutators (lambda (nV3b76@foo nV3b77@fields) (let ((nV3b7b@gen-name '#f)) (begin (set! nV3b7b@gen-name (lambda (nV3b9e@x) (nV31d5@datum->syntax nV3b76@foo (string->symbol (string-append (symbol->string (nV31d7@syntax->datum nV3b76@foo)) '"-" (symbol->string (nV31d7@syntax->datum nV3b9e@x)) '"-set!"))))) (let nV3b7e@f ((nV3b7c@fields nV3b77@fields)) (let ((nV3b80@t nV3b7c@fields)) (let ((nV3b82@ls/false (nV30f1@syntax-dispatch nV3b80@t '()))) (if nV3b82@ls/false (apply (lambda () '()) nV3b82@ls/false) (let ((nV3b84@t nV3b80@t)) (let ((nV3b86@ls/false (nV30f1@syntax-dispatch nV3b84@t '((#(scheme-id mutable) any any any) . any)))) (if nV3b86@ls/false (apply (lambda (nV3b88@name nV3b89@accessor nV3b8a@mutator nV3b8b@rest) (cons nV3b8a@mutator (nV3b7e@f nV3b8b@rest))) nV3b86@ls/false) (let ((nV3b90@t nV3b84@t)) (let ((nV3b92@ls/false (nV30f1@syntax-dispatch nV3b90@t '((#(scheme-id mutable) any) . any)))) (if nV3b92@ls/false (apply (lambda (nV3b94@name nV3b95@rest) (cons (nV3b7b@gen-name nV3b94@name) (nV3b7e@f nV3b95@rest))) nV3b92@ls/false) (let ((nV3b98@t nV3b90@t)) (let ((nV3b9a@ls/false (nV30f1@syntax-dispatch nV3b98@t '(_ . any)))) (if nV3b9a@ls/false (apply (lambda (nV3b9c@rest) (nV3b7e@f nV3b9c@rest)) nV3b9a@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3b98@t)))))))))))))))))) (set! nV3ad3@get-accessors (lambda (nV3b32@foo nV3b33@fields) (let ((nV3b37@gen-name '#f)) (begin (set! nV3b37@gen-name (lambda (nV3b74@x) (nV31d5@datum->syntax nV3b32@foo (string->symbol (string-append (symbol->string (nV31d7@syntax->datum nV3b32@foo)) '"-" (symbol->string (nV31d7@syntax->datum nV3b74@x))))))) (map (lambda (nV3b38@field) (let ((nV3b3a@t nV3b38@field)) (let ((nV3b3c@ls/false (nV30f1@syntax-dispatch nV3b3a@t '(#(scheme-id mutable) any any any)))) (if (and nV3b3c@ls/false (apply (lambda (nV3b3e@name nV3b3f@accessor nV3b40@mutator) (nV2eea@id? nV3b3f@accessor)) nV3b3c@ls/false)) (apply (lambda (nV3b44@name nV3b45@accessor nV3b46@mutator) nV3b45@accessor) nV3b3c@ls/false) (let ((nV3b4a@t nV3b3a@t)) (let ((nV3b4c@ls/false (nV30f1@syntax-dispatch nV3b4a@t '(#(scheme-id immutable) any any)))) (if (and nV3b4c@ls/false (apply (lambda (nV3b4e@name nV3b4f@accessor) (nV2eea@id? nV3b4f@accessor)) nV3b4c@ls/false)) (apply (lambda (nV3b52@name nV3b53@accessor) nV3b53@accessor) nV3b4c@ls/false) (let ((nV3b56@t nV3b4a@t)) (let ((nV3b58@ls/false (nV30f1@syntax-dispatch nV3b56@t '(#(scheme-id mutable) any)))) (if (and nV3b58@ls/false (apply (lambda (nV3b5a@name) (nV2eea@id? nV3b5a@name)) nV3b58@ls/false)) (apply (lambda (nV3b5c@name) (nV3b37@gen-name nV3b5c@name)) nV3b58@ls/false) (let ((nV3b5e@t nV3b56@t)) (let ((nV3b60@ls/false (nV30f1@syntax-dispatch nV3b5e@t '(#(scheme-id immutable) any)))) (if (and nV3b60@ls/false (apply (lambda (nV3b62@name) (nV2eea@id? nV3b62@name)) nV3b60@ls/false)) (apply (lambda (nV3b64@name) (nV3b37@gen-name nV3b64@name)) nV3b60@ls/false) (let ((nV3b66@t nV3b5e@t)) (let ((nV3b68@ls/false (nV30f1@syntax-dispatch nV3b66@t 'any))) (if (and nV3b68@ls/false (apply (lambda (nV3b6a@name) (nV2eea@id? nV3b6a@name)) nV3b68@ls/false)) (apply (lambda (nV3b6c@name) (nV3b37@gen-name nV3b6c@name)) nV3b68@ls/false) (let ((nV3b6e@t nV3b66@t)) (let ((nV3b70@ls/false (nV30f1@syntax-dispatch nV3b6e@t 'any))) (if nV3b70@ls/false (apply (lambda (nV3b72@others) (nV31d1@syntax-violation '#f '"invalid field spec" nV3b38@field)) nV3b70@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3b6e@t)))))))))))))))))))) nV3b33@fields))))) (set! nV3ad5@enumerate (lambda (nV3b2a@ls) (let nV3b30@f ((nV3b2c@ls nV3b2a@ls) (nV3b2d@i '0)) (if (null? nV3b2c@ls) '() (cons nV3b2d@i (nV3b30@f (cdr nV3b2c@ls) (+ nV3b2d@i '1))))))) (set! nV3ad7@do-define-record (lambda (nV3b02@namespec nV3b03@clause*) (let ((nV3b06@foo (nV3abb@get-record-name nV3b02@namespec))) (let ((nV3b08@foo-rtd (gensym))) (let ((nV3b0a@foo-rcd (gensym))) (let ((nV3b0c@protocol (gensym))) (let ((nV3b0e@make-foo (nV3abd@get-record-constructor-name nV3b02@namespec))) (let ((nV3b10@fields (nV3acd@get-fields nV3b03@clause*))) (let ((nV3b12@idx* (nV3ad5@enumerate nV3b10@fields))) (let ((nV3b14@foo-x* (nV3ad3@get-accessors nV3b06@foo nV3b10@fields))) (let ((nV3b16@set-foo-x!* (nV3ad1@get-mutators nV3b06@foo nV3b10@fields))) (let ((nV3b18@set-foo-idx* (nV3acf@get-mutator-indices nV3b10@fields))) (let ((nV3b1a@foo? (nV3abf@get-record-predicate-name nV3b02@namespec))) (let ((nV3b1c@foo-rtd-code (nV3ac3@foo-rtd-code nV3b06@foo nV3b03@clause* (nV3ac5@parent-rtd-code nV3b03@clause*)))) (let ((nV3b1e@foo-rcd-code (nV3ac9@foo-rcd-code nV3b03@clause* nV3b08@foo-rtd nV3b0c@protocol (nV3ac7@parent-rcd-code nV3b03@clause*)))) (let ((nV3b20@protocol-code (nV3acb@get-protocol-code nV3b03@clause*))) (nV30a7@bless (cons 'begin (cons (list 'define nV3b08@foo-rtd nV3b1c@foo-rtd-code) (cons (list 'define nV3b0c@protocol nV3b20@protocol-code) (cons (list 'define nV3b0a@foo-rcd nV3b1e@foo-rcd-code) (cons (list 'define-syntax nV3b06@foo (list 'list ''$rtd (list 'syntax nV3b08@foo-rtd) (list 'syntax nV3b0a@foo-rcd))) (cons (list 'define nV3b1a@foo? (list 'record-predicate nV3b08@foo-rtd)) (cons (list 'define nV3b0e@make-foo (list 'record-constructor nV3b0a@foo-rcd)) (append (map (lambda (nV3b22@foo-x nV3b23@idx) (list 'define nV3b22@foo-x (list 'record-accessor nV3b08@foo-rtd nV3b23@idx))) nV3b14@foo-x* nV3b12@idx*) (map (lambda (nV3b26@set-foo-x! nV3b27@idx) (list 'define nV3b26@set-foo-x! (list 'record-mutator nV3b08@foo-rtd nV3b27@idx))) nV3b16@set-foo-x!* nV3b18@set-foo-idx*)))))))))))))))))))))))))) (set! nV3ad9@verify-clauses (lambda (nV3ae2@x nV3ae3@cls*) (let ((nV3ae7@valid-kwds '#f) (nV3ae9@free-id-member? '#f)) (begin (set! nV3ae7@valid-kwds (map nV30a7@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! nV3ae9@free-id-member? (lambda (nV3afe@x nV3aff@ls) (and (pair? nV3aff@ls) (or (nV2ef0@free-id=? nV3afe@x (car nV3aff@ls)) (nV3ae9@free-id-member? nV3afe@x (cdr nV3aff@ls)))))) (let nV3aee@f ((nV3aea@cls* nV3ae3@cls*) (nV3aeb@seen* '())) (if (not (null? nV3aea@cls*)) (let ((nV3af0@t (car nV3aea@cls*))) (let ((nV3af2@ls/false (nV30f1@syntax-dispatch nV3af0@t '(any . any)))) (if nV3af2@ls/false (apply (lambda (nV3af4@kwd nV3af5@rest) (if (or (not (nV2eea@id? nV3af4@kwd)) (not (nV3ae9@free-id-member? nV3af4@kwd nV3ae7@valid-kwds))) (nV31d1@syntax-violation '#f '"not a valid define-record-type keyword" nV3af4@kwd) (if (nV2ef6@bound-id-member? nV3af4@kwd nV3aeb@seen*) (nV31d1@syntax-violation '#f '"duplicate use of keyword " nV3ae2@x nV3af4@kwd) (nV3aee@f (cdr nV3aea@cls*) (cons nV3af4@kwd nV3aeb@seen*))))) nV3af2@ls/false) (let ((nV3af8@t nV3af0@t)) (let ((nV3afa@ls/false (nV30f1@syntax-dispatch nV3af8@t 'any))) (if nV3afa@ls/false (apply (lambda (nV3afc@cls) (nV31d1@syntax-violation '#f '"malformed define-record-type clause" nV3afc@cls)) nV3afa@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3af8@t))))))) (void))))))) (let ((nV3ada@t nV3ab6@x)) (let ((nV3adc@ls/false (nV30f1@syntax-dispatch nV3ada@t '(_ any . each-any)))) (if nV3adc@ls/false (apply (lambda (nV3ade@namespec nV3adf@clause*) (begin (nV3ad9@verify-clauses nV3ab6@x nV3adf@clause*) (nV3ad7@do-define-record nV3ade@namespec nV3adf@clause*))) nV3adc@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3ada@t)))))))) (set! nV4bc1@nV30e5@define-record-type-macro nV30e5@define-record-type-macro) (set! nV30e7@define-condition-type-macro (lambda (nV3cb2@x) (let ((nV3cb5@mkname '#f)) (begin (set! nV3cb5@mkname (lambda (nV3ce2@name nV3ce3@suffix) (nV31d5@datum->syntax nV3ce2@name (string->symbol (string-append (symbol->string (nV31d7@syntax->datum nV3ce2@name)) nV3ce3@suffix))))) (let ((nV3cb6@t nV3cb2@x)) (let ((nV3cb8@ls/false (nV30f1@syntax-dispatch nV3cb6@t '(any any any any any . #(each (any any)))))) (if (and nV3cb8@ls/false (apply (lambda (nV3cba@ctxt nV3cbb@name nV3cbc@super nV3cbd@constructor nV3cbe@predicate nV3cbf@field* nV3cc0@accessor*) (and (nV2eea@id? nV3cbb@name) (nV2eea@id? nV3cbc@super) (nV2eea@id? nV3cbd@constructor) (nV2eea@id? nV3cbe@predicate) (for-all nV2eea@id? nV3cbf@field*) (for-all nV2eea@id? nV3cc0@accessor*))) nV3cb8@ls/false)) (apply (lambda (nV3cc8@ctxt nV3cc9@name nV3cca@super nV3ccb@constructor nV3ccc@predicate nV3ccd@field* nV3cce@accessor*) (let ((nV3cd6@aux-accessor* (map (lambda (nV3cd8@x) (gensym)) nV3cce@accessor*))) (nV30a7@bless (cons 'begin (cons (cons 'define-record-type (cons (list nV3cc9@name nV3ccb@constructor (gensym)) (cons (list 'parent nV3cca@super) (cons (cons 'fields (map (lambda (nV3cda@field nV3cdb@aux) (list 'immutable nV3cda@field nV3cdb@aux)) nV3ccd@field* nV3cd6@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define nV3ccc@predicate (list 'condition-predicate (list 'record-type-descriptor nV3cc9@name))) (map (lambda (nV3cde@accessor nV3cdf@aux) (list 'define nV3cde@accessor (list 'condition-accessor (list 'record-type-descriptor nV3cc9@name) nV3cdf@aux))) nV3cce@accessor* nV3cd6@aux-accessor*))))))) nV3cb8@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3cb6@t)))))))) (set! nV4bc2@nV30e7@define-condition-type-macro nV30e7@define-condition-type-macro) (set! nV30e9@incorrect-usage-macro (lambda (nV3ce6@e) (nV31d1@syntax-violation '#f '"incorrect usage of auxiliary keyword" nV3ce6@e))) (set! nV4bc3@nV30e9@incorrect-usage-macro nV30e9@incorrect-usage-macro) (set! nV30eb@parameterize-macro (lambda (nV3ce8@e) (let ((nV3cea@t nV3ce8@e)) (let ((nV3cec@ls/false (nV30f1@syntax-dispatch nV3cea@t '(_ () any . each-any)))) (if nV3cec@ls/false (apply (lambda (nV3cee@b nV3cef@b*) (nV30a7@bless (cons 'let (cons '() (cons nV3cee@b nV3cef@b*))))) nV3cec@ls/false) (let ((nV3cf2@t nV3cea@t)) (let ((nV3cf4@ls/false (nV30f1@syntax-dispatch nV3cf2@t '(_ #(each (any any)) any . each-any)))) (if nV3cf4@ls/false (apply (lambda (nV3cf6@olhs* nV3cf7@orhs* nV3cf8@b nV3cf9@b*) (let ((nV3cfe@lhs* (nV31bf@generate-temporaries nV3cf6@olhs*)) (nV3cff@rhs* (nV31bf@generate-temporaries nV3cf7@orhs*))) (nV30a7@bless (cons (list 'lambda (append nV3cfe@lhs* nV3cff@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (nV3d02@lhs nV3d03@rhs) (list 'let (list (list 't (list nV3d02@lhs))) (list nV3d02@lhs nV3d03@rhs) (cons 'set! (cons nV3d03@rhs '(t))))) nV3cfe@lhs* nV3cff@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons nV3cf8@b nV3cf9@b*))) '(swap)))))) (append nV3cf6@olhs* nV3cf7@orhs*))))) nV3cf4@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3cf2@t))))))))) (set! nV4bc4@nV30eb@parameterize-macro nV30eb@parameterize-macro) (set! nV30ed@foreign-call-transformer (lambda (nV3d06@e nV3d07@r nV3d08@mr) (let ((nV3d0c@t nV3d06@e)) (let ((nV3d0e@ls/false (nV30f1@syntax-dispatch nV3d0c@t '(_ any . each-any)))) (if nV3d0e@ls/false (apply (lambda (nV3d10@name nV3d11@arg*) (cons 'foreign-call (cons (nV3113@chi-expr nV3d10@name nV3d07@r nV3d08@mr) (nV310f@chi-expr* nV3d11@arg* nV3d07@r nV3d08@mr)))) nV3d0e@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3d0c@t)))))) (set! nV4bc5@nV30ed@foreign-call-transformer nV30ed@foreign-call-transformer) (set! nV30ef@convert-pattern (lambda (nV3d14@pattern nV3d15@keys) (let ((nV3d19@cvt* '#f) (nV3d1b@cvt '#f)) (begin (set! nV3d19@cvt* (lambda (nV3db8@p* nV3db9@n nV3dba@ids) (if (null? nV3db8@p*) (values '() nV3dba@ids) (call-with-values (lambda () (nV3d19@cvt* (cdr nV3db8@p*) nV3db9@n nV3dba@ids)) (lambda (nV3dc2@nV3dbf nV3dc3@nV3dc1) (let ((nV3dc6@ids nV3dc3@nV3dc1) (nV3dc7@y nV3dc2@nV3dbf)) (call-with-values (lambda () (nV3d1b@cvt (car nV3db8@p*) nV3db9@n nV3dc6@ids)) (lambda (nV3dce@nV3dcb nV3dcf@nV3dcd) (let ((nV3dd2@ids nV3dcf@nV3dcd) (nV3dd3@x nV3dce@nV3dcb)) (values (cons nV3dd3@x nV3dc7@y) nV3dd2@ids)))))))))) (set! nV3d1b@cvt (lambda (nV3d1c@p nV3d1d@n nV3d1e@ids) (let ((nV3d22@t nV3d1c@p)) (let ((nV3d24@ls/false (nV30f1@syntax-dispatch nV3d22@t 'any))) (if (and nV3d24@ls/false (apply (lambda (nV3d26@id) (nV2eea@id? nV3d26@id)) nV3d24@ls/false)) (apply (lambda (nV3d28@id) (if (nV2ef6@bound-id-member? nV3d1c@p nV3d15@keys) (values (vector 'free-id nV3d1c@p) nV3d1e@ids) (if (nV2ef0@free-id=? nV3d1c@p (nV3079@scheme-stx '_)) (values '_ nV3d1e@ids) (values 'any (cons (cons nV3d1c@p nV3d1d@n) nV3d1e@ids))))) nV3d24@ls/false) (let ((nV3d2a@t nV3d22@t)) (let ((nV3d2c@ls/false (nV30f1@syntax-dispatch nV3d2a@t '(any any)))) (if (and nV3d2c@ls/false (apply (lambda (nV3d2e@p nV3d2f@dots) (nV30f3@ellipsis? nV3d2f@dots)) nV3d2c@ls/false)) (apply (lambda (nV3d32@p nV3d33@dots) (call-with-values (lambda () (nV3d1b@cvt nV3d32@p (+ nV3d1d@n '1) nV3d1e@ids)) (lambda (nV3d3a@nV3d37 nV3d3b@nV3d39) (let ((nV3d3e@ids nV3d3b@nV3d39) (nV3d3f@p nV3d3a@nV3d37)) (values (if (eq? nV3d3f@p 'any) 'each-any (vector 'each nV3d3f@p)) nV3d3e@ids))))) nV3d2c@ls/false) (let ((nV3d42@t nV3d2a@t)) (let ((nV3d44@ls/false (nV30f1@syntax-dispatch nV3d42@t '(any any . #(each+ any () any))))) (if (and nV3d44@ls/false (apply (lambda (nV3d46@x nV3d47@dots nV3d48@ys nV3d49@z) (nV30f3@ellipsis? nV3d47@dots)) nV3d44@ls/false)) (apply (lambda (nV3d4e@x nV3d4f@dots nV3d50@ys nV3d51@z) (call-with-values (lambda () (nV3d1b@cvt nV3d51@z nV3d1d@n nV3d1e@ids)) (lambda (nV3d5a@nV3d57 nV3d5b@nV3d59) (let ((nV3d5e@ids nV3d5b@nV3d59) (nV3d5f@z nV3d5a@nV3d57)) (call-with-values (lambda () (nV3d19@cvt* nV3d50@ys nV3d1d@n nV3d5e@ids)) (lambda (nV3d66@nV3d63 nV3d67@nV3d65) (let ((nV3d6a@ids nV3d67@nV3d65) (nV3d6b@ys nV3d66@nV3d63)) (call-with-values (lambda () (nV3d1b@cvt nV3d4e@x (+ nV3d1d@n '1) nV3d6a@ids)) (lambda (nV3d72@nV3d6f nV3d73@nV3d71) (let ((nV3d76@ids nV3d73@nV3d71) (nV3d77@x nV3d72@nV3d6f)) (values (vector 'each+ nV3d77@x (reverse nV3d6b@ys) nV3d5f@z) nV3d76@ids))))))))))) nV3d44@ls/false) (let ((nV3d7a@t nV3d42@t)) (let ((nV3d7c@ls/false (nV30f1@syntax-dispatch nV3d7a@t '(any . any)))) (if nV3d7c@ls/false (apply (lambda (nV3d7e@x nV3d7f@y) (call-with-values (lambda () (nV3d1b@cvt nV3d7f@y nV3d1d@n nV3d1e@ids)) (lambda (nV3d86@nV3d83 nV3d87@nV3d85) (let ((nV3d8a@ids nV3d87@nV3d85) (nV3d8b@y nV3d86@nV3d83)) (call-with-values (lambda () (nV3d1b@cvt nV3d7e@x nV3d1d@n nV3d8a@ids)) (lambda (nV3d92@nV3d8f nV3d93@nV3d91) (let ((nV3d96@ids nV3d93@nV3d91) (nV3d97@x nV3d92@nV3d8f)) (values (cons nV3d97@x nV3d8b@y) nV3d96@ids)))))))) nV3d7c@ls/false) (let ((nV3d9a@t nV3d7a@t)) (let ((nV3d9c@ls/false (nV30f1@syntax-dispatch nV3d9a@t '()))) (if nV3d9c@ls/false (apply (lambda () (values '() nV3d1e@ids)) nV3d9c@ls/false) (let ((nV3d9e@t nV3d9a@t)) (let ((nV3da0@ls/false (nV30f1@syntax-dispatch nV3d9e@t '#(vector each-any)))) (if (and nV3da0@ls/false (apply (lambda (nV3da2@p) (not (nV2eb6@stx? nV3da2@p))) nV3da0@ls/false)) (apply (lambda (nV3da4@p) (call-with-values (lambda () (nV3d1b@cvt nV3da4@p nV3d1d@n nV3d1e@ids)) (lambda (nV3daa@nV3da7 nV3dab@nV3da9) (let ((nV3dae@ids nV3dab@nV3da9) (nV3daf@p nV3daa@nV3da7)) (values (vector 'vector nV3daf@p) nV3dae@ids))))) nV3da0@ls/false) (let ((nV3db2@t nV3d9e@t)) (let ((nV3db4@ls/false (nV30f1@syntax-dispatch nV3db2@t 'any))) (if nV3db4@ls/false (apply (lambda (nV3db6@datum) (values (vector 'atom (nV2efe@stx->datum nV3db6@datum)) nV3d1e@ids)) nV3db4@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3db2@t)))))))))))))))))))))))) (nV3d1b@cvt nV3d14@pattern '0 '()))))) (set! nV4bc6@nV30ef@convert-pattern nV30ef@convert-pattern) (set! nV30f1@syntax-dispatch (let ((nV3dd7@stx^ '#f) (nV3dd9@match-each '#f) (nV3ddb@match-each+ '#f) (nV3ddd@match-each-any '#f) (nV3ddf@match-empty '#f) (nV3de1@combine '#f) (nV3de3@match* '#f) (nV3de5@match '#f)) (begin (set! nV3dd7@stx^ (lambda (nV3eb2@e nV3eb3@m* nV3eb4@s* nV3eb5@ae*) (if (and (null? nV3eb3@m*) (null? nV3eb4@s*) (null? nV3eb5@ae*)) nV3eb2@e (nV2ed2@mkstx nV3eb2@e nV3eb3@m* nV3eb4@s* nV3eb5@ae*)))) (set! nV3dd9@match-each (lambda (nV3e92@e nV3e93@p nV3e94@m* nV3e95@s* nV3e96@ae*) (if (pair? nV3e92@e) (let ((nV3e9c@first (nV3de5@match (car nV3e92@e) nV3e93@p nV3e94@m* nV3e95@s* nV3e96@ae* '()))) (and nV3e9c@first (let ((nV3e9e@rest (nV3dd9@match-each (cdr nV3e92@e) nV3e93@p nV3e94@m* nV3e95@s* nV3e96@ae*))) (and nV3e9e@rest (cons nV3e9c@first nV3e9e@rest))))) (if (null? nV3e92@e) '() (if (nV2eb6@stx? nV3e92@e) (and (not (nV2e70@top-marked? nV3e94@m*)) (call-with-values (lambda () (join-wraps nV3e94@m* nV3e95@s* nV3e96@ae* nV3e92@e)) (lambda (nV3ea6@nV3ea1 nV3ea7@nV3ea3 nV3ea8@nV3ea5) (let ((nV3eac@ae* nV3ea8@nV3ea5) (nV3ead@s* nV3ea7@nV3ea3) (nV3eae@m* nV3ea6@nV3ea1)) (nV3dd9@match-each (nV2eb8@stx-expr nV3e92@e) nV3e93@p nV3eae@m* nV3ead@s* nV3eac@ae*))))) (if (nV2a17@nV28e9@annotation? nV3e92@e) (nV3dd9@match-each (nV2a19@nV28ed@annotation-expression nV3e92@e) nV3e93@p nV3e94@m* nV3e95@s* nV3e96@ae*) '#f)))))) (set! nV3ddb@match-each+ (lambda (nV3e52@e nV3e53@x-pat nV3e54@y-pat nV3e55@z-pat nV3e56@m* nV3e57@s* nV3e58@ae* nV3e59@r) (let nV3e6a@f ((nV3e62@e nV3e52@e) (nV3e63@m* nV3e56@m*) (nV3e64@s* nV3e57@s*) (nV3e65@ae* nV3e58@ae*)) (if (pair? nV3e62@e) (call-with-values (lambda () (nV3e6a@f (cdr nV3e62@e) nV3e63@m* nV3e64@s* nV3e65@ae*)) (lambda (nV3e72@nV3e6d nV3e73@nV3e6f nV3e74@nV3e71) (let ((nV3e78@r nV3e74@nV3e71) (nV3e79@y-pat nV3e73@nV3e6f) (nV3e7a@xr* nV3e72@nV3e6d)) (if nV3e78@r (if (null? nV3e79@y-pat) (let ((nV3e7e@xr (nV3de5@match (car nV3e62@e) nV3e53@x-pat nV3e63@m* nV3e64@s* nV3e65@ae* '()))) (if nV3e7e@xr (values (cons nV3e7e@xr nV3e7a@xr*) nV3e79@y-pat nV3e78@r) (values '#f '#f '#f))) (values '() (cdr nV3e79@y-pat) (nV3de5@match (car nV3e62@e) (car nV3e79@y-pat) nV3e63@m* nV3e64@s* nV3e65@ae* nV3e78@r))) (values '#f '#f '#f))))) (if (nV2eb6@stx? nV3e62@e) (if (nV2e70@top-marked? nV3e63@m*) (values '() nV3e54@y-pat (nV3de5@match nV3e62@e nV3e55@z-pat nV3e63@m* nV3e64@s* nV3e65@ae* nV3e59@r)) (call-with-values (lambda () (join-wraps nV3e63@m* nV3e64@s* nV3e65@ae* nV3e62@e)) (lambda (nV3e86@nV3e81 nV3e87@nV3e83 nV3e88@nV3e85) (let ((nV3e8c@ae* nV3e88@nV3e85) (nV3e8d@s* nV3e87@nV3e83) (nV3e8e@m* nV3e86@nV3e81)) (nV3e6a@f (nV2eb8@stx-expr nV3e62@e) nV3e8e@m* nV3e8d@s* nV3e8c@ae*))))) (if (nV2a17@nV28e9@annotation? nV3e62@e) (nV3e6a@f (nV2a19@nV28ed@annotation-expression nV3e62@e) nV3e63@m* nV3e64@s* nV3e65@ae*) (values '() nV3e54@y-pat (nV3de5@match nV3e62@e nV3e55@z-pat nV3e63@m* nV3e64@s* nV3e65@ae* nV3e59@r)))))))) (set! nV3ddd@match-each-any (lambda (nV3e36@e nV3e37@m* nV3e38@s* nV3e39@ae*) (if (pair? nV3e36@e) (let ((nV3e3e@l (nV3ddd@match-each-any (cdr nV3e36@e) nV3e37@m* nV3e38@s* nV3e39@ae*))) (and nV3e3e@l (cons (nV3dd7@stx^ (car nV3e36@e) nV3e37@m* nV3e38@s* nV3e39@ae*) nV3e3e@l))) (if (null? nV3e36@e) '() (if (nV2eb6@stx? nV3e36@e) (and (not (nV2e70@top-marked? nV3e37@m*)) (call-with-values (lambda () (join-wraps nV3e37@m* nV3e38@s* nV3e39@ae* nV3e36@e)) (lambda (nV3e46@nV3e41 nV3e47@nV3e43 nV3e48@nV3e45) (let ((nV3e4c@ae* nV3e48@nV3e45) (nV3e4d@s* nV3e47@nV3e43) (nV3e4e@m* nV3e46@nV3e41)) (nV3ddd@match-each-any (nV2eb8@stx-expr nV3e36@e) nV3e4e@m* nV3e4d@s* nV3e4c@ae*))))) (if (nV2a17@nV28e9@annotation? nV3e36@e) (nV3ddd@match-each-any (nV2a19@nV28ed@annotation-expression nV3e36@e) nV3e37@m* nV3e38@s* nV3e39@ae*) '#f)))))) (set! nV3ddf@match-empty (lambda (nV3e30@p nV3e31@r) (if (null? nV3e30@p) nV3e31@r (if (eq? nV3e30@p '_) nV3e31@r (if (eq? nV3e30@p 'any) (cons '() nV3e31@r) (if (pair? nV3e30@p) (nV3ddf@match-empty (car nV3e30@p) (nV3ddf@match-empty (cdr nV3e30@p) nV3e31@r)) (if (eq? nV3e30@p 'each-any) (cons '() nV3e31@r) (let ((nV3e34@t (vector-ref nV3e30@p '0))) (if (memv nV3e34@t '(each)) (nV3ddf@match-empty (vector-ref nV3e30@p '1) nV3e31@r) (if (memv nV3e34@t '(each+)) (nV3ddf@match-empty (vector-ref nV3e30@p '1) (nV3ddf@match-empty (reverse (vector-ref nV3e30@p '2)) (nV3ddf@match-empty (vector-ref nV3e30@p '3) nV3e31@r))) (if (memv nV3e34@t '(free-id atom)) nV3e31@r (if (memv nV3e34@t '(scheme-id atom)) nV3e31@r (if (memv nV3e34@t '(vector)) (nV3ddf@match-empty (vector-ref nV3e30@p '1) nV3e31@r) (assertion-violation 'syntax-dispatch '"invalid pattern" nV3e30@p)))))))))))))) (set! nV3de1@combine (lambda (nV3e2c@r* nV3e2d@r) (if (null? (car nV3e2c@r*)) nV3e2d@r (cons (map car nV3e2c@r*) (nV3de1@combine (map cdr nV3e2c@r*) nV3e2d@r))))) (set! nV3de3@match* (lambda (nV3e08@e nV3e09@p nV3e0a@m* nV3e0b@s* nV3e0c@ae* nV3e0d@r) (if (null? nV3e09@p) (and (null? nV3e08@e) nV3e0d@r) (if (pair? nV3e09@p) (and (pair? nV3e08@e) (nV3de5@match (car nV3e08@e) (car nV3e09@p) nV3e0a@m* nV3e0b@s* nV3e0c@ae* (nV3de5@match (cdr nV3e08@e) (cdr nV3e09@p) nV3e0a@m* nV3e0b@s* nV3e0c@ae* nV3e0d@r))) (if (eq? nV3e09@p 'each-any) (let ((nV3e14@l (nV3ddd@match-each-any nV3e08@e nV3e0a@m* nV3e0b@s* nV3e0c@ae*))) (and nV3e14@l (cons nV3e14@l nV3e0d@r))) (let ((nV3e16@t (vector-ref nV3e09@p '0))) (if (memv nV3e16@t '(each)) (if (null? nV3e08@e) (nV3ddf@match-empty (vector-ref nV3e09@p '1) nV3e0d@r) (let ((nV3e18@r* (nV3dd9@match-each nV3e08@e (vector-ref nV3e09@p '1) nV3e0a@m* nV3e0b@s* nV3e0c@ae*))) (and nV3e18@r* (nV3de1@combine nV3e18@r* nV3e0d@r)))) (if (memv nV3e16@t '(free-id)) (and (symbol? nV3e08@e) (nV2e70@top-marked? nV3e0a@m*) (nV2ef0@free-id=? (nV3dd7@stx^ nV3e08@e nV3e0a@m* nV3e0b@s* nV3e0c@ae*) (vector-ref nV3e09@p '1)) nV3e0d@r) (if (memv nV3e16@t '(scheme-id)) (and (symbol? nV3e08@e) (nV2e70@top-marked? nV3e0a@m*) (nV2ef0@free-id=? (nV3dd7@stx^ nV3e08@e nV3e0a@m* nV3e0b@s* nV3e0c@ae*) (nV3079@scheme-stx (vector-ref nV3e09@p '1))) nV3e0d@r) (if (memv nV3e16@t '(each+)) (call-with-values (lambda () (nV3ddb@match-each+ nV3e08@e (vector-ref nV3e09@p '1) (vector-ref nV3e09@p '2) (vector-ref nV3e09@p '3) nV3e0a@m* nV3e0b@s* nV3e0c@ae* nV3e0d@r)) (lambda (nV3e20@nV3e1b nV3e21@nV3e1d nV3e22@nV3e1f) (let ((nV3e26@r nV3e22@nV3e1f) (nV3e27@y-pat nV3e21@nV3e1d) (nV3e28@xr* nV3e20@nV3e1b)) (and nV3e26@r (null? nV3e27@y-pat) (if (null? nV3e28@xr*) (nV3ddf@match-empty (vector-ref nV3e09@p '1) nV3e26@r) (nV3de1@combine nV3e28@xr* nV3e26@r)))))) (if (memv nV3e16@t '(atom)) (and (fast-equal? (vector-ref nV3e09@p '1) (nV2efc@strip nV3e08@e nV3e0a@m*)) nV3e0d@r) (if (memv nV3e16@t '(vector)) (and (vector? nV3e08@e) (nV3de5@match (vector->list nV3e08@e) (vector-ref nV3e09@p '1) nV3e0a@m* nV3e0b@s* nV3e0c@ae* nV3e0d@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" nV3e09@p))))))))))))) (set! nV3de5@match (lambda (nV3dea@e nV3deb@p nV3dec@m* nV3ded@s* nV3dee@ae* nV3def@r) (if (not nV3def@r) '#f (if (eq? nV3deb@p '_) nV3def@r (if (eq? nV3deb@p 'any) (cons (nV3dd7@stx^ nV3dea@e nV3dec@m* nV3ded@s* nV3dee@ae*) nV3def@r) (if (nV2eb6@stx? nV3dea@e) (and (not (nV2e70@top-marked? nV3dec@m*)) (call-with-values (lambda () (join-wraps nV3dec@m* nV3ded@s* nV3dee@ae* nV3dea@e)) (lambda (nV3dfc@nV3df7 nV3dfd@nV3df9 nV3dfe@nV3dfb) (let ((nV3e02@ae* nV3dfe@nV3dfb) (nV3e03@s* nV3dfd@nV3df9) (nV3e04@m* nV3dfc@nV3df7)) (nV3de5@match (nV2eb8@stx-expr nV3dea@e) nV3deb@p nV3e04@m* nV3e03@s* nV3e02@ae* nV3def@r))))) (if (nV2a17@nV28e9@annotation? nV3dea@e) (nV3de5@match (nV2a19@nV28ed@annotation-expression nV3dea@e) nV3deb@p nV3dec@m* nV3ded@s* nV3dee@ae* nV3def@r) (nV3de3@match* nV3dea@e nV3deb@p nV3dec@m* nV3ded@s* nV3dee@ae* nV3def@r)))))))) (lambda (nV3de6@e nV3de7@p) (nV3de5@match nV3de6@e nV3de7@p '() '() '() '()))))) (set! nV4bc7@nV30f1@syntax-dispatch nV30f1@syntax-dispatch) (set! nV30f3@ellipsis? (lambda (nV3eba@x) (and (nV2eea@id? nV3eba@x) (nV2ef0@free-id=? nV3eba@x (nV3079@scheme-stx '...))))) (set! nV4bc8@nV30f3@ellipsis? nV30f3@ellipsis?) (set! nV30f5@underscore? (lambda (nV3ebc@x) (and (nV2eea@id? nV3ebc@x) (nV2ef0@free-id=? nV3ebc@x (nV3079@scheme-stx '_))))) (set! nV4bc9@nV30f5@underscore? nV30f5@underscore?) (set! nV30f7@verify-literals (lambda (nV3ebe@lits nV3ebf@expr) (for-each (lambda (nV3ec2@x) (if (or (not (nV2eea@id? nV3ec2@x)) (nV30f3@ellipsis? nV3ec2@x) (nV30f5@underscore? nV3ec2@x)) (nV31d1@syntax-violation '#f '"invalid literal" nV3ebf@expr nV3ec2@x) (void))) nV3ebe@lits))) (set! nV4bca@nV30f7@verify-literals nV30f7@verify-literals) (set! nV30f9@syntax-case-transformer (let ((nV3ec5@build-dispatch-call '#f) (nV3ec7@invalid-ids-error '#f) (nV3ec9@gen-clause '#f) (nV3ecb@gen-syntax-case '#f)) (begin (set! nV3ec5@build-dispatch-call (lambda (nV3f36@pvars nV3f37@expr nV3f38@y nV3f39@r nV3f3a@mr) (let ((nV3f40@ids (map car nV3f36@pvars)) (nV3f41@levels (map cdr nV3f36@pvars))) (let ((nV3f44@labels (map nV2e76@gen-label nV3f40@ids)) (nV3f45@new-vars (map nV2e72@gen-lexical nV3f40@ids))) (let ((nV3f48@body (nV3113@chi-expr (nV2ed6@add-subst (nV2eaa@make-full-rib nV3f40@ids nV3f44@labels) nV3f37@expr) (append (map (lambda (nV3f4a@label nV3f4b@var nV3f4c@level) (cons nV3f4a@label (nV2f04@make-binding 'syntax (cons nV3f4b@var nV3f4c@level)))) nV3f44@labels nV3f45@new-vars (map cdr nV3f36@pvars)) nV3f39@r) nV3f3a@mr))) (list '(primitive apply) (nV2e4d@nV2d79@build-lambda '#f nV3f45@new-vars nV3f48@body) nV3f38@y)))))) (set! nV3ec7@invalid-ids-error (lambda (nV3f2a@id* nV3f2b@e nV3f2c@class) (let nV3f34@find ((nV3f30@id* nV3f2a@id*) (nV3f31@ok* '())) (if (null? nV3f30@id*) (nV31d1@syntax-violation '#f '"invalid syntax" nV3f2b@e) (if (nV2eea@id? (car nV3f30@id*)) (if (nV2ef6@bound-id-member? (car nV3f30@id*) nV3f31@ok*) (nV31cd@syntax-error (car nV3f30@id*) '"duplicate " nV3f2c@class) (nV3f34@find (cdr nV3f30@id*) (cons (car nV3f30@id*) nV3f31@ok*))) (nV31cd@syntax-error (car nV3f30@id*) '"invalid " nV3f2c@class)))))) (set! nV3ec9@gen-clause (lambda (nV3f02@x nV3f03@keys nV3f04@clauses nV3f05@r nV3f06@mr nV3f07@pat nV3f08@fender nV3f09@expr) (call-with-values (lambda () (nV30ef@convert-pattern nV3f07@pat nV3f03@keys)) (lambda (nV3f16@nV3f13 nV3f17@nV3f15) (let ((nV3f1a@pvars nV3f17@nV3f15) (nV3f1b@p nV3f16@nV3f13)) (if (not (nV2ef4@distinct-bound-ids? (map car nV3f1a@pvars))) (nV3ec7@invalid-ids-error (map car nV3f1a@pvars) nV3f07@pat '"pattern variable") (if (not (for-all (lambda (nV3f1e@x) (not (nV30f3@ellipsis? (car nV3f1e@x)))) nV3f1a@pvars)) (nV31d1@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" nV3f07@pat) (let ((nV3f20@y (nV2e72@gen-lexical 'tmp))) (let ((nV3f22@test (if (eq? nV3f08@fender '#t) nV3f20@y (let ((nV3f24@call (nV3ec5@build-dispatch-call nV3f1a@pvars nV3f08@fender nV3f20@y nV3f05@r nV3f06@mr))) (list 'if nV3f20@y nV3f24@call (list 'quote '#f)))))) (let ((nV3f26@conseq (nV3ec5@build-dispatch-call nV3f1a@pvars nV3f09@expr nV3f20@y nV3f05@r nV3f06@mr))) (let ((nV3f28@altern (nV3ecb@gen-syntax-case nV3f02@x nV3f03@keys nV3f04@clauses nV3f05@r nV3f06@mr))) (list (nV2e4d@nV2d79@build-lambda '#f (list nV3f20@y) (list 'if nV3f22@test nV3f26@conseq nV3f28@altern)) (list '(primitive syntax-dispatch) nV3f02@x (list 'quote nV3f1b@p)))))))))))))) (set! nV3ecb@gen-syntax-case (lambda (nV3ee0@x nV3ee1@keys nV3ee2@clauses nV3ee3@r nV3ee4@mr) (if (null? nV3ee2@clauses) (list '(primitive syntax-error) nV3ee0@x) (let ((nV3eea@t (car nV3ee2@clauses))) (let ((nV3eec@ls/false (nV30f1@syntax-dispatch nV3eea@t '(any any)))) (if nV3eec@ls/false (apply (lambda (nV3eee@pat nV3eef@expr) (if (and (nV2eea@id? nV3eee@pat) (not (nV2ef6@bound-id-member? nV3eee@pat nV3ee1@keys)) (not (nV30f3@ellipsis? nV3eee@pat))) (if (nV2ef0@free-id=? nV3eee@pat (nV3079@scheme-stx '_)) (nV3113@chi-expr nV3eef@expr nV3ee3@r nV3ee4@mr) (let ((nV3ef2@lab (nV2e76@gen-label nV3eee@pat)) (nV3ef3@lex (nV2e72@gen-lexical nV3eee@pat))) (let ((nV3ef6@body (nV3113@chi-expr (nV2ed6@add-subst (nV2eaa@make-full-rib (list nV3eee@pat) (list nV3ef2@lab)) nV3eef@expr) (cons (cons nV3ef2@lab (nV2f04@make-binding 'syntax (cons nV3ef3@lex '0))) nV3ee3@r) nV3ee4@mr))) (list (nV2e4d@nV2d79@build-lambda '#f (list nV3ef3@lex) nV3ef6@body) nV3ee0@x)))) (nV3ec9@gen-clause nV3ee0@x nV3ee1@keys (cdr nV3ee2@clauses) nV3ee3@r nV3ee4@mr nV3eee@pat '#t nV3eef@expr))) nV3eec@ls/false) (let ((nV3ef8@t nV3eea@t)) (let ((nV3efa@ls/false (nV30f1@syntax-dispatch nV3ef8@t '(any any any)))) (if nV3efa@ls/false (apply (lambda (nV3efc@pat nV3efd@fender nV3efe@expr) (nV3ec9@gen-clause nV3ee0@x nV3ee1@keys (cdr nV3ee2@clauses) nV3ee3@r nV3ee4@mr nV3efc@pat nV3efd@fender nV3efe@expr)) nV3efa@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3ef8@t)))))))))) (lambda (nV3ecc@e nV3ecd@r nV3ece@mr) (let ((nV3ed2@t nV3ecc@e)) (let ((nV3ed4@ls/false (nV30f1@syntax-dispatch nV3ed2@t '(_ any each-any . each-any)))) (if nV3ed4@ls/false (apply (lambda (nV3ed6@expr nV3ed7@keys nV3ed8@clauses) (begin (nV30f7@verify-literals nV3ed7@keys nV3ecc@e) (let ((nV3edc@x (nV2e72@gen-lexical 'tmp))) (let ((nV3ede@body (nV3ecb@gen-syntax-case nV3edc@x nV3ed7@keys nV3ed8@clauses nV3ecd@r nV3ece@mr))) (list (nV2e4d@nV2d79@build-lambda '#f (list nV3edc@x) nV3ede@body) (nV3113@chi-expr nV3ed6@expr nV3ecd@r nV3ece@mr)))))) nV3ed4@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3ed2@t)))))))) (set! nV4bcb@nV30f9@syntax-case-transformer nV30f9@syntax-case-transformer) (set! nV30fb@ellipsis-map (lambda (nV3f50@proc nV3f51@ls . nV3f54@ls*) (let ((nV3f57@who '#f)) (begin (set! nV3f57@who '...) (begin (if (not (list? nV3f51@ls)) (assertion-violation nV3f57@who '"not a list" nV3f51@ls) (void)) (if (not (null? nV3f54@ls*)) (let ((nV3f58@n (length nV3f51@ls))) (for-each (lambda (nV3f5a@x) (begin (if (not (list? nV3f5a@x)) (assertion-violation nV3f57@who '"not a list" nV3f5a@x) (void)) (if (not (= (length nV3f5a@x) nV3f58@n)) (assertion-violation nV3f57@who '"length mismatch" nV3f51@ls nV3f5a@x) (void)))) nV3f54@ls*)) (void)) (apply map nV3f50@proc nV3f51@ls nV3f54@ls*)))))) (set! nV4bcc@nV30fb@ellipsis-map nV30fb@ellipsis-map) (set! nV30fd@syntax-transformer (let ((nV3f5d@gen-syntax '#f) (nV3f5f@gen-ref '#f) (nV3f61@gen-append '#f) (nV3f63@gen-mappend '#f) (nV3f65@gen-map '#f) (nV3f67@gen-cons '#f) (nV3f69@gen-vector '#f) (nV3f6b@regen '#f)) (begin (set! nV3f5d@gen-syntax (lambda (nV3fd4@src nV3fd5@e nV3fd6@r nV3fd7@maps nV3fd8@ellipsis? nV3fd9@vec?) (let ((nV3fe0@t nV3fd5@e)) (let ((nV3fe2@ls/false (nV30f1@syntax-dispatch nV3fe0@t 'any))) (if (and nV3fe2@ls/false (apply (lambda (nV3fe4@dots) (nV3fd8@ellipsis? nV3fe4@dots)) nV3fe2@ls/false)) (apply (lambda (nV3fe6@dots) (nV31d1@syntax-violation '#f '"misplaced ellipsis in syntax form" nV3fd4@src)) nV3fe2@ls/false) (let ((nV3fe8@t nV3fe0@t)) (let ((nV3fea@ls/false (nV30f1@syntax-dispatch nV3fe8@t 'any))) (if (and nV3fea@ls/false (apply (lambda (nV3fec@id) (nV2eea@id? nV3fec@id)) nV3fea@ls/false)) (apply (lambda (nV3fee@id) (let ((nV3ff0@label (nV2f00@id->label nV3fd5@e))) (let ((nV3ff2@b (nV2f02@label->binding nV3ff0@label nV3fd6@r))) (if (eq? (nV2f06@binding-type nV3ff2@b) 'syntax) (call-with-values (lambda () (let ((nV3ff8@var.lev (nV2f08@binding-value nV3ff2@b))) (nV3f5f@gen-ref nV3fd4@src (car nV3ff8@var.lev) (cdr nV3ff8@var.lev) nV3fd7@maps))) (lambda (nV3ffa@nV3ff5 nV3ffb@nV3ff7) (let ((nV3ffe@maps nV3ffb@nV3ff7) (nV3fff@var nV3ffa@nV3ff5)) (values (list 'ref nV3fff@var) nV3ffe@maps)))) (values (list 'quote nV3fd5@e) nV3fd7@maps))))) nV3fea@ls/false) (let ((nV4002@t nV3fe8@t)) (let ((nV4004@ls/false (nV30f1@syntax-dispatch nV4002@t '(any any)))) (if (and nV4004@ls/false (apply (lambda (nV4006@dots nV4007@e) (nV3fd8@ellipsis? nV4006@dots)) nV4004@ls/false)) (apply (lambda (nV400a@dots nV400b@e) (if nV3fd9@vec? (nV31d1@syntax-violation '#f '"misplaced ellipsis in syntax form" nV3fd4@src) (nV3f5d@gen-syntax nV3fd4@src nV400b@e nV3fd6@r nV3fd7@maps (lambda (nV400e@x) '#f) '#f))) nV4004@ls/false) (let ((nV4010@t nV4002@t)) (let ((nV4012@ls/false (nV30f1@syntax-dispatch nV4010@t '(any any . any)))) (if (and nV4012@ls/false (apply (lambda (nV4014@x nV4015@dots nV4016@y) (nV3fd8@ellipsis? nV4015@dots)) nV4012@ls/false)) (apply (lambda (nV401a@x nV401b@dots nV401c@y) (let nV4032@f ((nV4020@y nV401c@y) (nV4021@k (lambda (nV4024@maps) (call-with-values (lambda () (nV3f5d@gen-syntax nV3fd4@src nV401a@x nV3fd6@r (cons '() nV4024@maps) nV3fd8@ellipsis? '#f)) (lambda (nV402a@nV4027 nV402b@nV4029) (let ((nV402e@maps nV402b@nV4029) (nV402f@x nV402a@nV4027)) (if (null? (car nV402e@maps)) (nV31d1@syntax-violation '#f '"extra ellipsis in syntax form" nV3fd4@src) (values (nV3f65@gen-map nV402f@x (car nV402e@maps)) (cdr nV402e@maps))))))))) (let ((nV4034@t nV4020@y)) (let ((nV4036@ls/false (nV30f1@syntax-dispatch nV4034@t '()))) (if nV4036@ls/false (apply (lambda () (nV4021@k nV3fd7@maps)) nV4036@ls/false) (let ((nV4038@t nV4034@t)) (let ((nV403a@ls/false (nV30f1@syntax-dispatch nV4038@t '(any . any)))) (if (and nV403a@ls/false (apply (lambda (nV403c@dots nV403d@y) (nV3fd8@ellipsis? nV403c@dots)) nV403a@ls/false)) (apply (lambda (nV4040@dots nV4041@y) (nV4032@f nV4041@y (lambda (nV4044@maps) (call-with-values (lambda () (nV4021@k (cons '() nV4044@maps))) (lambda (nV404a@nV4047 nV404b@nV4049) (let ((nV404e@maps nV404b@nV4049) (nV404f@x nV404a@nV4047)) (if (null? (car nV404e@maps)) (nV31d1@syntax-violation '#f '"extra ellipsis in syntax form" nV3fd4@src) (values (nV3f63@gen-mappend nV404f@x (car nV404e@maps)) (cdr nV404e@maps))))))))) nV403a@ls/false) (let ((nV4052@t nV4038@t)) (let ((nV4054@ls/false (nV30f1@syntax-dispatch nV4052@t '_))) (if nV4054@ls/false (apply (lambda () (call-with-values (lambda () (nV3f5d@gen-syntax nV3fd4@src nV4020@y nV3fd6@r nV3fd7@maps nV3fd8@ellipsis? nV3fd9@vec?)) (lambda (nV405a@nV4057 nV405b@nV4059) (let ((nV405e@maps nV405b@nV4059) (nV405f@y nV405a@nV4057)) (call-with-values (lambda () (nV4021@k nV405e@maps)) (lambda (nV4066@nV4063 nV4067@nV4065) (let ((nV406a@maps nV4067@nV4065) (nV406b@x nV4066@nV4063)) (values (nV3f61@gen-append nV406b@x nV405f@y) nV406a@maps)))))))) nV4054@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV4052@t)))))))))))) nV4012@ls/false) (let ((nV406e@t nV4010@t)) (let ((nV4070@ls/false (nV30f1@syntax-dispatch nV406e@t '(any . any)))) (if nV4070@ls/false (apply (lambda (nV4072@x nV4073@y) (call-with-values (lambda () (nV3f5d@gen-syntax nV3fd4@src nV4072@x nV3fd6@r nV3fd7@maps nV3fd8@ellipsis? '#f)) (lambda (nV407a@nV4077 nV407b@nV4079) (let ((nV407e@maps nV407b@nV4079) (nV407f@xnew nV407a@nV4077)) (call-with-values (lambda () (nV3f5d@gen-syntax nV3fd4@src nV4073@y nV3fd6@r nV407e@maps nV3fd8@ellipsis? nV3fd9@vec?)) (lambda (nV4086@nV4083 nV4087@nV4085) (let ((nV408a@maps nV4087@nV4085) (nV408b@ynew nV4086@nV4083)) (values (nV3f67@gen-cons nV3fd5@e nV4072@x nV4073@y nV407f@xnew nV408b@ynew) nV408a@maps)))))))) nV4070@ls/false) (let ((nV408e@t nV406e@t)) (let ((nV4090@ls/false (nV30f1@syntax-dispatch nV408e@t '#(vector each-any)))) (if nV4090@ls/false (apply (lambda (nV4092@ls) (call-with-values (lambda () (nV3f5d@gen-syntax nV3fd4@src nV4092@ls nV3fd6@r nV3fd7@maps nV3fd8@ellipsis? '#t)) (lambda (nV4098@nV4095 nV4099@nV4097) (let ((nV409c@maps nV4099@nV4097) (nV409d@lsnew nV4098@nV4095)) (values (nV3f69@gen-vector nV3fd5@e nV4092@ls nV409d@lsnew) nV409c@maps))))) nV4090@ls/false) (let ((nV40a0@t nV408e@t)) (let ((nV40a2@ls/false (nV30f1@syntax-dispatch nV40a0@t '_))) (if nV40a2@ls/false (apply (lambda () (values (list 'quote nV3fd5@e) nV3fd7@maps)) nV40a2@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV40a0@t)))))))))))))))))))))))) (set! nV3f5f@gen-ref (lambda (nV3fba@src nV3fbb@var nV3fbc@level nV3fbd@maps) (if (= nV3fbc@level '0) (values nV3fbb@var nV3fbd@maps) (if (null? nV3fbd@maps) (nV31d1@syntax-violation '#f '"missing ellipsis in syntax form" nV3fba@src) (call-with-values (lambda () (nV3f5f@gen-ref nV3fba@src nV3fbb@var (- nV3fbc@level '1) (cdr nV3fbd@maps))) (lambda (nV3fc6@nV3fc3 nV3fc7@nV3fc5) (let ((nV3fca@outer-maps nV3fc7@nV3fc5) (nV3fcb@outer-var nV3fc6@nV3fc3)) (let ((nV3fce@t (assq nV3fcb@outer-var (car nV3fbd@maps)))) (if nV3fce@t ((lambda (nV3fd0@b) (values (cdr nV3fd0@b) nV3fbd@maps)) nV3fce@t) (let ((nV3fd2@inner-var (nV2e72@gen-lexical 'tmp))) (values nV3fd2@inner-var (cons (cons (cons nV3fcb@outer-var nV3fd2@inner-var) (car nV3fbd@maps)) nV3fca@outer-maps)))))))))))) (set! nV3f61@gen-append (lambda (nV3fb6@x nV3fb7@y) (if (fast-equal? nV3fb7@y ''()) nV3fb6@x (list 'append nV3fb6@x nV3fb7@y)))) (set! nV3f63@gen-mappend (lambda (nV3fb2@e nV3fb3@map-env) (list 'apply '(primitive append) (nV3f65@gen-map nV3fb2@e nV3fb3@map-env)))) (set! nV3f65@gen-map (lambda (nV3fa0@e nV3fa1@map-env) (let ((nV3fa4@formals (map cdr nV3fa1@map-env)) (nV3fa5@actuals (map (lambda (nV3fa8@x) (list 'ref (car nV3fa8@x))) nV3fa1@map-env))) (if (eq? (car nV3fa0@e) 'ref) (car nV3fa5@actuals) (if (for-all (lambda (nV3faa@x) (and (eq? (car nV3faa@x) 'ref) (memq (cadr nV3faa@x) nV3fa4@formals))) (cdr nV3fa0@e)) (let ((nV3fac@args (map (let ((nV3fae@r (map cons nV3fa4@formals nV3fa5@actuals))) (lambda (nV3fb0@x) (cdr (assq (cadr nV3fb0@x) nV3fae@r)))) (cdr nV3fa0@e)))) (cons 'map (cons (list 'primitive (car nV3fa0@e)) nV3fac@args))) (cons* 'map (list 'lambda nV3fa4@formals nV3fa0@e) nV3fa5@actuals)))))) (set! nV3f67@gen-cons (lambda (nV3f90@e nV3f91@x nV3f92@y nV3f93@xnew nV3f94@ynew) (let ((nV3f9a@t (car nV3f94@ynew))) (if (memv nV3f9a@t '(quote)) (if (eq? (car nV3f93@xnew) 'quote) (let ((nV3f9c@xnew (cadr nV3f93@xnew)) (nV3f9d@ynew (cadr nV3f94@ynew))) (if (and (eq? nV3f9c@xnew nV3f91@x) (eq? nV3f9d@ynew nV3f92@y)) (list 'quote nV3f90@e) (list 'quote (cons nV3f9c@xnew nV3f9d@ynew)))) (if (null? (cadr nV3f94@ynew)) (list 'list nV3f93@xnew) (list 'cons nV3f93@xnew nV3f94@ynew))) (if (memv nV3f9a@t '(list)) (cons 'list (cons nV3f93@xnew (cdr nV3f94@ynew))) (list 'cons nV3f93@xnew nV3f94@ynew)))))) (set! nV3f69@gen-vector (lambda (nV3f8a@e nV3f8b@ls nV3f8c@lsnew) (if (eq? (car nV3f8c@lsnew) 'quote) (if (eq? (cadr nV3f8c@lsnew) nV3f8b@ls) (list 'quote nV3f8a@e) (list 'quote (list->vector (cadr nV3f8c@lsnew)))) (if (eq? (car nV3f8c@lsnew) 'list) (cons 'vector (cdr nV3f8c@lsnew)) (list 'list->vector nV3f8c@lsnew))))) (set! nV3f6b@regen (lambda (nV3f84@x) (let ((nV3f86@t (car nV3f84@x))) (if (memv nV3f86@t '(ref)) (cadr nV3f84@x) (if (memv nV3f86@t '(primitive)) (list 'primitive (cadr nV3f84@x)) (if (memv nV3f86@t '(quote)) (list 'quote (cadr nV3f84@x)) (if (memv nV3f86@t '(lambda)) (nV2e4d@nV2d79@build-lambda '#f (cadr nV3f84@x) (nV3f6b@regen (caddr nV3f84@x))) (if (memv nV3f86@t '(map)) (let ((nV3f88@ls (map nV3f6b@regen (cdr nV3f84@x)))) (cons '(primitive ellipsis-map) nV3f88@ls)) (cons (list 'primitive (car nV3f84@x)) (map nV3f6b@regen (cdr nV3f84@x))))))))))) (lambda (nV3f6c@e nV3f6d@r nV3f6e@mr) (let ((nV3f72@t nV3f6c@e)) (let ((nV3f74@ls/false (nV30f1@syntax-dispatch nV3f72@t '(_ any)))) (if nV3f74@ls/false (apply (lambda (nV3f76@x) (call-with-values (lambda () (nV3f5d@gen-syntax nV3f6c@e nV3f76@x nV3f6d@r '() nV30f3@ellipsis? '#f)) (lambda (nV3f7c@nV3f79 nV3f7d@nV3f7b) (let ((nV3f80@maps nV3f7d@nV3f7b) (nV3f81@e nV3f7c@nV3f79)) (nV3f6b@regen nV3f81@e))))) nV3f74@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV3f72@t)))))))) (set! nV4bcd@nV30fd@syntax-transformer nV30fd@syntax-transformer) (set! nV30ff@core-macro-transformer (lambda (nV40a4@name) (let ((nV40a6@t nV40a4@name)) (if (memv nV40a6@t '(quote)) nV30a1@quote-transformer (if (memv nV40a6@t '(lambda)) nV30a5@lambda-transformer (if (memv nV40a6@t '(case-lambda)) nV30a3@case-lambda-transformer (if (memv nV40a6@t '(letrec)) nV3089@letrec-transformer (if (memv nV40a6@t '(letrec*)) nV308b@letrec*-transformer (if (memv nV40a6@t '(let)) nV3087@let-transformer (if (memv nV40a6@t '(if)) nV3099@if-transformer (if (memv nV40a6@t '(and)) nV309b@and-transformer (if (memv nV40a6@t '(or)) nV309d@or-transformer (if (memv nV40a6@t '(foreign-call)) nV30ed@foreign-call-transformer (if (memv nV40a6@t '(syntax-case)) nV30f9@syntax-case-transformer (if (memv nV40a6@t '(syntax)) nV30fd@syntax-transformer (if (memv nV40a6@t '(type-descriptor)) nV308f@type-descriptor-transformer (if (memv nV40a6@t '(record-type-descriptor)) nV3091@record-type-descriptor-transformer (if (memv nV40a6@t '(record-constructor-descriptor)) nV3093@record-constructor-descriptor-transformer (if (memv nV40a6@t '(fluid-let-syntax)) nV308d@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" nV40a4@name)))))))))))))))))))) (set! nV4bce@nV30ff@core-macro-transformer nV30ff@core-macro-transformer) (set! nV3101@symbol-macro (lambda (nV40a8@x nV40a9@set) (let ((nV40ac@t nV40a8@x)) (let ((nV40ae@ls/false (nV30f1@syntax-dispatch nV40ac@t '(_ any)))) (if (and nV40ae@ls/false (apply (lambda (nV40b0@name) (and (nV2eea@id? nV40b0@name) (memq (nV2eec@id->sym nV40b0@name) nV40a9@set))) nV40ae@ls/false)) (apply (lambda (nV40b2@name) (nV30a7@bless (list 'quote nV40b2@name))) nV40ae@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV40ac@t)))))) (set! nV4bcf@nV3101@symbol-macro nV3101@symbol-macro) (set! nV3103@macro-transformer (lambda (nV40b4@x) (if (procedure? nV40b4@x) nV40b4@x (if (symbol? nV40b4@x) (let ((nV40b6@t nV40b4@x)) (if (memv nV40b6@t '(define-record-type)) nV30e5@define-record-type-macro (if (memv nV40b6@t '(define-struct)) nV30e3@define-struct-macro (if (memv nV40b6@t '(include)) nV30d9@include-macro (if (memv nV40b6@t '(cond)) nV30d5@cond-macro (if (memv nV40b6@t '(let)) nV30ad@let-macro (if (memv nV40b6@t '(do)) nV30cd@do-macro (if (memv nV40b6@t '(or)) nV30d1@or-macro (if (memv nV40b6@t '(and)) nV30d3@and-macro (if (memv nV40b6@t '(let*)) nV30cf@let*-macro (if (memv nV40b6@t '(let-values)) nV30af@let-values-macro (if (memv nV40b6@t '(let*-values)) nV30b1@let*-values-macro (if (memv nV40b6@t '(syntax-rules)) nV30dd@syntax-rules-macro (if (memv nV40b6@t '(quasiquote)) nV30df@quasiquote-macro (if (memv nV40b6@t '(quasisyntax)) nV30e1@quasisyntax-macro (if (memv nV40b6@t '(with-syntax)) nV30a9@with-syntax-macro (if (memv nV40b6@t '(when)) nV3095@when-macro (if (memv nV40b6@t '(unless)) nV3097@unless-macro (if (memv nV40b6@t '(case)) nV309f@case-macro (if (memv nV40b6@t '(identifier-syntax)) nV30cb@identifier-syntax-macro (if (memv nV40b6@t '(time)) nV30c3@time-macro (if (memv nV40b6@t '(delay)) nV30c5@delay-macro (if (memv nV40b6@t '(assert)) nV30c7@assert-macro (if (memv nV40b6@t '(endianness)) nV30c9@endianness-macro (if (memv nV40b6@t '(guard)) nV30bf@guard-macro (if (memv nV40b6@t '(define-enumeration)) nV30c1@define-enumeration-macro (if (memv nV40b6@t '(trace-lambda)) nV30b3@trace-lambda-macro (if (memv nV40b6@t '(trace-define)) nV30b5@trace-define-macro (if (memv nV40b6@t '(trace-define-syntax)) nV30b7@trace-define-syntax-macro (if (memv nV40b6@t '(trace-let-syntax)) nV30bb@trace-let-syntax-macro (if (memv nV40b6@t '(trace-letrec-syntax)) nV30bd@trace-letrec-syntax-macro (if (memv nV40b6@t '(define-condition-type)) nV30e7@define-condition-type-macro (if (memv nV40b6@t '(parameterize)) nV30eb@parameterize-macro (if (memv nV40b6@t '(include-into)) nV30db@include-into-macro (if (memv nV40b6@t '(eol-style)) (lambda (nV40b8@x) (nV3101@symbol-macro nV40b8@x '(none lf cr crlf nel crnel ls))) (if (memv nV40b6@t '(error-handling-mode)) (lambda (nV40ba@x) (nV3101@symbol-macro nV40ba@x '(ignore raise replace))) (if (memv nV40b6@t '(buffer-mode)) (lambda (nV40bc@x) (nV3101@symbol-macro nV40bc@x '(none line block))) (if (memv nV40b6@t '(file-options)) nV2e65@file-options-macro (if (memv nV40b6@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) nV30e9@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" nV40b4@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" nV40b4@x))))) (set! nV4bd0@nV3103@macro-transformer nV3103@macro-transformer) (set! nV3105@local-macro-transformer (lambda (nV40be@x) (car nV40be@x))) (set! nV4bd1@nV3105@local-macro-transformer nV3105@local-macro-transformer) (set! nV3107@do-macro-call (lambda (nV40c0@transformer nV40c1@expr) (let ((nV40c4@out (nV40c0@transformer (nV2ed4@add-mark nV2ece@anti-mark nV40c1@expr '#f)))) (begin (let nV40c8@f ((nV40c6@x nV40c4@out)) (if (not (nV2eb6@stx? nV40c6@x)) (if (pair? nV40c6@x) (begin (nV40c8@f (car nV40c6@x)) (nV40c8@f (cdr nV40c6@x))) (if (vector? nV40c6@x) (vector-for-each nV40c8@f nV40c6@x) (if (symbol? nV40c6@x) (nV31d1@syntax-violation '#f '"raw symbol encountered in output of macro" nV40c1@expr nV40c6@x) (void)))) (void))) (nV2ed4@add-mark (nV2ecc@gen-mark) nV40c4@out nV40c1@expr))))) (set! nV4bd2@nV3107@do-macro-call nV3107@do-macro-call) (set! nV3109@chi-macro (lambda (nV40ca@p nV40cb@e) (nV3107@do-macro-call (nV3103@macro-transformer nV40ca@p) nV40cb@e))) (set! nV4bd3@nV3109@chi-macro nV3109@chi-macro) (set! nV310b@chi-local-macro (lambda (nV40ce@p nV40cf@e) (nV3107@do-macro-call (nV3105@local-macro-transformer nV40ce@p) nV40cf@e))) (set! nV4bd4@nV310b@chi-local-macro nV310b@chi-local-macro) (set! nV310d@chi-global-macro (lambda (nV40d2@p nV40d3@e) (let ((nV40d6@lib (car nV40d2@p)) (nV40d7@loc (cdr nV40d2@p))) (begin (nV2d00@nV2b3f@visit-library nV40d6@lib) (let ((nV40da@x (symbol-value nV40d7@loc))) (let ((nV40dc@transformer (if (procedure? nV40da@x) nV40da@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" nV40da@x)))) (nV3107@do-macro-call nV40dc@transformer nV40d3@e))))))) (set! nV4bd5@nV310d@chi-global-macro nV310d@chi-global-macro) (set! nV310f@chi-expr* (lambda (nV40de@e* nV40df@r nV40e0@mr) (if (null? nV40de@e*) '() (let ((nV40e4@e (nV3113@chi-expr (car nV40de@e*) nV40df@r nV40e0@mr))) (cons nV40e4@e (nV310f@chi-expr* (cdr nV40de@e*) nV40df@r nV40e0@mr)))))) (set! nV4bd6@nV310f@chi-expr* nV310f@chi-expr*) (set! nV3111@chi-application (lambda (nV40e6@e nV40e7@r nV40e8@mr) (let ((nV40ec@t nV40e6@e)) (let ((nV40ee@ls/false (nV30f1@syntax-dispatch nV40ec@t '(any . each-any)))) (if nV40ee@ls/false (apply (lambda (nV40f0@rator nV40f1@rands) (let ((nV40f4@rator (nV3113@chi-expr nV40f0@rator nV40e7@r nV40e8@mr))) (cons nV40f4@rator (nV310f@chi-expr* nV40f1@rands nV40e7@r nV40e8@mr)))) nV40ee@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV40ec@t)))))) (set! nV4bd7@nV3111@chi-application nV3111@chi-application) (set! nV3113@chi-expr (lambda (nV40f6@e nV40f7@r nV40f8@mr) (call-with-values (lambda () (nV2f0c@syntax-type nV40f6@e nV40f7@r)) (lambda (nV4102@nV40fd nV4103@nV40ff nV4104@nV4101) (let ((nV4108@kwd nV4104@nV4101) (nV4109@value nV4103@nV40ff) (nV410a@type nV4102@nV40fd)) (let ((nV410e@t nV410a@type)) (if (memv nV410e@t '(core-macro)) (let ((nV4110@transformer (nV30ff@core-macro-transformer nV4109@value))) (nV4110@transformer nV40f6@e nV40f7@r nV40f8@mr)) (if (memv nV410e@t '(global)) (let ((nV4112@lib (car nV4109@value))) (let ((nV4114@loc (cdr nV4109@value))) (begin ((nV3159@inv-collector) nV4112@lib) nV4114@loc))) (if (memv nV410e@t '(core-prim)) (let ((nV4116@name nV4109@value)) (list 'primitive nV4116@name)) (if (memv nV410e@t '(call)) (nV3111@chi-application nV40f6@e nV40f7@r nV40f8@mr) (if (memv nV410e@t '(lexical)) (let ((nV4118@lex (nV307b@lexical-var nV4109@value))) nV4118@lex) (if (memv nV410e@t '(global-macro global-macro!)) (nV3113@chi-expr (nV310d@chi-global-macro nV4109@value nV40f6@e) nV40f7@r nV40f8@mr) (if (memv nV410e@t '(local-macro local-macro!)) (nV3113@chi-expr (nV310b@chi-local-macro nV4109@value nV40f6@e) nV40f7@r nV40f8@mr) (if (memv nV410e@t '(macro macro!)) (nV3113@chi-expr (nV3109@chi-macro nV4109@value nV40f6@e) nV40f7@r nV40f8@mr) (if (memv nV410e@t '(constant)) (let ((nV411a@datum nV4109@value)) (list 'quote nV411a@datum)) (if (memv nV410e@t '(set!)) (nV3115@chi-set! nV40f6@e nV40f7@r nV40f8@mr) (if (memv nV410e@t '(begin)) (let ((nV411c@t nV40f6@e)) (let ((nV411e@ls/false (nV30f1@syntax-dispatch nV411c@t '(_ any . each-any)))) (if nV411e@ls/false (apply (lambda (nV4120@x nV4121@x*) (nV2e4f@nV2da9@build-sequence '#f (nV310f@chi-expr* (cons nV4120@x nV4121@x*) nV40f7@r nV40f8@mr))) nV411e@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV411c@t)))) (if (memv nV410e@t '(let-syntax letrec-syntax)) (let ((nV4124@t nV40f6@e)) (let ((nV4126@ls/false (nV30f1@syntax-dispatch nV4124@t '(_ #(each (any any)) any . each-any)))) (if (and nV4126@ls/false (apply (lambda (nV4128@xlhs* nV4129@xrhs* nV412a@xbody nV412b@xbody*) (if (not (nV2ef2@valid-bound-ids? nV4128@xlhs*)) (nV31d1@syntax-violation '#f '"invalid identifiers" nV40f6@e) (void))) nV4126@ls/false)) (apply (lambda (nV4130@xlhs* nV4131@xrhs* nV4132@xbody nV4133@xbody*) (let ((nV4138@xlab* (map nV2e76@gen-label nV4130@xlhs*))) (let ((nV413a@xrib (nV2eaa@make-full-rib nV4130@xlhs* nV4138@xlab*))) (let ((nV413c@xb* (map (lambda (nV413e@x) (nV2f22@make-eval-transformer (nV314b@expand-transformer (if (eq? nV410a@type 'let-syntax) nV413e@x (nV2ed6@add-subst nV413a@xrib nV413e@x)) nV40f8@mr))) nV4131@xrhs*))) (nV2e4f@nV2da9@build-sequence '#f (nV310f@chi-expr* (map (lambda (nV4140@x) (nV2ed6@add-subst nV413a@xrib nV4140@x)) (cons nV4132@xbody nV4133@xbody*)) (append (map cons nV4138@xlab* nV413c@xb*) nV40f7@r) (append (map cons nV4138@xlab* nV413c@xb*) nV40f8@mr))))))) nV4126@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV4124@t)))) (if (memv nV410e@t '(displaced-lexical)) (nV31d1@syntax-violation '#f '"identifier out of context" nV40f6@e) (if (memv nV410e@t '(syntax)) (nV31d1@syntax-violation '#f '"reference to pattern variable outside a syntax form" nV40f6@e) (if (memv nV410e@t '(define define-syntax module import library)) (nV31d1@syntax-violation '#f (string-append (let ((nV4142@t nV410a@type)) (if (memv nV4142@t '(define)) '"a definition" (if (memv nV4142@t '(define-syntax)) '"a define-syntax" (if (memv nV4142@t '(module)) '"a module definition" (if (memv nV4142@t '(library)) '"a library definition" (if (memv nV4142@t '(import)) '"an import declaration" (if (memv nV4142@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") nV40f6@e) (if (memv nV410e@t '(mutable)) (nV31d1@syntax-violation '#f '"attempt to reference an unexportable variable" nV40f6@e) (nV31d1@syntax-violation '#f '"invalid expression" nV40f6@e))))))))))))))))))))))) (set! nV4bd8@nV3113@chi-expr nV3113@chi-expr) (set! nV3115@chi-set! (lambda (nV4144@e nV4145@r nV4146@mr) (let ((nV414a@t nV4144@e)) (let ((nV414c@ls/false (nV30f1@syntax-dispatch nV414a@t '(_ any any)))) (if (and nV414c@ls/false (apply (lambda (nV414e@x nV414f@v) (nV2eea@id? nV414e@x)) nV414c@ls/false)) (apply (lambda (nV4152@x nV4153@v) (call-with-values (lambda () (nV2f0c@syntax-type nV4152@x nV4145@r)) (lambda (nV415c@nV4157 nV415d@nV4159 nV415e@nV415b) (let ((nV4162@kwd nV415e@nV415b) (nV4163@value nV415d@nV4159) (nV4164@type nV415c@nV4157)) (let ((nV4168@t nV4164@type)) (if (memv nV4168@t '(lexical)) (begin (nV307f@set-lexical-mutable! nV4163@value '#t) (list 'set! (nV307b@lexical-var nV4163@value) (nV3113@chi-expr nV4153@v nV4145@r nV4146@mr))) (if (memv nV4168@t '(core-prim)) (nV31d1@syntax-violation '#f '"cannot modify imported core primitive" nV4144@e) (if (memv nV4168@t '(global)) (nV31d1@syntax-violation '#f '"attempt to modify imported binding" nV4144@e) (if (memv nV4168@t '(global-macro!)) (nV3113@chi-expr (nV310d@chi-global-macro nV4163@value nV4144@e) nV4145@r nV4146@mr) (if (memv nV4168@t '(local-macro!)) (nV3113@chi-expr (nV310b@chi-local-macro nV4163@value nV4144@e) nV4145@r nV4146@mr) (if (memv nV4168@t '(mutable)) (nV31d1@syntax-violation '#f '"attempt to assign to an unexportable variable" nV4144@e) (nV31d1@syntax-violation '#f '"invalid syntax" nV4144@e)))))))))))) nV414c@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV414a@t)))))) (set! nV4bd9@nV3115@chi-set! nV3115@chi-set!) (set! nV3117@verify-formals (lambda (nV416a@fmls nV416b@stx) (let ((nV416e@t nV416a@fmls)) (let ((nV4170@ls/false (nV30f1@syntax-dispatch nV416e@t 'each-any))) (if nV4170@ls/false (apply (lambda (nV4172@x*) (if (not (nV2ef2@valid-bound-ids? nV4172@x*)) (nV30ab@invalid-fmls-error nV416b@stx nV416a@fmls) (void))) nV4170@ls/false) (let ((nV4174@t nV416e@t)) (let ((nV4176@ls/false (nV30f1@syntax-dispatch nV4174@t '#(each+ any () any)))) (if nV4176@ls/false (apply (lambda (nV4178@x* nV4179@x) (if (not (nV2ef2@valid-bound-ids? (cons nV4179@x nV4178@x*))) (nV30ab@invalid-fmls-error nV416b@stx nV416a@fmls) (void))) nV4176@ls/false) (let ((nV417c@t nV4174@t)) (let ((nV417e@ls/false (nV30f1@syntax-dispatch nV417c@t '_))) (if nV417e@ls/false (apply (lambda () (nV31d1@syntax-violation '#f '"invalid syntax" nV416b@stx)) nV417e@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV417c@t)))))))))))) (set! nV4bda@nV3117@verify-formals nV3117@verify-formals) (set! nV3119@chi-lambda-clause (lambda (nV4180@stx nV4181@fmls nV4182@body* nV4183@r nV4184@mr) (let ((nV418a@t nV4181@fmls)) (let ((nV418c@ls/false (nV30f1@syntax-dispatch nV418a@t 'each-any))) (if nV418c@ls/false (apply (lambda (nV418e@x*) (begin (nV3117@verify-formals nV4181@fmls nV4180@stx) (let ((nV4190@lex* (map nV2e72@gen-lexical nV418e@x*)) (nV4191@lab* (map nV2e76@gen-label nV418e@x*))) (values nV4190@lex* (nV3129@chi-internal (nV2ed6@add-subst (nV2eaa@make-full-rib nV418e@x* nV4191@lab*) nV4182@body*) (nV3083@add-lexicals nV4191@lab* nV4190@lex* nV4183@r) nV4184@mr))))) nV418c@ls/false) (let ((nV4194@t nV418a@t)) (let ((nV4196@ls/false (nV30f1@syntax-dispatch nV4194@t '#(each+ any () any)))) (if nV4196@ls/false (apply (lambda (nV4198@x* nV4199@x) (begin (nV3117@verify-formals nV4181@fmls nV4180@stx) (let ((nV419c@lex* (map nV2e72@gen-lexical nV4198@x*)) (nV419d@lab* (map nV2e76@gen-label nV4198@x*)) (nV419e@lex (nV2e72@gen-lexical nV4199@x)) (nV419f@lab (nV2e76@gen-label nV4199@x))) (values (append nV419c@lex* nV419e@lex) (nV3129@chi-internal (nV2ed6@add-subst (nV2eaa@make-full-rib (cons nV4199@x nV4198@x*) (cons nV419f@lab nV419d@lab*)) nV4182@body*) (nV3083@add-lexicals (cons nV419f@lab nV419d@lab*) (cons nV419e@lex nV419c@lex*) nV4183@r) nV4184@mr))))) nV4196@ls/false) (let ((nV41a4@t nV4194@t)) (let ((nV41a6@ls/false (nV30f1@syntax-dispatch nV41a4@t '_))) (if nV41a6@ls/false (apply (lambda () (nV31d1@syntax-violation '#f '"invalid syntax" nV4181@fmls)) nV41a6@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV41a4@t)))))))))))) (set! nV4bdb@nV3119@chi-lambda-clause nV3119@chi-lambda-clause) (set! nV311b@chi-lambda-clause* (lambda (nV41a8@stx nV41a9@fmls* nV41aa@body** nV41ab@r nV41ac@mr) (if (null? nV41a9@fmls*) (values '() '()) (call-with-values (lambda () (nV3119@chi-lambda-clause nV41a8@stx (car nV41a9@fmls*) (car nV41aa@body**) nV41ab@r nV41ac@mr)) (lambda (nV41b6@nV41b3 nV41b7@nV41b5) (let ((nV41ba@b nV41b7@nV41b5) (nV41bb@a nV41b6@nV41b3)) (call-with-values (lambda () (nV311b@chi-lambda-clause* nV41a8@stx (cdr nV41a9@fmls*) (cdr nV41aa@body**) nV41ab@r nV41ac@mr)) (lambda (nV41c2@nV41bf nV41c3@nV41c1) (let ((nV41c6@b* nV41c3@nV41c1) (nV41c7@a* nV41c2@nV41bf)) (values (cons nV41bb@a nV41c7@a*) (cons nV41ba@b nV41c6@b*))))))))))) (set! nV4bdc@nV311b@chi-lambda-clause* nV311b@chi-lambda-clause*) (set! nV311d@chi-defun (lambda (nV41ca@x nV41cb@r nV41cc@mr) (let ((nV41d0@fmls (car nV41ca@x)) (nV41d1@body* (cdr nV41ca@x))) (call-with-values (lambda () (nV3119@chi-lambda-clause nV41d0@fmls nV41d0@fmls nV41d1@body* nV41cb@r nV41cc@mr)) (lambda (nV41d8@nV41d5 nV41d9@nV41d7) (let ((nV41dc@body nV41d9@nV41d7) (nV41dd@fmls nV41d8@nV41d5)) (nV2e4d@nV2d79@build-lambda '#f nV41dd@fmls nV41dc@body))))))) (set! nV4bdd@nV311d@chi-defun nV311d@chi-defun) (set! nV311f@chi-rhs (lambda (nV41e0@rhs nV41e1@r nV41e2@mr) (let ((nV41e6@t (car nV41e0@rhs))) (if (memv nV41e6@t '(defun)) (nV311d@chi-defun (cdr nV41e0@rhs) nV41e1@r nV41e2@mr) (if (memv nV41e6@t '(expr)) (let ((nV41e8@expr (cdr nV41e0@rhs))) (nV3113@chi-expr nV41e8@expr nV41e1@r nV41e2@mr)) (if (memv nV41e6@t '(top-expr)) (let ((nV41ea@expr (cdr nV41e0@rhs))) (nV2e4f@nV2da9@build-sequence '#f (list (nV3113@chi-expr nV41ea@expr nV41e1@r nV41e2@mr) (nV2e50@nV2dab@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" nV41e0@rhs))))))) (set! nV4bde@nV311f@chi-rhs nV311f@chi-rhs) (set! nV3121@expand-interaction-rhs*/init* (lambda (nV41ec@lhs* nV41ed@rhs* nV41ee@init* nV41ef@r nV41f0@mr) (let nV41fa@f ((nV41f6@lhs* nV41ec@lhs*) (nV41f7@rhs* nV41ed@rhs*)) (if (null? nV41f6@lhs*) (map (lambda (nV41fc@x) (nV3113@chi-expr nV41fc@x nV41ef@r nV41f0@mr)) nV41ee@init*) (let ((nV41fe@lhs (car nV41f6@lhs*)) (nV41ff@rhs (car nV41f7@rhs*))) (let ((nV4202@t (car nV41ff@rhs))) (if (memv nV4202@t '(defun)) (let ((nV4204@rhs (nV311d@chi-defun (cdr nV41ff@rhs) nV41ef@r nV41f0@mr))) (cons (list 'set! nV41fe@lhs nV4204@rhs) (nV41fa@f (cdr nV41f6@lhs*) (cdr nV41f7@rhs*)))) (if (memv nV4202@t '(expr)) (let ((nV4206@rhs (nV3113@chi-expr (cdr nV41ff@rhs) nV41ef@r nV41f0@mr))) (cons (list 'set! nV41fe@lhs nV4206@rhs) (nV41fa@f (cdr nV41f6@lhs*) (cdr nV41f7@rhs*)))) (if (memv nV4202@t '(top-expr)) (let ((nV4208@e (nV3113@chi-expr (cdr nV41ff@rhs) nV41ef@r nV41f0@mr))) (cons nV4208@e (nV41fa@f (cdr nV41f6@lhs*) (cdr nV41f7@rhs*)))) (error 'expand-interaction '"invallid" nV41ff@rhs)))))))))) (set! nV4bdf@nV3121@expand-interaction-rhs*/init* nV3121@expand-interaction-rhs*/init*) (set! nV3123@chi-rhs* (lambda (nV420a@rhs* nV420b@r nV420c@mr) (let nV4212@f ((nV4210@ls nV420a@rhs*)) (if (null? nV4210@ls) '() (let ((nV4214@a (nV311f@chi-rhs (car nV4210@ls) nV420b@r nV420c@mr))) (cons nV4214@a (nV4212@f (cdr nV4210@ls)))))))) (set! nV4be0@nV3123@chi-rhs* nV3123@chi-rhs*) (set! nV3125@find-bound=? (lambda (nV4216@x nV4217@lhs* nV4218@rhs*) (if (null? nV4217@lhs*) '#f (if (nV2eee@bound-id=? nV4216@x (car nV4217@lhs*)) (car nV4218@rhs*) (nV3125@find-bound=? nV4216@x (cdr nV4217@lhs*) (cdr nV4218@rhs*)))))) (set! nV4be1@nV3125@find-bound=? nV3125@find-bound=?) (set! nV3127@find-dups (lambda (nV421c@ls) (let nV4222@f ((nV421e@ls nV421c@ls) (nV421f@dups '())) (if (null? nV421e@ls) nV421f@dups (let ((nV4224@t (nV3125@find-bound=? (car nV421e@ls) (cdr nV421e@ls) (cdr nV421e@ls)))) (if nV4224@t ((lambda (nV4226@x) (nV4222@f (cdr nV421e@ls) (cons (list (car nV421e@ls) nV4226@x) nV421f@dups))) nV4224@t) (nV4222@f (cdr nV421e@ls) nV421f@dups))))))) (set! nV4be2@nV3127@find-dups nV3127@find-dups) (set! nV3129@chi-internal (lambda (nV4228@e* nV4229@r nV422a@mr) (let ((nV422e@rib (nV2e9e@make-empty-rib))) (call-with-values (lambda () (nV3149@chi-body* (map (lambda (nV4240@x) (nV2ed6@add-subst nV422e@rib nV4240@x)) (nV2ee8@syntax->list nV4228@e*)) nV4229@r nV422a@mr '() '() '() '() '() nV422e@rib '#f)) (lambda (nV4242@nV4231 nV4243@nV4233 nV4244@nV4235 nV4245@nV4237 nV4246@nV4239 nV4247@nV423b nV4248@nV423d nV4249@nV423f) (let ((nV4252@_exp* nV4249@nV423f) (nV4253@kwd* nV4248@nV423d) (nV4254@mod** nV4247@nV423b) (nV4255@rhs* nV4246@nV4239) (nV4256@lex* nV4245@nV4237) (nV4257@mr nV4244@nV4235) (nV4258@r nV4243@nV4233) (nV4259@e* nV4242@nV4231)) (begin (if (null? nV4259@e*) (nV31d1@syntax-violation '#f '"no expression in body" nV4259@e*) (void)) (let ((nV4262@init* (nV310f@chi-expr* (append (apply append (reverse nV4254@mod**)) nV4259@e*) nV4258@r nV4257@mr))) (let ((nV4264@rhs* (nV3123@chi-rhs* nV4255@rhs* nV4258@r nV4257@mr))) (nV2e54@nV2db3@build-letrec* '#f (reverse nV4256@lex*) (reverse nV4264@rhs*) (nV2e4f@nV2da9@build-sequence '#f nV4262@init*))))))))))) (set! nV4be3@nV3129@chi-internal nV3129@chi-internal) (set! nV312b@parse-module (lambda (nV4266@e) (let ((nV4268@t nV4266@e)) (let ((nV426a@ls/false (nV30f1@syntax-dispatch nV4268@t '(_ each-any . each-any)))) (if nV426a@ls/false (apply (lambda (nV426c@export* nV426d@b*) (begin (if (not (for-all nV2eea@id? nV426c@export*)) (nV31d1@syntax-violation '#f '"module exports must be identifiers" nV4266@e) (void)) (values '#f (list->vector nV426c@export*) nV426d@b*))) nV426a@ls/false) (let ((nV4270@t nV4268@t)) (let ((nV4272@ls/false (nV30f1@syntax-dispatch nV4270@t '(_ any each-any . each-any)))) (if nV4272@ls/false (apply (lambda (nV4274@name nV4275@export* nV4276@b*) (begin (if (not (nV2eea@id? nV4274@name)) (nV31d1@syntax-violation '#f '"module name must be an identifier" nV4266@e) (void)) (if (not (for-all nV2eea@id? nV4275@export*)) (nV31d1@syntax-violation '#f '"module exports must be identifiers" nV4266@e) (void)) (values nV4274@name (list->vector nV4275@export*) nV4276@b*))) nV4272@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV4270@t))))))))) (set! nV4be4@nV312b@parse-module nV312b@parse-module) (set! nV3135@module-interface? (lambda (nV427a@x) (and (simple-struct? nV427a@x) (eq? (simple-struct-name nV427a@x) 'module-interface)))) (set! nV4be5@nV3135@module-interface? nV3135@module-interface?) (set! nV3137@module-interface-first-mark (lambda (nV427c@x) (simple-struct-ref nV427c@x '0))) (set! nV4be6@nV3137@module-interface-first-mark nV3137@module-interface-first-mark) (set! nV3139@set-module-interface-first-mark! (lambda (nV427e@x nV427f@val) (simple-struct-set! nV427e@x '0 nV427f@val))) (set! nV4be7@nV3139@set-module-interface-first-mark! nV3139@set-module-interface-first-mark!) (set! nV313b@module-interface-exp-id-vec (lambda (nV4282@x) (simple-struct-ref nV4282@x '1))) (set! nV4be8@nV313b@module-interface-exp-id-vec nV313b@module-interface-exp-id-vec) (set! nV313d@set-module-interface-exp-id-vec! (lambda (nV4284@x nV4285@val) (simple-struct-set! nV4284@x '1 nV4285@val))) (set! nV4be9@nV313d@set-module-interface-exp-id-vec! nV313d@set-module-interface-exp-id-vec!) (set! nV313f@module-interface-exp-lab-vec (lambda (nV4288@x) (simple-struct-ref nV4288@x '2))) (set! nV4bea@nV313f@module-interface-exp-lab-vec nV313f@module-interface-exp-lab-vec) (set! nV3141@set-module-interface-exp-lab-vec! (lambda (nV428a@x nV428b@val) (simple-struct-set! nV428a@x '2 nV428b@val))) (set! nV4beb@nV3141@set-module-interface-exp-lab-vec! nV3141@set-module-interface-exp-lab-vec!) (set! nV3143@dummy '3) (set! nV4bec@nV3143@dummy nV3143@dummy) (set! nV3145@module-interface-exp-id* (lambda (nV428e@iface nV428f@id) (let ((nV4293@diff-marks '#f)) (begin (set! nV4293@diff-marks (lambda (nV429a@ls nV429b@x) (begin (if (null? nV429a@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((nV429e@a (car nV429a@ls))) (if (eq? nV429e@a nV429b@x) '() (cons nV429e@a (nV4293@diff-marks (cdr nV429a@ls) nV429b@x))))))) (let ((nV4294@diff (nV4293@diff-marks (nV2ebc@stx-mark* nV428f@id) (nV3137@module-interface-first-mark nV428e@iface))) (nV4295@id-vec (nV313b@module-interface-exp-id-vec nV428e@iface))) (if (null? nV4294@diff) nV4295@id-vec (vector-map (lambda (nV4298@x) (make-simple-struct 'stx '5 (list (nV2eb8@stx-expr nV4298@x) (append nV4294@diff (nV2ebc@stx-mark* nV4298@x)) '() '()))) nV4295@id-vec))))))) (set! nV4bed@nV3145@module-interface-exp-id* nV3145@module-interface-exp-id*) (set! nV3147@chi-internal-module (lambda (nV42a0@e nV42a1@r nV42a2@mr nV42a3@lex* nV42a4@rhs* nV42a5@mod** nV42a6@kwd*) (call-with-values (lambda () (nV312b@parse-module nV42a0@e)) (lambda (nV42b4@nV42af nV42b5@nV42b1 nV42b6@nV42b3) (let ((nV42ba@e* nV42b6@nV42b3) (nV42bb@exp-id* nV42b5@nV42b1) (nV42bc@name nV42b4@nV42af)) (let ((nV42c0@rib (nV2e9e@make-empty-rib))) (let ((nV42c2@e* (map (lambda (nV42c4@x) (nV2ed6@add-subst nV42c0@rib nV42c4@x)) (nV2ee8@syntax->list nV42ba@e*)))) (call-with-values (lambda () (nV3149@chi-body* nV42c2@e* nV42a1@r nV42a2@mr nV42a3@lex* nV42a4@rhs* nV42a5@mod** nV42a6@kwd* '() nV42c0@rib '#f)) (lambda (nV42d6@nV42c7 nV42d7@nV42c9 nV42d8@nV42cb nV42d9@nV42cd nV42da@nV42cf nV42db@nV42d1 nV42dc@nV42d3 nV42dd@nV42d5) (let ((nV42e6@_exp* nV42dd@nV42d5) (nV42e7@kwd* nV42dc@nV42d3) (nV42e8@mod** nV42db@nV42d1) (nV42e9@rhs* nV42da@nV42cf) (nV42ea@lex* nV42d9@nV42cd) (nV42eb@mr nV42d8@nV42cb) (nV42ec@r nV42d7@nV42c9) (nV42ed@e* nV42d6@nV42c7)) (let ((nV42f6@exp-lab* (vector-map (lambda (nV42fa@x) (or (nV2f00@id->label (make-simple-struct 'stx '5 (list (nV2eec@id->sym nV42fa@x) (nV2ebc@stx-mark* nV42fa@x) (list nV42c0@rib) '()))) (nV31d1@syntax-violation '#f '"cannot find module export" nV42fa@x))) nV42bb@exp-id*)) (nV42f7@mod** (cons nV42ed@e* nV42e8@mod**))) (if (not nV42bc@name) (values nV42ea@lex* nV42e9@rhs* nV42bb@exp-id* nV42f6@exp-lab* nV42ec@r nV42eb@mr nV42f7@mod** nV42e7@kwd*) (let ((nV42fc@lab (nV2e76@gen-label 'module)) (nV42fd@iface (make-simple-struct 'module-interface '4 (list (car (nV2ebc@stx-mark* nV42bc@name)) (vector-map (lambda (nV4300@x) (make-simple-struct 'stx '5 (list (nV2eb8@stx-expr nV4300@x) (nV2ebc@stx-mark* nV4300@x) '() '()))) nV42bb@exp-id*) nV42f6@exp-lab*)))) (values nV42ea@lex* nV42e9@rhs* (vector nV42bc@name) (vector nV42fc@lab) (cons (cons nV42fc@lab (cons '$module nV42fd@iface)) nV42ec@r) (cons (cons nV42fc@lab (cons '$module nV42fd@iface)) nV42eb@mr) nV42f7@mod** nV42e7@kwd*)))))))))))))) (set! nV4bee@nV3147@chi-internal-module nV3147@chi-internal-module) (set! nV3149@chi-body* (lambda (nV4302@e* nV4303@r nV4304@mr nV4305@lex* nV4306@rhs* nV4307@mod** nV4308@kwd* nV4309@exp* nV430a@rib nV430b@top?) (if (null? nV4302@e*) (values nV4302@e* nV4303@r nV4304@mr nV4305@lex* nV4306@rhs* nV4307@mod** nV4308@kwd* nV4309@exp*) (let ((nV4316@e (car nV4302@e*))) (call-with-values (lambda () (nV2f0c@syntax-type nV4316@e nV4303@r)) (lambda (nV431e@nV4319 nV431f@nV431b nV4320@nV431d) (let ((nV4324@kwd nV4320@nV431d) (nV4325@value nV431f@nV431b) (nV4326@type nV431e@nV4319)) (let ((nV432a@kwd* (if (nV2eea@id? nV4324@kwd) (cons nV4324@kwd nV4308@kwd*) nV4308@kwd*))) (let ((nV432c@t nV4326@type)) (if (memv nV432c@t '(define)) (call-with-values (lambda () (nV3073@parse-define nV4316@e)) (lambda (nV4332@nV432f nV4333@nV4331) (let ((nV4336@rhs nV4333@nV4331) (nV4337@id nV4332@nV432f)) (begin (if (nV2ef6@bound-id-member? nV4337@id nV432a@kwd*) (nV31d1@syntax-violation '#f '"cannot redefine keyword" nV4316@e) (void)) (call-with-values (lambda () (nV2e7a@gen-define-label+loc nV4337@id nV430a@rib)) (lambda (nV433e@nV433b nV433f@nV433d) (let ((nV4342@lex nV433f@nV433d) (nV4343@lab nV433e@nV433b)) (begin (nV2ea0@extend-rib! nV430a@rib nV4337@id nV4343@lab) (nV3149@chi-body* (cdr nV4302@e*) (nV3081@add-lexical nV4343@lab nV4342@lex nV4303@r) nV4304@mr (cons nV4342@lex nV4305@lex*) (cons nV4336@rhs nV4306@rhs*) nV4307@mod** nV432a@kwd* nV4309@exp* nV430a@rib nV430b@top?))))))))) (if (memv nV432c@t '(define-syntax)) (call-with-values (lambda () (nV3075@parse-define-syntax nV4316@e)) (lambda (nV434a@nV4347 nV434b@nV4349) (let ((nV434e@rhs nV434b@nV4349) (nV434f@id nV434a@nV4347)) (begin (if (nV2ef6@bound-id-member? nV434f@id nV432a@kwd*) (nV31d1@syntax-violation '#f '"cannot redefine keyword" nV4316@e) (void)) (let ((nV4352@lab (nV2e7c@gen-define-label nV434f@id nV430a@rib)) (nV4353@expanded-rhs (nV314b@expand-transformer nV434e@rhs nV4304@mr))) (begin (nV2ea0@extend-rib! nV430a@rib nV434f@id nV4352@lab) (let ((nV4356@b (nV2f22@make-eval-transformer nV4353@expanded-rhs))) (nV3149@chi-body* (cdr nV4302@e*) (cons (cons nV4352@lab nV4356@b) nV4303@r) (cons (cons nV4352@lab nV4356@b) nV4304@mr) nV4305@lex* nV4306@rhs* nV4307@mod** nV432a@kwd* nV4309@exp* nV430a@rib nV430b@top?)))))))) (if (memv nV432c@t '(let-syntax letrec-syntax)) (let ((nV4358@t nV4316@e)) (let ((nV435a@ls/false (nV30f1@syntax-dispatch nV4358@t '(_ #(each (any any)) . each-any)))) (if (and nV435a@ls/false (apply (lambda (nV435c@xlhs* nV435d@xrhs* nV435e@xbody*) (if (not (nV2ef2@valid-bound-ids? nV435c@xlhs*)) (nV31d1@syntax-violation '#f '"invalid identifiers" nV4316@e) (void))) nV435a@ls/false)) (apply (lambda (nV4362@xlhs* nV4363@xrhs* nV4364@xbody*) (let ((nV4368@xlab* (map nV2e76@gen-label nV4362@xlhs*))) (let ((nV436a@xrib (nV2eaa@make-full-rib nV4362@xlhs* nV4368@xlab*))) (let ((nV436c@xb* (map (lambda (nV436e@x) (nV2f22@make-eval-transformer (nV314b@expand-transformer (if (eq? nV4326@type 'let-syntax) nV436e@x (nV2ed6@add-subst nV436a@xrib nV436e@x)) nV4304@mr))) nV4363@xrhs*))) (nV3149@chi-body* (append (map (lambda (nV4370@x) (nV2ed6@add-subst nV436a@xrib nV4370@x)) nV4364@xbody*) (cdr nV4302@e*)) (append (map cons nV4368@xlab* nV436c@xb*) nV4303@r) (append (map cons nV4368@xlab* nV436c@xb*) nV4304@mr) nV4305@lex* nV4306@rhs* nV4307@mod** nV432a@kwd* nV4309@exp* nV430a@rib nV430b@top?))))) nV435a@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV4358@t)))) (if (memv nV432c@t '(begin)) (let ((nV4372@t nV4316@e)) (let ((nV4374@ls/false (nV30f1@syntax-dispatch nV4372@t '(_ . each-any)))) (if nV4374@ls/false (apply (lambda (nV4376@x*) (nV3149@chi-body* (append nV4376@x* (cdr nV4302@e*)) nV4303@r nV4304@mr nV4305@lex* nV4306@rhs* nV4307@mod** nV432a@kwd* nV4309@exp* nV430a@rib nV430b@top?)) nV4374@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV4372@t)))) (if (memv nV432c@t '(global-macro global-macro!)) (nV3149@chi-body* (cons (nV2ed6@add-subst nV430a@rib (nV310d@chi-global-macro nV4325@value nV4316@e)) (cdr nV4302@e*)) nV4303@r nV4304@mr nV4305@lex* nV4306@rhs* nV4307@mod** nV432a@kwd* nV4309@exp* nV430a@rib nV430b@top?) (if (memv nV432c@t '(local-macro local-macro!)) (nV3149@chi-body* (cons (nV2ed6@add-subst nV430a@rib (nV310b@chi-local-macro nV4325@value nV4316@e)) (cdr nV4302@e*)) nV4303@r nV4304@mr nV4305@lex* nV4306@rhs* nV4307@mod** nV432a@kwd* nV4309@exp* nV430a@rib nV430b@top?) (if (memv nV432c@t '(macro macro!)) (nV3149@chi-body* (cons (nV2ed6@add-subst nV430a@rib (nV3109@chi-macro nV4325@value nV4316@e)) (cdr nV4302@e*)) nV4303@r nV4304@mr nV4305@lex* nV4306@rhs* nV4307@mod** nV432a@kwd* nV4309@exp* nV430a@rib nV430b@top?) (if (memv nV432c@t '(module)) (call-with-values (lambda () (nV3147@chi-internal-module nV4316@e nV4303@r nV4304@mr nV4305@lex* nV4306@rhs* nV4307@mod** nV432a@kwd*)) (lambda (nV4388@nV4379 nV4389@nV437b nV438a@nV437d nV438b@nV437f nV438c@nV4381 nV438d@nV4383 nV438e@nV4385 nV438f@nV4387) (let ((nV4398@kwd* nV438f@nV4387) (nV4399@mod** nV438e@nV4385) (nV439a@mr nV438d@nV4383) (nV439b@r nV438c@nV4381) (nV439c@m-exp-lab* nV438b@nV437f) (nV439d@m-exp-id* nV438a@nV437d) (nV439e@rhs* nV4389@nV437b) (nV439f@lex* nV4388@nV4379)) (begin (vector-for-each (lambda (nV43a8@id nV43a9@lab) (nV2ea0@extend-rib! nV430a@rib nV43a8@id nV43a9@lab)) nV439d@m-exp-id* nV439c@m-exp-lab*) (nV3149@chi-body* (cdr nV4302@e*) nV439b@r nV439a@mr nV439f@lex* nV439e@rhs* nV4399@mod** nV4398@kwd* nV4309@exp* nV430a@rib nV430b@top?))))) (if (memv nV432c@t '(library)) (begin (nV31b3@library-expander (nV2efe@stx->datum nV4316@e)) (nV3149@chi-body* (cdr nV4302@e*) nV4303@r nV4304@mr nV4305@lex* nV4306@rhs* nV4307@mod** nV432a@kwd* nV4309@exp* nV430a@rib nV430b@top?)) (if (memv nV432c@t '(export)) (let ((nV43ac@t nV4316@e)) (let ((nV43ae@ls/false (nV30f1@syntax-dispatch nV43ac@t '(_ . each-any)))) (if nV43ae@ls/false (apply (lambda (nV43b0@exp-decl*) (nV3149@chi-body* (cdr nV4302@e*) nV4303@r nV4304@mr nV4305@lex* nV4306@rhs* nV4307@mod** nV432a@kwd* (append nV43b0@exp-decl* nV4309@exp*) nV430a@rib nV430b@top?)) nV43ae@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV43ac@t)))) (if (memv nV432c@t '(import)) (let ((nV43b3@module-import? '#f) (nV43b5@module-import '#f) (nV43b7@library-import '#f)) (begin (set! nV43b3@module-import? (lambda (nV4406@e) (let ((nV4408@t nV4406@e)) (let ((nV440a@ls/false (nV30f1@syntax-dispatch nV4408@t '(_ any)))) (if (and nV440a@ls/false (apply (lambda (nV440c@id) (nV2eea@id? nV440c@id)) nV440a@ls/false)) (apply (lambda (nV440e@id) '#t) nV440a@ls/false) (let ((nV4410@t nV4408@t)) (let ((nV4412@ls/false (nV30f1@syntax-dispatch nV4410@t '(_ . each-any)))) (if nV4412@ls/false (apply (lambda (nV4414@imp*) '#f) nV4412@ls/false) (let ((nV4416@t nV4410@t)) (let ((nV4418@ls/false (nV30f1@syntax-dispatch nV4416@t '_))) (if nV4418@ls/false (apply (lambda () (nV31d1@syntax-violation '#f '"malformed import form" nV4406@e)) nV4418@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV4416@t)))))))))))) (set! nV43b5@module-import (lambda (nV43e4@e nV43e5@r) (let ((nV43e8@t nV43e4@e)) (let ((nV43ea@ls/false (nV30f1@syntax-dispatch nV43e8@t '(_ any)))) (if (and nV43ea@ls/false (apply (lambda (nV43ec@id) (nV2eea@id? nV43ec@id)) nV43ea@ls/false)) (apply (lambda (nV43ee@id) (call-with-values (lambda () (nV2f0c@syntax-type nV43ee@id nV43e5@r)) (lambda (nV43f6@nV43f1 nV43f7@nV43f3 nV43f8@nV43f5) (let ((nV43fc@kwd nV43f8@nV43f5) (nV43fd@value nV43f7@nV43f3) (nV43fe@type nV43f6@nV43f1)) (let ((nV4402@t nV43fe@type)) (if (memv nV4402@t '($module)) (let ((nV4404@iface nV43fd@value)) (values (nV3145@module-interface-exp-id* nV4404@iface nV43ee@id) (nV313f@module-interface-exp-lab-vec nV4404@iface))) (nV31d1@syntax-violation '#f '"invalid import" nV43e4@e))))))) nV43ea@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV43e8@t)))))) (set! nV43b7@library-import (lambda (nV43c8@e) (let ((nV43ca@t nV43c8@e)) (let ((nV43cc@ls/false (nV30f1@syntax-dispatch nV43ca@t '(any . each-any)))) (if nV43cc@ls/false (apply (lambda (nV43ce@ctxt nV43cf@imp*) (call-with-values (lambda () (nV3153@parse-import-spec* (nV31d7@syntax->datum nV43cf@imp*))) (lambda (nV43d6@nV43d3 nV43d7@nV43d5) (let ((nV43da@subst-labels nV43d7@nV43d5) (nV43db@subst-names nV43d6@nV43d3)) (values (vector-map (lambda (nV43de@name) (nV2eca@datum->stx nV43ce@ctxt nV43de@name)) nV43db@subst-names) nV43da@subst-labels))))) nV43cc@ls/false) (let ((nV43e0@t nV43ca@t)) (let ((nV43e2@ls/false (nV30f1@syntax-dispatch nV43e0@t '_))) (if nV43e2@ls/false (apply (lambda () (nV31d1@syntax-violation '#f '"invalid import form" nV43c8@e)) nV43e2@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV43e0@t))))))))) (begin (call-with-values (lambda () (if (nV43b3@module-import? nV4316@e) (nV43b5@module-import nV4316@e nV4303@r) (nV43b7@library-import nV4316@e))) (lambda (nV43bc@nV43b9 nV43bd@nV43bb) (let ((nV43c0@lab* nV43bd@nV43bb) (nV43c1@id* nV43bc@nV43b9)) (vector-for-each (lambda (nV43c4@id nV43c5@lab) (nV2ea0@extend-rib! nV430a@rib nV43c4@id nV43c5@lab)) nV43c1@id* nV43c0@lab*)))) (nV3149@chi-body* (cdr nV4302@e*) nV4303@r nV4304@mr nV4305@lex* nV4306@rhs* nV4307@mod** nV432a@kwd* nV4309@exp* nV430a@rib nV430b@top?)))) (if nV430b@top? (nV3149@chi-body* (cdr nV4302@e*) nV4303@r nV4304@mr (cons (nV2e72@gen-lexical 'dummy) nV4305@lex*) (cons (cons 'top-expr nV4316@e) nV4306@rhs*) nV4307@mod** nV432a@kwd* nV4309@exp* nV430a@rib nV430b@top?) (values nV4302@e* nV4303@r nV4304@mr nV4305@lex* nV4306@rhs* nV4307@mod** nV432a@kwd* nV4309@exp*)))))))))))))))))))))) (set! nV4bef@nV3149@chi-body* nV3149@chi-body*) (set! nV314b@expand-transformer (lambda (nV441a@expr nV441b@r) (let ((nV441e@rtc (nV3157@make-collector))) (let ((nV4420@expanded-rhs (let ((nV442a@nV4423 nV3159@inv-collector) (nV442b@nV4425 nV315b@vis-collector) (nV442c@nV4427 nV441e@rtc) (nV442d@nV4429 (lambda (nV4432@x) (values)))) (let ((nV4434@swap (lambda () (begin (let ((nV4436@t (nV442a@nV4423))) (begin (nV442a@nV4423 nV442c@nV4427) (set! nV442c@nV4427 nV4436@t))) (let ((nV4438@t (nV442b@nV4425))) (begin (nV442b@nV4425 nV442d@nV4429) (set! nV442d@nV4429 nV4438@t))))))) (dynamic-wind nV4434@swap (lambda () (nV3113@chi-expr nV441a@expr nV441b@r nV441b@r)) nV4434@swap))))) (begin (for-each (let ((nV443a@mark-visit (nV315b@vis-collector))) (lambda (nV443c@x) (begin (nV2cff@nV2b3d@invoke-library nV443c@x) (nV443a@mark-visit nV443c@x)))) (nV441e@rtc)) nV4420@expanded-rhs))))) (set! nV4bf0@nV314b@expand-transformer nV314b@expand-transformer) (set! nV314d@parse-exports (lambda (nV443e@exp*) (let nV4446@f ((nV4440@exp* nV443e@exp*) (nV4441@int* '()) (nV4442@ext* '())) (if (null? nV4440@exp*) (begin (if (not (nV2ef2@valid-bound-ids? nV4442@ext*)) (nV31d1@syntax-violation 'export '"invalid exports" (nV3127@find-dups nV4442@ext*)) (void)) (values (map nV31d7@syntax->datum nV4442@ext*) nV4441@int*)) (let ((nV4448@t (car nV4440@exp*))) (let ((nV444a@ls/false (nV30f1@syntax-dispatch nV4448@t '(any . #(each (any any)))))) (if nV444a@ls/false (apply (lambda (nV444c@rename nV444d@i* nV444e@e*) (begin (if (not (and (eq? (nV31d7@syntax->datum nV444c@rename) 'rename) (for-all nV2eea@id? nV444d@i*) (for-all nV2eea@id? nV444e@e*))) (nV31d1@syntax-violation 'export '"invalid export specifier" (car nV4440@exp*)) (void)) (nV4446@f (cdr nV4440@exp*) (append nV444d@i* nV4441@int*) (append nV444e@e* nV4442@ext*)))) nV444a@ls/false) (let ((nV4452@t nV4448@t)) (let ((nV4454@ls/false (nV30f1@syntax-dispatch nV4452@t 'any))) (if nV4454@ls/false (apply (lambda (nV4456@ie) (begin (if (not (nV2eea@id? nV4456@ie)) (nV31d1@syntax-violation 'export '"invalid export" nV4456@ie) (void)) (nV4446@f (cdr nV4440@exp*) (cons nV4456@ie nV4441@int*) (cons nV4456@ie nV4442@ext*)))) nV4454@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV4452@t))))))))))) (set! nV4bf1@nV314d@parse-exports nV314d@parse-exports) (set! nV314f@parse-library-name (lambda (nV4458@spec) (let ((nV445b@parse '#f)) (begin (set! nV445b@parse (lambda (nV4468@x) (let ((nV446a@t nV4468@x)) (let ((nV446c@ls/false (nV30f1@syntax-dispatch nV446a@t '(each-any)))) (if (and nV446c@ls/false (apply (lambda (nV446e@v*) (for-all (lambda (nV4470@x) (let ((nV4472@x (nV31d7@syntax->datum nV4470@x))) (and (integer? nV4472@x) (exact? nV4472@x)))) nV446e@v*)) nV446c@ls/false)) (apply (lambda (nV4474@v*) (values '() (map nV31d7@syntax->datum nV4474@v*))) nV446c@ls/false) (let ((nV4476@t nV446a@t)) (let ((nV4478@ls/false (nV30f1@syntax-dispatch nV4476@t '(any . any)))) (if (and nV4478@ls/false (apply (lambda (nV447a@x nV447b@rest) (symbol? (nV31d7@syntax->datum nV447a@x))) nV4478@ls/false)) (apply (lambda (nV447e@x nV447f@rest) (call-with-values (lambda () (nV445b@parse nV447f@rest)) (lambda (nV4486@nV4483 nV4487@nV4485) (let ((nV448a@v* nV4487@nV4485) (nV448b@x* nV4486@nV4483)) (values (cons (nV31d7@syntax->datum nV447e@x) nV448b@x*) nV448a@v*))))) nV4478@ls/false) (let ((nV448e@t nV4476@t)) (let ((nV4490@ls/false (nV30f1@syntax-dispatch nV448e@t '()))) (if nV4490@ls/false (apply (lambda () (values '() '())) nV4490@ls/false) (let ((nV4492@t nV448e@t)) (let ((nV4494@ls/false (nV30f1@syntax-dispatch nV4492@t '_))) (if nV4494@ls/false (apply (lambda () (nV31d1@syntax-violation '#f '"invalid library name" nV4458@spec)) nV4494@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV4492@t))))))))))))))) (call-with-values (lambda () (nV445b@parse nV4458@spec)) (lambda (nV4460@nV445d nV4461@nV445f) (let ((nV4464@ver* nV4461@nV445f) (nV4465@name* nV4460@nV445d)) (begin (if (null? nV4465@name*) (nV31d1@syntax-violation '#f '"empty library name" nV4458@spec) (void)) (values nV4465@name* nV4464@ver*))))))))) (set! nV4bf2@nV314f@parse-library-name nV314f@parse-library-name) (set! nV3151@parse-library (lambda (nV4496@e) (let ((nV4498@t nV4496@e)) (let ((nV449a@ls/false (nV30f1@syntax-dispatch nV4498@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and nV449a@ls/false (apply (lambda (nV449c@library nV449d@name* nV449e@export nV449f@exp* nV44a0@import nV44a1@imp* nV44a2@b*) (and (eq? (nV31d7@syntax->datum nV449e@export) 'export) (eq? (nV31d7@syntax->datum nV44a0@import) 'import) (eq? (nV31d7@syntax->datum nV449c@library) 'library))) nV449a@ls/false)) (apply (lambda (nV44aa@library nV44ab@name* nV44ac@export nV44ad@exp* nV44ae@import nV44af@imp* nV44b0@b*) (values nV44ab@name* nV44ad@exp* nV44af@imp* nV44b0@b*)) nV449a@ls/false) (let ((nV44b8@t nV4498@t)) (let ((nV44ba@ls/false (nV30f1@syntax-dispatch nV44b8@t '_))) (if nV44ba@ls/false (apply (lambda () (nV31d1@syntax-violation '#f '"malformed library" nV4496@e)) nV44ba@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV44b8@t))))))))) (set! nV4bf3@nV3151@parse-library nV3151@parse-library) (set! nV3153@parse-import-spec* (let ((nV44bd@idsyn? '#f) (nV44bf@dup-error '#f) (nV44c1@merge-substs '#f) (nV44c3@exclude* '#f) (nV44c5@find* '#f) (nV44c7@rem* '#f) (nV44c9@remove-dups '#f) (nV44cb@parse-library-name '#f) (nV44cd@import-library '#f) (nV44cf@get-import '#f) (nV44d1@add-imports! '#f)) (begin (set! nV44bd@idsyn? (lambda (nV46c6@x) (symbol? (nV31d7@syntax->datum nV46c6@x)))) (set! nV44bf@dup-error (lambda (nV46c4@name) (nV31d1@syntax-violation 'import '"two imports with different bindings" nV46c4@name))) (set! nV44c1@merge-substs (lambda (nV46b2@s nV46b3@subst) (let ((nV46b7@insert-to-subst '#f)) (begin (set! nV46b7@insert-to-subst (lambda (nV46b8@a nV46b9@subst) (let ((nV46bc@name (car nV46b8@a)) (nV46bd@label (cdr nV46b8@a))) (let ((nV46c0@t (assq nV46bc@name nV46b9@subst))) (if nV46c0@t ((lambda (nV46c2@x) (if (eq? (cdr nV46c2@x) nV46bd@label) nV46b9@subst (nV44bf@dup-error nV46bc@name))) nV46c0@t) (cons nV46b8@a nV46b9@subst)))))) (if (null? nV46b2@s) nV46b3@subst (nV46b7@insert-to-subst (car nV46b2@s) (nV44c1@merge-substs (cdr nV46b2@s) nV46b3@subst))))))) (set! nV44c3@exclude* (lambda (nV4682@sym* nV4683@subst) (let ((nV4687@exclude '#f)) (begin (set! nV4687@exclude (lambda (nV46a0@sym nV46a1@subst) (if (null? nV46a1@subst) (nV31d1@syntax-violation 'import '"cannot rename unbound identifier" nV46a0@sym) (if (eq? nV46a0@sym (caar nV46a1@subst)) (values (cdar nV46a1@subst) (cdr nV46a1@subst)) (let ((nV46a4@a (car nV46a1@subst))) (call-with-values (lambda () (nV4687@exclude nV46a0@sym (cdr nV46a1@subst))) (lambda (nV46aa@nV46a7 nV46ab@nV46a9) (let ((nV46ae@subst nV46ab@nV46a9) (nV46af@old nV46aa@nV46a7)) (values nV46af@old (cons nV46a4@a nV46ae@subst)))))))))) (if (null? nV4682@sym*) (values '() nV4683@subst) (call-with-values (lambda () (nV4687@exclude (car nV4682@sym*) nV4683@subst)) (lambda (nV468c@nV4689 nV468d@nV468b) (let ((nV4690@subst nV468d@nV468b) (nV4691@old nV468c@nV4689)) (call-with-values (lambda () (nV44c3@exclude* (cdr nV4682@sym*) nV4690@subst)) (lambda (nV4698@nV4695 nV4699@nV4697) (let ((nV469c@subst nV4699@nV4697) (nV469d@old* nV4698@nV4695)) (values (cons nV4691@old nV469d@old*) nV469c@subst)))))))))))) (set! nV44c5@find* (lambda (nV467a@sym* nV467b@subst) (map (lambda (nV467e@x) (let ((nV4680@t (assq nV467e@x nV467b@subst))) (if nV4680@t (cdr nV4680@t) (nV31d1@syntax-violation 'import '"cannot find identifier" nV467e@x)))) nV467a@sym*))) (set! nV44c7@rem* (lambda (nV4672@sym* nV4673@subst) (let nV4678@f ((nV4676@subst nV4673@subst)) (if (null? nV4676@subst) '() (if (memq (caar nV4676@subst) nV4672@sym*) (nV4678@f (cdr nV4676@subst)) (cons (car nV4676@subst) (nV4678@f (cdr nV4676@subst)))))))) (set! nV44c9@remove-dups (lambda (nV4670@ls) (if (null? nV4670@ls) '() (if (memq (car nV4670@ls) (cdr nV4670@ls)) (nV44c9@remove-dups (cdr nV4670@ls)) (cons (car nV4670@ls) (nV44c9@remove-dups (cdr nV4670@ls))))))) (set! nV44cb@parse-library-name (lambda (nV4588@spec) (let ((nV458b@subversion? '#f) (nV458d@subversion-pred '#f) (nV458f@version-pred '#f)) (begin (set! nV458b@subversion? (lambda (nV466c@x) (let ((nV466e@x (nV31d7@syntax->datum nV466c@x))) (and (integer? nV466e@x) (exact? nV466e@x) (>= nV466e@x '0))))) (set! nV458d@subversion-pred (lambda (nV460c@x*) (let ((nV460e@t nV460c@x*)) (let ((nV4610@ls/false (nV30f1@syntax-dispatch nV460e@t 'any))) (if (and nV4610@ls/false (apply (lambda (nV4612@n) (nV458b@subversion? nV4612@n)) nV4610@ls/false)) (apply (lambda (nV4614@n) (lambda (nV4616@x) (= nV4616@x (nV31d7@syntax->datum nV4614@n)))) nV4610@ls/false) (let ((nV4618@t nV460e@t)) (let ((nV461a@ls/false (nV30f1@syntax-dispatch nV4618@t '(any . each-any)))) (if (and nV461a@ls/false (apply (lambda (nV461c@p? nV461d@sub*) (eq? (nV31d7@syntax->datum nV461c@p?) 'and)) nV461a@ls/false)) (apply (lambda (nV4620@p? nV4621@sub*) (let ((nV4624@p* (map nV458d@subversion-pred nV4621@sub*))) (lambda (nV4626@x) (for-all (lambda (nV4628@p) (nV4628@p nV4626@x)) nV4624@p*)))) nV461a@ls/false) (let ((nV462a@t nV4618@t)) (let ((nV462c@ls/false (nV30f1@syntax-dispatch nV462a@t '(any . each-any)))) (if (and nV462c@ls/false (apply (lambda (nV462e@p? nV462f@sub*) (eq? (nV31d7@syntax->datum nV462e@p?) 'or)) nV462c@ls/false)) (apply (lambda (nV4632@p? nV4633@sub*) (let ((nV4636@p* (map nV458d@subversion-pred nV4633@sub*))) (lambda (nV4638@x) (exists (lambda (nV463a@p) (nV463a@p nV4638@x)) nV4636@p*)))) nV462c@ls/false) (let ((nV463c@t nV462a@t)) (let ((nV463e@ls/false (nV30f1@syntax-dispatch nV463c@t '(any any)))) (if (and nV463e@ls/false (apply (lambda (nV4640@p? nV4641@sub) (eq? (nV31d7@syntax->datum nV4640@p?) 'not)) nV463e@ls/false)) (apply (lambda (nV4644@p? nV4645@sub) (let ((nV4648@p (nV458d@subversion-pred nV4645@sub))) (lambda (nV464a@x) (not (nV4648@p nV464a@x))))) nV463e@ls/false) (let ((nV464c@t nV463c@t)) (let ((nV464e@ls/false (nV30f1@syntax-dispatch nV464c@t '(any any)))) (if (and nV464e@ls/false (apply (lambda (nV4650@p? nV4651@n) (and (eq? (nV31d7@syntax->datum nV4650@p?) '<=) (nV458b@subversion? nV4651@n))) nV464e@ls/false)) (apply (lambda (nV4654@p? nV4655@n) (lambda (nV4658@x) (<= nV4658@x (nV31d7@syntax->datum nV4655@n)))) nV464e@ls/false) (let ((nV465a@t nV464c@t)) (let ((nV465c@ls/false (nV30f1@syntax-dispatch nV465a@t '(any any)))) (if (and nV465c@ls/false (apply (lambda (nV465e@p? nV465f@n) (and (eq? (nV31d7@syntax->datum nV465e@p?) '>=) (nV458b@subversion? nV465f@n))) nV465c@ls/false)) (apply (lambda (nV4662@p? nV4663@n) (lambda (nV4666@x) (>= nV4666@x (nV31d7@syntax->datum nV4663@n)))) nV465c@ls/false) (let ((nV4668@t nV465a@t)) (let ((nV466a@ls/false (nV30f1@syntax-dispatch nV4668@t '_))) (if nV466a@ls/false (apply (lambda () (nV31d1@syntax-violation 'import '"invalid sub-version spec" nV4588@spec nV460c@x*)) nV466a@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV4668@t)))))))))))))))))))))))) (set! nV458f@version-pred (lambda (nV45bc@x*) (let ((nV45be@t nV45bc@x*)) (let ((nV45c0@ls/false (nV30f1@syntax-dispatch nV45be@t '()))) (if nV45c0@ls/false (apply (lambda () (lambda (nV45c2@x) '#t)) nV45c0@ls/false) (let ((nV45c4@t nV45be@t)) (let ((nV45c6@ls/false (nV30f1@syntax-dispatch nV45c4@t '(any . each-any)))) (if (and nV45c6@ls/false (apply (lambda (nV45c8@c nV45c9@ver*) (eq? (nV31d7@syntax->datum nV45c8@c) 'and)) nV45c6@ls/false)) (apply (lambda (nV45cc@c nV45cd@ver*) (let ((nV45d0@p* (map nV458f@version-pred nV45cd@ver*))) (lambda (nV45d2@x) (for-all (lambda (nV45d4@p) (nV45d4@p nV45d2@x)) nV45d0@p*)))) nV45c6@ls/false) (let ((nV45d6@t nV45c4@t)) (let ((nV45d8@ls/false (nV30f1@syntax-dispatch nV45d6@t '(any . each-any)))) (if (and nV45d8@ls/false (apply (lambda (nV45da@c nV45db@ver*) (eq? (nV31d7@syntax->datum nV45da@c) 'or)) nV45d8@ls/false)) (apply (lambda (nV45de@c nV45df@ver*) (let ((nV45e2@p* (map nV458f@version-pred nV45df@ver*))) (lambda (nV45e4@x) (exists (lambda (nV45e6@p) (nV45e6@p nV45e4@x)) nV45e2@p*)))) nV45d8@ls/false) (let ((nV45e8@t nV45d6@t)) (let ((nV45ea@ls/false (nV30f1@syntax-dispatch nV45e8@t '(any any)))) (if (and nV45ea@ls/false (apply (lambda (nV45ec@c nV45ed@ver) (eq? (nV31d7@syntax->datum nV45ec@c) 'not)) nV45ea@ls/false)) (apply (lambda (nV45f0@c nV45f1@ver) (let ((nV45f4@p (nV458f@version-pred nV45f1@ver))) (lambda (nV45f6@x) (not (nV45f4@p nV45f6@x))))) nV45ea@ls/false) (let ((nV45f8@t nV45e8@t)) (let ((nV45fa@ls/false (nV30f1@syntax-dispatch nV45f8@t 'each-any))) (if nV45fa@ls/false (apply (lambda (nV45fc@sub*) (let ((nV45fe@p* (map nV458d@subversion-pred nV45fc@sub*))) (lambda (nV4600@x) (let nV4606@f ((nV4602@p* nV45fe@p*) (nV4603@x nV4600@x)) (if (null? nV4602@p*) '#t (if (null? nV4603@x) '#f (and ((car nV4602@p*) (car nV4603@x)) (nV4606@f (cdr nV4602@p*) (cdr nV4603@x))))))))) nV45fa@ls/false) (let ((nV4608@t nV45f8@t)) (let ((nV460a@ls/false (nV30f1@syntax-dispatch nV4608@t '_))) (if nV460a@ls/false (apply (lambda () (nV31d1@syntax-violation 'import '"invalid version spec" nV4588@spec nV45bc@x*)) nV460a@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV4608@t))))))))))))))))))))) (let nV4592@f ((nV4590@x nV4588@spec)) (let ((nV4594@t nV4590@x)) (let ((nV4596@ls/false (nV30f1@syntax-dispatch nV4594@t '(each-any)))) (if nV4596@ls/false (apply (lambda (nV4598@version-spec*) (values '() (nV458f@version-pred nV4598@version-spec*))) nV4596@ls/false) (let ((nV459a@t nV4594@t)) (let ((nV459c@ls/false (nV30f1@syntax-dispatch nV459a@t '(any . any)))) (if (and nV459c@ls/false (apply (lambda (nV459e@x nV459f@x*) (nV44bd@idsyn? nV459e@x)) nV459c@ls/false)) (apply (lambda (nV45a2@x nV45a3@x*) (call-with-values (lambda () (nV4592@f nV45a3@x*)) (lambda (nV45aa@nV45a7 nV45ab@nV45a9) (let ((nV45ae@pred nV45ab@nV45a9) (nV45af@name nV45aa@nV45a7)) (values (cons (nV31d7@syntax->datum nV45a2@x) nV45af@name) nV45ae@pred))))) nV459c@ls/false) (let ((nV45b2@t nV459a@t)) (let ((nV45b4@ls/false (nV30f1@syntax-dispatch nV45b2@t '()))) (if nV45b4@ls/false (apply (lambda () (values '() (lambda (nV45b6@x) '#t))) nV45b4@ls/false) (let ((nV45b8@t nV45b2@t)) (let ((nV45ba@ls/false (nV30f1@syntax-dispatch nV45b8@t '_))) (if nV45ba@ls/false (apply (lambda () (nV31d1@syntax-violation '#f '"invalid import spec" nV4588@spec)) nV45ba@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV45b8@t)))))))))))))))))) (set! nV44cd@import-library (lambda (nV4578@spec*) (call-with-values (lambda () (nV44cb@parse-library-name nV4578@spec*)) (lambda (nV457e@nV457b nV457f@nV457d) (let ((nV4582@pred nV457f@nV457d) (nV4583@name nV457e@nV457b)) (begin (if (null? nV4583@name) (nV31d1@syntax-violation 'import '"empty library name" nV4578@spec*) (void)) (let ((nV4586@lib (nV2cf8@nV2b2f@find-library-by-name nV4583@name))) (begin (if (not nV4586@lib) (nV31d1@syntax-violation 'import '"cannot find library with required name" nV4583@name) (void)) (if (not (nV4582@pred (nV2cd2@nV2ae3@library-version nV4586@lib))) (nV31d1@syntax-violation 'import '"library does not satisfy version specification" nV4578@spec* nV4586@lib) (void)) ((nV315d@imp-collector) nV4586@lib) (nV2cda@nV2af3@library-subst nV4586@lib))))))))) (set! nV44cf@get-import (lambda (nV44ea@spec) (let ((nV44ec@t nV44ea@spec)) (let ((nV44ee@ls/false (nV30f1@syntax-dispatch nV44ec@t '(any . each-any)))) (if (and nV44ee@ls/false (apply (lambda (nV44f0@x nV44f1@x*) (not (memq (nV31d7@syntax->datum nV44f0@x) '(for rename except only prefix library)))) nV44ee@ls/false)) (apply (lambda (nV44f4@x nV44f5@x*) (nV44cd@import-library (cons nV44f4@x nV44f5@x*))) nV44ee@ls/false) (let ((nV44f8@t nV44ec@t)) (let ((nV44fa@ls/false (nV30f1@syntax-dispatch nV44f8@t '(any any . #(each (any any)))))) (if (and nV44fa@ls/false (apply (lambda (nV44fc@rename nV44fd@isp nV44fe@old* nV44ff@new*) (and (eq? (nV31d7@syntax->datum nV44fc@rename) 'rename) (for-all nV44bd@idsyn? nV44fe@old*) (for-all nV44bd@idsyn? nV44ff@new*))) nV44fa@ls/false)) (apply (lambda (nV4504@rename nV4505@isp nV4506@old* nV4507@new*) (let ((nV450c@subst (nV44cf@get-import nV4505@isp)) (nV450d@old* (map nV31d7@syntax->datum nV4506@old*)) (nV450e@new* (map nV31d7@syntax->datum nV4507@new*))) (let ((nV4512@old-label* (nV44c5@find* nV450d@old* nV450c@subst))) (let ((nV4514@subst (nV44c7@rem* nV450d@old* nV450c@subst))) (nV44c1@merge-substs (map cons nV450e@new* nV4512@old-label*) nV4514@subst))))) nV44fa@ls/false) (let ((nV4516@t nV44f8@t)) (let ((nV4518@ls/false (nV30f1@syntax-dispatch nV4516@t '(any any . each-any)))) (if (and nV4518@ls/false (apply (lambda (nV451a@except nV451b@isp nV451c@sym*) (and (eq? (nV31d7@syntax->datum nV451a@except) 'except) (for-all nV44bd@idsyn? nV451c@sym*))) nV4518@ls/false)) (apply (lambda (nV4520@except nV4521@isp nV4522@sym*) (let ((nV4526@subst (nV44cf@get-import nV4521@isp))) (nV44c7@rem* (map nV31d7@syntax->datum nV4522@sym*) nV4526@subst))) nV4518@ls/false) (let ((nV4528@t nV4516@t)) (let ((nV452a@ls/false (nV30f1@syntax-dispatch nV4528@t '(any any . each-any)))) (if (and nV452a@ls/false (apply (lambda (nV452c@only nV452d@isp nV452e@sym*) (and (eq? (nV31d7@syntax->datum nV452c@only) 'only) (for-all nV44bd@idsyn? nV452e@sym*))) nV452a@ls/false)) (apply (lambda (nV4532@only nV4533@isp nV4534@sym*) (let ((nV4538@subst (nV44cf@get-import nV4533@isp)) (nV4539@sym* (map nV31d7@syntax->datum nV4534@sym*))) (let ((nV453c@sym* (nV44c9@remove-dups nV4539@sym*))) (let ((nV453e@lab* (nV44c5@find* nV453c@sym* nV4538@subst))) (map cons nV453c@sym* nV453e@lab*))))) nV452a@ls/false) (let ((nV4540@t nV4528@t)) (let ((nV4542@ls/false (nV30f1@syntax-dispatch nV4540@t '(any any any)))) (if (and nV4542@ls/false (apply (lambda (nV4544@prefix nV4545@isp nV4546@p) (and (eq? (nV31d7@syntax->datum nV4544@prefix) 'prefix) (nV44bd@idsyn? nV4546@p))) nV4542@ls/false)) (apply (lambda (nV454a@prefix nV454b@isp nV454c@p) (let ((nV4550@subst (nV44cf@get-import nV454b@isp)) (nV4551@prefix (symbol->string (nV31d7@syntax->datum nV454c@p)))) (map (lambda (nV4554@x) (cons (string->symbol (string-append nV4551@prefix (symbol->string (car nV4554@x)))) (cdr nV4554@x))) nV4550@subst))) nV4542@ls/false) (let ((nV4556@t nV4540@t)) (let ((nV4558@ls/false (nV30f1@syntax-dispatch nV4556@t '(any each-any)))) (if (and nV4558@ls/false (apply (lambda (nV455a@library nV455b@spec*) (eq? (nV31d7@syntax->datum nV455a@library) 'library)) nV4558@ls/false)) (apply (lambda (nV455e@library nV455f@spec*) (nV44cd@import-library nV455f@spec*)) nV4558@ls/false) (let ((nV4562@t nV4556@t)) (let ((nV4564@ls/false (nV30f1@syntax-dispatch nV4562@t '(any any . any)))) (if (and nV4564@ls/false (apply (lambda (nV4566@for nV4567@isp nV4568@rest) (eq? (nV31d7@syntax->datum nV4566@for) 'for)) nV4564@ls/false)) (apply (lambda (nV456c@for nV456d@isp nV456e@rest) (nV44cf@get-import nV456d@isp)) nV4564@ls/false) (let ((nV4572@t nV4562@t)) (let ((nV4574@ls/false (nV30f1@syntax-dispatch nV4572@t 'any))) (if nV4574@ls/false (apply (lambda (nV4576@spec) (nV31d1@syntax-violation 'import '"invalid import spec" nV4576@spec)) nV4574@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV4572@t))))))))))))))))))))))))))) (set! nV44d1@add-imports! (lambda (nV44da@imp nV44db@h) (let ((nV44de@subst (nV44cf@get-import nV44da@imp))) (for-each (lambda (nV44e0@x) (let ((nV44e2@name (car nV44e0@x)) (nV44e3@label (cdr nV44e0@x))) (let ((nV44e6@t (hashtable-ref nV44db@h nV44e2@name '#f))) (if nV44e6@t ((lambda (nV44e8@l) (if (not (eq? nV44e8@l nV44e3@label)) (nV44bf@dup-error nV44e2@name) (void))) nV44e6@t) (hashtable-set! nV44db@h nV44e2@name nV44e3@label))))) nV44de@subst)))) (lambda (nV44d2@imp*) (let nV44d8@f ((nV44d4@imp* nV44d2@imp*) (nV44d5@h (make-eq-hashtable))) (if (null? nV44d4@imp*) (hashtable-entries nV44d5@h) (begin (nV44d1@add-imports! (car nV44d4@imp*) nV44d5@h) (nV44d8@f (cdr nV44d4@imp*) nV44d5@h)))))))) (set! nV4bf4@nV3153@parse-import-spec* nV3153@parse-import-spec*) (set! nV3155@make-top-rib (lambda (nV46c8@names nV46c9@labels) (let ((nV46cc@rib (nV2e9e@make-empty-rib))) (begin (vector-for-each (lambda (nV46ce@name nV46cf@label) (begin (if (not (symbol? nV46ce@name)) (error 'make-top-rib '"BUG: not a symbol" nV46ce@name) (void)) (nV2ea2@extend-rib/nc! nV46cc@rib (make-simple-struct 'stx '5 (list nV46ce@name nV2e6e@top-mark* '() '())) nV46cf@label))) nV46c8@names nV46c9@labels) nV46cc@rib)))) (set! nV4bf5@nV3155@make-top-rib nV3155@make-top-rib) (set! nV3157@make-collector (lambda () (let ((nV46d2@ls '())) (lambda nV46d6 (let ((nV46d7 (length nV46d6))) (if (= nV46d7 '0) (apply (lambda () nV46d2@ls) nV46d6) (if (= nV46d7 '1) (apply (lambda (nV46d4@x) (set! nV46d2@ls (nV2e67@set-cons nV46d4@x nV46d2@ls))) nV46d6) (error 'apply '"invalid arg count")))))))) (set! nV4bf6@nV3157@make-collector nV3157@make-collector) (set! nV3159@inv-collector (nV2a23@nV2901@make-parameter (lambda nV46d8@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (nV46da@x) (begin (if (not (procedure? nV46da@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" nV46da@x) (void)) nV46da@x)))) (set! nV4bf7@nV3159@inv-collector nV3159@inv-collector) (set! nV315b@vis-collector (nV2a23@nV2901@make-parameter (lambda nV46dc@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (nV46de@x) (begin (if (not (procedure? nV46de@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" nV46de@x) (void)) nV46de@x)))) (set! nV4bf8@nV315b@vis-collector nV315b@vis-collector) (set! nV315d@imp-collector (nV2a23@nV2901@make-parameter (lambda nV46e0@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (nV46e2@x) (begin (if (not (procedure? nV46e2@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" nV46e2@x) (void)) nV46e2@x)))) (set! nV4bf9@nV315d@imp-collector nV315d@imp-collector) (set! nV315f@chi-library-internal (lambda (nV46e4@e* nV46e5@rib nV46e6@top?) (call-with-values (lambda () (nV3149@chi-body* nV46e4@e* '() '() '() '() '() '() '() nV46e5@rib nV46e6@top?)) (lambda (nV46fa@nV46eb nV46fb@nV46ed nV46fc@nV46ef nV46fd@nV46f1 nV46fe@nV46f3 nV46ff@nV46f5 nV4700@nV46f7 nV4701@nV46f9) (let ((nV470a@exp* nV4701@nV46f9) (nV470b@_kwd* nV4700@nV46f7) (nV470c@mod** nV46ff@nV46f5) (nV470d@rhs* nV46fe@nV46f3) (nV470e@lex* nV46fd@nV46f1) (nV470f@mr nV46fc@nV46ef) (nV4710@r nV46fb@nV46ed) (nV4711@e* nV46fa@nV46eb)) (values (append (apply append (reverse nV470c@mod**)) nV4711@e*) nV4710@r nV470f@mr (reverse nV470e@lex*) (reverse nV470d@rhs*) nV470a@exp*)))))) (set! nV4bfa@nV315f@chi-library-internal nV315f@chi-library-internal) (set! nV3161@chi-interaction-expr (lambda (nV471a@e nV471b@rib nV471c@r) (call-with-values (lambda () (nV3149@chi-body* (list nV471a@e) nV471c@r nV471c@r '() '() '() '() '() nV471b@rib '#t)) (lambda (nV4730@nV4721 nV4731@nV4723 nV4732@nV4725 nV4733@nV4727 nV4734@nV4729 nV4735@nV472b nV4736@nV472d nV4737@nV472f) (let ((nV4740@_exp* nV4737@nV472f) (nV4741@_kwd* nV4736@nV472d) (nV4742@mod** nV4735@nV472b) (nV4743@rhs* nV4734@nV4729) (nV4744@lex* nV4733@nV4727) (nV4745@mr nV4732@nV4725) (nV4746@r nV4731@nV4723) (nV4747@e* nV4730@nV4721)) (let ((nV4750@e* (nV3121@expand-interaction-rhs*/init* (reverse nV4744@lex*) (reverse nV4743@rhs*) (append (apply append (reverse nV4742@mod**)) nV4747@e*) nV4746@r nV4745@mr))) (let ((nV4752@e (if (null? nV4750@e*) (nV2e50@nV2dab@build-void) (if (null? (cdr nV4750@e*)) (car nV4750@e*) (nV2e4f@nV2da9@build-sequence '#f nV4750@e*))))) (values nV4752@e nV4746@r)))))))) (set! nV4bfb@nV3161@chi-interaction-expr nV3161@chi-interaction-expr) (set! nV3163@library-body-expander (lambda (nV4754@name nV4755@main-exp* nV4756@imp* nV4757@b* nV4758@top?) (let ((nV475f@itc '#f)) (begin (set! nV475f@itc (nV3157@make-collector)) (let ((nV4768@nV4761 nV315d@imp-collector) (nV4769@nV4763 nV31e1@top-level-context) (nV476a@nV4765 nV475f@itc) (nV476b@nV4767 '#f)) (let ((nV4770@swap (lambda () (begin (let ((nV4772@t (nV4768@nV4761))) (begin (nV4768@nV4761 nV476a@nV4765) (set! nV476a@nV4765 nV4772@t))) (let ((nV4774@t (nV4769@nV4763))) (begin (nV4769@nV4763 nV476b@nV4767) (set! nV476b@nV4767 nV4774@t))))))) (dynamic-wind nV4770@swap (lambda () (call-with-values (lambda () (nV3153@parse-import-spec* nV4756@imp*)) (lambda (nV477a@nV4777 nV477b@nV4779) (let ((nV477e@subst-labels nV477b@nV4779) (nV477f@subst-names nV477a@nV4777)) (let ((nV4782@rib (nV3155@make-top-rib nV477f@subst-names nV477e@subst-labels))) (let ((nV4785@wrap '#f)) (begin (set! nV4785@wrap (lambda (nV4800@x) (make-simple-struct 'stx '5 (list nV4800@x nV2e6e@top-mark* (list nV4782@rib) '())))) (let ((nV4786@b* (map nV4785@wrap nV4757@b*)) (nV4787@main-exp* (map nV4785@wrap nV4755@main-exp*)) (nV4788@rtc (nV3157@make-collector)) (nV4789@vtc (nV3157@make-collector))) (let ((nV4796@nV478f nV3159@inv-collector) (nV4797@nV4791 nV315b@vis-collector) (nV4798@nV4793 nV4788@rtc) (nV4799@nV4795 nV4789@vtc)) (let ((nV479e@swap (lambda () (begin (let ((nV47a0@t (nV4796@nV478f))) (begin (nV4796@nV478f nV4798@nV4793) (set! nV4798@nV4793 nV47a0@t))) (let ((nV47a2@t (nV4797@nV4791))) (begin (nV4797@nV4791 nV4799@nV4795) (set! nV4799@nV4795 nV47a2@t))))))) (dynamic-wind nV479e@swap (lambda () (call-with-values (lambda () (nV315f@chi-library-internal nV4786@b* nV4782@rib nV4758@top?)) (lambda (nV47b0@nV47a5 nV47b1@nV47a7 nV47b2@nV47a9 nV47b3@nV47ab nV47b4@nV47ad nV47b5@nV47af) (let ((nV47bc@internal-exp* nV47b5@nV47af) (nV47bd@rhs* nV47b4@nV47ad) (nV47be@lex* nV47b3@nV47ab) (nV47bf@mr nV47b2@nV47a9) (nV47c0@r nV47b1@nV47a7) (nV47c1@init* nV47b0@nV47a5)) (call-with-values (lambda () (nV314d@parse-exports (append nV4787@main-exp* nV47bc@internal-exp*))) (lambda (nV47cc@nV47c9 nV47cd@nV47cb) (let ((nV47d0@exp-id* nV47cd@nV47cb) (nV47d1@exp-name* nV47cc@nV47c9)) (begin (nV2ea6@seal-rib! nV4782@rib) (let ((nV47d4@init* (nV310f@chi-expr* nV47c1@init* nV47c0@r nV47bf@mr))) (let ((nV47d6@rhs* (nV3123@chi-rhs* nV47bd@rhs* nV47c0@r nV47bf@mr))) (begin (nV2ea8@unseal-rib! nV4782@rib) (let ((nV47d8@loc* (map nV2e74@gen-global nV47be@lex*)) (nV47d9@export-subst (nV31bb@make-export-subst nV47d1@exp-name* nV47d0@exp-id*))) (let ((nV47dd@errstr '#f)) (begin (set! nV47dd@errstr '"attempt to export mutated variable") (call-with-values (lambda () (nV31bd@make-export-env/macros nV47be@lex* nV47d8@loc* nV47c0@r)) (lambda (nV47e4@nV47df nV47e5@nV47e1 nV47e6@nV47e3) (let ((nV47ea@macro* nV47e6@nV47e3) (nV47eb@global* nV47e5@nV47e1) (nV47ec@export-env nV47e4@nV47df)) (begin (for-each (lambda (nV47f0@s) (let ((nV47f2@name (car nV47f0@s)) (nV47f3@label (cdr nV47f0@s))) (let ((nV47f6@p (assq nV47f3@label nV47ec@export-env))) (if nV47f6@p (let ((nV47f8@b (cdr nV47f6@p))) (let ((nV47fa@type (car nV47f8@b))) (if (eq? nV47fa@type 'mutable) (nV31d1@syntax-violation 'export nV47dd@errstr nV47f2@name) (void)))) (void))))) nV47d9@export-subst) (let ((nV47fc@invoke-body (nV2e55@nV2db5@build-library-letrec* '#f nV4754@name nV47be@lex* nV47d8@loc* nV47d6@rhs* (if (null? nV47d4@init*) (nV2e50@nV2dab@build-void) (nV2e4f@nV2da9@build-sequence '#f nV47d4@init*)))) (nV47fd@invoke-definitions (map nV2e4c@nV2d08@build-global-define (map cdr nV47eb@global*)))) (values (nV475f@itc) (nV4788@rtc) (nV4789@vtc) (nV2e4f@nV2da9@build-sequence '#f (append nV47fd@invoke-definitions (list nV47fc@invoke-body))) nV47ea@macro* nV47d9@export-subst nV47ec@export-env)))))))))))))))))))) nV479e@swap))))))))))) nV4770@swap))))))) (set! nV4bfc@nV3163@library-body-expander nV3163@library-body-expander) (set! nV3165@core-library-expander (lambda (nV4802@e nV4803@verify-name) (call-with-values (lambda () (nV3151@parse-library nV4802@e)) (lambda (nV480e@nV4807 nV480f@nV4809 nV4810@nV480b nV4811@nV480d) (let ((nV4816@b* nV4811@nV480d) (nV4817@imp* nV4810@nV480b) (nV4818@exp* nV480f@nV4809) (nV4819@name* nV480e@nV4807)) (call-with-values (lambda () (nV314f@parse-library-name nV4819@name*)) (lambda (nV4822@nV481f nV4823@nV4821) (let ((nV4826@ver nV4823@nV4821) (nV4827@name nV4822@nV481f)) (begin (nV4803@verify-name nV4827@name) (call-with-values (lambda () (nV3163@library-body-expander nV4827@name nV4818@exp* nV4817@imp* nV4816@b* '#f)) (lambda (nV4838@nV482b nV4839@nV482d nV483a@nV482f nV483b@nV4831 nV483c@nV4833 nV483d@nV4835 nV483e@nV4837) (let ((nV4846@export-env nV483e@nV4837) (nV4847@export-subst nV483d@nV4835) (nV4848@visit-code nV483c@nV4833) (nV4849@invoke-code nV483b@nV4831) (nV484a@visit-req* nV483a@nV482f) (nV484b@invoke-req* nV4839@nV482d) (nV484c@imp* nV4838@nV482b)) (values nV4827@name nV4826@ver nV484c@imp* nV484b@invoke-req* nV484a@visit-req* nV4849@invoke-code nV4848@visit-code nV4847@export-subst nV4846@export-env))))))))))))) (set! nV4bfd@nV3165@core-library-expander nV3165@core-library-expander) (set! nV3167@parse-top-level-program (lambda (nV4854@e*) (let ((nV4856@t nV4854@e*)) (let ((nV4858@ls/false (nV30f1@syntax-dispatch nV4856@t '((any . each-any) . each-any)))) (if (and nV4858@ls/false (apply (lambda (nV485a@import nV485b@imp* nV485c@b*) (eq? (nV31d7@syntax->datum nV485a@import) 'import)) nV4858@ls/false)) (apply (lambda (nV4860@import nV4861@imp* nV4862@b*) (values nV4861@imp* nV4862@b*)) nV4858@ls/false) (let ((nV4866@t nV4856@t)) (let ((nV4868@ls/false (nV30f1@syntax-dispatch nV4866@t '((any . any) . any)))) (if (and nV4868@ls/false (apply (lambda (nV486a@import nV486b@x nV486c@y) (eq? (nV31d7@syntax->datum nV486a@import) 'import)) nV4868@ls/false)) (apply (lambda (nV4870@import nV4871@x nV4872@y) (nV31d1@syntax-violation 'expander '"invalid syntax of top-level program" (nV2ee4@syntax-car nV4854@e*))) nV4868@ls/false) (let ((nV4876@t nV4866@t)) (let ((nV4878@ls/false (nV30f1@syntax-dispatch nV4876@t '_))) (if nV4878@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) nV4878@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV4876@t)))))))))))) (set! nV4bfe@nV3167@parse-top-level-program nV3167@parse-top-level-program) (set! nV3169@top-level-expander (lambda (nV487a@e*) (call-with-values (lambda () (nV3167@parse-top-level-program nV487a@e*)) (lambda (nV4880@nV487d nV4881@nV487f) (let ((nV4884@b* nV4881@nV487f) (nV4885@imp* nV4880@nV487d)) (call-with-values (lambda () (nV3163@library-body-expander '() '() nV4885@imp* nV4884@b* '#t)) (lambda (nV4896@nV4889 nV4897@nV488b nV4898@nV488d nV4899@nV488f nV489a@nV4891 nV489b@nV4893 nV489c@nV4895) (let ((nV48a4@export-env nV489c@nV4895) (nV48a5@export-subst nV489b@nV4893) (nV48a6@visit-code nV489a@nV4891) (nV48a7@invoke-code nV4899@nV488f) (nV48a8@visit-req* nV4898@nV488d) (nV48a9@invoke-req* nV4897@nV488b) (nV48aa@imp* nV4896@nV4889)) (values nV48a9@invoke-req* nV48a7@invoke-code))))))))) (set! nV4bff@nV3169@top-level-expander nV3169@top-level-expander) (set! nV316b@rp (nV2a20@nV28fb@make-record-printer 'env (lambda (nV48b2@x nV48b3@p nV48b4@wr) (display '"#<environment>" nV48b3@p)))) (set! nV4c00@nV316b@rp nV316b@rp) (set! nV3175@env? (lambda (nV48b8@x) (and (simple-struct? nV48b8@x) (eq? (simple-struct-name nV48b8@x) 'env)))) (set! nV4c01@nV3175@env? nV3175@env?) (set! nV3177@env-names (lambda (nV48ba@x) (simple-struct-ref nV48ba@x '0))) (set! nV4c02@nV3177@env-names nV3177@env-names) (set! nV3179@set-env-names! (lambda (nV48bc@x nV48bd@val) (simple-struct-set! nV48bc@x '0 nV48bd@val))) (set! nV4c03@nV3179@set-env-names! nV3179@set-env-names!) (set! nV317b@env-labels (lambda (nV48c0@x) (simple-struct-ref nV48c0@x '1))) (set! nV4c04@nV317b@env-labels nV317b@env-labels) (set! nV317d@set-env-labels! (lambda (nV48c2@x nV48c3@val) (simple-struct-set! nV48c2@x '1 nV48c3@val))) (set! nV4c05@nV317d@set-env-labels! nV317d@set-env-labels!) (set! nV317f@env-itc (lambda (nV48c6@x) (simple-struct-ref nV48c6@x '2))) (set! nV4c06@nV317f@env-itc nV317f@env-itc) (set! nV3181@set-env-itc! (lambda (nV48c8@x nV48c9@val) (simple-struct-set! nV48c8@x '2 nV48c9@val))) (set! nV4c07@nV3181@set-env-itc! nV3181@set-env-itc!) (set! nV3183@dummy '3) (set! nV4c08@nV3183@dummy nV3183@dummy) (set! nV3185@rp (nV2a20@nV28fb@make-record-printer 'interaction-env (lambda (nV48cc@x nV48cd@p nV48ce@wr) (display '"#<environment>" nV48cd@p)))) (set! nV4c09@nV3185@rp nV3185@rp) (set! nV318f@interaction-env? (lambda (nV48d2@x) (and (simple-struct? nV48d2@x) (eq? (simple-struct-name nV48d2@x) 'interaction-env)))) (set! nV4c0a@nV318f@interaction-env? nV318f@interaction-env?) (set! nV3191@interaction-env-rib (lambda (nV48d4@x) (simple-struct-ref nV48d4@x '0))) (set! nV4c0b@nV3191@interaction-env-rib nV3191@interaction-env-rib) (set! nV3193@set-interaction-env-rib! (lambda (nV48d6@x nV48d7@val) (simple-struct-set! nV48d6@x '0 nV48d7@val))) (set! nV4c0c@nV3193@set-interaction-env-rib! nV3193@set-interaction-env-rib!) (set! nV3195@interaction-env-r (lambda (nV48da@x) (simple-struct-ref nV48da@x '1))) (set! nV4c0d@nV3195@interaction-env-r nV3195@interaction-env-r) (set! nV3197@set-interaction-env-r! (lambda (nV48dc@x nV48dd@val) (simple-struct-set! nV48dc@x '1 nV48dd@val))) (set! nV4c0e@nV3197@set-interaction-env-r! nV3197@set-interaction-env-r!) (set! nV3199@interaction-env-locs (lambda (nV48e0@x) (simple-struct-ref nV48e0@x '2))) (set! nV4c0f@nV3199@interaction-env-locs nV3199@interaction-env-locs) (set! nV319b@set-interaction-env-locs! (lambda (nV48e2@x nV48e3@val) (simple-struct-set! nV48e2@x '2 nV48e3@val))) (set! nV4c10@nV319b@set-interaction-env-locs! nV319b@set-interaction-env-locs!) (set! nV319d@dummy '3) (set! nV4c11@nV319d@dummy nV319d@dummy) (set! nV319f@interaction-environment-symbols (lambda () (nV31a7@environment-symbols (nV31df@interaction-environment)))) (set! nV4c12@nV319f@interaction-environment-symbols nV319f@interaction-environment-symbols) (set! nV31a1@environment-bindings (lambda (nV48e6@e) (vector->list (vector-map (lambda (nV48e8@name nV48e9@label) (nV31a3@parse-binding (cons nV48e8@name (nV2cfe@nV2b3b@imported-label->binding nV48e9@label)))) (nV3177@env-names nV48e6@e) (nV317b@env-labels nV48e6@e))))) (set! nV4c13@nV31a1@environment-bindings nV31a1@environment-bindings) (set! nV31a3@parse-binding (lambda (nV48ec@b) (cons (car nV48ec@b) (let ((nV48ee@t (cadr nV48ec@b))) (if (memv nV48ee@t '(core-prim global)) 'procedure (if (memv nV48ee@t '(core-macro macro global-macro)) 'syntax (if (memv nV48ee@t '($core-rtd)) 'record (if (eq? (car nV48ec@b) (cadr nV48ec@b)) 'syntax 'unknown)))))))) (set! nV4c14@nV31a3@parse-binding nV31a3@parse-binding) (set! nV31a5@environment? (lambda (nV48f0@x) (or (nV3175@env? nV48f0@x) (nV318f@interaction-env? nV48f0@x)))) (set! nV4c15@nV31a5@environment? nV31a5@environment?) (set! nV31a7@environment-symbols (lambda (nV48f2@x) (if (nV3175@env? nV48f2@x) (vector->list (nV3177@env-names nV48f2@x)) (if (nV318f@interaction-env? nV48f2@x) (map values (nV2e88@rib-sym* (nV3191@interaction-env-rib nV48f2@x))) (assertion-violation 'environment-symbols '"not an environment" nV48f2@x))))) (set! nV4c16@nV31a7@environment-symbols nV31a7@environment-symbols) (set! nV31a9@environment (lambda nV48f4@imp* (let ((nV48f6@itc (nV3157@make-collector))) (let ((nV48fc@nV48f9 nV315d@imp-collector) (nV48fd@nV48fb nV48f6@itc)) (let ((nV4900@swap (lambda () (let ((nV4902@t (nV48fc@nV48f9))) (begin (nV48fc@nV48f9 nV48fd@nV48fb) (set! nV48fd@nV48fb nV4902@t)))))) (dynamic-wind nV4900@swap (lambda () (call-with-values (lambda () (nV3153@parse-import-spec* nV48f4@imp*)) (lambda (nV4908@nV4905 nV4909@nV4907) (let ((nV490c@subst-labels nV4909@nV4907) (nV490d@subst-names nV4908@nV4905)) (make-simple-struct 'env '4 (list nV490d@subst-names nV490c@subst-labels nV48f6@itc)))))) nV4900@swap)))))) (set! nV4c17@nV31a9@environment nV31a9@environment) (set! nV31ab@null-environment (lambda (nV4910@n) (begin (if (not (eqv? nV4910@n '5)) (assertion-violation 'null-environment '"not 5" nV4910@n) (void)) (nV31a9@environment '(psyntax null-environment-5))))) (set! nV4c18@nV31ab@null-environment nV31ab@null-environment) (set! nV31ad@scheme-report-environment (lambda (nV4912@n) (begin (if (not (eqv? nV4912@n '5)) (assertion-violation 'scheme-report-environment '"not 5" nV4912@n) (void)) (nV31a9@environment '(psyntax scheme-report-environment-5))))) (set! nV4c19@nV31ad@scheme-report-environment nV31ad@scheme-report-environment) (set! nV31af@expand (lambda (nV4914@x nV4915@env) (if (nV3175@env? nV4915@env) (let ((nV4918@rib (nV3155@make-top-rib (nV3177@env-names nV4915@env) (nV317b@env-labels nV4915@env)))) (let ((nV491a@x (make-simple-struct 'stx '5 (list nV4914@x nV2e6e@top-mark* (list nV4918@rib) '()))) (nV491b@itc (nV317f@env-itc nV4915@env)) (nV491c@rtc (nV3157@make-collector)) (nV491d@vtc (nV3157@make-collector))) (let ((nV4922@x (let ((nV4934@nV4925 nV31e1@top-level-context) (nV4935@nV4927 nV3159@inv-collector) (nV4936@nV4929 nV315b@vis-collector) (nV4937@nV492b nV315d@imp-collector) (nV4938@nV492d '#f) (nV4939@nV492f nV491c@rtc) (nV493a@nV4931 nV491d@vtc) (nV493b@nV4933 nV491b@itc)) (let ((nV4944@swap (lambda () (begin (let ((nV4946@t (nV4934@nV4925))) (begin (nV4934@nV4925 nV4938@nV492d) (set! nV4938@nV492d nV4946@t))) (let ((nV4948@t (nV4935@nV4927))) (begin (nV4935@nV4927 nV4939@nV492f) (set! nV4939@nV492f nV4948@t))) (let ((nV494a@t (nV4936@nV4929))) (begin (nV4936@nV4929 nV493a@nV4931) (set! nV493a@nV4931 nV494a@t))) (let ((nV494c@t (nV4937@nV492b))) (begin (nV4937@nV492b nV493b@nV4933) (set! nV493b@nV4933 nV494c@t))))))) (dynamic-wind nV4944@swap (lambda () (nV3113@chi-expr nV491a@x '() '())) nV4944@swap))))) (begin (nV2ea6@seal-rib! nV4918@rib) (values nV4922@x (nV491c@rtc)))))) (if (nV318f@interaction-env? nV4915@env) (let ((nV494e@rib (nV3191@interaction-env-rib nV4915@env)) (nV494f@r (nV3195@interaction-env-r nV4915@env)) (nV4950@rtc (nV3157@make-collector))) (let ((nV4954@x (make-simple-struct 'stx '5 (list nV4914@x nV2e6e@top-mark* (list nV494e@rib) '())))) (call-with-values (lambda () (let ((nV496a@nV495b nV31e1@top-level-context) (nV496b@nV495d nV3159@inv-collector) (nV496c@nV495f nV315b@vis-collector) (nV496d@nV4961 nV315d@imp-collector) (nV496e@nV4963 nV4915@env) (nV496f@nV4965 nV4950@rtc) (nV4970@nV4967 (nV3157@make-collector)) (nV4971@nV4969 (nV3157@make-collector))) (let ((nV497a@swap (lambda () (begin (let ((nV497c@t (nV496a@nV495b))) (begin (nV496a@nV495b nV496e@nV4963) (set! nV496e@nV4963 nV497c@t))) (let ((nV497e@t (nV496b@nV495d))) (begin (nV496b@nV495d nV496f@nV4965) (set! nV496f@nV4965 nV497e@t))) (let ((nV4980@t (nV496c@nV495f))) (begin (nV496c@nV495f nV4970@nV4967) (set! nV4970@nV4967 nV4980@t))) (let ((nV4982@t (nV496d@nV4961))) (begin (nV496d@nV4961 nV4971@nV4969) (set! nV4971@nV4969 nV4982@t))))))) (dynamic-wind nV497a@swap (lambda () (nV3161@chi-interaction-expr nV4954@x nV494e@rib nV494f@r)) nV497a@swap)))) (lambda (nV4984@nV4957 nV4985@nV4959) (let ((nV4988@r^ nV4985@nV4959) (nV4989@e nV4984@nV4957)) (begin (nV3197@set-interaction-env-r! nV4915@env nV4988@r^) (values nV4989@e (nV4950@rtc)))))))) (assertion-violation 'expand '"not an environment" nV4915@env))))) (set! nV4c1a@nV31af@expand nV31af@expand) (set! nV31b1@eval (lambda (nV498c@x nV498d@env) (begin (if (not (nV31a5@environment? nV498d@env)) (error 'eval '"not an environment" nV498d@env) (void)) (call-with-values (lambda () (nV31af@expand nV498c@x nV498d@env)) (lambda (nV4994@nV4991 nV4995@nV4993) (let ((nV4998@invoke-req* nV4995@nV4993) (nV4999@x nV4994@nV4991)) (begin (for-each nV2cff@nV2b3d@invoke-library nV4998@invoke-req*) (eval-core (nV2a79@nV2a31@expanded->core nV4999@x))))))))) (set! nV4c1b@nV31b1@eval nV31b1@eval) (set! nV31b3@library-expander (lambda nV4a0a (let ((nV4a0b (length nV4a0a))) (if (= nV4a0b '3) (apply (lambda (nV499c@x nV499d@filename nV499e@verify-name) (let ((nV49a3@build-visit-code '#f) (nV49a5@visit! '#f)) (begin (set! nV49a3@build-visit-code (lambda (nV49f8@macro*) (if (null? nV49f8@macro*) (nV2e50@nV2dab@build-void) (nV2e4f@nV2da9@build-sequence '#f (map (lambda (nV49fa@x) (let ((nV49fc@loc (car nV49fa@x)) (nV49fd@src (cddr nV49fa@x))) (list 'set! nV49fc@loc nV49fd@src))) nV49f8@macro*))))) (set! nV49a5@visit! (lambda (nV49f0@macro*) (for-each (lambda (nV49f2@x) (let ((nV49f4@loc (car nV49f2@x)) (nV49f5@proc (cadr nV49f2@x))) (set-symbol-value! nV49f4@loc nV49f5@proc))) nV49f0@macro*))) (call-with-values (lambda () (nV3165@core-library-expander nV499c@x nV499e@verify-name)) (lambda (nV49b8@nV49a7 nV49b9@nV49a9 nV49ba@nV49ab nV49bb@nV49ad nV49bc@nV49af nV49bd@nV49b1 nV49be@nV49b3 nV49bf@nV49b5 nV49c0@nV49b7) (let ((nV49ca@export-env nV49c0@nV49b7) (nV49cb@export-subst nV49bf@nV49b5) (nV49cc@macro* nV49be@nV49b3) (nV49cd@invoke-code nV49bd@nV49b1) (nV49ce@vis* nV49bc@nV49af) (nV49cf@inv* nV49bb@nV49ad) (nV49d0@imp* nV49ba@nV49ab) (nV49d1@ver nV49b9@nV49a9) (nV49d2@name nV49b8@nV49a7)) (let ((nV49dc@id (gensym)) (nV49dd@name nV49d2@name) (nV49de@ver nV49d1@ver) (nV49df@imp* (map nV2d04@nV2b47@library-spec nV49d0@imp*)) (nV49e0@vis* (map nV2d04@nV2b47@library-spec nV49ce@vis*)) (nV49e1@inv* (map nV2d04@nV2b47@library-spec nV49cf@inv*)) (nV49e2@visit-proc (lambda () (nV49a5@visit! nV49cc@macro*))) (nV49e3@invoke-proc (lambda () (eval-core (nV2a79@nV2a31@expanded->core nV49cd@invoke-code)))) (nV49e4@visit-code (nV49a3@build-visit-code nV49cc@macro*)) (nV49e5@invoke-code nV49cd@invoke-code)) (begin (nV2cfd@nV2b39@install-library nV49dc@id nV49dd@name nV49de@ver nV49df@imp* nV49e0@vis* nV49e1@inv* nV49cb@export-subst nV49ca@export-env nV49e2@visit-proc nV49e3@invoke-proc nV49e4@visit-code nV49e5@invoke-code '#t nV499d@filename) (values nV49dc@id nV49dd@name nV49de@ver nV49df@imp* nV49e0@vis* nV49e1@inv* nV49e5@invoke-code nV49e4@visit-code nV49cb@export-subst nV49ca@export-env))))))))) nV4a0a) (if (= nV4a0b '2) (apply (lambda (nV4a00@x nV4a01@filename) (nV31b3@library-expander nV4a00@x nV4a01@filename (lambda (nV4a04@x) (values)))) nV4a0a) (if (= nV4a0b '1) (apply (lambda (nV4a06@x) (nV31b3@library-expander nV4a06@x '#f (lambda (nV4a08@x) (values)))) nV4a0a) (error 'apply '"invalid arg count"))))))) (set! nV4c1c@nV31b3@library-expander nV31b3@library-expander) (set! nV31b5@boot-library-expand (lambda (nV4a0c@x) (call-with-values (lambda () (nV31b3@library-expander nV4a0c@x)) (lambda (nV4a22@nV4a0f nV4a23@nV4a11 nV4a24@nV4a13 nV4a25@nV4a15 nV4a26@nV4a17 nV4a27@nV4a19 nV4a28@nV4a1b nV4a29@nV4a1d nV4a2a@nV4a1f nV4a2b@nV4a21) (let ((nV4a36@export-env nV4a2b@nV4a21) (nV4a37@export-subst nV4a2a@nV4a1f) (nV4a38@visit-code nV4a29@nV4a1d) (nV4a39@invoke-code nV4a28@nV4a1b) (nV4a3a@inv* nV4a27@nV4a19) (nV4a3b@vis* nV4a26@nV4a17) (nV4a3c@imp* nV4a25@nV4a15) (nV4a3d@ver nV4a24@nV4a13) (nV4a3e@name nV4a23@nV4a11) (nV4a3f@id nV4a22@nV4a0f)) (values nV4a3e@name nV4a39@invoke-code nV4a37@export-subst nV4a36@export-env)))))) (set! nV4c1d@nV31b5@boot-library-expand nV31b5@boot-library-expand) (set! nV31b7@rev-map-append (lambda (nV4a4a@f nV4a4b@ls nV4a4c@ac) (if (null? nV4a4b@ls) nV4a4c@ac (nV31b7@rev-map-append nV4a4a@f (cdr nV4a4b@ls) (cons (nV4a4a@f (car nV4a4b@ls)) nV4a4c@ac))))) (set! nV4c1e@nV31b7@rev-map-append nV31b7@rev-map-append) (set! nV31b9@build-exports (lambda (nV4a50@lex*+loc* nV4a51@init*) (nV2e4f@nV2da9@build-sequence '#f (cons (nV2e50@nV2dab@build-void) (nV31b7@rev-map-append (lambda (nV4a54@x) (list 'set! (cdr nV4a54@x) (car nV4a54@x))) nV4a50@lex*+loc* nV4a51@init*))))) (set! nV4c1f@nV31b9@build-exports nV31b9@build-exports) (set! nV31bb@make-export-subst (lambda (nV4a56@name* nV4a57@id*) (map (lambda (nV4a5a@name nV4a5b@id) (let ((nV4a5e@label (nV2f00@id->label nV4a5b@id))) (begin (if (not nV4a5e@label) (nV31d1@syntax-violation '#f '"cannot export unbound identifier" nV4a5b@id) (void)) (cons nV4a5a@name nV4a5e@label)))) nV4a56@name* nV4a57@id*))) (set! nV4c20@nV31bb@make-export-subst nV31bb@make-export-subst) (set! nV31bd@make-export-env/macros (lambda (nV4a60@lex* nV4a61@loc* nV4a62@r) (let ((nV4a67@lookup '#f)) (begin (set! nV4a67@lookup (lambda (nV4a84@x) (let nV4a8c@f ((nV4a86@x nV4a84@x) (nV4a87@lex* nV4a60@lex*) (nV4a88@loc* nV4a61@loc*)) (if (pair? nV4a87@lex*) (if (eq? nV4a86@x (car nV4a87@lex*)) (car nV4a88@loc*) (nV4a8c@f nV4a86@x (cdr nV4a87@lex*) (cdr nV4a88@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) (let nV4a70@f ((nV4a68@r nV4a62@r) (nV4a69@env '()) (nV4a6a@global* '()) (nV4a6b@macro* '())) (if (null? nV4a68@r) (values nV4a69@env nV4a6a@global* nV4a6b@macro*) (let ((nV4a72@x (car nV4a68@r))) (let ((nV4a74@label (car nV4a72@x)) (nV4a75@b (cdr nV4a72@x))) (let ((nV4a78@t (nV2f06@binding-type nV4a75@b))) (if (memv nV4a78@t '(lexical)) (let ((nV4a7a@v (nV2f08@binding-value nV4a75@b))) (let ((nV4a7c@loc (nV4a67@lookup (nV307b@lexical-var nV4a7a@v))) (nV4a7d@type (if (nV307d@lexical-mutable? nV4a7a@v) 'mutable 'global))) (nV4a70@f (cdr nV4a68@r) (cons (cons* nV4a74@label nV4a7d@type nV4a7c@loc) nV4a69@env) (cons (cons (nV307b@lexical-var nV4a7a@v) nV4a7c@loc) nV4a6a@global*) nV4a6b@macro*))) (if (memv nV4a78@t '(local-macro)) (let ((nV4a80@loc (gensym))) (nV4a70@f (cdr nV4a68@r) (cons (cons* nV4a74@label 'global-macro nV4a80@loc) nV4a69@env) nV4a6a@global* (cons (cons nV4a80@loc (nV2f08@binding-value nV4a75@b)) nV4a6b@macro*))) (if (memv nV4a78@t '(local-macro!)) (let ((nV4a82@loc (gensym))) (nV4a70@f (cdr nV4a68@r) (cons (cons* nV4a74@label 'global-macro! nV4a82@loc) nV4a69@env) nV4a6a@global* (cons (cons nV4a82@loc (nV2f08@binding-value nV4a75@b)) nV4a6b@macro*))) (if (memv nV4a78@t '($rtd $module)) (nV4a70@f (cdr nV4a68@r) (cons nV4a72@x nV4a69@env) nV4a6a@global* nV4a6b@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (nV2f06@binding-type nV4a75@b) (nV2f08@binding-value nV4a75@b))))))))))))))) (set! nV4c21@nV31bd@make-export-env/macros nV31bd@make-export-env/macros) (set! nV31bf@generate-temporaries (lambda (nV4a8e@ls) (let ((nV4a90@t nV4a8e@ls)) (let ((nV4a92@ls/false (nV30f1@syntax-dispatch nV4a90@t 'each-any))) (if nV4a92@ls/false (apply (lambda (nV4a94@ls) (map (lambda (nV4a96@x) (make-simple-struct 'stx '5 (list (let ((nV4a98@x (nV31d7@syntax->datum nV4a96@x))) (if (or (symbol? nV4a98@x) (string? nV4a98@x)) (gensym nV4a98@x) (gensym 't))) nV2e6e@top-mark* '() '()))) nV4a94@ls)) nV4a92@ls/false) (let ((nV4a9a@t nV4a90@t)) (let ((nV4a9c@ls/false (nV30f1@syntax-dispatch nV4a9a@t '_))) (if nV4a9c@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) nV4a9c@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV4a9a@t))))))))) (set! nV4c22@nV31bf@generate-temporaries nV31bf@generate-temporaries) (set! nV31c1@free-identifier=? (lambda (nV4a9e@x nV4a9f@y) (if (nV2eea@id? nV4a9e@x) (if (nV2eea@id? nV4a9f@y) (nV2ef0@free-id=? nV4a9e@x nV4a9f@y) (assertion-violation 'free-identifier=? '"not an identifier" nV4a9f@y)) (assertion-violation 'free-identifier=? '"not an identifier" nV4a9e@x)))) (set! nV4c23@nV31c1@free-identifier=? nV31c1@free-identifier=?) (set! nV31c3@bound-identifier=? (lambda (nV4aa2@x nV4aa3@y) (if (nV2eea@id? nV4aa2@x) (if (nV2eea@id? nV4aa3@y) (nV2eee@bound-id=? nV4aa2@x nV4aa3@y) (assertion-violation 'bound-identifier=? '"not an identifier" nV4aa3@y)) (assertion-violation 'bound-identifier=? '"not an identifier" nV4aa2@x)))) (set! nV4c24@nV31c3@bound-identifier=? nV31c3@bound-identifier=?) (set! nV31c5@make-source-condition (lambda (nV4aa6@x) (let ((nV4ab0@nV4aab '#f) (nV4ab2@nV4aad '#f) (nV4ab4@nV4aac '#f) (nV4ab7@nV4aaa '#f) (nV4ab9@make-source-condition '#f) (nV4abb@nV4aa8 '#f) (nV4abd@nV4aa9 '#f) (nV4abf@source-condition? '#f) (nV4ac1@source-filename '#f) (nV4ac3@source-character '#f)) (begin (set! nV4ab0@nV4aab (make-record-type-descriptor '&source-information nV4f06@nV4c4d@&condition-rtd 'nV4aae '#f '#f '#((immutable file-name) (immutable character)))) (set! nV4ab2@nV4aad '#f) (set! nV4ab4@nV4aac (make-record-constructor-descriptor nV4ab0@nV4aab nV4f07@nV4c4f@&condition-rcd nV4ab2@nV4aad)) (set! nV4ab7@nV4aaa (record-predicate nV4ab0@nV4aab)) (set! nV4ab9@make-source-condition (record-constructor nV4ab4@nV4aac)) (set! nV4abb@nV4aa8 (record-accessor nV4ab0@nV4aab '0)) (set! nV4abd@nV4aa9 (record-accessor nV4ab0@nV4aab '1)) (set! nV4abf@source-condition? (condition-predicate nV4ab0@nV4aab)) (set! nV4ac1@source-filename (condition-accessor nV4ab0@nV4aab nV4abb@nV4aa8)) (set! nV4ac3@source-character (condition-accessor nV4ab0@nV4aab nV4abd@nV4aa9)) (if (pair? nV4aa6@x) (nV4ab9@make-source-condition (car nV4aa6@x) (cdr nV4aa6@x)) (condition)))))) (set! nV4c25@nV31c5@make-source-condition nV31c5@make-source-condition) (set! nV31c7@extract-position-condition (lambda (nV4ac4@x) (nV31c5@make-source-condition (nV31c9@expression-position nV4ac4@x)))) (set! nV4c26@nV31c7@extract-position-condition nV31c7@extract-position-condition) (set! nV31c9@expression-position (lambda (nV4ac6@x) (and (nV2eb6@stx? nV4ac6@x) (let ((nV4ac8@x (nV2eb8@stx-expr nV4ac6@x))) (and (nV2a17@nV28e9@annotation? nV4ac8@x) (nV2a18@nV28eb@annotation-source nV4ac8@x)))))) (set! nV4c27@nV31c9@expression-position nV31c9@expression-position) (set! nV31cb@assertion-error (lambda (nV4aca@expr nV4acb@pos) (raise (condition (nV4f36@nV4d11@make-assertion-violation) (nV4f48@nV4d43@make-who-condition 'assert) (nV4f0c@nV4ca4@make-message-condition '"assertion failed") (nV4f3e@nV4d28@make-irritants-condition (list nV4aca@expr)) (nV31c5@make-source-condition nV4acb@pos))))) (set! nV4c28@nV31cb@assertion-error nV31cb@assertion-error) (set! nV31cd@syntax-error (lambda (nV4ace@x . nV4ad0@args) (begin (if (not (for-all string? nV4ad0@args)) (assertion-violation 'syntax-error '"invalid argument" nV4ad0@args) (void)) (raise (condition (nV4f0c@nV4ca4@make-message-condition (if (null? nV4ad0@args) '"invalid syntax" (apply string-append nV4ad0@args))) (nV4f6a@nV4d9f@make-syntax-violation (nV31d7@syntax->datum nV4ace@x) '#f) (nV31c7@extract-position-condition nV4ace@x)))))) (set! nV4c29@nV31cd@syntax-error nV31cd@syntax-error) (set! nV31cf@syntax-violation* (lambda (nV4ad2@who nV4ad3@msg nV4ad4@form nV4ad5@condition-object) (begin (if (not (string? nV4ad3@msg)) (assertion-violation 'syntax-violation '"message is not a string" nV4ad3@msg) (void)) (let ((nV4ada@who (if (or (string? nV4ad2@who) (symbol? nV4ad2@who)) nV4ad2@who (if (not nV4ad2@who) (let ((nV4adc@t nV4ad4@form)) (let ((nV4ade@ls/false (nV30f1@syntax-dispatch nV4adc@t 'any))) (if (and nV4ade@ls/false (apply (lambda (nV4ae0@id) (nV2eea@id? nV4ae0@id)) nV4ade@ls/false)) (apply (lambda (nV4ae2@id) (nV31d7@syntax->datum nV4ae2@id)) nV4ade@ls/false) (let ((nV4ae4@t nV4adc@t)) (let ((nV4ae6@ls/false (nV30f1@syntax-dispatch nV4ae4@t '(any . any)))) (if (and nV4ae6@ls/false (apply (lambda (nV4ae8@id nV4ae9@rest) (nV2eea@id? nV4ae8@id)) nV4ae6@ls/false)) (apply (lambda (nV4aec@id nV4aed@rest) (nV31d7@syntax->datum nV4aec@id)) nV4ae6@ls/false) (let ((nV4af0@t nV4ae4@t)) (let ((nV4af2@ls/false (nV30f1@syntax-dispatch nV4af0@t '_))) (if nV4af2@ls/false (apply (lambda () '#f) nV4af2@ls/false) (nV31d1@syntax-violation '#f '"invalid syntax" nV4af0@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" nV4ad2@who))))) (raise (condition (if nV4ada@who (nV4f48@nV4d43@make-who-condition nV4ada@who) (condition)) (nV4f0c@nV4ca4@make-message-condition nV4ad3@msg) nV4ad5@condition-object (nV31c7@extract-position-condition nV4ad4@form))))))) (set! nV4c2a@nV31cf@syntax-violation* nV31cf@syntax-violation*) (set! nV31d1@syntax-violation (lambda nV4b02 (let ((nV4b03 (length nV4b02))) (if (= nV4b03 '3) (apply (lambda (nV4af4@who nV4af5@msg nV4af6@form) (nV31d1@syntax-violation nV4af4@who nV4af5@msg nV4af6@form '#f)) nV4b02) (if (= nV4b03 '4) (apply (lambda (nV4afa@who nV4afb@msg nV4afc@form nV4afd@subform) (nV31cf@syntax-violation* nV4afa@who nV4afb@msg nV4afc@form (nV4f6a@nV4d9f@make-syntax-violation (nV31d7@syntax->datum nV4afc@form) (nV31d7@syntax->datum nV4afd@subform)))) nV4b02) (error 'apply '"invalid arg count")))))) (set! nV4c2b@nV31d1@syntax-violation nV31d1@syntax-violation) (set! nV31d3@identifier? (lambda (nV4b04@x) (nV2eea@id? nV4b04@x))) (set! nV4c2c@nV31d3@identifier? nV31d3@identifier?) (set! nV31d5@datum->syntax (lambda (nV4b06@id nV4b07@datum) (if (nV2eea@id? nV4b06@id) (nV2eca@datum->stx nV4b06@id nV4b07@datum) (assertion-violation 'datum->syntax '"not an identifier" nV4b06@id)))) (set! nV4c2d@nV31d5@datum->syntax nV31d5@datum->syntax) (set! nV31d7@syntax->datum (lambda (nV4b0a@x) (nV2efe@stx->datum nV4b0a@x))) (set! nV4c2e@nV31d7@syntax->datum nV31d7@syntax->datum) (set! nV31d9@ungensym-all (lambda (nV4b0c@code) (if (pair? nV4b0c@code) (cons (nV31d9@ungensym-all (car nV4b0c@code)) (nV31d9@ungensym-all (cdr nV4b0c@code))) (if (symbol? nV4b0c@code) (ungensym nV4b0c@code) nV4b0c@code)))) (set! nV4c2f@nV31d9@ungensym-all nV31d9@ungensym-all) (set! nV31db@compile-r6rs-top-level (lambda (nV4b0e@x*) (call-with-values (lambda () (nV3169@top-level-expander nV4b0e@x*)) (lambda (nV4b14@nV4b11 nV4b15@nV4b13) (let ((nV4b18@invoke-code nV4b15@nV4b13) (nV4b19@lib* nV4b14@nV4b11)) (lambda () (begin (for-each nV2cff@nV2b3d@invoke-library nV4b19@lib*) (let ((nV4b1c@expanded (nV2a79@nV2a31@expanded->core nV4b18@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (nV31d9@ungensym-all nV4b1c@expanded)) (void)) (eval-core nV4b1c@expanded)))))))))) (set! nV4c30@nV31db@compile-r6rs-top-level nV31db@compile-r6rs-top-level) (set! nV31dd@pre-compile-r6rs-top-level (lambda (nV4b1e@x*) (call-with-values (lambda () (nV3169@top-level-expander nV4b1e@x*)) (lambda (nV4b24@nV4b21 nV4b25@nV4b23) (let ((nV4b28@invoke-code nV4b25@nV4b23) (nV4b29@lib* nV4b24@nV4b21)) (begin (for-each nV2cff@nV2b3d@invoke-library nV4b29@lib*) (nV2a21@nV28fd@compile-core (nV2a79@nV2a31@expanded->core nV4b28@invoke-code)))))))) (set! nV4c31@nV31dd@pre-compile-r6rs-top-level nV31dd@pre-compile-r6rs-top-level) (set! nV31df@interaction-environment (let ((nV4b2c@the-env '#f)) (lambda () (or nV4b2c@the-env (let ((nV4b2e@lib (nV2cf8@nV2b2f@find-library-by-name '(mosh interaction))) (nV4b2f@rib (nV2e9e@make-empty-rib))) (begin (let ((nV4b32@subst (nV2cda@nV2af3@library-subst nV4b2e@lib))) (begin (nV2e8a@set-rib-sym*! nV4b2f@rib (map car nV4b32@subst)) (nV2e8e@set-rib-mark**! nV4b2f@rib (map (lambda (nV4b34@x) nV2e6e@top-mark*) nV4b32@subst)) (nV2e92@set-rib-label*! nV4b2f@rib (map cdr nV4b32@subst)))) (let ((nV4b36@env (make-simple-struct 'interaction-env '4 (list nV4b2f@rib '() '())))) (begin (set! nV4b2c@the-env nV4b36@env) nV4b36@env)))))))) (set! nV4c32@nV31df@interaction-environment nV31df@interaction-environment) (set! nV31e1@top-level-context (nV2a23@nV2901@make-parameter '#f)) (set! nV4c33@nV31e1@top-level-context nV31e1@top-level-context) (nV2cf5@nV2b29@current-library-expander nV31b3@library-expander))
(begin (set! nV4c42@nV4c3d (unspecified)) (set! nV4c44@nV4c3f (unspecified)) (set! nV4c46@nV4c3e (unspecified)) (set! nV4c49@&condition? (unspecified)) (set! nV4c4b@make-&condition (unspecified)) (set! nV4c4d@&condition-rtd (unspecified)) (set! nV4c4f@&condition-rcd (unspecified)) (set! nV4c9b@nV4c96 (unspecified)) (set! nV4c9d@nV4c98 (unspecified)) (set! nV4c9f@nV4c97 (unspecified)) (set! nV4ca2@p? (unspecified)) (set! nV4ca4@make-message-condition (unspecified)) (set! nV4ca6@nV4c95 (unspecified)) (set! nV4ca8@message-condition? (unspecified)) (set! nV4caa@condition-message (unspecified)) (set! nV4cac@&message-rtd (unspecified)) (set! nV4cae@&message-rcd (unspecified)) (set! nV4cb4@nV4caf (unspecified)) (set! nV4cb6@nV4cb1 (unspecified)) (set! nV4cb8@nV4cb0 (unspecified)) (set! nV4cbb@p? (unspecified)) (set! nV4cbd@make-warning (unspecified)) (set! nV4cbf@warning? (unspecified)) (set! nV4cc1@&warning-rtd (unspecified)) (set! nV4cc3@&warning-rcd (unspecified)) (set! nV4cc9@nV4cc4 (unspecified)) (set! nV4ccb@nV4cc6 (unspecified)) (set! nV4ccd@nV4cc5 (unspecified)) (set! nV4cd0@p? (unspecified)) (set! nV4cd2@make-serious-condition (unspecified)) (set! nV4cd4@serious-condition? (unspecified)) (set! nV4cd6@&serious-rtd (unspecified)) (set! nV4cd8@&serious-rcd (unspecified)) (set! nV4cde@nV4cd9 (unspecified)) (set! nV4ce0@nV4cdb (unspecified)) (set! nV4ce2@nV4cda (unspecified)) (set! nV4ce5@p? (unspecified)) (set! nV4ce7@make-error (unspecified)) (set! nV4ce9@error? (unspecified)) (set! nV4ceb@&error-rtd (unspecified)) (set! nV4ced@&error-rcd (unspecified)) (set! nV4cf3@nV4cee (unspecified)) (set! nV4cf5@nV4cf0 (unspecified)) (set! nV4cf7@nV4cef (unspecified)) (set! nV4cfa@p? (unspecified)) (set! nV4cfc@make-violation (unspecified)) (set! nV4cfe@violation? (unspecified)) (set! nV4d00@&violation-rtd (unspecified)) (set! nV4d02@&violation-rcd (unspecified)) (set! nV4d08@nV4d03 (unspecified)) (set! nV4d0a@nV4d05 (unspecified)) (set! nV4d0c@nV4d04 (unspecified)) (set! nV4d0f@p? (unspecified)) (set! nV4d11@make-assertion-violation (unspecified)) (set! nV4d13@assertion-violation? (unspecified)) (set! nV4d15@&assertion-rtd (unspecified)) (set! nV4d17@&assertion-rcd (unspecified)) (set! nV4d1f@nV4d1a (unspecified)) (set! nV4d21@nV4d1c (unspecified)) (set! nV4d23@nV4d1b (unspecified)) (set! nV4d26@p? (unspecified)) (set! nV4d28@make-irritants-condition (unspecified)) (set! nV4d2a@nV4d19 (unspecified)) (set! nV4d2c@irritants-condition? (unspecified)) (set! nV4d2e@condition-irritants (unspecified)) (set! nV4d30@&irritants-rtd (unspecified)) (set! nV4d32@&irritants-rcd (unspecified)) (set! nV4d3a@nV4d35 (unspecified)) (set! nV4d3c@nV4d37 (unspecified)) (set! nV4d3e@nV4d36 (unspecified)) (set! nV4d41@p? (unspecified)) (set! nV4d43@make-who-condition (unspecified)) (set! nV4d45@nV4d34 (unspecified)) (set! nV4d47@who-condition? (unspecified)) (set! nV4d49@condition-who (unspecified)) (set! nV4d4b@&who-rtd (unspecified)) (set! nV4d4d@&who-rcd (unspecified)) (set! nV4d53@nV4d4e (unspecified)) (set! nV4d55@nV4d50 (unspecified)) (set! nV4d57@nV4d4f (unspecified)) (set! nV4d5a@p? (unspecified)) (set! nV4d5c@make-non-continuable-violation (unspecified)) (set! nV4d5e@non-continuable-violation? (unspecified)) (set! nV4d60@&non-continuable-rtd (unspecified)) (set! nV4d62@&non-continuable-rcd (unspecified)) (set! nV4d68@nV4d63 (unspecified)) (set! nV4d6a@nV4d65 (unspecified)) (set! nV4d6c@nV4d64 (unspecified)) (set! nV4d6f@p? (unspecified)) (set! nV4d71@make-implementation-restriction-violation (unspecified)) (set! nV4d73@implementation-restriction-violation? (unspecified)) (set! nV4d75@&implementation-restriction-rtd (unspecified)) (set! nV4d77@&implementation-restriction-rcd (unspecified)) (set! nV4d7d@nV4d78 (unspecified)) (set! nV4d7f@nV4d7a (unspecified)) (set! nV4d81@nV4d79 (unspecified)) (set! nV4d84@p? (unspecified)) (set! nV4d86@make-lexical-violation (unspecified)) (set! nV4d88@lexical-violation? (unspecified)) (set! nV4d8a@&lexical-rtd (unspecified)) (set! nV4d8c@&lexical-rcd (unspecified)) (set! nV4d96@nV4d91 (unspecified)) (set! nV4d98@nV4d93 (unspecified)) (set! nV4d9a@nV4d92 (unspecified)) (set! nV4d9d@p? (unspecified)) (set! nV4d9f@make-syntax-violation (unspecified)) (set! nV4da1@nV4d8e (unspecified)) (set! nV4da3@nV4d90 (unspecified)) (set! nV4da5@syntax-violation? (unspecified)) (set! nV4da7@syntax-violation-form (unspecified)) (set! nV4da9@syntax-violation-subform (unspecified)) (set! nV4dab@&syntax-rtd (unspecified)) (set! nV4dad@&syntax-rcd (unspecified)) (set! nV4db3@nV4dae (unspecified)) (set! nV4db5@nV4db0 (unspecified)) (set! nV4db7@nV4daf (unspecified)) (set! nV4dba@p? (unspecified)) (set! nV4dbc@make-undefined-violation (unspecified)) (set! nV4dbe@undefined-violation? (unspecified)) (set! nV4dc0@&undefined-rtd (unspecified)) (set! nV4dc2@&undefined-rcd (unspecified)) (set! nV4dc8@nV4dc3 (unspecified)) (set! nV4dca@nV4dc5 (unspecified)) (set! nV4dcc@nV4dc4 (unspecified)) (set! nV4dcf@p? (unspecified)) (set! nV4dd1@make-i/o-error (unspecified)) (set! nV4dd3@i/o-error? (unspecified)) (set! nV4dd5@&i/o-rtd (unspecified)) (set! nV4dd7@&i/o-rcd (unspecified)) (set! nV4ddd@nV4dd8 (unspecified)) (set! nV4ddf@nV4dda (unspecified)) (set! nV4de1@nV4dd9 (unspecified)) (set! nV4de4@p? (unspecified)) (set! nV4de6@make-i/o-read-error (unspecified)) (set! nV4de8@i/o-read-error? (unspecified)) (set! nV4dea@&i/o-read-rtd (unspecified)) (set! nV4dec@&i/o-read-rcd (unspecified)) (set! nV4df2@nV4ded (unspecified)) (set! nV4df4@nV4def (unspecified)) (set! nV4df6@nV4dee (unspecified)) (set! nV4df9@p? (unspecified)) (set! nV4dfb@make-i/o-write-error (unspecified)) (set! nV4dfd@i/o-write-error? (unspecified)) (set! nV4dff@&i/o-write-rtd (unspecified)) (set! nV4e01@&i/o-write-rcd (unspecified)) (set! nV4e09@nV4e04 (unspecified)) (set! nV4e0b@nV4e06 (unspecified)) (set! nV4e0d@nV4e05 (unspecified)) (set! nV4e10@p? (unspecified)) (set! nV4e12@make-i/o-invalid-position-error (unspecified)) (set! nV4e14@nV4e03 (unspecified)) (set! nV4e16@i/o-invalid-position-error? (unspecified)) (set! nV4e18@i/o-error-position (unspecified)) (set! nV4e1a@&i/o-invalid-position-rtd (unspecified)) (set! nV4e1c@&i/o-invalid-position-rcd (unspecified)) (set! nV4e24@nV4e1f (unspecified)) (set! nV4e26@nV4e21 (unspecified)) (set! nV4e28@nV4e20 (unspecified)) (set! nV4e2b@p? (unspecified)) (set! nV4e2d@make-i/o-filename-error (unspecified)) (set! nV4e2f@nV4e1e (unspecified)) (set! nV4e31@i/o-filename-error? (unspecified)) (set! nV4e33@i/o-error-filename (unspecified)) (set! nV4e35@&i/o-filename-rtd (unspecified)) (set! nV4e37@&i/o-filename-rcd (unspecified)) (set! nV4e3d@nV4e38 (unspecified)) (set! nV4e3f@nV4e3a (unspecified)) (set! nV4e41@nV4e39 (unspecified)) (set! nV4e44@p? (unspecified)) (set! nV4e46@make-i/o-file-protection-error (unspecified)) (set! nV4e48@i/o-file-protection-error? (unspecified)) (set! nV4e4a@&i/o-file-protection-rtd (unspecified)) (set! nV4e4c@&i/o-file-protection-rcd (unspecified)) (set! nV4e52@nV4e4d (unspecified)) (set! nV4e54@nV4e4f (unspecified)) (set! nV4e56@nV4e4e (unspecified)) (set! nV4e59@p? (unspecified)) (set! nV4e5b@make-i/o-file-is-read-only-error (unspecified)) (set! nV4e5d@i/o-file-is-read-only-error? (unspecified)) (set! nV4e5f@&i/o-file-is-read-only-rtd (unspecified)) (set! nV4e61@&i/o-file-is-read-only-rcd (unspecified)) (set! nV4e67@nV4e62 (unspecified)) (set! nV4e69@nV4e64 (unspecified)) (set! nV4e6b@nV4e63 (unspecified)) (set! nV4e6e@p? (unspecified)) (set! nV4e70@make-i/o-file-already-exists-error (unspecified)) (set! nV4e72@i/o-file-already-exists-error? (unspecified)) (set! nV4e74@&i/o-file-already-exists-rtd (unspecified)) (set! nV4e76@&i/o-file-already-exists-rcd (unspecified)) (set! nV4e7c@nV4e77 (unspecified)) (set! nV4e7e@nV4e79 (unspecified)) (set! nV4e80@nV4e78 (unspecified)) (set! nV4e83@p? (unspecified)) (set! nV4e85@make-i/o-file-does-not-exist-error (unspecified)) (set! nV4e87@i/o-file-does-not-exist-error? (unspecified)) (set! nV4e89@&i/o-file-does-not-exist-rtd (unspecified)) (set! nV4e8b@&i/o-file-does-not-exist-rcd (unspecified)) (set! nV4e93@nV4e8e (unspecified)) (set! nV4e95@nV4e90 (unspecified)) (set! nV4e97@nV4e8f (unspecified)) (set! nV4e9a@p? (unspecified)) (set! nV4e9c@make-i/o-port-error (unspecified)) (set! nV4e9e@nV4e8d (unspecified)) (set! nV4ea0@i/o-port-error? (unspecified)) (set! nV4ea2@i/o-error-port (unspecified)) (set! nV4ea4@&i/o-port-rtd (unspecified)) (set! nV4ea6@&i/o-port-rcd (unspecified)) (set! nV4eac@nV4ea7 (unspecified)) (set! nV4eae@nV4ea9 (unspecified)) (set! nV4eb0@nV4ea8 (unspecified)) (set! nV4eb3@p? (unspecified)) (set! nV4eb5@make-i/o-decoding-error (unspecified)) (set! nV4eb7@i/o-decoding-error? (unspecified)) (set! nV4eb9@&i/o-decoding-rtd (unspecified)) (set! nV4ebb@&i/o-decoding-rcd (unspecified)) (set! nV4ec3@nV4ebe (unspecified)) (set! nV4ec5@nV4ec0 (unspecified)) (set! nV4ec7@nV4ebf (unspecified)) (set! nV4eca@p? (unspecified)) (set! nV4ecc@make-i/o-encoding-error (unspecified)) (set! nV4ece@nV4ebd (unspecified)) (set! nV4ed0@i/o-encoding-error? (unspecified)) (set! nV4ed2@i/o-encoding-error-char (unspecified)) (set! nV4ed4@&i/o-encoding-rtd (unspecified)) (set! nV4ed6@&i/o-encoding-rcd (unspecified)) (set! nV4edc@nV4ed7 (unspecified)) (set! nV4ede@nV4ed9 (unspecified)) (set! nV4ee0@nV4ed8 (unspecified)) (set! nV4ee3@p? (unspecified)) (set! nV4ee5@make-no-infinities-violation (unspecified)) (set! nV4ee7@no-infinities-violation? (unspecified)) (set! nV4ee9@&no-infinities-rtd (unspecified)) (set! nV4eeb@&no-infinities-rcd (unspecified)) (set! nV4ef1@nV4eec (unspecified)) (set! nV4ef3@nV4eee (unspecified)) (set! nV4ef5@nV4eed (unspecified)) (set! nV4ef8@p? (unspecified)) (set! nV4efa@make-no-nans-violation (unspecified)) (set! nV4efc@no-nans-violation? (unspecified)) (set! nV4efe@&no-nans-rtd (unspecified)) (set! nV4f00@&no-nans-rcd (unspecified)) (set! nV4c42@nV4c3d (make-record-type-descriptor '&condition '#f 'nV4c40 '#f '#f '#())) (set! nV4f01@nV4c42@nV4c3d nV4c42@nV4c3d) (set! nV4c44@nV4c3f '#f) (set! nV4f02@nV4c44@nV4c3f nV4c44@nV4c3f) (set! nV4c46@nV4c3e (make-record-constructor-descriptor nV4c42@nV4c3d '#f nV4c44@nV4c3f)) (set! nV4f03@nV4c46@nV4c3e nV4c46@nV4c3e) (set! nV4c49@&condition? (record-predicate nV4c42@nV4c3d)) (set! nV4f04@nV4c49@&condition? nV4c49@&condition?) (set! nV4c4b@make-&condition (record-constructor nV4c46@nV4c3e)) (set! nV4f05@nV4c4b@make-&condition nV4c4b@make-&condition) (set! nV4c4d@&condition-rtd nV4c42@nV4c3d) (set! nV4f06@nV4c4d@&condition-rtd nV4c4d@&condition-rtd) (set! nV4c4f@&condition-rcd nV4c46@nV4c3e) (set! nV4f07@nV4c4f@&condition-rcd nV4c4f@&condition-rcd) (set! nV4c9b@nV4c96 (make-record-type-descriptor '&message nV4c42@nV4c3d 'nV4c99 '#f '#f '#((immutable message)))) (set! nV4f08@nV4c9b@nV4c96 nV4c9b@nV4c96) (set! nV4c9d@nV4c98 '#f) (set! nV4f09@nV4c9d@nV4c98 nV4c9d@nV4c98) (set! nV4c9f@nV4c97 (make-record-constructor-descriptor nV4c9b@nV4c96 nV4c46@nV4c3e nV4c9d@nV4c98)) (set! nV4f0a@nV4c9f@nV4c97 nV4c9f@nV4c97) (set! nV4ca2@p? (record-predicate nV4c9b@nV4c96)) (set! nV4f0b@nV4ca2@p? nV4ca2@p?) (set! nV4ca4@make-message-condition (record-constructor nV4c9f@nV4c97)) (set! nV4f0c@nV4ca4@make-message-condition nV4ca4@make-message-condition) (set! nV4ca6@nV4c95 (record-accessor nV4c9b@nV4c96 '0)) (set! nV4f0d@nV4ca6@nV4c95 nV4ca6@nV4c95) (set! nV4ca8@message-condition? (condition-predicate nV4c9b@nV4c96)) (set! nV4f0e@nV4ca8@message-condition? nV4ca8@message-condition?) (set! nV4caa@condition-message (condition-accessor nV4c9b@nV4c96 nV4ca6@nV4c95)) (set! nV4f0f@nV4caa@condition-message nV4caa@condition-message) (set! nV4cac@&message-rtd nV4c9b@nV4c96) (set! nV4f10@nV4cac@&message-rtd nV4cac@&message-rtd) (set! nV4cae@&message-rcd nV4c9f@nV4c97) (set! nV4f11@nV4cae@&message-rcd nV4cae@&message-rcd) (set! nV4cb4@nV4caf (make-record-type-descriptor '&warning nV4c42@nV4c3d 'nV4cb2 '#f '#f '#())) (set! nV4f12@nV4cb4@nV4caf nV4cb4@nV4caf) (set! nV4cb6@nV4cb1 '#f) (set! nV4f13@nV4cb6@nV4cb1 nV4cb6@nV4cb1) (set! nV4cb8@nV4cb0 (make-record-constructor-descriptor nV4cb4@nV4caf nV4c46@nV4c3e nV4cb6@nV4cb1)) (set! nV4f14@nV4cb8@nV4cb0 nV4cb8@nV4cb0) (set! nV4cbb@p? (record-predicate nV4cb4@nV4caf)) (set! nV4f15@nV4cbb@p? nV4cbb@p?) (set! nV4cbd@make-warning (record-constructor nV4cb8@nV4cb0)) (set! nV4f16@nV4cbd@make-warning nV4cbd@make-warning) (set! nV4cbf@warning? (condition-predicate nV4cb4@nV4caf)) (set! nV4f17@nV4cbf@warning? nV4cbf@warning?) (set! nV4cc1@&warning-rtd nV4cb4@nV4caf) (set! nV4f18@nV4cc1@&warning-rtd nV4cc1@&warning-rtd) (set! nV4cc3@&warning-rcd nV4cb8@nV4cb0) (set! nV4f19@nV4cc3@&warning-rcd nV4cc3@&warning-rcd) (set! nV4cc9@nV4cc4 (make-record-type-descriptor '&serious nV4c42@nV4c3d 'nV4cc7 '#f '#f '#())) (set! nV4f1a@nV4cc9@nV4cc4 nV4cc9@nV4cc4) (set! nV4ccb@nV4cc6 '#f) (set! nV4f1b@nV4ccb@nV4cc6 nV4ccb@nV4cc6) (set! nV4ccd@nV4cc5 (make-record-constructor-descriptor nV4cc9@nV4cc4 nV4c46@nV4c3e nV4ccb@nV4cc6)) (set! nV4f1c@nV4ccd@nV4cc5 nV4ccd@nV4cc5) (set! nV4cd0@p? (record-predicate nV4cc9@nV4cc4)) (set! nV4f1d@nV4cd0@p? nV4cd0@p?) (set! nV4cd2@make-serious-condition (record-constructor nV4ccd@nV4cc5)) (set! nV4f1e@nV4cd2@make-serious-condition nV4cd2@make-serious-condition) (set! nV4cd4@serious-condition? (condition-predicate nV4cc9@nV4cc4)) (set! nV4f1f@nV4cd4@serious-condition? nV4cd4@serious-condition?) (set! nV4cd6@&serious-rtd nV4cc9@nV4cc4) (set! nV4f20@nV4cd6@&serious-rtd nV4cd6@&serious-rtd) (set! nV4cd8@&serious-rcd nV4ccd@nV4cc5) (set! nV4f21@nV4cd8@&serious-rcd nV4cd8@&serious-rcd) (set! nV4cde@nV4cd9 (make-record-type-descriptor '&error nV4cc9@nV4cc4 'nV4cdc '#f '#f '#())) (set! nV4f22@nV4cde@nV4cd9 nV4cde@nV4cd9) (set! nV4ce0@nV4cdb '#f) (set! nV4f23@nV4ce0@nV4cdb nV4ce0@nV4cdb) (set! nV4ce2@nV4cda (make-record-constructor-descriptor nV4cde@nV4cd9 nV4ccd@nV4cc5 nV4ce0@nV4cdb)) (set! nV4f24@nV4ce2@nV4cda nV4ce2@nV4cda) (set! nV4ce5@p? (record-predicate nV4cde@nV4cd9)) (set! nV4f25@nV4ce5@p? nV4ce5@p?) (set! nV4ce7@make-error (record-constructor nV4ce2@nV4cda)) (set! nV4f26@nV4ce7@make-error nV4ce7@make-error) (set! nV4ce9@error? (condition-predicate nV4cde@nV4cd9)) (set! nV4f27@nV4ce9@error? nV4ce9@error?) (set! nV4ceb@&error-rtd nV4cde@nV4cd9) (set! nV4f28@nV4ceb@&error-rtd nV4ceb@&error-rtd) (set! nV4ced@&error-rcd nV4ce2@nV4cda) (set! nV4f29@nV4ced@&error-rcd nV4ced@&error-rcd) (set! nV4cf3@nV4cee (make-record-type-descriptor '&violation nV4cc9@nV4cc4 'nV4cf1 '#f '#f '#())) (set! nV4f2a@nV4cf3@nV4cee nV4cf3@nV4cee) (set! nV4cf5@nV4cf0 '#f) (set! nV4f2b@nV4cf5@nV4cf0 nV4cf5@nV4cf0) (set! nV4cf7@nV4cef (make-record-constructor-descriptor nV4cf3@nV4cee nV4ccd@nV4cc5 nV4cf5@nV4cf0)) (set! nV4f2c@nV4cf7@nV4cef nV4cf7@nV4cef) (set! nV4cfa@p? (record-predicate nV4cf3@nV4cee)) (set! nV4f2d@nV4cfa@p? nV4cfa@p?) (set! nV4cfc@make-violation (record-constructor nV4cf7@nV4cef)) (set! nV4f2e@nV4cfc@make-violation nV4cfc@make-violation) (set! nV4cfe@violation? (condition-predicate nV4cf3@nV4cee)) (set! nV4f2f@nV4cfe@violation? nV4cfe@violation?) (set! nV4d00@&violation-rtd nV4cf3@nV4cee) (set! nV4f30@nV4d00@&violation-rtd nV4d00@&violation-rtd) (set! nV4d02@&violation-rcd nV4cf7@nV4cef) (set! nV4f31@nV4d02@&violation-rcd nV4d02@&violation-rcd) (set! nV4d08@nV4d03 (make-record-type-descriptor '&assertion nV4cf3@nV4cee 'nV4d06 '#f '#f '#())) (set! nV4f32@nV4d08@nV4d03 nV4d08@nV4d03) (set! nV4d0a@nV4d05 '#f) (set! nV4f33@nV4d0a@nV4d05 nV4d0a@nV4d05) (set! nV4d0c@nV4d04 (make-record-constructor-descriptor nV4d08@nV4d03 nV4cf7@nV4cef nV4d0a@nV4d05)) (set! nV4f34@nV4d0c@nV4d04 nV4d0c@nV4d04) (set! nV4d0f@p? (record-predicate nV4d08@nV4d03)) (set! nV4f35@nV4d0f@p? nV4d0f@p?) (set! nV4d11@make-assertion-violation (record-constructor nV4d0c@nV4d04)) (set! nV4f36@nV4d11@make-assertion-violation nV4d11@make-assertion-violation) (set! nV4d13@assertion-violation? (condition-predicate nV4d08@nV4d03)) (set! nV4f37@nV4d13@assertion-violation? nV4d13@assertion-violation?) (set! nV4d15@&assertion-rtd nV4d08@nV4d03) (set! nV4f38@nV4d15@&assertion-rtd nV4d15@&assertion-rtd) (set! nV4d17@&assertion-rcd nV4d0c@nV4d04) (set! nV4f39@nV4d17@&assertion-rcd nV4d17@&assertion-rcd) (set! nV4d1f@nV4d1a (make-record-type-descriptor '&irritants nV4c42@nV4c3d 'nV4d1d '#f '#f '#((immutable irritants)))) (set! nV4f3a@nV4d1f@nV4d1a nV4d1f@nV4d1a) (set! nV4d21@nV4d1c '#f) (set! nV4f3b@nV4d21@nV4d1c nV4d21@nV4d1c) (set! nV4d23@nV4d1b (make-record-constructor-descriptor nV4d1f@nV4d1a nV4c46@nV4c3e nV4d21@nV4d1c)) (set! nV4f3c@nV4d23@nV4d1b nV4d23@nV4d1b) (set! nV4d26@p? (record-predicate nV4d1f@nV4d1a)) (set! nV4f3d@nV4d26@p? nV4d26@p?) (set! nV4d28@make-irritants-condition (record-constructor nV4d23@nV4d1b)) (set! nV4f3e@nV4d28@make-irritants-condition nV4d28@make-irritants-condition) (set! nV4d2a@nV4d19 (record-accessor nV4d1f@nV4d1a '0)) (set! nV4f3f@nV4d2a@nV4d19 nV4d2a@nV4d19) (set! nV4d2c@irritants-condition? (condition-predicate nV4d1f@nV4d1a)) (set! nV4f40@nV4d2c@irritants-condition? nV4d2c@irritants-condition?) (set! nV4d2e@condition-irritants (condition-accessor nV4d1f@nV4d1a nV4d2a@nV4d19)) (set! nV4f41@nV4d2e@condition-irritants nV4d2e@condition-irritants) (set! nV4d30@&irritants-rtd nV4d1f@nV4d1a) (set! nV4f42@nV4d30@&irritants-rtd nV4d30@&irritants-rtd) (set! nV4d32@&irritants-rcd nV4d23@nV4d1b) (set! nV4f43@nV4d32@&irritants-rcd nV4d32@&irritants-rcd) (set! nV4d3a@nV4d35 (make-record-type-descriptor '&who nV4c42@nV4c3d 'nV4d38 '#f '#f '#((immutable who)))) (set! nV4f44@nV4d3a@nV4d35 nV4d3a@nV4d35) (set! nV4d3c@nV4d37 '#f) (set! nV4f45@nV4d3c@nV4d37 nV4d3c@nV4d37) (set! nV4d3e@nV4d36 (make-record-constructor-descriptor nV4d3a@nV4d35 nV4c46@nV4c3e nV4d3c@nV4d37)) (set! nV4f46@nV4d3e@nV4d36 nV4d3e@nV4d36) (set! nV4d41@p? (record-predicate nV4d3a@nV4d35)) (set! nV4f47@nV4d41@p? nV4d41@p?) (set! nV4d43@make-who-condition (record-constructor nV4d3e@nV4d36)) (set! nV4f48@nV4d43@make-who-condition nV4d43@make-who-condition) (set! nV4d45@nV4d34 (record-accessor nV4d3a@nV4d35 '0)) (set! nV4f49@nV4d45@nV4d34 nV4d45@nV4d34) (set! nV4d47@who-condition? (condition-predicate nV4d3a@nV4d35)) (set! nV4f4a@nV4d47@who-condition? nV4d47@who-condition?) (set! nV4d49@condition-who (condition-accessor nV4d3a@nV4d35 nV4d45@nV4d34)) (set! nV4f4b@nV4d49@condition-who nV4d49@condition-who) (set! nV4d4b@&who-rtd nV4d3a@nV4d35) (set! nV4f4c@nV4d4b@&who-rtd nV4d4b@&who-rtd) (set! nV4d4d@&who-rcd nV4d3e@nV4d36) (set! nV4f4d@nV4d4d@&who-rcd nV4d4d@&who-rcd) (set! nV4d53@nV4d4e (make-record-type-descriptor '&non-continuable nV4cf3@nV4cee 'nV4d51 '#f '#f '#())) (set! nV4f4e@nV4d53@nV4d4e nV4d53@nV4d4e) (set! nV4d55@nV4d50 '#f) (set! nV4f4f@nV4d55@nV4d50 nV4d55@nV4d50) (set! nV4d57@nV4d4f (make-record-constructor-descriptor nV4d53@nV4d4e nV4cf7@nV4cef nV4d55@nV4d50)) (set! nV4f50@nV4d57@nV4d4f nV4d57@nV4d4f) (set! nV4d5a@p? (record-predicate nV4d53@nV4d4e)) (set! nV4f51@nV4d5a@p? nV4d5a@p?) (set! nV4d5c@make-non-continuable-violation (record-constructor nV4d57@nV4d4f)) (set! nV4f52@nV4d5c@make-non-continuable-violation nV4d5c@make-non-continuable-violation) (set! nV4d5e@non-continuable-violation? (condition-predicate nV4d53@nV4d4e)) (set! nV4f53@nV4d5e@non-continuable-violation? nV4d5e@non-continuable-violation?) (set! nV4d60@&non-continuable-rtd nV4d53@nV4d4e) (set! nV4f54@nV4d60@&non-continuable-rtd nV4d60@&non-continuable-rtd) (set! nV4d62@&non-continuable-rcd nV4d57@nV4d4f) (set! nV4f55@nV4d62@&non-continuable-rcd nV4d62@&non-continuable-rcd) (set! nV4d68@nV4d63 (make-record-type-descriptor '&implementation-restriction nV4cf3@nV4cee 'nV4d66 '#f '#f '#())) (set! nV4f56@nV4d68@nV4d63 nV4d68@nV4d63) (set! nV4d6a@nV4d65 '#f) (set! nV4f57@nV4d6a@nV4d65 nV4d6a@nV4d65) (set! nV4d6c@nV4d64 (make-record-constructor-descriptor nV4d68@nV4d63 nV4cf7@nV4cef nV4d6a@nV4d65)) (set! nV4f58@nV4d6c@nV4d64 nV4d6c@nV4d64) (set! nV4d6f@p? (record-predicate nV4d68@nV4d63)) (set! nV4f59@nV4d6f@p? nV4d6f@p?) (set! nV4d71@make-implementation-restriction-violation (record-constructor nV4d6c@nV4d64)) (set! nV4f5a@nV4d71@make-implementation-restriction-violation nV4d71@make-implementation-restriction-violation) (set! nV4d73@implementation-restriction-violation? (condition-predicate nV4d68@nV4d63)) (set! nV4f5b@nV4d73@implementation-restriction-violation? nV4d73@implementation-restriction-violation?) (set! nV4d75@&implementation-restriction-rtd nV4d68@nV4d63) (set! nV4f5c@nV4d75@&implementation-restriction-rtd nV4d75@&implementation-restriction-rtd) (set! nV4d77@&implementation-restriction-rcd nV4d6c@nV4d64) (set! nV4f5d@nV4d77@&implementation-restriction-rcd nV4d77@&implementation-restriction-rcd) (set! nV4d7d@nV4d78 (make-record-type-descriptor '&lexical nV4cf3@nV4cee 'nV4d7b '#f '#f '#())) (set! nV4f5e@nV4d7d@nV4d78 nV4d7d@nV4d78) (set! nV4d7f@nV4d7a '#f) (set! nV4f5f@nV4d7f@nV4d7a nV4d7f@nV4d7a) (set! nV4d81@nV4d79 (make-record-constructor-descriptor nV4d7d@nV4d78 nV4cf7@nV4cef nV4d7f@nV4d7a)) (set! nV4f60@nV4d81@nV4d79 nV4d81@nV4d79) (set! nV4d84@p? (record-predicate nV4d7d@nV4d78)) (set! nV4f61@nV4d84@p? nV4d84@p?) (set! nV4d86@make-lexical-violation (record-constructor nV4d81@nV4d79)) (set! nV4f62@nV4d86@make-lexical-violation nV4d86@make-lexical-violation) (set! nV4d88@lexical-violation? (condition-predicate nV4d7d@nV4d78)) (set! nV4f63@nV4d88@lexical-violation? nV4d88@lexical-violation?) (set! nV4d8a@&lexical-rtd nV4d7d@nV4d78) (set! nV4f64@nV4d8a@&lexical-rtd nV4d8a@&lexical-rtd) (set! nV4d8c@&lexical-rcd nV4d81@nV4d79) (set! nV4f65@nV4d8c@&lexical-rcd nV4d8c@&lexical-rcd) (set! nV4d96@nV4d91 (make-record-type-descriptor '&syntax nV4cf3@nV4cee 'nV4d94 '#f '#f '#((immutable form) (immutable subform)))) (set! nV4f66@nV4d96@nV4d91 nV4d96@nV4d91) (set! nV4d98@nV4d93 '#f) (set! nV4f67@nV4d98@nV4d93 nV4d98@nV4d93) (set! nV4d9a@nV4d92 (make-record-constructor-descriptor nV4d96@nV4d91 nV4cf7@nV4cef nV4d98@nV4d93)) (set! nV4f68@nV4d9a@nV4d92 nV4d9a@nV4d92) (set! nV4d9d@p? (record-predicate nV4d96@nV4d91)) (set! nV4f69@nV4d9d@p? nV4d9d@p?) (set! nV4d9f@make-syntax-violation (record-constructor nV4d9a@nV4d92)) (set! nV4f6a@nV4d9f@make-syntax-violation nV4d9f@make-syntax-violation) (set! nV4da1@nV4d8e (record-accessor nV4d96@nV4d91 '0)) (set! nV4f6b@nV4da1@nV4d8e nV4da1@nV4d8e) (set! nV4da3@nV4d90 (record-accessor nV4d96@nV4d91 '1)) (set! nV4f6c@nV4da3@nV4d90 nV4da3@nV4d90) (set! nV4da5@syntax-violation? (condition-predicate nV4d96@nV4d91)) (set! nV4f6d@nV4da5@syntax-violation? nV4da5@syntax-violation?) (set! nV4da7@syntax-violation-form (condition-accessor nV4d96@nV4d91 nV4da1@nV4d8e)) (set! nV4f6e@nV4da7@syntax-violation-form nV4da7@syntax-violation-form) (set! nV4da9@syntax-violation-subform (condition-accessor nV4d96@nV4d91 nV4da3@nV4d90)) (set! nV4f6f@nV4da9@syntax-violation-subform nV4da9@syntax-violation-subform) (set! nV4dab@&syntax-rtd nV4d96@nV4d91) (set! nV4f70@nV4dab@&syntax-rtd nV4dab@&syntax-rtd) (set! nV4dad@&syntax-rcd nV4d9a@nV4d92) (set! nV4f71@nV4dad@&syntax-rcd nV4dad@&syntax-rcd) (set! nV4db3@nV4dae (make-record-type-descriptor '&undefined nV4cf3@nV4cee 'nV4db1 '#f '#f '#())) (set! nV4f72@nV4db3@nV4dae nV4db3@nV4dae) (set! nV4db5@nV4db0 '#f) (set! nV4f73@nV4db5@nV4db0 nV4db5@nV4db0) (set! nV4db7@nV4daf (make-record-constructor-descriptor nV4db3@nV4dae nV4cf7@nV4cef nV4db5@nV4db0)) (set! nV4f74@nV4db7@nV4daf nV4db7@nV4daf) (set! nV4dba@p? (record-predicate nV4db3@nV4dae)) (set! nV4f75@nV4dba@p? nV4dba@p?) (set! nV4dbc@make-undefined-violation (record-constructor nV4db7@nV4daf)) (set! nV4f76@nV4dbc@make-undefined-violation nV4dbc@make-undefined-violation) (set! nV4dbe@undefined-violation? (condition-predicate nV4db3@nV4dae)) (set! nV4f77@nV4dbe@undefined-violation? nV4dbe@undefined-violation?) (set! nV4dc0@&undefined-rtd nV4db3@nV4dae) (set! nV4f78@nV4dc0@&undefined-rtd nV4dc0@&undefined-rtd) (set! nV4dc2@&undefined-rcd nV4db7@nV4daf) (set! nV4f79@nV4dc2@&undefined-rcd nV4dc2@&undefined-rcd) (set! nV4dc8@nV4dc3 (make-record-type-descriptor '&i/o nV4cde@nV4cd9 'nV4dc6 '#f '#f '#())) (set! nV4f7a@nV4dc8@nV4dc3 nV4dc8@nV4dc3) (set! nV4dca@nV4dc5 '#f) (set! nV4f7b@nV4dca@nV4dc5 nV4dca@nV4dc5) (set! nV4dcc@nV4dc4 (make-record-constructor-descriptor nV4dc8@nV4dc3 nV4ce2@nV4cda nV4dca@nV4dc5)) (set! nV4f7c@nV4dcc@nV4dc4 nV4dcc@nV4dc4) (set! nV4dcf@p? (record-predicate nV4dc8@nV4dc3)) (set! nV4f7d@nV4dcf@p? nV4dcf@p?) (set! nV4dd1@make-i/o-error (record-constructor nV4dcc@nV4dc4)) (set! nV4f7e@nV4dd1@make-i/o-error nV4dd1@make-i/o-error) (set! nV4dd3@i/o-error? (condition-predicate nV4dc8@nV4dc3)) (set! nV4f7f@nV4dd3@i/o-error? nV4dd3@i/o-error?) (set! nV4dd5@&i/o-rtd nV4dc8@nV4dc3) (set! nV4f80@nV4dd5@&i/o-rtd nV4dd5@&i/o-rtd) (set! nV4dd7@&i/o-rcd nV4dcc@nV4dc4) (set! nV4f81@nV4dd7@&i/o-rcd nV4dd7@&i/o-rcd) (set! nV4ddd@nV4dd8 (make-record-type-descriptor '&i/o-read nV4dc8@nV4dc3 'nV4ddb '#f '#f '#())) (set! nV4f82@nV4ddd@nV4dd8 nV4ddd@nV4dd8) (set! nV4ddf@nV4dda '#f) (set! nV4f83@nV4ddf@nV4dda nV4ddf@nV4dda) (set! nV4de1@nV4dd9 (make-record-constructor-descriptor nV4ddd@nV4dd8 nV4dcc@nV4dc4 nV4ddf@nV4dda)) (set! nV4f84@nV4de1@nV4dd9 nV4de1@nV4dd9) (set! nV4de4@p? (record-predicate nV4ddd@nV4dd8)) (set! nV4f85@nV4de4@p? nV4de4@p?) (set! nV4de6@make-i/o-read-error (record-constructor nV4de1@nV4dd9)) (set! nV4f86@nV4de6@make-i/o-read-error nV4de6@make-i/o-read-error) (set! nV4de8@i/o-read-error? (condition-predicate nV4ddd@nV4dd8)) (set! nV4f87@nV4de8@i/o-read-error? nV4de8@i/o-read-error?) (set! nV4dea@&i/o-read-rtd nV4ddd@nV4dd8) (set! nV4f88@nV4dea@&i/o-read-rtd nV4dea@&i/o-read-rtd) (set! nV4dec@&i/o-read-rcd nV4de1@nV4dd9) (set! nV4f89@nV4dec@&i/o-read-rcd nV4dec@&i/o-read-rcd) (set! nV4df2@nV4ded (make-record-type-descriptor '&i/o-write nV4dc8@nV4dc3 'nV4df0 '#f '#f '#())) (set! nV4f8a@nV4df2@nV4ded nV4df2@nV4ded) (set! nV4df4@nV4def '#f) (set! nV4f8b@nV4df4@nV4def nV4df4@nV4def) (set! nV4df6@nV4dee (make-record-constructor-descriptor nV4df2@nV4ded nV4dcc@nV4dc4 nV4df4@nV4def)) (set! nV4f8c@nV4df6@nV4dee nV4df6@nV4dee) (set! nV4df9@p? (record-predicate nV4df2@nV4ded)) (set! nV4f8d@nV4df9@p? nV4df9@p?) (set! nV4dfb@make-i/o-write-error (record-constructor nV4df6@nV4dee)) (set! nV4f8e@nV4dfb@make-i/o-write-error nV4dfb@make-i/o-write-error) (set! nV4dfd@i/o-write-error? (condition-predicate nV4df2@nV4ded)) (set! nV4f8f@nV4dfd@i/o-write-error? nV4dfd@i/o-write-error?) (set! nV4dff@&i/o-write-rtd nV4df2@nV4ded) (set! nV4f90@nV4dff@&i/o-write-rtd nV4dff@&i/o-write-rtd) (set! nV4e01@&i/o-write-rcd nV4df6@nV4dee) (set! nV4f91@nV4e01@&i/o-write-rcd nV4e01@&i/o-write-rcd) (set! nV4e09@nV4e04 (make-record-type-descriptor '&i/o-invalid-position nV4dc8@nV4dc3 'nV4e07 '#f '#f '#((immutable position)))) (set! nV4f92@nV4e09@nV4e04 nV4e09@nV4e04) (set! nV4e0b@nV4e06 '#f) (set! nV4f93@nV4e0b@nV4e06 nV4e0b@nV4e06) (set! nV4e0d@nV4e05 (make-record-constructor-descriptor nV4e09@nV4e04 nV4dcc@nV4dc4 nV4e0b@nV4e06)) (set! nV4f94@nV4e0d@nV4e05 nV4e0d@nV4e05) (set! nV4e10@p? (record-predicate nV4e09@nV4e04)) (set! nV4f95@nV4e10@p? nV4e10@p?) (set! nV4e12@make-i/o-invalid-position-error (record-constructor nV4e0d@nV4e05)) (set! nV4f96@nV4e12@make-i/o-invalid-position-error nV4e12@make-i/o-invalid-position-error) (set! nV4e14@nV4e03 (record-accessor nV4e09@nV4e04 '0)) (set! nV4f97@nV4e14@nV4e03 nV4e14@nV4e03) (set! nV4e16@i/o-invalid-position-error? (condition-predicate nV4e09@nV4e04)) (set! nV4f98@nV4e16@i/o-invalid-position-error? nV4e16@i/o-invalid-position-error?) (set! nV4e18@i/o-error-position (condition-accessor nV4e09@nV4e04 nV4e14@nV4e03)) (set! nV4f99@nV4e18@i/o-error-position nV4e18@i/o-error-position) (set! nV4e1a@&i/o-invalid-position-rtd nV4e09@nV4e04) (set! nV4f9a@nV4e1a@&i/o-invalid-position-rtd nV4e1a@&i/o-invalid-position-rtd) (set! nV4e1c@&i/o-invalid-position-rcd nV4e0d@nV4e05) (set! nV4f9b@nV4e1c@&i/o-invalid-position-rcd nV4e1c@&i/o-invalid-position-rcd) (set! nV4e24@nV4e1f (make-record-type-descriptor '&i/o-filename nV4dc8@nV4dc3 'nV4e22 '#f '#f '#((immutable filename)))) (set! nV4f9c@nV4e24@nV4e1f nV4e24@nV4e1f) (set! nV4e26@nV4e21 '#f) (set! nV4f9d@nV4e26@nV4e21 nV4e26@nV4e21) (set! nV4e28@nV4e20 (make-record-constructor-descriptor nV4e24@nV4e1f nV4dcc@nV4dc4 nV4e26@nV4e21)) (set! nV4f9e@nV4e28@nV4e20 nV4e28@nV4e20) (set! nV4e2b@p? (record-predicate nV4e24@nV4e1f)) (set! nV4f9f@nV4e2b@p? nV4e2b@p?) (set! nV4e2d@make-i/o-filename-error (record-constructor nV4e28@nV4e20)) (set! nV4fa0@nV4e2d@make-i/o-filename-error nV4e2d@make-i/o-filename-error) (set! nV4e2f@nV4e1e (record-accessor nV4e24@nV4e1f '0)) (set! nV4fa1@nV4e2f@nV4e1e nV4e2f@nV4e1e) (set! nV4e31@i/o-filename-error? (condition-predicate nV4e24@nV4e1f)) (set! nV4fa2@nV4e31@i/o-filename-error? nV4e31@i/o-filename-error?) (set! nV4e33@i/o-error-filename (condition-accessor nV4e24@nV4e1f nV4e2f@nV4e1e)) (set! nV4fa3@nV4e33@i/o-error-filename nV4e33@i/o-error-filename) (set! nV4e35@&i/o-filename-rtd nV4e24@nV4e1f) (set! nV4fa4@nV4e35@&i/o-filename-rtd nV4e35@&i/o-filename-rtd) (set! nV4e37@&i/o-filename-rcd nV4e28@nV4e20) (set! nV4fa5@nV4e37@&i/o-filename-rcd nV4e37@&i/o-filename-rcd) (set! nV4e3d@nV4e38 (make-record-type-descriptor '&i/o-file-protection nV4e24@nV4e1f 'nV4e3b '#f '#f '#())) (set! nV4fa6@nV4e3d@nV4e38 nV4e3d@nV4e38) (set! nV4e3f@nV4e3a '#f) (set! nV4fa7@nV4e3f@nV4e3a nV4e3f@nV4e3a) (set! nV4e41@nV4e39 (make-record-constructor-descriptor nV4e3d@nV4e38 nV4e28@nV4e20 nV4e3f@nV4e3a)) (set! nV4fa8@nV4e41@nV4e39 nV4e41@nV4e39) (set! nV4e44@p? (record-predicate nV4e3d@nV4e38)) (set! nV4fa9@nV4e44@p? nV4e44@p?) (set! nV4e46@make-i/o-file-protection-error (record-constructor nV4e41@nV4e39)) (set! nV4faa@nV4e46@make-i/o-file-protection-error nV4e46@make-i/o-file-protection-error) (set! nV4e48@i/o-file-protection-error? (condition-predicate nV4e3d@nV4e38)) (set! nV4fab@nV4e48@i/o-file-protection-error? nV4e48@i/o-file-protection-error?) (set! nV4e4a@&i/o-file-protection-rtd nV4e3d@nV4e38) (set! nV4fac@nV4e4a@&i/o-file-protection-rtd nV4e4a@&i/o-file-protection-rtd) (set! nV4e4c@&i/o-file-protection-rcd nV4e41@nV4e39) (set! nV4fad@nV4e4c@&i/o-file-protection-rcd nV4e4c@&i/o-file-protection-rcd) (set! nV4e52@nV4e4d (make-record-type-descriptor '&i/o-file-is-read-only nV4e3d@nV4e38 'nV4e50 '#f '#f '#())) (set! nV4fae@nV4e52@nV4e4d nV4e52@nV4e4d) (set! nV4e54@nV4e4f '#f) (set! nV4faf@nV4e54@nV4e4f nV4e54@nV4e4f) (set! nV4e56@nV4e4e (make-record-constructor-descriptor nV4e52@nV4e4d nV4e41@nV4e39 nV4e54@nV4e4f)) (set! nV4fb0@nV4e56@nV4e4e nV4e56@nV4e4e) (set! nV4e59@p? (record-predicate nV4e52@nV4e4d)) (set! nV4fb1@nV4e59@p? nV4e59@p?) (set! nV4e5b@make-i/o-file-is-read-only-error (record-constructor nV4e56@nV4e4e)) (set! nV4fb2@nV4e5b@make-i/o-file-is-read-only-error nV4e5b@make-i/o-file-is-read-only-error) (set! nV4e5d@i/o-file-is-read-only-error? (condition-predicate nV4e52@nV4e4d)) (set! nV4fb3@nV4e5d@i/o-file-is-read-only-error? nV4e5d@i/o-file-is-read-only-error?) (set! nV4e5f@&i/o-file-is-read-only-rtd nV4e52@nV4e4d) (set! nV4fb4@nV4e5f@&i/o-file-is-read-only-rtd nV4e5f@&i/o-file-is-read-only-rtd) (set! nV4e61@&i/o-file-is-read-only-rcd nV4e56@nV4e4e) (set! nV4fb5@nV4e61@&i/o-file-is-read-only-rcd nV4e61@&i/o-file-is-read-only-rcd) (set! nV4e67@nV4e62 (make-record-type-descriptor '&i/o-file-already-exists nV4e24@nV4e1f 'nV4e65 '#f '#f '#())) (set! nV4fb6@nV4e67@nV4e62 nV4e67@nV4e62) (set! nV4e69@nV4e64 '#f) (set! nV4fb7@nV4e69@nV4e64 nV4e69@nV4e64) (set! nV4e6b@nV4e63 (make-record-constructor-descriptor nV4e67@nV4e62 nV4e28@nV4e20 nV4e69@nV4e64)) (set! nV4fb8@nV4e6b@nV4e63 nV4e6b@nV4e63) (set! nV4e6e@p? (record-predicate nV4e67@nV4e62)) (set! nV4fb9@nV4e6e@p? nV4e6e@p?) (set! nV4e70@make-i/o-file-already-exists-error (record-constructor nV4e6b@nV4e63)) (set! nV4fba@nV4e70@make-i/o-file-already-exists-error nV4e70@make-i/o-file-already-exists-error) (set! nV4e72@i/o-file-already-exists-error? (condition-predicate nV4e67@nV4e62)) (set! nV4fbb@nV4e72@i/o-file-already-exists-error? nV4e72@i/o-file-already-exists-error?) (set! nV4e74@&i/o-file-already-exists-rtd nV4e67@nV4e62) (set! nV4fbc@nV4e74@&i/o-file-already-exists-rtd nV4e74@&i/o-file-already-exists-rtd) (set! nV4e76@&i/o-file-already-exists-rcd nV4e6b@nV4e63) (set! nV4fbd@nV4e76@&i/o-file-already-exists-rcd nV4e76@&i/o-file-already-exists-rcd) (set! nV4e7c@nV4e77 (make-record-type-descriptor '&i/o-file-does-not-exist nV4e24@nV4e1f 'nV4e7a '#f '#f '#())) (set! nV4fbe@nV4e7c@nV4e77 nV4e7c@nV4e77) (set! nV4e7e@nV4e79 '#f) (set! nV4fbf@nV4e7e@nV4e79 nV4e7e@nV4e79) (set! nV4e80@nV4e78 (make-record-constructor-descriptor nV4e7c@nV4e77 nV4e28@nV4e20 nV4e7e@nV4e79)) (set! nV4fc0@nV4e80@nV4e78 nV4e80@nV4e78) (set! nV4e83@p? (record-predicate nV4e7c@nV4e77)) (set! nV4fc1@nV4e83@p? nV4e83@p?) (set! nV4e85@make-i/o-file-does-not-exist-error (record-constructor nV4e80@nV4e78)) (set! nV4fc2@nV4e85@make-i/o-file-does-not-exist-error nV4e85@make-i/o-file-does-not-exist-error) (set! nV4e87@i/o-file-does-not-exist-error? (condition-predicate nV4e7c@nV4e77)) (set! nV4fc3@nV4e87@i/o-file-does-not-exist-error? nV4e87@i/o-file-does-not-exist-error?) (set! nV4e89@&i/o-file-does-not-exist-rtd nV4e7c@nV4e77) (set! nV4fc4@nV4e89@&i/o-file-does-not-exist-rtd nV4e89@&i/o-file-does-not-exist-rtd) (set! nV4e8b@&i/o-file-does-not-exist-rcd nV4e80@nV4e78) (set! nV4fc5@nV4e8b@&i/o-file-does-not-exist-rcd nV4e8b@&i/o-file-does-not-exist-rcd) (set! nV4e93@nV4e8e (make-record-type-descriptor '&i/o-port nV4dc8@nV4dc3 'nV4e91 '#f '#f '#((immutable port)))) (set! nV4fc6@nV4e93@nV4e8e nV4e93@nV4e8e) (set! nV4e95@nV4e90 '#f) (set! nV4fc7@nV4e95@nV4e90 nV4e95@nV4e90) (set! nV4e97@nV4e8f (make-record-constructor-descriptor nV4e93@nV4e8e nV4dcc@nV4dc4 nV4e95@nV4e90)) (set! nV4fc8@nV4e97@nV4e8f nV4e97@nV4e8f) (set! nV4e9a@p? (record-predicate nV4e93@nV4e8e)) (set! nV4fc9@nV4e9a@p? nV4e9a@p?) (set! nV4e9c@make-i/o-port-error (record-constructor nV4e97@nV4e8f)) (set! nV4fca@nV4e9c@make-i/o-port-error nV4e9c@make-i/o-port-error) (set! nV4e9e@nV4e8d (record-accessor nV4e93@nV4e8e '0)) (set! nV4fcb@nV4e9e@nV4e8d nV4e9e@nV4e8d) (set! nV4ea0@i/o-port-error? (condition-predicate nV4e93@nV4e8e)) (set! nV4fcc@nV4ea0@i/o-port-error? nV4ea0@i/o-port-error?) (set! nV4ea2@i/o-error-port (condition-accessor nV4e93@nV4e8e nV4e9e@nV4e8d)) (set! nV4fcd@nV4ea2@i/o-error-port nV4ea2@i/o-error-port) (set! nV4ea4@&i/o-port-rtd nV4e93@nV4e8e) (set! nV4fce@nV4ea4@&i/o-port-rtd nV4ea4@&i/o-port-rtd) (set! nV4ea6@&i/o-port-rcd nV4e97@nV4e8f) (set! nV4fcf@nV4ea6@&i/o-port-rcd nV4ea6@&i/o-port-rcd) (set! nV4eac@nV4ea7 (make-record-type-descriptor '&i/o-decoding nV4e93@nV4e8e 'nV4eaa '#f '#f '#())) (set! nV4fd0@nV4eac@nV4ea7 nV4eac@nV4ea7) (set! nV4eae@nV4ea9 '#f) (set! nV4fd1@nV4eae@nV4ea9 nV4eae@nV4ea9) (set! nV4eb0@nV4ea8 (make-record-constructor-descriptor nV4eac@nV4ea7 nV4e97@nV4e8f nV4eae@nV4ea9)) (set! nV4fd2@nV4eb0@nV4ea8 nV4eb0@nV4ea8) (set! nV4eb3@p? (record-predicate nV4eac@nV4ea7)) (set! nV4fd3@nV4eb3@p? nV4eb3@p?) (set! nV4eb5@make-i/o-decoding-error (record-constructor nV4eb0@nV4ea8)) (set! nV4fd4@nV4eb5@make-i/o-decoding-error nV4eb5@make-i/o-decoding-error) (set! nV4eb7@i/o-decoding-error? (condition-predicate nV4eac@nV4ea7)) (set! nV4fd5@nV4eb7@i/o-decoding-error? nV4eb7@i/o-decoding-error?) (set! nV4eb9@&i/o-decoding-rtd nV4eac@nV4ea7) (set! nV4fd6@nV4eb9@&i/o-decoding-rtd nV4eb9@&i/o-decoding-rtd) (set! nV4ebb@&i/o-decoding-rcd nV4eb0@nV4ea8) (set! nV4fd7@nV4ebb@&i/o-decoding-rcd nV4ebb@&i/o-decoding-rcd) (set! nV4ec3@nV4ebe (make-record-type-descriptor '&i/o-encoding nV4e93@nV4e8e 'nV4ec1 '#f '#f '#((immutable char)))) (set! nV4fd8@nV4ec3@nV4ebe nV4ec3@nV4ebe) (set! nV4ec5@nV4ec0 '#f) (set! nV4fd9@nV4ec5@nV4ec0 nV4ec5@nV4ec0) (set! nV4ec7@nV4ebf (make-record-constructor-descriptor nV4ec3@nV4ebe nV4e97@nV4e8f nV4ec5@nV4ec0)) (set! nV4fda@nV4ec7@nV4ebf nV4ec7@nV4ebf) (set! nV4eca@p? (record-predicate nV4ec3@nV4ebe)) (set! nV4fdb@nV4eca@p? nV4eca@p?) (set! nV4ecc@make-i/o-encoding-error (record-constructor nV4ec7@nV4ebf)) (set! nV4fdc@nV4ecc@make-i/o-encoding-error nV4ecc@make-i/o-encoding-error) (set! nV4ece@nV4ebd (record-accessor nV4ec3@nV4ebe '0)) (set! nV4fdd@nV4ece@nV4ebd nV4ece@nV4ebd) (set! nV4ed0@i/o-encoding-error? (condition-predicate nV4ec3@nV4ebe)) (set! nV4fde@nV4ed0@i/o-encoding-error? nV4ed0@i/o-encoding-error?) (set! nV4ed2@i/o-encoding-error-char (condition-accessor nV4ec3@nV4ebe nV4ece@nV4ebd)) (set! nV4fdf@nV4ed2@i/o-encoding-error-char nV4ed2@i/o-encoding-error-char) (set! nV4ed4@&i/o-encoding-rtd nV4ec3@nV4ebe) (set! nV4fe0@nV4ed4@&i/o-encoding-rtd nV4ed4@&i/o-encoding-rtd) (set! nV4ed6@&i/o-encoding-rcd nV4ec7@nV4ebf) (set! nV4fe1@nV4ed6@&i/o-encoding-rcd nV4ed6@&i/o-encoding-rcd) (set! nV4edc@nV4ed7 (make-record-type-descriptor '&no-infinities nV4d68@nV4d63 'nV4eda '#f '#f '#())) (set! nV4fe2@nV4edc@nV4ed7 nV4edc@nV4ed7) (set! nV4ede@nV4ed9 '#f) (set! nV4fe3@nV4ede@nV4ed9 nV4ede@nV4ed9) (set! nV4ee0@nV4ed8 (make-record-constructor-descriptor nV4edc@nV4ed7 nV4d6c@nV4d64 nV4ede@nV4ed9)) (set! nV4fe4@nV4ee0@nV4ed8 nV4ee0@nV4ed8) (set! nV4ee3@p? (record-predicate nV4edc@nV4ed7)) (set! nV4fe5@nV4ee3@p? nV4ee3@p?) (set! nV4ee5@make-no-infinities-violation (record-constructor nV4ee0@nV4ed8)) (set! nV4fe6@nV4ee5@make-no-infinities-violation nV4ee5@make-no-infinities-violation) (set! nV4ee7@no-infinities-violation? (condition-predicate nV4edc@nV4ed7)) (set! nV4fe7@nV4ee7@no-infinities-violation? nV4ee7@no-infinities-violation?) (set! nV4ee9@&no-infinities-rtd nV4edc@nV4ed7) (set! nV4fe8@nV4ee9@&no-infinities-rtd nV4ee9@&no-infinities-rtd) (set! nV4eeb@&no-infinities-rcd nV4ee0@nV4ed8) (set! nV4fe9@nV4eeb@&no-infinities-rcd nV4eeb@&no-infinities-rcd) (set! nV4ef1@nV4eec (make-record-type-descriptor '&no-nans nV4d68@nV4d63 'nV4eef '#f '#f '#())) (set! nV4fea@nV4ef1@nV4eec nV4ef1@nV4eec) (set! nV4ef3@nV4eee '#f) (set! nV4feb@nV4ef3@nV4eee nV4ef3@nV4eee) (set! nV4ef5@nV4eed (make-record-constructor-descriptor nV4ef1@nV4eec nV4d6c@nV4d64 nV4ef3@nV4eee)) (set! nV4fec@nV4ef5@nV4eed nV4ef5@nV4eed) (set! nV4ef8@p? (record-predicate nV4ef1@nV4eec)) (set! nV4fed@nV4ef8@p? nV4ef8@p?) (set! nV4efa@make-no-nans-violation (record-constructor nV4ef5@nV4eed)) (set! nV4fee@nV4efa@make-no-nans-violation nV4efa@make-no-nans-violation) (set! nV4efc@no-nans-violation? (condition-predicate nV4ef1@nV4eec)) (set! nV4fef@nV4efc@no-nans-violation? nV4efc@no-nans-violation?) (set! nV4efe@&no-nans-rtd nV4ef1@nV4eec) (set! nV4ff0@nV4efe@&no-nans-rtd nV4efe@&no-nans-rtd) (set! nV4f00@&no-nans-rcd nV4ef5@nV4eed) (set! nV4ff1@nV4f00@&no-nans-rcd nV4f00@&no-nans-rcd) (void))
(begin (begin (nV2a76@nV2a2b@current-primitive-locations (lambda (nV54b8@x) (let ((nV54ba@t (assq nV54b8@x '((&no-nans-rcd . nV4ff1@nV4f00@&no-nans-rcd) (&no-nans-rtd . nV4ff0@nV4efe@&no-nans-rtd) (&no-infinities-rcd . nV4fe9@nV4eeb@&no-infinities-rcd) (&no-infinities-rtd . nV4fe8@nV4ee9@&no-infinities-rtd) (&i/o-encoding-rcd . nV4fe1@nV4ed6@&i/o-encoding-rcd) (&i/o-encoding-rtd . nV4fe0@nV4ed4@&i/o-encoding-rtd) (&i/o-decoding-rcd . nV4fd7@nV4ebb@&i/o-decoding-rcd) (&i/o-decoding-rtd . nV4fd6@nV4eb9@&i/o-decoding-rtd) (&i/o-port-rcd . nV4fcf@nV4ea6@&i/o-port-rcd) (&i/o-port-rtd . nV4fce@nV4ea4@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . nV4fc5@nV4e8b@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . nV4fc4@nV4e89@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . nV4fbd@nV4e76@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . nV4fbc@nV4e74@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . nV4fb5@nV4e61@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . nV4fb4@nV4e5f@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . nV4fad@nV4e4c@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . nV4fac@nV4e4a@&i/o-file-protection-rtd) (&i/o-filename-rcd . nV4fa5@nV4e37@&i/o-filename-rcd) (&i/o-filename-rtd . nV4fa4@nV4e35@&i/o-filename-rtd) (&i/o-invalid-position-rcd . nV4f9b@nV4e1c@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . nV4f9a@nV4e1a@&i/o-invalid-position-rtd) (&i/o-write-rcd . nV4f91@nV4e01@&i/o-write-rcd) (&i/o-write-rtd . nV4f90@nV4dff@&i/o-write-rtd) (&i/o-read-rcd . nV4f89@nV4dec@&i/o-read-rcd) (&i/o-read-rtd . nV4f88@nV4dea@&i/o-read-rtd) (&i/o-rcd . nV4f81@nV4dd7@&i/o-rcd) (&i/o-rtd . nV4f80@nV4dd5@&i/o-rtd) (&undefined-rcd . nV4f79@nV4dc2@&undefined-rcd) (&undefined-rtd . nV4f78@nV4dc0@&undefined-rtd) (&syntax-rcd . nV4f71@nV4dad@&syntax-rcd) (&syntax-rtd . nV4f70@nV4dab@&syntax-rtd) (&lexical-rcd . nV4f65@nV4d8c@&lexical-rcd) (&lexical-rtd . nV4f64@nV4d8a@&lexical-rtd) (&implementation-restriction-rcd . nV4f5d@nV4d77@&implementation-restriction-rcd) (&implementation-restriction-rtd . nV4f5c@nV4d75@&implementation-restriction-rtd) (&non-continuable-rcd . nV4f55@nV4d62@&non-continuable-rcd) (&non-continuable-rtd . nV4f54@nV4d60@&non-continuable-rtd) (&who-rcd . nV4f4d@nV4d4d@&who-rcd) (&who-rtd . nV4f4c@nV4d4b@&who-rtd) (&irritants-rcd . nV4f43@nV4d32@&irritants-rcd) (&irritants-rtd . nV4f42@nV4d30@&irritants-rtd) (&assertion-rcd . nV4f39@nV4d17@&assertion-rcd) (&assertion-rtd . nV4f38@nV4d15@&assertion-rtd) (&violation-rcd . nV4f31@nV4d02@&violation-rcd) (&violation-rtd . nV4f30@nV4d00@&violation-rtd) (&error-rcd . nV4f29@nV4ced@&error-rcd) (&error-rtd . nV4f28@nV4ceb@&error-rtd) (&serious-rcd . nV4f21@nV4cd8@&serious-rcd) (&serious-rtd . nV4f20@nV4cd6@&serious-rtd) (&warning-rcd . nV4f19@nV4cc3@&warning-rcd) (&warning-rtd . nV4f18@nV4cc1@&warning-rtd) (&message-rcd . nV4f11@nV4cae@&message-rcd) (&message-rtd . nV4f10@nV4cac@&message-rtd) (&condition-rcd . nV4f07@nV4c4f@&condition-rcd) (&condition-rtd . nV4f06@nV4c4d@&condition-rtd) (syntax-error . nV4c29@nV31cd@syntax-error) (syntax-dispatch . nV4bc7@nV30f1@syntax-dispatch) (load . nV5159@nV500f@load) (interaction-environment . nV4c32@nV31df@interaction-environment) (library-path . nV2ced@nV2b19@library-path) (mosh-cache-dir . nV2a24@nV2903@mosh-cache-dir) (make-parameter . nV2a23@nV2901@make-parameter) (make-variable-transformer . nV4b84@nV2f1c@make-variable-transformer) (identifier? . nV4c2c@nV31d3@identifier?) (generate-temporaries . nV4c22@nV31bf@generate-temporaries) (free-identifier=? . nV4c23@nV31c1@free-identifier=?) (syntax->datum . nV4c2e@nV31d7@syntax->datum) (datum->syntax . nV4c2d@nV31d5@datum->syntax) (bound-identifier=? . nV4c24@nV31c3@bound-identifier=?) (make-i/o-write-error . nV4f8e@nV4dfb@make-i/o-write-error) (make-i/o-read-error . nV4f86@nV4de6@make-i/o-read-error) (make-i/o-port-error . nV4fca@nV4e9c@make-i/o-port-error) (make-i/o-invalid-position-error . nV4f96@nV4e12@make-i/o-invalid-position-error) (make-i/o-filename-error . nV4fa0@nV4e2d@make-i/o-filename-error) (make-i/o-file-protection-error . nV4faa@nV4e46@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . nV4fb2@nV4e5b@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . nV4fc2@nV4e85@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . nV4fba@nV4e70@make-i/o-file-already-exists-error) (make-i/o-error . nV4f7e@nV4dd1@make-i/o-error) (make-i/o-encoding-error . nV4fdc@nV4ecc@make-i/o-encoding-error) (make-i/o-decoding-error . nV4fd4@nV4eb5@make-i/o-decoding-error) (i/o-write-error? . nV4f8f@nV4dfd@i/o-write-error?) (i/o-read-error? . nV4f87@nV4de8@i/o-read-error?) (i/o-port-error? . nV4fcc@nV4ea0@i/o-port-error?) (i/o-invalid-position-error? . nV4f98@nV4e16@i/o-invalid-position-error?) (i/o-filename-error? . nV4fa2@nV4e31@i/o-filename-error?) (i/o-file-protection-error? . nV4fab@nV4e48@i/o-file-protection-error?) (i/o-file-is-read-only-error? . nV4fb3@nV4e5d@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . nV4fc3@nV4e87@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . nV4fbb@nV4e72@i/o-file-already-exists-error?) (i/o-error? . nV4f7f@nV4dd3@i/o-error?) (i/o-error-position . nV4f99@nV4e18@i/o-error-position) (i/o-error-port . nV4fcd@nV4ea2@i/o-error-port) (i/o-error-filename . nV4fa3@nV4e33@i/o-error-filename) (i/o-encoding-error? . nV4fde@nV4ed0@i/o-encoding-error?) (i/o-encoding-error-char . nV4fdf@nV4ed2@i/o-encoding-error-char) (i/o-decoding-error? . nV4fd5@nV4eb7@i/o-decoding-error?) (scheme-report-environment . nV4c19@nV31ad@scheme-report-environment) (null-environment . nV4c18@nV31ab@null-environment) (command-line . nV5156@nV5009@command-line) (eval . nV4c1b@nV31b1@eval) (environment . nV4c17@nV31a9@environment) (who-condition? . nV4f4a@nV4d47@who-condition?) (warning? . nV4f17@nV4cbf@warning?) (violation? . nV4f2f@nV4cfe@violation?) (undefined-violation? . nV4f77@nV4dbe@undefined-violation?) (syntax-violation? . nV4f6d@nV4da5@syntax-violation?) (syntax-violation-subform . nV4f6f@nV4da9@syntax-violation-subform) (syntax-violation-form . nV4f6e@nV4da7@syntax-violation-form) (syntax-violation . nV4c2b@nV31d1@syntax-violation) (serious-condition? . nV4f1f@nV4cd4@serious-condition?) (non-continuable-violation? . nV4f53@nV4d5e@non-continuable-violation?) (message-condition? . nV4f0e@nV4ca8@message-condition?) (make-who-condition . nV4f48@nV4d43@make-who-condition) (make-warning . nV4f16@nV4cbd@make-warning) (make-violation . nV4f2e@nV4cfc@make-violation) (make-undefined-violation . nV4f76@nV4dbc@make-undefined-violation) (make-syntax-violation . nV4f6a@nV4d9f@make-syntax-violation) (make-serious-condition . nV4f1e@nV4cd2@make-serious-condition) (make-non-continuable-violation . nV4f52@nV4d5c@make-non-continuable-violation) (make-message-condition . nV4f0c@nV4ca4@make-message-condition) (make-lexical-violation . nV4f62@nV4d86@make-lexical-violation) (make-irritants-condition . nV4f3e@nV4d28@make-irritants-condition) (make-implementation-restriction-violation . nV4f5a@nV4d71@make-implementation-restriction-violation) (make-error . nV4f26@nV4ce7@make-error) (make-assertion-violation . nV4f36@nV4d11@make-assertion-violation) (lexical-violation? . nV4f63@nV4d88@lexical-violation?) (irritants-condition? . nV4f40@nV4d2c@irritants-condition?) (implementation-restriction-violation? . nV4f5b@nV4d73@implementation-restriction-violation?) (error? . nV4f27@nV4ce9@error?) (condition-who . nV4f4b@nV4d49@condition-who) (condition-message . nV4f0f@nV4caa@condition-message) (condition-irritants . nV4f41@nV4d2e@condition-irritants) (assertion-violation? . nV4f37@nV4d13@assertion-violation?) (no-nans-violation? . nV4fef@nV4efc@no-nans-violation?) (no-infinities-violation? . nV4fe7@nV4ee7@no-infinities-violation?) (make-no-nans-violation . nV4fee@nV4efa@make-no-nans-violation) (make-no-infinities-violation . nV4fe6@nV4ee5@make-no-infinities-violation) (assertion-error . nV4c28@nV31cb@assertion-error))))) (if nV54ba@t (cdr nV54ba@t) '#f)))) (nV2cfd@nV2b39@install-library 'nV5495 '(mosh interaction) '() '() '() '() '((regexp? . nV548d) (alist->eq-hash-table . nV5489) (format . nV5486) (string-split . nV547a) (call-process . nV5474) (set-current-directory! . nV5470) (expand-path . nV546f) (current-directory . nV546e) (%spawn . nV546d) (%waitpid . nV546c) (simple-struct-name . nV546b) (simple-struct-set! . nV546a) (simple-struct-ref . nV5469) (make-simple-struct . nV5468) (simple-struct? . nV5467) (pointer-ref-c-int64 . nV5466) (pointer-ref-c-int32 . nV5465) (pointer-ref-c-int16 . nV5464) (pointer-ref-c-int8 . nV5463) (pointer-ref-c-uint64 . nV5462) (pointer-ref-c-uint32 . nV5461) (pointer-ref-c-uint16 . nV5460) (pointer-ref-c-uint8 . nV545f) (pointer-set-c-uint64! . nV545e) (pointer-set-c-uint32! . nV545d) (pointer-set-c-uint16! . nV545c) (pointer-set-c-uint8! . nV545b) (pointer-set-c-int64! . nV545a) (pointer-set-c-int32! . nV5459) (pointer-set-c-int16! . nV5458) (pointer-set-c-int8! . nV5457) (pointer-set-c-pointer! . nV5456) (pointer-set-c-double! . nV5455) (pointer-set-c-float! . nV5454) (pointer-set-c-long-long! . nV5453) (pointer-set-c-long! . nV5452) (pointer-set-c-int! . nV5451) (pointer-set-c-short! . nV5450) (pointer-set-c-char! . nV544f) (pointer-ref-c-pointer . nV544e) (pointer-ref-c-double . nV544d) (pointer-ref-c-float . nV544c) (pointer-ref-c-unsigned-long-long . nV544b) (pointer-ref-c-signed-long-long . nV544a) (pointer-ref-c-unsigned-long . nV5449) (pointer-ref-c-signed-long . nV5448) (pointer-ref-c-unsigned-int . nV5447) (pointer-ref-c-signed-int . nV5446) (pointer-ref-c-unsigned-short . nV5445) (pointer-ref-c-signed-short . nV5444) (pointer-ref-c-unsigned-char . nV5443) (pointer-ref-c-signed-char . nV5442) (pointer->integer . nV5441) (integer->pointer . nV5440) (pointer? . nV543f) (shared-errno . nV543e) (%ffi-supported? . nV5436) (%ffi-pointer->string . nV5435) (%ffi-call . nV5434) (%ffi-lookup . nV5433) (%ffi-open . nV5432) (null-terminated-utf8->string . nV5431) (null-terminated-bytevector->string . nV5430) (%fork . nV542f) (%pipe . nV542e) (p . nV542d) (whereis . nV5411) (register . nV5410) (vm-join! . nV540f) (vm-set-value! . nV540e) (vm? . nV540d) (main-vm? . nV540c) (vm-eval . nV540b) (vm-self . nV540a) (vm-start! . nV5409) (make-vm . nV5408) (mutex-try-lock! . nV5407) (mutex-unlock! . nV5406) (mutex-lock! . nV5405) (mutex? . nV5404) (make-mutex . nV5403) (condition-variable-notify-all! . nV5402) (condition-variable-notify! . nV5401) (condition-variable-wait! . nV5400) (make-condition-variable . nV53ff) (string-upcase . nV53e2) (string-titlecase . nV53e1) (string-normalize-nfkd . nV53e0) (string-normalize-nfkc . nV53df) (string-normalize-nfd . nV53de) (string-normalize-nfc . nV53dd) (string-foldcase . nV53dc) (string-downcase . nV53db) (string-ci>? . nV53da) (string-ci>=? . nV53d9) (string-ci=? . nV53d8) (string-ci<? . nV53d7) (string-ci<=? . nV53d6) (char-whitespace? . nV53d5) (char-upper-case? . nV53d4) (char-title-case? . nV53d3) (char-numeric? . nV53d2) (char-lower-case? . nV53d1) (char-general-category . nV53d0) (char-upcase . nV53cf) (char-titlecase . nV53ce) (char-foldcase . nV53cd) (char-downcase . nV53cc) (char-ci>? . nV53cb) (char-ci>=? . nV53ca) (char-ci=? . nV53c9) (char-ci<? . nV53c8) (char-ci<=? . nV53c7) (char-alphabetic? . nV53c6) (make-variable-transformer . nV2f1b) (identifier? . nV31d2) (generate-temporaries . nV31be) (free-identifier=? . nV31c0) (syntax->datum . nV31d6) (datum->syntax . nV31d4) (bound-identifier=? . nV31c2) (record-type-descriptor? . nV53c5) (record-predicate . nV53c4) (record-mutator . nV53c3) (record-constructor . nV53c2) (record-accessor . nV53c1) (make-record-type-descriptor . nV53c0) (make-record-constructor-descriptor . nV53bf) (record? . nV53be) (record-type-uid . nV53bd) (record-type-sealed? . nV53bc) (record-type-parent . nV53bb) (record-type-opaque? . nV53ba) (record-type-name . nV53b9) (record-type-generative? . nV53b8) (record-type-field-names . nV53b7) (record-rtd . nV53b6) (record-field-mutable? . nV53b5) (delete-file . nV53b4) (file-exists? . nV53b3) (vector-sort! . nV53b2) (vector-sort . nV53b1) (list-sort . nV53b0) (symbol-hash . nV53af) (string-ci-hash . nV53ae) (string-hash . nV53ad) (equal-hash . nV53ac) (hashtable-equivalence-function . nV53ab) (make-hashtable . nV53aa) (hashtable-hash-function . nV53a9) (make-eqv-hashtable . nV53a8) (make-eq-hashtable . nV53a7) (hashtable? . nV53a6) (hashtable-update! . nV53a5) (hashtable-size . nV53a4) (hashtable-set! . nV53a3) (hashtable-ref . nV53a2) (hashtable-mutable? . nV53a1) (hashtable-keys . nV53a0) (hashtable-entries . nV539f) (hashtable-delete! . nV539e) (hashtable-copy . nV539d) (hashtable-contains? . nV539c) (hashtable-clear! . nV539b) (call-with-output-file . nV539a) (call-with-input-file . nV5399) (write-char . nV5398) (write . nV5397) (with-output-to-file . nV5396) (with-input-from-file . nV5395) (read-char . nV5394) (read . nV5393) (peek-char . nV5392) (open-output-file . nV5391) (open-input-file . nV5390) (newline . nV538f) (display . nV538e) (close-output-port . nV538d) (close-input-port . nV538c) (eof-object? . nV538b) (eof-object . nV538a) (current-error-port . nV5389) (current-output-port . nV5388) (current-input-port . nV5387) (output-port? . nV5386) (input-port? . nV5385) (utf-8-codec . nV5384) (utf-16-codec . nV5383) (transcoder-error-handling-mode . nV5382) (transcoder-eol-style . nV5381) (transcoder-codec . nV5380) (transcoded-port . nV537f) (textual-port? . nV537e) (string->bytevector . nV537d) (standard-output-port . nV537c) (standard-input-port . nV537b) (standard-error-port . nV537a) (set-port-position! . nV5379) (put-u8 . nV5378) (put-string . nV5377) (put-datum . nV5376) (put-char . nV5375) (put-bytevector . nV5374) (port? . nV5373) (port-transcoder . nV5372) (port-position . nV5371) (port-has-set-port-position!? . nV5370) (port-has-port-position? . nV536f) (port-eof? . nV536e) (output-port-buffer-mode . nV536d) (open-string-output-port . nV536c) (open-string-input-port . nV536b) (open-file-output-port . nV536a) (open-file-input/output-port . nV5369) (open-file-input-port . nV5368) (open-bytevector-output-port . nV5367) (open-bytevector-input-port . nV5366) (native-transcoder . nV5365) (native-eol-style . nV5364) (make-transcoder . nV5363) (latin-1-codec . nV5362) (make-i/o-write-error . nV4dfa) (make-i/o-read-error . nV4de5) (make-i/o-port-error . nV4e9b) (make-i/o-invalid-position-error . nV4e11) (make-i/o-filename-error . nV4e2c) (make-i/o-file-protection-error . nV4e45) (make-i/o-file-is-read-only-error . nV4e5a) (make-i/o-file-does-not-exist-error . nV4e84) (make-i/o-file-already-exists-error . nV4e6f) (make-i/o-error . nV4dd0) (make-i/o-encoding-error . nV4ecb) (make-i/o-decoding-error . nV4eb4) (make-custom-textual-output-port . nV5361) (make-custom-textual-input/output-port . nV5360) (make-custom-textual-input-port . nV535f) (make-custom-binary-output-port . nV535e) (make-custom-binary-input/output-port . nV535d) (make-custom-binary-input-port . nV535c) (make-bytevector . nV535b) (lookahead-u8 . nV535a) (lookahead-char . nV5359) (i/o-write-error? . nV4dfc) (i/o-read-error? . nV4de7) (i/o-port-error? . nV4e9f) (i/o-invalid-position-error? . nV4e15) (i/o-filename-error? . nV4e30) (i/o-file-protection-error? . nV4e47) (i/o-file-is-read-only-error? . nV4e5c) (i/o-file-does-not-exist-error? . nV4e86) (i/o-file-already-exists-error? . nV4e71) (i/o-error? . nV4dd2) (i/o-error-position . nV4e17) (i/o-error-port . nV4ea1) (i/o-error-filename . nV4e32) (i/o-encoding-error? . nV4ecf) (i/o-encoding-error-char . nV4ed1) (i/o-decoding-error? . nV4eb6) (get-u8 . nV5358) (get-string-n! . nV5357) (get-string-n . nV5356) (get-string-all . nV5355) (get-line . nV5354) (get-datum . nV5353) (get-char . nV5352) (get-bytevector-some . nV5351) (get-bytevector-n! . nV5350) (get-bytevector-n . nV534f) (get-bytevector-all . nV534e) (flush-output-port . nV534d) (close-port . nV534c) (exit . nV5344) (command-line . nV5008) (string-fill! . nV5343) (string-set! . nV5342) (set-cdr! . nV5341) (set-car! . nV5340) (remove . nV533f) (remv . nV533e) (remp . nV533d) (remq . nV533c) (partition . nV533b) (memv . nV533a) (memq . nV5339) (memp . nV5338) (member . nV5337) (exists . nV5336) (for-all . nV5335) (fold-right . nV5334) (fold-left . nV5333) (find . nV5332) (filter . nV5331) (cons* . nV5330) (assv . nV532f) (assq . nV532e) (assp . nV532d) (assoc . nV532c) (call-with-string-output-port . nV532b) (call-with-port . nV532a) (call-with-bytevector-output-port . nV5329) (bytevector->string . nV5328) (buffer-mode? . nV5327) (binary-port? . nV5326) (with-exception-handler . nV5325) (raise-continuable . nV5324) (raise . nV5323) (eval . nV31b0) (environment . nV31a8) (make-enumeration . nV5322) (enum-set=? . nV5321) (enum-set-universe . nV5320) (enum-set-union . nV531f) (enum-set-subset? . nV531e) (enum-set-projection . nV531d) (enum-set-member? . nV531c) (enum-set-intersection . nV531b) (enum-set-indexer . nV531a) (enum-set-difference . nV5319) (enum-set-constructor . nV5318) (enum-set-complement . nV5317) (enum-set->list . nV5316) (who-condition? . nV4d46) (warning? . nV4cbe) (violation? . nV4cfd) (undefined-violation? . nV4dbd) (syntax-violation? . nV4da4) (syntax-violation-subform . nV4da8) (syntax-violation-form . nV4da6) (syntax-violation . nV31d0) (simple-conditions . nV5315) (serious-condition? . nV4cd3) (non-continuable-violation? . nV4d5d) (message-condition? . nV4ca7) (make-who-condition . nV4d42) (make-warning . nV4cbc) (make-violation . nV4cfb) (make-undefined-violation . nV4dbb) (make-syntax-violation . nV4d9e) (make-serious-condition . nV4cd1) (make-non-continuable-violation . nV4d5b) (make-message-condition . nV4ca3) (make-lexical-violation . nV4d85) (make-irritants-condition . nV4d27) (make-implementation-restriction-violation . nV4d70) (make-error . nV4ce6) (make-assertion-violation . nV4d10) (lexical-violation? . nV4d87) (irritants-condition? . nV4d2b) (implementation-restriction-violation? . nV4d72) (error? . nV4ce8) (condition-who . nV4d48) (condition-predicate . nV5314) (condition-message . nV4ca9) (condition-irritants . nV4d2d) (condition-accessor . nV5313) (condition . nV5312) (assertion-violation? . nV4d12) (condition? . nV5311) (utf32->string . nV5310) (utf16->string . nV530f) (utf8->string . nV530e) (uint-list->bytevector . nV530d) (u8-list->bytevector . nV530c) (string->utf8 . nV530b) (string->utf32 . nV530a) (string->utf16 . nV5309) (sint-list->bytevector . nV5308) (native-endianness . nV5307) (bytevector? . nV5306) (bytevector=? . nV5305) (bytevector-uint-set! . nV5304) (bytevector-uint-ref . nV5303) (bytevector-u8-set! . nV5302) (bytevector-u8-ref . nV5301) (bytevector-u64-set! . nV5300) (bytevector-u64-ref . nV52ff) (bytevector-u64-native-set! . nV52fe) (bytevector-u64-native-ref . nV52fd) (bytevector-u32-set! . nV52fc) (bytevector-u32-ref . nV52fb) (bytevector-u32-native-set! . nV52fa) (bytevector-u32-native-ref . nV52f9) (bytevector-u16-set! . nV52f8) (bytevector-u16-ref . nV52f7) (bytevector-u16-native-set! . nV52f6) (bytevector-u16-native-ref . nV52f5) (bytevector-sint-set! . nV52f4) (bytevector-sint-ref . nV52f3) (bytevector-s8-set! . nV52f2) (bytevector-s8-ref . nV52f1) (bytevector-s64-set! . nV52f0) (bytevector-s64-ref . nV52ef) (bytevector-s64-native-set! . nV52ee) (bytevector-s64-native-ref . nV52ed) (bytevector-s32-set! . nV52ec) (bytevector-s32-ref . nV52eb) (bytevector-s32-native-set! . nV52ea) (bytevector-s32-native-ref . nV52e9) (bytevector-s16-set! . nV52e8) (bytevector-s16-ref . nV52e7) (bytevector-s16-native-set! . nV52e6) (bytevector-s16-native-ref . nV52e5) (bytevector-length . nV52e4) (bytevector-ieee-single-ref . nV52e3) (bytevector-ieee-single-set! . nV52e2) (bytevector-ieee-single-native-set! . nV52e1) (bytevector-ieee-single-native-ref . nV52e0) (bytevector-ieee-double-set! . nV52df) (bytevector-ieee-double-ref . nV52de) (bytevector-ieee-double-native-set! . nV52dd) (bytevector-ieee-double-native-ref . nV52dc) (bytevector-fill! . nV52db) (bytevector-copy! . nV52da) (bytevector-copy . nV52d9) (bytevector->uint-list . nV52d8) (bytevector->u8-list . nV52d7) (bytevector->sint-list . nV52d6) (no-nans-violation? . nV4efb) (no-infinities-violation? . nV4ee6) (make-no-nans-violation . nV4ef9) (make-no-infinities-violation . nV4ee4) (real->flonum . nV52d5) (flzero? . nV52d4) (fltruncate . nV52d3) (fltan . nV52d2) (flsqrt . nV52d1) (flsin . nV52d0) (flround . nV52cf) (flpositive? . nV52ce) (flonum? . nV52cd) (flodd? . nV52cc) (flnumerator . nV52cb) (flnegative? . nV52ca) (flnan? . nV52c9) (flmod0 . nV52c8) (flmod . nV52c7) (flmin . nV52c6) (flmax . nV52c5) (fllog . nV52c4) (flinteger? . nV52c3) (flinfinite? . nV52c2) (flfloor . nV52c1) (flfinite? . nV52c0) (flexpt . nV52bf) (flexp . nV52be) (fleven? . nV52bd) (fldiv0-and-mod0 . nV52bc) (fldiv0 . nV52bb) (fldiv-and-mod . nV52ba) (fldiv . nV52b9) (fldenominator . nV52b8) (flcos . nV52b7) (flceiling . nV52b6) (flatan . nV52b5) (flasin . nV52b4) (flacos . nV52b3) (flabs . nV52b2) (fl>? . nV52b1) (fl>=? . nV52b0) (fl=? . nV52af) (fl<? . nV52ae) (fl<=? . nV52ad) (fl/ . nV52ac) (fl- . nV52ab) (fl+ . nV52aa) (fl* . nV52a9) (fixnum->flonum . nV52a8) (fxzero? . nV52a7) (fxxor . nV52a6) (fxrotate-bit-field . nV52a5) (fxreverse-bit-field . nV52a4) (fxpositive? . nV52a3) (fxodd? . nV52a2) (fxnot . nV52a1) (fxnegative? . nV52a0) (fxmod0 . nV529f) (fxmod . nV529e) (fxmin . nV529d) (fxmax . nV529c) (fxlength . nV529b) (fxior . nV529a) (fxif . nV5299) (fxfirst-bit-set . nV5298) (fxeven? . nV5297) (fxdiv0-and-mod0 . nV5296) (fxdiv0 . nV5295) (fxdiv-and-mod . nV5294) (fxdiv . nV5293) (fxcopy-bit-field . nV5292) (fxcopy-bit . nV5291) (fxbit-set? . nV5290) (fxbit-field . nV528f) (fxbit-count . nV528e) (fxarithmetic-shift-right . nV528d) (fxarithmetic-shift-left . nV528c) (fxarithmetic-shift . nV528b) (fxand . nV528a) (fx>? . nV5289) (fx>=? . nV5288) (fx=? . nV5287) (fx<? . nV5286) (fx<=? . nV5285) (fx-/carry . nV5284) (fx- . nV5283) (fx+/carry . nV5282) (fx+ . nV5281) (fx*/carry . nV5280) (fx* . nV527f) (greatest-fixnum . nV527e) (least-fixnum . nV527d) (fixnum-width . nV527c) (fixnum? . nV527b) (bitwise-rotate-bit-field . nV527a) (bitwise-reverse-bit-field . nV5279) (bitwise-length . nV5278) (bitwise-if . nV5277) (bitwise-first-bit-set . nV5276) (bitwise-copy-bit-field . nV5275) (bitwise-copy-bit . nV5274) (bitwise-bit-set? . nV5273) (bitwise-bit-field . nV5272) (bitwise-bit-count . nV5271) (bitwise-xor . nV5270) (bitwise-ior . nV526f) (bitwise-and . nV526e) (bitwise-not . nV526d) (bitwise-arithmetic-shift-right . nV526c) (bitwise-arithmetic-shift-left . nV526b) (bitwise-arithmetic-shift . nV526a) (zero? . nV5269) (vector? . nV5268) (vector-set! . nV5267) (vector-ref . nV5266) (vector-map . nV5265) (vector-length . nV5264) (vector-for-each . nV5263) (vector-fill! . nV5262) (vector->list . nV5261) (vector . nV5260) (values . nV525f) (truncate . nV525e) (tan . nV525d) (symbol? . nV525c) (symbol=? . nV525b) (symbol->string . nV525a) (substring . nV5259) (string? . nV5258) (string>? . nV5257) (string>=? . nV5256) (string=? . nV5255) (string<? . nV5254) (string<=? . nV5253) (string-ref . nV5252) (string-length . nV5251) (string-for-each . nV5250) (string-copy . nV524f) (string-append . nV524e) (string->symbol . nV524d) (string->number . nV524c) (string->list . nV524b) (string . nV524a) (sqrt . nV5249) (sin . nV5248) (round . nV5247) (reverse . nV5246) (real? . nV5245) (real-valued? . nV5244) (real-part . nV5243) (rationalize . nV5242) (rational? . nV5241) (rational-valued? . nV5240) (procedure? . nV523f) (positive? . nV523e) (pair? . nV523d) (odd? . nV523c) (numerator . nV523b) (number? . nV523a) (number->string . nV5239) (null? . nV5238) (not . nV5237) (negative? . nV5236) (nan? . nV5235) (min . nV5234) (max . nV5233) (map . nV5232) (make-vector . nV5231) (make-string . nV5230) (make-rectangular . nV522f) (make-polar . nV522e) (magnitude . nV522d) (log . nV522c) (list? . nV522b) (list-tail . nV522a) (list-ref . nV5229) (list->vector . nV5228) (list->string . nV5227) (list . nV5226) (length . nV5225) (lcm . nV5224) (integer? . nV5223) (integer-valued? . nV5222) (integer->char . nV5221) (infinite? . nV5220) (inexact? . nV521f) (inexact . nV521e) (imag-part . nV521d) (gcd . nV521c) (for-each . nV521b) (floor . nV521a) (finite? . nV5219) (expt . nV5218) (exp . nV5217) (exact? . nV5216) (exact-integer-sqrt . nV5215) (exact . nV5214) (even? . nV5213) (error . nV5212) (eqv? . nV5211) (equal? . nV5210) (eq? . nV520f) (dynamic-wind . nV520e) (div0-and-mod0 . nV520d) (mod0 . nV520c) (div0 . nV520b) (div-and-mod . nV520a) (mod . nV5209) (div . nV5208) (denominator . nV5207) (cos . nV5206) (cons . nV5205) (complex? . nV5204) (char? . nV5203) (char>? . nV5202) (char>=? . nV5201) (char=? . nV5200) (char<? . nV51ff) (char<=? . nV51fe) (char->integer . nV51fd) (ceiling . nV51fc) (call-with-values . nV51fb) (call/cc . nV51fa) (call-with-current-continuation . nV51f9) (cddddr . nV51f8) (cdddar . nV51f7) (cddadr . nV51f6) (cddaar . nV51f5) (cdaddr . nV51f4) (cdadar . nV51f3) (cdaadr . nV51f2) (cdaaar . nV51f1) (cadddr . nV51f0) (caddar . nV51ef) (cadadr . nV51ee) (cadaar . nV51ed) (caaddr . nV51ec) (caadar . nV51eb) (caaadr . nV51ea) (caaaar . nV51e9) (cdddr . nV51e8) (cddar . nV51e7) (cdadr . nV51e6) (cdaar . nV51e5) (caddr . nV51e4) (cadar . nV51e3) (caadr . nV51e2) (caaar . nV51e1) (cddr . nV51e0) (cdar . nV51df) (cadr . nV51de) (caar . nV51dd) (cdr . nV51dc) (car . nV51db) (boolean? . nV51da) (boolean=? . nV51d9) (atan . nV51d8) (assertion-violation . nV51d7) (asin . nV51d6) (apply . nV51d5) (append . nV51d4) (angle . nV51d3) (acos . nV51d2) (abs . nV51d1) (/ . nV51d0) (* . nV51cf) (- . nV51ce) (+ . nV51cd) (>= . nV51cc) (> . nV51cb) (= . nV51ca) (<= . nV51c9) (< . nV51c8) (library . nV51c7) (&no-nans . nV51c6) (&no-infinities . nV51c5) (&i/o-encoding . nV51c4) (&i/o-decoding . nV51c3) (&i/o-port . nV51c2) (&i/o-file-does-not-exist . nV51c1) (&i/o-file-already-exists . nV51c0) (&i/o-file-is-read-only . nV51bf) (&i/o-file-protection . nV51be) (&i/o-filename . nV51bd) (&i/o-invalid-position . nV51bc) (&i/o-write . nV51bb) (&i/o-read . nV51ba) (&i/o . nV51b9) (&undefined . nV51b8) (&syntax . nV51b7) (&lexical . nV51b6) (&implementation-restriction . nV51b5) (&non-continuable . nV51b4) (&who . nV51b3) (&irritants . nV51b2) (&assertion . nV51b1) (&violation . nV51b0) (&error . nV51af) (&serious . nV51ae) (&warning . nV51ad) (&message . nV51ac) (&condition . nV51ab) (define-condition-type . nV51aa) (define-enumeration . nV51a9) (define-record-type . nV51a8) (parent-rtd . nV51a7) (nongenerative . nV51a6) (opaque . nV51a5) (sealed . nV51a4) (protocol . nV51a3) (parent . nV51a2) (immutable . nV51a1) (mutable . nV51a0) (fields . nV519f) (error-handling-mode . nV519e) (file-options . nV519d) (buffer-mode . nV519c) (eol-style . nV519b) (guard . nV519a) (unsyntax-splicing . nV5197) (unsyntax . nV5196) (unquote-splicing . nV5195) (unquote . nV5194) (_ . nV5193) (else . nV5192) (=> . nV5191) (... . nV5190) (assert . nV518f) (endianness . nV518e) (time . nV518c) (do . nV518b) (cond . nV518a) (let* . nV5189) (let*-values . nV5188) (let-values . nV5187) (identifier-syntax . nV5186) (with-syntax . nV5185) (quasisyntax . nV5184) (quasiquote . nV5183) (syntax-rules . nV5182) (include . nV5181) (record-constructor-descriptor . nV517f) (record-type-descriptor . nV517e) (case . nV517d) (unless . nV517b) (when . nV517a) (or . nV5179) (and . nV5178) (if . nV5177) (let . nV5176) (letrec* . nV5175) (letrec . nV5174) (case-lambda . nV5172) (lambda . nV5171) (syntax . nV5170) (syntax-case . nV516f) (quote . nV516e) (letrec-syntax . nV516c) (let-syntax . nV516b) (set! . nV516a) (import . nV5169) (begin . nV5168) (define-syntax . nV5166) (define . nV5165)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV5496 '(psyntax null-environment-5) '() '() '() '() '((make-promise . nV5345) (unquote-splicing . nV5195) (unquote . nV5194) (_ . nV5193) (else . nV5192) (=> . nV5191) (... . nV5190) (delay . nV518d) (do . nV518b) (cond . nV518a) (let* . nV5189) (quasiquote . nV5183) (syntax-rules . nV5182) (case . nV517d) (or . nV5179) (and . nV5178) (if . nV5177) (let . nV5176) (letrec . nV5174) (lambda . nV5171) (quote . nV516e) (letrec-syntax . nV516c) (let-syntax . nV516b) (set! . nV516a) (begin . nV5168) (define-syntax . nV5166) (define . nV5165)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV5497 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . nV53da) (string-ci>=? . nV53d9) (string-ci=? . nV53d8) (string-ci<? . nV53d7) (string-ci<=? . nV53d6) (char-whitespace? . nV53d5) (char-upper-case? . nV53d4) (char-numeric? . nV53d2) (char-lower-case? . nV53d1) (char-upcase . nV53cf) (char-downcase . nV53cc) (char-ci>? . nV53cb) (char-ci>=? . nV53ca) (char-ci=? . nV53c9) (char-ci<? . nV53c8) (char-ci<=? . nV53c7) (char-alphabetic? . nV53c6) (call-with-output-file . nV539a) (call-with-input-file . nV5399) (write-char . nV5398) (write . nV5397) (with-output-to-file . nV5396) (with-input-from-file . nV5395) (read-char . nV5394) (read . nV5393) (peek-char . nV5392) (open-output-file . nV5391) (open-input-file . nV5390) (newline . nV538f) (display . nV538e) (close-output-port . nV538d) (close-input-port . nV538c) (eof-object . nV538a) (current-output-port . nV5388) (current-input-port . nV5387) (output-port? . nV5386) (input-port? . nV5385) (scheme-report-environment . nV31ac) (quotient . nV534b) (null-environment . nV31aa) (remainder . nV534a) (modulo . nV5349) (inexact->exact . nV5348) (force . nV5347) (exact->inexact . nV5346) (make-promise . nV5345) (string-fill! . nV5343) (string-set! . nV5342) (set-cdr! . nV5341) (set-car! . nV5340) (memv . nV533a) (memq . nV5339) (member . nV5337) (assv . nV532f) (assq . nV532e) (assoc . nV532c) (eval . nV31b0) (zero? . nV5269) (vector? . nV5268) (vector-set! . nV5267) (vector-ref . nV5266) (vector-length . nV5264) (vector-fill! . nV5262) (vector->list . nV5261) (vector . nV5260) (values . nV525f) (truncate . nV525e) (tan . nV525d) (symbol? . nV525c) (symbol->string . nV525a) (substring . nV5259) (string? . nV5258) (string>? . nV5257) (string>=? . nV5256) (string=? . nV5255) (string<? . nV5254) (string<=? . nV5253) (string-ref . nV5252) (string-length . nV5251) (string-copy . nV524f) (string-append . nV524e) (string->symbol . nV524d) (string->number . nV524c) (string->list . nV524b) (string . nV524a) (sqrt . nV5249) (sin . nV5248) (round . nV5247) (reverse . nV5246) (real? . nV5245) (real-part . nV5243) (rationalize . nV5242) (rational? . nV5241) (procedure? . nV523f) (positive? . nV523e) (pair? . nV523d) (odd? . nV523c) (numerator . nV523b) (number? . nV523a) (number->string . nV5239) (not . nV5237) (negative? . nV5236) (min . nV5234) (max . nV5233) (map . nV5232) (make-vector . nV5231) (make-string . nV5230) (make-rectangular . nV522f) (make-polar . nV522e) (magnitude . nV522d) (log . nV522c) (list? . nV522b) (list-tail . nV522a) (list-ref . nV5229) (list->vector . nV5228) (list->string . nV5227) (list . nV5226) (length . nV5225) (lcm . nV5224) (integer? . nV5223) (integer->char . nV5221) (inexact? . nV521f) (imag-part . nV521d) (gcd . nV521c) (for-each . nV521b) (floor . nV521a) (expt . nV5218) (exp . nV5217) (exact? . nV5216) (even? . nV5213) (eqv? . nV5211) (equal? . nV5210) (eq? . nV520f) (dynamic-wind . nV520e) (denominator . nV5207) (cos . nV5206) (cons . nV5205) (complex? . nV5204) (char? . nV5203) (char>? . nV5202) (char>=? . nV5201) (char=? . nV5200) (char<? . nV51ff) (char<=? . nV51fe) (char->integer . nV51fd) (ceiling . nV51fc) (call-with-values . nV51fb) (call-with-current-continuation . nV51f9) (cddddr . nV51f8) (cdddar . nV51f7) (cddadr . nV51f6) (cddaar . nV51f5) (cdaddr . nV51f4) (cdadar . nV51f3) (cdaadr . nV51f2) (cdaaar . nV51f1) (cadddr . nV51f0) (caddar . nV51ef) (cadadr . nV51ee) (cadaar . nV51ed) (caaddr . nV51ec) (caadar . nV51eb) (caaadr . nV51ea) (caaaar . nV51e9) (cdddr . nV51e8) (cddar . nV51e7) (cdadr . nV51e6) (cdaar . nV51e5) (caddr . nV51e4) (cadar . nV51e3) (caadr . nV51e2) (caaar . nV51e1) (cddr . nV51e0) (cdar . nV51df) (cadr . nV51de) (caar . nV51dd) (cdr . nV51dc) (car . nV51db) (boolean? . nV51da) (atan . nV51d8) (asin . nV51d6) (apply . nV51d5) (append . nV51d4) (angle . nV51d3) (acos . nV51d2) (abs . nV51d1) (/ . nV51d0) (* . nV51cf) (- . nV51ce) (+ . nV51cd) (>= . nV51cc) (> . nV51cb) (= . nV51ca) (<= . nV51c9) (< . nV51c8) (unquote-splicing . nV5195) (unquote . nV5194) (else . nV5192) (=> . nV5191) (... . nV5190) (delay . nV518d) (do . nV518b) (cond . nV518a) (let* . nV5189) (quasiquote . nV5183) (syntax-rules . nV5182) (case . nV517d) (or . nV5179) (and . nV5178) (if . nV5177) (let . nV5176) (letrec . nV5174) (lambda . nV5171) (quote . nV516e) (letrec-syntax . nV516c) (let-syntax . nV516b) (set! . nV516a) (begin . nV5168) (define-syntax . nV5166) (define . nV5165)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV5498 '(psyntax modules) '() '() '() '() '((module . nV5167)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV5499 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV549a '(rnrs) '(6) '() '() '() '((regexp? . nV548d) (string-upcase . nV53e2) (string-titlecase . nV53e1) (string-normalize-nfkd . nV53e0) (string-normalize-nfkc . nV53df) (string-normalize-nfd . nV53de) (string-normalize-nfc . nV53dd) (string-foldcase . nV53dc) (string-downcase . nV53db) (string-ci>? . nV53da) (string-ci>=? . nV53d9) (string-ci=? . nV53d8) (string-ci<? . nV53d7) (string-ci<=? . nV53d6) (char-whitespace? . nV53d5) (char-upper-case? . nV53d4) (char-title-case? . nV53d3) (char-numeric? . nV53d2) (char-lower-case? . nV53d1) (char-general-category . nV53d0) (char-upcase . nV53cf) (char-titlecase . nV53ce) (char-foldcase . nV53cd) (char-downcase . nV53cc) (char-ci>? . nV53cb) (char-ci>=? . nV53ca) (char-ci=? . nV53c9) (char-ci<? . nV53c8) (char-ci<=? . nV53c7) (char-alphabetic? . nV53c6) (make-variable-transformer . nV2f1b) (identifier? . nV31d2) (generate-temporaries . nV31be) (free-identifier=? . nV31c0) (syntax->datum . nV31d6) (datum->syntax . nV31d4) (bound-identifier=? . nV31c2) (record-type-descriptor? . nV53c5) (record-predicate . nV53c4) (record-mutator . nV53c3) (record-constructor . nV53c2) (record-accessor . nV53c1) (make-record-type-descriptor . nV53c0) (make-record-constructor-descriptor . nV53bf) (record? . nV53be) (record-type-uid . nV53bd) (record-type-sealed? . nV53bc) (record-type-parent . nV53bb) (record-type-opaque? . nV53ba) (record-type-name . nV53b9) (record-type-generative? . nV53b8) (record-type-field-names . nV53b7) (record-rtd . nV53b6) (record-field-mutable? . nV53b5) (delete-file . nV53b4) (file-exists? . nV53b3) (vector-sort! . nV53b2) (vector-sort . nV53b1) (list-sort . nV53b0) (symbol-hash . nV53af) (string-ci-hash . nV53ae) (string-hash . nV53ad) (equal-hash . nV53ac) (hashtable-equivalence-function . nV53ab) (make-hashtable . nV53aa) (hashtable-hash-function . nV53a9) (make-eqv-hashtable . nV53a8) (make-eq-hashtable . nV53a7) (hashtable? . nV53a6) (hashtable-update! . nV53a5) (hashtable-size . nV53a4) (hashtable-set! . nV53a3) (hashtable-ref . nV53a2) (hashtable-mutable? . nV53a1) (hashtable-keys . nV53a0) (hashtable-entries . nV539f) (hashtable-delete! . nV539e) (hashtable-copy . nV539d) (hashtable-contains? . nV539c) (hashtable-clear! . nV539b) (call-with-output-file . nV539a) (call-with-input-file . nV5399) (write-char . nV5398) (write . nV5397) (with-output-to-file . nV5396) (with-input-from-file . nV5395) (read-char . nV5394) (read . nV5393) (peek-char . nV5392) (open-output-file . nV5391) (open-input-file . nV5390) (newline . nV538f) (display . nV538e) (close-output-port . nV538d) (close-input-port . nV538c) (eof-object? . nV538b) (eof-object . nV538a) (current-error-port . nV5389) (current-output-port . nV5388) (current-input-port . nV5387) (output-port? . nV5386) (input-port? . nV5385) (utf-8-codec . nV5384) (utf-16-codec . nV5383) (transcoder-error-handling-mode . nV5382) (transcoder-eol-style . nV5381) (transcoder-codec . nV5380) (transcoded-port . nV537f) (textual-port? . nV537e) (string->bytevector . nV537d) (standard-output-port . nV537c) (standard-input-port . nV537b) (standard-error-port . nV537a) (set-port-position! . nV5379) (put-u8 . nV5378) (put-string . nV5377) (put-datum . nV5376) (put-char . nV5375) (put-bytevector . nV5374) (port? . nV5373) (port-transcoder . nV5372) (port-position . nV5371) (port-has-set-port-position!? . nV5370) (port-has-port-position? . nV536f) (port-eof? . nV536e) (output-port-buffer-mode . nV536d) (open-string-output-port . nV536c) (open-string-input-port . nV536b) (open-file-output-port . nV536a) (open-file-input/output-port . nV5369) (open-file-input-port . nV5368) (open-bytevector-output-port . nV5367) (open-bytevector-input-port . nV5366) (native-transcoder . nV5365) (native-eol-style . nV5364) (make-transcoder . nV5363) (latin-1-codec . nV5362) (make-i/o-write-error . nV4dfa) (make-i/o-read-error . nV4de5) (make-i/o-port-error . nV4e9b) (make-i/o-invalid-position-error . nV4e11) (make-i/o-filename-error . nV4e2c) (make-i/o-file-protection-error . nV4e45) (make-i/o-file-is-read-only-error . nV4e5a) (make-i/o-file-does-not-exist-error . nV4e84) (make-i/o-file-already-exists-error . nV4e6f) (make-i/o-error . nV4dd0) (make-i/o-encoding-error . nV4ecb) (make-i/o-decoding-error . nV4eb4) (make-custom-textual-output-port . nV5361) (make-custom-textual-input/output-port . nV5360) (make-custom-textual-input-port . nV535f) (make-custom-binary-output-port . nV535e) (make-custom-binary-input/output-port . nV535d) (make-custom-binary-input-port . nV535c) (make-bytevector . nV535b) (lookahead-u8 . nV535a) (lookahead-char . nV5359) (i/o-write-error? . nV4dfc) (i/o-read-error? . nV4de7) (i/o-port-error? . nV4e9f) (i/o-invalid-position-error? . nV4e15) (i/o-filename-error? . nV4e30) (i/o-file-protection-error? . nV4e47) (i/o-file-is-read-only-error? . nV4e5c) (i/o-file-does-not-exist-error? . nV4e86) (i/o-file-already-exists-error? . nV4e71) (i/o-error? . nV4dd2) (i/o-error-position . nV4e17) (i/o-error-port . nV4ea1) (i/o-error-filename . nV4e32) (i/o-encoding-error? . nV4ecf) (i/o-encoding-error-char . nV4ed1) (i/o-decoding-error? . nV4eb6) (get-u8 . nV5358) (get-string-n! . nV5357) (get-string-n . nV5356) (get-string-all . nV5355) (get-line . nV5354) (get-datum . nV5353) (get-char . nV5352) (get-bytevector-some . nV5351) (get-bytevector-n! . nV5350) (get-bytevector-n . nV534f) (get-bytevector-all . nV534e) (flush-output-port . nV534d) (close-port . nV534c) (exit . nV5344) (command-line . nV5008) (remove . nV533f) (remv . nV533e) (remp . nV533d) (remq . nV533c) (partition . nV533b) (memv . nV533a) (memq . nV5339) (memp . nV5338) (member . nV5337) (exists . nV5336) (for-all . nV5335) (fold-right . nV5334) (fold-left . nV5333) (find . nV5332) (filter . nV5331) (cons* . nV5330) (assv . nV532f) (assq . nV532e) (assp . nV532d) (assoc . nV532c) (call-with-string-output-port . nV532b) (call-with-port . nV532a) (call-with-bytevector-output-port . nV5329) (bytevector->string . nV5328) (buffer-mode? . nV5327) (binary-port? . nV5326) (with-exception-handler . nV5325) (raise-continuable . nV5324) (raise . nV5323) (make-enumeration . nV5322) (enum-set=? . nV5321) (enum-set-universe . nV5320) (enum-set-union . nV531f) (enum-set-subset? . nV531e) (enum-set-projection . nV531d) (enum-set-member? . nV531c) (enum-set-intersection . nV531b) (enum-set-indexer . nV531a) (enum-set-difference . nV5319) (enum-set-constructor . nV5318) (enum-set-complement . nV5317) (enum-set->list . nV5316) (who-condition? . nV4d46) (warning? . nV4cbe) (violation? . nV4cfd) (undefined-violation? . nV4dbd) (syntax-violation? . nV4da4) (syntax-violation-subform . nV4da8) (syntax-violation-form . nV4da6) (syntax-violation . nV31d0) (simple-conditions . nV5315) (serious-condition? . nV4cd3) (non-continuable-violation? . nV4d5d) (message-condition? . nV4ca7) (make-who-condition . nV4d42) (make-warning . nV4cbc) (make-violation . nV4cfb) (make-undefined-violation . nV4dbb) (make-syntax-violation . nV4d9e) (make-serious-condition . nV4cd1) (make-non-continuable-violation . nV4d5b) (make-message-condition . nV4ca3) (make-lexical-violation . nV4d85) (make-irritants-condition . nV4d27) (make-implementation-restriction-violation . nV4d70) (make-error . nV4ce6) (make-assertion-violation . nV4d10) (lexical-violation? . nV4d87) (irritants-condition? . nV4d2b) (implementation-restriction-violation? . nV4d72) (error? . nV4ce8) (condition-who . nV4d48) (condition-predicate . nV5314) (condition-message . nV4ca9) (condition-irritants . nV4d2d) (condition-accessor . nV5313) (condition . nV5312) (assertion-violation? . nV4d12) (condition? . nV5311) (utf32->string . nV5310) (utf16->string . nV530f) (utf8->string . nV530e) (uint-list->bytevector . nV530d) (u8-list->bytevector . nV530c) (string->utf8 . nV530b) (string->utf32 . nV530a) (string->utf16 . nV5309) (sint-list->bytevector . nV5308) (native-endianness . nV5307) (bytevector? . nV5306) (bytevector=? . nV5305) (bytevector-uint-set! . nV5304) (bytevector-uint-ref . nV5303) (bytevector-u8-set! . nV5302) (bytevector-u8-ref . nV5301) (bytevector-u64-set! . nV5300) (bytevector-u64-ref . nV52ff) (bytevector-u64-native-set! . nV52fe) (bytevector-u64-native-ref . nV52fd) (bytevector-u32-set! . nV52fc) (bytevector-u32-ref . nV52fb) (bytevector-u32-native-set! . nV52fa) (bytevector-u32-native-ref . nV52f9) (bytevector-u16-set! . nV52f8) (bytevector-u16-ref . nV52f7) (bytevector-u16-native-set! . nV52f6) (bytevector-u16-native-ref . nV52f5) (bytevector-sint-set! . nV52f4) (bytevector-sint-ref . nV52f3) (bytevector-s8-set! . nV52f2) (bytevector-s8-ref . nV52f1) (bytevector-s64-set! . nV52f0) (bytevector-s64-ref . nV52ef) (bytevector-s64-native-set! . nV52ee) (bytevector-s64-native-ref . nV52ed) (bytevector-s32-set! . nV52ec) (bytevector-s32-ref . nV52eb) (bytevector-s32-native-set! . nV52ea) (bytevector-s32-native-ref . nV52e9) (bytevector-s16-set! . nV52e8) (bytevector-s16-ref . nV52e7) (bytevector-s16-native-set! . nV52e6) (bytevector-s16-native-ref . nV52e5) (bytevector-length . nV52e4) (bytevector-ieee-single-ref . nV52e3) (bytevector-ieee-single-set! . nV52e2) (bytevector-ieee-single-native-set! . nV52e1) (bytevector-ieee-single-native-ref . nV52e0) (bytevector-ieee-double-set! . nV52df) (bytevector-ieee-double-ref . nV52de) (bytevector-ieee-double-native-set! . nV52dd) (bytevector-ieee-double-native-ref . nV52dc) (bytevector-fill! . nV52db) (bytevector-copy! . nV52da) (bytevector-copy . nV52d9) (bytevector->uint-list . nV52d8) (bytevector->u8-list . nV52d7) (bytevector->sint-list . nV52d6) (no-nans-violation? . nV4efb) (no-infinities-violation? . nV4ee6) (make-no-nans-violation . nV4ef9) (make-no-infinities-violation . nV4ee4) (real->flonum . nV52d5) (flzero? . nV52d4) (fltruncate . nV52d3) (fltan . nV52d2) (flsqrt . nV52d1) (flsin . nV52d0) (flround . nV52cf) (flpositive? . nV52ce) (flonum? . nV52cd) (flodd? . nV52cc) (flnumerator . nV52cb) (flnegative? . nV52ca) (flnan? . nV52c9) (flmod0 . nV52c8) (flmod . nV52c7) (flmin . nV52c6) (flmax . nV52c5) (fllog . nV52c4) (flinteger? . nV52c3) (flinfinite? . nV52c2) (flfloor . nV52c1) (flfinite? . nV52c0) (flexpt . nV52bf) (flexp . nV52be) (fleven? . nV52bd) (fldiv0-and-mod0 . nV52bc) (fldiv0 . nV52bb) (fldiv-and-mod . nV52ba) (fldiv . nV52b9) (fldenominator . nV52b8) (flcos . nV52b7) (flceiling . nV52b6) (flatan . nV52b5) (flasin . nV52b4) (flacos . nV52b3) (flabs . nV52b2) (fl>? . nV52b1) (fl>=? . nV52b0) (fl=? . nV52af) (fl<? . nV52ae) (fl<=? . nV52ad) (fl/ . nV52ac) (fl- . nV52ab) (fl+ . nV52aa) (fl* . nV52a9) (fixnum->flonum . nV52a8) (fxzero? . nV52a7) (fxxor . nV52a6) (fxrotate-bit-field . nV52a5) (fxreverse-bit-field . nV52a4) (fxpositive? . nV52a3) (fxodd? . nV52a2) (fxnot . nV52a1) (fxnegative? . nV52a0) (fxmod0 . nV529f) (fxmod . nV529e) (fxmin . nV529d) (fxmax . nV529c) (fxlength . nV529b) (fxior . nV529a) (fxif . nV5299) (fxfirst-bit-set . nV5298) (fxeven? . nV5297) (fxdiv0-and-mod0 . nV5296) (fxdiv0 . nV5295) (fxdiv-and-mod . nV5294) (fxdiv . nV5293) (fxcopy-bit-field . nV5292) (fxcopy-bit . nV5291) (fxbit-set? . nV5290) (fxbit-field . nV528f) (fxbit-count . nV528e) (fxarithmetic-shift-right . nV528d) (fxarithmetic-shift-left . nV528c) (fxarithmetic-shift . nV528b) (fxand . nV528a) (fx>? . nV5289) (fx>=? . nV5288) (fx=? . nV5287) (fx<? . nV5286) (fx<=? . nV5285) (fx-/carry . nV5284) (fx- . nV5283) (fx+/carry . nV5282) (fx+ . nV5281) (fx*/carry . nV5280) (fx* . nV527f) (greatest-fixnum . nV527e) (least-fixnum . nV527d) (fixnum-width . nV527c) (fixnum? . nV527b) (bitwise-rotate-bit-field . nV527a) (bitwise-reverse-bit-field . nV5279) (bitwise-length . nV5278) (bitwise-if . nV5277) (bitwise-first-bit-set . nV5276) (bitwise-copy-bit-field . nV5275) (bitwise-copy-bit . nV5274) (bitwise-bit-set? . nV5273) (bitwise-bit-field . nV5272) (bitwise-bit-count . nV5271) (bitwise-xor . nV5270) (bitwise-ior . nV526f) (bitwise-and . nV526e) (bitwise-not . nV526d) (bitwise-arithmetic-shift-right . nV526c) (bitwise-arithmetic-shift-left . nV526b) (bitwise-arithmetic-shift . nV526a) (zero? . nV5269) (vector? . nV5268) (vector-set! . nV5267) (vector-ref . nV5266) (vector-map . nV5265) (vector-length . nV5264) (vector-for-each . nV5263) (vector-fill! . nV5262) (vector->list . nV5261) (vector . nV5260) (values . nV525f) (truncate . nV525e) (tan . nV525d) (symbol? . nV525c) (symbol=? . nV525b) (symbol->string . nV525a) (substring . nV5259) (string? . nV5258) (string>? . nV5257) (string>=? . nV5256) (string=? . nV5255) (string<? . nV5254) (string<=? . nV5253) (string-ref . nV5252) (string-length . nV5251) (string-for-each . nV5250) (string-copy . nV524f) (string-append . nV524e) (string->symbol . nV524d) (string->number . nV524c) (string->list . nV524b) (string . nV524a) (sqrt . nV5249) (sin . nV5248) (round . nV5247) (reverse . nV5246) (real? . nV5245) (real-valued? . nV5244) (real-part . nV5243) (rationalize . nV5242) (rational? . nV5241) (rational-valued? . nV5240) (procedure? . nV523f) (positive? . nV523e) (pair? . nV523d) (odd? . nV523c) (numerator . nV523b) (number? . nV523a) (number->string . nV5239) (null? . nV5238) (not . nV5237) (negative? . nV5236) (nan? . nV5235) (min . nV5234) (max . nV5233) (map . nV5232) (make-vector . nV5231) (make-string . nV5230) (make-rectangular . nV522f) (make-polar . nV522e) (magnitude . nV522d) (log . nV522c) (list? . nV522b) (list-tail . nV522a) (list-ref . nV5229) (list->vector . nV5228) (list->string . nV5227) (list . nV5226) (length . nV5225) (lcm . nV5224) (integer? . nV5223) (integer-valued? . nV5222) (integer->char . nV5221) (infinite? . nV5220) (inexact? . nV521f) (inexact . nV521e) (imag-part . nV521d) (gcd . nV521c) (for-each . nV521b) (floor . nV521a) (finite? . nV5219) (expt . nV5218) (exp . nV5217) (exact? . nV5216) (exact-integer-sqrt . nV5215) (exact . nV5214) (even? . nV5213) (error . nV5212) (eqv? . nV5211) (equal? . nV5210) (eq? . nV520f) (dynamic-wind . nV520e) (div0-and-mod0 . nV520d) (mod0 . nV520c) (div0 . nV520b) (div-and-mod . nV520a) (mod . nV5209) (div . nV5208) (denominator . nV5207) (cos . nV5206) (cons . nV5205) (complex? . nV5204) (char? . nV5203) (char>? . nV5202) (char>=? . nV5201) (char=? . nV5200) (char<? . nV51ff) (char<=? . nV51fe) (char->integer . nV51fd) (ceiling . nV51fc) (call-with-values . nV51fb) (call/cc . nV51fa) (call-with-current-continuation . nV51f9) (cddddr . nV51f8) (cdddar . nV51f7) (cddadr . nV51f6) (cddaar . nV51f5) (cdaddr . nV51f4) (cdadar . nV51f3) (cdaadr . nV51f2) (cdaaar . nV51f1) (cadddr . nV51f0) (caddar . nV51ef) (cadadr . nV51ee) (cadaar . nV51ed) (caaddr . nV51ec) (caadar . nV51eb) (caaadr . nV51ea) (caaaar . nV51e9) (cdddr . nV51e8) (cddar . nV51e7) (cdadr . nV51e6) (cdaar . nV51e5) (caddr . nV51e4) (cadar . nV51e3) (caadr . nV51e2) (caaar . nV51e1) (cddr . nV51e0) (cdar . nV51df) (cadr . nV51de) (caar . nV51dd) (cdr . nV51dc) (car . nV51db) (boolean? . nV51da) (boolean=? . nV51d9) (atan . nV51d8) (assertion-violation . nV51d7) (asin . nV51d6) (apply . nV51d5) (append . nV51d4) (angle . nV51d3) (acos . nV51d2) (abs . nV51d1) (/ . nV51d0) (* . nV51cf) (- . nV51ce) (+ . nV51cd) (>= . nV51cc) (> . nV51cb) (= . nV51ca) (<= . nV51c9) (< . nV51c8) (&no-nans . nV51c6) (&no-infinities . nV51c5) (&i/o-encoding . nV51c4) (&i/o-decoding . nV51c3) (&i/o-port . nV51c2) (&i/o-file-does-not-exist . nV51c1) (&i/o-file-already-exists . nV51c0) (&i/o-file-is-read-only . nV51bf) (&i/o-file-protection . nV51be) (&i/o-filename . nV51bd) (&i/o-invalid-position . nV51bc) (&i/o-write . nV51bb) (&i/o-read . nV51ba) (&i/o . nV51b9) (&undefined . nV51b8) (&syntax . nV51b7) (&lexical . nV51b6) (&implementation-restriction . nV51b5) (&non-continuable . nV51b4) (&who . nV51b3) (&irritants . nV51b2) (&assertion . nV51b1) (&violation . nV51b0) (&error . nV51af) (&serious . nV51ae) (&warning . nV51ad) (&message . nV51ac) (&condition . nV51ab) (define-condition-type . nV51aa) (define-enumeration . nV51a9) (define-record-type . nV51a8) (parent-rtd . nV51a7) (nongenerative . nV51a6) (opaque . nV51a5) (sealed . nV51a4) (protocol . nV51a3) (parent . nV51a2) (immutable . nV51a1) (mutable . nV51a0) (fields . nV519f) (error-handling-mode . nV519e) (file-options . nV519d) (buffer-mode . nV519c) (eol-style . nV519b) (guard . nV519a) (unsyntax-splicing . nV5197) (unsyntax . nV5196) (unquote-splicing . nV5195) (unquote . nV5194) (_ . nV5193) (else . nV5192) (=> . nV5191) (... . nV5190) (assert . nV518f) (endianness . nV518e) (do . nV518b) (cond . nV518a) (let* . nV5189) (let*-values . nV5188) (let-values . nV5187) (identifier-syntax . nV5186) (with-syntax . nV5185) (quasisyntax . nV5184) (quasiquote . nV5183) (syntax-rules . nV5182) (record-constructor-descriptor . nV517f) (record-type-descriptor . nV517e) (case . nV517d) (unless . nV517b) (when . nV517a) (or . nV5179) (and . nV5178) (if . nV5177) (let . nV5176) (letrec* . nV5175) (letrec . nV5174) (case-lambda . nV5172) (lambda . nV5171) (syntax . nV5170) (syntax-case . nV516f) (quote . nV516e) (letrec-syntax . nV516c) (let-syntax . nV516b) (set! . nV516a) (begin . nV5168) (define-syntax . nV5166) (define . nV5165)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV549b '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . nV31ac) (quotient . nV534b) (null-environment . nV31aa) (remainder . nV534a) (modulo . nV5349) (inexact->exact . nV5348) (force . nV5347) (exact->inexact . nV5346) (make-promise . nV5345) (delay . nV518d)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV549c '(rnrs control) '(6) '() '() '() '((do . nV518b) (unless . nV517b) (when . nV517a) (case-lambda . nV5172)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV549d '(rnrs eval) '(6) '() '() '() '((eval . nV31b0) (environment . nV31a8)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV549e '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . nV5341) (set-car! . nV5340)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV549f '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . nV5343) (string-set! . nV5342)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV54a0 '(rnrs programs) '(6) '() '() '() '((exit . nV5344) (command-line . nV5008)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV54a1 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . nV2f1b) (identifier? . nV31d2) (generate-temporaries . nV31be) (free-identifier=? . nV31c0) (syntax->datum . nV31d6) (datum->syntax . nV31d4) (bound-identifier=? . nV31c2) (syntax-violation . nV31d0) (unsyntax-splicing . nV5197) (unsyntax . nV5196) (_ . nV5193) (... . nV5190) (with-syntax . nV5185) (quasisyntax . nV5184) (syntax . nV5170) (syntax-case . nV516f)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV54a2 '(rnrs files) '(6) '() '() '() '((delete-file . nV53b4) (file-exists? . nV53b3) (make-i/o-write-error . nV4dfa) (make-i/o-read-error . nV4de5) (make-i/o-port-error . nV4e9b) (make-i/o-invalid-position-error . nV4e11) (make-i/o-filename-error . nV4e2c) (make-i/o-file-protection-error . nV4e45) (make-i/o-file-is-read-only-error . nV4e5a) (make-i/o-file-does-not-exist-error . nV4e84) (make-i/o-file-already-exists-error . nV4e6f) (make-i/o-error . nV4dd0) (i/o-write-error? . nV4dfc) (i/o-read-error? . nV4de7) (i/o-port-error? . nV4e9f) (i/o-invalid-position-error? . nV4e15) (i/o-filename-error? . nV4e30) (i/o-file-protection-error? . nV4e47) (i/o-file-is-read-only-error? . nV4e5c) (i/o-file-does-not-exist-error? . nV4e86) (i/o-file-already-exists-error? . nV4e71) (i/o-error? . nV4dd2) (i/o-error-position . nV4e17) (i/o-error-port . nV4ea1) (i/o-error-filename . nV4e32) (&i/o-port . nV51c2) (&i/o-file-does-not-exist . nV51c1) (&i/o-file-already-exists . nV51c0) (&i/o-file-is-read-only . nV51bf) (&i/o-file-protection . nV51be) (&i/o-filename . nV51bd) (&i/o-invalid-position . nV51bc) (&i/o-write . nV51bb) (&i/o-read . nV51ba) (&i/o . nV51b9)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV54a3 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . nV53b2) (vector-sort . nV53b1) (list-sort . nV53b0)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV54a4 '(rnrs base) '(6) '() '() '() '((zero? . nV5269) (vector? . nV5268) (vector-set! . nV5267) (vector-ref . nV5266) (vector-map . nV5265) (vector-length . nV5264) (vector-for-each . nV5263) (vector-fill! . nV5262) (vector->list . nV5261) (vector . nV5260) (values . nV525f) (truncate . nV525e) (tan . nV525d) (symbol? . nV525c) (symbol=? . nV525b) (symbol->string . nV525a) (substring . nV5259) (string? . nV5258) (string>? . nV5257) (string>=? . nV5256) (string=? . nV5255) (string<? . nV5254) (string<=? . nV5253) (string-ref . nV5252) (string-length . nV5251) (string-for-each . nV5250) (string-copy . nV524f) (string-append . nV524e) (string->symbol . nV524d) (string->number . nV524c) (string->list . nV524b) (string . nV524a) (sqrt . nV5249) (sin . nV5248) (round . nV5247) (reverse . nV5246) (real? . nV5245) (real-valued? . nV5244) (real-part . nV5243) (rationalize . nV5242) (rational? . nV5241) (rational-valued? . nV5240) (procedure? . nV523f) (positive? . nV523e) (pair? . nV523d) (odd? . nV523c) (numerator . nV523b) (number? . nV523a) (number->string . nV5239) (null? . nV5238) (not . nV5237) (negative? . nV5236) (nan? . nV5235) (min . nV5234) (max . nV5233) (map . nV5232) (make-vector . nV5231) (make-string . nV5230) (make-rectangular . nV522f) (make-polar . nV522e) (magnitude . nV522d) (log . nV522c) (list? . nV522b) (list-tail . nV522a) (list-ref . nV5229) (list->vector . nV5228) (list->string . nV5227) (list . nV5226) (length . nV5225) (lcm . nV5224) (integer? . nV5223) (integer-valued? . nV5222) (integer->char . nV5221) (infinite? . nV5220) (inexact? . nV521f) (inexact . nV521e) (imag-part . nV521d) (gcd . nV521c) (for-each . nV521b) (floor . nV521a) (finite? . nV5219) (expt . nV5218) (exp . nV5217) (exact? . nV5216) (exact-integer-sqrt . nV5215) (exact . nV5214) (even? . nV5213) (error . nV5212) (eqv? . nV5211) (equal? . nV5210) (eq? . nV520f) (dynamic-wind . nV520e) (div0-and-mod0 . nV520d) (mod0 . nV520c) (div0 . nV520b) (div-and-mod . nV520a) (mod . nV5209) (div . nV5208) (denominator . nV5207) (cos . nV5206) (cons . nV5205) (complex? . nV5204) (char? . nV5203) (char>? . nV5202) (char>=? . nV5201) (char=? . nV5200) (char<? . nV51ff) (char<=? . nV51fe) (char->integer . nV51fd) (ceiling . nV51fc) (call-with-values . nV51fb) (call/cc . nV51fa) (call-with-current-continuation . nV51f9) (cddddr . nV51f8) (cdddar . nV51f7) (cddadr . nV51f6) (cddaar . nV51f5) (cdaddr . nV51f4) (cdadar . nV51f3) (cdaadr . nV51f2) (cdaaar . nV51f1) (cadddr . nV51f0) (caddar . nV51ef) (cadadr . nV51ee) (cadaar . nV51ed) (caaddr . nV51ec) (caadar . nV51eb) (caaadr . nV51ea) (caaaar . nV51e9) (cdddr . nV51e8) (cddar . nV51e7) (cdadr . nV51e6) (cdaar . nV51e5) (caddr . nV51e4) (cadar . nV51e3) (caadr . nV51e2) (caaar . nV51e1) (cddr . nV51e0) (cdar . nV51df) (cadr . nV51de) (caar . nV51dd) (cdr . nV51dc) (car . nV51db) (boolean? . nV51da) (boolean=? . nV51d9) (atan . nV51d8) (assertion-violation . nV51d7) (asin . nV51d6) (apply . nV51d5) (append . nV51d4) (angle . nV51d3) (acos . nV51d2) (abs . nV51d1) (/ . nV51d0) (* . nV51cf) (- . nV51ce) (+ . nV51cd) (>= . nV51cc) (> . nV51cb) (= . nV51ca) (<= . nV51c9) (< . nV51c8) (unquote-splicing . nV5195) (unquote . nV5194) (_ . nV5193) (else . nV5192) (=> . nV5191) (... . nV5190) (assert . nV518f) (cond . nV518a) (let* . nV5189) (let*-values . nV5188) (let-values . nV5187) (identifier-syntax . nV5186) (quasiquote . nV5183) (syntax-rules . nV5182) (case . nV517d) (or . nV5179) (and . nV5178) (if . nV5177) (let . nV5176) (letrec* . nV5175) (letrec . nV5174) (lambda . nV5171) (quote . nV516e) (letrec-syntax . nV516c) (let-syntax . nV516b) (set! . nV516a) (begin . nV5168) (define-syntax . nV5166) (define . nV5165)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV54a5 '(rnrs lists) '(6) '() '() '() '((remove . nV533f) (remv . nV533e) (remp . nV533d) (remq . nV533c) (partition . nV533b) (memv . nV533a) (memq . nV5339) (memp . nV5338) (member . nV5337) (exists . nV5336) (for-all . nV5335) (fold-right . nV5334) (fold-left . nV5333) (find . nV5332) (filter . nV5331) (cons* . nV5330) (assv . nV532f) (assq . nV532e) (assp . nV532d) (assoc . nV532c)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV54a6 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . nV539a) (call-with-input-file . nV5399) (write-char . nV5398) (write . nV5397) (with-output-to-file . nV5396) (with-input-from-file . nV5395) (read-char . nV5394) (read . nV5393) (peek-char . nV5392) (open-output-file . nV5391) (open-input-file . nV5390) (newline . nV538f) (display . nV538e) (close-output-port . nV538d) (close-input-port . nV538c) (eof-object? . nV538b) (eof-object . nV538a) (current-error-port . nV5389) (current-output-port . nV5388) (current-input-port . nV5387) (output-port? . nV5386) (input-port? . nV5385) (make-i/o-write-error . nV4dfa) (make-i/o-read-error . nV4de5) (make-i/o-port-error . nV4e9b) (make-i/o-invalid-position-error . nV4e11) (make-i/o-filename-error . nV4e2c) (make-i/o-file-protection-error . nV4e45) (make-i/o-file-is-read-only-error . nV4e5a) (make-i/o-file-does-not-exist-error . nV4e84) (make-i/o-file-already-exists-error . nV4e6f) (make-i/o-error . nV4dd0) (i/o-write-error? . nV4dfc) (i/o-read-error? . nV4de7) (i/o-port-error? . nV4e9f) (i/o-invalid-position-error? . nV4e15) (i/o-filename-error? . nV4e30) (i/o-file-protection-error? . nV4e47) (i/o-file-is-read-only-error? . nV4e5c) (i/o-file-does-not-exist-error? . nV4e86) (i/o-file-already-exists-error? . nV4e71) (i/o-error? . nV4dd2) (i/o-error-position . nV4e17) (i/o-error-port . nV4ea1) (i/o-error-filename . nV4e32) (&i/o-port . nV51c2) (&i/o-file-does-not-exist . nV51c1) (&i/o-file-already-exists . nV51c0) (&i/o-file-is-read-only . nV51bf) (&i/o-file-protection . nV51be) (&i/o-filename . nV51bd) (&i/o-invalid-position . nV51bc) (&i/o-write . nV51bb) (&i/o-read . nV51ba) (&i/o . nV51b9)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV54a7 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . nV535b) (utf32->string . nV5310) (utf16->string . nV530f) (utf8->string . nV530e) (uint-list->bytevector . nV530d) (u8-list->bytevector . nV530c) (string->utf8 . nV530b) (string->utf32 . nV530a) (string->utf16 . nV5309) (sint-list->bytevector . nV5308) (native-endianness . nV5307) (bytevector? . nV5306) (bytevector=? . nV5305) (bytevector-uint-set! . nV5304) (bytevector-uint-ref . nV5303) (bytevector-u8-set! . nV5302) (bytevector-u8-ref . nV5301) (bytevector-u64-set! . nV5300) (bytevector-u64-ref . nV52ff) (bytevector-u64-native-set! . nV52fe) (bytevector-u64-native-ref . nV52fd) (bytevector-u32-set! . nV52fc) (bytevector-u32-ref . nV52fb) (bytevector-u32-native-set! . nV52fa) (bytevector-u32-native-ref . nV52f9) (bytevector-u16-set! . nV52f8) (bytevector-u16-ref . nV52f7) (bytevector-u16-native-set! . nV52f6) (bytevector-u16-native-ref . nV52f5) (bytevector-sint-set! . nV52f4) (bytevector-sint-ref . nV52f3) (bytevector-s8-set! . nV52f2) (bytevector-s8-ref . nV52f1) (bytevector-s64-set! . nV52f0) (bytevector-s64-ref . nV52ef) (bytevector-s64-native-set! . nV52ee) (bytevector-s64-native-ref . nV52ed) (bytevector-s32-set! . nV52ec) (bytevector-s32-ref . nV52eb) (bytevector-s32-native-set! . nV52ea) (bytevector-s32-native-ref . nV52e9) (bytevector-s16-set! . nV52e8) (bytevector-s16-ref . nV52e7) (bytevector-s16-native-set! . nV52e6) (bytevector-s16-native-ref . nV52e5) (bytevector-length . nV52e4) (bytevector-ieee-single-ref . nV52e3) (bytevector-ieee-single-set! . nV52e2) (bytevector-ieee-single-native-set! . nV52e1) (bytevector-ieee-single-native-ref . nV52e0) (bytevector-ieee-double-set! . nV52df) (bytevector-ieee-double-ref . nV52de) (bytevector-ieee-double-native-set! . nV52dd) (bytevector-ieee-double-native-ref . nV52dc) (bytevector-fill! . nV52db) (bytevector-copy! . nV52da) (bytevector-copy . nV52d9) (bytevector->uint-list . nV52d8) (bytevector->u8-list . nV52d7) (bytevector->sint-list . nV52d6) (endianness . nV518e)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV54a8 '(rnrs unicode) '(6) '() '() '() '((string-upcase . nV53e2) (string-titlecase . nV53e1) (string-normalize-nfkd . nV53e0) (string-normalize-nfkc . nV53df) (string-normalize-nfd . nV53de) (string-normalize-nfc . nV53dd) (string-foldcase . nV53dc) (string-downcase . nV53db) (string-ci>? . nV53da) (string-ci>=? . nV53d9) (string-ci=? . nV53d8) (string-ci<? . nV53d7) (string-ci<=? . nV53d6) (char-whitespace? . nV53d5) (char-upper-case? . nV53d4) (char-title-case? . nV53d3) (char-numeric? . nV53d2) (char-lower-case? . nV53d1) (char-general-category . nV53d0) (char-upcase . nV53cf) (char-titlecase . nV53ce) (char-foldcase . nV53cd) (char-downcase . nV53cc) (char-ci>? . nV53cb) (char-ci>=? . nV53ca) (char-ci=? . nV53c9) (char-ci<? . nV53c8) (char-ci<=? . nV53c7) (char-alphabetic? . nV53c6)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV54a9 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . nV5325) (raise-continuable . nV5324) (raise . nV5323) (guard . nV519a) (else . nV5192) (=> . nV5191)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV54aa '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . nV527a) (bitwise-reverse-bit-field . nV5279) (bitwise-length . nV5278) (bitwise-if . nV5277) (bitwise-first-bit-set . nV5276) (bitwise-copy-bit-field . nV5275) (bitwise-copy-bit . nV5274) (bitwise-bit-set? . nV5273) (bitwise-bit-field . nV5272) (bitwise-bit-count . nV5271) (bitwise-xor . nV5270) (bitwise-ior . nV526f) (bitwise-and . nV526e) (bitwise-not . nV526d) (bitwise-arithmetic-shift-right . nV526c) (bitwise-arithmetic-shift-left . nV526b) (bitwise-arithmetic-shift . nV526a)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV54ab '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . nV52a7) (fxxor . nV52a6) (fxrotate-bit-field . nV52a5) (fxreverse-bit-field . nV52a4) (fxpositive? . nV52a3) (fxodd? . nV52a2) (fxnot . nV52a1) (fxnegative? . nV52a0) (fxmod0 . nV529f) (fxmod . nV529e) (fxmin . nV529d) (fxmax . nV529c) (fxlength . nV529b) (fxior . nV529a) (fxif . nV5299) (fxfirst-bit-set . nV5298) (fxeven? . nV5297) (fxdiv0-and-mod0 . nV5296) (fxdiv0 . nV5295) (fxdiv-and-mod . nV5294) (fxdiv . nV5293) (fxcopy-bit-field . nV5292) (fxcopy-bit . nV5291) (fxbit-set? . nV5290) (fxbit-field . nV528f) (fxbit-count . nV528e) (fxarithmetic-shift-right . nV528d) (fxarithmetic-shift-left . nV528c) (fxarithmetic-shift . nV528b) (fxand . nV528a) (fx>? . nV5289) (fx>=? . nV5288) (fx=? . nV5287) (fx<? . nV5286) (fx<=? . nV5285) (fx-/carry . nV5284) (fx- . nV5283) (fx+/carry . nV5282) (fx+ . nV5281) (fx*/carry . nV5280) (fx* . nV527f) (greatest-fixnum . nV527e) (least-fixnum . nV527d) (fixnum-width . nV527c) (fixnum? . nV527b)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV54ac '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . nV4efb) (no-infinities-violation? . nV4ee6) (make-no-nans-violation . nV4ef9) (make-no-infinities-violation . nV4ee4) (real->flonum . nV52d5) (flzero? . nV52d4) (fltruncate . nV52d3) (fltan . nV52d2) (flsqrt . nV52d1) (flsin . nV52d0) (flround . nV52cf) (flpositive? . nV52ce) (flonum? . nV52cd) (flodd? . nV52cc) (flnumerator . nV52cb) (flnegative? . nV52ca) (flnan? . nV52c9) (flmod0 . nV52c8) (flmod . nV52c7) (flmin . nV52c6) (flmax . nV52c5) (fllog . nV52c4) (flinteger? . nV52c3) (flinfinite? . nV52c2) (flfloor . nV52c1) (flfinite? . nV52c0) (flexpt . nV52bf) (flexp . nV52be) (fleven? . nV52bd) (fldiv0-and-mod0 . nV52bc) (fldiv0 . nV52bb) (fldiv-and-mod . nV52ba) (fldiv . nV52b9) (fldenominator . nV52b8) (flcos . nV52b7) (flceiling . nV52b6) (flatan . nV52b5) (flasin . nV52b4) (flacos . nV52b3) (flabs . nV52b2) (fl>? . nV52b1) (fl>=? . nV52b0) (fl=? . nV52af) (fl<? . nV52ae) (fl<=? . nV52ad) (fl/ . nV52ac) (fl- . nV52ab) (fl+ . nV52aa) (fl* . nV52a9) (fixnum->flonum . nV52a8) (&no-nans . nV51c6) (&no-infinities . nV51c5)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV54ad '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . nV53af) (string-ci-hash . nV53ae) (string-hash . nV53ad) (equal-hash . nV53ac) (hashtable-equivalence-function . nV53ab) (make-hashtable . nV53aa) (hashtable-hash-function . nV53a9) (make-eqv-hashtable . nV53a8) (make-eq-hashtable . nV53a7) (hashtable? . nV53a6) (hashtable-update! . nV53a5) (hashtable-size . nV53a4) (hashtable-set! . nV53a3) (hashtable-ref . nV53a2) (hashtable-mutable? . nV53a1) (hashtable-keys . nV53a0) (hashtable-entries . nV539f) (hashtable-delete! . nV539e) (hashtable-copy . nV539d) (hashtable-contains? . nV539c) (hashtable-clear! . nV539b)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV54ae '(rnrs io ports) '(6) '() '() '() '((eof-object? . nV538b) (eof-object . nV538a) (current-error-port . nV5389) (current-output-port . nV5388) (current-input-port . nV5387) (output-port? . nV5386) (input-port? . nV5385) (utf-8-codec . nV5384) (utf-16-codec . nV5383) (transcoder-error-handling-mode . nV5382) (transcoder-eol-style . nV5381) (transcoder-codec . nV5380) (transcoded-port . nV537f) (textual-port? . nV537e) (string->bytevector . nV537d) (standard-output-port . nV537c) (standard-input-port . nV537b) (standard-error-port . nV537a) (set-port-position! . nV5379) (put-u8 . nV5378) (put-string . nV5377) (put-datum . nV5376) (put-char . nV5375) (put-bytevector . nV5374) (port? . nV5373) (port-transcoder . nV5372) (port-position . nV5371) (port-has-set-port-position!? . nV5370) (port-has-port-position? . nV536f) (port-eof? . nV536e) (output-port-buffer-mode . nV536d) (open-string-output-port . nV536c) (open-string-input-port . nV536b) (open-file-output-port . nV536a) (open-file-input/output-port . nV5369) (open-file-input-port . nV5368) (open-bytevector-output-port . nV5367) (open-bytevector-input-port . nV5366) (native-transcoder . nV5365) (native-eol-style . nV5364) (make-transcoder . nV5363) (latin-1-codec . nV5362) (make-i/o-write-error . nV4dfa) (make-i/o-read-error . nV4de5) (make-i/o-port-error . nV4e9b) (make-i/o-invalid-position-error . nV4e11) (make-i/o-filename-error . nV4e2c) (make-i/o-file-protection-error . nV4e45) (make-i/o-file-is-read-only-error . nV4e5a) (make-i/o-file-does-not-exist-error . nV4e84) (make-i/o-file-already-exists-error . nV4e6f) (make-i/o-error . nV4dd0) (make-i/o-encoding-error . nV4ecb) (make-i/o-decoding-error . nV4eb4) (make-custom-textual-output-port . nV5361) (make-custom-textual-input/output-port . nV5360) (make-custom-textual-input-port . nV535f) (make-custom-binary-output-port . nV535e) (make-custom-binary-input/output-port . nV535d) (make-custom-binary-input-port . nV535c) (lookahead-u8 . nV535a) (lookahead-char . nV5359) (i/o-write-error? . nV4dfc) (i/o-read-error? . nV4de7) (i/o-port-error? . nV4e9f) (i/o-invalid-position-error? . nV4e15) (i/o-filename-error? . nV4e30) (i/o-file-protection-error? . nV4e47) (i/o-file-is-read-only-error? . nV4e5c) (i/o-file-does-not-exist-error? . nV4e86) (i/o-file-already-exists-error? . nV4e71) (i/o-error? . nV4dd2) (i/o-error-position . nV4e17) (i/o-error-port . nV4ea1) (i/o-error-filename . nV4e32) (i/o-encoding-error? . nV4ecf) (i/o-encoding-error-char . nV4ed1) (i/o-decoding-error? . nV4eb6) (get-u8 . nV5358) (get-string-n! . nV5357) (get-string-n . nV5356) (get-string-all . nV5355) (get-line . nV5354) (get-datum . nV5353) (get-char . nV5352) (get-bytevector-some . nV5351) (get-bytevector-n! . nV5350) (get-bytevector-n . nV534f) (get-bytevector-all . nV534e) (flush-output-port . nV534d) (close-port . nV534c) (call-with-string-output-port . nV532b) (call-with-port . nV532a) (call-with-bytevector-output-port . nV5329) (bytevector->string . nV5328) (buffer-mode? . nV5327) (binary-port? . nV5326) (&i/o-encoding . nV51c4) (&i/o-decoding . nV51c3) (&i/o-port . nV51c2) (&i/o-file-does-not-exist . nV51c1) (&i/o-file-already-exists . nV51c0) (&i/o-file-is-read-only . nV51bf) (&i/o-file-protection . nV51be) (&i/o-filename . nV51bd) (&i/o-invalid-position . nV51bc) (&i/o-write . nV51bb) (&i/o-read . nV51ba) (&i/o . nV51b9) (error-handling-mode . nV519e) (file-options . nV519d) (buffer-mode . nV519c) (eol-style . nV519b)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV54af '(rnrs enums) '(6) '() '() '() '((make-enumeration . nV5322) (enum-set=? . nV5321) (enum-set-universe . nV5320) (enum-set-union . nV531f) (enum-set-subset? . nV531e) (enum-set-projection . nV531d) (enum-set-member? . nV531c) (enum-set-intersection . nV531b) (enum-set-indexer . nV531a) (enum-set-difference . nV5319) (enum-set-constructor . nV5318) (enum-set-complement . nV5317) (enum-set->list . nV5316) (define-enumeration . nV51a9)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV54b0 '(rnrs conditions) '(6) '() '() '() '((who-condition? . nV4d46) (warning? . nV4cbe) (violation? . nV4cfd) (undefined-violation? . nV4dbd) (syntax-violation? . nV4da4) (syntax-violation-subform . nV4da8) (syntax-violation-form . nV4da6) (syntax-violation . nV31d0) (simple-conditions . nV5315) (serious-condition? . nV4cd3) (non-continuable-violation? . nV4d5d) (message-condition? . nV4ca7) (make-who-condition . nV4d42) (make-warning . nV4cbc) (make-violation . nV4cfb) (make-undefined-violation . nV4dbb) (make-syntax-violation . nV4d9e) (make-serious-condition . nV4cd1) (make-non-continuable-violation . nV4d5b) (make-message-condition . nV4ca3) (make-lexical-violation . nV4d85) (make-irritants-condition . nV4d27) (make-implementation-restriction-violation . nV4d70) (make-error . nV4ce6) (make-assertion-violation . nV4d10) (lexical-violation? . nV4d87) (irritants-condition? . nV4d2b) (implementation-restriction-violation? . nV4d72) (error? . nV4ce8) (condition-who . nV4d48) (condition-predicate . nV5314) (condition-message . nV4ca9) (condition-irritants . nV4d2d) (condition-accessor . nV5313) (condition . nV5312) (assertion-violation? . nV4d12) (condition? . nV5311) (&undefined . nV51b8) (&syntax . nV51b7) (&lexical . nV51b6) (&implementation-restriction . nV51b5) (&non-continuable . nV51b4) (&who . nV51b3) (&irritants . nV51b2) (&assertion . nV51b1) (&violation . nV51b0) (&error . nV51af) (&serious . nV51ae) (&warning . nV51ad) (&message . nV51ac) (&condition . nV51ab) (define-condition-type . nV51aa)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV54b1 '(rnrs records inspection) '(6) '() '() '() '((record? . nV53be) (record-type-uid . nV53bd) (record-type-sealed? . nV53bc) (record-type-parent . nV53bb) (record-type-opaque? . nV53ba) (record-type-name . nV53b9) (record-type-generative? . nV53b8) (record-type-field-names . nV53b7) (record-rtd . nV53b6) (record-field-mutable? . nV53b5)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV54b2 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . nV53c5) (record-predicate . nV53c4) (record-mutator . nV53c3) (record-constructor . nV53c2) (record-accessor . nV53c1) (make-record-type-descriptor . nV53c0) (make-record-constructor-descriptor . nV53bf)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV54b3 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . nV51a8) (parent-rtd . nV51a7) (nongenerative . nV51a6) (opaque . nV51a5) (sealed . nV51a4) (protocol . nV51a3) (parent . nV51a2) (immutable . nV51a1) (mutable . nV51a0) (fields . nV519f) (record-constructor-descriptor . nV517f) (record-type-descriptor . nV517e)) '() values values '#f '#f '#t '#f) (nV2cfd@nV2b39@install-library 'nV54b4 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . nV4eff) (&no-nans-rtd . nV4efd) (&no-infinities-rcd . nV4eea) (&no-infinities-rtd . nV4ee8) (&i/o-encoding-rcd . nV4ed5) (&i/o-encoding-rtd . nV4ed3) (&i/o-decoding-rcd . nV4eba) (&i/o-decoding-rtd . nV4eb8) (&i/o-port-rcd . nV4ea5) (&i/o-port-rtd . nV4ea3) (&i/o-file-does-not-exist-rcd . nV4e8a) (&i/o-file-does-not-exist-rtd . nV4e88) (&i/o-file-already-exists-rcd . nV4e75) (&i/o-file-already-exists-rtd . nV4e73) (&i/o-file-is-read-only-rcd . nV4e60) (&i/o-file-is-read-only-rtd . nV4e5e) (&i/o-file-protection-rcd . nV4e4b) (&i/o-file-protection-rtd . nV4e49) (&i/o-filename-rcd . nV4e36) (&i/o-filename-rtd . nV4e34) (&i/o-invalid-position-rcd . nV4e1b) (&i/o-invalid-position-rtd . nV4e19) (&i/o-write-rcd . nV4e00) (&i/o-write-rtd . nV4dfe) (&i/o-read-rcd . nV4deb) (&i/o-read-rtd . nV4de9) (&i/o-rcd . nV4dd6) (&i/o-rtd . nV4dd4) (&undefined-rcd . nV4dc1) (&undefined-rtd . nV4dbf) (&syntax-rcd . nV4dac) (&syntax-rtd . nV4daa) (&lexical-rcd . nV4d8b) (&lexical-rtd . nV4d89) (&implementation-restriction-rcd . nV4d76) (&implementation-restriction-rtd . nV4d74) (&non-continuable-rcd . nV4d61) (&non-continuable-rtd . nV4d5f) (&who-rcd . nV4d4c) (&who-rtd . nV4d4a) (&irritants-rcd . nV4d31) (&irritants-rtd . nV4d2f) (&assertion-rcd . nV4d16) (&assertion-rtd . nV4d14) (&violation-rcd . nV4d01) (&violation-rtd . nV4cff) (&error-rcd . nV4cec) (&error-rtd . nV4cea) (&serious-rcd . nV4cd7) (&serious-rtd . nV4cd5) (&warning-rcd . nV4cc2) (&warning-rtd . nV4cc0) (&message-rcd . nV4cad) (&message-rtd . nV4cab) (&condition-rcd . nV4c4e) (&condition-rtd . nV4c4c) (syntax-error . nV31cc) (syntax-dispatch . nV30f0) (pretty-print . nV5494) (eval-core . nV5493) (set-symbol-value! . nV5492) (symbol-value . nV5491) (gensym . nV5490) (void . nV548f) (load . nV500e) (interaction-environment . nV31de) (char-ready? . nV548e) (regexp? . nV548d) (read-line . nV548c) (gensym-prefix-set! . nV548b) (ungensym . nV548a) (alist->eq-hash-table . nV5489) (assoc-ref . nV5488) (print . nV5487) (format . nV5486) (host-os . nV5485) (library-path . nV2b18) (standard-library-path . nV5484) (file-newer? . nV5483) (stat-mtime . nV5482) (write-to-file . nV5481) (file->sexp-list . nV5480) (file->list . nV547f) (file->string . nV547e) (digit->integer . nV547d) (call-with-string-input-port . nV547c) (call-with-string-io . nV547b) (string-split . nV547a) (bytevector-for-each . nV5479) (string->regexp . nV5478) (rxmatch . nV5477) (regexp-replace-all . nV5476) (hashtable-for-each . nV5475) (mosh-cache-dir . nV2902) (call-process . nV5474) (local-tz-offset . nV5473) (microseconds . nV5472) (directory-list . nV5471) (set-current-directory! . nV5470) (expand-path . nV546f) (current-directory . nV546e) (%spawn . nV546d) (%waitpid . nV546c) (simple-struct-name . nV546b) (simple-struct-set! . nV546a) (simple-struct-ref . nV5469) (make-simple-struct . nV5468) (simple-struct? . nV5467) (pointer-ref-c-int64 . nV5466) (pointer-ref-c-int32 . nV5465) (pointer-ref-c-int16 . nV5464) (pointer-ref-c-int8 . nV5463) (pointer-ref-c-uint64 . nV5462) (pointer-ref-c-uint32 . nV5461) (pointer-ref-c-uint16 . nV5460) (pointer-ref-c-uint8 . nV545f) (pointer-set-c-uint64! . nV545e) (pointer-set-c-uint32! . nV545d) (pointer-set-c-uint16! . nV545c) (pointer-set-c-uint8! . nV545b) (pointer-set-c-int64! . nV545a) (pointer-set-c-int32! . nV5459) (pointer-set-c-int16! . nV5458) (pointer-set-c-int8! . nV5457) (pointer-set-c-pointer! . nV5456) (pointer-set-c-double! . nV5455) (pointer-set-c-float! . nV5454) (pointer-set-c-long-long! . nV5453) (pointer-set-c-long! . nV5452) (pointer-set-c-int! . nV5451) (pointer-set-c-short! . nV5450) (pointer-set-c-char! . nV544f) (pointer-ref-c-pointer . nV544e) (pointer-ref-c-double . nV544d) (pointer-ref-c-float . nV544c) (pointer-ref-c-unsigned-long-long . nV544b) (pointer-ref-c-signed-long-long . nV544a) (pointer-ref-c-unsigned-long . nV5449) (pointer-ref-c-signed-long . nV5448) (pointer-ref-c-unsigned-int . nV5447) (pointer-ref-c-signed-int . nV5446) (pointer-ref-c-unsigned-short . nV5445) (pointer-ref-c-signed-short . nV5444) (pointer-ref-c-unsigned-char . nV5443) (pointer-ref-c-signed-char . nV5442) (pointer->integer . nV5441) (integer->pointer . nV5440) (pointer? . nV543f) (shared-errno . nV543e) (get-c-address . nV543d) (obj->integer . nV543c) (u8-list->c-procedure . nV543b) (%ffi-free-c-callback-trampoline . nV543a) (%ffi-make-c-callback-trampoline . nV5439) (%ffi-free . nV5438) (%ffi-malloc . nV5437) (%ffi-supported? . nV5436) (%ffi-pointer->string . nV5435) (%ffi-call . nV5434) (%ffi-lookup . nV5433) (%ffi-open . nV5432) (null-terminated-utf8->string . nV5431) (null-terminated-bytevector->string . nV5430) (%fork . nV542f) (%pipe . nV542e) (p . nV542d) (open-output-string . nV542c) (get-output-string . nV542b) (file-stat-ctime . nV542a) (file-stat-atime . nV5429) (file-stat-mtime . nV5428) (file-size-in-bytes . nV5427) (file-writable? . nV5426) (file-executable? . nV5425) (file-readable? . nV5424) (file-regular? . nV5423) (file-symbolic-link? . nV5422) (file-directory? . nV5421) (create-symbolic-link . nV5420) (rename-file . nV541f) (delete-directory . nV541e) (create-directory . nV541d) (create-mosh-cache-dir . nV541c) (get-environment-variables . nV541b) (current-exception-handler . nV541a) (get-environment-variable . nV5419) (join-wraps . nV5418) (id->real-label . nV5417) (same-marks? . nV5416) (same-marks*? . nV5415) (get-timeofday . nV5414) (get-command-line . nV5413) (sys-display . nV5412) (whereis . nV5411) (register . nV5410) (vm-join! . nV540f) (vm-set-value! . nV540e) (vm? . nV540d) (main-vm? . nV540c) (vm-eval . nV540b) (vm-self . nV540a) (vm-start! . nV5409) (make-vm . nV5408) (mutex-try-lock! . nV5407) (mutex-unlock! . nV5406) (mutex-lock! . nV5405) (mutex? . nV5404) (make-mutex . nV5403) (condition-variable-notify-all! . nV5402) (condition-variable-notify! . nV5401) (condition-variable-wait! . nV5400) (make-condition-variable . nV53ff) (mosh-executable-path . nV53fe) (make-file-options . nV53fd) (for-each-with-index . nV53fc) (source-info . nV53fb) (instruction? . nV53fa) (instruction->integer . nV53f9) (instruction->symbol . nV53f8) (closure->list . nV53f7) (make-compiler-instruction . nV53f6) (make-instruction . nV53f5) (set-source-info! . nV53f4) (bignum? . nV53f3) (fast-equal? . nV53f2) (fasl-read . nV53f1) (fasl-write . nV53f0) (time-usage . nV53ef) (os-constant . nV53ee) (disasm . nV53ed) (make-parameter . nV2900) (socket-port . nV53ec) (socket-shutdown . nV53eb) (socket-close . nV53ea) (socket-send . nV53e9) (socket-recv! . nV53e8) (socket-recv . nV53e7) (make-server-socket . nV53e6) (make-client-socket . nV53e5) (socket-accept . nV53e4) (socket? . nV53e3) (string-upcase . nV53e2) (string-titlecase . nV53e1) (string-normalize-nfkd . nV53e0) (string-normalize-nfkc . nV53df) (string-normalize-nfd . nV53de) (string-normalize-nfc . nV53dd) (string-foldcase . nV53dc) (string-downcase . nV53db) (string-ci>? . nV53da) (string-ci>=? . nV53d9) (string-ci=? . nV53d8) (string-ci<? . nV53d7) (string-ci<=? . nV53d6) (char-whitespace? . nV53d5) (char-upper-case? . nV53d4) (char-title-case? . nV53d3) (char-numeric? . nV53d2) (char-lower-case? . nV53d1) (char-general-category . nV53d0) (char-upcase . nV53cf) (char-titlecase . nV53ce) (char-foldcase . nV53cd) (char-downcase . nV53cc) (char-ci>? . nV53cb) (char-ci>=? . nV53ca) (char-ci=? . nV53c9) (char-ci<? . nV53c8) (char-ci<=? . nV53c7) (char-alphabetic? . nV53c6) (make-variable-transformer . nV2f1b) (identifier? . nV31d2) (generate-temporaries . nV31be) (free-identifier=? . nV31c0) (syntax->datum . nV31d6) (datum->syntax . nV31d4) (bound-identifier=? . nV31c2) (record-type-descriptor? . nV53c5) (record-predicate . nV53c4) (record-mutator . nV53c3) (record-constructor . nV53c2) (record-accessor . nV53c1) (make-record-type-descriptor . nV53c0) (make-record-constructor-descriptor . nV53bf) (record? . nV53be) (record-type-uid . nV53bd) (record-type-sealed? . nV53bc) (record-type-parent . nV53bb) (record-type-opaque? . nV53ba) (record-type-name . nV53b9) (record-type-generative? . nV53b8) (record-type-field-names . nV53b7) (record-rtd . nV53b6) (record-field-mutable? . nV53b5) (delete-file . nV53b4) (file-exists? . nV53b3) (vector-sort! . nV53b2) (vector-sort . nV53b1) (list-sort . nV53b0) (symbol-hash . nV53af) (string-ci-hash . nV53ae) (string-hash . nV53ad) (equal-hash . nV53ac) (hashtable-equivalence-function . nV53ab) (make-hashtable . nV53aa) (hashtable-hash-function . nV53a9) (make-eqv-hashtable . nV53a8) (make-eq-hashtable . nV53a7) (hashtable? . nV53a6) (hashtable-update! . nV53a5) (hashtable-size . nV53a4) (hashtable-set! . nV53a3) (hashtable-ref . nV53a2) (hashtable-mutable? . nV53a1) (hashtable-keys . nV53a0) (hashtable-entries . nV539f) (hashtable-delete! . nV539e) (hashtable-copy . nV539d) (hashtable-contains? . nV539c) (hashtable-clear! . nV539b) (call-with-output-file . nV539a) (call-with-input-file . nV5399) (write-char . nV5398) (write . nV5397) (with-output-to-file . nV5396) (with-input-from-file . nV5395) (read-char . nV5394) (read . nV5393) (peek-char . nV5392) (open-output-file . nV5391) (open-input-file . nV5390) (newline . nV538f) (display . nV538e) (close-output-port . nV538d) (close-input-port . nV538c) (eof-object? . nV538b) (eof-object . nV538a) (current-error-port . nV5389) (current-output-port . nV5388) (current-input-port . nV5387) (output-port? . nV5386) (input-port? . nV5385) (utf-8-codec . nV5384) (utf-16-codec . nV5383) (transcoder-error-handling-mode . nV5382) (transcoder-eol-style . nV5381) (transcoder-codec . nV5380) (transcoded-port . nV537f) (textual-port? . nV537e) (string->bytevector . nV537d) (standard-output-port . nV537c) (standard-input-port . nV537b) (standard-error-port . nV537a) (set-port-position! . nV5379) (put-u8 . nV5378) (put-string . nV5377) (put-datum . nV5376) (put-char . nV5375) (put-bytevector . nV5374) (port? . nV5373) (port-transcoder . nV5372) (port-position . nV5371) (port-has-set-port-position!? . nV5370) (port-has-port-position? . nV536f) (port-eof? . nV536e) (output-port-buffer-mode . nV536d) (open-string-output-port . nV536c) (open-string-input-port . nV536b) (open-file-output-port . nV536a) (open-file-input/output-port . nV5369) (open-file-input-port . nV5368) (open-bytevector-output-port . nV5367) (open-bytevector-input-port . nV5366) (native-transcoder . nV5365) (native-eol-style . nV5364) (make-transcoder . nV5363) (latin-1-codec . nV5362) (make-i/o-write-error . nV4dfa) (make-i/o-read-error . nV4de5) (make-i/o-port-error . nV4e9b) (make-i/o-invalid-position-error . nV4e11) (make-i/o-filename-error . nV4e2c) (make-i/o-file-protection-error . nV4e45) (make-i/o-file-is-read-only-error . nV4e5a) (make-i/o-file-does-not-exist-error . nV4e84) (make-i/o-file-already-exists-error . nV4e6f) (make-i/o-error . nV4dd0) (make-i/o-encoding-error . nV4ecb) (make-i/o-decoding-error . nV4eb4) (make-custom-textual-output-port . nV5361) (make-custom-textual-input/output-port . nV5360) (make-custom-textual-input-port . nV535f) (make-custom-binary-output-port . nV535e) (make-custom-binary-input/output-port . nV535d) (make-custom-binary-input-port . nV535c) (make-bytevector . nV535b) (lookahead-u8 . nV535a) (lookahead-char . nV5359) (i/o-write-error? . nV4dfc) (i/o-read-error? . nV4de7) (i/o-port-error? . nV4e9f) (i/o-invalid-position-error? . nV4e15) (i/o-filename-error? . nV4e30) (i/o-file-protection-error? . nV4e47) (i/o-file-is-read-only-error? . nV4e5c) (i/o-file-does-not-exist-error? . nV4e86) (i/o-file-already-exists-error? . nV4e71) (i/o-error? . nV4dd2) (i/o-error-position . nV4e17) (i/o-error-port . nV4ea1) (i/o-error-filename . nV4e32) (i/o-encoding-error? . nV4ecf) (i/o-encoding-error-char . nV4ed1) (i/o-decoding-error? . nV4eb6) (get-u8 . nV5358) (get-string-n! . nV5357) (get-string-n . nV5356) (get-string-all . nV5355) (get-line . nV5354) (get-datum . nV5353) (get-char . nV5352) (get-bytevector-some . nV5351) (get-bytevector-n! . nV5350) (get-bytevector-n . nV534f) (get-bytevector-all . nV534e) (flush-output-port . nV534d) (close-port . nV534c) (scheme-report-environment . nV31ac) (quotient . nV534b) (null-environment . nV31aa) (remainder . nV534a) (modulo . nV5349) (inexact->exact . nV5348) (force . nV5347) (exact->inexact . nV5346) (make-promise . nV5345) (exit . nV5344) (command-line . nV5008) (string-fill! . nV5343) (string-set! . nV5342) (set-cdr! . nV5341) (set-car! . nV5340) (remove . nV533f) (remv . nV533e) (remp . nV533d) (remq . nV533c) (partition . nV533b) (memv . nV533a) (memq . nV5339) (memp . nV5338) (member . nV5337) (exists . nV5336) (for-all . nV5335) (fold-right . nV5334) (fold-left . nV5333) (find . nV5332) (filter . nV5331) (cons* . nV5330) (assv . nV532f) (assq . nV532e) (assp . nV532d) (assoc . nV532c) (call-with-string-output-port . nV532b) (call-with-port . nV532a) (call-with-bytevector-output-port . nV5329) (bytevector->string . nV5328) (buffer-mode? . nV5327) (binary-port? . nV5326) (with-exception-handler . nV5325) (raise-continuable . nV5324) (raise . nV5323) (eval . nV31b0) (environment . nV31a8) (make-enumeration . nV5322) (enum-set=? . nV5321) (enum-set-universe . nV5320) (enum-set-union . nV531f) (enum-set-subset? . nV531e) (enum-set-projection . nV531d) (enum-set-member? . nV531c) (enum-set-intersection . nV531b) (enum-set-indexer . nV531a) (enum-set-difference . nV5319) (enum-set-constructor . nV5318) (enum-set-complement . nV5317) (enum-set->list . nV5316) (who-condition? . nV4d46) (warning? . nV4cbe) (violation? . nV4cfd) (undefined-violation? . nV4dbd) (syntax-violation? . nV4da4) (syntax-violation-subform . nV4da8) (syntax-violation-form . nV4da6) (syntax-violation . nV31d0) (simple-conditions . nV5315) (serious-condition? . nV4cd3) (non-continuable-violation? . nV4d5d) (message-condition? . nV4ca7) (make-who-condition . nV4d42) (make-warning . nV4cbc) (make-violation . nV4cfb) (make-undefined-violation . nV4dbb) (make-syntax-violation . nV4d9e) (make-serious-condition . nV4cd1) (make-non-continuable-violation . nV4d5b) (make-message-condition . nV4ca3) (make-lexical-violation . nV4d85) (make-irritants-condition . nV4d27) (make-implementation-restriction-violation . nV4d70) (make-error . nV4ce6) (make-assertion-violation . nV4d10) (lexical-violation? . nV4d87) (irritants-condition? . nV4d2b) (implementation-restriction-violation? . nV4d72) (error? . nV4ce8) (condition-who . nV4d48) (condition-predicate . nV5314) (condition-message . nV4ca9) (condition-irritants . nV4d2d) (condition-accessor . nV5313) (condition . nV5312) (assertion-violation? . nV4d12) (condition? . nV5311) (utf32->string . nV5310) (utf16->string . nV530f) (utf8->string . nV530e) (uint-list->bytevector . nV530d) (u8-list->bytevector . nV530c) (string->utf8 . nV530b) (string->utf32 . nV530a) (string->utf16 . nV5309) (sint-list->bytevector . nV5308) (native-endianness . nV5307) (bytevector? . nV5306) (bytevector=? . nV5305) (bytevector-uint-set! . nV5304) (bytevector-uint-ref . nV5303) (bytevector-u8-set! . nV5302) (bytevector-u8-ref . nV5301) (bytevector-u64-set! . nV5300) (bytevector-u64-ref . nV52ff) (bytevector-u64-native-set! . nV52fe) (bytevector-u64-native-ref . nV52fd) (bytevector-u32-set! . nV52fc) (bytevector-u32-ref . nV52fb) (bytevector-u32-native-set! . nV52fa) (bytevector-u32-native-ref . nV52f9) (bytevector-u16-set! . nV52f8) (bytevector-u16-ref . nV52f7) (bytevector-u16-native-set! . nV52f6) (bytevector-u16-native-ref . nV52f5) (bytevector-sint-set! . nV52f4) (bytevector-sint-ref . nV52f3) (bytevector-s8-set! . nV52f2) (bytevector-s8-ref . nV52f1) (bytevector-s64-set! . nV52f0) (bytevector-s64-ref . nV52ef) (bytevector-s64-native-set! . nV52ee) (bytevector-s64-native-ref . nV52ed) (bytevector-s32-set! . nV52ec) (bytevector-s32-ref . nV52eb) (bytevector-s32-native-set! . nV52ea) (bytevector-s32-native-ref . nV52e9) (bytevector-s16-set! . nV52e8) (bytevector-s16-ref . nV52e7) (bytevector-s16-native-set! . nV52e6) (bytevector-s16-native-ref . nV52e5) (bytevector-length . nV52e4) (bytevector-ieee-single-ref . nV52e3) (bytevector-ieee-single-set! . nV52e2) (bytevector-ieee-single-native-set! . nV52e1) (bytevector-ieee-single-native-ref . nV52e0) (bytevector-ieee-double-set! . nV52df) (bytevector-ieee-double-ref . nV52de) (bytevector-ieee-double-native-set! . nV52dd) (bytevector-ieee-double-native-ref . nV52dc) (bytevector-fill! . nV52db) (bytevector-copy! . nV52da) (bytevector-copy . nV52d9) (bytevector->uint-list . nV52d8) (bytevector->u8-list . nV52d7) (bytevector->sint-list . nV52d6) (no-nans-violation? . nV4efb) (no-infinities-violation? . nV4ee6) (make-no-nans-violation . nV4ef9) (make-no-infinities-violation . nV4ee4) (real->flonum . nV52d5) (flzero? . nV52d4) (fltruncate . nV52d3) (fltan . nV52d2) (flsqrt . nV52d1) (flsin . nV52d0) (flround . nV52cf) (flpositive? . nV52ce) (flonum? . nV52cd) (flodd? . nV52cc) (flnumerator . nV52cb) (flnegative? . nV52ca) (flnan? . nV52c9) (flmod0 . nV52c8) (flmod . nV52c7) (flmin . nV52c6) (flmax . nV52c5) (fllog . nV52c4) (flinteger? . nV52c3) (flinfinite? . nV52c2) (flfloor . nV52c1) (flfinite? . nV52c0) (flexpt . nV52bf) (flexp . nV52be) (fleven? . nV52bd) (fldiv0-and-mod0 . nV52bc) (fldiv0 . nV52bb) (fldiv-and-mod . nV52ba) (fldiv . nV52b9) (fldenominator . nV52b8) (flcos . nV52b7) (flceiling . nV52b6) (flatan . nV52b5) (flasin . nV52b4) (flacos . nV52b3) (flabs . nV52b2) (fl>? . nV52b1) (fl>=? . nV52b0) (fl=? . nV52af) (fl<? . nV52ae) (fl<=? . nV52ad) (fl/ . nV52ac) (fl- . nV52ab) (fl+ . nV52aa) (fl* . nV52a9) (fixnum->flonum . nV52a8) (fxzero? . nV52a7) (fxxor . nV52a6) (fxrotate-bit-field . nV52a5) (fxreverse-bit-field . nV52a4) (fxpositive? . nV52a3) (fxodd? . nV52a2) (fxnot . nV52a1) (fxnegative? . nV52a0) (fxmod0 . nV529f) (fxmod . nV529e) (fxmin . nV529d) (fxmax . nV529c) (fxlength . nV529b) (fxior . nV529a) (fxif . nV5299) (fxfirst-bit-set . nV5298) (fxeven? . nV5297) (fxdiv0-and-mod0 . nV5296) (fxdiv0 . nV5295) (fxdiv-and-mod . nV5294) (fxdiv . nV5293) (fxcopy-bit-field . nV5292) (fxcopy-bit . nV5291) (fxbit-set? . nV5290) (fxbit-field . nV528f) (fxbit-count . nV528e) (fxarithmetic-shift-right . nV528d) (fxarithmetic-shift-left . nV528c) (fxarithmetic-shift . nV528b) (fxand . nV528a) (fx>? . nV5289) (fx>=? . nV5288) (fx=? . nV5287) (fx<? . nV5286) (fx<=? . nV5285) (fx-/carry . nV5284) (fx- . nV5283) (fx+/carry . nV5282) (fx+ . nV5281) (fx*/carry . nV5280) (fx* . nV527f) (greatest-fixnum . nV527e) (least-fixnum . nV527d) (fixnum-width . nV527c) (fixnum? . nV527b) (bitwise-rotate-bit-field . nV527a) (bitwise-reverse-bit-field . nV5279) (bitwise-length . nV5278) (bitwise-if . nV5277) (bitwise-first-bit-set . nV5276) (bitwise-copy-bit-field . nV5275) (bitwise-copy-bit . nV5274) (bitwise-bit-set? . nV5273) (bitwise-bit-field . nV5272) (bitwise-bit-count . nV5271) (bitwise-xor . nV5270) (bitwise-ior . nV526f) (bitwise-and . nV526e) (bitwise-not . nV526d) (bitwise-arithmetic-shift-right . nV526c) (bitwise-arithmetic-shift-left . nV526b) (bitwise-arithmetic-shift . nV526a) (zero? . nV5269) (vector? . nV5268) (vector-set! . nV5267) (vector-ref . nV5266) (vector-map . nV5265) (vector-length . nV5264) (vector-for-each . nV5263) (vector-fill! . nV5262) (vector->list . nV5261) (vector . nV5260) (values . nV525f) (truncate . nV525e) (tan . nV525d) (symbol? . nV525c) (symbol=? . nV525b) (symbol->string . nV525a) (substring . nV5259) (string? . nV5258) (string>? . nV5257) (string>=? . nV5256) (string=? . nV5255) (string<? . nV5254) (string<=? . nV5253) (string-ref . nV5252) (string-length . nV5251) (string-for-each . nV5250) (string-copy . nV524f) (string-append . nV524e) (string->symbol . nV524d) (string->number . nV524c) (string->list . nV524b) (string . nV524a) (sqrt . nV5249) (sin . nV5248) (round . nV5247) (reverse . nV5246) (real? . nV5245) (real-valued? . nV5244) (real-part . nV5243) (rationalize . nV5242) (rational? . nV5241) (rational-valued? . nV5240) (procedure? . nV523f) (positive? . nV523e) (pair? . nV523d) (odd? . nV523c) (numerator . nV523b) (number? . nV523a) (number->string . nV5239) (null? . nV5238) (not . nV5237) (negative? . nV5236) (nan? . nV5235) (min . nV5234) (max . nV5233) (map . nV5232) (make-vector . nV5231) (make-string . nV5230) (make-rectangular . nV522f) (make-polar . nV522e) (magnitude . nV522d) (log . nV522c) (list? . nV522b) (list-tail . nV522a) (list-ref . nV5229) (list->vector . nV5228) (list->string . nV5227) (list . nV5226) (length . nV5225) (lcm . nV5224) (integer? . nV5223) (integer-valued? . nV5222) (integer->char . nV5221) (infinite? . nV5220) (inexact? . nV521f) (inexact . nV521e) (imag-part . nV521d) (gcd . nV521c) (for-each . nV521b) (floor . nV521a) (finite? . nV5219) (expt . nV5218) (exp . nV5217) (exact? . nV5216) (exact-integer-sqrt . nV5215) (exact . nV5214) (even? . nV5213) (error . nV5212) (eqv? . nV5211) (equal? . nV5210) (eq? . nV520f) (dynamic-wind . nV520e) (div0-and-mod0 . nV520d) (mod0 . nV520c) (div0 . nV520b) (div-and-mod . nV520a) (mod . nV5209) (div . nV5208) (denominator . nV5207) (cos . nV5206) (cons . nV5205) (complex? . nV5204) (char? . nV5203) (char>? . nV5202) (char>=? . nV5201) (char=? . nV5200) (char<? . nV51ff) (char<=? . nV51fe) (char->integer . nV51fd) (ceiling . nV51fc) (call-with-values . nV51fb) (call/cc . nV51fa) (call-with-current-continuation . nV51f9) (cddddr . nV51f8) (cdddar . nV51f7) (cddadr . nV51f6) (cddaar . nV51f5) (cdaddr . nV51f4) (cdadar . nV51f3) (cdaadr . nV51f2) (cdaaar . nV51f1) (cadddr . nV51f0) (caddar . nV51ef) (cadadr . nV51ee) (cadaar . nV51ed) (caaddr . nV51ec) (caadar . nV51eb) (caaadr . nV51ea) (caaaar . nV51e9) (cdddr . nV51e8) (cddar . nV51e7) (cdadr . nV51e6) (cdaar . nV51e5) (caddr . nV51e4) (cadar . nV51e3) (caadr . nV51e2) (caaar . nV51e1) (cddr . nV51e0) (cdar . nV51df) (cadr . nV51de) (caar . nV51dd) (cdr . nV51dc) (car . nV51db) (boolean? . nV51da) (boolean=? . nV51d9) (atan . nV51d8) (assertion-violation . nV51d7) (assertion-error . nV31ca) (asin . nV51d6) (apply . nV51d5) (append . nV51d4) (angle . nV51d3) (acos . nV51d2) (abs . nV51d1) (/ . nV51d0) (* . nV51cf) (- . nV51ce) (+ . nV51cd) (>= . nV51cc) (> . nV51cb) (= . nV51ca) (<= . nV51c9) (< . nV51c8) (library . nV51c7) (&no-nans . nV51c6) (&no-infinities . nV51c5) (&i/o-encoding . nV51c4) (&i/o-decoding . nV51c3) (&i/o-port . nV51c2) (&i/o-file-does-not-exist . nV51c1) (&i/o-file-already-exists . nV51c0) (&i/o-file-is-read-only . nV51bf) (&i/o-file-protection . nV51be) (&i/o-filename . nV51bd) (&i/o-invalid-position . nV51bc) (&i/o-write . nV51bb) (&i/o-read . nV51ba) (&i/o . nV51b9) (&undefined . nV51b8) (&syntax . nV51b7) (&lexical . nV51b6) (&implementation-restriction . nV51b5) (&non-continuable . nV51b4) (&who . nV51b3) (&irritants . nV51b2) (&assertion . nV51b1) (&violation . nV51b0) (&error . nV51af) (&serious . nV51ae) (&warning . nV51ad) (&message . nV51ac) (&condition . nV51ab) (define-condition-type . nV51aa) (define-enumeration . nV51a9) (define-record-type . nV51a8) (parent-rtd . nV51a7) (nongenerative . nV51a6) (opaque . nV51a5) (sealed . nV51a4) (protocol . nV51a3) (parent . nV51a2) (immutable . nV51a1) (mutable . nV51a0) (fields . nV519f) (error-handling-mode . nV519e) (file-options . nV519d) (buffer-mode . nV519c) (eol-style . nV519b) (guard . nV519a) (trace-define . nV5199) (trace-lambda . nV5198) (unsyntax-splicing . nV5197) (unsyntax . nV5196) (unquote-splicing . nV5195) (unquote . nV5194) (_ . nV5193) (else . nV5192) (=> . nV5191) (... . nV5190) (assert . nV518f) (endianness . nV518e) (delay . nV518d) (time . nV518c) (do . nV518b) (cond . nV518a) (let* . nV5189) (let*-values . nV5188) (let-values . nV5187) (identifier-syntax . nV5186) (with-syntax . nV5185) (quasisyntax . nV5184) (quasiquote . nV5183) (syntax-rules . nV5182) (include . nV5181) (define-struct . nV5180) (record-constructor-descriptor . nV517f) (record-type-descriptor . nV517e) (case . nV517d) (parameterize . nV517c) (unless . nV517b) (when . nV517a) (or . nV5179) (and . nV5178) (if . nV5177) (let . nV5176) (letrec* . nV5175) (letrec . nV5174) (type-descriptor . nV5173) (case-lambda . nV5172) (lambda . nV5171) (syntax . nV5170) (syntax-case . nV516f) (quote . nV516e) (foreign-call . nV516d) (letrec-syntax . nV516c) (let-syntax . nV516b) (set! . nV516a) (import . nV5169) (begin . nV5168) (module . nV5167) (define-syntax . nV5166) (define . nV5165)) '((nV4eff core-prim . &no-nans-rcd) (nV4efd core-prim . &no-nans-rtd) (nV4eea core-prim . &no-infinities-rcd) (nV4ee8 core-prim . &no-infinities-rtd) (nV4ed5 core-prim . &i/o-encoding-rcd) (nV4ed3 core-prim . &i/o-encoding-rtd) (nV4eba core-prim . &i/o-decoding-rcd) (nV4eb8 core-prim . &i/o-decoding-rtd) (nV4ea5 core-prim . &i/o-port-rcd) (nV4ea3 core-prim . &i/o-port-rtd) (nV4e8a core-prim . &i/o-file-does-not-exist-rcd) (nV4e88 core-prim . &i/o-file-does-not-exist-rtd) (nV4e75 core-prim . &i/o-file-already-exists-rcd) (nV4e73 core-prim . &i/o-file-already-exists-rtd) (nV4e60 core-prim . &i/o-file-is-read-only-rcd) (nV4e5e core-prim . &i/o-file-is-read-only-rtd) (nV4e4b core-prim . &i/o-file-protection-rcd) (nV4e49 core-prim . &i/o-file-protection-rtd) (nV4e36 core-prim . &i/o-filename-rcd) (nV4e34 core-prim . &i/o-filename-rtd) (nV4e1b core-prim . &i/o-invalid-position-rcd) (nV4e19 core-prim . &i/o-invalid-position-rtd) (nV4e00 core-prim . &i/o-write-rcd) (nV4dfe core-prim . &i/o-write-rtd) (nV4deb core-prim . &i/o-read-rcd) (nV4de9 core-prim . &i/o-read-rtd) (nV4dd6 core-prim . &i/o-rcd) (nV4dd4 core-prim . &i/o-rtd) (nV4dc1 core-prim . &undefined-rcd) (nV4dbf core-prim . &undefined-rtd) (nV4dac core-prim . &syntax-rcd) (nV4daa core-prim . &syntax-rtd) (nV4d8b core-prim . &lexical-rcd) (nV4d89 core-prim . &lexical-rtd) (nV4d76 core-prim . &implementation-restriction-rcd) (nV4d74 core-prim . &implementation-restriction-rtd) (nV4d61 core-prim . &non-continuable-rcd) (nV4d5f core-prim . &non-continuable-rtd) (nV4d4c core-prim . &who-rcd) (nV4d4a core-prim . &who-rtd) (nV4d31 core-prim . &irritants-rcd) (nV4d2f core-prim . &irritants-rtd) (nV4d16 core-prim . &assertion-rcd) (nV4d14 core-prim . &assertion-rtd) (nV4d01 core-prim . &violation-rcd) (nV4cff core-prim . &violation-rtd) (nV4cec core-prim . &error-rcd) (nV4cea core-prim . &error-rtd) (nV4cd7 core-prim . &serious-rcd) (nV4cd5 core-prim . &serious-rtd) (nV4cc2 core-prim . &warning-rcd) (nV4cc0 core-prim . &warning-rtd) (nV4cad core-prim . &message-rcd) (nV4cab core-prim . &message-rtd) (nV4c4e core-prim . &condition-rcd) (nV4c4c core-prim . &condition-rtd) (nV31cc core-prim . syntax-error) (nV30f0 core-prim . syntax-dispatch) (nV5494 core-prim . pretty-print) (nV5493 core-prim . eval-core) (nV5492 core-prim . set-symbol-value!) (nV5491 core-prim . symbol-value) (nV5490 core-prim . gensym) (nV548f core-prim . void) (nV500e core-prim . load) (nV31de core-prim . interaction-environment) (nV548e core-prim . char-ready?) (nV548d core-prim . regexp?) (nV548c core-prim . read-line) (nV548b core-prim . gensym-prefix-set!) (nV548a core-prim . ungensym) (nV5489 core-prim . alist->eq-hash-table) (nV5488 core-prim . assoc-ref) (nV5487 core-prim . print) (nV5486 core-prim . format) (nV5485 core-prim . host-os) (nV2b18 core-prim . library-path) (nV5484 core-prim . standard-library-path) (nV5483 core-prim . file-newer?) (nV5482 core-prim . stat-mtime) (nV5481 core-prim . write-to-file) (nV5480 core-prim . file->sexp-list) (nV547f core-prim . file->list) (nV547e core-prim . file->string) (nV547d core-prim . digit->integer) (nV547c core-prim . call-with-string-input-port) (nV547b core-prim . call-with-string-io) (nV547a core-prim . string-split) (nV5479 core-prim . bytevector-for-each) (nV5478 core-prim . string->regexp) (nV5477 core-prim . rxmatch) (nV5476 core-prim . regexp-replace-all) (nV5475 core-prim . hashtable-for-each) (nV2902 core-prim . mosh-cache-dir) (nV5474 core-prim . call-process) (nV5473 core-prim . local-tz-offset) (nV5472 core-prim . microseconds) (nV5471 core-prim . directory-list) (nV5470 core-prim . set-current-directory!) (nV546f core-prim . expand-path) (nV546e core-prim . current-directory) (nV546d core-prim . %spawn) (nV546c core-prim . %waitpid) (nV546b core-prim . simple-struct-name) (nV546a core-prim . simple-struct-set!) (nV5469 core-prim . simple-struct-ref) (nV5468 core-prim . make-simple-struct) (nV5467 core-prim . simple-struct?) (nV5466 core-prim . pointer-ref-c-int64) (nV5465 core-prim . pointer-ref-c-int32) (nV5464 core-prim . pointer-ref-c-int16) (nV5463 core-prim . pointer-ref-c-int8) (nV5462 core-prim . pointer-ref-c-uint64) (nV5461 core-prim . pointer-ref-c-uint32) (nV5460 core-prim . pointer-ref-c-uint16) (nV545f core-prim . pointer-ref-c-uint8) (nV545e core-prim . pointer-set-c-uint64!) (nV545d core-prim . pointer-set-c-uint32!) (nV545c core-prim . pointer-set-c-uint16!) (nV545b core-prim . pointer-set-c-uint8!) (nV545a core-prim . pointer-set-c-int64!) (nV5459 core-prim . pointer-set-c-int32!) (nV5458 core-prim . pointer-set-c-int16!) (nV5457 core-prim . pointer-set-c-int8!) (nV5456 core-prim . pointer-set-c-pointer!) (nV5455 core-prim . pointer-set-c-double!) (nV5454 core-prim . pointer-set-c-float!) (nV5453 core-prim . pointer-set-c-long-long!) (nV5452 core-prim . pointer-set-c-long!) (nV5451 core-prim . pointer-set-c-int!) (nV5450 core-prim . pointer-set-c-short!) (nV544f core-prim . pointer-set-c-char!) (nV544e core-prim . pointer-ref-c-pointer) (nV544d core-prim . pointer-ref-c-double) (nV544c core-prim . pointer-ref-c-float) (nV544b core-prim . pointer-ref-c-unsigned-long-long) (nV544a core-prim . pointer-ref-c-signed-long-long) (nV5449 core-prim . pointer-ref-c-unsigned-long) (nV5448 core-prim . pointer-ref-c-signed-long) (nV5447 core-prim . pointer-ref-c-unsigned-int) (nV5446 core-prim . pointer-ref-c-signed-int) (nV5445 core-prim . pointer-ref-c-unsigned-short) (nV5444 core-prim . pointer-ref-c-signed-short) (nV5443 core-prim . pointer-ref-c-unsigned-char) (nV5442 core-prim . pointer-ref-c-signed-char) (nV5441 core-prim . pointer->integer) (nV5440 core-prim . integer->pointer) (nV543f core-prim . pointer?) (nV543e core-prim . shared-errno) (nV543d core-prim . get-c-address) (nV543c core-prim . obj->integer) (nV543b core-prim . u8-list->c-procedure) (nV543a core-prim . %ffi-free-c-callback-trampoline) (nV5439 core-prim . %ffi-make-c-callback-trampoline) (nV5438 core-prim . %ffi-free) (nV5437 core-prim . %ffi-malloc) (nV5436 core-prim . %ffi-supported?) (nV5435 core-prim . %ffi-pointer->string) (nV5434 core-prim . %ffi-call) (nV5433 core-prim . %ffi-lookup) (nV5432 core-prim . %ffi-open) (nV5431 core-prim . null-terminated-utf8->string) (nV5430 core-prim . null-terminated-bytevector->string) (nV542f core-prim . %fork) (nV542e core-prim . %pipe) (nV542d core-prim . p) (nV542c core-prim . open-output-string) (nV542b core-prim . get-output-string) (nV542a core-prim . file-stat-ctime) (nV5429 core-prim . file-stat-atime) (nV5428 core-prim . file-stat-mtime) (nV5427 core-prim . file-size-in-bytes) (nV5426 core-prim . file-writable?) (nV5425 core-prim . file-executable?) (nV5424 core-prim . file-readable?) (nV5423 core-prim . file-regular?) (nV5422 core-prim . file-symbolic-link?) (nV5421 core-prim . file-directory?) (nV5420 core-prim . create-symbolic-link) (nV541f core-prim . rename-file) (nV541e core-prim . delete-directory) (nV541d core-prim . create-directory) (nV541c core-prim . create-mosh-cache-dir) (nV541b core-prim . get-environment-variables) (nV541a core-prim . current-exception-handler) (nV5419 core-prim . get-environment-variable) (nV5418 core-prim . join-wraps) (nV5417 core-prim . id->real-label) (nV5416 core-prim . same-marks?) (nV5415 core-prim . same-marks*?) (nV5414 core-prim . get-timeofday) (nV5413 core-prim . get-command-line) (nV5412 core-prim . sys-display) (nV5411 core-prim . whereis) (nV5410 core-prim . register) (nV540f core-prim . vm-join!) (nV540e core-prim . vm-set-value!) (nV540d core-prim . vm?) (nV540c core-prim . main-vm?) (nV540b core-prim . vm-eval) (nV540a core-prim . vm-self) (nV5409 core-prim . vm-start!) (nV5408 core-prim . make-vm) (nV5407 core-prim . mutex-try-lock!) (nV5406 core-prim . mutex-unlock!) (nV5405 core-prim . mutex-lock!) (nV5404 core-prim . mutex?) (nV5403 core-prim . make-mutex) (nV5402 core-prim . condition-variable-notify-all!) (nV5401 core-prim . condition-variable-notify!) (nV5400 core-prim . condition-variable-wait!) (nV53ff core-prim . make-condition-variable) (nV53fe core-prim . mosh-executable-path) (nV53fd core-prim . make-file-options) (nV53fc core-prim . for-each-with-index) (nV53fb core-prim . source-info) (nV53fa core-prim . instruction?) (nV53f9 core-prim . instruction->integer) (nV53f8 core-prim . instruction->symbol) (nV53f7 core-prim . closure->list) (nV53f6 core-prim . make-compiler-instruction) (nV53f5 core-prim . make-instruction) (nV53f4 core-prim . set-source-info!) (nV53f3 core-prim . bignum?) (nV53f2 core-prim . fast-equal?) (nV53f1 core-prim . fasl-read) (nV53f0 core-prim . fasl-write) (nV53ef core-prim . time-usage) (nV53ee core-prim . os-constant) (nV53ed core-prim . disasm) (nV2900 core-prim . make-parameter) (nV53ec core-prim . socket-port) (nV53eb core-prim . socket-shutdown) (nV53ea core-prim . socket-close) (nV53e9 core-prim . socket-send) (nV53e8 core-prim . socket-recv!) (nV53e7 core-prim . socket-recv) (nV53e6 core-prim . make-server-socket) (nV53e5 core-prim . make-client-socket) (nV53e4 core-prim . socket-accept) (nV53e3 core-prim . socket?) (nV53e2 core-prim . string-upcase) (nV53e1 core-prim . string-titlecase) (nV53e0 core-prim . string-normalize-nfkd) (nV53df core-prim . string-normalize-nfkc) (nV53de core-prim . string-normalize-nfd) (nV53dd core-prim . string-normalize-nfc) (nV53dc core-prim . string-foldcase) (nV53db core-prim . string-downcase) (nV53da core-prim . string-ci>?) (nV53d9 core-prim . string-ci>=?) (nV53d8 core-prim . string-ci=?) (nV53d7 core-prim . string-ci<?) (nV53d6 core-prim . string-ci<=?) (nV53d5 core-prim . char-whitespace?) (nV53d4 core-prim . char-upper-case?) (nV53d3 core-prim . char-title-case?) (nV53d2 core-prim . char-numeric?) (nV53d1 core-prim . char-lower-case?) (nV53d0 core-prim . char-general-category) (nV53cf core-prim . char-upcase) (nV53ce core-prim . char-titlecase) (nV53cd core-prim . char-foldcase) (nV53cc core-prim . char-downcase) (nV53cb core-prim . char-ci>?) (nV53ca core-prim . char-ci>=?) (nV53c9 core-prim . char-ci=?) (nV53c8 core-prim . char-ci<?) (nV53c7 core-prim . char-ci<=?) (nV53c6 core-prim . char-alphabetic?) (nV2f1b core-prim . make-variable-transformer) (nV31d2 core-prim . identifier?) (nV31be core-prim . generate-temporaries) (nV31c0 core-prim . free-identifier=?) (nV31d6 core-prim . syntax->datum) (nV31d4 core-prim . datum->syntax) (nV31c2 core-prim . bound-identifier=?) (nV53c5 core-prim . record-type-descriptor?) (nV53c4 core-prim . record-predicate) (nV53c3 core-prim . record-mutator) (nV53c2 core-prim . record-constructor) (nV53c1 core-prim . record-accessor) (nV53c0 core-prim . make-record-type-descriptor) (nV53bf core-prim . make-record-constructor-descriptor) (nV53be core-prim . record?) (nV53bd core-prim . record-type-uid) (nV53bc core-prim . record-type-sealed?) (nV53bb core-prim . record-type-parent) (nV53ba core-prim . record-type-opaque?) (nV53b9 core-prim . record-type-name) (nV53b8 core-prim . record-type-generative?) (nV53b7 core-prim . record-type-field-names) (nV53b6 core-prim . record-rtd) (nV53b5 core-prim . record-field-mutable?) (nV53b4 core-prim . delete-file) (nV53b3 core-prim . file-exists?) (nV53b2 core-prim . vector-sort!) (nV53b1 core-prim . vector-sort) (nV53b0 core-prim . list-sort) (nV53af core-prim . symbol-hash) (nV53ae core-prim . string-ci-hash) (nV53ad core-prim . string-hash) (nV53ac core-prim . equal-hash) (nV53ab core-prim . hashtable-equivalence-function) (nV53aa core-prim . make-hashtable) (nV53a9 core-prim . hashtable-hash-function) (nV53a8 core-prim . make-eqv-hashtable) (nV53a7 core-prim . make-eq-hashtable) (nV53a6 core-prim . hashtable?) (nV53a5 core-prim . hashtable-update!) (nV53a4 core-prim . hashtable-size) (nV53a3 core-prim . hashtable-set!) (nV53a2 core-prim . hashtable-ref) (nV53a1 core-prim . hashtable-mutable?) (nV53a0 core-prim . hashtable-keys) (nV539f core-prim . hashtable-entries) (nV539e core-prim . hashtable-delete!) (nV539d core-prim . hashtable-copy) (nV539c core-prim . hashtable-contains?) (nV539b core-prim . hashtable-clear!) (nV539a core-prim . call-with-output-file) (nV5399 core-prim . call-with-input-file) (nV5398 core-prim . write-char) (nV5397 core-prim . write) (nV5396 core-prim . with-output-to-file) (nV5395 core-prim . with-input-from-file) (nV5394 core-prim . read-char) (nV5393 core-prim . read) (nV5392 core-prim . peek-char) (nV5391 core-prim . open-output-file) (nV5390 core-prim . open-input-file) (nV538f core-prim . newline) (nV538e core-prim . display) (nV538d core-prim . close-output-port) (nV538c core-prim . close-input-port) (nV538b core-prim . eof-object?) (nV538a core-prim . eof-object) (nV5389 core-prim . current-error-port) (nV5388 core-prim . current-output-port) (nV5387 core-prim . current-input-port) (nV5386 core-prim . output-port?) (nV5385 core-prim . input-port?) (nV5384 core-prim . utf-8-codec) (nV5383 core-prim . utf-16-codec) (nV5382 core-prim . transcoder-error-handling-mode) (nV5381 core-prim . transcoder-eol-style) (nV5380 core-prim . transcoder-codec) (nV537f core-prim . transcoded-port) (nV537e core-prim . textual-port?) (nV537d core-prim . string->bytevector) (nV537c core-prim . standard-output-port) (nV537b core-prim . standard-input-port) (nV537a core-prim . standard-error-port) (nV5379 core-prim . set-port-position!) (nV5378 core-prim . put-u8) (nV5377 core-prim . put-string) (nV5376 core-prim . put-datum) (nV5375 core-prim . put-char) (nV5374 core-prim . put-bytevector) (nV5373 core-prim . port?) (nV5372 core-prim . port-transcoder) (nV5371 core-prim . port-position) (nV5370 core-prim . port-has-set-port-position!?) (nV536f core-prim . port-has-port-position?) (nV536e core-prim . port-eof?) (nV536d core-prim . output-port-buffer-mode) (nV536c core-prim . open-string-output-port) (nV536b core-prim . open-string-input-port) (nV536a core-prim . open-file-output-port) (nV5369 core-prim . open-file-input/output-port) (nV5368 core-prim . open-file-input-port) (nV5367 core-prim . open-bytevector-output-port) (nV5366 core-prim . open-bytevector-input-port) (nV5365 core-prim . native-transcoder) (nV5364 core-prim . native-eol-style) (nV5363 core-prim . make-transcoder) (nV5362 core-prim . latin-1-codec) (nV4dfa core-prim . make-i/o-write-error) (nV4de5 core-prim . make-i/o-read-error) (nV4e9b core-prim . make-i/o-port-error) (nV4e11 core-prim . make-i/o-invalid-position-error) (nV4e2c core-prim . make-i/o-filename-error) (nV4e45 core-prim . make-i/o-file-protection-error) (nV4e5a core-prim . make-i/o-file-is-read-only-error) (nV4e84 core-prim . make-i/o-file-does-not-exist-error) (nV4e6f core-prim . make-i/o-file-already-exists-error) (nV4dd0 core-prim . make-i/o-error) (nV4ecb core-prim . make-i/o-encoding-error) (nV4eb4 core-prim . make-i/o-decoding-error) (nV5361 core-prim . make-custom-textual-output-port) (nV5360 core-prim . make-custom-textual-input/output-port) (nV535f core-prim . make-custom-textual-input-port) (nV535e core-prim . make-custom-binary-output-port) (nV535d core-prim . make-custom-binary-input/output-port) (nV535c core-prim . make-custom-binary-input-port) (nV535b core-prim . make-bytevector) (nV535a core-prim . lookahead-u8) (nV5359 core-prim . lookahead-char) (nV4dfc core-prim . i/o-write-error?) (nV4de7 core-prim . i/o-read-error?) (nV4e9f core-prim . i/o-port-error?) (nV4e15 core-prim . i/o-invalid-position-error?) (nV4e30 core-prim . i/o-filename-error?) (nV4e47 core-prim . i/o-file-protection-error?) (nV4e5c core-prim . i/o-file-is-read-only-error?) (nV4e86 core-prim . i/o-file-does-not-exist-error?) (nV4e71 core-prim . i/o-file-already-exists-error?) (nV4dd2 core-prim . i/o-error?) (nV4e17 core-prim . i/o-error-position) (nV4ea1 core-prim . i/o-error-port) (nV4e32 core-prim . i/o-error-filename) (nV4ecf core-prim . i/o-encoding-error?) (nV4ed1 core-prim . i/o-encoding-error-char) (nV4eb6 core-prim . i/o-decoding-error?) (nV5358 core-prim . get-u8) (nV5357 core-prim . get-string-n!) (nV5356 core-prim . get-string-n) (nV5355 core-prim . get-string-all) (nV5354 core-prim . get-line) (nV5353 core-prim . get-datum) (nV5352 core-prim . get-char) (nV5351 core-prim . get-bytevector-some) (nV5350 core-prim . get-bytevector-n!) (nV534f core-prim . get-bytevector-n) (nV534e core-prim . get-bytevector-all) (nV534d core-prim . flush-output-port) (nV534c core-prim . close-port) (nV31ac core-prim . scheme-report-environment) (nV534b core-prim . quotient) (nV31aa core-prim . null-environment) (nV534a core-prim . remainder) (nV5349 core-prim . modulo) (nV5348 core-prim . inexact->exact) (nV5347 core-prim . force) (nV5346 core-prim . exact->inexact) (nV5345 core-prim . make-promise) (nV5344 core-prim . exit) (nV5008 core-prim . command-line) (nV5343 core-prim . string-fill!) (nV5342 core-prim . string-set!) (nV5341 core-prim . set-cdr!) (nV5340 core-prim . set-car!) (nV533f core-prim . remove) (nV533e core-prim . remv) (nV533d core-prim . remp) (nV533c core-prim . remq) (nV533b core-prim . partition) (nV533a core-prim . memv) (nV5339 core-prim . memq) (nV5338 core-prim . memp) (nV5337 core-prim . member) (nV5336 core-prim . exists) (nV5335 core-prim . for-all) (nV5334 core-prim . fold-right) (nV5333 core-prim . fold-left) (nV5332 core-prim . find) (nV5331 core-prim . filter) (nV5330 core-prim . cons*) (nV532f core-prim . assv) (nV532e core-prim . assq) (nV532d core-prim . assp) (nV532c core-prim . assoc) (nV532b core-prim . call-with-string-output-port) (nV532a core-prim . call-with-port) (nV5329 core-prim . call-with-bytevector-output-port) (nV5328 core-prim . bytevector->string) (nV5327 core-prim . buffer-mode?) (nV5326 core-prim . binary-port?) (nV5325 core-prim . with-exception-handler) (nV5324 core-prim . raise-continuable) (nV5323 core-prim . raise) (nV31b0 core-prim . eval) (nV31a8 core-prim . environment) (nV5322 core-prim . make-enumeration) (nV5321 core-prim . enum-set=?) (nV5320 core-prim . enum-set-universe) (nV531f core-prim . enum-set-union) (nV531e core-prim . enum-set-subset?) (nV531d core-prim . enum-set-projection) (nV531c core-prim . enum-set-member?) (nV531b core-prim . enum-set-intersection) (nV531a core-prim . enum-set-indexer) (nV5319 core-prim . enum-set-difference) (nV5318 core-prim . enum-set-constructor) (nV5317 core-prim . enum-set-complement) (nV5316 core-prim . enum-set->list) (nV4d46 core-prim . who-condition?) (nV4cbe core-prim . warning?) (nV4cfd core-prim . violation?) (nV4dbd core-prim . undefined-violation?) (nV4da4 core-prim . syntax-violation?) (nV4da8 core-prim . syntax-violation-subform) (nV4da6 core-prim . syntax-violation-form) (nV31d0 core-prim . syntax-violation) (nV5315 core-prim . simple-conditions) (nV4cd3 core-prim . serious-condition?) (nV4d5d core-prim . non-continuable-violation?) (nV4ca7 core-prim . message-condition?) (nV4d42 core-prim . make-who-condition) (nV4cbc core-prim . make-warning) (nV4cfb core-prim . make-violation) (nV4dbb core-prim . make-undefined-violation) (nV4d9e core-prim . make-syntax-violation) (nV4cd1 core-prim . make-serious-condition) (nV4d5b core-prim . make-non-continuable-violation) (nV4ca3 core-prim . make-message-condition) (nV4d85 core-prim . make-lexical-violation) (nV4d27 core-prim . make-irritants-condition) (nV4d70 core-prim . make-implementation-restriction-violation) (nV4ce6 core-prim . make-error) (nV4d10 core-prim . make-assertion-violation) (nV4d87 core-prim . lexical-violation?) (nV4d2b core-prim . irritants-condition?) (nV4d72 core-prim . implementation-restriction-violation?) (nV4ce8 core-prim . error?) (nV4d48 core-prim . condition-who) (nV5314 core-prim . condition-predicate) (nV4ca9 core-prim . condition-message) (nV4d2d core-prim . condition-irritants) (nV5313 core-prim . condition-accessor) (nV5312 core-prim . condition) (nV4d12 core-prim . assertion-violation?) (nV5311 core-prim . condition?) (nV5310 core-prim . utf32->string) (nV530f core-prim . utf16->string) (nV530e core-prim . utf8->string) (nV530d core-prim . uint-list->bytevector) (nV530c core-prim . u8-list->bytevector) (nV530b core-prim . string->utf8) (nV530a core-prim . string->utf32) (nV5309 core-prim . string->utf16) (nV5308 core-prim . sint-list->bytevector) (nV5307 core-prim . native-endianness) (nV5306 core-prim . bytevector?) (nV5305 core-prim . bytevector=?) (nV5304 core-prim . bytevector-uint-set!) (nV5303 core-prim . bytevector-uint-ref) (nV5302 core-prim . bytevector-u8-set!) (nV5301 core-prim . bytevector-u8-ref) (nV5300 core-prim . bytevector-u64-set!) (nV52ff core-prim . bytevector-u64-ref) (nV52fe core-prim . bytevector-u64-native-set!) (nV52fd core-prim . bytevector-u64-native-ref) (nV52fc core-prim . bytevector-u32-set!) (nV52fb core-prim . bytevector-u32-ref) (nV52fa core-prim . bytevector-u32-native-set!) (nV52f9 core-prim . bytevector-u32-native-ref) (nV52f8 core-prim . bytevector-u16-set!) (nV52f7 core-prim . bytevector-u16-ref) (nV52f6 core-prim . bytevector-u16-native-set!) (nV52f5 core-prim . bytevector-u16-native-ref) (nV52f4 core-prim . bytevector-sint-set!) (nV52f3 core-prim . bytevector-sint-ref) (nV52f2 core-prim . bytevector-s8-set!) (nV52f1 core-prim . bytevector-s8-ref) (nV52f0 core-prim . bytevector-s64-set!) (nV52ef core-prim . bytevector-s64-ref) (nV52ee core-prim . bytevector-s64-native-set!) (nV52ed core-prim . bytevector-s64-native-ref) (nV52ec core-prim . bytevector-s32-set!) (nV52eb core-prim . bytevector-s32-ref) (nV52ea core-prim . bytevector-s32-native-set!) (nV52e9 core-prim . bytevector-s32-native-ref) (nV52e8 core-prim . bytevector-s16-set!) (nV52e7 core-prim . bytevector-s16-ref) (nV52e6 core-prim . bytevector-s16-native-set!) (nV52e5 core-prim . bytevector-s16-native-ref) (nV52e4 core-prim . bytevector-length) (nV52e3 core-prim . bytevector-ieee-single-ref) (nV52e2 core-prim . bytevector-ieee-single-set!) (nV52e1 core-prim . bytevector-ieee-single-native-set!) (nV52e0 core-prim . bytevector-ieee-single-native-ref) (nV52df core-prim . bytevector-ieee-double-set!) (nV52de core-prim . bytevector-ieee-double-ref) (nV52dd core-prim . bytevector-ieee-double-native-set!) (nV52dc core-prim . bytevector-ieee-double-native-ref) (nV52db core-prim . bytevector-fill!) (nV52da core-prim . bytevector-copy!) (nV52d9 core-prim . bytevector-copy) (nV52d8 core-prim . bytevector->uint-list) (nV52d7 core-prim . bytevector->u8-list) (nV52d6 core-prim . bytevector->sint-list) (nV4efb core-prim . no-nans-violation?) (nV4ee6 core-prim . no-infinities-violation?) (nV4ef9 core-prim . make-no-nans-violation) (nV4ee4 core-prim . make-no-infinities-violation) (nV52d5 core-prim . real->flonum) (nV52d4 core-prim . flzero?) (nV52d3 core-prim . fltruncate) (nV52d2 core-prim . fltan) (nV52d1 core-prim . flsqrt) (nV52d0 core-prim . flsin) (nV52cf core-prim . flround) (nV52ce core-prim . flpositive?) (nV52cd core-prim . flonum?) (nV52cc core-prim . flodd?) (nV52cb core-prim . flnumerator) (nV52ca core-prim . flnegative?) (nV52c9 core-prim . flnan?) (nV52c8 core-prim . flmod0) (nV52c7 core-prim . flmod) (nV52c6 core-prim . flmin) (nV52c5 core-prim . flmax) (nV52c4 core-prim . fllog) (nV52c3 core-prim . flinteger?) (nV52c2 core-prim . flinfinite?) (nV52c1 core-prim . flfloor) (nV52c0 core-prim . flfinite?) (nV52bf core-prim . flexpt) (nV52be core-prim . flexp) (nV52bd core-prim . fleven?) (nV52bc core-prim . fldiv0-and-mod0) (nV52bb core-prim . fldiv0) (nV52ba core-prim . fldiv-and-mod) (nV52b9 core-prim . fldiv) (nV52b8 core-prim . fldenominator) (nV52b7 core-prim . flcos) (nV52b6 core-prim . flceiling) (nV52b5 core-prim . flatan) (nV52b4 core-prim . flasin) (nV52b3 core-prim . flacos) (nV52b2 core-prim . flabs) (nV52b1 core-prim . fl>?) (nV52b0 core-prim . fl>=?) (nV52af core-prim . fl=?) (nV52ae core-prim . fl<?) (nV52ad core-prim . fl<=?) (nV52ac core-prim . fl/) (nV52ab core-prim . fl-) (nV52aa core-prim . fl+) (nV52a9 core-prim . fl*) (nV52a8 core-prim . fixnum->flonum) (nV52a7 core-prim . fxzero?) (nV52a6 core-prim . fxxor) (nV52a5 core-prim . fxrotate-bit-field) (nV52a4 core-prim . fxreverse-bit-field) (nV52a3 core-prim . fxpositive?) (nV52a2 core-prim . fxodd?) (nV52a1 core-prim . fxnot) (nV52a0 core-prim . fxnegative?) (nV529f core-prim . fxmod0) (nV529e core-prim . fxmod) (nV529d core-prim . fxmin) (nV529c core-prim . fxmax) (nV529b core-prim . fxlength) (nV529a core-prim . fxior) (nV5299 core-prim . fxif) (nV5298 core-prim . fxfirst-bit-set) (nV5297 core-prim . fxeven?) (nV5296 core-prim . fxdiv0-and-mod0) (nV5295 core-prim . fxdiv0) (nV5294 core-prim . fxdiv-and-mod) (nV5293 core-prim . fxdiv) (nV5292 core-prim . fxcopy-bit-field) (nV5291 core-prim . fxcopy-bit) (nV5290 core-prim . fxbit-set?) (nV528f core-prim . fxbit-field) (nV528e core-prim . fxbit-count) (nV528d core-prim . fxarithmetic-shift-right) (nV528c core-prim . fxarithmetic-shift-left) (nV528b core-prim . fxarithmetic-shift) (nV528a core-prim . fxand) (nV5289 core-prim . fx>?) (nV5288 core-prim . fx>=?) (nV5287 core-prim . fx=?) (nV5286 core-prim . fx<?) (nV5285 core-prim . fx<=?) (nV5284 core-prim . fx-/carry) (nV5283 core-prim . fx-) (nV5282 core-prim . fx+/carry) (nV5281 core-prim . fx+) (nV5280 core-prim . fx*/carry) (nV527f core-prim . fx*) (nV527e core-prim . greatest-fixnum) (nV527d core-prim . least-fixnum) (nV527c core-prim . fixnum-width) (nV527b core-prim . fixnum?) (nV527a core-prim . bitwise-rotate-bit-field) (nV5279 core-prim . bitwise-reverse-bit-field) (nV5278 core-prim . bitwise-length) (nV5277 core-prim . bitwise-if) (nV5276 core-prim . bitwise-first-bit-set) (nV5275 core-prim . bitwise-copy-bit-field) (nV5274 core-prim . bitwise-copy-bit) (nV5273 core-prim . bitwise-bit-set?) (nV5272 core-prim . bitwise-bit-field) (nV5271 core-prim . bitwise-bit-count) (nV5270 core-prim . bitwise-xor) (nV526f core-prim . bitwise-ior) (nV526e core-prim . bitwise-and) (nV526d core-prim . bitwise-not) (nV526c core-prim . bitwise-arithmetic-shift-right) (nV526b core-prim . bitwise-arithmetic-shift-left) (nV526a core-prim . bitwise-arithmetic-shift) (nV5269 core-prim . zero?) (nV5268 core-prim . vector?) (nV5267 core-prim . vector-set!) (nV5266 core-prim . vector-ref) (nV5265 core-prim . vector-map) (nV5264 core-prim . vector-length) (nV5263 core-prim . vector-for-each) (nV5262 core-prim . vector-fill!) (nV5261 core-prim . vector->list) (nV5260 core-prim . vector) (nV525f core-prim . values) (nV525e core-prim . truncate) (nV525d core-prim . tan) (nV525c core-prim . symbol?) (nV525b core-prim . symbol=?) (nV525a core-prim . symbol->string) (nV5259 core-prim . substring) (nV5258 core-prim . string?) (nV5257 core-prim . string>?) (nV5256 core-prim . string>=?) (nV5255 core-prim . string=?) (nV5254 core-prim . string<?) (nV5253 core-prim . string<=?) (nV5252 core-prim . string-ref) (nV5251 core-prim . string-length) (nV5250 core-prim . string-for-each) (nV524f core-prim . string-copy) (nV524e core-prim . string-append) (nV524d core-prim . string->symbol) (nV524c core-prim . string->number) (nV524b core-prim . string->list) (nV524a core-prim . string) (nV5249 core-prim . sqrt) (nV5248 core-prim . sin) (nV5247 core-prim . round) (nV5246 core-prim . reverse) (nV5245 core-prim . real?) (nV5244 core-prim . real-valued?) (nV5243 core-prim . real-part) (nV5242 core-prim . rationalize) (nV5241 core-prim . rational?) (nV5240 core-prim . rational-valued?) (nV523f core-prim . procedure?) (nV523e core-prim . positive?) (nV523d core-prim . pair?) (nV523c core-prim . odd?) (nV523b core-prim . numerator) (nV523a core-prim . number?) (nV5239 core-prim . number->string) (nV5238 core-prim . null?) (nV5237 core-prim . not) (nV5236 core-prim . negative?) (nV5235 core-prim . nan?) (nV5234 core-prim . min) (nV5233 core-prim . max) (nV5232 core-prim . map) (nV5231 core-prim . make-vector) (nV5230 core-prim . make-string) (nV522f core-prim . make-rectangular) (nV522e core-prim . make-polar) (nV522d core-prim . magnitude) (nV522c core-prim . log) (nV522b core-prim . list?) (nV522a core-prim . list-tail) (nV5229 core-prim . list-ref) (nV5228 core-prim . list->vector) (nV5227 core-prim . list->string) (nV5226 core-prim . list) (nV5225 core-prim . length) (nV5224 core-prim . lcm) (nV5223 core-prim . integer?) (nV5222 core-prim . integer-valued?) (nV5221 core-prim . integer->char) (nV5220 core-prim . infinite?) (nV521f core-prim . inexact?) (nV521e core-prim . inexact) (nV521d core-prim . imag-part) (nV521c core-prim . gcd) (nV521b core-prim . for-each) (nV521a core-prim . floor) (nV5219 core-prim . finite?) (nV5218 core-prim . expt) (nV5217 core-prim . exp) (nV5216 core-prim . exact?) (nV5215 core-prim . exact-integer-sqrt) (nV5214 core-prim . exact) (nV5213 core-prim . even?) (nV5212 core-prim . error) (nV5211 core-prim . eqv?) (nV5210 core-prim . equal?) (nV520f core-prim . eq?) (nV520e core-prim . dynamic-wind) (nV520d core-prim . div0-and-mod0) (nV520c core-prim . mod0) (nV520b core-prim . div0) (nV520a core-prim . div-and-mod) (nV5209 core-prim . mod) (nV5208 core-prim . div) (nV5207 core-prim . denominator) (nV5206 core-prim . cos) (nV5205 core-prim . cons) (nV5204 core-prim . complex?) (nV5203 core-prim . char?) (nV5202 core-prim . char>?) (nV5201 core-prim . char>=?) (nV5200 core-prim . char=?) (nV51ff core-prim . char<?) (nV51fe core-prim . char<=?) (nV51fd core-prim . char->integer) (nV51fc core-prim . ceiling) (nV51fb core-prim . call-with-values) (nV51fa core-prim . call/cc) (nV51f9 core-prim . call-with-current-continuation) (nV51f8 core-prim . cddddr) (nV51f7 core-prim . cdddar) (nV51f6 core-prim . cddadr) (nV51f5 core-prim . cddaar) (nV51f4 core-prim . cdaddr) (nV51f3 core-prim . cdadar) (nV51f2 core-prim . cdaadr) (nV51f1 core-prim . cdaaar) (nV51f0 core-prim . cadddr) (nV51ef core-prim . caddar) (nV51ee core-prim . cadadr) (nV51ed core-prim . cadaar) (nV51ec core-prim . caaddr) (nV51eb core-prim . caadar) (nV51ea core-prim . caaadr) (nV51e9 core-prim . caaaar) (nV51e8 core-prim . cdddr) (nV51e7 core-prim . cddar) (nV51e6 core-prim . cdadr) (nV51e5 core-prim . cdaar) (nV51e4 core-prim . caddr) (nV51e3 core-prim . cadar) (nV51e2 core-prim . caadr) (nV51e1 core-prim . caaar) (nV51e0 core-prim . cddr) (nV51df core-prim . cdar) (nV51de core-prim . cadr) (nV51dd core-prim . caar) (nV51dc core-prim . cdr) (nV51db core-prim . car) (nV51da core-prim . boolean?) (nV51d9 core-prim . boolean=?) (nV51d8 core-prim . atan) (nV51d7 core-prim . assertion-violation) (nV31ca core-prim . assertion-error) (nV51d6 core-prim . asin) (nV51d5 core-prim . apply) (nV51d4 core-prim . append) (nV51d3 core-prim . angle) (nV51d2 core-prim . acos) (nV51d1 core-prim . abs) (nV51d0 core-prim . /) (nV51cf core-prim . *) (nV51ce core-prim . -) (nV51cd core-prim . +) (nV51cc core-prim . >=) (nV51cb core-prim . >) (nV51ca core-prim . =) (nV51c9 core-prim . <=) (nV51c8 core-prim . <) (nV51c7 core-prim . library) (nV51c6 $core-rtd &no-nans-rtd &no-nans-rcd) (nV51c5 $core-rtd &no-infinities-rtd &no-infinities-rcd) (nV51c4 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (nV51c3 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (nV51c2 $core-rtd &i/o-port-rtd &i/o-port-rcd) (nV51c1 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (nV51c0 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (nV51bf $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (nV51be $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (nV51bd $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (nV51bc $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (nV51bb $core-rtd &i/o-write-rtd &i/o-write-rcd) (nV51ba $core-rtd &i/o-read-rtd &i/o-read-rcd) (nV51b9 $core-rtd &i/o-rtd &i/o-rcd) (nV51b8 $core-rtd &undefined-rtd &undefined-rcd) (nV51b7 $core-rtd &syntax-rtd &syntax-rcd) (nV51b6 $core-rtd &lexical-rtd &lexical-rcd) (nV51b5 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (nV51b4 $core-rtd &non-continuable-rtd &non-continuable-rcd) (nV51b3 $core-rtd &who-rtd &who-rcd) (nV51b2 $core-rtd &irritants-rtd &irritants-rcd) (nV51b1 $core-rtd &assertion-rtd &assertion-rcd) (nV51b0 $core-rtd &violation-rtd &violation-rcd) (nV51af $core-rtd &error-rtd &error-rcd) (nV51ae $core-rtd &serious-rtd &serious-rcd) (nV51ad $core-rtd &warning-rtd &warning-rcd) (nV51ac $core-rtd &message-rtd &message-rcd) (nV51ab $core-rtd &condition-rtd &condition-rcd) (nV51aa macro . define-condition-type) (nV51a9 macro . define-enumeration) (nV51a8 macro . define-record-type) (nV51a7 macro . parent-rtd) (nV51a6 macro . nongenerative) (nV51a5 macro . opaque) (nV51a4 macro . sealed) (nV51a3 macro . protocol) (nV51a2 macro . parent) (nV51a1 macro . immutable) (nV51a0 macro . mutable) (nV519f macro . fields) (nV519e macro . error-handling-mode) (nV519d macro . file-options) (nV519c macro . buffer-mode) (nV519b macro . eol-style) (nV519a macro . guard) (nV5199 macro . trace-define) (nV5198 macro . trace-lambda) (nV5197 macro . unsyntax-splicing) (nV5196 macro . unsyntax) (nV5195 macro . unquote-splicing) (nV5194 macro . unquote) (nV5193 macro . _) (nV5192 macro . else) (nV5191 macro . =>) (nV5190 macro . ...) (nV518f macro . assert) (nV518e macro . endianness) (nV518d macro . delay) (nV518c macro . time) (nV518b macro . do) (nV518a macro . cond) (nV5189 macro . let*) (nV5188 macro . let*-values) (nV5187 macro . let-values) (nV5186 macro . identifier-syntax) (nV5185 macro . with-syntax) (nV5184 macro . quasisyntax) (nV5183 macro . quasiquote) (nV5182 macro . syntax-rules) (nV5181 macro . include) (nV5180 macro . define-struct) (nV517f core-macro . record-constructor-descriptor) (nV517e core-macro . record-type-descriptor) (nV517d macro . case) (nV517c macro . parameterize) (nV517b macro . unless) (nV517a macro . when) (nV5179 core-macro . or) (nV5178 core-macro . and) (nV5177 core-macro . if) (nV5176 core-macro . let) (nV5175 core-macro . letrec*) (nV5174 core-macro . letrec) (nV5173 core-macro . type-descriptor) (nV5172 core-macro . case-lambda) (nV5171 core-macro . lambda) (nV5170 core-macro . syntax) (nV516f core-macro . syntax-case) (nV516e core-macro . quote) (nV516d core-macro . foreign-call) (nV516c letrec-syntax) (nV516b let-syntax) (nV516a set!) (nV5169 import) (nV5168 begin) (nV5167 module) (nV5166 define-syntax) (nV5165 define)) values values '#f '#f '#f '#f) (nV2cfd@nV2b39@install-library 'nV54b5 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . nV5494) (eval-core . nV5493) (set-symbol-value! . nV5492) (symbol-value . nV5491) (gensym . nV5490) (void . nV548f)) '() values values '#f '#f '#f '#f) (nV2cfd@nV2b39@install-library 'nV54b6 '(mosh) '() '() '() '() '((set-symbol-value! . nV5492) (symbol-value . nV5491) (gensym . nV5490) (regexp? . nV548d) (read-line . nV548c) (ungensym . nV548a) (alist->eq-hash-table . nV5489) (assoc-ref . nV5488) (print . nV5487) (format . nV5486) (host-os . nV5485) (library-path . nV2b18) (standard-library-path . nV5484) (file-newer? . nV5483) (stat-mtime . nV5482) (digit->integer . nV547d) (call-with-string-input-port . nV547c) (call-with-string-io . nV547b) (string-split . nV547a) (bytevector-for-each . nV5479) (string->regexp . nV5478) (rxmatch . nV5477) (regexp-replace-all . nV5476) (hashtable-for-each . nV5475) (set-current-directory! . nV5470) (expand-path . nV546f) (current-directory . nV546e) (p . nV542d) (get-timeofday . nV5414) (get-command-line . nV5413) (sys-display . nV5412) (whereis . nV5411) (register . nV5410) (vm-join! . nV540f) (vm-set-value! . nV540e) (vm? . nV540d) (main-vm? . nV540c) (vm-eval . nV540b) (vm-self . nV540a) (vm-start! . nV5409) (make-vm . nV5408) (mutex-try-lock! . nV5407) (mutex-unlock! . nV5406) (mutex-lock! . nV5405) (mutex? . nV5404) (make-mutex . nV5403) (condition-variable-notify-all! . nV5402) (condition-variable-notify! . nV5401) (condition-variable-wait! . nV5400) (make-condition-variable . nV53ff) (mosh-executable-path . nV53fe) (make-file-options . nV53fd) (for-each-with-index . nV53fc) (source-info . nV53fb) (make-compiler-instruction . nV53f6) (make-instruction . nV53f5) (set-source-info! . nV53f4) (bignum? . nV53f3) (fast-equal? . nV53f2) (fasl-read . nV53f1) (fasl-write . nV53f0) (time-usage . nV53ef) (os-constant . nV53ee) (time . nV518c) (include . nV5181)) '() values values '#f '#f '#f '#f) (nV2cfd@nV2b39@install-library 'nV54b7 '(system) '() '() '() '() '((gensym-prefix-set! . nV548b) (write-to-file . nV5481) (file->sexp-list . nV5480) (file->list . nV547f) (file->string . nV547e) (mosh-cache-dir . nV2902) (call-process . nV5474) (local-tz-offset . nV5473) (microseconds . nV5472) (directory-list . nV5471) (expand-path . nV546f) (%spawn . nV546d) (%waitpid . nV546c) (simple-struct-name . nV546b) (simple-struct-set! . nV546a) (simple-struct-ref . nV5469) (make-simple-struct . nV5468) (simple-struct? . nV5467) (pointer-ref-c-int64 . nV5466) (pointer-ref-c-int32 . nV5465) (pointer-ref-c-int16 . nV5464) (pointer-ref-c-int8 . nV5463) (pointer-ref-c-uint64 . nV5462) (pointer-ref-c-uint32 . nV5461) (pointer-ref-c-uint16 . nV5460) (pointer-ref-c-uint8 . nV545f) (pointer-set-c-uint64! . nV545e) (pointer-set-c-uint32! . nV545d) (pointer-set-c-uint16! . nV545c) (pointer-set-c-uint8! . nV545b) (pointer-set-c-int64! . nV545a) (pointer-set-c-int32! . nV5459) (pointer-set-c-int16! . nV5458) (pointer-set-c-int8! . nV5457) (pointer-set-c-pointer! . nV5456) (pointer-set-c-double! . nV5455) (pointer-set-c-float! . nV5454) (pointer-set-c-long-long! . nV5453) (pointer-set-c-long! . nV5452) (pointer-set-c-int! . nV5451) (pointer-set-c-short! . nV5450) (pointer-set-c-char! . nV544f) (pointer-ref-c-pointer . nV544e) (pointer-ref-c-double . nV544d) (pointer-ref-c-float . nV544c) (pointer-ref-c-unsigned-long-long . nV544b) (pointer-ref-c-signed-long-long . nV544a) (pointer-ref-c-unsigned-long . nV5449) (pointer-ref-c-signed-long . nV5448) (pointer-ref-c-unsigned-int . nV5447) (pointer-ref-c-signed-int . nV5446) (pointer-ref-c-unsigned-short . nV5445) (pointer-ref-c-signed-short . nV5444) (pointer-ref-c-unsigned-char . nV5443) (pointer-ref-c-signed-char . nV5442) (pointer->integer . nV5441) (integer->pointer . nV5440) (pointer? . nV543f) (shared-errno . nV543e) (get-c-address . nV543d) (obj->integer . nV543c) (u8-list->c-procedure . nV543b) (%ffi-free-c-callback-trampoline . nV543a) (%ffi-make-c-callback-trampoline . nV5439) (%ffi-free . nV5438) (%ffi-malloc . nV5437) (%ffi-supported? . nV5436) (%ffi-pointer->string . nV5435) (%ffi-call . nV5434) (%ffi-lookup . nV5433) (%ffi-open . nV5432) (null-terminated-utf8->string . nV5431) (null-terminated-bytevector->string . nV5430) (%fork . nV542f) (%pipe . nV542e) (open-output-string . nV542c) (get-output-string . nV542b) (file-stat-ctime . nV542a) (file-stat-atime . nV5429) (file-stat-mtime . nV5428) (file-size-in-bytes . nV5427) (file-writable? . nV5426) (file-executable? . nV5425) (file-readable? . nV5424) (file-regular? . nV5423) (file-symbolic-link? . nV5422) (file-directory? . nV5421) (create-symbolic-link . nV5420) (rename-file . nV541f) (delete-directory . nV541e) (create-directory . nV541d) (create-mosh-cache-dir . nV541c) (get-environment-variables . nV541b) (current-exception-handler . nV541a) (get-environment-variable . nV5419) (join-wraps . nV5418) (id->real-label . nV5417) (same-marks? . nV5416) (same-marks*? . nV5415) (instruction? . nV53fa) (instruction->integer . nV53f9) (instruction->symbol . nV53f8) (closure->list . nV53f7) (disasm . nV53ed) (make-parameter . nV2900) (socket-port . nV53ec) (socket-shutdown . nV53eb) (socket-close . nV53ea) (socket-send . nV53e9) (socket-recv! . nV53e8) (socket-recv . nV53e7) (make-server-socket . nV53e6) (make-client-socket . nV53e5) (socket-accept . nV53e4) (socket? . nV53e3) (parameterize . nV517c)) '() values values '#f '#f '#f '#f)))
(begin (set! nV4ff5@ref (unspecified)) (set! nV4ff7@x* (unspecified)) (set! nV4ff9@add-library-path! (unspecified)) (set! nV4ffb@parse-and-add-library-path (unspecified)) (set! nV4ffd@rpad (unspecified)) (set! nV4fff@condition-printer (unspecified)) (set! nV5001@record->field-alist (unspecified)) (set! nV5003@map-with-index (unspecified)) (set! nV5005@repl (unspecified)) (set! nV5007@trace-printer (unspecified)) (set! nV5009@command-line (unspecified)) (set! nV500b@local-library-path (unspecified)) (set! nV500d@load/args (unspecified)) (set! nV500f@load (unspecified)) (set! nV5011@ironscheme-build (unspecified)) (set! nV5013@eval-top-level (unspecified)) (set! nV5015@compile-system-libraries (unspecified)) (set! nV5017@compile (unspecified)) (set! nV5019@compile->closure (unspecified)) (set! nV501b@pre-compile-r6rs-file (unspecified)) (set! nV501d@load-r6rs-top-level (unspecified)) (set! nV501f@load-r6rs-top-level-sexp (unspecified)) (set! nV5021@prefix-inc (unspecified)) (set! nV5023@prefix-inc! (unspecified)) (set! nV4ff5@ref (lambda (nV505e@rtd nV505f@i nV5060@x) (let ((nV5064@val ((record-accessor nV505e@rtd nV505f@i) nV5060@x))) (if (symbol? nV5064@val) (ungensym nV5064@val) nV5064@val)))) (set! nV514c@nV4ff5@ref nV4ff5@ref) (set! nV4ff7@x* '()) (set! nV514d@nV4ff7@x* nV4ff7@x*) (set! nV4ff9@add-library-path! (lambda (nV5066@path) (nV2ced@nV2b19@library-path (append (nV2ced@nV2b19@library-path) (list nV5066@path))))) (set! nV514e@nV4ff9@add-library-path! nV4ff9@add-library-path!) (set! nV4ffb@parse-and-add-library-path (lambda (nV5068@paths nV5069@message) (let ((nV506d@separator '#f)) (begin (set! nV506d@separator (if (string=? (host-os) '"win32") '#\; '#\:)) (let ((nV506e@t nV5068@paths)) (if nV506e@t ((lambda (nV5070@paths) (for-each (lambda (nV5072@path) (if (file-exists? nV5072@path) (nV4ff9@add-library-path! (expand-path nV5072@path)) (format (current-error-port) nV5069@message nV5072@path))) (string-split nV5070@paths nV506d@separator))) nV506e@t) (void))))))) (set! nV514f@nV4ffb@parse-and-add-library-path nV4ffb@parse-and-add-library-path) (set! nV4ffd@rpad (lambda (nV5074@str nV5075@pad nV5076@n) (let ((nV507a@rest (- nV5076@n (string-length (format '"~a" nV5074@str))))) (let nV5080@loop ((nV507c@rest nV507a@rest) (nV507d@ret (format '"~a" nV5074@str))) (if (<= nV507c@rest '0) nV507d@ret (nV5080@loop (- nV507c@rest '1) (string-append nV507d@ret nV5075@pad))))))) (set! nV5150@nV4ffd@rpad nV4ffd@rpad) (set! nV4fff@condition-printer (lambda (nV5082@e nV5083@port) (let ((nV5087@max-condition-len '#f)) (begin (set! nV5087@max-condition-len (apply max (map (lambda (nV5098@c) (string-length (symbol->string (record-type-name (record-rtd nV5098@c))))) (simple-conditions nV5082@e)))) (begin (display '" Condition components:\n" nV5083@port) (for-each-with-index (lambda (nV5088@i nV5089@x) (let ((nV508c@rtd (record-rtd nV5089@x)) (nV508d@fields-alist (nV5001@record->field-alist nV5089@x))) (begin (format nV5083@port '" ~d. ~a" (+ nV5088@i '1) (nV4ffd@rpad (symbol->string (record-type-name nV508c@rtd)) '" " nV5087@max-condition-len)) (if (null? nV508d@fields-alist) (newline nV5083@port) (void)) (let nV5094@loop ((nV5090@first '#t) (nV5091@fields-alist nV508d@fields-alist)) (if (null? nV5091@fields-alist) '() (let ((nV5096@field (car nV5091@fields-alist))) (begin (if (not nV5090@first) (display (nV4ffd@rpad '"" '" " (+ '4 nV5087@max-condition-len)) nV5083@port) (void)) (display '"       " nV5083@port) (display (car nV5096@field) nV5083@port) (display '": " nV5083@port) (write (cdr nV5096@field) nV5083@port) (newline nV5083@port) (nV5094@loop '#f (cdr nV5091@fields-alist))))))))) (simple-conditions nV5082@e))))))) (set! nV5151@nV4fff@condition-printer nV4fff@condition-printer) (set! nV5001@record->field-alist (lambda (nV509a@r) (let ((nV509d@ref '#f)) (begin (set! nV509d@ref (lambda (nV50a8@rtd nV50a9@i nV50aa@x) (let ((nV50ae@val ((record-accessor nV50a8@rtd nV50a9@i) nV50aa@x))) (if (symbol? nV50ae@val) (ungensym nV50ae@val) nV50ae@val)))) (let nV50a2@loop ((nV509e@ret '()) (nV509f@rtd (record-rtd nV509a@r))) (if nV509f@rtd (nV50a2@loop (append nV509e@ret (nV5003@map-with-index (lambda (nV50a4@i nV50a5@field) (cons nV50a5@field (nV509d@ref nV509f@rtd nV50a4@i nV509a@r))) (vector->list (record-type-field-names nV509f@rtd)))) (record-type-parent nV509f@rtd)) nV509e@ret)))))) (set! nV5152@nV5001@record->field-alist nV5001@record->field-alist) (set! nV5003@map-with-index (lambda (nV50b0@proc nV50b1@lst) (let nV50ba@loop ((nV50b4@i '0) (nV50b5@lst nV50b1@lst) (nV50b6@ret '())) (if (null? nV50b5@lst) (reverse nV50b6@ret) (nV50ba@loop (+ nV50b4@i '1) (cdr nV50b5@lst) (cons (nV50b0@proc nV50b4@i (car nV50b5@lst)) nV50b6@ret)))))) (set! nV5153@nV5003@map-with-index nV5003@map-with-index) (set! nV5005@repl (lambda nV50bc@x (let ((nV50bf@rec '#f)) (begin (set! nV50bf@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (nV50c2@nV50c0) (lambda () (with-exception-handler (lambda (nV50c4@e) ((call/cc (lambda (nV50c6@nV50c1) (nV50c2@nV50c0 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? nV50c4@e) (nV4fff@condition-printer nV50c4@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" nV50c4@e))) (nV50c6@nV50c1 (lambda () (raise-continuable nV50c4@e)))))))))) (lambda () (let nV50cc@loop ((nV50c8@line (get-line (current-input-port))) (nV50c9@accum '"")) (let ((nV50cf@parentheses-ok? '#f) (nV50d1@eval-string-print '#f)) (begin (set! nV50cf@parentheses-ok? (lambda (nV50d6@text) (let nV50de@loop ((nV50d8@chars (string->list nV50d6@text)) (nV50d9@p0 '0) (nV50da@p1 '0)) (if (null? nV50d8@chars) (= '0 nV50d9@p0 nV50da@p1) (let ((nV50e0@t (car nV50d8@chars))) (if (memv nV50e0@t '(#\()) (nV50de@loop (cdr nV50d8@chars) (+ nV50d9@p0 '1) nV50da@p1) (if (memv nV50e0@t '(#\))) (nV50de@loop (cdr nV50d8@chars) (- nV50d9@p0 '1) nV50da@p1) (if (memv nV50e0@t '(#\[)) (nV50de@loop (cdr nV50d8@chars) nV50d9@p0 (+ nV50da@p1 '1)) (if (memv nV50e0@t '(#\])) (nV50de@loop (cdr nV50d8@chars) nV50d9@p0 (- nV50da@p1 '1)) (nV50de@loop (cdr nV50d8@chars) nV50d9@p0 nV50da@p1)))))))))) (set! nV50d1@eval-string-print (lambda (nV50d4@text) (if (not (or (string=? '"\n" nV50d4@text) (= '0 (string-length nV50d4@text)))) (write (nV5013@eval-top-level (call-with-port (open-string-input-port nV50d4@text) read))) (void)))) (if (eof-object? nV50c8@line) (begin (nV50d1@eval-string-print nV50c9@accum) (exit)) (let ((nV50d2@current (string-append nV50c9@accum nV50c8@line))) (if (nV50cf@parentheses-ok? nV50d2@current) (nV50d1@eval-string-print nV50d2@current) (nV50cc@loop (get-line (current-input-port)) nV50d2@current))))))))))))) (newline) (nV50bf@rec)))) (nV50bf@rec))))) (set! nV5154@nV5005@repl nV5005@repl) (set! nV5007@trace-printer (nV2a23@nV2901@make-parameter write)) (set! nV5155@nV5007@trace-printer nV5007@trace-printer) (set! nV5009@command-line (nV2a23@nV2901@make-parameter (get-command-line))) (set! nV5156@nV5009@command-line nV5009@command-line) (set! nV500b@local-library-path (lambda (nV50e2@filename) (nV2ced@nV2b19@library-path))) (set! nV5157@nV500b@local-library-path nV500b@local-library-path) (set! nV500d@load/args (lambda (nV50e4@filename . nV50e6@args) (begin (apply nV501d@load-r6rs-top-level nV50e4@filename 'load nV50e6@args) (void)))) (set! nV5158@nV500d@load/args nV500d@load/args) (set! nV500f@load (lambda (nV50e8@filename) (begin (apply nV501d@load-r6rs-top-level nV50e8@filename 'load (nV5009@command-line)) (void)))) (set! nV5159@nV500f@load nV500f@load) (set! nV5011@ironscheme-build (lambda () (nV500f@load '"ironscheme-buildscript.ss"))) (set! nV515a@nV5011@ironscheme-build nV5011@ironscheme-build) (set! nV5013@eval-top-level (lambda (nV50ea@x) (nV4c1b@nV31b1@eval nV50ea@x (nV4c32@nV31df@interaction-environment)))) (set! nV515b@nV5013@eval-top-level nV5013@eval-top-level) (set! nV5015@compile-system-libraries (lambda () (nV5013@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! nV515c@nV5015@compile-system-libraries nV5015@compile-system-libraries) (set! nV5017@compile (lambda (nV50ec@filename) (nV501d@load-r6rs-top-level nV50ec@filename 'compile))) (set! nV515d@nV5017@compile nV5017@compile) (set! nV5019@compile->closure (lambda (nV50ee@filename) (nV501d@load-r6rs-top-level nV50ee@filename 'closure))) (set! nV515e@nV5019@compile->closure nV5019@compile->closure) (set! nV501b@pre-compile-r6rs-file (lambda (nV50f0@filename) (nV501d@load-r6rs-top-level nV50f0@filename 'compile))) (set! nV515f@nV501b@pre-compile-r6rs-file nV501b@pre-compile-r6rs-file) (set! nV501d@load-r6rs-top-level (lambda (nV50f2@filename nV50f3@how . nV50f6@args) (begin (nV2ced@nV2b19@library-path (nV500b@local-library-path nV50f2@filename)) (let ((nV50f8@x* (with-input-from-file nV50f2@filename (lambda () (let nV50fa@f () (let ((nV50fc@x (nV2a15@nV28e5@read-annotated))) (if (eof-object? nV50fc@x) '() (cons nV50fc@x (nV50fa@f))))))))) (let ((nV50fe@t nV50f3@how)) (if (memv nV50fe@t '(closure)) (nV4c31@nV31dd@pre-compile-r6rs-top-level nV50f8@x*) (if (memv nV50fe@t '(load)) (begin (nV5009@command-line (cons nV50f2@filename (car nV50f6@args))) (nV2a24@nV2903@mosh-cache-dir (create-mosh-cache-dir)) (if (nV2a24@nV2903@mosh-cache-dir) (gensym-prefix-set! (nV5023@prefix-inc! (string-append (nV2a24@nV2903@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (nV5100@file) ((call/cc (lambda (nV5104@nV5102) (lambda () (with-exception-handler (lambda (nV5106@c) ((call/cc (lambda (nV5108@nV5103) (nV5104@nV5102 (lambda () (if '#t '#t (nV5108@nV5103 (lambda () (raise-continuable nV5106@c)))))))))) (lambda () (delete-file (string-append (nV2a24@nV2903@mosh-cache-dir) '"/" nV5100@file))))))))) (directory-list (nV2a24@nV2903@mosh-cache-dir))) (void)) (let ((nV510a@compiled (nV4c30@nV31db@compile-r6rs-top-level nV50f8@x*))) (begin (if (and (nV2a24@nV2903@mosh-cache-dir) (not (symbol-value '%disable-acc))) (nV2cf1@nV2b21@serialize-all nV2a1e@nV28f7@serialize-library nV2a7a@nV2a33@compile-core-expr) (void)) (nV510a@compiled)))) (if (memv nV50fe@t '(compile)) (begin (nV4c30@nV31db@compile-r6rs-top-level nV50f8@x*) (nV2cf1@nV2b21@serialize-all nV2a1e@nV28f7@serialize-library nV2a7a@nV2a33@compile-core-expr)) (if '#f '#f (void)))))))))) (set! nV5160@nV501d@load-r6rs-top-level nV501d@load-r6rs-top-level) (set! nV501f@load-r6rs-top-level-sexp (lambda (nV510c@import-spec nV510d@thunk) (let ((nV5118@nV5111 nV2ced@nV2b19@library-path) (nV5119@nV5113 nV2a24@nV2903@mosh-cache-dir) (nV511a@nV5115 (nV500b@local-library-path '"")) (nV511b@nV5117 (create-mosh-cache-dir))) (let ((nV5120@swap (lambda () (begin (let ((nV5122@t (nV5118@nV5111))) (begin (nV5118@nV5111 nV511a@nV5115) (set! nV511a@nV5115 nV5122@t))) (let ((nV5124@t (nV5119@nV5113))) (begin (nV5119@nV5113 nV511b@nV5117) (set! nV511b@nV5117 nV5124@t))))))) (dynamic-wind nV5120@swap (lambda () (begin (if (nV2a24@nV2903@mosh-cache-dir) (gensym-prefix-set! (nV5023@prefix-inc! (string-append (nV2a24@nV2903@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((nV512a@nV5127 nV5009@command-line) (nV512b@nV5129 '())) (let ((nV512e@swap (lambda () (let ((nV5130@t (nV512a@nV5127))) (begin (nV512a@nV5127 nV512b@nV5129) (set! nV512b@nV5129 nV5130@t)))))) (dynamic-wind nV512e@swap (lambda () ((nV4c30@nV31db@compile-r6rs-top-level (list (cons 'import nV510c@import-spec) (list nV510d@thunk))))) nV512e@swap))))) nV5120@swap))))) (set! nV5161@nV501f@load-r6rs-top-level-sexp nV501f@load-r6rs-top-level-sexp) (set! nV5021@prefix-inc (lambda (nV5132@prefix-string) (let ((nV5134@prefix (symbol->string nV5132@prefix-string))) (let ((nV5136@len (string-length nV5134@prefix))) (let nV513e@loop ((nV5138@i (- nV5136@len '1)) (nV5139@carry? '#t) (nV513a@accum '())) (if (< nV5138@i '0) (string->symbol (list->string (if nV5139@carry? (cons '#\a nV513a@accum) nV513a@accum))) (if nV5139@carry? (let ((nV5140@next-integer (+ '1 (char->integer (string-ref nV5134@prefix nV5138@i))))) (if (= nV5140@next-integer '123) (nV513e@loop (- nV5138@i '1) '#f (cons '#\A nV513a@accum)) (if (= nV5140@next-integer '91) (nV513e@loop (- nV5138@i '1) '#t (cons '#\a nV513a@accum)) (nV513e@loop (- nV5138@i '1) '#f (cons (integer->char nV5140@next-integer) nV513a@accum))))) (nV513e@loop (- nV5138@i '1) '#f (cons (string-ref nV5134@prefix nV5138@i) nV513a@accum))))))))) (set! nV5162@nV5021@prefix-inc nV5021@prefix-inc) (set! nV5023@prefix-inc! (lambda (nV5142@file) (begin (if (not (file-exists? nV5142@file)) (call-with-output-file nV5142@file (lambda (nV5144@port) (write 'd nV5144@port))) (void)) (let ((nV5146@prefix (call-with-input-file nV5142@file read))) (if (main-vm?) (let ((nV5148@next-prefix (nV5021@prefix-inc nV5146@prefix))) (begin (call-with-port (open-file-output-port nV5142@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (nV514a@port) (write nV5148@next-prefix nV514a@port))) nV5146@prefix)) nV5146@prefix))))) (set! nV5163@nV5023@prefix-inc! nV5023@prefix-inc!) (begin (nV2cf2@nV2b23@current-precompiled-library-loader nV2a1f@nV28f9@load-serialized-library) (set-symbol-value! 'load nV500f@load) (set-symbol-value! 'pre-compile-r6rs-file nV501b@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs nV5013@eval-top-level) (set-symbol-value! 'int-env-syms nV4c12@nV319f@interaction-environment-symbols) (set-symbol-value! 'expanded2core nV2a79@nV2a31@expanded->core) (set-symbol-value! 'trace-printer nV5007@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'invoke-library-by-name nV2d02@nV2b43@invoke-library-by-name) (set-symbol-value! 'create-non-continuable-violation (lambda (nV5024@c) (condition (nV4f52@nV4d5c@make-non-continuable-violation) (nV4f48@nV4d43@make-who-condition 'raise) (nV4f0c@nV4ca4@make-message-condition '"returned from non-continuable exception") (nV4f3e@nV4d28@make-irritants-condition (list nV5024@c))))) (nV4ffb@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (nV4ffb@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (nV4ff9@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (nV4ff9@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (nV4ff9@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((nV5026@prefix (lambda (nV5028@ext nV5029@ls) (append (map (lambda (nV502c@x) (string-append nV5028@ext nV502c@x)) nV5029@ls) nV5029@ls)))) (nV2cee@nV2b1b@library-extensions (nV5026@prefix '".mosh" (nV2cee@nV2b1b@library-extensions)))) (current-exception-handler (lambda (nV502e@c) (begin (if (condition? nV502e@c) (nV4fff@condition-printer nV502e@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" nV502e@c)) nV502e@c))) (if ((call/cc (lambda (nV5032@nV5030) (lambda () (with-exception-handler (lambda (nV5034@c) ((call/cc (lambda (nV5036@nV5031) (nV5032@nV5030 (lambda () (if '#t '#f (nV5036@nV5031 (lambda () (raise-continuable nV5034@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (nV501f@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (nV5009@command-line)) (let ((nV5040@nV5039 nV5009@command-line) (nV5041@nV503b nV2a24@nV2903@mosh-cache-dir) (nV5042@nV503d '()) (nV5043@nV503f (create-mosh-cache-dir))) (let ((nV5048@swap (lambda () (begin (let ((nV504a@t (nV5040@nV5039))) (begin (nV5040@nV5039 nV5042@nV503d) (set! nV5042@nV503d nV504a@t))) (let ((nV504c@t (nV5041@nV503b))) (begin (nV5041@nV503b nV5043@nV503f) (set! nV5043@nV503f nV504c@t))))))) (dynamic-wind nV5048@swap (lambda () (begin (if (nV2a24@nV2903@mosh-cache-dir) (gensym-prefix-set! (nV5023@prefix-inc! (string-append (nV2a24@nV2903@mosh-cache-dir) '"/prefix.txt"))) (void)) (nV5005@repl))) nV5048@swap))) (begin (nV2ced@nV2b19@library-path (nV500b@local-library-path (car (nV5009@command-line)))) (set! nV4ff7@x* (with-input-from-file (car (nV5009@command-line)) (lambda () (let nV504e@f () (let ((nV5050@x (nV2a15@nV28e5@read-annotated))) (if (eof-object? nV5050@x) '() (cons nV5050@x (nV504e@f)))))))) (nV5009@command-line (cons (car (nV5009@command-line)) (cdr (nV5009@command-line)))) (nV2a24@nV2903@mosh-cache-dir (create-mosh-cache-dir)) (if (nV2a24@nV2903@mosh-cache-dir) (gensym-prefix-set! (nV5023@prefix-inc! (string-append (nV2a24@nV2903@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (nV5052@file) ((call/cc (lambda (nV5056@nV5054) (lambda () (with-exception-handler (lambda (nV5058@c) ((call/cc (lambda (nV505a@nV5055) (nV5056@nV5054 (lambda () (if '#t '#t (nV505a@nV5055 (lambda () (raise-continuable nV5058@c)))))))))) (lambda () (delete-file (string-append (nV2a24@nV2903@mosh-cache-dir) '"/" nV5052@file))))))))) (directory-list (nV2a24@nV2903@mosh-cache-dir))) (void)) (let ((nV505c@compiled (nV4c30@nV31db@compile-r6rs-top-level nV4ff7@x*))) (begin (if (and (nV2a24@nV2903@mosh-cache-dir) (not (symbol-value '%disable-acc))) (nV2cf1@nV2b21@serialize-all nV2a1e@nV28f7@serialize-library nV2a7a@nV2a33@compile-core-expr) (void)) (nV505c@compiled))))))))
