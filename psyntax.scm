;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! uy599@library-file-path->cache-path (unspecified)) (set! uy59b@read-annotated (unspecified)) (set! uy59d@annotation-stripped (unspecified)) (set! uy59f@annotation? (unspecified)) (set! uy5a1@annotation-source (unspecified)) (set! uy5a3@annotation-expression (unspecified)) (set! uy5a5@scm->fasl (unspecified)) (set! uy5a7@fasl-save (unspecified)) (set! uy5a9@fasl-load (unspecified)) (set! uy5ab@verbose? (unspecified)) (set! uy5ad@serialize-library (unspecified)) (set! uy5af@load-serialized-library (unspecified)) (set! uy5b1@make-record-printer (unspecified)) (set! uy5b3@compile-core (unspecified)) (set! uy5b5@read-library-source-file (unspecified)) (set! uy5b7@make-parameter (unspecified)) (set! uy5b9@mosh-cache-dir (unspecified)) (set! uy64f@file-options-spec (unspecified)) (set! uy599@library-file-path->cache-path (lambda (uy650@x) (call-with-values (lambda () (open-string-output-port)) (lambda (uy656@uy653 uy657@uy655) (let ((uy65a@extract uy657@uy655) (uy65b@p uy656@uy653)) (letrec* ((uy65f@display-hex (lambda (uy668@n) (if (<= '0 uy668@n '9) (display uy668@n uy65b@p) (display (integer->char (+ (char->integer '#\a) (- uy668@n '10))) uy65b@p))))) (begin (let uy662@f ((uy660@ls (string-split uy650@x '#\/))) (if (not (null? uy660@ls)) (begin (display '"_" uy65b@p) (for-each (lambda (uy664@c) (if (or (char<=? '#\a uy664@c '#\z) (char<=? '#\A uy664@c '#\Z) (char<=? '#\0 uy664@c '#\9) (memv uy664@c '(#\- #\. #\_ #\~))) (display uy664@c uy65b@p) (begin (display '"%" uy65b@p) (let ((uy666@n (char->integer uy664@c))) (begin (uy65f@display-hex (quotient uy666@n '16)) (uy65f@display-hex (remainder uy666@n '16))))))) (string->list (car uy660@ls))) (uy662@f (cdr uy660@ls))) (void))) (uy65a@extract)))))))) (set! uy6ca@uy599@library-file-path->cache-path uy599@library-file-path->cache-path) (set! uy59b@read-annotated read) (set! uy6cb@uy59b@read-annotated uy59b@read-annotated) (set! uy59d@annotation-stripped (lambda (uy66a@x) (if (pair? uy66a@x) (cons (uy59d@annotation-stripped (car uy66a@x)) (uy59d@annotation-stripped (cdr uy66a@x))) (if (procedure? uy66a@x) (set-source-info! uy66a@x '#f) uy66a@x)))) (set! uy6cc@uy59d@annotation-stripped uy59d@annotation-stripped) (set! uy59f@annotation? (lambda (uy66c@x) (or (and (annotated-pair? uy66c@x) (source-info uy66c@x)) (and (procedure? uy66c@x) (source-info uy66c@x))))) (set! uy6cd@uy59f@annotation? uy59f@annotation?) (set! uy5a1@annotation-source (lambda (uy66e@x) (source-info uy66e@x))) (set! uy6ce@uy5a1@annotation-source uy5a1@annotation-source) (set! uy5a3@annotation-expression (lambda (uy670@x) (if (annotated-pair? uy670@x) (cons (car uy670@x) (cdr uy670@x)) (if (procedure? uy670@x) (set-source-info! uy670@x '#f) uy670@x)))) (set! uy6cf@uy5a3@annotation-expression uy5a3@annotation-expression) (set! uy5a5@scm->fasl (lambda (uy672@filename) (string-append (uy5b9@mosh-cache-dir) '"/" (uy599@library-file-path->cache-path uy672@filename) '".mosh-fasl"))) (set! uy6d0@uy5a5@scm->fasl uy5a5@scm->fasl) (set! uy5a7@fasl-save (lambda (uy674@filename uy675@obj) (call-with-port (open-file-output-port uy674@filename) (lambda (uy678@port) ((symbol-value 'fasl-write!) uy675@obj uy678@port))))) (set! uy6d1@uy5a7@fasl-save uy5a7@fasl-save) (set! uy5a9@fasl-load (lambda (uy67a@filename) (call-with-port (open-file-input-port uy67a@filename) (symbol-value 'fasl-read!)))) (set! uy6d2@uy5a9@fasl-load uy5a9@fasl-load) (set! uy5ab@verbose? (symbol-value '%verbose)) (set! uy6d3@uy5ab@verbose? uy5ab@verbose?) (set! uy5ad@serialize-library (lambda (uy67c@filename uy67d@obj) (begin (if uy5ab@verbose? (format (current-error-port) '"serialize-library ~a\n..." uy67c@filename) (void)) (let ((uy680@expanded2core (symbol-value 'expanded2core))) (let ((uy682@compile (symbol-value 'compile-w/o-halt))) (let ((uy684@code uy67d@obj)) (let ((uy686@pivot (cddddr (cddddr uy684@code)))) (let ((uy688@visit (uy682@compile (uy680@expanded2core (car uy686@pivot))))) (begin (set-car! uy686@pivot uy688@visit) (let ((uy68a@pivot (cdr uy686@pivot))) (let ((uy68c@invoke (uy682@compile (uy680@expanded2core (car uy68a@pivot))))) (set-car! uy68a@pivot uy68c@invoke))))))))) (let ((uy68e@fasl-file (uy5a5@scm->fasl uy67c@filename))) (begin (if (file-exists? uy68e@fasl-file) (delete-file uy68e@fasl-file) (void)) ((call/cc (lambda (uy692@uy690) (lambda () (with-exception-handler (lambda (uy694@c) ((call/cc (lambda (uy696@uy691) (uy692@uy690 (lambda () (if '#t (begin (if uy5ab@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" uy67c@filename) (void)) (if (file-exists? uy68e@fasl-file) (delete-file uy68e@fasl-file) (void)) '#f) (uy696@uy691 (lambda () (raise-continuable uy694@c)))))))))) (lambda () (uy5a7@fasl-save uy68e@fasl-file uy67d@obj)))))))))))) (set! uy6d4@uy5ad@serialize-library uy5ad@serialize-library) (set! uy5af@load-serialized-library (lambda (uy698@filename uy699@obj) (and (uy5b9@mosh-cache-dir) (let ((uy69c@fasl-file (uy5a5@scm->fasl uy698@filename))) (if (and (file-exists? uy69c@fasl-file) ((symbol-value 'file-newer?) uy69c@fasl-file uy698@filename)) (let ((uy69e@expanded2core (symbol-value 'expanded2core))) (let ((uy6a0@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((uy6a2@code (uy5a9@fasl-load uy69c@fasl-file))) (let ((uy6a4@pivot (cddddr (cddddr uy6a2@code)))) (let ((uy6a6@visit (car uy6a4@pivot))) (let ((uy6a8@visit-proc (lambda () (uy6a0@eval-compiled-core uy6a6@visit)))) (begin (set-car! uy6a4@pivot uy6a8@visit-proc) (let ((uy6aa@pivot (cdr uy6a4@pivot))) (let ((uy6ac@invoke (car uy6aa@pivot))) (begin (set-car! uy6aa@pivot (lambda () (uy6a0@eval-compiled-core uy6ac@invoke))) (apply uy699@obj uy6a2@code))))))))))) '#f))))) (set! uy6d5@uy5af@load-serialized-library uy5af@load-serialized-library) (set! uy5b1@make-record-printer (lambda (uy6ae@name uy6af@printer) (lambda uy6b2@x (begin (display '"record printer") (for-each display uy6b2@x))))) (set! uy6d6@uy5b1@make-record-printer uy5b1@make-record-printer) (set! uy5b3@compile-core (lambda uy6b4@x (apply error 'comile-core '"not implementated" uy6b4@x))) (set! uy6d7@uy5b3@compile-core uy5b3@compile-core) (set! uy5b5@read-library-source-file (lambda (uy6b6@file-name) (with-input-from-file uy6b6@file-name uy59b@read-annotated))) (set! uy6d8@uy5b5@read-library-source-file uy5b5@read-library-source-file) (set! uy5b7@make-parameter (lambda uy6c6 (let ((uy6c7 (length uy6c6))) (if (= uy6c7 '1) (apply (lambda (uy6b8@x) (uy5b7@make-parameter uy6b8@x (lambda (uy6ba@x) uy6ba@x))) uy6c6) (if (= uy6c7 '2) (apply (lambda (uy6bc@x uy6bd@fender) (let ((uy6c0@x (uy6bd@fender uy6bc@x))) (lambda uy6c4 (let ((uy6c5 (length uy6c4))) (if (= uy6c5 '0) (apply (lambda () uy6c0@x) uy6c4) (if (= uy6c5 '1) (apply (lambda (uy6c2@v) (set! uy6c0@x (uy6bd@fender uy6c2@v))) uy6c4) (error 'apply '"invalid arg count"))))))) uy6c6) (error 'apply '"invalid arg count")))))) (set! uy6d9@uy5b7@make-parameter uy5b7@make-parameter) (set! uy5b9@mosh-cache-dir (uy5b7@make-parameter '#f)) (set! uy6da@uy5b9@mosh-cache-dir uy5b9@mosh-cache-dir) (set! uy64f@file-options-spec (lambda (uy6c8@x) uy6c8@x)) (set! uy6db@uy64f@file-options-spec uy64f@file-options-spec) (void))
(begin (set! uy6e1@current-primitive-locations (unspecified)) (set! uy6e3@mutable? (unspecified)) (set! uy6e5@rewriter (unspecified)) (set! uy6e7@expanded->core (unspecified)) (set! uy6e9@compile-core-expr (unspecified)) (set! uy6eb@pretty-print (unspecified)) (set! uy6ed@compile-core-expr-to-port (unspecified)) (set! uy6e1@current-primitive-locations (uy6d9@uy5b7@make-parameter (lambda (uy6ee@x) '#f) (lambda (uy6f0@p) uy6f0@p))) (set! uy72c@uy6e1@current-primitive-locations uy6e1@current-primitive-locations) (set! uy6e3@mutable? (lambda (uy6f2@x) (or (pair? uy6f2@x) (vector? uy6f2@x) (hashtable? uy6f2@x)))) (set! uy72d@uy6e3@mutable? uy6e3@mutable?) (set! uy6e5@rewriter (lambda (uy6f4@quote-hack?) (letrec* ((uy6f7@f (lambda (uy6f8@x) (if (pair? uy6f8@x) (let ((uy6fa@t (car uy6f8@x))) (if (memv uy6fa@t '(quote)) (if (and uy6f4@quote-hack? (uy6e3@mutable? (cadr uy6f8@x))) (let ((uy6fc@g (gensym))) (begin (set-symbol-value! uy6fc@g (cadr uy6f8@x)) uy6fc@g)) uy6f8@x) (if (memv uy6fa@t '(case-lambda)) (cons 'case-lambda (map (lambda (uy6fe@x) (cons (car uy6fe@x) (map uy6f7@f (cdr uy6fe@x)))) (cdr uy6f8@x))) (if (memv uy6fa@t '(lambda)) (cons* 'lambda (cadr uy6f8@x) (map uy6f7@f (cddr uy6f8@x))) (if (memv uy6fa@t '(letrec)) (let ((uy700@bindings (cadr uy6f8@x)) (uy701@body* (cddr uy6f8@x))) (let ((uy704@lhs* (map car uy700@bindings)) (uy705@rhs* (map cadr uy700@bindings))) (cons* 'letrec (map list uy704@lhs* (map uy6f7@f uy705@rhs*)) (map uy6f7@f uy701@body*)))) (if (memv uy6fa@t '(letrec*)) (let ((uy708@bindings (cadr uy6f8@x)) (uy709@body* (cddr uy6f8@x))) (let ((uy70c@lhs* (map car uy708@bindings)) (uy70d@rhs* (map cadr uy708@bindings))) (cons* 'letrec* (map list uy70c@lhs* (map uy6f7@f uy70d@rhs*)) (map uy6f7@f uy709@body*)))) (if (memv uy6fa@t '(library-letrec*)) (let ((uy710@name (cadr uy6f8@x)) (uy711@x (cdr uy6f8@x))) (let ((uy714@bindings (cadr uy711@x)) (uy715@body* (cddr uy711@x))) (let ((uy718@lhs* (map car uy714@bindings)) (uy719@lhs** (map cadr uy714@bindings)) (uy71a@rhs* (map caddr uy714@bindings))) (cons* 'library-letrec* uy710@name (map list uy718@lhs* uy719@lhs** (map uy6f7@f uy71a@rhs*)) (map uy6f7@f uy715@body*))))) (if (memv uy6fa@t '(begin)) (cons 'begin (map uy6f7@f (cdr uy6f8@x))) (if (memv uy6fa@t '(set!)) (list 'set! (cadr uy6f8@x) (uy6f7@f (caddr uy6f8@x))) (if (memv uy6fa@t '(primitive)) (let ((uy71e@op (cadr uy6f8@x))) (let ((uy720@t ((uy6e1@current-primitive-locations) uy71e@op))) (if uy720@t ((lambda (uy722@loc) uy722@loc) uy720@t) uy71e@op))) (if (memv uy6fa@t '(define)) uy6f8@x (if (list? uy6f8@x) (map uy6f7@f uy6f8@x) (error 'rewrite '"invalid form ~s ~s" uy6f8@x (list? uy6f8@x)))))))))))))) uy6f8@x)))) uy6f7@f))) (set! uy72e@uy6e5@rewriter uy6e5@rewriter) (set! uy6e7@expanded->core (lambda (uy724@x) ((uy6e5@rewriter '#f) uy724@x))) (set! uy72f@uy6e7@expanded->core uy6e7@expanded->core) (set! uy6e9@compile-core-expr (lambda (uy726@x) ((uy6e5@rewriter '#f) uy726@x))) (set! uy730@uy6e9@compile-core-expr uy6e9@compile-core-expr) (set! uy6eb@pretty-print write) (set! uy731@uy6eb@pretty-print uy6eb@pretty-print) (set! uy6ed@compile-core-expr-to-port (lambda (uy728@x uy729@p) (uy6eb@pretty-print ((uy6e5@rewriter '#f) uy728@x) uy729@p))) (set! uy732@uy6ed@compile-core-expr-to-port uy6ed@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! uy781@make-collection (unspecified)) (set! uy783@current-library-collection (unspecified)) (set! uy785@rp (unspecified)) (set! uy78f@library? (unspecified)) (set! uy791@library-id (unspecified)) (set! uy793@set-library-id! (unspecified)) (set! uy795@library-name (unspecified)) (set! uy797@set-library-name! (unspecified)) (set! uy799@library-version (unspecified)) (set! uy79b@set-library-version! (unspecified)) (set! uy79d@library-imp* (unspecified)) (set! uy79f@set-library-imp*! (unspecified)) (set! uy7a1@library-vis* (unspecified)) (set! uy7a3@set-library-vis*! (unspecified)) (set! uy7a5@library-inv* (unspecified)) (set! uy7a7@set-library-inv*! (unspecified)) (set! uy7a9@library-subst (unspecified)) (set! uy7ab@set-library-subst! (unspecified)) (set! uy7ad@library-env (unspecified)) (set! uy7af@set-library-env! (unspecified)) (set! uy7b1@library-visit-state (unspecified)) (set! uy7b3@set-library-visit-state! (unspecified)) (set! uy7b5@library-invoke-state (unspecified)) (set! uy7b7@set-library-invoke-state! (unspecified)) (set! uy7b9@library-visit-code (unspecified)) (set! uy7bb@set-library-visit-code! (unspecified)) (set! uy7bd@library-invoke-code (unspecified)) (set! uy7bf@set-library-invoke-code! (unspecified)) (set! uy7c1@library-visible? (unspecified)) (set! uy7c3@set-library-visible?! (unspecified)) (set! uy7c5@library-source-file-name (unspecified)) (set! uy7c7@set-library-source-file-name! (unspecified)) (set! uy7c9@dummy (unspecified)) (set! uy7cb@find-dependencies (unspecified)) (set! uy7cd@find-library-by (unspecified)) (set! uy7cf@library-path (unspecified)) (set! uy7d1@library-extensions (unspecified)) (set! uy7d3@library-name->file-name (unspecified)) (set! uy7d5@file-locator (unspecified)) (set! uy7d7@serialize-all (unspecified)) (set! uy7d9@current-precompiled-library-loader (unspecified)) (set! uy7db@try-load-from-file (unspecified)) (set! uy7dd@library-loader (unspecified)) (set! uy7df@current-library-expander (unspecified)) (set! uy7e1@external-pending-libraries (unspecified)) (set! uy7e3@find-external-library (unspecified)) (set! uy7e5@find-library-by-name (unspecified)) (set! uy7e7@library-exists? (unspecified)) (set! uy7e9@find-library-by-spec/die (unspecified)) (set! uy7eb@label->binding-table (unspecified)) (set! uy7ed@install-library-record (unspecified)) (set! uy7ef@install-library (unspecified)) (set! uy7f1@imported-label->binding (unspecified)) (set! uy7f3@invoke-library (unspecified)) (set! uy7f5@visit-library (unspecified)) (set! uy7f7@invoke-library-by-spec (unspecified)) (set! uy7f9@installed-libraries (unspecified)) (set! uy7fb@library-spec (unspecified)) (set! uy781@make-collection (lambda () (let ((uy7fc@set '())) (letrec* ((uy7ff@set-cons (lambda (uy804@x uy805@ls) (if (memq uy804@x uy805@ls) uy805@ls (cons uy804@x uy805@ls))))) (lambda uy802 (let ((uy803 (length uy802))) (if (= uy803 '0) (apply (lambda () uy7fc@set) uy802) (if (= uy803 '1) (apply (lambda (uy800@x) (set! uy7fc@set (uy7ff@set-cons uy800@x uy7fc@set))) uy802) (error 'apply '"invalid arg count"))))))))) (set! uy970@uy781@make-collection uy781@make-collection) (set! uy783@current-library-collection (uy6d9@uy5b7@make-parameter (uy781@make-collection) (lambda (uy808@x) (begin (if (not (procedure? uy808@x)) (assertion-violation 'current-library-collection '"not a procedure" uy808@x) (void)) uy808@x)))) (set! uy971@uy783@current-library-collection uy783@current-library-collection) (set! uy785@rp (uy6d6@uy5b1@make-record-printer 'library (lambda (uy80a@x uy80b@p uy80c@wr) (begin (if (not (uy78f@library? uy80a@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (uy799@library-version uy80a@x)) (uy795@library-name uy80a@x) (append (uy795@library-name uy80a@x) (list (uy799@library-version uy80a@x))))) uy80b@p))))) (set! uy972@uy785@rp uy785@rp) (set! uy78f@library? (lambda (uy810@x) (and (simple-struct? uy810@x) (eq? (simple-struct-name uy810@x) 'library)))) (set! uy973@uy78f@library? uy78f@library?) (set! uy791@library-id (lambda (uy812@x) (simple-struct-ref uy812@x '0))) (set! uy974@uy791@library-id uy791@library-id) (set! uy793@set-library-id! (lambda (uy814@x uy815@val) (simple-struct-set! uy814@x '0 uy815@val))) (set! uy975@uy793@set-library-id! uy793@set-library-id!) (set! uy795@library-name (lambda (uy818@x) (simple-struct-ref uy818@x '1))) (set! uy976@uy795@library-name uy795@library-name) (set! uy797@set-library-name! (lambda (uy81a@x uy81b@val) (simple-struct-set! uy81a@x '1 uy81b@val))) (set! uy977@uy797@set-library-name! uy797@set-library-name!) (set! uy799@library-version (lambda (uy81e@x) (simple-struct-ref uy81e@x '2))) (set! uy978@uy799@library-version uy799@library-version) (set! uy79b@set-library-version! (lambda (uy820@x uy821@val) (simple-struct-set! uy820@x '2 uy821@val))) (set! uy979@uy79b@set-library-version! uy79b@set-library-version!) (set! uy79d@library-imp* (lambda (uy824@x) (simple-struct-ref uy824@x '3))) (set! uy97a@uy79d@library-imp* uy79d@library-imp*) (set! uy79f@set-library-imp*! (lambda (uy826@x uy827@val) (simple-struct-set! uy826@x '3 uy827@val))) (set! uy97b@uy79f@set-library-imp*! uy79f@set-library-imp*!) (set! uy7a1@library-vis* (lambda (uy82a@x) (simple-struct-ref uy82a@x '4))) (set! uy97c@uy7a1@library-vis* uy7a1@library-vis*) (set! uy7a3@set-library-vis*! (lambda (uy82c@x uy82d@val) (simple-struct-set! uy82c@x '4 uy82d@val))) (set! uy97d@uy7a3@set-library-vis*! uy7a3@set-library-vis*!) (set! uy7a5@library-inv* (lambda (uy830@x) (simple-struct-ref uy830@x '5))) (set! uy97e@uy7a5@library-inv* uy7a5@library-inv*) (set! uy7a7@set-library-inv*! (lambda (uy832@x uy833@val) (simple-struct-set! uy832@x '5 uy833@val))) (set! uy97f@uy7a7@set-library-inv*! uy7a7@set-library-inv*!) (set! uy7a9@library-subst (lambda (uy836@x) (simple-struct-ref uy836@x '6))) (set! uy980@uy7a9@library-subst uy7a9@library-subst) (set! uy7ab@set-library-subst! (lambda (uy838@x uy839@val) (simple-struct-set! uy838@x '6 uy839@val))) (set! uy981@uy7ab@set-library-subst! uy7ab@set-library-subst!) (set! uy7ad@library-env (lambda (uy83c@x) (simple-struct-ref uy83c@x '7))) (set! uy982@uy7ad@library-env uy7ad@library-env) (set! uy7af@set-library-env! (lambda (uy83e@x uy83f@val) (simple-struct-set! uy83e@x '7 uy83f@val))) (set! uy983@uy7af@set-library-env! uy7af@set-library-env!) (set! uy7b1@library-visit-state (lambda (uy842@x) (simple-struct-ref uy842@x '8))) (set! uy984@uy7b1@library-visit-state uy7b1@library-visit-state) (set! uy7b3@set-library-visit-state! (lambda (uy844@x uy845@val) (simple-struct-set! uy844@x '8 uy845@val))) (set! uy985@uy7b3@set-library-visit-state! uy7b3@set-library-visit-state!) (set! uy7b5@library-invoke-state (lambda (uy848@x) (simple-struct-ref uy848@x '9))) (set! uy986@uy7b5@library-invoke-state uy7b5@library-invoke-state) (set! uy7b7@set-library-invoke-state! (lambda (uy84a@x uy84b@val) (simple-struct-set! uy84a@x '9 uy84b@val))) (set! uy987@uy7b7@set-library-invoke-state! uy7b7@set-library-invoke-state!) (set! uy7b9@library-visit-code (lambda (uy84e@x) (simple-struct-ref uy84e@x '10))) (set! uy988@uy7b9@library-visit-code uy7b9@library-visit-code) (set! uy7bb@set-library-visit-code! (lambda (uy850@x uy851@val) (simple-struct-set! uy850@x '10 uy851@val))) (set! uy989@uy7bb@set-library-visit-code! uy7bb@set-library-visit-code!) (set! uy7bd@library-invoke-code (lambda (uy854@x) (simple-struct-ref uy854@x '11))) (set! uy98a@uy7bd@library-invoke-code uy7bd@library-invoke-code) (set! uy7bf@set-library-invoke-code! (lambda (uy856@x uy857@val) (simple-struct-set! uy856@x '11 uy857@val))) (set! uy98b@uy7bf@set-library-invoke-code! uy7bf@set-library-invoke-code!) (set! uy7c1@library-visible? (lambda (uy85a@x) (simple-struct-ref uy85a@x '12))) (set! uy98c@uy7c1@library-visible? uy7c1@library-visible?) (set! uy7c3@set-library-visible?! (lambda (uy85c@x uy85d@val) (simple-struct-set! uy85c@x '12 uy85d@val))) (set! uy98d@uy7c3@set-library-visible?! uy7c3@set-library-visible?!) (set! uy7c5@library-source-file-name (lambda (uy860@x) (simple-struct-ref uy860@x '13))) (set! uy98e@uy7c5@library-source-file-name uy7c5@library-source-file-name) (set! uy7c7@set-library-source-file-name! (lambda (uy862@x uy863@val) (simple-struct-set! uy862@x '13 uy863@val))) (set! uy98f@uy7c7@set-library-source-file-name! uy7c7@set-library-source-file-name!) (set! uy7c9@dummy '3) (set! uy990@uy7c9@dummy uy7c9@dummy) (set! uy7cb@find-dependencies (lambda (uy866@ls) (if (null? uy866@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! uy991@uy7cb@find-dependencies uy7cb@find-dependencies) (set! uy7cd@find-library-by (lambda (uy868@pred) (let uy86c@f ((uy86a@ls ((uy783@current-library-collection)))) (if (null? uy86a@ls) '#f (if (uy868@pred (car uy86a@ls)) (car uy86a@ls) (uy86c@f (cdr uy86a@ls))))))) (set! uy992@uy7cd@find-library-by uy7cd@find-library-by) (set! uy7cf@library-path (uy6d9@uy5b7@make-parameter '(".") (lambda (uy86e@x) (if (and (list? uy86e@x) (for-all string? uy86e@x)) (map (lambda (uy870@x) uy870@x) uy86e@x) (assertion-violation 'library-path '"not a list of strings" uy86e@x))))) (set! uy993@uy7cf@library-path uy7cf@library-path) (set! uy7d1@library-extensions (uy6d9@uy5b7@make-parameter '(".sls" ".ss" ".scm") (lambda (uy872@x) (if (and (list? uy872@x) (for-all string? uy872@x)) (map (lambda (uy874@x) uy874@x) uy872@x) (assertion-violation 'library-extensions '"not a list of strings" uy872@x))))) (set! uy994@uy7d1@library-extensions uy7d1@library-extensions) (set! uy7d3@library-name->file-name (lambda (uy876@x) (call-with-values (lambda () (open-string-output-port)) (lambda (uy87c@uy879 uy87d@uy87b) (let ((uy880@extract uy87d@uy87b) (uy881@p uy87c@uy879)) (letrec* ((uy885@display-hex (lambda (uy88e@n) (if (<= '0 uy88e@n '9) (display uy88e@n uy881@p) (display (integer->char (+ (char->integer '#\a) (- uy88e@n '10))) uy881@p))))) (begin (let uy888@f ((uy886@ls uy876@x)) (if (not (null? uy886@ls)) (begin (display '"/" uy881@p) (for-each (lambda (uy88a@c) (if (or (char<=? '#\a uy88a@c '#\z) (char<=? '#\A uy88a@c '#\Z) (char<=? '#\0 uy88a@c '#\9) (memv uy88a@c '(#\- #\. #\_ #\~))) (display uy88a@c uy881@p) (begin (display '"%" uy881@p) (let ((uy88c@n (char->integer uy88a@c))) (begin (uy885@display-hex (quotient uy88c@n '16)) (uy885@display-hex (remainder uy88c@n '16))))))) (string->list (symbol->string (car uy886@ls)))) (uy888@f (cdr uy886@ls))) (void))) (uy880@extract)))))))) (set! uy995@uy7d3@library-name->file-name uy7d3@library-name->file-name) (set! uy7d5@file-locator (uy6d9@uy5b7@make-parameter (lambda (uy890@x) (let ((uy892@str (uy7d3@library-name->file-name uy890@x))) (let uy89a@f ((uy894@ls (uy7cf@library-path)) (uy895@exts (uy7d1@library-extensions)) (uy896@failed-list '())) (if (null? uy894@ls) (letrec* ((uy8a4@uy89f (make-record-type-descriptor '&library-resolution &condition-rtd 'uy8a2 '#f '#f '#((immutable library) (immutable files)))) (uy8a6@uy8a1 '#f) (uy8a8@uy8a0 (make-record-constructor-descriptor uy8a4@uy89f &condition-rcd uy8a6@uy8a1)) (uy8ab@uy89e (record-predicate uy8a4@uy89f)) (uy8ad@make-library-resolution-condition (record-constructor uy8a8@uy8a0)) (uy8af@uy89c (record-accessor uy8a4@uy89f '0)) (uy8b1@uy89d (record-accessor uy8a4@uy89f '1)) (uy8b3@library-resolution-condition? (condition-predicate uy8a4@uy89f)) (uy8b5@condition-library (condition-accessor uy8a4@uy89f uy8af@uy89c)) (uy8b7@condition-files (condition-accessor uy8a4@uy89f uy8b1@uy89d))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (uy8ad@make-library-resolution-condition uy890@x (reverse uy896@failed-list))))) (if (null? uy895@exts) (uy89a@f (cdr uy894@ls) (uy7d1@library-extensions) uy896@failed-list) (let ((uy8b8@name (string-append (car uy894@ls) uy892@str (car uy895@exts)))) (if (file-exists? uy8b8@name) uy8b8@name (uy89a@f uy894@ls (cdr uy895@exts) (cons uy8b8@name uy896@failed-list))))))))) (lambda (uy8ba@f) (if (procedure? uy8ba@f) uy8ba@f (assertion-violation 'file-locator '"not a procedure" uy8ba@f))))) (set! uy996@uy7d5@file-locator uy7d5@file-locator) (set! uy7d7@serialize-all (lambda (uy8bc@serialize uy8bd@compile) (letrec* ((uy8c1@library-desc (lambda (uy8c4@x) (list (uy791@library-id uy8c4@x) (uy795@library-name uy8c4@x))))) (for-each (lambda (uy8c2@x) (if (uy7c5@library-source-file-name uy8c2@x) (uy8bc@serialize (uy7c5@library-source-file-name uy8c2@x) (list (uy791@library-id uy8c2@x) (uy795@library-name uy8c2@x) (uy799@library-version uy8c2@x) (map uy8c1@library-desc (uy79d@library-imp* uy8c2@x)) (map uy8c1@library-desc (uy7a1@library-vis* uy8c2@x)) (map uy8c1@library-desc (uy7a5@library-inv* uy8c2@x)) (uy7a9@library-subst uy8c2@x) (uy7ad@library-env uy8c2@x) (uy8bd@compile (uy7b9@library-visit-code uy8c2@x)) (uy8bd@compile (uy7bd@library-invoke-code uy8c2@x)) (uy7c1@library-visible? uy8c2@x))) (void))) ((uy783@current-library-collection)))))) (set! uy997@uy7d7@serialize-all uy7d7@serialize-all) (set! uy7d9@current-precompiled-library-loader (uy6d9@uy5b7@make-parameter (lambda (uy8c6@filename uy8c7@sk) '#f))) (set! uy998@uy7d9@current-precompiled-library-loader uy7d9@current-precompiled-library-loader) (set! uy7db@try-load-from-file (lambda (uy8ca@filename) ((uy7d9@current-precompiled-library-loader) uy8ca@filename (lambda uy8f0 (let ((uy8f1 (length uy8f0))) (if (= uy8f1 '11) (apply (lambda (uy8cc@id uy8cd@name uy8ce@ver uy8cf@imp* uy8d0@vis* uy8d1@inv* uy8d2@exp-subst uy8d3@exp-env uy8d4@visit-proc uy8d5@invoke-proc uy8d6@visible?) (let uy8e4@f ((uy8e2@deps (append uy8cf@imp* uy8d0@vis* uy8d1@inv*))) (if (null? uy8e2@deps) (begin (uy7ef@install-library uy8cc@id uy8cd@name uy8ce@ver uy8cf@imp* uy8d0@vis* uy8d1@inv* uy8d2@exp-subst uy8d3@exp-env uy8d4@visit-proc uy8d5@invoke-proc '#f '#f uy8d6@visible? '#f) '#t) (let ((uy8e6@d (car uy8e2@deps))) (let ((uy8e8@label (car uy8e6@d)) (uy8e9@dname (cadr uy8e6@d))) (let ((uy8ec@l (uy7e5@find-library-by-name uy8e9@dname))) (if (and (uy78f@library? uy8ec@l) (eq? uy8e8@label (uy791@library-id uy8ec@l))) (uy8e4@f (cdr uy8e2@deps)) (begin (if uy6d3@uy5ab@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" uy8cd@name uy8e9@dname uy8ca@filename) (void)) '#f)))))))) uy8f0) (if (>= uy8f1 '0) (apply (lambda uy8ee@others '#f) uy8f0) (error 'apply '"invalid arg count")))))))) (set! uy999@uy7db@try-load-from-file uy7db@try-load-from-file) (set! uy7dd@library-loader (uy6d9@uy5b7@make-parameter (lambda (uy8f2@x) (let ((uy8f4@file-name ((uy7d5@file-locator) uy8f2@x))) (if (not uy8f4@file-name) (assertion-violation '#f '"cannot file library" uy8f2@x) (or (uy7db@try-load-from-file uy8f4@file-name) ((uy7df@current-library-expander) (uy6d8@uy5b5@read-library-source-file uy8f4@file-name) uy8f4@file-name (lambda (uy8f6@name) (if (not (fast-equal? uy8f6@name uy8f2@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (uy8fc@uy8f9 uy8fd@uy8fb) (let ((uy900@e uy8fd@uy8fb) (uy901@p uy8fc@uy8f9)) (begin (display '"expected to find library " uy901@p) (write uy8f2@x uy901@p) (display '" in file " uy901@p) (display uy8f4@file-name uy901@p) (display '", found " uy901@p) (write uy8f6@name uy901@p) (display '" instead" uy901@p) (uy900@e)))))) (void)))))))) (lambda (uy904@f) (if (procedure? uy904@f) uy904@f (assertion-violation 'library-locator '"not a procedure" uy904@f))))) (set! uy99a@uy7dd@library-loader uy7dd@library-loader) (set! uy7df@current-library-expander (uy6d9@uy5b7@make-parameter (lambda (uy906@x) (assertion-violation 'library-expander '"not initialized")) (lambda (uy908@f) (if (procedure? uy908@f) uy908@f (assertion-violation 'library-expander '"not a procedure" uy908@f))))) (set! uy99b@uy7df@current-library-expander uy7df@current-library-expander) (set! uy7e1@external-pending-libraries (uy6d9@uy5b7@make-parameter '())) (set! uy99c@uy7e1@external-pending-libraries uy7e1@external-pending-libraries) (set! uy7e3@find-external-library (lambda (uy90a@name) (begin (if (member uy90a@name (uy7e1@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" uy90a@name) (void)) (let ((uy910@uy90d uy7e1@external-pending-libraries) (uy911@uy90f (cons uy90a@name (uy7e1@external-pending-libraries)))) (let ((uy914@swap (lambda () (let ((uy916@t (uy910@uy90d))) (begin (uy910@uy90d uy911@uy90f) (set! uy911@uy90f uy916@t)))))) (dynamic-wind uy914@swap (lambda () (begin ((uy7dd@library-loader) uy90a@name) (or (uy7cd@find-library-by (lambda (uy918@x) (fast-equal? (uy795@library-name uy918@x) uy90a@name))) (assertion-violation '#f '"handling external library did not yield the correct library" uy90a@name)))) uy914@swap)))))) (set! uy99d@uy7e3@find-external-library uy7e3@find-external-library) (set! uy7e5@find-library-by-name (lambda (uy91a@name) (or (uy7cd@find-library-by (lambda (uy91c@x) (fast-equal? (uy795@library-name uy91c@x) uy91a@name))) (uy7e3@find-external-library uy91a@name)))) (set! uy99e@uy7e5@find-library-by-name uy7e5@find-library-by-name) (set! uy7e7@library-exists? (lambda (uy91e@name) (and (uy7cd@find-library-by (lambda (uy920@x) (fast-equal? (uy795@library-name uy920@x) uy91e@name))) '#t))) (set! uy99f@uy7e7@library-exists? uy7e7@library-exists?) (set! uy7e9@find-library-by-spec/die (lambda (uy922@spec) (let ((uy924@id (car uy922@spec))) (or (uy7cd@find-library-by (lambda (uy926@x) (eq? uy924@id (uy791@library-id uy926@x)))) (assertion-violation '#f '"cannot find library with required spec" uy922@spec))))) (set! uy9a0@uy7e9@find-library-by-spec/die uy7e9@find-library-by-spec/die) (set! uy7eb@label->binding-table (make-eq-hashtable)) (set! uy9a1@uy7eb@label->binding-table uy7eb@label->binding-table) (set! uy7ed@install-library-record (lambda (uy928@lib) (begin (let ((uy92a@exp-env (uy7ad@library-env uy928@lib))) (for-each (lambda (uy92c@x) (let ((uy92e@label (car uy92c@x)) (uy92f@binding (cdr uy92c@x))) (let ((uy932@binding (let ((uy934@t (car uy92f@binding))) (if (memv uy934@t '(global)) (cons 'global (cons uy928@lib (cdr uy92f@binding))) (if (memv uy934@t '(global-macro)) (cons 'global-macro (cons uy928@lib (cdr uy92f@binding))) (if (memv uy934@t '(global-macro!)) (cons 'global-macro! (cons uy928@lib (cdr uy92f@binding))) uy92f@binding)))))) (begin (if (hashtable-ref uy7eb@label->binding-table uy92e@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" uy92e@label (hashtable-ref uy7eb@label->binding-table uy92e@label '#f) uy932@binding) (exit)) (void)) (hashtable-set! uy7eb@label->binding-table uy92e@label uy932@binding))))) uy92a@exp-env)) ((uy783@current-library-collection) uy928@lib)))) (set! uy9a2@uy7ed@install-library-record uy7ed@install-library-record) (set! uy7ef@install-library (lambda (uy936@id uy937@name uy938@ver uy939@imp* uy93a@vis* uy93b@inv* uy93c@exp-subst uy93d@exp-env uy93e@visit-proc uy93f@invoke-proc uy940@visit-code uy941@invoke-code uy942@visible? uy943@source-file-name) (let ((uy952@imp-lib* (map uy7e9@find-library-by-spec/die uy939@imp*)) (uy953@vis-lib* (map uy7e9@find-library-by-spec/die uy93a@vis*)) (uy954@inv-lib* (map uy7e9@find-library-by-spec/die uy93b@inv*))) (begin (if (not (and (symbol? uy936@id) (list? uy937@name) (list? uy938@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" uy936@id uy937@name uy938@ver) (void)) (if (uy7e7@library-exists? uy937@name) (assertion-violation 'install-library '"library is already installed" uy937@name) (void)) (let ((uy958@lib (make-simple-struct 'library '15 (list uy936@id uy937@name uy938@ver uy952@imp-lib* uy953@vis-lib* uy954@inv-lib* uy93c@exp-subst uy93d@exp-env uy93e@visit-proc uy93f@invoke-proc uy940@visit-code uy941@invoke-code uy942@visible? uy943@source-file-name)))) (uy7ed@install-library-record uy958@lib)))))) (set! uy9a3@uy7ef@install-library uy7ef@install-library) (set! uy7f1@imported-label->binding (lambda (uy95a@lab) (hashtable-ref uy7eb@label->binding-table uy95a@lab '#f))) (set! uy9a4@uy7f1@imported-label->binding uy7f1@imported-label->binding) (set! uy7f3@invoke-library (lambda (uy95c@lib) (let ((uy95e@invoke (uy7b5@library-invoke-state uy95c@lib))) (if (procedure? uy95e@invoke) (begin (uy7b7@set-library-invoke-state! uy95c@lib (lambda () (assertion-violation 'invoke '"circularity detected" uy95c@lib))) (for-each uy7f3@invoke-library (uy7a5@library-inv* uy95c@lib)) (uy7b7@set-library-invoke-state! uy95c@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" uy95c@lib))) (uy95e@invoke) (uy7b7@set-library-invoke-state! uy95c@lib '#t)) (void))))) (set! uy9a5@uy7f3@invoke-library uy7f3@invoke-library) (set! uy7f5@visit-library (lambda (uy960@lib) (let ((uy962@visit (uy7b1@library-visit-state uy960@lib))) (if (procedure? uy962@visit) (begin (uy7b3@set-library-visit-state! uy960@lib (lambda () (assertion-violation 'visit '"circularity detected" uy960@lib))) (for-each uy7f3@invoke-library (uy7a1@library-vis* uy960@lib)) (uy7b3@set-library-visit-state! uy960@lib (lambda () (assertion-violation 'invoke '"first visit did not return" uy960@lib))) (uy962@visit) (uy7b3@set-library-visit-state! uy960@lib '#t)) (void))))) (set! uy9a6@uy7f5@visit-library uy7f5@visit-library) (set! uy7f7@invoke-library-by-spec (lambda (uy964@spec) (uy7f3@invoke-library (uy7e9@find-library-by-spec/die uy964@spec)))) (set! uy9a7@uy7f7@invoke-library-by-spec uy7f7@invoke-library-by-spec) (set! uy7f9@installed-libraries (lambda uy96c (let ((uy96d (length uy96c))) (if (= uy96d '1) (apply (lambda (uy966@all?) (let uy96a@f ((uy968@ls ((uy783@current-library-collection)))) (if (null? uy968@ls) '() (if (or uy966@all? (uy7c1@library-visible? (car uy968@ls))) (cons (car uy968@ls) (uy96a@f (cdr uy968@ls))) (uy96a@f (cdr uy968@ls)))))) uy96c) (if (= uy96d '0) (apply (lambda () (uy7f9@installed-libraries '#f)) uy96c) (error 'apply '"invalid arg count")))))) (set! uy9a8@uy7f9@installed-libraries uy7f9@installed-libraries) (set! uy7fb@library-spec (lambda (uy96e@x) (begin (if (not (uy78f@library? uy96e@x)) (assertion-violation 'library-spec '"not a library" uy96e@x) (void)) (list (uy791@library-id uy96e@x) (uy795@library-name uy96e@x) (uy799@library-version uy96e@x))))) (set! uy9a9@uy7fb@library-spec uy7fb@library-spec) (void))
(begin (set! uy9ad@build-global-define (unspecified)) (set! uya1e@build-lambda (unspecified)) (set! uya20@build-case-lambda (unspecified)) (set! uya4e@build-sequence (unspecified)) (set! uya50@build-void (unspecified)) (set! uya52@build-letrec (unspecified)) (set! uya54@build-let (unspecified)) (set! uya56@build-named-let (unspecified)) (set! uya58@build-letrec* (unspecified)) (set! uya5a@build-library-letrec* (unspecified)) (set! uya5c@build-receive (unspecified)) (set! uy9ad@build-global-define (lambda (uya5d@x) (uya50@build-void))) (set! uyaeb@uy9ad@build-global-define uy9ad@build-global-define) (set! uya1e@build-lambda (lambda (uya5f@ae uya60@vars uya61@exp) (list 'lambda uya60@vars uya61@exp))) (set! uyaec@uya1e@build-lambda uya1e@build-lambda) (set! uya20@build-case-lambda (lambda (uya65@ae uya66@vars* uya67@exp*) (letrec* ((uya6c@build-error (lambda (uyaa3@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (uya6e@build-pred (lambda (uya8b@ae uya8c@n uya8d@vars) (call-with-values (lambda () (let uya99@f ((uya95@vars uya8d@vars) (uya96@count '0)) (if (pair? uya95@vars) (uya99@f (cdr uya95@vars) (+ uya96@count '1)) (if (null? uya95@vars) (values uya96@count '=) (values uya96@count '>=))))) (lambda (uya9b@uya92 uya9c@uya94) (let ((uya9f@pred uya9c@uya94) (uyaa0@count uya9b@uya92)) (list (list 'primitive uya9f@pred) uya8c@n (list 'quote uyaa0@count))))))) (uya70@build-apply (lambda (uya83@ae uya84@g uya85@vars uya86@exp) (list '(primitive apply) (uya1e@build-lambda uya83@ae uya85@vars uya86@exp) uya84@g))) (uya72@expand-case-lambda (lambda (uya73@ae uya74@vars uya75@exp*) (let ((uya79@g (gensym)) (uya7a@n (gensym))) (list 'lambda uya79@g (uya54@build-let uya73@ae (list uya7a@n) (list (list '(primitive length) uya79@g)) (let uya81@f ((uya7d@vars* uya66@vars*) (uya7e@exp* uya75@exp*)) (if (null? uya7d@vars*) (uya6c@build-error uya73@ae) (list 'if (uya6e@build-pred uya73@ae uya7a@n (car uya7d@vars*)) (uya70@build-apply uya73@ae uya79@g (car uya7d@vars*) (car uya7e@exp*)) (uya81@f (cdr uya7d@vars*) (cdr uya7e@exp*))))))))))) (if (= (length uya67@exp*) '1) (uya1e@build-lambda uya65@ae (car uya66@vars*) (car uya67@exp*)) (uya72@expand-case-lambda uya65@ae uya66@vars* uya67@exp*))))) (set! uyaed@uya20@build-case-lambda uya20@build-case-lambda) (set! uya4e@build-sequence (lambda (uyaa5@ae uyaa6@exps) (let uyaab@loop ((uyaa9@exps uyaa6@exps)) (if (null? (cdr uyaa9@exps)) (car uyaa9@exps) (if (equal? (car uyaa9@exps) (uya50@build-void)) (uyaab@loop (cdr uyaa9@exps)) (cons 'begin uyaa9@exps)))))) (set! uyaee@uya4e@build-sequence uya4e@build-sequence) (set! uya50@build-void (lambda () '((primitive void)))) (set! uyaef@uya50@build-void uya50@build-void) (set! uya52@build-letrec (lambda (uyaad@ae uyaae@vars uyaaf@val-exps uyab0@body-exp) (if (null? uyaae@vars) uyab0@body-exp (list 'letrec (map list uyaae@vars uyaaf@val-exps) uyab0@body-exp)))) (set! uyaf0@uya52@build-letrec uya52@build-letrec) (set! uya54@build-let (lambda (uyab5@ae uyab6@vars uyab7@val-exps uyab8@body-exp) (if (null? uyab6@vars) uyab8@body-exp (list 'let (map list uyab6@vars uyab7@val-exps) uyab8@body-exp)))) (set! uyaf1@uya54@build-let uya54@build-let) (set! uya56@build-named-let (lambda (uyabd@ae uyabe@name uyabf@vars uyac0@val-exps uyac1@body-exp) (list 'let uyabe@name (map list uyabf@vars uyac0@val-exps) uyac1@body-exp))) (set! uyaf2@uya56@build-named-let uya56@build-named-let) (set! uya58@build-letrec* (lambda (uyac7@ae uyac8@vars uyac9@val-exps uyaca@body-exp) (if (null? uyac8@vars) uyaca@body-exp (list 'letrec* (map list uyac8@vars uyac9@val-exps) uyaca@body-exp)))) (set! uyaf3@uya58@build-letrec* uya58@build-letrec*) (set! uya5a@build-library-letrec* (lambda (uyacf@ae uyad0@name uyad1@vars uyad2@locs uyad3@val-exps uyad4@body-exp) (cons 'begin (append (map (lambda (uyadb@var) (cons 'set! (cons uyadb@var '((unspecified))))) uyad1@vars) (append (apply append (map (lambda (uyadd@var uyade@loc uyadf@val-exp) (list (list 'set! uyadd@var uyadf@val-exp) (list 'set! uyade@loc uyadd@var))) uyad1@vars uyad2@locs uyad3@val-exps)) (list uyad4@body-exp)))))) (set! uyaf4@uya5a@build-library-letrec* uya5a@build-library-letrec*) (set! uya5c@build-receive (lambda (uyae3@ae uyae4@vars uyae5@producer uyae6@body*) (begin (display '"************** in ") (cons 'receive (cons uyae4@vars (cons uyae5@producer uyae6@body*)))))) (set! uyaf5@uya5c@build-receive uya5c@build-receive) (void))
(begin (set! uyb04@file-options-macro (unspecified)) (set! uyb06@set-cons (unspecified)) (set! uyb08@set-union (unspecified)) (set! uyb0d@top-mark* (unspecified)) (set! uyb0f@top-marked? (unspecified)) (set! uyb11@gen-lexical (unspecified)) (set! uyb13@gen-global (unspecified)) (set! uyb15@gen-label (unspecified)) (set! uyb17@gen-top-level-label (unspecified)) (set! uyb19@gen-define-label+loc (unspecified)) (set! uyb1b@gen-define-label (unspecified)) (set! uyb25@rib? (unspecified)) (set! uyb27@rib-sym* (unspecified)) (set! uyb29@set-rib-sym*! (unspecified)) (set! uyb2b@rib-mark** (unspecified)) (set! uyb2d@set-rib-mark**! (unspecified)) (set! uyb2f@rib-label* (unspecified)) (set! uyb31@set-rib-label*! (unspecified)) (set! uyb33@rib-sealed/freq (unspecified)) (set! uyb35@set-rib-sealed/freq! (unspecified)) (set! uyb37@rib-cache (unspecified)) (set! uyb39@set-rib-cache! (unspecified)) (set! uyb3b@dummy (unspecified)) (set! uyb3d@make-empty-rib (unspecified)) (set! uyb3f@extend-rib! (unspecified)) (set! uyb41@extend-rib/nc! (unspecified)) (set! uyb43@make-rib-map (unspecified)) (set! uyb45@seal-rib! (unspecified)) (set! uyb47@unseal-rib! (unspecified)) (set! uyb49@make-full-rib (unspecified)) (set! uyb4b@rp (unspecified)) (set! uyb55@stx? (unspecified)) (set! uyb57@stx-expr (unspecified)) (set! uyb59@set-stx-expr! (unspecified)) (set! uyb5b@stx-mark* (unspecified)) (set! uyb5d@set-stx-mark*! (unspecified)) (set! uyb5f@stx-subst* (unspecified)) (set! uyb61@set-stx-subst*! (unspecified)) (set! uyb63@stx-ae* (unspecified)) (set! uyb65@set-stx-ae*! (unspecified)) (set! uyb67@dummy (unspecified)) (set! uyb69@datum->stx (unspecified)) (set! uyb6b@gen-mark (unspecified)) (set! uyb6d@anti-mark (unspecified)) (set! uyb6f@anti-mark? (unspecified)) (set! uyb71@mkstx (unspecified)) (set! uyb73@add-subst (unspecified)) (set! uyb75@add-mark (unspecified)) (set! uyb77@syntax-kind? (unspecified)) (set! uyb79@syntax-vector->list (unspecified)) (set! uyb7b@syntax-pair? (unspecified)) (set! uyb7d@syntax-vector? (unspecified)) (set! uyb7f@syntax-null? (unspecified)) (set! uyb81@syntax-list? (unspecified)) (set! uyb83@syntax-car (unspecified)) (set! uyb85@syntax-cdr (unspecified)) (set! uyb87@syntax->list (unspecified)) (set! uyb89@id? (unspecified)) (set! uyb8b@id->sym (unspecified)) (set! uyb8d@bound-id=? (unspecified)) (set! uyb8f@free-id=? (unspecified)) (set! uyb91@valid-bound-ids? (unspecified)) (set! uyb93@distinct-bound-ids? (unspecified)) (set! uyb95@bound-id-member? (unspecified)) (set! uyb97@self-evaluating? (unspecified)) (set! uyb99@strip-annotations (unspecified)) (set! uyb9b@strip (unspecified)) (set! uyb9d@stx->datum (unspecified)) (set! uyb9f@id->label (unspecified)) (set! uyba1@label->binding (unspecified)) (set! uyba3@make-binding (unspecified)) (set! uyba5@binding-type (unspecified)) (set! uyba7@binding-value (unspecified)) (set! uyba9@raise-unbound-error (unspecified)) (set! uybab@syntax-type (unspecified)) (set! uybb9@sanitize-binding (unspecified)) (set! uybbb@make-variable-transformer (unspecified)) (set! uybbd@variable-transformer? (unspecified)) (set! uybbf@variable-transformer-procedure (unspecified)) (set! uybc1@make-eval-transformer (unspecified)) (set! uyd12@parse-define (unspecified)) (set! uyd14@parse-define-syntax (unspecified)) (set! uyd16@scheme-stx-hashtable (unspecified)) (set! uyd18@scheme-stx (unspecified)) (set! uyd1a@lexical-var (unspecified)) (set! uyd1c@lexical-mutable? (unspecified)) (set! uyd1e@set-lexical-mutable! (unspecified)) (set! uyd20@add-lexical (unspecified)) (set! uyd22@add-lexicals (unspecified)) (set! uyd24@letrec-helper (unspecified)) (set! uyd26@let-transformer (unspecified)) (set! uyd28@letrec-transformer (unspecified)) (set! uyd2a@letrec*-transformer (unspecified)) (set! uyd2c@fluid-let-syntax-transformer (unspecified)) (set! uyd2e@type-descriptor-transformer (unspecified)) (set! uyd30@record-type-descriptor-transformer (unspecified)) (set! uyd32@record-constructor-descriptor-transformer (unspecified)) (set! uyd34@when-macro (unspecified)) (set! uyd36@unless-macro (unspecified)) (set! uyd38@if-transformer (unspecified)) (set! uyd3a@and-transformer (unspecified)) (set! uyd3c@or-transformer (unspecified)) (set! uyd3e@case-macro (unspecified)) (set! uyd40@quote-transformer (unspecified)) (set! uyd42@case-lambda-transformer (unspecified)) (set! uyd44@lambda-transformer (unspecified)) (set! uyd46@bless (unspecified)) (set! uyd48@with-syntax-macro (unspecified)) (set! uyd4a@invalid-fmls-error (unspecified)) (set! uyd4c@let-macro (unspecified)) (set! uyd4e@let-values-macro (unspecified)) (set! uyd50@let*-values-macro (unspecified)) (set! uyd52@trace-lambda-macro (unspecified)) (set! uyd54@trace-define-macro (unspecified)) (set! uyd56@trace-define-syntax-macro (unspecified)) (set! uyd58@trace-let/rec-syntax (unspecified)) (set! uyd5a@trace-let-syntax-macro (unspecified)) (set! uyd5c@trace-letrec-syntax-macro (unspecified)) (set! uyd5e@guard-macro (unspecified)) (set! uyd60@define-enumeration-macro (unspecified)) (set! uyd62@time-macro (unspecified)) (set! uyd64@delay-macro (unspecified)) (set! uyd66@assert-macro (unspecified)) (set! uyd68@endianness-macro (unspecified)) (set! uyd6a@identifier-syntax-macro (unspecified)) (set! uyd6c@do-macro (unspecified)) (set! uyd6e@let*-macro (unspecified)) (set! uyd70@or-macro (unspecified)) (set! uyd72@and-macro (unspecified)) (set! uyd74@cond-macro (unspecified)) (set! uyd76@do-include (unspecified)) (set! uyd78@include-macro (unspecified)) (set! uyd7a@include-into-macro (unspecified)) (set! uyd7c@syntax-rules-macro (unspecified)) (set! uyd7e@quasiquote-macro (unspecified)) (set! uyd80@quasisyntax-macro (unspecified)) (set! uyd82@define-struct-macro (unspecified)) (set! uyd84@define-record-type-macro (unspecified)) (set! uyd86@define-condition-type-macro (unspecified)) (set! uyd88@incorrect-usage-macro (unspecified)) (set! uyd8a@parameterize-macro (unspecified)) (set! uyd8c@foreign-call-transformer (unspecified)) (set! uyd8e@convert-pattern (unspecified)) (set! uyd90@syntax-dispatch (unspecified)) (set! uyd92@ellipsis? (unspecified)) (set! uyd94@underscore? (unspecified)) (set! uyd96@verify-literals (unspecified)) (set! uyd98@syntax-case-transformer (unspecified)) (set! uyd9a@ellipsis-map (unspecified)) (set! uyd9c@syntax-transformer (unspecified)) (set! uyd9e@core-macro-transformer (unspecified)) (set! uyda0@symbol-macro (unspecified)) (set! uyda2@macro-transformer (unspecified)) (set! uyda4@local-macro-transformer (unspecified)) (set! uyda6@do-macro-call (unspecified)) (set! uyda8@chi-macro (unspecified)) (set! uydaa@chi-local-macro (unspecified)) (set! uydac@chi-global-macro (unspecified)) (set! uydae@chi-expr* (unspecified)) (set! uydb0@chi-application (unspecified)) (set! uydb2@chi-expr (unspecified)) (set! uydb4@chi-set! (unspecified)) (set! uydb6@verify-formals (unspecified)) (set! uydb8@chi-lambda-clause (unspecified)) (set! uydba@chi-lambda-clause* (unspecified)) (set! uydbc@chi-defun (unspecified)) (set! uydbe@chi-rhs (unspecified)) (set! uydc0@expand-interaction-rhs*/init* (unspecified)) (set! uydc2@chi-rhs* (unspecified)) (set! uydc4@find-bound=? (unspecified)) (set! uydc6@find-dups (unspecified)) (set! uydc8@chi-internal (unspecified)) (set! uydca@parse-module (unspecified)) (set! uydd4@module-interface? (unspecified)) (set! uydd6@module-interface-first-mark (unspecified)) (set! uydd8@set-module-interface-first-mark! (unspecified)) (set! uydda@module-interface-exp-id-vec (unspecified)) (set! uyddc@set-module-interface-exp-id-vec! (unspecified)) (set! uydde@module-interface-exp-lab-vec (unspecified)) (set! uyde0@set-module-interface-exp-lab-vec! (unspecified)) (set! uyde2@dummy (unspecified)) (set! uyde4@module-interface-exp-id* (unspecified)) (set! uyde6@chi-internal-module (unspecified)) (set! uyde8@chi-body* (unspecified)) (set! uydea@expand-transformer (unspecified)) (set! uydec@parse-exports (unspecified)) (set! uydee@parse-library-name (unspecified)) (set! uydf0@parse-library (unspecified)) (set! uydf2@parse-import-spec* (unspecified)) (set! uydf4@make-top-rib (unspecified)) (set! uydf6@make-collector (unspecified)) (set! uydf8@inv-collector (unspecified)) (set! uydfa@vis-collector (unspecified)) (set! uydfc@imp-collector (unspecified)) (set! uydfe@chi-library-internal (unspecified)) (set! uye00@chi-interaction-expr (unspecified)) (set! uye02@library-body-expander (unspecified)) (set! uye04@core-library-expander (unspecified)) (set! uye06@parse-top-level-program (unspecified)) (set! uye08@top-level-expander (unspecified)) (set! uye0a@rp (unspecified)) (set! uye14@env? (unspecified)) (set! uye16@env-names (unspecified)) (set! uye18@set-env-names! (unspecified)) (set! uye1a@env-labels (unspecified)) (set! uye1c@set-env-labels! (unspecified)) (set! uye1e@env-itc (unspecified)) (set! uye20@set-env-itc! (unspecified)) (set! uye22@dummy (unspecified)) (set! uye24@rp (unspecified)) (set! uye2e@interaction-env? (unspecified)) (set! uye30@interaction-env-rib (unspecified)) (set! uye32@set-interaction-env-rib! (unspecified)) (set! uye34@interaction-env-r (unspecified)) (set! uye36@set-interaction-env-r! (unspecified)) (set! uye38@interaction-env-locs (unspecified)) (set! uye3a@set-interaction-env-locs! (unspecified)) (set! uye3c@dummy (unspecified)) (set! uye3e@interaction-environment-symbols (unspecified)) (set! uye40@environment-bindings (unspecified)) (set! uye42@parse-binding (unspecified)) (set! uye44@environment? (unspecified)) (set! uye46@environment-symbols (unspecified)) (set! uye48@environment (unspecified)) (set! uye4a@null-environment (unspecified)) (set! uye4c@scheme-report-environment (unspecified)) (set! uye4e@expand (unspecified)) (set! uye50@eval (unspecified)) (set! uye52@library-expander (unspecified)) (set! uye54@boot-library-expand (unspecified)) (set! uye56@rev-map-append (unspecified)) (set! uye58@build-exports (unspecified)) (set! uye5a@make-export-subst (unspecified)) (set! uye5c@make-export-env/macros (unspecified)) (set! uye5e@generate-temporaries (unspecified)) (set! uye60@free-identifier=? (unspecified)) (set! uye62@bound-identifier=? (unspecified)) (set! uye64@make-source-condition (unspecified)) (set! uye66@extract-position-condition (unspecified)) (set! uye68@expression-position (unspecified)) (set! uye6a@assertion-error (unspecified)) (set! uye6c@syntax-error (unspecified)) (set! uye6e@syntax-violation* (unspecified)) (set! uye70@syntax-violation (unspecified)) (set! uye72@identifier? (unspecified)) (set! uye74@datum->syntax (unspecified)) (set! uye76@syntax->datum (unspecified)) (set! uye78@ungensym-all (unspecified)) (set! uye7a@compile-r6rs-top-level (unspecified)) (set! uye7c@pre-compile-r6rs-top-level (unspecified)) (set! uye7e@interaction-environment (unspecified)) (set! uye80@top-level-context (unspecified)) (set! uyb04@file-options-macro (lambda (uye81@x) (letrec* ((uye84@valid-option? (lambda (uye8d@x) (and (uyb89@id? uye8d@x) (memq (uyb8b@id->sym uye8d@x) '(no-fail no-create no-truncate)))))) (let ((uye85@t uye81@x)) (let ((uye87@ls/false (uyd90@syntax-dispatch uye85@t '(_ . each-any)))) (if (and uye87@ls/false (apply (lambda (uye89@opt*) (for-all uye84@valid-option? uye89@opt*)) uye87@ls/false)) (apply (lambda (uye8b@opt*) (uyd46@bless (list 'make-file-options (list 'quote uye8b@opt*)))) uye87@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uye85@t))))))) (set! uy280d@uyb04@file-options-macro uyb04@file-options-macro) (set! uyb06@set-cons (lambda (uye8f@x uye90@ls) (if (memq uye8f@x uye90@ls) uye90@ls (cons uye8f@x uye90@ls)))) (set! uy280e@uyb06@set-cons uyb06@set-cons) (set! uyb08@set-union (lambda (uye93@ls1 uye94@ls2) (if (null? uye93@ls1) uye94@ls2 (if (memq (car uye93@ls1) uye94@ls2) (uyb08@set-union (cdr uye93@ls1) uye94@ls2) (cons (car uye93@ls1) (uyb08@set-union (cdr uye93@ls1) uye94@ls2)))))) (set! uy280f@uyb08@set-union uyb08@set-union) (set! uyb0d@top-mark* '(top)) (set! uy2810@uyb0d@top-mark* uyb0d@top-mark*) (set! uyb0f@top-marked? (lambda (uye97@m*) (memq 'top uye97@m*))) (set! uy2811@uyb0f@top-marked? uyb0f@top-marked?) (set! uyb11@gen-lexical (lambda (uye99@sym) (if (symbol? uye99@sym) (gensym uye99@sym) (if (uyb55@stx? uye99@sym) (uyb11@gen-lexical (uyb8b@id->sym uye99@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" uye99@sym))))) (set! uy2812@uyb11@gen-lexical uyb11@gen-lexical) (set! uyb13@gen-global (lambda (uye9b@x) (uyb11@gen-lexical uye9b@x))) (set! uy2813@uyb13@gen-global uyb13@gen-global) (set! uyb15@gen-label (lambda (uye9d@_) (gensym))) (set! uy2814@uyb15@gen-label uyb15@gen-label) (set! uyb17@gen-top-level-label (lambda (uye9f@id uyea0@rib) (letrec* ((uyea4@find (lambda (uyeaf@sym uyeb0@mark* uyeb1@sym* uyeb2@mark** uyeb3@label*) (and (pair? uyeb1@sym*) (if (and (eq? uyeaf@sym (car uyeb1@sym*)) (same-marks? uyeb0@mark* (car uyeb2@mark**))) (car uyeb3@label*) (uyea4@find uyeaf@sym uyeb0@mark* (cdr uyeb1@sym*) (cdr uyeb2@mark**) (cdr uyeb3@label*))))))) (let ((uyea5@sym (uyb8b@id->sym uye9f@id)) (uyea6@mark* (uyb5b@stx-mark* uye9f@id))) (let ((uyea9@sym* (uyb27@rib-sym* uyea0@rib))) (let ((uyeab@t (and (memq uyea5@sym (uyb27@rib-sym* uyea0@rib)) (uyea4@find uyea5@sym uyea6@mark* uyea9@sym* (uyb2b@rib-mark** uyea0@rib) (uyb2f@rib-label* uyea0@rib))))) (if uyeab@t ((lambda (uyead@label) (if (uy9a4@uy7f1@imported-label->binding uyead@label) (gensym) uyead@label)) uyeab@t) (gensym)))))))) (set! uy2815@uyb17@gen-top-level-label uyb17@gen-top-level-label) (set! uyb19@gen-define-label+loc (lambda (uyeb9@id uyeba@rib) (let ((uyebd@t (uye80@top-level-context))) (if uyebd@t ((lambda (uyebf@env) (let ((uyec1@label (uyb17@gen-top-level-label uyeb9@id uyeba@rib)) (uyec2@locs (uye38@interaction-env-locs uyebf@env))) (values uyec1@label (let ((uyec5@t (assq uyec1@label uyec2@locs))) (if uyec5@t (cdr uyec5@t) (let ((uyec7@loc (uyb11@gen-lexical uyeb9@id))) (begin (uye3a@set-interaction-env-locs! uyebf@env (cons (cons uyec1@label uyec7@loc) uyec2@locs)) uyec7@loc))))))) uyebd@t) (values (gensym) (uyb11@gen-lexical uyeb9@id)))))) (set! uy2816@uyb19@gen-define-label+loc uyb19@gen-define-label+loc) (set! uyb1b@gen-define-label (lambda (uyec9@id uyeca@rib) (if (uye80@top-level-context) (uyb17@gen-top-level-label uyec9@id uyeca@rib) (gensym)))) (set! uy2817@uyb1b@gen-define-label uyb1b@gen-define-label) (set! uyb25@rib? (lambda (uyecd@x) (and (simple-struct? uyecd@x) (eq? (simple-struct-name uyecd@x) 'rib)))) (set! uy2818@uyb25@rib? uyb25@rib?) (set! uyb27@rib-sym* (lambda (uyecf@x) (simple-struct-ref uyecf@x '0))) (set! uy2819@uyb27@rib-sym* uyb27@rib-sym*) (set! uyb29@set-rib-sym*! (lambda (uyed1@x uyed2@val) (simple-struct-set! uyed1@x '0 uyed2@val))) (set! uy281a@uyb29@set-rib-sym*! uyb29@set-rib-sym*!) (set! uyb2b@rib-mark** (lambda (uyed5@x) (simple-struct-ref uyed5@x '1))) (set! uy281b@uyb2b@rib-mark** uyb2b@rib-mark**) (set! uyb2d@set-rib-mark**! (lambda (uyed7@x uyed8@val) (simple-struct-set! uyed7@x '1 uyed8@val))) (set! uy281c@uyb2d@set-rib-mark**! uyb2d@set-rib-mark**!) (set! uyb2f@rib-label* (lambda (uyedb@x) (simple-struct-ref uyedb@x '2))) (set! uy281d@uyb2f@rib-label* uyb2f@rib-label*) (set! uyb31@set-rib-label*! (lambda (uyedd@x uyede@val) (simple-struct-set! uyedd@x '2 uyede@val))) (set! uy281e@uyb31@set-rib-label*! uyb31@set-rib-label*!) (set! uyb33@rib-sealed/freq (lambda (uyee1@x) (simple-struct-ref uyee1@x '3))) (set! uy281f@uyb33@rib-sealed/freq uyb33@rib-sealed/freq) (set! uyb35@set-rib-sealed/freq! (lambda (uyee3@x uyee4@val) (simple-struct-set! uyee3@x '3 uyee4@val))) (set! uy2820@uyb35@set-rib-sealed/freq! uyb35@set-rib-sealed/freq!) (set! uyb37@rib-cache (lambda (uyee7@x) (simple-struct-ref uyee7@x '4))) (set! uy2821@uyb37@rib-cache uyb37@rib-cache) (set! uyb39@set-rib-cache! (lambda (uyee9@x uyeea@val) (simple-struct-set! uyee9@x '4 uyeea@val))) (set! uy2822@uyb39@set-rib-cache! uyb39@set-rib-cache!) (set! uyb3b@dummy '3) (set! uy2823@uyb3b@dummy uyb3b@dummy) (set! uyb3d@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! uy2824@uyb3d@make-empty-rib uyb3d@make-empty-rib) (set! uyb3f@extend-rib! (lambda (uyeed@rib uyeee@id uyeef@label) (letrec* ((uyef4@find (lambda (uyf01@sym uyf02@mark* uyf03@sym* uyf04@mark** uyf05@label*) (and (pair? uyf03@sym*) (if (and (eq? uyf01@sym (car uyf03@sym*)) (same-marks? uyf02@mark* (car uyf04@mark**))) uyf05@label* (uyef4@find uyf01@sym uyf02@mark* (cdr uyf03@sym*) (cdr uyf04@mark**) (cdr uyf05@label*))))))) (begin (if (uyb33@rib-sealed/freq uyeed@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" uyeed@rib) (void)) (let ((uyef5@sym (uyb8b@id->sym uyeee@id)) (uyef6@mark* (uyb5b@stx-mark* uyeee@id))) (let ((uyef9@sym* (uyb27@rib-sym* uyeed@rib))) (let ((uyefb@t (and (memq uyef5@sym (uyb27@rib-sym* uyeed@rib)) (uyef4@find uyef5@sym uyef6@mark* uyef9@sym* (uyb2b@rib-mark** uyeed@rib) (uyb2f@rib-label* uyeed@rib))))) (if uyefb@t ((lambda (uyefd@p) (if (not (eq? uyeef@label (car uyefd@p))) (if (uye80@top-level-context) (set-car! uyefd@p uyeef@label) (uye70@syntax-violation '#f '"multiple definitions of identifier" uyeee@id)) (void))) uyefb@t) (begin (if (uyb37@rib-cache uyeed@rib) (hashtable-update! (uyb37@rib-cache uyeed@rib) uyef5@sym (lambda (uyeff@e) (cons (cons uyef6@mark* uyeef@label) uyeff@e)) '()) (void)) (uyb29@set-rib-sym*! uyeed@rib (cons uyef5@sym uyef9@sym*)) (uyb2d@set-rib-mark**! uyeed@rib (cons uyef6@mark* (uyb2b@rib-mark** uyeed@rib))) (uyb31@set-rib-label*! uyeed@rib (cons uyeef@label (uyb2f@rib-label* uyeed@rib)))))))))))) (set! uy2825@uyb3f@extend-rib! uyb3f@extend-rib!) (set! uyb41@extend-rib/nc! (lambda (uyf0b@rib uyf0c@id uyf0d@label) (let ((uyf11@sym (uyb8b@id->sym uyf0c@id)) (uyf12@mark* (uyb5b@stx-mark* uyf0c@id))) (let ((uyf15@sym* (uyb27@rib-sym* uyf0b@rib))) (begin (if (uyb37@rib-cache uyf0b@rib) (hashtable-update! (uyb37@rib-cache uyf0b@rib) uyf11@sym (lambda (uyf17@e) (cons (cons uyf12@mark* uyf0d@label) uyf17@e)) '()) (void)) (uyb29@set-rib-sym*! uyf0b@rib (cons uyf11@sym uyf15@sym*)) (uyb2d@set-rib-mark**! uyf0b@rib (cons uyf12@mark* (uyb2b@rib-mark** uyf0b@rib))) (uyb31@set-rib-label*! uyf0b@rib (cons uyf0d@label (uyb2f@rib-label* uyf0b@rib)))))))) (set! uy2826@uyb41@extend-rib/nc! uyb41@extend-rib/nc!) (set! uyb43@make-rib-map (lambda (uyf19@sym*) (let ((uyf1b@ht (make-eq-hashtable))) (let uyf21@f ((uyf1d@i '0) (uyf1e@sym* uyf19@sym*)) (if (null? uyf1e@sym*) uyf1b@ht (begin (hashtable-update! uyf1b@ht (car uyf1e@sym*) (lambda (uyf23@x) (cons uyf1d@i uyf23@x)) '()) (uyf21@f (+ uyf1d@i '1) (cdr uyf1e@sym*)))))))) (set! uy2827@uyb43@make-rib-map uyb43@make-rib-map) (set! uyb45@seal-rib! (lambda (uyf25@rib) (let ((uyf27@sym* (uyb27@rib-sym* uyf25@rib))) (if (not (null? uyf27@sym*)) (begin (uyb29@set-rib-sym*! uyf25@rib (list->vector uyf27@sym*)) (uyb2d@set-rib-mark**! uyf25@rib (list->vector (uyb2b@rib-mark** uyf25@rib))) (uyb31@set-rib-label*! uyf25@rib (list->vector (uyb2f@rib-label* uyf25@rib))) (uyb35@set-rib-sealed/freq! uyf25@rib (uyb43@make-rib-map uyf27@sym*))) (void))))) (set! uy2828@uyb45@seal-rib! uyb45@seal-rib!) (set! uyb47@unseal-rib! (lambda (uyf29@rib) (if (uyb33@rib-sealed/freq uyf29@rib) (begin (uyb35@set-rib-sealed/freq! uyf29@rib '#f) (uyb29@set-rib-sym*! uyf29@rib (vector->list (uyb27@rib-sym* uyf29@rib))) (uyb2d@set-rib-mark**! uyf29@rib (vector->list (uyb2b@rib-mark** uyf29@rib))) (uyb31@set-rib-label*! uyf29@rib (vector->list (uyb2f@rib-label* uyf29@rib)))) (void)))) (set! uy2829@uyb47@unseal-rib! uyb47@unseal-rib!) (set! uyb49@make-full-rib (lambda (uyf2b@id* uyf2c@label*) (let ((uyf2f@r (make-simple-struct 'rib '6 (list (map uyb8b@id->sym uyf2b@id*) (map uyb5b@stx-mark* uyf2b@id*) uyf2c@label* '#f '#f)))) (begin (uyb45@seal-rib! uyf2f@r) uyf2f@r)))) (set! uy282a@uyb49@make-full-rib uyb49@make-full-rib) (set! uyb4b@rp (uy6d6@uy5b1@make-record-printer 'stx (lambda (uyf31@x uyf32@p uyf33@wr) (begin (display '"#<syntax " uyf32@p) (write (uyb9d@stx->datum uyf31@x) uyf32@p) (let ((uyf37@expr (uyb57@stx-expr uyf31@x))) (if (uy6cd@uy59f@annotation? uyf37@expr) (let ((uyf39@src (uy6ce@uy5a1@annotation-source uyf37@expr))) (if (pair? uyf39@src) (begin (display '" [" uyf32@p) (display (cdr uyf39@src) uyf32@p) (display '" of " uyf32@p) (display (car uyf39@src) uyf32@p) (display '"]" uyf32@p)) (void))) (void))) (display '">" uyf32@p))))) (set! uy282b@uyb4b@rp uyb4b@rp) (set! uyb55@stx? (lambda (uyf3b@x) (and (simple-struct? uyf3b@x) (eq? (simple-struct-name uyf3b@x) 'stx)))) (set! uy282c@uyb55@stx? uyb55@stx?) (set! uyb57@stx-expr (lambda (uyf3d@x) (simple-struct-ref uyf3d@x '0))) (set! uy282d@uyb57@stx-expr uyb57@stx-expr) (set! uyb59@set-stx-expr! (lambda (uyf3f@x uyf40@val) (simple-struct-set! uyf3f@x '0 uyf40@val))) (set! uy282e@uyb59@set-stx-expr! uyb59@set-stx-expr!) (set! uyb5b@stx-mark* (lambda (uyf43@x) (simple-struct-ref uyf43@x '1))) (set! uy282f@uyb5b@stx-mark* uyb5b@stx-mark*) (set! uyb5d@set-stx-mark*! (lambda (uyf45@x uyf46@val) (simple-struct-set! uyf45@x '1 uyf46@val))) (set! uy2830@uyb5d@set-stx-mark*! uyb5d@set-stx-mark*!) (set! uyb5f@stx-subst* (lambda (uyf49@x) (simple-struct-ref uyf49@x '2))) (set! uy2831@uyb5f@stx-subst* uyb5f@stx-subst*) (set! uyb61@set-stx-subst*! (lambda (uyf4b@x uyf4c@val) (simple-struct-set! uyf4b@x '2 uyf4c@val))) (set! uy2832@uyb61@set-stx-subst*! uyb61@set-stx-subst*!) (set! uyb63@stx-ae* (lambda (uyf4f@x) (simple-struct-ref uyf4f@x '3))) (set! uy2833@uyb63@stx-ae* uyb63@stx-ae*) (set! uyb65@set-stx-ae*! (lambda (uyf51@x uyf52@val) (simple-struct-set! uyf51@x '3 uyf52@val))) (set! uy2834@uyb65@set-stx-ae*! uyb65@set-stx-ae*!) (set! uyb67@dummy '3) (set! uy2835@uyb67@dummy uyb67@dummy) (set! uyb69@datum->stx (lambda (uyf55@id uyf56@datum) (make-simple-struct 'stx '5 (list uyf56@datum (uyb5b@stx-mark* uyf55@id) (uyb5f@stx-subst* uyf55@id) (uyb63@stx-ae* uyf55@id))))) (set! uy2836@uyb69@datum->stx uyb69@datum->stx) (set! uyb6b@gen-mark (lambda () (string '#\m))) (set! uy2837@uyb6b@gen-mark uyb6b@gen-mark) (set! uyb6d@anti-mark '#f) (set! uy2838@uyb6d@anti-mark uyb6d@anti-mark) (set! uyb6f@anti-mark? not) (set! uy2839@uyb6f@anti-mark? uyb6f@anti-mark?) (set! uyb71@mkstx (lambda (uyf59@e uyf5a@m* uyf5b@s* uyf5c@ae*) (if (and (uyb55@stx? uyf59@e) (not (uyb0f@top-marked? uyf5a@m*))) (call-with-values (lambda () (join-wraps uyf5a@m* uyf5b@s* uyf5c@ae* uyf59@e)) (lambda (uyf67@uyf62 uyf68@uyf64 uyf69@uyf66) (let ((uyf6d@ae* uyf69@uyf66) (uyf6e@s* uyf68@uyf64) (uyf6f@m* uyf67@uyf62)) (make-simple-struct 'stx '5 (list (uyb57@stx-expr uyf59@e) uyf6f@m* uyf6e@s* uyf6d@ae*))))) (make-simple-struct 'stx '5 (list uyf59@e uyf5a@m* uyf5b@s* uyf5c@ae*))))) (set! uy283a@uyb71@mkstx uyb71@mkstx) (set! uyb73@add-subst (lambda (uyf73@subst uyf74@e) (uyb71@mkstx uyf74@e '() (list uyf73@subst) '()))) (set! uy283b@uyb73@add-subst uyb73@add-subst) (set! uyb75@add-mark (lambda (uyf77@mark uyf78@subst uyf79@expr uyf7a@ae) (letrec* ((uyf80@merge-ae* (lambda (uyfa7@ls1 uyfa8@ls2) (if (and (pair? uyfa7@ls1) (pair? uyfa8@ls2) (not (car uyfa8@ls2))) (uyf82@cancel uyfa7@ls1 uyfa8@ls2) (append uyfa7@ls1 uyfa8@ls2)))) (uyf82@cancel (lambda (uyf9d@ls1 uyf9e@ls2) (let uyfa5@f ((uyfa1@x (car uyf9d@ls1)) (uyfa2@ls1 (cdr uyf9d@ls1))) (if (null? uyfa2@ls1) (cdr uyf9e@ls2) (cons uyfa1@x (uyfa5@f (car uyfa2@ls1) (cdr uyfa2@ls1))))))) (uyf84@f (lambda (uyf85@e uyf86@m uyf87@s1* uyf88@ae*) (if (pair? uyf85@e) (let ((uyf8d@a (uyf84@f (car uyf85@e) uyf86@m uyf87@s1* uyf88@ae*)) (uyf8e@d (uyf84@f (cdr uyf85@e) uyf86@m uyf87@s1* uyf88@ae*))) (if (eq? uyf8d@a uyf8e@d) uyf85@e (cons uyf8d@a uyf8e@d))) (if (vector? uyf85@e) (let ((uyf91@ls1 (vector->list uyf85@e))) (let ((uyf93@ls2 (map (lambda (uyf95@x) (uyf84@f uyf95@x uyf86@m uyf87@s1* uyf88@ae*)) uyf91@ls1))) (if (for-all eq? uyf91@ls1 uyf93@ls2) uyf85@e (list->vector uyf93@ls2)))) (if (uyb55@stx? uyf85@e) (let ((uyf97@m* (uyb5b@stx-mark* uyf85@e)) (uyf98@s2* (uyb5f@stx-subst* uyf85@e))) (if (null? uyf97@m*) (uyf84@f (uyb57@stx-expr uyf85@e) uyf86@m (append uyf87@s1* uyf98@s2*) (uyf80@merge-ae* uyf88@ae* (uyb63@stx-ae* uyf85@e))) (if (eq? (car uyf97@m*) uyb6d@anti-mark) (make-simple-struct 'stx '5 (list (uyb57@stx-expr uyf85@e) (cdr uyf97@m*) (cdr (append uyf87@s1* uyf98@s2*)) (uyf80@merge-ae* uyf88@ae* (uyb63@stx-ae* uyf85@e)))) (make-simple-struct 'stx '5 (list (uyb57@stx-expr uyf85@e) (cons uyf86@m uyf97@m*) (let ((uyf9b@s* (cons 'shift (append uyf87@s1* uyf98@s2*)))) (if uyf78@subst (cons uyf78@subst uyf9b@s*) uyf9b@s*)) (uyf80@merge-ae* uyf88@ae* (uyb63@stx-ae* uyf85@e))))))) (if (symbol? uyf85@e) (uye70@syntax-violation '#f '"raw symbol encountered in output of macro" uyf79@expr uyf85@e) (make-simple-struct 'stx '5 (list uyf85@e (list uyf86@m) uyf87@s1* uyf88@ae*))))))))) (uyb71@mkstx (uyf84@f uyf79@expr uyf77@mark '() '()) '() '() (list uyf7a@ae))))) (set! uy283c@uyb75@add-mark uyb75@add-mark) (set! uyb77@syntax-kind? (lambda (uyfab@x uyfac@p?) (if (uyb55@stx? uyfab@x) (uyb77@syntax-kind? (uyb57@stx-expr uyfab@x) uyfac@p?) (if (uy6cd@uy59f@annotation? uyfab@x) (uyb77@syntax-kind? (uy6cf@uy5a3@annotation-expression uyfab@x) uyfac@p?) (uyfac@p? uyfab@x))))) (set! uy283d@uyb77@syntax-kind? uyb77@syntax-kind?) (set! uyb79@syntax-vector->list (lambda (uyfaf@x) (if (uyb55@stx? uyfaf@x) (let ((uyfb1@ls (uyb79@syntax-vector->list (uyb57@stx-expr uyfaf@x))) (uyfb2@m* (uyb5b@stx-mark* uyfaf@x)) (uyfb3@s* (uyb5f@stx-subst* uyfaf@x)) (uyfb4@ae* (uyb63@stx-ae* uyfaf@x))) (map (lambda (uyfb9@x) (uyb71@mkstx uyfb9@x uyfb2@m* uyfb3@s* uyfb4@ae*)) uyfb1@ls)) (if (uy6cd@uy59f@annotation? uyfaf@x) (uyb79@syntax-vector->list (uy6cf@uy5a3@annotation-expression uyfaf@x)) (if (vector? uyfaf@x) (vector->list uyfaf@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" uyfaf@x)))))) (set! uy283e@uyb79@syntax-vector->list uyb79@syntax-vector->list) (set! uyb7b@syntax-pair? (lambda (uyfbb@x) (uyb77@syntax-kind? uyfbb@x pair?))) (set! uy283f@uyb7b@syntax-pair? uyb7b@syntax-pair?) (set! uyb7d@syntax-vector? (lambda (uyfbd@x) (uyb77@syntax-kind? uyfbd@x vector?))) (set! uy2840@uyb7d@syntax-vector? uyb7d@syntax-vector?) (set! uyb7f@syntax-null? (lambda (uyfbf@x) (uyb77@syntax-kind? uyfbf@x null?))) (set! uy2841@uyb7f@syntax-null? uyb7f@syntax-null?) (set! uyb81@syntax-list? (lambda (uyfc1@x) (or (uyb7f@syntax-null? uyfc1@x) (and (uyb7b@syntax-pair? uyfc1@x) (uyb81@syntax-list? (uyb85@syntax-cdr uyfc1@x)))))) (set! uy2842@uyb81@syntax-list? uyb81@syntax-list?) (set! uyb83@syntax-car (lambda (uyfc3@x) (if (uyb55@stx? uyfc3@x) (uyb71@mkstx (uyb83@syntax-car (uyb57@stx-expr uyfc3@x)) (uyb5b@stx-mark* uyfc3@x) (uyb5f@stx-subst* uyfc3@x) (uyb63@stx-ae* uyfc3@x)) (if (uy6cd@uy59f@annotation? uyfc3@x) (uyb83@syntax-car (uy6cf@uy5a3@annotation-expression uyfc3@x)) (if (pair? uyfc3@x) (car uyfc3@x) (assertion-violation 'syntax-car '"BUG: not a pair" uyfc3@x)))))) (set! uy2843@uyb83@syntax-car uyb83@syntax-car) (set! uyb85@syntax-cdr (lambda (uyfc5@x) (if (uyb55@stx? uyfc5@x) (uyb71@mkstx (uyb85@syntax-cdr (uyb57@stx-expr uyfc5@x)) (uyb5b@stx-mark* uyfc5@x) (uyb5f@stx-subst* uyfc5@x) (uyb63@stx-ae* uyfc5@x)) (if (uy6cd@uy59f@annotation? uyfc5@x) (uyb85@syntax-cdr (uy6cf@uy5a3@annotation-expression uyfc5@x)) (if (pair? uyfc5@x) (cdr uyfc5@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" uyfc5@x)))))) (set! uy2844@uyb85@syntax-cdr uyb85@syntax-cdr) (set! uyb87@syntax->list (lambda (uyfc7@x) (if (uyb7b@syntax-pair? uyfc7@x) (cons (uyb83@syntax-car uyfc7@x) (uyb87@syntax->list (uyb85@syntax-cdr uyfc7@x))) (if (uyb7f@syntax-null? uyfc7@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" uyfc7@x))))) (set! uy2845@uyb87@syntax->list uyb87@syntax->list) (set! uyb89@id? (lambda (uyfc9@x) (and (uyb55@stx? uyfc9@x) (symbol? (uyb57@stx-expr uyfc9@x))))) (set! uy2846@uyb89@id? uyb89@id?) (set! uyb8b@id->sym (lambda (uyfcb@x) (uyb57@stx-expr uyfcb@x))) (set! uy2847@uyb8b@id->sym uyb8b@id->sym) (set! uyb8d@bound-id=? (lambda (uyfcd@x uyfce@y) (and (eq? (uyb8b@id->sym uyfcd@x) (uyb8b@id->sym uyfce@y)) (same-marks? (uyb5b@stx-mark* uyfcd@x) (uyb5b@stx-mark* uyfce@y))))) (set! uy2848@uyb8d@bound-id=? uyb8d@bound-id=?) (set! uyb8f@free-id=? (lambda (uyfd1@i uyfd2@j) (let ((uyfd5@t0 (id->real-label uyfd1@i)) (uyfd6@t1 (id->real-label uyfd2@j))) (if (or uyfd5@t0 uyfd6@t1) (eq? uyfd5@t0 uyfd6@t1) (eq? (uyb8b@id->sym uyfd1@i) (uyb8b@id->sym uyfd2@j)))))) (set! uy2849@uyb8f@free-id=? uyb8f@free-id=?) (set! uyb91@valid-bound-ids? (lambda (uyfd9@id*) (and (for-all uyb89@id? uyfd9@id*) (uyb93@distinct-bound-ids? uyfd9@id*)))) (set! uy284a@uyb91@valid-bound-ids? uyb91@valid-bound-ids?) (set! uyb93@distinct-bound-ids? (lambda (uyfdb@id*) (or (null? uyfdb@id*) (and (not (uyb95@bound-id-member? (car uyfdb@id*) (cdr uyfdb@id*))) (uyb93@distinct-bound-ids? (cdr uyfdb@id*)))))) (set! uy284b@uyb93@distinct-bound-ids? uyb93@distinct-bound-ids?) (set! uyb95@bound-id-member? (lambda (uyfdd@id uyfde@id*) (and (pair? uyfde@id*) (or (uyb8d@bound-id=? uyfdd@id (car uyfde@id*)) (uyb95@bound-id-member? uyfdd@id (cdr uyfde@id*)))))) (set! uy284c@uyb95@bound-id-member? uyb95@bound-id-member?) (set! uyb97@self-evaluating? (lambda (uyfe1@x) (or (number? uyfe1@x) (string? uyfe1@x) (char? uyfe1@x) (boolean? uyfe1@x) (regexp? uyfe1@x) (bytevector? uyfe1@x)))) (set! uy284d@uyb97@self-evaluating? uyb97@self-evaluating?) (set! uyb99@strip-annotations (lambda (uyfe3@x) (if (pair? uyfe3@x) (cons (uyb99@strip-annotations (car uyfe3@x)) (uyb99@strip-annotations (cdr uyfe3@x))) (if (vector? uyfe3@x) (vector-map uyb99@strip-annotations uyfe3@x) (if (uy6cd@uy59f@annotation? uyfe3@x) (uy6cc@uy59d@annotation-stripped uyfe3@x) uyfe3@x))))) (set! uy284e@uyb99@strip-annotations uyb99@strip-annotations) (set! uyb9b@strip (lambda (uyfe5@x uyfe6@m*) (if (uyb0f@top-marked? uyfe6@m*) (if (or (uy6cd@uy59f@annotation? uyfe5@x) (and (pair? uyfe5@x) (uy6cd@uy59f@annotation? (car uyfe5@x))) (and (vector? uyfe5@x) (> (vector-length uyfe5@x) '0) (uy6cd@uy59f@annotation? (vector-ref uyfe5@x '0)))) (uyb99@strip-annotations uyfe5@x) uyfe5@x) (let uyfeb@f ((uyfe9@x uyfe5@x)) (if (uyb55@stx? uyfe9@x) (begin (if (pair? (uyb57@stx-expr uyfe9@x)) (begin (set-source-info! (uyb57@stx-expr uyfe9@x) '#f) (set-source-info! (cdr (uyb57@stx-expr uyfe9@x)) '#f) (set-source-info! (car (uyb57@stx-expr uyfe9@x)) '#f)) (void)) (uyb9b@strip (uyb57@stx-expr uyfe9@x) (uyb5b@stx-mark* uyfe9@x))) (if (uy6cd@uy59f@annotation? uyfe9@x) (uy6cc@uy59d@annotation-stripped uyfe9@x) (if (pair? uyfe9@x) (let ((uyfed@a (uyfeb@f (car uyfe9@x))) (uyfee@d (uyfeb@f (cdr uyfe9@x)))) (if (and (eq? uyfed@a (car uyfe9@x)) (eq? uyfee@d (cdr uyfe9@x))) uyfe9@x (cons uyfed@a uyfee@d))) (if (vector? uyfe9@x) (let ((uyff1@old (vector->list uyfe9@x))) (let ((uyff3@new (map uyfeb@f uyff1@old))) (if (for-all eq? uyff1@old uyff3@new) uyfe9@x (list->vector uyff3@new)))) uyfe9@x)))))))) (set! uy284f@uyb9b@strip uyb9b@strip) (set! uyb9d@stx->datum (lambda (uyff5@x) (uyb9b@strip uyff5@x '()))) (set! uy2850@uyb9d@stx->datum uyb9d@stx->datum) (set! uyb9f@id->label (lambda (uyff7@id) (or (id->real-label uyff7@id) (let ((uyff9@t (uye80@top-level-context))) (if uyff9@t ((lambda (uyffb@env) (let ((uyffd@rib (uye30@interaction-env-rib uyffb@env))) (call-with-values (lambda () (uyb19@gen-define-label+loc uyff7@id uyffd@rib)) (lambda (uy1003@uy1000 uy1004@uy1002) (let ((uy1007@loc_ uy1004@uy1002) (uy1008@lab uy1003@uy1000)) (begin (uyb3f@extend-rib! uyffd@rib uyff7@id uy1008@lab) uy1008@lab)))))) uyff9@t) '#f))))) (set! uy2851@uyb9f@id->label uyb9f@id->label) (set! uyba1@label->binding (lambda (uy100b@x uy100c@r) (let ((uy100f@t (uy9a4@uy7f1@imported-label->binding uy100b@x))) (if uy100f@t ((lambda (uy1011@b) (if (and (pair? uy1011@b) (eq? (car uy1011@b) '$core-rtd)) (cons '$rtd (map uyd46@bless (cdr uy1011@b))) (if (and (pair? uy1011@b) (eq? (car uy1011@b) 'global-rtd)) (let ((uy1013@lib (cadr uy1011@b)) (uy1014@loc (cddr uy1011@b))) (cons '$rtd (symbol-value uy1014@loc))) uy1011@b))) uy100f@t) (let ((uy1017@t (assq uy100b@x uy100c@r))) (if uy1017@t (cdr uy1017@t) (let ((uy1019@t (uye80@top-level-context))) (if uy1019@t ((lambda (uy101b@env) (let ((uy101d@t (assq uy100b@x (uye38@interaction-env-locs uy101b@env)))) (if uy101d@t ((lambda (uy101f@p) (cons* 'lexical (cdr uy101f@p) '#f)) uy101d@t) '(displaced-lexical . #f)))) uy1019@t) '(displaced-lexical . #f))))))))) (set! uy2852@uyba1@label->binding uyba1@label->binding) (set! uyba3@make-binding cons) (set! uy2853@uyba3@make-binding uyba3@make-binding) (set! uyba5@binding-type car) (set! uy2854@uyba5@binding-type uyba5@binding-type) (set! uyba7@binding-value cdr) (set! uy2855@uyba7@binding-value uyba7@binding-value) (set! uyba9@raise-unbound-error (lambda (uy1021@id) (uye6e@syntax-violation* '#f '"unbound identifier" uy1021@id (make-undefined-violation)))) (set! uy2856@uyba9@raise-unbound-error uyba9@raise-unbound-error) (set! uybab@syntax-type (lambda (uy1023@e uy1024@r) (if (uyb89@id? uy1023@e) (let ((uy1027@id uy1023@e)) (let ((uy1029@label (uyb9f@id->label uy1027@id))) (let ((uy102b@b (uyba1@label->binding uy1029@label uy1024@r))) (let ((uy102d@type (uyba5@binding-type uy102b@b))) (begin (if (not uy1029@label) (uyba9@raise-unbound-error uy1027@id) (void)) (let ((uy102f@t uy102d@type)) (if (memv uy102f@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values uy102d@type (uyba7@binding-value uy102b@b) uy1027@id) (values 'other '#f '#f)))))))) (if (uyb7b@syntax-pair? uy1023@e) (let ((uy1031@id (uyb83@syntax-car uy1023@e))) (if (uyb89@id? uy1031@id) (let ((uy1033@label (uyb9f@id->label uy1031@id))) (let ((uy1035@b (uyba1@label->binding uy1033@label uy1024@r))) (let ((uy1037@type (uyba5@binding-type uy1035@b))) (begin (if (not uy1033@label) (uyba9@raise-unbound-error uy1031@id) (void)) (let ((uy1039@t uy1037@type)) (if (memv uy1039@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values uy1037@type (uyba7@binding-value uy1035@b) uy1031@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((uy103b@d (uyb9d@stx->datum uy1023@e))) (if (uyb97@self-evaluating? uy103b@d) (values 'constant uy103b@d '#f) (values 'other '#f '#f))))))) (set! uy2857@uybab@syntax-type uybab@syntax-type) (set! uybb9@sanitize-binding (lambda (uy103d@x uy103e@src) (if (procedure? uy103d@x) (cons* 'local-macro uy103d@x uy103e@src) (if (and (pair? uy103d@x) (eq? (car uy103d@x) 'macro!) (procedure? (cdr uy103d@x))) (cons* 'local-macro! (cdr uy103d@x) uy103e@src) (if (and (pair? uy103d@x) (eq? (car uy103d@x) '$rtd)) uy103d@x (assertion-violation 'expand '"invalid transformer" uy103d@x)))))) (set! uy2858@uybb9@sanitize-binding uybb9@sanitize-binding) (set! uybbb@make-variable-transformer (lambda (uy1041@x) (if (procedure? uy1041@x) (cons 'macro! uy1041@x) (assertion-violation 'make-variable-transformer '"not a procedure" uy1041@x)))) (set! uy2859@uybbb@make-variable-transformer uybbb@make-variable-transformer) (set! uybbd@variable-transformer? (lambda (uy1043@x) (and (pair? uy1043@x) (eq? (car uy1043@x) 'macro!) (procedure? (cdr uy1043@x))))) (set! uy285a@uybbd@variable-transformer? uybbd@variable-transformer?) (set! uybbf@variable-transformer-procedure (lambda (uy1045@x) (if (uybbd@variable-transformer? uy1045@x) (cdr uy1045@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" uy1045@x)))) (set! uy285b@uybbf@variable-transformer-procedure uybbf@variable-transformer-procedure) (set! uybc1@make-eval-transformer (lambda (uy1047@x) (uybb9@sanitize-binding (eval-core (uy72f@uy6e7@expanded->core uy1047@x)) uy1047@x))) (set! uy285c@uybc1@make-eval-transformer uybc1@make-eval-transformer) (set! uyd12@parse-define (lambda (uy1049@x) (let ((uy104b@t uy1049@x)) (let ((uy104d@ls/false (uyd90@syntax-dispatch uy104b@t '(_ (any . any) any . each-any)))) (if (and uy104d@ls/false (apply (lambda (uy104f@id uy1050@fmls uy1051@b uy1052@b*) (uyb89@id? uy104f@id)) uy104d@ls/false)) (apply (lambda (uy1057@id uy1058@fmls uy1059@b uy105a@b*) (begin (uydb6@verify-formals uy1058@fmls uy1049@x) (values uy1057@id (cons 'defun (cons uy1058@fmls (cons uy1059@b uy105a@b*)))))) uy104d@ls/false) (let ((uy105f@t uy104b@t)) (let ((uy1061@ls/false (uyd90@syntax-dispatch uy105f@t '(_ any any)))) (if (and uy1061@ls/false (apply (lambda (uy1063@id uy1064@val) (uyb89@id? uy1063@id)) uy1061@ls/false)) (apply (lambda (uy1067@id uy1068@val) (values uy1067@id (cons 'expr uy1068@val))) uy1061@ls/false) (let ((uy106b@t uy105f@t)) (let ((uy106d@ls/false (uyd90@syntax-dispatch uy106b@t '(_ any)))) (if (and uy106d@ls/false (apply (lambda (uy106f@id) (uyb89@id? uy106f@id)) uy106d@ls/false)) (apply (lambda (uy1071@id) (values uy1071@id (cons 'expr (uyd46@bless '(void))))) uy106d@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy106b@t)))))))))))) (set! uy285d@uyd12@parse-define uyd12@parse-define) (set! uyd14@parse-define-syntax (lambda (uy1073@x) (let ((uy1075@t uy1073@x)) (let ((uy1077@ls/false (uyd90@syntax-dispatch uy1075@t '(_ any any)))) (if (and uy1077@ls/false (apply (lambda (uy1079@id uy107a@val) (uyb89@id? uy1079@id)) uy1077@ls/false)) (apply (lambda (uy107d@id uy107e@val) (values uy107d@id uy107e@val)) uy1077@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1075@t)))))) (set! uy285e@uyd14@parse-define-syntax uyd14@parse-define-syntax) (set! uyd16@scheme-stx-hashtable (make-eq-hashtable)) (set! uy285f@uyd16@scheme-stx-hashtable uyd16@scheme-stx-hashtable) (set! uyd18@scheme-stx (lambda (uy1081@sym) (or (hashtable-ref uyd16@scheme-stx-hashtable uy1081@sym '#f) (let ((uy1083@subst (uy980@uy7a9@library-subst (uy99e@uy7e5@find-library-by-name '(psyntax system $all))))) (let ((uy1085@stx (make-simple-struct 'stx '5 (list uy1081@sym uyb0d@top-mark* '() '())))) (let ((uy1087@stx (let ((uy1089@t (assq uy1081@sym uy1083@subst))) (if uy1089@t ((lambda (uy108b@x) (let ((uy108d@name (car uy108b@x)) (uy108e@label (cdr uy108b@x))) (uyb73@add-subst (make-simple-struct 'rib '6 (list (list uy108d@name) (list uyb0d@top-mark*) (list uy108e@label) '#f '#f)) uy1085@stx))) uy1089@t) uy1085@stx)))) (begin (hashtable-set! uyd16@scheme-stx-hashtable uy1081@sym uy1087@stx) uy1087@stx))))))) (set! uy2860@uyd18@scheme-stx uyd18@scheme-stx) (set! uyd1a@lexical-var car) (set! uy2861@uyd1a@lexical-var uyd1a@lexical-var) (set! uyd1c@lexical-mutable? cdr) (set! uy2862@uyd1c@lexical-mutable? uyd1c@lexical-mutable?) (set! uyd1e@set-lexical-mutable! set-cdr!) (set! uy2863@uyd1e@set-lexical-mutable! uyd1e@set-lexical-mutable!) (set! uyd20@add-lexical (lambda (uy1091@lab uy1092@lex uy1093@r) (cons (cons* uy1091@lab 'lexical uy1092@lex '#f) uy1093@r))) (set! uy2864@uyd20@add-lexical uyd20@add-lexical) (set! uyd22@add-lexicals (lambda (uy1097@lab* uy1098@lex* uy1099@r) (if (null? uy1097@lab*) uy1099@r (uyd22@add-lexicals (cdr uy1097@lab*) (cdr uy1098@lex*) (uyd20@add-lexical (car uy1097@lab*) (car uy1098@lex*) uy1099@r))))) (set! uy2865@uyd22@add-lexicals uyd22@add-lexicals) (set! uyd24@letrec-helper (lambda (uy109d@e uy109e@r uy109f@mr uy10a0@build) (let ((uy10a5@t uy109d@e)) (let ((uy10a7@ls/false (uyd90@syntax-dispatch uy10a5@t '(_ #(each (any any)) any . each-any)))) (if uy10a7@ls/false (apply (lambda (uy10a9@lhs* uy10aa@rhs* uy10ab@b uy10ac@b*) (if (not (uyb91@valid-bound-ids? uy10a9@lhs*)) (uyd4a@invalid-fmls-error uy109d@e uy10a9@lhs*) (let ((uy10b1@lex* (map uyb11@gen-lexical uy10a9@lhs*)) (uy10b2@lab* (map uyb15@gen-label uy10a9@lhs*))) (let ((uy10b5@rib (uyb49@make-full-rib uy10a9@lhs* uy10b2@lab*)) (uy10b6@r (uyd22@add-lexicals uy10b2@lab* uy10b1@lex* uy109e@r))) (let ((uy10b9@body (uydc8@chi-internal (uyb73@add-subst uy10b5@rib (cons uy10ab@b uy10ac@b*)) uy10b6@r uy109f@mr)) (uy10ba@rhs* (uydae@chi-expr* (map (lambda (uy10bd@x) (uyb73@add-subst uy10b5@rib uy10bd@x)) uy10aa@rhs*) uy10b6@r uy109f@mr))) (uy10a0@build '#f uy10b1@lex* uy10ba@rhs* uy10b9@body)))))) uy10a7@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy10a5@t)))))) (set! uy2866@uyd24@letrec-helper uyd24@letrec-helper) (set! uyd26@let-transformer (lambda (uy10bf@e uy10c0@r uy10c1@mr) (let ((uy10c5@t uy10bf@e)) (let ((uy10c7@ls/false (uyd90@syntax-dispatch uy10c5@t '(_ #(each (any any)) any . each-any)))) (if uy10c7@ls/false (apply (lambda (uy10c9@lhs* uy10ca@rhs* uy10cb@b uy10cc@b*) (if (not (uyb91@valid-bound-ids? uy10c9@lhs*)) (uyd4a@invalid-fmls-error uy10bf@e uy10c9@lhs*) (let ((uy10d1@lex* (map uyb11@gen-lexical uy10c9@lhs*)) (uy10d2@lab* (map uyb15@gen-label uy10c9@lhs*)) (uy10d3@rhs* (uydae@chi-expr* uy10ca@rhs* uy10c0@r uy10c1@mr))) (let ((uy10d7@rib (uyb49@make-full-rib uy10c9@lhs* uy10d2@lab*)) (uy10d8@r (uyd22@add-lexicals uy10d2@lab* uy10d1@lex* uy10c0@r))) (let ((uy10db@body (uydc8@chi-internal (uyb73@add-subst uy10d7@rib (cons uy10cb@b uy10cc@b*)) uy10d8@r uy10c1@mr))) (uyaf1@uya54@build-let '#f uy10d1@lex* uy10d3@rhs* uy10db@body)))))) uy10c7@ls/false) (let ((uy10dd@t uy10c5@t)) (let ((uy10df@ls/false (uyd90@syntax-dispatch uy10dd@t '(_ any #(each (any any)) any . each-any)))) (if uy10df@ls/false (apply (lambda (uy10e1@loop uy10e2@lhs* uy10e3@rhs* uy10e4@b uy10e5@b*) (if (not (uyb91@valid-bound-ids? uy10e2@lhs*)) (uyd4a@invalid-fmls-error uy10bf@e uy10e2@lhs*) (let ((uy10eb@lex* (map uyb11@gen-lexical uy10e2@lhs*)) (uy10ec@lab* (map uyb15@gen-label uy10e2@lhs*)) (uy10ed@rhs* (uydae@chi-expr* uy10e3@rhs* uy10c0@r uy10c1@mr)) (uy10ee@loop-lex (uyb11@gen-lexical uy10e1@loop)) (uy10ef@loop-lab (uyb15@gen-label uy10e1@loop))) (let ((uy10f5@loop-rib (uyb49@make-full-rib (list uy10e1@loop) (list uy10ef@loop-lab))) (uy10f6@rib (uyb49@make-full-rib uy10e2@lhs* uy10ec@lab*)) (uy10f7@r (uyd22@add-lexicals (cons uy10ef@loop-lab uy10ec@lab*) (cons uy10ee@loop-lex uy10eb@lex*) uy10c0@r))) (let ((uy10fb@body (uydc8@chi-internal (uyb73@add-subst uy10f5@loop-rib (uyb73@add-subst uy10f6@rib (cons uy10e4@b uy10e5@b*))) uy10f7@r uy10c1@mr))) (uyaf2@uya56@build-named-let '#f uy10ee@loop-lex uy10eb@lex* uy10ed@rhs* uy10fb@body)))))) uy10df@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy10dd@t))))))))) (set! uy2867@uyd26@let-transformer uyd26@let-transformer) (set! uyd28@letrec-transformer (lambda (uy10fd@e uy10fe@r uy10ff@mr) (uyd24@letrec-helper uy10fd@e uy10fe@r uy10ff@mr uyaf0@uya52@build-letrec))) (set! uy2868@uyd28@letrec-transformer uyd28@letrec-transformer) (set! uyd2a@letrec*-transformer (lambda (uy1103@e uy1104@r uy1105@mr) (uyd24@letrec-helper uy1103@e uy1104@r uy1105@mr uyaf3@uya58@build-letrec*))) (set! uy2869@uyd2a@letrec*-transformer uyd2a@letrec*-transformer) (set! uyd2c@fluid-let-syntax-transformer (lambda (uy1109@e uy110a@r uy110b@mr) (letrec* ((uy1110@lookup (lambda (uy1123@x) (or (uyb9f@id->label uy1123@x) (uye70@syntax-violation '#f '"unbound identifier" uy1109@e uy1123@x))))) (let ((uy1111@t uy1109@e)) (let ((uy1113@ls/false (uyd90@syntax-dispatch uy1111@t '(_ #(each (any any)) any . each-any)))) (if uy1113@ls/false (apply (lambda (uy1115@lhs* uy1116@rhs* uy1117@b uy1118@b*) (if (not (uyb91@valid-bound-ids? uy1115@lhs*)) (uyd4a@invalid-fmls-error uy1109@e uy1115@lhs*) (let ((uy111d@lab* (map uy1110@lookup uy1115@lhs*)) (uy111e@rhs* (map (lambda (uy1121@x) (uybc1@make-eval-transformer (uydea@expand-transformer uy1121@x uy110b@mr))) uy1116@rhs*))) (uydc8@chi-internal (cons uy1117@b uy1118@b*) (append (map cons uy111d@lab* uy111e@rhs*) uy110a@r) (append (map cons uy111d@lab* uy111e@rhs*) uy110b@mr))))) uy1113@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1111@t))))))) (set! uy286a@uyd2c@fluid-let-syntax-transformer uyd2c@fluid-let-syntax-transformer) (set! uyd2e@type-descriptor-transformer (lambda (uy1125@e uy1126@r uy1127@mr) (let ((uy112b@t uy1125@e)) (let ((uy112d@ls/false (uyd90@syntax-dispatch uy112b@t '(_ any)))) (if (and uy112d@ls/false (apply (lambda (uy112f@id) (uyb89@id? uy112f@id)) uy112d@ls/false)) (apply (lambda (uy1131@id) (let ((uy1133@lab (uyb9f@id->label uy1131@id))) (let ((uy1135@b (uyba1@label->binding uy1133@lab uy1126@r))) (let ((uy1137@type (uyba5@binding-type uy1135@b))) (begin (if (not uy1133@lab) (uyba9@raise-unbound-error uy1131@id) (void)) (if (not (and (eq? uy1137@type '$rtd) (not (list? (uyba7@binding-value uy1135@b))))) (uye70@syntax-violation '#f '"not a record type" uy1125@e) (void)) (list 'quote (uyba7@binding-value uy1135@b))))))) uy112d@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy112b@t)))))) (set! uy286b@uyd2e@type-descriptor-transformer uyd2e@type-descriptor-transformer) (set! uyd30@record-type-descriptor-transformer (lambda (uy1139@e uy113a@r uy113b@mr) (let ((uy113f@t uy1139@e)) (let ((uy1141@ls/false (uyd90@syntax-dispatch uy113f@t '(_ any)))) (if (and uy1141@ls/false (apply (lambda (uy1143@id) (uyb89@id? uy1143@id)) uy1141@ls/false)) (apply (lambda (uy1145@id) (let ((uy1147@lab (uyb9f@id->label uy1145@id))) (let ((uy1149@b (uyba1@label->binding uy1147@lab uy113a@r))) (let ((uy114b@type (uyba5@binding-type uy1149@b))) (begin (if (not uy1147@lab) (uyba9@raise-unbound-error uy1145@id) (void)) (if (not (and (eq? uy114b@type '$rtd) (list? (uyba7@binding-value uy1149@b)))) (uye70@syntax-violation '#f '"not a record type" uy1139@e) (void)) (uydb2@chi-expr (car (uyba7@binding-value uy1149@b)) uy113a@r uy113b@mr)))))) uy1141@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy113f@t)))))) (set! uy286c@uyd30@record-type-descriptor-transformer uyd30@record-type-descriptor-transformer) (set! uyd32@record-constructor-descriptor-transformer (lambda (uy114d@e uy114e@r uy114f@mr) (let ((uy1153@t uy114d@e)) (let ((uy1155@ls/false (uyd90@syntax-dispatch uy1153@t '(_ any)))) (if (and uy1155@ls/false (apply (lambda (uy1157@id) (uyb89@id? uy1157@id)) uy1155@ls/false)) (apply (lambda (uy1159@id) (let ((uy115b@lab (uyb9f@id->label uy1159@id))) (let ((uy115d@b (uyba1@label->binding uy115b@lab uy114e@r))) (let ((uy115f@type (uyba5@binding-type uy115d@b))) (begin (if (not uy115b@lab) (uyba9@raise-unbound-error uy1159@id) (void)) (if (not (and (eq? uy115f@type '$rtd) (list? (uyba7@binding-value uy115d@b)))) (uye70@syntax-violation '#f '"invalid type" uy114d@e) (void)) (uydb2@chi-expr (cadr (uyba7@binding-value uy115d@b)) uy114e@r uy114f@mr)))))) uy1155@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1153@t)))))) (set! uy286d@uyd32@record-constructor-descriptor-transformer uyd32@record-constructor-descriptor-transformer) (set! uyd34@when-macro (lambda (uy1161@e) (let ((uy1163@t uy1161@e)) (let ((uy1165@ls/false (uyd90@syntax-dispatch uy1163@t '(_ any any . each-any)))) (if uy1165@ls/false (apply (lambda (uy1167@test uy1168@e uy1169@e*) (uyd46@bless (list 'if uy1167@test (cons 'begin (cons uy1168@e uy1169@e*))))) uy1165@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1163@t)))))) (set! uy286e@uyd34@when-macro uyd34@when-macro) (set! uyd36@unless-macro (lambda (uy116d@e) (let ((uy116f@t uy116d@e)) (let ((uy1171@ls/false (uyd90@syntax-dispatch uy116f@t '(_ any any . each-any)))) (if uy1171@ls/false (apply (lambda (uy1173@test uy1174@e uy1175@e*) (uyd46@bless (list 'if (list 'not uy1173@test) (cons 'begin (cons uy1174@e uy1175@e*))))) uy1171@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy116f@t)))))) (set! uy286f@uyd36@unless-macro uyd36@unless-macro) (set! uyd38@if-transformer (lambda (uy1179@e uy117a@r uy117b@mr) (let ((uy117f@t uy1179@e)) (let ((uy1181@ls/false (uyd90@syntax-dispatch uy117f@t '(_ any any any)))) (if uy1181@ls/false (apply (lambda (uy1183@e0 uy1184@e1 uy1185@e2) (list 'if (uydb2@chi-expr uy1183@e0 uy117a@r uy117b@mr) (uydb2@chi-expr uy1184@e1 uy117a@r uy117b@mr) (uydb2@chi-expr uy1185@e2 uy117a@r uy117b@mr))) uy1181@ls/false) (let ((uy1189@t uy117f@t)) (let ((uy118b@ls/false (uyd90@syntax-dispatch uy1189@t '(_ any any)))) (if uy118b@ls/false (apply (lambda (uy118d@e0 uy118e@e1) (list 'if (uydb2@chi-expr uy118d@e0 uy117a@r uy117b@mr) (uydb2@chi-expr uy118e@e1 uy117a@r uy117b@mr) (uyaef@uya50@build-void))) uy118b@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1189@t))))))))) (set! uy2870@uyd38@if-transformer uyd38@if-transformer) (set! uyd3a@and-transformer (lambda (uy1191@e uy1192@r uy1193@mr) (let ((uy1197@t uy1191@e)) (let ((uy1199@ls/false (uyd90@syntax-dispatch uy1197@t '(_ . each-any)))) (if uy1199@ls/false (apply (lambda (uy119b@e*) (cons 'and (uydae@chi-expr* uy119b@e* uy1192@r uy1193@mr))) uy1199@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1197@t)))))) (set! uy2871@uyd3a@and-transformer uyd3a@and-transformer) (set! uyd3c@or-transformer (lambda (uy119d@e uy119e@r uy119f@mr) (let ((uy11a3@t uy119d@e)) (let ((uy11a5@ls/false (uyd90@syntax-dispatch uy11a3@t '(_ . each-any)))) (if uy11a5@ls/false (apply (lambda (uy11a7@e*) (cons 'or (uydae@chi-expr* uy11a7@e* uy119e@r uy119f@mr))) uy11a5@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy11a3@t)))))) (set! uy2872@uyd3c@or-transformer uyd3c@or-transformer) (set! uyd3e@case-macro (lambda (uy11a9@e) (letrec* ((uy11ac@build-last (lambda (uy11d3@cls) (let ((uy11d5@t uy11d3@cls)) (let ((uy11d7@ls/false (uyd90@syntax-dispatch uy11d5@t '(#(scheme-id else) any . each-any)))) (if uy11d7@ls/false (apply (lambda (uy11d9@e uy11da@e*) (cons 'begin (cons uy11d9@e uy11da@e*))) uy11d7@ls/false) (let ((uy11dd@t uy11d5@t)) (let ((uy11df@ls/false (uyd90@syntax-dispatch uy11dd@t '_))) (if uy11df@ls/false (apply (lambda () (uy11ae@build-one uy11d3@cls '(if #f #f))) uy11df@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy11dd@t))))))))) (uy11ae@build-one (lambda (uy11c5@cls uy11c6@k) (let ((uy11c9@t uy11c5@cls)) (let ((uy11cb@ls/false (uyd90@syntax-dispatch uy11c9@t '(each-any any . each-any)))) (if uy11cb@ls/false (apply (lambda (uy11cd@d* uy11ce@e uy11cf@e*) (list 'if (list 'memv 't (list 'quote uy11cd@d*)) (cons 'begin (cons uy11ce@e uy11cf@e*)) uy11c6@k)) uy11cb@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy11c9@t))))))) (let ((uy11af@t uy11a9@e)) (let ((uy11b1@ls/false (uyd90@syntax-dispatch uy11af@t '(_ any)))) (if uy11b1@ls/false (apply (lambda (uy11b3@expr) (uyd46@bless (cons 'let (cons (list (list 't uy11b3@expr)) '((if #f #f)))))) uy11b1@ls/false) (let ((uy11b5@t uy11af@t)) (let ((uy11b7@ls/false (uyd90@syntax-dispatch uy11b5@t '(_ any any . each-any)))) (if uy11b7@ls/false (apply (lambda (uy11b9@expr uy11ba@cls uy11bb@cls*) (uyd46@bless (list 'let (list (list 't uy11b9@expr)) (let uy11c3@f ((uy11bf@cls uy11ba@cls) (uy11c0@cls* uy11bb@cls*)) (if (null? uy11c0@cls*) (uy11ac@build-last uy11bf@cls) (uy11ae@build-one uy11bf@cls (uy11c3@f (car uy11c0@cls*) (cdr uy11c0@cls*)))))))) uy11b7@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy11b5@t)))))))))) (set! uy2873@uyd3e@case-macro uyd3e@case-macro) (set! uyd40@quote-transformer (lambda (uy11e1@e uy11e2@r uy11e3@mr) (let ((uy11e7@t uy11e1@e)) (let ((uy11e9@ls/false (uyd90@syntax-dispatch uy11e7@t '(_ any)))) (if uy11e9@ls/false (apply (lambda (uy11eb@datum) (list 'quote (uyb9d@stx->datum uy11eb@datum))) uy11e9@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy11e7@t)))))) (set! uy2874@uyd40@quote-transformer uyd40@quote-transformer) (set! uyd42@case-lambda-transformer (lambda (uy11ed@e uy11ee@r uy11ef@mr) (let ((uy11f3@t uy11ed@e)) (let ((uy11f5@ls/false (uyd90@syntax-dispatch uy11f3@t '(_ . #(each (any any . each-any)))))) (if uy11f5@ls/false (apply (lambda (uy11f7@fmls* uy11f8@b* uy11f9@b**) (call-with-values (lambda () (uydba@chi-lambda-clause* uy11ed@e uy11f7@fmls* (map cons uy11f8@b* uy11f9@b**) uy11ee@r uy11ef@mr)) (lambda (uy1201@uy11fe uy1202@uy1200) (let ((uy1205@body* uy1202@uy1200) (uy1206@fmls* uy1201@uy11fe)) (uyaed@uya20@build-case-lambda '#f uy1206@fmls* uy1205@body*))))) uy11f5@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy11f3@t)))))) (set! uy2875@uyd42@case-lambda-transformer uyd42@case-lambda-transformer) (set! uyd44@lambda-transformer (lambda (uy1209@e uy120a@r uy120b@mr) (let ((uy120f@t uy1209@e)) (let ((uy1211@ls/false (uyd90@syntax-dispatch uy120f@t '(_ any any . each-any)))) (if uy1211@ls/false (apply (lambda (uy1213@fmls uy1214@b uy1215@b*) (call-with-values (lambda () (uydb8@chi-lambda-clause uy1209@e uy1213@fmls (cons uy1214@b uy1215@b*) uy120a@r uy120b@mr)) (lambda (uy121d@uy121a uy121e@uy121c) (let ((uy1221@body uy121e@uy121c) (uy1222@fmls uy121d@uy121a)) (uyaec@uya1e@build-lambda '#f uy1222@fmls uy1221@body))))) uy1211@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy120f@t)))))) (set! uy2876@uyd44@lambda-transformer uyd44@lambda-transformer) (set! uyd46@bless (lambda (uy1225@x) (uyb71@mkstx (let uy1229@f ((uy1227@x uy1225@x)) (if (uyb55@stx? uy1227@x) uy1227@x (if (pair? uy1227@x) (cons (uy1229@f (car uy1227@x)) (uy1229@f (cdr uy1227@x))) (if (symbol? uy1227@x) (uyd18@scheme-stx uy1227@x) (if (vector? uy1227@x) (vector-map uy1229@f uy1227@x) uy1227@x))))) '() '() '()))) (set! uy2877@uyd46@bless uyd46@bless) (set! uyd48@with-syntax-macro (lambda (uy122b@e) (let ((uy122d@t uy122b@e)) (let ((uy122f@ls/false (uyd90@syntax-dispatch uy122d@t '(_ #(each (any any)) any . each-any)))) (if uy122f@ls/false (apply (lambda (uy1231@pat* uy1232@expr* uy1233@b uy1234@b*) (let ((uy1239@idn* (let uy123d@f ((uy123b@pat* uy1231@pat*)) (if (null? uy123b@pat*) '() (call-with-values (lambda () (uyd8e@convert-pattern (car uy123b@pat*) '())) (lambda (uy1243@uy1240 uy1244@uy1242) (let ((uy1247@idn* uy1244@uy1242) (uy1248@pat uy1243@uy1240)) (append uy1247@idn* (uy123d@f (cdr uy123b@pat*)))))))))) (begin (uydb6@verify-formals (map car uy1239@idn*) uy122b@e) (let ((uy124b@t* (uye5e@generate-temporaries uy1232@expr*))) (uyd46@bless (list 'let (map list uy124b@t* uy1232@expr*) (let uy1251@f ((uy124d@pat* uy1231@pat*) (uy124e@t* uy124b@t*)) (if (null? uy124d@pat*) (cons 'let (cons '() (cons uy1233@b uy1234@b*))) (list 'syntax-case (car uy124e@t*) '() (list (car uy124d@pat*) (uy1251@f (cdr uy124d@pat*) (cdr uy124e@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car uy124d@pat*)) (car uy124e@t*)))))))))))) uy122f@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy122d@t)))))) (set! uy2878@uyd48@with-syntax-macro uyd48@with-syntax-macro) (set! uyd4a@invalid-fmls-error (lambda (uy1253@stx uy1254@fmls) (let ((uy1257@t uy1254@fmls)) (let ((uy1259@ls/false (uyd90@syntax-dispatch uy1257@t '#(each+ any () any)))) (if uy1259@ls/false (apply (lambda (uy125b@id* uy125c@last) (let uy1261@f ((uy125f@id* (if (uyb89@id? uy125c@last) (cons uy125c@last uy125b@id*) (if (uyb7f@syntax-null? uy125c@last) uy125b@id* (uye70@syntax-violation '#f '"not an identifier" uy1253@stx uy125c@last))))) (if (null? uy125f@id*) (values) (if (not (uyb89@id? (car uy125f@id*))) (uye70@syntax-violation '#f '"not an identifier" uy1253@stx (car uy125f@id*)) (begin (uy1261@f (cdr uy125f@id*)) (if (uyb95@bound-id-member? (car uy125f@id*) (cdr uy125f@id*)) (uye70@syntax-violation '#f '"duplicate binding" uy1253@stx (car uy125f@id*)) (void))))))) uy1259@ls/false) (let ((uy1263@t uy1257@t)) (let ((uy1265@ls/false (uyd90@syntax-dispatch uy1263@t '_))) (if uy1265@ls/false (apply (lambda () (uye70@syntax-violation '#f '"malformed binding form" uy1253@stx uy1254@fmls)) uy1265@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1263@t))))))))) (set! uy2879@uyd4a@invalid-fmls-error uyd4a@invalid-fmls-error) (set! uyd4c@let-macro (lambda (uy1267@stx) (let ((uy1269@t uy1267@stx)) (let ((uy126b@ls/false (uyd90@syntax-dispatch uy1269@t '(_ #(each (any any)) any . each-any)))) (if uy126b@ls/false (apply (lambda (uy126d@lhs* uy126e@rhs* uy126f@b uy1270@b*) (if (uyb91@valid-bound-ids? uy126d@lhs*) (uyd46@bless (cons (cons 'lambda (cons uy126d@lhs* (cons uy126f@b uy1270@b*))) uy126e@rhs*)) (uyd4a@invalid-fmls-error uy1267@stx uy126d@lhs*))) uy126b@ls/false) (let ((uy1275@t uy1269@t)) (let ((uy1277@ls/false (uyd90@syntax-dispatch uy1275@t '(_ any #(each (any any)) any . each-any)))) (if (and uy1277@ls/false (apply (lambda (uy1279@f uy127a@lhs* uy127b@rhs* uy127c@b uy127d@b*) (uyb89@id? uy1279@f)) uy1277@ls/false)) (apply (lambda (uy1283@f uy1284@lhs* uy1285@rhs* uy1286@b uy1287@b*) (if (uyb91@valid-bound-ids? uy1284@lhs*) (uyd46@bless (cons (list 'letrec (list (list uy1283@f (cons 'lambda (cons uy1284@lhs* (cons uy1286@b uy1287@b*))))) uy1283@f) uy1285@rhs*)) (uyd4a@invalid-fmls-error uy1267@stx uy1284@lhs*))) uy1277@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1275@t))))))))) (set! uy287a@uyd4c@let-macro uyd4c@let-macro) (set! uyd4e@let-values-macro (lambda (uy128d@stx) (letrec* ((uy1290@rename (lambda (uy12f5@x uy12f6@old* uy12f7@new*) (begin (if (not (uyb89@id? uy12f5@x)) (uye70@syntax-violation '#f '"not an indentifier" uy128d@stx uy12f5@x) (void)) (if (uyb95@bound-id-member? uy12f5@x uy12f6@old*) (uye70@syntax-violation '#f '"duplicate binding" uy128d@stx uy12f5@x) (void)) (let ((uy12fb@y (gensym (uye76@syntax->datum uy12f5@x)))) (values uy12fb@y (cons uy12f5@x uy12f6@old*) (cons uy12fb@y uy12f7@new*)))))) (uy1292@rename* (lambda (uy12e3@x* uy12e4@old* uy12e5@new*) (if (null? uy12e3@x*) (values '() uy12e4@old* uy12e5@new*) (call-with-values (lambda () (uy1290@rename (car uy12e3@x*) uy12e4@old* uy12e5@new*)) (lambda (uy12e9@x uy12ea@old* uy12eb@new*) (call-with-values (lambda () (uy1292@rename* (cdr uy12e3@x*) uy12ea@old* uy12eb@new*)) (lambda (uy12ef@x* uy12f0@old* uy12f1@new*) (values (cons uy12e9@x uy12ef@x*) uy12f0@old* uy12f1@new*))))))))) (let ((uy1293@t uy128d@stx)) (let ((uy1295@ls/false (uyd90@syntax-dispatch uy1293@t '(_ () any . each-any)))) (if uy1295@ls/false (apply (lambda (uy1297@b uy1298@b*) (cons* (uyd46@bless 'let) '() uy1297@b uy1298@b*)) uy1295@ls/false) (let ((uy129b@t uy1293@t)) (let ((uy129d@ls/false (uyd90@syntax-dispatch uy129b@t '(_ #(each (any any)) any . each-any)))) (if uy129d@ls/false (apply (lambda (uy129f@lhs* uy12a0@rhs* uy12a1@b uy12a2@b*) (uyd46@bless (let uy12af@f ((uy12a7@lhs* uy129f@lhs*) (uy12a8@rhs* uy12a0@rhs*) (uy12a9@old* '()) (uy12aa@new* '())) (if (null? uy12a7@lhs*) (cons 'let (cons (map list uy12a9@old* uy12aa@new*) (cons uy12a1@b uy12a2@b*))) (let ((uy12b1@t (car uy12a7@lhs*))) (let ((uy12b3@ls/false (uyd90@syntax-dispatch uy12b1@t 'each-any))) (if uy12b3@ls/false (apply (lambda (uy12b5@x*) (call-with-values (lambda () (uy1292@rename* uy12b5@x* uy12a9@old* uy12aa@new*)) (lambda (uy12bd@uy12b8 uy12be@uy12ba uy12bf@uy12bc) (let ((uy12c3@new* uy12bf@uy12bc) (uy12c4@old* uy12be@uy12ba) (uy12c5@y* uy12bd@uy12b8)) (list 'call-with-values (list 'lambda '() (car uy12a8@rhs*)) (list 'lambda uy12c5@y* (uy12af@f (cdr uy12a7@lhs*) (cdr uy12a8@rhs*) uy12c4@old* uy12c3@new*))))))) uy12b3@ls/false) (let ((uy12c9@t uy12b1@t)) (let ((uy12cb@ls/false (uyd90@syntax-dispatch uy12c9@t '#(each+ any () any)))) (if uy12cb@ls/false (apply (lambda (uy12cd@x* uy12ce@x) (call-with-values (lambda () (uy1290@rename uy12ce@x uy12a9@old* uy12aa@new*)) (lambda (uy12d1@y uy12d2@old* uy12d3@new*) (call-with-values (lambda () (uy1292@rename* uy12cd@x* uy12d2@old* uy12d3@new*)) (lambda (uy12d7@y* uy12d8@old* uy12d9@new*) (list 'call-with-values (list 'lambda '() (car uy12a8@rhs*)) (list 'lambda (append uy12d7@y* uy12d1@y) (uy12af@f (cdr uy12a7@lhs*) (cdr uy12a8@rhs*) uy12d8@old* uy12d9@new*)))))))) uy12cb@ls/false) (let ((uy12dd@t uy12c9@t)) (let ((uy12df@ls/false (uyd90@syntax-dispatch uy12dd@t 'any))) (if uy12df@ls/false (apply (lambda (uy12e1@others) (uye70@syntax-violation '#f '"malformed bindings" uy128d@stx uy12e1@others)) uy12df@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy12dd@t)))))))))))))) uy129d@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy129b@t)))))))))) (set! uy287b@uyd4e@let-values-macro uyd4e@let-values-macro) (set! uyd50@let*-values-macro (lambda (uy12fd@stx) (letrec* ((uy1300@check (lambda (uy132f@x*) (if (not (null? uy132f@x*)) (let ((uy1331@x (car uy132f@x*))) (begin (if (not (uyb89@id? uy1331@x)) (uye70@syntax-violation '#f '"not an identifier" uy12fd@stx uy1331@x) (void)) (uy1300@check (cdr uy132f@x*)) (if (uyb95@bound-id-member? uy1331@x (cdr uy132f@x*)) (uye70@syntax-violation '#f '"duplicate identifier" uy12fd@stx uy1331@x) (void)))) (void))))) (let ((uy1301@t uy12fd@stx)) (let ((uy1303@ls/false (uyd90@syntax-dispatch uy1301@t '(_ () any . each-any)))) (if uy1303@ls/false (apply (lambda (uy1305@b uy1306@b*) (cons* (uyd46@bless 'let) '() uy1305@b uy1306@b*)) uy1303@ls/false) (let ((uy1309@t uy1301@t)) (let ((uy130b@ls/false (uyd90@syntax-dispatch uy1309@t '(_ #(each (any any)) any . each-any)))) (if uy130b@ls/false (apply (lambda (uy130d@lhs* uy130e@rhs* uy130f@b uy1310@b*) (uyd46@bless (let uy1319@f ((uy1315@lhs* uy130d@lhs*) (uy1316@rhs* uy130e@rhs*)) (if (null? uy1315@lhs*) (cons 'begin (cons uy130f@b uy1310@b*)) (let ((uy131b@t (car uy1315@lhs*))) (let ((uy131d@ls/false (uyd90@syntax-dispatch uy131b@t 'each-any))) (if uy131d@ls/false (apply (lambda (uy131f@x*) (begin (uy1300@check uy131f@x*) (list 'call-with-values (list 'lambda '() (car uy1316@rhs*)) (list 'lambda uy131f@x* (uy1319@f (cdr uy1315@lhs*) (cdr uy1316@rhs*)))))) uy131d@ls/false) (let ((uy1321@t uy131b@t)) (let ((uy1323@ls/false (uyd90@syntax-dispatch uy1321@t '#(each+ any () any)))) (if uy1323@ls/false (apply (lambda (uy1325@x* uy1326@x) (begin (uy1300@check (cons uy1326@x uy1325@x*)) (list 'call-with-values (list 'lambda '() (car uy1316@rhs*)) (list 'lambda (append uy1325@x* uy1326@x) (uy1319@f (cdr uy1315@lhs*) (cdr uy1316@rhs*)))))) uy1323@ls/false) (let ((uy1329@t uy1321@t)) (let ((uy132b@ls/false (uyd90@syntax-dispatch uy1329@t 'any))) (if uy132b@ls/false (apply (lambda (uy132d@others) (uye70@syntax-violation '#f '"malformed bindings" uy12fd@stx uy132d@others)) uy132b@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1329@t)))))))))))))) uy130b@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1309@t)))))))))) (set! uy287c@uyd50@let*-values-macro uyd50@let*-values-macro) (set! uyd52@trace-lambda-macro (lambda (uy1333@stx) (let ((uy1335@t uy1333@stx)) (let ((uy1337@ls/false (uyd90@syntax-dispatch uy1335@t '(_ any each-any any . each-any)))) (if uy1337@ls/false (apply (lambda (uy1339@who uy133a@fmls uy133b@b uy133c@b*) (if (uyb91@valid-bound-ids? uy133a@fmls) (uyd46@bless (list 'make-traced-procedure (list 'quote uy1339@who) (cons 'lambda (cons uy133a@fmls (cons uy133b@b uy133c@b*))))) (uyd4a@invalid-fmls-error uy1333@stx uy133a@fmls))) uy1337@ls/false) (let ((uy1341@t uy1335@t)) (let ((uy1343@ls/false (uyd90@syntax-dispatch uy1341@t '(_ any #(each+ any () any) any . each-any)))) (if uy1343@ls/false (apply (lambda (uy1345@who uy1346@fmls uy1347@last uy1348@b uy1349@b*) (if (uyb91@valid-bound-ids? (cons uy1347@last uy1346@fmls)) (uyd46@bless (list 'make-traced-procedure (list 'quote uy1345@who) (cons 'lambda (cons (append uy1346@fmls uy1347@last) (cons uy1348@b uy1349@b*))))) (uyd4a@invalid-fmls-error uy1333@stx (append uy1346@fmls uy1347@last)))) uy1343@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1341@t))))))))) (set! uy287d@uyd52@trace-lambda-macro uyd52@trace-lambda-macro) (set! uyd54@trace-define-macro (lambda (uy134f@stx) (let ((uy1351@t uy134f@stx)) (let ((uy1353@ls/false (uyd90@syntax-dispatch uy1351@t '(_ (any . each-any) any . each-any)))) (if uy1353@ls/false (apply (lambda (uy1355@who uy1356@fmls uy1357@b uy1358@b*) (if (uyb91@valid-bound-ids? uy1356@fmls) (uyd46@bless (list 'define uy1355@who (list 'make-traced-procedure (list 'quote uy1355@who) (cons 'lambda (cons uy1356@fmls (cons uy1357@b uy1358@b*)))))) (uyd4a@invalid-fmls-error uy134f@stx uy1356@fmls))) uy1353@ls/false) (let ((uy135d@t uy1351@t)) (let ((uy135f@ls/false (uyd90@syntax-dispatch uy135d@t '(_ (any . #(each+ any () any)) any . each-any)))) (if uy135f@ls/false (apply (lambda (uy1361@who uy1362@fmls uy1363@last uy1364@b uy1365@b*) (if (uyb91@valid-bound-ids? (cons uy1363@last uy1362@fmls)) (uyd46@bless (list 'define uy1361@who (list 'make-traced-procedure (list 'quote uy1361@who) (cons 'lambda (cons (append uy1362@fmls uy1363@last) (cons uy1364@b uy1365@b*)))))) (uyd4a@invalid-fmls-error uy134f@stx (append uy1362@fmls uy1363@last)))) uy135f@ls/false) (let ((uy136b@t uy135d@t)) (let ((uy136d@ls/false (uyd90@syntax-dispatch uy136b@t '(_ any any)))) (if uy136d@ls/false (apply (lambda (uy136f@who uy1370@expr) (if (uyb89@id? uy136f@who) (uyd46@bless (list 'define uy136f@who (list 'let (list (list 'v uy1370@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote uy136f@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (uye70@syntax-violation '#f '"invalid name" uy134f@stx))) uy136d@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy136b@t)))))))))))) (set! uy287e@uyd54@trace-define-macro uyd54@trace-define-macro) (set! uyd56@trace-define-syntax-macro (lambda (uy1373@stx) (let ((uy1375@t uy1373@stx)) (let ((uy1377@ls/false (uyd90@syntax-dispatch uy1375@t '(_ any any)))) (if uy1377@ls/false (apply (lambda (uy1379@who uy137a@expr) (if (uyb89@id? uy1379@who) (uyd46@bless (list 'define-syntax uy1379@who (list 'make-traced-macro (list 'quote uy1379@who) uy137a@expr))) (uye70@syntax-violation '#f '"invalid name" uy1373@stx))) uy1377@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1375@t)))))) (set! uy287f@uyd56@trace-define-syntax-macro uyd56@trace-define-syntax-macro) (set! uyd58@trace-let/rec-syntax (lambda (uy137d@who) (lambda (uy137f@stx) (let ((uy1381@t uy137f@stx)) (let ((uy1383@ls/false (uyd90@syntax-dispatch uy1381@t '(_ #(each (any any)) any . each-any)))) (if uy1383@ls/false (apply (lambda (uy1385@lhs* uy1386@rhs* uy1387@b uy1388@b*) (if (uyb91@valid-bound-ids? uy1385@lhs*) (let ((uy138d@rhs* (map (lambda (uy138f@lhs uy1390@rhs) (list 'make-traced-macro (list 'quote uy138f@lhs) uy1390@rhs)) uy1385@lhs* uy1386@rhs*))) (uyd46@bless (cons uy137d@who (cons (map list uy1385@lhs* uy138d@rhs*) (cons uy1387@b uy1388@b*))))) (uyd4a@invalid-fmls-error uy137f@stx uy1385@lhs*))) uy1383@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1381@t))))))) (set! uy2880@uyd58@trace-let/rec-syntax uyd58@trace-let/rec-syntax) (set! uyd5a@trace-let-syntax-macro (uyd58@trace-let/rec-syntax 'let-syntax)) (set! uy2881@uyd5a@trace-let-syntax-macro uyd5a@trace-let-syntax-macro) (set! uyd5c@trace-letrec-syntax-macro (uyd58@trace-let/rec-syntax 'letrec-syntax)) (set! uy2882@uyd5c@trace-letrec-syntax-macro uyd5c@trace-letrec-syntax-macro) (set! uyd5e@guard-macro (lambda (uy1393@x) (letrec* ((uy1396@gen-clauses (lambda (uy13ad@con uy13ae@outerk uy13af@clause*) (letrec* ((uy13b4@f (lambda (uy13ed@x uy13ee@k) (let ((uy13f1@t uy13ed@x)) (let ((uy13f3@ls/false (uyd90@syntax-dispatch uy13f1@t '(any #(scheme-id =>) any)))) (if uy13f3@ls/false (apply (lambda (uy13f5@e uy13f6@p) (let ((uy13f9@t (gensym))) (list 'let (list (list uy13f9@t uy13f5@e)) (list 'if uy13f9@t (list uy13f6@p uy13f9@t) uy13ee@k)))) uy13f3@ls/false) (let ((uy13fb@t uy13f1@t)) (let ((uy13fd@ls/false (uyd90@syntax-dispatch uy13fb@t '(any)))) (if uy13fd@ls/false (apply (lambda (uy13ff@e) (let ((uy1401@t (gensym))) (list 'let (list (list uy1401@t uy13ff@e)) (list 'if uy1401@t uy1401@t uy13ee@k)))) uy13fd@ls/false) (let ((uy1403@t uy13fb@t)) (let ((uy1405@ls/false (uyd90@syntax-dispatch uy1403@t '(any any . each-any)))) (if uy1405@ls/false (apply (lambda (uy1407@e uy1408@v uy1409@v*) (list 'if uy1407@e (cons 'begin (cons uy1408@v uy1409@v*)) uy13ee@k)) uy1405@ls/false) (let ((uy140d@t uy1403@t)) (let ((uy140f@ls/false (uyd90@syntax-dispatch uy140d@t '_))) (if uy140f@ls/false (apply (lambda () (uye70@syntax-violation '#f '"invalid guard clause" uy13ed@x)) uy140f@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy140d@t))))))))))))))) (uy13b6@f* (lambda (uy13c3@x*) (let ((uy13c5@t uy13c3@x*)) (let ((uy13c7@ls/false (uyd90@syntax-dispatch uy13c5@t '()))) (if uy13c7@ls/false (apply (lambda () (let ((uy13c9@g (gensym))) (values (list uy13c9@g (list 'lambda '() (list 'raise-continuable uy13ad@con))) uy13c9@g))) uy13c7@ls/false) (let ((uy13cb@t uy13c5@t)) (let ((uy13cd@ls/false (uyd90@syntax-dispatch uy13cb@t '((#(scheme-id else) any . each-any))))) (if uy13cd@ls/false (apply (lambda (uy13cf@e uy13d0@e*) (values (cons 'begin (cons uy13cf@e uy13d0@e*)) '#f)) uy13cd@ls/false) (let ((uy13d3@t uy13cb@t)) (let ((uy13d5@ls/false (uyd90@syntax-dispatch uy13d3@t '(any . any)))) (if uy13d5@ls/false (apply (lambda (uy13d7@cls uy13d8@cls*) (call-with-values (lambda () (uy13b6@f* uy13d8@cls*)) (lambda (uy13df@uy13dc uy13e0@uy13de) (let ((uy13e3@g uy13e0@uy13de) (uy13e4@e uy13df@uy13dc)) (values (uy13b4@f uy13d7@cls uy13e4@e) uy13e3@g))))) uy13d5@ls/false) (let ((uy13e7@t uy13d3@t)) (let ((uy13e9@ls/false (uyd90@syntax-dispatch uy13e7@t 'any))) (if uy13e9@ls/false (apply (lambda (uy13eb@others) (uye70@syntax-violation '#f '"invalid guard clause" uy13eb@others)) uy13e9@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy13e7@t)))))))))))))))) (call-with-values (lambda () (uy13b6@f* uy13af@clause*)) (lambda (uy13bb@uy13b8 uy13bc@uy13ba) (let ((uy13bf@raisek uy13bc@uy13ba) (uy13c0@code uy13bb@uy13b8)) (if uy13bf@raisek (list (list 'call/cc (list 'lambda (list uy13bf@raisek) (list uy13ae@outerk (list 'lambda '() uy13c0@code))))) (list uy13ae@outerk (list 'lambda '() uy13c0@code)))))))))) (let ((uy1397@t uy1393@x)) (let ((uy1399@ls/false (uyd90@syntax-dispatch uy1397@t '(_ (any . each-any) any . each-any)))) (if (and uy1399@ls/false (apply (lambda (uy139b@con uy139c@clause* uy139d@b uy139e@b*) (uyb89@id? uy139b@con)) uy1399@ls/false)) (apply (lambda (uy13a3@con uy13a4@clause* uy13a5@b uy13a6@b*) (let ((uy13ab@outerk (gensym))) (uyd46@bless (list (list 'call/cc (list 'lambda (list uy13ab@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list uy13a3@con) (uy1396@gen-clauses uy13a3@con uy13ab@outerk uy13a4@clause*)) (cons 'lambda (cons '() (cons uy13a5@b uy13a6@b*))))))))))) uy1399@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1397@t))))))) (set! uy2883@uyd5e@guard-macro uyd5e@guard-macro) (set! uyd60@define-enumeration-macro (lambda (uy1411@stx) (letrec* ((uy1414@set? (lambda (uy142d@x) (or (null? uy142d@x) (and (not (memq (car uy142d@x) (cdr uy142d@x))) (uy1414@set? (cdr uy142d@x)))))) (uy1416@remove-dups (lambda (uy142b@ls) (if (null? uy142b@ls) '() (cons (car uy142b@ls) (uy1416@remove-dups (remq (car uy142b@ls) (cdr uy142b@ls)))))))) (let ((uy1417@t uy1411@stx)) (let ((uy1419@ls/false (uyd90@syntax-dispatch uy1417@t '(_ any each-any any)))) (if (and uy1419@ls/false (apply (lambda (uy141b@name uy141c@id* uy141d@maker) (and (uyb89@id? uy141b@name) (uyb89@id? uy141d@maker) (for-all uyb89@id? uy141c@id*))) uy1419@ls/false)) (apply (lambda (uy1421@name uy1422@id* uy1423@maker) (let ((uy1427@name* (uy1416@remove-dups (uye76@syntax->datum uy1422@id*))) (uy1428@mk (gensym))) (uyd46@bless (list 'begin (list 'define uy1428@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote uy1427@name*)))) (list 'define-syntax uy1421@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote uy1427@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote uy1421@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax uy1423@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote uy1423@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote uy1427@name*)) (cons 'syntax-violation (cons (list 'quote uy1423@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons uy1428@mk '('(n* ...))))))))))))) uy1419@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1417@t))))))) (set! uy2884@uyd60@define-enumeration-macro uyd60@define-enumeration-macro) (set! uyd62@time-macro (lambda (uy142f@stx) (let ((uy1431@t uy142f@stx)) (let ((uy1433@ls/false (uyd90@syntax-dispatch uy1431@t '(_ any)))) (if uy1433@ls/false (apply (lambda (uy1435@expr) (uyd46@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() uy1435@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) uy1433@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1431@t)))))) (set! uy2885@uyd62@time-macro uyd62@time-macro) (set! uyd64@delay-macro (lambda (uy1437@stx) (let ((uy1439@t uy1437@stx)) (let ((uy143b@ls/false (uyd90@syntax-dispatch uy1439@t '(_ any)))) (if uy143b@ls/false (apply (lambda (uy143d@expr) (uyd46@bless (list 'make-promise (list 'lambda '() uy143d@expr)))) uy143b@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1439@t)))))) (set! uy2886@uyd64@delay-macro uyd64@delay-macro) (set! uyd66@assert-macro (lambda (uy143f@stx) (let ((uy1441@t uy143f@stx)) (let ((uy1443@ls/false (uyd90@syntax-dispatch uy1441@t '(_ any)))) (if uy1443@ls/false (apply (lambda (uy1445@expr) (let ((uy1447@pos (or (uye68@expression-position uy143f@stx) (uye68@expression-position uy1445@expr)))) (uyd46@bless (list 'let (list (list 'x uy1445@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote uy1445@expr) (list 'quote uy1447@pos))))))) uy1443@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1441@t)))))) (set! uy2887@uyd66@assert-macro uyd66@assert-macro) (set! uyd68@endianness-macro (lambda (uy1449@stx) (let ((uy144b@t uy1449@stx)) (let ((uy144d@ls/false (uyd90@syntax-dispatch uy144b@t '(_ any)))) (if uy144d@ls/false (apply (lambda (uy144f@e) (let ((uy1451@t (uye76@syntax->datum uy144f@e))) (if (memv uy1451@t '(little)) (uyd46@bless ''little) (if (memv uy1451@t '(big)) (uyd46@bless ''big) (uye70@syntax-violation '#f '"endianness must be big or little" uy1449@stx))))) uy144d@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy144b@t)))))) (set! uy2888@uyd68@endianness-macro uyd68@endianness-macro) (set! uyd6a@identifier-syntax-macro (lambda (uy1453@stx) (let ((uy1455@t uy1453@stx)) (let ((uy1457@ls/false (uyd90@syntax-dispatch uy1455@t '(_ any)))) (if uy1457@ls/false (apply (lambda (uy1459@expr) (uyd46@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax uy1459@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax uy1459@expr) '((syntax (e* ...)))))))))) uy1457@ls/false) (let ((uy145b@t uy1455@t)) (let ((uy145d@ls/false (uyd90@syntax-dispatch uy145b@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and uy145d@ls/false (apply (lambda (uy145f@id1 uy1460@expr1 uy1461@id2 uy1462@expr2 uy1463@expr3) (and (uyb89@id? uy145f@id1) (uyb89@id? uy1461@id2) (uyb89@id? uy1462@expr2))) uy145d@ls/false)) (apply (lambda (uy1469@id1 uy146a@expr1 uy146b@id2 uy146c@expr2 uy146d@expr3) (uyd46@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax uy146a@expr1)) (list (list 'set! 'id uy146c@expr2) (list 'syntax uy146d@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons uy146a@expr1 '(e* ...))))))))) uy145d@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy145b@t))))))))) (set! uy2889@uyd6a@identifier-syntax-macro uyd6a@identifier-syntax-macro) (set! uyd6c@do-macro (lambda (uy1473@stx) (letrec* ((uy1476@bind (lambda (uy148d@x) (let ((uy148f@t uy148d@x)) (let ((uy1491@ls/false (uyd90@syntax-dispatch uy148f@t '(any any)))) (if uy1491@ls/false (apply (lambda (uy1493@x uy1494@init) (list uy1493@x uy1494@init uy1493@x)) uy1491@ls/false) (let ((uy1497@t uy148f@t)) (let ((uy1499@ls/false (uyd90@syntax-dispatch uy1497@t '(any any any)))) (if uy1499@ls/false (apply (lambda (uy149b@x uy149c@init uy149d@step) (list uy149b@x uy149c@init uy149d@step)) uy1499@ls/false) (let ((uy14a1@t uy1497@t)) (let ((uy14a3@ls/false (uyd90@syntax-dispatch uy14a1@t '_))) (if uy14a3@ls/false (apply (lambda () (uye70@syntax-violation '#f '"invalid binding" uy1473@stx)) uy14a3@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy14a1@t))))))))))))) (let ((uy1477@t uy1473@stx)) (let ((uy1479@ls/false (uyd90@syntax-dispatch uy1477@t '(_ each-any (any . each-any) . each-any)))) (if uy1479@ls/false (apply (lambda (uy147b@binding* uy147c@test uy147d@expr* uy147e@command*) (let ((uy1483@t (map uy1476@bind uy147b@binding*))) (let ((uy1485@ls/false (uyd90@syntax-dispatch uy1483@t '#(each (any any any))))) (if uy1485@ls/false (apply (lambda (uy1487@x* uy1488@init* uy1489@step*) (if (uyb91@valid-bound-ids? uy1487@x*) (uyd46@bless (list 'letrec (list (list 'loop (list 'lambda uy1487@x* (list 'if uy147c@test (cons 'begin (cons '(if #f #f) uy147d@expr*)) (cons 'begin (append uy147e@command* (list (cons 'loop uy1489@step*)))))))) (cons 'loop uy1488@init*))) (uye70@syntax-violation '#f '"invalid bindings" uy1473@stx))) uy1485@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1483@t))))) uy1479@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1477@t))))))) (set! uy288a@uyd6c@do-macro uyd6c@do-macro) (set! uyd6e@let*-macro (lambda (uy14a5@stx) (let ((uy14a7@t uy14a5@stx)) (let ((uy14a9@ls/false (uyd90@syntax-dispatch uy14a7@t '(_ #(each (any any)) any . each-any)))) (if (and uy14a9@ls/false (apply (lambda (uy14ab@lhs* uy14ac@rhs* uy14ad@b uy14ae@b*) (for-all uyb89@id? uy14ab@lhs*)) uy14a9@ls/false)) (apply (lambda (uy14b3@lhs* uy14b4@rhs* uy14b5@b uy14b6@b*) (uyd46@bless (let uy14bd@f ((uy14bb@x* (map list uy14b3@lhs* uy14b4@rhs*))) (if (null? uy14bb@x*) (cons 'let (cons '() (cons uy14b5@b uy14b6@b*))) (list 'let (list (car uy14bb@x*)) (uy14bd@f (cdr uy14bb@x*))))))) uy14a9@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy14a7@t)))))) (set! uy288b@uyd6e@let*-macro uyd6e@let*-macro) (set! uyd70@or-macro (lambda (uy14bf@stx) (let ((uy14c1@t uy14bf@stx)) (let ((uy14c3@ls/false (uyd90@syntax-dispatch uy14c1@t '(_)))) (if uy14c3@ls/false (apply (lambda () '#f) uy14c3@ls/false) (let ((uy14c5@t uy14c1@t)) (let ((uy14c7@ls/false (uyd90@syntax-dispatch uy14c5@t '(_ any . each-any)))) (if uy14c7@ls/false (apply (lambda (uy14c9@e uy14ca@e*) (uyd46@bless (let uy14d1@f ((uy14cd@e uy14c9@e) (uy14ce@e* uy14ca@e*)) (if (null? uy14ce@e*) (list 'begin '#f uy14cd@e) (list 'let (list (list 't uy14cd@e)) (list 'if 't 't (uy14d1@f (car uy14ce@e*) (cdr uy14ce@e*)))))))) uy14c7@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy14c5@t))))))))) (set! uy288c@uyd70@or-macro uyd70@or-macro) (set! uyd72@and-macro (lambda (uy14d3@stx) (let ((uy14d5@t uy14d3@stx)) (let ((uy14d7@ls/false (uyd90@syntax-dispatch uy14d5@t '(_)))) (if uy14d7@ls/false (apply (lambda () '#t) uy14d7@ls/false) (let ((uy14d9@t uy14d5@t)) (let ((uy14db@ls/false (uyd90@syntax-dispatch uy14d9@t '(_ any . each-any)))) (if uy14db@ls/false (apply (lambda (uy14dd@e uy14de@e*) (uyd46@bless (let uy14e5@f ((uy14e1@e uy14dd@e) (uy14e2@e* uy14de@e*)) (if (null? uy14e2@e*) (list 'begin '#f uy14e1@e) (cons 'if (cons uy14e1@e (cons (uy14e5@f (car uy14e2@e*) (cdr uy14e2@e*)) '(#f)))))))) uy14db@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy14d9@t))))))))) (set! uy288d@uyd72@and-macro uyd72@and-macro) (set! uyd74@cond-macro (lambda (uy14e7@stx) (let ((uy14e9@t uy14e7@stx)) (let ((uy14eb@ls/false (uyd90@syntax-dispatch uy14e9@t '(_ any . each-any)))) (if uy14eb@ls/false (apply (lambda (uy14ed@cls uy14ee@cls*) (uyd46@bless (let uy14f5@f ((uy14f1@cls uy14ed@cls) (uy14f2@cls* uy14ee@cls*)) (if (null? uy14f2@cls*) (let ((uy14f7@t uy14f1@cls)) (let ((uy14f9@ls/false (uyd90@syntax-dispatch uy14f7@t '(#(scheme-id else) any . each-any)))) (if uy14f9@ls/false (apply (lambda (uy14fb@e uy14fc@e*) (cons 'begin (cons uy14fb@e uy14fc@e*))) uy14f9@ls/false) (let ((uy14ff@t uy14f7@t)) (let ((uy1501@ls/false (uyd90@syntax-dispatch uy14ff@t '(any #(scheme-id =>) any)))) (if uy1501@ls/false (apply (lambda (uy1503@e uy1504@p) (list 'let (list (list 't uy1503@e)) (list 'if 't (cons uy1504@p '(t))))) uy1501@ls/false) (let ((uy1507@t uy14ff@t)) (let ((uy1509@ls/false (uyd90@syntax-dispatch uy1507@t '(any)))) (if uy1509@ls/false (apply (lambda (uy150b@e) (cons 'or (cons uy150b@e '((if #f #f))))) uy1509@ls/false) (let ((uy150d@t uy1507@t)) (let ((uy150f@ls/false (uyd90@syntax-dispatch uy150d@t '(any . each-any)))) (if uy150f@ls/false (apply (lambda (uy1511@e uy1512@e*) (list 'if uy1511@e (cons 'begin uy1512@e*))) uy150f@ls/false) (let ((uy1515@t uy150d@t)) (let ((uy1517@ls/false (uyd90@syntax-dispatch uy1515@t '_))) (if uy1517@ls/false (apply (lambda () (uye70@syntax-violation '#f '"invalid last clause" uy14e7@stx)) uy1517@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1515@t)))))))))))))))) (let ((uy1519@t uy14f1@cls)) (let ((uy151b@ls/false (uyd90@syntax-dispatch uy1519@t '(#(scheme-id else) any . each-any)))) (if uy151b@ls/false (apply (lambda (uy151d@e uy151e@e*) (uye70@syntax-violation '#f '"incorrect position of keyword else" uy14e7@stx)) uy151b@ls/false) (let ((uy1521@t uy1519@t)) (let ((uy1523@ls/false (uyd90@syntax-dispatch uy1521@t '(any #(scheme-id =>) any)))) (if uy1523@ls/false (apply (lambda (uy1525@e uy1526@p) (list 'let (list (list 't uy1525@e)) (list 'if 't (cons uy1526@p '(t)) (uy14f5@f (car uy14f2@cls*) (cdr uy14f2@cls*))))) uy1523@ls/false) (let ((uy1529@t uy1521@t)) (let ((uy152b@ls/false (uyd90@syntax-dispatch uy1529@t '(any)))) (if uy152b@ls/false (apply (lambda (uy152d@e) (list 'or uy152d@e (uy14f5@f (car uy14f2@cls*) (cdr uy14f2@cls*)))) uy152b@ls/false) (let ((uy152f@t uy1529@t)) (let ((uy1531@ls/false (uyd90@syntax-dispatch uy152f@t '(any . each-any)))) (if uy1531@ls/false (apply (lambda (uy1533@e uy1534@e*) (list 'if uy1533@e (cons 'begin uy1534@e*) (uy14f5@f (car uy14f2@cls*) (cdr uy14f2@cls*)))) uy1531@ls/false) (let ((uy1537@t uy152f@t)) (let ((uy1539@ls/false (uyd90@syntax-dispatch uy1537@t '_))) (if uy1539@ls/false (apply (lambda () (uye70@syntax-violation '#f '"invalid last clause" uy14e7@stx)) uy1539@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1537@t)))))))))))))))))))) uy14eb@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy14e9@t)))))) (set! uy288e@uyd74@cond-macro uyd74@cond-macro) (set! uyd76@do-include (lambda (uy153b@stx uy153c@id uy153d@filename) (let ((uy1541@filename (uyb9d@stx->datum uy153d@filename))) (begin (if (not (and (string? uy1541@filename) (uyb89@id? uy153c@id))) (uye70@syntax-violation '#f '"invalid syntax" uy153b@stx) (void)) (cons (uyd46@bless 'begin) (with-input-from-file uy1541@filename (lambda () (let uy1545@f ((uy1543@ls '())) (let ((uy1547@x (uy6cb@uy59b@read-annotated))) (if (eof-object? uy1547@x) (reverse uy1543@ls) (uy1545@f (cons (uyb69@datum->stx uy153c@id uy1547@x) uy1543@ls)))))))))))) (set! uy288f@uyd76@do-include uyd76@do-include) (set! uyd78@include-macro (lambda (uy1549@e) (let ((uy154b@t uy1549@e)) (let ((uy154d@ls/false (uyd90@syntax-dispatch uy154b@t '(any any)))) (if uy154d@ls/false (apply (lambda (uy154f@id uy1550@filename) (uyd76@do-include uy1549@e uy154f@id uy1550@filename)) uy154d@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy154b@t)))))) (set! uy2890@uyd78@include-macro uyd78@include-macro) (set! uyd7a@include-into-macro (lambda (uy1553@e) (let ((uy1555@t uy1553@e)) (let ((uy1557@ls/false (uyd90@syntax-dispatch uy1555@t '(_ any any)))) (if uy1557@ls/false (apply (lambda (uy1559@id uy155a@filename) (uyd76@do-include uy1553@e uy1559@id uy155a@filename)) uy1557@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1555@t)))))) (set! uy2891@uyd7a@include-into-macro uyd7a@include-into-macro) (set! uyd7c@syntax-rules-macro (lambda (uy155d@e) (let ((uy155f@t uy155d@e)) (let ((uy1561@ls/false (uyd90@syntax-dispatch uy155f@t '(_ each-any . #(each (any any)))))) (if uy1561@ls/false (apply (lambda (uy1563@lits uy1564@pat* uy1565@tmp*) (begin (uyd96@verify-literals uy1563@lits uy155d@e) (uyd46@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons uy1563@lits (map (lambda (uy1569@pat uy156a@tmp) (let ((uy156d@t uy1569@pat)) (let ((uy156f@ls/false (uyd90@syntax-dispatch uy156d@t '(_ . any)))) (if uy156f@ls/false (apply (lambda (uy1571@rest) (list (cons 'g uy1571@rest) (list 'syntax uy156a@tmp))) uy156f@ls/false) (let ((uy1573@t uy156d@t)) (let ((uy1575@ls/false (uyd90@syntax-dispatch uy1573@t '_))) (if uy1575@ls/false (apply (lambda () (uye70@syntax-violation '#f '"invalid syntax-rules pattern" uy155d@e uy1569@pat)) uy1575@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1573@t)))))))) uy1564@pat* uy1565@tmp*)))))))) uy1561@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy155f@t)))))) (set! uy2892@uyd7c@syntax-rules-macro uyd7c@syntax-rules-macro) (set! uyd7e@quasiquote-macro (letrec* ((uy1578@datum (lambda (uy1679@x) (list (uyd18@scheme-stx 'quote) (uyb71@mkstx uy1679@x uyb0d@top-mark* '() '())))) (uy1594@quasicons* (lambda (uy1671@x uy1672@y) (let uy1677@f ((uy1675@x uy1671@x)) (if (null? uy1675@x) uy1672@y (uy1596@quasicons (car uy1675@x) (uy1677@f (cdr uy1675@x))))))) (uy1596@quasicons (lambda (uy164b@x uy164c@y) (let ((uy164f@t uy164c@y)) (let ((uy1651@ls/false (uyd90@syntax-dispatch uy164f@t '(#(scheme-id quote) any)))) (if uy1651@ls/false (apply (lambda (uy1653@dy) (let ((uy1655@t uy164b@x)) (let ((uy1657@ls/false (uyd90@syntax-dispatch uy1655@t '(#(scheme-id quote) any)))) (if uy1657@ls/false (apply (lambda (uy1659@dx) (list (uyd18@scheme-stx 'quote) (cons uy1659@dx uy1653@dy))) uy1657@ls/false) (let ((uy165b@t uy1655@t)) (let ((uy165d@ls/false (uyd90@syntax-dispatch uy165b@t '_))) (if uy165d@ls/false (apply (lambda () (let ((uy165f@t uy1653@dy)) (let ((uy1661@ls/false (uyd90@syntax-dispatch uy165f@t '()))) (if uy1661@ls/false (apply (lambda () (list (uyd18@scheme-stx 'list) uy164b@x)) uy1661@ls/false) (let ((uy1663@t uy165f@t)) (let ((uy1665@ls/false (uyd90@syntax-dispatch uy1663@t '_))) (if uy1665@ls/false (apply (lambda () (list (uyd18@scheme-stx 'cons) uy164b@x uy164c@y)) uy1665@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1663@t)))))))) uy165d@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy165b@t)))))))) uy1651@ls/false) (let ((uy1667@t uy164f@t)) (let ((uy1669@ls/false (uyd90@syntax-dispatch uy1667@t '(#(scheme-id list) . each-any)))) (if uy1669@ls/false (apply (lambda (uy166b@stuff) (cons* (uyd18@scheme-stx 'list) uy164b@x uy166b@stuff)) uy1669@ls/false) (let ((uy166d@t uy1667@t)) (let ((uy166f@ls/false (uyd90@syntax-dispatch uy166d@t '_))) (if uy166f@ls/false (apply (lambda () (list (uyd18@scheme-stx 'cons) uy164b@x uy164c@y)) uy166f@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy166d@t)))))))))))) (uy1598@quasiappend (lambda (uy1631@x uy1632@y) (let ((uy1635@ls (let uy1639@f ((uy1637@x uy1631@x)) (if (null? uy1637@x) (let ((uy163b@t uy1632@y)) (let ((uy163d@ls/false (uyd90@syntax-dispatch uy163b@t '(#(scheme-id quote) ())))) (if uy163d@ls/false (apply (lambda () '()) uy163d@ls/false) (let ((uy163f@t uy163b@t)) (let ((uy1641@ls/false (uyd90@syntax-dispatch uy163f@t '_))) (if uy1641@ls/false (apply (lambda () (list uy1632@y)) uy1641@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy163f@t))))))) (let ((uy1643@t (car uy1637@x))) (let ((uy1645@ls/false (uyd90@syntax-dispatch uy1643@t '(#(scheme-id quote) ())))) (if uy1645@ls/false (apply (lambda () (uy1639@f (cdr uy1637@x))) uy1645@ls/false) (let ((uy1647@t uy1643@t)) (let ((uy1649@ls/false (uyd90@syntax-dispatch uy1647@t '_))) (if uy1649@ls/false (apply (lambda () (cons (car uy1637@x) (uy1639@f (cdr uy1637@x)))) uy1649@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1647@t))))))))))) (if (null? uy1635@ls) (list (uyd18@scheme-stx 'quote) '()) (if (null? (cdr uy1635@ls)) (car uy1635@ls) (cons* (uyd18@scheme-stx 'append) uy1635@ls)))))) (uy159a@quasivector (lambda (uy15ff@x) (let ((uy1601@pat-x uy15ff@x)) (let ((uy1603@t uy1601@pat-x)) (let ((uy1605@ls/false (uyd90@syntax-dispatch uy1603@t '(#(scheme-id quote) each-any)))) (if uy1605@ls/false (apply (lambda (uy1607@x*) (list (uyd18@scheme-stx 'quote) (list->vector uy1607@x*))) uy1605@ls/false) (let ((uy1609@t uy1603@t)) (let ((uy160b@ls/false (uyd90@syntax-dispatch uy1609@t '_))) (if uy160b@ls/false (apply (lambda () (let uy1613@f ((uy160d@x uy15ff@x) (uy160e@k (lambda (uy1611@ls) (cons* (uyd18@scheme-stx 'vector) uy1611@ls)))) (let ((uy1615@t uy160d@x)) (let ((uy1617@ls/false (uyd90@syntax-dispatch uy1615@t '(#(scheme-id quote) each-any)))) (if uy1617@ls/false (apply (lambda (uy1619@x*) (uy160e@k (map (lambda (uy161b@x) (list (uyd18@scheme-stx 'quote) uy161b@x)) uy1619@x*))) uy1617@ls/false) (let ((uy161d@t uy1615@t)) (let ((uy161f@ls/false (uyd90@syntax-dispatch uy161d@t '(#(scheme-id list) . each-any)))) (if uy161f@ls/false (apply (lambda (uy1621@x*) (uy160e@k uy1621@x*)) uy161f@ls/false) (let ((uy1623@t uy161d@t)) (let ((uy1625@ls/false (uyd90@syntax-dispatch uy1623@t '(#(scheme-id cons) any any)))) (if uy1625@ls/false (apply (lambda (uy1627@x uy1628@y) (uy1613@f uy1628@y (lambda (uy162b@ls) (uy160e@k (cons uy1627@x uy162b@ls))))) uy1625@ls/false) (let ((uy162d@t uy1623@t)) (let ((uy162f@ls/false (uyd90@syntax-dispatch uy162d@t '_))) (if uy162f@ls/false (apply (lambda () (list (uyd18@scheme-stx 'list->vector) uy1601@pat-x)) uy162f@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy162d@t))))))))))))))) uy160b@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1609@t)))))))))) (uy159c@vquasi (lambda (uy15dd@p uy15de@lev) (let ((uy15e1@t uy15dd@p)) (let ((uy15e3@ls/false (uyd90@syntax-dispatch uy15e1@t '(any . any)))) (if uy15e3@ls/false (apply (lambda (uy15e5@p uy15e6@q) (let ((uy15e9@t uy15e5@p)) (let ((uy15eb@ls/false (uyd90@syntax-dispatch uy15e9@t '(#(scheme-id unquote) . each-any)))) (if uy15eb@ls/false (apply (lambda (uy15ed@p) (if (= uy15de@lev '0) (uy1594@quasicons* uy15ed@p (uy159c@vquasi uy15e6@q uy15de@lev)) (uy1596@quasicons (uy1596@quasicons (uy1578@datum 'unquote) (uy159e@quasi uy15ed@p (- uy15de@lev '1))) (uy159c@vquasi uy15e6@q uy15de@lev)))) uy15eb@ls/false) (let ((uy15ef@t uy15e9@t)) (let ((uy15f1@ls/false (uyd90@syntax-dispatch uy15ef@t '(#(scheme-id unquote-splicing) . each-any)))) (if uy15f1@ls/false (apply (lambda (uy15f3@p) (if (= uy15de@lev '0) (uy1598@quasiappend uy15f3@p (uy159c@vquasi uy15e6@q uy15de@lev)) (uy1596@quasicons (uy1596@quasicons (uy1578@datum 'unquote-splicing) (uy159e@quasi uy15f3@p (- uy15de@lev '1))) (uy159c@vquasi uy15e6@q uy15de@lev)))) uy15f1@ls/false) (let ((uy15f5@t uy15ef@t)) (let ((uy15f7@ls/false (uyd90@syntax-dispatch uy15f5@t 'any))) (if uy15f7@ls/false (apply (lambda (uy15f9@p) (uy1596@quasicons (uy159e@quasi uy15f9@p uy15de@lev) (uy159c@vquasi uy15e6@q uy15de@lev))) uy15f7@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy15f5@t))))))))))) uy15e3@ls/false) (let ((uy15fb@t uy15e1@t)) (let ((uy15fd@ls/false (uyd90@syntax-dispatch uy15fb@t '()))) (if uy15fd@ls/false (apply (lambda () (list (uyd18@scheme-stx 'quote) '())) uy15fd@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy15fb@t))))))))) (uy159e@quasi (lambda (uy15a7@p uy15a8@lev) (let ((uy15ab@t uy15a7@p)) (let ((uy15ad@ls/false (uyd90@syntax-dispatch uy15ab@t '(#(scheme-id unquote) any)))) (if uy15ad@ls/false (apply (lambda (uy15af@p) (if (= uy15a8@lev '0) uy15af@p (uy1596@quasicons (uy1578@datum 'unquote) (uy159e@quasi (list uy15af@p) (- uy15a8@lev '1))))) uy15ad@ls/false) (let ((uy15b1@t uy15ab@t)) (let ((uy15b3@ls/false (uyd90@syntax-dispatch uy15b1@t '((#(scheme-id unquote) . each-any) . any)))) (if uy15b3@ls/false (apply (lambda (uy15b5@p uy15b6@q) (if (= uy15a8@lev '0) (uy1594@quasicons* uy15b5@p (uy159e@quasi uy15b6@q uy15a8@lev)) (uy1596@quasicons (uy1596@quasicons (uy1578@datum 'unquote) (uy159e@quasi uy15b5@p (- uy15a8@lev '1))) (uy159e@quasi uy15b6@q uy15a8@lev)))) uy15b3@ls/false) (let ((uy15b9@t uy15b1@t)) (let ((uy15bb@ls/false (uyd90@syntax-dispatch uy15b9@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if uy15bb@ls/false (apply (lambda (uy15bd@p uy15be@q) (if (= uy15a8@lev '0) (uy1598@quasiappend uy15bd@p (uy159e@quasi uy15be@q uy15a8@lev)) (uy1596@quasicons (uy1596@quasicons (uy1578@datum 'unquote-splicing) (uy159e@quasi uy15bd@p (- uy15a8@lev '1))) (uy159e@quasi uy15be@q uy15a8@lev)))) uy15bb@ls/false) (let ((uy15c1@t uy15b9@t)) (let ((uy15c3@ls/false (uyd90@syntax-dispatch uy15c1@t '(#(scheme-id quasiquote) any)))) (if uy15c3@ls/false (apply (lambda (uy15c5@p) (uy1596@quasicons (uy1578@datum 'quasiquote) (uy159e@quasi (list uy15c5@p) (+ uy15a8@lev '1)))) uy15c3@ls/false) (let ((uy15c7@t uy15c1@t)) (let ((uy15c9@ls/false (uyd90@syntax-dispatch uy15c7@t '(any . any)))) (if uy15c9@ls/false (apply (lambda (uy15cb@p uy15cc@q) (uy1596@quasicons (uy159e@quasi uy15cb@p uy15a8@lev) (uy159e@quasi uy15cc@q uy15a8@lev))) uy15c9@ls/false) (let ((uy15cf@t uy15c7@t)) (let ((uy15d1@ls/false (uyd90@syntax-dispatch uy15cf@t '#(vector each-any)))) (if (and uy15d1@ls/false (apply (lambda (uy15d3@x) (not (uyb55@stx? uy15d3@x))) uy15d1@ls/false)) (apply (lambda (uy15d5@x) (uy159a@quasivector (uy159c@vquasi uy15d5@x uy15a8@lev))) uy15d1@ls/false) (let ((uy15d7@t uy15cf@t)) (let ((uy15d9@ls/false (uyd90@syntax-dispatch uy15d7@t 'any))) (if uy15d9@ls/false (apply (lambda (uy15db@p) (list (uyd18@scheme-stx 'quote) uy15db@p)) uy15d9@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy15d7@t))))))))))))))))))))))))) (lambda (uy159f@x) (let ((uy15a1@t uy159f@x)) (let ((uy15a3@ls/false (uyd90@syntax-dispatch uy15a1@t '(_ any)))) (if uy15a3@ls/false (apply (lambda (uy15a5@e) (uy159e@quasi uy15a5@e '0)) uy15a3@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy15a1@t))))))) (set! uy2893@uyd7e@quasiquote-macro uyd7e@quasiquote-macro) (set! uyd80@quasisyntax-macro (letrec* ((uy167c@quasi (lambda (uy1697@p uy1698@lev) (let ((uy169b@t uy1697@p)) (let ((uy169d@ls/false (uyd90@syntax-dispatch uy169b@t '(#(scheme-id unsyntax) any)))) (if uy169d@ls/false (apply (lambda (uy169f@p) (if (= uy1698@lev '0) (let ((uy16a1@g (gensym))) (values (list uy16a1@g) (list uy169f@p) uy16a1@g)) (call-with-values (lambda () (uy167c@quasi uy169f@p (- uy1698@lev '1))) (lambda (uy16a9@uy16a4 uy16aa@uy16a6 uy16ab@uy16a8) (let ((uy16af@p uy16ab@uy16a8) (uy16b0@rhs* uy16aa@uy16a6) (uy16b1@lhs* uy16a9@uy16a4)) (values uy16b1@lhs* uy16b0@rhs* (list 'unsyntax uy16af@p))))))) uy169d@ls/false) (let ((uy16b5@t uy169b@t)) (let ((uy16b7@ls/false (uyd90@syntax-dispatch uy16b5@t '#(scheme-id unsyntax)))) (if (and uy16b7@ls/false (apply (lambda () (= uy1698@lev '0)) uy16b7@ls/false)) (apply (lambda () (uye70@syntax-violation '#f '"incorrect use of unsyntax" uy1697@p)) uy16b7@ls/false) (let ((uy16b9@t uy16b5@t)) (let ((uy16bb@ls/false (uyd90@syntax-dispatch uy16b9@t '((#(scheme-id unsyntax) . each-any) . any)))) (if uy16bb@ls/false (apply (lambda (uy16bd@p* uy16be@q) (call-with-values (lambda () (uy167c@quasi uy16be@q uy1698@lev)) (lambda (uy16c7@uy16c2 uy16c8@uy16c4 uy16c9@uy16c6) (let ((uy16cd@q uy16c9@uy16c6) (uy16ce@rhs* uy16c8@uy16c4) (uy16cf@lhs* uy16c7@uy16c2)) (if (= uy1698@lev '0) (let ((uy16d3@g* (map (lambda (uy16d5@x) (gensym)) uy16bd@p*))) (values (append uy16d3@g* uy16cf@lhs*) (append uy16bd@p* uy16ce@rhs*) (append uy16d3@g* uy16cd@q))) (call-with-values (lambda () (uy167c@quasi uy16bd@p* (- uy1698@lev '1))) (lambda (uy16dd@uy16d8 uy16de@uy16da uy16df@uy16dc) (let ((uy16e3@p* uy16df@uy16dc) (uy16e4@rhs2* uy16de@uy16da) (uy16e5@lhs2* uy16dd@uy16d8)) (values (append uy16e5@lhs2* uy16cf@lhs*) (append uy16e4@rhs2* uy16ce@rhs*) (cons (cons 'unsyntax uy16e3@p*) uy16cd@q)))))))))) uy16bb@ls/false) (let ((uy16e9@t uy16b9@t)) (let ((uy16eb@ls/false (uyd90@syntax-dispatch uy16e9@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if uy16eb@ls/false (apply (lambda (uy16ed@p* uy16ee@q) (call-with-values (lambda () (uy167c@quasi uy16ee@q uy1698@lev)) (lambda (uy16f7@uy16f2 uy16f8@uy16f4 uy16f9@uy16f6) (let ((uy16fd@q uy16f9@uy16f6) (uy16fe@rhs* uy16f8@uy16f4) (uy16ff@lhs* uy16f7@uy16f2)) (if (= uy1698@lev '0) (let ((uy1703@g* (map (lambda (uy1705@x) (gensym)) uy16ed@p*))) (values (append (map (lambda (uy1707@g) (cons uy1707@g '(...))) uy1703@g*) uy16ff@lhs*) (append uy16ed@p* uy16fe@rhs*) (append (apply append (map (lambda (uy1709@g) (cons uy1709@g '(...))) uy1703@g*)) uy16fd@q))) (call-with-values (lambda () (uy167c@quasi uy16ed@p* (- uy1698@lev '1))) (lambda (uy1711@uy170c uy1712@uy170e uy1713@uy1710) (let ((uy1717@p* uy1713@uy1710) (uy1718@rhs2* uy1712@uy170e) (uy1719@lhs2* uy1711@uy170c)) (values (append uy1719@lhs2* uy16ff@lhs*) (append uy1718@rhs2* uy16fe@rhs*) (cons (cons 'unsyntax-splicing uy1717@p*) uy16fd@q)))))))))) uy16eb@ls/false) (let ((uy171d@t uy16e9@t)) (let ((uy171f@ls/false (uyd90@syntax-dispatch uy171d@t '#(scheme-id unsyntax-splicing)))) (if (and uy171f@ls/false (apply (lambda () (= uy1698@lev '0)) uy171f@ls/false)) (apply (lambda () (uye70@syntax-violation '#f '"incorrect use of unsyntax-splicing" uy1697@p)) uy171f@ls/false) (let ((uy1721@t uy171d@t)) (let ((uy1723@ls/false (uyd90@syntax-dispatch uy1721@t '(#(scheme-id quasisyntax) any)))) (if uy1723@ls/false (apply (lambda (uy1725@p) (call-with-values (lambda () (uy167c@quasi uy1725@p (+ uy1698@lev '1))) (lambda (uy172d@uy1728 uy172e@uy172a uy172f@uy172c) (let ((uy1733@p uy172f@uy172c) (uy1734@rhs* uy172e@uy172a) (uy1735@lhs* uy172d@uy1728)) (values uy1735@lhs* uy1734@rhs* (list 'quasisyntax uy1733@p)))))) uy1723@ls/false) (let ((uy1739@t uy1721@t)) (let ((uy173b@ls/false (uyd90@syntax-dispatch uy1739@t '(any . any)))) (if uy173b@ls/false (apply (lambda (uy173d@p uy173e@q) (call-with-values (lambda () (uy167c@quasi uy173d@p uy1698@lev)) (lambda (uy174d@uy1742 uy174e@uy1744 uy174f@uy1746) (call-with-values (lambda () (uy167c@quasi uy173e@q uy1698@lev)) (lambda (uy1753@uy1748 uy1754@uy174a uy1755@uy174c) (let ((uy1759@q uy1755@uy174c) (uy175a@rhs2* uy1754@uy174a) (uy175b@lhs2* uy1753@uy1748) (uy175c@p uy174f@uy1746) (uy175d@rhs* uy174e@uy1744) (uy175e@lhs* uy174d@uy1742)) (values (append uy175b@lhs2* uy175e@lhs*) (append uy175a@rhs2* uy175d@rhs*) (cons uy175c@p uy1759@q)))))))) uy173b@ls/false) (let ((uy1765@t uy1739@t)) (let ((uy1767@ls/false (uyd90@syntax-dispatch uy1765@t '#(vector each-any)))) (if uy1767@ls/false (apply (lambda (uy1769@x*) (call-with-values (lambda () (uy167c@quasi uy1769@x* uy1698@lev)) (lambda (uy1771@uy176c uy1772@uy176e uy1773@uy1770) (let ((uy1777@x* uy1773@uy1770) (uy1778@rhs* uy1772@uy176e) (uy1779@lhs* uy1771@uy176c)) (values uy1779@lhs* uy1778@rhs* (list->vector uy1777@x*)))))) uy1767@ls/false) (let ((uy177d@t uy1765@t)) (let ((uy177f@ls/false (uyd90@syntax-dispatch uy177d@t '_))) (if uy177f@ls/false (apply (lambda () (values '() '() uy1697@p)) uy177f@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy177d@t))))))))))))))))))))))))))))))) (lambda (uy167d@x) (let ((uy167f@t uy167d@x)) (let ((uy1681@ls/false (uyd90@syntax-dispatch uy167f@t '(_ any)))) (if uy1681@ls/false (apply (lambda (uy1683@e) (call-with-values (lambda () (uy167c@quasi uy1683@e '0)) (lambda (uy168b@uy1686 uy168c@uy1688 uy168d@uy168a) (let ((uy1691@v uy168d@uy168a) (uy1692@rhs* uy168c@uy1688) (uy1693@lhs* uy168b@uy1686)) (uyd46@bless (list 'syntax-case (cons 'list uy1692@rhs*) '() (list uy1693@lhs* (list 'syntax uy1691@v)))))))) uy1681@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy167f@t))))))) (set! uy2894@uyd80@quasisyntax-macro uyd80@quasisyntax-macro) (set! uyd82@define-struct-macro (lambda (uy1781@stx) (uye70@syntax-violation '#f '"define-struct not supported" uy1781@stx))) (set! uy2895@uyd82@define-struct-macro uyd82@define-struct-macro) (set! uyd84@define-record-type-macro (lambda (uy1783@x) (letrec* ((uy1786@id (lambda (uy1979@ctxt . uy197b@str*) (uye74@datum->syntax uy1979@ctxt (string->symbol (apply string-append (map (lambda (uy197d@x) (if (symbol? uy197d@x) (symbol->string uy197d@x) (if (string? uy197d@x) uy197d@x (assertion-violation 'define-record-type '"BUG")))) uy197b@str*)))))) (uy1788@get-record-name (lambda (uy1967@spec) (let ((uy1969@t uy1967@spec)) (let ((uy196b@ls/false (uyd90@syntax-dispatch uy1969@t '(any any any)))) (if uy196b@ls/false (apply (lambda (uy196d@foo uy196e@make-foo uy196f@foo?) uy196d@foo) uy196b@ls/false) (let ((uy1973@t uy1969@t)) (let ((uy1975@ls/false (uyd90@syntax-dispatch uy1973@t 'any))) (if uy1975@ls/false (apply (lambda (uy1977@foo) uy1977@foo) uy1975@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1973@t))))))))) (uy178a@get-record-constructor-name (lambda (uy1953@spec) (let ((uy1955@t uy1953@spec)) (let ((uy1957@ls/false (uyd90@syntax-dispatch uy1955@t '(any any any)))) (if uy1957@ls/false (apply (lambda (uy1959@foo uy195a@make-foo uy195b@foo?) uy195a@make-foo) uy1957@ls/false) (let ((uy195f@t uy1955@t)) (let ((uy1961@ls/false (uyd90@syntax-dispatch uy195f@t 'any))) (if (and uy1961@ls/false (apply (lambda (uy1963@foo) (uyb89@id? uy1963@foo)) uy1961@ls/false)) (apply (lambda (uy1965@foo) (uy1786@id uy1965@foo '"make-" (uyb9d@stx->datum uy1965@foo))) uy1961@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy195f@t))))))))) (uy178c@get-record-predicate-name (lambda (uy193f@spec) (let ((uy1941@t uy193f@spec)) (let ((uy1943@ls/false (uyd90@syntax-dispatch uy1941@t '(any any any)))) (if uy1943@ls/false (apply (lambda (uy1945@foo uy1946@make-foo uy1947@foo?) uy1947@foo?) uy1943@ls/false) (let ((uy194b@t uy1941@t)) (let ((uy194d@ls/false (uyd90@syntax-dispatch uy194b@t 'any))) (if (and uy194d@ls/false (apply (lambda (uy194f@foo) (uyb89@id? uy194f@foo)) uy194d@ls/false)) (apply (lambda (uy1951@foo) (uy1786@id uy1951@foo (uyb9d@stx->datum uy1951@foo) '"?")) uy194d@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy194b@t))))))))) (uy178e@get-clause (lambda (uy192d@id uy192e@ls) (let ((uy1931@t uy192e@ls)) (let ((uy1933@ls/false (uyd90@syntax-dispatch uy1931@t '()))) (if uy1933@ls/false (apply (lambda () '#f) uy1933@ls/false) (let ((uy1935@t uy1931@t)) (let ((uy1937@ls/false (uyd90@syntax-dispatch uy1935@t '((any . any) . any)))) (if uy1937@ls/false (apply (lambda (uy1939@x uy193a@rest uy193b@ls) (if (uyb8f@free-id=? (uyd46@bless uy192d@id) uy1939@x) (cons uy1939@x uy193a@rest) (uy178e@get-clause uy192d@id uy193b@ls))) uy1937@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1935@t))))))))) (uy1790@foo-rtd-code (lambda (uy18db@name uy18dc@clause* uy18dd@parent-rtd-code) (letrec* ((uy18e2@convert-field-spec* (lambda (uy1913@ls) (list->vector (map (lambda (uy1915@x) (let ((uy1917@t uy1915@x)) (let ((uy1919@ls/false (uyd90@syntax-dispatch uy1917@t '(#(scheme-id mutable) any . any)))) (if uy1919@ls/false (apply (lambda (uy191b@name uy191c@rest) (list 'mutable uy191b@name)) uy1919@ls/false) (let ((uy191f@t uy1917@t)) (let ((uy1921@ls/false (uyd90@syntax-dispatch uy191f@t '(#(scheme-id immutable) any . any)))) (if uy1921@ls/false (apply (lambda (uy1923@name uy1924@rest) (list 'immutable uy1923@name)) uy1921@ls/false) (let ((uy1927@t uy191f@t)) (let ((uy1929@ls/false (uyd90@syntax-dispatch uy1927@t 'any))) (if uy1929@ls/false (apply (lambda (uy192b@name) (list 'immutable uy192b@name)) uy1929@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1927@t))))))))))) uy1913@ls))))) (let ((uy18e3@uid-code (let ((uy18eb@t (uy178e@get-clause 'nongenerative uy18dc@clause*))) (let ((uy18ed@ls/false (uyd90@syntax-dispatch uy18eb@t '(_)))) (if uy18ed@ls/false (apply (lambda () (list 'quote (gensym))) uy18ed@ls/false) (let ((uy18ef@t uy18eb@t)) (let ((uy18f1@ls/false (uyd90@syntax-dispatch uy18ef@t '(_ any)))) (if uy18f1@ls/false (apply (lambda (uy18f3@uid) (list 'quote uy18f3@uid)) uy18f1@ls/false) (let ((uy18f5@t uy18ef@t)) (let ((uy18f7@ls/false (uyd90@syntax-dispatch uy18f5@t '_))) (if uy18f7@ls/false (apply (lambda () '#f) uy18f7@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy18f5@t))))))))))) (uy18e4@sealed? (let ((uy18f9@t (uy178e@get-clause 'sealed uy18dc@clause*))) (let ((uy18fb@ls/false (uyd90@syntax-dispatch uy18f9@t '(_ #(atom #t))))) (if uy18fb@ls/false (apply (lambda () '#t) uy18fb@ls/false) (let ((uy18fd@t uy18f9@t)) (let ((uy18ff@ls/false (uyd90@syntax-dispatch uy18fd@t '_))) (if uy18ff@ls/false (apply (lambda () '#f) uy18ff@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy18fd@t)))))))) (uy18e5@opaque? (let ((uy1901@t (uy178e@get-clause 'opaque uy18dc@clause*))) (let ((uy1903@ls/false (uyd90@syntax-dispatch uy1901@t '(_ #(atom #t))))) (if uy1903@ls/false (apply (lambda () '#t) uy1903@ls/false) (let ((uy1905@t uy1901@t)) (let ((uy1907@ls/false (uyd90@syntax-dispatch uy1905@t '_))) (if uy1907@ls/false (apply (lambda () '#f) uy1907@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1905@t)))))))) (uy18e6@fields (let ((uy1909@t (uy178e@get-clause 'fields uy18dc@clause*))) (let ((uy190b@ls/false (uyd90@syntax-dispatch uy1909@t '(_ . each-any)))) (if uy190b@ls/false (apply (lambda (uy190d@field-spec*) (list 'quote (uy18e2@convert-field-spec* uy190d@field-spec*))) uy190b@ls/false) (let ((uy190f@t uy1909@t)) (let ((uy1911@ls/false (uyd90@syntax-dispatch uy190f@t '_))) (if uy1911@ls/false (apply (lambda () ''#()) uy1911@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy190f@t))))))))) (uyd46@bless (list 'make-record-type-descriptor (list 'quote uy18db@name) uy18dd@parent-rtd-code uy18e3@uid-code uy18e4@sealed? uy18e5@opaque? uy18e6@fields)))))) (uy1792@parent-rtd-code (lambda (uy18c3@clause*) (let ((uy18c5@t (uy178e@get-clause 'parent uy18c3@clause*))) (let ((uy18c7@ls/false (uyd90@syntax-dispatch uy18c5@t '(_ any)))) (if uy18c7@ls/false (apply (lambda (uy18c9@name) (list 'record-type-descriptor uy18c9@name)) uy18c7@ls/false) (let ((uy18cb@t uy18c5@t)) (let ((uy18cd@ls/false (uyd90@syntax-dispatch uy18cb@t '#(atom #f)))) (if uy18cd@ls/false (apply (lambda () (let ((uy18cf@t (uy178e@get-clause 'parent-rtd uy18c3@clause*))) (let ((uy18d1@ls/false (uyd90@syntax-dispatch uy18cf@t '(_ any any)))) (if uy18d1@ls/false (apply (lambda (uy18d3@rtd uy18d4@rcd) uy18d3@rtd) uy18d1@ls/false) (let ((uy18d7@t uy18cf@t)) (let ((uy18d9@ls/false (uyd90@syntax-dispatch uy18d7@t '#(atom #f)))) (if uy18d9@ls/false (apply (lambda () '#f) uy18d9@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy18d7@t)))))))) uy18cd@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy18cb@t))))))))) (uy1794@parent-rcd-code (lambda (uy18ab@clause*) (let ((uy18ad@t (uy178e@get-clause 'parent uy18ab@clause*))) (let ((uy18af@ls/false (uyd90@syntax-dispatch uy18ad@t '(_ any)))) (if uy18af@ls/false (apply (lambda (uy18b1@name) (list 'record-constructor-descriptor uy18b1@name)) uy18af@ls/false) (let ((uy18b3@t uy18ad@t)) (let ((uy18b5@ls/false (uyd90@syntax-dispatch uy18b3@t '#(atom #f)))) (if uy18b5@ls/false (apply (lambda () (let ((uy18b7@t (uy178e@get-clause 'parent-rtd uy18ab@clause*))) (let ((uy18b9@ls/false (uyd90@syntax-dispatch uy18b7@t '(_ any any)))) (if uy18b9@ls/false (apply (lambda (uy18bb@rtd uy18bc@rcd) uy18bc@rcd) uy18b9@ls/false) (let ((uy18bf@t uy18b7@t)) (let ((uy18c1@ls/false (uyd90@syntax-dispatch uy18bf@t '#(atom #f)))) (if uy18c1@ls/false (apply (lambda () '#f) uy18c1@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy18bf@t)))))))) uy18b5@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy18b3@t))))))))) (uy1796@foo-rcd-code (lambda (uy18a3@clause* uy18a4@foo-rtd uy18a5@protocol uy18a6@parent-rcd-code) (list 'make-record-constructor-descriptor uy18a4@foo-rtd uy18a6@parent-rcd-code uy18a5@protocol))) (uy1798@get-protocol-code (lambda (uy1897@clause*) (let ((uy1899@t (uy178e@get-clause 'protocol uy1897@clause*))) (let ((uy189b@ls/false (uyd90@syntax-dispatch uy1899@t '(_ any)))) (if uy189b@ls/false (apply (lambda (uy189d@expr) uy189d@expr) uy189b@ls/false) (let ((uy189f@t uy1899@t)) (let ((uy18a1@ls/false (uyd90@syntax-dispatch uy189f@t '_))) (if uy18a1@ls/false (apply (lambda () '#f) uy18a1@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy189f@t))))))))) (uy179a@get-fields (lambda (uy1885@clause*) (let ((uy1887@t uy1885@clause*)) (let ((uy1889@ls/false (uyd90@syntax-dispatch uy1887@t '()))) (if uy1889@ls/false (apply (lambda () '()) uy1889@ls/false) (let ((uy188b@t uy1887@t)) (let ((uy188d@ls/false (uyd90@syntax-dispatch uy188b@t '((#(scheme-id fields) . each-any) . _)))) (if uy188d@ls/false (apply (lambda (uy188f@f*) uy188f@f*) uy188d@ls/false) (let ((uy1891@t uy188b@t)) (let ((uy1893@ls/false (uyd90@syntax-dispatch uy1891@t '(_ . any)))) (if uy1893@ls/false (apply (lambda (uy1895@rest) (uy179a@get-fields uy1895@rest)) uy1893@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1891@t)))))))))))) (uy179c@get-mutator-indices (lambda (uy186d@fields) (let uy1873@f ((uy186f@fields uy186d@fields) (uy1870@i '0)) (let ((uy1875@t uy186f@fields)) (let ((uy1877@ls/false (uyd90@syntax-dispatch uy1875@t '()))) (if uy1877@ls/false (apply (lambda () '()) uy1877@ls/false) (let ((uy1879@t uy1875@t)) (let ((uy187b@ls/false (uyd90@syntax-dispatch uy1879@t '((#(scheme-id mutable) . _) . any)))) (if uy187b@ls/false (apply (lambda (uy187d@rest) (cons uy1870@i (uy1873@f uy187d@rest (+ uy1870@i '1)))) uy187b@ls/false) (let ((uy187f@t uy1879@t)) (let ((uy1881@ls/false (uyd90@syntax-dispatch uy187f@t '(_ . any)))) (if uy1881@ls/false (apply (lambda (uy1883@rest) (uy1873@f uy1883@rest (+ uy1870@i '1))) uy1881@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy187f@t))))))))))))) (uy179e@get-mutators (lambda (uy1843@foo uy1844@fields) (letrec* ((uy1848@gen-name (lambda (uy186b@x) (uye74@datum->syntax uy1843@foo (string->symbol (string-append (symbol->string (uye76@syntax->datum uy1843@foo)) '"-" (symbol->string (uye76@syntax->datum uy186b@x)) '"-set!")))))) (let uy184b@f ((uy1849@fields uy1844@fields)) (let ((uy184d@t uy1849@fields)) (let ((uy184f@ls/false (uyd90@syntax-dispatch uy184d@t '()))) (if uy184f@ls/false (apply (lambda () '()) uy184f@ls/false) (let ((uy1851@t uy184d@t)) (let ((uy1853@ls/false (uyd90@syntax-dispatch uy1851@t '((#(scheme-id mutable) any any any) . any)))) (if uy1853@ls/false (apply (lambda (uy1855@name uy1856@accessor uy1857@mutator uy1858@rest) (cons uy1857@mutator (uy184b@f uy1858@rest))) uy1853@ls/false) (let ((uy185d@t uy1851@t)) (let ((uy185f@ls/false (uyd90@syntax-dispatch uy185d@t '((#(scheme-id mutable) any) . any)))) (if uy185f@ls/false (apply (lambda (uy1861@name uy1862@rest) (cons (uy1848@gen-name uy1861@name) (uy184b@f uy1862@rest))) uy185f@ls/false) (let ((uy1865@t uy185d@t)) (let ((uy1867@ls/false (uyd90@syntax-dispatch uy1865@t '(_ . any)))) (if uy1867@ls/false (apply (lambda (uy1869@rest) (uy184b@f uy1869@rest)) uy1867@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1865@t))))))))))))))))) (uy17a0@get-accessors (lambda (uy17ff@foo uy1800@fields) (letrec* ((uy1804@gen-name (lambda (uy1841@x) (uye74@datum->syntax uy17ff@foo (string->symbol (string-append (symbol->string (uye76@syntax->datum uy17ff@foo)) '"-" (symbol->string (uye76@syntax->datum uy1841@x)))))))) (map (lambda (uy1805@field) (let ((uy1807@t uy1805@field)) (let ((uy1809@ls/false (uyd90@syntax-dispatch uy1807@t '(#(scheme-id mutable) any any any)))) (if (and uy1809@ls/false (apply (lambda (uy180b@name uy180c@accessor uy180d@mutator) (uyb89@id? uy180c@accessor)) uy1809@ls/false)) (apply (lambda (uy1811@name uy1812@accessor uy1813@mutator) uy1812@accessor) uy1809@ls/false) (let ((uy1817@t uy1807@t)) (let ((uy1819@ls/false (uyd90@syntax-dispatch uy1817@t '(#(scheme-id immutable) any any)))) (if (and uy1819@ls/false (apply (lambda (uy181b@name uy181c@accessor) (uyb89@id? uy181c@accessor)) uy1819@ls/false)) (apply (lambda (uy181f@name uy1820@accessor) uy1820@accessor) uy1819@ls/false) (let ((uy1823@t uy1817@t)) (let ((uy1825@ls/false (uyd90@syntax-dispatch uy1823@t '(#(scheme-id mutable) any)))) (if (and uy1825@ls/false (apply (lambda (uy1827@name) (uyb89@id? uy1827@name)) uy1825@ls/false)) (apply (lambda (uy1829@name) (uy1804@gen-name uy1829@name)) uy1825@ls/false) (let ((uy182b@t uy1823@t)) (let ((uy182d@ls/false (uyd90@syntax-dispatch uy182b@t '(#(scheme-id immutable) any)))) (if (and uy182d@ls/false (apply (lambda (uy182f@name) (uyb89@id? uy182f@name)) uy182d@ls/false)) (apply (lambda (uy1831@name) (uy1804@gen-name uy1831@name)) uy182d@ls/false) (let ((uy1833@t uy182b@t)) (let ((uy1835@ls/false (uyd90@syntax-dispatch uy1833@t 'any))) (if (and uy1835@ls/false (apply (lambda (uy1837@name) (uyb89@id? uy1837@name)) uy1835@ls/false)) (apply (lambda (uy1839@name) (uy1804@gen-name uy1839@name)) uy1835@ls/false) (let ((uy183b@t uy1833@t)) (let ((uy183d@ls/false (uyd90@syntax-dispatch uy183b@t 'any))) (if uy183d@ls/false (apply (lambda (uy183f@others) (uye70@syntax-violation '#f '"invalid field spec" uy1805@field)) uy183d@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy183b@t)))))))))))))))))))) uy1800@fields)))) (uy17a2@enumerate (lambda (uy17f7@ls) (let uy17fd@f ((uy17f9@ls uy17f7@ls) (uy17fa@i '0)) (if (null? uy17f9@ls) '() (cons uy17fa@i (uy17fd@f (cdr uy17f9@ls) (+ uy17fa@i '1))))))) (uy17a4@do-define-record (lambda (uy17cf@namespec uy17d0@clause*) (let ((uy17d3@foo (uy1788@get-record-name uy17cf@namespec))) (let ((uy17d5@foo-rtd (gensym))) (let ((uy17d7@foo-rcd (gensym))) (let ((uy17d9@protocol (gensym))) (let ((uy17db@make-foo (uy178a@get-record-constructor-name uy17cf@namespec))) (let ((uy17dd@fields (uy179a@get-fields uy17d0@clause*))) (let ((uy17df@idx* (uy17a2@enumerate uy17dd@fields))) (let ((uy17e1@foo-x* (uy17a0@get-accessors uy17d3@foo uy17dd@fields))) (let ((uy17e3@set-foo-x!* (uy179e@get-mutators uy17d3@foo uy17dd@fields))) (let ((uy17e5@set-foo-idx* (uy179c@get-mutator-indices uy17dd@fields))) (let ((uy17e7@foo? (uy178c@get-record-predicate-name uy17cf@namespec))) (let ((uy17e9@foo-rtd-code (uy1790@foo-rtd-code uy17d3@foo uy17d0@clause* (uy1792@parent-rtd-code uy17d0@clause*)))) (let ((uy17eb@foo-rcd-code (uy1796@foo-rcd-code uy17d0@clause* uy17d5@foo-rtd uy17d9@protocol (uy1794@parent-rcd-code uy17d0@clause*)))) (let ((uy17ed@protocol-code (uy1798@get-protocol-code uy17d0@clause*))) (uyd46@bless (cons 'begin (cons (list 'define uy17d5@foo-rtd uy17e9@foo-rtd-code) (cons (list 'define uy17d9@protocol uy17ed@protocol-code) (cons (list 'define uy17d7@foo-rcd uy17eb@foo-rcd-code) (cons (list 'define-syntax uy17d3@foo (list 'list ''$rtd (list 'syntax uy17d5@foo-rtd) (list 'syntax uy17d7@foo-rcd))) (cons (list 'define uy17e7@foo? (list 'record-predicate uy17d5@foo-rtd)) (cons (list 'define uy17db@make-foo (list 'record-constructor uy17d7@foo-rcd)) (append (map (lambda (uy17ef@foo-x uy17f0@idx) (list 'define uy17ef@foo-x (list 'record-accessor uy17d5@foo-rtd uy17f0@idx))) uy17e1@foo-x* uy17df@idx*) (map (lambda (uy17f3@set-foo-x! uy17f4@idx) (list 'define uy17f3@set-foo-x! (list 'record-mutator uy17d5@foo-rtd uy17f4@idx))) uy17e3@set-foo-x!* uy17e5@set-foo-idx*)))))))))))))))))))))))))) (uy17a6@verify-clauses (lambda (uy17af@x uy17b0@cls*) (letrec* ((uy17b4@valid-kwds (map uyd46@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (uy17b6@free-id-member? (lambda (uy17cb@x uy17cc@ls) (and (pair? uy17cc@ls) (or (uyb8f@free-id=? uy17cb@x (car uy17cc@ls)) (uy17b6@free-id-member? uy17cb@x (cdr uy17cc@ls))))))) (let uy17bb@f ((uy17b7@cls* uy17b0@cls*) (uy17b8@seen* '())) (if (not (null? uy17b7@cls*)) (let ((uy17bd@t (car uy17b7@cls*))) (let ((uy17bf@ls/false (uyd90@syntax-dispatch uy17bd@t '(any . any)))) (if uy17bf@ls/false (apply (lambda (uy17c1@kwd uy17c2@rest) (if (or (not (uyb89@id? uy17c1@kwd)) (not (uy17b6@free-id-member? uy17c1@kwd uy17b4@valid-kwds))) (uye70@syntax-violation '#f '"not a valid define-record-type keyword" uy17c1@kwd) (if (uyb95@bound-id-member? uy17c1@kwd uy17b8@seen*) (uye70@syntax-violation '#f '"duplicate use of keyword " uy17af@x uy17c1@kwd) (uy17bb@f (cdr uy17b7@cls*) (cons uy17c1@kwd uy17b8@seen*))))) uy17bf@ls/false) (let ((uy17c5@t uy17bd@t)) (let ((uy17c7@ls/false (uyd90@syntax-dispatch uy17c5@t 'any))) (if uy17c7@ls/false (apply (lambda (uy17c9@cls) (uye70@syntax-violation '#f '"malformed define-record-type clause" uy17c9@cls)) uy17c7@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy17c5@t))))))) (void))))))) (let ((uy17a7@t uy1783@x)) (let ((uy17a9@ls/false (uyd90@syntax-dispatch uy17a7@t '(_ any . each-any)))) (if uy17a9@ls/false (apply (lambda (uy17ab@namespec uy17ac@clause*) (begin (uy17a6@verify-clauses uy1783@x uy17ac@clause*) (uy17a4@do-define-record uy17ab@namespec uy17ac@clause*))) uy17a9@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy17a7@t))))))) (set! uy2896@uyd84@define-record-type-macro uyd84@define-record-type-macro) (set! uyd86@define-condition-type-macro (lambda (uy197f@x) (letrec* ((uy1982@mkname (lambda (uy19af@name uy19b0@suffix) (uye74@datum->syntax uy19af@name (string->symbol (string-append (symbol->string (uye76@syntax->datum uy19af@name)) uy19b0@suffix)))))) (let ((uy1983@t uy197f@x)) (let ((uy1985@ls/false (uyd90@syntax-dispatch uy1983@t '(any any any any any . #(each (any any)))))) (if (and uy1985@ls/false (apply (lambda (uy1987@ctxt uy1988@name uy1989@super uy198a@constructor uy198b@predicate uy198c@field* uy198d@accessor*) (and (uyb89@id? uy1988@name) (uyb89@id? uy1989@super) (uyb89@id? uy198a@constructor) (uyb89@id? uy198b@predicate) (for-all uyb89@id? uy198c@field*) (for-all uyb89@id? uy198d@accessor*))) uy1985@ls/false)) (apply (lambda (uy1995@ctxt uy1996@name uy1997@super uy1998@constructor uy1999@predicate uy199a@field* uy199b@accessor*) (let ((uy19a3@aux-accessor* (map (lambda (uy19a5@x) (gensym)) uy199b@accessor*))) (uyd46@bless (cons 'begin (cons (cons 'define-record-type (cons (list uy1996@name uy1998@constructor (gensym)) (cons (list 'parent uy1997@super) (cons (cons 'fields (map (lambda (uy19a7@field uy19a8@aux) (list 'immutable uy19a7@field uy19a8@aux)) uy199a@field* uy19a3@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define uy1999@predicate (list 'condition-predicate (list 'record-type-descriptor uy1996@name))) (map (lambda (uy19ab@accessor uy19ac@aux) (list 'define uy19ab@accessor (list 'condition-accessor (list 'record-type-descriptor uy1996@name) uy19ac@aux))) uy199b@accessor* uy19a3@aux-accessor*))))))) uy1985@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1983@t))))))) (set! uy2897@uyd86@define-condition-type-macro uyd86@define-condition-type-macro) (set! uyd88@incorrect-usage-macro (lambda (uy19b3@e) (uye70@syntax-violation '#f '"incorrect usage of auxiliary keyword" uy19b3@e))) (set! uy2898@uyd88@incorrect-usage-macro uyd88@incorrect-usage-macro) (set! uyd8a@parameterize-macro (lambda (uy19b5@e) (let ((uy19b7@t uy19b5@e)) (let ((uy19b9@ls/false (uyd90@syntax-dispatch uy19b7@t '(_ () any . each-any)))) (if uy19b9@ls/false (apply (lambda (uy19bb@b uy19bc@b*) (uyd46@bless (cons 'let (cons '() (cons uy19bb@b uy19bc@b*))))) uy19b9@ls/false) (let ((uy19bf@t uy19b7@t)) (let ((uy19c1@ls/false (uyd90@syntax-dispatch uy19bf@t '(_ #(each (any any)) any . each-any)))) (if uy19c1@ls/false (apply (lambda (uy19c3@olhs* uy19c4@orhs* uy19c5@b uy19c6@b*) (let ((uy19cb@lhs* (uye5e@generate-temporaries uy19c3@olhs*)) (uy19cc@rhs* (uye5e@generate-temporaries uy19c4@orhs*))) (uyd46@bless (cons (list 'lambda (append uy19cb@lhs* uy19cc@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (uy19cf@lhs uy19d0@rhs) (list 'let (list (list 't (list uy19cf@lhs))) (list uy19cf@lhs uy19d0@rhs) (cons 'set! (cons uy19d0@rhs '(t))))) uy19cb@lhs* uy19cc@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons uy19c5@b uy19c6@b*))) '(swap)))))) (append uy19c3@olhs* uy19c4@orhs*))))) uy19c1@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy19bf@t))))))))) (set! uy2899@uyd8a@parameterize-macro uyd8a@parameterize-macro) (set! uyd8c@foreign-call-transformer (lambda (uy19d3@e uy19d4@r uy19d5@mr) (let ((uy19d9@t uy19d3@e)) (let ((uy19db@ls/false (uyd90@syntax-dispatch uy19d9@t '(_ any . each-any)))) (if uy19db@ls/false (apply (lambda (uy19dd@name uy19de@arg*) (cons 'foreign-call (cons (uydb2@chi-expr uy19dd@name uy19d4@r uy19d5@mr) (uydae@chi-expr* uy19de@arg* uy19d4@r uy19d5@mr)))) uy19db@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy19d9@t)))))) (set! uy289a@uyd8c@foreign-call-transformer uyd8c@foreign-call-transformer) (set! uyd8e@convert-pattern (lambda (uy19e1@pattern uy19e2@keys) (letrec* ((uy19e6@cvt* (lambda (uy1a85@p* uy1a86@n uy1a87@ids) (if (null? uy1a85@p*) (values '() uy1a87@ids) (call-with-values (lambda () (uy19e6@cvt* (cdr uy1a85@p*) uy1a86@n uy1a87@ids)) (lambda (uy1a8f@uy1a8c uy1a90@uy1a8e) (let ((uy1a93@ids uy1a90@uy1a8e) (uy1a94@y uy1a8f@uy1a8c)) (call-with-values (lambda () (uy19e8@cvt (car uy1a85@p*) uy1a86@n uy1a93@ids)) (lambda (uy1a9b@uy1a98 uy1a9c@uy1a9a) (let ((uy1a9f@ids uy1a9c@uy1a9a) (uy1aa0@x uy1a9b@uy1a98)) (values (cons uy1aa0@x uy1a94@y) uy1a9f@ids)))))))))) (uy19e8@cvt (lambda (uy19e9@p uy19ea@n uy19eb@ids) (let ((uy19ef@t uy19e9@p)) (let ((uy19f1@ls/false (uyd90@syntax-dispatch uy19ef@t 'any))) (if (and uy19f1@ls/false (apply (lambda (uy19f3@id) (uyb89@id? uy19f3@id)) uy19f1@ls/false)) (apply (lambda (uy19f5@id) (if (uyb95@bound-id-member? uy19e9@p uy19e2@keys) (values (vector 'free-id uy19e9@p) uy19eb@ids) (if (uyb8f@free-id=? uy19e9@p (uyd18@scheme-stx '_)) (values '_ uy19eb@ids) (values 'any (cons (cons uy19e9@p uy19ea@n) uy19eb@ids))))) uy19f1@ls/false) (let ((uy19f7@t uy19ef@t)) (let ((uy19f9@ls/false (uyd90@syntax-dispatch uy19f7@t '(any any)))) (if (and uy19f9@ls/false (apply (lambda (uy19fb@p uy19fc@dots) (uyd92@ellipsis? uy19fc@dots)) uy19f9@ls/false)) (apply (lambda (uy19ff@p uy1a00@dots) (call-with-values (lambda () (uy19e8@cvt uy19ff@p (+ uy19ea@n '1) uy19eb@ids)) (lambda (uy1a07@uy1a04 uy1a08@uy1a06) (let ((uy1a0b@ids uy1a08@uy1a06) (uy1a0c@p uy1a07@uy1a04)) (values (if (eq? uy1a0c@p 'any) 'each-any (vector 'each uy1a0c@p)) uy1a0b@ids))))) uy19f9@ls/false) (let ((uy1a0f@t uy19f7@t)) (let ((uy1a11@ls/false (uyd90@syntax-dispatch uy1a0f@t '(any any . #(each+ any () any))))) (if (and uy1a11@ls/false (apply (lambda (uy1a13@x uy1a14@dots uy1a15@ys uy1a16@z) (uyd92@ellipsis? uy1a14@dots)) uy1a11@ls/false)) (apply (lambda (uy1a1b@x uy1a1c@dots uy1a1d@ys uy1a1e@z) (call-with-values (lambda () (uy19e8@cvt uy1a1e@z uy19ea@n uy19eb@ids)) (lambda (uy1a27@uy1a24 uy1a28@uy1a26) (let ((uy1a2b@ids uy1a28@uy1a26) (uy1a2c@z uy1a27@uy1a24)) (call-with-values (lambda () (uy19e6@cvt* uy1a1d@ys uy19ea@n uy1a2b@ids)) (lambda (uy1a33@uy1a30 uy1a34@uy1a32) (let ((uy1a37@ids uy1a34@uy1a32) (uy1a38@ys uy1a33@uy1a30)) (call-with-values (lambda () (uy19e8@cvt uy1a1b@x (+ uy19ea@n '1) uy1a37@ids)) (lambda (uy1a3f@uy1a3c uy1a40@uy1a3e) (let ((uy1a43@ids uy1a40@uy1a3e) (uy1a44@x uy1a3f@uy1a3c)) (values (vector 'each+ uy1a44@x (reverse uy1a38@ys) uy1a2c@z) uy1a43@ids))))))))))) uy1a11@ls/false) (let ((uy1a47@t uy1a0f@t)) (let ((uy1a49@ls/false (uyd90@syntax-dispatch uy1a47@t '(any . any)))) (if uy1a49@ls/false (apply (lambda (uy1a4b@x uy1a4c@y) (call-with-values (lambda () (uy19e8@cvt uy1a4c@y uy19ea@n uy19eb@ids)) (lambda (uy1a53@uy1a50 uy1a54@uy1a52) (let ((uy1a57@ids uy1a54@uy1a52) (uy1a58@y uy1a53@uy1a50)) (call-with-values (lambda () (uy19e8@cvt uy1a4b@x uy19ea@n uy1a57@ids)) (lambda (uy1a5f@uy1a5c uy1a60@uy1a5e) (let ((uy1a63@ids uy1a60@uy1a5e) (uy1a64@x uy1a5f@uy1a5c)) (values (cons uy1a64@x uy1a58@y) uy1a63@ids)))))))) uy1a49@ls/false) (let ((uy1a67@t uy1a47@t)) (let ((uy1a69@ls/false (uyd90@syntax-dispatch uy1a67@t '()))) (if uy1a69@ls/false (apply (lambda () (values '() uy19eb@ids)) uy1a69@ls/false) (let ((uy1a6b@t uy1a67@t)) (let ((uy1a6d@ls/false (uyd90@syntax-dispatch uy1a6b@t '#(vector each-any)))) (if (and uy1a6d@ls/false (apply (lambda (uy1a6f@p) (not (uyb55@stx? uy1a6f@p))) uy1a6d@ls/false)) (apply (lambda (uy1a71@p) (call-with-values (lambda () (uy19e8@cvt uy1a71@p uy19ea@n uy19eb@ids)) (lambda (uy1a77@uy1a74 uy1a78@uy1a76) (let ((uy1a7b@ids uy1a78@uy1a76) (uy1a7c@p uy1a77@uy1a74)) (values (vector 'vector uy1a7c@p) uy1a7b@ids))))) uy1a6d@ls/false) (let ((uy1a7f@t uy1a6b@t)) (let ((uy1a81@ls/false (uyd90@syntax-dispatch uy1a7f@t 'any))) (if uy1a81@ls/false (apply (lambda (uy1a83@datum) (values (vector 'atom (uyb9d@stx->datum uy1a83@datum)) uy19eb@ids)) uy1a81@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1a7f@t))))))))))))))))))))))))) (uy19e8@cvt uy19e1@pattern '0 '())))) (set! uy289b@uyd8e@convert-pattern uyd8e@convert-pattern) (set! uyd90@syntax-dispatch (letrec* ((uy1aa4@stx^ (lambda (uy1b7f@e uy1b80@m* uy1b81@s* uy1b82@ae*) (if (and (null? uy1b80@m*) (null? uy1b81@s*) (null? uy1b82@ae*)) uy1b7f@e (uyb71@mkstx uy1b7f@e uy1b80@m* uy1b81@s* uy1b82@ae*)))) (uy1aa6@match-each (lambda (uy1b5f@e uy1b60@p uy1b61@m* uy1b62@s* uy1b63@ae*) (if (pair? uy1b5f@e) (let ((uy1b69@first (uy1ab2@match (car uy1b5f@e) uy1b60@p uy1b61@m* uy1b62@s* uy1b63@ae* '()))) (and uy1b69@first (let ((uy1b6b@rest (uy1aa6@match-each (cdr uy1b5f@e) uy1b60@p uy1b61@m* uy1b62@s* uy1b63@ae*))) (and uy1b6b@rest (cons uy1b69@first uy1b6b@rest))))) (if (null? uy1b5f@e) '() (if (uyb55@stx? uy1b5f@e) (and (not (uyb0f@top-marked? uy1b61@m*)) (call-with-values (lambda () (join-wraps uy1b61@m* uy1b62@s* uy1b63@ae* uy1b5f@e)) (lambda (uy1b73@uy1b6e uy1b74@uy1b70 uy1b75@uy1b72) (let ((uy1b79@ae* uy1b75@uy1b72) (uy1b7a@s* uy1b74@uy1b70) (uy1b7b@m* uy1b73@uy1b6e)) (uy1aa6@match-each (uyb57@stx-expr uy1b5f@e) uy1b60@p uy1b7b@m* uy1b7a@s* uy1b79@ae*))))) (if (uy6cd@uy59f@annotation? uy1b5f@e) (uy1aa6@match-each (uy6cf@uy5a3@annotation-expression uy1b5f@e) uy1b60@p uy1b61@m* uy1b62@s* uy1b63@ae*) '#f)))))) (uy1aa8@match-each+ (lambda (uy1b1f@e uy1b20@x-pat uy1b21@y-pat uy1b22@z-pat uy1b23@m* uy1b24@s* uy1b25@ae* uy1b26@r) (let uy1b37@f ((uy1b2f@e uy1b1f@e) (uy1b30@m* uy1b23@m*) (uy1b31@s* uy1b24@s*) (uy1b32@ae* uy1b25@ae*)) (if (pair? uy1b2f@e) (call-with-values (lambda () (uy1b37@f (cdr uy1b2f@e) uy1b30@m* uy1b31@s* uy1b32@ae*)) (lambda (uy1b3f@uy1b3a uy1b40@uy1b3c uy1b41@uy1b3e) (let ((uy1b45@r uy1b41@uy1b3e) (uy1b46@y-pat uy1b40@uy1b3c) (uy1b47@xr* uy1b3f@uy1b3a)) (if uy1b45@r (if (null? uy1b46@y-pat) (let ((uy1b4b@xr (uy1ab2@match (car uy1b2f@e) uy1b20@x-pat uy1b30@m* uy1b31@s* uy1b32@ae* '()))) (if uy1b4b@xr (values (cons uy1b4b@xr uy1b47@xr*) uy1b46@y-pat uy1b45@r) (values '#f '#f '#f))) (values '() (cdr uy1b46@y-pat) (uy1ab2@match (car uy1b2f@e) (car uy1b46@y-pat) uy1b30@m* uy1b31@s* uy1b32@ae* uy1b45@r))) (values '#f '#f '#f))))) (if (uyb55@stx? uy1b2f@e) (if (uyb0f@top-marked? uy1b30@m*) (values '() uy1b21@y-pat (uy1ab2@match uy1b2f@e uy1b22@z-pat uy1b30@m* uy1b31@s* uy1b32@ae* uy1b26@r)) (call-with-values (lambda () (join-wraps uy1b30@m* uy1b31@s* uy1b32@ae* uy1b2f@e)) (lambda (uy1b53@uy1b4e uy1b54@uy1b50 uy1b55@uy1b52) (let ((uy1b59@ae* uy1b55@uy1b52) (uy1b5a@s* uy1b54@uy1b50) (uy1b5b@m* uy1b53@uy1b4e)) (uy1b37@f (uyb57@stx-expr uy1b2f@e) uy1b5b@m* uy1b5a@s* uy1b59@ae*))))) (if (uy6cd@uy59f@annotation? uy1b2f@e) (uy1b37@f (uy6cf@uy5a3@annotation-expression uy1b2f@e) uy1b30@m* uy1b31@s* uy1b32@ae*) (values '() uy1b21@y-pat (uy1ab2@match uy1b2f@e uy1b22@z-pat uy1b30@m* uy1b31@s* uy1b32@ae* uy1b26@r)))))))) (uy1aaa@match-each-any (lambda (uy1b03@e uy1b04@m* uy1b05@s* uy1b06@ae*) (if (pair? uy1b03@e) (let ((uy1b0b@l (uy1aaa@match-each-any (cdr uy1b03@e) uy1b04@m* uy1b05@s* uy1b06@ae*))) (and uy1b0b@l (cons (uy1aa4@stx^ (car uy1b03@e) uy1b04@m* uy1b05@s* uy1b06@ae*) uy1b0b@l))) (if (null? uy1b03@e) '() (if (uyb55@stx? uy1b03@e) (and (not (uyb0f@top-marked? uy1b04@m*)) (call-with-values (lambda () (join-wraps uy1b04@m* uy1b05@s* uy1b06@ae* uy1b03@e)) (lambda (uy1b13@uy1b0e uy1b14@uy1b10 uy1b15@uy1b12) (let ((uy1b19@ae* uy1b15@uy1b12) (uy1b1a@s* uy1b14@uy1b10) (uy1b1b@m* uy1b13@uy1b0e)) (uy1aaa@match-each-any (uyb57@stx-expr uy1b03@e) uy1b1b@m* uy1b1a@s* uy1b19@ae*))))) (if (uy6cd@uy59f@annotation? uy1b03@e) (uy1aaa@match-each-any (uy6cf@uy5a3@annotation-expression uy1b03@e) uy1b04@m* uy1b05@s* uy1b06@ae*) '#f)))))) (uy1aac@match-empty (lambda (uy1afd@p uy1afe@r) (if (null? uy1afd@p) uy1afe@r (if (eq? uy1afd@p '_) uy1afe@r (if (eq? uy1afd@p 'any) (cons '() uy1afe@r) (if (pair? uy1afd@p) (uy1aac@match-empty (car uy1afd@p) (uy1aac@match-empty (cdr uy1afd@p) uy1afe@r)) (if (eq? uy1afd@p 'each-any) (cons '() uy1afe@r) (let ((uy1b01@t (vector-ref uy1afd@p '0))) (if (memv uy1b01@t '(each)) (uy1aac@match-empty (vector-ref uy1afd@p '1) uy1afe@r) (if (memv uy1b01@t '(each+)) (uy1aac@match-empty (vector-ref uy1afd@p '1) (uy1aac@match-empty (reverse (vector-ref uy1afd@p '2)) (uy1aac@match-empty (vector-ref uy1afd@p '3) uy1afe@r))) (if (memv uy1b01@t '(free-id atom)) uy1afe@r (if (memv uy1b01@t '(scheme-id atom)) uy1afe@r (if (memv uy1b01@t '(vector)) (uy1aac@match-empty (vector-ref uy1afd@p '1) uy1afe@r) (assertion-violation 'syntax-dispatch '"invalid pattern" uy1afd@p)))))))))))))) (uy1aae@combine (lambda (uy1af9@r* uy1afa@r) (if (null? (car uy1af9@r*)) uy1afa@r (cons (map car uy1af9@r*) (uy1aae@combine (map cdr uy1af9@r*) uy1afa@r))))) (uy1ab0@match* (lambda (uy1ad5@e uy1ad6@p uy1ad7@m* uy1ad8@s* uy1ad9@ae* uy1ada@r) (if (null? uy1ad6@p) (and (null? uy1ad5@e) uy1ada@r) (if (pair? uy1ad6@p) (and (pair? uy1ad5@e) (uy1ab2@match (car uy1ad5@e) (car uy1ad6@p) uy1ad7@m* uy1ad8@s* uy1ad9@ae* (uy1ab2@match (cdr uy1ad5@e) (cdr uy1ad6@p) uy1ad7@m* uy1ad8@s* uy1ad9@ae* uy1ada@r))) (if (eq? uy1ad6@p 'each-any) (let ((uy1ae1@l (uy1aaa@match-each-any uy1ad5@e uy1ad7@m* uy1ad8@s* uy1ad9@ae*))) (and uy1ae1@l (cons uy1ae1@l uy1ada@r))) (let ((uy1ae3@t (vector-ref uy1ad6@p '0))) (if (memv uy1ae3@t '(each)) (if (null? uy1ad5@e) (uy1aac@match-empty (vector-ref uy1ad6@p '1) uy1ada@r) (let ((uy1ae5@r* (uy1aa6@match-each uy1ad5@e (vector-ref uy1ad6@p '1) uy1ad7@m* uy1ad8@s* uy1ad9@ae*))) (and uy1ae5@r* (uy1aae@combine uy1ae5@r* uy1ada@r)))) (if (memv uy1ae3@t '(free-id)) (and (symbol? uy1ad5@e) (uyb0f@top-marked? uy1ad7@m*) (uyb8f@free-id=? (uy1aa4@stx^ uy1ad5@e uy1ad7@m* uy1ad8@s* uy1ad9@ae*) (vector-ref uy1ad6@p '1)) uy1ada@r) (if (memv uy1ae3@t '(scheme-id)) (and (symbol? uy1ad5@e) (uyb0f@top-marked? uy1ad7@m*) (uyb8f@free-id=? (uy1aa4@stx^ uy1ad5@e uy1ad7@m* uy1ad8@s* uy1ad9@ae*) (uyd18@scheme-stx (vector-ref uy1ad6@p '1))) uy1ada@r) (if (memv uy1ae3@t '(each+)) (call-with-values (lambda () (uy1aa8@match-each+ uy1ad5@e (vector-ref uy1ad6@p '1) (vector-ref uy1ad6@p '2) (vector-ref uy1ad6@p '3) uy1ad7@m* uy1ad8@s* uy1ad9@ae* uy1ada@r)) (lambda (uy1aed@uy1ae8 uy1aee@uy1aea uy1aef@uy1aec) (let ((uy1af3@r uy1aef@uy1aec) (uy1af4@y-pat uy1aee@uy1aea) (uy1af5@xr* uy1aed@uy1ae8)) (and uy1af3@r (null? uy1af4@y-pat) (if (null? uy1af5@xr*) (uy1aac@match-empty (vector-ref uy1ad6@p '1) uy1af3@r) (uy1aae@combine uy1af5@xr* uy1af3@r)))))) (if (memv uy1ae3@t '(atom)) (and (fast-equal? (vector-ref uy1ad6@p '1) (uyb9b@strip uy1ad5@e uy1ad7@m*)) uy1ada@r) (if (memv uy1ae3@t '(vector)) (and (vector? uy1ad5@e) (uy1ab2@match (vector->list uy1ad5@e) (vector-ref uy1ad6@p '1) uy1ad7@m* uy1ad8@s* uy1ad9@ae* uy1ada@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" uy1ad6@p))))))))))))) (uy1ab2@match (lambda (uy1ab7@e uy1ab8@p uy1ab9@m* uy1aba@s* uy1abb@ae* uy1abc@r) (if (not uy1abc@r) '#f (if (eq? uy1ab8@p '_) uy1abc@r (if (eq? uy1ab8@p 'any) (cons (uy1aa4@stx^ uy1ab7@e uy1ab9@m* uy1aba@s* uy1abb@ae*) uy1abc@r) (if (uyb55@stx? uy1ab7@e) (and (not (uyb0f@top-marked? uy1ab9@m*)) (call-with-values (lambda () (join-wraps uy1ab9@m* uy1aba@s* uy1abb@ae* uy1ab7@e)) (lambda (uy1ac9@uy1ac4 uy1aca@uy1ac6 uy1acb@uy1ac8) (let ((uy1acf@ae* uy1acb@uy1ac8) (uy1ad0@s* uy1aca@uy1ac6) (uy1ad1@m* uy1ac9@uy1ac4)) (uy1ab2@match (uyb57@stx-expr uy1ab7@e) uy1ab8@p uy1ad1@m* uy1ad0@s* uy1acf@ae* uy1abc@r))))) (if (uy6cd@uy59f@annotation? uy1ab7@e) (uy1ab2@match (uy6cf@uy5a3@annotation-expression uy1ab7@e) uy1ab8@p uy1ab9@m* uy1aba@s* uy1abb@ae* uy1abc@r) (uy1ab0@match* uy1ab7@e uy1ab8@p uy1ab9@m* uy1aba@s* uy1abb@ae* uy1abc@r))))))))) (lambda (uy1ab3@e uy1ab4@p) (uy1ab2@match uy1ab3@e uy1ab4@p '() '() '() '())))) (set! uy289c@uyd90@syntax-dispatch uyd90@syntax-dispatch) (set! uyd92@ellipsis? (lambda (uy1b87@x) (and (uyb89@id? uy1b87@x) (uyb8f@free-id=? uy1b87@x (uyd18@scheme-stx '...))))) (set! uy289d@uyd92@ellipsis? uyd92@ellipsis?) (set! uyd94@underscore? (lambda (uy1b89@x) (and (uyb89@id? uy1b89@x) (uyb8f@free-id=? uy1b89@x (uyd18@scheme-stx '_))))) (set! uy289e@uyd94@underscore? uyd94@underscore?) (set! uyd96@verify-literals (lambda (uy1b8b@lits uy1b8c@expr) (for-each (lambda (uy1b8f@x) (if (or (not (uyb89@id? uy1b8f@x)) (uyd92@ellipsis? uy1b8f@x) (uyd94@underscore? uy1b8f@x)) (uye70@syntax-violation '#f '"invalid literal" uy1b8c@expr uy1b8f@x) (void))) uy1b8b@lits))) (set! uy289f@uyd96@verify-literals uyd96@verify-literals) (set! uyd98@syntax-case-transformer (letrec* ((uy1b92@build-dispatch-call (lambda (uy1c03@pvars uy1c04@expr uy1c05@y uy1c06@r uy1c07@mr) (let ((uy1c0d@ids (map car uy1c03@pvars)) (uy1c0e@levels (map cdr uy1c03@pvars))) (let ((uy1c11@labels (map uyb15@gen-label uy1c0d@ids)) (uy1c12@new-vars (map uyb11@gen-lexical uy1c0d@ids))) (let ((uy1c15@body (uydb2@chi-expr (uyb73@add-subst (uyb49@make-full-rib uy1c0d@ids uy1c11@labels) uy1c04@expr) (append (map (lambda (uy1c17@label uy1c18@var uy1c19@level) (cons uy1c17@label (uyba3@make-binding 'syntax (cons uy1c18@var uy1c19@level)))) uy1c11@labels uy1c12@new-vars (map cdr uy1c03@pvars)) uy1c06@r) uy1c07@mr))) (list '(primitive apply) (uyaec@uya1e@build-lambda '#f uy1c12@new-vars uy1c15@body) uy1c05@y)))))) (uy1b94@invalid-ids-error (lambda (uy1bf7@id* uy1bf8@e uy1bf9@class) (let uy1c01@find ((uy1bfd@id* uy1bf7@id*) (uy1bfe@ok* '())) (if (null? uy1bfd@id*) (uye70@syntax-violation '#f '"invalid syntax" uy1bf8@e) (if (uyb89@id? (car uy1bfd@id*)) (if (uyb95@bound-id-member? (car uy1bfd@id*) uy1bfe@ok*) (uye6c@syntax-error (car uy1bfd@id*) '"duplicate " uy1bf9@class) (uy1c01@find (cdr uy1bfd@id*) (cons (car uy1bfd@id*) uy1bfe@ok*))) (uye6c@syntax-error (car uy1bfd@id*) '"invalid " uy1bf9@class)))))) (uy1b96@gen-clause (lambda (uy1bcf@x uy1bd0@keys uy1bd1@clauses uy1bd2@r uy1bd3@mr uy1bd4@pat uy1bd5@fender uy1bd6@expr) (call-with-values (lambda () (uyd8e@convert-pattern uy1bd4@pat uy1bd0@keys)) (lambda (uy1be3@uy1be0 uy1be4@uy1be2) (let ((uy1be7@pvars uy1be4@uy1be2) (uy1be8@p uy1be3@uy1be0)) (if (not (uyb93@distinct-bound-ids? (map car uy1be7@pvars))) (uy1b94@invalid-ids-error (map car uy1be7@pvars) uy1bd4@pat '"pattern variable") (if (not (for-all (lambda (uy1beb@x) (not (uyd92@ellipsis? (car uy1beb@x)))) uy1be7@pvars)) (uye70@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" uy1bd4@pat) (let ((uy1bed@y (uyb11@gen-lexical 'tmp))) (let ((uy1bef@test (if (eq? uy1bd5@fender '#t) uy1bed@y (let ((uy1bf1@call (uy1b92@build-dispatch-call uy1be7@pvars uy1bd5@fender uy1bed@y uy1bd2@r uy1bd3@mr))) (list 'if uy1bed@y uy1bf1@call (list 'quote '#f)))))) (let ((uy1bf3@conseq (uy1b92@build-dispatch-call uy1be7@pvars uy1bd6@expr uy1bed@y uy1bd2@r uy1bd3@mr))) (let ((uy1bf5@altern (uy1b98@gen-syntax-case uy1bcf@x uy1bd0@keys uy1bd1@clauses uy1bd2@r uy1bd3@mr))) (list (uyaec@uya1e@build-lambda '#f (list uy1bed@y) (list 'if uy1bef@test uy1bf3@conseq uy1bf5@altern)) (list '(primitive syntax-dispatch) uy1bcf@x (list 'quote uy1be8@p)))))))))))))) (uy1b98@gen-syntax-case (lambda (uy1bad@x uy1bae@keys uy1baf@clauses uy1bb0@r uy1bb1@mr) (if (null? uy1baf@clauses) (list '(primitive syntax-error) uy1bad@x) (let ((uy1bb7@t (car uy1baf@clauses))) (let ((uy1bb9@ls/false (uyd90@syntax-dispatch uy1bb7@t '(any any)))) (if uy1bb9@ls/false (apply (lambda (uy1bbb@pat uy1bbc@expr) (if (and (uyb89@id? uy1bbb@pat) (not (uyb95@bound-id-member? uy1bbb@pat uy1bae@keys)) (not (uyd92@ellipsis? uy1bbb@pat))) (if (uyb8f@free-id=? uy1bbb@pat (uyd18@scheme-stx '_)) (uydb2@chi-expr uy1bbc@expr uy1bb0@r uy1bb1@mr) (let ((uy1bbf@lab (uyb15@gen-label uy1bbb@pat)) (uy1bc0@lex (uyb11@gen-lexical uy1bbb@pat))) (let ((uy1bc3@body (uydb2@chi-expr (uyb73@add-subst (uyb49@make-full-rib (list uy1bbb@pat) (list uy1bbf@lab)) uy1bbc@expr) (cons (cons uy1bbf@lab (uyba3@make-binding 'syntax (cons uy1bc0@lex '0))) uy1bb0@r) uy1bb1@mr))) (list (uyaec@uya1e@build-lambda '#f (list uy1bc0@lex) uy1bc3@body) uy1bad@x)))) (uy1b96@gen-clause uy1bad@x uy1bae@keys (cdr uy1baf@clauses) uy1bb0@r uy1bb1@mr uy1bbb@pat '#t uy1bbc@expr))) uy1bb9@ls/false) (let ((uy1bc5@t uy1bb7@t)) (let ((uy1bc7@ls/false (uyd90@syntax-dispatch uy1bc5@t '(any any any)))) (if uy1bc7@ls/false (apply (lambda (uy1bc9@pat uy1bca@fender uy1bcb@expr) (uy1b96@gen-clause uy1bad@x uy1bae@keys (cdr uy1baf@clauses) uy1bb0@r uy1bb1@mr uy1bc9@pat uy1bca@fender uy1bcb@expr)) uy1bc7@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1bc5@t))))))))))) (lambda (uy1b99@e uy1b9a@r uy1b9b@mr) (let ((uy1b9f@t uy1b99@e)) (let ((uy1ba1@ls/false (uyd90@syntax-dispatch uy1b9f@t '(_ any each-any . each-any)))) (if uy1ba1@ls/false (apply (lambda (uy1ba3@expr uy1ba4@keys uy1ba5@clauses) (begin (uyd96@verify-literals uy1ba4@keys uy1b99@e) (let ((uy1ba9@x (uyb11@gen-lexical 'tmp))) (let ((uy1bab@body (uy1b98@gen-syntax-case uy1ba9@x uy1ba4@keys uy1ba5@clauses uy1b9a@r uy1b9b@mr))) (list (uyaec@uya1e@build-lambda '#f (list uy1ba9@x) uy1bab@body) (uydb2@chi-expr uy1ba3@expr uy1b9a@r uy1b9b@mr)))))) uy1ba1@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1b9f@t))))))) (set! uy28a0@uyd98@syntax-case-transformer uyd98@syntax-case-transformer) (set! uyd9a@ellipsis-map (lambda (uy1c1d@proc uy1c1e@ls . uy1c21@ls*) (letrec* ((uy1c24@who '...)) (begin (if (not (list? uy1c1e@ls)) (assertion-violation uy1c24@who '"not a list" uy1c1e@ls) (void)) (if (not (null? uy1c21@ls*)) (let ((uy1c25@n (length uy1c1e@ls))) (for-each (lambda (uy1c27@x) (begin (if (not (list? uy1c27@x)) (assertion-violation uy1c24@who '"not a list" uy1c27@x) (void)) (if (not (= (length uy1c27@x) uy1c25@n)) (assertion-violation uy1c24@who '"length mismatch" uy1c1e@ls uy1c27@x) (void)))) uy1c21@ls*)) (void)) (apply map uy1c1d@proc uy1c1e@ls uy1c21@ls*))))) (set! uy28a1@uyd9a@ellipsis-map uyd9a@ellipsis-map) (set! uyd9c@syntax-transformer (letrec* ((uy1c2a@gen-syntax (lambda (uy1ca1@src uy1ca2@e uy1ca3@r uy1ca4@maps uy1ca5@ellipsis? uy1ca6@vec?) (let ((uy1cad@t uy1ca2@e)) (let ((uy1caf@ls/false (uyd90@syntax-dispatch uy1cad@t 'any))) (if (and uy1caf@ls/false (apply (lambda (uy1cb1@dots) (uy1ca5@ellipsis? uy1cb1@dots)) uy1caf@ls/false)) (apply (lambda (uy1cb3@dots) (uye70@syntax-violation '#f '"misplaced ellipsis in syntax form" uy1ca1@src)) uy1caf@ls/false) (let ((uy1cb5@t uy1cad@t)) (let ((uy1cb7@ls/false (uyd90@syntax-dispatch uy1cb5@t 'any))) (if (and uy1cb7@ls/false (apply (lambda (uy1cb9@id) (uyb89@id? uy1cb9@id)) uy1cb7@ls/false)) (apply (lambda (uy1cbb@id) (let ((uy1cbd@label (uyb9f@id->label uy1ca2@e))) (let ((uy1cbf@b (uyba1@label->binding uy1cbd@label uy1ca3@r))) (if (eq? (uyba5@binding-type uy1cbf@b) 'syntax) (call-with-values (lambda () (let ((uy1cc5@var.lev (uyba7@binding-value uy1cbf@b))) (uy1c2c@gen-ref uy1ca1@src (car uy1cc5@var.lev) (cdr uy1cc5@var.lev) uy1ca4@maps))) (lambda (uy1cc7@uy1cc2 uy1cc8@uy1cc4) (let ((uy1ccb@maps uy1cc8@uy1cc4) (uy1ccc@var uy1cc7@uy1cc2)) (values (list 'ref uy1ccc@var) uy1ccb@maps)))) (values (list 'quote uy1ca2@e) uy1ca4@maps))))) uy1cb7@ls/false) (let ((uy1ccf@t uy1cb5@t)) (let ((uy1cd1@ls/false (uyd90@syntax-dispatch uy1ccf@t '(any any)))) (if (and uy1cd1@ls/false (apply (lambda (uy1cd3@dots uy1cd4@e) (uy1ca5@ellipsis? uy1cd3@dots)) uy1cd1@ls/false)) (apply (lambda (uy1cd7@dots uy1cd8@e) (if uy1ca6@vec? (uye70@syntax-violation '#f '"misplaced ellipsis in syntax form" uy1ca1@src) (uy1c2a@gen-syntax uy1ca1@src uy1cd8@e uy1ca3@r uy1ca4@maps (lambda (uy1cdb@x) '#f) '#f))) uy1cd1@ls/false) (let ((uy1cdd@t uy1ccf@t)) (let ((uy1cdf@ls/false (uyd90@syntax-dispatch uy1cdd@t '(any any . any)))) (if (and uy1cdf@ls/false (apply (lambda (uy1ce1@x uy1ce2@dots uy1ce3@y) (uy1ca5@ellipsis? uy1ce2@dots)) uy1cdf@ls/false)) (apply (lambda (uy1ce7@x uy1ce8@dots uy1ce9@y) (let uy1cff@f ((uy1ced@y uy1ce9@y) (uy1cee@k (lambda (uy1cf1@maps) (call-with-values (lambda () (uy1c2a@gen-syntax uy1ca1@src uy1ce7@x uy1ca3@r (cons '() uy1cf1@maps) uy1ca5@ellipsis? '#f)) (lambda (uy1cf7@uy1cf4 uy1cf8@uy1cf6) (let ((uy1cfb@maps uy1cf8@uy1cf6) (uy1cfc@x uy1cf7@uy1cf4)) (if (null? (car uy1cfb@maps)) (uye70@syntax-violation '#f '"extra ellipsis in syntax form" uy1ca1@src) (values (uy1c32@gen-map uy1cfc@x (car uy1cfb@maps)) (cdr uy1cfb@maps))))))))) (let ((uy1d01@t uy1ced@y)) (let ((uy1d03@ls/false (uyd90@syntax-dispatch uy1d01@t '()))) (if uy1d03@ls/false (apply (lambda () (uy1cee@k uy1ca4@maps)) uy1d03@ls/false) (let ((uy1d05@t uy1d01@t)) (let ((uy1d07@ls/false (uyd90@syntax-dispatch uy1d05@t '(any . any)))) (if (and uy1d07@ls/false (apply (lambda (uy1d09@dots uy1d0a@y) (uy1ca5@ellipsis? uy1d09@dots)) uy1d07@ls/false)) (apply (lambda (uy1d0d@dots uy1d0e@y) (uy1cff@f uy1d0e@y (lambda (uy1d11@maps) (call-with-values (lambda () (uy1cee@k (cons '() uy1d11@maps))) (lambda (uy1d17@uy1d14 uy1d18@uy1d16) (let ((uy1d1b@maps uy1d18@uy1d16) (uy1d1c@x uy1d17@uy1d14)) (if (null? (car uy1d1b@maps)) (uye70@syntax-violation '#f '"extra ellipsis in syntax form" uy1ca1@src) (values (uy1c30@gen-mappend uy1d1c@x (car uy1d1b@maps)) (cdr uy1d1b@maps))))))))) uy1d07@ls/false) (let ((uy1d1f@t uy1d05@t)) (let ((uy1d21@ls/false (uyd90@syntax-dispatch uy1d1f@t '_))) (if uy1d21@ls/false (apply (lambda () (call-with-values (lambda () (uy1c2a@gen-syntax uy1ca1@src uy1ced@y uy1ca3@r uy1ca4@maps uy1ca5@ellipsis? uy1ca6@vec?)) (lambda (uy1d27@uy1d24 uy1d28@uy1d26) (let ((uy1d2b@maps uy1d28@uy1d26) (uy1d2c@y uy1d27@uy1d24)) (call-with-values (lambda () (uy1cee@k uy1d2b@maps)) (lambda (uy1d33@uy1d30 uy1d34@uy1d32) (let ((uy1d37@maps uy1d34@uy1d32) (uy1d38@x uy1d33@uy1d30)) (values (uy1c2e@gen-append uy1d38@x uy1d2c@y) uy1d37@maps)))))))) uy1d21@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1d1f@t)))))))))))) uy1cdf@ls/false) (let ((uy1d3b@t uy1cdd@t)) (let ((uy1d3d@ls/false (uyd90@syntax-dispatch uy1d3b@t '(any . any)))) (if uy1d3d@ls/false (apply (lambda (uy1d3f@x uy1d40@y) (call-with-values (lambda () (uy1c2a@gen-syntax uy1ca1@src uy1d3f@x uy1ca3@r uy1ca4@maps uy1ca5@ellipsis? '#f)) (lambda (uy1d47@uy1d44 uy1d48@uy1d46) (let ((uy1d4b@maps uy1d48@uy1d46) (uy1d4c@xnew uy1d47@uy1d44)) (call-with-values (lambda () (uy1c2a@gen-syntax uy1ca1@src uy1d40@y uy1ca3@r uy1d4b@maps uy1ca5@ellipsis? uy1ca6@vec?)) (lambda (uy1d53@uy1d50 uy1d54@uy1d52) (let ((uy1d57@maps uy1d54@uy1d52) (uy1d58@ynew uy1d53@uy1d50)) (values (uy1c34@gen-cons uy1ca2@e uy1d3f@x uy1d40@y uy1d4c@xnew uy1d58@ynew) uy1d57@maps)))))))) uy1d3d@ls/false) (let ((uy1d5b@t uy1d3b@t)) (let ((uy1d5d@ls/false (uyd90@syntax-dispatch uy1d5b@t '#(vector each-any)))) (if uy1d5d@ls/false (apply (lambda (uy1d5f@ls) (call-with-values (lambda () (uy1c2a@gen-syntax uy1ca1@src uy1d5f@ls uy1ca3@r uy1ca4@maps uy1ca5@ellipsis? '#t)) (lambda (uy1d65@uy1d62 uy1d66@uy1d64) (let ((uy1d69@maps uy1d66@uy1d64) (uy1d6a@lsnew uy1d65@uy1d62)) (values (uy1c36@gen-vector uy1ca2@e uy1d5f@ls uy1d6a@lsnew) uy1d69@maps))))) uy1d5d@ls/false) (let ((uy1d6d@t uy1d5b@t)) (let ((uy1d6f@ls/false (uyd90@syntax-dispatch uy1d6d@t '_))) (if uy1d6f@ls/false (apply (lambda () (values (list 'quote uy1ca2@e) uy1ca4@maps)) uy1d6f@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1d6d@t)))))))))))))))))))))))) (uy1c2c@gen-ref (lambda (uy1c87@src uy1c88@var uy1c89@level uy1c8a@maps) (if (= uy1c89@level '0) (values uy1c88@var uy1c8a@maps) (if (null? uy1c8a@maps) (uye70@syntax-violation '#f '"missing ellipsis in syntax form" uy1c87@src) (call-with-values (lambda () (uy1c2c@gen-ref uy1c87@src uy1c88@var (- uy1c89@level '1) (cdr uy1c8a@maps))) (lambda (uy1c93@uy1c90 uy1c94@uy1c92) (let ((uy1c97@outer-maps uy1c94@uy1c92) (uy1c98@outer-var uy1c93@uy1c90)) (let ((uy1c9b@t (assq uy1c98@outer-var (car uy1c8a@maps)))) (if uy1c9b@t ((lambda (uy1c9d@b) (values (cdr uy1c9d@b) uy1c8a@maps)) uy1c9b@t) (let ((uy1c9f@inner-var (uyb11@gen-lexical 'tmp))) (values uy1c9f@inner-var (cons (cons (cons uy1c98@outer-var uy1c9f@inner-var) (car uy1c8a@maps)) uy1c97@outer-maps)))))))))))) (uy1c2e@gen-append (lambda (uy1c83@x uy1c84@y) (if (fast-equal? uy1c84@y ''()) uy1c83@x (list 'append uy1c83@x uy1c84@y)))) (uy1c30@gen-mappend (lambda (uy1c7f@e uy1c80@map-env) (list 'apply '(primitive append) (uy1c32@gen-map uy1c7f@e uy1c80@map-env)))) (uy1c32@gen-map (lambda (uy1c6d@e uy1c6e@map-env) (let ((uy1c71@formals (map cdr uy1c6e@map-env)) (uy1c72@actuals (map (lambda (uy1c75@x) (list 'ref (car uy1c75@x))) uy1c6e@map-env))) (if (eq? (car uy1c6d@e) 'ref) (car uy1c72@actuals) (if (for-all (lambda (uy1c77@x) (and (eq? (car uy1c77@x) 'ref) (memq (cadr uy1c77@x) uy1c71@formals))) (cdr uy1c6d@e)) (let ((uy1c79@args (map (let ((uy1c7b@r (map cons uy1c71@formals uy1c72@actuals))) (lambda (uy1c7d@x) (cdr (assq (cadr uy1c7d@x) uy1c7b@r)))) (cdr uy1c6d@e)))) (cons 'map (cons (list 'primitive (car uy1c6d@e)) uy1c79@args))) (cons* 'map (list 'lambda uy1c71@formals uy1c6d@e) uy1c72@actuals)))))) (uy1c34@gen-cons (lambda (uy1c5d@e uy1c5e@x uy1c5f@y uy1c60@xnew uy1c61@ynew) (let ((uy1c67@t (car uy1c61@ynew))) (if (memv uy1c67@t '(quote)) (if (eq? (car uy1c60@xnew) 'quote) (let ((uy1c69@xnew (cadr uy1c60@xnew)) (uy1c6a@ynew (cadr uy1c61@ynew))) (if (and (eq? uy1c69@xnew uy1c5e@x) (eq? uy1c6a@ynew uy1c5f@y)) (list 'quote uy1c5d@e) (list 'quote (cons uy1c69@xnew uy1c6a@ynew)))) (if (null? (cadr uy1c61@ynew)) (list 'list uy1c60@xnew) (list 'cons uy1c60@xnew uy1c61@ynew))) (if (memv uy1c67@t '(list)) (cons 'list (cons uy1c60@xnew (cdr uy1c61@ynew))) (list 'cons uy1c60@xnew uy1c61@ynew)))))) (uy1c36@gen-vector (lambda (uy1c57@e uy1c58@ls uy1c59@lsnew) (if (eq? (car uy1c59@lsnew) 'quote) (if (eq? (cadr uy1c59@lsnew) uy1c58@ls) (list 'quote uy1c57@e) (list 'quote (list->vector (cadr uy1c59@lsnew)))) (if (eq? (car uy1c59@lsnew) 'list) (cons 'vector (cdr uy1c59@lsnew)) (list 'list->vector uy1c59@lsnew))))) (uy1c38@regen (lambda (uy1c51@x) (let ((uy1c53@t (car uy1c51@x))) (if (memv uy1c53@t '(ref)) (cadr uy1c51@x) (if (memv uy1c53@t '(primitive)) (list 'primitive (cadr uy1c51@x)) (if (memv uy1c53@t '(quote)) (list 'quote (cadr uy1c51@x)) (if (memv uy1c53@t '(lambda)) (uyaec@uya1e@build-lambda '#f (cadr uy1c51@x) (uy1c38@regen (caddr uy1c51@x))) (if (memv uy1c53@t '(map)) (let ((uy1c55@ls (map uy1c38@regen (cdr uy1c51@x)))) (cons '(primitive ellipsis-map) uy1c55@ls)) (cons (list 'primitive (car uy1c51@x)) (map uy1c38@regen (cdr uy1c51@x)))))))))))) (lambda (uy1c39@e uy1c3a@r uy1c3b@mr) (let ((uy1c3f@t uy1c39@e)) (let ((uy1c41@ls/false (uyd90@syntax-dispatch uy1c3f@t '(_ any)))) (if uy1c41@ls/false (apply (lambda (uy1c43@x) (call-with-values (lambda () (uy1c2a@gen-syntax uy1c39@e uy1c43@x uy1c3a@r '() uyd92@ellipsis? '#f)) (lambda (uy1c49@uy1c46 uy1c4a@uy1c48) (let ((uy1c4d@maps uy1c4a@uy1c48) (uy1c4e@e uy1c49@uy1c46)) (uy1c38@regen uy1c4e@e))))) uy1c41@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1c3f@t))))))) (set! uy28a2@uyd9c@syntax-transformer uyd9c@syntax-transformer) (set! uyd9e@core-macro-transformer (lambda (uy1d71@name) (let ((uy1d73@t uy1d71@name)) (if (memv uy1d73@t '(quote)) uyd40@quote-transformer (if (memv uy1d73@t '(lambda)) uyd44@lambda-transformer (if (memv uy1d73@t '(case-lambda)) uyd42@case-lambda-transformer (if (memv uy1d73@t '(letrec)) uyd28@letrec-transformer (if (memv uy1d73@t '(letrec*)) uyd2a@letrec*-transformer (if (memv uy1d73@t '(let)) uyd26@let-transformer (if (memv uy1d73@t '(if)) uyd38@if-transformer (if (memv uy1d73@t '(and)) uyd3a@and-transformer (if (memv uy1d73@t '(or)) uyd3c@or-transformer (if (memv uy1d73@t '(foreign-call)) uyd8c@foreign-call-transformer (if (memv uy1d73@t '(syntax-case)) uyd98@syntax-case-transformer (if (memv uy1d73@t '(syntax)) uyd9c@syntax-transformer (if (memv uy1d73@t '(type-descriptor)) uyd2e@type-descriptor-transformer (if (memv uy1d73@t '(record-type-descriptor)) uyd30@record-type-descriptor-transformer (if (memv uy1d73@t '(record-constructor-descriptor)) uyd32@record-constructor-descriptor-transformer (if (memv uy1d73@t '(fluid-let-syntax)) uyd2c@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" uy1d71@name)))))))))))))))))))) (set! uy28a3@uyd9e@core-macro-transformer uyd9e@core-macro-transformer) (set! uyda0@symbol-macro (lambda (uy1d75@x uy1d76@set) (let ((uy1d79@t uy1d75@x)) (let ((uy1d7b@ls/false (uyd90@syntax-dispatch uy1d79@t '(_ any)))) (if (and uy1d7b@ls/false (apply (lambda (uy1d7d@name) (and (uyb89@id? uy1d7d@name) (memq (uyb8b@id->sym uy1d7d@name) uy1d76@set))) uy1d7b@ls/false)) (apply (lambda (uy1d7f@name) (uyd46@bless (list 'quote uy1d7f@name))) uy1d7b@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1d79@t)))))) (set! uy28a4@uyda0@symbol-macro uyda0@symbol-macro) (set! uyda2@macro-transformer (lambda (uy1d81@x) (if (procedure? uy1d81@x) uy1d81@x (if (symbol? uy1d81@x) (let ((uy1d83@t uy1d81@x)) (if (memv uy1d83@t '(define-record-type)) uyd84@define-record-type-macro (if (memv uy1d83@t '(define-struct)) uyd82@define-struct-macro (if (memv uy1d83@t '(include)) uyd78@include-macro (if (memv uy1d83@t '(cond)) uyd74@cond-macro (if (memv uy1d83@t '(let)) uyd4c@let-macro (if (memv uy1d83@t '(do)) uyd6c@do-macro (if (memv uy1d83@t '(or)) uyd70@or-macro (if (memv uy1d83@t '(and)) uyd72@and-macro (if (memv uy1d83@t '(let*)) uyd6e@let*-macro (if (memv uy1d83@t '(let-values)) uyd4e@let-values-macro (if (memv uy1d83@t '(let*-values)) uyd50@let*-values-macro (if (memv uy1d83@t '(syntax-rules)) uyd7c@syntax-rules-macro (if (memv uy1d83@t '(quasiquote)) uyd7e@quasiquote-macro (if (memv uy1d83@t '(quasisyntax)) uyd80@quasisyntax-macro (if (memv uy1d83@t '(with-syntax)) uyd48@with-syntax-macro (if (memv uy1d83@t '(when)) uyd34@when-macro (if (memv uy1d83@t '(unless)) uyd36@unless-macro (if (memv uy1d83@t '(case)) uyd3e@case-macro (if (memv uy1d83@t '(identifier-syntax)) uyd6a@identifier-syntax-macro (if (memv uy1d83@t '(time)) uyd62@time-macro (if (memv uy1d83@t '(delay)) uyd64@delay-macro (if (memv uy1d83@t '(assert)) uyd66@assert-macro (if (memv uy1d83@t '(endianness)) uyd68@endianness-macro (if (memv uy1d83@t '(guard)) uyd5e@guard-macro (if (memv uy1d83@t '(define-enumeration)) uyd60@define-enumeration-macro (if (memv uy1d83@t '(trace-lambda)) uyd52@trace-lambda-macro (if (memv uy1d83@t '(trace-define)) uyd54@trace-define-macro (if (memv uy1d83@t '(trace-define-syntax)) uyd56@trace-define-syntax-macro (if (memv uy1d83@t '(trace-let-syntax)) uyd5a@trace-let-syntax-macro (if (memv uy1d83@t '(trace-letrec-syntax)) uyd5c@trace-letrec-syntax-macro (if (memv uy1d83@t '(define-condition-type)) uyd86@define-condition-type-macro (if (memv uy1d83@t '(parameterize)) uyd8a@parameterize-macro (if (memv uy1d83@t '(include-into)) uyd7a@include-into-macro (if (memv uy1d83@t '(eol-style)) (lambda (uy1d85@x) (uyda0@symbol-macro uy1d85@x '(none lf cr crlf nel crnel ls))) (if (memv uy1d83@t '(error-handling-mode)) (lambda (uy1d87@x) (uyda0@symbol-macro uy1d87@x '(ignore raise replace))) (if (memv uy1d83@t '(buffer-mode)) (lambda (uy1d89@x) (uyda0@symbol-macro uy1d89@x '(none line block))) (if (memv uy1d83@t '(file-options)) uyb04@file-options-macro (if (memv uy1d83@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) uyd88@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" uy1d81@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" uy1d81@x))))) (set! uy28a5@uyda2@macro-transformer uyda2@macro-transformer) (set! uyda4@local-macro-transformer (lambda (uy1d8b@x) (car uy1d8b@x))) (set! uy28a6@uyda4@local-macro-transformer uyda4@local-macro-transformer) (set! uyda6@do-macro-call (lambda (uy1d8d@transformer uy1d8e@expr uy1d8f@rib) (let ((uy1d93@out (uy1d8d@transformer (uyb75@add-mark uyb6d@anti-mark '#f uy1d8e@expr '#f)))) (begin (let uy1d97@f ((uy1d95@x uy1d93@out)) (if (not (uyb55@stx? uy1d95@x)) (if (pair? uy1d95@x) (begin (uy1d97@f (car uy1d95@x)) (uy1d97@f (cdr uy1d95@x))) (if (vector? uy1d95@x) (vector-for-each uy1d97@f uy1d95@x) (if (symbol? uy1d95@x) (uye70@syntax-violation '#f '"raw symbol encountered in output of macro" uy1d8e@expr uy1d95@x) (void)))) (void))) (uyb75@add-mark (uyb6b@gen-mark) uy1d8f@rib uy1d93@out uy1d8e@expr))))) (set! uy28a7@uyda6@do-macro-call uyda6@do-macro-call) (set! uyda8@chi-macro (lambda (uy1d99@p uy1d9a@e uy1d9b@rib) (uyda6@do-macro-call (uyda2@macro-transformer uy1d99@p) uy1d9a@e uy1d9b@rib))) (set! uy28a8@uyda8@chi-macro uyda8@chi-macro) (set! uydaa@chi-local-macro (lambda (uy1d9f@p uy1da0@e uy1da1@rib) (uyda6@do-macro-call (uyda4@local-macro-transformer uy1d9f@p) uy1da0@e uy1da1@rib))) (set! uy28a9@uydaa@chi-local-macro uydaa@chi-local-macro) (set! uydac@chi-global-macro (lambda (uy1da5@p uy1da6@e uy1da7@rib) (let ((uy1dab@lib (car uy1da5@p)) (uy1dac@loc (cdr uy1da5@p))) (begin (uy9a6@uy7f5@visit-library uy1dab@lib) (let ((uy1daf@x (symbol-value uy1dac@loc))) (let ((uy1db1@transformer (if (procedure? uy1daf@x) uy1daf@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" uy1daf@x)))) (uyda6@do-macro-call uy1db1@transformer uy1da6@e uy1da7@rib))))))) (set! uy28aa@uydac@chi-global-macro uydac@chi-global-macro) (set! uydae@chi-expr* (lambda (uy1db3@e* uy1db4@r uy1db5@mr) (if (null? uy1db3@e*) '() (let ((uy1db9@e (uydb2@chi-expr (car uy1db3@e*) uy1db4@r uy1db5@mr))) (cons uy1db9@e (uydae@chi-expr* (cdr uy1db3@e*) uy1db4@r uy1db5@mr)))))) (set! uy28ab@uydae@chi-expr* uydae@chi-expr*) (set! uydb0@chi-application (lambda (uy1dbb@e uy1dbc@r uy1dbd@mr) (let ((uy1dc1@t uy1dbb@e)) (let ((uy1dc3@ls/false (uyd90@syntax-dispatch uy1dc1@t '(any . each-any)))) (if uy1dc3@ls/false (apply (lambda (uy1dc5@rator uy1dc6@rands) (let ((uy1dc9@rator (uydb2@chi-expr uy1dc5@rator uy1dbc@r uy1dbd@mr))) (cons uy1dc9@rator (uydae@chi-expr* uy1dc6@rands uy1dbc@r uy1dbd@mr)))) uy1dc3@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1dc1@t)))))) (set! uy28ac@uydb0@chi-application uydb0@chi-application) (set! uydb2@chi-expr (lambda (uy1dcb@e uy1dcc@r uy1dcd@mr) (call-with-values (lambda () (uybab@syntax-type uy1dcb@e uy1dcc@r)) (lambda (uy1dd7@uy1dd2 uy1dd8@uy1dd4 uy1dd9@uy1dd6) (let ((uy1ddd@kwd uy1dd9@uy1dd6) (uy1dde@value uy1dd8@uy1dd4) (uy1ddf@type uy1dd7@uy1dd2)) (let ((uy1de3@t uy1ddf@type)) (if (memv uy1de3@t '(core-macro)) (let ((uy1de5@transformer (uyd9e@core-macro-transformer uy1dde@value))) (uy1de5@transformer uy1dcb@e uy1dcc@r uy1dcd@mr)) (if (memv uy1de3@t '(global)) (let ((uy1de7@lib (car uy1dde@value))) (let ((uy1de9@loc (cdr uy1dde@value))) (begin ((uydf8@inv-collector) uy1de7@lib) uy1de9@loc))) (if (memv uy1de3@t '(core-prim)) (let ((uy1deb@name uy1dde@value)) (list 'primitive uy1deb@name)) (if (memv uy1de3@t '(call)) (uydb0@chi-application uy1dcb@e uy1dcc@r uy1dcd@mr) (if (memv uy1de3@t '(lexical)) (let ((uy1ded@lex (uyd1a@lexical-var uy1dde@value))) uy1ded@lex) (if (memv uy1de3@t '(global-macro global-macro!)) (uydb2@chi-expr (uydac@chi-global-macro uy1dde@value uy1dcb@e '#f) uy1dcc@r uy1dcd@mr) (if (memv uy1de3@t '(local-macro local-macro!)) (uydb2@chi-expr (uydaa@chi-local-macro uy1dde@value uy1dcb@e '#f) uy1dcc@r uy1dcd@mr) (if (memv uy1de3@t '(macro macro!)) (uydb2@chi-expr (uyda8@chi-macro uy1dde@value uy1dcb@e '#f) uy1dcc@r uy1dcd@mr) (if (memv uy1de3@t '(constant)) (let ((uy1def@datum uy1dde@value)) (list 'quote uy1def@datum)) (if (memv uy1de3@t '(set!)) (uydb4@chi-set! uy1dcb@e uy1dcc@r uy1dcd@mr) (if (memv uy1de3@t '(begin)) (let ((uy1df1@t uy1dcb@e)) (let ((uy1df3@ls/false (uyd90@syntax-dispatch uy1df1@t '(_ any . each-any)))) (if uy1df3@ls/false (apply (lambda (uy1df5@x uy1df6@x*) (uyaee@uya4e@build-sequence '#f (uydae@chi-expr* (cons uy1df5@x uy1df6@x*) uy1dcc@r uy1dcd@mr))) uy1df3@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1df1@t)))) (if (memv uy1de3@t '(let-syntax letrec-syntax)) (let ((uy1df9@t uy1dcb@e)) (let ((uy1dfb@ls/false (uyd90@syntax-dispatch uy1df9@t '(_ #(each (any any)) any . each-any)))) (if (and uy1dfb@ls/false (apply (lambda (uy1dfd@xlhs* uy1dfe@xrhs* uy1dff@xbody uy1e00@xbody*) (if (not (uyb91@valid-bound-ids? uy1dfd@xlhs*)) (uye70@syntax-violation '#f '"invalid identifiers" uy1dcb@e) (void))) uy1dfb@ls/false)) (apply (lambda (uy1e05@xlhs* uy1e06@xrhs* uy1e07@xbody uy1e08@xbody*) (let ((uy1e0d@xlab* (map uyb15@gen-label uy1e05@xlhs*))) (let ((uy1e0f@xrib (uyb49@make-full-rib uy1e05@xlhs* uy1e0d@xlab*))) (let ((uy1e11@xb* (map (lambda (uy1e13@x) (uybc1@make-eval-transformer (uydea@expand-transformer (if (eq? uy1ddf@type 'let-syntax) uy1e13@x (uyb73@add-subst uy1e0f@xrib uy1e13@x)) uy1dcd@mr))) uy1e06@xrhs*))) (uyaee@uya4e@build-sequence '#f (uydae@chi-expr* (map (lambda (uy1e15@x) (uyb73@add-subst uy1e0f@xrib uy1e15@x)) (cons uy1e07@xbody uy1e08@xbody*)) (append (map cons uy1e0d@xlab* uy1e11@xb*) uy1dcc@r) (append (map cons uy1e0d@xlab* uy1e11@xb*) uy1dcd@mr))))))) uy1dfb@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1df9@t)))) (if (memv uy1de3@t '(displaced-lexical)) (uye70@syntax-violation '#f '"identifier out of context" uy1dcb@e) (if (memv uy1de3@t '(syntax)) (uye70@syntax-violation '#f '"reference to pattern variable outside a syntax form" uy1dcb@e) (if (memv uy1de3@t '(define define-syntax module import library)) (uye70@syntax-violation '#f (string-append (let ((uy1e17@t uy1ddf@type)) (if (memv uy1e17@t '(define)) '"a definition" (if (memv uy1e17@t '(define-syntax)) '"a define-syntax" (if (memv uy1e17@t '(module)) '"a module definition" (if (memv uy1e17@t '(library)) '"a library definition" (if (memv uy1e17@t '(import)) '"an import declaration" (if (memv uy1e17@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") uy1dcb@e) (if (memv uy1de3@t '(mutable)) (uye70@syntax-violation '#f '"attempt to reference an unexportable variable" uy1dcb@e) (uye70@syntax-violation '#f '"invalid expression" uy1dcb@e))))))))))))))))))))))) (set! uy28ad@uydb2@chi-expr uydb2@chi-expr) (set! uydb4@chi-set! (lambda (uy1e19@e uy1e1a@r uy1e1b@mr) (let ((uy1e1f@t uy1e19@e)) (let ((uy1e21@ls/false (uyd90@syntax-dispatch uy1e1f@t '(_ any any)))) (if (and uy1e21@ls/false (apply (lambda (uy1e23@x uy1e24@v) (uyb89@id? uy1e23@x)) uy1e21@ls/false)) (apply (lambda (uy1e27@x uy1e28@v) (call-with-values (lambda () (uybab@syntax-type uy1e27@x uy1e1a@r)) (lambda (uy1e31@uy1e2c uy1e32@uy1e2e uy1e33@uy1e30) (let ((uy1e37@kwd uy1e33@uy1e30) (uy1e38@value uy1e32@uy1e2e) (uy1e39@type uy1e31@uy1e2c)) (let ((uy1e3d@t uy1e39@type)) (if (memv uy1e3d@t '(lexical)) (begin (uyd1e@set-lexical-mutable! uy1e38@value '#t) (list 'set! (uyd1a@lexical-var uy1e38@value) (uydb2@chi-expr uy1e28@v uy1e1a@r uy1e1b@mr))) (if (memv uy1e3d@t '(core-prim)) (uye70@syntax-violation '#f '"cannot modify imported core primitive" uy1e19@e) (if (memv uy1e3d@t '(global)) (uye70@syntax-violation '#f '"attempt to modify imported binding" uy1e19@e) (if (memv uy1e3d@t '(global-macro!)) (uydb2@chi-expr (uydac@chi-global-macro uy1e38@value uy1e19@e '#f) uy1e1a@r uy1e1b@mr) (if (memv uy1e3d@t '(local-macro!)) (uydb2@chi-expr (uydaa@chi-local-macro uy1e38@value uy1e19@e '#f) uy1e1a@r uy1e1b@mr) (if (memv uy1e3d@t '(mutable)) (uye70@syntax-violation '#f '"attempt to assign to an unexportable variable" uy1e19@e) (uye70@syntax-violation '#f '"invalid syntax" uy1e19@e)))))))))))) uy1e21@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1e1f@t)))))) (set! uy28ae@uydb4@chi-set! uydb4@chi-set!) (set! uydb6@verify-formals (lambda (uy1e3f@fmls uy1e40@stx) (let ((uy1e43@t uy1e3f@fmls)) (let ((uy1e45@ls/false (uyd90@syntax-dispatch uy1e43@t 'each-any))) (if uy1e45@ls/false (apply (lambda (uy1e47@x*) (if (not (uyb91@valid-bound-ids? uy1e47@x*)) (uyd4a@invalid-fmls-error uy1e40@stx uy1e3f@fmls) (void))) uy1e45@ls/false) (let ((uy1e49@t uy1e43@t)) (let ((uy1e4b@ls/false (uyd90@syntax-dispatch uy1e49@t '#(each+ any () any)))) (if uy1e4b@ls/false (apply (lambda (uy1e4d@x* uy1e4e@x) (if (not (uyb91@valid-bound-ids? (cons uy1e4e@x uy1e4d@x*))) (uyd4a@invalid-fmls-error uy1e40@stx uy1e3f@fmls) (void))) uy1e4b@ls/false) (let ((uy1e51@t uy1e49@t)) (let ((uy1e53@ls/false (uyd90@syntax-dispatch uy1e51@t '_))) (if uy1e53@ls/false (apply (lambda () (uye70@syntax-violation '#f '"invalid syntax" uy1e40@stx)) uy1e53@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1e51@t)))))))))))) (set! uy28af@uydb6@verify-formals uydb6@verify-formals) (set! uydb8@chi-lambda-clause (lambda (uy1e55@stx uy1e56@fmls uy1e57@body* uy1e58@r uy1e59@mr) (let ((uy1e5f@t uy1e56@fmls)) (let ((uy1e61@ls/false (uyd90@syntax-dispatch uy1e5f@t 'each-any))) (if uy1e61@ls/false (apply (lambda (uy1e63@x*) (begin (uydb6@verify-formals uy1e56@fmls uy1e55@stx) (let ((uy1e65@lex* (map uyb11@gen-lexical uy1e63@x*)) (uy1e66@lab* (map uyb15@gen-label uy1e63@x*))) (values uy1e65@lex* (uydc8@chi-internal (uyb73@add-subst (uyb49@make-full-rib uy1e63@x* uy1e66@lab*) uy1e57@body*) (uyd22@add-lexicals uy1e66@lab* uy1e65@lex* uy1e58@r) uy1e59@mr))))) uy1e61@ls/false) (let ((uy1e69@t uy1e5f@t)) (let ((uy1e6b@ls/false (uyd90@syntax-dispatch uy1e69@t '#(each+ any () any)))) (if uy1e6b@ls/false (apply (lambda (uy1e6d@x* uy1e6e@x) (begin (uydb6@verify-formals uy1e56@fmls uy1e55@stx) (let ((uy1e71@lex* (map uyb11@gen-lexical uy1e6d@x*)) (uy1e72@lab* (map uyb15@gen-label uy1e6d@x*)) (uy1e73@lex (uyb11@gen-lexical uy1e6e@x)) (uy1e74@lab (uyb15@gen-label uy1e6e@x))) (values (append uy1e71@lex* uy1e73@lex) (uydc8@chi-internal (uyb73@add-subst (uyb49@make-full-rib (cons uy1e6e@x uy1e6d@x*) (cons uy1e74@lab uy1e72@lab*)) uy1e57@body*) (uyd22@add-lexicals (cons uy1e74@lab uy1e72@lab*) (cons uy1e73@lex uy1e71@lex*) uy1e58@r) uy1e59@mr))))) uy1e6b@ls/false) (let ((uy1e79@t uy1e69@t)) (let ((uy1e7b@ls/false (uyd90@syntax-dispatch uy1e79@t '_))) (if uy1e7b@ls/false (apply (lambda () (uye70@syntax-violation '#f '"invalid syntax" uy1e56@fmls)) uy1e7b@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1e79@t)))))))))))) (set! uy28b0@uydb8@chi-lambda-clause uydb8@chi-lambda-clause) (set! uydba@chi-lambda-clause* (lambda (uy1e7d@stx uy1e7e@fmls* uy1e7f@body** uy1e80@r uy1e81@mr) (if (null? uy1e7e@fmls*) (values '() '()) (call-with-values (lambda () (uydb8@chi-lambda-clause uy1e7d@stx (car uy1e7e@fmls*) (car uy1e7f@body**) uy1e80@r uy1e81@mr)) (lambda (uy1e8b@uy1e88 uy1e8c@uy1e8a) (let ((uy1e8f@b uy1e8c@uy1e8a) (uy1e90@a uy1e8b@uy1e88)) (call-with-values (lambda () (uydba@chi-lambda-clause* uy1e7d@stx (cdr uy1e7e@fmls*) (cdr uy1e7f@body**) uy1e80@r uy1e81@mr)) (lambda (uy1e97@uy1e94 uy1e98@uy1e96) (let ((uy1e9b@b* uy1e98@uy1e96) (uy1e9c@a* uy1e97@uy1e94)) (values (cons uy1e90@a uy1e9c@a*) (cons uy1e8f@b uy1e9b@b*))))))))))) (set! uy28b1@uydba@chi-lambda-clause* uydba@chi-lambda-clause*) (set! uydbc@chi-defun (lambda (uy1e9f@x uy1ea0@r uy1ea1@mr) (let ((uy1ea5@fmls (car uy1e9f@x)) (uy1ea6@body* (cdr uy1e9f@x))) (call-with-values (lambda () (uydb8@chi-lambda-clause uy1ea5@fmls uy1ea5@fmls uy1ea6@body* uy1ea0@r uy1ea1@mr)) (lambda (uy1ead@uy1eaa uy1eae@uy1eac) (let ((uy1eb1@body uy1eae@uy1eac) (uy1eb2@fmls uy1ead@uy1eaa)) (uyaec@uya1e@build-lambda '#f uy1eb2@fmls uy1eb1@body))))))) (set! uy28b2@uydbc@chi-defun uydbc@chi-defun) (set! uydbe@chi-rhs (lambda (uy1eb5@rhs uy1eb6@r uy1eb7@mr) (let ((uy1ebb@t (car uy1eb5@rhs))) (if (memv uy1ebb@t '(defun)) (uydbc@chi-defun (cdr uy1eb5@rhs) uy1eb6@r uy1eb7@mr) (if (memv uy1ebb@t '(expr)) (let ((uy1ebd@expr (cdr uy1eb5@rhs))) (uydb2@chi-expr uy1ebd@expr uy1eb6@r uy1eb7@mr)) (if (memv uy1ebb@t '(top-expr)) (let ((uy1ebf@expr (cdr uy1eb5@rhs))) (uyaee@uya4e@build-sequence '#f (list (uydb2@chi-expr uy1ebf@expr uy1eb6@r uy1eb7@mr) (uyaef@uya50@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" uy1eb5@rhs))))))) (set! uy28b3@uydbe@chi-rhs uydbe@chi-rhs) (set! uydc0@expand-interaction-rhs*/init* (lambda (uy1ec1@lhs* uy1ec2@rhs* uy1ec3@init* uy1ec4@r uy1ec5@mr) (let uy1ecf@f ((uy1ecb@lhs* uy1ec1@lhs*) (uy1ecc@rhs* uy1ec2@rhs*)) (if (null? uy1ecb@lhs*) (map (lambda (uy1ed1@x) (uydb2@chi-expr uy1ed1@x uy1ec4@r uy1ec5@mr)) uy1ec3@init*) (let ((uy1ed3@lhs (car uy1ecb@lhs*)) (uy1ed4@rhs (car uy1ecc@rhs*))) (let ((uy1ed7@t (car uy1ed4@rhs))) (if (memv uy1ed7@t '(defun)) (let ((uy1ed9@rhs (uydbc@chi-defun (cdr uy1ed4@rhs) uy1ec4@r uy1ec5@mr))) (cons (list 'set! uy1ed3@lhs uy1ed9@rhs) (uy1ecf@f (cdr uy1ecb@lhs*) (cdr uy1ecc@rhs*)))) (if (memv uy1ed7@t '(expr)) (let ((uy1edb@rhs (uydb2@chi-expr (cdr uy1ed4@rhs) uy1ec4@r uy1ec5@mr))) (cons (list 'set! uy1ed3@lhs uy1edb@rhs) (uy1ecf@f (cdr uy1ecb@lhs*) (cdr uy1ecc@rhs*)))) (if (memv uy1ed7@t '(top-expr)) (let ((uy1edd@e (uydb2@chi-expr (cdr uy1ed4@rhs) uy1ec4@r uy1ec5@mr))) (cons uy1edd@e (uy1ecf@f (cdr uy1ecb@lhs*) (cdr uy1ecc@rhs*)))) (error 'expand-interaction '"invallid" uy1ed4@rhs)))))))))) (set! uy28b4@uydc0@expand-interaction-rhs*/init* uydc0@expand-interaction-rhs*/init*) (set! uydc2@chi-rhs* (lambda (uy1edf@rhs* uy1ee0@r uy1ee1@mr) (let uy1ee7@f ((uy1ee5@ls uy1edf@rhs*)) (if (null? uy1ee5@ls) '() (let ((uy1ee9@a (uydbe@chi-rhs (car uy1ee5@ls) uy1ee0@r uy1ee1@mr))) (cons uy1ee9@a (uy1ee7@f (cdr uy1ee5@ls)))))))) (set! uy28b5@uydc2@chi-rhs* uydc2@chi-rhs*) (set! uydc4@find-bound=? (lambda (uy1eeb@x uy1eec@lhs* uy1eed@rhs*) (if (null? uy1eec@lhs*) '#f (if (uyb8d@bound-id=? uy1eeb@x (car uy1eec@lhs*)) (car uy1eed@rhs*) (uydc4@find-bound=? uy1eeb@x (cdr uy1eec@lhs*) (cdr uy1eed@rhs*)))))) (set! uy28b6@uydc4@find-bound=? uydc4@find-bound=?) (set! uydc6@find-dups (lambda (uy1ef1@ls) (let uy1ef7@f ((uy1ef3@ls uy1ef1@ls) (uy1ef4@dups '())) (if (null? uy1ef3@ls) uy1ef4@dups (let ((uy1ef9@t (uydc4@find-bound=? (car uy1ef3@ls) (cdr uy1ef3@ls) (cdr uy1ef3@ls)))) (if uy1ef9@t ((lambda (uy1efb@x) (uy1ef7@f (cdr uy1ef3@ls) (cons (list (car uy1ef3@ls) uy1efb@x) uy1ef4@dups))) uy1ef9@t) (uy1ef7@f (cdr uy1ef3@ls) uy1ef4@dups))))))) (set! uy28b7@uydc6@find-dups uydc6@find-dups) (set! uydc8@chi-internal (lambda (uy1efd@e* uy1efe@r uy1eff@mr) (let ((uy1f03@rib (uyb3d@make-empty-rib))) (call-with-values (lambda () (uyde8@chi-body* (map (lambda (uy1f15@x) (uyb73@add-subst uy1f03@rib uy1f15@x)) (uyb87@syntax->list uy1efd@e*)) uy1efe@r uy1eff@mr '() '() '() '() '() uy1f03@rib '#f)) (lambda (uy1f17@uy1f06 uy1f18@uy1f08 uy1f19@uy1f0a uy1f1a@uy1f0c uy1f1b@uy1f0e uy1f1c@uy1f10 uy1f1d@uy1f12 uy1f1e@uy1f14) (let ((uy1f27@_exp* uy1f1e@uy1f14) (uy1f28@kwd* uy1f1d@uy1f12) (uy1f29@mod** uy1f1c@uy1f10) (uy1f2a@rhs* uy1f1b@uy1f0e) (uy1f2b@lex* uy1f1a@uy1f0c) (uy1f2c@mr uy1f19@uy1f0a) (uy1f2d@r uy1f18@uy1f08) (uy1f2e@e* uy1f17@uy1f06)) (begin (if (null? uy1f2e@e*) (uye70@syntax-violation '#f '"no expression in body" uy1f2e@e*) (void)) (let ((uy1f37@init* (uydae@chi-expr* (append (apply append (reverse uy1f29@mod**)) uy1f2e@e*) uy1f2d@r uy1f2c@mr))) (let ((uy1f39@rhs* (uydc2@chi-rhs* uy1f2a@rhs* uy1f2d@r uy1f2c@mr))) (uyaf3@uya58@build-letrec* '#f (reverse uy1f2b@lex*) (reverse uy1f39@rhs*) (uyaee@uya4e@build-sequence '#f uy1f37@init*))))))))))) (set! uy28b8@uydc8@chi-internal uydc8@chi-internal) (set! uydca@parse-module (lambda (uy1f3b@e) (let ((uy1f3d@t uy1f3b@e)) (let ((uy1f3f@ls/false (uyd90@syntax-dispatch uy1f3d@t '(_ each-any . each-any)))) (if uy1f3f@ls/false (apply (lambda (uy1f41@export* uy1f42@b*) (begin (if (not (for-all uyb89@id? uy1f41@export*)) (uye70@syntax-violation '#f '"module exports must be identifiers" uy1f3b@e) (void)) (values '#f (list->vector uy1f41@export*) uy1f42@b*))) uy1f3f@ls/false) (let ((uy1f45@t uy1f3d@t)) (let ((uy1f47@ls/false (uyd90@syntax-dispatch uy1f45@t '(_ any each-any . each-any)))) (if uy1f47@ls/false (apply (lambda (uy1f49@name uy1f4a@export* uy1f4b@b*) (begin (if (not (uyb89@id? uy1f49@name)) (uye70@syntax-violation '#f '"module name must be an identifier" uy1f3b@e) (void)) (if (not (for-all uyb89@id? uy1f4a@export*)) (uye70@syntax-violation '#f '"module exports must be identifiers" uy1f3b@e) (void)) (values uy1f49@name (list->vector uy1f4a@export*) uy1f4b@b*))) uy1f47@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy1f45@t))))))))) (set! uy28b9@uydca@parse-module uydca@parse-module) (set! uydd4@module-interface? (lambda (uy1f4f@x) (and (simple-struct? uy1f4f@x) (eq? (simple-struct-name uy1f4f@x) 'module-interface)))) (set! uy28ba@uydd4@module-interface? uydd4@module-interface?) (set! uydd6@module-interface-first-mark (lambda (uy1f51@x) (simple-struct-ref uy1f51@x '0))) (set! uy28bb@uydd6@module-interface-first-mark uydd6@module-interface-first-mark) (set! uydd8@set-module-interface-first-mark! (lambda (uy1f53@x uy1f54@val) (simple-struct-set! uy1f53@x '0 uy1f54@val))) (set! uy28bc@uydd8@set-module-interface-first-mark! uydd8@set-module-interface-first-mark!) (set! uydda@module-interface-exp-id-vec (lambda (uy1f57@x) (simple-struct-ref uy1f57@x '1))) (set! uy28bd@uydda@module-interface-exp-id-vec uydda@module-interface-exp-id-vec) (set! uyddc@set-module-interface-exp-id-vec! (lambda (uy1f59@x uy1f5a@val) (simple-struct-set! uy1f59@x '1 uy1f5a@val))) (set! uy28be@uyddc@set-module-interface-exp-id-vec! uyddc@set-module-interface-exp-id-vec!) (set! uydde@module-interface-exp-lab-vec (lambda (uy1f5d@x) (simple-struct-ref uy1f5d@x '2))) (set! uy28bf@uydde@module-interface-exp-lab-vec uydde@module-interface-exp-lab-vec) (set! uyde0@set-module-interface-exp-lab-vec! (lambda (uy1f5f@x uy1f60@val) (simple-struct-set! uy1f5f@x '2 uy1f60@val))) (set! uy28c0@uyde0@set-module-interface-exp-lab-vec! uyde0@set-module-interface-exp-lab-vec!) (set! uyde2@dummy '3) (set! uy28c1@uyde2@dummy uyde2@dummy) (set! uyde4@module-interface-exp-id* (lambda (uy1f63@iface uy1f64@id) (letrec* ((uy1f68@diff-marks (lambda (uy1f6f@ls uy1f70@x) (begin (if (null? uy1f6f@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((uy1f73@a (car uy1f6f@ls))) (if (eq? uy1f73@a uy1f70@x) '() (cons uy1f73@a (uy1f68@diff-marks (cdr uy1f6f@ls) uy1f70@x)))))))) (let ((uy1f69@diff (uy1f68@diff-marks (uyb5b@stx-mark* uy1f64@id) (uydd6@module-interface-first-mark uy1f63@iface))) (uy1f6a@id-vec (uydda@module-interface-exp-id-vec uy1f63@iface))) (if (null? uy1f69@diff) uy1f6a@id-vec (vector-map (lambda (uy1f6d@x) (make-simple-struct 'stx '5 (list (uyb57@stx-expr uy1f6d@x) (append uy1f69@diff (uyb5b@stx-mark* uy1f6d@x)) '() '()))) uy1f6a@id-vec)))))) (set! uy28c2@uyde4@module-interface-exp-id* uyde4@module-interface-exp-id*) (set! uyde6@chi-internal-module (lambda (uy1f75@e uy1f76@r uy1f77@mr uy1f78@lex* uy1f79@rhs* uy1f7a@mod** uy1f7b@kwd*) (call-with-values (lambda () (uydca@parse-module uy1f75@e)) (lambda (uy1f89@uy1f84 uy1f8a@uy1f86 uy1f8b@uy1f88) (let ((uy1f8f@e* uy1f8b@uy1f88) (uy1f90@exp-id* uy1f8a@uy1f86) (uy1f91@name uy1f89@uy1f84)) (let ((uy1f95@rib (uyb3d@make-empty-rib))) (let ((uy1f97@e* (map (lambda (uy1f99@x) (uyb73@add-subst uy1f95@rib uy1f99@x)) (uyb87@syntax->list uy1f8f@e*)))) (call-with-values (lambda () (uyde8@chi-body* uy1f97@e* uy1f76@r uy1f77@mr uy1f78@lex* uy1f79@rhs* uy1f7a@mod** uy1f7b@kwd* '() uy1f95@rib '#f)) (lambda (uy1fab@uy1f9c uy1fac@uy1f9e uy1fad@uy1fa0 uy1fae@uy1fa2 uy1faf@uy1fa4 uy1fb0@uy1fa6 uy1fb1@uy1fa8 uy1fb2@uy1faa) (let ((uy1fbb@_exp* uy1fb2@uy1faa) (uy1fbc@kwd* uy1fb1@uy1fa8) (uy1fbd@mod** uy1fb0@uy1fa6) (uy1fbe@rhs* uy1faf@uy1fa4) (uy1fbf@lex* uy1fae@uy1fa2) (uy1fc0@mr uy1fad@uy1fa0) (uy1fc1@r uy1fac@uy1f9e) (uy1fc2@e* uy1fab@uy1f9c)) (let ((uy1fcb@exp-lab* (vector-map (lambda (uy1fcf@x) (or (uyb9f@id->label (make-simple-struct 'stx '5 (list (uyb8b@id->sym uy1fcf@x) (uyb5b@stx-mark* uy1fcf@x) (list uy1f95@rib) '()))) (uye70@syntax-violation '#f '"cannot find module export" uy1fcf@x))) uy1f90@exp-id*)) (uy1fcc@mod** (cons uy1fc2@e* uy1fbd@mod**))) (if (not uy1f91@name) (values uy1fbf@lex* uy1fbe@rhs* uy1f90@exp-id* uy1fcb@exp-lab* uy1fc1@r uy1fc0@mr uy1fcc@mod** uy1fbc@kwd*) (let ((uy1fd1@lab (uyb15@gen-label 'module)) (uy1fd2@iface (make-simple-struct 'module-interface '4 (list (car (uyb5b@stx-mark* uy1f91@name)) (vector-map (lambda (uy1fd5@x) (make-simple-struct 'stx '5 (list (uyb57@stx-expr uy1fd5@x) (uyb5b@stx-mark* uy1fd5@x) '() '()))) uy1f90@exp-id*) uy1fcb@exp-lab*)))) (values uy1fbf@lex* uy1fbe@rhs* (vector uy1f91@name) (vector uy1fd1@lab) (cons (cons uy1fd1@lab (cons '$module uy1fd2@iface)) uy1fc1@r) (cons (cons uy1fd1@lab (cons '$module uy1fd2@iface)) uy1fc0@mr) uy1fcc@mod** uy1fbc@kwd*)))))))))))))) (set! uy28c3@uyde6@chi-internal-module uyde6@chi-internal-module) (set! uyde8@chi-body* (lambda (uy1fd7@e* uy1fd8@r uy1fd9@mr uy1fda@lex* uy1fdb@rhs* uy1fdc@mod** uy1fdd@kwd* uy1fde@exp* uy1fdf@rib uy1fe0@top?) (if (null? uy1fd7@e*) (values uy1fd7@e* uy1fd8@r uy1fd9@mr uy1fda@lex* uy1fdb@rhs* uy1fdc@mod** uy1fdd@kwd* uy1fde@exp*) (let ((uy1feb@e (car uy1fd7@e*))) (call-with-values (lambda () (uybab@syntax-type uy1feb@e uy1fd8@r)) (lambda (uy1ff3@uy1fee uy1ff4@uy1ff0 uy1ff5@uy1ff2) (let ((uy1ff9@kwd uy1ff5@uy1ff2) (uy1ffa@value uy1ff4@uy1ff0) (uy1ffb@type uy1ff3@uy1fee)) (let ((uy1fff@kwd* (if (uyb89@id? uy1ff9@kwd) (cons uy1ff9@kwd uy1fdd@kwd*) uy1fdd@kwd*))) (let ((uy2001@t uy1ffb@type)) (if (memv uy2001@t '(define)) (call-with-values (lambda () (uyd12@parse-define uy1feb@e)) (lambda (uy2007@uy2004 uy2008@uy2006) (let ((uy200b@rhs uy2008@uy2006) (uy200c@id uy2007@uy2004)) (begin (if (uyb95@bound-id-member? uy200c@id uy1fff@kwd*) (uye70@syntax-violation '#f '"cannot redefine keyword" uy1feb@e) (void)) (call-with-values (lambda () (uyb19@gen-define-label+loc uy200c@id uy1fdf@rib)) (lambda (uy2013@uy2010 uy2014@uy2012) (let ((uy2017@lex uy2014@uy2012) (uy2018@lab uy2013@uy2010)) (begin (uyb3f@extend-rib! uy1fdf@rib uy200c@id uy2018@lab) (uyde8@chi-body* (cdr uy1fd7@e*) (uyd20@add-lexical uy2018@lab uy2017@lex uy1fd8@r) uy1fd9@mr (cons uy2017@lex uy1fda@lex*) (cons uy200b@rhs uy1fdb@rhs*) uy1fdc@mod** uy1fff@kwd* uy1fde@exp* uy1fdf@rib uy1fe0@top?))))))))) (if (memv uy2001@t '(define-syntax)) (call-with-values (lambda () (uyd14@parse-define-syntax uy1feb@e)) (lambda (uy201f@uy201c uy2020@uy201e) (let ((uy2023@rhs uy2020@uy201e) (uy2024@id uy201f@uy201c)) (begin (if (uyb95@bound-id-member? uy2024@id uy1fff@kwd*) (uye70@syntax-violation '#f '"cannot redefine keyword" uy1feb@e) (void)) (let ((uy2027@lab (uyb1b@gen-define-label uy2024@id uy1fdf@rib)) (uy2028@expanded-rhs (uydea@expand-transformer uy2023@rhs uy1fd9@mr))) (begin (uyb3f@extend-rib! uy1fdf@rib uy2024@id uy2027@lab) (let ((uy202b@b (uybc1@make-eval-transformer uy2028@expanded-rhs))) (uyde8@chi-body* (cdr uy1fd7@e*) (cons (cons uy2027@lab uy202b@b) uy1fd8@r) (cons (cons uy2027@lab uy202b@b) uy1fd9@mr) uy1fda@lex* uy1fdb@rhs* uy1fdc@mod** uy1fff@kwd* uy1fde@exp* uy1fdf@rib uy1fe0@top?)))))))) (if (memv uy2001@t '(let-syntax letrec-syntax)) (let ((uy202d@t uy1feb@e)) (let ((uy202f@ls/false (uyd90@syntax-dispatch uy202d@t '(_ #(each (any any)) . each-any)))) (if (and uy202f@ls/false (apply (lambda (uy2031@xlhs* uy2032@xrhs* uy2033@xbody*) (if (not (uyb91@valid-bound-ids? uy2031@xlhs*)) (uye70@syntax-violation '#f '"invalid identifiers" uy1feb@e) (void))) uy202f@ls/false)) (apply (lambda (uy2037@xlhs* uy2038@xrhs* uy2039@xbody*) (let ((uy203d@xlab* (map uyb15@gen-label uy2037@xlhs*))) (let ((uy203f@xrib (uyb49@make-full-rib uy2037@xlhs* uy203d@xlab*))) (let ((uy2041@xb* (map (lambda (uy2043@x) (uybc1@make-eval-transformer (uydea@expand-transformer (if (eq? uy1ffb@type 'let-syntax) uy2043@x (uyb73@add-subst uy203f@xrib uy2043@x)) uy1fd9@mr))) uy2038@xrhs*))) (uyde8@chi-body* (append (map (lambda (uy2045@x) (uyb73@add-subst uy203f@xrib uy2045@x)) uy2039@xbody*) (cdr uy1fd7@e*)) (append (map cons uy203d@xlab* uy2041@xb*) uy1fd8@r) (append (map cons uy203d@xlab* uy2041@xb*) uy1fd9@mr) uy1fda@lex* uy1fdb@rhs* uy1fdc@mod** uy1fff@kwd* uy1fde@exp* uy1fdf@rib uy1fe0@top?))))) uy202f@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy202d@t)))) (if (memv uy2001@t '(begin)) (let ((uy2047@t uy1feb@e)) (let ((uy2049@ls/false (uyd90@syntax-dispatch uy2047@t '(_ . each-any)))) (if uy2049@ls/false (apply (lambda (uy204b@x*) (uyde8@chi-body* (append uy204b@x* (cdr uy1fd7@e*)) uy1fd8@r uy1fd9@mr uy1fda@lex* uy1fdb@rhs* uy1fdc@mod** uy1fff@kwd* uy1fde@exp* uy1fdf@rib uy1fe0@top?)) uy2049@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy2047@t)))) (if (memv uy2001@t '(global-macro global-macro!)) (uyde8@chi-body* (cons (uydac@chi-global-macro uy1ffa@value uy1feb@e uy1fdf@rib) (cdr uy1fd7@e*)) uy1fd8@r uy1fd9@mr uy1fda@lex* uy1fdb@rhs* uy1fdc@mod** uy1fff@kwd* uy1fde@exp* uy1fdf@rib uy1fe0@top?) (if (memv uy2001@t '(local-macro local-macro!)) (uyde8@chi-body* (cons (uydaa@chi-local-macro uy1ffa@value uy1feb@e uy1fdf@rib) (cdr uy1fd7@e*)) uy1fd8@r uy1fd9@mr uy1fda@lex* uy1fdb@rhs* uy1fdc@mod** uy1fff@kwd* uy1fde@exp* uy1fdf@rib uy1fe0@top?) (if (memv uy2001@t '(macro macro!)) (uyde8@chi-body* (cons (uyda8@chi-macro uy1ffa@value uy1feb@e uy1fdf@rib) (cdr uy1fd7@e*)) uy1fd8@r uy1fd9@mr uy1fda@lex* uy1fdb@rhs* uy1fdc@mod** uy1fff@kwd* uy1fde@exp* uy1fdf@rib uy1fe0@top?) (if (memv uy2001@t '(module)) (call-with-values (lambda () (uyde6@chi-internal-module uy1feb@e uy1fd8@r uy1fd9@mr uy1fda@lex* uy1fdb@rhs* uy1fdc@mod** uy1fff@kwd*)) (lambda (uy205d@uy204e uy205e@uy2050 uy205f@uy2052 uy2060@uy2054 uy2061@uy2056 uy2062@uy2058 uy2063@uy205a uy2064@uy205c) (let ((uy206d@kwd* uy2064@uy205c) (uy206e@mod** uy2063@uy205a) (uy206f@mr uy2062@uy2058) (uy2070@r uy2061@uy2056) (uy2071@m-exp-lab* uy2060@uy2054) (uy2072@m-exp-id* uy205f@uy2052) (uy2073@rhs* uy205e@uy2050) (uy2074@lex* uy205d@uy204e)) (begin (vector-for-each (lambda (uy207d@id uy207e@lab) (uyb3f@extend-rib! uy1fdf@rib uy207d@id uy207e@lab)) uy2072@m-exp-id* uy2071@m-exp-lab*) (uyde8@chi-body* (cdr uy1fd7@e*) uy2070@r uy206f@mr uy2074@lex* uy2073@rhs* uy206e@mod** uy206d@kwd* uy1fde@exp* uy1fdf@rib uy1fe0@top?))))) (if (memv uy2001@t '(library)) (begin (uye52@library-expander (uyb9d@stx->datum uy1feb@e)) (uyde8@chi-body* (cdr uy1fd7@e*) uy1fd8@r uy1fd9@mr uy1fda@lex* uy1fdb@rhs* uy1fdc@mod** uy1fff@kwd* uy1fde@exp* uy1fdf@rib uy1fe0@top?)) (if (memv uy2001@t '(export)) (let ((uy2081@t uy1feb@e)) (let ((uy2083@ls/false (uyd90@syntax-dispatch uy2081@t '(_ . each-any)))) (if uy2083@ls/false (apply (lambda (uy2085@exp-decl*) (uyde8@chi-body* (cdr uy1fd7@e*) uy1fd8@r uy1fd9@mr uy1fda@lex* uy1fdb@rhs* uy1fdc@mod** uy1fff@kwd* (append uy2085@exp-decl* uy1fde@exp*) uy1fdf@rib uy1fe0@top?)) uy2083@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy2081@t)))) (if (memv uy2001@t '(import)) (letrec* ((uy2088@module-import? (lambda (uy20db@e) (let ((uy20dd@t uy20db@e)) (let ((uy20df@ls/false (uyd90@syntax-dispatch uy20dd@t '(_ any)))) (if (and uy20df@ls/false (apply (lambda (uy20e1@id) (uyb89@id? uy20e1@id)) uy20df@ls/false)) (apply (lambda (uy20e3@id) '#t) uy20df@ls/false) (let ((uy20e5@t uy20dd@t)) (let ((uy20e7@ls/false (uyd90@syntax-dispatch uy20e5@t '(_ . each-any)))) (if uy20e7@ls/false (apply (lambda (uy20e9@imp*) '#f) uy20e7@ls/false) (let ((uy20eb@t uy20e5@t)) (let ((uy20ed@ls/false (uyd90@syntax-dispatch uy20eb@t '_))) (if uy20ed@ls/false (apply (lambda () (uye70@syntax-violation '#f '"malformed import form" uy20db@e)) uy20ed@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy20eb@t)))))))))))) (uy208a@module-import (lambda (uy20b9@e uy20ba@r) (let ((uy20bd@t uy20b9@e)) (let ((uy20bf@ls/false (uyd90@syntax-dispatch uy20bd@t '(_ any)))) (if (and uy20bf@ls/false (apply (lambda (uy20c1@id) (uyb89@id? uy20c1@id)) uy20bf@ls/false)) (apply (lambda (uy20c3@id) (call-with-values (lambda () (uybab@syntax-type uy20c3@id uy20ba@r)) (lambda (uy20cb@uy20c6 uy20cc@uy20c8 uy20cd@uy20ca) (let ((uy20d1@kwd uy20cd@uy20ca) (uy20d2@value uy20cc@uy20c8) (uy20d3@type uy20cb@uy20c6)) (let ((uy20d7@t uy20d3@type)) (if (memv uy20d7@t '($module)) (let ((uy20d9@iface uy20d2@value)) (values (uyde4@module-interface-exp-id* uy20d9@iface uy20c3@id) (uydde@module-interface-exp-lab-vec uy20d9@iface))) (uye70@syntax-violation '#f '"invalid import" uy20b9@e))))))) uy20bf@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy20bd@t)))))) (uy208c@library-import (lambda (uy209d@e) (let ((uy209f@t uy209d@e)) (let ((uy20a1@ls/false (uyd90@syntax-dispatch uy209f@t '(any . each-any)))) (if uy20a1@ls/false (apply (lambda (uy20a3@ctxt uy20a4@imp*) (call-with-values (lambda () (uydf2@parse-import-spec* (uye76@syntax->datum uy20a4@imp*))) (lambda (uy20ab@uy20a8 uy20ac@uy20aa) (let ((uy20af@subst-labels uy20ac@uy20aa) (uy20b0@subst-names uy20ab@uy20a8)) (values (vector-map (lambda (uy20b3@name) (uyb69@datum->stx uy20a3@ctxt uy20b3@name)) uy20b0@subst-names) uy20af@subst-labels))))) uy20a1@ls/false) (let ((uy20b5@t uy209f@t)) (let ((uy20b7@ls/false (uyd90@syntax-dispatch uy20b5@t '_))) (if uy20b7@ls/false (apply (lambda () (uye70@syntax-violation '#f '"invalid import form" uy209d@e)) uy20b7@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy20b5@t)))))))))) (begin (call-with-values (lambda () (if (uy2088@module-import? uy1feb@e) (uy208a@module-import uy1feb@e uy1fd8@r) (uy208c@library-import uy1feb@e))) (lambda (uy2091@uy208e uy2092@uy2090) (let ((uy2095@lab* uy2092@uy2090) (uy2096@id* uy2091@uy208e)) (vector-for-each (lambda (uy2099@id uy209a@lab) (uyb3f@extend-rib! uy1fdf@rib uy2099@id uy209a@lab)) uy2096@id* uy2095@lab*)))) (uyde8@chi-body* (cdr uy1fd7@e*) uy1fd8@r uy1fd9@mr uy1fda@lex* uy1fdb@rhs* uy1fdc@mod** uy1fff@kwd* uy1fde@exp* uy1fdf@rib uy1fe0@top?))) (if uy1fe0@top? (uyde8@chi-body* (cdr uy1fd7@e*) uy1fd8@r uy1fd9@mr (cons (uyb11@gen-lexical 'dummy) uy1fda@lex*) (cons (cons 'top-expr uy1feb@e) uy1fdb@rhs*) uy1fdc@mod** uy1fff@kwd* uy1fde@exp* uy1fdf@rib uy1fe0@top?) (values uy1fd7@e* uy1fd8@r uy1fd9@mr uy1fda@lex* uy1fdb@rhs* uy1fdc@mod** uy1fff@kwd* uy1fde@exp*)))))))))))))))))))))) (set! uy28c4@uyde8@chi-body* uyde8@chi-body*) (set! uydea@expand-transformer (lambda (uy20ef@expr uy20f0@r) (let ((uy20f3@rtc (uydf6@make-collector))) (let ((uy20f5@expanded-rhs (let ((uy20ff@uy20f8 uydf8@inv-collector) (uy2100@uy20fa uydfa@vis-collector) (uy2101@uy20fc uy20f3@rtc) (uy2102@uy20fe (lambda (uy2107@x) (values)))) (let ((uy2109@swap (lambda () (begin (let ((uy210b@t (uy20ff@uy20f8))) (begin (uy20ff@uy20f8 uy2101@uy20fc) (set! uy2101@uy20fc uy210b@t))) (let ((uy210d@t (uy2100@uy20fa))) (begin (uy2100@uy20fa uy2102@uy20fe) (set! uy2102@uy20fe uy210d@t))))))) (dynamic-wind uy2109@swap (lambda () (uydb2@chi-expr uy20ef@expr uy20f0@r uy20f0@r)) uy2109@swap))))) (begin (for-each (let ((uy210f@mark-visit (uydfa@vis-collector))) (lambda (uy2111@x) (begin (uy9a5@uy7f3@invoke-library uy2111@x) (uy210f@mark-visit uy2111@x)))) (uy20f3@rtc)) uy20f5@expanded-rhs))))) (set! uy28c5@uydea@expand-transformer uydea@expand-transformer) (set! uydec@parse-exports (lambda (uy2113@exp*) (let uy211b@f ((uy2115@exp* uy2113@exp*) (uy2116@int* '()) (uy2117@ext* '())) (if (null? uy2115@exp*) (begin (if (not (uyb91@valid-bound-ids? uy2117@ext*)) (uye70@syntax-violation 'export '"invalid exports" (uydc6@find-dups uy2117@ext*)) (void)) (values (map uye76@syntax->datum uy2117@ext*) uy2116@int*)) (let ((uy211d@t (car uy2115@exp*))) (let ((uy211f@ls/false (uyd90@syntax-dispatch uy211d@t '(any . #(each (any any)))))) (if uy211f@ls/false (apply (lambda (uy2121@rename uy2122@i* uy2123@e*) (begin (if (not (and (eq? (uye76@syntax->datum uy2121@rename) 'rename) (for-all uyb89@id? uy2122@i*) (for-all uyb89@id? uy2123@e*))) (uye70@syntax-violation 'export '"invalid export specifier" (car uy2115@exp*)) (void)) (uy211b@f (cdr uy2115@exp*) (append uy2122@i* uy2116@int*) (append uy2123@e* uy2117@ext*)))) uy211f@ls/false) (let ((uy2127@t uy211d@t)) (let ((uy2129@ls/false (uyd90@syntax-dispatch uy2127@t 'any))) (if uy2129@ls/false (apply (lambda (uy212b@ie) (begin (if (not (uyb89@id? uy212b@ie)) (uye70@syntax-violation 'export '"invalid export" uy212b@ie) (void)) (uy211b@f (cdr uy2115@exp*) (cons uy212b@ie uy2116@int*) (cons uy212b@ie uy2117@ext*)))) uy2129@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy2127@t))))))))))) (set! uy28c6@uydec@parse-exports uydec@parse-exports) (set! uydee@parse-library-name (lambda (uy212d@spec) (letrec* ((uy2130@parse (lambda (uy213d@x) (let ((uy213f@t uy213d@x)) (let ((uy2141@ls/false (uyd90@syntax-dispatch uy213f@t '(each-any)))) (if (and uy2141@ls/false (apply (lambda (uy2143@v*) (for-all (lambda (uy2145@x) (let ((uy2147@x (uye76@syntax->datum uy2145@x))) (and (integer? uy2147@x) (exact? uy2147@x)))) uy2143@v*)) uy2141@ls/false)) (apply (lambda (uy2149@v*) (values '() (map uye76@syntax->datum uy2149@v*))) uy2141@ls/false) (let ((uy214b@t uy213f@t)) (let ((uy214d@ls/false (uyd90@syntax-dispatch uy214b@t '(any . any)))) (if (and uy214d@ls/false (apply (lambda (uy214f@x uy2150@rest) (symbol? (uye76@syntax->datum uy214f@x))) uy214d@ls/false)) (apply (lambda (uy2153@x uy2154@rest) (call-with-values (lambda () (uy2130@parse uy2154@rest)) (lambda (uy215b@uy2158 uy215c@uy215a) (let ((uy215f@v* uy215c@uy215a) (uy2160@x* uy215b@uy2158)) (values (cons (uye76@syntax->datum uy2153@x) uy2160@x*) uy215f@v*))))) uy214d@ls/false) (let ((uy2163@t uy214b@t)) (let ((uy2165@ls/false (uyd90@syntax-dispatch uy2163@t '()))) (if uy2165@ls/false (apply (lambda () (values '() '())) uy2165@ls/false) (let ((uy2167@t uy2163@t)) (let ((uy2169@ls/false (uyd90@syntax-dispatch uy2167@t '_))) (if uy2169@ls/false (apply (lambda () (uye70@syntax-violation '#f '"invalid library name" uy212d@spec)) uy2169@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy2167@t)))))))))))))))) (call-with-values (lambda () (uy2130@parse uy212d@spec)) (lambda (uy2135@uy2132 uy2136@uy2134) (let ((uy2139@ver* uy2136@uy2134) (uy213a@name* uy2135@uy2132)) (begin (if (null? uy213a@name*) (uye70@syntax-violation '#f '"empty library name" uy212d@spec) (void)) (values uy213a@name* uy2139@ver*)))))))) (set! uy28c7@uydee@parse-library-name uydee@parse-library-name) (set! uydf0@parse-library (lambda (uy216b@e) (let ((uy216d@t uy216b@e)) (let ((uy216f@ls/false (uyd90@syntax-dispatch uy216d@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and uy216f@ls/false (apply (lambda (uy2171@library uy2172@name* uy2173@export uy2174@exp* uy2175@import uy2176@imp* uy2177@b*) (and (eq? (uye76@syntax->datum uy2173@export) 'export) (eq? (uye76@syntax->datum uy2175@import) 'import) (eq? (uye76@syntax->datum uy2171@library) 'library))) uy216f@ls/false)) (apply (lambda (uy217f@library uy2180@name* uy2181@export uy2182@exp* uy2183@import uy2184@imp* uy2185@b*) (values uy2180@name* uy2182@exp* uy2184@imp* uy2185@b*)) uy216f@ls/false) (let ((uy218d@t uy216d@t)) (let ((uy218f@ls/false (uyd90@syntax-dispatch uy218d@t '_))) (if uy218f@ls/false (apply (lambda () (uye70@syntax-violation '#f '"malformed library" uy216b@e)) uy218f@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy218d@t))))))))) (set! uy28c8@uydf0@parse-library uydf0@parse-library) (set! uydf2@parse-import-spec* (letrec* ((uy2192@idsyn? (lambda (uy239b@x) (symbol? (uye76@syntax->datum uy239b@x)))) (uy2194@dup-error (lambda (uy2399@name) (uye70@syntax-violation 'import '"two imports with different bindings" uy2399@name))) (uy2196@merge-substs (lambda (uy2387@s uy2388@subst) (letrec* ((uy238c@insert-to-subst (lambda (uy238d@a uy238e@subst) (let ((uy2391@name (car uy238d@a)) (uy2392@label (cdr uy238d@a))) (let ((uy2395@t (assq uy2391@name uy238e@subst))) (if uy2395@t ((lambda (uy2397@x) (if (eq? (cdr uy2397@x) uy2392@label) uy238e@subst (uy2194@dup-error uy2391@name))) uy2395@t) (cons uy238d@a uy238e@subst))))))) (if (null? uy2387@s) uy2388@subst (uy238c@insert-to-subst (car uy2387@s) (uy2196@merge-substs (cdr uy2387@s) uy2388@subst)))))) (uy2198@exclude* (lambda (uy2357@sym* uy2358@subst) (letrec* ((uy235c@exclude (lambda (uy2375@sym uy2376@subst) (if (null? uy2376@subst) (uye70@syntax-violation 'import '"cannot rename unbound identifier" uy2375@sym) (if (eq? uy2375@sym (caar uy2376@subst)) (values (cdar uy2376@subst) (cdr uy2376@subst)) (let ((uy2379@a (car uy2376@subst))) (call-with-values (lambda () (uy235c@exclude uy2375@sym (cdr uy2376@subst))) (lambda (uy237f@uy237c uy2380@uy237e) (let ((uy2383@subst uy2380@uy237e) (uy2384@old uy237f@uy237c)) (values uy2384@old (cons uy2379@a uy2383@subst))))))))))) (if (null? uy2357@sym*) (values '() uy2358@subst) (call-with-values (lambda () (uy235c@exclude (car uy2357@sym*) uy2358@subst)) (lambda (uy2361@uy235e uy2362@uy2360) (let ((uy2365@subst uy2362@uy2360) (uy2366@old uy2361@uy235e)) (call-with-values (lambda () (uy2198@exclude* (cdr uy2357@sym*) uy2365@subst)) (lambda (uy236d@uy236a uy236e@uy236c) (let ((uy2371@subst uy236e@uy236c) (uy2372@old* uy236d@uy236a)) (values (cons uy2366@old uy2372@old*) uy2371@subst))))))))))) (uy219a@find* (lambda (uy234f@sym* uy2350@subst) (map (lambda (uy2353@x) (let ((uy2355@t (assq uy2353@x uy2350@subst))) (if uy2355@t (cdr uy2355@t) (uye70@syntax-violation 'import '"cannot find identifier" uy2353@x)))) uy234f@sym*))) (uy219c@rem* (lambda (uy2347@sym* uy2348@subst) (let uy234d@f ((uy234b@subst uy2348@subst)) (if (null? uy234b@subst) '() (if (memq (caar uy234b@subst) uy2347@sym*) (uy234d@f (cdr uy234b@subst)) (cons (car uy234b@subst) (uy234d@f (cdr uy234b@subst)))))))) (uy219e@remove-dups (lambda (uy2345@ls) (if (null? uy2345@ls) '() (if (memq (car uy2345@ls) (cdr uy2345@ls)) (uy219e@remove-dups (cdr uy2345@ls)) (cons (car uy2345@ls) (uy219e@remove-dups (cdr uy2345@ls))))))) (uy21a0@parse-library-name (lambda (uy225d@spec) (letrec* ((uy2260@subversion? (lambda (uy2341@x) (let ((uy2343@x (uye76@syntax->datum uy2341@x))) (and (integer? uy2343@x) (exact? uy2343@x) (>= uy2343@x '0))))) (uy2262@subversion-pred (lambda (uy22e1@x*) (let ((uy22e3@t uy22e1@x*)) (let ((uy22e5@ls/false (uyd90@syntax-dispatch uy22e3@t 'any))) (if (and uy22e5@ls/false (apply (lambda (uy22e7@n) (uy2260@subversion? uy22e7@n)) uy22e5@ls/false)) (apply (lambda (uy22e9@n) (lambda (uy22eb@x) (= uy22eb@x (uye76@syntax->datum uy22e9@n)))) uy22e5@ls/false) (let ((uy22ed@t uy22e3@t)) (let ((uy22ef@ls/false (uyd90@syntax-dispatch uy22ed@t '(any . each-any)))) (if (and uy22ef@ls/false (apply (lambda (uy22f1@p? uy22f2@sub*) (eq? (uye76@syntax->datum uy22f1@p?) 'and)) uy22ef@ls/false)) (apply (lambda (uy22f5@p? uy22f6@sub*) (let ((uy22f9@p* (map uy2262@subversion-pred uy22f6@sub*))) (lambda (uy22fb@x) (for-all (lambda (uy22fd@p) (uy22fd@p uy22fb@x)) uy22f9@p*)))) uy22ef@ls/false) (let ((uy22ff@t uy22ed@t)) (let ((uy2301@ls/false (uyd90@syntax-dispatch uy22ff@t '(any . each-any)))) (if (and uy2301@ls/false (apply (lambda (uy2303@p? uy2304@sub*) (eq? (uye76@syntax->datum uy2303@p?) 'or)) uy2301@ls/false)) (apply (lambda (uy2307@p? uy2308@sub*) (let ((uy230b@p* (map uy2262@subversion-pred uy2308@sub*))) (lambda (uy230d@x) (exists (lambda (uy230f@p) (uy230f@p uy230d@x)) uy230b@p*)))) uy2301@ls/false) (let ((uy2311@t uy22ff@t)) (let ((uy2313@ls/false (uyd90@syntax-dispatch uy2311@t '(any any)))) (if (and uy2313@ls/false (apply (lambda (uy2315@p? uy2316@sub) (eq? (uye76@syntax->datum uy2315@p?) 'not)) uy2313@ls/false)) (apply (lambda (uy2319@p? uy231a@sub) (let ((uy231d@p (uy2262@subversion-pred uy231a@sub))) (lambda (uy231f@x) (not (uy231d@p uy231f@x))))) uy2313@ls/false) (let ((uy2321@t uy2311@t)) (let ((uy2323@ls/false (uyd90@syntax-dispatch uy2321@t '(any any)))) (if (and uy2323@ls/false (apply (lambda (uy2325@p? uy2326@n) (and (eq? (uye76@syntax->datum uy2325@p?) '<=) (uy2260@subversion? uy2326@n))) uy2323@ls/false)) (apply (lambda (uy2329@p? uy232a@n) (lambda (uy232d@x) (<= uy232d@x (uye76@syntax->datum uy232a@n)))) uy2323@ls/false) (let ((uy232f@t uy2321@t)) (let ((uy2331@ls/false (uyd90@syntax-dispatch uy232f@t '(any any)))) (if (and uy2331@ls/false (apply (lambda (uy2333@p? uy2334@n) (and (eq? (uye76@syntax->datum uy2333@p?) '>=) (uy2260@subversion? uy2334@n))) uy2331@ls/false)) (apply (lambda (uy2337@p? uy2338@n) (lambda (uy233b@x) (>= uy233b@x (uye76@syntax->datum uy2338@n)))) uy2331@ls/false) (let ((uy233d@t uy232f@t)) (let ((uy233f@ls/false (uyd90@syntax-dispatch uy233d@t '_))) (if uy233f@ls/false (apply (lambda () (uye70@syntax-violation 'import '"invalid sub-version spec" uy225d@spec uy22e1@x*)) uy233f@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy233d@t)))))))))))))))))))))))) (uy2264@version-pred (lambda (uy2291@x*) (let ((uy2293@t uy2291@x*)) (let ((uy2295@ls/false (uyd90@syntax-dispatch uy2293@t '()))) (if uy2295@ls/false (apply (lambda () (lambda (uy2297@x) '#t)) uy2295@ls/false) (let ((uy2299@t uy2293@t)) (let ((uy229b@ls/false (uyd90@syntax-dispatch uy2299@t '(any . each-any)))) (if (and uy229b@ls/false (apply (lambda (uy229d@c uy229e@ver*) (eq? (uye76@syntax->datum uy229d@c) 'and)) uy229b@ls/false)) (apply (lambda (uy22a1@c uy22a2@ver*) (let ((uy22a5@p* (map uy2264@version-pred uy22a2@ver*))) (lambda (uy22a7@x) (for-all (lambda (uy22a9@p) (uy22a9@p uy22a7@x)) uy22a5@p*)))) uy229b@ls/false) (let ((uy22ab@t uy2299@t)) (let ((uy22ad@ls/false (uyd90@syntax-dispatch uy22ab@t '(any . each-any)))) (if (and uy22ad@ls/false (apply (lambda (uy22af@c uy22b0@ver*) (eq? (uye76@syntax->datum uy22af@c) 'or)) uy22ad@ls/false)) (apply (lambda (uy22b3@c uy22b4@ver*) (let ((uy22b7@p* (map uy2264@version-pred uy22b4@ver*))) (lambda (uy22b9@x) (exists (lambda (uy22bb@p) (uy22bb@p uy22b9@x)) uy22b7@p*)))) uy22ad@ls/false) (let ((uy22bd@t uy22ab@t)) (let ((uy22bf@ls/false (uyd90@syntax-dispatch uy22bd@t '(any any)))) (if (and uy22bf@ls/false (apply (lambda (uy22c1@c uy22c2@ver) (eq? (uye76@syntax->datum uy22c1@c) 'not)) uy22bf@ls/false)) (apply (lambda (uy22c5@c uy22c6@ver) (let ((uy22c9@p (uy2264@version-pred uy22c6@ver))) (lambda (uy22cb@x) (not (uy22c9@p uy22cb@x))))) uy22bf@ls/false) (let ((uy22cd@t uy22bd@t)) (let ((uy22cf@ls/false (uyd90@syntax-dispatch uy22cd@t 'each-any))) (if uy22cf@ls/false (apply (lambda (uy22d1@sub*) (let ((uy22d3@p* (map uy2262@subversion-pred uy22d1@sub*))) (lambda (uy22d5@x) (let uy22db@f ((uy22d7@p* uy22d3@p*) (uy22d8@x uy22d5@x)) (if (null? uy22d7@p*) '#t (if (null? uy22d8@x) '#f (and ((car uy22d7@p*) (car uy22d8@x)) (uy22db@f (cdr uy22d7@p*) (cdr uy22d8@x))))))))) uy22cf@ls/false) (let ((uy22dd@t uy22cd@t)) (let ((uy22df@ls/false (uyd90@syntax-dispatch uy22dd@t '_))) (if uy22df@ls/false (apply (lambda () (uye70@syntax-violation 'import '"invalid version spec" uy225d@spec uy2291@x*)) uy22df@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy22dd@t)))))))))))))))))))))) (let uy2267@f ((uy2265@x uy225d@spec)) (let ((uy2269@t uy2265@x)) (let ((uy226b@ls/false (uyd90@syntax-dispatch uy2269@t '(each-any)))) (if uy226b@ls/false (apply (lambda (uy226d@version-spec*) (values '() (uy2264@version-pred uy226d@version-spec*))) uy226b@ls/false) (let ((uy226f@t uy2269@t)) (let ((uy2271@ls/false (uyd90@syntax-dispatch uy226f@t '(any . any)))) (if (and uy2271@ls/false (apply (lambda (uy2273@x uy2274@x*) (uy2192@idsyn? uy2273@x)) uy2271@ls/false)) (apply (lambda (uy2277@x uy2278@x*) (call-with-values (lambda () (uy2267@f uy2278@x*)) (lambda (uy227f@uy227c uy2280@uy227e) (let ((uy2283@pred uy2280@uy227e) (uy2284@name uy227f@uy227c)) (values (cons (uye76@syntax->datum uy2277@x) uy2284@name) uy2283@pred))))) uy2271@ls/false) (let ((uy2287@t uy226f@t)) (let ((uy2289@ls/false (uyd90@syntax-dispatch uy2287@t '()))) (if uy2289@ls/false (apply (lambda () (values '() (lambda (uy228b@x) '#t))) uy2289@ls/false) (let ((uy228d@t uy2287@t)) (let ((uy228f@ls/false (uyd90@syntax-dispatch uy228d@t '_))) (if uy228f@ls/false (apply (lambda () (uye70@syntax-violation '#f '"invalid import spec" uy225d@spec)) uy228f@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy228d@t))))))))))))))))) (uy21a2@import-library (lambda (uy224d@spec*) (call-with-values (lambda () (uy21a0@parse-library-name uy224d@spec*)) (lambda (uy2253@uy2250 uy2254@uy2252) (let ((uy2257@pred uy2254@uy2252) (uy2258@name uy2253@uy2250)) (begin (if (null? uy2258@name) (uye70@syntax-violation 'import '"empty library name" uy224d@spec*) (void)) (let ((uy225b@lib (uy99e@uy7e5@find-library-by-name uy2258@name))) (begin (if (not uy225b@lib) (uye70@syntax-violation 'import '"cannot find library with required name" uy2258@name) (void)) (if (not (uy2257@pred (uy978@uy799@library-version uy225b@lib))) (uye70@syntax-violation 'import '"library does not satisfy version specification" uy224d@spec* uy225b@lib) (void)) ((uydfc@imp-collector) uy225b@lib) (uy980@uy7a9@library-subst uy225b@lib))))))))) (uy21a4@get-import (lambda (uy21bf@spec) (let ((uy21c1@t uy21bf@spec)) (let ((uy21c3@ls/false (uyd90@syntax-dispatch uy21c1@t '(any . each-any)))) (if (and uy21c3@ls/false (apply (lambda (uy21c5@x uy21c6@x*) (not (memq (uye76@syntax->datum uy21c5@x) '(for rename except only prefix library)))) uy21c3@ls/false)) (apply (lambda (uy21c9@x uy21ca@x*) (uy21a2@import-library (cons uy21c9@x uy21ca@x*))) uy21c3@ls/false) (let ((uy21cd@t uy21c1@t)) (let ((uy21cf@ls/false (uyd90@syntax-dispatch uy21cd@t '(any any . #(each (any any)))))) (if (and uy21cf@ls/false (apply (lambda (uy21d1@rename uy21d2@isp uy21d3@old* uy21d4@new*) (and (eq? (uye76@syntax->datum uy21d1@rename) 'rename) (for-all uy2192@idsyn? uy21d3@old*) (for-all uy2192@idsyn? uy21d4@new*))) uy21cf@ls/false)) (apply (lambda (uy21d9@rename uy21da@isp uy21db@old* uy21dc@new*) (let ((uy21e1@subst (uy21a4@get-import uy21da@isp)) (uy21e2@old* (map uye76@syntax->datum uy21db@old*)) (uy21e3@new* (map uye76@syntax->datum uy21dc@new*))) (let ((uy21e7@old-label* (uy219a@find* uy21e2@old* uy21e1@subst))) (let ((uy21e9@subst (uy219c@rem* uy21e2@old* uy21e1@subst))) (uy2196@merge-substs (map cons uy21e3@new* uy21e7@old-label*) uy21e9@subst))))) uy21cf@ls/false) (let ((uy21eb@t uy21cd@t)) (let ((uy21ed@ls/false (uyd90@syntax-dispatch uy21eb@t '(any any . each-any)))) (if (and uy21ed@ls/false (apply (lambda (uy21ef@except uy21f0@isp uy21f1@sym*) (and (eq? (uye76@syntax->datum uy21ef@except) 'except) (for-all uy2192@idsyn? uy21f1@sym*))) uy21ed@ls/false)) (apply (lambda (uy21f5@except uy21f6@isp uy21f7@sym*) (let ((uy21fb@subst (uy21a4@get-import uy21f6@isp))) (uy219c@rem* (map uye76@syntax->datum uy21f7@sym*) uy21fb@subst))) uy21ed@ls/false) (let ((uy21fd@t uy21eb@t)) (let ((uy21ff@ls/false (uyd90@syntax-dispatch uy21fd@t '(any any . each-any)))) (if (and uy21ff@ls/false (apply (lambda (uy2201@only uy2202@isp uy2203@sym*) (and (eq? (uye76@syntax->datum uy2201@only) 'only) (for-all uy2192@idsyn? uy2203@sym*))) uy21ff@ls/false)) (apply (lambda (uy2207@only uy2208@isp uy2209@sym*) (let ((uy220d@subst (uy21a4@get-import uy2208@isp)) (uy220e@sym* (map uye76@syntax->datum uy2209@sym*))) (let ((uy2211@sym* (uy219e@remove-dups uy220e@sym*))) (let ((uy2213@lab* (uy219a@find* uy2211@sym* uy220d@subst))) (map cons uy2211@sym* uy2213@lab*))))) uy21ff@ls/false) (let ((uy2215@t uy21fd@t)) (let ((uy2217@ls/false (uyd90@syntax-dispatch uy2215@t '(any any any)))) (if (and uy2217@ls/false (apply (lambda (uy2219@prefix uy221a@isp uy221b@p) (and (eq? (uye76@syntax->datum uy2219@prefix) 'prefix) (uy2192@idsyn? uy221b@p))) uy2217@ls/false)) (apply (lambda (uy221f@prefix uy2220@isp uy2221@p) (let ((uy2225@subst (uy21a4@get-import uy2220@isp)) (uy2226@prefix (symbol->string (uye76@syntax->datum uy2221@p)))) (map (lambda (uy2229@x) (cons (string->symbol (string-append uy2226@prefix (symbol->string (car uy2229@x)))) (cdr uy2229@x))) uy2225@subst))) uy2217@ls/false) (let ((uy222b@t uy2215@t)) (let ((uy222d@ls/false (uyd90@syntax-dispatch uy222b@t '(any each-any)))) (if (and uy222d@ls/false (apply (lambda (uy222f@library uy2230@spec*) (eq? (uye76@syntax->datum uy222f@library) 'library)) uy222d@ls/false)) (apply (lambda (uy2233@library uy2234@spec*) (uy21a2@import-library uy2234@spec*)) uy222d@ls/false) (let ((uy2237@t uy222b@t)) (let ((uy2239@ls/false (uyd90@syntax-dispatch uy2237@t '(any any . any)))) (if (and uy2239@ls/false (apply (lambda (uy223b@for uy223c@isp uy223d@rest) (eq? (uye76@syntax->datum uy223b@for) 'for)) uy2239@ls/false)) (apply (lambda (uy2241@for uy2242@isp uy2243@rest) (uy21a4@get-import uy2242@isp)) uy2239@ls/false) (let ((uy2247@t uy2237@t)) (let ((uy2249@ls/false (uyd90@syntax-dispatch uy2247@t 'any))) (if uy2249@ls/false (apply (lambda (uy224b@spec) (uye70@syntax-violation 'import '"invalid import spec" uy224b@spec)) uy2249@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy2247@t))))))))))))))))))))))))))) (uy21a6@add-imports! (lambda (uy21af@imp uy21b0@h) (let ((uy21b3@subst (uy21a4@get-import uy21af@imp))) (for-each (lambda (uy21b5@x) (let ((uy21b7@name (car uy21b5@x)) (uy21b8@label (cdr uy21b5@x))) (let ((uy21bb@t (hashtable-ref uy21b0@h uy21b7@name '#f))) (if uy21bb@t ((lambda (uy21bd@l) (if (not (eq? uy21bd@l uy21b8@label)) (uy2194@dup-error uy21b7@name) (void))) uy21bb@t) (hashtable-set! uy21b0@h uy21b7@name uy21b8@label))))) uy21b3@subst))))) (lambda (uy21a7@imp*) (let uy21ad@f ((uy21a9@imp* uy21a7@imp*) (uy21aa@h (make-eq-hashtable))) (if (null? uy21a9@imp*) (hashtable-entries uy21aa@h) (begin (uy21a6@add-imports! (car uy21a9@imp*) uy21aa@h) (uy21ad@f (cdr uy21a9@imp*) uy21aa@h))))))) (set! uy28c9@uydf2@parse-import-spec* uydf2@parse-import-spec*) (set! uydf4@make-top-rib (lambda (uy239d@names uy239e@labels) (let ((uy23a1@rib (uyb3d@make-empty-rib))) (begin (vector-for-each (lambda (uy23a3@name uy23a4@label) (begin (if (not (symbol? uy23a3@name)) (error 'make-top-rib '"BUG: not a symbol" uy23a3@name) (void)) (uyb41@extend-rib/nc! uy23a1@rib (make-simple-struct 'stx '5 (list uy23a3@name uyb0d@top-mark* '() '())) uy23a4@label))) uy239d@names uy239e@labels) uy23a1@rib)))) (set! uy28ca@uydf4@make-top-rib uydf4@make-top-rib) (set! uydf6@make-collector (lambda () (let ((uy23a7@ls '())) (lambda uy23ab (let ((uy23ac (length uy23ab))) (if (= uy23ac '0) (apply (lambda () uy23a7@ls) uy23ab) (if (= uy23ac '1) (apply (lambda (uy23a9@x) (set! uy23a7@ls (uyb06@set-cons uy23a9@x uy23a7@ls))) uy23ab) (error 'apply '"invalid arg count")))))))) (set! uy28cb@uydf6@make-collector uydf6@make-collector) (set! uydf8@inv-collector (uy6d9@uy5b7@make-parameter (lambda uy23ad@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (uy23af@x) (begin (if (not (procedure? uy23af@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" uy23af@x) (void)) uy23af@x)))) (set! uy28cc@uydf8@inv-collector uydf8@inv-collector) (set! uydfa@vis-collector (uy6d9@uy5b7@make-parameter (lambda uy23b1@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (uy23b3@x) (begin (if (not (procedure? uy23b3@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" uy23b3@x) (void)) uy23b3@x)))) (set! uy28cd@uydfa@vis-collector uydfa@vis-collector) (set! uydfc@imp-collector (uy6d9@uy5b7@make-parameter (lambda uy23b5@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (uy23b7@x) (begin (if (not (procedure? uy23b7@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" uy23b7@x) (void)) uy23b7@x)))) (set! uy28ce@uydfc@imp-collector uydfc@imp-collector) (set! uydfe@chi-library-internal (lambda (uy23b9@e* uy23ba@rib uy23bb@top?) (call-with-values (lambda () (uyde8@chi-body* uy23b9@e* '() '() '() '() '() '() '() uy23ba@rib uy23bb@top?)) (lambda (uy23cf@uy23c0 uy23d0@uy23c2 uy23d1@uy23c4 uy23d2@uy23c6 uy23d3@uy23c8 uy23d4@uy23ca uy23d5@uy23cc uy23d6@uy23ce) (let ((uy23df@exp* uy23d6@uy23ce) (uy23e0@_kwd* uy23d5@uy23cc) (uy23e1@mod** uy23d4@uy23ca) (uy23e2@rhs* uy23d3@uy23c8) (uy23e3@lex* uy23d2@uy23c6) (uy23e4@mr uy23d1@uy23c4) (uy23e5@r uy23d0@uy23c2) (uy23e6@e* uy23cf@uy23c0)) (values (append (apply append (reverse uy23e1@mod**)) uy23e6@e*) uy23e5@r uy23e4@mr (reverse uy23e3@lex*) (reverse uy23e2@rhs*) uy23df@exp*)))))) (set! uy28cf@uydfe@chi-library-internal uydfe@chi-library-internal) (set! uye00@chi-interaction-expr (lambda (uy23ef@e uy23f0@rib uy23f1@r) (call-with-values (lambda () (uyde8@chi-body* (list uy23ef@e) uy23f1@r uy23f1@r '() '() '() '() '() uy23f0@rib '#t)) (lambda (uy2405@uy23f6 uy2406@uy23f8 uy2407@uy23fa uy2408@uy23fc uy2409@uy23fe uy240a@uy2400 uy240b@uy2402 uy240c@uy2404) (let ((uy2415@_exp* uy240c@uy2404) (uy2416@_kwd* uy240b@uy2402) (uy2417@mod** uy240a@uy2400) (uy2418@rhs* uy2409@uy23fe) (uy2419@lex* uy2408@uy23fc) (uy241a@mr uy2407@uy23fa) (uy241b@r uy2406@uy23f8) (uy241c@e* uy2405@uy23f6)) (let ((uy2425@e* (uydc0@expand-interaction-rhs*/init* (reverse uy2419@lex*) (reverse uy2418@rhs*) (append (apply append (reverse uy2417@mod**)) uy241c@e*) uy241b@r uy241a@mr))) (let ((uy2427@e (if (null? uy2425@e*) (uyaef@uya50@build-void) (if (null? (cdr uy2425@e*)) (car uy2425@e*) (uyaee@uya4e@build-sequence '#f uy2425@e*))))) (values uy2427@e uy241b@r)))))))) (set! uy28d0@uye00@chi-interaction-expr uye00@chi-interaction-expr) (set! uye02@library-body-expander (lambda (uy2429@name uy242a@main-exp* uy242b@imp* uy242c@b* uy242d@top?) (letrec* ((uy2434@itc (uydf6@make-collector))) (let ((uy243d@uy2436 uydfc@imp-collector) (uy243e@uy2438 uye80@top-level-context) (uy243f@uy243a uy2434@itc) (uy2440@uy243c '#f)) (let ((uy2445@swap (lambda () (begin (let ((uy2447@t (uy243d@uy2436))) (begin (uy243d@uy2436 uy243f@uy243a) (set! uy243f@uy243a uy2447@t))) (let ((uy2449@t (uy243e@uy2438))) (begin (uy243e@uy2438 uy2440@uy243c) (set! uy2440@uy243c uy2449@t))))))) (dynamic-wind uy2445@swap (lambda () (call-with-values (lambda () (uydf2@parse-import-spec* uy242b@imp*)) (lambda (uy244f@uy244c uy2450@uy244e) (let ((uy2453@subst-labels uy2450@uy244e) (uy2454@subst-names uy244f@uy244c)) (let ((uy2457@rib (uydf4@make-top-rib uy2454@subst-names uy2453@subst-labels))) (letrec* ((uy245a@wrap (lambda (uy24d5@x) (make-simple-struct 'stx '5 (list uy24d5@x uyb0d@top-mark* (list uy2457@rib) '()))))) (let ((uy245b@b* (map uy245a@wrap uy242c@b*)) (uy245c@main-exp* (map uy245a@wrap uy242a@main-exp*)) (uy245d@rtc (uydf6@make-collector)) (uy245e@vtc (uydf6@make-collector))) (let ((uy246b@uy2464 uydf8@inv-collector) (uy246c@uy2466 uydfa@vis-collector) (uy246d@uy2468 uy245d@rtc) (uy246e@uy246a uy245e@vtc)) (let ((uy2473@swap (lambda () (begin (let ((uy2475@t (uy246b@uy2464))) (begin (uy246b@uy2464 uy246d@uy2468) (set! uy246d@uy2468 uy2475@t))) (let ((uy2477@t (uy246c@uy2466))) (begin (uy246c@uy2466 uy246e@uy246a) (set! uy246e@uy246a uy2477@t))))))) (dynamic-wind uy2473@swap (lambda () (call-with-values (lambda () (uydfe@chi-library-internal uy245b@b* uy2457@rib uy242d@top?)) (lambda (uy2485@uy247a uy2486@uy247c uy2487@uy247e uy2488@uy2480 uy2489@uy2482 uy248a@uy2484) (let ((uy2491@internal-exp* uy248a@uy2484) (uy2492@rhs* uy2489@uy2482) (uy2493@lex* uy2488@uy2480) (uy2494@mr uy2487@uy247e) (uy2495@r uy2486@uy247c) (uy2496@init* uy2485@uy247a)) (call-with-values (lambda () (uydec@parse-exports (append uy245c@main-exp* uy2491@internal-exp*))) (lambda (uy24a1@uy249e uy24a2@uy24a0) (let ((uy24a5@exp-id* uy24a2@uy24a0) (uy24a6@exp-name* uy24a1@uy249e)) (begin (uyb45@seal-rib! uy2457@rib) (let ((uy24a9@init* (uydae@chi-expr* uy2496@init* uy2495@r uy2494@mr))) (let ((uy24ab@rhs* (uydc2@chi-rhs* uy2492@rhs* uy2495@r uy2494@mr))) (begin (uyb47@unseal-rib! uy2457@rib) (let ((uy24ad@loc* (map uyb13@gen-global uy2493@lex*)) (uy24ae@export-subst (uye5a@make-export-subst uy24a6@exp-name* uy24a5@exp-id*))) (letrec* ((uy24b2@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (uye5c@make-export-env/macros uy2493@lex* uy24ad@loc* uy2495@r)) (lambda (uy24b9@uy24b4 uy24ba@uy24b6 uy24bb@uy24b8) (let ((uy24bf@macro* uy24bb@uy24b8) (uy24c0@global* uy24ba@uy24b6) (uy24c1@export-env uy24b9@uy24b4)) (begin (for-each (lambda (uy24c5@s) (let ((uy24c7@name (car uy24c5@s)) (uy24c8@label (cdr uy24c5@s))) (let ((uy24cb@p (assq uy24c8@label uy24c1@export-env))) (if uy24cb@p (let ((uy24cd@b (cdr uy24cb@p))) (let ((uy24cf@type (car uy24cd@b))) (if (eq? uy24cf@type 'mutable) (uye70@syntax-violation 'export uy24b2@errstr uy24c7@name) (void)))) (void))))) uy24ae@export-subst) (let ((uy24d1@invoke-body (uyaf4@uya5a@build-library-letrec* '#f uy2429@name uy2493@lex* uy24ad@loc* uy24ab@rhs* (if (null? uy24a9@init*) (uyaef@uya50@build-void) (uyaee@uya4e@build-sequence '#f uy24a9@init*)))) (uy24d2@invoke-definitions (map uyaeb@uy9ad@build-global-define (map cdr uy24c0@global*)))) (values (uy2434@itc) (uy245d@rtc) (uy245e@vtc) (uyaee@uya4e@build-sequence '#f (append uy24d2@invoke-definitions (list uy24d1@invoke-body))) uy24bf@macro* uy24ae@export-subst uy24c1@export-env))))))))))))))))))) uy2473@swap)))))))))) uy2445@swap)))))) (set! uy28d1@uye02@library-body-expander uye02@library-body-expander) (set! uye04@core-library-expander (lambda (uy24d7@e uy24d8@verify-name) (call-with-values (lambda () (uydf0@parse-library uy24d7@e)) (lambda (uy24e3@uy24dc uy24e4@uy24de uy24e5@uy24e0 uy24e6@uy24e2) (let ((uy24eb@b* uy24e6@uy24e2) (uy24ec@imp* uy24e5@uy24e0) (uy24ed@exp* uy24e4@uy24de) (uy24ee@name* uy24e3@uy24dc)) (call-with-values (lambda () (uydee@parse-library-name uy24ee@name*)) (lambda (uy24f7@uy24f4 uy24f8@uy24f6) (let ((uy24fb@ver uy24f8@uy24f6) (uy24fc@name uy24f7@uy24f4)) (begin (uy24d8@verify-name uy24fc@name) (call-with-values (lambda () (uye02@library-body-expander uy24fc@name uy24ed@exp* uy24ec@imp* uy24eb@b* '#f)) (lambda (uy250d@uy2500 uy250e@uy2502 uy250f@uy2504 uy2510@uy2506 uy2511@uy2508 uy2512@uy250a uy2513@uy250c) (let ((uy251b@export-env uy2513@uy250c) (uy251c@export-subst uy2512@uy250a) (uy251d@visit-code uy2511@uy2508) (uy251e@invoke-code uy2510@uy2506) (uy251f@visit-req* uy250f@uy2504) (uy2520@invoke-req* uy250e@uy2502) (uy2521@imp* uy250d@uy2500)) (values uy24fc@name uy24fb@ver uy2521@imp* uy2520@invoke-req* uy251f@visit-req* uy251e@invoke-code uy251d@visit-code uy251c@export-subst uy251b@export-env))))))))))))) (set! uy28d2@uye04@core-library-expander uye04@core-library-expander) (set! uye06@parse-top-level-program (lambda (uy2529@e*) (let ((uy252b@t uy2529@e*)) (let ((uy252d@ls/false (uyd90@syntax-dispatch uy252b@t '((any . each-any) . each-any)))) (if (and uy252d@ls/false (apply (lambda (uy252f@import uy2530@imp* uy2531@b*) (eq? (uye76@syntax->datum uy252f@import) 'import)) uy252d@ls/false)) (apply (lambda (uy2535@import uy2536@imp* uy2537@b*) (values uy2536@imp* uy2537@b*)) uy252d@ls/false) (let ((uy253b@t uy252b@t)) (let ((uy253d@ls/false (uyd90@syntax-dispatch uy253b@t '((any . any) . any)))) (if (and uy253d@ls/false (apply (lambda (uy253f@import uy2540@x uy2541@y) (eq? (uye76@syntax->datum uy253f@import) 'import)) uy253d@ls/false)) (apply (lambda (uy2545@import uy2546@x uy2547@y) (uye70@syntax-violation 'expander '"invalid syntax of top-level program" (uyb83@syntax-car uy2529@e*))) uy253d@ls/false) (let ((uy254b@t uy253b@t)) (let ((uy254d@ls/false (uyd90@syntax-dispatch uy254b@t '_))) (if uy254d@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) uy254d@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy254b@t)))))))))))) (set! uy28d3@uye06@parse-top-level-program uye06@parse-top-level-program) (set! uye08@top-level-expander (lambda (uy254f@e*) (call-with-values (lambda () (uye06@parse-top-level-program uy254f@e*)) (lambda (uy2555@uy2552 uy2556@uy2554) (let ((uy2559@b* uy2556@uy2554) (uy255a@imp* uy2555@uy2552)) (call-with-values (lambda () (uye02@library-body-expander '() '() uy255a@imp* uy2559@b* '#t)) (lambda (uy256b@uy255e uy256c@uy2560 uy256d@uy2562 uy256e@uy2564 uy256f@uy2566 uy2570@uy2568 uy2571@uy256a) (let ((uy2579@export-env uy2571@uy256a) (uy257a@export-subst uy2570@uy2568) (uy257b@visit-code uy256f@uy2566) (uy257c@invoke-code uy256e@uy2564) (uy257d@visit-req* uy256d@uy2562) (uy257e@invoke-req* uy256c@uy2560) (uy257f@imp* uy256b@uy255e)) (values uy257e@invoke-req* uy257c@invoke-code))))))))) (set! uy28d4@uye08@top-level-expander uye08@top-level-expander) (set! uye0a@rp (uy6d6@uy5b1@make-record-printer 'env (lambda (uy2587@x uy2588@p uy2589@wr) (display '"#<environment>" uy2588@p)))) (set! uy28d5@uye0a@rp uye0a@rp) (set! uye14@env? (lambda (uy258d@x) (and (simple-struct? uy258d@x) (eq? (simple-struct-name uy258d@x) 'env)))) (set! uy28d6@uye14@env? uye14@env?) (set! uye16@env-names (lambda (uy258f@x) (simple-struct-ref uy258f@x '0))) (set! uy28d7@uye16@env-names uye16@env-names) (set! uye18@set-env-names! (lambda (uy2591@x uy2592@val) (simple-struct-set! uy2591@x '0 uy2592@val))) (set! uy28d8@uye18@set-env-names! uye18@set-env-names!) (set! uye1a@env-labels (lambda (uy2595@x) (simple-struct-ref uy2595@x '1))) (set! uy28d9@uye1a@env-labels uye1a@env-labels) (set! uye1c@set-env-labels! (lambda (uy2597@x uy2598@val) (simple-struct-set! uy2597@x '1 uy2598@val))) (set! uy28da@uye1c@set-env-labels! uye1c@set-env-labels!) (set! uye1e@env-itc (lambda (uy259b@x) (simple-struct-ref uy259b@x '2))) (set! uy28db@uye1e@env-itc uye1e@env-itc) (set! uye20@set-env-itc! (lambda (uy259d@x uy259e@val) (simple-struct-set! uy259d@x '2 uy259e@val))) (set! uy28dc@uye20@set-env-itc! uye20@set-env-itc!) (set! uye22@dummy '3) (set! uy28dd@uye22@dummy uye22@dummy) (set! uye24@rp (uy6d6@uy5b1@make-record-printer 'interaction-env (lambda (uy25a1@x uy25a2@p uy25a3@wr) (display '"#<environment>" uy25a2@p)))) (set! uy28de@uye24@rp uye24@rp) (set! uye2e@interaction-env? (lambda (uy25a7@x) (and (simple-struct? uy25a7@x) (eq? (simple-struct-name uy25a7@x) 'interaction-env)))) (set! uy28df@uye2e@interaction-env? uye2e@interaction-env?) (set! uye30@interaction-env-rib (lambda (uy25a9@x) (simple-struct-ref uy25a9@x '0))) (set! uy28e0@uye30@interaction-env-rib uye30@interaction-env-rib) (set! uye32@set-interaction-env-rib! (lambda (uy25ab@x uy25ac@val) (simple-struct-set! uy25ab@x '0 uy25ac@val))) (set! uy28e1@uye32@set-interaction-env-rib! uye32@set-interaction-env-rib!) (set! uye34@interaction-env-r (lambda (uy25af@x) (simple-struct-ref uy25af@x '1))) (set! uy28e2@uye34@interaction-env-r uye34@interaction-env-r) (set! uye36@set-interaction-env-r! (lambda (uy25b1@x uy25b2@val) (simple-struct-set! uy25b1@x '1 uy25b2@val))) (set! uy28e3@uye36@set-interaction-env-r! uye36@set-interaction-env-r!) (set! uye38@interaction-env-locs (lambda (uy25b5@x) (simple-struct-ref uy25b5@x '2))) (set! uy28e4@uye38@interaction-env-locs uye38@interaction-env-locs) (set! uye3a@set-interaction-env-locs! (lambda (uy25b7@x uy25b8@val) (simple-struct-set! uy25b7@x '2 uy25b8@val))) (set! uy28e5@uye3a@set-interaction-env-locs! uye3a@set-interaction-env-locs!) (set! uye3c@dummy '3) (set! uy28e6@uye3c@dummy uye3c@dummy) (set! uye3e@interaction-environment-symbols (lambda () (uye46@environment-symbols (uye7e@interaction-environment)))) (set! uy28e7@uye3e@interaction-environment-symbols uye3e@interaction-environment-symbols) (set! uye40@environment-bindings (lambda (uy25bb@e) (vector->list (vector-map (lambda (uy25bd@name uy25be@label) (uye42@parse-binding (cons uy25bd@name (uy9a4@uy7f1@imported-label->binding uy25be@label)))) (uye16@env-names uy25bb@e) (uye1a@env-labels uy25bb@e))))) (set! uy28e8@uye40@environment-bindings uye40@environment-bindings) (set! uye42@parse-binding (lambda (uy25c1@b) (cons (car uy25c1@b) (let ((uy25c3@t (cadr uy25c1@b))) (if (memv uy25c3@t '(core-prim global)) 'procedure (if (memv uy25c3@t '(core-macro macro global-macro)) 'syntax (if (memv uy25c3@t '($core-rtd)) 'record (if (eq? (car uy25c1@b) (cadr uy25c1@b)) 'syntax 'unknown)))))))) (set! uy28e9@uye42@parse-binding uye42@parse-binding) (set! uye44@environment? (lambda (uy25c5@x) (or (uye14@env? uy25c5@x) (uye2e@interaction-env? uy25c5@x)))) (set! uy28ea@uye44@environment? uye44@environment?) (set! uye46@environment-symbols (lambda (uy25c7@x) (if (uye14@env? uy25c7@x) (vector->list (uye16@env-names uy25c7@x)) (if (uye2e@interaction-env? uy25c7@x) (map values (uyb27@rib-sym* (uye30@interaction-env-rib uy25c7@x))) (assertion-violation 'environment-symbols '"not an environment" uy25c7@x))))) (set! uy28eb@uye46@environment-symbols uye46@environment-symbols) (set! uye48@environment (lambda uy25c9@imp* (let ((uy25cb@itc (uydf6@make-collector))) (let ((uy25d1@uy25ce uydfc@imp-collector) (uy25d2@uy25d0 uy25cb@itc)) (let ((uy25d5@swap (lambda () (let ((uy25d7@t (uy25d1@uy25ce))) (begin (uy25d1@uy25ce uy25d2@uy25d0) (set! uy25d2@uy25d0 uy25d7@t)))))) (dynamic-wind uy25d5@swap (lambda () (call-with-values (lambda () (uydf2@parse-import-spec* uy25c9@imp*)) (lambda (uy25dd@uy25da uy25de@uy25dc) (let ((uy25e1@subst-labels uy25de@uy25dc) (uy25e2@subst-names uy25dd@uy25da)) (make-simple-struct 'env '4 (list uy25e2@subst-names uy25e1@subst-labels uy25cb@itc)))))) uy25d5@swap)))))) (set! uy28ec@uye48@environment uye48@environment) (set! uye4a@null-environment (lambda (uy25e5@n) (begin (if (not (eqv? uy25e5@n '5)) (assertion-violation 'null-environment '"not 5" uy25e5@n) (void)) (uye48@environment '(psyntax null-environment-5))))) (set! uy28ed@uye4a@null-environment uye4a@null-environment) (set! uye4c@scheme-report-environment (lambda (uy25e7@n) (begin (if (not (eqv? uy25e7@n '5)) (assertion-violation 'scheme-report-environment '"not 5" uy25e7@n) (void)) (uye48@environment '(psyntax scheme-report-environment-5))))) (set! uy28ee@uye4c@scheme-report-environment uye4c@scheme-report-environment) (set! uye4e@expand (lambda (uy25e9@x uy25ea@env) (if (uye14@env? uy25ea@env) (let ((uy25ed@rib (uydf4@make-top-rib (uye16@env-names uy25ea@env) (uye1a@env-labels uy25ea@env)))) (let ((uy25ef@x (make-simple-struct 'stx '5 (list uy25e9@x uyb0d@top-mark* (list uy25ed@rib) '()))) (uy25f0@itc (uye1e@env-itc uy25ea@env)) (uy25f1@rtc (uydf6@make-collector)) (uy25f2@vtc (uydf6@make-collector))) (let ((uy25f7@x (let ((uy2609@uy25fa uye80@top-level-context) (uy260a@uy25fc uydf8@inv-collector) (uy260b@uy25fe uydfa@vis-collector) (uy260c@uy2600 uydfc@imp-collector) (uy260d@uy2602 '#f) (uy260e@uy2604 uy25f1@rtc) (uy260f@uy2606 uy25f2@vtc) (uy2610@uy2608 uy25f0@itc)) (let ((uy2619@swap (lambda () (begin (let ((uy261b@t (uy2609@uy25fa))) (begin (uy2609@uy25fa uy260d@uy2602) (set! uy260d@uy2602 uy261b@t))) (let ((uy261d@t (uy260a@uy25fc))) (begin (uy260a@uy25fc uy260e@uy2604) (set! uy260e@uy2604 uy261d@t))) (let ((uy261f@t (uy260b@uy25fe))) (begin (uy260b@uy25fe uy260f@uy2606) (set! uy260f@uy2606 uy261f@t))) (let ((uy2621@t (uy260c@uy2600))) (begin (uy260c@uy2600 uy2610@uy2608) (set! uy2610@uy2608 uy2621@t))))))) (dynamic-wind uy2619@swap (lambda () (uydb2@chi-expr uy25ef@x '() '())) uy2619@swap))))) (begin (uyb45@seal-rib! uy25ed@rib) (values uy25f7@x (uy25f1@rtc)))))) (if (uye2e@interaction-env? uy25ea@env) (let ((uy2623@rib (uye30@interaction-env-rib uy25ea@env)) (uy2624@r (uye34@interaction-env-r uy25ea@env)) (uy2625@rtc (uydf6@make-collector))) (let ((uy2629@x (make-simple-struct 'stx '5 (list uy25e9@x uyb0d@top-mark* (list uy2623@rib) '())))) (call-with-values (lambda () (let ((uy263f@uy2630 uye80@top-level-context) (uy2640@uy2632 uydf8@inv-collector) (uy2641@uy2634 uydfa@vis-collector) (uy2642@uy2636 uydfc@imp-collector) (uy2643@uy2638 uy25ea@env) (uy2644@uy263a uy2625@rtc) (uy2645@uy263c (uydf6@make-collector)) (uy2646@uy263e (uydf6@make-collector))) (let ((uy264f@swap (lambda () (begin (let ((uy2651@t (uy263f@uy2630))) (begin (uy263f@uy2630 uy2643@uy2638) (set! uy2643@uy2638 uy2651@t))) (let ((uy2653@t (uy2640@uy2632))) (begin (uy2640@uy2632 uy2644@uy263a) (set! uy2644@uy263a uy2653@t))) (let ((uy2655@t (uy2641@uy2634))) (begin (uy2641@uy2634 uy2645@uy263c) (set! uy2645@uy263c uy2655@t))) (let ((uy2657@t (uy2642@uy2636))) (begin (uy2642@uy2636 uy2646@uy263e) (set! uy2646@uy263e uy2657@t))))))) (dynamic-wind uy264f@swap (lambda () (uye00@chi-interaction-expr uy2629@x uy2623@rib uy2624@r)) uy264f@swap)))) (lambda (uy2659@uy262c uy265a@uy262e) (let ((uy265d@r^ uy265a@uy262e) (uy265e@e uy2659@uy262c)) (begin (uye36@set-interaction-env-r! uy25ea@env uy265d@r^) (values uy265e@e (uy2625@rtc)))))))) (assertion-violation 'expand '"not an environment" uy25ea@env))))) (set! uy28ef@uye4e@expand uye4e@expand) (set! uye50@eval (lambda (uy2661@x uy2662@env) (begin (if (not (uye44@environment? uy2662@env)) (error 'eval '"not an environment" uy2662@env) (void)) (call-with-values (lambda () (uye4e@expand uy2661@x uy2662@env)) (lambda (uy2669@uy2666 uy266a@uy2668) (let ((uy266d@invoke-req* uy266a@uy2668) (uy266e@x uy2669@uy2666)) (begin (for-each uy9a5@uy7f3@invoke-library uy266d@invoke-req*) (eval-core (uy72f@uy6e7@expanded->core uy266e@x))))))))) (set! uy28f0@uye50@eval uye50@eval) (set! uye52@library-expander (lambda uy26df (let ((uy26e0 (length uy26df))) (if (= uy26e0 '3) (apply (lambda (uy2671@x uy2672@filename uy2673@verify-name) (letrec* ((uy2678@build-visit-code (lambda (uy26cd@macro*) (if (null? uy26cd@macro*) (uyaef@uya50@build-void) (uyaee@uya4e@build-sequence '#f (map (lambda (uy26cf@x) (let ((uy26d1@loc (car uy26cf@x)) (uy26d2@src (cddr uy26cf@x))) (list 'set! uy26d1@loc uy26d2@src))) uy26cd@macro*))))) (uy267a@visit! (lambda (uy26c5@macro*) (for-each (lambda (uy26c7@x) (let ((uy26c9@loc (car uy26c7@x)) (uy26ca@proc (cadr uy26c7@x))) (set-symbol-value! uy26c9@loc uy26ca@proc))) uy26c5@macro*)))) (call-with-values (lambda () (uye04@core-library-expander uy2671@x uy2673@verify-name)) (lambda (uy268d@uy267c uy268e@uy267e uy268f@uy2680 uy2690@uy2682 uy2691@uy2684 uy2692@uy2686 uy2693@uy2688 uy2694@uy268a uy2695@uy268c) (let ((uy269f@export-env uy2695@uy268c) (uy26a0@export-subst uy2694@uy268a) (uy26a1@macro* uy2693@uy2688) (uy26a2@invoke-code uy2692@uy2686) (uy26a3@vis* uy2691@uy2684) (uy26a4@inv* uy2690@uy2682) (uy26a5@imp* uy268f@uy2680) (uy26a6@ver uy268e@uy267e) (uy26a7@name uy268d@uy267c)) (let ((uy26b1@id (gensym)) (uy26b2@name uy26a7@name) (uy26b3@ver uy26a6@ver) (uy26b4@imp* (map uy9a9@uy7fb@library-spec uy26a5@imp*)) (uy26b5@vis* (map uy9a9@uy7fb@library-spec uy26a3@vis*)) (uy26b6@inv* (map uy9a9@uy7fb@library-spec uy26a4@inv*)) (uy26b7@visit-proc (lambda () (uy267a@visit! uy26a1@macro*))) (uy26b8@invoke-proc (lambda () (eval-core (uy72f@uy6e7@expanded->core uy26a2@invoke-code)))) (uy26b9@visit-code (uy2678@build-visit-code uy26a1@macro*)) (uy26ba@invoke-code uy26a2@invoke-code)) (begin (uy9a3@uy7ef@install-library uy26b1@id uy26b2@name uy26b3@ver uy26b4@imp* uy26b5@vis* uy26b6@inv* uy26a0@export-subst uy269f@export-env uy26b7@visit-proc uy26b8@invoke-proc uy26b9@visit-code uy26ba@invoke-code '#t uy2672@filename) (values uy26b1@id uy26b2@name uy26b3@ver uy26b4@imp* uy26b5@vis* uy26b6@inv* uy26ba@invoke-code uy26b9@visit-code uy26a0@export-subst uy269f@export-env)))))))) uy26df) (if (= uy26e0 '2) (apply (lambda (uy26d5@x uy26d6@filename) (uye52@library-expander uy26d5@x uy26d6@filename (lambda (uy26d9@x) (values)))) uy26df) (if (= uy26e0 '1) (apply (lambda (uy26db@x) (uye52@library-expander uy26db@x '#f (lambda (uy26dd@x) (values)))) uy26df) (error 'apply '"invalid arg count"))))))) (set! uy28f1@uye52@library-expander uye52@library-expander) (set! uye54@boot-library-expand (lambda (uy26e1@x) (call-with-values (lambda () (uye52@library-expander uy26e1@x)) (lambda (uy26f7@uy26e4 uy26f8@uy26e6 uy26f9@uy26e8 uy26fa@uy26ea uy26fb@uy26ec uy26fc@uy26ee uy26fd@uy26f0 uy26fe@uy26f2 uy26ff@uy26f4 uy2700@uy26f6) (let ((uy270b@export-env uy2700@uy26f6) (uy270c@export-subst uy26ff@uy26f4) (uy270d@visit-code uy26fe@uy26f2) (uy270e@invoke-code uy26fd@uy26f0) (uy270f@inv* uy26fc@uy26ee) (uy2710@vis* uy26fb@uy26ec) (uy2711@imp* uy26fa@uy26ea) (uy2712@ver uy26f9@uy26e8) (uy2713@name uy26f8@uy26e6) (uy2714@id uy26f7@uy26e4)) (values uy2713@name uy270e@invoke-code uy270c@export-subst uy270b@export-env)))))) (set! uy28f2@uye54@boot-library-expand uye54@boot-library-expand) (set! uye56@rev-map-append (lambda (uy271f@f uy2720@ls uy2721@ac) (if (null? uy2720@ls) uy2721@ac (uye56@rev-map-append uy271f@f (cdr uy2720@ls) (cons (uy271f@f (car uy2720@ls)) uy2721@ac))))) (set! uy28f3@uye56@rev-map-append uye56@rev-map-append) (set! uye58@build-exports (lambda (uy2725@lex*+loc* uy2726@init*) (uyaee@uya4e@build-sequence '#f (cons (uyaef@uya50@build-void) (uye56@rev-map-append (lambda (uy2729@x) (list 'set! (cdr uy2729@x) (car uy2729@x))) uy2725@lex*+loc* uy2726@init*))))) (set! uy28f4@uye58@build-exports uye58@build-exports) (set! uye5a@make-export-subst (lambda (uy272b@name* uy272c@id*) (map (lambda (uy272f@name uy2730@id) (let ((uy2733@label (uyb9f@id->label uy2730@id))) (begin (if (not uy2733@label) (uye70@syntax-violation '#f '"cannot export unbound identifier" uy2730@id) (void)) (cons uy272f@name uy2733@label)))) uy272b@name* uy272c@id*))) (set! uy28f5@uye5a@make-export-subst uye5a@make-export-subst) (set! uye5c@make-export-env/macros (lambda (uy2735@lex* uy2736@loc* uy2737@r) (letrec* ((uy273c@lookup (lambda (uy2759@x) (let uy2761@f ((uy275b@x uy2759@x) (uy275c@lex* uy2735@lex*) (uy275d@loc* uy2736@loc*)) (if (pair? uy275c@lex*) (if (eq? uy275b@x (car uy275c@lex*)) (car uy275d@loc*) (uy2761@f uy275b@x (cdr uy275c@lex*) (cdr uy275d@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let uy2745@f ((uy273d@r uy2737@r) (uy273e@env '()) (uy273f@global* '()) (uy2740@macro* '())) (if (null? uy273d@r) (values uy273e@env uy273f@global* uy2740@macro*) (let ((uy2747@x (car uy273d@r))) (let ((uy2749@label (car uy2747@x)) (uy274a@b (cdr uy2747@x))) (let ((uy274d@t (uyba5@binding-type uy274a@b))) (if (memv uy274d@t '(lexical)) (let ((uy274f@v (uyba7@binding-value uy274a@b))) (let ((uy2751@loc (uy273c@lookup (uyd1a@lexical-var uy274f@v))) (uy2752@type (if (uyd1c@lexical-mutable? uy274f@v) 'mutable 'global))) (uy2745@f (cdr uy273d@r) (cons (cons* uy2749@label uy2752@type uy2751@loc) uy273e@env) (cons (cons (uyd1a@lexical-var uy274f@v) uy2751@loc) uy273f@global*) uy2740@macro*))) (if (memv uy274d@t '(local-macro)) (let ((uy2755@loc (gensym))) (uy2745@f (cdr uy273d@r) (cons (cons* uy2749@label 'global-macro uy2755@loc) uy273e@env) uy273f@global* (cons (cons uy2755@loc (uyba7@binding-value uy274a@b)) uy2740@macro*))) (if (memv uy274d@t '(local-macro!)) (let ((uy2757@loc (gensym))) (uy2745@f (cdr uy273d@r) (cons (cons* uy2749@label 'global-macro! uy2757@loc) uy273e@env) uy273f@global* (cons (cons uy2757@loc (uyba7@binding-value uy274a@b)) uy2740@macro*))) (if (memv uy274d@t '($rtd $module)) (uy2745@f (cdr uy273d@r) (cons uy2747@x uy273e@env) uy273f@global* uy2740@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (uyba5@binding-type uy274a@b) (uyba7@binding-value uy274a@b)))))))))))))) (set! uy28f6@uye5c@make-export-env/macros uye5c@make-export-env/macros) (set! uye5e@generate-temporaries (lambda (uy2763@ls) (let ((uy2765@t uy2763@ls)) (let ((uy2767@ls/false (uyd90@syntax-dispatch uy2765@t 'each-any))) (if uy2767@ls/false (apply (lambda (uy2769@ls) (map (lambda (uy276b@x) (make-simple-struct 'stx '5 (list (let ((uy276d@x (uye76@syntax->datum uy276b@x))) (if (or (symbol? uy276d@x) (string? uy276d@x)) (gensym uy276d@x) (gensym 't))) uyb0d@top-mark* '() '()))) uy2769@ls)) uy2767@ls/false) (let ((uy276f@t uy2765@t)) (let ((uy2771@ls/false (uyd90@syntax-dispatch uy276f@t '_))) (if uy2771@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) uy2771@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy276f@t))))))))) (set! uy28f7@uye5e@generate-temporaries uye5e@generate-temporaries) (set! uye60@free-identifier=? (lambda (uy2773@x uy2774@y) (if (uyb89@id? uy2773@x) (if (uyb89@id? uy2774@y) (uyb8f@free-id=? uy2773@x uy2774@y) (assertion-violation 'free-identifier=? '"not an identifier" uy2774@y)) (assertion-violation 'free-identifier=? '"not an identifier" uy2773@x)))) (set! uy28f8@uye60@free-identifier=? uye60@free-identifier=?) (set! uye62@bound-identifier=? (lambda (uy2777@x uy2778@y) (if (uyb89@id? uy2777@x) (if (uyb89@id? uy2778@y) (uyb8d@bound-id=? uy2777@x uy2778@y) (assertion-violation 'bound-identifier=? '"not an identifier" uy2778@y)) (assertion-violation 'bound-identifier=? '"not an identifier" uy2777@x)))) (set! uy28f9@uye62@bound-identifier=? uye62@bound-identifier=?) (set! uye64@make-source-condition (lambda (uy277b@x) (letrec* ((uy2785@uy2780 (make-record-type-descriptor '&source-information &condition-rtd 'uy2783 '#f '#f '#((immutable file-name) (immutable line)))) (uy2787@uy2782 '#f) (uy2789@uy2781 (make-record-constructor-descriptor uy2785@uy2780 &condition-rcd uy2787@uy2782)) (uy278c@uy277f (record-predicate uy2785@uy2780)) (uy278e@make-source-condition (record-constructor uy2789@uy2781)) (uy2790@uy277d (record-accessor uy2785@uy2780 '0)) (uy2792@uy277e (record-accessor uy2785@uy2780 '1)) (uy2794@source-condition? (condition-predicate uy2785@uy2780)) (uy2796@source-filename (condition-accessor uy2785@uy2780 uy2790@uy277d)) (uy2798@source-character (condition-accessor uy2785@uy2780 uy2792@uy277e))) (if (and (pair? uy277b@x) (pair? (cdr uy277b@x))) (uy278e@make-source-condition (car uy277b@x) (cadr uy277b@x)) (condition))))) (set! uy28fa@uye64@make-source-condition uye64@make-source-condition) (set! uye66@extract-position-condition (lambda (uy2799@x) (uye64@make-source-condition (uye68@expression-position uy2799@x)))) (set! uy28fb@uye66@extract-position-condition uye66@extract-position-condition) (set! uye68@expression-position (lambda (uy279b@x) (and (uyb55@stx? uy279b@x) (let ((uy279d@x (uyb57@stx-expr uy279b@x))) (and (uy6cd@uy59f@annotation? uy279d@x) (uy6ce@uy5a1@annotation-source uy279d@x)))))) (set! uy28fc@uye68@expression-position uye68@expression-position) (set! uye6a@assertion-error (lambda (uy279f@expr uy27a0@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list uy279f@expr)) (uye64@make-source-condition uy27a0@pos))))) (set! uy28fd@uye6a@assertion-error uye6a@assertion-error) (set! uye6c@syntax-error (lambda (uy27a3@x . uy27a5@args) (begin (if (not (for-all string? uy27a5@args)) (assertion-violation 'syntax-error '"invalid argument" uy27a5@args) (void)) (raise (condition (make-message-condition (if (null? uy27a5@args) '"invalid syntax" (apply string-append uy27a5@args))) (make-syntax-violation (uye76@syntax->datum uy27a3@x) '#f) (uye66@extract-position-condition uy27a3@x)))))) (set! uy28fe@uye6c@syntax-error uye6c@syntax-error) (set! uye6e@syntax-violation* (lambda (uy27a7@who uy27a8@msg uy27a9@form uy27aa@condition-object) (begin (if (not (string? uy27a8@msg)) (assertion-violation 'syntax-violation '"message is not a string" uy27a8@msg) (void)) (let ((uy27af@who (if (or (string? uy27a7@who) (symbol? uy27a7@who)) uy27a7@who (if (not uy27a7@who) (let ((uy27b1@t uy27a9@form)) (let ((uy27b3@ls/false (uyd90@syntax-dispatch uy27b1@t 'any))) (if (and uy27b3@ls/false (apply (lambda (uy27b5@id) (uyb89@id? uy27b5@id)) uy27b3@ls/false)) (apply (lambda (uy27b7@id) (uye76@syntax->datum uy27b7@id)) uy27b3@ls/false) (let ((uy27b9@t uy27b1@t)) (let ((uy27bb@ls/false (uyd90@syntax-dispatch uy27b9@t '(any . any)))) (if (and uy27bb@ls/false (apply (lambda (uy27bd@id uy27be@rest) (uyb89@id? uy27bd@id)) uy27bb@ls/false)) (apply (lambda (uy27c1@id uy27c2@rest) (uye76@syntax->datum uy27c1@id)) uy27bb@ls/false) (let ((uy27c5@t uy27b9@t)) (let ((uy27c7@ls/false (uyd90@syntax-dispatch uy27c5@t '_))) (if uy27c7@ls/false (apply (lambda () '#f) uy27c7@ls/false) (uye70@syntax-violation '#f '"invalid syntax" uy27c5@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" uy27a7@who))))) (raise (condition (if uy27af@who (make-who-condition uy27af@who) (condition)) (make-message-condition uy27a8@msg) uy27aa@condition-object (uye66@extract-position-condition uy27a9@form))))))) (set! uy28ff@uye6e@syntax-violation* uye6e@syntax-violation*) (set! uye70@syntax-violation (lambda uy27d7 (let ((uy27d8 (length uy27d7))) (if (= uy27d8 '3) (apply (lambda (uy27c9@who uy27ca@msg uy27cb@form) (uye70@syntax-violation uy27c9@who uy27ca@msg uy27cb@form '#f)) uy27d7) (if (= uy27d8 '4) (apply (lambda (uy27cf@who uy27d0@msg uy27d1@form uy27d2@subform) (uye6e@syntax-violation* uy27cf@who uy27d0@msg uy27d1@form (make-syntax-violation (uye76@syntax->datum uy27d1@form) (uye76@syntax->datum uy27d2@subform)))) uy27d7) (error 'apply '"invalid arg count")))))) (set! uy2900@uye70@syntax-violation uye70@syntax-violation) (set! uye72@identifier? (lambda (uy27d9@x) (uyb89@id? uy27d9@x))) (set! uy2901@uye72@identifier? uye72@identifier?) (set! uye74@datum->syntax (lambda (uy27db@id uy27dc@datum) (if (uyb89@id? uy27db@id) (uyb69@datum->stx uy27db@id uy27dc@datum) (assertion-violation 'datum->syntax '"not an identifier" uy27db@id)))) (set! uy2902@uye74@datum->syntax uye74@datum->syntax) (set! uye76@syntax->datum (lambda (uy27df@x) (uyb9d@stx->datum uy27df@x))) (set! uy2903@uye76@syntax->datum uye76@syntax->datum) (set! uye78@ungensym-all (lambda (uy27e1@code) (if (pair? uy27e1@code) (cons (uye78@ungensym-all (car uy27e1@code)) (uye78@ungensym-all (cdr uy27e1@code))) (if (symbol? uy27e1@code) (ungensym uy27e1@code) uy27e1@code)))) (set! uy2904@uye78@ungensym-all uye78@ungensym-all) (set! uye7a@compile-r6rs-top-level (lambda (uy27e3@x*) (call-with-values (lambda () (uye08@top-level-expander uy27e3@x*)) (lambda (uy27e9@uy27e6 uy27ea@uy27e8) (let ((uy27ed@invoke-code uy27ea@uy27e8) (uy27ee@lib* uy27e9@uy27e6)) (lambda () (begin (for-each uy9a5@uy7f3@invoke-library uy27ee@lib*) (let ((uy27f1@expanded (uy72f@uy6e7@expanded->core uy27ed@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (uye78@ungensym-all uy27f1@expanded)) (void)) (eval-core uy27f1@expanded)))))))))) (set! uy2905@uye7a@compile-r6rs-top-level uye7a@compile-r6rs-top-level) (set! uye7c@pre-compile-r6rs-top-level (lambda (uy27f3@x*) (call-with-values (lambda () (uye08@top-level-expander uy27f3@x*)) (lambda (uy27f9@uy27f6 uy27fa@uy27f8) (let ((uy27fd@invoke-code uy27fa@uy27f8) (uy27fe@lib* uy27f9@uy27f6)) (begin (for-each uy9a5@uy7f3@invoke-library uy27fe@lib*) (uy6d7@uy5b3@compile-core (uy72f@uy6e7@expanded->core uy27fd@invoke-code)))))))) (set! uy2906@uye7c@pre-compile-r6rs-top-level uye7c@pre-compile-r6rs-top-level) (set! uye7e@interaction-environment (let ((uy2801@the-env '#f)) (lambda () (or uy2801@the-env (let ((uy2803@lib (uy99e@uy7e5@find-library-by-name '(mosh interaction))) (uy2804@rib (uyb3d@make-empty-rib))) (begin (let ((uy2807@subst (uy980@uy7a9@library-subst uy2803@lib))) (begin (uyb29@set-rib-sym*! uy2804@rib (map car uy2807@subst)) (uyb2d@set-rib-mark**! uy2804@rib (map (lambda (uy2809@x) uyb0d@top-mark*) uy2807@subst)) (uyb31@set-rib-label*! uy2804@rib (map cdr uy2807@subst)))) (let ((uy280b@env (make-simple-struct 'interaction-env '4 (list uy2804@rib '() '())))) (begin (set! uy2801@the-env uy280b@env) uy280b@env)))))))) (set! uy2907@uye7e@interaction-environment uye7e@interaction-environment) (set! uye80@top-level-context (uy6d9@uy5b7@make-parameter '#f)) (set! uy2908@uye80@top-level-context uye80@top-level-context) (uy99b@uy7df@current-library-expander uye52@library-expander))
(begin (begin (uy72c@uy6e1@current-primitive-locations (lambda (uy2e6f@x) (let ((uy2e71@t (assq uy2e6f@x '((syntax-error . uy28fe@uye6c@syntax-error) (syntax-dispatch . uy289c@uyd90@syntax-dispatch) (load . uy2a88@uy292f@load) (interaction-environment . uy2907@uye7e@interaction-environment) (library-path . uy993@uy7cf@library-path) (mosh-cache-dir . uy6da@uy5b9@mosh-cache-dir) (make-parameter . uy6d9@uy5b7@make-parameter) (make-variable-transformer . uy2859@uybbb@make-variable-transformer) (identifier? . uy2901@uye72@identifier?) (generate-temporaries . uy28f7@uye5e@generate-temporaries) (free-identifier=? . uy28f8@uye60@free-identifier=?) (syntax->datum . uy2903@uye76@syntax->datum) (datum->syntax . uy2902@uye74@datum->syntax) (bound-identifier=? . uy28f9@uye62@bound-identifier=?) (scheme-report-environment . uy28ee@uye4c@scheme-report-environment) (null-environment . uy28ed@uye4a@null-environment) (command-line . uy2a85@uy2929@command-line) (eval . uy28f0@uye50@eval) (environment . uy28ec@uye48@environment) (syntax-violation . uy2900@uye70@syntax-violation) (assertion-error . uy28fd@uye6a@assertion-error))))) (if uy2e71@t (cdr uy2e71@t) '#f)))) (uy9a3@uy7ef@install-library 'uy2e4c '(mosh interaction) '() '() '() '() '((regexp? . uy2e0c) (alist->eq-hash-table . uy2e08) (format . uy2e05) (string-split . uy2deb) (%start-process . uy2de4) (%call-process . uy2de3) (set-current-directory! . uy2ddf) (expand-path . uy2dde) (current-directory . uy2ddd) (%getpid . uy2ddc) (%waitpid . uy2ddb) (simple-struct-name . uy2dda) (simple-struct-set! . uy2dd9) (simple-struct-ref . uy2dd8) (make-simple-struct . uy2dd7) (simple-struct? . uy2dd6) (pointer-ref-c-int64 . uy2dd5) (pointer-ref-c-int32 . uy2dd4) (pointer-ref-c-int16 . uy2dd3) (pointer-ref-c-int8 . uy2dd2) (pointer-ref-c-uint64 . uy2dd1) (pointer-ref-c-uint32 . uy2dd0) (pointer-ref-c-uint16 . uy2dcf) (pointer-ref-c-uint8 . uy2dce) (pointer-set-c-uint64! . uy2dcd) (pointer-set-c-uint32! . uy2dcc) (pointer-set-c-uint16! . uy2dcb) (pointer-set-c-uint8! . uy2dca) (pointer-set-c-int64! . uy2dc9) (pointer-set-c-int32! . uy2dc8) (pointer-set-c-int16! . uy2dc7) (pointer-set-c-int8! . uy2dc6) (pointer-set-c-pointer! . uy2dc5) (pointer-set-c-double! . uy2dc4) (pointer-set-c-float! . uy2dc3) (pointer-set-c-long-long! . uy2dc2) (pointer-set-c-long! . uy2dc1) (pointer-set-c-int! . uy2dc0) (pointer-set-c-short! . uy2dbf) (pointer-set-c-char! . uy2dbe) (pointer-ref-c-pointer . uy2dbd) (pointer-ref-c-double . uy2dbc) (pointer-ref-c-float . uy2dbb) (pointer-ref-c-unsigned-long-long . uy2dba) (pointer-ref-c-signed-long-long . uy2db9) (pointer-ref-c-unsigned-long . uy2db8) (pointer-ref-c-signed-long . uy2db7) (pointer-ref-c-unsigned-int . uy2db6) (pointer-ref-c-signed-int . uy2db5) (pointer-ref-c-unsigned-short . uy2db4) (pointer-ref-c-signed-short . uy2db3) (pointer-ref-c-unsigned-char . uy2db2) (pointer-ref-c-signed-char . uy2db1) (pointer->integer . uy2db0) (integer->pointer . uy2daf) (pointer? . uy2dae) (shared-errno . uy2dad) (%ffi-supported? . uy2da8) (%ffi-pointer->string . uy2da7) (%ffi-call . uy2da6) (%ffi-lookup . uy2da5) (%ffi-open . uy2da4) (null-terminated-utf8->string . uy2da3) (null-terminated-bytevector->string . uy2da2) (%exec . uy2da1) (%fork . uy2da0) (%pipe . uy2d9f) (p . uy2d9c) (whereis . uy2d80) (register . uy2d7f) (vm-join! . uy2d7e) (vm-set-value! . uy2d7d) (vm? . uy2d7c) (main-vm? . uy2d7b) (vm-eval . uy2d7a) (vm-self . uy2d79) (vm-start! . uy2d78) (make-vm . uy2d77) (mutex-try-lock! . uy2d76) (mutex-unlock! . uy2d75) (mutex-lock! . uy2d74) (mutex? . uy2d73) (make-mutex . uy2d72) (condition-variable-notify-all! . uy2d71) (condition-variable-notify! . uy2d70) (condition-variable-wait! . uy2d6f) (make-condition-variable . uy2d6e) (write/ss . uy2d6d) (string-upcase . uy2d50) (string-titlecase . uy2d4f) (string-normalize-nfkd . uy2d4e) (string-normalize-nfkc . uy2d4d) (string-normalize-nfd . uy2d4c) (string-normalize-nfc . uy2d4b) (string-foldcase . uy2d4a) (string-downcase . uy2d49) (string-ci>? . uy2d48) (string-ci>=? . uy2d47) (string-ci=? . uy2d46) (string-ci<? . uy2d45) (string-ci<=? . uy2d44) (char-whitespace? . uy2d43) (char-upper-case? . uy2d42) (char-title-case? . uy2d41) (char-numeric? . uy2d40) (char-lower-case? . uy2d3f) (char-general-category . uy2d3e) (char-upcase . uy2d3d) (char-titlecase . uy2d3c) (char-foldcase . uy2d3b) (char-downcase . uy2d3a) (char-ci>? . uy2d39) (char-ci>=? . uy2d38) (char-ci=? . uy2d37) (char-ci<? . uy2d36) (char-ci<=? . uy2d35) (char-alphabetic? . uy2d34) (make-variable-transformer . uybba) (identifier? . uye71) (generate-temporaries . uye5d) (free-identifier=? . uye5f) (syntax->datum . uye75) (datum->syntax . uye73) (bound-identifier=? . uye61) (record-type-descriptor? . uy2d33) (record-predicate . uy2d32) (record-mutator . uy2d31) (record-constructor . uy2d30) (record-accessor . uy2d2f) (make-record-type-descriptor . uy2d2e) (make-record-constructor-descriptor . uy2d2d) (record? . uy2d2c) (record-type-uid . uy2d2b) (record-type-sealed? . uy2d2a) (record-type-parent . uy2d29) (record-type-opaque? . uy2d28) (record-type-name . uy2d27) (record-type-generative? . uy2d26) (record-type-field-names . uy2d25) (record-rtd . uy2d24) (record-field-mutable? . uy2d23) (delete-file . uy2d22) (file-exists? . uy2d21) (vector-sort! . uy2d20) (vector-sort . uy2d1f) (list-sort . uy2d1e) (symbol-hash . uy2d1d) (string-ci-hash . uy2d1c) (string-hash . uy2d1b) (equal-hash . uy2d1a) (hashtable-equivalence-function . uy2d19) (make-hashtable . uy2d18) (hashtable-hash-function . uy2d17) (make-eqv-hashtable . uy2d16) (make-eq-hashtable . uy2d15) (hashtable? . uy2d14) (hashtable-update! . uy2d13) (hashtable-size . uy2d12) (hashtable-set! . uy2d11) (hashtable-ref . uy2d10) (hashtable-mutable? . uy2d0f) (hashtable-keys . uy2d0e) (hashtable-entries . uy2d0d) (hashtable-delete! . uy2d0c) (hashtable-copy . uy2d0b) (hashtable-contains? . uy2d0a) (hashtable-clear! . uy2d09) (call-with-output-file . uy2d08) (call-with-input-file . uy2d07) (write-char . uy2d06) (write . uy2d05) (with-output-to-file . uy2d04) (with-input-from-file . uy2d03) (read-char . uy2d02) (read . uy2d01) (peek-char . uy2d00) (open-output-file . uy2cff) (open-input-file . uy2cfe) (newline . uy2cfd) (display . uy2cfc) (close-output-port . uy2cfb) (close-input-port . uy2cfa) (eof-object? . uy2cf9) (eof-object . uy2cf8) (current-error-port . uy2cf7) (current-output-port . uy2cf6) (current-input-port . uy2cf5) (output-port? . uy2cf4) (input-port? . uy2cf3) (utf-8-codec . uy2cf2) (utf-16-codec . uy2cf1) (transcoder-error-handling-mode . uy2cf0) (transcoder-eol-style . uy2cef) (transcoder-codec . uy2cee) (transcoded-port . uy2ced) (textual-port? . uy2cec) (string->bytevector . uy2ceb) (standard-output-port . uy2cea) (standard-input-port . uy2ce9) (standard-error-port . uy2ce8) (set-port-position! . uy2ce7) (put-u8 . uy2ce6) (put-string . uy2ce5) (put-datum . uy2ce4) (put-char . uy2ce3) (put-bytevector . uy2ce2) (port? . uy2ce1) (port-transcoder . uy2ce0) (port-position . uy2cdf) (port-has-set-port-position!? . uy2cde) (port-has-port-position? . uy2cdd) (port-eof? . uy2cdc) (output-port-buffer-mode . uy2cdb) (open-string-output-port . uy2cda) (open-string-input-port . uy2cd9) (open-file-output-port . uy2cd8) (open-file-input/output-port . uy2cd7) (open-file-input-port . uy2cd6) (open-bytevector-output-port . uy2cd5) (open-bytevector-input-port . uy2cd4) (native-transcoder . uy2cd3) (native-eol-style . uy2cd2) (make-transcoder . uy2cd1) (latin-1-codec . uy2cd0) (make-i/o-write-error . uy2ccf) (make-i/o-read-error . uy2cce) (make-i/o-port-error . uy2ccd) (make-i/o-invalid-position-error . uy2ccc) (make-i/o-filename-error . uy2ccb) (make-i/o-file-protection-error . uy2cca) (make-i/o-file-is-read-only-error . uy2cc9) (make-i/o-file-does-not-exist-error . uy2cc8) (make-i/o-file-already-exists-error . uy2cc7) (make-i/o-error . uy2cc6) (make-i/o-encoding-error . uy2cc5) (make-i/o-decoding-error . uy2cc4) (make-custom-textual-output-port . uy2cc3) (make-custom-textual-input/output-port . uy2cc2) (make-custom-textual-input-port . uy2cc1) (make-custom-binary-output-port . uy2cc0) (make-custom-binary-input/output-port . uy2cbf) (make-custom-binary-input-port . uy2cbe) (make-bytevector . uy2cbd) (lookahead-u8 . uy2cbc) (lookahead-char . uy2cbb) (i/o-write-error? . uy2cba) (i/o-read-error? . uy2cb9) (i/o-port-error? . uy2cb8) (i/o-invalid-position-error? . uy2cb7) (i/o-filename-error? . uy2cb6) (i/o-file-protection-error? . uy2cb5) (i/o-file-is-read-only-error? . uy2cb4) (i/o-file-does-not-exist-error? . uy2cb3) (i/o-file-already-exists-error? . uy2cb2) (i/o-error? . uy2cb1) (i/o-error-position . uy2cb0) (i/o-error-port . uy2caf) (i/o-error-filename . uy2cae) (i/o-encoding-error? . uy2cad) (i/o-encoding-error-char . uy2cac) (i/o-decoding-error? . uy2cab) (get-u8 . uy2caa) (get-string-n! . uy2ca9) (get-string-n . uy2ca8) (get-string-all . uy2ca7) (get-line . uy2ca6) (get-datum . uy2ca5) (get-char . uy2ca4) (get-bytevector-some . uy2ca3) (get-bytevector-n! . uy2ca2) (get-bytevector-n . uy2ca1) (get-bytevector-all . uy2ca0) (flush-output-port . uy2c9f) (close-port . uy2c9e) (exit . uy2c96) (command-line . uy2928) (string-fill! . uy2c95) (string-set! . uy2c94) (set-cdr! . uy2c93) (set-car! . uy2c92) (remove . uy2c91) (remv . uy2c90) (remp . uy2c8f) (remq . uy2c8e) (partition . uy2c8d) (memv . uy2c8c) (memq . uy2c8b) (memp . uy2c8a) (member . uy2c89) (exists . uy2c88) (for-all . uy2c87) (fold-right . uy2c86) (fold-left . uy2c85) (find . uy2c84) (filter . uy2c83) (cons* . uy2c82) (assv . uy2c81) (assq . uy2c80) (assp . uy2c7f) (assoc . uy2c7e) (call-with-string-output-port . uy2c7d) (call-with-port . uy2c7c) (call-with-bytevector-output-port . uy2c7b) (bytevector->string . uy2c7a) (buffer-mode? . uy2c79) (binary-port? . uy2c78) (with-exception-handler . uy2c77) (raise-continuable . uy2c76) (raise . uy2c75) (eval . uye4f) (environment . uye47) (make-enumeration . uy2c74) (enum-set=? . uy2c73) (enum-set-universe . uy2c72) (enum-set-union . uy2c71) (enum-set-subset? . uy2c70) (enum-set-projection . uy2c6f) (enum-set-member? . uy2c6e) (enum-set-intersection . uy2c6d) (enum-set-indexer . uy2c6c) (enum-set-difference . uy2c6b) (enum-set-constructor . uy2c6a) (enum-set-complement . uy2c69) (enum-set->list . uy2c68) (who-condition? . uy2c67) (warning? . uy2c66) (violation? . uy2c65) (undefined-violation? . uy2c64) (syntax-violation? . uy2c63) (syntax-violation-subform . uy2c62) (syntax-violation-form . uy2c61) (syntax-violation . uye6f) (simple-conditions . uy2c60) (serious-condition? . uy2c5f) (non-continuable-violation? . uy2c5e) (message-condition? . uy2c5d) (make-who-condition . uy2c5c) (make-warning . uy2c5b) (make-violation . uy2c5a) (make-undefined-violation . uy2c59) (make-syntax-violation . uy2c58) (make-serious-condition . uy2c57) (make-non-continuable-violation . uy2c56) (make-message-condition . uy2c55) (make-lexical-violation . uy2c54) (make-irritants-condition . uy2c53) (make-implementation-restriction-violation . uy2c52) (make-error . uy2c51) (make-assertion-violation . uy2c50) (lexical-violation? . uy2c4f) (irritants-condition? . uy2c4e) (implementation-restriction-violation? . uy2c4d) (error? . uy2c4c) (condition-who . uy2c4b) (condition-predicate . uy2c4a) (condition-message . uy2c49) (condition-irritants . uy2c48) (condition-accessor . uy2c47) (condition . uy2c46) (assertion-violation? . uy2c45) (condition? . uy2c44) (utf32->string . uy2c43) (utf16->string . uy2c42) (utf8->string . uy2c41) (uint-list->bytevector . uy2c40) (u8-list->bytevector . uy2c3f) (string->utf8 . uy2c3e) (string->utf32 . uy2c3d) (string->utf16 . uy2c3c) (sint-list->bytevector . uy2c3b) (native-endianness . uy2c3a) (bytevector? . uy2c39) (bytevector=? . uy2c38) (bytevector-uint-set! . uy2c37) (bytevector-uint-ref . uy2c36) (bytevector-u8-set! . uy2c35) (bytevector-u8-ref . uy2c34) (bytevector-u64-set! . uy2c33) (bytevector-u64-ref . uy2c32) (bytevector-u64-native-set! . uy2c31) (bytevector-u64-native-ref . uy2c30) (bytevector-u32-set! . uy2c2f) (bytevector-u32-ref . uy2c2e) (bytevector-u32-native-set! . uy2c2d) (bytevector-u32-native-ref . uy2c2c) (bytevector-u16-set! . uy2c2b) (bytevector-u16-ref . uy2c2a) (bytevector-u16-native-set! . uy2c29) (bytevector-u16-native-ref . uy2c28) (bytevector-sint-set! . uy2c27) (bytevector-sint-ref . uy2c26) (bytevector-s8-set! . uy2c25) (bytevector-s8-ref . uy2c24) (bytevector-s64-set! . uy2c23) (bytevector-s64-ref . uy2c22) (bytevector-s64-native-set! . uy2c21) (bytevector-s64-native-ref . uy2c20) (bytevector-s32-set! . uy2c1f) (bytevector-s32-ref . uy2c1e) (bytevector-s32-native-set! . uy2c1d) (bytevector-s32-native-ref . uy2c1c) (bytevector-s16-set! . uy2c1b) (bytevector-s16-ref . uy2c1a) (bytevector-s16-native-set! . uy2c19) (bytevector-s16-native-ref . uy2c18) (bytevector-length . uy2c17) (bytevector-ieee-single-ref . uy2c16) (bytevector-ieee-single-set! . uy2c15) (bytevector-ieee-single-native-set! . uy2c14) (bytevector-ieee-single-native-ref . uy2c13) (bytevector-ieee-double-set! . uy2c12) (bytevector-ieee-double-ref . uy2c11) (bytevector-ieee-double-native-set! . uy2c10) (bytevector-ieee-double-native-ref . uy2c0f) (bytevector-fill! . uy2c0e) (bytevector-copy! . uy2c0d) (bytevector-copy . uy2c0c) (bytevector->uint-list . uy2c0b) (bytevector->u8-list . uy2c0a) (bytevector->sint-list . uy2c09) (no-nans-violation? . uy2c08) (no-infinities-violation? . uy2c07) (make-no-nans-violation . uy2c06) (make-no-infinities-violation . uy2c05) (real->flonum . uy2c04) (flzero? . uy2c03) (fltruncate . uy2c02) (fltan . uy2c01) (flsqrt . uy2c00) (flsin . uy2bff) (flround . uy2bfe) (flpositive? . uy2bfd) (flonum? . uy2bfc) (flodd? . uy2bfb) (flnumerator . uy2bfa) (flnegative? . uy2bf9) (flnan? . uy2bf8) (flmod0 . uy2bf7) (flmod . uy2bf6) (flmin . uy2bf5) (flmax . uy2bf4) (fllog . uy2bf3) (flinteger? . uy2bf2) (flinfinite? . uy2bf1) (flfloor . uy2bf0) (flfinite? . uy2bef) (flexpt . uy2bee) (flexp . uy2bed) (fleven? . uy2bec) (fldiv0-and-mod0 . uy2beb) (fldiv0 . uy2bea) (fldiv-and-mod . uy2be9) (fldiv . uy2be8) (fldenominator . uy2be7) (flcos . uy2be6) (flceiling . uy2be5) (flatan . uy2be4) (flasin . uy2be3) (flacos . uy2be2) (flabs . uy2be1) (fl>? . uy2be0) (fl>=? . uy2bdf) (fl=? . uy2bde) (fl<? . uy2bdd) (fl<=? . uy2bdc) (fl/ . uy2bdb) (fl- . uy2bda) (fl+ . uy2bd9) (fl* . uy2bd8) (fixnum->flonum . uy2bd7) (fxzero? . uy2bd6) (fxxor . uy2bd5) (fxrotate-bit-field . uy2bd4) (fxreverse-bit-field . uy2bd3) (fxpositive? . uy2bd2) (fxodd? . uy2bd1) (fxnot . uy2bd0) (fxnegative? . uy2bcf) (fxmod0 . uy2bce) (fxmod . uy2bcd) (fxmin . uy2bcc) (fxmax . uy2bcb) (fxlength . uy2bca) (fxior . uy2bc9) (fxif . uy2bc8) (fxfirst-bit-set . uy2bc7) (fxeven? . uy2bc6) (fxdiv0-and-mod0 . uy2bc5) (fxdiv0 . uy2bc4) (fxdiv-and-mod . uy2bc3) (fxdiv . uy2bc2) (fxcopy-bit-field . uy2bc1) (fxcopy-bit . uy2bc0) (fxbit-set? . uy2bbf) (fxbit-field . uy2bbe) (fxbit-count . uy2bbd) (fxarithmetic-shift-right . uy2bbc) (fxarithmetic-shift-left . uy2bbb) (fxarithmetic-shift . uy2bba) (fxand . uy2bb9) (fx>? . uy2bb8) (fx>=? . uy2bb7) (fx=? . uy2bb6) (fx<? . uy2bb5) (fx<=? . uy2bb4) (fx-/carry . uy2bb3) (fx- . uy2bb2) (fx+/carry . uy2bb1) (fx+ . uy2bb0) (fx*/carry . uy2baf) (fx* . uy2bae) (greatest-fixnum . uy2bad) (least-fixnum . uy2bac) (fixnum-width . uy2bab) (fixnum? . uy2baa) (bitwise-rotate-bit-field . uy2ba9) (bitwise-reverse-bit-field . uy2ba8) (bitwise-length . uy2ba7) (bitwise-if . uy2ba6) (bitwise-first-bit-set . uy2ba5) (bitwise-copy-bit-field . uy2ba4) (bitwise-copy-bit . uy2ba3) (bitwise-bit-set? . uy2ba2) (bitwise-bit-field . uy2ba1) (bitwise-bit-count . uy2ba0) (bitwise-xor . uy2b9f) (bitwise-ior . uy2b9e) (bitwise-and . uy2b9d) (bitwise-not . uy2b9c) (bitwise-arithmetic-shift-right . uy2b9b) (bitwise-arithmetic-shift-left . uy2b9a) (bitwise-arithmetic-shift . uy2b99) (zero? . uy2b98) (vector? . uy2b97) (vector-set! . uy2b96) (vector-ref . uy2b95) (vector-map . uy2b94) (vector-length . uy2b93) (vector-for-each . uy2b92) (vector-fill! . uy2b91) (vector->list . uy2b90) (vector . uy2b8f) (values . uy2b8e) (truncate . uy2b8d) (tan . uy2b8c) (symbol? . uy2b8b) (symbol=? . uy2b8a) (symbol->string . uy2b89) (substring . uy2b88) (string? . uy2b87) (string>? . uy2b86) (string>=? . uy2b85) (string=? . uy2b84) (string<? . uy2b83) (string<=? . uy2b82) (string-ref . uy2b81) (string-length . uy2b80) (string-for-each . uy2b7f) (string-copy . uy2b7e) (string-append . uy2b7d) (string->symbol . uy2b7c) (string->number . uy2b7b) (string->list . uy2b7a) (string . uy2b79) (sqrt . uy2b78) (sin . uy2b77) (round . uy2b76) (reverse . uy2b75) (real? . uy2b74) (real-valued? . uy2b73) (real-part . uy2b72) (rationalize . uy2b71) (rational? . uy2b70) (rational-valued? . uy2b6f) (procedure? . uy2b6e) (positive? . uy2b6d) (pair? . uy2b6c) (odd? . uy2b6b) (numerator . uy2b6a) (number? . uy2b69) (number->string . uy2b68) (null? . uy2b67) (not . uy2b66) (negative? . uy2b65) (nan? . uy2b64) (min . uy2b63) (max . uy2b62) (map . uy2b61) (make-vector . uy2b60) (make-string . uy2b5f) (make-rectangular . uy2b5e) (make-polar . uy2b5d) (magnitude . uy2b5c) (log . uy2b5b) (list? . uy2b5a) (list-tail . uy2b59) (list-ref . uy2b58) (list->vector . uy2b57) (list->string . uy2b56) (list . uy2b55) (length . uy2b54) (lcm . uy2b53) (integer? . uy2b52) (integer-valued? . uy2b51) (integer->char . uy2b50) (infinite? . uy2b4f) (inexact? . uy2b4e) (inexact . uy2b4d) (imag-part . uy2b4c) (gcd . uy2b4b) (for-each . uy2b4a) (floor . uy2b49) (finite? . uy2b48) (expt . uy2b47) (exp . uy2b46) (exact? . uy2b45) (exact-integer-sqrt . uy2b44) (exact . uy2b43) (even? . uy2b42) (error . uy2b41) (eqv? . uy2b40) (equal? . uy2b3f) (eq? . uy2b3e) (dynamic-wind . uy2b3d) (div0-and-mod0 . uy2b3c) (mod0 . uy2b3b) (div0 . uy2b3a) (div-and-mod . uy2b39) (mod . uy2b38) (div . uy2b37) (denominator . uy2b36) (cos . uy2b35) (cons . uy2b34) (complex? . uy2b33) (char? . uy2b32) (char>? . uy2b31) (char>=? . uy2b30) (char=? . uy2b2f) (char<? . uy2b2e) (char<=? . uy2b2d) (char->integer . uy2b2c) (ceiling . uy2b2b) (call-with-values . uy2b2a) (call/cc . uy2b29) (call-with-current-continuation . uy2b28) (cddddr . uy2b27) (cdddar . uy2b26) (cddadr . uy2b25) (cddaar . uy2b24) (cdaddr . uy2b23) (cdadar . uy2b22) (cdaadr . uy2b21) (cdaaar . uy2b20) (cadddr . uy2b1f) (caddar . uy2b1e) (cadadr . uy2b1d) (cadaar . uy2b1c) (caaddr . uy2b1b) (caadar . uy2b1a) (caaadr . uy2b19) (caaaar . uy2b18) (cdddr . uy2b17) (cddar . uy2b16) (cdadr . uy2b15) (cdaar . uy2b14) (caddr . uy2b13) (cadar . uy2b12) (caadr . uy2b11) (caaar . uy2b10) (cddr . uy2b0f) (cdar . uy2b0e) (cadr . uy2b0d) (caar . uy2b0c) (cdr . uy2b0b) (car . uy2b0a) (boolean? . uy2b09) (boolean=? . uy2b08) (atan . uy2b07) (assertion-violation . uy2b06) (asin . uy2b05) (apply . uy2b04) (append . uy2b03) (angle . uy2b02) (acos . uy2b01) (abs . uy2b00) (/ . uy2aff) (* . uy2afe) (- . uy2afd) (+ . uy2afc) (>= . uy2afb) (> . uy2afa) (= . uy2af9) (<= . uy2af8) (< . uy2af7) (library . uy2af6) (&no-nans . uy2af5) (&no-infinities . uy2af4) (&i/o-encoding . uy2af3) (&i/o-decoding . uy2af2) (&i/o-port . uy2af1) (&i/o-file-does-not-exist . uy2af0) (&i/o-file-already-exists . uy2aef) (&i/o-file-is-read-only . uy2aee) (&i/o-file-protection . uy2aed) (&i/o-filename . uy2aec) (&i/o-invalid-position . uy2aeb) (&i/o-write . uy2aea) (&i/o-read . uy2ae9) (&i/o . uy2ae8) (&undefined . uy2ae7) (&syntax . uy2ae6) (&lexical . uy2ae5) (&implementation-restriction . uy2ae4) (&non-continuable . uy2ae3) (&who . uy2ae2) (&irritants . uy2ae1) (&assertion . uy2ae0) (&violation . uy2adf) (&error . uy2ade) (&serious . uy2add) (&warning . uy2adc) (&message . uy2adb) (&condition . uy2ada) (define-condition-type . uy2ad9) (define-enumeration . uy2ad8) (define-record-type . uy2ad7) (parent-rtd . uy2ad6) (nongenerative . uy2ad5) (opaque . uy2ad4) (sealed . uy2ad3) (protocol . uy2ad2) (parent . uy2ad1) (immutable . uy2ad0) (mutable . uy2acf) (fields . uy2ace) (error-handling-mode . uy2acd) (file-options . uy2acc) (buffer-mode . uy2acb) (eol-style . uy2aca) (guard . uy2ac9) (unsyntax-splicing . uy2ac6) (unsyntax . uy2ac5) (unquote-splicing . uy2ac4) (unquote . uy2ac3) (_ . uy2ac2) (else . uy2ac1) (=> . uy2ac0) (... . uy2abf) (assert . uy2abe) (endianness . uy2abd) (time . uy2abb) (do . uy2aba) (cond . uy2ab9) (let* . uy2ab8) (let*-values . uy2ab7) (let-values . uy2ab6) (identifier-syntax . uy2ab5) (with-syntax . uy2ab4) (quasisyntax . uy2ab3) (quasiquote . uy2ab2) (syntax-rules . uy2ab1) (include . uy2ab0) (record-constructor-descriptor . uy2aae) (record-type-descriptor . uy2aad) (case . uy2aac) (unless . uy2aaa) (when . uy2aa9) (or . uy2aa8) (and . uy2aa7) (if . uy2aa6) (let . uy2aa5) (letrec* . uy2aa4) (letrec . uy2aa3) (case-lambda . uy2aa1) (lambda . uy2aa0) (syntax . uy2a9f) (syntax-case . uy2a9e) (quote . uy2a9d) (letrec-syntax . uy2a9b) (let-syntax . uy2a9a) (set! . uy2a99) (import . uy2a98) (begin . uy2a97) (define-syntax . uy2a95) (define . uy2a94)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e4d '(psyntax null-environment-5) '() '() '() '() '((make-promise . uy2c97) (unquote-splicing . uy2ac4) (unquote . uy2ac3) (_ . uy2ac2) (else . uy2ac1) (=> . uy2ac0) (... . uy2abf) (delay . uy2abc) (do . uy2aba) (cond . uy2ab9) (let* . uy2ab8) (quasiquote . uy2ab2) (syntax-rules . uy2ab1) (case . uy2aac) (or . uy2aa8) (and . uy2aa7) (if . uy2aa6) (let . uy2aa5) (letrec . uy2aa3) (lambda . uy2aa0) (quote . uy2a9d) (letrec-syntax . uy2a9b) (let-syntax . uy2a9a) (set! . uy2a99) (begin . uy2a97) (define-syntax . uy2a95) (define . uy2a94)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e4e '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . uy2d48) (string-ci>=? . uy2d47) (string-ci=? . uy2d46) (string-ci<? . uy2d45) (string-ci<=? . uy2d44) (char-whitespace? . uy2d43) (char-upper-case? . uy2d42) (char-numeric? . uy2d40) (char-lower-case? . uy2d3f) (char-upcase . uy2d3d) (char-downcase . uy2d3a) (char-ci>? . uy2d39) (char-ci>=? . uy2d38) (char-ci=? . uy2d37) (char-ci<? . uy2d36) (char-ci<=? . uy2d35) (char-alphabetic? . uy2d34) (call-with-output-file . uy2d08) (call-with-input-file . uy2d07) (write-char . uy2d06) (write . uy2d05) (with-output-to-file . uy2d04) (with-input-from-file . uy2d03) (read-char . uy2d02) (read . uy2d01) (peek-char . uy2d00) (open-output-file . uy2cff) (open-input-file . uy2cfe) (newline . uy2cfd) (display . uy2cfc) (close-output-port . uy2cfb) (close-input-port . uy2cfa) (eof-object . uy2cf8) (current-output-port . uy2cf6) (current-input-port . uy2cf5) (output-port? . uy2cf4) (input-port? . uy2cf3) (scheme-report-environment . uye4b) (quotient . uy2c9d) (null-environment . uye49) (remainder . uy2c9c) (modulo . uy2c9b) (inexact->exact . uy2c9a) (force . uy2c99) (exact->inexact . uy2c98) (make-promise . uy2c97) (string-fill! . uy2c95) (string-set! . uy2c94) (set-cdr! . uy2c93) (set-car! . uy2c92) (memv . uy2c8c) (memq . uy2c8b) (member . uy2c89) (assv . uy2c81) (assq . uy2c80) (assoc . uy2c7e) (eval . uye4f) (zero? . uy2b98) (vector? . uy2b97) (vector-set! . uy2b96) (vector-ref . uy2b95) (vector-length . uy2b93) (vector-fill! . uy2b91) (vector->list . uy2b90) (vector . uy2b8f) (values . uy2b8e) (truncate . uy2b8d) (tan . uy2b8c) (symbol? . uy2b8b) (symbol->string . uy2b89) (substring . uy2b88) (string? . uy2b87) (string>? . uy2b86) (string>=? . uy2b85) (string=? . uy2b84) (string<? . uy2b83) (string<=? . uy2b82) (string-ref . uy2b81) (string-length . uy2b80) (string-copy . uy2b7e) (string-append . uy2b7d) (string->symbol . uy2b7c) (string->number . uy2b7b) (string->list . uy2b7a) (string . uy2b79) (sqrt . uy2b78) (sin . uy2b77) (round . uy2b76) (reverse . uy2b75) (real? . uy2b74) (real-part . uy2b72) (rationalize . uy2b71) (rational? . uy2b70) (procedure? . uy2b6e) (positive? . uy2b6d) (pair? . uy2b6c) (odd? . uy2b6b) (numerator . uy2b6a) (number? . uy2b69) (number->string . uy2b68) (not . uy2b66) (negative? . uy2b65) (min . uy2b63) (max . uy2b62) (map . uy2b61) (make-vector . uy2b60) (make-string . uy2b5f) (make-rectangular . uy2b5e) (make-polar . uy2b5d) (magnitude . uy2b5c) (log . uy2b5b) (list? . uy2b5a) (list-tail . uy2b59) (list-ref . uy2b58) (list->vector . uy2b57) (list->string . uy2b56) (list . uy2b55) (length . uy2b54) (lcm . uy2b53) (integer? . uy2b52) (integer->char . uy2b50) (inexact? . uy2b4e) (imag-part . uy2b4c) (gcd . uy2b4b) (for-each . uy2b4a) (floor . uy2b49) (expt . uy2b47) (exp . uy2b46) (exact? . uy2b45) (even? . uy2b42) (eqv? . uy2b40) (equal? . uy2b3f) (eq? . uy2b3e) (dynamic-wind . uy2b3d) (denominator . uy2b36) (cos . uy2b35) (cons . uy2b34) (complex? . uy2b33) (char? . uy2b32) (char>? . uy2b31) (char>=? . uy2b30) (char=? . uy2b2f) (char<? . uy2b2e) (char<=? . uy2b2d) (char->integer . uy2b2c) (ceiling . uy2b2b) (call-with-values . uy2b2a) (call-with-current-continuation . uy2b28) (cddddr . uy2b27) (cdddar . uy2b26) (cddadr . uy2b25) (cddaar . uy2b24) (cdaddr . uy2b23) (cdadar . uy2b22) (cdaadr . uy2b21) (cdaaar . uy2b20) (cadddr . uy2b1f) (caddar . uy2b1e) (cadadr . uy2b1d) (cadaar . uy2b1c) (caaddr . uy2b1b) (caadar . uy2b1a) (caaadr . uy2b19) (caaaar . uy2b18) (cdddr . uy2b17) (cddar . uy2b16) (cdadr . uy2b15) (cdaar . uy2b14) (caddr . uy2b13) (cadar . uy2b12) (caadr . uy2b11) (caaar . uy2b10) (cddr . uy2b0f) (cdar . uy2b0e) (cadr . uy2b0d) (caar . uy2b0c) (cdr . uy2b0b) (car . uy2b0a) (boolean? . uy2b09) (atan . uy2b07) (asin . uy2b05) (apply . uy2b04) (append . uy2b03) (angle . uy2b02) (acos . uy2b01) (abs . uy2b00) (/ . uy2aff) (* . uy2afe) (- . uy2afd) (+ . uy2afc) (>= . uy2afb) (> . uy2afa) (= . uy2af9) (<= . uy2af8) (< . uy2af7) (unquote-splicing . uy2ac4) (unquote . uy2ac3) (else . uy2ac1) (=> . uy2ac0) (... . uy2abf) (delay . uy2abc) (do . uy2aba) (cond . uy2ab9) (let* . uy2ab8) (quasiquote . uy2ab2) (syntax-rules . uy2ab1) (case . uy2aac) (or . uy2aa8) (and . uy2aa7) (if . uy2aa6) (let . uy2aa5) (letrec . uy2aa3) (lambda . uy2aa0) (quote . uy2a9d) (letrec-syntax . uy2a9b) (let-syntax . uy2a9a) (set! . uy2a99) (begin . uy2a97) (define-syntax . uy2a95) (define . uy2a94)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e4f '(psyntax modules) '() '() '() '() '((module . uy2a96)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e50 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e51 '(rnrs) '(6) '() '() '() '((regexp? . uy2e0c) (string-upcase . uy2d50) (string-titlecase . uy2d4f) (string-normalize-nfkd . uy2d4e) (string-normalize-nfkc . uy2d4d) (string-normalize-nfd . uy2d4c) (string-normalize-nfc . uy2d4b) (string-foldcase . uy2d4a) (string-downcase . uy2d49) (string-ci>? . uy2d48) (string-ci>=? . uy2d47) (string-ci=? . uy2d46) (string-ci<? . uy2d45) (string-ci<=? . uy2d44) (char-whitespace? . uy2d43) (char-upper-case? . uy2d42) (char-title-case? . uy2d41) (char-numeric? . uy2d40) (char-lower-case? . uy2d3f) (char-general-category . uy2d3e) (char-upcase . uy2d3d) (char-titlecase . uy2d3c) (char-foldcase . uy2d3b) (char-downcase . uy2d3a) (char-ci>? . uy2d39) (char-ci>=? . uy2d38) (char-ci=? . uy2d37) (char-ci<? . uy2d36) (char-ci<=? . uy2d35) (char-alphabetic? . uy2d34) (make-variable-transformer . uybba) (identifier? . uye71) (generate-temporaries . uye5d) (free-identifier=? . uye5f) (syntax->datum . uye75) (datum->syntax . uye73) (bound-identifier=? . uye61) (record-type-descriptor? . uy2d33) (record-predicate . uy2d32) (record-mutator . uy2d31) (record-constructor . uy2d30) (record-accessor . uy2d2f) (make-record-type-descriptor . uy2d2e) (make-record-constructor-descriptor . uy2d2d) (record? . uy2d2c) (record-type-uid . uy2d2b) (record-type-sealed? . uy2d2a) (record-type-parent . uy2d29) (record-type-opaque? . uy2d28) (record-type-name . uy2d27) (record-type-generative? . uy2d26) (record-type-field-names . uy2d25) (record-rtd . uy2d24) (record-field-mutable? . uy2d23) (delete-file . uy2d22) (file-exists? . uy2d21) (vector-sort! . uy2d20) (vector-sort . uy2d1f) (list-sort . uy2d1e) (symbol-hash . uy2d1d) (string-ci-hash . uy2d1c) (string-hash . uy2d1b) (equal-hash . uy2d1a) (hashtable-equivalence-function . uy2d19) (make-hashtable . uy2d18) (hashtable-hash-function . uy2d17) (make-eqv-hashtable . uy2d16) (make-eq-hashtable . uy2d15) (hashtable? . uy2d14) (hashtable-update! . uy2d13) (hashtable-size . uy2d12) (hashtable-set! . uy2d11) (hashtable-ref . uy2d10) (hashtable-mutable? . uy2d0f) (hashtable-keys . uy2d0e) (hashtable-entries . uy2d0d) (hashtable-delete! . uy2d0c) (hashtable-copy . uy2d0b) (hashtable-contains? . uy2d0a) (hashtable-clear! . uy2d09) (call-with-output-file . uy2d08) (call-with-input-file . uy2d07) (write-char . uy2d06) (write . uy2d05) (with-output-to-file . uy2d04) (with-input-from-file . uy2d03) (read-char . uy2d02) (read . uy2d01) (peek-char . uy2d00) (open-output-file . uy2cff) (open-input-file . uy2cfe) (newline . uy2cfd) (display . uy2cfc) (close-output-port . uy2cfb) (close-input-port . uy2cfa) (eof-object? . uy2cf9) (eof-object . uy2cf8) (current-error-port . uy2cf7) (current-output-port . uy2cf6) (current-input-port . uy2cf5) (output-port? . uy2cf4) (input-port? . uy2cf3) (utf-8-codec . uy2cf2) (utf-16-codec . uy2cf1) (transcoder-error-handling-mode . uy2cf0) (transcoder-eol-style . uy2cef) (transcoder-codec . uy2cee) (transcoded-port . uy2ced) (textual-port? . uy2cec) (string->bytevector . uy2ceb) (standard-output-port . uy2cea) (standard-input-port . uy2ce9) (standard-error-port . uy2ce8) (set-port-position! . uy2ce7) (put-u8 . uy2ce6) (put-string . uy2ce5) (put-datum . uy2ce4) (put-char . uy2ce3) (put-bytevector . uy2ce2) (port? . uy2ce1) (port-transcoder . uy2ce0) (port-position . uy2cdf) (port-has-set-port-position!? . uy2cde) (port-has-port-position? . uy2cdd) (port-eof? . uy2cdc) (output-port-buffer-mode . uy2cdb) (open-string-output-port . uy2cda) (open-string-input-port . uy2cd9) (open-file-output-port . uy2cd8) (open-file-input/output-port . uy2cd7) (open-file-input-port . uy2cd6) (open-bytevector-output-port . uy2cd5) (open-bytevector-input-port . uy2cd4) (native-transcoder . uy2cd3) (native-eol-style . uy2cd2) (make-transcoder . uy2cd1) (latin-1-codec . uy2cd0) (make-i/o-write-error . uy2ccf) (make-i/o-read-error . uy2cce) (make-i/o-port-error . uy2ccd) (make-i/o-invalid-position-error . uy2ccc) (make-i/o-filename-error . uy2ccb) (make-i/o-file-protection-error . uy2cca) (make-i/o-file-is-read-only-error . uy2cc9) (make-i/o-file-does-not-exist-error . uy2cc8) (make-i/o-file-already-exists-error . uy2cc7) (make-i/o-error . uy2cc6) (make-i/o-encoding-error . uy2cc5) (make-i/o-decoding-error . uy2cc4) (make-custom-textual-output-port . uy2cc3) (make-custom-textual-input/output-port . uy2cc2) (make-custom-textual-input-port . uy2cc1) (make-custom-binary-output-port . uy2cc0) (make-custom-binary-input/output-port . uy2cbf) (make-custom-binary-input-port . uy2cbe) (make-bytevector . uy2cbd) (lookahead-u8 . uy2cbc) (lookahead-char . uy2cbb) (i/o-write-error? . uy2cba) (i/o-read-error? . uy2cb9) (i/o-port-error? . uy2cb8) (i/o-invalid-position-error? . uy2cb7) (i/o-filename-error? . uy2cb6) (i/o-file-protection-error? . uy2cb5) (i/o-file-is-read-only-error? . uy2cb4) (i/o-file-does-not-exist-error? . uy2cb3) (i/o-file-already-exists-error? . uy2cb2) (i/o-error? . uy2cb1) (i/o-error-position . uy2cb0) (i/o-error-port . uy2caf) (i/o-error-filename . uy2cae) (i/o-encoding-error? . uy2cad) (i/o-encoding-error-char . uy2cac) (i/o-decoding-error? . uy2cab) (get-u8 . uy2caa) (get-string-n! . uy2ca9) (get-string-n . uy2ca8) (get-string-all . uy2ca7) (get-line . uy2ca6) (get-datum . uy2ca5) (get-char . uy2ca4) (get-bytevector-some . uy2ca3) (get-bytevector-n! . uy2ca2) (get-bytevector-n . uy2ca1) (get-bytevector-all . uy2ca0) (flush-output-port . uy2c9f) (close-port . uy2c9e) (exit . uy2c96) (command-line . uy2928) (remove . uy2c91) (remv . uy2c90) (remp . uy2c8f) (remq . uy2c8e) (partition . uy2c8d) (memv . uy2c8c) (memq . uy2c8b) (memp . uy2c8a) (member . uy2c89) (exists . uy2c88) (for-all . uy2c87) (fold-right . uy2c86) (fold-left . uy2c85) (find . uy2c84) (filter . uy2c83) (cons* . uy2c82) (assv . uy2c81) (assq . uy2c80) (assp . uy2c7f) (assoc . uy2c7e) (call-with-string-output-port . uy2c7d) (call-with-port . uy2c7c) (call-with-bytevector-output-port . uy2c7b) (bytevector->string . uy2c7a) (buffer-mode? . uy2c79) (binary-port? . uy2c78) (with-exception-handler . uy2c77) (raise-continuable . uy2c76) (raise . uy2c75) (make-enumeration . uy2c74) (enum-set=? . uy2c73) (enum-set-universe . uy2c72) (enum-set-union . uy2c71) (enum-set-subset? . uy2c70) (enum-set-projection . uy2c6f) (enum-set-member? . uy2c6e) (enum-set-intersection . uy2c6d) (enum-set-indexer . uy2c6c) (enum-set-difference . uy2c6b) (enum-set-constructor . uy2c6a) (enum-set-complement . uy2c69) (enum-set->list . uy2c68) (who-condition? . uy2c67) (warning? . uy2c66) (violation? . uy2c65) (undefined-violation? . uy2c64) (syntax-violation? . uy2c63) (syntax-violation-subform . uy2c62) (syntax-violation-form . uy2c61) (syntax-violation . uye6f) (simple-conditions . uy2c60) (serious-condition? . uy2c5f) (non-continuable-violation? . uy2c5e) (message-condition? . uy2c5d) (make-who-condition . uy2c5c) (make-warning . uy2c5b) (make-violation . uy2c5a) (make-undefined-violation . uy2c59) (make-syntax-violation . uy2c58) (make-serious-condition . uy2c57) (make-non-continuable-violation . uy2c56) (make-message-condition . uy2c55) (make-lexical-violation . uy2c54) (make-irritants-condition . uy2c53) (make-implementation-restriction-violation . uy2c52) (make-error . uy2c51) (make-assertion-violation . uy2c50) (lexical-violation? . uy2c4f) (irritants-condition? . uy2c4e) (implementation-restriction-violation? . uy2c4d) (error? . uy2c4c) (condition-who . uy2c4b) (condition-predicate . uy2c4a) (condition-message . uy2c49) (condition-irritants . uy2c48) (condition-accessor . uy2c47) (condition . uy2c46) (assertion-violation? . uy2c45) (condition? . uy2c44) (utf32->string . uy2c43) (utf16->string . uy2c42) (utf8->string . uy2c41) (uint-list->bytevector . uy2c40) (u8-list->bytevector . uy2c3f) (string->utf8 . uy2c3e) (string->utf32 . uy2c3d) (string->utf16 . uy2c3c) (sint-list->bytevector . uy2c3b) (native-endianness . uy2c3a) (bytevector? . uy2c39) (bytevector=? . uy2c38) (bytevector-uint-set! . uy2c37) (bytevector-uint-ref . uy2c36) (bytevector-u8-set! . uy2c35) (bytevector-u8-ref . uy2c34) (bytevector-u64-set! . uy2c33) (bytevector-u64-ref . uy2c32) (bytevector-u64-native-set! . uy2c31) (bytevector-u64-native-ref . uy2c30) (bytevector-u32-set! . uy2c2f) (bytevector-u32-ref . uy2c2e) (bytevector-u32-native-set! . uy2c2d) (bytevector-u32-native-ref . uy2c2c) (bytevector-u16-set! . uy2c2b) (bytevector-u16-ref . uy2c2a) (bytevector-u16-native-set! . uy2c29) (bytevector-u16-native-ref . uy2c28) (bytevector-sint-set! . uy2c27) (bytevector-sint-ref . uy2c26) (bytevector-s8-set! . uy2c25) (bytevector-s8-ref . uy2c24) (bytevector-s64-set! . uy2c23) (bytevector-s64-ref . uy2c22) (bytevector-s64-native-set! . uy2c21) (bytevector-s64-native-ref . uy2c20) (bytevector-s32-set! . uy2c1f) (bytevector-s32-ref . uy2c1e) (bytevector-s32-native-set! . uy2c1d) (bytevector-s32-native-ref . uy2c1c) (bytevector-s16-set! . uy2c1b) (bytevector-s16-ref . uy2c1a) (bytevector-s16-native-set! . uy2c19) (bytevector-s16-native-ref . uy2c18) (bytevector-length . uy2c17) (bytevector-ieee-single-ref . uy2c16) (bytevector-ieee-single-set! . uy2c15) (bytevector-ieee-single-native-set! . uy2c14) (bytevector-ieee-single-native-ref . uy2c13) (bytevector-ieee-double-set! . uy2c12) (bytevector-ieee-double-ref . uy2c11) (bytevector-ieee-double-native-set! . uy2c10) (bytevector-ieee-double-native-ref . uy2c0f) (bytevector-fill! . uy2c0e) (bytevector-copy! . uy2c0d) (bytevector-copy . uy2c0c) (bytevector->uint-list . uy2c0b) (bytevector->u8-list . uy2c0a) (bytevector->sint-list . uy2c09) (no-nans-violation? . uy2c08) (no-infinities-violation? . uy2c07) (make-no-nans-violation . uy2c06) (make-no-infinities-violation . uy2c05) (real->flonum . uy2c04) (flzero? . uy2c03) (fltruncate . uy2c02) (fltan . uy2c01) (flsqrt . uy2c00) (flsin . uy2bff) (flround . uy2bfe) (flpositive? . uy2bfd) (flonum? . uy2bfc) (flodd? . uy2bfb) (flnumerator . uy2bfa) (flnegative? . uy2bf9) (flnan? . uy2bf8) (flmod0 . uy2bf7) (flmod . uy2bf6) (flmin . uy2bf5) (flmax . uy2bf4) (fllog . uy2bf3) (flinteger? . uy2bf2) (flinfinite? . uy2bf1) (flfloor . uy2bf0) (flfinite? . uy2bef) (flexpt . uy2bee) (flexp . uy2bed) (fleven? . uy2bec) (fldiv0-and-mod0 . uy2beb) (fldiv0 . uy2bea) (fldiv-and-mod . uy2be9) (fldiv . uy2be8) (fldenominator . uy2be7) (flcos . uy2be6) (flceiling . uy2be5) (flatan . uy2be4) (flasin . uy2be3) (flacos . uy2be2) (flabs . uy2be1) (fl>? . uy2be0) (fl>=? . uy2bdf) (fl=? . uy2bde) (fl<? . uy2bdd) (fl<=? . uy2bdc) (fl/ . uy2bdb) (fl- . uy2bda) (fl+ . uy2bd9) (fl* . uy2bd8) (fixnum->flonum . uy2bd7) (fxzero? . uy2bd6) (fxxor . uy2bd5) (fxrotate-bit-field . uy2bd4) (fxreverse-bit-field . uy2bd3) (fxpositive? . uy2bd2) (fxodd? . uy2bd1) (fxnot . uy2bd0) (fxnegative? . uy2bcf) (fxmod0 . uy2bce) (fxmod . uy2bcd) (fxmin . uy2bcc) (fxmax . uy2bcb) (fxlength . uy2bca) (fxior . uy2bc9) (fxif . uy2bc8) (fxfirst-bit-set . uy2bc7) (fxeven? . uy2bc6) (fxdiv0-and-mod0 . uy2bc5) (fxdiv0 . uy2bc4) (fxdiv-and-mod . uy2bc3) (fxdiv . uy2bc2) (fxcopy-bit-field . uy2bc1) (fxcopy-bit . uy2bc0) (fxbit-set? . uy2bbf) (fxbit-field . uy2bbe) (fxbit-count . uy2bbd) (fxarithmetic-shift-right . uy2bbc) (fxarithmetic-shift-left . uy2bbb) (fxarithmetic-shift . uy2bba) (fxand . uy2bb9) (fx>? . uy2bb8) (fx>=? . uy2bb7) (fx=? . uy2bb6) (fx<? . uy2bb5) (fx<=? . uy2bb4) (fx-/carry . uy2bb3) (fx- . uy2bb2) (fx+/carry . uy2bb1) (fx+ . uy2bb0) (fx*/carry . uy2baf) (fx* . uy2bae) (greatest-fixnum . uy2bad) (least-fixnum . uy2bac) (fixnum-width . uy2bab) (fixnum? . uy2baa) (bitwise-rotate-bit-field . uy2ba9) (bitwise-reverse-bit-field . uy2ba8) (bitwise-length . uy2ba7) (bitwise-if . uy2ba6) (bitwise-first-bit-set . uy2ba5) (bitwise-copy-bit-field . uy2ba4) (bitwise-copy-bit . uy2ba3) (bitwise-bit-set? . uy2ba2) (bitwise-bit-field . uy2ba1) (bitwise-bit-count . uy2ba0) (bitwise-xor . uy2b9f) (bitwise-ior . uy2b9e) (bitwise-and . uy2b9d) (bitwise-not . uy2b9c) (bitwise-arithmetic-shift-right . uy2b9b) (bitwise-arithmetic-shift-left . uy2b9a) (bitwise-arithmetic-shift . uy2b99) (zero? . uy2b98) (vector? . uy2b97) (vector-set! . uy2b96) (vector-ref . uy2b95) (vector-map . uy2b94) (vector-length . uy2b93) (vector-for-each . uy2b92) (vector-fill! . uy2b91) (vector->list . uy2b90) (vector . uy2b8f) (values . uy2b8e) (truncate . uy2b8d) (tan . uy2b8c) (symbol? . uy2b8b) (symbol=? . uy2b8a) (symbol->string . uy2b89) (substring . uy2b88) (string? . uy2b87) (string>? . uy2b86) (string>=? . uy2b85) (string=? . uy2b84) (string<? . uy2b83) (string<=? . uy2b82) (string-ref . uy2b81) (string-length . uy2b80) (string-for-each . uy2b7f) (string-copy . uy2b7e) (string-append . uy2b7d) (string->symbol . uy2b7c) (string->number . uy2b7b) (string->list . uy2b7a) (string . uy2b79) (sqrt . uy2b78) (sin . uy2b77) (round . uy2b76) (reverse . uy2b75) (real? . uy2b74) (real-valued? . uy2b73) (real-part . uy2b72) (rationalize . uy2b71) (rational? . uy2b70) (rational-valued? . uy2b6f) (procedure? . uy2b6e) (positive? . uy2b6d) (pair? . uy2b6c) (odd? . uy2b6b) (numerator . uy2b6a) (number? . uy2b69) (number->string . uy2b68) (null? . uy2b67) (not . uy2b66) (negative? . uy2b65) (nan? . uy2b64) (min . uy2b63) (max . uy2b62) (map . uy2b61) (make-vector . uy2b60) (make-string . uy2b5f) (make-rectangular . uy2b5e) (make-polar . uy2b5d) (magnitude . uy2b5c) (log . uy2b5b) (list? . uy2b5a) (list-tail . uy2b59) (list-ref . uy2b58) (list->vector . uy2b57) (list->string . uy2b56) (list . uy2b55) (length . uy2b54) (lcm . uy2b53) (integer? . uy2b52) (integer-valued? . uy2b51) (integer->char . uy2b50) (infinite? . uy2b4f) (inexact? . uy2b4e) (inexact . uy2b4d) (imag-part . uy2b4c) (gcd . uy2b4b) (for-each . uy2b4a) (floor . uy2b49) (finite? . uy2b48) (expt . uy2b47) (exp . uy2b46) (exact? . uy2b45) (exact-integer-sqrt . uy2b44) (exact . uy2b43) (even? . uy2b42) (error . uy2b41) (eqv? . uy2b40) (equal? . uy2b3f) (eq? . uy2b3e) (dynamic-wind . uy2b3d) (div0-and-mod0 . uy2b3c) (mod0 . uy2b3b) (div0 . uy2b3a) (div-and-mod . uy2b39) (mod . uy2b38) (div . uy2b37) (denominator . uy2b36) (cos . uy2b35) (cons . uy2b34) (complex? . uy2b33) (char? . uy2b32) (char>? . uy2b31) (char>=? . uy2b30) (char=? . uy2b2f) (char<? . uy2b2e) (char<=? . uy2b2d) (char->integer . uy2b2c) (ceiling . uy2b2b) (call-with-values . uy2b2a) (call/cc . uy2b29) (call-with-current-continuation . uy2b28) (cddddr . uy2b27) (cdddar . uy2b26) (cddadr . uy2b25) (cddaar . uy2b24) (cdaddr . uy2b23) (cdadar . uy2b22) (cdaadr . uy2b21) (cdaaar . uy2b20) (cadddr . uy2b1f) (caddar . uy2b1e) (cadadr . uy2b1d) (cadaar . uy2b1c) (caaddr . uy2b1b) (caadar . uy2b1a) (caaadr . uy2b19) (caaaar . uy2b18) (cdddr . uy2b17) (cddar . uy2b16) (cdadr . uy2b15) (cdaar . uy2b14) (caddr . uy2b13) (cadar . uy2b12) (caadr . uy2b11) (caaar . uy2b10) (cddr . uy2b0f) (cdar . uy2b0e) (cadr . uy2b0d) (caar . uy2b0c) (cdr . uy2b0b) (car . uy2b0a) (boolean? . uy2b09) (boolean=? . uy2b08) (atan . uy2b07) (assertion-violation . uy2b06) (asin . uy2b05) (apply . uy2b04) (append . uy2b03) (angle . uy2b02) (acos . uy2b01) (abs . uy2b00) (/ . uy2aff) (* . uy2afe) (- . uy2afd) (+ . uy2afc) (>= . uy2afb) (> . uy2afa) (= . uy2af9) (<= . uy2af8) (< . uy2af7) (&no-nans . uy2af5) (&no-infinities . uy2af4) (&i/o-encoding . uy2af3) (&i/o-decoding . uy2af2) (&i/o-port . uy2af1) (&i/o-file-does-not-exist . uy2af0) (&i/o-file-already-exists . uy2aef) (&i/o-file-is-read-only . uy2aee) (&i/o-file-protection . uy2aed) (&i/o-filename . uy2aec) (&i/o-invalid-position . uy2aeb) (&i/o-write . uy2aea) (&i/o-read . uy2ae9) (&i/o . uy2ae8) (&undefined . uy2ae7) (&syntax . uy2ae6) (&lexical . uy2ae5) (&implementation-restriction . uy2ae4) (&non-continuable . uy2ae3) (&who . uy2ae2) (&irritants . uy2ae1) (&assertion . uy2ae0) (&violation . uy2adf) (&error . uy2ade) (&serious . uy2add) (&warning . uy2adc) (&message . uy2adb) (&condition . uy2ada) (define-condition-type . uy2ad9) (define-enumeration . uy2ad8) (define-record-type . uy2ad7) (parent-rtd . uy2ad6) (nongenerative . uy2ad5) (opaque . uy2ad4) (sealed . uy2ad3) (protocol . uy2ad2) (parent . uy2ad1) (immutable . uy2ad0) (mutable . uy2acf) (fields . uy2ace) (error-handling-mode . uy2acd) (file-options . uy2acc) (buffer-mode . uy2acb) (eol-style . uy2aca) (guard . uy2ac9) (unsyntax-splicing . uy2ac6) (unsyntax . uy2ac5) (unquote-splicing . uy2ac4) (unquote . uy2ac3) (_ . uy2ac2) (else . uy2ac1) (=> . uy2ac0) (... . uy2abf) (assert . uy2abe) (endianness . uy2abd) (do . uy2aba) (cond . uy2ab9) (let* . uy2ab8) (let*-values . uy2ab7) (let-values . uy2ab6) (identifier-syntax . uy2ab5) (with-syntax . uy2ab4) (quasisyntax . uy2ab3) (quasiquote . uy2ab2) (syntax-rules . uy2ab1) (record-constructor-descriptor . uy2aae) (record-type-descriptor . uy2aad) (case . uy2aac) (unless . uy2aaa) (when . uy2aa9) (or . uy2aa8) (and . uy2aa7) (if . uy2aa6) (let . uy2aa5) (letrec* . uy2aa4) (letrec . uy2aa3) (case-lambda . uy2aa1) (lambda . uy2aa0) (syntax . uy2a9f) (syntax-case . uy2a9e) (quote . uy2a9d) (letrec-syntax . uy2a9b) (let-syntax . uy2a9a) (set! . uy2a99) (begin . uy2a97) (define-syntax . uy2a95) (define . uy2a94)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e52 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . uye4b) (quotient . uy2c9d) (null-environment . uye49) (remainder . uy2c9c) (modulo . uy2c9b) (inexact->exact . uy2c9a) (force . uy2c99) (exact->inexact . uy2c98) (make-promise . uy2c97) (delay . uy2abc)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e53 '(rnrs control) '(6) '() '() '() '((do . uy2aba) (unless . uy2aaa) (when . uy2aa9) (case-lambda . uy2aa1)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e54 '(rnrs eval) '(6) '() '() '() '((eval . uye4f) (environment . uye47)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e55 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . uy2c93) (set-car! . uy2c92)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e56 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . uy2c95) (string-set! . uy2c94)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e57 '(rnrs programs) '(6) '() '() '() '((exit . uy2c96) (command-line . uy2928)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e58 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . uybba) (identifier? . uye71) (generate-temporaries . uye5d) (free-identifier=? . uye5f) (syntax->datum . uye75) (datum->syntax . uye73) (bound-identifier=? . uye61) (syntax-violation . uye6f) (unsyntax-splicing . uy2ac6) (unsyntax . uy2ac5) (_ . uy2ac2) (... . uy2abf) (with-syntax . uy2ab4) (quasisyntax . uy2ab3) (syntax . uy2a9f) (syntax-case . uy2a9e)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e59 '(rnrs files) '(6) '() '() '() '((delete-file . uy2d22) (file-exists? . uy2d21) (make-i/o-write-error . uy2ccf) (make-i/o-read-error . uy2cce) (make-i/o-port-error . uy2ccd) (make-i/o-invalid-position-error . uy2ccc) (make-i/o-filename-error . uy2ccb) (make-i/o-file-protection-error . uy2cca) (make-i/o-file-is-read-only-error . uy2cc9) (make-i/o-file-does-not-exist-error . uy2cc8) (make-i/o-file-already-exists-error . uy2cc7) (make-i/o-error . uy2cc6) (i/o-write-error? . uy2cba) (i/o-read-error? . uy2cb9) (i/o-port-error? . uy2cb8) (i/o-invalid-position-error? . uy2cb7) (i/o-filename-error? . uy2cb6) (i/o-file-protection-error? . uy2cb5) (i/o-file-is-read-only-error? . uy2cb4) (i/o-file-does-not-exist-error? . uy2cb3) (i/o-file-already-exists-error? . uy2cb2) (i/o-error? . uy2cb1) (i/o-error-position . uy2cb0) (i/o-error-port . uy2caf) (i/o-error-filename . uy2cae) (&i/o-port . uy2af1) (&i/o-file-does-not-exist . uy2af0) (&i/o-file-already-exists . uy2aef) (&i/o-file-is-read-only . uy2aee) (&i/o-file-protection . uy2aed) (&i/o-filename . uy2aec) (&i/o-invalid-position . uy2aeb) (&i/o-write . uy2aea) (&i/o-read . uy2ae9) (&i/o . uy2ae8)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e5a '(rnrs sorting) '(6) '() '() '() '((vector-sort! . uy2d20) (vector-sort . uy2d1f) (list-sort . uy2d1e)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e5b '(rnrs base) '(6) '() '() '() '((zero? . uy2b98) (vector? . uy2b97) (vector-set! . uy2b96) (vector-ref . uy2b95) (vector-map . uy2b94) (vector-length . uy2b93) (vector-for-each . uy2b92) (vector-fill! . uy2b91) (vector->list . uy2b90) (vector . uy2b8f) (values . uy2b8e) (truncate . uy2b8d) (tan . uy2b8c) (symbol? . uy2b8b) (symbol=? . uy2b8a) (symbol->string . uy2b89) (substring . uy2b88) (string? . uy2b87) (string>? . uy2b86) (string>=? . uy2b85) (string=? . uy2b84) (string<? . uy2b83) (string<=? . uy2b82) (string-ref . uy2b81) (string-length . uy2b80) (string-for-each . uy2b7f) (string-copy . uy2b7e) (string-append . uy2b7d) (string->symbol . uy2b7c) (string->number . uy2b7b) (string->list . uy2b7a) (string . uy2b79) (sqrt . uy2b78) (sin . uy2b77) (round . uy2b76) (reverse . uy2b75) (real? . uy2b74) (real-valued? . uy2b73) (real-part . uy2b72) (rationalize . uy2b71) (rational? . uy2b70) (rational-valued? . uy2b6f) (procedure? . uy2b6e) (positive? . uy2b6d) (pair? . uy2b6c) (odd? . uy2b6b) (numerator . uy2b6a) (number? . uy2b69) (number->string . uy2b68) (null? . uy2b67) (not . uy2b66) (negative? . uy2b65) (nan? . uy2b64) (min . uy2b63) (max . uy2b62) (map . uy2b61) (make-vector . uy2b60) (make-string . uy2b5f) (make-rectangular . uy2b5e) (make-polar . uy2b5d) (magnitude . uy2b5c) (log . uy2b5b) (list? . uy2b5a) (list-tail . uy2b59) (list-ref . uy2b58) (list->vector . uy2b57) (list->string . uy2b56) (list . uy2b55) (length . uy2b54) (lcm . uy2b53) (integer? . uy2b52) (integer-valued? . uy2b51) (integer->char . uy2b50) (infinite? . uy2b4f) (inexact? . uy2b4e) (inexact . uy2b4d) (imag-part . uy2b4c) (gcd . uy2b4b) (for-each . uy2b4a) (floor . uy2b49) (finite? . uy2b48) (expt . uy2b47) (exp . uy2b46) (exact? . uy2b45) (exact-integer-sqrt . uy2b44) (exact . uy2b43) (even? . uy2b42) (error . uy2b41) (eqv? . uy2b40) (equal? . uy2b3f) (eq? . uy2b3e) (dynamic-wind . uy2b3d) (div0-and-mod0 . uy2b3c) (mod0 . uy2b3b) (div0 . uy2b3a) (div-and-mod . uy2b39) (mod . uy2b38) (div . uy2b37) (denominator . uy2b36) (cos . uy2b35) (cons . uy2b34) (complex? . uy2b33) (char? . uy2b32) (char>? . uy2b31) (char>=? . uy2b30) (char=? . uy2b2f) (char<? . uy2b2e) (char<=? . uy2b2d) (char->integer . uy2b2c) (ceiling . uy2b2b) (call-with-values . uy2b2a) (call/cc . uy2b29) (call-with-current-continuation . uy2b28) (cddddr . uy2b27) (cdddar . uy2b26) (cddadr . uy2b25) (cddaar . uy2b24) (cdaddr . uy2b23) (cdadar . uy2b22) (cdaadr . uy2b21) (cdaaar . uy2b20) (cadddr . uy2b1f) (caddar . uy2b1e) (cadadr . uy2b1d) (cadaar . uy2b1c) (caaddr . uy2b1b) (caadar . uy2b1a) (caaadr . uy2b19) (caaaar . uy2b18) (cdddr . uy2b17) (cddar . uy2b16) (cdadr . uy2b15) (cdaar . uy2b14) (caddr . uy2b13) (cadar . uy2b12) (caadr . uy2b11) (caaar . uy2b10) (cddr . uy2b0f) (cdar . uy2b0e) (cadr . uy2b0d) (caar . uy2b0c) (cdr . uy2b0b) (car . uy2b0a) (boolean? . uy2b09) (boolean=? . uy2b08) (atan . uy2b07) (assertion-violation . uy2b06) (asin . uy2b05) (apply . uy2b04) (append . uy2b03) (angle . uy2b02) (acos . uy2b01) (abs . uy2b00) (/ . uy2aff) (* . uy2afe) (- . uy2afd) (+ . uy2afc) (>= . uy2afb) (> . uy2afa) (= . uy2af9) (<= . uy2af8) (< . uy2af7) (unquote-splicing . uy2ac4) (unquote . uy2ac3) (_ . uy2ac2) (else . uy2ac1) (=> . uy2ac0) (... . uy2abf) (assert . uy2abe) (cond . uy2ab9) (let* . uy2ab8) (let*-values . uy2ab7) (let-values . uy2ab6) (identifier-syntax . uy2ab5) (quasiquote . uy2ab2) (syntax-rules . uy2ab1) (case . uy2aac) (or . uy2aa8) (and . uy2aa7) (if . uy2aa6) (let . uy2aa5) (letrec* . uy2aa4) (letrec . uy2aa3) (lambda . uy2aa0) (quote . uy2a9d) (letrec-syntax . uy2a9b) (let-syntax . uy2a9a) (set! . uy2a99) (begin . uy2a97) (define-syntax . uy2a95) (define . uy2a94)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e5c '(rnrs lists) '(6) '() '() '() '((remove . uy2c91) (remv . uy2c90) (remp . uy2c8f) (remq . uy2c8e) (partition . uy2c8d) (memv . uy2c8c) (memq . uy2c8b) (memp . uy2c8a) (member . uy2c89) (exists . uy2c88) (for-all . uy2c87) (fold-right . uy2c86) (fold-left . uy2c85) (find . uy2c84) (filter . uy2c83) (cons* . uy2c82) (assv . uy2c81) (assq . uy2c80) (assp . uy2c7f) (assoc . uy2c7e)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e5d '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . uy2d08) (call-with-input-file . uy2d07) (write-char . uy2d06) (write . uy2d05) (with-output-to-file . uy2d04) (with-input-from-file . uy2d03) (read-char . uy2d02) (read . uy2d01) (peek-char . uy2d00) (open-output-file . uy2cff) (open-input-file . uy2cfe) (newline . uy2cfd) (display . uy2cfc) (close-output-port . uy2cfb) (close-input-port . uy2cfa) (eof-object? . uy2cf9) (eof-object . uy2cf8) (current-error-port . uy2cf7) (current-output-port . uy2cf6) (current-input-port . uy2cf5) (output-port? . uy2cf4) (input-port? . uy2cf3) (make-i/o-write-error . uy2ccf) (make-i/o-read-error . uy2cce) (make-i/o-port-error . uy2ccd) (make-i/o-invalid-position-error . uy2ccc) (make-i/o-filename-error . uy2ccb) (make-i/o-file-protection-error . uy2cca) (make-i/o-file-is-read-only-error . uy2cc9) (make-i/o-file-does-not-exist-error . uy2cc8) (make-i/o-file-already-exists-error . uy2cc7) (make-i/o-error . uy2cc6) (i/o-write-error? . uy2cba) (i/o-read-error? . uy2cb9) (i/o-port-error? . uy2cb8) (i/o-invalid-position-error? . uy2cb7) (i/o-filename-error? . uy2cb6) (i/o-file-protection-error? . uy2cb5) (i/o-file-is-read-only-error? . uy2cb4) (i/o-file-does-not-exist-error? . uy2cb3) (i/o-file-already-exists-error? . uy2cb2) (i/o-error? . uy2cb1) (i/o-error-position . uy2cb0) (i/o-error-port . uy2caf) (i/o-error-filename . uy2cae) (&i/o-port . uy2af1) (&i/o-file-does-not-exist . uy2af0) (&i/o-file-already-exists . uy2aef) (&i/o-file-is-read-only . uy2aee) (&i/o-file-protection . uy2aed) (&i/o-filename . uy2aec) (&i/o-invalid-position . uy2aeb) (&i/o-write . uy2aea) (&i/o-read . uy2ae9) (&i/o . uy2ae8)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e5e '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . uy2cbd) (utf32->string . uy2c43) (utf16->string . uy2c42) (utf8->string . uy2c41) (uint-list->bytevector . uy2c40) (u8-list->bytevector . uy2c3f) (string->utf8 . uy2c3e) (string->utf32 . uy2c3d) (string->utf16 . uy2c3c) (sint-list->bytevector . uy2c3b) (native-endianness . uy2c3a) (bytevector? . uy2c39) (bytevector=? . uy2c38) (bytevector-uint-set! . uy2c37) (bytevector-uint-ref . uy2c36) (bytevector-u8-set! . uy2c35) (bytevector-u8-ref . uy2c34) (bytevector-u64-set! . uy2c33) (bytevector-u64-ref . uy2c32) (bytevector-u64-native-set! . uy2c31) (bytevector-u64-native-ref . uy2c30) (bytevector-u32-set! . uy2c2f) (bytevector-u32-ref . uy2c2e) (bytevector-u32-native-set! . uy2c2d) (bytevector-u32-native-ref . uy2c2c) (bytevector-u16-set! . uy2c2b) (bytevector-u16-ref . uy2c2a) (bytevector-u16-native-set! . uy2c29) (bytevector-u16-native-ref . uy2c28) (bytevector-sint-set! . uy2c27) (bytevector-sint-ref . uy2c26) (bytevector-s8-set! . uy2c25) (bytevector-s8-ref . uy2c24) (bytevector-s64-set! . uy2c23) (bytevector-s64-ref . uy2c22) (bytevector-s64-native-set! . uy2c21) (bytevector-s64-native-ref . uy2c20) (bytevector-s32-set! . uy2c1f) (bytevector-s32-ref . uy2c1e) (bytevector-s32-native-set! . uy2c1d) (bytevector-s32-native-ref . uy2c1c) (bytevector-s16-set! . uy2c1b) (bytevector-s16-ref . uy2c1a) (bytevector-s16-native-set! . uy2c19) (bytevector-s16-native-ref . uy2c18) (bytevector-length . uy2c17) (bytevector-ieee-single-ref . uy2c16) (bytevector-ieee-single-set! . uy2c15) (bytevector-ieee-single-native-set! . uy2c14) (bytevector-ieee-single-native-ref . uy2c13) (bytevector-ieee-double-set! . uy2c12) (bytevector-ieee-double-ref . uy2c11) (bytevector-ieee-double-native-set! . uy2c10) (bytevector-ieee-double-native-ref . uy2c0f) (bytevector-fill! . uy2c0e) (bytevector-copy! . uy2c0d) (bytevector-copy . uy2c0c) (bytevector->uint-list . uy2c0b) (bytevector->u8-list . uy2c0a) (bytevector->sint-list . uy2c09) (endianness . uy2abd)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e5f '(rnrs unicode) '(6) '() '() '() '((string-upcase . uy2d50) (string-titlecase . uy2d4f) (string-normalize-nfkd . uy2d4e) (string-normalize-nfkc . uy2d4d) (string-normalize-nfd . uy2d4c) (string-normalize-nfc . uy2d4b) (string-foldcase . uy2d4a) (string-downcase . uy2d49) (string-ci>? . uy2d48) (string-ci>=? . uy2d47) (string-ci=? . uy2d46) (string-ci<? . uy2d45) (string-ci<=? . uy2d44) (char-whitespace? . uy2d43) (char-upper-case? . uy2d42) (char-title-case? . uy2d41) (char-numeric? . uy2d40) (char-lower-case? . uy2d3f) (char-general-category . uy2d3e) (char-upcase . uy2d3d) (char-titlecase . uy2d3c) (char-foldcase . uy2d3b) (char-downcase . uy2d3a) (char-ci>? . uy2d39) (char-ci>=? . uy2d38) (char-ci=? . uy2d37) (char-ci<? . uy2d36) (char-ci<=? . uy2d35) (char-alphabetic? . uy2d34)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e60 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . uy2c77) (raise-continuable . uy2c76) (raise . uy2c75) (guard . uy2ac9) (else . uy2ac1) (=> . uy2ac0)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e61 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . uy2ba9) (bitwise-reverse-bit-field . uy2ba8) (bitwise-length . uy2ba7) (bitwise-if . uy2ba6) (bitwise-first-bit-set . uy2ba5) (bitwise-copy-bit-field . uy2ba4) (bitwise-copy-bit . uy2ba3) (bitwise-bit-set? . uy2ba2) (bitwise-bit-field . uy2ba1) (bitwise-bit-count . uy2ba0) (bitwise-xor . uy2b9f) (bitwise-ior . uy2b9e) (bitwise-and . uy2b9d) (bitwise-not . uy2b9c) (bitwise-arithmetic-shift-right . uy2b9b) (bitwise-arithmetic-shift-left . uy2b9a) (bitwise-arithmetic-shift . uy2b99)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e62 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . uy2bd6) (fxxor . uy2bd5) (fxrotate-bit-field . uy2bd4) (fxreverse-bit-field . uy2bd3) (fxpositive? . uy2bd2) (fxodd? . uy2bd1) (fxnot . uy2bd0) (fxnegative? . uy2bcf) (fxmod0 . uy2bce) (fxmod . uy2bcd) (fxmin . uy2bcc) (fxmax . uy2bcb) (fxlength . uy2bca) (fxior . uy2bc9) (fxif . uy2bc8) (fxfirst-bit-set . uy2bc7) (fxeven? . uy2bc6) (fxdiv0-and-mod0 . uy2bc5) (fxdiv0 . uy2bc4) (fxdiv-and-mod . uy2bc3) (fxdiv . uy2bc2) (fxcopy-bit-field . uy2bc1) (fxcopy-bit . uy2bc0) (fxbit-set? . uy2bbf) (fxbit-field . uy2bbe) (fxbit-count . uy2bbd) (fxarithmetic-shift-right . uy2bbc) (fxarithmetic-shift-left . uy2bbb) (fxarithmetic-shift . uy2bba) (fxand . uy2bb9) (fx>? . uy2bb8) (fx>=? . uy2bb7) (fx=? . uy2bb6) (fx<? . uy2bb5) (fx<=? . uy2bb4) (fx-/carry . uy2bb3) (fx- . uy2bb2) (fx+/carry . uy2bb1) (fx+ . uy2bb0) (fx*/carry . uy2baf) (fx* . uy2bae) (greatest-fixnum . uy2bad) (least-fixnum . uy2bac) (fixnum-width . uy2bab) (fixnum? . uy2baa)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e63 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . uy2c08) (no-infinities-violation? . uy2c07) (make-no-nans-violation . uy2c06) (make-no-infinities-violation . uy2c05) (real->flonum . uy2c04) (flzero? . uy2c03) (fltruncate . uy2c02) (fltan . uy2c01) (flsqrt . uy2c00) (flsin . uy2bff) (flround . uy2bfe) (flpositive? . uy2bfd) (flonum? . uy2bfc) (flodd? . uy2bfb) (flnumerator . uy2bfa) (flnegative? . uy2bf9) (flnan? . uy2bf8) (flmod0 . uy2bf7) (flmod . uy2bf6) (flmin . uy2bf5) (flmax . uy2bf4) (fllog . uy2bf3) (flinteger? . uy2bf2) (flinfinite? . uy2bf1) (flfloor . uy2bf0) (flfinite? . uy2bef) (flexpt . uy2bee) (flexp . uy2bed) (fleven? . uy2bec) (fldiv0-and-mod0 . uy2beb) (fldiv0 . uy2bea) (fldiv-and-mod . uy2be9) (fldiv . uy2be8) (fldenominator . uy2be7) (flcos . uy2be6) (flceiling . uy2be5) (flatan . uy2be4) (flasin . uy2be3) (flacos . uy2be2) (flabs . uy2be1) (fl>? . uy2be0) (fl>=? . uy2bdf) (fl=? . uy2bde) (fl<? . uy2bdd) (fl<=? . uy2bdc) (fl/ . uy2bdb) (fl- . uy2bda) (fl+ . uy2bd9) (fl* . uy2bd8) (fixnum->flonum . uy2bd7) (&no-nans . uy2af5) (&no-infinities . uy2af4)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e64 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . uy2d1d) (string-ci-hash . uy2d1c) (string-hash . uy2d1b) (equal-hash . uy2d1a) (hashtable-equivalence-function . uy2d19) (make-hashtable . uy2d18) (hashtable-hash-function . uy2d17) (make-eqv-hashtable . uy2d16) (make-eq-hashtable . uy2d15) (hashtable? . uy2d14) (hashtable-update! . uy2d13) (hashtable-size . uy2d12) (hashtable-set! . uy2d11) (hashtable-ref . uy2d10) (hashtable-mutable? . uy2d0f) (hashtable-keys . uy2d0e) (hashtable-entries . uy2d0d) (hashtable-delete! . uy2d0c) (hashtable-copy . uy2d0b) (hashtable-contains? . uy2d0a) (hashtable-clear! . uy2d09)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e65 '(rnrs io ports) '(6) '() '() '() '((eof-object? . uy2cf9) (eof-object . uy2cf8) (current-error-port . uy2cf7) (current-output-port . uy2cf6) (current-input-port . uy2cf5) (output-port? . uy2cf4) (input-port? . uy2cf3) (utf-8-codec . uy2cf2) (utf-16-codec . uy2cf1) (transcoder-error-handling-mode . uy2cf0) (transcoder-eol-style . uy2cef) (transcoder-codec . uy2cee) (transcoded-port . uy2ced) (textual-port? . uy2cec) (string->bytevector . uy2ceb) (standard-output-port . uy2cea) (standard-input-port . uy2ce9) (standard-error-port . uy2ce8) (set-port-position! . uy2ce7) (put-u8 . uy2ce6) (put-string . uy2ce5) (put-datum . uy2ce4) (put-char . uy2ce3) (put-bytevector . uy2ce2) (port? . uy2ce1) (port-transcoder . uy2ce0) (port-position . uy2cdf) (port-has-set-port-position!? . uy2cde) (port-has-port-position? . uy2cdd) (port-eof? . uy2cdc) (output-port-buffer-mode . uy2cdb) (open-string-output-port . uy2cda) (open-string-input-port . uy2cd9) (open-file-output-port . uy2cd8) (open-file-input/output-port . uy2cd7) (open-file-input-port . uy2cd6) (open-bytevector-output-port . uy2cd5) (open-bytevector-input-port . uy2cd4) (native-transcoder . uy2cd3) (native-eol-style . uy2cd2) (make-transcoder . uy2cd1) (latin-1-codec . uy2cd0) (make-i/o-write-error . uy2ccf) (make-i/o-read-error . uy2cce) (make-i/o-port-error . uy2ccd) (make-i/o-invalid-position-error . uy2ccc) (make-i/o-filename-error . uy2ccb) (make-i/o-file-protection-error . uy2cca) (make-i/o-file-is-read-only-error . uy2cc9) (make-i/o-file-does-not-exist-error . uy2cc8) (make-i/o-file-already-exists-error . uy2cc7) (make-i/o-error . uy2cc6) (make-i/o-encoding-error . uy2cc5) (make-i/o-decoding-error . uy2cc4) (make-custom-textual-output-port . uy2cc3) (make-custom-textual-input/output-port . uy2cc2) (make-custom-textual-input-port . uy2cc1) (make-custom-binary-output-port . uy2cc0) (make-custom-binary-input/output-port . uy2cbf) (make-custom-binary-input-port . uy2cbe) (lookahead-u8 . uy2cbc) (lookahead-char . uy2cbb) (i/o-write-error? . uy2cba) (i/o-read-error? . uy2cb9) (i/o-port-error? . uy2cb8) (i/o-invalid-position-error? . uy2cb7) (i/o-filename-error? . uy2cb6) (i/o-file-protection-error? . uy2cb5) (i/o-file-is-read-only-error? . uy2cb4) (i/o-file-does-not-exist-error? . uy2cb3) (i/o-file-already-exists-error? . uy2cb2) (i/o-error? . uy2cb1) (i/o-error-position . uy2cb0) (i/o-error-port . uy2caf) (i/o-error-filename . uy2cae) (i/o-encoding-error? . uy2cad) (i/o-encoding-error-char . uy2cac) (i/o-decoding-error? . uy2cab) (get-u8 . uy2caa) (get-string-n! . uy2ca9) (get-string-n . uy2ca8) (get-string-all . uy2ca7) (get-line . uy2ca6) (get-datum . uy2ca5) (get-char . uy2ca4) (get-bytevector-some . uy2ca3) (get-bytevector-n! . uy2ca2) (get-bytevector-n . uy2ca1) (get-bytevector-all . uy2ca0) (flush-output-port . uy2c9f) (close-port . uy2c9e) (call-with-string-output-port . uy2c7d) (call-with-port . uy2c7c) (call-with-bytevector-output-port . uy2c7b) (bytevector->string . uy2c7a) (buffer-mode? . uy2c79) (binary-port? . uy2c78) (&i/o-encoding . uy2af3) (&i/o-decoding . uy2af2) (&i/o-port . uy2af1) (&i/o-file-does-not-exist . uy2af0) (&i/o-file-already-exists . uy2aef) (&i/o-file-is-read-only . uy2aee) (&i/o-file-protection . uy2aed) (&i/o-filename . uy2aec) (&i/o-invalid-position . uy2aeb) (&i/o-write . uy2aea) (&i/o-read . uy2ae9) (&i/o . uy2ae8) (error-handling-mode . uy2acd) (file-options . uy2acc) (buffer-mode . uy2acb) (eol-style . uy2aca)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e66 '(rnrs enums) '(6) '() '() '() '((make-enumeration . uy2c74) (enum-set=? . uy2c73) (enum-set-universe . uy2c72) (enum-set-union . uy2c71) (enum-set-subset? . uy2c70) (enum-set-projection . uy2c6f) (enum-set-member? . uy2c6e) (enum-set-intersection . uy2c6d) (enum-set-indexer . uy2c6c) (enum-set-difference . uy2c6b) (enum-set-constructor . uy2c6a) (enum-set-complement . uy2c69) (enum-set->list . uy2c68) (define-enumeration . uy2ad8)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e67 '(rnrs conditions) '(6) '() '() '() '((who-condition? . uy2c67) (warning? . uy2c66) (violation? . uy2c65) (undefined-violation? . uy2c64) (syntax-violation? . uy2c63) (syntax-violation-subform . uy2c62) (syntax-violation-form . uy2c61) (syntax-violation . uye6f) (simple-conditions . uy2c60) (serious-condition? . uy2c5f) (non-continuable-violation? . uy2c5e) (message-condition? . uy2c5d) (make-who-condition . uy2c5c) (make-warning . uy2c5b) (make-violation . uy2c5a) (make-undefined-violation . uy2c59) (make-syntax-violation . uy2c58) (make-serious-condition . uy2c57) (make-non-continuable-violation . uy2c56) (make-message-condition . uy2c55) (make-lexical-violation . uy2c54) (make-irritants-condition . uy2c53) (make-implementation-restriction-violation . uy2c52) (make-error . uy2c51) (make-assertion-violation . uy2c50) (lexical-violation? . uy2c4f) (irritants-condition? . uy2c4e) (implementation-restriction-violation? . uy2c4d) (error? . uy2c4c) (condition-who . uy2c4b) (condition-predicate . uy2c4a) (condition-message . uy2c49) (condition-irritants . uy2c48) (condition-accessor . uy2c47) (condition . uy2c46) (assertion-violation? . uy2c45) (condition? . uy2c44) (&undefined . uy2ae7) (&syntax . uy2ae6) (&lexical . uy2ae5) (&implementation-restriction . uy2ae4) (&non-continuable . uy2ae3) (&who . uy2ae2) (&irritants . uy2ae1) (&assertion . uy2ae0) (&violation . uy2adf) (&error . uy2ade) (&serious . uy2add) (&warning . uy2adc) (&message . uy2adb) (&condition . uy2ada) (define-condition-type . uy2ad9)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e68 '(rnrs records inspection) '(6) '() '() '() '((record? . uy2d2c) (record-type-uid . uy2d2b) (record-type-sealed? . uy2d2a) (record-type-parent . uy2d29) (record-type-opaque? . uy2d28) (record-type-name . uy2d27) (record-type-generative? . uy2d26) (record-type-field-names . uy2d25) (record-rtd . uy2d24) (record-field-mutable? . uy2d23)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e69 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . uy2d33) (record-predicate . uy2d32) (record-mutator . uy2d31) (record-constructor . uy2d30) (record-accessor . uy2d2f) (make-record-type-descriptor . uy2d2e) (make-record-constructor-descriptor . uy2d2d)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e6a '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . uy2ad7) (parent-rtd . uy2ad6) (nongenerative . uy2ad5) (opaque . uy2ad4) (sealed . uy2ad3) (protocol . uy2ad2) (parent . uy2ad1) (immutable . uy2ad0) (mutable . uy2acf) (fields . uy2ace) (record-constructor-descriptor . uy2aae) (record-type-descriptor . uy2aad)) '() values values '#f '#f '#t '#f) (uy9a3@uy7ef@install-library 'uy2e6b '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . uy2e4b) (&no-nans-rtd . uy2e4a) (&no-infinities-rcd . uy2e49) (&no-infinities-rtd . uy2e48) (&i/o-encoding-rcd . uy2e47) (&i/o-encoding-rtd . uy2e46) (&i/o-decoding-rcd . uy2e45) (&i/o-decoding-rtd . uy2e44) (&i/o-port-rcd . uy2e43) (&i/o-port-rtd . uy2e42) (&i/o-file-does-not-exist-rcd . uy2e41) (&i/o-file-does-not-exist-rtd . uy2e40) (&i/o-file-already-exists-rcd . uy2e3f) (&i/o-file-already-exists-rtd . uy2e3e) (&i/o-file-is-read-only-rcd . uy2e3d) (&i/o-file-is-read-only-rtd . uy2e3c) (&i/o-file-protection-rcd . uy2e3b) (&i/o-file-protection-rtd . uy2e3a) (&i/o-filename-rcd . uy2e39) (&i/o-filename-rtd . uy2e38) (&i/o-invalid-position-rcd . uy2e37) (&i/o-invalid-position-rtd . uy2e36) (&i/o-write-rcd . uy2e35) (&i/o-write-rtd . uy2e34) (&i/o-read-rcd . uy2e33) (&i/o-read-rtd . uy2e32) (&i/o-rcd . uy2e31) (&i/o-rtd . uy2e30) (&undefined-rcd . uy2e2f) (&undefined-rtd . uy2e2e) (&syntax-rcd . uy2e2d) (&syntax-rtd . uy2e2c) (&lexical-rcd . uy2e2b) (&lexical-rtd . uy2e2a) (&implementation-restriction-rcd . uy2e29) (&implementation-restriction-rtd . uy2e28) (&non-continuable-rcd . uy2e27) (&non-continuable-rtd . uy2e26) (&who-rcd . uy2e25) (&who-rtd . uy2e24) (&irritants-rcd . uy2e23) (&irritants-rtd . uy2e22) (&assertion-rcd . uy2e21) (&assertion-rtd . uy2e20) (&violation-rcd . uy2e1f) (&violation-rtd . uy2e1e) (&error-rcd . uy2e1d) (&error-rtd . uy2e1c) (&serious-rcd . uy2e1b) (&serious-rtd . uy2e1a) (&warning-rcd . uy2e19) (&warning-rtd . uy2e18) (&message-rcd . uy2e17) (&message-rtd . uy2e16) (&condition-rcd . uy2e15) (&condition-rtd . uy2e14) (syntax-error . uye6b) (syntax-dispatch . uyd8f) (pretty-print . uy2e13) (eval-core . uy2e12) (set-symbol-value! . uy2e11) (symbol-value . uy2e10) (gensym . uy2e0f) (void . uy2e0e) (load . uy292e) (interaction-environment . uye7d) (char-ready? . uy2e0d) (regexp? . uy2e0c) (read-line . uy2e0b) (gensym-prefix-set! . uy2e0a) (ungensym . uy2e09) (alist->eq-hash-table . uy2e08) (assoc-ref . uy2e07) (print . uy2e06) (format . uy2e05) (host-os . uy2e04) (library-path . uy7ce) (standard-library-path . uy2e03) (ssl-supported? . uy2e02) (ssl-socket? . uy2e01) (socket-sslize! . uy2e00) (%monapi-stream-read . uy2dff) (%monapi-stream-write . uy2dfe) (%monapi-stream-handle . uy2dfd) (%monapi-make-stream . uy2dfc) (%monapi-name-add! . uy2dfb) (%monapi-message-receive . uy2dfa) (%monapi-name-whereis . uy2df9) (%monapi-message-reply . uy2df8) (%monapi-message-send-receive . uy2df7) (%monapi-message-send . uy2df6) (process-terminate! . uy2df5) (process-list . uy2df4) (file-newer? . uy2df3) (stat-mtime . uy2df2) (write-to-file . uy2df1) (file->list . uy2df0) (file->string . uy2def) (digit->integer . uy2dee) (call-with-string-input-port . uy2ded) (call-with-string-io . uy2dec) (string-split . uy2deb) (bytevector-for-each . uy2dea) (string->regexp . uy2de9) (rxmatch . uy2de8) (regexp-replace-all . uy2de7) (hashtable-fold-left . uy2de6) (hashtable-for-each . uy2de5) (mosh-cache-dir . uy5b8) (%start-process . uy2de4) (%call-process . uy2de3) (local-tz-offset . uy2de2) (microseconds . uy2de1) (directory-list . uy2de0) (set-current-directory! . uy2ddf) (expand-path . uy2dde) (current-directory . uy2ddd) (%getpid . uy2ddc) (%waitpid . uy2ddb) (simple-struct-name . uy2dda) (simple-struct-set! . uy2dd9) (simple-struct-ref . uy2dd8) (make-simple-struct . uy2dd7) (simple-struct? . uy2dd6) (pointer-ref-c-int64 . uy2dd5) (pointer-ref-c-int32 . uy2dd4) (pointer-ref-c-int16 . uy2dd3) (pointer-ref-c-int8 . uy2dd2) (pointer-ref-c-uint64 . uy2dd1) (pointer-ref-c-uint32 . uy2dd0) (pointer-ref-c-uint16 . uy2dcf) (pointer-ref-c-uint8 . uy2dce) (pointer-set-c-uint64! . uy2dcd) (pointer-set-c-uint32! . uy2dcc) (pointer-set-c-uint16! . uy2dcb) (pointer-set-c-uint8! . uy2dca) (pointer-set-c-int64! . uy2dc9) (pointer-set-c-int32! . uy2dc8) (pointer-set-c-int16! . uy2dc7) (pointer-set-c-int8! . uy2dc6) (pointer-set-c-pointer! . uy2dc5) (pointer-set-c-double! . uy2dc4) (pointer-set-c-float! . uy2dc3) (pointer-set-c-long-long! . uy2dc2) (pointer-set-c-long! . uy2dc1) (pointer-set-c-int! . uy2dc0) (pointer-set-c-short! . uy2dbf) (pointer-set-c-char! . uy2dbe) (pointer-ref-c-pointer . uy2dbd) (pointer-ref-c-double . uy2dbc) (pointer-ref-c-float . uy2dbb) (pointer-ref-c-unsigned-long-long . uy2dba) (pointer-ref-c-signed-long-long . uy2db9) (pointer-ref-c-unsigned-long . uy2db8) (pointer-ref-c-signed-long . uy2db7) (pointer-ref-c-unsigned-int . uy2db6) (pointer-ref-c-signed-int . uy2db5) (pointer-ref-c-unsigned-short . uy2db4) (pointer-ref-c-signed-short . uy2db3) (pointer-ref-c-unsigned-char . uy2db2) (pointer-ref-c-signed-char . uy2db1) (pointer->integer . uy2db0) (integer->pointer . uy2daf) (pointer? . uy2dae) (shared-errno . uy2dad) (%ffi-free-c-callback-trampoline . uy2dac) (%ffi-make-c-callback-trampoline . uy2dab) (%ffi-free . uy2daa) (%ffi-malloc . uy2da9) (%ffi-supported? . uy2da8) (%ffi-pointer->string . uy2da7) (%ffi-call . uy2da6) (%ffi-lookup . uy2da5) (%ffi-open . uy2da4) (null-terminated-utf8->string . uy2da3) (null-terminated-bytevector->string . uy2da2) (%exec . uy2da1) (%fork . uy2da0) (%pipe . uy2d9f) (%confstr . uy2d9e) (%dup . uy2d9d) (p . uy2d9c) (open-output-string . uy2d9b) (get-output-string . uy2d9a) (file-stat-ctime . uy2d99) (file-stat-atime . uy2d98) (file-stat-mtime . uy2d97) (file-size-in-bytes . uy2d96) (file-writable? . uy2d95) (file-executable? . uy2d94) (file-readable? . uy2d93) (file-regular? . uy2d92) (file-symbolic-link? . uy2d91) (file-directory? . uy2d90) (create-symbolic-link . uy2d8f) (rename-file . uy2d8e) (delete-directory . uy2d8d) (create-directory . uy2d8c) (create-mosh-cache-dir . uy2d8b) (get-environment-variables . uy2d8a) (current-exception-handler . uy2d89) (get-environment-variable . uy2d88) (join-wraps . uy2d87) (id->real-label . uy2d86) (same-marks? . uy2d85) (same-marks*? . uy2d84) (get-timeofday . uy2d83) (get-command-line . uy2d82) (sys-display . uy2d81) (whereis . uy2d80) (register . uy2d7f) (vm-join! . uy2d7e) (vm-set-value! . uy2d7d) (vm? . uy2d7c) (main-vm? . uy2d7b) (vm-eval . uy2d7a) (vm-self . uy2d79) (vm-start! . uy2d78) (make-vm . uy2d77) (mutex-try-lock! . uy2d76) (mutex-unlock! . uy2d75) (mutex-lock! . uy2d74) (mutex? . uy2d73) (make-mutex . uy2d72) (condition-variable-notify-all! . uy2d71) (condition-variable-notify! . uy2d70) (condition-variable-wait! . uy2d6f) (make-condition-variable . uy2d6e) (write/ss . uy2d6d) (mosh-executable-path . uy2d6c) (make-file-options . uy2d6b) (source-info . uy2d6a) (make-compiler-instruction . uy2d69) (make-instruction . uy2d68) (set-annotation! . uy2d67) (get-annotation . uy2d66) (annotated-pair? . uy2d65) (annotated-cons . uy2d64) (set-source-info! . uy2d63) (bignum? . uy2d62) (fast-equal? . uy2d61) (fasl-read . uy2d60) (fasl-write . uy2d5f) (time-usage . uy2d5e) (os-constant . uy2d5d) (condition-printer . uy2d5c) (disasm . uy2d5b) (make-parameter . uy5b6) (socket-port . uy2d5a) (socket-shutdown . uy2d59) (socket-close . uy2d58) (socket-send . uy2d57) (socket-recv! . uy2d56) (socket-recv . uy2d55) (make-server-socket . uy2d54) (make-client-socket . uy2d53) (socket-accept . uy2d52) (socket? . uy2d51) (string-upcase . uy2d50) (string-titlecase . uy2d4f) (string-normalize-nfkd . uy2d4e) (string-normalize-nfkc . uy2d4d) (string-normalize-nfd . uy2d4c) (string-normalize-nfc . uy2d4b) (string-foldcase . uy2d4a) (string-downcase . uy2d49) (string-ci>? . uy2d48) (string-ci>=? . uy2d47) (string-ci=? . uy2d46) (string-ci<? . uy2d45) (string-ci<=? . uy2d44) (char-whitespace? . uy2d43) (char-upper-case? . uy2d42) (char-title-case? . uy2d41) (char-numeric? . uy2d40) (char-lower-case? . uy2d3f) (char-general-category . uy2d3e) (char-upcase . uy2d3d) (char-titlecase . uy2d3c) (char-foldcase . uy2d3b) (char-downcase . uy2d3a) (char-ci>? . uy2d39) (char-ci>=? . uy2d38) (char-ci=? . uy2d37) (char-ci<? . uy2d36) (char-ci<=? . uy2d35) (char-alphabetic? . uy2d34) (make-variable-transformer . uybba) (identifier? . uye71) (generate-temporaries . uye5d) (free-identifier=? . uye5f) (syntax->datum . uye75) (datum->syntax . uye73) (bound-identifier=? . uye61) (record-type-descriptor? . uy2d33) (record-predicate . uy2d32) (record-mutator . uy2d31) (record-constructor . uy2d30) (record-accessor . uy2d2f) (make-record-type-descriptor . uy2d2e) (make-record-constructor-descriptor . uy2d2d) (record? . uy2d2c) (record-type-uid . uy2d2b) (record-type-sealed? . uy2d2a) (record-type-parent . uy2d29) (record-type-opaque? . uy2d28) (record-type-name . uy2d27) (record-type-generative? . uy2d26) (record-type-field-names . uy2d25) (record-rtd . uy2d24) (record-field-mutable? . uy2d23) (delete-file . uy2d22) (file-exists? . uy2d21) (vector-sort! . uy2d20) (vector-sort . uy2d1f) (list-sort . uy2d1e) (symbol-hash . uy2d1d) (string-ci-hash . uy2d1c) (string-hash . uy2d1b) (equal-hash . uy2d1a) (hashtable-equivalence-function . uy2d19) (make-hashtable . uy2d18) (hashtable-hash-function . uy2d17) (make-eqv-hashtable . uy2d16) (make-eq-hashtable . uy2d15) (hashtable? . uy2d14) (hashtable-update! . uy2d13) (hashtable-size . uy2d12) (hashtable-set! . uy2d11) (hashtable-ref . uy2d10) (hashtable-mutable? . uy2d0f) (hashtable-keys . uy2d0e) (hashtable-entries . uy2d0d) (hashtable-delete! . uy2d0c) (hashtable-copy . uy2d0b) (hashtable-contains? . uy2d0a) (hashtable-clear! . uy2d09) (call-with-output-file . uy2d08) (call-with-input-file . uy2d07) (write-char . uy2d06) (write . uy2d05) (with-output-to-file . uy2d04) (with-input-from-file . uy2d03) (read-char . uy2d02) (read . uy2d01) (peek-char . uy2d00) (open-output-file . uy2cff) (open-input-file . uy2cfe) (newline . uy2cfd) (display . uy2cfc) (close-output-port . uy2cfb) (close-input-port . uy2cfa) (eof-object? . uy2cf9) (eof-object . uy2cf8) (current-error-port . uy2cf7) (current-output-port . uy2cf6) (current-input-port . uy2cf5) (output-port? . uy2cf4) (input-port? . uy2cf3) (utf-8-codec . uy2cf2) (utf-16-codec . uy2cf1) (transcoder-error-handling-mode . uy2cf0) (transcoder-eol-style . uy2cef) (transcoder-codec . uy2cee) (transcoded-port . uy2ced) (textual-port? . uy2cec) (string->bytevector . uy2ceb) (standard-output-port . uy2cea) (standard-input-port . uy2ce9) (standard-error-port . uy2ce8) (set-port-position! . uy2ce7) (put-u8 . uy2ce6) (put-string . uy2ce5) (put-datum . uy2ce4) (put-char . uy2ce3) (put-bytevector . uy2ce2) (port? . uy2ce1) (port-transcoder . uy2ce0) (port-position . uy2cdf) (port-has-set-port-position!? . uy2cde) (port-has-port-position? . uy2cdd) (port-eof? . uy2cdc) (output-port-buffer-mode . uy2cdb) (open-string-output-port . uy2cda) (open-string-input-port . uy2cd9) (open-file-output-port . uy2cd8) (open-file-input/output-port . uy2cd7) (open-file-input-port . uy2cd6) (open-bytevector-output-port . uy2cd5) (open-bytevector-input-port . uy2cd4) (native-transcoder . uy2cd3) (native-eol-style . uy2cd2) (make-transcoder . uy2cd1) (latin-1-codec . uy2cd0) (make-i/o-write-error . uy2ccf) (make-i/o-read-error . uy2cce) (make-i/o-port-error . uy2ccd) (make-i/o-invalid-position-error . uy2ccc) (make-i/o-filename-error . uy2ccb) (make-i/o-file-protection-error . uy2cca) (make-i/o-file-is-read-only-error . uy2cc9) (make-i/o-file-does-not-exist-error . uy2cc8) (make-i/o-file-already-exists-error . uy2cc7) (make-i/o-error . uy2cc6) (make-i/o-encoding-error . uy2cc5) (make-i/o-decoding-error . uy2cc4) (make-custom-textual-output-port . uy2cc3) (make-custom-textual-input/output-port . uy2cc2) (make-custom-textual-input-port . uy2cc1) (make-custom-binary-output-port . uy2cc0) (make-custom-binary-input/output-port . uy2cbf) (make-custom-binary-input-port . uy2cbe) (make-bytevector . uy2cbd) (lookahead-u8 . uy2cbc) (lookahead-char . uy2cbb) (i/o-write-error? . uy2cba) (i/o-read-error? . uy2cb9) (i/o-port-error? . uy2cb8) (i/o-invalid-position-error? . uy2cb7) (i/o-filename-error? . uy2cb6) (i/o-file-protection-error? . uy2cb5) (i/o-file-is-read-only-error? . uy2cb4) (i/o-file-does-not-exist-error? . uy2cb3) (i/o-file-already-exists-error? . uy2cb2) (i/o-error? . uy2cb1) (i/o-error-position . uy2cb0) (i/o-error-port . uy2caf) (i/o-error-filename . uy2cae) (i/o-encoding-error? . uy2cad) (i/o-encoding-error-char . uy2cac) (i/o-decoding-error? . uy2cab) (get-u8 . uy2caa) (get-string-n! . uy2ca9) (get-string-n . uy2ca8) (get-string-all . uy2ca7) (get-line . uy2ca6) (get-datum . uy2ca5) (get-char . uy2ca4) (get-bytevector-some . uy2ca3) (get-bytevector-n! . uy2ca2) (get-bytevector-n . uy2ca1) (get-bytevector-all . uy2ca0) (flush-output-port . uy2c9f) (close-port . uy2c9e) (scheme-report-environment . uye4b) (quotient . uy2c9d) (null-environment . uye49) (remainder . uy2c9c) (modulo . uy2c9b) (inexact->exact . uy2c9a) (force . uy2c99) (exact->inexact . uy2c98) (make-promise . uy2c97) (exit . uy2c96) (command-line . uy2928) (string-fill! . uy2c95) (string-set! . uy2c94) (set-cdr! . uy2c93) (set-car! . uy2c92) (remove . uy2c91) (remv . uy2c90) (remp . uy2c8f) (remq . uy2c8e) (partition . uy2c8d) (memv . uy2c8c) (memq . uy2c8b) (memp . uy2c8a) (member . uy2c89) (exists . uy2c88) (for-all . uy2c87) (fold-right . uy2c86) (fold-left . uy2c85) (find . uy2c84) (filter . uy2c83) (cons* . uy2c82) (assv . uy2c81) (assq . uy2c80) (assp . uy2c7f) (assoc . uy2c7e) (call-with-string-output-port . uy2c7d) (call-with-port . uy2c7c) (call-with-bytevector-output-port . uy2c7b) (bytevector->string . uy2c7a) (buffer-mode? . uy2c79) (binary-port? . uy2c78) (with-exception-handler . uy2c77) (raise-continuable . uy2c76) (raise . uy2c75) (eval . uye4f) (environment . uye47) (make-enumeration . uy2c74) (enum-set=? . uy2c73) (enum-set-universe . uy2c72) (enum-set-union . uy2c71) (enum-set-subset? . uy2c70) (enum-set-projection . uy2c6f) (enum-set-member? . uy2c6e) (enum-set-intersection . uy2c6d) (enum-set-indexer . uy2c6c) (enum-set-difference . uy2c6b) (enum-set-constructor . uy2c6a) (enum-set-complement . uy2c69) (enum-set->list . uy2c68) (who-condition? . uy2c67) (warning? . uy2c66) (violation? . uy2c65) (undefined-violation? . uy2c64) (syntax-violation? . uy2c63) (syntax-violation-subform . uy2c62) (syntax-violation-form . uy2c61) (syntax-violation . uye6f) (simple-conditions . uy2c60) (serious-condition? . uy2c5f) (non-continuable-violation? . uy2c5e) (message-condition? . uy2c5d) (make-who-condition . uy2c5c) (make-warning . uy2c5b) (make-violation . uy2c5a) (make-undefined-violation . uy2c59) (make-syntax-violation . uy2c58) (make-serious-condition . uy2c57) (make-non-continuable-violation . uy2c56) (make-message-condition . uy2c55) (make-lexical-violation . uy2c54) (make-irritants-condition . uy2c53) (make-implementation-restriction-violation . uy2c52) (make-error . uy2c51) (make-assertion-violation . uy2c50) (lexical-violation? . uy2c4f) (irritants-condition? . uy2c4e) (implementation-restriction-violation? . uy2c4d) (error? . uy2c4c) (condition-who . uy2c4b) (condition-predicate . uy2c4a) (condition-message . uy2c49) (condition-irritants . uy2c48) (condition-accessor . uy2c47) (condition . uy2c46) (assertion-violation? . uy2c45) (condition? . uy2c44) (utf32->string . uy2c43) (utf16->string . uy2c42) (utf8->string . uy2c41) (uint-list->bytevector . uy2c40) (u8-list->bytevector . uy2c3f) (string->utf8 . uy2c3e) (string->utf32 . uy2c3d) (string->utf16 . uy2c3c) (sint-list->bytevector . uy2c3b) (native-endianness . uy2c3a) (bytevector? . uy2c39) (bytevector=? . uy2c38) (bytevector-uint-set! . uy2c37) (bytevector-uint-ref . uy2c36) (bytevector-u8-set! . uy2c35) (bytevector-u8-ref . uy2c34) (bytevector-u64-set! . uy2c33) (bytevector-u64-ref . uy2c32) (bytevector-u64-native-set! . uy2c31) (bytevector-u64-native-ref . uy2c30) (bytevector-u32-set! . uy2c2f) (bytevector-u32-ref . uy2c2e) (bytevector-u32-native-set! . uy2c2d) (bytevector-u32-native-ref . uy2c2c) (bytevector-u16-set! . uy2c2b) (bytevector-u16-ref . uy2c2a) (bytevector-u16-native-set! . uy2c29) (bytevector-u16-native-ref . uy2c28) (bytevector-sint-set! . uy2c27) (bytevector-sint-ref . uy2c26) (bytevector-s8-set! . uy2c25) (bytevector-s8-ref . uy2c24) (bytevector-s64-set! . uy2c23) (bytevector-s64-ref . uy2c22) (bytevector-s64-native-set! . uy2c21) (bytevector-s64-native-ref . uy2c20) (bytevector-s32-set! . uy2c1f) (bytevector-s32-ref . uy2c1e) (bytevector-s32-native-set! . uy2c1d) (bytevector-s32-native-ref . uy2c1c) (bytevector-s16-set! . uy2c1b) (bytevector-s16-ref . uy2c1a) (bytevector-s16-native-set! . uy2c19) (bytevector-s16-native-ref . uy2c18) (bytevector-length . uy2c17) (bytevector-ieee-single-ref . uy2c16) (bytevector-ieee-single-set! . uy2c15) (bytevector-ieee-single-native-set! . uy2c14) (bytevector-ieee-single-native-ref . uy2c13) (bytevector-ieee-double-set! . uy2c12) (bytevector-ieee-double-ref . uy2c11) (bytevector-ieee-double-native-set! . uy2c10) (bytevector-ieee-double-native-ref . uy2c0f) (bytevector-fill! . uy2c0e) (bytevector-copy! . uy2c0d) (bytevector-copy . uy2c0c) (bytevector->uint-list . uy2c0b) (bytevector->u8-list . uy2c0a) (bytevector->sint-list . uy2c09) (no-nans-violation? . uy2c08) (no-infinities-violation? . uy2c07) (make-no-nans-violation . uy2c06) (make-no-infinities-violation . uy2c05) (real->flonum . uy2c04) (flzero? . uy2c03) (fltruncate . uy2c02) (fltan . uy2c01) (flsqrt . uy2c00) (flsin . uy2bff) (flround . uy2bfe) (flpositive? . uy2bfd) (flonum? . uy2bfc) (flodd? . uy2bfb) (flnumerator . uy2bfa) (flnegative? . uy2bf9) (flnan? . uy2bf8) (flmod0 . uy2bf7) (flmod . uy2bf6) (flmin . uy2bf5) (flmax . uy2bf4) (fllog . uy2bf3) (flinteger? . uy2bf2) (flinfinite? . uy2bf1) (flfloor . uy2bf0) (flfinite? . uy2bef) (flexpt . uy2bee) (flexp . uy2bed) (fleven? . uy2bec) (fldiv0-and-mod0 . uy2beb) (fldiv0 . uy2bea) (fldiv-and-mod . uy2be9) (fldiv . uy2be8) (fldenominator . uy2be7) (flcos . uy2be6) (flceiling . uy2be5) (flatan . uy2be4) (flasin . uy2be3) (flacos . uy2be2) (flabs . uy2be1) (fl>? . uy2be0) (fl>=? . uy2bdf) (fl=? . uy2bde) (fl<? . uy2bdd) (fl<=? . uy2bdc) (fl/ . uy2bdb) (fl- . uy2bda) (fl+ . uy2bd9) (fl* . uy2bd8) (fixnum->flonum . uy2bd7) (fxzero? . uy2bd6) (fxxor . uy2bd5) (fxrotate-bit-field . uy2bd4) (fxreverse-bit-field . uy2bd3) (fxpositive? . uy2bd2) (fxodd? . uy2bd1) (fxnot . uy2bd0) (fxnegative? . uy2bcf) (fxmod0 . uy2bce) (fxmod . uy2bcd) (fxmin . uy2bcc) (fxmax . uy2bcb) (fxlength . uy2bca) (fxior . uy2bc9) (fxif . uy2bc8) (fxfirst-bit-set . uy2bc7) (fxeven? . uy2bc6) (fxdiv0-and-mod0 . uy2bc5) (fxdiv0 . uy2bc4) (fxdiv-and-mod . uy2bc3) (fxdiv . uy2bc2) (fxcopy-bit-field . uy2bc1) (fxcopy-bit . uy2bc0) (fxbit-set? . uy2bbf) (fxbit-field . uy2bbe) (fxbit-count . uy2bbd) (fxarithmetic-shift-right . uy2bbc) (fxarithmetic-shift-left . uy2bbb) (fxarithmetic-shift . uy2bba) (fxand . uy2bb9) (fx>? . uy2bb8) (fx>=? . uy2bb7) (fx=? . uy2bb6) (fx<? . uy2bb5) (fx<=? . uy2bb4) (fx-/carry . uy2bb3) (fx- . uy2bb2) (fx+/carry . uy2bb1) (fx+ . uy2bb0) (fx*/carry . uy2baf) (fx* . uy2bae) (greatest-fixnum . uy2bad) (least-fixnum . uy2bac) (fixnum-width . uy2bab) (fixnum? . uy2baa) (bitwise-rotate-bit-field . uy2ba9) (bitwise-reverse-bit-field . uy2ba8) (bitwise-length . uy2ba7) (bitwise-if . uy2ba6) (bitwise-first-bit-set . uy2ba5) (bitwise-copy-bit-field . uy2ba4) (bitwise-copy-bit . uy2ba3) (bitwise-bit-set? . uy2ba2) (bitwise-bit-field . uy2ba1) (bitwise-bit-count . uy2ba0) (bitwise-xor . uy2b9f) (bitwise-ior . uy2b9e) (bitwise-and . uy2b9d) (bitwise-not . uy2b9c) (bitwise-arithmetic-shift-right . uy2b9b) (bitwise-arithmetic-shift-left . uy2b9a) (bitwise-arithmetic-shift . uy2b99) (zero? . uy2b98) (vector? . uy2b97) (vector-set! . uy2b96) (vector-ref . uy2b95) (vector-map . uy2b94) (vector-length . uy2b93) (vector-for-each . uy2b92) (vector-fill! . uy2b91) (vector->list . uy2b90) (vector . uy2b8f) (values . uy2b8e) (truncate . uy2b8d) (tan . uy2b8c) (symbol? . uy2b8b) (symbol=? . uy2b8a) (symbol->string . uy2b89) (substring . uy2b88) (string? . uy2b87) (string>? . uy2b86) (string>=? . uy2b85) (string=? . uy2b84) (string<? . uy2b83) (string<=? . uy2b82) (string-ref . uy2b81) (string-length . uy2b80) (string-for-each . uy2b7f) (string-copy . uy2b7e) (string-append . uy2b7d) (string->symbol . uy2b7c) (string->number . uy2b7b) (string->list . uy2b7a) (string . uy2b79) (sqrt . uy2b78) (sin . uy2b77) (round . uy2b76) (reverse . uy2b75) (real? . uy2b74) (real-valued? . uy2b73) (real-part . uy2b72) (rationalize . uy2b71) (rational? . uy2b70) (rational-valued? . uy2b6f) (procedure? . uy2b6e) (positive? . uy2b6d) (pair? . uy2b6c) (odd? . uy2b6b) (numerator . uy2b6a) (number? . uy2b69) (number->string . uy2b68) (null? . uy2b67) (not . uy2b66) (negative? . uy2b65) (nan? . uy2b64) (min . uy2b63) (max . uy2b62) (map . uy2b61) (make-vector . uy2b60) (make-string . uy2b5f) (make-rectangular . uy2b5e) (make-polar . uy2b5d) (magnitude . uy2b5c) (log . uy2b5b) (list? . uy2b5a) (list-tail . uy2b59) (list-ref . uy2b58) (list->vector . uy2b57) (list->string . uy2b56) (list . uy2b55) (length . uy2b54) (lcm . uy2b53) (integer? . uy2b52) (integer-valued? . uy2b51) (integer->char . uy2b50) (infinite? . uy2b4f) (inexact? . uy2b4e) (inexact . uy2b4d) (imag-part . uy2b4c) (gcd . uy2b4b) (for-each . uy2b4a) (floor . uy2b49) (finite? . uy2b48) (expt . uy2b47) (exp . uy2b46) (exact? . uy2b45) (exact-integer-sqrt . uy2b44) (exact . uy2b43) (even? . uy2b42) (error . uy2b41) (eqv? . uy2b40) (equal? . uy2b3f) (eq? . uy2b3e) (dynamic-wind . uy2b3d) (div0-and-mod0 . uy2b3c) (mod0 . uy2b3b) (div0 . uy2b3a) (div-and-mod . uy2b39) (mod . uy2b38) (div . uy2b37) (denominator . uy2b36) (cos . uy2b35) (cons . uy2b34) (complex? . uy2b33) (char? . uy2b32) (char>? . uy2b31) (char>=? . uy2b30) (char=? . uy2b2f) (char<? . uy2b2e) (char<=? . uy2b2d) (char->integer . uy2b2c) (ceiling . uy2b2b) (call-with-values . uy2b2a) (call/cc . uy2b29) (call-with-current-continuation . uy2b28) (cddddr . uy2b27) (cdddar . uy2b26) (cddadr . uy2b25) (cddaar . uy2b24) (cdaddr . uy2b23) (cdadar . uy2b22) (cdaadr . uy2b21) (cdaaar . uy2b20) (cadddr . uy2b1f) (caddar . uy2b1e) (cadadr . uy2b1d) (cadaar . uy2b1c) (caaddr . uy2b1b) (caadar . uy2b1a) (caaadr . uy2b19) (caaaar . uy2b18) (cdddr . uy2b17) (cddar . uy2b16) (cdadr . uy2b15) (cdaar . uy2b14) (caddr . uy2b13) (cadar . uy2b12) (caadr . uy2b11) (caaar . uy2b10) (cddr . uy2b0f) (cdar . uy2b0e) (cadr . uy2b0d) (caar . uy2b0c) (cdr . uy2b0b) (car . uy2b0a) (boolean? . uy2b09) (boolean=? . uy2b08) (atan . uy2b07) (assertion-violation . uy2b06) (assertion-error . uye69) (asin . uy2b05) (apply . uy2b04) (append . uy2b03) (angle . uy2b02) (acos . uy2b01) (abs . uy2b00) (/ . uy2aff) (* . uy2afe) (- . uy2afd) (+ . uy2afc) (>= . uy2afb) (> . uy2afa) (= . uy2af9) (<= . uy2af8) (< . uy2af7) (library . uy2af6) (&no-nans . uy2af5) (&no-infinities . uy2af4) (&i/o-encoding . uy2af3) (&i/o-decoding . uy2af2) (&i/o-port . uy2af1) (&i/o-file-does-not-exist . uy2af0) (&i/o-file-already-exists . uy2aef) (&i/o-file-is-read-only . uy2aee) (&i/o-file-protection . uy2aed) (&i/o-filename . uy2aec) (&i/o-invalid-position . uy2aeb) (&i/o-write . uy2aea) (&i/o-read . uy2ae9) (&i/o . uy2ae8) (&undefined . uy2ae7) (&syntax . uy2ae6) (&lexical . uy2ae5) (&implementation-restriction . uy2ae4) (&non-continuable . uy2ae3) (&who . uy2ae2) (&irritants . uy2ae1) (&assertion . uy2ae0) (&violation . uy2adf) (&error . uy2ade) (&serious . uy2add) (&warning . uy2adc) (&message . uy2adb) (&condition . uy2ada) (define-condition-type . uy2ad9) (define-enumeration . uy2ad8) (define-record-type . uy2ad7) (parent-rtd . uy2ad6) (nongenerative . uy2ad5) (opaque . uy2ad4) (sealed . uy2ad3) (protocol . uy2ad2) (parent . uy2ad1) (immutable . uy2ad0) (mutable . uy2acf) (fields . uy2ace) (error-handling-mode . uy2acd) (file-options . uy2acc) (buffer-mode . uy2acb) (eol-style . uy2aca) (guard . uy2ac9) (trace-define . uy2ac8) (trace-lambda . uy2ac7) (unsyntax-splicing . uy2ac6) (unsyntax . uy2ac5) (unquote-splicing . uy2ac4) (unquote . uy2ac3) (_ . uy2ac2) (else . uy2ac1) (=> . uy2ac0) (... . uy2abf) (assert . uy2abe) (endianness . uy2abd) (delay . uy2abc) (time . uy2abb) (do . uy2aba) (cond . uy2ab9) (let* . uy2ab8) (let*-values . uy2ab7) (let-values . uy2ab6) (identifier-syntax . uy2ab5) (with-syntax . uy2ab4) (quasisyntax . uy2ab3) (quasiquote . uy2ab2) (syntax-rules . uy2ab1) (include . uy2ab0) (define-struct . uy2aaf) (record-constructor-descriptor . uy2aae) (record-type-descriptor . uy2aad) (case . uy2aac) (parameterize . uy2aab) (unless . uy2aaa) (when . uy2aa9) (or . uy2aa8) (and . uy2aa7) (if . uy2aa6) (let . uy2aa5) (letrec* . uy2aa4) (letrec . uy2aa3) (type-descriptor . uy2aa2) (case-lambda . uy2aa1) (lambda . uy2aa0) (syntax . uy2a9f) (syntax-case . uy2a9e) (quote . uy2a9d) (foreign-call . uy2a9c) (letrec-syntax . uy2a9b) (let-syntax . uy2a9a) (set! . uy2a99) (import . uy2a98) (begin . uy2a97) (module . uy2a96) (define-syntax . uy2a95) (define . uy2a94)) '((uy2e4b core-prim . &no-nans-rcd) (uy2e4a core-prim . &no-nans-rtd) (uy2e49 core-prim . &no-infinities-rcd) (uy2e48 core-prim . &no-infinities-rtd) (uy2e47 core-prim . &i/o-encoding-rcd) (uy2e46 core-prim . &i/o-encoding-rtd) (uy2e45 core-prim . &i/o-decoding-rcd) (uy2e44 core-prim . &i/o-decoding-rtd) (uy2e43 core-prim . &i/o-port-rcd) (uy2e42 core-prim . &i/o-port-rtd) (uy2e41 core-prim . &i/o-file-does-not-exist-rcd) (uy2e40 core-prim . &i/o-file-does-not-exist-rtd) (uy2e3f core-prim . &i/o-file-already-exists-rcd) (uy2e3e core-prim . &i/o-file-already-exists-rtd) (uy2e3d core-prim . &i/o-file-is-read-only-rcd) (uy2e3c core-prim . &i/o-file-is-read-only-rtd) (uy2e3b core-prim . &i/o-file-protection-rcd) (uy2e3a core-prim . &i/o-file-protection-rtd) (uy2e39 core-prim . &i/o-filename-rcd) (uy2e38 core-prim . &i/o-filename-rtd) (uy2e37 core-prim . &i/o-invalid-position-rcd) (uy2e36 core-prim . &i/o-invalid-position-rtd) (uy2e35 core-prim . &i/o-write-rcd) (uy2e34 core-prim . &i/o-write-rtd) (uy2e33 core-prim . &i/o-read-rcd) (uy2e32 core-prim . &i/o-read-rtd) (uy2e31 core-prim . &i/o-rcd) (uy2e30 core-prim . &i/o-rtd) (uy2e2f core-prim . &undefined-rcd) (uy2e2e core-prim . &undefined-rtd) (uy2e2d core-prim . &syntax-rcd) (uy2e2c core-prim . &syntax-rtd) (uy2e2b core-prim . &lexical-rcd) (uy2e2a core-prim . &lexical-rtd) (uy2e29 core-prim . &implementation-restriction-rcd) (uy2e28 core-prim . &implementation-restriction-rtd) (uy2e27 core-prim . &non-continuable-rcd) (uy2e26 core-prim . &non-continuable-rtd) (uy2e25 core-prim . &who-rcd) (uy2e24 core-prim . &who-rtd) (uy2e23 core-prim . &irritants-rcd) (uy2e22 core-prim . &irritants-rtd) (uy2e21 core-prim . &assertion-rcd) (uy2e20 core-prim . &assertion-rtd) (uy2e1f core-prim . &violation-rcd) (uy2e1e core-prim . &violation-rtd) (uy2e1d core-prim . &error-rcd) (uy2e1c core-prim . &error-rtd) (uy2e1b core-prim . &serious-rcd) (uy2e1a core-prim . &serious-rtd) (uy2e19 core-prim . &warning-rcd) (uy2e18 core-prim . &warning-rtd) (uy2e17 core-prim . &message-rcd) (uy2e16 core-prim . &message-rtd) (uy2e15 core-prim . &condition-rcd) (uy2e14 core-prim . &condition-rtd) (uye6b core-prim . syntax-error) (uyd8f core-prim . syntax-dispatch) (uy2e13 core-prim . pretty-print) (uy2e12 core-prim . eval-core) (uy2e11 core-prim . set-symbol-value!) (uy2e10 core-prim . symbol-value) (uy2e0f core-prim . gensym) (uy2e0e core-prim . void) (uy292e core-prim . load) (uye7d core-prim . interaction-environment) (uy2e0d core-prim . char-ready?) (uy2e0c core-prim . regexp?) (uy2e0b core-prim . read-line) (uy2e0a core-prim . gensym-prefix-set!) (uy2e09 core-prim . ungensym) (uy2e08 core-prim . alist->eq-hash-table) (uy2e07 core-prim . assoc-ref) (uy2e06 core-prim . print) (uy2e05 core-prim . format) (uy2e04 core-prim . host-os) (uy7ce core-prim . library-path) (uy2e03 core-prim . standard-library-path) (uy2e02 core-prim . ssl-supported?) (uy2e01 core-prim . ssl-socket?) (uy2e00 core-prim . socket-sslize!) (uy2dff core-prim . %monapi-stream-read) (uy2dfe core-prim . %monapi-stream-write) (uy2dfd core-prim . %monapi-stream-handle) (uy2dfc core-prim . %monapi-make-stream) (uy2dfb core-prim . %monapi-name-add!) (uy2dfa core-prim . %monapi-message-receive) (uy2df9 core-prim . %monapi-name-whereis) (uy2df8 core-prim . %monapi-message-reply) (uy2df7 core-prim . %monapi-message-send-receive) (uy2df6 core-prim . %monapi-message-send) (uy2df5 core-prim . process-terminate!) (uy2df4 core-prim . process-list) (uy2df3 core-prim . file-newer?) (uy2df2 core-prim . stat-mtime) (uy2df1 core-prim . write-to-file) (uy2df0 core-prim . file->list) (uy2def core-prim . file->string) (uy2dee core-prim . digit->integer) (uy2ded core-prim . call-with-string-input-port) (uy2dec core-prim . call-with-string-io) (uy2deb core-prim . string-split) (uy2dea core-prim . bytevector-for-each) (uy2de9 core-prim . string->regexp) (uy2de8 core-prim . rxmatch) (uy2de7 core-prim . regexp-replace-all) (uy2de6 core-prim . hashtable-fold-left) (uy2de5 core-prim . hashtable-for-each) (uy5b8 core-prim . mosh-cache-dir) (uy2de4 core-prim . %start-process) (uy2de3 core-prim . %call-process) (uy2de2 core-prim . local-tz-offset) (uy2de1 core-prim . microseconds) (uy2de0 core-prim . directory-list) (uy2ddf core-prim . set-current-directory!) (uy2dde core-prim . expand-path) (uy2ddd core-prim . current-directory) (uy2ddc core-prim . %getpid) (uy2ddb core-prim . %waitpid) (uy2dda core-prim . simple-struct-name) (uy2dd9 core-prim . simple-struct-set!) (uy2dd8 core-prim . simple-struct-ref) (uy2dd7 core-prim . make-simple-struct) (uy2dd6 core-prim . simple-struct?) (uy2dd5 core-prim . pointer-ref-c-int64) (uy2dd4 core-prim . pointer-ref-c-int32) (uy2dd3 core-prim . pointer-ref-c-int16) (uy2dd2 core-prim . pointer-ref-c-int8) (uy2dd1 core-prim . pointer-ref-c-uint64) (uy2dd0 core-prim . pointer-ref-c-uint32) (uy2dcf core-prim . pointer-ref-c-uint16) (uy2dce core-prim . pointer-ref-c-uint8) (uy2dcd core-prim . pointer-set-c-uint64!) (uy2dcc core-prim . pointer-set-c-uint32!) (uy2dcb core-prim . pointer-set-c-uint16!) (uy2dca core-prim . pointer-set-c-uint8!) (uy2dc9 core-prim . pointer-set-c-int64!) (uy2dc8 core-prim . pointer-set-c-int32!) (uy2dc7 core-prim . pointer-set-c-int16!) (uy2dc6 core-prim . pointer-set-c-int8!) (uy2dc5 core-prim . pointer-set-c-pointer!) (uy2dc4 core-prim . pointer-set-c-double!) (uy2dc3 core-prim . pointer-set-c-float!) (uy2dc2 core-prim . pointer-set-c-long-long!) (uy2dc1 core-prim . pointer-set-c-long!) (uy2dc0 core-prim . pointer-set-c-int!) (uy2dbf core-prim . pointer-set-c-short!) (uy2dbe core-prim . pointer-set-c-char!) (uy2dbd core-prim . pointer-ref-c-pointer) (uy2dbc core-prim . pointer-ref-c-double) (uy2dbb core-prim . pointer-ref-c-float) (uy2dba core-prim . pointer-ref-c-unsigned-long-long) (uy2db9 core-prim . pointer-ref-c-signed-long-long) (uy2db8 core-prim . pointer-ref-c-unsigned-long) (uy2db7 core-prim . pointer-ref-c-signed-long) (uy2db6 core-prim . pointer-ref-c-unsigned-int) (uy2db5 core-prim . pointer-ref-c-signed-int) (uy2db4 core-prim . pointer-ref-c-unsigned-short) (uy2db3 core-prim . pointer-ref-c-signed-short) (uy2db2 core-prim . pointer-ref-c-unsigned-char) (uy2db1 core-prim . pointer-ref-c-signed-char) (uy2db0 core-prim . pointer->integer) (uy2daf core-prim . integer->pointer) (uy2dae core-prim . pointer?) (uy2dad core-prim . shared-errno) (uy2dac core-prim . %ffi-free-c-callback-trampoline) (uy2dab core-prim . %ffi-make-c-callback-trampoline) (uy2daa core-prim . %ffi-free) (uy2da9 core-prim . %ffi-malloc) (uy2da8 core-prim . %ffi-supported?) (uy2da7 core-prim . %ffi-pointer->string) (uy2da6 core-prim . %ffi-call) (uy2da5 core-prim . %ffi-lookup) (uy2da4 core-prim . %ffi-open) (uy2da3 core-prim . null-terminated-utf8->string) (uy2da2 core-prim . null-terminated-bytevector->string) (uy2da1 core-prim . %exec) (uy2da0 core-prim . %fork) (uy2d9f core-prim . %pipe) (uy2d9e core-prim . %confstr) (uy2d9d core-prim . %dup) (uy2d9c core-prim . p) (uy2d9b core-prim . open-output-string) (uy2d9a core-prim . get-output-string) (uy2d99 core-prim . file-stat-ctime) (uy2d98 core-prim . file-stat-atime) (uy2d97 core-prim . file-stat-mtime) (uy2d96 core-prim . file-size-in-bytes) (uy2d95 core-prim . file-writable?) (uy2d94 core-prim . file-executable?) (uy2d93 core-prim . file-readable?) (uy2d92 core-prim . file-regular?) (uy2d91 core-prim . file-symbolic-link?) (uy2d90 core-prim . file-directory?) (uy2d8f core-prim . create-symbolic-link) (uy2d8e core-prim . rename-file) (uy2d8d core-prim . delete-directory) (uy2d8c core-prim . create-directory) (uy2d8b core-prim . create-mosh-cache-dir) (uy2d8a core-prim . get-environment-variables) (uy2d89 core-prim . current-exception-handler) (uy2d88 core-prim . get-environment-variable) (uy2d87 core-prim . join-wraps) (uy2d86 core-prim . id->real-label) (uy2d85 core-prim . same-marks?) (uy2d84 core-prim . same-marks*?) (uy2d83 core-prim . get-timeofday) (uy2d82 core-prim . get-command-line) (uy2d81 core-prim . sys-display) (uy2d80 core-prim . whereis) (uy2d7f core-prim . register) (uy2d7e core-prim . vm-join!) (uy2d7d core-prim . vm-set-value!) (uy2d7c core-prim . vm?) (uy2d7b core-prim . main-vm?) (uy2d7a core-prim . vm-eval) (uy2d79 core-prim . vm-self) (uy2d78 core-prim . vm-start!) (uy2d77 core-prim . make-vm) (uy2d76 core-prim . mutex-try-lock!) (uy2d75 core-prim . mutex-unlock!) (uy2d74 core-prim . mutex-lock!) (uy2d73 core-prim . mutex?) (uy2d72 core-prim . make-mutex) (uy2d71 core-prim . condition-variable-notify-all!) (uy2d70 core-prim . condition-variable-notify!) (uy2d6f core-prim . condition-variable-wait!) (uy2d6e core-prim . make-condition-variable) (uy2d6d core-prim . write/ss) (uy2d6c core-prim . mosh-executable-path) (uy2d6b core-prim . make-file-options) (uy2d6a core-prim . source-info) (uy2d69 core-prim . make-compiler-instruction) (uy2d68 core-prim . make-instruction) (uy2d67 core-prim . set-annotation!) (uy2d66 core-prim . get-annotation) (uy2d65 core-prim . annotated-pair?) (uy2d64 core-prim . annotated-cons) (uy2d63 core-prim . set-source-info!) (uy2d62 core-prim . bignum?) (uy2d61 core-prim . fast-equal?) (uy2d60 core-prim . fasl-read) (uy2d5f core-prim . fasl-write) (uy2d5e core-prim . time-usage) (uy2d5d core-prim . os-constant) (uy2d5c core-prim . condition-printer) (uy2d5b core-prim . disasm) (uy5b6 core-prim . make-parameter) (uy2d5a core-prim . socket-port) (uy2d59 core-prim . socket-shutdown) (uy2d58 core-prim . socket-close) (uy2d57 core-prim . socket-send) (uy2d56 core-prim . socket-recv!) (uy2d55 core-prim . socket-recv) (uy2d54 core-prim . make-server-socket) (uy2d53 core-prim . make-client-socket) (uy2d52 core-prim . socket-accept) (uy2d51 core-prim . socket?) (uy2d50 core-prim . string-upcase) (uy2d4f core-prim . string-titlecase) (uy2d4e core-prim . string-normalize-nfkd) (uy2d4d core-prim . string-normalize-nfkc) (uy2d4c core-prim . string-normalize-nfd) (uy2d4b core-prim . string-normalize-nfc) (uy2d4a core-prim . string-foldcase) (uy2d49 core-prim . string-downcase) (uy2d48 core-prim . string-ci>?) (uy2d47 core-prim . string-ci>=?) (uy2d46 core-prim . string-ci=?) (uy2d45 core-prim . string-ci<?) (uy2d44 core-prim . string-ci<=?) (uy2d43 core-prim . char-whitespace?) (uy2d42 core-prim . char-upper-case?) (uy2d41 core-prim . char-title-case?) (uy2d40 core-prim . char-numeric?) (uy2d3f core-prim . char-lower-case?) (uy2d3e core-prim . char-general-category) (uy2d3d core-prim . char-upcase) (uy2d3c core-prim . char-titlecase) (uy2d3b core-prim . char-foldcase) (uy2d3a core-prim . char-downcase) (uy2d39 core-prim . char-ci>?) (uy2d38 core-prim . char-ci>=?) (uy2d37 core-prim . char-ci=?) (uy2d36 core-prim . char-ci<?) (uy2d35 core-prim . char-ci<=?) (uy2d34 core-prim . char-alphabetic?) (uybba core-prim . make-variable-transformer) (uye71 core-prim . identifier?) (uye5d core-prim . generate-temporaries) (uye5f core-prim . free-identifier=?) (uye75 core-prim . syntax->datum) (uye73 core-prim . datum->syntax) (uye61 core-prim . bound-identifier=?) (uy2d33 core-prim . record-type-descriptor?) (uy2d32 core-prim . record-predicate) (uy2d31 core-prim . record-mutator) (uy2d30 core-prim . record-constructor) (uy2d2f core-prim . record-accessor) (uy2d2e core-prim . make-record-type-descriptor) (uy2d2d core-prim . make-record-constructor-descriptor) (uy2d2c core-prim . record?) (uy2d2b core-prim . record-type-uid) (uy2d2a core-prim . record-type-sealed?) (uy2d29 core-prim . record-type-parent) (uy2d28 core-prim . record-type-opaque?) (uy2d27 core-prim . record-type-name) (uy2d26 core-prim . record-type-generative?) (uy2d25 core-prim . record-type-field-names) (uy2d24 core-prim . record-rtd) (uy2d23 core-prim . record-field-mutable?) (uy2d22 core-prim . delete-file) (uy2d21 core-prim . file-exists?) (uy2d20 core-prim . vector-sort!) (uy2d1f core-prim . vector-sort) (uy2d1e core-prim . list-sort) (uy2d1d core-prim . symbol-hash) (uy2d1c core-prim . string-ci-hash) (uy2d1b core-prim . string-hash) (uy2d1a core-prim . equal-hash) (uy2d19 core-prim . hashtable-equivalence-function) (uy2d18 core-prim . make-hashtable) (uy2d17 core-prim . hashtable-hash-function) (uy2d16 core-prim . make-eqv-hashtable) (uy2d15 core-prim . make-eq-hashtable) (uy2d14 core-prim . hashtable?) (uy2d13 core-prim . hashtable-update!) (uy2d12 core-prim . hashtable-size) (uy2d11 core-prim . hashtable-set!) (uy2d10 core-prim . hashtable-ref) (uy2d0f core-prim . hashtable-mutable?) (uy2d0e core-prim . hashtable-keys) (uy2d0d core-prim . hashtable-entries) (uy2d0c core-prim . hashtable-delete!) (uy2d0b core-prim . hashtable-copy) (uy2d0a core-prim . hashtable-contains?) (uy2d09 core-prim . hashtable-clear!) (uy2d08 core-prim . call-with-output-file) (uy2d07 core-prim . call-with-input-file) (uy2d06 core-prim . write-char) (uy2d05 core-prim . write) (uy2d04 core-prim . with-output-to-file) (uy2d03 core-prim . with-input-from-file) (uy2d02 core-prim . read-char) (uy2d01 core-prim . read) (uy2d00 core-prim . peek-char) (uy2cff core-prim . open-output-file) (uy2cfe core-prim . open-input-file) (uy2cfd core-prim . newline) (uy2cfc core-prim . display) (uy2cfb core-prim . close-output-port) (uy2cfa core-prim . close-input-port) (uy2cf9 core-prim . eof-object?) (uy2cf8 core-prim . eof-object) (uy2cf7 core-prim . current-error-port) (uy2cf6 core-prim . current-output-port) (uy2cf5 core-prim . current-input-port) (uy2cf4 core-prim . output-port?) (uy2cf3 core-prim . input-port?) (uy2cf2 core-prim . utf-8-codec) (uy2cf1 core-prim . utf-16-codec) (uy2cf0 core-prim . transcoder-error-handling-mode) (uy2cef core-prim . transcoder-eol-style) (uy2cee core-prim . transcoder-codec) (uy2ced core-prim . transcoded-port) (uy2cec core-prim . textual-port?) (uy2ceb core-prim . string->bytevector) (uy2cea core-prim . standard-output-port) (uy2ce9 core-prim . standard-input-port) (uy2ce8 core-prim . standard-error-port) (uy2ce7 core-prim . set-port-position!) (uy2ce6 core-prim . put-u8) (uy2ce5 core-prim . put-string) (uy2ce4 core-prim . put-datum) (uy2ce3 core-prim . put-char) (uy2ce2 core-prim . put-bytevector) (uy2ce1 core-prim . port?) (uy2ce0 core-prim . port-transcoder) (uy2cdf core-prim . port-position) (uy2cde core-prim . port-has-set-port-position!?) (uy2cdd core-prim . port-has-port-position?) (uy2cdc core-prim . port-eof?) (uy2cdb core-prim . output-port-buffer-mode) (uy2cda core-prim . open-string-output-port) (uy2cd9 core-prim . open-string-input-port) (uy2cd8 core-prim . open-file-output-port) (uy2cd7 core-prim . open-file-input/output-port) (uy2cd6 core-prim . open-file-input-port) (uy2cd5 core-prim . open-bytevector-output-port) (uy2cd4 core-prim . open-bytevector-input-port) (uy2cd3 core-prim . native-transcoder) (uy2cd2 core-prim . native-eol-style) (uy2cd1 core-prim . make-transcoder) (uy2cd0 core-prim . latin-1-codec) (uy2ccf core-prim . make-i/o-write-error) (uy2cce core-prim . make-i/o-read-error) (uy2ccd core-prim . make-i/o-port-error) (uy2ccc core-prim . make-i/o-invalid-position-error) (uy2ccb core-prim . make-i/o-filename-error) (uy2cca core-prim . make-i/o-file-protection-error) (uy2cc9 core-prim . make-i/o-file-is-read-only-error) (uy2cc8 core-prim . make-i/o-file-does-not-exist-error) (uy2cc7 core-prim . make-i/o-file-already-exists-error) (uy2cc6 core-prim . make-i/o-error) (uy2cc5 core-prim . make-i/o-encoding-error) (uy2cc4 core-prim . make-i/o-decoding-error) (uy2cc3 core-prim . make-custom-textual-output-port) (uy2cc2 core-prim . make-custom-textual-input/output-port) (uy2cc1 core-prim . make-custom-textual-input-port) (uy2cc0 core-prim . make-custom-binary-output-port) (uy2cbf core-prim . make-custom-binary-input/output-port) (uy2cbe core-prim . make-custom-binary-input-port) (uy2cbd core-prim . make-bytevector) (uy2cbc core-prim . lookahead-u8) (uy2cbb core-prim . lookahead-char) (uy2cba core-prim . i/o-write-error?) (uy2cb9 core-prim . i/o-read-error?) (uy2cb8 core-prim . i/o-port-error?) (uy2cb7 core-prim . i/o-invalid-position-error?) (uy2cb6 core-prim . i/o-filename-error?) (uy2cb5 core-prim . i/o-file-protection-error?) (uy2cb4 core-prim . i/o-file-is-read-only-error?) (uy2cb3 core-prim . i/o-file-does-not-exist-error?) (uy2cb2 core-prim . i/o-file-already-exists-error?) (uy2cb1 core-prim . i/o-error?) (uy2cb0 core-prim . i/o-error-position) (uy2caf core-prim . i/o-error-port) (uy2cae core-prim . i/o-error-filename) (uy2cad core-prim . i/o-encoding-error?) (uy2cac core-prim . i/o-encoding-error-char) (uy2cab core-prim . i/o-decoding-error?) (uy2caa core-prim . get-u8) (uy2ca9 core-prim . get-string-n!) (uy2ca8 core-prim . get-string-n) (uy2ca7 core-prim . get-string-all) (uy2ca6 core-prim . get-line) (uy2ca5 core-prim . get-datum) (uy2ca4 core-prim . get-char) (uy2ca3 core-prim . get-bytevector-some) (uy2ca2 core-prim . get-bytevector-n!) (uy2ca1 core-prim . get-bytevector-n) (uy2ca0 core-prim . get-bytevector-all) (uy2c9f core-prim . flush-output-port) (uy2c9e core-prim . close-port) (uye4b core-prim . scheme-report-environment) (uy2c9d core-prim . quotient) (uye49 core-prim . null-environment) (uy2c9c core-prim . remainder) (uy2c9b core-prim . modulo) (uy2c9a core-prim . inexact->exact) (uy2c99 core-prim . force) (uy2c98 core-prim . exact->inexact) (uy2c97 core-prim . make-promise) (uy2c96 core-prim . exit) (uy2928 core-prim . command-line) (uy2c95 core-prim . string-fill!) (uy2c94 core-prim . string-set!) (uy2c93 core-prim . set-cdr!) (uy2c92 core-prim . set-car!) (uy2c91 core-prim . remove) (uy2c90 core-prim . remv) (uy2c8f core-prim . remp) (uy2c8e core-prim . remq) (uy2c8d core-prim . partition) (uy2c8c core-prim . memv) (uy2c8b core-prim . memq) (uy2c8a core-prim . memp) (uy2c89 core-prim . member) (uy2c88 core-prim . exists) (uy2c87 core-prim . for-all) (uy2c86 core-prim . fold-right) (uy2c85 core-prim . fold-left) (uy2c84 core-prim . find) (uy2c83 core-prim . filter) (uy2c82 core-prim . cons*) (uy2c81 core-prim . assv) (uy2c80 core-prim . assq) (uy2c7f core-prim . assp) (uy2c7e core-prim . assoc) (uy2c7d core-prim . call-with-string-output-port) (uy2c7c core-prim . call-with-port) (uy2c7b core-prim . call-with-bytevector-output-port) (uy2c7a core-prim . bytevector->string) (uy2c79 core-prim . buffer-mode?) (uy2c78 core-prim . binary-port?) (uy2c77 core-prim . with-exception-handler) (uy2c76 core-prim . raise-continuable) (uy2c75 core-prim . raise) (uye4f core-prim . eval) (uye47 core-prim . environment) (uy2c74 core-prim . make-enumeration) (uy2c73 core-prim . enum-set=?) (uy2c72 core-prim . enum-set-universe) (uy2c71 core-prim . enum-set-union) (uy2c70 core-prim . enum-set-subset?) (uy2c6f core-prim . enum-set-projection) (uy2c6e core-prim . enum-set-member?) (uy2c6d core-prim . enum-set-intersection) (uy2c6c core-prim . enum-set-indexer) (uy2c6b core-prim . enum-set-difference) (uy2c6a core-prim . enum-set-constructor) (uy2c69 core-prim . enum-set-complement) (uy2c68 core-prim . enum-set->list) (uy2c67 core-prim . who-condition?) (uy2c66 core-prim . warning?) (uy2c65 core-prim . violation?) (uy2c64 core-prim . undefined-violation?) (uy2c63 core-prim . syntax-violation?) (uy2c62 core-prim . syntax-violation-subform) (uy2c61 core-prim . syntax-violation-form) (uye6f core-prim . syntax-violation) (uy2c60 core-prim . simple-conditions) (uy2c5f core-prim . serious-condition?) (uy2c5e core-prim . non-continuable-violation?) (uy2c5d core-prim . message-condition?) (uy2c5c core-prim . make-who-condition) (uy2c5b core-prim . make-warning) (uy2c5a core-prim . make-violation) (uy2c59 core-prim . make-undefined-violation) (uy2c58 core-prim . make-syntax-violation) (uy2c57 core-prim . make-serious-condition) (uy2c56 core-prim . make-non-continuable-violation) (uy2c55 core-prim . make-message-condition) (uy2c54 core-prim . make-lexical-violation) (uy2c53 core-prim . make-irritants-condition) (uy2c52 core-prim . make-implementation-restriction-violation) (uy2c51 core-prim . make-error) (uy2c50 core-prim . make-assertion-violation) (uy2c4f core-prim . lexical-violation?) (uy2c4e core-prim . irritants-condition?) (uy2c4d core-prim . implementation-restriction-violation?) (uy2c4c core-prim . error?) (uy2c4b core-prim . condition-who) (uy2c4a core-prim . condition-predicate) (uy2c49 core-prim . condition-message) (uy2c48 core-prim . condition-irritants) (uy2c47 core-prim . condition-accessor) (uy2c46 core-prim . condition) (uy2c45 core-prim . assertion-violation?) (uy2c44 core-prim . condition?) (uy2c43 core-prim . utf32->string) (uy2c42 core-prim . utf16->string) (uy2c41 core-prim . utf8->string) (uy2c40 core-prim . uint-list->bytevector) (uy2c3f core-prim . u8-list->bytevector) (uy2c3e core-prim . string->utf8) (uy2c3d core-prim . string->utf32) (uy2c3c core-prim . string->utf16) (uy2c3b core-prim . sint-list->bytevector) (uy2c3a core-prim . native-endianness) (uy2c39 core-prim . bytevector?) (uy2c38 core-prim . bytevector=?) (uy2c37 core-prim . bytevector-uint-set!) (uy2c36 core-prim . bytevector-uint-ref) (uy2c35 core-prim . bytevector-u8-set!) (uy2c34 core-prim . bytevector-u8-ref) (uy2c33 core-prim . bytevector-u64-set!) (uy2c32 core-prim . bytevector-u64-ref) (uy2c31 core-prim . bytevector-u64-native-set!) (uy2c30 core-prim . bytevector-u64-native-ref) (uy2c2f core-prim . bytevector-u32-set!) (uy2c2e core-prim . bytevector-u32-ref) (uy2c2d core-prim . bytevector-u32-native-set!) (uy2c2c core-prim . bytevector-u32-native-ref) (uy2c2b core-prim . bytevector-u16-set!) (uy2c2a core-prim . bytevector-u16-ref) (uy2c29 core-prim . bytevector-u16-native-set!) (uy2c28 core-prim . bytevector-u16-native-ref) (uy2c27 core-prim . bytevector-sint-set!) (uy2c26 core-prim . bytevector-sint-ref) (uy2c25 core-prim . bytevector-s8-set!) (uy2c24 core-prim . bytevector-s8-ref) (uy2c23 core-prim . bytevector-s64-set!) (uy2c22 core-prim . bytevector-s64-ref) (uy2c21 core-prim . bytevector-s64-native-set!) (uy2c20 core-prim . bytevector-s64-native-ref) (uy2c1f core-prim . bytevector-s32-set!) (uy2c1e core-prim . bytevector-s32-ref) (uy2c1d core-prim . bytevector-s32-native-set!) (uy2c1c core-prim . bytevector-s32-native-ref) (uy2c1b core-prim . bytevector-s16-set!) (uy2c1a core-prim . bytevector-s16-ref) (uy2c19 core-prim . bytevector-s16-native-set!) (uy2c18 core-prim . bytevector-s16-native-ref) (uy2c17 core-prim . bytevector-length) (uy2c16 core-prim . bytevector-ieee-single-ref) (uy2c15 core-prim . bytevector-ieee-single-set!) (uy2c14 core-prim . bytevector-ieee-single-native-set!) (uy2c13 core-prim . bytevector-ieee-single-native-ref) (uy2c12 core-prim . bytevector-ieee-double-set!) (uy2c11 core-prim . bytevector-ieee-double-ref) (uy2c10 core-prim . bytevector-ieee-double-native-set!) (uy2c0f core-prim . bytevector-ieee-double-native-ref) (uy2c0e core-prim . bytevector-fill!) (uy2c0d core-prim . bytevector-copy!) (uy2c0c core-prim . bytevector-copy) (uy2c0b core-prim . bytevector->uint-list) (uy2c0a core-prim . bytevector->u8-list) (uy2c09 core-prim . bytevector->sint-list) (uy2c08 core-prim . no-nans-violation?) (uy2c07 core-prim . no-infinities-violation?) (uy2c06 core-prim . make-no-nans-violation) (uy2c05 core-prim . make-no-infinities-violation) (uy2c04 core-prim . real->flonum) (uy2c03 core-prim . flzero?) (uy2c02 core-prim . fltruncate) (uy2c01 core-prim . fltan) (uy2c00 core-prim . flsqrt) (uy2bff core-prim . flsin) (uy2bfe core-prim . flround) (uy2bfd core-prim . flpositive?) (uy2bfc core-prim . flonum?) (uy2bfb core-prim . flodd?) (uy2bfa core-prim . flnumerator) (uy2bf9 core-prim . flnegative?) (uy2bf8 core-prim . flnan?) (uy2bf7 core-prim . flmod0) (uy2bf6 core-prim . flmod) (uy2bf5 core-prim . flmin) (uy2bf4 core-prim . flmax) (uy2bf3 core-prim . fllog) (uy2bf2 core-prim . flinteger?) (uy2bf1 core-prim . flinfinite?) (uy2bf0 core-prim . flfloor) (uy2bef core-prim . flfinite?) (uy2bee core-prim . flexpt) (uy2bed core-prim . flexp) (uy2bec core-prim . fleven?) (uy2beb core-prim . fldiv0-and-mod0) (uy2bea core-prim . fldiv0) (uy2be9 core-prim . fldiv-and-mod) (uy2be8 core-prim . fldiv) (uy2be7 core-prim . fldenominator) (uy2be6 core-prim . flcos) (uy2be5 core-prim . flceiling) (uy2be4 core-prim . flatan) (uy2be3 core-prim . flasin) (uy2be2 core-prim . flacos) (uy2be1 core-prim . flabs) (uy2be0 core-prim . fl>?) (uy2bdf core-prim . fl>=?) (uy2bde core-prim . fl=?) (uy2bdd core-prim . fl<?) (uy2bdc core-prim . fl<=?) (uy2bdb core-prim . fl/) (uy2bda core-prim . fl-) (uy2bd9 core-prim . fl+) (uy2bd8 core-prim . fl*) (uy2bd7 core-prim . fixnum->flonum) (uy2bd6 core-prim . fxzero?) (uy2bd5 core-prim . fxxor) (uy2bd4 core-prim . fxrotate-bit-field) (uy2bd3 core-prim . fxreverse-bit-field) (uy2bd2 core-prim . fxpositive?) (uy2bd1 core-prim . fxodd?) (uy2bd0 core-prim . fxnot) (uy2bcf core-prim . fxnegative?) (uy2bce core-prim . fxmod0) (uy2bcd core-prim . fxmod) (uy2bcc core-prim . fxmin) (uy2bcb core-prim . fxmax) (uy2bca core-prim . fxlength) (uy2bc9 core-prim . fxior) (uy2bc8 core-prim . fxif) (uy2bc7 core-prim . fxfirst-bit-set) (uy2bc6 core-prim . fxeven?) (uy2bc5 core-prim . fxdiv0-and-mod0) (uy2bc4 core-prim . fxdiv0) (uy2bc3 core-prim . fxdiv-and-mod) (uy2bc2 core-prim . fxdiv) (uy2bc1 core-prim . fxcopy-bit-field) (uy2bc0 core-prim . fxcopy-bit) (uy2bbf core-prim . fxbit-set?) (uy2bbe core-prim . fxbit-field) (uy2bbd core-prim . fxbit-count) (uy2bbc core-prim . fxarithmetic-shift-right) (uy2bbb core-prim . fxarithmetic-shift-left) (uy2bba core-prim . fxarithmetic-shift) (uy2bb9 core-prim . fxand) (uy2bb8 core-prim . fx>?) (uy2bb7 core-prim . fx>=?) (uy2bb6 core-prim . fx=?) (uy2bb5 core-prim . fx<?) (uy2bb4 core-prim . fx<=?) (uy2bb3 core-prim . fx-/carry) (uy2bb2 core-prim . fx-) (uy2bb1 core-prim . fx+/carry) (uy2bb0 core-prim . fx+) (uy2baf core-prim . fx*/carry) (uy2bae core-prim . fx*) (uy2bad core-prim . greatest-fixnum) (uy2bac core-prim . least-fixnum) (uy2bab core-prim . fixnum-width) (uy2baa core-prim . fixnum?) (uy2ba9 core-prim . bitwise-rotate-bit-field) (uy2ba8 core-prim . bitwise-reverse-bit-field) (uy2ba7 core-prim . bitwise-length) (uy2ba6 core-prim . bitwise-if) (uy2ba5 core-prim . bitwise-first-bit-set) (uy2ba4 core-prim . bitwise-copy-bit-field) (uy2ba3 core-prim . bitwise-copy-bit) (uy2ba2 core-prim . bitwise-bit-set?) (uy2ba1 core-prim . bitwise-bit-field) (uy2ba0 core-prim . bitwise-bit-count) (uy2b9f core-prim . bitwise-xor) (uy2b9e core-prim . bitwise-ior) (uy2b9d core-prim . bitwise-and) (uy2b9c core-prim . bitwise-not) (uy2b9b core-prim . bitwise-arithmetic-shift-right) (uy2b9a core-prim . bitwise-arithmetic-shift-left) (uy2b99 core-prim . bitwise-arithmetic-shift) (uy2b98 core-prim . zero?) (uy2b97 core-prim . vector?) (uy2b96 core-prim . vector-set!) (uy2b95 core-prim . vector-ref) (uy2b94 core-prim . vector-map) (uy2b93 core-prim . vector-length) (uy2b92 core-prim . vector-for-each) (uy2b91 core-prim . vector-fill!) (uy2b90 core-prim . vector->list) (uy2b8f core-prim . vector) (uy2b8e core-prim . values) (uy2b8d core-prim . truncate) (uy2b8c core-prim . tan) (uy2b8b core-prim . symbol?) (uy2b8a core-prim . symbol=?) (uy2b89 core-prim . symbol->string) (uy2b88 core-prim . substring) (uy2b87 core-prim . string?) (uy2b86 core-prim . string>?) (uy2b85 core-prim . string>=?) (uy2b84 core-prim . string=?) (uy2b83 core-prim . string<?) (uy2b82 core-prim . string<=?) (uy2b81 core-prim . string-ref) (uy2b80 core-prim . string-length) (uy2b7f core-prim . string-for-each) (uy2b7e core-prim . string-copy) (uy2b7d core-prim . string-append) (uy2b7c core-prim . string->symbol) (uy2b7b core-prim . string->number) (uy2b7a core-prim . string->list) (uy2b79 core-prim . string) (uy2b78 core-prim . sqrt) (uy2b77 core-prim . sin) (uy2b76 core-prim . round) (uy2b75 core-prim . reverse) (uy2b74 core-prim . real?) (uy2b73 core-prim . real-valued?) (uy2b72 core-prim . real-part) (uy2b71 core-prim . rationalize) (uy2b70 core-prim . rational?) (uy2b6f core-prim . rational-valued?) (uy2b6e core-prim . procedure?) (uy2b6d core-prim . positive?) (uy2b6c core-prim . pair?) (uy2b6b core-prim . odd?) (uy2b6a core-prim . numerator) (uy2b69 core-prim . number?) (uy2b68 core-prim . number->string) (uy2b67 core-prim . null?) (uy2b66 core-prim . not) (uy2b65 core-prim . negative?) (uy2b64 core-prim . nan?) (uy2b63 core-prim . min) (uy2b62 core-prim . max) (uy2b61 core-prim . map) (uy2b60 core-prim . make-vector) (uy2b5f core-prim . make-string) (uy2b5e core-prim . make-rectangular) (uy2b5d core-prim . make-polar) (uy2b5c core-prim . magnitude) (uy2b5b core-prim . log) (uy2b5a core-prim . list?) (uy2b59 core-prim . list-tail) (uy2b58 core-prim . list-ref) (uy2b57 core-prim . list->vector) (uy2b56 core-prim . list->string) (uy2b55 core-prim . list) (uy2b54 core-prim . length) (uy2b53 core-prim . lcm) (uy2b52 core-prim . integer?) (uy2b51 core-prim . integer-valued?) (uy2b50 core-prim . integer->char) (uy2b4f core-prim . infinite?) (uy2b4e core-prim . inexact?) (uy2b4d core-prim . inexact) (uy2b4c core-prim . imag-part) (uy2b4b core-prim . gcd) (uy2b4a core-prim . for-each) (uy2b49 core-prim . floor) (uy2b48 core-prim . finite?) (uy2b47 core-prim . expt) (uy2b46 core-prim . exp) (uy2b45 core-prim . exact?) (uy2b44 core-prim . exact-integer-sqrt) (uy2b43 core-prim . exact) (uy2b42 core-prim . even?) (uy2b41 core-prim . error) (uy2b40 core-prim . eqv?) (uy2b3f core-prim . equal?) (uy2b3e core-prim . eq?) (uy2b3d core-prim . dynamic-wind) (uy2b3c core-prim . div0-and-mod0) (uy2b3b core-prim . mod0) (uy2b3a core-prim . div0) (uy2b39 core-prim . div-and-mod) (uy2b38 core-prim . mod) (uy2b37 core-prim . div) (uy2b36 core-prim . denominator) (uy2b35 core-prim . cos) (uy2b34 core-prim . cons) (uy2b33 core-prim . complex?) (uy2b32 core-prim . char?) (uy2b31 core-prim . char>?) (uy2b30 core-prim . char>=?) (uy2b2f core-prim . char=?) (uy2b2e core-prim . char<?) (uy2b2d core-prim . char<=?) (uy2b2c core-prim . char->integer) (uy2b2b core-prim . ceiling) (uy2b2a core-prim . call-with-values) (uy2b29 core-prim . call/cc) (uy2b28 core-prim . call-with-current-continuation) (uy2b27 core-prim . cddddr) (uy2b26 core-prim . cdddar) (uy2b25 core-prim . cddadr) (uy2b24 core-prim . cddaar) (uy2b23 core-prim . cdaddr) (uy2b22 core-prim . cdadar) (uy2b21 core-prim . cdaadr) (uy2b20 core-prim . cdaaar) (uy2b1f core-prim . cadddr) (uy2b1e core-prim . caddar) (uy2b1d core-prim . cadadr) (uy2b1c core-prim . cadaar) (uy2b1b core-prim . caaddr) (uy2b1a core-prim . caadar) (uy2b19 core-prim . caaadr) (uy2b18 core-prim . caaaar) (uy2b17 core-prim . cdddr) (uy2b16 core-prim . cddar) (uy2b15 core-prim . cdadr) (uy2b14 core-prim . cdaar) (uy2b13 core-prim . caddr) (uy2b12 core-prim . cadar) (uy2b11 core-prim . caadr) (uy2b10 core-prim . caaar) (uy2b0f core-prim . cddr) (uy2b0e core-prim . cdar) (uy2b0d core-prim . cadr) (uy2b0c core-prim . caar) (uy2b0b core-prim . cdr) (uy2b0a core-prim . car) (uy2b09 core-prim . boolean?) (uy2b08 core-prim . boolean=?) (uy2b07 core-prim . atan) (uy2b06 core-prim . assertion-violation) (uye69 core-prim . assertion-error) (uy2b05 core-prim . asin) (uy2b04 core-prim . apply) (uy2b03 core-prim . append) (uy2b02 core-prim . angle) (uy2b01 core-prim . acos) (uy2b00 core-prim . abs) (uy2aff core-prim . /) (uy2afe core-prim . *) (uy2afd core-prim . -) (uy2afc core-prim . +) (uy2afb core-prim . >=) (uy2afa core-prim . >) (uy2af9 core-prim . =) (uy2af8 core-prim . <=) (uy2af7 core-prim . <) (uy2af6 core-prim . library) (uy2af5 $core-rtd &no-nans-rtd &no-nans-rcd) (uy2af4 $core-rtd &no-infinities-rtd &no-infinities-rcd) (uy2af3 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (uy2af2 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (uy2af1 $core-rtd &i/o-port-rtd &i/o-port-rcd) (uy2af0 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (uy2aef $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (uy2aee $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (uy2aed $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (uy2aec $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (uy2aeb $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (uy2aea $core-rtd &i/o-write-rtd &i/o-write-rcd) (uy2ae9 $core-rtd &i/o-read-rtd &i/o-read-rcd) (uy2ae8 $core-rtd &i/o-rtd &i/o-rcd) (uy2ae7 $core-rtd &undefined-rtd &undefined-rcd) (uy2ae6 $core-rtd &syntax-rtd &syntax-rcd) (uy2ae5 $core-rtd &lexical-rtd &lexical-rcd) (uy2ae4 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (uy2ae3 $core-rtd &non-continuable-rtd &non-continuable-rcd) (uy2ae2 $core-rtd &who-rtd &who-rcd) (uy2ae1 $core-rtd &irritants-rtd &irritants-rcd) (uy2ae0 $core-rtd &assertion-rtd &assertion-rcd) (uy2adf $core-rtd &violation-rtd &violation-rcd) (uy2ade $core-rtd &error-rtd &error-rcd) (uy2add $core-rtd &serious-rtd &serious-rcd) (uy2adc $core-rtd &warning-rtd &warning-rcd) (uy2adb $core-rtd &message-rtd &message-rcd) (uy2ada $core-rtd &condition-rtd &condition-rcd) (uy2ad9 macro . define-condition-type) (uy2ad8 macro . define-enumeration) (uy2ad7 macro . define-record-type) (uy2ad6 macro . parent-rtd) (uy2ad5 macro . nongenerative) (uy2ad4 macro . opaque) (uy2ad3 macro . sealed) (uy2ad2 macro . protocol) (uy2ad1 macro . parent) (uy2ad0 macro . immutable) (uy2acf macro . mutable) (uy2ace macro . fields) (uy2acd macro . error-handling-mode) (uy2acc macro . file-options) (uy2acb macro . buffer-mode) (uy2aca macro . eol-style) (uy2ac9 macro . guard) (uy2ac8 macro . trace-define) (uy2ac7 macro . trace-lambda) (uy2ac6 macro . unsyntax-splicing) (uy2ac5 macro . unsyntax) (uy2ac4 macro . unquote-splicing) (uy2ac3 macro . unquote) (uy2ac2 macro . _) (uy2ac1 macro . else) (uy2ac0 macro . =>) (uy2abf macro . ...) (uy2abe macro . assert) (uy2abd macro . endianness) (uy2abc macro . delay) (uy2abb macro . time) (uy2aba macro . do) (uy2ab9 macro . cond) (uy2ab8 macro . let*) (uy2ab7 macro . let*-values) (uy2ab6 macro . let-values) (uy2ab5 macro . identifier-syntax) (uy2ab4 macro . with-syntax) (uy2ab3 macro . quasisyntax) (uy2ab2 macro . quasiquote) (uy2ab1 macro . syntax-rules) (uy2ab0 macro . include) (uy2aaf macro . define-struct) (uy2aae core-macro . record-constructor-descriptor) (uy2aad core-macro . record-type-descriptor) (uy2aac macro . case) (uy2aab macro . parameterize) (uy2aaa macro . unless) (uy2aa9 macro . when) (uy2aa8 core-macro . or) (uy2aa7 core-macro . and) (uy2aa6 core-macro . if) (uy2aa5 core-macro . let) (uy2aa4 core-macro . letrec*) (uy2aa3 core-macro . letrec) (uy2aa2 core-macro . type-descriptor) (uy2aa1 core-macro . case-lambda) (uy2aa0 core-macro . lambda) (uy2a9f core-macro . syntax) (uy2a9e core-macro . syntax-case) (uy2a9d core-macro . quote) (uy2a9c core-macro . foreign-call) (uy2a9b letrec-syntax) (uy2a9a let-syntax) (uy2a99 set!) (uy2a98 import) (uy2a97 begin) (uy2a96 module) (uy2a95 define-syntax) (uy2a94 define)) values values '#f '#f '#f '#f) (uy9a3@uy7ef@install-library 'uy2e6c '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . uy2e13) (eval-core . uy2e12) (set-symbol-value! . uy2e11) (symbol-value . uy2e10) (gensym . uy2e0f) (void . uy2e0e)) '() values values '#f '#f '#f '#f) (uy9a3@uy7ef@install-library 'uy2e6d '(mosh) '() '() '() '() '((set-symbol-value! . uy2e11) (symbol-value . uy2e10) (regexp? . uy2e0c) (read-line . uy2e0b) (ungensym . uy2e09) (alist->eq-hash-table . uy2e08) (assoc-ref . uy2e07) (print . uy2e06) (format . uy2e05) (host-os . uy2e04) (library-path . uy7ce) (standard-library-path . uy2e03) (file-newer? . uy2df3) (stat-mtime . uy2df2) (digit->integer . uy2dee) (call-with-string-input-port . uy2ded) (call-with-string-io . uy2dec) (string-split . uy2deb) (bytevector-for-each . uy2dea) (string->regexp . uy2de9) (rxmatch . uy2de8) (regexp-replace-all . uy2de7) (hashtable-fold-left . uy2de6) (hashtable-for-each . uy2de5) (set-current-directory! . uy2ddf) (expand-path . uy2dde) (current-directory . uy2ddd) (p . uy2d9c) (get-timeofday . uy2d83) (get-command-line . uy2d82) (sys-display . uy2d81) (whereis . uy2d80) (register . uy2d7f) (vm-join! . uy2d7e) (vm-set-value! . uy2d7d) (vm? . uy2d7c) (main-vm? . uy2d7b) (vm-eval . uy2d7a) (vm-self . uy2d79) (vm-start! . uy2d78) (make-vm . uy2d77) (mutex-try-lock! . uy2d76) (mutex-unlock! . uy2d75) (mutex-lock! . uy2d74) (mutex? . uy2d73) (make-mutex . uy2d72) (condition-variable-notify-all! . uy2d71) (condition-variable-notify! . uy2d70) (condition-variable-wait! . uy2d6f) (make-condition-variable . uy2d6e) (write/ss . uy2d6d) (mosh-executable-path . uy2d6c) (make-file-options . uy2d6b) (source-info . uy2d6a) (make-compiler-instruction . uy2d69) (make-instruction . uy2d68) (set-annotation! . uy2d67) (get-annotation . uy2d66) (annotated-pair? . uy2d65) (annotated-cons . uy2d64) (set-source-info! . uy2d63) (bignum? . uy2d62) (fast-equal? . uy2d61) (fasl-read . uy2d60) (fasl-write . uy2d5f) (time-usage . uy2d5e) (os-constant . uy2d5d) (condition-printer . uy2d5c) (time . uy2abb) (include . uy2ab0)) '() values values '#f '#f '#f '#f) (uy9a3@uy7ef@install-library 'uy2e6e '(system) '() '() '() '() '((gensym-prefix-set! . uy2e0a) (ssl-supported? . uy2e02) (ssl-socket? . uy2e01) (socket-sslize! . uy2e00) (%monapi-stream-read . uy2dff) (%monapi-stream-write . uy2dfe) (%monapi-stream-handle . uy2dfd) (%monapi-make-stream . uy2dfc) (%monapi-name-add! . uy2dfb) (%monapi-message-receive . uy2dfa) (%monapi-name-whereis . uy2df9) (%monapi-message-reply . uy2df8) (%monapi-message-send-receive . uy2df7) (%monapi-message-send . uy2df6) (process-terminate! . uy2df5) (process-list . uy2df4) (write-to-file . uy2df1) (file->list . uy2df0) (file->string . uy2def) (mosh-cache-dir . uy5b8) (%start-process . uy2de4) (%call-process . uy2de3) (local-tz-offset . uy2de2) (microseconds . uy2de1) (directory-list . uy2de0) (expand-path . uy2dde) (%getpid . uy2ddc) (%waitpid . uy2ddb) (simple-struct-name . uy2dda) (simple-struct-set! . uy2dd9) (simple-struct-ref . uy2dd8) (make-simple-struct . uy2dd7) (simple-struct? . uy2dd6) (pointer-ref-c-int64 . uy2dd5) (pointer-ref-c-int32 . uy2dd4) (pointer-ref-c-int16 . uy2dd3) (pointer-ref-c-int8 . uy2dd2) (pointer-ref-c-uint64 . uy2dd1) (pointer-ref-c-uint32 . uy2dd0) (pointer-ref-c-uint16 . uy2dcf) (pointer-ref-c-uint8 . uy2dce) (pointer-set-c-uint64! . uy2dcd) (pointer-set-c-uint32! . uy2dcc) (pointer-set-c-uint16! . uy2dcb) (pointer-set-c-uint8! . uy2dca) (pointer-set-c-int64! . uy2dc9) (pointer-set-c-int32! . uy2dc8) (pointer-set-c-int16! . uy2dc7) (pointer-set-c-int8! . uy2dc6) (pointer-set-c-pointer! . uy2dc5) (pointer-set-c-double! . uy2dc4) (pointer-set-c-float! . uy2dc3) (pointer-set-c-long-long! . uy2dc2) (pointer-set-c-long! . uy2dc1) (pointer-set-c-int! . uy2dc0) (pointer-set-c-short! . uy2dbf) (pointer-set-c-char! . uy2dbe) (pointer-ref-c-pointer . uy2dbd) (pointer-ref-c-double . uy2dbc) (pointer-ref-c-float . uy2dbb) (pointer-ref-c-unsigned-long-long . uy2dba) (pointer-ref-c-signed-long-long . uy2db9) (pointer-ref-c-unsigned-long . uy2db8) (pointer-ref-c-signed-long . uy2db7) (pointer-ref-c-unsigned-int . uy2db6) (pointer-ref-c-signed-int . uy2db5) (pointer-ref-c-unsigned-short . uy2db4) (pointer-ref-c-signed-short . uy2db3) (pointer-ref-c-unsigned-char . uy2db2) (pointer-ref-c-signed-char . uy2db1) (pointer->integer . uy2db0) (integer->pointer . uy2daf) (pointer? . uy2dae) (shared-errno . uy2dad) (%ffi-free-c-callback-trampoline . uy2dac) (%ffi-make-c-callback-trampoline . uy2dab) (%ffi-free . uy2daa) (%ffi-malloc . uy2da9) (%ffi-supported? . uy2da8) (%ffi-pointer->string . uy2da7) (%ffi-call . uy2da6) (%ffi-lookup . uy2da5) (%ffi-open . uy2da4) (null-terminated-utf8->string . uy2da3) (null-terminated-bytevector->string . uy2da2) (%exec . uy2da1) (%fork . uy2da0) (%pipe . uy2d9f) (%confstr . uy2d9e) (%dup . uy2d9d) (open-output-string . uy2d9b) (get-output-string . uy2d9a) (file-stat-ctime . uy2d99) (file-stat-atime . uy2d98) (file-stat-mtime . uy2d97) (file-size-in-bytes . uy2d96) (file-writable? . uy2d95) (file-executable? . uy2d94) (file-readable? . uy2d93) (file-regular? . uy2d92) (file-symbolic-link? . uy2d91) (file-directory? . uy2d90) (create-symbolic-link . uy2d8f) (rename-file . uy2d8e) (delete-directory . uy2d8d) (create-directory . uy2d8c) (create-mosh-cache-dir . uy2d8b) (get-environment-variables . uy2d8a) (current-exception-handler . uy2d89) (get-environment-variable . uy2d88) (join-wraps . uy2d87) (id->real-label . uy2d86) (same-marks? . uy2d85) (same-marks*? . uy2d84) (disasm . uy2d5b) (make-parameter . uy5b6) (socket-port . uy2d5a) (socket-shutdown . uy2d59) (socket-close . uy2d58) (socket-send . uy2d57) (socket-recv! . uy2d56) (socket-recv . uy2d55) (make-server-socket . uy2d54) (make-client-socket . uy2d53) (socket-accept . uy2d52) (socket? . uy2d51) (parameterize . uy2aab)) '() values values '#f '#f '#f '#f)))
(begin (set! uy2913@ref (unspecified)) (set! uy2915@x* (unspecified)) (set! uy2917@add-library-path! (unspecified)) (set! uy2919@parse-and-add-library-path (unspecified)) (set! uy291b@for-each-with-index (unspecified)) (set! uy291d@rpad (unspecified)) (set! uy291f@condition-printer/p (unspecified)) (set! uy2921@record->field-alist (unspecified)) (set! uy2923@map-with-index (unspecified)) (set! uy2925@repl (unspecified)) (set! uy2927@trace-printer (unspecified)) (set! uy2929@command-line (unspecified)) (set! uy292b@local-library-path (unspecified)) (set! uy292d@load/args (unspecified)) (set! uy292f@load (unspecified)) (set! uy2931@ironscheme-build (unspecified)) (set! uy2933@eval-top-level (unspecified)) (set! uy2935@compile-system-libraries (unspecified)) (set! uy2937@compile (unspecified)) (set! uy2939@compile->closure (unspecified)) (set! uy293b@pre-compile-r6rs-file (unspecified)) (set! uy293d@load-r6rs-top-level (unspecified)) (set! uy293f@load-r6rs-top-level-sexp (unspecified)) (set! uy2941@prefix-inc (unspecified)) (set! uy2943@prefix-inc! (unspecified)) (set! uy2913@ref (lambda (uy297e@rtd uy297f@i uy2980@x) (let ((uy2984@val ((record-accessor uy297e@rtd uy297f@i) uy2980@x))) (if (symbol? uy2984@val) (ungensym uy2984@val) uy2984@val)))) (set! uy2a7a@uy2913@ref uy2913@ref) (set! uy2915@x* '()) (set! uy2a7b@uy2915@x* uy2915@x*) (set! uy2917@add-library-path! (lambda (uy2986@path) (uy993@uy7cf@library-path (append (uy993@uy7cf@library-path) (list uy2986@path))))) (set! uy2a7c@uy2917@add-library-path! uy2917@add-library-path!) (set! uy2919@parse-and-add-library-path (lambda (uy2988@paths uy2989@message) (letrec* ((uy298d@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((uy298e@t uy2988@paths)) (if uy298e@t ((lambda (uy2990@paths) (for-each (lambda (uy2992@path) (if (file-exists? uy2992@path) (uy2917@add-library-path! (expand-path uy2992@path)) (format (current-error-port) uy2989@message uy2992@path))) (string-split uy2990@paths uy298d@separator))) uy298e@t) (void)))))) (set! uy2a7d@uy2919@parse-and-add-library-path uy2919@parse-and-add-library-path) (set! uy291b@for-each-with-index (lambda (uy2994@proc uy2995@lst) (letrec ((uy2998@loop (lambda (uy299a@i uy299b@lst) (if (null? uy299b@lst) (if '#f '#f (void)) (begin (uy2994@proc uy299a@i (car uy299b@lst)) (uy2998@loop (+ uy299a@i '1) (cdr uy299b@lst))))))) (uy2998@loop '1 uy2995@lst)))) (set! uy2a7e@uy291b@for-each-with-index uy291b@for-each-with-index) (set! uy291d@rpad (lambda (uy299e@str uy299f@pad uy29a0@n) (let ((uy29a4@rest (- uy29a0@n (string-length (format '"~a" uy299e@str))))) (let uy29aa@loop ((uy29a6@rest uy29a4@rest) (uy29a7@ret (format '"~a" uy299e@str))) (if (<= uy29a6@rest '0) uy29a7@ret (uy29aa@loop (- uy29a6@rest '1) (string-append uy29a7@ret uy299f@pad))))))) (set! uy2a7f@uy291d@rpad uy291d@rpad) (set! uy291f@condition-printer/p (lambda (uy29ac@e uy29ad@port) (letrec* ((uy29b1@max-condition-len (apply max (map (lambda (uy29c2@c) (string-length (symbol->string (record-type-name (record-rtd uy29c2@c))))) (simple-conditions uy29ac@e))))) (begin (display '" Condition components:\n" uy29ad@port) (uy291b@for-each-with-index (lambda (uy29b2@i uy29b3@x) (let ((uy29b6@rtd (record-rtd uy29b3@x)) (uy29b7@fields-alist (uy2921@record->field-alist uy29b3@x))) (begin (format uy29ad@port '" ~d. ~a" uy29b2@i (uy291d@rpad (symbol->string (record-type-name uy29b6@rtd)) '" " uy29b1@max-condition-len)) (if (null? uy29b7@fields-alist) (newline uy29ad@port) (void)) (let uy29be@loop ((uy29ba@first '#t) (uy29bb@fields-alist uy29b7@fields-alist)) (if (null? uy29bb@fields-alist) '() (let ((uy29c0@field (car uy29bb@fields-alist))) (begin (if (not uy29ba@first) (display (uy291d@rpad '"" '" " (+ '4 uy29b1@max-condition-len)) uy29ad@port) (void)) (display '"       " uy29ad@port) (display (car uy29c0@field) uy29ad@port) (display '": " uy29ad@port) (write (cdr uy29c0@field) uy29ad@port) (newline uy29ad@port) (uy29be@loop '#f (cdr uy29bb@fields-alist))))))))) (simple-conditions uy29ac@e)))))) (set! uy2a80@uy291f@condition-printer/p uy291f@condition-printer/p) (set! uy2921@record->field-alist (lambda (uy29c4@r) (letrec* ((uy29c7@ref (lambda (uy29d2@rtd uy29d3@i uy29d4@x) (let ((uy29d8@val ((record-accessor uy29d2@rtd uy29d3@i) uy29d4@x))) (if (symbol? uy29d8@val) (ungensym uy29d8@val) uy29d8@val))))) (let uy29cc@loop ((uy29c8@ret '()) (uy29c9@rtd (record-rtd uy29c4@r))) (if uy29c9@rtd (uy29cc@loop (append uy29c8@ret (uy2923@map-with-index (lambda (uy29ce@i uy29cf@field) (cons uy29cf@field (uy29c7@ref uy29c9@rtd uy29ce@i uy29c4@r))) (vector->list (record-type-field-names uy29c9@rtd)))) (record-type-parent uy29c9@rtd)) uy29c8@ret))))) (set! uy2a81@uy2921@record->field-alist uy2921@record->field-alist) (set! uy2923@map-with-index (lambda (uy29da@proc uy29db@lst) (let uy29e4@loop ((uy29de@i '0) (uy29df@lst uy29db@lst) (uy29e0@ret '())) (if (null? uy29df@lst) (reverse uy29e0@ret) (uy29e4@loop (+ uy29de@i '1) (cdr uy29df@lst) (cons (uy29da@proc uy29de@i (car uy29df@lst)) uy29e0@ret)))))) (set! uy2a82@uy2923@map-with-index uy2923@map-with-index) (set! uy2925@repl (lambda uy29e6@x (letrec* ((uy29e9@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (uy29ec@uy29ea) (lambda () (with-exception-handler (lambda (uy29ee@e) ((call/cc (lambda (uy29f0@uy29eb) (uy29ec@uy29ea (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? uy29ee@e) (uy291f@condition-printer/p uy29ee@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" uy29ee@e))) (uy29f0@uy29eb (lambda () (raise-continuable uy29ee@e)))))))))) (lambda () (let uy29f6@loop ((uy29f2@line (get-line (current-input-port))) (uy29f3@accum '"")) (letrec* ((uy29f9@parentheses-ok? (lambda (uy2a04@text) (let uy2a0c@loop ((uy2a06@chars (string->list uy2a04@text)) (uy2a07@p0 '0) (uy2a08@p1 '0)) (if (null? uy2a06@chars) (= '0 uy2a07@p0 uy2a08@p1) (let ((uy2a0e@t (car uy2a06@chars))) (if (memv uy2a0e@t '(#\()) (uy2a0c@loop (cdr uy2a06@chars) (+ uy2a07@p0 '1) uy2a08@p1) (if (memv uy2a0e@t '(#\))) (uy2a0c@loop (cdr uy2a06@chars) (- uy2a07@p0 '1) uy2a08@p1) (if (memv uy2a0e@t '(#\[)) (uy2a0c@loop (cdr uy2a06@chars) uy2a07@p0 (+ uy2a08@p1 '1)) (if (memv uy2a0e@t '(#\])) (uy2a0c@loop (cdr uy2a06@chars) uy2a07@p0 (- uy2a08@p1 '1)) (uy2a0c@loop (cdr uy2a06@chars) uy2a07@p0 uy2a08@p1)))))))))) (uy29fb@eval-string-print (lambda (uy29fe@text) (if (not (or (string=? '"\n" uy29fe@text) (= '0 (string-length uy29fe@text)))) (call-with-values (lambda () (uy2933@eval-top-level (call-with-port (open-string-input-port uy29fe@text) read))) (lambda uy2a00@out* (for-each (lambda (uy2a02@out) (begin (write/ss uy2a02@out) (newline))) uy2a00@out*))) (void))))) (if (eof-object? uy29f2@line) (begin (uy29fb@eval-string-print uy29f3@accum) (exit)) (let ((uy29fc@current (string-append uy29f3@accum uy29f2@line))) (if (uy29f9@parentheses-ok? uy29fc@current) (uy29fb@eval-string-print uy29fc@current) (uy29f6@loop (get-line (current-input-port)) uy29fc@current)))))))))))) (newline) (uy29e9@rec))))) (uy29e9@rec)))) (set! uy2a83@uy2925@repl uy2925@repl) (set! uy2927@trace-printer (uy6d9@uy5b7@make-parameter write)) (set! uy2a84@uy2927@trace-printer uy2927@trace-printer) (set! uy2929@command-line (uy6d9@uy5b7@make-parameter (get-command-line))) (set! uy2a85@uy2929@command-line uy2929@command-line) (set! uy292b@local-library-path (lambda (uy2a10@filename) (uy993@uy7cf@library-path))) (set! uy2a86@uy292b@local-library-path uy292b@local-library-path) (set! uy292d@load/args (lambda (uy2a12@filename . uy2a14@args) (begin (apply uy293d@load-r6rs-top-level uy2a12@filename 'load uy2a14@args) (void)))) (set! uy2a87@uy292d@load/args uy292d@load/args) (set! uy292f@load (lambda (uy2a16@filename) (begin (apply uy293d@load-r6rs-top-level uy2a16@filename 'load (uy2929@command-line)) (void)))) (set! uy2a88@uy292f@load uy292f@load) (set! uy2931@ironscheme-build (lambda () (uy292f@load '"ironscheme-buildscript.ss"))) (set! uy2a89@uy2931@ironscheme-build uy2931@ironscheme-build) (set! uy2933@eval-top-level (lambda (uy2a18@x) (uy28f0@uye50@eval uy2a18@x (uy2907@uye7e@interaction-environment)))) (set! uy2a8a@uy2933@eval-top-level uy2933@eval-top-level) (set! uy2935@compile-system-libraries (lambda () (uy2933@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! uy2a8b@uy2935@compile-system-libraries uy2935@compile-system-libraries) (set! uy2937@compile (lambda (uy2a1a@filename) (uy293d@load-r6rs-top-level uy2a1a@filename 'compile))) (set! uy2a8c@uy2937@compile uy2937@compile) (set! uy2939@compile->closure (lambda (uy2a1c@filename) (uy293d@load-r6rs-top-level uy2a1c@filename 'closure))) (set! uy2a8d@uy2939@compile->closure uy2939@compile->closure) (set! uy293b@pre-compile-r6rs-file (lambda (uy2a1e@filename) (uy293d@load-r6rs-top-level uy2a1e@filename 'compile))) (set! uy2a8e@uy293b@pre-compile-r6rs-file uy293b@pre-compile-r6rs-file) (set! uy293d@load-r6rs-top-level (lambda (uy2a20@filename uy2a21@how . uy2a24@args) (begin (uy993@uy7cf@library-path (uy292b@local-library-path uy2a20@filename)) (let ((uy2a26@x* (with-input-from-file uy2a20@filename (lambda () (let uy2a28@f () (let ((uy2a2a@x (uy6cb@uy59b@read-annotated))) (if (eof-object? uy2a2a@x) '() (cons uy2a2a@x (uy2a28@f))))))))) (let ((uy2a2c@t uy2a21@how)) (if (memv uy2a2c@t '(closure)) (uy2906@uye7c@pre-compile-r6rs-top-level uy2a26@x*) (if (memv uy2a2c@t '(load)) (begin (uy2929@command-line (cons uy2a20@filename (car uy2a24@args))) (uy6da@uy5b9@mosh-cache-dir (create-mosh-cache-dir)) (if (uy6da@uy5b9@mosh-cache-dir) (gensym-prefix-set! (uy2943@prefix-inc! (string-append (uy6da@uy5b9@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (uy2a2e@file) ((call/cc (lambda (uy2a32@uy2a30) (lambda () (with-exception-handler (lambda (uy2a34@c) ((call/cc (lambda (uy2a36@uy2a31) (uy2a32@uy2a30 (lambda () (if '#t '#t (uy2a36@uy2a31 (lambda () (raise-continuable uy2a34@c)))))))))) (lambda () (delete-file (string-append (uy6da@uy5b9@mosh-cache-dir) '"/" uy2a2e@file))))))))) (directory-list (uy6da@uy5b9@mosh-cache-dir))) (void)) (let ((uy2a38@compiled (uy2905@uye7a@compile-r6rs-top-level uy2a26@x*))) (begin (if (and (uy6da@uy5b9@mosh-cache-dir) (not (symbol-value '%disable-acc))) (uy997@uy7d7@serialize-all uy6d4@uy5ad@serialize-library uy730@uy6e9@compile-core-expr) (void)) (uy2a38@compiled)))) (if (memv uy2a2c@t '(compile)) (begin (uy2905@uye7a@compile-r6rs-top-level uy2a26@x*) (uy997@uy7d7@serialize-all uy6d4@uy5ad@serialize-library uy730@uy6e9@compile-core-expr)) (if '#f '#f (void)))))))))) (set! uy2a8f@uy293d@load-r6rs-top-level uy293d@load-r6rs-top-level) (set! uy293f@load-r6rs-top-level-sexp (lambda (uy2a3a@import-spec uy2a3b@thunk) (let ((uy2a46@uy2a3f uy993@uy7cf@library-path) (uy2a47@uy2a41 uy6da@uy5b9@mosh-cache-dir) (uy2a48@uy2a43 (uy292b@local-library-path '"")) (uy2a49@uy2a45 (create-mosh-cache-dir))) (let ((uy2a4e@swap (lambda () (begin (let ((uy2a50@t (uy2a46@uy2a3f))) (begin (uy2a46@uy2a3f uy2a48@uy2a43) (set! uy2a48@uy2a43 uy2a50@t))) (let ((uy2a52@t (uy2a47@uy2a41))) (begin (uy2a47@uy2a41 uy2a49@uy2a45) (set! uy2a49@uy2a45 uy2a52@t))))))) (dynamic-wind uy2a4e@swap (lambda () (begin (if (uy6da@uy5b9@mosh-cache-dir) (gensym-prefix-set! (uy2943@prefix-inc! (string-append (uy6da@uy5b9@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((uy2a58@uy2a55 uy2929@command-line) (uy2a59@uy2a57 '())) (let ((uy2a5c@swap (lambda () (let ((uy2a5e@t (uy2a58@uy2a55))) (begin (uy2a58@uy2a55 uy2a59@uy2a57) (set! uy2a59@uy2a57 uy2a5e@t)))))) (dynamic-wind uy2a5c@swap (lambda () ((uy2905@uye7a@compile-r6rs-top-level (list (cons 'import uy2a3a@import-spec) (list uy2a3b@thunk))))) uy2a5c@swap))))) uy2a4e@swap))))) (set! uy2a90@uy293f@load-r6rs-top-level-sexp uy293f@load-r6rs-top-level-sexp) (set! uy2941@prefix-inc (lambda (uy2a60@prefix-string) (let ((uy2a62@prefix (symbol->string uy2a60@prefix-string))) (let ((uy2a64@len (string-length uy2a62@prefix))) (let uy2a6c@loop ((uy2a66@i (- uy2a64@len '1)) (uy2a67@carry? '#t) (uy2a68@accum '())) (if (< uy2a66@i '0) (string->symbol (list->string (if uy2a67@carry? (cons '#\a uy2a68@accum) uy2a68@accum))) (if uy2a67@carry? (let ((uy2a6e@next-integer (+ '1 (char->integer (string-ref uy2a62@prefix uy2a66@i))))) (if (= uy2a6e@next-integer '123) (uy2a6c@loop (- uy2a66@i '1) '#f (cons '#\A uy2a68@accum)) (if (= uy2a6e@next-integer '91) (uy2a6c@loop (- uy2a66@i '1) '#t (cons '#\a uy2a68@accum)) (uy2a6c@loop (- uy2a66@i '1) '#f (cons (integer->char uy2a6e@next-integer) uy2a68@accum))))) (uy2a6c@loop (- uy2a66@i '1) '#f (cons (string-ref uy2a62@prefix uy2a66@i) uy2a68@accum))))))))) (set! uy2a91@uy2941@prefix-inc uy2941@prefix-inc) (set! uy2943@prefix-inc! (lambda (uy2a70@file) (begin (if (not (file-exists? uy2a70@file)) (call-with-output-file uy2a70@file (lambda (uy2a72@port) (write 'd uy2a72@port))) (void)) (let ((uy2a74@prefix (call-with-input-file uy2a70@file read))) (if (main-vm?) (let ((uy2a76@next-prefix (uy2941@prefix-inc uy2a74@prefix))) (begin (call-with-port (open-file-output-port uy2a70@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (uy2a78@port) (write uy2a76@next-prefix uy2a78@port))) uy2a74@prefix)) uy2a74@prefix))))) (set! uy2a92@uy2943@prefix-inc! uy2943@prefix-inc!) (begin (uy998@uy7d9@current-precompiled-library-loader uy6d5@uy5af@load-serialized-library) (set-symbol-value! 'load uy292f@load) (set-symbol-value! 'pre-compile-r6rs-file uy293b@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs uy2933@eval-top-level) (set-symbol-value! 'int-env-syms uy28e7@uye3e@interaction-environment-symbols) (set-symbol-value! 'expanded2core uy72f@uy6e7@expanded->core) (set-symbol-value! 'trace-printer uy2927@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (uy2944@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list uy2944@c))))) (uy2919@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (uy2919@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (uy2917@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (uy2917@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (uy2917@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((uy2946@prefix (lambda (uy2948@ext uy2949@ls) (append (map (lambda (uy294c@x) (string-append uy2948@ext uy294c@x)) uy2949@ls) uy2949@ls)))) (uy994@uy7d1@library-extensions (uy2946@prefix '".mosh" (uy994@uy7d1@library-extensions)))) (current-exception-handler (lambda (uy294e@c) (begin (if (condition? uy294e@c) (uy291f@condition-printer/p uy294e@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" uy294e@c)) uy294e@c))) (if ((call/cc (lambda (uy2952@uy2950) (lambda () (with-exception-handler (lambda (uy2954@c) ((call/cc (lambda (uy2956@uy2951) (uy2952@uy2950 (lambda () (if '#t '#f (uy2956@uy2951 (lambda () (raise-continuable uy2954@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (uy293f@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (uy2929@command-line)) (let ((uy2960@uy2959 uy2929@command-line) (uy2961@uy295b uy6da@uy5b9@mosh-cache-dir) (uy2962@uy295d '()) (uy2963@uy295f (create-mosh-cache-dir))) (let ((uy2968@swap (lambda () (begin (let ((uy296a@t (uy2960@uy2959))) (begin (uy2960@uy2959 uy2962@uy295d) (set! uy2962@uy295d uy296a@t))) (let ((uy296c@t (uy2961@uy295b))) (begin (uy2961@uy295b uy2963@uy295f) (set! uy2963@uy295f uy296c@t))))))) (dynamic-wind uy2968@swap (lambda () (begin (if (uy6da@uy5b9@mosh-cache-dir) (gensym-prefix-set! (uy2943@prefix-inc! (string-append (uy6da@uy5b9@mosh-cache-dir) '"/prefix.txt"))) (void)) (uy2925@repl))) uy2968@swap))) (begin (uy993@uy7cf@library-path (uy292b@local-library-path (car (uy2929@command-line)))) (set! uy2915@x* (with-input-from-file (car (uy2929@command-line)) (lambda () (let uy296e@f () (let ((uy2970@x (uy6cb@uy59b@read-annotated))) (if (eof-object? uy2970@x) '() (cons uy2970@x (uy296e@f)))))))) (uy2929@command-line (cons (car (uy2929@command-line)) (cdr (uy2929@command-line)))) (uy6da@uy5b9@mosh-cache-dir (create-mosh-cache-dir)) (if (uy6da@uy5b9@mosh-cache-dir) (gensym-prefix-set! (uy2943@prefix-inc! (string-append (uy6da@uy5b9@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (uy2972@file) ((call/cc (lambda (uy2976@uy2974) (lambda () (with-exception-handler (lambda (uy2978@c) ((call/cc (lambda (uy297a@uy2975) (uy2976@uy2974 (lambda () (if '#t '#t (uy297a@uy2975 (lambda () (raise-continuable uy2978@c)))))))))) (lambda () (delete-file (string-append (uy6da@uy5b9@mosh-cache-dir) '"/" uy2972@file))))))))) (directory-list (uy6da@uy5b9@mosh-cache-dir))) (void)) (let ((uy297c@compiled (uy2905@uye7a@compile-r6rs-top-level uy2915@x*))) (begin (if (and (uy6da@uy5b9@mosh-cache-dir) (not (symbol-value '%disable-acc))) (uy997@uy7d7@serialize-all uy6d4@uy5ad@serialize-library uy730@uy6e9@compile-core-expr) (void)) (uy297c@compiled))))))))
