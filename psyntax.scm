;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! gB28c3@library-file-path->cache-path (unspecified)) (set! gB28c5@read-annotated (unspecified)) (set! gB28c7@annotation-stripped (unspecified)) (set! gB28c9@annotation? (unspecified)) (set! gB28cb@annotation-source (unspecified)) (set! gB28cd@annotation-expression (unspecified)) (set! gB28cf@scm->fasl (unspecified)) (set! gB28d1@fasl-save (unspecified)) (set! gB28d3@fasl-load (unspecified)) (set! gB28d5@verbose? (unspecified)) (set! gB28d7@serialize-library (unspecified)) (set! gB28d9@load-serialized-library (unspecified)) (set! gB28db@make-record-printer (unspecified)) (set! gB28dd@compile-core (unspecified)) (set! gB28df@read-library-source-file (unspecified)) (set! gB28e1@make-parameter (unspecified)) (set! gB28e3@mosh-cache-dir (unspecified)) (set! gB2979@file-options-spec (unspecified)) (set! gB28c3@library-file-path->cache-path (lambda (gB297a@x) (call-with-values (lambda () (open-string-output-port)) (lambda (gB2980@gB297d gB2981@gB297f) (let ((gB2984@extract gB2981@gB297f) (gB2985@p gB2980@gB297d)) (letrec* ((gB2989@display-hex (lambda (gB2992@n) (if (<= '0 gB2992@n '9) (display gB2992@n gB2985@p) (display (integer->char (+ (char->integer '#\a) (- gB2992@n '10))) gB2985@p))))) (begin (let gB298c@f ((gB298a@ls (string-split gB297a@x '#\/))) (if (not (null? gB298a@ls)) (begin (display '"_" gB2985@p) (for-each (lambda (gB298e@c) (if (or (char<=? '#\a gB298e@c '#\z) (char<=? '#\A gB298e@c '#\Z) (char<=? '#\0 gB298e@c '#\9) (memv gB298e@c '(#\- #\. #\_ #\~))) (display gB298e@c gB2985@p) (begin (display '"%" gB2985@p) (let ((gB2990@n (char->integer gB298e@c))) (begin (gB2989@display-hex (quotient gB2990@n '16)) (gB2989@display-hex (remainder gB2990@n '16))))))) (string->list (car gB298a@ls))) (gB298c@f (cdr gB298a@ls))) (void))) (gB2984@extract)))))))) (set! gB29f4@gB28c3@library-file-path->cache-path gB28c3@library-file-path->cache-path) (set! gB28c5@read-annotated read) (set! gB29f5@gB28c5@read-annotated gB28c5@read-annotated) (set! gB28c7@annotation-stripped (lambda (gB2994@x) (gB28cd@annotation-expression gB2994@x))) (set! gB29f6@gB28c7@annotation-stripped gB28c7@annotation-stripped) (set! gB28c9@annotation? (lambda (gB2996@x) (source-info gB2996@x))) (set! gB29f7@gB28c9@annotation? gB28c9@annotation?) (set! gB28cb@annotation-source (lambda (gB2998@x) (source-info gB2998@x))) (set! gB29f8@gB28cb@annotation-source gB28cb@annotation-source) (set! gB28cd@annotation-expression (lambda (gB299a@x) (if (pair? gB299a@x) (cons (car gB299a@x) (cdr gB299a@x)) (if (procedure? gB299a@x) (set-source-info! gB299a@x '#f) gB299a@x)))) (set! gB29f9@gB28cd@annotation-expression gB28cd@annotation-expression) (set! gB28cf@scm->fasl (lambda (gB299c@filename) (string-append (gB28e3@mosh-cache-dir) '"/" (gB28c3@library-file-path->cache-path gB299c@filename) '".mosh-fasl"))) (set! gB29fa@gB28cf@scm->fasl gB28cf@scm->fasl) (set! gB28d1@fasl-save (lambda (gB299e@filename gB299f@obj) (call-with-port (open-file-output-port gB299e@filename) (lambda (gB29a2@port) ((symbol-value 'fasl-write!) gB299f@obj gB29a2@port))))) (set! gB29fb@gB28d1@fasl-save gB28d1@fasl-save) (set! gB28d3@fasl-load (lambda (gB29a4@filename) (call-with-port (open-file-input-port gB29a4@filename) (symbol-value 'fasl-read!)))) (set! gB29fc@gB28d3@fasl-load gB28d3@fasl-load) (set! gB28d5@verbose? (symbol-value '%verbose)) (set! gB29fd@gB28d5@verbose? gB28d5@verbose?) (set! gB28d7@serialize-library (lambda (gB29a6@filename gB29a7@obj) (begin (if gB28d5@verbose? (format (current-error-port) '"serialize-library ~a\n..." gB29a6@filename) (void)) (let ((gB29aa@expanded2core (symbol-value 'expanded2core))) (let ((gB29ac@compile (symbol-value 'compile-w/o-halt))) (let ((gB29ae@code gB29a7@obj)) (let ((gB29b0@pivot (cddddr (cddddr gB29ae@code)))) (let ((gB29b2@visit (gB29ac@compile (gB29aa@expanded2core (car gB29b0@pivot))))) (begin (set-car! gB29b0@pivot gB29b2@visit) (let ((gB29b4@pivot (cdr gB29b0@pivot))) (let ((gB29b6@invoke (gB29ac@compile (gB29aa@expanded2core (car gB29b4@pivot))))) (set-car! gB29b4@pivot gB29b6@invoke))))))))) (let ((gB29b8@fasl-file (gB28cf@scm->fasl gB29a6@filename))) (begin (if (file-exists? gB29b8@fasl-file) (delete-file gB29b8@fasl-file) (void)) ((call/cc (lambda (gB29bc@gB29ba) (lambda () (with-exception-handler (lambda (gB29be@c) ((call/cc (lambda (gB29c0@gB29bb) (gB29bc@gB29ba (lambda () (if '#t (begin (if gB28d5@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" gB29a6@filename) (void)) (if (file-exists? gB29b8@fasl-file) (delete-file gB29b8@fasl-file) (void)) '#f) (gB29c0@gB29bb (lambda () (raise-continuable gB29be@c)))))))))) (lambda () (gB28d1@fasl-save gB29b8@fasl-file gB29a7@obj)))))))))))) (set! gB29fe@gB28d7@serialize-library gB28d7@serialize-library) (set! gB28d9@load-serialized-library (lambda (gB29c2@filename gB29c3@obj) (and (gB28e3@mosh-cache-dir) (let ((gB29c6@fasl-file (gB28cf@scm->fasl gB29c2@filename))) (if (and (file-exists? gB29c6@fasl-file) ((symbol-value 'file-newer?) gB29c6@fasl-file gB29c2@filename)) (let ((gB29c8@expanded2core (symbol-value 'expanded2core))) (let ((gB29ca@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((gB29cc@code (gB28d3@fasl-load gB29c6@fasl-file))) (let ((gB29ce@pivot (cddddr (cddddr gB29cc@code)))) (let ((gB29d0@visit (car gB29ce@pivot))) (let ((gB29d2@visit-proc (lambda () (gB29ca@eval-compiled-core gB29d0@visit)))) (begin (set-car! gB29ce@pivot gB29d2@visit-proc) (let ((gB29d4@pivot (cdr gB29ce@pivot))) (let ((gB29d6@invoke (car gB29d4@pivot))) (begin (set-car! gB29d4@pivot (lambda () (gB29ca@eval-compiled-core gB29d6@invoke))) (apply gB29c3@obj gB29cc@code))))))))))) '#f))))) (set! gB29ff@gB28d9@load-serialized-library gB28d9@load-serialized-library) (set! gB28db@make-record-printer (lambda (gB29d8@name gB29d9@printer) (lambda gB29dc@x (begin (display '"record printer") (for-each display gB29dc@x))))) (set! gB2a00@gB28db@make-record-printer gB28db@make-record-printer) (set! gB28dd@compile-core (lambda gB29de@x (apply error 'comile-core '"not implementated" gB29de@x))) (set! gB2a01@gB28dd@compile-core gB28dd@compile-core) (set! gB28df@read-library-source-file (lambda (gB29e0@file-name) (with-input-from-file gB29e0@file-name gB28c5@read-annotated))) (set! gB2a02@gB28df@read-library-source-file gB28df@read-library-source-file) (set! gB28e1@make-parameter (lambda gB29f0 (let ((gB29f1 (length gB29f0))) (if (= gB29f1 '1) (apply (lambda (gB29e2@x) (gB28e1@make-parameter gB29e2@x (lambda (gB29e4@x) gB29e4@x))) gB29f0) (if (= gB29f1 '2) (apply (lambda (gB29e6@x gB29e7@fender) (let ((gB29ea@x (gB29e7@fender gB29e6@x))) (lambda gB29ee (let ((gB29ef (length gB29ee))) (if (= gB29ef '0) (apply (lambda () gB29ea@x) gB29ee) (if (= gB29ef '1) (apply (lambda (gB29ec@v) (set! gB29ea@x (gB29e7@fender gB29ec@v))) gB29ee) (error 'apply '"invalid arg count"))))))) gB29f0) (error 'apply '"invalid arg count")))))) (set! gB2a03@gB28e1@make-parameter gB28e1@make-parameter) (set! gB28e3@mosh-cache-dir (gB28e1@make-parameter '#f)) (set! gB2a04@gB28e3@mosh-cache-dir gB28e3@mosh-cache-dir) (set! gB2979@file-options-spec (lambda (gB29f2@x) gB29f2@x)) (set! gB2a05@gB2979@file-options-spec gB2979@file-options-spec) (void))
(begin (set! gB2a0b@current-primitive-locations (unspecified)) (set! gB2a0d@mutable? (unspecified)) (set! gB2a0f@rewriter (unspecified)) (set! gB2a11@expanded->core (unspecified)) (set! gB2a13@compile-core-expr (unspecified)) (set! gB2a15@pretty-print (unspecified)) (set! gB2a17@compile-core-expr-to-port (unspecified)) (set! gB2a0b@current-primitive-locations (gB2a03@gB28e1@make-parameter (lambda (gB2a18@x) '#f) (lambda (gB2a1a@p) gB2a1a@p))) (set! gB2a56@gB2a0b@current-primitive-locations gB2a0b@current-primitive-locations) (set! gB2a0d@mutable? (lambda (gB2a1c@x) (or (pair? gB2a1c@x) (vector? gB2a1c@x) (hashtable? gB2a1c@x)))) (set! gB2a57@gB2a0d@mutable? gB2a0d@mutable?) (set! gB2a0f@rewriter (lambda (gB2a1e@quote-hack?) (letrec* ((gB2a21@f (lambda (gB2a22@x) (if (pair? gB2a22@x) (let ((gB2a24@t (car gB2a22@x))) (if (memv gB2a24@t '(quote)) (if (and gB2a1e@quote-hack? (gB2a0d@mutable? (cadr gB2a22@x))) (let ((gB2a26@g (gensym))) (begin (set-symbol-value! gB2a26@g (cadr gB2a22@x)) gB2a26@g)) gB2a22@x) (if (memv gB2a24@t '(case-lambda)) (cons 'case-lambda (map (lambda (gB2a28@x) (cons (car gB2a28@x) (map gB2a21@f (cdr gB2a28@x)))) (cdr gB2a22@x))) (if (memv gB2a24@t '(lambda)) (cons* 'lambda (cadr gB2a22@x) (map gB2a21@f (cddr gB2a22@x))) (if (memv gB2a24@t '(letrec)) (let ((gB2a2a@bindings (cadr gB2a22@x)) (gB2a2b@body* (cddr gB2a22@x))) (let ((gB2a2e@lhs* (map car gB2a2a@bindings)) (gB2a2f@rhs* (map cadr gB2a2a@bindings))) (cons* 'letrec (map list gB2a2e@lhs* (map gB2a21@f gB2a2f@rhs*)) (map gB2a21@f gB2a2b@body*)))) (if (memv gB2a24@t '(letrec*)) (let ((gB2a32@bindings (cadr gB2a22@x)) (gB2a33@body* (cddr gB2a22@x))) (let ((gB2a36@lhs* (map car gB2a32@bindings)) (gB2a37@rhs* (map cadr gB2a32@bindings))) (cons* 'letrec* (map list gB2a36@lhs* (map gB2a21@f gB2a37@rhs*)) (map gB2a21@f gB2a33@body*)))) (if (memv gB2a24@t '(library-letrec*)) (let ((gB2a3a@name (cadr gB2a22@x)) (gB2a3b@x (cdr gB2a22@x))) (let ((gB2a3e@bindings (cadr gB2a3b@x)) (gB2a3f@body* (cddr gB2a3b@x))) (let ((gB2a42@lhs* (map car gB2a3e@bindings)) (gB2a43@lhs** (map cadr gB2a3e@bindings)) (gB2a44@rhs* (map caddr gB2a3e@bindings))) (cons* 'library-letrec* gB2a3a@name (map list gB2a42@lhs* gB2a43@lhs** (map gB2a21@f gB2a44@rhs*)) (map gB2a21@f gB2a3f@body*))))) (if (memv gB2a24@t '(begin)) (cons 'begin (map gB2a21@f (cdr gB2a22@x))) (if (memv gB2a24@t '(set!)) (list 'set! (cadr gB2a22@x) (gB2a21@f (caddr gB2a22@x))) (if (memv gB2a24@t '(primitive)) (let ((gB2a48@op (cadr gB2a22@x))) (let ((gB2a4a@t ((gB2a0b@current-primitive-locations) gB2a48@op))) (if gB2a4a@t ((lambda (gB2a4c@loc) gB2a4c@loc) gB2a4a@t) gB2a48@op))) (if (memv gB2a24@t '(define)) gB2a22@x (if (list? gB2a22@x) (map gB2a21@f gB2a22@x) (error 'rewrite '"invalid form ~s ~s" gB2a22@x (list? gB2a22@x)))))))))))))) gB2a22@x)))) gB2a21@f))) (set! gB2a58@gB2a0f@rewriter gB2a0f@rewriter) (set! gB2a11@expanded->core (lambda (gB2a4e@x) ((gB2a0f@rewriter '#f) gB2a4e@x))) (set! gB2a59@gB2a11@expanded->core gB2a11@expanded->core) (set! gB2a13@compile-core-expr (lambda (gB2a50@x) ((gB2a0f@rewriter '#f) gB2a50@x))) (set! gB2a5a@gB2a13@compile-core-expr gB2a13@compile-core-expr) (set! gB2a15@pretty-print write) (set! gB2a5b@gB2a15@pretty-print gB2a15@pretty-print) (set! gB2a17@compile-core-expr-to-port (lambda (gB2a52@x gB2a53@p) (gB2a15@pretty-print ((gB2a0f@rewriter '#f) gB2a52@x) gB2a53@p))) (set! gB2a5c@gB2a17@compile-core-expr-to-port gB2a17@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! gB2aab@make-collection (unspecified)) (set! gB2aad@current-library-collection (unspecified)) (set! gB2aaf@rp (unspecified)) (set! gB2ab9@library? (unspecified)) (set! gB2abb@library-id (unspecified)) (set! gB2abd@set-library-id! (unspecified)) (set! gB2abf@library-name (unspecified)) (set! gB2ac1@set-library-name! (unspecified)) (set! gB2ac3@library-version (unspecified)) (set! gB2ac5@set-library-version! (unspecified)) (set! gB2ac7@library-imp* (unspecified)) (set! gB2ac9@set-library-imp*! (unspecified)) (set! gB2acb@library-vis* (unspecified)) (set! gB2acd@set-library-vis*! (unspecified)) (set! gB2acf@library-inv* (unspecified)) (set! gB2ad1@set-library-inv*! (unspecified)) (set! gB2ad3@library-subst (unspecified)) (set! gB2ad5@set-library-subst! (unspecified)) (set! gB2ad7@library-env (unspecified)) (set! gB2ad9@set-library-env! (unspecified)) (set! gB2adb@library-visit-state (unspecified)) (set! gB2add@set-library-visit-state! (unspecified)) (set! gB2adf@library-invoke-state (unspecified)) (set! gB2ae1@set-library-invoke-state! (unspecified)) (set! gB2ae3@library-visit-code (unspecified)) (set! gB2ae5@set-library-visit-code! (unspecified)) (set! gB2ae7@library-invoke-code (unspecified)) (set! gB2ae9@set-library-invoke-code! (unspecified)) (set! gB2aeb@library-visible? (unspecified)) (set! gB2aed@set-library-visible?! (unspecified)) (set! gB2aef@library-source-file-name (unspecified)) (set! gB2af1@set-library-source-file-name! (unspecified)) (set! gB2af3@dummy (unspecified)) (set! gB2af5@find-dependencies (unspecified)) (set! gB2af7@find-library-by (unspecified)) (set! gB2af9@library-path (unspecified)) (set! gB2afb@library-extensions (unspecified)) (set! gB2afd@library-name->file-name (unspecified)) (set! gB2aff@file-locator (unspecified)) (set! gB2b01@serialize-all (unspecified)) (set! gB2b03@current-precompiled-library-loader (unspecified)) (set! gB2b05@try-load-from-file (unspecified)) (set! gB2b07@library-loader (unspecified)) (set! gB2b09@current-library-expander (unspecified)) (set! gB2b0b@external-pending-libraries (unspecified)) (set! gB2b0d@find-external-library (unspecified)) (set! gB2b0f@find-library-by-name (unspecified)) (set! gB2b11@library-exists? (unspecified)) (set! gB2b13@find-library-by-spec/die (unspecified)) (set! gB2b15@label->binding-table (unspecified)) (set! gB2b17@install-library-record (unspecified)) (set! gB2b19@install-library (unspecified)) (set! gB2b1b@imported-label->binding (unspecified)) (set! gB2b1d@invoke-library (unspecified)) (set! gB2b1f@visit-library (unspecified)) (set! gB2b21@invoke-library-by-spec (unspecified)) (set! gB2b23@installed-libraries (unspecified)) (set! gB2b25@library-spec (unspecified)) (set! gB2aab@make-collection (lambda () (let ((gB2b26@set '())) (letrec* ((gB2b29@set-cons (lambda (gB2b2e@x gB2b2f@ls) (if (memq gB2b2e@x gB2b2f@ls) gB2b2f@ls (cons gB2b2e@x gB2b2f@ls))))) (lambda gB2b2c (let ((gB2b2d (length gB2b2c))) (if (= gB2b2d '0) (apply (lambda () gB2b26@set) gB2b2c) (if (= gB2b2d '1) (apply (lambda (gB2b2a@x) (set! gB2b26@set (gB2b29@set-cons gB2b2a@x gB2b26@set))) gB2b2c) (error 'apply '"invalid arg count"))))))))) (set! gB2c9a@gB2aab@make-collection gB2aab@make-collection) (set! gB2aad@current-library-collection (gB2a03@gB28e1@make-parameter (gB2aab@make-collection) (lambda (gB2b32@x) (begin (if (not (procedure? gB2b32@x)) (assertion-violation 'current-library-collection '"not a procedure" gB2b32@x) (void)) gB2b32@x)))) (set! gB2c9b@gB2aad@current-library-collection gB2aad@current-library-collection) (set! gB2aaf@rp (gB2a00@gB28db@make-record-printer 'library (lambda (gB2b34@x gB2b35@p gB2b36@wr) (begin (if (not (gB2ab9@library? gB2b34@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (gB2ac3@library-version gB2b34@x)) (gB2abf@library-name gB2b34@x) (append (gB2abf@library-name gB2b34@x) (list (gB2ac3@library-version gB2b34@x))))) gB2b35@p))))) (set! gB2c9c@gB2aaf@rp gB2aaf@rp) (set! gB2ab9@library? (lambda (gB2b3a@x) (and (simple-struct? gB2b3a@x) (eq? (simple-struct-name gB2b3a@x) 'library)))) (set! gB2c9d@gB2ab9@library? gB2ab9@library?) (set! gB2abb@library-id (lambda (gB2b3c@x) (simple-struct-ref gB2b3c@x '0))) (set! gB2c9e@gB2abb@library-id gB2abb@library-id) (set! gB2abd@set-library-id! (lambda (gB2b3e@x gB2b3f@val) (simple-struct-set! gB2b3e@x '0 gB2b3f@val))) (set! gB2c9f@gB2abd@set-library-id! gB2abd@set-library-id!) (set! gB2abf@library-name (lambda (gB2b42@x) (simple-struct-ref gB2b42@x '1))) (set! gB2ca0@gB2abf@library-name gB2abf@library-name) (set! gB2ac1@set-library-name! (lambda (gB2b44@x gB2b45@val) (simple-struct-set! gB2b44@x '1 gB2b45@val))) (set! gB2ca1@gB2ac1@set-library-name! gB2ac1@set-library-name!) (set! gB2ac3@library-version (lambda (gB2b48@x) (simple-struct-ref gB2b48@x '2))) (set! gB2ca2@gB2ac3@library-version gB2ac3@library-version) (set! gB2ac5@set-library-version! (lambda (gB2b4a@x gB2b4b@val) (simple-struct-set! gB2b4a@x '2 gB2b4b@val))) (set! gB2ca3@gB2ac5@set-library-version! gB2ac5@set-library-version!) (set! gB2ac7@library-imp* (lambda (gB2b4e@x) (simple-struct-ref gB2b4e@x '3))) (set! gB2ca4@gB2ac7@library-imp* gB2ac7@library-imp*) (set! gB2ac9@set-library-imp*! (lambda (gB2b50@x gB2b51@val) (simple-struct-set! gB2b50@x '3 gB2b51@val))) (set! gB2ca5@gB2ac9@set-library-imp*! gB2ac9@set-library-imp*!) (set! gB2acb@library-vis* (lambda (gB2b54@x) (simple-struct-ref gB2b54@x '4))) (set! gB2ca6@gB2acb@library-vis* gB2acb@library-vis*) (set! gB2acd@set-library-vis*! (lambda (gB2b56@x gB2b57@val) (simple-struct-set! gB2b56@x '4 gB2b57@val))) (set! gB2ca7@gB2acd@set-library-vis*! gB2acd@set-library-vis*!) (set! gB2acf@library-inv* (lambda (gB2b5a@x) (simple-struct-ref gB2b5a@x '5))) (set! gB2ca8@gB2acf@library-inv* gB2acf@library-inv*) (set! gB2ad1@set-library-inv*! (lambda (gB2b5c@x gB2b5d@val) (simple-struct-set! gB2b5c@x '5 gB2b5d@val))) (set! gB2ca9@gB2ad1@set-library-inv*! gB2ad1@set-library-inv*!) (set! gB2ad3@library-subst (lambda (gB2b60@x) (simple-struct-ref gB2b60@x '6))) (set! gB2caa@gB2ad3@library-subst gB2ad3@library-subst) (set! gB2ad5@set-library-subst! (lambda (gB2b62@x gB2b63@val) (simple-struct-set! gB2b62@x '6 gB2b63@val))) (set! gB2cab@gB2ad5@set-library-subst! gB2ad5@set-library-subst!) (set! gB2ad7@library-env (lambda (gB2b66@x) (simple-struct-ref gB2b66@x '7))) (set! gB2cac@gB2ad7@library-env gB2ad7@library-env) (set! gB2ad9@set-library-env! (lambda (gB2b68@x gB2b69@val) (simple-struct-set! gB2b68@x '7 gB2b69@val))) (set! gB2cad@gB2ad9@set-library-env! gB2ad9@set-library-env!) (set! gB2adb@library-visit-state (lambda (gB2b6c@x) (simple-struct-ref gB2b6c@x '8))) (set! gB2cae@gB2adb@library-visit-state gB2adb@library-visit-state) (set! gB2add@set-library-visit-state! (lambda (gB2b6e@x gB2b6f@val) (simple-struct-set! gB2b6e@x '8 gB2b6f@val))) (set! gB2caf@gB2add@set-library-visit-state! gB2add@set-library-visit-state!) (set! gB2adf@library-invoke-state (lambda (gB2b72@x) (simple-struct-ref gB2b72@x '9))) (set! gB2cb0@gB2adf@library-invoke-state gB2adf@library-invoke-state) (set! gB2ae1@set-library-invoke-state! (lambda (gB2b74@x gB2b75@val) (simple-struct-set! gB2b74@x '9 gB2b75@val))) (set! gB2cb1@gB2ae1@set-library-invoke-state! gB2ae1@set-library-invoke-state!) (set! gB2ae3@library-visit-code (lambda (gB2b78@x) (simple-struct-ref gB2b78@x '10))) (set! gB2cb2@gB2ae3@library-visit-code gB2ae3@library-visit-code) (set! gB2ae5@set-library-visit-code! (lambda (gB2b7a@x gB2b7b@val) (simple-struct-set! gB2b7a@x '10 gB2b7b@val))) (set! gB2cb3@gB2ae5@set-library-visit-code! gB2ae5@set-library-visit-code!) (set! gB2ae7@library-invoke-code (lambda (gB2b7e@x) (simple-struct-ref gB2b7e@x '11))) (set! gB2cb4@gB2ae7@library-invoke-code gB2ae7@library-invoke-code) (set! gB2ae9@set-library-invoke-code! (lambda (gB2b80@x gB2b81@val) (simple-struct-set! gB2b80@x '11 gB2b81@val))) (set! gB2cb5@gB2ae9@set-library-invoke-code! gB2ae9@set-library-invoke-code!) (set! gB2aeb@library-visible? (lambda (gB2b84@x) (simple-struct-ref gB2b84@x '12))) (set! gB2cb6@gB2aeb@library-visible? gB2aeb@library-visible?) (set! gB2aed@set-library-visible?! (lambda (gB2b86@x gB2b87@val) (simple-struct-set! gB2b86@x '12 gB2b87@val))) (set! gB2cb7@gB2aed@set-library-visible?! gB2aed@set-library-visible?!) (set! gB2aef@library-source-file-name (lambda (gB2b8a@x) (simple-struct-ref gB2b8a@x '13))) (set! gB2cb8@gB2aef@library-source-file-name gB2aef@library-source-file-name) (set! gB2af1@set-library-source-file-name! (lambda (gB2b8c@x gB2b8d@val) (simple-struct-set! gB2b8c@x '13 gB2b8d@val))) (set! gB2cb9@gB2af1@set-library-source-file-name! gB2af1@set-library-source-file-name!) (set! gB2af3@dummy '3) (set! gB2cba@gB2af3@dummy gB2af3@dummy) (set! gB2af5@find-dependencies (lambda (gB2b90@ls) (if (null? gB2b90@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! gB2cbb@gB2af5@find-dependencies gB2af5@find-dependencies) (set! gB2af7@find-library-by (lambda (gB2b92@pred) (let gB2b96@f ((gB2b94@ls ((gB2aad@current-library-collection)))) (if (null? gB2b94@ls) '#f (if (gB2b92@pred (car gB2b94@ls)) (car gB2b94@ls) (gB2b96@f (cdr gB2b94@ls))))))) (set! gB2cbc@gB2af7@find-library-by gB2af7@find-library-by) (set! gB2af9@library-path (gB2a03@gB28e1@make-parameter '(".") (lambda (gB2b98@x) (if (and (list? gB2b98@x) (for-all string? gB2b98@x)) (map (lambda (gB2b9a@x) gB2b9a@x) gB2b98@x) (assertion-violation 'library-path '"not a list of strings" gB2b98@x))))) (set! gB2cbd@gB2af9@library-path gB2af9@library-path) (set! gB2afb@library-extensions (gB2a03@gB28e1@make-parameter '(".sls" ".ss" ".scm") (lambda (gB2b9c@x) (if (and (list? gB2b9c@x) (for-all string? gB2b9c@x)) (map (lambda (gB2b9e@x) gB2b9e@x) gB2b9c@x) (assertion-violation 'library-extensions '"not a list of strings" gB2b9c@x))))) (set! gB2cbe@gB2afb@library-extensions gB2afb@library-extensions) (set! gB2afd@library-name->file-name (lambda (gB2ba0@x) (call-with-values (lambda () (open-string-output-port)) (lambda (gB2ba6@gB2ba3 gB2ba7@gB2ba5) (let ((gB2baa@extract gB2ba7@gB2ba5) (gB2bab@p gB2ba6@gB2ba3)) (letrec* ((gB2baf@display-hex (lambda (gB2bb8@n) (if (<= '0 gB2bb8@n '9) (display gB2bb8@n gB2bab@p) (display (integer->char (+ (char->integer '#\a) (- gB2bb8@n '10))) gB2bab@p))))) (begin (let gB2bb2@f ((gB2bb0@ls gB2ba0@x)) (if (not (null? gB2bb0@ls)) (begin (display '"/" gB2bab@p) (for-each (lambda (gB2bb4@c) (if (or (char<=? '#\a gB2bb4@c '#\z) (char<=? '#\A gB2bb4@c '#\Z) (char<=? '#\0 gB2bb4@c '#\9) (memv gB2bb4@c '(#\- #\. #\_ #\~))) (display gB2bb4@c gB2bab@p) (begin (display '"%" gB2bab@p) (let ((gB2bb6@n (char->integer gB2bb4@c))) (begin (gB2baf@display-hex (quotient gB2bb6@n '16)) (gB2baf@display-hex (remainder gB2bb6@n '16))))))) (string->list (symbol->string (car gB2bb0@ls)))) (gB2bb2@f (cdr gB2bb0@ls))) (void))) (gB2baa@extract)))))))) (set! gB2cbf@gB2afd@library-name->file-name gB2afd@library-name->file-name) (set! gB2aff@file-locator (gB2a03@gB28e1@make-parameter (lambda (gB2bba@x) (let ((gB2bbc@str (gB2afd@library-name->file-name gB2bba@x))) (let gB2bc4@f ((gB2bbe@ls (gB2af9@library-path)) (gB2bbf@exts (gB2afb@library-extensions)) (gB2bc0@failed-list '())) (if (null? gB2bbe@ls) (letrec* ((gB2bce@gB2bc9 (make-record-type-descriptor '&library-resolution gB4ecf@gB4c16@&condition-rtd 'gB2bcc '#f '#f '#((immutable library) (immutable files)))) (gB2bd0@gB2bcb '#f) (gB2bd2@gB2bca (make-record-constructor-descriptor gB2bce@gB2bc9 gB4ed0@gB4c18@&condition-rcd gB2bd0@gB2bcb)) (gB2bd5@gB2bc8 (record-predicate gB2bce@gB2bc9)) (gB2bd7@make-library-resolution-condition (record-constructor gB2bd2@gB2bca)) (gB2bd9@gB2bc6 (record-accessor gB2bce@gB2bc9 '0)) (gB2bdb@gB2bc7 (record-accessor gB2bce@gB2bc9 '1)) (gB2bdd@library-resolution-condition? (condition-predicate gB2bce@gB2bc9)) (gB2bdf@condition-library (condition-accessor gB2bce@gB2bc9 gB2bd9@gB2bc6)) (gB2be1@condition-files (condition-accessor gB2bce@gB2bc9 gB2bdb@gB2bc7))) (raise (condition (gB4eef@gB4cb0@make-error) (gB4f11@gB4d0c@make-who-condition 'expander) (gB4ed5@gB4c6d@make-message-condition '"cannot locate library in library-path") (gB2bd7@make-library-resolution-condition gB2bba@x (reverse gB2bc0@failed-list))))) (if (null? gB2bbf@exts) (gB2bc4@f (cdr gB2bbe@ls) (gB2afb@library-extensions) gB2bc0@failed-list) (let ((gB2be2@name (string-append (car gB2bbe@ls) gB2bbc@str (car gB2bbf@exts)))) (if (file-exists? gB2be2@name) gB2be2@name (gB2bc4@f gB2bbe@ls (cdr gB2bbf@exts) (cons gB2be2@name gB2bc0@failed-list))))))))) (lambda (gB2be4@f) (if (procedure? gB2be4@f) gB2be4@f (assertion-violation 'file-locator '"not a procedure" gB2be4@f))))) (set! gB2cc0@gB2aff@file-locator gB2aff@file-locator) (set! gB2b01@serialize-all (lambda (gB2be6@serialize gB2be7@compile) (letrec* ((gB2beb@library-desc (lambda (gB2bee@x) (list (gB2abb@library-id gB2bee@x) (gB2abf@library-name gB2bee@x))))) (for-each (lambda (gB2bec@x) (if (gB2aef@library-source-file-name gB2bec@x) (gB2be6@serialize (gB2aef@library-source-file-name gB2bec@x) (list (gB2abb@library-id gB2bec@x) (gB2abf@library-name gB2bec@x) (gB2ac3@library-version gB2bec@x) (map gB2beb@library-desc (gB2ac7@library-imp* gB2bec@x)) (map gB2beb@library-desc (gB2acb@library-vis* gB2bec@x)) (map gB2beb@library-desc (gB2acf@library-inv* gB2bec@x)) (gB2ad3@library-subst gB2bec@x) (gB2ad7@library-env gB2bec@x) (gB2be7@compile (gB2ae3@library-visit-code gB2bec@x)) (gB2be7@compile (gB2ae7@library-invoke-code gB2bec@x)) (gB2aeb@library-visible? gB2bec@x))) (void))) ((gB2aad@current-library-collection)))))) (set! gB2cc1@gB2b01@serialize-all gB2b01@serialize-all) (set! gB2b03@current-precompiled-library-loader (gB2a03@gB28e1@make-parameter (lambda (gB2bf0@filename gB2bf1@sk) '#f))) (set! gB2cc2@gB2b03@current-precompiled-library-loader gB2b03@current-precompiled-library-loader) (set! gB2b05@try-load-from-file (lambda (gB2bf4@filename) ((gB2b03@current-precompiled-library-loader) gB2bf4@filename (lambda gB2c1a (let ((gB2c1b (length gB2c1a))) (if (= gB2c1b '11) (apply (lambda (gB2bf6@id gB2bf7@name gB2bf8@ver gB2bf9@imp* gB2bfa@vis* gB2bfb@inv* gB2bfc@exp-subst gB2bfd@exp-env gB2bfe@visit-proc gB2bff@invoke-proc gB2c00@visible?) (let gB2c0e@f ((gB2c0c@deps (append gB2bf9@imp* gB2bfa@vis* gB2bfb@inv*))) (if (null? gB2c0c@deps) (begin (gB2b19@install-library gB2bf6@id gB2bf7@name gB2bf8@ver gB2bf9@imp* gB2bfa@vis* gB2bfb@inv* gB2bfc@exp-subst gB2bfd@exp-env gB2bfe@visit-proc gB2bff@invoke-proc '#f '#f gB2c00@visible? '#f) '#t) (let ((gB2c10@d (car gB2c0c@deps))) (let ((gB2c12@label (car gB2c10@d)) (gB2c13@dname (cadr gB2c10@d))) (let ((gB2c16@l (gB2b0f@find-library-by-name gB2c13@dname))) (if (and (gB2ab9@library? gB2c16@l) (eq? gB2c12@label (gB2abb@library-id gB2c16@l))) (gB2c0e@f (cdr gB2c0c@deps)) (begin (if gB29fd@gB28d5@verbose? (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency on library ~s; file ~s will be recompiled from source. l=~a label=~a (library-id l)=~a\n" gB2bf7@name gB2c13@dname gB2bf4@filename gB2c16@l gB2c12@label (gB2abb@library-id gB2c16@l)) (void)) '#f)))))))) gB2c1a) (if (>= gB2c1b '0) (apply (lambda gB2c18@others '#f) gB2c1a) (error 'apply '"invalid arg count")))))))) (set! gB2cc3@gB2b05@try-load-from-file gB2b05@try-load-from-file) (set! gB2b07@library-loader (gB2a03@gB28e1@make-parameter (lambda (gB2c1c@x) (let ((gB2c1e@file-name ((gB2aff@file-locator) gB2c1c@x))) (if (not gB2c1e@file-name) (assertion-violation '#f '"cannot file library" gB2c1c@x) (or (gB2b05@try-load-from-file gB2c1e@file-name) ((gB2b09@current-library-expander) (gB2a02@gB28df@read-library-source-file gB2c1e@file-name) gB2c1e@file-name (lambda (gB2c20@name) (if (not (fast-equal? gB2c20@name gB2c1c@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (gB2c26@gB2c23 gB2c27@gB2c25) (let ((gB2c2a@e gB2c27@gB2c25) (gB2c2b@p gB2c26@gB2c23)) (begin (display '"expected to find library " gB2c2b@p) (write gB2c1c@x gB2c2b@p) (display '" in file " gB2c2b@p) (display gB2c1e@file-name gB2c2b@p) (display '", found " gB2c2b@p) (write gB2c20@name gB2c2b@p) (display '" instead" gB2c2b@p) (gB2c2a@e)))))) (void)))))))) (lambda (gB2c2e@f) (if (procedure? gB2c2e@f) gB2c2e@f (assertion-violation 'library-locator '"not a procedure" gB2c2e@f))))) (set! gB2cc4@gB2b07@library-loader gB2b07@library-loader) (set! gB2b09@current-library-expander (gB2a03@gB28e1@make-parameter (lambda (gB2c30@x) (assertion-violation 'library-expander '"not initialized")) (lambda (gB2c32@f) (if (procedure? gB2c32@f) gB2c32@f (assertion-violation 'library-expander '"not a procedure" gB2c32@f))))) (set! gB2cc5@gB2b09@current-library-expander gB2b09@current-library-expander) (set! gB2b0b@external-pending-libraries (gB2a03@gB28e1@make-parameter '())) (set! gB2cc6@gB2b0b@external-pending-libraries gB2b0b@external-pending-libraries) (set! gB2b0d@find-external-library (lambda (gB2c34@name) (begin (if (member gB2c34@name (gB2b0b@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" gB2c34@name) (void)) (let ((gB2c3a@gB2c37 gB2b0b@external-pending-libraries) (gB2c3b@gB2c39 (cons gB2c34@name (gB2b0b@external-pending-libraries)))) (let ((gB2c3e@swap (lambda () (let ((gB2c40@t (gB2c3a@gB2c37))) (begin (gB2c3a@gB2c37 gB2c3b@gB2c39) (set! gB2c3b@gB2c39 gB2c40@t)))))) (dynamic-wind gB2c3e@swap (lambda () (begin ((gB2b07@library-loader) gB2c34@name) (or (gB2af7@find-library-by (lambda (gB2c42@x) (fast-equal? (gB2abf@library-name gB2c42@x) gB2c34@name))) (assertion-violation '#f '"handling external library did not yield the correct library" gB2c34@name)))) gB2c3e@swap)))))) (set! gB2cc7@gB2b0d@find-external-library gB2b0d@find-external-library) (set! gB2b0f@find-library-by-name (lambda (gB2c44@name) (or (gB2af7@find-library-by (lambda (gB2c46@x) (fast-equal? (gB2abf@library-name gB2c46@x) gB2c44@name))) (gB2b0d@find-external-library gB2c44@name)))) (set! gB2cc8@gB2b0f@find-library-by-name gB2b0f@find-library-by-name) (set! gB2b11@library-exists? (lambda (gB2c48@name) (and (gB2af7@find-library-by (lambda (gB2c4a@x) (fast-equal? (gB2abf@library-name gB2c4a@x) gB2c48@name))) '#t))) (set! gB2cc9@gB2b11@library-exists? gB2b11@library-exists?) (set! gB2b13@find-library-by-spec/die (lambda (gB2c4c@spec) (let ((gB2c4e@id (car gB2c4c@spec))) (or (gB2af7@find-library-by (lambda (gB2c50@x) (eq? gB2c4e@id (gB2abb@library-id gB2c50@x)))) (assertion-violation '#f '"cannot find library with required spec" gB2c4c@spec))))) (set! gB2cca@gB2b13@find-library-by-spec/die gB2b13@find-library-by-spec/die) (set! gB2b15@label->binding-table (make-eq-hashtable)) (set! gB2ccb@gB2b15@label->binding-table gB2b15@label->binding-table) (set! gB2b17@install-library-record (lambda (gB2c52@lib) (begin (let ((gB2c54@exp-env (gB2ad7@library-env gB2c52@lib))) (for-each (lambda (gB2c56@x) (let ((gB2c58@label (car gB2c56@x)) (gB2c59@binding (cdr gB2c56@x))) (let ((gB2c5c@binding (let ((gB2c5e@t (car gB2c59@binding))) (if (memv gB2c5e@t '(global)) (cons 'global (cons gB2c52@lib (cdr gB2c59@binding))) (if (memv gB2c5e@t '(global-macro)) (cons 'global-macro (cons gB2c52@lib (cdr gB2c59@binding))) (if (memv gB2c5e@t '(global-macro!)) (cons 'global-macro! (cons gB2c52@lib (cdr gB2c59@binding))) gB2c59@binding)))))) (begin (if (hashtable-ref gB2b15@label->binding-table gB2c58@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" gB2c58@label (hashtable-ref gB2b15@label->binding-table gB2c58@label '#f) gB2c5c@binding) (exit)) (void)) (hashtable-set! gB2b15@label->binding-table gB2c58@label gB2c5c@binding))))) gB2c54@exp-env)) ((gB2aad@current-library-collection) gB2c52@lib)))) (set! gB2ccc@gB2b17@install-library-record gB2b17@install-library-record) (set! gB2b19@install-library (lambda (gB2c60@id gB2c61@name gB2c62@ver gB2c63@imp* gB2c64@vis* gB2c65@inv* gB2c66@exp-subst gB2c67@exp-env gB2c68@visit-proc gB2c69@invoke-proc gB2c6a@visit-code gB2c6b@invoke-code gB2c6c@visible? gB2c6d@source-file-name) (let ((gB2c7c@imp-lib* (map gB2b13@find-library-by-spec/die gB2c63@imp*)) (gB2c7d@vis-lib* (map gB2b13@find-library-by-spec/die gB2c64@vis*)) (gB2c7e@inv-lib* (map gB2b13@find-library-by-spec/die gB2c65@inv*))) (begin (if (not (and (symbol? gB2c60@id) (list? gB2c61@name) (list? gB2c62@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" gB2c60@id gB2c61@name gB2c62@ver) (void)) (if (gB2b11@library-exists? gB2c61@name) (assertion-violation 'install-library '"library is already installed" gB2c61@name) (void)) (let ((gB2c82@lib (make-simple-struct 'library '15 (list gB2c60@id gB2c61@name gB2c62@ver gB2c7c@imp-lib* gB2c7d@vis-lib* gB2c7e@inv-lib* gB2c66@exp-subst gB2c67@exp-env gB2c68@visit-proc gB2c69@invoke-proc gB2c6a@visit-code gB2c6b@invoke-code gB2c6c@visible? gB2c6d@source-file-name)))) (gB2b17@install-library-record gB2c82@lib)))))) (set! gB2ccd@gB2b19@install-library gB2b19@install-library) (set! gB2b1b@imported-label->binding (lambda (gB2c84@lab) (hashtable-ref gB2b15@label->binding-table gB2c84@lab '#f))) (set! gB2cce@gB2b1b@imported-label->binding gB2b1b@imported-label->binding) (set! gB2b1d@invoke-library (lambda (gB2c86@lib) (let ((gB2c88@invoke (gB2adf@library-invoke-state gB2c86@lib))) (if (procedure? gB2c88@invoke) (begin (gB2ae1@set-library-invoke-state! gB2c86@lib (lambda () (assertion-violation 'invoke '"circularity detected" gB2c86@lib))) (for-each gB2b1d@invoke-library (gB2acf@library-inv* gB2c86@lib)) (gB2ae1@set-library-invoke-state! gB2c86@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" gB2c86@lib))) (gB2c88@invoke) (gB2ae1@set-library-invoke-state! gB2c86@lib '#t)) (void))))) (set! gB2ccf@gB2b1d@invoke-library gB2b1d@invoke-library) (set! gB2b1f@visit-library (lambda (gB2c8a@lib) (let ((gB2c8c@visit (gB2adb@library-visit-state gB2c8a@lib))) (if (procedure? gB2c8c@visit) (begin (gB2add@set-library-visit-state! gB2c8a@lib (lambda () (assertion-violation 'visit '"circularity detected" gB2c8a@lib))) (for-each gB2b1d@invoke-library (gB2acb@library-vis* gB2c8a@lib)) (gB2add@set-library-visit-state! gB2c8a@lib (lambda () (assertion-violation 'invoke '"first visit did not return" gB2c8a@lib))) (gB2c8c@visit) (gB2add@set-library-visit-state! gB2c8a@lib '#t)) (void))))) (set! gB2cd0@gB2b1f@visit-library gB2b1f@visit-library) (set! gB2b21@invoke-library-by-spec (lambda (gB2c8e@spec) (gB2b1d@invoke-library (gB2b13@find-library-by-spec/die gB2c8e@spec)))) (set! gB2cd1@gB2b21@invoke-library-by-spec gB2b21@invoke-library-by-spec) (set! gB2b23@installed-libraries (lambda gB2c96 (let ((gB2c97 (length gB2c96))) (if (= gB2c97 '1) (apply (lambda (gB2c90@all?) (let gB2c94@f ((gB2c92@ls ((gB2aad@current-library-collection)))) (if (null? gB2c92@ls) '() (if (or gB2c90@all? (gB2aeb@library-visible? (car gB2c92@ls))) (cons (car gB2c92@ls) (gB2c94@f (cdr gB2c92@ls))) (gB2c94@f (cdr gB2c92@ls)))))) gB2c96) (if (= gB2c97 '0) (apply (lambda () (gB2b23@installed-libraries '#f)) gB2c96) (error 'apply '"invalid arg count")))))) (set! gB2cd2@gB2b23@installed-libraries gB2b23@installed-libraries) (set! gB2b25@library-spec (lambda (gB2c98@x) (begin (if (not (gB2ab9@library? gB2c98@x)) (assertion-violation 'library-spec '"not a library" gB2c98@x) (void)) (list (gB2abb@library-id gB2c98@x) (gB2abf@library-name gB2c98@x) (gB2ac3@library-version gB2c98@x))))) (set! gB2cd3@gB2b25@library-spec gB2b25@library-spec) (void))
(begin (set! gB2cd7@build-global-define (unspecified)) (set! gB2d48@build-lambda (unspecified)) (set! gB2d4a@build-case-lambda (unspecified)) (set! gB2d78@build-sequence (unspecified)) (set! gB2d7a@build-void (unspecified)) (set! gB2d7c@build-letrec (unspecified)) (set! gB2d7e@build-let (unspecified)) (set! gB2d80@build-named-let (unspecified)) (set! gB2d82@build-letrec* (unspecified)) (set! gB2d84@build-library-letrec* (unspecified)) (set! gB2d86@build-receive (unspecified)) (set! gB2cd7@build-global-define (lambda (gB2d87@x) (gB2d7a@build-void))) (set! gB2e15@gB2cd7@build-global-define gB2cd7@build-global-define) (set! gB2d48@build-lambda (lambda (gB2d89@ae gB2d8a@vars gB2d8b@exp) (list 'lambda gB2d8a@vars gB2d8b@exp))) (set! gB2e16@gB2d48@build-lambda gB2d48@build-lambda) (set! gB2d4a@build-case-lambda (lambda (gB2d8f@ae gB2d90@vars* gB2d91@exp*) (letrec* ((gB2d96@build-error (lambda (gB2dcd@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (gB2d98@build-pred (lambda (gB2db5@ae gB2db6@n gB2db7@vars) (call-with-values (lambda () (let gB2dc3@f ((gB2dbf@vars gB2db7@vars) (gB2dc0@count '0)) (if (pair? gB2dbf@vars) (gB2dc3@f (cdr gB2dbf@vars) (+ gB2dc0@count '1)) (if (null? gB2dbf@vars) (values gB2dc0@count '=) (values gB2dc0@count '>=))))) (lambda (gB2dc5@gB2dbc gB2dc6@gB2dbe) (let ((gB2dc9@pred gB2dc6@gB2dbe) (gB2dca@count gB2dc5@gB2dbc)) (list (list 'primitive gB2dc9@pred) gB2db6@n (list 'quote gB2dca@count))))))) (gB2d9a@build-apply (lambda (gB2dad@ae gB2dae@g gB2daf@vars gB2db0@exp) (list '(primitive apply) (gB2d48@build-lambda gB2dad@ae gB2daf@vars gB2db0@exp) gB2dae@g))) (gB2d9c@expand-case-lambda (lambda (gB2d9d@ae gB2d9e@vars gB2d9f@exp*) (let ((gB2da3@g (gensym)) (gB2da4@n (gensym))) (list 'lambda gB2da3@g (gB2d7e@build-let gB2d9d@ae (list gB2da4@n) (list (list '(primitive length) gB2da3@g)) (let gB2dab@f ((gB2da7@vars* gB2d90@vars*) (gB2da8@exp* gB2d9f@exp*)) (if (null? gB2da7@vars*) (gB2d96@build-error gB2d9d@ae) (list 'if (gB2d98@build-pred gB2d9d@ae gB2da4@n (car gB2da7@vars*)) (gB2d9a@build-apply gB2d9d@ae gB2da3@g (car gB2da7@vars*) (car gB2da8@exp*)) (gB2dab@f (cdr gB2da7@vars*) (cdr gB2da8@exp*))))))))))) (if (= (length gB2d91@exp*) '1) (gB2d48@build-lambda gB2d8f@ae (car gB2d90@vars*) (car gB2d91@exp*)) (gB2d9c@expand-case-lambda gB2d8f@ae gB2d90@vars* gB2d91@exp*))))) (set! gB2e17@gB2d4a@build-case-lambda gB2d4a@build-case-lambda) (set! gB2d78@build-sequence (lambda (gB2dcf@ae gB2dd0@exps) (let gB2dd5@loop ((gB2dd3@exps gB2dd0@exps)) (if (null? (cdr gB2dd3@exps)) (car gB2dd3@exps) (if (equal? (car gB2dd3@exps) (gB2d7a@build-void)) (gB2dd5@loop (cdr gB2dd3@exps)) (cons 'begin gB2dd3@exps)))))) (set! gB2e18@gB2d78@build-sequence gB2d78@build-sequence) (set! gB2d7a@build-void (lambda () '((primitive void)))) (set! gB2e19@gB2d7a@build-void gB2d7a@build-void) (set! gB2d7c@build-letrec (lambda (gB2dd7@ae gB2dd8@vars gB2dd9@val-exps gB2dda@body-exp) (if (null? gB2dd8@vars) gB2dda@body-exp (list 'letrec (map list gB2dd8@vars gB2dd9@val-exps) gB2dda@body-exp)))) (set! gB2e1a@gB2d7c@build-letrec gB2d7c@build-letrec) (set! gB2d7e@build-let (lambda (gB2ddf@ae gB2de0@vars gB2de1@val-exps gB2de2@body-exp) (if (null? gB2de0@vars) gB2de2@body-exp (list 'let (map list gB2de0@vars gB2de1@val-exps) gB2de2@body-exp)))) (set! gB2e1b@gB2d7e@build-let gB2d7e@build-let) (set! gB2d80@build-named-let (lambda (gB2de7@ae gB2de8@name gB2de9@vars gB2dea@val-exps gB2deb@body-exp) (list 'let gB2de8@name (map list gB2de9@vars gB2dea@val-exps) gB2deb@body-exp))) (set! gB2e1c@gB2d80@build-named-let gB2d80@build-named-let) (set! gB2d82@build-letrec* (lambda (gB2df1@ae gB2df2@vars gB2df3@val-exps gB2df4@body-exp) (if (null? gB2df2@vars) gB2df4@body-exp (list 'letrec* (map list gB2df2@vars gB2df3@val-exps) gB2df4@body-exp)))) (set! gB2e1d@gB2d82@build-letrec* gB2d82@build-letrec*) (set! gB2d84@build-library-letrec* (lambda (gB2df9@ae gB2dfa@name gB2dfb@vars gB2dfc@locs gB2dfd@val-exps gB2dfe@body-exp) (cons 'begin (append (map (lambda (gB2e05@var) (cons 'set! (cons gB2e05@var '((unspecified))))) gB2dfb@vars) (append (apply append (map (lambda (gB2e07@var gB2e08@loc gB2e09@val-exp) (list (list 'set! gB2e07@var gB2e09@val-exp) (list 'set! gB2e08@loc gB2e07@var))) gB2dfb@vars gB2dfc@locs gB2dfd@val-exps)) (list gB2dfe@body-exp)))))) (set! gB2e1e@gB2d84@build-library-letrec* gB2d84@build-library-letrec*) (set! gB2d86@build-receive (lambda (gB2e0d@ae gB2e0e@vars gB2e0f@producer gB2e10@body*) (begin (display '"************** in ") (cons 'receive (cons gB2e0e@vars (cons gB2e0f@producer gB2e10@body*)))))) (set! gB2e1f@gB2d86@build-receive gB2d86@build-receive) (void))
(begin (set! gB2e2e@file-options-macro (unspecified)) (set! gB2e30@set-cons (unspecified)) (set! gB2e32@set-union (unspecified)) (set! gB2e37@top-mark* (unspecified)) (set! gB2e39@top-marked? (unspecified)) (set! gB2e3b@gen-lexical (unspecified)) (set! gB2e3d@gen-global (unspecified)) (set! gB2e3f@gen-label (unspecified)) (set! gB2e41@gen-top-level-label (unspecified)) (set! gB2e43@gen-define-label+loc (unspecified)) (set! gB2e45@gen-define-label (unspecified)) (set! gB2e4f@rib? (unspecified)) (set! gB2e51@rib-sym* (unspecified)) (set! gB2e53@set-rib-sym*! (unspecified)) (set! gB2e55@rib-mark** (unspecified)) (set! gB2e57@set-rib-mark**! (unspecified)) (set! gB2e59@rib-label* (unspecified)) (set! gB2e5b@set-rib-label*! (unspecified)) (set! gB2e5d@rib-sealed/freq (unspecified)) (set! gB2e5f@set-rib-sealed/freq! (unspecified)) (set! gB2e61@rib-cache (unspecified)) (set! gB2e63@set-rib-cache! (unspecified)) (set! gB2e65@dummy (unspecified)) (set! gB2e67@make-empty-rib (unspecified)) (set! gB2e69@extend-rib! (unspecified)) (set! gB2e6b@extend-rib/nc! (unspecified)) (set! gB2e6d@make-rib-map (unspecified)) (set! gB2e6f@seal-rib! (unspecified)) (set! gB2e71@unseal-rib! (unspecified)) (set! gB2e73@make-full-rib (unspecified)) (set! gB2e75@rp (unspecified)) (set! gB2e7f@stx? (unspecified)) (set! gB2e81@stx-expr (unspecified)) (set! gB2e83@set-stx-expr! (unspecified)) (set! gB2e85@stx-mark* (unspecified)) (set! gB2e87@set-stx-mark*! (unspecified)) (set! gB2e89@stx-subst* (unspecified)) (set! gB2e8b@set-stx-subst*! (unspecified)) (set! gB2e8d@stx-ae* (unspecified)) (set! gB2e8f@set-stx-ae*! (unspecified)) (set! gB2e91@dummy (unspecified)) (set! gB2e93@datum->stx (unspecified)) (set! gB2e95@gen-mark (unspecified)) (set! gB2e97@anti-mark (unspecified)) (set! gB2e99@anti-mark? (unspecified)) (set! gB2e9b@mkstx (unspecified)) (set! gB2e9d@add-mark (unspecified)) (set! gB2e9f@add-subst (unspecified)) (set! gB2ea1@syntax-kind? (unspecified)) (set! gB2ea3@syntax-vector->list (unspecified)) (set! gB2ea5@syntax-pair? (unspecified)) (set! gB2ea7@syntax-vector? (unspecified)) (set! gB2ea9@syntax-null? (unspecified)) (set! gB2eab@syntax-list? (unspecified)) (set! gB2ead@syntax-car (unspecified)) (set! gB2eaf@syntax-cdr (unspecified)) (set! gB2eb1@syntax->list (unspecified)) (set! gB2eb3@id? (unspecified)) (set! gB2eb5@id->sym (unspecified)) (set! gB2eb7@bound-id=? (unspecified)) (set! gB2eb9@free-id=? (unspecified)) (set! gB2ebb@valid-bound-ids? (unspecified)) (set! gB2ebd@distinct-bound-ids? (unspecified)) (set! gB2ebf@bound-id-member? (unspecified)) (set! gB2ec1@self-evaluating? (unspecified)) (set! gB2ec3@strip-annotations (unspecified)) (set! gB2ec5@strip (unspecified)) (set! gB2ec7@stx->datum (unspecified)) (set! gB2ec9@id->label (unspecified)) (set! gB2ecb@label->binding (unspecified)) (set! gB2ecd@make-binding (unspecified)) (set! gB2ecf@binding-type (unspecified)) (set! gB2ed1@binding-value (unspecified)) (set! gB2ed3@raise-unbound-error (unspecified)) (set! gB2ed5@syntax-type (unspecified)) (set! gB2ee3@sanitize-binding (unspecified)) (set! gB2ee5@make-variable-transformer (unspecified)) (set! gB2ee7@variable-transformer? (unspecified)) (set! gB2ee9@variable-transformer-procedure (unspecified)) (set! gB2eeb@make-eval-transformer (unspecified)) (set! gB303c@parse-define (unspecified)) (set! gB303e@parse-define-syntax (unspecified)) (set! gB3040@scheme-stx-hashtable (unspecified)) (set! gB3042@scheme-stx (unspecified)) (set! gB3044@lexical-var (unspecified)) (set! gB3046@lexical-mutable? (unspecified)) (set! gB3048@set-lexical-mutable! (unspecified)) (set! gB304a@add-lexical (unspecified)) (set! gB304c@add-lexicals (unspecified)) (set! gB304e@letrec-helper (unspecified)) (set! gB3050@let-transformer (unspecified)) (set! gB3052@letrec-transformer (unspecified)) (set! gB3054@letrec*-transformer (unspecified)) (set! gB3056@fluid-let-syntax-transformer (unspecified)) (set! gB3058@type-descriptor-transformer (unspecified)) (set! gB305a@record-type-descriptor-transformer (unspecified)) (set! gB305c@record-constructor-descriptor-transformer (unspecified)) (set! gB305e@when-macro (unspecified)) (set! gB3060@unless-macro (unspecified)) (set! gB3062@if-transformer (unspecified)) (set! gB3064@and-transformer (unspecified)) (set! gB3066@or-transformer (unspecified)) (set! gB3068@case-macro (unspecified)) (set! gB306a@quote-transformer (unspecified)) (set! gB306c@case-lambda-transformer (unspecified)) (set! gB306e@lambda-transformer (unspecified)) (set! gB3070@bless (unspecified)) (set! gB3072@with-syntax-macro (unspecified)) (set! gB3074@invalid-fmls-error (unspecified)) (set! gB3076@let-macro (unspecified)) (set! gB3078@let-values-macro (unspecified)) (set! gB307a@let*-values-macro (unspecified)) (set! gB307c@trace-lambda-macro (unspecified)) (set! gB307e@trace-define-macro (unspecified)) (set! gB3080@trace-define-syntax-macro (unspecified)) (set! gB3082@trace-let/rec-syntax (unspecified)) (set! gB3084@trace-let-syntax-macro (unspecified)) (set! gB3086@trace-letrec-syntax-macro (unspecified)) (set! gB3088@guard-macro (unspecified)) (set! gB308a@define-enumeration-macro (unspecified)) (set! gB308c@time-macro (unspecified)) (set! gB308e@delay-macro (unspecified)) (set! gB3090@assert-macro (unspecified)) (set! gB3092@endianness-macro (unspecified)) (set! gB3094@identifier-syntax-macro (unspecified)) (set! gB3096@do-macro (unspecified)) (set! gB3098@let*-macro (unspecified)) (set! gB309a@or-macro (unspecified)) (set! gB309c@and-macro (unspecified)) (set! gB309e@cond-macro (unspecified)) (set! gB30a0@do-include (unspecified)) (set! gB30a2@include-macro (unspecified)) (set! gB30a4@include-into-macro (unspecified)) (set! gB30a6@syntax-rules-macro (unspecified)) (set! gB30a8@quasiquote-macro (unspecified)) (set! gB30aa@quasisyntax-macro (unspecified)) (set! gB30ac@define-struct-macro (unspecified)) (set! gB30ae@define-record-type-macro (unspecified)) (set! gB30b0@define-condition-type-macro (unspecified)) (set! gB30b2@incorrect-usage-macro (unspecified)) (set! gB30b4@parameterize-macro (unspecified)) (set! gB30b6@foreign-call-transformer (unspecified)) (set! gB30b8@convert-pattern (unspecified)) (set! gB30ba@syntax-dispatch (unspecified)) (set! gB30bc@ellipsis? (unspecified)) (set! gB30be@underscore? (unspecified)) (set! gB30c0@verify-literals (unspecified)) (set! gB30c2@syntax-case-transformer (unspecified)) (set! gB30c4@ellipsis-map (unspecified)) (set! gB30c6@syntax-transformer (unspecified)) (set! gB30c8@core-macro-transformer (unspecified)) (set! gB30ca@symbol-macro (unspecified)) (set! gB30cc@macro-transformer (unspecified)) (set! gB30ce@local-macro-transformer (unspecified)) (set! gB30d0@do-macro-call (unspecified)) (set! gB30d2@chi-macro (unspecified)) (set! gB30d4@chi-local-macro (unspecified)) (set! gB30d6@chi-global-macro (unspecified)) (set! gB30d8@chi-expr* (unspecified)) (set! gB30da@chi-application (unspecified)) (set! gB30dc@chi-expr (unspecified)) (set! gB30de@chi-set! (unspecified)) (set! gB30e0@verify-formals (unspecified)) (set! gB30e2@chi-lambda-clause (unspecified)) (set! gB30e4@chi-lambda-clause* (unspecified)) (set! gB30e6@chi-defun (unspecified)) (set! gB30e8@chi-rhs (unspecified)) (set! gB30ea@expand-interaction-rhs*/init* (unspecified)) (set! gB30ec@chi-rhs* (unspecified)) (set! gB30ee@find-bound=? (unspecified)) (set! gB30f0@find-dups (unspecified)) (set! gB30f2@chi-internal (unspecified)) (set! gB30f4@parse-module (unspecified)) (set! gB30fe@module-interface? (unspecified)) (set! gB3100@module-interface-first-mark (unspecified)) (set! gB3102@set-module-interface-first-mark! (unspecified)) (set! gB3104@module-interface-exp-id-vec (unspecified)) (set! gB3106@set-module-interface-exp-id-vec! (unspecified)) (set! gB3108@module-interface-exp-lab-vec (unspecified)) (set! gB310a@set-module-interface-exp-lab-vec! (unspecified)) (set! gB310c@dummy (unspecified)) (set! gB310e@module-interface-exp-id* (unspecified)) (set! gB3110@chi-internal-module (unspecified)) (set! gB3112@chi-body* (unspecified)) (set! gB3114@expand-transformer (unspecified)) (set! gB3116@parse-exports (unspecified)) (set! gB3118@parse-library-name (unspecified)) (set! gB311a@parse-library (unspecified)) (set! gB311c@parse-import-spec* (unspecified)) (set! gB311e@make-top-rib (unspecified)) (set! gB3120@make-collector (unspecified)) (set! gB3122@inv-collector (unspecified)) (set! gB3124@vis-collector (unspecified)) (set! gB3126@imp-collector (unspecified)) (set! gB3128@chi-library-internal (unspecified)) (set! gB312a@chi-interaction-expr (unspecified)) (set! gB312c@library-body-expander (unspecified)) (set! gB312e@core-library-expander (unspecified)) (set! gB3130@parse-top-level-program (unspecified)) (set! gB3132@top-level-expander (unspecified)) (set! gB3134@rp (unspecified)) (set! gB313e@env? (unspecified)) (set! gB3140@env-names (unspecified)) (set! gB3142@set-env-names! (unspecified)) (set! gB3144@env-labels (unspecified)) (set! gB3146@set-env-labels! (unspecified)) (set! gB3148@env-itc (unspecified)) (set! gB314a@set-env-itc! (unspecified)) (set! gB314c@dummy (unspecified)) (set! gB314e@rp (unspecified)) (set! gB3158@interaction-env? (unspecified)) (set! gB315a@interaction-env-rib (unspecified)) (set! gB315c@set-interaction-env-rib! (unspecified)) (set! gB315e@interaction-env-r (unspecified)) (set! gB3160@set-interaction-env-r! (unspecified)) (set! gB3162@interaction-env-locs (unspecified)) (set! gB3164@set-interaction-env-locs! (unspecified)) (set! gB3166@dummy (unspecified)) (set! gB3168@interaction-environment-symbols (unspecified)) (set! gB316a@environment-bindings (unspecified)) (set! gB316c@parse-binding (unspecified)) (set! gB316e@environment? (unspecified)) (set! gB3170@environment-symbols (unspecified)) (set! gB3172@environment (unspecified)) (set! gB3174@null-environment (unspecified)) (set! gB3176@scheme-report-environment (unspecified)) (set! gB3178@expand (unspecified)) (set! gB317a@eval (unspecified)) (set! gB317c@library-expander (unspecified)) (set! gB317e@boot-library-expand (unspecified)) (set! gB3180@rev-map-append (unspecified)) (set! gB3182@build-exports (unspecified)) (set! gB3184@make-export-subst (unspecified)) (set! gB3186@make-export-env/macros (unspecified)) (set! gB3188@generate-temporaries (unspecified)) (set! gB318a@free-identifier=? (unspecified)) (set! gB318c@bound-identifier=? (unspecified)) (set! gB318e@make-source-condition (unspecified)) (set! gB3190@extract-position-condition (unspecified)) (set! gB3192@expression-position (unspecified)) (set! gB3194@assertion-error (unspecified)) (set! gB3196@syntax-error (unspecified)) (set! gB3198@syntax-violation* (unspecified)) (set! gB319a@syntax-violation (unspecified)) (set! gB319c@identifier? (unspecified)) (set! gB319e@datum->syntax (unspecified)) (set! gB31a0@syntax->datum (unspecified)) (set! gB31a2@ungensym-all (unspecified)) (set! gB31a4@compile-r6rs-top-level (unspecified)) (set! gB31a6@pre-compile-r6rs-top-level (unspecified)) (set! gB31a8@interaction-environment (unspecified)) (set! gB31aa@top-level-context (unspecified)) (set! gB2e2e@file-options-macro (lambda (gB31ab@x) (letrec* ((gB31ae@valid-option? (lambda (gB31b7@x) (and (gB2eb3@id? gB31b7@x) (memq (gB2eb5@id->sym gB31b7@x) '(no-fail no-create no-truncate)))))) (let ((gB31af@t gB31ab@x)) (let ((gB31b1@ls/false (gB30ba@syntax-dispatch gB31af@t '(_ . each-any)))) (if (and gB31b1@ls/false (apply (lambda (gB31b3@opt*) (for-all gB31ae@valid-option? gB31b3@opt*)) gB31b1@ls/false)) (apply (lambda (gB31b5@opt*) (gB3070@bless (list 'make-file-options (list 'quote gB31b5@opt*)))) gB31b1@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB31af@t))))))) (set! gB4b01@gB2e2e@file-options-macro gB2e2e@file-options-macro) (set! gB2e30@set-cons (lambda (gB31b9@x gB31ba@ls) (if (memq gB31b9@x gB31ba@ls) gB31ba@ls (cons gB31b9@x gB31ba@ls)))) (set! gB4b02@gB2e30@set-cons gB2e30@set-cons) (set! gB2e32@set-union (lambda (gB31bd@ls1 gB31be@ls2) (if (null? gB31bd@ls1) gB31be@ls2 (if (memq (car gB31bd@ls1) gB31be@ls2) (gB2e32@set-union (cdr gB31bd@ls1) gB31be@ls2) (cons (car gB31bd@ls1) (gB2e32@set-union (cdr gB31bd@ls1) gB31be@ls2)))))) (set! gB4b03@gB2e32@set-union gB2e32@set-union) (set! gB2e37@top-mark* '(top)) (set! gB4b04@gB2e37@top-mark* gB2e37@top-mark*) (set! gB2e39@top-marked? (lambda (gB31c1@m*) (memq 'top gB31c1@m*))) (set! gB4b05@gB2e39@top-marked? gB2e39@top-marked?) (set! gB2e3b@gen-lexical (lambda (gB31c3@sym) (if (symbol? gB31c3@sym) (gensym gB31c3@sym) (if (gB2e7f@stx? gB31c3@sym) (gB2e3b@gen-lexical (gB2eb5@id->sym gB31c3@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" gB31c3@sym))))) (set! gB4b06@gB2e3b@gen-lexical gB2e3b@gen-lexical) (set! gB2e3d@gen-global (lambda (gB31c5@x) (gB2e3b@gen-lexical gB31c5@x))) (set! gB4b07@gB2e3d@gen-global gB2e3d@gen-global) (set! gB2e3f@gen-label (lambda (gB31c7@_) (gensym))) (set! gB4b08@gB2e3f@gen-label gB2e3f@gen-label) (set! gB2e41@gen-top-level-label (lambda (gB31c9@id gB31ca@rib) (letrec* ((gB31ce@find (lambda (gB31d9@sym gB31da@mark* gB31db@sym* gB31dc@mark** gB31dd@label*) (and (pair? gB31db@sym*) (if (and (eq? gB31d9@sym (car gB31db@sym*)) (same-marks? gB31da@mark* (car gB31dc@mark**))) (car gB31dd@label*) (gB31ce@find gB31d9@sym gB31da@mark* (cdr gB31db@sym*) (cdr gB31dc@mark**) (cdr gB31dd@label*))))))) (let ((gB31cf@sym (gB2eb5@id->sym gB31c9@id)) (gB31d0@mark* (gB2e85@stx-mark* gB31c9@id))) (let ((gB31d3@sym* (gB2e51@rib-sym* gB31ca@rib))) (let ((gB31d5@t (and (memq gB31cf@sym (gB2e51@rib-sym* gB31ca@rib)) (gB31ce@find gB31cf@sym gB31d0@mark* gB31d3@sym* (gB2e55@rib-mark** gB31ca@rib) (gB2e59@rib-label* gB31ca@rib))))) (if gB31d5@t ((lambda (gB31d7@label) (if (gB2cce@gB2b1b@imported-label->binding gB31d7@label) (gensym) gB31d7@label)) gB31d5@t) (gensym)))))))) (set! gB4b09@gB2e41@gen-top-level-label gB2e41@gen-top-level-label) (set! gB2e43@gen-define-label+loc (lambda (gB31e3@id gB31e4@rib) (let ((gB31e7@t (gB31aa@top-level-context))) (if gB31e7@t ((lambda (gB31e9@env) (let ((gB31eb@label (gB2e41@gen-top-level-label gB31e3@id gB31e4@rib)) (gB31ec@locs (gB3162@interaction-env-locs gB31e9@env))) (values gB31eb@label (let ((gB31ef@t (assq gB31eb@label gB31ec@locs))) (if gB31ef@t (cdr gB31ef@t) (let ((gB31f1@loc (gB2e3b@gen-lexical gB31e3@id))) (begin (gB3164@set-interaction-env-locs! gB31e9@env (cons (cons gB31eb@label gB31f1@loc) gB31ec@locs)) gB31f1@loc))))))) gB31e7@t) (values (gensym) (gB2e3b@gen-lexical gB31e3@id)))))) (set! gB4b0a@gB2e43@gen-define-label+loc gB2e43@gen-define-label+loc) (set! gB2e45@gen-define-label (lambda (gB31f3@id gB31f4@rib) (if (gB31aa@top-level-context) (gB2e41@gen-top-level-label gB31f3@id gB31f4@rib) (gensym)))) (set! gB4b0b@gB2e45@gen-define-label gB2e45@gen-define-label) (set! gB2e4f@rib? (lambda (gB31f7@x) (and (simple-struct? gB31f7@x) (eq? (simple-struct-name gB31f7@x) 'rib)))) (set! gB4b0c@gB2e4f@rib? gB2e4f@rib?) (set! gB2e51@rib-sym* (lambda (gB31f9@x) (simple-struct-ref gB31f9@x '0))) (set! gB4b0d@gB2e51@rib-sym* gB2e51@rib-sym*) (set! gB2e53@set-rib-sym*! (lambda (gB31fb@x gB31fc@val) (simple-struct-set! gB31fb@x '0 gB31fc@val))) (set! gB4b0e@gB2e53@set-rib-sym*! gB2e53@set-rib-sym*!) (set! gB2e55@rib-mark** (lambda (gB31ff@x) (simple-struct-ref gB31ff@x '1))) (set! gB4b0f@gB2e55@rib-mark** gB2e55@rib-mark**) (set! gB2e57@set-rib-mark**! (lambda (gB3201@x gB3202@val) (simple-struct-set! gB3201@x '1 gB3202@val))) (set! gB4b10@gB2e57@set-rib-mark**! gB2e57@set-rib-mark**!) (set! gB2e59@rib-label* (lambda (gB3205@x) (simple-struct-ref gB3205@x '2))) (set! gB4b11@gB2e59@rib-label* gB2e59@rib-label*) (set! gB2e5b@set-rib-label*! (lambda (gB3207@x gB3208@val) (simple-struct-set! gB3207@x '2 gB3208@val))) (set! gB4b12@gB2e5b@set-rib-label*! gB2e5b@set-rib-label*!) (set! gB2e5d@rib-sealed/freq (lambda (gB320b@x) (simple-struct-ref gB320b@x '3))) (set! gB4b13@gB2e5d@rib-sealed/freq gB2e5d@rib-sealed/freq) (set! gB2e5f@set-rib-sealed/freq! (lambda (gB320d@x gB320e@val) (simple-struct-set! gB320d@x '3 gB320e@val))) (set! gB4b14@gB2e5f@set-rib-sealed/freq! gB2e5f@set-rib-sealed/freq!) (set! gB2e61@rib-cache (lambda (gB3211@x) (simple-struct-ref gB3211@x '4))) (set! gB4b15@gB2e61@rib-cache gB2e61@rib-cache) (set! gB2e63@set-rib-cache! (lambda (gB3213@x gB3214@val) (simple-struct-set! gB3213@x '4 gB3214@val))) (set! gB4b16@gB2e63@set-rib-cache! gB2e63@set-rib-cache!) (set! gB2e65@dummy '3) (set! gB4b17@gB2e65@dummy gB2e65@dummy) (set! gB2e67@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! gB4b18@gB2e67@make-empty-rib gB2e67@make-empty-rib) (set! gB2e69@extend-rib! (lambda (gB3217@rib gB3218@id gB3219@label) (letrec* ((gB321e@find (lambda (gB322b@sym gB322c@mark* gB322d@sym* gB322e@mark** gB322f@label*) (and (pair? gB322d@sym*) (if (and (eq? gB322b@sym (car gB322d@sym*)) (same-marks? gB322c@mark* (car gB322e@mark**))) gB322f@label* (gB321e@find gB322b@sym gB322c@mark* (cdr gB322d@sym*) (cdr gB322e@mark**) (cdr gB322f@label*))))))) (begin (if (gB2e5d@rib-sealed/freq gB3217@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" gB3217@rib) (void)) (let ((gB321f@sym (gB2eb5@id->sym gB3218@id)) (gB3220@mark* (gB2e85@stx-mark* gB3218@id))) (let ((gB3223@sym* (gB2e51@rib-sym* gB3217@rib))) (let ((gB3225@t (and (memq gB321f@sym (gB2e51@rib-sym* gB3217@rib)) (gB321e@find gB321f@sym gB3220@mark* gB3223@sym* (gB2e55@rib-mark** gB3217@rib) (gB2e59@rib-label* gB3217@rib))))) (if gB3225@t ((lambda (gB3227@p) (if (not (eq? gB3219@label (car gB3227@p))) (if (gB31aa@top-level-context) (set-car! gB3227@p gB3219@label) (gB319a@syntax-violation '#f '"multiple definitions of identifier" gB3218@id)) (void))) gB3225@t) (begin (if (gB2e61@rib-cache gB3217@rib) (hashtable-update! (gB2e61@rib-cache gB3217@rib) gB321f@sym (lambda (gB3229@e) (cons (cons gB3220@mark* gB3219@label) gB3229@e)) '()) (void)) (gB2e53@set-rib-sym*! gB3217@rib (cons gB321f@sym gB3223@sym*)) (gB2e57@set-rib-mark**! gB3217@rib (cons gB3220@mark* (gB2e55@rib-mark** gB3217@rib))) (gB2e5b@set-rib-label*! gB3217@rib (cons gB3219@label (gB2e59@rib-label* gB3217@rib)))))))))))) (set! gB4b19@gB2e69@extend-rib! gB2e69@extend-rib!) (set! gB2e6b@extend-rib/nc! (lambda (gB3235@rib gB3236@id gB3237@label) (let ((gB323b@sym (gB2eb5@id->sym gB3236@id)) (gB323c@mark* (gB2e85@stx-mark* gB3236@id))) (let ((gB323f@sym* (gB2e51@rib-sym* gB3235@rib))) (begin (if (gB2e61@rib-cache gB3235@rib) (hashtable-update! (gB2e61@rib-cache gB3235@rib) gB323b@sym (lambda (gB3241@e) (cons (cons gB323c@mark* gB3237@label) gB3241@e)) '()) (void)) (gB2e53@set-rib-sym*! gB3235@rib (cons gB323b@sym gB323f@sym*)) (gB2e57@set-rib-mark**! gB3235@rib (cons gB323c@mark* (gB2e55@rib-mark** gB3235@rib))) (gB2e5b@set-rib-label*! gB3235@rib (cons gB3237@label (gB2e59@rib-label* gB3235@rib)))))))) (set! gB4b1a@gB2e6b@extend-rib/nc! gB2e6b@extend-rib/nc!) (set! gB2e6d@make-rib-map (lambda (gB3243@sym*) (let ((gB3245@ht (make-eq-hashtable))) (let gB324b@f ((gB3247@i '0) (gB3248@sym* gB3243@sym*)) (if (null? gB3248@sym*) gB3245@ht (begin (hashtable-update! gB3245@ht (car gB3248@sym*) (lambda (gB324d@x) (cons gB3247@i gB324d@x)) '()) (gB324b@f (+ gB3247@i '1) (cdr gB3248@sym*)))))))) (set! gB4b1b@gB2e6d@make-rib-map gB2e6d@make-rib-map) (set! gB2e6f@seal-rib! (lambda (gB324f@rib) (let ((gB3251@sym* (gB2e51@rib-sym* gB324f@rib))) (if (not (null? gB3251@sym*)) (begin (gB2e53@set-rib-sym*! gB324f@rib (list->vector gB3251@sym*)) (gB2e57@set-rib-mark**! gB324f@rib (list->vector (gB2e55@rib-mark** gB324f@rib))) (gB2e5b@set-rib-label*! gB324f@rib (list->vector (gB2e59@rib-label* gB324f@rib))) (gB2e5f@set-rib-sealed/freq! gB324f@rib (gB2e6d@make-rib-map gB3251@sym*))) (void))))) (set! gB4b1c@gB2e6f@seal-rib! gB2e6f@seal-rib!) (set! gB2e71@unseal-rib! (lambda (gB3253@rib) (if (gB2e5d@rib-sealed/freq gB3253@rib) (begin (gB2e5f@set-rib-sealed/freq! gB3253@rib '#f) (gB2e53@set-rib-sym*! gB3253@rib (vector->list (gB2e51@rib-sym* gB3253@rib))) (gB2e57@set-rib-mark**! gB3253@rib (vector->list (gB2e55@rib-mark** gB3253@rib))) (gB2e5b@set-rib-label*! gB3253@rib (vector->list (gB2e59@rib-label* gB3253@rib)))) (void)))) (set! gB4b1d@gB2e71@unseal-rib! gB2e71@unseal-rib!) (set! gB2e73@make-full-rib (lambda (gB3255@id* gB3256@label*) (let ((gB3259@r (make-simple-struct 'rib '6 (list (map gB2eb5@id->sym gB3255@id*) (map gB2e85@stx-mark* gB3255@id*) gB3256@label* '#f '#f)))) (begin (gB2e6f@seal-rib! gB3259@r) gB3259@r)))) (set! gB4b1e@gB2e73@make-full-rib gB2e73@make-full-rib) (set! gB2e75@rp (gB2a00@gB28db@make-record-printer 'stx (lambda (gB325b@x gB325c@p gB325d@wr) (begin (display '"#<syntax " gB325c@p) (write (gB2ec7@stx->datum gB325b@x) gB325c@p) (let ((gB3261@expr (gB2e81@stx-expr gB325b@x))) (if (gB29f7@gB28c9@annotation? gB3261@expr) (let ((gB3263@src (gB29f8@gB28cb@annotation-source gB3261@expr))) (if (pair? gB3263@src) (begin (display '" [" gB325c@p) (display (cdr gB3263@src) gB325c@p) (display '" of " gB325c@p) (display (car gB3263@src) gB325c@p) (display '"]" gB325c@p)) (void))) (void))) (display '">" gB325c@p))))) (set! gB4b1f@gB2e75@rp gB2e75@rp) (set! gB2e7f@stx? (lambda (gB3265@x) (and (simple-struct? gB3265@x) (eq? (simple-struct-name gB3265@x) 'stx)))) (set! gB4b20@gB2e7f@stx? gB2e7f@stx?) (set! gB2e81@stx-expr (lambda (gB3267@x) (simple-struct-ref gB3267@x '0))) (set! gB4b21@gB2e81@stx-expr gB2e81@stx-expr) (set! gB2e83@set-stx-expr! (lambda (gB3269@x gB326a@val) (simple-struct-set! gB3269@x '0 gB326a@val))) (set! gB4b22@gB2e83@set-stx-expr! gB2e83@set-stx-expr!) (set! gB2e85@stx-mark* (lambda (gB326d@x) (simple-struct-ref gB326d@x '1))) (set! gB4b23@gB2e85@stx-mark* gB2e85@stx-mark*) (set! gB2e87@set-stx-mark*! (lambda (gB326f@x gB3270@val) (simple-struct-set! gB326f@x '1 gB3270@val))) (set! gB4b24@gB2e87@set-stx-mark*! gB2e87@set-stx-mark*!) (set! gB2e89@stx-subst* (lambda (gB3273@x) (simple-struct-ref gB3273@x '2))) (set! gB4b25@gB2e89@stx-subst* gB2e89@stx-subst*) (set! gB2e8b@set-stx-subst*! (lambda (gB3275@x gB3276@val) (simple-struct-set! gB3275@x '2 gB3276@val))) (set! gB4b26@gB2e8b@set-stx-subst*! gB2e8b@set-stx-subst*!) (set! gB2e8d@stx-ae* (lambda (gB3279@x) (simple-struct-ref gB3279@x '3))) (set! gB4b27@gB2e8d@stx-ae* gB2e8d@stx-ae*) (set! gB2e8f@set-stx-ae*! (lambda (gB327b@x gB327c@val) (simple-struct-set! gB327b@x '3 gB327c@val))) (set! gB4b28@gB2e8f@set-stx-ae*! gB2e8f@set-stx-ae*!) (set! gB2e91@dummy '3) (set! gB4b29@gB2e91@dummy gB2e91@dummy) (set! gB2e93@datum->stx (lambda (gB327f@id gB3280@datum) (make-simple-struct 'stx '5 (list gB3280@datum (gB2e85@stx-mark* gB327f@id) (gB2e89@stx-subst* gB327f@id) (gB2e8d@stx-ae* gB327f@id))))) (set! gB4b2a@gB2e93@datum->stx gB2e93@datum->stx) (set! gB2e95@gen-mark (lambda () (string '#\m))) (set! gB4b2b@gB2e95@gen-mark gB2e95@gen-mark) (set! gB2e97@anti-mark '#f) (set! gB4b2c@gB2e97@anti-mark gB2e97@anti-mark) (set! gB2e99@anti-mark? not) (set! gB4b2d@gB2e99@anti-mark? gB2e99@anti-mark?) (set! gB2e9b@mkstx (lambda (gB3283@e gB3284@m* gB3285@s* gB3286@ae*) (if (and (gB2e7f@stx? gB3283@e) (not (gB2e39@top-marked? gB3284@m*))) (call-with-values (lambda () (join-wraps gB3284@m* gB3285@s* gB3286@ae* gB3283@e)) (lambda (gB3291@gB328c gB3292@gB328e gB3293@gB3290) (let ((gB3297@ae* gB3293@gB3290) (gB3298@s* gB3292@gB328e) (gB3299@m* gB3291@gB328c)) (make-simple-struct 'stx '5 (list (gB2e81@stx-expr gB3283@e) gB3299@m* gB3298@s* gB3297@ae*))))) (make-simple-struct 'stx '5 (list gB3283@e gB3284@m* gB3285@s* gB3286@ae*))))) (set! gB4b2e@gB2e9b@mkstx gB2e9b@mkstx) (set! gB2e9d@add-mark (lambda (gB329d@m gB329e@e gB329f@ae) (gB2e9b@mkstx gB329e@e (list gB329d@m) '(shift) (list gB329f@ae)))) (set! gB4b2f@gB2e9d@add-mark gB2e9d@add-mark) (set! gB2e9f@add-subst (lambda (gB32a3@subst gB32a4@e) (gB2e9b@mkstx gB32a4@e '() (list gB32a3@subst) '()))) (set! gB4b30@gB2e9f@add-subst gB2e9f@add-subst) (set! gB2ea1@syntax-kind? (lambda (gB32a7@x gB32a8@p?) (if (gB2e7f@stx? gB32a7@x) (gB2ea1@syntax-kind? (gB2e81@stx-expr gB32a7@x) gB32a8@p?) (if (gB29f7@gB28c9@annotation? gB32a7@x) (gB2ea1@syntax-kind? (gB29f9@gB28cd@annotation-expression gB32a7@x) gB32a8@p?) (gB32a8@p? gB32a7@x))))) (set! gB4b31@gB2ea1@syntax-kind? gB2ea1@syntax-kind?) (set! gB2ea3@syntax-vector->list (lambda (gB32ab@x) (if (gB2e7f@stx? gB32ab@x) (let ((gB32ad@ls (gB2ea3@syntax-vector->list (gB2e81@stx-expr gB32ab@x))) (gB32ae@m* (gB2e85@stx-mark* gB32ab@x)) (gB32af@s* (gB2e89@stx-subst* gB32ab@x)) (gB32b0@ae* (gB2e8d@stx-ae* gB32ab@x))) (map (lambda (gB32b5@x) (gB2e9b@mkstx gB32b5@x gB32ae@m* gB32af@s* gB32b0@ae*)) gB32ad@ls)) (if (gB29f7@gB28c9@annotation? gB32ab@x) (gB2ea3@syntax-vector->list (gB29f9@gB28cd@annotation-expression gB32ab@x)) (if (vector? gB32ab@x) (vector->list gB32ab@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" gB32ab@x)))))) (set! gB4b32@gB2ea3@syntax-vector->list gB2ea3@syntax-vector->list) (set! gB2ea5@syntax-pair? (lambda (gB32b7@x) (gB2ea1@syntax-kind? gB32b7@x pair?))) (set! gB4b33@gB2ea5@syntax-pair? gB2ea5@syntax-pair?) (set! gB2ea7@syntax-vector? (lambda (gB32b9@x) (gB2ea1@syntax-kind? gB32b9@x vector?))) (set! gB4b34@gB2ea7@syntax-vector? gB2ea7@syntax-vector?) (set! gB2ea9@syntax-null? (lambda (gB32bb@x) (gB2ea1@syntax-kind? gB32bb@x null?))) (set! gB4b35@gB2ea9@syntax-null? gB2ea9@syntax-null?) (set! gB2eab@syntax-list? (lambda (gB32bd@x) (or (gB2ea9@syntax-null? gB32bd@x) (and (gB2ea5@syntax-pair? gB32bd@x) (gB2eab@syntax-list? (gB2eaf@syntax-cdr gB32bd@x)))))) (set! gB4b36@gB2eab@syntax-list? gB2eab@syntax-list?) (set! gB2ead@syntax-car (lambda (gB32bf@x) (if (gB2e7f@stx? gB32bf@x) (gB2e9b@mkstx (gB2ead@syntax-car (gB2e81@stx-expr gB32bf@x)) (gB2e85@stx-mark* gB32bf@x) (gB2e89@stx-subst* gB32bf@x) (gB2e8d@stx-ae* gB32bf@x)) (if (gB29f7@gB28c9@annotation? gB32bf@x) (gB2ead@syntax-car (gB29f9@gB28cd@annotation-expression gB32bf@x)) (if (pair? gB32bf@x) (car gB32bf@x) (assertion-violation 'syntax-car '"BUG: not a pair" gB32bf@x)))))) (set! gB4b37@gB2ead@syntax-car gB2ead@syntax-car) (set! gB2eaf@syntax-cdr (lambda (gB32c1@x) (if (gB2e7f@stx? gB32c1@x) (gB2e9b@mkstx (gB2eaf@syntax-cdr (gB2e81@stx-expr gB32c1@x)) (gB2e85@stx-mark* gB32c1@x) (gB2e89@stx-subst* gB32c1@x) (gB2e8d@stx-ae* gB32c1@x)) (if (gB29f7@gB28c9@annotation? gB32c1@x) (gB2eaf@syntax-cdr (gB29f9@gB28cd@annotation-expression gB32c1@x)) (if (pair? gB32c1@x) (cdr gB32c1@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" gB32c1@x)))))) (set! gB4b38@gB2eaf@syntax-cdr gB2eaf@syntax-cdr) (set! gB2eb1@syntax->list (lambda (gB32c3@x) (if (gB2ea5@syntax-pair? gB32c3@x) (cons (gB2ead@syntax-car gB32c3@x) (gB2eb1@syntax->list (gB2eaf@syntax-cdr gB32c3@x))) (if (gB2ea9@syntax-null? gB32c3@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" gB32c3@x))))) (set! gB4b39@gB2eb1@syntax->list gB2eb1@syntax->list) (set! gB2eb3@id? (lambda (gB32c5@x) (and (gB2e7f@stx? gB32c5@x) (symbol? (gB2e81@stx-expr gB32c5@x))))) (set! gB4b3a@gB2eb3@id? gB2eb3@id?) (set! gB2eb5@id->sym (lambda (gB32c7@x) (gB2e81@stx-expr gB32c7@x))) (set! gB4b3b@gB2eb5@id->sym gB2eb5@id->sym) (set! gB2eb7@bound-id=? (lambda (gB32c9@x gB32ca@y) (and (eq? (gB2eb5@id->sym gB32c9@x) (gB2eb5@id->sym gB32ca@y)) (same-marks? (gB2e85@stx-mark* gB32c9@x) (gB2e85@stx-mark* gB32ca@y))))) (set! gB4b3c@gB2eb7@bound-id=? gB2eb7@bound-id=?) (set! gB2eb9@free-id=? (lambda (gB32cd@i gB32ce@j) (let ((gB32d1@t0 (id->real-label gB32cd@i)) (gB32d2@t1 (id->real-label gB32ce@j))) (if (or gB32d1@t0 gB32d2@t1) (eq? gB32d1@t0 gB32d2@t1) (eq? (gB2eb5@id->sym gB32cd@i) (gB2eb5@id->sym gB32ce@j)))))) (set! gB4b3d@gB2eb9@free-id=? gB2eb9@free-id=?) (set! gB2ebb@valid-bound-ids? (lambda (gB32d5@id*) (and (for-all gB2eb3@id? gB32d5@id*) (gB2ebd@distinct-bound-ids? gB32d5@id*)))) (set! gB4b3e@gB2ebb@valid-bound-ids? gB2ebb@valid-bound-ids?) (set! gB2ebd@distinct-bound-ids? (lambda (gB32d7@id*) (or (null? gB32d7@id*) (and (not (gB2ebf@bound-id-member? (car gB32d7@id*) (cdr gB32d7@id*))) (gB2ebd@distinct-bound-ids? (cdr gB32d7@id*)))))) (set! gB4b3f@gB2ebd@distinct-bound-ids? gB2ebd@distinct-bound-ids?) (set! gB2ebf@bound-id-member? (lambda (gB32d9@id gB32da@id*) (and (pair? gB32da@id*) (or (gB2eb7@bound-id=? gB32d9@id (car gB32da@id*)) (gB2ebf@bound-id-member? gB32d9@id (cdr gB32da@id*)))))) (set! gB4b40@gB2ebf@bound-id-member? gB2ebf@bound-id-member?) (set! gB2ec1@self-evaluating? (lambda (gB32dd@x) (or (number? gB32dd@x) (string? gB32dd@x) (char? gB32dd@x) (boolean? gB32dd@x) (regexp? gB32dd@x) (bytevector? gB32dd@x)))) (set! gB4b41@gB2ec1@self-evaluating? gB2ec1@self-evaluating?) (set! gB2ec3@strip-annotations (lambda (gB32df@x) (if (pair? gB32df@x) (cons (gB2ec3@strip-annotations (car gB32df@x)) (gB2ec3@strip-annotations (cdr gB32df@x))) (if (vector? gB32df@x) (vector-map gB2ec3@strip-annotations gB32df@x) (if (gB29f7@gB28c9@annotation? gB32df@x) (gB29f6@gB28c7@annotation-stripped gB32df@x) gB32df@x))))) (set! gB4b42@gB2ec3@strip-annotations gB2ec3@strip-annotations) (set! gB2ec5@strip (lambda (gB32e1@x gB32e2@m*) (if (gB2e39@top-marked? gB32e2@m*) (if (or (gB29f7@gB28c9@annotation? gB32e1@x) (and (pair? gB32e1@x) (gB29f7@gB28c9@annotation? (car gB32e1@x))) (and (vector? gB32e1@x) (> (vector-length gB32e1@x) '0) (gB29f7@gB28c9@annotation? (vector-ref gB32e1@x '0)))) (gB2ec3@strip-annotations gB32e1@x) gB32e1@x) (let gB32e7@f ((gB32e5@x gB32e1@x)) (if (gB2e7f@stx? gB32e5@x) (begin (if (pair? (gB2e81@stx-expr gB32e5@x)) (set-source-info! (gB2e81@stx-expr gB32e5@x) '#f) (void)) (gB2ec5@strip (gB2e81@stx-expr gB32e5@x) (gB2e85@stx-mark* gB32e5@x))) (if (gB29f7@gB28c9@annotation? gB32e5@x) (gB29f6@gB28c7@annotation-stripped gB32e5@x) (if (pair? gB32e5@x) (let ((gB32e9@a (gB32e7@f (car gB32e5@x))) (gB32ea@d (gB32e7@f (cdr gB32e5@x)))) (if (and (eq? gB32e9@a (car gB32e5@x)) (eq? gB32ea@d (cdr gB32e5@x))) gB32e5@x (cons gB32e9@a gB32ea@d))) (if (vector? gB32e5@x) (let ((gB32ed@old (vector->list gB32e5@x))) (let ((gB32ef@new (map gB32e7@f gB32ed@old))) (if (for-all eq? gB32ed@old gB32ef@new) gB32e5@x (list->vector gB32ef@new)))) gB32e5@x)))))))) (set! gB4b43@gB2ec5@strip gB2ec5@strip) (set! gB2ec7@stx->datum (lambda (gB32f1@x) (gB2ec5@strip gB32f1@x '()))) (set! gB4b44@gB2ec7@stx->datum gB2ec7@stx->datum) (set! gB2ec9@id->label (lambda (gB32f3@id) (or (id->real-label gB32f3@id) (let ((gB32f5@t (gB31aa@top-level-context))) (if gB32f5@t ((lambda (gB32f7@env) (let ((gB32f9@rib (gB315a@interaction-env-rib gB32f7@env))) (call-with-values (lambda () (gB2e43@gen-define-label+loc gB32f3@id gB32f9@rib)) (lambda (gB32ff@gB32fc gB3300@gB32fe) (let ((gB3303@loc_ gB3300@gB32fe) (gB3304@lab gB32ff@gB32fc)) (begin (gB2e69@extend-rib! gB32f9@rib gB32f3@id gB3304@lab) gB3304@lab)))))) gB32f5@t) '#f))))) (set! gB4b45@gB2ec9@id->label gB2ec9@id->label) (set! gB2ecb@label->binding (lambda (gB3307@x gB3308@r) (let ((gB330b@t (gB2cce@gB2b1b@imported-label->binding gB3307@x))) (if gB330b@t ((lambda (gB330d@b) (if (and (pair? gB330d@b) (eq? (car gB330d@b) '$core-rtd)) (cons '$rtd (map gB3070@bless (cdr gB330d@b))) (if (and (pair? gB330d@b) (eq? (car gB330d@b) 'global-rtd)) (let ((gB330f@lib (cadr gB330d@b)) (gB3310@loc (cddr gB330d@b))) (cons '$rtd (symbol-value gB3310@loc))) gB330d@b))) gB330b@t) (let ((gB3313@t (assq gB3307@x gB3308@r))) (if gB3313@t (cdr gB3313@t) (let ((gB3315@t (gB31aa@top-level-context))) (if gB3315@t ((lambda (gB3317@env) (let ((gB3319@t (assq gB3307@x (gB3162@interaction-env-locs gB3317@env)))) (if gB3319@t ((lambda (gB331b@p) (cons* 'lexical (cdr gB331b@p) '#f)) gB3319@t) '(displaced-lexical . #f)))) gB3315@t) '(displaced-lexical . #f))))))))) (set! gB4b46@gB2ecb@label->binding gB2ecb@label->binding) (set! gB2ecd@make-binding cons) (set! gB4b47@gB2ecd@make-binding gB2ecd@make-binding) (set! gB2ecf@binding-type car) (set! gB4b48@gB2ecf@binding-type gB2ecf@binding-type) (set! gB2ed1@binding-value cdr) (set! gB4b49@gB2ed1@binding-value gB2ed1@binding-value) (set! gB2ed3@raise-unbound-error (lambda (gB331d@id) (gB3198@syntax-violation* '#f '"unbound identifier" gB331d@id (gB4f3f@gB4d85@make-undefined-violation)))) (set! gB4b4a@gB2ed3@raise-unbound-error gB2ed3@raise-unbound-error) (set! gB2ed5@syntax-type (lambda (gB331f@e gB3320@r) (if (gB2eb3@id? gB331f@e) (let ((gB3323@id gB331f@e)) (let ((gB3325@label (gB2ec9@id->label gB3323@id))) (let ((gB3327@b (gB2ecb@label->binding gB3325@label gB3320@r))) (let ((gB3329@type (gB2ecf@binding-type gB3327@b))) (begin (if (not gB3325@label) (gB2ed3@raise-unbound-error gB3323@id) (void)) (let ((gB332b@t gB3329@type)) (if (memv gB332b@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values gB3329@type (gB2ed1@binding-value gB3327@b) gB3323@id) (values 'other '#f '#f)))))))) (if (gB2ea5@syntax-pair? gB331f@e) (let ((gB332d@id (gB2ead@syntax-car gB331f@e))) (if (gB2eb3@id? gB332d@id) (let ((gB332f@label (gB2ec9@id->label gB332d@id))) (let ((gB3331@b (gB2ecb@label->binding gB332f@label gB3320@r))) (let ((gB3333@type (gB2ecf@binding-type gB3331@b))) (begin (if (not gB332f@label) (gB2ed3@raise-unbound-error gB332d@id) (void)) (let ((gB3335@t gB3333@type)) (if (memv gB3335@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values gB3333@type (gB2ed1@binding-value gB3331@b) gB332d@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((gB3337@d (gB2ec7@stx->datum gB331f@e))) (if (gB2ec1@self-evaluating? gB3337@d) (values 'constant gB3337@d '#f) (values 'other '#f '#f))))))) (set! gB4b4b@gB2ed5@syntax-type gB2ed5@syntax-type) (set! gB2ee3@sanitize-binding (lambda (gB3339@x gB333a@src) (if (procedure? gB3339@x) (cons* 'local-macro gB3339@x gB333a@src) (if (and (pair? gB3339@x) (eq? (car gB3339@x) 'macro!) (procedure? (cdr gB3339@x))) (cons* 'local-macro! (cdr gB3339@x) gB333a@src) (if (and (pair? gB3339@x) (eq? (car gB3339@x) '$rtd)) gB3339@x (assertion-violation 'expand '"invalid transformer" gB3339@x)))))) (set! gB4b4c@gB2ee3@sanitize-binding gB2ee3@sanitize-binding) (set! gB2ee5@make-variable-transformer (lambda (gB333d@x) (if (procedure? gB333d@x) (cons 'macro! gB333d@x) (assertion-violation 'make-variable-transformer '"not a procedure" gB333d@x)))) (set! gB4b4d@gB2ee5@make-variable-transformer gB2ee5@make-variable-transformer) (set! gB2ee7@variable-transformer? (lambda (gB333f@x) (and (pair? gB333f@x) (eq? (car gB333f@x) 'macro!) (procedure? (cdr gB333f@x))))) (set! gB4b4e@gB2ee7@variable-transformer? gB2ee7@variable-transformer?) (set! gB2ee9@variable-transformer-procedure (lambda (gB3341@x) (if (gB2ee7@variable-transformer? gB3341@x) (cdr gB3341@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" gB3341@x)))) (set! gB4b4f@gB2ee9@variable-transformer-procedure gB2ee9@variable-transformer-procedure) (set! gB2eeb@make-eval-transformer (lambda (gB3343@x) (gB2ee3@sanitize-binding (eval-core (gB2a59@gB2a11@expanded->core gB3343@x)) gB3343@x))) (set! gB4b50@gB2eeb@make-eval-transformer gB2eeb@make-eval-transformer) (set! gB303c@parse-define (lambda (gB3345@x) (let ((gB3347@t gB3345@x)) (let ((gB3349@ls/false (gB30ba@syntax-dispatch gB3347@t '(_ (any . any) any . each-any)))) (if (and gB3349@ls/false (apply (lambda (gB334b@id gB334c@fmls gB334d@b gB334e@b*) (gB2eb3@id? gB334b@id)) gB3349@ls/false)) (apply (lambda (gB3353@id gB3354@fmls gB3355@b gB3356@b*) (begin (gB30e0@verify-formals gB3354@fmls gB3345@x) (values gB3353@id (cons 'defun (cons gB3354@fmls (cons gB3355@b gB3356@b*)))))) gB3349@ls/false) (let ((gB335b@t gB3347@t)) (let ((gB335d@ls/false (gB30ba@syntax-dispatch gB335b@t '(_ any any)))) (if (and gB335d@ls/false (apply (lambda (gB335f@id gB3360@val) (gB2eb3@id? gB335f@id)) gB335d@ls/false)) (apply (lambda (gB3363@id gB3364@val) (values gB3363@id (cons 'expr gB3364@val))) gB335d@ls/false) (let ((gB3367@t gB335b@t)) (let ((gB3369@ls/false (gB30ba@syntax-dispatch gB3367@t '(_ any)))) (if (and gB3369@ls/false (apply (lambda (gB336b@id) (gB2eb3@id? gB336b@id)) gB3369@ls/false)) (apply (lambda (gB336d@id) (values gB336d@id (cons 'expr (gB3070@bless '(void))))) gB3369@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3367@t)))))))))))) (set! gB4b51@gB303c@parse-define gB303c@parse-define) (set! gB303e@parse-define-syntax (lambda (gB336f@x) (let ((gB3371@t gB336f@x)) (let ((gB3373@ls/false (gB30ba@syntax-dispatch gB3371@t '(_ any any)))) (if (and gB3373@ls/false (apply (lambda (gB3375@id gB3376@val) (gB2eb3@id? gB3375@id)) gB3373@ls/false)) (apply (lambda (gB3379@id gB337a@val) (values gB3379@id gB337a@val)) gB3373@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3371@t)))))) (set! gB4b52@gB303e@parse-define-syntax gB303e@parse-define-syntax) (set! gB3040@scheme-stx-hashtable (make-eq-hashtable)) (set! gB4b53@gB3040@scheme-stx-hashtable gB3040@scheme-stx-hashtable) (set! gB3042@scheme-stx (lambda (gB337d@sym) (or (hashtable-ref gB3040@scheme-stx-hashtable gB337d@sym '#f) (let ((gB337f@subst (gB2caa@gB2ad3@library-subst (gB2cc8@gB2b0f@find-library-by-name '(psyntax system $all))))) (let ((gB3381@stx (make-simple-struct 'stx '5 (list gB337d@sym gB2e37@top-mark* '() '())))) (let ((gB3383@stx (let ((gB3385@t (assq gB337d@sym gB337f@subst))) (if gB3385@t ((lambda (gB3387@x) (let ((gB3389@name (car gB3387@x)) (gB338a@label (cdr gB3387@x))) (gB2e9f@add-subst (make-simple-struct 'rib '6 (list (list gB3389@name) (list gB2e37@top-mark*) (list gB338a@label) '#f '#f)) gB3381@stx))) gB3385@t) gB3381@stx)))) (begin (hashtable-set! gB3040@scheme-stx-hashtable gB337d@sym gB3383@stx) gB3383@stx))))))) (set! gB4b54@gB3042@scheme-stx gB3042@scheme-stx) (set! gB3044@lexical-var car) (set! gB4b55@gB3044@lexical-var gB3044@lexical-var) (set! gB3046@lexical-mutable? cdr) (set! gB4b56@gB3046@lexical-mutable? gB3046@lexical-mutable?) (set! gB3048@set-lexical-mutable! set-cdr!) (set! gB4b57@gB3048@set-lexical-mutable! gB3048@set-lexical-mutable!) (set! gB304a@add-lexical (lambda (gB338d@lab gB338e@lex gB338f@r) (cons (cons* gB338d@lab 'lexical gB338e@lex '#f) gB338f@r))) (set! gB4b58@gB304a@add-lexical gB304a@add-lexical) (set! gB304c@add-lexicals (lambda (gB3393@lab* gB3394@lex* gB3395@r) (if (null? gB3393@lab*) gB3395@r (gB304c@add-lexicals (cdr gB3393@lab*) (cdr gB3394@lex*) (gB304a@add-lexical (car gB3393@lab*) (car gB3394@lex*) gB3395@r))))) (set! gB4b59@gB304c@add-lexicals gB304c@add-lexicals) (set! gB304e@letrec-helper (lambda (gB3399@e gB339a@r gB339b@mr gB339c@build) (let ((gB33a1@t gB3399@e)) (let ((gB33a3@ls/false (gB30ba@syntax-dispatch gB33a1@t '(_ #(each (any any)) any . each-any)))) (if gB33a3@ls/false (apply (lambda (gB33a5@lhs* gB33a6@rhs* gB33a7@b gB33a8@b*) (if (not (gB2ebb@valid-bound-ids? gB33a5@lhs*)) (gB3074@invalid-fmls-error gB3399@e gB33a5@lhs*) (let ((gB33ad@lex* (map gB2e3b@gen-lexical gB33a5@lhs*)) (gB33ae@lab* (map gB2e3f@gen-label gB33a5@lhs*))) (let ((gB33b1@rib (gB2e73@make-full-rib gB33a5@lhs* gB33ae@lab*)) (gB33b2@r (gB304c@add-lexicals gB33ae@lab* gB33ad@lex* gB339a@r))) (let ((gB33b5@body (gB30f2@chi-internal (gB2e9f@add-subst gB33b1@rib (cons gB33a7@b gB33a8@b*)) gB33b2@r gB339b@mr)) (gB33b6@rhs* (gB30d8@chi-expr* (map (lambda (gB33b9@x) (gB2e9f@add-subst gB33b1@rib gB33b9@x)) gB33a6@rhs*) gB33b2@r gB339b@mr))) (gB339c@build '#f gB33ad@lex* gB33b6@rhs* gB33b5@body)))))) gB33a3@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB33a1@t)))))) (set! gB4b5a@gB304e@letrec-helper gB304e@letrec-helper) (set! gB3050@let-transformer (lambda (gB33bb@e gB33bc@r gB33bd@mr) (let ((gB33c1@t gB33bb@e)) (let ((gB33c3@ls/false (gB30ba@syntax-dispatch gB33c1@t '(_ #(each (any any)) any . each-any)))) (if gB33c3@ls/false (apply (lambda (gB33c5@lhs* gB33c6@rhs* gB33c7@b gB33c8@b*) (if (not (gB2ebb@valid-bound-ids? gB33c5@lhs*)) (gB3074@invalid-fmls-error gB33bb@e gB33c5@lhs*) (let ((gB33cd@lex* (map gB2e3b@gen-lexical gB33c5@lhs*)) (gB33ce@lab* (map gB2e3f@gen-label gB33c5@lhs*)) (gB33cf@rhs* (gB30d8@chi-expr* gB33c6@rhs* gB33bc@r gB33bd@mr))) (let ((gB33d3@rib (gB2e73@make-full-rib gB33c5@lhs* gB33ce@lab*)) (gB33d4@r (gB304c@add-lexicals gB33ce@lab* gB33cd@lex* gB33bc@r))) (let ((gB33d7@body (gB30f2@chi-internal (gB2e9f@add-subst gB33d3@rib (cons gB33c7@b gB33c8@b*)) gB33d4@r gB33bd@mr))) (gB2e1b@gB2d7e@build-let '#f gB33cd@lex* gB33cf@rhs* gB33d7@body)))))) gB33c3@ls/false) (let ((gB33d9@t gB33c1@t)) (let ((gB33db@ls/false (gB30ba@syntax-dispatch gB33d9@t '(_ any #(each (any any)) any . each-any)))) (if gB33db@ls/false (apply (lambda (gB33dd@loop gB33de@lhs* gB33df@rhs* gB33e0@b gB33e1@b*) (if (not (gB2ebb@valid-bound-ids? gB33de@lhs*)) (gB3074@invalid-fmls-error gB33bb@e gB33de@lhs*) (let ((gB33e7@lex* (map gB2e3b@gen-lexical gB33de@lhs*)) (gB33e8@lab* (map gB2e3f@gen-label gB33de@lhs*)) (gB33e9@rhs* (gB30d8@chi-expr* gB33df@rhs* gB33bc@r gB33bd@mr)) (gB33ea@loop-lex (gB2e3b@gen-lexical gB33dd@loop)) (gB33eb@loop-lab (gB2e3f@gen-label gB33dd@loop))) (let ((gB33f1@loop-rib (gB2e73@make-full-rib (list gB33dd@loop) (list gB33eb@loop-lab))) (gB33f2@rib (gB2e73@make-full-rib gB33de@lhs* gB33e8@lab*)) (gB33f3@r (gB304c@add-lexicals (cons gB33eb@loop-lab gB33e8@lab*) (cons gB33ea@loop-lex gB33e7@lex*) gB33bc@r))) (let ((gB33f7@body (gB30f2@chi-internal (gB2e9f@add-subst gB33f1@loop-rib (gB2e9f@add-subst gB33f2@rib (cons gB33e0@b gB33e1@b*))) gB33f3@r gB33bd@mr))) (gB2e1c@gB2d80@build-named-let '#f gB33ea@loop-lex gB33e7@lex* gB33e9@rhs* gB33f7@body)))))) gB33db@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB33d9@t))))))))) (set! gB4b5b@gB3050@let-transformer gB3050@let-transformer) (set! gB3052@letrec-transformer (lambda (gB33f9@e gB33fa@r gB33fb@mr) (gB304e@letrec-helper gB33f9@e gB33fa@r gB33fb@mr gB2e1a@gB2d7c@build-letrec))) (set! gB4b5c@gB3052@letrec-transformer gB3052@letrec-transformer) (set! gB3054@letrec*-transformer (lambda (gB33ff@e gB3400@r gB3401@mr) (gB304e@letrec-helper gB33ff@e gB3400@r gB3401@mr gB2e1d@gB2d82@build-letrec*))) (set! gB4b5d@gB3054@letrec*-transformer gB3054@letrec*-transformer) (set! gB3056@fluid-let-syntax-transformer (lambda (gB3405@e gB3406@r gB3407@mr) (letrec* ((gB340c@lookup (lambda (gB341f@x) (or (gB2ec9@id->label gB341f@x) (gB319a@syntax-violation '#f '"unbound identifier" gB3405@e gB341f@x))))) (let ((gB340d@t gB3405@e)) (let ((gB340f@ls/false (gB30ba@syntax-dispatch gB340d@t '(_ #(each (any any)) any . each-any)))) (if gB340f@ls/false (apply (lambda (gB3411@lhs* gB3412@rhs* gB3413@b gB3414@b*) (if (not (gB2ebb@valid-bound-ids? gB3411@lhs*)) (gB3074@invalid-fmls-error gB3405@e gB3411@lhs*) (let ((gB3419@lab* (map gB340c@lookup gB3411@lhs*)) (gB341a@rhs* (map (lambda (gB341d@x) (gB2eeb@make-eval-transformer (gB3114@expand-transformer gB341d@x gB3407@mr))) gB3412@rhs*))) (gB30f2@chi-internal (cons gB3413@b gB3414@b*) (append (map cons gB3419@lab* gB341a@rhs*) gB3406@r) (append (map cons gB3419@lab* gB341a@rhs*) gB3407@mr))))) gB340f@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB340d@t))))))) (set! gB4b5e@gB3056@fluid-let-syntax-transformer gB3056@fluid-let-syntax-transformer) (set! gB3058@type-descriptor-transformer (lambda (gB3421@e gB3422@r gB3423@mr) (let ((gB3427@t gB3421@e)) (let ((gB3429@ls/false (gB30ba@syntax-dispatch gB3427@t '(_ any)))) (if (and gB3429@ls/false (apply (lambda (gB342b@id) (gB2eb3@id? gB342b@id)) gB3429@ls/false)) (apply (lambda (gB342d@id) (let ((gB342f@lab (gB2ec9@id->label gB342d@id))) (let ((gB3431@b (gB2ecb@label->binding gB342f@lab gB3422@r))) (let ((gB3433@type (gB2ecf@binding-type gB3431@b))) (begin (if (not gB342f@lab) (gB2ed3@raise-unbound-error gB342d@id) (void)) (if (not (and (eq? gB3433@type '$rtd) (not (list? (gB2ed1@binding-value gB3431@b))))) (gB319a@syntax-violation '#f '"not a record type" gB3421@e) (void)) (list 'quote (gB2ed1@binding-value gB3431@b))))))) gB3429@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3427@t)))))) (set! gB4b5f@gB3058@type-descriptor-transformer gB3058@type-descriptor-transformer) (set! gB305a@record-type-descriptor-transformer (lambda (gB3435@e gB3436@r gB3437@mr) (let ((gB343b@t gB3435@e)) (let ((gB343d@ls/false (gB30ba@syntax-dispatch gB343b@t '(_ any)))) (if (and gB343d@ls/false (apply (lambda (gB343f@id) (gB2eb3@id? gB343f@id)) gB343d@ls/false)) (apply (lambda (gB3441@id) (let ((gB3443@lab (gB2ec9@id->label gB3441@id))) (let ((gB3445@b (gB2ecb@label->binding gB3443@lab gB3436@r))) (let ((gB3447@type (gB2ecf@binding-type gB3445@b))) (begin (if (not gB3443@lab) (gB2ed3@raise-unbound-error gB3441@id) (void)) (if (not (and (eq? gB3447@type '$rtd) (list? (gB2ed1@binding-value gB3445@b)))) (gB319a@syntax-violation '#f '"not a record type" gB3435@e) (void)) (gB30dc@chi-expr (car (gB2ed1@binding-value gB3445@b)) gB3436@r gB3437@mr)))))) gB343d@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB343b@t)))))) (set! gB4b60@gB305a@record-type-descriptor-transformer gB305a@record-type-descriptor-transformer) (set! gB305c@record-constructor-descriptor-transformer (lambda (gB3449@e gB344a@r gB344b@mr) (let ((gB344f@t gB3449@e)) (let ((gB3451@ls/false (gB30ba@syntax-dispatch gB344f@t '(_ any)))) (if (and gB3451@ls/false (apply (lambda (gB3453@id) (gB2eb3@id? gB3453@id)) gB3451@ls/false)) (apply (lambda (gB3455@id) (let ((gB3457@lab (gB2ec9@id->label gB3455@id))) (let ((gB3459@b (gB2ecb@label->binding gB3457@lab gB344a@r))) (let ((gB345b@type (gB2ecf@binding-type gB3459@b))) (begin (if (not gB3457@lab) (gB2ed3@raise-unbound-error gB3455@id) (void)) (if (not (and (eq? gB345b@type '$rtd) (list? (gB2ed1@binding-value gB3459@b)))) (gB319a@syntax-violation '#f '"invalid type" gB3449@e) (void)) (gB30dc@chi-expr (cadr (gB2ed1@binding-value gB3459@b)) gB344a@r gB344b@mr)))))) gB3451@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB344f@t)))))) (set! gB4b61@gB305c@record-constructor-descriptor-transformer gB305c@record-constructor-descriptor-transformer) (set! gB305e@when-macro (lambda (gB345d@e) (let ((gB345f@t gB345d@e)) (let ((gB3461@ls/false (gB30ba@syntax-dispatch gB345f@t '(_ any any . each-any)))) (if gB3461@ls/false (apply (lambda (gB3463@test gB3464@e gB3465@e*) (gB3070@bless (list 'if gB3463@test (cons 'begin (cons gB3464@e gB3465@e*))))) gB3461@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB345f@t)))))) (set! gB4b62@gB305e@when-macro gB305e@when-macro) (set! gB3060@unless-macro (lambda (gB3469@e) (let ((gB346b@t gB3469@e)) (let ((gB346d@ls/false (gB30ba@syntax-dispatch gB346b@t '(_ any any . each-any)))) (if gB346d@ls/false (apply (lambda (gB346f@test gB3470@e gB3471@e*) (gB3070@bless (list 'if (list 'not gB346f@test) (cons 'begin (cons gB3470@e gB3471@e*))))) gB346d@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB346b@t)))))) (set! gB4b63@gB3060@unless-macro gB3060@unless-macro) (set! gB3062@if-transformer (lambda (gB3475@e gB3476@r gB3477@mr) (let ((gB347b@t gB3475@e)) (let ((gB347d@ls/false (gB30ba@syntax-dispatch gB347b@t '(_ any any any)))) (if gB347d@ls/false (apply (lambda (gB347f@e0 gB3480@e1 gB3481@e2) (list 'if (gB30dc@chi-expr gB347f@e0 gB3476@r gB3477@mr) (gB30dc@chi-expr gB3480@e1 gB3476@r gB3477@mr) (gB30dc@chi-expr gB3481@e2 gB3476@r gB3477@mr))) gB347d@ls/false) (let ((gB3485@t gB347b@t)) (let ((gB3487@ls/false (gB30ba@syntax-dispatch gB3485@t '(_ any any)))) (if gB3487@ls/false (apply (lambda (gB3489@e0 gB348a@e1) (list 'if (gB30dc@chi-expr gB3489@e0 gB3476@r gB3477@mr) (gB30dc@chi-expr gB348a@e1 gB3476@r gB3477@mr) (gB2e19@gB2d7a@build-void))) gB3487@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3485@t))))))))) (set! gB4b64@gB3062@if-transformer gB3062@if-transformer) (set! gB3064@and-transformer (lambda (gB348d@e gB348e@r gB348f@mr) (let ((gB3493@t gB348d@e)) (let ((gB3495@ls/false (gB30ba@syntax-dispatch gB3493@t '(_ . each-any)))) (if gB3495@ls/false (apply (lambda (gB3497@e*) (cons 'and (gB30d8@chi-expr* gB3497@e* gB348e@r gB348f@mr))) gB3495@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3493@t)))))) (set! gB4b65@gB3064@and-transformer gB3064@and-transformer) (set! gB3066@or-transformer (lambda (gB3499@e gB349a@r gB349b@mr) (let ((gB349f@t gB3499@e)) (let ((gB34a1@ls/false (gB30ba@syntax-dispatch gB349f@t '(_ . each-any)))) (if gB34a1@ls/false (apply (lambda (gB34a3@e*) (cons 'or (gB30d8@chi-expr* gB34a3@e* gB349a@r gB349b@mr))) gB34a1@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB349f@t)))))) (set! gB4b66@gB3066@or-transformer gB3066@or-transformer) (set! gB3068@case-macro (lambda (gB34a5@e) (letrec* ((gB34a8@build-last (lambda (gB34cf@cls) (let ((gB34d1@t gB34cf@cls)) (let ((gB34d3@ls/false (gB30ba@syntax-dispatch gB34d1@t '(#(scheme-id else) any . each-any)))) (if gB34d3@ls/false (apply (lambda (gB34d5@e gB34d6@e*) (cons 'begin (cons gB34d5@e gB34d6@e*))) gB34d3@ls/false) (let ((gB34d9@t gB34d1@t)) (let ((gB34db@ls/false (gB30ba@syntax-dispatch gB34d9@t '_))) (if gB34db@ls/false (apply (lambda () (gB34aa@build-one gB34cf@cls '(if #f #f))) gB34db@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB34d9@t))))))))) (gB34aa@build-one (lambda (gB34c1@cls gB34c2@k) (let ((gB34c5@t gB34c1@cls)) (let ((gB34c7@ls/false (gB30ba@syntax-dispatch gB34c5@t '(each-any any . each-any)))) (if gB34c7@ls/false (apply (lambda (gB34c9@d* gB34ca@e gB34cb@e*) (list 'if (list 'memv 't (list 'quote gB34c9@d*)) (cons 'begin (cons gB34ca@e gB34cb@e*)) gB34c2@k)) gB34c7@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB34c5@t))))))) (let ((gB34ab@t gB34a5@e)) (let ((gB34ad@ls/false (gB30ba@syntax-dispatch gB34ab@t '(_ any)))) (if gB34ad@ls/false (apply (lambda (gB34af@expr) (gB3070@bless (cons 'let (cons (list (list 't gB34af@expr)) '((if #f #f)))))) gB34ad@ls/false) (let ((gB34b1@t gB34ab@t)) (let ((gB34b3@ls/false (gB30ba@syntax-dispatch gB34b1@t '(_ any any . each-any)))) (if gB34b3@ls/false (apply (lambda (gB34b5@expr gB34b6@cls gB34b7@cls*) (gB3070@bless (list 'let (list (list 't gB34b5@expr)) (let gB34bf@f ((gB34bb@cls gB34b6@cls) (gB34bc@cls* gB34b7@cls*)) (if (null? gB34bc@cls*) (gB34a8@build-last gB34bb@cls) (gB34aa@build-one gB34bb@cls (gB34bf@f (car gB34bc@cls*) (cdr gB34bc@cls*)))))))) gB34b3@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB34b1@t)))))))))) (set! gB4b67@gB3068@case-macro gB3068@case-macro) (set! gB306a@quote-transformer (lambda (gB34dd@e gB34de@r gB34df@mr) (let ((gB34e3@t gB34dd@e)) (let ((gB34e5@ls/false (gB30ba@syntax-dispatch gB34e3@t '(_ any)))) (if gB34e5@ls/false (apply (lambda (gB34e7@datum) (list 'quote (gB2ec7@stx->datum gB34e7@datum))) gB34e5@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB34e3@t)))))) (set! gB4b68@gB306a@quote-transformer gB306a@quote-transformer) (set! gB306c@case-lambda-transformer (lambda (gB34e9@e gB34ea@r gB34eb@mr) (let ((gB34ef@t gB34e9@e)) (let ((gB34f1@ls/false (gB30ba@syntax-dispatch gB34ef@t '(_ . #(each (any any . each-any)))))) (if gB34f1@ls/false (apply (lambda (gB34f3@fmls* gB34f4@b* gB34f5@b**) (call-with-values (lambda () (gB30e4@chi-lambda-clause* gB34e9@e gB34f3@fmls* (map cons gB34f4@b* gB34f5@b**) gB34ea@r gB34eb@mr)) (lambda (gB34fd@gB34fa gB34fe@gB34fc) (let ((gB3501@body* gB34fe@gB34fc) (gB3502@fmls* gB34fd@gB34fa)) (gB2e17@gB2d4a@build-case-lambda '#f gB3502@fmls* gB3501@body*))))) gB34f1@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB34ef@t)))))) (set! gB4b69@gB306c@case-lambda-transformer gB306c@case-lambda-transformer) (set! gB306e@lambda-transformer (lambda (gB3505@e gB3506@r gB3507@mr) (let ((gB350b@t gB3505@e)) (let ((gB350d@ls/false (gB30ba@syntax-dispatch gB350b@t '(_ any any . each-any)))) (if gB350d@ls/false (apply (lambda (gB350f@fmls gB3510@b gB3511@b*) (call-with-values (lambda () (gB30e2@chi-lambda-clause gB3505@e gB350f@fmls (cons gB3510@b gB3511@b*) gB3506@r gB3507@mr)) (lambda (gB3519@gB3516 gB351a@gB3518) (let ((gB351d@body gB351a@gB3518) (gB351e@fmls gB3519@gB3516)) (gB2e16@gB2d48@build-lambda '#f gB351e@fmls gB351d@body))))) gB350d@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB350b@t)))))) (set! gB4b6a@gB306e@lambda-transformer gB306e@lambda-transformer) (set! gB3070@bless (lambda (gB3521@x) (gB2e9b@mkstx (let gB3525@f ((gB3523@x gB3521@x)) (if (gB2e7f@stx? gB3523@x) gB3523@x (if (pair? gB3523@x) (cons (gB3525@f (car gB3523@x)) (gB3525@f (cdr gB3523@x))) (if (symbol? gB3523@x) (gB3042@scheme-stx gB3523@x) (if (vector? gB3523@x) (vector-map gB3525@f gB3523@x) gB3523@x))))) '() '() '()))) (set! gB4b6b@gB3070@bless gB3070@bless) (set! gB3072@with-syntax-macro (lambda (gB3527@e) (let ((gB3529@t gB3527@e)) (let ((gB352b@ls/false (gB30ba@syntax-dispatch gB3529@t '(_ #(each (any any)) any . each-any)))) (if gB352b@ls/false (apply (lambda (gB352d@pat* gB352e@expr* gB352f@b gB3530@b*) (let ((gB3535@idn* (let gB3539@f ((gB3537@pat* gB352d@pat*)) (if (null? gB3537@pat*) '() (call-with-values (lambda () (gB30b8@convert-pattern (car gB3537@pat*) '())) (lambda (gB353f@gB353c gB3540@gB353e) (let ((gB3543@idn* gB3540@gB353e) (gB3544@pat gB353f@gB353c)) (append gB3543@idn* (gB3539@f (cdr gB3537@pat*)))))))))) (begin (gB30e0@verify-formals (map car gB3535@idn*) gB3527@e) (let ((gB3547@t* (gB3188@generate-temporaries gB352e@expr*))) (gB3070@bless (list 'let (map list gB3547@t* gB352e@expr*) (let gB354d@f ((gB3549@pat* gB352d@pat*) (gB354a@t* gB3547@t*)) (if (null? gB3549@pat*) (cons 'begin (cons '#f (cons gB352f@b gB3530@b*))) (list 'syntax-case (car gB354a@t*) '() (list (car gB3549@pat*) (gB354d@f (cdr gB3549@pat*) (cdr gB354a@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car gB3549@pat*)) (car gB354a@t*)))))))))))) gB352b@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3529@t)))))) (set! gB4b6c@gB3072@with-syntax-macro gB3072@with-syntax-macro) (set! gB3074@invalid-fmls-error (lambda (gB354f@stx gB3550@fmls) (let ((gB3553@t gB3550@fmls)) (let ((gB3555@ls/false (gB30ba@syntax-dispatch gB3553@t '#(each+ any () any)))) (if gB3555@ls/false (apply (lambda (gB3557@id* gB3558@last) (let gB355d@f ((gB355b@id* (if (gB2eb3@id? gB3558@last) (cons gB3558@last gB3557@id*) (if (gB2ea9@syntax-null? gB3558@last) gB3557@id* (gB319a@syntax-violation '#f '"not an identifier" gB354f@stx gB3558@last))))) (if (null? gB355b@id*) (values) (if (not (gB2eb3@id? (car gB355b@id*))) (gB319a@syntax-violation '#f '"not an identifier" gB354f@stx (car gB355b@id*)) (begin (gB355d@f (cdr gB355b@id*)) (if (gB2ebf@bound-id-member? (car gB355b@id*) (cdr gB355b@id*)) (gB319a@syntax-violation '#f '"duplicate binding" gB354f@stx (car gB355b@id*)) (void))))))) gB3555@ls/false) (let ((gB355f@t gB3553@t)) (let ((gB3561@ls/false (gB30ba@syntax-dispatch gB355f@t '_))) (if gB3561@ls/false (apply (lambda () (gB319a@syntax-violation '#f '"malformed binding form" gB354f@stx gB3550@fmls)) gB3561@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB355f@t))))))))) (set! gB4b6d@gB3074@invalid-fmls-error gB3074@invalid-fmls-error) (set! gB3076@let-macro (lambda (gB3563@stx) (let ((gB3565@t gB3563@stx)) (let ((gB3567@ls/false (gB30ba@syntax-dispatch gB3565@t '(_ #(each (any any)) any . each-any)))) (if gB3567@ls/false (apply (lambda (gB3569@lhs* gB356a@rhs* gB356b@b gB356c@b*) (if (gB2ebb@valid-bound-ids? gB3569@lhs*) (gB3070@bless (cons (cons 'lambda (cons gB3569@lhs* (cons gB356b@b gB356c@b*))) gB356a@rhs*)) (gB3074@invalid-fmls-error gB3563@stx gB3569@lhs*))) gB3567@ls/false) (let ((gB3571@t gB3565@t)) (let ((gB3573@ls/false (gB30ba@syntax-dispatch gB3571@t '(_ any #(each (any any)) any . each-any)))) (if (and gB3573@ls/false (apply (lambda (gB3575@f gB3576@lhs* gB3577@rhs* gB3578@b gB3579@b*) (gB2eb3@id? gB3575@f)) gB3573@ls/false)) (apply (lambda (gB357f@f gB3580@lhs* gB3581@rhs* gB3582@b gB3583@b*) (if (gB2ebb@valid-bound-ids? gB3580@lhs*) (gB3070@bless (cons (list 'letrec (list (list gB357f@f (cons 'lambda (cons gB3580@lhs* (cons gB3582@b gB3583@b*))))) gB357f@f) gB3581@rhs*)) (gB3074@invalid-fmls-error gB3563@stx gB3580@lhs*))) gB3573@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3571@t))))))))) (set! gB4b6e@gB3076@let-macro gB3076@let-macro) (set! gB3078@let-values-macro (lambda (gB3589@stx) (letrec* ((gB358c@rename (lambda (gB35f1@x gB35f2@old* gB35f3@new*) (begin (if (not (gB2eb3@id? gB35f1@x)) (gB319a@syntax-violation '#f '"not an indentifier" gB3589@stx gB35f1@x) (void)) (if (gB2ebf@bound-id-member? gB35f1@x gB35f2@old*) (gB319a@syntax-violation '#f '"duplicate binding" gB3589@stx gB35f1@x) (void)) (let ((gB35f7@y (gensym (gB31a0@syntax->datum gB35f1@x)))) (values gB35f7@y (cons gB35f1@x gB35f2@old*) (cons gB35f7@y gB35f3@new*)))))) (gB358e@rename* (lambda (gB35df@x* gB35e0@old* gB35e1@new*) (if (null? gB35df@x*) (values '() gB35e0@old* gB35e1@new*) (call-with-values (lambda () (gB358c@rename (car gB35df@x*) gB35e0@old* gB35e1@new*)) (lambda (gB35e5@x gB35e6@old* gB35e7@new*) (call-with-values (lambda () (gB358e@rename* (cdr gB35df@x*) gB35e6@old* gB35e7@new*)) (lambda (gB35eb@x* gB35ec@old* gB35ed@new*) (values (cons gB35e5@x gB35eb@x*) gB35ec@old* gB35ed@new*))))))))) (let ((gB358f@t gB3589@stx)) (let ((gB3591@ls/false (gB30ba@syntax-dispatch gB358f@t '(_ () any . each-any)))) (if gB3591@ls/false (apply (lambda (gB3593@b gB3594@b*) (cons* (gB3070@bless 'let) '() gB3593@b gB3594@b*)) gB3591@ls/false) (let ((gB3597@t gB358f@t)) (let ((gB3599@ls/false (gB30ba@syntax-dispatch gB3597@t '(_ #(each (any any)) any . each-any)))) (if gB3599@ls/false (apply (lambda (gB359b@lhs* gB359c@rhs* gB359d@b gB359e@b*) (gB3070@bless (let gB35ab@f ((gB35a3@lhs* gB359b@lhs*) (gB35a4@rhs* gB359c@rhs*) (gB35a5@old* '()) (gB35a6@new* '())) (if (null? gB35a3@lhs*) (cons 'let (cons (map list gB35a5@old* gB35a6@new*) (cons gB359d@b gB359e@b*))) (let ((gB35ad@t (car gB35a3@lhs*))) (let ((gB35af@ls/false (gB30ba@syntax-dispatch gB35ad@t 'each-any))) (if gB35af@ls/false (apply (lambda (gB35b1@x*) (call-with-values (lambda () (gB358e@rename* gB35b1@x* gB35a5@old* gB35a6@new*)) (lambda (gB35b9@gB35b4 gB35ba@gB35b6 gB35bb@gB35b8) (let ((gB35bf@new* gB35bb@gB35b8) (gB35c0@old* gB35ba@gB35b6) (gB35c1@y* gB35b9@gB35b4)) (list 'call-with-values (list 'lambda '() (car gB35a4@rhs*)) (list 'lambda gB35c1@y* (gB35ab@f (cdr gB35a3@lhs*) (cdr gB35a4@rhs*) gB35c0@old* gB35bf@new*))))))) gB35af@ls/false) (let ((gB35c5@t gB35ad@t)) (let ((gB35c7@ls/false (gB30ba@syntax-dispatch gB35c5@t '#(each+ any () any)))) (if gB35c7@ls/false (apply (lambda (gB35c9@x* gB35ca@x) (call-with-values (lambda () (gB358c@rename gB35ca@x gB35a5@old* gB35a6@new*)) (lambda (gB35cd@y gB35ce@old* gB35cf@new*) (call-with-values (lambda () (gB358e@rename* gB35c9@x* gB35ce@old* gB35cf@new*)) (lambda (gB35d3@y* gB35d4@old* gB35d5@new*) (list 'call-with-values (list 'lambda '() (car gB35a4@rhs*)) (list 'lambda (append gB35d3@y* gB35cd@y) (gB35ab@f (cdr gB35a3@lhs*) (cdr gB35a4@rhs*) gB35d4@old* gB35d5@new*)))))))) gB35c7@ls/false) (let ((gB35d9@t gB35c5@t)) (let ((gB35db@ls/false (gB30ba@syntax-dispatch gB35d9@t 'any))) (if gB35db@ls/false (apply (lambda (gB35dd@others) (gB319a@syntax-violation '#f '"malformed bindings" gB3589@stx gB35dd@others)) gB35db@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB35d9@t)))))))))))))) gB3599@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3597@t)))))))))) (set! gB4b6f@gB3078@let-values-macro gB3078@let-values-macro) (set! gB307a@let*-values-macro (lambda (gB35f9@stx) (letrec* ((gB35fc@check (lambda (gB362b@x*) (if (not (null? gB362b@x*)) (let ((gB362d@x (car gB362b@x*))) (begin (if (not (gB2eb3@id? gB362d@x)) (gB319a@syntax-violation '#f '"not an identifier" gB35f9@stx gB362d@x) (void)) (gB35fc@check (cdr gB362b@x*)) (if (gB2ebf@bound-id-member? gB362d@x (cdr gB362b@x*)) (gB319a@syntax-violation '#f '"duplicate identifier" gB35f9@stx gB362d@x) (void)))) (void))))) (let ((gB35fd@t gB35f9@stx)) (let ((gB35ff@ls/false (gB30ba@syntax-dispatch gB35fd@t '(_ () any . each-any)))) (if gB35ff@ls/false (apply (lambda (gB3601@b gB3602@b*) (cons* (gB3070@bless 'let) '() gB3601@b gB3602@b*)) gB35ff@ls/false) (let ((gB3605@t gB35fd@t)) (let ((gB3607@ls/false (gB30ba@syntax-dispatch gB3605@t '(_ #(each (any any)) any . each-any)))) (if gB3607@ls/false (apply (lambda (gB3609@lhs* gB360a@rhs* gB360b@b gB360c@b*) (gB3070@bless (let gB3615@f ((gB3611@lhs* gB3609@lhs*) (gB3612@rhs* gB360a@rhs*)) (if (null? gB3611@lhs*) (cons 'begin (cons gB360b@b gB360c@b*)) (let ((gB3617@t (car gB3611@lhs*))) (let ((gB3619@ls/false (gB30ba@syntax-dispatch gB3617@t 'each-any))) (if gB3619@ls/false (apply (lambda (gB361b@x*) (begin (gB35fc@check gB361b@x*) (list 'call-with-values (list 'lambda '() (car gB3612@rhs*)) (list 'lambda gB361b@x* (gB3615@f (cdr gB3611@lhs*) (cdr gB3612@rhs*)))))) gB3619@ls/false) (let ((gB361d@t gB3617@t)) (let ((gB361f@ls/false (gB30ba@syntax-dispatch gB361d@t '#(each+ any () any)))) (if gB361f@ls/false (apply (lambda (gB3621@x* gB3622@x) (begin (gB35fc@check (cons gB3622@x gB3621@x*)) (list 'call-with-values (list 'lambda '() (car gB3612@rhs*)) (list 'lambda (append gB3621@x* gB3622@x) (gB3615@f (cdr gB3611@lhs*) (cdr gB3612@rhs*)))))) gB361f@ls/false) (let ((gB3625@t gB361d@t)) (let ((gB3627@ls/false (gB30ba@syntax-dispatch gB3625@t 'any))) (if gB3627@ls/false (apply (lambda (gB3629@others) (gB319a@syntax-violation '#f '"malformed bindings" gB35f9@stx gB3629@others)) gB3627@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3625@t)))))))))))))) gB3607@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3605@t)))))))))) (set! gB4b70@gB307a@let*-values-macro gB307a@let*-values-macro) (set! gB307c@trace-lambda-macro (lambda (gB362f@stx) (let ((gB3631@t gB362f@stx)) (let ((gB3633@ls/false (gB30ba@syntax-dispatch gB3631@t '(_ any each-any any . each-any)))) (if gB3633@ls/false (apply (lambda (gB3635@who gB3636@fmls gB3637@b gB3638@b*) (if (gB2ebb@valid-bound-ids? gB3636@fmls) (gB3070@bless (list 'make-traced-procedure (list 'quote gB3635@who) (cons 'lambda (cons gB3636@fmls (cons gB3637@b gB3638@b*))))) (gB3074@invalid-fmls-error gB362f@stx gB3636@fmls))) gB3633@ls/false) (let ((gB363d@t gB3631@t)) (let ((gB363f@ls/false (gB30ba@syntax-dispatch gB363d@t '(_ any #(each+ any () any) any . each-any)))) (if gB363f@ls/false (apply (lambda (gB3641@who gB3642@fmls gB3643@last gB3644@b gB3645@b*) (if (gB2ebb@valid-bound-ids? (cons gB3643@last gB3642@fmls)) (gB3070@bless (list 'make-traced-procedure (list 'quote gB3641@who) (cons 'lambda (cons (append gB3642@fmls gB3643@last) (cons gB3644@b gB3645@b*))))) (gB3074@invalid-fmls-error gB362f@stx (append gB3642@fmls gB3643@last)))) gB363f@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB363d@t))))))))) (set! gB4b71@gB307c@trace-lambda-macro gB307c@trace-lambda-macro) (set! gB307e@trace-define-macro (lambda (gB364b@stx) (let ((gB364d@t gB364b@stx)) (let ((gB364f@ls/false (gB30ba@syntax-dispatch gB364d@t '(_ (any . each-any) any . each-any)))) (if gB364f@ls/false (apply (lambda (gB3651@who gB3652@fmls gB3653@b gB3654@b*) (if (gB2ebb@valid-bound-ids? gB3652@fmls) (gB3070@bless (list 'define gB3651@who (list 'make-traced-procedure (list 'quote gB3651@who) (cons 'lambda (cons gB3652@fmls (cons gB3653@b gB3654@b*)))))) (gB3074@invalid-fmls-error gB364b@stx gB3652@fmls))) gB364f@ls/false) (let ((gB3659@t gB364d@t)) (let ((gB365b@ls/false (gB30ba@syntax-dispatch gB3659@t '(_ (any . #(each+ any () any)) any . each-any)))) (if gB365b@ls/false (apply (lambda (gB365d@who gB365e@fmls gB365f@last gB3660@b gB3661@b*) (if (gB2ebb@valid-bound-ids? (cons gB365f@last gB365e@fmls)) (gB3070@bless (list 'define gB365d@who (list 'make-traced-procedure (list 'quote gB365d@who) (cons 'lambda (cons (append gB365e@fmls gB365f@last) (cons gB3660@b gB3661@b*)))))) (gB3074@invalid-fmls-error gB364b@stx (append gB365e@fmls gB365f@last)))) gB365b@ls/false) (let ((gB3667@t gB3659@t)) (let ((gB3669@ls/false (gB30ba@syntax-dispatch gB3667@t '(_ any any)))) (if gB3669@ls/false (apply (lambda (gB366b@who gB366c@expr) (if (gB2eb3@id? gB366b@who) (gB3070@bless (list 'define gB366b@who (list 'let (list (list 'v gB366c@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote gB366b@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (gB319a@syntax-violation '#f '"invalid name" gB364b@stx))) gB3669@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3667@t)))))))))))) (set! gB4b72@gB307e@trace-define-macro gB307e@trace-define-macro) (set! gB3080@trace-define-syntax-macro (lambda (gB366f@stx) (let ((gB3671@t gB366f@stx)) (let ((gB3673@ls/false (gB30ba@syntax-dispatch gB3671@t '(_ any any)))) (if gB3673@ls/false (apply (lambda (gB3675@who gB3676@expr) (if (gB2eb3@id? gB3675@who) (gB3070@bless (list 'define-syntax gB3675@who (list 'make-traced-macro (list 'quote gB3675@who) gB3676@expr))) (gB319a@syntax-violation '#f '"invalid name" gB366f@stx))) gB3673@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3671@t)))))) (set! gB4b73@gB3080@trace-define-syntax-macro gB3080@trace-define-syntax-macro) (set! gB3082@trace-let/rec-syntax (lambda (gB3679@who) (lambda (gB367b@stx) (let ((gB367d@t gB367b@stx)) (let ((gB367f@ls/false (gB30ba@syntax-dispatch gB367d@t '(_ #(each (any any)) any . each-any)))) (if gB367f@ls/false (apply (lambda (gB3681@lhs* gB3682@rhs* gB3683@b gB3684@b*) (if (gB2ebb@valid-bound-ids? gB3681@lhs*) (let ((gB3689@rhs* (map (lambda (gB368b@lhs gB368c@rhs) (list 'make-traced-macro (list 'quote gB368b@lhs) gB368c@rhs)) gB3681@lhs* gB3682@rhs*))) (gB3070@bless (cons gB3679@who (cons (map list gB3681@lhs* gB3689@rhs*) (cons gB3683@b gB3684@b*))))) (gB3074@invalid-fmls-error gB367b@stx gB3681@lhs*))) gB367f@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB367d@t))))))) (set! gB4b74@gB3082@trace-let/rec-syntax gB3082@trace-let/rec-syntax) (set! gB3084@trace-let-syntax-macro (gB3082@trace-let/rec-syntax 'let-syntax)) (set! gB4b75@gB3084@trace-let-syntax-macro gB3084@trace-let-syntax-macro) (set! gB3086@trace-letrec-syntax-macro (gB3082@trace-let/rec-syntax 'letrec-syntax)) (set! gB4b76@gB3086@trace-letrec-syntax-macro gB3086@trace-letrec-syntax-macro) (set! gB3088@guard-macro (lambda (gB368f@x) (letrec* ((gB3692@gen-clauses (lambda (gB36a9@con gB36aa@outerk gB36ab@clause*) (letrec* ((gB36b0@f (lambda (gB36e9@x gB36ea@k) (let ((gB36ed@t gB36e9@x)) (let ((gB36ef@ls/false (gB30ba@syntax-dispatch gB36ed@t '(any #(scheme-id =>) any)))) (if gB36ef@ls/false (apply (lambda (gB36f1@e gB36f2@p) (let ((gB36f5@t (gensym))) (list 'let (list (list gB36f5@t gB36f1@e)) (list 'if gB36f5@t (list gB36f2@p gB36f5@t) gB36ea@k)))) gB36ef@ls/false) (let ((gB36f7@t gB36ed@t)) (let ((gB36f9@ls/false (gB30ba@syntax-dispatch gB36f7@t '(any)))) (if gB36f9@ls/false (apply (lambda (gB36fb@e) (let ((gB36fd@t (gensym))) (list 'let (list (list gB36fd@t gB36fb@e)) (list 'if gB36fd@t gB36fd@t gB36ea@k)))) gB36f9@ls/false) (let ((gB36ff@t gB36f7@t)) (let ((gB3701@ls/false (gB30ba@syntax-dispatch gB36ff@t '(any any . each-any)))) (if gB3701@ls/false (apply (lambda (gB3703@e gB3704@v gB3705@v*) (list 'if gB3703@e (cons 'begin (cons gB3704@v gB3705@v*)) gB36ea@k)) gB3701@ls/false) (let ((gB3709@t gB36ff@t)) (let ((gB370b@ls/false (gB30ba@syntax-dispatch gB3709@t '_))) (if gB370b@ls/false (apply (lambda () (gB319a@syntax-violation '#f '"invalid guard clause" gB36e9@x)) gB370b@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3709@t))))))))))))))) (gB36b2@f* (lambda (gB36bf@x*) (let ((gB36c1@t gB36bf@x*)) (let ((gB36c3@ls/false (gB30ba@syntax-dispatch gB36c1@t '()))) (if gB36c3@ls/false (apply (lambda () (let ((gB36c5@g (gensym))) (values (list gB36c5@g (list 'lambda '() (list 'raise-continuable gB36a9@con))) gB36c5@g))) gB36c3@ls/false) (let ((gB36c7@t gB36c1@t)) (let ((gB36c9@ls/false (gB30ba@syntax-dispatch gB36c7@t '((#(scheme-id else) any . each-any))))) (if gB36c9@ls/false (apply (lambda (gB36cb@e gB36cc@e*) (values (cons 'begin (cons gB36cb@e gB36cc@e*)) '#f)) gB36c9@ls/false) (let ((gB36cf@t gB36c7@t)) (let ((gB36d1@ls/false (gB30ba@syntax-dispatch gB36cf@t '(any . any)))) (if gB36d1@ls/false (apply (lambda (gB36d3@cls gB36d4@cls*) (call-with-values (lambda () (gB36b2@f* gB36d4@cls*)) (lambda (gB36db@gB36d8 gB36dc@gB36da) (let ((gB36df@g gB36dc@gB36da) (gB36e0@e gB36db@gB36d8)) (values (gB36b0@f gB36d3@cls gB36e0@e) gB36df@g))))) gB36d1@ls/false) (let ((gB36e3@t gB36cf@t)) (let ((gB36e5@ls/false (gB30ba@syntax-dispatch gB36e3@t 'any))) (if gB36e5@ls/false (apply (lambda (gB36e7@others) (gB319a@syntax-violation '#f '"invalid guard clause" gB36e7@others)) gB36e5@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB36e3@t)))))))))))))))) (call-with-values (lambda () (gB36b2@f* gB36ab@clause*)) (lambda (gB36b7@gB36b4 gB36b8@gB36b6) (let ((gB36bb@raisek gB36b8@gB36b6) (gB36bc@code gB36b7@gB36b4)) (if gB36bb@raisek (list (list 'call/cc (list 'lambda (list gB36bb@raisek) (list gB36aa@outerk (list 'lambda '() gB36bc@code))))) (list gB36aa@outerk (list 'lambda '() gB36bc@code)))))))))) (let ((gB3693@t gB368f@x)) (let ((gB3695@ls/false (gB30ba@syntax-dispatch gB3693@t '(_ (any . each-any) any . each-any)))) (if (and gB3695@ls/false (apply (lambda (gB3697@con gB3698@clause* gB3699@b gB369a@b*) (gB2eb3@id? gB3697@con)) gB3695@ls/false)) (apply (lambda (gB369f@con gB36a0@clause* gB36a1@b gB36a2@b*) (let ((gB36a7@outerk (gensym))) (gB3070@bless (list (list 'call/cc (list 'lambda (list gB36a7@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list gB369f@con) (gB3692@gen-clauses gB369f@con gB36a7@outerk gB36a0@clause*)) (cons 'lambda (cons '() (cons gB36a1@b gB36a2@b*))))))))))) gB3695@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3693@t))))))) (set! gB4b77@gB3088@guard-macro gB3088@guard-macro) (set! gB308a@define-enumeration-macro (lambda (gB370d@stx) (letrec* ((gB3710@set? (lambda (gB3729@x) (or (null? gB3729@x) (and (not (memq (car gB3729@x) (cdr gB3729@x))) (gB3710@set? (cdr gB3729@x)))))) (gB3712@remove-dups (lambda (gB3727@ls) (if (null? gB3727@ls) '() (cons (car gB3727@ls) (gB3712@remove-dups (remq (car gB3727@ls) (cdr gB3727@ls)))))))) (let ((gB3713@t gB370d@stx)) (let ((gB3715@ls/false (gB30ba@syntax-dispatch gB3713@t '(_ any each-any any)))) (if (and gB3715@ls/false (apply (lambda (gB3717@name gB3718@id* gB3719@maker) (and (gB2eb3@id? gB3717@name) (gB2eb3@id? gB3719@maker) (for-all gB2eb3@id? gB3718@id*))) gB3715@ls/false)) (apply (lambda (gB371d@name gB371e@id* gB371f@maker) (let ((gB3723@name* (gB3712@remove-dups (gB31a0@syntax->datum gB371e@id*))) (gB3724@mk (gensym))) (gB3070@bless (list 'begin (list 'define gB3724@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote gB3723@name*)))) (list 'define-syntax gB371d@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote gB3723@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote gB371d@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax gB371f@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote gB371f@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote gB3723@name*)) (cons 'syntax-violation (cons (list 'quote gB371f@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons gB3724@mk '('(n* ...))))))))))))) gB3715@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3713@t))))))) (set! gB4b78@gB308a@define-enumeration-macro gB308a@define-enumeration-macro) (set! gB308c@time-macro (lambda (gB372b@stx) (let ((gB372d@t gB372b@stx)) (let ((gB372f@ls/false (gB30ba@syntax-dispatch gB372d@t '(_ any)))) (if gB372f@ls/false (apply (lambda (gB3731@expr) (gB3070@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() gB3731@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) gB372f@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB372d@t)))))) (set! gB4b79@gB308c@time-macro gB308c@time-macro) (set! gB308e@delay-macro (lambda (gB3733@stx) (let ((gB3735@t gB3733@stx)) (let ((gB3737@ls/false (gB30ba@syntax-dispatch gB3735@t '(_ any)))) (if gB3737@ls/false (apply (lambda (gB3739@expr) (gB3070@bless (list 'make-promise (list 'lambda '() gB3739@expr)))) gB3737@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3735@t)))))) (set! gB4b7a@gB308e@delay-macro gB308e@delay-macro) (set! gB3090@assert-macro (lambda (gB373b@stx) (let ((gB373d@t gB373b@stx)) (let ((gB373f@ls/false (gB30ba@syntax-dispatch gB373d@t '(_ any)))) (if gB373f@ls/false (apply (lambda (gB3741@expr) (let ((gB3743@pos (or (gB3192@expression-position gB373b@stx) (gB3192@expression-position gB3741@expr)))) (gB3070@bless (list 'let (list (list 'x gB3741@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote gB3741@expr) (list 'quote gB3743@pos))))))) gB373f@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB373d@t)))))) (set! gB4b7b@gB3090@assert-macro gB3090@assert-macro) (set! gB3092@endianness-macro (lambda (gB3745@stx) (let ((gB3747@t gB3745@stx)) (let ((gB3749@ls/false (gB30ba@syntax-dispatch gB3747@t '(_ any)))) (if gB3749@ls/false (apply (lambda (gB374b@e) (let ((gB374d@t (gB31a0@syntax->datum gB374b@e))) (if (memv gB374d@t '(little)) (gB3070@bless ''little) (if (memv gB374d@t '(big)) (gB3070@bless ''big) (gB319a@syntax-violation '#f '"endianness must be big or little" gB3745@stx))))) gB3749@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3747@t)))))) (set! gB4b7c@gB3092@endianness-macro gB3092@endianness-macro) (set! gB3094@identifier-syntax-macro (lambda (gB374f@stx) (let ((gB3751@t gB374f@stx)) (let ((gB3753@ls/false (gB30ba@syntax-dispatch gB3751@t '(_ any)))) (if gB3753@ls/false (apply (lambda (gB3755@expr) (gB3070@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax gB3755@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax gB3755@expr) '((syntax (e* ...)))))))))) gB3753@ls/false) (let ((gB3757@t gB3751@t)) (let ((gB3759@ls/false (gB30ba@syntax-dispatch gB3757@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and gB3759@ls/false (apply (lambda (gB375b@id1 gB375c@expr1 gB375d@id2 gB375e@expr2 gB375f@expr3) (and (gB2eb3@id? gB375b@id1) (gB2eb3@id? gB375d@id2) (gB2eb3@id? gB375e@expr2))) gB3759@ls/false)) (apply (lambda (gB3765@id1 gB3766@expr1 gB3767@id2 gB3768@expr2 gB3769@expr3) (gB3070@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax gB3766@expr1)) (list (list 'set! 'id gB3768@expr2) (list 'syntax gB3769@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons gB3766@expr1 '(e* ...))))))))) gB3759@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3757@t))))))))) (set! gB4b7d@gB3094@identifier-syntax-macro gB3094@identifier-syntax-macro) (set! gB3096@do-macro (lambda (gB376f@stx) (letrec* ((gB3772@bind (lambda (gB3789@x) (let ((gB378b@t gB3789@x)) (let ((gB378d@ls/false (gB30ba@syntax-dispatch gB378b@t '(any any)))) (if gB378d@ls/false (apply (lambda (gB378f@x gB3790@init) (list gB378f@x gB3790@init gB378f@x)) gB378d@ls/false) (let ((gB3793@t gB378b@t)) (let ((gB3795@ls/false (gB30ba@syntax-dispatch gB3793@t '(any any any)))) (if gB3795@ls/false (apply (lambda (gB3797@x gB3798@init gB3799@step) (list gB3797@x gB3798@init gB3799@step)) gB3795@ls/false) (let ((gB379d@t gB3793@t)) (let ((gB379f@ls/false (gB30ba@syntax-dispatch gB379d@t '_))) (if gB379f@ls/false (apply (lambda () (gB319a@syntax-violation '#f '"invalid binding" gB376f@stx)) gB379f@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB379d@t))))))))))))) (let ((gB3773@t gB376f@stx)) (let ((gB3775@ls/false (gB30ba@syntax-dispatch gB3773@t '(_ each-any (any . each-any) . each-any)))) (if gB3775@ls/false (apply (lambda (gB3777@binding* gB3778@test gB3779@expr* gB377a@command*) (let ((gB377f@t (map gB3772@bind gB3777@binding*))) (let ((gB3781@ls/false (gB30ba@syntax-dispatch gB377f@t '#(each (any any any))))) (if gB3781@ls/false (apply (lambda (gB3783@x* gB3784@init* gB3785@step*) (if (gB2ebb@valid-bound-ids? gB3783@x*) (gB3070@bless (list 'letrec (list (list 'loop (list 'lambda gB3783@x* (list 'if gB3778@test (cons 'begin (cons '(if #f #f) gB3779@expr*)) (cons 'begin (append gB377a@command* (list (cons 'loop gB3785@step*)))))))) (cons 'loop gB3784@init*))) (gB319a@syntax-violation '#f '"invalid bindings" gB376f@stx))) gB3781@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB377f@t))))) gB3775@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3773@t))))))) (set! gB4b7e@gB3096@do-macro gB3096@do-macro) (set! gB3098@let*-macro (lambda (gB37a1@stx) (let ((gB37a3@t gB37a1@stx)) (let ((gB37a5@ls/false (gB30ba@syntax-dispatch gB37a3@t '(_ #(each (any any)) any . each-any)))) (if (and gB37a5@ls/false (apply (lambda (gB37a7@lhs* gB37a8@rhs* gB37a9@b gB37aa@b*) (for-all gB2eb3@id? gB37a7@lhs*)) gB37a5@ls/false)) (apply (lambda (gB37af@lhs* gB37b0@rhs* gB37b1@b gB37b2@b*) (gB3070@bless (let gB37b9@f ((gB37b7@x* (map list gB37af@lhs* gB37b0@rhs*))) (if (null? gB37b7@x*) (cons 'let (cons '() (cons gB37b1@b gB37b2@b*))) (list 'let (list (car gB37b7@x*)) (gB37b9@f (cdr gB37b7@x*))))))) gB37a5@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB37a3@t)))))) (set! gB4b7f@gB3098@let*-macro gB3098@let*-macro) (set! gB309a@or-macro (lambda (gB37bb@stx) (let ((gB37bd@t gB37bb@stx)) (let ((gB37bf@ls/false (gB30ba@syntax-dispatch gB37bd@t '(_)))) (if gB37bf@ls/false (apply (lambda () '#f) gB37bf@ls/false) (let ((gB37c1@t gB37bd@t)) (let ((gB37c3@ls/false (gB30ba@syntax-dispatch gB37c1@t '(_ any . each-any)))) (if gB37c3@ls/false (apply (lambda (gB37c5@e gB37c6@e*) (gB3070@bless (let gB37cd@f ((gB37c9@e gB37c5@e) (gB37ca@e* gB37c6@e*)) (if (null? gB37ca@e*) (list 'begin '#f gB37c9@e) (list 'let (list (list 't gB37c9@e)) (list 'if 't 't (gB37cd@f (car gB37ca@e*) (cdr gB37ca@e*)))))))) gB37c3@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB37c1@t))))))))) (set! gB4b80@gB309a@or-macro gB309a@or-macro) (set! gB309c@and-macro (lambda (gB37cf@stx) (let ((gB37d1@t gB37cf@stx)) (let ((gB37d3@ls/false (gB30ba@syntax-dispatch gB37d1@t '(_)))) (if gB37d3@ls/false (apply (lambda () '#t) gB37d3@ls/false) (let ((gB37d5@t gB37d1@t)) (let ((gB37d7@ls/false (gB30ba@syntax-dispatch gB37d5@t '(_ any . each-any)))) (if gB37d7@ls/false (apply (lambda (gB37d9@e gB37da@e*) (gB3070@bless (let gB37e1@f ((gB37dd@e gB37d9@e) (gB37de@e* gB37da@e*)) (if (null? gB37de@e*) (list 'begin '#f gB37dd@e) (cons 'if (cons gB37dd@e (cons (gB37e1@f (car gB37de@e*) (cdr gB37de@e*)) '(#f)))))))) gB37d7@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB37d5@t))))))))) (set! gB4b81@gB309c@and-macro gB309c@and-macro) (set! gB309e@cond-macro (lambda (gB37e3@stx) (let ((gB37e5@t gB37e3@stx)) (let ((gB37e7@ls/false (gB30ba@syntax-dispatch gB37e5@t '(_ any . each-any)))) (if gB37e7@ls/false (apply (lambda (gB37e9@cls gB37ea@cls*) (gB3070@bless (let gB37f1@f ((gB37ed@cls gB37e9@cls) (gB37ee@cls* gB37ea@cls*)) (if (null? gB37ee@cls*) (let ((gB37f3@t gB37ed@cls)) (let ((gB37f5@ls/false (gB30ba@syntax-dispatch gB37f3@t '(#(scheme-id else) any . each-any)))) (if gB37f5@ls/false (apply (lambda (gB37f7@e gB37f8@e*) (cons 'begin (cons gB37f7@e gB37f8@e*))) gB37f5@ls/false) (let ((gB37fb@t gB37f3@t)) (let ((gB37fd@ls/false (gB30ba@syntax-dispatch gB37fb@t '(any #(scheme-id =>) any)))) (if gB37fd@ls/false (apply (lambda (gB37ff@e gB3800@p) (list 'let (list (list 't gB37ff@e)) (list 'if 't (cons gB3800@p '(t))))) gB37fd@ls/false) (let ((gB3803@t gB37fb@t)) (let ((gB3805@ls/false (gB30ba@syntax-dispatch gB3803@t '(any)))) (if gB3805@ls/false (apply (lambda (gB3807@e) (cons 'or (cons gB3807@e '((if #f #f))))) gB3805@ls/false) (let ((gB3809@t gB3803@t)) (let ((gB380b@ls/false (gB30ba@syntax-dispatch gB3809@t '(any . each-any)))) (if gB380b@ls/false (apply (lambda (gB380d@e gB380e@e*) (list 'if gB380d@e (cons 'begin gB380e@e*))) gB380b@ls/false) (let ((gB3811@t gB3809@t)) (let ((gB3813@ls/false (gB30ba@syntax-dispatch gB3811@t '_))) (if gB3813@ls/false (apply (lambda () (gB319a@syntax-violation '#f '"invalid last clause" gB37e3@stx)) gB3813@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3811@t)))))))))))))))) (let ((gB3815@t gB37ed@cls)) (let ((gB3817@ls/false (gB30ba@syntax-dispatch gB3815@t '(#(scheme-id else) any . each-any)))) (if gB3817@ls/false (apply (lambda (gB3819@e gB381a@e*) (gB319a@syntax-violation '#f '"incorrect position of keyword else" gB37e3@stx)) gB3817@ls/false) (let ((gB381d@t gB3815@t)) (let ((gB381f@ls/false (gB30ba@syntax-dispatch gB381d@t '(any #(scheme-id =>) any)))) (if gB381f@ls/false (apply (lambda (gB3821@e gB3822@p) (list 'let (list (list 't gB3821@e)) (list 'if 't (cons gB3822@p '(t)) (gB37f1@f (car gB37ee@cls*) (cdr gB37ee@cls*))))) gB381f@ls/false) (let ((gB3825@t gB381d@t)) (let ((gB3827@ls/false (gB30ba@syntax-dispatch gB3825@t '(any)))) (if gB3827@ls/false (apply (lambda (gB3829@e) (list 'or gB3829@e (gB37f1@f (car gB37ee@cls*) (cdr gB37ee@cls*)))) gB3827@ls/false) (let ((gB382b@t gB3825@t)) (let ((gB382d@ls/false (gB30ba@syntax-dispatch gB382b@t '(any . each-any)))) (if gB382d@ls/false (apply (lambda (gB382f@e gB3830@e*) (list 'if gB382f@e (cons 'begin gB3830@e*) (gB37f1@f (car gB37ee@cls*) (cdr gB37ee@cls*)))) gB382d@ls/false) (let ((gB3833@t gB382b@t)) (let ((gB3835@ls/false (gB30ba@syntax-dispatch gB3833@t '_))) (if gB3835@ls/false (apply (lambda () (gB319a@syntax-violation '#f '"invalid last clause" gB37e3@stx)) gB3835@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3833@t)))))))))))))))))))) gB37e7@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB37e5@t)))))) (set! gB4b82@gB309e@cond-macro gB309e@cond-macro) (set! gB30a0@do-include (lambda (gB3837@stx gB3838@id gB3839@filename) (let ((gB383d@filename (gB2ec7@stx->datum gB3839@filename))) (begin (if (not (and (string? gB383d@filename) (gB2eb3@id? gB3838@id))) (gB319a@syntax-violation '#f '"invalid syntax" gB3837@stx) (void)) (cons (gB3070@bless 'begin) (with-input-from-file gB383d@filename (lambda () (let gB3841@f ((gB383f@ls '())) (let ((gB3843@x (gB29f5@gB28c5@read-annotated))) (if (eof-object? gB3843@x) (reverse gB383f@ls) (gB3841@f (cons (gB2e93@datum->stx gB3838@id gB3843@x) gB383f@ls)))))))))))) (set! gB4b83@gB30a0@do-include gB30a0@do-include) (set! gB30a2@include-macro (lambda (gB3845@e) (let ((gB3847@t gB3845@e)) (let ((gB3849@ls/false (gB30ba@syntax-dispatch gB3847@t '(any any)))) (if gB3849@ls/false (apply (lambda (gB384b@id gB384c@filename) (gB30a0@do-include gB3845@e gB384b@id gB384c@filename)) gB3849@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3847@t)))))) (set! gB4b84@gB30a2@include-macro gB30a2@include-macro) (set! gB30a4@include-into-macro (lambda (gB384f@e) (let ((gB3851@t gB384f@e)) (let ((gB3853@ls/false (gB30ba@syntax-dispatch gB3851@t '(_ any any)))) (if gB3853@ls/false (apply (lambda (gB3855@id gB3856@filename) (gB30a0@do-include gB384f@e gB3855@id gB3856@filename)) gB3853@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3851@t)))))) (set! gB4b85@gB30a4@include-into-macro gB30a4@include-into-macro) (set! gB30a6@syntax-rules-macro (lambda (gB3859@e) (let ((gB385b@t gB3859@e)) (let ((gB385d@ls/false (gB30ba@syntax-dispatch gB385b@t '(_ each-any . #(each (any any)))))) (if gB385d@ls/false (apply (lambda (gB385f@lits gB3860@pat* gB3861@tmp*) (begin (gB30c0@verify-literals gB385f@lits gB3859@e) (gB3070@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons gB385f@lits (map (lambda (gB3865@pat gB3866@tmp) (let ((gB3869@t gB3865@pat)) (let ((gB386b@ls/false (gB30ba@syntax-dispatch gB3869@t '(_ . any)))) (if gB386b@ls/false (apply (lambda (gB386d@rest) (list (cons 'g gB386d@rest) (list 'syntax gB3866@tmp))) gB386b@ls/false) (let ((gB386f@t gB3869@t)) (let ((gB3871@ls/false (gB30ba@syntax-dispatch gB386f@t '_))) (if gB3871@ls/false (apply (lambda () (gB319a@syntax-violation '#f '"invalid syntax-rules pattern" gB3859@e gB3865@pat)) gB3871@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB386f@t)))))))) gB3860@pat* gB3861@tmp*)))))))) gB385d@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB385b@t)))))) (set! gB4b86@gB30a6@syntax-rules-macro gB30a6@syntax-rules-macro) (set! gB30a8@quasiquote-macro (letrec* ((gB3874@datum (lambda (gB3975@x) (list (gB3042@scheme-stx 'quote) (gB2e9b@mkstx gB3975@x '() '() '())))) (gB3890@quasicons* (lambda (gB396d@x gB396e@y) (let gB3973@f ((gB3971@x gB396d@x)) (if (null? gB3971@x) gB396e@y (gB3892@quasicons (car gB3971@x) (gB3973@f (cdr gB3971@x))))))) (gB3892@quasicons (lambda (gB3947@x gB3948@y) (let ((gB394b@t gB3948@y)) (let ((gB394d@ls/false (gB30ba@syntax-dispatch gB394b@t '(#(scheme-id quote) any)))) (if gB394d@ls/false (apply (lambda (gB394f@dy) (let ((gB3951@t gB3947@x)) (let ((gB3953@ls/false (gB30ba@syntax-dispatch gB3951@t '(#(scheme-id quote) any)))) (if gB3953@ls/false (apply (lambda (gB3955@dx) (list (gB3042@scheme-stx 'quote) (cons gB3955@dx gB394f@dy))) gB3953@ls/false) (let ((gB3957@t gB3951@t)) (let ((gB3959@ls/false (gB30ba@syntax-dispatch gB3957@t '_))) (if gB3959@ls/false (apply (lambda () (let ((gB395b@t gB394f@dy)) (let ((gB395d@ls/false (gB30ba@syntax-dispatch gB395b@t '()))) (if gB395d@ls/false (apply (lambda () (list (gB3042@scheme-stx 'list) gB3947@x)) gB395d@ls/false) (let ((gB395f@t gB395b@t)) (let ((gB3961@ls/false (gB30ba@syntax-dispatch gB395f@t '_))) (if gB3961@ls/false (apply (lambda () (list (gB3042@scheme-stx 'cons) gB3947@x gB3948@y)) gB3961@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB395f@t)))))))) gB3959@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3957@t)))))))) gB394d@ls/false) (let ((gB3963@t gB394b@t)) (let ((gB3965@ls/false (gB30ba@syntax-dispatch gB3963@t '(#(scheme-id list) . each-any)))) (if gB3965@ls/false (apply (lambda (gB3967@stuff) (cons* (gB3042@scheme-stx 'list) gB3947@x gB3967@stuff)) gB3965@ls/false) (let ((gB3969@t gB3963@t)) (let ((gB396b@ls/false (gB30ba@syntax-dispatch gB3969@t '_))) (if gB396b@ls/false (apply (lambda () (list (gB3042@scheme-stx 'cons) gB3947@x gB3948@y)) gB396b@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3969@t)))))))))))) (gB3894@quasiappend (lambda (gB392d@x gB392e@y) (let ((gB3931@ls (let gB3935@f ((gB3933@x gB392d@x)) (if (null? gB3933@x) (let ((gB3937@t gB392e@y)) (let ((gB3939@ls/false (gB30ba@syntax-dispatch gB3937@t '(#(scheme-id quote) ())))) (if gB3939@ls/false (apply (lambda () '()) gB3939@ls/false) (let ((gB393b@t gB3937@t)) (let ((gB393d@ls/false (gB30ba@syntax-dispatch gB393b@t '_))) (if gB393d@ls/false (apply (lambda () (list gB392e@y)) gB393d@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB393b@t))))))) (let ((gB393f@t (car gB3933@x))) (let ((gB3941@ls/false (gB30ba@syntax-dispatch gB393f@t '(#(scheme-id quote) ())))) (if gB3941@ls/false (apply (lambda () (gB3935@f (cdr gB3933@x))) gB3941@ls/false) (let ((gB3943@t gB393f@t)) (let ((gB3945@ls/false (gB30ba@syntax-dispatch gB3943@t '_))) (if gB3945@ls/false (apply (lambda () (cons (car gB3933@x) (gB3935@f (cdr gB3933@x)))) gB3945@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3943@t))))))))))) (if (null? gB3931@ls) (list (gB3042@scheme-stx 'quote) '()) (if (null? (cdr gB3931@ls)) (car gB3931@ls) (cons* (gB3042@scheme-stx 'append) gB3931@ls)))))) (gB3896@quasivector (lambda (gB38fb@x) (let ((gB38fd@pat-x gB38fb@x)) (let ((gB38ff@t gB38fd@pat-x)) (let ((gB3901@ls/false (gB30ba@syntax-dispatch gB38ff@t '(#(scheme-id quote) each-any)))) (if gB3901@ls/false (apply (lambda (gB3903@x*) (list (gB3042@scheme-stx 'quote) (list->vector gB3903@x*))) gB3901@ls/false) (let ((gB3905@t gB38ff@t)) (let ((gB3907@ls/false (gB30ba@syntax-dispatch gB3905@t '_))) (if gB3907@ls/false (apply (lambda () (let gB390f@f ((gB3909@x gB38fb@x) (gB390a@k (lambda (gB390d@ls) (cons* (gB3042@scheme-stx 'vector) gB390d@ls)))) (let ((gB3911@t gB3909@x)) (let ((gB3913@ls/false (gB30ba@syntax-dispatch gB3911@t '(#(scheme-id quote) each-any)))) (if gB3913@ls/false (apply (lambda (gB3915@x*) (gB390a@k (map (lambda (gB3917@x) (list (gB3042@scheme-stx 'quote) gB3917@x)) gB3915@x*))) gB3913@ls/false) (let ((gB3919@t gB3911@t)) (let ((gB391b@ls/false (gB30ba@syntax-dispatch gB3919@t '(#(scheme-id list) . each-any)))) (if gB391b@ls/false (apply (lambda (gB391d@x*) (gB390a@k gB391d@x*)) gB391b@ls/false) (let ((gB391f@t gB3919@t)) (let ((gB3921@ls/false (gB30ba@syntax-dispatch gB391f@t '(#(scheme-id cons) any any)))) (if gB3921@ls/false (apply (lambda (gB3923@x gB3924@y) (gB390f@f gB3924@y (lambda (gB3927@ls) (gB390a@k (cons gB3923@x gB3927@ls))))) gB3921@ls/false) (let ((gB3929@t gB391f@t)) (let ((gB392b@ls/false (gB30ba@syntax-dispatch gB3929@t '_))) (if gB392b@ls/false (apply (lambda () (list (gB3042@scheme-stx 'list->vector) gB38fd@pat-x)) gB392b@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3929@t))))))))))))))) gB3907@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3905@t)))))))))) (gB3898@vquasi (lambda (gB38d9@p gB38da@lev) (let ((gB38dd@t gB38d9@p)) (let ((gB38df@ls/false (gB30ba@syntax-dispatch gB38dd@t '(any . any)))) (if gB38df@ls/false (apply (lambda (gB38e1@p gB38e2@q) (let ((gB38e5@t gB38e1@p)) (let ((gB38e7@ls/false (gB30ba@syntax-dispatch gB38e5@t '(#(scheme-id unquote) . each-any)))) (if gB38e7@ls/false (apply (lambda (gB38e9@p) (if (= gB38da@lev '0) (gB3890@quasicons* gB38e9@p (gB3898@vquasi gB38e2@q gB38da@lev)) (gB3892@quasicons (gB3892@quasicons (gB3874@datum 'unquote) (gB389a@quasi gB38e9@p (- gB38da@lev '1))) (gB3898@vquasi gB38e2@q gB38da@lev)))) gB38e7@ls/false) (let ((gB38eb@t gB38e5@t)) (let ((gB38ed@ls/false (gB30ba@syntax-dispatch gB38eb@t '(#(scheme-id unquote-splicing) . each-any)))) (if gB38ed@ls/false (apply (lambda (gB38ef@p) (if (= gB38da@lev '0) (gB3894@quasiappend gB38ef@p (gB3898@vquasi gB38e2@q gB38da@lev)) (gB3892@quasicons (gB3892@quasicons (gB3874@datum 'unquote-splicing) (gB389a@quasi gB38ef@p (- gB38da@lev '1))) (gB3898@vquasi gB38e2@q gB38da@lev)))) gB38ed@ls/false) (let ((gB38f1@t gB38eb@t)) (let ((gB38f3@ls/false (gB30ba@syntax-dispatch gB38f1@t 'any))) (if gB38f3@ls/false (apply (lambda (gB38f5@p) (gB3892@quasicons (gB389a@quasi gB38f5@p gB38da@lev) (gB3898@vquasi gB38e2@q gB38da@lev))) gB38f3@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB38f1@t))))))))))) gB38df@ls/false) (let ((gB38f7@t gB38dd@t)) (let ((gB38f9@ls/false (gB30ba@syntax-dispatch gB38f7@t '()))) (if gB38f9@ls/false (apply (lambda () (list (gB3042@scheme-stx 'quote) '())) gB38f9@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB38f7@t))))))))) (gB389a@quasi (lambda (gB38a3@p gB38a4@lev) (let ((gB38a7@t gB38a3@p)) (let ((gB38a9@ls/false (gB30ba@syntax-dispatch gB38a7@t '(#(scheme-id unquote) any)))) (if gB38a9@ls/false (apply (lambda (gB38ab@p) (if (= gB38a4@lev '0) gB38ab@p (gB3892@quasicons (gB3874@datum 'unquote) (gB389a@quasi (list gB38ab@p) (- gB38a4@lev '1))))) gB38a9@ls/false) (let ((gB38ad@t gB38a7@t)) (let ((gB38af@ls/false (gB30ba@syntax-dispatch gB38ad@t '((#(scheme-id unquote) . each-any) . any)))) (if gB38af@ls/false (apply (lambda (gB38b1@p gB38b2@q) (if (= gB38a4@lev '0) (gB3890@quasicons* gB38b1@p (gB389a@quasi gB38b2@q gB38a4@lev)) (gB3892@quasicons (gB3892@quasicons (gB3874@datum 'unquote) (gB389a@quasi gB38b1@p (- gB38a4@lev '1))) (gB389a@quasi gB38b2@q gB38a4@lev)))) gB38af@ls/false) (let ((gB38b5@t gB38ad@t)) (let ((gB38b7@ls/false (gB30ba@syntax-dispatch gB38b5@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if gB38b7@ls/false (apply (lambda (gB38b9@p gB38ba@q) (if (= gB38a4@lev '0) (gB3894@quasiappend gB38b9@p (gB389a@quasi gB38ba@q gB38a4@lev)) (gB3892@quasicons (gB3892@quasicons (gB3874@datum 'unquote-splicing) (gB389a@quasi gB38b9@p (- gB38a4@lev '1))) (gB389a@quasi gB38ba@q gB38a4@lev)))) gB38b7@ls/false) (let ((gB38bd@t gB38b5@t)) (let ((gB38bf@ls/false (gB30ba@syntax-dispatch gB38bd@t '(#(scheme-id quasiquote) any)))) (if gB38bf@ls/false (apply (lambda (gB38c1@p) (gB3892@quasicons (gB3874@datum 'quasiquote) (gB389a@quasi (list gB38c1@p) (+ gB38a4@lev '1)))) gB38bf@ls/false) (let ((gB38c3@t gB38bd@t)) (let ((gB38c5@ls/false (gB30ba@syntax-dispatch gB38c3@t '(any . any)))) (if gB38c5@ls/false (apply (lambda (gB38c7@p gB38c8@q) (gB3892@quasicons (gB389a@quasi gB38c7@p gB38a4@lev) (gB389a@quasi gB38c8@q gB38a4@lev))) gB38c5@ls/false) (let ((gB38cb@t gB38c3@t)) (let ((gB38cd@ls/false (gB30ba@syntax-dispatch gB38cb@t '#(vector each-any)))) (if (and gB38cd@ls/false (apply (lambda (gB38cf@x) (not (gB2e7f@stx? gB38cf@x))) gB38cd@ls/false)) (apply (lambda (gB38d1@x) (gB3896@quasivector (gB3898@vquasi gB38d1@x gB38a4@lev))) gB38cd@ls/false) (let ((gB38d3@t gB38cb@t)) (let ((gB38d5@ls/false (gB30ba@syntax-dispatch gB38d3@t 'any))) (if gB38d5@ls/false (apply (lambda (gB38d7@p) (list (gB3042@scheme-stx 'quote) gB38d7@p)) gB38d5@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB38d3@t))))))))))))))))))))))))) (lambda (gB389b@x) (let ((gB389d@t gB389b@x)) (let ((gB389f@ls/false (gB30ba@syntax-dispatch gB389d@t '(_ any)))) (if gB389f@ls/false (apply (lambda (gB38a1@e) (gB389a@quasi gB38a1@e '0)) gB389f@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB389d@t))))))) (set! gB4b87@gB30a8@quasiquote-macro gB30a8@quasiquote-macro) (set! gB30aa@quasisyntax-macro (letrec* ((gB3978@quasi (lambda (gB3993@p gB3994@lev) (let ((gB3997@t gB3993@p)) (let ((gB3999@ls/false (gB30ba@syntax-dispatch gB3997@t '(#(scheme-id unsyntax) any)))) (if gB3999@ls/false (apply (lambda (gB399b@p) (if (= gB3994@lev '0) (let ((gB399d@g (gensym))) (values (list gB399d@g) (list gB399b@p) gB399d@g)) (call-with-values (lambda () (gB3978@quasi gB399b@p (- gB3994@lev '1))) (lambda (gB39a5@gB39a0 gB39a6@gB39a2 gB39a7@gB39a4) (let ((gB39ab@p gB39a7@gB39a4) (gB39ac@rhs* gB39a6@gB39a2) (gB39ad@lhs* gB39a5@gB39a0)) (values gB39ad@lhs* gB39ac@rhs* (list 'unsyntax gB39ab@p))))))) gB3999@ls/false) (let ((gB39b1@t gB3997@t)) (let ((gB39b3@ls/false (gB30ba@syntax-dispatch gB39b1@t '#(scheme-id unsyntax)))) (if (and gB39b3@ls/false (apply (lambda () (= gB3994@lev '0)) gB39b3@ls/false)) (apply (lambda () (gB319a@syntax-violation '#f '"incorrect use of unsyntax" gB3993@p)) gB39b3@ls/false) (let ((gB39b5@t gB39b1@t)) (let ((gB39b7@ls/false (gB30ba@syntax-dispatch gB39b5@t '((#(scheme-id unsyntax) . each-any) . any)))) (if gB39b7@ls/false (apply (lambda (gB39b9@p* gB39ba@q) (call-with-values (lambda () (gB3978@quasi gB39ba@q gB3994@lev)) (lambda (gB39c3@gB39be gB39c4@gB39c0 gB39c5@gB39c2) (let ((gB39c9@q gB39c5@gB39c2) (gB39ca@rhs* gB39c4@gB39c0) (gB39cb@lhs* gB39c3@gB39be)) (if (= gB3994@lev '0) (let ((gB39cf@g* (map (lambda (gB39d1@x) (gensym)) gB39b9@p*))) (values (append gB39cf@g* gB39cb@lhs*) (append gB39b9@p* gB39ca@rhs*) (append gB39cf@g* gB39c9@q))) (call-with-values (lambda () (gB3978@quasi gB39b9@p* (- gB3994@lev '1))) (lambda (gB39d9@gB39d4 gB39da@gB39d6 gB39db@gB39d8) (let ((gB39df@p* gB39db@gB39d8) (gB39e0@rhs2* gB39da@gB39d6) (gB39e1@lhs2* gB39d9@gB39d4)) (values (append gB39e1@lhs2* gB39cb@lhs*) (append gB39e0@rhs2* gB39ca@rhs*) (cons (cons 'unsyntax gB39df@p*) gB39c9@q)))))))))) gB39b7@ls/false) (let ((gB39e5@t gB39b5@t)) (let ((gB39e7@ls/false (gB30ba@syntax-dispatch gB39e5@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if gB39e7@ls/false (apply (lambda (gB39e9@p* gB39ea@q) (call-with-values (lambda () (gB3978@quasi gB39ea@q gB3994@lev)) (lambda (gB39f3@gB39ee gB39f4@gB39f0 gB39f5@gB39f2) (let ((gB39f9@q gB39f5@gB39f2) (gB39fa@rhs* gB39f4@gB39f0) (gB39fb@lhs* gB39f3@gB39ee)) (if (= gB3994@lev '0) (let ((gB39ff@g* (map (lambda (gB3a01@x) (gensym)) gB39e9@p*))) (values (append (map (lambda (gB3a03@g) (cons gB3a03@g '(...))) gB39ff@g*) gB39fb@lhs*) (append gB39e9@p* gB39fa@rhs*) (append (apply append (map (lambda (gB3a05@g) (cons gB3a05@g '(...))) gB39ff@g*)) gB39f9@q))) (call-with-values (lambda () (gB3978@quasi gB39e9@p* (- gB3994@lev '1))) (lambda (gB3a0d@gB3a08 gB3a0e@gB3a0a gB3a0f@gB3a0c) (let ((gB3a13@p* gB3a0f@gB3a0c) (gB3a14@rhs2* gB3a0e@gB3a0a) (gB3a15@lhs2* gB3a0d@gB3a08)) (values (append gB3a15@lhs2* gB39fb@lhs*) (append gB3a14@rhs2* gB39fa@rhs*) (cons (cons 'unsyntax-splicing gB3a13@p*) gB39f9@q)))))))))) gB39e7@ls/false) (let ((gB3a19@t gB39e5@t)) (let ((gB3a1b@ls/false (gB30ba@syntax-dispatch gB3a19@t '#(scheme-id unsyntax-splicing)))) (if (and gB3a1b@ls/false (apply (lambda () (= gB3994@lev '0)) gB3a1b@ls/false)) (apply (lambda () (gB319a@syntax-violation '#f '"incorrect use of unsyntax-splicing" gB3993@p)) gB3a1b@ls/false) (let ((gB3a1d@t gB3a19@t)) (let ((gB3a1f@ls/false (gB30ba@syntax-dispatch gB3a1d@t '(#(scheme-id quasisyntax) any)))) (if gB3a1f@ls/false (apply (lambda (gB3a21@p) (call-with-values (lambda () (gB3978@quasi gB3a21@p (+ gB3994@lev '1))) (lambda (gB3a29@gB3a24 gB3a2a@gB3a26 gB3a2b@gB3a28) (let ((gB3a2f@p gB3a2b@gB3a28) (gB3a30@rhs* gB3a2a@gB3a26) (gB3a31@lhs* gB3a29@gB3a24)) (values gB3a31@lhs* gB3a30@rhs* (list 'quasisyntax gB3a2f@p)))))) gB3a1f@ls/false) (let ((gB3a35@t gB3a1d@t)) (let ((gB3a37@ls/false (gB30ba@syntax-dispatch gB3a35@t '(any . any)))) (if gB3a37@ls/false (apply (lambda (gB3a39@p gB3a3a@q) (call-with-values (lambda () (gB3978@quasi gB3a39@p gB3994@lev)) (lambda (gB3a49@gB3a3e gB3a4a@gB3a40 gB3a4b@gB3a42) (call-with-values (lambda () (gB3978@quasi gB3a3a@q gB3994@lev)) (lambda (gB3a4f@gB3a44 gB3a50@gB3a46 gB3a51@gB3a48) (let ((gB3a55@q gB3a51@gB3a48) (gB3a56@rhs2* gB3a50@gB3a46) (gB3a57@lhs2* gB3a4f@gB3a44) (gB3a58@p gB3a4b@gB3a42) (gB3a59@rhs* gB3a4a@gB3a40) (gB3a5a@lhs* gB3a49@gB3a3e)) (values (append gB3a57@lhs2* gB3a5a@lhs*) (append gB3a56@rhs2* gB3a59@rhs*) (cons gB3a58@p gB3a55@q)))))))) gB3a37@ls/false) (let ((gB3a61@t gB3a35@t)) (let ((gB3a63@ls/false (gB30ba@syntax-dispatch gB3a61@t '#(vector each-any)))) (if gB3a63@ls/false (apply (lambda (gB3a65@x*) (call-with-values (lambda () (gB3978@quasi gB3a65@x* gB3994@lev)) (lambda (gB3a6d@gB3a68 gB3a6e@gB3a6a gB3a6f@gB3a6c) (let ((gB3a73@x* gB3a6f@gB3a6c) (gB3a74@rhs* gB3a6e@gB3a6a) (gB3a75@lhs* gB3a6d@gB3a68)) (values gB3a75@lhs* gB3a74@rhs* (list->vector gB3a73@x*)))))) gB3a63@ls/false) (let ((gB3a79@t gB3a61@t)) (let ((gB3a7b@ls/false (gB30ba@syntax-dispatch gB3a79@t '_))) (if gB3a7b@ls/false (apply (lambda () (values '() '() gB3993@p)) gB3a7b@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3a79@t))))))))))))))))))))))))))))))) (lambda (gB3979@x) (let ((gB397b@t gB3979@x)) (let ((gB397d@ls/false (gB30ba@syntax-dispatch gB397b@t '(_ any)))) (if gB397d@ls/false (apply (lambda (gB397f@e) (call-with-values (lambda () (gB3978@quasi gB397f@e '0)) (lambda (gB3987@gB3982 gB3988@gB3984 gB3989@gB3986) (let ((gB398d@v gB3989@gB3986) (gB398e@rhs* gB3988@gB3984) (gB398f@lhs* gB3987@gB3982)) (gB3070@bless (list 'syntax-case (cons 'list gB398e@rhs*) '() (list gB398f@lhs* (list 'syntax gB398d@v)))))))) gB397d@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB397b@t))))))) (set! gB4b88@gB30aa@quasisyntax-macro gB30aa@quasisyntax-macro) (set! gB30ac@define-struct-macro (lambda (gB3a7d@stx) (gB319a@syntax-violation '#f '"define-struct not supported" gB3a7d@stx))) (set! gB4b89@gB30ac@define-struct-macro gB30ac@define-struct-macro) (set! gB30ae@define-record-type-macro (lambda (gB3a7f@x) (letrec* ((gB3a82@id (lambda (gB3c75@ctxt . gB3c77@str*) (gB319e@datum->syntax gB3c75@ctxt (string->symbol (apply string-append (map (lambda (gB3c79@x) (if (symbol? gB3c79@x) (symbol->string gB3c79@x) (if (string? gB3c79@x) gB3c79@x (assertion-violation 'define-record-type '"BUG")))) gB3c77@str*)))))) (gB3a84@get-record-name (lambda (gB3c63@spec) (let ((gB3c65@t gB3c63@spec)) (let ((gB3c67@ls/false (gB30ba@syntax-dispatch gB3c65@t '(any any any)))) (if gB3c67@ls/false (apply (lambda (gB3c69@foo gB3c6a@make-foo gB3c6b@foo?) gB3c69@foo) gB3c67@ls/false) (let ((gB3c6f@t gB3c65@t)) (let ((gB3c71@ls/false (gB30ba@syntax-dispatch gB3c6f@t 'any))) (if gB3c71@ls/false (apply (lambda (gB3c73@foo) gB3c73@foo) gB3c71@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3c6f@t))))))))) (gB3a86@get-record-constructor-name (lambda (gB3c4f@spec) (let ((gB3c51@t gB3c4f@spec)) (let ((gB3c53@ls/false (gB30ba@syntax-dispatch gB3c51@t '(any any any)))) (if gB3c53@ls/false (apply (lambda (gB3c55@foo gB3c56@make-foo gB3c57@foo?) gB3c56@make-foo) gB3c53@ls/false) (let ((gB3c5b@t gB3c51@t)) (let ((gB3c5d@ls/false (gB30ba@syntax-dispatch gB3c5b@t 'any))) (if (and gB3c5d@ls/false (apply (lambda (gB3c5f@foo) (gB2eb3@id? gB3c5f@foo)) gB3c5d@ls/false)) (apply (lambda (gB3c61@foo) (gB3a82@id gB3c61@foo '"make-" (gB2ec7@stx->datum gB3c61@foo))) gB3c5d@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3c5b@t))))))))) (gB3a88@get-record-predicate-name (lambda (gB3c3b@spec) (let ((gB3c3d@t gB3c3b@spec)) (let ((gB3c3f@ls/false (gB30ba@syntax-dispatch gB3c3d@t '(any any any)))) (if gB3c3f@ls/false (apply (lambda (gB3c41@foo gB3c42@make-foo gB3c43@foo?) gB3c43@foo?) gB3c3f@ls/false) (let ((gB3c47@t gB3c3d@t)) (let ((gB3c49@ls/false (gB30ba@syntax-dispatch gB3c47@t 'any))) (if (and gB3c49@ls/false (apply (lambda (gB3c4b@foo) (gB2eb3@id? gB3c4b@foo)) gB3c49@ls/false)) (apply (lambda (gB3c4d@foo) (gB3a82@id gB3c4d@foo (gB2ec7@stx->datum gB3c4d@foo) '"?")) gB3c49@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3c47@t))))))))) (gB3a8a@get-clause (lambda (gB3c29@id gB3c2a@ls) (let ((gB3c2d@t gB3c2a@ls)) (let ((gB3c2f@ls/false (gB30ba@syntax-dispatch gB3c2d@t '()))) (if gB3c2f@ls/false (apply (lambda () '#f) gB3c2f@ls/false) (let ((gB3c31@t gB3c2d@t)) (let ((gB3c33@ls/false (gB30ba@syntax-dispatch gB3c31@t '((any . any) . any)))) (if gB3c33@ls/false (apply (lambda (gB3c35@x gB3c36@rest gB3c37@ls) (if (gB2eb9@free-id=? (gB3070@bless gB3c29@id) gB3c35@x) (cons gB3c35@x gB3c36@rest) (gB3a8a@get-clause gB3c29@id gB3c37@ls))) gB3c33@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3c31@t))))))))) (gB3a8c@foo-rtd-code (lambda (gB3bd7@name gB3bd8@clause* gB3bd9@parent-rtd-code) (letrec* ((gB3bde@convert-field-spec* (lambda (gB3c0f@ls) (list->vector (map (lambda (gB3c11@x) (let ((gB3c13@t gB3c11@x)) (let ((gB3c15@ls/false (gB30ba@syntax-dispatch gB3c13@t '(#(scheme-id mutable) any . any)))) (if gB3c15@ls/false (apply (lambda (gB3c17@name gB3c18@rest) (list 'mutable gB3c17@name)) gB3c15@ls/false) (let ((gB3c1b@t gB3c13@t)) (let ((gB3c1d@ls/false (gB30ba@syntax-dispatch gB3c1b@t '(#(scheme-id immutable) any . any)))) (if gB3c1d@ls/false (apply (lambda (gB3c1f@name gB3c20@rest) (list 'immutable gB3c1f@name)) gB3c1d@ls/false) (let ((gB3c23@t gB3c1b@t)) (let ((gB3c25@ls/false (gB30ba@syntax-dispatch gB3c23@t 'any))) (if gB3c25@ls/false (apply (lambda (gB3c27@name) (list 'immutable gB3c27@name)) gB3c25@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3c23@t))))))))))) gB3c0f@ls))))) (let ((gB3bdf@uid-code (let ((gB3be7@t (gB3a8a@get-clause 'nongenerative gB3bd8@clause*))) (let ((gB3be9@ls/false (gB30ba@syntax-dispatch gB3be7@t '(_)))) (if gB3be9@ls/false (apply (lambda () (list 'quote (gensym))) gB3be9@ls/false) (let ((gB3beb@t gB3be7@t)) (let ((gB3bed@ls/false (gB30ba@syntax-dispatch gB3beb@t '(_ any)))) (if gB3bed@ls/false (apply (lambda (gB3bef@uid) (list 'quote gB3bef@uid)) gB3bed@ls/false) (let ((gB3bf1@t gB3beb@t)) (let ((gB3bf3@ls/false (gB30ba@syntax-dispatch gB3bf1@t '_))) (if gB3bf3@ls/false (apply (lambda () '#f) gB3bf3@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3bf1@t))))))))))) (gB3be0@sealed? (let ((gB3bf5@t (gB3a8a@get-clause 'sealed gB3bd8@clause*))) (let ((gB3bf7@ls/false (gB30ba@syntax-dispatch gB3bf5@t '(_ #(atom #t))))) (if gB3bf7@ls/false (apply (lambda () '#t) gB3bf7@ls/false) (let ((gB3bf9@t gB3bf5@t)) (let ((gB3bfb@ls/false (gB30ba@syntax-dispatch gB3bf9@t '_))) (if gB3bfb@ls/false (apply (lambda () '#f) gB3bfb@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3bf9@t)))))))) (gB3be1@opaque? (let ((gB3bfd@t (gB3a8a@get-clause 'opaque gB3bd8@clause*))) (let ((gB3bff@ls/false (gB30ba@syntax-dispatch gB3bfd@t '(_ #(atom #t))))) (if gB3bff@ls/false (apply (lambda () '#t) gB3bff@ls/false) (let ((gB3c01@t gB3bfd@t)) (let ((gB3c03@ls/false (gB30ba@syntax-dispatch gB3c01@t '_))) (if gB3c03@ls/false (apply (lambda () '#f) gB3c03@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3c01@t)))))))) (gB3be2@fields (let ((gB3c05@t (gB3a8a@get-clause 'fields gB3bd8@clause*))) (let ((gB3c07@ls/false (gB30ba@syntax-dispatch gB3c05@t '(_ . each-any)))) (if gB3c07@ls/false (apply (lambda (gB3c09@field-spec*) (list 'quote (gB3bde@convert-field-spec* gB3c09@field-spec*))) gB3c07@ls/false) (let ((gB3c0b@t gB3c05@t)) (let ((gB3c0d@ls/false (gB30ba@syntax-dispatch gB3c0b@t '_))) (if gB3c0d@ls/false (apply (lambda () ''#()) gB3c0d@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3c0b@t))))))))) (gB3070@bless (list 'make-record-type-descriptor (list 'quote gB3bd7@name) gB3bd9@parent-rtd-code gB3bdf@uid-code gB3be0@sealed? gB3be1@opaque? gB3be2@fields)))))) (gB3a8e@parent-rtd-code (lambda (gB3bbf@clause*) (let ((gB3bc1@t (gB3a8a@get-clause 'parent gB3bbf@clause*))) (let ((gB3bc3@ls/false (gB30ba@syntax-dispatch gB3bc1@t '(_ any)))) (if gB3bc3@ls/false (apply (lambda (gB3bc5@name) (list 'record-type-descriptor gB3bc5@name)) gB3bc3@ls/false) (let ((gB3bc7@t gB3bc1@t)) (let ((gB3bc9@ls/false (gB30ba@syntax-dispatch gB3bc7@t '#(atom #f)))) (if gB3bc9@ls/false (apply (lambda () (let ((gB3bcb@t (gB3a8a@get-clause 'parent-rtd gB3bbf@clause*))) (let ((gB3bcd@ls/false (gB30ba@syntax-dispatch gB3bcb@t '(_ any any)))) (if gB3bcd@ls/false (apply (lambda (gB3bcf@rtd gB3bd0@rcd) gB3bcf@rtd) gB3bcd@ls/false) (let ((gB3bd3@t gB3bcb@t)) (let ((gB3bd5@ls/false (gB30ba@syntax-dispatch gB3bd3@t '#(atom #f)))) (if gB3bd5@ls/false (apply (lambda () '#f) gB3bd5@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3bd3@t)))))))) gB3bc9@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3bc7@t))))))))) (gB3a90@parent-rcd-code (lambda (gB3ba7@clause*) (let ((gB3ba9@t (gB3a8a@get-clause 'parent gB3ba7@clause*))) (let ((gB3bab@ls/false (gB30ba@syntax-dispatch gB3ba9@t '(_ any)))) (if gB3bab@ls/false (apply (lambda (gB3bad@name) (list 'record-constructor-descriptor gB3bad@name)) gB3bab@ls/false) (let ((gB3baf@t gB3ba9@t)) (let ((gB3bb1@ls/false (gB30ba@syntax-dispatch gB3baf@t '#(atom #f)))) (if gB3bb1@ls/false (apply (lambda () (let ((gB3bb3@t (gB3a8a@get-clause 'parent-rtd gB3ba7@clause*))) (let ((gB3bb5@ls/false (gB30ba@syntax-dispatch gB3bb3@t '(_ any any)))) (if gB3bb5@ls/false (apply (lambda (gB3bb7@rtd gB3bb8@rcd) gB3bb8@rcd) gB3bb5@ls/false) (let ((gB3bbb@t gB3bb3@t)) (let ((gB3bbd@ls/false (gB30ba@syntax-dispatch gB3bbb@t '#(atom #f)))) (if gB3bbd@ls/false (apply (lambda () '#f) gB3bbd@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3bbb@t)))))))) gB3bb1@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3baf@t))))))))) (gB3a92@foo-rcd-code (lambda (gB3b9f@clause* gB3ba0@foo-rtd gB3ba1@protocol gB3ba2@parent-rcd-code) (list 'make-record-constructor-descriptor gB3ba0@foo-rtd gB3ba2@parent-rcd-code gB3ba1@protocol))) (gB3a94@get-protocol-code (lambda (gB3b93@clause*) (let ((gB3b95@t (gB3a8a@get-clause 'protocol gB3b93@clause*))) (let ((gB3b97@ls/false (gB30ba@syntax-dispatch gB3b95@t '(_ any)))) (if gB3b97@ls/false (apply (lambda (gB3b99@expr) gB3b99@expr) gB3b97@ls/false) (let ((gB3b9b@t gB3b95@t)) (let ((gB3b9d@ls/false (gB30ba@syntax-dispatch gB3b9b@t '_))) (if gB3b9d@ls/false (apply (lambda () '#f) gB3b9d@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3b9b@t))))))))) (gB3a96@get-fields (lambda (gB3b81@clause*) (let ((gB3b83@t gB3b81@clause*)) (let ((gB3b85@ls/false (gB30ba@syntax-dispatch gB3b83@t '()))) (if gB3b85@ls/false (apply (lambda () '()) gB3b85@ls/false) (let ((gB3b87@t gB3b83@t)) (let ((gB3b89@ls/false (gB30ba@syntax-dispatch gB3b87@t '((#(scheme-id fields) . each-any) . _)))) (if gB3b89@ls/false (apply (lambda (gB3b8b@f*) gB3b8b@f*) gB3b89@ls/false) (let ((gB3b8d@t gB3b87@t)) (let ((gB3b8f@ls/false (gB30ba@syntax-dispatch gB3b8d@t '(_ . any)))) (if gB3b8f@ls/false (apply (lambda (gB3b91@rest) (gB3a96@get-fields gB3b91@rest)) gB3b8f@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3b8d@t)))))))))))) (gB3a98@get-mutator-indices (lambda (gB3b69@fields) (let gB3b6f@f ((gB3b6b@fields gB3b69@fields) (gB3b6c@i '0)) (let ((gB3b71@t gB3b6b@fields)) (let ((gB3b73@ls/false (gB30ba@syntax-dispatch gB3b71@t '()))) (if gB3b73@ls/false (apply (lambda () '()) gB3b73@ls/false) (let ((gB3b75@t gB3b71@t)) (let ((gB3b77@ls/false (gB30ba@syntax-dispatch gB3b75@t '((#(scheme-id mutable) . _) . any)))) (if gB3b77@ls/false (apply (lambda (gB3b79@rest) (cons gB3b6c@i (gB3b6f@f gB3b79@rest (+ gB3b6c@i '1)))) gB3b77@ls/false) (let ((gB3b7b@t gB3b75@t)) (let ((gB3b7d@ls/false (gB30ba@syntax-dispatch gB3b7b@t '(_ . any)))) (if gB3b7d@ls/false (apply (lambda (gB3b7f@rest) (gB3b6f@f gB3b7f@rest (+ gB3b6c@i '1))) gB3b7d@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3b7b@t))))))))))))) (gB3a9a@get-mutators (lambda (gB3b3f@foo gB3b40@fields) (letrec* ((gB3b44@gen-name (lambda (gB3b67@x) (gB319e@datum->syntax gB3b3f@foo (string->symbol (string-append (symbol->string (gB31a0@syntax->datum gB3b3f@foo)) '"-" (symbol->string (gB31a0@syntax->datum gB3b67@x)) '"-set!")))))) (let gB3b47@f ((gB3b45@fields gB3b40@fields)) (let ((gB3b49@t gB3b45@fields)) (let ((gB3b4b@ls/false (gB30ba@syntax-dispatch gB3b49@t '()))) (if gB3b4b@ls/false (apply (lambda () '()) gB3b4b@ls/false) (let ((gB3b4d@t gB3b49@t)) (let ((gB3b4f@ls/false (gB30ba@syntax-dispatch gB3b4d@t '((#(scheme-id mutable) any any any) . any)))) (if gB3b4f@ls/false (apply (lambda (gB3b51@name gB3b52@accessor gB3b53@mutator gB3b54@rest) (cons gB3b53@mutator (gB3b47@f gB3b54@rest))) gB3b4f@ls/false) (let ((gB3b59@t gB3b4d@t)) (let ((gB3b5b@ls/false (gB30ba@syntax-dispatch gB3b59@t '((#(scheme-id mutable) any) . any)))) (if gB3b5b@ls/false (apply (lambda (gB3b5d@name gB3b5e@rest) (cons (gB3b44@gen-name gB3b5d@name) (gB3b47@f gB3b5e@rest))) gB3b5b@ls/false) (let ((gB3b61@t gB3b59@t)) (let ((gB3b63@ls/false (gB30ba@syntax-dispatch gB3b61@t '(_ . any)))) (if gB3b63@ls/false (apply (lambda (gB3b65@rest) (gB3b47@f gB3b65@rest)) gB3b63@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3b61@t))))))))))))))))) (gB3a9c@get-accessors (lambda (gB3afb@foo gB3afc@fields) (letrec* ((gB3b00@gen-name (lambda (gB3b3d@x) (gB319e@datum->syntax gB3afb@foo (string->symbol (string-append (symbol->string (gB31a0@syntax->datum gB3afb@foo)) '"-" (symbol->string (gB31a0@syntax->datum gB3b3d@x)))))))) (map (lambda (gB3b01@field) (let ((gB3b03@t gB3b01@field)) (let ((gB3b05@ls/false (gB30ba@syntax-dispatch gB3b03@t '(#(scheme-id mutable) any any any)))) (if (and gB3b05@ls/false (apply (lambda (gB3b07@name gB3b08@accessor gB3b09@mutator) (gB2eb3@id? gB3b08@accessor)) gB3b05@ls/false)) (apply (lambda (gB3b0d@name gB3b0e@accessor gB3b0f@mutator) gB3b0e@accessor) gB3b05@ls/false) (let ((gB3b13@t gB3b03@t)) (let ((gB3b15@ls/false (gB30ba@syntax-dispatch gB3b13@t '(#(scheme-id immutable) any any)))) (if (and gB3b15@ls/false (apply (lambda (gB3b17@name gB3b18@accessor) (gB2eb3@id? gB3b18@accessor)) gB3b15@ls/false)) (apply (lambda (gB3b1b@name gB3b1c@accessor) gB3b1c@accessor) gB3b15@ls/false) (let ((gB3b1f@t gB3b13@t)) (let ((gB3b21@ls/false (gB30ba@syntax-dispatch gB3b1f@t '(#(scheme-id mutable) any)))) (if (and gB3b21@ls/false (apply (lambda (gB3b23@name) (gB2eb3@id? gB3b23@name)) gB3b21@ls/false)) (apply (lambda (gB3b25@name) (gB3b00@gen-name gB3b25@name)) gB3b21@ls/false) (let ((gB3b27@t gB3b1f@t)) (let ((gB3b29@ls/false (gB30ba@syntax-dispatch gB3b27@t '(#(scheme-id immutable) any)))) (if (and gB3b29@ls/false (apply (lambda (gB3b2b@name) (gB2eb3@id? gB3b2b@name)) gB3b29@ls/false)) (apply (lambda (gB3b2d@name) (gB3b00@gen-name gB3b2d@name)) gB3b29@ls/false) (let ((gB3b2f@t gB3b27@t)) (let ((gB3b31@ls/false (gB30ba@syntax-dispatch gB3b2f@t 'any))) (if (and gB3b31@ls/false (apply (lambda (gB3b33@name) (gB2eb3@id? gB3b33@name)) gB3b31@ls/false)) (apply (lambda (gB3b35@name) (gB3b00@gen-name gB3b35@name)) gB3b31@ls/false) (let ((gB3b37@t gB3b2f@t)) (let ((gB3b39@ls/false (gB30ba@syntax-dispatch gB3b37@t 'any))) (if gB3b39@ls/false (apply (lambda (gB3b3b@others) (gB319a@syntax-violation '#f '"invalid field spec" gB3b01@field)) gB3b39@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3b37@t)))))))))))))))))))) gB3afc@fields)))) (gB3a9e@enumerate (lambda (gB3af3@ls) (let gB3af9@f ((gB3af5@ls gB3af3@ls) (gB3af6@i '0)) (if (null? gB3af5@ls) '() (cons gB3af6@i (gB3af9@f (cdr gB3af5@ls) (+ gB3af6@i '1))))))) (gB3aa0@do-define-record (lambda (gB3acb@namespec gB3acc@clause*) (let ((gB3acf@foo (gB3a84@get-record-name gB3acb@namespec))) (let ((gB3ad1@foo-rtd (gensym))) (let ((gB3ad3@foo-rcd (gensym))) (let ((gB3ad5@protocol (gensym))) (let ((gB3ad7@make-foo (gB3a86@get-record-constructor-name gB3acb@namespec))) (let ((gB3ad9@fields (gB3a96@get-fields gB3acc@clause*))) (let ((gB3adb@idx* (gB3a9e@enumerate gB3ad9@fields))) (let ((gB3add@foo-x* (gB3a9c@get-accessors gB3acf@foo gB3ad9@fields))) (let ((gB3adf@set-foo-x!* (gB3a9a@get-mutators gB3acf@foo gB3ad9@fields))) (let ((gB3ae1@set-foo-idx* (gB3a98@get-mutator-indices gB3ad9@fields))) (let ((gB3ae3@foo? (gB3a88@get-record-predicate-name gB3acb@namespec))) (let ((gB3ae5@foo-rtd-code (gB3a8c@foo-rtd-code gB3acf@foo gB3acc@clause* (gB3a8e@parent-rtd-code gB3acc@clause*)))) (let ((gB3ae7@foo-rcd-code (gB3a92@foo-rcd-code gB3acc@clause* gB3ad1@foo-rtd gB3ad5@protocol (gB3a90@parent-rcd-code gB3acc@clause*)))) (let ((gB3ae9@protocol-code (gB3a94@get-protocol-code gB3acc@clause*))) (gB3070@bless (cons 'begin (cons (list 'define gB3ad1@foo-rtd gB3ae5@foo-rtd-code) (cons (list 'define gB3ad5@protocol gB3ae9@protocol-code) (cons (list 'define gB3ad3@foo-rcd gB3ae7@foo-rcd-code) (cons (list 'define-syntax gB3acf@foo (list 'list ''$rtd (list 'syntax gB3ad1@foo-rtd) (list 'syntax gB3ad3@foo-rcd))) (cons (list 'define gB3ae3@foo? (list 'record-predicate gB3ad1@foo-rtd)) (cons (list 'define gB3ad7@make-foo (list 'record-constructor gB3ad3@foo-rcd)) (append (map (lambda (gB3aeb@foo-x gB3aec@idx) (list 'define gB3aeb@foo-x (list 'record-accessor gB3ad1@foo-rtd gB3aec@idx))) gB3add@foo-x* gB3adb@idx*) (map (lambda (gB3aef@set-foo-x! gB3af0@idx) (list 'define gB3aef@set-foo-x! (list 'record-mutator gB3ad1@foo-rtd gB3af0@idx))) gB3adf@set-foo-x!* gB3ae1@set-foo-idx*)))))))))))))))))))))))))) (gB3aa2@verify-clauses (lambda (gB3aab@x gB3aac@cls*) (letrec* ((gB3ab0@valid-kwds (map gB3070@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (gB3ab2@free-id-member? (lambda (gB3ac7@x gB3ac8@ls) (and (pair? gB3ac8@ls) (or (gB2eb9@free-id=? gB3ac7@x (car gB3ac8@ls)) (gB3ab2@free-id-member? gB3ac7@x (cdr gB3ac8@ls))))))) (let gB3ab7@f ((gB3ab3@cls* gB3aac@cls*) (gB3ab4@seen* '())) (if (not (null? gB3ab3@cls*)) (let ((gB3ab9@t (car gB3ab3@cls*))) (let ((gB3abb@ls/false (gB30ba@syntax-dispatch gB3ab9@t '(any . any)))) (if gB3abb@ls/false (apply (lambda (gB3abd@kwd gB3abe@rest) (if (or (not (gB2eb3@id? gB3abd@kwd)) (not (gB3ab2@free-id-member? gB3abd@kwd gB3ab0@valid-kwds))) (gB319a@syntax-violation '#f '"not a valid define-record-type keyword" gB3abd@kwd) (if (gB2ebf@bound-id-member? gB3abd@kwd gB3ab4@seen*) (gB319a@syntax-violation '#f '"duplicate use of keyword " gB3aab@x gB3abd@kwd) (gB3ab7@f (cdr gB3ab3@cls*) (cons gB3abd@kwd gB3ab4@seen*))))) gB3abb@ls/false) (let ((gB3ac1@t gB3ab9@t)) (let ((gB3ac3@ls/false (gB30ba@syntax-dispatch gB3ac1@t 'any))) (if gB3ac3@ls/false (apply (lambda (gB3ac5@cls) (gB319a@syntax-violation '#f '"malformed define-record-type clause" gB3ac5@cls)) gB3ac3@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3ac1@t))))))) (void))))))) (let ((gB3aa3@t gB3a7f@x)) (let ((gB3aa5@ls/false (gB30ba@syntax-dispatch gB3aa3@t '(_ any . each-any)))) (if gB3aa5@ls/false (apply (lambda (gB3aa7@namespec gB3aa8@clause*) (begin (gB3aa2@verify-clauses gB3a7f@x gB3aa8@clause*) (gB3aa0@do-define-record gB3aa7@namespec gB3aa8@clause*))) gB3aa5@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3aa3@t))))))) (set! gB4b8a@gB30ae@define-record-type-macro gB30ae@define-record-type-macro) (set! gB30b0@define-condition-type-macro (lambda (gB3c7b@x) (letrec* ((gB3c7e@mkname (lambda (gB3cab@name gB3cac@suffix) (gB319e@datum->syntax gB3cab@name (string->symbol (string-append (symbol->string (gB31a0@syntax->datum gB3cab@name)) gB3cac@suffix)))))) (let ((gB3c7f@t gB3c7b@x)) (let ((gB3c81@ls/false (gB30ba@syntax-dispatch gB3c7f@t '(any any any any any . #(each (any any)))))) (if (and gB3c81@ls/false (apply (lambda (gB3c83@ctxt gB3c84@name gB3c85@super gB3c86@constructor gB3c87@predicate gB3c88@field* gB3c89@accessor*) (and (gB2eb3@id? gB3c84@name) (gB2eb3@id? gB3c85@super) (gB2eb3@id? gB3c86@constructor) (gB2eb3@id? gB3c87@predicate) (for-all gB2eb3@id? gB3c88@field*) (for-all gB2eb3@id? gB3c89@accessor*))) gB3c81@ls/false)) (apply (lambda (gB3c91@ctxt gB3c92@name gB3c93@super gB3c94@constructor gB3c95@predicate gB3c96@field* gB3c97@accessor*) (let ((gB3c9f@aux-accessor* (map (lambda (gB3ca1@x) (gensym)) gB3c97@accessor*))) (gB3070@bless (cons 'begin (cons (cons 'define-record-type (cons (list gB3c92@name gB3c94@constructor (gensym)) (cons (list 'parent gB3c93@super) (cons (cons 'fields (map (lambda (gB3ca3@field gB3ca4@aux) (list 'immutable gB3ca3@field gB3ca4@aux)) gB3c96@field* gB3c9f@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define gB3c95@predicate (list 'condition-predicate (list 'record-type-descriptor gB3c92@name))) (map (lambda (gB3ca7@accessor gB3ca8@aux) (list 'define gB3ca7@accessor (list 'condition-accessor (list 'record-type-descriptor gB3c92@name) gB3ca8@aux))) gB3c97@accessor* gB3c9f@aux-accessor*))))))) gB3c81@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3c7f@t))))))) (set! gB4b8b@gB30b0@define-condition-type-macro gB30b0@define-condition-type-macro) (set! gB30b2@incorrect-usage-macro (lambda (gB3caf@e) (gB319a@syntax-violation '#f '"incorrect usage of auxiliary keyword" gB3caf@e))) (set! gB4b8c@gB30b2@incorrect-usage-macro gB30b2@incorrect-usage-macro) (set! gB30b4@parameterize-macro (lambda (gB3cb1@e) (let ((gB3cb3@t gB3cb1@e)) (let ((gB3cb5@ls/false (gB30ba@syntax-dispatch gB3cb3@t '(_ () any . each-any)))) (if gB3cb5@ls/false (apply (lambda (gB3cb7@b gB3cb8@b*) (gB3070@bless (cons 'let (cons '() (cons gB3cb7@b gB3cb8@b*))))) gB3cb5@ls/false) (let ((gB3cbb@t gB3cb3@t)) (let ((gB3cbd@ls/false (gB30ba@syntax-dispatch gB3cbb@t '(_ #(each (any any)) any . each-any)))) (if gB3cbd@ls/false (apply (lambda (gB3cbf@olhs* gB3cc0@orhs* gB3cc1@b gB3cc2@b*) (let ((gB3cc7@lhs* (gB3188@generate-temporaries gB3cbf@olhs*)) (gB3cc8@rhs* (gB3188@generate-temporaries gB3cc0@orhs*))) (gB3070@bless (cons (list 'lambda (append gB3cc7@lhs* gB3cc8@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (gB3ccb@lhs gB3ccc@rhs) (list 'let (list (list 't (list gB3ccb@lhs))) (list gB3ccb@lhs gB3ccc@rhs) (cons 'set! (cons gB3ccc@rhs '(t))))) gB3cc7@lhs* gB3cc8@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons gB3cc1@b gB3cc2@b*))) '(swap)))))) (append gB3cbf@olhs* gB3cc0@orhs*))))) gB3cbd@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3cbb@t))))))))) (set! gB4b8d@gB30b4@parameterize-macro gB30b4@parameterize-macro) (set! gB30b6@foreign-call-transformer (lambda (gB3ccf@e gB3cd0@r gB3cd1@mr) (let ((gB3cd5@t gB3ccf@e)) (let ((gB3cd7@ls/false (gB30ba@syntax-dispatch gB3cd5@t '(_ any . each-any)))) (if gB3cd7@ls/false (apply (lambda (gB3cd9@name gB3cda@arg*) (cons 'foreign-call (cons (gB30dc@chi-expr gB3cd9@name gB3cd0@r gB3cd1@mr) (gB30d8@chi-expr* gB3cda@arg* gB3cd0@r gB3cd1@mr)))) gB3cd7@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3cd5@t)))))) (set! gB4b8e@gB30b6@foreign-call-transformer gB30b6@foreign-call-transformer) (set! gB30b8@convert-pattern (lambda (gB3cdd@pattern gB3cde@keys) (letrec* ((gB3ce2@cvt* (lambda (gB3d81@p* gB3d82@n gB3d83@ids) (if (null? gB3d81@p*) (values '() gB3d83@ids) (call-with-values (lambda () (gB3ce2@cvt* (cdr gB3d81@p*) gB3d82@n gB3d83@ids)) (lambda (gB3d8b@gB3d88 gB3d8c@gB3d8a) (let ((gB3d8f@ids gB3d8c@gB3d8a) (gB3d90@y gB3d8b@gB3d88)) (call-with-values (lambda () (gB3ce4@cvt (car gB3d81@p*) gB3d82@n gB3d8f@ids)) (lambda (gB3d97@gB3d94 gB3d98@gB3d96) (let ((gB3d9b@ids gB3d98@gB3d96) (gB3d9c@x gB3d97@gB3d94)) (values (cons gB3d9c@x gB3d90@y) gB3d9b@ids)))))))))) (gB3ce4@cvt (lambda (gB3ce5@p gB3ce6@n gB3ce7@ids) (let ((gB3ceb@t gB3ce5@p)) (let ((gB3ced@ls/false (gB30ba@syntax-dispatch gB3ceb@t 'any))) (if (and gB3ced@ls/false (apply (lambda (gB3cef@id) (gB2eb3@id? gB3cef@id)) gB3ced@ls/false)) (apply (lambda (gB3cf1@id) (if (gB2ebf@bound-id-member? gB3ce5@p gB3cde@keys) (values (vector 'free-id gB3ce5@p) gB3ce7@ids) (if (gB2eb9@free-id=? gB3ce5@p (gB3042@scheme-stx '_)) (values '_ gB3ce7@ids) (values 'any (cons (cons gB3ce5@p gB3ce6@n) gB3ce7@ids))))) gB3ced@ls/false) (let ((gB3cf3@t gB3ceb@t)) (let ((gB3cf5@ls/false (gB30ba@syntax-dispatch gB3cf3@t '(any any)))) (if (and gB3cf5@ls/false (apply (lambda (gB3cf7@p gB3cf8@dots) (gB30bc@ellipsis? gB3cf8@dots)) gB3cf5@ls/false)) (apply (lambda (gB3cfb@p gB3cfc@dots) (call-with-values (lambda () (gB3ce4@cvt gB3cfb@p (+ gB3ce6@n '1) gB3ce7@ids)) (lambda (gB3d03@gB3d00 gB3d04@gB3d02) (let ((gB3d07@ids gB3d04@gB3d02) (gB3d08@p gB3d03@gB3d00)) (values (if (eq? gB3d08@p 'any) 'each-any (vector 'each gB3d08@p)) gB3d07@ids))))) gB3cf5@ls/false) (let ((gB3d0b@t gB3cf3@t)) (let ((gB3d0d@ls/false (gB30ba@syntax-dispatch gB3d0b@t '(any any . #(each+ any () any))))) (if (and gB3d0d@ls/false (apply (lambda (gB3d0f@x gB3d10@dots gB3d11@ys gB3d12@z) (gB30bc@ellipsis? gB3d10@dots)) gB3d0d@ls/false)) (apply (lambda (gB3d17@x gB3d18@dots gB3d19@ys gB3d1a@z) (call-with-values (lambda () (gB3ce4@cvt gB3d1a@z gB3ce6@n gB3ce7@ids)) (lambda (gB3d23@gB3d20 gB3d24@gB3d22) (let ((gB3d27@ids gB3d24@gB3d22) (gB3d28@z gB3d23@gB3d20)) (call-with-values (lambda () (gB3ce2@cvt* gB3d19@ys gB3ce6@n gB3d27@ids)) (lambda (gB3d2f@gB3d2c gB3d30@gB3d2e) (let ((gB3d33@ids gB3d30@gB3d2e) (gB3d34@ys gB3d2f@gB3d2c)) (call-with-values (lambda () (gB3ce4@cvt gB3d17@x (+ gB3ce6@n '1) gB3d33@ids)) (lambda (gB3d3b@gB3d38 gB3d3c@gB3d3a) (let ((gB3d3f@ids gB3d3c@gB3d3a) (gB3d40@x gB3d3b@gB3d38)) (values (vector 'each+ gB3d40@x (reverse gB3d34@ys) gB3d28@z) gB3d3f@ids))))))))))) gB3d0d@ls/false) (let ((gB3d43@t gB3d0b@t)) (let ((gB3d45@ls/false (gB30ba@syntax-dispatch gB3d43@t '(any . any)))) (if gB3d45@ls/false (apply (lambda (gB3d47@x gB3d48@y) (call-with-values (lambda () (gB3ce4@cvt gB3d48@y gB3ce6@n gB3ce7@ids)) (lambda (gB3d4f@gB3d4c gB3d50@gB3d4e) (let ((gB3d53@ids gB3d50@gB3d4e) (gB3d54@y gB3d4f@gB3d4c)) (call-with-values (lambda () (gB3ce4@cvt gB3d47@x gB3ce6@n gB3d53@ids)) (lambda (gB3d5b@gB3d58 gB3d5c@gB3d5a) (let ((gB3d5f@ids gB3d5c@gB3d5a) (gB3d60@x gB3d5b@gB3d58)) (values (cons gB3d60@x gB3d54@y) gB3d5f@ids)))))))) gB3d45@ls/false) (let ((gB3d63@t gB3d43@t)) (let ((gB3d65@ls/false (gB30ba@syntax-dispatch gB3d63@t '()))) (if gB3d65@ls/false (apply (lambda () (values '() gB3ce7@ids)) gB3d65@ls/false) (let ((gB3d67@t gB3d63@t)) (let ((gB3d69@ls/false (gB30ba@syntax-dispatch gB3d67@t '#(vector each-any)))) (if (and gB3d69@ls/false (apply (lambda (gB3d6b@p) (not (gB2e7f@stx? gB3d6b@p))) gB3d69@ls/false)) (apply (lambda (gB3d6d@p) (call-with-values (lambda () (gB3ce4@cvt gB3d6d@p gB3ce6@n gB3ce7@ids)) (lambda (gB3d73@gB3d70 gB3d74@gB3d72) (let ((gB3d77@ids gB3d74@gB3d72) (gB3d78@p gB3d73@gB3d70)) (values (vector 'vector gB3d78@p) gB3d77@ids))))) gB3d69@ls/false) (let ((gB3d7b@t gB3d67@t)) (let ((gB3d7d@ls/false (gB30ba@syntax-dispatch gB3d7b@t 'any))) (if gB3d7d@ls/false (apply (lambda (gB3d7f@datum) (values (vector 'atom (gB2ec7@stx->datum gB3d7f@datum)) gB3ce7@ids)) gB3d7d@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3d7b@t))))))))))))))))))))))))) (gB3ce4@cvt gB3cdd@pattern '0 '())))) (set! gB4b8f@gB30b8@convert-pattern gB30b8@convert-pattern) (set! gB30ba@syntax-dispatch (letrec* ((gB3da0@stx^ (lambda (gB3e7b@e gB3e7c@m* gB3e7d@s* gB3e7e@ae*) (if (and (null? gB3e7c@m*) (null? gB3e7d@s*) (null? gB3e7e@ae*)) gB3e7b@e (gB2e9b@mkstx gB3e7b@e gB3e7c@m* gB3e7d@s* gB3e7e@ae*)))) (gB3da2@match-each (lambda (gB3e5b@e gB3e5c@p gB3e5d@m* gB3e5e@s* gB3e5f@ae*) (if (pair? gB3e5b@e) (let ((gB3e65@first (gB3dae@match (car gB3e5b@e) gB3e5c@p gB3e5d@m* gB3e5e@s* gB3e5f@ae* '()))) (and gB3e65@first (let ((gB3e67@rest (gB3da2@match-each (cdr gB3e5b@e) gB3e5c@p gB3e5d@m* gB3e5e@s* gB3e5f@ae*))) (and gB3e67@rest (cons gB3e65@first gB3e67@rest))))) (if (null? gB3e5b@e) '() (if (gB2e7f@stx? gB3e5b@e) (and (not (gB2e39@top-marked? gB3e5d@m*)) (call-with-values (lambda () (join-wraps gB3e5d@m* gB3e5e@s* gB3e5f@ae* gB3e5b@e)) (lambda (gB3e6f@gB3e6a gB3e70@gB3e6c gB3e71@gB3e6e) (let ((gB3e75@ae* gB3e71@gB3e6e) (gB3e76@s* gB3e70@gB3e6c) (gB3e77@m* gB3e6f@gB3e6a)) (gB3da2@match-each (gB2e81@stx-expr gB3e5b@e) gB3e5c@p gB3e77@m* gB3e76@s* gB3e75@ae*))))) (if (gB29f7@gB28c9@annotation? gB3e5b@e) (gB3da2@match-each (gB29f9@gB28cd@annotation-expression gB3e5b@e) gB3e5c@p gB3e5d@m* gB3e5e@s* gB3e5f@ae*) '#f)))))) (gB3da4@match-each+ (lambda (gB3e1b@e gB3e1c@x-pat gB3e1d@y-pat gB3e1e@z-pat gB3e1f@m* gB3e20@s* gB3e21@ae* gB3e22@r) (let gB3e33@f ((gB3e2b@e gB3e1b@e) (gB3e2c@m* gB3e1f@m*) (gB3e2d@s* gB3e20@s*) (gB3e2e@ae* gB3e21@ae*)) (if (pair? gB3e2b@e) (call-with-values (lambda () (gB3e33@f (cdr gB3e2b@e) gB3e2c@m* gB3e2d@s* gB3e2e@ae*)) (lambda (gB3e3b@gB3e36 gB3e3c@gB3e38 gB3e3d@gB3e3a) (let ((gB3e41@r gB3e3d@gB3e3a) (gB3e42@y-pat gB3e3c@gB3e38) (gB3e43@xr* gB3e3b@gB3e36)) (if gB3e41@r (if (null? gB3e42@y-pat) (let ((gB3e47@xr (gB3dae@match (car gB3e2b@e) gB3e1c@x-pat gB3e2c@m* gB3e2d@s* gB3e2e@ae* '()))) (if gB3e47@xr (values (cons gB3e47@xr gB3e43@xr*) gB3e42@y-pat gB3e41@r) (values '#f '#f '#f))) (values '() (cdr gB3e42@y-pat) (gB3dae@match (car gB3e2b@e) (car gB3e42@y-pat) gB3e2c@m* gB3e2d@s* gB3e2e@ae* gB3e41@r))) (values '#f '#f '#f))))) (if (gB2e7f@stx? gB3e2b@e) (if (gB2e39@top-marked? gB3e2c@m*) (values '() gB3e1d@y-pat (gB3dae@match gB3e2b@e gB3e1e@z-pat gB3e2c@m* gB3e2d@s* gB3e2e@ae* gB3e22@r)) (call-with-values (lambda () (join-wraps gB3e2c@m* gB3e2d@s* gB3e2e@ae* gB3e2b@e)) (lambda (gB3e4f@gB3e4a gB3e50@gB3e4c gB3e51@gB3e4e) (let ((gB3e55@ae* gB3e51@gB3e4e) (gB3e56@s* gB3e50@gB3e4c) (gB3e57@m* gB3e4f@gB3e4a)) (gB3e33@f (gB2e81@stx-expr gB3e2b@e) gB3e57@m* gB3e56@s* gB3e55@ae*))))) (if (gB29f7@gB28c9@annotation? gB3e2b@e) (gB3e33@f (gB29f9@gB28cd@annotation-expression gB3e2b@e) gB3e2c@m* gB3e2d@s* gB3e2e@ae*) (values '() gB3e1d@y-pat (gB3dae@match gB3e2b@e gB3e1e@z-pat gB3e2c@m* gB3e2d@s* gB3e2e@ae* gB3e22@r)))))))) (gB3da6@match-each-any (lambda (gB3dff@e gB3e00@m* gB3e01@s* gB3e02@ae*) (if (pair? gB3dff@e) (let ((gB3e07@l (gB3da6@match-each-any (cdr gB3dff@e) gB3e00@m* gB3e01@s* gB3e02@ae*))) (and gB3e07@l (cons (gB3da0@stx^ (car gB3dff@e) gB3e00@m* gB3e01@s* gB3e02@ae*) gB3e07@l))) (if (null? gB3dff@e) '() (if (gB2e7f@stx? gB3dff@e) (and (not (gB2e39@top-marked? gB3e00@m*)) (call-with-values (lambda () (join-wraps gB3e00@m* gB3e01@s* gB3e02@ae* gB3dff@e)) (lambda (gB3e0f@gB3e0a gB3e10@gB3e0c gB3e11@gB3e0e) (let ((gB3e15@ae* gB3e11@gB3e0e) (gB3e16@s* gB3e10@gB3e0c) (gB3e17@m* gB3e0f@gB3e0a)) (gB3da6@match-each-any (gB2e81@stx-expr gB3dff@e) gB3e17@m* gB3e16@s* gB3e15@ae*))))) (if (gB29f7@gB28c9@annotation? gB3dff@e) (gB3da6@match-each-any (gB29f9@gB28cd@annotation-expression gB3dff@e) gB3e00@m* gB3e01@s* gB3e02@ae*) '#f)))))) (gB3da8@match-empty (lambda (gB3df9@p gB3dfa@r) (if (null? gB3df9@p) gB3dfa@r (if (eq? gB3df9@p '_) gB3dfa@r (if (eq? gB3df9@p 'any) (cons '() gB3dfa@r) (if (pair? gB3df9@p) (gB3da8@match-empty (car gB3df9@p) (gB3da8@match-empty (cdr gB3df9@p) gB3dfa@r)) (if (eq? gB3df9@p 'each-any) (cons '() gB3dfa@r) (let ((gB3dfd@t (vector-ref gB3df9@p '0))) (if (memv gB3dfd@t '(each)) (gB3da8@match-empty (vector-ref gB3df9@p '1) gB3dfa@r) (if (memv gB3dfd@t '(each+)) (gB3da8@match-empty (vector-ref gB3df9@p '1) (gB3da8@match-empty (reverse (vector-ref gB3df9@p '2)) (gB3da8@match-empty (vector-ref gB3df9@p '3) gB3dfa@r))) (if (memv gB3dfd@t '(free-id atom)) gB3dfa@r (if (memv gB3dfd@t '(scheme-id atom)) gB3dfa@r (if (memv gB3dfd@t '(vector)) (gB3da8@match-empty (vector-ref gB3df9@p '1) gB3dfa@r) (assertion-violation 'syntax-dispatch '"invalid pattern" gB3df9@p)))))))))))))) (gB3daa@combine (lambda (gB3df5@r* gB3df6@r) (if (null? (car gB3df5@r*)) gB3df6@r (cons (map car gB3df5@r*) (gB3daa@combine (map cdr gB3df5@r*) gB3df6@r))))) (gB3dac@match* (lambda (gB3dd1@e gB3dd2@p gB3dd3@m* gB3dd4@s* gB3dd5@ae* gB3dd6@r) (if (null? gB3dd2@p) (and (null? gB3dd1@e) gB3dd6@r) (if (pair? gB3dd2@p) (and (pair? gB3dd1@e) (gB3dae@match (car gB3dd1@e) (car gB3dd2@p) gB3dd3@m* gB3dd4@s* gB3dd5@ae* (gB3dae@match (cdr gB3dd1@e) (cdr gB3dd2@p) gB3dd3@m* gB3dd4@s* gB3dd5@ae* gB3dd6@r))) (if (eq? gB3dd2@p 'each-any) (let ((gB3ddd@l (gB3da6@match-each-any gB3dd1@e gB3dd3@m* gB3dd4@s* gB3dd5@ae*))) (and gB3ddd@l (cons gB3ddd@l gB3dd6@r))) (let ((gB3ddf@t (vector-ref gB3dd2@p '0))) (if (memv gB3ddf@t '(each)) (if (null? gB3dd1@e) (gB3da8@match-empty (vector-ref gB3dd2@p '1) gB3dd6@r) (let ((gB3de1@r* (gB3da2@match-each gB3dd1@e (vector-ref gB3dd2@p '1) gB3dd3@m* gB3dd4@s* gB3dd5@ae*))) (and gB3de1@r* (gB3daa@combine gB3de1@r* gB3dd6@r)))) (if (memv gB3ddf@t '(free-id)) (and (symbol? gB3dd1@e) (gB2e39@top-marked? gB3dd3@m*) (gB2eb9@free-id=? (gB3da0@stx^ gB3dd1@e gB3dd3@m* gB3dd4@s* gB3dd5@ae*) (vector-ref gB3dd2@p '1)) gB3dd6@r) (if (memv gB3ddf@t '(scheme-id)) (and (symbol? gB3dd1@e) (gB2e39@top-marked? gB3dd3@m*) (gB2eb9@free-id=? (gB3da0@stx^ gB3dd1@e gB3dd3@m* gB3dd4@s* gB3dd5@ae*) (gB3042@scheme-stx (vector-ref gB3dd2@p '1))) gB3dd6@r) (if (memv gB3ddf@t '(each+)) (call-with-values (lambda () (gB3da4@match-each+ gB3dd1@e (vector-ref gB3dd2@p '1) (vector-ref gB3dd2@p '2) (vector-ref gB3dd2@p '3) gB3dd3@m* gB3dd4@s* gB3dd5@ae* gB3dd6@r)) (lambda (gB3de9@gB3de4 gB3dea@gB3de6 gB3deb@gB3de8) (let ((gB3def@r gB3deb@gB3de8) (gB3df0@y-pat gB3dea@gB3de6) (gB3df1@xr* gB3de9@gB3de4)) (and gB3def@r (null? gB3df0@y-pat) (if (null? gB3df1@xr*) (gB3da8@match-empty (vector-ref gB3dd2@p '1) gB3def@r) (gB3daa@combine gB3df1@xr* gB3def@r)))))) (if (memv gB3ddf@t '(atom)) (and (fast-equal? (vector-ref gB3dd2@p '1) (gB2ec5@strip gB3dd1@e gB3dd3@m*)) gB3dd6@r) (if (memv gB3ddf@t '(vector)) (and (vector? gB3dd1@e) (gB3dae@match (vector->list gB3dd1@e) (vector-ref gB3dd2@p '1) gB3dd3@m* gB3dd4@s* gB3dd5@ae* gB3dd6@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" gB3dd2@p))))))))))))) (gB3dae@match (lambda (gB3db3@e gB3db4@p gB3db5@m* gB3db6@s* gB3db7@ae* gB3db8@r) (if (not gB3db8@r) '#f (if (eq? gB3db4@p '_) gB3db8@r (if (eq? gB3db4@p 'any) (cons (gB3da0@stx^ gB3db3@e gB3db5@m* gB3db6@s* gB3db7@ae*) gB3db8@r) (if (gB2e7f@stx? gB3db3@e) (and (not (gB2e39@top-marked? gB3db5@m*)) (call-with-values (lambda () (join-wraps gB3db5@m* gB3db6@s* gB3db7@ae* gB3db3@e)) (lambda (gB3dc5@gB3dc0 gB3dc6@gB3dc2 gB3dc7@gB3dc4) (let ((gB3dcb@ae* gB3dc7@gB3dc4) (gB3dcc@s* gB3dc6@gB3dc2) (gB3dcd@m* gB3dc5@gB3dc0)) (gB3dae@match (gB2e81@stx-expr gB3db3@e) gB3db4@p gB3dcd@m* gB3dcc@s* gB3dcb@ae* gB3db8@r))))) (if (gB29f7@gB28c9@annotation? gB3db3@e) (gB3dae@match (gB29f9@gB28cd@annotation-expression gB3db3@e) gB3db4@p gB3db5@m* gB3db6@s* gB3db7@ae* gB3db8@r) (gB3dac@match* gB3db3@e gB3db4@p gB3db5@m* gB3db6@s* gB3db7@ae* gB3db8@r))))))))) (lambda (gB3daf@e gB3db0@p) (gB3dae@match gB3daf@e gB3db0@p '() '() '() '())))) (set! gB4b90@gB30ba@syntax-dispatch gB30ba@syntax-dispatch) (set! gB30bc@ellipsis? (lambda (gB3e83@x) (and (gB2eb3@id? gB3e83@x) (gB2eb9@free-id=? gB3e83@x (gB3042@scheme-stx '...))))) (set! gB4b91@gB30bc@ellipsis? gB30bc@ellipsis?) (set! gB30be@underscore? (lambda (gB3e85@x) (and (gB2eb3@id? gB3e85@x) (gB2eb9@free-id=? gB3e85@x (gB3042@scheme-stx '_))))) (set! gB4b92@gB30be@underscore? gB30be@underscore?) (set! gB30c0@verify-literals (lambda (gB3e87@lits gB3e88@expr) (for-each (lambda (gB3e8b@x) (if (or (not (gB2eb3@id? gB3e8b@x)) (gB30bc@ellipsis? gB3e8b@x) (gB30be@underscore? gB3e8b@x)) (gB319a@syntax-violation '#f '"invalid literal" gB3e88@expr gB3e8b@x) (void))) gB3e87@lits))) (set! gB4b93@gB30c0@verify-literals gB30c0@verify-literals) (set! gB30c2@syntax-case-transformer (letrec* ((gB3e8e@build-dispatch-call (lambda (gB3eff@pvars gB3f00@expr gB3f01@y gB3f02@r gB3f03@mr) (let ((gB3f09@ids (map car gB3eff@pvars)) (gB3f0a@levels (map cdr gB3eff@pvars))) (let ((gB3f0d@labels (map gB2e3f@gen-label gB3f09@ids)) (gB3f0e@new-vars (map gB2e3b@gen-lexical gB3f09@ids))) (let ((gB3f11@body (gB30dc@chi-expr (gB2e9f@add-subst (gB2e73@make-full-rib gB3f09@ids gB3f0d@labels) gB3f00@expr) (append (map (lambda (gB3f13@label gB3f14@var gB3f15@level) (cons gB3f13@label (gB2ecd@make-binding 'syntax (cons gB3f14@var gB3f15@level)))) gB3f0d@labels gB3f0e@new-vars (map cdr gB3eff@pvars)) gB3f02@r) gB3f03@mr))) (list '(primitive apply) (gB2e16@gB2d48@build-lambda '#f gB3f0e@new-vars gB3f11@body) gB3f01@y)))))) (gB3e90@invalid-ids-error (lambda (gB3ef3@id* gB3ef4@e gB3ef5@class) (let gB3efd@find ((gB3ef9@id* gB3ef3@id*) (gB3efa@ok* '())) (if (null? gB3ef9@id*) (gB319a@syntax-violation '#f '"invalid syntax" gB3ef4@e) (if (gB2eb3@id? (car gB3ef9@id*)) (if (gB2ebf@bound-id-member? (car gB3ef9@id*) gB3efa@ok*) (gB3196@syntax-error (car gB3ef9@id*) '"duplicate " gB3ef5@class) (gB3efd@find (cdr gB3ef9@id*) (cons (car gB3ef9@id*) gB3efa@ok*))) (gB3196@syntax-error (car gB3ef9@id*) '"invalid " gB3ef5@class)))))) (gB3e92@gen-clause (lambda (gB3ecb@x gB3ecc@keys gB3ecd@clauses gB3ece@r gB3ecf@mr gB3ed0@pat gB3ed1@fender gB3ed2@expr) (call-with-values (lambda () (gB30b8@convert-pattern gB3ed0@pat gB3ecc@keys)) (lambda (gB3edf@gB3edc gB3ee0@gB3ede) (let ((gB3ee3@pvars gB3ee0@gB3ede) (gB3ee4@p gB3edf@gB3edc)) (if (not (gB2ebd@distinct-bound-ids? (map car gB3ee3@pvars))) (gB3e90@invalid-ids-error (map car gB3ee3@pvars) gB3ed0@pat '"pattern variable") (if (not (for-all (lambda (gB3ee7@x) (not (gB30bc@ellipsis? (car gB3ee7@x)))) gB3ee3@pvars)) (gB319a@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" gB3ed0@pat) (let ((gB3ee9@y (gB2e3b@gen-lexical 'tmp))) (let ((gB3eeb@test (if (eq? gB3ed1@fender '#t) gB3ee9@y (let ((gB3eed@call (gB3e8e@build-dispatch-call gB3ee3@pvars gB3ed1@fender gB3ee9@y gB3ece@r gB3ecf@mr))) (list 'if gB3ee9@y gB3eed@call (list 'quote '#f)))))) (let ((gB3eef@conseq (gB3e8e@build-dispatch-call gB3ee3@pvars gB3ed2@expr gB3ee9@y gB3ece@r gB3ecf@mr))) (let ((gB3ef1@altern (gB3e94@gen-syntax-case gB3ecb@x gB3ecc@keys gB3ecd@clauses gB3ece@r gB3ecf@mr))) (list (gB2e16@gB2d48@build-lambda '#f (list gB3ee9@y) (list 'if gB3eeb@test gB3eef@conseq gB3ef1@altern)) (list '(primitive syntax-dispatch) gB3ecb@x (list 'quote gB3ee4@p)))))))))))))) (gB3e94@gen-syntax-case (lambda (gB3ea9@x gB3eaa@keys gB3eab@clauses gB3eac@r gB3ead@mr) (if (null? gB3eab@clauses) (list '(primitive syntax-error) gB3ea9@x) (let ((gB3eb3@t (car gB3eab@clauses))) (let ((gB3eb5@ls/false (gB30ba@syntax-dispatch gB3eb3@t '(any any)))) (if gB3eb5@ls/false (apply (lambda (gB3eb7@pat gB3eb8@expr) (if (and (gB2eb3@id? gB3eb7@pat) (not (gB2ebf@bound-id-member? gB3eb7@pat gB3eaa@keys)) (not (gB30bc@ellipsis? gB3eb7@pat))) (if (gB2eb9@free-id=? gB3eb7@pat (gB3042@scheme-stx '_)) (gB30dc@chi-expr gB3eb8@expr gB3eac@r gB3ead@mr) (let ((gB3ebb@lab (gB2e3f@gen-label gB3eb7@pat)) (gB3ebc@lex (gB2e3b@gen-lexical gB3eb7@pat))) (let ((gB3ebf@body (gB30dc@chi-expr (gB2e9f@add-subst (gB2e73@make-full-rib (list gB3eb7@pat) (list gB3ebb@lab)) gB3eb8@expr) (cons (cons gB3ebb@lab (gB2ecd@make-binding 'syntax (cons gB3ebc@lex '0))) gB3eac@r) gB3ead@mr))) (list (gB2e16@gB2d48@build-lambda '#f (list gB3ebc@lex) gB3ebf@body) gB3ea9@x)))) (gB3e92@gen-clause gB3ea9@x gB3eaa@keys (cdr gB3eab@clauses) gB3eac@r gB3ead@mr gB3eb7@pat '#t gB3eb8@expr))) gB3eb5@ls/false) (let ((gB3ec1@t gB3eb3@t)) (let ((gB3ec3@ls/false (gB30ba@syntax-dispatch gB3ec1@t '(any any any)))) (if gB3ec3@ls/false (apply (lambda (gB3ec5@pat gB3ec6@fender gB3ec7@expr) (gB3e92@gen-clause gB3ea9@x gB3eaa@keys (cdr gB3eab@clauses) gB3eac@r gB3ead@mr gB3ec5@pat gB3ec6@fender gB3ec7@expr)) gB3ec3@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3ec1@t))))))))))) (lambda (gB3e95@e gB3e96@r gB3e97@mr) (let ((gB3e9b@t gB3e95@e)) (let ((gB3e9d@ls/false (gB30ba@syntax-dispatch gB3e9b@t '(_ any each-any . each-any)))) (if gB3e9d@ls/false (apply (lambda (gB3e9f@expr gB3ea0@keys gB3ea1@clauses) (begin (gB30c0@verify-literals gB3ea0@keys gB3e95@e) (let ((gB3ea5@x (gB2e3b@gen-lexical 'tmp))) (let ((gB3ea7@body (gB3e94@gen-syntax-case gB3ea5@x gB3ea0@keys gB3ea1@clauses gB3e96@r gB3e97@mr))) (list (gB2e16@gB2d48@build-lambda '#f (list gB3ea5@x) gB3ea7@body) (gB30dc@chi-expr gB3e9f@expr gB3e96@r gB3e97@mr)))))) gB3e9d@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3e9b@t))))))) (set! gB4b94@gB30c2@syntax-case-transformer gB30c2@syntax-case-transformer) (set! gB30c4@ellipsis-map (lambda (gB3f19@proc gB3f1a@ls . gB3f1d@ls*) (letrec* ((gB3f20@who '...)) (begin (if (not (list? gB3f1a@ls)) (assertion-violation gB3f20@who '"not a list" gB3f1a@ls) (void)) (if (not (null? gB3f1d@ls*)) (let ((gB3f21@n (length gB3f1a@ls))) (for-each (lambda (gB3f23@x) (begin (if (not (list? gB3f23@x)) (assertion-violation gB3f20@who '"not a list" gB3f23@x) (void)) (if (not (= (length gB3f23@x) gB3f21@n)) (assertion-violation gB3f20@who '"length mismatch" gB3f1a@ls gB3f23@x) (void)))) gB3f1d@ls*)) (void)) (apply map gB3f19@proc gB3f1a@ls gB3f1d@ls*))))) (set! gB4b95@gB30c4@ellipsis-map gB30c4@ellipsis-map) (set! gB30c6@syntax-transformer (letrec* ((gB3f26@gen-syntax (lambda (gB3f9d@src gB3f9e@e gB3f9f@r gB3fa0@maps gB3fa1@ellipsis? gB3fa2@vec?) (let ((gB3fa9@t gB3f9e@e)) (let ((gB3fab@ls/false (gB30ba@syntax-dispatch gB3fa9@t 'any))) (if (and gB3fab@ls/false (apply (lambda (gB3fad@dots) (gB3fa1@ellipsis? gB3fad@dots)) gB3fab@ls/false)) (apply (lambda (gB3faf@dots) (gB319a@syntax-violation '#f '"misplaced ellipsis in syntax form" gB3f9d@src)) gB3fab@ls/false) (let ((gB3fb1@t gB3fa9@t)) (let ((gB3fb3@ls/false (gB30ba@syntax-dispatch gB3fb1@t 'any))) (if (and gB3fb3@ls/false (apply (lambda (gB3fb5@id) (gB2eb3@id? gB3fb5@id)) gB3fb3@ls/false)) (apply (lambda (gB3fb7@id) (let ((gB3fb9@label (gB2ec9@id->label gB3f9e@e))) (let ((gB3fbb@b (gB2ecb@label->binding gB3fb9@label gB3f9f@r))) (if (eq? (gB2ecf@binding-type gB3fbb@b) 'syntax) (call-with-values (lambda () (let ((gB3fc1@var.lev (gB2ed1@binding-value gB3fbb@b))) (gB3f28@gen-ref gB3f9d@src (car gB3fc1@var.lev) (cdr gB3fc1@var.lev) gB3fa0@maps))) (lambda (gB3fc3@gB3fbe gB3fc4@gB3fc0) (let ((gB3fc7@maps gB3fc4@gB3fc0) (gB3fc8@var gB3fc3@gB3fbe)) (values (list 'ref gB3fc8@var) gB3fc7@maps)))) (values (list 'quote gB3f9e@e) gB3fa0@maps))))) gB3fb3@ls/false) (let ((gB3fcb@t gB3fb1@t)) (let ((gB3fcd@ls/false (gB30ba@syntax-dispatch gB3fcb@t '(any any)))) (if (and gB3fcd@ls/false (apply (lambda (gB3fcf@dots gB3fd0@e) (gB3fa1@ellipsis? gB3fcf@dots)) gB3fcd@ls/false)) (apply (lambda (gB3fd3@dots gB3fd4@e) (if gB3fa2@vec? (gB319a@syntax-violation '#f '"misplaced ellipsis in syntax form" gB3f9d@src) (gB3f26@gen-syntax gB3f9d@src gB3fd4@e gB3f9f@r gB3fa0@maps (lambda (gB3fd7@x) '#f) '#f))) gB3fcd@ls/false) (let ((gB3fd9@t gB3fcb@t)) (let ((gB3fdb@ls/false (gB30ba@syntax-dispatch gB3fd9@t '(any any . any)))) (if (and gB3fdb@ls/false (apply (lambda (gB3fdd@x gB3fde@dots gB3fdf@y) (gB3fa1@ellipsis? gB3fde@dots)) gB3fdb@ls/false)) (apply (lambda (gB3fe3@x gB3fe4@dots gB3fe5@y) (let gB3ffb@f ((gB3fe9@y gB3fe5@y) (gB3fea@k (lambda (gB3fed@maps) (call-with-values (lambda () (gB3f26@gen-syntax gB3f9d@src gB3fe3@x gB3f9f@r (cons '() gB3fed@maps) gB3fa1@ellipsis? '#f)) (lambda (gB3ff3@gB3ff0 gB3ff4@gB3ff2) (let ((gB3ff7@maps gB3ff4@gB3ff2) (gB3ff8@x gB3ff3@gB3ff0)) (if (null? (car gB3ff7@maps)) (gB319a@syntax-violation '#f '"extra ellipsis in syntax form" gB3f9d@src) (values (gB3f2e@gen-map gB3ff8@x (car gB3ff7@maps)) (cdr gB3ff7@maps))))))))) (let ((gB3ffd@t gB3fe9@y)) (let ((gB3fff@ls/false (gB30ba@syntax-dispatch gB3ffd@t '()))) (if gB3fff@ls/false (apply (lambda () (gB3fea@k gB3fa0@maps)) gB3fff@ls/false) (let ((gB4001@t gB3ffd@t)) (let ((gB4003@ls/false (gB30ba@syntax-dispatch gB4001@t '(any . any)))) (if (and gB4003@ls/false (apply (lambda (gB4005@dots gB4006@y) (gB3fa1@ellipsis? gB4005@dots)) gB4003@ls/false)) (apply (lambda (gB4009@dots gB400a@y) (gB3ffb@f gB400a@y (lambda (gB400d@maps) (call-with-values (lambda () (gB3fea@k (cons '() gB400d@maps))) (lambda (gB4013@gB4010 gB4014@gB4012) (let ((gB4017@maps gB4014@gB4012) (gB4018@x gB4013@gB4010)) (if (null? (car gB4017@maps)) (gB319a@syntax-violation '#f '"extra ellipsis in syntax form" gB3f9d@src) (values (gB3f2c@gen-mappend gB4018@x (car gB4017@maps)) (cdr gB4017@maps))))))))) gB4003@ls/false) (let ((gB401b@t gB4001@t)) (let ((gB401d@ls/false (gB30ba@syntax-dispatch gB401b@t '_))) (if gB401d@ls/false (apply (lambda () (call-with-values (lambda () (gB3f26@gen-syntax gB3f9d@src gB3fe9@y gB3f9f@r gB3fa0@maps gB3fa1@ellipsis? gB3fa2@vec?)) (lambda (gB4023@gB4020 gB4024@gB4022) (let ((gB4027@maps gB4024@gB4022) (gB4028@y gB4023@gB4020)) (call-with-values (lambda () (gB3fea@k gB4027@maps)) (lambda (gB402f@gB402c gB4030@gB402e) (let ((gB4033@maps gB4030@gB402e) (gB4034@x gB402f@gB402c)) (values (gB3f2a@gen-append gB4034@x gB4028@y) gB4033@maps)))))))) gB401d@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB401b@t)))))))))))) gB3fdb@ls/false) (let ((gB4037@t gB3fd9@t)) (let ((gB4039@ls/false (gB30ba@syntax-dispatch gB4037@t '(any . any)))) (if gB4039@ls/false (apply (lambda (gB403b@x gB403c@y) (call-with-values (lambda () (gB3f26@gen-syntax gB3f9d@src gB403b@x gB3f9f@r gB3fa0@maps gB3fa1@ellipsis? '#f)) (lambda (gB4043@gB4040 gB4044@gB4042) (let ((gB4047@maps gB4044@gB4042) (gB4048@xnew gB4043@gB4040)) (call-with-values (lambda () (gB3f26@gen-syntax gB3f9d@src gB403c@y gB3f9f@r gB4047@maps gB3fa1@ellipsis? gB3fa2@vec?)) (lambda (gB404f@gB404c gB4050@gB404e) (let ((gB4053@maps gB4050@gB404e) (gB4054@ynew gB404f@gB404c)) (values (gB3f30@gen-cons gB3f9e@e gB403b@x gB403c@y gB4048@xnew gB4054@ynew) gB4053@maps)))))))) gB4039@ls/false) (let ((gB4057@t gB4037@t)) (let ((gB4059@ls/false (gB30ba@syntax-dispatch gB4057@t '#(vector each-any)))) (if gB4059@ls/false (apply (lambda (gB405b@ls) (call-with-values (lambda () (gB3f26@gen-syntax gB3f9d@src gB405b@ls gB3f9f@r gB3fa0@maps gB3fa1@ellipsis? '#t)) (lambda (gB4061@gB405e gB4062@gB4060) (let ((gB4065@maps gB4062@gB4060) (gB4066@lsnew gB4061@gB405e)) (values (gB3f32@gen-vector gB3f9e@e gB405b@ls gB4066@lsnew) gB4065@maps))))) gB4059@ls/false) (let ((gB4069@t gB4057@t)) (let ((gB406b@ls/false (gB30ba@syntax-dispatch gB4069@t '_))) (if gB406b@ls/false (apply (lambda () (values (list 'quote gB3f9e@e) gB3fa0@maps)) gB406b@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB4069@t)))))))))))))))))))))))) (gB3f28@gen-ref (lambda (gB3f83@src gB3f84@var gB3f85@level gB3f86@maps) (if (= gB3f85@level '0) (values gB3f84@var gB3f86@maps) (if (null? gB3f86@maps) (gB319a@syntax-violation '#f '"missing ellipsis in syntax form" gB3f83@src) (call-with-values (lambda () (gB3f28@gen-ref gB3f83@src gB3f84@var (- gB3f85@level '1) (cdr gB3f86@maps))) (lambda (gB3f8f@gB3f8c gB3f90@gB3f8e) (let ((gB3f93@outer-maps gB3f90@gB3f8e) (gB3f94@outer-var gB3f8f@gB3f8c)) (let ((gB3f97@t (assq gB3f94@outer-var (car gB3f86@maps)))) (if gB3f97@t ((lambda (gB3f99@b) (values (cdr gB3f99@b) gB3f86@maps)) gB3f97@t) (let ((gB3f9b@inner-var (gB2e3b@gen-lexical 'tmp))) (values gB3f9b@inner-var (cons (cons (cons gB3f94@outer-var gB3f9b@inner-var) (car gB3f86@maps)) gB3f93@outer-maps)))))))))))) (gB3f2a@gen-append (lambda (gB3f7f@x gB3f80@y) (if (fast-equal? gB3f80@y ''()) gB3f7f@x (list 'append gB3f7f@x gB3f80@y)))) (gB3f2c@gen-mappend (lambda (gB3f7b@e gB3f7c@map-env) (list 'apply '(primitive append) (gB3f2e@gen-map gB3f7b@e gB3f7c@map-env)))) (gB3f2e@gen-map (lambda (gB3f69@e gB3f6a@map-env) (let ((gB3f6d@formals (map cdr gB3f6a@map-env)) (gB3f6e@actuals (map (lambda (gB3f71@x) (list 'ref (car gB3f71@x))) gB3f6a@map-env))) (if (eq? (car gB3f69@e) 'ref) (car gB3f6e@actuals) (if (for-all (lambda (gB3f73@x) (and (eq? (car gB3f73@x) 'ref) (memq (cadr gB3f73@x) gB3f6d@formals))) (cdr gB3f69@e)) (let ((gB3f75@args (map (let ((gB3f77@r (map cons gB3f6d@formals gB3f6e@actuals))) (lambda (gB3f79@x) (cdr (assq (cadr gB3f79@x) gB3f77@r)))) (cdr gB3f69@e)))) (cons 'map (cons (list 'primitive (car gB3f69@e)) gB3f75@args))) (cons* 'map (list 'lambda gB3f6d@formals gB3f69@e) gB3f6e@actuals)))))) (gB3f30@gen-cons (lambda (gB3f59@e gB3f5a@x gB3f5b@y gB3f5c@xnew gB3f5d@ynew) (let ((gB3f63@t (car gB3f5d@ynew))) (if (memv gB3f63@t '(quote)) (if (eq? (car gB3f5c@xnew) 'quote) (let ((gB3f65@xnew (cadr gB3f5c@xnew)) (gB3f66@ynew (cadr gB3f5d@ynew))) (if (and (eq? gB3f65@xnew gB3f5a@x) (eq? gB3f66@ynew gB3f5b@y)) (list 'quote gB3f59@e) (list 'quote (cons gB3f65@xnew gB3f66@ynew)))) (if (null? (cadr gB3f5d@ynew)) (list 'list gB3f5c@xnew) (list 'cons gB3f5c@xnew gB3f5d@ynew))) (if (memv gB3f63@t '(list)) (cons 'list (cons gB3f5c@xnew (cdr gB3f5d@ynew))) (list 'cons gB3f5c@xnew gB3f5d@ynew)))))) (gB3f32@gen-vector (lambda (gB3f53@e gB3f54@ls gB3f55@lsnew) (if (eq? (car gB3f55@lsnew) 'quote) (if (eq? (cadr gB3f55@lsnew) gB3f54@ls) (list 'quote gB3f53@e) (list 'quote (list->vector (cadr gB3f55@lsnew)))) (if (eq? (car gB3f55@lsnew) 'list) (cons 'vector (cdr gB3f55@lsnew)) (list 'list->vector gB3f55@lsnew))))) (gB3f34@regen (lambda (gB3f4d@x) (let ((gB3f4f@t (car gB3f4d@x))) (if (memv gB3f4f@t '(ref)) (cadr gB3f4d@x) (if (memv gB3f4f@t '(primitive)) (list 'primitive (cadr gB3f4d@x)) (if (memv gB3f4f@t '(quote)) (list 'quote (cadr gB3f4d@x)) (if (memv gB3f4f@t '(lambda)) (gB2e16@gB2d48@build-lambda '#f (cadr gB3f4d@x) (gB3f34@regen (caddr gB3f4d@x))) (if (memv gB3f4f@t '(map)) (let ((gB3f51@ls (map gB3f34@regen (cdr gB3f4d@x)))) (cons '(primitive ellipsis-map) gB3f51@ls)) (cons (list 'primitive (car gB3f4d@x)) (map gB3f34@regen (cdr gB3f4d@x)))))))))))) (lambda (gB3f35@e gB3f36@r gB3f37@mr) (let ((gB3f3b@t gB3f35@e)) (let ((gB3f3d@ls/false (gB30ba@syntax-dispatch gB3f3b@t '(_ any)))) (if gB3f3d@ls/false (apply (lambda (gB3f3f@x) (call-with-values (lambda () (gB3f26@gen-syntax gB3f35@e gB3f3f@x gB3f36@r '() gB30bc@ellipsis? '#f)) (lambda (gB3f45@gB3f42 gB3f46@gB3f44) (let ((gB3f49@maps gB3f46@gB3f44) (gB3f4a@e gB3f45@gB3f42)) (gB3f34@regen gB3f4a@e))))) gB3f3d@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB3f3b@t))))))) (set! gB4b96@gB30c6@syntax-transformer gB30c6@syntax-transformer) (set! gB30c8@core-macro-transformer (lambda (gB406d@name) (let ((gB406f@t gB406d@name)) (if (memv gB406f@t '(quote)) gB306a@quote-transformer (if (memv gB406f@t '(lambda)) gB306e@lambda-transformer (if (memv gB406f@t '(case-lambda)) gB306c@case-lambda-transformer (if (memv gB406f@t '(letrec)) gB3052@letrec-transformer (if (memv gB406f@t '(letrec*)) gB3054@letrec*-transformer (if (memv gB406f@t '(let)) gB3050@let-transformer (if (memv gB406f@t '(if)) gB3062@if-transformer (if (memv gB406f@t '(and)) gB3064@and-transformer (if (memv gB406f@t '(or)) gB3066@or-transformer (if (memv gB406f@t '(foreign-call)) gB30b6@foreign-call-transformer (if (memv gB406f@t '(syntax-case)) gB30c2@syntax-case-transformer (if (memv gB406f@t '(syntax)) gB30c6@syntax-transformer (if (memv gB406f@t '(type-descriptor)) gB3058@type-descriptor-transformer (if (memv gB406f@t '(record-type-descriptor)) gB305a@record-type-descriptor-transformer (if (memv gB406f@t '(record-constructor-descriptor)) gB305c@record-constructor-descriptor-transformer (if (memv gB406f@t '(fluid-let-syntax)) gB3056@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" gB406d@name)))))))))))))))))))) (set! gB4b97@gB30c8@core-macro-transformer gB30c8@core-macro-transformer) (set! gB30ca@symbol-macro (lambda (gB4071@x gB4072@set) (let ((gB4075@t gB4071@x)) (let ((gB4077@ls/false (gB30ba@syntax-dispatch gB4075@t '(_ any)))) (if (and gB4077@ls/false (apply (lambda (gB4079@name) (and (gB2eb3@id? gB4079@name) (memq (gB2eb5@id->sym gB4079@name) gB4072@set))) gB4077@ls/false)) (apply (lambda (gB407b@name) (gB3070@bless (list 'quote gB407b@name))) gB4077@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB4075@t)))))) (set! gB4b98@gB30ca@symbol-macro gB30ca@symbol-macro) (set! gB30cc@macro-transformer (lambda (gB407d@x) (if (procedure? gB407d@x) gB407d@x (if (symbol? gB407d@x) (let ((gB407f@t gB407d@x)) (if (memv gB407f@t '(define-record-type)) gB30ae@define-record-type-macro (if (memv gB407f@t '(define-struct)) gB30ac@define-struct-macro (if (memv gB407f@t '(include)) gB30a2@include-macro (if (memv gB407f@t '(cond)) gB309e@cond-macro (if (memv gB407f@t '(let)) gB3076@let-macro (if (memv gB407f@t '(do)) gB3096@do-macro (if (memv gB407f@t '(or)) gB309a@or-macro (if (memv gB407f@t '(and)) gB309c@and-macro (if (memv gB407f@t '(let*)) gB3098@let*-macro (if (memv gB407f@t '(let-values)) gB3078@let-values-macro (if (memv gB407f@t '(let*-values)) gB307a@let*-values-macro (if (memv gB407f@t '(syntax-rules)) gB30a6@syntax-rules-macro (if (memv gB407f@t '(quasiquote)) gB30a8@quasiquote-macro (if (memv gB407f@t '(quasisyntax)) gB30aa@quasisyntax-macro (if (memv gB407f@t '(with-syntax)) gB3072@with-syntax-macro (if (memv gB407f@t '(when)) gB305e@when-macro (if (memv gB407f@t '(unless)) gB3060@unless-macro (if (memv gB407f@t '(case)) gB3068@case-macro (if (memv gB407f@t '(identifier-syntax)) gB3094@identifier-syntax-macro (if (memv gB407f@t '(time)) gB308c@time-macro (if (memv gB407f@t '(delay)) gB308e@delay-macro (if (memv gB407f@t '(assert)) gB3090@assert-macro (if (memv gB407f@t '(endianness)) gB3092@endianness-macro (if (memv gB407f@t '(guard)) gB3088@guard-macro (if (memv gB407f@t '(define-enumeration)) gB308a@define-enumeration-macro (if (memv gB407f@t '(trace-lambda)) gB307c@trace-lambda-macro (if (memv gB407f@t '(trace-define)) gB307e@trace-define-macro (if (memv gB407f@t '(trace-define-syntax)) gB3080@trace-define-syntax-macro (if (memv gB407f@t '(trace-let-syntax)) gB3084@trace-let-syntax-macro (if (memv gB407f@t '(trace-letrec-syntax)) gB3086@trace-letrec-syntax-macro (if (memv gB407f@t '(define-condition-type)) gB30b0@define-condition-type-macro (if (memv gB407f@t '(parameterize)) gB30b4@parameterize-macro (if (memv gB407f@t '(include-into)) gB30a4@include-into-macro (if (memv gB407f@t '(eol-style)) (lambda (gB4081@x) (gB30ca@symbol-macro gB4081@x '(none lf cr crlf nel crnel ls))) (if (memv gB407f@t '(error-handling-mode)) (lambda (gB4083@x) (gB30ca@symbol-macro gB4083@x '(ignore raise replace))) (if (memv gB407f@t '(buffer-mode)) (lambda (gB4085@x) (gB30ca@symbol-macro gB4085@x '(none line block))) (if (memv gB407f@t '(file-options)) gB2e2e@file-options-macro (if (memv gB407f@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) gB30b2@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" gB407d@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" gB407d@x))))) (set! gB4b99@gB30cc@macro-transformer gB30cc@macro-transformer) (set! gB30ce@local-macro-transformer (lambda (gB4087@x) (car gB4087@x))) (set! gB4b9a@gB30ce@local-macro-transformer gB30ce@local-macro-transformer) (set! gB30d0@do-macro-call (lambda (gB4089@transformer gB408a@expr) (let ((gB408d@out (gB4089@transformer (gB2e9d@add-mark gB2e97@anti-mark gB408a@expr '#f)))) (begin (let gB4091@f ((gB408f@x gB408d@out)) (if (not (gB2e7f@stx? gB408f@x)) (if (pair? gB408f@x) (begin (gB4091@f (car gB408f@x)) (gB4091@f (cdr gB408f@x))) (if (vector? gB408f@x) (vector-for-each gB4091@f gB408f@x) (if (symbol? gB408f@x) (gB319a@syntax-violation '#f '"raw symbol encountered in output of macro" gB408a@expr gB408f@x) (void)))) (void))) (gB2e9d@add-mark (gB2e95@gen-mark) gB408d@out gB408a@expr))))) (set! gB4b9b@gB30d0@do-macro-call gB30d0@do-macro-call) (set! gB30d2@chi-macro (lambda (gB4093@p gB4094@e) (gB30d0@do-macro-call (gB30cc@macro-transformer gB4093@p) gB4094@e))) (set! gB4b9c@gB30d2@chi-macro gB30d2@chi-macro) (set! gB30d4@chi-local-macro (lambda (gB4097@p gB4098@e) (gB30d0@do-macro-call (gB30ce@local-macro-transformer gB4097@p) gB4098@e))) (set! gB4b9d@gB30d4@chi-local-macro gB30d4@chi-local-macro) (set! gB30d6@chi-global-macro (lambda (gB409b@p gB409c@e) (let ((gB409f@lib (car gB409b@p)) (gB40a0@loc (cdr gB409b@p))) (begin (gB2cd0@gB2b1f@visit-library gB409f@lib) (let ((gB40a3@x (symbol-value gB40a0@loc))) (let ((gB40a5@transformer (if (procedure? gB40a3@x) gB40a3@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" gB40a3@x)))) (gB30d0@do-macro-call gB40a5@transformer gB409c@e))))))) (set! gB4b9e@gB30d6@chi-global-macro gB30d6@chi-global-macro) (set! gB30d8@chi-expr* (lambda (gB40a7@e* gB40a8@r gB40a9@mr) (if (null? gB40a7@e*) '() (let ((gB40ad@e (gB30dc@chi-expr (car gB40a7@e*) gB40a8@r gB40a9@mr))) (cons gB40ad@e (gB30d8@chi-expr* (cdr gB40a7@e*) gB40a8@r gB40a9@mr)))))) (set! gB4b9f@gB30d8@chi-expr* gB30d8@chi-expr*) (set! gB30da@chi-application (lambda (gB40af@e gB40b0@r gB40b1@mr) (let ((gB40b5@t gB40af@e)) (let ((gB40b7@ls/false (gB30ba@syntax-dispatch gB40b5@t '(any . each-any)))) (if gB40b7@ls/false (apply (lambda (gB40b9@rator gB40ba@rands) (let ((gB40bd@rator (gB30dc@chi-expr gB40b9@rator gB40b0@r gB40b1@mr))) (cons gB40bd@rator (gB30d8@chi-expr* gB40ba@rands gB40b0@r gB40b1@mr)))) gB40b7@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB40b5@t)))))) (set! gB4ba0@gB30da@chi-application gB30da@chi-application) (set! gB30dc@chi-expr (lambda (gB40bf@e gB40c0@r gB40c1@mr) (call-with-values (lambda () (gB2ed5@syntax-type gB40bf@e gB40c0@r)) (lambda (gB40cb@gB40c6 gB40cc@gB40c8 gB40cd@gB40ca) (let ((gB40d1@kwd gB40cd@gB40ca) (gB40d2@value gB40cc@gB40c8) (gB40d3@type gB40cb@gB40c6)) (let ((gB40d7@t gB40d3@type)) (if (memv gB40d7@t '(core-macro)) (let ((gB40d9@transformer (gB30c8@core-macro-transformer gB40d2@value))) (gB40d9@transformer gB40bf@e gB40c0@r gB40c1@mr)) (if (memv gB40d7@t '(global)) (let ((gB40db@lib (car gB40d2@value))) (let ((gB40dd@loc (cdr gB40d2@value))) (begin ((gB3122@inv-collector) gB40db@lib) gB40dd@loc))) (if (memv gB40d7@t '(core-prim)) (let ((gB40df@name gB40d2@value)) (list 'primitive gB40df@name)) (if (memv gB40d7@t '(call)) (gB30da@chi-application gB40bf@e gB40c0@r gB40c1@mr) (if (memv gB40d7@t '(lexical)) (let ((gB40e1@lex (gB3044@lexical-var gB40d2@value))) gB40e1@lex) (if (memv gB40d7@t '(global-macro global-macro!)) (gB30dc@chi-expr (gB30d6@chi-global-macro gB40d2@value gB40bf@e) gB40c0@r gB40c1@mr) (if (memv gB40d7@t '(local-macro local-macro!)) (gB30dc@chi-expr (gB30d4@chi-local-macro gB40d2@value gB40bf@e) gB40c0@r gB40c1@mr) (if (memv gB40d7@t '(macro macro!)) (gB30dc@chi-expr (gB30d2@chi-macro gB40d2@value gB40bf@e) gB40c0@r gB40c1@mr) (if (memv gB40d7@t '(constant)) (let ((gB40e3@datum gB40d2@value)) (list 'quote gB40e3@datum)) (if (memv gB40d7@t '(set!)) (gB30de@chi-set! gB40bf@e gB40c0@r gB40c1@mr) (if (memv gB40d7@t '(begin)) (let ((gB40e5@t gB40bf@e)) (let ((gB40e7@ls/false (gB30ba@syntax-dispatch gB40e5@t '(_ any . each-any)))) (if gB40e7@ls/false (apply (lambda (gB40e9@x gB40ea@x*) (gB2e18@gB2d78@build-sequence '#f (gB30d8@chi-expr* (cons gB40e9@x gB40ea@x*) gB40c0@r gB40c1@mr))) gB40e7@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB40e5@t)))) (if (memv gB40d7@t '(let-syntax letrec-syntax)) (let ((gB40ed@t gB40bf@e)) (let ((gB40ef@ls/false (gB30ba@syntax-dispatch gB40ed@t '(_ #(each (any any)) any . each-any)))) (if (and gB40ef@ls/false (apply (lambda (gB40f1@xlhs* gB40f2@xrhs* gB40f3@xbody gB40f4@xbody*) (if (not (gB2ebb@valid-bound-ids? gB40f1@xlhs*)) (gB319a@syntax-violation '#f '"invalid identifiers" gB40bf@e) (void))) gB40ef@ls/false)) (apply (lambda (gB40f9@xlhs* gB40fa@xrhs* gB40fb@xbody gB40fc@xbody*) (let ((gB4101@xlab* (map gB2e3f@gen-label gB40f9@xlhs*))) (let ((gB4103@xrib (gB2e73@make-full-rib gB40f9@xlhs* gB4101@xlab*))) (let ((gB4105@xb* (map (lambda (gB4107@x) (gB2eeb@make-eval-transformer (gB3114@expand-transformer (if (eq? gB40d3@type 'let-syntax) gB4107@x (gB2e9f@add-subst gB4103@xrib gB4107@x)) gB40c1@mr))) gB40fa@xrhs*))) (gB2e18@gB2d78@build-sequence '#f (gB30d8@chi-expr* (map (lambda (gB4109@x) (gB2e9f@add-subst gB4103@xrib gB4109@x)) (cons gB40fb@xbody gB40fc@xbody*)) (append (map cons gB4101@xlab* gB4105@xb*) gB40c0@r) (append (map cons gB4101@xlab* gB4105@xb*) gB40c1@mr))))))) gB40ef@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB40ed@t)))) (if (memv gB40d7@t '(displaced-lexical)) (gB319a@syntax-violation '#f '"identifier out of context" gB40bf@e) (if (memv gB40d7@t '(syntax)) (gB319a@syntax-violation '#f '"reference to pattern variable outside a syntax form" gB40bf@e) (if (memv gB40d7@t '(define define-syntax module import library)) (gB319a@syntax-violation '#f (string-append (let ((gB410b@t gB40d3@type)) (if (memv gB410b@t '(define)) '"a definition" (if (memv gB410b@t '(define-syntax)) '"a define-syntax" (if (memv gB410b@t '(module)) '"a module definition" (if (memv gB410b@t '(library)) '"a library definition" (if (memv gB410b@t '(import)) '"an import declaration" (if (memv gB410b@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") gB40bf@e) (if (memv gB40d7@t '(mutable)) (gB319a@syntax-violation '#f '"attempt to reference an unexportable variable" gB40bf@e) (gB319a@syntax-violation '#f '"invalid expression" gB40bf@e))))))))))))))))))))))) (set! gB4ba1@gB30dc@chi-expr gB30dc@chi-expr) (set! gB30de@chi-set! (lambda (gB410d@e gB410e@r gB410f@mr) (let ((gB4113@t gB410d@e)) (let ((gB4115@ls/false (gB30ba@syntax-dispatch gB4113@t '(_ any any)))) (if (and gB4115@ls/false (apply (lambda (gB4117@x gB4118@v) (gB2eb3@id? gB4117@x)) gB4115@ls/false)) (apply (lambda (gB411b@x gB411c@v) (call-with-values (lambda () (gB2ed5@syntax-type gB411b@x gB410e@r)) (lambda (gB4125@gB4120 gB4126@gB4122 gB4127@gB4124) (let ((gB412b@kwd gB4127@gB4124) (gB412c@value gB4126@gB4122) (gB412d@type gB4125@gB4120)) (let ((gB4131@t gB412d@type)) (if (memv gB4131@t '(lexical)) (begin (gB3048@set-lexical-mutable! gB412c@value '#t) (list 'set! (gB3044@lexical-var gB412c@value) (gB30dc@chi-expr gB411c@v gB410e@r gB410f@mr))) (if (memv gB4131@t '(core-prim)) (gB319a@syntax-violation '#f '"cannot modify imported core primitive" gB410d@e) (if (memv gB4131@t '(global)) (gB319a@syntax-violation '#f '"attempt to modify imported binding" gB410d@e) (if (memv gB4131@t '(global-macro!)) (gB30dc@chi-expr (gB30d6@chi-global-macro gB412c@value gB410d@e) gB410e@r gB410f@mr) (if (memv gB4131@t '(local-macro!)) (gB30dc@chi-expr (gB30d4@chi-local-macro gB412c@value gB410d@e) gB410e@r gB410f@mr) (if (memv gB4131@t '(mutable)) (gB319a@syntax-violation '#f '"attempt to assign to an unexportable variable" gB410d@e) (gB319a@syntax-violation '#f '"invalid syntax" gB410d@e)))))))))))) gB4115@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB4113@t)))))) (set! gB4ba2@gB30de@chi-set! gB30de@chi-set!) (set! gB30e0@verify-formals (lambda (gB4133@fmls gB4134@stx) (let ((gB4137@t gB4133@fmls)) (let ((gB4139@ls/false (gB30ba@syntax-dispatch gB4137@t 'each-any))) (if gB4139@ls/false (apply (lambda (gB413b@x*) (if (not (gB2ebb@valid-bound-ids? gB413b@x*)) (gB3074@invalid-fmls-error gB4134@stx gB4133@fmls) (void))) gB4139@ls/false) (let ((gB413d@t gB4137@t)) (let ((gB413f@ls/false (gB30ba@syntax-dispatch gB413d@t '#(each+ any () any)))) (if gB413f@ls/false (apply (lambda (gB4141@x* gB4142@x) (if (not (gB2ebb@valid-bound-ids? (cons gB4142@x gB4141@x*))) (gB3074@invalid-fmls-error gB4134@stx gB4133@fmls) (void))) gB413f@ls/false) (let ((gB4145@t gB413d@t)) (let ((gB4147@ls/false (gB30ba@syntax-dispatch gB4145@t '_))) (if gB4147@ls/false (apply (lambda () (gB319a@syntax-violation '#f '"invalid syntax" gB4134@stx)) gB4147@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB4145@t)))))))))))) (set! gB4ba3@gB30e0@verify-formals gB30e0@verify-formals) (set! gB30e2@chi-lambda-clause (lambda (gB4149@stx gB414a@fmls gB414b@body* gB414c@r gB414d@mr) (let ((gB4153@t gB414a@fmls)) (let ((gB4155@ls/false (gB30ba@syntax-dispatch gB4153@t 'each-any))) (if gB4155@ls/false (apply (lambda (gB4157@x*) (begin (gB30e0@verify-formals gB414a@fmls gB4149@stx) (let ((gB4159@lex* (map gB2e3b@gen-lexical gB4157@x*)) (gB415a@lab* (map gB2e3f@gen-label gB4157@x*))) (values gB4159@lex* (gB30f2@chi-internal (gB2e9f@add-subst (gB2e73@make-full-rib gB4157@x* gB415a@lab*) gB414b@body*) (gB304c@add-lexicals gB415a@lab* gB4159@lex* gB414c@r) gB414d@mr))))) gB4155@ls/false) (let ((gB415d@t gB4153@t)) (let ((gB415f@ls/false (gB30ba@syntax-dispatch gB415d@t '#(each+ any () any)))) (if gB415f@ls/false (apply (lambda (gB4161@x* gB4162@x) (begin (gB30e0@verify-formals gB414a@fmls gB4149@stx) (let ((gB4165@lex* (map gB2e3b@gen-lexical gB4161@x*)) (gB4166@lab* (map gB2e3f@gen-label gB4161@x*)) (gB4167@lex (gB2e3b@gen-lexical gB4162@x)) (gB4168@lab (gB2e3f@gen-label gB4162@x))) (values (append gB4165@lex* gB4167@lex) (gB30f2@chi-internal (gB2e9f@add-subst (gB2e73@make-full-rib (cons gB4162@x gB4161@x*) (cons gB4168@lab gB4166@lab*)) gB414b@body*) (gB304c@add-lexicals (cons gB4168@lab gB4166@lab*) (cons gB4167@lex gB4165@lex*) gB414c@r) gB414d@mr))))) gB415f@ls/false) (let ((gB416d@t gB415d@t)) (let ((gB416f@ls/false (gB30ba@syntax-dispatch gB416d@t '_))) (if gB416f@ls/false (apply (lambda () (gB319a@syntax-violation '#f '"invalid syntax" gB414a@fmls)) gB416f@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB416d@t)))))))))))) (set! gB4ba4@gB30e2@chi-lambda-clause gB30e2@chi-lambda-clause) (set! gB30e4@chi-lambda-clause* (lambda (gB4171@stx gB4172@fmls* gB4173@body** gB4174@r gB4175@mr) (if (null? gB4172@fmls*) (values '() '()) (call-with-values (lambda () (gB30e2@chi-lambda-clause gB4171@stx (car gB4172@fmls*) (car gB4173@body**) gB4174@r gB4175@mr)) (lambda (gB417f@gB417c gB4180@gB417e) (let ((gB4183@b gB4180@gB417e) (gB4184@a gB417f@gB417c)) (call-with-values (lambda () (gB30e4@chi-lambda-clause* gB4171@stx (cdr gB4172@fmls*) (cdr gB4173@body**) gB4174@r gB4175@mr)) (lambda (gB418b@gB4188 gB418c@gB418a) (let ((gB418f@b* gB418c@gB418a) (gB4190@a* gB418b@gB4188)) (values (cons gB4184@a gB4190@a*) (cons gB4183@b gB418f@b*))))))))))) (set! gB4ba5@gB30e4@chi-lambda-clause* gB30e4@chi-lambda-clause*) (set! gB30e6@chi-defun (lambda (gB4193@x gB4194@r gB4195@mr) (let ((gB4199@fmls (car gB4193@x)) (gB419a@body* (cdr gB4193@x))) (call-with-values (lambda () (gB30e2@chi-lambda-clause gB4199@fmls gB4199@fmls gB419a@body* gB4194@r gB4195@mr)) (lambda (gB41a1@gB419e gB41a2@gB41a0) (let ((gB41a5@body gB41a2@gB41a0) (gB41a6@fmls gB41a1@gB419e)) (gB2e16@gB2d48@build-lambda '#f gB41a6@fmls gB41a5@body))))))) (set! gB4ba6@gB30e6@chi-defun gB30e6@chi-defun) (set! gB30e8@chi-rhs (lambda (gB41a9@rhs gB41aa@r gB41ab@mr) (let ((gB41af@t (car gB41a9@rhs))) (if (memv gB41af@t '(defun)) (gB30e6@chi-defun (cdr gB41a9@rhs) gB41aa@r gB41ab@mr) (if (memv gB41af@t '(expr)) (let ((gB41b1@expr (cdr gB41a9@rhs))) (gB30dc@chi-expr gB41b1@expr gB41aa@r gB41ab@mr)) (if (memv gB41af@t '(top-expr)) (let ((gB41b3@expr (cdr gB41a9@rhs))) (gB2e18@gB2d78@build-sequence '#f (list (gB30dc@chi-expr gB41b3@expr gB41aa@r gB41ab@mr) (gB2e19@gB2d7a@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" gB41a9@rhs))))))) (set! gB4ba7@gB30e8@chi-rhs gB30e8@chi-rhs) (set! gB30ea@expand-interaction-rhs*/init* (lambda (gB41b5@lhs* gB41b6@rhs* gB41b7@init* gB41b8@r gB41b9@mr) (let gB41c3@f ((gB41bf@lhs* gB41b5@lhs*) (gB41c0@rhs* gB41b6@rhs*)) (if (null? gB41bf@lhs*) (map (lambda (gB41c5@x) (gB30dc@chi-expr gB41c5@x gB41b8@r gB41b9@mr)) gB41b7@init*) (let ((gB41c7@lhs (car gB41bf@lhs*)) (gB41c8@rhs (car gB41c0@rhs*))) (let ((gB41cb@t (car gB41c8@rhs))) (if (memv gB41cb@t '(defun)) (let ((gB41cd@rhs (gB30e6@chi-defun (cdr gB41c8@rhs) gB41b8@r gB41b9@mr))) (cons (list 'set! gB41c7@lhs gB41cd@rhs) (gB41c3@f (cdr gB41bf@lhs*) (cdr gB41c0@rhs*)))) (if (memv gB41cb@t '(expr)) (let ((gB41cf@rhs (gB30dc@chi-expr (cdr gB41c8@rhs) gB41b8@r gB41b9@mr))) (cons (list 'set! gB41c7@lhs gB41cf@rhs) (gB41c3@f (cdr gB41bf@lhs*) (cdr gB41c0@rhs*)))) (if (memv gB41cb@t '(top-expr)) (let ((gB41d1@e (gB30dc@chi-expr (cdr gB41c8@rhs) gB41b8@r gB41b9@mr))) (cons gB41d1@e (gB41c3@f (cdr gB41bf@lhs*) (cdr gB41c0@rhs*)))) (error 'expand-interaction '"invallid" gB41c8@rhs)))))))))) (set! gB4ba8@gB30ea@expand-interaction-rhs*/init* gB30ea@expand-interaction-rhs*/init*) (set! gB30ec@chi-rhs* (lambda (gB41d3@rhs* gB41d4@r gB41d5@mr) (let gB41db@f ((gB41d9@ls gB41d3@rhs*)) (if (null? gB41d9@ls) '() (let ((gB41dd@a (gB30e8@chi-rhs (car gB41d9@ls) gB41d4@r gB41d5@mr))) (cons gB41dd@a (gB41db@f (cdr gB41d9@ls)))))))) (set! gB4ba9@gB30ec@chi-rhs* gB30ec@chi-rhs*) (set! gB30ee@find-bound=? (lambda (gB41df@x gB41e0@lhs* gB41e1@rhs*) (if (null? gB41e0@lhs*) '#f (if (gB2eb7@bound-id=? gB41df@x (car gB41e0@lhs*)) (car gB41e1@rhs*) (gB30ee@find-bound=? gB41df@x (cdr gB41e0@lhs*) (cdr gB41e1@rhs*)))))) (set! gB4baa@gB30ee@find-bound=? gB30ee@find-bound=?) (set! gB30f0@find-dups (lambda (gB41e5@ls) (let gB41eb@f ((gB41e7@ls gB41e5@ls) (gB41e8@dups '())) (if (null? gB41e7@ls) gB41e8@dups (let ((gB41ed@t (gB30ee@find-bound=? (car gB41e7@ls) (cdr gB41e7@ls) (cdr gB41e7@ls)))) (if gB41ed@t ((lambda (gB41ef@x) (gB41eb@f (cdr gB41e7@ls) (cons (list (car gB41e7@ls) gB41ef@x) gB41e8@dups))) gB41ed@t) (gB41eb@f (cdr gB41e7@ls) gB41e8@dups))))))) (set! gB4bab@gB30f0@find-dups gB30f0@find-dups) (set! gB30f2@chi-internal (lambda (gB41f1@e* gB41f2@r gB41f3@mr) (let ((gB41f7@rib (gB2e67@make-empty-rib))) (call-with-values (lambda () (gB3112@chi-body* (map (lambda (gB4209@x) (gB2e9f@add-subst gB41f7@rib gB4209@x)) (gB2eb1@syntax->list gB41f1@e*)) gB41f2@r gB41f3@mr '() '() '() '() '() gB41f7@rib '#f)) (lambda (gB420b@gB41fa gB420c@gB41fc gB420d@gB41fe gB420e@gB4200 gB420f@gB4202 gB4210@gB4204 gB4211@gB4206 gB4212@gB4208) (let ((gB421b@_exp* gB4212@gB4208) (gB421c@kwd* gB4211@gB4206) (gB421d@mod** gB4210@gB4204) (gB421e@rhs* gB420f@gB4202) (gB421f@lex* gB420e@gB4200) (gB4220@mr gB420d@gB41fe) (gB4221@r gB420c@gB41fc) (gB4222@e* gB420b@gB41fa)) (begin (if (null? gB4222@e*) (gB319a@syntax-violation '#f '"no expression in body" gB4222@e*) (void)) (let ((gB422b@init* (gB30d8@chi-expr* (append (apply append (reverse gB421d@mod**)) gB4222@e*) gB4221@r gB4220@mr))) (let ((gB422d@rhs* (gB30ec@chi-rhs* gB421e@rhs* gB4221@r gB4220@mr))) (gB2e1d@gB2d82@build-letrec* '#f (reverse gB421f@lex*) (reverse gB422d@rhs*) (gB2e18@gB2d78@build-sequence '#f gB422b@init*))))))))))) (set! gB4bac@gB30f2@chi-internal gB30f2@chi-internal) (set! gB30f4@parse-module (lambda (gB422f@e) (let ((gB4231@t gB422f@e)) (let ((gB4233@ls/false (gB30ba@syntax-dispatch gB4231@t '(_ each-any . each-any)))) (if gB4233@ls/false (apply (lambda (gB4235@export* gB4236@b*) (begin (if (not (for-all gB2eb3@id? gB4235@export*)) (gB319a@syntax-violation '#f '"module exports must be identifiers" gB422f@e) (void)) (values '#f (list->vector gB4235@export*) gB4236@b*))) gB4233@ls/false) (let ((gB4239@t gB4231@t)) (let ((gB423b@ls/false (gB30ba@syntax-dispatch gB4239@t '(_ any each-any . each-any)))) (if gB423b@ls/false (apply (lambda (gB423d@name gB423e@export* gB423f@b*) (begin (if (not (gB2eb3@id? gB423d@name)) (gB319a@syntax-violation '#f '"module name must be an identifier" gB422f@e) (void)) (if (not (for-all gB2eb3@id? gB423e@export*)) (gB319a@syntax-violation '#f '"module exports must be identifiers" gB422f@e) (void)) (values gB423d@name (list->vector gB423e@export*) gB423f@b*))) gB423b@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB4239@t))))))))) (set! gB4bad@gB30f4@parse-module gB30f4@parse-module) (set! gB30fe@module-interface? (lambda (gB4243@x) (and (simple-struct? gB4243@x) (eq? (simple-struct-name gB4243@x) 'module-interface)))) (set! gB4bae@gB30fe@module-interface? gB30fe@module-interface?) (set! gB3100@module-interface-first-mark (lambda (gB4245@x) (simple-struct-ref gB4245@x '0))) (set! gB4baf@gB3100@module-interface-first-mark gB3100@module-interface-first-mark) (set! gB3102@set-module-interface-first-mark! (lambda (gB4247@x gB4248@val) (simple-struct-set! gB4247@x '0 gB4248@val))) (set! gB4bb0@gB3102@set-module-interface-first-mark! gB3102@set-module-interface-first-mark!) (set! gB3104@module-interface-exp-id-vec (lambda (gB424b@x) (simple-struct-ref gB424b@x '1))) (set! gB4bb1@gB3104@module-interface-exp-id-vec gB3104@module-interface-exp-id-vec) (set! gB3106@set-module-interface-exp-id-vec! (lambda (gB424d@x gB424e@val) (simple-struct-set! gB424d@x '1 gB424e@val))) (set! gB4bb2@gB3106@set-module-interface-exp-id-vec! gB3106@set-module-interface-exp-id-vec!) (set! gB3108@module-interface-exp-lab-vec (lambda (gB4251@x) (simple-struct-ref gB4251@x '2))) (set! gB4bb3@gB3108@module-interface-exp-lab-vec gB3108@module-interface-exp-lab-vec) (set! gB310a@set-module-interface-exp-lab-vec! (lambda (gB4253@x gB4254@val) (simple-struct-set! gB4253@x '2 gB4254@val))) (set! gB4bb4@gB310a@set-module-interface-exp-lab-vec! gB310a@set-module-interface-exp-lab-vec!) (set! gB310c@dummy '3) (set! gB4bb5@gB310c@dummy gB310c@dummy) (set! gB310e@module-interface-exp-id* (lambda (gB4257@iface gB4258@id) (letrec* ((gB425c@diff-marks (lambda (gB4263@ls gB4264@x) (begin (if (null? gB4263@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((gB4267@a (car gB4263@ls))) (if (eq? gB4267@a gB4264@x) '() (cons gB4267@a (gB425c@diff-marks (cdr gB4263@ls) gB4264@x)))))))) (let ((gB425d@diff (gB425c@diff-marks (gB2e85@stx-mark* gB4258@id) (gB3100@module-interface-first-mark gB4257@iface))) (gB425e@id-vec (gB3104@module-interface-exp-id-vec gB4257@iface))) (if (null? gB425d@diff) gB425e@id-vec (vector-map (lambda (gB4261@x) (make-simple-struct 'stx '5 (list (gB2e81@stx-expr gB4261@x) (append gB425d@diff (gB2e85@stx-mark* gB4261@x)) '() '()))) gB425e@id-vec)))))) (set! gB4bb6@gB310e@module-interface-exp-id* gB310e@module-interface-exp-id*) (set! gB3110@chi-internal-module (lambda (gB4269@e gB426a@r gB426b@mr gB426c@lex* gB426d@rhs* gB426e@mod** gB426f@kwd*) (call-with-values (lambda () (gB30f4@parse-module gB4269@e)) (lambda (gB427d@gB4278 gB427e@gB427a gB427f@gB427c) (let ((gB4283@e* gB427f@gB427c) (gB4284@exp-id* gB427e@gB427a) (gB4285@name gB427d@gB4278)) (let ((gB4289@rib (gB2e67@make-empty-rib))) (let ((gB428b@e* (map (lambda (gB428d@x) (gB2e9f@add-subst gB4289@rib gB428d@x)) (gB2eb1@syntax->list gB4283@e*)))) (call-with-values (lambda () (gB3112@chi-body* gB428b@e* gB426a@r gB426b@mr gB426c@lex* gB426d@rhs* gB426e@mod** gB426f@kwd* '() gB4289@rib '#f)) (lambda (gB429f@gB4290 gB42a0@gB4292 gB42a1@gB4294 gB42a2@gB4296 gB42a3@gB4298 gB42a4@gB429a gB42a5@gB429c gB42a6@gB429e) (let ((gB42af@_exp* gB42a6@gB429e) (gB42b0@kwd* gB42a5@gB429c) (gB42b1@mod** gB42a4@gB429a) (gB42b2@rhs* gB42a3@gB4298) (gB42b3@lex* gB42a2@gB4296) (gB42b4@mr gB42a1@gB4294) (gB42b5@r gB42a0@gB4292) (gB42b6@e* gB429f@gB4290)) (let ((gB42bf@exp-lab* (vector-map (lambda (gB42c3@x) (or (gB2ec9@id->label (make-simple-struct 'stx '5 (list (gB2eb5@id->sym gB42c3@x) (gB2e85@stx-mark* gB42c3@x) (list gB4289@rib) '()))) (gB319a@syntax-violation '#f '"cannot find module export" gB42c3@x))) gB4284@exp-id*)) (gB42c0@mod** (cons gB42b6@e* gB42b1@mod**))) (if (not gB4285@name) (values gB42b3@lex* gB42b2@rhs* gB4284@exp-id* gB42bf@exp-lab* gB42b5@r gB42b4@mr gB42c0@mod** gB42b0@kwd*) (let ((gB42c5@lab (gB2e3f@gen-label 'module)) (gB42c6@iface (make-simple-struct 'module-interface '4 (list (car (gB2e85@stx-mark* gB4285@name)) (vector-map (lambda (gB42c9@x) (make-simple-struct 'stx '5 (list (gB2e81@stx-expr gB42c9@x) (gB2e85@stx-mark* gB42c9@x) '() '()))) gB4284@exp-id*) gB42bf@exp-lab*)))) (values gB42b3@lex* gB42b2@rhs* (vector gB4285@name) (vector gB42c5@lab) (cons (cons gB42c5@lab (cons '$module gB42c6@iface)) gB42b5@r) (cons (cons gB42c5@lab (cons '$module gB42c6@iface)) gB42b4@mr) gB42c0@mod** gB42b0@kwd*)))))))))))))) (set! gB4bb7@gB3110@chi-internal-module gB3110@chi-internal-module) (set! gB3112@chi-body* (lambda (gB42cb@e* gB42cc@r gB42cd@mr gB42ce@lex* gB42cf@rhs* gB42d0@mod** gB42d1@kwd* gB42d2@exp* gB42d3@rib gB42d4@top?) (if (null? gB42cb@e*) (values gB42cb@e* gB42cc@r gB42cd@mr gB42ce@lex* gB42cf@rhs* gB42d0@mod** gB42d1@kwd* gB42d2@exp*) (let ((gB42df@e (car gB42cb@e*))) (call-with-values (lambda () (gB2ed5@syntax-type gB42df@e gB42cc@r)) (lambda (gB42e7@gB42e2 gB42e8@gB42e4 gB42e9@gB42e6) (let ((gB42ed@kwd gB42e9@gB42e6) (gB42ee@value gB42e8@gB42e4) (gB42ef@type gB42e7@gB42e2)) (let ((gB42f3@kwd* (if (gB2eb3@id? gB42ed@kwd) (cons gB42ed@kwd gB42d1@kwd*) gB42d1@kwd*))) (let ((gB42f5@t gB42ef@type)) (if (memv gB42f5@t '(define)) (call-with-values (lambda () (gB303c@parse-define gB42df@e)) (lambda (gB42fb@gB42f8 gB42fc@gB42fa) (let ((gB42ff@rhs gB42fc@gB42fa) (gB4300@id gB42fb@gB42f8)) (begin (if (gB2ebf@bound-id-member? gB4300@id gB42f3@kwd*) (gB319a@syntax-violation '#f '"cannot redefine keyword" gB42df@e) (void)) (call-with-values (lambda () (gB2e43@gen-define-label+loc gB4300@id gB42d3@rib)) (lambda (gB4307@gB4304 gB4308@gB4306) (let ((gB430b@lex gB4308@gB4306) (gB430c@lab gB4307@gB4304)) (begin (gB2e69@extend-rib! gB42d3@rib gB4300@id gB430c@lab) (gB3112@chi-body* (cdr gB42cb@e*) (gB304a@add-lexical gB430c@lab gB430b@lex gB42cc@r) gB42cd@mr (cons gB430b@lex gB42ce@lex*) (cons gB42ff@rhs gB42cf@rhs*) gB42d0@mod** gB42f3@kwd* gB42d2@exp* gB42d3@rib gB42d4@top?))))))))) (if (memv gB42f5@t '(define-syntax)) (call-with-values (lambda () (gB303e@parse-define-syntax gB42df@e)) (lambda (gB4313@gB4310 gB4314@gB4312) (let ((gB4317@rhs gB4314@gB4312) (gB4318@id gB4313@gB4310)) (begin (if (gB2ebf@bound-id-member? gB4318@id gB42f3@kwd*) (gB319a@syntax-violation '#f '"cannot redefine keyword" gB42df@e) (void)) (let ((gB431b@lab (gB2e45@gen-define-label gB4318@id gB42d3@rib)) (gB431c@expanded-rhs (gB3114@expand-transformer gB4317@rhs gB42cd@mr))) (begin (gB2e69@extend-rib! gB42d3@rib gB4318@id gB431b@lab) (let ((gB431f@b (gB2eeb@make-eval-transformer gB431c@expanded-rhs))) (gB3112@chi-body* (cdr gB42cb@e*) (cons (cons gB431b@lab gB431f@b) gB42cc@r) (cons (cons gB431b@lab gB431f@b) gB42cd@mr) gB42ce@lex* gB42cf@rhs* gB42d0@mod** gB42f3@kwd* gB42d2@exp* gB42d3@rib gB42d4@top?)))))))) (if (memv gB42f5@t '(let-syntax letrec-syntax)) (let ((gB4321@t gB42df@e)) (let ((gB4323@ls/false (gB30ba@syntax-dispatch gB4321@t '(_ #(each (any any)) . each-any)))) (if (and gB4323@ls/false (apply (lambda (gB4325@xlhs* gB4326@xrhs* gB4327@xbody*) (if (not (gB2ebb@valid-bound-ids? gB4325@xlhs*)) (gB319a@syntax-violation '#f '"invalid identifiers" gB42df@e) (void))) gB4323@ls/false)) (apply (lambda (gB432b@xlhs* gB432c@xrhs* gB432d@xbody*) (let ((gB4331@xlab* (map gB2e3f@gen-label gB432b@xlhs*))) (let ((gB4333@xrib (gB2e73@make-full-rib gB432b@xlhs* gB4331@xlab*))) (let ((gB4335@xb* (map (lambda (gB4337@x) (gB2eeb@make-eval-transformer (gB3114@expand-transformer (if (eq? gB42ef@type 'let-syntax) gB4337@x (gB2e9f@add-subst gB4333@xrib gB4337@x)) gB42cd@mr))) gB432c@xrhs*))) (gB3112@chi-body* (append (map (lambda (gB4339@x) (gB2e9f@add-subst gB4333@xrib gB4339@x)) gB432d@xbody*) (cdr gB42cb@e*)) (append (map cons gB4331@xlab* gB4335@xb*) gB42cc@r) (append (map cons gB4331@xlab* gB4335@xb*) gB42cd@mr) gB42ce@lex* gB42cf@rhs* gB42d0@mod** gB42f3@kwd* gB42d2@exp* gB42d3@rib gB42d4@top?))))) gB4323@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB4321@t)))) (if (memv gB42f5@t '(begin)) (let ((gB433b@t gB42df@e)) (let ((gB433d@ls/false (gB30ba@syntax-dispatch gB433b@t '(_ . each-any)))) (if gB433d@ls/false (apply (lambda (gB433f@x*) (gB3112@chi-body* (append gB433f@x* (cdr gB42cb@e*)) gB42cc@r gB42cd@mr gB42ce@lex* gB42cf@rhs* gB42d0@mod** gB42f3@kwd* gB42d2@exp* gB42d3@rib gB42d4@top?)) gB433d@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB433b@t)))) (if (memv gB42f5@t '(global-macro global-macro!)) (gB3112@chi-body* (cons (gB2e9f@add-subst gB42d3@rib (gB30d6@chi-global-macro gB42ee@value gB42df@e)) (cdr gB42cb@e*)) gB42cc@r gB42cd@mr gB42ce@lex* gB42cf@rhs* gB42d0@mod** gB42f3@kwd* gB42d2@exp* gB42d3@rib gB42d4@top?) (if (memv gB42f5@t '(local-macro local-macro!)) (gB3112@chi-body* (cons (gB2e9f@add-subst gB42d3@rib (gB30d4@chi-local-macro gB42ee@value gB42df@e)) (cdr gB42cb@e*)) gB42cc@r gB42cd@mr gB42ce@lex* gB42cf@rhs* gB42d0@mod** gB42f3@kwd* gB42d2@exp* gB42d3@rib gB42d4@top?) (if (memv gB42f5@t '(macro macro!)) (gB3112@chi-body* (cons (gB2e9f@add-subst gB42d3@rib (gB30d2@chi-macro gB42ee@value gB42df@e)) (cdr gB42cb@e*)) gB42cc@r gB42cd@mr gB42ce@lex* gB42cf@rhs* gB42d0@mod** gB42f3@kwd* gB42d2@exp* gB42d3@rib gB42d4@top?) (if (memv gB42f5@t '(module)) (call-with-values (lambda () (gB3110@chi-internal-module gB42df@e gB42cc@r gB42cd@mr gB42ce@lex* gB42cf@rhs* gB42d0@mod** gB42f3@kwd*)) (lambda (gB4351@gB4342 gB4352@gB4344 gB4353@gB4346 gB4354@gB4348 gB4355@gB434a gB4356@gB434c gB4357@gB434e gB4358@gB4350) (let ((gB4361@kwd* gB4358@gB4350) (gB4362@mod** gB4357@gB434e) (gB4363@mr gB4356@gB434c) (gB4364@r gB4355@gB434a) (gB4365@m-exp-lab* gB4354@gB4348) (gB4366@m-exp-id* gB4353@gB4346) (gB4367@rhs* gB4352@gB4344) (gB4368@lex* gB4351@gB4342)) (begin (vector-for-each (lambda (gB4371@id gB4372@lab) (gB2e69@extend-rib! gB42d3@rib gB4371@id gB4372@lab)) gB4366@m-exp-id* gB4365@m-exp-lab*) (gB3112@chi-body* (cdr gB42cb@e*) gB4364@r gB4363@mr gB4368@lex* gB4367@rhs* gB4362@mod** gB4361@kwd* gB42d2@exp* gB42d3@rib gB42d4@top?))))) (if (memv gB42f5@t '(library)) (begin (gB317c@library-expander (gB2ec7@stx->datum gB42df@e)) (gB3112@chi-body* (cdr gB42cb@e*) gB42cc@r gB42cd@mr gB42ce@lex* gB42cf@rhs* gB42d0@mod** gB42f3@kwd* gB42d2@exp* gB42d3@rib gB42d4@top?)) (if (memv gB42f5@t '(export)) (let ((gB4375@t gB42df@e)) (let ((gB4377@ls/false (gB30ba@syntax-dispatch gB4375@t '(_ . each-any)))) (if gB4377@ls/false (apply (lambda (gB4379@exp-decl*) (gB3112@chi-body* (cdr gB42cb@e*) gB42cc@r gB42cd@mr gB42ce@lex* gB42cf@rhs* gB42d0@mod** gB42f3@kwd* (append gB4379@exp-decl* gB42d2@exp*) gB42d3@rib gB42d4@top?)) gB4377@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB4375@t)))) (if (memv gB42f5@t '(import)) (letrec* ((gB437c@module-import? (lambda (gB43cf@e) (let ((gB43d1@t gB43cf@e)) (let ((gB43d3@ls/false (gB30ba@syntax-dispatch gB43d1@t '(_ any)))) (if (and gB43d3@ls/false (apply (lambda (gB43d5@id) (gB2eb3@id? gB43d5@id)) gB43d3@ls/false)) (apply (lambda (gB43d7@id) '#t) gB43d3@ls/false) (let ((gB43d9@t gB43d1@t)) (let ((gB43db@ls/false (gB30ba@syntax-dispatch gB43d9@t '(_ . each-any)))) (if gB43db@ls/false (apply (lambda (gB43dd@imp*) '#f) gB43db@ls/false) (let ((gB43df@t gB43d9@t)) (let ((gB43e1@ls/false (gB30ba@syntax-dispatch gB43df@t '_))) (if gB43e1@ls/false (apply (lambda () (gB319a@syntax-violation '#f '"malformed import form" gB43cf@e)) gB43e1@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB43df@t)))))))))))) (gB437e@module-import (lambda (gB43ad@e gB43ae@r) (let ((gB43b1@t gB43ad@e)) (let ((gB43b3@ls/false (gB30ba@syntax-dispatch gB43b1@t '(_ any)))) (if (and gB43b3@ls/false (apply (lambda (gB43b5@id) (gB2eb3@id? gB43b5@id)) gB43b3@ls/false)) (apply (lambda (gB43b7@id) (call-with-values (lambda () (gB2ed5@syntax-type gB43b7@id gB43ae@r)) (lambda (gB43bf@gB43ba gB43c0@gB43bc gB43c1@gB43be) (let ((gB43c5@kwd gB43c1@gB43be) (gB43c6@value gB43c0@gB43bc) (gB43c7@type gB43bf@gB43ba)) (let ((gB43cb@t gB43c7@type)) (if (memv gB43cb@t '($module)) (let ((gB43cd@iface gB43c6@value)) (values (gB310e@module-interface-exp-id* gB43cd@iface gB43b7@id) (gB3108@module-interface-exp-lab-vec gB43cd@iface))) (gB319a@syntax-violation '#f '"invalid import" gB43ad@e))))))) gB43b3@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB43b1@t)))))) (gB4380@library-import (lambda (gB4391@e) (let ((gB4393@t gB4391@e)) (let ((gB4395@ls/false (gB30ba@syntax-dispatch gB4393@t '(any . each-any)))) (if gB4395@ls/false (apply (lambda (gB4397@ctxt gB4398@imp*) (call-with-values (lambda () (gB311c@parse-import-spec* (gB31a0@syntax->datum gB4398@imp*))) (lambda (gB439f@gB439c gB43a0@gB439e) (let ((gB43a3@subst-labels gB43a0@gB439e) (gB43a4@subst-names gB439f@gB439c)) (values (vector-map (lambda (gB43a7@name) (gB2e93@datum->stx gB4397@ctxt gB43a7@name)) gB43a4@subst-names) gB43a3@subst-labels))))) gB4395@ls/false) (let ((gB43a9@t gB4393@t)) (let ((gB43ab@ls/false (gB30ba@syntax-dispatch gB43a9@t '_))) (if gB43ab@ls/false (apply (lambda () (gB319a@syntax-violation '#f '"invalid import form" gB4391@e)) gB43ab@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB43a9@t)))))))))) (begin (call-with-values (lambda () (if (gB437c@module-import? gB42df@e) (gB437e@module-import gB42df@e gB42cc@r) (gB4380@library-import gB42df@e))) (lambda (gB4385@gB4382 gB4386@gB4384) (let ((gB4389@lab* gB4386@gB4384) (gB438a@id* gB4385@gB4382)) (vector-for-each (lambda (gB438d@id gB438e@lab) (gB2e69@extend-rib! gB42d3@rib gB438d@id gB438e@lab)) gB438a@id* gB4389@lab*)))) (gB3112@chi-body* (cdr gB42cb@e*) gB42cc@r gB42cd@mr gB42ce@lex* gB42cf@rhs* gB42d0@mod** gB42f3@kwd* gB42d2@exp* gB42d3@rib gB42d4@top?))) (if gB42d4@top? (gB3112@chi-body* (cdr gB42cb@e*) gB42cc@r gB42cd@mr (cons (gB2e3b@gen-lexical 'dummy) gB42ce@lex*) (cons (cons 'top-expr gB42df@e) gB42cf@rhs*) gB42d0@mod** gB42f3@kwd* gB42d2@exp* gB42d3@rib gB42d4@top?) (values gB42cb@e* gB42cc@r gB42cd@mr gB42ce@lex* gB42cf@rhs* gB42d0@mod** gB42f3@kwd* gB42d2@exp*)))))))))))))))))))))) (set! gB4bb8@gB3112@chi-body* gB3112@chi-body*) (set! gB3114@expand-transformer (lambda (gB43e3@expr gB43e4@r) (let ((gB43e7@rtc (gB3120@make-collector))) (let ((gB43e9@expanded-rhs (let ((gB43f3@gB43ec gB3122@inv-collector) (gB43f4@gB43ee gB3124@vis-collector) (gB43f5@gB43f0 gB43e7@rtc) (gB43f6@gB43f2 (lambda (gB43fb@x) (values)))) (let ((gB43fd@swap (lambda () (begin (let ((gB43ff@t (gB43f3@gB43ec))) (begin (gB43f3@gB43ec gB43f5@gB43f0) (set! gB43f5@gB43f0 gB43ff@t))) (let ((gB4401@t (gB43f4@gB43ee))) (begin (gB43f4@gB43ee gB43f6@gB43f2) (set! gB43f6@gB43f2 gB4401@t))))))) (dynamic-wind gB43fd@swap (lambda () (gB30dc@chi-expr gB43e3@expr gB43e4@r gB43e4@r)) gB43fd@swap))))) (begin (for-each (let ((gB4403@mark-visit (gB3124@vis-collector))) (lambda (gB4405@x) (begin (gB2ccf@gB2b1d@invoke-library gB4405@x) (gB4403@mark-visit gB4405@x)))) (gB43e7@rtc)) gB43e9@expanded-rhs))))) (set! gB4bb9@gB3114@expand-transformer gB3114@expand-transformer) (set! gB3116@parse-exports (lambda (gB4407@exp*) (let gB440f@f ((gB4409@exp* gB4407@exp*) (gB440a@int* '()) (gB440b@ext* '())) (if (null? gB4409@exp*) (begin (if (not (gB2ebb@valid-bound-ids? gB440b@ext*)) (gB319a@syntax-violation 'export '"invalid exports" (gB30f0@find-dups gB440b@ext*)) (void)) (values (map gB31a0@syntax->datum gB440b@ext*) gB440a@int*)) (let ((gB4411@t (car gB4409@exp*))) (let ((gB4413@ls/false (gB30ba@syntax-dispatch gB4411@t '(any . #(each (any any)))))) (if gB4413@ls/false (apply (lambda (gB4415@rename gB4416@i* gB4417@e*) (begin (if (not (and (eq? (gB31a0@syntax->datum gB4415@rename) 'rename) (for-all gB2eb3@id? gB4416@i*) (for-all gB2eb3@id? gB4417@e*))) (gB319a@syntax-violation 'export '"invalid export specifier" (car gB4409@exp*)) (void)) (gB440f@f (cdr gB4409@exp*) (append gB4416@i* gB440a@int*) (append gB4417@e* gB440b@ext*)))) gB4413@ls/false) (let ((gB441b@t gB4411@t)) (let ((gB441d@ls/false (gB30ba@syntax-dispatch gB441b@t 'any))) (if gB441d@ls/false (apply (lambda (gB441f@ie) (begin (if (not (gB2eb3@id? gB441f@ie)) (gB319a@syntax-violation 'export '"invalid export" gB441f@ie) (void)) (gB440f@f (cdr gB4409@exp*) (cons gB441f@ie gB440a@int*) (cons gB441f@ie gB440b@ext*)))) gB441d@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB441b@t))))))))))) (set! gB4bba@gB3116@parse-exports gB3116@parse-exports) (set! gB3118@parse-library-name (lambda (gB4421@spec) (letrec* ((gB4424@parse (lambda (gB4431@x) (let ((gB4433@t gB4431@x)) (let ((gB4435@ls/false (gB30ba@syntax-dispatch gB4433@t '(each-any)))) (if (and gB4435@ls/false (apply (lambda (gB4437@v*) (for-all (lambda (gB4439@x) (let ((gB443b@x (gB31a0@syntax->datum gB4439@x))) (and (integer? gB443b@x) (exact? gB443b@x)))) gB4437@v*)) gB4435@ls/false)) (apply (lambda (gB443d@v*) (values '() (map gB31a0@syntax->datum gB443d@v*))) gB4435@ls/false) (let ((gB443f@t gB4433@t)) (let ((gB4441@ls/false (gB30ba@syntax-dispatch gB443f@t '(any . any)))) (if (and gB4441@ls/false (apply (lambda (gB4443@x gB4444@rest) (symbol? (gB31a0@syntax->datum gB4443@x))) gB4441@ls/false)) (apply (lambda (gB4447@x gB4448@rest) (call-with-values (lambda () (gB4424@parse gB4448@rest)) (lambda (gB444f@gB444c gB4450@gB444e) (let ((gB4453@v* gB4450@gB444e) (gB4454@x* gB444f@gB444c)) (values (cons (gB31a0@syntax->datum gB4447@x) gB4454@x*) gB4453@v*))))) gB4441@ls/false) (let ((gB4457@t gB443f@t)) (let ((gB4459@ls/false (gB30ba@syntax-dispatch gB4457@t '()))) (if gB4459@ls/false (apply (lambda () (values '() '())) gB4459@ls/false) (let ((gB445b@t gB4457@t)) (let ((gB445d@ls/false (gB30ba@syntax-dispatch gB445b@t '_))) (if gB445d@ls/false (apply (lambda () (gB319a@syntax-violation '#f '"invalid library name" gB4421@spec)) gB445d@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB445b@t)))))))))))))))) (call-with-values (lambda () (gB4424@parse gB4421@spec)) (lambda (gB4429@gB4426 gB442a@gB4428) (let ((gB442d@ver* gB442a@gB4428) (gB442e@name* gB4429@gB4426)) (begin (if (null? gB442e@name*) (gB319a@syntax-violation '#f '"empty library name" gB4421@spec) (void)) (values gB442e@name* gB442d@ver*)))))))) (set! gB4bbb@gB3118@parse-library-name gB3118@parse-library-name) (set! gB311a@parse-library (lambda (gB445f@e) (let ((gB4461@t gB445f@e)) (let ((gB4463@ls/false (gB30ba@syntax-dispatch gB4461@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and gB4463@ls/false (apply (lambda (gB4465@library gB4466@name* gB4467@export gB4468@exp* gB4469@import gB446a@imp* gB446b@b*) (and (eq? (gB31a0@syntax->datum gB4467@export) 'export) (eq? (gB31a0@syntax->datum gB4469@import) 'import) (eq? (gB31a0@syntax->datum gB4465@library) 'library))) gB4463@ls/false)) (apply (lambda (gB4473@library gB4474@name* gB4475@export gB4476@exp* gB4477@import gB4478@imp* gB4479@b*) (values gB4474@name* gB4476@exp* gB4478@imp* gB4479@b*)) gB4463@ls/false) (let ((gB4481@t gB4461@t)) (let ((gB4483@ls/false (gB30ba@syntax-dispatch gB4481@t '_))) (if gB4483@ls/false (apply (lambda () (gB319a@syntax-violation '#f '"malformed library" gB445f@e)) gB4483@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB4481@t))))))))) (set! gB4bbc@gB311a@parse-library gB311a@parse-library) (set! gB311c@parse-import-spec* (letrec* ((gB4486@idsyn? (lambda (gB468f@x) (symbol? (gB31a0@syntax->datum gB468f@x)))) (gB4488@dup-error (lambda (gB468d@name) (gB319a@syntax-violation 'import '"two imports with different bindings" gB468d@name))) (gB448a@merge-substs (lambda (gB467b@s gB467c@subst) (letrec* ((gB4680@insert-to-subst (lambda (gB4681@a gB4682@subst) (let ((gB4685@name (car gB4681@a)) (gB4686@label (cdr gB4681@a))) (let ((gB4689@t (assq gB4685@name gB4682@subst))) (if gB4689@t ((lambda (gB468b@x) (if (eq? (cdr gB468b@x) gB4686@label) gB4682@subst (gB4488@dup-error gB4685@name))) gB4689@t) (cons gB4681@a gB4682@subst))))))) (if (null? gB467b@s) gB467c@subst (gB4680@insert-to-subst (car gB467b@s) (gB448a@merge-substs (cdr gB467b@s) gB467c@subst)))))) (gB448c@exclude* (lambda (gB464b@sym* gB464c@subst) (letrec* ((gB4650@exclude (lambda (gB4669@sym gB466a@subst) (if (null? gB466a@subst) (gB319a@syntax-violation 'import '"cannot rename unbound identifier" gB4669@sym) (if (eq? gB4669@sym (caar gB466a@subst)) (values (cdar gB466a@subst) (cdr gB466a@subst)) (let ((gB466d@a (car gB466a@subst))) (call-with-values (lambda () (gB4650@exclude gB4669@sym (cdr gB466a@subst))) (lambda (gB4673@gB4670 gB4674@gB4672) (let ((gB4677@subst gB4674@gB4672) (gB4678@old gB4673@gB4670)) (values gB4678@old (cons gB466d@a gB4677@subst))))))))))) (if (null? gB464b@sym*) (values '() gB464c@subst) (call-with-values (lambda () (gB4650@exclude (car gB464b@sym*) gB464c@subst)) (lambda (gB4655@gB4652 gB4656@gB4654) (let ((gB4659@subst gB4656@gB4654) (gB465a@old gB4655@gB4652)) (call-with-values (lambda () (gB448c@exclude* (cdr gB464b@sym*) gB4659@subst)) (lambda (gB4661@gB465e gB4662@gB4660) (let ((gB4665@subst gB4662@gB4660) (gB4666@old* gB4661@gB465e)) (values (cons gB465a@old gB4666@old*) gB4665@subst))))))))))) (gB448e@find* (lambda (gB4643@sym* gB4644@subst) (map (lambda (gB4647@x) (let ((gB4649@t (assq gB4647@x gB4644@subst))) (if gB4649@t (cdr gB4649@t) (gB319a@syntax-violation 'import '"cannot find identifier" gB4647@x)))) gB4643@sym*))) (gB4490@rem* (lambda (gB463b@sym* gB463c@subst) (let gB4641@f ((gB463f@subst gB463c@subst)) (if (null? gB463f@subst) '() (if (memq (caar gB463f@subst) gB463b@sym*) (gB4641@f (cdr gB463f@subst)) (cons (car gB463f@subst) (gB4641@f (cdr gB463f@subst)))))))) (gB4492@remove-dups (lambda (gB4639@ls) (if (null? gB4639@ls) '() (if (memq (car gB4639@ls) (cdr gB4639@ls)) (gB4492@remove-dups (cdr gB4639@ls)) (cons (car gB4639@ls) (gB4492@remove-dups (cdr gB4639@ls))))))) (gB4494@parse-library-name (lambda (gB4551@spec) (letrec* ((gB4554@subversion? (lambda (gB4635@x) (let ((gB4637@x (gB31a0@syntax->datum gB4635@x))) (and (integer? gB4637@x) (exact? gB4637@x) (>= gB4637@x '0))))) (gB4556@subversion-pred (lambda (gB45d5@x*) (let ((gB45d7@t gB45d5@x*)) (let ((gB45d9@ls/false (gB30ba@syntax-dispatch gB45d7@t 'any))) (if (and gB45d9@ls/false (apply (lambda (gB45db@n) (gB4554@subversion? gB45db@n)) gB45d9@ls/false)) (apply (lambda (gB45dd@n) (lambda (gB45df@x) (= gB45df@x (gB31a0@syntax->datum gB45dd@n)))) gB45d9@ls/false) (let ((gB45e1@t gB45d7@t)) (let ((gB45e3@ls/false (gB30ba@syntax-dispatch gB45e1@t '(any . each-any)))) (if (and gB45e3@ls/false (apply (lambda (gB45e5@p? gB45e6@sub*) (eq? (gB31a0@syntax->datum gB45e5@p?) 'and)) gB45e3@ls/false)) (apply (lambda (gB45e9@p? gB45ea@sub*) (let ((gB45ed@p* (map gB4556@subversion-pred gB45ea@sub*))) (lambda (gB45ef@x) (for-all (lambda (gB45f1@p) (gB45f1@p gB45ef@x)) gB45ed@p*)))) gB45e3@ls/false) (let ((gB45f3@t gB45e1@t)) (let ((gB45f5@ls/false (gB30ba@syntax-dispatch gB45f3@t '(any . each-any)))) (if (and gB45f5@ls/false (apply (lambda (gB45f7@p? gB45f8@sub*) (eq? (gB31a0@syntax->datum gB45f7@p?) 'or)) gB45f5@ls/false)) (apply (lambda (gB45fb@p? gB45fc@sub*) (let ((gB45ff@p* (map gB4556@subversion-pred gB45fc@sub*))) (lambda (gB4601@x) (exists (lambda (gB4603@p) (gB4603@p gB4601@x)) gB45ff@p*)))) gB45f5@ls/false) (let ((gB4605@t gB45f3@t)) (let ((gB4607@ls/false (gB30ba@syntax-dispatch gB4605@t '(any any)))) (if (and gB4607@ls/false (apply (lambda (gB4609@p? gB460a@sub) (eq? (gB31a0@syntax->datum gB4609@p?) 'not)) gB4607@ls/false)) (apply (lambda (gB460d@p? gB460e@sub) (let ((gB4611@p (gB4556@subversion-pred gB460e@sub))) (lambda (gB4613@x) (not (gB4611@p gB4613@x))))) gB4607@ls/false) (let ((gB4615@t gB4605@t)) (let ((gB4617@ls/false (gB30ba@syntax-dispatch gB4615@t '(any any)))) (if (and gB4617@ls/false (apply (lambda (gB4619@p? gB461a@n) (and (eq? (gB31a0@syntax->datum gB4619@p?) '<=) (gB4554@subversion? gB461a@n))) gB4617@ls/false)) (apply (lambda (gB461d@p? gB461e@n) (lambda (gB4621@x) (<= gB4621@x (gB31a0@syntax->datum gB461e@n)))) gB4617@ls/false) (let ((gB4623@t gB4615@t)) (let ((gB4625@ls/false (gB30ba@syntax-dispatch gB4623@t '(any any)))) (if (and gB4625@ls/false (apply (lambda (gB4627@p? gB4628@n) (and (eq? (gB31a0@syntax->datum gB4627@p?) '>=) (gB4554@subversion? gB4628@n))) gB4625@ls/false)) (apply (lambda (gB462b@p? gB462c@n) (lambda (gB462f@x) (>= gB462f@x (gB31a0@syntax->datum gB462c@n)))) gB4625@ls/false) (let ((gB4631@t gB4623@t)) (let ((gB4633@ls/false (gB30ba@syntax-dispatch gB4631@t '_))) (if gB4633@ls/false (apply (lambda () (gB319a@syntax-violation 'import '"invalid sub-version spec" gB4551@spec gB45d5@x*)) gB4633@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB4631@t)))))))))))))))))))))))) (gB4558@version-pred (lambda (gB4585@x*) (let ((gB4587@t gB4585@x*)) (let ((gB4589@ls/false (gB30ba@syntax-dispatch gB4587@t '()))) (if gB4589@ls/false (apply (lambda () (lambda (gB458b@x) '#t)) gB4589@ls/false) (let ((gB458d@t gB4587@t)) (let ((gB458f@ls/false (gB30ba@syntax-dispatch gB458d@t '(any . each-any)))) (if (and gB458f@ls/false (apply (lambda (gB4591@c gB4592@ver*) (eq? (gB31a0@syntax->datum gB4591@c) 'and)) gB458f@ls/false)) (apply (lambda (gB4595@c gB4596@ver*) (let ((gB4599@p* (map gB4558@version-pred gB4596@ver*))) (lambda (gB459b@x) (for-all (lambda (gB459d@p) (gB459d@p gB459b@x)) gB4599@p*)))) gB458f@ls/false) (let ((gB459f@t gB458d@t)) (let ((gB45a1@ls/false (gB30ba@syntax-dispatch gB459f@t '(any . each-any)))) (if (and gB45a1@ls/false (apply (lambda (gB45a3@c gB45a4@ver*) (eq? (gB31a0@syntax->datum gB45a3@c) 'or)) gB45a1@ls/false)) (apply (lambda (gB45a7@c gB45a8@ver*) (let ((gB45ab@p* (map gB4558@version-pred gB45a8@ver*))) (lambda (gB45ad@x) (exists (lambda (gB45af@p) (gB45af@p gB45ad@x)) gB45ab@p*)))) gB45a1@ls/false) (let ((gB45b1@t gB459f@t)) (let ((gB45b3@ls/false (gB30ba@syntax-dispatch gB45b1@t '(any any)))) (if (and gB45b3@ls/false (apply (lambda (gB45b5@c gB45b6@ver) (eq? (gB31a0@syntax->datum gB45b5@c) 'not)) gB45b3@ls/false)) (apply (lambda (gB45b9@c gB45ba@ver) (let ((gB45bd@p (gB4558@version-pred gB45ba@ver))) (lambda (gB45bf@x) (not (gB45bd@p gB45bf@x))))) gB45b3@ls/false) (let ((gB45c1@t gB45b1@t)) (let ((gB45c3@ls/false (gB30ba@syntax-dispatch gB45c1@t 'each-any))) (if gB45c3@ls/false (apply (lambda (gB45c5@sub*) (let ((gB45c7@p* (map gB4556@subversion-pred gB45c5@sub*))) (lambda (gB45c9@x) (let gB45cf@f ((gB45cb@p* gB45c7@p*) (gB45cc@x gB45c9@x)) (if (null? gB45cb@p*) '#t (if (null? gB45cc@x) '#f (and ((car gB45cb@p*) (car gB45cc@x)) (gB45cf@f (cdr gB45cb@p*) (cdr gB45cc@x))))))))) gB45c3@ls/false) (let ((gB45d1@t gB45c1@t)) (let ((gB45d3@ls/false (gB30ba@syntax-dispatch gB45d1@t '_))) (if gB45d3@ls/false (apply (lambda () (gB319a@syntax-violation 'import '"invalid version spec" gB4551@spec gB4585@x*)) gB45d3@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB45d1@t)))))))))))))))))))))) (let gB455b@f ((gB4559@x gB4551@spec)) (let ((gB455d@t gB4559@x)) (let ((gB455f@ls/false (gB30ba@syntax-dispatch gB455d@t '(each-any)))) (if gB455f@ls/false (apply (lambda (gB4561@version-spec*) (values '() (gB4558@version-pred gB4561@version-spec*))) gB455f@ls/false) (let ((gB4563@t gB455d@t)) (let ((gB4565@ls/false (gB30ba@syntax-dispatch gB4563@t '(any . any)))) (if (and gB4565@ls/false (apply (lambda (gB4567@x gB4568@x*) (gB4486@idsyn? gB4567@x)) gB4565@ls/false)) (apply (lambda (gB456b@x gB456c@x*) (call-with-values (lambda () (gB455b@f gB456c@x*)) (lambda (gB4573@gB4570 gB4574@gB4572) (let ((gB4577@pred gB4574@gB4572) (gB4578@name gB4573@gB4570)) (values (cons (gB31a0@syntax->datum gB456b@x) gB4578@name) gB4577@pred))))) gB4565@ls/false) (let ((gB457b@t gB4563@t)) (let ((gB457d@ls/false (gB30ba@syntax-dispatch gB457b@t '()))) (if gB457d@ls/false (apply (lambda () (values '() (lambda (gB457f@x) '#t))) gB457d@ls/false) (let ((gB4581@t gB457b@t)) (let ((gB4583@ls/false (gB30ba@syntax-dispatch gB4581@t '_))) (if gB4583@ls/false (apply (lambda () (gB319a@syntax-violation '#f '"invalid import spec" gB4551@spec)) gB4583@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB4581@t))))))))))))))))) (gB4496@import-library (lambda (gB4541@spec*) (call-with-values (lambda () (gB4494@parse-library-name gB4541@spec*)) (lambda (gB4547@gB4544 gB4548@gB4546) (let ((gB454b@pred gB4548@gB4546) (gB454c@name gB4547@gB4544)) (begin (if (null? gB454c@name) (gB319a@syntax-violation 'import '"empty library name" gB4541@spec*) (void)) (let ((gB454f@lib (gB2cc8@gB2b0f@find-library-by-name gB454c@name))) (begin (if (not gB454f@lib) (gB319a@syntax-violation 'import '"cannot find library with required name" gB454c@name) (void)) (if (not (gB454b@pred (gB2ca2@gB2ac3@library-version gB454f@lib))) (gB319a@syntax-violation 'import '"library does not satisfy version specification" gB4541@spec* gB454f@lib) (void)) ((gB3126@imp-collector) gB454f@lib) (gB2caa@gB2ad3@library-subst gB454f@lib))))))))) (gB4498@get-import (lambda (gB44b3@spec) (let ((gB44b5@t gB44b3@spec)) (let ((gB44b7@ls/false (gB30ba@syntax-dispatch gB44b5@t '(any . each-any)))) (if (and gB44b7@ls/false (apply (lambda (gB44b9@x gB44ba@x*) (not (memq (gB31a0@syntax->datum gB44b9@x) '(for rename except only prefix library)))) gB44b7@ls/false)) (apply (lambda (gB44bd@x gB44be@x*) (gB4496@import-library (cons gB44bd@x gB44be@x*))) gB44b7@ls/false) (let ((gB44c1@t gB44b5@t)) (let ((gB44c3@ls/false (gB30ba@syntax-dispatch gB44c1@t '(any any . #(each (any any)))))) (if (and gB44c3@ls/false (apply (lambda (gB44c5@rename gB44c6@isp gB44c7@old* gB44c8@new*) (and (eq? (gB31a0@syntax->datum gB44c5@rename) 'rename) (for-all gB4486@idsyn? gB44c7@old*) (for-all gB4486@idsyn? gB44c8@new*))) gB44c3@ls/false)) (apply (lambda (gB44cd@rename gB44ce@isp gB44cf@old* gB44d0@new*) (let ((gB44d5@subst (gB4498@get-import gB44ce@isp)) (gB44d6@old* (map gB31a0@syntax->datum gB44cf@old*)) (gB44d7@new* (map gB31a0@syntax->datum gB44d0@new*))) (let ((gB44db@old-label* (gB448e@find* gB44d6@old* gB44d5@subst))) (let ((gB44dd@subst (gB4490@rem* gB44d6@old* gB44d5@subst))) (gB448a@merge-substs (map cons gB44d7@new* gB44db@old-label*) gB44dd@subst))))) gB44c3@ls/false) (let ((gB44df@t gB44c1@t)) (let ((gB44e1@ls/false (gB30ba@syntax-dispatch gB44df@t '(any any . each-any)))) (if (and gB44e1@ls/false (apply (lambda (gB44e3@except gB44e4@isp gB44e5@sym*) (and (eq? (gB31a0@syntax->datum gB44e3@except) 'except) (for-all gB4486@idsyn? gB44e5@sym*))) gB44e1@ls/false)) (apply (lambda (gB44e9@except gB44ea@isp gB44eb@sym*) (let ((gB44ef@subst (gB4498@get-import gB44ea@isp))) (gB4490@rem* (map gB31a0@syntax->datum gB44eb@sym*) gB44ef@subst))) gB44e1@ls/false) (let ((gB44f1@t gB44df@t)) (let ((gB44f3@ls/false (gB30ba@syntax-dispatch gB44f1@t '(any any . each-any)))) (if (and gB44f3@ls/false (apply (lambda (gB44f5@only gB44f6@isp gB44f7@sym*) (and (eq? (gB31a0@syntax->datum gB44f5@only) 'only) (for-all gB4486@idsyn? gB44f7@sym*))) gB44f3@ls/false)) (apply (lambda (gB44fb@only gB44fc@isp gB44fd@sym*) (let ((gB4501@subst (gB4498@get-import gB44fc@isp)) (gB4502@sym* (map gB31a0@syntax->datum gB44fd@sym*))) (let ((gB4505@sym* (gB4492@remove-dups gB4502@sym*))) (let ((gB4507@lab* (gB448e@find* gB4505@sym* gB4501@subst))) (map cons gB4505@sym* gB4507@lab*))))) gB44f3@ls/false) (let ((gB4509@t gB44f1@t)) (let ((gB450b@ls/false (gB30ba@syntax-dispatch gB4509@t '(any any any)))) (if (and gB450b@ls/false (apply (lambda (gB450d@prefix gB450e@isp gB450f@p) (and (eq? (gB31a0@syntax->datum gB450d@prefix) 'prefix) (gB4486@idsyn? gB450f@p))) gB450b@ls/false)) (apply (lambda (gB4513@prefix gB4514@isp gB4515@p) (let ((gB4519@subst (gB4498@get-import gB4514@isp)) (gB451a@prefix (symbol->string (gB31a0@syntax->datum gB4515@p)))) (map (lambda (gB451d@x) (cons (string->symbol (string-append gB451a@prefix (symbol->string (car gB451d@x)))) (cdr gB451d@x))) gB4519@subst))) gB450b@ls/false) (let ((gB451f@t gB4509@t)) (let ((gB4521@ls/false (gB30ba@syntax-dispatch gB451f@t '(any each-any)))) (if (and gB4521@ls/false (apply (lambda (gB4523@library gB4524@spec*) (eq? (gB31a0@syntax->datum gB4523@library) 'library)) gB4521@ls/false)) (apply (lambda (gB4527@library gB4528@spec*) (gB4496@import-library gB4528@spec*)) gB4521@ls/false) (let ((gB452b@t gB451f@t)) (let ((gB452d@ls/false (gB30ba@syntax-dispatch gB452b@t '(any any . any)))) (if (and gB452d@ls/false (apply (lambda (gB452f@for gB4530@isp gB4531@rest) (eq? (gB31a0@syntax->datum gB452f@for) 'for)) gB452d@ls/false)) (apply (lambda (gB4535@for gB4536@isp gB4537@rest) (gB4498@get-import gB4536@isp)) gB452d@ls/false) (let ((gB453b@t gB452b@t)) (let ((gB453d@ls/false (gB30ba@syntax-dispatch gB453b@t 'any))) (if gB453d@ls/false (apply (lambda (gB453f@spec) (gB319a@syntax-violation 'import '"invalid import spec" gB453f@spec)) gB453d@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB453b@t))))))))))))))))))))))))))) (gB449a@add-imports! (lambda (gB44a3@imp gB44a4@h) (let ((gB44a7@subst (gB4498@get-import gB44a3@imp))) (for-each (lambda (gB44a9@x) (let ((gB44ab@name (car gB44a9@x)) (gB44ac@label (cdr gB44a9@x))) (let ((gB44af@t (hashtable-ref gB44a4@h gB44ab@name '#f))) (if gB44af@t ((lambda (gB44b1@l) (if (not (eq? gB44b1@l gB44ac@label)) (gB4488@dup-error gB44ab@name) (void))) gB44af@t) (hashtable-set! gB44a4@h gB44ab@name gB44ac@label))))) gB44a7@subst))))) (lambda (gB449b@imp*) (let gB44a1@f ((gB449d@imp* gB449b@imp*) (gB449e@h (make-eq-hashtable))) (if (null? gB449d@imp*) (hashtable-entries gB449e@h) (begin (gB449a@add-imports! (car gB449d@imp*) gB449e@h) (gB44a1@f (cdr gB449d@imp*) gB449e@h))))))) (set! gB4bbd@gB311c@parse-import-spec* gB311c@parse-import-spec*) (set! gB311e@make-top-rib (lambda (gB4691@names gB4692@labels) (let ((gB4695@rib (gB2e67@make-empty-rib))) (begin (vector-for-each (lambda (gB4697@name gB4698@label) (begin (if (not (symbol? gB4697@name)) (error 'make-top-rib '"BUG: not a symbol" gB4697@name) (void)) (gB2e6b@extend-rib/nc! gB4695@rib (make-simple-struct 'stx '5 (list gB4697@name gB2e37@top-mark* '() '())) gB4698@label))) gB4691@names gB4692@labels) gB4695@rib)))) (set! gB4bbe@gB311e@make-top-rib gB311e@make-top-rib) (set! gB3120@make-collector (lambda () (let ((gB469b@ls '())) (lambda gB469f (let ((gB46a0 (length gB469f))) (if (= gB46a0 '0) (apply (lambda () gB469b@ls) gB469f) (if (= gB46a0 '1) (apply (lambda (gB469d@x) (set! gB469b@ls (gB2e30@set-cons gB469d@x gB469b@ls))) gB469f) (error 'apply '"invalid arg count")))))))) (set! gB4bbf@gB3120@make-collector gB3120@make-collector) (set! gB3122@inv-collector (gB2a03@gB28e1@make-parameter (lambda gB46a1@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (gB46a3@x) (begin (if (not (procedure? gB46a3@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" gB46a3@x) (void)) gB46a3@x)))) (set! gB4bc0@gB3122@inv-collector gB3122@inv-collector) (set! gB3124@vis-collector (gB2a03@gB28e1@make-parameter (lambda gB46a5@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (gB46a7@x) (begin (if (not (procedure? gB46a7@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" gB46a7@x) (void)) gB46a7@x)))) (set! gB4bc1@gB3124@vis-collector gB3124@vis-collector) (set! gB3126@imp-collector (gB2a03@gB28e1@make-parameter (lambda gB46a9@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (gB46ab@x) (begin (if (not (procedure? gB46ab@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" gB46ab@x) (void)) gB46ab@x)))) (set! gB4bc2@gB3126@imp-collector gB3126@imp-collector) (set! gB3128@chi-library-internal (lambda (gB46ad@e* gB46ae@rib gB46af@top?) (call-with-values (lambda () (gB3112@chi-body* gB46ad@e* '() '() '() '() '() '() '() gB46ae@rib gB46af@top?)) (lambda (gB46c3@gB46b4 gB46c4@gB46b6 gB46c5@gB46b8 gB46c6@gB46ba gB46c7@gB46bc gB46c8@gB46be gB46c9@gB46c0 gB46ca@gB46c2) (let ((gB46d3@exp* gB46ca@gB46c2) (gB46d4@_kwd* gB46c9@gB46c0) (gB46d5@mod** gB46c8@gB46be) (gB46d6@rhs* gB46c7@gB46bc) (gB46d7@lex* gB46c6@gB46ba) (gB46d8@mr gB46c5@gB46b8) (gB46d9@r gB46c4@gB46b6) (gB46da@e* gB46c3@gB46b4)) (values (append (apply append (reverse gB46d5@mod**)) gB46da@e*) gB46d9@r gB46d8@mr (reverse gB46d7@lex*) (reverse gB46d6@rhs*) gB46d3@exp*)))))) (set! gB4bc3@gB3128@chi-library-internal gB3128@chi-library-internal) (set! gB312a@chi-interaction-expr (lambda (gB46e3@e gB46e4@rib gB46e5@r) (call-with-values (lambda () (gB3112@chi-body* (list gB46e3@e) gB46e5@r gB46e5@r '() '() '() '() '() gB46e4@rib '#t)) (lambda (gB46f9@gB46ea gB46fa@gB46ec gB46fb@gB46ee gB46fc@gB46f0 gB46fd@gB46f2 gB46fe@gB46f4 gB46ff@gB46f6 gB4700@gB46f8) (let ((gB4709@_exp* gB4700@gB46f8) (gB470a@_kwd* gB46ff@gB46f6) (gB470b@mod** gB46fe@gB46f4) (gB470c@rhs* gB46fd@gB46f2) (gB470d@lex* gB46fc@gB46f0) (gB470e@mr gB46fb@gB46ee) (gB470f@r gB46fa@gB46ec) (gB4710@e* gB46f9@gB46ea)) (let ((gB4719@e* (gB30ea@expand-interaction-rhs*/init* (reverse gB470d@lex*) (reverse gB470c@rhs*) (append (apply append (reverse gB470b@mod**)) gB4710@e*) gB470f@r gB470e@mr))) (let ((gB471b@e (if (null? gB4719@e*) (gB2e19@gB2d7a@build-void) (if (null? (cdr gB4719@e*)) (car gB4719@e*) (gB2e18@gB2d78@build-sequence '#f gB4719@e*))))) (values gB471b@e gB470f@r)))))))) (set! gB4bc4@gB312a@chi-interaction-expr gB312a@chi-interaction-expr) (set! gB312c@library-body-expander (lambda (gB471d@name gB471e@main-exp* gB471f@imp* gB4720@b* gB4721@top?) (letrec* ((gB4728@itc (gB3120@make-collector))) (let ((gB4731@gB472a gB3126@imp-collector) (gB4732@gB472c gB31aa@top-level-context) (gB4733@gB472e gB4728@itc) (gB4734@gB4730 '#f)) (let ((gB4739@swap (lambda () (begin (let ((gB473b@t (gB4731@gB472a))) (begin (gB4731@gB472a gB4733@gB472e) (set! gB4733@gB472e gB473b@t))) (let ((gB473d@t (gB4732@gB472c))) (begin (gB4732@gB472c gB4734@gB4730) (set! gB4734@gB4730 gB473d@t))))))) (dynamic-wind gB4739@swap (lambda () (call-with-values (lambda () (gB311c@parse-import-spec* gB471f@imp*)) (lambda (gB4743@gB4740 gB4744@gB4742) (let ((gB4747@subst-labels gB4744@gB4742) (gB4748@subst-names gB4743@gB4740)) (let ((gB474b@rib (gB311e@make-top-rib gB4748@subst-names gB4747@subst-labels))) (letrec* ((gB474e@wrap (lambda (gB47c9@x) (make-simple-struct 'stx '5 (list gB47c9@x gB2e37@top-mark* (list gB474b@rib) '()))))) (let ((gB474f@b* (map gB474e@wrap gB4720@b*)) (gB4750@main-exp* (map gB474e@wrap gB471e@main-exp*)) (gB4751@rtc (gB3120@make-collector)) (gB4752@vtc (gB3120@make-collector))) (let ((gB475f@gB4758 gB3122@inv-collector) (gB4760@gB475a gB3124@vis-collector) (gB4761@gB475c gB4751@rtc) (gB4762@gB475e gB4752@vtc)) (let ((gB4767@swap (lambda () (begin (let ((gB4769@t (gB475f@gB4758))) (begin (gB475f@gB4758 gB4761@gB475c) (set! gB4761@gB475c gB4769@t))) (let ((gB476b@t (gB4760@gB475a))) (begin (gB4760@gB475a gB4762@gB475e) (set! gB4762@gB475e gB476b@t))))))) (dynamic-wind gB4767@swap (lambda () (call-with-values (lambda () (gB3128@chi-library-internal gB474f@b* gB474b@rib gB4721@top?)) (lambda (gB4779@gB476e gB477a@gB4770 gB477b@gB4772 gB477c@gB4774 gB477d@gB4776 gB477e@gB4778) (let ((gB4785@internal-exp* gB477e@gB4778) (gB4786@rhs* gB477d@gB4776) (gB4787@lex* gB477c@gB4774) (gB4788@mr gB477b@gB4772) (gB4789@r gB477a@gB4770) (gB478a@init* gB4779@gB476e)) (call-with-values (lambda () (gB3116@parse-exports (append gB4750@main-exp* gB4785@internal-exp*))) (lambda (gB4795@gB4792 gB4796@gB4794) (let ((gB4799@exp-id* gB4796@gB4794) (gB479a@exp-name* gB4795@gB4792)) (begin (gB2e6f@seal-rib! gB474b@rib) (let ((gB479d@init* (gB30d8@chi-expr* gB478a@init* gB4789@r gB4788@mr))) (let ((gB479f@rhs* (gB30ec@chi-rhs* gB4786@rhs* gB4789@r gB4788@mr))) (begin (gB2e71@unseal-rib! gB474b@rib) (let ((gB47a1@loc* (map gB2e3d@gen-global gB4787@lex*)) (gB47a2@export-subst (gB3184@make-export-subst gB479a@exp-name* gB4799@exp-id*))) (letrec* ((gB47a6@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (gB3186@make-export-env/macros gB4787@lex* gB47a1@loc* gB4789@r)) (lambda (gB47ad@gB47a8 gB47ae@gB47aa gB47af@gB47ac) (let ((gB47b3@macro* gB47af@gB47ac) (gB47b4@global* gB47ae@gB47aa) (gB47b5@export-env gB47ad@gB47a8)) (begin (for-each (lambda (gB47b9@s) (let ((gB47bb@name (car gB47b9@s)) (gB47bc@label (cdr gB47b9@s))) (let ((gB47bf@p (assq gB47bc@label gB47b5@export-env))) (if gB47bf@p (let ((gB47c1@b (cdr gB47bf@p))) (let ((gB47c3@type (car gB47c1@b))) (if (eq? gB47c3@type 'mutable) (gB319a@syntax-violation 'export gB47a6@errstr gB47bb@name) (void)))) (void))))) gB47a2@export-subst) (let ((gB47c5@invoke-body (gB2e1e@gB2d84@build-library-letrec* '#f gB471d@name gB4787@lex* gB47a1@loc* gB479f@rhs* (if (null? gB479d@init*) (gB2e19@gB2d7a@build-void) (gB2e18@gB2d78@build-sequence '#f gB479d@init*)))) (gB47c6@invoke-definitions (map gB2e15@gB2cd7@build-global-define (map cdr gB47b4@global*)))) (values (gB4728@itc) (gB4751@rtc) (gB4752@vtc) (gB2e18@gB2d78@build-sequence '#f (append gB47c6@invoke-definitions (list gB47c5@invoke-body))) gB47b3@macro* gB47a2@export-subst gB47b5@export-env))))))))))))))))))) gB4767@swap)))))))))) gB4739@swap)))))) (set! gB4bc5@gB312c@library-body-expander gB312c@library-body-expander) (set! gB312e@core-library-expander (lambda (gB47cb@e gB47cc@verify-name) (call-with-values (lambda () (gB311a@parse-library gB47cb@e)) (lambda (gB47d7@gB47d0 gB47d8@gB47d2 gB47d9@gB47d4 gB47da@gB47d6) (let ((gB47df@b* gB47da@gB47d6) (gB47e0@imp* gB47d9@gB47d4) (gB47e1@exp* gB47d8@gB47d2) (gB47e2@name* gB47d7@gB47d0)) (call-with-values (lambda () (gB3118@parse-library-name gB47e2@name*)) (lambda (gB47eb@gB47e8 gB47ec@gB47ea) (let ((gB47ef@ver gB47ec@gB47ea) (gB47f0@name gB47eb@gB47e8)) (begin (gB47cc@verify-name gB47f0@name) (call-with-values (lambda () (gB312c@library-body-expander gB47f0@name gB47e1@exp* gB47e0@imp* gB47df@b* '#f)) (lambda (gB4801@gB47f4 gB4802@gB47f6 gB4803@gB47f8 gB4804@gB47fa gB4805@gB47fc gB4806@gB47fe gB4807@gB4800) (let ((gB480f@export-env gB4807@gB4800) (gB4810@export-subst gB4806@gB47fe) (gB4811@visit-code gB4805@gB47fc) (gB4812@invoke-code gB4804@gB47fa) (gB4813@visit-req* gB4803@gB47f8) (gB4814@invoke-req* gB4802@gB47f6) (gB4815@imp* gB4801@gB47f4)) (values gB47f0@name gB47ef@ver gB4815@imp* gB4814@invoke-req* gB4813@visit-req* gB4812@invoke-code gB4811@visit-code gB4810@export-subst gB480f@export-env))))))))))))) (set! gB4bc6@gB312e@core-library-expander gB312e@core-library-expander) (set! gB3130@parse-top-level-program (lambda (gB481d@e*) (let ((gB481f@t gB481d@e*)) (let ((gB4821@ls/false (gB30ba@syntax-dispatch gB481f@t '((any . each-any) . each-any)))) (if (and gB4821@ls/false (apply (lambda (gB4823@import gB4824@imp* gB4825@b*) (eq? (gB31a0@syntax->datum gB4823@import) 'import)) gB4821@ls/false)) (apply (lambda (gB4829@import gB482a@imp* gB482b@b*) (values gB482a@imp* gB482b@b*)) gB4821@ls/false) (let ((gB482f@t gB481f@t)) (let ((gB4831@ls/false (gB30ba@syntax-dispatch gB482f@t '((any . any) . any)))) (if (and gB4831@ls/false (apply (lambda (gB4833@import gB4834@x gB4835@y) (eq? (gB31a0@syntax->datum gB4833@import) 'import)) gB4831@ls/false)) (apply (lambda (gB4839@import gB483a@x gB483b@y) (gB319a@syntax-violation 'expander '"invalid syntax of top-level program" (gB2ead@syntax-car gB481d@e*))) gB4831@ls/false) (let ((gB483f@t gB482f@t)) (let ((gB4841@ls/false (gB30ba@syntax-dispatch gB483f@t '_))) (if gB4841@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) gB4841@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB483f@t)))))))))))) (set! gB4bc7@gB3130@parse-top-level-program gB3130@parse-top-level-program) (set! gB3132@top-level-expander (lambda (gB4843@e*) (call-with-values (lambda () (gB3130@parse-top-level-program gB4843@e*)) (lambda (gB4849@gB4846 gB484a@gB4848) (let ((gB484d@b* gB484a@gB4848) (gB484e@imp* gB4849@gB4846)) (call-with-values (lambda () (gB312c@library-body-expander '() '() gB484e@imp* gB484d@b* '#t)) (lambda (gB485f@gB4852 gB4860@gB4854 gB4861@gB4856 gB4862@gB4858 gB4863@gB485a gB4864@gB485c gB4865@gB485e) (let ((gB486d@export-env gB4865@gB485e) (gB486e@export-subst gB4864@gB485c) (gB486f@visit-code gB4863@gB485a) (gB4870@invoke-code gB4862@gB4858) (gB4871@visit-req* gB4861@gB4856) (gB4872@invoke-req* gB4860@gB4854) (gB4873@imp* gB485f@gB4852)) (values gB4872@invoke-req* gB4870@invoke-code))))))))) (set! gB4bc8@gB3132@top-level-expander gB3132@top-level-expander) (set! gB3134@rp (gB2a00@gB28db@make-record-printer 'env (lambda (gB487b@x gB487c@p gB487d@wr) (display '"#<environment>" gB487c@p)))) (set! gB4bc9@gB3134@rp gB3134@rp) (set! gB313e@env? (lambda (gB4881@x) (and (simple-struct? gB4881@x) (eq? (simple-struct-name gB4881@x) 'env)))) (set! gB4bca@gB313e@env? gB313e@env?) (set! gB3140@env-names (lambda (gB4883@x) (simple-struct-ref gB4883@x '0))) (set! gB4bcb@gB3140@env-names gB3140@env-names) (set! gB3142@set-env-names! (lambda (gB4885@x gB4886@val) (simple-struct-set! gB4885@x '0 gB4886@val))) (set! gB4bcc@gB3142@set-env-names! gB3142@set-env-names!) (set! gB3144@env-labels (lambda (gB4889@x) (simple-struct-ref gB4889@x '1))) (set! gB4bcd@gB3144@env-labels gB3144@env-labels) (set! gB3146@set-env-labels! (lambda (gB488b@x gB488c@val) (simple-struct-set! gB488b@x '1 gB488c@val))) (set! gB4bce@gB3146@set-env-labels! gB3146@set-env-labels!) (set! gB3148@env-itc (lambda (gB488f@x) (simple-struct-ref gB488f@x '2))) (set! gB4bcf@gB3148@env-itc gB3148@env-itc) (set! gB314a@set-env-itc! (lambda (gB4891@x gB4892@val) (simple-struct-set! gB4891@x '2 gB4892@val))) (set! gB4bd0@gB314a@set-env-itc! gB314a@set-env-itc!) (set! gB314c@dummy '3) (set! gB4bd1@gB314c@dummy gB314c@dummy) (set! gB314e@rp (gB2a00@gB28db@make-record-printer 'interaction-env (lambda (gB4895@x gB4896@p gB4897@wr) (display '"#<environment>" gB4896@p)))) (set! gB4bd2@gB314e@rp gB314e@rp) (set! gB3158@interaction-env? (lambda (gB489b@x) (and (simple-struct? gB489b@x) (eq? (simple-struct-name gB489b@x) 'interaction-env)))) (set! gB4bd3@gB3158@interaction-env? gB3158@interaction-env?) (set! gB315a@interaction-env-rib (lambda (gB489d@x) (simple-struct-ref gB489d@x '0))) (set! gB4bd4@gB315a@interaction-env-rib gB315a@interaction-env-rib) (set! gB315c@set-interaction-env-rib! (lambda (gB489f@x gB48a0@val) (simple-struct-set! gB489f@x '0 gB48a0@val))) (set! gB4bd5@gB315c@set-interaction-env-rib! gB315c@set-interaction-env-rib!) (set! gB315e@interaction-env-r (lambda (gB48a3@x) (simple-struct-ref gB48a3@x '1))) (set! gB4bd6@gB315e@interaction-env-r gB315e@interaction-env-r) (set! gB3160@set-interaction-env-r! (lambda (gB48a5@x gB48a6@val) (simple-struct-set! gB48a5@x '1 gB48a6@val))) (set! gB4bd7@gB3160@set-interaction-env-r! gB3160@set-interaction-env-r!) (set! gB3162@interaction-env-locs (lambda (gB48a9@x) (simple-struct-ref gB48a9@x '2))) (set! gB4bd8@gB3162@interaction-env-locs gB3162@interaction-env-locs) (set! gB3164@set-interaction-env-locs! (lambda (gB48ab@x gB48ac@val) (simple-struct-set! gB48ab@x '2 gB48ac@val))) (set! gB4bd9@gB3164@set-interaction-env-locs! gB3164@set-interaction-env-locs!) (set! gB3166@dummy '3) (set! gB4bda@gB3166@dummy gB3166@dummy) (set! gB3168@interaction-environment-symbols (lambda () (gB3170@environment-symbols (gB31a8@interaction-environment)))) (set! gB4bdb@gB3168@interaction-environment-symbols gB3168@interaction-environment-symbols) (set! gB316a@environment-bindings (lambda (gB48af@e) (vector->list (vector-map (lambda (gB48b1@name gB48b2@label) (gB316c@parse-binding (cons gB48b1@name (gB2cce@gB2b1b@imported-label->binding gB48b2@label)))) (gB3140@env-names gB48af@e) (gB3144@env-labels gB48af@e))))) (set! gB4bdc@gB316a@environment-bindings gB316a@environment-bindings) (set! gB316c@parse-binding (lambda (gB48b5@b) (cons (car gB48b5@b) (let ((gB48b7@t (cadr gB48b5@b))) (if (memv gB48b7@t '(core-prim global)) 'procedure (if (memv gB48b7@t '(core-macro macro global-macro)) 'syntax (if (memv gB48b7@t '($core-rtd)) 'record (if (eq? (car gB48b5@b) (cadr gB48b5@b)) 'syntax 'unknown)))))))) (set! gB4bdd@gB316c@parse-binding gB316c@parse-binding) (set! gB316e@environment? (lambda (gB48b9@x) (or (gB313e@env? gB48b9@x) (gB3158@interaction-env? gB48b9@x)))) (set! gB4bde@gB316e@environment? gB316e@environment?) (set! gB3170@environment-symbols (lambda (gB48bb@x) (if (gB313e@env? gB48bb@x) (vector->list (gB3140@env-names gB48bb@x)) (if (gB3158@interaction-env? gB48bb@x) (map values (gB2e51@rib-sym* (gB315a@interaction-env-rib gB48bb@x))) (assertion-violation 'environment-symbols '"not an environment" gB48bb@x))))) (set! gB4bdf@gB3170@environment-symbols gB3170@environment-symbols) (set! gB3172@environment (lambda gB48bd@imp* (let ((gB48bf@itc (gB3120@make-collector))) (let ((gB48c5@gB48c2 gB3126@imp-collector) (gB48c6@gB48c4 gB48bf@itc)) (let ((gB48c9@swap (lambda () (let ((gB48cb@t (gB48c5@gB48c2))) (begin (gB48c5@gB48c2 gB48c6@gB48c4) (set! gB48c6@gB48c4 gB48cb@t)))))) (dynamic-wind gB48c9@swap (lambda () (call-with-values (lambda () (gB311c@parse-import-spec* gB48bd@imp*)) (lambda (gB48d1@gB48ce gB48d2@gB48d0) (let ((gB48d5@subst-labels gB48d2@gB48d0) (gB48d6@subst-names gB48d1@gB48ce)) (make-simple-struct 'env '4 (list gB48d6@subst-names gB48d5@subst-labels gB48bf@itc)))))) gB48c9@swap)))))) (set! gB4be0@gB3172@environment gB3172@environment) (set! gB3174@null-environment (lambda (gB48d9@n) (begin (if (not (eqv? gB48d9@n '5)) (assertion-violation 'null-environment '"not 5" gB48d9@n) (void)) (gB3172@environment '(psyntax null-environment-5))))) (set! gB4be1@gB3174@null-environment gB3174@null-environment) (set! gB3176@scheme-report-environment (lambda (gB48db@n) (begin (if (not (eqv? gB48db@n '5)) (assertion-violation 'scheme-report-environment '"not 5" gB48db@n) (void)) (gB3172@environment '(psyntax scheme-report-environment-5))))) (set! gB4be2@gB3176@scheme-report-environment gB3176@scheme-report-environment) (set! gB3178@expand (lambda (gB48dd@x gB48de@env) (if (gB313e@env? gB48de@env) (let ((gB48e1@rib (gB311e@make-top-rib (gB3140@env-names gB48de@env) (gB3144@env-labels gB48de@env)))) (let ((gB48e3@x (make-simple-struct 'stx '5 (list gB48dd@x gB2e37@top-mark* (list gB48e1@rib) '()))) (gB48e4@itc (gB3148@env-itc gB48de@env)) (gB48e5@rtc (gB3120@make-collector)) (gB48e6@vtc (gB3120@make-collector))) (let ((gB48eb@x (let ((gB48fd@gB48ee gB31aa@top-level-context) (gB48fe@gB48f0 gB3122@inv-collector) (gB48ff@gB48f2 gB3124@vis-collector) (gB4900@gB48f4 gB3126@imp-collector) (gB4901@gB48f6 '#f) (gB4902@gB48f8 gB48e5@rtc) (gB4903@gB48fa gB48e6@vtc) (gB4904@gB48fc gB48e4@itc)) (let ((gB490d@swap (lambda () (begin (let ((gB490f@t (gB48fd@gB48ee))) (begin (gB48fd@gB48ee gB4901@gB48f6) (set! gB4901@gB48f6 gB490f@t))) (let ((gB4911@t (gB48fe@gB48f0))) (begin (gB48fe@gB48f0 gB4902@gB48f8) (set! gB4902@gB48f8 gB4911@t))) (let ((gB4913@t (gB48ff@gB48f2))) (begin (gB48ff@gB48f2 gB4903@gB48fa) (set! gB4903@gB48fa gB4913@t))) (let ((gB4915@t (gB4900@gB48f4))) (begin (gB4900@gB48f4 gB4904@gB48fc) (set! gB4904@gB48fc gB4915@t))))))) (dynamic-wind gB490d@swap (lambda () (gB30dc@chi-expr gB48e3@x '() '())) gB490d@swap))))) (begin (gB2e6f@seal-rib! gB48e1@rib) (values gB48eb@x (gB48e5@rtc)))))) (if (gB3158@interaction-env? gB48de@env) (let ((gB4917@rib (gB315a@interaction-env-rib gB48de@env)) (gB4918@r (gB315e@interaction-env-r gB48de@env)) (gB4919@rtc (gB3120@make-collector))) (let ((gB491d@x (make-simple-struct 'stx '5 (list gB48dd@x gB2e37@top-mark* (list gB4917@rib) '())))) (call-with-values (lambda () (let ((gB4933@gB4924 gB31aa@top-level-context) (gB4934@gB4926 gB3122@inv-collector) (gB4935@gB4928 gB3124@vis-collector) (gB4936@gB492a gB3126@imp-collector) (gB4937@gB492c gB48de@env) (gB4938@gB492e gB4919@rtc) (gB4939@gB4930 (gB3120@make-collector)) (gB493a@gB4932 (gB3120@make-collector))) (let ((gB4943@swap (lambda () (begin (let ((gB4945@t (gB4933@gB4924))) (begin (gB4933@gB4924 gB4937@gB492c) (set! gB4937@gB492c gB4945@t))) (let ((gB4947@t (gB4934@gB4926))) (begin (gB4934@gB4926 gB4938@gB492e) (set! gB4938@gB492e gB4947@t))) (let ((gB4949@t (gB4935@gB4928))) (begin (gB4935@gB4928 gB4939@gB4930) (set! gB4939@gB4930 gB4949@t))) (let ((gB494b@t (gB4936@gB492a))) (begin (gB4936@gB492a gB493a@gB4932) (set! gB493a@gB4932 gB494b@t))))))) (dynamic-wind gB4943@swap (lambda () (gB312a@chi-interaction-expr gB491d@x gB4917@rib gB4918@r)) gB4943@swap)))) (lambda (gB494d@gB4920 gB494e@gB4922) (let ((gB4951@r^ gB494e@gB4922) (gB4952@e gB494d@gB4920)) (begin (gB3160@set-interaction-env-r! gB48de@env gB4951@r^) (values gB4952@e (gB4919@rtc)))))))) (assertion-violation 'expand '"not an environment" gB48de@env))))) (set! gB4be3@gB3178@expand gB3178@expand) (set! gB317a@eval (lambda (gB4955@x gB4956@env) (begin (if (not (gB316e@environment? gB4956@env)) (error 'eval '"not an environment" gB4956@env) (void)) (call-with-values (lambda () (gB3178@expand gB4955@x gB4956@env)) (lambda (gB495d@gB495a gB495e@gB495c) (let ((gB4961@invoke-req* gB495e@gB495c) (gB4962@x gB495d@gB495a)) (begin (for-each gB2ccf@gB2b1d@invoke-library gB4961@invoke-req*) (eval-core (gB2a59@gB2a11@expanded->core gB4962@x))))))))) (set! gB4be4@gB317a@eval gB317a@eval) (set! gB317c@library-expander (lambda gB49d3 (let ((gB49d4 (length gB49d3))) (if (= gB49d4 '3) (apply (lambda (gB4965@x gB4966@filename gB4967@verify-name) (letrec* ((gB496c@build-visit-code (lambda (gB49c1@macro*) (if (null? gB49c1@macro*) (gB2e19@gB2d7a@build-void) (gB2e18@gB2d78@build-sequence '#f (map (lambda (gB49c3@x) (let ((gB49c5@loc (car gB49c3@x)) (gB49c6@src (cddr gB49c3@x))) (list 'set! gB49c5@loc gB49c6@src))) gB49c1@macro*))))) (gB496e@visit! (lambda (gB49b9@macro*) (for-each (lambda (gB49bb@x) (let ((gB49bd@loc (car gB49bb@x)) (gB49be@proc (cadr gB49bb@x))) (set-symbol-value! gB49bd@loc gB49be@proc))) gB49b9@macro*)))) (call-with-values (lambda () (gB312e@core-library-expander gB4965@x gB4967@verify-name)) (lambda (gB4981@gB4970 gB4982@gB4972 gB4983@gB4974 gB4984@gB4976 gB4985@gB4978 gB4986@gB497a gB4987@gB497c gB4988@gB497e gB4989@gB4980) (let ((gB4993@export-env gB4989@gB4980) (gB4994@export-subst gB4988@gB497e) (gB4995@macro* gB4987@gB497c) (gB4996@invoke-code gB4986@gB497a) (gB4997@vis* gB4985@gB4978) (gB4998@inv* gB4984@gB4976) (gB4999@imp* gB4983@gB4974) (gB499a@ver gB4982@gB4972) (gB499b@name gB4981@gB4970)) (let ((gB49a5@id (gensym)) (gB49a6@name gB499b@name) (gB49a7@ver gB499a@ver) (gB49a8@imp* (map gB2cd3@gB2b25@library-spec gB4999@imp*)) (gB49a9@vis* (map gB2cd3@gB2b25@library-spec gB4997@vis*)) (gB49aa@inv* (map gB2cd3@gB2b25@library-spec gB4998@inv*)) (gB49ab@visit-proc (lambda () (gB496e@visit! gB4995@macro*))) (gB49ac@invoke-proc (lambda () (eval-core (gB2a59@gB2a11@expanded->core gB4996@invoke-code)))) (gB49ad@visit-code (gB496c@build-visit-code gB4995@macro*)) (gB49ae@invoke-code gB4996@invoke-code)) (begin (gB2ccd@gB2b19@install-library gB49a5@id gB49a6@name gB49a7@ver gB49a8@imp* gB49a9@vis* gB49aa@inv* gB4994@export-subst gB4993@export-env gB49ab@visit-proc gB49ac@invoke-proc gB49ad@visit-code gB49ae@invoke-code '#t gB4966@filename) (values gB49a5@id gB49a6@name gB49a7@ver gB49a8@imp* gB49a9@vis* gB49aa@inv* gB49ae@invoke-code gB49ad@visit-code gB4994@export-subst gB4993@export-env)))))))) gB49d3) (if (= gB49d4 '2) (apply (lambda (gB49c9@x gB49ca@filename) (gB317c@library-expander gB49c9@x gB49ca@filename (lambda (gB49cd@x) (values)))) gB49d3) (if (= gB49d4 '1) (apply (lambda (gB49cf@x) (gB317c@library-expander gB49cf@x '#f (lambda (gB49d1@x) (values)))) gB49d3) (error 'apply '"invalid arg count"))))))) (set! gB4be5@gB317c@library-expander gB317c@library-expander) (set! gB317e@boot-library-expand (lambda (gB49d5@x) (call-with-values (lambda () (gB317c@library-expander gB49d5@x)) (lambda (gB49eb@gB49d8 gB49ec@gB49da gB49ed@gB49dc gB49ee@gB49de gB49ef@gB49e0 gB49f0@gB49e2 gB49f1@gB49e4 gB49f2@gB49e6 gB49f3@gB49e8 gB49f4@gB49ea) (let ((gB49ff@export-env gB49f4@gB49ea) (gB4a00@export-subst gB49f3@gB49e8) (gB4a01@visit-code gB49f2@gB49e6) (gB4a02@invoke-code gB49f1@gB49e4) (gB4a03@inv* gB49f0@gB49e2) (gB4a04@vis* gB49ef@gB49e0) (gB4a05@imp* gB49ee@gB49de) (gB4a06@ver gB49ed@gB49dc) (gB4a07@name gB49ec@gB49da) (gB4a08@id gB49eb@gB49d8)) (values gB4a07@name gB4a02@invoke-code gB4a00@export-subst gB49ff@export-env)))))) (set! gB4be6@gB317e@boot-library-expand gB317e@boot-library-expand) (set! gB3180@rev-map-append (lambda (gB4a13@f gB4a14@ls gB4a15@ac) (if (null? gB4a14@ls) gB4a15@ac (gB3180@rev-map-append gB4a13@f (cdr gB4a14@ls) (cons (gB4a13@f (car gB4a14@ls)) gB4a15@ac))))) (set! gB4be7@gB3180@rev-map-append gB3180@rev-map-append) (set! gB3182@build-exports (lambda (gB4a19@lex*+loc* gB4a1a@init*) (gB2e18@gB2d78@build-sequence '#f (cons (gB2e19@gB2d7a@build-void) (gB3180@rev-map-append (lambda (gB4a1d@x) (list 'set! (cdr gB4a1d@x) (car gB4a1d@x))) gB4a19@lex*+loc* gB4a1a@init*))))) (set! gB4be8@gB3182@build-exports gB3182@build-exports) (set! gB3184@make-export-subst (lambda (gB4a1f@name* gB4a20@id*) (map (lambda (gB4a23@name gB4a24@id) (let ((gB4a27@label (gB2ec9@id->label gB4a24@id))) (begin (if (not gB4a27@label) (gB319a@syntax-violation '#f '"cannot export unbound identifier" gB4a24@id) (void)) (cons gB4a23@name gB4a27@label)))) gB4a1f@name* gB4a20@id*))) (set! gB4be9@gB3184@make-export-subst gB3184@make-export-subst) (set! gB3186@make-export-env/macros (lambda (gB4a29@lex* gB4a2a@loc* gB4a2b@r) (letrec* ((gB4a30@lookup (lambda (gB4a4d@x) (let gB4a55@f ((gB4a4f@x gB4a4d@x) (gB4a50@lex* gB4a29@lex*) (gB4a51@loc* gB4a2a@loc*)) (if (pair? gB4a50@lex*) (if (eq? gB4a4f@x (car gB4a50@lex*)) (car gB4a51@loc*) (gB4a55@f gB4a4f@x (cdr gB4a50@lex*) (cdr gB4a51@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let gB4a39@f ((gB4a31@r gB4a2b@r) (gB4a32@env '()) (gB4a33@global* '()) (gB4a34@macro* '())) (if (null? gB4a31@r) (values gB4a32@env gB4a33@global* gB4a34@macro*) (let ((gB4a3b@x (car gB4a31@r))) (let ((gB4a3d@label (car gB4a3b@x)) (gB4a3e@b (cdr gB4a3b@x))) (let ((gB4a41@t (gB2ecf@binding-type gB4a3e@b))) (if (memv gB4a41@t '(lexical)) (let ((gB4a43@v (gB2ed1@binding-value gB4a3e@b))) (let ((gB4a45@loc (gB4a30@lookup (gB3044@lexical-var gB4a43@v))) (gB4a46@type (if (gB3046@lexical-mutable? gB4a43@v) 'mutable 'global))) (gB4a39@f (cdr gB4a31@r) (cons (cons* gB4a3d@label gB4a46@type gB4a45@loc) gB4a32@env) (cons (cons (gB3044@lexical-var gB4a43@v) gB4a45@loc) gB4a33@global*) gB4a34@macro*))) (if (memv gB4a41@t '(local-macro)) (let ((gB4a49@loc (gensym))) (gB4a39@f (cdr gB4a31@r) (cons (cons* gB4a3d@label 'global-macro gB4a49@loc) gB4a32@env) gB4a33@global* (cons (cons gB4a49@loc (gB2ed1@binding-value gB4a3e@b)) gB4a34@macro*))) (if (memv gB4a41@t '(local-macro!)) (let ((gB4a4b@loc (gensym))) (gB4a39@f (cdr gB4a31@r) (cons (cons* gB4a3d@label 'global-macro! gB4a4b@loc) gB4a32@env) gB4a33@global* (cons (cons gB4a4b@loc (gB2ed1@binding-value gB4a3e@b)) gB4a34@macro*))) (if (memv gB4a41@t '($rtd $module)) (gB4a39@f (cdr gB4a31@r) (cons gB4a3b@x gB4a32@env) gB4a33@global* gB4a34@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (gB2ecf@binding-type gB4a3e@b) (gB2ed1@binding-value gB4a3e@b)))))))))))))) (set! gB4bea@gB3186@make-export-env/macros gB3186@make-export-env/macros) (set! gB3188@generate-temporaries (lambda (gB4a57@ls) (let ((gB4a59@t gB4a57@ls)) (let ((gB4a5b@ls/false (gB30ba@syntax-dispatch gB4a59@t 'each-any))) (if gB4a5b@ls/false (apply (lambda (gB4a5d@ls) (map (lambda (gB4a5f@x) (make-simple-struct 'stx '5 (list (let ((gB4a61@x (gB31a0@syntax->datum gB4a5f@x))) (if (or (symbol? gB4a61@x) (string? gB4a61@x)) (gensym gB4a61@x) (gensym 't))) gB2e37@top-mark* '() '()))) gB4a5d@ls)) gB4a5b@ls/false) (let ((gB4a63@t gB4a59@t)) (let ((gB4a65@ls/false (gB30ba@syntax-dispatch gB4a63@t '_))) (if gB4a65@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) gB4a65@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB4a63@t))))))))) (set! gB4beb@gB3188@generate-temporaries gB3188@generate-temporaries) (set! gB318a@free-identifier=? (lambda (gB4a67@x gB4a68@y) (if (gB2eb3@id? gB4a67@x) (if (gB2eb3@id? gB4a68@y) (gB2eb9@free-id=? gB4a67@x gB4a68@y) (assertion-violation 'free-identifier=? '"not an identifier" gB4a68@y)) (assertion-violation 'free-identifier=? '"not an identifier" gB4a67@x)))) (set! gB4bec@gB318a@free-identifier=? gB318a@free-identifier=?) (set! gB318c@bound-identifier=? (lambda (gB4a6b@x gB4a6c@y) (if (gB2eb3@id? gB4a6b@x) (if (gB2eb3@id? gB4a6c@y) (gB2eb7@bound-id=? gB4a6b@x gB4a6c@y) (assertion-violation 'bound-identifier=? '"not an identifier" gB4a6c@y)) (assertion-violation 'bound-identifier=? '"not an identifier" gB4a6b@x)))) (set! gB4bed@gB318c@bound-identifier=? gB318c@bound-identifier=?) (set! gB318e@make-source-condition (lambda (gB4a6f@x) (letrec* ((gB4a79@gB4a74 (make-record-type-descriptor '&source-information gB4ecf@gB4c16@&condition-rtd 'gB4a77 '#f '#f '#((immutable file-name) (immutable line)))) (gB4a7b@gB4a76 '#f) (gB4a7d@gB4a75 (make-record-constructor-descriptor gB4a79@gB4a74 gB4ed0@gB4c18@&condition-rcd gB4a7b@gB4a76)) (gB4a80@gB4a73 (record-predicate gB4a79@gB4a74)) (gB4a82@make-source-condition (record-constructor gB4a7d@gB4a75)) (gB4a84@gB4a71 (record-accessor gB4a79@gB4a74 '0)) (gB4a86@gB4a72 (record-accessor gB4a79@gB4a74 '1)) (gB4a88@source-condition? (condition-predicate gB4a79@gB4a74)) (gB4a8a@source-filename (condition-accessor gB4a79@gB4a74 gB4a84@gB4a71)) (gB4a8c@source-character (condition-accessor gB4a79@gB4a74 gB4a86@gB4a72))) (if (and (pair? gB4a6f@x) (pair? (cdr gB4a6f@x))) (gB4a82@make-source-condition (car gB4a6f@x) (cadr gB4a6f@x)) (condition))))) (set! gB4bee@gB318e@make-source-condition gB318e@make-source-condition) (set! gB3190@extract-position-condition (lambda (gB4a8d@x) (gB318e@make-source-condition (gB3192@expression-position gB4a8d@x)))) (set! gB4bef@gB3190@extract-position-condition gB3190@extract-position-condition) (set! gB3192@expression-position (lambda (gB4a8f@x) (and (gB2e7f@stx? gB4a8f@x) (let ((gB4a91@x (gB2e81@stx-expr gB4a8f@x))) (and (gB29f7@gB28c9@annotation? gB4a91@x) (gB29f8@gB28cb@annotation-source gB4a91@x)))))) (set! gB4bf0@gB3192@expression-position gB3192@expression-position) (set! gB3194@assertion-error (lambda (gB4a93@expr gB4a94@pos) (raise (condition (gB4eff@gB4cda@make-assertion-violation) (gB4f11@gB4d0c@make-who-condition 'assert) (gB4ed5@gB4c6d@make-message-condition '"assertion failed") (gB4f07@gB4cf1@make-irritants-condition (list gB4a93@expr)) (gB318e@make-source-condition gB4a94@pos))))) (set! gB4bf1@gB3194@assertion-error gB3194@assertion-error) (set! gB3196@syntax-error (lambda (gB4a97@x . gB4a99@args) (begin (if (not (for-all string? gB4a99@args)) (assertion-violation 'syntax-error '"invalid argument" gB4a99@args) (void)) (raise (condition (gB4ed5@gB4c6d@make-message-condition (if (null? gB4a99@args) '"invalid syntax" (apply string-append gB4a99@args))) (gB4f33@gB4d68@make-syntax-violation (gB31a0@syntax->datum gB4a97@x) '#f) (gB3190@extract-position-condition gB4a97@x)))))) (set! gB4bf2@gB3196@syntax-error gB3196@syntax-error) (set! gB3198@syntax-violation* (lambda (gB4a9b@who gB4a9c@msg gB4a9d@form gB4a9e@condition-object) (begin (if (not (string? gB4a9c@msg)) (assertion-violation 'syntax-violation '"message is not a string" gB4a9c@msg) (void)) (let ((gB4aa3@who (if (or (string? gB4a9b@who) (symbol? gB4a9b@who)) gB4a9b@who (if (not gB4a9b@who) (let ((gB4aa5@t gB4a9d@form)) (let ((gB4aa7@ls/false (gB30ba@syntax-dispatch gB4aa5@t 'any))) (if (and gB4aa7@ls/false (apply (lambda (gB4aa9@id) (gB2eb3@id? gB4aa9@id)) gB4aa7@ls/false)) (apply (lambda (gB4aab@id) (gB31a0@syntax->datum gB4aab@id)) gB4aa7@ls/false) (let ((gB4aad@t gB4aa5@t)) (let ((gB4aaf@ls/false (gB30ba@syntax-dispatch gB4aad@t '(any . any)))) (if (and gB4aaf@ls/false (apply (lambda (gB4ab1@id gB4ab2@rest) (gB2eb3@id? gB4ab1@id)) gB4aaf@ls/false)) (apply (lambda (gB4ab5@id gB4ab6@rest) (gB31a0@syntax->datum gB4ab5@id)) gB4aaf@ls/false) (let ((gB4ab9@t gB4aad@t)) (let ((gB4abb@ls/false (gB30ba@syntax-dispatch gB4ab9@t '_))) (if gB4abb@ls/false (apply (lambda () '#f) gB4abb@ls/false) (gB319a@syntax-violation '#f '"invalid syntax" gB4ab9@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" gB4a9b@who))))) (raise (condition (if gB4aa3@who (gB4f11@gB4d0c@make-who-condition gB4aa3@who) (condition)) (gB4ed5@gB4c6d@make-message-condition gB4a9c@msg) gB4a9e@condition-object (gB3190@extract-position-condition gB4a9d@form))))))) (set! gB4bf3@gB3198@syntax-violation* gB3198@syntax-violation*) (set! gB319a@syntax-violation (lambda gB4acb (let ((gB4acc (length gB4acb))) (if (= gB4acc '3) (apply (lambda (gB4abd@who gB4abe@msg gB4abf@form) (gB319a@syntax-violation gB4abd@who gB4abe@msg gB4abf@form '#f)) gB4acb) (if (= gB4acc '4) (apply (lambda (gB4ac3@who gB4ac4@msg gB4ac5@form gB4ac6@subform) (gB3198@syntax-violation* gB4ac3@who gB4ac4@msg gB4ac5@form (gB4f33@gB4d68@make-syntax-violation (gB31a0@syntax->datum gB4ac5@form) (gB31a0@syntax->datum gB4ac6@subform)))) gB4acb) (error 'apply '"invalid arg count")))))) (set! gB4bf4@gB319a@syntax-violation gB319a@syntax-violation) (set! gB319c@identifier? (lambda (gB4acd@x) (gB2eb3@id? gB4acd@x))) (set! gB4bf5@gB319c@identifier? gB319c@identifier?) (set! gB319e@datum->syntax (lambda (gB4acf@id gB4ad0@datum) (if (gB2eb3@id? gB4acf@id) (gB2e93@datum->stx gB4acf@id gB4ad0@datum) (assertion-violation 'datum->syntax '"not an identifier" gB4acf@id)))) (set! gB4bf6@gB319e@datum->syntax gB319e@datum->syntax) (set! gB31a0@syntax->datum (lambda (gB4ad3@x) (gB2ec7@stx->datum gB4ad3@x))) (set! gB4bf7@gB31a0@syntax->datum gB31a0@syntax->datum) (set! gB31a2@ungensym-all (lambda (gB4ad5@code) (if (pair? gB4ad5@code) (cons (gB31a2@ungensym-all (car gB4ad5@code)) (gB31a2@ungensym-all (cdr gB4ad5@code))) (if (symbol? gB4ad5@code) (ungensym gB4ad5@code) gB4ad5@code)))) (set! gB4bf8@gB31a2@ungensym-all gB31a2@ungensym-all) (set! gB31a4@compile-r6rs-top-level (lambda (gB4ad7@x*) (call-with-values (lambda () (gB3132@top-level-expander gB4ad7@x*)) (lambda (gB4add@gB4ada gB4ade@gB4adc) (let ((gB4ae1@invoke-code gB4ade@gB4adc) (gB4ae2@lib* gB4add@gB4ada)) (lambda () (begin (for-each gB2ccf@gB2b1d@invoke-library gB4ae2@lib*) (let ((gB4ae5@expanded (gB2a59@gB2a11@expanded->core gB4ae1@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (gB31a2@ungensym-all gB4ae5@expanded)) (void)) (eval-core gB4ae5@expanded)))))))))) (set! gB4bf9@gB31a4@compile-r6rs-top-level gB31a4@compile-r6rs-top-level) (set! gB31a6@pre-compile-r6rs-top-level (lambda (gB4ae7@x*) (call-with-values (lambda () (gB3132@top-level-expander gB4ae7@x*)) (lambda (gB4aed@gB4aea gB4aee@gB4aec) (let ((gB4af1@invoke-code gB4aee@gB4aec) (gB4af2@lib* gB4aed@gB4aea)) (begin (for-each gB2ccf@gB2b1d@invoke-library gB4af2@lib*) (gB2a01@gB28dd@compile-core (gB2a59@gB2a11@expanded->core gB4af1@invoke-code)))))))) (set! gB4bfa@gB31a6@pre-compile-r6rs-top-level gB31a6@pre-compile-r6rs-top-level) (set! gB31a8@interaction-environment (let ((gB4af5@the-env '#f)) (lambda () (or gB4af5@the-env (let ((gB4af7@lib (gB2cc8@gB2b0f@find-library-by-name '(mosh interaction))) (gB4af8@rib (gB2e67@make-empty-rib))) (begin (let ((gB4afb@subst (gB2caa@gB2ad3@library-subst gB4af7@lib))) (begin (gB2e53@set-rib-sym*! gB4af8@rib (map car gB4afb@subst)) (gB2e57@set-rib-mark**! gB4af8@rib (map (lambda (gB4afd@x) gB2e37@top-mark*) gB4afb@subst)) (gB2e5b@set-rib-label*! gB4af8@rib (map cdr gB4afb@subst)))) (let ((gB4aff@env (make-simple-struct 'interaction-env '4 (list gB4af8@rib '() '())))) (begin (set! gB4af5@the-env gB4aff@env) gB4aff@env)))))))) (set! gB4bfb@gB31a8@interaction-environment gB31a8@interaction-environment) (set! gB31aa@top-level-context (gB2a03@gB28e1@make-parameter '#f)) (set! gB4bfc@gB31aa@top-level-context gB31aa@top-level-context) (gB2cc5@gB2b09@current-library-expander gB317c@library-expander))
(begin (set! gB4c0b@gB4c06 (unspecified)) (set! gB4c0d@gB4c08 (unspecified)) (set! gB4c0f@gB4c07 (unspecified)) (set! gB4c12@&condition? (unspecified)) (set! gB4c14@make-&condition (unspecified)) (set! gB4c16@&condition-rtd (unspecified)) (set! gB4c18@&condition-rcd (unspecified)) (set! gB4c64@gB4c5f (unspecified)) (set! gB4c66@gB4c61 (unspecified)) (set! gB4c68@gB4c60 (unspecified)) (set! gB4c6b@p? (unspecified)) (set! gB4c6d@make-message-condition (unspecified)) (set! gB4c6f@gB4c5e (unspecified)) (set! gB4c71@message-condition? (unspecified)) (set! gB4c73@condition-message (unspecified)) (set! gB4c75@&message-rtd (unspecified)) (set! gB4c77@&message-rcd (unspecified)) (set! gB4c7d@gB4c78 (unspecified)) (set! gB4c7f@gB4c7a (unspecified)) (set! gB4c81@gB4c79 (unspecified)) (set! gB4c84@p? (unspecified)) (set! gB4c86@make-warning (unspecified)) (set! gB4c88@warning? (unspecified)) (set! gB4c8a@&warning-rtd (unspecified)) (set! gB4c8c@&warning-rcd (unspecified)) (set! gB4c92@gB4c8d (unspecified)) (set! gB4c94@gB4c8f (unspecified)) (set! gB4c96@gB4c8e (unspecified)) (set! gB4c99@p? (unspecified)) (set! gB4c9b@make-serious-condition (unspecified)) (set! gB4c9d@serious-condition? (unspecified)) (set! gB4c9f@&serious-rtd (unspecified)) (set! gB4ca1@&serious-rcd (unspecified)) (set! gB4ca7@gB4ca2 (unspecified)) (set! gB4ca9@gB4ca4 (unspecified)) (set! gB4cab@gB4ca3 (unspecified)) (set! gB4cae@p? (unspecified)) (set! gB4cb0@make-error (unspecified)) (set! gB4cb2@error? (unspecified)) (set! gB4cb4@&error-rtd (unspecified)) (set! gB4cb6@&error-rcd (unspecified)) (set! gB4cbc@gB4cb7 (unspecified)) (set! gB4cbe@gB4cb9 (unspecified)) (set! gB4cc0@gB4cb8 (unspecified)) (set! gB4cc3@p? (unspecified)) (set! gB4cc5@make-violation (unspecified)) (set! gB4cc7@violation? (unspecified)) (set! gB4cc9@&violation-rtd (unspecified)) (set! gB4ccb@&violation-rcd (unspecified)) (set! gB4cd1@gB4ccc (unspecified)) (set! gB4cd3@gB4cce (unspecified)) (set! gB4cd5@gB4ccd (unspecified)) (set! gB4cd8@p? (unspecified)) (set! gB4cda@make-assertion-violation (unspecified)) (set! gB4cdc@assertion-violation? (unspecified)) (set! gB4cde@&assertion-rtd (unspecified)) (set! gB4ce0@&assertion-rcd (unspecified)) (set! gB4ce8@gB4ce3 (unspecified)) (set! gB4cea@gB4ce5 (unspecified)) (set! gB4cec@gB4ce4 (unspecified)) (set! gB4cef@p? (unspecified)) (set! gB4cf1@make-irritants-condition (unspecified)) (set! gB4cf3@gB4ce2 (unspecified)) (set! gB4cf5@irritants-condition? (unspecified)) (set! gB4cf7@condition-irritants (unspecified)) (set! gB4cf9@&irritants-rtd (unspecified)) (set! gB4cfb@&irritants-rcd (unspecified)) (set! gB4d03@gB4cfe (unspecified)) (set! gB4d05@gB4d00 (unspecified)) (set! gB4d07@gB4cff (unspecified)) (set! gB4d0a@p? (unspecified)) (set! gB4d0c@make-who-condition (unspecified)) (set! gB4d0e@gB4cfd (unspecified)) (set! gB4d10@who-condition? (unspecified)) (set! gB4d12@condition-who (unspecified)) (set! gB4d14@&who-rtd (unspecified)) (set! gB4d16@&who-rcd (unspecified)) (set! gB4d1c@gB4d17 (unspecified)) (set! gB4d1e@gB4d19 (unspecified)) (set! gB4d20@gB4d18 (unspecified)) (set! gB4d23@p? (unspecified)) (set! gB4d25@make-non-continuable-violation (unspecified)) (set! gB4d27@non-continuable-violation? (unspecified)) (set! gB4d29@&non-continuable-rtd (unspecified)) (set! gB4d2b@&non-continuable-rcd (unspecified)) (set! gB4d31@gB4d2c (unspecified)) (set! gB4d33@gB4d2e (unspecified)) (set! gB4d35@gB4d2d (unspecified)) (set! gB4d38@p? (unspecified)) (set! gB4d3a@make-implementation-restriction-violation (unspecified)) (set! gB4d3c@implementation-restriction-violation? (unspecified)) (set! gB4d3e@&implementation-restriction-rtd (unspecified)) (set! gB4d40@&implementation-restriction-rcd (unspecified)) (set! gB4d46@gB4d41 (unspecified)) (set! gB4d48@gB4d43 (unspecified)) (set! gB4d4a@gB4d42 (unspecified)) (set! gB4d4d@p? (unspecified)) (set! gB4d4f@make-lexical-violation (unspecified)) (set! gB4d51@lexical-violation? (unspecified)) (set! gB4d53@&lexical-rtd (unspecified)) (set! gB4d55@&lexical-rcd (unspecified)) (set! gB4d5f@gB4d5a (unspecified)) (set! gB4d61@gB4d5c (unspecified)) (set! gB4d63@gB4d5b (unspecified)) (set! gB4d66@p? (unspecified)) (set! gB4d68@make-syntax-violation (unspecified)) (set! gB4d6a@gB4d57 (unspecified)) (set! gB4d6c@gB4d59 (unspecified)) (set! gB4d6e@syntax-violation? (unspecified)) (set! gB4d70@syntax-violation-form (unspecified)) (set! gB4d72@syntax-violation-subform (unspecified)) (set! gB4d74@&syntax-rtd (unspecified)) (set! gB4d76@&syntax-rcd (unspecified)) (set! gB4d7c@gB4d77 (unspecified)) (set! gB4d7e@gB4d79 (unspecified)) (set! gB4d80@gB4d78 (unspecified)) (set! gB4d83@p? (unspecified)) (set! gB4d85@make-undefined-violation (unspecified)) (set! gB4d87@undefined-violation? (unspecified)) (set! gB4d89@&undefined-rtd (unspecified)) (set! gB4d8b@&undefined-rcd (unspecified)) (set! gB4d91@gB4d8c (unspecified)) (set! gB4d93@gB4d8e (unspecified)) (set! gB4d95@gB4d8d (unspecified)) (set! gB4d98@p? (unspecified)) (set! gB4d9a@make-i/o-error (unspecified)) (set! gB4d9c@i/o-error? (unspecified)) (set! gB4d9e@&i/o-rtd (unspecified)) (set! gB4da0@&i/o-rcd (unspecified)) (set! gB4da6@gB4da1 (unspecified)) (set! gB4da8@gB4da3 (unspecified)) (set! gB4daa@gB4da2 (unspecified)) (set! gB4dad@p? (unspecified)) (set! gB4daf@make-i/o-read-error (unspecified)) (set! gB4db1@i/o-read-error? (unspecified)) (set! gB4db3@&i/o-read-rtd (unspecified)) (set! gB4db5@&i/o-read-rcd (unspecified)) (set! gB4dbb@gB4db6 (unspecified)) (set! gB4dbd@gB4db8 (unspecified)) (set! gB4dbf@gB4db7 (unspecified)) (set! gB4dc2@p? (unspecified)) (set! gB4dc4@make-i/o-write-error (unspecified)) (set! gB4dc6@i/o-write-error? (unspecified)) (set! gB4dc8@&i/o-write-rtd (unspecified)) (set! gB4dca@&i/o-write-rcd (unspecified)) (set! gB4dd2@gB4dcd (unspecified)) (set! gB4dd4@gB4dcf (unspecified)) (set! gB4dd6@gB4dce (unspecified)) (set! gB4dd9@p? (unspecified)) (set! gB4ddb@make-i/o-invalid-position-error (unspecified)) (set! gB4ddd@gB4dcc (unspecified)) (set! gB4ddf@i/o-invalid-position-error? (unspecified)) (set! gB4de1@i/o-error-position (unspecified)) (set! gB4de3@&i/o-invalid-position-rtd (unspecified)) (set! gB4de5@&i/o-invalid-position-rcd (unspecified)) (set! gB4ded@gB4de8 (unspecified)) (set! gB4def@gB4dea (unspecified)) (set! gB4df1@gB4de9 (unspecified)) (set! gB4df4@p? (unspecified)) (set! gB4df6@make-i/o-filename-error (unspecified)) (set! gB4df8@gB4de7 (unspecified)) (set! gB4dfa@i/o-filename-error? (unspecified)) (set! gB4dfc@i/o-error-filename (unspecified)) (set! gB4dfe@&i/o-filename-rtd (unspecified)) (set! gB4e00@&i/o-filename-rcd (unspecified)) (set! gB4e06@gB4e01 (unspecified)) (set! gB4e08@gB4e03 (unspecified)) (set! gB4e0a@gB4e02 (unspecified)) (set! gB4e0d@p? (unspecified)) (set! gB4e0f@make-i/o-file-protection-error (unspecified)) (set! gB4e11@i/o-file-protection-error? (unspecified)) (set! gB4e13@&i/o-file-protection-rtd (unspecified)) (set! gB4e15@&i/o-file-protection-rcd (unspecified)) (set! gB4e1b@gB4e16 (unspecified)) (set! gB4e1d@gB4e18 (unspecified)) (set! gB4e1f@gB4e17 (unspecified)) (set! gB4e22@p? (unspecified)) (set! gB4e24@make-i/o-file-is-read-only-error (unspecified)) (set! gB4e26@i/o-file-is-read-only-error? (unspecified)) (set! gB4e28@&i/o-file-is-read-only-rtd (unspecified)) (set! gB4e2a@&i/o-file-is-read-only-rcd (unspecified)) (set! gB4e30@gB4e2b (unspecified)) (set! gB4e32@gB4e2d (unspecified)) (set! gB4e34@gB4e2c (unspecified)) (set! gB4e37@p? (unspecified)) (set! gB4e39@make-i/o-file-already-exists-error (unspecified)) (set! gB4e3b@i/o-file-already-exists-error? (unspecified)) (set! gB4e3d@&i/o-file-already-exists-rtd (unspecified)) (set! gB4e3f@&i/o-file-already-exists-rcd (unspecified)) (set! gB4e45@gB4e40 (unspecified)) (set! gB4e47@gB4e42 (unspecified)) (set! gB4e49@gB4e41 (unspecified)) (set! gB4e4c@p? (unspecified)) (set! gB4e4e@make-i/o-file-does-not-exist-error (unspecified)) (set! gB4e50@i/o-file-does-not-exist-error? (unspecified)) (set! gB4e52@&i/o-file-does-not-exist-rtd (unspecified)) (set! gB4e54@&i/o-file-does-not-exist-rcd (unspecified)) (set! gB4e5c@gB4e57 (unspecified)) (set! gB4e5e@gB4e59 (unspecified)) (set! gB4e60@gB4e58 (unspecified)) (set! gB4e63@p? (unspecified)) (set! gB4e65@make-i/o-port-error (unspecified)) (set! gB4e67@gB4e56 (unspecified)) (set! gB4e69@i/o-port-error? (unspecified)) (set! gB4e6b@i/o-error-port (unspecified)) (set! gB4e6d@&i/o-port-rtd (unspecified)) (set! gB4e6f@&i/o-port-rcd (unspecified)) (set! gB4e75@gB4e70 (unspecified)) (set! gB4e77@gB4e72 (unspecified)) (set! gB4e79@gB4e71 (unspecified)) (set! gB4e7c@p? (unspecified)) (set! gB4e7e@make-i/o-decoding-error (unspecified)) (set! gB4e80@i/o-decoding-error? (unspecified)) (set! gB4e82@&i/o-decoding-rtd (unspecified)) (set! gB4e84@&i/o-decoding-rcd (unspecified)) (set! gB4e8c@gB4e87 (unspecified)) (set! gB4e8e@gB4e89 (unspecified)) (set! gB4e90@gB4e88 (unspecified)) (set! gB4e93@p? (unspecified)) (set! gB4e95@make-i/o-encoding-error (unspecified)) (set! gB4e97@gB4e86 (unspecified)) (set! gB4e99@i/o-encoding-error? (unspecified)) (set! gB4e9b@i/o-encoding-error-char (unspecified)) (set! gB4e9d@&i/o-encoding-rtd (unspecified)) (set! gB4e9f@&i/o-encoding-rcd (unspecified)) (set! gB4ea5@gB4ea0 (unspecified)) (set! gB4ea7@gB4ea2 (unspecified)) (set! gB4ea9@gB4ea1 (unspecified)) (set! gB4eac@p? (unspecified)) (set! gB4eae@make-no-infinities-violation (unspecified)) (set! gB4eb0@no-infinities-violation? (unspecified)) (set! gB4eb2@&no-infinities-rtd (unspecified)) (set! gB4eb4@&no-infinities-rcd (unspecified)) (set! gB4eba@gB4eb5 (unspecified)) (set! gB4ebc@gB4eb7 (unspecified)) (set! gB4ebe@gB4eb6 (unspecified)) (set! gB4ec1@p? (unspecified)) (set! gB4ec3@make-no-nans-violation (unspecified)) (set! gB4ec5@no-nans-violation? (unspecified)) (set! gB4ec7@&no-nans-rtd (unspecified)) (set! gB4ec9@&no-nans-rcd (unspecified)) (set! gB4c0b@gB4c06 (make-record-type-descriptor '&condition '#f 'gB4c09 '#f '#f '#())) (set! gB4eca@gB4c0b@gB4c06 gB4c0b@gB4c06) (set! gB4c0d@gB4c08 '#f) (set! gB4ecb@gB4c0d@gB4c08 gB4c0d@gB4c08) (set! gB4c0f@gB4c07 (make-record-constructor-descriptor gB4c0b@gB4c06 '#f gB4c0d@gB4c08)) (set! gB4ecc@gB4c0f@gB4c07 gB4c0f@gB4c07) (set! gB4c12@&condition? (record-predicate gB4c0b@gB4c06)) (set! gB4ecd@gB4c12@&condition? gB4c12@&condition?) (set! gB4c14@make-&condition (record-constructor gB4c0f@gB4c07)) (set! gB4ece@gB4c14@make-&condition gB4c14@make-&condition) (set! gB4c16@&condition-rtd gB4c0b@gB4c06) (set! gB4ecf@gB4c16@&condition-rtd gB4c16@&condition-rtd) (set! gB4c18@&condition-rcd gB4c0f@gB4c07) (set! gB4ed0@gB4c18@&condition-rcd gB4c18@&condition-rcd) (set! gB4c64@gB4c5f (make-record-type-descriptor '&message gB4c0b@gB4c06 'gB4c62 '#f '#f '#((immutable message)))) (set! gB4ed1@gB4c64@gB4c5f gB4c64@gB4c5f) (set! gB4c66@gB4c61 '#f) (set! gB4ed2@gB4c66@gB4c61 gB4c66@gB4c61) (set! gB4c68@gB4c60 (make-record-constructor-descriptor gB4c64@gB4c5f gB4c0f@gB4c07 gB4c66@gB4c61)) (set! gB4ed3@gB4c68@gB4c60 gB4c68@gB4c60) (set! gB4c6b@p? (record-predicate gB4c64@gB4c5f)) (set! gB4ed4@gB4c6b@p? gB4c6b@p?) (set! gB4c6d@make-message-condition (record-constructor gB4c68@gB4c60)) (set! gB4ed5@gB4c6d@make-message-condition gB4c6d@make-message-condition) (set! gB4c6f@gB4c5e (record-accessor gB4c64@gB4c5f '0)) (set! gB4ed6@gB4c6f@gB4c5e gB4c6f@gB4c5e) (set! gB4c71@message-condition? (condition-predicate gB4c64@gB4c5f)) (set! gB4ed7@gB4c71@message-condition? gB4c71@message-condition?) (set! gB4c73@condition-message (condition-accessor gB4c64@gB4c5f gB4c6f@gB4c5e)) (set! gB4ed8@gB4c73@condition-message gB4c73@condition-message) (set! gB4c75@&message-rtd gB4c64@gB4c5f) (set! gB4ed9@gB4c75@&message-rtd gB4c75@&message-rtd) (set! gB4c77@&message-rcd gB4c68@gB4c60) (set! gB4eda@gB4c77@&message-rcd gB4c77@&message-rcd) (set! gB4c7d@gB4c78 (make-record-type-descriptor '&warning gB4c0b@gB4c06 'gB4c7b '#f '#f '#())) (set! gB4edb@gB4c7d@gB4c78 gB4c7d@gB4c78) (set! gB4c7f@gB4c7a '#f) (set! gB4edc@gB4c7f@gB4c7a gB4c7f@gB4c7a) (set! gB4c81@gB4c79 (make-record-constructor-descriptor gB4c7d@gB4c78 gB4c0f@gB4c07 gB4c7f@gB4c7a)) (set! gB4edd@gB4c81@gB4c79 gB4c81@gB4c79) (set! gB4c84@p? (record-predicate gB4c7d@gB4c78)) (set! gB4ede@gB4c84@p? gB4c84@p?) (set! gB4c86@make-warning (record-constructor gB4c81@gB4c79)) (set! gB4edf@gB4c86@make-warning gB4c86@make-warning) (set! gB4c88@warning? (condition-predicate gB4c7d@gB4c78)) (set! gB4ee0@gB4c88@warning? gB4c88@warning?) (set! gB4c8a@&warning-rtd gB4c7d@gB4c78) (set! gB4ee1@gB4c8a@&warning-rtd gB4c8a@&warning-rtd) (set! gB4c8c@&warning-rcd gB4c81@gB4c79) (set! gB4ee2@gB4c8c@&warning-rcd gB4c8c@&warning-rcd) (set! gB4c92@gB4c8d (make-record-type-descriptor '&serious gB4c0b@gB4c06 'gB4c90 '#f '#f '#())) (set! gB4ee3@gB4c92@gB4c8d gB4c92@gB4c8d) (set! gB4c94@gB4c8f '#f) (set! gB4ee4@gB4c94@gB4c8f gB4c94@gB4c8f) (set! gB4c96@gB4c8e (make-record-constructor-descriptor gB4c92@gB4c8d gB4c0f@gB4c07 gB4c94@gB4c8f)) (set! gB4ee5@gB4c96@gB4c8e gB4c96@gB4c8e) (set! gB4c99@p? (record-predicate gB4c92@gB4c8d)) (set! gB4ee6@gB4c99@p? gB4c99@p?) (set! gB4c9b@make-serious-condition (record-constructor gB4c96@gB4c8e)) (set! gB4ee7@gB4c9b@make-serious-condition gB4c9b@make-serious-condition) (set! gB4c9d@serious-condition? (condition-predicate gB4c92@gB4c8d)) (set! gB4ee8@gB4c9d@serious-condition? gB4c9d@serious-condition?) (set! gB4c9f@&serious-rtd gB4c92@gB4c8d) (set! gB4ee9@gB4c9f@&serious-rtd gB4c9f@&serious-rtd) (set! gB4ca1@&serious-rcd gB4c96@gB4c8e) (set! gB4eea@gB4ca1@&serious-rcd gB4ca1@&serious-rcd) (set! gB4ca7@gB4ca2 (make-record-type-descriptor '&error gB4c92@gB4c8d 'gB4ca5 '#f '#f '#())) (set! gB4eeb@gB4ca7@gB4ca2 gB4ca7@gB4ca2) (set! gB4ca9@gB4ca4 '#f) (set! gB4eec@gB4ca9@gB4ca4 gB4ca9@gB4ca4) (set! gB4cab@gB4ca3 (make-record-constructor-descriptor gB4ca7@gB4ca2 gB4c96@gB4c8e gB4ca9@gB4ca4)) (set! gB4eed@gB4cab@gB4ca3 gB4cab@gB4ca3) (set! gB4cae@p? (record-predicate gB4ca7@gB4ca2)) (set! gB4eee@gB4cae@p? gB4cae@p?) (set! gB4cb0@make-error (record-constructor gB4cab@gB4ca3)) (set! gB4eef@gB4cb0@make-error gB4cb0@make-error) (set! gB4cb2@error? (condition-predicate gB4ca7@gB4ca2)) (set! gB4ef0@gB4cb2@error? gB4cb2@error?) (set! gB4cb4@&error-rtd gB4ca7@gB4ca2) (set! gB4ef1@gB4cb4@&error-rtd gB4cb4@&error-rtd) (set! gB4cb6@&error-rcd gB4cab@gB4ca3) (set! gB4ef2@gB4cb6@&error-rcd gB4cb6@&error-rcd) (set! gB4cbc@gB4cb7 (make-record-type-descriptor '&violation gB4c92@gB4c8d 'gB4cba '#f '#f '#())) (set! gB4ef3@gB4cbc@gB4cb7 gB4cbc@gB4cb7) (set! gB4cbe@gB4cb9 '#f) (set! gB4ef4@gB4cbe@gB4cb9 gB4cbe@gB4cb9) (set! gB4cc0@gB4cb8 (make-record-constructor-descriptor gB4cbc@gB4cb7 gB4c96@gB4c8e gB4cbe@gB4cb9)) (set! gB4ef5@gB4cc0@gB4cb8 gB4cc0@gB4cb8) (set! gB4cc3@p? (record-predicate gB4cbc@gB4cb7)) (set! gB4ef6@gB4cc3@p? gB4cc3@p?) (set! gB4cc5@make-violation (record-constructor gB4cc0@gB4cb8)) (set! gB4ef7@gB4cc5@make-violation gB4cc5@make-violation) (set! gB4cc7@violation? (condition-predicate gB4cbc@gB4cb7)) (set! gB4ef8@gB4cc7@violation? gB4cc7@violation?) (set! gB4cc9@&violation-rtd gB4cbc@gB4cb7) (set! gB4ef9@gB4cc9@&violation-rtd gB4cc9@&violation-rtd) (set! gB4ccb@&violation-rcd gB4cc0@gB4cb8) (set! gB4efa@gB4ccb@&violation-rcd gB4ccb@&violation-rcd) (set! gB4cd1@gB4ccc (make-record-type-descriptor '&assertion gB4cbc@gB4cb7 'gB4ccf '#f '#f '#())) (set! gB4efb@gB4cd1@gB4ccc gB4cd1@gB4ccc) (set! gB4cd3@gB4cce '#f) (set! gB4efc@gB4cd3@gB4cce gB4cd3@gB4cce) (set! gB4cd5@gB4ccd (make-record-constructor-descriptor gB4cd1@gB4ccc gB4cc0@gB4cb8 gB4cd3@gB4cce)) (set! gB4efd@gB4cd5@gB4ccd gB4cd5@gB4ccd) (set! gB4cd8@p? (record-predicate gB4cd1@gB4ccc)) (set! gB4efe@gB4cd8@p? gB4cd8@p?) (set! gB4cda@make-assertion-violation (record-constructor gB4cd5@gB4ccd)) (set! gB4eff@gB4cda@make-assertion-violation gB4cda@make-assertion-violation) (set! gB4cdc@assertion-violation? (condition-predicate gB4cd1@gB4ccc)) (set! gB4f00@gB4cdc@assertion-violation? gB4cdc@assertion-violation?) (set! gB4cde@&assertion-rtd gB4cd1@gB4ccc) (set! gB4f01@gB4cde@&assertion-rtd gB4cde@&assertion-rtd) (set! gB4ce0@&assertion-rcd gB4cd5@gB4ccd) (set! gB4f02@gB4ce0@&assertion-rcd gB4ce0@&assertion-rcd) (set! gB4ce8@gB4ce3 (make-record-type-descriptor '&irritants gB4c0b@gB4c06 'gB4ce6 '#f '#f '#((immutable irritants)))) (set! gB4f03@gB4ce8@gB4ce3 gB4ce8@gB4ce3) (set! gB4cea@gB4ce5 '#f) (set! gB4f04@gB4cea@gB4ce5 gB4cea@gB4ce5) (set! gB4cec@gB4ce4 (make-record-constructor-descriptor gB4ce8@gB4ce3 gB4c0f@gB4c07 gB4cea@gB4ce5)) (set! gB4f05@gB4cec@gB4ce4 gB4cec@gB4ce4) (set! gB4cef@p? (record-predicate gB4ce8@gB4ce3)) (set! gB4f06@gB4cef@p? gB4cef@p?) (set! gB4cf1@make-irritants-condition (record-constructor gB4cec@gB4ce4)) (set! gB4f07@gB4cf1@make-irritants-condition gB4cf1@make-irritants-condition) (set! gB4cf3@gB4ce2 (record-accessor gB4ce8@gB4ce3 '0)) (set! gB4f08@gB4cf3@gB4ce2 gB4cf3@gB4ce2) (set! gB4cf5@irritants-condition? (condition-predicate gB4ce8@gB4ce3)) (set! gB4f09@gB4cf5@irritants-condition? gB4cf5@irritants-condition?) (set! gB4cf7@condition-irritants (condition-accessor gB4ce8@gB4ce3 gB4cf3@gB4ce2)) (set! gB4f0a@gB4cf7@condition-irritants gB4cf7@condition-irritants) (set! gB4cf9@&irritants-rtd gB4ce8@gB4ce3) (set! gB4f0b@gB4cf9@&irritants-rtd gB4cf9@&irritants-rtd) (set! gB4cfb@&irritants-rcd gB4cec@gB4ce4) (set! gB4f0c@gB4cfb@&irritants-rcd gB4cfb@&irritants-rcd) (set! gB4d03@gB4cfe (make-record-type-descriptor '&who gB4c0b@gB4c06 'gB4d01 '#f '#f '#((immutable who)))) (set! gB4f0d@gB4d03@gB4cfe gB4d03@gB4cfe) (set! gB4d05@gB4d00 '#f) (set! gB4f0e@gB4d05@gB4d00 gB4d05@gB4d00) (set! gB4d07@gB4cff (make-record-constructor-descriptor gB4d03@gB4cfe gB4c0f@gB4c07 gB4d05@gB4d00)) (set! gB4f0f@gB4d07@gB4cff gB4d07@gB4cff) (set! gB4d0a@p? (record-predicate gB4d03@gB4cfe)) (set! gB4f10@gB4d0a@p? gB4d0a@p?) (set! gB4d0c@make-who-condition (record-constructor gB4d07@gB4cff)) (set! gB4f11@gB4d0c@make-who-condition gB4d0c@make-who-condition) (set! gB4d0e@gB4cfd (record-accessor gB4d03@gB4cfe '0)) (set! gB4f12@gB4d0e@gB4cfd gB4d0e@gB4cfd) (set! gB4d10@who-condition? (condition-predicate gB4d03@gB4cfe)) (set! gB4f13@gB4d10@who-condition? gB4d10@who-condition?) (set! gB4d12@condition-who (condition-accessor gB4d03@gB4cfe gB4d0e@gB4cfd)) (set! gB4f14@gB4d12@condition-who gB4d12@condition-who) (set! gB4d14@&who-rtd gB4d03@gB4cfe) (set! gB4f15@gB4d14@&who-rtd gB4d14@&who-rtd) (set! gB4d16@&who-rcd gB4d07@gB4cff) (set! gB4f16@gB4d16@&who-rcd gB4d16@&who-rcd) (set! gB4d1c@gB4d17 (make-record-type-descriptor '&non-continuable gB4cbc@gB4cb7 'gB4d1a '#f '#f '#())) (set! gB4f17@gB4d1c@gB4d17 gB4d1c@gB4d17) (set! gB4d1e@gB4d19 '#f) (set! gB4f18@gB4d1e@gB4d19 gB4d1e@gB4d19) (set! gB4d20@gB4d18 (make-record-constructor-descriptor gB4d1c@gB4d17 gB4cc0@gB4cb8 gB4d1e@gB4d19)) (set! gB4f19@gB4d20@gB4d18 gB4d20@gB4d18) (set! gB4d23@p? (record-predicate gB4d1c@gB4d17)) (set! gB4f1a@gB4d23@p? gB4d23@p?) (set! gB4d25@make-non-continuable-violation (record-constructor gB4d20@gB4d18)) (set! gB4f1b@gB4d25@make-non-continuable-violation gB4d25@make-non-continuable-violation) (set! gB4d27@non-continuable-violation? (condition-predicate gB4d1c@gB4d17)) (set! gB4f1c@gB4d27@non-continuable-violation? gB4d27@non-continuable-violation?) (set! gB4d29@&non-continuable-rtd gB4d1c@gB4d17) (set! gB4f1d@gB4d29@&non-continuable-rtd gB4d29@&non-continuable-rtd) (set! gB4d2b@&non-continuable-rcd gB4d20@gB4d18) (set! gB4f1e@gB4d2b@&non-continuable-rcd gB4d2b@&non-continuable-rcd) (set! gB4d31@gB4d2c (make-record-type-descriptor '&implementation-restriction gB4cbc@gB4cb7 'gB4d2f '#f '#f '#())) (set! gB4f1f@gB4d31@gB4d2c gB4d31@gB4d2c) (set! gB4d33@gB4d2e '#f) (set! gB4f20@gB4d33@gB4d2e gB4d33@gB4d2e) (set! gB4d35@gB4d2d (make-record-constructor-descriptor gB4d31@gB4d2c gB4cc0@gB4cb8 gB4d33@gB4d2e)) (set! gB4f21@gB4d35@gB4d2d gB4d35@gB4d2d) (set! gB4d38@p? (record-predicate gB4d31@gB4d2c)) (set! gB4f22@gB4d38@p? gB4d38@p?) (set! gB4d3a@make-implementation-restriction-violation (record-constructor gB4d35@gB4d2d)) (set! gB4f23@gB4d3a@make-implementation-restriction-violation gB4d3a@make-implementation-restriction-violation) (set! gB4d3c@implementation-restriction-violation? (condition-predicate gB4d31@gB4d2c)) (set! gB4f24@gB4d3c@implementation-restriction-violation? gB4d3c@implementation-restriction-violation?) (set! gB4d3e@&implementation-restriction-rtd gB4d31@gB4d2c) (set! gB4f25@gB4d3e@&implementation-restriction-rtd gB4d3e@&implementation-restriction-rtd) (set! gB4d40@&implementation-restriction-rcd gB4d35@gB4d2d) (set! gB4f26@gB4d40@&implementation-restriction-rcd gB4d40@&implementation-restriction-rcd) (set! gB4d46@gB4d41 (make-record-type-descriptor '&lexical gB4cbc@gB4cb7 'gB4d44 '#f '#f '#())) (set! gB4f27@gB4d46@gB4d41 gB4d46@gB4d41) (set! gB4d48@gB4d43 '#f) (set! gB4f28@gB4d48@gB4d43 gB4d48@gB4d43) (set! gB4d4a@gB4d42 (make-record-constructor-descriptor gB4d46@gB4d41 gB4cc0@gB4cb8 gB4d48@gB4d43)) (set! gB4f29@gB4d4a@gB4d42 gB4d4a@gB4d42) (set! gB4d4d@p? (record-predicate gB4d46@gB4d41)) (set! gB4f2a@gB4d4d@p? gB4d4d@p?) (set! gB4d4f@make-lexical-violation (record-constructor gB4d4a@gB4d42)) (set! gB4f2b@gB4d4f@make-lexical-violation gB4d4f@make-lexical-violation) (set! gB4d51@lexical-violation? (condition-predicate gB4d46@gB4d41)) (set! gB4f2c@gB4d51@lexical-violation? gB4d51@lexical-violation?) (set! gB4d53@&lexical-rtd gB4d46@gB4d41) (set! gB4f2d@gB4d53@&lexical-rtd gB4d53@&lexical-rtd) (set! gB4d55@&lexical-rcd gB4d4a@gB4d42) (set! gB4f2e@gB4d55@&lexical-rcd gB4d55@&lexical-rcd) (set! gB4d5f@gB4d5a (make-record-type-descriptor '&syntax gB4cbc@gB4cb7 'gB4d5d '#f '#f '#((immutable form) (immutable subform)))) (set! gB4f2f@gB4d5f@gB4d5a gB4d5f@gB4d5a) (set! gB4d61@gB4d5c '#f) (set! gB4f30@gB4d61@gB4d5c gB4d61@gB4d5c) (set! gB4d63@gB4d5b (make-record-constructor-descriptor gB4d5f@gB4d5a gB4cc0@gB4cb8 gB4d61@gB4d5c)) (set! gB4f31@gB4d63@gB4d5b gB4d63@gB4d5b) (set! gB4d66@p? (record-predicate gB4d5f@gB4d5a)) (set! gB4f32@gB4d66@p? gB4d66@p?) (set! gB4d68@make-syntax-violation (record-constructor gB4d63@gB4d5b)) (set! gB4f33@gB4d68@make-syntax-violation gB4d68@make-syntax-violation) (set! gB4d6a@gB4d57 (record-accessor gB4d5f@gB4d5a '0)) (set! gB4f34@gB4d6a@gB4d57 gB4d6a@gB4d57) (set! gB4d6c@gB4d59 (record-accessor gB4d5f@gB4d5a '1)) (set! gB4f35@gB4d6c@gB4d59 gB4d6c@gB4d59) (set! gB4d6e@syntax-violation? (condition-predicate gB4d5f@gB4d5a)) (set! gB4f36@gB4d6e@syntax-violation? gB4d6e@syntax-violation?) (set! gB4d70@syntax-violation-form (condition-accessor gB4d5f@gB4d5a gB4d6a@gB4d57)) (set! gB4f37@gB4d70@syntax-violation-form gB4d70@syntax-violation-form) (set! gB4d72@syntax-violation-subform (condition-accessor gB4d5f@gB4d5a gB4d6c@gB4d59)) (set! gB4f38@gB4d72@syntax-violation-subform gB4d72@syntax-violation-subform) (set! gB4d74@&syntax-rtd gB4d5f@gB4d5a) (set! gB4f39@gB4d74@&syntax-rtd gB4d74@&syntax-rtd) (set! gB4d76@&syntax-rcd gB4d63@gB4d5b) (set! gB4f3a@gB4d76@&syntax-rcd gB4d76@&syntax-rcd) (set! gB4d7c@gB4d77 (make-record-type-descriptor '&undefined gB4cbc@gB4cb7 'gB4d7a '#f '#f '#())) (set! gB4f3b@gB4d7c@gB4d77 gB4d7c@gB4d77) (set! gB4d7e@gB4d79 '#f) (set! gB4f3c@gB4d7e@gB4d79 gB4d7e@gB4d79) (set! gB4d80@gB4d78 (make-record-constructor-descriptor gB4d7c@gB4d77 gB4cc0@gB4cb8 gB4d7e@gB4d79)) (set! gB4f3d@gB4d80@gB4d78 gB4d80@gB4d78) (set! gB4d83@p? (record-predicate gB4d7c@gB4d77)) (set! gB4f3e@gB4d83@p? gB4d83@p?) (set! gB4d85@make-undefined-violation (record-constructor gB4d80@gB4d78)) (set! gB4f3f@gB4d85@make-undefined-violation gB4d85@make-undefined-violation) (set! gB4d87@undefined-violation? (condition-predicate gB4d7c@gB4d77)) (set! gB4f40@gB4d87@undefined-violation? gB4d87@undefined-violation?) (set! gB4d89@&undefined-rtd gB4d7c@gB4d77) (set! gB4f41@gB4d89@&undefined-rtd gB4d89@&undefined-rtd) (set! gB4d8b@&undefined-rcd gB4d80@gB4d78) (set! gB4f42@gB4d8b@&undefined-rcd gB4d8b@&undefined-rcd) (set! gB4d91@gB4d8c (make-record-type-descriptor '&i/o gB4ca7@gB4ca2 'gB4d8f '#f '#f '#())) (set! gB4f43@gB4d91@gB4d8c gB4d91@gB4d8c) (set! gB4d93@gB4d8e '#f) (set! gB4f44@gB4d93@gB4d8e gB4d93@gB4d8e) (set! gB4d95@gB4d8d (make-record-constructor-descriptor gB4d91@gB4d8c gB4cab@gB4ca3 gB4d93@gB4d8e)) (set! gB4f45@gB4d95@gB4d8d gB4d95@gB4d8d) (set! gB4d98@p? (record-predicate gB4d91@gB4d8c)) (set! gB4f46@gB4d98@p? gB4d98@p?) (set! gB4d9a@make-i/o-error (record-constructor gB4d95@gB4d8d)) (set! gB4f47@gB4d9a@make-i/o-error gB4d9a@make-i/o-error) (set! gB4d9c@i/o-error? (condition-predicate gB4d91@gB4d8c)) (set! gB4f48@gB4d9c@i/o-error? gB4d9c@i/o-error?) (set! gB4d9e@&i/o-rtd gB4d91@gB4d8c) (set! gB4f49@gB4d9e@&i/o-rtd gB4d9e@&i/o-rtd) (set! gB4da0@&i/o-rcd gB4d95@gB4d8d) (set! gB4f4a@gB4da0@&i/o-rcd gB4da0@&i/o-rcd) (set! gB4da6@gB4da1 (make-record-type-descriptor '&i/o-read gB4d91@gB4d8c 'gB4da4 '#f '#f '#())) (set! gB4f4b@gB4da6@gB4da1 gB4da6@gB4da1) (set! gB4da8@gB4da3 '#f) (set! gB4f4c@gB4da8@gB4da3 gB4da8@gB4da3) (set! gB4daa@gB4da2 (make-record-constructor-descriptor gB4da6@gB4da1 gB4d95@gB4d8d gB4da8@gB4da3)) (set! gB4f4d@gB4daa@gB4da2 gB4daa@gB4da2) (set! gB4dad@p? (record-predicate gB4da6@gB4da1)) (set! gB4f4e@gB4dad@p? gB4dad@p?) (set! gB4daf@make-i/o-read-error (record-constructor gB4daa@gB4da2)) (set! gB4f4f@gB4daf@make-i/o-read-error gB4daf@make-i/o-read-error) (set! gB4db1@i/o-read-error? (condition-predicate gB4da6@gB4da1)) (set! gB4f50@gB4db1@i/o-read-error? gB4db1@i/o-read-error?) (set! gB4db3@&i/o-read-rtd gB4da6@gB4da1) (set! gB4f51@gB4db3@&i/o-read-rtd gB4db3@&i/o-read-rtd) (set! gB4db5@&i/o-read-rcd gB4daa@gB4da2) (set! gB4f52@gB4db5@&i/o-read-rcd gB4db5@&i/o-read-rcd) (set! gB4dbb@gB4db6 (make-record-type-descriptor '&i/o-write gB4d91@gB4d8c 'gB4db9 '#f '#f '#())) (set! gB4f53@gB4dbb@gB4db6 gB4dbb@gB4db6) (set! gB4dbd@gB4db8 '#f) (set! gB4f54@gB4dbd@gB4db8 gB4dbd@gB4db8) (set! gB4dbf@gB4db7 (make-record-constructor-descriptor gB4dbb@gB4db6 gB4d95@gB4d8d gB4dbd@gB4db8)) (set! gB4f55@gB4dbf@gB4db7 gB4dbf@gB4db7) (set! gB4dc2@p? (record-predicate gB4dbb@gB4db6)) (set! gB4f56@gB4dc2@p? gB4dc2@p?) (set! gB4dc4@make-i/o-write-error (record-constructor gB4dbf@gB4db7)) (set! gB4f57@gB4dc4@make-i/o-write-error gB4dc4@make-i/o-write-error) (set! gB4dc6@i/o-write-error? (condition-predicate gB4dbb@gB4db6)) (set! gB4f58@gB4dc6@i/o-write-error? gB4dc6@i/o-write-error?) (set! gB4dc8@&i/o-write-rtd gB4dbb@gB4db6) (set! gB4f59@gB4dc8@&i/o-write-rtd gB4dc8@&i/o-write-rtd) (set! gB4dca@&i/o-write-rcd gB4dbf@gB4db7) (set! gB4f5a@gB4dca@&i/o-write-rcd gB4dca@&i/o-write-rcd) (set! gB4dd2@gB4dcd (make-record-type-descriptor '&i/o-invalid-position gB4d91@gB4d8c 'gB4dd0 '#f '#f '#((immutable position)))) (set! gB4f5b@gB4dd2@gB4dcd gB4dd2@gB4dcd) (set! gB4dd4@gB4dcf '#f) (set! gB4f5c@gB4dd4@gB4dcf gB4dd4@gB4dcf) (set! gB4dd6@gB4dce (make-record-constructor-descriptor gB4dd2@gB4dcd gB4d95@gB4d8d gB4dd4@gB4dcf)) (set! gB4f5d@gB4dd6@gB4dce gB4dd6@gB4dce) (set! gB4dd9@p? (record-predicate gB4dd2@gB4dcd)) (set! gB4f5e@gB4dd9@p? gB4dd9@p?) (set! gB4ddb@make-i/o-invalid-position-error (record-constructor gB4dd6@gB4dce)) (set! gB4f5f@gB4ddb@make-i/o-invalid-position-error gB4ddb@make-i/o-invalid-position-error) (set! gB4ddd@gB4dcc (record-accessor gB4dd2@gB4dcd '0)) (set! gB4f60@gB4ddd@gB4dcc gB4ddd@gB4dcc) (set! gB4ddf@i/o-invalid-position-error? (condition-predicate gB4dd2@gB4dcd)) (set! gB4f61@gB4ddf@i/o-invalid-position-error? gB4ddf@i/o-invalid-position-error?) (set! gB4de1@i/o-error-position (condition-accessor gB4dd2@gB4dcd gB4ddd@gB4dcc)) (set! gB4f62@gB4de1@i/o-error-position gB4de1@i/o-error-position) (set! gB4de3@&i/o-invalid-position-rtd gB4dd2@gB4dcd) (set! gB4f63@gB4de3@&i/o-invalid-position-rtd gB4de3@&i/o-invalid-position-rtd) (set! gB4de5@&i/o-invalid-position-rcd gB4dd6@gB4dce) (set! gB4f64@gB4de5@&i/o-invalid-position-rcd gB4de5@&i/o-invalid-position-rcd) (set! gB4ded@gB4de8 (make-record-type-descriptor '&i/o-filename gB4d91@gB4d8c 'gB4deb '#f '#f '#((immutable filename)))) (set! gB4f65@gB4ded@gB4de8 gB4ded@gB4de8) (set! gB4def@gB4dea '#f) (set! gB4f66@gB4def@gB4dea gB4def@gB4dea) (set! gB4df1@gB4de9 (make-record-constructor-descriptor gB4ded@gB4de8 gB4d95@gB4d8d gB4def@gB4dea)) (set! gB4f67@gB4df1@gB4de9 gB4df1@gB4de9) (set! gB4df4@p? (record-predicate gB4ded@gB4de8)) (set! gB4f68@gB4df4@p? gB4df4@p?) (set! gB4df6@make-i/o-filename-error (record-constructor gB4df1@gB4de9)) (set! gB4f69@gB4df6@make-i/o-filename-error gB4df6@make-i/o-filename-error) (set! gB4df8@gB4de7 (record-accessor gB4ded@gB4de8 '0)) (set! gB4f6a@gB4df8@gB4de7 gB4df8@gB4de7) (set! gB4dfa@i/o-filename-error? (condition-predicate gB4ded@gB4de8)) (set! gB4f6b@gB4dfa@i/o-filename-error? gB4dfa@i/o-filename-error?) (set! gB4dfc@i/o-error-filename (condition-accessor gB4ded@gB4de8 gB4df8@gB4de7)) (set! gB4f6c@gB4dfc@i/o-error-filename gB4dfc@i/o-error-filename) (set! gB4dfe@&i/o-filename-rtd gB4ded@gB4de8) (set! gB4f6d@gB4dfe@&i/o-filename-rtd gB4dfe@&i/o-filename-rtd) (set! gB4e00@&i/o-filename-rcd gB4df1@gB4de9) (set! gB4f6e@gB4e00@&i/o-filename-rcd gB4e00@&i/o-filename-rcd) (set! gB4e06@gB4e01 (make-record-type-descriptor '&i/o-file-protection gB4ded@gB4de8 'gB4e04 '#f '#f '#())) (set! gB4f6f@gB4e06@gB4e01 gB4e06@gB4e01) (set! gB4e08@gB4e03 '#f) (set! gB4f70@gB4e08@gB4e03 gB4e08@gB4e03) (set! gB4e0a@gB4e02 (make-record-constructor-descriptor gB4e06@gB4e01 gB4df1@gB4de9 gB4e08@gB4e03)) (set! gB4f71@gB4e0a@gB4e02 gB4e0a@gB4e02) (set! gB4e0d@p? (record-predicate gB4e06@gB4e01)) (set! gB4f72@gB4e0d@p? gB4e0d@p?) (set! gB4e0f@make-i/o-file-protection-error (record-constructor gB4e0a@gB4e02)) (set! gB4f73@gB4e0f@make-i/o-file-protection-error gB4e0f@make-i/o-file-protection-error) (set! gB4e11@i/o-file-protection-error? (condition-predicate gB4e06@gB4e01)) (set! gB4f74@gB4e11@i/o-file-protection-error? gB4e11@i/o-file-protection-error?) (set! gB4e13@&i/o-file-protection-rtd gB4e06@gB4e01) (set! gB4f75@gB4e13@&i/o-file-protection-rtd gB4e13@&i/o-file-protection-rtd) (set! gB4e15@&i/o-file-protection-rcd gB4e0a@gB4e02) (set! gB4f76@gB4e15@&i/o-file-protection-rcd gB4e15@&i/o-file-protection-rcd) (set! gB4e1b@gB4e16 (make-record-type-descriptor '&i/o-file-is-read-only gB4e06@gB4e01 'gB4e19 '#f '#f '#())) (set! gB4f77@gB4e1b@gB4e16 gB4e1b@gB4e16) (set! gB4e1d@gB4e18 '#f) (set! gB4f78@gB4e1d@gB4e18 gB4e1d@gB4e18) (set! gB4e1f@gB4e17 (make-record-constructor-descriptor gB4e1b@gB4e16 gB4e0a@gB4e02 gB4e1d@gB4e18)) (set! gB4f79@gB4e1f@gB4e17 gB4e1f@gB4e17) (set! gB4e22@p? (record-predicate gB4e1b@gB4e16)) (set! gB4f7a@gB4e22@p? gB4e22@p?) (set! gB4e24@make-i/o-file-is-read-only-error (record-constructor gB4e1f@gB4e17)) (set! gB4f7b@gB4e24@make-i/o-file-is-read-only-error gB4e24@make-i/o-file-is-read-only-error) (set! gB4e26@i/o-file-is-read-only-error? (condition-predicate gB4e1b@gB4e16)) (set! gB4f7c@gB4e26@i/o-file-is-read-only-error? gB4e26@i/o-file-is-read-only-error?) (set! gB4e28@&i/o-file-is-read-only-rtd gB4e1b@gB4e16) (set! gB4f7d@gB4e28@&i/o-file-is-read-only-rtd gB4e28@&i/o-file-is-read-only-rtd) (set! gB4e2a@&i/o-file-is-read-only-rcd gB4e1f@gB4e17) (set! gB4f7e@gB4e2a@&i/o-file-is-read-only-rcd gB4e2a@&i/o-file-is-read-only-rcd) (set! gB4e30@gB4e2b (make-record-type-descriptor '&i/o-file-already-exists gB4ded@gB4de8 'gB4e2e '#f '#f '#())) (set! gB4f7f@gB4e30@gB4e2b gB4e30@gB4e2b) (set! gB4e32@gB4e2d '#f) (set! gB4f80@gB4e32@gB4e2d gB4e32@gB4e2d) (set! gB4e34@gB4e2c (make-record-constructor-descriptor gB4e30@gB4e2b gB4df1@gB4de9 gB4e32@gB4e2d)) (set! gB4f81@gB4e34@gB4e2c gB4e34@gB4e2c) (set! gB4e37@p? (record-predicate gB4e30@gB4e2b)) (set! gB4f82@gB4e37@p? gB4e37@p?) (set! gB4e39@make-i/o-file-already-exists-error (record-constructor gB4e34@gB4e2c)) (set! gB4f83@gB4e39@make-i/o-file-already-exists-error gB4e39@make-i/o-file-already-exists-error) (set! gB4e3b@i/o-file-already-exists-error? (condition-predicate gB4e30@gB4e2b)) (set! gB4f84@gB4e3b@i/o-file-already-exists-error? gB4e3b@i/o-file-already-exists-error?) (set! gB4e3d@&i/o-file-already-exists-rtd gB4e30@gB4e2b) (set! gB4f85@gB4e3d@&i/o-file-already-exists-rtd gB4e3d@&i/o-file-already-exists-rtd) (set! gB4e3f@&i/o-file-already-exists-rcd gB4e34@gB4e2c) (set! gB4f86@gB4e3f@&i/o-file-already-exists-rcd gB4e3f@&i/o-file-already-exists-rcd) (set! gB4e45@gB4e40 (make-record-type-descriptor '&i/o-file-does-not-exist gB4ded@gB4de8 'gB4e43 '#f '#f '#())) (set! gB4f87@gB4e45@gB4e40 gB4e45@gB4e40) (set! gB4e47@gB4e42 '#f) (set! gB4f88@gB4e47@gB4e42 gB4e47@gB4e42) (set! gB4e49@gB4e41 (make-record-constructor-descriptor gB4e45@gB4e40 gB4df1@gB4de9 gB4e47@gB4e42)) (set! gB4f89@gB4e49@gB4e41 gB4e49@gB4e41) (set! gB4e4c@p? (record-predicate gB4e45@gB4e40)) (set! gB4f8a@gB4e4c@p? gB4e4c@p?) (set! gB4e4e@make-i/o-file-does-not-exist-error (record-constructor gB4e49@gB4e41)) (set! gB4f8b@gB4e4e@make-i/o-file-does-not-exist-error gB4e4e@make-i/o-file-does-not-exist-error) (set! gB4e50@i/o-file-does-not-exist-error? (condition-predicate gB4e45@gB4e40)) (set! gB4f8c@gB4e50@i/o-file-does-not-exist-error? gB4e50@i/o-file-does-not-exist-error?) (set! gB4e52@&i/o-file-does-not-exist-rtd gB4e45@gB4e40) (set! gB4f8d@gB4e52@&i/o-file-does-not-exist-rtd gB4e52@&i/o-file-does-not-exist-rtd) (set! gB4e54@&i/o-file-does-not-exist-rcd gB4e49@gB4e41) (set! gB4f8e@gB4e54@&i/o-file-does-not-exist-rcd gB4e54@&i/o-file-does-not-exist-rcd) (set! gB4e5c@gB4e57 (make-record-type-descriptor '&i/o-port gB4d91@gB4d8c 'gB4e5a '#f '#f '#((immutable port)))) (set! gB4f8f@gB4e5c@gB4e57 gB4e5c@gB4e57) (set! gB4e5e@gB4e59 '#f) (set! gB4f90@gB4e5e@gB4e59 gB4e5e@gB4e59) (set! gB4e60@gB4e58 (make-record-constructor-descriptor gB4e5c@gB4e57 gB4d95@gB4d8d gB4e5e@gB4e59)) (set! gB4f91@gB4e60@gB4e58 gB4e60@gB4e58) (set! gB4e63@p? (record-predicate gB4e5c@gB4e57)) (set! gB4f92@gB4e63@p? gB4e63@p?) (set! gB4e65@make-i/o-port-error (record-constructor gB4e60@gB4e58)) (set! gB4f93@gB4e65@make-i/o-port-error gB4e65@make-i/o-port-error) (set! gB4e67@gB4e56 (record-accessor gB4e5c@gB4e57 '0)) (set! gB4f94@gB4e67@gB4e56 gB4e67@gB4e56) (set! gB4e69@i/o-port-error? (condition-predicate gB4e5c@gB4e57)) (set! gB4f95@gB4e69@i/o-port-error? gB4e69@i/o-port-error?) (set! gB4e6b@i/o-error-port (condition-accessor gB4e5c@gB4e57 gB4e67@gB4e56)) (set! gB4f96@gB4e6b@i/o-error-port gB4e6b@i/o-error-port) (set! gB4e6d@&i/o-port-rtd gB4e5c@gB4e57) (set! gB4f97@gB4e6d@&i/o-port-rtd gB4e6d@&i/o-port-rtd) (set! gB4e6f@&i/o-port-rcd gB4e60@gB4e58) (set! gB4f98@gB4e6f@&i/o-port-rcd gB4e6f@&i/o-port-rcd) (set! gB4e75@gB4e70 (make-record-type-descriptor '&i/o-decoding gB4e5c@gB4e57 'gB4e73 '#f '#f '#())) (set! gB4f99@gB4e75@gB4e70 gB4e75@gB4e70) (set! gB4e77@gB4e72 '#f) (set! gB4f9a@gB4e77@gB4e72 gB4e77@gB4e72) (set! gB4e79@gB4e71 (make-record-constructor-descriptor gB4e75@gB4e70 gB4e60@gB4e58 gB4e77@gB4e72)) (set! gB4f9b@gB4e79@gB4e71 gB4e79@gB4e71) (set! gB4e7c@p? (record-predicate gB4e75@gB4e70)) (set! gB4f9c@gB4e7c@p? gB4e7c@p?) (set! gB4e7e@make-i/o-decoding-error (record-constructor gB4e79@gB4e71)) (set! gB4f9d@gB4e7e@make-i/o-decoding-error gB4e7e@make-i/o-decoding-error) (set! gB4e80@i/o-decoding-error? (condition-predicate gB4e75@gB4e70)) (set! gB4f9e@gB4e80@i/o-decoding-error? gB4e80@i/o-decoding-error?) (set! gB4e82@&i/o-decoding-rtd gB4e75@gB4e70) (set! gB4f9f@gB4e82@&i/o-decoding-rtd gB4e82@&i/o-decoding-rtd) (set! gB4e84@&i/o-decoding-rcd gB4e79@gB4e71) (set! gB4fa0@gB4e84@&i/o-decoding-rcd gB4e84@&i/o-decoding-rcd) (set! gB4e8c@gB4e87 (make-record-type-descriptor '&i/o-encoding gB4e5c@gB4e57 'gB4e8a '#f '#f '#((immutable char)))) (set! gB4fa1@gB4e8c@gB4e87 gB4e8c@gB4e87) (set! gB4e8e@gB4e89 '#f) (set! gB4fa2@gB4e8e@gB4e89 gB4e8e@gB4e89) (set! gB4e90@gB4e88 (make-record-constructor-descriptor gB4e8c@gB4e87 gB4e60@gB4e58 gB4e8e@gB4e89)) (set! gB4fa3@gB4e90@gB4e88 gB4e90@gB4e88) (set! gB4e93@p? (record-predicate gB4e8c@gB4e87)) (set! gB4fa4@gB4e93@p? gB4e93@p?) (set! gB4e95@make-i/o-encoding-error (record-constructor gB4e90@gB4e88)) (set! gB4fa5@gB4e95@make-i/o-encoding-error gB4e95@make-i/o-encoding-error) (set! gB4e97@gB4e86 (record-accessor gB4e8c@gB4e87 '0)) (set! gB4fa6@gB4e97@gB4e86 gB4e97@gB4e86) (set! gB4e99@i/o-encoding-error? (condition-predicate gB4e8c@gB4e87)) (set! gB4fa7@gB4e99@i/o-encoding-error? gB4e99@i/o-encoding-error?) (set! gB4e9b@i/o-encoding-error-char (condition-accessor gB4e8c@gB4e87 gB4e97@gB4e86)) (set! gB4fa8@gB4e9b@i/o-encoding-error-char gB4e9b@i/o-encoding-error-char) (set! gB4e9d@&i/o-encoding-rtd gB4e8c@gB4e87) (set! gB4fa9@gB4e9d@&i/o-encoding-rtd gB4e9d@&i/o-encoding-rtd) (set! gB4e9f@&i/o-encoding-rcd gB4e90@gB4e88) (set! gB4faa@gB4e9f@&i/o-encoding-rcd gB4e9f@&i/o-encoding-rcd) (set! gB4ea5@gB4ea0 (make-record-type-descriptor '&no-infinities gB4d31@gB4d2c 'gB4ea3 '#f '#f '#())) (set! gB4fab@gB4ea5@gB4ea0 gB4ea5@gB4ea0) (set! gB4ea7@gB4ea2 '#f) (set! gB4fac@gB4ea7@gB4ea2 gB4ea7@gB4ea2) (set! gB4ea9@gB4ea1 (make-record-constructor-descriptor gB4ea5@gB4ea0 gB4d35@gB4d2d gB4ea7@gB4ea2)) (set! gB4fad@gB4ea9@gB4ea1 gB4ea9@gB4ea1) (set! gB4eac@p? (record-predicate gB4ea5@gB4ea0)) (set! gB4fae@gB4eac@p? gB4eac@p?) (set! gB4eae@make-no-infinities-violation (record-constructor gB4ea9@gB4ea1)) (set! gB4faf@gB4eae@make-no-infinities-violation gB4eae@make-no-infinities-violation) (set! gB4eb0@no-infinities-violation? (condition-predicate gB4ea5@gB4ea0)) (set! gB4fb0@gB4eb0@no-infinities-violation? gB4eb0@no-infinities-violation?) (set! gB4eb2@&no-infinities-rtd gB4ea5@gB4ea0) (set! gB4fb1@gB4eb2@&no-infinities-rtd gB4eb2@&no-infinities-rtd) (set! gB4eb4@&no-infinities-rcd gB4ea9@gB4ea1) (set! gB4fb2@gB4eb4@&no-infinities-rcd gB4eb4@&no-infinities-rcd) (set! gB4eba@gB4eb5 (make-record-type-descriptor '&no-nans gB4d31@gB4d2c 'gB4eb8 '#f '#f '#())) (set! gB4fb3@gB4eba@gB4eb5 gB4eba@gB4eb5) (set! gB4ebc@gB4eb7 '#f) (set! gB4fb4@gB4ebc@gB4eb7 gB4ebc@gB4eb7) (set! gB4ebe@gB4eb6 (make-record-constructor-descriptor gB4eba@gB4eb5 gB4d35@gB4d2d gB4ebc@gB4eb7)) (set! gB4fb5@gB4ebe@gB4eb6 gB4ebe@gB4eb6) (set! gB4ec1@p? (record-predicate gB4eba@gB4eb5)) (set! gB4fb6@gB4ec1@p? gB4ec1@p?) (set! gB4ec3@make-no-nans-violation (record-constructor gB4ebe@gB4eb6)) (set! gB4fb7@gB4ec3@make-no-nans-violation gB4ec3@make-no-nans-violation) (set! gB4ec5@no-nans-violation? (condition-predicate gB4eba@gB4eb5)) (set! gB4fb8@gB4ec5@no-nans-violation? gB4ec5@no-nans-violation?) (set! gB4ec7@&no-nans-rtd gB4eba@gB4eb5) (set! gB4fb9@gB4ec7@&no-nans-rtd gB4ec7@&no-nans-rtd) (set! gB4ec9@&no-nans-rcd gB4ebe@gB4eb6) (set! gB4fba@gB4ec9@&no-nans-rcd gB4ec9@&no-nans-rcd) (void))
(begin (begin (gB2a56@gB2a0b@current-primitive-locations (lambda (gB5485@x) (let ((gB5487@t (assq gB5485@x '((&no-nans-rcd . gB4fba@gB4ec9@&no-nans-rcd) (&no-nans-rtd . gB4fb9@gB4ec7@&no-nans-rtd) (&no-infinities-rcd . gB4fb2@gB4eb4@&no-infinities-rcd) (&no-infinities-rtd . gB4fb1@gB4eb2@&no-infinities-rtd) (&i/o-encoding-rcd . gB4faa@gB4e9f@&i/o-encoding-rcd) (&i/o-encoding-rtd . gB4fa9@gB4e9d@&i/o-encoding-rtd) (&i/o-decoding-rcd . gB4fa0@gB4e84@&i/o-decoding-rcd) (&i/o-decoding-rtd . gB4f9f@gB4e82@&i/o-decoding-rtd) (&i/o-port-rcd . gB4f98@gB4e6f@&i/o-port-rcd) (&i/o-port-rtd . gB4f97@gB4e6d@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . gB4f8e@gB4e54@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . gB4f8d@gB4e52@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . gB4f86@gB4e3f@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . gB4f85@gB4e3d@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . gB4f7e@gB4e2a@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . gB4f7d@gB4e28@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . gB4f76@gB4e15@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . gB4f75@gB4e13@&i/o-file-protection-rtd) (&i/o-filename-rcd . gB4f6e@gB4e00@&i/o-filename-rcd) (&i/o-filename-rtd . gB4f6d@gB4dfe@&i/o-filename-rtd) (&i/o-invalid-position-rcd . gB4f64@gB4de5@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . gB4f63@gB4de3@&i/o-invalid-position-rtd) (&i/o-write-rcd . gB4f5a@gB4dca@&i/o-write-rcd) (&i/o-write-rtd . gB4f59@gB4dc8@&i/o-write-rtd) (&i/o-read-rcd . gB4f52@gB4db5@&i/o-read-rcd) (&i/o-read-rtd . gB4f51@gB4db3@&i/o-read-rtd) (&i/o-rcd . gB4f4a@gB4da0@&i/o-rcd) (&i/o-rtd . gB4f49@gB4d9e@&i/o-rtd) (&undefined-rcd . gB4f42@gB4d8b@&undefined-rcd) (&undefined-rtd . gB4f41@gB4d89@&undefined-rtd) (&syntax-rcd . gB4f3a@gB4d76@&syntax-rcd) (&syntax-rtd . gB4f39@gB4d74@&syntax-rtd) (&lexical-rcd . gB4f2e@gB4d55@&lexical-rcd) (&lexical-rtd . gB4f2d@gB4d53@&lexical-rtd) (&implementation-restriction-rcd . gB4f26@gB4d40@&implementation-restriction-rcd) (&implementation-restriction-rtd . gB4f25@gB4d3e@&implementation-restriction-rtd) (&non-continuable-rcd . gB4f1e@gB4d2b@&non-continuable-rcd) (&non-continuable-rtd . gB4f1d@gB4d29@&non-continuable-rtd) (&who-rcd . gB4f16@gB4d16@&who-rcd) (&who-rtd . gB4f15@gB4d14@&who-rtd) (&irritants-rcd . gB4f0c@gB4cfb@&irritants-rcd) (&irritants-rtd . gB4f0b@gB4cf9@&irritants-rtd) (&assertion-rcd . gB4f02@gB4ce0@&assertion-rcd) (&assertion-rtd . gB4f01@gB4cde@&assertion-rtd) (&violation-rcd . gB4efa@gB4ccb@&violation-rcd) (&violation-rtd . gB4ef9@gB4cc9@&violation-rtd) (&error-rcd . gB4ef2@gB4cb6@&error-rcd) (&error-rtd . gB4ef1@gB4cb4@&error-rtd) (&serious-rcd . gB4eea@gB4ca1@&serious-rcd) (&serious-rtd . gB4ee9@gB4c9f@&serious-rtd) (&warning-rcd . gB4ee2@gB4c8c@&warning-rcd) (&warning-rtd . gB4ee1@gB4c8a@&warning-rtd) (&message-rcd . gB4eda@gB4c77@&message-rcd) (&message-rtd . gB4ed9@gB4c75@&message-rtd) (&condition-rcd . gB4ed0@gB4c18@&condition-rcd) (&condition-rtd . gB4ecf@gB4c16@&condition-rtd) (syntax-error . gB4bf2@gB3196@syntax-error) (syntax-dispatch . gB4b90@gB30ba@syntax-dispatch) (load . gB512f@gB4fda@load) (interaction-environment . gB4bfb@gB31a8@interaction-environment) (library-path . gB2cbd@gB2af9@library-path) (mosh-cache-dir . gB2a04@gB28e3@mosh-cache-dir) (make-parameter . gB2a03@gB28e1@make-parameter) (make-variable-transformer . gB4b4d@gB2ee5@make-variable-transformer) (identifier? . gB4bf5@gB319c@identifier?) (generate-temporaries . gB4beb@gB3188@generate-temporaries) (free-identifier=? . gB4bec@gB318a@free-identifier=?) (syntax->datum . gB4bf7@gB31a0@syntax->datum) (datum->syntax . gB4bf6@gB319e@datum->syntax) (bound-identifier=? . gB4bed@gB318c@bound-identifier=?) (make-i/o-write-error . gB4f57@gB4dc4@make-i/o-write-error) (make-i/o-read-error . gB4f4f@gB4daf@make-i/o-read-error) (make-i/o-port-error . gB4f93@gB4e65@make-i/o-port-error) (make-i/o-invalid-position-error . gB4f5f@gB4ddb@make-i/o-invalid-position-error) (make-i/o-filename-error . gB4f69@gB4df6@make-i/o-filename-error) (make-i/o-file-protection-error . gB4f73@gB4e0f@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . gB4f7b@gB4e24@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . gB4f8b@gB4e4e@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . gB4f83@gB4e39@make-i/o-file-already-exists-error) (make-i/o-error . gB4f47@gB4d9a@make-i/o-error) (make-i/o-encoding-error . gB4fa5@gB4e95@make-i/o-encoding-error) (make-i/o-decoding-error . gB4f9d@gB4e7e@make-i/o-decoding-error) (i/o-write-error? . gB4f58@gB4dc6@i/o-write-error?) (i/o-read-error? . gB4f50@gB4db1@i/o-read-error?) (i/o-port-error? . gB4f95@gB4e69@i/o-port-error?) (i/o-invalid-position-error? . gB4f61@gB4ddf@i/o-invalid-position-error?) (i/o-filename-error? . gB4f6b@gB4dfa@i/o-filename-error?) (i/o-file-protection-error? . gB4f74@gB4e11@i/o-file-protection-error?) (i/o-file-is-read-only-error? . gB4f7c@gB4e26@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . gB4f8c@gB4e50@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . gB4f84@gB4e3b@i/o-file-already-exists-error?) (i/o-error? . gB4f48@gB4d9c@i/o-error?) (i/o-error-position . gB4f62@gB4de1@i/o-error-position) (i/o-error-port . gB4f96@gB4e6b@i/o-error-port) (i/o-error-filename . gB4f6c@gB4dfc@i/o-error-filename) (i/o-encoding-error? . gB4fa7@gB4e99@i/o-encoding-error?) (i/o-encoding-error-char . gB4fa8@gB4e9b@i/o-encoding-error-char) (i/o-decoding-error? . gB4f9e@gB4e80@i/o-decoding-error?) (scheme-report-environment . gB4be2@gB3176@scheme-report-environment) (null-environment . gB4be1@gB3174@null-environment) (command-line . gB512c@gB4fd4@command-line) (eval . gB4be4@gB317a@eval) (environment . gB4be0@gB3172@environment) (who-condition? . gB4f13@gB4d10@who-condition?) (warning? . gB4ee0@gB4c88@warning?) (violation? . gB4ef8@gB4cc7@violation?) (undefined-violation? . gB4f40@gB4d87@undefined-violation?) (syntax-violation? . gB4f36@gB4d6e@syntax-violation?) (syntax-violation-subform . gB4f38@gB4d72@syntax-violation-subform) (syntax-violation-form . gB4f37@gB4d70@syntax-violation-form) (syntax-violation . gB4bf4@gB319a@syntax-violation) (serious-condition? . gB4ee8@gB4c9d@serious-condition?) (non-continuable-violation? . gB4f1c@gB4d27@non-continuable-violation?) (message-condition? . gB4ed7@gB4c71@message-condition?) (make-who-condition . gB4f11@gB4d0c@make-who-condition) (make-warning . gB4edf@gB4c86@make-warning) (make-violation . gB4ef7@gB4cc5@make-violation) (make-undefined-violation . gB4f3f@gB4d85@make-undefined-violation) (make-syntax-violation . gB4f33@gB4d68@make-syntax-violation) (make-serious-condition . gB4ee7@gB4c9b@make-serious-condition) (make-non-continuable-violation . gB4f1b@gB4d25@make-non-continuable-violation) (make-message-condition . gB4ed5@gB4c6d@make-message-condition) (make-lexical-violation . gB4f2b@gB4d4f@make-lexical-violation) (make-irritants-condition . gB4f07@gB4cf1@make-irritants-condition) (make-implementation-restriction-violation . gB4f23@gB4d3a@make-implementation-restriction-violation) (make-error . gB4eef@gB4cb0@make-error) (make-assertion-violation . gB4eff@gB4cda@make-assertion-violation) (lexical-violation? . gB4f2c@gB4d51@lexical-violation?) (irritants-condition? . gB4f09@gB4cf5@irritants-condition?) (implementation-restriction-violation? . gB4f24@gB4d3c@implementation-restriction-violation?) (error? . gB4ef0@gB4cb2@error?) (condition-who . gB4f14@gB4d12@condition-who) (condition-message . gB4ed8@gB4c73@condition-message) (condition-irritants . gB4f0a@gB4cf7@condition-irritants) (assertion-violation? . gB4f00@gB4cdc@assertion-violation?) (no-nans-violation? . gB4fb8@gB4ec5@no-nans-violation?) (no-infinities-violation? . gB4fb0@gB4eb0@no-infinities-violation?) (make-no-nans-violation . gB4fb7@gB4ec3@make-no-nans-violation) (make-no-infinities-violation . gB4faf@gB4eae@make-no-infinities-violation) (assertion-error . gB4bf1@gB3194@assertion-error))))) (if gB5487@t (cdr gB5487@t) '#f)))) (gB2ccd@gB2b19@install-library 'gB5462 '(mosh interaction) '() '() '() '() '((regexp? . gB545a) (alist->eq-hash-table . gB5456) (format . gB5453) (string-split . gB5448) (call-process . gB5442) (set-current-directory! . gB543e) (expand-path . gB543d) (current-directory . gB543c) (%spawn . gB543b) (%waitpid . gB543a) (simple-struct-name . gB5439) (simple-struct-set! . gB5438) (simple-struct-ref . gB5437) (make-simple-struct . gB5436) (simple-struct? . gB5435) (pointer-ref-c-int64 . gB5434) (pointer-ref-c-int32 . gB5433) (pointer-ref-c-int16 . gB5432) (pointer-ref-c-int8 . gB5431) (pointer-ref-c-uint64 . gB5430) (pointer-ref-c-uint32 . gB542f) (pointer-ref-c-uint16 . gB542e) (pointer-ref-c-uint8 . gB542d) (pointer-set-c-uint64! . gB542c) (pointer-set-c-uint32! . gB542b) (pointer-set-c-uint16! . gB542a) (pointer-set-c-uint8! . gB5429) (pointer-set-c-int64! . gB5428) (pointer-set-c-int32! . gB5427) (pointer-set-c-int16! . gB5426) (pointer-set-c-int8! . gB5425) (pointer-set-c-pointer! . gB5424) (pointer-set-c-double! . gB5423) (pointer-set-c-float! . gB5422) (pointer-set-c-long-long! . gB5421) (pointer-set-c-long! . gB5420) (pointer-set-c-int! . gB541f) (pointer-set-c-short! . gB541e) (pointer-set-c-char! . gB541d) (pointer-ref-c-pointer . gB541c) (pointer-ref-c-double . gB541b) (pointer-ref-c-float . gB541a) (pointer-ref-c-unsigned-long-long . gB5419) (pointer-ref-c-signed-long-long . gB5418) (pointer-ref-c-unsigned-long . gB5417) (pointer-ref-c-signed-long . gB5416) (pointer-ref-c-unsigned-int . gB5415) (pointer-ref-c-signed-int . gB5414) (pointer-ref-c-unsigned-short . gB5413) (pointer-ref-c-signed-short . gB5412) (pointer-ref-c-unsigned-char . gB5411) (pointer-ref-c-signed-char . gB5410) (pointer->integer . gB540f) (integer->pointer . gB540e) (pointer? . gB540d) (shared-errno . gB540c) (%ffi-supported? . gB5407) (%ffi-pointer->string . gB5406) (%ffi-call . gB5405) (%ffi-lookup . gB5404) (%ffi-open . gB5403) (null-terminated-utf8->string . gB5402) (null-terminated-bytevector->string . gB5401) (%fork . gB5400) (%pipe . gB53ff) (p . gB53fe) (whereis . gB53e2) (register . gB53e1) (vm-join! . gB53e0) (vm-set-value! . gB53df) (vm? . gB53de) (main-vm? . gB53dd) (vm-eval . gB53dc) (vm-self . gB53db) (vm-start! . gB53da) (make-vm . gB53d9) (mutex-try-lock! . gB53d8) (mutex-unlock! . gB53d7) (mutex-lock! . gB53d6) (mutex? . gB53d5) (make-mutex . gB53d4) (condition-variable-notify-all! . gB53d3) (condition-variable-notify! . gB53d2) (condition-variable-wait! . gB53d1) (make-condition-variable . gB53d0) (string-upcase . gB53b8) (string-titlecase . gB53b7) (string-normalize-nfkd . gB53b6) (string-normalize-nfkc . gB53b5) (string-normalize-nfd . gB53b4) (string-normalize-nfc . gB53b3) (string-foldcase . gB53b2) (string-downcase . gB53b1) (string-ci>? . gB53b0) (string-ci>=? . gB53af) (string-ci=? . gB53ae) (string-ci<? . gB53ad) (string-ci<=? . gB53ac) (char-whitespace? . gB53ab) (char-upper-case? . gB53aa) (char-title-case? . gB53a9) (char-numeric? . gB53a8) (char-lower-case? . gB53a7) (char-general-category . gB53a6) (char-upcase . gB53a5) (char-titlecase . gB53a4) (char-foldcase . gB53a3) (char-downcase . gB53a2) (char-ci>? . gB53a1) (char-ci>=? . gB53a0) (char-ci=? . gB539f) (char-ci<? . gB539e) (char-ci<=? . gB539d) (char-alphabetic? . gB539c) (make-variable-transformer . gB2ee4) (identifier? . gB319b) (generate-temporaries . gB3187) (free-identifier=? . gB3189) (syntax->datum . gB319f) (datum->syntax . gB319d) (bound-identifier=? . gB318b) (record-type-descriptor? . gB539b) (record-predicate . gB539a) (record-mutator . gB5399) (record-constructor . gB5398) (record-accessor . gB5397) (make-record-type-descriptor . gB5396) (make-record-constructor-descriptor . gB5395) (record? . gB5394) (record-type-uid . gB5393) (record-type-sealed? . gB5392) (record-type-parent . gB5391) (record-type-opaque? . gB5390) (record-type-name . gB538f) (record-type-generative? . gB538e) (record-type-field-names . gB538d) (record-rtd . gB538c) (record-field-mutable? . gB538b) (delete-file . gB538a) (file-exists? . gB5389) (vector-sort! . gB5388) (vector-sort . gB5387) (list-sort . gB5386) (symbol-hash . gB5385) (string-ci-hash . gB5384) (string-hash . gB5383) (equal-hash . gB5382) (hashtable-equivalence-function . gB5381) (make-hashtable . gB5380) (hashtable-hash-function . gB537f) (make-eqv-hashtable . gB537e) (make-eq-hashtable . gB537d) (hashtable? . gB537c) (hashtable-update! . gB537b) (hashtable-size . gB537a) (hashtable-set! . gB5379) (hashtable-ref . gB5378) (hashtable-mutable? . gB5377) (hashtable-keys . gB5376) (hashtable-entries . gB5375) (hashtable-delete! . gB5374) (hashtable-copy . gB5373) (hashtable-contains? . gB5372) (hashtable-clear! . gB5371) (call-with-output-file . gB5370) (call-with-input-file . gB536f) (write-char . gB536e) (write . gB536d) (with-output-to-file . gB536c) (with-input-from-file . gB536b) (read-char . gB536a) (read . gB5369) (peek-char . gB5368) (open-output-file . gB5367) (open-input-file . gB5366) (newline . gB5365) (display . gB5364) (close-output-port . gB5363) (close-input-port . gB5362) (eof-object? . gB5361) (eof-object . gB5360) (current-error-port . gB535f) (current-output-port . gB535e) (current-input-port . gB535d) (output-port? . gB535c) (input-port? . gB535b) (utf-8-codec . gB535a) (utf-16-codec . gB5359) (transcoder-error-handling-mode . gB5358) (transcoder-eol-style . gB5357) (transcoder-codec . gB5356) (transcoded-port . gB5355) (textual-port? . gB5354) (string->bytevector . gB5353) (standard-output-port . gB5352) (standard-input-port . gB5351) (standard-error-port . gB5350) (set-port-position! . gB534f) (put-u8 . gB534e) (put-string . gB534d) (put-datum . gB534c) (put-char . gB534b) (put-bytevector . gB534a) (port? . gB5349) (port-transcoder . gB5348) (port-position . gB5347) (port-has-set-port-position!? . gB5346) (port-has-port-position? . gB5345) (port-eof? . gB5344) (output-port-buffer-mode . gB5343) (open-string-output-port . gB5342) (open-string-input-port . gB5341) (open-file-output-port . gB5340) (open-file-input/output-port . gB533f) (open-file-input-port . gB533e) (open-bytevector-output-port . gB533d) (open-bytevector-input-port . gB533c) (native-transcoder . gB533b) (native-eol-style . gB533a) (make-transcoder . gB5339) (latin-1-codec . gB5338) (make-i/o-write-error . gB4dc3) (make-i/o-read-error . gB4dae) (make-i/o-port-error . gB4e64) (make-i/o-invalid-position-error . gB4dda) (make-i/o-filename-error . gB4df5) (make-i/o-file-protection-error . gB4e0e) (make-i/o-file-is-read-only-error . gB4e23) (make-i/o-file-does-not-exist-error . gB4e4d) (make-i/o-file-already-exists-error . gB4e38) (make-i/o-error . gB4d99) (make-i/o-encoding-error . gB4e94) (make-i/o-decoding-error . gB4e7d) (make-custom-textual-output-port . gB5337) (make-custom-textual-input/output-port . gB5336) (make-custom-textual-input-port . gB5335) (make-custom-binary-output-port . gB5334) (make-custom-binary-input/output-port . gB5333) (make-custom-binary-input-port . gB5332) (make-bytevector . gB5331) (lookahead-u8 . gB5330) (lookahead-char . gB532f) (i/o-write-error? . gB4dc5) (i/o-read-error? . gB4db0) (i/o-port-error? . gB4e68) (i/o-invalid-position-error? . gB4dde) (i/o-filename-error? . gB4df9) (i/o-file-protection-error? . gB4e10) (i/o-file-is-read-only-error? . gB4e25) (i/o-file-does-not-exist-error? . gB4e4f) (i/o-file-already-exists-error? . gB4e3a) (i/o-error? . gB4d9b) (i/o-error-position . gB4de0) (i/o-error-port . gB4e6a) (i/o-error-filename . gB4dfb) (i/o-encoding-error? . gB4e98) (i/o-encoding-error-char . gB4e9a) (i/o-decoding-error? . gB4e7f) (get-u8 . gB532e) (get-string-n! . gB532d) (get-string-n . gB532c) (get-string-all . gB532b) (get-line . gB532a) (get-datum . gB5329) (get-char . gB5328) (get-bytevector-some . gB5327) (get-bytevector-n! . gB5326) (get-bytevector-n . gB5325) (get-bytevector-all . gB5324) (flush-output-port . gB5323) (close-port . gB5322) (exit . gB531a) (command-line . gB4fd3) (string-fill! . gB5319) (string-set! . gB5318) (set-cdr! . gB5317) (set-car! . gB5316) (remove . gB5315) (remv . gB5314) (remp . gB5313) (remq . gB5312) (partition . gB5311) (memv . gB5310) (memq . gB530f) (memp . gB530e) (member . gB530d) (exists . gB530c) (for-all . gB530b) (fold-right . gB530a) (fold-left . gB5309) (find . gB5308) (filter . gB5307) (cons* . gB5306) (assv . gB5305) (assq . gB5304) (assp . gB5303) (assoc . gB5302) (call-with-string-output-port . gB5301) (call-with-port . gB5300) (call-with-bytevector-output-port . gB52ff) (bytevector->string . gB52fe) (buffer-mode? . gB52fd) (binary-port? . gB52fc) (with-exception-handler . gB52fb) (raise-continuable . gB52fa) (raise . gB52f9) (eval . gB3179) (environment . gB3171) (make-enumeration . gB52f8) (enum-set=? . gB52f7) (enum-set-universe . gB52f6) (enum-set-union . gB52f5) (enum-set-subset? . gB52f4) (enum-set-projection . gB52f3) (enum-set-member? . gB52f2) (enum-set-intersection . gB52f1) (enum-set-indexer . gB52f0) (enum-set-difference . gB52ef) (enum-set-constructor . gB52ee) (enum-set-complement . gB52ed) (enum-set->list . gB52ec) (who-condition? . gB4d0f) (warning? . gB4c87) (violation? . gB4cc6) (undefined-violation? . gB4d86) (syntax-violation? . gB4d6d) (syntax-violation-subform . gB4d71) (syntax-violation-form . gB4d6f) (syntax-violation . gB3199) (simple-conditions . gB52eb) (serious-condition? . gB4c9c) (non-continuable-violation? . gB4d26) (message-condition? . gB4c70) (make-who-condition . gB4d0b) (make-warning . gB4c85) (make-violation . gB4cc4) (make-undefined-violation . gB4d84) (make-syntax-violation . gB4d67) (make-serious-condition . gB4c9a) (make-non-continuable-violation . gB4d24) (make-message-condition . gB4c6c) (make-lexical-violation . gB4d4e) (make-irritants-condition . gB4cf0) (make-implementation-restriction-violation . gB4d39) (make-error . gB4caf) (make-assertion-violation . gB4cd9) (lexical-violation? . gB4d50) (irritants-condition? . gB4cf4) (implementation-restriction-violation? . gB4d3b) (error? . gB4cb1) (condition-who . gB4d11) (condition-predicate . gB52ea) (condition-message . gB4c72) (condition-irritants . gB4cf6) (condition-accessor . gB52e9) (condition . gB52e8) (assertion-violation? . gB4cdb) (condition? . gB52e7) (utf32->string . gB52e6) (utf16->string . gB52e5) (utf8->string . gB52e4) (uint-list->bytevector . gB52e3) (u8-list->bytevector . gB52e2) (string->utf8 . gB52e1) (string->utf32 . gB52e0) (string->utf16 . gB52df) (sint-list->bytevector . gB52de) (native-endianness . gB52dd) (bytevector? . gB52dc) (bytevector=? . gB52db) (bytevector-uint-set! . gB52da) (bytevector-uint-ref . gB52d9) (bytevector-u8-set! . gB52d8) (bytevector-u8-ref . gB52d7) (bytevector-u64-set! . gB52d6) (bytevector-u64-ref . gB52d5) (bytevector-u64-native-set! . gB52d4) (bytevector-u64-native-ref . gB52d3) (bytevector-u32-set! . gB52d2) (bytevector-u32-ref . gB52d1) (bytevector-u32-native-set! . gB52d0) (bytevector-u32-native-ref . gB52cf) (bytevector-u16-set! . gB52ce) (bytevector-u16-ref . gB52cd) (bytevector-u16-native-set! . gB52cc) (bytevector-u16-native-ref . gB52cb) (bytevector-sint-set! . gB52ca) (bytevector-sint-ref . gB52c9) (bytevector-s8-set! . gB52c8) (bytevector-s8-ref . gB52c7) (bytevector-s64-set! . gB52c6) (bytevector-s64-ref . gB52c5) (bytevector-s64-native-set! . gB52c4) (bytevector-s64-native-ref . gB52c3) (bytevector-s32-set! . gB52c2) (bytevector-s32-ref . gB52c1) (bytevector-s32-native-set! . gB52c0) (bytevector-s32-native-ref . gB52bf) (bytevector-s16-set! . gB52be) (bytevector-s16-ref . gB52bd) (bytevector-s16-native-set! . gB52bc) (bytevector-s16-native-ref . gB52bb) (bytevector-length . gB52ba) (bytevector-ieee-single-ref . gB52b9) (bytevector-ieee-single-set! . gB52b8) (bytevector-ieee-single-native-set! . gB52b7) (bytevector-ieee-single-native-ref . gB52b6) (bytevector-ieee-double-set! . gB52b5) (bytevector-ieee-double-ref . gB52b4) (bytevector-ieee-double-native-set! . gB52b3) (bytevector-ieee-double-native-ref . gB52b2) (bytevector-fill! . gB52b1) (bytevector-copy! . gB52b0) (bytevector-copy . gB52af) (bytevector->uint-list . gB52ae) (bytevector->u8-list . gB52ad) (bytevector->sint-list . gB52ac) (no-nans-violation? . gB4ec4) (no-infinities-violation? . gB4eaf) (make-no-nans-violation . gB4ec2) (make-no-infinities-violation . gB4ead) (real->flonum . gB52ab) (flzero? . gB52aa) (fltruncate . gB52a9) (fltan . gB52a8) (flsqrt . gB52a7) (flsin . gB52a6) (flround . gB52a5) (flpositive? . gB52a4) (flonum? . gB52a3) (flodd? . gB52a2) (flnumerator . gB52a1) (flnegative? . gB52a0) (flnan? . gB529f) (flmod0 . gB529e) (flmod . gB529d) (flmin . gB529c) (flmax . gB529b) (fllog . gB529a) (flinteger? . gB5299) (flinfinite? . gB5298) (flfloor . gB5297) (flfinite? . gB5296) (flexpt . gB5295) (flexp . gB5294) (fleven? . gB5293) (fldiv0-and-mod0 . gB5292) (fldiv0 . gB5291) (fldiv-and-mod . gB5290) (fldiv . gB528f) (fldenominator . gB528e) (flcos . gB528d) (flceiling . gB528c) (flatan . gB528b) (flasin . gB528a) (flacos . gB5289) (flabs . gB5288) (fl>? . gB5287) (fl>=? . gB5286) (fl=? . gB5285) (fl<? . gB5284) (fl<=? . gB5283) (fl/ . gB5282) (fl- . gB5281) (fl+ . gB5280) (fl* . gB527f) (fixnum->flonum . gB527e) (fxzero? . gB527d) (fxxor . gB527c) (fxrotate-bit-field . gB527b) (fxreverse-bit-field . gB527a) (fxpositive? . gB5279) (fxodd? . gB5278) (fxnot . gB5277) (fxnegative? . gB5276) (fxmod0 . gB5275) (fxmod . gB5274) (fxmin . gB5273) (fxmax . gB5272) (fxlength . gB5271) (fxior . gB5270) (fxif . gB526f) (fxfirst-bit-set . gB526e) (fxeven? . gB526d) (fxdiv0-and-mod0 . gB526c) (fxdiv0 . gB526b) (fxdiv-and-mod . gB526a) (fxdiv . gB5269) (fxcopy-bit-field . gB5268) (fxcopy-bit . gB5267) (fxbit-set? . gB5266) (fxbit-field . gB5265) (fxbit-count . gB5264) (fxarithmetic-shift-right . gB5263) (fxarithmetic-shift-left . gB5262) (fxarithmetic-shift . gB5261) (fxand . gB5260) (fx>? . gB525f) (fx>=? . gB525e) (fx=? . gB525d) (fx<? . gB525c) (fx<=? . gB525b) (fx-/carry . gB525a) (fx- . gB5259) (fx+/carry . gB5258) (fx+ . gB5257) (fx*/carry . gB5256) (fx* . gB5255) (greatest-fixnum . gB5254) (least-fixnum . gB5253) (fixnum-width . gB5252) (fixnum? . gB5251) (bitwise-rotate-bit-field . gB5250) (bitwise-reverse-bit-field . gB524f) (bitwise-length . gB524e) (bitwise-if . gB524d) (bitwise-first-bit-set . gB524c) (bitwise-copy-bit-field . gB524b) (bitwise-copy-bit . gB524a) (bitwise-bit-set? . gB5249) (bitwise-bit-field . gB5248) (bitwise-bit-count . gB5247) (bitwise-xor . gB5246) (bitwise-ior . gB5245) (bitwise-and . gB5244) (bitwise-not . gB5243) (bitwise-arithmetic-shift-right . gB5242) (bitwise-arithmetic-shift-left . gB5241) (bitwise-arithmetic-shift . gB5240) (zero? . gB523f) (vector? . gB523e) (vector-set! . gB523d) (vector-ref . gB523c) (vector-map . gB523b) (vector-length . gB523a) (vector-for-each . gB5239) (vector-fill! . gB5238) (vector->list . gB5237) (vector . gB5236) (values . gB5235) (truncate . gB5234) (tan . gB5233) (symbol? . gB5232) (symbol=? . gB5231) (symbol->string . gB5230) (substring . gB522f) (string? . gB522e) (string>? . gB522d) (string>=? . gB522c) (string=? . gB522b) (string<? . gB522a) (string<=? . gB5229) (string-ref . gB5228) (string-length . gB5227) (string-for-each . gB5226) (string-copy . gB5225) (string-append . gB5224) (string->symbol . gB5223) (string->number . gB5222) (string->list . gB5221) (string . gB5220) (sqrt . gB521f) (sin . gB521e) (round . gB521d) (reverse . gB521c) (real? . gB521b) (real-valued? . gB521a) (real-part . gB5219) (rationalize . gB5218) (rational? . gB5217) (rational-valued? . gB5216) (procedure? . gB5215) (positive? . gB5214) (pair? . gB5213) (odd? . gB5212) (numerator . gB5211) (number? . gB5210) (number->string . gB520f) (null? . gB520e) (not . gB520d) (negative? . gB520c) (nan? . gB520b) (min . gB520a) (max . gB5209) (map . gB5208) (make-vector . gB5207) (make-string . gB5206) (make-rectangular . gB5205) (make-polar . gB5204) (magnitude . gB5203) (log . gB5202) (list? . gB5201) (list-tail . gB5200) (list-ref . gB51ff) (list->vector . gB51fe) (list->string . gB51fd) (list . gB51fc) (length . gB51fb) (lcm . gB51fa) (integer? . gB51f9) (integer-valued? . gB51f8) (integer->char . gB51f7) (infinite? . gB51f6) (inexact? . gB51f5) (inexact . gB51f4) (imag-part . gB51f3) (gcd . gB51f2) (for-each . gB51f1) (floor . gB51f0) (finite? . gB51ef) (expt . gB51ee) (exp . gB51ed) (exact? . gB51ec) (exact-integer-sqrt . gB51eb) (exact . gB51ea) (even? . gB51e9) (error . gB51e8) (eqv? . gB51e7) (equal? . gB51e6) (eq? . gB51e5) (dynamic-wind . gB51e4) (div0-and-mod0 . gB51e3) (mod0 . gB51e2) (div0 . gB51e1) (div-and-mod . gB51e0) (mod . gB51df) (div . gB51de) (denominator . gB51dd) (cos . gB51dc) (cons . gB51db) (complex? . gB51da) (char? . gB51d9) (char>? . gB51d8) (char>=? . gB51d7) (char=? . gB51d6) (char<? . gB51d5) (char<=? . gB51d4) (char->integer . gB51d3) (ceiling . gB51d2) (call-with-values . gB51d1) (call/cc . gB51d0) (call-with-current-continuation . gB51cf) (cddddr . gB51ce) (cdddar . gB51cd) (cddadr . gB51cc) (cddaar . gB51cb) (cdaddr . gB51ca) (cdadar . gB51c9) (cdaadr . gB51c8) (cdaaar . gB51c7) (cadddr . gB51c6) (caddar . gB51c5) (cadadr . gB51c4) (cadaar . gB51c3) (caaddr . gB51c2) (caadar . gB51c1) (caaadr . gB51c0) (caaaar . gB51bf) (cdddr . gB51be) (cddar . gB51bd) (cdadr . gB51bc) (cdaar . gB51bb) (caddr . gB51ba) (cadar . gB51b9) (caadr . gB51b8) (caaar . gB51b7) (cddr . gB51b6) (cdar . gB51b5) (cadr . gB51b4) (caar . gB51b3) (cdr . gB51b2) (car . gB51b1) (boolean? . gB51b0) (boolean=? . gB51af) (atan . gB51ae) (assertion-violation . gB51ad) (asin . gB51ac) (apply . gB51ab) (append . gB51aa) (angle . gB51a9) (acos . gB51a8) (abs . gB51a7) (/ . gB51a6) (* . gB51a5) (- . gB51a4) (+ . gB51a3) (>= . gB51a2) (> . gB51a1) (= . gB51a0) (<= . gB519f) (< . gB519e) (library . gB519d) (&no-nans . gB519c) (&no-infinities . gB519b) (&i/o-encoding . gB519a) (&i/o-decoding . gB5199) (&i/o-port . gB5198) (&i/o-file-does-not-exist . gB5197) (&i/o-file-already-exists . gB5196) (&i/o-file-is-read-only . gB5195) (&i/o-file-protection . gB5194) (&i/o-filename . gB5193) (&i/o-invalid-position . gB5192) (&i/o-write . gB5191) (&i/o-read . gB5190) (&i/o . gB518f) (&undefined . gB518e) (&syntax . gB518d) (&lexical . gB518c) (&implementation-restriction . gB518b) (&non-continuable . gB518a) (&who . gB5189) (&irritants . gB5188) (&assertion . gB5187) (&violation . gB5186) (&error . gB5185) (&serious . gB5184) (&warning . gB5183) (&message . gB5182) (&condition . gB5181) (define-condition-type . gB5180) (define-enumeration . gB517f) (define-record-type . gB517e) (parent-rtd . gB517d) (nongenerative . gB517c) (opaque . gB517b) (sealed . gB517a) (protocol . gB5179) (parent . gB5178) (immutable . gB5177) (mutable . gB5176) (fields . gB5175) (error-handling-mode . gB5174) (file-options . gB5173) (buffer-mode . gB5172) (eol-style . gB5171) (guard . gB5170) (unsyntax-splicing . gB516d) (unsyntax . gB516c) (unquote-splicing . gB516b) (unquote . gB516a) (_ . gB5169) (else . gB5168) (=> . gB5167) (... . gB5166) (assert . gB5165) (endianness . gB5164) (time . gB5162) (do . gB5161) (cond . gB5160) (let* . gB515f) (let*-values . gB515e) (let-values . gB515d) (identifier-syntax . gB515c) (with-syntax . gB515b) (quasisyntax . gB515a) (quasiquote . gB5159) (syntax-rules . gB5158) (include . gB5157) (record-constructor-descriptor . gB5155) (record-type-descriptor . gB5154) (case . gB5153) (unless . gB5151) (when . gB5150) (or . gB514f) (and . gB514e) (if . gB514d) (let . gB514c) (letrec* . gB514b) (letrec . gB514a) (case-lambda . gB5148) (lambda . gB5147) (syntax . gB5146) (syntax-case . gB5145) (quote . gB5144) (letrec-syntax . gB5142) (let-syntax . gB5141) (set! . gB5140) (import . gB513f) (begin . gB513e) (define-syntax . gB513c) (define . gB513b)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB5463 '(psyntax null-environment-5) '() '() '() '() '((make-promise . gB531b) (unquote-splicing . gB516b) (unquote . gB516a) (_ . gB5169) (else . gB5168) (=> . gB5167) (... . gB5166) (delay . gB5163) (do . gB5161) (cond . gB5160) (let* . gB515f) (quasiquote . gB5159) (syntax-rules . gB5158) (case . gB5153) (or . gB514f) (and . gB514e) (if . gB514d) (let . gB514c) (letrec . gB514a) (lambda . gB5147) (quote . gB5144) (letrec-syntax . gB5142) (let-syntax . gB5141) (set! . gB5140) (begin . gB513e) (define-syntax . gB513c) (define . gB513b)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB5464 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . gB53b0) (string-ci>=? . gB53af) (string-ci=? . gB53ae) (string-ci<? . gB53ad) (string-ci<=? . gB53ac) (char-whitespace? . gB53ab) (char-upper-case? . gB53aa) (char-numeric? . gB53a8) (char-lower-case? . gB53a7) (char-upcase . gB53a5) (char-downcase . gB53a2) (char-ci>? . gB53a1) (char-ci>=? . gB53a0) (char-ci=? . gB539f) (char-ci<? . gB539e) (char-ci<=? . gB539d) (char-alphabetic? . gB539c) (call-with-output-file . gB5370) (call-with-input-file . gB536f) (write-char . gB536e) (write . gB536d) (with-output-to-file . gB536c) (with-input-from-file . gB536b) (read-char . gB536a) (read . gB5369) (peek-char . gB5368) (open-output-file . gB5367) (open-input-file . gB5366) (newline . gB5365) (display . gB5364) (close-output-port . gB5363) (close-input-port . gB5362) (eof-object . gB5360) (current-output-port . gB535e) (current-input-port . gB535d) (output-port? . gB535c) (input-port? . gB535b) (scheme-report-environment . gB3175) (quotient . gB5321) (null-environment . gB3173) (remainder . gB5320) (modulo . gB531f) (inexact->exact . gB531e) (force . gB531d) (exact->inexact . gB531c) (make-promise . gB531b) (string-fill! . gB5319) (string-set! . gB5318) (set-cdr! . gB5317) (set-car! . gB5316) (memv . gB5310) (memq . gB530f) (member . gB530d) (assv . gB5305) (assq . gB5304) (assoc . gB5302) (eval . gB3179) (zero? . gB523f) (vector? . gB523e) (vector-set! . gB523d) (vector-ref . gB523c) (vector-length . gB523a) (vector-fill! . gB5238) (vector->list . gB5237) (vector . gB5236) (values . gB5235) (truncate . gB5234) (tan . gB5233) (symbol? . gB5232) (symbol->string . gB5230) (substring . gB522f) (string? . gB522e) (string>? . gB522d) (string>=? . gB522c) (string=? . gB522b) (string<? . gB522a) (string<=? . gB5229) (string-ref . gB5228) (string-length . gB5227) (string-copy . gB5225) (string-append . gB5224) (string->symbol . gB5223) (string->number . gB5222) (string->list . gB5221) (string . gB5220) (sqrt . gB521f) (sin . gB521e) (round . gB521d) (reverse . gB521c) (real? . gB521b) (real-part . gB5219) (rationalize . gB5218) (rational? . gB5217) (procedure? . gB5215) (positive? . gB5214) (pair? . gB5213) (odd? . gB5212) (numerator . gB5211) (number? . gB5210) (number->string . gB520f) (not . gB520d) (negative? . gB520c) (min . gB520a) (max . gB5209) (map . gB5208) (make-vector . gB5207) (make-string . gB5206) (make-rectangular . gB5205) (make-polar . gB5204) (magnitude . gB5203) (log . gB5202) (list? . gB5201) (list-tail . gB5200) (list-ref . gB51ff) (list->vector . gB51fe) (list->string . gB51fd) (list . gB51fc) (length . gB51fb) (lcm . gB51fa) (integer? . gB51f9) (integer->char . gB51f7) (inexact? . gB51f5) (imag-part . gB51f3) (gcd . gB51f2) (for-each . gB51f1) (floor . gB51f0) (expt . gB51ee) (exp . gB51ed) (exact? . gB51ec) (even? . gB51e9) (eqv? . gB51e7) (equal? . gB51e6) (eq? . gB51e5) (dynamic-wind . gB51e4) (denominator . gB51dd) (cos . gB51dc) (cons . gB51db) (complex? . gB51da) (char? . gB51d9) (char>? . gB51d8) (char>=? . gB51d7) (char=? . gB51d6) (char<? . gB51d5) (char<=? . gB51d4) (char->integer . gB51d3) (ceiling . gB51d2) (call-with-values . gB51d1) (call-with-current-continuation . gB51cf) (cddddr . gB51ce) (cdddar . gB51cd) (cddadr . gB51cc) (cddaar . gB51cb) (cdaddr . gB51ca) (cdadar . gB51c9) (cdaadr . gB51c8) (cdaaar . gB51c7) (cadddr . gB51c6) (caddar . gB51c5) (cadadr . gB51c4) (cadaar . gB51c3) (caaddr . gB51c2) (caadar . gB51c1) (caaadr . gB51c0) (caaaar . gB51bf) (cdddr . gB51be) (cddar . gB51bd) (cdadr . gB51bc) (cdaar . gB51bb) (caddr . gB51ba) (cadar . gB51b9) (caadr . gB51b8) (caaar . gB51b7) (cddr . gB51b6) (cdar . gB51b5) (cadr . gB51b4) (caar . gB51b3) (cdr . gB51b2) (car . gB51b1) (boolean? . gB51b0) (atan . gB51ae) (asin . gB51ac) (apply . gB51ab) (append . gB51aa) (angle . gB51a9) (acos . gB51a8) (abs . gB51a7) (/ . gB51a6) (* . gB51a5) (- . gB51a4) (+ . gB51a3) (>= . gB51a2) (> . gB51a1) (= . gB51a0) (<= . gB519f) (< . gB519e) (unquote-splicing . gB516b) (unquote . gB516a) (else . gB5168) (=> . gB5167) (... . gB5166) (delay . gB5163) (do . gB5161) (cond . gB5160) (let* . gB515f) (quasiquote . gB5159) (syntax-rules . gB5158) (case . gB5153) (or . gB514f) (and . gB514e) (if . gB514d) (let . gB514c) (letrec . gB514a) (lambda . gB5147) (quote . gB5144) (letrec-syntax . gB5142) (let-syntax . gB5141) (set! . gB5140) (begin . gB513e) (define-syntax . gB513c) (define . gB513b)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB5465 '(psyntax modules) '() '() '() '() '((module . gB513d)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB5466 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB5467 '(rnrs) '(6) '() '() '() '((regexp? . gB545a) (string-upcase . gB53b8) (string-titlecase . gB53b7) (string-normalize-nfkd . gB53b6) (string-normalize-nfkc . gB53b5) (string-normalize-nfd . gB53b4) (string-normalize-nfc . gB53b3) (string-foldcase . gB53b2) (string-downcase . gB53b1) (string-ci>? . gB53b0) (string-ci>=? . gB53af) (string-ci=? . gB53ae) (string-ci<? . gB53ad) (string-ci<=? . gB53ac) (char-whitespace? . gB53ab) (char-upper-case? . gB53aa) (char-title-case? . gB53a9) (char-numeric? . gB53a8) (char-lower-case? . gB53a7) (char-general-category . gB53a6) (char-upcase . gB53a5) (char-titlecase . gB53a4) (char-foldcase . gB53a3) (char-downcase . gB53a2) (char-ci>? . gB53a1) (char-ci>=? . gB53a0) (char-ci=? . gB539f) (char-ci<? . gB539e) (char-ci<=? . gB539d) (char-alphabetic? . gB539c) (make-variable-transformer . gB2ee4) (identifier? . gB319b) (generate-temporaries . gB3187) (free-identifier=? . gB3189) (syntax->datum . gB319f) (datum->syntax . gB319d) (bound-identifier=? . gB318b) (record-type-descriptor? . gB539b) (record-predicate . gB539a) (record-mutator . gB5399) (record-constructor . gB5398) (record-accessor . gB5397) (make-record-type-descriptor . gB5396) (make-record-constructor-descriptor . gB5395) (record? . gB5394) (record-type-uid . gB5393) (record-type-sealed? . gB5392) (record-type-parent . gB5391) (record-type-opaque? . gB5390) (record-type-name . gB538f) (record-type-generative? . gB538e) (record-type-field-names . gB538d) (record-rtd . gB538c) (record-field-mutable? . gB538b) (delete-file . gB538a) (file-exists? . gB5389) (vector-sort! . gB5388) (vector-sort . gB5387) (list-sort . gB5386) (symbol-hash . gB5385) (string-ci-hash . gB5384) (string-hash . gB5383) (equal-hash . gB5382) (hashtable-equivalence-function . gB5381) (make-hashtable . gB5380) (hashtable-hash-function . gB537f) (make-eqv-hashtable . gB537e) (make-eq-hashtable . gB537d) (hashtable? . gB537c) (hashtable-update! . gB537b) (hashtable-size . gB537a) (hashtable-set! . gB5379) (hashtable-ref . gB5378) (hashtable-mutable? . gB5377) (hashtable-keys . gB5376) (hashtable-entries . gB5375) (hashtable-delete! . gB5374) (hashtable-copy . gB5373) (hashtable-contains? . gB5372) (hashtable-clear! . gB5371) (call-with-output-file . gB5370) (call-with-input-file . gB536f) (write-char . gB536e) (write . gB536d) (with-output-to-file . gB536c) (with-input-from-file . gB536b) (read-char . gB536a) (read . gB5369) (peek-char . gB5368) (open-output-file . gB5367) (open-input-file . gB5366) (newline . gB5365) (display . gB5364) (close-output-port . gB5363) (close-input-port . gB5362) (eof-object? . gB5361) (eof-object . gB5360) (current-error-port . gB535f) (current-output-port . gB535e) (current-input-port . gB535d) (output-port? . gB535c) (input-port? . gB535b) (utf-8-codec . gB535a) (utf-16-codec . gB5359) (transcoder-error-handling-mode . gB5358) (transcoder-eol-style . gB5357) (transcoder-codec . gB5356) (transcoded-port . gB5355) (textual-port? . gB5354) (string->bytevector . gB5353) (standard-output-port . gB5352) (standard-input-port . gB5351) (standard-error-port . gB5350) (set-port-position! . gB534f) (put-u8 . gB534e) (put-string . gB534d) (put-datum . gB534c) (put-char . gB534b) (put-bytevector . gB534a) (port? . gB5349) (port-transcoder . gB5348) (port-position . gB5347) (port-has-set-port-position!? . gB5346) (port-has-port-position? . gB5345) (port-eof? . gB5344) (output-port-buffer-mode . gB5343) (open-string-output-port . gB5342) (open-string-input-port . gB5341) (open-file-output-port . gB5340) (open-file-input/output-port . gB533f) (open-file-input-port . gB533e) (open-bytevector-output-port . gB533d) (open-bytevector-input-port . gB533c) (native-transcoder . gB533b) (native-eol-style . gB533a) (make-transcoder . gB5339) (latin-1-codec . gB5338) (make-i/o-write-error . gB4dc3) (make-i/o-read-error . gB4dae) (make-i/o-port-error . gB4e64) (make-i/o-invalid-position-error . gB4dda) (make-i/o-filename-error . gB4df5) (make-i/o-file-protection-error . gB4e0e) (make-i/o-file-is-read-only-error . gB4e23) (make-i/o-file-does-not-exist-error . gB4e4d) (make-i/o-file-already-exists-error . gB4e38) (make-i/o-error . gB4d99) (make-i/o-encoding-error . gB4e94) (make-i/o-decoding-error . gB4e7d) (make-custom-textual-output-port . gB5337) (make-custom-textual-input/output-port . gB5336) (make-custom-textual-input-port . gB5335) (make-custom-binary-output-port . gB5334) (make-custom-binary-input/output-port . gB5333) (make-custom-binary-input-port . gB5332) (make-bytevector . gB5331) (lookahead-u8 . gB5330) (lookahead-char . gB532f) (i/o-write-error? . gB4dc5) (i/o-read-error? . gB4db0) (i/o-port-error? . gB4e68) (i/o-invalid-position-error? . gB4dde) (i/o-filename-error? . gB4df9) (i/o-file-protection-error? . gB4e10) (i/o-file-is-read-only-error? . gB4e25) (i/o-file-does-not-exist-error? . gB4e4f) (i/o-file-already-exists-error? . gB4e3a) (i/o-error? . gB4d9b) (i/o-error-position . gB4de0) (i/o-error-port . gB4e6a) (i/o-error-filename . gB4dfb) (i/o-encoding-error? . gB4e98) (i/o-encoding-error-char . gB4e9a) (i/o-decoding-error? . gB4e7f) (get-u8 . gB532e) (get-string-n! . gB532d) (get-string-n . gB532c) (get-string-all . gB532b) (get-line . gB532a) (get-datum . gB5329) (get-char . gB5328) (get-bytevector-some . gB5327) (get-bytevector-n! . gB5326) (get-bytevector-n . gB5325) (get-bytevector-all . gB5324) (flush-output-port . gB5323) (close-port . gB5322) (exit . gB531a) (command-line . gB4fd3) (remove . gB5315) (remv . gB5314) (remp . gB5313) (remq . gB5312) (partition . gB5311) (memv . gB5310) (memq . gB530f) (memp . gB530e) (member . gB530d) (exists . gB530c) (for-all . gB530b) (fold-right . gB530a) (fold-left . gB5309) (find . gB5308) (filter . gB5307) (cons* . gB5306) (assv . gB5305) (assq . gB5304) (assp . gB5303) (assoc . gB5302) (call-with-string-output-port . gB5301) (call-with-port . gB5300) (call-with-bytevector-output-port . gB52ff) (bytevector->string . gB52fe) (buffer-mode? . gB52fd) (binary-port? . gB52fc) (with-exception-handler . gB52fb) (raise-continuable . gB52fa) (raise . gB52f9) (make-enumeration . gB52f8) (enum-set=? . gB52f7) (enum-set-universe . gB52f6) (enum-set-union . gB52f5) (enum-set-subset? . gB52f4) (enum-set-projection . gB52f3) (enum-set-member? . gB52f2) (enum-set-intersection . gB52f1) (enum-set-indexer . gB52f0) (enum-set-difference . gB52ef) (enum-set-constructor . gB52ee) (enum-set-complement . gB52ed) (enum-set->list . gB52ec) (who-condition? . gB4d0f) (warning? . gB4c87) (violation? . gB4cc6) (undefined-violation? . gB4d86) (syntax-violation? . gB4d6d) (syntax-violation-subform . gB4d71) (syntax-violation-form . gB4d6f) (syntax-violation . gB3199) (simple-conditions . gB52eb) (serious-condition? . gB4c9c) (non-continuable-violation? . gB4d26) (message-condition? . gB4c70) (make-who-condition . gB4d0b) (make-warning . gB4c85) (make-violation . gB4cc4) (make-undefined-violation . gB4d84) (make-syntax-violation . gB4d67) (make-serious-condition . gB4c9a) (make-non-continuable-violation . gB4d24) (make-message-condition . gB4c6c) (make-lexical-violation . gB4d4e) (make-irritants-condition . gB4cf0) (make-implementation-restriction-violation . gB4d39) (make-error . gB4caf) (make-assertion-violation . gB4cd9) (lexical-violation? . gB4d50) (irritants-condition? . gB4cf4) (implementation-restriction-violation? . gB4d3b) (error? . gB4cb1) (condition-who . gB4d11) (condition-predicate . gB52ea) (condition-message . gB4c72) (condition-irritants . gB4cf6) (condition-accessor . gB52e9) (condition . gB52e8) (assertion-violation? . gB4cdb) (condition? . gB52e7) (utf32->string . gB52e6) (utf16->string . gB52e5) (utf8->string . gB52e4) (uint-list->bytevector . gB52e3) (u8-list->bytevector . gB52e2) (string->utf8 . gB52e1) (string->utf32 . gB52e0) (string->utf16 . gB52df) (sint-list->bytevector . gB52de) (native-endianness . gB52dd) (bytevector? . gB52dc) (bytevector=? . gB52db) (bytevector-uint-set! . gB52da) (bytevector-uint-ref . gB52d9) (bytevector-u8-set! . gB52d8) (bytevector-u8-ref . gB52d7) (bytevector-u64-set! . gB52d6) (bytevector-u64-ref . gB52d5) (bytevector-u64-native-set! . gB52d4) (bytevector-u64-native-ref . gB52d3) (bytevector-u32-set! . gB52d2) (bytevector-u32-ref . gB52d1) (bytevector-u32-native-set! . gB52d0) (bytevector-u32-native-ref . gB52cf) (bytevector-u16-set! . gB52ce) (bytevector-u16-ref . gB52cd) (bytevector-u16-native-set! . gB52cc) (bytevector-u16-native-ref . gB52cb) (bytevector-sint-set! . gB52ca) (bytevector-sint-ref . gB52c9) (bytevector-s8-set! . gB52c8) (bytevector-s8-ref . gB52c7) (bytevector-s64-set! . gB52c6) (bytevector-s64-ref . gB52c5) (bytevector-s64-native-set! . gB52c4) (bytevector-s64-native-ref . gB52c3) (bytevector-s32-set! . gB52c2) (bytevector-s32-ref . gB52c1) (bytevector-s32-native-set! . gB52c0) (bytevector-s32-native-ref . gB52bf) (bytevector-s16-set! . gB52be) (bytevector-s16-ref . gB52bd) (bytevector-s16-native-set! . gB52bc) (bytevector-s16-native-ref . gB52bb) (bytevector-length . gB52ba) (bytevector-ieee-single-ref . gB52b9) (bytevector-ieee-single-set! . gB52b8) (bytevector-ieee-single-native-set! . gB52b7) (bytevector-ieee-single-native-ref . gB52b6) (bytevector-ieee-double-set! . gB52b5) (bytevector-ieee-double-ref . gB52b4) (bytevector-ieee-double-native-set! . gB52b3) (bytevector-ieee-double-native-ref . gB52b2) (bytevector-fill! . gB52b1) (bytevector-copy! . gB52b0) (bytevector-copy . gB52af) (bytevector->uint-list . gB52ae) (bytevector->u8-list . gB52ad) (bytevector->sint-list . gB52ac) (no-nans-violation? . gB4ec4) (no-infinities-violation? . gB4eaf) (make-no-nans-violation . gB4ec2) (make-no-infinities-violation . gB4ead) (real->flonum . gB52ab) (flzero? . gB52aa) (fltruncate . gB52a9) (fltan . gB52a8) (flsqrt . gB52a7) (flsin . gB52a6) (flround . gB52a5) (flpositive? . gB52a4) (flonum? . gB52a3) (flodd? . gB52a2) (flnumerator . gB52a1) (flnegative? . gB52a0) (flnan? . gB529f) (flmod0 . gB529e) (flmod . gB529d) (flmin . gB529c) (flmax . gB529b) (fllog . gB529a) (flinteger? . gB5299) (flinfinite? . gB5298) (flfloor . gB5297) (flfinite? . gB5296) (flexpt . gB5295) (flexp . gB5294) (fleven? . gB5293) (fldiv0-and-mod0 . gB5292) (fldiv0 . gB5291) (fldiv-and-mod . gB5290) (fldiv . gB528f) (fldenominator . gB528e) (flcos . gB528d) (flceiling . gB528c) (flatan . gB528b) (flasin . gB528a) (flacos . gB5289) (flabs . gB5288) (fl>? . gB5287) (fl>=? . gB5286) (fl=? . gB5285) (fl<? . gB5284) (fl<=? . gB5283) (fl/ . gB5282) (fl- . gB5281) (fl+ . gB5280) (fl* . gB527f) (fixnum->flonum . gB527e) (fxzero? . gB527d) (fxxor . gB527c) (fxrotate-bit-field . gB527b) (fxreverse-bit-field . gB527a) (fxpositive? . gB5279) (fxodd? . gB5278) (fxnot . gB5277) (fxnegative? . gB5276) (fxmod0 . gB5275) (fxmod . gB5274) (fxmin . gB5273) (fxmax . gB5272) (fxlength . gB5271) (fxior . gB5270) (fxif . gB526f) (fxfirst-bit-set . gB526e) (fxeven? . gB526d) (fxdiv0-and-mod0 . gB526c) (fxdiv0 . gB526b) (fxdiv-and-mod . gB526a) (fxdiv . gB5269) (fxcopy-bit-field . gB5268) (fxcopy-bit . gB5267) (fxbit-set? . gB5266) (fxbit-field . gB5265) (fxbit-count . gB5264) (fxarithmetic-shift-right . gB5263) (fxarithmetic-shift-left . gB5262) (fxarithmetic-shift . gB5261) (fxand . gB5260) (fx>? . gB525f) (fx>=? . gB525e) (fx=? . gB525d) (fx<? . gB525c) (fx<=? . gB525b) (fx-/carry . gB525a) (fx- . gB5259) (fx+/carry . gB5258) (fx+ . gB5257) (fx*/carry . gB5256) (fx* . gB5255) (greatest-fixnum . gB5254) (least-fixnum . gB5253) (fixnum-width . gB5252) (fixnum? . gB5251) (bitwise-rotate-bit-field . gB5250) (bitwise-reverse-bit-field . gB524f) (bitwise-length . gB524e) (bitwise-if . gB524d) (bitwise-first-bit-set . gB524c) (bitwise-copy-bit-field . gB524b) (bitwise-copy-bit . gB524a) (bitwise-bit-set? . gB5249) (bitwise-bit-field . gB5248) (bitwise-bit-count . gB5247) (bitwise-xor . gB5246) (bitwise-ior . gB5245) (bitwise-and . gB5244) (bitwise-not . gB5243) (bitwise-arithmetic-shift-right . gB5242) (bitwise-arithmetic-shift-left . gB5241) (bitwise-arithmetic-shift . gB5240) (zero? . gB523f) (vector? . gB523e) (vector-set! . gB523d) (vector-ref . gB523c) (vector-map . gB523b) (vector-length . gB523a) (vector-for-each . gB5239) (vector-fill! . gB5238) (vector->list . gB5237) (vector . gB5236) (values . gB5235) (truncate . gB5234) (tan . gB5233) (symbol? . gB5232) (symbol=? . gB5231) (symbol->string . gB5230) (substring . gB522f) (string? . gB522e) (string>? . gB522d) (string>=? . gB522c) (string=? . gB522b) (string<? . gB522a) (string<=? . gB5229) (string-ref . gB5228) (string-length . gB5227) (string-for-each . gB5226) (string-copy . gB5225) (string-append . gB5224) (string->symbol . gB5223) (string->number . gB5222) (string->list . gB5221) (string . gB5220) (sqrt . gB521f) (sin . gB521e) (round . gB521d) (reverse . gB521c) (real? . gB521b) (real-valued? . gB521a) (real-part . gB5219) (rationalize . gB5218) (rational? . gB5217) (rational-valued? . gB5216) (procedure? . gB5215) (positive? . gB5214) (pair? . gB5213) (odd? . gB5212) (numerator . gB5211) (number? . gB5210) (number->string . gB520f) (null? . gB520e) (not . gB520d) (negative? . gB520c) (nan? . gB520b) (min . gB520a) (max . gB5209) (map . gB5208) (make-vector . gB5207) (make-string . gB5206) (make-rectangular . gB5205) (make-polar . gB5204) (magnitude . gB5203) (log . gB5202) (list? . gB5201) (list-tail . gB5200) (list-ref . gB51ff) (list->vector . gB51fe) (list->string . gB51fd) (list . gB51fc) (length . gB51fb) (lcm . gB51fa) (integer? . gB51f9) (integer-valued? . gB51f8) (integer->char . gB51f7) (infinite? . gB51f6) (inexact? . gB51f5) (inexact . gB51f4) (imag-part . gB51f3) (gcd . gB51f2) (for-each . gB51f1) (floor . gB51f0) (finite? . gB51ef) (expt . gB51ee) (exp . gB51ed) (exact? . gB51ec) (exact-integer-sqrt . gB51eb) (exact . gB51ea) (even? . gB51e9) (error . gB51e8) (eqv? . gB51e7) (equal? . gB51e6) (eq? . gB51e5) (dynamic-wind . gB51e4) (div0-and-mod0 . gB51e3) (mod0 . gB51e2) (div0 . gB51e1) (div-and-mod . gB51e0) (mod . gB51df) (div . gB51de) (denominator . gB51dd) (cos . gB51dc) (cons . gB51db) (complex? . gB51da) (char? . gB51d9) (char>? . gB51d8) (char>=? . gB51d7) (char=? . gB51d6) (char<? . gB51d5) (char<=? . gB51d4) (char->integer . gB51d3) (ceiling . gB51d2) (call-with-values . gB51d1) (call/cc . gB51d0) (call-with-current-continuation . gB51cf) (cddddr . gB51ce) (cdddar . gB51cd) (cddadr . gB51cc) (cddaar . gB51cb) (cdaddr . gB51ca) (cdadar . gB51c9) (cdaadr . gB51c8) (cdaaar . gB51c7) (cadddr . gB51c6) (caddar . gB51c5) (cadadr . gB51c4) (cadaar . gB51c3) (caaddr . gB51c2) (caadar . gB51c1) (caaadr . gB51c0) (caaaar . gB51bf) (cdddr . gB51be) (cddar . gB51bd) (cdadr . gB51bc) (cdaar . gB51bb) (caddr . gB51ba) (cadar . gB51b9) (caadr . gB51b8) (caaar . gB51b7) (cddr . gB51b6) (cdar . gB51b5) (cadr . gB51b4) (caar . gB51b3) (cdr . gB51b2) (car . gB51b1) (boolean? . gB51b0) (boolean=? . gB51af) (atan . gB51ae) (assertion-violation . gB51ad) (asin . gB51ac) (apply . gB51ab) (append . gB51aa) (angle . gB51a9) (acos . gB51a8) (abs . gB51a7) (/ . gB51a6) (* . gB51a5) (- . gB51a4) (+ . gB51a3) (>= . gB51a2) (> . gB51a1) (= . gB51a0) (<= . gB519f) (< . gB519e) (&no-nans . gB519c) (&no-infinities . gB519b) (&i/o-encoding . gB519a) (&i/o-decoding . gB5199) (&i/o-port . gB5198) (&i/o-file-does-not-exist . gB5197) (&i/o-file-already-exists . gB5196) (&i/o-file-is-read-only . gB5195) (&i/o-file-protection . gB5194) (&i/o-filename . gB5193) (&i/o-invalid-position . gB5192) (&i/o-write . gB5191) (&i/o-read . gB5190) (&i/o . gB518f) (&undefined . gB518e) (&syntax . gB518d) (&lexical . gB518c) (&implementation-restriction . gB518b) (&non-continuable . gB518a) (&who . gB5189) (&irritants . gB5188) (&assertion . gB5187) (&violation . gB5186) (&error . gB5185) (&serious . gB5184) (&warning . gB5183) (&message . gB5182) (&condition . gB5181) (define-condition-type . gB5180) (define-enumeration . gB517f) (define-record-type . gB517e) (parent-rtd . gB517d) (nongenerative . gB517c) (opaque . gB517b) (sealed . gB517a) (protocol . gB5179) (parent . gB5178) (immutable . gB5177) (mutable . gB5176) (fields . gB5175) (error-handling-mode . gB5174) (file-options . gB5173) (buffer-mode . gB5172) (eol-style . gB5171) (guard . gB5170) (unsyntax-splicing . gB516d) (unsyntax . gB516c) (unquote-splicing . gB516b) (unquote . gB516a) (_ . gB5169) (else . gB5168) (=> . gB5167) (... . gB5166) (assert . gB5165) (endianness . gB5164) (do . gB5161) (cond . gB5160) (let* . gB515f) (let*-values . gB515e) (let-values . gB515d) (identifier-syntax . gB515c) (with-syntax . gB515b) (quasisyntax . gB515a) (quasiquote . gB5159) (syntax-rules . gB5158) (record-constructor-descriptor . gB5155) (record-type-descriptor . gB5154) (case . gB5153) (unless . gB5151) (when . gB5150) (or . gB514f) (and . gB514e) (if . gB514d) (let . gB514c) (letrec* . gB514b) (letrec . gB514a) (case-lambda . gB5148) (lambda . gB5147) (syntax . gB5146) (syntax-case . gB5145) (quote . gB5144) (letrec-syntax . gB5142) (let-syntax . gB5141) (set! . gB5140) (begin . gB513e) (define-syntax . gB513c) (define . gB513b)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB5468 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . gB3175) (quotient . gB5321) (null-environment . gB3173) (remainder . gB5320) (modulo . gB531f) (inexact->exact . gB531e) (force . gB531d) (exact->inexact . gB531c) (make-promise . gB531b) (delay . gB5163)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB5469 '(rnrs control) '(6) '() '() '() '((do . gB5161) (unless . gB5151) (when . gB5150) (case-lambda . gB5148)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB546a '(rnrs eval) '(6) '() '() '() '((eval . gB3179) (environment . gB3171)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB546b '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . gB5317) (set-car! . gB5316)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB546c '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . gB5319) (string-set! . gB5318)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB546d '(rnrs programs) '(6) '() '() '() '((exit . gB531a) (command-line . gB4fd3)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB546e '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . gB2ee4) (identifier? . gB319b) (generate-temporaries . gB3187) (free-identifier=? . gB3189) (syntax->datum . gB319f) (datum->syntax . gB319d) (bound-identifier=? . gB318b) (syntax-violation . gB3199) (unsyntax-splicing . gB516d) (unsyntax . gB516c) (_ . gB5169) (... . gB5166) (with-syntax . gB515b) (quasisyntax . gB515a) (syntax . gB5146) (syntax-case . gB5145)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB546f '(rnrs files) '(6) '() '() '() '((delete-file . gB538a) (file-exists? . gB5389) (make-i/o-write-error . gB4dc3) (make-i/o-read-error . gB4dae) (make-i/o-port-error . gB4e64) (make-i/o-invalid-position-error . gB4dda) (make-i/o-filename-error . gB4df5) (make-i/o-file-protection-error . gB4e0e) (make-i/o-file-is-read-only-error . gB4e23) (make-i/o-file-does-not-exist-error . gB4e4d) (make-i/o-file-already-exists-error . gB4e38) (make-i/o-error . gB4d99) (i/o-write-error? . gB4dc5) (i/o-read-error? . gB4db0) (i/o-port-error? . gB4e68) (i/o-invalid-position-error? . gB4dde) (i/o-filename-error? . gB4df9) (i/o-file-protection-error? . gB4e10) (i/o-file-is-read-only-error? . gB4e25) (i/o-file-does-not-exist-error? . gB4e4f) (i/o-file-already-exists-error? . gB4e3a) (i/o-error? . gB4d9b) (i/o-error-position . gB4de0) (i/o-error-port . gB4e6a) (i/o-error-filename . gB4dfb) (&i/o-port . gB5198) (&i/o-file-does-not-exist . gB5197) (&i/o-file-already-exists . gB5196) (&i/o-file-is-read-only . gB5195) (&i/o-file-protection . gB5194) (&i/o-filename . gB5193) (&i/o-invalid-position . gB5192) (&i/o-write . gB5191) (&i/o-read . gB5190) (&i/o . gB518f)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB5470 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . gB5388) (vector-sort . gB5387) (list-sort . gB5386)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB5471 '(rnrs base) '(6) '() '() '() '((zero? . gB523f) (vector? . gB523e) (vector-set! . gB523d) (vector-ref . gB523c) (vector-map . gB523b) (vector-length . gB523a) (vector-for-each . gB5239) (vector-fill! . gB5238) (vector->list . gB5237) (vector . gB5236) (values . gB5235) (truncate . gB5234) (tan . gB5233) (symbol? . gB5232) (symbol=? . gB5231) (symbol->string . gB5230) (substring . gB522f) (string? . gB522e) (string>? . gB522d) (string>=? . gB522c) (string=? . gB522b) (string<? . gB522a) (string<=? . gB5229) (string-ref . gB5228) (string-length . gB5227) (string-for-each . gB5226) (string-copy . gB5225) (string-append . gB5224) (string->symbol . gB5223) (string->number . gB5222) (string->list . gB5221) (string . gB5220) (sqrt . gB521f) (sin . gB521e) (round . gB521d) (reverse . gB521c) (real? . gB521b) (real-valued? . gB521a) (real-part . gB5219) (rationalize . gB5218) (rational? . gB5217) (rational-valued? . gB5216) (procedure? . gB5215) (positive? . gB5214) (pair? . gB5213) (odd? . gB5212) (numerator . gB5211) (number? . gB5210) (number->string . gB520f) (null? . gB520e) (not . gB520d) (negative? . gB520c) (nan? . gB520b) (min . gB520a) (max . gB5209) (map . gB5208) (make-vector . gB5207) (make-string . gB5206) (make-rectangular . gB5205) (make-polar . gB5204) (magnitude . gB5203) (log . gB5202) (list? . gB5201) (list-tail . gB5200) (list-ref . gB51ff) (list->vector . gB51fe) (list->string . gB51fd) (list . gB51fc) (length . gB51fb) (lcm . gB51fa) (integer? . gB51f9) (integer-valued? . gB51f8) (integer->char . gB51f7) (infinite? . gB51f6) (inexact? . gB51f5) (inexact . gB51f4) (imag-part . gB51f3) (gcd . gB51f2) (for-each . gB51f1) (floor . gB51f0) (finite? . gB51ef) (expt . gB51ee) (exp . gB51ed) (exact? . gB51ec) (exact-integer-sqrt . gB51eb) (exact . gB51ea) (even? . gB51e9) (error . gB51e8) (eqv? . gB51e7) (equal? . gB51e6) (eq? . gB51e5) (dynamic-wind . gB51e4) (div0-and-mod0 . gB51e3) (mod0 . gB51e2) (div0 . gB51e1) (div-and-mod . gB51e0) (mod . gB51df) (div . gB51de) (denominator . gB51dd) (cos . gB51dc) (cons . gB51db) (complex? . gB51da) (char? . gB51d9) (char>? . gB51d8) (char>=? . gB51d7) (char=? . gB51d6) (char<? . gB51d5) (char<=? . gB51d4) (char->integer . gB51d3) (ceiling . gB51d2) (call-with-values . gB51d1) (call/cc . gB51d0) (call-with-current-continuation . gB51cf) (cddddr . gB51ce) (cdddar . gB51cd) (cddadr . gB51cc) (cddaar . gB51cb) (cdaddr . gB51ca) (cdadar . gB51c9) (cdaadr . gB51c8) (cdaaar . gB51c7) (cadddr . gB51c6) (caddar . gB51c5) (cadadr . gB51c4) (cadaar . gB51c3) (caaddr . gB51c2) (caadar . gB51c1) (caaadr . gB51c0) (caaaar . gB51bf) (cdddr . gB51be) (cddar . gB51bd) (cdadr . gB51bc) (cdaar . gB51bb) (caddr . gB51ba) (cadar . gB51b9) (caadr . gB51b8) (caaar . gB51b7) (cddr . gB51b6) (cdar . gB51b5) (cadr . gB51b4) (caar . gB51b3) (cdr . gB51b2) (car . gB51b1) (boolean? . gB51b0) (boolean=? . gB51af) (atan . gB51ae) (assertion-violation . gB51ad) (asin . gB51ac) (apply . gB51ab) (append . gB51aa) (angle . gB51a9) (acos . gB51a8) (abs . gB51a7) (/ . gB51a6) (* . gB51a5) (- . gB51a4) (+ . gB51a3) (>= . gB51a2) (> . gB51a1) (= . gB51a0) (<= . gB519f) (< . gB519e) (unquote-splicing . gB516b) (unquote . gB516a) (_ . gB5169) (else . gB5168) (=> . gB5167) (... . gB5166) (assert . gB5165) (cond . gB5160) (let* . gB515f) (let*-values . gB515e) (let-values . gB515d) (identifier-syntax . gB515c) (quasiquote . gB5159) (syntax-rules . gB5158) (case . gB5153) (or . gB514f) (and . gB514e) (if . gB514d) (let . gB514c) (letrec* . gB514b) (letrec . gB514a) (lambda . gB5147) (quote . gB5144) (letrec-syntax . gB5142) (let-syntax . gB5141) (set! . gB5140) (begin . gB513e) (define-syntax . gB513c) (define . gB513b)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB5472 '(rnrs lists) '(6) '() '() '() '((remove . gB5315) (remv . gB5314) (remp . gB5313) (remq . gB5312) (partition . gB5311) (memv . gB5310) (memq . gB530f) (memp . gB530e) (member . gB530d) (exists . gB530c) (for-all . gB530b) (fold-right . gB530a) (fold-left . gB5309) (find . gB5308) (filter . gB5307) (cons* . gB5306) (assv . gB5305) (assq . gB5304) (assp . gB5303) (assoc . gB5302)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB5473 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . gB5370) (call-with-input-file . gB536f) (write-char . gB536e) (write . gB536d) (with-output-to-file . gB536c) (with-input-from-file . gB536b) (read-char . gB536a) (read . gB5369) (peek-char . gB5368) (open-output-file . gB5367) (open-input-file . gB5366) (newline . gB5365) (display . gB5364) (close-output-port . gB5363) (close-input-port . gB5362) (eof-object? . gB5361) (eof-object . gB5360) (current-error-port . gB535f) (current-output-port . gB535e) (current-input-port . gB535d) (output-port? . gB535c) (input-port? . gB535b) (make-i/o-write-error . gB4dc3) (make-i/o-read-error . gB4dae) (make-i/o-port-error . gB4e64) (make-i/o-invalid-position-error . gB4dda) (make-i/o-filename-error . gB4df5) (make-i/o-file-protection-error . gB4e0e) (make-i/o-file-is-read-only-error . gB4e23) (make-i/o-file-does-not-exist-error . gB4e4d) (make-i/o-file-already-exists-error . gB4e38) (make-i/o-error . gB4d99) (i/o-write-error? . gB4dc5) (i/o-read-error? . gB4db0) (i/o-port-error? . gB4e68) (i/o-invalid-position-error? . gB4dde) (i/o-filename-error? . gB4df9) (i/o-file-protection-error? . gB4e10) (i/o-file-is-read-only-error? . gB4e25) (i/o-file-does-not-exist-error? . gB4e4f) (i/o-file-already-exists-error? . gB4e3a) (i/o-error? . gB4d9b) (i/o-error-position . gB4de0) (i/o-error-port . gB4e6a) (i/o-error-filename . gB4dfb) (&i/o-port . gB5198) (&i/o-file-does-not-exist . gB5197) (&i/o-file-already-exists . gB5196) (&i/o-file-is-read-only . gB5195) (&i/o-file-protection . gB5194) (&i/o-filename . gB5193) (&i/o-invalid-position . gB5192) (&i/o-write . gB5191) (&i/o-read . gB5190) (&i/o . gB518f)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB5474 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . gB5331) (utf32->string . gB52e6) (utf16->string . gB52e5) (utf8->string . gB52e4) (uint-list->bytevector . gB52e3) (u8-list->bytevector . gB52e2) (string->utf8 . gB52e1) (string->utf32 . gB52e0) (string->utf16 . gB52df) (sint-list->bytevector . gB52de) (native-endianness . gB52dd) (bytevector? . gB52dc) (bytevector=? . gB52db) (bytevector-uint-set! . gB52da) (bytevector-uint-ref . gB52d9) (bytevector-u8-set! . gB52d8) (bytevector-u8-ref . gB52d7) (bytevector-u64-set! . gB52d6) (bytevector-u64-ref . gB52d5) (bytevector-u64-native-set! . gB52d4) (bytevector-u64-native-ref . gB52d3) (bytevector-u32-set! . gB52d2) (bytevector-u32-ref . gB52d1) (bytevector-u32-native-set! . gB52d0) (bytevector-u32-native-ref . gB52cf) (bytevector-u16-set! . gB52ce) (bytevector-u16-ref . gB52cd) (bytevector-u16-native-set! . gB52cc) (bytevector-u16-native-ref . gB52cb) (bytevector-sint-set! . gB52ca) (bytevector-sint-ref . gB52c9) (bytevector-s8-set! . gB52c8) (bytevector-s8-ref . gB52c7) (bytevector-s64-set! . gB52c6) (bytevector-s64-ref . gB52c5) (bytevector-s64-native-set! . gB52c4) (bytevector-s64-native-ref . gB52c3) (bytevector-s32-set! . gB52c2) (bytevector-s32-ref . gB52c1) (bytevector-s32-native-set! . gB52c0) (bytevector-s32-native-ref . gB52bf) (bytevector-s16-set! . gB52be) (bytevector-s16-ref . gB52bd) (bytevector-s16-native-set! . gB52bc) (bytevector-s16-native-ref . gB52bb) (bytevector-length . gB52ba) (bytevector-ieee-single-ref . gB52b9) (bytevector-ieee-single-set! . gB52b8) (bytevector-ieee-single-native-set! . gB52b7) (bytevector-ieee-single-native-ref . gB52b6) (bytevector-ieee-double-set! . gB52b5) (bytevector-ieee-double-ref . gB52b4) (bytevector-ieee-double-native-set! . gB52b3) (bytevector-ieee-double-native-ref . gB52b2) (bytevector-fill! . gB52b1) (bytevector-copy! . gB52b0) (bytevector-copy . gB52af) (bytevector->uint-list . gB52ae) (bytevector->u8-list . gB52ad) (bytevector->sint-list . gB52ac) (endianness . gB5164)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB5475 '(rnrs unicode) '(6) '() '() '() '((string-upcase . gB53b8) (string-titlecase . gB53b7) (string-normalize-nfkd . gB53b6) (string-normalize-nfkc . gB53b5) (string-normalize-nfd . gB53b4) (string-normalize-nfc . gB53b3) (string-foldcase . gB53b2) (string-downcase . gB53b1) (string-ci>? . gB53b0) (string-ci>=? . gB53af) (string-ci=? . gB53ae) (string-ci<? . gB53ad) (string-ci<=? . gB53ac) (char-whitespace? . gB53ab) (char-upper-case? . gB53aa) (char-title-case? . gB53a9) (char-numeric? . gB53a8) (char-lower-case? . gB53a7) (char-general-category . gB53a6) (char-upcase . gB53a5) (char-titlecase . gB53a4) (char-foldcase . gB53a3) (char-downcase . gB53a2) (char-ci>? . gB53a1) (char-ci>=? . gB53a0) (char-ci=? . gB539f) (char-ci<? . gB539e) (char-ci<=? . gB539d) (char-alphabetic? . gB539c)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB5476 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . gB52fb) (raise-continuable . gB52fa) (raise . gB52f9) (guard . gB5170) (else . gB5168) (=> . gB5167)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB5477 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . gB5250) (bitwise-reverse-bit-field . gB524f) (bitwise-length . gB524e) (bitwise-if . gB524d) (bitwise-first-bit-set . gB524c) (bitwise-copy-bit-field . gB524b) (bitwise-copy-bit . gB524a) (bitwise-bit-set? . gB5249) (bitwise-bit-field . gB5248) (bitwise-bit-count . gB5247) (bitwise-xor . gB5246) (bitwise-ior . gB5245) (bitwise-and . gB5244) (bitwise-not . gB5243) (bitwise-arithmetic-shift-right . gB5242) (bitwise-arithmetic-shift-left . gB5241) (bitwise-arithmetic-shift . gB5240)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB5478 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . gB527d) (fxxor . gB527c) (fxrotate-bit-field . gB527b) (fxreverse-bit-field . gB527a) (fxpositive? . gB5279) (fxodd? . gB5278) (fxnot . gB5277) (fxnegative? . gB5276) (fxmod0 . gB5275) (fxmod . gB5274) (fxmin . gB5273) (fxmax . gB5272) (fxlength . gB5271) (fxior . gB5270) (fxif . gB526f) (fxfirst-bit-set . gB526e) (fxeven? . gB526d) (fxdiv0-and-mod0 . gB526c) (fxdiv0 . gB526b) (fxdiv-and-mod . gB526a) (fxdiv . gB5269) (fxcopy-bit-field . gB5268) (fxcopy-bit . gB5267) (fxbit-set? . gB5266) (fxbit-field . gB5265) (fxbit-count . gB5264) (fxarithmetic-shift-right . gB5263) (fxarithmetic-shift-left . gB5262) (fxarithmetic-shift . gB5261) (fxand . gB5260) (fx>? . gB525f) (fx>=? . gB525e) (fx=? . gB525d) (fx<? . gB525c) (fx<=? . gB525b) (fx-/carry . gB525a) (fx- . gB5259) (fx+/carry . gB5258) (fx+ . gB5257) (fx*/carry . gB5256) (fx* . gB5255) (greatest-fixnum . gB5254) (least-fixnum . gB5253) (fixnum-width . gB5252) (fixnum? . gB5251)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB5479 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . gB4ec4) (no-infinities-violation? . gB4eaf) (make-no-nans-violation . gB4ec2) (make-no-infinities-violation . gB4ead) (real->flonum . gB52ab) (flzero? . gB52aa) (fltruncate . gB52a9) (fltan . gB52a8) (flsqrt . gB52a7) (flsin . gB52a6) (flround . gB52a5) (flpositive? . gB52a4) (flonum? . gB52a3) (flodd? . gB52a2) (flnumerator . gB52a1) (flnegative? . gB52a0) (flnan? . gB529f) (flmod0 . gB529e) (flmod . gB529d) (flmin . gB529c) (flmax . gB529b) (fllog . gB529a) (flinteger? . gB5299) (flinfinite? . gB5298) (flfloor . gB5297) (flfinite? . gB5296) (flexpt . gB5295) (flexp . gB5294) (fleven? . gB5293) (fldiv0-and-mod0 . gB5292) (fldiv0 . gB5291) (fldiv-and-mod . gB5290) (fldiv . gB528f) (fldenominator . gB528e) (flcos . gB528d) (flceiling . gB528c) (flatan . gB528b) (flasin . gB528a) (flacos . gB5289) (flabs . gB5288) (fl>? . gB5287) (fl>=? . gB5286) (fl=? . gB5285) (fl<? . gB5284) (fl<=? . gB5283) (fl/ . gB5282) (fl- . gB5281) (fl+ . gB5280) (fl* . gB527f) (fixnum->flonum . gB527e) (&no-nans . gB519c) (&no-infinities . gB519b)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB547a '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . gB5385) (string-ci-hash . gB5384) (string-hash . gB5383) (equal-hash . gB5382) (hashtable-equivalence-function . gB5381) (make-hashtable . gB5380) (hashtable-hash-function . gB537f) (make-eqv-hashtable . gB537e) (make-eq-hashtable . gB537d) (hashtable? . gB537c) (hashtable-update! . gB537b) (hashtable-size . gB537a) (hashtable-set! . gB5379) (hashtable-ref . gB5378) (hashtable-mutable? . gB5377) (hashtable-keys . gB5376) (hashtable-entries . gB5375) (hashtable-delete! . gB5374) (hashtable-copy . gB5373) (hashtable-contains? . gB5372) (hashtable-clear! . gB5371)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB547b '(rnrs io ports) '(6) '() '() '() '((eof-object? . gB5361) (eof-object . gB5360) (current-error-port . gB535f) (current-output-port . gB535e) (current-input-port . gB535d) (output-port? . gB535c) (input-port? . gB535b) (utf-8-codec . gB535a) (utf-16-codec . gB5359) (transcoder-error-handling-mode . gB5358) (transcoder-eol-style . gB5357) (transcoder-codec . gB5356) (transcoded-port . gB5355) (textual-port? . gB5354) (string->bytevector . gB5353) (standard-output-port . gB5352) (standard-input-port . gB5351) (standard-error-port . gB5350) (set-port-position! . gB534f) (put-u8 . gB534e) (put-string . gB534d) (put-datum . gB534c) (put-char . gB534b) (put-bytevector . gB534a) (port? . gB5349) (port-transcoder . gB5348) (port-position . gB5347) (port-has-set-port-position!? . gB5346) (port-has-port-position? . gB5345) (port-eof? . gB5344) (output-port-buffer-mode . gB5343) (open-string-output-port . gB5342) (open-string-input-port . gB5341) (open-file-output-port . gB5340) (open-file-input/output-port . gB533f) (open-file-input-port . gB533e) (open-bytevector-output-port . gB533d) (open-bytevector-input-port . gB533c) (native-transcoder . gB533b) (native-eol-style . gB533a) (make-transcoder . gB5339) (latin-1-codec . gB5338) (make-i/o-write-error . gB4dc3) (make-i/o-read-error . gB4dae) (make-i/o-port-error . gB4e64) (make-i/o-invalid-position-error . gB4dda) (make-i/o-filename-error . gB4df5) (make-i/o-file-protection-error . gB4e0e) (make-i/o-file-is-read-only-error . gB4e23) (make-i/o-file-does-not-exist-error . gB4e4d) (make-i/o-file-already-exists-error . gB4e38) (make-i/o-error . gB4d99) (make-i/o-encoding-error . gB4e94) (make-i/o-decoding-error . gB4e7d) (make-custom-textual-output-port . gB5337) (make-custom-textual-input/output-port . gB5336) (make-custom-textual-input-port . gB5335) (make-custom-binary-output-port . gB5334) (make-custom-binary-input/output-port . gB5333) (make-custom-binary-input-port . gB5332) (lookahead-u8 . gB5330) (lookahead-char . gB532f) (i/o-write-error? . gB4dc5) (i/o-read-error? . gB4db0) (i/o-port-error? . gB4e68) (i/o-invalid-position-error? . gB4dde) (i/o-filename-error? . gB4df9) (i/o-file-protection-error? . gB4e10) (i/o-file-is-read-only-error? . gB4e25) (i/o-file-does-not-exist-error? . gB4e4f) (i/o-file-already-exists-error? . gB4e3a) (i/o-error? . gB4d9b) (i/o-error-position . gB4de0) (i/o-error-port . gB4e6a) (i/o-error-filename . gB4dfb) (i/o-encoding-error? . gB4e98) (i/o-encoding-error-char . gB4e9a) (i/o-decoding-error? . gB4e7f) (get-u8 . gB532e) (get-string-n! . gB532d) (get-string-n . gB532c) (get-string-all . gB532b) (get-line . gB532a) (get-datum . gB5329) (get-char . gB5328) (get-bytevector-some . gB5327) (get-bytevector-n! . gB5326) (get-bytevector-n . gB5325) (get-bytevector-all . gB5324) (flush-output-port . gB5323) (close-port . gB5322) (call-with-string-output-port . gB5301) (call-with-port . gB5300) (call-with-bytevector-output-port . gB52ff) (bytevector->string . gB52fe) (buffer-mode? . gB52fd) (binary-port? . gB52fc) (&i/o-encoding . gB519a) (&i/o-decoding . gB5199) (&i/o-port . gB5198) (&i/o-file-does-not-exist . gB5197) (&i/o-file-already-exists . gB5196) (&i/o-file-is-read-only . gB5195) (&i/o-file-protection . gB5194) (&i/o-filename . gB5193) (&i/o-invalid-position . gB5192) (&i/o-write . gB5191) (&i/o-read . gB5190) (&i/o . gB518f) (error-handling-mode . gB5174) (file-options . gB5173) (buffer-mode . gB5172) (eol-style . gB5171)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB547c '(rnrs enums) '(6) '() '() '() '((make-enumeration . gB52f8) (enum-set=? . gB52f7) (enum-set-universe . gB52f6) (enum-set-union . gB52f5) (enum-set-subset? . gB52f4) (enum-set-projection . gB52f3) (enum-set-member? . gB52f2) (enum-set-intersection . gB52f1) (enum-set-indexer . gB52f0) (enum-set-difference . gB52ef) (enum-set-constructor . gB52ee) (enum-set-complement . gB52ed) (enum-set->list . gB52ec) (define-enumeration . gB517f)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB547d '(rnrs conditions) '(6) '() '() '() '((who-condition? . gB4d0f) (warning? . gB4c87) (violation? . gB4cc6) (undefined-violation? . gB4d86) (syntax-violation? . gB4d6d) (syntax-violation-subform . gB4d71) (syntax-violation-form . gB4d6f) (syntax-violation . gB3199) (simple-conditions . gB52eb) (serious-condition? . gB4c9c) (non-continuable-violation? . gB4d26) (message-condition? . gB4c70) (make-who-condition . gB4d0b) (make-warning . gB4c85) (make-violation . gB4cc4) (make-undefined-violation . gB4d84) (make-syntax-violation . gB4d67) (make-serious-condition . gB4c9a) (make-non-continuable-violation . gB4d24) (make-message-condition . gB4c6c) (make-lexical-violation . gB4d4e) (make-irritants-condition . gB4cf0) (make-implementation-restriction-violation . gB4d39) (make-error . gB4caf) (make-assertion-violation . gB4cd9) (lexical-violation? . gB4d50) (irritants-condition? . gB4cf4) (implementation-restriction-violation? . gB4d3b) (error? . gB4cb1) (condition-who . gB4d11) (condition-predicate . gB52ea) (condition-message . gB4c72) (condition-irritants . gB4cf6) (condition-accessor . gB52e9) (condition . gB52e8) (assertion-violation? . gB4cdb) (condition? . gB52e7) (&undefined . gB518e) (&syntax . gB518d) (&lexical . gB518c) (&implementation-restriction . gB518b) (&non-continuable . gB518a) (&who . gB5189) (&irritants . gB5188) (&assertion . gB5187) (&violation . gB5186) (&error . gB5185) (&serious . gB5184) (&warning . gB5183) (&message . gB5182) (&condition . gB5181) (define-condition-type . gB5180)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB547e '(rnrs records inspection) '(6) '() '() '() '((record? . gB5394) (record-type-uid . gB5393) (record-type-sealed? . gB5392) (record-type-parent . gB5391) (record-type-opaque? . gB5390) (record-type-name . gB538f) (record-type-generative? . gB538e) (record-type-field-names . gB538d) (record-rtd . gB538c) (record-field-mutable? . gB538b)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB547f '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . gB539b) (record-predicate . gB539a) (record-mutator . gB5399) (record-constructor . gB5398) (record-accessor . gB5397) (make-record-type-descriptor . gB5396) (make-record-constructor-descriptor . gB5395)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB5480 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . gB517e) (parent-rtd . gB517d) (nongenerative . gB517c) (opaque . gB517b) (sealed . gB517a) (protocol . gB5179) (parent . gB5178) (immutable . gB5177) (mutable . gB5176) (fields . gB5175) (record-constructor-descriptor . gB5155) (record-type-descriptor . gB5154)) '() values values '#f '#f '#t '#f) (gB2ccd@gB2b19@install-library 'gB5481 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . gB4ec8) (&no-nans-rtd . gB4ec6) (&no-infinities-rcd . gB4eb3) (&no-infinities-rtd . gB4eb1) (&i/o-encoding-rcd . gB4e9e) (&i/o-encoding-rtd . gB4e9c) (&i/o-decoding-rcd . gB4e83) (&i/o-decoding-rtd . gB4e81) (&i/o-port-rcd . gB4e6e) (&i/o-port-rtd . gB4e6c) (&i/o-file-does-not-exist-rcd . gB4e53) (&i/o-file-does-not-exist-rtd . gB4e51) (&i/o-file-already-exists-rcd . gB4e3e) (&i/o-file-already-exists-rtd . gB4e3c) (&i/o-file-is-read-only-rcd . gB4e29) (&i/o-file-is-read-only-rtd . gB4e27) (&i/o-file-protection-rcd . gB4e14) (&i/o-file-protection-rtd . gB4e12) (&i/o-filename-rcd . gB4dff) (&i/o-filename-rtd . gB4dfd) (&i/o-invalid-position-rcd . gB4de4) (&i/o-invalid-position-rtd . gB4de2) (&i/o-write-rcd . gB4dc9) (&i/o-write-rtd . gB4dc7) (&i/o-read-rcd . gB4db4) (&i/o-read-rtd . gB4db2) (&i/o-rcd . gB4d9f) (&i/o-rtd . gB4d9d) (&undefined-rcd . gB4d8a) (&undefined-rtd . gB4d88) (&syntax-rcd . gB4d75) (&syntax-rtd . gB4d73) (&lexical-rcd . gB4d54) (&lexical-rtd . gB4d52) (&implementation-restriction-rcd . gB4d3f) (&implementation-restriction-rtd . gB4d3d) (&non-continuable-rcd . gB4d2a) (&non-continuable-rtd . gB4d28) (&who-rcd . gB4d15) (&who-rtd . gB4d13) (&irritants-rcd . gB4cfa) (&irritants-rtd . gB4cf8) (&assertion-rcd . gB4cdf) (&assertion-rtd . gB4cdd) (&violation-rcd . gB4cca) (&violation-rtd . gB4cc8) (&error-rcd . gB4cb5) (&error-rtd . gB4cb3) (&serious-rcd . gB4ca0) (&serious-rtd . gB4c9e) (&warning-rcd . gB4c8b) (&warning-rtd . gB4c89) (&message-rcd . gB4c76) (&message-rtd . gB4c74) (&condition-rcd . gB4c17) (&condition-rtd . gB4c15) (syntax-error . gB3195) (syntax-dispatch . gB30b9) (pretty-print . gB5461) (eval-core . gB5460) (set-symbol-value! . gB545f) (symbol-value . gB545e) (gensym . gB545d) (void . gB545c) (load . gB4fd9) (interaction-environment . gB31a7) (char-ready? . gB545b) (regexp? . gB545a) (read-line . gB5459) (gensym-prefix-set! . gB5458) (ungensym . gB5457) (alist->eq-hash-table . gB5456) (assoc-ref . gB5455) (print . gB5454) (format . gB5453) (host-os . gB5452) (library-path . gB2af8) (standard-library-path . gB5451) (file-newer? . gB5450) (stat-mtime . gB544f) (write-to-file . gB544e) (file->list . gB544d) (file->string . gB544c) (digit->integer . gB544b) (call-with-string-input-port . gB544a) (call-with-string-io . gB5449) (string-split . gB5448) (bytevector-for-each . gB5447) (string->regexp . gB5446) (rxmatch . gB5445) (regexp-replace-all . gB5444) (hashtable-for-each . gB5443) (mosh-cache-dir . gB28e2) (call-process . gB5442) (local-tz-offset . gB5441) (microseconds . gB5440) (directory-list . gB543f) (set-current-directory! . gB543e) (expand-path . gB543d) (current-directory . gB543c) (%spawn . gB543b) (%waitpid . gB543a) (simple-struct-name . gB5439) (simple-struct-set! . gB5438) (simple-struct-ref . gB5437) (make-simple-struct . gB5436) (simple-struct? . gB5435) (pointer-ref-c-int64 . gB5434) (pointer-ref-c-int32 . gB5433) (pointer-ref-c-int16 . gB5432) (pointer-ref-c-int8 . gB5431) (pointer-ref-c-uint64 . gB5430) (pointer-ref-c-uint32 . gB542f) (pointer-ref-c-uint16 . gB542e) (pointer-ref-c-uint8 . gB542d) (pointer-set-c-uint64! . gB542c) (pointer-set-c-uint32! . gB542b) (pointer-set-c-uint16! . gB542a) (pointer-set-c-uint8! . gB5429) (pointer-set-c-int64! . gB5428) (pointer-set-c-int32! . gB5427) (pointer-set-c-int16! . gB5426) (pointer-set-c-int8! . gB5425) (pointer-set-c-pointer! . gB5424) (pointer-set-c-double! . gB5423) (pointer-set-c-float! . gB5422) (pointer-set-c-long-long! . gB5421) (pointer-set-c-long! . gB5420) (pointer-set-c-int! . gB541f) (pointer-set-c-short! . gB541e) (pointer-set-c-char! . gB541d) (pointer-ref-c-pointer . gB541c) (pointer-ref-c-double . gB541b) (pointer-ref-c-float . gB541a) (pointer-ref-c-unsigned-long-long . gB5419) (pointer-ref-c-signed-long-long . gB5418) (pointer-ref-c-unsigned-long . gB5417) (pointer-ref-c-signed-long . gB5416) (pointer-ref-c-unsigned-int . gB5415) (pointer-ref-c-signed-int . gB5414) (pointer-ref-c-unsigned-short . gB5413) (pointer-ref-c-signed-short . gB5412) (pointer-ref-c-unsigned-char . gB5411) (pointer-ref-c-signed-char . gB5410) (pointer->integer . gB540f) (integer->pointer . gB540e) (pointer? . gB540d) (shared-errno . gB540c) (%ffi-free-c-callback-trampoline . gB540b) (%ffi-make-c-callback-trampoline . gB540a) (%ffi-free . gB5409) (%ffi-malloc . gB5408) (%ffi-supported? . gB5407) (%ffi-pointer->string . gB5406) (%ffi-call . gB5405) (%ffi-lookup . gB5404) (%ffi-open . gB5403) (null-terminated-utf8->string . gB5402) (null-terminated-bytevector->string . gB5401) (%fork . gB5400) (%pipe . gB53ff) (p . gB53fe) (open-output-string . gB53fd) (get-output-string . gB53fc) (file-stat-ctime . gB53fb) (file-stat-atime . gB53fa) (file-stat-mtime . gB53f9) (file-size-in-bytes . gB53f8) (file-writable? . gB53f7) (file-executable? . gB53f6) (file-readable? . gB53f5) (file-regular? . gB53f4) (file-symbolic-link? . gB53f3) (file-directory? . gB53f2) (create-symbolic-link . gB53f1) (rename-file . gB53f0) (delete-directory . gB53ef) (create-directory . gB53ee) (create-mosh-cache-dir . gB53ed) (get-environment-variables . gB53ec) (current-exception-handler . gB53eb) (get-environment-variable . gB53ea) (join-wraps . gB53e9) (id->real-label . gB53e8) (same-marks? . gB53e7) (same-marks*? . gB53e6) (get-timeofday . gB53e5) (get-command-line . gB53e4) (sys-display . gB53e3) (whereis . gB53e2) (register . gB53e1) (vm-join! . gB53e0) (vm-set-value! . gB53df) (vm? . gB53de) (main-vm? . gB53dd) (vm-eval . gB53dc) (vm-self . gB53db) (vm-start! . gB53da) (make-vm . gB53d9) (mutex-try-lock! . gB53d8) (mutex-unlock! . gB53d7) (mutex-lock! . gB53d6) (mutex? . gB53d5) (make-mutex . gB53d4) (condition-variable-notify-all! . gB53d3) (condition-variable-notify! . gB53d2) (condition-variable-wait! . gB53d1) (make-condition-variable . gB53d0) (mosh-executable-path . gB53cf) (make-file-options . gB53ce) (source-info . gB53cd) (make-compiler-instruction . gB53cc) (make-instruction . gB53cb) (set-source-info! . gB53ca) (bignum? . gB53c9) (fast-equal? . gB53c8) (fasl-read . gB53c7) (fasl-write . gB53c6) (time-usage . gB53c5) (os-constant . gB53c4) (disasm . gB53c3) (make-parameter . gB28e0) (socket-port . gB53c2) (socket-shutdown . gB53c1) (socket-close . gB53c0) (socket-send . gB53bf) (socket-recv! . gB53be) (socket-recv . gB53bd) (make-server-socket . gB53bc) (make-client-socket . gB53bb) (socket-accept . gB53ba) (socket? . gB53b9) (string-upcase . gB53b8) (string-titlecase . gB53b7) (string-normalize-nfkd . gB53b6) (string-normalize-nfkc . gB53b5) (string-normalize-nfd . gB53b4) (string-normalize-nfc . gB53b3) (string-foldcase . gB53b2) (string-downcase . gB53b1) (string-ci>? . gB53b0) (string-ci>=? . gB53af) (string-ci=? . gB53ae) (string-ci<? . gB53ad) (string-ci<=? . gB53ac) (char-whitespace? . gB53ab) (char-upper-case? . gB53aa) (char-title-case? . gB53a9) (char-numeric? . gB53a8) (char-lower-case? . gB53a7) (char-general-category . gB53a6) (char-upcase . gB53a5) (char-titlecase . gB53a4) (char-foldcase . gB53a3) (char-downcase . gB53a2) (char-ci>? . gB53a1) (char-ci>=? . gB53a0) (char-ci=? . gB539f) (char-ci<? . gB539e) (char-ci<=? . gB539d) (char-alphabetic? . gB539c) (make-variable-transformer . gB2ee4) (identifier? . gB319b) (generate-temporaries . gB3187) (free-identifier=? . gB3189) (syntax->datum . gB319f) (datum->syntax . gB319d) (bound-identifier=? . gB318b) (record-type-descriptor? . gB539b) (record-predicate . gB539a) (record-mutator . gB5399) (record-constructor . gB5398) (record-accessor . gB5397) (make-record-type-descriptor . gB5396) (make-record-constructor-descriptor . gB5395) (record? . gB5394) (record-type-uid . gB5393) (record-type-sealed? . gB5392) (record-type-parent . gB5391) (record-type-opaque? . gB5390) (record-type-name . gB538f) (record-type-generative? . gB538e) (record-type-field-names . gB538d) (record-rtd . gB538c) (record-field-mutable? . gB538b) (delete-file . gB538a) (file-exists? . gB5389) (vector-sort! . gB5388) (vector-sort . gB5387) (list-sort . gB5386) (symbol-hash . gB5385) (string-ci-hash . gB5384) (string-hash . gB5383) (equal-hash . gB5382) (hashtable-equivalence-function . gB5381) (make-hashtable . gB5380) (hashtable-hash-function . gB537f) (make-eqv-hashtable . gB537e) (make-eq-hashtable . gB537d) (hashtable? . gB537c) (hashtable-update! . gB537b) (hashtable-size . gB537a) (hashtable-set! . gB5379) (hashtable-ref . gB5378) (hashtable-mutable? . gB5377) (hashtable-keys . gB5376) (hashtable-entries . gB5375) (hashtable-delete! . gB5374) (hashtable-copy . gB5373) (hashtable-contains? . gB5372) (hashtable-clear! . gB5371) (call-with-output-file . gB5370) (call-with-input-file . gB536f) (write-char . gB536e) (write . gB536d) (with-output-to-file . gB536c) (with-input-from-file . gB536b) (read-char . gB536a) (read . gB5369) (peek-char . gB5368) (open-output-file . gB5367) (open-input-file . gB5366) (newline . gB5365) (display . gB5364) (close-output-port . gB5363) (close-input-port . gB5362) (eof-object? . gB5361) (eof-object . gB5360) (current-error-port . gB535f) (current-output-port . gB535e) (current-input-port . gB535d) (output-port? . gB535c) (input-port? . gB535b) (utf-8-codec . gB535a) (utf-16-codec . gB5359) (transcoder-error-handling-mode . gB5358) (transcoder-eol-style . gB5357) (transcoder-codec . gB5356) (transcoded-port . gB5355) (textual-port? . gB5354) (string->bytevector . gB5353) (standard-output-port . gB5352) (standard-input-port . gB5351) (standard-error-port . gB5350) (set-port-position! . gB534f) (put-u8 . gB534e) (put-string . gB534d) (put-datum . gB534c) (put-char . gB534b) (put-bytevector . gB534a) (port? . gB5349) (port-transcoder . gB5348) (port-position . gB5347) (port-has-set-port-position!? . gB5346) (port-has-port-position? . gB5345) (port-eof? . gB5344) (output-port-buffer-mode . gB5343) (open-string-output-port . gB5342) (open-string-input-port . gB5341) (open-file-output-port . gB5340) (open-file-input/output-port . gB533f) (open-file-input-port . gB533e) (open-bytevector-output-port . gB533d) (open-bytevector-input-port . gB533c) (native-transcoder . gB533b) (native-eol-style . gB533a) (make-transcoder . gB5339) (latin-1-codec . gB5338) (make-i/o-write-error . gB4dc3) (make-i/o-read-error . gB4dae) (make-i/o-port-error . gB4e64) (make-i/o-invalid-position-error . gB4dda) (make-i/o-filename-error . gB4df5) (make-i/o-file-protection-error . gB4e0e) (make-i/o-file-is-read-only-error . gB4e23) (make-i/o-file-does-not-exist-error . gB4e4d) (make-i/o-file-already-exists-error . gB4e38) (make-i/o-error . gB4d99) (make-i/o-encoding-error . gB4e94) (make-i/o-decoding-error . gB4e7d) (make-custom-textual-output-port . gB5337) (make-custom-textual-input/output-port . gB5336) (make-custom-textual-input-port . gB5335) (make-custom-binary-output-port . gB5334) (make-custom-binary-input/output-port . gB5333) (make-custom-binary-input-port . gB5332) (make-bytevector . gB5331) (lookahead-u8 . gB5330) (lookahead-char . gB532f) (i/o-write-error? . gB4dc5) (i/o-read-error? . gB4db0) (i/o-port-error? . gB4e68) (i/o-invalid-position-error? . gB4dde) (i/o-filename-error? . gB4df9) (i/o-file-protection-error? . gB4e10) (i/o-file-is-read-only-error? . gB4e25) (i/o-file-does-not-exist-error? . gB4e4f) (i/o-file-already-exists-error? . gB4e3a) (i/o-error? . gB4d9b) (i/o-error-position . gB4de0) (i/o-error-port . gB4e6a) (i/o-error-filename . gB4dfb) (i/o-encoding-error? . gB4e98) (i/o-encoding-error-char . gB4e9a) (i/o-decoding-error? . gB4e7f) (get-u8 . gB532e) (get-string-n! . gB532d) (get-string-n . gB532c) (get-string-all . gB532b) (get-line . gB532a) (get-datum . gB5329) (get-char . gB5328) (get-bytevector-some . gB5327) (get-bytevector-n! . gB5326) (get-bytevector-n . gB5325) (get-bytevector-all . gB5324) (flush-output-port . gB5323) (close-port . gB5322) (scheme-report-environment . gB3175) (quotient . gB5321) (null-environment . gB3173) (remainder . gB5320) (modulo . gB531f) (inexact->exact . gB531e) (force . gB531d) (exact->inexact . gB531c) (make-promise . gB531b) (exit . gB531a) (command-line . gB4fd3) (string-fill! . gB5319) (string-set! . gB5318) (set-cdr! . gB5317) (set-car! . gB5316) (remove . gB5315) (remv . gB5314) (remp . gB5313) (remq . gB5312) (partition . gB5311) (memv . gB5310) (memq . gB530f) (memp . gB530e) (member . gB530d) (exists . gB530c) (for-all . gB530b) (fold-right . gB530a) (fold-left . gB5309) (find . gB5308) (filter . gB5307) (cons* . gB5306) (assv . gB5305) (assq . gB5304) (assp . gB5303) (assoc . gB5302) (call-with-string-output-port . gB5301) (call-with-port . gB5300) (call-with-bytevector-output-port . gB52ff) (bytevector->string . gB52fe) (buffer-mode? . gB52fd) (binary-port? . gB52fc) (with-exception-handler . gB52fb) (raise-continuable . gB52fa) (raise . gB52f9) (eval . gB3179) (environment . gB3171) (make-enumeration . gB52f8) (enum-set=? . gB52f7) (enum-set-universe . gB52f6) (enum-set-union . gB52f5) (enum-set-subset? . gB52f4) (enum-set-projection . gB52f3) (enum-set-member? . gB52f2) (enum-set-intersection . gB52f1) (enum-set-indexer . gB52f0) (enum-set-difference . gB52ef) (enum-set-constructor . gB52ee) (enum-set-complement . gB52ed) (enum-set->list . gB52ec) (who-condition? . gB4d0f) (warning? . gB4c87) (violation? . gB4cc6) (undefined-violation? . gB4d86) (syntax-violation? . gB4d6d) (syntax-violation-subform . gB4d71) (syntax-violation-form . gB4d6f) (syntax-violation . gB3199) (simple-conditions . gB52eb) (serious-condition? . gB4c9c) (non-continuable-violation? . gB4d26) (message-condition? . gB4c70) (make-who-condition . gB4d0b) (make-warning . gB4c85) (make-violation . gB4cc4) (make-undefined-violation . gB4d84) (make-syntax-violation . gB4d67) (make-serious-condition . gB4c9a) (make-non-continuable-violation . gB4d24) (make-message-condition . gB4c6c) (make-lexical-violation . gB4d4e) (make-irritants-condition . gB4cf0) (make-implementation-restriction-violation . gB4d39) (make-error . gB4caf) (make-assertion-violation . gB4cd9) (lexical-violation? . gB4d50) (irritants-condition? . gB4cf4) (implementation-restriction-violation? . gB4d3b) (error? . gB4cb1) (condition-who . gB4d11) (condition-predicate . gB52ea) (condition-message . gB4c72) (condition-irritants . gB4cf6) (condition-accessor . gB52e9) (condition . gB52e8) (assertion-violation? . gB4cdb) (condition? . gB52e7) (utf32->string . gB52e6) (utf16->string . gB52e5) (utf8->string . gB52e4) (uint-list->bytevector . gB52e3) (u8-list->bytevector . gB52e2) (string->utf8 . gB52e1) (string->utf32 . gB52e0) (string->utf16 . gB52df) (sint-list->bytevector . gB52de) (native-endianness . gB52dd) (bytevector? . gB52dc) (bytevector=? . gB52db) (bytevector-uint-set! . gB52da) (bytevector-uint-ref . gB52d9) (bytevector-u8-set! . gB52d8) (bytevector-u8-ref . gB52d7) (bytevector-u64-set! . gB52d6) (bytevector-u64-ref . gB52d5) (bytevector-u64-native-set! . gB52d4) (bytevector-u64-native-ref . gB52d3) (bytevector-u32-set! . gB52d2) (bytevector-u32-ref . gB52d1) (bytevector-u32-native-set! . gB52d0) (bytevector-u32-native-ref . gB52cf) (bytevector-u16-set! . gB52ce) (bytevector-u16-ref . gB52cd) (bytevector-u16-native-set! . gB52cc) (bytevector-u16-native-ref . gB52cb) (bytevector-sint-set! . gB52ca) (bytevector-sint-ref . gB52c9) (bytevector-s8-set! . gB52c8) (bytevector-s8-ref . gB52c7) (bytevector-s64-set! . gB52c6) (bytevector-s64-ref . gB52c5) (bytevector-s64-native-set! . gB52c4) (bytevector-s64-native-ref . gB52c3) (bytevector-s32-set! . gB52c2) (bytevector-s32-ref . gB52c1) (bytevector-s32-native-set! . gB52c0) (bytevector-s32-native-ref . gB52bf) (bytevector-s16-set! . gB52be) (bytevector-s16-ref . gB52bd) (bytevector-s16-native-set! . gB52bc) (bytevector-s16-native-ref . gB52bb) (bytevector-length . gB52ba) (bytevector-ieee-single-ref . gB52b9) (bytevector-ieee-single-set! . gB52b8) (bytevector-ieee-single-native-set! . gB52b7) (bytevector-ieee-single-native-ref . gB52b6) (bytevector-ieee-double-set! . gB52b5) (bytevector-ieee-double-ref . gB52b4) (bytevector-ieee-double-native-set! . gB52b3) (bytevector-ieee-double-native-ref . gB52b2) (bytevector-fill! . gB52b1) (bytevector-copy! . gB52b0) (bytevector-copy . gB52af) (bytevector->uint-list . gB52ae) (bytevector->u8-list . gB52ad) (bytevector->sint-list . gB52ac) (no-nans-violation? . gB4ec4) (no-infinities-violation? . gB4eaf) (make-no-nans-violation . gB4ec2) (make-no-infinities-violation . gB4ead) (real->flonum . gB52ab) (flzero? . gB52aa) (fltruncate . gB52a9) (fltan . gB52a8) (flsqrt . gB52a7) (flsin . gB52a6) (flround . gB52a5) (flpositive? . gB52a4) (flonum? . gB52a3) (flodd? . gB52a2) (flnumerator . gB52a1) (flnegative? . gB52a0) (flnan? . gB529f) (flmod0 . gB529e) (flmod . gB529d) (flmin . gB529c) (flmax . gB529b) (fllog . gB529a) (flinteger? . gB5299) (flinfinite? . gB5298) (flfloor . gB5297) (flfinite? . gB5296) (flexpt . gB5295) (flexp . gB5294) (fleven? . gB5293) (fldiv0-and-mod0 . gB5292) (fldiv0 . gB5291) (fldiv-and-mod . gB5290) (fldiv . gB528f) (fldenominator . gB528e) (flcos . gB528d) (flceiling . gB528c) (flatan . gB528b) (flasin . gB528a) (flacos . gB5289) (flabs . gB5288) (fl>? . gB5287) (fl>=? . gB5286) (fl=? . gB5285) (fl<? . gB5284) (fl<=? . gB5283) (fl/ . gB5282) (fl- . gB5281) (fl+ . gB5280) (fl* . gB527f) (fixnum->flonum . gB527e) (fxzero? . gB527d) (fxxor . gB527c) (fxrotate-bit-field . gB527b) (fxreverse-bit-field . gB527a) (fxpositive? . gB5279) (fxodd? . gB5278) (fxnot . gB5277) (fxnegative? . gB5276) (fxmod0 . gB5275) (fxmod . gB5274) (fxmin . gB5273) (fxmax . gB5272) (fxlength . gB5271) (fxior . gB5270) (fxif . gB526f) (fxfirst-bit-set . gB526e) (fxeven? . gB526d) (fxdiv0-and-mod0 . gB526c) (fxdiv0 . gB526b) (fxdiv-and-mod . gB526a) (fxdiv . gB5269) (fxcopy-bit-field . gB5268) (fxcopy-bit . gB5267) (fxbit-set? . gB5266) (fxbit-field . gB5265) (fxbit-count . gB5264) (fxarithmetic-shift-right . gB5263) (fxarithmetic-shift-left . gB5262) (fxarithmetic-shift . gB5261) (fxand . gB5260) (fx>? . gB525f) (fx>=? . gB525e) (fx=? . gB525d) (fx<? . gB525c) (fx<=? . gB525b) (fx-/carry . gB525a) (fx- . gB5259) (fx+/carry . gB5258) (fx+ . gB5257) (fx*/carry . gB5256) (fx* . gB5255) (greatest-fixnum . gB5254) (least-fixnum . gB5253) (fixnum-width . gB5252) (fixnum? . gB5251) (bitwise-rotate-bit-field . gB5250) (bitwise-reverse-bit-field . gB524f) (bitwise-length . gB524e) (bitwise-if . gB524d) (bitwise-first-bit-set . gB524c) (bitwise-copy-bit-field . gB524b) (bitwise-copy-bit . gB524a) (bitwise-bit-set? . gB5249) (bitwise-bit-field . gB5248) (bitwise-bit-count . gB5247) (bitwise-xor . gB5246) (bitwise-ior . gB5245) (bitwise-and . gB5244) (bitwise-not . gB5243) (bitwise-arithmetic-shift-right . gB5242) (bitwise-arithmetic-shift-left . gB5241) (bitwise-arithmetic-shift . gB5240) (zero? . gB523f) (vector? . gB523e) (vector-set! . gB523d) (vector-ref . gB523c) (vector-map . gB523b) (vector-length . gB523a) (vector-for-each . gB5239) (vector-fill! . gB5238) (vector->list . gB5237) (vector . gB5236) (values . gB5235) (truncate . gB5234) (tan . gB5233) (symbol? . gB5232) (symbol=? . gB5231) (symbol->string . gB5230) (substring . gB522f) (string? . gB522e) (string>? . gB522d) (string>=? . gB522c) (string=? . gB522b) (string<? . gB522a) (string<=? . gB5229) (string-ref . gB5228) (string-length . gB5227) (string-for-each . gB5226) (string-copy . gB5225) (string-append . gB5224) (string->symbol . gB5223) (string->number . gB5222) (string->list . gB5221) (string . gB5220) (sqrt . gB521f) (sin . gB521e) (round . gB521d) (reverse . gB521c) (real? . gB521b) (real-valued? . gB521a) (real-part . gB5219) (rationalize . gB5218) (rational? . gB5217) (rational-valued? . gB5216) (procedure? . gB5215) (positive? . gB5214) (pair? . gB5213) (odd? . gB5212) (numerator . gB5211) (number? . gB5210) (number->string . gB520f) (null? . gB520e) (not . gB520d) (negative? . gB520c) (nan? . gB520b) (min . gB520a) (max . gB5209) (map . gB5208) (make-vector . gB5207) (make-string . gB5206) (make-rectangular . gB5205) (make-polar . gB5204) (magnitude . gB5203) (log . gB5202) (list? . gB5201) (list-tail . gB5200) (list-ref . gB51ff) (list->vector . gB51fe) (list->string . gB51fd) (list . gB51fc) (length . gB51fb) (lcm . gB51fa) (integer? . gB51f9) (integer-valued? . gB51f8) (integer->char . gB51f7) (infinite? . gB51f6) (inexact? . gB51f5) (inexact . gB51f4) (imag-part . gB51f3) (gcd . gB51f2) (for-each . gB51f1) (floor . gB51f0) (finite? . gB51ef) (expt . gB51ee) (exp . gB51ed) (exact? . gB51ec) (exact-integer-sqrt . gB51eb) (exact . gB51ea) (even? . gB51e9) (error . gB51e8) (eqv? . gB51e7) (equal? . gB51e6) (eq? . gB51e5) (dynamic-wind . gB51e4) (div0-and-mod0 . gB51e3) (mod0 . gB51e2) (div0 . gB51e1) (div-and-mod . gB51e0) (mod . gB51df) (div . gB51de) (denominator . gB51dd) (cos . gB51dc) (cons . gB51db) (complex? . gB51da) (char? . gB51d9) (char>? . gB51d8) (char>=? . gB51d7) (char=? . gB51d6) (char<? . gB51d5) (char<=? . gB51d4) (char->integer . gB51d3) (ceiling . gB51d2) (call-with-values . gB51d1) (call/cc . gB51d0) (call-with-current-continuation . gB51cf) (cddddr . gB51ce) (cdddar . gB51cd) (cddadr . gB51cc) (cddaar . gB51cb) (cdaddr . gB51ca) (cdadar . gB51c9) (cdaadr . gB51c8) (cdaaar . gB51c7) (cadddr . gB51c6) (caddar . gB51c5) (cadadr . gB51c4) (cadaar . gB51c3) (caaddr . gB51c2) (caadar . gB51c1) (caaadr . gB51c0) (caaaar . gB51bf) (cdddr . gB51be) (cddar . gB51bd) (cdadr . gB51bc) (cdaar . gB51bb) (caddr . gB51ba) (cadar . gB51b9) (caadr . gB51b8) (caaar . gB51b7) (cddr . gB51b6) (cdar . gB51b5) (cadr . gB51b4) (caar . gB51b3) (cdr . gB51b2) (car . gB51b1) (boolean? . gB51b0) (boolean=? . gB51af) (atan . gB51ae) (assertion-violation . gB51ad) (assertion-error . gB3193) (asin . gB51ac) (apply . gB51ab) (append . gB51aa) (angle . gB51a9) (acos . gB51a8) (abs . gB51a7) (/ . gB51a6) (* . gB51a5) (- . gB51a4) (+ . gB51a3) (>= . gB51a2) (> . gB51a1) (= . gB51a0) (<= . gB519f) (< . gB519e) (library . gB519d) (&no-nans . gB519c) (&no-infinities . gB519b) (&i/o-encoding . gB519a) (&i/o-decoding . gB5199) (&i/o-port . gB5198) (&i/o-file-does-not-exist . gB5197) (&i/o-file-already-exists . gB5196) (&i/o-file-is-read-only . gB5195) (&i/o-file-protection . gB5194) (&i/o-filename . gB5193) (&i/o-invalid-position . gB5192) (&i/o-write . gB5191) (&i/o-read . gB5190) (&i/o . gB518f) (&undefined . gB518e) (&syntax . gB518d) (&lexical . gB518c) (&implementation-restriction . gB518b) (&non-continuable . gB518a) (&who . gB5189) (&irritants . gB5188) (&assertion . gB5187) (&violation . gB5186) (&error . gB5185) (&serious . gB5184) (&warning . gB5183) (&message . gB5182) (&condition . gB5181) (define-condition-type . gB5180) (define-enumeration . gB517f) (define-record-type . gB517e) (parent-rtd . gB517d) (nongenerative . gB517c) (opaque . gB517b) (sealed . gB517a) (protocol . gB5179) (parent . gB5178) (immutable . gB5177) (mutable . gB5176) (fields . gB5175) (error-handling-mode . gB5174) (file-options . gB5173) (buffer-mode . gB5172) (eol-style . gB5171) (guard . gB5170) (trace-define . gB516f) (trace-lambda . gB516e) (unsyntax-splicing . gB516d) (unsyntax . gB516c) (unquote-splicing . gB516b) (unquote . gB516a) (_ . gB5169) (else . gB5168) (=> . gB5167) (... . gB5166) (assert . gB5165) (endianness . gB5164) (delay . gB5163) (time . gB5162) (do . gB5161) (cond . gB5160) (let* . gB515f) (let*-values . gB515e) (let-values . gB515d) (identifier-syntax . gB515c) (with-syntax . gB515b) (quasisyntax . gB515a) (quasiquote . gB5159) (syntax-rules . gB5158) (include . gB5157) (define-struct . gB5156) (record-constructor-descriptor . gB5155) (record-type-descriptor . gB5154) (case . gB5153) (parameterize . gB5152) (unless . gB5151) (when . gB5150) (or . gB514f) (and . gB514e) (if . gB514d) (let . gB514c) (letrec* . gB514b) (letrec . gB514a) (type-descriptor . gB5149) (case-lambda . gB5148) (lambda . gB5147) (syntax . gB5146) (syntax-case . gB5145) (quote . gB5144) (foreign-call . gB5143) (letrec-syntax . gB5142) (let-syntax . gB5141) (set! . gB5140) (import . gB513f) (begin . gB513e) (module . gB513d) (define-syntax . gB513c) (define . gB513b)) '((gB4ec8 core-prim . &no-nans-rcd) (gB4ec6 core-prim . &no-nans-rtd) (gB4eb3 core-prim . &no-infinities-rcd) (gB4eb1 core-prim . &no-infinities-rtd) (gB4e9e core-prim . &i/o-encoding-rcd) (gB4e9c core-prim . &i/o-encoding-rtd) (gB4e83 core-prim . &i/o-decoding-rcd) (gB4e81 core-prim . &i/o-decoding-rtd) (gB4e6e core-prim . &i/o-port-rcd) (gB4e6c core-prim . &i/o-port-rtd) (gB4e53 core-prim . &i/o-file-does-not-exist-rcd) (gB4e51 core-prim . &i/o-file-does-not-exist-rtd) (gB4e3e core-prim . &i/o-file-already-exists-rcd) (gB4e3c core-prim . &i/o-file-already-exists-rtd) (gB4e29 core-prim . &i/o-file-is-read-only-rcd) (gB4e27 core-prim . &i/o-file-is-read-only-rtd) (gB4e14 core-prim . &i/o-file-protection-rcd) (gB4e12 core-prim . &i/o-file-protection-rtd) (gB4dff core-prim . &i/o-filename-rcd) (gB4dfd core-prim . &i/o-filename-rtd) (gB4de4 core-prim . &i/o-invalid-position-rcd) (gB4de2 core-prim . &i/o-invalid-position-rtd) (gB4dc9 core-prim . &i/o-write-rcd) (gB4dc7 core-prim . &i/o-write-rtd) (gB4db4 core-prim . &i/o-read-rcd) (gB4db2 core-prim . &i/o-read-rtd) (gB4d9f core-prim . &i/o-rcd) (gB4d9d core-prim . &i/o-rtd) (gB4d8a core-prim . &undefined-rcd) (gB4d88 core-prim . &undefined-rtd) (gB4d75 core-prim . &syntax-rcd) (gB4d73 core-prim . &syntax-rtd) (gB4d54 core-prim . &lexical-rcd) (gB4d52 core-prim . &lexical-rtd) (gB4d3f core-prim . &implementation-restriction-rcd) (gB4d3d core-prim . &implementation-restriction-rtd) (gB4d2a core-prim . &non-continuable-rcd) (gB4d28 core-prim . &non-continuable-rtd) (gB4d15 core-prim . &who-rcd) (gB4d13 core-prim . &who-rtd) (gB4cfa core-prim . &irritants-rcd) (gB4cf8 core-prim . &irritants-rtd) (gB4cdf core-prim . &assertion-rcd) (gB4cdd core-prim . &assertion-rtd) (gB4cca core-prim . &violation-rcd) (gB4cc8 core-prim . &violation-rtd) (gB4cb5 core-prim . &error-rcd) (gB4cb3 core-prim . &error-rtd) (gB4ca0 core-prim . &serious-rcd) (gB4c9e core-prim . &serious-rtd) (gB4c8b core-prim . &warning-rcd) (gB4c89 core-prim . &warning-rtd) (gB4c76 core-prim . &message-rcd) (gB4c74 core-prim . &message-rtd) (gB4c17 core-prim . &condition-rcd) (gB4c15 core-prim . &condition-rtd) (gB3195 core-prim . syntax-error) (gB30b9 core-prim . syntax-dispatch) (gB5461 core-prim . pretty-print) (gB5460 core-prim . eval-core) (gB545f core-prim . set-symbol-value!) (gB545e core-prim . symbol-value) (gB545d core-prim . gensym) (gB545c core-prim . void) (gB4fd9 core-prim . load) (gB31a7 core-prim . interaction-environment) (gB545b core-prim . char-ready?) (gB545a core-prim . regexp?) (gB5459 core-prim . read-line) (gB5458 core-prim . gensym-prefix-set!) (gB5457 core-prim . ungensym) (gB5456 core-prim . alist->eq-hash-table) (gB5455 core-prim . assoc-ref) (gB5454 core-prim . print) (gB5453 core-prim . format) (gB5452 core-prim . host-os) (gB2af8 core-prim . library-path) (gB5451 core-prim . standard-library-path) (gB5450 core-prim . file-newer?) (gB544f core-prim . stat-mtime) (gB544e core-prim . write-to-file) (gB544d core-prim . file->list) (gB544c core-prim . file->string) (gB544b core-prim . digit->integer) (gB544a core-prim . call-with-string-input-port) (gB5449 core-prim . call-with-string-io) (gB5448 core-prim . string-split) (gB5447 core-prim . bytevector-for-each) (gB5446 core-prim . string->regexp) (gB5445 core-prim . rxmatch) (gB5444 core-prim . regexp-replace-all) (gB5443 core-prim . hashtable-for-each) (gB28e2 core-prim . mosh-cache-dir) (gB5442 core-prim . call-process) (gB5441 core-prim . local-tz-offset) (gB5440 core-prim . microseconds) (gB543f core-prim . directory-list) (gB543e core-prim . set-current-directory!) (gB543d core-prim . expand-path) (gB543c core-prim . current-directory) (gB543b core-prim . %spawn) (gB543a core-prim . %waitpid) (gB5439 core-prim . simple-struct-name) (gB5438 core-prim . simple-struct-set!) (gB5437 core-prim . simple-struct-ref) (gB5436 core-prim . make-simple-struct) (gB5435 core-prim . simple-struct?) (gB5434 core-prim . pointer-ref-c-int64) (gB5433 core-prim . pointer-ref-c-int32) (gB5432 core-prim . pointer-ref-c-int16) (gB5431 core-prim . pointer-ref-c-int8) (gB5430 core-prim . pointer-ref-c-uint64) (gB542f core-prim . pointer-ref-c-uint32) (gB542e core-prim . pointer-ref-c-uint16) (gB542d core-prim . pointer-ref-c-uint8) (gB542c core-prim . pointer-set-c-uint64!) (gB542b core-prim . pointer-set-c-uint32!) (gB542a core-prim . pointer-set-c-uint16!) (gB5429 core-prim . pointer-set-c-uint8!) (gB5428 core-prim . pointer-set-c-int64!) (gB5427 core-prim . pointer-set-c-int32!) (gB5426 core-prim . pointer-set-c-int16!) (gB5425 core-prim . pointer-set-c-int8!) (gB5424 core-prim . pointer-set-c-pointer!) (gB5423 core-prim . pointer-set-c-double!) (gB5422 core-prim . pointer-set-c-float!) (gB5421 core-prim . pointer-set-c-long-long!) (gB5420 core-prim . pointer-set-c-long!) (gB541f core-prim . pointer-set-c-int!) (gB541e core-prim . pointer-set-c-short!) (gB541d core-prim . pointer-set-c-char!) (gB541c core-prim . pointer-ref-c-pointer) (gB541b core-prim . pointer-ref-c-double) (gB541a core-prim . pointer-ref-c-float) (gB5419 core-prim . pointer-ref-c-unsigned-long-long) (gB5418 core-prim . pointer-ref-c-signed-long-long) (gB5417 core-prim . pointer-ref-c-unsigned-long) (gB5416 core-prim . pointer-ref-c-signed-long) (gB5415 core-prim . pointer-ref-c-unsigned-int) (gB5414 core-prim . pointer-ref-c-signed-int) (gB5413 core-prim . pointer-ref-c-unsigned-short) (gB5412 core-prim . pointer-ref-c-signed-short) (gB5411 core-prim . pointer-ref-c-unsigned-char) (gB5410 core-prim . pointer-ref-c-signed-char) (gB540f core-prim . pointer->integer) (gB540e core-prim . integer->pointer) (gB540d core-prim . pointer?) (gB540c core-prim . shared-errno) (gB540b core-prim . %ffi-free-c-callback-trampoline) (gB540a core-prim . %ffi-make-c-callback-trampoline) (gB5409 core-prim . %ffi-free) (gB5408 core-prim . %ffi-malloc) (gB5407 core-prim . %ffi-supported?) (gB5406 core-prim . %ffi-pointer->string) (gB5405 core-prim . %ffi-call) (gB5404 core-prim . %ffi-lookup) (gB5403 core-prim . %ffi-open) (gB5402 core-prim . null-terminated-utf8->string) (gB5401 core-prim . null-terminated-bytevector->string) (gB5400 core-prim . %fork) (gB53ff core-prim . %pipe) (gB53fe core-prim . p) (gB53fd core-prim . open-output-string) (gB53fc core-prim . get-output-string) (gB53fb core-prim . file-stat-ctime) (gB53fa core-prim . file-stat-atime) (gB53f9 core-prim . file-stat-mtime) (gB53f8 core-prim . file-size-in-bytes) (gB53f7 core-prim . file-writable?) (gB53f6 core-prim . file-executable?) (gB53f5 core-prim . file-readable?) (gB53f4 core-prim . file-regular?) (gB53f3 core-prim . file-symbolic-link?) (gB53f2 core-prim . file-directory?) (gB53f1 core-prim . create-symbolic-link) (gB53f0 core-prim . rename-file) (gB53ef core-prim . delete-directory) (gB53ee core-prim . create-directory) (gB53ed core-prim . create-mosh-cache-dir) (gB53ec core-prim . get-environment-variables) (gB53eb core-prim . current-exception-handler) (gB53ea core-prim . get-environment-variable) (gB53e9 core-prim . join-wraps) (gB53e8 core-prim . id->real-label) (gB53e7 core-prim . same-marks?) (gB53e6 core-prim . same-marks*?) (gB53e5 core-prim . get-timeofday) (gB53e4 core-prim . get-command-line) (gB53e3 core-prim . sys-display) (gB53e2 core-prim . whereis) (gB53e1 core-prim . register) (gB53e0 core-prim . vm-join!) (gB53df core-prim . vm-set-value!) (gB53de core-prim . vm?) (gB53dd core-prim . main-vm?) (gB53dc core-prim . vm-eval) (gB53db core-prim . vm-self) (gB53da core-prim . vm-start!) (gB53d9 core-prim . make-vm) (gB53d8 core-prim . mutex-try-lock!) (gB53d7 core-prim . mutex-unlock!) (gB53d6 core-prim . mutex-lock!) (gB53d5 core-prim . mutex?) (gB53d4 core-prim . make-mutex) (gB53d3 core-prim . condition-variable-notify-all!) (gB53d2 core-prim . condition-variable-notify!) (gB53d1 core-prim . condition-variable-wait!) (gB53d0 core-prim . make-condition-variable) (gB53cf core-prim . mosh-executable-path) (gB53ce core-prim . make-file-options) (gB53cd core-prim . source-info) (gB53cc core-prim . make-compiler-instruction) (gB53cb core-prim . make-instruction) (gB53ca core-prim . set-source-info!) (gB53c9 core-prim . bignum?) (gB53c8 core-prim . fast-equal?) (gB53c7 core-prim . fasl-read) (gB53c6 core-prim . fasl-write) (gB53c5 core-prim . time-usage) (gB53c4 core-prim . os-constant) (gB53c3 core-prim . disasm) (gB28e0 core-prim . make-parameter) (gB53c2 core-prim . socket-port) (gB53c1 core-prim . socket-shutdown) (gB53c0 core-prim . socket-close) (gB53bf core-prim . socket-send) (gB53be core-prim . socket-recv!) (gB53bd core-prim . socket-recv) (gB53bc core-prim . make-server-socket) (gB53bb core-prim . make-client-socket) (gB53ba core-prim . socket-accept) (gB53b9 core-prim . socket?) (gB53b8 core-prim . string-upcase) (gB53b7 core-prim . string-titlecase) (gB53b6 core-prim . string-normalize-nfkd) (gB53b5 core-prim . string-normalize-nfkc) (gB53b4 core-prim . string-normalize-nfd) (gB53b3 core-prim . string-normalize-nfc) (gB53b2 core-prim . string-foldcase) (gB53b1 core-prim . string-downcase) (gB53b0 core-prim . string-ci>?) (gB53af core-prim . string-ci>=?) (gB53ae core-prim . string-ci=?) (gB53ad core-prim . string-ci<?) (gB53ac core-prim . string-ci<=?) (gB53ab core-prim . char-whitespace?) (gB53aa core-prim . char-upper-case?) (gB53a9 core-prim . char-title-case?) (gB53a8 core-prim . char-numeric?) (gB53a7 core-prim . char-lower-case?) (gB53a6 core-prim . char-general-category) (gB53a5 core-prim . char-upcase) (gB53a4 core-prim . char-titlecase) (gB53a3 core-prim . char-foldcase) (gB53a2 core-prim . char-downcase) (gB53a1 core-prim . char-ci>?) (gB53a0 core-prim . char-ci>=?) (gB539f core-prim . char-ci=?) (gB539e core-prim . char-ci<?) (gB539d core-prim . char-ci<=?) (gB539c core-prim . char-alphabetic?) (gB2ee4 core-prim . make-variable-transformer) (gB319b core-prim . identifier?) (gB3187 core-prim . generate-temporaries) (gB3189 core-prim . free-identifier=?) (gB319f core-prim . syntax->datum) (gB319d core-prim . datum->syntax) (gB318b core-prim . bound-identifier=?) (gB539b core-prim . record-type-descriptor?) (gB539a core-prim . record-predicate) (gB5399 core-prim . record-mutator) (gB5398 core-prim . record-constructor) (gB5397 core-prim . record-accessor) (gB5396 core-prim . make-record-type-descriptor) (gB5395 core-prim . make-record-constructor-descriptor) (gB5394 core-prim . record?) (gB5393 core-prim . record-type-uid) (gB5392 core-prim . record-type-sealed?) (gB5391 core-prim . record-type-parent) (gB5390 core-prim . record-type-opaque?) (gB538f core-prim . record-type-name) (gB538e core-prim . record-type-generative?) (gB538d core-prim . record-type-field-names) (gB538c core-prim . record-rtd) (gB538b core-prim . record-field-mutable?) (gB538a core-prim . delete-file) (gB5389 core-prim . file-exists?) (gB5388 core-prim . vector-sort!) (gB5387 core-prim . vector-sort) (gB5386 core-prim . list-sort) (gB5385 core-prim . symbol-hash) (gB5384 core-prim . string-ci-hash) (gB5383 core-prim . string-hash) (gB5382 core-prim . equal-hash) (gB5381 core-prim . hashtable-equivalence-function) (gB5380 core-prim . make-hashtable) (gB537f core-prim . hashtable-hash-function) (gB537e core-prim . make-eqv-hashtable) (gB537d core-prim . make-eq-hashtable) (gB537c core-prim . hashtable?) (gB537b core-prim . hashtable-update!) (gB537a core-prim . hashtable-size) (gB5379 core-prim . hashtable-set!) (gB5378 core-prim . hashtable-ref) (gB5377 core-prim . hashtable-mutable?) (gB5376 core-prim . hashtable-keys) (gB5375 core-prim . hashtable-entries) (gB5374 core-prim . hashtable-delete!) (gB5373 core-prim . hashtable-copy) (gB5372 core-prim . hashtable-contains?) (gB5371 core-prim . hashtable-clear!) (gB5370 core-prim . call-with-output-file) (gB536f core-prim . call-with-input-file) (gB536e core-prim . write-char) (gB536d core-prim . write) (gB536c core-prim . with-output-to-file) (gB536b core-prim . with-input-from-file) (gB536a core-prim . read-char) (gB5369 core-prim . read) (gB5368 core-prim . peek-char) (gB5367 core-prim . open-output-file) (gB5366 core-prim . open-input-file) (gB5365 core-prim . newline) (gB5364 core-prim . display) (gB5363 core-prim . close-output-port) (gB5362 core-prim . close-input-port) (gB5361 core-prim . eof-object?) (gB5360 core-prim . eof-object) (gB535f core-prim . current-error-port) (gB535e core-prim . current-output-port) (gB535d core-prim . current-input-port) (gB535c core-prim . output-port?) (gB535b core-prim . input-port?) (gB535a core-prim . utf-8-codec) (gB5359 core-prim . utf-16-codec) (gB5358 core-prim . transcoder-error-handling-mode) (gB5357 core-prim . transcoder-eol-style) (gB5356 core-prim . transcoder-codec) (gB5355 core-prim . transcoded-port) (gB5354 core-prim . textual-port?) (gB5353 core-prim . string->bytevector) (gB5352 core-prim . standard-output-port) (gB5351 core-prim . standard-input-port) (gB5350 core-prim . standard-error-port) (gB534f core-prim . set-port-position!) (gB534e core-prim . put-u8) (gB534d core-prim . put-string) (gB534c core-prim . put-datum) (gB534b core-prim . put-char) (gB534a core-prim . put-bytevector) (gB5349 core-prim . port?) (gB5348 core-prim . port-transcoder) (gB5347 core-prim . port-position) (gB5346 core-prim . port-has-set-port-position!?) (gB5345 core-prim . port-has-port-position?) (gB5344 core-prim . port-eof?) (gB5343 core-prim . output-port-buffer-mode) (gB5342 core-prim . open-string-output-port) (gB5341 core-prim . open-string-input-port) (gB5340 core-prim . open-file-output-port) (gB533f core-prim . open-file-input/output-port) (gB533e core-prim . open-file-input-port) (gB533d core-prim . open-bytevector-output-port) (gB533c core-prim . open-bytevector-input-port) (gB533b core-prim . native-transcoder) (gB533a core-prim . native-eol-style) (gB5339 core-prim . make-transcoder) (gB5338 core-prim . latin-1-codec) (gB4dc3 core-prim . make-i/o-write-error) (gB4dae core-prim . make-i/o-read-error) (gB4e64 core-prim . make-i/o-port-error) (gB4dda core-prim . make-i/o-invalid-position-error) (gB4df5 core-prim . make-i/o-filename-error) (gB4e0e core-prim . make-i/o-file-protection-error) (gB4e23 core-prim . make-i/o-file-is-read-only-error) (gB4e4d core-prim . make-i/o-file-does-not-exist-error) (gB4e38 core-prim . make-i/o-file-already-exists-error) (gB4d99 core-prim . make-i/o-error) (gB4e94 core-prim . make-i/o-encoding-error) (gB4e7d core-prim . make-i/o-decoding-error) (gB5337 core-prim . make-custom-textual-output-port) (gB5336 core-prim . make-custom-textual-input/output-port) (gB5335 core-prim . make-custom-textual-input-port) (gB5334 core-prim . make-custom-binary-output-port) (gB5333 core-prim . make-custom-binary-input/output-port) (gB5332 core-prim . make-custom-binary-input-port) (gB5331 core-prim . make-bytevector) (gB5330 core-prim . lookahead-u8) (gB532f core-prim . lookahead-char) (gB4dc5 core-prim . i/o-write-error?) (gB4db0 core-prim . i/o-read-error?) (gB4e68 core-prim . i/o-port-error?) (gB4dde core-prim . i/o-invalid-position-error?) (gB4df9 core-prim . i/o-filename-error?) (gB4e10 core-prim . i/o-file-protection-error?) (gB4e25 core-prim . i/o-file-is-read-only-error?) (gB4e4f core-prim . i/o-file-does-not-exist-error?) (gB4e3a core-prim . i/o-file-already-exists-error?) (gB4d9b core-prim . i/o-error?) (gB4de0 core-prim . i/o-error-position) (gB4e6a core-prim . i/o-error-port) (gB4dfb core-prim . i/o-error-filename) (gB4e98 core-prim . i/o-encoding-error?) (gB4e9a core-prim . i/o-encoding-error-char) (gB4e7f core-prim . i/o-decoding-error?) (gB532e core-prim . get-u8) (gB532d core-prim . get-string-n!) (gB532c core-prim . get-string-n) (gB532b core-prim . get-string-all) (gB532a core-prim . get-line) (gB5329 core-prim . get-datum) (gB5328 core-prim . get-char) (gB5327 core-prim . get-bytevector-some) (gB5326 core-prim . get-bytevector-n!) (gB5325 core-prim . get-bytevector-n) (gB5324 core-prim . get-bytevector-all) (gB5323 core-prim . flush-output-port) (gB5322 core-prim . close-port) (gB3175 core-prim . scheme-report-environment) (gB5321 core-prim . quotient) (gB3173 core-prim . null-environment) (gB5320 core-prim . remainder) (gB531f core-prim . modulo) (gB531e core-prim . inexact->exact) (gB531d core-prim . force) (gB531c core-prim . exact->inexact) (gB531b core-prim . make-promise) (gB531a core-prim . exit) (gB4fd3 core-prim . command-line) (gB5319 core-prim . string-fill!) (gB5318 core-prim . string-set!) (gB5317 core-prim . set-cdr!) (gB5316 core-prim . set-car!) (gB5315 core-prim . remove) (gB5314 core-prim . remv) (gB5313 core-prim . remp) (gB5312 core-prim . remq) (gB5311 core-prim . partition) (gB5310 core-prim . memv) (gB530f core-prim . memq) (gB530e core-prim . memp) (gB530d core-prim . member) (gB530c core-prim . exists) (gB530b core-prim . for-all) (gB530a core-prim . fold-right) (gB5309 core-prim . fold-left) (gB5308 core-prim . find) (gB5307 core-prim . filter) (gB5306 core-prim . cons*) (gB5305 core-prim . assv) (gB5304 core-prim . assq) (gB5303 core-prim . assp) (gB5302 core-prim . assoc) (gB5301 core-prim . call-with-string-output-port) (gB5300 core-prim . call-with-port) (gB52ff core-prim . call-with-bytevector-output-port) (gB52fe core-prim . bytevector->string) (gB52fd core-prim . buffer-mode?) (gB52fc core-prim . binary-port?) (gB52fb core-prim . with-exception-handler) (gB52fa core-prim . raise-continuable) (gB52f9 core-prim . raise) (gB3179 core-prim . eval) (gB3171 core-prim . environment) (gB52f8 core-prim . make-enumeration) (gB52f7 core-prim . enum-set=?) (gB52f6 core-prim . enum-set-universe) (gB52f5 core-prim . enum-set-union) (gB52f4 core-prim . enum-set-subset?) (gB52f3 core-prim . enum-set-projection) (gB52f2 core-prim . enum-set-member?) (gB52f1 core-prim . enum-set-intersection) (gB52f0 core-prim . enum-set-indexer) (gB52ef core-prim . enum-set-difference) (gB52ee core-prim . enum-set-constructor) (gB52ed core-prim . enum-set-complement) (gB52ec core-prim . enum-set->list) (gB4d0f core-prim . who-condition?) (gB4c87 core-prim . warning?) (gB4cc6 core-prim . violation?) (gB4d86 core-prim . undefined-violation?) (gB4d6d core-prim . syntax-violation?) (gB4d71 core-prim . syntax-violation-subform) (gB4d6f core-prim . syntax-violation-form) (gB3199 core-prim . syntax-violation) (gB52eb core-prim . simple-conditions) (gB4c9c core-prim . serious-condition?) (gB4d26 core-prim . non-continuable-violation?) (gB4c70 core-prim . message-condition?) (gB4d0b core-prim . make-who-condition) (gB4c85 core-prim . make-warning) (gB4cc4 core-prim . make-violation) (gB4d84 core-prim . make-undefined-violation) (gB4d67 core-prim . make-syntax-violation) (gB4c9a core-prim . make-serious-condition) (gB4d24 core-prim . make-non-continuable-violation) (gB4c6c core-prim . make-message-condition) (gB4d4e core-prim . make-lexical-violation) (gB4cf0 core-prim . make-irritants-condition) (gB4d39 core-prim . make-implementation-restriction-violation) (gB4caf core-prim . make-error) (gB4cd9 core-prim . make-assertion-violation) (gB4d50 core-prim . lexical-violation?) (gB4cf4 core-prim . irritants-condition?) (gB4d3b core-prim . implementation-restriction-violation?) (gB4cb1 core-prim . error?) (gB4d11 core-prim . condition-who) (gB52ea core-prim . condition-predicate) (gB4c72 core-prim . condition-message) (gB4cf6 core-prim . condition-irritants) (gB52e9 core-prim . condition-accessor) (gB52e8 core-prim . condition) (gB4cdb core-prim . assertion-violation?) (gB52e7 core-prim . condition?) (gB52e6 core-prim . utf32->string) (gB52e5 core-prim . utf16->string) (gB52e4 core-prim . utf8->string) (gB52e3 core-prim . uint-list->bytevector) (gB52e2 core-prim . u8-list->bytevector) (gB52e1 core-prim . string->utf8) (gB52e0 core-prim . string->utf32) (gB52df core-prim . string->utf16) (gB52de core-prim . sint-list->bytevector) (gB52dd core-prim . native-endianness) (gB52dc core-prim . bytevector?) (gB52db core-prim . bytevector=?) (gB52da core-prim . bytevector-uint-set!) (gB52d9 core-prim . bytevector-uint-ref) (gB52d8 core-prim . bytevector-u8-set!) (gB52d7 core-prim . bytevector-u8-ref) (gB52d6 core-prim . bytevector-u64-set!) (gB52d5 core-prim . bytevector-u64-ref) (gB52d4 core-prim . bytevector-u64-native-set!) (gB52d3 core-prim . bytevector-u64-native-ref) (gB52d2 core-prim . bytevector-u32-set!) (gB52d1 core-prim . bytevector-u32-ref) (gB52d0 core-prim . bytevector-u32-native-set!) (gB52cf core-prim . bytevector-u32-native-ref) (gB52ce core-prim . bytevector-u16-set!) (gB52cd core-prim . bytevector-u16-ref) (gB52cc core-prim . bytevector-u16-native-set!) (gB52cb core-prim . bytevector-u16-native-ref) (gB52ca core-prim . bytevector-sint-set!) (gB52c9 core-prim . bytevector-sint-ref) (gB52c8 core-prim . bytevector-s8-set!) (gB52c7 core-prim . bytevector-s8-ref) (gB52c6 core-prim . bytevector-s64-set!) (gB52c5 core-prim . bytevector-s64-ref) (gB52c4 core-prim . bytevector-s64-native-set!) (gB52c3 core-prim . bytevector-s64-native-ref) (gB52c2 core-prim . bytevector-s32-set!) (gB52c1 core-prim . bytevector-s32-ref) (gB52c0 core-prim . bytevector-s32-native-set!) (gB52bf core-prim . bytevector-s32-native-ref) (gB52be core-prim . bytevector-s16-set!) (gB52bd core-prim . bytevector-s16-ref) (gB52bc core-prim . bytevector-s16-native-set!) (gB52bb core-prim . bytevector-s16-native-ref) (gB52ba core-prim . bytevector-length) (gB52b9 core-prim . bytevector-ieee-single-ref) (gB52b8 core-prim . bytevector-ieee-single-set!) (gB52b7 core-prim . bytevector-ieee-single-native-set!) (gB52b6 core-prim . bytevector-ieee-single-native-ref) (gB52b5 core-prim . bytevector-ieee-double-set!) (gB52b4 core-prim . bytevector-ieee-double-ref) (gB52b3 core-prim . bytevector-ieee-double-native-set!) (gB52b2 core-prim . bytevector-ieee-double-native-ref) (gB52b1 core-prim . bytevector-fill!) (gB52b0 core-prim . bytevector-copy!) (gB52af core-prim . bytevector-copy) (gB52ae core-prim . bytevector->uint-list) (gB52ad core-prim . bytevector->u8-list) (gB52ac core-prim . bytevector->sint-list) (gB4ec4 core-prim . no-nans-violation?) (gB4eaf core-prim . no-infinities-violation?) (gB4ec2 core-prim . make-no-nans-violation) (gB4ead core-prim . make-no-infinities-violation) (gB52ab core-prim . real->flonum) (gB52aa core-prim . flzero?) (gB52a9 core-prim . fltruncate) (gB52a8 core-prim . fltan) (gB52a7 core-prim . flsqrt) (gB52a6 core-prim . flsin) (gB52a5 core-prim . flround) (gB52a4 core-prim . flpositive?) (gB52a3 core-prim . flonum?) (gB52a2 core-prim . flodd?) (gB52a1 core-prim . flnumerator) (gB52a0 core-prim . flnegative?) (gB529f core-prim . flnan?) (gB529e core-prim . flmod0) (gB529d core-prim . flmod) (gB529c core-prim . flmin) (gB529b core-prim . flmax) (gB529a core-prim . fllog) (gB5299 core-prim . flinteger?) (gB5298 core-prim . flinfinite?) (gB5297 core-prim . flfloor) (gB5296 core-prim . flfinite?) (gB5295 core-prim . flexpt) (gB5294 core-prim . flexp) (gB5293 core-prim . fleven?) (gB5292 core-prim . fldiv0-and-mod0) (gB5291 core-prim . fldiv0) (gB5290 core-prim . fldiv-and-mod) (gB528f core-prim . fldiv) (gB528e core-prim . fldenominator) (gB528d core-prim . flcos) (gB528c core-prim . flceiling) (gB528b core-prim . flatan) (gB528a core-prim . flasin) (gB5289 core-prim . flacos) (gB5288 core-prim . flabs) (gB5287 core-prim . fl>?) (gB5286 core-prim . fl>=?) (gB5285 core-prim . fl=?) (gB5284 core-prim . fl<?) (gB5283 core-prim . fl<=?) (gB5282 core-prim . fl/) (gB5281 core-prim . fl-) (gB5280 core-prim . fl+) (gB527f core-prim . fl*) (gB527e core-prim . fixnum->flonum) (gB527d core-prim . fxzero?) (gB527c core-prim . fxxor) (gB527b core-prim . fxrotate-bit-field) (gB527a core-prim . fxreverse-bit-field) (gB5279 core-prim . fxpositive?) (gB5278 core-prim . fxodd?) (gB5277 core-prim . fxnot) (gB5276 core-prim . fxnegative?) (gB5275 core-prim . fxmod0) (gB5274 core-prim . fxmod) (gB5273 core-prim . fxmin) (gB5272 core-prim . fxmax) (gB5271 core-prim . fxlength) (gB5270 core-prim . fxior) (gB526f core-prim . fxif) (gB526e core-prim . fxfirst-bit-set) (gB526d core-prim . fxeven?) (gB526c core-prim . fxdiv0-and-mod0) (gB526b core-prim . fxdiv0) (gB526a core-prim . fxdiv-and-mod) (gB5269 core-prim . fxdiv) (gB5268 core-prim . fxcopy-bit-field) (gB5267 core-prim . fxcopy-bit) (gB5266 core-prim . fxbit-set?) (gB5265 core-prim . fxbit-field) (gB5264 core-prim . fxbit-count) (gB5263 core-prim . fxarithmetic-shift-right) (gB5262 core-prim . fxarithmetic-shift-left) (gB5261 core-prim . fxarithmetic-shift) (gB5260 core-prim . fxand) (gB525f core-prim . fx>?) (gB525e core-prim . fx>=?) (gB525d core-prim . fx=?) (gB525c core-prim . fx<?) (gB525b core-prim . fx<=?) (gB525a core-prim . fx-/carry) (gB5259 core-prim . fx-) (gB5258 core-prim . fx+/carry) (gB5257 core-prim . fx+) (gB5256 core-prim . fx*/carry) (gB5255 core-prim . fx*) (gB5254 core-prim . greatest-fixnum) (gB5253 core-prim . least-fixnum) (gB5252 core-prim . fixnum-width) (gB5251 core-prim . fixnum?) (gB5250 core-prim . bitwise-rotate-bit-field) (gB524f core-prim . bitwise-reverse-bit-field) (gB524e core-prim . bitwise-length) (gB524d core-prim . bitwise-if) (gB524c core-prim . bitwise-first-bit-set) (gB524b core-prim . bitwise-copy-bit-field) (gB524a core-prim . bitwise-copy-bit) (gB5249 core-prim . bitwise-bit-set?) (gB5248 core-prim . bitwise-bit-field) (gB5247 core-prim . bitwise-bit-count) (gB5246 core-prim . bitwise-xor) (gB5245 core-prim . bitwise-ior) (gB5244 core-prim . bitwise-and) (gB5243 core-prim . bitwise-not) (gB5242 core-prim . bitwise-arithmetic-shift-right) (gB5241 core-prim . bitwise-arithmetic-shift-left) (gB5240 core-prim . bitwise-arithmetic-shift) (gB523f core-prim . zero?) (gB523e core-prim . vector?) (gB523d core-prim . vector-set!) (gB523c core-prim . vector-ref) (gB523b core-prim . vector-map) (gB523a core-prim . vector-length) (gB5239 core-prim . vector-for-each) (gB5238 core-prim . vector-fill!) (gB5237 core-prim . vector->list) (gB5236 core-prim . vector) (gB5235 core-prim . values) (gB5234 core-prim . truncate) (gB5233 core-prim . tan) (gB5232 core-prim . symbol?) (gB5231 core-prim . symbol=?) (gB5230 core-prim . symbol->string) (gB522f core-prim . substring) (gB522e core-prim . string?) (gB522d core-prim . string>?) (gB522c core-prim . string>=?) (gB522b core-prim . string=?) (gB522a core-prim . string<?) (gB5229 core-prim . string<=?) (gB5228 core-prim . string-ref) (gB5227 core-prim . string-length) (gB5226 core-prim . string-for-each) (gB5225 core-prim . string-copy) (gB5224 core-prim . string-append) (gB5223 core-prim . string->symbol) (gB5222 core-prim . string->number) (gB5221 core-prim . string->list) (gB5220 core-prim . string) (gB521f core-prim . sqrt) (gB521e core-prim . sin) (gB521d core-prim . round) (gB521c core-prim . reverse) (gB521b core-prim . real?) (gB521a core-prim . real-valued?) (gB5219 core-prim . real-part) (gB5218 core-prim . rationalize) (gB5217 core-prim . rational?) (gB5216 core-prim . rational-valued?) (gB5215 core-prim . procedure?) (gB5214 core-prim . positive?) (gB5213 core-prim . pair?) (gB5212 core-prim . odd?) (gB5211 core-prim . numerator) (gB5210 core-prim . number?) (gB520f core-prim . number->string) (gB520e core-prim . null?) (gB520d core-prim . not) (gB520c core-prim . negative?) (gB520b core-prim . nan?) (gB520a core-prim . min) (gB5209 core-prim . max) (gB5208 core-prim . map) (gB5207 core-prim . make-vector) (gB5206 core-prim . make-string) (gB5205 core-prim . make-rectangular) (gB5204 core-prim . make-polar) (gB5203 core-prim . magnitude) (gB5202 core-prim . log) (gB5201 core-prim . list?) (gB5200 core-prim . list-tail) (gB51ff core-prim . list-ref) (gB51fe core-prim . list->vector) (gB51fd core-prim . list->string) (gB51fc core-prim . list) (gB51fb core-prim . length) (gB51fa core-prim . lcm) (gB51f9 core-prim . integer?) (gB51f8 core-prim . integer-valued?) (gB51f7 core-prim . integer->char) (gB51f6 core-prim . infinite?) (gB51f5 core-prim . inexact?) (gB51f4 core-prim . inexact) (gB51f3 core-prim . imag-part) (gB51f2 core-prim . gcd) (gB51f1 core-prim . for-each) (gB51f0 core-prim . floor) (gB51ef core-prim . finite?) (gB51ee core-prim . expt) (gB51ed core-prim . exp) (gB51ec core-prim . exact?) (gB51eb core-prim . exact-integer-sqrt) (gB51ea core-prim . exact) (gB51e9 core-prim . even?) (gB51e8 core-prim . error) (gB51e7 core-prim . eqv?) (gB51e6 core-prim . equal?) (gB51e5 core-prim . eq?) (gB51e4 core-prim . dynamic-wind) (gB51e3 core-prim . div0-and-mod0) (gB51e2 core-prim . mod0) (gB51e1 core-prim . div0) (gB51e0 core-prim . div-and-mod) (gB51df core-prim . mod) (gB51de core-prim . div) (gB51dd core-prim . denominator) (gB51dc core-prim . cos) (gB51db core-prim . cons) (gB51da core-prim . complex?) (gB51d9 core-prim . char?) (gB51d8 core-prim . char>?) (gB51d7 core-prim . char>=?) (gB51d6 core-prim . char=?) (gB51d5 core-prim . char<?) (gB51d4 core-prim . char<=?) (gB51d3 core-prim . char->integer) (gB51d2 core-prim . ceiling) (gB51d1 core-prim . call-with-values) (gB51d0 core-prim . call/cc) (gB51cf core-prim . call-with-current-continuation) (gB51ce core-prim . cddddr) (gB51cd core-prim . cdddar) (gB51cc core-prim . cddadr) (gB51cb core-prim . cddaar) (gB51ca core-prim . cdaddr) (gB51c9 core-prim . cdadar) (gB51c8 core-prim . cdaadr) (gB51c7 core-prim . cdaaar) (gB51c6 core-prim . cadddr) (gB51c5 core-prim . caddar) (gB51c4 core-prim . cadadr) (gB51c3 core-prim . cadaar) (gB51c2 core-prim . caaddr) (gB51c1 core-prim . caadar) (gB51c0 core-prim . caaadr) (gB51bf core-prim . caaaar) (gB51be core-prim . cdddr) (gB51bd core-prim . cddar) (gB51bc core-prim . cdadr) (gB51bb core-prim . cdaar) (gB51ba core-prim . caddr) (gB51b9 core-prim . cadar) (gB51b8 core-prim . caadr) (gB51b7 core-prim . caaar) (gB51b6 core-prim . cddr) (gB51b5 core-prim . cdar) (gB51b4 core-prim . cadr) (gB51b3 core-prim . caar) (gB51b2 core-prim . cdr) (gB51b1 core-prim . car) (gB51b0 core-prim . boolean?) (gB51af core-prim . boolean=?) (gB51ae core-prim . atan) (gB51ad core-prim . assertion-violation) (gB3193 core-prim . assertion-error) (gB51ac core-prim . asin) (gB51ab core-prim . apply) (gB51aa core-prim . append) (gB51a9 core-prim . angle) (gB51a8 core-prim . acos) (gB51a7 core-prim . abs) (gB51a6 core-prim . /) (gB51a5 core-prim . *) (gB51a4 core-prim . -) (gB51a3 core-prim . +) (gB51a2 core-prim . >=) (gB51a1 core-prim . >) (gB51a0 core-prim . =) (gB519f core-prim . <=) (gB519e core-prim . <) (gB519d core-prim . library) (gB519c $core-rtd &no-nans-rtd &no-nans-rcd) (gB519b $core-rtd &no-infinities-rtd &no-infinities-rcd) (gB519a $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (gB5199 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (gB5198 $core-rtd &i/o-port-rtd &i/o-port-rcd) (gB5197 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (gB5196 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (gB5195 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (gB5194 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (gB5193 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (gB5192 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (gB5191 $core-rtd &i/o-write-rtd &i/o-write-rcd) (gB5190 $core-rtd &i/o-read-rtd &i/o-read-rcd) (gB518f $core-rtd &i/o-rtd &i/o-rcd) (gB518e $core-rtd &undefined-rtd &undefined-rcd) (gB518d $core-rtd &syntax-rtd &syntax-rcd) (gB518c $core-rtd &lexical-rtd &lexical-rcd) (gB518b $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (gB518a $core-rtd &non-continuable-rtd &non-continuable-rcd) (gB5189 $core-rtd &who-rtd &who-rcd) (gB5188 $core-rtd &irritants-rtd &irritants-rcd) (gB5187 $core-rtd &assertion-rtd &assertion-rcd) (gB5186 $core-rtd &violation-rtd &violation-rcd) (gB5185 $core-rtd &error-rtd &error-rcd) (gB5184 $core-rtd &serious-rtd &serious-rcd) (gB5183 $core-rtd &warning-rtd &warning-rcd) (gB5182 $core-rtd &message-rtd &message-rcd) (gB5181 $core-rtd &condition-rtd &condition-rcd) (gB5180 macro . define-condition-type) (gB517f macro . define-enumeration) (gB517e macro . define-record-type) (gB517d macro . parent-rtd) (gB517c macro . nongenerative) (gB517b macro . opaque) (gB517a macro . sealed) (gB5179 macro . protocol) (gB5178 macro . parent) (gB5177 macro . immutable) (gB5176 macro . mutable) (gB5175 macro . fields) (gB5174 macro . error-handling-mode) (gB5173 macro . file-options) (gB5172 macro . buffer-mode) (gB5171 macro . eol-style) (gB5170 macro . guard) (gB516f macro . trace-define) (gB516e macro . trace-lambda) (gB516d macro . unsyntax-splicing) (gB516c macro . unsyntax) (gB516b macro . unquote-splicing) (gB516a macro . unquote) (gB5169 macro . _) (gB5168 macro . else) (gB5167 macro . =>) (gB5166 macro . ...) (gB5165 macro . assert) (gB5164 macro . endianness) (gB5163 macro . delay) (gB5162 macro . time) (gB5161 macro . do) (gB5160 macro . cond) (gB515f macro . let*) (gB515e macro . let*-values) (gB515d macro . let-values) (gB515c macro . identifier-syntax) (gB515b macro . with-syntax) (gB515a macro . quasisyntax) (gB5159 macro . quasiquote) (gB5158 macro . syntax-rules) (gB5157 macro . include) (gB5156 macro . define-struct) (gB5155 core-macro . record-constructor-descriptor) (gB5154 core-macro . record-type-descriptor) (gB5153 macro . case) (gB5152 macro . parameterize) (gB5151 macro . unless) (gB5150 macro . when) (gB514f core-macro . or) (gB514e core-macro . and) (gB514d core-macro . if) (gB514c core-macro . let) (gB514b core-macro . letrec*) (gB514a core-macro . letrec) (gB5149 core-macro . type-descriptor) (gB5148 core-macro . case-lambda) (gB5147 core-macro . lambda) (gB5146 core-macro . syntax) (gB5145 core-macro . syntax-case) (gB5144 core-macro . quote) (gB5143 core-macro . foreign-call) (gB5142 letrec-syntax) (gB5141 let-syntax) (gB5140 set!) (gB513f import) (gB513e begin) (gB513d module) (gB513c define-syntax) (gB513b define)) values values '#f '#f '#f '#f) (gB2ccd@gB2b19@install-library 'gB5482 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . gB5461) (eval-core . gB5460) (set-symbol-value! . gB545f) (symbol-value . gB545e) (gensym . gB545d) (void . gB545c)) '() values values '#f '#f '#f '#f) (gB2ccd@gB2b19@install-library 'gB5483 '(mosh) '() '() '() '() '((set-symbol-value! . gB545f) (symbol-value . gB545e) (regexp? . gB545a) (read-line . gB5459) (ungensym . gB5457) (alist->eq-hash-table . gB5456) (assoc-ref . gB5455) (print . gB5454) (format . gB5453) (host-os . gB5452) (library-path . gB2af8) (standard-library-path . gB5451) (file-newer? . gB5450) (stat-mtime . gB544f) (digit->integer . gB544b) (call-with-string-input-port . gB544a) (call-with-string-io . gB5449) (string-split . gB5448) (bytevector-for-each . gB5447) (string->regexp . gB5446) (rxmatch . gB5445) (regexp-replace-all . gB5444) (hashtable-for-each . gB5443) (set-current-directory! . gB543e) (expand-path . gB543d) (current-directory . gB543c) (p . gB53fe) (get-timeofday . gB53e5) (get-command-line . gB53e4) (sys-display . gB53e3) (whereis . gB53e2) (register . gB53e1) (vm-join! . gB53e0) (vm-set-value! . gB53df) (vm? . gB53de) (main-vm? . gB53dd) (vm-eval . gB53dc) (vm-self . gB53db) (vm-start! . gB53da) (make-vm . gB53d9) (mutex-try-lock! . gB53d8) (mutex-unlock! . gB53d7) (mutex-lock! . gB53d6) (mutex? . gB53d5) (make-mutex . gB53d4) (condition-variable-notify-all! . gB53d3) (condition-variable-notify! . gB53d2) (condition-variable-wait! . gB53d1) (make-condition-variable . gB53d0) (mosh-executable-path . gB53cf) (make-file-options . gB53ce) (source-info . gB53cd) (make-compiler-instruction . gB53cc) (make-instruction . gB53cb) (set-source-info! . gB53ca) (bignum? . gB53c9) (fast-equal? . gB53c8) (fasl-read . gB53c7) (fasl-write . gB53c6) (time-usage . gB53c5) (os-constant . gB53c4) (time . gB5162) (include . gB5157)) '() values values '#f '#f '#f '#f) (gB2ccd@gB2b19@install-library 'gB5484 '(system) '() '() '() '() '((gensym-prefix-set! . gB5458) (write-to-file . gB544e) (file->list . gB544d) (file->string . gB544c) (mosh-cache-dir . gB28e2) (call-process . gB5442) (local-tz-offset . gB5441) (microseconds . gB5440) (directory-list . gB543f) (expand-path . gB543d) (%spawn . gB543b) (%waitpid . gB543a) (simple-struct-name . gB5439) (simple-struct-set! . gB5438) (simple-struct-ref . gB5437) (make-simple-struct . gB5436) (simple-struct? . gB5435) (pointer-ref-c-int64 . gB5434) (pointer-ref-c-int32 . gB5433) (pointer-ref-c-int16 . gB5432) (pointer-ref-c-int8 . gB5431) (pointer-ref-c-uint64 . gB5430) (pointer-ref-c-uint32 . gB542f) (pointer-ref-c-uint16 . gB542e) (pointer-ref-c-uint8 . gB542d) (pointer-set-c-uint64! . gB542c) (pointer-set-c-uint32! . gB542b) (pointer-set-c-uint16! . gB542a) (pointer-set-c-uint8! . gB5429) (pointer-set-c-int64! . gB5428) (pointer-set-c-int32! . gB5427) (pointer-set-c-int16! . gB5426) (pointer-set-c-int8! . gB5425) (pointer-set-c-pointer! . gB5424) (pointer-set-c-double! . gB5423) (pointer-set-c-float! . gB5422) (pointer-set-c-long-long! . gB5421) (pointer-set-c-long! . gB5420) (pointer-set-c-int! . gB541f) (pointer-set-c-short! . gB541e) (pointer-set-c-char! . gB541d) (pointer-ref-c-pointer . gB541c) (pointer-ref-c-double . gB541b) (pointer-ref-c-float . gB541a) (pointer-ref-c-unsigned-long-long . gB5419) (pointer-ref-c-signed-long-long . gB5418) (pointer-ref-c-unsigned-long . gB5417) (pointer-ref-c-signed-long . gB5416) (pointer-ref-c-unsigned-int . gB5415) (pointer-ref-c-signed-int . gB5414) (pointer-ref-c-unsigned-short . gB5413) (pointer-ref-c-signed-short . gB5412) (pointer-ref-c-unsigned-char . gB5411) (pointer-ref-c-signed-char . gB5410) (pointer->integer . gB540f) (integer->pointer . gB540e) (pointer? . gB540d) (shared-errno . gB540c) (%ffi-free-c-callback-trampoline . gB540b) (%ffi-make-c-callback-trampoline . gB540a) (%ffi-free . gB5409) (%ffi-malloc . gB5408) (%ffi-supported? . gB5407) (%ffi-pointer->string . gB5406) (%ffi-call . gB5405) (%ffi-lookup . gB5404) (%ffi-open . gB5403) (null-terminated-utf8->string . gB5402) (null-terminated-bytevector->string . gB5401) (%fork . gB5400) (%pipe . gB53ff) (open-output-string . gB53fd) (get-output-string . gB53fc) (file-stat-ctime . gB53fb) (file-stat-atime . gB53fa) (file-stat-mtime . gB53f9) (file-size-in-bytes . gB53f8) (file-writable? . gB53f7) (file-executable? . gB53f6) (file-readable? . gB53f5) (file-regular? . gB53f4) (file-symbolic-link? . gB53f3) (file-directory? . gB53f2) (create-symbolic-link . gB53f1) (rename-file . gB53f0) (delete-directory . gB53ef) (create-directory . gB53ee) (create-mosh-cache-dir . gB53ed) (get-environment-variables . gB53ec) (current-exception-handler . gB53eb) (get-environment-variable . gB53ea) (join-wraps . gB53e9) (id->real-label . gB53e8) (same-marks? . gB53e7) (same-marks*? . gB53e6) (disasm . gB53c3) (make-parameter . gB28e0) (socket-port . gB53c2) (socket-shutdown . gB53c1) (socket-close . gB53c0) (socket-send . gB53bf) (socket-recv! . gB53be) (socket-recv . gB53bd) (make-server-socket . gB53bc) (make-client-socket . gB53bb) (socket-accept . gB53ba) (socket? . gB53b9) (parameterize . gB5152)) '() values values '#f '#f '#f '#f)))
(begin (set! gB4fbe@ref (unspecified)) (set! gB4fc0@x* (unspecified)) (set! gB4fc2@add-library-path! (unspecified)) (set! gB4fc4@parse-and-add-library-path (unspecified)) (set! gB4fc6@for-each-with-index (unspecified)) (set! gB4fc8@rpad (unspecified)) (set! gB4fca@condition-printer (unspecified)) (set! gB4fcc@record->field-alist (unspecified)) (set! gB4fce@map-with-index (unspecified)) (set! gB4fd0@repl (unspecified)) (set! gB4fd2@trace-printer (unspecified)) (set! gB4fd4@command-line (unspecified)) (set! gB4fd6@local-library-path (unspecified)) (set! gB4fd8@load/args (unspecified)) (set! gB4fda@load (unspecified)) (set! gB4fdc@ironscheme-build (unspecified)) (set! gB4fde@eval-top-level (unspecified)) (set! gB4fe0@compile-system-libraries (unspecified)) (set! gB4fe2@compile (unspecified)) (set! gB4fe4@compile->closure (unspecified)) (set! gB4fe6@pre-compile-r6rs-file (unspecified)) (set! gB4fe8@load-r6rs-top-level (unspecified)) (set! gB4fea@load-r6rs-top-level-sexp (unspecified)) (set! gB4fec@prefix-inc (unspecified)) (set! gB4fee@prefix-inc! (unspecified)) (set! gB4fbe@ref (lambda (gB5029@rtd gB502a@i gB502b@x) (let ((gB502f@val ((record-accessor gB5029@rtd gB502a@i) gB502b@x))) (if (symbol? gB502f@val) (ungensym gB502f@val) gB502f@val)))) (set! gB5121@gB4fbe@ref gB4fbe@ref) (set! gB4fc0@x* '()) (set! gB5122@gB4fc0@x* gB4fc0@x*) (set! gB4fc2@add-library-path! (lambda (gB5031@path) (gB2cbd@gB2af9@library-path (append (gB2cbd@gB2af9@library-path) (list gB5031@path))))) (set! gB5123@gB4fc2@add-library-path! gB4fc2@add-library-path!) (set! gB4fc4@parse-and-add-library-path (lambda (gB5033@paths gB5034@message) (letrec* ((gB5038@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((gB5039@t gB5033@paths)) (if gB5039@t ((lambda (gB503b@paths) (for-each (lambda (gB503d@path) (if (file-exists? gB503d@path) (gB4fc2@add-library-path! (expand-path gB503d@path)) (format (current-error-port) gB5034@message gB503d@path))) (string-split gB503b@paths gB5038@separator))) gB5039@t) (void)))))) (set! gB5124@gB4fc4@parse-and-add-library-path gB4fc4@parse-and-add-library-path) (set! gB4fc6@for-each-with-index (lambda (gB503f@proc gB5040@lst) (letrec ((gB5043@loop (lambda (gB5045@i gB5046@lst) (if (null? gB5046@lst) (if '#f '#f (void)) (begin (gB503f@proc gB5045@i (car gB5046@lst)) (gB5043@loop (+ gB5045@i '1) (cdr gB5046@lst))))))) (gB5043@loop '1 gB5040@lst)))) (set! gB5125@gB4fc6@for-each-with-index gB4fc6@for-each-with-index) (set! gB4fc8@rpad (lambda (gB5049@str gB504a@pad gB504b@n) (let ((gB504f@rest (- gB504b@n (string-length (format '"~a" gB5049@str))))) (let gB5055@loop ((gB5051@rest gB504f@rest) (gB5052@ret (format '"~a" gB5049@str))) (if (<= gB5051@rest '0) gB5052@ret (gB5055@loop (- gB5051@rest '1) (string-append gB5052@ret gB504a@pad))))))) (set! gB5126@gB4fc8@rpad gB4fc8@rpad) (set! gB4fca@condition-printer (lambda (gB5057@e gB5058@port) (letrec* ((gB505c@max-condition-len (apply max (map (lambda (gB506d@c) (string-length (symbol->string (record-type-name (record-rtd gB506d@c))))) (simple-conditions gB5057@e))))) (begin (display '" Condition components:\n" gB5058@port) (gB4fc6@for-each-with-index (lambda (gB505d@i gB505e@x) (let ((gB5061@rtd (record-rtd gB505e@x)) (gB5062@fields-alist (gB4fcc@record->field-alist gB505e@x))) (begin (format gB5058@port '" ~d. ~a" gB505d@i (gB4fc8@rpad (symbol->string (record-type-name gB5061@rtd)) '" " gB505c@max-condition-len)) (if (null? gB5062@fields-alist) (newline gB5058@port) (void)) (let gB5069@loop ((gB5065@first '#t) (gB5066@fields-alist gB5062@fields-alist)) (if (null? gB5066@fields-alist) '() (let ((gB506b@field (car gB5066@fields-alist))) (begin (if (not gB5065@first) (display (gB4fc8@rpad '"" '" " (+ '4 gB505c@max-condition-len)) gB5058@port) (void)) (display '"       " gB5058@port) (display (car gB506b@field) gB5058@port) (display '": " gB5058@port) (write (cdr gB506b@field) gB5058@port) (newline gB5058@port) (gB5069@loop '#f (cdr gB5066@fields-alist))))))))) (simple-conditions gB5057@e)))))) (set! gB5127@gB4fca@condition-printer gB4fca@condition-printer) (set! gB4fcc@record->field-alist (lambda (gB506f@r) (letrec* ((gB5072@ref (lambda (gB507d@rtd gB507e@i gB507f@x) (let ((gB5083@val ((record-accessor gB507d@rtd gB507e@i) gB507f@x))) (if (symbol? gB5083@val) (ungensym gB5083@val) gB5083@val))))) (let gB5077@loop ((gB5073@ret '()) (gB5074@rtd (record-rtd gB506f@r))) (if gB5074@rtd (gB5077@loop (append gB5073@ret (gB4fce@map-with-index (lambda (gB5079@i gB507a@field) (cons gB507a@field (gB5072@ref gB5074@rtd gB5079@i gB506f@r))) (vector->list (record-type-field-names gB5074@rtd)))) (record-type-parent gB5074@rtd)) gB5073@ret))))) (set! gB5128@gB4fcc@record->field-alist gB4fcc@record->field-alist) (set! gB4fce@map-with-index (lambda (gB5085@proc gB5086@lst) (let gB508f@loop ((gB5089@i '0) (gB508a@lst gB5086@lst) (gB508b@ret '())) (if (null? gB508a@lst) (reverse gB508b@ret) (gB508f@loop (+ gB5089@i '1) (cdr gB508a@lst) (cons (gB5085@proc gB5089@i (car gB508a@lst)) gB508b@ret)))))) (set! gB5129@gB4fce@map-with-index gB4fce@map-with-index) (set! gB4fd0@repl (lambda gB5091@x (letrec* ((gB5094@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (gB5097@gB5095) (lambda () (with-exception-handler (lambda (gB5099@e) ((call/cc (lambda (gB509b@gB5096) (gB5097@gB5095 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? gB5099@e) (gB4fca@condition-printer gB5099@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" gB5099@e))) (gB509b@gB5096 (lambda () (raise-continuable gB5099@e)))))))))) (lambda () (let gB50a1@loop ((gB509d@line (get-line (current-input-port))) (gB509e@accum '"")) (letrec* ((gB50a4@parentheses-ok? (lambda (gB50ab@text) (let gB50b3@loop ((gB50ad@chars (string->list gB50ab@text)) (gB50ae@p0 '0) (gB50af@p1 '0)) (if (null? gB50ad@chars) (= '0 gB50ae@p0 gB50af@p1) (let ((gB50b5@t (car gB50ad@chars))) (if (memv gB50b5@t '(#\()) (gB50b3@loop (cdr gB50ad@chars) (+ gB50ae@p0 '1) gB50af@p1) (if (memv gB50b5@t '(#\))) (gB50b3@loop (cdr gB50ad@chars) (- gB50ae@p0 '1) gB50af@p1) (if (memv gB50b5@t '(#\[)) (gB50b3@loop (cdr gB50ad@chars) gB50ae@p0 (+ gB50af@p1 '1)) (if (memv gB50b5@t '(#\])) (gB50b3@loop (cdr gB50ad@chars) gB50ae@p0 (- gB50af@p1 '1)) (gB50b3@loop (cdr gB50ad@chars) gB50ae@p0 gB50af@p1)))))))))) (gB50a6@eval-string-print (lambda (gB50a9@text) (if (not (or (string=? '"\n" gB50a9@text) (= '0 (string-length gB50a9@text)))) (write (gB4fde@eval-top-level (call-with-port (open-string-input-port gB50a9@text) read))) (void))))) (if (eof-object? gB509d@line) (begin (gB50a6@eval-string-print gB509e@accum) (exit)) (let ((gB50a7@current (string-append gB509e@accum gB509d@line))) (if (gB50a4@parentheses-ok? gB50a7@current) (gB50a6@eval-string-print gB50a7@current) (gB50a1@loop (get-line (current-input-port)) gB50a7@current)))))))))))) (newline) (gB5094@rec))))) (gB5094@rec)))) (set! gB512a@gB4fd0@repl gB4fd0@repl) (set! gB4fd2@trace-printer (gB2a03@gB28e1@make-parameter write)) (set! gB512b@gB4fd2@trace-printer gB4fd2@trace-printer) (set! gB4fd4@command-line (gB2a03@gB28e1@make-parameter (get-command-line))) (set! gB512c@gB4fd4@command-line gB4fd4@command-line) (set! gB4fd6@local-library-path (lambda (gB50b7@filename) (gB2cbd@gB2af9@library-path))) (set! gB512d@gB4fd6@local-library-path gB4fd6@local-library-path) (set! gB4fd8@load/args (lambda (gB50b9@filename . gB50bb@args) (begin (apply gB4fe8@load-r6rs-top-level gB50b9@filename 'load gB50bb@args) (void)))) (set! gB512e@gB4fd8@load/args gB4fd8@load/args) (set! gB4fda@load (lambda (gB50bd@filename) (begin (apply gB4fe8@load-r6rs-top-level gB50bd@filename 'load (gB4fd4@command-line)) (void)))) (set! gB512f@gB4fda@load gB4fda@load) (set! gB4fdc@ironscheme-build (lambda () (gB4fda@load '"ironscheme-buildscript.ss"))) (set! gB5130@gB4fdc@ironscheme-build gB4fdc@ironscheme-build) (set! gB4fde@eval-top-level (lambda (gB50bf@x) (gB4be4@gB317a@eval gB50bf@x (gB4bfb@gB31a8@interaction-environment)))) (set! gB5131@gB4fde@eval-top-level gB4fde@eval-top-level) (set! gB4fe0@compile-system-libraries (lambda () (gB4fde@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! gB5132@gB4fe0@compile-system-libraries gB4fe0@compile-system-libraries) (set! gB4fe2@compile (lambda (gB50c1@filename) (gB4fe8@load-r6rs-top-level gB50c1@filename 'compile))) (set! gB5133@gB4fe2@compile gB4fe2@compile) (set! gB4fe4@compile->closure (lambda (gB50c3@filename) (gB4fe8@load-r6rs-top-level gB50c3@filename 'closure))) (set! gB5134@gB4fe4@compile->closure gB4fe4@compile->closure) (set! gB4fe6@pre-compile-r6rs-file (lambda (gB50c5@filename) (gB4fe8@load-r6rs-top-level gB50c5@filename 'compile))) (set! gB5135@gB4fe6@pre-compile-r6rs-file gB4fe6@pre-compile-r6rs-file) (set! gB4fe8@load-r6rs-top-level (lambda (gB50c7@filename gB50c8@how . gB50cb@args) (begin (gB2cbd@gB2af9@library-path (gB4fd6@local-library-path gB50c7@filename)) (let ((gB50cd@x* (with-input-from-file gB50c7@filename (lambda () (let gB50cf@f () (let ((gB50d1@x (gB29f5@gB28c5@read-annotated))) (if (eof-object? gB50d1@x) '() (cons gB50d1@x (gB50cf@f))))))))) (let ((gB50d3@t gB50c8@how)) (if (memv gB50d3@t '(closure)) (gB4bfa@gB31a6@pre-compile-r6rs-top-level gB50cd@x*) (if (memv gB50d3@t '(load)) (begin (gB4fd4@command-line (cons gB50c7@filename (car gB50cb@args))) (gB2a04@gB28e3@mosh-cache-dir (create-mosh-cache-dir)) (if (gB2a04@gB28e3@mosh-cache-dir) (gensym-prefix-set! (gB4fee@prefix-inc! (string-append (gB2a04@gB28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (gB50d5@file) ((call/cc (lambda (gB50d9@gB50d7) (lambda () (with-exception-handler (lambda (gB50db@c) ((call/cc (lambda (gB50dd@gB50d8) (gB50d9@gB50d7 (lambda () (if '#t '#t (gB50dd@gB50d8 (lambda () (raise-continuable gB50db@c)))))))))) (lambda () (delete-file (string-append (gB2a04@gB28e3@mosh-cache-dir) '"/" gB50d5@file))))))))) (directory-list (gB2a04@gB28e3@mosh-cache-dir))) (void)) (let ((gB50df@compiled (gB4bf9@gB31a4@compile-r6rs-top-level gB50cd@x*))) (begin (if (and (gB2a04@gB28e3@mosh-cache-dir) (not (symbol-value '%disable-acc))) (gB2cc1@gB2b01@serialize-all gB29fe@gB28d7@serialize-library gB2a5a@gB2a13@compile-core-expr) (void)) (gB50df@compiled)))) (if (memv gB50d3@t '(compile)) (begin (gB4bf9@gB31a4@compile-r6rs-top-level gB50cd@x*) (gB2cc1@gB2b01@serialize-all gB29fe@gB28d7@serialize-library gB2a5a@gB2a13@compile-core-expr)) (if '#f '#f (void)))))))))) (set! gB5136@gB4fe8@load-r6rs-top-level gB4fe8@load-r6rs-top-level) (set! gB4fea@load-r6rs-top-level-sexp (lambda (gB50e1@import-spec gB50e2@thunk) (let ((gB50ed@gB50e6 gB2cbd@gB2af9@library-path) (gB50ee@gB50e8 gB2a04@gB28e3@mosh-cache-dir) (gB50ef@gB50ea (gB4fd6@local-library-path '"")) (gB50f0@gB50ec (create-mosh-cache-dir))) (let ((gB50f5@swap (lambda () (begin (let ((gB50f7@t (gB50ed@gB50e6))) (begin (gB50ed@gB50e6 gB50ef@gB50ea) (set! gB50ef@gB50ea gB50f7@t))) (let ((gB50f9@t (gB50ee@gB50e8))) (begin (gB50ee@gB50e8 gB50f0@gB50ec) (set! gB50f0@gB50ec gB50f9@t))))))) (dynamic-wind gB50f5@swap (lambda () (begin (if (gB2a04@gB28e3@mosh-cache-dir) (gensym-prefix-set! (gB4fee@prefix-inc! (string-append (gB2a04@gB28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((gB50ff@gB50fc gB4fd4@command-line) (gB5100@gB50fe '())) (let ((gB5103@swap (lambda () (let ((gB5105@t (gB50ff@gB50fc))) (begin (gB50ff@gB50fc gB5100@gB50fe) (set! gB5100@gB50fe gB5105@t)))))) (dynamic-wind gB5103@swap (lambda () ((gB4bf9@gB31a4@compile-r6rs-top-level (list (cons 'import gB50e1@import-spec) (list gB50e2@thunk))))) gB5103@swap))))) gB50f5@swap))))) (set! gB5137@gB4fea@load-r6rs-top-level-sexp gB4fea@load-r6rs-top-level-sexp) (set! gB4fec@prefix-inc (lambda (gB5107@prefix-string) (let ((gB5109@prefix (symbol->string gB5107@prefix-string))) (let ((gB510b@len (string-length gB5109@prefix))) (let gB5113@loop ((gB510d@i (- gB510b@len '1)) (gB510e@carry? '#t) (gB510f@accum '())) (if (< gB510d@i '0) (string->symbol (list->string (if gB510e@carry? (cons '#\a gB510f@accum) gB510f@accum))) (if gB510e@carry? (let ((gB5115@next-integer (+ '1 (char->integer (string-ref gB5109@prefix gB510d@i))))) (if (= gB5115@next-integer '123) (gB5113@loop (- gB510d@i '1) '#f (cons '#\A gB510f@accum)) (if (= gB5115@next-integer '91) (gB5113@loop (- gB510d@i '1) '#t (cons '#\a gB510f@accum)) (gB5113@loop (- gB510d@i '1) '#f (cons (integer->char gB5115@next-integer) gB510f@accum))))) (gB5113@loop (- gB510d@i '1) '#f (cons (string-ref gB5109@prefix gB510d@i) gB510f@accum))))))))) (set! gB5138@gB4fec@prefix-inc gB4fec@prefix-inc) (set! gB4fee@prefix-inc! (lambda (gB5117@file) (begin (if (not (file-exists? gB5117@file)) (call-with-output-file gB5117@file (lambda (gB5119@port) (write 'd gB5119@port))) (void)) (let ((gB511b@prefix (call-with-input-file gB5117@file read))) (if (main-vm?) (let ((gB511d@next-prefix (gB4fec@prefix-inc gB511b@prefix))) (begin (call-with-port (open-file-output-port gB5117@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (gB511f@port) (write gB511d@next-prefix gB511f@port))) gB511b@prefix)) gB511b@prefix))))) (set! gB5139@gB4fee@prefix-inc! gB4fee@prefix-inc!) (begin (gB2cc2@gB2b03@current-precompiled-library-loader gB29ff@gB28d9@load-serialized-library) (set-symbol-value! 'load gB4fda@load) (set-symbol-value! 'pre-compile-r6rs-file gB4fe6@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs gB4fde@eval-top-level) (set-symbol-value! 'int-env-syms gB4bdb@gB3168@interaction-environment-symbols) (set-symbol-value! 'expanded2core gB2a59@gB2a11@expanded->core) (set-symbol-value! 'trace-printer gB4fd2@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (gB4fef@c) (condition (gB4f1b@gB4d25@make-non-continuable-violation) (gB4f11@gB4d0c@make-who-condition 'raise) (gB4ed5@gB4c6d@make-message-condition '"returned from non-continuable exception") (gB4f07@gB4cf1@make-irritants-condition (list gB4fef@c))))) (gB4fc4@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (gB4fc4@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (gB4fc2@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (gB4fc2@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (gB4fc2@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((gB4ff1@prefix (lambda (gB4ff3@ext gB4ff4@ls) (append (map (lambda (gB4ff7@x) (string-append gB4ff3@ext gB4ff7@x)) gB4ff4@ls) gB4ff4@ls)))) (gB2cbe@gB2afb@library-extensions (gB4ff1@prefix '".mosh" (gB2cbe@gB2afb@library-extensions)))) (current-exception-handler (lambda (gB4ff9@c) (begin (if (condition? gB4ff9@c) (gB4fca@condition-printer gB4ff9@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" gB4ff9@c)) gB4ff9@c))) (if ((call/cc (lambda (gB4ffd@gB4ffb) (lambda () (with-exception-handler (lambda (gB4fff@c) ((call/cc (lambda (gB5001@gB4ffc) (gB4ffd@gB4ffb (lambda () (if '#t '#f (gB5001@gB4ffc (lambda () (raise-continuable gB4fff@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (gB4fea@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (gB4fd4@command-line)) (let ((gB500b@gB5004 gB4fd4@command-line) (gB500c@gB5006 gB2a04@gB28e3@mosh-cache-dir) (gB500d@gB5008 '()) (gB500e@gB500a (create-mosh-cache-dir))) (let ((gB5013@swap (lambda () (begin (let ((gB5015@t (gB500b@gB5004))) (begin (gB500b@gB5004 gB500d@gB5008) (set! gB500d@gB5008 gB5015@t))) (let ((gB5017@t (gB500c@gB5006))) (begin (gB500c@gB5006 gB500e@gB500a) (set! gB500e@gB500a gB5017@t))))))) (dynamic-wind gB5013@swap (lambda () (begin (if (gB2a04@gB28e3@mosh-cache-dir) (gensym-prefix-set! (gB4fee@prefix-inc! (string-append (gB2a04@gB28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (gB4fd0@repl))) gB5013@swap))) (begin (gB2cbd@gB2af9@library-path (gB4fd6@local-library-path (car (gB4fd4@command-line)))) (set! gB4fc0@x* (with-input-from-file (car (gB4fd4@command-line)) (lambda () (let gB5019@f () (let ((gB501b@x (gB29f5@gB28c5@read-annotated))) (if (eof-object? gB501b@x) '() (cons gB501b@x (gB5019@f)))))))) (gB4fd4@command-line (cons (car (gB4fd4@command-line)) (cdr (gB4fd4@command-line)))) (gB2a04@gB28e3@mosh-cache-dir (create-mosh-cache-dir)) (if (gB2a04@gB28e3@mosh-cache-dir) (gensym-prefix-set! (gB4fee@prefix-inc! (string-append (gB2a04@gB28e3@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (gB501d@file) ((call/cc (lambda (gB5021@gB501f) (lambda () (with-exception-handler (lambda (gB5023@c) ((call/cc (lambda (gB5025@gB5020) (gB5021@gB501f (lambda () (if '#t '#t (gB5025@gB5020 (lambda () (raise-continuable gB5023@c)))))))))) (lambda () (delete-file (string-append (gB2a04@gB28e3@mosh-cache-dir) '"/" gB501d@file))))))))) (directory-list (gB2a04@gB28e3@mosh-cache-dir))) (void)) (let ((gB5027@compiled (gB4bf9@gB31a4@compile-r6rs-top-level gB4fc0@x*))) (begin (if (and (gB2a04@gB28e3@mosh-cache-dir) (not (symbol-value '%disable-acc))) (gB2cc1@gB2b01@serialize-all gB29fe@gB28d7@serialize-library gB2a5a@gB2a13@compile-core-expr) (void)) (gB5027@compiled))))))))
